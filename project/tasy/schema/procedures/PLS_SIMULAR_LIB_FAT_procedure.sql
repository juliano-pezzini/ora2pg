-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_simular_lib_fat ( nr_seq_lib_fat_p pls_lib_faturamento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_evento_restritivo_w		pls_parametro_faturamento.ie_evento_restritivo%type;
nr_seq_evento_w			pls_evento_faturamento.nr_sequencia%type;
nr_seq_lib_fat_conta_evento_w	pls_lib_fat_conta_evento.nr_sequencia%type;
ie_pagador_incidente_w		pls_lib_fat_conta_evento.ie_pagador_incidente%type;
nr_seq_segurado_w		pls_conta.nr_seq_segurado%type;
dt_item_w			timestamp;
qt_evento_regra_w		integer;

c01 CURSOR(	nr_seq_lib_fat_w	pls_lib_faturamento.nr_sequencia%type) FOR
	SELECT	w.nr_seq_conta_proc,
		w.nr_seq_conta_mat,
		z.nr_sequencia,
		x.nr_seq_conta,
		w.nr_sequencia nr_seq_conta_pos_estab
	from	pls_lib_fat_conta x,
		pls_lib_fat_conta_pos z,
		pls_conta_pos_estabelecido w
	where	x.nr_sequencia		= z.nr_seq_lib_fat_conta
	and	w.nr_sequencia		= z.nr_seq_conta_pos_estab
	and	x.nr_seq_lib_fat 	= nr_seq_lib_fat_w;

c05 CURSOR(	nr_seq_evento_fat_w	pls_evento_faturamento.nr_sequencia%type) FOR
	SELECT	nr_seq_regra
	from	pls_regra_fat_evento	a
	where	a.nr_seq_evento = nr_seq_evento_w;

c03 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_regra
	from	pls_regra_faturamento a
	where	a.ie_situacao = 'A';
BEGIN
delete	FROM pls_lib_fat_conta_evento
where	nr_seq_lib_fat_conta_pos in (	SELECT	z.nr_sequencia
					from	pls_lib_fat_conta x,
						pls_lib_fat_conta_pos z
					where	x.nr_sequencia		= z.nr_seq_lib_fat_conta
					and	x.nr_seq_lib_fat 	= nr_seq_lib_fat_p);

select	coalesce(max(ie_evento_restritivo),'N')
into STRICT	ie_evento_restritivo_w
from	pls_parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_p;

for r_c01_w in c01( nr_seq_lib_fat_p ) loop

	select	nr_seq_segurado
	into STRICT	nr_seq_segurado_w
	from	pls_conta
	where	nr_sequencia	= r_c01_w.nr_seq_conta;

	if (r_c01_w.nr_seq_conta_proc IS NOT NULL AND r_c01_w.nr_seq_conta_proc::text <> '') then
		select	a.dt_procedimento
		into STRICT	dt_item_w
		from	pls_conta_proc_v a
		where	a.nr_sequencia	= r_c01_w.nr_seq_conta_proc;

	elsif (r_c01_w.nr_seq_conta_mat IS NOT NULL AND r_c01_w.nr_seq_conta_mat::text <> '') then
		select	a.dt_atendimento
		into STRICT	dt_item_w
		from	pls_conta_mat_v a
		where	a.nr_sequencia	= r_c01_w.nr_seq_conta_mat;
	end if;

	if (ie_evento_restritivo_w = 'S') then
		for r_c03_w in c03 loop
			nr_seq_evento_w := pls_obter_evento_faturamento( r_c01_w.nr_seq_conta_proc, r_c01_w.nr_seq_conta_mat, dt_item_w, nr_seq_evento_w, r_c03_w.nr_seq_regra, null, r_c01_w.nr_seq_conta_pos_estab);

			if (nr_seq_evento_w IS NOT NULL AND nr_seq_evento_w::text <> '') then
				select	nextval('pls_lib_fat_conta_evento_seq')
				into STRICT	nr_seq_lib_fat_conta_evento_w
				;
				insert into pls_lib_fat_conta_evento(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_lib_fat_conta_pos,
					nr_seq_regra_fat,
					nr_seq_evento)
				SELECT	nr_seq_lib_fat_conta_evento_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					r_c01_w.nr_sequencia,
					r_c03_w.nr_seq_regra,
					nr_seq_evento_w
				;
				ie_pagador_incidente_w	:= pls_obter_se_pagador_lote_fat(null, nr_seq_segurado_w, r_c01_w.nr_seq_conta, nr_seq_evento_w, nr_seq_lib_fat_conta_evento_w);
				update	pls_lib_fat_conta_evento
				set	ie_pagador_incidente	= ie_pagador_incidente_w
				where	nr_sequencia		= nr_seq_lib_fat_conta_evento_w;
			end if;
		end loop;

	elsif (ie_evento_restritivo_w = 'N') then
		nr_seq_evento_w := pls_obter_evento_faturamento( r_c01_w.nr_seq_conta_proc, r_c01_w.nr_seq_conta_mat, dt_item_w, nr_seq_evento_w, null, null);

		if (nr_seq_evento_w IS NOT NULL AND nr_seq_evento_w::text <> '') then
			select	count(1)
			into STRICT	qt_evento_regra_w
			from	pls_regra_fat_evento
			where	nr_seq_evento = nr_seq_evento_w;

			if (qt_evento_regra_w > 0) then
				for r_c05_w in c05( nr_seq_evento_w ) loop

					select	nextval('pls_lib_fat_conta_evento_seq')
					into STRICT	nr_seq_lib_fat_conta_evento_w
					;

					insert into pls_lib_fat_conta_evento(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_lib_fat_conta_pos,
						nr_seq_regra_fat,
						nr_seq_evento)
					SELECT	nr_seq_lib_fat_conta_evento_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						r_c01_w.nr_sequencia,
						r_c05_w.nr_seq_regra,
						nr_seq_evento_w
					;

					ie_pagador_incidente_w	:= pls_obter_se_pagador_lote_fat(null, nr_seq_segurado_w, r_c01_w.nr_seq_conta, nr_seq_evento_w, nr_seq_lib_fat_conta_evento_w);

					update	pls_lib_fat_conta_evento
					set	ie_pagador_incidente	= ie_pagador_incidente_w
					where	nr_sequencia		= nr_seq_lib_fat_conta_evento_w;

				end loop;
			else
				select	nextval('pls_lib_fat_conta_evento_seq')
				into STRICT	nr_seq_lib_fat_conta_evento_w
				;

				insert into pls_lib_fat_conta_evento(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_lib_fat_conta_pos,
					nr_seq_regra_fat,
					nr_seq_evento)
				SELECT	nr_seq_lib_fat_conta_evento_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					r_c01_w.nr_sequencia,
					null,
					nr_seq_evento_w
				;

				ie_pagador_incidente_w	:= pls_obter_se_pagador_lote_fat(null, nr_seq_segurado_w, r_c01_w.nr_seq_conta, nr_seq_evento_w, nr_seq_lib_fat_conta_evento_w);

				update	pls_lib_fat_conta_evento
				set	ie_pagador_incidente	= ie_pagador_incidente_w
				where	nr_sequencia		= nr_seq_lib_fat_conta_evento_w;
			end if;
		end if;
	end if;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_simular_lib_fat ( nr_seq_lib_fat_p pls_lib_faturamento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

