-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE agenda_cirurgica_after_post ( nr_seq_agenda_p bigint, nr_seq_autorizacao_p INOUT bigint, ie_converter_convenio_p text, ie_consiste_equip_p INOUT text, ds_qtdade_agendamento_p INOUT text, ds_questiona_opme_p INOUT text, ie_foca_avaliacao_p INOUT text) AS $body$
DECLARE

															
cd_estabelecimento_w			integer;
cd_perfil_w				integer;
nm_usuario_w				varchar(15);
ie_gerar_opme_w				varchar(15);
ie_equip_classif_w				varchar(15);
gerar_opme_w				varchar(15);
ie_consiste_equipamento_w			varchar(15);
ie_modo_obter_dados_sangue_w		varchar(15);
ie_calculo_internacao_w			varchar(15);
ie_verifica_opme_w				varchar(15);
ie_gerar_itens_opme_autor_w			varchar(15);
ie_gerar_itens_regra_proc_w			varchar(15);
ie_gera_proc_associado_w			varchar(15);
ie_atualiza_status_autor_w			varchar(15);
ie_consistir_pastas_w			varchar(15);
nr_tipo_avaliacao_w			bigint;
ie_atualiza_data_prevista_w			varchar(15);
cd_pf_usuario_w				varchar(10);
nr_seq_proc_interno_w			bigint;	
cd_procedimento_w			bigint;	
cd_convenio_w				integer;	
cd_categoria_w				varchar(10);
cd_plano_w				varchar(10);
cd_medico_exec_w				varchar(10);	
ie_origem_proced_w			bigint;
qt_idade_paciente_w			smallint;
nr_atendimento_w				bigint;
ie_status_agenda_w			varchar(15);
ie_cobertura_conv_w			varchar(15);
dt_envio_orient_w				timestamp;
qt_registros_w				bigint;
ds_consistencia_w				varchar(4000);
ds_erro_w				varchar(4000);
qt_autor_w				varchar(15);
cd_pessoa_fisica_p			varchar(15);
ie_gerar_cirurgia_w			varchar(20);
nr_cirurgia_w				bigint;

expressao1_w	varchar(255) := obter_desc_expressao_idioma(506420, null, wheb_usuario_pck.get_nr_seq_idioma);--Deseja registrar as OPME's?
BEGIN

cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;
cd_perfil_w		:= wheb_usuario_pck.get_cd_perfil;
nm_usuario_w		:= wheb_usuario_pck.get_nm_usuario;

select	max(obter_pf_usuario(nm_usuario_w,'C'))
into STRICT		cd_pf_usuario_w
;

ie_gerar_opme_w := Obter_Param_Usuario(871, 85, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_opme_w);
ie_equip_classif_w := Obter_Param_Usuario(871, 100, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_equip_classif_w);
gerar_opme_w := Obter_Param_Usuario(871, 201, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, gerar_opme_w);
ie_consiste_equipamento_w := Obter_Param_Usuario(871, 220, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_consiste_equipamento_w);
ie_modo_obter_dados_sangue_w := Obter_Param_Usuario(871, 224, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_modo_obter_dados_sangue_w);
ie_calculo_internacao_w := Obter_Param_Usuario(871, 239, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_calculo_internacao_w);
ie_verifica_opme_w := Obter_Param_Usuario(871, 314, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_verifica_opme_w);
ie_gerar_itens_opme_autor_w := Obter_Param_Usuario(871, 396, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_itens_opme_autor_w);
ie_gerar_itens_regra_proc_w := Obter_Param_Usuario(871, 382, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_itens_regra_proc_w);
ie_gera_proc_associado_w := Obter_Param_Usuario(871, 397, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gera_proc_associado_w);
ie_atualiza_status_autor_w := Obter_Param_Usuario(871, 431, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_atualiza_status_autor_w);
ie_consistir_pastas_w := Obter_Param_Usuario(871, 454, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_consistir_pastas_w);
nr_tipo_avaliacao_w := Obter_Param_Usuario(871, 693, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, nr_tipo_avaliacao_w);
ie_atualiza_data_prevista_w := Obter_Param_Usuario(871, 747, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_atualiza_data_prevista_w);
ie_gerar_cirurgia_w := obter_param_usuario(871, 839, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_cirurgia_w);

select	max(nr_seq_proc_interno),
			max(cd_procedimento),
			max(cd_convenio),
			max(cd_categoria),
			max(cd_plano),
			max(cd_medico_exec),
			max(ie_origem_proced),
			max(qt_idade_paciente),
			max(nr_atendimento),
			max(ie_status_agenda),
			max(ie_cobertura_conv),
			max(dt_envio_orient),
			max(cd_pessoa_fisica),
			max(nr_cirurgia)
into STRICT		nr_seq_proc_interno_w,
			cd_procedimento_w,
			cd_convenio_w,
			cd_categoria_w,
			cd_plano_w,
			cd_medico_exec_w,
			ie_origem_proced_w,
			qt_idade_paciente_w,
			nr_atendimento_w,
			ie_status_agenda_w,
			ie_cobertura_conv_w,
			dt_envio_orient_w,
			cd_pessoa_fisica_p,
			nr_cirurgia_w
from		agenda_paciente
where		nr_sequencia = nr_seq_agenda_p;
			

if (ie_gera_proc_associado_w = 'S') then
	CALL gerar_proc_associado(nr_seq_proc_interno_w,cd_convenio_w,cd_categoria_w,cd_plano_w,cd_medico_exec_w,ie_origem_proced_w,qt_idade_paciente_w,null,nr_seq_agenda_p,nm_usuario_w);
end if;

if (ie_atualiza_data_prevista_w = 'S') then
	CALL atualiza_data_prev_agenda_cir(nr_seq_agenda_p,nr_atendimento_w);
end if;	

CALL gerar_escala_partic_cir(nr_seq_agenda_p,nm_usuario_w,cd_estabelecimento_w);

if (coalesce(nr_seq_autorizacao_p,0) > 0) then
	select 	count(*)
	into STRICT 	qt_autor_w
	from  	autorizacao_convenio a 
	where    a.cd_pessoa_fisica =  coalesce(cd_pessoa_fisica_p,a.cd_pessoa_fisica)
	and      a.nr_sequencia 	 =  nr_seq_autorizacao_p;


	if (coalesce(qt_autor_w,0) > 0) then
		CALL vincula_autor_agenda_cir(nr_seq_autorizacao_p,nr_seq_agenda_p);
		nr_seq_autorizacao_p := 0;
	end if;	
end if;


if (ie_status_agenda_w <> 'C') and (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
	CALL gerar_autor_regra(null,null,null,null,null,null,'AP',nm_usuario_w,nr_seq_agenda_p,nr_seq_proc_interno_w,null,null,null,null,'','','');
	if (gerar_opme_w = 'S') then
		select	count(*)
		into STRICT		qt_registros_w
		from 		agenda_pac_opme
		where 	nr_seq_agenda = nr_seq_agenda_p
		and		coalesce(ie_origem_inf,'I') = 'I';
		
		if (qt_registros_w > 0) then
			CALL gerar_autor_opme_agenda_after(nr_seq_agenda_p,nm_usuario_w);
		end if;
	end if;

	if (ie_atualiza_status_autor_w = 'S') then
		CALL atualiza_status_autor_agenda(nr_seq_agenda_p,cd_estabelecimento_w,nm_usuario_w);
	end if;	
end if;


if (ie_modo_obter_dados_sangue_w = 'P') and (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '')	then
	CALL atualizar_agenda_bolsas_sangue(nr_seq_agenda_p,nr_seq_proc_interno_w,nm_usuario_w);
end if;

if (ie_consiste_equipamento_w = 'S') then
	CALL consistir_agenda_cirurgica(nr_seq_agenda_p,ie_equip_classif_w,cd_estabelecimento_w,nm_usuario_w);
	
	select	count(*)
	into STRICT		qt_registros_w
	from 		consistencia_agenda_cir
	where 	nr_seq_agenda = nr_seq_agenda_p;
	
	if (qt_registros_w > 0) then
		ie_consiste_equip_p := 'S';
	end if;	
end if;

if (ie_calculo_internacao_w = 'S') then
	CALL calcula_data_hora_chegada(nr_seq_agenda_p);
end if;	

select	count(*)
into STRICT		qt_registros_w
from 		agenda_pac_pedido
where 	nr_seq_agenda = nr_seq_agenda_p;

if (qt_registros_w > 0) then
	ds_erro_w := gerar_agenda_proced_kit(nr_seq_agenda_p, cd_pf_usuario_w, nm_usuario_w, ds_erro_w);
end if;

if (ie_gerar_itens_regra_proc_w = 'S') then
	select	count(*)
	into STRICT		qt_registros_w
	from 		agenda_pac_opme
	where 	nr_seq_agenda = nr_seq_agenda_p;
	if (qt_registros_w > 0) then
		CALL gerar_itens_regra_opme(nr_seq_agenda_p,nm_usuario_w);
	end if;	
end if;

if (ie_gerar_itens_opme_autor_w = 'S') and (ie_gerar_opme_w <> 'N') then
	CALL gerar_autor_cirurgia_opme(nr_seq_agenda_p,'0',cd_estabelecimento_w,nm_usuario_w,ie_gerar_opme_w);
end if;

CALL enviar_email_regra(nr_seq_agenda_p,'SA',nm_usuario_w,cd_estabelecimento_w);

ds_consistencia_w := consistir_qtdade_agendamento(nr_seq_agenda_p, nm_usuario_w, ds_consistencia_w);
if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
	ds_qtdade_agendamento_p := ds_consistencia_w;
end if;

if (ie_consistir_pastas_w = 'S') then
	CALL consistir_pastas_agenda(nr_seq_agenda_p,cd_estabelecimento_w,nm_usuario_w);
end if;

if (ie_verifica_opme_w = 'S') then
	select	count(*)
	into STRICT		qt_registros_w
	from    	agenda_pac_opme
	where   	nr_seq_agenda = nr_seq_agenda_p;
	if (qt_registros_w = 0) then
		ds_questiona_opme_p	:= expressao1_w;
	end if;
end if;	
if (nr_tipo_avaliacao_w > 0) then
	select	count(*)
	into STRICT		qt_registros_w
	from 		med_avaliacao_paciente
	where 	nr_seq_agenda_pac 		= nr_seq_agenda_p
	and 		nr_seq_tipo_avaliacao 	= nr_tipo_avaliacao_w
	and 		coalesce(ie_situacao,'A') <> 'I';
	if (qt_registros_w = 0) then
		ie_foca_avaliacao_p	:= 'S';
	end if;
end if;	
		
if (ie_converter_convenio_p = 'S') then
	CALL converter_conv_part_age_pac(nr_seq_agenda_p,0,nm_usuario_w,'P');
end if;	

if (ie_gerar_cirurgia_w	= 'S') and (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (coalesce(nr_cirurgia_w::text, '') = '') and (pkg_i18n.get_user_locale() = 'en_AU') then
	begin
		CALL GERAR_CIRURGIA_AGENDA_HTML5(nr_seq_agenda_p);
	exception
	when others then
		null;
	end;
end if;
		
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE agenda_cirurgica_after_post ( nr_seq_agenda_p bigint, nr_seq_autorizacao_p INOUT bigint, ie_converter_convenio_p text, ie_consiste_equip_p INOUT text, ds_qtdade_agendamento_p INOUT text, ds_questiona_opme_p INOUT text, ie_foca_avaliacao_p INOUT text) FROM PUBLIC;

