-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_agenda_cirurgica ( nr_seq_vaga_p bigint, nr_seq_agenda_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
cd_pessoa_fisica_w			varchar(10);
cd_pessoa_fisica_age_w			varchar(10);
cd_convenio_w				bigint;
cd_categoria_w				varchar(10);
cd_plano_convenio_w			varchar(10);
ds_cod_usuario_w			varchar(30);
ds_compl_w				varchar(30);
dt_validade_w      		timestamp;
cd_senha_w     			varchar(20);
cd_tipo_agenda_w			bigint;
dt_nascimento_w				timestamp;
ds_idade_w				varchar(40);
ie_permite_alterar_status_w		varchar(1);
ie_status_normal_pf_w			varchar(1); --Criado para o sirio, pois para pessoa fisica tem que atualizar para normal e quando nao tem pf trata o parametro 151. 
ie_atualiza_dt_chegada_prev_w		varchar(1);
dt_prevista_w				timestamp;
qt_idade_W				bigint;
ds_observacao_w				varchar(4000);
ie_atualiza_observacao_w		varchar(1);


BEGIN 
 
select		max(cd_pessoa_fisica), 
		max(cd_convenio), 
		max(cd_categoria), 
		max(cd_plano_convenio), 
		max(ds_cod_usuario),     
		max(ds_compl), 
		max(dt_validade),       
		max(cd_senha), 
		max(cd_tipo_agenda), 
		max(substr(obter_idade(to_date(obter_dados_pf(cd_pessoa_fisica,'DN'),'dd/mm/yyyy'),clock_timestamp(),'A'),1,40)), 
		max(dt_prevista), 
		substr(max(ds_observacao),1,4000) 
into STRICT		cd_pessoa_fisica_w, 
		cd_convenio_w, 
		cd_categoria_w, 
		cd_plano_convenio_w, 
		ds_cod_usuario_w, 
		ds_compl_w, 
		dt_validade_w, 
		cd_senha_w, 
		cd_tipo_agenda_w, 
		ds_idade_w, 
		dt_prevista_w, 
		ds_observacao_w 
from	gestao_vaga 
where	nr_sequencia = nr_seq_vaga_p;
 
select	max(dt_nascimento) 
into STRICT	dt_nascimento_w 
from	pessoa_fisica 
where 	cd_pessoa_fisica = cd_pessoa_fisica_w;
 
if (cd_tipo_agenda_w = 5) then	 
	update	agenda_consulta 
	set	ie_status_agenda = 'N' 
	where	nr_sequencia		= nr_seq_agenda_p 
	and 	coalesce(cd_pessoa_fisica::text, '') = '';
	 
	update	agenda_consulta 
	set	cd_pessoa_fisica	= cd_pessoa_fisica_w, 
		cd_convenio		= coalesce(cd_convenio_w,cd_convenio), 
		cd_categoria		= coalesce(cd_categoria_w,cd_categoria), 
		cd_plano		= coalesce(cd_plano_convenio_w,cd_plano), 
		cd_usuario_convenio	= coalesce(ds_cod_usuario_w, cd_usuario_convenio), 
		nm_usuario		= nm_usuario_p, 
		dt_atualizacao		= clock_timestamp(), 
		dt_validade_carteira	= dt_validade_w 
	where	nr_sequencia		= nr_seq_agenda_p;	
else 
	ie_permite_alterar_status_w := obter_param_usuario(871, 151, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_permite_alterar_status_w);
	ie_status_normal_pf_w := obter_param_usuario(1002, 82, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_status_normal_pf_w);	
	ie_atualiza_dt_chegada_prev_w := obter_param_usuario(1002, 83, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_atualiza_dt_chegada_prev_w);		
	ie_atualiza_observacao_w := obter_param_usuario(1002, 116, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_atualiza_observacao_w);		
	if (ie_permite_alterar_status_w = 'S') then	 
		update	agenda_paciente 
		set	ie_status_agenda = 'N' 
		where	nr_sequencia		= nr_seq_agenda_p 
		and 	coalesce(cd_pessoa_fisica::text, '') = '';		
	end if;
 
	if (ie_status_normal_pf_w = 'S') then	 
		update	agenda_paciente 
		set	ie_status_agenda = 'N' 
		where	nr_sequencia		= nr_seq_agenda_p 
		and 	(cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> '');	
	end if;
	 
	if (ie_atualiza_dt_chegada_prev_w = 'S') then	 
		update	agenda_paciente 
		set	dt_chegada_prev = dt_prevista_w 
		where	nr_sequencia	= nr_seq_agenda_p;	
	end if;
 
	 
	if (substr(ds_idade_w,1,3) = '0') then 
		ds_idade_w := null;
	end if;
	 
	update	agenda_paciente 
	set	cd_pessoa_fisica	= cd_pessoa_fisica_w, 
		dt_nascimento_pac	= coalesce(dt_nascimento_w,dt_nascimento_pac), 
		qt_idade_paciente	= coalesce(substr(ds_idade_w,1,3),qt_idade_paciente), 
		cd_convenio		= coalesce(cd_convenio_w,cd_convenio), 
		cd_categoria		= coalesce(cd_categoria_w,cd_categoria), 
		cd_plano		= coalesce(cd_plano_convenio_w,cd_plano), 
		cd_usuario_convenio	= coalesce(ds_cod_usuario_w, cd_usuario_convenio), 
		nm_usuario		= nm_usuario_p, 
		dt_atualizacao		= clock_timestamp(), 
		dt_validade_carteira	= dt_validade_w, 
		ds_observacao		= CASE WHEN ie_atualiza_observacao_w='S' THEN  ds_observacao_w  ELSE ds_observacao END  
	where	nr_sequencia	= nr_seq_agenda_p;
 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_agenda_cirurgica ( nr_seq_vaga_p bigint, nr_seq_agenda_p bigint, nm_usuario_p text) FROM PUBLIC;

