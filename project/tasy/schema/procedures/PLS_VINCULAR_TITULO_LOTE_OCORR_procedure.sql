-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_vincular_titulo_lote_ocorr ( ds_lista_titulo_p text, ie_tipo_titulo_p text, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_lote_p pls_lote_evento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_lote_pagamento_p pls_lote_pagamento.nr_sequencia%type) AS $body$
DECLARE


cd_conta_contabil_w		varchar(20);
cd_cgc_w			varchar(14);
cd_pessoa_fisica_w		varchar(10);
vl_saldo_titulo_w		double precision;
nr_titulo_w			titulo_pagar.nr_titulo%type;
nr_seq_evento_movto_w		bigint;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
qt_titulo_w			integer;
nr_seq_pag_item_w		pls_pagamento_item.nr_sequencia%type;
nr_seq_pagamento_prest_w	pls_pagamento_prestador.nr_sequencia%type;
dt_vencimento_w			timestamp;
nr_seq_lote_evento_w		pls_lote_evento.nr_sequencia%type;
dt_inicio_comp_w		pls_lote_pagamento.dt_inicio_comp%type;
dt_fim_comp_w			pls_lote_pagamento.dt_fim_comp%type;
dt_mes_competencia_w		pls_lote_pagamento.dt_mes_competencia%type;

C01 CURSOR FOR
	SELECT	nr_titulo
	from	titulo_pagar
	where	Obter_Se_Contido(nr_titulo,ds_lista_titulo_p) = 'S'
	and	ie_tipo_titulo_p	= 'P'
	
union all

	SELECT	nr_titulo
	from	titulo_receber
	where	Obter_Se_Contido(nr_titulo,ds_lista_titulo_p) = 'S'
	and	ie_tipo_titulo_p	= 'R';


BEGIN

nr_seq_lote_evento_w	:= nr_seq_lote_p;

open C01;
loop
fetch C01 into
	nr_titulo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	if (ie_tipo_titulo_p = 'P') then
		select	max(cd_pessoa_fisica),
			max(cd_cgc),
			max(vl_saldo_titulo),
			max(dt_vencimento_original)
		into STRICT	cd_pessoa_fisica_w,
			cd_cgc_w,
			vl_saldo_titulo_w,
			dt_vencimento_w
		from	titulo_pagar
		where	nr_titulo	= nr_titulo_w;

		select	count(1)
		into STRICT	qt_titulo_w
		from	pls_evento_movimento
		where	nr_tit_pagar_vinculado	= nr_titulo_w
		and	coalesce(ie_cancelamento::text, '') = '';

		if (qt_titulo_w > 0) then
			goto final;
		end if;
	else
		select	max(cd_pessoa_fisica),
			max(cd_cgc),
			max(vl_saldo_titulo),
			max(dt_vencimento)
		into STRICT	cd_pessoa_fisica_w,
			cd_cgc_w,
			vl_saldo_titulo_w,
			dt_vencimento_w
		from	titulo_receber
		where	nr_titulo	= nr_titulo_w;

		select	count(1)
		into STRICT	qt_titulo_w
		from	pls_evento_movimento
		where	nr_tit_rec_vinculado	= nr_titulo_w
		and	coalesce(ie_cancelamento::text, '') = '';

		if (qt_titulo_w > 0) then
			goto final;
		end if;
	end if;

	if (nr_seq_lote_pagamento_p IS NOT NULL AND nr_seq_lote_pagamento_p::text <> '') then
		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			select	max(b.nr_sequencia)
			into STRICT	nr_seq_prestador_w
			from	pls_prestador b,
				pls_pagamento_prestador a
			where	a.nr_seq_prestador	= b.nr_sequencia
			and	b.cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	a.nr_seq_lote		= nr_seq_lote_pagamento_p;
		elsif (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
			select	max(b.nr_sequencia)
			into STRICT	nr_seq_prestador_w
			from	pls_prestador b,
				pls_pagamento_prestador a
			where	a.nr_seq_prestador	= b.nr_sequencia
			and	b.cd_cgc		= cd_cgc_w
			and	a.nr_seq_lote		= nr_seq_lote_pagamento_p;
		else
			nr_seq_prestador_w	:= null;
		end if;

		if (coalesce(nr_seq_prestador_w::text, '') = '') then
			goto final;
		end if;
	else
		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_prestador_w
			from	pls_prestador
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		elsif (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_prestador_w
			from	pls_prestador
			where	cd_cgc	= cd_cgc_w;
		else
			nr_seq_prestador_w	:= null;
		end if;

		if (coalesce(nr_seq_prestador_w::text, '') = '') then
			goto final;
		end if;
	end if;

	select	max(dt_inicio_comp),
		max(dt_fim_comp),
		max(dt_mes_competencia)
	into STRICT	dt_inicio_comp_w,
		dt_fim_comp_w,
		dt_mes_competencia_w
	from	pls_lote_pagamento
	where	nr_sequencia = nr_seq_lote_pagamento_p;

	if (coalesce(nr_seq_lote_evento_w::text, '') = '') then
		insert into pls_lote_evento(nr_sequencia,			nm_usuario,		dt_atualizacao,
			nm_usuario_nrec,		dt_atualizacao_nrec,	ie_origem,
			dt_inicio_comp,			dt_fim_comp,		nr_seq_lote_pagamento,
			dt_liberacao,			dt_competencia,		cd_estabelecimento)
		values (nextval('pls_lote_evento_seq'),	nm_usuario_p,		clock_timestamp(),
			nm_usuario_p,			clock_timestamp(),		'A',
			dt_inicio_comp_w,		dt_fim_comp_w,		nr_seq_lote_pagamento_p,
			clock_timestamp(),			dt_mes_competencia_w,	cd_estabelecimento_p) returning nr_sequencia into nr_seq_lote_evento_w;
	end if;

	insert into pls_evento_movimento(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_movimento,
		nr_seq_evento,
		nr_seq_lote,
		nr_seq_prestador,
		vl_movimento,
		ie_forma_pagto,
		nr_tit_rec_vinculado,
		nr_tit_pagar_vinculado,
		nr_seq_lote_pgto)
	values (nextval('pls_evento_movimento_seq'),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		trunc(dt_vencimento_w,'dd'),
		nr_seq_evento_p,
		nr_seq_lote_evento_w,
		nr_seq_prestador_w,
		-- se for titulo a receber o registro na evento movimento deve ser gerado negativo para que seja contabilizado corretamente
		CASE WHEN ie_tipo_titulo_p='R' THEN  pls_util_pck.obter_valor_negativo(vl_saldo_titulo_w)  ELSE vl_saldo_titulo_w END ,
		'P',
		CASE WHEN ie_tipo_titulo_p='R' THEN nr_titulo_w  ELSE null END ,
		CASE WHEN ie_tipo_titulo_p='P' THEN nr_titulo_w  ELSE null END ,
		nr_seq_lote_pagamento_p) returning nr_sequencia into nr_seq_evento_movto_w;

	cd_conta_contabil_w := pls_obter_conta_contab_eve_fin(nr_seq_evento_movto_w, cd_conta_contabil_w);

	update	pls_evento_movimento
	set	cd_conta_contabil	= cd_conta_contabil_w
	where	nr_sequencia		= nr_seq_evento_movto_w;

	insert	into pls_evento_movimento_log(nr_sequencia,
		nr_titulo_pagar,
		nr_titulo_receber,
		nr_seq_lote,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec)
	values (nextval('pls_evento_movimento_log_seq'),
		CASE WHEN ie_tipo_titulo_p='P' THEN nr_titulo_w  ELSE null END ,
		CASE WHEN ie_tipo_titulo_p='R' THEN nr_titulo_w  ELSE null END ,
		nr_seq_lote_evento_w,
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp());

	if (nr_seq_lote_pagamento_p IS NOT NULL AND nr_seq_lote_pagamento_p::text <> '') then
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_pagamento_prest_w
		from	pls_pagamento_prestador a
		where	a.nr_seq_prestador	= nr_seq_prestador_w
		and	a.nr_seq_lote		= nr_seq_lote_pagamento_p;

		insert into pls_pagamento_item(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_evento,
			nr_seq_pagamento,
			vl_item,
			nr_tit_receber_origem,
			nr_tit_pagar_origem)
		values (nextval('pls_pagamento_item_seq'),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_seq_evento_p,
			nr_seq_pagamento_prest_w,
			CASE WHEN ie_tipo_titulo_p='R' THEN (vl_saldo_titulo_w * -1) WHEN ie_tipo_titulo_p='P' THEN vl_saldo_titulo_w END ,
			CASE WHEN ie_tipo_titulo_p='R' THEN nr_titulo_w  ELSE null END ,
			CASE WHEN ie_tipo_titulo_p='P' THEN nr_titulo_w  ELSE null END ) returning nr_sequencia into nr_seq_pag_item_w;

		CALL pls_atualizar_valor_lote_pag(nr_seq_pagamento_prest_w,nm_usuario_p);
		pls_atualizar_eventos_pag_prod(nr_seq_lote_pagamento_p);

		insert	into pls_pagamento_item_log(nr_sequencia,
			nr_titulo_pagar,
			nr_titulo_receber,
			nr_seq_pag_prest,
			nr_seq_lote_pagamento,
			ie_tipo,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec)
		values (nextval('pls_pagamento_item_log_seq'),
			CASE WHEN ie_tipo_titulo_p='P' THEN nr_titulo_w  ELSE null END ,
			CASE WHEN ie_tipo_titulo_p='R' THEN nr_titulo_w  ELSE null END ,
			nr_seq_pagamento_prest_w,
			nr_seq_lote_pagamento_p,
			'I',
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp());
	end if;

	<<final>>
		null;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_vincular_titulo_lote_ocorr ( ds_lista_titulo_p text, ie_tipo_titulo_p text, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_lote_p pls_lote_evento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_lote_pagamento_p pls_lote_pagamento.nr_sequencia%type) FROM PUBLIC;

