-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_alerta_pag_prod_med ( ie_tipo_evento_p bigint, nr_celular_prest_p text, ds_email_prestador_p text, nr_seq_lote_p bigint, nr_seq_pagamento_p bigint, nr_seq_pp_prestador_p pls_pp_prestador.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE


/*					
IE_FORMA_ENVIO	EM = E-MAIL
		SMS = SMS
*/


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Enviar e-mail e/ou SMS para o prestador da geracao de titulos em seu nome
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
	IE_FORMA_ENVIO
		EM = E-MAIL
		SMS = SMS
-------------------------------------------------------------------------------------------------------------------

Referencias:
	PLS_GERAR_TITULOS_LOTE_PAG
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_mensagem_regra_w	varchar(4000);
ds_destinatario_w	varchar(255);
ds_remetente_w		varchar(255);
ds_titulo_w		varchar(255);
ie_forma_envio_w	varchar(3);
ie_tipo_envio_w		varchar(2);
nr_seq_evento_mens_w	bigint;
nr_seq_evento_dest_w	bigint;
nr_seq_tipo_evento_w	bigint;
id_sms_w		bigint	:= null;
qt_macro_regra_w	integer	:= 0;
nr_protocolo_w 	  	varchar(4000);
vl_total_w  		pls_protocolo_conta.vl_total%type := 0;
vl_cobrado_w   		pls_protocolo_conta.vl_cobrado%type := 0;
vl_glosa_w    		pls_protocolo_conta.vl_glosa%type := 0;
nr_seq_prestador_w	pls_prestador.nr_sequencia%type;
dt_venc_titulo_w	timestamp;	
cd_estabelecimento_w	pls_pp_lote.cd_estabelecimento%type;

C01 CURSOR FOR
	SELECT	nr_seq_evento_mens
	from	pls_regra_geracao_evento
	where	ie_situacao		= 'A'
	and	ie_evento_disparo	= ie_tipo_evento_p;
	
C02 CURSOR FOR
	SELECT	nr_sequencia,
		ie_forma_envio
	from	pls_alerta_evento_destino
	where	ie_situacao		= 'A'
	and	nr_seq_evento_mens 	= nr_seq_evento_mens_w;
	
C03 CURSOR(nr_seq_evento_dest_ww bigint) FOR
	SELECT	nm_usuario_destino
	from	pls_alerta_event_dest_fixo
	where	nr_seq_alerta_event_dest = nr_seq_evento_dest_ww;
	
C04 CURSOR(nr_seq_prestador_ww bigint) FOR
	SELECT  a.nr_sequencia || ', ' nr_protocolo,
		a.vl_total,
		a.vl_cobrado,
		a.vl_glosa
	into STRICT	nr_protocolo_w,
		vl_total_w,
		vl_cobrado_w,
		vl_glosa_w
	from  	pls_protocolo_conta  a
	where  	exists (	SELECT  1
				from  	pls_conta    			x,
					pls_conta_medica_resumo  	y
				where  	y.nr_seq_conta    		= x.nr_sequencia
				and  	x.nr_seq_protocolo  		= a.nr_sequencia
				and  	y.nr_seq_prestador_pgto 	= nr_seq_prestador_ww
				and  	y.nr_seq_pp_lote   		= nr_seq_lote_p)
	order by 1 desc;
	
C05 CURSOR(nr_seq_prestador_ww bigint) FOR
	SELECT  a.nr_sequencia || ', ' nr_protocolo,
		a.vl_total,
		a.vl_cobrado,
		a.vl_glosa
	into STRICT	nr_protocolo_w,
		vl_total_w,
		vl_cobrado_w,
		vl_glosa_w
	from  	pls_protocolo_conta  a
	where  	exists (	SELECT  1
				from  	pls_conta    			x,
					pls_conta_medica_resumo  	y
				where  	y.nr_seq_conta    		= x.nr_sequencia
				and  	x.nr_seq_protocolo  		= a.nr_sequencia
				and  	y.nr_seq_prestador_pgto 	= nr_seq_prestador_ww
				and  	y.nr_seq_lote_pgto   		= nr_seq_lote_p)
	order by 1 desc;

BEGIN	

open C01;
loop
fetch C01 into	
	nr_seq_evento_mens_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	null;
	end;
end loop;
close C01;

open C02;
loop
fetch C02 into
	nr_seq_evento_dest_w,
	ie_forma_envio_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	if (ie_forma_envio_w IS NOT NULL AND ie_forma_envio_w::text <> '') then
		if (ie_forma_envio_w = 'EM') then
			select	ds_mensagem,
				ie_tipo_envio,
				ds_titulo,
				nr_seq_tipo_evento,
				ds_remetente_email
			into STRICT	ds_mensagem_regra_w,
				ie_tipo_envio_w,
				ds_titulo_w,
				nr_seq_tipo_evento_w,
				ds_remetente_w
			from	pls_alerta_evento_mensagem
			where 	nr_sequencia	= nr_seq_evento_mens_w;
		elsif (ie_forma_envio_w = 'SMS') then
			select	ds_mensagem,
				ie_tipo_envio,
				ds_titulo,
				nr_seq_tipo_evento,
				ds_remetente_sms
			into STRICT	ds_mensagem_regra_w,
				ie_tipo_envio_w,
				ds_titulo_w,
				nr_seq_tipo_evento_w,
				ds_remetente_w
			from	pls_alerta_evento_mensagem
			where 	nr_sequencia	= nr_seq_evento_mens_w;
		elsif (ie_forma_envio_w = 'CI') then
			select	ds_mensagem,
				ie_tipo_envio,
				ds_titulo,
				nr_seq_tipo_evento,
				nm_usuario_p
			into STRICT	ds_mensagem_regra_w,
				ie_tipo_envio_w,
				ds_titulo_w,
				nr_seq_tipo_evento_w,
				ds_remetente_w
			from	pls_alerta_evento_mensagem
			where 	nr_sequencia	= nr_seq_evento_mens_w;
		end if;
	end if;	
	
	select	count(1)
	into STRICT	qt_macro_regra_w
	
	where	ds_mensagem_regra_w like '%@%';
	
	if (nr_seq_pp_prestador_p IS NOT NULL AND nr_seq_pp_prestador_p::text <> '') and (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
		select	max(a.cd_estabelecimento)
		into STRICT	cd_estabelecimento_w
		from	pls_pp_lote a
		where 	a.nr_sequencia = nr_seq_lote_p;
	end if;
	
	if (qt_macro_regra_w > 0) then
	
		-- PAGAMENTO NOVO
		if (nr_seq_pp_prestador_p IS NOT NULL AND nr_seq_pp_prestador_p::text <> '') then
			select	b.dt_venc_titulo,
				b.nr_seq_prestador
			into STRICT	dt_venc_titulo_w,
				nr_seq_prestador_w
			from	pls_pp_prestador	b,
				pls_pp_lote		a
			where 	a.nr_sequencia		= b.nr_seq_lote
			and	b.nr_sequencia 		= nr_seq_pp_prestador_p;
			
			for r_c04_w in C04(nr_seq_prestador_w) loop
				if	((length(nr_protocolo_w) + length(r_c04_w.nr_protocolo)) <= 4000) then
					nr_protocolo_w 	:= r_c04_w.nr_protocolo || nr_protocolo_w;
				end if;
				
				vl_total_w 	:= r_c04_w.vl_total + vl_total_w;
				vl_cobrado_w 	:= r_c04_w.vl_cobrado + vl_cobrado_w;
				vl_glosa_w 	:= r_c04_w.vl_glosa + vl_glosa_w;
			end loop;		
		end if;
		
		-- PAGAMENTO ANTIGO		
		if (nr_seq_pagamento_p IS NOT NULL AND nr_seq_pagamento_p::text <> '') then
			select 	b.dt_vencimento,
				a.nr_seq_prestador
			into STRICT	dt_venc_titulo_w,
				nr_seq_prestador_w
			FROM pls_pagamento_prestador a
LEFT OUTER JOIN pls_pag_prest_vencimento b ON (a.nr_sequencia = b.nr_seq_pag_prestador)
WHERE a.nr_sequencia 	= nr_seq_pagamento_p;
			
			for r_c05_w in C05(nr_seq_prestador_w) loop
				if	((length(nr_protocolo_w) + length(r_c05_w.nr_protocolo)) <= 4000) then
					nr_protocolo_w 	:= r_c05_w.nr_protocolo || nr_protocolo_w;
				end if;
				
				vl_total_w 	:= r_c05_w.vl_total + vl_total_w;
				vl_cobrado_w 	:= r_c05_w.vl_cobrado + vl_cobrado_w;
				vl_glosa_w 	:= r_c05_w.vl_glosa + vl_glosa_w;
			end loop;	
		end if;

		nr_protocolo_w := substr(nr_protocolo_w, 1, length(nr_protocolo_w) - 2);
		
		ds_mensagem_regra_w := substr(replace(ds_mensagem_regra_w, '@NR_PROTOCOLO', nr_protocolo_w), 1, 4000);
		ds_mensagem_regra_w := substr(replace(ds_mensagem_regra_w, '@VL_LIBERADO', campo_mascara_virgula(vl_total_w)), 1, 4000);
		ds_mensagem_regra_w := substr(replace(ds_mensagem_regra_w, '@VL_APRES_PROT', campo_mascara_virgula(vl_cobrado_w)), 1, 4000);	
		ds_mensagem_regra_w := substr(replace(ds_mensagem_regra_w, '@VL_GLOSA_PROT', campo_mascara_virgula(vl_glosa_w)), 1, 4000);
		ds_mensagem_regra_w := substr(replace(ds_mensagem_regra_w, '@DT_VENC_TIT', to_char(dt_venc_titulo_w,'dd/mm/yyyy')), 1, 4000);
		
	end if;
	
	if (ie_forma_envio_w = 'EM') then
		ds_remetente_w		:= substr(ds_remetente_w, 0, 40);
		ds_destinatario_w	:= substr(ds_email_prestador_p, 0, 40);
		
		if (ds_remetente_w IS NOT NULL AND ds_remetente_w::text <> '') and (ds_destinatario_w IS NOT NULL AND ds_destinatario_w::text <> '') and (ds_mensagem_regra_w IS NOT NULL AND ds_mensagem_regra_w::text <> '') then
			begin			
				CALL enviar_email(	ds_titulo_w,
						ds_mensagem_regra_w,
						ds_remetente_w,
						ds_email_prestador_p,
						nm_usuario_p,
						'M');
						
				if (nr_seq_pagamento_p IS NOT NULL AND nr_seq_pagamento_p::text <> '') then
					insert into pls_lote_pagamento_hist(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_lote,
						nr_seq_pagamento,
						dt_historico,
						ds_historico)
					values (nextval('pls_lote_pagamento_hist_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_lote_p,
						nr_seq_pagamento_p,
						clock_timestamp(),
						'E-mail enviado para: ' || ds_email_prestador_p);
						
				elsif (nr_seq_pp_prestador_p IS NOT NULL AND nr_seq_pp_prestador_p::text <> '') then
					insert into pls_pp_lote_pag_hist(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_pp_lote,
						nr_seq_pp_prestador,
						dt_historico,
						ds_historico,
						cd_estabelecimento)
					values (nextval('pls_lote_pagamento_hist_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_lote_p,
						nr_seq_pp_prestador_p,
						clock_timestamp(),
						'E-mail enviado para: ' || ds_email_prestador_p,
						cd_estabelecimento_w);
				end if;
			exception
			when others then
				null;
			end;
		end if;
	end if;
	
	if (ie_forma_envio_w = 'SMS') then
		ds_remetente_w		:= substr(ds_remetente_w, 0, 40);
		ds_destinatario_w	:= substr(nr_celular_prest_p, 0, 40);
		
		if (ds_remetente_w IS NOT NULL AND ds_remetente_w::text <> '') and (ds_destinatario_w IS NOT NULL AND ds_destinatario_w::text <> '') and (ds_mensagem_regra_w IS NOT NULL AND ds_mensagem_regra_w::text <> '') then
			id_sms_w := pls_enviar_sms_alerta_evento(	ds_remetente_w, ds_destinatario_w, substr(ds_mensagem_regra_w, 1, 150), nr_seq_tipo_evento_w, nm_usuario_p, id_sms_w);
							
			if (nr_seq_pagamento_p IS NOT NULL AND nr_seq_pagamento_p::text <> '') then
				insert into pls_lote_pagamento_hist(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_lote,
					nr_seq_pagamento,
					dt_historico,
					ds_historico)
				values (nextval('pls_lote_pagamento_hist_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_lote_p,
					nr_seq_pagamento_p,
					clock_timestamp(),
					'SMS enviado para: ' || ds_destinatario_w);
					
			elsif (nr_seq_pp_prestador_p IS NOT NULL AND nr_seq_pp_prestador_p::text <> '') then
				insert into pls_pp_lote_pag_hist(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_pp_lote,
					nr_seq_pp_prestador,
					dt_historico,
					ds_historico,
					cd_estabelecimento)
				values (nextval('pls_lote_pagamento_hist_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_lote_p,
					nr_seq_pp_prestador_p,
					clock_timestamp(),
					'SMS enviado para: ' || ds_destinatario_w,
					cd_estabelecimento_w);
			end if;
		end if;
	end if;
	
	if (ie_forma_envio_w = 'CI') then
		for r_c03_w in C03(nr_seq_evento_dest_w) loop
			if (r_c03_w.nm_usuario_destino IS NOT NULL AND r_c03_w.nm_usuario_destino::text <> '') and (ds_mensagem_regra_w IS NOT NULL AND ds_mensagem_regra_w::text <> '') then
				CALL gerar_comunic_padrao(	clock_timestamp(),
							ds_titulo_w,
							ds_mensagem_regra_w,
							nm_usuario_p,
							'N',
							r_c03_w.nm_usuario_destino,
							'N',
							null,
							null,
							wheb_usuario_pck.get_cd_estabelecimento,
							null,
							clock_timestamp(),
							null,
							null);
			end if;	
			
			ds_remetente_w		:= substr(ds_remetente_w, 0, 40);
			ds_destinatario_w	:= substr(r_c03_w.nm_usuario_destino, 0, 40);
			
			if (ds_mensagem_regra_w IS NOT NULL AND ds_mensagem_regra_w::text <> '') and (nr_seq_pagamento_p IS NOT NULL AND nr_seq_pagamento_p::text <> '') then				
				insert into pls_lote_pagamento_hist(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_lote,
					nr_seq_pagamento,
					dt_historico,
					ds_historico)
				values (nextval('pls_lote_pagamento_hist_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_lote_p,
					nr_seq_pagamento_p,
					clock_timestamp(),
					'CI enviada para: ' || ds_destinatario_w);
					
			elsif (nr_seq_pp_prestador_p IS NOT NULL AND nr_seq_pp_prestador_p::text <> '') then
				insert into pls_pp_lote_pag_hist(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_pp_lote,
					nr_seq_pp_prestador,
					dt_historico,
					ds_historico,
					cd_estabelecimento)
				values (nextval('pls_lote_pagamento_hist_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_lote_p,
					nr_seq_pp_prestador_p,
					clock_timestamp(),
					'CI enviada para: ' || ds_destinatario_w,
					cd_estabelecimento_w);
			end if;
		end loop;
	end if;	
	end;	
end loop;
close C02;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_alerta_pag_prod_med ( ie_tipo_evento_p bigint, nr_celular_prest_p text, ds_email_prestador_p text, nr_seq_lote_p bigint, nr_seq_pagamento_p bigint, nr_seq_pp_prestador_p pls_pp_prestador.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;

