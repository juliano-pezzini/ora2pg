-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_ficha_admissao ( nr_sequencia_p bigint) AS $body$
DECLARE


cd_morfologia_tu_prim_w		varchar(6);
cd_topog_tu_prim_w		varchar(6);
cd_tumor_primario_w		can_ficha_admissao.cd_tumor_primario%type;
cd_linfonodo_regional_w		can_ficha_admissao.cd_linfonodo_regional%type;
cd_metastase_distancia_w	can_ficha_admissao.cd_metastase_distancia%type;
cd_estadio_w			varchar(20);
ie_existe_w			bigint;
ds_inconsitencia_w		varchar(600) := '';
cd_pessoa_fisica_w		varchar(10);
ie_sexo_pac_w			varchar(1);
ie_sexo_cad_w			varchar(1);


BEGIN

select	cd_morfologia_tu_prim,
	cd_topog_tu_prim,
	cd_tumor_primario,
	cd_linfonodo_regional,
	cd_metastase_distancia,
	cd_estadio,
	cd_pessoa_fisica
into STRICT	cd_morfologia_tu_prim_w,
	cd_topog_tu_prim_w,
	cd_tumor_primario_w,
	cd_linfonodo_regional_w,
	cd_metastase_distancia_w,
	cd_estadio_w,
	cd_pessoa_fisica_w
from	can_ficha_admissao
where	nr_sequencia = nr_sequencia_p;

select	coalesce(max(ie_sexo),'I')
into STRICT	ie_sexo_pac_w
from	pessoa_fisica
where	cd_pessoa_fisica = cd_pessoa_fisica_w;


if (cd_topog_tu_prim_w IS NOT NULL AND cd_topog_tu_prim_w::text <> '') and (cd_morfologia_tu_prim_w IS NOT NULL AND cd_morfologia_tu_prim_w::text <> '') then
	begin
	select	count(*)
	into STRICT	ie_existe_w
	
	where	cd_morfologia_tu_prim_w in (
		SELECT	a.cd_morfologia
		from	cido_topografia_morfologia c,
			cido_topografia b,
			cido_morfologia a
		where	c.cd_categoria_topografica	= b.cd_categoria
		and	b.cd_topografia			= cd_topog_tu_prim_w
		and	c.cd_morfologia			= a.cd_morfologia);
	if (ie_existe_w = 0) then
		ds_inconsitencia_w	:= Wheb_mensagem_pck.get_texto(306368); -- 'Topografia e Morfologia incompatíveis';
	end if;
	select	coalesce(max(ie_sexo),'0')
	into STRICT	ie_sexo_cad_w
	from	cido_topografia
	where	cd_topografia	= cd_topog_tu_prim_w;
	
	if (ie_sexo_cad_w <> '0') and (ie_sexo_cad_w <> ie_sexo_pac_w) then
		ds_inconsitencia_w	:= ds_inconsitencia_w ||  chr(13) || chr(10)|| Wheb_mensagem_pck.get_texto(306370); -- 'Sexo incompatível com topografia';
	end if;

	select	coalesce(max(ie_sexo),'0')
	into STRICT	ie_sexo_cad_w
	from	cido_morfologia
	where	cd_morfologia	= cd_morfologia_tu_prim_w;
	
	if (ie_sexo_cad_w <> '0') and (ie_sexo_cad_w <> ie_sexo_pac_w) then
		ds_inconsitencia_w	:= ds_inconsitencia_w ||  chr(13) || chr(10)|| Wheb_mensagem_pck.get_texto(306371); -- 'Sexo incompatível com morfologia';
	end if;
	end;
else
	ds_inconsitencia_w	:= Wheb_mensagem_pck.get_texto(306372); -- 'Topografia e Morfologia devem ser informadas';
end if;

if (cd_topog_tu_prim_w IS NOT NULL AND cd_topog_tu_prim_w::text <> '') then
	select	count(*)
	into STRICT	ie_existe_w
	
	where	cd_tumor_primario_w in (
		SELECT	a.cd_tnm
		from	can_tnm_localizacao c,
			cido_topografia b,
			can_tnm_regra a
		where	c.nr_sequencia = b.nr_seq_loc_tnm
		and	a.nr_seq_loc_tnm = c.nr_sequencia
		and	a.ie_classificacao_tnm = 'C'
		and	a.ie_componente_tnm = 'T'
		and	b.cd_topografia = cd_topog_tu_prim_w);
	
	if (ie_existe_w = 0) then
		ds_inconsitencia_w	:= ds_inconsitencia_w ||  chr(13) || chr(10)||  Wheb_mensagem_pck.get_texto(306374); --'T incompatível com Topografia';
	end if;

	select	count(*)
	into STRICT	ie_existe_w
	
	where	cd_linfonodo_regional_w in (
		SELECT	a.cd_tnm
		from	can_tnm_localizacao c,
			cido_topografia b,
			can_tnm_regra a
		where	c.nr_sequencia = b.nr_seq_loc_tnm
		and	a.nr_seq_loc_tnm = c.nr_sequencia
		and	a.ie_classificacao_tnm = 'C'
		and	a.ie_componente_tnm = 'N'
		and	b.cd_topografia = cd_topog_tu_prim_w);
	
	if (ie_existe_w = 0) then
		ds_inconsitencia_w	:= ds_inconsitencia_w || chr(13) || chr(10) || Wheb_mensagem_pck.get_texto(306375); -- 'N incompatível com Topografia';
	end if;

	select	count(*)
	into STRICT	ie_existe_w
	
	where	cd_metastase_distancia_w in (
		SELECT	a.cd_tnm
		from	can_tnm_localizacao c,
			cido_topografia b,
			can_tnm_regra a
		where	c.nr_sequencia = b.nr_seq_loc_tnm
		and	a.nr_seq_loc_tnm = c.nr_sequencia
		and	a.ie_classificacao_tnm = 'C'
		and	a.ie_componente_tnm = 'M'
		and	b.cd_topografia = cd_topog_tu_prim_w);
	
	if (ie_existe_w = 0) then
		ds_inconsitencia_w	:= ds_inconsitencia_w || chr(13) || chr(10)|| Wheb_mensagem_pck.get_texto(306376); --'M incompatível com Topografia';
	end if;
end if;


update	can_ficha_admissao
set	ds_inconsistencia	= substr(ds_inconsitencia_w,1,255)
where	nr_sequencia	= nr_sequencia_p;

commit;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_ficha_admissao ( nr_sequencia_p bigint) FROM PUBLIC;

