-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE importar_ciap_excel () AS $body$
DECLARE


	ie_exist_temp_table_w varchar(1) := 'N';

	ds_sql_w	varchar(4000);
	c01_w		integer;
	ret_w		integer;

	IE_PROC_W		varchar(1);
	CODE_W			varchar(255);
	CHAPTER_W		varchar(255);
	COMPONENT_W		varchar(255);
	PREFERRED_W		varchar(255);
	SHORTTITLE_W	varchar(255);
	INCLUSION_W		varchar(4000);
	EXCLUSION_W		varchar(4000);
	CRITERIA_W		varchar(4000);
	CONSIDER_W		varchar(4000);
	NOTE_W			varchar(4000);
	ICD10_W			varchar(4000);


BEGIN

	select	coalesce(max('S'),'N')
	into STRICT	ie_exist_temp_table_w
	from	all_objects
	where	object_name like 'W_CIAP_IMPORTACAO2'
	and		object_type = 'TABLE';

	if (ie_exist_temp_table_w = 'S') then


		ds_sql_w :=	'select * ' ||
					'from (select ' ||
					'		(case when regexp_like(a.code, ''^[^a-zA-Z]*$'') then ''S'' else ''N'' end) IE_PROC, ' ||
					'		a.* ' ||
					'	from	W_CIAP_IMPORTACAO2 a) ' ||
					'order	by IE_PROC, CODE';

		c01_w := dbms_sql.open_cursor;
		dbms_sql.parse(c01_w, ds_sql_w, dbms_sql.native);

		dbms_sql.define_column(c01_w, 1, IE_PROC_W, 1);
		dbms_sql.define_column(c01_w, 2, CODE_W, 255);
		dbms_sql.define_column(c01_w, 3, CHAPTER_W, 255);
		dbms_sql.define_column(c01_w, 4, COMPONENT_W, 255);
		dbms_sql.define_column(c01_w, 5, PREFERRED_W, 255);
		dbms_sql.define_column(c01_w, 6, SHORTTITLE_W, 255);
		dbms_sql.define_column(c01_w, 7, INCLUSION_W, 4000);
		dbms_sql.define_column(c01_w, 8, EXCLUSION_W, 4000);
		dbms_sql.define_column(c01_w, 9, CRITERIA_W, 4000);
		dbms_sql.define_column(c01_w, 10, CONSIDER_W, 4000);
		dbms_sql.define_column(c01_w, 11, NOTE_W, 4000);
		dbms_sql.define_column(c01_w, 12, ICD10_W, 4000);

		ret_w := dbms_sql.execute(c01_w);

		loop
			if (dbms_sql.fetch_rows(c01_w) > 0) then
				begin
					dbms_sql.column_value(c01_w, 1, IE_PROC_W);
				exception
				when others then
					IE_PROC_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 2, CODE_W);
				exception
				when others then
					CODE_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 3, CHAPTER_W);
				exception
				when others then
					CHAPTER_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 4, COMPONENT_W);
				exception
				when others then
					COMPONENT_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 5, PREFERRED_W);
				exception
				when others then
					PREFERRED_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 6, SHORTTITLE_W);
				exception
				when others then
					SHORTTITLE_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 7, INCLUSION_W);
				exception
				when others then
					INCLUSION_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 8, EXCLUSION_W);
				exception
				when others then
					EXCLUSION_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 9, CRITERIA_W);
				exception
				when others then
					CRITERIA_W	:= '';
				end;
				begin
					dbms_sql.column_value(c01_w, 10, CONSIDER_W);
				exception
				when others then
					CONSIDER_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 11, NOTE_W);
				exception
				when others then
					NOTE_W := '';
				end;
				begin
					dbms_sql.column_value(c01_w, 12, ICD10_W);
				exception
				when others then
					ICD10_W := '';
				end;
			else
				exit;
			end if;


			CALL carregar_ciap_importacao(wheb_usuario_pck.get_nm_usuario,
									null,
									IE_PROC_W,
									CODE_W,
									CHAPTER_W,
									COMPONENT_W,
									PREFERRED_W,
									SHORTTITLE_W,
									INCLUSION_W,
									EXCLUSION_W,
									CRITERIA_W,
									CONSIDER_W,
									NOTE_W,
									ICD10_W,
									null);


		end loop;



		ds_sql_w := 'delete from W_CIAP_IMPORTACAO2 ';
		EXECUTE ds_sql_w;


	end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE importar_ciap_excel () FROM PUBLIC;

