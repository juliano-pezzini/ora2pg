-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE replica_diagnostico_ult_atend (nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_atendimento_ant_w	bigint;
cd_pessoa_fisica_w	varchar(60);

qt_registros_w		bigint;
ie_data_diag_atual	varchar(1);
dt_atual_diagnostico_w	timestamp;
ie_diagostico_tipo_atend_w varchar(10);

--diagnostico medico
dt_diag_medico_w	timestamp;
ie_tipo_diag_medico_w	smallint;
cd_medico_w		varchar(10);
ds_diagnostico_w	varchar(2000);
ie_tipo_doenca_med_w	varchar(2);
ie_unidade_tempo_med_w	varchar(2);
qt_tempo_med_w		bigint;
ie_tipo_atendimento_w	smallint;

--diagnostico doenca
dt_diag_doenca_w		timestamp;
cd_doenca_w			varchar(10);
ds_diagnostico_doenca_w		varchar(2000);
ie_classificacao_doenca_w	varchar(1);
ie_tipo_doenca_w		varchar(2);
ie_unidade_tempo_w		varchar(2);	
qt_tempo_w			bigint;
ie_lado_w			varchar(1);
dt_manifestacao_w		timestamp;
nr_seq_diag_interno_w		numeric(20);
nr_seq_grupo_diag_w		bigint;
dt_inicio_w			timestamp;
dt_fim_w			timestamp;
dt_liberacao_w			timestamp;
cd_perfil_ativo_w		integer;
ie_gera_somente_pa_w		varchar(1);
ie_tipo_diag_doenca_w		smallint;
ie_situacao_c02_w		varchar(1);



C01 CURSOR FOR
	SELECT	dt_diagnostico,
		ie_tipo_diagnostico,
		cd_medico,
		ds_diagnostico,
		ie_tipo_doenca,
		ie_unidade_tempo,
		qt_tempo,
		ie_tipo_atendimento
	from	diagnostico_medico
	where	nr_atendimento = nr_atendimento_ant_w;
	
C02 CURSOR FOR
	SELECT	dt_diagnostico,
		ie_tipo_diagnostico,	
		cd_doenca,
		ds_diagnostico,
		ie_classificacao_doenca,
		ie_tipo_doenca,
		ie_unidade_tempo,
		qt_tempo,
		ie_lado,
		dt_manifestacao,
		nr_seq_diag_interno,
		nr_seq_grupo_diag,
		dt_inicio,
		dt_fim,
		dt_liberacao,
		cd_perfil_ativo,
		ie_situacao
	from	diagnostico_doenca
	where	nr_atendimento 	= nr_atendimento_ant_w
	and	dt_diagnostico = dt_diag_medico_w;
			

BEGIN

ie_gera_somente_pa_w := obter_param_usuario(916, 805, Obter_perfil_ativo, nm_usuario_p, 0, ie_gera_somente_pa_w);	
ie_gera_somente_pa_w := coalesce(ie_gera_somente_pa_w,'N');
ie_diagostico_tipo_atend_w := obter_param_usuario(916, 1109, Obter_perfil_ativo, nm_usuario_p, 0, ie_diagostico_tipo_atend_w);

select	max(cd_pessoa_fisica)
into STRICT	cd_pessoa_fisica_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_p;


select 	coalesce(max(a.nr_atendimento),0)
into STRICT	nr_atendimento_ant_w
from	atendimento_paciente a
where	a.nr_atendimento 	<> nr_atendimento_p
and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
and	exists (	
		SELECT	1
		from	diagnostico_doenca z
		where	z.nr_atendimento	= a.nr_atendimento);				
if (nr_atendimento_ant_w > 0)				and
	(((coalesce(ie_diagostico_tipo_atend_w::text, '') = '') 	and 
	 (((ie_gera_somente_pa_w = 'S') 				and (obter_tipo_atendimento(coalesce(nr_atendimento_ant_w,0)) = 3)) or (ie_gera_somente_pa_w = 'N'))) or
	(OBTER_SE_CONTIDO((obter_tipo_atendimento(coalesce(nr_atendimento_ant_w,0))),ie_diagostico_tipo_atend_w) = 'S')) then
	
	ie_data_diag_atual := obter_param_usuario(916, 677, Obter_perfil_ativo, nm_usuario_p, 0, ie_data_diag_atual);
	
	
	dt_atual_diagnostico_w := clock_timestamp()+(1/1440);
		
	open C01;
		loop
	fetch C01 into	
		dt_diag_medico_w,
		ie_tipo_diag_medico_w,
		cd_medico_w,
		ds_diagnostico_w,
		ie_tipo_doenca_med_w,
		ie_unidade_tempo_med_w,
		qt_tempo_med_w,
		ie_tipo_atendimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		dt_atual_diagnostico_w := dt_atual_diagnostico_w +(1/1440);
		
		select	count(*)
		into STRICT	qt_registros_w
		from	diagnostico_medico
		where	nr_atendimento = nr_atendimento_p
		and	dt_diagnostico = CASE WHEN ie_data_diag_atual='S' THEN dt_atual_diagnostico_w  ELSE dt_diag_medico_w END;
			
	if (qt_registros_w = 0) then
		
		insert into	diagnostico_medico(
				nr_atendimento,
				dt_diagnostico,
				ie_tipo_diagnostico,
				cd_medico,
				dt_atualizacao,
				nm_usuario,
				ds_diagnostico,
				ie_tipo_doenca,
				ie_unidade_tempo,
				qt_tempo,
				ie_tipo_atendimento
				)
			values (
				nr_atendimento_p,
				CASE WHEN ie_data_diag_atual='S' THEN dt_atual_diagnostico_w  ELSE dt_diag_medico_w END ,
				ie_tipo_diag_medico_w,
				cd_medico_w,
				clock_timestamp(),
				nm_usuario_p,
				ds_diagnostico_w,
				ie_tipo_doenca_med_w,
				ie_unidade_tempo_med_w,
				qt_tempo_med_w,
				ie_tipo_atendimento_w);
				
			open C02;
			loop
			fetch C02 into	
				dt_diag_doenca_w,
				ie_tipo_diag_doenca_w,
				cd_doenca_w,
				ds_diagnostico_doenca_w,
				ie_classificacao_doenca_w,
				ie_tipo_doenca_w,
				ie_unidade_tempo_w,
				qt_tempo_w,
				ie_lado_w,
				dt_manifestacao_w,
				nr_seq_diag_interno_w,
				nr_seq_grupo_diag_w,
				dt_inicio_w,
				dt_fim_w,
				dt_liberacao_w,
				cd_perfil_ativo_w,
				ie_situacao_c02_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
								
				insert into 	diagnostico_doenca(
						nr_atendimento,
						dt_diagnostico,
						cd_doenca,
						dt_atualizacao,
						nm_usuario,
						ds_diagnostico,
						ie_classificacao_doenca,
						ie_tipo_doenca,
						ie_unidade_tempo,
						qt_tempo,
						ie_lado,
						dt_manifestacao,
						nr_seq_diag_interno,
						nr_seq_grupo_diag,
						dt_inicio,
						dt_fim,
						dt_liberacao,
						cd_perfil_ativo,
						ie_tipo_diagnostico,
						ie_situacao
						)
					values (
						nr_atendimento_p,
						CASE WHEN ie_data_diag_atual='S' THEN dt_atual_diagnostico_w  ELSE dt_diag_doenca_w END ,
						cd_doenca_w,
						clock_timestamp(),
						nm_usuario_p,
						ds_diagnostico_doenca_w,
						ie_classificacao_doenca_w,
						ie_tipo_doenca_w,
						ie_unidade_tempo_w,
						qt_tempo_w,
						ie_lado_w,
						dt_manifestacao_w,
						nr_seq_diag_interno_w,
						nr_seq_grupo_diag_w,
						dt_inicio_w,
						dt_fim_w,
						dt_liberacao_w,
						cd_perfil_ativo_w,
						coalesce(ie_tipo_diag_doenca_w,2),
						coalesce(ie_situacao_c02_w,'A'));
				end;
			end loop;
			close C02;		
				
		end if;			
		end;
		
	end loop;
	close C01;
	
end if;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE replica_diagnostico_ult_atend (nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

