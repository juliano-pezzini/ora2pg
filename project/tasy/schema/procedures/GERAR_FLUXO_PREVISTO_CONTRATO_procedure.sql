-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_previsto_contrato ( cd_estabelecimento_p bigint, nm_usuario_p text, cd_empresa_p bigint, ie_restringe_estab_p text, dt_inicial_p timestamp, dt_final_p timestamp, ie_operacao_p text, ie_somente_ativa_p text) AS $body$
DECLARE


/*--------------------------------------------------------------- ATENÇÃO ----------------------------------------------------------------*/

/* Cuidado ao realizar alterações no fluxo de caixa. Toda e qualquer alteração realizada em qualquer uma das       */

/* procedures do fluxo de caixa deve ser cuidadosamente verificada e realizada no fluxo de caixa em lote.           */

/* Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando assim que           */

/* existam diferenças entre os fluxos de caixa.                                                                                                                */

/*--------------- AO ALTERAR O FLUXO DE CAIXA ALTERAR TAMBÉM O FLUXO DE CAIXA EM LOTE ---------------*/

vl_previsto_w			double precision;
vl_total_previsto_w		double precision;
vl_total_provisionado_w		double precision;
dt_vencimento_maior_w		timestamp;
vl_fluxo_maior_w		double precision;
vl_diferenca_w			double precision;
ie_ordenacao_w			varchar(1);
vl_fluxo_w			double precision;
cd_conta_financ_w		bigint;
qt_meses_valor_contrato_w	smallint;
ie_deduzir_vl_pago_contrato_w	varchar(1);
dt_inicial_media_w		timestamp;
dt_final_media_w		timestamp;
dt_referencia_w			timestamp;
cd_conta_financ_ant_w		bigint;
ie_operacao_w			varchar(10);
vl_acumulado_w			double precision;
dt_inicial_venc_w		timestamp;
dt_final_venc_w			timestamp;
vl_mes_atual_w			double precision;
dt_previsto_w			timestamp;
dt_util_w			timestamp;
ie_somente_futuro_w		varchar(1);
dt_inicio_w			timestamp;
dt_inicio_mes_w			timestamp;
dt_final_mes_w			timestamp;
dt_final_w			timestamp;
cd_moeda_empresa_w		integer;

/* busca as contas financeiras dos títulos provisionados do período para incluir no fluxo previsto */

c01 CURSOR FOR
SELECT	distinct
	x.cd_conta_financ,
	x.ie_ordenacao
from	conta_financeira y,
	(select	cd_conta_financ,
		'1' ie_ordenacao
	from (select	c.nr_seq_conta_financ cd_conta_financ
		from	titulo_pagar_baixa d,
			titulo_pagar_classif c,
			titulo_pagar b
		where (ie_restringe_estab_p = 'N' or substr(obter_se_conta_financ_estab(c.nr_seq_conta_financ, cd_estabelecimento_p,ie_restringe_estab_p),1,1) = 'S')
		and	b.nr_titulo		= c.nr_titulo
		and	not exists (select	1
			from	titulo_pagar_baixa_cc x
			where	x.nr_seq_baixa	= d.nr_sequencia
			and	x.nr_titulo	= d.nr_titulo)
		and	b.ie_situacao		<> 'C'
		and (ie_restringe_estab_p = 'N' or b.cd_estabelecimento = cd_estabelecimento_p)
		and	obter_empresa_estab(b.cd_estabelecimento) = cd_empresa_p
		and	b.nr_titulo		= d.nr_titulo
		and	substr(obter_se_media_regra(c.nr_seq_conta_financ),1,1) = 'S'
		and	d.dt_baixa		between dt_inicio_mes_w and dt_final_mes_w
		
union all

		SELECT	e.cd_conta_financ cd_conta_financ
		from	titulo_pagar_baixa_cc e,
			titulo_pagar_baixa d,
			titulo_pagar b
		where (ie_restringe_estab_p = 'N' or substr(obter_se_conta_financ_estab(e.cd_conta_financ, cd_estabelecimento_p,ie_restringe_estab_p),1,1) = 'S')
		and	d.nr_sequencia		= e.nr_seq_baixa
		and	d.nr_titulo		= e.nr_titulo
		and	b.ie_situacao		<> 'C'
		and (ie_restringe_estab_p = 'N' or b.cd_estabelecimento = cd_estabelecimento_p)
		and	obter_empresa_estab(b.cd_estabelecimento) = cd_empresa_p
		and	b.nr_titulo		= d.nr_titulo
		and	substr(obter_se_media_regra(e.cd_conta_financ),1,1) = 'S'
		and	d.dt_baixa		between dt_inicio_mes_w and dt_final_mes_w) alias15) x
where	CASE WHEN ie_somente_ativa_p='S' THEN y.ie_situacao  ELSE 'A' END 	= 'A'
and	x.cd_conta_financ	= y.cd_conta_financ
order by	ie_ordenacao;

/* buscar os títulos provisionados do período para incluir no fluxo previsto */

c02 CURSOR FOR
SELECT	coalesce(sum(vl_fluxo),0) vl_fluxo
from (select (dividir_sem_round(coalesce(c.vl_titulo, b.vl_titulo),b.vl_titulo) * b.vl_titulo) vl_fluxo
	from	estabelecimento d,
		titulo_pagar_classif c,
		titulo_pagar b
	where (ie_restringe_estab_p = 'N' or substr(obter_se_conta_financ_estab(c.nr_seq_conta_financ, cd_estabelecimento_p,ie_restringe_estab_p),1,1) = 'S')
	and	c.nr_seq_conta_financ	= cd_conta_financ_w
	and	b.nr_titulo		= c.nr_titulo
	and (ie_restringe_estab_p = 'N' or b.cd_estabelecimento = cd_estabelecimento_p)
	and	d.cd_empresa		= cd_empresa_p
	and	b.cd_estabelecimento	= d.cd_estabelecimento
	and	b.ie_situacao		= 'A'
	and	b.dt_vencimento_atual	between dt_inicio_w and dt_final_w) alias9;

c03 CURSOR FOR
SELECT	coalesce(sum(vl_fluxo),0) / qt_meses_valor_contrato_w,
	dt_previsto
from (select (dividir_sem_round(coalesce(c.vl_titulo, b.vl_titulo),b.vl_titulo) * d.vl_pago) vl_fluxo,
		pkg_date_utils.start_of(d.dt_baixa,'DD',0) dt_previsto
	from	titulo_pagar_baixa d,
		titulo_pagar_classif c,
		titulo_pagar b
	where (ie_restringe_estab_p = 'N' or substr(obter_se_conta_financ_estab(c.nr_seq_conta_financ, cd_estabelecimento_p,ie_restringe_estab_p),1,1) = 'S')
	and	c.nr_seq_conta_financ	= cd_conta_financ_w
	and	b.nr_titulo		= c.nr_titulo
	and	not exists (select	1
		from	titulo_pagar_baixa_cc x
		where	x.nr_seq_baixa	= d.nr_sequencia
		and	x.nr_titulo	= d.nr_titulo)
	and	b.ie_situacao		<> 'C'
	and (ie_restringe_estab_p = 'N' or b.cd_estabelecimento = cd_estabelecimento_p)
	and	obter_empresa_estab(b.cd_estabelecimento) = cd_empresa_p
	and	b.nr_titulo		= d.nr_titulo
	and	d.dt_baixa		between dt_inicial_media_w and dt_final_media_w
	
union all

	SELECT	e.vl_pago vl_fluxo,
		pkg_date_utils.start_of(d.dt_baixa,'DD',0) dt_previsto
	from	titulo_pagar_baixa_cc e,
		titulo_pagar_baixa d,
		titulo_pagar b
	where (ie_restringe_estab_p = 'N' or substr(obter_se_conta_financ_estab(e.cd_conta_financ, cd_estabelecimento_p,ie_restringe_estab_p),1,1) = 'S')
	and	e.cd_conta_financ	= cd_conta_financ_w
	and	d.nr_sequencia		= e.nr_seq_baixa
	and	d.nr_titulo		= e.nr_titulo
	and	b.ie_situacao		<> 'C'
	and (ie_restringe_estab_p = 'N' or b.cd_estabelecimento = cd_estabelecimento_p)
	and	obter_empresa_estab(b.cd_estabelecimento) = cd_empresa_p
	and	b.nr_titulo		= d.nr_titulo
	and	d.dt_baixa		between dt_inicial_media_w and dt_final_media_w) alias18
group by	dt_previsto;


BEGIN

/* Projeto Multimoeda - Busca a moeda padrão da empresa para gravar no fluxo. */

select	obter_moeda_padrao_empresa(cd_estabelecimento_p,'E')
into STRICT	cd_moeda_empresa_w
;

select	coalesce(max(a.qt_meses_valor_contrato),1),
	coalesce(max(a.ie_deduzir_vl_pago_contrato),'N'),
	coalesce(max(ie_somente_futuro),'S')
into STRICT	qt_meses_valor_contrato_w,
	ie_deduzir_vl_pago_contrato_w,
	ie_somente_futuro_w
from	parametro_fluxo_caixa a
where	a.cd_estabelecimento	= cd_estabelecimento_p;

dt_inicio_w	:= dt_inicial_p;
dt_final_w	:= fim_dia(dt_final_p);

if (ie_somente_futuro_w = 'S') then
	dt_inicio_w	:= pkg_date_utils.start_of(clock_timestamp(), 'DD',0);
end if;

/* excluir o fluxo previsto de contratos gerado anteriormente */

delete	from fluxo_caixa
where	ie_origem		= 'I'
and	ie_periodo		= 'D'
and	ie_integracao		= 'CO'
and	ie_contrato		= 'S'
and	ie_classif_fluxo	= 'R'
and	coalesce(cd_estabelecimento,0)	= coalesce(cd_estabelecimento_p,coalesce(cd_estabelecimento,0))
and	cd_empresa		= cd_empresa_p
and	dt_referencia		between dt_inicio_w and dt_final_w;

dt_inicio_mes_w	:= PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.ADD_MONTH(dt_inicial_p,qt_meses_valor_contrato_w*-1,0),'MONTH', 0);
dt_final_mes_w	:= fim_dia(PKG_DATE_UTILS.ADD_MONTH(dt_final_p,-1,0));

open	c01;
loop
fetch	c01 into
	cd_conta_financ_w,
	ie_ordenacao_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	if (ie_ordenacao_w	= '1') then

		cd_conta_financ_ant_w	:= cd_conta_financ_w;
		dt_referencia_w		:= dt_inicio_w;
		vl_total_previsto_w	:= 0;
		dt_vencimento_maior_w	:= null;
		vl_fluxo_maior_w	:= null;

		/* o laço serve para o caso do usuário filtrar mais de um mês */

		while(dt_referencia_w	<= dt_final_p) loop

			if (pkg_date_utils.start_of(dt_referencia_w,'MONTH',0)	> pkg_date_utils.start_of(dt_inicio_w,'MONTH',0)) then
				dt_inicial_media_w	:= PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.ADD_MONTH(dt_referencia_w,qt_meses_valor_contrato_w * -1,0),'MONTH', 0);

			else
				dt_inicial_media_w	:= PKG_DATE_UTILS.ADD_MONTH(dt_inicio_w,qt_meses_valor_contrato_w * -1,0);

			end if;

			if (pkg_date_utils.start_of(dt_referencia_w,'MONTH',0)	= pkg_date_utils.start_of(dt_final_p,'MONTH',0)) then
				dt_final_media_w	:= fim_dia(PKG_DATE_UTILS.ADD_MONTH(dt_final_p,-1,0));

			else
				dt_final_media_w	:= fim_dia(fim_mes(PKG_DATE_UTILS.ADD_MONTH(dt_referencia_w,-1,0)));

			end if;

			open	c03;
			loop
			fetch	c03 into
				vl_previsto_w,
				dt_previsto_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */

				vl_total_previsto_w	:= coalesce(vl_total_previsto_w,0) + coalesce(vl_previsto_w,0);

				if (coalesce(vl_fluxo_maior_w::text, '') = '') or (vl_previsto_w		> vl_fluxo_maior_w) then
					begin
					begin
					dt_vencimento_maior_w	:= pkg_date_utils.get_date(pkg_date_utils.extract_field('DAY', dt_previsto_w, 0), dt_inicio_w, 0);
					exception
					when others then
						dt_vencimento_maior_w	:= pkg_date_utils.start_of(pkg_date_utils.end_of(dt_inicio_w, 'MONTH'), 'DD');
					end;

					vl_fluxo_maior_w	:= vl_previsto_w;
					end;

				end if;

			end	loop;
			close	c03;

			dt_referencia_w		:= PKG_DATE_UTILS.ADD_MONTH(dt_referencia_w,1,0);

		end	loop;

		/* o vl_total_provisionado_w serve para comparar com o valor previsto e calcular a diferença */

		vl_total_provisionado_w	:= 0;

		open	c02;
		loop
		fetch	c02 into
			vl_fluxo_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */

			if (ie_operacao_p	<> 'A') then

				select	obter_operacao_conta_financ(cd_conta_financ_w)
				into STRICT	ie_operacao_w
				;

			end if;

			if (ie_operacao_p = 'A' or (ie_operacao_p = 'S' and ie_operacao_w <> 'D') or (ie_operacao_p = 'D' and ie_operacao_w <> 'S')) then

				vl_total_provisionado_w	:= coalesce(vl_total_provisionado_w,0) + coalesce(vl_fluxo_w,0);

			end if;

		end	loop;
		close	c02;

		if (ie_deduzir_vl_pago_contrato_w	= 'S') then
			vl_diferenca_w	:= coalesce(vl_total_previsto_w,0) - coalesce(vl_total_provisionado_w,0);
		end if;

		if (vl_diferenca_w	> 0) then

			/* se o dia for menor do que a data atual, assume a data atual */

			if (dt_vencimento_maior_w	< pkg_date_utils.start_of(clock_timestamp(),'DD',0)) then
				dt_vencimento_maior_w	:= pkg_date_utils.start_of(clock_timestamp(),'DD',0);
			end if;

			/* incluir somente em dia útil */

			dt_util_w	:= obter_proximo_dia_util(cd_estabelecimento_p,dt_vencimento_maior_w);

			/* se o próximo dia útil for fora do mês, deixa no dia não útil */

			if (pkg_date_utils.start_of(dt_util_w,'MONTH',0) = pkg_date_utils.start_of(dt_vencimento_maior_w,'MONTH',0)) then
				dt_vencimento_maior_w	:= pkg_date_utils.start_of(dt_util_w,'DD',0);
			end if;

			begin

			insert	into fluxo_caixa(cd_estabelecimento,
				dt_referencia,
				cd_conta_financ,
				ie_classif_fluxo,
				dt_atualizacao,
				nm_usuario,
				vl_fluxo,
				ie_origem,
				ie_periodo,
				ie_integracao,
				ie_contrato,
				cd_empresa,
				ds_observacao,
				cd_moeda)
			values (	cd_estabelecimento_p,
				dt_vencimento_maior_w,
				cd_conta_financ_ant_w,
				'R',
				clock_timestamp(),
				nm_usuario_p,
				coalesce(vl_diferenca_w,0),
				'I',
				'D',
				'CO',
				'S',
				cd_empresa_p,
				wheb_mensagem_pck.get_texto(305697),
				cd_moeda_empresa_w);
			exception
			when	unique_violation then

				update	fluxo_caixa
				set	vl_fluxo		= coalesce(vl_fluxo,0) + coalesce(vl_diferenca_w,0)
				where	ie_origem		= 'I'
				and	ie_periodo		= 'D'
				and	ie_integracao		= 'CO'
				and	ie_contrato		= 'S'
				and	ie_classif_fluxo	= 'R'
				and	coalesce(cd_estabelecimento,0)	= coalesce(cd_estabelecimento_p,coalesce(cd_estabelecimento,0))
				and	cd_empresa		= cd_empresa_p
				and	dt_referencia		= dt_vencimento_maior_w
				and	cd_conta_financ		= cd_conta_financ_ant_w;

			end;

	end if;

	end if;

end	loop;
close	c01;

end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_previsto_contrato ( cd_estabelecimento_p bigint, nm_usuario_p text, cd_empresa_p bigint, ie_restringe_estab_p text, dt_inicial_p timestamp, dt_final_p timestamp, ie_operacao_p text, ie_somente_ativa_p text) FROM PUBLIC;

