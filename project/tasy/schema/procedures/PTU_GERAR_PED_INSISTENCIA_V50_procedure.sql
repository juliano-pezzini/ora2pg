-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_ped_insistencia_v50 ( nr_seq_requisicao_p bigint, nr_seq_guia_p bigint, nr_seq_complemento_p bigint, ds_menssagem_p text, nr_versao_ptu_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_execucao_p INOUT bigint) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar a transação de pedido de insitência do PTU, via SCS
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_tipo_cliente_w		varchar(3);
cd_unimed_executora_w		smallint;
cd_unimed_beneficiario_w	smallint;
nr_seq_origem_w			bigint;
ds_mensagem_w			varchar(4000);
qt_registros_w			smallint := 0;
ds_menssagem_w			varchar(255);
ie_tipo_resposta_w		varchar(255);
qt_reg_auditoria_w		bigint := 0;
nr_seq_resp_autoriz_w		bigint;


BEGIN

if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
	begin
		select	a.nr_sequencia,
			'PA'
		into STRICT	nr_seq_execucao_p,
			ie_tipo_resposta_w
		from	ptu_pedido_autorizacao	b,
			ptu_controle_execucao	a
		where	a.nr_seq_pedido_aut	= b.nr_sequencia
		and	b.nr_seq_guia		= nr_seq_guia_p;
	exception
	when others then
		begin
			select	a.nr_sequencia,
				'PC'
			into STRICT	nr_seq_execucao_p,
				ie_tipo_resposta_w
			from	ptu_pedido_compl_aut	b,
				ptu_controle_execucao	a
			where	a.nr_seq_pedido_compl	= b.nr_sequencia
			and	b.nr_seq_guia		= nr_seq_guia_p;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179721);
		end;
	end;

	select 	max(nr_sequencia)
	into STRICT	nr_seq_resp_autoriz_w
	from	ptu_resposta_autorizacao
	where	nr_seq_guia		= nr_seq_guia_p
	and	ie_tipo_resposta	= ie_tipo_resposta_w;

	if (nr_seq_resp_autoriz_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(179721);
	else
		select	ie_tipo_cliente,
			cd_unimed_executora,
			cd_unimed_beneficiario,
			nr_seq_execucao,
			nr_seq_origem
		into STRICT	ie_tipo_cliente_w,
			cd_unimed_executora_w,
			cd_unimed_beneficiario_w,
			nr_seq_execucao_p,
			nr_seq_origem_w
		from	ptu_resposta_autorizacao
		where	nr_sequencia	= nr_seq_resp_autoriz_w;
	end if;

	CALL pls_guia_gravar_historico(nr_seq_guia_p,2,substr('Enviado o pedido de insistência para a Unimed '||cd_unimed_beneficiario_w||' com a mensagem: '||chr(10)||ds_menssagem_p,1,4000),'',nm_usuario_p);
elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
	begin
		select	a.nr_sequencia,
			'PA'
		into STRICT	nr_seq_execucao_p,
			ie_tipo_resposta_w
		from	ptu_pedido_autorizacao	b,
			ptu_controle_execucao	a
		where	a.nr_seq_pedido_aut	= b.nr_sequencia
		and	b.nr_seq_requisicao	= nr_seq_requisicao_p;
	exception
	when others then
		begin
			select	a.nr_sequencia,
				'PC'
			into STRICT	nr_seq_execucao_p,
				ie_tipo_resposta_w
			from	ptu_pedido_compl_aut	b,
				ptu_controle_execucao	a
			where	a.nr_seq_pedido_compl	= b.nr_sequencia
			and	b.nr_seq_requisicao	= nr_seq_requisicao_p;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179721);
		end;
	end;
/*
	select	count(1)
	into	qt_registros_w
	from 	ptu_pedido_insistencia
	where	nr_seq_execucao	= nr_seq_execucao_p;

	if	(qt_registros_w	> 0) then
		goto final;
	end if;
*/
	select 	max(nr_sequencia)
	into STRICT	nr_seq_resp_autoriz_w
	from	ptu_resposta_autorizacao
	where	nr_seq_requisicao	= nr_seq_requisicao_p
		and	ie_tipo_resposta	= ie_tipo_resposta_w;

	if (nr_seq_resp_autoriz_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(179721);
	else
		select	ie_tipo_cliente,
			cd_unimed_executora,
			cd_unimed_beneficiario,
			nr_seq_execucao,
			nr_seq_origem
		into STRICT	ie_tipo_cliente_w,
			cd_unimed_executora_w,
			cd_unimed_beneficiario_w,
			nr_seq_execucao_p,
			nr_seq_origem_w
		from	ptu_resposta_autorizacao
		where	nr_sequencia	= nr_seq_resp_autoriz_w;
	end if;

	CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p,'L',substr('Enviado o pedido de insistência para a Unimed '||cd_unimed_beneficiario_w||' com a mensagem: '||chr(10)||ds_menssagem_p,1,4000),null,nm_usuario_p);
end if;

select	substr(replace(replace(ds_menssagem_p,chr(13),''),chr(10),''),1,999)
into STRICT	ds_menssagem_w
;

select	count(1)
into STRICT	qt_reg_auditoria_w
from	ptu_pedido_insistencia
where	nr_seq_guia	= nr_seq_guia_p
and	ie_enviado	= 'N';

if (qt_reg_auditoria_w	> 0) then
	update	ptu_pedido_insistencia
	set	ie_enviado	= 'S',
		nm_usuario	= nm_usuario_p
	where	nr_seq_guia	= nr_seq_guia_p
	and	ie_enviado	= 'N';
end if;

insert	into ptu_pedido_insistencia(nr_sequencia, ie_tipo_cliente, cd_unimed_executora,
	 cd_unimed_beneficiario, nr_seq_execucao, nr_seq_origem,
	 dt_atualizacao, nm_usuario, nr_seq_guia,
	 cd_transacao, ds_mensagem, nr_seq_requisicao,
	 nr_versao, nm_usuario_nrec, dt_atualizacao_nrec,
	 ie_enviado)
values (nextval('ptu_pedido_insistencia_seq'), ie_tipo_cliente_w, cd_unimed_executora_w,
	 cd_unimed_beneficiario_w, nr_seq_execucao_p, nr_seq_origem_w,
	 clock_timestamp(), nm_usuario_p, nr_seq_guia_p,
	 '00302', ds_menssagem_w, nr_seq_requisicao_p,
	 nr_versao_ptu_p, nm_usuario_p, clock_timestamp(),
	 'N');

<<final>>
qt_registros_w	:= 0;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_ped_insistencia_v50 ( nr_seq_requisicao_p bigint, nr_seq_guia_p bigint, nr_seq_complemento_p bigint, ds_menssagem_p text, nr_versao_ptu_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_execucao_p INOUT bigint) FROM PUBLIC;

