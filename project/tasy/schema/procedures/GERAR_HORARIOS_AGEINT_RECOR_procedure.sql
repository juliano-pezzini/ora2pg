-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE colunas AS (nm_coluna_w varchar(255));


CREATE OR REPLACE PROCEDURE gerar_horarios_ageint_recor ( dt_agenda_p timestamp, nm_usuario_p text, nr_seq_ageint_p bigint, cd_estabelecimento_p bigint, cd_agenda_p bigint, ds_hor_min_p INOUT bigint, ds_hor_max_p INOUT bigint, ds_hor_min_livre_p INOUT bigint, ds_hor_max_livre_p INOUT bigint, nr_Seq_agenda_p bigint) AS $body$
DECLARE

TYPE vetor IS TABLE OF colunas INDEX BY integer;
vetor_w			vetor;
ds_horario_w		timestamp;
cd_tipo_Agenda_w	bigint;
ie_status_agenda_w	varchar(2);
ivet			bigint;
ind			bigint;
qt_horarios_ageint_w	integer;
ds_comando_w		varchar(4000);
ds_sep_bv_w		varchar(50);
ds_parametros_w		varchar(4000);
nr_seq_agenda_w		agenda_paciente.nr_sequencia%TYPE;
nr_minuto_duracao_w	bigint;
cd_agenda_w		bigint;
ie_feriado_w		varchar(1);
ie_sobra_horario_w	varchar(1);
ds_retorno_w		varchar(255);
nr_Seq_Ageint_lib_w	bigint;
cd_turno_w		varchar(1);
nr_seq_ageint_item_w	bigint;
dt_encaixe_w		timestamp;
cd_turno_ww		varchar(1);
nr_minuto_duracao_ww	bigint;
cd_pessoa_fisica_w	varchar(10);
cd_medico_encaixe_w	varchar(10);

ie_gera_hor_w		varchar(1);
qt_encaixe_w		bigint;
nr_seq_turno_w		bigint;
ie_turno_medico_w	varchar(1);
nr_seq_grupo_agecons_w	bigint;

ie_apres_hr_medico_w	varchar(1);

dt_age_ant_w		timestamp;
nr_minuto_dur_ant_w	bigint;

ie_status_agenda_controle_w	varchar(5);
cd_agenda_ant_w		bigint;
nr_seq_proc_interno_w	bigint;
ie_turno_exame_w	varchar(1);
ie_anestesia_w		varchar(1);
ie_gera_hor_anest_w	varchar(1)	:= 'S';
nr_seq_medico_regra_w	bigint;

qt_marc_medico_w	bigint;
qt_marc_grupo_w		bigint := 0;

qt_regra_medico_w	bigint;

ds_erro_hor_w		varchar(255);
ie_consiste_hor_medico_w	varchar(1);

ie_rodizio_medico_w	varchar(1);
ie_permite_w		varchar(1);
ie_apres_marc_w		varchar(1) := 'S';
qt_marc_agenda_rodizio_w	bigint;
nr_seq_grupo_selec_w	bigint;
cd_paciente_w		varchar(10);
qt_dias_fut_w   	agenda.nr_dias_fut_agendamento%TYPE;
dt_agenda_w     	timestamp;


C01 CURSOR FOR
	SELECT	a.hr_inicio,
		a.ie_status_agenda,
		a.nr_sequencia,
		a.nr_minuto_duracao,
		a.cd_turno,
		Ageint_Obter_Se_Turno_Exame(nr_seq_proc_interno_w, a.cd_Agenda, cd_pessoa_fisica_w, a.hr_inicio, b.cd_estabelecimento, nr_seq_grupo_selec_w, cd_paciente_w, null)
	FROM	agenda_paciente a,
		agenda b
	WHERE	a.cd_agenda = b.cd_agenda
	and	a.cd_agenda		= cd_agenda_w
	AND	a.hr_inicio		= dt_agenda_p
	ORDER BY 1;

C02 CURSOR FOR
	SELECT	dt_Agenda,
		ie_status_agenda,
		nr_sequencia,
		nr_minuto_duracao,
		cd_turno,
		nr_seq_turno,		
		Ageint_Obter_Grupo_Agenda_Cons(cd_agenda)
	FROM	agenda_consulta
	WHERE	cd_agenda	= cd_agenda_w
	AND	dt_agenda = dt_agenda_p
	--and	Ageint_Obter_Se_ProcAdic_Turno(dt_agenda, cd_agenda, nr_seq_ageint_item_w, cd_estabelecimento_p, nr_seq_ageint_p, nm_usuario_p) = 'S'
	ORDER BY 1;

C03 CURSOR FOR
	SELECT	a.cd_agenda,
		b.ie_feriado,
		b.ie_gerar_sobra_horario,
		a.nr_sequencia,
		b.cd_tipo_agenda,
		a.nr_seq_Ageint_item,
		a.cd_pessoa_fisica,
		c.nr_seq_proc_interno,
		coalesce(c.ie_anestesia,'N'),
		a.nr_seq_medico_regra,
		c.nr_seq_grupo_selec,
		b.nr_dias_fut_agendamento
	FROM	agenda b,
		ageint_lib_usuario a,
		agenda_integrada_item c
	WHERE	a.nm_usuario	= nm_usuario_p
	AND	a.nr_seq_ageint	= nr_seq_ageint_p
	AND	a.cd_agenda	= b.cd_agenda
	and	c.nr_sequencia	= a.nr_seq_Ageint_item
	and (b.cd_agenda	= cd_agenda_p or coalesce(cd_agenda_p::text, '') = '')
	ORDER BY 1;

C04 CURSOR FOR
	SELECT	a.dt_encaixe,
		a.cd_turno,
		a.nr_minuto_duracao,
		a.cd_pessoa_Fisica
	FROM	ageint_encaixe_usuario a
	WHERE	a.cd_Agenda		= cd_agenda_w
	AND	a.nr_seq_Ageint		= nr_seq_ageint_p
	AND	a.nr_seq_ageint_item	= nr_seq_ageint_item_w
	AND (coalesce(a.cd_pessoa_fisica,cd_pessoa_fisica_w)	= cd_pessoa_fisica_w OR coalesce(cd_pessoa_fisica_w::text, '') = '')
	AND	coalesce(a.ie_gerado,'N')	= 'N'
	and	not exists ( SELECT 1 from ageint_horarios_usuario b where a.cd_agenda = b.cd_agenda and a.dt_encaixe = b.hr_agenda)
	ORDER BY 1;
	
C05 CURSOR FOR
	SELECT	dt_Agenda,
		ie_status_agenda,
		nr_sequencia,
		nr_minuto_duracao,
		cd_turno,
		nr_seq_turno,		
		Ageint_Obter_Grupo_Agenda_Cons(cd_agenda)
	FROM	agenda_consulta
	WHERE	cd_agenda	= cd_agenda_w
	AND	dt_agenda = dt_agenda_p
	and	coalesce(nr_seq_Agenda_p,0) = 0
	and 	ie_status_agenda <> 'C'
	
union

	SELECT	dt_Agenda,
		ie_status_agenda,
		nr_sequencia,
		nr_minuto_duracao,
		cd_turno,
		nr_seq_turno,		
		Ageint_Obter_Grupo_Agenda_Cons(cd_agenda)
	FROM	agenda_consulta
	WHERE	cd_agenda	= cd_agenda_w
	AND	dt_agenda = dt_agenda_p
	and	nr_sequencia	= coalesce(nr_seq_Agenda_p,0) 
	--and	Ageint_Obter_Se_ProcAdic_Turno(dt_agenda, cd_agenda, nr_seq_ageint_item_w, cd_estabelecimento_p, nr_seq_ageint_p, nm_usuario_p) = 'S'
	ORDER BY 1 LIMIT 1;


BEGIN

dt_agenda_w := Trunc(dt_agenda_p);

ie_apres_hr_medico_w := Obter_Param_Usuario(869, 157, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_apres_hr_medico_w);
ie_consiste_hor_medico_w := Obter_Param_Usuario(869, 158, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_hor_medico_w);
qt_marc_agenda_rodizio_w := Obter_Param_Usuario(869, 198, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_marc_agenda_rodizio_w);

DELETE 	FROM ageint_horarios_usuario
WHERE	TRUNC(hr_agenda)	= trunc(dt_Agenda_p)
AND	nm_usuario	 	= nm_usuario_p;

update	ageint_lib_usuario
set	ie_apres_marc = 'S'
where	nr_seq_ageint = nr_seq_ageint_p;

select	max(cd_pessoa_fisica)
into STRICT	cd_paciente_w
from	agenda_integrada
where	nr_sequencia	= nr_seq_ageint_p;

OPEN C03;
LOOP
FETCH C03 INTO
	cd_agenda_w,
	ie_feriado_w,
	ie_sobra_horario_w,
	nr_Seq_Ageint_lib_w,
	cd_tipo_Agenda_w,
	nr_seq_ageint_item_w,
	cd_pessoa_fisica_w,
	nr_seq_proc_interno_w,
	ie_anestesia_w,
	nr_seq_medico_regra_w,
	nr_seq_grupo_selec_w,
	qt_dias_fut_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	BEGIN

	select	count(*)
	into STRICT	qt_regra_medico_w
	from	agenda_medico
	where	cd_agenda = cd_agenda_w;		

	nr_minuto_dur_ant_w	:= 0;

	IF (qt_dias_fut_w > 0) and (dt_agenda_w > trunc(clock_timestamp() + qt_dias_fut_w)) THEN

		ie_apres_marc_w := 'N';
		update	ageint_lib_usuario
		set	ie_apres_marc = 'N'
		where	nr_sequencia = nr_Seq_Ageint_lib_w;

	ELSIF (cd_tipo_agenda_w	= 2) THEN
		
		ie_apres_marc_w	:= 'S';
		
		if (coalesce(cd_agenda_ant_w,0)	<> cd_agenda_w) then
			CALL Gerar_Horario_Agenda_Exame(cd_estabelecimento_p, cd_agenda_w, dt_agenda_p, nm_usuario_p);
		end if;
		
		select	coalesce(max(ie_rodizio_medico),'N')
		into STRICT	ie_rodizio_medico_w
		from	agenda
		where	cd_agenda = cd_agenda_w;
		
		if (ie_rodizio_medico_w = 'S') and (qt_marc_agenda_rodizio_w > 0) then
			ie_permite_w := Ageint_verifica_med_rodizio(nr_seq_ageint_item_w, dt_agenda_p, cd_estabelecimento_p, nm_usuario_p, cd_pessoa_fisica_w, qt_marc_agenda_rodizio_w, ie_permite_w);
			if (ie_permite_w = 'N') then	
				ie_apres_marc_w := 'N';
				update	ageint_lib_usuario
				set	ie_apres_marc = 'N'
				where	nr_sequencia = nr_Seq_Ageint_lib_w;
			end if;
		end if;
		if (ie_apres_marc_w = 'S') then
			OPEN C01;
			LOOP
			FETCH C01 INTO
				ds_horario_w,
				ie_status_agenda_w,
				nr_Seq_Agenda_w,
				nr_minuto_duracao_w,
				cd_turno_w,
				ie_turno_exame_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				BEGIN

				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					ie_turno_medico_w	:= Ageint_Obter_Se_Turno_Medico(cd_pessoa_fisica_w, ds_horario_w, cd_agenda_w, nm_usuario_p, nr_seq_medico_regra_w, cd_estabelecimento_p);
				else
					ie_turno_medico_w	:= 'S';
				end if;

				if (ie_anestesia_w	= 'S') then
					ie_gera_hor_anest_w	:= Ageint_Obter_Se_Hor_Anest(cd_agenda_w, ds_horario_w, nr_seq_proc_interno_w);
				else
					ie_gera_hor_anest_w	:= 'S';
				end if;

				ie_status_agenda_controle_w	:= ie_status_agenda_w;

				SELECT	COUNT(*)
				INTO STRICT	qt_encaixe_w
				FROM	ageint_marcacao_usuario
				WHERE	cd_agenda	= cd_agenda_w
				AND	hr_agenda	= ds_horario_w
				AND	nr_seq_ageint	= nr_seq_ageint_p
				AND	coalesce(ie_gerado,'N') = 'N'
				AND	coalesce(ie_encaixe,'N') = 'S';

				/*SELECT	COUNT(*)
				INTO	qt_marc_medico_w
				FROM	ageint_marcacao_usuario
				WHERE	cd_pessoa_fisica	= cd_pessoa_fisica_w
				AND	(hr_agenda		between ds_horario_w and (ds_horario_w + (nr_minuto_duracao_w - 1) /1440)
				or	(ds_horario_w		between hr_agenda and (hr_Agenda + (nr_minuto_duracao - 1) /1440)))
				and	nr_Seq_Agenda		<> nr_seq_Agenda_w;
				--AND	nr_seq_ageint		= nr_seq_ageint_p

				--AND	NVL(ie_gerado,'N') 	= 'N'

				--AND	NVL(ie_encaixe,'N') 	= 'S';*/

				
				if	(ie_apres_hr_medico_w = 'N') then
					SELECT	COUNT(*)
					INTO	qt_marc_medico_w
					FROM	ageint_marcacao_usuario
					WHERE	cd_pessoa_fisica	= cd_pessoa_fisica_w
					AND	(ds_horario_w + nr_minuto_duracao_w / 1440 between (hr_agenda  + (1 / 1440)) and (hr_agenda + (nr_minuto_duracao - 1) /1440)
					or	(ds_horario_w		between hr_agenda and (hr_Agenda + (nr_minuto_duracao - 1) /1440)))
					and	nr_Seq_Agenda		<> nr_seq_Agenda_w;
					if	(ie_consiste_hor_medico_w	= 'S') AND (ie_status_agenda_w in ('L', 'LF', 'B')) then
						consistir_horario_medico(nr_seq_agenda_w, cd_pessoa_fisica_w, nr_minuto_duracao_w, ds_erro_hor_w);
					end if;
					
				else
					qt_marc_medico_w := 0;
				end if;
				
				IF	(nr_minuto_dur_ant_w IS NOT NULL) AND
					(nr_minuto_dur_ant_w > 0) THEN
					IF	(ds_horario_w >= dt_age_ant_w) AND
						(ds_horario_w < dt_age_ant_w + nr_minuto_dur_ant_w / 1440) THEN
						ie_status_agenda_w	:= 'N';
					END IF;
				END IF;
				
				IF	(qt_encaixe_w	= 0) AND
					(ie_turno_medico_w	= 'S') and
					(ie_turno_exame_w	= 'S') and
					(ie_gera_hor_anest_w	= 'S') and
					(qt_marc_medico_w	= 0) and
					(ds_erro_hor_w is null) THEN
					INSERT INTO ageint_horarios_usuario
						(nr_sequencia,
						cd_agenda,
						hr_agenda,
						ie_status_agenda,
						nm_usuario,
						nr_Seq_Agenda,
						nr_minuto_duracao,
						nr_seq_ageint_lib,
						cd_turno,
						ie_encaixe,
						cd_pessoa_fisica)
					VALUES	(ageint_horarios_usuario_seq.NEXTVAL,
						cd_agenda_w,
						ds_horario_w,
						ie_status_agenda_w,
						nm_usuario_p,
						nr_Seq_Agenda_w,
						nr_minuto_duracao_w,
						nr_Seq_Ageint_lib_w,
						cd_turno_w,
						'N',
						cd_pessoa_fisica_w);
				END IF;

				if	(ie_status_agenda_controle_w	= 'N') then
					SELECT	nvl(MAX(nr_minuto_duracao),0)
					INTO	nr_minuto_dur_ant_w
					FROM	ageint_marcacao_usuario
					WHERE	cd_agenda	= cd_agenda_w
					AND	hr_agenda	= ds_horario_w
					AND	nr_seq_ageint	= nr_seq_ageint_p
					AND	NVL(ie_gerado,'N') = 'N'
					AND	NVL(ie_encaixe,'N') = 'N';

					dt_age_ant_w	:= ds_horario_w;
				end if;
				END;
			END LOOP;
			CLOSE C01;
		end if;
	ELSIF	(cd_tipo_agenda_w	IN (3,4)) THEN
		Horario_Livre_Consulta(cd_estabelecimento_p, cd_agenda_w, ie_feriado_w, dt_agenda_p, nm_usuario_p, 'S', ie_sobra_horario_w, 'N', 0, ds_retorno_w);
		OPEN C02;
		LOOP
		FETCH C02 INTO
			ds_horario_w,
			ie_status_agenda_w,
			nr_Seq_Agenda_w,
			nr_minuto_duracao_w,
			cd_turno_w,
			nr_seq_turno_w,			
			nr_seq_grupo_agecons_w;
		EXIT WHEN C02%NOTFOUND;
			BEGIN
			SELECT	Ageint_Obter_Se_ProcAdic_Turno(ds_horario_w, cd_agenda_w, nr_seq_ageint_item_w, cd_estabelecimento_p, nr_seq_ageint_p, nm_usuario_p)
			INTO	ie_gera_hor_w
			FROM	dual;

			ie_status_agenda_controle_w	:= ie_status_agenda_w;


			if	(qt_regra_medico_w > 0) and
				(cd_pessoa_fisica_w is not null) then
				ie_turno_medico_w	:= Ageint_Obter_Se_Turno_Medico(cd_pessoa_fisica_w, ds_horario_w, cd_agenda_w, nm_usuario_p, nr_seq_medico_regra_w, cd_estabelecimento_p);
			else
				ie_turno_medico_w	:= 'S';
			end if;

			SELECT	COUNT(*)
			INTO	qt_encaixe_w
			FROM	ageint_marcacao_usuario
			WHERE	cd_agenda	= cd_agenda_w
			AND	hr_agenda	= ds_horario_w
			AND	nr_seq_ageint	= nr_seq_ageint_p
			AND	NVL(ie_gerado,'N') = 'N'
			AND	NVL(ie_encaixe,'N') = 'S';

			SELECT	COUNT(*)
			INTO	qt_marc_medico_w
			FROM	ageint_marcacao_usuario
			WHERE	cd_pessoa_fisica	= cd_pessoa_fisica_w
			AND	(hr_agenda		between ds_horario_w and (ds_horario_w + (nr_minuto_duracao_w - 1) /1440)
			or	(ds_horario_w		between hr_agenda and (hr_Agenda + (nr_minuto_duracao - 1) /1440)))
			and	nr_Seq_Agenda		<> nr_seq_Agenda_w;
			
			if	(nr_seq_grupo_agecons_w > 0) then
				begin
				select	1
				into	qt_marc_grupo_w
				from	agenda_consulta a,
					ageint_agendas_grupo b
				where	a.cd_agenda		= b.cd_agenda
				and	b.nr_seq_grupo 		= nr_seq_grupo_agecons_w
				and	a.dt_agenda 		= ds_horario_w
				and	a.ie_status_agenda	not in ('L','C','B')
				and	rownum = 1;							
				exception
				when others then
					qt_marc_grupo_w := 0;
				end;
			end if;

			IF	(nr_minuto_dur_ant_w IS NOT NULL) AND
				(nr_minuto_dur_ant_w > 0) THEN
				IF	(ds_horario_w >= dt_age_ant_w) AND
					(ds_horario_w < dt_age_ant_w + nr_minuto_dur_ant_w / 1440) THEN
					ie_status_agenda_w	:= 'N';
				END IF;
			END IF;
			if	(ie_consiste_hor_medico_w	= 'S') AND (ie_status_agenda_w in ('L', 'LF', 'B')) then
				consistir_horario_medico(nr_seq_agenda_w, null, nr_minuto_duracao_w, ds_erro_hor_w);
			end if;
			
			IF	(ie_gera_hor_w = 'S') AND
				(qt_encaixe_w	= 0) and
				(ie_turno_medico_w = 'S') and
				(qt_marc_medico_w = 0) and
				(ds_erro_hor_w is null) then
				INSERT INTO ageint_horarios_usuario
					(nr_sequencia,
					cd_agenda,
					hr_agenda,
					ie_status_agenda,
					nm_usuario,
					nr_Seq_Agenda,
					nr_minuto_duracao,
					nr_Seq_Ageint_lib,
					cd_turno,
					ie_encaixe,
					cd_pessoa_Fisica,
					nr_seq_turno)
				VALUES	(ageint_horarios_usuario_seq.NEXTVAL,
					cd_agenda_w,
					ds_horario_w,
					decode(qt_marc_grupo_w ,0,ie_status_agenda_w,'N'),
					nm_usuario_p,
					nr_Seq_Agenda_w,
					nr_minuto_duracao_w,
					nr_Seq_Ageint_lib_w,
					cd_turno_w,
					'N',
					cd_pessoa_Fisica_w,
					nr_seq_turno_w);
			END IF;

			if	(ie_status_agenda_controle_w	= 'N') then
				SELECT	nvl(MAX(nr_minuto_duracao),0)
				INTO	nr_minuto_dur_ant_w
				FROM	ageint_marcacao_usuario
				WHERE	cd_agenda	= cd_agenda_w
				AND	hr_agenda	= ds_horario_w
				AND	nr_seq_ageint	= nr_seq_ageint_p
				AND	NVL(ie_gerado,'N') = 'N'
				AND	NVL(ie_encaixe,'N') = 'N';

				dt_age_ant_w	:= ds_horario_w;
			end if;
			END;
		END LOOP;
		CLOSE C02;
	ELSE
		/*
		GERAR HORARIOS AGENDA DE SERVICOS
		*/
		CALL Gerar_Horario_Agenda_Servico(cd_estabelecimento_p, cd_agenda_w, trunc(dt_agenda_p), nm_usuario_p);

		OPEN C05;
		LOOP
		FETCH C05 INTO
			ds_horario_w,
			ie_status_agenda_w,
			nr_Seq_Agenda_w,
			nr_minuto_duracao_w,
			cd_turno_w,
			nr_seq_turno_w,			
			nr_seq_grupo_agecons_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			BEGIN
			SELECT	Ageint_Obter_Se_ProcAdic_Turno(ds_horario_w, cd_agenda_w, nr_seq_ageint_item_w, cd_estabelecimento_p, nr_seq_ageint_p, nm_usuario_p)
			INTO STRICT	ie_gera_hor_w
			;
			
			ie_status_agenda_controle_w	:= ie_status_agenda_w;
				
			SELECT	COUNT(*)
			INTO STRICT	qt_encaixe_w
			FROM	ageint_marcacao_usuario
			WHERE	cd_agenda	= cd_agenda_w
			AND	hr_agenda	= ds_horario_w
			AND	nr_seq_ageint	= nr_seq_ageint_p
			AND	coalesce(ie_gerado,'N') = 'N'
			AND	coalesce(ie_encaixe,'N') = 'S';			

			IF (nr_minuto_dur_ant_w IS NOT NULL AND nr_minuto_dur_ant_w::text <> '') AND (nr_minuto_dur_ant_w > 0) THEN
				IF (ds_horario_w >= dt_age_ant_w) AND (ds_horario_w < dt_age_ant_w + nr_minuto_dur_ant_w / 1440) THEN
					ie_status_agenda_w	:= 'N';
				END IF;
			END IF;
						
			IF (ie_gera_hor_w = 'S') AND (qt_encaixe_w	= 0) AND (TRUNC(ds_horario_w)	>= TRUNC(clock_timestamp())) AND
				(((TRUNC(ds_horario_w)	= TRUNC(clock_timestamp())) OR (TRUNC(ds_horario_w)	<> TRUNC(clock_timestamp()))) OR (ie_status_agenda_w NOT IN ('L','B'))) THEN
				
				INSERT INTO ageint_horarios_usuario(nr_sequencia,
					cd_agenda,
					hr_agenda,
					ie_status_agenda,
					nm_usuario,
					nr_Seq_Agenda,
					nr_minuto_duracao,
					nr_Seq_Ageint_lib,
					cd_turno,
					ie_encaixe,
					cd_pessoa_Fisica,
					nr_seq_turno)
				VALUES (nextval('ageint_horarios_usuario_seq'),
					cd_agenda_w,
					ds_horario_w,
					ie_status_agenda_w,
					nm_usuario_p,
					nr_Seq_Agenda_w,
					nr_minuto_duracao_w,
					nr_Seq_Ageint_lib_w,
					cd_turno_w,
					'N',
					cd_pessoa_Fisica_w,
					nr_seq_turno_w);
			END IF;

			if (ie_status_agenda_controle_w	= 'N') then
				SELECT	coalesce(MAX(nr_minuto_duracao),0)
				INTO STRICT	nr_minuto_dur_ant_w
				FROM	ageint_marcacao_usuario
				WHERE	cd_agenda	= cd_agenda_w
				AND	hr_agenda	= ds_horario_w
				AND	nr_seq_ageint	= nr_seq_ageint_p
				AND	coalesce(ie_gerado,'N') = 'N'
				AND	coalesce(ie_encaixe,'N') = 'N';

				dt_age_ant_w	:= ds_horario_w;
			end if;

			END;
		END LOOP;
		CLOSE C05;
	END IF;

	OPEN C04;
	LOOP
	FETCH C04 INTO
		dt_encaixe_w,
		cd_turno_ww,
		nr_minuto_duracao_ww,
		cd_medico_encaixe_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		BEGIN
		INSERT INTO ageint_horarios_usuario(nr_sequencia,
				cd_agenda,
				hr_agenda,
				ie_status_agenda,
				nm_usuario,
				nr_Seq_Agenda,
				nr_minuto_duracao,
				nr_Seq_Ageint_lib,
				cd_turno,
				ie_encaixe,
				cd_pessoa_fisica)
			VALUES (nextval('ageint_horarios_usuario_seq'),
				cd_agenda_w,
				dt_encaixe_w,
				'L',
				nm_usuario_p,
				nr_Seq_Agenda_w,
				nr_minuto_duracao_ww,
				nr_Seq_Ageint_lib_w,
				cd_turno_ww,
				'S',
				cd_medico_encaixe_w);
		END;
	END LOOP;
	CLOSE C04;
	cd_agenda_ant_w	:= cd_Agenda_w;
	END;
END LOOP;
CLOSE C03;

SELECT	MIN(TO_CHAR(hr_agenda,'hh24'))
INTO STRICT	ds_hor_min_p
FROM	ageint_horarios_usuario
WHERE	nm_usuario		= nm_usuario_p
AND	TRUNC(hr_agenda)	= trunc(dt_agenda_p);

SELECT	MAX(TO_CHAR(hr_agenda,'hh24'))
INTO STRICT	ds_hor_max_p
FROM	ageint_horarios_usuario
WHERE	nm_usuario		= nm_usuario_p
AND	TRUNC(hr_agenda)	= trunc(dt_agenda_p);

SELECT	MIN(TO_CHAR(hr_agenda,'hh24'))
INTO STRICT	ds_hor_min_livre_p
FROM	ageint_horarios_usuario
WHERE	nm_usuario		= nm_usuario_p
AND	TRUNC(hr_agenda)	= trunc(dt_agenda_p)
AND	ie_status_agenda	IN ('L','B');

SELECT	MAX(TO_CHAR(hr_agenda,'hh24'))
INTO STRICT	ds_hor_max_livre_p
FROM	ageint_horarios_usuario
WHERE	nm_usuario		= nm_usuario_p
AND	TRUNC(hr_agenda)	= trunc(dt_agenda_p)
AND	ie_status_agenda	IN ('L','B');

COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_horarios_ageint_recor ( dt_agenda_p timestamp, nm_usuario_p text, nr_seq_ageint_p bigint, cd_estabelecimento_p bigint, cd_agenda_p bigint, ds_hor_min_p INOUT bigint, ds_hor_max_p INOUT bigint, ds_hor_min_livre_p INOUT bigint, ds_hor_max_livre_p INOUT bigint, nr_Seq_agenda_p bigint) FROM PUBLIC;

