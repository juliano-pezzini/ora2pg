-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_cd_guia_regra ( nr_seq_guia_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar guia requisicao lote..
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ x]    Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_tipo_guia_w			varchar(255);
ie_preco_w			varchar(255);
nr_seq_regra_w			bigint;
nr_seq_apresentacao_w		bigint;
ie_tipo_campo_w			varchar(255);
cd_fixo_w			varchar(255);
ds_mascara_w			varchar(255);
ds_campo_w			varchar(255) := null;
nr_digito_w			varchar(255);
ie_tipo_processo_w		varchar(2);
ie_estagio_compl_w		smallint;
ie_tipo_segurado_w		varchar(2);
ie_separador_w			varchar(10);
ie_tipo_intercambio_w		varchar(255);
ie_pagamento_automatico_w	varchar(3);
ie_regra_apres_aut_w		varchar(1) := 'N';
ie_origem_solic_w		varchar(1);
nr_seq_pgto_aut_w		bigint;
ie_origem_execucao_w		pls_guia_plano.ie_origem_execucao%type;

C01 CURSOR FOR
	SELECT	nr_seq_apresentacao,
		ie_tipo_campo,
		cd_fixo,
		ds_mascara
	from	pls_regra_guia_campo
	where	nr_seq_regra_guia	= nr_seq_regra_w
	order by nr_seq_apresentacao;


BEGIN

select	b.ie_tipo_guia,
	b.ie_tipo_processo,
	coalesce(b.ie_estagio_complemento,3),
	a.ie_preco,
	c.ie_tipo_segurado,
	b.ie_tipo_intercambio,
	b.ie_pagamento_automatico,
	b.ie_origem_solic,
	b.nr_seq_pgto_aut,
	b.ie_origem_execucao
into STRICT	ie_tipo_guia_w,
	ie_tipo_processo_w,
	ie_estagio_compl_w,
	ie_preco_w,
	ie_tipo_segurado_w,
	ie_tipo_intercambio_w,
	ie_pagamento_automatico_w,
	ie_origem_solic_w,
	nr_seq_pgto_aut_w,
	ie_origem_execucao_w
from	pls_segurado	c,
	pls_guia_plano	b,
	pls_plano	a
where	a.nr_sequencia	= b.nr_seq_plano
and	c.nr_sequencia	= b.nr_seq_segurado
and	b.nr_sequencia	= nr_seq_guia_p;

-- De acordo com o Diogo, deve ser verificado se a guia se encaixou em uma regra de apresentacao automatica

-- pelo campo NR_SEQ_PGTO_AUT e nao pelo campo IE_PAGAMENTO_AUTOMATICO
if (nr_seq_pgto_aut_w IS NOT NULL AND nr_seq_pgto_aut_w::text <> '') then
	ie_regra_apres_aut_w := 'S';
end if;

if (pls_obter_se_controle_estab('RE') = 'S')then
	select	max(nr_sequencia)
	into STRICT	nr_seq_regra_w
	from	pls_regra_gerar_guia
	where	ie_situacao		= 'A'
	and (coalesce(ie_tipo_guia::text, '') = ''	or ie_tipo_guia		= ie_tipo_guia_w)
	and (coalesce(ie_preco::text, '') = ''	or ie_preco		= ie_preco_w)
	and (coalesce(ie_tipo_processo::text, '') = ''	or ie_tipo_processo	= ie_tipo_processo_w)
	and	(
		(coalesce(ie_tipo_complemento::text, '') = '')
	or	((ie_tipo_complemento	= 1) 	and (ie_estagio_compl_w	in (1,2)))
	or	(ie_tipo_complemento	= 2 AND ie_estagio_compl_w	= 3)
		)
	and (coalesce(ie_tipo_segurado::text, '') = ''	or ie_tipo_segurado	= ie_tipo_segurado_w)
	and	(
		(coalesce(ie_tipo_intercambio::text, '') = '')
	or (ie_tipo_intercambio	= 'N')
	or (ie_tipo_intercambio	= ie_tipo_intercambio_w)
		)
	and	(
		(coalesce(ie_regra_apres_aut::text, '') = '')
	or (ie_regra_apres_aut	= ie_regra_apres_aut_w)
		)
	and (coalesce(ie_origem_solic::text, '') = '' or ie_origem_solic 	= ie_origem_solic_w)
	and (coalesce(ie_origem_execucao::text, '') = '' or ie_origem_execucao	= ie_origem_execucao_w)
	and 	coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento;
else
	select	max(nr_sequencia)
	into STRICT	nr_seq_regra_w
	from	pls_regra_gerar_guia
	where	ie_situacao		= 'A'
	and (coalesce(ie_tipo_guia::text, '') = ''	or ie_tipo_guia		= ie_tipo_guia_w)
	and (coalesce(ie_preco::text, '') = ''	or ie_preco		= ie_preco_w)
	and (coalesce(ie_tipo_processo::text, '') = ''	or ie_tipo_processo	= ie_tipo_processo_w)
	and	(
		(coalesce(ie_tipo_complemento::text, '') = '')
	or	((ie_tipo_complemento	= 1) 	and (ie_estagio_compl_w	in (1,2)))
	or	(ie_tipo_complemento	= 2 AND ie_estagio_compl_w	= 3)
		)
	and (coalesce(ie_tipo_segurado::text, '') = ''	or ie_tipo_segurado	= ie_tipo_segurado_w)
	and	(
		(coalesce(ie_tipo_intercambio::text, '') = '')
	or (ie_tipo_intercambio	= 'N')
	or (ie_tipo_intercambio	= ie_tipo_intercambio_w)
		)
	and	(
		(coalesce(ie_regra_apres_aut::text, '') = '')
	or (ie_regra_apres_aut	= ie_regra_apres_aut_w)
		)
	and (coalesce(ie_origem_solic::text, '') = '' or ie_origem_solic 	= ie_origem_solic_w)
	and (coalesce(ie_origem_execucao::text, '') = '' or ie_origem_execucao	= ie_origem_execucao_w);
end if;

begin
	select	coalesce(substr(ie_separador,1,10),'.')
	into STRICT	ie_separador_w
	from	pls_regra_gerar_guia
	where	nr_sequencia	= nr_seq_regra_w;
exception
when others then
	ie_separador_w	:= '.';
end;

if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
	open C01;
	loop
	fetch C01 into	
		nr_seq_apresentacao_w,
		ie_tipo_campo_w,
		cd_fixo_w,
		ds_mascara_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		if (ie_tipo_campo_w	= 'SG') then
			if (length(ds_mascara_w)	< length(nr_seq_guia_p)) then
				if (coalesce(ds_campo_w::text, '') = '') then
					ds_campo_w	:= ds_campo_w||substr(nr_seq_guia_p,1,length(ds_mascara_w));
				else
					ds_campo_w	:= ds_campo_w||ie_separador_w||substr(nr_seq_guia_p,1,length(ds_mascara_w));
				end if;
			elsif (length(ds_mascara_w)	> length(nr_seq_guia_p))  then
				if (coalesce(ds_campo_w::text, '') = '') then
					ds_campo_w	:= ds_campo_w||adiciona_zeros_esquerda(nr_seq_guia_p,length(ds_mascara_w));
				else
					ds_campo_w	:= ds_campo_w||ie_separador_w||adiciona_zeros_esquerda(nr_seq_guia_p,length(ds_mascara_w));
				end if;
			else
				if (coalesce(ds_campo_w::text, '') = '') then
					ds_campo_w	:= ds_campo_w||nr_seq_guia_p;
				else
					ds_campo_w	:= ds_campo_w||ie_separador_w||nr_seq_guia_p;
				end if;
			end if;
		elsif (ie_tipo_campo_w	= 'VP') then
			if (length(ds_mascara_w)	< length(cd_fixo_w)) then
				if (coalesce(ds_campo_w::text, '') = '') then
					ds_campo_w	:= ds_campo_w||substr(cd_fixo_w,1,length(ds_mascara_w));
				else
					ds_campo_w	:= ds_campo_w||ie_separador_w||substr(cd_fixo_w,1,length(ds_mascara_w));
				end if;
			elsif (length(ds_mascara_w)	> length(cd_fixo_w))  then
				if (coalesce(ds_campo_w::text, '') = '') then
					ds_campo_w	:= ds_campo_w||adiciona_zeros_esquerda(cd_fixo_w,length(ds_mascara_w));
				else
					ds_campo_w	:= ds_campo_w||ie_separador_w||adiciona_zeros_esquerda(cd_fixo_w,length(ds_mascara_w));
				end if;
			else
				if (coalesce(ds_campo_w::text, '') = '') then
					ds_campo_w	:= ds_campo_w||cd_fixo_w;
				else
					ds_campo_w	:= ds_campo_w||ie_separador_w||cd_fixo_w;
				end if;
			end if;
		elsif (ie_tipo_campo_w	= 'DV') then
			if (cd_fixo_w IS NOT NULL AND cd_fixo_w::text <> '') then
				if (length(ds_mascara_w)	< length(cd_fixo_w)) then
					if (coalesce(ds_campo_w::text, '') = '') then
						ds_campo_w	:= ds_campo_w||substr(cd_fixo_w,1,length(ds_mascara_w));
					else
						ds_campo_w	:= ds_campo_w||ie_separador_w||substr(cd_fixo_w,1,length(ds_mascara_w));
					end if;
				elsif (length(ds_mascara_w)	> length(cd_fixo_w))  then
					if (coalesce(ds_campo_w::text, '') = '') then
						ds_campo_w	:= ds_campo_w||adiciona_zeros_esquerda(cd_fixo_w,length(ds_mascara_w));
					else
						ds_campo_w	:= ds_campo_w||ie_separador_w||adiciona_zeros_esquerda(cd_fixo_w,length(ds_mascara_w));
					end if;
				else
					if (coalesce(ds_campo_w::text, '') = '') then
						ds_campo_w	:= ds_campo_w||cd_fixo_w;
					else
						ds_campo_w	:= ds_campo_w||ie_separador_w||cd_fixo_w;
					end if;
				end if;
			else
				select	substr(calcula_digito('Modulo11',ds_campo_w),1,2)
				into STRICT	nr_digito_w
				;

				if (length(ds_mascara_w)	< length(nr_digito_w)) then
					if (coalesce(ds_campo_w::text, '') = '') then
						ds_campo_w	:= ds_campo_w||substr(nr_digito_w,1,length(ds_mascara_w));
					else
						ds_campo_w	:= ds_campo_w||ie_separador_w||substr(nr_digito_w,1,length(ds_mascara_w));
					end if;
				elsif (length(ds_mascara_w)	> length(nr_digito_w))  then
					if (coalesce(ds_campo_w::text, '') = '') then
						ds_campo_w	:= ds_campo_w||adiciona_zeros_esquerda(nr_digito_w,length(ds_mascara_w));
					else
						ds_campo_w	:= ds_campo_w||ie_separador_w||adiciona_zeros_esquerda(nr_digito_w,length(ds_mascara_w));
					end if;
				else
					if (coalesce(ds_campo_w::text, '') = '') then
						ds_campo_w	:= ds_campo_w||nr_digito_w;
					else
						ds_campo_w	:= ds_campo_w||ie_separador_w||nr_digito_w;
					end if;
				end if;
			end if;
		end if;	
		
		end;
	end loop;
	close C01;

	update	pls_guia_plano
	set	cd_guia			= ds_campo_w,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		cd_guia_prestador	= coalesce(cd_guia_prestador, ds_campo_w)
	where	nr_sequencia		= nr_seq_guia_p;

	--Atualizar o campo e guia referencia dos anexos de guia
	update	pls_lote_anexo_guias_aut
	set	cd_guia_referencia	= ds_campo_w,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where	nr_seq_guia		= nr_seq_guia_p;
	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_cd_guia_regra ( nr_seq_guia_p bigint, nm_usuario_p text) FROM PUBLIC;

