-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_interface_uniodonto ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_movimentacao_w		bigint;
dt_mes_referencia_w		timestamp;
cd_ans_w			varchar(20);
cd_cgc_operadora_w		varchar(14);
nr_seq_empresa_w		bigint;
nr_seq_arquivo_w		bigint;
nr_seq_beneficiario_w		bigint;
nr_seq_segurado_w		bigint;

cd_pessoa_fisica_w		varchar(10);
nm_segurado_w			varchar(255);
dt_nascimento_w			timestamp;
ie_sexo_w			smallint;
nr_pis_pasep_w			varchar(11);
nm_mae_segurado_w		varchar(255);
cd_cns_w			varchar(15);
nr_identidade_w			varchar(15);
ds_orgao_emissor_ci_w		pessoa_fisica.ds_orgao_emissor_ci%type;
cd_nacionalidade_w		varchar(8);
nr_seq_titular_w		bigint;
ie_regulamentacao_w		varchar(2);
cd_plano_ans_w			varchar(20);
cd_plano_ans_pre_w		varchar(20);
dt_liberacao_w			timestamp;
ds_logradouro_w			varchar(50);
ds_numero_w			varchar(5);
ds_complemento_w		varchar(15);
ds_bairro_w			varchar(50);
ds_municipio_w			varchar(50);
uf_w				varchar(10);
cep_w				varchar(15);
dt_mesano_referencia_w		timestamp;
dt_reinclusao_w			timestamp;
nr_seq_portabilidade_w		bigint;
nr_cco_w			bigint;
ie_digito_cco_w			smallint;
cd_cco_w			pls_segurado.cd_cco%type;

cd_pais_sib_w			varchar(30);
cd_usuario_ant_w		varchar(30);
cd_usuario_plano_w		varchar(30);
cd_usuario_plano_tit_w		varchar(30);
cd_cgc_estipulante_w		varchar(14);
nr_cpf_w			varchar(11);
cd_vinculo_benef_w		varchar(2);
ie_carencia_temp_w		smallint;
ie_resid_brasil_w		smallint;

cd_motivo_w			smallint;
nr_prot_ans_origem_w		varchar(20);

dt_inclusao_w			timestamp;
dt_exclusao_w			timestamp;

qt_tipo1_w			bigint;
qt_tipo2_w			bigint;
qt_tipo6_w			bigint;
qt_tipo7_w			bigint;
qt_tipo8_w			bigint;
qt_trailer_w			bigint;
nr_seq_reg_arquivo_w		bigint;

C01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	ptu_movimentacao_produto 
	where	nr_seq_lote	= nr_seq_lote_p;

C02 CURSOR FOR 
	SELECT	nr_sequencia 
	from	ptu_mov_produto_empresa 
	where	nr_seq_mov_produto	= nr_seq_movimentacao_w;

C03 CURSOR FOR 
	SELECT	nr_sequencia, 
		nr_seq_segurado 
	from	ptu_mov_produto_benef 
	where	nr_seq_empresa	= nr_seq_empresa_w;


BEGIN 
 
select	cd_ans, 
	cd_cgc_outorgante 
into STRICT	cd_ans_w, 
	cd_cgc_operadora_w 
from	pls_outorgante 
where	cd_estabelecimento	= cd_estabelecimento_p;
 
select	dt_mesano_referencia 
into STRICT	dt_mes_referencia_w 
from	ptu_mov_produto_lote 
where	nr_sequencia	= nr_seq_lote_p;
 
open C01;
loop 
fetch C01 into 
	nr_seq_movimentacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
 
	select 	coalesce(max(nr_seq_arquivo),0) + 1 
	into STRICT	nr_seq_arquivo_w 
	from	w_ptu_movto_produto;
 
	nr_seq_reg_arquivo_w	:= 1;
 
	insert into w_ptu_movto_produto(	nr_sequencia,nr_seq_reg_arquivo,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec, 
			ie_tipo_reg,dt_geracao_arquivo,cd_ans,cd_cgc,ds_constante, 
			ds_modalidade,nr_seq_arquivo,nr_seq_lote_movto,nr_seq_movimentacao,dt_mesano_referencia) 
	values (	nextval('w_ptu_movto_produto_seq'),nr_seq_reg_arquivo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p, 
			0,clock_timestamp(),cd_ans_w,cd_cgc_operadora_w,'V01', 
			'O',nr_seq_arquivo_w,nr_seq_lote_p,nr_seq_movimentacao_w,dt_mes_referencia_w);
 
	open C02;
	loop 
	fetch C02 into 
		nr_seq_empresa_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
 
		open C03;
		loop 
		fetch C03 into 
			nr_seq_beneficiario_w, 
			nr_seq_segurado_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin 
 
			select	dt_inclusao, 
				dt_exclusao 
			into STRICT	dt_inclusao_w, 
				dt_exclusao_w 
			from	ptu_mov_produto_benef 
			where	nr_sequencia	= nr_seq_beneficiario_w;
 
			cd_motivo_w		:= 00;
			nr_prot_ans_origem_w	:= '000000000';
			cd_plano_ans_w		:= '';
			cd_plano_ans_pre_w	:= '';
 
			select	distinct 
				a.cd_pessoa_fisica, 
				substr(b.nm_pessoa_fisica,1,59) nm_beficiario, 
				b.dt_nascimento, 
				CASE WHEN b.ie_sexo='M' THEN 1  ELSE CASE WHEN b.ie_sexo='F' THEN 3  ELSE 0 END  END , 
				coalesce(b.nr_pis_pasep,'00000000000'), 
				substr(coalesce(obter_compl_pf(b.cd_pessoa_fisica,5,'NPR'),obter_compl_pf(b.cd_pessoa_fisica,5,'N')),1,59) nm_mae_benef, 
				coalesce(substr(b.nr_cartao_nac_sus,1,15),'000000000000000') cd_cns, 
				b.nr_identidade, 
				b.ds_orgao_emissor_ci, 
				b.cd_nacionalidade, 
		    	a.nr_seq_titular, 
				c.ie_regulamentacao, 
				CASE WHEN ie_regulamentacao='R' THEN '000000000'  ELSE coalesce(c.nr_protocolo_ans,'000000000') END , 
				CASE WHEN ie_regulamentacao='R' THEN c.cd_scpa  ELSE ' ' END , 
				a.dt_contratacao, 
				substr(obter_compl_pf(b.cd_pessoa_fisica,1,'ES'),1,30), 
				substr(obter_compl_pf(b.cd_pessoa_fisica,1,'NR'),1,5), 
				substr(obter_compl_pf(b.cd_pessoa_fisica,1,'CO'),1,15), 
				substr(obter_compl_pf(b.cd_pessoa_fisica,1,'B'),1,20), 
				substr(obter_compl_pf(b.cd_pessoa_fisica,1,'CDM'),1,10) || Calcula_Digito('MODULO10',substr(obter_compl_pf(b.cd_pessoa_fisica,1,'CDM'),1,10)), 
				substr(obter_compl_pf(b.cd_pessoa_fisica,1,'UF'),1,5), 
				coalesce(lpad(substr(obter_compl_pf(b.cd_pessoa_fisica,1,'CEP'),1,8),8,'0'),'00000000'), 
				a.dt_contratacao	dt_mesano_referencia, 
				a.dt_reativacao, 
				coalesce(a.nr_seq_portabilidade,0), 
				a.cd_cco 
			into STRICT	cd_pessoa_fisica_w, 
				nm_segurado_w, 
				dt_nascimento_w, 
				ie_sexo_w, 
				nr_pis_pasep_w, 
				nm_mae_segurado_w, 
				cd_cns_w, 
				nr_identidade_w, 
				ds_orgao_emissor_ci_w, 
				cd_nacionalidade_w, 
				nr_seq_titular_w, 
				ie_regulamentacao_w, 
				cd_plano_ans_w, 
				cd_plano_ans_pre_w, 
				dt_liberacao_w, 
				ds_logradouro_w, 
				ds_numero_w, 
				ds_complemento_w, 
				ds_bairro_w, 
				ds_municipio_w, 
				uf_w, 
				cep_w, 
				dt_mesano_referencia_w, 
				dt_reinclusao_w, 
				nr_seq_portabilidade_w, 
				cd_cco_w 
			from  	pls_segurado a, 
				pls_plano c, 
				pessoa_fisica b, 
				pls_contrato e 
			where 	a.cd_pessoa_fisica	= b.cd_pessoa_fisica 
			and	e.nr_sequencia		= a.nr_seq_contrato 
			and	c.nr_sequencia		= a.nr_seq_plano 
			and	a.nr_sequencia		= nr_seq_segurado_w;
			 
			if (cd_cco_w IS NOT NULL AND cd_cco_w::text <> '') then 
				nr_cco_w	:= (substr(cd_cco_w,1,10))::numeric;
				ie_digito_cco_w	:= (substr(cd_cco_w,10,2))::numeric;
			else 
				nr_cco_w	:= null;
				ie_digito_cco_w	:= null;
			end if;
			 
			SELECT * FROM pls_obter_dados_interf_sib(	nr_seq_segurado_w, cd_pais_sib_w, cd_usuario_ant_w, cd_usuario_plano_w, cd_usuario_plano_tit_w, cd_cgc_estipulante_w, nr_cpf_w, cd_vinculo_benef_w, ie_carencia_temp_w, ie_resid_brasil_w) INTO STRICT cd_pais_sib_w, cd_usuario_ant_w, cd_usuario_plano_w, cd_usuario_plano_tit_w, cd_cgc_estipulante_w, nr_cpf_w, cd_vinculo_benef_w, ie_carencia_temp_w, ie_resid_brasil_w;
 
			if (coalesce(nr_seq_portabilidade_w,0) > 0) then --Se for de portabilidade o motivo é o 41 
				cd_motivo_w	:= 41;
 
				select	coalesce(to_char(somente_numero(max(nr_prot_ans_origem))),'000000000') 
				into STRICT	nr_prot_ans_origem_w 
				from	pls_segurado a, 
					pls_portab_pessoa b 
				where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica 
				and	a.nr_sequencia	= nr_seq_segurado_w;
			else 
				select	coalesce(max(cd_ans),15) 
				into STRICT	cd_motivo_w 
				from 	pls_motivo_inclusao_seg a, 
					pls_segurado b 
				where	b.nr_seq_motivo_inclusao	= a.nr_sequencia 
				and	b.nr_sequencia			= nr_seq_segurado_w;
			end if;
 
			nr_seq_reg_arquivo_w	:= nr_seq_reg_arquivo_w + 1;
 
			--Gerar os beneficiários de inclusão 
			if (trunc(dt_inclusao_w,'Month')	= trunc(dt_mes_referencia_w,'Month')) and (coalesce(dt_exclusao_w::text, '') = '') then 
				insert into w_ptu_movto_produto(	nr_sequencia,nr_seq_reg_arquivo,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec, 
						ie_tipo_reg,cd_motivo,cd_usuario_plano,nm_beneficiario,dt_nascimento, 
						ie_sexo,nr_cpf,cd_usuario_plano_sup,nr_pis_pasep,nm_mae_benef, 
						cd_cns,nr_identidade,ds_orgao_emissor_ci,cd_pais,cd_plano_ans, 
						cd_plano_ans_pre,nr_prot_ans_origem,dt_adesao_plano,cd_vinculo_benef,ie_carencia_temp, 
						ie_itens_excluid_cobertura,cd_cgc_estipulante,cd_cei,ds_logradouro,ds_numero, 
						ds_complemento,ds_bairro,ds_municipio,ie_resid_brasil,cd_cep, 
						nr_seq_lote_movto,nr_seq_movimentacao,nr_seq_movto_benef,nr_seq_segurado,dt_mesano_referencia, 
						nm_beficiario	) 
				values (	nextval('w_ptu_movto_produto_seq'),nr_seq_reg_arquivo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p, 
						1,cd_motivo_w,cd_usuario_plano_w,nm_segurado_w,dt_nascimento_w, 
						ie_sexo_w,nr_cpf_w,cd_usuario_plano_tit_w,nr_pis_pasep_w,nm_mae_segurado_w, 
						cd_cns_w,nr_identidade_w,ds_orgao_emissor_ci_w,cd_pais_sib_w,cd_plano_ans_w, 
						cd_plano_ans_pre_w,nr_prot_ans_origem_w,dt_mesano_referencia_w,cd_vinculo_benef_w,ie_carencia_temp_w, 
						2,cd_cgc_estipulante_w,'00000000000000',ds_logradouro_w,ds_numero_w, 
						ds_complemento_w,ds_bairro_w,ds_municipio_w,ie_resid_brasil_w,cep_w, 
						nr_seq_lote_p,nr_seq_movimentacao_w,nr_seq_beneficiario_w,nr_seq_segurado_w,dt_mes_referencia_w, 
						nm_segurado_w	);
 
			--Gerar os beneficiários de exclusão 
			elsif (trunc(dt_exclusao_w,'Month')	= trunc(dt_mes_referencia_w,'Month')) then 
				insert into w_ptu_movto_produto(	nr_sequencia,nr_seq_reg_arquivo,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec, 
						ie_tipo_reg,cd_motivo,cd_usuario_plano,nm_beneficiario,dt_nascimento, 
						ie_sexo,nr_cpf,cd_usuario_plano_sup,nr_pis_pasep,nm_mae_benef, 
						cd_cns,nr_identidade,ds_orgao_emissor_ci,cd_pais,cd_plano_ans, 
						cd_plano_ans_pre,nr_prot_ans_origem,dt_adesao_plano,cd_vinculo_benef,ie_carencia_temp, 
						ie_itens_excluid_cobertura,cd_cgc_estipulante,cd_cei,ds_logradouro,ds_numero, 
						ds_complemento,ds_bairro,ds_municipio,ie_resid_brasil,cd_cep, 
						nr_seq_lote_movto,nr_seq_movimentacao,nr_seq_movto_benef,nr_seq_segurado,dt_mesano_referencia, 
						nm_beficiario,nr_cco,ie_digito_cco	) 
				values (	nextval('w_ptu_movto_produto_seq'),nr_seq_reg_arquivo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p, 
						7,cd_motivo_w,cd_usuario_plano_w,nm_segurado_w,dt_nascimento_w, 
						ie_sexo_w,nr_cpf_w,cd_usuario_plano_tit_w,nr_pis_pasep_w,nm_mae_segurado_w, 
						cd_cns_w,nr_identidade_w,ds_orgao_emissor_ci_w,cd_pais_sib_w,cd_plano_ans_w, 
						cd_plano_ans_pre_w,nr_prot_ans_origem_w,dt_mesano_referencia_w,cd_vinculo_benef_w,ie_carencia_temp_w, 
						2,cd_cgc_estipulante_w,'00000000000000',ds_logradouro_w,ds_numero_w, 
						ds_complemento_w,ds_bairro_w,ds_municipio_w,ie_resid_brasil_w,cep_w, 
						nr_seq_lote_p,nr_seq_movimentacao_w,nr_seq_beneficiario_w,nr_seq_segurado_w,dt_mes_referencia_w, 
						nm_segurado_w,nr_cco_w,ie_digito_cco_w);
 
			--Gerar os beneficiários de alteração 
			elsif (trunc(dt_inclusao_w,'Month')	<> trunc(dt_mes_referencia_w,'Month')) and (coalesce(dt_exclusao_w::text, '') = '')	then 
					insert into w_ptu_movto_produto(	nr_sequencia,nr_seq_reg_arquivo,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec, 
						ie_tipo_reg,cd_motivo,cd_usuario_plano,nm_beneficiario,dt_nascimento, 
						ie_sexo,nr_cpf,cd_usuario_plano_sup,nr_pis_pasep,nm_mae_benef, 
						cd_cns,nr_identidade,ds_orgao_emissor_ci,cd_pais,cd_plano_ans, 
						cd_plano_ans_pre,nr_prot_ans_origem,dt_adesao_plano,cd_vinculo_benef,ie_carencia_temp, 
						ie_itens_excluid_cobertura,cd_cgc_estipulante,cd_cei,ds_logradouro,ds_numero, 
						ds_complemento,ds_bairro,ds_municipio,ie_resid_brasil,cd_cep, 
						nr_seq_lote_movto,nr_seq_movimentacao,nr_seq_movto_benef,nr_seq_segurado,dt_mesano_referencia, 
						nm_beficiario,nr_cco,ie_digito_cco	) 
				values (	nextval('w_ptu_movto_produto_seq'),nr_seq_reg_arquivo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p, 
						2,cd_motivo_w,cd_usuario_plano_w,nm_segurado_w,dt_nascimento_w, 
						ie_sexo_w,nr_cpf_w,cd_usuario_plano_tit_w,nr_pis_pasep_w,nm_mae_segurado_w, 
						cd_cns_w,nr_identidade_w,ds_orgao_emissor_ci_w,cd_pais_sib_w,cd_plano_ans_w, 
						cd_plano_ans_pre_w,nr_prot_ans_origem_w,dt_mesano_referencia_w,cd_vinculo_benef_w,ie_carencia_temp_w, 
						2,cd_cgc_estipulante_w,'00000000000000',ds_logradouro_w,ds_numero_w, 
						ds_complemento_w,ds_bairro_w,ds_municipio_w,ie_resid_brasil_w,cep_w, 
						nr_seq_lote_p,nr_seq_movimentacao_w,nr_seq_beneficiario_w,nr_seq_segurado_w,dt_mes_referencia_w, 
						nm_segurado_w,nr_cco_w,ie_digito_cco_w	);
 
			end if;
 
			end;
		end loop;
		close C03;
		end;
	end loop;
	close C02;
 
	select	sum(qt_tipo_1), --Inclusão 
		sum(qt_tipo_2), --Alteração 
		sum(qt_tipo_6), --Indicação de inexistência de beneficiário ou de alteração cadastral 
		sum(qt_tipo_7), --Exclusão 
		sum(qt_tipo_8) --Reinclusão 
	into STRICT	qt_tipo1_w, 
		qt_tipo2_w, 
		qt_tipo6_w, 
		qt_tipo7_w, 
		qt_tipo8_w 
	from (SELECT	CASE WHEN ie_tipo_reg=1 THEN 1  ELSE 0 END  qt_tipo_1, 
			CASE WHEN ie_tipo_reg=2 THEN 1  ELSE 0 END  qt_tipo_2, 
			CASE WHEN ie_tipo_reg=6 THEN 1  ELSE 0 END  qt_tipo_6, 
			CASE WHEN ie_tipo_reg=7 THEN 1  ELSE 0 END  qt_tipo_7, 
			CASE WHEN ie_tipo_reg=8 THEN 1  ELSE 0 END  qt_tipo_8 
		from	w_ptu_movto_produto 
		where	nr_seq_lote_movto 	= nr_seq_lote_p 
		and	nr_seq_movimentacao	= nr_seq_movimentacao_w) alias5;
 
	select	max(nr_seq_reg_arquivo) 
	into STRICT	nr_seq_reg_arquivo_w 
	from	w_ptu_movto_produto 
	where	nr_seq_lote_movto 	= nr_seq_lote_p 
	and	nr_seq_movimentacao	= nr_seq_movimentacao_w;
 
	if (coalesce(nr_seq_reg_arquivo_w,0) = 0) then 
		nr_seq_reg_arquivo_w	:= 1;
	else 
		nr_seq_reg_arquivo_w	:= nr_seq_reg_arquivo_w +1;
	end if;
 
	select	count(*) 
	into STRICT	qt_trailer_w 
	from	w_ptu_movto_produto 
	where	nr_seq_lote_movto 	= nr_seq_lote_p 
	and	nr_seq_movimentacao	= nr_seq_movimentacao_w 
	and	ie_tipo_reg	= 9;
 
	--Gerar o trailler 
	if (qt_trailer_w	= 0) then 
		insert into w_ptu_movto_produto(nr_sequencia, 
			nr_seq_reg_arquivo, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			ie_tipo_reg, 
			qt_tipo1, 
			qt_tipo2, 
			qt_tipo6, 
			qt_tipo7, 
			qt_tipo8, 
			dt_mesano_referencia, 
			nr_seq_lote_movto, 
			nr_seq_movimentacao) 
		values (nextval('w_ptu_movto_produto_seq'), 
			nr_seq_reg_arquivo_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			9, 
			qt_tipo1_w, 
			qt_tipo2_w, 
			qt_tipo6_w, 
			qt_tipo7_w, 
			qt_tipo8_w, 
			dt_mes_referencia_w, 
			nr_seq_lote_p, 
			nr_seq_movimentacao_w);
	end if;
 
	end;
end loop;
close C01;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_interface_uniodonto ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

