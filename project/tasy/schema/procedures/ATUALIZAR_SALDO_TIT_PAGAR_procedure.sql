-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_saldo_tit_pagar ( nr_titulo_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_baixa_w		timestamp;
vl_baixa_w		double precision := 0;
vl_juros_w		double precision;
vl_multa_w		double precision;
vl_saldo_titulo_w		double precision;
vl_saldo_juros_w		double precision;
vl_saldo_multa_w		double precision;
ds_erro_w			varchar(254);
ie_desdobrado_w		varchar(1);
vl_saldo_anterior_w		double precision;
vl_saldo_adiantamento_w	double precision;
nr_adiantamento_w		bigint;
cont_w				bigint;
ie_transf_w			varchar(1);
ie_origem_titulo_w		varchar(10);
vl_outras_despesas_w	double precision;
vl_outros_acrescimos_w	double precision;
vl_titulo_w			double precision;
qt_tamanho_obs_w	double precision:= 0;
qt_registro_w		bigint;
dt_liquidacao_w		timestamp;
nr_ordem_compra_w	ordem_compra.nr_ordem_compra%type;
ie_situacao_w		titulo_pagar.ie_situacao%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
nr_seq_baixa_oc_pagto_w	parametro_compras.nr_seq_baixa_oc_pagto%type;
ds_mensagem_w		varchar(255);
nr_seq_tributo_w	bigint;
nr_seq_cheque_w		bigint;
vl_imposto_w		titulo_pagar_imposto.vl_imposto%type;
nr_seq_imposto_w	titulo_pagar_imposto.nr_sequencia%type;
vl_baixa_trib_tit_w titulo_pagar_trib_baixa.vl_baixa%type;
nr_seq_baixa_trib_tit_w titulo_pagar_trib_baixa.nr_sequencia%type;
nr_seq_proj_rec_w	titulo_pagar.nr_seq_proj_rec%type;
nr_seq_contrato_w	titulo_pagar.nr_seq_contrato%type;

c01 CURSOR FOR
SELECT	a.nr_ordem_compra
from	ordem_compra a,
	ordem_compra_venc b
where	a.nr_ordem_compra = b.nr_ordem_compra
and	b.nr_titulo_pagar = nr_titulo_p
and	a.ie_somente_pagto = 'S'
and	coalesce(a.dt_baixa::text, '') = '';

c02 CURSOR FOR
SELECT	a.nr_sequencia,
	a.vl_imposto
from	titulo_pagar_imposto a
where	a.nr_titulo	= nr_titulo_p;


BEGIN

select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
into STRICT	ie_desdobrado_w
from	titulo_pagar_desdob
where	nr_titulo	= nr_titulo_p;

nr_seq_contrato_w := 0;

select	CASE WHEN coalesce(nr_titulo_transf::text, '') = '' THEN 'N'  ELSE 'S' END ,
	ie_origem_titulo,
	cd_estabelecimento,
	nr_seq_proj_rec,
	nr_seq_contrato
into STRICT	ie_transf_w,
	ie_origem_titulo_w,
	cd_estabelecimento_w,
	nr_seq_proj_rec_w,
	nr_seq_contrato_w
from	titulo_pagar
where	nr_titulo	= nr_titulo_p;

SELECT * FROM consistir_tit_pagar_baixa(nr_titulo_p, vl_baixa_w, vl_saldo_multa_w, vl_multa_w, vl_saldo_juros_w, vl_juros_w, vl_saldo_titulo_w, dt_baixa_w, vl_outras_despesas_w, vl_outros_acrescimos_w, ds_erro_w) INTO STRICT vl_baixa_w, vl_saldo_multa_w, vl_multa_w, vl_saldo_juros_w, vl_juros_w, vl_saldo_titulo_w, dt_baixa_w, vl_outras_despesas_w, vl_outros_acrescimos_w, ds_erro_w;

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(224494,'ds_erro_w='||ds_erro_w);
else
	/* Francisco - OS 64970 - 09/08/07 - Gravar o saldo anterior para nao gerar adiantamento mais de uma vez */

	select	vl_saldo_titulo
	into STRICT	vl_saldo_anterior_w
	from	titulo_pagar
	where	nr_titulo	= nr_titulo_p;
	
	update	titulo_pagar
	set	vl_saldo_titulo		= vl_saldo_titulo_w,
		VL_TITULO_ATUAL		= vl_saldo_titulo_w,
		vl_saldo_juros		= vl_saldo_juros_w,
		vl_saldo_multa		= vl_saldo_multa_w,
		dt_liquidacao		= CASE WHEN vl_saldo_titulo_w=0 THEN  dt_baixa_w  ELSE null END ,
		ie_situacao		    = CASE WHEN vl_saldo_titulo_w=0 THEN  CASE WHEN ie_situacao='C' THEN  'C'  ELSE CASE WHEN ie_desdobrado_w='S' THEN 'D'  ELSE CASE WHEN ie_transf_w='S' THEN 'T'  ELSE 'L' END  END  END   ELSE 'A' END ,
		nm_usuario 		= nm_usuario_p,
		dt_atualizacao		= clock_timestamp()
	where 	nr_titulo		= nr_titulo_p;

	CALL projeto_recurso_pck.consistir_tit_pagar_proj_rec(nr_seq_proj_rec_w, vl_saldo_titulo_w, nm_usuario_p, cd_estabelecimento_w, 'S');
		
	select	vl_titulo
	into STRICT	vl_titulo_w
	from	titulo_pagar
	where	nr_titulo = nr_titulo_p;
	
	CALL gerenciamento_contrato_pck.consistir_tit_pagar_contrato(nr_seq_contrato_w, nr_titulo_p, vl_titulo_w, nm_usuario_p, 'S');	
		
	select 	count(*)
	into STRICT	qt_registro_w
	from	titulo_pagar_adiant
	where	nr_titulo = nr_titulo_p;
	
	
	if (qt_registro_w > 0 ) then
		select 	max(length(ds_observacao))
		into STRICT	qt_tamanho_obs_w
		from	titulo_pagar_adiant
		where	nr_titulo = nr_titulo_p;
	
		if qt_tamanho_obs_w <= 3700 then
			update	titulo_pagar_adiant
			set	ds_observacao =	substr(ds_observacao ||
						substr(wheb_mensagem_pck.get_texto(302879),1,255) || chr(13) || chr(10) ||
						substr(wheb_mensagem_pck.get_texto(302881),1,255) || '		= '|| vl_titulo_w || chr(13) || chr(10) ||
						substr(wheb_mensagem_pck.get_texto(302882),1,255) || '	= '|| vl_outras_despesas_w || chr(13) || chr(10) ||
						substr(wheb_mensagem_pck.get_texto(302884),1,255) || '	= '|| vl_outros_acrescimos_w,1,4000)
			where	nr_titulo = nr_titulo_p;
		end if;
	end if;
	
	if (vl_saldo_anterior_w <> 0) and (vl_saldo_titulo_w = 0)	then   /* Se foi liquidado */
		update	titulo_pagar_escrit
		set	dt_liquidacao	= dt_baixa_w,
			nm_usuario 	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp(),
			vl_liquidacao	= vl_escritural
		where 	nr_titulo	= nr_titulo_p;
		CALL GERAR_ADIANTAMENTO_PAGO(nr_titulo_p, nm_usuario_p);
	elsif (vl_saldo_anterior_w = 0) and (vl_saldo_titulo_w <> 0)	then   /* Se for estorno de baixa liquidado */
		
		select	count(*)
		into STRICT	cont_w
		from	adiantamento_pago a
		where	a.nr_titulo_original	= nr_titulo_p
		and	exists (SELECT	1
				 from	titulo_pagar_adiant x
				 where	x.nr_adiantamento		= a.nr_adiantamento);

		select	coalesce(max(vl_saldo),0),
			coalesce(max(nr_adiantamento),0)
		into STRICT	vl_saldo_adiantamento_w,
			nr_adiantamento_w
		from	adiantamento_pago
		where	nr_titulo_original	= nr_titulo_p;

		if (vl_saldo_adiantamento_w > 0) or (cont_w > 0) then
			--Este titulo possui adiantamento com saldo em aberto ou este titulo gerou um adiantamento que ja foi utilizado em  outro titulo. Nao e possivel estornar a baixa!

			--Adiantamento: nr_adiantamento
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(224493,'nr_adiantamento_w='||nr_adiantamento_w);
		end if;
	end if;

	CALL Ajustar_Venc_Titulo_Imposto(nr_titulo_p, nm_usuario_p);
	CALL ATUALIZAR_TIT_PAGAR_CLASSIF(nr_titulo_p, 'N', nm_usuario_p);
	/*incluido o 20 Pagamento de producao medica 26/11/2012 dgkorz*/

	if (ie_origem_titulo_w in ('5','6','20','16','25')) then
		CALL pls_protocolo_atualizar_status(nr_titulo_p,nm_usuario_p);
		
		if (ie_origem_titulo_w in ('20','25')) then
			CALL pls_rec_protocolo_atual_status(nr_titulo_p,nm_usuario_p);
		end if;
	end if;
	
	select	max(a.dt_liquidacao)
	into STRICT	dt_liquidacao_w
	from	titulo_pagar a
	where	a.nr_titulo = nr_titulo_p;
	/* OS 1389389 - Nao deve gravar as contas do cadastro de PF e PJ aqui ao liquidar o titulo. Foram criados campos na TITULO_PAGAR_BAIXA para gravar esses dados.
	if	(dt_liquidacao_w is not null) then
		GERAR_TITULO_PAGAR_FAV(nr_titulo_p,nm_usuario_p);
	end if;*/
	
	select	ie_situacao
	into STRICT	ie_situacao_w
	from	titulo_pagar
	where	nr_titulo = nr_titulo_p;
	
	select	coalesce(max(nr_seq_baixa_oc_pagto),0)
	into STRICT	nr_seq_baixa_oc_pagto_w
	from	parametro_compras
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	
	if (ie_situacao_w = 'L') and (nr_seq_baixa_oc_pagto_w > 0) then
		
		open C01;
		loop
		fetch C01 into	
			nr_ordem_compra_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			ds_mensagem_w	:= wheb_mensagem_pck.get_Texto(338716, 'NR_TITULO_P='|| NR_TITULO_P); /*A baixa da ordem de compra foi efetuada no momento de liquidar o titulo NR_TITULO_P.*/
			CALL baixar_ordem_compra(nr_ordem_compra_w, nr_seq_baixa_oc_pagto_w, ds_mensagem_w, nm_usuario_p);			
			end;
		end loop;
		close C01;
	end if;
	
	/* Atualiza a data contabil do tributo na titulo_pagar_imposto quando o titulo e liquidado. Quando a baixa e por cheque sera feito na compensacao*/

	begin
		select	nr_seq_cheque_cp
		into STRICT	nr_seq_cheque_w
		from	titulo_pagar_baixa
		where	nr_titulo = nr_titulo_p
		and	nr_sequencia = (SELECT max(nr_sequencia)
					from titulo_pagar_baixa
					where nr_titulo = nr_titulo_p);
	exception when others then
		nr_seq_cheque_w := null;
	end;
	
	select	max(dt_liquidacao),
		max(nr_seq_tributo)
	into STRICT	dt_liquidacao_w,
		nr_seq_tributo_w
	from	titulo_pagar
	where	nr_titulo = nr_titulo_p;
	
	if (coalesce(nr_seq_cheque_w::text, '') = '') then
		if ((dt_liquidacao_w IS NOT NULL AND dt_liquidacao_w::text <> '') and coalesce(nr_seq_tributo_w,0) <> 0) then
			update	titulo_pagar_imposto
			set	dt_contabil = clock_timestamp()
			where	nr_titulo = nr_titulo_p;
		else
			update	titulo_pagar_imposto
			set	dt_contabil  = NULL
			where	nr_titulo = nr_titulo_p;
		end if;
	end if;
	
	CALL atualizar_saldo_tit_pagar_trib(nr_titulo_p, nm_usuario_p);
end if;

--commit; Edgar 01/10/2004
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_saldo_tit_pagar ( nr_titulo_p bigint, nm_usuario_p text) FROM PUBLIC;

