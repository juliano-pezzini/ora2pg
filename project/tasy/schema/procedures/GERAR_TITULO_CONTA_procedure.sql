-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_titulo_conta ( nr_interno_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_estabelecimento_w		bigint;
cd_convenio_parametro_w		integer;
cd_condicao_pagamento_w		bigint;
nr_atendimento_w			bigint;
tx_juros_w			double precision;
tx_multa_w			double precision;
vl_total_conta_w			double precision;
cd_tipo_taxa_juro_w		bigint;
cd_tipo_taxa_multa_w		bigint;
cd_pessoa_fisica_w		varchar(10);
cd_pessoa_pagador_w		varchar(10);
cd_pessoa_responsavel_w		varchar(10);
cd_pessoa_titulo_w			varchar(10);
cd_cgc_w			varchar(14) := null;
ds_mensagem_w			varchar(2000);
ie_acao_mensagem_w		varchar(1);
nr_seq_regra_w			bigint;
ie_tipo_pessoa_w		varchar(10);
cd_pessoa_nf_tit_w		varchar(30);
ie_tipo_convenio_w		smallint;
vl_conta_w 			double precision;
vl_titulo_w			titulo_receber.vl_titulo%type;
vl_adiant_w			conta_paciente_adiant.vl_adiantamento%type;

ds_erro_w			varchar(2000);


BEGIN

if (nr_interno_conta_p IS NOT NULL AND nr_interno_conta_p::text <> '') then

	select	max(a.cd_estabelecimento),
		max(a.cd_convenio_parametro),
		max(a.nr_atendimento),
		max(obter_valor_conta(nr_interno_conta, 0)),
		max(b.ie_tipo_convenio)
	into STRICT	cd_estabelecimento_w,
		cd_convenio_parametro_w,
		nr_atendimento_w,
		vl_total_conta_w,
		ie_tipo_convenio_w
	from	conta_paciente a,
		convenio b
	where	a.cd_convenio_parametro	= b.cd_convenio
	and	a.nr_interno_conta	= nr_interno_conta_p;

	if (ie_tipo_convenio_w = 1) then --Somente para contas particulares
		select	max(a.cd_condicao_pagamento)
		into STRICT	cd_condicao_pagamento_w
		from	convenio a
		where	a.cd_convenio	= cd_convenio_parametro_w;

		if (coalesce(cd_condicao_pagamento_w::text, '') = '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(281747);
		end if;

		select	max(cd_tipo_taxa_juro),
			max(cd_tipo_taxa_multa)
		into STRICT	cd_tipo_taxa_juro_w,
			cd_tipo_taxa_multa_w
		from	parametro_contas_receber
		where	cd_estabelecimento	= cd_estabelecimento_w;

		if (coalesce(cd_tipo_taxa_juro_w::text, '') = '') or (coalesce(cd_tipo_taxa_multa_w::text, '') = '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(281748);
		end if;

		select	max(a.cd_pessoa_fisica),
			max(b.cd_pessoa_fisica),
			max(a.cd_pessoa_responsavel),
			max(b.cd_cgc)
		into STRICT	cd_pessoa_fisica_w,
			cd_pessoa_pagador_w,
			cd_pessoa_responsavel_w,
			cd_cgc_w
		FROM atendimento_paciente a
LEFT OUTER JOIN atendimento_pagador b ON (a.nr_atendimento = b.nr_atendimento)
WHERE a.nr_atendimento	= nr_atendimento_w;

		if (cd_pessoa_pagador_w IS NOT NULL AND cd_pessoa_pagador_w::text <> '') then	-- Se possuir pagador, gera em nome do pagador
			cd_pessoa_titulo_w	:= cd_pessoa_pagador_w;
			cd_cgc_w		:= null;
		elsif ((obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A'))::numeric  < 18) then --Se menor de idade gera em nome do responsavel
			if (coalesce(cd_pessoa_responsavel_w::text, '') = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(281749);
			else
				cd_pessoa_titulo_w	:= cd_pessoa_responsavel_w;
				cd_cgc_w		:= null;
			end if;
		else
			cd_pessoa_titulo_w	:= cd_pessoa_fisica_w;
		end if;

		if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
			cd_pessoa_titulo_w	:= null;
		end if;

		--Obter regra definicao pessoa titulo/NF
		SELECT * FROM obter_regra_pessoa_tit_nf('T', nr_interno_conta_p, null, null, ie_tipo_pessoa_w, cd_pessoa_nf_tit_w ) INTO STRICT ie_tipo_pessoa_w, cd_pessoa_nf_tit_w;
		if (ie_tipo_pessoa_w = 'PF') then
			cd_pessoa_titulo_w	:= cd_pessoa_nf_tit_w;
			cd_cgc_w		:= null;
		elsif (ie_tipo_pessoa_w = 'PJ') then
			cd_pessoa_titulo_w	:= null;
			cd_cgc_w		:= cd_pessoa_nf_tit_w;
		end if;

		if (cd_pessoa_titulo_w IS NOT NULL AND cd_pessoa_titulo_w::text <> '') then

			SELECT * FROM validar_dados_pf(cd_estabelecimento_w, cd_convenio_parametro_w, cd_pessoa_titulo_w, '1', ds_mensagem_w, ie_acao_mensagem_w, nr_seq_regra_w) INTO STRICT ds_mensagem_w, ie_acao_mensagem_w, nr_seq_regra_w;

			if (ie_acao_mensagem_w = 'A') and (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(285199,'DS_MENSAGEM_W='||ds_mensagem_w||';NR_SEQ_REGRA_W='||nr_seq_regra_w);
			end if;
		end if;

		select	coalesce(max(OBTER_JUROS_MULTA_PF_PJ(cd_estabelecimento_w,cd_pessoa_titulo_w,cd_cgc_w,'M')),0),
			coalesce(max(OBTER_JUROS_MULTA_PF_PJ(cd_estabelecimento_w,cd_pessoa_titulo_w,cd_cgc_w,'J')),0)
		into STRICT	tx_multa_w,
			tx_juros_w
		;
		
		
		select coalesce(sum(vl_adiantamento),0)
		into STRICT vl_adiant_w
		from conta_paciente_adiant
		where nr_interno_conta = nr_interno_conta_p;

		select coalesce(sum(vl_titulo),0)
		into STRICT vl_titulo_w
		from titulo_receber
		where nr_interno_conta = nr_interno_conta_p;
		
		vl_conta_w := vl_total_conta_w - (vl_adiant_w + vl_titulo_w);

		begin
		CALL gerar_titulo(	cd_estabelecimento_w,
				cd_pessoa_titulo_w,
				cd_cgc_w,
				nr_atendimento_w,
				nr_interno_conta_p,
				0,
				cd_condicao_pagamento_w,
				clock_timestamp(),
				clock_timestamp(),
				vl_total_conta_w,
				vl_conta_w,
				tx_juros_w,
				cd_tipo_taxa_juro_w,
				tx_multa_w,
				cd_tipo_taxa_multa_w,
				0,
				null,
				null,
				null,
				null,
				nm_usuario_p,
				'N');
		exception
		when others then
			ds_erro_w	:= substr(sqlerrm,1,1000);
			CALL wheb_mensagem_pck.exibir_mensagem_abort(285203,'NR_INTERNO_CONTA_W=' ||nr_interno_conta_p||';DS_ERRO_W='||ds_erro_w);
		end;

		commit;
	end if;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_titulo_conta ( nr_interno_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

