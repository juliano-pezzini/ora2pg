-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_baixa_irreg_unit ( cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_unitarizacao_p bigint, cd_local_irregularidade_p bigint, nr_seq_item_unit_p bigint default null, nr_seq_lote_fornec_p bigint default null, nm_computador_p text default '') AS $body$
DECLARE


ie_tipo_motivo_w		varchar(2);
cd_local_estoque_w		smallint;
cd_setor_atendimento_w		integer;
cd_centro_custo_w		integer;
nr_sequencia_w			bigint;
nr_solic_unitarizacao_w		bigint;
nr_seq_lote_fornec_w		bigint;
qt_movimento_w			bigint;
nr_seq_motivo_perda_w		bigint;
qt_material_w			double precision;
qt_material_ww			double precision;
cd_material_w			integer;
cd_operacao_perda_w		smallint;
cd_operacao_saida_irreg_w	smallint;
cd_operacao_entrada_irreg_w	smallint;
cd_conta_contabil_w		varchar(20);
ds_lote_fornec_w		varchar(20);
cd_unidade_medida_w		varchar(30);
cd_unidade_medida_estoque_w	varchar(30);
nm_computador_w			varchar(80);
dt_validade_w			timestamp;

c01 CURSOR FOR
	SELECT	b.nr_sequencia,
		a.nr_solic_unitarizacao,
		b.qt_material,
		b.nr_seq_motivo_perda
	from	unitarizacao a,
		item_unitarizacao b
	where	a.nr_sequencia = nr_seq_unitarizacao_p
	and	b.nr_seq_unitarizacao = a.nr_sequencia
	and (nr_seq_motivo_perda IS NOT NULL AND nr_seq_motivo_perda::text <> '')
	and	coalesce(nr_seq_item_unit_p,b.nr_sequencia) = b.nr_sequencia;


BEGIN

select	max(b.cd_local_estoque_destino),
	max(c.cd_material)
into STRICT	cd_local_estoque_w,
	cd_material_w
from	unitarizacao a,
	solic_unitarizacao b,
	material_lote_fornec c
where	a.nr_sequencia = nr_seq_unitarizacao_p
and	a.nr_solic_unitarizacao = b.nr_sequencia
and	b.nr_seq_lote_fornec = c.nr_sequencia;

if (coalesce(nm_computador_p,'NULL') = 'NULL') then
	begin
	nm_computador_w	:= upper(substr(wheb_usuario_pck.get_nm_estacao,1,80));

	if (nm_computador_w = 'CONSOLE') then
		nm_computador_w := upper(substr(wheb_usuario_pck.get_nm_maquina,1,80));
	end if;

	if (coalesce(nm_computador_w::text, '') = '') then
		nm_computador_w := upper(substr(wheb_usuario_pck.get_machine,1,80));
	end if;
	end;
else
	nm_computador_w	:= nm_computador_p;
end if;

begin
select	cd_setor_atendimento
into STRICT	cd_setor_atendimento_w
from	COMPUTADOR
where	nm_computador_pesquisa = padronizar_nome(upper(nm_computador_w));
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(184568,'NM_COMPUTADOR='||nm_computador_w);
	/*r.aise_application_error(-20011,'Computador [' || nm_computador_w || '] não cadastrado corretamente!' );*/

end;

select	max(cd_centro_custo)
into STRICT	cd_centro_custo_w
from	setor_atendimento
where	cd_setor_atendimento = cd_setor_atendimento_w;

select	cd_unidade_medida_estoque
into STRICT	cd_unidade_medida_estoque_w
from	material
where	cd_material = cd_material_w;

begin
select	cd_oper_perda_cons
into STRICT	cd_operacao_perda_w
from	parametro_estoque
where	cd_estabelecimento = cd_estabelecimento_p;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(184571);
	/*R.aise_application_error(-20011,'Parâmetros de estoque não cadastrados corretamente!');*/

end;

cd_operacao_saida_irreg_w	:= sup_obter_operacao_unit('STD');
cd_operacao_entrada_irreg_w	:= sup_obter_operacao_unit('ETD');

SELECT * FROM define_conta_material(
	cd_estabelecimento_p, cd_material_w, '2', null, cd_setor_atendimento_w, null, null, null, null, null, cd_local_estoque_w, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

open C01;
loop
fetch C01 into
	nr_sequencia_w,
	nr_solic_unitarizacao_w,
	qt_material_ww,
	nr_seq_motivo_perda_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	coalesce(ie_tipo_motivo, 'P')
	into STRICT	ie_tipo_motivo_w
	from	motivo_perda_unitarizacao
	where	nr_sequencia = nr_seq_motivo_perda_w;

	select	max(nr_sequencia),
		max(ds_lote_fornec),
		max(dt_validade)
	into STRICT	nr_seq_lote_fornec_w,
		ds_lote_fornec_w,
		dt_validade_w
	from	material_lote_fornec
	where	nr_seq_item_unitarizacao = nr_sequencia_w;

	nr_seq_lote_fornec_w := coalesce(nr_seq_lote_fornec_p,nr_seq_lote_fornec_w);

	select	max(cd_unidade_medida)
	into STRICT	cd_unidade_medida_w
	from	solic_unitarizacao
	where	nr_sequencia = nr_solic_unitarizacao_w;

	select	count(*)
	into STRICT	qt_movimento_w
	from	movimento_estoque
	where	nr_documento = nr_solic_unitarizacao_w
	and	ie_origem_documento = '18'
	and	cd_material = cd_material_w
	and	cd_operacao_estoque in (cd_operacao_perda_w,cd_operacao_saida_irreg_w)
	and	nr_seq_lote_fornec = nr_seq_lote_fornec_w
	and	nr_sequencia_item_docto = nr_sequencia_w;

	if (nr_seq_lote_fornec_w IS NOT NULL AND nr_seq_lote_fornec_w::text <> '') and
		((qt_movimento_w = 0) or (nr_seq_item_unit_p IS NOT NULL AND nr_seq_item_unit_p::text <> '')) then
		begin

		qt_material_w := obter_quantidade_convertida(cd_material_w, qt_material_ww, cd_unidade_medida_w, 'UME');

		if (ie_tipo_motivo_w = 'P') then
			begin
			insert into movimento_estoque(
				nr_movimento_estoque,
				cd_estabelecimento,
				cd_local_estoque,
				dt_movimento_estoque,
				cd_operacao_estoque,
				cd_acao,
				cd_material,
				dt_mesano_referencia,
				qt_movimento,
				dt_atualizacao,
				nm_usuario,
				ie_origem_documento,
				nr_documento,
				nr_sequencia_item_docto,
				cd_unidade_medida_estoque,
				cd_setor_atendimento,
				qt_estoque,
				cd_centro_custo,
				cd_unidade_med_mov,
				cd_fornecedor,
				nr_seq_tab_orig,
				nr_seq_lote_fornec,
				cd_lote_fabricacao,
				dt_validade,
				cd_conta_contabil)
			values (	nextval('movimento_estoque_seq'),
				cd_estabelecimento_p,
				cd_local_estoque_w,
				clock_timestamp(),
				cd_operacao_perda_w,
				'1',
				cd_material_w,
				clock_timestamp(),
				qt_material_ww,
				clock_timestamp(),
				nm_usuario_p,
				'18',
				nr_solic_unitarizacao_w,
				nr_sequencia_w,
				cd_unidade_medida_estoque_w,
				cd_setor_atendimento_w,
				qt_material_w,
				cd_centro_custo_w,
				cd_unidade_medida_w,
				null,
				nr_seq_unitarizacao_p,
				nr_seq_lote_fornec_w,
				ds_lote_fornec_w,
				dt_validade_w,
				cd_conta_contabil_w);
			end;
		elsif (ie_tipo_motivo_w = 'I') then
			begin

			insert into movimento_estoque(
				nr_movimento_estoque,
				cd_estabelecimento,
				cd_local_estoque,
				dt_movimento_estoque,
				cd_operacao_estoque,
				cd_acao,
				cd_material,
				dt_mesano_referencia,
				qt_movimento,
				dt_atualizacao,
				nm_usuario,
				ie_origem_documento,
				nr_documento,
				nr_sequencia_item_docto,
				cd_unidade_medida_estoque,
				cd_setor_atendimento,
				qt_estoque,
				cd_centro_custo,
				cd_unidade_med_mov,
				cd_fornecedor,
				nr_seq_tab_orig,
				nr_seq_lote_fornec,
				cd_lote_fabricacao,
				dt_validade,
				cd_conta_contabil)
			values (	nextval('movimento_estoque_seq'),
				cd_estabelecimento_p,
				cd_local_estoque_w,
				clock_timestamp(),
				cd_operacao_saida_irreg_w,
				'1',
				cd_material_w,
				clock_timestamp(),
				qt_material_ww,
				clock_timestamp(),
				nm_usuario_p,
				'18',
				nr_solic_unitarizacao_w,
				nr_sequencia_w,
				cd_unidade_medida_estoque_w,
				cd_setor_atendimento_w,
				qt_material_w,
				cd_centro_custo_w,
				cd_unidade_medida_w,
				null,
				nr_seq_unitarizacao_p,
				nr_seq_lote_fornec_w,
				ds_lote_fornec_w,
				dt_validade_w,
				cd_conta_contabil_w);

			insert into movimento_estoque(
				nr_movimento_estoque,
				cd_estabelecimento,
				cd_local_estoque,
				dt_movimento_estoque,
				cd_operacao_estoque,
				cd_acao,
				cd_material,
				dt_mesano_referencia,
				qt_movimento,
				dt_atualizacao,
				nm_usuario,
				ie_origem_documento,
				nr_documento,
				nr_sequencia_item_docto,
				cd_unidade_medida_estoque,
				cd_setor_atendimento,
				qt_estoque,
				cd_centro_custo,
				cd_unidade_med_mov,
				cd_fornecedor,
				nr_seq_tab_orig,
				nr_seq_lote_fornec,
				cd_lote_fabricacao,
				dt_validade,
				cd_conta_contabil)
			values (	nextval('movimento_estoque_seq'),
				cd_estabelecimento_p,
				cd_local_irregularidade_p,
				clock_timestamp(),
				cd_operacao_entrada_irreg_w,
				'1',
				cd_material_w,
				clock_timestamp(),
				qt_material_ww,
				clock_timestamp(),
				nm_usuario_p,
				'18',
				nr_solic_unitarizacao_w,
				nr_sequencia_w,
				cd_unidade_medida_estoque_w,
				cd_setor_atendimento_w,
				qt_material_w,
				cd_centro_custo_w,
				cd_unidade_medida_w,
				null,
				nr_seq_unitarizacao_p,
				nr_seq_lote_fornec_w,
				ds_lote_fornec_w,
				dt_validade_w,
				cd_conta_contabil_w);

			end;
		end if;
		end;
	end if;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_baixa_irreg_unit ( cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_unitarizacao_p bigint, cd_local_irregularidade_p bigint, nr_seq_item_unit_p bigint default null, nr_seq_lote_fornec_p bigint default null, nm_computador_p text default '') FROM PUBLIC;

