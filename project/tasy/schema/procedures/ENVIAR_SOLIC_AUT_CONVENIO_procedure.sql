-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE enviar_solic_aut_convenio (nr_sequencia_p autorizacao_convenio.nr_sequencia%type, ie_enviado_p INOUT integration_call_log.ie_status%type) AS $body$
DECLARE


json_data_w philips_json;
json_procedimentos_w philips_json;
json_procedimentos_list_w philips_json_list;
json_materiais_w philips_json;
json_materiais_list_w philips_json_list;
data_w text;
nr_sequencia_w autorizacao_convenio.nr_sequencia%type := nr_sequencia_p;
nm_usuario_w autorizacao_convenio.nm_usuario%type := wheb_usuario_pck.get_nm_usuario;
valor_dominio_rfc_w constant autorizacao_convenio.ie_resp_autor%TYPE := 'RFC';
valor_dominio_rg_w constant autorizacao_convenio.ie_resp_autor%TYPE := 'RG';
valor_dominio_uf_w constant autorizacao_convenio.ie_resp_autor%TYPE := 'UF';
valor_funcao_d_w constant autorizacao_convenio.ie_resp_autor%TYPE := 'D';
nr_sequencia_autor_w autorizacao_convenio.nr_sequencia%type;
nr_atendimento_w autorizacao_convenio.nr_atendimento%type;
cd_categoria_w atend_categoria_convenio.cd_categoria%type;
cd_plano_convenio_w atend_categoria_convenio.cd_plano_convenio%type;
cd_procedimento_conv procedimento_autorizado.CD_PROCEDIMENTO_CONVENIO%type;
nm_event_w constant integration_call_log.nm_interface%type := 'api.send.insurance.authorization';
nr_seq_int_call_log_w integration_message_log.nr_seq_int_call_log%type := 0;
ds_notes_w integration_call_log.ds_notes%TYPE;
ds_notes_message_w integration_call_log.ds_notes%TYPE := 'Success in the process of sending the insurance authorization request.';
ds_notes_params_w integration_call_log.ds_notes%TYPE;
ie_status_w integration_call_log.ie_status%type := 'S';
ie_message_type_w integration_call_log.ie_message_type%type := 'R';
separador_linha_w constant integration_call_log.nm_message%type :=  CHR(13) || CHR(10);
ds_message_error_w integration_call_log.ds_notes%TYPE;
retorno_integracao_w text;
cd_convenio_w autorizacao_convenio.cd_convenio%type;
cd_item_convenio_w procedimento_autorizado.ds_proc_convenio%type;
ie_tipo_item_proc_w conversao_proc_convenio.ie_tipo_atendimento%type := 1;
ie_tipo_item_mat_w conversao_proc_convenio.ie_tipo_atendimento%type := 2;
ie_estrutura_completa_w conversao_proc_convenio.ie_situacao%type := 'S';
cd_especialidade_medico_w especialidade_medica.ds_espec_guia_medico%type;
ie_cod_desc_w conversao_proc_convenio.ie_situacao%type := 'C';
ie_tipo_atendimento_w conversao_proc_convenio.ie_tipo_atendimento%type;
dt_autorizacao_w autorizacao_convenio.dt_autorizacao%type;

c01 CURSOR FOR
    SELECT (SELECT max(b.cd_usuario_convenio) from atend_categoria_convenio b where b.nr_atendimento = a.nr_atendimento and cd_categoria = (select
            max(o.cd_categoria) from atend_categoria_convenio o,categoria_convenio p where o.cd_convenio = p.cd_convenio and o.nr_atendimento = 
            a.nr_atendimento and o.cd_convenio =  a.cd_convenio) and cd_convenio =  a.cd_convenio) cd_usuario_convenio,
           1 ie_tipo_documento,
           obter_dados_pf(a.cd_pessoa_fisica, valor_dominio_rfc_w) cd_rfc,
           obter_dados_pf(a.cd_pessoa_fisica, valor_dominio_rg_w) nr_identidade,
           a.nr_atendimento,
           obter_tipo_atendimento(a.nr_atendimento) ie_tipo_atendimento,
           (select max(c.cd_rfc) from pessoa_juridica c where c.cd_cgc = (select d.cd_cgc from estabelecimento d where d.cd_estabelecimento = 
            wheb_usuario_pck.get_cd_estabelecimento)) cd_rfc_pj,
           e.cd_medico_resp cd_medico_resp,
           obter_uf_crm_medico(e.cd_medico_resp) cd_unidade_federacao,
           (select max(nr_crm) from crm_estado where cd_pessoa_fisica = e.cd_medico_resp 
            and  cd_unidade_federacao = (select max(d.cd_unidade_federacao) from cep_localidade d, estabelecimento f where d.cd_localidade = 
            to_char(f.cd_localidade) and f.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento)) cd_crm_prov_efec,
           (select max(nr_crm) from medico where cd_pessoa_fisica = e.cd_medico_resp) cd_crm_nac_efec,
           obter_cargo_pf(e.cd_medico_resp, valor_funcao_d_w) cd_cargo,
           (select max(nr_seq_person_name) from	pessoa_fisica w where w.cd_pessoa_fisica = e.cd_medico_resp) nr_seq_person_name,
           a.cd_medico_solicitante,
           (select max(nr_crm) from medico where cd_pessoa_fisica = a.cd_medico_solicitante) cd_crm_nac_sol,
           (select max(nr_crm) from crm_estado where cd_pessoa_fisica = a.cd_medico_solicitante 
            and cd_unidade_federacao = (select max(d.cd_unidade_federacao) from cep_localidade d, estabelecimento f where  d.cd_localidade = 
            to_char(f.cd_localidade) and f.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento)) cd_crm_prov_sol,
           obter_uf_crm_medico(a.cd_medico_solicitante) cd_unid_fed_solicitante,
           (select max(nr_seq_person_name) from	pessoa_fisica w where w.cd_pessoa_fisica = a.cd_medico_solicitante) nr_seq_person_name_sol,
           obter_cargo_pf(a.cd_medico_solicitante, valor_funcao_d_w) cd_cargo_solicitante,
           a.cd_convenio, 
           (select max(o.cd_categoria) from atend_categoria_convenio o, categoria_convenio p where o.cd_convenio = p.cd_convenio and o.nr_atendimento =
            a.nr_atendimento and o.cd_convenio = a.cd_convenio) cd_categoria,
           (select max(g.nr_seq_categoria_iva) from atend_categoria_convenio g where g.nr_atendimento = a.nr_atendimento and g.cd_convenio = a.cd_convenio) 
            nr_seq_categoria_iva,
           obter_dados_pf_pj(null,(select d.cd_cgc from estabelecimento d where d.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento), 
            valor_dominio_uf_w) regiao,
           null medio_pago,
           a.cd_senha_provisoria, 
           a.cd_validacao_tiss,
           (select max(n.cd_doenca) from autor_diag_medico m, autor_diag_doenca n where m.nr_sequencia_autor = a.nr_sequencia and m.nr_sequencia = 
            n.nr_seq_autor_diag) cd_doenca,
           a.dt_atualizacao,
           a.dt_envio,
           a.dt_entrada_prevista,
           a.nr_sequencia,
           a.ds_token,
           a.dt_autorizacao
    from autorizacao_convenio a, atendimento_paciente e
    where a.nr_atendimento = e.nr_atendimento
    and a.nr_sequencia = nr_sequencia_w;

c02 CURSOR FOR
    SELECT a.nr_sequencia,
           a.nr_seq_proc_interno,
           a.qt_solicitada,
           coalesce(a.qt_bonus,0) qt_bonus,
           a.nr_sequencia_autor,
           a.cd_procedimento,
           a.ie_origem_proced,
           substr(obter_especialidade_medico(a.cd_medico_resp, 'CD'), 1, 255) cd_especialidade_medico,
           a.nr_seq_exame
    from procedimento_autorizado a
    where nr_sequencia_autor = nr_sequencia_w
    and nr_atendimento = nr_atendimento_w;

c03 CURSOR FOR
    SELECT  a.nr_sequencia,
            obter_material_global(a.cd_material, clock_timestamp(), b.cd_estabelecimento, b.cd_setor_resp, b.cd_convenio, cd_categoria_w, cd_plano_convenio_w) cd_material_glo,
            a.qt_solicitada,
            coalesce(a.qt_bonus,0) qt_bonus,
            a.cd_material
    from material_autorizado a, autorizacao_convenio b
    where a.nr_sequencia_autor = b.nr_sequencia
    and a.nr_sequencia_autor = nr_sequencia_autor_w;
BEGIN

    ds_notes_params_w := substr(' nr_sequencia: '||nr_sequencia_w||' nm_usuario: '||nm_usuario_w,1,499);

    ds_notes_w := substr(ds_notes_message_w || separador_linha_w || ds_notes_params_w,1,499);

    json_data_w := philips_json();

    nr_sequencia_autor_w := nr_sequencia_w;

    <<LOOP_PRINCIPAL>>
    FOR infoAut in c01 LOOP

        nr_atendimento_w := infoAut.nr_atendimento;
        cd_convenio_w := infoAut.cd_convenio;
        cd_categoria_w := infoAut.cd_categoria;
        ie_tipo_atendimento_w := infoAut.ie_tipo_atendimento;
        dt_autorizacao_w := infoAut.dt_autorizacao;

        <<REC_PLANO>>
        BEGIN
            select coalesce(max(c.cd_plano_convenio),0) cd_plano
            into STRICT cd_plano_convenio_w
            from atend_categoria_convenio c
            where c.nr_atendimento = nr_atendimento_w
            and c.dt_inicio_vigencia = (SELECT max(b.dt_inicio_vigencia)
                                        from Atend_categoria_convenio b
                                        where nr_atendimento = nr_atendimento_w);

        EXCEPTION
            WHEN no_data_found THEN
                cd_plano_convenio_w := null;
        END;

        json_data_w.put(pair_name => 'affiliateNumber', pair_value => infoAut.cd_usuario_convenio);
        json_data_w.put(pair_name => 'documentType', pair_value => infoAut.ie_tipo_documento);
        json_data_w.put(pair_name => 'documentNumber', pair_value => infoAut.nr_identidade);
        json_data_w.put(pair_name => 'attentionNumber', pair_value => infoAut.nr_atendimento);
        json_data_w.put(pair_name => 'scopeService', pair_value => ie_tipo_atendimento_w);
        json_data_w.put(pair_name => 'providerCuit', pair_value => infoAut.cd_rfc_pj);
        json_data_w.put(pair_name => 'professionalEffectorCuit', pair_value => infoAut.cd_medico_resp);
        json_data_w.put(pair_name => 'executorProvince', pair_value => infoAut.cd_unidade_federacao);
        json_data_w.put(pair_name => 'provincialExecutorRegistration', pair_value => infoAut.cd_crm_prov_efec);
        json_data_w.put(pair_name => 'nationalExecutorRegistration', pair_value => infoAut.cd_crm_nac_efec);
        json_data_w.put(pair_name => 'executorSpecialty', pair_value => infoAut.cd_cargo);
        json_data_w.put(pair_name => 'executorName', pair_value => infoAut.nr_seq_person_name);
        json_data_w.put(pair_name => 'cuitProfessionalRequester', pair_value => infoAut.cd_medico_solicitante);
        json_data_w.put(pair_name => 'nationalRequesterRegistration', pair_value => infoAut.cd_crm_nac_sol);
        json_data_w.put(pair_name => 'provincialRequesterRegistration', pair_value => infoAut.cd_crm_prov_sol);
        json_data_w.put(pair_name => 'requesterProvince', pair_value => infoAut.cd_unid_fed_solicitante);
        json_data_w.put(pair_name => 'requesterName', pair_value => infoAut.nr_seq_person_name_sol);
        json_data_w.put(pair_name => 'requesterProfession', pair_value => infoAut.cd_cargo_solicitante);
        json_data_w.put(pair_name => 'socialWork', pair_value => infoAut.cd_convenio);
        json_data_w.put(pair_name => 'insurance', pair_value => infoAut.cd_categoria);
        json_data_w.put(pair_name => 'category', pair_value => infoAut.nr_seq_categoria_iva);
        json_data_w.put(pair_name => 'region', pair_value => infoAut.regiao);
        json_data_w.put(pair_name => 'preAuthorization', pair_value => infoAut.cd_senha_provisoria);
        json_data_w.put(pair_name => 'securityCode', pair_value => infoAut.cd_validacao_tiss);
        json_data_w.put(pair_name => 'diagnostic', pair_value => infoAut.cd_doenca);
        json_data_w.put(pair_name => 'dateTimeSystem', pair_value => infoAut.dt_atualizacao);
        json_data_w.put(pair_name => 'sendDate', pair_value => infoAut.dt_envio);
        json_data_w.put(pair_name => 'serviceDate', pair_value => infoAut.dt_entrada_prevista);
        json_data_w.put(pair_name => 'transactionId', pair_value => infoAut.nr_sequencia);
        json_data_w.put(pair_name => 'token', pair_value => infoAut.ds_token);

        <<LISTA_PROCEDIMENTOS>>
        BEGIN
            json_procedimentos_w := philips_json();
            json_procedimentos_list_w := philips_json_list();

            <<LOOP_PROCEDIMENTOS>>
            FOR proced in c02 LOOP

                cd_item_convenio_w := obter_dados_item_conv_orono(cd_convenio_p => cd_convenio_w,
                                                                  cd_categoria_p => cd_categoria_w,
                                                                  cd_plano_p => cd_plano_convenio_w,
                                                                  ie_tipo_item_p => ie_tipo_item_proc_w,
                                                                  cd_item_p => proced.cd_procedimento,
                                                                  ie_origem_proced_p => proced.ie_origem_proced,
                                                                  ie_estrutura_completa_p => ie_estrutura_completa_w,
                                                                  cd_especialidade_med_p => proced.cd_especialidade_medico,
                                                                  ie_tipo_atendimento_p => ie_tipo_atendimento_w,
                                                                  nr_atendimento_p => nr_atendimento_w,
                                                                  nr_seq_proc_interno_p => proced.nr_seq_proc_interno,
                                                                  nr_seq_exame_p => proced.nr_seq_exame,
                                                                  ie_cod_desc_p => ie_cod_desc_w,
                                                                  dt_autorizacao_p => dt_autorizacao_w);

                json_procedimentos_w.put(pair_name => 'numberSeqInternalProc', pair_value => proced.nr_seq_proc_interno);
                json_procedimentos_w.put(pair_name => 'procedureId', pair_value => proced.cd_procedimento);
                json_procedimentos_w.put(pair_name => 'insuranceProcedureCode', pair_value => cd_item_convenio_w);
                json_procedimentos_w.put(pair_name => 'amountProcedures', pair_value => proced.qt_solicitada);
                json_procedimentos_w.put(pair_name => 'bonusAmount', pair_value => proced.qt_bonus);
                json_procedimentos_w.put(pair_name => 'attentionNumber', pair_value => nr_atendimento_w);
                json_procedimentos_w.put(pair_name => 'transactionId', pair_value => nr_sequencia_autor_w);
                json_procedimentos_w.put(pair_name => 'procedureSequence', pair_value => proced.nr_sequencia);

                json_procedimentos_list_w.APPEND(json_procedimentos_w.to_json_value());
            END LOOP LOOP_PROCEDIMENTOS;

            json_data_w.put(pair_name => 'authorizedProceduresList', pair_value => json_procedimentos_list_w.to_json_value());
        END;

        <<LISTA_MATERIAIS>>
        BEGIN
            json_materiais_w := philips_json();
            json_materiais_list_w := philips_json_list();

            <<LOOP_MATERIAIS>>
            FOR materiais in c03 LOOP

                cd_item_convenio_w := obter_dados_item_conv_orono(cd_convenio_p => cd_convenio_w,
                                                                  cd_categoria_p => cd_categoria_w,
                                                                  cd_plano_p => cd_plano_convenio_w,
                                                                  ie_tipo_item_p => ie_tipo_item_mat_w,
                                                                  cd_item_p => materiais.cd_material,
                                                                  ie_origem_proced_p => null,
                                                                  ie_estrutura_completa_p => ie_estrutura_completa_w,
                                                                  cd_especialidade_med_p => null,
                                                                  ie_tipo_atendimento_p => ie_tipo_atendimento_w,
                                                                  nr_atendimento_p => nr_atendimento_w,
                                                                  nr_seq_proc_interno_p => null,
                                                                  nr_seq_exame_p => null,
                                                                  ie_cod_desc_p => ie_cod_desc_w,
                                                                  dt_autorizacao_p => dt_autorizacao_w);

                json_materiais_w.put(pair_name =>'materialCode', pair_value => materiais.cd_material);
                json_materiais_w.put(pair_name =>'globalMaterialCode', pair_value => materiais.cd_material_glo);
                json_materiais_w.put(pair_name =>'insuranceMaterialCode', pair_value => cd_item_convenio_w);
                json_materiais_w.put(pair_name =>'amountMaterial', pair_value => materiais.qt_solicitada);
                json_materiais_w.put(pair_name => 'bonusAmount', pair_value => materiais.qt_bonus);
                json_materiais_w.put(pair_name =>'attentionNumber', pair_value => nr_atendimento_w);
                json_materiais_w.put(pair_name =>'transactionId', pair_value => nr_sequencia_autor_w);
                json_materiais_w.put(pair_name =>'materialSequence', pair_value => materiais.nr_sequencia);

                json_materiais_list_w.APPEND(json_materiais_w.to_json_value());

            END LOOP LOOP_MATERIAIS;

            json_data_w.put(pair_name =>'authorizedMaterialsList', pair_value => json_materiais_list_w.to_json_value());

        END;

    END LOOP LOOP_PRINCIPAL;

    dbms_lob.createtemporary(lob_loc => data_w, cache => true);
    json_data_w.(data_w);
    retorno_integracao_w := bifrost.send_integration_content(nm_event => nm_event_w, ds_content => data_w, nm_user => nm_usuario_w);

    <<ENVIO_TIE_OK>>
    BEGIN
        select a.ds_message_error
        into STRICT ds_message_error_w
        from bifrost_layer_log a
        where a.nm_event = nm_event_w
        and a.nr_sequence in (SELECT max(b.nr_sequence)
                              from bifrost_layer_log b
                              where b.nm_event = nm_event_w);
        if (ds_message_error_w IS NOT NULL AND ds_message_error_w::text <> '') then
            ie_enviado_p := 'N';
        else
            ie_enviado_p := 'S';

            <<LOOP_PROCEDIMENTOS_UPDATE>>
            FOR procedUp in c02 LOOP
                update procedimento_autorizado 
                set ie_enviado_tiss = 'S'
                where nr_sequencia = procedUp.nr_sequencia;
            END LOOP LOOP_PROCEDIMENTOS_UPDATE;

            <<LOOP_MATERIAIS_UPDATE>>
            FOR materiaisUp in c03 LOOP            
                update material_autorizado 
                set ie_enviado_tiss = 'S'
                where nr_sequencia = materiaisUp.nr_sequencia;
            END LOOP LOOP_MATERIAIS_UPDATE;

            COMMIT;

        end if;
    EXCEPTION
        WHEN no_data_found OR too_many_rows THEN
            ie_enviado_p := 'N';
    END;

    nr_seq_int_call_log_w := record_integration_call_log(nm_usuario_w, nm_usuario_w, clock_timestamp(), nm_event_w, nm_event_w, ie_status_w, ie_message_type_w, null, ds_notes_w, null, null, null, nr_seq_int_call_log_w, null, null, null);

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enviar_solic_aut_convenio (nr_sequencia_p autorizacao_convenio.nr_sequencia%type, ie_enviado_p INOUT integration_call_log.ie_status%type) FROM PUBLIC;

