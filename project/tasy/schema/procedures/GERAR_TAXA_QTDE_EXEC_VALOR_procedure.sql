-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos_acumulado_seq AS (	nr_sequencia		bigint, 	
		qt_acumulado	 	double precision,
		qt_executada		double precision,
		dt_procedimento		timestamp,
		dt_inicio               timestamp, 
		dt_final                timestamp,  
		cd_medico_executor	varchar(10),
		nr_doc_convenio		varchar(20),
		nr_atendimento		bigint);
CREATE TYPE rule_items AS (rule_seq		bigint,
		v_acumulado_seq		vetor_acumulado_seq);
CREATE TYPE department_items AS (dt_start		timestamp,
		dt_end			timestamp,
		cd_setor_atendimento	bigint,
		v_rule_seq		t_rule_items);


CREATE OR REPLACE PROCEDURE gerar_taxa_qtde_exec_valor ( nr_interno_conta_p bigint) AS $body$
DECLARE

			
			
----------------------------------------------------------------------------------------------------
		
type vetor_acumulado_seq is
	table of campos_acumulado_seq index by integer;

type t_rule_items is
	table of rule_items index by integer;

type t_dept_items is
	table of department_items index by integer;

y 				integer :=1;
z 				integer :=1;
i				integer := 1;
x				integer	:= 1;
r				integer := 0;

vetor_acumulado_seq_w	vetor_acumulado_seq;
t_dept_items_w		t_dept_items;
t_rule_items_w		t_rule_items;

--------------------------------------------------------------------------------------------------------
		
tx_proc_w			double precision;
tx_procedimento_w			double precision;
cd_grupo_proc_w			bigint;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
nr_atendimento_w			bigint;
nr_interno_conta_w			bigint;
ie_regra_execucao_w		varchar(01);
qt_exec_max_w			double precision;
qt_exec_min_w			double precision;
qt_exec_w			double precision;
ie_regra_w			varchar(01)	:= 'N';
dt_procedimento_w			timestamp;
nr_sequencia_w			bigint;
tx_custo_oper_w			double precision;
tx_custo_operacional_w		double precision;
tx_medico_w			double precision;
tx_anestesia_w				procedimento_paciente.tx_anestesia%type;
tx_anestesia_original_w		procedimento_paciente.tx_anestesia%type;
tx_medico_proc_w			double precision;
tx_anestesia_proc_w			procedimento_paciente.tx_anestesia%type;

cd_area_procedimento_regra_w	bigint;
cd_especialidade_regra_w 		bigint;
cd_grupo_proc_regra_w		bigint;
cd_procedimento_regra_w 		bigint;
ie_origem_proced_regra_w		bigint;
qt_min_regra_per_w		bigint;
cd_setor_procedimento_w		integer;
cd_setor_atendimento_w		integer;
cd_pessoa_fisica_w		varchar(10);
vl_procedimento_w			double precision;
cd_estabelecimento_w		integer;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w		bigint;
qt_registro_w			bigint := 0;	
qt_count_w        		bigint := 0;	
ie_ajuste_proc_w		varchar(10)	:= 'N';	
vl_custo_operacional_w		double precision;
vl_medico_w			double precision;
vl_anestesista_w			procedimento_paciente.vl_anestesista%type;
vl_auxiliares_w			procedimento_paciente.vl_auxiliares%type;
nr_seq_procedimento_w		bigint;
ie_aplica_taxa_filme_w		varchar(01)		:= 'N';
vl_materiais_w			double precision;
vl_proced_ant_w			double precision:= 0;
vl_original_tabela_w		double precision:= 0;
nr_seq_ant_w			bigint:= 0;
dt_proced_min_w			timestamp;
varconsideramenordata_w		varchar(1);
ie_acumulou_w			varchar(1):= 'N';
qt_proc_lido_w			double precision;
ie_existe_w			varchar(1):= 'N';
ie_tipo_atendimento_w		smallint;
cd_cgc_prestador_w              		varchar(14);
ie_tipo_guia_w    			varchar(12);
cd_cgc_prestador_regra_w        	varchar(14);
ie_tipo_guia_regra_w    		varchar(12);
ie_param_tx_w			varchar(1);
tx_proc_via_princ_w		double precision;
tx_proc_maior_valor_w		double precision;
nr_registro_atual_w			bigint := 0;
ie_via_acesso_proc_w		varchar(1);
nr_seq_proc_via_princ_w		bigint;
ie_aplica_tx_filme_w		varchar(1) := 'N';
ie_aplica_valor_informado_w		varchar(1) := 'N';
ie_classificacao_w			varchar(1);
nr_prescricao_w			bigint;
nr_doc_convenio_w		varchar(20);
dt_entrada_w			timestamp;
cd_medico_executor_w		varchar(10);
cd_medico_executor_regra_w		varchar(10);
ie_aplica_tx_filme_conta_w	varchar(1) := 'N';

ie_regra_arredondamento_tx_w	varchar(1):= 'N';
ie_tipo_rounded_w			varchar(1);
vl_custo_operacional_ww		double precision;
vl_medico_ww			double precision;
vl_procedimento_ww			double precision;
vl_materiais_ww			double precision;
cd_plano_w			varchar(10);

vl_participante_w		procedimento_participante.vl_participante%type :=0;
qt_porte_anestesico_w	procedimento_paciente.qt_porte_anestesico%type;
Ie_ignora_partic_w		convenio_estabelecimento.Ie_ignora_partic%type :='N';

ie_tipo_ordenacao_w 	convenio_regra_qtde.ie_regra_valor%type;
dt_conta_w		procedimento_paciente.dt_conta%type;
cd_tipo_procedimento_w	procedimento.cd_tipo_procedimento%type;
cd_tipo_proced_regra_w	convenio_regra_qtde.cd_tipo_procedimento%type;

ie_responsavel_credito_w procedimento_paciente.ie_responsavel_credito%type;
ie_responsavel_credito_regra_w convenio_regra_qtde.ie_responsavel_credito%type;

ie_lado_w				procedimento_paciente.ie_lado%type;
ie_lado_regra_w			convenio_regra_qtde.ie_lado%type;

ie_via_acesso_cp_w		procedimento_paciente.ie_via_acesso%type;
ie_via_acesso_regra_w	convenio_regra_qtde.ie_via_acesso%type;

nr_seq_partic_w			procedimento_participante.nr_sequencia%type;
nr_seq_regra_qtde_exec_w	procedimento_paciente.nr_seq_regra_qtde_exec%type;
cd_classif_setor_w		setor_atendimento.cd_classif_setor%type;

-- OS 854790 | Este cursor foi criado para reconhecer os tipos de ordenacao da regra de quantidade execucao

-- Tratar novos tipos de ordenacao no cursor c03, atraves do decode na instrucao order by
c00 CURSOR FOR
	SELECT distinct a.ie_regra_valor
	from	convenio_regra_qtde a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and		a.cd_convenio			= cd_convenio_w
	and 	coalesce(a.ie_situacao,'A')	= 'A'
	and		a.ie_regra_valor 		<> 'N';

c01 CURSOR FOR
	SELECT	ie_regra_execucao,
		nr_sequencia,
		cd_area_procedimento,
		cd_especialidade, 
		cd_grupo_proc,
		cd_procedimento, 
		ie_origem_proced,
		qt_min_regra_per,
		cd_setor_atendimento,
		cd_cgc_prestador,
		ie_tipo_guia,
		a.cd_medico_executor,
		a.cd_tipo_procedimento,
		a.ie_responsavel_credito,
		a.ie_lado,
		a.ie_via_acesso
	from	convenio_regra_qtde a
	where	a.cd_estabelecimento					= cd_estabelecimento_w
	and	a.cd_convenio						= cd_convenio_w
	and	coalesce(a.cd_categoria, cd_categoria_w)			= cd_categoria_w
	and	coalesce(a.cd_area_procedimento, cd_area_procedimento_w)	= cd_area_procedimento_w
	and	coalesce(a.cd_especialidade, cd_especialidade_w)		= cd_especialidade_w
	and	coalesce(a.cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w
	and	coalesce(a.cd_procedimento, cd_procedimento_w)		= cd_procedimento_w
	and	coalesce(a.ie_origem_proced, ie_origem_proced_w)		= ie_origem_proced_w
	and	coalesce(a.nr_seq_proc_interno, coalesce(nr_seq_proc_interno_w,0))= coalesce(nr_seq_proc_interno_w,0)
	and 	coalesce(a.cd_setor_atendimento, cd_setor_procedimento_w)	= cd_setor_procedimento_w
	and	coalesce(ie_regra_valor,'N')					= ie_tipo_ordenacao_w
	--and	nvl(ie_regra_valor,'N')					= 'S'
	and	coalesce(a.ie_tipo_atendimento,coalesce(ie_tipo_atendimento_w,0))	= coalesce(ie_tipo_atendimento_w,0)
	and	coalesce(a.ie_tipo_guia,coalesce(ie_tipo_guia_w,0))		= coalesce(ie_tipo_guia_w,0)
	and	coalesce(a.cd_cgc_prestador,coalesce(cd_cgc_prestador_w,0))	= coalesce(cd_cgc_prestador_w,0)
	and	coalesce(a.cd_medico_executor, coalesce(cd_medico_executor_w,0))  = coalesce(cd_medico_executor_w,0)
	and	coalesce(a.cd_plano, coalesce(cd_plano_w,'0'))		        = coalesce(cd_plano_w,'0')
	and	coalesce(a.cd_tipo_procedimento, coalesce(cd_tipo_procedimento_w,0)) = coalesce(cd_tipo_procedimento_w,0)
	and	coalesce(a.ie_responsavel_credito, coalesce(ie_responsavel_credito_w,0)) = coalesce(ie_responsavel_credito_w,0)
	and	coalesce(a.ie_lado, coalesce(ie_lado_w,0)) = coalesce(ie_lado_w,0)	
	and	coalesce(a.ie_via_acesso, coalesce(ie_via_acesso_cp_w,0)) = coalesce(ie_via_acesso_cp_w,0)
	and 	coalesce(a.ie_situacao,'A')					= 'A'
	and	a.ie_regra_execucao					<> 'O'
	and	a.dt_vigencia						=
			(SELECT		max(b.dt_vigencia)
			from	convenio_regra_qtde b
			where	b.cd_estabelecimento					= cd_estabelecimento_w
			and	b.cd_convenio						= cd_convenio_w
			and	coalesce(b.cd_categoria, cd_categoria_w)			= cd_categoria_w
			and	coalesce(b.cd_area_procedimento, cd_area_procedimento_w)	= cd_area_procedimento_w
			and	coalesce(b.cd_especialidade, cd_especialidade_w)		= cd_especialidade_w
			and	coalesce(b.cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w
			and	coalesce(b.cd_procedimento, cd_procedimento_w)		= cd_procedimento_w
			and	coalesce(b.ie_origem_proced, ie_origem_proced_w)		= ie_origem_proced_w
			and	coalesce(b.nr_seq_proc_interno, coalesce(nr_seq_proc_interno_w,0))= coalesce(nr_seq_proc_interno_w,0)
			and 	coalesce(b.cd_setor_atendimento, cd_setor_procedimento_w)	= cd_setor_procedimento_w
			and	coalesce(b.ie_tipo_atendimento,coalesce(ie_tipo_atendimento_w,0))	= coalesce(ie_tipo_atendimento_w,0)
			and	coalesce(b.ie_tipo_guia,coalesce(ie_tipo_guia_w,0))		= coalesce(ie_tipo_guia_w,0)
			and	coalesce(b.cd_cgc_prestador,coalesce(cd_cgc_prestador_w,0))	= coalesce(cd_cgc_prestador_w,0)
			and	coalesce(b.cd_medico_executor, coalesce(cd_medico_executor_w,0)) = coalesce(cd_medico_executor_w,0)
			and	coalesce(b.cd_plano, coalesce(cd_plano_w,'0'))		        = coalesce(cd_plano_w,'0')
			and	coalesce(b.cd_tipo_procedimento, coalesce(cd_tipo_procedimento_w,0)) = coalesce(cd_tipo_procedimento_w,0)
			and	coalesce(b.ie_responsavel_credito, coalesce(ie_responsavel_credito_w,0)) = coalesce(ie_responsavel_credito_w,0)			
			and	coalesce(b.ie_lado, coalesce(ie_lado_w,0)) = coalesce(ie_lado_w,0)						
			and 	coalesce(b.ie_situacao,'A')					= 'A'
			and	b.ie_regra_execucao					<> 'O'
			and	CASE WHEN coalesce(ie_tipo_data,'A')='A' THEN  dt_entrada_w WHEN coalesce(ie_tipo_data,'A')='E' THEN dt_procedimento_w END  > b.dt_vigencia);
c02 CURSOR FOR
	SELECT	qt_exec_min,
		qt_exec_max,
		tx_procedimento,
		tx_custo_operacional,
		tx_medico,
		tx_anestesista
	from	convenio_regra_qtde_tx
	where	nr_seq_regra	= nr_sequencia_w
	order by qt_exec_min;
	
	
c03 CURSOR FOR
SELECT	x.nr_sequencia,
		x.cd_convenio_parametro,
		x.cd_categoria_parametro,
		x.vl_proc,
		x.cd_procedimento,
		x.ie_origem_proced,
		x.vl_original_tabela,
		x.cd_cgc_prestador,
		x.ie_tipo_guia,
		x.tx_procedimento,
		x.tx_anestesia,
		x.ie_via_acesso,
		x.nr_prescricao,
		x.nr_doc_convenio,
		x.nr_seq_proc_interno,
		x.cd_medic,
		x.qt_porte,
		x.dt_conta,
		x.ie_responsavel_credito,
		x.ie_lado,
		x.ie_via_acesso ie_via_acesso_cp
from	(
	SELECT	nr_sequencia,
		cd_convenio_parametro,
		cd_categoria_parametro,
		vl_procedimento vl_proc,
		cd_procedimento,
		ie_origem_proced,
		vl_original_tabela,
		cd_cgc_prestador,
		b.ie_tipo_guia,
		a.tx_procedimento,
		a.tx_anestesia,
		a.ie_via_acesso,
		a.nr_prescricao,
		a.nr_doc_convenio,
		a.nr_seq_proc_interno,
		a.cd_medico_executor cd_medic,
		a.qt_porte_anestesico qt_porte,
		a.dt_conta,
		a.ie_responsavel_credito,
		a.ie_lado,
		a.ie_via_acesso ie_via_acesso_cp
	from	procedimento_paciente a,
		conta_paciente b
	where	a.nr_interno_conta	= b.nr_interno_conta
	and	a.nr_interno_conta	= nr_interno_conta_p
	and 	a.tx_procedimento	= 100
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	coalesce(a.nr_seq_proc_pacote::text, '') = ''
	and	((a.ie_valor_informado	= 'N') or
		 (a.ie_valor_informado	= 'S' and (coalesce(ie_aplica_valor_informado_w,'N')= 'S') and ((a.cd_situacao_glosa = 8) or (Obter_Se_Proc_Glosado(a.nr_Sequencia) = 'S'))))
	and	ie_param_tx_w = 'N'
	
union all

	select	nr_sequencia,
		cd_convenio_parametro,
		cd_categoria_parametro,
		vl_original_tabela vl_proc,
		cd_procedimento,
		ie_origem_proced,
		vl_original_tabela,
		cd_cgc_prestador,
		b.ie_tipo_guia,
		a.tx_procedimento,
		a.tx_anestesia,
		coalesce(a.ie_via_acesso,'U'),
		a.nr_prescricao,
		a.nr_doc_convenio,
		a.nr_seq_proc_interno,
		a.cd_medico_executor cd_medic,
		a.qt_porte_anestesico qt_porte,
		a.dt_conta,
		a.ie_responsavel_credito,
		a.ie_lado,
		a.ie_via_acesso ie_via_acesso_cp
	from	procedimento_paciente a,
		conta_paciente b
	where	a.nr_interno_conta	= b.nr_interno_conta
	and	a.nr_interno_conta	= nr_interno_conta_p
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	coalesce(a.nr_seq_proc_pacote::text, '') = ''
	and	((a.ie_valor_informado	= 'N') or 
		(a.ie_valor_informado	= 'S' and (coalesce(ie_aplica_valor_informado_w,'N')= 'S') and ((a.cd_situacao_glosa = 8) or (Obter_Se_Proc_Glosado(a.nr_Sequencia) = 'S'))))
	and	ie_param_tx_w <> 'N') x
where	1 = 1
order by CASE WHEN ie_tipo_ordenacao_w='S' THEN vl_proc WHEN ie_tipo_ordenacao_w='P' THEN qt_porte WHEN ie_tipo_ordenacao_w='C' THEN  := obter_valor_porte_cbhpm(cd_estabelecimento_w, dt_conta, cd_procedimento, ie_origem_proced, cd_convenio_w, null, null) END  desc,
		cd_medic,
		nr_sequencia;
		
c04 CURSOR FOR
SELECT	b.nr_seq_partic
from	funcao_medico c,
	procedimento_paciente a,
	procedimento_participante b
where	b.nr_sequencia = nr_seq_procedimento_w
and	b.nr_sequencia = a.nr_sequencia
and	b.ie_funcao = c.cd_funcao
and	c.ie_anestesista = 'S'
order by	b.nr_seq_partic;

c20 CURSOR FOR
	SELECT 	dt_entrada_unidade,
		coalesce(dt_saida_unidade, clock_timestamp()) dt_saida_unidade,
		b.cd_setor_atendimento cd_setor_atendimento
	from 	setor_atendimento a,
		atend_paciente_unidade b
	where 	a.cd_setor_atendimento = b.cd_setor_atendimento
	and 	a.cd_classif_setor = 2 
	and 	b.nr_atendimento = nr_atendimento_w
	and	PKG_DATE_UTILS.start_of(dt_procedimento_w, 'dd',0) between PKG_DATE_UTILS.start_of(dt_entrada_unidade, 'dd',0) and 
		PKG_DATE_UTILS.start_of(coalesce(dt_saida_unidade,dt_procedimento_w), 'dd',0) 
	order	by 1;

c20_w   c20%rowtype;


BEGIN
varconsideramenordata_w		:= obter_valor_param_usuario(67, 354, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento);
ie_param_tx_w			:= obter_valor_param_usuario(67, 515, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento);
ie_aplica_valor_informado_w	:= obter_valor_param_usuario(67, 534, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento);

Begin
	Select	cd_estabelecimento,
		cd_convenio_parametro
	  Into STRICT	cd_estabelecimento_w,
		cd_convenio_w
	  From	conta_paciente
	  Where	nr_interno_conta = nr_interno_conta_p;
Exception
 When others then
	cd_estabelecimento_w:= wheb_usuario_pck.get_cd_estabelecimento;
	cd_convenio_w :=0;
end;

open c00;
loop
fetch c00 into	
	ie_tipo_ordenacao_w;
EXIT WHEN NOT FOUND; /* apply on c00 */
begin
	begin
	select 	coalesce(max(ie_regra_arredondamento_tx),'N')
	into STRICT	ie_regra_arredondamento_tx_w
	from 	parametro_faturamento
	where 	cd_estabelecimento = cd_estabelecimento_W;
	exception
	when others then
		ie_regra_arredondamento_tx_w:= 'N';
	end;

	If coalesce(cd_convenio_w,0) > 0 Then

		Begin
			Select	coalesce(Max(Ie_ignora_partic),'N')
			Into STRICT	Ie_ignora_partic_w
			From	convenio_estabelecimento
			Where	cd_convenio	  	= cd_convenio_w
			And	cd_estabelecimento	= cd_estabelecimento_W;
		Exception
			When Others Then
			Ie_ignora_partic_w:='N';
		End;		
		
	End If;

	if (ie_param_tx_w <> 'N') then

		select	coalesce(max(obter_regra_preco_filme(cd_convenio_parametro)),'N')
		into STRICT	ie_aplica_tx_filme_conta_w
		from	conta_paciente
		where	nr_interno_conta = nr_interno_conta_p;

		update	procedimento_paciente
		set 	vl_original_tabela 	=
						CASE WHEN (
							(dividir(vl_medico * 100, coalesce(tx_medico, tx_procedimento))
							+ dividir(vl_anestesista * 100, coalesce(tx_anestesia, tx_procedimento))
							+ dividir(vl_auxiliares * 100, tx_procedimento)
							+ dividir(vl_custo_operacional * 100, coalesce(tx_custo_oper_qt, tx_procedimento)))
							- CASE WHEN ie_aplica_tx_filme_conta_w='N' THEN  dividir(vl_materiais * 100, tx_procedimento) - vl_materiais  ELSE 0 END 
							+ CASE WHEN Ie_ignora_partic_w='S' THEN 0  ELSE Obter_Valor_Conta_Partic(nr_Sequencia) END     ) = 0 THEN  							
							dividir(vl_procedimento * 100, tx_procedimento)
						ELSE (dividir(vl_medico * 100, coalesce(tx_medico, tx_procedimento))
							+ dividir(vl_anestesista * 100, coalesce(tx_anestesia, tx_procedimento))
							+ dividir(vl_auxiliares * 100, tx_procedimento)
							+ dividir(vl_custo_operacional * 100, coalesce(tx_custo_oper_qt, tx_procedimento)))
							- CASE WHEN ie_aplica_tx_filme_conta_w='N' THEN  dividir(vl_materiais * 100, tx_procedimento) - vl_materiais  ELSE 0 END 
							+ CASE WHEN Ie_ignora_partic_w='S' THEN 0  ELSE Obter_Valor_Conta_Partic(nr_Sequencia) END  
						END			
		where	nr_interno_conta	= nr_interno_conta_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	coalesce(nr_seq_proc_pacote::text, '') = ''
		and	((ie_valor_informado	= 'N') or 
			(ie_valor_informado	= 'S' and (coalesce(ie_aplica_valor_informado_w,'N')= 'S') and ((cd_situacao_glosa = 8) or (Obter_Se_Proc_Glosado(nr_Sequencia) = 'S'))));	

	else
		update	procedimento_paciente
		set 	vl_original_tabela 	= vl_procedimento
		where	nr_interno_conta	= nr_interno_conta_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	coalesce(nr_seq_proc_pacote::text, '') = ''
		and	((ie_valor_informado	= 'N') or 
			(ie_valor_informado	= 'S' and (coalesce(ie_aplica_valor_informado_w,'N')= 'S') and ((cd_situacao_glosa = 8) or (Obter_Se_Proc_Glosado(nr_Sequencia) = 'S'))));
	end if;

	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if; -- incluido o commit os 354304
	
	delete from w_controle_proc_valor_tx;
	
	open c03;
	loop
	fetch c03 into	
		nr_seq_procedimento_w,
		cd_convenio_w,
		cd_categoria_w,
		vl_procedimento_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		vl_original_tabela_w,
		cd_cgc_prestador_w,
		ie_tipo_guia_w,
		tx_proc_maior_valor_w,
		tx_anestesia_original_w,
		ie_via_acesso_proc_w,
		nr_prescricao_w,
		nr_doc_convenio_w,
		nr_seq_proc_interno_w,
		cd_medico_executor_w,
		qt_porte_anestesico_w,
		dt_conta_w,
		ie_responsavel_credito_w,
		ie_lado_w,
		ie_via_acesso_cp_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		RAISE NOTICE '>>>>>>>> ie_via_acesso_cp_w := %', ie_via_acesso_cp_w;
		
		select	coalesce(max(ie_classificacao),'0')
		into STRICT	ie_classificacao_w
		from	procedimento
		where	cd_procedimento = cd_procedimento_w
		and	ie_origem_proced= ie_origem_proced_w;

		if (vl_procedimento_w = vl_proced_ant_w) then
			insert into w_controle_proc_valor_tx values (nr_seq_ant_w);
		else	
			delete from w_controle_proc_valor_tx;
		end if;

		if (ie_param_tx_w = 'E') then
			nr_registro_atual_w := nr_registro_atual_w + 1;
			
			if (nr_registro_atual_w = 1) and (ie_via_acesso_proc_w <> 'U') then
				tx_proc_via_princ_w	:= tx_proc_maior_valor_w;
			end if;
			
			if (ie_via_acesso_proc_w = 'U') then
				nr_seq_proc_via_princ_w	:= nr_seq_procedimento_w;
				
				select	obter_regra_preco_filme(cd_convenio_w)
				into STRICT 	ie_aplica_tx_filme_w
				;	
			end if;
		end if;
		
		ie_regra_w			:= 'N';
		
		select obter_regra_preco_filme(cd_convenio_w)
		into STRICT 	ie_aplica_taxa_filme_w
		;	

		begin
		select 	cd_grupo_proc,
			cd_area_procedimento,
			cd_especialidade,
			cd_tipo_procedimento
		into STRICT	cd_grupo_proc_w,
			cd_area_procedimento_w,
			cd_especialidade_w,
			cd_tipo_procedimento_w
		from	estrutura_procedimento_v
		where	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w;
		exception
				 when others then
			 begin
			 cd_grupo_proc_w		:= 0;
			 cd_area_procedimento_w		:= 0;
			 cd_especialidade_w		:= 0;
			 end;
		end;
		
		Begin
			Vl_Participante_w:= Obter_Valor_Conta_Partic(nr_seq_procedimento_w);
		Exception
			When Others Then
			Vl_Participante_w:=0;
		End;
		
		begin
		select	nr_atendimento,
			nr_interno_conta,
			dt_procedimento,
			cd_setor_atendimento,
			CASE WHEN ie_param_tx_w='N' THEN  vl_procedimento  ELSE (dividir(CASE WHEN ie_classificacao_w='1' THEN  vl_original_tabela  ELSE vl_procedimento END  * 100, tx_procedimento) -							CASE WHEN ie_aplica_taxa_filme_w='N' THEN  dividir(vl_materiais * 100, tx_procedimento) - vl_materiais  ELSE 0 END ) END  vl_procedimento,
			CASE WHEN ie_param_tx_w='N' THEN  vl_custo_operacional  ELSE dividir(vl_custo_operacional * 100, coalesce(tx_custo_oper_qt, tx_procedimento)) END  vl_custo_operacional,
			CASE WHEN ie_param_tx_w='N' THEN  vl_medico  ELSE dividir(vl_medico * 100, coalesce(tx_medico, tx_procedimento)) END  vl_medico,
			CASE WHEN ie_param_tx_w='N' THEN  vl_anestesista  ELSE dividir(vl_anestesista * 100, coalesce(tx_anestesia, tx_procedimento)) END  vl_anestesista,
			vl_auxiliares,
			CASE WHEN ie_param_tx_w='N' THEN  vl_materiais  ELSE CASE WHEN ie_aplica_taxa_filme_w='S' THEN  dividir(vl_materiais * 100, tx_procedimento)  ELSE vl_materiais END  END  vl_materiais
		into STRICT	nr_atendimento_w,
			nr_interno_conta_w,
			dt_procedimento_w,
			cd_setor_procedimento_w,	/*fabricio em  16/09/2008 inclui o campo setor   os 108909 */
			vl_procedimento_w,
			vl_custo_operacional_w,
			vl_medico_w,
			vl_anestesista_w,
			vl_auxiliares_w,
			vl_materiais_w
		from	procedimento_paciente
		where	nr_sequencia	= nr_seq_procedimento_w;
		exception
				 when others then
			 begin
			 nr_atendimento_w		:= 0;
			 nr_interno_conta_w		:= 0;
			 vl_procedimento_w		:= 0;
			 end;
		end;
		
		If coalesce(Ie_ignora_partic_w,'N') = 'S' Then
			vl_procedimento_w := vl_procedimento_w - coalesce(vl_Participante_w,0);
		End If;
		
		select	max(cd_estabelecimento)
		into STRICT	cd_estabelecimento_w
		from	conta_paciente
		where	nr_interno_conta	= nr_interno_conta_p;
		
		select 	ie_tipo_atendimento,
			dt_entrada,
			cd_pessoa_fisica,
			substr(obter_dado_atend_cat_conv(nr_atendimento, dt_procedimento_w, cd_convenio_w, cd_categoria_w, 'P'),1,10)
		into STRICT	ie_tipo_atendimento_w,
			dt_entrada_w,
			cd_pessoa_fisica_w,
			cd_plano_w
		from	atendimento_paciente
		where	nr_atendimento =  nr_atendimento_w;

		RAISE NOTICE 'cd_estabelecimento_w= %  cd_convenio_w= %  cd_categoria_w= %  cd_area_procedimento_w= %  cd_especialidade_w= %  cd_grupo_proc_w= %  cd_procedimento_w= %  ie_origem_proced_w= %  cd_tipo_procedimento_w= %  nr_seq_proc_interno_w= %  cd_setor_procedimento_w= %', cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, cd_procedimento_w, ie_origem_proced_w, cd_tipo_procedimento_w, nr_seq_proc_interno_w, cd_setor_procedimento_w;
		
		open c01;
		loop
		fetch c01 into			
			ie_regra_execucao_w,
			nr_sequencia_w,
			cd_area_procedimento_regra_w,
			cd_especialidade_regra_w,
			cd_grupo_proc_regra_w,
			cd_procedimento_regra_w,
			ie_origem_proced_regra_w,
			qt_min_regra_per_w,
			cd_setor_atendimento_w,
			cd_cgc_prestador_regra_w,
			ie_tipo_guia_regra_w,
			cd_medico_executor_regra_w,
			cd_tipo_proced_regra_w,
			ie_responsavel_credito_regra_w,
			ie_lado_regra_w,
			ie_via_acesso_regra_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin		
			
			RAISE NOTICE 'Seq= % Vl_procedimento_w % ie_responsavel_credito_regra_w % ie_lado_regra_w % ie_via_acesso_regra_w ie_via_acesso_regra_w', nr_sequencia_w, vl_procedimento_w, ie_responsavel_credito_regra_w, ie_lado_regra_w;
			open c02;
			loop
			fetch c02 into	
				qt_exec_min_w,
				qt_exec_max_w,
				tx_proc_w,
				tx_custo_oper_w,
				tx_medico_proc_w,
				tx_anestesia_proc_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				
				if (ie_regra_w	= 'N') then
					begin

					if (ie_regra_execucao_w 	= 'A') then
					
						-- verifica se o item ja existe no vetor  (casos de mais de uma regra)
						ie_existe_w:= 'N';
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].nr_atendimento = coalesce(nr_atendimento_w,'0')) then	
								RAISE NOTICE '1nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', nr_sequencia_w, qt_exec_w, ie_acumulou_w;
								ie_existe_w:= 'S';				
								exit;
							end if;
						end loop;
						
						-- se nao existe cria
						if (ie_existe_w = 'N') then
							x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
							vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
							vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
							vetor_acumulado_seq_w[x].qt_executada	:= 0;
							vetor_acumulado_seq_w[x].nr_atendimento:= coalesce(nr_atendimento_w,'0');
							RAISE NOTICE '2nr_atendimento_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].nr_atendimento, qt_exec_w, ie_acumulou_w;
						end if;
						
						--acumula a qtde conforme a regra que foi aplicada
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].nr_atendimento = coalesce(nr_atendimento_w,'0')) then
								RAISE NOTICE '3nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
								if (ie_acumulou_w = 'N') then												
									vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
									qt_exec_w				:= vetor_acumulado_seq_w[i].qt_acumulado;
									ie_acumulou_w				:= 'S';								
								end if;				
								exit;
							end if;
						end loop;
						RAISE NOTICE '4nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;

					elsif (ie_regra_execucao_w 	= 'R') then -- prescricao
					
						select	coalesce(sum(qt_procedimento),0)
						into STRICT	qt_exec_w
						from	estrutura_procedimento_v b,
							procedimento_paciente a
						where	a.cd_procedimento		= b.cd_procedimento
						and	a.ie_origem_proced		= b.ie_origem_proced
						and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
						and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
						and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
						and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
						and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
						and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''			
						and	a.nr_atendimento		= nr_atendimento_w						
						and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
						and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
						and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
						and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
						and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))						
						and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))
						and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))						
						and	((a.vl_original_tabela >= vl_procedimento_w AND vl_procedimento_w <> vl_proced_ant_w) or ((a.vl_original_tabela >= vl_procedimento_w) and  not exists (SELECT 1 from w_controle_proc_valor_tx w where w.nr_seq_propaci = a.nr_sequencia)))
						and 	((coalesce(a.nr_prescricao,0) > 0) and (coalesce(a.nr_prescricao,0) = nr_prescricao_w));
						
					elsif (ie_regra_execucao_w 	= 'G') then
					
						select	coalesce(sum(qt_procedimento),0)
						into STRICT	qt_proc_lido_w
						from	estrutura_procedimento_v b,
							procedimento_paciente a
						where	a.cd_procedimento		= b.cd_procedimento
						and	a.ie_origem_proced		= b.ie_origem_proced
						and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
						and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
						and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
						and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
						and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
						and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''			
						and	a.nr_atendimento		= nr_atendimento_w						
						and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
						and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
						and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
						and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
						and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))		
						and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))		
						and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
						--and	(((a.vl_original_tabela >= vl_procedimento_w) and (vl_procedimento_w <> vl_proced_ant_w)) or ((a.vl_original_tabela >= vl_procedimento_w) and (a.nr_sequencia <> nr_seq_ant_w)))
						and (a.vl_original_tabela > vl_procedimento_w)
						and 	((coalesce(a.nr_doc_convenio,'0') <> '0') and (coalesce(a.nr_doc_convenio,'0') = nr_doc_convenio_w));
						
						-- verifica se o item ja existe no vetor  (casos de mais de uma regra)
						ie_existe_w:= 'N';
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].nr_doc_convenio = coalesce(nr_doc_convenio_w,'0')) then	
								RAISE NOTICE '1nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', nr_sequencia_w, qt_exec_w, ie_acumulou_w;
								ie_existe_w:= 'S';				
								exit;
							end if;
						end loop;
						-- se nao existe cria
						if (ie_existe_w = 'N') then
							x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
							vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
							vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
							vetor_acumulado_seq_w[x].qt_executada	:= 0;
							vetor_acumulado_seq_w[x].nr_doc_convenio:= coalesce(nr_doc_convenio_w,'0');
							RAISE NOTICE '2nr_doc_convenio_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].nr_doc_convenio, qt_exec_w, ie_acumulou_w;
						end if;
						--acumula a qtde conforme a regra que foi aplicada
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].nr_doc_convenio = coalesce(nr_doc_convenio_w,'0')) then
								RAISE NOTICE '3nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
								if (ie_acumulou_w = 'N') then												
									vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
									if (qt_proc_lido_w = 0) then
										vetor_acumulado_seq_w[i].qt_executada	:= qt_proc_lido_w + vetor_acumulado_seq_w[i].qt_acumulado;
									else
										vetor_acumulado_seq_w[i].qt_executada	:= vetor_acumulado_seq_w[i].qt_acumulado;
									end if;
									qt_exec_w				:= vetor_acumulado_seq_w[i].qt_executada;
									ie_acumulou_w				:= 'S';								
								end if;				
								exit;
							end if;
						end loop;
						RAISE NOTICE '4nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
						
					elsif (ie_regra_execucao_w 	= 'D') then
										
						select	coalesce(sum(qt_procedimento),0)
						into STRICT	qt_proc_lido_w
						from	estrutura_procedimento_v b,
							procedimento_paciente a
						where	a.cd_procedimento		= b.cd_procedimento
						and	a.ie_origem_proced		= b.ie_origem_proced
						and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
						and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
						and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
						and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
						and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
						and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
						and	a.nr_atendimento	= nr_atendimento_w
						and (a.vl_original_tabela > vl_procedimento_w)
						and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
						and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
						and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
						and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
						and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))	
						and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))
						and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
						and	a.dt_procedimento		between PKG_DATE_UTILS.start_of(dt_procedimento_w, 'dd',0) and
										PKG_DATE_UTILS.start_of(dt_procedimento_w, 'dd',0)  + 86399/86400;										
			
						-- verifica se o item ja existe no vetor  (casos de mais de uma regra)
						ie_existe_w:= 'N';
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].dt_procedimento = PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0)) then	
								RAISE NOTICE '1nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', nr_sequencia_w, qt_exec_w, ie_acumulou_w;
								ie_existe_w:= 'S';				
								exit;
							end if;
						end loop;
						-- se nao existe cria
						if (ie_existe_w = 'N') then
							x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
							vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
							vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
							vetor_acumulado_seq_w[x].qt_executada	:= 0;
							vetor_acumulado_seq_w[x].dt_procedimento:= PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0);
							RAISE NOTICE '2dt_procedimento_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].dt_procedimento, qt_exec_w, ie_acumulou_w;
						end if;
						--acumula a qtde conforme a regra que foi aplicada
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].dt_procedimento = PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0)) then
								RAISE NOTICE '3nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
								if (ie_acumulou_w = 'N') then												
									vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
									if (qt_proc_lido_w = 0) then
										vetor_acumulado_seq_w[i].qt_executada	:= qt_proc_lido_w + vetor_acumulado_seq_w[i].qt_acumulado;
									else
										vetor_acumulado_seq_w[i].qt_executada	:= vetor_acumulado_seq_w[i].qt_acumulado;
									end if;
									qt_exec_w				:= vetor_acumulado_seq_w[i].qt_executada;
									ie_acumulou_w				:= 'S';								
								end if;				
								exit;
							end if;
						end loop;
						RAISE NOTICE '4nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
						
					elsif (ie_regra_execucao_w 	= 'P') then
						
						if (varconsideramenordata_w = 'S') then
							
							select	min(dt_procedimento)
							into STRICT	dt_proced_min_w
							from	estrutura_procedimento_v b,
								procedimento_paciente a
							where	a.cd_procedimento		= b.cd_procedimento
							and	a.ie_origem_proced		= b.ie_origem_proced
							and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
							and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
							and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
							and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
							and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
							and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
							and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
							and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
							and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
							and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
							and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
							and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))	
							and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))
							and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
							and	a.nr_atendimento = nr_atendimento_w;
						
							select	coalesce(sum(qt_procedimento),0)
							into STRICT	qt_proc_lido_w
							from	estrutura_procedimento_v b,
								procedimento_paciente a
							where	a.cd_procedimento		= b.cd_procedimento
							and	a.ie_origem_proced		= b.ie_origem_proced
							and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
							and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
							and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
							and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
							and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
							and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
							and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
							and (a.vl_original_tabela > vl_procedimento_w)
							and	a.nr_atendimento		= nr_atendimento_w
							and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
							and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
							and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
							and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
							and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))	
							and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))
							and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
							and 	a.dt_procedimento between dt_proced_min_w and dt_proced_min_w + qt_min_regra_per_w/1440;
							
							RAISE NOTICE 'vl_procedimento_w= % vl_proced_ant_w= % nr_seq_ant_w= %', vl_procedimento_w, vl_proced_ant_w, nr_seq_ant_w;
							
							ie_existe_w:= 'N';
							for 	i in 1..vetor_acumulado_seq_w.count loop
								if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].dt_procedimento = PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0)) then	
									RAISE NOTICE '1nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', nr_sequencia_w, qt_exec_w, ie_acumulou_w;
									ie_existe_w:= 'S';				
									exit;
								end if;
							end loop;
							-- se nao existe cria
							if (ie_existe_w = 'N') then
								x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
								vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
								vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
								vetor_acumulado_seq_w[x].qt_executada	:= 0;
								vetor_acumulado_seq_w[x].dt_procedimento:= PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0);
								RAISE NOTICE '2dt_procedimento_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].dt_procedimento, qt_exec_w, ie_acumulou_w;
							end if;
							--acumula a qtde conforme a regra que foi aplicada
							for 	i in 1..vetor_acumulado_seq_w.count loop
								if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].dt_procedimento = PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0)) then
									RAISE NOTICE '3nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
									if (ie_acumulou_w = 'N') then												
										vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
										if (qt_proc_lido_w = 0) then
											vetor_acumulado_seq_w[i].qt_executada	:= qt_proc_lido_w + vetor_acumulado_seq_w[i].qt_acumulado;
										else
											vetor_acumulado_seq_w[i].qt_executada	:= vetor_acumulado_seq_w[i].qt_acumulado;
										end if;
										qt_exec_w				:= vetor_acumulado_seq_w[i].qt_executada;
										ie_acumulou_w				:= 'S';								
									end if;				
									exit;
								end if;
							end loop;
							
						else	
						
							select	coalesce(sum(qt_procedimento),0)
							into STRICT	qt_exec_w
							from	estrutura_procedimento_v b,
								procedimento_paciente a
							where	a.cd_procedimento		= b.cd_procedimento
							and	a.ie_origem_proced		= b.ie_origem_proced
							and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
							and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
							and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
							and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
							and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
							and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
							and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
							and	((a.vl_original_tabela >= vl_procedimento_w AND vl_procedimento_w <> vl_proced_ant_w) or ((a.vl_original_tabela >= vl_procedimento_w) and  not exists (SELECT 1 from w_controle_proc_valor_tx w where w.nr_seq_propaci = a.nr_sequencia)))							
							and	a.nr_atendimento		= nr_atendimento_w
							and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
							and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
							and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
							and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
							and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))						
							and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))					
							and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
							and	a.dt_procedimento between dt_procedimento_w - qt_min_regra_per_w/1440 and dt_procedimento_w;

						end if;

					elsif (ie_regra_execucao_w 	= 'Q') then
						
						select	coalesce(sum(qt_procedimento),0)
						into STRICT	qt_proc_lido_w
						from	estrutura_procedimento_v b,
							procedimento_paciente a
						where	a.cd_procedimento		= b.cd_procedimento
						and	a.ie_origem_proced		= b.ie_origem_proced
						and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
						and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
						and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
						and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
						and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
						and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
						and	((a.vl_original_tabela >= vl_procedimento_w AND vl_procedimento_w <> vl_proced_ant_w) or ((a.vl_original_tabela >= vl_procedimento_w) and  not exists (SELECT 1 from w_controle_proc_valor_tx w where w.nr_seq_propaci = a.nr_sequencia )))
						and	a.nr_atendimento		= nr_atendimento_w
						and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
						and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
						and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
						and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
						and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))	
						and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))										
						and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
						and	((a.dt_procedimento between dt_procedimento_w - (qt_min_regra_per_w/1440) and dt_procedimento_w) or
							 (a.dt_procedimento between dt_procedimento_w and dt_procedimento_w + (qt_min_regra_per_w/1440)));
							
						ie_existe_w:= 'N';
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and
							        (dt_procedimento_w >= vetor_acumulado_seq_w[i].dt_inicio AND dt_procedimento_w <= vetor_acumulado_seq_w[i].dt_final) then 
								ie_existe_w:= 'S';				
								exit;
							end if;
						end loop;
						-- se nao existe cria
						if (ie_existe_w = 'N') then
							x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
							vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
							vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
							vetor_acumulado_seq_w[x].qt_executada	:= 0;
							vetor_acumulado_seq_w[x].dt_procedimento:= dt_procedimento_w;
							vetor_acumulado_seq_w[x].dt_inicio := dt_procedimento_w - qt_min_regra_per_w/1440;
							vetor_acumulado_seq_w[x].dt_final := dt_procedimento_w + qt_min_regra_per_w/1440;
							
						end if;
						
						--acumula a qtde conforme a regra que foi aplicada
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and 							
							        (dt_procedimento_w >= vetor_acumulado_seq_w[i].dt_inicio AND dt_procedimento_w <= vetor_acumulado_seq_w[i].dt_final) then
								if (ie_acumulou_w = 'N') then												
									vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
									if (qt_proc_lido_w = 0) then
										vetor_acumulado_seq_w[i].qt_executada	:= qt_proc_lido_w + vetor_acumulado_seq_w[i].qt_acumulado;
									else
										vetor_acumulado_seq_w[i].qt_executada	:= vetor_acumulado_seq_w[i].qt_acumulado;
									end if;
									qt_exec_w				:= vetor_acumulado_seq_w[i].qt_executada;
									ie_acumulou_w				:= 'S';								
								end if;				
							exit;
							end if;
						end loop;

					elsif (ie_regra_execucao_w 	= 'M') then
						select	coalesce(sum(qt_procedimento),0)
						into STRICT	qt_exec_w
						from	estrutura_procedimento_v b,
							procedimento_paciente a
						where	a.cd_procedimento		= b.cd_procedimento
						and	a.ie_origem_proced		= b.ie_origem_proced
						and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
						and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
						and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
						and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
						and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
						and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
						and	a.nr_atendimento		= nr_atendimento_w
						and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
						and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
						and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
						and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
						and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))
						and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))										
						and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
						and	((a.vl_original_tabela >= vl_procedimento_w AND vl_procedimento_w <> vl_proced_ant_w) or ((a.vl_original_tabela >= vl_procedimento_w) and  not exists (SELECT 1 from w_controle_proc_valor_tx w where w.nr_seq_propaci = a.nr_sequencia)))
						and	a.dt_procedimento		between PKG_DATE_UTILS.start_of(dt_procedimento_w, 'month',0) and
										PKG_DATE_UTILS.end_of(dt_procedimento_w, 'MONTH',0);
					elsif (ie_regra_execucao_w 	= 'C') then
						select	coalesce(sum(qt_procedimento),0)
						into STRICT	qt_exec_w
						from	estrutura_procedimento_v b,
							procedimento_paciente a,
							atendimento_paciente c
						where	a.cd_procedimento		= b.cd_procedimento
						and	a.ie_origem_proced		= b.ie_origem_proced
						and	a.nr_atendimento		= c.nr_atendimento
						and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
						and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
						and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
						and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
						and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
						and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
						and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
						and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
						and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
						and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
						and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))						
						and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))						
						and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
						and	c.cd_pessoa_fisica = cd_pessoa_fisica_w
						and	((a.vl_original_tabela >= vl_procedimento_w AND vl_procedimento_w <> vl_proced_ant_w) or ((a.vl_original_tabela >= vl_procedimento_w) and  not exists (SELECT 1 from w_controle_proc_valor_tx w where w.nr_seq_propaci = a.nr_sequencia)))
						and	a.dt_procedimento		between PKG_DATE_UTILS.start_of(dt_procedimento_w, 'month',0) and
										PKG_DATE_UTILS.end_of(dt_procedimento_w, 'MONTH',0);									
					elsif (ie_regra_execucao_w 	= 'I') then
						select	coalesce(sum(qt_procedimento),0)
						into STRICT	qt_proc_lido_w
						from	estrutura_procedimento_v b,
							procedimento_paciente a,
							atendimento_paciente c
						where	a.cd_procedimento		= b.cd_procedimento
						and	a.ie_origem_proced		= b.ie_origem_proced
						and	a.nr_atendimento		= c.nr_atendimento
						and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
						and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
						and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
						and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
						and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
						and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
						and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
						and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
						and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
						and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
						and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))
					    and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))
						and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
						and	a.nr_atendimento <>  nr_atendimento_w
						and	c.cd_pessoa_fisica = cd_pessoa_fisica_w
						and	a.dt_procedimento		between PKG_DATE_UTILS.start_of(dt_procedimento_w, 'dd',0) and
										PKG_DATE_UTILS.start_of(dt_procedimento_w, 'dd',0)  + 86399/86400;
			
						-- verifica se o item ja existe no vetor  (casos de mais de uma regra)
						ie_existe_w:= 'N';
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].dt_procedimento = PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0)) then	
								RAISE NOTICE '1nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', nr_sequencia_w, qt_exec_w, ie_acumulou_w;
								ie_existe_w:= 'S';				
								exit;
							end if;
						end loop;
						-- se nao existe cria
						if (ie_existe_w = 'N') then
							x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
							vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
							vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
							vetor_acumulado_seq_w[x].qt_executada	:= 0;
							vetor_acumulado_seq_w[x].dt_procedimento:= PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0);
							RAISE NOTICE '2dt_procedimento_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].dt_procedimento, qt_exec_w, ie_acumulou_w;
						end if;
						--acumula a qtde conforme a regra que foi aplicada
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].dt_procedimento = PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0)) then
								RAISE NOTICE '3nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
								if (ie_acumulou_w = 'N') then												
									vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
									vetor_acumulado_seq_w[i].qt_executada	:= vetor_acumulado_seq_w[i].qt_acumulado;
									qt_exec_w				:= vetor_acumulado_seq_w[i].qt_executada + qt_proc_lido_w;
									ie_acumulou_w				:= 'S';								
								end if;				
								exit;
							end if;
						end loop;
						
						RAISE NOTICE '4nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
					elsif (ie_regra_execucao_w = 'E') then
					
						select	coalesce(sum(qt_procedimento),0)
						into STRICT	qt_proc_lido_w
						from	estrutura_procedimento_v b,
							procedimento_paciente a
						where	a.cd_procedimento = b.cd_procedimento
						and	a.ie_origem_proced = b.ie_origem_proced
						and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
						and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
						and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
						and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
						and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
						and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w))
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
						and	a.nr_atendimento = nr_atendimento_w
						and (a.vl_original_tabela > vl_procedimento_w)
						--and	(((a.vl_original_tabela >= vl_procedimento_w) and (vl_procedimento_w <> vl_proced_ant_w)) or ((a.vl_original_tabela >= vl_procedimento_w) and (a.nr_sequencia <> nr_seq_ant_w)))
						and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
						and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
						and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
						and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
						and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))
						and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))													
						and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))
						and	a.dt_procedimento between PKG_DATE_UTILS.start_of(dt_procedimento_w, 'dd',0) and PKG_DATE_UTILS.start_of(dt_procedimento_w, 'dd',0)  + 86399/86400
						and	((a.cd_medico_executor IS NOT NULL AND a.cd_medico_executor::text <> '') and (coalesce(cd_medico_executor,0) = cd_medico_executor_w));
						
						-- verifica se o item ja existe no vetor  (casos de mais de uma regra)
						ie_existe_w:= 'N';
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].cd_medico_executor = cd_medico_executor_w) and (vetor_acumulado_seq_w[i].dt_procedimento = PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0)) then	
								RAISE NOTICE '1nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', nr_sequencia_w, qt_exec_w, ie_acumulou_w;
								ie_existe_w:= 'S';				
								exit;
							end if;
						end loop;
						-- se nao existe cria
						if (ie_existe_w = 'N') then
							x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
							vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
							vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
							vetor_acumulado_seq_w[x].qt_executada	:= 0;
							vetor_acumulado_seq_w[x].dt_procedimento:= PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0);
							vetor_acumulado_seq_w[x].cd_medico_executor:= cd_medico_executor_w;
							RAISE NOTICE 'cd_medico_executor_w= % - qt_exec_w= % - ie_acumulou_w= %', cd_medico_executor_w, qt_exec_w, ie_acumulou_w;
						end if;
						--acumula a qtde conforme a regra que foi aplicada
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].cd_medico_executor = cd_medico_executor_w) and (vetor_acumulado_seq_w[i].dt_procedimento = PKG_DATE_UTILS.start_of(dt_procedimento_w,'dd',0)) then
								RAISE NOTICE '3nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
								if (ie_acumulou_w = 'N') then												
									vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
									if (qt_proc_lido_w = 0) then
										vetor_acumulado_seq_w[i].qt_executada	:= qt_proc_lido_w + vetor_acumulado_seq_w[i].qt_acumulado;
									else
										vetor_acumulado_seq_w[i].qt_executada	:= vetor_acumulado_seq_w[i].qt_acumulado;
									end if;
									qt_exec_w				:= vetor_acumulado_seq_w[i].qt_executada;
									ie_acumulou_w				:= 'S';								
								end if;				
								exit;
							end if;
						end loop;
						
					---- This rule is to reset the theatre charges once patient is moving out and in on the same day
					elsif (ie_regra_execucao_w = 'T') then
						begin

						select	cd_classif_setor
						into STRICT	cd_classif_setor_w
						from	setor_atendimento
						where	cd_setor_atendimento = cd_setor_procedimento_w;
						
						if (cd_classif_setor_w = 2) then
							begin
						
							open c20;
							loop
							fetch c20 into c20_w;
							EXIT WHEN NOT FOUND; /* apply on c20 */
								begin
								
								
								for x in 1..t_dept_items_w.count loop
									if (t_dept_items_w[x].dt_start <> c20_w.dt_entrada_unidade and
										 t_dept_items_w[x].dt_end <> c20_w.dt_saida_unidade) then
										qt_registro_w := qt_registro_w+1;
									end if;
								end loop;
								if (y = 1 or qt_registro_w = t_dept_items_w.count) then
									t_dept_items_w[y].dt_start 				:=  c20_w.dt_entrada_unidade;
									t_dept_items_w[y].dt_end 				:=  c20_w.dt_saida_unidade;
									t_dept_items_w[y].cd_setor_atendimento			:=  c20_w.cd_setor_atendimento;
									y := y+1;
								end if;
								end;
							end loop;
							x := 1;
							qt_count_w := 0;
							qt_registro_w:=0;
							close c20;

							for z in 1..t_dept_items_w.count loop
								begin
								if (t_dept_items_w[z].v_rule_seq.count = 0) then
									t_dept_items_w[z].v_rule_seq(1).rule_seq := nr_sequencia_w;
								end if;

								for r in 1..t_dept_items_w[z].v_rule_seq.count loop
									if (t_dept_items_w[z].v_rule_seq(r).rule_seq <> nr_sequencia_w) then
										t_dept_items_w[z].v_rule_seq(r+1).rule_seq := nr_sequencia_w;
									end if;
								end loop;


								select	coalesce(sum(qt_procedimento),0)
								into STRICT	qt_proc_lido_w
								from	estrutura_procedimento_v b,
										procedimento_paciente a
								where	a.cd_procedimento		= b.cd_procedimento
								and	a.ie_origem_proced		= b.ie_origem_proced
								and	((coalesce(cd_area_procedimento_regra_w::text, '') = '') or (b.cd_area_procedimento = cd_area_procedimento_regra_w))
								and	((coalesce(cd_especialidade_regra_w::text, '') = '') or (b.cd_especialidade = cd_especialidade_regra_w))
								and	((coalesce(cd_grupo_proc_regra_w::text, '') = '') or (b.cd_grupo_proc = cd_grupo_proc_regra_w))
								and	((coalesce(cd_procedimento_regra_w::text, '') = '') or (a.cd_procedimento = cd_procedimento_regra_w))
								and	((coalesce(ie_origem_proced_regra_w::text, '') = '') or (a.ie_origem_proced = ie_origem_proced_regra_w))	
								and 	((coalesce(cd_setor_atendimento_w::text, '') = '') or (a.cd_setor_atendimento = cd_setor_atendimento_w and
														cd_setor_atendimento_w = t_dept_items_w[z].cd_setor_atendimento))
								and 	cd_setor_procedimento_w = t_dept_items_w[z].cd_setor_atendimento							
								and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
								and	a.nr_atendimento		= nr_atendimento_w
								and (a.vl_original_tabela >= vl_procedimento_w)
								and 	((coalesce(cd_cgc_prestador_regra_w::text, '') = '') or (a.cd_cgc_prestador = cd_cgc_prestador_regra_w))
								and 	((coalesce(cd_medico_executor_regra_w::text, '') = '') or (a.cd_medico_executor = cd_medico_executor_regra_w))
								and 	((coalesce(ie_tipo_guia_regra_w::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_regra_w))
								and 	((coalesce(cd_tipo_proced_regra_w::text, '') = '') or (b.cd_tipo_procedimento = cd_tipo_proced_regra_w))
								and 	((coalesce(ie_responsavel_credito_regra_w::text, '') = '') or (a.ie_responsavel_credito = ie_responsavel_credito_regra_w))	
								and 	((coalesce(ie_lado_regra_w::text, '') = '') or (a.ie_lado = ie_lado_regra_w))
								and 	((coalesce(ie_via_acesso_regra_w::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_regra_w))

								and	dt_procedimento_w between t_dept_items_w[z].dt_start and
													  t_dept_items_w[z].dt_end;

								if (qt_proc_lido_w > 0) then
									qt_count_w := z;
									exit;
								end if;

								if (t_dept_items_w.count = z) then
									qt_exec_w := -1;
									goto surgicalMov;
								end if;
								end;
							end loop;

							-- verifica se o item ja existe no vetor  (casos de mais de uma regra)

							--ie_existe_w := 'N';

							/*for i in 1..t_dept_items_w(qt_count_w).v_acumulado_seq.count loop
							--	if	(t_dept_items_w(qt_count_w).v_acumulado_seq(i).nr_sequencia = nr_sequencia_w) and

							--		(t_dept_items_w(qt_count_w).v_acumulado_seq(i).dt_procedimento = dt_procedimento_w) then

									dbms_output.put_line('1nr_sequencia_w= ' || nr_sequencia_w || ' - ' || 'qt_exec_w= ' || qt_exec_w || ' - ' || 'ie_acumulou_w= ' || ie_acumulou_w);
									ie_existe_w:= 'S';
									exit;
								end if;
							end loop;*/


							-- se nao existe cria
							for i in 1..t_dept_items_w[qt_count_w].v_rule_seq.count loop
								if (t_dept_items_w[qt_count_w].v_rule_seq(i).rule_seq = nr_sequencia_w) then
									x := coalesce(t_dept_items_w[qt_count_w].v_rule_seq(i).v_acumulado_seq.count,0) + 1;
									t_dept_items_w[qt_count_w].v_rule_seq(i).v_acumulado_seq[x].nr_sequencia 	:= nr_sequencia_w;
									t_dept_items_w[qt_count_w].v_rule_seq(i).v_acumulado_seq[x].qt_acumulado  	:= 0;
									t_dept_items_w[qt_count_w].v_rule_seq(i).v_acumulado_seq[x].qt_executada	:= 0;
									t_dept_items_w[qt_count_w].v_rule_seq(i).v_acumulado_seq[x].dt_procedimento:= dt_procedimento_w;
								--dbms_output.put_line('2dt_procedimento_w= ' || t_dept_items_w(qt_count_w).v_acumulado_seq(x).dt_procedimento  || ' - ' || 'qt_exec_w= ' || qt_exec_w  || ' - ' || 'ie_acumulou_w= ' || ie_acumulou_w);
								end if;
							end loop;

							--acumula a qtde conforme a regra que foi aplicada
							for i in 1..t_dept_items_w[qt_count_w].v_rule_seq.count loop
								if (t_dept_items_w[qt_count_w].v_rule_seq(i).rule_seq = nr_sequencia_w) then
								--	(t_dept_items_w(qt_count_w).v_acumulado_seq(i).dt_procedimento = dt_procedimento_w) then

									
									--dbms_output.put_line('3nr_sequencia_w= ' || t_dept_items_w(qt_count_w).v_acumulado_seq(x).qt_acumulado  || ' - ' || 'qt_exec_w= ' || qt_exec_w  || ' - ' || 'ie_acumulou_w= ' || ie_acumulou_w);
									
									if (ie_acumulou_w = 'N') then												
								--t_dept_items_w(qt_count_w).v_acumulado_seq(i).qt_acumulado	:= t_dept_items_w(qt_count_w).v_acumulado_seq(i).qt_acumulado + 1;

								--t_dept_items_w(qt_count_w).v_acumulado_seq(i).qt_executada	:= t_dept_items_w(qt_count_w).v_acumulado_seq(i).qt_acumulado;
										qt_exec_w							:= t_dept_items_w[qt_count_w].v_rule_seq(i).v_acumulado_seq.count;
										ie_acumulou_w							:= 'S';								
									end if;
									exit;
								end if;
							end loop;
							--dbms_output.put_line('4nr_sequencia_w= ' || t_dept_items_w(qt_count_w).v_acumulado_seq(x).qt_acumulado  || ' - ' || 'qt_exec_w= ' || qt_exec_w  || ' - ' || 'ie_acumulou_w= ' || ie_acumulou_w);
							
							end;
						else
							qt_exec_w := -1;
						end if;
						end;	
					end if;
					<<surgicalMov>>
					
					RAISE NOTICE 'qt_exec_w= % qt_exec_min_w= % qt_exec_max_w= %', qt_exec_w, qt_exec_min_w, qt_exec_max_w;
					
					if (qt_exec_w between qt_exec_min_w and coalesce(qt_exec_max_w, qt_exec_w)) then
					
					
						tx_procedimento_w	:= tx_proc_w;
						tx_custo_operacional_w	:= tx_custo_oper_w;
						tx_medico_w		:= tx_medico_proc_w;
						tx_anestesia_w		:= tx_anestesia_proc_w;
						ie_regra_w		:= 'S';
						ie_acumulou_w		:= 'N';
						nr_seq_regra_qtde_exec_w:= nr_sequencia_w;												
						
					else
						tx_procedimento_w	:= 100;
						tx_custo_operacional_w	:= null;
						tx_medico_w		:= null;
						tx_anestesia_w		:= null;
						nr_seq_regra_qtde_exec_w:= null;																		
					end if;
			
					end;
					end if;
				end;
			end loop;
			close c02;
			
			end;
		end loop;
		close c01;

		if (ie_regra_w		= 'S') then		
			open c04;
			loop
			fetch c04 into	
				nr_seq_partic_w;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				begin
					if ((tx_procedimento_w > 0) or (tx_anestesia_w > 0)) then 							
						if (coalesce(tx_anestesia_original_w, 100) <> coalesce(coalesce(tx_anestesia_w, tx_procedimento_w), 100)) then
							update 	procedimento_participante
							set	vl_participante	= ((dividir(vl_participante, coalesce(tx_anestesia_original_w, 100))) * coalesce(coalesce(tx_anestesia_w, tx_procedimento_w), 100)),
								vl_conta	= ((dividir(vl_conta, coalesce(tx_anestesia_original_w, 100))) * coalesce(coalesce(tx_anestesia_w, tx_procedimento_w), 100)), 
								pr_faturar  = coalesce(tx_anestesia_w, tx_procedimento_w)
							where	nr_sequencia	= nr_seq_procedimento_w
							and	nr_seq_partic	= nr_seq_partic_w;						
						end if;			
					end if;									
				end;
			end loop;
			close c04;
			
			RAISE NOTICE 'Seq_Proc= % ie_regra_w= %', nr_seq_procedimento_w, ie_regra_w;
		
			RAISE NOTICE 'Taxa= %', tx_procedimento_w;
			vl_custo_operacional_w 		:= ((coalesce(tx_custo_operacional_w, tx_procedimento_w) * vl_custo_operacional_w)/100);
			vl_medico_w 				:= ((coalesce(tx_medico_w,tx_procedimento_w) * vl_medico_w)/100);
			vl_anestesista_w 			:= ((coalesce(tx_anestesia_w,tx_procedimento_w) * vl_anestesista_w)/100);
			--vl_procedimento_w		:= ((tx_procedimento_w * vl_procedimento_w)/100);
			if (ie_aplica_taxa_filme_w = 'S') then
				vl_materiais_w 		:= ((tx_procedimento_w * vl_materiais_w)/100);
			end if;
					
			if (ie_classificacao_w = '1') then
				vl_procedimento_w:= coalesce(vl_custo_operacional_w,0) + coalesce(vl_medico_w,0) + coalesce(vl_materiais_w,0);
			else
				vl_procedimento_w:= ((tx_procedimento_w * vl_procedimento_w)/100);
			end if;		
			
			/* ROTINA DE ARREDONDAMENTO, USADO PELO CONVENIO IPE   --->>  INICIO  <<----- */

			if (ie_regra_arredondamento_tx_w = 'S') then
			
				select	max(ie_arredondamento)
				into STRICT	ie_tipo_rounded_w
				from	convenio_estabelecimento
				where	cd_convenio	  	= cd_convenio_w
				and	cd_estabelecimento	= cd_estabelecimento_W;
			
				if (ie_tipo_rounded_w = 'R') then		
					select 	obter_regra_arredondamento(cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_w, dt_procedimento_w, 'P', 1)
					into STRICT	ie_tipo_rounded_w
					;		
				end if;
			
				if (ie_tipo_rounded_w IS NOT NULL AND ie_tipo_rounded_w::text <> '') then		
					vl_procedimento_w := arredondamento(vl_procedimento_w, 2, ie_tipo_rounded_w);
					vl_custo_operacional_w := arredondamento(vl_custo_operacional_w, 2, ie_tipo_rounded_w);
					vl_medico_w := arredondamento(vl_medico_w, 2, ie_tipo_rounded_w);
					vl_anestesista_w := arredondamento(vl_anestesista_w, 2, ie_tipo_rounded_w);
					vl_materiais_w := arredondamento(vl_materiais_w, 2, ie_tipo_rounded_w);
				end if;
			
			end if;
			/* ROTINA DE ARREDONDAMENTO, USADO PELO CONVENIO IPE   --->>  FIM  <<----- */

			update	procedimento_paciente
			set	vl_procedimento		= vl_procedimento_w,
				vl_medico	 		= vl_medico_w,
				vl_anestesista		= vl_anestesista_w,
				vl_custo_operacional 	= vl_custo_operacional_w,
				tx_procedimento		= tx_procedimento_w,
				tx_custo_oper_qt	= tx_custo_operacional_w,
				tx_medico			= tx_medico_w,
				tx_anestesia		= coalesce(tx_anestesia_w, tx_procedimento_w),
				vl_materiais		= vl_materiais_w,
				nr_seq_regra_qtde_exec	= nr_seq_regra_qtde_exec_w				
			where	nr_sequencia		= nr_seq_procedimento_w;
			
			RAISE NOTICE 'vl_procedimento_w= %', vl_procedimento_w;
			
			ie_ajuste_proc_w	:= 'S';
			
			CALL Atualizar_Valor_Proc_Seq(nr_seq_procedimento_w);
		end if;

		end;
		
		vl_proced_ant_w	:= vl_original_tabela_w;
		nr_seq_ant_w	:= nr_seq_procedimento_w;
		
	end loop;
	close c03;

	if (ie_param_tx_w = 'E') then	
		if (coalesce(tx_proc_via_princ_w,0) <> 0) then
		
			/* ROTINA DE ARREDONDAMENTO, USADO PELO CONVENIO IPE   --->>  INICIO  <<----- */

			if (ie_regra_arredondamento_tx_w = 'S') then
				begin
				select	max(ie_arredondamento)
				into STRICT	ie_tipo_rounded_w
				from	convenio_estabelecimento
				where	cd_convenio	  	= cd_convenio_w
				and	cd_estabelecimento	= cd_estabelecimento_W;
			
				if (ie_tipo_rounded_w = 'R') then		
					select 	obter_regra_arredondamento(cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_w, dt_procedimento_w, 'P', 1)
					into STRICT	ie_tipo_rounded_w
					;		
				end if;
			
				if (ie_tipo_rounded_w IS NOT NULL AND ie_tipo_rounded_w::text <> '') then	
					
					select (tx_proc_via_princ_w * dividir(vl_procedimento, tx_procedimento)),
						(tx_proc_via_princ_w * dividir(vl_medico, tx_procedimento)),
						(tx_proc_via_princ_w * dividir(vl_custo_operacional, tx_procedimento)),
						CASE WHEN ie_aplica_tx_filme_w='S' THEN (tx_proc_via_princ_w * dividir(vl_materiais, tx_procedimento))  ELSE vl_materiais END
					into STRICT	vl_procedimento_ww,
						vl_medico_ww,
						vl_custo_operacional_ww,
						vl_materiais_ww
					from	procedimento_paciente
					where	nr_sequencia 	= nr_seq_proc_via_princ_w;
					
					vl_procedimento_ww := arredondamento(vl_procedimento_ww, 2, ie_tipo_rounded_w);
					vl_custo_operacional_ww := arredondamento(vl_custo_operacional_ww, 2, ie_tipo_rounded_w);
					vl_medico_ww := arredondamento(vl_medico_ww, 2, ie_tipo_rounded_w);
					vl_materiais_ww := arredondamento(vl_materiais_ww, 2, ie_tipo_rounded_w);	
					
					update	procedimento_paciente
					set	tx_procedimento 	= tx_proc_via_princ_w,
						vl_procedimento 	= vl_procedimento_ww,
						vl_medico 		= vl_medico_ww,
						vl_custo_operacional 	= vl_custo_operacional_ww,
						vl_materiais 		= vl_materiais_ww
					where	nr_sequencia 		= nr_seq_proc_via_princ_w;
				else
				
					begin
					update	procedimento_paciente
					set	tx_procedimento 	= tx_proc_via_princ_w,
						vl_procedimento 	= (tx_proc_via_princ_w * dividir(vl_procedimento, tx_procedimento)),
						vl_medico 		= (tx_proc_via_princ_w * dividir(vl_medico, tx_procedimento)),
						vl_custo_operacional 	= (tx_proc_via_princ_w * dividir(vl_custo_operacional, tx_procedimento)),
						vl_materiais 		= CASE WHEN ie_aplica_tx_filme_w='S' THEN (tx_proc_via_princ_w * dividir(vl_materiais, tx_procedimento))  ELSE vl_materiais END
					where	nr_sequencia 		= nr_seq_proc_via_princ_w;
					end;
				end if;				
				
				end;
			else
				begin
				
				update	procedimento_paciente
				set	tx_procedimento 	= tx_proc_via_princ_w,
					vl_procedimento 	= (tx_proc_via_princ_w * dividir(vl_procedimento, tx_procedimento)),
					vl_medico 		= (tx_proc_via_princ_w * dividir(vl_medico, tx_procedimento)),
					vl_custo_operacional 	= (tx_proc_via_princ_w * dividir(vl_custo_operacional, tx_procedimento)),
					vl_materiais 		= CASE WHEN ie_aplica_tx_filme_w='S' THEN (tx_proc_via_princ_w * dividir(vl_materiais, tx_procedimento))  ELSE vl_materiais END
				where	nr_sequencia 		= nr_seq_proc_via_princ_w;
				end;
			end if;
			/* ROTINA DE ARREDONDAMENTO, USADO PELO CONVENIO IPE   --->>  FIM  <<----- */

		
		end if;
	end if;
end;
end loop;
close c00;

if (ie_ajuste_proc_w	= 'S') and (ie_regra_w = 'S')then
	CALL atualizar_valor_proc(nr_interno_conta_p);
	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_taxa_qtde_exec_valor ( nr_interno_conta_p bigint) FROM PUBLIC;

