-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_gerar_livro_aux_intercam ( nm_usuario_p text, cd_empresa_p bigint, cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp) AS $body$
DECLARE


cd_conta_contabil_w		conta_contabil.cd_conta_contabil%type;
dt_inicio_w			timestamp;
dt_fim_w			timestamp;
dt_inicio_ant_w			timestamp;
dt_fim_ant_w			timestamp;
nr_contador_w			bigint := 0;


arq_texto_w			utl_file.file_type;
ds_erro_w			varchar(255);
ds_local_w			varchar(255);
nm_arquivo_w			varchar(255);
ds_mensagem_w			varchar(255);

c_linha CURSOR FOR
	SELECT	nm_prestador || ';' ||
		cd_cpf_cnpj || ';' ||
		ds_tipo_prestador || ';' ||
		nr_titulo || ';' ||
		dt_vencimento || ';' ||
		cd_guia || ';' ||
		dt_realizacao || ';' ||
		ds_origem || ';' ||
		cd_carteira || ';' ||
		nm_beneficiario || ';' ||
		vl_evento || ';' ||
		dt_contabilizacao ds_linha
	from	w_ctb_livro_aux_intercam
	where	nm_usuario	= nm_usuario_p;

c_cred_digitacao CURSOR FOR
	SELECT	m.cd_conta_credito,
		sum(m.vl_movimento) vl_movimento
	from   	ctb_movimento m,
		lote_contabil l
	where  	m.nr_lote_contabil = l.nr_lote_contabil
	and	m.cd_conta_credito in ('829','830','831','832')
	and    	m.dt_movimento between dt_inicio_w and dt_fim_w
	and	l.cd_tipo_lote_contabil = 12
	group by cd_conta_credito;

vet_cred_dig	c_cred_digitacao%ROWTYPE;

c_deb_digitacao CURSOR FOR
	SELECT 	m.cd_conta_debito,
		sum(vl_movimento) vl_movimento
	from   	ctb_movimento m,
		lote_contabil l
	where  	m.nr_lote_contabil = l.nr_lote_contabil
	and	m.cd_conta_debito in ('829','830','831','832')
	and    	m.dt_movimento between dt_inicio_w and dt_fim_w
	and	l.cd_tipo_lote_contabil = 12
	group by cd_conta_debito;

vet_deb_dig	c_deb_digitacao%ROWTYPE;

c_contas_prov_pagto CURSOR FOR
	SELECT	cd_conta_contabil
	from	conta_contabil
	where	cd_conta_contabil in ('2129','6659');

BEGIN

delete	FROM w_ctb_livro_aux_intercam
where	cd_estabelecimento	= cd_estabelecimento_p
and	nm_usuario		= nm_usuario_p;
commit;

dt_inicio_w	:= trunc(dt_inicial_p,'month');
dt_fim_w	:= fim_mes(dt_final_p);

dt_inicio_ant_w	:= PKG_DATE_UTILS.ADD_MONTH(dt_inicio_w,-1,0);
dt_fim_ant_w	:= fim_mes(PKG_DATE_UTILS.ADD_MONTH(dt_fim_w,-1,0));

nr_contador_w := 0;

-- Crédito relativo aos lotes de digitação
open c_cred_digitacao;
loop
fetch c_cred_digitacao into
	vet_cred_dig;
EXIT WHEN NOT FOUND; /* apply on c_cred_digitacao */
	begin
	nr_contador_w	:= nr_contador_w + 1;

	insert into w_ctb_livro_aux_intercam(nm_usuario,
		cd_estabelecimento,
		dt_atualizacao,
		nm_prestador,
		cd_cpf_cnpj,
		ds_tipo_prestador,
		nr_titulo,
		dt_vencimento,
		cd_guia,
		dt_realizacao,
		ds_origem,
		cd_carteira,
		nm_beneficiario,
		vl_evento,
		dt_contabilizacao,
		cd_conta_contabil,
		ie_debito_credito,
		ds_classif_diops)
	values (nm_usuario_p,
		cd_estabelecimento_p,
		clock_timestamp(),
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		vet_cred_dig.vl_movimento,
		dt_inicio_w,
		vet_cred_dig.cd_conta_credito,
		'C',
		null);

	if (mod(nr_contador_w,100) = 0) then
		commit;
	end if;
	end;
end loop;
close c_cred_digitacao;

nr_contador_w := 0;

-- Débito relativo aos lotes de digitação
open c_deb_digitacao;
loop
fetch c_deb_digitacao into
	vet_deb_dig;
EXIT WHEN NOT FOUND; /* apply on c_deb_digitacao */
	begin
	nr_contador_w := nr_contador_w + 1;

	insert into w_ctb_livro_aux_intercam(nm_usuario,
		cd_estabelecimento,
		dt_atualizacao,
		nm_prestador,
		cd_cpf_cnpj,
		ds_tipo_prestador,
		nr_titulo,
		dt_vencimento,
		cd_guia,
		dt_realizacao,
		ds_origem,
		cd_carteira,
		nm_beneficiario,
		vl_evento,
		dt_contabilizacao,
		cd_conta_contabil,
		ie_debito_credito,
		ds_classif_diops)
	values (nm_usuario_p,
		cd_estabelecimento_p,
		clock_timestamp(),
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		vet_deb_dig.vl_movimento,
		dt_inicio_w,
		vet_deb_dig.cd_conta_debito,
		'D',
		null);

	if (mod(nr_contador_w,100) = 0) then
		commit;
	end if;

	end;
end loop;
close c_deb_digitacao;

nr_contador_w := 0;

open c_contas_prov_pagto;
loop
fetch c_contas_prov_pagto into
	cd_conta_contabil_w;
EXIT WHEN NOT FOUND; /* apply on c_contas_prov_pagto */
	begin
	nr_contador_w := nr_contador_w + 1;

	-- Débito relativo ao Pagamento de Produção Médica
	CALL ctb_gerar_livro_prod_med(nm_usuario_p, cd_empresa_p, cd_estabelecimento_p, cd_conta_contabil_w,dt_inicio_ant_w,dt_fim_ant_w,'D');

	-- Crédito relativo ao Pagamento de Produção Médica
	CALL ctb_gerar_livro_prod_med(nm_usuario_p, cd_empresa_p, cd_estabelecimento_p, cd_conta_contabil_w,dt_inicio_w,dt_fim_w,'C');

	end;
end loop;
close c_contas_prov_pagto;

commit;

nm_arquivo_w	:= obter_desc_expressao(779078) || ' ' || to_char(clock_timestamp(),'ddmmyyyy') || to_char(clock_timestamp(),'hh24') || to_char(clock_timestamp(),'mi') || to_char(clock_timestamp(),'ss') ||
			nm_usuario_p || '.xlsx';

SELECT * FROM obter_evento_utl_file(1, null, ds_local_w, ds_erro_w) INTO STRICT ds_local_w, ds_erro_w;

arq_texto_w := utl_file.fopen(ds_local_w,nm_arquivo_w,'W'); --arq_texto_w := utl_file.fopen('/srvfs03/FINANCEIRO/TASY/',nm_arquivo_w,'W');
for vetl in c_linha loop
	begin
	utl_file.put_line(arq_texto_w,vetl.ds_linha);
	utl_file.fflush(arq_texto_w);
	end;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_gerar_livro_aux_intercam ( nm_usuario_p text, cd_empresa_p bigint, cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp) FROM PUBLIC;

