-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_cig_golderberg_sug (nr_atendimento_p bigint, nr_prescricao_p bigint, nr_seq_proced_p bigint, nr_seq_horario_p bigint, nr_seq_glicemia_p bigint, dt_hgt_p timestamp, qt_hgt_p bigint, ie_sintomatico_p text, cd_material_p bigint, qt_material_p bigint, nm_usuario_p text, nr_seq_cig_p INOUT bigint) AS $body$
DECLARE


nr_seq_anterior_w		bigint;
nr_seq_cig_atual_w		bigint;
nr_seq_hipo_w			bigint;
NR_SEQ_PROT_GLIC_W		bigint;
nr_sequencia_w		bigint;
nr_cig_atend_w		bigint;
nr_cig_w			bigint;
dt_cig_w			timestamp;
dt_proximo_controle_w	timestamp;
dt_prev_controle_w		timestamp;
dt_controle_ant_w		timestamp;
dt_atualizacao_w		timestamp		:= clock_timestamp();
qt_variacao_hgt_w		integer	:= 0;
qt_var_hgt_ref_w		integer	:= 0;
qt_min_variacao_w		bigint	:= 0;
nr_seq_protocolo_w		bigint	:= 0;
pr_variacao_w			bigint;
pr_manutencao_w			double precision;
qt_glicemia_formula_w		double precision;
QT_DIFERENCA_FATOR_W		double precision;
qt_min_interv_fut_w		smallint	:= 60;
qt_variacao_hor_w		smallint	:= 1;
qt_bolus_calc_w		double precision	:= 0;
qt_bolus_adm_w		double precision	:= 0;
qt_veloc_calc_w		real	:= 0;
qt_veloc_adm_w		real	:= 0;
qt_glicose_calc_w		real	:= 0;
qt_glicose_adm_w		real	:= 0;
ds_sugestao_w			varchar(2000):= '';
ds_sug_w			varchar(2000):= '';
ds_observacao_w			varchar(255)	:= '';

ie_status_cig_w			varchar(1);
varGravar_vel_adm_w		varchar(1);
ie_bolus_w			varchar(1)	:= 'N';
ie_fator_multiplicador_w	varchar(15);
qt_hgt_ant_w			integer	:= 0;
qt_fator_multipl_ant_w		double precision;
qt_fator_multipl_w		double precision;
qt_hgt_hipo_w			real	:= 0;
qt_veloc_atual_w		real	:= 0;
qt_veloc_anterior_w		real	:= 0;
qt_veloc_hipo_w			real	:= 0;
qt_glicose_atual_w		real	:= 0;
qt_minuto_w			smallint	:= 60;
qt_registros_w 		bigint;

ie_estavel_w			varchar(1)	:= 'N';
qt_min_glic_w			integer;

nr_seq_glicemia_w		bigint;

cd_material_w			integer 	:= null;
qt_material_w			double precision 	:= null;

ds_acao_w			varchar(2000):= '';
qt_insulina_fluxo_w		double precision;
ie_acao_insulina_w		varchar(15);
qt_insulina_bolus_w		double precision;
qt_glicose_w			double precision;
nr_seq_apresentacao_ant_w	bigint;
nr_seq_apresentacao_w		bigint;
VarIePorcUltFluxReduzir_w	varchar(1);
ie_registrar_sv_w			varchar(1);
nr_seq_assinatura_w			bigint;
ie_gera_adm_w				varchar(1);
ie_intervalo_editavel_w pep_protocolo_glicemia.ie_protocolo_livre%type;
cd_intervalo_proc_w   intervalo_prescricao.cd_intervalo%type;
ie_operacao_w   intervalo_prescricao.ie_operacao%type;
qt_operacao_w   intervalo_prescricao.qt_operacao%type;

c01 CURSOR FOR
SELECT	a.ds_sugestao,
	substr(obter_valor_dominio(3826,a.ie_acao_insulina),1,255),
	a.qt_insulina_fluxo,
	a.ie_acao_insulina,
	a.qt_insulina_bolus,
	a.qt_glicose,
	a.pr_manutencao,
	a.nr_seq_apresentacao,
	a.qt_glicemia_formula,
	a.QT_DIFERENCA_FATOR
from	prot_glic_manutencao a,
		pep_protocolo_glicemia b
where	qt_hgt_p between a.qt_glic_inic and a.qt_glic_fim
and	((a.nr_seq_protocolo = nr_seq_prot_glic_w) or
	((coalesce(ie_fator_multiplicador_w,'N') = 'N') and (coalesce(nr_seq_prot_glic_w,0) = 0)))
and  b.ie_situacao = 'A'	
and  b.nr_sequencia = a.nr_seq_protocolo	
and	((qt_registros_w = 1 AND a.ie_tipo_medicao	= 'N') or (a.ie_tipo_medicao	= 'A'))	 
and (coalesce(a.nr_seq_superior::text, '') = '' or a.nr_seq_superior = nr_seq_apresentacao_ant_w)
and	abs(coalesce(pr_variacao_w,1)) between abs(coalesce(a.pr_variacao,0)) and abs(coalesce(a.pr_variacao_final,999))
order by CASE WHEN coalesce(a.nr_seq_superior::text, '') = '' THEN 1  ELSE 0 END  + CASE WHEN coalesce(a.pr_variacao::text, '') = '' THEN 0  ELSE 1 END  + CASE WHEN coalesce(a.pr_variacao_final::text, '') = '' THEN 0  ELSE 1 END  desc,
	a.nr_seq_apresentacao desc;

c02 CURSOR FOR
SELECT	a.ds_sugestao,
	substr(obter_valor_dominio(3826,a.ie_acao_insulina),1,255),
	a.qt_insulina_fluxo,
	a.ie_acao_insulina,
	a.qt_insulina_bolus,
	a.qt_glicose,
	a.pr_manutencao,
	a.nr_seq_apresentacao,
	a.qt_glicemia_formula,
	a.QT_DIFERENCA_FATOR
from	prot_glic_manutencao a,
		pep_protocolo_glicemia b
where	qt_hgt_p between a.qt_glic_inic and a.qt_glic_fim
and	((a.nr_seq_protocolo = nr_seq_prot_glic_w)  or
	 ((coalesce(ie_fator_multiplicador_w,'N') = 'N') and (coalesce(nr_seq_prot_glic_w,0) = 0)))
and  b.ie_situacao = 'A'	
and  b.nr_sequencia = a.nr_seq_protocolo	
and	((qt_registros_w = 1 AND a.ie_tipo_medicao	= 'N') or (a.ie_tipo_medicao	= 'D'))	 
and (coalesce(a.nr_seq_superior::text, '') = '' or a.nr_seq_superior = nr_seq_apresentacao_ant_w)
and	abs(coalesce(pr_variacao_w,1)) between abs(coalesce(a.pr_variacao,0)) and abs(coalesce(a.pr_variacao_final,999))
order by CASE WHEN coalesce(a.nr_seq_superior::text, '') = '' THEN 1  ELSE 0 END  + CASE WHEN coalesce(a.pr_variacao::text, '') = '' THEN 0  ELSE 1 END  + CASE WHEN coalesce(a.pr_variacao_final::text, '') = '' THEN 0  ELSE 1 END  desc,
	a.nr_seq_apresentacao desc;

BEGIN

VarIePorcUltFluxReduzir_w := Obter_Param_Usuario(1113, 643, Obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, VarIePorcUltFluxReduzir_w);
varGravar_vel_adm_w := Obter_Param_Usuario(1113, 656, Obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, varGravar_vel_adm_w);
ie_registrar_sv_w := obter_param_usuario(1113, 478, Obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_registrar_sv_w);


if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (qt_hgt_p IS NOT NULL AND qt_hgt_p::text <> '') then
	/* obter parametros */

	select	coalesce(max(obter_valor_param_usuario(1113, 21, obter_perfil_ativo, nm_usuario_p, obter_estab_atend(nr_atendimento_p))), 10)
	into STRICT	qt_min_glic_w
	;

	/* validar data cig */

	if (dt_hgt_p IS NOT NULL AND dt_hgt_p::text <> '') then
		dt_cig_w := dt_hgt_p;
	else
		dt_cig_w := dt_atualizacao_w;
	end if;

	/* consistir data medicao cig */

	CALL consistir_data_medicao_cig(nr_atendimento_p, nr_seq_glicemia_p, dt_cig_w);
	
	if (nr_seq_horario_p > 0) then
		select	max(b.nr_seq_prot_glic),
                max(b.cd_intervalo)
		into STRICT	nr_seq_prot_glic_w,
                cd_intervalo_proc_w
		from	prescr_proc_hor a,
			prescr_procedimento b
		where	a.nr_sequencia = nr_seq_horario_p
		and	a.nr_prescricao = b.nr_prescricao
		and	a.nr_seq_procedimento = b.nr_sequencia;
	elsif (nr_prescricao_p > 0) then
		select	max(b.nr_seq_prot_glic),
                max(b.cd_intervalo)
		into STRICT	nr_seq_prot_glic_w,
                cd_intervalo_proc_w
		from	prescr_proc_hor a,
			prescr_procedimento b
		where	a.nr_prescricao	 	= nr_prescricao_p
		and	a.nr_seq_procedimento	= nr_seq_proced_p
		and	a.nr_prescricao = b.nr_prescricao
		and	a.nr_seq_procedimento = b.nr_sequencia;
	end if;

    select  coalesce(max(ie_protocolo_livre), 'N')
    into STRICT    ie_intervalo_editavel_w
    from    pep_protocolo_glicemia
    where   nr_sequencia = nr_seq_prot_glic_w;

    select  max(ie_operacao),
            coalesce(max(qt_operacao), 1)
    into STRICT    ie_operacao_w,
            qt_operacao_w
    from    intervalo_prescricao
    where   cd_intervalo = cd_intervalo_proc_w;

    if (ie_operacao_w = 'H' and ie_intervalo_editavel_w = 'N') then
        qt_minuto_w := qt_operacao_w * 60;
    end if;
	
	if (nr_seq_prot_glic_w > 0) then
		select	max(ie_fator_multiplicador)
		into STRICT	ie_fator_multiplicador_w
		from	pep_protocolo_glicemia
		where	nr_sequencia	= nr_seq_prot_glic_w;
	end if;
	
	if (coalesce(ie_fator_multiplicador_w,'N') = 'S') then
		/* validar situacoes especificas hgt */

		if (qt_hgt_p < 50) then
			qt_glicose_calc_w	:= 25;
			ds_sugestao_w		:= wheb_mensagem_pck.get_texto(307075, null);
								-- Interromper a infusao de insulina, administrar Glicose 50% 5 ampolas de 10 ml (50ml = 25g) IV ou Glicose 25% 10 ampolas de 10 ml (100ml = 25g) IV. Rechecar glicemia a cada 10 - 15 minutos. Quando a glicemia atingir ou ultrapassar 90 mg%, aguardar 1 hora e rechecar glicemia. Persistindo maior ou igual a 90 mg%, reiniciar a infusao com metade da dose mais recente de insulina.
			qt_minuto_w		:= 15;
		elsif (qt_hgt_p >= 50) and (qt_hgt_p <= 69) then
			if (ie_sintomatico_p = 'S') then
				qt_glicose_calc_w	:= 25;
				ds_sugestao_w		:= wheb_mensagem_pck.get_texto(307078, null);
									-- Interromper a infusao de insulina, administrar Glicose 50% 5 ampolas de 10 ml (50ml = 25g) IV ou Glicose 25% 10 ampolas de 10 ml (100ml = 25g) IV. Rechecar glicemia a cada 15 minutos. Quando a glicemia atingir ou ultrapassar 90 mg%, aguardar 1 hora e rechecar glicemia. Persistindo maior ou igual a 90 mg%, reiniciar a infusao com 75% da dose mais recente de insulina.
				qt_minuto_w		:= 15;
			else
				qt_glicose_calc_w	:= 12.5;
				ds_sugestao_w		:= wheb_mensagem_pck.get_texto(307080, null);
									-- Interromper a infusao de insulina, considerar a administracao de Glicose 50% 2,5 ampolas de 10 ml (25ml = 12,5g) IV ou Glicose 25% 5 ampolas de 10 ml (50ml = 12,5g) IV ou eventualmente VO (1 copo de suco frutas de 240ml, p.ex). Rechecar glicemia a cada 15 - 30 minutos. Quando a glicemia atingir ou ultrapassar 90 mg%, aguardar 1 hora e rechecar glicemia. Persistindo maior ou igual a 90 mg%, reiniciar a infusao com 75% da dose mais recente de insulina.
				qt_minuto_w		:= 30;
			end if;
		elsif (qt_hgt_p >= 500) then
			ds_sugestao_w := wheb_mensagem_pck.get_texto(307081, null); -- O medico responsavel devera ser consultado para instrucoes especificas.
		end if;
	end if;
	
	/* obter registros cadastrados */

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_anterior_w
	from	atendimento_cig
	where	nr_atendimento = nr_atendimento_p
	and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia)
	and	ie_status_cig <> 'T';

	/* obter cig atendimento */

	if (nr_seq_anterior_w = 0) then
		select	coalesce(max(nr_cig_atend),0) + 1
		into STRICT	nr_cig_atend_w
		from	atendimento_cig
		where	nr_atendimento = nr_atendimento_p
		and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia);
	else
		select	max(nr_cig_atend)
		into STRICT	nr_cig_atend_w
		from	atendimento_cig
		where	nr_atendimento = nr_atendimento_p
		and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia)
		and	ie_status_cig <> 'T';
	end if;
	

	/* obter cig  e quantidade de registros*/

	select	coalesce(max(nr_cig),0) + 1,
			count(nr_sequencia)
	into STRICT	nr_cig_w,
			qt_registros_w
	from	atendimento_cig
	where	nr_atendimento = nr_atendimento_p
	and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia)
	and	ie_status_cig <> 'T';
	
	/* validar material */

	if (cd_material_p > 0) and (qt_material_p > 0) then
		cd_material_w	:= cd_material_p;
		qt_material_w := qt_material_p;
	end if;

	/* calcular e gerar valores */

	if (nr_seq_anterior_w = 0) then
		/* gerar glicemia atendimento */

		if (coalesce(nr_seq_glicemia_p,0) = 0) then
			nr_seq_glicemia_w := gerar_atend_glicemia(nr_atendimento_p, null, null, null, nm_usuario_p, nr_seq_glicemia_w);
		
		elsif (coalesce(nr_seq_glicemia_p,0) > 0) then
			nr_seq_glicemia_w := nr_seq_glicemia_p;

		else
			--'Erro ao vincular a glicemia!#@#@'
			CALL wheb_mensagem_pck.exibir_mensagem_abort(173812);	
			
		end if;

		/* atualizar glicemia atendimento */

		if (coalesce(nr_seq_glicemia_w,0) > 0) then
			update	atend_glicemia
			set	ie_status_glic	= 'N',
				dt_inicio_glic	= clock_timestamp(),
				cd_pf_inic_glic	= substr(obter_dados_usuario_opcao(nm_usuario_p,'C'),1,10)
			where	nr_sequencia		= nr_seq_glicemia_w;
		end if;
		
		/* calcular bolus */

		
		qt_bolus_calc_w := arredondar_valores_cig(dividir(qt_hgt_p,70));
		
		if (qt_hgt_p >= 150) then
			ie_bolus_w := 'S';
		end if;

		/* calcular proximo controle */

		dt_proximo_controle_w := dt_cig_w + qt_minuto_w/1440;

		select	coalesce(max(qt_insulina_fluxo),0),
			coalesce(max(qt_insulina_bolus),0),
			max(ds_sugestao)
		into STRICT	qt_insulina_fluxo_w,
			qt_insulina_bolus_w,
			ds_sug_w
		from	prot_glic_entrada
		where	qt_hgt_p between qt_glic_inic and qt_glic_fim
		and		coalesce(NR_SEQ_PROTOCOLO,0) = coalesce(nr_seq_prot_glic_w,coalesce(NR_SEQ_PROTOCOLO,0));
		
		if (coalesce(ie_fator_multiplicador_w,'N') = 'N') then

			ds_sugestao_w	:= wheb_mensagem_pck.get_texto(307084,	'QT_INSULINA_FLUXO_W=' || qt_insulina_fluxo_w || ';' ||
																	'QT_INSULINA_BOLUS_W=' || qt_insulina_bolus_w);
							-- Iniciar a infusao de insulina em #@QT_INSULINA_FLUXO_W#@ UI/h, com "bolus" associado de #@QT_INSULINA_BOLUS_W#@ UI.
			if (ds_sug_w IS NOT NULL AND ds_sug_w::text <> '') then
				ds_sugestao_w := ds_sugestao_w || chr(10) || ds_sug_w;
			end if;
		end if;
		

		/* obter sequencia */

		select	nextval('atendimento_cig_seq')
		into STRICT	nr_sequencia_w
		;
		
		if (coalesce(ie_fator_multiplicador_w,'N') = 'S') then
			select	max(qt_fator_multipl),
				max(qt_glicemia_formula),
				max(ie_acao_insulina),
				coalesce(max(QT_INSULINA_BOLUS),0)
			into STRICT	qt_fator_multipl_w,
				qt_glicemia_formula_w,
				ie_acao_insulina_w,
				qt_insulina_bolus_w
			from	prot_glic_manutencao
			where	qt_hgt_p between qt_glic_inic and qt_glic_fim
			and	nr_seq_protocolo = nr_seq_prot_glic_w
			and	ie_tipo_medicao	in ('A','N')
			and (coalesce(nr_seq_superior::text, '') = '' or nr_seq_superior = nr_seq_apresentacao_ant_w)
			and	abs(coalesce(pr_variacao_w,1)) between abs(coalesce(pr_variacao,0)) and abs(coalesce(pr_variacao_final,999));
			
			if (qt_fator_multipl_w > 0) then
				qt_insulina_fluxo_w	:= (qt_hgt_p - qt_glicemia_formula_w) * qt_fator_multipl_w;
			end if;
		end if;		

		insert into atendimento_cig(
			nr_sequencia,
			nr_cig,
			dt_proximo_controle,
			nr_atendimento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_controle,
			qt_hgt,
			qt_variacao_hgt,
			qt_var_hgt_ref,
			qt_min_var,
			qt_min_interv_fut,
			qt_bolus_calc,
			qt_bolus_adm,
			qt_veloc_calc,
			qt_veloc_adm,
			qt_glicose_calc,
			qt_glicose_adm,
			ds_sugestao,
			ds_observacao,
			dt_prev_controle,
			dt_limite_ant,
			dt_limite_pos,
			ie_status_cig,
			nr_cig_atend,
			nr_seq_glicemia,
			nr_seq_horario,
			cd_material,
			qt_material,
			qt_fator_multipl
			)
		values (
			nr_sequencia_w,
			nr_cig_w,
			dt_proximo_controle_w,
			nr_atendimento_p,
			dt_atualizacao_w,
			nm_usuario_p,
			dt_atualizacao_w,
			nm_usuario_p,
			dt_cig_w,
			qt_hgt_p,
			qt_variacao_hgt_w,
			CASE WHEN qt_var_hgt_ref_w=0 THEN  null  ELSE qt_var_hgt_ref_w END ,
			CASE WHEN qt_min_variacao_w=0 THEN  null  ELSE qt_min_variacao_w END ,
			qt_minuto_w,
			qt_insulina_bolus_w,
			0,
			qt_insulina_fluxo_w,
			CASE WHEN varGravar_vel_adm_w='S' THEN qt_insulina_fluxo_w  ELSE 0 END ,
			qt_glicose_calc_w,
			qt_glicose_calc_w,
			ds_sugestao_w,
			ds_observacao_w,
			null,
			null,
			null,
			'N',
			nr_cig_atend_w,
			nr_seq_glicemia_w,
			nr_seq_horario_p,
			cd_material_w,
			qt_material_w,
			qt_fator_multipl_w);

	else
		/* consistir intervalo medicoes CIG */

		consistir_interv_medicao_cig(nr_atendimento_p, dt_cig_w);

		/* obter dados medicao anterior */

		select	coalesce(max(ie_status_cig),'N'),
			coalesce(max(qt_hgt),0),
			coalesce(max(CASE WHEN coalesce(qt_veloc_adm,0)=0 THEN qt_veloc_calc  ELSE qt_veloc_adm END ),0),
			coalesce(max(qt_glicose_calc),0),
			max(dt_proximo_controle),
			max(dt_controle),
			coalesce(max(qt_min_interv_fut),0),
			coalesce(max(nr_seq_glicemia),0),
			max(nr_seq_apresent),
			max(qt_fator_multipl)
		into STRICT	ie_status_cig_w,
			qt_hgt_ant_w,
			qt_veloc_atual_w,
			qt_glicose_atual_w,
			dt_prev_controle_w,
			dt_controle_ant_w,
			qt_min_interv_fut_w,
			nr_seq_glicemia_w,
			nr_seq_apresentacao_ant_w,
			qt_fator_multipl_ant_w
		from	atendimento_cig
		where	nr_sequencia = nr_seq_anterior_w;

		if (ie_status_cig_w not in ('N','R')) then
			qt_bolus_calc_w := arredondar_valores_cig(dividir(qt_hgt_p,70));
			if (qt_hgt_p >= 150) then
				ie_bolus_w := 'S';
			end if;
		end if;
		nr_seq_cig_atual_w := nr_seq_anterior_w;
		qt_veloc_anterior_w := qt_veloc_atual_w;
		
		if (coalesce(qt_veloc_atual_w,0) = 0) and (coalesce(nr_seq_cig_atual_w,0) > 0) then
			
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_cig_atual_w
			from	atendimento_cig
			where	nr_atendimento = nr_atendimento_p
			and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia)
			and 	nr_sequencia	< nr_seq_cig_atual_w
			and	ie_status_cig	<> 'T'
			and 	coalesce(qt_veloc_calc,0) > 0;
			
		
			Select	coalesce(max(qt_veloc_calc),0)
			into STRICT	qt_veloc_atual_w
			from	atendimento_cig
			where	nr_sequencia	= nr_seq_cig_atual_w;
		end if;
	
		/* calcular variacao hgt */

		qt_variacao_hgt_w := qt_hgt_p - qt_hgt_ant_w;

		/* calcular variacao hgt horaria */

		qt_min_variacao_w := trunc((dt_cig_w - dt_controle_ant_w) * 1440);
		if (qt_min_variacao_w <= 119) then
			qt_variacao_hor_w := 1;
		elsif (qt_min_variacao_w <= 179) then
			qt_variacao_hor_w := 2;
		elsif (qt_min_variacao_w <= 239) then
			qt_variacao_hor_w := 3;
		else
			qt_variacao_hor_w := 4;
		end if;
		qt_var_hgt_ref_w := dividir(qt_variacao_hgt_w, qt_variacao_hor_w);
		
		select	max(a.nr_seq_prot_glic)
		into STRICT	nr_seq_protocolo_w
		from	prescr_proc_hor b,
			prescr_procedimento a
		where	b.nr_seq_procedimento	= a.nr_sequencia
		and	b.nr_prescricao		= a.nr_prescricao
		and	b.nr_sequencia		= nr_seq_horario_p;
		
		pr_variacao_w	:= ((somente_numero(qt_hgt_ant_w - qt_hgt_p)) * 100) / qt_hgt_ant_w;
		--pr_variacao_w	:= (somente_numero(qt_hgt_p) * 100) / qt_hgt_ant_w;
		
		if (qt_hgt_p > qt_hgt_ant_w) then
		
			open c01;
			loop
			fetch c01 into	
				ds_sug_w,
				ds_acao_w,
				qt_insulina_fluxo_w,
				ie_acao_insulina_w,
				qt_insulina_bolus_w,
				qt_glicose_w,
				pr_manutencao_w,
				nr_seq_apresentacao_w,
				qt_glicemia_formula_w,
				qt_diferenca_fator_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin
				ds_sug_w := ds_sug_w;
				ds_acao_w :=  ds_acao_w;
				qt_insulina_fluxo_w := qt_insulina_fluxo_w;
				ie_acao_insulina_w := ie_acao_insulina_w;
				qt_insulina_bolus_w := qt_insulina_bolus_w;
				qt_glicose_w := qt_glicose_w;
				pr_manutencao_w :=  pr_manutencao_w;
				nr_seq_apresentacao_w := nr_seq_apresentacao_w;
				qt_glicemia_formula_w	:= qt_glicemia_formula_w;
				end;
			end loop;
			close c01;
			
		
			if (coalesce(qt_insulina_fluxo_w,0) > 0) or
				((coalesce(pr_manutencao_w,0) > 0) and (ie_acao_insulina_w = 'R')) or
				((VarIePorcUltFluxReduzir_w = 'S') and (coalesce(pr_manutencao_w,0) > 0)) or (ie_acao_insulina_w = 'M')then
			
				if (ie_acao_insulina_w = 'A') then
					qt_veloc_calc_w := qt_veloc_atual_w + qt_insulina_fluxo_w;
					ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307098, 'QT_INSULINA_FLUXO_W=' || qt_insulina_fluxo_w); -- o fluxo vigente de insulina em #@QT_INSULINA_FLUXO_W#@ UI/h. 
				elsif (ie_acao_insulina_w = 'D') then				
					if (VarIePorcUltFluxReduzir_w = 'S') then
						qt_veloc_calc_w := (qt_veloc_atual_w * (pr_manutencao_w/100));
						ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307100, 'PR_MANUTENCAO_W=' || pr_manutencao_w); -- a infusao de insulina em #@PR_MANUTENCAO_W#@% da anterior.
					else
						qt_veloc_calc_w := qt_veloc_atual_w - qt_insulina_fluxo_w;
						ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307098, 'QT_INSULINA_FLUXO_W=' || qt_insulina_fluxo_w); -- o fluxo vigente de insulina em #@QT_INSULINA_FLUXO_W#@ UI/h. 	
					end if;
				elsif (ie_acao_insulina_w = 'R') then
					qt_veloc_calc_w := (qt_veloc_atual_w * (pr_manutencao_w/100));
					ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307100, 'PR_MANUTENCAO_W=' || pr_manutencao_w); -- a infusao de insulina em #@PR_MANUTENCAO_W#@% da anterior.
				else
					qt_veloc_calc_w := qt_veloc_atual_w;
								
					ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307103, null) || ' '; -- o fluxo vigente de insulina.
				end if;
			elsif (coalesce(ie_acao_insulina_w,'X') = 'I') then
				ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307103, null) || ' '; -- o fluxo vigente de insulina.
				qt_veloc_calc_w := -1;
						
			end if;

			if (coalesce(qt_insulina_bolus_w,0) > 0) then
				ds_sugestao_w	:= ds_sugestao_w || chr(13) ||
							wheb_mensagem_pck.get_texto(307107, 'QT_INSULINA_BOLUS_W=' || qt_insulina_bolus_w); -- Administrar "bolus" de insulina de #@QT_INSULINA_BOLUS_W#@ UI. 
				qt_bolus_calc_w := arredondar_valores_cig(qt_insulina_bolus_w);
				ie_bolus_w := 'S';
			end if;
	
			if (coalesce(qt_glicose_w,0) > 0) then
				ds_sugestao_w		:= ds_sugestao_w || chr(13) ||
								wheb_mensagem_pck.get_texto(307112, 'QT_GLICOSE_W=' || qt_glicose_w); -- Administrar "bolus" de glicose de #@QT_GLICOSE_W#@ gramas. 
				qt_glicose_calc_w	:= qt_glicose_w;
			end if;

			if (ds_sug_w IS NOT NULL AND ds_sug_w::text <> '') then
				ds_sugestao_w	:= ds_sugestao_w || chr(13) || ds_sug_w;
			end if;
			
		elsif (qt_hgt_p <= qt_hgt_ant_w) then
		
		
			open c02;
			loop
			fetch c02 into	
				ds_sug_w,
				ds_acao_w,
				qt_insulina_fluxo_w,
				ie_acao_insulina_w,
				qt_insulina_bolus_w,
				qt_glicose_w,
				pr_manutencao_w,
				nr_seq_apresentacao_w,
				qt_glicemia_formula_w,
				qt_diferenca_fator_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				ds_sug_w := ds_sug_w;
				ds_acao_w :=  ds_acao_w;
				qt_insulina_fluxo_w := qt_insulina_fluxo_w;
				ie_acao_insulina_w := ie_acao_insulina_w;
				qt_insulina_bolus_w := qt_insulina_bolus_w;
				qt_glicose_w := qt_glicose_w;
				pr_manutencao_w :=  pr_manutencao_w;
				nr_seq_apresentacao_w := nr_seq_apresentacao_w;
				qt_glicemia_formula_w	:= qt_glicemia_formula_w;
				end;
			end loop;
			close c02;
							




			if (coalesce(qt_insulina_fluxo_w,0) > 0) or 
				((coalesce(pr_manutencao_w,0) > 0) and (ie_acao_insulina_w = 'R')) or
				((VarIePorcUltFluxReduzir_w = 'S') and (coalesce(pr_manutencao_w,0) > 0)) or (ie_acao_insulina_w = 'M') then
			
				if (ie_acao_insulina_w = 'A') then
					qt_veloc_calc_w := qt_veloc_atual_w + qt_insulina_fluxo_w;
					ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307098, 'QT_INSULINA_FLUXO_W=' || qt_insulina_fluxo_w); -- o fluxo vigente de insulina em #@QT_INSULINA_FLUXO_W#@ UI/h. 
				elsif (ie_acao_insulina_w = 'D') then
					if (VarIePorcUltFluxReduzir_w = 'S') then
						qt_veloc_calc_w := (qt_veloc_atual_w * (pr_manutencao_w/100));
						ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307100, 'PR_MANUTENCAO_W=' || pr_manutencao_w); -- a infusao de insulina em #@PR_MANUTENCAO_W#@% da anterior.			
					else
						qt_veloc_calc_w := qt_veloc_atual_w - qt_insulina_fluxo_w;
						ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307098, 'QT_INSULINA_FLUXO_W=' || qt_insulina_fluxo_w); -- o fluxo vigente de insulina em #@QT_INSULINA_FLUXO_W#@ UI/h. 
					end if;
				elsif (ie_acao_insulina_w = 'R') then
					qt_veloc_calc_w := (qt_veloc_atual_w * (pr_manutencao_w/100));
					ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307100, 'PR_MANUTENCAO_W=' || pr_manutencao_w); -- a infusao de insulina em #@PR_MANUTENCAO_W#@% da anterior.
				else
					qt_veloc_calc_w := qt_veloc_atual_w;
					ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307103, null) || ' '; -- o fluxo vigente de insulina.
										
				end if;	
			elsif (coalesce(ie_acao_insulina_w,'X') = 'I') then
				ds_sugestao_w	:= chr(13) || ds_acao_w|| ' ' || wheb_mensagem_pck.get_texto(307103, null) || ' '; -- o fluxo vigente de insulina.
				qt_veloc_calc_w := -1;	
								
			end if;

			if (coalesce(qt_insulina_bolus_w,0) > 0) then
				ds_sugestao_w	:= ds_sugestao_w || chr(13) ||
							wheb_mensagem_pck.get_texto(307107, 'QT_INSULINA_BOLUS_W=' || qt_insulina_bolus_w); -- Administrar "bolus" de insulina de #@QT_INSULINA_BOLUS_W#@ UI
				qt_bolus_calc_w := arredondar_valores_cig(qt_insulina_bolus_w);
				ie_bolus_w := 'S';
			end if;
	
			if (coalesce(qt_glicose_w,0) > 0) then
				ds_sugestao_w		:= ds_sugestao_w || chr(13) ||
								wheb_mensagem_pck.get_texto(307112, 'QT_GLICOSE_W=' || qt_glicose_w); -- Administrar "bolus" de glicose de #@QT_GLICOSE_W#@ gramas. 
				qt_glicose_calc_w	:= qt_glicose_w;
			end if;
			if (ds_sug_w IS NOT NULL AND ds_sug_w::text <> '') then
				ds_sugestao_w	:= ds_sugestao_w || chr(13) || ds_sug_w || '.';
			end if;
		end if;
		
	if (coalesce(ie_fator_multiplicador_w,'N') = 'N') then
		/* obter faixa hgt */

		if (coalesce(qt_veloc_calc_w,0) = 0) then
			
			if (qt_hgt_ant_w <= 69) and (qt_hgt_p >= 90) then
				/* hipoglicemia */

				qt_veloc_calc_w := 0;
				qt_glicose_calc_w := 0;

			elsif (qt_hgt_p >= 90) and (qt_hgt_ant_w >= 90) and (qt_glicose_atual_w = 0) and (qt_veloc_atual_w = 0) then
				/* transicao hipoglicemia x cig / obter dose recente */

				select	coalesce(max(nr_sequencia),0)
				into STRICT	nr_seq_hipo_w
				from	atendimento_cig
				where	nr_atendimento = nr_atendimento_p
				and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia)
				and	qt_veloc_calc > 0;

				/* transicao hipoglicemia x cig / obter dados dose recente */

				if (nr_seq_hipo_w > 0) then
					select	qt_hgt,
						qt_veloc_calc
					into STRICT	qt_hgt_hipo_w,
						qt_veloc_hipo_w
					from	atendimento_cig
					where	nr_sequencia = nr_seq_hipo_w;

					/* transicao hipoglicemia x cig / gerar dosagem atual */

					if (qt_hgt_hipo_w < 50) then
						qt_veloc_calc_w := round((dividir(qt_veloc_hipo_w * 50, 100))::numeric,1);
					else
						qt_veloc_calc_w := round((dividir(qt_veloc_hipo_w * 75, 100))::numeric,1);
					end if;
				end if;

			elsif (qt_hgt_p >= 70) and (qt_hgt_p <= 89) then
				/* obter variacao hgt */

				if (qt_var_hgt_ref_w > 0) then
					qt_veloc_calc_w := qt_veloc_atual_w;
					if (coalesce(ds_sugestao_w::text, '') = '') then
						qt_veloc_calc_w := qt_veloc_anterior_w;
						ds_sugestao_w := wheb_mensagem_pck.get_texto(307124, null); -- Nao alterar a velocidade de infusao.
					end if;

				elsif (qt_var_hgt_ref_w <= 0) and (qt_var_hgt_ref_w >= -20) then
					/* obter variacao delta (decremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w - 0.5;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1.5;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 2;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 3;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 4;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w - 5;
					end if;

				elsif (qt_var_hgt_ref_w < -20) then
					if (coalesce(ds_sugestao_w::text, '') = '') then
						ds_sugestao_w	:= wheb_mensagem_pck.get_texto(307126, null); -- Pausar a infusao durante 30 minutos e, apos, reiniciar de acordo com o valor sugerido.
					end if;
					qt_minuto_w	:= 30;
					/* obter variacao 2delta (decremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w - 2;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 3;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 4;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 6;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 8;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w - 10;
					end if;	
				end if;

			elsif (qt_hgt_p >= 90) and (qt_hgt_p <= 119) then
				/* obter variacao hgt */

				if (qt_var_hgt_ref_w > 20) then
					/* obter variacao delta (incremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w + 0.5;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w + 1;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 1.5;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 2;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 3;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 4;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w + 5;
					end if;

				elsif (qt_var_hgt_ref_w <= 20) and (qt_var_hgt_ref_w >= -20) then
					qt_veloc_calc_w := qt_veloc_atual_w;
					if (coalesce(ds_sugestao_w::text, '') = '') then
						qt_veloc_calc_w := qt_veloc_anterior_w;
						ds_sugestao_w := wheb_mensagem_pck.get_texto(307124, null); -- Nao alterar a velocidade de infusao.
					end if;

				elsif (qt_var_hgt_ref_w <= -21) and (qt_var_hgt_ref_w >= -40) then
					/* obter variacao delta (decremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w - 0.5;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1.5;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 2;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 3;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 4;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w - 5;
					end if;

				elsif (qt_var_hgt_ref_w < -40) then
					if (coalesce(ds_sugestao_w::text, '') = '') then
						ds_sugestao_w	:= wheb_mensagem_pck.get_texto(307126, null); -- Pausar a infusao durante 30 minutos e, apos, reiniciar de acordo com o valor sugerido.
					end if;
					qt_minuto_w := 30;
					/* obter variacao 2delta (decremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w - 2;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 3;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 4;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 6;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 8;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w - 10;
					end if;				
				end if;

			elsif (qt_hgt_p >= 120) and (qt_hgt_p <= 179) then
				/* obter variacao hgt */

				if (qt_var_hgt_ref_w > 40) then
					/* obter variacao 2delta (incremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w + 1;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w + 2;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 3;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 4;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 6;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 8;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w + 10;
					end if;

				elsif (qt_var_hgt_ref_w >= 0) and (qt_var_hgt_ref_w <= 40) then
					/* obter variacao delta (incremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w + 0.5;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w + 1;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 1.5;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 2;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 3;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 4;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w + 5;
					end if;

				elsif (qt_var_hgt_ref_w <= -1) and (qt_var_hgt_ref_w >= - 40) then
					qt_veloc_calc_w := qt_veloc_atual_w;
					if (coalesce(ds_sugestao_w::text, '') = '') then
						qt_veloc_calc_w := qt_veloc_anterior_w;
						ds_sugestao_w := wheb_mensagem_pck.get_texto(307124, null); -- Nao alterar a velocidade de infusao.
					end if;

				elsif (qt_var_hgt_ref_w <= -41) and (qt_var_hgt_ref_w >= -80) then
					/* obter variacao delta (decremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w - 0.5;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1.5;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 2;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 3;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 4;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w - 5;
					end if;

				elsif (qt_var_hgt_ref_w < -80) then
					if (coalesce(ds_sugestao_w::text, '') = '') then	
						ds_sugestao_w := wheb_mensagem_pck.get_texto(307126, null); -- Pausar a infusao durante 30 minutos e, apos, reiniciar de acordo com o valor sugerido.
					end if;
					qt_minuto_w := 30;
					/* obter variacao 2delta (decremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w - 2;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 3;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 4;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 6;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 8;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w - 10;
					end if;
				end if;

			elsif (qt_hgt_p >= 180) then
				/* obter variacao hgt */

				if (qt_var_hgt_ref_w > 0) then
					/* obter variacao 2delta (incremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w + 1;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w + 2;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 3;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 4;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 6;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 8;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w + 10;
					end if;

				elsif (qt_var_hgt_ref_w <= 0) and (qt_var_hgt_ref_w >= -40) then
					/* obter variacao delta (incremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w + 0.5;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w + 1;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 1.5;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 2;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 3;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w + 4;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w + 5;
					end if;

				elsif (qt_var_hgt_ref_w <= -41) and (qt_var_hgt_ref_w >= -80) then
					qt_veloc_calc_w := qt_veloc_atual_w;
					if (coalesce(ds_sugestao_w::text, '') = '') then
						qt_veloc_calc_w := qt_veloc_anterior_w;
						ds_sugestao_w := wheb_mensagem_pck.get_texto(307124, null); -- Nao alterar a velocidade de infusao.
					end if;

				elsif (qt_var_hgt_ref_w <= -81) and (qt_var_hgt_ref_w >= -120) then
					/* obter variacao delta (decremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w - 0.5;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1.5;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 2;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 3;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 4;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w - 5;
					end if;

				elsif (qt_var_hgt_ref_w < - 120) then
					if (coalesce(ds_sugestao_w::text, '') = '') then
						ds_sugestao_w	:= wheb_mensagem_pck.get_texto(307126, null); -- Pausar a infusao durante 30 minutos e, apos, reiniciar de acordo com o valor sugerido.
					end if;
					qt_minuto_w := 30;
					/* obter variacao 2delta (decremento) */

					if (qt_veloc_atual_w < 3) then
						qt_veloc_calc_w := qt_veloc_atual_w - 1;
					elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
						qt_veloc_calc_w := qt_veloc_atual_w - 2;
					elsif (qt_veloc_atual_w >= 6.5) and (qt_veloc_atual_w <= 9.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 3;
					elsif (qt_veloc_atual_w >= 10) and (qt_veloc_atual_w <= 14.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 4;
					elsif (qt_veloc_atual_w >= 15) and (qt_veloc_atual_w <= 19.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 6;
					elsif (qt_veloc_atual_w >= 20) and (qt_veloc_atual_w <= 24.5) then
						qt_veloc_calc_w := qt_veloc_atual_w - 8;
					elsif (qt_veloc_atual_w >= 25) then
						qt_veloc_calc_w := qt_veloc_atual_w - 10;
					end if;
				end if;
			end if;
		end if;
	end if;
	/* obter sequencia */

	select	nextval('atendimento_cig_seq')
	into STRICT	nr_sequencia_w
	;
	
	/* validar velocidade calculada */

	if (qt_veloc_calc_w < 0) or (coalesce(qt_veloc_calc_w::text, '') = '') then
		qt_veloc_calc_w := 0;
	else
		qt_veloc_calc_w := round((qt_veloc_calc_w)::numeric,1);--arredondar_valores_cig(qt_veloc_calc_w);
		if (qt_hgt_p >= 70) and (qt_veloc_calc_w = 0) and (coalesce(ie_acao_insulina_w,'X') <> 'I') and (qt_veloc_calc_w <> qt_veloc_anterior_w) then
			ds_sugestao_w	:= null;
		end if;
	end if;

	/* calcular proximo controle */

	if (qt_minuto_w >= 60) and (qt_min_interv_fut_w > qt_minuto_w) then
		qt_minuto_w := qt_min_interv_fut_w;
	end if;
	dt_proximo_controle_w := dt_cig_w + qt_minuto_w/1440;
	
	if (coalesce(ie_fator_multiplicador_w,'N') = 'S') then
		qt_fator_multipl_w	:= qt_fator_multipl_ant_w;
		if (ie_acao_insulina_w	= 'A') then
			qt_fator_multipl_w	:= qt_fator_multipl_ant_w + qt_diferenca_fator_w;
		elsif (ie_acao_insulina_w	= 'D') then
			qt_fator_multipl_w	:= qt_fator_multipl_ant_w - qt_diferenca_fator_w;
		end if;
		qt_veloc_calc_w	:= (qt_hgt_p - qt_glicemia_formula_w) * qt_fator_multipl_w;
	end if;
	

	insert into atendimento_cig(
			nr_sequencia,
			nr_cig,
			dt_proximo_controle,
			nr_atendimento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_controle,
			qt_hgt,
			qt_variacao_hgt,
			qt_var_hgt_ref,
			qt_min_var,
			qt_min_interv_fut,
			qt_bolus_calc,
			qt_bolus_adm,
			qt_veloc_calc,
			qt_veloc_adm,
			qt_glicose_calc,
			qt_glicose_adm,
			ds_sugestao,
			ds_observacao,
			dt_prev_controle,
			dt_limite_ant,
			dt_limite_pos,
			ie_status_cig,
			nr_cig_atend,
			nr_seq_glicemia,
			nr_seq_horario,
			cd_material,
			qt_material,
			nr_seq_apresent,
			qt_fator_multipl
			)
		values (
			nr_sequencia_w,
			nr_cig_w,
			dt_proximo_controle_w,
			nr_atendimento_p,
			dt_atualizacao_w,
			nm_usuario_p,
			dt_atualizacao_w,
			nm_usuario_p,
			dt_cig_w,
			qt_hgt_p,
			qt_variacao_hgt_w,
			qt_var_hgt_ref_w,
			qt_min_variacao_w,
			qt_minuto_w,
			CASE WHEN ie_bolus_w='S' THEN  qt_bolus_calc_w  ELSE 0 END ,
			CASE WHEN varGravar_vel_adm_w='S' THEN qt_bolus_calc_w  ELSE 0 END ,
			coalesce(qt_veloc_calc_w,0),
			CASE WHEN varGravar_vel_adm_w='S' THEN qt_veloc_calc_w  ELSE 0 END ,
			qt_glicose_calc_w,
			qt_glicose_calc_w,
			ds_sugestao_w,
			ds_observacao_w,
			dt_prev_controle_w,
			dt_prev_controle_w - qt_min_glic_w / 1440,
			dt_prev_controle_w + qt_min_glic_w / 1440,
			CASE WHEN ie_status_cig_w='R' THEN  ie_status_cig_w  ELSE 'N' END ,
			nr_cig_atend_w,
			CASE WHEN nr_seq_glicemia_w=0 THEN null  ELSE nr_seq_glicemia_w END ,
			nr_seq_horario_p,
			cd_material_w,
			qt_material_w,
			nr_seq_apresentacao_w,
			qt_fator_multipl_w
			);

	/* consistir glicemia estavel */

	ie_estavel_w := consistir_glicemia_estavel(nr_atendimento_p, nr_seq_glicemia_w, nr_cig_atend_w, ie_estavel_w);
	if (ie_estavel_w = 'S') then
		select	ds_sugestao
		into STRICT	ds_sugestao_w
		from	atendimento_cig
		where	nr_sequencia = nr_sequencia_w;

		if (coalesce(ds_sugestao_w::text, '') = '') then
			update	atendimento_cig
			set	ds_sugestao = wheb_mensagem_pck.get_texto(307128, null)
							/*	O valor da glicemia encontra-se estavel ha tres medidas consecutivas.
								Considerar um aumento no intervalo de tempo entre as medidas de glicemia.	*/
			where	nr_sequencia = nr_sequencia_w;
		else
			update	atendimento_cig
			set	ds_sugestao = ds_sugestao || chr(10) || chr(10) || wheb_mensagem_pck.get_texto(307132, null)
																/*	Atencao: O valor da glicemia encontra-se estavel ha tres medidas consecutivas.
																	Considerar um aumento no intervalo de tempo entre as medidas de glicemia.	*/
			where	nr_sequencia = nr_sequencia_w;
		end if;
	end if;
	end if;
	/* gerar evento */

	CALL gerar_alteracao_cig(nr_sequencia_w, 3, ' ', nm_usuario_p);

	/* gerar horario */

	CALL gerar_horario_cig(nr_seq_glicemia_w, nr_sequencia_w, nm_usuario_p);
	
	if (ie_registrar_sv_w = 'S') then
	
		select	max(nr_seq_assinatura)
		into STRICT	nr_seq_assinatura_w
		from	prescr_mat_alteracao
		where	nr_prescricao 		= nr_prescricao_p
		and		nr_seq_procedimento = nr_seq_proced_p
		and		nr_seq_horario_proc	= nr_seq_horario_p;
		
		if (ie_gera_adm_w = 'S') then
			qt_glicose_adm_w :=  qt_glicose_w;
		else
			qt_glicose_adm_w := null;
		end if;

		CALL ADEP_gerar_SV_Glicemia(nr_atendimento_p, qt_hgt_p, nm_usuario_p, qt_glicose_calc_w, dt_cig_w, nr_seq_assinatura_w, null, null, qt_glicose_adm_w);
	end if;
	
end if;

nr_seq_cig_p := nr_sequencia_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_cig_golderberg_sug (nr_atendimento_p bigint, nr_prescricao_p bigint, nr_seq_proced_p bigint, nr_seq_horario_p bigint, nr_seq_glicemia_p bigint, dt_hgt_p timestamp, qt_hgt_p bigint, ie_sintomatico_p text, cd_material_p bigint, qt_material_p bigint, nm_usuario_p text, nr_seq_cig_p INOUT bigint) FROM PUBLIC;

