-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE colunas AS (nm_coluna_w varchar(255));
CREATE TYPE regra_anestesia AS (dt_inicial_vigencia ageint_anestesia_turno.dt_inicial_vigencia%type,
								dt_final_vigencia 	ageint_anestesia_turno.dt_final_vigencia%type,
								hr_inicial			ageint_anestesia_turno.hr_inicial%type,
								hr_final			ageint_anestesia_turno.hr_final%type,
								dt_dia_semana		ageint_anestesia_turno.dt_dia_semana%type,
								ie_exclusivo_anest	ageint_anestesia_turno.ie_exclusivo_anest%type,
								cd_estabelecimento	ageint_anestesia_turno.cd_estabelecimento%type,
								cd_pessoa_fisica	ageint_anestesia_turno.cd_pessoa_fisica%type);
CREATE TYPE regra_agecons AS (nr_sequencia 	agenda_consulta_regra.nr_sequencia%type,
				qt_permissao	agenda_consulta_regra.qt_permissao%type,
				ie_periodo	agenda_consulta_regra.ie_periodo%type,
				ds_mensagem	agenda_consulta_regra.ds_mensagem%type,
				ie_todas_classif agenda_consulta_regra.ie_todas_classif%type,
				hr_inicial	agenda_consulta_regra.hr_inicial%type,
				hr_final	agenda_consulta_regra.hr_final%type,
				ie_todos_convenios agenda_consulta_regra.ie_todos_convenios%type,
				ie_mesmo_pac	agenda_consulta_regra.ie_mesmo_pac%type,
				qt_idade_min	agenda_consulta_regra.qt_idade_min%type,
				qt_idade_max	agenda_consulta_regra.qt_idade_max%type,
				ie_classif_agenda agenda_consulta_regra.ie_classif_agenda%type,
				ie_dia_semana	agenda_consulta_regra.ie_dia_semana%type,
				cd_convenio	agenda_consulta_regra.cd_convenio%type,
				cd_Agenda	agenda_consulta_regra.cd_Agenda%type,
				cd_perfil	agenda_consulta_regra.cd_perfil%type);
CREATE TYPE regra_agecons_conv AS (nr_sequencia			regra_agecons_convenio.nr_sequencia%type,
				cd_convenio			regra_agecons_convenio.cd_convenio%type,
				cd_agenda			regra_agecons_convenio.cd_agenda%type,
				cd_categoria			regra_agecons_convenio.cd_categoria%type,
				cd_plano_convenio		regra_agecons_convenio.cd_plano_convenio%type,
				cd_setor_atendimento		regra_agecons_convenio.cd_setor_atendimento%type,
				ie_forma_consiste_setor		regra_agecons_convenio.ie_forma_consiste_setor%type,
				cd_especialidade		regra_agecons_convenio.cd_especialidade%type,
				cd_medico			regra_agecons_convenio.cd_medico%type,
				ie_primeiro_agendamento		regra_agecons_convenio.ie_primeiro_agendamento%type,
				cd_pessoa_fisica		regra_agecons_convenio.cd_pessoa_fisica%type,
				dt_inicial_vigencia		regra_agecons_convenio.dt_inicial_vigencia%type,
				dt_final_vigencia		regra_agecons_convenio.dt_final_vigencia%type,
				ie_dia_semana			regra_agecons_convenio.ie_dia_semana%type,
				hr_inicial			regra_agecons_convenio.hr_inicial%type,
				hr_final			regra_agecons_convenio.hr_final%type,
				cd_municipio_ibge		regra_agecons_convenio.cd_municipio_ibge%type,
				ie_permite			regra_agecons_convenio.ie_permite%type);
CREATE TYPE regra_turno_exame AS (nr_sequencia		ageint_turno_exame.nr_sequencia%type,
				nr_seq_proc_interno	ageint_turno_exame.nr_seq_proc_interno%type,
				nr_seq_grupo_ageint	ageint_turno_exame.nr_seq_grupo_ageint%type,
				cd_pessoa_fisica	ageint_turno_exame.cd_pessoa_fisica%type,
				dt_inicial_vigencia	ageint_turno_exame.dt_inicial_vigencia%type,
				dt_final_vigencia	ageint_turno_exame.dt_final_vigencia%type,
				hr_inicial		ageint_turno_exame.hr_inicial%type,
				hr_final		ageint_turno_exame.hr_final%type,
				dt_dia_semana		ageint_turno_exame.dt_dia_semana%type,
				ie_sexo			ageint_turno_exame.ie_sexo%type,
				qt_idade_min		ageint_turno_exame.qt_idade_min%type,
				qt_idade_max		ageint_turno_exame.qt_idade_max%type,
				ie_consiste_marcacao	ageint_turno_exame.ie_consiste_marcacao%type,
				qt_dias_validade	ageint_turno_exame.qt_dias_validade%type,
				nr_seq_topografia	ageint_turno_exame.nr_seq_topografia%type);
CREATE TYPE exame_adic_item AS (nr_seq_proc_interno		ageint_exame_adic_item.nr_seq_proc_interno%type,
				nr_seq_topografia		ageint_exame_adic_item.nr_seq_topografia%type);
CREATE TYPE regra_turno_usuario AS (nr_sequencia		smallint);


CREATE OR REPLACE PROCEDURE gerar_horarios_ageint ( dt_agenda_p timestamp, nm_usuario_p text, nr_seq_ageint_p bigint, cd_estabelecimento_p bigint, ds_agendas_montadas_p text default null, ds_hor_min_p INOUT bigint DEFAULT NULL, ds_hor_max_p INOUT bigint DEFAULT NULL, ds_hor_min_livre_p INOUT bigint DEFAULT NULL, ds_hor_max_livre_p INOUT bigint DEFAULT NULL, ie_prazo_maximo_p text default 'N') AS $body$
DECLARE


TYPE t_ageint_horarios_usuario IS TABLE OF ageint_horarios_usuario%ROWTYPE INDEX BY integer;
TYPE t_del_ageint IS TABLE OF ageint_horarios_usuario.nr_sequencia%TYPE INDEX BY integer;
TYPE vetor IS TABLE OF colunas INDEX BY integer;

/*vetor para regras de anestesia*/

TYPE vetor_regra_anestesia IS TABLE OF regra_anestesia INDEX BY integer;
TYPE vetor_regra_agecons IS TABLE OF regra_agecons INDEX BY integer;
TYPE vetor_regra_agecons_conv IS TABLE OF regra_agecons_conv INDEX BY integer;	
TYPE vetor_turno_exame IS TABLE OF regra_turno_exame INDEX BY integer;
TYPE vetor_exame_adic_item IS TABLE OF exame_adic_item INDEX BY integer;--nao e usuado para nada esse valor, porem e obrigatorio criar um record
TYPE vetor_turno_usuario IS TABLE OF regra_turno_usuario INDEX BY integer;
TYPE vetor_truno_sequencia IS TABLE OF vetor_turno_usuario INDEX BY integer;

vetor_w			vetor;
ds_horario_w		timestamp;
dt_fim_vigencia_convenio_w		timestamp;
cd_tipo_Agenda_w	bigint;
ie_status_agenda_w	varchar(2);
ivet			bigint;
ind			bigint;
ds_comando_w		varchar(4000);
ds_sep_bv_w		varchar(50);
ds_parametros_w		varchar(4000);
nr_seq_agenda_w		agenda_paciente.nr_sequencia%TYPE;
nr_minuto_duracao_w	bigint;
cd_agenda_w		bigint;
ie_feriado_w		varchar(1);
ie_sobra_horario_w	varchar(1);
ds_retorno_w		varchar(255);
nr_Seq_Ageint_lib_w	bigint;
cd_turno_w		varchar(1);
nr_seq_ageint_item_w	bigint;
dt_encaixe_w		timestamp;
cd_turno_ww		varchar(1);
nr_minuto_duracao_ww	bigint;
cd_pessoa_fisica_w	varchar(10);
cd_medico_encaixe_w	varchar(10);

ie_gera_hor_w		varchar(1);
qt_encaixe_w		bigint;
nr_seq_turno_w		bigint;
nr_seq_turno_esp_w	bigint;
ie_turno_medico_w	varchar(1);
nr_seq_grupo_agecons_w	bigint;
nr_seq_grupo_agexam_w	bigint;
ie_classif_agenda_w	varchar(5);

ie_apres_hr_medico_w	varchar(1);
ie_restringe_classif_w	varchar(1);
ds_considera_marc_hor_w varchar(1);
ie_considera_proc_w     varchar(1);
ds_considera_proc_w     varchar(1);
ie_valida_caren_cober_w varchar(1);
nr_exp_erro_w bigint;
dt_carencia_w timestamp;
ds_msg_macro_w varchar(4000);

dt_age_ant_w		timestamp;
nr_minuto_dur_ant_w	bigint;

ie_status_agenda_controle_w	varchar(5);
cd_agenda_ant_w		bigint;
nr_seq_proc_interno_w	bigint;
cd_procedimento_w	agenda_integrada_item.cd_procedimento%type;
ie_origem_proced_w	agenda_integrada_item.ie_origem_proced%type;
ie_turno_exame_w	varchar(1);
ie_anestesia_w		varchar(1);
cd_anestesista_w	varchar(10);
qt_marc_anestesista_w	bigint;
ie_gera_hor_anest_w	varchar(1)	:= 'S';
nr_seq_medico_regra_w	bigint;
ie_classif_item_w	varchar(5);

qt_marc_medico_w	bigint;
qt_marc_grupo_w		bigint := 0;

qt_regra_medico_w	bigint;

ds_erro_hor_w		varchar(4000);
ds_perm_faixa_etaria_w      varchar(255);
ie_consiste_hor_medico_w	varchar(1);

ie_rodizio_medico_w	varchar(1);
ie_permite_w		varchar(1);
ie_apres_marc_w		varchar(1) := 'S';
qt_marc_agenda_rodizio_w	bigint;
ie_Dia_semana_w		varchar(3);
ds_bloqueio_w		varchar(4000);
qt_bloq_w			bigint;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_plano_w			agenda_integrada.cd_plano%type;
cd_paciente_w		varchar(10);
ie_regra_turno_conv_w	varchar(1);
ds_erro_turno_w		varchar(4000) := '';
qt_min_w		bigint;
ie_hor_w		varchar(1) := 'S';
qt_hor_ageint_lib_w	bigint;
ie_mostrar_sem_hor_w	varchar(1);
nr_seq_classif_int_w	bigint;
ie_restr_classif_int_w	varchar(1);
nr_classif_item_w		bigint;
nr_seq_grupo_selec_w	bigint;
ie_tipo_atendimento_w	smallint;
ie_tipo_atend_hor_w	smallint;
nr_seq_horario_w	bigint;
ie_cons_hor_anestesista_w	varchar(1);
ie_cons_rodizio_proc_int_w	varchar(1);
nr_seq_classif_pac_w		bigint;
nr_seq_classif_pac_ww		bigint;
nr_seq_preferencia_w		bigint;
ie_pref_lib_w				varchar(1);
cd_pessoa_usuario_w	varchar(10);
cd_medico_exec_w		varchar(10);
ie_hor_med_w			varchar(1);
cd_medico_turno_w		varchar(10);
qt_dias_fut_w		bigint;
ie_gerar_hor_bloq_w	varchar(1);
qt_dias_caducar_pref_w	bigint;
ie_gerar_hor_marc_w		varchar(1);
ie_consis_data_convenio_w varchar(1);
ds_erro_w			varchar(1);
ds_erro_outros_w		varchar(4000);
nr_min_dur_controle_w	bigint	:= 0;
nr_seq_classif_agenda_w	bigint;
ie_tipo_classif_w		varchar(1) := 'N';
ds_erro_idade_w		varchar(4000);
ds_erro_idade_turno_esp_w	varchar(4000);
ds_erro_classif_w		varchar(4000);
ie_erro_classif_w		varchar(1);
qt_idade_w		bigint;
dt_nascimento_w		agenda_integrada.dt_nascimento%type;
ie_regra_idade_agecons_w	varchar(5);

qt_regra_turno_tipo_w	bigint;
ie_classif_turno_w	agenda_turno.ie_classif_agenda%type;
qt_classif_lib_turno_w	bigint;
ie_considera_proc_int_qtd_w	varchar(1);
qt_existe_regra_qtd_w	integer;
ie_regra_classif_agecons_w	varchar(1);
ie_regra_agenda_classific_w varchar(1);

vetor_regra_anestesia_w			vetor_regra_anestesia;
vetor_truno_sequencia_w   vetor_truno_sequencia;
i					bigint;
qt_regra_anestesia_w			varchar(1);
dt_ini_vigencia_anestesia_w		ageint_anestesia_turno.dt_inicial_vigencia%type;
dt_fim_vigencia_anestesia_w		ageint_anestesia_turno.dt_final_vigencia%type;
hr_ini_vigencia_anestesia_w		ageint_anestesia_turno.hr_inicial%type;
hr_fim_vigencia_anestesia_w		ageint_anestesia_turno.hr_final%type;
dt_dia_semana_anestesia_w		ageint_anestesia_turno.dt_dia_semana%type;
ie_exclusivo_anest_w			ageint_anestesia_turno.ie_exclusivo_anest%type;
cd_estab_regra_anestesia_w		ageint_anestesia_turno.cd_estabelecimento%type;
cd_pes_fis_anestesista_w		ageint_anestesia_turno.cd_pessoa_fisica%type;

vetor_regra_agecons_w			vetor_regra_agecons;
ie_classif_agenda_www			varchar(5);
ie_dia_semana_www			smallint;
cd_medico_www				varchar(10);
cd_perfil_w				perfil.cd_perfil%type;
qt_idade_pf_www				smallint;
qt_agenda_w				bigint;
dt_referencia_w				timestamp;	
nr_seq_regra_mens_w				bigint;
qt_regra_mens_w				bigint;
ds_mensagem_mens_w			varchar(4000);
ie_todas_classif_mens_w			varchar(1);
hr_inicial_mens_w				timestamp;
hr_final_mens_w				timestamp;
ie_todos_convenio_mens_w			varchar(1);
ie_mesmo_pac_mens_w    			varchar(1);
qt_idade_min_mens_w				smallint;
qt_idade_max_mens_w				smallint;
nr_seq_regra_sem_w				bigint;
qt_regra_sem_w				bigint;
ds_mensagem_sem_w				varchar(4000);
ie_todas_classif_sem_w			varchar(1);
hr_inicial_sem_w				timestamp;
hr_final_sem_w				timestamp;
ie_todos_convenio_sem_w			varchar(1);
ie_mesmo_pac_sem_w    			varchar(1);
qt_idade_min_sem_w				smallint;
qt_idade_max_sem_w				smallint;
nr_seq_regra_dia_w				bigint;
qt_regra_dia_w				bigint;
ds_mensagem_dia_w				varchar(4000);
ie_todas_classif_dia_w			varchar(1);
hr_inicial_dia_w				timestamp;
hr_final_dia_w				timestamp;
ie_todos_convenio_dia_w			varchar(1);
ie_mesmo_pac_dia_w    			varchar(1);
qt_idade_min_dia_w				smallint;
qt_idade_max_dia_w				smallint;
ie_consistir_marc_encaixe_w varchar(1);

qt_encaixe_recorrencia_w	bigint	:= 0;

vetor_regra_agecons_conv_w	vetor_regra_agecons_conv;
cd_municipio_ibge_w		varchar(6);
cd_setor_exclusivo_w		setor_atendimento.cd_setor_atendimento%type;
cd_especialidade_w		integer;
cd_especialidade_item_w		integer;
cd_medico_agenda_w		varchar(10);
ie_agendado_w			varchar(1);
ie_agenda_w			varchar(1);		
ie_excecao_paciente_w 		smallint := 0;
cd_medico_marcacao_w		varchar(10);
qt_dias_cons_ans_w			especialidade_medica.qt_dias_cons_ans%type;
qt_dias_exam_ans_w      ageint_dias_atend_exame.qt_dias_atend_ans%type;

vetor_turno_exame_w			vetor_turno_exame;
dt_dia_semana_w	bigint;
ie_sexo_w		varchar(1)	:= 'A';
nr_seq_regra_w	bigint;
nr_seq_regra_w_adic_w	bigint;
nr_seq_proc_interno_ww	ageint_exame_adic_item.nr_seq_proc_interno%type;
ie_adic_w	varchar(1) := 'N';
vetor_exame_adic_item_w			vetor_exame_adic_item;
n	bigint;
qt_Regra_w	smallint;
qt_Regra_adic_w smallint;
cd_medico_w	pessoa_fisica.cd_pessoa_fisica%type;	
cd_medico_ww	pessoa_fisica.cd_pessoa_fisica%type;	
IE_HOR_POR_PROFISSIONAL_w		PARAMETRO_AGENDA_INTEGRADA.IE_HOR_POR_PROFISSIONAL%TYPE;
CD_CONV_OPERADORA_W           PARAMETRO_AGENDA_INTEGRADA.CD_CONV_OPERADORA%TYPE;
ie_consistir_hor_med_w		varchar(1) := 'N';
ie_conv_cancelado_w		varchar(1);
dt_agenda_w  timestamp;
nr_minuto_duracao_item_w	agenda_integrada_item.nr_minuto_duracao%TYPE;
cd_medico_item_w		agenda_integrada_item.cd_medico%TYPE;
qt_horarios_ageint_w		bigint;
qt_horarios_livre_ger_w		bigint;
qt_agendado_w			bigint;
ie_utiliza_mmed_w 		varchar(1);
nr_seq_classif_agenda_item_w	agenda_integrada_item.nr_seq_classif_agenda%type;
ie_classif_turno_exame_w		agenda_horario.nr_seq_classif_agenda%type;
ie_encaixe_w varchar(1);
qt_regra_alergia_w			integer;
ie_primeiro_horario_w		varchar(10);
cd_setor_atendimento_w		setor_atendimento.cd_setor_atendimento%type;
nr_seq_regra_bloq_w		agenda_bloqueio_geral.nr_sequencia%type;
nr_seq_proc_interno_cs_w agenda_consulta.nr_seq_proc_interno%type;
cd_procedimento_cs_w agenda_consulta.cd_procedimento%type;
ie_origem_proced_cs_w agenda_consulta.ie_origem_proced%type;
nr_seq_esp_W	agenda_horario_esp.nr_Sequencia%type;
ie_tipo_agendamento_w agenda_integrada_item.ie_tipo_agendamento%type;

ie_consiste_contra_ref_w varchar(1);
qt_marc_entre_prof_w     bigint;
nr_sequencia_rod_w       bigint;
ie_apres_fora_rod_w		varchar(1);
ie_perm_pf_classif_w	varchar(1);
ie_rodizio_especialidade_w	agenda_integrada_item.ie_rodizio_especialidade%type;

ageint_horarios_usuario_seq_w	ageint_horarios_usuario.nr_sequencia%type;
ageint_horarios_usuario_w t_ageint_horarios_usuario;
del_ageint_horarios_usuario_w t_del_ageint;
nr_sequencia_ag               bigint;
nr_seq_topografia_w	agenda_integrada_item.nr_seq_topografia%type;
qt_peso_w			agenda_integrada.qt_peso%type;
qt_altura_cm_w		agenda_integrada.qt_altura_cm%type;
qt_imc_max_w		agenda.qt_imc_max%type;
qt_imc_agendamento_w	double precision;								
ie_ordem_rodizio_w ageint_prof_rodizio.ie_ordem_apres%type;	
ie_reg_esp_dt_fim_w agenda_horario_esp.ie_agendamento%type;													

C01 CURSOR FOR
	SELECT	a.hr_inicio,
			a.ie_status_agenda,
			a.nr_sequencia,
			a.nr_minuto_duracao,
			a.cd_turno,
			--Ageint_Obter_Se_Turno_Exame(nr_seq_proc_interno_w, a.cd_Agenda, cd_pessoa_fisica_w, a.hr_inicio, b.cd_estabelecimento, nr_seq_grupo_selec_w, cd_paciente_w),
			a.nr_seq_horario,
			a.cd_medico_Exec,
			a.nr_seq_classif_agenda,			
			Ageint_Obter_Grupo_Agenda_Exam(a.cd_agenda),
			a.nr_seq_esp
	FROM	agenda_paciente a,
			agenda b			
	WHERE	a.cd_agenda 	= b.cd_agenda	
	and		a.cd_agenda		= cd_agenda_w
	AND		a.dt_agenda		= dt_agenda_w
	and		(((ie_gerar_hor_marc_w = 'N') and (not exists (SELECT 1 from ageint_marcacao_usuario x where x.hr_agenda = a.hr_inicio and coalesce(x.ie_gerado,'N') = 'N' and x.nr_seq_ageint = nr_seq_ageint_p and x.nr_seq_agenda <> a.nr_sequencia))) or (ie_gerar_hor_marc_w = 'S'))
	ORDER BY 1;

C02 CURSOR FOR
	SELECT	a.dt_Agenda,
		a.ie_status_agenda,
		a.nr_sequencia,
		a.nr_minuto_duracao,
		a.cd_turno,
		a.nr_seq_turno,
		a.nr_seq_turno_esp,		
		Ageint_Obter_Grupo_Agenda_Cons(a.cd_agenda),
		a.ie_classif_agenda,
		a.nr_seq_preferencia,
		a.cd_medico,
		a.ie_encaixe,
        a.nr_seq_proc_interno,
		a.cd_procedimento,
		a.ie_origem_proced
	FROM	agenda_consulta a,
		agenda b
	WHERE	a.cd_agenda	= b.cd_agenda
	and	a.cd_agenda	= cd_agenda_w
	AND	TRUNC(a.dt_agenda)	= dt_agenda_w
	and	(((ie_gerar_hor_marc_w = 'N') and (not exists (SELECT 1 from ageint_marcacao_usuario x where x.hr_agenda = a.dt_agenda and coalesce(x.ie_gerado,'N') = 'N' and x.nr_seq_ageint = nr_seq_ageint_p and x.nr_seq_agenda <> a.nr_sequencia))) or (ie_gerar_hor_marc_w = 'S'))
	ORDER BY 1;

C03 CURSOR FOR
	SELECT	a.cd_agenda,
			b.ie_feriado,
			b.ie_gerar_sobra_horario,
			a.nr_sequencia,
			b.cd_tipo_agenda,
			a.nr_seq_Ageint_item,
			a.cd_pessoa_fisica,
			c.nr_seq_proc_interno,
			coalesce(c.ie_anestesia,'N'),
			a.nr_seq_medico_regra,
			c.ie_classif_agenda,
			b.nr_seq_classif_int,
			c.nr_classificacao_agend,
			c.nr_seq_grupo_selec,
			b.nr_dias_fut_agendamento,
			c.cd_procedimento,
			c.ie_origem_proced,
			c.cd_anestesista,
			c.nr_minuto_duracao,
			coalesce(b.qt_horarios_ageint,0),
			c.nr_seq_classif_agenda,
			b.cd_especialidade,
			b.cd_setor_agenda,
			b.cd_setor_exclusivo,
			c.cd_especialidade,
			c.cd_medico,
			coalesce(c.ie_rodizio_especialidade, 'N'),
			d.qt_dias_cons_ans,
      c.ie_tipo_agendamento,
			c.nr_seq_topografia,
			b.qt_imc_max
	FROM agenda b, ageint_lib_usuario a, agenda_integrada_item c
LEFT OUTER JOIN especialidade_medica d ON (c.cd_especialidade = d.cd_especialidade)
WHERE a.nm_usuario	= nm_usuario_p AND a.nr_seq_ageint	= nr_seq_ageint_p AND a.cd_agenda	= b.cd_agenda and c.nr_sequencia	= a.nr_seq_Ageint_item and ((obter_se_contido(a.nr_sequencia, ds_agendas_montadas_p)	= 'S') or (coalesce(ds_agendas_montadas_p::text, '') = '')) and (coalesce(c.dt_validade_guia::text, '') = '' or c.dt_validade_guia >= dt_agenda_w)  ORDER BY 1;

C04 CURSOR FOR
	SELECT	a.dt_encaixe,
		a.cd_turno,
		a.nr_minuto_duracao,
		a.cd_pessoa_Fisica
	FROM	ageint_encaixe_usuario a
	WHERE	a.cd_Agenda		= cd_agenda_w
	AND	a.nr_seq_Ageint		= nr_seq_ageint_p
	AND	a.nr_seq_ageint_item	= nr_seq_ageint_item_w
	AND (coalesce(a.cd_pessoa_fisica,cd_pessoa_fisica_w)	= cd_pessoa_fisica_w OR coalesce(cd_pessoa_fisica_w::text, '') = '')
	AND	coalesce(a.ie_gerado,'N')	= 'N'
	and	not exists ( SELECT 1 from ageint_horarios_usuario b where a.cd_agenda = b.cd_agenda and a.dt_encaixe = b.hr_agenda)
	ORDER BY 1;

C05 CURSOR FOR
	SELECT 	t.dt_inicial_vigencia,
			t.dt_final_vigencia,
			t.hr_inicial,
			t.hr_final,
			t.dt_dia_semana,
			t.ie_exclusivo_anest,
			coalesce(t.cd_estabelecimento,cd_estabelecimento_p) cd_estabelecimento,
			t.cd_pessoa_fisica
	from	ageint_anestesia_turno t,
			ageint_agenda_turno_anest a
	where 	a.nr_seq_anest_turno = t.nr_sequencia
	and		t.ie_situacao = 'A'
	and 	a.cd_agenda = cd_agenda_w;
	
C06 CURSOR FOR
	SELECT 	nr_sequencia,	
		qt_permissao,
		ie_periodo,	
		ds_mensagem,
		ie_todas_classif,
		hr_inicial,
		hr_final,
		ie_todos_convenios,
		ie_mesmo_pac,
		qt_idade_min,
		qt_idade_max,
		ie_classif_agenda,
		ie_dia_semana,
		cd_convenio,
		cd_Agenda,
		cd_perfil
	from	agenda_consulta_regra	
	where	cd_estabelecimento = cd_estabelecimento_p
	and 	cd_agenda = cd_agenda_w
	order by coalesce(cd_convenio,0), ie_classif_agenda desc, coalesce(ie_dia_semana,0), coalesce(cd_perfil,0), coalesce(qt_idade_min,0), coalesce(qt_idade_max,999);	
	
C07 CURSOR FOR
	SELECT nr_sequencia,
		cd_convenio,
		cd_agenda,
		cd_categoria,
		cd_plano_convenio,
		cd_setor_atendimento,
		ie_forma_consiste_setor,
		cd_especialidade,
		cd_medico,
		ie_primeiro_agendamento,
		cd_pessoa_fisica,
		dt_inicial_vigencia,
		dt_final_vigencia,
		ie_dia_semana,
		hr_inicial,
		hr_final,
		cd_municipio_ibge,
		ie_permite,
		nr_seq_plano		FROM (
	SELECT 	nr_sequencia,
		cd_convenio,
		cd_agenda,
		cd_categoria,
		cd_plano_convenio,
		cd_setor_atendimento,
		ie_forma_consiste_setor,
		cd_especialidade,
		cd_medico,
		ie_primeiro_agendamento,
		cd_pessoa_fisica,
		dt_inicial_vigencia,
		dt_final_vigencia,
		ie_dia_semana,
		hr_inicial,
		hr_final,
		cd_municipio_ibge,
		ie_permite,
		nr_seq_plano
	from	regra_agecons_convenio
	where	coalesce(cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and 	cd_agenda = cd_agenda_w
	and coalesce(cd_pessoa_fisica, coalesce(cd_paciente_w, '0')) = coalesce(cd_paciente_w, coalesce(cd_pessoa_fisica, '0'))
	
union all

	select 	nr_sequencia,
		cd_convenio,
		cd_agenda,
		cd_categoria,
		cd_plano_convenio,
		cd_setor_atendimento,
		ie_forma_consiste_setor,
		cd_especialidade,
		cd_medico,
		ie_primeiro_agendamento,
		cd_pessoa_fisica,
		dt_inicial_vigencia,
		dt_final_vigencia,
		ie_dia_semana,
		hr_inicial,
		hr_final,
		cd_municipio_ibge,
		ie_permite,
		nr_seq_plano
	from	regra_agecons_convenio
	where	coalesce(cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and 	coalesce(cd_agenda::text, '') = ''
	and coalesce(cd_pessoa_fisica, coalesce(cd_paciente_w, '0')) = coalesce(cd_paciente_w, coalesce(cd_pessoa_fisica, '0'))
	) alias11order 	by	coalesce(cd_convenio,0),
		coalesce(cd_pessoa_fisica,0),
		coalesce(cd_setor_atendimento,0), 
		coalesce(cd_plano_convenio,0), 
		coalesce(cd_categoria,0),
		coalesce(cd_agenda,0),
		coalesce(nr_seq_plano,0),
		coalesce(cd_especialidade,0),
		coalesce(dt_inicial_vigencia,clock_timestamp()),
		coalesce(dt_final_vigencia,clock_timestamp()),
		coalesce(hr_inicial,clock_timestamp()),
		coalesce(hr_final,clock_timestamp());
		
C08 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_proc_interno,	
		nr_seq_grupo_ageint,
		cd_pessoa_fisica,
		trunc(dt_inicial_vigencia) dt_inicial_vigencia,
		trunc(dt_final_vigencia) dt_final_vigencia,
		hr_inicial,
		hr_final,
		dt_dia_semana,
		ie_sexo,
		qt_idade_min,
		qt_idade_max,
		ie_consiste_marcacao,
		qt_dias_validade,
		nr_seq_topografia
	from	ageint_turno_exame
	where	coalesce(cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(cd_agenda, cd_agenda_w) = cd_agenda_w;

C09 CURSOR FOR
	SELECT	nr_seq_proc_interno,
		nr_seq_topografia
	from	ageint_exame_adic_item
	where	nr_seq_item  = nr_seq_ageint_item_w;

c10 CURSOR(dt_agenda_p timestamp, nm_usuario_p text, ds_agendas_montadas_p text) FOR
	SELECT a.nr_sequencia
	FROM ageint_horarios_usuario a
	WHERE trunc(hr_agenda) = dt_agenda_p
	AND nm_usuario = nm_usuario_p
	AND ((obter_se_contido(nr_seq_ageint_lib, ds_agendas_montadas_p) = 'S') OR (coalesce(ds_agendas_montadas_p::text, '') = ''));

C11 CURSOR FOR
  SELECT cd_pessoa_fisica,
    nr_seq_horario
  from agenda_horario_permissao
  where cd_agenda = cd_agenda_w
  and ie_situacao = 'A';


procedure inserir_ageint_hor_usu is

	;
BEGIN
    begin
      FORALL i IN ageint_horarios_usuario_w.first .. ageint_horarios_usuario_w.last
        INSERT INTO ageint_horarios_usuario VALUES ageint_horarios_usuario_w(i);
      COMMIT;
    exception when others then
      CALL wheb_mensagem_pck.exibir_mensagem_abort(1188317);
    end;
	ageint_horarios_usuario_w.delete;
	end;

BEGIN
ageint_horarios_usuario_w.delete();
dt_agenda_w := trunc(dt_agenda_p);

SELECT 	coalesce(MAX(IE_HOR_POR_PROFISSIONAL), 'N'),
		MAX(CD_CONV_OPERADORA)
INTO STRICT	IE_HOR_POR_PROFISSIONAL_w,
		CD_CONV_OPERADORA_W
FROM 	PARAMETRO_AGENDA_INTEGRADA
WHERE 	cd_estabelecimento = cd_estabelecimento_p;

cd_perfil_w := obter_perfil_ativo;

ie_considera_proc_w := obter_param_usuario(869, 452, cd_perfil_w, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_considera_proc_w);
ie_considera_proc_int_qtd_w := obter_param_usuario(869, 439, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_considera_proc_int_qtd_w);
ie_regra_idade_agecons_w := Obter_Param_Usuario(869, 155, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_regra_idade_agecons_w);
ie_apres_hr_medico_w := Obter_Param_Usuario(869, 157, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_apres_hr_medico_w);
ie_consiste_hor_medico_w := Obter_Param_Usuario(869, 158, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_consiste_hor_medico_w);
qt_marc_agenda_rodizio_w := Obter_Param_Usuario(869, 198, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, qt_marc_agenda_rodizio_w);
ie_restringe_classif_w := Obter_Param_Usuario(869, 229, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_restringe_classif_w);
ie_regra_turno_conv_w := Obter_Param_Usuario(869, 241, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_regra_turno_conv_w);
qt_min_w := Obter_Param_Usuario(869, 239, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, qt_min_w);
ie_mostrar_sem_hor_w := Obter_Param_Usuario(869, 298, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_mostrar_sem_hor_w);
ie_restr_classif_int_w := Obter_Param_Usuario(869, 306, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_restr_classif_int_w);
ie_cons_hor_anestesista_w := Obter_Param_Usuario(869, 342, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_cons_hor_anestesista_w);
ie_cons_rodizio_proc_int_w := Obter_Param_Usuario(869, 357, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_cons_rodizio_proc_int_w);
qt_dias_caducar_pref_w := Obter_Param_Usuario(869, 377, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, qt_dias_caducar_pref_w);
ie_gerar_hor_marc_w := Obter_Param_Usuario(869, 378, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_gerar_hor_marc_w);
ie_regra_classif_agecons_w := Obter_Param_Usuario(869, 289, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_regra_classif_agecons_w);
ie_consistir_marc_encaixe_w := Obter_Param_Usuario(869, 390, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consistir_marc_encaixe_w);
ie_utiliza_mmed_w := Obter_Param_Usuario(0, 198, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_utiliza_mmed_w);
ie_regra_agenda_classific_w := Obter_Param_Usuario(869, 424, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_regra_agenda_classific_w);
ie_consiste_contra_ref_w := obter_param_usuario(869, 431, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_consiste_contra_ref_w);
ie_consis_data_convenio_w := Obter_Param_Usuario(869, 463, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_consis_data_convenio_w);

select	max(cd_pessoa_fisica)
into STRICT	cd_pessoa_usuario_w
from	usuario
where	nm_usuario = nm_usuario_p;

OPEN c10(dt_agenda_p => dt_agenda_w, nm_usuario_p => nm_usuario_p, ds_agendas_montadas_p => ds_agendas_montadas_p);
LOOP
	FETCH c10 BULK COLLECT
		INTO del_ageint_horarios_usuario_w;

	FORALL i IN 1 .. del_ageint_horarios_usuario_w.count
		DELETE FROM ageint_horarios_usuario WHERE nr_sequencia = del_ageint_horarios_usuario_w(i);
	EXIT WHEN NOT FOUND; /* apply on c10 */
END LOOP;

update	ageint_lib_usuario
set	ie_apres_marc = 'S'
where	nr_seq_ageint = nr_seq_ageint_p;

commit;

ie_Dia_semana_w	:= obter_cod_dia_semana(dt_agenda_w);


select	max(cd_convenio),
	max(ie_tipo_atendimento),
	max(cd_pessoa_fisica),
	max(cd_categoria),
	max(obter_idade_pf(cd_pessoa_fisica, clock_timestamp(), 'A')),
	max(dt_nascimento),
	max(cd_plano),
	max(qt_peso),
	max(qt_altura_cm)
into STRICT	cd_convenio_w,
	ie_tipo_atendimento_w,
	cd_paciente_w,
	cd_categoria_w,
	qt_idade_w,
	dt_nascimento_w,
	cd_plano_w,
	qt_peso_w,
	qt_altura_cm_w
from	agenda_integrada
where	nr_sequencia	= nr_seq_ageint_p;

select max(dt_fim_vigencia)
into STRICT dt_fim_vigencia_convenio_w
from pessoa_titular_convenio
where cd_pessoa_fisica = cd_paciente_w
and cd_convenio = cd_convenio_w
and coalesce(cd_categoria, cd_categoria_w, '0') = coalesce(cd_categoria_w, '0')
and coalesce(cd_plano_convenio, cd_plano_w, '0') = coalesce(cd_plano_w, '0');

if (dt_fim_vigencia_convenio_w IS NOT NULL AND dt_fim_vigencia_convenio_w::text <> '') and (trunc(dt_fim_vigencia_convenio_w) < dt_agenda_w) and (ie_consis_data_convenio_w = 'S') then
  goto termino_co3;
end if;

if (coalesce(cd_paciente_w::text, '') = '') and (dt_nascimento_w IS NOT NULL AND dt_nascimento_w::text <> '') then
	qt_idade_w	:= Obter_Idade(dt_nascimento_w, clock_timestamp(), 'A');
end if;

nr_seq_classif_pac_w	:= obter_classif_pf(cd_paciente_w, cd_estabelecimento_p);

--Validacao IMC maximo da configuracao da agenda
if (qt_peso_w IS NOT NULL AND qt_peso_w::text <> '' AND qt_altura_cm_w IS NOT NULL AND qt_altura_cm_w::text <> '') then
	qt_imc_agendamento_w	:=	obter_imc(qt_peso_w, qt_altura_cm_w, null);
end if;

OPEN C03;
LOOP
FETCH C03 INTO
	cd_agenda_w,
	ie_feriado_w,
	ie_sobra_horario_w,
	nr_Seq_Ageint_lib_w,
	cd_tipo_Agenda_w,
	nr_seq_ageint_item_w,
	cd_pessoa_fisica_w,
	nr_seq_proc_interno_w,
	ie_anestesia_w,
	nr_seq_medico_regra_w,
	ie_classif_item_w,
	nr_seq_classif_int_w,
	nr_classif_item_w,
	nr_seq_grupo_selec_w,
	qt_dias_fut_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	cd_anestesista_w,
	nr_minuto_duracao_item_w,
	qt_horarios_ageint_w,
	nr_seq_classif_agenda_item_w,
	cd_especialidade_w,
	cd_setor_atendimento_w,
	cd_setor_exclusivo_w,
	cd_especialidade_item_w,
	cd_medico_item_w,
	ie_rodizio_especialidade_w,
	qt_dias_cons_ans_w,
  ie_tipo_agendamento_w,
  	nr_seq_topografia_w,
	qt_imc_max_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	BEGIN
	
	if (ie_utiliza_mmed_w = 'S') and (coalesce(cd_convenio_w::text, '') = '') then
		select 	max(cd_convenio),
				max(cd_categoria),
				max(cd_plano)
		into STRICT 	cd_convenio_w,
				cd_categoria_w,
				cd_plano_w
		from AGENDA_INTEGRADA_CONV_ITEM
		where nr_seq_agenda_item = nr_seq_ageint_item_w;
	
	end if;
	
	--Regra de carencia e cobertura de marcacao
    	IF (cd_conv_operadora_w = cd_convenio_w) THEN
          SELECT * FROM validar_carencia_marc(dt_agenda_w, cd_estabelecimento_p, nr_seq_ageint_item_w, ie_valida_caren_cober_w, nr_exp_erro_w, dt_carencia_w) INTO STRICT ie_valida_caren_cober_w, nr_exp_erro_w, dt_carencia_w;
        END IF;
	
	--Validacao IMC maximo da configuracao da agenda e Regra de carencia e cobertura de marcacao
             IF (ie_valida_caren_cober_w = 'N' or ((qt_imc_max_w IS NOT NULL AND qt_imc_max_w::text <> '') and (qt_imc_agendamento_w IS NOT NULL AND qt_imc_agendamento_w::text <> '') and qt_imc_agendamento_w > qt_imc_max_w)) THEN
              	GOTO fimc03;
              END IF;
	
	select	count(*)
	into STRICT	qt_regra_medico_w
	from	agenda_medico
	where	cd_agenda = cd_agenda_w;

	select	count(*)
	into STRICT	qt_existe_regra_qtd_w
	from	agenda_regra
	where	cd_agenda = cd_agenda_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	((cd_convenio = cd_convenio_w) or (coalesce(cd_convenio::text, '') = ''))
	and	((cd_plano_convenio = cd_plano_w) or (coalesce(cd_plano_convenio::text, '') = ''))	
	and	((cd_categoria = cd_categoria_w) or (coalesce(cd_categoria::text, '') = ''))
	and	qt_regra > 0;

	select	coalesce(max(ie_gerar_hor_bloq),'S')
	into STRICT	ie_gerar_hor_bloq_w
	from	agenda
	where	cd_agenda = cd_agenda_w;

	nr_minuto_dur_ant_w		:= 0;
	nr_min_dur_controle_w	:= 0;
  vetor_truno_sequencia_w.delete();
	vetor_regra_anestesia_w .delete(); -- Limpa Vetor de Anestesia ---
	
	select 	count(1)
	into STRICT	qt_regra_alergia_w
	from 	paciente_alergia a,
			ageint_regra_alergia b
	where 	a.cd_pessoa_fisica = cd_paciente_w
	and 	a.nr_seq_tipo = b.nr_seq_tipo
	and 	coalesce(b.cd_tipo_agenda, cd_tipo_agenda_w) = cd_tipo_agenda_w
	and		coalesce(b.cd_agenda, cd_agenda_w) = cd_agenda_w
	and		b.ie_situacao = 'A'
	and		b.ie_somente_prim_hor = 'S';

	IF (cd_tipo_agenda_w	= 2) THEN
	
		select	CASE WHEN coalesce(max(1),0)=1 THEN  'S'  ELSE 'N' END
		into STRICT	ie_reg_esp_dt_fim_w
		from	agenda_horario_esp
		where	cd_agenda = cd_agenda_w
		and	((ie_dia_semana = ie_Dia_semana_w) or ((ie_dia_semana = 9) and (ie_Dia_semana_w not in (1,7))) or (coalesce(ie_dia_semana::text, '') = ''))
		and dt_agenda_w between pkg_date_utils.start_of(dt_agenda,'DAY') and pkg_date_utils.end_of(coalesce(dt_agenda_fim,dt_agenda),'DAY')
		and (dt_agenda_fim IS NOT NULL AND dt_agenda_fim::text <> '');
		
		ie_apres_marc_w	:= 'S';
		
		if (coalesce(cd_agenda_ant_w,0)	<> cd_agenda_w) then
			CALL Gerar_Horario_Agenda_Exame(cd_estabelecimento_p, cd_agenda_w, dt_agenda_w, nm_usuario_p);
		end if;

    if (ie_prazo_maximo_p = 'N' and
      cd_convenio_w = cd_conv_operadora_w) then
      
      qt_dias_exam_ans_w := get_dias_exame_ans(nr_seq_proc_interno_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_agendamento_w);
			
			if (qt_dias_exam_ans_w > 0 and dt_agenda_w > sugest_dias_futuros_uteis(clock_timestamp(), qt_dias_exam_ans_w, cd_estabelecimento_p)) then
				ie_apres_marc_w := 'N';
			end if;
    end if;
		
		select	coalesce(max(ie_rodizio_medico),'N')
		into STRICT	ie_rodizio_medico_w
		from	agenda
		where	cd_agenda = cd_agenda_w;
		
		if (ie_rodizio_medico_w = 'S') and (qt_marc_agenda_rodizio_w > 0) and (ie_cons_rodizio_proc_int_w = 'N')then
			/*Ageint_verifica_med_rodizio(nr_seq_ageint_item_w,	
						dt_agenda_w,
						cd_estabelecimento_p,
						nm_usuario_p,
						cd_pessoa_fisica_w,
						qt_marc_agenda_rodizio_w,
						ie_permite_w);*/
			
						
			if (ie_permite_w = 'N') then	
				ie_apres_marc_w := 'N';
				update	ageint_lib_usuario
				set	ie_apres_marc = 'N'
				where	nr_sequencia = nr_Seq_Ageint_lib_w;
			end if;		
		end if;
		
		if (qt_dias_fut_w > 0) and (dt_agenda_w > trunc(clock_timestamp() + qt_dias_fut_w)) then
			ie_apres_marc_w := 'N';
			update	ageint_lib_usuario
			set	ie_apres_marc = 'N'
			where	nr_sequencia = nr_Seq_Ageint_lib_w;
		end if;
		
		if (ie_considera_proc_int_qtd_w = 'S') and (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then					
			
			if (qt_existe_regra_qtd_w > 0) then
			
				SELECT * FROM consistir_proc_conv_agenda(	cd_estabelecimento_p, cd_paciente_w, trunc(dt_agenda_w), cd_agenda_w, cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, cd_pessoa_fisica_w, 'E', cd_plano_w, null, null, null, null, ie_anestesia_w, null, nr_seq_ageint_item_w) INTO STRICT ds_erro_outros_w, ds_erro_w, ds_erro_outros_w, ds_erro_outros_w;
			end if;
			
			if (ds_erro_w <> 'S') then
				ie_apres_marc_w := 'N';						
			end if;
			ds_erro_w := null;
		end if;	
		
		if (ie_apres_marc_w = 'S') then
			/*Inicio regras de turnos para anestesia*/

			select 	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	qt_regra_anestesia_w
			from	ageint_anestesia_turno t,
					ageint_agenda_turno_anest a
			where 	a.nr_seq_anest_turno = t.nr_sequencia
			and		t.ie_situacao = 'A'
			and		a.cd_agenda = cd_agenda_w  LIMIT 1;
			
			if (qt_regra_anestesia_w = 'S') then
				i := 1;
				vetor_regra_anestesia_w .delete();
				for regra_anest in C05
				loop
					vetor_regra_anestesia_w[i].dt_inicial_vigencia 	:= regra_anest.dt_inicial_vigencia;
					vetor_regra_anestesia_w[i].dt_final_vigencia 	:= regra_anest.dt_final_vigencia;
					vetor_regra_anestesia_w[i].hr_inicial 			:= regra_anest.hr_inicial;
					vetor_regra_anestesia_w[i].hr_final 			:= regra_anest.hr_final;
					vetor_regra_anestesia_w[i].dt_dia_semana 		:= regra_anest.dt_dia_semana;
					vetor_regra_anestesia_w[i].ie_exclusivo_anest	:= regra_anest.ie_exclusivo_anest;
					vetor_regra_anestesia_w[i].cd_estabelecimento 	:= regra_anest.cd_estabelecimento;
					vetor_regra_anestesia_w[i].cd_pessoa_fisica 	:= regra_anest.cd_pessoa_fisica;
							
					i := i + 1;
				end loop;
				
			end if;
			/*Fim regras de turnos para anestesia*/


			
			/* Inicio  Ageint_Obter_Se_Turno_Exame */
	
			i := 1;
			vetor_turno_exame_w .delete();
			for regra_turno_exam in C08
			loop	
				vetor_turno_exame_w[i].nr_sequencia 		:= regra_turno_exam.nr_sequencia;								
				vetor_turno_exame_w[i].nr_seq_proc_interno	:= regra_turno_exam.nr_seq_proc_interno;
				vetor_turno_exame_w[i].nr_seq_grupo_ageint	:= regra_turno_exam.nr_seq_grupo_ageint;
				vetor_turno_exame_w[i].cd_pessoa_fisica		:= regra_turno_exam.cd_pessoa_fisica;
				vetor_turno_exame_w[i].dt_inicial_vigencia	:= regra_turno_exam.dt_inicial_vigencia;
				vetor_turno_exame_w[i].dt_final_vigencia	:= regra_turno_exam.dt_final_vigencia;
				vetor_turno_exame_w[i].hr_inicial		:= regra_turno_exam.hr_inicial;
				vetor_turno_exame_w[i].hr_final			:= regra_turno_exam.hr_final;
				vetor_turno_exame_w[i].dt_dia_semana		:= regra_turno_exam.dt_dia_semana;
				vetor_turno_exame_w[i].ie_sexo			:= regra_turno_exam.ie_sexo;
				vetor_turno_exame_w[i].qt_idade_min		:= regra_turno_exam.qt_idade_min;
				vetor_turno_exame_w[i].qt_idade_max		:= regra_turno_exam.qt_idade_max;
				vetor_turno_exame_w[i].ie_consiste_marcacao	:= regra_turno_exam.ie_consiste_marcacao;
				vetor_turno_exame_w[i].qt_dias_validade		:= regra_turno_exam.qt_dias_validade;
				vetor_turno_exame_w[i].nr_seq_topografia	:= regra_turno_exam.nr_seq_topografia;
						
				i := i + 1;
			end loop;
			
			i := 1;
			vetor_exame_adic_item_w.delete();
			for exames_adic in C09
			loop					
				vetor_exame_adic_item_w[i].nr_seq_proc_interno	:= exames_adic.nr_seq_proc_interno;
				vetor_exame_adic_item_w[i].nr_seq_topografia	:= exames_adic.nr_seq_topografia;
				i := i + 1;
			end loop;				
			/* Fim  Ageint_Obter_Se_Turno_Exame   */

			
			if (qt_regra_alergia_w > 0) then
			
			ie_primeiro_horario_w := Obter_primeiro_horario_agenda(cd_agenda_w, cd_tipo_agenda_w, dt_agenda_w, ie_dia_Semana_w, ie_feriado_w, cd_estabelecimento_p, nm_usuario_p);
		
			end if;

      for c_regra_turno_usuario in C11 loop
				vetor_truno_sequencia_w(c_regra_turno_usuario.nr_seq_horario)(c_regra_turno_usuario.cd_pessoa_fisica).nr_sequencia 		:= 1;
			end loop;
		
			qt_horarios_livre_ger_w := 0;
		
			OPEN C01;
			LOOP
			FETCH C01 INTO
				ds_horario_w,
				ie_status_agenda_w,
				nr_Seq_Agenda_w,
				nr_minuto_duracao_w,
				cd_turno_w,
				--ie_turno_exame_w,
				nr_seq_horario_w,
				cd_medico_exec_w,
				nr_seq_classif_agenda_w,
				nr_seq_grupo_agexam_w,
				nr_seq_esp_W;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				BEGIN
				ie_hor_w 		:= 'S';
				qt_marc_medico_w	:= 0;
				ds_erro_hor_w	:= '';
				ds_erro_idade_w := '';

				/* Regra de procedencia por turno */

				
				if (ie_considera_proc_w = 'S') then				
					ds_considera_proc_w := obter_procedencia_turno(nr_seq_horario_w, nr_seq_ageint_p, ds_considera_proc_w);
					if (ds_considera_proc_w = 'N') then
						goto final;
					end if;					
				end if;
				
				/* Regra permite marcacao horarios */

				ds_considera_marc_hor_w := obter_se_perm_marc_excl(cd_agenda_w, ds_horario_w, nm_usuario_p, cd_perfil_w);
					if (ds_considera_marc_hor_w = 'N') then
						goto final;
					end if;
				
				ie_conv_cancelado_w := SUBSTR(Obter_se_Convenio_Cancelado(cd_convenio_w, ds_horario_w),1,2);
				if (coalesce(ie_conv_cancelado_w, 'N') = 'S') then
					goto final;
				end if;			
				
				if (nr_Seq_horario_W	 > 0) then
					select	max(b.cd_medico)
					into STRICT	cd_medico_turno_w
					from	agenda_horario a,
						agenda_medico b
					where	a.nr_seq_medico_exec 	= b.nr_sequencia
					and	a.nr_sequencia 	= nr_seq_horario_w;
					
					select	max(nr_seq_classif_pac),
							max(NR_SEQ_CLASSIF_AGENDA)
					into STRICT	nr_seq_classif_pac_ww,
							ie_classif_turno_exame_w
					from	agenda_horario
					where	nr_sequencia = nr_seq_horario_w;
				end if;
				
				if (nr_seq_esp_W	 > 0) then
					select	max(b.cd_medico),
						max(NR_SEQ_CLASSIF_AGENDA)
					into STRICT	cd_medico_turno_w,
						ie_classif_turno_exame_w
					FROM agenda_horario_esp a
LEFT OUTER JOIN agenda_medico b ON (a.nr_seq_medico_exec = b.nr_sequencia)
WHERE a.nr_sequencia = nr_seq_esp_w;
				end if;

        if (vetor_truno_sequencia_w.exists(nr_seq_horario_w)) then
        
          if (vetor_truno_sequencia_w[nr_seq_horario_w].exists (cd_pessoa_usuario_w)) then
            ie_hor_w := 'S';
          else
            ie_hor_w := 'N';
          end if;

        end if;

        if (ie_hor_w = 'N')then
					goto final;
				end if;

				if (qt_min_w IS NOT NULL AND qt_min_w::text <> '') and
					(ds_horario_w <= (clock_timestamp() + coalesce(qt_min_w,0)/1440)) then
					ie_hor_w	:= 'N';
				end if;				

				if (ie_restr_classif_int_w = 'S') and (nr_seq_classif_int_w IS NOT NULL AND nr_seq_classif_int_w::text <> '') and (nr_seq_classif_int_w <> nr_classif_item_w) then
					ie_hor_w := 'N';
				end if;
			
				if (nr_seq_classif_pac_ww IS NOT NULL AND nr_seq_classif_pac_ww::text <> '') and (nr_seq_classif_pac_ww <> coalesce(nr_seq_classif_pac_w,0)) then
					ie_hor_w := 'N';
				end if;	

        if (coalesce(nr_seq_classif_agenda_item_w::text, '') = '') and (nr_seq_classif_agenda_w IS NOT NULL AND nr_seq_classif_agenda_w::text <> '') and (agenda_classif_liberada(obter_usuario_ativo(), obter_perfil_ativo(), nr_seq_classif_agenda_w, null, 'E') = 'N') then
          ie_hor_w := 'N';
        end if;

        if (ie_hor_w = 'N')then
          goto final;
        end if;
				
				if (ie_restringe_classif_w = 'S') and (nr_seq_classif_agenda_w IS NOT NULL AND nr_seq_classif_agenda_w::text <> '') and (nr_seq_classif_agenda_w <> nr_seq_classif_agenda_item_w) and (ie_classif_turno_exame_w IS NOT NULL AND ie_classif_turno_exame_w::text <> '') then					
					ie_hor_w := 'N';

					--Validar a regra "Classificacoes liberadas para o turno"
					if (coalesce(nr_seq_esp_W,0) = 0) then
						begin
						select	max(1)
						into STRICT	qt_classif_lib_turno_w
						from	agenda_turno_classif_lib
						where	nr_seq_horario = nr_seq_horario_w;
						exception
						when no_data_found then
							qt_classif_lib_turno_w := 0;
						end;
					else
						begin
						select	max(1)
						into STRICT	qt_classif_lib_turno_w
						from	agenda_turno_classif_lib
						where	nr_seq_hor_esp = nr_seq_esp_w;
						exception
						when no_data_found then
							qt_classif_lib_turno_w := 0;
						end;					
					end if;
					
					if (qt_classif_lib_turno_w > 0) then
						if (coalesce(nr_seq_esp_W,0) = 0) then
							begin
							select	1
							into STRICT	qt_classif_lib_turno_w
							from	agenda_turno_classif_lib
							where	nr_seq_classif_agenda = nr_seq_classif_agenda_item_w
							and	nr_seq_horario = nr_seq_horario_w  LIMIT 1;
							exception
							when no_data_found then
								qt_classif_lib_turno_w := 0;
							end;
						else
							begin
							select	1
							into STRICT	qt_classif_lib_turno_w
							from	agenda_turno_classif_lib
							where	nr_seq_classif_agenda = nr_seq_classif_agenda_item_w
							and	nr_seq_hor_esp = nr_seq_esp_w  LIMIT 1;
							exception
							when no_data_found then
								qt_classif_lib_turno_w := 0;
							end;					
						end if;

						if (qt_classif_lib_turno_w > 0) then
							ie_hor_w := 'S';
						else
							ie_hor_w := 'N';
						end if;
						
					end if;
					qt_classif_lib_turno_w	:= 0;
				end if;
				
				if (qt_regra_alergia_w > 0) and (ie_primeiro_horario_w IS NOT NULL AND ie_primeiro_horario_w::text <> '') and (ie_primeiro_horario_w <> to_char(ds_horario_w, 'hh24:mi:ss')) then
					ie_hor_w := 'N';
				end if;
				
				if (ie_hor_w = 'N')then
					goto final;
				end if;
				
				if (nr_seq_horario_w IS NOT NULL AND nr_seq_horario_w::text <> '') and (ie_tipo_atendimento_w IS NOT NULL AND ie_tipo_atendimento_w::text <> '') then
					select	max(ie_tipo_atendimento)
					into STRICT	ie_tipo_atend_hor_w
					from	agenda_horario
					where	nr_sequencia = nr_seq_horario_w;
					if (ie_tipo_atendimento_w <> coalesce(ie_tipo_atend_hor_w,ie_tipo_atendimento_w)) then
						ie_hor_w := 'N';
					end if;
				end if;
				
				if (ie_hor_w = 'N')then
					goto final;
				end if;		
				
				if (ie_status_agenda_w	= 'B') then
					ds_bloqueio_w	:= substr(ageint_obter_mot_bloq(cd_agenda_w, ds_horario_w, ie_Dia_semana_w), 1, 4000);
				end if;
				
				if (coalesce(ds_bloqueio_w::text, '') = '') then
					Ageint_Obter_Bloq_Exame(nr_seq_proc_interno_w, cd_agenda_w, ds_horario_w, nm_usuario_p, ds_bloqueio_w, qt_bloq_w, cd_paciente_w);
					if (ds_bloqueio_w IS NOT NULL AND ds_bloqueio_w::text <> '') or (qt_bloq_w	> 0) then
						ie_status_agenda_w	:= 'B';
					end if;
					if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (coalesce(ds_bloqueio_w::text, '') = '') then
						SELECT * FROM Ageint_Obter_Bloq_Medico(cd_pessoa_fisica_w, cd_agenda_w, ds_horario_w, cd_convenio_w, ds_bloqueio_w, qt_bloq_w) INTO STRICT ds_bloqueio_w, qt_bloq_w;
						--ds_bloqueio_w		:= Ageint_Obter_Mot_Bloq_Medico(cd_pessoa_fisica_w, cd_agenda_w, ds_horario_w);
						if (ds_bloqueio_w IS NOT NULL AND ds_bloqueio_w::text <> '') or (qt_bloq_w > 0) then
							ie_status_agenda_w	:= 'B';
						end if;
					end if;
				end if;				
				
				IF (nr_minuto_dur_ant_w IS NOT NULL AND nr_minuto_dur_ant_w::text <> '') AND (nr_minuto_dur_ant_w > 0) and (ie_status_agenda_w <> 'C')THEN
					IF (ds_horario_w >= dt_age_ant_w) AND (ds_horario_w < dt_age_ant_w + nr_min_dur_controle_w / 1440) THEN
						ie_status_agenda_w	:= 'N';
					END IF;
				END IF;
				
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					ie_turno_medico_w	:= Ageint_Obter_Se_Turno_Medico(cd_pessoa_fisica_w, ds_horario_w, cd_agenda_w, nm_usuario_p, nr_seq_medico_regra_w, cd_estabelecimento_p);
				else
					ie_turno_medico_w	:= 'S';
				end if;
				
				if (ie_turno_medico_w = 'N')then
					goto final;
				end if;
				
				i := 1;
				ie_gera_hor_anest_w	:= 'S';						
				for i in 1..vetor_regra_anestesia_w.count loop
					if 	((vetor_regra_anestesia_w[i].cd_estabelecimento = cd_estabelecimento_p)
					and (trunc(ds_horario_w) >= trunc(coalesce(vetor_regra_anestesia_w[i].dt_inicial_vigencia,ds_horario_w)))
					and (trunc(ds_horario_w) <= trunc(coalesce(vetor_regra_anestesia_w[i].dt_final_vigencia,ds_horario_w)))
					and	((ie_Dia_semana_w = vetor_regra_anestesia_w[i].dt_dia_semana) or (vetor_regra_anestesia_w[i].dt_dia_semana = 9 and ie_Dia_semana_w not in (1,7)))
					and ((ds_horario_w >= to_date(to_char(ds_horario_w,'dd/mm/yyyy')||' '||to_char(vetor_regra_anestesia_w[i].hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
						and (ds_horario_w <= to_date(to_char(ds_horario_w,'dd/mm/yyyy')||' '||to_char(vetor_regra_anestesia_w[i].hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')))
					and (vetor_regra_anestesia_w[i].cd_pessoa_fisica = cd_anestesista_w or coalesce(cd_anestesista_w::text, '') = '' or vetor_regra_anestesia_w[i]coalesce(.cd_pessoa_fisica::text, '') = '')) then
							
						ie_gera_hor_anest_w	:= 'S';
						if (ie_anestesia_w	= 'S') then
							EXIT WHEN ie_gera_hor_anest_w = 'S';
						elsif (vetor_regra_anestesia_w[i].ie_exclusivo_anest = 'S') then
							ie_gera_hor_anest_w := 'N';
							EXIT WHEN ie_gera_hor_anest_w = 'N';
						end if;	
					
					elsif (ie_anestesia_w = 'S') then
						ie_gera_hor_anest_w := 'N';
					else
						ie_gera_hor_anest_w := 'S';
					end if;
				end loop;
				
				if (ie_gera_hor_anest_w = 'N')then
					goto final;
				end if;				
				
				ie_status_agenda_controle_w	:= ie_status_agenda_w;

				SELECT	coalesce(max(1), 0)
				INTO STRICT	qt_encaixe_w
				FROM	ageint_marcacao_usuario
				WHERE	cd_agenda	= cd_agenda_w
				AND	hr_agenda	= ds_horario_w
				AND	nr_seq_ageint	= nr_seq_ageint_p
				AND	coalesce(ie_gerado,'N') = 'N'
				AND	coalesce(ie_encaixe,'N') = 'S';
				if (qt_encaixe_w > 0)then
					goto finalEnc;
				end if;
				
				if (ie_consistir_marc_encaixe_w = 'S') then
					SELECT	COUNT(*)
					INTO STRICT	qt_encaixe_recorrencia_w
					FROM	ageint_marcacao_usuario
					WHERE	cd_agenda	= cd_agenda_w
					AND	hr_agenda	between ds_horario_w and ds_horario_w + (nr_min_dur_controle_w - 1) / 1440
					AND	coalesce(ie_encaixe,'N') = 'S';

					if (qt_encaixe_recorrencia_w = 0) then
						SELECT	COUNT(*)
						INTO STRICT	qt_encaixe_recorrencia_w
						FROM	ageint_marcacao_usuario
						WHERE	cd_agenda	= cd_agenda_w
						AND	ds_horario_w	between hr_agenda and hr_Agenda + (nr_minuto_duracao - 1) / 1440
						AND	coalesce(ie_encaixe,'N') = 'S';
					end if;
					if (qt_encaixe_recorrencia_w > 0)then
						goto finalEnc;
					end if;
				end if;
				ie_consistir_hor_med_w := 'N';
				if (ie_apres_hr_medico_w = 'N') and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') AND (ie_status_agenda_w = 'L') then
					SELECT	COUNT(*)
					INTO STRICT	qt_marc_medico_w
					FROM	ageint_marcacao_usuario
					WHERE	cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		hr_Agenda between trunc(ds_horario_w) and trunc(ds_horario_w) + 86339/86400
					AND		(ds_horario_w + nr_minuto_duracao_w / 1440 between (hr_agenda  + (1 / 1440)) and (hr_agenda + (nr_minuto_duracao - 1) /1440)
					or		(ds_horario_w		between hr_agenda and (hr_Agenda + (nr_minuto_duracao - 1) /1440)))
					and		nr_Seq_Agenda		<> nr_seq_Agenda_w;
								
					
					if (qt_marc_medico_w = 0)then
						begin
						SELECT	1
						INTO STRICT	qt_marc_medico_w
						FROM	agenda_paciente
						WHERE	cd_medico_exec	= cd_pessoa_fisica_w
						and		hr_inicio 		between trunc(ds_horario_w) and trunc(ds_horario_w) + 86339/86400
						AND		(ds_horario_w 	+ nr_minuto_duracao_w / 1440 between (hr_inicio + (1 / 1440)) and (hr_inicio + (nr_minuto_duracao - 1) /1440)
						or		(ds_horario_w	between hr_inicio and (hr_inicio + (nr_minuto_duracao - 1) /1440)))
						and		cd_agenda		<> cd_agenda_w
						and		ie_status_agenda	not in ('C', 'L', 'F', 'I', 'II', 'R', 'B')  LIMIT 1;
						exception
						when others then
							qt_marc_medico_w := 0;
						end;
					
					end if;									
					ie_consistir_hor_med_w := 'S';
				else
					qt_marc_medico_w := 0;
				end if;
				
				if (nr_seq_grupo_agexam_w > 0) then
					begin
					select	1
					into STRICT	qt_marc_grupo_w
					from	agenda_paciente a,
						ageint_agenda_grupo_exam b
					where	a.cd_agenda						= b.cd_agenda
					and	b.nr_seq_agenda_grupo_exam 		= nr_seq_grupo_agexam_w
					and		hr_inicio 		between trunc(ds_horario_w) and trunc(ds_horario_w) + 86339/86400
					and		(ds_horario_w 	+ nr_minuto_duracao_w / 1440 between (hr_inicio + (1 / 1440)) and (hr_inicio + (nr_minuto_duracao - 1) /1440)
					or		(ds_horario_w	between hr_inicio and (hr_inicio + (nr_minuto_duracao - 1) /1440)))
					and	a.ie_status_agenda				not in ('L','C','B')  LIMIT 1;							
					exception
					when others then
						qt_marc_grupo_w := 0;
					end;
				end if;
				
				if (qt_marc_medico_w > 0)then
					goto final;
				end if;	
				
				if (ie_cons_hor_anestesista_w = 'S') then
					if (ie_anestesia_w = 'S') and (cd_anestesista_w IS NOT NULL AND cd_anestesista_w::text <> '')then	
						
						SELECT	COUNT(*)
						INTO STRICT	qt_marc_anestesista_w								
						FROM	agenda_paciente
						WHERE	cd_anestesista 		= cd_anestesista_w
						and		(ie_anestesia IS NOT NULL AND ie_anestesia::text <> '')
						and		hr_inicio 			between trunc(ds_horario_w) and trunc(ds_horario_w) + 86339/86400
						AND		((ds_horario_w 		+ coalesce(nr_minuto_duracao_item_w,nr_minuto_duracao_w) / 1440 between (hr_inicio + (1 / 1440)) and (hr_inicio + (nr_minuto_duracao - 1) /1440))
						or		(ds_horario_w		between hr_inicio and (hr_inicio + (nr_minuto_duracao - 1) /1440))
						or		(hr_inicio 			between ds_horario_w and (ds_horario_w + (coalesce(nr_minuto_duracao_item_w,nr_minuto_duracao_w) - 1) /1440))
						or		(hr_inicio 			+ nr_minuto_duracao / 1440 between (ds_horario_w + (1 / 1440)) and (ds_horario_w + (coalesce(nr_minuto_duracao_item_w,nr_minuto_duracao_w) - 1) /1440)))
						and		cd_agenda			<> cd_agenda_w
						and		ie_status_agenda	not in ('C', 'L', 'F', 'I', 'II', 'R', 'B');
						
						if (qt_marc_anestesista_w > 0)then							
							ie_hor_w := 'N';
						end if;

					end if;
				
				end if;
				ie_hor_med_w := 'N';				
				
				--Gerar os horarios apenas para o mesmo medico que estiver vinculado ao turno da agenda
				if (coalesce(cd_medico_turno_w::text, '') = '') then
					ie_hor_med_w 	:= 'S';
				elsif (cd_medico_turno_w IS NOT NULL AND cd_medico_turno_w::text <> '') and (cd_medico_turno_w	= cd_pessoa_Fisica_w)then
					ie_hor_med_w	:= 'S';
				end if;			
				
				if (ie_hor_med_w = 'N') then
					goto finalEnc;
				end if;
				
				if (ie_status_agenda_w = 'B') and (ie_gerar_hor_bloq_w = 'N') then
					ie_hor_w := 'N';
				end if;
				
				/*ie_turno_exame_w	:= Ageint_Obter_Se_Turno_Exame(nr_seq_proc_interno_w, cd_Agenda_w, cd_pessoa_fisica_w, ds_horario_w, cd_estabelecimento_p,
																	nr_seq_grupo_selec_w, cd_paciente_w, nr_seq_ageint_item_w);*/

				/* Inicio  Ageint_Obter_Se_Turno_Exame */
		
				select	coalesce(max(ie_sexo), 'A')
				into STRICT	ie_sexo_w
				from	pessoa_fisica
				where	cd_pessoa_fisica = cd_paciente_w;
				
				dt_dia_semana_w	:= obter_cod_dia_semana(ds_horario_w);
				nr_seq_regra_w := 0;
				nr_seq_regra_w_adic_w := 0;
				ie_adic_w := 'N';
				i := 1;
				ie_turno_exame_w := 'S';
				qt_Regra_w := 0;
				for i in 1..vetor_turno_exame_w.count loop
					/* C01 */

					if (nr_seq_regra_w = 0) then
						if	(((vetor_turno_exame_w[i].nr_seq_proc_interno	= nr_seq_proc_interno_w ) and (vetor_turno_exame_w[i]coalesce(.nr_seq_grupo_ageint::text, '') = '')) or
							(vetor_turno_exame_w[i].nr_seq_grupo_ageint 	= nr_seq_grupo_selec_w AND nr_seq_grupo_selec_w IS NOT NULL AND nr_seq_grupo_selec_w::text <> ''))					
						and (coalesce(vetor_turno_exame_w[i].cd_pessoa_fisica, cd_pessoa_fisica_w)	= cd_pessoa_fisica_w or ( coalesce(cd_pessoa_fisica_w::text, '') = '' and vetor_turno_exame_w[i]coalesce(.cd_pessoa_fisica::text, '') = ''))
						and	((vetor_turno_exame_w[i].dt_inicial_vigencia	<= trunc(ds_horario_w)) or (vetor_turno_exame_w[i]coalesce(.dt_inicial_vigencia::text, '') = ''))
						and	((vetor_turno_exame_w[i].dt_final_vigencia	>= trunc(ds_horario_w)) or (vetor_turno_exame_w[i]coalesce(.dt_final_vigencia::text, '') = ''))
						and	ds_horario_w between to_date(to_char(ds_horario_w,'dd/mm/yyyy') || ' ' || to_char(vetor_turno_exame_w[i].hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
											and to_date(to_char(ds_horario_w,'dd/mm/yyyy') || ' ' || to_char(vetor_turno_exame_w[i].hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') - 1 / 1440
							and	((vetor_turno_exame_w[i].dt_dia_semana	= dt_dia_semana_w) or (vetor_turno_exame_w[i].dt_dia_semana	= 9 and dt_dia_semana_w	not in (1,7)))					
						and	((coalesce(vetor_turno_exame_w[i].ie_sexo, 'A') = ie_sexo_w) or (coalesce(vetor_turno_exame_w[i].ie_sexo,'A') = 'A'))
						and	(((qt_idade_w >= coalesce(vetor_turno_exame_w[i].qt_idade_min, qt_idade_w)) and (qt_idade_w <= coalesce(vetor_turno_exame_w[i].qt_idade_max, qt_idade_w))) or (coalesce(qt_idade_w::text, '') = ''))
						and	coalesce(vetor_turno_exame_w[i].ie_consiste_marcacao,'N') = 'N'
						and	((vetor_turno_exame_w[i]coalesce(.qt_dias_validade::text, '') = '') or (dt_agenda_w >=(trunc(clock_timestamp())+vetor_turno_exame_w[i].qt_dias_validade)))
						and	((vetor_turno_exame_w[i].nr_seq_topografia = nr_seq_topografia_w) or (vetor_turno_exame_w[i]coalesce(.nr_seq_topografia::text, '') = '')) then
							nr_seq_regra_w := vetor_turno_exame_w[i].nr_sequencia;
						end if;
						
						if	(((vetor_turno_exame_w[i].nr_seq_proc_interno	= nr_seq_proc_interno_w) and (vetor_turno_exame_w[i]coalesce(.nr_seq_grupo_ageint::text, '') = '')) or
							(vetor_turno_exame_w[i].nr_seq_grupo_ageint 	= nr_seq_grupo_selec_w AND nr_seq_grupo_selec_w IS NOT NULL AND nr_seq_grupo_selec_w::text <> ''))												
						and	((vetor_turno_exame_w[i].dt_inicial_vigencia	<= trunc(ds_horario_w)) or (vetor_turno_exame_w[i]coalesce(.dt_inicial_vigencia::text, '') = ''))
						and	((vetor_turno_exame_w[i].dt_final_vigencia	>= trunc(ds_horario_w)) or (vetor_turno_exame_w[i]coalesce(.dt_final_vigencia::text, '') = ''))
						and	((vetor_turno_exame_w[i]coalesce(.qt_dias_validade::text, '') = '') or (ds_horario_w >= (trunc(clock_timestamp())+vetor_turno_exame_w[i].qt_dias_validade)))
						and	((vetor_turno_exame_w[i].nr_seq_topografia = nr_seq_topografia_w) or (vetor_turno_exame_w[i]coalesce(.nr_seq_topografia::text, '') = ''))
						and	coalesce(vetor_turno_exame_w[i].ie_consiste_marcacao,'N') = 'N' then
							qt_Regra_w := 1;
						end if;
					end if;
					/* close C 01 */

					
					if (nr_seq_regra_w_adic_w = 0) then
						n := 1;
						/* C02 */
						for n in 1..vetor_exame_adic_item_w.count loop
							ie_adic_w := 'S';												
							/* C03 */

							if	(((vetor_turno_exame_w[i].nr_seq_proc_interno	=  vetor_exame_adic_item_w[n].nr_seq_proc_interno) and (vetor_turno_exame_w[i]coalesce(.nr_seq_grupo_ageint::text, '') = '')) or
								(vetor_turno_exame_w[i].nr_seq_grupo_ageint 	= nr_seq_grupo_selec_w AND nr_seq_grupo_selec_w IS NOT NULL AND nr_seq_grupo_selec_w::text <> ''))
							and (coalesce(vetor_turno_exame_w[i].cd_pessoa_fisica, cd_pessoa_fisica_w)	= cd_pessoa_fisica_w or ( coalesce(cd_pessoa_fisica_w::text, '') = '' and vetor_turno_exame_w[i]coalesce(.cd_pessoa_fisica::text, '') = ''))
							and	((vetor_turno_exame_w[i].dt_inicial_vigencia	<= trunc(ds_horario_w)) or (vetor_turno_exame_w[i]coalesce(.dt_inicial_vigencia::text, '') = ''))
							and	((vetor_turno_exame_w[i].dt_final_vigencia	>= trunc(ds_horario_w)) or (vetor_turno_exame_w[i]coalesce(.dt_final_vigencia::text, '') = ''))
							and	((vetor_turno_exame_w[i]coalesce(.qt_dias_validade::text, '') = '') or (ds_horario_w >= (trunc(clock_timestamp())+vetor_turno_exame_w[i].qt_dias_validade)))
							and	((vetor_turno_exame_w[i].nr_seq_topografia = vetor_exame_adic_item_w[n].nr_seq_topografia) or (vetor_turno_exame_w[i]coalesce(.nr_seq_topografia::text, '') = ''))
							and	coalesce(vetor_turno_exame_w[i].ie_consiste_marcacao,'N') = 'N' then
								qt_Regra_adic_w := 1;									
							end if;
							
							if	(((vetor_turno_exame_w[i].nr_seq_proc_interno	=  vetor_exame_adic_item_w[n].nr_seq_proc_interno) and (vetor_turno_exame_w[i]coalesce(.nr_seq_grupo_ageint::text, '') = '')) or
									(vetor_turno_exame_w[i].nr_seq_grupo_ageint 	= nr_seq_grupo_selec_w AND nr_seq_grupo_selec_w IS NOT NULL AND nr_seq_grupo_selec_w::text <> ''))											
							and (coalesce(vetor_turno_exame_w[i].cd_pessoa_fisica, cd_pessoa_fisica_w)	= cd_pessoa_fisica_w or ( coalesce(cd_pessoa_fisica_w::text, '') = '' and vetor_turno_exame_w[i]coalesce(.cd_pessoa_fisica::text, '') = ''))
							and		((vetor_turno_exame_w[i].dt_inicial_vigencia	<= trunc(ds_horario_w)) or (vetor_turno_exame_w[i]coalesce(.dt_inicial_vigencia::text, '') = ''))
							and		((vetor_turno_exame_w[i].dt_final_vigencia	>= trunc(ds_horario_w)) or (vetor_turno_exame_w[i]coalesce(.dt_final_vigencia::text, '') = ''))
							and		ds_horario_w between to_date(to_char(ds_horario_w,'dd/mm/yyyy') || ' ' || to_char(vetor_turno_exame_w[i].hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
													and to_date(to_char(ds_horario_w,'dd/mm/yyyy') || ' ' || to_char(vetor_turno_exame_w[i].hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') - 1 / 1440
									and	((vetor_turno_exame_w[i].dt_dia_semana	= dt_dia_semana_w) or (vetor_turno_exame_w[i].dt_dia_semana	= 9 and dt_dia_semana_w	not in (1,7)))					
							and		((coalesce(vetor_turno_exame_w[i].ie_sexo, 'A') = ie_sexo_w) or (coalesce(vetor_turno_exame_w[i].ie_sexo,'A') = 'A'))
							and		(((qt_idade_w >= coalesce(vetor_turno_exame_w[i].qt_idade_min, qt_idade_w)) and (qt_idade_w <= coalesce(vetor_turno_exame_w[i].qt_idade_max, qt_idade_w))) or (coalesce(qt_idade_w::text, '') = ''))
							and		coalesce(vetor_turno_exame_w[i].ie_consiste_marcacao,'N') = 'N'
							and		((vetor_turno_exame_w[i]coalesce(.qt_dias_validade::text, '') = '') or (dt_agenda_w >=(trunc(clock_timestamp())+vetor_turno_exame_w[i].qt_dias_validade)))
							and	((vetor_turno_exame_w[i].nr_seq_topografia = vetor_exame_adic_item_w[n].nr_seq_topografia) or (vetor_turno_exame_w[i]coalesce(.nr_seq_topografia::text, '') = '')) then
								nr_seq_regra_w_adic_w := vetor_turno_exame_w[i].nr_sequencia;
							end if;	
							/* close C03 */

						end loop;
						/* close C02 */

					end if;
				end loop;				
				
				if (qt_Regra_w > 0) then
					if (nr_seq_regra_w > 0) then
						ie_turno_exame_w := 'S';
					elsif ((coalesce(nr_seq_proc_interno_w,0)	> 0) or (coalesce(nr_seq_grupo_selec_w,0)	> 0)) then
						ie_turno_exame_w := 'N';					
					end if;
				end if;
				
				if (qt_Regra_adic_w > 0) then
					if (ie_turno_exame_w <> 'N') and (ie_adic_w = 'S') then
						if (nr_seq_regra_w_adic_w > 0) then
							ie_turno_exame_w := 'S';
						else
							ie_turno_exame_w := 'N';
						end if;
					end if;
				end if;
				/* Fim  Ageint_Obter_Se_Turno_Exame   */
								
				
				if (ie_turno_exame_w <> 'S')then
					goto final;
				end if;																
				
				if (nr_seq_classif_agenda_w IS NOT NULL AND nr_seq_classif_agenda_w::text <> '') then
					
					select	max(ie_tipo_classif)
					into STRICT	ie_tipo_classif_w
					from 	agenda_paciente_classif
					where	nr_sequencia	= nr_seq_classif_agenda_w;
				else
					ie_tipo_classif_w	:= 'N';									
				end if;				
				
				--AGENDA INTEGRADA > Cadastros > Agendas > Agenda de exames > Horarios por tipo de atendimento
				if (ie_tipo_atendimento_w IS NOT NULL AND ie_tipo_atendimento_w::text <> '') then
					select	count(*)
					into STRICT	qt_regra_turno_tipo_w
					from	ageint_regra_turno_tipo
					where	cd_agenda 				= cd_agenda_w
					and		ie_tipo_atendimento		= ie_tipo_atendimento_w;
					
					if (qt_regra_turno_tipo_w > 0) then				
						ie_hor_w	:= ageint_obter_tipo_atend_hor(cd_agenda_w, ds_horario_w, ie_tipo_atendimento_w, ie_Dia_semana_w, cd_estabelecimento_p);
					end if;
				end if;
				
				if (ie_regra_idade_agecons_w = 'B') then
					ds_erro_idade_w := Consiste_Idade_Pac_Agexame(cd_agenda_w, ds_horario_w, qt_idade_w, cd_paciente_w, ds_erro_idade_w, nm_usuario_p, dt_dia_semana_w);
					if (ds_erro_idade_w IS NOT NULL AND ds_erro_idade_w::text <> '') then
						ie_hor_w := 'N';
					end if;
				end if;
				
				--Validar faixa etaria do paciente de acordo com a idade minima/maxima definidos no cadastro do turno da agenda
				ds_perm_faixa_etaria_w := Consiste_Idade_Ag_Pac_Exame( cd_agenda_w, ds_horario_w, qt_idade_w, ds_perm_faixa_etaria_w, nm_usuario_p, dt_dia_semana_w);
				
				if (ie_regra_idade_agecons_w <> 'B') and (coalesce(ds_perm_faixa_etaria_w::text, '') = '') then
					ds_perm_faixa_etaria_w := consiste_idade_tur_esp( cd_agenda_w, ds_horario_w, qt_idade_w, nm_usuario_p, ds_perm_faixa_etaria_w, ie_reg_esp_dt_fim_w);
				end if;
				
				if (ds_perm_faixa_etaria_w IS NOT NULL AND ds_perm_faixa_etaria_w::text <> '')then
					ie_hor_w	:= 'N';
				end if;

				nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
							cd_agenda_w,
							null, -- no caso de exames, ou ie_classif_item_w para consultas/servicos
							nr_seq_classif_agenda_item_w, -- no caso de exames, ou null para consultas
							null, -- nao considerado pois nao esta indo para agenda_consulta
							obter_setor_regras_ageint(cd_tipo_agenda_w,cd_agenda_w,cd_procedimento_w,'N',nm_usuario_p,cd_estabelecimento_p),
							nr_seq_proc_interno_w,
							cd_procedimento_w,
							ie_origem_proced_w,
							cd_pessoa_fisica_w, -- verificar no insert o campo a ser utilizado
							ds_horario_w, -- verificar no insert o campo a ser utilizado
							'N',
							'N');
				
				IF (nr_seq_regra_bloq_w = 0) and (qt_encaixe_w	= 0) AND (ie_turno_medico_w	= 'S') and (ie_turno_exame_w	= 'S') and (ie_gera_hor_anest_w	= 'S') and (qt_marc_medico_w	= 0) and
					--(ds_erro_hor_w is null) and					
					(ie_hor_w = 'S') and (ie_hor_med_w = 'S') and (qt_encaixe_recorrencia_w	= 0) and (ie_conv_cancelado_w = 'N') THEN
					if (ie_consistir_hor_med_w = 'S') then
						ds_erro_hor_w	:= '';
						if (ie_consiste_hor_medico_w	= 'S') AND (ie_status_agenda_w in ('L', 'LF', 'B')) then
							ds_erro_hor_w := consistir_horario_medico(nr_seq_agenda_w, cd_pessoa_fisica_w, nr_minuto_duracao_w, ds_erro_hor_w);
						end if;
					end if;
					if ((coalesce(ds_erro_hor_w::text, '') = '') AND
						((qt_horarios_livre_ger_w < qt_horarios_ageint_w) OR (ie_status_agenda_w <> 'L') OR (qt_horarios_ageint_w = 0))) then
						ie_perm_pf_classif_w := obter_se_perm_pf_classif(cd_funcao_p         => 869,
	                                            						cd_agenda_p         => cd_agenda_w,
	                                            						cd_pessoa_fisica_p  => cd_paciente_w,
	                                            						dt_referencia_p     => dt_agenda_p,
												dt_agenda_p     	=> ds_horario_w);
						if (ie_perm_pf_classif_w = 'S') THEN
							nr_sequencia_ag := ageint_horarios_usuario_w.count() + 1;

							select 	nextval('ageint_horarios_usuario_seq')
							into STRICT	ageint_horarios_usuario_seq_w
							;
							ageint_horarios_usuario_w[nr_sequencia_ag].nr_sequencia := ageint_horarios_usuario_seq_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].cd_agenda := cd_agenda_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].hr_agenda := ds_horario_w;
							IF qt_marc_grupo_w = 0 THEN
							   ageint_horarios_usuario_w[nr_sequencia_ag].ie_status_agenda := ie_status_agenda_w;
							ELSE
							   ageint_horarios_usuario_w[nr_sequencia_ag].ie_status_agenda := 'N';
							END IF;
							ageint_horarios_usuario_w[nr_sequencia_ag].nm_usuario := nm_usuario_p;
							ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_agenda := nr_seq_agenda_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].nr_minuto_duracao := nr_minuto_duracao_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_ageint_lib := nr_seq_ageint_lib_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].cd_turno := cd_turno_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].ie_encaixe := 'N';
							ageint_horarios_usuario_w[nr_sequencia_ag].cd_pessoa_fisica := cd_pessoa_fisica_w;
							--ageint_horarios_usuario_w(nr_sequencia_ag).nr_seq_turno := nr_seq_turno_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].ds_motivo_bloq := substr(ds_bloqueio_w, 1, 255); --tamanho na tabela**
							ageint_horarios_usuario_w[nr_sequencia_ag].ie_classif_encaixe := ie_tipo_classif_w;

							if (qt_horarios_ageint_w > 0) then
								if (ie_status_agenda_w	= 'L') then
									qt_horarios_livre_ger_w := qt_horarios_livre_ger_w + 1;
								elsif (ie_status_agenda_w	= 'N') then
									select 	count(*)
									into STRICT	qt_agendado_w
									from	ageint_marcacao_usuario
									where	nr_seq_agenda = nr_seq_agenda_w
									and		nr_seq_ageint = nr_seq_ageint_p
									and		coalesce(ie_gerado,'N') = 'N';
									if (qt_agendado_w > 0) then
										qt_horarios_livre_ger_w := qt_horarios_livre_ger_w + 1;
									end if;
								end if;
							end if;
						end if;
					end if;
				END IF;
				ds_bloqueio_w	:= '';
				qt_bloq_w		:= 0;
				<<finalEnc>>
				if (ie_status_agenda_controle_w	= 'N') then
					if (nr_min_dur_controle_w = 0)then
						SELECT	coalesce(MAX(a.nr_minuto_duracao),0)
						INTO STRICT	nr_minuto_dur_ant_w
						FROM	ageint_marcacao_usuario a,
								agenda_integrada_item b
						WHERE	a.nr_seq_ageint_item = b.nr_sequencia
						and		b.nr_sequencia = nr_seq_ageint_item_w
						and		a.cd_agenda	= cd_agenda_w
						AND		a.hr_agenda	= ds_horario_w
						AND		a.nr_seq_ageint	= nr_seq_ageint_p
						AND		coalesce(a.ie_gerado,'N') = 'N'
						AND		coalesce(a.ie_encaixe,'N') = 'N';
						
						dt_age_ant_w			:= ds_horario_w;
						nr_min_dur_controle_w	:= nr_minuto_dur_ant_w;					
					else
						if (nr_min_dur_controle_w > 0) and (ie_status_agenda_w <> 'C')then
							nr_min_dur_controle_w	:= nr_min_dur_controle_w - nr_minuto_duracao_w;
						end if;
						dt_age_ant_w			:= ds_horario_w;
					end if;
					
				end if;						
				
				<<final>>
					ds_erro_w	:= '';
					ds_bloqueio_w	:= '';
				END;
			END LOOP;
			CLOSE C01;			
			if (ie_mostrar_sem_hor_w = 'N') then
				inserir_ageint_hor_usu;
				begin
				select 1
				into STRICT	qt_hor_ageint_lib_w
				from	ageint_horarios_usuario
				where	nr_Seq_Ageint_lib = nr_Seq_Ageint_lib_w  LIMIT 1;							
				exception
				when others then
					qt_hor_ageint_lib_w := 0;
				end;
				if (qt_hor_ageint_lib_w = 0)  then
					update	ageint_lib_usuario
					set	ie_apres_marc = 'N'
					where	nr_sequencia = nr_Seq_Ageint_lib_w;
				end if;
			end if;
		end if;
	ELSIF (cd_tipo_agenda_w	IN (3,4)) THEN
    begin
  		if (ie_prazo_maximo_p = 'N' and
          (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '') and
		      coalesce(cd_medico_item_w::text, '') = '' and
			    coalesce(qt_dias_cons_ans_w,0) > 0 and
          cd_convenio_w = cd_conv_operadora_w) then
			
			if (dt_agenda_w > sugest_dias_futuros_uteis(clock_timestamp(), qt_dias_cons_ans_w, cd_estabelecimento_p)) then
				ie_gera_hor_w := 'N';
				goto fimc03;
			end if;
    end if;
			
		ds_retorno_w := Horario_Livre_Consulta(cd_estabelecimento_p, cd_agenda_w, ie_feriado_w, dt_agenda_w, nm_usuario_p, 'S', ie_sobra_horario_w, 'N', 0, ds_retorno_w);
		
		ie_apres_marc_w	:= 'S';
				
		select	coalesce(max(ie_rodizio_medico),'N')
		into STRICT	ie_rodizio_medico_w
		from	agenda
		where	cd_agenda = cd_agenda_w;	
		
		if (ie_rodizio_medico_w = 'S') and (qt_marc_agenda_rodizio_w > 0) and (cd_tipo_agenda_w = 3) then
			ie_permite_w := Ageint_verifica_med_rodizio(nr_seq_ageint_item_w, dt_agenda_w, cd_estabelecimento_p, nm_usuario_p, cd_pessoa_fisica_w, qt_marc_agenda_rodizio_w, ie_permite_w);
			if (ie_permite_w = 'N') then	
				ie_apres_marc_w := 'N';
				update	ageint_lib_usuario
				set	ie_apres_marc = 'N'
				where	nr_sequencia = nr_Seq_Ageint_lib_w;
			end if;
		elsif (coalesce(cd_medico_item_w::text, '') = '') OR (ie_rodizio_especialidade_w = 'S') then
			FOR i IN (SELECT agrd.qt_marc_entre_prof,
						   nr_sequencia,
						   ie_apres_fora_rod
					  FROM ageint_rodizio agrd
					 WHERE agrd.cd_especialidade = cd_especialidade_item_w
					 and	coalesce(agrd.ie_classif_agenda,coalesce(ie_classif_item_w,'XPTO')) = coalesce(ie_classif_item_w,'XPTO')
					   AND IE_SITUACAO = 'A'
					   AND (trunc(dt_Agenda_p) >= trunc(agrd.dt_inicio_vigencia) or coalesce(agrd.dt_inicio_vigencia::text, '') = '')
					   AND (trunc(dt_Agenda_p) <= trunc(agrd.dt_fim_vigencia) or coalesce(agrd.dt_fim_vigencia::text, '') = '')  LIMIT 1) LOOP
			qt_marc_entre_prof_w := i.qt_marc_entre_prof;
			nr_sequencia_rod_w   := i.nr_sequencia;
			ie_apres_fora_rod_w	 := i.ie_apres_fora_rod;

			END LOOP;

			IF 	qt_marc_entre_prof_w > 0  THEN
				ie_permite_w := ageint_verifica_rodizio(nr_seq_ageint_item_p  => nr_seq_ageint_item_w,
                                                    cd_estabelecimento_p  => cd_estabelecimento_p,
                                                    nm_usuario_p          => nm_usuario_p,
                                                    cd_medico_p           => cd_pessoa_fisica_w,
                                                    cd_agenda_p           => cd_agenda_w,
                                                    cd_tipo_agenda_p      => cd_tipo_agenda_w,
                                                    dt_agenda_p           => dt_agenda_w,
                                                    cd_especialidade_p    => cd_especialidade_item_w,
                                                    nr_seq_medico_regra_p => nr_seq_medico_regra_w,
                                                    qt_dias_rodizio_p     => qt_marc_entre_prof_w,
                                                    nr_sequencia_rod_p    => nr_sequencia_rod_w);

				SELECT coalesce(max(ie_ordem_apres),0)
				  INTO STRICT ie_ordem_rodizio_w
				  FROM ageint_prof_rodizio apr
				 WHERE apr.nr_seq_rodizio = nr_sequencia_rod_w
				   AND cd_pessoa_fisica = cd_pessoa_fisica_w
				   and (dt_agenda_w >= dt_inicio_vigencia or coalesce(dt_inicio_vigencia::text, '') = '')
				   and (dt_agenda_w <= dt_fim_vigencia or coalesce(dt_fim_vigencia::text, '') = '')
				   AND ie_situacao = 'A';

				if (ie_ordem_rodizio_w > 0) then
					update ageint_lib_usuario
					   set nr_ordem_apres  = ie_ordem_rodizio_w
					 where nr_sequencia = nr_Seq_Ageint_lib_w;
				end if;
				IF (ie_permite_w = 'N') THEN
					if (ie_apres_fora_rod_w = 'N') then
						ie_apres_marc_w := 'N';
					end if;
					UPDATE ageint_lib_usuario
					SET ie_apres_marc = CASE WHEN ie_apres_fora_rod_w='N' THEN 'S'  ELSE 'S' END ,
						ie_permite_marc	= ie_apres_fora_rod_w
					WHERE nr_sequencia = nr_seq_ageint_lib_w
						and cd_pessoa_fisica <> coalesce(cd_medico_item_w,'XPTO');
				END IF;
			END IF;
		end if;
		
		if (qt_dias_fut_w > 0) and (dt_agenda_w > trunc(clock_timestamp() + qt_dias_fut_w)) then
			ie_apres_marc_w := 'N';
			update	ageint_lib_usuario
			set	ie_apres_marc = 'N'
			where	nr_sequencia = nr_Seq_Ageint_lib_w;
		end if;

		if (ie_apres_marc_w = 'S') then
      begin
			/* Inicio regra_agecons_convenio */
	
			select	max(cd_municipio_ibge)
			into STRICT	cd_municipio_ibge_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_paciente_w
			and	ie_tipo_complemento	= 1;
			
			select	max(cd_setor_exclusivo),
				coalesce(max(cd_pessoa_fisica), '0'),
				max(cd_especialidade)
			into STRICT	cd_setor_exclusivo_w,
				cd_medico_agenda_w,
				cd_especialidade_w
			from	agenda
			where	cd_agenda = cd_agenda_w;
			
			select	max(cd_pessoa_fisica)
			into STRICT	cd_medico_marcacao_w
			from	ageint_marcacao_usuario
			where	nm_usuario		= nm_usuario_p
			and	nr_seq_ageint		= nr_seq_ageint_p
			and	coalesce(ie_gerado,'N')	= 'N'
			and	coalesce(ie_horario_auxiliar,'N') = 'N';			
			
			i := 1;
			vetor_regra_agecons_conv_w .delete();
			for regra_agecon_conv in C07
			loop	
				vetor_regra_agecons_conv_w[i].nr_sequencia 	:= regra_agecon_conv.nr_sequencia;
				vetor_regra_agecons_conv_w[i].cd_convenio 	:= regra_agecon_conv.cd_convenio;
				vetor_regra_agecons_conv_w[i].cd_agenda 	:= regra_agecon_conv.cd_agenda;
				vetor_regra_agecons_conv_w[i].cd_categoria 	:= regra_agecon_conv.cd_categoria;
				vetor_regra_agecons_conv_w[i].cd_plano_convenio 	:= regra_agecon_conv.cd_plano_convenio;
				vetor_regra_agecons_conv_w[i].cd_setor_atendimento 	:= regra_agecon_conv.cd_setor_atendimento;
				vetor_regra_agecons_conv_w[i].ie_forma_consiste_setor 	:= regra_agecon_conv.ie_forma_consiste_setor;
				vetor_regra_agecons_conv_w[i].cd_especialidade 	:= regra_agecon_conv.cd_especialidade;
				vetor_regra_agecons_conv_w[i].cd_medico 	:= regra_agecon_conv.cd_medico;
				vetor_regra_agecons_conv_w[i].ie_primeiro_agendamento 	:= regra_agecon_conv.ie_primeiro_agendamento;
				vetor_regra_agecons_conv_w[i].cd_pessoa_fisica 	:= regra_agecon_conv.cd_pessoa_fisica;
				vetor_regra_agecons_conv_w[i].dt_inicial_vigencia 	:= regra_agecon_conv.dt_inicial_vigencia;
				vetor_regra_agecons_conv_w[i].dt_final_vigencia 	:= regra_agecon_conv.dt_final_vigencia;
				vetor_regra_agecons_conv_w[i].ie_dia_semana 	:= regra_agecon_conv.ie_dia_semana;
				vetor_regra_agecons_conv_w[i].hr_inicial 	:= regra_agecon_conv.hr_inicial;
				vetor_regra_agecons_conv_w[i].hr_final 	:= regra_agecon_conv.hr_final;
				vetor_regra_agecons_conv_w[i].cd_municipio_ibge 	:= regra_agecon_conv.cd_municipio_ibge;
				vetor_regra_agecons_conv_w[i].ie_permite 	:= regra_agecon_conv.ie_permite;
						
				i := i + 1;
			end loop;			
			/* Fim regra_agecons_convenio*/
			
			
			/* Inicio agenda_consulta_regra */

			if (ie_regra_agenda_classific_w <> 'N') then
				if (ie_regra_classif_agecons_w <> 'N') AND (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then
					i := 1;
					vetor_regra_agecons_w .delete();
					for regra_agecon in C06
					loop	
						vetor_regra_agecons_w[i].nr_sequencia 	:= regra_agecon.nr_sequencia;
						vetor_regra_agecons_w[i].qt_permissao 	:= regra_agecon.qt_permissao;
						vetor_regra_agecons_w[i].ie_periodo 	:= regra_agecon.ie_periodo;
						vetor_regra_agecons_w[i].ds_mensagem 			:= regra_agecon.ds_mensagem;
						vetor_regra_agecons_w[i].ie_todas_classif 			:= regra_agecon.ie_todas_classif;
						vetor_regra_agecons_w[i].hr_inicial 		:= regra_agecon.hr_inicial;
						vetor_regra_agecons_w[i].hr_final 		:= regra_agecon.hr_final;
						vetor_regra_agecons_w[i].ie_todos_convenios 		:= regra_agecon.ie_todos_convenios;
						vetor_regra_agecons_w[i].ie_mesmo_pac 		:= regra_agecon.ie_mesmo_pac;
						vetor_regra_agecons_w[i].qt_idade_min 		:= regra_agecon.qt_idade_min;
						vetor_regra_agecons_w[i].qt_idade_max 		:= regra_agecon.qt_idade_max;
						
						vetor_regra_agecons_w[i].ie_classif_agenda 	:= regra_agecon.ie_classif_agenda;
						vetor_regra_agecons_w[i].ie_dia_semana 		:= regra_agecon.ie_dia_semana;
						vetor_regra_agecons_w[i].cd_convenio 		:= regra_agecon.cd_convenio;
						vetor_regra_agecons_w[i].cd_Agenda 		:= regra_agecon.cd_Agenda;
						vetor_regra_agecons_w[i].cd_perfil 		:= regra_agecon.cd_perfil;
								
						i := i + 1;
					end loop;
					
					cd_medico_www := cd_medico_agenda_w;
					
					qt_idade_pf_www := (coalesce(obter_dados_pf(cd_paciente_w, 'I'),0))::numeric;
				end if;
			end if;
			/* Fim agenda_consulta_regra*/
	

			if (qt_regra_alergia_w > 0) then

			ie_primeiro_horario_w := Obter_primeiro_horario_agenda(cd_agenda_w, cd_tipo_agenda_w, dt_agenda_w, ie_dia_Semana_w, ie_feriado_w, cd_estabelecimento_p, nm_usuario_p);
			
			end if;
			
			qt_horarios_livre_ger_w := 0;
			
			OPEN C02;
			LOOP
			FETCH C02 INTO
				ds_horario_w,
				ie_status_agenda_w,
				nr_Seq_Agenda_w,
				nr_minuto_duracao_w,
				cd_turno_w,
				nr_seq_turno_w,
				nr_seq_turno_esp_w,				
				nr_seq_grupo_agecons_w,
				ie_classif_agenda_w,
				nr_seq_preferencia_w,
				cd_medico_w,
				ie_encaixe_w,
				nr_seq_proc_interno_cs_w,
				cd_procedimento_cs_w,
				ie_origem_proced_cs_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				BEGIN
				ie_conv_cancelado_w := SUBSTR(Obter_se_Convenio_Cancelado(cd_convenio_w, ds_horario_w),1,2);
				if (coalesce(ie_conv_cancelado_w, 'N') = 'S') then
					goto finalc02;
				end if;
				
				/* Regra permite marcacao horarios */

				ds_considera_marc_hor_w := obter_se_perm_marc_excl(cd_agenda_w, ds_horario_w, nm_usuario_p, cd_perfil_w);
					if (ds_considera_marc_hor_w = 'N') then
						goto finalc02;
				end if;
				
				qt_marc_medico_w	:= 0;
				
				ie_gera_hor_w := Ageint_Obter_Se_ProcAdic_Turno(ds_horario_w, cd_agenda_w, nr_seq_ageint_item_w, cd_estabelecimento_p, nr_seq_ageint_p, nm_usuario_p);
				
				if (coalesce(nr_seq_turno_esp_w,0)	> 0) then
					select	max(ie_classif_agenda)
					into STRICT	ie_classif_turno_w
					from	agenda_turno_esp
					where	nr_sequencia = nr_seq_turno_esp_w;
				else
					select	max(ie_classif_agenda)
					into STRICT	ie_classif_turno_w
					from	agenda_turno
					where	nr_sequencia = nr_seq_turno_w;
				end if;

        if (coalesce(ie_classif_item_w::text, '') = '') and (ie_classif_agenda_w IS NOT NULL AND ie_classif_agenda_w::text <> '') and (agenda_classif_liberada(obter_usuario_ativo(), obter_perfil_ativo(), null, ie_classif_agenda_w, 'A') = 'N') then
          ie_gera_hor_w := 'N';
          goto finalc02;
        end if;
				
				if (ie_restringe_classif_w = 'S') and (ie_classif_agenda_w IS NOT NULL AND ie_classif_agenda_w::text <> '') and (ie_classif_agenda_w <> ie_classif_item_w) and (ie_classif_turno_w IS NOT NULL AND ie_classif_turno_w::text <> '') then					
					ie_gera_hor_w := 'N';
				/*end if;
				
				--Validar a regra "Classificacoes liberadas para o turno"				

				if	(ie_restringe_classif_w = 'S') then*/
					if (coalesce(nr_seq_turno_esp_w,0) = 0) then
						begin
						select	1
						into STRICT	qt_classif_lib_turno_w
						from	agenda_turno_classif_lib
						where	nr_seq_turno = nr_seq_turno_w  LIMIT 1;
						exception
						when no_data_found then
							qt_classif_lib_turno_w := 0;
						end;
					else
						begin
						select	1
						into STRICT	qt_classif_lib_turno_w
						from	agenda_turno_classif_lib
						where	nr_seq_turno_esp = nr_seq_turno_esp_w  LIMIT 1;
						exception
						when no_data_found then
							qt_classif_lib_turno_w := 0;
						end;
					end if;

					if (qt_classif_lib_turno_w > 0) then
						--(ie_gera_hor_w = 'N') then
						if (coalesce(nr_seq_turno_esp_w,0) = 0) then
							begin
							select	max(1)
							into STRICT	qt_classif_lib_turno_w
							from	agenda_turno_classif_lib
							where	ie_classif_agenda = ie_classif_item_w
							and	nr_seq_turno = nr_seq_turno_w;
							exception
							when no_data_found then
								qt_classif_lib_turno_w := 0;
							end;
						else
							begin
							select	max(1)
							into STRICT	qt_classif_lib_turno_w
							from	agenda_turno_classif_lib
							where	ie_classif_agenda = ie_classif_item_w
							and	nr_seq_turno_esp = nr_seq_turno_esp_w;
							exception
							when no_data_found then
								qt_classif_lib_turno_w := 0;
							end;					
						end if;

						if (qt_classif_lib_turno_w > 0) then
							ie_gera_hor_w := 'S';
						else
							ie_gera_hor_w := 'N';
						end if;
						
					end if;
          if (ie_gera_hor_w = 'N') then
						ie_gera_hor_w := ageint_valida_regra_classif(cd_estabelecimento_p,cd_convenio_w,cd_agenda_w,cd_medico_w,ds_horario_w,ie_classif_agenda_w,ie_classif_item_w);
					end if;
					qt_classif_lib_turno_w	:= 0;
				end if;
				
				if (qt_regra_alergia_w > 0) and (ie_primeiro_horario_w IS NOT NULL AND ie_primeiro_horario_w::text <> '') and (ie_primeiro_horario_w <> to_char(ds_horario_w, 'hh24:mi:ss')) then
					ie_gera_hor_w := 'N';
				end if;
				
				
				if (ie_restr_classif_int_w = 'S') and (nr_seq_classif_int_w IS NOT NULL AND nr_seq_classif_int_w::text <> '') and (nr_seq_classif_int_w <> nr_classif_item_w) then
					ie_gera_hor_w := 'N';
				end if;	

				ie_pref_lib_w := 'S';
				
				if (dt_agenda_w > trunc(clock_timestamp() + coalesce(qt_dias_caducar_pref_w,0))) then
					ie_pref_lib_w := obter_se_pref_lib_agenda(nr_seq_preferencia_w, cd_agenda_w, cd_perfil_w, cd_pessoa_usuario_w);
				end if;
						
				
				if (ie_pref_lib_w = 'N') then
					ie_gera_hor_w := 'N';
				end if;

				ie_hor_w := 'S';				
				
				--gdomingos				
				if (coalesce(cd_convenio_w, 0) <> 0 ) then	
					i := 1;
					--ageint_consiste_regra_conv C01
					ie_agenda_w	:= 'S';
					ie_excecao_paciente_w := 0;
					for i in 1..vetor_regra_agecons_conv_w.count loop
						if (ie_excecao_paciente_w = 0) then
							if		((vetor_regra_agecons_conv_w[i].cd_convenio = cd_convenio_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_convenio::text, '') = ''))						
							and		((vetor_regra_agecons_conv_w[i].cd_categoria = cd_categoria_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_categoria::text, '') = ''))
							and		((vetor_regra_agecons_conv_w[i].cd_plano_convenio = cd_plano_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_plano_convenio::text, '') = ''))
							and		(((vetor_regra_agecons_conv_w[i].cd_setor_atendimento = cd_setor_exclusivo_w) and coalesce(vetor_regra_agecons_conv_w[i].ie_forma_consiste_setor,'A') in ('A', 'E'))
							or (vetor_regra_agecons_conv_w[i]coalesce(.cd_setor_atendimento::text, '') = ''))
							and		((vetor_regra_agecons_conv_w[i].cd_especialidade = cd_especialidade_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_especialidade::text, '') = ''))
							and		((vetor_regra_agecons_conv_w[i].cd_medico = coalesce(cd_medico_marcacao_w,cd_medico_agenda_w)) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_medico::text, '') = ''))
							and		((coalesce(vetor_regra_agecons_conv_w[i].ie_primeiro_agendamento,'N') = 'S' and ie_agendado_w = 'N') or (coalesce(vetor_regra_agecons_conv_w[i].ie_primeiro_agendamento,'N') = 'N'))
							and		((vetor_regra_agecons_conv_w[i].cd_pessoa_fisica = cd_paciente_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_pessoa_fisica::text, '') = ''))
							and (trunc(ds_horario_w) >= vetor_regra_agecons_conv_w[i].dt_inicial_vigencia or vetor_regra_agecons_conv_w[i]coalesce(.dt_inicial_vigencia::text, '') = '')
							and (trunc(ds_horario_w) <= vetor_regra_agecons_conv_w[i].dt_final_vigencia or vetor_regra_agecons_conv_w[i]coalesce(.dt_final_vigencia::text, '') = '')
							and		((vetor_regra_agecons_conv_w[i].ie_dia_semana = ie_dia_semana_w) or ((vetor_regra_agecons_conv_w[i].ie_dia_semana = 9) and (ie_dia_Semana_w not in (7,1))) or (vetor_regra_agecons_conv_w[i]coalesce(.ie_dia_semana::text, '') = ''))
							and (ds_horario_w between to_date(to_char(ds_horario_w,'dd/mm/yyyy') ||' '|| to_char(coalesce(vetor_regra_agecons_conv_w[i].hr_inicial,trunc(ds_horario_w,'dd')),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
							and 		to_date(to_char(ds_horario_w,'dd/mm/yyyy') ||' '|| to_char(coalesce(vetor_regra_agecons_conv_w[i].hr_final,trunc(ds_horario_w)+86399/86400),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
							and 		((vetor_regra_agecons_conv_w[i].cd_municipio_ibge = cd_municipio_ibge_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_municipio_ibge::text, '') = '')) then													
								ie_agenda_w := coalesce(vetor_regra_agecons_conv_w[i].ie_permite, 'S');
							end if;
							
							if		((vetor_regra_agecons_conv_w[i].cd_convenio = cd_convenio_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_convenio::text, '') = ''))						
							and		((vetor_regra_agecons_conv_w[i].cd_categoria = cd_categoria_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_categoria::text, '') = ''))
							and		((vetor_regra_agecons_conv_w[i].cd_plano_convenio = cd_plano_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_plano_convenio::text, '') = ''))
							and		(((vetor_regra_agecons_conv_w[i].cd_setor_atendimento = cd_setor_exclusivo_w) and coalesce(vetor_regra_agecons_conv_w[i].ie_forma_consiste_setor,'A') in ('A', 'E'))
							or (vetor_regra_agecons_conv_w[i]coalesce(.cd_setor_atendimento::text, '') = ''))
							and		((vetor_regra_agecons_conv_w[i].cd_especialidade = cd_especialidade_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_especialidade::text, '') = ''))
							and		((vetor_regra_agecons_conv_w[i].cd_medico = coalesce(cd_medico_marcacao_w,cd_medico_agenda_w)) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_medico::text, '') = ''))
							and		((coalesce(vetor_regra_agecons_conv_w[i].ie_primeiro_agendamento,'N') = 'S' and ie_agendado_w = 'N') or (coalesce(vetor_regra_agecons_conv_w[i].ie_primeiro_agendamento,'N') = 'N'))
							and		((vetor_regra_agecons_conv_w[i].cd_pessoa_fisica = cd_paciente_w) or (vetor_regra_agecons_conv_w[i]coalesce(.cd_pessoa_fisica::text, '') = ''))
							and (trunc(ds_horario_w) >= vetor_regra_agecons_conv_w[i].dt_inicial_vigencia or vetor_regra_agecons_conv_w[i]coalesce(.dt_inicial_vigencia::text, '') = '')
							and (trunc(ds_horario_w) <= vetor_regra_agecons_conv_w[i].dt_final_vigencia or vetor_regra_agecons_conv_w[i]coalesce(.dt_final_vigencia::text, '') = '')
							and		((vetor_regra_agecons_conv_w[i].ie_dia_semana = ie_dia_semana_w) or ((vetor_regra_agecons_conv_w[i].ie_dia_semana = 9) and (ie_dia_Semana_w not in (7,1))) or (vetor_regra_agecons_conv_w[i]coalesce(.ie_dia_semana::text, '') = ''))
							and (ds_horario_w between to_date(to_char(ds_horario_w,'dd/mm/yyyy') ||' '|| to_char(coalesce(vetor_regra_agecons_conv_w[i].hr_inicial,trunc(ds_horario_w,'dd')),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
							and 		to_date(to_char(ds_horario_w,'dd/mm/yyyy') ||' '|| to_char(coalesce(vetor_regra_agecons_conv_w[i].hr_final,trunc(ds_horario_w)+86399/86400),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
							and		vetor_regra_agecons_conv_w[i].ie_permite = 'S' then
								ie_excecao_paciente_w := 1;
							end if;
						end if;
					end loop;

					if (ie_agenda_w = 'N') and (ie_excecao_paciente_w = 0) then
						ie_hor_w	:= 'N';
					end if;
				end if;
				
				if (qt_min_w IS NOT NULL AND qt_min_w::text <> '') and
					(ds_horario_w <= (clock_timestamp() + coalesce(qt_min_w,0)/1440)) then
					ie_hor_w	:= 'N';
				end if;

				ie_status_agenda_controle_w	:= ie_status_agenda_w;


				if (qt_regra_medico_w > 0) and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					ie_turno_medico_w	:= Ageint_Obter_Se_Turno_Medico(cd_pessoa_fisica_w, ds_horario_w, cd_agenda_w, nm_usuario_p, nr_seq_medico_regra_w, cd_estabelecimento_p);
				else
					ie_turno_medico_w	:= 'S';
				end if;

				SELECT	coalesce(max(1), 0)
				INTO STRICT	qt_encaixe_w
				FROM	ageint_marcacao_usuario
				WHERE	cd_agenda	= cd_agenda_w
				AND	hr_agenda	= ds_horario_w
				AND	nr_seq_ageint	= nr_seq_ageint_p
				AND	coalesce(ie_gerado,'N') = 'N'
				AND	coalesce(ie_encaixe,'N') = 'S';
				if (qt_encaixe_w > 0) then
					goto finalenc_cons;
				end if;
				
				if (ie_consistir_marc_encaixe_w = 'S') then
					SELECT	COUNT(*)
					INTO STRICT	qt_encaixe_recorrencia_w
					FROM	ageint_marcacao_usuario
					WHERE	cd_agenda	= cd_agenda_w
					AND	hr_agenda	between ds_horario_w and ds_horario_w + (nr_min_dur_controle_w - 1) / 1440
					AND	coalesce(ie_encaixe,'N') = 'S';
					
					if (qt_encaixe_recorrencia_w = 0) then
						SELECT	COUNT(*)
						INTO STRICT	qt_encaixe_recorrencia_w
						FROM	ageint_marcacao_usuario
						WHERE	cd_agenda	= cd_agenda_w
						AND	ds_horario_w	between hr_agenda and hr_Agenda + (nr_minuto_duracao - 1) / 1440
						AND	coalesce(ie_encaixe,'N') = 'S';
					end if;
					if (qt_encaixe_recorrencia_w > 0) then
						goto finalenc_cons;
					end if;
				end if;

				if (ie_apres_hr_medico_w = 'N') and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (ie_status_agenda_w	= 'L') then
					SELECT	COUNT(*)
					INTO STRICT	qt_marc_medico_w
					FROM	ageint_marcacao_usuario
					WHERE	cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	hr_Agenda between trunc(ds_horario_w) and trunc(ds_horario_w) + 86339/86400
					AND	(hr_agenda		between ds_horario_w and (ds_horario_w + (nr_minuto_duracao_w - 1) /1440)
					or	(ds_horario_w		between hr_agenda and (hr_Agenda + (nr_minuto_duracao - 1) /1440)))
					and	nr_Seq_Agenda		<> nr_seq_Agenda_w;
				end if;
				if (nr_seq_grupo_agecons_w > 0) then
					begin
					select	1
					into STRICT	qt_marc_grupo_w
					from	agenda_consulta a,
						ageint_agendas_grupo b
					where	a.cd_agenda		= b.cd_agenda
					and	b.nr_seq_grupo 		= nr_seq_grupo_agecons_w
					and	a.dt_agenda 		= ds_horario_w
					and	a.ie_status_agenda	not in ('L','C','B')  LIMIT 1;							
					exception
					when others then
						qt_marc_grupo_w := 0;
					end;
				end if;

				IF (nr_minuto_dur_ant_w IS NOT NULL AND nr_minuto_dur_ant_w::text <> '') AND (nr_minuto_dur_ant_w > 0) THEN
					IF (ds_horario_w >= dt_age_ant_w) AND (ds_horario_w < dt_age_ant_w + nr_minuto_dur_ant_w / 1440) THEN
						ie_status_agenda_w	:= 'N';
					END IF;
				END IF;
				
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then				
					SELECT * FROM Ageint_Obter_Bloq_Medico(cd_pessoa_fisica_w, cd_agenda_w, ds_horario_w, cd_convenio_w, ds_bloqueio_w, qt_bloq_w) INTO STRICT ds_bloqueio_w, qt_bloq_w;
					if (ds_bloqueio_w IS NOT NULL AND ds_bloqueio_w::text <> '') or (qt_bloq_w	> 0) then
						ie_status_agenda_w	:= 'B';
					end if;
				end if;
				
				if (ie_regra_turno_conv_w = 'S') then
					ds_erro_turno_w := consistir_turno_convenio(nr_Seq_Agenda_w, cd_agenda_w, ds_horario_w, nr_seq_turno_w, cd_convenio_w, cd_categoria_w, ds_erro_turno_w, nm_usuario_p, cd_estabelecimento_p, null);
					if (ds_erro_turno_w IS NOT NULL AND ds_erro_turno_w::text <> '') then
						goto finalenc_cons;
					end if;
					
					ds_erro_turno_w := consistir_turno_esp_convenio(cd_agenda_w, dt_agenda_w, nr_seq_turno_esp_w, cd_convenio_w, nr_seq_agenda_w, ds_erro_turno_w, cd_categoria_w);
					if (ds_erro_turno_w IS NOT NULL AND ds_erro_turno_w::text <> '') then
						goto finalenc_cons;
					end if;
				end if;
				
				if (ie_status_agenda_w = 'B') and (ie_gerar_hor_bloq_w = 'N') then
					ie_hor_w := 'N';
				end if;
				
				--Validar faixa etaria do paciente de acordo com a idade minima/maxima definidos no cadastro do turno da agenda
				if (ie_regra_idade_agecons_w = 'B') then
					SELECT * FROM Consiste_Idade_Agenda_Pac(cd_agenda_w, ds_horario_w, qt_idade_w, nr_seq_ageint_p, ds_erro_idade_w, ds_erro_idade_turno_esp_w, nm_usuario_p) INTO STRICT ds_erro_idade_w, ds_erro_idade_turno_esp_w;				
					
					if (ds_erro_idade_w IS NOT NULL AND ds_erro_idade_w::text <> '') and ((coalesce(nr_seq_turno_esp_w::text, '') = '') or (nr_seq_turno_esp_w = 0)) then
						ie_hor_w := 'N';
					end if;
					
					if (ds_erro_idade_turno_esp_w IS NOT NULL AND ds_erro_idade_turno_esp_w::text <> '') and ((nr_seq_turno_esp_w IS NOT NULL AND nr_seq_turno_esp_w::text <> '') or (nr_seq_turno_esp_w <> 0)) then
						ie_hor_w := 'N';
					end if;
					
				end if;

				if (ie_regra_classif_agecons_w <> 'N') and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then
					/*consistir_classif_agecon(	cd_estabelecimento_p,
												cd_pessoa_fisica_w,
												ds_horario_w,
												cd_agenda_w,
												cd_convenio_w,
												null,
												null,
												null,
												ie_classif_item_w,
												nr_Seq_Agenda_w,
												ds_erro_classif_w,
												ie_erro_classif_w
												);*/


					-- INiCIO AGENDA_CONSULTA_REGRA
					
					select	max(ie_classif_agenda)
					into STRICT	ie_classif_agenda_www
					from	agenda_consulta
					where	nr_sequencia  = nr_Seq_Agenda_w;
					
					ie_dia_semana_www := pkg_date_utils.get_WeekDay(ds_horario_w);
					
					dt_referencia_w	:= trunc(ds_horario_w);
					nr_seq_regra_mens_w := 0;
					nr_seq_regra_sem_w := 0;
					nr_seq_regra_dia_w := 0;
					ie_erro_classif_w := 'S';
					ds_erro_classif_w := '';
					i := 1;
					for i in 1..vetor_regra_agecons_w.count loop											
						if	((vetor_regra_agecons_w[i].ie_classif_agenda = coalesce(ie_classif_item_w,ie_classif_agenda_www))	OR (vetor_regra_agecons_w[i]coalesce(.ie_classif_agenda::text, '') = ''))
						AND	((vetor_regra_agecons_w[i].ie_dia_semana		= ie_dia_semana_www) OR (vetor_regra_agecons_w[i]coalesce(.ie_dia_semana::text, '') = '') OR ((vetor_regra_agecons_w[i].ie_dia_semana = 9) AND (ie_dia_semana_www NOT IN (7,1))))
						AND	((vetor_regra_agecons_w[i].cd_convenio = cd_convenio_w) OR (vetor_regra_agecons_w[i]coalesce(.cd_convenio::text, '') = ''))
						AND (ds_horario_w BETWEEN TO_DATE(TO_CHAR(ds_horario_w,'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(vetor_regra_agecons_w[i].hr_inicial,TRUNC(ds_horario_w,'dd')),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
									AND 	TO_DATE(TO_CHAR(ds_horario_w,'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(vetor_regra_agecons_w[i].hr_final,TRUNC(ds_horario_w)+86399/86400),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
						AND	((obter_profissional_agenda(vetor_regra_agecons_w[i].cd_Agenda)	= cd_medico_www) or ((obter_tipo_agenda(cd_agenda_w) = 5) and cd_medico_www = '0'))						
						AND (vetor_regra_agecons_w[i].cd_perfil = cd_perfil_w OR vetor_regra_agecons_w[i]coalesce(.cd_perfil::text, '') = '')
						and (qt_idade_pf_www >= coalesce(vetor_regra_agecons_w[i].qt_idade_min, qt_idade_pf_www))
						and (qt_idade_pf_www <= coalesce(vetor_regra_agecons_w[i].qt_idade_max, qt_idade_pf_www)) then
							if (vetor_regra_agecons_w[i].ie_periodo	= 'M') then
								/* CONSISTeNCIAS consistir_classif_agecon - CURSOR C01  */

								nr_seq_regra_mens_w	:= vetor_regra_agecons_w[i].nr_sequencia;
								qt_regra_mens_w	:= coalesce(vetor_regra_agecons_w[i].qt_permissao, 0);
								ds_mensagem_mens_w	:= substr(vetor_regra_agecons_w[i].ds_mensagem, 1, 4000);
								ie_todas_classif_mens_w := coalesce(vetor_regra_agecons_w[i].ie_todas_classif, 'N');
								hr_inicial_mens_w	:= vetor_regra_agecons_w[i].hr_inicial;
								hr_final_mens_w	:= vetor_regra_agecons_w[i].hr_final;
								ie_todos_convenio_mens_w := coalesce(vetor_regra_agecons_w[i].ie_todos_convenios, 'N');
								ie_mesmo_pac_mens_w	:= coalesce(vetor_regra_agecons_w[i].ie_mesmo_pac, 'N');
								qt_idade_min_mens_w	:= vetor_regra_agecons_w[i].qt_idade_min;
								qt_idade_max_mens_w	:= vetor_regra_agecons_w[i].qt_idade_max;
							elsif (vetor_regra_agecons_w[i].ie_periodo	= 'S') then
								/* CONSISTeNCIAS consistir_classif_agecon - CURSOR C02  */

								nr_seq_regra_sem_w	:= vetor_regra_agecons_w[i].nr_sequencia;
								qt_regra_sem_w	:= coalesce(vetor_regra_agecons_w[i].qt_permissao, 0);
								ds_mensagem_sem_w	:= substr(vetor_regra_agecons_w[i].ds_mensagem, 1, 4000);
								ie_todas_classif_sem_w := coalesce(vetor_regra_agecons_w[i].ie_todas_classif, 'N');
								hr_inicial_sem_w	:= vetor_regra_agecons_w[i].hr_inicial;
								hr_final_sem_w	:= vetor_regra_agecons_w[i].hr_final;
								ie_todos_convenio_sem_w := coalesce(vetor_regra_agecons_w[i].ie_todos_convenios, 'N');
								ie_mesmo_pac_sem_w	:= coalesce(vetor_regra_agecons_w[i].ie_mesmo_pac, 'N');
								qt_idade_min_sem_w	:= vetor_regra_agecons_w[i].qt_idade_min;
								qt_idade_max_sem_w	:= vetor_regra_agecons_w[i].qt_idade_max;
							else
								/* CONSISTeNCIAS consistir_classif_agecon - CURSOR C03  */

								nr_seq_regra_dia_w	:= vetor_regra_agecons_w[i].nr_sequencia;
								qt_regra_dia_w	:= coalesce(vetor_regra_agecons_w[i].qt_permissao, 0);
								ds_mensagem_dia_w	:= substr(vetor_regra_agecons_w[i].ds_mensagem, 1, 4000);
								ie_todas_classif_dia_w := coalesce(vetor_regra_agecons_w[i].ie_todas_classif, 'N');
								hr_inicial_dia_w	:= vetor_regra_agecons_w[i].hr_inicial;
								hr_final_dia_w	:= vetor_regra_agecons_w[i].hr_final;
								ie_todos_convenio_dia_w := coalesce(vetor_regra_agecons_w[i].ie_todos_convenios, 'N');
								ie_mesmo_pac_dia_w	:= coalesce(vetor_regra_agecons_w[i].ie_mesmo_pac, 'N');
								qt_idade_min_dia_w	:= vetor_regra_agecons_w[i].qt_idade_min;
								qt_idade_max_dia_w	:= vetor_regra_agecons_w[i].qt_idade_max;
							end if;
						end if;																		
						
					end loop;
					
					/* CONSISTeNCIAS consistir_classif_agecon - CURSOR C01  */

					IF (nr_seq_regra_mens_w > 0) THEN						
						SELECT	COUNT(*)
						INTO STRICT	qt_agenda_w
						FROM	agenda_consulta
						WHERE	cd_agenda				= cd_agenda_w
						AND	TRUNC(dt_agenda,'month')		= TRUNC(dt_referencia_w,'month')
						AND	ie_status_agenda NOT IN ('C','L','F')
						AND	obter_profissional_agenda(cd_agenda)	= cd_medico_www
						AND 	nr_sequencia	<> nr_Seq_Agenda_w
						AND	((ie_classif_agenda			= coalesce(ie_classif_item_w,ie_classif_agenda_www)) OR (ie_todas_classif_mens_w = 'S'))
						AND	((cd_convenio				= cd_convenio_w) OR (coalesce(cd_convenio_w::text, '') = '') OR (ie_todos_convenio_mens_w = 'S'))
						AND (dt_agenda BETWEEN TO_DATE(TO_CHAR(dt_agenda,'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_inicial_mens_w,TRUNC(dt_agenda,'dd')),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
							AND 	TO_DATE(TO_CHAR(dt_agenda,'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_final_mens_w,TRUNC(dt_agenda)+86399/86400),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
						AND	(nm_paciente IS NOT NULL AND nm_paciente::text <> '')
						AND	((ie_mesmo_pac_mens_w = 'S' AND cd_pessoa_fisica = cd_pessoa_fisica_w) or (ie_mesmo_pac_mens_w = 'N'))
						and	(obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric  >= coalesce(qt_idade_min_mens_w, (obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric )
						and	(obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric  <= coalesce(qt_idade_max_mens_w, (obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric );
					
						IF (qt_agenda_w >= qt_regra_mens_w) THEN
							ie_erro_classif_w	:= 'N';
						END IF;
						
						IF (ie_erro_classif_w IN ('N', 'Q')) THEN
							IF (ds_mensagem_mens_w IS NOT NULL AND ds_mensagem_mens_w::text <> '') THEN
								ds_erro_classif_w := substr(ds_mensagem_mens_w, 1, 4000);
							ELSE
								ds_erro_classif_w := substr(WHEB_MENSAGEM_PCK.get_texto(277563,NULL), 1, 4000);
							END IF;
						END IF;
					END IF;
					
					/* CONSISTeNCIAS consistir_classif_agecon - CURSOR C02  */

					IF (ie_erro_classif_w <> 'N') THEN
						IF (nr_seq_regra_sem_w > 0) THEN													
							SELECT	COUNT(*)
							INTO STRICT	qt_agenda_w
							FROM	agenda_consulta
							WHERE	cd_agenda				= cd_agenda_w
							AND	TRUNC(dt_agenda) BETWEEN obter_inicio_fim_semana(dt_referencia_w,'I') AND obter_inicio_fim_semana(dt_referencia_w,'F')
							AND	ie_status_agenda NOT IN ('C','L','F')
							AND	obter_profissional_agenda(cd_agenda)	= cd_medico_www
							AND 	nr_sequencia	<> nr_Seq_Agenda_w
							AND	((ie_classif_agenda			= coalesce(ie_classif_item_w,ie_classif_agenda_www)) OR (ie_todas_classif_sem_w = 'S'))
							AND	((cd_convenio				= cd_convenio_w) OR (coalesce(cd_convenio_w::text, '') = '') OR (ie_todos_convenio_sem_w = 'S'))
							AND (dt_agenda BETWEEN TO_DATE(TO_CHAR(dt_agenda,'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_inicial_sem_w,TRUNC(dt_agenda,'dd')),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
							AND 	TO_DATE(TO_CHAR(dt_agenda,'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_final_sem_w,TRUNC(dt_agenda)+86399/86400),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
							AND	(nm_paciente IS NOT NULL AND nm_paciente::text <> '')
							AND	((ie_mesmo_pac_sem_w = 'S' AND cd_pessoa_fisica = cd_pessoa_fisica_w) or (ie_mesmo_pac_sem_w = 'N'))
							and	(obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric  >= coalesce(qt_idade_min_sem_w, (obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric )
							and	(obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric  <= coalesce(qt_idade_max_sem_w, (obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric );
							
							IF (qt_agenda_w >= qt_regra_sem_w) THEN
								ie_erro_classif_w	:= 'N';
							END IF;
							
							IF (ie_erro_classif_w IN ('N', 'Q')) THEN
								IF (ds_mensagem_sem_w IS NOT NULL AND ds_mensagem_sem_w::text <> '') THEN
									ds_erro_classif_w := substr(ds_mensagem_sem_w, 1, 4000);
								ELSE
									ds_erro_classif_w := substr(WHEB_MENSAGEM_PCK.get_texto(277563,NULL), 1, 4000);
								END IF;
							END IF;
							
						END IF;
					END IF;
					
					/* CONSISTeNCIAS consistir_classif_agecon - CURSOR C03 */

					IF (ie_erro_classif_w <> 'N') THEN															
						IF (nr_seq_regra_dia_w > 0) THEN																								
							SELECT	COUNT(*)
							INTO STRICT	qt_agenda_w
							FROM	agenda_consulta
							WHERE	cd_agenda				= cd_agenda_w
							AND	TRUNC(dt_agenda)			= dt_referencia_w
							AND	ie_status_agenda NOT IN ('C','L','F')
							AND	obter_profissional_agenda(cd_agenda)	= cd_medico_www
							AND 	nr_sequencia	<> nr_Seq_Agenda_w
							AND	((ie_classif_agenda			= coalesce(ie_classif_item_w,ie_classif_agenda_www)) OR (ie_todas_classif_dia_w = 'S'))
							AND	((cd_convenio				= cd_convenio_w) OR (coalesce(cd_convenio_w::text, '') = '') OR (ie_todos_convenio_dia_w = 'S'))
							AND (dt_agenda BETWEEN TO_DATE(TO_CHAR(dt_agenda,'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_inicial_dia_w,TRUNC(dt_agenda,'dd')),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
							AND 	TO_DATE(TO_CHAR(dt_agenda,'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_final_dia_w,TRUNC(dt_agenda)+86399/86400),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
							AND	(nm_paciente IS NOT NULL AND nm_paciente::text <> '')
							AND	((ie_mesmo_pac_dia_w = 'S' AND cd_pessoa_fisica = cd_pessoa_fisica_w) or (ie_mesmo_pac_dia_w = 'N'))
							and	(obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric  >= coalesce(qt_idade_min_dia_w, (obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric )
							and	(obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric  <= coalesce(qt_idade_max_dia_w, (obter_dados_pf(cd_pessoa_fisica, 'I'))::numeric );
							
							IF (qt_agenda_w >= qt_regra_dia_w) THEN
								ie_erro_classif_w	:= 'N';
							END IF;
							
							IF (ie_erro_classif_w IN ('N', 'Q')) THEN
								IF (ds_mensagem_dia_w IS NOT NULL AND ds_mensagem_dia_w::text <> '') THEN
									ds_erro_classif_w := substr(ds_mensagem_dia_w, 1, 4000);
								ELSE
									ds_erro_classif_w := substr(WHEB_MENSAGEM_PCK.get_texto(277563,NULL), 1, 4000);
								END IF;
							END IF;
							
						END IF;
					END IF;
				
					if (ie_erro_classif_w <> 'S') then
						ie_hor_w := 'N';
					end if;
					
					-- FIM AGENDA_CONSULTA_REGRA
				end if;
				
				nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
									cd_agenda_w,
									ie_classif_item_w, -- no caso de exames, ou ie_classif_item_w para consultas/servicos
									null, -- no caso de exames, ou null para consultas
									null, -- nao considerado pois nao esta indo para agenda_consulta
									obter_setor_regras_ageint(cd_tipo_agenda_w,cd_agenda_w,cd_procedimento_w,'N',nm_usuario_p,cd_estabelecimento_p),
									nr_seq_proc_interno_w,
									cd_procedimento_w,
									ie_origem_proced_w,
									cd_pessoa_fisica_w, -- verificar no insert o campo a ser utilizado
									ds_horario_w, -- verificar no insert o campo a ser utilizado
									'N',
									'N');
				IF (nr_seq_regra_bloq_w = 0) and (ie_gera_hor_w = 'S') AND (qt_encaixe_w	= 0) and (ie_turno_medico_w = 'S') and (qt_marc_medico_w = 0) and
					--(ds_erro_hor_w is null) and
					(coalesce(ds_erro_turno_w::text, '') = '') and (ie_hor_w = 'S') and (qt_encaixe_recorrencia_w	= 0) and (ie_conv_cancelado_w = 'N') then
					
					ds_erro_hor_w	:= '';
					if (ie_consiste_hor_medico_w	= 'S') AND (ie_status_agenda_w in ('L', 'LF', 'B')) then
						ds_erro_hor_w := consistir_horario_medico(nr_seq_agenda_w, null, nr_minuto_duracao_w, ds_erro_hor_w);
					end if;
					
					if ((coalesce(ds_erro_hor_w::text, '') = '') AND
						((qt_horarios_livre_ger_w < qt_horarios_ageint_w) OR (ie_status_agenda_w <> 'L') OR (qt_horarios_ageint_w = 0))) then
						ie_perm_pf_classif_w := obter_se_perm_pf_classif(cd_funcao_p         => 869,
                                            cd_agenda_p         => cd_agenda_w,
                                            cd_pessoa_fisica_p  => cd_paciente_w,
                                            dt_referencia_p     => dt_agenda_p,
											dt_agenda_p     	=> ds_horario_w
                                            );
						if (ie_perm_pf_classif_w = 'S') THEN
							nr_sequencia_ag := ageint_horarios_usuario_w.count() + 1;

							select 	nextval('ageint_horarios_usuario_seq')
							into STRICT	ageint_horarios_usuario_seq_w
							;

							ageint_horarios_usuario_w[nr_sequencia_ag].nr_sequencia := ageint_horarios_usuario_seq_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].cd_agenda := cd_agenda_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].hr_agenda := ds_horario_w;
							IF qt_marc_grupo_w = 0 THEN
								ageint_horarios_usuario_w[nr_sequencia_ag].ie_status_agenda := ie_status_agenda_w;
							ELSE
								ageint_horarios_usuario_w[nr_sequencia_ag].ie_status_agenda := 'N';
							END IF;
							ageint_horarios_usuario_w[nr_sequencia_ag].nm_usuario := nm_usuario_p;
							ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_agenda := nr_seq_agenda_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].nr_minuto_duracao := nr_minuto_duracao_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_ageint_lib := nr_seq_ageint_lib_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].cd_turno := cd_turno_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].ie_encaixe := ie_encaixe_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].cd_pessoa_fisica := cd_pessoa_fisica_w;
							ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_turno := nr_seq_turno_w;

							if (qt_horarios_ageint_w > 0) then
								if (ie_status_agenda_w	= 'L') then
									qt_horarios_livre_ger_w := qt_horarios_livre_ger_w + 1;
								elsif (ie_status_agenda_w	= 'N') then
									select 	count(*)
									into STRICT	qt_agendado_w
									from	ageint_marcacao_usuario
									where	nr_seq_agenda = nr_seq_agenda_w
									and		nr_seq_ageint = nr_seq_ageint_p
									and		coalesce(ie_gerado,'N') = 'N';
									if (qt_agendado_w > 0) then
										qt_horarios_livre_ger_w := qt_horarios_livre_ger_w + 1;
									end if;
								end if;
							end if;
						end if;
					end if;
				END IF;
				<<finalenc_cons>>
				if (ie_status_agenda_controle_w	= 'N') then
					SELECT	coalesce(MAX(nr_minuto_duracao),0)
					INTO STRICT	nr_minuto_dur_ant_w
					FROM	ageint_marcacao_usuario
					WHERE	cd_agenda	= cd_agenda_w
					AND	hr_agenda	= ds_horario_w
					AND	nr_seq_ageint	= nr_seq_ageint_p
					AND	coalesce(ie_gerado,'N') = 'N'
					AND	coalesce(ie_encaixe,'N') = 'N';

					dt_age_ant_w	:= ds_horario_w;
				end if;
				<<finalc02>>
					ds_bloqueio_w	:= '';
					qt_bloq_w	:= 0;
				END;
			END LOOP;
			CLOSE C02;
			if (ie_mostrar_sem_hor_w = 'N') then
				inserir_ageint_hor_usu;
				begin
				select 1
				into STRICT	qt_hor_ageint_lib_w
				from	ageint_horarios_usuario
				where	nr_Seq_Ageint_lib = nr_Seq_Ageint_lib_w  LIMIT 1;							
				exception
				when others then
					qt_hor_ageint_lib_w := 0;
				end;
				if (qt_hor_ageint_lib_w = 0)  then
					update	ageint_lib_usuario
					set	ie_apres_marc = 'N'
					where	nr_sequencia = nr_Seq_Ageint_lib_w;
				end if;
			end if;
      end;
		end if;


      null;
		end;
	ELSE
		/*
		GERAR HORARIOS AGENDA DE SERVICOS
		*/
		CALL Gerar_Horario_Agenda_Servico(cd_estabelecimento_p, cd_agenda_w, dt_agenda_w, nm_usuario_p);
		
		if (qt_regra_alergia_w > 0) then
			
			ie_primeiro_horario_w := Obter_primeiro_horario_agenda(cd_agenda_w, cd_tipo_agenda_w, dt_agenda_w, ie_dia_Semana_w, ie_feriado_w, cd_estabelecimento_p, nm_usuario_p);
			
		end if;

		OPEN C02;
		LOOP
		FETCH C02 INTO
			ds_horario_w,
			ie_status_agenda_w,
			nr_Seq_Agenda_w,
			nr_minuto_duracao_w,
			cd_turno_w,
			nr_seq_turno_w,
			nr_seq_turno_esp_w,			
			nr_seq_grupo_agecons_w,
			ie_classif_agenda_w,
			nr_seq_preferencia_w,
			cd_medico_w,
			ie_encaixe_w,
            nr_seq_proc_interno_cs_w,
			cd_procedimento_cs_w,
			ie_origem_proced_cs_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			BEGIN
			ie_conv_cancelado_w := SUBSTR(Obter_se_Convenio_Cancelado(cd_convenio_w, ds_horario_w),1,2);
			if (coalesce(ie_conv_cancelado_w, 'N') = 'S') then
				goto finalc022;
			end if;
			
			if (coalesce(ie_consiste_contra_ref_w, 'S') = 'N' and (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '')) then
                if (nr_seq_proc_interno_cs_w <> nr_seq_proc_interno_w or cd_procedimento_w <> cd_procedimento_cs_w or ie_origem_proced_w <> ie_origem_proced_cs_w  )  then
                    goto finalc022;
                end if;
			end if;
			
			ie_gera_hor_w := Ageint_Obter_Se_ProcAdic_Turno(ds_horario_w, cd_agenda_w, nr_seq_ageint_item_w, cd_estabelecimento_p, nr_seq_ageint_p, nm_usuario_p);

       if (qt_dias_fut_w > 0) and (dt_agenda_w > trunc(clock_timestamp() + qt_dias_fut_w)) then
          ie_gera_hor_w := 'N';
          update	ageint_lib_usuario
          set	ie_apres_marc = 'N'
          where	nr_sequencia = nr_Seq_Ageint_lib_w;
        end if;
						
			if (ie_restringe_classif_w = 'S') and (ie_classif_agenda_w IS NOT NULL AND ie_classif_agenda_w::text <> '') and (ie_classif_agenda_w <> ie_classif_item_w) then
				ie_gera_hor_w := 'N';
				
				--Validar a regra "Classificacoes liberadas para o turno"
				begin
				
				select	max(1)
				into STRICT	qt_classif_lib_turno_w
				from	agenda_turno_classif_lib
				where	nr_seq_turno = nr_seq_turno_w;
				exception
				when no_data_found then
					qt_classif_lib_turno_w := 0;
				end;
				
				if (qt_classif_lib_turno_w > 0) then
					begin
					select	max(1)					
					into STRICT	qt_classif_lib_turno_w
					from	agenda_turno_classif_lib
					where	ie_classif_agenda = ie_classif_item_w
					and		nr_seq_turno = nr_seq_turno_w;
					exception
					when no_data_found then
						qt_classif_lib_turno_w := 0;
					end;
											
					if (qt_classif_lib_turno_w > 0) then
						ie_gera_hor_w := 'S';
					else
						ie_gera_hor_w := 'N';
					end if;
					
				end if;
				qt_classif_lib_turno_w	:= 0;
			end if;	

			if (qt_regra_alergia_w > 0) and (ie_primeiro_horario_w IS NOT NULL AND ie_primeiro_horario_w::text <> '') and (ie_primeiro_horario_w <> to_char(ds_horario_w, 'hh24:mi:ss')) then
				ie_gera_hor_w := 'N';
			end if;			
			

			ie_status_agenda_controle_w	:= ie_status_agenda_w;

			SELECT	coalesce(max(1), 0)
			INTO STRICT	qt_encaixe_w
			FROM	ageint_marcacao_usuario
			WHERE	cd_agenda	= cd_agenda_w
			AND	hr_agenda	= ds_horario_w
			AND	nr_seq_ageint	= nr_seq_ageint_p
			AND	coalesce(ie_gerado,'N') = 'N'
			AND	coalesce(ie_encaixe,'N') = 'S';

			IF (nr_minuto_dur_ant_w IS NOT NULL AND nr_minuto_dur_ant_w::text <> '') AND (nr_minuto_dur_ant_w > 0) THEN
				IF (ds_horario_w >= dt_age_ant_w) AND (ds_horario_w < dt_age_ant_w + nr_minuto_dur_ant_w / 1440) THEN
					ie_status_agenda_w	:= 'N';
				END IF;
			END IF;
			
			if (ie_status_agenda_w	= 'B') then
				ds_bloqueio_w	:= substr(ageint_obter_mot_bloq(cd_agenda_w, ds_horario_w, ie_Dia_semana_w), 1, 4000);
			end if;
			
			if (coalesce(ds_bloqueio_w::text, '') = '') then
				ds_bloqueio_w		:= substr(Ageint_Obter_Mot_Bloq_Exame(nr_seq_proc_interno_w, cd_agenda_w, ds_horario_w, cd_paciente_w), 1, 4000);
				if (ds_bloqueio_w IS NOT NULL AND ds_bloqueio_w::text <> '') then
					ie_status_agenda_w	:= 'B';
				end if;
				
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (coalesce(ds_bloqueio_w::text, '') = '') then
					SELECT * FROM Ageint_Obter_Bloq_Medico(cd_pessoa_fisica_w, cd_agenda_w, ds_horario_w, cd_convenio_w, ds_bloqueio_w, qt_bloq_w) INTO STRICT ds_bloqueio_w, qt_bloq_w;
					--ds_bloqueio_w		:= Ageint_Obter_Mot_Bloq_Medico(cd_pessoa_fisica_w, cd_agenda_w, ds_horario_w);
					if (ds_bloqueio_w IS NOT NULL AND ds_bloqueio_w::text <> '') or (qt_bloq_w	> 0) then
						ie_status_agenda_w	:= 'B';
					end if;
				end if;
			end if;

			--Validar faixa etaria do paciente de acordo com a idade minima/maxima definidos no cadastro do turno da agenda
			SELECT * FROM Consiste_Idade_Agenda_Pac(cd_agenda_w, ds_horario_w, qt_idade_w, nr_seq_ageint_p, ds_perm_faixa_etaria_w, ds_erro_idade_turno_esp_w, nm_usuario_p) INTO STRICT ds_perm_faixa_etaria_w, ds_erro_idade_turno_esp_w;
			if (ds_perm_faixa_etaria_w IS NOT NULL AND ds_perm_faixa_etaria_w::text <> '')then
				ie_gera_hor_w	:= 'N';
			end if;	
			
			IF (ie_gera_hor_w = 'S') AND (qt_encaixe_w	= 0) AND (TRUNC(ds_horario_w)	>= TRUNC(clock_timestamp())) AND
				(((TRUNC(ds_horario_w)	= TRUNC(clock_timestamp())) OR (TRUNC(ds_horario_w)	<> TRUNC(clock_timestamp()))) OR (ie_status_agenda_w NOT IN ('L','B'))) and (ie_conv_cancelado_w = 'N') THEN	
				
				if (IE_HOR_POR_PROFISSIONAL_w = 'S') then
					select 	max(cd_pessoa_fisica)
					into STRICT	cd_medico_ww
					FROM  	ageint_marcacao_usuario a
					WHERE 	a.nr_seq_agenda = nr_Seq_Agenda_w
					AND 	nm_usuario = nm_usuario_p;
	
					if (cd_medico_ww IS NOT NULL AND cd_medico_ww::text <> '') then
						cd_medico_w := cd_medico_ww;
					end if;
				else
					cd_medico_w := cd_pessoa_fisica_w;				
				end if;
				
				nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
									cd_agenda_w,
									ie_classif_item_w, -- no caso de exames, ou ie_classif_item_w para consultas/servicos
									null, -- no caso de exames, ou null para consultas
									null, -- nao considerado pois nao esta indo para agenda_consulta
									obter_setor_regras_ageint(cd_tipo_agenda_w,cd_agenda_w,cd_procedimento_w,'N',nm_usuario_p,cd_estabelecimento_p),
									nr_seq_proc_interno_w,
									cd_procedimento_w,
									ie_origem_proced_w,
									cd_medico_w, -- verificar no insert o campo a ser utilizado
									ds_horario_w, -- verificar no insert o campo a ser utilizado
									'N',
									'N');
				if (nr_seq_regra_bloq_w = 0) then
					ie_perm_pf_classif_w := obter_se_perm_pf_classif(cd_funcao_p         => 869,
											cd_agenda_p         => cd_agenda_w,
											cd_pessoa_fisica_p  => cd_paciente_w,
											dt_referencia_p     => dt_agenda_p,
											dt_agenda_p     	=> ds_horario_w
								);
					if (ie_perm_pf_classif_w = 'S') then
						nr_sequencia_ag := ageint_horarios_usuario_w.count() + 1;
						
						select 	nextval('ageint_horarios_usuario_seq')
						into STRICT	ageint_horarios_usuario_seq_w
						;
						
						ageint_horarios_usuario_w[nr_sequencia_ag].nr_sequencia := ageint_horarios_usuario_seq_w;
						ageint_horarios_usuario_w[nr_sequencia_ag].cd_agenda := cd_agenda_w;
						ageint_horarios_usuario_w[nr_sequencia_ag].hr_agenda := ds_horario_w;
						IF qt_marc_grupo_w = 0 THEN
							ageint_horarios_usuario_w[nr_sequencia_ag].ie_status_agenda := ie_status_agenda_w;
						ELSE
							ageint_horarios_usuario_w[nr_sequencia_ag].ie_status_agenda := 'N';
						END IF;
						ageint_horarios_usuario_w[nr_sequencia_ag].nm_usuario := nm_usuario_p;
						ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_agenda := nr_seq_agenda_w;
						ageint_horarios_usuario_w[nr_sequencia_ag].nr_minuto_duracao := nr_minuto_duracao_w;
						ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_ageint_lib := nr_seq_ageint_lib_w;
						ageint_horarios_usuario_w[nr_sequencia_ag].cd_turno := cd_turno_w;
						ageint_horarios_usuario_w[nr_sequencia_ag].ie_encaixe := ie_encaixe_w;
						ageint_horarios_usuario_w[nr_sequencia_ag].cd_pessoa_fisica := cd_medico_w;
						ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_turno := nr_seq_turno_w;

					end if;
				end if;
			END IF;

			if (ie_status_agenda_controle_w	= 'N') then
				SELECT	coalesce(MAX(nr_minuto_duracao),0)
				INTO STRICT	nr_minuto_dur_ant_w
				FROM	ageint_marcacao_usuario
				WHERE	cd_agenda	= cd_agenda_w
				AND	hr_agenda	= ds_horario_w
				AND	nr_seq_ageint	= nr_seq_ageint_p
				AND	coalesce(ie_gerado,'N') = 'N'
				AND	coalesce(ie_encaixe,'N') = 'N';

				dt_age_ant_w	:= ds_horario_w;
			end if;
			<<finalc022>>
				ds_bloqueio_w	:= '';
				qt_bloq_w	:= 0;
			END;
		END LOOP;
		CLOSE C02;
		if (ie_mostrar_sem_hor_w = 'N') then
			inserir_ageint_hor_usu;
			begin
			select 1
			into STRICT	qt_hor_ageint_lib_w
			from	ageint_horarios_usuario
			where	nr_Seq_Ageint_lib = nr_Seq_Ageint_lib_w  LIMIT 1;							
			exception
			when others then
				qt_hor_ageint_lib_w := 0;
			end;
			if (qt_hor_ageint_lib_w = 0)  then
				update	ageint_lib_usuario
				set	ie_apres_marc = 'N'
				where	nr_sequencia = nr_Seq_Ageint_lib_w;
			end if;
		end if;
	END IF;	
	inserir_ageint_hor_usu;
	
	OPEN C04;
	LOOP
	FETCH C04 INTO
		dt_encaixe_w,
		cd_turno_ww,
		nr_minuto_duracao_ww,
		cd_medico_encaixe_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		BEGIN
         	nr_sequencia_ag := ageint_horarios_usuario_w.count() + 1;

		select 	nextval('ageint_horarios_usuario_seq')
		into STRICT	ageint_horarios_usuario_seq_w
		;

	        ageint_horarios_usuario_w[nr_sequencia_ag].nr_sequencia := ageint_horarios_usuario_seq_w;
	        ageint_horarios_usuario_w[nr_sequencia_ag].cd_agenda := cd_agenda_w;
	        ageint_horarios_usuario_w[nr_sequencia_ag].hr_agenda := dt_encaixe_w;
	        ageint_horarios_usuario_w[nr_sequencia_ag].ie_status_agenda := 'L';
	        ageint_horarios_usuario_w[nr_sequencia_ag].nm_usuario := nm_usuario_p;
	        ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_agenda := nr_seq_agenda_w;
	        ageint_horarios_usuario_w[nr_sequencia_ag].nr_minuto_duracao := nr_minuto_duracao_ww;
	        ageint_horarios_usuario_w[nr_sequencia_ag].nr_seq_ageint_lib := nr_seq_ageint_lib_w;
	        ageint_horarios_usuario_w[nr_sequencia_ag].cd_turno := cd_turno_ww;
	        ageint_horarios_usuario_w[nr_sequencia_ag].ie_encaixe := 'S';
	        ageint_horarios_usuario_w[nr_sequencia_ag].cd_pessoa_fisica := cd_medico_encaixe_w;
		END;
	END LOOP;
	CLOSE C04;
  <<fimc03>>
	cd_agenda_ant_w	:= cd_Agenda_w;
	END;
END LOOP;
CLOSE C03;

<<termino_co3>>
inserir_ageint_hor_usu;

SELECT 	MIN(to_char(hr_agenda, 'hh24')),
	MAX(to_char(hr_agenda, 'hh24'))
INTO STRICT 	ds_hor_min_p,
	ds_hor_max_p
FROM 	ageint_horarios_usuario
WHERE 	nm_usuario = nm_usuario_p
AND 	trunc(hr_agenda) = dt_agenda_w;

SELECT 	MIN(to_char(hr_agenda, 'hh24')),
	MAX(to_char(hr_agenda, 'hh24'))
INTO STRICT 	ds_hor_min_livre_p,
	ds_hor_max_livre_p
FROM 	ageint_horarios_usuario
WHERE 	nm_usuario = nm_usuario_p
AND 	trunc(hr_agenda) = dt_agenda_w
AND 	ie_status_agenda IN ('L', 'B');

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_horarios_ageint ( dt_agenda_p timestamp, nm_usuario_p text, nr_seq_ageint_p bigint, cd_estabelecimento_p bigint, ds_agendas_montadas_p text default null, ds_hor_min_p INOUT bigint DEFAULT NULL, ds_hor_max_p INOUT bigint DEFAULT NULL, ds_hor_min_livre_p INOUT bigint DEFAULT NULL, ds_hor_max_livre_p INOUT bigint DEFAULT NULL, ie_prazo_maximo_p text default 'N') FROM PUBLIC;

