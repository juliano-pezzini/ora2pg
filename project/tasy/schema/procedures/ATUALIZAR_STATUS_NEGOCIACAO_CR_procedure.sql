-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_status_negociacao_cr ( nr_titulo_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_situacao_tit_w		varchar(1);
nr_seq_negociacao_w		bigint;
qt_titulo_caixa_aberto_w	bigint;
qt_titulo_novo_aberto_w		bigint;
nr_seq_cobranca_w		bigint;
nr_seq_hist_cob_liq_w		bigint;
cd_estabelecimento_w		smallint;
qt_registro_mens_w		bigint;

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	titulo_receber	b,
		cobranca	a
	where	a.nr_titulo		= b.nr_titulo
	and	a.nr_titulo		= nr_titulo_p
	and	a.ie_status		<> 'A';


BEGIN
if (nr_titulo_p IS NOT NULL AND nr_titulo_p::text <> '') then
	/*Verificar se é o título da negociação */

	select	max(a.nr_seq_negociacao_origem),
		max(a.ie_situacao),
		max(cd_estabelecimento)
	into STRICT	nr_seq_negociacao_w,
		ie_situacao_tit_w,
		cd_estabelecimento_w
	from	titulo_receber a
	where	a.nr_titulo	= nr_titulo_p;

	/* Se não for, verificar se é um título de boleto, débito em conta ou mensalidade */

	if (coalesce(nr_seq_negociacao_w::text, '') = '') then
		select	max(a.nr_seq_negociacao)
		into STRICT	nr_seq_negociacao_w
		from	negociacao_cr_boleto a
		where	a.nr_titulo	= nr_titulo_p;

		if (coalesce(nr_seq_negociacao_w::text, '') = '') then
			select	max(a.nr_seq_negociacao)
			into STRICT	nr_seq_negociacao_w
			from	negociacao_cr_deb_cc a
			where	a.nr_titulo	= nr_titulo_p;

			if (coalesce(nr_seq_negociacao_w::text, '') = '') then
				select	max(b.nr_seq_negociacao)
				into STRICT	nr_seq_negociacao_w
				from	negociacao_cr_pls_mens b,
					titulo_receber a
				where	a.nr_seq_mensalidade	= b.nr_seq_mensalidade
				and	a.nr_titulo		= nr_titulo_p;

				if (coalesce(nr_seq_negociacao_w::text, '') = '') then --AAMFIRMO OS
					/*OS 1171845 - Verificar se o titulo que esta sendo baixado é de mensalidade que foi originada de negociação.*/

					select	max(f.nr_seq_negociacao)
					into STRICT	nr_seq_negociacao_w
					from	titulo_receber a,
							pls_mensalidade b,
							pls_mensalidade_segurado c,
							pls_mensalidade_seg_item d,
							pls_segurado_mensalidade e,

							negociacao_cr_pls_mens f
					where	a.nr_titulo 				= nr_titulo_p
					and		a.nr_seq_mensalidade		= b.nr_sequencia
					and		b.nr_sequencia				= c.nr_seq_mensalidade
					and		c.nr_sequencia				= d.nr_seq_mensalidade_seg
					and		d.nr_sequencia				= e.nr_seq_item_mensalidade
					and		e.nr_seq_negociacao_mens	= f.nr_sequencia;




					if (coalesce(nr_seq_negociacao_w::text, '') = '') then
						select	max(b.nr_seq_negociacao)
						into STRICT	nr_seq_negociacao_w
						from	negociacao_cr_dep_ident b,
							deposito_ident_titulo c
						where	b.nr_seq_deposito_ident = c.nr_seq_deposito
						and	c.nr_titulo		= nr_titulo_p;
					end if;
				end if;
			end if;
		end if;
	end if;

	/* Se é um título vinculado a uma negociação */

	if (nr_seq_negociacao_w IS NOT NULL AND nr_seq_negociacao_w::text <> '') then
		/* Verificar primeiro o título do caixa */

		select	count(*)
		into STRICT	qt_titulo_caixa_aberto_w
		from	titulo_receber a
		where	a.nr_seq_negociacao_origem	= nr_seq_negociacao_w
		and	a.ie_situacao	= '1';

		/* Verificar títulos gerados  (boletos, débito em conta e mensalidades) */

		select	sum(qt_registro)
		into STRICT	qt_titulo_novo_aberto_w
		from (SELECT	count(*) qt_registro
			from	titulo_receber b,
				negociacao_cr_boleto a
			where	a.nr_seq_negociacao	= nr_seq_negociacao_w
			and	a.nr_titulo		= b.nr_titulo
			and	b.ie_situacao		= '1'
			
union all

			SELECT	count(*) qt_registro
			from	titulo_receber b,
				negociacao_cr_deb_cc a
			where	a.nr_seq_negociacao	= nr_seq_negociacao_w
			and	a.nr_titulo		= b.nr_titulo
			and	b.ie_situacao		= '1'
			
union all

			select	count(*)
			from	titulo_receber b,
				negociacao_cr_pls_mens a
			where	a.nr_seq_negociacao	= nr_seq_negociacao_w
			and	a.nr_seq_mensalidade	= b.nr_seq_mensalidade
			and	b.ie_situacao		= '1') alias4;


		select	count(*)
		into STRICT	qt_registro_mens_w
		from (	SELECT	e.nr_titulo /*Títulos pendentes*/
			FROM pls_mensalidade_seg_item c, negociacao_cr_pls_mens b, pls_segurado_mensalidade a, pls_mensalidade_segurado d
LEFT OUTER JOIN titulo_receber e ON (d.nr_seq_mensalidade = e.nr_seq_mensalidade)
WHERE b.nr_seq_negociacao		= nr_seq_negociacao_w and a.nr_seq_negociacao_mens	= b.nr_sequencia and a.nr_seq_item_mensalidade	= c.nr_sequencia and c.nr_seq_mensalidade_seg	= d.nr_sequencia  and e.ie_situacao			= '1'
			group	by e.nr_titulo
			
union
 	/*parcelas da negociação sem mensalidade gerada*/
			SELECT	b.nr_sequencia
			from	pls_segurado_mensalidade a,
				negociacao_cr_pls_mens b
			where	b.nr_seq_negociacao		= nr_seq_negociacao_w
			and	a.nr_seq_negociacao_mens	= b.nr_sequencia
			and	not exists (select	1
				from	pls_mensalidade_seg_item x,
					pls_mensalidade_segurado y,
					titulo_receber z
				where	x.nr_seq_mensalidade_seg	= y.nr_sequencia
				and	y.nr_seq_mensalidade		= z.nr_seq_mensalidade
				and	x.nr_sequencia			= a.nr_seq_item_mensalidade)
		      ) alias2;

		/* Se não tiver títulos abertos, deve liquidar a negociação, deixar pendente de pagamento */

		if (qt_titulo_caixa_aberto_w + qt_titulo_novo_aberto_w + coalesce(qt_registro_mens_w,0) = 0) then
			update	negociacao_cr
			set	dt_liquidacao	= clock_timestamp(),
				ie_status	= 'L',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_negociacao_w
			and	ie_status	= 'AP';


			select	max(nr_seq_hist_cob)
			into STRICT	nr_seq_hist_cob_liq_w
			from	parametro_contas_receber
			where	cd_estabelecimento	= cd_estabelecimento_w;

			if (ie_situacao_tit_w = '2') then
				open C01;
				loop
				fetch C01 into
					nr_seq_cobranca_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin
					update	cobranca
					set	ie_status	= 'N',
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_cobranca_w;

					/* Título da cobrança foi negociado e liquidado */

					if (nr_seq_hist_cob_liq_w IS NOT NULL AND nr_seq_hist_cob_liq_w::text <> '') then
						insert into cobranca_historico(nr_sequencia,
							nr_seq_cobranca,
							dt_atualizacao,
							nm_usuario,
							nr_seq_historico,
							vl_historico,
							ds_historico,
							dt_historico)
						values (nextval('cobranca_historico_seq'),
							nr_seq_cobranca_w,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_hist_cob_liq_w,
							0,
							substr(wheb_mensagem_pck.get_texto(302755),1,255),
							clock_timestamp());
					end if;
					end;
				end loop;
				close C01;
			else
				open C01;
				loop
				fetch C01 into
					nr_seq_cobranca_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin
					update	cobranca
					set	ie_status	= 'E',
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp(),
						vl_acobrar	= 0
					where	nr_sequencia	= nr_seq_cobranca_w;

					/* Título gerado a partir do título desta cobrança, teve sua liquidação efetuada */

					if (nr_seq_hist_cob_liq_w IS NOT NULL AND nr_seq_hist_cob_liq_w::text <> '') then
						insert into cobranca_historico(nr_sequencia,
							nr_seq_cobranca,
							dt_atualizacao,
							nm_usuario,
							nr_seq_historico,
							vl_historico,
							ds_historico,
							dt_historico)
						values (nextval('cobranca_historico_seq'),
							nr_seq_cobranca_w,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_hist_cob_liq_w,
							0,
							substr(wheb_mensagem_pck.get_texto(302756),1,255),
							clock_timestamp());
					end if;
					end;
				end loop;
				close C01;
			end if;
		else
			update	negociacao_cr
			set	dt_liquidacao	 = NULL,
				ie_status	= 'AP',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_negociacao_w
			and	ie_status	= 'L';
		end if;
	end if;
end if;

/* Não pode dar commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_status_negociacao_cr ( nr_titulo_p bigint, nm_usuario_p text) FROM PUBLIC;

