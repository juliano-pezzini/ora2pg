-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_proc ((nr_interno_conta_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_profissional_exec_p text, qt_procedimento_p bigint, nr_atendimento_p bigint, nr_seq_proc_p bigint, nm_usuario_p text, ie_tipo_consiste_p bigint, dt_procedimento_p timestamp, ds_erro_p out text) is /* IE_TIPO_CONSISTE_P
	- 1 Fechamento da conta
	- 2 Saida do campo
*/


/* CD_REGISTRO_W
	1|BPA (CONSOLIDADO)
	2|BPA (INDIVIDUALIZADO)
	3|AIH (PROC. PRINCIPAL)
	4|AIH (PROC. ESPECIAL)
	5|AIH (PROC. SECUNDARIO)
	6|APAC (PROC. PRINCIPAL)
	7|APAC (PROC.SECUNDARIO)
*/
 ds_detalhe_w varchar(255) DEFAULT '') AS $body$
DECLARE


	array_cd_details_proc_sus  strarray := strarray();
	i bigint := 1;

	c_details_proc_sus CURSOR FOR
		SELECT  b.cd_detalhe
		from    sus_detalhe_proc a,
			sus_detalhe b
		where   a.cd_procedimento = cd_procedimento_p
		and     a.ie_origem_proced = ie_origem_proced_p
		and	a.nr_seq_detalhe = b.nr_sequencia;

	
BEGIN

	for c_details_proc_sus_p in c_details_proc_sus loop
		if ( sus_obter_se_detalhe_proc(cd_procedimento_p, ie_origem_proced_p, c_details_proc_sus_p.cd_detalhe, dt_procedimento_p) > 0)then
			array_cd_details_proc_sus.extend;
			array_cd_details_proc_sus(i) := c_details_proc_sus_p.cd_detalhe;
			i := i + 1;
		end if;
	end loop;

	return;

	end;

	function valid_if_detail_exists_proc(cd_detalhe_p in varchar2, array_detalhe_p in strarray) return;
			end if;
		end;
	end loop;

	return;

	end;

begin

array_cd_details_proc := get_array_details_proc_sus(cd_procedimento_p => cd_procedimento_p, ie_origem_proced_p => ie_origem_proced_p, dt_procedimento_p => dt_procedimento_p);

/* Obter dados do atendimento */

begin
select	cd_estabelecimento,
	ie_tipo_atendimento
into STRICT	cd_estabelecimento_w,
	ie_tipo_atendimento_w
from	atendimento_paciente
where	nr_atendimento		= nr_atendimento_p;
exception
	when others then
	cd_estabelecimento_w	:= 0;
end;

varsubgrupopermite_w	:= coalesce(obter_valor_param_usuario(1125,66,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'');
varconscidnaoobrig_w	:= coalesce(obter_valor_param_usuario(1125,77,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
cd_procedimento_real_w	:= coalesce(sus_obter_proced_aih_unif(coalesce(nr_interno_conta_p,0),2,'C'),0);

/*Obter parametros de Faturamento*/

select	coalesce(max(ie_regra_tipo_atend),'A')
into STRICT	ie_regra_tipo_atend_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(ie_regra_tipo_atend_w,'A') = 'C') then
	begin
	select	coalesce(max(ie_tipo_atend_conta),ie_tipo_atendimento_w)
	into STRICT	ie_tipo_atendimento_w
	from 	conta_paciente
	where 	nr_interno_conta = coalesce(nr_interno_conta_p,0);
	exception
		when others then
		ie_tipo_atendimento_w:= ie_tipo_atendimento_w;
	end;
end if;

/* Obter dados do procedimento */

begin
select	cd_medico_executor,
	cd_pessoa_fisica,
	coalesce(ie_doc_executor,0),
	cd_doenca_cid,
	dt_procedimento,
	nr_seq_proc_princ,
	cd_cbo,
	nr_doc_convenio,
	coalesce(nr_seq_servico,0),
	coalesce(nr_seq_servico_classif,0)
into STRICT	cd_medico_exec_w,
	cd_profissional_w,
	ie_doc_executor_w,
	cd_doenca_cid_w,
	dt_procedimento_w,
	nr_seq_proc_princ_w,
	cd_cbo_w,
	nr_doc_convenio_w,
	nr_seq_servico_w,
	nr_seq_servico_classif_w
from	procedimento_paciente
where	nr_sequencia	= nr_seq_proc_p;
exception
	when others then
	cd_medico_exec_w	:= '';
	cd_profissional_w	:= '';
	ie_doc_executor_w	:= 0;
	cd_cbo_w		:= '0';
end;

/* Obter a estrutura do procedimento */

begin
select	d.cd_grupo,
	c.cd_subgrupo,
	b.cd_forma_organizacao,
	a.cd_procedimento,
	c.nr_seq_grupo,
	b.nr_seq_subgrupo,
	a.nr_seq_forma_org
into STRICT	cd_grupo_w,
	cd_subgrupo_w,
	cd_forma_organizacao_w,
	cd_proc_w,
	nr_seq_grupo_w,
	nr_seq_subgrupo_w,
	nr_seq_forma_org_w
from	sus_grupo d,
	sus_subgrupo c,
	sus_forma_organizacao b,
	sus_procedimento a
where	d.nr_sequencia = c.nr_seq_grupo
and	c.nr_sequencia = b.nr_seq_subgrupo
and	b.nr_sequencia = a.nr_seq_forma_org
and	a.cd_procedimento = cd_procedimento_p
and	a.ie_origem_proced = ie_origem_proced_p;
exception
when others then
	cd_grupo_w		:= 0;
	cd_subgrupo_w		:= 0;
	cd_forma_organizacao_w	:= 0;
end;

ie_ignora_participou_sus_w	:= coalesce(sus_obter_parametro_aih('IE_IGNORA_PARTICIPOU_SUS', cd_estabelecimento_w),'N');

if (ie_tipo_atendimento_w	= 1) then
	ds_tipo_atend_w	:= WHEB_MENSAGEM_PCK.get_texto(280630);
	/* Obter dados da AIH */

	select	coalesce(max(ie_codigo_autorizacao),0),
		coalesce(max(cd_cid_principal),'X')
	into STRICT	ie_codigo_autorizacao_w,
		cd_cid_principal_w
	from	sus_aih_unif
	where	nr_interno_conta	= coalesce(nr_interno_conta_p,0);
	
	if (ie_codigo_autorizacao_w = 0) then
		begin
		
		select	count(1)
		into STRICT	qt_dados_aih_conta_w
		from	sus_dados_aih_conta
		where	nr_interno_conta = nr_interno_conta_p  LIMIT 1;
		
		if (qt_dados_aih_conta_w > 0) then
			begin
			
			select	coalesce(ie_codigo_autorizacao,0)
			into STRICT	ie_codigo_autorizacao_w
			from	sus_dados_aih_conta
			where	nr_interno_conta = nr_interno_conta_p;
			
			end;
		end if;
		end;
	end if;

	if (ie_codigo_autorizacao_w in (5,14)) and (sus_validar_regra(27, cd_procedimento_p, ie_origem_proced_p,dt_procedimento_p) > 0) then
		ie_liberado_w	:= 'S';
	end if;
else
	select	count(1)
	into STRICT	qt_reg_apac_w
	from	sus_apac_unif
	where	nr_interno_conta	= coalesce(nr_interno_conta_p,0)  LIMIT 1;
	if (qt_reg_apac_w	> 0) then
		ds_tipo_atend_w	:= WHEB_MENSAGEM_PCK.get_texto(280631);
	else
		ds_tipo_atend_w	:= WHEB_MENSAGEM_PCK.get_texto(280628);
	end if;
end if;

/* Obter dados do procedimento */

begin
select	ie_situacao,
	qt_max_procedimento,
	dt_carga
into STRICT	ie_situacao_proc_w,
	qt_max_procedimento_w,
	dt_carga_w
from	procedimento
where	cd_procedimento		= cd_procedimento_p
and	ie_origem_proced	= ie_origem_proced_p;
exception
	when others then
		ie_situacao_proc_w	:= 'A';
end;

/* 8 - Procedimento inativo */

if (sus_obter_inco_ativa_proc(8,cd_procedimento_p)) and (ie_situacao_proc_w	= 'I') and
	((coalesce(dt_carga_w::text, '') = '') or (dt_carga_w < coalesce(dt_procedimento_p,dt_carga_w))) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:=  substr(WHEB_MENSAGEM_PCK.get_texto(280584) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280585) || ie_origem_proced_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 8, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	elsif (ie_tipo_consiste_p = 2) then
		ds_erro_w	:= ds_erro_w || '8, ';
	end if;
end if;

/* 9 - Procedimento incompativel com o tipo do atendimento */

select	count(1)
into STRICT	qt_registro_w
from	sus_procedimento_registro
where	cd_procedimento		= cd_procedimento_p
and	ie_origem_proced	= ie_origem_proced_p
and	(((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280628)) and (cd_registro in (1,2))) or
	((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280630)) and (cd_registro in (3,4,5))) or
	((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280631)) and (cd_registro in (1,2,6,7))))  LIMIT 1;
	
if (sus_obter_inco_ativa_proc(9,cd_procedimento_p)) and (qt_registro_w	= 0) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(280584) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280586) || ds_tipo_atend_w || WHEB_MENSAGEM_PCK.get_texto(280585) || ie_origem_proced_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 9, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

select	count(1)
into STRICT	qt_proc_dia_w
from	sus_detalhe_proc x,
   	sus_detalhe y
where	x.nr_seq_detalhe = y.nr_sequencia
and	y.cd_detalhe in ('10044','10045','10065','10066')
and	x.cd_procedimento = cd_procedimento_p
and	x.ie_origem_proced = ie_origem_proced_p  LIMIT 1;	

/* 10 - Excedida a quantidade maxima permitida para o procedimento */


/* Essa inconsistencia e tratada tambem na procedure Sus_Consiste_Conta */

if (sus_obter_inco_ativa_proc(10,cd_procedimento_p)) and (ie_liberado_w = 'N') and (ie_tipo_consiste_p	= 2) and (qt_max_procedimento_w	> 0) and
	((coalesce(sus_verificar_codigo_autor(coalesce(ie_codigo_autorizacao_w,0),'QTD'),'N') = 'N') or (sus_validar_regra(4,cd_procedimento_p,ie_origem_proced_p,dt_procedimento_p) > 0)) and (qt_procedimento_p 	> qt_max_procedimento_w) and (qt_proc_dia_w = 0) then
	begin

        if (nr_seq_proc_princ_w IS NOT NULL AND nr_seq_proc_princ_w::text <> '') and (sus_validar_regra(4, cd_procedimento_p, ie_origem_proced_p,dt_procedimento_p)	> 0) then
            begin
                select	cd_procedimento
                into STRICT	cd_proc_princ_w
                from	procedimento_paciente
                where	nr_sequencia	= nr_seq_proc_princ_w;
				
                select	coalesce(max(qt_proc_permitida),0)
                into STRICT	qt_opm_permitida_w
                from	sus_proc_compativel
                where	cd_proc_secundario	= cd_procedimento_p
                and	ie_origem_proc_sec	= ie_origem_proced_p
                and	cd_proc_principal	= cd_proc_princ_w
                and	ie_origem_proc_princ	= 7;

                if (qt_procedimento_p > 1) and (ie_origem_proced_p = 7) and (qt_opm_permitida_w > 0) and (coalesce(sus_validar_regra(11,cd_proc_princ_w, ie_origem_proced_p,dt_procedimento_p),0) = 0) then
                begin
                    select  qt_procedimento
                    into STRICT    qt_proc_permitida_w
                    from    procedimento_paciente a,
                            conta_paciente b
                    where   a.nr_interno_conta = b.nr_interno_conta
                    and     a.nr_interno_conta = nr_interno_conta_p
                    and     cd_procedimento = cd_proc_princ_w;
                    exception
                        when others then
                        qt_opm_permitida_w := qt_opm_permitida_w;
                    end;

                    qt_opm_permitida_w := qt_opm_permitida_w * qt_proc_permitida_w;
                end if;

                if (qt_procedimento_p	> qt_opm_permitida_w) then
                    ds_erro_w		:= ds_erro_w || '10, ';	
                end if;
            end;
    
        elsif (cd_subgrupo_w = 603) then  
            begin
                begin
                select	coalesce(max(a.qt_proc_permitida),qt_max_procedimento_w)
                into STRICT	qt_max_procedimento_w
                from	sus_proc_compativel a
                where	a.cd_proc_secundario	= cd_procedimento_p
                and	a.ie_origem_proc_sec	= ie_origem_proced_p
                and	a.cd_proc_principal in (SELECT	distinct x.cd_procedimento
						from	procedimento_paciente x,
							sus_valor_proc_paciente b
						where	x.nr_interno_conta = nr_interno_conta_p
						and	x.nr_atendimento = nr_atendimento_p
						and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
						and	x.nr_sequencia 		= b.nr_sequencia
						and	coalesce(b.cd_registro_proc,sus_obter_tiporeg_proc(x.cd_procedimento,x.ie_origem_proced,'C',13)) = 3)
                and	a.ie_origem_proc_princ	= 7;
                exception
                when others then
                    qt_max_procedimento_w := qt_max_procedimento_w;
                end;

                if (qt_procedimento_p 	> qt_max_procedimento_w) then
                    ds_erro_w		:= ds_erro_w || '10, ';
                end if;			
            end;
        else
            ds_erro_w		:= ds_erro_w || '10, ';	
        end if;

	end;
end if;

/* 34 - Profissional executante do procedimento nao informado */

if (sus_obter_inco_ativa_proc(34,cd_procedimento_p)) and (sus_validar_regra(11, cd_procedimento_p, ie_origem_proced_p,dt_procedimento_p) = 0) and
	((sus_validar_regra(12, cd_procedimento_p, ie_origem_proced_p,dt_procedimento_p) > 0) or (sus_obter_se_proc_bpa(nr_seq_proc_p, cd_procedimento_p) = 'S')) and
	((cd_medico_exec_w = '') or (coalesce(cd_medico_exec_w::text, '') = '')) and
	((cd_profissional_w = '') or (coalesce(cd_profissional_w::text, '') = '')) then
	ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p || WHEB_MENSAGEM_PCK.get_texto(280590) || cd_medico_exec_w || WHEB_MENSAGEM_PCK.get_texto(280592) || cd_profissional_w,1,255);
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 34, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

/* 36 - Identificacao do recebedor do credito nao informada */

if (sus_obter_inco_ativa_proc(36,cd_procedimento_p)) and (ie_tipo_atendimento_w = 1) and (ie_doc_executor_w = 0) then
	ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p || WHEB_MENSAGEM_PCK.get_texto(280593) || ie_doc_executor_w,1,255);
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 36, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

/* 43 - Existe procedimento(s) negativo(s) na conta SUS */

if (sus_obter_inco_ativa_proc(43,cd_procedimento_p)) and (qt_procedimento_p < 0) then
	ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 43, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

/* 52 - Falta informacao do participante anestesista para o procedimento */

select	coalesce(ie_adm_anestesia,'N')
into STRICT	ie_adm_anestesia_w
from	sus_procedimento
where	cd_procedimento		= cd_procedimento_p
and	ie_origem_proced	= ie_origem_proced_p  LIMIT 1;

begin
select	count(1)
into STRICT	qt_partic_w
from	procedimento_participante
where	nr_sequencia	= nr_seq_proc_p
and	sus_obter_indicador_equipe(ie_funcao)	= 6
and	(((coalesce(ie_participou_sus,'S')	= 'S') and (ie_ignora_participou_sus_w = 'N')) or (ie_ignora_participou_sus_w = 'S'))  LIMIT 1;
exception
	when others then
		qt_partic_w	:= 0;
end;

/* 52 - Falta informacao do participante anestesista para o procedimento */

if (sus_obter_inco_ativa_proc(52,cd_procedimento_p)) and (ie_tipo_atendimento_w	= 1) and (sus_validar_regra(3, cd_procedimento_p, ie_origem_proced_p,dt_procedimento_p) > 0) and (valid_if_detail_exists_proc(cd_detalhe_p => '001', array_detalhe_p => array_cd_details_proc) = 'S') and (qt_partic_w		= 0) then
	ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 52, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

/*66 -  Falta informacao do CID para procedimento BPA individualizado */

if (sus_obter_inco_ativa_proc(66,cd_procedimento_p)) then
	begin
	cd_registro_w	:= sus_obter_tiporeg_bpa(cd_procedimento_p, ie_origem_proced_p, 'C',dt_procedimento_p);
	ie_proc_bpa_w	:= sus_obter_se_proc_bpa(nr_seq_proc_p, cd_procedimento_p);

	select	sum(a.qt)
	into STRICT	qt_cid_compativel_w
	from (
		SELECT	count(1) qt
		from	sus_procedimento_cid
		where	cd_procedimento		= cd_procedimento_p
		and	ie_origem_proced	= ie_origem_proced_p
		
union

		SELECT	count(1) qt
		from	sus_detalhe_proc a,
			sus_detalhe b
		where	cd_procedimento		= cd_procedimento_p
		and	ie_origem_proced	= ie_origem_proced_p
		and	a.nr_seq_detalhe	= b.nr_sequencia
		and	b.cd_detalhe 		= '48') a;	

	if (ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280628)) and (ie_proc_bpa_w		= 'S') and (cd_registro_w		= 2) and
		((qt_cid_compativel_w 	> 0) or (varconscidnaoobrig_w	= 'S')) and (coalesce(cd_doenca_cid_w::text, '') = '') then
		begin
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
		if (ie_tipo_consiste_p = 1) then
			begin
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 66, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
		end;
	end if;
	end;
end if;

/* 73 - Procedimento realizado incompativel com a habilitacao do Hospital */

if (sus_obter_inco_ativa_proc(73,cd_procedimento_p)) then
	begin
	
	select	count(1)
	into STRICT	qt_proc_habilitacao_w
	from	sus_proced_habilitacao
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p  LIMIT 1;

	/* Caso o procedimento possua habilitacao, somente os hospitais cadastrados naquela habilitacao podem executar o procedimento */

	if (qt_proc_habilitacao_w > 0) then
	
		select	count(1)
		into STRICT	qt_proc_hosp_hab_w
		from	sus_habilitacao_hospital	a
		where	a.cd_estabelecimento	= cd_estabelecimento_w
		and	dt_procedimento_p between coalesce(a.dt_inicio_vigencia,dt_procedimento_p) and coalesce(a.dt_final_vigencia,dt_procedimento_p)
		and	a.cd_habilitacao in (	SELECT	x.cd_habilitacao
						from	sus_proced_habilitacao	x
						where	x.cd_procedimento	= cd_procedimento_p
						and	x.ie_origem_proced	= ie_origem_proced_p
						and	a.cd_habilitacao	= x.cd_habilitacao)  LIMIT 1;
		
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280585) || ie_origem_proced_p ||WHEB_MENSAGEM_PCK.get_texto(280594) || cd_estabelecimento_w,1,255);
		
		if (qt_proc_hosp_hab_w = 0) and (ie_tipo_consiste_p = 1) then
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 73, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		elsif (qt_proc_hosp_hab_w = 0) and (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= ds_erro_w || '73, ';
		end if;
	end if;
	
	end;
end if;

if (sus_obter_inco_ativa(93)) then
	begin

	if (coalesce(sus_validar_regra(11,cd_procedimento_real_w, ie_origem_proced_p,dt_procedimento_p),0) = 0) then
		begin

		select	coalesce(max(a.qt_inco),0)
		into STRICT	qt_proc_incompativel_w
		from (	SELECT	count(1) qt_inco
			from	sus_proc_compativel b
			where	b.cd_proc_principal	= cd_procedimento_real_w
			and	b.ie_origem_proc_princ	= ie_origem_proced_p
			and	b.cd_proc_secundario	= cd_procedimento_p
			and	b.ie_origem_proc_sec	= ie_origem_proced_p
			and	b.ie_tipo_compatibilidade = 2
			and	cd_procedimento_p 	<> cd_procedimento_real_w
			
union
 --OS 860653 - lhalves - 06/05/2015 - Verifica os itens so subgrupo 603, para que caso ele nao possua o proc real como compativel
			SELECT	count(1) qt_inco				
			
			where	Sus_Obter_Estrut_Proc(cd_procedimento_p, ie_origem_proced_p, 'C', 'S') = '603'
			and	not exists (	select	1
						from	sus_proc_compativel b
						where	b.cd_proc_principal	= cd_procedimento_real_w
						and	b.ie_origem_proc_princ	= ie_origem_proced_p
						and	b.cd_proc_secundario	= cd_procedimento_p
						and	b.ie_origem_proc_sec	= ie_origem_proced_p
						and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
			and	exists (	select	1
						from	sus_proc_compativel b
						where	b.cd_proc_secundario	= cd_procedimento_p
						and	b.ie_origem_proc_sec	= ie_origem_proced_p  LIMIT 1) 
			
union
  -- OS 347498, Geliard, 12/09/2011
			select	count(1) qt_inco
			from	procedimento_paciente a
			where	sus_validar_regra(4, cd_procedimento_p, ie_origem_proced_p,dt_procedimento_p) = 0
			and	cd_procedimento_p <> cd_procedimento_real_w
			and 	exists (	select	1
					from	sus_proc_compativel b
					where	b.cd_proc_principal	= cd_procedimento_real_w
					and	b.ie_origem_proc_princ	= ie_origem_proced_p  LIMIT 1)
			and 	exists (	select	1
					from	sus_proc_compativel b
					where	b.cd_proc_secundario	= cd_procedimento_p
					and	b.ie_origem_proc_sec	= ie_origem_proced_p
					and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
			and	not exists (	select	1
						from	sus_proc_compativel b
						where	b.cd_proc_principal	= cd_procedimento_real_w
						and	b.ie_origem_proc_princ	= ie_origem_proced_p
						and	b.cd_proc_secundario	= cd_procedimento_p
						and	b.ie_origem_proc_sec	= ie_origem_proced_p
						and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)  LIMIT 1) a
		where	not exists (	select	1
					from	sus_regra_proc_ncon_compat x
					where	x.cd_procedimento = cd_procedimento_p
					and	x.ie_origem_proced = ie_origem_proced_p
					and	x.ie_situacao = 'A');

		if (qt_proc_incompativel_w > 0) and (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= ds_erro_w || '93, ';
		end if;
		end;
	else

		qt_detalhe_proc_10043_w := valid_if_detail_exists_proc(cd_detalhe_p => '10043', array_detalhe_p => array_cd_details_proc);

		begin
		open c03;
		loop
		fetch c03 into
			cd_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			if (coalesce(cd_procedimento_w,0) <> 0) then
				begin				

				select	coalesce(max(a.qt_inco),0)
				into STRICT	qt_proc_incompativel_w
				from (	SELECT	count(1) qt_inco
					from	sus_proc_compativel b
					where	b.cd_proc_principal	=  cd_procedimento_w
					and	b.ie_origem_proc_princ	= ie_origem_proced_p
					and	b.cd_proc_secundario	= cd_procedimento_p
					and	b.ie_origem_proc_sec	= ie_origem_proced_p
					and	b.ie_tipo_compatibilidade = 2
					and	cd_procedimento_p 	<> cd_procedimento_w 					
					
union
 --OS 860653 - lhalves - 06/05/2015 - Verifica os itens so subgrupo 603, para que caso ele nao possua o proc real como compativel
					SELECT	count(1) qt_inco				
					
					where	Sus_Obter_Estrut_Proc(cd_procedimento_p, ie_origem_proced_p, 'C', 'S') = '603'
					and	not exists (	select	1
								from	sus_proc_compativel b
								where	b.cd_proc_principal	= cd_procedimento_w
								and	b.ie_origem_proc_princ	= ie_origem_proced_p
								and	b.cd_proc_secundario	= cd_procedimento_p
								and	b.ie_origem_proc_sec	= ie_origem_proced_p
								and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
					and	exists (	select	1
								from	sus_proc_compativel b
								where	b.cd_proc_secundario	= cd_procedimento_p
								and	b.ie_origem_proc_sec	= ie_origem_proced_p  LIMIT 1)
					
union
  -- OS 347498, Geliard, 12/09/2011
					select	count(1) qt_inco
					
					where	sus_validar_regra(4, cd_procedimento_p, ie_origem_proced_p,dt_procedimento_p) = 0
					and	coalesce(qt_detalhe_proc_10043_w, 'N') = 'N'
					and	cd_procedimento_p <> cd_procedimento_w
					and	cd_procedimento_p <> 211020010
					and 	exists (	select	1
							from	sus_proc_compativel b
							where	b.cd_proc_principal	=  cd_procedimento_w
							and	b.ie_origem_proc_princ	= ie_origem_proced_p
							and	sus_validar_regra(4, cd_proc_secundario,ie_origem_proc_sec,dt_procedimento_p) = 0  LIMIT 1)
					and 	exists (	select	1
							from	sus_proc_compativel b
							where	b.cd_proc_secundario	= cd_procedimento_p
							and	b.ie_origem_proc_sec	= ie_origem_proced_p
							and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
					and	not exists (	select	1
								from	sus_proc_compativel b
								where	b.cd_proc_principal	=  cd_procedimento_w
								and	b.ie_origem_proc_princ	= ie_origem_proced_p
								and	b.cd_proc_secundario	= cd_procedimento_p
								and	b.ie_origem_proc_sec	= ie_origem_proced_p
								and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
					and	not exists (select	1
								from	sus_proc_compativel b,
									procedimento_paciente c,
									sus_valor_proc_paciente x
								where	b.cd_proc_principal	= c.cd_procedimento
								and	b.ie_origem_proc_princ	= c.ie_origem_proced
								and	b.cd_proc_secundario	= cd_procedimento_p
								and	b.ie_origem_proc_sec	= ie_origem_proced_p
								and	c.nr_interno_conta	= nr_interno_conta_p
								and	x.nr_sequencia 		= c.nr_sequencia
								and	coalesce(x.cd_registro_proc,sus_obter_tiporeg_proc(c.cd_procedimento,c.ie_origem_proced,'C',2)) = 3
								and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1) 
					
union
 --OS 1217125
					select	count(1) qt_inco
					 
					where	cd_procedimento_p = 211020010
					and	not exists (	select	1
								from	sus_proc_compativel b
								where	b.cd_proc_principal	= cd_procedimento_w
								and	b.ie_origem_proc_princ	= ie_origem_proced_p
								and	b.cd_proc_secundario	= cd_procedimento_p
								and	b.ie_origem_proc_sec	= ie_origem_proced_p
								and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
					and	not exists (select	1
								from	sus_proc_compativel b,
									procedimento_paciente c,
									sus_valor_proc_paciente x
								where	b.cd_proc_principal	= c.cd_procedimento
								and	b.ie_origem_proc_princ	= c.ie_origem_proced
								and	b.cd_proc_secundario	= cd_procedimento_p
								and	b.ie_origem_proc_sec	= ie_origem_proced_p
								and	c.nr_interno_conta	= nr_interno_conta_p
								and	x.nr_sequencia 		= c.nr_sequencia
								and	coalesce(x.cd_registro_proc,sus_obter_tiporeg_proc(c.cd_procedimento,c.ie_origem_proced,'C',2)) = 3
								and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)  LIMIT 1) a
				where	not exists (	select	1
							from	sus_regra_proc_ncon_compat x
							where	x.cd_procedimento = cd_procedimento_p
							and	x.ie_origem_proced = ie_origem_proced_p
							and	x.ie_situacao = 'A');
																																																							
				if (qt_proc_incompativel_w > 0) and (ie_tipo_consiste_p = 2) then
					begin					
					ds_erro_w	:= ds_erro_w || '93, ';					
					end;
				end if;										
				end;
			end if;
			end;
		end loop;
		close c03;
		end;
	end if;
	end;
end if;

/*106 - Existe mais de um anestesista lancado para o procedimento*/

if (sus_obter_inco_ativa_proc(106,cd_procedimento_p)) and (ie_tipo_atendimento_w = 1) and (qt_partic_w	        > 1) then
	ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 106, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;

end if;

if (sus_obter_inco_ativa_proc(110,cd_procedimento_p)) and (ie_tipo_atendimento_w	= 1) and (valid_if_detail_exists_proc(cd_detalhe_p => '001', array_detalhe_p => array_cd_details_proc) = 'N') and (qt_partic_w		> 0) then
	ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 110, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

if (sus_obter_inco_ativa_proc(117,cd_procedimento_p)) then
	begin
	open c01;
	loop
	fetch c01 into
		nr_seq_serv_classif_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		select	count(1)
		into STRICT	qt_proc_classif_serv_w
		from	sus_serv_classif_hosp
		where	nr_seq_serv_classif	= nr_seq_serv_classif_w  LIMIT 1;

		if (qt_proc_classif_serv_w > 0) then
			ie_cons_classif_serv_w	:= 'N';
		end if;
		end;
		qt_proc_classif_serv_w	:= 0;
	end loop;
	close c01;

	select	count(1)
	into STRICT	qt_proc_classif_serv_w
	from	sus_proced_serv_classif
	where	cd_procedimento	= cd_procedimento_p
	and	ie_origem_proced= ie_origem_proced_p  LIMIT 1;

	if (qt_proc_classif_serv_w = 0) then
		ie_cons_classif_serv_w	:= 'N';
	end if;

	if (ie_cons_classif_serv_w = 'S') and (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 117, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
	end;
end if;

if (sus_obter_inco_ativa_proc(127,cd_procedimento_p)) then
	begin
	cd_registro_w	:= sus_obter_tiporeg_bpa(cd_procedimento_p, ie_origem_proced_p, 'C',dt_procedimento_p);
	ie_proc_bpa_w	:= sus_obter_se_proc_bpa(nr_seq_proc_p, cd_procedimento_p);

	select	count(1)
	into STRICT	qt_proc_cid_w
	from	sus_procedimento_cid
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p  LIMIT 1;

	if (qt_proc_cid_w > 0) then
		begin

		select	count(1)
		into STRICT	qt_cid_compat_w
		from	sus_procedimento_cid
		where	cd_procedimento		= cd_procedimento_p
		and	ie_origem_proced	= ie_origem_proced_p
		and (cd_doenca_cid		= cd_doenca_cid_w)  LIMIT 1;

		if (ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280628)) and (ie_proc_bpa_w		= 'S') and (cd_registro_w		= 2) and (cd_doenca_cid_w IS NOT NULL AND cd_doenca_cid_w::text <> '') and (qt_cid_compat_w 	= 0) then
			begin
			ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
			if (ie_tipo_consiste_p = 1) then
				begin
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 127, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
				end;
			end if;
			end;
		end if;

		end;
	end if;

	end;
end if;
/*
if	(Sus_Obter_Inco_Ativa(144)) and
	(Sus_validar_regra(68,cd_procedimento_p,ie_origem_proced_p,dt_procedimento_p)	> 0) and
	(qt_procedimento_p	> Obter_Dias_Internacao_aih(nr_atendimento_p,nr_interno_conta_p)) then
	ds_detalhe_w	:= ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p;
	if	(ie_tipo_consiste_p = 1) then
		sus_gravar_inconsistencia(nr_interno_conta_p, 144 ,ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;*/
if (sus_obter_inco_ativa_proc(149,cd_procedimento_p)) then
	begin
	
	begin
	select	count(1),
		b.ie_ind_equipe_part
	into STRICT	qt_registro_w,
		cd_medico_prof_w
	from (SELECT sus_obter_indicador_equipe(ie_funcao_medico) ie_ind_equipe_proc
		from	procedimento_Paciente
		where	nr_sequencia	= nr_seq_proc_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	coalesce(sus_obter_indicador_equipe(ie_funcao_medico),0) > 0) a,
		(select	sus_obter_indicador_equipe(b.ie_funcao) ie_ind_equipe_part
		from	procedimento_Paciente a,
			procedimento_participante b
		where	a.nr_sequencia = b.nr_sequencia
		and	a.nr_sequencia	= nr_seq_proc_p
		and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
		and	coalesce(sus_obter_indicador_equipe(b.ie_funcao),0) > 0) b
	where	a.ie_ind_equipe_proc = b.ie_ind_equipe_part
	group by b.ie_ind_equipe_part;
	exception
		when others then
		qt_registro_w	:= 0;
	end;
	
	if (qt_registro_w = 0) then
		begin
		
		begin
		select	count(1),
			a.ie_ind_equipe_part
		into STRICT	qt_registro_w,
			cd_medico_prof_w
		from (	SELECT	count(b.nr_sequencia) qt_part,
				sus_obter_indicador_equipe(b.ie_funcao) ie_ind_equipe_part
			from	procedimento_paciente a,
				procedimento_participante b
			where	a.nr_sequencia = b.nr_sequencia
			and	a.nr_sequencia	= nr_seq_proc_p
			and	coalesce(sus_obter_indicador_equipe(b.ie_funcao),0) > 0
			group by sus_obter_indicador_equipe(b.ie_funcao)) a
		where	a.qt_part > 1
		group by	a.ie_ind_equipe_part;		
		exception
		when others then
			qt_registro_w := 0;
		end;
		
		end;
	end if;

	if (qt_registro_w		> 0) then
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
		if (ie_tipo_consiste_p = 1) then
			begin
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 149, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
	end if;
	
	end;
end if;

if (sus_obter_inco_ativa_proc(150,cd_procedimento_p)) then

	begin
	select	count(1),
		b.cd_medico_part
	into STRICT	qt_registro_w,
		cd_medico_prof_w
	from (SELECT	coalesce(cd_medico_executor,cd_pessoa_fisica) cd_medico_exec
		from	procedimento_Paciente
		where	nr_sequencia	= nr_seq_proc_p
		and	(coalesce(cd_medico_executor,cd_pessoa_fisica) IS NOT NULL AND (coalesce(cd_medico_executor,cd_pessoa_fisica))::text <> '')) a,
		(select b.cd_pessoa_fisica cd_medico_part
		from	procedimento_Paciente a,
			procedimento_participante b
		where	a.nr_sequencia = b.nr_sequencia
		and	a.nr_sequencia	= nr_seq_proc_p
		and	(b.cd_pessoa_fisica IS NOT NULL AND b.cd_pessoa_fisica::text <> '')) b
	where	a.cd_medico_exec = b.cd_medico_part
	group by	b.cd_medico_part;
	exception
		when others  then
		qt_registro_w	:= 0;
	end;
	
	if (qt_registro_w = 0) then
		begin
		
		begin
		select	count(1),
			a.cd_medico_part
		into STRICT	qt_registro_w,
			cd_medico_prof_w
		from (	SELECT	count(b.nr_sequencia) qt_part,
				b.cd_pessoa_fisica cd_medico_part
			from	procedimento_paciente a,
				procedimento_participante b
			where	a.nr_sequencia = b.nr_sequencia
			and	a.nr_sequencia	= nr_seq_proc_p
			and	(b.cd_pessoa_fisica IS NOT NULL AND b.cd_pessoa_fisica::text <> '')
			group by b.cd_pessoa_fisica) a
		where	a.qt_part > 1
		group by	a.cd_medico_part;		
		exception
		when others then
			qt_registro_w := 0;
		end;
		
		end;
	end if;

	if (qt_registro_w		> 0) then
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p ||WHEB_MENSAGEM_PCK.get_texto(280590)||cd_medico_prof_w,1,255);
		if (ie_tipo_consiste_p = 1) then
			begin
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 150, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
	end if;
end if;

if (sus_obter_inco_ativa_proc(151,cd_procedimento_p)) then
	open c02;
	loop
	fetch c02 into
		cd_medico_exec_ww,
		ie_indicador_equipe_w,
		nr_seq_participante_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		/*
		select	count(*)
		into	qt_registro_w
		from	conta_paciente_honorario_v
		where	nr_sequencia	= nr_seq_proc_p
		and	Sus_Obter_Indicador_Equipe(ie_funcao_medico) = ie_indicador_equipe_w - 1;
		*/
		select	coalesce(max(1),0)
		into STRICT	qt_registro_w
		
		where	exists (	SELECT	1
							from	procedimento_paciente
							where	nr_sequencia		= nr_seq_proc_p
							and		1	=	ie_indicador_equipe_w - 1
							
union all

							SELECT	2
							from	procedimento_participante
							where	nr_sequencia		= nr_seq_proc_p
							and		sus_obter_indicador_equipe(ie_funcao) = ie_indicador_equipe_w - 1);
							
		if (qt_registro_w	= 0) then
			if (ie_tipo_consiste_p = 1) then
				begin
				ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p ||WHEB_MENSAGEM_PCK.get_texto(280596)||cd_medico_exec_ww,1,255);
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 151, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
				end;

			end if;
		end if;

		end;
	end loop;
	close c02;
end if;

if (sus_obter_inco_ativa_proc(169,cd_procedimento_p)) and (cd_grupo_w = 2) and (cd_subgrupo_w <> 202) then
	begin

	if (substr(varsubgrupopermite_w,1,255) = '') or (obter_se_contido(cd_subgrupo_w, substr(varsubgrupopermite_w,1,255)) = 'N') then
		begin

		select 	count(1)
		into STRICT	qt_registro_w
		from	laudo_paciente
		where	nr_seq_proc 	= nr_seq_proc_p
		and	nr_atendimento 	= nr_atendimento_p
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')  LIMIT 1;

		if (qt_registro_w = 0) and (ie_tipo_consiste_p = 1) then
			begin
			ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p ||WHEB_MENSAGEM_PCK.get_texto(280590)||coalesce(cd_medico_exec_w,cd_profissional_w),1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 169, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
		end;
	end if;
	end;
end if;

if (sus_obter_inco_ativa_proc(175,cd_procedimento_p)) and (cd_grupo_w = 7) and
	((coalesce(coalesce(cd_medico_exec_w,cd_profissional_w),'X') <> 'X') or ((coalesce(cd_medico_exec_w,cd_profissional_w) IS NOT NULL AND (coalesce(cd_medico_exec_w,cd_profissional_w))::text <> ''))) then
	begin

	if (ie_tipo_consiste_p = 1) then
		begin
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p ||WHEB_MENSAGEM_PCK.get_texto(280590)||coalesce(cd_medico_exec_w,cd_profissional_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 175, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;

	end;
end if;

if (sus_obter_inco_ativa_proc(178,cd_procedimento_p)) and (valid_if_detail_exists_proc(cd_detalhe_p => '017', array_detalhe_p => array_cd_details_proc) = 'S') then
	begin

	select 	count(1)
	into STRICT	qt_registro_w
	from	procedimento_paciente
	where	nr_seq_proc_princ 	= nr_seq_proc_p
	and	nr_interno_conta	= nr_interno_conta_p
	and	sus_validar_regra(4,cd_procedimento,ie_origem_proced,dt_procedimento) > 0  LIMIT 1;

	if (qt_registro_w = 0) and (ie_tipo_consiste_p = 1) then
		begin
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p ||WHEB_MENSAGEM_PCK.get_texto(280597)|| nr_interno_conta_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 178, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;

	end;
end if;

if (sus_obter_inco_ativa_proc(184,cd_procedimento_p)) and (cd_grupo_w = 3) then
	begin

	begin
	select	coalesce(a.dt_inicial,b.dt_entrada),
		coalesce(a.dt_final,coalesce(b.dt_alta,clock_timestamp())),
		a.cd_motivo_cobranca
	into STRICT	dt_entrada_w,
		dt_alta_w,
		cd_motivo_cobranca_w
	from	atendimento_paciente	b,
		sus_aih_unif		a
	where	a.nr_atendimento	= nr_atendimento_p
	and	a.nr_interno_conta	= nr_interno_conta_p
	and	a.nr_atendimento	= b.nr_atendimento;
	exception
		when others then
		begin
		select	dt_entrada,
			coalesce(dt_alta,clock_timestamp())
		into STRICT	dt_entrada_w,
			dt_alta_w
		from 	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;

		cd_motivo_cobranca_w	:= 0;
		end;
	end;

	select 	obter_qt_dia_internacao_sus(cd_procedimento_p,ie_origem_proced_p)
	into STRICT	qt_permanencia_w
	;

	if	(((dt_alta_w - dt_entrada_w)+1) < trunc(qt_permanencia_w/2)) and (cd_motivo_cobranca_w not in (24,31,41,42,43,65,66,67))then
		begin
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p ||WHEB_MENSAGEM_PCK.get_texto(280599)||qt_permanencia_w,1,255);
		if (ie_tipo_consiste_p = 1) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 184, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end if;
		end;
	end if;

	end;
end if;

if (sus_obter_inco_ativa(194)) AND (coalesce(coalesce(cd_medico_exec_w,cd_profissional_w),'X') <> 'X') then
	begin

	select	count(1)
	into STRICT	qt_med_exec_w
	from	sus_medico_credenciamento
	where	cd_medico 			= coalesce(cd_medico_exec_w,cd_profissional_w)
	and	coalesce(cd_cbo,coalesce(cd_cbo_w,'X'))	= coalesce(cd_cbo_w,'X')
	and	ie_conveniado = 'S'
	and	coalesce(ie_situacao,'A') = 'A'
	and	coalesce(cd_estabelecimento,cd_estabelecimento_w) = cd_estabelecimento_w  LIMIT 1;

	if (qt_med_exec_w = 0) then
		begin

		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280600) || coalesce(cd_medico_exec_w,cd_profissional_w) || ' - '|| substr(obter_nome_pf(coalesce(cd_medico_exec_w,cd_profissional_w)),1,60) || WHEB_MENSAGEM_PCK.get_texto(280601)|| cd_cbo_w,1,255);
		if (ie_tipo_consiste_p = 1) then
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 194, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end if;

		end;
	end if;

	end;
end if;

if (sus_obter_inco_ativa_proc(196,cd_procedimento_p)) and (cd_grupo_w = 7) and (coalesce(nr_seq_proc_princ_w,0) <> 0) then
	begin

	select	dt_procedimento
	into STRICT	dt_proc_princ_w
	from	procedimento_paciente
	where	nr_sequencia = nr_seq_proc_princ_w;

	if (establishment_timezone_utils.startofmonth(dt_procedimento_w) <> establishment_timezone_utils.startofmonth(dt_proc_princ_w)) then
		begin
		if (ie_tipo_consiste_p = 1) then
			begin
			ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(280602) || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p ||WHEB_MENSAGEM_PCK.get_texto(280603)||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_procedimento_w, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)||WHEB_MENSAGEM_PCK.get_texto(280604)||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_proc_princ_w, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone),1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 196, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
		end;
	end if;

	end;
end if;

if (sus_obter_inco_ativa(204)) then
	begin

	if (coalesce(sus_validar_regra(11,cd_procedimento_real_w, ie_origem_proced_p,dt_procedimento_p),0) = 0) then
		begin
		if (coalesce(sus_obter_se_detalhe_proc(cd_procedimento_real_w,ie_origem_proced_p,'001',dt_procedimento_p),0) > 0) and (coalesce(valid_if_detail_exists_proc(cd_detalhe_p => '10042', array_detalhe_p => array_cd_details_proc), 'N') = 'S') then
			begin
			if (ie_tipo_consiste_p = 1) then
				begin
				ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(280609) || cd_procedimento_real_w || WHEB_MENSAGEM_PCK.get_texto(280610) || cd_procedimento_p,1,255);
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 204, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
				end;
			elsif (ie_tipo_consiste_p = 2) then
				ds_erro_w	:= substr(ds_erro_w || '204, ',1,255);
			end if;
			end;
		end if;
		end;
	else

		qt_detalhe_proc_10042_w := valid_if_detail_exists_proc(cd_detalhe_p => '10042', array_detalhe_p => array_cd_details_proc);

		begin
		open c03;
		loop
		fetch c03 into
			cd_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			if (coalesce(cd_procedimento_w,0) <> 0) then
				begin
				if (coalesce(sus_obter_se_detalhe_proc(cd_procedimento_w,ie_origem_proced_p,'001',dt_procedimento_p), 0) > 0) and (coalesce(qt_detalhe_proc_10042_w, 'N') = 'S') then
					begin
					if (ie_tipo_consiste_p = 1) then
						begin
						ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(280609) || cd_procedimento_w || WHEB_MENSAGEM_PCK.get_texto(280610) || cd_procedimento_p,1,255);
						CALL sus_gravar_inconsistencia(nr_interno_conta_p, 204, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
						end;
					elsif (ie_tipo_consiste_p = 2) then
						ds_erro_w	:= substr(ds_erro_w || '204, ',1,255);
					end if;
					end;
				end if;
				end;
			end if;
			end;
		end loop;
		close c03;
		end;
	end if;
	end;
end if;

/*207 - Procedimento incompativel com CID principal da AIH*/

if (sus_obter_inco_ativa_proc(207,cd_procedimento_p)) and (cd_procedimento_p = 301060010) and (coalesce(cd_cid_principal_w,'X') = 'R501') then
	ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280612) || cd_cid_principal_w,1,255);
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 207, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	elsif (ie_tipo_consiste_p = 2) then
		ds_erro_w	:= substr(ds_erro_w || '207, ',1,255);
	end if;

end if;

if (Sus_obter_inco_ativa(215)) and (ie_tipo_atendimento_w = 1) and
	((coalesce(valid_if_detail_exists_proc(cd_detalhe_p => '007', array_detalhe_p => array_cd_details_proc), 'N') = 'S') or (coalesce(valid_if_detail_exists_proc(cd_detalhe_p => '10049', array_detalhe_p => array_cd_details_proc), 'N') = 'S') or (coalesce(valid_if_detail_exists_proc(cd_detalhe_p => '10037', array_detalhe_p => array_cd_details_proc), 'N') = 'S'))	then
	begin
	
	select	sum(qt_procedimento)
	into STRICT	qt_registro_w
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p;
	
	begin
	select	coalesce(a.dt_inicial,b.dt_entrada),
		coalesce(a.dt_final,coalesce(b.dt_alta,clock_timestamp())),
		cd_motivo_cobranca
	into STRICT	dt_entrada_w,
		dt_alta_w,
		cd_motivo_cobranca_w
	from	atendimento_paciente	b,
		sus_aih_unif		a
	where	a.nr_atendimento	= nr_atendimento_p
	and	a.nr_interno_conta	= nr_interno_conta_p
	and	a.nr_atendimento	= b.nr_atendimento;
	exception
		when others then
		begin
		select	dt_entrada,
			coalesce(dt_alta,clock_timestamp())
		into STRICT	dt_entrada_w,
			dt_alta_w
		from 	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;
		
		cd_motivo_cobranca_w := 0;
		end;
	end;
	
	/*select 	count(*)
	into	qt_hostital_dia_w
	from 	sus_procedimento_modal
	where 	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p
	and	cd_modalidade 		= 3;*/

	
	/*Geliard OS406262: Adicionado o tratamento para considerar o dia anterior a alta, quando nao for obito e nem for o mesmo dia da entrada*/


	/*if	(sus_obter_se_pac_laudo_obito(null,nr_atendimento_p,null,cd_estabelecimento_w) = 'N') and
		(establishment_timezone_utils.startofday(dt_alta_w) > establishment_timezone_utils.startofday(dt_entrada_w)) and
		(qt_hostital_dia_w = 0) then
		begin
		dt_alta_w := (dt_alta_w - 1);
		end;
	end if;	*/
	
	qt_internacao_w := trunc(dt_alta_w - dt_entrada_w); -- mudei de CEIL para TRUNC para que as horas nao gerem um dia a mais.
	
	if (cd_motivo_cobranca_w in (21,22,23,24,25,26,27,28,31,41,42,43,65,66,67)) then
		qt_internacao_w := qt_internacao_w + 1;
	end if;
	
	
	if (qt_registro_w > qt_internacao_w) then
		begin
		ds_detalhe_w	:= substr(ds_texto_proc_w || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280613) || qt_registro_w || WHEB_MENSAGEM_PCK.get_texto(280614)|| qt_internacao_w,1,255);
		if (ie_tipo_consiste_p = 1) then	
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 215, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		elsif (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= substr(ds_erro_w || '215, ',1,255);
		end if;	
		end;
	end if;
	end;
end if;

if (sus_obter_inco_ativa_proc(218,cd_procedimento_p)) then
	begin
	
	if (coalesce(cd_medico_exec_w,'X') <> 'X') then
		begin
		select	count(1)
		into STRICT	qt_medico_ativo_w
		from	medico
		where	cd_pessoa_fisica = cd_medico_exec_w
		and	ie_situacao	= 'A'  LIMIT 1;
		
		if (qt_medico_ativo_w = 0) then
			if (ie_tipo_consiste_p = 1) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 218, substr(WHEB_MENSAGEM_PCK.get_texto(280615)||cd_procedimento_p||WHEB_MENSAGEM_PCK.get_texto(280617)||cd_medico_exec_w,1,255), cd_estabelecimento_w, nm_usuario_p);
			elsif (ie_tipo_consiste_p = 2) then
				ds_erro_w	:= substr(ds_erro_w || '218, ',1,255);
			end if;
		end if;
		end;
	end if;
	
	open C04;
	loop
	fetch C04 into	
		ie_situacao_partic_w,
		cd_profissional_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		
		if (coalesce(ie_situacao_partic_w,'A') = 'I') then
			if (ie_tipo_consiste_p = 1) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 218, substr(WHEB_MENSAGEM_PCK.get_texto(280615)||cd_procedimento_p||WHEB_MENSAGEM_PCK.get_texto(280618)||cd_profissional_w,1,255), cd_estabelecimento_w, nm_usuario_p);
			elsif (ie_tipo_consiste_p = 2) then
				ds_erro_w	:= substr(ds_erro_w || '218, ',1,255);
			end if;
		end if;
		
		end;
	end loop;
	close C04;
	
	end;
end if;

if (sus_obter_inco_ativa_proc(220,cd_procedimento_p)) and (cd_subgrupo_w = 206) and (coalesce(nr_doc_convenio_w,'X') = 'X')then
	begin
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 220, substr(WHEB_MENSAGEM_PCK.get_texto(280615)||cd_procedimento_p||WHEB_MENSAGEM_PCK.get_texto(280620)||nr_doc_convenio_w||WHEB_MENSAGEM_PCK.get_texto(280617)||coalesce(cd_medico_exec_w,cd_profissional_w),1,255), cd_estabelecimento_w, nm_usuario_p);
	end if;
	end;
end if;

if (sus_obter_inco_ativa_proc(222,cd_procedimento_p)) and (coalesce(cd_doenca_cid_w,'X') <> 'X') then
	begin
	
	select	count(1)
	into STRICT	qt_subcateg_w
	from	cid_doenca
	where	cd_doenca_cid = cd_doenca_cid_w
	and	coalesce(ie_subcategoria,'S') = 'S'  LIMIT 1;
	
	if (qt_subcateg_w = 0) then
		if (ie_tipo_consiste_p = 1) then
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 222, substr(WHEB_MENSAGEM_PCK.get_texto(280615)||cd_procedimento_p||WHEB_MENSAGEM_PCK.get_texto(280621)|| cd_doenca_cid_w,1,255), cd_estabelecimento_w, nm_usuario_p);
		elsif (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= substr(ds_erro_w || '222, ',1,255);
		end if;
	end if;
	end;
end if;

if (Sus_obter_inco_ativa(225)) and (ie_tipo_atendimento_w = 1) and
	((coalesce(valid_if_detail_exists_proc(cd_detalhe_p => '10049', array_detalhe_p => array_cd_details_proc), 'N') = 'S') or (coalesce(valid_if_detail_exists_proc(cd_detalhe_p => '007', array_detalhe_p => array_cd_details_proc), 'N') = 'S')) then
	begin	
	
	begin
	select	trunc(coalesce(a.dt_inicial, b.dt_entrada)),
		trunc(coalesce(a.dt_final, coalesce(b.dt_alta,clock_timestamp())))
	into STRICT	dt_entrada_w,
		dt_alta_w
	from	atendimento_paciente	b,
		sus_aih_unif		a
	where	a.nr_atendimento	= nr_atendimento_p
	and	a.nr_interno_conta	= nr_interno_conta_p
	and	a.nr_atendimento	= b.nr_atendimento;
	exception
		when no_data_found then
		begin
		select	trunc(dt_entrada),
			trunc(coalesce(dt_alta,clock_timestamp()))
		into STRICT	dt_entrada_w,
			dt_alta_w
		from 	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;
                exception
                        when no_data_found then
                                dt_entrada_w := null;
                                dt_alta_w := null;
                        when too_many_rows then
                                dt_entrada_w := null;
                                dt_alta_w := null;
                end;
                when too_many_rows then
                begin
		select	trunc(dt_entrada),
			trunc(coalesce(dt_alta,clock_timestamp()))
		into STRICT	dt_entrada_w,
			dt_alta_w
		from 	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;
                exception
                        when no_data_found then
                                dt_entrada_w := null;
                                dt_alta_w := null;
                        when too_many_rows then
                                dt_entrada_w := null;
                                dt_alta_w := null;
                end;
	end;
	
	if (dt_entrada_w IS NOT NULL AND dt_entrada_w::text <> '') and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then
		begin
		dt_inicio_cons_w	:= dt_entrada_w;
		dt_fim_cons_w		:= dt_alta_w;

		qt_mes_total_w := (trunc(to_char(establishment_timezone_utils.startofmonth(dt_alta_w),'mm')) - trunc(to_char(establishment_timezone_utils.startofmonth(dt_entrada_w),'mm'))) + 1;
	
		if (qt_mes_total_w > 0) then
			begin
			for i in 1..qt_mes_total_w loop
				if (establishment_timezone_utils.startofmonth(dt_inicio_cons_w) = establishment_timezone_utils.startofmonth(dt_alta_w)) then
					dt_fim_cons_w	:= dt_alta_w;
				else
					dt_fim_cons_w	:= last_day(dt_inicio_cons_w);
				end if;

				qt_proc_perm_w	:= (dt_fim_cons_w - dt_inicio_cons_w) + 1;
				
				select	coalesce(sum(qt_procedimento),0)
				into STRICT	qt_proc_mes_w
				from	procedimento_paciente
				where	nr_interno_conta	= nr_interno_conta_p
				and	coalesce(cd_motivo_exc_conta::text, '') = ''
				and	establishment_timezone_utils.startofday(dt_procedimento)	between establishment_timezone_utils.startofday(dt_inicio_cons_w) and establishment_timezone_utils.startofday(dt_fim_cons_w)
				and	cd_procedimento = cd_procedimento_p
				and	ie_origem_proced = ie_origem_proced_p;
				
				if (qt_proc_mes_w > qt_proc_perm_w) then
					begin
					ie_cons_225_w	:= 'S';
					ds_cons_225_w	:= substr(ds_cons_225_w||WHEB_MENSAGEM_PCK.get_texto(280613)|| qt_proc_mes_w ||WHEB_MENSAGEM_PCK.get_texto(280622)|| qt_proc_perm_w ||WHEB_MENSAGEM_PCK.get_texto(280623)||to_char(dt_fim_cons_w,'mm/yyyy') ,1,255);
					end;
				end if;
				dt_inicio_cons_w	:= establishment_timezone_utils.startofmonth(add_months(dt_inicio_cons_w,1));
			end loop;
			end;
		end if;
		if (ie_cons_225_w = 'S') then
			begin
			ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p || ds_cons_225_w ||WHEB_MENSAGEM_PCK.get_texto(280627) || cd_procedimento_p,1,255);
			if (ie_tipo_consiste_p = 1) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 225, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			elsif (ie_tipo_consiste_p = 2) then
				ds_erro_w	:= substr(ds_erro_w || '225, ',1,255);
			end if;
			end;
		end if;
		end;
	end if;	
	end;
end if;

if (sus_obter_inco_ativa_proc(226,cd_procedimento_p)) then
	begin
	
	select	count(1)
	into STRICT	qt_registro_w
	from	sus_procedimento_registro
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p
	and	coalesce(sus_obter_reg_proc_bpa(cd_procedimento,ie_origem_proced),cd_registro) = cd_registro
	and	(((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280628)) and (cd_registro = 2)) or
		((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280630)) and (cd_registro in (3,4))) or
		((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280631)) and (cd_registro in (6,7))))  LIMIT 1;
	
	select	count(1)
	into STRICT	qt_serv_clas_proc_w
	from	sus_proced_serv_classif
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p  LIMIT 1;

	if (qt_registro_w > 0) and (coalesce(nr_seq_servico_w,0) = 0) and (qt_serv_clas_proc_w > 0) then
		begin
		ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p ||WHEB_MENSAGEM_PCK.get_texto(280627) || cd_procedimento_p,1,255);
			if (ie_tipo_consiste_p = 1) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 226, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;
		end;
	end if;
	
	end;
end if;

if (sus_obter_inco_ativa_proc(227,cd_procedimento_p)) then
	begin
	
	select	count(1)
	into STRICT	qt_registro_w
	from	sus_procedimento_registro
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p
	and	coalesce(sus_obter_reg_proc_bpa(cd_procedimento,ie_origem_proced),cd_registro) = cd_registro
	and	(((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280628)) and (cd_registro = 2)) or
		((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280630)) and (cd_registro in (3,4))) or
		((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280631)) and (cd_registro in (6,7))))  LIMIT 1;
	
	select	count(1)
	into STRICT	qt_serv_clas_proc_w
	from	sus_proced_serv_classif
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p  LIMIT 1;

	if (qt_registro_w > 0) and (coalesce(nr_seq_servico_classif_w,0) = 0) and (qt_serv_clas_proc_w > 0) then
		begin
		ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p ||WHEB_MENSAGEM_PCK.get_texto(280627) || cd_procedimento_p,1,255);
			if (ie_tipo_consiste_p = 1) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 227, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;
		end;
	end if;
	
	end;
end if;

if (sus_obter_inco_ativa_proc(228,cd_procedimento_p)) then
	begin
	select	count(1)
	into STRICT	qt_registro_w
	from	sus_procedimento_registro
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p
	and	((ds_tipo_atend_w	= WHEB_MENSAGEM_PCK.get_texto(280630)) and (cd_registro = 5))  LIMIT 1;

	if (qt_registro_w > 0) and
		((coalesce(nr_seq_servico_w,0) <> 0) or (coalesce(nr_seq_servico_classif_w,0) <> 0)) then
		begin
		ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p ||WHEB_MENSAGEM_PCK.get_texto(280627) || cd_procedimento_p,1,255);
			if (ie_tipo_consiste_p = 1) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 228, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;
		end;
	end if;
	
	end;
end if;

if (sus_obter_inco_ativa_proc(234,cd_procedimento_p)) then
	begin
	select	count(1)
	into STRICT	qt_servico_w
	from	procedimento_paciente a
	where	a.nr_sequencia = nr_seq_proc_p
	and	(a.nr_seq_servico IS NOT NULL AND a.nr_seq_servico::text <> '')
	and	not exists ( SELECT	1
			    from	sus_servico_hospital x
			    where	a.nr_seq_servico = x.nr_seq_servico)  LIMIT 1;
					
	select	count(1)
	into STRICT	qt_classif_w
	from	procedimento_paciente a
	where	a.nr_sequencia = nr_seq_proc_p
	and	(a.nr_seq_servico_classif IS NOT NULL AND a.nr_seq_servico_classif::text <> '')
	and	not exists ( SELECT	1
			    from	sus_serv_classif_hosp y
			    where	a.nr_seq_servico_classif = y.nr_seq_serv_classif)  LIMIT 1;						

	if	((qt_servico_w > 0) or (qt_classif_w > 0)) then
		begin
		ds_detalhe_w    := substr(ds_texto_proc_w || cd_procedimento_p || ds_texto_seq_proc_w || nr_seq_proc_p,1,255);
		if (ie_tipo_consiste_p = 1) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 234, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			elsif (ie_tipo_consiste_p = 2) then
				ds_erro_w	:= substr(ds_erro_w || '234, ',1,255);
			end if;
		end;
	end if;	
	end;
end if;

if (sus_obter_inco_ativa(252)) and (coalesce(cd_procedimento_real_w,0) > 0) and (ie_origem_proced_p = 7) and (cd_procedimento_p <> cd_procedimento_real_w) then
	begin
	
	qt_compat_w	:= 0;
	
	select	sum(qt)
	into STRICT	qt_reg_comp_w
	from (SELECT	count(1) qt
		from	sus_proc_compativel b
		where	b.cd_proc_principal	= cd_procedimento_real_w
		and	b.ie_origem_proc_princ	= 7
		and	b.cd_proc_secundario	= cd_procedimento_p
		and	b.ie_origem_proc_sec	= ie_origem_proced_p
		
union

		SELECT	count(1) qt
		from	sus_proc_compativel b
		where	b.cd_proc_secundario	= cd_procedimento_real_w
		and	b.ie_origem_proc_sec	= 7
		and	b.cd_proc_principal	= cd_procedimento_p
		and	b.ie_origem_proc_princ	= ie_origem_proced_p  LIMIT 1) alias3
	where	1 = 1;
	
	if (qt_reg_comp_w > 0) then
		begin
		
		if (coalesce(sus_validar_regra(11,cd_procedimento_real_w, ie_origem_proced_p,dt_procedimento_p),0) = 0) then
			begin		
			
			select	count(1) qt_compat
			into STRICT	qt_compat_w
			from	procedimento_paciente a,
				sus_proc_compativel c
			where	c.cd_proc_secundario 	= a.cd_procedimento
			and	a.nr_interno_conta	= nr_interno_conta_p
			and	a.cd_procedimento	= cd_procedimento_p
			and	a.ie_origem_proced 	= ie_origem_proced_p
			and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
			and	a.cd_procedimento	<> cd_procedimento_real_w
			and	not exists (	SELECT	1
						from	sus_proc_compativel b
						where	b.cd_proc_principal	= cd_procedimento_real_w
						and	b.ie_origem_proc_princ	= 7
						and	b.cd_proc_secundario	= a.cd_procedimento
						and	b.ie_origem_proc_sec	= a.ie_origem_proced
						and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
			and	not exists (	select	1
						from	sus_proc_compativel b
						where	b.cd_proc_secundario	= cd_procedimento_real_w
						and	b.ie_origem_proc_sec	= 7
						and	b.cd_proc_principal	= a.cd_procedimento
						and	b.ie_origem_proc_princ	= a.ie_origem_proced
						and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
			and	exists (	select	1
						from	sus_proc_compativel b
						where	b.cd_proc_principal	<> cd_procedimento_real_w
						and	b.ie_origem_proc_princ	= 7
						and	b.cd_proc_secundario	= a.cd_procedimento
						and	b.ie_origem_proc_sec	= a.ie_origem_proced
						and	b.ie_tipo_compatibilidade in (1,4,5)
						and	sus_validar_regra(11, b.cd_proc_principal, ie_origem_proc_princ,a.dt_procedimento) = 0  LIMIT 1)
			and	not exists (	select	1
						from	sus_proc_compativel b,
							procedimento_paciente x
						where	b.cd_proc_principal	= x.cd_procedimento
						and	b.ie_origem_proc_princ	= x.ie_origem_proced
						and	x.nr_interno_conta	= a.nr_interno_conta
						and	b.cd_proc_secundario	= a.cd_procedimento
						and	b.ie_origem_proc_sec	= a.ie_origem_proced
						and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)  LIMIT 1;
			
			if (qt_compat_w = 0) then
				begin
				
				select	count(1) qt_compat
				into STRICT	qt_compat_w
				from	procedimento_paciente a,
					sus_proc_compativel c
				where	c.cd_proc_secundario 	= a.cd_procedimento
				and	a.nr_interno_conta	= nr_interno_conta_p
				and	a.cd_procedimento	= cd_procedimento_p
				and	a.ie_origem_proced 	= ie_origem_proced_p
				and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
				and	a.cd_procedimento	<> cd_procedimento_real_w
				and	exists (SELECT	1
						from	sus_proc_compativel b
						where	b.cd_proc_principal	= cd_procedimento_real_w
						and	b.ie_origem_proc_princ	= 7
						and	b.cd_proc_secundario	= a.cd_procedimento
						and	b.ie_origem_proc_sec	= a.ie_origem_proced
						and	b.ie_tipo_compatibilidade = 2  LIMIT 1)
				and	exists (select	1
						from	sus_proc_compativel b
						where	b.cd_proc_secundario	= cd_procedimento_real_w
						and	b.ie_origem_proc_sec	= 7
						and	b.cd_proc_principal	= a.cd_procedimento
						and	b.ie_origem_proc_princ	= a.ie_origem_proced
						and	b.ie_tipo_compatibilidade = 2  LIMIT 1)  LIMIT 1;
				
				end;
			end if;
		
			end;
		else	
			begin
			
			open C03;
			loop
			fetch C03 into	
				cd_procedimento_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				
				qt_reg_comp_w := 0;
				ie_valida_diaria_w := coalesce((sus_obter_estrut_proc(cd_procedimento_w,7,'C','G') = 8),false);
						
				if (ie_valida_diaria_w) then
					begin
					select	count(*)
					into STRICT	qt_reg_comp_w
					from	sus_proc_compativel
					where	cd_proc_secundario 	= cd_procedimento_w
					and	ie_origem_proc_sec	= 7  LIMIT 1;						
					
					end;
				end if;
				
				if	((ie_valida_diaria_w AND qt_reg_comp_w > 0) or (not ie_valida_diaria_w)) then
					begin					
					
					select	count(1) qt_compat
					into STRICT	qt_compat_w
					from	procedimento_paciente a,
						sus_proc_compativel c
					where	c.cd_proc_secundario 	= a.cd_procedimento
					and	a.nr_interno_conta	= nr_interno_conta_p
					and	a.cd_procedimento	= cd_procedimento_p
					and	a.ie_origem_proced 	= ie_origem_proced_p
					and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
					and	a.cd_procedimento	<> cd_procedimento_w
					and	not exists (	SELECT	1
								from	sus_proc_compativel b
								where	b.cd_proc_principal	= cd_procedimento_w
								and	b.ie_origem_proc_princ	= 7
								and	b.cd_proc_secundario	= a.cd_procedimento
								and	b.ie_origem_proc_sec	= a.ie_origem_proced
								and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
					and	not exists (	select	1
								from	sus_proc_compativel b
								where	b.cd_proc_secundario	= cd_procedimento_w
								and	b.ie_origem_proc_sec	= 7
								and	b.cd_proc_principal	= a.cd_procedimento
								and	b.ie_origem_proc_princ	= a.ie_origem_proced
								and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
					and	exists (	select	1
								from	sus_proc_compativel b
								where	b.cd_proc_principal	<> cd_procedimento_real_w
								and	b.ie_origem_proc_princ	= 7
								and	b.cd_proc_secundario	= a.cd_procedimento
								and	b.ie_origem_proc_sec	= a.ie_origem_proced
								and	b.ie_tipo_compatibilidade in (1,4,5)
								and	sus_validar_regra(11, b.cd_proc_principal, ie_origem_proc_princ,a.dt_procedimento) = 0  LIMIT 1)	
					and	not exists (	select	1
								from	sus_proc_compativel b,
									procedimento_paciente x
								where	b.cd_proc_principal	= x.cd_procedimento
								and	b.ie_origem_proc_princ	= x.ie_origem_proced
								and	x.nr_interno_conta	= a.nr_interno_conta
								and	b.cd_proc_secundario	= cd_procedimento_w
								and	b.ie_origem_proc_sec	= 7
								and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)  LIMIT 1;			
					
					if (qt_compat_w = 0) then
						begin
						
						select	count(1) qt_compat
						into STRICT	qt_compat_w
						from	procedimento_paciente a,
							sus_proc_compativel c
						where	c.cd_proc_secundario 	= a.cd_procedimento
						and	a.nr_interno_conta	= nr_interno_conta_p
						and	a.cd_procedimento	= cd_procedimento_p
						and	a.ie_origem_proced 	= ie_origem_proced_p
						and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
						and	a.cd_procedimento	<> cd_procedimento_w
						and	exists (SELECT	1
								from	sus_proc_compativel b
								where	b.cd_proc_principal	= cd_procedimento_w
								and	b.ie_origem_proc_princ	= 7
								and	b.cd_proc_secundario	= a.cd_procedimento
								and	b.ie_origem_proc_sec	= a.ie_origem_proced
								and	b.ie_tipo_compatibilidade = 2  LIMIT 1)
						and	exists (select	1
								from	sus_proc_compativel b
								where	b.cd_proc_secundario	= cd_procedimento_w
								and	b.ie_origem_proc_sec	= 7
								and	b.cd_proc_principal	= a.cd_procedimento
								and	b.ie_origem_proc_princ	= a.ie_origem_proced
								and	b.ie_tipo_compatibilidade = 2  LIMIT 1)  LIMIT 1;
						
						end;
					end if;
					
					end;
				end if;
				
				
				end;
			end loop;
			close C03;
			end;
		end if;	
	
		if (qt_compat_w > 0) and (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= ds_erro_w || '252, ';
		end if;	
	
		end;
	end if;	
	
	if (cd_procedimento_real_w in (503010014,503010026)) and (qt_compat_w = 0) then
		begin		
		
		select	count(1)
		into STRICT	qt_compat_w
		from	procedimento_paciente a
		where	a.nr_interno_conta	= nr_interno_conta_p				
		and	a.ie_origem_proced	= 7
		and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
		and	a.cd_procedimento	= cd_procedimento_p
		and	not exists (	SELECT	1
					from	sus_proc_compativel b
					where	b.cd_proc_principal	= cd_procedimento_real_w
					and	b.ie_origem_proc_princ	= 7
					and	b.cd_proc_secundario	= a.cd_procedimento
					and	b.ie_origem_proc_sec	= a.ie_origem_proced
					and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1)
		and	not exists (	select	1
					from	sus_proc_compativel b
					where	b.cd_proc_secundario	= cd_procedimento_real_w
					and	b.ie_origem_proc_sec	= 7
					and	b.cd_proc_principal	= a.cd_procedimento
					and	b.ie_origem_proc_princ	= a.ie_origem_proced
					and	b.ie_tipo_compatibilidade in (1,4,5)  LIMIT 1);	
		
		if (qt_compat_w > 0) and (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= ds_erro_w || '252, ';
		end if;
		
		end;		
	end if;
	
	end;
end if;	

if (sus_obter_inco_ativa_proc(253,cd_procedimento_p)) then
	begin
	
	qt_detalhe_proc_10065_w := valid_if_detail_exists_proc(cd_detalhe_p => '10065', array_detalhe_p => array_cd_details_proc);
	
	select	count(1)
	into STRICT	qt_max_dia_tres_w
	from (SELECT	establishment_timezone_utils.startofday(dt_procedimento),
			cd_procedimento,
			sum(qt_procedimento) qt_proc
		from	procedimento_paciente
		where	nr_interno_conta = nr_interno_conta_p
		and	cd_procedimento	= cd_procedimento_p
		and	ie_origem_proced = ie_origem_proced_p
		and	dt_procedimento = dt_procedimento_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	qt_detalhe_proc_10065_w = 'S'
		group by establishment_timezone_utils.startofday(dt_procedimento),
			cd_procedimento) a
	where (a.qt_proc + coalesce(qt_procedimento_p,0)) > 3  LIMIT 1;	
	
	if (qt_max_dia_tres_w > 0) then
		if (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= substr(ds_erro_w || '253, ',1,255);
		end if;
	end if;
	end;
end if;

if (sus_obter_inco_ativa_proc(254,cd_procedimento_p)) then
	begin

	qt_detalhe_proc_10066_w := valid_if_detail_exists_proc(cd_detalhe_p => '10066', array_detalhe_p => array_cd_details_proc);

	select	count(1)
	into STRICT	qt_max_dia_cinco_w
	from (SELECT	establishment_timezone_utils.startofday(dt_procedimento),
			cd_procedimento,
			sum(qt_procedimento) qt_proc
		from	procedimento_paciente
		where	nr_interno_conta = nr_interno_conta_p
		and	cd_procedimento	= cd_procedimento_p
		and	ie_origem_proced = ie_origem_proced_p
		and	dt_procedimento = dt_procedimento_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	qt_detalhe_proc_10066_w = 'S'
		group by establishment_timezone_utils.startofday(dt_procedimento),
			cd_procedimento) a
	where (a.qt_proc + coalesce(qt_procedimento_p,0)) > 5  LIMIT 1;
	
	if (qt_max_dia_cinco_w > 0) then
		if (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= substr(ds_erro_w || '254, ',1,255);
		end if;
	end if;
	end;
end if;

if (sus_obter_inco_ativa_proc(260,cd_procedimento_p)) and (valid_if_detail_exists_proc(cd_detalhe_p => '10047', array_detalhe_p => array_cd_details_proc) = 'S') then
	begin
	qt_auxiliar_w		:= 0;
	qt_prim_auxiliar_w	:= 0;
	
	select	count(*)
	into STRICT	qt_auxiliar_w
	from	procedimento_participante
	where	nr_sequencia = nr_seq_proc_p;
	
	if (qt_auxiliar_w = 1) then
		select	count(1)
		into STRICT	qt_prim_auxiliar_w
		from	procedimento_participante
		where	nr_sequencia = nr_seq_proc_p
		and	sus_obter_indicador_equipe(ie_funcao) = 2  LIMIT 1;
	end if;
	
	if (qt_auxiliar_w <> 1) or (qt_prim_auxiliar_w = 0) then
		if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p || WHEB_MENSAGEM_PCK.get_texto(280634) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280635) || nr_seq_proc_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 260, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end if;
	end if;
	end;
end if;

if (sus_obter_inco_ativa_proc(263,cd_procedimento_p)) and (ds_tipo_atend_w = WHEB_MENSAGEM_PCK.get_texto(280630)) then
	begin
	
	begin
	select	qt_nascido_vivo,
		qt_nascido_morto			
	into STRICT	qt_nasc_vivo_w,
		qt_nasc_morto_w
	from	sus_aih_unif
	where	nr_interno_conta	= nr_interno_conta_p;	
	exception
	when others then
		begin
		select	qt_nascido_vivo,
			qt_nascido_morto
		into STRICT	qt_nasc_vivo_w,
			qt_nasc_morto_w
		from	sus_dados_aih_conta
		where	nr_interno_conta = nr_interno_conta_p;
		exception
		when others then
			qt_nasc_vivo_w 	:= 0;
			qt_nasc_morto_w	:= 0;
		end;
	end;

	qt_detalhe_proc_10045_w := valid_if_detail_exists_proc(cd_detalhe_p => '10045', array_detalhe_p => array_cd_details_proc);

	select	count(nr_sequencia)
	into STRICT	qt_cons_nvivo_w
	from	procedimento_paciente
	where	nr_interno_conta = nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	qt_detalhe_proc_10045_w = 'S'
	and	cd_procedimento = cd_procedimento_p
	and	ie_origem_proced = ie_origem_proced_p  LIMIT 1;

	qt_detalhe_proc_10044_w := valid_if_detail_exists_proc(cd_detalhe_p => '10044', array_detalhe_p => array_cd_details_proc);

	select	count(nr_sequencia)
	into STRICT	qt_nviv_nmort_w
	from	procedimento_paciente
	where	nr_interno_conta = nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	qt_detalhe_proc_10044_w = 'S'
	and	cd_procedimento = cd_procedimento_p
	and	ie_origem_proced = ie_origem_proced_p  LIMIT 1;
	
	if (qt_cons_nvivo_w > 0) and (qt_procedimento_p > qt_nasc_vivo_w) then
		begin
		if (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= substr(ds_erro_w || '263, ',1,255);
		end if;
		end;
	elsif (qt_nviv_nmort_w > 0) and
		(qt_procedimento_p > (qt_nasc_vivo_w + qt_nasc_morto_w)) then
		begin
		if (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= substr(ds_erro_w || '263, ',1,255);
		end if;
		end;
	end if;	
	end;
end if;

if (sus_obter_inco_ativa_proc(264,cd_procedimento_p)) and (cd_forma_organizacao_w = 50103) and (coalesce(nr_doc_convenio_w,'X') = 'X') then
	begin
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p || WHEB_MENSAGEM_PCK.get_texto(280634) || cd_procedimento_p ||WHEB_MENSAGEM_PCK.get_texto(280590)||coalesce(cd_medico_exec_w,cd_profissional_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 264, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
	end;	
end if;

if (sus_obter_inco_ativa_proc(272,cd_procedimento_p)) and (cd_grupo_w	= 7) and (sus_obter_tiporeg_proc(cd_procedimento_p,ie_origem_proced_p,'C',12) = 2)then
	begin
	
	select	count(1)
	into STRICT	qt_cnpj_fornec_w
	from	sus_bpa_opme
	where	nr_seq_procedimento = nr_seq_proc_p
	and	coalesce(cd_cnpj_fornecedor,'X') <> 'X'  LIMIT 1;
	
	if (ie_tipo_consiste_p = 1) and (qt_cnpj_fornec_w = 0)	then
		begin
		ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p || WHEB_MENSAGEM_PCK.get_texto(280634) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280635) || nr_seq_proc_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 272, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;	
	end;
end if;

if (sus_obter_inco_ativa_proc(277,cd_procedimento_p)) then
	begin
	
	select	count(1)
	into STRICT	qt_existe_regra_w
	from	sus_regra_qtd_aux_proc
	where	ie_situacao = 'A'  LIMIT 1;
	
	if (qt_existe_regra_w > 0) then
		begin

		open c05;
		loop
		fetch c05 into	
			nr_seq_regra_qtd_aux_w;
		EXIT WHEN NOT FOUND; /* apply on c05 */			
		end loop;
		close c05;
		
		if (coalesce(nr_seq_regra_qtd_aux_w,0) > 0) then
			begin
			
			select	coalesce(qt_limite_axiliar,0)
			into STRICT 	qt_limite_auxiliar_w
			from	sus_regra_qtd_aux_proc a
			where	a.nr_sequencia = nr_seq_regra_qtd_aux_w;
			
			select 	count(*)
			into STRICT	qt_participantes_w
			from	procedimento_participante a,
				funcao_medico b
			where	a.ie_funcao	= b.cd_funcao
			and	a.nr_Sequencia 	= nr_seq_proc_p
			and 	coalesce(b.ie_ind_equipe_sus,'0') <> '6';
		
			if (qt_limite_auxiliar_w <> qt_participantes_w) then
				begin
				ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p || WHEB_MENSAGEM_PCK.get_texto(280634) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280635) || nr_seq_proc_p,1,255);
				if (ie_tipo_consiste_p = 1) then
					CALL sus_gravar_inconsistencia(nr_interno_conta_p, 277, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
				elsif (ie_tipo_consiste_p = 2) then
					ds_erro_w	:= substr(ds_erro_w || '277, ',1,255);
				end if;
				end;
			end if;	
		
			end;
		end if;
		end;
	end if;
	end;
end if;
if (sus_obter_inco_ativa_proc(292,cd_procedimento_p)) then
	begin
	
	select	coalesce(max(cd_pessoa_fisica),'X')
	into STRICT	cd_medico_crm_w
	from	procedimento_paciente
	where	nr_interno_conta = nr_interno_conta_p
	and	(cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> '') 
	and	coalesce(cd_medico_executor::text, '') = ''
	and	coalesce(cd_motivo_exc_conta::text, '') = '' 
	and 	sus_obter_se_executor_crm(cd_pessoa_fisica) = 'S'
	and	cd_procedimento = cd_procedimento_p
	and	ie_origem_proced = ie_origem_proced_p;
	
	if (cd_medico_crm_w <> 'X') then
		begin
		ds_detalhe_w    := substr(ds_texto_conta_w || nr_interno_conta_p || WHEB_MENSAGEM_PCK.get_texto(280634) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280635) || nr_seq_proc_p || WHEB_MENSAGEM_PCK.get_texto(280592) || cd_medico_crm_w,1,255);
		if (ie_tipo_consiste_p = 1) then
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 292, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		elsif (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= substr(ds_erro_w || '292, ',1,255);
		end if;
		end;
	end if;
	end;
end if;
ds_erro_p	:= ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_proc ((nr_interno_conta_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_profissional_exec_p text, qt_procedimento_p bigint, nr_atendimento_p bigint, nr_seq_proc_p bigint, nm_usuario_p text, ie_tipo_consiste_p bigint, dt_procedimento_p timestamp, ds_erro_p out text) is  ds_detalhe_w varchar(255) DEFAULT '') FROM PUBLIC;

