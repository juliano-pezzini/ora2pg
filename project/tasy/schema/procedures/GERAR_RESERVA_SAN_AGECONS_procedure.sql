-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_reserva_san_agecons ( nm_usuario_p text, nr_seq_agenda_p bigint, cd_estabelecimento_p bigint ) AS $body$
DECLARE

	
dt_agenda_w			timestamp;
cd_pf_realizou_w	varchar(10);
cd_pessoa_fisica_w	varchar(10);
ie_gera_prescr_w	varchar(1);
cd_medico_w			varchar(10);
cd_convenio_w		integer;
nr_atendimento_w	bigint;
nr_sequencia_w		bigint;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_derivado_w	bigint;
qt_solicitada_w		san_reserva_item.qt_solicitada%type;
nr_seq_item_w		smallint;
nr_prescricao_w		bigint 	:= null;
nr_seq_cursor_w		bigint;
nr_seq_status_w		agenda_pac_sangue_status.nr_sequencia%type;
ds_campos_obrigatorios_w	varchar(255);

c01 CURSOR FOR
	SELECT	substr(obter_derivado_proc_inter(nr_seq_proc_interno),1,90) ds_derivado,
			qt_bolsas_sangue,
			nr_sequencia
	from	agenda_pac_sangue
	where	nr_seq_agenda_cons = nr_seq_agenda_p
	and	substr(obter_derivado_proc_inter(nr_seq_proc_interno),1,90) is not null;


BEGIN

ie_gera_prescr_w := Obter_Param_Usuario(866, 304, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gera_prescr_w);

select	cd_pessoa_fisica
into STRICT	cd_pf_realizou_w
from	usuario
where	nm_usuario = nm_usuario_p;

if (coalesce(cd_pf_realizou_w::text, '') = '') then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(263176);
end if;

select	cd_pessoa_fisica,
	nr_atendimento,
	cd_medico,
	cd_convenio,
	dt_agenda,
	cd_procedimento,
	ie_origem_proced
into STRICT	cd_pessoa_fisica_w,
	nr_atendimento_w,
	cd_medico_w,
	cd_convenio_w,
	dt_agenda_w,
	cd_procedimento_w,
	ie_origem_proced_w
from	agenda_consulta
where	nr_sequencia = nr_seq_agenda_p;

ds_campos_obrigatorios_w := '';
if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
	if (ds_campos_obrigatorios_w IS NOT NULL AND ds_campos_obrigatorios_w::text <> '') then
		ds_campos_obrigatorios_w := ds_campos_obrigatorios_w || ', ';
	end if;
	ds_campos_obrigatorios_w := ds_campos_obrigatorios_w || obter_desc_expressao(295156);
end if;
if (coalesce(cd_medico_w::text, '') = '') then
	if (ds_campos_obrigatorios_w IS NOT NULL AND ds_campos_obrigatorios_w::text <> '') then
		ds_campos_obrigatorios_w := ds_campos_obrigatorios_w || ', ';
	end if;
	ds_campos_obrigatorios_w := ds_campos_obrigatorios_w || obter_desc_expressao(296514);
end if;
if (coalesce(cd_convenio_w::text, '') = '') then
	if (ds_campos_obrigatorios_w IS NOT NULL AND ds_campos_obrigatorios_w::text <> '') then
		ds_campos_obrigatorios_w := ds_campos_obrigatorios_w || ', ';
	end if;
	ds_campos_obrigatorios_w := ds_campos_obrigatorios_w || obter_desc_expressao(286193);
end if;

if (ds_campos_obrigatorios_w IS NOT NULL AND ds_campos_obrigatorios_w::text <> '') then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(1082931,'DS_CAMPOS='||ds_campos_obrigatorios_w);
end if;

select	nextval('san_reserva_seq')
into STRICT	nr_sequencia_w
;

select	max(nr_sequencia)
into STRICT	nr_seq_status_w
from	agenda_pac_sangue_status
where	ie_alterar_status = 'S';

if (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') then
	if (ie_gera_prescr_w = 'S') then
		nr_prescricao_w := gerar_prescr_san_agecons(nr_seq_agenda_p, nm_usuario_p, cd_estabelecimento_p, nr_prescricao_w);
	end if;	

	insert	into san_reserva(
			nr_sequencia,
			cd_pessoa_fisica,
			dt_cirurgia,
			dt_atualizacao,
			nm_usuario,
			dt_reserva,
			cd_pf_realizou,
			cd_medico_requisitante,
			cd_medico_cirurgiao,
			cd_convenio,
			nr_atendimento,
			ds_observacao,
			ie_origem_proced,
			cd_procedimento,
			ie_status,
			nr_seq_entidade,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_estabelecimento,
			nr_prescricao,
			nr_seq_agenda_cons)
	values (
			nr_sequencia_w,
			cd_pessoa_fisica_w,
			dt_agenda_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			cd_pf_realizou_w,
			cd_medico_w,
			cd_medico_w,
			cd_convenio_w,
			nr_atendimento_w,
			null,
			ie_origem_proced_w,
			cd_procedimento_w,
			'R',
			null,
			clock_timestamp(),
			nm_usuario_p,
			cd_estabelecimento_p,
			nr_prescricao_w,
			nr_seq_agenda_p);
	commit;
end if;

open c01;
loop
fetch c01 into 	
	nr_seq_derivado_w,
	qt_solicitada_w,
	nr_seq_cursor_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	select	coalesce(max(nr_seq_item),0) + 1
	into STRICT	nr_seq_item_w
	from	san_reserva_item
	where	nr_seq_reserva = nr_sequencia_w;
	
	if (coalesce(qt_solicitada_w,-1) < 0) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(1010293);
	end if;

	insert	into san_reserva_item(
			nr_seq_reserva,
			nr_seq_item,
			nr_seq_derivado,
			qt_solicitada,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			ie_util_hemocomponente,
			qt_vol_hemocomp,
			nr_prescricao,
			nr_seq_prescr,
			ie_suspenso,
			dt_prevista)
	values (
			nr_sequencia_w,
			nr_seq_item_w,
			nr_seq_derivado_w,
			qt_solicitada_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			null,
			null,
			null,
			null,
			'N',
			null);
	
	if (nr_seq_status_w > 0) then
		update	agenda_pac_sangue
		set		nr_seq_status	= nr_seq_status_w
		where	nr_sequencia	= nr_seq_cursor_w;
	end if;
commit;
end loop;
close c01;

if (nr_seq_agenda_p > 0 ) then
	CALL executar_evento_agenda('GRHS','S',nr_seq_agenda_p,cd_estabelecimento_p,nm_usuario_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_reserva_san_agecons ( nm_usuario_p text, nr_seq_agenda_p bigint, cd_estabelecimento_p bigint ) FROM PUBLIC;

