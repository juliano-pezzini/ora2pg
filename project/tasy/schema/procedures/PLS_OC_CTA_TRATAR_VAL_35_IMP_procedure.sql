-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_35_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
i					integer;
ie_gera_ocorrencia_w			varchar(1);
tb_seq_selecao_w				pls_util_cta_pck.t_number_table;
tb_valido_w				pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w				pls_util_cta_pck.t_varchar2_table_4000;
dt_liberacao_w				pls_guia_plano.dt_liberacao%type;
count_w					integer;
nr_dia_diferenca_w			pls_oc_cta_val_data_conta.nr_dia_diferenca%type;

-- Informações da validação de não-utilização de item autorizado
C01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	ie_data_conta 		ie_data_conta,
		coalesce(nr_dia_diferenca,0)	nr_dia_diferenca
	from	pls_oc_cta_val_data_conta
	where	nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc;

--Cursor com as contas selecionadas para gerar ocorrência
C02 CURSOR(	nr_id_transacao_pc			pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	conta.nr_sequencia			nr_seq_conta,
		trunc(conta.dt_atendimento_conv,'dd')	dt_atendimento,
		conta.dt_fim_faturamento		dt_alta,
		conta.dt_inicio_faturamento		dt_entrada,
		clock_timestamp()				dt_atual,
		trunc(clock_timestamp(),'dd')			dt_atual_trunc,
		trunc(prot.dt_transacao,'dd')		dt_protocolo,
		trunc(prot.dt_recebimento_conv,'dd')	dt_recebimento,
		fim_dia(prot.dt_mes_competencia_conv)	dt_competencia,
		conta.nr_seq_guia_conv			nr_seq_guia,
		conta.dt_atendimento_conv		dt_atendimento_referencia
	from	pls_conta_imp		conta,
		pls_protocolo_conta_imp	prot
	where	exists (SELECT	1
			from	pls_oc_cta_selecao_imp	sel
			where	sel.nr_id_transacao	= nr_id_transacao_pc
			and	sel.ie_valido		= 'S'
			and	sel.nr_seq_conta	= conta.nr_sequencia)
	and	prot.nr_sequencia	= conta.nr_seq_protocolo;
BEGIN
-- Deve exisitr informação da regra para executar a validação
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') and (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '')  then

	--Abre o cursor das validações cadastradas para regra
	for	r_C01_w in C01( nr_seq_combinada_p) loop
		--Verifica se foi definido um tipo de data para validar caso contrário não irá gerar nenhuma ocorrência
		if (r_C01_w.ie_data_conta IS NOT NULL AND r_C01_w.ie_data_conta::text <> '') then
			-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
			CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', 'N', nr_id_transacao_p, null);
			--limpa as variáveis
			SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
			i := 0;

			nr_dia_diferenca_w := r_C01_w.nr_dia_diferenca;
			if (nr_dia_diferenca_w < 0) then
				nr_dia_diferenca_w := 0;
			end if;

			--Abre o cursor com as contas selecionadas que irão gerar as ocorrências
			for	r_C02_w in C02(nr_id_transacao_p)loop
				--Inicializa como 'N' porém se alguma das opções casarem já irá gerar  a ocorrência
				ie_gera_ocorrencia_w := 'N';

				case(r_C01_w.ie_data_conta)
					--Data da alta menor que a data da entrada(Se for maior ou igual, não gera ocorrência)
					when 1 then
						if ( r_C02_w.dt_alta < r_C02_w.dt_entrada) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					--Data da alta maior que a data atual(Se for menor ou igual, não gera ocorrência)
					when 2 then
						if ( r_C02_w.dt_alta > r_C02_w.dt_atual) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					--Data da emissão da conta maior que a data atual(Se for menor ou igual, não gera ocorrência)
					when 3 then
						if ( r_C02_w.dt_atendimento > r_C02_w.dt_atual_trunc) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					--Data da entrada maior que a data atual(Se for menor ou igual, não gera ocorrência)
					when 4 then
						if ( r_C02_w.dt_entrada > r_C02_w.dt_atual) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					--Data da emissão da conta maior que a data do protocolo(Se for maior ou igual, não gera ocorrência)
					when 5 then
						if ( r_C02_w.dt_atendimento > r_C02_w.dt_protocolo) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					--Data de referência superior a data de recebimento do protocolo (Se for maior ou igual, não gera ocorrência)
					when 6 then
						if ( r_C02_w.dt_atendimento > r_C02_w.dt_recebimento) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					-- Diferença entre data de emissão e data atual maior que o permitido
					when 7 then
						if	((r_C02_w.dt_atual_trunc - r_C02_w.dt_atendimento) > nr_dia_diferenca_w) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					-- Data de atendimento da conta superior a data de competencia do protocolo
					when 8 then
						if ( r_C02_w.dt_atendimento > r_C02_w.dt_competencia) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					-- Data de referência anterior a data de autorização
					when 9 then
						if (r_C02_w.nr_seq_guia IS NOT NULL AND r_C02_w.nr_seq_guia::text <> '') then

							select 	count(1)
							into STRICT	count_w
							from	pls_guia_plano
							where	nr_seq_guia_principal = r_C02_w.nr_seq_guia;

							if (count_w > 0) then

								select 	dt_liberacao
								into STRICT	dt_liberacao_w
								from	pls_guia_plano
								where	nr_seq_guia_principal = r_C02_w.nr_seq_guia;

								if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then
									if ( r_C02_w.dt_atendimento_referencia < dt_liberacao_w) then
										ie_gera_ocorrencia_w := 'S';
									end if;
								end if;
							end if;
						end if;
					-- Diferença de dias entre data de alta e data atual maior que a permitida
					when 10 then
						if	( r_C02_w.dt_alta > (r_C02_w.dt_atual_trunc + nr_dia_diferenca_w)) then
							ie_gera_ocorrencia_w := 'S';
						end if;
					else
						null;
				end case;

				if ( ie_gera_ocorrencia_w = 'S') then
					--Passa nr_seq_conta ao invéz do nr_seq_selecao, pois será feito validação a nível de conta
					tb_seq_selecao_w(i) := r_C02_w.nr_seq_conta;
					tb_valido_w(i) 	    := 'S';
					tb_observacao_w(i)  := null;

					if ( i >= pls_cta_consistir_pck.qt_registro_transacao_w) then
						--Grava o que restar nas variáveis na tabela
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ_CONTA');
						--limpa as variáveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
						i := 0;
					else
						i := i + 1;
					end if;
				end if;
			end loop; -- C02
		end if;
	end loop; -- C01
	--Grava o que restar nas variáveis na tabela
	CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
							tb_observacao_w, nr_id_transacao_p,
							'SEQ_CONTA');
	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N',
						ie_regra_excecao_p, null,
						nr_id_transacao_p, null);
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_35_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

