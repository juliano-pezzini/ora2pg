-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proc_zerado_estab_orig ( nr_sequencia_p bigint, nr_seq_proc_orig_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_pacote_w		varchar(1);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_sequencia_w		bigint;
nr_interno_conta_w	bigint;
nr_atendimento_w	bigint;
dt_procedimento_w	timestamp;
dt_entrada_w		timestamp;
dt_alta_w		timestamp;
nr_doc_convenio_w	varchar(30);
cd_setor_atendimento_w	bigint;
dt_acerto_conta_w	timestamp;
cd_convenio_calculo_w	integer;
cd_categoria_calculo_w	varchar(10);
nr_seq_proc_orig_w	bigint;
qt_regra_duplic_proc_w	bigint;
cd_area_procedimento_w	bigint;
cd_especialidade_w	bigint;
cd_grupo_proc_w		bigint;
ie_tipo_atendimento_w	smallint;
cd_proc_conta_w		bigint;
ie_origem_proc_conta_w	bigint;
cd_area_proc_conta_w	integer;
cd_espec_proc_conta_w	integer;
cd_grupo_proc_conta_w	bigint;
ie_duplicar_w		varchar(1);
nr_seq_partic_w		bigint;
qt_partic_w		bigint;
qt_partic_atual_w	bigint;
nr_conta_ret_w conta_paciente.nr_interno_conta%type;
ie_somente_primeiro_w	conv_regra_duplic_proc.ie_somente_primeiro%type;
nr_interno_conta_proc_w	conta_paciente.nr_interno_conta%type;
cd_estab_conta_w	conta_paciente.cd_estabelecimento%type;
qt_proc_duplicado_w	bigint;

C01 CURSOR FOR
	SELECT	nr_interno_conta
	from	conta_paciente
	where	nr_atendimento = nr_atendimento_w
	and	cd_estabelecimento = cd_estabelecimento_p
	and	ie_status_acerto = 1
	order by	nr_interno_conta;

C02 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced
	from	procedimento_paciente
	where	nr_interno_conta = nr_interno_conta_w
	order by	nr_sequencia;

C03 CURSOR FOR
	SELECT	nr_seq_partic
	from	procedimento_participante
	where	nr_sequencia = nr_sequencia_p;

C04 CURSOR FOR
	SELECT	ie_somente_primeiro
	from	conv_regra_duplic_proc
	where	cd_convenio = cd_convenio_p
	and	coalesce(cd_area_procedimento, coalesce(cd_area_proc_conta_w,0)) = coalesce(cd_area_proc_conta_w,0)
	and	coalesce(cd_especialidade, coalesce(cd_espec_proc_conta_w,0)) = coalesce(cd_espec_proc_conta_w,0)
	and	coalesce(cd_grupo_proc, coalesce(cd_grupo_proc_conta_w,0)) = coalesce(cd_grupo_proc_conta_w,0)
	and	coalesce(cd_procedimento, coalesce(cd_proc_conta_w,0)) = coalesce(cd_proc_conta_w,0)
	and	coalesce(ie_origem_proced, coalesce(ie_origem_proc_conta_w,0)) = coalesce(ie_origem_proc_conta_w,0)
	and	coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_w,0)) = coalesce(ie_tipo_atendimento_w,0)
	order by	coalesce(cd_procedimento,0),
		coalesce(ie_origem_proced,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0),
		coalesce(cd_convenio,0),
		coalesce(ie_tipo_atendimento,0);




BEGIN

select 	max(cd_procedimento),
	max(ie_origem_proced),
	max(nr_atendimento),
	max(dt_procedimento),
	max(nr_doc_convenio),
	max(cd_setor_atendimento),
	max(nr_seq_proc_orig),
	max(nr_interno_conta)
into STRICT	cd_procedimento_w,
	ie_origem_proced_w,
	nr_atendimento_w,
	dt_procedimento_w,
	nr_doc_convenio_w,
	cd_setor_atendimento_w,
	nr_seq_proc_orig_w,
	nr_interno_conta_proc_w
from 	procedimento_paciente
where 	nr_sequencia = nr_sequencia_p;

select	max(cd_estabelecimento)
into STRICT	cd_estab_conta_w
from	conta_paciente
where	nr_interno_conta = nr_interno_conta_proc_w;

if (coalesce(nr_atendimento_w,0) > 0) then
	select 	max(dt_entrada),
		max(dt_alta),
		max(ie_tipo_atendimento)
	into STRICT	dt_entrada_w,
		dt_alta_w,
		ie_tipo_atendimento_w
	from 	atendimento_paciente
	where	nr_atendimento = nr_atendimento_w;
end if;

select	max(cd_area_procedimento),
	max(cd_especialidade),
	max(cd_grupo_proc)
into STRICT	cd_area_procedimento_w,
	cd_especialidade_w,
	cd_grupo_proc_w
from	estrutura_procedimento_v
where	cd_procedimento = cd_procedimento_w
and	ie_origem_proced = ie_origem_proced_w;

begin
--ie_pacote_w:= nvl(OBTER_ATENDIMENTO_PACOTE(nr_atendimento_w, ie_origem_proced_w, cd_convenio_p, cd_estabelecimento_p),'N');
SELECT * FROM obter_atendimento_pacote( nr_atendimento_w, null, 'N', ie_pacote_w, nr_conta_ret_w, cd_procedimento_w, ie_origem_proced_w) INTO STRICT ie_pacote_w, nr_conta_ret_w;
if coalesce(ie_pacote_w::text, '') = '' then
ie_pacote_w :='N';
end if;

exception
	when others then
	ie_pacote_w:= 'N';
end;

ie_duplicar_w	:= 'N';

if (ie_pacote_w = 'N') and (coalesce(nr_seq_proc_orig_p,0) = 0) then
	select	count(*)
	into STRICT	qt_regra_duplic_proc_w
	from	conv_regra_duplic_proc
	where	cd_convenio = cd_convenio_p
	and	coalesce(cd_area_procedimento, coalesce(cd_area_procedimento_w,0)) = coalesce(cd_area_procedimento_w,0)
	and	coalesce(cd_especialidade, coalesce(cd_especialidade_w,0)) = coalesce(cd_especialidade_w,0)
	and	coalesce(cd_grupo_proc, coalesce(cd_grupo_proc_w,0)) = coalesce(cd_grupo_proc_w,0)
	and	coalesce(cd_procedimento, coalesce(cd_procedimento_w,0)) = coalesce(cd_procedimento_w,0)
	and	coalesce(ie_origem_proced, coalesce(ie_origem_proced_w,0)) = coalesce(ie_origem_proced_w,0)
	and	coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_w,0)) = coalesce(ie_tipo_atendimento_w,0);

	if (qt_regra_duplic_proc_w > 0) then
		ie_duplicar_w	:= 'S';

		open C01;
		loop
		fetch C01 into
			nr_interno_conta_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			open C02;
			loop
			fetch C02 into
				cd_proc_conta_w,
				ie_origem_proc_conta_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin

				select	max(cd_area_procedimento),
					max(cd_especialidade),
					max(cd_grupo_proc)
				into STRICT	cd_area_proc_conta_w,
					cd_espec_proc_conta_w,
					cd_grupo_proc_conta_w
				from	estrutura_procedimento_v
				where	cd_procedimento = cd_proc_conta_w
				and	ie_origem_proced = ie_origem_proc_conta_w;

				open C04;
				loop
				fetch C04 into
					ie_somente_primeiro_w;
				EXIT WHEN NOT FOUND; /* apply on C04 */
					begin

					if (cd_estabelecimento_p <> coalesce(cd_estab_conta_w,0)) and (coalesce(ie_somente_primeiro_w,'S') = 'N') then
						ie_duplicar_w	:= 'S';
					else
						ie_duplicar_w	:= 'N';
					end if;

					end;
				end loop;
				close C04;

				end;
			end loop;
			close C02;

			end;
		end loop;
		close C01;

	end if;
end if;

if	(((ie_pacote_w = 'S') and (coalesce(nr_seq_proc_orig_w::text, '') = '') or (ie_duplicar_w = 'S')) and (coalesce(nr_seq_proc_orig_p,0) = 0)) then

	nr_sequencia_w := Duplicar_Proc_Paciente(nr_sequencia_p, nm_usuario_p, nr_sequencia_w);

	SELECT * FROM obter_conta_paciente(cd_estabelecimento_p, nr_atendimento_w, cd_convenio_p, cd_categoria_p, nm_usuario_p, dt_procedimento_w, dt_entrada_w, dt_alta_w, nr_doc_convenio_w, cd_setor_atendimento_w, 0, dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w) INTO STRICT dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w;

	update	procedimento_paciente
	set	ie_valor_informado = 'S',
		vl_medico	   = 0,
		vl_anestesista	   = 0,
		vl_auxiliares      = 0,
		vl_custo_operacional = 0,
		vl_materiais	     = 0,
		vl_procedimento	     = 0,
		nr_interno_conta     = nr_interno_conta_w,
		nr_seq_proc_orig    = nr_sequencia_p,
		nr_prescricao	 = NULL,
		nr_sequencia_prescricao  = NULL
	where	nr_sequencia	= nr_sequencia_w;

	update	procedimento_paciente
	set 	nr_seq_proc_orig = nr_sequencia_p
	where 	nr_sequencia = nr_sequencia_p;

end if;

if	((coalesce(nr_seq_proc_orig_p,0) > 0) and (coalesce(nr_seq_proc_orig_p,0) <> coalesce(nr_sequencia_p,0))) then

	select	count(*)
	into STRICT	qt_partic_w
	from	procedimento_participante
	where	nr_sequencia = nr_sequencia_p;

	if (coalesce(qt_partic_w,0) > 0) then

		open C03;
		loop
		fetch C03 into
			nr_seq_partic_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin

			select	count(*)
			into STRICT	qt_partic_atual_w
			from	procedimento_participante
			where	nr_seq_partic = nr_seq_partic_w
			and	nr_sequencia = nr_seq_proc_orig_p;

			if (coalesce(qt_partic_atual_w,0) = 0) then

				insert into procedimento_participante(
					nr_sequencia, nr_seq_partic, ie_funcao, dt_atualizacao, nm_usuario, cd_pessoa_fisica, cd_cgc, ie_valor_informado, ie_emite_conta,
					vl_participante, vl_conta, nr_lote_contabil, nr_conta_medico, ie_tipo_servico_sus, ie_tipo_ato_sus, qt_ponto_sus, vl_ponto_sus, vl_original,
					ie_responsavel_credito, pr_procedimento, cd_especialidade, pr_faturar, cd_medico_convenio, nr_doc_honor_conv, nr_seq_proc_crit_repasse,
					ie_tiss_tipo_guia, nr_cirurgia, cd_cbo, ie_doc_executor, ie_participou_sus, cd_medico_exec_tiss, cd_cgc_prestador_tiss, ds_proc_tiss,
					ds_prestador_tiss, cd_prestador_tiss, cd_proc_conv, ds_proc_conv, cd_cgc_prest_solic_tiss, vl_repasse_calc, cd_medico_honor_tiss,
					cd_regra_repasse, cd_cgc_prest_honor_tiss, cd_medico_exec_conta
				)
				(SELECT	nr_seq_proc_orig_p, nr_seq_partic, ie_funcao, clock_timestamp(), nm_usuario_p, cd_pessoa_fisica, cd_cgc, ie_valor_informado, ie_emite_conta,
					vl_participante, vl_conta, nr_lote_contabil, nr_conta_medico, ie_tipo_servico_sus, ie_tipo_ato_sus, qt_ponto_sus, vl_ponto_sus, vl_original,
					ie_responsavel_credito, pr_procedimento, cd_especialidade, pr_faturar, cd_medico_convenio, nr_doc_honor_conv, nr_seq_proc_crit_repasse,
					ie_tiss_tipo_guia, nr_cirurgia, cd_cbo, ie_doc_executor, ie_participou_sus, cd_medico_exec_tiss, cd_cgc_prestador_tiss, ds_proc_tiss,
					ds_prestador_tiss, cd_prestador_tiss, cd_proc_conv, ds_proc_conv, cd_cgc_prest_solic_tiss, vl_repasse_calc, cd_medico_honor_tiss,
					cd_regra_repasse, cd_cgc_prest_honor_tiss, cd_medico_exec_conta
				from	procedimento_participante
				where	nr_sequencia = nr_sequencia_p
				and	nr_seq_partic = nr_seq_partic_w);

			end if;

			end;
		end loop;
		close C03;

	end if;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proc_zerado_estab_orig ( nr_sequencia_p bigint, nr_seq_proc_orig_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

