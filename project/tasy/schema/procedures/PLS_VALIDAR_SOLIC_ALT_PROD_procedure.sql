-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_validar_solic_alt_prod ( nr_seq_solicitacao_p pls_segurado_solic_alt.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ds_mensagem_carencia_p INOUT text, ds_mensagem_abrangencia_p INOUT text, ds_mensagem_data_p INOUT text) AS $body$
DECLARE


nr_seq_produto_novo_w		pls_segurado_solic_alt.nr_seq_alt_plano%type;
nr_seq_produto_atual_w		pls_segurado.nr_seq_plano%type;
ie_abran_plano_atual_w		pls_plano.ie_abrangencia%type;
ie_abran_plano_novo_w		pls_plano.ie_abrangencia%type;
ds_mensagem_abrangencia_w	varchar(255)	:= null;
ds_mensagem_carencia_w		varchar(255)	:= null;
ds_mensagem_data_w		varchar(255)	:= null;
ie_existe_cat_atual_w		varchar(1);
ie_existe_cat_novo_w		varchar(1);
ie_existe_aco_atual_w		varchar(1);
ie_existe_aco_novo_w		varchar(1);
ie_entra_regra_w		varchar(1) := 'N';
ie_mudanca_carencia_w		varchar(1);
ie_nova_abrangencia_w		varchar(1) := 'N';
ie_nova_carencia_w		varchar(1) := 'N';
ds_observacao_carencia_w	varchar(4000)	:=	null;
ds_observacao_abrangencia_w	varchar(100)	:=	null;
ie_dia_alt_prod_w		pls_param_estipulante_tws.ie_dia_alt_prod%type;
dt_alteracao_w			pls_segurado_solic_alt.dt_alteracao%type;
dt_alteracao_ww			pls_segurado_solic_alt.dt_alteracao%type;

--Verifica se as regras de alteracao do produto se enquadram na solicitacao de alteracao 
c01 CURSOR FOR
	SELECT	ie_inf_abrangencia,
		ie_inf_carencia,
		nr_seq_categoria_ant nr_seq_categoria_atual,
		nr_seq_categoria_atual nr_seq_categoria_novo,
		nr_seq_tipo_acomod_ant nr_seq_tipo_acomod_atual,
		nr_seq_tipo_acomod_atual nr_seq_tipo_acomod_novo,
		nr_seq_produto_ant nr_seq_produto_ant_regra,
		nr_seq_produto_atual nr_seq_produto_atual_regra
	from	pls_regra_carencia_web
	where	cd_estabelecimento	= cd_estabelecimento_p;

BEGIN

select	a.nr_seq_alt_plano,
	b.nr_seq_plano,
	a.dt_alteracao
into STRICT	nr_seq_produto_novo_w,
	nr_seq_produto_atual_w,
	dt_alteracao_w
from	pls_segurado_solic_alt	a,
	pls_segurado		b
where	b.nr_sequencia	= a.nr_seq_segurado
and	a.nr_sequencia	= nr_seq_solicitacao_p;

select	max(ie_dia_alt_prod)
into STRICT	ie_dia_alt_prod_w
from	pls_param_estipulante_tws
where	cd_estabelecimento	= cd_estabelecimento_p;

if (nr_seq_produto_atual_w <> nr_seq_produto_novo_w) then
	for c01_w in C01 loop
		begin
		ie_existe_cat_atual_w	:= 'N';
		ie_existe_cat_novo_w	:= 'N';
		ie_existe_aco_atual_w	:= 'N';
		ie_existe_aco_novo_w	:= 'N';
		ie_entra_regra_w	:= 'S';
		
		if ((c01_w.ie_inf_abrangencia IS NOT NULL AND c01_w.ie_inf_abrangencia::text <> '') or (c01_w.ie_inf_carencia IS NOT NULL AND c01_w.ie_inf_carencia::text <> '')) then
			
			--verifica se a regra se encaixa com produto anterior
			if ((c01_w.nr_seq_produto_ant_regra IS NOT NULL AND c01_w.nr_seq_produto_ant_regra::text <> '') and ie_entra_regra_w = 'S') then
				if (c01_w.nr_seq_produto_ant_regra = nr_seq_produto_atual_w )then
					ie_entra_regra_w := 'S';
				else
					ie_entra_regra_w := 'N';
				end if;
			end if;
			
			--verifica se a regra se encaixa com produto atual
			if ((c01_w.nr_seq_produto_atual_regra IS NOT NULL AND c01_w.nr_seq_produto_atual_regra::text <> '') and ie_entra_regra_w = 'S') then
				if (c01_w.nr_seq_produto_atual_regra = nr_seq_produto_novo_w )then
					ie_entra_regra_w := 'S';
				else
					ie_entra_regra_w := 'N';
				end if;
			end if;
			
			-- verifica se existe alguma categoria do produto anterior que se encaixa na regra
			if ((c01_w.nr_seq_categoria_atual IS NOT NULL AND c01_w.nr_seq_categoria_atual::text <> '') and ie_entra_regra_w = 'S') then
				select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END  ie_existe_categoria
				into STRICT	ie_existe_cat_atual_w
				from	pls_plano_acomodacao
				where	nr_seq_plano = nr_seq_produto_atual_w
				and	nr_seq_categoria = c01_w.nr_seq_categoria_atual;
				
				if (ie_existe_cat_atual_w = 'S')then
					ie_entra_regra_w := 'S';
				else
					ie_entra_regra_w := 'N';
				end if;
			end if;
			
			-- verifica se existe alguma categoria do produto anterior que se encaixa na regra
			if ((c01_w.nr_seq_categoria_novo IS NOT NULL AND c01_w.nr_seq_categoria_novo::text <> '') and ie_entra_regra_w = 'S') then
				select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END  ie_existe_categoria
				into STRICT	ie_existe_cat_novo_w
				from	pls_plano_acomodacao
				where	nr_seq_plano = nr_seq_produto_novo_w
				and	nr_seq_categoria = c01_w.nr_seq_categoria_novo;
				
				if (ie_existe_cat_novo_w = 'S')then
					ie_entra_regra_w := 'S';
				else
					ie_entra_regra_w := 'N';
				end if;
			end if;
			
			--verificar se existe alguma acomodacao anterior que se enquadra na regra
			if ((c01_w.nr_seq_tipo_acomod_atual IS NOT NULL AND c01_w.nr_seq_tipo_acomod_atual::text <> '') and ie_entra_regra_w = 'S') then
				select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END  ie_existe_acomodacao
				into STRICT	ie_existe_aco_atual_w
				from	pls_plano_acomodacao
				where	nr_seq_plano = nr_seq_produto_atual_w
				and	nr_seq_tipo_acomodacao = c01_w.nr_seq_tipo_acomod_atual;
				
				if (ie_existe_aco_atual_w = 'S') then
					ie_entra_regra_w := 'S';
				else
					ie_entra_regra_w := 'N';
				end if;
			end if;
			
			--verificar se existe alguma acomodacao atual que se enquadra na regra
			if ((c01_w.nr_seq_tipo_acomod_novo IS NOT NULL AND c01_w.nr_seq_tipo_acomod_novo::text <> '') and ie_entra_regra_w = 'S') then
				select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END  ie_existe_acomodacao
				into STRICT	ie_existe_aco_novo_w
				from	pls_plano_acomodacao
				where	nr_seq_plano = nr_seq_produto_novo_w
				and	nr_seq_tipo_acomodacao = c01_w.nr_seq_tipo_acomod_novo;
				
				if (ie_existe_aco_novo_w = 'S')then
					ie_entra_regra_w := 'S';
				else
					ie_entra_regra_w := 'N';
				end if;
			end if;
			
			--Caso a alteracao se enquadre na regra
			if (ie_entra_regra_w = 'S') then
				if (c01_w.ie_inf_abrangencia = 'S') then --verifica se ocorreu mudanca de abrangencia
					select	ie_abrangencia
					into STRICT	ie_abran_plano_atual_w
					from	pls_plano
					where	nr_sequencia = nr_seq_produto_atual_w;
					
					select	ie_abrangencia
					into STRICT	ie_abran_plano_novo_w
					from	pls_plano
					where	nr_sequencia = nr_seq_produto_novo_w;
					
					if (ie_abran_plano_atual_w <> ie_abran_plano_novo_w) then
						ds_mensagem_abrangencia_w := wheb_mensagem_pck.get_texto(460146, null); --Alteracao deste produto resultara na mudanca de abrangencia do plano.
						ds_observacao_abrangencia_w := wheb_mensagem_pck.get_texto(495118,'DS_ABRANG_P='||obter_valor_dominio(1667,ie_abran_plano_atual_w)||';DS_ABRANG_NOVO_P='||obter_valor_dominio(1667,ie_abran_plano_novo_w))||chr(13);
						ie_nova_abrangencia_w := 'S';
					end if;
				end if;
				
				if (c01_w.ie_inf_carencia = 'S') then --verifica se ocorreu mudanca de carencia
					ie_mudanca_carencia_w := pls_mudanca_carencia(nr_seq_produto_atual_w,nr_seq_produto_novo_w,'MC');
					if (ie_mudanca_carencia_w='S') then
						ds_mensagem_carencia_w := wheb_mensagem_pck.get_texto(460148, null); --Alteracao deste produto resultara na mudanca de carencia do plano.
						ds_observacao_carencia_w := pls_mudanca_carencia(nr_seq_produto_atual_w,nr_seq_produto_novo_w,'MD');
						ie_nova_carencia_w := 'S';
					end if;
				end if;
			end if;
		end if;
		
		end;
	end loop; --C01
end if;


if (ie_dia_alt_prod_w IS NOT NULL AND ie_dia_alt_prod_w::text <> '') then
	if (substr(ie_dia_alt_prod_w,1,2) = '99') then
		dt_alteracao_ww	:= last_day(dt_alteracao_w);
	else
		dt_alteracao_ww	:= trunc(dt_alteracao_w,'month') + ((substr(ie_dia_alt_prod_w,1,2))::numeric  - 1);
	end if;
	
	if (dt_alteracao_ww <= dt_alteracao_w) then
		dt_alteracao_ww	:= add_months(dt_alteracao_ww,1);
	end if;
	
	if (substr(ie_dia_alt_prod_w,3,1) = 'U') then
		dt_alteracao_ww	:= obter_dia_util_anterior(cd_estabelecimento_p,dt_alteracao_ww);
	end if;
	
	ds_mensagem_data_w	:= wheb_mensagem_pck.get_texto(1145638,'DT_ALTERACAO='||to_char(dt_alteracao_ww,'dd/mm/yyyy')); --Alteracao de produto registrata para #@DT_ALTERACAO#@, de acordo com regra da operadora.
else
	dt_alteracao_ww		:= null;
	ds_mensagem_data_w	:= null;
end if;

ds_observacao_carencia_w	:= ds_observacao_carencia_w||ds_observacao_abrangencia_w;
update	pls_segurado_solic_alt
set	ie_nova_abrangencia	= ie_nova_abrangencia_w,
	ie_nova_carencia	= ie_nova_carencia_w,
	ds_observacao_carencia	= ds_observacao_carencia_w,
	dt_alteracao		= coalesce(dt_alteracao_ww,dt_alteracao)
where	nr_sequencia		= nr_seq_solicitacao_p;

ds_mensagem_carencia_p		:= ds_mensagem_carencia_w;
ds_mensagem_abrangencia_p	:= ds_mensagem_abrangencia_w;
ds_mensagem_data_p		:= ds_mensagem_data_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_validar_solic_alt_prod ( nr_seq_solicitacao_p pls_segurado_solic_alt.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ds_mensagem_carencia_p INOUT text, ds_mensagem_abrangencia_p INOUT text, ds_mensagem_data_p INOUT text) FROM PUBLIC;

