-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hem_liberar_laudo ( nr_seq_proc_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_insuflacao_ini_w		timestamp;
dt_entrada_w			timestamp;
dt_digitacao_w			timestamp;
qt_d2b_w			hem_proc.qt_d2b%type;
ie_primaria_w		hem_proc.ie_primaria%type;
nr_seq_evento_w		bigint;
qt_idade_w			bigint;
cd_pessoa_fisica_w	varchar(10);
nr_atendimento_w	bigint;
cd_estabelecimento_w	bigint;
ie_possui_w			varchar(1);

C01 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_evento_disp		= 'LDIS'
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(ie_situacao,'A') = 'A';

    -- Faz a verificaçao da necessidade de envio de PDF para integração de HL7, se positivo, faz o envio
    procedure verificaEnviaPDF_HL7  is
    nr_atendimento_pw       atendimento_paciente.nr_atendimento%type;
    cd_pessoa_fisica_pw     pessoa_fisica.cd_pessoa_fisica%type;
    nr_sequencia_pw         hem_proc.nr_sequencia%type;
    ds_sep_bv_w             varchar(100):= obter_separador_bv;

BEGIN

    select  coalesce(max(d.nr_atendimento),0),
            coalesce(max(d.cd_pessoa_fisica),0),
            coalesce(max(d.nr_sequencia),0)
    into STRICT    nr_atendimento_pw,
            cd_pessoa_fisica_pw,
            nr_sequencia_pw
    FROM    prescr_procedimento a,
            prescr_medica b,
            cirurgia c,
            hem_proc d,
            hem_procedimento e,
            hem_proc_interno f,
            laudo_paciente_pdf_serial g
    WHERE   a.nr_prescricao = b.nr_prescricao
    AND		b.nr_prescricao = c.nr_prescricao
    AND		d.nr_seq_cirurgia = c.nr_cirurgia
    AND		e.nr_sequencia = d.nr_seq_procedimento
    AND		e.nr_sequencia = f.nr_seq_proc
    AND		f.nr_seq_proc_interno = a.nr_seq_proc_interno
    AND		g.nr_acesso_dicom = a.nr_acesso_dicom
    AND		d.nr_sequencia = nr_seq_proc_p
    and     Obter_Se_Integr_Proc_Interno(a.nr_seq_proc_interno, 17,null,a.ie_lado,coalesce(b.cd_estabelecimento,wheb_usuario_pck.get_cd_estabelecimento)) = 'S';

    if  nr_sequencia_pw > 0 then
        CALL gravar_agend_integracao(739, 'nr_atendimento='      || nr_atendimento_pw    || ds_sep_bv_w ||
                                     'cd_pessoa_fisica='    || cd_pessoa_fisica_pw  || ds_sep_bv_w ||
                                     'nr_sequencia='        || nr_sequencia_pw      || ds_sep_bv_w,
                                     Obter_Setor_Atendimento(nr_atendimento_pw));
    end if;

    end;


begin
if (coalesce(nr_seq_proc_p,0) > 0) then

	select	coalesce(max('S'),'N')
	into STRICT	ie_possui_w
	from	hem_proc
	where	nr_sequencia = nr_seq_proc_p
	and	coalesce(ds_laudo::text, '') = ''
	and	coalesce(dt_liberacao::text, '') = '';

	if (ie_possui_w = 'S') then
		CALL hem_gerar_laudos_html(nr_seq_proc_p, nm_usuario_p);
	end if;

	select	max(dt_digitacao)
	into STRICT	dt_digitacao_w
	from	hem_proc
	where	nr_sequencia	= nr_seq_proc_p;

	if (coalesce(dt_digitacao_w::text, '') = '') then
		CALL hem_concluir_laudo(nr_seq_proc_p, nm_usuario_p);
	end if;

	update	hem_proc
	set	dt_liberacao	= clock_timestamp(),
		nm_usuario_lib	= nm_usuario_p
	where	nr_sequencia	= nr_seq_proc_p;

    -- Faz a verificaçao da necessidade de envio de PDF para integração de HL7, com base no nr_seq_proc_interno, se positivo, faz o envio
    verificaEnviaPDF_HL7();

	-- Verifica se a angioplastia é primária
	select	coalesce(ie_primaria,'N'),
		cd_pessoa_fisica,
		nr_atendimento
	into STRICT	ie_primaria_w,
		cd_pessoa_fisica_w,
		nr_atendimento_w
	from	hem_proc
	where	nr_sequencia = nr_seq_proc_p;

	cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;
	qt_idade_w		:= coalesce(obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A'),0);

	open C01;
	loop
	fetch C01 into
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_w,cd_pessoa_fisica_w,null,wheb_usuario_pck.get_nm_usuario,null,null,null,null,null,null,null,null,null,null,'S');
		end;
	end loop;
	close C01;

	if (ie_primaria_w = 'S') then
		-- Se for primária, gera o D2B
		select	min(g.dt_insuflacao_ini)
		into STRICT	dt_insuflacao_ini_w
		from (
			SELECT	min(f.dt_insuflacao_ini) dt_insuflacao_ini
			FROM hem_atc_balao f, hem_coronariografia a
LEFT OUTER JOIN hem_cat_lesao b ON (a.nr_sequencia = b.nr_seq_cornon)
LEFT OUTER JOIN hem_atc e ON (a.nr_sequencia = e.nr_seq_coron)
LEFT OUTER JOIN hem_atc_stent d ON (e.nr_sequencia = d.nr_seq_atc)
WHERE a.nr_seq_proc	= nr_seq_proc_p and f.nr_seq_stent	= d.nr_sequencia
union

			SELECT	min(f.dt_insuflacao_ini)
			FROM hem_atc_balao f, hem_coronariografia a
LEFT OUTER JOIN hem_cat_lesao b ON (a.nr_sequencia = b.nr_seq_cornon)
LEFT OUTER JOIN hem_atc e ON (a.nr_sequencia = e.nr_seq_coron)
WHERE a.nr_seq_proc	= nr_seq_proc_p and f.nr_seq_atc	= e.nr_sequencia  ) g;

		-- Verifica se a data de entrada e de início de insuflação não são nulas
		select	max(a.dt_entrada)
		into STRICT	dt_entrada_w
		from	atendimento_paciente a,
			hem_proc b
		where	a.nr_atendimento	= b.nr_atendimento
		and	b.nr_sequencia		= nr_seq_proc_p;

		if	(dt_entrada_w IS NOT NULL AND dt_entrada_w::text <> '' AND dt_insuflacao_ini_w IS NOT NULL AND dt_insuflacao_ini_w::text <> '') then
			-- obtem a diferença em minutos entre a data de entrada do paciente e a data de início de insuflação do balão (Door-to-balloon Time)
			select	(substr(obter_dif_data(dt_entrada_w, dt_insuflacao_ini_w, 'TM'),1,15))::numeric
			into STRICT	qt_d2b_w
			;

			if (coalesce(qt_d2b_w,0) > 0) then
				-- Atualiza no HEM_PROC.QT_D2B
				update	hem_proc
				set	qt_d2b		= qt_d2b_w,
					dt_atualizacao	= clock_timestamp(),
					dt_liberacao	= clock_timestamp(),
					nm_usuario_lib	= nm_usuario_p
				where	nr_sequencia	= nr_seq_proc_p;

			end if;
		end if;
	end if;
end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hem_liberar_laudo ( nr_seq_proc_p bigint, nm_usuario_p text) FROM PUBLIC;

