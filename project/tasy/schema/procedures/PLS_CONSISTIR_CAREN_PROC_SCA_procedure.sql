-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_caren_proc_sca ( nr_seq_segurado_p bigint, nr_seq_guia_proc_p bigint, nr_seq_conta_proc_p bigint, nr_seq_requisicao_proc_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_solicitacao_p timestamp, nr_seq_tipo_acomod_p bigint, ie_tipo_guia_p text, dt_carencia_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_plano_w			bigint;
nr_seq_contrato_w			bigint;
nr_seq_segurado_w		bigint;
cd_area_w			bigint;
cd_especialidade_w		bigint;
cd_grupo_w			bigint;
ie_origem_proced_w		bigint;
qt_dias_w			integer;
dt_inicio_vigencia_w		timestamp;
dt_carencia_w			timestamp;
dt_inclusao_operadora_w		timestamp;
ie_origem_w			varchar(1);
nr_seq_carencia_proc_w		bigint;
ie_liberado_w			varchar(10);
ie_tipo_guia_solic_w		varchar(10);
nr_seq_tipo_acomod_w		bigint;
ie_tipo_guia_w			varchar(10);
nr_seq_tipo_acomodacao_w		bigint;
nr_seq_carencia_w			bigint;
nr_seq_prestador_w		bigint;
nr_seq_guia_w			bigint;
ie_tipo_consistencia_w		varchar(1);
nr_seq_conta_w			bigint;
nr_seq_tipo_carencia_w		bigint;
qt_contrato_sca_w		bigint;
qt_segurado_sca_w		bigint;
qt_plano_sca_w			bigint;
nr_seq_carencia_proc_ww		bigint;
ie_tipo_item_w			varchar(1);
ie_coberto_carencia_w		varchar(1);
ie_lanca_glosa_w		varchar(1) := 'S';
nr_seq_tabela_w			bigint;
ie_dependente_w			varchar(2);
ie_grau_dependencia_w		varchar(2);
ie_grau_dependencia_ww		varchar(2);
nr_seq_titular_w		bigint;
ie_data_contrato_w		varchar(1);
ie_data_segurado_w		varchar(1);
ie_data_plano_w			varchar(1);
nr_seq_vinculo_plano_sca_w	bigint;
ie_titularidade_w		varchar(1);
nr_seq_prestador_exec_w		bigint;
cd_municipio_ibge_guia_w	varchar(6);
cd_municipio_ibge_conta_w	varchar(6);
sg_estado_guia_w		pls_prestador_area.sg_estado%type;
sg_estado_conta_w		pls_prestador_area.sg_estado%type;
cd_municipio_ibge_sca_w		varchar(6);
ie_verificar_atuacao_conta_w	varchar(1) := 'S';
ie_verificar_atuacao_guia_w	varchar(1) := 'S';
nr_seq_plano_adic_w		bigint;
ie_area_coberta_w		varchar(1);
nr_seq_requisicao_w		bigint;

C00 CURSOR FOR
	SELECT	c.nr_sequencia,
		'S',
		a.nr_seq_tabela,
		a.nr_sequencia,
		null ie_grau_dependencia,
		a.ie_dependente,
		b.nr_sequencia
	from	pls_sca_vinculo a,
		pls_plano b,
		pls_carencia c,
		pls_segurado	d
	where	a.nr_seq_segurado	= d.nr_sequencia
	and	a.nr_seq_plano		= b.nr_sequencia
	and	b.nr_sequencia		= c.nr_seq_plano
	and	((d.nr_sequencia	= nr_seq_segurado_p) or (a.ie_dependente	= 'S' and d.nr_sequencia	= nr_seq_titular_w))
	and	trunc(clock_timestamp(),'dd') between trunc(coalesce(a.dt_inicio_vigencia,clock_timestamp()),'dd') and fim_dia(a.dt_fim_vigencia)
	and	b.ie_situacao		= 'A'
	and	not exists (	SELECT	1
				from	pls_carencia	x
				where	x.nr_seq_segurado		= d.nr_sequencia
				and	x.nr_seq_tipo_carencia		= a.nr_sequencia
				and	x.ie_origem_carencia_benef	= 'S')
	
union

	select	c.nr_sequencia,
		'S',
		a.nr_seq_tabela,
		a.nr_sequencia,
		null ie_grau_dependencia,
		a.ie_dependente,
		b.nr_sequencia
	from	pls_sca_vinculo		a,
		pls_plano		b,
		pls_carencia		c
	where	a.nr_seq_plano		= b.nr_sequencia
	and	b.nr_sequencia		= c.nr_seq_plano
	and	c.ie_origem_carencia_benef = 'S'
	and	a.nr_seq_segurado	= nr_seq_segurado_p
	and	trunc(clock_timestamp(),'dd') between trunc(coalesce(a.dt_inicio_vigencia,clock_timestamp()),'dd') and fim_dia(a.dt_fim_vigencia)
	and	b.ie_situacao		= 'A'
	and     exists (	select	1
				from	pls_carencia    x
				where	x.nr_seq_plano   = b.nr_sequencia
				and	x.nr_seq_tipo_carencia  = c.nr_seq_tipo_carencia);

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_liberado,
		c.qt_dias,
		c.dt_inicio_vigencia,
		a.nr_seq_tipo_carencia
	from	pls_carencia_proc a,
		pls_carencia 	c
	where	c.nr_seq_tipo_carencia				= a.nr_seq_tipo_carencia
	and	coalesce(a.cd_procedimento,cd_procedimento_p)	= cd_procedimento_p
	and	coalesce(a.ie_origem_proced,ie_origem_proced_w) 	= ie_origem_proced_w
	and	coalesce(a.cd_grupo_proc,cd_grupo_w)			= cd_grupo_w
	and	coalesce(a.cd_especialidade, cd_especialidade_w)	= cd_especialidade_w
	and	coalesce(a.cd_area_procedimento, cd_area_w) 		= cd_area_w
	and	coalesce(a.nr_seq_tipo_acomodacao::text, '') = ''
	and	coalesce(a.ie_tipo_guia::text, '') = ''
	and	c.ie_cpt				= 'N'
	and	(((a.nr_seq_grupo_servico IS NOT NULL AND a.nr_seq_grupo_servico::text <> '') and pls_se_grupo_preco_servico_lib(a.nr_seq_grupo_servico,cd_procedimento_p,ie_origem_proced_p) = 'S') or (coalesce(a.nr_seq_grupo_servico::text, '') = ''))
	and	c.nr_sequencia	= nr_seq_carencia_proc_ww;

C02 CURSOR FOR
	SELECT	cd_municipio_ibge,
		sg_estado
	from	pls_prestador_area
	where	nr_seq_prestador	= nr_seq_prestador_w;

C03 CURSOR FOR
	SELECT	cd_municipio_ibge,
		sg_estado
	from	pls_prestador_area
	where	nr_seq_prestador	= nr_seq_prestador_exec_w;


BEGIN

--select	nr_seq_plano,
select	pls_obter_produto_benef(nr_sequencia,dt_solicitacao_p),
	nr_seq_contrato,
	dt_inclusao_operadora,
	CASE WHEN coalesce(nr_seq_titular,0)=0 THEN 'T'  ELSE 'D' END ,
	nr_seq_titular
into STRICT	nr_seq_plano_w,
	nr_seq_contrato_w,
	dt_inclusao_operadora_w,
	ie_titularidade_w,
	nr_seq_titular_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_p;

if (coalesce(nr_seq_guia_proc_p,0) > 0) then
	ie_tipo_consistencia_w	:= 'G';

	select 	max(nr_seq_guia)
	into STRICT	nr_seq_guia_w
	from	pls_guia_plano_proc
	where	nr_sequencia = nr_seq_guia_proc_p;

	select	max(nr_seq_plano)
	into STRICT	nr_seq_plano_w
	from	pls_guia_plano
	where	nr_sequencia = nr_seq_guia_w;
elsif (coalesce(nr_seq_conta_proc_p,0) > 0) then
	ie_tipo_consistencia_w	:= 'C';
elsif (coalesce(nr_seq_requisicao_proc_p,0) > 0) then
	ie_tipo_consistencia_w	:= 'R';

	select 	max(nr_seq_requisicao)
	into STRICT	nr_seq_requisicao_w
	from	pls_requisicao_proc
	where	nr_sequencia = nr_seq_requisicao_proc_p;

	select	max(nr_seq_plano)
	into STRICT	nr_seq_plano_w
	from	pls_requisicao
	where	nr_sequencia = nr_seq_requisicao_w;
end if;

select	count(*)
into STRICT	qt_contrato_sca_w
from	pls_sca_vinculo
where	nr_seq_contrato	= nr_seq_contrato_w;

select	count(*)
into STRICT	qt_plano_sca_w
from	pls_plano_servico_adic
where	nr_seq_plano = nr_seq_plano_w;

select	count(*)
into STRICT	qt_segurado_sca_w
from	pls_sca_vinculo
where	((nr_seq_segurado	= nr_seq_segurado_p) or (ie_dependente	= 'S' and nr_seq_segurado	= nr_seq_titular_w));

if	((qt_contrato_sca_w > 0) or
	((qt_segurado_sca_w > 0) or (qt_plano_sca_w > 0)))  then

	open C00;
	loop
	fetch C00 into
		nr_seq_carencia_proc_ww,
		ie_tipo_item_w,
		nr_seq_tabela_w,
		nr_seq_vinculo_plano_sca_w,
		ie_grau_dependencia_w,
		ie_dependente_w,
		nr_seq_plano_adic_w;
	EXIT WHEN NOT FOUND; /* apply on C00 */
		begin
		if (ie_tipo_consistencia_w in ('G','C','R')) then
			SELECT * FROM pls_obter_estrut_proc(cd_procedimento_p, ie_origem_proced_p, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w;

		end if;
		if (ie_tipo_consistencia_w in ('G','C','R')) then
			if (ie_tipo_consistencia_w = 'G') then
				select 	max(nr_seq_guia)
				into STRICT	nr_seq_guia_w
				from	pls_guia_plano_proc
				where	nr_sequencia = nr_seq_guia_proc_p;

				begin
				select	nr_seq_prestador
				into STRICT	nr_seq_prestador_w
				from	pls_guia_plano
				where	nr_sequencia = nr_seq_guia_w;

				exception
				when others then
					nr_seq_prestador_w := null;
				end;

				open C02;
				loop
				fetch C02 into
					cd_municipio_ibge_guia_w,
					sg_estado_guia_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
				end loop;
				close C02;

			elsif (ie_tipo_consistencia_w = 'C') then
				select	nr_seq_conta
				into STRICT	nr_seq_conta_w
				from	pls_conta_proc
				where	nr_sequencia = nr_seq_conta_proc_p;

				begin
				select	a.nr_seq_prestador
				into STRICT	nr_seq_prestador_w
				from	pls_protocolo_conta a,
					pls_conta b
				where	a.nr_sequencia = b.nr_seq_protocolo
				and	b.nr_sequencia = nr_seq_conta_w;
				exception
				when others then
					nr_seq_prestador_w := null;
				end;

				begin
				select	nr_seq_prestador_exec
				into STRICT	nr_seq_prestador_exec_w
				from	pls_conta
				where	nr_sequencia = nr_seq_conta_w;
				exception
					when others then
					nr_seq_prestador_exec_w :=  null;
				end;

				open C03;
				loop
				fetch C03 into
					cd_municipio_ibge_conta_w,
					sg_estado_conta_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
				end loop;
				close C03;

			elsif (ie_tipo_consistencia_w = 'R') then
				select 	max(nr_seq_requisicao)
				into STRICT	nr_seq_requisicao_w
				from	pls_requisicao_proc
				where	nr_sequencia = nr_seq_requisicao_proc_p;

				begin
				select	nr_seq_prestador
				into STRICT	nr_seq_prestador_w
				from	pls_requisicao
				where	nr_sequencia = nr_seq_requisicao_w;
				exception
				when others then
					nr_seq_prestador_w := null;
				end;

				open C02;
				loop
				fetch C02 into
					cd_municipio_ibge_guia_w,
					sg_estado_guia_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
				end loop;
				close C02;
			end if;

			if (ie_tipo_consistencia_w in ('G','R')) then
				ie_area_coberta_w := pls_consistir_area_atuacao(nr_seq_plano_adic_w, null, nr_seq_prestador_w, null, ie_area_coberta_w);
			elsif (ie_tipo_consistencia_w = 'C') then
				ie_area_coberta_w := pls_consistir_area_atuacao(nr_seq_plano_adic_w, null, nr_seq_prestador_exec_w, null, ie_area_coberta_w);
			end if;
		end if;

		open C01;
		loop
		fetch C01 into
			nr_seq_carencia_proc_w,
			ie_liberado_w,
			qt_dias_w,
			dt_inicio_vigencia_w,
			nr_seq_tipo_carencia_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			/* Se a carência já foi coberta por algum ítem, não deve mais lançar a glosa */

			if (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
					ie_origem_w	:= 'B';
			elsif (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
					ie_origem_w	:= 'C';
			else
					ie_origem_w	:= 'P';
			end if;

			if (ie_liberado_w	= 'S') then
				select (coalesce(dt_inicio_vigencia_w,dt_inclusao_operadora_w) + qt_dias_w)
				into STRICT	dt_carencia_w
				;

				if (coalesce(dt_solicitacao_p,clock_timestamp()) < dt_carencia_w) and (ie_lanca_glosa_w	= 'S')	then
					ie_lanca_glosa_w	:= 'S';
				else
					if (ie_tipo_consistencia_w = 'C') then
						update	pls_conta_proc
						set	ie_sca			= 'S' || ie_tipo_item_w,
							nr_seq_tabela_sca 	= nr_seq_tabela_w
						where	nr_sequencia		= nr_seq_conta_proc_p;
					end if;

					ie_lanca_glosa_w	:= 'N';
				end if;
			end if;

			if (ie_tipo_consistencia_w = 'G') and (ie_area_coberta_w = 'N') and (ie_lanca_glosa_w = 'N') then

				CALL pls_gravar_motivo_glosa('1215',null,nr_seq_guia_proc_p,null,'Prestador fora da área de atuação',nm_usuario_p, 'A','CG',nr_seq_prestador_w, null,null);
			elsif (ie_tipo_consistencia_w = 'C') and (ie_area_coberta_w = 'N') and (ie_lanca_glosa_w = 'N') then
				CALL PLS_GRAVAR_CONTA_GLOSA('1215',null, nr_seq_conta_proc_p,null,'N','Prestador fora da área de atuação',nm_usuario_p, 'A','CG',nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			elsif (ie_tipo_consistencia_w = 'R') and (ie_area_coberta_w = 'N') and (ie_lanca_glosa_w = 'N') then
				CALL pls_gravar_requisicao_glosa('1215', null, nr_seq_requisicao_proc_p,
					null, 'Prestador fora da área de atuação', nm_usuario_p,
					nr_seq_prestador_w, cd_estabelecimento_p, null,
					'');
			end if;

		end;
		end loop;
		close C01;
	end;
	end loop;
	close C00;
end if;

if (ie_lanca_glosa_w = 'S') then
	if (ie_tipo_consistencia_w = 'G') then
		CALL pls_gravar_motivo_glosa('1410',null,nr_seq_guia_proc_p,null,'SCA liberado a partir de '||to_char(dt_carencia_p,'dd/mm/yyyy'),
					nm_usuario_p,ie_origem_w,'CG',nr_seq_prestador_w,'(Regra ' || nr_seq_tipo_carencia_w || ' -> ' || nr_seq_carencia_proc_w,null);
	elsif (ie_tipo_consistencia_w = 'C') then
		CALL pls_gravar_conta_glosa('1410',null, nr_seq_conta_proc_p,
					null,'N','SCA', nm_usuario_p,'A','CC',nr_seq_prestador_w,cd_estabelecimento_p, '', null);
	elsif (ie_tipo_consistencia_w = 'R') then
		CALL pls_gravar_requisicao_glosa('1410',null,nr_seq_requisicao_proc_p,
					null,'SCA liberado a partir de '||to_char(dt_carencia_p,'dd/mm/yyyy'),nm_usuario_p,
					nr_seq_prestador_w, cd_estabelecimento_p, null,
					'');
	end if;
end if;
/*
commit;
*/
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_caren_proc_sca ( nr_seq_segurado_p bigint, nr_seq_guia_proc_p bigint, nr_seq_conta_proc_p bigint, nr_seq_requisicao_proc_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_solicitacao_p timestamp, nr_seq_tipo_acomod_p bigint, ie_tipo_guia_p text, dt_carencia_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

