-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE definir_atendimento_prescricao ( cd_setor_atendimento_p bigint, nr_prescricao_p bigint, nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_sequencia_w			bigint;	
nr_seq_proc_interno_w   bigint;
nr_seq_prot_glic_w		bigint;	
ie_proc_ivc_w			varchar(15);	
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;			
nr_seq_glic_w			bigint;
cd_estab_w			    bigint;
ie_altera_data_w		varchar(1);
ie_lanca_mat_med_w		varchar(1);
ie_lib_enfermagem_w		varchar(1);
ie_hemodialise_w        varchar(1);
dt_primeiro_horario_w   timestamp;
dt_prescricao_w         timestamp;
dt_inicio_prescr_w      timestamp;
ie_recalcular_val_w		varchar(1);
nr_horas_validade_w		integer;
ie_estender_w			varchar(5);
ie_possui_regra_disp_w	varchar(1);
ie_lib_horario_w		varchar(1);
dt_liberacao_w			timestamp;
cont_sp_prescr_proc_w	bigint;
cd_setor_atendimento_w	prescr_procedimento.cd_setor_atendimento%type;
cd_estabelecimento_w	prescr_medica.cd_estabelecimento%type;

C01 CURSOR FOR
SELECT	a.nr_sequencia,
		nr_seq_proc_interno,
		a.nr_seq_prot_glic,
		coalesce(OBTER_SE_PROC_IVC(a.nr_seq_proc_interno),'N'),
		cd_procedimento,
		ie_origem_proced,
		b.cd_setor_atendimento
FROM	prescr_procedimento a,
		prescr_medica b
WHERE	a.nr_prescricao	= b.nr_prescricao
AND		(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
AND		b.nr_prescricao	= nr_prescricao_p;
	

BEGIN
if (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then

	select	max(cd_estabelecimento)
	into STRICT	cd_estab_w
	from	atendimento_paciente
	where	nr_atendimento	= nr_atendimento_p;
	select	coalesce(max('S'),'N'),
		    max(ie_hemodialise),
			max(dt_inicio_prescr),
			max(dt_liberacao),
			max(cd_estabelecimento)
	into STRICT	ie_lib_enfermagem_w,
	        ie_hemodialise_w,
			dt_inicio_prescr_w,
			dt_liberacao_w,
			cd_estabelecimento_w
	from	prescr_medica
	where	nr_prescricao = nr_prescricao_p
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');


	ie_altera_data_w := obter_param_usuario(924, 1013, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_altera_data_w);
	ie_lanca_mat_med_w := obter_param_usuario(924, 1122, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_lanca_mat_med_w);
	ie_recalcular_val_w := obter_param_usuario(924, 722, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_recalcular_val_w);
	ie_estender_w := obter_param_usuario(924, 249, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_estender_w);


	if (ie_altera_data_w = 'S') then
		if (ie_hemodialise_w = 'P') then
		    dt_primeiro_horario_w	:= obter_prox_hora_cheia(clock_timestamp());
		else
		    dt_primeiro_horario_w	:= clock_timestamp();
		end if;	

		if (dt_primeiro_horario_w IS NOT NULL AND dt_primeiro_horario_w::text <> '') then
			dt_prescricao_w := to_date(to_char(clock_timestamp(),'dd/mm/yyyy') || ' ' || to_char(dt_primeiro_horario_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
		else
			dt_prescricao_w := clock_timestamp();
		end if;

		dt_inicio_prescr_w := to_date(to_char(clock_timestamp(),'dd/mm/yyyy') || ' ' || to_char(dt_primeiro_horario_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');

		if (to_char(dt_inicio_prescr_w,'ss') <> '00') then
			dt_inicio_prescr_w	:= trunc(dt_inicio_prescr_w,'mi') + 1/1440;
		end if;

    end if;

	if (ie_recalcular_val_w = 'S') then
		nr_horas_validade_w	:= obter_horas_validade_prescr(dt_primeiro_horario_w, nr_atendimento_p, ie_estender_w, 'A', dt_prescricao_w, nr_prescricao_p);		
	end if;

	update	prescr_medica
	set		nr_atendimento		 = nr_atendimento_p,
			cd_setor_atendimento = coalesce(cd_setor_atendimento, cd_setor_atendimento_p),
			nm_usuario		     = nm_usuario_p,
			dt_primeiro_horario  = coalesce(dt_primeiro_horario_w,dt_primeiro_horario),
			cd_estabelecimento	 = coalesce(cd_estab_w,cd_estabelecimento),
			dt_atualizacao		 = clock_timestamp(),
			dt_prescricao        = coalesce(dt_prescricao_w,dt_prescricao),
			dt_inicio_prescr     = coalesce(dt_inicio_prescr_w,dt_inicio_prescr),
			nr_horas_validade	 = coalesce(nr_horas_validade_w,nr_horas_validade)
	where	nr_prescricao		= nr_prescricao_p;

    update prescr_mat_hor
    set nr_atendimento = nr_atendimento_p
    where nr_prescricao = nr_prescricao_p;

	commit;

	CALL CPOE_Vincular_atend_prescr( nr_prescricao_p, nr_atendimento_p, nm_usuario_p );

	if (ie_altera_data_w = 'S')  then

		select 	max(dt_primeiro_horario)
		into STRICT	dt_primeiro_horario_w
		from	prescr_medica
		where	nr_prescricao	= nr_prescricao_p;

		CALL recalcular_vinc_prescr(nr_prescricao_p,nm_usuario_p, obter_perfil_ativo,cd_estab_w);
		CALL recalcular_hora_sol(nr_prescricao_p, dt_primeiro_horario_w, cd_estab_w, obter_perfil_ativo, nm_usuario_p);
		CALL Recalcular_hor_prescricao(nr_prescricao_p, nm_usuario_p);

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_possui_regra_disp_w
		from	regra_disp_lote_farm
		where	cd_estabelecimento = cd_estab_w;

		if (coalesce(dt_liberacao_w::text, '') = '') and (ie_possui_regra_disp_w = 'S') then
			ie_lib_horario_w := 'N';
		else
			ie_lib_horario_w := 'S';
		end if;

		CALL Gerar_prescr_mat_sem_dt_lib(nr_prescricao_p,null,obter_perfil_ativo, ie_lib_horario_w ,nm_usuario_p,null,null,0);
		CALL Gerar_prescr_proc_sem_dt_lib(nr_prescricao_p, NULL,obter_perfil_ativo, ie_lib_horario_w,nm_usuario_p);
	end if;

	if (coalesce(ie_lanca_mat_med_w,'N') = 'S') then
		CALL Executar_Material_Lib_Prescr(nr_prescricao_p, nm_usuario_p, null, ie_lib_enfermagem_w);
	end if;	

	OPEN C01;
	LOOP
	FETCH c01 INTO
		nr_sequencia_w,
		nr_seq_proc_interno_w,
		nr_seq_prot_glic_w,
		ie_proc_ivc_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_setor_atendimento_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		if (coalesce(cd_setor_atendimento_w,0) > 0) then

			update	prescr_procedimento
			set		cd_setor_atendimento = cd_setor_atendimento_w
			where nr_prescricao = nr_prescricao_p
			and nr_sequencia = nr_sequencia_w
			and coalesce(cd_setor_atendimento::text, '') = '';

			commit;
		end if;

		select	count(*)
		into STRICT	cont_sp_prescr_proc_w
		from	sp_prescr_proc
		where	nr_prescricao = nr_prescricao_p;

		if (cont_sp_prescr_proc_w = 0) then
			CALL Gerar_Sp_Prescr_Proc(nr_prescricao_p, null, nm_usuario_p);
		end if;	

		IF (nr_atendimento_p > 0) AND (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') AND
			((nr_seq_prot_glic_w IS NOT NULL AND nr_seq_prot_glic_w::text <> '') OR (SUBSTR(obter_ctrl_glic_proc(nr_seq_proc_interno_w),1,3) = 'CIG')) THEN			
			nr_seq_glic_w := gerar_atend_glicemia(nr_atendimento_p, nr_prescricao_p, nr_sequencia_w, nr_seq_prot_glic_w, nm_usuario_p, nr_seq_glic_w);
		END IF;

	END LOOP;
	CLOSE C01;	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE definir_atendimento_prescricao ( cd_setor_atendimento_p bigint, nr_prescricao_p bigint, nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

