-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE destinos AS (nr_seq_programa 	mprev_programa.nr_sequencia%type,
			nr_seq_campanha		mprev_campanha.nr_sequencia%type,
			nr_seq_turma		mprev_grupo_col_turma.nr_sequencia%type);


CREATE OR REPLACE PROCEDURE mprev_consistir_sel_captacao ( ds_list_nr_seq_capt_p text, ds_lista_programa_p text, ds_lista_campanha_p text, ds_lista_turma_p text, qt_inconsistencia_p INOUT bigint, qt_pendente_p INOUT bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Consistir e gravar sucesso/inconsistências dos programas, campanhas e grupos selecionados
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ X] Tasy (Delphi/Java) [ ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_lista_programa_w		varchar(2000);
ds_lista_campanha_w		varchar(2000);
ds_lista_turma_w		varchar(2000)	:= null;
nr_seq_capt_destino_w		bigint;
ie_status_w			mprev_captacao_sel_dest.ie_status%type;
nr_seq_programa_w		mprev_programa.nr_sequencia%type;
nr_seq_campanha_w		mprev_campanha.nr_sequencia%type;
nr_seq_turma_w			mprev_grupo_col_turma.nr_sequencia%type;
i				integer;
k				integer;
qt_inconsistencia_w		bigint	:= 0;
qt_programa_partic_w		smallint;
qt_campanha_partic_w		smallint;
qt_turma_partic_w		smallint;
qt_pessoas_turma_w		bigint;
qt_max_pessoas_turma_w		bigint;
nr_seq_grupo_coletivo_w		bigint	:= null;
qt_aprovacao_w			smallint;
nr_seq_captacao_sel_dest_w	mprev_captacao_sel_dest.nr_sequencia%type;
ds_lista_inconsistencia_w	varchar(2000) 	:= null;
ie_inconsistencia_w		varchar(255);
qt_pendente_w			bigint	:= 0;
nr_seq_partic_w                 mprev_participante.nr_sequencia%type;
type vetor_destinos is table of destinos index by integer;
vetor_destinos_w	vetor_destinos;

C01 CURSOR FOR
	SELECT	nr_sequencia,
                cd_pessoa_fisica
	FROM	mprev_captacao
	WHERE Obter_Se_Contido(nr_sequencia, ds_list_nr_seq_capt_p) = 'S';

BEGIN
/* Iniciar o índice do vetor */

i	:= 1;

/* Consistir programas adicionais*/

ds_lista_programa_w	:= ds_lista_programa_p;
while(ds_lista_programa_w IS NOT NULL AND ds_lista_programa_w::text <> '') loop
        nr_seq_programa_w	:= substr(ds_lista_programa_w,1,position(',' in ds_lista_programa_w) -1);

        vetor_destinos_w[i].nr_seq_programa := nr_seq_programa_w;
        vetor_destinos_w[i].nr_seq_campanha := null;
        vetor_destinos_w[i].nr_seq_turma    := null;	

        ds_lista_programa_w	:= substr(ds_lista_programa_w,position(',' in ds_lista_programa_w) + 1,length(ds_lista_programa_w));

        i	:= i + 1;	
end loop;

/* Consistir campanhas adicionais*/

        
ds_lista_campanha_w	:= ds_lista_campanha_p;
while(ds_lista_campanha_w IS NOT NULL AND ds_lista_campanha_w::text <> '') loop
        nr_seq_campanha_w	:= substr(ds_lista_campanha_w,1,position(',' in ds_lista_campanha_w) -1);

        vetor_destinos_w[i].nr_seq_programa := null;
        vetor_destinos_w[i].nr_seq_campanha := nr_seq_campanha_w;
        vetor_destinos_w[i].nr_seq_turma    := null;	

        ds_lista_campanha_w	:= substr(ds_lista_campanha_w,position(',' in ds_lista_campanha_w) + 1,length(ds_lista_campanha_w));

        i	:= i + 1;
end loop;

ds_lista_turma_w	:= ds_lista_turma_p;
while(ds_lista_turma_w IS NOT NULL AND ds_lista_turma_w::text <> '') loop
        nr_seq_turma_w	:= substr(ds_lista_turma_w,1,position(',' in ds_lista_turma_w) -1);

        vetor_destinos_w[i].nr_seq_programa := null;
        vetor_destinos_w[i].nr_seq_campanha := null;
        vetor_destinos_w[i].nr_seq_turma    := nr_seq_turma_w;	

        ds_lista_turma_w	:= substr(ds_lista_turma_w,position(',' in ds_lista_turma_w) + 1,length(ds_lista_turma_w));

        i	:= i + 1;
end loop;

/* No início devem ser limpas ambas as tabelas, para o seq da captação passado para zerar as inconsistências.*/

for r_C01 in C01 loop
	begin
        
	delete from mprev_captacao_sel_dest
        where	nr_seq_captacao = r_C01.nr_sequencia;

        select 	max(nr_sequencia)
	into STRICT	nr_seq_partic_w
	from 	mprev_participante
	where 	cd_pessoa_fisica = r_C01.cd_pessoa_fisica;

        i := vetor_destinos_w.count;
        for k in 1.. i loop
                begin

                nr_seq_programa_w	:= Vetor_destinos_w[k].nr_seq_programa;
                nr_seq_campanha_w	:= Vetor_destinos_w[k].nr_seq_campanha;
                nr_seq_turma_w		:= Vetor_destinos_w[k].nr_seq_turma;

                /* Gravar na tabela de destino com padrão Aceito */

                ie_status_w 			:= 	'A';
                ds_lista_inconsistencia_w	:= 	null;	

                        if (nr_seq_programa_w IS NOT NULL AND nr_seq_programa_w::text <> '') then
							/* Verifica se o programa está vigente */

							select	count(*)
							into STRICT	qt_programa_partic_w
							from	mprev_programa a
							where 	a.nr_sequencia = nr_seq_programa_w	
							and 	clock_timestamp() not between pkg_date_utils.start_of(a.dt_inicio_programa, 'DAY') and pkg_date_utils.end_of(coalesce(a.dt_exclusao,clock_timestamp()), 'DAY');
							
							if (qt_programa_partic_w > 0) then
								qt_inconsistencia_w 		:= qt_inconsistencia_w + 1;
								ie_status_w			:= 'N';
								ds_lista_inconsistencia_w	:= ds_lista_inconsistencia_w || '7';
							else
								/* Verifica se já esta ativo no programa*/

                                select	count(*)
                                into STRICT	qt_programa_partic_w
                                from	mprev_programa_partic x
                                where 	x.nr_seq_programa = nr_seq_programa_w	
                                and 	clock_timestamp() between x.dt_inclusao and coalesce(x.dt_exclusao,clock_timestamp())
                                and   	x.nr_seq_participante = nr_seq_partic_w;

                                if (qt_programa_partic_w > 0) then
                                        qt_inconsistencia_w 		:= qt_inconsistencia_w + 1;
                                        ie_status_w			:= 'N';
                                        ds_lista_inconsistencia_w	:= ds_lista_inconsistencia_w || '1';
                                end if;
							end if;
                        end if;
						
                        if (nr_seq_campanha_w IS NOT NULL AND nr_seq_campanha_w::text <> '') then
							/* Verifica se a campanha está vigente */

							select	count(*)
							into STRICT	qt_campanha_partic_w
							from	mprev_campanha a
							where 	a.nr_sequencia = nr_seq_campanha_w	
							and 	clock_timestamp() not between pkg_date_utils.start_of(a.dt_inicio, 'DAY') and pkg_date_utils.end_of(coalesce(a.dt_termino,clock_timestamp()), 'DAY');
							
							if (qt_campanha_partic_w > 0) then
								qt_inconsistencia_w 		:= qt_inconsistencia_w + 1;
								ie_status_w			:= 'N';
								ds_lista_inconsistencia_w	:= ds_lista_inconsistencia_w || '8';
							else
								/* Verifica se já esta ativo na campanha*/

                                select	count(*)
                                into STRICT	qt_campanha_partic_w
                                from	mprev_campanha_partic x
                                where 	x.nr_seq_campanha = nr_seq_campanha_w	
                                and 	clock_timestamp() between x.dt_inclusao and coalesce(x.dt_exclusao,clock_timestamp())
                                and   	x.nr_seq_participante = nr_seq_partic_w;

                                if (qt_campanha_partic_w > 0) then
                                        qt_inconsistencia_w := qt_inconsistencia_w + 1;
                                        ie_status_w	:= 'N';
                                        ds_lista_inconsistencia_w	:= ds_lista_inconsistencia_w || '2';
                                end if;
							end if;
                        end if;	
                        /* Verifica se já esta ativo na turma*/

                        if (nr_seq_turma_w IS NOT NULL AND nr_seq_turma_w::text <> '') then
                                select 	count(*)
                                into STRICT	qt_turma_partic_w
                                from 	mprev_grupo_turma_partic x
                                where 	x.nr_seq_turma  = nr_seq_turma_w
                                and  	clock_timestamp() between x.dt_entrada and coalesce(x.dt_saida,clock_timestamp())
                                and 	x.nr_seq_participante = nr_seq_partic_w;

                                /* Verifica a quantidade de pessoas que estão participando da turma*/

                                select	count(*)
                                into STRICT	qt_pessoas_turma_w
                                from	mprev_grupo_turma_partic
                                where	nr_seq_turma = nr_seq_turma_w
                                and	((coalesce(dt_saida::text, '') = '') or (dt_saida > clock_timestamp()));

                                /* Verifica a quantidade maxima de pessoas que podem participar de uma turma*/

                                select	qt_max_participante,	
                                        nr_seq_grupo_coletivo
                                into STRICT 	qt_max_pessoas_turma_w,
                                        nr_seq_grupo_coletivo_w
                                from	mprev_grupo_col_turma
                                where	nr_sequencia	= nr_seq_turma_w;

                                select 	count(*)
                                into STRICT	qt_aprovacao_w
                                from 	mprev_grupo_col_aprovacao
                                where	nr_seq_grupo = nr_seq_grupo_coletivo_w;

                                if (qt_turma_partic_w > 0) then
                                        qt_inconsistencia_w := qt_inconsistencia_w + 1;
                                        ie_status_w	:= 'N';
                                        ds_lista_inconsistencia_w	:= ds_lista_inconsistencia_w || '4';
                                end if;

                                if (qt_pessoas_turma_w >= qt_max_pessoas_turma_w) then
                                        qt_inconsistencia_w := qt_inconsistencia_w + 1;
                                        ie_status_w	:= 'N';
                                        ds_lista_inconsistencia_w	:= ds_lista_inconsistencia_w || '5';
                                end if;		

                                if (qt_aprovacao_w > 0) then
                                        --qt_inconsistencia_w := qt_inconsistencia_w + 1;
                                        ie_status_w	:= 'P';
                                        ds_lista_inconsistencia_w	:= ds_lista_inconsistencia_w || '6';
                                        qt_pendente_w	:= qt_pendente_w + 1;
                                end if;

                        end if;

                        select	nextval('mprev_captacao_sel_dest_seq')
                        into STRICT	nr_seq_captacao_sel_dest_w
;

                        insert into mprev_captacao_sel_dest(nr_sequencia,
                                dt_atualizacao,
                                nm_usuario,
                                dt_atualizacao_nrec,
                                nm_usuario_nrec,
                                nr_seq_captacao,
                                nr_seq_programa,
                                nr_seq_campanha,
                                nr_seq_turma,
                                ie_status,
                                dt_inclusao)
                        values (nr_seq_captacao_sel_dest_w,
                                clock_timestamp(),
                                nm_usuario_p,
                                clock_timestamp(),
                                nm_usuario_p,
                                r_C01.nr_sequencia,
                                Vetor_destinos_w[k].nr_seq_programa,
                                Vetor_destinos_w[k].nr_seq_campanha,
                                Vetor_destinos_w[k].nr_seq_turma,
                                ie_status_w,
                                clock_timestamp());

                        if (ie_status_w <> 'A') then
                                while(ds_lista_inconsistencia_w IS NOT NULL AND ds_lista_inconsistencia_w::text <> '') loop
                                        ie_inconsistencia_w	:= substr(ds_lista_inconsistencia_w,1,1);

                                        insert into mprev_captacao_sel_des_inc(nr_sequencia,
                                                dt_atualizacao,
                                                nm_usuario,
                                                dt_atualizacao_nrec,
                                                nm_usuario_nrec,
                                                nr_seq_captacao_sel_dest,
                                                ie_inconsistencia)
                                        values (nextval('mprev_captacao_sel_des_inc_seq'),
                                                clock_timestamp(),
                                                nm_usuario_p,
                                                clock_timestamp(),
                                                nm_usuario_p,
                                                nr_seq_captacao_sel_dest_w,
                                                ie_inconsistencia_w);

                                        ds_lista_inconsistencia_w	:= substr(ds_lista_inconsistencia_w,2,length(ds_lista_inconsistencia_w));
                                end loop;
                        end if;
                end;	
        end loop;

        qt_inconsistencia_p := qt_inconsistencia_w;
        qt_pendente_p	:= qt_pendente_w;

	end;

end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_consistir_sel_captacao ( ds_list_nr_seq_capt_p text, ds_lista_programa_p text, ds_lista_campanha_p text, ds_lista_turma_p text, qt_inconsistencia_p INOUT bigint, qt_pendente_p INOUT bigint, nm_usuario_p text) FROM PUBLIC;

