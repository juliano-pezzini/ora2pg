-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE rp_gerar_agendamentos ( nr_seq_modelo_p text, cd_pessoa_fisica_p text, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text, ie_job_p text default 'N') AS $body$
DECLARE


cd_agenda_w			bigint;
cd_medico_exec_w		varchar(10);
dt_horario_w			timestamp;
ie_dia_semana_w			smallint;
dt_atual_w			timestamp;
nr_sequencia_w			agenda_consulta.nr_sequencia%type;
nr_seq_agenda_w			agenda_consulta.nr_sequencia%type;
cd_perfil_w			integer;
nm_pessoa_fisica_w		varchar(100);
ds_agenda_w			varchar(100);
dt_nascimento_w			timestamp;
qt_idade_w			smallint;
ds_enter_w			varchar(20)	:= chr(10)||chr(13);
nr_seq_agend_item_w		bigint;
ie_classif_agenda_w		varchar(5);
nr_seq_pac_reab_w		bigint;
ie_status_agenda_w		varchar(2);
ds_motivo_status_w		varchar(255);
qt_agendado_w			bigint;
ie_feriado_w			varchar(1);
nr_seq_status_pac_w		bigint;
nr_seq_status_agendamento_w	bigint;
ie_status_agenda_prof_aus_w	varchar(3);
nr_seq_agendado_w		agenda_consulta.nr_sequencia%type;
cd_medico_agendado_w		varchar(10);

ds_motivo_licenca_w		varchar(255);
ds_motivo_licenca_prof_w 		varchar(255);
nr_seq_licenca_w			bigint;
cd_classificacao_w			varchar(05)	:= 'E';
nr_seq_hora_w			bigint    := 0;
ds_observacao_w			varchar(255);

ie_data_trat_w			varchar(1);
nr_seq_ausencia_prof_w		bigint;
cd_motivo_cancel_prof_aus_w	varchar(3);
cd_motivo_cancelamento_w		varchar(3) := '';
nr_seq_status_trat_w		bigint;
nr_seq_tratamento_w		bigint;
nr_seq_pac_reab_bloqueio_w		bigint;
nr_seq_status_reab_w		bigint;
ie_status_agenda_susp_w 		varchar(3);

cd_convenio_w			integer;
cd_categoria_w			varchar(10);
cd_plano_w			varchar(10);
cd_tipo_acomodacao_w		smallint;
dt_validade_w			timestamp;
cd_usuario_convenio_w		varchar(30);
nr_doc_convenio_w		varchar(20);
nr_seq_room_w			rp_pac_modelo_agendamento.nr_seq_room%type;

ie_atualiza_conv_atend_w		varchar(1);
ie_justificada_w			varchar(1);
ie_dia_semana_int_w		smallint;
ie_continua_w			varchar(1);
ie_count_dia_semana_w		smallint;
ie_nao_permite_iguais_w		 varchar(1);
ie_utiliza_regra_turno_w		varchar(1);
ie_manter_medico_exec_w		varchar(1);

ie_consistencia_w	varchar(255);
ie_agenda_w		varchar(1);

--verifica numero maximo de registro da reabilitacao
permite_adicionar_agenda_w		varchar(1);
cd_substituto_w			varchar(15);

C01 CURSOR FOR
	SELECT	a.cd_agenda,		
		coalesce(a.cd_medico_exec,b.cd_profissional_padrao),
		a.ie_dia_semana,
		a.dt_horario,
		a.nr_sequencia,
		ie_classif_agenda
	from	rp_pac_modelo_agend_item a,
		rp_item_modelo_agenda b
	where	a.nr_seq_item_modelo = b.nr_sequencia
	and	a.nr_seq_modelo_pac  = nr_seq_modelo_p
	and	coalesce(a.dt_fim_tratamento::text, '') = ''
	and	coalesce(b.ie_situacao,'A') = 'A'	
	order by cd_agenda;
	
C02 CURSOR FOR
	SELECT	nr_sequencia,
		substr(rp_obter_desc_mot_licenca(nr_seq_motivo_licenca),1,255),
		substr(ds_observacao,1,255),
		ie_justificada
	from	rp_licenca
	where	nr_seq_pac_reab = nr_seq_pac_reab_w
	and	dt_atual_w between dt_periodo_inicial and dt_periodo_final
	and	coalesce(cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	order by dt_periodo_inicial;
	

C03 CURSOR FOR
	SELECT 	 nr_sequencia,
		 substr(rp_obter_desc_mot_licenca(a.nr_seq_motivo_licenca),1,255),
		 cd_substituto
	from   	 rp_licenca_profissional a
	where  	 a.cd_pessoa_fisica = cd_medico_exec_w
	and	 dt_atual_w between dt_periodo_inicial and dt_periodo_final
	and	 (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '');

C04 CURSOR FOR
	SELECT 	nr_sequencia,
		nr_seq_status
	from   	rp_tratamento
	where	nr_seq_pac_reav = nr_seq_pac_reab_w
	and	coalesce(dt_fim_tratamento::text, '') = '';
	

BEGIN


ds_erro_p	:= 	'';
dt_atual_w	:=	trunc(dt_inicial_p,'dd');
ie_status_agenda_susp_w := null;
ie_atualiza_conv_atend_w := obter_param_usuario(866, 15, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_atualiza_conv_atend_w);
ie_nao_permite_iguais_w := Obter_Param_Usuario(9091, 48, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_nao_permite_iguais_w);	
ie_utiliza_regra_turno_w := Obter_Param_Usuario(9091, 69, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_utiliza_regra_turno_w);
ie_manter_medico_exec_w := Obter_Param_Usuario(9091, 79, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_manter_medico_exec_w);


if (ie_job_p = 'S') then
	select	max(nr_seq_pac_reab_bloqueio)
	into STRICT	nr_seq_pac_reab_bloqueio_w
	from	rp_parametros
	where	cd_estabelecimento = cd_estabelecimento_p;

	select	max(nr_seq_status)
	into STRICT	nr_seq_status_reab_w
	from	rp_paciente_reabilitacao
	where	cd_pessoa_fisica = cd_pessoa_fisica_p;

	if (nr_seq_pac_reab_bloqueio_w = nr_seq_status_reab_w) then
		select	max(ie_status_agenda_susp)
		into STRICT	ie_status_agenda_susp_w
		from	rp_parametros
		where	cd_estabelecimento = cd_estabelecimento_p;
end if;	
	
	
end if;

if (ie_atualiza_conv_atend_w = 'S') then
	SELECT * FROM define_convenio_atend_agenda(cd_pessoa_fisica_p, nm_usuario_p, cd_convenio_w, cd_categoria_w, dt_validade_w, cd_usuario_convenio_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w) INTO STRICT cd_convenio_w, cd_categoria_w, dt_validade_w, cd_usuario_convenio_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w;
end if;	

select	max(a.nr_seq_pac_reab),
	max(b.nr_seq_status),
	max(a.cd_convenio),
	max(a.cd_categoria),
	max(a.cd_plano),
	max(a.cd_tipo_acomodacao),
	max(a.nr_seq_room)
into STRICT	nr_seq_pac_reab_w,
	nr_seq_status_pac_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_plano_w,
	cd_tipo_acomodacao_w,
	nr_seq_room_w
from	rp_pac_modelo_agendamento a,
	rp_paciente_reabilitacao b
where	a.nr_seq_pac_reab = b.nr_sequencia
and	a.nr_sequencia = nr_seq_modelo_p;

select	max(nr_seq_pac_reab_agenda),
	max(ie_status_agenda_prof_aus),
	max(cd_motivo_cancelamento)
into STRICT	nr_seq_status_agendamento_w,
	ie_status_agenda_prof_aus_w,
	cd_motivo_cancel_prof_aus_w
from	rp_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

while(dt_atual_w <= dt_final_p) loop
	begin
		
	open C01;
	loop
	fetch C01 into	
		cd_agenda_w,
		cd_medico_exec_w,
		ie_dia_semana_int_w,
		dt_horario_w,
		nr_seq_agend_item_w,
		ie_classif_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		select RP_OBTER_DISP_AGENDA(cd_agenda_w,cd_pessoa_fisica_p)
		into STRICT permite_adicionar_agenda_w	
		;
		

		if (permite_adicionar_agenda_w = 'S') then
			
			ie_continua_w := 'S';
			ie_count_dia_semana_w := 1;
			while(ie_continua_w = 'S') loop
				begin
				ie_count_dia_semana_w := ie_count_dia_semana_w + 1;
				ie_dia_semana_w := ie_dia_semana_int_w;
				if (ie_dia_semana_int_w = 9) then			
					ie_dia_semana_w := ie_count_dia_semana_w;
				end if;
				
				open C02;
				loop
				fetch C02 into	
					nr_seq_licenca_w,
					ds_motivo_licenca_w,
					ds_observacao_w,
					ie_justificada_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
				end loop;
				close C02;
				
				if (nr_seq_licenca_w > 0) then
					if (ie_justificada_w = 'J') then
						ie_status_agenda_w	:= 'F';
					elsif (ie_justificada_w = 'N') then
						ie_status_agenda_w	:= 'I';
					end if;
					ds_motivo_status_w	:= ds_motivo_licenca_w;
				else
					ie_status_agenda_w		:= 'N';
					ds_motivo_status_w		:= '';
					cd_motivo_cancelamento_w	:= '';
					ds_observacao_w := '';
				end if;
				
				if (ie_status_agenda_prof_aus_w IS NOT NULL AND ie_status_agenda_prof_aus_w::text <> '') then
					
					nr_seq_ausencia_prof_w	:= 0;
					cd_substituto_w		:= '';
					open C03;
					loop
					fetch C03 into	
						nr_seq_ausencia_prof_w,
						ds_motivo_licenca_prof_w,
						cd_substituto_w;
					EXIT WHEN NOT FOUND; /* apply on C03 */
					end loop;
					close C03;
										
					if (nr_seq_ausencia_prof_w > 0) and (coalesce(cd_substituto_w::text, '') = '') then
						ie_status_agenda_w	:= ie_status_agenda_prof_aus_w;
						ds_motivo_status_w	:= ds_motivo_licenca_prof_w;
						if (ie_status_agenda_w	= 'C') then
							cd_motivo_cancelamento_w	:= cd_motivo_cancel_prof_aus_w;
						else
							cd_motivo_cancelamento_w	:= '';
						end if;					
					elsif (ie_status_agenda_w not in ('F','I')) then
						ie_status_agenda_w	:= 'N';
						ds_motivo_status_w	:= '';
						cd_motivo_cancelamento_w := '';
					end if;		
				
				end if;
				
				select	substr(obter_nome_pf(cd_pessoa_fisica_p),1,100),
					substr(obter_nome_agenda(cd_agenda_w),1,100),				
					obter_idade_pf(cd_pessoa_fisica_p,clock_timestamp(),'A')
				into STRICT	nm_pessoa_fisica_w,
					ds_agenda_w,				
					qt_idade_w
				;
				
				select 	max(dt_nascimento)
				into STRICT 	dt_nascimento_w
				from 	pessoa_fisica
				where 	cd_pessoa_fisica = cd_pessoa_fisica_p;					
							
				
				/* Consistencia se o paciente ja possui agendamento no dia */

				select	count(*)
				into STRICT	qt_agendado_w
				from	agenda_consulta
				where	trunc(dt_agenda,'dd')   = trunc(dt_atual_w)
				and	cd_pessoa_fisica	= cd_pessoa_fisica_p
				and	ie_status_agenda 	<> 'C'
				and	((cd_agenda 		= cd_agenda_w) or (ie_nao_permite_iguais_w = 'S'))
				and	to_char(dt_agenda,'hh24:mi') = to_char(dt_horario_w,'hh24:mi')
				and	(nr_seq_rp_mod_item IS NOT NULL AND nr_seq_rp_mod_item::text <> '');
				
				if (qt_agendado_w > 0) then
					/*Alteracao profissional*/

				
					select	max(nr_sequencia),
						max(cd_medico)
					into STRICT	nr_seq_agendado_w,
						cd_medico_agendado_w
					from	agenda_consulta
					where	trunc(dt_agenda,'dd')   = trunc(dt_atual_w)
					and	cd_pessoa_fisica	= cd_pessoa_fisica_p
					and	ie_status_agenda 	<> 'C'
					and	to_char(dt_agenda,'hh24:mi') = to_char(dt_horario_w,'hh24:mi')
					and	nr_seq_rp_mod_item 	= nr_seq_agend_item_w;
					
					if (coalesce(cd_substituto_w,cd_medico_exec_w) <> cd_medico_agendado_w) and (ie_manter_medico_exec_w <> 'S') then
						update	agenda_consulta
						set	cd_medico 	= coalesce(cd_substituto_w,cd_medico_exec_w)
						where	nr_sequencia 	= nr_seq_agendado_w;
					end if;			
					
				end if;
				
				
				/* Verificando se o dia e feriado */

				select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_feriado_w
				from 	feriado a,
					agenda b
				where 	a.cd_estabelecimento = obter_estab_agenda(cd_agenda_w)
				and	a.dt_feriado = trunc(dt_atual_w)
				and 	b.cd_agenda = cd_agenda_w
				and	coalesce(b.ie_feriado,'S') = 'N';
							
				if (obter_cod_dia_semana(dt_atual_w) = ie_dia_semana_w) and (qt_agendado_w = 0) then
					begin												
			
					if	((ie_feriado_w <> 'S') or (obter_se_agenda_feriado(cd_agenda_w) = 'S')) then
						begin
						
						select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
						into STRICT	ie_data_trat_w
						from	rp_tratamento 
						where	nr_seq_pac_reav = nr_seq_pac_reab_w
						and	(dt_inicio_tratamento IS NOT NULL AND dt_inicio_tratamento::text <> '');
						
						if (ie_data_trat_w = 'N') then
				
							update	rp_tratamento
							set	dt_inicio_tratamento 	= dt_atual_w
							where	nr_seq_pac_reav 	= nr_seq_pac_reab_w;

						end if;						
						
						CALL Gerar_Horario_Agenda_Servico(cd_estabelecimento_p,cd_agenda_w,dt_atual_w,nm_usuario_p);
					
						select	coalesce(max(nr_sequencia),0)
						into STRICT	nr_sequencia_w
						from	agenda_consulta
						where	cd_agenda = cd_agenda_w
						and	trunc(dt_agenda,'dd') = dt_atual_w
						and	to_char(dt_agenda,'hh24:mi') = to_char(dt_horario_w,'hh24:mi')
						and	coalesce(ie_classif_agenda,'X') = coalesce(coalesce(ie_classif_agenda_w,ie_classif_agenda),'X')
						and	ie_status_agenda = 'L';
						
						if (PKG_I18N.get_user_locale = 'ja_JP') then								
														
							SELECT * FROM consistir_classif_agecon(cd_estabelecimento_p, cd_pessoa_fisica_p, to_date(to_char(dt_atual_w,'dd/mm/yyyy')||' '||to_char(dt_horario_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'), cd_agenda_w, cd_convenio_w, null, null, null, ie_classif_agenda_w, nr_sequencia_w, ie_consistencia_w, ie_agenda_w, dt_inicial_p, dt_final_p, cd_medico_exec_w) INTO STRICT ie_consistencia_w, ie_agenda_w;
								
								if (ie_agenda_w = 'N') or (ie_consistencia_w IS NOT NULL AND ie_consistencia_w::text <> '') then								
									ds_erro_p := ie_consistencia_w;
								end if;

						end if;
					
						if (nr_sequencia_w > 0 and coalesce(ie_agenda_w,'S') <> 'N') then
							begin
							
							if (ie_manter_medico_exec_w = 'S') then
								begin
								update	agenda_consulta
								set	cd_pessoa_fisica	= cd_pessoa_fisica_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p,
									nr_seq_rp_mod_item 	= nr_seq_agend_item_w,
									qt_idade_pac		= qt_idade_w,
									dt_nascimento_pac	= dt_nascimento_w,
									ie_status_agenda	= CASE WHEN ie_status_agenda_susp_w = NULL THEN ie_status_agenda_w  ELSE ie_status_agenda_susp_w END ,
									ds_motivo_status	= ds_motivo_status_w,
									cd_motivo_cancelamento	= cd_motivo_cancelamento_w,
									cd_convenio		= coalesce(cd_convenio_w,cd_convenio),
									cd_categoria		= coalesce(cd_categoria_w,cd_categoria),
									cd_plano		= coalesce(cd_plano_w,cd_plano),
									cd_tipo_acomodacao	= coalesce(cd_tipo_acomodacao_w,cd_tipo_acomodacao),
									cd_usuario_convenio	= coalesce(cd_usuario_convenio_w,cd_usuario_convenio),
									DS_OBSERVACAO = coalesce(ds_observacao_w, DS_OBSERVACAO),
									dt_validade_carteira    = coalesce(dt_validade_w,dt_validade_carteira),
									nr_seq_sala		= nr_seq_room_w
								where	nr_sequencia		= nr_sequencia_w;
								end;
							else
								begin
								update	agenda_consulta
								set	cd_pessoa_fisica	= cd_pessoa_fisica_p,
									cd_medico		= coalesce(cd_substituto_w,cd_medico_exec_w),
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p,
									nr_seq_rp_mod_item 	= nr_seq_agend_item_w,
									qt_idade_pac		= qt_idade_w,
									dt_nascimento_pac	= dt_nascimento_w,
									ie_status_agenda	= CASE WHEN ie_status_agenda_susp_w = NULL THEN ie_status_agenda_w  ELSE ie_status_agenda_susp_w END ,
									ds_motivo_status	= ds_motivo_status_w,
									cd_motivo_cancelamento	= cd_motivo_cancelamento_w,
									cd_convenio		= coalesce(cd_convenio_w,cd_convenio),
									cd_categoria		= coalesce(cd_categoria_w,cd_categoria),
									cd_plano		= coalesce(cd_plano_w,cd_plano),
									cd_tipo_acomodacao	= coalesce(cd_tipo_acomodacao_w,cd_tipo_acomodacao),
									cd_usuario_convenio	= coalesce(cd_usuario_convenio_w,cd_usuario_convenio),
									DS_OBSERVACAO = coalesce(ds_observacao_w, DS_OBSERVACAO),
									dt_validade_carteira    = coalesce(dt_validade_w,dt_validade_carteira),
									nr_seq_sala		= nr_seq_room_w
								where	nr_sequencia		= nr_sequencia_w;
								end;

							end if;
								CALL RP_GERAR_AGENDA_PROCEDIMENTO(
										nr_seq_agend_consulta_p => nr_sequencia_w,
										nr_seq_rp_pac_agend_p => nr_seq_agend_item_w,
										ie_agend_ind_p => 'N'
									);
							end;
						elsif (ie_utiliza_regra_turno_w = 'N' and coalesce(ie_agenda_w,'S') <> 'N') then
							begin
							
							select coalesce(max(cd_classificacao), 'E')
							into STRICT	cd_classificacao_w
							from 	agenda_turno_classif;
							
							select	nextval('agenda_consulta_seq')
							into STRICT	nr_seq_agenda_w
							;
							
							select	coalesce(max(nr_seq_hora),0) + 1
							into STRICT	nr_seq_hora_w
							from	agenda_consulta
							where	cd_agenda	= cd_agenda_w
							and	dt_agenda	= to_date(to_char(dt_atual_w,'dd/mm/yyyy')||' '||to_char(dt_horario_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
							
							insert into agenda_consulta(
									nr_sequencia,
									cd_agenda,
									dt_agenda,
									nr_minuto_duracao,
									cd_pessoa_fisica,								
									ie_status_agenda,
									ie_classif_agenda,
									dt_atualizacao,
									nm_usuario,
									cd_medico,
									ie_encaixe,
									dt_agendamento,
									nm_usuario_origem,
									nr_seq_rp_mod_item,
									ds_motivo_status,
									nr_seq_hora,
									nm_paciente,
									cd_motivo_cancelamento,
									cd_convenio,	
									cd_categoria,
									cd_plano,	
									cd_tipo_acomodacao,
									cd_usuario_convenio,
									DS_OBSERVACAO,
									dt_validade_carteira,
									nr_seq_sala)
								values (
									nr_seq_agenda_w,
									cd_agenda_w,
									to_date(to_char(dt_atual_w,'dd/mm/yyyy')||' '||to_char(dt_horario_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'),
									0,
									cd_pessoa_fisica_p,								
									CASE WHEN coalesce(ie_status_agenda_susp_w::text, '') = '' THEN ie_status_agenda_w  ELSE ie_status_agenda_susp_w END ,
									coalesce(ie_classif_agenda_w,cd_classificacao_w),
									clock_timestamp(),
									nm_usuario_p,
									coalesce(cd_substituto_w,cd_medico_exec_w),
									'S',
									clock_timestamp(),
									nm_usuario_p,
									nr_seq_agend_item_w,
									ds_motivo_status_w,
									nr_seq_hora_w,
									substr(obter_nome_pf(cd_pessoa_fisica_p),1,100),
									cd_motivo_cancelamento_w,
									cd_convenio_w,							
									cd_categoria_w,							
									cd_plano_w,	
									cd_tipo_acomodacao_w,
									cd_usuario_convenio_w,
									ds_observacao_w,
									dt_validade_w,
									nr_seq_room_w);
								CALL RP_GERAR_AGENDA_PROCEDIMENTO(
									nr_seq_agend_consulta_p => nr_seq_agenda_w,
									nr_seq_rp_pac_agend_p => nr_seq_agend_item_w,
									ie_agend_ind_p => 'N'
								);
							
							if (dt_nascimento_w IS NOT NULL AND dt_nascimento_w::text <> '') then
								update	agenda_consulta
								set	dt_nascimento_pac = dt_nascimento_w,
									qt_idade_pac = obter_idade(dt_nascimento_w,clock_timestamp(),'A')
								where	nr_sequencia = nr_seq_agenda_w;									
							end if;									
							
							end;
						end if;
						
						if (nr_seq_status_agendamento_w IS NOT NULL AND nr_seq_status_agendamento_w::text <> '') and (nr_seq_status_pac_w <> nr_seq_status_agendamento_w) and (coalesce(ie_status_agenda_susp_w::text, '') = '') then
							
							update	rp_paciente_reabilitacao
							set	nr_seq_status	= nr_seq_status_agendamento_w
							where	nr_sequencia	= nr_seq_pac_reab_w;
											
						end if;
										
						if (nr_seq_status_agendamento_w IS NOT NULL AND nr_seq_status_agendamento_w::text <> '') and (coalesce(ie_status_agenda_susp_w::text, '') = '') then
							open C04;
							loop
							fetch C04 into	
								nr_seq_tratamento_w,
								nr_seq_status_trat_w;
							EXIT WHEN NOT FOUND; /* apply on C04 */
								begin
								if	((coalesce(nr_seq_status_trat_w::text, '') = '') or (nr_seq_status_trat_w <> nr_seq_status_agendamento_w)) then
									update	rp_tratamento
									set	nr_seq_status	= nr_seq_status_agendamento_w
									where	nr_sequencia	= nr_seq_tratamento_w;
								end if;
								
								end;
							end loop;
							close C04;
						end if;
						
						end;					
					end if;
													
					nr_seq_licenca_w   := 0;
					nr_seq_ausencia_prof_w	:= 0;
				end;
				end if;
				
				if (ie_count_dia_semana_w > 7) then
					ie_continua_w := 'N';
				end if;
				
				if (ie_dia_semana_int_w <> 9) or
					(ie_dia_semana_int_w = 9 AND ie_dia_semana_w = 6)then
					ie_continua_w := 'N';
				end if;				
				end;
			end loop;
		else
		   ds_erro_p := WHEB_MENSAGEM_PCK.get_texto(281540,null);
		end if;
		end;
	end loop;
	close C01;
	
	nr_seq_licenca_w	:= 0;
	nr_seq_ausencia_prof_w	:= 0;
	dt_atual_w		:= dt_atual_w + 1;
	end;
end loop;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE rp_gerar_agendamentos ( nr_seq_modelo_p text, cd_pessoa_fisica_p text, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text, ie_job_p text default 'N') FROM PUBLIC;

