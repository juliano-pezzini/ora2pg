-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_ordem_ambulatorial ( dt_referencia_p timestamp, cd_estabelecimento_p bigint, ie_gerar_ordem_pac_chegada_p text, nm_usuario_p text, ie_gera_inconsistencia_p text default 'N', ds_retorno_p INOUT text DEFAULT NULL) AS $body$
DECLARE


nr_seq_atendimento_w    bigint;
nr_seq_paciente_w   bigint;
cd_medico_resp_w    varchar(10);
nr_prescricao_w     bigint;
cd_estabelecimento_w    smallint;
nm_paciente_w     varchar(60);
ie_gerar_prescr_w   varchar(1);
ie_restringir_ordem_w   varchar(1);
nr_sequencia_log_w    bigint;
nr_sequencia_inc_w    bigint;
ie_liberado_w     varchar(1);
ie_consiste_ordem_w   varchar(1);
ie_exibe_apto_w     varchar(1);
ie_permite_acm_w    varchar(1);
ds_retorno_ww     varchar(4000);
ie_exige_lib_farma_w  varchar(1);
nr_atendimento_w  bigint;
ds_possui_med_inativo_w varchar(4000);

C01 CURSOR FOR
  SELECT  a.nr_seq_atendimento,
    a.nr_seq_paciente,
    a.nr_prescricao,
    a.nr_atendimento
  from  paciente_atendimento a
  where trunc(coalesce(a.dt_real,a.dt_prevista)) = trunc(dt_referencia_p)
  and obter_se_prescr_liberada(a.nr_seq_atendimento, cd_estabelecimento_p, nm_usuario_p) = 'S'
  AND   ((a.cd_estabelecimento = cd_estabelecimento_p) OR (ie_restringir_ordem_w = 'N'))
  and ((a.dt_chegada IS NOT NULL AND a.dt_chegada::text <> '') or (ie_gerar_ordem_pac_chegada_p = 'N'))
  and   ((a.dt_apto IS NOT NULL AND a.dt_apto::text <> '') or (coalesce(ie_exibe_apto_w,'N') = 'N'))
  and   coalesce(a.dt_suspensao::text, '') = ''
  and coalesce(a.dt_cancelamento::text, '') = ''
  and obter_se_paciente_obito(obter_pessoa_atendimento(a.nr_atendimento,'C')) <> 'A'
  and ((ie_gera_inconsistencia_p = 'N') or (not exists (SELECT 1 from w_inconsistencias_onco d  where d.nr_seq_atendimento = a.nr_seq_atendimento) ))

union

  select  a.nr_seq_atendimento,
    a.nr_seq_paciente,
    b.nr_prescricao,
    a.nr_atendimento
  from  paciente_atendimento a,
    prescr_medica b
  where trunc(coalesce(a.dt_real,a.dt_prevista)) = trunc(dt_referencia_p)
  and   b.nr_prescricao_anterior = a.nr_prescricao
  and   ((a.cd_estabelecimento = cd_estabelecimento_p) or (ie_restringir_ordem_w = 'N'))
  and ((a.dt_chegada IS NOT NULL AND a.dt_chegada::text <> '') or (ie_gerar_ordem_pac_chegada_p = 'N'))
  and   ((a.dt_apto IS NOT NULL AND a.dt_apto::text <> '') or (coalesce(ie_exibe_apto_w,'N') = 'N'))
  and   coalesce(a.dt_suspensao::text, '') = ''
  and (obter_se_paciente_obito(obter_pessoa_atendimento(a.nr_atendimento,'C')) <> 'A')
  and ((ie_gera_inconsistencia_p = 'N') or (not exists (select 1 from w_inconsistencias_onco d  where d.nr_seq_atendimento = a.nr_seq_atendimento) ))
  and coalesce(a.dt_cancelamento::text, '') = ''
	and	((b.dt_liberacao_farmacia IS NOT NULL AND b.dt_liberacao_farmacia::text <> '') or (coalesce(ie_exige_lib_farma_w,'N') = 	'N'));


BEGIN

select nextval('log_gera_ordem_seq')
into STRICT  nr_sequencia_log_w
;

insert into log_gera_ordem(
  nr_sequencia,
  nm_usuario,
  dt_inicio)
values (nr_sequencia_log_w,
  nm_usuario_p,
  clock_timestamp());

commit;

delete from w_inconsistencias_onco;

commit;

ie_liberado_w := 'N';

ie_gerar_prescr_w := Obter_Param_Usuario(3130, 55, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_prescr_w);
ie_restringir_ordem_w := Obter_Param_Usuario(3130, 165, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_restringir_ordem_w);
ie_consiste_ordem_w := Obter_Param_Usuario(3130, 169, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_ordem_w);
ie_exibe_apto_w := Obter_Param_Usuario(3130, 204, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_exibe_apto_w);
ie_exige_lib_farma_w := Obter_Param_Usuario(3130, 429, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_exige_lib_farma_w);

if (ie_consiste_ordem_w = 'S') then
  while(ie_liberado_w <> 'S')  loop
    begin
    select  coalesce(max('N'),'S')
    into STRICT  ie_liberado_w
    from  log_gera_ordem
    where   nr_sequencia < nr_sequencia_log_w
    and (dt_inicio +1/288) > clock_timestamp()
    and   coalesce(dt_final::text, '') = '';
    end;
  end loop;
end if;

begin

  OPEN C01;
  LOOP
  FETCH C01 into
    nr_seq_atendimento_w,
    nr_seq_paciente_w,
    nr_prescricao_w,
    nr_atendimento_w;
  EXIT WHEN NOT FOUND; /* apply on C01 */
    begin

    select  cd_medico_resp,
      cd_estabelecimento,
      substr(obter_nome_pf(cd_pessoa_fisica),1,60)
    into STRICT  cd_medico_resp_w,
      cd_estabelecimento_w,
      nm_paciente_w
    from  paciente_setor
    where nr_seq_paciente = nr_seq_paciente_w;

    if (coalesce(cd_medico_resp_w::text, '') = '') then
      if (ie_gera_inconsistencia_p = 'N') then
        CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(184696, 'NM_PACIENTE_W='||nm_paciente_w);
      else
        select nextval('w_inconsistencias_onco_seq')
        into STRICT  nr_sequencia_inc_w
;

        insert into w_inconsistencias_onco(
          nr_seq_atendimento,
          nr_sequencia,
          nm_usuario,
          nr_atendimento,
          ds_informacao)
        values (nr_seq_atendimento_w,
          nr_sequencia_inc_w,
          nm_usuario_p,
          nr_atendimento_w,
          substr(wheb_mensagem_pck.get_texto(184696, 'NM_PACIENTE_W='||nm_paciente_w),1,2000));
        commit;
      end if;

    end if;

    if (coalesce(nr_prescricao_w::text, '') = '') and (ie_gerar_prescr_w = 'S') then
      ds_retorno_ww := Gerar_Prescricao_Paciente(nr_seq_atendimento_w, nm_usuario_p, cd_estabelecimento_w, null, null, 'N', ds_retorno_ww);
      if (ds_retorno_ww IS NOT NULL AND ds_retorno_ww::text <> '') then
        ds_possui_med_inativo_w := ds_possui_med_inativo_w || ' - ' || ds_retorno_ww;
      end if;

    end if;
    end;
  END LOOP;
  Close C01;

	CALL Gerar_ordem_ambulatorial_Impl(dt_referencia_p, cd_estabelecimento_p, ie_gerar_ordem_pac_chegada_p, nm_usuario_p, ie_gera_inconsistencia_p);

  update  log_gera_ordem
  set   dt_final = clock_timestamp()
  where   nr_sequencia = nr_sequencia_log_w;
  commit;
exception
when others then
  update  log_gera_ordem
  set   dt_final = clock_timestamp()
  where   nr_sequencia = nr_sequencia_log_w;
  commit;

  CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(184695, 'ERRO='||sqlerrm);
end;

if (ds_possui_med_inativo_w IS NOT NULL AND ds_possui_med_inativo_w::text <> '') then
  ds_retorno_p := substr(wheb_mensagem_pck.get_texto(214974,'DS_MED_W=' || ds_possui_med_inativo_w),1,2000);
end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_ordem_ambulatorial ( dt_referencia_p timestamp, cd_estabelecimento_p bigint, ie_gerar_ordem_pac_chegada_p text, nm_usuario_p text, ie_gera_inconsistencia_p text default 'N', ds_retorno_p INOUT text DEFAULT NULL) FROM PUBLIC;

