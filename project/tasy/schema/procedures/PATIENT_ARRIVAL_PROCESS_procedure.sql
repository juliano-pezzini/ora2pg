-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE patient_arrival_process (appointments_json text) AS $body$
DECLARE

  nr_sequencia_temp_w    bigint;
  cd_tipo_agenda_temp_w  AGENDA.CD_TIPO_AGENDA%TYPE;
  nr_atendimento_w       ATENDIMENTO_PACIENTE.NR_ATENDIMENTO%TYPE;
  convenio_row_w         PESSOA_TITULAR_CONVENIO%ROWTYPE;
  agenda_consulta_row_w  AGENDA_CONSULTA%ROWTYPE;
  agenda_paciente_row_w  AGENDA_PACIENTE%ROWTYPE;
  l_appointments PHILIPS_JSON_LIST;
  l_appointments_aux PHILIPS_JSON_LIST;
  appointment_w PHILIPS_JSON;
  appointment_aux_w PHILIPS_JSON;
  l_appointment_date_w timestamp;
  l_appointment_date_aux_w timestamp;
  l_appointment_seq_w bigint;
  l_appointment_tipo_agenda_w smallint;

BEGIN
  CALL wheb_usuario_pck.set_ie_commit('N');

  l_appointments := PHILIPS_JSON_LIST(appointments_json);
  l_appointments_aux := PHILIPS_JSON_LIST(appointments_json);


  FOR i IN 1..l_appointments.COUNT LOOP
    appointment_w := PHILIPS_JSON(l_appointments.get(i));
    nr_sequencia_temp_w := null;
    cd_tipo_agenda_temp_w := null;
    l_appointment_seq_w := appointment_w.get['NR_SEQUENCIA'].GET_NUMBER();
    l_appointment_tipo_agenda_w := appointment_w.get['CD_TIPO_AGENDA'].GET_NUMBER();
    SELECT CASE WHEN l_appointment_tipo_agenda_w=2 THEN  obter_data_agenda_paciente(l_appointment_seq_w)  ELSE obter_data_agenda_consulta(l_appointment_seq_w) END
    INTO STRICT l_appointment_date_w
;

    -- find first appointment in the same day
    FOR j IN 1..l_appointments_aux.COUNT LOOP
      appointment_aux_w := PHILIPS_JSON(l_appointments_aux.get(j));
      l_appointment_seq_w := appointment_aux_w.get['NR_SEQUENCIA'].GET_NUMBER();
      l_appointment_tipo_agenda_w := appointment_aux_w.get['CD_TIPO_AGENDA'].GET_NUMBER();
      SELECT CASE WHEN l_appointment_tipo_agenda_w=2 THEN  obter_data_agenda_paciente(l_appointment_seq_w)  ELSE obter_data_agenda_consulta(l_appointment_seq_w) END
      INTO STRICT l_appointment_date_aux_w
;
      IF (TRUNC(l_appointment_date_w) = TRUNC(l_appointment_date_aux_w)) THEN
        IF (l_appointment_date_w <= l_appointment_date_aux_w) THEN
          nr_sequencia_temp_w := l_appointment_seq_w;
          cd_tipo_agenda_temp_w := l_appointment_tipo_agenda_w;
        END IF;
      END IF;
    END LOOP;

    -- if this appointment is the first in the day then generate encounter using its data
    IF (appointment_w.get['NR_SEQUENCIA'].GET_NUMBER() = nr_sequencia_temp_w AND appointment_w.get['CD_TIPO_AGENDA'].GET_NUMBER() = cd_tipo_agenda_temp_w) THEN

      -- fetch insurance information fallback
	  SELECT ptc.cd_convenio,
			 ptc.cd_categoria,
			 ptc.dt_validade_carteira,
			 ptc.cd_usuario_convenio
	  INTO STRICT convenio_row_w.cd_convenio,
			 convenio_row_w.cd_categoria,
			 convenio_row_w.dt_validade_carteira,
			 convenio_row_w.cd_usuario_convenio
	  FROM pessoa_titular_convenio ptc
	  WHERE ptc.NR_SEQUENCIA = (
				SELECT max(ptc2.NR_SEQUENCIA)
				FROM pessoa_titular_convenio ptc2
				WHERE clock_timestamp() BETWEEN coalesce(ptc2.dt_inicio_vigencia, clock_timestamp())
				AND coalesce(ptc2.dt_fim_vigencia, clock_timestamp())
				AND ptc2.cd_pessoa_fisica = appointment_w.get['CD_PESSOA_FISICA'].GET_STRING());

      IF (appointment_w.get['CD_TIPO_AGENDA'].GET_NUMBER() = 3) THEN
        -- GENERATE ENCOUNTER: Consultation Schedule
        SELECT  a.*
        INTO STRICT    agenda_consulta_row_w
        FROM    agenda_consulta a
        WHERE   a.nr_sequencia = appointment_w.get['NR_SEQUENCIA'].GET_NUMBER();

        NR_ATENDIMENTO_P       => nr_atendimento_w
         := GENERATE_ENCOUNTER(
          CD_PESSOA_FISICA_P     => agenda_consulta_row_w.cd_pessoa_fisica, IE_TIPO_ATENDIMENTO_P  => agenda_consulta_row_w.ie_tipo_atendimento, CD_CONVENIO_P          => coalesce(agenda_consulta_row_w.cd_convenio, convenio_row_w.cd_convenio), CD_CATEGORIA_P         => coalesce(agenda_consulta_row_w.cd_categoria, convenio_row_w.cd_categoria), DT_VALIDADE_CARTEIRA_P => coalesce(agenda_consulta_row_w.dt_validade_carteira, convenio_row_w.dt_validade_carteira), CD_USUARIO_CONVENIO_P  => coalesce(agenda_consulta_row_w.cd_usuario_convenio, convenio_row_w.cd_usuario_convenio), CD_PROCEDENCIA_P       => agenda_consulta_row_w.cd_procedencia, CD_MEDICO_RESP_P       => agenda_consulta_row_w.cd_medico_req, CD_ESTABELECIMENTO_P   => obter_estab_agenda(appointment_w.get['CD_AGENDA'].GET_NUMBER()), CD_SETOR_ATENDIMENTO_P => agenda_consulta_row_w.cd_setor_atendimento, NM_USUARIO_P           => wheb_usuario_pck.GET_NM_USUARIO(), NR_ATENDIMENTO_P       => nr_atendimento_w
        );

      ELSIF (appointment_w.get['CD_TIPO_AGENDA'].GET_NUMBER() = 5) THEN
        -- GENERATE ENCOUNTER: Service Schedule
        SELECT  a.*
        INTO STRICT    agenda_consulta_row_w
        FROM    agenda_consulta a
        WHERE   a.nr_sequencia = appointment_w.get['NR_SEQUENCIA'].GET_NUMBER();

        NR_ATENDIMENTO_P       => nr_atendimento_w
         := GENERATE_ENCOUNTER(
          CD_PESSOA_FISICA_P     => agenda_consulta_row_w.cd_pessoa_fisica, IE_TIPO_ATENDIMENTO_P  => agenda_consulta_row_w.ie_tipo_atendimento, CD_CONVENIO_P          => coalesce(agenda_consulta_row_w.cd_convenio, convenio_row_w.cd_convenio), CD_CATEGORIA_P         => coalesce(agenda_consulta_row_w.cd_categoria, convenio_row_w.cd_categoria), DT_VALIDADE_CARTEIRA_P => coalesce(agenda_consulta_row_w.dt_validade_carteira, convenio_row_w.dt_validade_carteira), CD_USUARIO_CONVENIO_P  => coalesce(agenda_consulta_row_w.cd_usuario_convenio, convenio_row_w.cd_usuario_convenio), CD_PROCEDENCIA_P       => agenda_consulta_row_w.cd_procedencia, CD_MEDICO_RESP_P       => coalesce(agenda_consulta_row_w.cd_medico_solic, agenda_consulta_row_w.cd_medico), CD_ESTABELECIMENTO_P   => obter_estab_agenda(appointment_w.get['CD_AGENDA'].GET_NUMBER()), CD_SETOR_ATENDIMENTO_P => agenda_consulta_row_w.cd_setor_atendimento, NM_USUARIO_P           => wheb_usuario_pck.GET_NM_USUARIO(), NR_ATENDIMENTO_P       => nr_atendimento_w
        );

      ELSIF (appointment_w.get['CD_TIPO_AGENDA'].GET_NUMBER() = 2) THEN
        -- GENERATE ENCOUNTER: Exam Schedule
        SELECT  a.*
        INTO STRICT    agenda_paciente_row_w
        FROM    agenda_paciente a
        WHERE   a.nr_sequencia = appointment_w.get['NR_SEQUENCIA'].GET_NUMBER();

        NR_ATENDIMENTO_P       => nr_atendimento_w
         := GENERATE_ENCOUNTER(
          CD_PESSOA_FISICA_P     => agenda_paciente_row_w.cd_pessoa_fisica, IE_TIPO_ATENDIMENTO_P  => null, CD_CONVENIO_P          => coalesce(agenda_paciente_row_w.cd_convenio, convenio_row_w.cd_convenio), CD_CATEGORIA_P         => coalesce(agenda_paciente_row_w.cd_categoria, convenio_row_w.cd_categoria), DT_VALIDADE_CARTEIRA_P => coalesce(agenda_paciente_row_w.dt_validade_carteira, convenio_row_w.dt_validade_carteira), CD_USUARIO_CONVENIO_P  => coalesce(agenda_paciente_row_w.cd_usuario_convenio, convenio_row_w.cd_usuario_convenio), CD_PROCEDENCIA_P       => agenda_paciente_row_w.cd_procedencia, CD_MEDICO_RESP_P       => coalesce(agenda_paciente_row_w.cd_medico, agenda_paciente_row_w.cd_medico_exec), CD_ESTABELECIMENTO_P   => obter_estab_agenda(appointment_w.get['CD_AGENDA'].GET_NUMBER()), CD_SETOR_ATENDIMENTO_P => agenda_paciente_row_w.cd_setor_atendimento, NM_USUARIO_P           => wheb_usuario_pck.GET_NM_USUARIO(), NR_ATENDIMENTO_P       => nr_atendimento_w
        );
      END IF;

      FOR j IN 1..l_appointments_aux.COUNT LOOP
        appointment_aux_w := PHILIPS_JSON(l_appointments_aux.get(j));
        l_appointment_seq_w := appointment_aux_w.get['NR_SEQUENCIA'].GET_NUMBER();
        l_appointment_tipo_agenda_w := appointment_aux_w.get['CD_TIPO_AGENDA'].GET_NUMBER();
        SELECT CASE WHEN l_appointment_tipo_agenda_w=2 THEN  obter_data_agenda_paciente(l_appointment_seq_w)  ELSE obter_data_agenda_consulta(l_appointment_seq_w) END
        INTO STRICT l_appointment_date_aux_w
;

        -- link generated encounter to appointments in the same day
        IF (TRUNC(l_appointment_date_w) = TRUNC(l_appointment_date_aux_w)) THEN
          -- consultation schedule and service schedule
          IF (l_appointment_tipo_agenda_w IN (3, 5)) THEN
            UPDATE  agenda_consulta
            SET     nr_atendimento = nr_atendimento_w
            WHERE   nr_sequencia = l_appointment_seq_w;
          END IF;

          -- exam schedule
          IF (l_appointment_tipo_agenda_w = 2) THEN
            UPDATE  agenda_paciente
            SET     nr_atendimento = nr_atendimento_w
            WHERE   nr_sequencia = l_appointment_seq_w;
          END IF;
        END IF;
      END LOOP;
    END IF;
  END LOOP;

  -- REGISTER PATIENT'S ARRIVAL IF EVERYTHING GOES RIGHT
  FOR i IN 1..l_appointments.COUNT LOOP
    appointment_w := PHILIPS_JSON(l_appointments.get(i));

    -- REGISTER PATIENT'S ARRIVAL
    CALL DO_ARRIVAL_FOR_APPOINTMENT(
      appointment_w.GET['CD_AGENDA'].GET_NUMBER(),
      appointment_w.GET['NR_SEQUENCIA'].GET_NUMBER(),
      appointment_w.GET['CD_PESSOA_FISICA'].GET_STRING(),
      appointment_w.GET['NR_ATENDIMENTO'].GET_NUMBER()
    );
  END LOOP;

  COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE patient_arrival_process (appointments_json text) FROM PUBLIC;

