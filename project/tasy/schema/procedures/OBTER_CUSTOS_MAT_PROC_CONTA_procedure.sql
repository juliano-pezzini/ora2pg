-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_custos_mat_proc_conta ( nr_sequencia_p bigint, ie_proc_mat_p bigint, vl_custo_p INOUT bigint, vl_custo_dir_apoio_p INOUT bigint, vl_custo_direto_p INOUT bigint, vl_custo_hm_p INOUT bigint, vl_custo_indireto_p INOUT bigint, vl_custo_mao_obra_p INOUT bigint, vl_custo_operacional_p INOUT bigint, vl_custo_sadt_p INOUT bigint, vl_custo_unitario_p INOUT bigint, vl_custo_variavel_p INOUT bigint) AS $body$
DECLARE


cd_estabelecimento_w		integer;
cd_convenio_w			integer;
cd_material_w			integer;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_exame_w			bigint;
nr_seq_proc_interno_w		bigint;
cd_tabela_custo_w			bigint;
cd_tabela_custo_ww		bigint;
qt_dia_w				integer;
vl_custo_w			double precision;
vl_procedimento_w			double precision;
vl_material_w			double precision;
vl_Medico_w			double precision;
vl_custo_operacional_w		double precision;
vl_custo_unitario_w			double precision;
nr_sequencia_w			bigint;
cd_setor_atendimento_w		integer;
qt_resumo_w			double precision;
qt_exclusao_custo_w		double precision;
dt_custo_w			timestamp;
dt_referencia_w			timestamp;
ds_criterio_w			varchar(03);
ie_apuracao_custo_w		varchar(01);
nr_prescricao_w			bigint;
nr_cirurgia_w			bigint;
cd_cgc_fornec_w			varchar(14);
qt_minuto_w			integer;
cd_proc_Tempo_w			bigint;
cd_proced_maior_porte_w 		bigint;
vl_custo_sadt_w			double precision;
vl_custo_variavel_w		double precision;
vl_custo_dir_apoio_w		double precision;
vl_custo_mao_obra_w		double precision;
vl_custo_direto_w			double precision;
vl_custo_indireto_w			double precision;
vl_despesa_w			double precision;
vl_custo_hm_w			double precision;
dt_anterior_w			timestamp;
ie_mes_calculo_w			varchar(01);
nr_atendimento_w			bigint;
qt_item_w			bigint;
ie_custo_oc_consig_w		varchar(01);
ie_proc_aih_co_w			varchar(10);
pr_imposto_w			double precision	:= 0;
nr_interno_conta_w			bigint;
vl_preco_calculado_w		double precision;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_material,
		0,
		null,
		null,
		null,
		qt_material,
		cd_setor_atendimento,
		nr_cirurgia,
		nr_prescricao,
		cd_cgc_fornecedor,
		0,
		0,
		vl_material,
		0,
		trunc(dt_atendimento,'Month'),
		0
	from	material_atend_paciente a
	where	a.nr_sequencia		= nr_sequencia_p
	and	ie_proc_mat_p		= 2
	
union

	SELECT	nr_sequencia,
		0,
		cd_procedimento,
		ie_origem_proced,
		coalesce(nr_seq_exame,0),
		coalesce(nr_seq_proc_interno,0),
		qt_procedimento,
		cd_setor_atendimento,
		nr_cirurgia,
		nr_prescricao,
		null,
		coalesce(vl_custo_operacional,0),
		coalesce(vl_procedimento,0),
		0,
		coalesce(vl_medico,0) + Obter_Valor_Participante(nr_sequencia),
		trunc(dt_procedimento,'Month'),
		0
	from	procedimento_paciente
	where	nr_sequencia		= nr_sequencia_p
	and	ie_proc_mat_p		= 1;

BEGIN

dt_anterior_w		:= clock_timestamp() - interval '5000 days';

if (ie_proc_mat_p		= 1) then
	select	nr_atendimento, nr_interno_conta
	into STRICT	nr_atendimento_w, nr_interno_conta_w
	from	procedimento_paciente
	where	nr_sequencia	= nr_sequencia_p;

else
	select	nr_atendimento, nr_interno_conta
	into STRICT	nr_atendimento_w, nr_interno_conta_w
	from	material_atend_paciente
	where	nr_sequencia	= nr_sequencia_p;

end if;

--primeiro procura os dados por conta, se não houver busca os dados pelo atendimento (caso dos itens excluídos)
begin
	select	a.cd_convenio_parametro,
		b.cd_estabelecimento,
		trunc(a.dt_mesano_referencia,'month'),
		a.nr_atendimento
	into STRICT	cd_convenio_w,
		cd_estabelecimento_w,
		dt_custo_w,
		nr_atendimento_w
	from	Atendimento_Paciente b,
		Conta_Paciente a
	where	a.nr_interno_conta	= nr_interno_conta_w
	and	a.nr_atendimento	= b.nr_atendimento;
exception
 when others then


	select	max(a.cd_convenio_parametro),
		max(b.cd_estabelecimento),
		max(trunc(a.dt_mesano_referencia,'month')),
		max(a.nr_atendimento)
	into STRICT	cd_convenio_w,
		cd_estabelecimento_w,
		dt_custo_w,
		nr_atendimento_w
	from	Atendimento_Paciente b,
		Conta_Paciente a
	where	a.nr_atendimento	= nr_atendimento_w
	  and	a.nr_atendimento	= b.nr_atendimento;
end;

select coalesce(max(ds_criterio_aloc_mat),'ERT'),
	coalesce(max(qt_dia_custo_compra), 90),
	max(cd_tabela_venda),
	max(coalesce(ie_mes_calculo,'C')),
	max(ie_custo_oc_consig),
	max(coalesce(ie_proc_aih_co,'CO'))
into STRICT	ds_criterio_w,
	qt_dia_w,
	cd_tabela_custo_ww,
	ie_mes_calculo_w,
	ie_custo_oc_consig_w,
	ie_proc_aih_co_w
from 	Parametro_custo
where	cd_estabelecimento	= cd_estabelecimento_w
  and	(cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '');

if (coalesce(cd_tabela_custo_ww::text, '') = '') then
	select	max(cd_tabela_custo)
	into STRICT	cd_tabela_custo_ww
	from	tabela_custo
	where	cd_tipo_tabela_custo	= 9
	and	dt_mes_referencia	= dt_custo_w
	and	cd_estabelecimento 	= cd_estabelecimento_w;
end if;

select	count(*)
into STRICT	qt_item_w
from	nota_fiscal_item
where	nr_atendimento		= nr_atendimento_w;

cd_tabela_custo_w			:= cd_tabela_custo_ww;
cd_proc_Tempo_w			:= 0;
OPEN C01;
LOOP
FETCH C01 into
	nr_sequencia_w,
	cd_material_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_exame_w,
	nr_seq_proc_interno_w,
	qt_resumo_w,
	cd_setor_atendimento_w,
	nr_cirurgia_w,
	nr_prescricao_w,
	cd_cgc_fornec_w,
	vl_custo_operacional_w,
	vl_procedimento_w,
	vl_material_w,
	vl_medico_w,
	dt_referencia_w,
	qt_exclusao_custo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
/*	Esta rotina foi incluida por marcus em 09/12/2004 para atender OS12126 */

	if (qt_resumo_w = 0) and (qt_exclusao_custo_w > 0) then
		qt_resumo_w		:= qt_exclusao_custo_w;
	end if;
	vl_custo_w			:= 0;
	vl_custo_sadt_w		:= 0;
	vl_custo_variavel_w		:= 0;
	vl_custo_dir_apoio_w		:= 0;
	vl_custo_mao_obra_w		:= 0;
	vl_custo_direto_w		:= 0;
	vl_custo_indireto_w		:= 0;
	vl_despesa_w			:= 0;
	vl_custo_hm_w			:= 0;
	ie_apuracao_custo_w		:= 'S';
/*	Esta rotina foi incluida por marcus em 19/02/2004 para atender OS6325 */

	if (ie_mes_calculo_w	= 'E') and (dt_anterior_w <> dt_referencia_w) then
		dt_anterior_w		:= dt_referencia_w;
		dt_custo_w		:= dt_referencia_w;
		select	coalesce(max(cd_tabela_custo), cd_tabela_custo_ww)
		into STRICT	cd_tabela_custo_w
		from	tabela_custo
		where	cd_tipo_tabela_custo	= 9
		and	dt_mes_referencia	= dt_custo_w
		and	cd_estabelecimento 	= cd_estabelecimento_w;
	end if;
	if (cd_procedimento_w > 0) then
		select 	coalesce(max(ie_apuracao_custo),'N')
		into STRICT	ie_apuracao_custo_w
		from	Procedimento
		where	cd_procedimento		= cd_procedimento_w
		  and	ie_origem_proced	= ie_origem_proced_w;
	end if;
	if (ie_apuracao_custo_w <> 'N') then
		begin
		if (cd_procedimento_w <> 99080012) and (ie_origem_proced_w = 2) and (ie_proc_aih_co_w = 'CO') and (coalesce(vl_custo_operacional_w,0) > 0) then
			vl_custo_unitario_w	:= vl_custo_operacional_w;
			vl_custo_variavel_w	:= vl_custo_unitario_w * qt_resumo_w;
		elsif (cd_procedimento_w > 0) then
			SELECT * FROM obter_custo_procedimento(
				cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, nr_seq_exame_w, cd_tabela_custo_w, cd_convenio_w, cd_setor_atendimento_w, vl_procedimento_w, vl_custo_operacional_w, vl_Medico_w, vl_material_w, ie_apuracao_custo_w, vl_custo_unitario_w, vl_custo_variavel_w, vl_custo_sadt_w, vl_custo_dir_apoio_w, vl_custo_mao_obra_w, vl_custo_direto_w, vl_custo_indireto_w, vl_despesa_w, vl_custo_hm_w, pr_imposto_w, dt_custo_w, null, null, null, null, vl_preco_calculado_w, null, 'N', null, null, null) INTO STRICT ie_apuracao_custo_w, vl_custo_unitario_w, vl_custo_variavel_w, vl_custo_sadt_w, vl_custo_dir_apoio_w, vl_custo_mao_obra_w, vl_custo_direto_w, vl_custo_indireto_w, vl_despesa_w, vl_custo_hm_w, pr_imposto_w, vl_preco_calculado_w;
		elsif (cd_Material_w > 0) then
			begin
			vl_custo_unitario_w	:= 0;
			ie_apuracao_custo_w	:= 'Q';
			if (ds_criterio_w <> 'NAO') then
				begin
/*  Obter o custo da ordem de compra gerada para a prescrição em questão */

				if (ie_custo_oc_consig_w = 'S') and (cd_cgc_fornec_w IS NOT NULL AND cd_cgc_fornec_w::text <> '') and (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') then
					begin
					Select obter_custo_mat_consignado(
						nr_prescricao_w,
						cd_material_w,
						cd_cgc_fornec_w,
						null)
					into STRICT	vl_custo_unitario_w
					;
					exception
						when others then
							vl_custo_unitario_w	:= 0;
					end;
				end if;
/*  Obter o custo da nota fiscal se esta estiver vinculada ao atendimento em questão */

				if (vl_custo_unitario_w = 0) and (qt_item_w > 0) then
					Select obter_custo_mat_nf_atend(
						nr_atendimento_w,
						cd_material_w)
					into STRICT	vl_custo_unitario_w
					;
				end if;

				if (vl_custo_unitario_w = 0) then
					SELECT * FROM obter_custo_Material(
						cd_estabelecimento_w, cd_material_w, cd_estabelecimento_w, cd_tabela_custo_w, cd_setor_atendimento_w, cd_convenio_w, vl_material_w, ds_criterio_w, qt_dia_w, dt_custo_w, ie_apuracao_custo_w, vl_custo_unitario_w, pr_imposto_w, null, null, null, 'N', null, 0, 0, null) INTO STRICT ie_apuracao_custo_w, vl_custo_unitario_w, pr_imposto_w;
				end if;
				vl_custo_variavel_w	:=  vl_custo_unitario_w;
				end;
			end if;
			end;
		end if;
		if (cd_procedimento_w = 99080012)  and (qt_resumo_w = 0) and (vl_custo_direto_w > 0) then
			vl_custo_w		:= vl_custo_unitario_w;
			vl_custo_direto_w	:= vl_custo_direto_w;
		elsif (ie_apuracao_custo_w = 'P') then
			vl_custo_w		:= vl_custo_unitario_w;
			vl_custo_variavel_w	:= vl_custo_variavel_w;
			vl_custo_sadt_w	:= vl_custo_sadt_w;
			vl_custo_dir_apoio_w	:= vl_custo_dir_apoio_w;
			vl_custo_mao_obra_w	:= vl_custo_mao_obra_w;
			vl_custo_direto_w	:= vl_custo_direto_w;
			vl_custo_indireto_w	:= vl_custo_Indireto_w;
			vl_despesa_w		:= vl_Despesa_w;
			vl_custo_hm_w		:= vl_custo_hm_w;
		elsif (ie_apuracao_custo_w = 'Q') then
			vl_custo_w		:= round((qt_resumo_w * vl_custo_unitario_w)::numeric, 2);
			vl_custo_sadt_w	:= qt_resumo_w * vl_custo_sadt_w;
			vl_custo_variavel_w	:= round((qt_resumo_w * vl_custo_variavel_w)::numeric, 2);
			vl_custo_dir_apoio_w	:= qt_resumo_w * vl_custo_dir_apoio_w;
			vl_custo_mao_obra_w	:= qt_resumo_w * vl_custo_mao_obra_w;
			vl_custo_direto_w	:= qt_resumo_w * vl_custo_direto_w;
			vl_custo_indireto_w	:= qt_resumo_w * vl_custo_Indireto_w;
			vl_despesa_w		:= qt_resumo_w * vl_Despesa_w;
			vl_custo_hm_w		:= qt_resumo_w * vl_custo_hm_w;
		elsif (ie_apuracao_custo_w = 'T') then
			begin
			select coalesce(max(b.nr_min_duracao_real),0)
			into STRICT	qt_minuto_w
			from 	cirurgia b
			where 	nr_cirurgia	= nr_cirurgia_w;
			vl_custo_w		:= (qt_minuto_w * vl_custo_unitario_w / 60);
			vl_custo_sadt_w	:= (qt_minuto_w * vl_custo_sadt_w / 60);
			vl_custo_variavel_w	:= (qt_minuto_w * vl_custo_variavel_w / 60);
			vl_custo_dir_apoio_w	:= (qt_minuto_w * vl_custo_dir_apoio_w / 60);
			vl_custo_mao_obra_w	:= (qt_minuto_w * vl_custo_mao_obra_w / 60);
			vl_custo_direto_w	:= (qt_minuto_w * vl_custo_direto_w / 60);
			vl_custo_indireto_w	:= (qt_minuto_w * vl_custo_Indireto_w / 60);
			vl_despesa_w		:= (qt_minuto_w * vl_Despesa_w / 60);
			vl_custo_hm_w		:= (qt_minuto_w * vl_custo_hm_w / 60);
			end;
		elsif (ie_apuracao_custo_w = 'X') then
			begin
			select 	coalesce(max(b.nr_min_duracao_real),0)
			into STRICT	qt_minuto_w
			from 	cirurgia b
			where 	nr_cirurgia	= nr_cirurgia_w;
			if (cd_proc_Tempo_w = 0) then
				cd_proc_tempo_w		:= cd_procedimento_w;
				vl_custo_w		:= (qt_minuto_w * vl_custo_unitario_w / 60);
				vl_custo_sadt_w	:= (qt_minuto_w * vl_custo_sadt_w / 60);
				vl_custo_variavel_w	:= (qt_minuto_w * vl_custo_variavel_w / 60);
				vl_custo_dir_apoio_w	:= (qt_minuto_w * vl_custo_dir_apoio_w / 60);
				vl_custo_mao_obra_w	:= (qt_minuto_w * vl_custo_mao_obra_w / 60);
				vl_custo_direto_w	:= (qt_minuto_w * vl_custo_direto_w / 60);
				vl_custo_indireto_w	:= (qt_minuto_w * vl_custo_Indireto_w / 60);
				vl_despesa_w		:= (qt_minuto_w * vl_Despesa_w / 60);
				vl_custo_hm_w		:= (qt_minuto_w * vl_custo_hm_w / 60);
			else
				vl_custo_w		:= 0;
				vl_custo_variavel_w	:= 0;
				vl_custo_sadt_w	:= 0;
				vl_custo_dir_apoio_w	:= 0;
				vl_custo_mao_obra_w	:= 0;
				vl_custo_direto_w	:= 0;
				vl_custo_indireto_w	:= 0;
				vl_despesa_w		:= 0;
				vl_custo_hm_w		:= 0;
			end if;
			end;
		elsif (ie_apuracao_custo_w = 'M') then /* Matheus OS 75705 08/04/2008*/
			begin
			if (nr_cirurgia_w > 0) then

				/*Obter a taxa de maior porte da cirurgia */

				select	coalesce(max(obter_taxa_maior_porte(nr_cirurgia_w)),cd_procedimento_w)
				into STRICT	cd_proced_maior_porte_w
				;

				/*Calcula (por tempo) somente se for a taxa de maior porte*/

				if (cd_proced_maior_porte_w = cd_procedimento_w) then
					begin
					select	coalesce(max(b.nr_min_duracao_real),0)
					into STRICT	qt_minuto_w
					from 	cirurgia b
					where 	nr_cirurgia	= nr_cirurgia_w;

					vl_custo_w		:= (qt_minuto_w * vl_custo_unitario_w / 60);
					vl_custo_sadt_w		:= (qt_minuto_w * vl_custo_sadt_w / 60);
					vl_custo_variavel_w	:= (qt_minuto_w * vl_custo_variavel_w / 60);
					vl_custo_dir_apoio_w	:= (qt_minuto_w * vl_custo_dir_apoio_w / 60);
					vl_custo_mao_obra_w	:= (qt_minuto_w * vl_custo_mao_obra_w / 60);
					vl_custo_direto_w		:= (qt_minuto_w * vl_custo_direto_w / 60);
					vl_custo_indireto_w		:= (qt_minuto_w * vl_custo_Indireto_w / 60);
					vl_despesa_w		:= (qt_minuto_w * vl_Despesa_w / 60);
					vl_custo_hm_w		:= (qt_minuto_w * vl_custo_hm_w / 60);
					end;
				else
					vl_custo_w		:= 0;
					vl_custo_variavel_w	:= 0;
					vl_custo_sadt_w		:= 0;
					vl_custo_dir_apoio_w	:= 0;
					vl_custo_mao_obra_w	:= 0;
					vl_custo_direto_w	:= 0;
					vl_custo_indireto_w	:= 0;
					vl_despesa_w		:= 0;
					vl_custo_hm_w		:= 0;
				end if;
			end if;
			end;
		end if;
		end;
	end if;

	vl_custo_p		:= vl_custo_variavel_w + vl_custo_sadt_w + vl_custo_dir_apoio_w + vl_custo_mao_obra_w + vl_custo_direto_w + vl_custo_indireto_w +
					vl_despesa_w + vl_custo_hm_w;

	vl_custo_dir_apoio_p	:= vl_custo_dir_apoio_w;
	vl_custo_direto_p	:= vl_custo_direto_w;
	vl_custo_hm_p		:= vl_custo_hm_w;
	vl_custo_indireto_p	:= vl_custo_indireto_w;
	vl_custo_mao_obra_p	:= vl_custo_mao_obra_w;
	vl_custo_operacional_p	:= vl_custo_operacional_w;
	vl_custo_sadt_p		:= vl_custo_sadt_w;
	vl_custo_unitario_p	:= vl_custo_unitario_w;
	vl_custo_variavel_p	:= vl_custo_variavel_w;

	if (coalesce(pr_imposto_w, 0) > 0) then
		vl_custo_p		:= vl_custo_p  + (vl_custo_p * pr_imposto_w);
		vl_custo_dir_apoio_p	:= vl_custo_dir_apoio_p  + (vl_custo_dir_apoio_p * pr_imposto_w);
		vl_custo_direto_p	:= vl_custo_direto_p  + (vl_custo_direto_p * pr_imposto_w);
		vl_custo_hm_p		:= vl_custo_hm_p  + (vl_custo_hm_p * pr_imposto_w);
		vl_custo_indireto_p	:= vl_custo_indireto_p  + (vl_custo_indireto_p * pr_imposto_w);
		vl_custo_mao_obra_p	:= vl_custo_mao_obra_p  + (vl_custo_mao_obra_p * pr_imposto_w);
		vl_custo_operacional_p	:= vl_custo_operacional_p  + (vl_custo_operacional_p * pr_imposto_w);
		vl_custo_sadt_p		:= vl_custo_sadt_p  + (vl_custo_sadt_p * pr_imposto_w);
		vl_custo_unitario_p	:= vl_custo_unitario_p  + (vl_custo_unitario_p * pr_imposto_w);
		vl_custo_variavel_p	:= vl_custo_variavel_p  + (vl_custo_variavel_p * pr_imposto_w);
	end if;

	end;
END LOOP;
CLOSE C01;

vl_custo_p		:= coalesce(vl_custo_p,0);
vl_custo_dir_apoio_p	:= coalesce(vl_custo_dir_apoio_p,0);
vl_custo_direto_p	:= coalesce(vl_custo_direto_p,0);
vl_custo_hm_p		:= coalesce(vl_custo_hm_p,0);
vl_custo_indireto_p	:= coalesce(vl_custo_indireto_p,0);
vl_custo_mao_obra_p	:= coalesce(vl_custo_mao_obra_p,0);
vl_custo_operacional_p	:= coalesce(vl_custo_operacional_p,0);
vl_custo_sadt_p		:= coalesce(vl_custo_sadt_p,0);
vl_custo_unitario_p	:= coalesce(vl_custo_unitario_p,0);
vl_custo_variavel_p	:= coalesce(vl_custo_variavel_p,0);

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_custos_mat_proc_conta ( nr_sequencia_p bigint, ie_proc_mat_p bigint, vl_custo_p INOUT bigint, vl_custo_dir_apoio_p INOUT bigint, vl_custo_direto_p INOUT bigint, vl_custo_hm_p INOUT bigint, vl_custo_indireto_p INOUT bigint, vl_custo_mao_obra_p INOUT bigint, vl_custo_operacional_p INOUT bigint, vl_custo_sadt_p INOUT bigint, vl_custo_unitario_p INOUT bigint, vl_custo_variavel_p INOUT bigint) FROM PUBLIC;

