-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_encaixe_turno_agecons ( dt_agenda_p timestamp, dt_encaixe_p timestamp, cd_agenda_p bigint ) AS $body$
DECLARE


hr_inicial_turno_w			agenda_turno.hr_inicial%type;
hr_final_turno_w			agenda_turno.hr_final%type;
qt_perm_enc_turno_w			agenda_turno.qt_encaixe%type;
nr_seq_turno_val_marc_w		agenda_turno.nr_sequencia%type;
qt_encaixe_turno_w			bigint;
ds_erro_w					varchar(255);

BEGIN

select	max(nr_sequencia)
into STRICT	nr_seq_turno_val_marc_w
from	agenda_turno
where	to_char(dt_encaixe_p, 'hh24:mi:ss') between to_char(hr_inicial,'hh24:mi:ss') and to_char(hr_final,'hh24:mi:ss')
and		coalesce(dt_inicio_vigencia, to_date(to_char(dt_agenda_p, 'dd/mm/yyyy') || ' ' || to_char(dt_encaixe_p,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')) <=
		to_date(to_char(dt_agenda_p, 'dd/mm/yyyy') || ' ' || to_char(dt_encaixe_p,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
and		coalesce(dt_final_vigencia, to_date(to_char(dt_agenda_p, 'dd/mm/yyyy') || ' ' || to_char(dt_encaixe_p,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')) >=
		to_date(to_char(dt_agenda_p, 'dd/mm/yyyy') || ' ' || to_char(dt_encaixe_p,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
and		nr_minuto_intervalo > 0
and		((ie_dia_semana = obter_cod_dia_semana(dt_agenda_p)) or ((ie_dia_semana = 9) and (obter_cod_dia_semana(dt_agenda_p) not in (7,1))))
and		cd_agenda 		= cd_agenda_p
and		(qt_encaixe IS NOT NULL AND qt_encaixe::text <> '');

if (nr_seq_turno_val_marc_w IS NOT NULL AND nr_seq_turno_val_marc_w::text <> '') then
	begin

	select	max(hr_inicial),
			max(hr_final),
			max(qt_encaixe)
	into STRICT	hr_inicial_turno_w,
			hr_final_turno_w,
			qt_perm_enc_turno_w
	from	agenda_turno
	where	nr_sequencia = nr_seq_turno_val_marc_w;

	if (hr_inicial_turno_w IS NOT NULL AND hr_inicial_turno_w::text <> '') and (hr_final_turno_w IS NOT NULL AND hr_final_turno_w::text <> '') and (qt_perm_enc_turno_w IS NOT NULL AND qt_perm_enc_turno_w::text <> '') then

		select	count(*) + 1
		into STRICT	qt_encaixe_turno_w
		from	agenda_consulta
		where	coalesce(ie_encaixe,'N')	= 'S'
		and		dt_Agenda 		between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_turno_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') and
				to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_turno_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
		and		ie_status_agenda	not in ('C', 'F', 'I', 'II', 'B', 'R')
		and		cd_agenda			= cd_agenda_p;

	end if;

	exception
	when others then
		ds_erro_w := substr(sqlerrm,1,255);
	end;
end if;

if (qt_perm_enc_turno_w IS NOT NULL AND qt_perm_enc_turno_w::text <> '') and (coalesce(qt_encaixe_turno_w,0) > coalesce(qt_perm_enc_turno_w,0))then
	/*A quantidade limite de encaixes para este turno foi atingida! Verifique a qtd. permitida no cadastro dos hor√°rios da agenda.*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(260557);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_encaixe_turno_agecons ( dt_agenda_p timestamp, dt_encaixe_p timestamp, cd_agenda_p bigint ) FROM PUBLIC;

