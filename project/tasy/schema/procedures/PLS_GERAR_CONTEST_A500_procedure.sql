-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_contest_a500 ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_lote_p bigint, nr_seq_contestacao_p INOUT bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar o lote de A550 conforme os valores pagos e contestados, e atualiza os 
valores da contestação
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionário [  X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
	Inverte a unimed de origem com a de destino pois se está dando retorno a unimed 
	que enviou o arquivo de A500 
	
	NÃO TRATAR VALORES AQUI DENTRO ! ! !
		APENAS NA PLS_AJUSTAR_VALORES_A550
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_nota_credito_debito_a500_w	varchar(30);
nr_documento2_w			varchar(30);
cd_cooperativa_w		varchar(10);
ie_tipo_tabela_w		varchar(1);
obter_se_poss_gerar_w		varchar(1);
ie_classif_cobranca_a500_w	varchar(1);
cd_unimed_origem_w		bigint;
cd_unimed_destino_w		bigint;
nr_fatura_w			ptu_fatura.nr_fatura%type;
nr_versao_transacao_w		bigint;
nr_seq_contestacao_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_conta_proc_w		bigint;
ie_tipo_arquivo_w		bigint;
nr_seq_protocolo_w		bigint;
nr_seq_lote_w			bigint;
nr_seq_contes_proc_w		bigint;
nr_seq_ptu_fatura_w		bigint;	
nr_seq_contes_proc_2_w		bigint;
nr_seq_pls_fatura_w		bigint;
nr_titulo_w			bigint;
nr_titulo_ndc_w			bigint;
nr_seq_congenere_w		pls_congenere.nr_sequencia%type;
qt_camara_w			bigint := 0;
dt_geracao_w			timestamp;
dt_vencimento_fatura_w		timestamp;
dt_geracao_registro_w		timestamp;
dt_vencimento_ndc_a500_w	timestamp;
dt_venc_doc2_w			timestamp;
dt_venc_fatura_original_w	timestamp;
ie_tit_fat_ndc_w		varchar(1);
qt_baixa_fat_w			bigint := 0;
qt_baixa_ndc_w			bigint := 0;
qt_registro_w			bigint := 0;
nr_seq_proc_princ_w		bigint;
qt_registro_552_w		integer:=0;
ie_tipo_arquivo_cob_w		ptu_fatura.ie_tipo_arquivo_cob%type;
cd_interface_w			interface.cd_interface%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_item_w			pls_conta_proc.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		b.nr_sequencia
	from	pls_contestacao	b,
		pls_conta	a
	where	a.nr_sequencia	= b.nr_seq_conta
	and	b.nr_seq_lote	= nr_seq_lote_p;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		'P',
		null nr_seq_proc_princ,
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_conta_mat
	from	pls_contestacao_proc b,
		pls_conta_proc	a
	where	b.nr_seq_conta_proc	= a.nr_sequencia
	and	a.nr_seq_conta		= nr_seq_conta_w
	and	coalesce(a.nr_seq_proc_princ::text, '') = ''
	and	a.ie_status 		not in ('D','M')
	
union

	SELECT	a.nr_sequencia,
		'M',
		null nr_seq_proc_princ,
		null nr_seq_conta_proc,
		a.nr_sequencia nr_seq_conta_mat
	from	pls_contestacao_mat b,
		pls_conta_mat	a
	where	b.nr_seq_conta_mat	= a.nr_sequencia
	and	a.nr_seq_conta		= nr_seq_conta_w
	and	a.ie_status 		not in ('D','M')
	
union

	select	a.nr_sequencia,
		'Q',
		a.nr_seq_proc_princ,
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_conta_mat
	from	pls_conta_proc	a
	where	a.nr_seq_conta	= nr_seq_conta_w
	and	(a.nr_seq_proc_princ IS NOT NULL AND a.nr_seq_proc_princ::text <> '')
	and	a.ie_status 	not in ('D','M')
	order by
		2;

BEGIN
select	nr_seq_protocolo,
	nr_seq_ptu_fatura,
	nr_seq_pls_fatura,
	nr_sequencia
into STRICT	nr_seq_protocolo_w,
	nr_seq_ptu_fatura_w,
	nr_seq_pls_fatura_w,
	nr_seq_lote_w
from	pls_lote_contestacao
where	nr_sequencia	= nr_seq_lote_p;

-- Obter se ainda é possivel gerar o A500 segundo as regra de qt max de dias
obter_se_poss_gerar_w	:= pls_obter_se_qt_dias_cont(nr_seq_protocolo_w);

if (coalesce(obter_se_poss_gerar_w,'S') = 'N') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(183028);
end if;

if (nr_seq_ptu_fatura_w IS NOT NULL AND nr_seq_ptu_fatura_w::text <> '') then -- Pagamento
	select	f.cd_unimed_destino,
		f.cd_unimed_origem,
		f.dt_geracao,
		f.nr_fatura,
		f.dt_vencimento_fatura,
		'09',
		nextval('ptu_camara_contestacao_seq'),
		f.dt_atualizacao_nrec,
		1,
		f.ie_classif_cobranca,
		f.nr_nota_credito_debito,
		f.dt_vencimento_ndc,
		dt_venc_fatura_original,
		coalesce(f.ie_tit_fat_ndc,'N'),
		coalesce(f.ie_tipo_arquivo_cob,'502'),
		p.nr_seq_congenere
	into STRICT	cd_unimed_origem_w,
		cd_unimed_destino_w,
		dt_geracao_w,
		nr_fatura_w,
		dt_vencimento_fatura_w,
		nr_versao_transacao_w,
		nr_seq_contestacao_p,
		dt_geracao_registro_w,
		ie_tipo_arquivo_w,
		ie_classif_cobranca_a500_w,
		nr_nota_credito_debito_a500_w,
		dt_vencimento_ndc_a500_w,
		dt_venc_fatura_original_w,
		ie_tit_fat_ndc_w,
		ie_tipo_arquivo_cob_w,
		nr_seq_congenere_w
	from	ptu_fatura		f,
		pls_protocolo_conta	p
	where	p.nr_sequencia	= f.nr_seq_protocolo
	and	f.nr_sequencia	= nr_seq_ptu_fatura_w;
	
	select	max(a.nr_titulo)
	into STRICT	nr_titulo_w
	from	titulo_pagar	b,
		ptu_fatura	a
	where	a.nr_titulo	= b.nr_titulo
	and	b.ie_situacao	<> '3'
	and	a.nr_sequencia	= nr_seq_ptu_fatura_w;
	
	select	max(a.nr_titulo_ndc)
	into STRICT	nr_titulo_ndc_w
	from	titulo_pagar	b,
		ptu_fatura	a
	where	a.nr_titulo	= b.nr_titulo
	and	b.ie_situacao	<> '3'
	and	a.nr_sequencia	= nr_seq_ptu_fatura_w;
	
elsif (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') then -- Faturamento
	select	substr(pls_obter_cd_cooperativa(cd_estabelecimento_p), 1, 10),
		substr(pls_obter_cd_seq_congenere(a.nr_seq_congenere, 'CD'), 1, 10),
		b.dt_geracao,
		coalesce(c.nr_fatura,to_char(a.nr_titulo)),
		a.dt_vencimento,
		'09',
		nextval('ptu_camara_contestacao_seq'),
		a.dt_atualizacao_nrec,
		1,
		coalesce(c.nr_nota_credito_debito,to_char(a.nr_titulo_ndc)),
		a.dt_vencimento_ndc,
		c.ie_classif_cobranca,
		coalesce(c.ie_tipo_arquivo_cob,'502'),
		a.nr_seq_congenere
	into STRICT	cd_unimed_origem_w,
		cd_unimed_destino_w,
		dt_geracao_w,
		nr_fatura_w,
		dt_vencimento_fatura_w,
		nr_versao_transacao_w,
		nr_seq_contestacao_p,
		dt_geracao_registro_w,
		ie_tipo_arquivo_w,
		nr_nota_credito_debito_a500_w,
		dt_vencimento_ndc_a500_w,
		ie_classif_cobranca_a500_w,
		ie_tipo_arquivo_cob_w,
		nr_seq_congenere_w
	FROM pls_lote_faturamento b, pls_fatura a
LEFT OUTER JOIN ptu_fatura c ON (a.nr_sequencia = c.nr_seq_pls_fatura)
WHERE a.nr_seq_lote	= b.nr_sequencia  and a.nr_sequencia	= nr_seq_pls_fatura_w;
end if;

cd_interface_w := pls_obter_interf_ptu( cd_estabelecimento_p, nr_seq_congenere_w, clock_timestamp(), 'A550');

if (coalesce(dt_venc_fatura_original_w::text, '') = '') then
	if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
		select	max(dt_vencimento_original)
		into STRICT	dt_vencimento_fatura_w
		from	titulo_pagar
		where	nr_titulo = nr_titulo_w;
	end if;
else
	dt_vencimento_fatura_w := dt_venc_fatura_original_w;
end if;

if (coalesce(dt_vencimento_ndc_a500_w::text, '') = '') then
	if (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
		select	max(dt_vencimento_original)
		into STRICT	dt_vencimento_ndc_a500_w
		from	titulo_pagar
		where	nr_titulo = nr_titulo_ndc_w;
	end if;
end if;

if (coalesce(cd_unimed_destino_w::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1062497);
end if;

insert into ptu_camara_contestacao(nr_sequencia,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	cd_unimed_destino,
	cd_unimed_origem,
	dt_geracao,
	nr_fatura,
	vl_total_fatura,
	nr_versao_transacao,
	cd_estabelecimento,
	dt_venc_fatura,
	cd_unimed_credora,
	ie_tipo_arquivo,
	ie_operacao,
	nr_seq_lote_contest,
	vl_total_contestacao,
	vl_total_pago,
	ie_classif_cobranca_a500,
	nr_nota_credito_debito_a500,
	dt_vencimento_ndc_a500,
	vl_total_ndc_a500,
	vl_total_contest_ndc,
	vl_total_pago_ndc,
	nr_documento2,
	dt_venc_doc2)
values (nr_seq_contestacao_p,
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p, 
	cd_unimed_destino_w, 
	cd_unimed_origem_w, 
	dt_geracao_w, 
	nr_fatura_w,
	0, 
	nr_versao_transacao_w, 
	cd_estabelecimento_p,
	dt_vencimento_fatura_w, 
	cd_unimed_origem_w, 
	ie_tipo_arquivo_w,
	'E',
	nr_seq_lote_w,
	0,
	0,
	ie_classif_cobranca_a500_w,
	nr_nota_credito_debito_a500_w,
	dt_vencimento_ndc_a500_w,
	0,
	0,
	0,
	null,
	null);
	
open C01;
loop
fetch C01 into	
	nr_seq_conta_w,
	nr_seq_contestacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	open C02;
	loop
	fetch C02 into	
		nr_seq_item_w,
		ie_tipo_tabela_w,
		nr_seq_proc_princ_w,
		nr_seq_conta_proc_w,
		nr_seq_conta_mat_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		begin
		-- SERVICO
		if (ie_tipo_arquivo_cob_w = '502') then
			if (ie_tipo_tabela_w in ('P','Q')) then
				select	count(1)
				into STRICT	qt_registro_w
				from	ptu_questionamento x,
					pls_conta_proc y
				where	y.nr_sequencia	= x.nr_seq_conta_proc
				and	x.ie_tipo_acordo <> '11'
				and (y.nr_sequencia	= nr_seq_item_w or y.nr_sequencia = nr_seq_proc_princ_w or y.nr_seq_proc_princ = nr_seq_proc_princ_w);
			end if;
			
			if (qt_registro_w = 0) then
				CALL pls_gerar_questionamento(nr_seq_item_w,
							nr_seq_conta_w,
							nr_seq_contestacao_p,
							nr_seq_protocolo_w,
							ie_tipo_tabela_w,
							nm_usuario_p,
							cd_estabelecimento_p);
			end if;
			
		-- REEMBOLSO
		elsif (ie_tipo_arquivo_cob_w = '507') then
			if (ie_tipo_tabela_w in ('P','Q')) then
				select	count(1)
				into STRICT	qt_registro_w
				from	ptu_quest_serv_rrs x,
					pls_conta_proc y
				where	y.nr_sequencia	= x.nr_seq_conta_proc
				and	x.tp_acordo <> '11'
				and (y.nr_sequencia	= nr_seq_item_w or y.nr_sequencia = nr_seq_proc_princ_w or y.nr_seq_proc_princ = nr_seq_proc_princ_w);
			end if;
			
			if (qt_registro_w = 0) then
				CALL pls_gerar_questionamento_reemb(	nr_seq_conta_proc_w,
								nr_seq_conta_mat_w,
								nr_seq_conta_w,
								nr_seq_contestacao_p,
								ie_tipo_tabela_w,
								cd_interface_w,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;
		end if;
		
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(183030,'NR_SEQ_CONTA=' || nr_seq_conta_w||';'||'NR_SEQ_CONTA_PROC=' || nr_seq_item_w||';'||
								'DS_ERRO=' || substr(sqlerrm || chr(13) || dbms_utility.format_error_backtrace, 1, 4000));	
		end;
		qt_registro_w := 0;		
		end;
	end loop;
	close C02;
	end;
end loop;
close C01;

select	count(1)
into STRICT	qt_registro_552_w
from	ptu_questionamento
where	nr_seq_contestacao = nr_seq_contestacao_p;

update	ptu_camara_contestacao
set	qt_tot_r552		= qt_registro_552_w,
	ie_tipo_arquivo_cob	= CASE WHEN qt_registro_552_w=0 THEN '507'  ELSE '502' END
where	nr_sequencia		= nr_seq_contestacao_p;

-- ESTA ROTINA TRATA APENAS DE VALORES DA PTU_CAMARA_CONTESTACAO
CALL pls_ajustar_valores_a550( nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p, 'N');

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_contest_a500 ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_lote_p bigint, nr_seq_contestacao_p INOUT bigint) FROM PUBLIC;

