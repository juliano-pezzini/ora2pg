-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_91 (( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) is /* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Validar médico executor conforme cadastro prestador
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
*/
 dados_tb_sel_w pls_tipos_ocor_pck.dados_table_selecao_ocor) RETURNS varchar AS $body$
DECLARE


ie_profissional_w			varchar(10);
BEGIN

select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
into STRICT	ie_profissional_w
from	pls_prestador_medico a
where	a.nr_seq_prestador	= nr_seq_prestador_p
and	a.cd_medico		= cd_medico_p
and	dt_referencia_p 	>= coalesce(a.dt_inclusao,dt_referencia_p)
and  	dt_referencia_p		<= coalesce(a.dt_exclusao,dt_referencia_p);

return ie_profissional_w;

end;

begin

-- Deve existir informação da regra para aplicar a validação
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	for	r_C01_w in C01(dados_regra_p.nr_sequencia) loop

		/*Verifica se é para validar a ocorrência*/

		if (r_C01_w.ie_medico_vinc_prest = 'S') then

			CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);
			pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);

			for r_C02_w in C02(nr_id_transacao_p) loop

				ds_observacao_w	:= '';

				--Prestador de atendimento
				if (r_C01_w.ie_tipo_prestador = 'A') then
					if (dados_regra_p.ie_evento <> 'IMP') then
						nr_seq_prestador_val_w	:= r_C02_w.nr_seq_prestador_prot;
					else
						nr_seq_prestador_val_w	:= r_C02_w.nr_seq_prestador_imp_prot;
					end if;
				--Prestador executor
				elsif (r_C01_w.ie_tipo_prestador = 'E') then
					if (dados_regra_p.ie_evento <> 'IMP') then
						nr_seq_prestador_val_w	:= r_C02_w.nr_seq_prestador_exec;
					else
						nr_seq_prestador_val_w	:= r_C02_w.nr_seq_prestador_exec_imp;
					end if;
				--Prestador solicitante
				elsif (r_C01_w.ie_tipo_prestador = 'S') then
					nr_seq_prestador_val_w	:= r_C02_w.nr_seq_prestador_solic;
				end if;

				--Verifica o médico conforme o tipo de evento da validação
				if (dados_regra_p.ie_evento <> 'IMP') then
					cd_medico_validacao_w	:= r_C02_w.cd_medico_executor;
				else
					cd_medico_validacao_w	:= r_C02_w.cd_medico_executor_imp;
				end if;

				if (nr_seq_prestador_val_w IS NOT NULL AND nr_seq_prestador_val_w::text <> '') and (cd_medico_validacao_w IS NOT NULL AND cd_medico_validacao_w::text <> '') then
					select	coalesce(ie_consistir_cooperados,'N'),
						cd_pessoa_fisica
					into STRICT	ie_consistir_cooperados_w,
						cd_pessoa_fisica_prest_w
					from	pls_prestador a
					where	nr_sequencia	= nr_seq_prestador_val_w;

					if (ie_consistir_cooperados_w <> 'N') then
						/* Executante deve estar vinculado ao prestador caso seja cooperado */

						if (ie_consistir_cooperados_w = 'C') then
							ie_cooperado_w	:= pls_obter_se_cooperado_ativo(cd_medico_validacao_w,r_C02_w.dt_atendimento,null);

							if (ie_cooperado_w = 'S') and (obter_se_medico_vinc_prest(nr_seq_prestador_val_w,cd_medico_validacao_w,r_C02_w.dt_atendimento) = 'N') then
								ds_observacao_w	:= 'Médico cooperado ' || substr(obter_nome_pf(cd_medico_validacao_w),1,255) || ' não está vinculado ao prestador ' || substr(pls_obter_dados_prestador(nr_seq_prestador_val_w,'N'),1,255);
							end if;

						/* Executante deve ser cooperado e estar vinculado ao prestador */

						elsif (ie_consistir_cooperados_w = 'CV') then
							ie_cooperado_w	:= pls_obter_se_cooperado_ativo(cd_medico_validacao_w,r_C02_w.dt_atendimento,null);

							if (ie_cooperado_w = 'N') then
								ds_observacao_w	:= 'Médico ' || substr(obter_nome_pf(cd_medico_validacao_w),1,255) ||' não é cooperado';
							else
								if (obter_se_medico_vinc_prest(nr_seq_prestador_val_w,cd_medico_validacao_w,r_C02_w.dt_atendimento) = 'N') then
									ds_observacao_w	:= 'Médico cooperado ' || substr(obter_nome_pf(cd_medico_validacao_w),1,255) ||  ' não está vinculado ao prestador ' || substr(pls_obter_dados_prestador(nr_seq_prestador_val_w,'N'),1,255);
								end if;
							end if;
						/* Executante deve ser cooperado e estar vinculado ao prestador  ou ser anestesista*/

						elsif (ie_consistir_cooperados_w = 'CA') then

							ie_cooperado_w	:= pls_obter_se_cooperado_ativo(cd_medico_validacao_w,r_C02_w.dt_atendimento,null);

							if (ie_cooperado_w = 'S') then
								if (obter_se_medico_vinc_prest(nr_seq_prestador_val_w,cd_medico_validacao_w,r_C02_w.dt_atendimento) = 'N') then
									ie_anestesista_w	:= 'N';
									if (r_C02_w.nr_seq_grau_partic IS NOT NULL AND r_C02_w.nr_seq_grau_partic::text <> '') then
										select	coalesce(ie_anestesista,'N')
										into STRICT	ie_anestesista_w
										from	pls_grau_participacao
										where	nr_sequencia	= r_C02_w.nr_seq_grau_partic;
									end if;

									if (ie_anestesista_w = 'N') then
										ds_observacao_w	:= 'Médico cooperado ' || substr(obter_nome_pf(cd_medico_validacao_w),1,255) || ' não está vinculado ao prestador ' || substr(pls_obter_dados_prestador(nr_seq_prestador_val_w,'N'),1,255) ||' ou não é anestesista';
									end if;
								end if;
							else
								ds_observacao_w	:= 'Médico ' || substr(obter_nome_pf(cd_medico_validacao_w),1,255) || ' não é cooperado';
							end if;
						/* Executante deve estar vinculado ao prestador*/

						elsif (ie_consistir_cooperados_w = 'V') then
							if (obter_se_medico_vinc_prest(nr_seq_prestador_val_w,cd_medico_validacao_w,r_C02_w.dt_atendimento) = 'N') then
								ds_observacao_w	:= 'Médico ' || substr(obter_nome_pf(cd_medico_validacao_w),1,255) ||' não está vinculado ao prestador ' || substr(pls_obter_dados_prestador(nr_seq_prestador_val_w,'N'),1,255);
							end if;
						/*Executante deve ser o mesmo do prestador pessoa física executor*/

						elsif (ie_consistir_cooperados_w	= 'PF') then
							if (cd_pessoa_fisica_prest_w <> cd_medico_validacao_w) then
								ds_observacao_w	:= 'Prestador ' || substr(pls_obter_dados_prestador(nr_seq_prestador_val_w,'N'),1,255) ||' não é a mesma pessoa física que o médico ' || substr(obter_nome_pf(cd_medico_validacao_w),1,255);
							end if;
						end if;

						/*Caso tiver observação lança a ocorrência*/

						if (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '') then
							dados_tb_selecao_w.ie_valido(nr_idx_w)		:= 'S';
							dados_tb_selecao_w.nr_seq_selecao(nr_idx_w)	:= r_C02_w.nr_seq_selecao;
							dados_tb_selecao_w.ds_observacao(nr_idx_w)	:= ds_observacao_w;

							if (nr_idx_w = pls_util_cta_pck.qt_registro_transacao_w) then
								CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_selecao_w.nr_seq_selecao, pls_util_cta_pck.clob_table_vazia_w,
														'SEQ', dados_tb_selecao_w.ds_observacao, dados_tb_selecao_w.ie_valido, nm_usuario_p);
								nr_idx_w := 0;
								pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_selecao_w);
							else
								nr_idx_w := nr_idx_w + 1;
							end if;
						end if;
					end if;
				end if;
			end loop;

			/*Lança as glosas caso existir registros que não foram gerados*/

			if (nr_idx_w > 0)	then
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_selecao_w.nr_seq_selecao, pls_util_cta_pck.clob_table_vazia_w,
										'SEQ', dados_tb_selecao_w.ds_observacao, dados_tb_selecao_w.ie_valido, nm_usuario_p);
			end if;

			CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
		end if;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_91 (( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) is  dados_tb_sel_w pls_tipos_ocor_pck.dados_table_selecao_ocor) FROM PUBLIC;

