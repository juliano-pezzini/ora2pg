-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proc_conta_excedente ( nr_interno_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE



vl_conta_atual_w 						double precision;
vl_excedente_w							double precision;
vl_conta_excedente_w					double precision;
vl_max_conta_w							CONTA_PACIENTE_EXCEDENTE.vl_max_conta%type;
cd_procedimento_w    					CONTA_PACIENTE_EXCEDENTE.cd_procedimento%type;
ie_origem_proced_w   					CONTA_PACIENTE_EXCEDENTE.ie_origem_proced%type;
vl_original_w							CONTA_PACIENTE_EXCEDENTE.vl_conta_origem%type;
nr_atendimento_w						CONTA_PACIENTE.nr_atendimento%type;
cd_convenio_w							CONTA_PACIENTE.cd_convenio_parametro%type;
cd_convenio_ww							CONTA_PACIENTE.cd_convenio_parametro%type;
dt_procedimento_w						PROCEDIMENTO_PACIENTE.dt_procedimento%type;
ds_observacao_exp_w						PROCEDIMENTO_PACIENTE.ds_observacao%type;
cd_setor_atendimento_w					PROCEDIMENTO_PACIENTE.cd_setor_atendimento%type;
cd_categoria_w							PROCEDIMENTO_PACIENTE.cd_categoria%type;
nr_sequencia_proc_w						PROCEDIMENTO_PACIENTE.nr_sequencia%type;
dt_entrada_unidade_w					timestamp;
dt_taxa_w 								timestamp;
ie_tipo_guia_w  						PROCEDIMENTO_PACIENTE.ie_tipo_guia%type;
cd_senha_w								PROCEDIMENTO_PACIENTE.cd_senha%type;
nr_seq_atepacu_atual_w 					PROCEDIMENTO_PACIENTE.nr_seq_atepacu%type;
nr_doc_convenio_w						PROCEDIMENTO_PACIENTE.nr_doc_convenio%type;
cd_moeda_regra_w						CONTA_PACIENTE_EXCEDENTE.cd_moeda%type;
vl_cotacao_w							cotacao_moeda.vl_cotacao%type;
nr_seq_proc_w							PROCEDIMENTO_PACIENTE.nr_sequencia%type;


BEGIN

/*
Valor excedente = valor da conta antes de ratear- valor max cadastrado;
Vl atual = Valor atual da conta, após o rateio
Vl Original = Valor da conta antes do rateio
Vl max conta = Valor que é cadastrado em regra para definir qual é o valor limite que a conta deve ter em determinado convenio internacional
*/
--delete from log_cliente;
--VALOR ATUAL DA CONTA APÓS O RATEIO
vl_conta_atual_w		:= obter_valor_conta(nr_interno_conta_p,0);
dt_procedimento_w 		:= clock_timestamp();
dt_taxa_w 				:= clock_timestamp();
dt_entrada_unidade_w 	:= clock_timestamp();

begin
	select 	coalesce(vl_max_conta,0),
			cd_procedimento,
			ie_origem_proced,
			coalesce(vl_conta_origem,0),
			cd_moeda,
			coalesce(vl_cotacao,0)
	into STRICT	vl_max_conta_w, -- valor maximo que a conta deverá ter
			cd_procedimento_w,
			ie_origem_proced_w,
			vl_original_w, --valor baseado na moeda
			cd_moeda_regra_w,
			vl_cotacao_w
	from 	conta_paciente_excedente
	where  	nr_interno_conta = nr_interno_conta_p;
exception
when others then
	vl_max_conta_w := 0;
end;

--gravar_log_cliente('INICIO');
--gravar_log_cliente('Valor máximo para a conta 	= '||vl_max_conta_w);
--gravar_log_cliente('Valor atual 		  		= '||vl_conta_atual_w);
--gravar_log_cliente('Valor original 	  			= '||vl_original_w);
if (cd_moeda_regra_w > 0) and (nr_interno_conta_p > 0) then
	/*	SE NÃO EXISTE COTAÇÃO INFORMADA PARA A CONTA, ENTÃO BUSCA A COTACAO MAIS ATUAL.
		MAS É OBRIGATÓRIO TER A MOEDA INFORMADA PARA A CONTA*/
	if (coalesce(vl_cotacao_w,0) = 0) then
		vl_cotacao_w 	:= obter_valor_convertido_cotacao(nr_interno_conta_p,cd_moeda_regra_w);
	end if;

	if (vl_cotacao_w > 0) then
		vl_max_conta_w  := (vl_max_conta_w * vl_cotacao_w);--convertendo para moeda corrente
		--gravar_log_cliente('Valor cotação = '||vl_cotacao_w);
		--gravar_log_cliente('Valor máximo já convertido = '||vl_max_conta_w);
	end if;

end if;

--SE RESPEITA O LIMITE CADASTRADO, ENTAO ENCERRA POR AQUI
if ( vl_original_w <= vl_max_conta_w ) then
	--gravar_log_cliente('Valor original= '||vl_original_w||'; Valor máximo para a conta = '||vl_max_conta_w);
	--gravar_log_cliente('Não ultrapassa o valor maximo para a conta');
	goto FINAL;
end if;

if ((vl_original_w - vl_conta_atual_w)=0) then
	--gravar_log_cliente('Valor não foi alterado, original é igual ao atual = '||(vl_original_w - vl_conta_atual_w));
	--gravar_log_cliente('ABORTAR...	');
	goto FINAL;
end if;

vl_excedente_w := vl_original_w - vl_max_conta_w;
--gravar_log_cliente('Valor de diferença (Valor original('||vl_original_w||') - valor máximo('||vl_max_conta_w||') )= '||vl_excedente_w);
if (vl_excedente_w > 0) then

	--GERAR  PROCEDIMENTO NA CONTA
	vl_conta_excedente_w := (vl_conta_atual_w + vl_excedente_w);
	--gravar_log_cliente('Valor conta atual('||vl_conta_atual_w||') +  valor excedente('||vl_excedente_w||') = '||vl_conta_excedente_w);
	if (vl_conta_excedente_w > vl_original_w) then

		/*O CERTO ERA DESFAZER O PACOTE E VOLTAR AO VALOR ORIGINAL, MAS É INSERIDO
		UM PROCEDIMENTO DE EXCEDENTE COM VALOR POSITIVO OU NEGATIVO
		PRA VOLTAR AO VALOR ORIGINAL*/
		--gravar_log_cliente('Valor atual('||vl_conta_atual_w||') + valor excedente('||vl_excedente_w||') é maior que o valor original, então valor a ser cobrado é = '||vl_original_w);
		vl_excedente_w := vl_excedente_w - (vl_conta_excedente_w - vl_original_w);

		--gravar_log_cliente('Ajustando para o valor original. Valor atual('||vl_conta_atual_w||') + valor excedente recalculado('||vl_excedente_w||') = '||vl_original_w);
	else
		vl_excedente_w := vl_excedente_w;
		--gravar_log_cliente('Valor atual('||vl_conta_atual_w||') + valor excedente('||vl_excedente_w||') é menor que o valor antes do rateio, então valor a ser cobrado é = '||vl_conta_excedente_w);
	end if;

	if (vl_excedente_w < 0) then
		CALL gerar_desconto_excedente_conta(nr_interno_conta_p,nm_usuario_p, vl_excedente_w,vl_conta_atual_w);
	else
		if (cd_procedimento_w>0) and (ie_origem_proced_w>0) and (coalesce(nr_seq_proc_w,0)=0) then
			begin
				/*VERIFICA SE EXISTE O PROCEDIMENTO DE EXCEDENTE LANÇADO NA CONTA*/

				select  coalesce(max(nr_sequencia),0)
				into STRICT	nr_seq_proc_w
				from	procedimento_paciente
				where   cd_procedimento  = cd_procedimento_w
				and 	ie_origem_proced = ie_origem_proced_w
				and 	ie_valor_informado = 'S'
				and 	nr_interno_conta = nr_interno_conta_p;
			exception
			when others then
				nr_seq_proc_w := 0;
			end;
		end if;
		/*SE JÁ EXISTE PROCEDIMENTO, ENTAO ATUALIZA ESTE REGISTRO*/

		if (coalesce(nr_seq_proc_w,0)>0) then

			--gravar_log_cliente('Atualizando o procedimento excedente na conta -> nr_seq_proc = '||nr_seq_proc_w);
			--gravar_log_cliente('Conta = '||nr_interno_conta_p);
			update procedimento_paciente
			set    vl_procedimento 	= vl_excedente_w
			where  nr_sequencia 	= nr_seq_proc_w;
		else
			/*ROTINAS PRA INSERIR O PROCEDIMENTO*/

			--gravar_log_cliente('Valor do procedimento a ser inserido = '||vl_excedente_w);
			--gravar_log_cliente('Conta = '||nr_interno_conta_p);
			begin
				select 	nr_atendimento,
						cd_convenio_parametro
				into STRICT	nr_atendimento_w,
						cd_convenio_w
				from   	conta_paciente
				where  	nr_interno_conta = nr_interno_conta_p;
			exception
			when others then
				nr_atendimento_w := null;
			end;

			--gravar_log_cliente('Convênio = '||cd_convenio_w);
			begin
				cd_setor_atendimento_w 	:= Obter_Setor_Atendimento(nr_atendimento_w);
				nr_seq_atepacu_atual_w	:= Obter_Atepacu_paciente(nr_atendimento_w, 'A');
			exception
			when others then
				cd_setor_atendimento_w 	:= 0;
				nr_seq_atepacu_atual_w 	:= 0;
			end;

			--729203 = Gerado pela regra de Valor excedente
			ds_observacao_exp_w := obter_desc_expressao(729203);

			--obter o convenio
			SELECT * FROM obter_convenio_execucao(nr_atendimento_w, trunc(clock_timestamp(),'hh'), cd_convenio_ww, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w ) INTO STRICT cd_convenio_ww, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w;

			insert into procedimento_paciente(
							nr_sequencia,				nr_atendimento,			dt_entrada_unidade,			cd_procedimento,		dt_procedimento,
							cd_convenio,				cd_categoria,			nr_doc_convenio,			ie_tipo_guia,			cd_senha,
							ie_auditoria,				ie_emite_conta,			cd_cgc_prestador,			ie_origem_proced,		nr_seq_exame,
							nr_seq_proc_interno,		qt_procedimento,		cd_setor_atendimento,		nr_seq_atepacu,			nr_seq_cor_exec,
							ie_funcao_medico,			vl_procedimento,		ie_proc_princ_atend,		ie_video,				tx_medico,
							tx_anestesia,				tx_procedimento,		ie_valor_informado,			ie_guia_informada,		cd_situacao_glosa,
							nm_usuario_original,		ds_observacao,			dt_atualizacao,				nm_usuario,				cd_pessoa_fisica,
							cd_medico_executor,			cd_especialidade,		ie_via_acesso,				nr_interno_conta)
					values (
							nextval('conta_paciente_seq'), nr_atendimento_w,		dt_entrada_unidade_w,		cd_procedimento_w,		dt_taxa_w,
							cd_convenio_w,				cd_categoria_w,			nr_doc_convenio_w,			ie_tipo_guia_w,			cd_senha_w,
							'N',						null,					null,						ie_origem_proced_w,		null,
							null,						1,						cd_setor_atendimento_w,		nr_seq_atepacu_atual_w,	null,
							null,						vl_excedente_w,			'N',						'N',					100,
							100,						100,					'S',						'N',					0,
							nm_usuario_p,				ds_observacao_exp_w,	clock_timestamp(),					nm_usuario_p,			null,
							null,						Null,					null,				 		nr_interno_conta_p);
		end if;
	end if;
end if;

--gravar_log_cliente('	RESUMO');
--gravar_log_cliente('	Valor anterior ao rateio(valor original) = '||vl_original_w);
--gravar_log_cliente('	Valor depois do rateio(valor atual)   = '||vl_conta_atual_w);
--gravar_log_cliente('	Valor máximo para conta  = '||vl_max_conta_w);
--gravar_log_cliente('	Valor excedente (valor original - valor maximo conta)	 = '||(vl_original_w - vl_max_conta_w));
<<FINAL>>
vl_max_conta_w := vl_max_conta_w;

--gravar_log_cliente('FIM');
if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proc_conta_excedente ( nr_interno_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

