-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE copiar_dieta_anterior (nr_sequencia_p bigint, nm_usuario_p text, qt_horas_p bigint, cd_estabelecimento_p bigint default null) AS $body$
DECLARE


cd_pessoa_fisica_w			varchar(10);
dt_dieta_ref_w			timestamp;
dt_dieta_w			timestamp;
cd_refeicao_w			varchar(02);
cd_refeicao_ref_w		varchar(02);
ie_destino_dieta_w		varchar(02);
cd_setor_atendimento_w		integer;
cd_unidade_basica_w		varchar(10);
cd_unidade_compl_w		varchar(10);
cd_dieta_w			bigint;
cd_dieta_atual_w		bigint	:= '';
ds_observacao_w			varchar(2000);
nr_sequencia_w			bigint;
nr_seq_mapa_w			bigint;
nr_atendimento_w		bigint;
ds_tipo_dieta_w			varchar(10);
nr_posicao_dieta_w		smallint;
ie_continua_w			varchar(01);
ie_sai_loop_w			varchar(01);
ie_copiou_w			varchar(01);
cont_w				smallint;
ds_observacao_tec_w		varchar(2000);
vl_parametro_w			varchar(3);
nr_seq_superior_w		bigint;
qt_dieta_atend_w		bigint;
nr_seq_superior_dieta_w		bigint;
ie_tipo_copia_w			varchar(01);
total_w				bigint;
ds_anotacao_w			varchar(2000);
ie_tipo_dieta_w			varchar(1);
ie_existe_reg_data_w		varchar(1);
ie_gerar_dados_ant_w		varchar(1);
nr_seq_disp_succao_w		bigint;
ie_recem_nato_w			varchar(1);
qt_gerado_mapa_w		smallint;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;

/*Parâmetros*/

var_copiar_anotacoes_w		varchar(1);

C010 CURSOR FOR
SELECT 	a.cd_dieta,
	a.ie_destino_dieta,
	a.ds_observacao,
	a.ds_observacao_tec,
	a.nr_seq_superior,
	a.ie_tipo_dieta,
	a.ds_anotacao,
	a.nr_seq_disp_succao,
	a.ie_recem_nato
from 	mapa_Dieta a
where 	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
and 	a.cd_refeicao		= cd_refeicao_ref_w
and 	(a.cd_dieta IS NOT NULL AND a.cd_dieta::text <> '')
and	a.dt_dieta		= dt_dieta_ref_w
and	a.nr_sequencia		<> nr_sequencia_p
and	a.ie_destino_dieta	= ie_destino_dieta_w
and	((a.nr_atendimento = nr_atendimento_w) or (ie_gerar_dados_ant_w = 'S')
or 	exists (select	1
		from	mapa_dieta x
		where	x.nr_sequencia = a.nr_seq_superior
		and	x.nr_atendimento = nr_atendimento_w))
group	by a.cd_dieta,
	a.ie_destino_dieta,
	a.ds_observacao,
	a.ds_observacao_tec,
	a.nr_seq_superior,
	a.ie_tipo_dieta,
	a.ds_anotacao,
	a.nr_seq_disp_succao,
	a.ie_recem_nato,
	a.dt_atualizacao
order by coalesce(a.nr_seq_superior,0) asc, dt_atualizacao desc;

BEGIN
select	coalesce(obter_valor_param_usuario(1000, 8, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w),'N')
into STRICT	vl_parametro_w
;


select	coalesce(obter_valor_param_usuario(1000, 2, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w),'N')
into STRICT	ie_tipo_copia_w
;

cd_estabelecimento_w := coalesce(cd_estabelecimento_p, wheb_usuario_pck.get_cd_estabelecimento);

var_copiar_anotacoes_w	:= coalesce(Obter_Valor_Param_Usuario(1000, 92, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w),'S');
ie_gerar_dados_ant_w	:= coalesce(Obter_Valor_Param_Usuario(1000, 27, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w),'S');

/*Diária, Ceia, Jantar, Lanche Tarde, Almoço, Lanche Manhã, Desjejum */

select	cd_pessoa_fisica,
		cd_refeicao,
		dt_dieta,
		cd_setor_atendimento,
		cd_unidade_basica,
		cd_unidade_compl,
		nr_atendimento,
		nr_seq_superior,
		ds_anotacao,
		ie_tipo_dieta,
		ie_destino_dieta
into STRICT		cd_pessoa_fisica_w,
		cd_refeicao_w,
		dt_dieta_w,
		cd_setor_atendimento_w,
		cd_unidade_basica_w,
		cd_unidade_compl_w,
		nr_atendimento_w,
		nr_seq_superior_w,
		ds_anotacao_w,
		ie_tipo_dieta_w,
		ie_destino_dieta_w
from 		mapa_dieta
where 	nr_sequencia	= nr_sequencia_p;

ds_tipo_dieta_w		:= 'XRCJTABLMD';
total_w			:= 9;

ie_continua_w		:= 'N';
ie_sai_loop_w		:= 'N';
dt_dieta_ref_w		:= dt_dieta_w;
ie_copiou_w		:= 'N';
cont_w			:= 1;


begin

select	'S'
into STRICT	ie_existe_reg_data_w
from	mapa_dieta a
where	coalesce(a.nr_Seq_superior::text, '') = ''
and	a.dt_dieta = dt_dieta_w
and	a.nr_sequencia <> nr_sequencia_p
and	a.cd_pessoa_fisica = cd_pessoa_fisica_w
and	a.ie_destino_dieta = ie_destino_dieta_w
and	substr(ds_tipo_dieta_w,position(cd_refeicao_w in ds_tipo_dieta_w),length(ds_tipo_dieta_w)) like('%'||a.cd_refeicao||'%')  LIMIT 1;
exception
when others then
	ie_existe_reg_data_w	:= 'N';
end;

if (ie_existe_reg_data_w <> 'S') then
	cd_refeicao_ref_w	:= 'X';
	ie_continua_w		:= 'S';

	select	max(a.dt_dieta)
	into STRICT	dt_dieta_ref_w
	from	mapa_dieta a
	where	coalesce(a.nr_seq_superior::text, '') = ''
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_w
	and	a.nr_sequencia <> nr_sequencia_p
	and	a.dt_dieta < dt_dieta_w
	and	a.ie_destino_dieta = ie_destino_dieta_w
	and	(a.cd_dieta IS NOT NULL AND a.cd_dieta::text <> '');
end if;



while(ie_copiou_w <> 'S') and (cont_w <= total_w) and (dt_dieta_ref_w IS NOT NULL AND dt_dieta_ref_w::text <> '')
loop
	for i in 1..length(ds_tipo_dieta_w)
	loop
		begin

		if (substr(ds_tipo_dieta_w,i,1) = cd_refeicao_w) then
			ie_continua_w	:= 'S';
		end if;

		if (ie_continua_w = 'S') then
			begin

			cd_refeicao_ref_w	:= substr(ds_tipo_dieta_w,i + 1,1);

			if (cd_refeicao_w = 'X') then                   --Edilson em 25/02/2004 OS 6394
				cd_refeicao_ref_w	:= 'X';
				--dt_dieta_ref_w		:= dt_dieta_ref_w - 1;
			elsif (cd_refeicao_w = 'R') then
				cd_refeicao_ref_w	:= 'R';
			end if;

			cd_dieta_atual_w	:= null;

			OPEN C010;
			LOOP
			FETCH C010 INTO
					cd_dieta_w,
					ie_destino_dieta_w,
					ds_observacao_w,
					ds_observacao_tec_w,
					nr_seq_superior_dieta_w,
					ie_tipo_dieta_w,
					ds_anotacao_w,
					nr_seq_disp_succao_w,
					ie_recem_nato_w;
			EXIT WHEN NOT FOUND; /* apply on c010 */
				begin
				ie_sai_loop_w		:= 'S';
				ie_copiou_w		:= 'S';

				if (vl_parametro_w = 'S') or (vl_parametro_w = 'PU') then
					ds_observacao_tec_w	:= null;
				end if;

				if (coalesce(cd_dieta_atual_w::text, '') = '') then
					begin

					select	count(*)
					into STRICT	qt_dieta_atend_w
					from	mapa_dieta
					where	nr_atendimento	= nr_atendimento_w
					and	nr_sequencia	<>  nr_sequencia_p;

					if (qt_dieta_atend_w	= 0) and (ie_gerar_dados_ant_w = 'S') then
						select	max(ds_observacao)
						into STRICT	ds_observacao_w
						from	mapa_dieta a
						where	cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	(ds_observacao IS NOT NULL AND ds_observacao::text <> '')
						and	nr_atendimento		<> nr_atendimento_w
						and	a.ie_destino_dieta 	= ie_destino_dieta_w
						and	nr_sequencia	=
							(SELECT	max(nr_sequencia)
							from	mapa_dieta x
							where	x.nr_atendimento	= a.nr_atendimento
							and 	(x.ds_observacao IS NOT NULL AND x.ds_observacao::text <> ''));
					end if;

					if (var_copiar_anotacoes_w = 'S') then
						update 	mapa_dieta
						set 	ds_anotacao	= ds_anotacao_w
						where	nr_sequencia	= nr_sequencia_p
						and	coalesce(dt_liberacao::text, '') = '';
					end if;

					update mapa_dieta
					set 	cd_dieta	= cd_dieta_w,
						ds_observacao	= ds_observacao_w,
						ds_observacao_tec	= ds_observacao_tec_w,
						--nr_seq_superior = decode(nr_seq_superior_dieta_w,null,null,nr_sequencia_p),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp(),
						ie_tipo_dieta	= ie_tipo_dieta_w,
						nr_seq_disp_succao = nr_seq_disp_succao_w,
						ie_recem_nato	= ie_recem_nato_w
					where	nr_sequencia	= nr_sequencia_p
					and	coalesce(dt_liberacao::text, '') = '';

					cd_dieta_atual_w	:= cd_dieta_w;

					commit;
					end;
				else
					if (ie_tipo_copia_w <> 'R') then

						begin
						qt_gerado_mapa_w := 0;
						if (coalesce(nr_seq_superior_dieta_w::text, '') = '') then

							select	count(*)
							into STRICT	qt_gerado_mapa_w
							from 	mapa_dieta a
							where 	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
							and 	a.cd_refeicao		= cd_refeicao_w
							and	a.dt_dieta		= dt_dieta_w
							and	coalesce(a.nr_seq_superior::text, '') = ''
							and	a.ie_destino_dieta	= ie_destino_dieta_w
							and	a.nr_atendimento	= nr_atendimento_w
							and	a.cd_setor_atendimento	= cd_setor_atendimento_w;

						else
							select	count(*)
							into STRICT	qt_gerado_mapa_w
							from 	mapa_dieta a
							where 	a.cd_dieta			= cd_dieta_w
							and	a.nr_seq_superior		= nr_sequencia_p
							and	coalesce(a.ds_observacao,' ')	= coalesce(ds_observacao_w,' ')
							and	coalesce(a.ds_observacao_tec,' ')	= coalesce(ds_observacao_tec_w,' ');

						end if;

						if (qt_gerado_mapa_w = 0) then

							select nextval('mapa_dieta_seq')
							into STRICT nr_sequencia_w
							;

							Insert into Mapa_Dieta(
								CD_PESSOA_FISICA,
								NR_SEQUENCIA,
								DT_DIETA,
								CD_REFEICAO,
								DT_ATUALIZACAO,
								NM_USUARIO,
								CD_SETOR_ATENDIMENTO,
								CD_UNIDADE_BASICA,
								CD_UNIDADE_COMPL,
								IE_DESTINO_DIETA,
								CD_DIETA,
								nr_atendimento,
								ds_observacao,
								IE_STATUS,
								ds_observacao_tec,
								nm_usuario_nrec,
								dt_atualizacao_nrec,
								nr_seq_superior,
								ds_anotacao,
								ie_tipo_dieta,
								nr_seq_disp_succao,
								ie_recem_nato)
							values (
								CD_PESSOA_FISICA_W,
								NR_SEQUENCIA_W,
								DT_DIETA_W,
								CD_REFEICAO_W,
								clock_timestamp(),
								NM_USUARIO_P,
								CD_SETOR_ATENDIMENTO_W,
								CD_UNIDADE_BASICA_W,
								CD_UNIDADE_COMPL_W,
								ie_destino_dieta_w,
								cd_dieta_w,
								nr_atendimento_w,
								ds_observacao_w,
								'A',
								ds_observacao_tec_w,
								nm_usuario_p,
								clock_timestamp(),
								--nr_seq_superior_w);
								CASE WHEN coalesce(nr_seq_superior_dieta_w::text, '') = '' THEN null  ELSE nr_sequencia_p END ,
								ds_anotacao_w,
								ie_tipo_dieta_w,
								nr_seq_disp_succao_w,
								ie_recem_nato_w);
							commit;
						end if;
						end;
					end if;
				end if;
				end;
			END LOOP;
			CLOSE C010;

			if (ie_sai_loop_w	= 'S') then
				exit;
			end if;
			end;
		end if;
		if (cd_refeicao_ref_w = 'D') then
			dt_dieta_ref_w		:= dt_dieta_ref_w - 1;
		end if;
		end;
	end loop;
	dt_dieta_ref_w		:= dt_dieta_ref_w - 1;
	cont_w := cont_w + 1;
end loop;


if (var_copiar_anotacoes_w = 'C') then

	select 	max(nr_sequencia)
	into STRICT	nr_seq_mapa_w
	from 	mapa_dieta
	where 	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and 	cd_refeicao		= cd_refeicao_w
	and 	(cd_dieta IS NOT NULL AND cd_dieta::text <> '')
	and	dt_dieta		< dt_dieta_w
	and	nr_sequencia		<> nr_sequencia_p
	and	ie_destino_dieta	= ie_destino_dieta_w
	and	coalesce(nr_seq_superior::text, '') = ''
	and	((nr_atendimento = nr_atendimento_w) or (ie_gerar_dados_ant_w = 'S'));

	if (nr_seq_mapa_w IS NOT NULL AND nr_seq_mapa_w::text <> '') then

		select	ds_anotacao
		into STRICT	ds_anotacao_w
		from	mapa_dieta
		where	nr_sequencia = nr_seq_mapa_w;

		update 	mapa_dieta
		set 	ds_anotacao	= ds_anotacao_w
		where	nr_sequencia	= nr_sequencia_p
		and	coalesce(dt_liberacao::text, '') = '';
	end if;
end if;

if (ie_tipo_copia_w = 'R') then
	CALL Copiar_Dieta_Out_Dieta_Ant(nr_sequencia_p,	nm_usuario_p,qt_horas_p);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE copiar_dieta_anterior (nr_sequencia_p bigint, nm_usuario_p text, qt_horas_p bigint, cd_estabelecimento_p bigint default null) FROM PUBLIC;

