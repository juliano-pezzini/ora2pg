-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_ato_cooperado ( nr_seq_protocolo_p bigint, dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type default null, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type default null, ie_tipo_item_p text default null, ie_lote_contabil_p text default 'T', ds_erro_p INOUT text DEFAULT NULL) AS $body$
DECLARE

				
/*
ie_lote_contabil_p
PT-BR
T - Todos
C - Contas Medicas (Producao Local)
R - Reembolso
I -  Intercambio

EN-US
T - ALl
C - Medical Account (Local production)
R - Reimbursemtn
I - Exchange

*/
-- Variables for cursor 1
ie_proc_mat_w			varchar(1);
nr_seq_item_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_material_w		bigint;
nr_seq_conta_w			bigint;
dt_material_w			timestamp;
dt_conta_w			timestamp;
dt_protocolo_w			timestamp;
nr_seq_prestador_atend_w	bigint;
nr_seq_prestador_pgto_w		pls_conta_proc.nr_seq_prestador_pgto%type;
ie_tipo_desp_proc_w		pls_conta_proc.ie_tipo_despesa%type;
ie_tipo_desp_mat_w		pls_conta_mat.ie_tipo_despesa%type;

nr_seq_prestador_exec_w		bigint;
cd_estabelecimento_w		integer;
nr_seq_prestador_solic_w	bigint;
dt_preco_w			timestamp := clock_timestamp();
cd_solic_w			varchar(20);
cd_medico_solicitante_w		varchar(20);
cd_guia_w			varchar(20);
nr_seq_segurado_w		bigint;
ie_medico_solic_coope_w		varchar(10);
ie_medico_exec_coope_w		varchar(10);
cd_medico_conta_w		varchar(20);
nr_seq_regra_cooperado_w	bigint;
ie_ato_cooperado_w		bigint;
ie_tipo_protocolo_w		varchar(3);
ds_tipo_lote_contabil_w		varchar(40);
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
ie_regra_data_preco_mat_w	pls_prestador.ie_regra_data_preco_mat%type;
nr_seq_conta_resumo_w		pls_conta_medica_resumo.nr_sequencia%type;
dt_referencia_w			pls_protocolo_conta.dt_mes_competencia%type;

i				integer;
qt_reg_transacao_w		integer;
ie_ato_cooperado_table_w	dbms_sql.varchar2_table;
nr_seq_regra_coop_table_w	dbms_sql.number_table;	
nr_seq_conta_res_table_w	dbms_sql.number_table;
nr_seq_conta_table_w		dbms_sql.number_table;
dt_ref_inicial_w		timestamp;
dt_ref_final_w			timestamp;
qt_esquema_pagamento_w		bigint;
qt_registros_w			bigint	:= 0;
ie_materiais_w			varchar(1); -- Used when the procedure is applied only in one item, and it's a material
ie_procedimentos_w		varchar(1); -- Used when the procedure is applied only in one item, and it's a procedure
C01 CURSOR FOR
	SELECT	'P' ie_proc_mat,
		a.nr_sequencia nr_seq_item,
		a.cd_procedimento,
		a.ie_origem_proced,
		null nr_seq_material,
		b.nr_sequencia nr_seq_conta,
		a.dt_procedimento_referencia dt_material,
		coalesce(b.dt_emissao, coalesce(b.dt_autorizacao, coalesce(b.dt_entrada, clock_timestamp()))) dt_conta,
		c.dt_mes_competencia dt_protocolo,
		c.nr_seq_prestador nr_seq_prestador_atend,
		coalesce(c.ie_tipo_protocolo,'C') ie_tipo_protocolo,
		a.ie_tipo_despesa ie_tipo_desp_proc,
		null ie_tipo_desp_mat,
		b.nr_seq_prestador_exec,
		b.cd_estabelecimento,
		b.cd_medico_solicitante,
		coalesce(b.cd_guia,0) cd_guia,
		b.nr_seq_segurado,
		b.cd_medico_executor cd_medico_conta,
		b.ie_tipo_guia,
		coalesce(d.ie_regra_data_preco_mat,'E') ie_regra_data_preco_mat
	FROM pls_protocolo_conta c, pls_conta_proc a, pls_conta b
LEFT OUTER JOIN pls_prestador d ON (b.nr_seq_prestador_exec = d.nr_sequencia)
WHERE a.nr_seq_conta		= b.nr_sequencia and b.nr_seq_protocolo	= c.nr_sequencia  and ((c.nr_sequencia	= nr_seq_protocolo_p) or (coalesce(nr_seq_protocolo_p,0) = 0)) and (c.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w) and (coalesce(nr_seq_conta_proc_p::text, '') = '' or nr_seq_conta_proc_p = a.nr_sequencia) and ie_procedimentos_w = 'S'
	
union all

	SELECT	'M' ie_proc_mat,
		a.nr_sequencia nr_seq_item,
		null cd_procedimento,
		null ie_origem_proced,
		a.nr_seq_material,
		b.nr_sequencia nr_seq_conta,
		a.dt_atendimento_referencia dt_material,
		coalesce(b.dt_emissao, coalesce(b.dt_autorizacao, coalesce(b.dt_entrada, clock_timestamp()))) dt_conta,
		c.dt_mes_competencia dt_protocolo,
		c.nr_seq_prestador nr_seq_prestador_atend,
		coalesce(c.ie_tipo_protocolo,'C') ie_tipo_protocolo,
		null ie_tipo_desp_proc,
		a.ie_tipo_despesa ie_tipo_desp_mat,
		b.nr_seq_prestador_exec,
		b.cd_estabelecimento,
		b.cd_medico_solicitante,
		coalesce(b.cd_guia,0) cd_guia,
		b.nr_seq_segurado,
		b.cd_medico_executor cd_medico_conta,
		b.ie_tipo_guia,
		coalesce(d.ie_regra_data_preco_mat,'E') ie_regra_data_preco_mat
	FROM pls_protocolo_conta c, pls_conta_mat a, pls_conta b
LEFT OUTER JOIN pls_prestador d ON (b.nr_seq_prestador_exec = d.nr_sequencia)
WHERE a.nr_seq_conta		= b.nr_sequencia and b.nr_seq_protocolo	= c.nr_sequencia  and ((c.nr_sequencia	= nr_seq_protocolo_p) or (coalesce(nr_seq_protocolo_p,0) = 0)) and (c.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w) and (coalesce(nr_seq_conta_mat_p::text, '') = '' or nr_seq_conta_mat_p = a.nr_sequencia) and ie_materiais_w = 'S'
	 
union all

	select	'P' ie_proc_mat,
		a.nr_sequencia nr_seq_item,
		a.cd_procedimento,
		a.ie_origem_proced,
		null nr_seq_material,
		b.nr_sequencia nr_seq_conta,
		a.dt_procedimento_referencia dt_material,
		coalesce(b.dt_emissao, coalesce(b.dt_autorizacao, coalesce(b.dt_entrada, clock_timestamp()))) dt_conta,
		c.dt_mes_competencia dt_protocolo,
		c.nr_seq_prestador nr_seq_prestador_atend,
		coalesce(c.ie_tipo_protocolo,'C') ie_tipo_protocolo,
		a.ie_tipo_despesa ie_tipo_desp_proc,
		null ie_tipo_desp_mat,
		b.nr_seq_prestador_exec,
		b.cd_estabelecimento,
		b.cd_medico_solicitante,
		coalesce(b.cd_guia,0) cd_guia,
		b.nr_seq_segurado,
		b.cd_medico_executor cd_medico_conta,
		b.ie_tipo_guia,
		coalesce(f.ie_regra_data_preco_mat,'E') ie_regra_data_preco_mat
	FROM pls_lote_pagamento e, pls_conta_medica_resumo d, pls_protocolo_conta c, pls_conta_proc a, pls_conta b
LEFT OUTER JOIN pls_prestador f ON (b.nr_seq_prestador_exec = f.nr_sequencia)
WHERE a.nr_seq_conta		= b.nr_sequencia and b.nr_seq_protocolo	= c.nr_sequencia and a.nr_sequencia		= d.nr_seq_conta_proc and b.nr_sequencia		= d.nr_seq_conta and e.nr_sequencia		= d.nr_seq_lote_pgto  and ((c.nr_sequencia	= nr_seq_protocolo_p) or (coalesce(nr_seq_protocolo_p,0) = 0)) and e.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w and (coalesce(nr_seq_conta_proc_p::text, '') = '' or nr_seq_conta_proc_p = a.nr_sequencia) and ie_procedimentos_w = 'S'
	 
union all
 
	select	'M' ie_proc_mat,
		a.nr_sequencia nr_seq_item,
		null cd_procedimento,
		null ie_origem_proced,
		a.nr_seq_material,
		b.nr_sequencia nr_seq_conta,
		a.dt_atendimento_referencia dt_material,
		coalesce(b.dt_emissao, coalesce(b.dt_autorizacao, coalesce(b.dt_entrada, clock_timestamp()))) dt_conta,
		c.dt_mes_competencia dt_protocolo,
		c.nr_seq_prestador nr_seq_prestador_atend,
		coalesce(c.ie_tipo_protocolo,'C') ie_tipo_protocolo,
		null ie_tipo_desp_proc,
		a.ie_tipo_despesa ie_tipo_desp_mat,
		b.nr_seq_prestador_exec,
		b.cd_estabelecimento,
		b.cd_medico_solicitante,
		coalesce(b.cd_guia,0) cd_guia,
		b.nr_seq_segurado,
		b.cd_medico_executor cd_medico_conta,
		b.ie_tipo_guia,
		coalesce(f.ie_regra_data_preco_mat,'E') ie_regra_data_preco_mat
	FROM pls_lote_pagamento e, pls_conta_medica_resumo d, pls_protocolo_conta c, pls_conta_mat a, pls_conta b
LEFT OUTER JOIN pls_prestador f ON (b.nr_seq_prestador_exec = f.nr_sequencia)
WHERE a.nr_seq_conta		= b.nr_sequencia and b.nr_seq_protocolo	= c.nr_sequencia and a.nr_sequencia		= d.nr_seq_conta_mat and b.nr_sequencia		= d.nr_seq_conta and e.nr_sequencia		= d.nr_seq_lote_pgto  and ((c.nr_sequencia	= nr_seq_protocolo_p) or (coalesce(nr_seq_protocolo_p,0) = 0)) and (c.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w) and (coalesce(nr_seq_conta_mat_p::text, '') = '' or nr_seq_conta_mat_p = a.nr_sequencia) and ie_materiais_w = 'S';
	
TYPE 		fetch_array IS TABLE OF C01%ROWTYPE;
s_array 	fetch_array;
w		integer := 1;
type Vetor is table of fetch_array index by integer;
vetor_w		Vetor;

C02 CURSOR FOR
	SELECT	nr_sequencia nr_seq_conta_resumo,
		nr_seq_prestador_pgto
	from	pls_conta_medica_resumo
	where	ie_situacao		= 'A'
	and	ie_tipo_item		!= 'I'
	and	nr_seq_conta_proc	= nr_seq_item_w
	and	nr_seq_conta		= nr_seq_conta_w
	and	ie_proc_mat_w		= 'P'
	
union all

	SELECT	nr_sequencia nr_seq_conta_resumo,
		nr_seq_prestador_pgto
	from	pls_conta_medica_resumo
	where	ie_situacao		= 'A'
	and	ie_tipo_item		!= 'I'
	and	nr_seq_conta_mat	= nr_seq_item_w
	and	nr_seq_conta		= nr_seq_conta_w
	and	ie_proc_mat_w		= 'M';

procedure pls_atualiza_conta_med_resumo(	ie_ato_cooperado_table_p	dbms_sql.varchar2_table,
			nr_seq_regra_coop_table_p	dbms_sql.number_table,
			nr_seq_conta_res_table_p	dbms_sql.number_table,
			nr_seq_conta_table_p		dbms_sql.number_table	) is;
BEGIN
	
if (nr_seq_conta_res_table_p.count > 0) then
	forall i in nr_seq_conta_res_table_p.first..nr_seq_conta_res_table_p.last
		update	pls_conta_medica_resumo r
		set	r.ie_ato_cooperado	= ie_ato_cooperado_table_p(i),
			r.nr_seq_regra_cooperado = nr_seq_regra_coop_table_p(i)
		where	r.nr_sequencia		= nr_seq_conta_res_table_p(i)
		and	r.nr_seq_conta		= nr_seq_conta_table_p(i)
		and	not exists (SELECT 1
				    from  pls_lote_pagamento	l
				    where l.nr_sequencia = r.nr_seq_lote_pgto
				    and	  coalesce(l.nr_lote_contabil,0) <> 0)
		and	coalesce(r.nr_lote_contabil_prov,0) = 0;
		
	commit;		
end if;

end;

procedure pls_atualiza_cta_contab_copart(	ie_ato_cooperado_table_p	dbms_sql.varchar2_table,
						nr_seq_conta_res_table_p	dbms_sql.number_table,
						nr_seq_conta_table_p		dbms_sql.number_table	) is
begin	
				
if (nr_seq_conta_res_table_p.count > 0) then
	forall i in nr_seq_conta_res_table_p.first..nr_seq_conta_res_table_p.last
		update	pls_conta_copartic_contab
		set	ie_ato_cooperado	= ie_ato_cooperado_table_p(i),
			vl_ato_cooperado	= CASE WHEN ie_ato_cooperado_table_p(i)='1' THEN vl_coparticipacao  ELSE 0 END ,
			vl_ato_auxiliar		= CASE WHEN ie_ato_cooperado_table_p(i)='2' THEN vl_coparticipacao  ELSE 0 END ,
			vl_ato_nao_cooperado	= CASE WHEN ie_ato_cooperado_table_p(i)='3' THEN vl_coparticipacao  ELSE 0 END 
		where	nr_seq_conta_resumo	= nr_seq_conta_res_table_p(i)
		and	nr_seq_conta		= nr_seq_conta_table_p(i)
		and	coalesce(nr_lote_contabil_estorno,0)	= 0
		and	coalesce(nr_lote_contabil_prov,0)	= 0;
		
	forall i in nr_seq_conta_table_p.first..nr_seq_conta_table_p.last
		update	pls_conta_coparticipacao c
		set	vl_ato_cooperado	= (SELECT sum(ctb.vl_ato_cooperado) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia),
			vl_ato_auxiliar		= (select sum(ctb.vl_ato_auxiliar) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia),
			vl_ato_nao_cooperado	= (select sum(ctb.vl_ato_nao_cooperado) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia)
		where	nr_seq_conta		= nr_seq_conta_table_p(i)
		and	coalesce(c.nr_lote_contabil_estorno,0)	= 0
		and	coalesce(c.nr_lote_contabil_prov,0)	= 0;
		
	commit;		
end if;

end;

begin

if (coalesce(ie_tipo_item_p::text, '') = '') then
	ie_materiais_w 		:= 'S';
	ie_procedimentos_w 	:= 'S';
elsif (ie_tipo_item_p = 'P')then
	ie_materiais_w		:= 'N';
	ie_procedimentos_w	:= 'S';
elsif (ie_tipo_item_p = 'M') then
	ie_materiais_w		:= 'S';
	ie_procedimentos_w 	:= 'N';
end if;



dt_referencia_w		:= trunc(dt_referencia_p,'month');
dt_ref_inicial_w	:= trunc(trunc(dt_referencia_p,'month'),'dd');
dt_ref_final_w		:= fim_dia(fim_mes(dt_ref_inicial_w));
i			:= 0;
ds_tipo_lote_contabil_w	:= '';

if (ie_lote_contabil_p = 'T') then
	select	max(b.ds_tipo_lote_contabil)
	into STRICT	ds_tipo_lote_contabil_w
	from	lote_contabil		a,
		tipo_lote_contabil	b
	where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil
	and	b.cd_tipo_lote_contabil	in (22,33,40,41,42,43) /* HPMS Expenses - Medical Accounts / OPS HPMS Expenses - Exchange Accounts / HPMS Expenses - Medical production forecast / HPMS Expenses - Medical production payment / HPMS - Co-participation Forecast / HPMS - Billing Forecast */
	and	a.dt_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');
elsif (ie_lote_contabil_p = 'C') then
	select	max(b.ds_tipo_lote_contabil)
	into STRICT	ds_tipo_lote_contabil_w
	from	lote_contabil		a,
		tipo_lote_contabil	b
	where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil
	and	b.cd_tipo_lote_contabil	in (22,40,41,42,43) /* HPMS Expenses - Medical Accounts / HPMS Expenses - Medical production forecast / HPMS Expenses - Medical production payment / HPMS - Co-participation Forecast / HPMS - Billing Forecast */
	and	a.dt_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');
elsif (ie_lote_contabil_p = 'R') then
	select	max(b.ds_tipo_lote_contabil)
	into STRICT	ds_tipo_lote_contabil_w
	from	lote_contabil		a,
		tipo_lote_contabil	b
	where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil
	and	b.cd_tipo_lote_contabil	in (23,42) /* HPMS Expenses - Refund / HPMS - Co-participation Forecast  */
	and	a.dt_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');
elsif (ie_lote_contabil_p = 'I') then
	select	max(b.ds_tipo_lote_contabil)
	into STRICT	ds_tipo_lote_contabil_w
	from	lote_contabil		a,
		tipo_lote_contabil	b
	where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil
	and	b.cd_tipo_lote_contabil	in (33,42,43) /* HPMS Expenses - Exchange Accounts / HPMS - Co-participation Forecast / HPMS - Billing Forecast */
	and	a.dt_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');
end if;

select	count(1)
into STRICT	qt_esquema_pagamento_w
from	pls_esquema_contabil
where	ie_tipo_regra			= 'PM'
and	ie_prestador_codificacao	= 'P'
and	cd_estabelecimento		= cd_estabelecimento_p
and	dt_referencia_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia,dt_referencia_w)  LIMIT 1;

-- Obtains the default control for the amount of records that will be sent to the database every time 
qt_reg_transacao_w := pls_util_cta_pck.qt_registro_transacao_w;

open C01;
loop
FETCH C01 BULK COLLECT INTO s_array LIMIT 400;
	Vetor_w(w)	:= s_array;
	w := w + 1;
EXIT WHEN NOT FOUND; /* apply on C01 */
END LOOP;
CLOSE C01;

for k in 1..Vetor_w.COUNT loop
	s_array	:= Vetor_w(k);
	for z in 1..s_array.COUNT loop
		begin
		ie_proc_mat_w			:= s_array[z].ie_proc_mat;
		nr_seq_item_w			:= s_array[z].nr_seq_item;
		cd_procedimento_w		:= s_array[z].cd_procedimento;
		ie_origem_proced_w		:= s_array[z].ie_origem_proced;
		nr_seq_material_w		:= s_array[z].nr_seq_material;
		nr_seq_conta_w			:= s_array[z].nr_seq_conta;
		dt_material_w			:= s_array[z].dt_material;
		dt_conta_w			:= s_array[z].dt_conta;
		dt_protocolo_w			:= s_array[z].dt_protocolo;
		nr_seq_prestador_atend_w	:= s_array[z].nr_seq_prestador_atend;
		ie_tipo_protocolo_w		:= s_array[z].ie_tipo_protocolo;
		ie_tipo_desp_proc_w		:= s_array[z].ie_tipo_desp_proc;
		ie_tipo_desp_mat_w		:= s_array[z].ie_tipo_desp_mat;
		nr_seq_prestador_exec_w		:= s_array[z].nr_seq_prestador_exec;
		cd_estabelecimento_w		:= s_array[z].cd_estabelecimento;
		cd_medico_solicitante_w		:= s_array[z].cd_medico_solicitante;
		cd_guia_w			:= s_array[z].cd_guia;
		nr_seq_segurado_w		:= s_array[z].nr_seq_segurado;
		cd_medico_conta_w		:= s_array[z].cd_medico_conta;
		ie_tipo_guia_w			:= s_array[z].ie_tipo_guia;
		ie_regra_data_preco_mat_w	:= s_array[z].ie_regra_data_preco_mat;
		
		-- Update all, or update according to the protocol type
		if	((coalesce(ie_lote_contabil_p,'T') = 'T') or (coalesce(ie_lote_contabil_p,'T') = ie_tipo_protocolo_w)) then
			
			if (ie_proc_mat_w = 'P') then  -- Procedures
				dt_preco_w	:= dt_material_w;
				
				select	max(b.nr_seq_prestador)
				into STRICT	nr_seq_prestador_solic_w
				from	pls_conta_proc		c,
					pls_conta		a,
					pls_prestador_medico	b,
					pls_prestador		d
				where	a.cd_medico_solicitante	= b.cd_medico
				and	c.nr_seq_conta		= a.nr_sequencia
				and	b.nr_seq_prestador	= d.nr_sequencia
				and	d.cd_estabelecimento	= cd_estabelecimento_w
				and	c.nr_sequencia		= nr_seq_item_w
				and	b.ie_situacao		= 'A'
				and	trunc(dt_preco_w,'dd') between trunc(coalesce(b.dt_inclusao,dt_preco_w),'dd') and trunc(coalesce(b.dt_exclusao,dt_preco_w),'dd');
				
				if (coalesce(nr_seq_prestador_solic_w::text, '') = '') then
					select	max(c.nr_seq_prestador_solic)
					into STRICT	nr_seq_prestador_solic_w
					from	pls_conta_proc_v	c
					where	c.cd_estabelecimento	= cd_estabelecimento_w
					and	c.nr_sequencia		= nr_seq_item_w;
				end if;
				
				
				
			elsif (ie_proc_mat_w = 'M') then  -- Materials 
				dt_preco_w	:= dt_material_w;

				begin
				select	b.nr_seq_prestador
				into STRICT	nr_seq_prestador_solic_w
				from	pls_prestador_medico	b,
					pls_prestador		d
				where	b.nr_seq_prestador	= d.nr_sequencia
				and	d.cd_estabelecimento	= cd_estabelecimento_w
				and	b.cd_medico		= cd_medico_solicitante_w
				and	b.ie_situacao		= 'A'
				and	trunc(dt_preco_w,'dd') between trunc(coalesce(b.dt_inclusao, dt_preco_w),'dd') and trunc(coalesce(b.dt_exclusao,dt_preco_w),'dd');
				exception
				when others then
					nr_seq_prestador_solic_w	:= null;
				end;
				
				if (coalesce(nr_seq_prestador_solic_w,0) = 0) then
					begin
					select	cd_medico_solicitante
					into STRICT	cd_solic_w
					from	pls_guia_plano
					where	cd_guia		= cd_guia_w
					and	nr_seq_segurado = nr_seq_segurado_w;
					exception
					when others then
						cd_solic_w	:= null;
					end;
					
					begin
					select	nr_seq_prestador
					into STRICT	nr_seq_prestador_solic_w
					from	pls_prestador_medico
					where	ie_situacao		= 'A'
					and	cd_medico		= cd_solic_w
					and	trunc(dt_preco_w,'dd') between trunc(coalesce(dt_inclusao, dt_preco_w),'dd') and trunc(coalesce(dt_exclusao,dt_preco_w),'dd');
					exception
					when others then
						nr_seq_prestador_solic_w	:= null;
					end;
				end if;
				
				if (coalesce(nr_seq_prestador_solic_w::text, '') = '') then
					select	max(c.nr_seq_prestador_solic)
					into STRICT	nr_seq_prestador_solic_w
					from	pls_conta_mat_v		c
					where	c.cd_estabelecimento	= cd_estabelecimento_w
					and	c.nr_sequencia		= nr_seq_item_w;
				end if;
			end if;
			
			-- aaschlote 10-Jul-2012 -Verify if the cooperative member is active by the procedure date and not by the provider rule
			ie_medico_solic_coope_w	:= 'N';
			
			if (cd_medico_solicitante_w IS NOT NULL AND cd_medico_solicitante_w::text <> '') then
				ie_medico_solic_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_solicitante_w, dt_material_w,null);
			end if;
			
			if (ie_medico_solic_coope_w = 'S') then
				ie_medico_solic_coope_w	:= 'C'; -- If it iss not a cooperative member, the function already returns '
N'
			end if;
			
			-- aaschlote 10-Jul-2012 - Verify if the cooperative member is active by the procedure date and not by the provider rule
			-- aedemuth 10-Feb-2016 - Used the function to get the executing doctor of the account because it must be checked on the participants (TISS 3.02.00)
			cd_medico_conta_w := pls_obter_medico_executor(nr_seq_item_w, ie_proc_mat_w);
			
			ie_medico_exec_coope_w	:= 'N';
			
			if (cd_medico_conta_w IS NOT NULL AND cd_medico_conta_w::text <> '') then
				ie_medico_exec_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_conta_w,dt_material_w,null);
			end if;
			
			if (ie_medico_exec_coope_w = 'S') then
				ie_medico_exec_coope_w	:= 'C'; -- If it iss not a cooperative member, the function already returns '
N'
			end if;
			
			SELECT * FROM pls_obter_tipo_ato_cooperado(	cd_procedimento_w, ie_origem_proced_w, nr_seq_item_w, ie_proc_mat_w, nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_atend_w, null, ie_medico_solic_coope_w, ie_medico_exec_coope_w, nr_seq_material_w, ie_tipo_protocolo_w, ie_tipo_guia_w, ie_tipo_desp_proc_w, ie_tipo_desp_mat_w, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;
				
			if (ie_proc_mat_w = 'P') then
				update	pls_conta_proc
				set	ie_ato_cooperado	= ie_ato_cooperado_w,
					nr_seq_regra_cooperado	= nr_seq_regra_cooperado_w
				where	nr_sequencia		= nr_seq_item_w
				and	coalesce(nr_lote_contabil,0)	= 0
				and	coalesce(nr_lote_contabil_prov,0)	= 0;
				
				qt_registros_w	:= qt_registros_w + 1;
			elsif (ie_proc_mat_w = 'M') then
				update	pls_conta_mat
				set	ie_ato_cooperado	= ie_ato_cooperado_w,
					nr_seq_regra_cooperado	= nr_seq_regra_cooperado_w
				where	nr_sequencia		= nr_seq_item_w
				and	coalesce(nr_lote_contabil,0)	= 0
				and	coalesce(nr_lote_contabil_prov,0)	= 0;
				
				qt_registros_w	:= qt_registros_w + 1;
			end if;
			
			open C02;
			loop
			fetch C02 into	
				nr_seq_conta_resumo_w,
				nr_seq_prestador_pgto_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				
				SELECT * FROM pls_obter_tipo_ato_cooperado(	cd_procedimento_w, ie_origem_proced_w, nr_seq_item_w, ie_proc_mat_w, nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_atend_w, nr_seq_prestador_pgto_w, ie_medico_solic_coope_w, ie_medico_exec_coope_w, nr_seq_material_w, ie_tipo_protocolo_w, ie_tipo_guia_w, ie_tipo_desp_proc_w, ie_tipo_desp_mat_w, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;
								
				ie_ato_cooperado_table_w(i)	:= ie_ato_cooperado_w;
				nr_seq_regra_coop_table_w(i)	:= nr_seq_regra_cooperado_w;
				nr_seq_conta_res_table_w(i)	:= nr_seq_conta_resumo_w;
				nr_seq_conta_table_w(i)		:= nr_seq_conta_w;
				
				if (i >= qt_reg_transacao_w) then
					-- Update the informations regarding the cooperative act on the Summary medical account (Conta medica resumo)
					pls_atualiza_conta_med_resumo(	ie_ato_cooperado_table_w,
									nr_seq_regra_coop_table_w,
									nr_seq_conta_res_table_w,
									nr_seq_conta_table_w);

					-- Update the informations of the account account regarding the coparticipation
					pls_atualiza_cta_contab_copart(ie_ato_cooperado_table_w,
									nr_seq_conta_res_table_w,
									nr_seq_conta_table_w);
									
					
					-- Clean the table variables
					ie_ato_cooperado_table_w.delete;
					nr_seq_regra_coop_table_w.delete;
					nr_seq_conta_res_table_w.delete;
					nr_seq_conta_table_w.delete;
					
					i	:= 0;
				else
					i	:= i + 1;
				end if;	
				end;				
			end loop;	
			close C02;
			
			
			if (qt_registros_w >= 300) then
				qt_registros_w	:= 0;
				
				commit;
			end if;
		end if;
		
		end;
	end loop;
end loop;

if (Vetor_w.count > 0) then
	Vetor_w.delete;
end if;

-- If there is still any register inside the tables, those must also be updated
pls_atualiza_conta_med_resumo(	ie_ato_cooperado_table_w,
				nr_seq_regra_coop_table_w,
				nr_seq_conta_res_table_w,
				nr_seq_conta_table_w);		

-- If there is still any register inside the tables, those must also be updated
pls_atualiza_cta_contab_copart(ie_ato_cooperado_table_w,
				nr_seq_conta_res_table_w,
				nr_seq_conta_table_w);				

-- Clean the table variables
ie_ato_cooperado_table_w.delete;
nr_seq_regra_coop_table_w.delete;
nr_seq_conta_res_table_w.delete;
nr_seq_conta_table_w.delete;

ds_erro_p	:= null;

update	pls_competencia
set	dt_atualizacao_ato	= clock_timestamp()
where	trunc(dt_mes_competencia,'month') = trunc(dt_referencia_p,'month')
and	coalesce(cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_ato_cooperado ( nr_seq_protocolo_p bigint, dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type default null, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type default null, ie_tipo_item_p text default null, ie_lote_contabil_p text default 'T', ds_erro_p INOUT text DEFAULT NULL) FROM PUBLIC;

