-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_repasse_conta_prop ( nr_interno_conta_p bigint, vl_baixa_p bigint, vl_titulo_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_repasse_w		bigint;
vl_repasse_w		double precision;
nr_seq_proc_rep_novo_w	bigint;
nr_seq_mat_rep_novo_w	bigint;
vl_atual_repasse_w	double precision;
vl_calculo_repasse_w	double precision;
ie_status_w		procedimento_repasse.ie_status%type;
ie_estorno_w		varchar(1);
ie_gerar_estorno_recebido_w	varchar(1);
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;

C01 CURSOR FOR
SELECT	b.nr_sequencia,
	b.vl_original_repasse,
	b.vl_repasse,
	b.ie_status
from	procedimento_repasse b,
	procedimento_paciente a
where	a.nr_sequencia		= b.nr_seq_procedimento
and	a.nr_interno_conta	= nr_interno_conta_p
and	b.ie_status		in ('A','D')

union

SELECT	b.nr_sequencia,
	b.vl_original_repasse,
	0,
	b.ie_status
from	procedimento_repasse b,
	procedimento_paciente a
where	a.nr_sequencia		= b.nr_seq_procedimento
and	a.nr_interno_conta	= nr_interno_conta_p
and	b.ie_status		= 'R'
and	vl_baixa_p		< 0
and	coalesce(ie_gerar_estorno_recebido_w,'N') = 'N'
and	not exists (	select	1
			from	procedimento_repasse x
			where	x.nr_seq_origem = b.nr_sequencia
			and	x.ie_status = 'E')
and	not exists (
		select	1
		from	procedimento_repasse y,
			procedimento_paciente x
		where	y.nr_seq_procedimento	= x.nr_sequencia
		and	x.nr_interno_conta	= nr_interno_conta_p
		and	y.ie_status		in ('A','D')
		);

C02 CURSOR FOR
SELECT	b.nr_sequencia,
	b.vl_original_repasse,
	b.vl_repasse,
	b.ie_status
from	material_repasse b,
	material_atend_paciente a
where	a.nr_sequencia		= b.nr_seq_material
and	a.nr_interno_conta	= nr_interno_conta_p
and	b.ie_status		in ('A','D')

union

SELECT	b.nr_sequencia,
	b.vl_original_repasse,
	0,
	b.ie_status
from	material_repasse b,
	material_atend_paciente a
where	a.nr_sequencia		= b.nr_seq_material
and	a.nr_interno_conta	= nr_interno_conta_p
and	b.ie_status		= 'R'
and	vl_baixa_p		< 0
and	coalesce(ie_gerar_estorno_recebido_w,'N') = 'N'
and	not exists (	select	1
			from	material_repasse x
			where	x.nr_seq_origem = b.nr_sequencia
			and	x.ie_status = 'E')
and	not exists (
		select	1
		from	material_repasse y,
			material_atend_paciente x
		where	y.nr_seq_material	= x.nr_sequencia
		and	x.nr_interno_conta	= nr_interno_conta_p
		and	y.ie_status		in ('A','D')
		);


BEGIN

begin
select	cd_estabelecimento
into STRICT	cd_estabelecimento_w
from	conta_paciente
where	nr_interno_conta = nr_interno_conta_p;
exception
when others then
	cd_estabelecimento_w := null;
end;	

ie_gerar_estorno_recebido_w := obter_param_usuario(813, 166, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_estorno_recebido_w);

if (coalesce(vl_baixa_p::text, '') = '') or (coalesce(vl_titulo_p::text, '') = '') then
	--r.aise_application_error(-20011, 'Valor da baixa ou do titulo n?o informado!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(266485);
end if;

if (vl_baixa_p < 0) then
	ie_estorno_w	:= 'S';
else
	ie_estorno_w := 'N';
end if;

open C01;
loop
fetch C01 into
	nr_seq_repasse_w,
	vl_repasse_w,
	vl_atual_repasse_w,
	ie_status_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

	if (coalesce(vl_repasse_w::text, '') = '') then
		select	sum(a.vl_repasse)
		into STRICT	vl_repasse_w
		from	procedimento_repasse a
		where	a.nr_sequencia	= nr_seq_repasse_w;

		if (coalesce(vl_repasse_w,0) > 0) then
			update	procedimento_repasse
			set	vl_original_repasse	= vl_repasse_w
			where	nr_sequencia	= nr_seq_repasse_w;
		end if;			
	end if;

	if (coalesce(vl_repasse_w::text, '') = '') then
		--r.aise_application_error(-20011, 'Valor do repasse n?o encontrado!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(266486);
	end if;
	
	vl_calculo_repasse_w	:= vl_repasse_w * dividir_sem_round(vl_baixa_p,vl_titulo_p);
	
	if (vl_calculo_repasse_w > vl_atual_repasse_w) then
		vl_calculo_repasse_w	:= vl_calculo_repasse_w - (vl_calculo_repasse_w - vl_atual_repasse_w);
	end if;	
	
	if (vl_atual_repasse_w < vl_calculo_repasse_w) or (coalesce(vl_atual_repasse_w,0) = 0) then

		if (coalesce(vl_atual_repasse_w,0) = 0) then

			vl_calculo_repasse_w	:= abs(vl_calculo_repasse_w);

		end if;
		
		if (vl_baixa_p > 0) and (ie_status_w in ('A','D')) then
		
			update	procedimento_repasse
			set	vl_repasse	= vl_repasse - vl_calculo_repasse_w,
				vl_liberado	= vl_repasse - vl_calculo_repasse_w,
				ie_status	= 'R',
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_repasse_w
			and	coalesce(nr_repasse_terceiro::text, '') = '';

		elsif (vl_baixa_p < 0) and (ie_status_w = 'R') then
		
			insert	into	procedimento_repasse(
					nr_sequencia,
					nr_seq_procedimento,
					vl_repasse,
					dt_atualizacao,
					nm_usuario,
					nr_seq_terceiro,
					nr_lote_contabil,
					nr_repasse_terceiro,
					cd_conta_contabil,
					nr_seq_trans_fin,
					vl_liberado,
					nr_seq_item_retorno,
					ie_status,
					nr_seq_origem,
					cd_regra,
					DT_CONTABIL_TITULO,
					DT_CONTABIL,
					cd_medico,
					nr_seq_partic,
					nr_seq_criterio,
					NR_SEQ_TRANS_FIN_REP_MAIOR,
					ie_estorno,
					ie_repasse_calc,
					dt_liberacao,
					nr_seq_motivo_des,
					vl_original_repasse)
				SELECT	nextval('procedimento_repasse_seq'),
					nr_seq_procedimento,
					vl_repasse  * -1,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_terceiro,
					0,
					null,
					cd_conta_contabil,
					nr_seq_trans_fin,
					vl_liberado * -1,
					nr_seq_item_retorno,
					'E',
					nr_seq_repasse_w,
					cd_regra,
					to_date('01/01/2999','dd/mm/yyyy'),
					to_date('01/01/2999','dd/mm/yyyy'),
					cd_medico,
					CASE WHEN coalesce(nr_seq_partic,0)=0 THEN null  ELSE nr_seq_partic END ,
					nr_seq_criterio,
					NR_SEQ_TRANS_FIN_REP_MAIOR,
					'S',
					ie_repasse_calc,
					clock_timestamp(),
					nr_seq_motivo_des,
					vl_original_repasse
				from	Procedimento_repasse
				where	nr_sequencia	= nr_seq_repasse_w;
		end if;
		
		if (vl_baixa_p <> 0) then
			SELECT * FROM desdobrar_procmat_repasse(nr_seq_repasse_w, null, 'A', vl_calculo_repasse_w, nm_usuario_p, nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w) INTO STRICT nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w;
	
			update	procedimento_repasse
			set	vl_original_repasse	= vl_repasse_w
			where	nr_sequencia	= nr_seq_proc_rep_novo_w;

		end if;
		
	elsif (vl_atual_repasse_w > vl_calculo_repasse_w) then
		
		update	procedimento_repasse
		set	vl_repasse	= vl_calculo_repasse_w,
			vl_liberado	= vl_calculo_repasse_w,
			ie_status	= CASE WHEN ie_estorno_w='N' THEN 'R'  ELSE 'E' END ,
			dt_liberacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia	= nr_seq_repasse_w
		and	coalesce(nr_repasse_terceiro::text, '') = '';
		
		if (vl_baixa_p <> 0) then
			SELECT * FROM desdobrar_procmat_repasse(nr_seq_repasse_w, null, 'A', vl_atual_repasse_w - vl_calculo_repasse_w, nm_usuario_p, nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w) INTO STRICT nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w;
	
			update	procedimento_repasse
			set	vl_original_repasse	= vl_repasse_w
			where	nr_sequencia	= nr_seq_proc_rep_novo_w;

		end if;

	elsif (vl_atual_repasse_w	= vl_calculo_repasse_w) then
		
			update	procedimento_repasse
			set	vl_liberado	= vl_calculo_repasse_w,
				ie_status	= 'R',
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_repasse_w
			and	coalesce(nr_repasse_terceiro::text, '') = '';	
	end if;

end loop;
close C01;

open C02;
loop
fetch C02 into
	nr_seq_repasse_w,
	vl_repasse_w,
	vl_atual_repasse_w,
	ie_status_w;
EXIT WHEN NOT FOUND; /* apply on C02 */

	if (coalesce(vl_repasse_w::text, '') = '') then
		select	sum(a.vl_repasse)
		into STRICT	vl_repasse_w
		from	material_repasse a
		where	a.nr_sequencia	= nr_seq_repasse_w;

		if (coalesce(vl_repasse_w,0) > 0) then
			update	material_repasse
			set	vl_original_repasse	= vl_repasse_w
			where	nr_sequencia	= nr_seq_repasse_w;
		end if;			
	end if;

	if (coalesce(vl_repasse_w::text, '') = '') then
		--r.aise_application_error(-20011, 'Valor do repasse n?o encontrado!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(266486);
	end if;

	vl_calculo_repasse_w	:= vl_repasse_w * dividir_sem_round(vl_baixa_p,vl_titulo_p);
	
	if (vl_calculo_repasse_w > vl_atual_repasse_w) then
		vl_calculo_repasse_w	:= vl_calculo_repasse_w - (vl_calculo_repasse_w - vl_atual_repasse_w);
	end if;

	if (vl_atual_repasse_w < vl_calculo_repasse_w) or (coalesce(vl_atual_repasse_w,0) = 0) then
	
		if (vl_baixa_p > 0) and (ie_status_w in ('A','D')) then
			
			update	material_repasse
			set	vl_repasse	= vl_repasse - vl_calculo_repasse_w,
				vl_liberado	= vl_repasse - vl_calculo_repasse_w,
				ie_status		= 'R',
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_repasse_w
			and	coalesce(nr_repasse_terceiro::text, '') = '';
		
		elsif (vl_baixa_p < 0) and (ie_status_w = 'R') then
			
			insert into Material_repasse(
					nr_sequencia,
					nr_seq_Material,
					vl_repasse,
					dt_atualizacao,
					nm_usuario,
					nr_seq_terceiro,
					nr_lote_contabil,
					nr_repasse_terceiro,
					cd_conta_contabil,
					nr_seq_trans_fin,
					vl_liberado,
					nr_seq_item_retorno,
					ie_status,
					nr_seq_origem,
					cd_regra,
					cd_medico,
					NR_SEQ_TRANS_FIN_REP_MAIOR,
					ie_estorno,
					ie_repasse_calc,
					nr_seq_motivo_des,
					vl_original_repasse)
				SELECT	nextval('material_repasse_seq'),
					nr_seq_material,
					vl_repasse  * -1,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_terceiro,
					0,
					null,
					cd_conta_contabil,
					nr_seq_trans_fin,
					vl_liberado * -1,
					nr_seq_item_retorno,
					'E',
					nr_seq_repasse_w,
					cd_regra,
					cd_medico,
					NR_SEQ_TRANS_FIN_REP_MAIOR,
					'S',
					ie_repasse_calc,
					nr_seq_motivo_des,
					vl_original_repasse
				from	material_repasse
				where	nr_sequencia	= nr_seq_repasse_w;
		end if;
		
		if (vl_baixa_p <> 0) then
			SELECT * FROM desdobrar_procmat_repasse(null, nr_seq_repasse_w, 'A', vl_calculo_repasse_w, nm_usuario_p, nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w) INTO STRICT nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w;
	
			update	material_repasse
			set	vl_original_repasse	= vl_repasse_w
			where	nr_sequencia	= nr_seq_mat_rep_novo_w;

		end if;

	elsif (vl_atual_repasse_w > vl_calculo_repasse_w) then

		update	material_repasse
		set	vl_repasse	= vl_calculo_repasse_w,
			vl_liberado	= vl_calculo_repasse_w,
			ie_status	= CASE WHEN ie_estorno_w='N' THEN 'R'  ELSE 'E' END ,
			dt_liberacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia	= nr_seq_repasse_w
		and	coalesce(nr_repasse_terceiro::text, '') = '';

		if (vl_baixa_p <> 0) then
			SELECT * FROM desdobrar_procmat_repasse(null, nr_seq_repasse_w, 'A', vl_atual_repasse_w - vl_calculo_repasse_w, nm_usuario_p, nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w) INTO STRICT nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w;
	
			update	material_repasse
			set	vl_original_repasse	= vl_repasse_w
			where	nr_sequencia	= nr_seq_mat_rep_novo_w;

		end if;

	elsif (vl_atual_repasse_w	= vl_calculo_repasse_w) then

		update	material_repasse
		set	vl_liberado	= vl_calculo_repasse_w,
			ie_status		= 'R',
			dt_liberacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia	= nr_seq_repasse_w
		and	coalesce(nr_repasse_terceiro::text, '') = '';

	end if;

end loop;
close C02;

end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_repasse_conta_prop ( nr_interno_conta_p bigint, vl_baixa_p bigint, vl_titulo_p bigint, nm_usuario_p text) FROM PUBLIC;

