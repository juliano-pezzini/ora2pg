-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE send_invoice_tie (nr_sequencia_p bigint, nm_usuario_p text, ie_operacao_p text, ie_conversao_p text) AS $body$
DECLARE

    json_data_w              philips_json;
    json_trib_w              philips_json;
    json_trib_list           philips_json_list;
    json_transp_w            philips_json;
    json_transp_list         philips_json_list;
    json_venc_w              philips_json;
    json_venc_list           philips_json_list;
    json_nf                  philips_json;
    json_item_nf_w           philips_json;
    json_item_nf_list        philips_json_list;
    json_item_trib_nf_w      philips_json;
    json_item_trib_nf_list   philips_json_list;
    json_item_lote_nf_w      philips_json;
    json_item_lote_nf_list   philips_json_list;
    data_w                   text;
    nr_item_nf_w             bigint;
    formato_padrao_vl_w      varchar(30) := '9999999999990D00';
	standard_date_format_w   varchar(10) := 'dd/mm/yyyy';

info_nf CURSOR FOR
    SELECT CASE WHEN ie_operacao_p='I' THEN 'INSERT' WHEN ie_operacao_p='A' THEN 'UPDATE' WHEN ie_operacao_p='E' THEN 'DELETE' END  action,
           a.nr_sequencia id, 
           a.nr_nota_fiscal invoice,
           a.nr_seq_motivo_devol reasonReturn,
           CD_OPERACAO_NF operation, 
           obter_valor_dominio(1661, a.ie_tipo_nota) type, 
           to_char(a.dt_emissao, standard_date_format_w) emissionDate, 
           to_char(a.dt_entrada_saida, standard_date_format_w) inputExitDate, 
           CD_NATUREZA_OPERACAO natureOperation, 
           obter_valor_dominio(1056, a.ie_situacao) status, 
           CD_SERIE_NF invoiceSeries, 
           a.nr_sequencia_nf invoiceSequence, 
           CD_CONDICAO_PAGAMENTO conditionPayment, 
           to_char(a.dt_atualizacao_estoque, standard_date_format_w) stockUpdateDate, 
           a.cd_cgc_emitente issuerEIN, 
           a.nr_ordem_compra purchaseOrder, 
           a.nr_interno_conta accountNumber, 
           a.nr_seq_protocolo protocolNumber, 
           a.nr_lote_contabil accountingBatch, 
           a.nr_seq_classif_fiscal classificationFiscal, 
           a.cd_conv_integracao integrationAgreement, 
           a.nr_nfe_imp electronicInvoiceImp, 
           a.ie_status_envio statusSending, 
           a.ds_observacao notes, 
           cd_pessoa_fisica naturalPerson,
           a.cd_cgc ein, 
           ltrim(to_char(a.vl_descontos, formato_padrao_vl_w)) discountsValue, 
           ltrim(to_char(a.vl_total_nota, formato_padrao_vl_w)) totalInvoiceValue, 
           ltrim(to_char(a.vl_despesa_acessoria, formato_padrao_vl_w)) additionalExpenseValue, 
           ltrim(to_char(a.vl_seguro, formato_padrao_vl_w)) insuranceValue, 
           OBTER_DESC_LOCAL_NOTA_NF(nr_sequencia) localization, 
           a.cd_estabelecimento establishment, 
           substr(obter_cgc_estabelecimento(cd_estabelecimento),1,20) legalEntityEstablishment,
           a.nr_danfe electronicInvoiceDoc,
           a.nr_sequencia_ref sequenceReference,
           OBTER_DADOS_NOTA_FISCAL(nr_sequencia_ref, 0) invoiceReference,
           OBTER_DADOS_NOTA_FISCAL(nr_sequencia_ref, 1) invoiceSeriesReference,
           a.nm_usuario userName,
           a.nr_nf_externo invoiceExternal
    from nota_fiscal a
    where a.nr_sequencia = nr_sequencia_p;

info_item CURSOR FOR
    SELECT CD_MATERIAL materialCode,
           b.nr_item_nf invoiceItem, 
           b.nr_atendimento encounter, 
           b.nr_ordem_compra, 
           b.nr_item_oci itemOCI, 
           CD_PROCEDIMENTO procedureCode, 
           b.nr_seq_proc_interno internalProcedure, 
           b.cd_imobilizado immobilized, 
           b.cd_imob_serie immobilizedSeries, 
           NFE_ELIMINA_CARACTERE_ESPECIAL(CD_UNIDADE_MEDIDA_COMPRA) unitMeasurePurchase,
           to_char(b.dt_entrega_ordem, standard_date_format_w) deliveryOrderDate,
           b.qt_item_nf amountItemInvoice,
           ltrim(to_char(b.vl_unitario_item_nf, '9999999999990D0000')) itemUnitValue,
           b.pr_desconto discountPercent, 
           ltrim(to_char(b.vl_desconto, formato_padrao_vl_w)) itemDiscountValue, 
           ltrim(to_char(b.vl_desc_financ, formato_padrao_vl_w)) financialDiscountValue, 
           ltrim(to_char(b.vl_total_item_nf, formato_padrao_vl_w)) itemTotalValue, 
           NFE_ELIMINA_CARACTERE_ESPECIAL(CD_UNIDADE_MEDIDA_ESTOQUE) stockMeasurementUnit,
           b.qt_item_estoque itemStockAmount, 
           ltrim(to_char(vl_liquido, formato_padrao_vl_w)) netValue,
           CD_LOCAL_ESTOQUE localStock, 
           CD_CONTA_CONTABIL accountingAccount, 
           CD_NATUREZA_OPERACAO natureOperation, 
           CD_CENTRO_CUSTO costCenter, 
           b.nr_contrato contractNumber, 
           NR_SEQ_CONTA_FINANC accountFinancial, 
           b.nr_seq_proj_rec projectResource, 
           NFE_ELIMINA_CARACTERE_ESPECIAL(ds_observacao) itemNotes, 
           NFE_ELIMINA_CARACTERE_ESPECIAL(ds_complemento) complement, 
           b.cd_lote_fabricacao manufacturingBatch, 
           to_char(b.dt_validade, standard_date_format_w) expirationDate, 
           b.ds_justificativa justification, 
           to_char(b.dt_fabricacao, standard_date_format_w) manufacturingDate, 
           b.ie_indeterminado undetermined, 
           NR_SEQ_MARCA brand, 
           to_char(b.dt_inicio_garantia, standard_date_format_w) warrantyStartDate, 
           to_char(b.dt_fim_garantia, standard_date_format_w) warrantyEndDate, 
           b.nr_serie_material materialSeries, 
           b.cd_paciente patient, 
           NR_SEQ_MODELO model, 
           b.nr_seq_classif_trib taxClassification, 
           b.nr_seq_inspecao receiptInspection,
           NFE_ELIMINA_CARACTERE_ESPECIAL(obter_dados_material(cd_material, 'UMC')) consumptionMeasurementUnit,
           obter_quantidade_convertida(cd_material,qt_item_nf,cd_unidade_medida_estoque,'UMC') consumption
    from nota_fiscal_item b
    where b.nr_sequencia = nr_sequencia_p;

info_trib_nf CURSOR FOR
    SELECT CD_TRIBUTO taxCode,
           ltrim(to_char(c.vl_base_calculo, formato_padrao_vl_w)) baseCalculationValue,
           ltrim(to_char(c.vl_reducao, formato_padrao_vl_w)) reductionValue,
           ltrim(to_char(c.vl_reducao_base, formato_padrao_vl_w)) baseReductionValue,
           c.tx_tributo tax,
           ltrim(to_char(c.vl_tributo, formato_padrao_vl_w)) taxValue,
           ltrim(to_char(c.vl_base_nao_retido, formato_padrao_vl_w)) baseNotWithheldValue,
           ltrim(to_char(c.vl_base_adic, formato_padrao_vl_w)) baseAdditionalValue,
           ltrim(to_char(c.vl_trib_nao_retido, formato_padrao_vl_w)) taxNotWithheldValue,
           ltrim(to_char(c.vl_trib_adic, formato_padrao_vl_w)) taxAdditionalValue,
           ltrim(to_char(c.vl_bc_matriz_filial, formato_padrao_vl_w)) matrixBranchValue,
           c.ie_retencao retention
    from nota_fiscal_trib c
    where c.nr_sequencia = nr_sequencia_p;

info_transp_nf CURSOR FOR
    SELECT ltrim(to_char(a.vl_frete, formato_padrao_vl_w)) freightValue,
           d.cd_cnpj legalEntityFRS,
           obter_valor_dominio(87, d.ie_tipo_frete) freightType,
           d.nr_placa_veiculo vehiclePlateNumber,
           d.uf_placa_veiculo vehiclePlateState,
           d.ds_especie speciesDescription,
           d.qt_transporte transportAmount,
           d.qt_volume volume,
           d.qt_peso_bruto grossWeight,
           d.qt_peso_liquido netWeight,
           d.nr_lacre sealingWax
    from nota_fiscal a,
         nota_fiscal_transportadora d 
    where a.nr_sequencia = d.nr_seq_nota 
    and a.nr_sequencia = nr_sequencia_p;


info_venc_nf CURSOR FOR
    SELECT to_char(e.dt_vencimento, standard_date_format_w) dueDate,
           ltrim(to_char(e.vl_vencimento, formato_padrao_vl_w)) dueValue,
           ltrim(to_char(e.vl_base_venc, formato_padrao_vl_w)) dueBaseValue,
           ltrim(to_char(e.vl_desconto, formato_padrao_vl_w)) discountValue,
           ltrim(to_char(e.vl_desc_financ, formato_padrao_vl_w)) financialDiscountValue,
           e.nr_titulo_pagar accountPayable,
           e.ds_observacao observation
    from nota_fiscal_venc e
    where e.nr_sequencia = nr_sequencia_p;

info_trib_item_nf CURSOR FOR
    SELECT CD_TRIBUTO taxCode,
           ltrim(to_char(f.vl_base_calculo, formato_padrao_vl_w)) baseCalculationValue, 
           ltrim(to_char(f.vl_reducao_base, formato_padrao_vl_w)) baseReductionValue, 
           f.tx_tributo tax, 
           ltrim(to_char(f.vl_tributo, formato_padrao_vl_w)) taxValue, 
           f.nr_seq_sit_trib taxStatus, 
           f.ie_tributacao_cst taxCST, 
           f.ie_tributacao_csosn taxCSOSN 
    from nota_fiscal_item_trib f
    where f.nr_sequencia = nr_sequencia_p
    and f.nr_item_nf = nr_item_nf_w;

info_item_lote_nf CURSOR FOR
    SELECT to_char(g.dt_validade, standard_date_format_w) expirationDate,
           g.ie_indeterminado undetermined,
           g.cd_lote_fabricacao manufacturingBatch,
           g.qt_material materialAmount,
           to_char(g.dt_fabricacao, standard_date_format_w) manufacturingDate,
           g.nr_seq_marca brand,
           g.nr_serie_material materialSeries,
           g.cd_barra_material materialBarcode,
           g.ds_barras barcodeDescription,
           g.nr_sequencia sequence,
           to_char(g.dt_atualizacao, standard_date_format_w) updateDate,
           g.nm_usuario userName,
           g.nr_seq_lote_fornec supplierBatchSequence
    from nota_fiscal_item_lote g
    where nr_seq_nota = nr_sequencia_p
    and nr_item_nf = nr_item_nf_w;
BEGIN
    json_data_w := philips_json();

    FOR nf in info_nf LOOP
        json_data_w.put('action', nf.action);
        json_data_w.put('id', nf.id);
        json_data_w.put('invoice', nf.invoice);
        json_data_w.put('operation', nf.operation);
        json_data_w.put('type', nf.type);
        json_data_w.put('emissionDate', nf.emissionDate);
        json_data_w.put('inputExitDate', nf.inputExitDate);
        json_data_w.put('natureOperation', nf.natureOperation);
        json_data_w.put('status', nf.status);
        json_data_w.put('reasonReturn', nf.reasonReturn);
        json_data_w.put('invoiceSeries', nf.invoiceSeries);
        json_data_w.put('invoiceSequence', nf.invoiceSequence);
        json_data_w.put('conditionPayment', nf.conditionPayment);
        json_data_w.put('stockUpdateDate', nf.stockUpdateDate);
        json_data_w.put('issuerEIN', nf.issuerEIN);
        json_data_w.put('purchaseOrder', nf.purchaseOrder);
        json_data_w.put('accountNumber', nf.accountNumber);
        json_data_w.put('protocolNumber', nf.protocolNumber);
        json_data_w.put('accountingBatch', nf.accountingBatch);
        json_data_w.put('classificationFiscal', nf.classificationFiscal);
        json_data_w.put('invoiceReference', nf.invoiceReference);
        json_data_w.put('invoiceSeriesReference', nf.invoiceSeriesReference);
        json_data_w.put('integrationAgreement', nf.integrationAgreement);
        json_data_w.put('electronicInvoiceImp', nf.electronicInvoiceImp);
        json_data_w.put('electronicInvoiceDoc', nf.electronicInvoiceDoc);
        json_data_w.put('sequenceReference', nf.sequenceReference);
        json_data_w.put('invoiceExternal', nf.invoiceExternal);
        json_data_w.put('statusSending', nf.statusSending);
        json_data_w.put('notes', nf.notes);
        json_data_w.put('naturalPerson', nf.naturalPerson);
        json_data_w.put('ein', nf.ein);
        json_data_w.put('discountsValue', nf.discountsValue);
        json_data_w.put('totalInvoiceValue', nf.totalInvoiceValue);
        json_data_w.put('additionalExpenseValue', nf.additionalExpenseValue);
        json_data_w.put('insuranceValue', nf.insuranceValue);
        json_data_w.put('localization', nf.localization);
        json_data_w.put('establishment', nf.establishment);
        json_data_w.put('legalEntityEstablishment', nf.legalEntityEstablishment);
        json_data_w.put('userName', nf.userName);
    END LOOP;

    BEGIN
        json_trib_w := philips_json();
        json_trib_list := philips_json_list();

        FOR trib in info_trib_nf LOOP
            json_trib_w.put('taxCode', trib.taxCode);
            json_trib_w.put('baseCalculationValue', trib.baseCalculationValue);
            json_trib_w.put('reductionValue', trib.reductionValue);
            json_trib_w.put('baseReductionValue', trib.baseReductionValue);
            json_trib_w.put('tax', trib.tax);
            json_trib_w.put('taxValue', trib.taxValue);
            json_trib_w.put('baseNotWithheldValue', trib.baseNotWithheldValue);
            json_trib_w.put('baseAdditionalValue', trib.baseAdditionalValue);
            json_trib_w.put('taxNotWithheldValue', trib.taxNotWithheldValue);
            json_trib_w.put('taxAdditionalValue', trib.taxAdditionalValue);
            json_trib_w.put('matrixBranchValue', trib.matrixBranchValue);
            json_trib_w.put('retention', trib.retention);

            json_trib_list.APPEND(json_trib_w.to_json_value());
        END LOOP;

        json_data_w.put('taxes' , json_trib_list.to_json_value());
    END;

    BEGIN
        json_transp_w := philips_json();
        json_transp_list := philips_json_list();

        FOR transp in info_transp_nf LOOP
            json_transp_w.put('freightValue', transp.freightValue);
            json_transp_w.put('legalEntityFRS', transp.legalEntityFRS);
            json_transp_w.put('freightType', transp.freightType);
            json_transp_w.put('vehiclePlateNumber', transp.vehiclePlateNumber);
            json_transp_w.put('vehiclePlateState', transp.vehiclePlateState);
            json_transp_w.put('speciesDescription', transp.speciesDescription);
            json_transp_w.put('transportAmount', transp.transportAmount);
            json_transp_w.put('volume', transp.volume);
            json_transp_w.put('grossWeight', transp.grossWeight);
            json_transp_w.put('netWeight', transp.netWeight);
            json_transp_w.put('sealingWax', transp.sealingWax);

            json_transp_list.APPEND(json_transp_w.to_json_value());
        END LOOP;

        json_data_w.put('carrier', json_transp_list.to_json_value());
    END;

    BEGIN
        json_venc_w := philips_json();
        json_venc_list := philips_json_list();

        FOR vencimento in info_venc_nf LOOP
            json_venc_w.put('dueDate', vencimento.dueDate);
            json_venc_w.put('dueValue', vencimento.dueValue);
            json_venc_w.put('dueBaseValue', vencimento.dueBaseValue);
            json_venc_w.put('discountValue', vencimento.discountValue);
            json_venc_w.put('financialDiscountValue', vencimento.financialDiscountValue);
            json_venc_w.put('accountPayable', vencimento.accountPayable);
            json_venc_w.put('observation', vencimento.observation);

            json_venc_list.APPEND(json_venc_w.to_json_value());
        END LOOP;

        json_data_w.put('due', json_venc_list.to_json_value());
    END;

    BEGIN
        json_item_nf_w := philips_json();
        json_item_nf_list := philips_json_list();

        FOR item_nf in info_item LOOP

            nr_item_nf_w := item_nf.invoiceItem;

            json_item_nf_w.put('materialCode', item_nf.materialCode);
            json_item_nf_w.put('invoiceItem', item_nf.invoiceItem);
            json_item_nf_w.put('encounter', item_nf.encounter);
            json_item_nf_w.put('itemOCI', item_nf.itemOCI);
            json_item_nf_w.put('procedureCode', item_nf.procedureCode);
            json_item_nf_w.put('internalProcedure', item_nf.internalProcedure);
            json_item_nf_w.put('immobilized', item_nf.immobilized);
            json_item_nf_w.put('immobilizedSeries', item_nf.immobilizedSeries);
            json_item_nf_w.put('unitMeasurePurchase', item_nf.unitMeasurePurchase);
            json_item_nf_w.put('deliveryOrderDate', item_nf.deliveryOrderDate);
            json_item_nf_w.put('amountItemInvoice', item_nf.amountItemInvoice);
            json_item_nf_w.put('itemUnitValue', item_nf.itemUnitValue);
            json_item_nf_w.put('discountPercent', item_nf.discountPercent);
            json_item_nf_w.put('itemDiscountValue', item_nf.itemDiscountValue);
            json_item_nf_w.put('financialDiscountValue', item_nf.financialDiscountValue);
            json_item_nf_w.put('itemTotalValue', item_nf.itemTotalValue);
            json_item_nf_w.put('stockMeasurementUnit', item_nf.stockMeasurementUnit);
            json_item_nf_w.put('consumptionMeasurementUnit', item_nf.consumptionMeasurementUnit);
            json_item_nf_w.put('itemStockAmount', item_nf.itemStockAmount);
            json_item_nf_w.put('netValue', item_nf.netValue);
            json_item_nf_w.put('localStock', item_nf.localStock);
            json_item_nf_w.put('accountingAccount', item_nf.accountingAccount);
            json_item_nf_w.put('natureOperation', item_nf.natureOperation);
            json_item_nf_w.put('costCenter', item_nf.costCenter);
            json_item_nf_w.put('contractNumber', item_nf.contractNumber);
            json_item_nf_w.put('accountFinancial', item_nf.accountFinancial);
            json_item_nf_w.put('projectResource', item_nf.projectResource);
            json_item_nf_w.put('itemNotes', item_nf.itemNotes);
            json_item_nf_w.put('complement', item_nf.complement);
            json_item_nf_w.put('manufacturingBatch', item_nf.manufacturingBatch);
            json_item_nf_w.put('expirationDate', item_nf.expirationDate);
            json_item_nf_w.put('justification', item_nf.justification);
            json_item_nf_w.put('manufacturingDate', item_nf.manufacturingDate);
            json_item_nf_w.put('undetermined', item_nf.undetermined);
            json_item_nf_w.put('brand', item_nf.brand);
            json_item_nf_w.put('warrantyStartDate', item_nf.warrantyStartDate);
            json_item_nf_w.put('warrantyEndDate', item_nf.warrantyEndDate);
            json_item_nf_w.put('materialSeries', item_nf.materialSeries);
            json_item_nf_w.put('patient', item_nf.patient);
            json_item_nf_w.put('model', item_nf.model);
            json_item_nf_w.put('taxClassification', item_nf.taxClassification);
            json_item_nf_w.put('receiptInspection', item_nf.receiptInspection);
            json_item_nf_w.put('consumption', item_nf.consumption);

            BEGIN
                json_item_trib_nf_w := philips_json();
                json_item_trib_nf_list := philips_json_list();

                FOR item_trib_nf in info_trib_item_nf LOOP
                    json_item_trib_nf_w.put('taxCode', item_trib_nf.taxCode);
                    json_item_trib_nf_w.put('baseCalculationValue', item_trib_nf.baseCalculationValue);
                    json_item_trib_nf_w.put('baseReductionValue', item_trib_nf.baseReductionValue);
                    json_item_trib_nf_w.put('tax', item_trib_nf.tax);
                    json_item_trib_nf_w.put('taxValue', item_trib_nf.taxValue);
                    json_item_trib_nf_w.put('taxStatus', item_trib_nf.taxStatus);
                    json_item_trib_nf_w.put('taxCST', item_trib_nf.taxCST);
                    json_item_trib_nf_w.put('taxCSOSN', item_trib_nf.taxCSOSN);

                    json_item_trib_nf_list.APPEND(json_item_trib_nf_w.to_json_value());
                END LOOP;

                json_item_nf_w.put('itemsTaxes',json_item_trib_nf_list.to_json_value());
            END;

            BEGIN
                json_item_lote_nf_w := philips_json();
                json_item_lote_nf_list := philips_json_list();

                FOR item_lote_nf in info_item_lote_nf LOOP
                    json_item_lote_nf_w.put('expirationDate', item_lote_nf.expirationDate);
                    json_item_lote_nf_w.put('undetermined', item_lote_nf.undetermined);
                    json_item_lote_nf_w.put('manufacturingBatch', item_lote_nf.manufacturingBatch);
                    json_item_lote_nf_w.put('materialAmount', item_lote_nf.materialAmount);
                    json_item_lote_nf_w.put('manufacturingDate', item_lote_nf.manufacturingDate);
                    json_item_lote_nf_w.put('brand', item_lote_nf.brand);
                    json_item_lote_nf_w.put('materialSeries', item_lote_nf.materialSeries);
                    json_item_lote_nf_w.put('materialBarcode', item_lote_nf.materialBarcode);
                    json_item_lote_nf_w.put('barcodeDescription', item_lote_nf.barcodeDescription);
                    json_item_lote_nf_w.put('sequence', item_lote_nf.sequence);
                    json_item_lote_nf_w.put('updateDate', item_lote_nf.updateDate);
                    json_item_lote_nf_w.put('userName', item_lote_nf.userName);
                    json_item_lote_nf_w.put('supplierBatchSequence', item_lote_nf.supplierBatchSequence);

                    json_item_lote_nf_list.APPEND(json_item_lote_nf_w.to_json_value());
                END LOOP;

                json_item_nf_w.put('itemLot',json_item_lote_nf_list.to_json_value());
            END;

            json_item_nf_list.APPEND(json_item_nf_w.to_json_value());
        END LOOP;

        json_data_w.put('items', json_item_nf_list.to_json_value());
    END;

    dbms_lob.createtemporary(data_w, true);
    json_data_w.(data_w);
    data_w := bifrost.send_integration_content('api.send.invoice', data_w, nm_usuario_p);

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE send_invoice_tie (nr_sequencia_p bigint, nm_usuario_p text, ie_operacao_p text, ie_conversao_p text) FROM PUBLIC;

