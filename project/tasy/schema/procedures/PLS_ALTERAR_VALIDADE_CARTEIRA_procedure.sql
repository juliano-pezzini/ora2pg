-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_alterar_validade_carteira ( nr_seq_segurado_p bigint, nr_seq_carteira_p bigint, dt_validade_p timestamp, ie_tipo_alteracao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/*Utilizada nas funcoes OPS - Gestao de Contratos e OPS - Contratos de Intercambio*/



/* ie_tipo_alteracao_p
	0 - Somenente beneficiario
	1 - Beneficiario mais os depedentes
	2 - Todos beneficiarios do contrato
*/
dt_inicio_vigencia_w		timestamp;
cd_usuario_plano_w		varchar(30);
nr_seq_carteira_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_segurado_w		bigint;
ds_trilha1_w			varchar(255);
ds_trilha2_w			varchar(255);
ds_trilha3_w			varchar(255);
ds_trilha_qr_code_w		varchar(255);
ie_inadimplencia_via_adic_w	varchar(1);
dt_sysdate_trunc_dd_w		timestamp;
cd_guncao_ativa_w		bigint	:= wheb_usuario_pck.get_cd_funcao;
nr_seq_pagador_w		bigint;
qt_inadimplencia_w		bigint;
nm_beneficiario_w		varchar(255);
ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;

C01 CURSOR FOR
	SELECT	distinct nr_sequencia,
		ie_tipo_segurado
	from	pls_segurado
	where	((coalesce(ie_tipo_alteracao_p,0) in (0,1) and nr_sequencia = nr_seq_segurado_p) or (ie_tipo_alteracao_p = 2 and nr_seq_contrato = nr_seq_contrato_w))
	and	(((coalesce(dt_cancelamento::text, '') = '' or dt_cancelamento > clock_timestamp()) and (coalesce(dt_rescisao::text, '') = '' or dt_rescisao > clock_timestamp())) or (coalesce(ie_tipo_alteracao_p,0) = 0))
	
union

	SELECT	distinct nr_sequencia,
		ie_tipo_segurado
	from	pls_segurado
	where	ie_tipo_alteracao_p = 1
	and 	nr_seq_titular = nr_seq_segurado_p
	and (coalesce(dt_cancelamento::text, '') = '' or dt_cancelamento > clock_timestamp())
	and (coalesce(dt_rescisao::text, '') = '' or dt_rescisao > clock_timestamp());

C02 CURSOR FOR
	SELECT	max(nr_sequencia)
	from	pls_segurado_carteira
	where	nr_seq_segurado = nr_seq_segurado_w;


BEGIN

if (coalesce(nr_seq_carteira_p,0) <> 0) then
	nr_seq_carteira_w	:= nr_seq_carteira_p;
else
	begin
	select	nr_seq_contrato
	into STRICT	nr_seq_contrato_w
	from	pls_segurado
	where	nr_sequencia = nr_seq_segurado_p;
	exception
	when others then
		nr_seq_contrato_w := null;
	end;
	
	open C01;
	loop
	fetch C01 into
		nr_seq_segurado_w,
		ie_tipo_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		if (cd_guncao_ativa_w = 1273) then
			select	obter_valor_param_usuario(1273,5,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p)
			into STRICT	ie_inadimplencia_via_adic_w
			;
		elsif (cd_guncao_ativa_w = 1202) then
			select	max(a.ie_inadimplencia_via_adic)
			into STRICT	ie_inadimplencia_via_adic_w
			from	pls_contrato_pagador	a,
				pls_segurado		b
			where	b.nr_seq_pagador	= a.nr_sequencia
			and	b.nr_sequencia		= nr_seq_segurado_w;
		end if;
		
		if (ie_inadimplencia_via_adic_w = 'S') then
			dt_sysdate_trunc_dd_w	:= trunc(clock_timestamp(),'dd');
			
			select	max(nr_seq_pagador)
			into STRICT	nr_seq_pagador_w
			from	pls_segurado
			where	nr_sequencia	= nr_seq_segurado_w;
			
			select	count(1)
			into STRICT	qt_inadimplencia_w
			FROM pls_contrato_pagador e, pls_contrato d, pls_segurado c, pls_mensalidade_segurado b, pls_mensalidade a
LEFT OUTER JOIN titulo_receber f ON (a.nr_sequencia = f.nr_seq_mensalidade)
WHERE a.nr_sequencia = b.nr_seq_mensalidade and c.nr_sequencia = b.nr_seq_segurado and d.nr_sequencia = c.nr_seq_contrato and e.nr_sequencia = a.nr_seq_pagador  and c.nr_seq_contrato = nr_seq_contrato_w and e.nr_sequencia = nr_seq_pagador_w and f.dt_pagamento_previsto < dt_sysdate_trunc_dd_w and f.ie_situacao = '1';
			
			if (qt_inadimplencia_w > 0) then
				select	b.nm_pessoa_fisica
				into STRICT	nm_beneficiario_w
				from	pessoa_fisica	b,
					pls_segurado	a
				where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
				and	a.nr_sequencia = nr_seq_segurado_w;
				
				CALL wheb_mensagem_pck.exibir_mensagem_abort(277982, 'NM_BENEFICIARIO=' || nm_beneficiario_w);
			end if;
		end if;
		
		open C02;
		loop
		fetch C02 into
			nr_seq_carteira_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			
			insert into pls_segurado_cart_ant(	nr_sequencia, nm_usuario,
					dt_atualizacao, cd_usuario_ant, dt_validade,
					dt_inicio_vigencia, nr_seq_segurado,
					dt_alteracao, ds_observacao, ie_status_carteira,
					nm_usuario_solicitacao, dt_solicitacao, ds_trilha_qr_code,
					ds_trilha1, ds_trilha2, ds_trilha3,
					dt_desbloqueio, nm_usuario_desbloqueio, ie_tipo_desbloqueio)
				SELECT	nextval('pls_segurado_cart_ant_seq'), nm_usuario_p,
					clock_timestamp(), cd_usuario_plano, dt_validade_carteira,
					dt_inicio_vigencia, nr_seq_segurado,
					clock_timestamp(), ds_observacao, 'P',
					nm_usuario_solicitante, dt_solicitacao, ds_trilha_qr_code,
					ds_trilha1, ds_trilha2, ds_trilha3,
					dt_desbloqueio, nm_usuario_desbloqueio, ie_tipo_desbloqueio
				from	pls_segurado_carteira
				where	nr_sequencia	= nr_seq_carteira_w;
			
			update	pls_segurado_carteira
			set	dt_validade_carteira 	= dt_validade_p,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				nm_usuario_solicitante	= nm_usuario_p,
				dt_solicitacao		= clock_timestamp(),
				ds_observacao		= wheb_mensagem_pck.get_texto(1127391)
			where	nr_sequencia		= nr_seq_carteira_w;
			
			/*Alterar o estagio da carteira*/

			CALL pls_alterar_estagios_cartao(nr_seq_carteira_w,clock_timestamp(),1,cd_estabelecimento_p,nm_usuario_p);
			
			/*As trilhas devem ser alteradas logo depois de alterar a via da carteira*/

			SELECT * FROM pls_obter_trilhas_cartao(nr_seq_segurado_w, ds_trilha1_w, ds_trilha2_w, ds_trilha3_w, ds_trilha_qr_code_w, nm_usuario_p) INTO STRICT ds_trilha1_w, ds_trilha2_w, ds_trilha3_w, ds_trilha_qr_code_w;
			
			update	pls_segurado_carteira
			set	ds_trilha1		= ds_trilha1_w,
				ds_trilha2		= ds_trilha2_w,
				ds_trilha3		= ds_trilha3_w,
				ds_trilha_qr_code	= ds_trilha_qr_code_w
			where	nr_sequencia 		= nr_seq_carteira_w;
			
			end;
		end loop;
		close C02;
		
		-- Se for beneficiario de pericia medica, precisa reativar o mesmo, pois no encerramento da analise para a adesao e preenchida a data de rescisao
		if (ie_tipo_segurado_w = 'P') then
			update	pls_segurado
			set	dt_rescisao		= dt_validade_p,
				dt_limite_utilizacao	= dt_validade_p
			where	nr_sequencia	= nr_seq_segurado_w
			and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '');
		end if;
		end;
	end loop;
	close C01;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_alterar_validade_carteira ( nr_seq_segurado_p bigint, nr_seq_carteira_p bigint, dt_validade_p timestamp, ie_tipo_alteracao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

