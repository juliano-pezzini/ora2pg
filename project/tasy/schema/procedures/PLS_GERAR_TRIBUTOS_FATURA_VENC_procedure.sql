-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS (	nr_seq_fat_evento	pls_fatura_evento.nr_sequencia%type,
			vl_evento_origem	pls_fatura_evento.vl_evento%type,
			vl_faturado		pls_fatura_conta.vl_faturado%type,
			vl_faturado_ndc		pls_fatura_conta.vl_faturado_ndc%type);


CREATE OR REPLACE PROCEDURE pls_gerar_tributos_fatura_venc ( nr_seq_pls_fatura_p pls_fatura.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar os tributos conforme o valor de base da regra PLS_REGRA_BASE_TRIB_FAT
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ ]  Objetos do dicion?rio [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relat?rios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de aten??o:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 

ie_ato_cooperado_w		pls_conta_medica_resumo.ie_ato_cooperado%type;
ie_tipo_pessoa_prest_solic_w	pls_regra_base_trib_fat.ie_tipo_pessoa_prest_solic%type;
ie_tipo_pessoa_prest_atend_w	pls_regra_base_trib_fat.ie_tipo_pessoa_prest_atend%type;
ie_tipo_pessoa_prest_pag_w	pls_regra_base_trib_fat.ie_tipo_pessoa_prest_pag%type;
ie_tipo_pessoa_prest_exec_w	pls_regra_base_trib_fat.ie_tipo_pessoa_prest_exec%type;
vl_base_cal_regra_w		pls_fatura_trib.vl_base_calculo%type := 0;
ie_tipo_valor_regra_w		pls_regra_base_trib_fat.ie_tipo_valor%type;
nr_seq_regra_base_calc_w	pls_regra_base_trib_fat.nr_sequencia%type;
cd_cgc_w			pessoa_juridica.cd_cgc%type;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_seq_pagador_w		pls_contrato_pagador.nr_sequencia%type;
dt_emissao_w			pls_lote_faturamento.dt_emissao%type;
pr_imposto_w			regra_calculo_imposto.pr_imposto%type;
vl_minimo_base_w		regra_calculo_imposto.vl_minimo_base_calculo%type;
vl_minimo_tributo_w		regra_calculo_imposto.vl_minimo_tributo%type;
ie_acumulativo_w		regra_calculo_imposto.ie_acumulativo%type;
vl_teto_base_w			regra_calculo_imposto.vl_teto_base_calculo%type;
vl_desc_dependente_w		regra_calculo_imposto.vl_desc_dependente%type;
vl_base_calculo_w		pls_fatura_trib.vl_base_calculo%type := 0;
vl_base_total_w			pls_fatura_trib.vl_base_total%type := 0;
vl_soma_trib_nao_retido_w	double precision := 0;
vl_soma_trib_adic_w		double precision := 0;
vl_soma_base_nao_retido_w	double precision := 0;
vl_soma_base_adic_w		double precision := 0;
vl_tributo_w			pls_fatura_trib.vl_tributo%type  := 0;
vl_trib_nao_retido_w		pls_fatura_trib.vl_trib_nao_retido%type  := 0;
vl_trib_adic_w			pls_fatura_trib.vl_trib_adic%type  := 0;
vl_base_nao_retido_w		pls_fatura_trib.vl_base_nao_retido%type  := 0;
vl_base_adic_w			pls_fatura_trib.vl_base_adic%type  := 0;
vl_trib_anterior_w		double precision := 0;
vl_total_base_w			double precision := 0;
vl_reducao_w			double precision := 0;
nr_seq_regra_irpf_w		regra_calculo_irpf.nr_sequencia%type;
ie_origem_titulo_w		varchar(5) := '13'; -- T?tulo da OPS - Faturamento
nr_seq_regra_w			regra_calculo_imposto.nr_sequencia%type;
ie_tipo_valor_w			pls_regra_base_trib_fat.ie_tipo_valor%type;
ie_ato_cooperado_pag_w		pls_conta_medica_resumo.ie_ato_cooperado%type;
nr_seq_prestador_pgto_w		pls_prestador.nr_sequencia%type;
nr_seq_conta_resumo_w		pls_conta_medica_resumo.nr_sequencia%type;
nr_seq_prest_exec_w		pls_prestador.nr_sequencia%type;
nr_seq_prest_atend_w		pls_prestador.nr_sequencia%type;
nr_seq_prest_solic_w		pls_prestador.nr_sequencia%type;
nr_seq_guia_w			pls_guia_plano.nr_sequencia%type;
nr_seq_nota_cobranca_w		ptu_nota_cobranca.nr_sequencia%type;
ie_tipo_pessoa_prest_ptu_w	pls_regra_base_trib_fat.ie_tipo_pessoa_prest_ptu%type;
ie_saldo_tit_rec_w		varchar(2) := 'N';
nr_seq_fatura_trib_w		pls_fatura_trib.nr_sequencia%type;
vl_equivalencia_base_w		double precision;
vl_evento_trib_w		double precision;
vl_tx_evento_trib_w		double precision;
vl_evento_tot_w			double precision;
tb_nr_seq_regra_base_fat_w	pls_util_cta_pck.t_number_table;
ie_existe_w			varchar(1) := 'N';
qt_regra_log_w			integer;
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type := 'N';
nr_seq_fat_item_trib_w		pls_fatura_item_trib.nr_sequencia%type;
vl_diferenca_w			double precision := 0;
vl_reducao_base_w		pls_fatura_trib.vl_reducao_base%type := 0;
ie_reducao_base_nf_w		pls_regra_base_trib_fat.ie_reducao_base_nf%type;

cd_darf_w			regra_calculo_imposto.cd_darf%type;

-- Vetor de eventos por tributo
type vetor is table of campos index by integer;
eventos_w			vetor;
qt_eventos_w			integer;

C01 CURSOR(	cd_pessoa_fisica_pc	pessoa_fisica.cd_pessoa_fisica%type ) FOR
	SELECT	b.cd_tributo
	from	tributo b
	where	b.ie_corpo_item	= 'C'
	and	b.ie_situacao	= 'A'
	and	b.ie_pf_pj	in ('A',CASE WHEN coalesce(cd_pessoa_fisica_pc::text, '') = '' THEN 'PJ'  ELSE 'PF' END )
	order 	by b.cd_tributo;
	
C02 CURSOR(	nr_seq_pls_fatura_pc	pls_fatura.nr_sequencia%type ) FOR
	SELECT	l.nr_seq_regra_fat,
		e.nr_seq_evento,
		i.vl_faturado,
		i.vl_faturado_ndc,
		i.nr_seq_conta_pos_contab,
		i.nr_seq_conta_pos_estab,
		i.nr_seq_conta_proc,
		null nr_seq_conta_mat,
		c.nr_seq_conta,
		e.nr_sequencia nr_seq_fat_evento,
		e.vl_evento,
		(SELECT sum(x.vl_faturado)
		from	pls_fatura_conta x
		where	x.nr_seq_fatura_evento = e.nr_sequencia) vl_fat_total,
		(select sum(x.vl_faturado_ndc)
		from	pls_fatura_conta x
		where	x.nr_seq_fatura_evento = e.nr_sequencia) vl_fat_ndc_total,
		i.ie_tipo_cobranca
	from	pls_lote_faturamento l,
		pls_fatura f,
		pls_fatura_evento e,
		pls_fatura_conta c,
		pls_fatura_proc i
	where	l.nr_sequencia = f.nr_seq_lote
	and	f.nr_sequencia = e.nr_seq_fatura
	and	e.nr_sequencia = c.nr_seq_fatura_evento
	and	c.nr_sequencia = i.nr_seq_fatura_conta
	and	f.nr_sequencia = nr_seq_pls_fatura_pc
	
union all

	select	l.nr_seq_regra_fat,
		e.nr_seq_evento,
		i.vl_faturado,
		i.vl_faturado_ndc,
		i.nr_seq_conta_pos_contab,
		i.nr_seq_conta_pos_estab,
		null nr_seq_conta_proc,
		i.nr_seq_conta_mat,
		c.nr_seq_conta,
		e.nr_sequencia nr_seq_fat_evento,
		e.vl_evento,
		(select sum(x.vl_faturado)
		from	pls_fatura_conta x
		where	x.nr_seq_fatura_evento = e.nr_sequencia) vl_fat_total,
		(select sum(x.vl_faturado_ndc)
		from	pls_fatura_conta x
		where	x.nr_seq_fatura_evento = e.nr_sequencia) vl_fat_ndc_total,
		i.ie_tipo_cobranca
	from	pls_lote_faturamento l,
		pls_fatura f,
		pls_fatura_evento e,
		pls_fatura_conta c,
		pls_fatura_mat i
	where	l.nr_sequencia = f.nr_seq_lote
	and	f.nr_sequencia = e.nr_seq_fatura
	and	e.nr_sequencia = c.nr_seq_fatura_evento
	and	c.nr_sequencia = i.nr_seq_fatura_conta
	and	f.nr_sequencia = nr_seq_pls_fatura_pc;
	
c09 CURSOR(	nr_seq_fatura_pc	pls_fatura.nr_sequencia%type ) FOR
	SELECT	z.nr_sequencia,
		z.vl_base_calculo,
		z.vl_tributo,
		x.vl_evento_origem vl_evento,
		x.nr_sequencia nr_seq_item_trib,
		z.cd_tributo
	from	pls_fatura_trib z,
		pls_fatura_item_trib x
	where	z.nr_sequencia = x.nr_seq_fatura_trib
	and	z.nr_seq_fatura = nr_seq_fatura_pc
	order by z.nr_sequencia;

BEGIN

select	coalesce(max(ie_novo_pos_estab), 'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false
where	cd_estabelecimento = cd_estabelecimento_p;

if (ie_novo_pos_estab_w = 'S') then
	pls_faturamento_pck.gerar_tributos_fatura_venc(nr_seq_pls_fatura_p, cd_estabelecimento_p, nm_usuario_p);
else
	select	coalesce(a.dt_emissao, coalesce(b.dt_emissao, clock_timestamp())),
		a.nr_seq_pagador
	into STRICT	dt_emissao_w,
		nr_seq_pagador_w
	from	pls_lote_faturamento b,
		pls_fatura a
	where	a.nr_sequencia		= nr_seq_pls_fatura_p
	and	a.nr_seq_lote		= b.nr_sequencia;

	select	max(a.cd_pessoa_fisica),
		max(a.cd_cgc)
	into STRICT	cd_pessoa_fisica_w,
		cd_cgc_w
	from	pls_contrato_pagador a
	where	a.nr_sequencia = nr_seq_pagador_w;

	for r_C01_w in C01(cd_pessoa_fisica_w) loop

		ie_tipo_valor_w			:= null;
		vl_base_calculo_w		:= 0;
		vl_base_total_w			:= 0;
		vl_reducao_base_w		:= 0;
		qt_eventos_w			:= 1;
		ie_ato_cooperado_w		:= null;
		ie_reducao_base_nf_w		:= null;
		
		tb_nr_seq_regra_base_fat_w.delete;
		qt_regra_log_w := 0;
		
		for r_C02_w in C02(nr_seq_pls_fatura_p) loop
			nr_seq_prest_exec_w		:= null;
			nr_seq_prest_atend_w		:= null;
			nr_seq_guia_w			:= null;
			nr_seq_nota_cobranca_w		:= null;
			ie_ato_cooperado_pag_w		:= null;
			nr_seq_prest_solic_w		:= null;
			ie_tipo_pessoa_prest_solic_w	:= 'A';
			ie_tipo_pessoa_prest_atend_w	:= 'A';
			ie_tipo_pessoa_prest_pag_w	:= 'A';
			ie_tipo_pessoa_prest_exec_w	:= 'A';
			ie_tipo_pessoa_prest_ptu_w	:= 'A';
			
			if (r_C02_w.nr_seq_conta IS NOT NULL AND r_C02_w.nr_seq_conta::text <> '') then
				select	max(c.nr_seq_prestador_exec),
					max(p.nr_seq_prestador),
					max(c.nr_seq_guia),
					max(c.nr_seq_nota_cobranca)
				into STRICT	nr_seq_prest_exec_w,
					nr_seq_prest_atend_w,
					nr_seq_guia_w,
					nr_seq_nota_cobranca_w
				from	pls_conta c,
					pls_protocolo_conta p
				where	p.nr_sequencia	= c.nr_seq_protocolo
				and	c.nr_sequencia	= r_C02_w.nr_seq_conta;
				
				if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
					select	max(nr_seq_prestador)
					into STRICT	nr_seq_prest_solic_w
					from	pls_guia_plano
					where	nr_sequencia	= nr_seq_guia_w;
				end if;
				
				if (nr_seq_prest_exec_w IS NOT NULL AND nr_seq_prest_exec_w::text <> '') then
					select	CASE WHEN coalesce(a.cd_pessoa_fisica::text, '') = '' THEN 'J'  ELSE 'F' END
					into STRICT	ie_tipo_pessoa_prest_exec_w
					from	pls_prestador	a
					where	a.nr_sequencia	= nr_seq_prest_exec_w;
				end if;
				
				if (nr_seq_prest_atend_w IS NOT NULL AND nr_seq_prest_atend_w::text <> '') then
					select	CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'F'  ELSE 'J' END
					into STRICT	ie_tipo_pessoa_prest_atend_w
					from	pls_prestador
					where	nr_sequencia	= nr_seq_prest_atend_w;	
				end if;
				
				if (nr_seq_prest_solic_w IS NOT NULL AND nr_seq_prest_solic_w::text <> '') then
					select	CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'F'  ELSE 'J' END
					into STRICT	ie_tipo_pessoa_prest_solic_w
					from	pls_prestador
					where	nr_sequencia	= nr_seq_prest_solic_w;	
				end if;
			end if;

			nr_seq_prestador_pgto_w	:= null;
			nr_seq_conta_resumo_w	:= null;
			if (r_C02_w.nr_seq_conta_pos_contab IS NOT NULL AND r_C02_w.nr_seq_conta_pos_contab::text <> '') then
				select	max(nr_seq_prestador_pgto),
					max(nr_seq_conta_resumo)
				into STRICT	nr_seq_prestador_pgto_w,
					nr_seq_conta_resumo_w
				from	pls_conta_pos_estab_contab
				where	nr_sequencia	= r_C02_w.nr_seq_conta_pos_contab;

				if (nr_seq_prestador_pgto_w IS NOT NULL AND nr_seq_prestador_pgto_w::text <> '') then
					select	CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'F'  ELSE 'J' END
					into STRICT	ie_tipo_pessoa_prest_pag_w
					from	pls_prestador
					where	nr_sequencia	= nr_seq_prestador_pgto_w;
				end if;
				
				if (nr_seq_conta_resumo_w IS NOT NULL AND nr_seq_conta_resumo_w::text <> '') then
					select	max(ie_ato_cooperado)
					into STRICT	ie_ato_cooperado_pag_w
					from	pls_conta_medica_resumo
					where	nr_sequencia		= nr_seq_conta_resumo_w
					and	nr_seq_conta		= r_C02_w.nr_seq_conta;
					
				elsif (nr_seq_prestador_pgto_w IS NOT NULL AND nr_seq_prestador_pgto_w::text <> '') and (r_C02_w.nr_seq_conta_proc IS NOT NULL AND r_C02_w.nr_seq_conta_proc::text <> '') then
					select	max(ie_ato_cooperado)
					into STRICT	ie_ato_cooperado_pag_w
					from	pls_conta_medica_resumo
					where	nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
					and	nr_seq_conta		= r_C02_w.nr_seq_conta
					and	nr_seq_conta_proc	= r_C02_w.nr_seq_conta_proc
					and	ie_tipo_item		!= 'I'
					and	ie_situacao		= 'A';
					
				elsif (nr_seq_prestador_pgto_w IS NOT NULL AND nr_seq_prestador_pgto_w::text <> '') and (r_C02_w.nr_seq_conta_mat IS NOT NULL AND r_C02_w.nr_seq_conta_mat::text <> '') then
					select	max(ie_ato_cooperado)
					into STRICT	ie_ato_cooperado_pag_w
					from	pls_conta_medica_resumo
					where	nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
					and	nr_seq_conta		= r_C02_w.nr_seq_conta
					and	nr_seq_conta_mat	= r_C02_w.nr_seq_conta_mat
					and	ie_tipo_item		!= 'I'
					and	ie_situacao		= 'A';
				end if;
				
				if (coalesce(ie_ato_cooperado_pag_w::text, '') = '') and (r_C02_w.nr_seq_conta_proc IS NOT NULL AND r_C02_w.nr_seq_conta_proc::text <> '') then
					select	max(ie_ato_cooperado)
					into STRICT	ie_ato_cooperado_pag_w
					from	pls_conta_proc
					where	nr_sequencia	= r_C02_w.nr_seq_conta_proc;
				
				elsif (coalesce(ie_ato_cooperado_pag_w::text, '') = '') and (r_C02_w.nr_seq_conta_mat IS NOT NULL AND r_C02_w.nr_seq_conta_mat::text <> '') then
					select	max(ie_ato_cooperado)
					into STRICT	ie_ato_cooperado_pag_w
					from	pls_conta_mat
					where	nr_sequencia	= r_C02_w.nr_seq_conta_mat;
				
				end if;
			end if;
			
			if (nr_seq_nota_cobranca_w IS NOT NULL AND nr_seq_nota_cobranca_w::text <> '') then
				if (r_C02_w.nr_seq_conta_proc IS NOT NULL AND r_C02_w.nr_seq_conta_proc::text <> '') then
					select	coalesce(max(a.ie_tipo_pessoa_prestador),'A')
					into STRICT	ie_tipo_pessoa_prest_ptu_w
					from	ptu_nota_servico a
					where	a.nr_seq_conta_proc = r_C02_w.nr_seq_conta_proc;
				
				elsif (r_C02_w.nr_seq_conta_mat IS NOT NULL AND r_C02_w.nr_seq_conta_mat::text <> '') then
					select	coalesce(max(a.ie_tipo_pessoa_prestador),'A')
					into STRICT	ie_tipo_pessoa_prest_ptu_w
					from	ptu_nota_servico a
					where	a.nr_seq_conta_mat = r_C02_w.nr_seq_conta_mat;
				end if;
			end if;
			
			SELECT * FROM pls_obter_regra_base_calc_fat(	r_C01_w.cd_tributo, cd_estabelecimento_p, nr_seq_pls_fatura_p, r_C02_w.nr_seq_regra_fat, r_C02_w.nr_seq_evento, cd_cgc_w, cd_pessoa_fisica_w, ie_ato_cooperado_pag_w, ie_tipo_pessoa_prest_solic_w, ie_tipo_pessoa_prest_atend_w, ie_tipo_pessoa_prest_pag_w, ie_tipo_pessoa_prest_exec_w, ie_tipo_pessoa_prest_ptu_w, r_C02_w.vl_faturado, r_C02_w.vl_faturado_ndc, r_C02_w.ie_tipo_cobranca, vl_base_cal_regra_w, ie_tipo_valor_regra_w, nr_seq_regra_base_calc_w, ie_reducao_base_nf_w) INTO STRICT vl_base_cal_regra_w, ie_tipo_valor_regra_w, nr_seq_regra_base_calc_w, ie_reducao_base_nf_w;

			ie_tipo_valor_w		:= ie_tipo_valor_regra_w;
			vl_base_calculo_w	:= coalesce(vl_base_calculo_w,0) + coalesce(vl_base_cal_regra_w,0); -- Valor de base de c?lculo do tributo
			vl_base_total_w		:= vl_base_total_w + (coalesce(r_C02_w.vl_faturado,0) + coalesce(r_C02_w.vl_faturado_ndc,0)); -- Valor total da base c?lculo
			
			if (nr_seq_regra_base_calc_w IS NOT NULL AND nr_seq_regra_base_calc_w::text <> '') then
				select	CASE WHEN coalesce(ie_ato_cooperado_pag_w::text, '') = '' THEN 'N'  ELSE 'S' END
				into STRICT	ie_ato_cooperado_w
				;
				
				eventos_w[qt_eventos_w].nr_seq_fat_evento	:= r_C02_w.nr_seq_fat_evento;
				eventos_w[qt_eventos_w].vl_evento_origem	:= r_C02_w.vl_evento;
				eventos_w[qt_eventos_w].vl_faturado		:= r_C02_w.vl_fat_total;
				eventos_w[qt_eventos_w].vl_faturado_ndc 	:= r_C02_w.vl_fat_ndc_total;
				
				ie_existe_w := 'N';
				if (tb_nr_seq_regra_base_fat_w.count > 0) then
					for i in tb_nr_seq_regra_base_fat_w.first.. tb_nr_seq_regra_base_fat_w.last loop
						if (tb_nr_seq_regra_base_fat_w(i) = nr_seq_regra_base_calc_w) then
							ie_existe_w := 'S';
							exit;
						end if;
					end loop;
				end if;
				
				if (ie_existe_w = 'N') then
					tb_nr_seq_regra_base_fat_w(qt_regra_log_w) := nr_seq_regra_base_calc_w;
					qt_regra_log_w := qt_regra_log_w + 1;
				end if;
				
				qt_eventos_w := qt_eventos_w + 1;
			end if;
		end loop;
		
		if (vl_base_calculo_w > 0) then
		
			nr_seq_regra_w := null;
		
			-- DEVE OBTER A REGRA COM ATO COOPERADO MARCADO CASO TENHA INFORMA??O ACIMA
			if (ie_ato_cooperado_w = 'S') then
				SELECT * FROM obter_dados_trib_tit_rec(	r_C01_w.cd_tributo, cd_estabelecimento_p, null, dt_emissao_w, ie_ato_cooperado_w, pr_imposto_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_pessoa_fisica_w, cd_cgc_w, null, ie_origem_titulo_w, null, nr_seq_regra_w, cd_darf_w) INTO STRICT pr_imposto_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, nr_seq_regra_w, cd_darf_w;
			end if;
			
			-- CASO N?O TENHA ATO COOPERADO, OBTEM DA REGRA SEM ATO COOPERADO
			if (coalesce(nr_seq_regra_w::text, '') = '') then
				ie_ato_cooperado_w := 'N';
				
				SELECT * FROM obter_dados_trib_tit_rec(	r_C01_w.cd_tributo, cd_estabelecimento_p, null, dt_emissao_w, ie_ato_cooperado_w, pr_imposto_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_pessoa_fisica_w, cd_cgc_w, null, ie_origem_titulo_w, null, nr_seq_regra_w, cd_darf_w) INTO STRICT pr_imposto_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, nr_seq_regra_w, cd_darf_w;
			end if;
			
			if (pr_imposto_w > 0) then
				
				SELECT * FROM obter_valores_tributo(	ie_acumulativo_w, pr_imposto_w, vl_minimo_base_w, vl_minimo_tributo_w, vl_soma_trib_nao_retido_w, vl_soma_trib_adic_w, vl_soma_base_nao_retido_w, vl_soma_base_adic_w, vl_base_calculo_w, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_teto_base_w, vl_trib_anterior_w, 'N', vl_total_base_w, vl_reducao_w, vl_desc_dependente_w, 0, 0, 0, null, 0, clock_timestamp(), nr_seq_regra_irpf_w) INTO STRICT pr_imposto_w, vl_base_calculo_w, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_reducao_w, vl_desc_dependente_w, nr_seq_regra_irpf_w;
				
				select	coalesce(max(ie_saldo_tit_rec),'N')
				into STRICT	ie_saldo_tit_rec_w
				from	regra_calculo_imposto
				where	nr_sequencia = nr_seq_regra_w;

				-- Altera??o necess?ria, pois a Palmas envia a NFe para prefeitura, e como tributa somente sobre a taxa de interc?mbio, deve sinalizar a diferen?a da base como redu??o

				-- Valor de diferen?a entre o total e a base de c?lculo do tributo
				vl_reducao_base_w := (vl_base_total_w - vl_base_calculo_w);
				
				-- Inserir os tributos
				insert into pls_fatura_trib(	nr_sequencia, cd_tributo, tx_tributo,
						vl_tributo, vl_base_calculo, dt_atualizacao, 
						nm_usuario, nr_seq_fatura, vl_trib_nao_retido, 
						vl_base_nao_retido, vl_trib_adic, vl_base_adic, 
						ie_tipo_valor_fat, ie_origem_tributo, dt_tributo,
						nr_seq_regra_trib, vl_reducao_base, vl_base_total, 
						ie_reducao_base_nf, dt_atualizacao_nrec, nm_usuario_nrec)
				values (	nextval('pls_fatura_trib_seq'), r_c01_w.cd_tributo, pr_imposto_w, 
						vl_tributo_w, vl_base_calculo_w, clock_timestamp(),
						nm_usuario_p, nr_seq_pls_fatura_p, vl_trib_nao_retido_w,
						vl_base_nao_retido_w, vl_trib_adic_w, vl_base_adic_w, 
						CASE WHEN ie_tipo_valor_w='VS' THEN 'NDC' WHEN ie_tipo_valor_w='VA' THEN 'F'  ELSE 'NDC+F' END , CASE WHEN ie_saldo_tit_rec_w='S' THEN 'CD'  ELSE 'C' END , dt_emissao_w,
						nr_seq_regra_w, vl_reducao_base_w, vl_base_total_w, 
						ie_reducao_base_nf_w, clock_timestamp(), nm_usuario_p)
				returning nr_sequencia into nr_seq_fatura_trib_w;
				
				-- Inserir os eventos incidentes no tributo
				if (nr_seq_fatura_trib_w IS NOT NULL AND nr_seq_fatura_trib_w::text <> '') then
				
					-- se o tipo do valor do tributo for VT ou seja NDR + Taxa ent?o ? necess?rio quebrar o registro em dois

					-- sendo um o NDR e outro a Taxa
					if (ie_tipo_valor_w = 'VT') then
						-- percorro os eventos e crio os registros NDC para cada tributo
						for qt_eventos_w in 1..eventos_w.count loop
							insert into pls_fatura_item_trib(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_fatura_evento,
								nr_seq_fatura_trib,
								vl_evento,
								vl_evento_origem,
								ie_tipo_valor_fat)
							SELECT	nextval('pls_fatura_item_trib_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								eventos_w[qt_eventos_w].nr_seq_fat_evento,
								nr_seq_fatura_trib_w,
								0,
								eventos_w[qt_eventos_w].vl_faturado_ndc,
								'NDC'
							
							where	not exists (SELECT	1
										from	pls_fatura_item_trib
										where	nr_seq_fatura_trib	= nr_seq_fatura_trib_w
										and	nr_seq_fatura_evento	= eventos_w[qt_eventos_w].nr_seq_fat_evento
										and 	ie_tipo_valor_fat = 'NDC');
						end loop;
						
						-- percorro os eventos e crio os registros de Taxa para cada tributo
						for qt_eventos_w in 1..eventos_w.count loop
							insert into pls_fatura_item_trib(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_fatura_evento,
								nr_seq_fatura_trib,
								vl_evento,
								vl_evento_origem,
								ie_tipo_valor_fat)
							SELECT	nextval('pls_fatura_item_trib_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								eventos_w[qt_eventos_w].nr_seq_fat_evento,
								nr_seq_fatura_trib_w,
								0,
								eventos_w[qt_eventos_w].vl_faturado,
								'F'
							
							where	not exists (SELECT	1
										from	pls_fatura_item_trib
										where	nr_seq_fatura_trib	= nr_seq_fatura_trib_w
										and	nr_seq_fatura_evento	= eventos_w[qt_eventos_w].nr_seq_fat_evento
										and 	ie_tipo_valor_fat = 'F');
						end loop;
					-- se n?o for ambos ent?o n?o ? necess?rio dividir o registro
					else
						-- percorre todos os eventos e cria os registros
						for qt_eventos_w in 1..eventos_w.count loop
							insert into pls_fatura_item_trib(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_fatura_evento,
								nr_seq_fatura_trib,
								vl_evento,
								vl_evento_origem,
								ie_tipo_valor_fat)
							SELECT	nextval('pls_fatura_item_trib_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								eventos_w[qt_eventos_w].nr_seq_fat_evento,
								nr_seq_fatura_trib_w,
								0,
								eventos_w[qt_eventos_w].vl_evento_origem,
								CASE WHEN ie_tipo_valor_w='VS' THEN 'NDC'  ELSE 'F' END  -- n?o ? necess?rio verificar se ? VA ou VT pois tudo que for VT entra no if
							
							where	not exists (SELECT	1
										from	pls_fatura_item_trib
										where	nr_seq_fatura_trib	= nr_seq_fatura_trib_w
										and	nr_seq_fatura_evento	= eventos_w[qt_eventos_w].nr_seq_fat_evento);
						end loop;
					end if;
					
					forall i in tb_nr_seq_regra_base_fat_w.first.. tb_nr_seq_regra_base_fat_w.last
						insert into pls_regra_base_fat_log(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_fatura_trib,
							nr_seq_regra_base_fat,
							ie_tipo_pessoa_prest_exec,
							ie_tipo_pessoa_prest_pag,
							ie_tipo_pessoa_prest_atend,
							ie_tipo_pessoa_prest_solic,
							ie_ato_cooperado,
							cd_cgc,
							cd_pessoa_fisica,
							nr_seq_evento_fat,
							nr_seq_regra_fat,
							ie_tipo_valor,
							ie_tipo_pessoa_prest_ptu,
							ie_reducao_base_nf)
						SELECT	nextval('pls_regra_base_fat_log_seq'),
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_fatura_trib_w,
							tb_nr_seq_regra_base_fat_w(i),
							ie_tipo_pessoa_prest_exec,
							ie_tipo_pessoa_prest_pag,
							ie_tipo_pessoa_prest_atend,
							ie_tipo_pessoa_prest_solic,
							ie_ato_cooperado,
							cd_cgc,
							cd_pessoa_fisica,
							nr_seq_evento_fat,
							nr_seq_regra_fat,
							ie_tipo_valor,
							ie_tipo_pessoa_prest_ptu,
							ie_reducao_base_nf
						from	pls_regra_base_trib_fat
						where	nr_sequencia	= tb_nr_seq_regra_base_fat_w(i);
				end if;
			end if;
		end if;	
	end loop;

	vl_tributo_w := 0;
	nr_seq_fatura_trib_w := null;
	for r_c09_w in c09(nr_seq_pls_fatura_p) loop
	
		if (nr_seq_fatura_trib_w != r_c09_w.nr_sequencia) then
			select	coalesce(sum(coalesce(i.vl_evento,0)),0),
				max(i.nr_sequencia),
				max(t.vl_tributo)
			into STRICT	vl_evento_trib_w,
				nr_seq_fat_item_trib_w,
				vl_tributo_w
			from	pls_fatura_item_trib i,
				pls_fatura_trib t
			where	t.nr_sequencia		= i.nr_seq_fatura_trib
			and	i.nr_seq_fatura_trib	= nr_seq_fatura_trib_w
			and	i.vl_evento		> 0;
			
			-- Diferen?a do tributos
			vl_diferenca_w := coalesce(vl_tributo_w,0) - coalesce(vl_evento_trib_w,0);
			
			-- Arredondamento
			if (vl_diferenca_w != 0) and (vl_diferenca_w between -0.01 and 0.01) then
				update	pls_fatura_item_trib
				set	vl_evento	= vl_evento + vl_diferenca_w
				where	nr_sequencia	= nr_seq_fat_item_trib_w;
			end if;
		end if;

		vl_diferenca_w := 0;
		vl_equivalencia_base_w := 0;
		vl_tx_evento_trib_w := 0;
		vl_evento_trib_w := 0;
		nr_seq_fat_item_trib_w := null;

		select	coalesce(sum(coalesce(vl_evento_origem,0)),0)
		into STRICT	vl_evento_tot_w
		from	pls_fatura_item_trib
		where	nr_seq_fatura_trib	= r_c09_w.nr_sequencia;
		
		if (vl_evento_tot_w > 0) then
			vl_equivalencia_base_w := (r_c09_w.vl_base_calculo * r_c09_w.vl_evento) / vl_evento_tot_w;
		
			if (r_c09_w.vl_base_calculo > 0) then
				vl_tx_evento_trib_w := (vl_equivalencia_base_w * 100) / r_c09_w.vl_base_calculo;
			end if;
			
			if (vl_tx_evento_trib_w > 0) then
				vl_evento_trib_w := r_c09_w.vl_tributo * (vl_tx_evento_trib_w/100);
			end if;
		end if;
		
		update	pls_fatura_item_trib
		set	vl_evento	= coalesce(vl_evento_trib_w,0)
		where	nr_sequencia	= r_c09_w.nr_seq_item_trib;
		
		nr_seq_fatura_trib_w := r_c09_w.nr_sequencia;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_tributos_fatura_venc ( nr_seq_pls_fatura_p pls_fatura.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

