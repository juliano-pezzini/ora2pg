-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE bionexo_gerar_ordem_compra ( nr_cot_compra_p bigint, ie_forma_calc_entrega_p text, nm_usuario_p text) AS $body$
DECLARE


cd_estabelecimento_w		integer;
cd_material_w			integer	:= 0;
nr_item_cot_compra_w		integer	:= 0;
nr_item_oci_w			integer	:= 0;
nr_ordem_compra_w		bigint	:= 0;
nr_seq_fornecedor_w		bigint	:= 0;
nr_seq_fornecedor_w2		bigint	:= 0;
qt_conv_unid_fornec_w		double precision;
qt_material_w			double precision	:= 0;
qt_material_oci_w		double precision	:= 0;
qt_material_solic_w		double precision	:= 0;
vl_unitario_w			double precision	:= 0;
pr_desconto_w			double precision	:= 0;
vl_desconto_w			double precision	:= 0;
cd_unidade_w			varchar(30)	:= '0';
ds_material_direto_w		varchar(255)	:= '0';
ds_observacao_w			varchar(255)	:= '0';
ds_marca_w			varchar(30)	:= '';
ds_marca2_w			varchar(30)	:= '';
ie_situacao_w			varchar(1)	:= '0';
dt_entrega_w			timestamp;
dt_validade_w			timestamp;
ie_ajusta_unid_fornec_w		varchar(1)	:= 'S';
nr_contrato_w			bigint;
dt_entrega_ww			timestamp;
nr_solic_compra_w			bigint;
nr_item_solic_compra_w		bigint;
nr_documento_externo_w		varchar(100);
dt_baixa_w			timestamp;
qt_itens_solic_w		bigint;
qt_itens_baixados_w		bigint;
qt_mat_solic_w			double precision;
qt_mat_ordens_w			double precision;
nr_ordem_liberada_w		ordem_compra.nr_ordem_compra%type;
ds_material_item_w		material.ds_material%type;
nr_item_oci_lib_w		ordem_compra_item.nr_item_oci%type;
ds_erro_w			varchar(255);
ie_divergente_w			varchar(1) := 'N';
nr_solic_compra_ww		solic_compra.nr_solic_compra%type;

c01 CURSOR FOR
SELECT	a.cd_estabelecimento,
	c.nr_seq_cot_forn,
	c.nr_item_cot_compra,
	c.cd_material,
	c.cd_unidade_medida_compra,
	coalesce(c.ie_situacao,'A'),
	sum(c.qt_material),
	c.ds_observacao,
	substr(coalesce(c.ds_marca_fornec,CASE WHEN position('(' in c.ds_marca)=0 THEN c.ds_marca  ELSE substr(c.ds_marca,1,position('(' in c.ds_marca)-1) END ),1,30),
	substr(CASE WHEN position('(' in c.ds_marca)=0 THEN c.ds_marca  ELSE substr(c.ds_marca,1,position('(' in c.ds_marca)-1) END ,1,30),
	c.dt_limite_entrega,
	coalesce(c.vl_unitario_material,0),
	coalesce(c.pr_desconto,0),
	coalesce(c.qt_conv_unid_fornec,0),
	c.dt_validade,
	coalesce(c.vl_desconto,0)
from	cot_compra a,
	cot_compra_resumo_v c
where	c.nr_cot_compra      = nr_cot_compra_p
and (substr(obter_se_existe_cot_resumo(c.nr_cot_compra),1,1) = 'S')
and	c.nr_cot_compra      = a.nr_cot_compra
and	coalesce(obter_dados_cot_compra_item(a.nr_cot_compra, c.nr_item_cot_compra, 'DBI')::text, '') = ''
group by
	a.cd_estabelecimento,
	c.nr_seq_cot_forn,
	c.nr_item_cot_compra,
	c.cd_material,
	c.cd_unidade_medida_compra,
	coalesce(c.ie_situacao,'A'),
	c.ds_observacao,
	coalesce(c.ds_marca_fornec,CASE WHEN position('(' in c.ds_marca)=0 THEN c.ds_marca  ELSE substr(c.ds_marca,1,position('(' in c.ds_marca)-1) END ),
	substr(CASE WHEN position('(' in c.ds_marca)=0 THEN c.ds_marca  ELSE substr(c.ds_marca,1,position('(' in c.ds_marca)-1) END ,1,30),
	c.dt_limite_entrega,
	coalesce(c.vl_unitario_material,0),
	coalesce(c.pr_desconto,0),
	coalesce(c.qt_conv_unid_fornec,0),
	c.dt_validade,
	coalesce(c.vl_desconto,0)
order by c.nr_seq_cot_forn,
	nr_item_cot_compra;

c02 CURSOR FOR
SELECT	nr_ordem_compra
from	ordem_compra_item
where	nr_cot_compra = nr_cot_compra_p
group by nr_ordem_compra;

c03 CURSOR FOR
SELECT	nr_ordem_compra,
	nr_item_oci,
	qt_material,
	nr_item_cot_compra
from	ordem_compra_item
where	nr_cot_compra = nr_cot_compra_p
and	(nr_cot_compra IS NOT NULL AND nr_cot_compra::text <> '');

c04 CURSOR FOR
SELECT	distinct
	a.nr_solic_compra,
	a.nr_item_solic_compra,
	a.qt_material
from	cot_compra_solic_agrup a
where	nr_cot_compra = nr_cot_compra_p
and	nr_item_cot_compra = nr_item_cot_compra_w
and	(nr_solic_compra IS NOT NULL AND nr_solic_compra::text <> '');

c05 CURSOR FOR
SELECT	a.nr_solic_compra
from	cot_compra_solic_agrup a
where	nr_cot_compra = nr_cot_compra_p
and	(nr_solic_compra IS NOT NULL AND nr_solic_compra::text <> '')
group by a.nr_solic_compra;

c06 CURSOR FOR
SELECT	nr_item_solic_compra,
	nr_solic_compra,
	substr(obter_desc_material(cd_material),1,255) ds_material,
	nr_item_oci
from	ordem_compra_item
where	nr_ordem_compra = nr_ordem_compra_w;



BEGIN
select	coalesce(max(b.ie_ajusta_unid_fornec),'N'),
	coalesce(max(a.nr_documento_externo),'')
into STRICT	ie_ajusta_unid_fornec_w,
	nr_documento_externo_w
from	parametro_compras b,
	cot_compra a
where	a.cd_estabelecimento = b.cd_estabelecimento
and	a.nr_cot_compra = nr_cot_compra_p;

open C01;
loop
fetch C01 into	
	cd_estabelecimento_w,
	nr_seq_fornecedor_w,
	nr_item_cot_compra_w,
	cd_material_w,
	cd_unidade_w,
	ie_situacao_w,
	qt_material_w,
	ds_observacao_w,
	ds_marca_w,
	ds_marca2_w,
	dt_entrega_w,
	vl_unitario_w,
	pr_desconto_w,
	qt_conv_unid_fornec_w,
	dt_validade_w,
	vl_desconto_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	select	max(nr_contrato)
	into STRICT	nr_contrato_w
	from	cot_compra_item
	where	nr_cot_compra = nr_cot_compra_p
	and	nr_item_cot_compra = nr_item_cot_compra_w;
	
	if (ie_forma_calc_entrega_p = 'L') then
			dt_entrega_ww	:= dt_entrega_w + coalesce(obter_dados_cot_compra_forn(nr_cot_compra_p, nr_seq_fornecedor_w,'DE'), 0);
	elsif (ie_forma_calc_entrega_p = 'F') then
		dt_entrega_ww	:= dt_entrega_w;
	else
		dt_entrega_ww	:= trunc(clock_timestamp(),'dd') + coalesce(obter_dados_cot_compra_forn(nr_cot_compra_p, nr_seq_fornecedor_w,'DE'), 0);
	end if;

	if (nr_seq_fornecedor_w2 <> nr_seq_fornecedor_w) then	
		nr_ordem_compra_w := grava_ordem_compra(
			nr_cot_compra_p, cd_estabelecimento_w, nr_seq_fornecedor_w, nm_usuario_p, nr_ordem_compra_w);		
			
		CALL grava_item_ordem_compra(
			nr_ordem_compra_w,
			cd_material_w,
			cd_unidade_w,
			vl_unitario_w,
			qt_material_w,
			ds_observacao_w,
			ds_marca_w,
			ds_marca2_w,
			nm_usuario_p,
			ie_situacao_w,
			dt_entrega_ww,
			pr_desconto_w,
			nr_cot_compra_p,
			nr_item_cot_compra_w,
			nr_seq_fornecedor_w,
			qt_conv_unid_fornec_w,
			ie_ajusta_unid_fornec_w,
			dt_validade_w,
			'N',
			coalesce(vl_desconto_w,0),
			nr_contrato_w,
			null,
			null,
			null);
			
		nr_seq_fornecedor_w2 	:= nr_seq_fornecedor_w;
	else
		CALL grava_item_ordem_compra(
			nr_ordem_compra_w,
			cd_material_w,
			cd_unidade_w,
			vl_unitario_w,
			qt_material_w,
			ds_observacao_w,
			ds_marca_w,
			ds_marca2_w,
			nm_usuario_p,
			ie_situacao_w,
			dt_entrega_ww,
			pr_desconto_w,
			nr_cot_compra_p,
			nr_item_cot_compra_w,
			nr_seq_fornecedor_w,
			qt_conv_unid_fornec_w,
			ie_ajusta_unid_fornec_w,
			dt_validade_w,
			'N',
			coalesce(vl_desconto_w,0),
			nr_contrato_w,
			null,
			null,
			null);
	end if;
	
	CALL gerar_ordem_compra_venc( nr_ordem_compra_w, nm_usuario_p);
	calcular_liquido_ordem_compra( nr_ordem_compra_w, nm_usuario_p);
	
	update	ordem_compra
	set	ie_sistema_origem 	= 'WCF'
	where	nr_ordem_compra		= nr_ordem_compra_w;
	
	begin
	update	ordem_compra
	set	nr_documento_externo	= nr_documento_externo_w
	where	nr_ordem_compra		= nr_ordem_compra_w;
	exception
	when others then
		nr_documento_externo_w := nr_documento_externo_w;
	end;
	end;
end loop;
close C01;

commit;

open C02;
loop
fetch C02 into	
	nr_ordem_compra_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	ie_divergente_w := 'N';
	
	open C06;
	loop
	fetch C06 into	
		nr_item_solic_compra_w,
		nr_solic_compra_ww,
		ds_material_item_w,
		nr_item_oci_lib_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin
		
		if (nr_solic_compra_ww > 0) then
		
			select	sum(qt_material)			
			into STRICT	qt_mat_solic_w		
			from	solic_compra_item
			where	nr_item_solic_compra = nr_item_solic_compra_w
			and	nr_solic_compra = nr_solic_compra_ww;
			
			select	sum(b.qt_material)
			into STRICT	qt_mat_ordens_w
			from	ordem_compra a,
				ordem_compra_item b
			where	a.nr_ordem_compra = b.nr_ordem_compra
			and	b.nr_item_solic_compra = nr_item_solic_compra_w
			and	b.nr_solic_compra = nr_solic_compra_ww
			and	((a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '') or (a.nr_ordem_compra = nr_ordem_compra_w));
			
			if (qt_mat_ordens_w > qt_mat_solic_w) then
				ie_divergente_w := 'S';									
			end if;		
		end if;
		end;
	end loop;
	close C06;
		
	if (ie_divergente_w = 'N') then	
	
		update	ordem_compra_item
		set	qt_original	= qt_material
		where	nr_ordem_compra	= nr_ordem_compra_w
		and	coalesce(qt_original::text, '') = '';
		
		update	ordem_compra_item
		set	vl_unit_mat_original = vl_unitario_material
		where	nr_ordem_compra	= nr_ordem_compra_w
		and	coalesce(vl_unit_mat_original::text, '') = '';
		
		update	ordem_compra_item
		set	dt_aprovacao	= clock_timestamp()
		where	nr_ordem_compra	= nr_ordem_compra_w;
		
		update	ordem_compra
		set	dt_liberacao	= clock_timestamp(),
			nm_usuario_lib	= nm_usuario_p,
			dt_aprovacao	= clock_timestamp()
		where	nr_ordem_compra	= nr_ordem_compra_w;		
	

	end if;
	
	end;
end loop;
close C02;


open C03;
loop
fetch C03 into	
	nr_ordem_compra_w,
	nr_item_oci_w,
	qt_material_oci_w,
	nr_item_cot_compra_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	
	open C04;
	loop
	fetch C04 into	
		nr_solic_compra_w,
		nr_item_solic_compra_w,
		qt_material_solic_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		
		if (qt_material_oci_w >= qt_material_solic_w) then
			CALL baixar_item_solic_bionexo(nr_ordem_compra_w, nr_solic_compra_w, nr_item_solic_compra_w, nm_usuario_p);			
		end if;	
		
		end;
	end loop;
	close C04;
	
	end;
end loop;
close C03;

open C05;
loop
fetch C05 into	
	nr_solic_compra_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin
	
	select	dt_baixa
	into STRICT	dt_baixa_w
	from	solic_compra
	where	nr_solic_compra = nr_solic_compra_w;
	
	if (dt_baixa_w IS NOT NULL AND dt_baixa_w::text <> '') then
		CALL atualiza_status_solic_bionexo(nr_solic_compra_w, 'RC', '', nm_usuario_p);
	else
		select	count(*)
		into STRICT	qt_itens_solic_w
		from	solic_compra_item
		where	nr_solic_compra = nr_solic_compra_w;
		
		select	count(*)
		into STRICT	qt_itens_baixados_w
		from	solic_compra_item
		where	nr_solic_compra = nr_solic_compra_w
		and	(dt_baixa IS NOT NULL AND dt_baixa::text <> '');
		
		if (qt_itens_solic_w > qt_itens_baixados_w) then
			CALL atualiza_status_solic_bionexo(nr_solic_compra_w, 'RP', '', nm_usuario_p);
		end if;	
	end if;
	end;
end loop;
close C05;

commit;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE bionexo_gerar_ordem_compra ( nr_cot_compra_p bigint, ie_forma_calc_entrega_p text, nm_usuario_p text) FROM PUBLIC;

