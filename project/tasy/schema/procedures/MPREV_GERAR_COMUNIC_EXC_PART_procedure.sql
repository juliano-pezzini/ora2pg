-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mprev_gerar_comunic_exc_part ( nr_seq_participante_p bigint, nm_pessoa_fisica_p text, dt_rescisao_p timestamp, dt_obito_p timestamp, ie_origem_p text, dt_reativacao_p timestamp, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar uma comunicaçao interna, avisando os responsáveis pelo paciente quando o mesmo foi rescindido
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [ ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atençao:
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dt_referencia_w		timestamp;
ds_lista_usuario_w	varchar(4000)	:= null;
ds_titulo_w		varchar(255);
ds_comunicado_w		varchar(4000);
nm_usuario_w		usuario.nm_usuario%type;
nm_participante_w	pessoa_fisica.nm_pessoa_fisica%type;
ds_email_destino_w	usuario.ds_email%type;
ds_email_origem_w	usuario.ds_email%type;
lista_para_email_w	dbms_sql.varchar2_table;
ie_forma_comunic_w      varchar(255);
ds_email_w			varchar(255);
ds_lista_emails_w	varchar(4000)	:= '';
ie_email_lista_w	integer := 0;

/* Obter os profissionais responsáveis do participante */

c01 CURSOR( nr_seq_participante_pc mprev_programa_partic.nr_seq_participante%type ) FOR
	-- TRAZ TODOS OS EMAILS DAS PESSOAS RESPONSÁVEIS
	SELECT	a.nm_usuario nm_usuario,
			coalesce(a.ds_email, obter_email_pf(a.cd_pessoa_fisica)) ds_email
	from	usuario a,
			mprev_prog_partic_prof b,
			mprev_programa_partic c
	where	a.cd_pessoa_fisica = b.cd_profissional
	and		b.nr_seq_programa_partic = c.nr_sequencia
	and		c.nr_seq_participante = nr_seq_participante_pc
	and		clock_timestamp() between pkg_date_utils.start_of(c.dt_inclusao, 'DAY') and pkg_date_utils.end_of(coalesce(c.dt_exclusao, clock_timestamp()), 'DAY')
	and		clock_timestamp() between pkg_date_utils.start_of(b.dt_inicio_acomp, 'DAY') and pkg_date_utils.end_of(coalesce(b.dt_fim_acomp, clock_timestamp()), 'DAY')
	and		a.ie_situacao in ('A', 'B')
	
union

	-- TRAZ TODOS OS EMAILS DAS PESSOAS RESPONSÁVEIS DENTRO DAS EQUIPES
	SELECT	a.nm_usuario,
			coalesce(a.ds_email, obter_email_pf(a.cd_pessoa_fisica))
	from	usuario a,
			mprev_equipe_profissional b,
			mprev_equipe c,
			mprev_prog_partic_prof d,
			mprev_programa_partic e
	where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
	and		b.nr_seq_equipe = c.nr_sequencia
	and		c.nr_sequencia = d.nr_seq_equipe
	and		d.nr_seq_programa_partic = e.nr_sequencia
	and		e.nr_seq_participante = nr_seq_participante_pc
	and		clock_timestamp() between pkg_date_utils.start_of(e.dt_inclusao, 'DAY') and pkg_date_utils.end_of(coalesce(e.dt_exclusao, clock_timestamp()), 'DAY')
	and		clock_timestamp() between pkg_date_utils.start_of(d.dt_inicio_acomp, 'DAY') and pkg_date_utils.end_of(coalesce(d.dt_fim_acomp, clock_timestamp()), 'DAY')
	and		c.ie_situacao = 'A'
	and		a.ie_situacao in ('A', 'B');
	
BEGIN
dt_referencia_w	:= coalesce(dt_rescisao_p,coalesce(dt_obito_p,clock_timestamp()));

if (nr_seq_participante_p IS NOT NULL AND nr_seq_participante_p::text <> '') then
	for r_c01 in c01(nr_seq_participante_p) loop
		-- Concatenar todos os usuários
		if (coalesce(ds_lista_usuario_w::text, '') = '') then
			ds_lista_usuario_w	:= r_c01.nm_usuario || ',';
		else
			ds_lista_usuario_w	:= ds_lista_usuario_w || ' ' || r_c01.nm_usuario || ',';
		end if;
		
		-- Esse select serve para validar o email e ver se ele já não está na lista de emails para enviar
		select	max(r_c01.ds_email),
				position(r_c01.ds_email in ds_lista_emails_w) -- Vai trazer qual a posição que o email do cursor está na lista, caso não esteja a posição será 0
		into STRICT	ds_email_w,
				ie_email_lista_w
		
		-- Restrição para verificar o email
		where	REGEXP_LIKE(r_c01.ds_email, '^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$');
		
		-- O email tem que ter passado na validação, pois se não estará nulo

		-- E o email não deve estar na lista ainda, por isso que o ie_email_lista_w tem que ser 0
		if ((ds_email_w IS NOT NULL AND ds_email_w::text <> '') and ie_email_lista_w = 0) then
			if (coalesce(ds_lista_emails_w::text, '') = '') then
				ds_lista_emails_w	:= ds_email_w || ',';
			else
				ds_lista_emails_w	:= ds_lista_emails_w || ' ' || ds_email_w || ',';
			end if;
		end if;
	end loop;
	
	--Tratamento realizado para nao gerar "Mutante quando" quando a procedure for chamada pela trigger da pessoa_fisica.
	if (coalesce(nm_pessoa_fisica_p::text, '') = '') then
		select	obter_nome_pf(a.cd_pessoa_fisica)
		into STRICT	nm_participante_w
		from	mprev_participante a
		where	a.nr_sequencia	= nr_seq_participante_p;
	else
		nm_participante_w	:= nm_pessoa_fisica_p;
	end if;
	
	ds_titulo_w	:= substr(obter_texto_dic_objeto(358668,wheb_usuario_pck.get_nr_seq_idioma,null),1,255);
	--'Mensagem automática: '
	ds_comunicado_w	:= obter_texto_dic_objeto(341576,wheb_usuario_pck.get_nr_seq_idioma,null);
	
	--R (rescisao) , S (óbito) e A (reativaçao)
	if (coalesce(ie_origem_p,'N') = 'R') then		
		--O participante ' || nm_participante_w || ' foi rescindido de seu contrato em ' || dt_referencia_w || '.'; 
		ds_comunicado_w	:= ds_comunicado_w ||chr(13)||chr(10)||
			obter_texto_dic_objeto(341577,wheb_usuario_pck.get_nr_seq_idioma,'nm_participante='||nm_participante_w||';dt_referencia='||dt_referencia_w);
	elsif (coalesce(ie_origem_p,'N') = 'S') then		
		--Participante ||nm_participante_w|| foi excluído da medicina preventiva pois foi informado a data de óbito no cadastro de pessoa física.
		ds_comunicado_w	:= ds_comunicado_w ||chr(13)||chr(10)||
			obter_texto_dic_objeto(341592,wheb_usuario_pck.get_nr_seq_idioma,'nm_participante='||nm_participante_w);
	elsif (coalesce(ie_origem_p,'N') = 'A') and (dt_reativacao_p IS NOT NULL AND dt_reativacao_p::text <> '') then
		--O participante  ||nm_participante_w|| foi incluso em novo contrato em || dt_referencia_w ||.
		ds_comunicado_w	:= ds_comunicado_w ||chr(13)||chr(10)||
			obter_texto_dic_objeto(358597,wheb_usuario_pck.get_nr_seq_idioma,'nm_participante='||nm_participante_w||';dt_referencia='||dt_reativacao_p);
	else
		ds_titulo_w	:= null;
		ds_comunicado_w := null;
	end if;
	
    -- Forma de comunicar equipe quando rescindir/reativar contrato do participante ou quando o mesmo for a óbito. (C - CI, E - E-mail, A - Ambos)
	select	coalesce(max(a.ie_forma_comunic),'A')
	into STRICT	ie_forma_comunic_w	
	from	mprev_config_geral a
	where 	cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

    -- Enviar CI para os usuários
	if (ie_forma_comunic_w in ('C','A')) then
		begin
			CALL gerar_comunic_padrao(	clock_timestamp(),
									ds_titulo_w,
									ds_comunicado_w,
									nm_usuario_p,
									'N',
									ds_lista_usuario_w,
									'N',
									null,null,null,null,clock_timestamp(),null,null);
		end;
	end if;
	
	-- Enviar EMAIL para os usuários
	if (ie_forma_comunic_w in ('E','A')) then
		select	max(ds_email)
		into STRICT	ds_email_origem_w
		from	usuario
		where	nm_usuario = nm_usuario_p;

		if (ds_email_origem_w IS NOT NULL AND ds_email_origem_w::text <> '' AND ds_lista_emails_w IS NOT NULL AND ds_lista_emails_w::text <> '') then
			lista_para_email_w := obter_lista_string(ds_lista_emails_w, ', ');
			
			for	i in lista_para_email_w.first..lista_para_email_w.last loop
				ds_email_destino_w := trim(both lista_para_email_w(i));
				
				if (ds_email_destino_w IS NOT NULL AND ds_email_destino_w::text <> '') then
					begin
					CALL enviar_email(ds_titulo_w, ds_comunicado_w, ds_email_origem_w, ds_email_destino_w, nm_usuario_p, 'M');
					exception
						when others then	
						CALL gravar_log_tasy(100,substr('user=' || nm_usuario_p|| ' error=' || sqlerrm,1,2000),nm_usuario_p);
					end;
				end if;
			end loop;
		end if;
	end if;
end if;

/* Nao pode ter commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_gerar_comunic_exc_part ( nr_seq_participante_p bigint, nm_pessoa_fisica_p text, dt_rescisao_p timestamp, dt_obito_p timestamp, ie_origem_p text, dt_reativacao_p timestamp, nm_usuario_p text) FROM PUBLIC;

