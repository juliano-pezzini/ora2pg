-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_contest_a550 ( nr_seq_lote_contest_p pls_lote_contestacao.nr_sequencia%type, nr_seq_camara_contest_p ptu_camara_contestacao.nr_sequencia%type, nr_seq_camara_contest_ant_p ptu_camara_contestacao.nr_sequencia%type, nr_seq_pls_fatura_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


ie_bloquear_w			varchar(10);
ie_tipo_w			varchar(1);
vl_apresentado_w		double precision;
vl_aceito_w			double precision;
vl_atual_w			double precision;
qt_apresentada_w		double precision;
nr_fatura_w			ptu_camara_contestacao.nr_fatura%type;
nr_seq_lote_contest_w		bigint;
nr_seq_contestacao_w		bigint;
nr_seq_a500_w			ptu_questionamento.nr_seq_a500%type;
nr_seq_conta_w			bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_lote_disc_w		bigint;
ie_tipo_arquivo_w		integer;
ie_status_conta_w		varchar(2);
vl_total_fatura_w		double precision;
vl_total_contestacao_w		double precision;
vl_total_pago_w			double precision;
vl_total_ndc_a500_w		double precision;
vl_total_contest_ndc_w		double precision;
vl_total_pago_ndc_w		double precision;
vl_contestado_w			double precision;
vl_reconhecido_w		double precision;
nr_nota_w			ptu_nota_cobranca.nr_nota%type;
nr_nota_numerico_w		ptu_nota_cobranca.nr_nota_numerico%type;
nr_seq_ptu_questionamento_w	bigint;
cd_servico_w			ptu_questionamento.cd_servico%type;
qt_registro_w			bigint := 0;
ie_tipo_tabela_w		smallint;
nr_seq_ptu_quest_rrs_w		ptu_questionamento_rrs.nr_sequencia%type;
vl_cobrado_w			double precision;
nr_seq_nota_servico_w		ptu_nota_servico.nr_sequencia%type;
ie_processo_pgto_w		pls_lote_contestacao.ie_processo_pgto%type;

C01 CURSOR FOR
	SELECT	nr_seq_a500,
		nr_sequencia,
		nr_nota,
		cd_servico,
		nr_seq_conta_proc,
		nr_seq_conta_mat,
		nr_seq_conta,
		ie_tipo_tabela,
		nr_nota_numerico,
		null,
		nr_seq_nota_servico
	from	ptu_questionamento
	where	nr_seq_contestacao	= nr_seq_camara_contest_p
	and	ie_tipo_acordo		<> '11'
	
union all

	SELECT	s.nr_seq_a500,
		null,
		s.nr_nota,
		s.cd_servico,
		s.nr_seq_conta_proc,
		s.nr_seq_conta_mat,
		c.nr_seq_conta,
		s.tp_tabela,
		s.nr_nota_numerico,
		s.nr_sequencia,
		null
	from	ptu_questionamento_rrs	c,
		ptu_quest_serv_rrs	s
	where	c.nr_sequencia		= s.nr_seq_quest_rrs
	and	c.nr_seq_contestacao	= nr_seq_camara_contest_p
	and	s.tp_acordo		<> '11';


BEGIN
if (nr_seq_camara_contest_p IS NOT NULL AND nr_seq_camara_contest_p::text <> '') then
	select	max(ie_tipo_arquivo)
	into STRICT	ie_tipo_arquivo_w
	from	ptu_camara_contestacao
	where	nr_sequencia	= nr_seq_camara_contest_p;
	
	-- Obter regra de bloqueamento do item da fatura
	ie_bloquear_w := pls_obter_regra_bloq_fat(cd_estabelecimento_p, ie_bloquear_w);
	
	select	max(nr_fatura),
		coalesce(max(vl_total_fatura),0),
		coalesce(max(vl_total_contestacao),0),
		coalesce(max(vl_total_pago),0),
		coalesce(max(vl_total_ndc_a500),0),
		coalesce(max(vl_total_contest_ndc),0),
		coalesce(max(vl_total_pago_ndc),0)
	into STRICT	nr_fatura_w,
		vl_total_fatura_w,
		vl_total_contestacao_w,
		vl_total_pago_w,
		vl_total_ndc_a500_w,
		vl_total_contest_ndc_w,
		vl_total_pago_ndc_w
	from	ptu_camara_contestacao
	where	nr_sequencia	= nr_seq_camara_contest_p;
	
	vl_contestado_w := vl_total_contestacao_w + vl_total_contest_ndc_w;
	
	if (coalesce(nr_seq_lote_contest_p::text, '') = '') then
		select	nextval('pls_lote_contestacao_seq')
		into STRICT	nr_seq_lote_contest_w
		;
		
		insert	into	pls_lote_contestacao(	nr_sequencia,
				cd_estabelecimento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_pls_fatura,
				nr_seq_protocolo,
				dt_referencia,
				ie_envio_recebimento,
				ie_status,
				dt_fechamento,
				dt_cancelamento,
				nr_nota_credito_debito,
				vl_apresentado,
				vl_atual,
				vl_contestado,
				vl_pago_fatura,
				vl_contestado_fatura,
				vl_pago_ndc,
				vl_contestado_ndc)
			values (	nr_seq_lote_contest_w,
				cd_estabelecimento_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_pls_fatura_p,
				null,
				clock_timestamp(),
				'R',
				'E',
				clock_timestamp(),
				null,
				null,
				0,
				vl_contestado_w,
				vl_contestado_w,
				vl_total_pago_w,
				vl_total_contestacao_w,
				vl_total_pago_ndc_w,
				vl_total_contest_ndc_w);
	else
		nr_seq_lote_contest_w := nr_seq_lote_contest_p;
		
		update	pls_lote_contestacao
		set	ie_status 		= 'E',
			dt_fechamento 		= clock_timestamp(),
			vl_apresentado 		= 0,
			vl_atual 		= vl_contestado_w,
			vl_contestado 		= vl_contestado_w,
			vl_pago_fatura 		= vl_total_pago_w,
			vl_contestado_fatura 	= vl_total_contestacao_w,
			vl_pago_ndc 		= vl_total_pago_ndc_w,
			vl_contestado_ndc 	= vl_total_contest_ndc_w
		where	nr_sequencia 		= nr_seq_lote_contest_w;
	end if;
	
	update	ptu_camara_contestacao
	set	nr_seq_lote_contest	= nr_seq_lote_contest_w
	where	nr_sequencia	 	= nr_seq_camara_contest_p
	and	coalesce(nr_seq_lote_contest::text, '') = '';
	
	open C01;
	loop
	fetch C01 into
		nr_seq_a500_w,
		nr_seq_ptu_questionamento_w,
		nr_nota_w,
		cd_servico_w,
		nr_seq_conta_proc_w,
		nr_seq_conta_mat_w,
		nr_seq_conta_w,
		ie_tipo_tabela_w,
		nr_nota_numerico_w,
		nr_seq_ptu_quest_rrs_w,
		nr_seq_nota_servico_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (nr_seq_conta_w IS NOT NULL AND nr_seq_conta_w::text <> '') then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_contestacao_w
			from	pls_contestacao a
			where	a.nr_seq_conta	= nr_seq_conta_w
			and	a.nr_seq_lote	= nr_seq_lote_contest_w;
			
			/* Gerar as contas do lote da contestacao */
			if (coalesce(nr_seq_contestacao_w::text, '') = '') then
				select	nextval('pls_contestacao_seq')
				into STRICT	nr_seq_contestacao_w
				;
				
				insert	into	pls_contestacao(	nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_conta,
						ie_status,
						vl_original,
						vl_conta,
						vl_atual,
						nr_seq_lote,
						nr_nota)
				values (		nr_seq_contestacao_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_conta_w,
						'D',
						0,
						0,
						0,
						nr_seq_lote_contest_w,
						nr_nota_w);
			end if;
			
			-- Procedimentos da contestacao
			if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
				if (nr_seq_ptu_questionamento_w IS NOT NULL AND nr_seq_ptu_questionamento_w::text <> '') then
					select	coalesce(qt_cobrada,1),
						coalesce(vl_cobrado,0) + coalesce(vl_cobr_co,0) + coalesce(vl_cobr_filme,0) +
						coalesce(vl_cobr_adic_co,0) + coalesce(vl_cobr_adic_filme,0) + coalesce(vl_cobr_adic_serv,0),
						coalesce(vl_acordo,0) + coalesce(vl_acordo_co,0) + coalesce(vl_acordo_filme,0) + coalesce(vl_acordo_adic_co,0) + 
						coalesce(vl_acordo_adic_filme,0) + coalesce(vl_acordo_adic_serv,0),
						coalesce(vl_reconhecido,0) + coalesce(vl_reconh_co,0) + coalesce(vl_reconh_filme,0) + 
						coalesce(vl_reconh_adic_co,0) + coalesce(vl_reconh_adic_filme,0) + coalesce(vl_reconh_adic_serv,0)
					into STRICT	qt_apresentada_w,
						vl_apresentado_w,
						vl_aceito_w,
						vl_reconhecido_w
					from	ptu_questionamento
					where	nr_seq_a500	= nr_seq_a500_w
					and	nr_sequencia	= nr_seq_ptu_questionamento_w;
					
				elsif (nr_seq_ptu_quest_rrs_w IS NOT NULL AND nr_seq_ptu_quest_rrs_w::text <> '') then
					select	coalesce(s.qt_cobrada,1),
						coalesce(s.vl_serv,0),
						coalesce(s.vl_acordo_serv,0),
						coalesce(s.vl_reconh_serv,0)
					into STRICT	qt_apresentada_w,
						vl_apresentado_w,
						vl_aceito_w,
						vl_reconhecido_w
					from	ptu_questionamento_rrs	c,
						ptu_quest_serv_rrs	s
					where	c.nr_sequencia	= s.nr_seq_quest_rrs
					and	s.nr_seq_a500	= nr_seq_a500_w
					and	s.nr_sequencia	= nr_seq_ptu_quest_rrs_w;
				end if;
				
				if (nr_seq_nota_servico_w IS NOT NULL AND nr_seq_nota_servico_w::text <> '') then
					select	coalesce(vl_procedimento,0) + coalesce(vl_filme,0) + coalesce(vl_custo_operacional,0) + coalesce(vl_adic_procedimento,0) + coalesce(vl_adic_filme,0) + coalesce(vl_adic_co,0)
					into STRICT	vl_cobrado_w
					from	ptu_nota_servico
					where	nr_sequencia = nr_seq_nota_servico_w;
				else
					begin
						select	sum(coalesce(a.vl_faturado,0) + coalesce(a.vl_faturado_ndc,0))
						into STRICT	vl_cobrado_w
						from	pls_fatura		d,
							pls_fatura_evento	c,
							pls_fatura_conta	b,
							pls_fatura_proc 	a
						where	d.nr_sequencia		= c.nr_seq_fatura
						and	c.nr_sequencia		= b.nr_seq_fatura_evento
						and	b.nr_sequencia		= a.nr_seq_fatura_conta
						and	a.nr_seq_conta_proc	= nr_seq_conta_proc_w
						and	d.nr_sequencia		= nr_seq_pls_fatura_p
						and	coalesce(d.dt_cancelamento_fat::text, '') = '';
					exception
					when others then
						vl_cobrado_w := null;
					end;
				end if;
				
				vl_apresentado_w := abs(vl_apresentado_w - vl_reconhecido_w);
				
				insert	into	pls_contestacao_proc(	nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_conta_proc,
						vl_procedimento,
						nr_seq_contestacao,
						qt_procedimento,
						qt_contestada,
						vl_contestado,
						qt_aceita,
						vl_aceito,
						qt_atual,
						nr_seq_motivo_glosa_aceita,
						nr_seq_motivo_glosa_neg,
						vl_atual,
						nr_seq_a500)
				values (		nextval('pls_contestacao_proc_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_conta_proc_w,
						coalesce(vl_cobrado_w, vl_apresentado_w),
						nr_seq_contestacao_w,
						qt_apresentada_w,
						qt_apresentada_w,
						vl_apresentado_w,
						0,
						vl_aceito_w,
						0,
						null,
						null,
						vl_atual_w,
						nr_seq_a500_w);
				
				-- Bloquear itens da fatura
				if (coalesce(ie_bloquear_w,'N') <> 'N') and (ie_tipo_arquivo_w = '1') then
					CALL pls_gerar_bloq_item_fatura(	nr_seq_pls_fatura_p,
									nr_seq_conta_proc_w,
									null,
									'B',
									ie_bloquear_w,
									nm_usuario_p);
				elsif (ie_tipo_arquivo_w <> '1') then
					CALL pls_gerar_bloq_item_fatura(	nr_seq_pls_fatura_p,
									nr_seq_conta_proc_w,
									null,
									'D',
									null,nm_usuario_p);
				end if;
			
			-- Materiais da contestacao
			elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
				if (nr_seq_ptu_questionamento_w IS NOT NULL AND nr_seq_ptu_questionamento_w::text <> '') then
					select	coalesce(qt_cobrada,1),
						coalesce(vl_cobrado,0) + coalesce(vl_cobr_co,0) + coalesce(vl_cobr_filme,0) +
						coalesce(vl_cobr_adic_co,0) + coalesce(vl_cobr_adic_filme,0) + coalesce(vl_cobr_adic_serv,0),
						coalesce(vl_acordo,0) + coalesce(vl_acordo_co,0) + coalesce(vl_acordo_filme,0) + coalesce(vl_acordo_adic_co,0) + 
						coalesce(vl_acordo_adic_filme,0) + coalesce(vl_acordo_adic_serv,0),
						coalesce(vl_reconhecido,0) + coalesce(vl_reconh_co,0) + coalesce(vl_reconh_filme,0) + 
						coalesce(vl_reconh_adic_co,0) + coalesce(vl_reconh_adic_filme,0) + coalesce(vl_reconh_adic_serv,0)
					into STRICT	qt_apresentada_w,
						vl_apresentado_w,
						vl_aceito_w,
						vl_reconhecido_w
					from	ptu_questionamento
					where	nr_seq_a500	= nr_seq_a500_w
					and	nr_sequencia	= nr_seq_ptu_questionamento_w;
					
				elsif (nr_seq_ptu_quest_rrs_w IS NOT NULL AND nr_seq_ptu_quest_rrs_w::text <> '') then
					select	coalesce(s.qt_cobrada,1),
						coalesce(s.vl_serv,0),
						coalesce(s.vl_acordo_serv,0),
						coalesce(s.vl_reconh_serv,0)
					into STRICT	qt_apresentada_w,
						vl_apresentado_w,
						vl_aceito_w,
						vl_reconhecido_w
					from	ptu_questionamento_rrs	c,
						ptu_quest_serv_rrs	s
					where	c.nr_sequencia	= s.nr_seq_quest_rrs
					and	s.nr_seq_a500	= nr_seq_a500_w
					and	c.nr_sequencia	= nr_seq_ptu_quest_rrs_w;
				end if;
				
				if (nr_seq_nota_servico_w IS NOT NULL AND nr_seq_nota_servico_w::text <> '') then
					select	coalesce(vl_procedimento,0) + coalesce(vl_filme,0) + coalesce(vl_custo_operacional,0) + coalesce(vl_adic_procedimento,0) + coalesce(vl_adic_filme,0) + coalesce(vl_adic_co,0)
					into STRICT	vl_cobrado_w
					from	ptu_nota_servico
					where	nr_sequencia = nr_seq_nota_servico_w;
				else
					begin
						select	sum(coalesce(a.vl_faturado,0) + coalesce(a.vl_faturado_ndc,0))
						into STRICT	vl_cobrado_w
						from	pls_fatura		d,
							pls_fatura_evento	c,
							pls_fatura_conta	b,
							pls_fatura_mat		a
						where	d.nr_sequencia		= c.nr_seq_fatura
						and	c.nr_sequencia		= b.nr_seq_fatura_evento
						and	b.nr_sequencia		= a.nr_seq_fatura_conta
						and	a.nr_seq_conta_mat	= nr_seq_conta_mat_w
						and	d.nr_sequencia		= nr_seq_pls_fatura_p
						and	coalesce(d.dt_cancelamento_fat::text, '') = '';
					exception
					when others then
						vl_cobrado_w := null;
					end;
				end if;
				
				vl_apresentado_w := abs(vl_apresentado_w - vl_reconhecido_w);
				
				insert	into	pls_contestacao_mat(	nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_conta_mat,
						vl_material,
						nr_seq_contestacao,
						qt_material,
						qt_contestada,
						vl_contestado,
						qt_aceita,
						vl_aceito,
						nr_seq_motivo_glosa_aceita,
						nr_seq_motivo_glosa_neg,
						qt_atual,
						vl_atual,
						nr_seq_a500)
				values (		nextval('pls_contestacao_mat_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_conta_mat_w,
						coalesce(vl_cobrado_w, vl_apresentado_w),
						nr_seq_contestacao_w,
						qt_apresentada_w,
						qt_apresentada_w,
						vl_apresentado_w,
						0,
						vl_aceito_w,
						null,
						null,
						0,
						vl_atual_w,
						nr_seq_a500_w);
						
				-- Bloquear itens da fatura
				if (coalesce(ie_bloquear_w,'N') <> 'N') and (ie_tipo_arquivo_w = '1') then
					CALL pls_gerar_bloq_item_fatura(	nr_seq_pls_fatura_p, null, nr_seq_conta_mat_w, 'B', ie_bloquear_w, nm_usuario_p);
				
				elsif (ie_tipo_arquivo_w <> '1') then
					CALL pls_gerar_bloq_item_fatura(	nr_seq_pls_fatura_p, null, nr_seq_conta_mat_w, 'D', null, nm_usuario_p);
				end if;
			end if;
			
			select	max(ie_status)
			into STRICT	ie_status_conta_w
			from	pls_conta
			where	nr_sequencia	= nr_seq_conta_w;
			
			if (ie_status_conta_w = 'F') then /* Se a conta estiver fechada atualiza o status da coparticipacao, senao o status sera atualizado ao fechar a conta */
				CALL pls_atualiza_status_copartic(nr_seq_conta_w, 'FC', null, nm_usuario_p, cd_estabelecimento_p);
			end if;
		end if;
		end;
	end loop;
	close C01;
	
	/* Gerar lote de discussao para este lote de contestacao */
	if (nr_seq_lote_contest_w IS NOT NULL AND nr_seq_lote_contest_w::text <> '') then
		-- Esta function e o update sempre tem que ficar pelo fim da rotina, os dados acima sao utilizados dentro da function, e nao pode ser direto no update pra nao estourar erro de mutante
		ie_processo_pgto_w := substr(pls_obter_dados_lote_contest(nr_seq_lote_contest_w,'PC'),1,1);
		
		update	pls_lote_contestacao
		set	ie_processo_pgto	= ie_processo_pgto_w
		where	nr_sequencia		= nr_seq_lote_contest_w;
	
		-- Gerar lote de discussao
		nr_seq_lote_disc_w := pls_gerar_lote_disc_a550_fat(	nr_seq_lote_contest_w, nr_seq_camara_contest_p, cd_estabelecimento_p, nm_usuario_p, nr_seq_lote_disc_w);
		
		-- Atualizar os valores da contestacao 
		CALL pls_atualizar_valores_contest(	nr_seq_lote_contest_w, 'N');
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_contest_a550 ( nr_seq_lote_contest_p pls_lote_contestacao.nr_sequencia%type, nr_seq_camara_contest_p ptu_camara_contestacao.nr_sequencia%type, nr_seq_camara_contest_ant_p ptu_camara_contestacao.nr_sequencia%type, nr_seq_pls_fatura_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

