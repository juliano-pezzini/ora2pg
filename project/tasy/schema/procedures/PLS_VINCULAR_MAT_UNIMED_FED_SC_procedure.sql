-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_vincular_mat_unimed_fed_sc ( cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Vincular materiais/medicamentos da federeção na PLS_MATERIAL
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Utilizado apenas em:
	- Função OPS - Cadastro de Materiais, pasta Materiais Unimed >> Federação SC >> Materiais
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_material_w                   varchar(500);
ds_mat_sem_acento_w		varchar(255);
ds_medicamento_w		varchar(255);
ds_nome_comercial_w		varchar(255);
ds_observacao_w			varchar(255);
cd_unidade_medida_w		varchar(30);
cd_material_w			varchar(20);
cd_simpro_w			varchar(20);
cd_tiss_brasindice_w		varchar(20);
ie_unidade_utilizacao_w		varchar(10);
ie_fracionar_w			varchar(10);
ie_mat_med_w			varchar(5);
ie_opme_w			varchar(5);
ie_tipo_despesa_w		varchar(5);
ie_aplicar_conv_fed_sc_w	varchar(5);
ie_tipo_fracao_w		varchar(4);
ie_origem_w			varchar(3);
cd_grupo_estoque_w		numeric(20);
cd_estrutura_w			bigint;
nr_seq_material_w		bigint;
nr_seq_mat_fed_sc_w		bigint;
qt_conversao_simpro_w		double precision	:= null;
qt_conversao_bras_w		double precision	:= null;
qt_conv_simpro_w		double precision;
qt_embalagem_w			double precision	:= null;
qt_fracao_w			double precision	:= null;
qt_registro_tot_w		bigint;
qt_registro_parte_w		bigint;
qt_registro_etapa_w		bigint;
qt_registro_perc_w		bigint;
qt_registro_perc_tot_w		bigint;
ie_possui_mat_w			bigint;
ie_simpro_valido_w		integer;
ie_possui_regra_w		integer;
ie_possui_simpro_w		integer;
qt_reg_commit_w			integer	:= 0;
qt_conversao_bras_atual_w	pls_material.qt_conversao%type;
dt_inclusao_w			timestamp;
dt_validade_anvisa_w		timestamp;
dt_fora_linha_w			timestamp;
dt_exclusao_w			timestamp;
qt_conversao_bras_aux_w		pls_material.qt_conversao%type;
ds_versao_tiss_w		varchar(20);

C01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_material,
		cd_grupo_estoque,
		ie_tipo,
		coalesce(ie_opme, 'N'),
		trim(both ie_unidade_utilizacao),
		initcap(ds_material),
		cd_tiss,
		cd_simpro,
		ds_nome_comercial,
		ie_origem,
		substr(ds_observacao,1,255),
		dt_inclusao,
		coalesce(qt_embalagem,1),
		coalesce(qt_fracao,1),
		ie_fracionar,
		dt_validade_anvisa,
		ds_versao_tiss
	from	pls_mat_unimed_fed_sc
	where	ie_inconsistente	<> 'S';

C02 CURSOR FOR
	SELECT	ie_tipo_despesa
	from	pls_regra_vinc_mat_uni_sc
	where	coalesce(cd_grupo_estoque,coalesce(cd_grupo_estoque_w,0)) = coalesce(cd_grupo_estoque_w,0)
	and (ie_mat_med = ie_mat_med_w or ie_mat_med = 'A')
	and	coalesce(ie_opme,ie_opme_w)	= ie_opme_w
	order by
		coalesce(ie_mat_med, ''),
		coalesce(cd_grupo_estoque, 0),
		coalesce(ie_opme, '');


BEGIN
dt_exclusao_w		:= null;
qt_registro_etapa_w	:= 0;
CALL gravar_processo_longo('Vinculando materiais..','PLS_VINCULAR_MAT_UNIMED_FED_SC',0);

select	count(1)
into STRICT	qt_registro_tot_w
from	pls_mat_unimed_fed_sc
where	ie_inconsistente	<> 'S';

open C01;
loop
fetch C01 into
	nr_seq_mat_fed_sc_w,
	cd_material_w,
	cd_grupo_estoque_w,
	ie_mat_med_w,
	ie_opme_w,
	ie_unidade_utilizacao_w,
	ds_material_w,
	cd_tiss_brasindice_w,
	cd_simpro_w,
	ds_nome_comercial_w,
	ie_origem_w,
	ds_observacao_w,
	dt_inclusao_w,
	qt_embalagem_w,
	qt_fracao_w,
	ie_fracionar_w,
	dt_validade_anvisa_w,
	ds_versao_tiss_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_tipo_despesa_w	:= null;
	qt_registro_parte_w	:= qt_registro_tot_w / 20;

	open C02;
	loop
	fetch C02 into
		ie_tipo_despesa_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		null;
		end;
	end loop;
	close C02;

	if (ie_tipo_despesa_w IS NOT NULL AND ie_tipo_despesa_w::text <> '') then
		ds_mat_sem_acento_w	:= padronizar_nome(ds_material_w);


		-- Nome Medicamento
		ds_medicamento_w	:= pls_obter_desc_mat_bras_tiss(cd_tiss_brasindice_w);

		-- Busca pela estrutura
		select  max(nr_sequencia)
		into STRICT	cd_estrutura_w
		from    pls_estrutura_material
		where   cd_externo	= to_char(cd_grupo_estoque_w);

		-- Tratamento de unidade de medida
		select	max(cd_unidade_medida)
		into STRICT	cd_unidade_medida_w
		from	unidade_medida
		where	ie_situacao	= 'A'
		and	upper(cd_sistema_ant)	= upper(ie_unidade_utilizacao_w);

		if (coalesce(cd_unidade_medida_w::text, '') = '') then
			select	max(cd_unidade_medida)
			into STRICT	cd_unidade_medida_w
			from	unidade_medida
			where	ie_situacao	= 'A'
			and	upper(cd_unidade_medida)	= upper(ie_unidade_utilizacao_w);
		end if;

		if (cd_tiss_brasindice_w IS NOT NULL AND cd_tiss_brasindice_w::text <> '') then
			cd_tiss_brasindice_w	:= lpad(cd_tiss_brasindice_w, 10, '0');
		end if;

		-- Verifica se Existe o cadastro do simpro do produto
		select	count(1)
		into STRICT	ie_possui_simpro_w
		from	simpro_cadastro
		where	cd_simpro	= cd_simpro_w  LIMIT 1;

		if (ie_possui_simpro_w = 0) then
			cd_simpro_w	:= null;
		end if;

		if (ds_versao_tiss_w IS NOT NULL AND ds_versao_tiss_w::text <> '') then
			ie_possui_mat_w := 0;
			 ie_possui_mat_w := pls_obter_mat_tiss_vigente( ie_possui_mat_w, clock_timestamp(), cd_material_w, 'O', 'N', ds_versao_tiss_w);
		else
			-- Verifica se existe o material
			select  count(1)
			into STRICT    ie_possui_mat_w
			from    pls_material
			where   cd_material_ops	= cd_material_w  LIMIT 1;
		end if;

		-- Atualizar conversões de Simpro e Brasindice
		qt_conversao_simpro_w	:= null;
		qt_conversao_bras_w	:= null;

		if (ie_mat_med_w = 'MAT') and (cd_simpro_w IS NOT NULL AND cd_simpro_w::text <> '') then
			select	max(ie_tipo_fracao)
			into STRICT	ie_tipo_fracao_w
			from	simpro_preco
			where	cd_simpro	= cd_simpro_w;

			-- Material obedecer Simpro
			if (ie_fracionar_w = 'S') then
				qt_conversao_simpro_w	:= qt_embalagem_w * qt_fracao_w;
			else
				qt_conversao_simpro_w	:= qt_embalagem_w;
			end if;
		elsif (ie_mat_med_w = 'MED') and (cd_tiss_brasindice_w IS NOT NULL AND cd_tiss_brasindice_w::text <> '') then
			-- Medicamento obedecer Brasíndice
			if (ie_fracionar_w = 'S') then
				qt_conversao_bras_w	:= qt_embalagem_w * qt_fracao_w;
			else
				qt_conversao_bras_w	:= qt_embalagem_w;
			end if;

		end if;

		if (ie_possui_mat_w = 0) then
			select	nextval('pls_material_seq')
			into STRICT	nr_seq_material_w
			;

			insert into pls_material(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_tipo_despesa,
				cd_estabelecimento,
				nr_seq_estrut_mat,
				cd_unidade_medida,
				ds_material,
				ds_material_sem_acento,
				ie_situacao,
				cd_simpro,
				cd_tiss_brasindice,
				cd_material_ops,
				ds_medicamento,
				ds_nome_comercial,
				ie_origem,
				ds_observacao,
				dt_inclusao,
				nr_seq_mat_uni_fed_sc,
				qt_conversao,
				dt_validade,
				dt_exclusao,
				ds_versao_tiss)
			values (nr_seq_material_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				ie_tipo_despesa_w,
				cd_estabelecimento_p,
				cd_estrutura_w,
				cd_unidade_medida_w,
				ds_material_w,
				ds_mat_sem_acento_w,
				'A',
				cd_simpro_w,
				cd_tiss_brasindice_w,
				cd_material_w,
				ds_medicamento_w,
				ds_nome_comercial_w,
				ie_origem_w,
				ds_observacao_w,
				coalesce(dt_inclusao_w, trunc(clock_timestamp(), 'dd')),
				nr_seq_mat_fed_sc_w,
				qt_conversao_bras_w,
				dt_validade_anvisa_w,
				dt_exclusao_w,
				ds_versao_tiss_w);

			-- (FED,N,FX)(Aplicar conversão da Federação,Não aplicar conversão,Aplicar conversão fixa)
			SELECT * FROM pls_obter_regra_conv_simpro(	nr_seq_material_w, ie_unidade_utilizacao_w, ie_tipo_fracao_w, clock_timestamp(), cd_estabelecimento_p, ie_aplicar_conv_fed_sc_w, qt_conv_simpro_w) INTO STRICT ie_aplicar_conv_fed_sc_w, qt_conv_simpro_w;

			if (coalesce(ie_aplicar_conv_fed_sc_w::text, '') = '') then
				ie_aplicar_conv_fed_sc_w	:= 'FED';
			end if;

			if (ie_aplicar_conv_fed_sc_w = 'SIM') then
				if (coalesce(cd_simpro_w::text, '') = '') then
					qt_conversao_simpro_w	:= 0;
				else
					select	coalesce(max(qt_embalagem),0)
					into STRICT	qt_conversao_simpro_w
					from	simpro_preco
					where	cd_simpro	= cd_simpro_w
					and	dt_vigencia	= (	SELECT	max(dt_vigencia)
									from	simpro_preco
									where	cd_simpro	= cd_simpro_w);
				end if;
			end if;

			if (ie_aplicar_conv_fed_sc_w = 'FX') then
				qt_conversao_simpro_w	:= qt_conv_simpro_w;
			end if;

			update	pls_material
			set	qt_conversao_simpro 	= qt_conversao_simpro_w
			where	nr_sequencia		= nr_seq_material_w;

			update	pls_mat_unimed_fed_sc
			set	dt_vinculo_mat	= clock_timestamp()
			where	nr_sequencia	= nr_seq_mat_fed_sc_w;
		else
			-- Pega a sequência do material na tabela PLS_MATERIAL
			select	/*+ INDEX(PLSMAT_PLSMUFS_FK_I)*/				max(nr_sequencia)
			into STRICT	nr_seq_material_w
			from	pls_material
			where	nr_seq_mat_uni_fed_sc	= nr_seq_mat_fed_sc_w;

			if (coalesce(nr_seq_material_w::text, '') = '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_material_w
				from	pls_material
				where	cd_material_ops	= cd_material_w;
			end if;

			select	max(qt_conversao)
			into STRICT	qt_conversao_bras_atual_w
			from	pls_material
			where	nr_sequencia	= nr_seq_material_w;

			-- (FED,N,FX)(Aplicar conversão da Federação,Não aplicar conversão,Aplicar conversão fixa)
			SELECT * FROM pls_obter_regra_conv_simpro(	nr_seq_material_w, ie_unidade_utilizacao_w, ie_tipo_fracao_w, clock_timestamp(), cd_estabelecimento_p, ie_aplicar_conv_fed_sc_w, qt_conv_simpro_w) INTO STRICT ie_aplicar_conv_fed_sc_w, qt_conv_simpro_w;

			if (coalesce(ie_aplicar_conv_fed_sc_w::text, '') = '') then
				ie_aplicar_conv_fed_sc_w	:= 'FED';
			end if;

			if (ie_aplicar_conv_fed_sc_w = 'SIM') then
				if (coalesce(cd_simpro_w::text, '') = '') then
					qt_conversao_simpro_w	:= 0;
				else
					select	coalesce(max(qt_embalagem),0)
					into STRICT	qt_conversao_simpro_w
					from	simpro_preco
					where	cd_simpro	= cd_simpro_w
					and	dt_vigencia	= (	SELECT	max(dt_vigencia)
									from	simpro_preco
									where	cd_simpro	= cd_simpro_w);
				end if;
			end if;

			if (ie_aplicar_conv_fed_sc_w = 'FX') then
				qt_conversao_simpro_w	:= qt_conv_simpro_w;
			end if;

			/*aaschlote 27/03/2014 OS - 611174*/

			qt_conversao_bras_aux_w := pls_obter_regra_conv_bras(nr_seq_material_w, clock_timestamp(), cd_estabelecimento_p, qt_conversao_bras_w, qt_conversao_bras_atual_w, qt_conversao_bras_aux_w);

			update	pls_material
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				ie_tipo_despesa		= ie_tipo_despesa_w,
				cd_estabelecimento	= cd_estabelecimento_p,
				nr_seq_estrut_mat	= cd_estrutura_w,
				cd_unidade_medida	= cd_unidade_medida_w,
				ds_material		= ds_material_w,
				ds_material_sem_acento	= ds_mat_sem_acento_w,
				cd_simpro		= cd_simpro_w,
				cd_tiss_brasindice	= cd_tiss_brasindice_w,
				ds_medicamento		= ds_medicamento_w,
				ds_nome_comercial	= ds_nome_comercial_w,
				ie_origem		= ie_origem_w,
				ds_observacao		= ds_observacao_w,
				qt_conversao		= qt_conversao_bras_aux_w,
				qt_conversao_simpro	= CASE WHEN ie_aplicar_conv_fed_sc_w='N' THEN  qt_conversao_simpro  ELSE qt_conversao_simpro_w END ,
				dt_validade		= dt_validade_anvisa_w,
				dt_exclusao		= coalesce(dt_exclusao, dt_exclusao_w),
				nr_seq_mat_uni_fed_sc	= CASE WHEN nr_seq_mat_uni_fed_sc = NULL THEN  nr_seq_mat_fed_sc_w  ELSE nr_seq_mat_uni_fed_sc END ,
				ds_versao_tiss		= ds_versao_tiss_w
			where	nr_sequencia		= nr_seq_material_w;

			update	pls_mat_unimed_fed_sc
			set	dt_vinculo_mat	= clock_timestamp()
			where	nr_sequencia	= nr_seq_mat_fed_sc_w
			and	coalesce(dt_vinculo_mat::text, '') = '';
		end if;
	end if;

	-- Incrementa variável para que a cada 100 registros, dê um commit
	qt_reg_commit_w	:= qt_reg_commit_w + 1;

	if (qt_reg_commit_w = 300) then
		commit;
		qt_reg_commit_w	:= 0;
	end if;

	if (qt_registro_etapa_w > qt_registro_parte_w) then
		qt_registro_etapa_w	:= 0;

		CALL gravar_processo_longo('Vinculando materiais..','PLS_VINCULAR_MAT_UNIMED_FED_SC',-1);
	end if;

	qt_registro_etapa_w	:= qt_registro_etapa_w + 1;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_vincular_mat_unimed_fed_sc ( cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

