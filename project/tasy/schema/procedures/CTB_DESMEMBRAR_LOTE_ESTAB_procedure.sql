-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_desmembrar_lote_estab ( cd_estabelecimento_p bigint, nr_lote_contabil_p bigint, nm_usuario_p text) AS $body$
DECLARE



cd_estab_destino_w		bigint;
cd_tipo_lote_contabil_w		bigint;
ds_observacao_w			varchar(2000);
ds_tipo_lote_contabil_w		varchar(255);
dt_referencia_w			timestamp;
ie_regra_lote_w			varchar(15);
nm_estabelecimento_w		varchar(255);
nr_lote_contabil_novo_w			bigint;
nr_lote_contabil_w			bigint;
nr_seq_mes_ref_w			bigint;
nr_sequencia_w			bigint;
vl_total_credito_w			double precision;
vl_total_debito_w			double precision;
cd_tipo_lote_param_w		bigint;
qt_registros_w			bigint;

C00 CURSOR FOR
	SELECT	distinct cd_estabelecimento
	from	ctb_movimento
	where	nr_lote_contabil	= nr_lote_contabil_p
	and	cd_estabelecimento	<> cd_estabelecimento_p
	order by 1;

c01 CURSOR FOR
SELECT	nr_sequencia,
	nr_seq_mes_ref,
	dt_movimento,
	vl_movimento,
	dt_atualizacao,
	nm_usuario,
	cd_historico,
	cd_conta_debito,
	cd_conta_credito,
	ds_compl_historico,
	nr_seq_agrupamento,
	ie_revisado,
	cd_estabelecimento,
	cd_classif_debito,
	cd_classif_credito,
	nr_documento
from	ctb_movimento a
where	a.nr_lote_contabil	= nr_lote_contabil_p
and	a.cd_estabelecimento	= cd_estab_destino_w;

vet01	C01%RowType;

c02 CURSOR FOR
SELECT	a.nr_sequencia,
	a.cd_centro_custo,
	a.vl_movimento,
	a.pr_rateio
from	ctb_movto_centro_custo a
where	a.nr_seq_movimento	= vet01.nr_sequencia;

vet02	C02%RowType;


BEGIN

select	nr_seq_mes_ref,
	cd_tipo_lote_contabil,
	dt_referencia
into STRICT	nr_seq_mes_ref_w,
	cd_tipo_lote_contabil_w,
	dt_referencia_w
from	lote_contabil
where	nr_lote_contabil	= nr_lote_contabil_p;

select	coalesce(max(ie_regra_lote),'U')
into STRICT	ie_regra_lote_w
from	ctb_regra_estab_dif
where	cd_tipo_lote_contabil	= cd_tipo_lote_contabil_w
and	cd_estabelecimento		= cd_estabelecimento_p
and	ie_permite		<> 'N';

open C00;
loop
fetch C00 into
	cd_estab_destino_w;
EXIT WHEN NOT FOUND; /* apply on C00 */
	begin

	if (cd_estab_destino_w IS NOT NULL AND cd_estab_destino_w::text <> '') and (ie_regra_lote_w = 'E') then

		nr_lote_contabil_novo_w := ctb_gerar_lote_digitacao(nr_seq_mes_ref_w, cd_estab_destino_w, nm_usuario_p, nr_lote_contabil_novo_w);

		nr_lote_contabil_w	:= nr_lote_contabil_novo_w;

		select	coalesce(max(ds_tipo_lote_contabil),'')
		into STRICT	ds_tipo_lote_contabil_w
		from	tipo_lote_contabil
		where	cd_tipo_lote_contabil	= cd_tipo_lote_contabil_w;

		nm_estabelecimento_w	:= substr(obter_nome_estabelecimento(cd_estab_destino_w),1,255);

		/*
		ds_observacao_w	:= substr('Lote desmembrado por estabelecimento. Lote origem: ' || nr_lote_contabil_p || ' - '  || ds_tipo_lote_contabil_w || chr(13) || chr(10) ||
				   'Estabelecimento: ' || cd_estabelecimento_p || ' - ' || nm_estabelecimento_w,1,2000);
		*/
		ds_observacao_w := substr(wheb_mensagem_pck.get_texto(298445,	'NR_LOTE_CONTABIL=' 		|| nr_lote_contabil_p 		|| ';' ||
										'DS_TIPO_LOTE_CONTABIL=' 	|| ds_tipo_lote_contabil_w 	|| ';' ||
										'CD_ESTABELECIMENTO=' 		|| cd_estabelecimento_p 	|| ';' ||
										'NM_ESTABELECIMENTO=' 		|| nm_estabelecimento_w),1,2000);

		update	lote_contabil
		set	dt_referencia	= dt_referencia_w,
			ds_observacao	= ds_observacao_w,
			nr_lote_origem	= nr_lote_contabil_p
		where	nr_lote_contabil = nr_lote_contabil_w;

		open C01;
		loop
		fetch C01 into
			vet01;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			select nextval('ctb_movimento_seq')
			into STRICT nr_sequencia_w
			;

			insert into ctb_movimento(
				nr_sequencia,
				nr_lote_contabil,
				nr_seq_mes_ref,
				dt_movimento,
				vl_movimento,
				dt_atualizacao,
				nm_usuario,
				cd_historico,
				cd_conta_debito,
				cd_conta_credito,
				ds_compl_historico,
				nr_seq_agrupamento,
				ie_revisado,
				cd_estabelecimento,
				cd_classif_debito,
				cd_classif_credito,
				nr_documento)
			values (	nr_sequencia_w,
				nr_lote_contabil_w,
				nr_seq_mes_ref_w,
				vet01.dt_movimento,
				vet01.vl_movimento,
				clock_timestamp(),
				nm_usuario_p,
				vet01.cd_historico,
				vet01.cd_conta_debito,
				vet01.cd_conta_credito,
				vet01.ds_compl_historico,
				vet01.nr_seq_agrupamento,
				'N',
				vet01.cd_estabelecimento,
				vet01.cd_classif_debito,
				vet01.cd_classif_credito,
				vet01.nr_documento);

			open C02;
			loop
			fetch C02 into
				vet02;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin

				insert into ctb_movto_centro_custo(
					nr_sequencia,
					nr_seq_movimento,
					cd_centro_custo,
					dt_atualizacao,
					nm_usuario,
					vl_movimento,
					pr_rateio)
				values (	nextval('ctb_movto_centro_custo_seq'),
					nr_sequencia_w,
					vet02.cd_centro_custo,
					clock_timestamp(),
					nm_usuario_p,
					vet02.vl_movimento,
					vet02.pr_rateio);
				end;
			end loop;
			close C02;

			end;
		end loop;
		close C01;

		delete	FROM ctb_movimento
		where	nr_lote_contabil	= nr_lote_contabil_p
		and	cd_estabelecimento	= cd_estab_destino_w
		and	(nr_lote_contabil_w IS NOT NULL AND nr_lote_contabil_w::text <> '');

		select	coalesce(sum(vl_movimento),0)
		into STRICT	vl_total_debito_w
		from	ctb_movimento
		where	nr_lote_contabil = nr_lote_contabil_p
		and	(cd_conta_debito IS NOT NULL AND cd_conta_debito::text <> '');

		select	coalesce(sum(vl_movimento),0)
		into STRICT	vl_total_credito_w
		from	ctb_movimento
		where	nr_lote_contabil = nr_lote_contabil_p
		and	(cd_conta_credito IS NOT NULL AND cd_conta_credito::text <> '');

		update	lote_contabil
		set	vl_debito	= vl_total_debito_w,
			vl_credito	= vl_total_credito_w
		where	nr_lote_contabil= nr_lote_contabil_p;

		select	coalesce(sum(vl_movimento),0)
		into STRICT	vl_total_debito_w
		from	ctb_movimento
		where	nr_lote_contabil = nr_lote_contabil_w
		and	(cd_conta_debito IS NOT NULL AND cd_conta_debito::text <> '');

		select	coalesce(sum(vl_movimento),0)
		into STRICT	vl_total_credito_w
		from	ctb_movimento
		where	nr_lote_contabil = nr_lote_contabil_w
		and	(cd_conta_credito IS NOT NULL AND cd_conta_credito::text <> '');

		update	lote_contabil
		set	vl_debito	= vl_total_debito_w,
			vl_credito	= vl_total_credito_w
		where	nr_lote_contabil= nr_lote_contabil_w;

		cd_tipo_lote_param_w := obter_param_usuario(923, 99, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, cd_tipo_lote_param_w);

		if (coalesce(cd_tipo_lote_param_w,0) <> 0) then

			select	count(*)
			into STRICT	qt_registros_w
			from	tipo_lote_contabil
			where	cd_tipo_lote_contabil = cd_tipo_lote_param_w;

			if (coalesce(qt_registros_w,0) > 0) then

				update	lote_contabil
				set	cd_tipo_lote_contabil = cd_tipo_lote_param_w
				where	nr_lote_contabil = nr_lote_contabil_w;

			end if;
		end if;

		commit;
	end if;

	-- Final
	end;
end loop;
close C00;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_desmembrar_lote_estab ( cd_estabelecimento_p bigint, nr_lote_contabil_p bigint, nm_usuario_p text) FROM PUBLIC;

