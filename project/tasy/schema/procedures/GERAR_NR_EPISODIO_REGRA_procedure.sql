-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function gerar_nr_episodio_regra as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE gerar_nr_episodio_regra ( dt_episodio_p episodio_paciente.dt_episodio%type, nr_seq_tipo_episodio_p episodio_paciente.nr_seq_tipo_episodio%type, nm_usuario_p episodio_paciente.nm_usuario%type, nr_episodio_out_p INOUT episodio_paciente.nr_episodio%type) AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'SELECT * FROM gerar_nr_episodio_regra_atx ( ' || quote_nullable(dt_episodio_p) || ',' || quote_nullable(nr_seq_tipo_episodio_p) || ',' || quote_nullable(nm_usuario_p) || ',' || quote_nullable(nr_episodio_out_p) || ' )';
	SELECT v_ret INTO nr_episodio_out_p FROM dblink(v_conn_str, v_query) AS p (v_ret episodio_paciente.nr_episodio%type);

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE gerar_nr_episodio_regra_atx ( dt_episodio_p episodio_paciente.dt_episodio%type, nr_seq_tipo_episodio_p episodio_paciente.nr_seq_tipo_episodio%type, nm_usuario_p episodio_paciente.nm_usuario%type, nr_episodio_out_p INOUT episodio_paciente.nr_episodio%type) AS $body$
DECLARE


dt_episodio_w		episodio_paciente.dt_episodio%type;
cd_estabelecimento_w	controle_episodio.cd_estabelecimento%type;
ie_tipo_episodio_w	tipo_episodio.ie_tipo%type;
controle_episodio_w	controle_episodio%rowtype;
nr_episodio_out_w	controle_episodio.ds_mascara_episodio%type;
qt_tamanho_w		tabela_atributo.qt_tamanho%type;
ds_mascara_episodio_w	controle_episodio.ds_mascara_episodio%type;
ds_mascara_tipo_w	controle_episodio.ds_mascara_episodio%type;
ds_mascara_ano_w	controle_episodio.ds_mascara_episodio%type;
ds_mascara_numero_w	controle_episodio.ds_mascara_episodio%type;
BEGIN
if (coalesce(nr_episodio_out_p::text, '') = '') then
	begin
	dt_episodio_w		:=	truncar_data(coalesce(dt_episodio_p, clock_timestamp()), 'D');
	cd_estabelecimento_w	:=	wheb_usuario_pck.get_cd_estabelecimento;
	
	begin
	select	te.ie_tipo
	into STRICT	ie_tipo_episodio_w
	from	tipo_episodio te
	where	te.nr_sequencia = nr_seq_tipo_episodio_p;	
	exception
	when no_data_found or too_many_rows then
		ie_tipo_episodio_w	:=	null;
	end;	
	
	begin
	select	*
	into STRICT	controle_episodio_w
	from	controle_episodio ce
	where	ce.cd_estabelecimento = cd_estabelecimento_w
	and	ce.ie_tipo_episodio = ie_tipo_episodio_w
	and	dt_episodio_w between coalesce(ce.dt_inicio_vigencia, dt_episodio_w) and coalesce(ce.dt_fim_vigencia, dt_episodio_w)
	for update LIMIT 1;
	
	controle_episodio_w.nr_ultimo_episodio	:=	coalesce(controle_episodio_w.nr_ultimo_episodio, 1) + 1;

	update	controle_episodio
	set	nr_ultimo_episodio = controle_episodio_w.nr_ultimo_episodio
	where	nr_sequencia = controle_episodio_w.nr_sequencia;
	
	commit;
	exception
	when no_data_found or too_many_rows or data_exception or data_exception then
		controle_episodio_w	:=	null;
		rollback;
	end;	

	if (controle_episodio_w.nr_sequencia IS NOT NULL AND controle_episodio_w.nr_sequencia::text <> '') then
		begin		
		ds_mascara_episodio_w	:=	substr(controle_episodio_w.ds_mascara_episodio, 1, 10);
		nr_episodio_out_w	:=	ds_mascara_episodio_w;
		
		select	lpad('T', (length(ds_mascara_episodio_w) - length(replace(ds_mascara_episodio_w, 'T', ''))), 'T'),
			lpad('Y', (length(ds_mascara_episodio_w) - length(replace(ds_mascara_episodio_w, 'Y', ''))), 'Y'),
			lpad('D', (length(ds_mascara_episodio_w) - length(replace(ds_mascara_episodio_w, 'D', ''))), 'D')
		into STRICT	ds_mascara_tipo_w,
			ds_mascara_ano_w,
			ds_mascara_numero_w
		;

		if (length(ds_mascara_tipo_w) > 0) then
			select	replace(nr_episodio_out_w, 'T', CASE WHEN ie_tipo_episodio_w='8' THEN  '2'  ELSE ie_tipo_episodio_w END )
			into STRICT	nr_episodio_out_w
			;			
		end if;
		
		if (length(ds_mascara_ano_w) > 0) then
			select	replace(nr_episodio_out_w,  ds_mascara_ano_w, to_char(dt_episodio_w, ds_mascara_ano_w))
			into STRICT	nr_episodio_out_w
			;			
		end if;
		
		if (length(ds_mascara_numero_w) > 0) then
			select	replace(nr_episodio_out_w,  ds_mascara_numero_w, lpad(controle_episodio_w.nr_ultimo_episodio, length(ds_mascara_numero_w), 0))
			into STRICT	nr_episodio_out_w
			;			
		end if;
		
		nr_episodio_out_p	:=	nr_episodio_out_w;
		end;
	end if;
	end;
elsif (is_number(nr_episodio_out_p) = 1) then
	nr_episodio_out_p := ltrim(nr_episodio_out_p, '0');
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nr_episodio_regra ( dt_episodio_p episodio_paciente.dt_episodio%type, nr_seq_tipo_episodio_p episodio_paciente.nr_seq_tipo_episodio%type, nm_usuario_p episodio_paciente.nm_usuario%type, nr_episodio_out_p INOUT episodio_paciente.nr_episodio%type) FROM PUBLIC; -- REVOKE ALL ON PROCEDURE gerar_nr_episodio_regra_atx ( dt_episodio_p episodio_paciente.dt_episodio%type, nr_seq_tipo_episodio_p episodio_paciente.nr_seq_tipo_episodio%type, nm_usuario_p episodio_paciente.nm_usuario%type, nr_episodio_out_p INOUT episodio_paciente.nr_episodio%type) FROM PUBLIC;

