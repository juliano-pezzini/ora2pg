-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_analise_fechar_contas ( nr_seq_analise_p bigint, nr_seq_grupo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_commit_p text) AS $body$
DECLARE

				


nm_usuario_audit_lib_w		varchar(255);
ie_geracao_pos_estabelecido_w	varchar(255);
nm_usuario_lib_w		varchar(20);
cd_codigo_w			varchar(20);
nr_nota_fiscal_w		varchar(20);
cd_guia_w			varchar(10);
ie_permite_fechar_conta_w	varchar(10)	:= 'N';
ie_fechar_analise_w		varchar(3);
ie_status_w			varchar(2);
ie_status_ww			varchar(2);
ie_via_acesso_w			varchar(2);
ie_permissao_w			varchar(2);
ie_itens_auditar_cor_w		varchar(2);
ie_itens_auditar_w		varchar(1);
ie_tipo_glosa_oc_w		varchar(1);
ie_carater_internacao_w		varchar(1);
ie_fechar_conta_w		varchar(1);
ie_fechar_com_glosas_w		varchar(1);
ie_tipo_item_w			varchar(1);
ie_inconsistencia_conta_w	varchar(1);
vl_total_w			double precision;
vl_prestador_w			double precision;
vl_pag_medico_conta_w		double precision;
qt_liberado_w			double precision;
tx_item_w			double precision;
vl_liberado_w			double precision;
vl_unit_liberado_w		double precision;
nr_seq_conta_w			bigint;
nr_seq_glosa_oc_w		bigint;
nr_seq_analise_conta_item_w	bigint;
qt_parecer_desfav_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_motivo_glosa_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_item_w			bigint;
nr_seq_item_analise_w		bigint;
nr_seq_glosa_anexada_oc_w	bigint;
nr_seq_auditoria_w		bigint;
nr_seq_partic_proc_w		bigint;
nr_seq_fatura_w			bigint;
vl_calculado_w			double precision;
vl_total_w			double precision;
qt_ocor_impede_fechamento_w	bigint;
qt_item_pos_estab_w		bigint;
dt_atualizacao_w		timestamp;
dt_emissao_nf_w			timestamp;
dt_recebimento_nf_w		timestamp;
vl_medico_original_w		double precision;
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type;		

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Fechar as contas após finalização de todos os grupos (análise nova)
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 

/*Cursor que obtem as contas da análise para ser realizado o fechamento*/

C01 CURSOR FOR
	SELECT	a.nr_sequencia	
	from	pls_conta a
	where	a.nr_seq_analise = nr_seq_analise_p
	Order by   a.vl_cobrado Desc;

C02 CURSOR(nr_seq_conta_pc	pls_conta.nr_sequencia%type)FOR
	SELECT	nr_sequencia,
		coalesce(vl_medico_original,0) vl_medico_original,
		coalesce(vl_procedimento,0) vl_procedimento,
		coalesce(vl_liberado,0) vl_liberado
	from	pls_conta_proc
	where	nr_seq_conta	= nr_seq_conta_pc;
	
C03 CURSOR FOR
	SELECT	x.nr_seq_analise
	from	pls_conta a,
		pls_conta_pos_estabelecido x
	where	x.nr_seq_conta		= a.nr_sequencia
	and	a.nr_seq_analise 	= nr_seq_analise_p
	and	(x.nr_seq_analise IS NOT NULL AND x.nr_seq_analise::text <> '')
	and	((x.ie_situacao		= 'A')or (coalesce(x.ie_situacao::text, '') = ''))
	group by x.nr_seq_analise
	order by 1;
BEGIN
/* Verificar se pode fechar as contas */

ie_fechar_analise_w	:= pls_obter_se_fechar_analise(nr_seq_analise_p,nr_seq_grupo_p,cd_estabelecimento_p,nm_usuario_p,'S');

select 	coalesce(max(ie_novo_pos_estab),'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false;

/* Verificar se tem alguma ocorrência ainda ativa que não permita fechar as contas */

select	count(1)
into STRICT	qt_ocor_impede_fechamento_w
from	pls_ocorrencia_benef b,
	pls_conta a
where	a.nr_sequencia		= b.nr_seq_conta
and	a.nr_seq_analise	= nr_seq_analise_p
and	b.ie_fechar_conta	= 'N'
and (b.ie_situacao = 'A' or coalesce(b.ie_situacao::text, '') = '')
/* Francisco - 31/01/2013 - OS 542443 - Se o item já foi glosado com outra glosa, pode deixar fechar */

and	not exists (SELECT	1
			from	pls_conta_proc x
			where	x.nr_sequencia = b.nr_seq_conta_proc
			and	x.ie_glosa = 'S'
			
union all

			SELECT	1
			from	pls_conta_mat x
			where	x.nr_sequencia = b.nr_seq_conta_mat
			and	x.ie_glosa = 'S');

if (qt_ocor_impede_fechamento_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(206596);
end if;

select	coalesce(max(a.ie_geracao_pos_estabelecido),'F')
into STRICT	ie_geracao_pos_estabelecido_w
from	pls_parametros	a
where	a.cd_estabelecimento	= cd_estabelecimento_p;

for r_c01_w in c01 loop

	if (ie_novo_pos_estab_w = 'N') then
		CALL pls_lancar_item_proc_pos( r_c01_w.nr_sequencia, nm_usuario_p);
	else
		CALL pls_conversao_itens_pck.conversao_itens_pos(	null,  null, null,
								null, null, r_c01_w.nr_sequencia,
								nm_usuario_p, cd_estabelecimento_p);
			
		CALL pls_conversao_itens_pck.abrir_proc_pacote_cta(	null,  null, null,
								null, null, r_c01_w.nr_sequencia,
								nm_usuario_p, cd_estabelecimento_p);
			
	end if;

end loop;

for r_c01_w in C01() loop
	begin
	for r_c02_w in C02(r_c01_w.nr_sequencia) loop
		begin
		
		vl_pag_medico_conta_w := dividir((r_c02_w.vl_medico_original*r_c02_w.vl_liberado),r_c02_w.vl_procedimento);
		
		update	pls_conta_proc
		set	vl_pag_medico_conta 	= vl_pag_medico_conta_w
		where	nr_sequencia 		= r_c02_w.nr_sequencia;	
	
		end;
	end loop;
	
	CALL pls_fechar_conta(r_c01_w.nr_sequencia, 'S', null, 'N', cd_estabelecimento_p, nm_usuario_p, null, null);

	CALL pls_cta_consistir_pck.gerar_resumo_conta(null, null, null, r_c01_w.nr_sequencia, nm_usuario_p, cd_estabelecimento_p);
	--retirei o tratamento nr_seq_analise is null devidoa  necessidade de consistir a análise de pós-estabelecido ao fechar a conta principal
	if ( ie_novo_pos_estab_w = 'N') then
		select	count(1)
		into STRICT	qt_item_pos_estab_w
		from	pls_conta_pos_estabelecido a
		where	a.nr_seq_conta	= r_c01_w.nr_sequencia
		and	((a.nr_seq_conta_proc IS NOT NULL AND a.nr_seq_conta_proc::text <> '') or (a.nr_seq_conta_mat IS NOT NULL AND a.nr_seq_conta_mat::text <> ''))
		and	((ie_situacao		= 'A')or (coalesce(ie_situacao::text, '') = ''));
	else
		
		select	count(1)
		into STRICT	qt_item_pos_estab_w
		from (SELECT	1
			from	pls_conta_pos_proc
			where	nr_seq_conta = r_c01_w.nr_sequencia
			
union all

			SELECT	1
			from	pls_conta_pos_mat
			where	nr_seq_conta = r_c01_w.nr_sequencia) alias1;
	
	end if;
	
	
	

	if (qt_item_pos_estab_w > 0) and (ie_geracao_pos_estabelecido_w = 'F') then
		CALL pls_gerar_analise_pos_estab(r_c01_w.nr_sequencia, nm_usuario_p, cd_estabelecimento_p,'F');
	end if;
	nr_seq_conta_w	:= r_c01_w.nr_sequencia;
	end;
end loop;

begin
nm_usuario_audit_lib_w	:= pls_obter_nome_usuario(nm_usuario_p);
exception
when others then
	nm_usuario_audit_lib_w	:= nm_usuario_p;
end;

CALL pls_inserir_hist_analise(nr_seq_conta_w, nr_seq_analise_p, 10, null, 'C', null, null,
				'Contas fechadas pelo auditor: ' || nm_usuario_audit_lib_w, nr_seq_grupo_p, nm_usuario_p, cd_estabelecimento_p);
select 	max(nr_sequencia)
into STRICT	nr_seq_auditoria_w
from	pls_auditoria_conta_grupo
where	nr_seq_analise 	= nr_seq_analise_p
and	nr_seq_grupo	= nr_seq_grupo_p
and	coalesce(dt_liberacao::text, '') = '';

if (nr_seq_auditoria_w IS NOT NULL AND nr_seq_auditoria_w::text <> '') then
	update	pls_auditoria_conta_grupo
	set	dt_liberacao	= clock_timestamp(),
		dt_atualizacao  = clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_sequencia 	= nr_seq_auditoria_w;
end if;
	
CALL pls_alterar_status_analise_cta(nr_seq_analise_p, 'T', 'PLS_ANALISE_FECHAR_CONTAS', nm_usuario_p, cd_estabelecimento_p);

CALL ptu_status_analise_finalizada(nr_seq_conta_w, nm_usuario_p, cd_estabelecimento_p);
--Chamei a consistir análise pós aqui, pois o processo esta sendo realizado 'N' vezes para cada análise
commit;
for r_c03_w in C03() loop
	begin
	CALL pls_consistir_analise_pos(r_c03_w.nr_seq_analise, null, cd_estabelecimento_p, nm_usuario_p, 'N', 'N', 'N');
	end;
end loop;
commit;
CALL pls_gerar_auditoria_pos(nr_seq_analise_p, null, 'N', cd_estabelecimento_p, nm_usuario_p);

CALL pls_atualizar_grupo_penden(nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p);

select	max(nr_seq_fatura)
into STRICT	nr_seq_fatura_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_w;

/* Atualizar valores PTU Fatura*/

CALL pls_atualizar_valor_ptu_fatura(nr_seq_fatura_w,'N');

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_fechar_contas ( nr_seq_analise_p bigint, nr_seq_grupo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_commit_p text) FROM PUBLIC;

