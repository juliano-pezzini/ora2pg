-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixar_lote_cartao_cr (nr_seq_lote_p bigint, dt_baixa_p timestamp, nm_usuario_p text, ie_acao_p text) AS $body$
DECLARE


nr_seq_parcela_w			bigint;
ie_despesa_w			varchar(1) := 'N';
cd_estabelecimento_w		smallint;
ds_observacao_w			varchar(4000);
nr_seq_trans_fin_desp_w		bigint;
nr_seq_banco_desp_w		bigint;
vl_despesa_w			double precision;
nr_seq_baixa_w			bigint;
ie_forma_lanc_lote_cartao_w		varchar(1);
ie_gerar_movto_banco_w		varchar(1);
vl_lote_w				double precision;
nr_seq_trans_fin_baixa_w		bigint;
nr_seq_bandeira_w			bigint;
nr_seq_conta_banco_w		bigint;
cont_w				bigint;
ie_valor_movto_bco_w		varchar(1);
vl_despesa_parcela_w		double precision;
nr_seq_trans_fin_despesa_w		bigint;
ie_cancela_lote_cartao_w		varchar(1);
nr_seq_movto_w			bigint;
nr_seq_trans_fin_trib_w		lote_baixa_cartao_cr.nr_seq_trans_fin_trib%type;
vl_imposto_parcela_w		movto_cartao_cr_parcela.vl_imposto%type;
dt_baixa_w			timestamp;

nr_nfs_w			varchar(255);	
nm_pessoa_rec_w		varchar(255);
nr_parcela_w		varchar(10);
vl_transacao_w		movto_cartao_cr.vl_transacao%type;
vl_parcela_w		movto_cartao_cr_parcela.vl_parcela%type;
nr_seq_forma_pagto_w	movto_cartao_cr.nr_seq_forma_pagto%type;
tx_administracao_w		forma_pagto_regra.tx_administracao%type;
vl_liquido_w		movto_cartao_cr_parcela.vl_liquido%type;
vl_despesa_parc_w	movto_cartao_cr_parcela.vl_despesa%type;
nr_seq_movto_orig_w		movto_trans_financ.nr_sequencia%type;

c01 CURSOR FOR
SELECT	a.nr_sequencia
from	movto_cartao_cr_parcela a
where	a.nr_seq_lote	= nr_seq_lote_p;

c02 CURSOR FOR
SELECT	max(a.nr_sequencia)
from	movto_cartao_cr_parcela b,
	movto_cartao_cr_baixa a
where	a.nr_seq_parcela	= b.nr_sequencia
and	b.nr_seq_lote	= nr_seq_lote_p
group	by b.nr_sequencia;

C03 CURSOR FOR
SELECT	distinct
	nr_seq_movto
from	movto_cartao_cr_parcela
where	nr_seq_lote	= nr_seq_lote_p
order by nr_seq_movto;


BEGIN

select	max(a.cd_estabelecimento),
	max(a.ds_observacao),
	max(a.nr_seq_trans_fin_desp),
	max(a.nr_seq_banco_desp),
	coalesce(max(a.vl_despesa),0),
	max(a.nr_seq_bandeira),
	max(a.nr_seq_trans_fin_baixa), /* ahoffelder - OS 169086 - 30/09/2009 */
	max(a.nr_seq_conta_banco),
	max(a.nr_seq_trans_fin_despesa),
	max(a.dt_baixa),
	coalesce(max(a.ie_cancela_lote_cartao),'N'),
	max(a.nr_seq_trans_fin_trib)
into STRICT	cd_estabelecimento_w,
	ds_observacao_w,
	nr_seq_trans_fin_desp_w,
	nr_seq_banco_desp_w,
	vl_despesa_w,
	nr_seq_bandeira_w,
	nr_seq_trans_fin_baixa_w,
	nr_seq_conta_banco_w,
	nr_seq_trans_fin_despesa_w,
	dt_baixa_w,
	ie_cancela_lote_cartao_w,
	nr_seq_trans_fin_trib_w
from	lote_baixa_cartao_cr a
where	a.nr_sequencia	= nr_seq_lote_p;

if (ie_acao_p = 'I') and (dt_baixa_w IS NOT NULL AND dt_baixa_w::text <> '') then
	--Este lote de movimentacoes ja esta baixado
	CALL wheb_mensagem_pck.exibir_mensagem_abort(nr_seq_mensagem_p => 1202570, vl_macros_p => 'NR_LOTE_W='||nr_seq_lote_p);
elsif (ie_acao_p = 'E') and (coalesce(dt_baixa_w::text, '') = '') then
	--Este lote ja foi estornado
	CALL wheb_mensagem_pck.exibir_mensagem_abort(nr_seq_mensagem_p => 1202571, vl_macros_p => 'NR_LOTE_W='||nr_seq_lote_p);
end if;

if (ie_acao_p = 'I') and (ie_cancela_lote_cartao_w = 'S') then
	
	open C03;
	loop
	fetch C03 into	
		nr_seq_movto_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		CALL cancelar_movto_cartao_js(clock_timestamp(), nr_seq_movto_w, nm_usuario_p);
		end;
	end loop;
	close C03;	
	
	goto final;
end if;

select	max(ie_forma_lanc_lote_cartao)
into STRICT	ie_forma_lanc_lote_cartao_w
from	parametro_contas_receber
where	cd_estabelecimento	= cd_estabelecimento_w;

select	max(a.ie_valor_movto_bco)
into STRICT	ie_valor_movto_bco_w
from	bandeira_cartao_cr a
where	a.nr_sequencia	= nr_seq_bandeira_w;

/* Se lanca movimento por parcela */

if (ie_forma_lanc_lote_cartao_w = 'P') then
	ie_gerar_movto_banco_w	:= 'S';	
else
	ie_gerar_movto_banco_w	:= 'N';

	if (coalesce(nr_seq_bandeira_w::text, '') = '') then
		--'E necessario informar a bandeira do lote quando o lancamento e unico por lote.');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186817);
	else
		select	count(*)
		into STRICT	cont_w
		from	movto_cartao_cr b,
			movto_cartao_cr_parcela a
		where	a.nr_seq_movto	= b.nr_sequencia
		and	a.nr_seq_lote	= nr_seq_lote_p
		and	b.nr_seq_bandeira <> nr_seq_bandeira_w;

		if (cont_w > 0) then
			--'Ha parcelas no lote que nao correspondem a bandeira selecionada.');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(186818);
		end if;

		select	coalesce(nr_seq_trans_fin_baixa_w,max((obter_valor_bandeira_estab(nr_sequencia,cd_estabelecimento_w,'NR_SEQ_TRANS_FINANC'))::numeric )),
			max(coalesce(nr_seq_conta_banco_w, (obter_valor_bandeira_estab(nr_sequencia,cd_estabelecimento_w,'NR_SEQ_CONTA_BANCO'))::numeric ))
		into STRICT	nr_seq_trans_fin_baixa_w,
			nr_seq_conta_banco_w
		from	bandeira_cartao_cr
		where	nr_sequencia	= nr_seq_bandeira_w;
	end if;
end if;

ie_despesa_w := obter_param_usuario(3020, 5, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_despesa_w);


CALL consistir_caixa_lote_cartao(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_w,ie_acao_p);


if (ie_acao_p	= 'I') then

	open c01;
	loop
	fetch c01 into
		nr_seq_parcela_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		/*Inicio tratativa observacao com macro*/

		if (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '') then
			begin
			select	substr(obter_nf_caixa_Rec(max(b.nr_seq_caixa_rec)),1,255),
					substr(obter_dados_cartao_cr(max(b.nr_sequencia), 'PR'),1,255),
					substr(max(a.nr_parcela) ||'/'||max((select count(*) from movto_cartao_cr_parcela x where x.nr_seq_movto = a.nr_seq_movto)),1,10),
					max(b.vl_transacao),
					max(a.vl_parcela),
					max(b.nr_seq_forma_pagto),
					max(a.vl_liquido),
					max(vl_despesa)
			into STRICT	nr_nfs_w,
					nm_pessoa_rec_w,
					nr_parcela_w,
					vl_transacao_w,
					vl_parcela_w,
					nr_seq_forma_pagto_w,
					vl_liquido_w,
					vl_despesa_parc_w
			from	movto_cartao_cr_parcela a,
					movto_cartao_cr	b
			where	a.nr_seq_movto		= b.nr_sequencia
			and		a.nr_sequencia 		= nr_seq_parcela_w;
			
			if (nr_seq_forma_pagto_w IS NOT NULL AND nr_seq_forma_pagto_w::text <> '') then
				select	max(b.tx_administracao)
				into STRICT	tx_administracao_w
				from	forma_pagto_cartao_cr a,
						forma_pagto_regra b
				where	a.nr_sequencia	= b.nr_seq_forma
				and		a.nr_sequencia 	= nr_seq_forma_pagto_w;
			end if;

			ds_observacao_w := replace_macro(ds_observacao_w,'@NR_NFS',nr_nfs_w);	
			ds_observacao_w := replace_macro(ds_observacao_w,'@NM_PESSOA_REC',nm_pessoa_rec_w);
			ds_observacao_w := replace_macro(ds_observacao_w,'@NR_PARCELA',nr_parcela_w);
			ds_observacao_w := replace_macro(ds_observacao_w,'@VL_TRANSACAO',campo_mascara_virgula(vl_transacao_w));
			ds_observacao_w := replace_macro(ds_observacao_w,'@VL_PARCELA',campo_mascara_virgula(vl_parcela_w));
			ds_observacao_w := replace_macro(ds_observacao_w,'@TX_ADMINISTRATIVA',campo_mascara_virgula(tx_administracao_w));
			ds_observacao_w := replace_macro(ds_observacao_w,'@VL_LIQUIDO',campo_mascara_virgula(vl_liquido_w));
			ds_observacao_w := replace_macro(ds_observacao_w,'@VL_DESPESA_PARCELA',campo_mascara_virgula(vl_despesa_parc_w));

			exception when others then
				ds_observacao_w := ds_observacao_w;
			end;
		end if;
		/*fim tratativa observacao com macro*/

		CALL baixar_parcela_cartao_cr(nr_seq_parcela_w,dt_baixa_p,nm_usuario_p,'S',ie_despesa_w,ds_observacao_w,ie_gerar_movto_banco_w,'N',0, nr_seq_lote_p,null);
		
		CALL atualiza_dt_liq_movto_cartao(nr_seq_parcela_w, nm_usuario_p);
	
		select	max(a.ds_observacao)
		into STRICT	ds_observacao_w
		from	lote_baixa_cartao_cr a
		where	a.nr_sequencia	= nr_seq_lote_p;
		
	end loop;
	close c01;

	/* Se lanca movimento por lote */

	if (ie_forma_lanc_lote_cartao_w = 'L') then

		if (ie_valor_movto_bco_w = 'S') then

			select	coalesce(sum(a.vl_parcela),0)
			into STRICT	vl_lote_w
			from	movto_cartao_cr_parcela a
			where	a.nr_seq_lote	= nr_seq_lote_p;

		else

			select	coalesce(sum(vl_baixa),0)
			into STRICT	vl_lote_w
			from	movto_cartao_cr_parcela b,
				movto_cartao_cr_baixa a
			where	a.nr_seq_parcela	= b.nr_sequencia
			and	b.nr_seq_lote		= nr_seq_lote_p;

		end if;

		if (coalesce(nr_seq_trans_fin_desp_w::text, '') = '') then
			vl_lote_w	:= vl_lote_w - coalesce(vl_despesa_w,0);
		end if;

		insert	into movto_trans_financ(nr_sequencia,
			dt_transacao,
			nr_seq_trans_financ,
			vl_transacao,
			dt_atualizacao,
			nm_usuario,
			nr_lote_contabil,
			ie_conciliacao,
			nr_seq_lote_cartao,
			nr_seq_banco,
			dt_referencia_saldo)
		values (nextval('movto_trans_financ_seq'),
			dt_baixa_p,
			nr_seq_trans_fin_baixa_w,
			vl_lote_w,
			clock_timestamp(),
			nm_usuario_p,
			0,
			'N',
			nr_seq_lote_p,
			nr_seq_conta_banco_w,
			clock_timestamp());
		/* ahoffelder - OS 286990 - 15/02/2011 */

		/* coloquei so na baixa por lote porque na baixar_parcela_cartao_cr ele ja gera movimento de despesa */

		if (nr_seq_trans_fin_despesa_w IS NOT NULL AND nr_seq_trans_fin_despesa_w::text <> '') then

			select	coalesce(sum(a.vl_despesa),0)
			into STRICT	vl_despesa_parcela_w
			from	movto_cartao_cr_parcela a
			where	a.nr_seq_lote	= nr_seq_lote_p;

			if (coalesce(vl_despesa_parcela_w,0) <> 0) then

				insert	into movto_trans_financ(nr_sequencia,
					dt_transacao,
					nr_seq_trans_financ,
					vl_transacao,
					dt_atualizacao,
					nm_usuario,
					nr_lote_contabil,
					ie_conciliacao,
					nr_seq_lote_cartao,
					nr_seq_banco,
					dt_referencia_saldo)
				values (nextval('movto_trans_financ_seq'),
					dt_baixa_p,
					nr_seq_trans_fin_despesa_w,
					vl_despesa_parcela_w,
					clock_timestamp(),
					nm_usuario_p,
					0,
					'N',
					nr_seq_lote_p,
					nr_seq_conta_banco_w,
					clock_timestamp());

			end if;
			
		end if;
		
		/*aqui vai gerar o movimento bancario para o tributo da parcela do cartao, deve gerar apenas um movimento para todos os tributos das parcelas.*/

	
		if (nr_seq_trans_fin_trib_w IS NOT NULL AND nr_seq_trans_fin_trib_w::text <> '') then
		
			/*Busca o total de imposto das parcelas para gerar a movimentacao. Se ja houver uma baixa parcial para essa movimentacao, o valor gerado vai ser integral*/

			select	coalesce(sum(a.vl_imposto),0)
			into STRICT	vl_imposto_parcela_w
			from	movto_cartao_cr_parcela a
			where	a.nr_seq_lote	= nr_seq_lote_p;
				
			if ( coalesce(vl_imposto_parcela_w,0) <> 0) then
			
				insert	into movto_trans_financ(nr_sequencia,
						dt_transacao,
						nr_seq_trans_financ,
						vl_transacao,
						dt_atualizacao,
						nm_usuario,
						nr_lote_contabil,
						ie_conciliacao,
						nr_seq_lote_cartao,
						nr_seq_banco,
						dt_referencia_saldo)
					values (nextval('movto_trans_financ_seq'),
						dt_baixa_p,
						nr_seq_trans_fin_trib_w,
						vl_imposto_parcela_w,
						clock_timestamp(),
						nm_usuario_p,
						0,
						'N',
						nr_seq_lote_p,
						nr_seq_conta_banco_w,
						clock_timestamp());
			end if;

		end if;

	end if;

elsif (ie_acao_p	= 'E') then

	if (ie_valor_movto_bco_w = 'S') then

		select	coalesce(sum(a.vl_parcela),0) * -1
		into STRICT	vl_lote_w
		from	movto_cartao_cr_parcela a
		where	a.nr_seq_lote	= nr_seq_lote_p;

	else

		select	coalesce(sum(vl_baixa),0) * -1
		into STRICT	vl_lote_w
		from	movto_cartao_cr_parcela b,
			movto_cartao_cr_baixa a
		where	a.nr_seq_parcela	= b.nr_sequencia
		and	b.nr_seq_lote		= nr_seq_lote_p;

	end if;

	open c02;
	loop
	fetch c02 into
		nr_seq_baixa_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		CALL estornar_movto_cartao_baixa(nr_seq_baixa_w,nm_usuario_p,ie_gerar_movto_banco_w,'N');
	end loop;
	close c02;

	if (coalesce(nr_seq_trans_fin_desp_w::text, '') = '') then
		vl_lote_w	:= vl_lote_w - coalesce(vl_despesa_w,0);
	end if;

	/* Se lanca movimento por lote */

	if (ie_forma_lanc_lote_cartao_w = 'L') then
	
		/* obter a movimentacao de origem do estorno para manter os vinculos. Select buscado da gerar_movto_baixa_cartao
		Busca pelo MIN pois caso lancar a transacao da baixa do lote e de despesa com a mesma TF, pegava a movimentacao de despesa. Como a despesa eh sempre lancado depois do lote, o lote tera menor seq.
		Incluido tambem a restricao do valor da transacao > 0 para nao considerar movimentos de estorno ja  lancados anteriormente.*/
		select	min(a.nr_sequencia)
		into STRICT	nr_seq_movto_orig_w
		from	movto_trans_financ a
		where	a.nr_seq_trans_financ	= nr_seq_trans_fin_baixa_w
		and	not exists ( SELECT	1
						 from	movto_trans_financ x
						 where	x.nr_seq_movto_orig	= a.nr_sequencia)
		and	coalesce(a.nr_seq_movto_orig::text, '') = ''
		and	a.nr_seq_lote_cartao = nr_seq_lote_p
		and	a.vl_transacao > 0;

		insert	into movto_trans_financ(nr_sequencia,
			dt_transacao,
			nr_seq_trans_financ,
			vl_transacao,
			dt_atualizacao,
			nm_usuario,
			nr_lote_contabil,
			ie_conciliacao,
			nr_seq_lote_cartao,
			nr_seq_banco,
			dt_referencia_saldo,
			nr_seq_movto_orig)
		values (nextval('movto_trans_financ_seq'),
			dt_baixa_p,
			nr_seq_trans_fin_baixa_w,
			vl_lote_w,
			clock_timestamp(),
			nm_usuario_p,
			0,
			'N',
			nr_seq_lote_p,
			nr_seq_conta_banco_w,
			clock_timestamp(),
			nr_seq_movto_orig_w);
		/* ahoffelder - OS 286990 - 15/02/2011 */

		/* coloquei so na baixa por lote porque na baixar_parcela_cartao_cr ele ja gera movimento de despesa */

		if (nr_seq_trans_fin_despesa_w IS NOT NULL AND nr_seq_trans_fin_despesa_w::text <> '') then

			select	coalesce(sum(a.vl_despesa),0) * -1
			into STRICT	vl_despesa_parcela_w
			from	movto_cartao_cr_parcela a
			where	a.nr_seq_lote	= nr_seq_lote_p;

			if (coalesce(vl_despesa_parcela_w,0) <> 0) then
			
				/* obter a movimentacao de origem do estorno para manter os vinculos. Select buscado da gerar_movto_baixa_cartao
				Busca pelo MIN pois caso lancar a transacao da baixa do lote e de despesa com a mesma TF, pegava a movimentacao de lote. Como a despesa eh sempre lancado depois do lote, o lote tera menor seq.
				Incluido tambem a restricao do valor da transacao > 0 para nao considerar movimentos de estorno ja  lancados anteriormente.*/
				select	min(a.nr_sequencia)
				into STRICT	nr_seq_movto_orig_w
				from	movto_trans_financ a
				where	a.nr_seq_trans_financ	= nr_seq_trans_fin_despesa_w
				and	not exists ( SELECT	1
								 from	movto_trans_financ x
								 where	x.nr_seq_movto_orig	= a.nr_sequencia)
				and	coalesce(a.nr_seq_movto_orig::text, '') = ''
				and	a.nr_seq_lote_cartao = nr_seq_lote_p
				and	a.vl_transacao > 0;			

				insert	into movto_trans_financ(nr_sequencia,
					dt_transacao,
					nr_seq_trans_financ,
					vl_transacao,
					dt_atualizacao,
					nm_usuario,
					nr_lote_contabil,
					ie_conciliacao,
					nr_seq_lote_cartao,
					nr_seq_banco,
					dt_referencia_saldo,
					nr_seq_movto_orig)
				values (nextval('movto_trans_financ_seq'),
					dt_baixa_p,
					nr_seq_trans_fin_despesa_w,
					vl_despesa_parcela_w,
					clock_timestamp(),
					nm_usuario_p,
					0,
					'N',
					nr_seq_lote_p,
					nr_seq_conta_banco_w,
					clock_timestamp(),
					nr_seq_movto_orig_w);

			end if;

		end if;
		
		/*aqui vai gerar o movimento bancario para o tributo da parcela do cartao, deve gerar apenas um movimento para todos os tributos das parcelas.*/
	
		if (nr_seq_trans_fin_trib_w IS NOT NULL AND nr_seq_trans_fin_trib_w::text <> '') then
		
			/*Busca o total de imposto das parcelas para gerar a movimentacao. Se ja houver uma baixa parcial para essa movimentacao, o valor gerado vai ser integral*/

			select	coalesce(sum(a.vl_imposto),0) * -1
			into STRICT	vl_imposto_parcela_w
			from	movto_cartao_cr_parcela a
			where	a.nr_seq_lote	= nr_seq_lote_p;
				
			if ( coalesce(vl_imposto_parcela_w,0) <> 0) then
			
				insert	into movto_trans_financ(nr_sequencia,
						dt_transacao,
						nr_seq_trans_financ,
						vl_transacao,
						dt_atualizacao,
						nm_usuario,
						nr_lote_contabil,
						ie_conciliacao,
						nr_seq_lote_cartao,
						nr_seq_banco,
						dt_referencia_saldo)
					values (nextval('movto_trans_financ_seq'),
						dt_baixa_p,
						nr_seq_trans_fin_trib_w,
						vl_imposto_parcela_w,
						clock_timestamp(),
						nm_usuario_p,
						0,
						'N',
						nr_seq_lote_p,
						nr_seq_conta_banco_w,
						clock_timestamp());
			end if;

		end if;

	end if;
	
	CALL estornar_banco_pend_cartao_cr(nm_usuario_p,null,nr_seq_lote_p,dt_baixa_p);
end if;


if (nr_seq_trans_fin_desp_w IS NOT NULL AND nr_seq_trans_fin_desp_w::text <> '') then

	if (ie_acao_p	= 'I') then
		CALL gerar_movto_despesa_equip(vl_despesa_w,nr_seq_trans_fin_desp_w,nr_seq_banco_desp_w,dt_baixa_p,nm_usuario_p,'N');
	elsif (ie_acao_p	= 'E') then
		CALL gerar_movto_despesa_equip(vl_despesa_w * -1,nr_seq_trans_fin_desp_w,nr_seq_banco_desp_w,dt_baixa_p,nm_usuario_p,'N');
	end if;
end if;

<<final>>

update	lote_baixa_cartao_cr
set	dt_baixa	= CASE WHEN ie_acao_p='I' THEN dt_baixa_p  ELSE null END ,
	nm_usuario	= nm_usuario_p,
	dt_atualizacao	= clock_timestamp()
where	nr_sequencia	= nr_seq_lote_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixar_lote_cartao_cr (nr_seq_lote_p bigint, dt_baixa_p timestamp, nm_usuario_p text, ie_acao_p text) FROM PUBLIC;

