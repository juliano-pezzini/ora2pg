-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_atend_odontologico ( dt_inicial_p timestamp, dt_final_p timestamp, ds_profissionais_p text, nm_usuario_p text, ie_html_p text default 'N') AS $body$
DECLARE


cd_profissional_w				esus_atend_odontolog.cd_pri_profissional%type;
ds_profissionais_w				varchar(4000);
ie_pos_virgula_w				smallint;
nr_row                          bigint := 0;
ie_encaminhamentos_sus_w        varchar(50);

nr_seq_atend_odontolog_w        esus_atend_odontolog.nr_sequencia%type;
cd_cbo_w                        esus_atend_odontolog.cd_pri_cbo%type;
nr_cnes_equipe_w                esus_atend_odontolog.cd_cnes_unidade%type;
nr_seq_equipe_w                 esus_atend_odontolog.nr_seq_sus_equipe%type;
nr_atendimento_w                esus_atend_odontolog.nr_atendimento%type;
cd_pessoa_fisica_w              esus_atend_odontolog.cd_pessoa_fisica%type;
ie_tipo_atendimento_w           esus_atend_odontolog.ie_tipo_atendimento%type;
ie_tipo_consulta_w              esus_atend_odontolog.ie_tipo_consulta%type;
ie_abscesso_den_alve_w          esus_atend_odontolog.ie_abscesso_den_alve%type;
ie_alteracao_tec_mol_w          esus_atend_odontolog.ie_alteracao_tec_mol%type;
ie_dor_dente_w                  esus_atend_odontolog.ie_dor_dente%type;
ie_fenda_labio_palat_w          esus_atend_odontolog.ie_fenda_labio_palat%type;
ie_fluorose_dentaria_w          esus_atend_odontolog.ie_fluorose_dentaria%type;
ie_trauma_dento_alve_w          esus_atend_odontolog.ie_trauma_dento_alve%type;
ie_nao_identificado_w           esus_atend_odontolog.ie_nao_identificado%type;
ie_turno_w                      esus_atend_odontolog.ie_turno%type;

ie_status_esus_w                odont_consulta.ie_status_esus%type;
cd_especialidade_w              esus_regra_encam_espec.cd_especialidade%type;

nr_seq_consulta_w               odont_procedimento.nr_seq_consulta%type;
qt_procedimento_w               odont_procedimento.qt_procedimento%type;
cd_procedimento_w               odont_procedimento.cd_procedimento%type;
ie_origem_proced_w              odont_procedimento.ie_origem_proced%type;

c01 CURSOR FOR
    SELECT	max(a.nr_atendimento),
            a.cd_pessoa_fisica,
            max(a.ie_tipo_atendimento),
            max(a.ie_tipo_consulta),
            max(b.ie_abscesso_den_alve),
            max(b.ie_alteracao_tec_mol),
            max(b.ie_dor_dente),
            max(b.ie_fenda_labio_palat),
            max(b.ie_fluorose_dentaria),
            max(b.ie_trauma_dento_alve),
            max(b.ie_nao_identificado),
            max(a.ie_status_esus),
            max(a.nr_sequencia)
    FROM odont_consulta a
LEFT OUTER JOIN esus_vig_saude_odonto b ON (a.nr_sequencia = b.nr_seq_odont_cons)
WHERE a.cd_medico = cd_profissional_w and a.dt_consulta between inicio_dia(dt_inicial_p) and fim_dia(dt_final_p) and a.ie_situacao = 'A' and (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '') and coalesce(a.dt_inativacao::text, '') = '' group by a.cd_pessoa_fisica;

c02 CURSOR FOR
    SELECT	qt_procedimento,
            cd_procedimento,
            ie_origem_proced
    from	odont_procedimento
    where	nr_seq_consulta = nr_seq_consulta_w
    and		dt_procedimento between inicio_dia(dt_inicial_p) and fim_dia(dt_final_p)
    and		cd_profissional = cd_profissional_w
    and		cd_pessoa_fisica = cd_pessoa_fisica_w
    and		coalesce(dt_inativacao::text, '') = '';

c03 CURSOR FOR
    SELECT	a.qt_procedimento,
            a.cd_procedimento,
            a.ie_origem_proced
    from	ODONT_PROCEDIMENTO_PROC a,
            ODONT_PROCEDIMENTO b
    where	b.nr_seq_consulta = nr_seq_consulta_w
    and		b.dt_procedimento between inicio_dia(dt_inicial_p) and fim_dia(dt_final_p)
    and		a.cd_profissional = cd_profissional_w
    and		b.cd_pessoa_fisica = cd_pessoa_fisica_w
    and		coalesce(b.dt_inativacao::text, '') = '';


procedure update_total_procs(nr_seq_atend_onco_w in ESUS_ATEND_ODONTOLOG.NR_SEQUENCIA%type) is
  QT_ADAPT_PROT_DENTAR_w ESUS_ATEND_ODONTOLOG.QT_ADAPT_PROT_DENTAR%type;
  QT_APLICACAO_SELANTE_w ESUS_ATEND_ODONTOLOG.QT_APLICACAO_SELANTE%type;
  QT_APLICA_CARIOSTATI_w ESUS_ATEND_ODONTOLOG.QT_APLICA_CARIOSTATI%type;
  QT_APLICA_TOPI_FLUOR_w ESUS_ATEND_ODONTOLOG.QT_APLICA_TOPI_FLUOR%type;
  QT_CAPEAMENTO_PULPAR_w ESUS_ATEND_ODONTOLOG.QT_CAPEAMENTO_PULPAR%type;
  QT_CIMENTACAO_PROTES_w ESUS_ATEND_ODONTOLOG.QT_CIMENTACAO_PROTES%type;
  QT_CUR_DEM_SEM_PREPA_w ESUS_ATEND_ODONTOLOG.QT_CUR_DEM_SEM_PREPA%type;
  QT_DRENAGEM_ABSCESSO_w ESUS_ATEND_ODONTOLOG.QT_DRENAGEM_ABSCESSO%type;
  QT_EVIDEN_PLACA_BACT_w ESUS_ATEND_ODONTOLOG.QT_EVIDEN_PLACA_BACT%type;
  QT_EXODONTIA_DECIDUO_w ESUS_ATEND_ODONTOLOG.QT_EXODONTIA_DECIDUO%type;
  QT_EXODONTIA_PERMANT_w ESUS_ATEND_ODONTOLOG.QT_EXODONTIA_PERMANT%type;
  QT_INST_PROTESE_DENT_w ESUS_ATEND_ODONTOLOG.QT_INST_PROTESE_DENT%type;
  QT_MOLDAGEM_DEN_GENG_w ESUS_ATEND_ODONTOLOG.QT_MOLDAGEM_DEN_GENG%type;
  QT_ORIENTACAO_HIGIEN_w ESUS_ATEND_ODONTOLOG.QT_ORIENTACAO_HIGIEN%type;
  QT_PROFIL_PLACA_BACT_w ESUS_ATEND_ODONTOLOG.QT_PROFIL_PLACA_BACT%type;
  QT_PULPOTOMIA_DENTAR_w ESUS_ATEND_ODONTOLOG.QT_PULPOTOMIA_DENTAR%type;
  QT_RADIOG_PERIAP_INT_w ESUS_ATEND_ODONTOLOG.QT_RADIOG_PERIAP_INT%type;
  QT_RASPA_ALISA_SUBGE_w ESUS_ATEND_ODONTOLOG.QT_RASPA_ALISA_SUBGE%type;
  QT_RASP_ALIS_POL_SUP_w ESUS_ATEND_ODONTOLOG.QT_RASP_ALIS_POL_SUP%type;
  QT_RES_DEN_POSTERIOR_w ESUS_ATEND_ODONTOLOG.QT_RES_DEN_POSTERIOR%type;
  QT_RESTA_DENTE_DECID_w ESUS_ATEND_ODONTOLOG.QT_RESTA_DENTE_DECID%type;
  QT_REST_DEN_ANTERIOR_w ESUS_ATEND_ODONTOLOG.QT_REST_DEN_ANTERIOR%type;
  QT_RET_PONTO_CIR_BAS_w ESUS_ATEND_ODONTOLOG.QT_RET_PONTO_CIR_BAS%type;
  QT_SELA_PRO_CAV_DENT_w ESUS_ATEND_ODONTOLOG.QT_SELA_PRO_CAV_DENT%type;
  QT_TRATAMENTO_ALVEOL_w ESUS_ATEND_ODONTOLOG.QT_TRATAMENTO_ALVEOL%type;
  QT_ULOTOMIA_ULECTOMI_w ESUS_ATEND_ODONTOLOG.QT_ULOTOMIA_ULECTOMI%type;

  qt_procedimentos_w ESUS_ATEND_ODONTOLOG.QT_ADAPT_PROT_DENTAR%type;
  nr_seq_regra_total_campo_w ESUS_REGRA_TOTAL_CAMPO.NR_SEQUENCIA%type;

c04 CURSOR FOR
	SELECT	nr_sequencia,
		ie_campo_totalizador
	from	esus_regra_total_campo
	where	ie_situacao = 'A';
	
c05 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced
	from	esus_regra_total_proced
	where	nr_seq_regra_campo = nr_seq_regra_total_campo_w;
  i RECORD;

BEGIN
  for regra_total in c04 loop
    nr_seq_regra_total_campo_w := regra_total.nr_sequencia;
    for proc_regra in c05 loop
      select count(1)
      into STRICT qt_procedimentos_w
      from esus_atend_odon_proced
      where NR_SEQ_ATEND_ONCO = nr_seq_atend_onco_w
        and CD_PROCEDIMENTO = proc_regra.cd_procedimento
        and IE_ORIGEM_PROCED = proc_regra.ie_origem_proced;

      if (qt_procedimentos_w > 0) then
        if (regra_total.ie_campo_totalizador = 9) then
          QT_ADAPT_PROT_DENTAR_W := coalesce(QT_ADAPT_PROT_DENTAR_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 10) then
          QT_APLICACAO_SELANTE_W := coalesce(QT_APLICACAO_SELANTE_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 11) then
          QT_APLICA_CARIOSTATI_W := coalesce(QT_APLICA_CARIOSTATI_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 12) then
          QT_APLICA_TOPI_FLUOR_W := coalesce(QT_APLICA_TOPI_FLUOR_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 13) then
          QT_CAPEAMENTO_PULPAR_W := coalesce(QT_CAPEAMENTO_PULPAR_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 14) then
          QT_CIMENTACAO_PROTES_W := coalesce(QT_CIMENTACAO_PROTES_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 15) then
          QT_CUR_DEM_SEM_PREPA_W := coalesce(QT_CUR_DEM_SEM_PREPA_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 16) then
          QT_DRENAGEM_ABSCESSO_W := coalesce(QT_DRENAGEM_ABSCESSO_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 17) then
          QT_EVIDEN_PLACA_BACT_W := coalesce(QT_EVIDEN_PLACA_BACT_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 18) then
          QT_EXODONTIA_DECIDUO_W := coalesce(QT_EXODONTIA_DECIDUO_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 19) then
          QT_EXODONTIA_PERMANT_W := coalesce(QT_EXODONTIA_PERMANT_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 20) then
          QT_INST_PROTESE_DENT_W := coalesce(QT_INST_PROTESE_DENT_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 21) then
          QT_MOLDAGEM_DEN_GENG_W := coalesce(QT_MOLDAGEM_DEN_GENG_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 22) then
          QT_ORIENTACAO_HIGIEN_W := coalesce(QT_ORIENTACAO_HIGIEN_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 23) then
          QT_PROFIL_PLACA_BACT_W := coalesce(QT_PROFIL_PLACA_BACT_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 24) then
          QT_PULPOTOMIA_DENTAR_W := coalesce(QT_PULPOTOMIA_DENTAR_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 25) then
          QT_RADIOG_PERIAP_INT_W := coalesce(QT_RADIOG_PERIAP_INT_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 26) then
          QT_RASPA_ALISA_SUBGE_W := coalesce(QT_RASPA_ALISA_SUBGE_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 27) then
          QT_RASP_ALIS_POL_SUP_W := coalesce(QT_RASP_ALIS_POL_SUP_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 28) then
          QT_RES_DEN_POSTERIOR_W := coalesce(QT_RES_DEN_POSTERIOR_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 29) then
          QT_RESTA_DENTE_DECID_W := coalesce(QT_RESTA_DENTE_DECID_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 30) then
          QT_REST_DEN_ANTERIOR_W := coalesce(QT_REST_DEN_ANTERIOR_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 31) then
          QT_RET_PONTO_CIR_BAS_W := coalesce(QT_RET_PONTO_CIR_BAS_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 32) then
          QT_SELA_PRO_CAV_DENT_W := coalesce(QT_SELA_PRO_CAV_DENT_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 33) then
          QT_TRATAMENTO_ALVEOL_W := coalesce(QT_TRATAMENTO_ALVEOL_W, 0) + qt_procedimentos_w;
        elsif (regra_total.ie_campo_totalizador = 34) then
          QT_ULOTOMIA_ULECTOMI_W := coalesce(QT_ULOTOMIA_ULECTOMI_W, 0) + qt_procedimentos_w;
        end if;
      end if;
    end loop;
  end loop;

  update ESUS_ATEND_ODONTOLOG
  set
    QT_ADAPT_PROT_DENTAR = QT_ADAPT_PROT_DENTAR_W,
    QT_APLICACAO_SELANTE = QT_APLICACAO_SELANTE_W,
    QT_APLICA_CARIOSTATI = QT_APLICA_CARIOSTATI_W,
    QT_APLICA_TOPI_FLUOR = QT_APLICA_TOPI_FLUOR_W,
    QT_CAPEAMENTO_PULPAR = QT_CAPEAMENTO_PULPAR_W,
    QT_CIMENTACAO_PROTES = QT_CIMENTACAO_PROTES_W,
    QT_CUR_DEM_SEM_PREPA = QT_CUR_DEM_SEM_PREPA_W,
    QT_DRENAGEM_ABSCESSO = QT_DRENAGEM_ABSCESSO_W,
    QT_EVIDEN_PLACA_BACT = QT_EVIDEN_PLACA_BACT_W,
    QT_EXODONTIA_DECIDUO = QT_EXODONTIA_DECIDUO_W,
    QT_EXODONTIA_PERMANT = QT_EXODONTIA_PERMANT_W,
    QT_INST_PROTESE_DENT = QT_INST_PROTESE_DENT_W,
    QT_MOLDAGEM_DEN_GENG = QT_MOLDAGEM_DEN_GENG_W,
    QT_ORIENTACAO_HIGIEN = QT_ORIENTACAO_HIGIEN_W,
    QT_PROFIL_PLACA_BACT = QT_PROFIL_PLACA_BACT_W,
    QT_PULPOTOMIA_DENTAR = QT_PULPOTOMIA_DENTAR_W,
    QT_RADIOG_PERIAP_INT = QT_RADIOG_PERIAP_INT_W,
    QT_RASPA_ALISA_SUBGE = QT_RASPA_ALISA_SUBGE_W,
    QT_RASP_ALIS_POL_SUP = QT_RASP_ALIS_POL_SUP_W,
    QT_RES_DEN_POSTERIOR = QT_RES_DEN_POSTERIOR_W,
    QT_RESTA_DENTE_DECID = QT_RESTA_DENTE_DECID_W,
    QT_REST_DEN_ANTERIOR = QT_REST_DEN_ANTERIOR_W,
    QT_RET_PONTO_CIR_BAS = QT_RET_PONTO_CIR_BAS_W,
    QT_SELA_PRO_CAV_DENT = QT_SELA_PRO_CAV_DENT_W,
    QT_TRATAMENTO_ALVEOL = QT_TRATAMENTO_ALVEOL_W,
    QT_ULOTOMIA_ULECTOMI = QT_ULOTOMIA_ULECTOMI_W
  where nr_sequencia = nr_seq_atend_onco_w;
end;

begin
    if (ds_profissionais_p IS NOT NULL AND ds_profissionais_p::text <> '') then

        ds_profissionais_w := ds_profissionais_p;

        while (ds_profissionais_w IS NOT NULL AND ds_profissionais_w::text <> '') loop
            ie_pos_virgula_w := position(',' in ds_profissionais_w);

            if (ie_pos_virgula_w <> 0) then
                cd_profissional_w := substr(ds_profissionais_w, 1, (ie_pos_virgula_w - 1));
            else
                cd_profissional_w := ds_profissionais_w;
            end if;

            ds_profissionais_w := substr(ds_profissionais_w, (ie_pos_virgula_w + 1), length(ds_profissionais_w));

            
            select  max(b.nr_sequencia),
                    max(a.cd_cbo),
                    max(a.nr_cnes_equipe)
            into STRICT    nr_seq_equipe_w,
                    cd_cbo_w,
                    nr_cnes_equipe_w
            from	sus_profissional_equipe a,
                    sus_equipe b
            where	a.nr_seq_equipe_sus = b.nr_seq_equipe
            and		a.cd_municipio_equipe = b.cd_municipio_ibge
            and		a.nr_cnes_equipe = b.nr_cnes_equipe
            and		a.cd_pessoa_fisica = cd_profissional_w;


            open c01;
            loop
            fetch c01 into
                nr_atendimento_w,
                cd_pessoa_fisica_w,
                ie_tipo_atendimento_w,
                ie_tipo_consulta_w,
                ie_abscesso_den_alve_w,
                ie_alteracao_tec_mol_w,
                ie_dor_dente_w,
                ie_fenda_labio_palat_w,
                ie_fluorose_dentaria_w,
                ie_trauma_dento_alve_w,
                ie_nao_identificado_w,
                ie_status_esus_w,
                nr_seq_consulta_w;
            EXIT WHEN NOT FOUND; /* apply on c01 */
                if (cd_cbo_w IS NOT NULL AND cd_cbo_w::text <> '') and (nr_cnes_equipe_w IS NOT NULL AND nr_cnes_equipe_w::text <> '') and (ie_tipo_atendimento_w IS NOT NULL AND ie_tipo_atendimento_w::text <> '') then
                    select	max(cd_especialidade)
                    into STRICT    cd_especialidade_w
                    from	atend_encaminhamento
                    where	nr_sequencia = (SELECT	max(nr_sequencia)
                                            from	atend_encaminhamento
                                            where	cd_pessoa_fisica = cd_pessoa_fisica_w
                                            and		ie_situacao = 'A'
                                            and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
                                            and		coalesce(dt_inativacao::text, '') = ''
                                            and		(cd_especialidade IS NOT NULL AND cd_especialidade::text <> ''));

                    for i in (  SELECT	to_char(ie_encaminhamento_sus,'09') ie_encaminhamento_sus,
                                        max(nr_sequencia) nr_row
                                from	esus_regra_encam_espec
                                where	cd_especialidade = cd_especialidade_w
                                and		ie_situacao = 'A'
                                group by to_char(ie_encaminhamento_sus,'09')) loop
                        if (nr_row <> i.nr_row) then
                            ie_encaminhamentos_sus_w := ie_encaminhamentos_sus_w || i.ie_encaminhamento_sus || ',';
                            nr_row := i.nr_row;
                        end if;
                    end loop;


                    select (
                      case
                        when dt_entrada_atend between trunc(dt_entrada_atend) + 5/24 and trunc(dt_entrada_atend) + 12/24 then '1'
                        when dt_entrada_atend between trunc(dt_entrada_atend) + 12/24 and trunc(dt_entrada_atend) + 18/24 then '2'
                        else '3'
                      end
                    )
                    into STRICT    ie_turno_w
                    from (
                      SELECT obter_data_entrada(nr_atendimento_w) dt_entrada_atend 
                      ) alias6;

                    select  nextval('esus_atend_odontolog_seq')
                    into STRICT    nr_seq_atend_odontolog_w
;

                    insert into esus_atend_odontolog(
                        nr_sequencia,
                        cd_estabelecimento,
                        dt_atualizacao,
                        nm_usuario,
                        dt_atualizacao_nrec,
                        nm_usuario_nrec,
                        dt_liberacao,
                        cd_pri_profissional,
                        cd_pri_cbo,
                        cd_cnes_unidade,
                        nr_seq_sus_equipe,
                        dt_atendimento,
                        cd_pessoa_fisica,
                        nr_prontuario,
                        ie_local_atendimento,
                        ie_tipo_atendimento,
                        ie_gestante,
                        ie_tipo_consulta,
                        ie_abscesso_den_alve,
                        ie_alteracao_tec_mol,
                        ie_dor_dente,
                        ie_fenda_labio_palat,
                        ie_fluorose_dentaria,
                        ie_trauma_dento_alve,
                        ie_nao_identificado,                    
                        ie_alta_episodio,
                        ie_tratame_concluido,
                        ie_enc_atend_nec_esp,
                        ie_enca_cirurgia_bmf,
                        ie_encami_endodontia,
                        ie_enc_estinatologia,
                        ie_enc_implantodonti,
                        ie_enc_odontoperiatr,
                        ie_enc_ortod_ortoped,
                        ie_encam_periodontia,
                        ie_enc_prot_dentaria,
                        ie_encami_radiologia,
                        ie_encaminham_outros,
                        nr_atendimento,
                        ie_turno,
                        cd_pessoa_digitacao)
                    values (
                        nr_seq_atend_odontolog_w,
                        obter_estabelecimento_ativo,
                        clock_timestamp(),
                        nm_usuario_p,
                        clock_timestamp(),
                        nm_usuario_p,
                        clock_timestamp(),
                        cd_profissional_w,
                        cd_cbo_w,
                        nr_cnes_equipe_w,
                        nr_seq_equipe_w,
                        obter_data_entrada(nr_atendimento_w),
                        cd_pessoa_fisica_w,
                        obter_prontuario_atendimento(nr_atendimento_w),
                        '1',
                        ie_tipo_atendimento_w,
                        obter_inf_saude_mulher(null, 'G', cd_pessoa_fisica_w),
                        ie_tipo_consulta_w,
                        ie_abscesso_den_alve_w,
                        ie_alteracao_tec_mol_w,
                        ie_dor_dente_w,
                        ie_fenda_labio_palat_w,
                        ie_fluorose_dentaria_w,
                        ie_trauma_dento_alve_w,
                        ie_nao_identificado_w,                    
                        CASE WHEN ie_status_esus_w='1' THEN  'S'  ELSE 'N' END ,
                        CASE WHEN ie_status_esus_w='2' THEN  'S'  ELSE 'N' END ,
                        CASE WHEN position('01' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('02' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('03' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('04' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('05' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('06' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('07' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('08' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('09' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('10' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        CASE WHEN position('11' in coalesce(ie_encaminhamentos_sus_w,0))=0 THEN  'N'  ELSE 'S' END ,
                        nr_atendimento_w,
                        ie_turno_w,
                        obter_pessoa_fisica_usuario(nm_usuario_p, 'C'));
					if (ie_html_p = 'N')then
						open c02;
						loop
						fetch c02 into
							qt_procedimento_w,
							cd_procedimento_w,
							ie_origem_proced_w;
						EXIT WHEN NOT FOUND; /* apply on c02 */
							insert into esus_atend_odon_proced(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								qt_procedimento,
								cd_procedimento,
								ie_origem_proced,
								nr_seq_atend_onco)
							values (
								nextval('esus_atend_odon_proced_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								qt_procedimento_w,
								cd_procedimento_w,
								ie_origem_proced_w,
								nr_seq_atend_odontolog_w);
						end loop;
						close c02;
					else
						open c03;
						loop
						fetch c03 into
							qt_procedimento_w,
							cd_procedimento_w,
							ie_origem_proced_w;
						EXIT WHEN NOT FOUND; /* apply on c03 */
							insert into esus_atend_odon_proced(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								qt_procedimento,
								cd_procedimento,
								ie_origem_proced,
								nr_seq_atend_onco)
							values (
								nextval('esus_atend_odon_proced_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								qt_procedimento_w,
								cd_procedimento_w,
								ie_origem_proced_w,
								nr_seq_atend_odontolog_w);
						end loop;
						close c03;
					end if;
          ie_encaminhamentos_sus_w := '';

          update_total_procs(nr_seq_atend_odontolog_w);
                end if;
            end loop;
            close c01;
        end loop;
    end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_atend_odontologico ( dt_inicial_p timestamp, dt_final_p timestamp, ds_profissionais_p text, nm_usuario_p text, ie_html_p text default 'N') FROM PUBLIC;

