-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_agendamentos_cons_conexa (nr_seq_agenda_conexa_p text,	--Codigo da agenda no conexa
 nr_seq_espec_conexa_p text,	--Codigo de especialidade do conexa no tasy
 dt_agenda_p text,	--Data agenda
 hr_inicial_p text,	--hr inicial
 hr_final_p text,	--hr_final
 nr_seq_tipo_consulta_p text,	--Tipo primeira consulta/retorno
 nr_seq_motivo_agendamento_p text,	--Motivo do agendamento classificacao
 nr_seq_agendamento_p text,	--Chave unica entre o agendamento do tasy e conexa				
 nr_seq_medico_conexa_p text,	--Codigo do medico no conexa
 nm_paciente_p text,	--Nome do paciente
 nr_seq_pac_conexa_p text,	--Codigo da pf no conexa
 ie_sexo_p text,	--Idenfica o sexo do paciente
 dt_nascimento_p text, nr_identidade_p text, nr_cpf_p text, nm_mae_p text, nm_pai_p text, ds_endereco_p text, ds_num_endereco_p text, ds_bairro_p text, ds_municipio_p text, ds_uf_p text, nr_cep_p text, nr_ddd_telefone_p text, nr_telefone_p text, nr_ddd_telefone_celular_p text, nr_telefone_celular_p text, ds_email_p text, ie_acao_p text,	--agendamento/cancelamento/transferencia				
 nr_seq_agendamento_origem_p text,	--chave de origem do agenamento
 nr_seq_medico_destino_p text,	--medico
 hr_inicial_destino_p text,	-- hr_inicial_destino
 hr_final_destino_p text,	--hr_final destino
 dt_destino_p text,	-- data destino
 nr_seq_especialidade_destino_p text,	-- especialidade destino
 nr_seq_agenda_conexa_destino_p text,	-- agenda de destino
 nr_seq_motivo_canc_p text,	--motivo de cancelamento
 cd_unidade_solic_p text, num_cns_p text, nm_usuario_p text, ie_erro_p INOUT text) AS $body$
DECLARE


					
/*  Agendamento  */

cd_paciente_w		varchar(10);
cd_agenda_w		bigint;	
cd_medico_w		varchar(10);	
dt_agenda_w		varchar(20);
dt_agenda_for_w		timestamp;	
dt_nascimento_w		varchar(20);
dt_nascimento_for_w	timestamp;	
nr_minuto_duracao_w	bigint;
ie_classif_agenda_w	varchar(5);
nr_telefone_w		varchar(80);
cd_estabelecimento_w	smallint;

nr_idade_w		smallint;
cd_especialidade_w	integer;
nr_seq_motivo_agendamento_w	bigint;
cd_procedencia_w	bigint;
nr_seq_turno_w		bigint;	
nr_seq_preferencia_w	bigint;




/* Cancelamento */

nr_seq_motivo_canc_w	agenda_motivo_cancelamento.cd_motivo%type;
qt_hor_cancel_w			bigint;	
nr_seq_agenda_w		agenda_consulta.cd_agendamento_externo%type;

/* Transferencia */

nr_sequencia_agend_transf_w	agenda_consulta.cd_agendamento_externo%type;
cd_pessoa_fisica_transf_w	varchar(10);
cd_turno_transf_w		varchar(1);
ie_classif_agenda_transf_w	varchar(5);
nm_usuario_origem_transf_w	varchar(15);
dt_nascimento_pac_transf_w	timestamp;
qt_idade_pac_transf_w		smallint;
nr_telefone_transf_w		varchar(80);	
nr_seq_motivo_agend_transf_w	bigint;
nm_paciente_transf_w		varchar(80);

/* Excecao */

ie_erro_w	varchar(1)	:= 'N';


/* Informacoes padroes */

cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_tipo_acomodacao_w	smallint;
ie_gerar_setor_agenda_w	varchar(1);
cd_setor_agenda_w	integer;


tam_lista_w		bigint;
ie_pos_virgula_w	smallint;
ds_lista_cns_w		varchar(2000);
nr_cartao_sus_w		varchar(20);

cd_estabelecimento_usuario_w estabelecimento.cd_estabelecimento%type;


BEGIN
begin

ds_lista_cns_w := num_cns_p||',';

select wheb_usuario_pck.get_cd_estabelecimento
into STRICT cd_estabelecimento_usuario_w
;

select	max(cd_convenio),
	max(cd_categoria),
	max(cd_tipo_acomodacao),
	coalesce(max(ie_gerar_setor_agenda),'N')
into STRICT	cd_convenio_w,
	cd_categoria_w,
	cd_tipo_acomodacao_w,
	ie_gerar_setor_agenda_w
from	param_agenda_conexa;

if (ie_acao_p = 'A') then

	dt_agenda_w		:= elimina_caracteres_especiais(dt_agenda_p);
	dt_agenda_for_w		:= to_date(substr(dt_agenda_w,7,2)||'/'||substr(dt_agenda_w,5,2)||'/'||substr(dt_agenda_w,1,4)||' '||hr_inicial_p,'dd/mm/yyyy hh24:mi:ss');
	dt_nascimento_w		:= elimina_caracteres_especiais(dt_nascimento_p);
	dt_nascimento_for_w	:= to_date(substr(dt_nascimento_w,7,2)||'/'||substr(dt_nascimento_w,5,2)||'/'||substr(dt_nascimento_w,1,4),'dd/mm/yyyy');
	nr_minuto_duracao_w	:= (to_date(hr_final_p,'hh24:mi:ss') - to_date(hr_inicial_p,'hh24:mi:ss')) * 1440;
	nr_telefone_w		:= substr(nr_ddd_telefone_p||' '||nr_telefone_p||'   '||nr_ddd_telefone_celular_p||' '||nr_telefone_celular_p,1,80);

	/* Buscando o paciente pelo codigo de integracao */

	select	max(a.cd_pessoa_fisica)
	into STRICT	cd_paciente_w
	from	pessoa_fisica a,
		pf_codigo_externo b
	where	b.cd_pessoa_fisica 		= a.cd_pessoa_fisica
	and	b.ie_tipo_codigo_externo	= 'CO'
	and	b.cd_pessoa_fisica_externo	= nr_seq_pac_conexa_p
	and (coalesce(cd_estabelecimento_usuario_w::text, '') = ''
		or (coalesce(b.cd_estabelecimento,cd_estabelecimento_usuario_w) = cd_estabelecimento_usuario_w));
	
	if (coalesce(cd_paciente_w::text, '') = '') then
		
		while(ds_lista_cns_w IS NOT NULL AND ds_lista_cns_w::text <> '')  loop
			begin
			tam_lista_w		:= length(ds_lista_cns_w);
			ie_pos_virgula_w	:= position(',' in ds_lista_cns_w);

			if (ie_pos_virgula_w <> 0) then
				nr_cartao_sus_w	:= substr(ds_lista_cns_w,1,(ie_pos_virgula_w - 1));
				ds_lista_cns_w	:= substr(ds_lista_cns_w,(ie_pos_virgula_w + 1),tam_lista_w);
			end if;
			
			if (coalesce(cd_paciente_w::text, '') = '') then
				select	max(cd_pessoa_fisica)
				into STRICT	cd_paciente_w
				from	pessoa_fisica
				where	nr_cartao_nac_sus = nr_cartao_sus_w;	
			end if;
			
			end;
			end loop;
		
		if (coalesce(cd_paciente_w::text, '') = '') then
			select	max(a.cd_pessoa_fisica)
			into STRICT	cd_paciente_w
			from	pessoa_fisica a,
				compl_pessoa_fisica b
			where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
			and	b.ie_tipo_complemento = 5
			and	upper(b.nm_contato) = upper(nm_mae_p)
			and	a.dt_nascimento = dt_nascimento_for_w
			and	upper(a.nm_pessoa_fisica) = upper(nm_paciente_p);
		end if;
			
		if (cd_paciente_w IS NOT NULL AND cd_paciente_w::text <> '') then
			insert	into pf_codigo_externo(nr_sequencia,
				cd_pessoa_fisica,
				cd_pessoa_fisica_externo,  
				dt_atualizacao,
				dt_atualizacao_nrec,     
				ie_tipo_codigo_externo,  
				nm_usuario,   
				nm_usuario_nrec,
				cd_estabelecimento)
			values (nextval('pf_codigo_externo_seq'),
				cd_paciente_w,
				nr_seq_pac_conexa_p,
				clock_timestamp(),
				clock_timestamp(),
				'CO',
				nm_usuario_p,
				nm_usuario_p,
				cd_estabelecimento_usuario_w);
		end if;
	end if;


	/* Buscando medico conforme codigo no Conexa */

	select	max(a.cd_pessoa_fisica)
	into STRICT	cd_medico_w
	from	pessoa_fisica a,
		pf_codigo_externo b
	where	b.cd_pessoa_fisica 		= a.cd_pessoa_fisica
	and	b.ie_tipo_codigo_externo	= 'CO'
	and	b.cd_pessoa_fisica_externo	= nr_seq_medico_conexa_p
	and (coalesce(cd_estabelecimento_usuario_w::text, '') = ''
		or (coalesce(b.cd_estabelecimento,cd_estabelecimento_usuario_w) = cd_estabelecimento_usuario_w));
	
	
	/* Buscando a procedencia conforme o codigo Conexa */

	select	max(cd_procedencia)
	into STRICT	cd_procedencia_w
	from	procedencia
	where	cd_procedencia_externo = cd_unidade_solic_p;
	
	/* Buscando a especialidade conforme o codigo Conexa */

	select	max(cd_especialidade)
	into STRICT	cd_especialidade_w
	from	especialidade_medica
	where	cd_especialidade_externo = nr_seq_espec_conexa_p;
	
	/* Buscando o motivo do agendamento de acordo com o codigo Conexa */

	select	max(nr_sequencia)
	into STRICT	nr_seq_motivo_agendamento_w
	from	motivo_agendamento
	where	cd_motivo_externo = nr_seq_motivo_agendamento_p;	
	
	/* Buscando a agenda de consulta de acordo com o medico */

	if (cd_medico_w IS NOT NULL AND cd_medico_w::text <> '') and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '') then
		select	max(cd_agenda)
		into STRICT	cd_agenda_w
		from	agenda
		where	cd_pessoa_fisica 	= cd_medico_w
		and	cd_especialidade	= cd_especialidade_w
		and	cd_agenda_externa	= nr_seq_agenda_conexa_p;
		
		if (coalesce(cd_agenda_w::text, '') = '') then
			select	max(a.cd_agenda)
			into STRICT	cd_agenda_w
			from	agenda a,
				agenda_integracao b
			where	a.cd_agenda = b.cd_agenda
			and	a.cd_pessoa_fisica 	= cd_medico_w
			and	a.cd_especialidade	= cd_especialidade_w
			and	b.ie_tipo_integracao = 'CONEXA'
			and	b.cd_agenda_integracao	= nr_seq_agenda_conexa_destino_p;
		end if;
	end if;
	
	select 	coalesce(max(cd_estabelecimento),wheb_usuario_pck.get_cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	agenda
	where	cd_agenda	= cd_agenda_w;
	
	/* Buscando a classificacao do agendamento conforme o codigo da Conexa */
	
	select	max(cd_classificacao)
	into STRICT	ie_classif_agenda_w
	from	agenda_classif
	where	cd_classif_externo = nr_seq_tipo_consulta_p
	and	coalesce(cd_estabelecimento,cd_estabelecimento_w) = cd_estabelecimento_w;
	
	/* Logs de importacao do XML */
	if (coalesce(cd_medico_w::text, '') = '') then
		CALL gerar_log_conexa_xml(nr_seq_agendamento_p,cd_unidade_solic_p,nr_seq_agenda_conexa_p,dt_agenda_for_w,nr_seq_espec_conexa_p,nr_seq_medico_conexa_p,'Verificar codigo do medico','Tasy');		
	end if;
	
	if (coalesce(cd_especialidade_w::text, '') = '') then
		CALL gerar_log_conexa_xml(nr_seq_agendamento_p,cd_unidade_solic_p,nr_seq_agenda_conexa_p,dt_agenda_for_w,nr_seq_espec_conexa_p,nr_seq_medico_conexa_p,'Verificar codigo da especialidade','Tasy');
	end if;
	
	if (coalesce(cd_agenda_w::text, '') = '') then
		CALL gerar_log_conexa_xml(nr_seq_agendamento_p,cd_unidade_solic_p,nr_seq_agenda_conexa_p,dt_agenda_for_w,nr_seq_espec_conexa_p,nr_seq_medico_conexa_p,'Verificar codigo da agenda','Tasy');
	end if;
	/* Logs de importacao do XML */
	
	if (ie_gerar_setor_agenda_w = 'S') then
		select	max(cd_setor_agenda)
		into STRICT	cd_setor_agenda_w
		from	agenda
		where	cd_agenda = cd_agenda_w;
	end if;
	
	
	select	max(nr_sequencia)
	into STRICT	nr_seq_turno_w
	from	agenda_turno
	where	to_char(dt_agenda_for_w,'hh24:mi:ss') between to_char(hr_inicial,'hh24:mi:ss') and to_char(hr_final,'hh24:mi:ss')
	and	((coalesce(dt_inicio_vigencia::text, '') = '') or (dt_inicio_vigencia <= trunc(dt_agenda_for_w)))
	and	((coalesce(dt_final_vigencia::text, '') = '') or (dt_final_vigencia >= trunc(dt_agenda_for_w)))
	and	nr_minuto_intervalo > 0
	and	((ie_dia_semana = obter_cod_dia_semana(dt_agenda_for_w)) or ((ie_dia_semana = 9) and (obter_cod_dia_semana(dt_agenda_for_w) not in (7,1))))
	and	cd_agenda = cd_agenda_w;
	
	if (nr_seq_turno_w IS NOT NULL AND nr_seq_turno_w::text <> '') then
		nr_seq_preferencia_w := obter_pref_horario(dt_agenda_for_w,null,obter_perfil_ativo,nr_seq_turno_w);
	end if;
		
		/* se tiver buscar os demais dados se nao cadastra ele... */

	if (cd_paciente_w IS NOT NULL AND cd_paciente_w::text <> '') then
		
		insert into agenda_consulta(nr_sequencia,
					    nm_paciente,
					    ie_status_agenda,
					    cd_pessoa_fisica,
					    cd_agenda,
					    dt_agenda,
					    nr_minuto_duracao,
					    ie_encaixe,
					    cd_turno,
					    ie_classif_agenda,
					    dt_agendamento,
					    nm_usuario_origem,
					    dt_nascimento_pac,
					    qt_idade_pac,
					    nr_telefone,
					    nr_seq_motivo_agendamento,
					    cd_agendamento_externo,
					    dt_atualizacao,
					    nm_usuario,
					    cd_procedencia,
					    cd_convenio,
     					    cd_categoria,
					    cd_tipo_acomodacao,
					    cd_setor_atendimento,
					    nr_seq_preferencia)
				values (nextval('agenda_consulta_seq'),
					nm_paciente_p,
					'N',
					cd_paciente_w,
					cd_agenda_w,
					dt_agenda_for_w,
					nr_minuto_duracao_w,
					'N',
					0,
					ie_classif_agenda_w,
					clock_timestamp(),
					nm_usuario_p,
					dt_nascimento_for_w,
					nr_idade_w,
					nr_telefone_w,
					nr_seq_motivo_agendamento_w,
					nr_seq_agendamento_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_procedencia_w,
					cd_convenio_w,
					cd_categoria_w,
					cd_tipo_acomodacao_w,
					cd_setor_agenda_w,
					nr_seq_preferencia_w);	

		delete	FROM agenda_log_conexa_xml
		where	cd_agendamento_externo = nr_seq_agendamento_p;
		
		delete FROM agenda_controle_horario
		where dt_agenda = trunc(dt_agenda_for_w)
		and cd_agenda = cd_agenda_w;
	else
		
		ie_pos_virgula_w	:= position(',' in num_cns_p);

		if (ie_pos_virgula_w <> 0) then
			nr_cartao_sus_w	:= substr(num_cns_p,1,(ie_pos_virgula_w - 1));
		else
			nr_cartao_sus_w	:= num_cns_p;
		end if;
		
		cd_paciente_w := Inserir_PF_Conexa(	nm_paciente_p, nr_seq_pac_conexa_p, ie_sexo_p, dt_nascimento_p, nr_identidade_p, nr_cpf_p, nm_mae_p, nm_pai_p, ds_endereco_p, ds_num_endereco_p, ds_bairro_p, ds_municipio_p, ds_uf_p, nr_cep_p, nr_ddd_telefone_p, nr_telefone_p, nr_ddd_telefone_celular_p, nr_telefone_celular_p, null, null, null, ds_email_p, nr_cartao_sus_w, nm_usuario_p, cd_paciente_w);

		nr_idade_w		:= substr(obter_idade_pf(cd_paciente_w, clock_timestamp(), 'A'),1,3);
		
		/* Inserindo o agendamento */

		insert into agenda_consulta(nr_sequencia,
					    nm_paciente,
				            ie_status_agenda,
					    cd_pessoa_fisica,
					    cd_agenda,
					    dt_agenda,
					    nr_minuto_duracao,
					    ie_encaixe,
					    cd_turno,
					    ie_classif_agenda,
					    dt_agendamento,
					    nm_usuario_origem,
					    dt_nascimento_pac,
					    qt_idade_pac,
					    nr_telefone,
					    nr_seq_motivo_agendamento,
					    cd_agendamento_externo,
					    dt_atualizacao,
					    nm_usuario,
					    cd_procedencia,
					    cd_convenio,
     					    cd_categoria,
					    cd_tipo_acomodacao,
					    cd_setor_atendimento,
					    nr_seq_preferencia)
				values (nextval('agenda_consulta_seq'),
					nm_paciente_p,
					'N',
					cd_paciente_w,
					cd_agenda_w,
					dt_agenda_for_w,
					nr_minuto_duracao_w,
					'N',
					0,
					ie_classif_agenda_w,
					clock_timestamp(),
					nm_usuario_p,
					dt_nascimento_for_w,
					nr_idade_w,
					nr_telefone_w,
					nr_seq_motivo_agendamento_w,
					nr_seq_agendamento_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_procedencia_w,
					cd_convenio_w,
					cd_categoria_w,
					cd_tipo_acomodacao_w,
					cd_setor_agenda_w,
					nr_seq_preferencia_w);
		
		delete	FROM agenda_log_conexa_xml
		where	cd_agendamento_externo = nr_seq_agendamento_p;
		
		delete FROM agenda_controle_horario
		where dt_agenda = trunc(dt_agenda_for_w)
		and cd_agenda = cd_agenda_w;
	end if;
	
elsif (ie_acao_p = 'T') then

	/* Buscando os dados dos agendamentos de origem */
	select	max(nr_sequencia),
		max(cd_pessoa_fisica),
		max(cd_turno),
		max(ie_classif_agenda),
		max(nm_usuario_origem),
		max(dt_nascimento_pac),
		max(qt_idade_pac),
		max(nr_telefone),
		max(nr_seq_motivo_agendamento),
		max(nm_paciente)
	into STRICT	nr_sequencia_agend_transf_w,
		cd_pessoa_fisica_transf_w,
		cd_turno_transf_w,
		ie_classif_agenda_transf_w,
		nm_usuario_origem_transf_w,
		dt_nascimento_pac_transf_w,
		qt_idade_pac_transf_w,
		nr_telefone_transf_w,
		nr_seq_motivo_agend_transf_w,
		nm_paciente_transf_w
	from	agenda_consulta
	where	ie_status_agenda <> 'C'
	and	cd_agendamento_externo = nr_seq_agendamento_origem_p;	
	
	/* Buscando a procedencia conforme o codigo Conexa */

	select	max(cd_procedencia)
	into STRICT	cd_procedencia_w
	from	procedencia
	where	cd_procedencia_externo = cd_unidade_solic_p;
	
	
	/* Buscando medico conforme codigo no Conexa */

	select	max(a.cd_pessoa_fisica)
	into STRICT	cd_medico_w
	from	pessoa_fisica a,
		pf_codigo_externo b
	where	b.cd_pessoa_fisica 		= a.cd_pessoa_fisica
	and	b.ie_tipo_codigo_externo	= 'CO'
	and	b.cd_pessoa_fisica_externo	= nr_seq_medico_destino_p
	and (coalesce(cd_estabelecimento_usuario_w::text, '') = ''
		or (coalesce(b.cd_estabelecimento,cd_estabelecimento_usuario_w) = cd_estabelecimento_usuario_w));
	
	
	/* Buscando a especialidade conforme o codigo Conexa */

	select	max(cd_especialidade)
	into STRICT	cd_especialidade_w
	from	especialidade_medica
	where	cd_especialidade_externo = nr_seq_especialidade_destino_p;	
		
	if (cd_medico_w IS NOT NULL AND cd_medico_w::text <> '') and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '') then
		select	max(cd_agenda)
		into STRICT	cd_agenda_w
		from	agenda
		where	cd_pessoa_fisica 	= cd_medico_w
		and	cd_especialidade	= cd_especialidade_w
		and	cd_agenda_externa	= nr_seq_agenda_conexa_destino_p;
		
		if (coalesce(cd_agenda_w::text, '') = '') then
			select	max(a.cd_agenda)
			into STRICT	cd_agenda_w
			from	agenda a,
				agenda_integracao b
			where	a.cd_agenda = b.cd_agenda
			and	a.cd_pessoa_fisica 	= cd_medico_w
			and	a.cd_especialidade	= cd_especialidade_w
			and	b.ie_tipo_integracao = 'CONEXA'
			and	b.cd_agenda_integracao	= nr_seq_agenda_conexa_destino_p;
		end if;
	end if;
	
	if (ie_gerar_setor_agenda_w = 'S') then
		select	max(cd_setor_agenda)
		into STRICT	cd_setor_agenda_w
		from	agenda
		where	cd_agenda = cd_agenda_w;
	end if;
	
	if (cd_agenda_w IS NOT NULL AND cd_agenda_w::text <> '') and (nr_sequencia_agend_transf_w IS NOT NULL AND nr_sequencia_agend_transf_w::text <> '') then
		dt_agenda_w		:= elimina_caracteres_especiais(dt_destino_p);
		dt_agenda_for_w		:= to_date(substr(dt_agenda_w,7,2)||'/'||substr(dt_agenda_w,5,2)||'/'||substr(dt_agenda_w,1,4)||' '||hr_inicial_destino_p,'dd/mm/yyyy hh24:mi:ss');
		nr_minuto_duracao_w	:= (to_date(hr_final_destino_p,'hh24:mi:ss') - to_date(hr_inicial_destino_p,'hh24:mi:ss')) * 1440;
		
				
		/*  Cancelando o agendamento de origem */
		
		select	coalesce(max((to_char(dt_Agenda,'ss'))::numeric ),0)+1
		into STRICT	qt_hor_cancel_w
		from	agenda_consulta
		where	cd_agenda = cd_agenda_w
		and	to_date(to_char(dt_agenda,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss') = to_date(to_char(dt_agenda_for_w,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss')
		and	ie_status_agenda = 'C';
				
		update	agenda_consulta
		set	ie_status_agenda	= 'C',
			dt_agenda		= dt_agenda + qt_hor_cancel_w / 86400,
			nm_usuario_status	= nm_usuario_p,
			dt_status		= clock_timestamp(),
			ds_motivo_status	= 'Transferencia de agendamento',
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_sequencia_agend_transf_w;
		
		/* Inserindo o agendamento transferido */

		insert into agenda_consulta(nr_sequencia,
					    nm_paciente,
					    ie_status_agenda,
					    cd_pessoa_fisica,
					    cd_agenda,
					    dt_agenda,
					    nr_minuto_duracao,
					    ie_encaixe,
					    cd_turno,
					    ie_classif_agenda,
					    dt_agendamento,
					    nm_usuario_origem,
					    dt_nascimento_pac,
					    qt_idade_pac,
					    nr_telefone,
					    nr_seq_motivo_agendamento,
					    cd_agendamento_externo,
					    dt_atualizacao,
					    nm_usuario,
					    cd_procedencia,
					    cd_convenio,
     					    cd_categoria,
					    cd_tipo_acomodacao,
					    cd_setor_atendimento)
				values (nextval('agenda_consulta_seq'),
					nm_paciente_transf_w,
					'N',
					cd_pessoa_fisica_transf_w,
					cd_agenda_w,
					dt_agenda_for_w,
					nr_minuto_duracao_w,
					'N',
					cd_turno_transf_w,
					ie_classif_agenda_transf_w,
					clock_timestamp(),
					nm_usuario_origem_transf_w,
					dt_nascimento_pac_transf_w,
					qt_idade_pac_transf_w,
					nr_telefone_transf_w,
					nr_seq_motivo_agend_transf_w,
					nr_seq_agendamento_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_procedencia_w,
					cd_convenio_w,
					cd_categoria_w,
					cd_tipo_acomodacao_w,
					cd_setor_agenda_w);
					
		delete FROM agenda_controle_horario
		where dt_agenda = trunc(dt_agenda_for_w)
		and cd_agenda = cd_agenda_w;
	end if;					

elsif (ie_acao_p = 'C') then

	/* Buscando o motivo de cancelamento de acordo com o codigo da Conexa*/
	select	max(cd_motivo)
	into STRICT	nr_seq_motivo_canc_w
	from	agenda_motivo_cancelamento
	where	cd_codigo_externo = nr_seq_motivo_canc_p;
	
	/* Cancelando o agendamento */
	
	select	max(cd_agenda),
		max(dt_agenda),
		max(nr_sequencia)
	into STRICT	cd_agenda_w,
		dt_agenda_w,
		nr_seq_agenda_w
	from	agenda_consulta
	where	cd_agendamento_externo	= nr_seq_agendamento_p;

	
	/*select	nvl(max(to_number(to_char(dt_Agenda,'ss'))),0)+1
	into	qt_hor_cancel_w
	from	agenda_consulta
	where	cd_agenda = cd_agenda_w
	and	to_date(to_char(dt_agenda,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss') = to_date(to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss')
	and	ie_status_agenda = 'C';
	
	update	agenda_consulta
	set	ie_status_agenda	= 'C',
		dt_Agenda		= dt_agenda + qt_hor_cancel_w / 86400,
		nm_usuario_status	= nm_usuario_p,
		dt_status		= sysdate,
		cd_motivo_cancelamento	= nr_seq_motivo_canc_w,
		nm_usuario		= nm_usuario_p
	where	cd_agendamento_externo	= nr_seq_agendamento_p;*/
	
	CALL alterar_status_agecons(cd_agenda_w,nr_seq_agenda_w,'C',nr_seq_motivo_canc_w,null,'N',nm_usuario_p,null);
	
end if;

commit;

exception
	when others then
	ie_erro_w	:= 'S';
end;

ie_erro_p	:= ie_erro_w;
				
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_agendamentos_cons_conexa (nr_seq_agenda_conexa_p text, nr_seq_espec_conexa_p text, dt_agenda_p text, hr_inicial_p text, hr_final_p text, nr_seq_tipo_consulta_p text, nr_seq_motivo_agendamento_p text, nr_seq_agendamento_p text, nr_seq_medico_conexa_p text, nm_paciente_p text, nr_seq_pac_conexa_p text, ie_sexo_p text, dt_nascimento_p text, nr_identidade_p text, nr_cpf_p text, nm_mae_p text, nm_pai_p text, ds_endereco_p text, ds_num_endereco_p text, ds_bairro_p text, ds_municipio_p text, ds_uf_p text, nr_cep_p text, nr_ddd_telefone_p text, nr_telefone_p text, nr_ddd_telefone_celular_p text, nr_telefone_celular_p text, ds_email_p text, ie_acao_p text, nr_seq_agendamento_origem_p text, nr_seq_medico_destino_p text, hr_inicial_destino_p text, hr_final_destino_p text, dt_destino_p text, nr_seq_especialidade_destino_p text, nr_seq_agenda_conexa_destino_p text, nr_seq_motivo_canc_p text, cd_unidade_solic_p text, num_cns_p text, nm_usuario_p text, ie_erro_p INOUT text) FROM PUBLIC;

