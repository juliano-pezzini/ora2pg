-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE generate_batch_hcp (nr_seq_batch_p bigint, cd_convenio_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, batch_type_p text) AS $body$
DECLARE


  cd_estabelecimento_w           estabelecimento.cd_estabelecimento%TYPE;

  dt_initial_date_ref_w          timestamp;

  dt_end_date_ref_w              timestamp;

  nr_seq_file_hcp_w              bigint;

  nr_atendimento_w               bigint;

  is_file_generated_successful   bigint := 0;

  is_header_generated_successful bigint := 0;

  excp_caught_in_header_gen      varchar(500 );

  excp_caught_in_file_gen        varchar(500 );

  is_dataset_gen_successful      bigint := 0;

  excp_caught_in_dataset_gen     varchar(500 );

  nr_seq_arquivo_hdr_w           bigint;

  nr_seq_log_w                   bigint;

  returned_value_w               text;

  nr_seq_file_snap_w             bigint;

  nr_record_count_w		 bigint;

  ie_report_type_w 				hcp_batch_sending.ie_report_type%TYPE;

  batch_type_w					hcp_batch_sending.ie_tipo_lote%TYPE;
  cd_convenio_group_w 		hcp_batch_sending.cd_convenio_group%TYPE;

  c_batch_files CURSOR(

    nr_seq_batch_p bigint) FOR 

    SELECT nr_sequencia,
    DS_FILE_NAME
    FROM   hcp_files 

    WHERE  nr_file_batch_seq = nr_seq_batch_p;

  c_seg CURSOR(nr_seq_batch_p bigint) FOR

    SELECT DISTINCT ap.nr_atendimento
	
    FROM   atendimento_paciente ap, 
           pessoa_fisica pf, 
           atend_categoria_convenio ac 

    WHERE  pf.cd_pessoa_fisica = ap.cd_pessoa_fisica 

           AND ap.nr_atendimento = ac.nr_atendimento 

		   AND	(pf.NR_SEQ_PERSON_NAME IS NOT NULL AND pf.NR_SEQ_PERSON_NAME::text <> '')

           AND (ie_report_type_w = 'PHDB' or ac.cd_convenio = cd_convenio_p
		OR ac.cd_convenio   in (SELECT cd_convenio from convenio_classif a, classificacao_convenio b
					where a.nr_seq_classificacao = b.nr_sequencia
					and b.nr_sequencia = cd_convenio_group_w))

           AND ( (ap.dt_alta IS NOT NULL AND ap.dt_alta::text <> '') 

                 OR (pf.dt_obito IS NOT NULL AND pf.dt_obito::text <> '') ) 

           AND ap.dt_alta BETWEEN dt_initial_date_ref_w AND dt_end_date_ref_w;

BEGIN

    IF ( (nr_seq_batch_p IS NOT NULL AND nr_seq_batch_p::text <> '') 

        AND (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') 

        AND (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') ) THEN 

      
	SELECT	a.cd_estabelecimento, 
			coalesce(a.dt_initial_ref, a.dt_final_ref), 
			a.dt_final_ref,
			ie_report_type
	INTO STRICT   	cd_estabelecimento_w, 
			dt_initial_date_ref_w, 
			dt_end_date_ref_w, 
			ie_report_type_w
	FROM   	hcp_batch_sending a 
	WHERE  	a.nr_sequencia = nr_seq_batch_p;

	IF (coalesce(ie_report_type_w::text, '') = '') THEN
		ie_report_type_w := 'HCP';
	END IF;
	
	batch_type_w := batch_type_p;
	IF (ie_report_type_w = 'PHDB') THEN
		batch_type_w := 'P'; -- PHDB only accepts Production type.
	END IF;
		
	if (coalesce(cd_convenio_p::text, '') = '') then
		select  max(cd_convenio_group)
		into STRICT    cd_convenio_group_w
		from    hcp_batch_sending
		WHERE   nr_sequencia  = nr_seq_batch_p;
	end if;
	SELECT	count(*)

	into STRICT 	nr_record_count_w

	FROM   	atendimento_paciente ap, 

		pessoa_fisica pf, 

		atend_categoria_convenio ac 

	WHERE  	pf.cd_pessoa_fisica = ap.cd_pessoa_fisica 

    AND 	ap.nr_atendimento = ac.nr_atendimento 

	AND (ie_report_type_w = 'PHDB' or ac.cd_convenio = cd_convenio_p
		OR ac.cd_convenio   in (SELECT cd_convenio from convenio_classif a, classificacao_convenio b
					where a.nr_seq_classificacao = b.nr_sequencia
					and b.nr_sequencia = cd_convenio_group_w))

	AND	(pf.nr_seq_person_name IS NOT NULL AND pf.nr_seq_person_name::text <> '')

    AND ((ap.dt_alta IS NOT NULL AND ap.dt_alta::text <> '') OR (pf.dt_obito IS NOT NULL AND pf.dt_obito::text <> '')) 

	AND 	ap.dt_alta BETWEEN dt_initial_date_ref_w AND dt_end_date_ref_w;

           
     if (nr_record_count_w=0) then

		CALL wheb_mensagem_pck.exibir_mensagem_abort(1076050, 'DT_INICIAL=' || to_char(dt_initial_date_ref_w,'DD-MM-YYYY') || ';DT_FINAL=' || to_char(dt_end_date_ref_w,'DD-MM-YYYY'));

     end if;

    SELECT Max(nr_sequencia)

      INTO STRICT   nr_seq_log_w 

      FROM   log_atualizacao;



     UPDATE hcp_batch_sending 

     SET dt_initial_generation = clock_timestamp(), 

         dt_final_generation  = NULL, 

         dt_atualizacao = clock_timestamp(), 

         nm_usuario = nm_usuario_p 

      WHERE  nr_sequencia = nr_seq_batch_p;



      OPEN c_seg(cd_convenio_group_w);



      /* generate the filename */
      SELECT * FROM generate_data_hcp_pkg.Obtain_hcp_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, ie_report_type_w, cd_estabelecimento_p, nr_seq_file_hcp_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_file_hcp_w, is_file_generated_successful, excp_caught_in_file_gen;


      IF (ie_report_type_w = 'HCP') THEN

		  /* generate the filename SNAP */
 

		  SELECT * FROM generate_data_hcp_pkg.Obtain_hcp_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'SNAP', cd_estabelecimento_p, nr_seq_file_snap_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_file_snap_w, is_file_generated_successful, excp_caught_in_file_gen;

	  END IF;

      LOOP

          FETCH c_seg INTO nr_atendimento_w;

          EXIT WHEN NOT FOUND; /* apply on c_seg */

          IF (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') THEN 

            --HCP / PHDB segment generation     
            SELECT * FROM generate_data_hcp_pkg.Generate_dataset_hcp_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_file_hcp_w, ie_report_type_w, Obter_Convenio_Atendimento(nr_atendimento_w), is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;



            IF (ie_report_type_w = 'HCP') THEN
			
				--SNAP segment generation    
				SELECT * FROM generate_data_hcp_pkg.Generate_dataset_hcp_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_file_snap_w, 'SNAP', Obter_Convenio_Atendimento(nr_atendimento_w), is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;
			
			END IF;

          END IF;
      END LOOP;


      SELECT * FROM Generate_hcp_segment_header(nr_seq_file_hcp_w, ie_report_type_w, nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;

      IF (ie_report_type_w = 'HCP') THEN
	  
		  SELECT * FROM Generate_hcp_segment_header(nr_seq_file_snap_w, 'SNAP', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;
	  
	  END IF;


      CLOSE c_seg;

      FOR r_c_batch_filese IN c_batch_files(nr_seq_batch_p) LOOP 

          CALL generate_file_content_hcp(r_c_batch_filese.nr_sequencia, nm_usuario_p, 

          r_c_batch_filese.DS_FILE_NAME ,cd_convenio_p, batch_type_w);

      END LOOP;
      UPDATE hcp_batch_sending 
      SET    dt_final_generation = clock_timestamp() 
      WHERE  nr_sequencia = nr_seq_batch_p;
  
      CALL Validate_batch_hcp(nr_seq_batch_p, nm_usuario_p, nr_atendimento_w);
      commit;
      IF ( is_file_generated_successful = 1
          AND is_dataset_gen_successful = 1 
          AND is_header_generated_successful = 1 ) 
      -- AND is_header_file_gen_successful = 1)   
      THEN 
        COMMIT;
      ELSE 
        ROLLBACK;

       IF ( (excp_caught_in_file_gen IS NOT NULL AND excp_caught_in_file_gen::text <> '') 
           OR (excp_caught_in_dataset_gen IS NOT NULL AND excp_caught_in_dataset_gen::text <> '') 
           OR (excp_caught_in_header_gen IS NOT NULL AND excp_caught_in_header_gen::text <> '') 
           --OR excp_caught_in_header_file_gen IS NOT NULL     
           ) THEN 

          returned_value_w := excp_caught_in_file_gen 

                              ||Chr(13) 

                              ||Chr(10) 

                              ||excp_caught_in_dataset_gen 

                              ||Chr(13) 

                              ||Chr(10) 

                              ||excp_caught_in_header_gen 

                              ||Chr(13) 

                              ||Chr(10) 

          --||excp_caught_in_header_file_gen   
;
          INSERT INTO log_atualizacao_erro 

          VALUES (nextval('log_atualizacao_erro_seq'), 

                       'Error while generating the files for hcp / hpdb report', 

                       returned_value_w, 

                       nr_seq_log_w, 

                       clock_timestamp(), 

                       'Tasy_Versao' );
          COMMIT;
        END IF;
      END IF;
    END IF;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_batch_hcp (nr_seq_batch_p bigint, cd_convenio_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, batch_type_p text) FROM PUBLIC;

