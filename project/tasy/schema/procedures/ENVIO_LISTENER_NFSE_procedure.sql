-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE envio_listener_nfse ( cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


dia_atual_w		integer;
horario_atual_w		varchar(5);
mes_atual_w		varchar(10);
mes_atual_fin_w		varchar(10);
hr_inicio_w		varchar(5);
hr_final_w		varchar(5);
contador_w		bigint := 0;
qt_restr_regra_w	bigint;
ie_consiste_serie_w	varchar(1);
ie_consiste_operacao_w	varchar(1);
nr_seq_transmissao_w	nfe_transmissao.nr_sequencia%type;
nr_sequencia_w		regra_trans_auto_nfe.nr_sequencia%type;
dt_inicio_w		regra_trans_auto_nfe.dt_inicio%type;
dt_final_w		regra_trans_auto_nfe.dt_final%type;
ie_competencia_w	regra_trans_auto_nfe.ie_competencia%type;
ie_forma_geracao_w	regra_trans_auto_nfe.ie_forma_geracao%type;
qt_notas_lote_w		regra_trans_auto_nfe.qt_notas_lote%type;
qt_espera_consulta_w	regra_trans_auto_nfe.qt_espera_consulta%type;
cd_operacao_nf_w	regra_trans_auto_nfe_restr.cd_operacao_nf%type;
cd_serie_nf_w		regra_trans_auto_nfe_restr.cd_serie_nf%type;
		
C01 CURSOR FOR
	SELECT	nr_sequencia,
		dt_inicio,
		dt_final,
		replace(substr(to_char(hr_inicio,'hh24:mi'),1,5),':',''),
		replace(substr(to_char(hr_final,'hh24:mi'),1,5),':',''),
		coalesce(ie_competencia,'N'),
		ie_forma_geracao,
		qt_notas_lote,
		qt_espera_consulta,
		(SELECT	count(1)
		from	regra_trans_auto_nfe_restr b
		where	b.nr_seq_regra = a.nr_sequencia
		and	b.cd_estabelecimento = cd_estabelecimento_p)
	from	regra_trans_auto_nfe a
	where	a.cd_estabelecimento = cd_estabelecimento_p;
	
C02 CURSOR FOR
	SELECT 	nr_sequencia
	from 	nota_fiscal n,
		operacao_nota o
	where 	n.cd_operacao_nf = o.cd_operacao_nf
	and	((n.dt_atualizacao_estoque IS NOT NULL AND n.dt_atualizacao_estoque::text <> '' AND n.ie_situacao = 1) or ((coalesce(n.dt_atualizacao_estoque::text, '') = '') and (n.ie_situacao = 8)))
	and	o.ie_servico = 'S'
	and	o.ie_nf_eletronica = 'S'
	and	o.ie_operacao_fiscal = 'S'
	and	n.cd_estabelecimento = cd_estabelecimento_p
	and	coalesce(n.nr_nfe_imp::text, '') = ''
	and	coalesce(n.ie_status_envio::text, '') = ''
	and substr(coalesce(obter_inconsist_nfse_regra(n.nr_sequencia,'2'), 'N'),1,1) <> 'S'
	and	(((ie_competencia_w = 'S') and (dt_emissao between to_date(mes_atual_w, 'dd/mm/yyyy') and to_date(mes_atual_fin_w,'dd/mm/yyyy'))) or (ie_competencia_w = 'N'))
	and	(((ie_consiste_serie_w = 'S') and (n.cd_serie_nf = coalesce(cd_serie_nf_w,n.cd_serie_nf ))) or (ie_consiste_serie_w = 'N'))
	and	(((ie_consiste_operacao_w = 'S') and (n.cd_operacao_nf = coalesce(cd_operacao_nf_w,n.cd_operacao_nf))) or (ie_consiste_operacao_w = 'N'));
	
C03 CURSOR FOR
	SELECT	cd_operacao_nf,
		cd_serie_nf
	from	regra_trans_auto_nfe_restr
	where	nr_seq_regra = nr_sequencia_w
	and	cd_estabelecimento = cd_estabelecimento_p;

vet02	C02%RowType;
	

BEGIN

select	(to_char(clock_timestamp(),'dd'))::numeric ,
	replace(substr(to_char(clock_timestamp(),'hh24:mi'),1,5),':',''),
	substr('01/'|| to_char(clock_timestamp(),'mm/yyyy'),1,10),
	substr(to_char(last_day(clock_timestamp()),'dd/mm/yyyy'),1,10)
into STRICT	dia_atual_w,
	horario_atual_w,
	mes_atual_w,
	mes_atual_fin_w
;

delete	FROM w_nfse_envio_automatico
where	nm_usuario = nm_usuario_p
and	cd_estabelecimento = cd_estabelecimento_p;

open C01;
loop
fetch C01 into	
	nr_sequencia_w,
	dt_inicio_w,
	dt_final_w,
	hr_inicio_w,
	hr_final_w,
	ie_competencia_w,
	ie_forma_geracao_w,
	qt_notas_lote_w,
	qt_espera_consulta_w,
	qt_restr_regra_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	if (qt_restr_regra_w = 0) then
		begin
		ie_consiste_serie_w	:= 'N';
		ie_consiste_operacao_w	:= 'N';
		end;
	end if;
	
	if (dt_inicio_w IS NOT NULL AND dt_inicio_w::text <> '') and (dt_final_w IS NOT NULL AND dt_final_w::text <> '') then
		begin
		
		if (dia_atual_w >= dt_inicio_w) and (dia_atual_w <= dt_final_w) and ((horario_atual_w)::numeric  >= (hr_inicio_w)::numeric ) and ((horario_atual_w)::numeric  <= (hr_final_w)::numeric )then
			begin
		
			if (qt_restr_regra_w = 0) then
				begin
				
				open C02;
				loop
				fetch C02 into	
					vet02;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					
					if (ie_forma_geracao_w = 'L' AND contador_w  = 0) or
					   (ie_forma_geracao_w = 'L' AND contador_w  = qt_notas_lote_w) or (ie_forma_geracao_w = 'U') then
					begin
					contador_w := 0;
					nr_seq_transmissao_w := gerar_transmissao_nf(	nm_usuario_p, 1, 'NFSE', nr_seq_transmissao_w);
					CALL nfe_inserir_lote(nm_usuario_p,
							 cd_estabelecimento_p,
							 nr_seq_transmissao_w);
							
							 
					insert into w_nfse_envio_automatico(	
						nr_seq_transmissao,
						cd_estabelecimento,
						qt_espera_consulta,
						nm_usuario)
					values (	nr_seq_transmissao_w,
						cd_estabelecimento_p,
						qt_espera_consulta_w,
						nm_usuario_p);
					end;
					end if;
					
					if (nr_seq_transmissao_w IS NOT NULL AND nr_seq_transmissao_w::text <> '') then
						begin
						CALL gravar_nf_transmissao(nr_seq_transmissao_w, vet02.nr_sequencia, nm_usuario_p);
						
						update	nota_fiscal
						set	ie_status_envio = 'N'
						where	nr_sequencia = vet02.nr_sequencia;
						
						end;
					end if;
					
					contador_w := contador_w + 1;
					end;
				end loop;
				close C02;
				
				end;
			else	
				begin
				ie_consiste_serie_w	:= 'S';
				ie_consiste_operacao_w	:= 'S';
				
				open C03;
				loop
				fetch C03 into	
					cd_operacao_nf_w,
					cd_serie_nf_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin
					
					open C02;
					loop
					fetch C02 into	
						vet02;
					EXIT WHEN NOT FOUND; /* apply on C02 */
						begin
						
						if (ie_forma_geracao_w = 'L' AND contador_w  = 0) or
						   (ie_forma_geracao_w = 'L' AND contador_w  = qt_notas_lote_w) or (ie_forma_geracao_w = 'U') then
						begin
						contador_w := 0;
						nr_seq_transmissao_w := gerar_transmissao_nf(	nm_usuario_p, 1, 'NFSE', nr_seq_transmissao_w);
						CALL nfe_inserir_lote(nm_usuario_p,
								 cd_estabelecimento_p,
								 nr_seq_transmissao_w);
								
								 
						insert into w_nfse_envio_automatico(	
							nr_seq_transmissao,
							cd_estabelecimento,
							qt_espera_consulta,
							nm_usuario)
						values (	nr_seq_transmissao_w,
							cd_estabelecimento_p,
							qt_espera_consulta_w,
							nm_usuario_p);
						end;
						end if;
						
						if (nr_seq_transmissao_w IS NOT NULL AND nr_seq_transmissao_w::text <> '') then
							begin
							CALL gravar_nf_transmissao(nr_seq_transmissao_w, vet02.nr_sequencia, nm_usuario_p);
							
							update	nota_fiscal
							set	ie_status_envio = 'N'
							where	nr_sequencia = vet02.nr_sequencia;
							
							end;
						end if;
						
						contador_w := contador_w + 1;
						end;
					end loop;
					close C02;
				
					end;
				end loop;
				close C03;
				
				end;
			end if;
			
			exit;
			
			end;
		end if;
	
		end;
	else
		begin
		
		if ((horario_atual_w)::numeric  >= (hr_inicio_w)::numeric ) and ((horario_atual_w)::numeric  <= (hr_final_w)::numeric ) then
			begin
			
			if (qt_restr_regra_w = 0) then
				begin
				
				open C02;
				loop
				fetch C02 into	
					vet02;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					if (ie_forma_geracao_w = 'L' AND contador_w  = 0) or
					   (ie_forma_geracao_w = 'L' AND contador_w  = qt_notas_lote_w) or (ie_forma_geracao_w = 'U') then
					begin
					contador_w := 0;
					nr_seq_transmissao_w := gerar_transmissao_nf(	nm_usuario_p, 1, 'NFSE', nr_seq_transmissao_w);
					CALL nfe_inserir_lote(nm_usuario_p,
							 cd_estabelecimento_p,
							 nr_seq_transmissao_w);
								
					insert into w_nfse_envio_automatico(	
						nr_seq_transmissao,
						cd_estabelecimento,
						qt_espera_consulta,
						nm_usuario)
					values (	nr_seq_transmissao_w,
						cd_estabelecimento_p,
						qt_espera_consulta_w,
						nm_usuario_p);
					end;
					end if;
				
					if (nr_seq_transmissao_w IS NOT NULL AND nr_seq_transmissao_w::text <> '') then
						begin
						CALL gravar_nf_transmissao(nr_seq_transmissao_w, vet02.nr_sequencia, nm_usuario_p);
						
						update	nota_fiscal
						set	ie_status_envio = 'N'
						where	nr_sequencia = vet02.nr_sequencia;
						
						end;
					end if;
						
					contador_w := contador_w + 1;
					end;
				end loop;
				close C02;
				
				end;
			else
				begin
				ie_consiste_serie_w	:= 'S';
				ie_consiste_operacao_w	:= 'S';
				
				open C03;
				loop
				fetch C03 into	
					cd_operacao_nf_w,
					cd_serie_nf_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin
					
					open C02;
					loop
					fetch C02 into	
						vet02;
					EXIT WHEN NOT FOUND; /* apply on C02 */
						begin
						if (ie_forma_geracao_w = 'L' AND contador_w  = 0) or
						   (ie_forma_geracao_w = 'L' AND contador_w  = qt_notas_lote_w) or (ie_forma_geracao_w = 'U') then
						begin
						contador_w := 0;
						nr_seq_transmissao_w := gerar_transmissao_nf(	nm_usuario_p, 1, 'NFSE', nr_seq_transmissao_w);
						CALL nfe_inserir_lote(nm_usuario_p,
								 cd_estabelecimento_p,
								 nr_seq_transmissao_w);
									
						insert into w_nfse_envio_automatico(	
							nr_seq_transmissao,
							cd_estabelecimento,
							qt_espera_consulta,
							nm_usuario)
						values (	nr_seq_transmissao_w,
							cd_estabelecimento_p,
							qt_espera_consulta_w,
							nm_usuario_p);
						end;
						end if;
					
						if (nr_seq_transmissao_w IS NOT NULL AND nr_seq_transmissao_w::text <> '') then
							begin
							CALL gravar_nf_transmissao(nr_seq_transmissao_w, vet02.nr_sequencia, nm_usuario_p);
							
							update	nota_fiscal
							set	ie_status_envio = 'N'
							where	nr_sequencia = vet02.nr_sequencia;
							
							end;
						end if;
							
						contador_w := contador_w + 1;
						end;
					end loop;
					close C02;
					
					end;
				end loop;
				close C03;
				
				end;
			end if;
			
			exit;
			
			end;
		end if;
		
		end;
	end if;
	
	
	end;
end loop;
close C01;	

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE envio_listener_nfse ( cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

