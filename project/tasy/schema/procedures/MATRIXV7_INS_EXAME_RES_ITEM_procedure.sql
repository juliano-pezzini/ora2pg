-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE matrixv7_ins_exame_res_item ( nr_prescricao_p bigint, cd_exame_p text, cd_analito_p text, ds_parcial_p text, ds_alerta_refer_p text, dt_liberacao_p timestamp, dt_coleta_p timestamp, ds_resultado_p text, ds_unidade_medida_p text, ds_observacao_p text, ds_referencia_p text, nr_seq_prescr_p bigint default 0, ds_erro_p INOUT text  DEFAULT NULL) AS $body$
DECLARE


    nr_seq_prescr_w             prescr_procedimento.nr_sequencia%TYPE;
    nr_seq_exame_w              prescr_procedimento.nr_seq_exame%TYPE;
    ie_status_atend_w           prescr_procedimento.ie_status_atend%TYPE;
    qt_resultado_w              exame_lab_result_item.qt_resultado%TYPE;
    pr_resultado_w              exame_lab_result_item.pr_resultado%TYPE;
    ds_resultado_w              exame_lab_result_item.ds_resultado%TYPE;
    ds_resultado_formatdo_w     exame_lab_result_item.ds_resultado%TYPE;
    ie_resultado_critico_w      exame_lab_result_item.ie_resultado_critico%TYPE;
    ie_resultado_referencia_w   exame_lab_result_item.ie_resultado_referencia%TYPE;
    ie_normalidade_w            exame_lab_result_item.ie_normalidade%TYPE;
    ie_formato_resultado_w      exame_laboratorio.ie_formato_resultado%TYPE;
    nr_seq_analito_w            exame_laboratorio.nr_seq_exame%TYPE;
    nr_seq_exame_analito_w      exame_laboratorio.nr_seq_exame%TYPE;
    nr_seq_grupo_w              exame_laboratorio.nr_seq_grupo%TYPE;
    cd_exame_w                  exame_laboratorio.cd_exame%TYPE;
	nr_seq_resultado_w          exame_lab_resultado.nr_seq_resultado%TYPE;

BEGIN
    ds_erro_p := NULL;
    BEGIN


		if (coalesce(nr_seq_prescr_p,0) = 0) then
			nr_seq_prescr_w := matrixv7_get_nr_seq_prescr(nr_prescricao_p, cd_exame_p);
		else
			nr_seq_prescr_w := 	nr_seq_prescr_p;
		end if;


        SELECT
            pp.nr_seq_exame,
            el.ie_formato_resultado,
            el.nr_seq_grupo,
            pp.ie_status_atend
        INTO STRICT
            nr_seq_exame_w,
            ie_formato_resultado_w,
            nr_seq_grupo_w,
            ie_status_atend_w
        FROM
            prescr_procedimento pp
        INNER JOIN
            exame_laboratorio el ON pp.nr_seq_exame = el.nr_seq_exame
        WHERE
            pp.nr_sequencia = nr_seq_prescr_w
            AND pp.nr_prescricao = nr_prescricao_p
            AND coalesce(pp.ie_suspenso, 'N') = 'N'
            AND coalesce(el.ie_situacao, 'A') = 'A';

    EXCEPTION
        WHEN too_many_rows THEN
            --Ha mais de um exame na prescricao com o codigo #@CD_EXAME#@. E necessario verificar o cadastro do exame. O resultado nao sera importado para esse exame.
            CALL wheb_mensagem_pck.exibir_mensagem_abort(
                nr_seq_mensagem_p => 1097835,
                vl_macros_p => 'CD_EXAME=' || cd_exame_p
            );
        WHEN no_data_found THEN
            --Nao foi localizado um exame com codigo #@CD_EXAME#@ na prescricao #@NR_PRESCRICAO#@. E necessario verificar o cadastro do exame. O resultado nao sera importado para esse exame.
            CALL wheb_mensagem_pck.exibir_mensagem_abort(
                nr_seq_mensagem_p => 1118417,
                vl_macros_p => 'CD_EXAME=' || cd_exame_p || ';NR_PRESCRICAO=' || nr_prescricao_p
            );
    END;WITH RECURSIVE cte AS (


    IF ( ie_formato_resultado_w IN ('SM', 'SDM') ) THEN
        BEGIN
            SELECT
                e.nr_seq_exame,e.ie_formato_resultado
            INTO STRICT
                nr_seq_analito_w,ie_formato_resultado_w
            FROM
                exame_laboratorio e WHERE nr_seq_superior = nr_seq_exame_w
  UNION ALL


    IF ( ie_formato_resultado_w IN ('SM', 'SDM') ) THEN
        BEGIN
            SELECT
                e.nr_seq_exame,e.ie_formato_resultado
            INTO STRICT
                nr_seq_analito_w,ie_formato_resultado_w
            FROM
                exame_laboratorio e JOIN cte c ON (c.nr_seq_exame = e.nr_seq_superior)

) SELECT * FROM cte WHERE nr_seq_exame = (
                    SELECT
                        nr_seq_exame
                    FROM
                        equipamento_lab   b,
                        lab_exame_equip   a
                    WHERE
                        a.cd_equipamento = b.cd_equipamento
                        AND a.cd_exame_equip = cd_analito_p
                        AND upper(b.ds_sigla) = 'MATRIX'
                        AND a.nr_seq_exame = e.nr_seq_exame
                );
;WITH RECURSIVE cte AS (


        EXCEPTION
            WHEN no_data_found THEN
                BEGIN
                    SELECT
                        nr_seq_exame
                    INTO STRICT nr_seq_exame_analito_w
                    FROM
                        exame_laboratorio WHERE nr_seq_superior = nr_seq_exame_w
  UNION ALL


        EXCEPTION
            WHEN no_data_found THEN
                BEGIN
                    SELECT
                        nr_seq_exame
                    INTO STRICT nr_seq_exame_analito_w
                    FROM
                        exame_laboratorio JOIN cte c ON (c.nr_seq_exame = nr_seq_superior)

) SELECT * FROM cte WHERE coalesce(cd_exame_integracao, cd_exame) = TO_CHAR(cd_analito_p)
                        AND coalesce(obter_equipamento_exame(nr_seq_exame, NULL, 'S')::text, '') = '';
 LIMIT 1;

                EXCEPTION
                    WHEN no_data_found THEN
                        SELECT ( MAX(nr_seq_exame) + 1 )
                        INTO STRICT nr_seq_exame_analito_w
                        FROM
                            exame_laboratorio;

                        BEGIN
                        -- ** Caso o analito nao exista, eh cadastrado um novo com o codigo recebido ** --
                            INSERT INTO exame_laboratorio(
                                nr_seq_exame,
                                cd_exame,
                                cd_exame_integracao,
                                nm_exame,
                                dt_atualizacao,
                                nm_usuario,
                                ie_restricao,
                                ie_prescricao_rotina,
                                nr_seq_superior,
                                nr_seq_grupo,
                                ie_solicitacao,
                                ie_formato_resultado,
                                ie_situacao
                            ) VALUES (
                                nr_seq_exame_analito_w,
                                TO_CHAR(cd_exame_p || '_' || cd_analito_p),
                                cd_analito_p,
                                cd_analito_p,
                                clock_timestamp(),
                                coalesce(wheb_usuario_pck.get_nm_usuario, 'Matrix'),
                                'N',
                                'S',
                                nr_seq_exame_w,
                                nr_seq_grupo_w,
                                'N',
                                'DV',
                                'A'
                            );

                            COMMIT;
                            nr_seq_analito_w := nr_seq_exame_analito_w;
                        EXCEPTION
                            WHEN unique_violation THEN
                                ROLLBACK;
                                CALL wheb_mensagem_pck.exibir_mensagem_abort(
                                    nr_seq_mensagem_p => 1117907
                                );
                        END;

                END;
        END;
		
		begin
			select nr_seq_resultado
			into STRICT nr_seq_resultado_w
			from exame_lab_resultado
			where nr_prescricao = nr_prescricao_p;
		exception
			when no_data_found or too_many_rows then
				nr_seq_resultado_w := null;
		end;
		
		if (coalesce(nr_seq_resultado_w::text, '') = '') then
			CALL Gera_Exame_Result_Lab(nr_prescricao_p, null, 'N', 'N', 'N', coalesce(wheb_usuario_pck.get_nm_usuario, 'Matrix'), 'N', 'S');
			commit;
		end if;

        IF (qt_resultado_w IS NOT NULL AND qt_resultado_w::text <> '') OR (pr_resultado_w IS NOT NULL AND pr_resultado_w::text <> '') OR (ds_resultado_w IS NOT NULL AND ds_resultado_w::text <> '') THEN
            ds_erro_p => ds_erro_p
             := atualizar_lab_result_item(
                nr_prescricao_p => nr_prescricao_p, nr_seq_prescr_p => nr_seq_prescr_w, cd_exame_p => cd_exame_p, qt_resultado_p => qt_resultado_w, pr_resultado_p => pr_resultado_w, ds_resultado_p => ds_resultado_w, ds_observacao_p => substr(ds_observacao_p, 0, 4000), cd_material_exame_p => NULL, ie_reenvio_p => NULL, nm_usuario_p => coalesce(wheb_usuario_pck.get_nm_usuario, 'Matrix'), dt_coleta_p => dt_coleta_p, ds_referencia_p => ds_referencia_p, ds_unidade_medida_p => ds_unidade_medida_p, nr_doc_lab_p => NULL, dt_resultado_p => dt_liberacao_p, ds_erro_p => ds_erro_p);

        END IF;WITH RECURSIVE cte AS (


    ELSE
        BEGIN
            SELECT
                e.nr_seq_exame,e.ie_formato_resultado,coalesce(e.cd_exame_integracao, e.cd_exame)
            INTO STRICT
                nr_seq_analito_w,ie_formato_resultado_w,cd_exame_w
            FROM
                exame_laboratorio e WHERE nr_seq_superior = nr_seq_exame_w
  UNION ALL


    ELSE
        BEGIN
            SELECT
                e.nr_seq_exame,e.ie_formato_resultado,coalesce(e.cd_exame_integracao, e.cd_exame)
            INTO STRICT
                nr_seq_analito_w,ie_formato_resultado_w,cd_exame_w
            FROM
                exame_laboratorio e JOIN cte c ON (c.nr_seq_exame = e.nr_seq_superior)

) SELECT * FROM cte WHERE nr_seq_exame = (
                    SELECT
                        nr_seq_exame
                    FROM
                        equipamento_lab   b,
                        lab_exame_equip   a
                    WHERE
                        a.cd_equipamento = b.cd_equipamento
                        AND a.cd_exame_equip = cd_analito_p
                        AND upper(b.ds_sigla) = 'MATRIX'
                        AND a.nr_seq_exame = e.nr_seq_exame
                );
;

        EXCEPTION
            WHEN no_data_found THEN
                --Analito #@CD_ANALITO#@ nao localizado no exame #@NM_EXAME_PRESCR#@ da prescricao #@NR_PRESCRICAO#@. Verifique o cadastro do exame. Resultado nao sera importado.
                CALL wheb_mensagem_pck.exibir_mensagem_abort(
                    nr_seq_mensagem_p => 1118217,
                    vl_macros_p => 'CD_ANALITO=' || cd_analito_p|| ';NM_EXAME_PRESCR=' || cd_exame_p || ';NR_PRESCRICAO=' || nr_prescricao_p
                );
            WHEN too_many_rows THEN
                --Ha mais de um analito com o codigo #@CD_ANALITO#@ no exame #@CD_EXAME#@ da prescricao #@NR_PRESCRICAO#@. Verifique o cadastro do exame. O resultado nao sera importado.
                CALL wheb_mensagem_pck.exibir_mensagem_abort(
                    nr_seq_mensagem_p => 1118410,
                    vl_macros_p => 'CD_ANALITO=' || cd_analito_p || ';CD_EXAME=' || cd_exame_p || ';NR_PRESCRICAO=' || nr_prescricao_p
                );
        END;

        BEGIN
            ds_resultado_formatdo_w := trim(both replace(ds_resultado_p, '.', ','));
            IF ( ie_formato_resultado_w = 'V' OR ie_formato_resultado_w = 'VP' ) THEN
                qt_resultado_w := (ds_resultado_formatdo_w)::numeric;
            ELSIF ( ie_formato_resultado_w = 'P' ) THEN
                pr_resultado_w := (ds_resultado_formatdo_w)::numeric;
            ELSIF ( ie_formato_resultado_w = 'DV' AND obter_se_somente_numero_mx(ds_resultado_formatdo_w) = 'S' ) THEN
                qt_resultado_w := (ds_resultado_formatdo_w)::numeric;
            ELSE
                ds_resultado_w := ds_resultado_p;
            END IF;

        EXCEPTION
            WHEN data_exception THEN
                --Erro ao converter valor #@DS_RESULTADO#@ para numero. Por favor, verifique o formato do resultado. NR_PRESCRICAO = #@NR_PRESCRICAO#@, CD_EXAME = #@CD_EXAME#@, NR_SEQ_ANALITO = #@ANALITO#@
                CALL wheb_mensagem_pck.exibir_mensagem_abort(
                    nr_seq_mensagem_p => 1117290,
                    vl_macros_p => 'DS_RESULTADO=' || ds_resultado_p || ';NR_PRESCRICAO=' || nr_prescricao_p || ';CD_EXAME=' || cd_exame_w || ';ANALITO=' || nr_seq_analito_w
                );
        END;

        IF (qt_resultado_w IS NOT NULL AND qt_resultado_w::text <> '') OR (pr_resultado_w IS NOT NULL AND pr_resultado_w::text <> '') OR (ds_resultado_w IS NOT NULL AND ds_resultado_w::text <> '') THEN
            ds_erro_p => ds_erro_p
             := atualizar_lab_result_item(
                nr_prescricao_p => nr_prescricao_p, nr_seq_prescr_p => nr_seq_prescr_w, cd_exame_p => cd_exame_w, qt_resultado_p => qt_resultado_w, pr_resultado_p => pr_resultado_w, ds_resultado_p => ds_resultado_w, ds_observacao_p => substr(ds_observacao_p, 0, 4000), cd_material_exame_p => NULL, ie_reenvio_p => NULL, nm_usuario_p => coalesce(wheb_usuario_pck.get_nm_usuario, 'Matrix'), dt_coleta_p => dt_coleta_p, ds_referencia_p => ds_referencia_p, ds_unidade_medida_p => ds_unidade_medida_p, nr_doc_lab_p => NULL, dt_resultado_p => dt_liberacao_p, ds_erro_p => ds_erro_p);

        END IF;

    END IF;

    IF ( upper(ds_alerta_refer_p) = 'PANICO' ) THEN
        ie_resultado_critico_w := 'S';
        ie_resultado_referencia_w := 'N';
        ie_normalidade_w := 758;
    ELSIF ( upper(ds_alerta_refer_p) = 'PATOLOGICO' ) THEN
        ie_resultado_critico_w := 'N';
        ie_resultado_referencia_w := 'S';
        ie_normalidade_w := 845;
    ELSE
        ie_resultado_critico_w := 'N';
        ie_resultado_referencia_w := 'N';
        ie_normalidade_w := 758;
    END IF;

    UPDATE
        exame_lab_result_item e
    SET
        e.ie_resultado_critico = ie_resultado_critico_w,
        e.ie_resultado_referencia = ie_resultado_referencia_w,
        e.ie_normalidade = ie_normalidade_w
    WHERE
        nr_seq_resultado IN (
            SELECT
                nr_seq_resultado
            FROM
                exame_lab_resultado e
            WHERE
                e.nr_prescricao = nr_prescricao_p
        )
        AND nr_seq_prescr = coalesce(nr_seq_prescr_w, nr_seq_prescr)
        AND nr_seq_exame = coalesce(nr_seq_analito_w, nr_seq_exame_w);

    IF ( ds_parcial_p = '1' ) THEN
        UPDATE
            exame_lab_result_item
        SET
            dt_aprovacao  = NULL
        WHERE
            nr_seq_resultado IN (
                SELECT
                    nr_seq_resultado
                FROM
                    exame_lab_resultado e
                WHERE
                    e.nr_prescricao = nr_prescricao_p
            )
            AND nr_seq_prescr = coalesce(nr_seq_prescr_w, nr_seq_prescr)
            AND nr_seq_exame = nr_seq_exame_w;

        UPDATE
            prescr_procedimento
        SET
            ie_status_atend = 30,
            nm_usuario = coalesce(wheb_usuario_pck.get_nm_usuario, 'Matrix')
        WHERE
            nr_prescricao = nr_prescricao_p
            AND nr_sequencia = coalesce(nr_seq_prescr_w, nr_seq_prescr_w);

    END IF;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE matrixv7_ins_exame_res_item ( nr_prescricao_p bigint, cd_exame_p text, cd_analito_p text, ds_parcial_p text, ds_alerta_refer_p text, dt_liberacao_p timestamp, dt_coleta_p timestamp, ds_resultado_p text, ds_unidade_medida_p text, ds_observacao_p text, ds_referencia_p text, nr_seq_prescr_p bigint default 0, ds_erro_p INOUT text  DEFAULT NULL) FROM PUBLIC;

