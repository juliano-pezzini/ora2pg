-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_seg_beneficio_obito ( nr_seq_titular_p bigint, dt_rescisao_titular_p timestamp, cd_estabelecimento_P bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_contrato_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_regra_obito_w		bigint;
qt_idade_w			bigint;
nr_seq_parentesco_w		bigint;
ie_tipo_parentesco_w		bigint;
nr_seq_regra_obito_compl_w	bigint;
ie_lanca_regra_w		varchar(1) := 'S';
qt_registros_w			bigint;
qt_benef_obitos_gerado_w	bigint;
nr_seq_pagador_w		bigint;
nr_seq_contrato_novo_w		bigint;
cd_cgc_pagador_w		varchar(14);
cd_pf_pagador_w			varchar(10);
ie_endereco_boleto_w		varchar(4);
nr_seq_compl_pf_tel_adic_w	bigint;
ie_tipo_pagador_w		varchar(1);
ie_envia_cobranca_w		varchar(1);
dt_primeira_mensalidade_w	timestamp;
ie_calc_primeira_mens_w		varchar(1);
ie_calculo_proporcional_w	varchar(1);
ie_pessoa_comprovante_w		varchar(2);
ie_notificacao_w		varchar(2);
ie_taxa_emissao_boleto_w	varchar(2);
ie_inadimplencia_via_adic_w	varchar(1);
nr_seq_plano_sca_w		bigint;
nr_seq_tabela_w			bigint;
nr_seq_vendedor_canal_w		bigint;
nr_seq_vendedor_pf_w		bigint;
nr_seq_emissor_w		bigint;
nr_seq_motivo_inclusao_w	bigint;
nr_seq_emissor_param_w		bigint;
nr_seq_motivo_inclusao_param_w	bigint;
dt_base_validade_cart_param_w	varchar(1);
nr_seq_pagador_novo_w		bigint;
nr_seq_pagador_fin_w		bigint;
nr_seq_seg_contrato_w		bigint;
cd_pessoa_fisica_w		varchar(10);
ie_tipo_segurado_w		varchar(10);
dt_inclusao_operadora_w		timestamp;
nr_seq_plano_novo_w		bigint;
nr_seq_tabela_nova_w		bigint;
nr_seq_segurado_w		bigint;
qt_planos_w			bigint;
qt_pagadores_w			bigint;
qt_segurados_w			bigint;
nr_seq_operadora_w		bigint;
ie_tipo_contrato_w		varchar(10);
ie_contrato_intercambio_w	varchar(10) := 0;
dt_base_validade_cart_inter_w	varchar(10);
nr_seq_intercambio_novo_w	bigint;
nr_seq_rescisao_param_w		bigint;
nr_seq_motivo_rescisao_w	bigint;
nr_seq_segurado_novo_w		bigint;
qt_validade_contrato_w		bigint;
cd_usuario_plano_w		varchar(30);
nr_seq_resc_prog_gerada_w	bigint;
nr_seq_causa_rescisao_w		bigint;

C00 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_segurado
	where	nr_seq_titular	= nr_seq_titular_p;
	
C01 CURSOR FOR
	SELECT	a.nr_seq_plano
	from	pls_sca_vinculo	a
	where	a.nr_seq_segurado	= nr_seq_titular_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	clock_timestamp() between coalesce(dt_inicio_vigencia,clock_timestamp()) and fim_dia(coalesce(dt_fim_vigencia,clock_timestamp()))
	and	exists (	SELECT	1
				from	pls_sca_regra_obito	x
				where	x.nr_seq_sca		= a.nr_seq_plano
				and	x.ie_acao_seguro	= 'N');


BEGIN

select	nr_seq_emissor,
	nr_seq_motivo_inclusao,
	dt_base_validade_carteira,
	dt_base_validade_cart_inter,
	nr_seq_motivo_rescisao_obito
into STRICT	nr_seq_emissor_param_w,
	nr_seq_motivo_inclusao_param_w,
	dt_base_validade_cart_param_w,
	dt_base_validade_cart_inter_w,
	nr_seq_rescisao_param_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

select	max(nr_sequencia)
into STRICT	nr_seq_operadora_w
from	pls_outorgante
where	cd_estabelecimento = cd_estabelecimento_p;

open C00;
loop
fetch C00 into
	nr_seq_segurado_w;
EXIT WHEN NOT FOUND; /* apply on C00 */
	begin
	/*Obter dados do segurado*/

	select	nr_seq_contrato,
		nr_seq_parentesco,
		substr(pls_obter_dados_segurado(nr_seq_segurado_w,'ID'),1,4),
		cd_pessoa_fisica,
		ie_tipo_segurado,
		dt_inclusao_operadora
	into STRICT	nr_seq_contrato_w,
		nr_seq_parentesco_w,
		qt_idade_w,
		cd_pessoa_fisica_w,
		ie_tipo_segurado_w,
		dt_inclusao_operadora_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
	
	select	max(cd_usuario_plano)
	into STRICT	cd_usuario_plano_w
	from	pls_segurado_carteira
	where	nr_seq_segurado	= nr_seq_segurado_w;

	select	max(ie_tipo_parentesco)
	into STRICT	ie_tipo_parentesco_w
	from	grau_parentesco
	where	nr_sequencia	= nr_seq_parentesco_w;
	
	open C01;
	loop
	fetch C01 into	
		nr_seq_plano_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		/*Obter o beneficio do obito*/

		begin
		
		begin
		select	max(nr_sequencia),
			max(ie_tipo_contrato)
		into STRICT	nr_seq_regra_obito_w,
			ie_tipo_contrato_w
		from	pls_sca_regra_obito
		where	nr_seq_sca		= nr_seq_plano_w
		and	ie_situacao		= 'A';
		exception
		when others then
			nr_seq_regra_obito_w	:= null;
		end;

		ie_lanca_regra_w	:= 'S';		
		
		if (nr_seq_regra_obito_w IS NOT NULL AND nr_seq_regra_obito_w::text <> '') then				
			select	count(1)
			into STRICT	qt_registros_w
			
			where	exists (SELECT	1
					from	pls_sca_regra_obito_compl
					where	nr_seq_regra_obito				= nr_seq_regra_obito_w
					and	((coalesce(nr_seq_parentesco,nr_seq_parentesco_w)	= nr_seq_parentesco_w
					and 	(nr_seq_parentesco IS NOT NULL AND nr_seq_parentesco::text <> ''))
					or 	coalesce(nr_seq_parentesco::text, '') = '')
					and	((coalesce(ie_tipo_parentesco,ie_tipo_parentesco_w)	= ie_tipo_parentesco_w
					and 	(ie_tipo_parentesco IS NOT NULL AND ie_tipo_parentesco::text <> ''))
					or 	coalesce(ie_tipo_parentesco::text, '') = '')
					and	((coalesce(qt_idade_limite,qt_idade_w)		>= qt_idade_w)
					or (coalesce(qt_idade_limite::text, '') = ''))
					and	ie_situacao					= 'A');

			select	max(nr_sequencia)
			into STRICT	nr_seq_pagador_w
			from	pls_contrato_pagador
			where	nr_seq_regra_obito	= nr_seq_regra_obito_w;

			/*Obter dados da regra do obito*/

			select	nr_seq_plano_sca,
				nr_seq_tabela,
				nr_seq_vendedor_canal,
				nr_seq_vendedor_pf,
				nr_seq_emissor,
				nr_seq_motivo_inclusao,
				nr_seq_motivo_rescisao,
				nr_seq_causa_rescisao,
				coalesce(qt_validade_contrato,0)
			into STRICT	nr_seq_plano_sca_w,
				nr_seq_tabela_w,
				nr_seq_vendedor_canal_w,
				nr_seq_vendedor_pf_w,
				nr_seq_emissor_w,
				nr_seq_motivo_inclusao_w,
				nr_seq_motivo_rescisao_w,
				nr_seq_causa_rescisao_w,
				qt_validade_contrato_w
			from	pls_sca_regra_obito
			where	nr_sequencia	= nr_seq_regra_obito_w;

			/*Se nao houver motivo de inclusao na regra do obito, busca o padrao da operadora*/

			if (coalesce(nr_seq_motivo_inclusao_w::text, '') = '') then
				nr_seq_motivo_inclusao_w	:= nr_seq_motivo_inclusao_param_w;
			end if;
			
			if (coalesce(nr_seq_motivo_rescisao_w::text, '') = '') then
				nr_seq_motivo_rescisao_w	:= nr_seq_rescisao_param_w;
			end if;

			if (qt_registros_w > 0) then
				ie_lanca_regra_w	:= 'S';
			elsif (qt_registros_w = 0) then
				select	count(1)
				into STRICT	qt_registros_w
				
				where	exists (SELECT	1
						from	pls_sca_regra_obito_compl
						where	nr_seq_regra_obito				= nr_seq_regra_obito_w);								
				
				if (qt_registros_w = 0) then
					ie_lanca_regra_w := 'S';
				else
					ie_lanca_regra_w := 'N';
				end if;
			end if;

			select	count(*)
			into STRICT	qt_benef_obitos_gerado_w
			from	pls_segurado
			where	nr_seq_segurado_obito	= nr_seq_segurado_w;
			
			if (ie_lanca_regra_w	= 'S') and (qt_benef_obitos_gerado_w = 0) and (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
				ie_contrato_intercambio_w	:= ie_contrato_intercambio_w + 1;
				/*Obter dados do pagador*/

				select	cd_pessoa_fisica,
					cd_cgc,
					ie_endereco_boleto,
					nr_seq_compl_pf_tel_adic,
					ie_tipo_pagador,
					ie_envia_cobranca,
					dt_primeira_mensalidade,
					ie_calc_primeira_mens,
					ie_calculo_proporcional,
					ie_pessoa_comprovante,
					ie_notificacao,
					ie_taxa_emissao_boleto,
					ie_inadimplencia_via_adic
				into STRICT	cd_pf_pagador_w,
					cd_cgc_pagador_w,
					ie_endereco_boleto_w,
					nr_seq_compl_pf_tel_adic_w,
					ie_tipo_pagador_w,
					ie_envia_cobranca_w,
					dt_primeira_mensalidade_w,
					ie_calc_primeira_mens_w,
					ie_calculo_proporcional_w,
					ie_pessoa_comprovante_w,
					ie_notificacao_w,
					ie_taxa_emissao_boleto_w,
					ie_inadimplencia_via_adic_w
				from	pls_contrato_pagador
				where	nr_sequencia	= nr_seq_pagador_w;

				/*Obter dados da informacoes financeiras do pagador*/

				select	max(nr_sequencia)
				into STRICT	nr_seq_pagador_fin_w
				from	pls_contrato_pagador_fin
				where	nr_seq_pagador	= nr_seq_pagador_w;

				if (coalesce(nr_seq_emissor_w::text, '') = '') then
					nr_seq_emissor_w	:= nr_seq_emissor_param_w;
				end if;

				/*Gerar o contrato de operadora de plano de saude*/

				if (ie_tipo_contrato_w	= 'O') then
					/*O contrato deve ser gerado apenas uma vez*/

					if (ie_contrato_intercambio_w <= 1) then
						/*Criar o contrato de plano de saude*/

						select	nextval('pls_contrato_seq')
						into STRICT	nr_seq_contrato_novo_w
						;

						insert into pls_contrato(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
								cd_estabelecimento,cd_cgc_estipulante,cd_pf_estipulante,dt_contrato,ie_reajuste,
								ie_geracao_valores,nr_seq_emissor,dt_base_validade_carteira,ie_tipo_operacao,
								ie_situacao,dt_reajuste,qt_intervalo,ie_controle_carteira,ie_novo_beneficiario,
								nr_contrato,ie_permite_prod_dif,ie_renovacao_automatica,nr_seq_operadora)
						values (	nr_seq_contrato_novo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
								cd_estabelecimento_p,cd_cgc_pagador_w,cd_pf_pagador_w,dt_rescisao_titular_p,'C',
								'B',nr_seq_emissor_w,dt_base_validade_cart_param_w,'A',
								'1',dt_rescisao_titular_p,12,'A','S',
								nextval('nr_contrato_seq'),'N','N',nr_seq_operadora_w);
								
						if (cd_pf_pagador_w IS NOT NULL AND cd_pf_pagador_w::text <> '') then						
							nr_seq_resc_prog_gerada_w := pls_gerar_rescisao_programada(null, nr_seq_contrato_novo_w, null, nr_seq_motivo_rescisao_w, qt_validade_contrato_w, dt_rescisao_titular_p, 'PF', 'N', wheb_mensagem_pck.get_texto(1106517), nm_usuario_p, null, null, 0, null, 'S', nr_seq_resc_prog_gerada_w, nr_seq_causa_rescisao_w);
						end if;			
					end if;

					/*Criar o plano para o contrato*/

					select	count(*)
					into STRICT	qt_planos_w
					from	pls_contrato_plano
					where	nr_seq_contrato	= nr_seq_contrato_novo_w;

					if (qt_planos_w = 0) then
						insert into pls_contrato_plano(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
								nr_seq_contrato,nr_seq_plano,nr_seq_tabela,ie_situacao,dt_inicio_vigencia,
								dt_fim_vigencia,ie_tipo_operacao)
						values (	nextval('pls_contrato_plano_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
								nr_seq_contrato_novo_w,nr_seq_plano_sca_w,nr_seq_tabela_w,'A',dt_rescisao_titular_p,
								null,'A');
						/*Gerar a tabela de preco para o plano do contrato*/

						CALL pls_gerar_tabela_contrato(nr_seq_contrato_novo_w,nr_seq_plano_sca_w,nr_seq_tabela_w,cd_estabelecimento_p,nm_usuario_p);
					end if;

					/*Criar o pagador para o contrato*/

					select	count(*)
					into STRICT	qt_pagadores_w
					from	pls_contrato_pagador
					where	nr_seq_contrato	= nr_seq_contrato_novo_w;

					if (qt_pagadores_w = 0) then
						select	nextval('pls_contrato_pagador_seq')
						into STRICT	nr_seq_pagador_novo_w
						;

						insert into pls_contrato_pagador(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
								nr_seq_contrato,cd_pessoa_fisica,cd_cgc,ie_endereco_boleto,nr_seq_compl_pf_tel_adic,
								ie_tipo_pagador,ie_envia_cobranca,dt_primeira_mensalidade,ie_calc_primeira_mens,ie_calculo_proporcional,
								ie_pessoa_comprovante,ie_notificacao,ie_taxa_emissao_boleto,ie_inadimplencia_via_adic,nr_seq_regra_obito, ie_receber_sms)
						values (	nr_seq_pagador_novo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
								nr_seq_contrato_novo_w,cd_pf_pagador_w,cd_cgc_pagador_w,ie_endereco_boleto_w,nr_seq_compl_pf_tel_adic_w,
								ie_tipo_pagador_w,ie_envia_cobranca_w,dt_primeira_mensalidade_w,ie_calc_primeira_mens_w,ie_calculo_proporcional_w,
								ie_pessoa_comprovante_w,ie_notificacao_w,ie_taxa_emissao_boleto_w,ie_inadimplencia_via_adic_w,nr_seq_regra_obito_w, 'S');

						/*Criar as informacoes financeiras do pagador para o contrato*/

						insert into pls_contrato_pagador_fin(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
								dt_inicio_vigencia,dt_dia_vencimento,nr_seq_forma_cobranca,ie_mes_vencimento,cd_condicao_pagamento,
								cd_tipo_portador,cd_portador,nr_seq_conta_banco,nr_seq_carteira_cobr,ie_portador_exclusivo,
								cd_banco,cd_agencia_bancaria,ie_digito_agencia,cd_conta,ie_digito_conta,
								nr_seq_empresa,cd_profissao,nr_seq_vinculo_empresa,cd_matricula,ie_geracao_nota_titulo,
								ie_destacar_reajuste,nr_seq_pagador	)
						(	SELECT	nextval('pls_contrato_pagador_fin_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
								trunc(dt_rescisao_titular_p,'Month'),dt_dia_vencimento,nr_seq_forma_cobranca,ie_mes_vencimento,cd_condicao_pagamento,
								cd_tipo_portador,cd_portador,nr_seq_conta_banco,nr_seq_carteira_cobr,ie_portador_exclusivo,
								cd_banco,cd_agencia_bancaria,ie_digito_agencia,cd_conta,ie_digito_conta,
								nr_seq_empresa,cd_profissao,nr_seq_vinculo_empresa,cd_matricula,ie_geracao_nota_titulo,
								ie_destacar_reajuste,nr_seq_pagador_novo_w
							from	pls_contrato_pagador_fin
							where	nr_sequencia	= nr_seq_pagador_fin_w);
					end if;

					/*Criar o beneficiario para o contrato*/

					select	coalesce(max(nr_seq_seg_contrato),0) + 1
					into STRICT	nr_seq_seg_contrato_w
					from	pls_segurado
					where	nr_seq_contrato	= nr_seq_contrato_novo_w;

					select	nr_seq_plano,
						nr_seq_tabela
					into STRICT	nr_seq_plano_novo_w,
						nr_seq_tabela_nova_w
					from	pls_contrato_plano
					where	nr_seq_contrato	= nr_seq_contrato_novo_w;
					
					select	nextval('pls_segurado_seq')
					into STRICT	nr_seq_segurado_novo_w
					;

					insert into pls_segurado(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
							cd_estabelecimento,nr_seq_contrato,cd_pessoa_fisica,dt_contratacao,dt_inclusao_operadora,
							ie_situacao_atend,nr_seq_seg_contrato,nr_seq_pagador,nr_seq_vendedor_canal,nr_seq_vendedor_pf,
							nr_seq_plano,nr_seq_tabela,nr_seq_motivo_inclusao,ie_tipo_segurado,dt_reajuste,
							ie_nascido_plano,ie_taxa_inscricao,ie_pcmso,nr_seq_segurado_obito)
					values (	nr_seq_segurado_novo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
							cd_estabelecimento_p,nr_seq_contrato_novo_w,cd_pessoa_fisica_w,dt_rescisao_titular_p,dt_inclusao_operadora_w,
							'A',nr_seq_seg_contrato_w,nr_seq_pagador_novo_w,nr_seq_vendedor_canal_w,nr_seq_vendedor_pf_w,
							nr_seq_plano_novo_w,nr_seq_tabela_nova_w,nr_seq_motivo_inclusao_w,'R',dt_rescisao_titular_p,
							'N','S','N',nr_seq_segurado_w);
							
					if (coalesce(cd_pf_pagador_w::text, '') = '') then
						nr_seq_resc_prog_gerada_w := pls_gerar_rescisao_programada(null, null, nr_seq_segurado_novo_w, nr_seq_motivo_rescisao_w, qt_validade_contrato_w, dt_rescisao_titular_p, 'PJ', 'N', wheb_mensagem_pck.get_texto(1106517), nm_usuario_p, null, null, 0, null, 'S', nr_seq_resc_prog_gerada_w, nr_seq_causa_rescisao_w);
					end if;
				/*Gerar o contrato de intercambio*/

				elsif (ie_tipo_contrato_w	= 'I') then
					/*O intercambio deve ser gerado apenas uma vez*/

					if (ie_contrato_intercambio_w <= 1) then
						select	nextval('pls_intercambio_seq')
						into STRICT	nr_seq_intercambio_novo_w
						;

						insert into pls_intercambio(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
								cd_estabelecimento,cd_pessoa_fisica,cd_cgc,ie_emite_cartao,dt_inclusao,
								dt_exclusao,ie_tipo_contrato,dt_base_validade_carteira,nr_seq_emissor,ie_controle_carteira	)
						values (	nr_seq_intercambio_novo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
								cd_estabelecimento_p,cd_pf_pagador_w,cd_cgc_pagador_w,'S',dt_rescisao_titular_p,
								null,'S',dt_base_validade_cart_inter_w,nr_seq_emissor_w,'A');
								
						if (cd_pf_pagador_w IS NOT NULL AND cd_pf_pagador_w::text <> '') then
							nr_seq_resc_prog_gerada_w := pls_gerar_rescisao_programada(nr_seq_intercambio_novo_w, null, null, nr_seq_motivo_rescisao_w, qt_validade_contrato_w, dt_rescisao_titular_p, 'PF', 'N', wheb_mensagem_pck.get_texto(1106517), nm_usuario_p, null, null, 0, null, 'S', nr_seq_resc_prog_gerada_w, nr_seq_causa_rescisao_w);
						end if;	
					end if;
					
					/*Criar o plano para o intercambio*/

					select	count(*)
					into STRICT	qt_planos_w
					from	pls_intercambio_plano
					where	nr_seq_intercambio	= nr_seq_intercambio_novo_w;

					if (qt_planos_w = 0) then
						insert into pls_intercambio_plano(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
								nr_seq_intercambio,nr_seq_plano,nr_seq_tabela)
						values (	nextval('pls_intercambio_plano_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
								nr_seq_intercambio_novo_w,nr_seq_plano_sca_w,nr_seq_tabela_w);

						/*Gerar a tabela de preco para o plano de intercambio*/

						CALL pls_gerar_tabela_intercambio(nr_seq_intercambio_novo_w,nr_seq_plano_sca_w,nr_seq_tabela_w,cd_estabelecimento_p,nm_usuario_p,'N');
					end if;

					/*Criar o pagador para o intercambio*/

					select	count(*)
					into STRICT	qt_pagadores_w
					from	pls_contrato_pagador
					where	nr_seq_pagador_intercambio	= nr_seq_intercambio_novo_w;

					if (qt_pagadores_w = 0) then
						select	nextval('pls_contrato_pagador_seq')
						into STRICT	nr_seq_pagador_novo_w
						;

						insert into pls_contrato_pagador(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
								nr_seq_pagador_intercambio,cd_pessoa_fisica,cd_cgc,ie_endereco_boleto,nr_seq_compl_pf_tel_adic,
								ie_tipo_pagador,ie_envia_cobranca,dt_primeira_mensalidade,ie_calc_primeira_mens,ie_calculo_proporcional,
								ie_pessoa_comprovante,ie_notificacao,ie_taxa_emissao_boleto,ie_inadimplencia_via_adic,nr_seq_regra_obito, ie_receber_sms)
						values (	nr_seq_pagador_novo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
								nr_seq_intercambio_novo_w,cd_pf_pagador_w,cd_cgc_pagador_w,ie_endereco_boleto_w,nr_seq_compl_pf_tel_adic_w,
								ie_tipo_pagador_w,ie_envia_cobranca_w,dt_primeira_mensalidade_w,ie_calc_primeira_mens_w,ie_calculo_proporcional_w,
								ie_pessoa_comprovante_w,ie_notificacao_w,ie_taxa_emissao_boleto_w,ie_inadimplencia_via_adic_w,nr_seq_regra_obito_w, 'S');

						/*Criar as informacoes financeiras do pagador para o intercambio*/

						insert into pls_contrato_pagador_fin(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
								dt_inicio_vigencia,dt_dia_vencimento,nr_seq_forma_cobranca,ie_mes_vencimento,cd_condicao_pagamento,
								cd_tipo_portador,cd_portador,nr_seq_conta_banco,nr_seq_carteira_cobr,ie_portador_exclusivo,
								cd_banco,cd_agencia_bancaria,ie_digito_agencia,cd_conta,ie_digito_conta,
								nr_seq_empresa,cd_profissao,nr_seq_vinculo_empresa,cd_matricula,ie_geracao_nota_titulo,
								ie_destacar_reajuste,nr_seq_pagador	)
						(	SELECT	nextval('pls_contrato_pagador_fin_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
								trunc(dt_rescisao_titular_p,'Month'),dt_dia_vencimento,nr_seq_forma_cobranca,ie_mes_vencimento,cd_condicao_pagamento,
								cd_tipo_portador,cd_portador,nr_seq_conta_banco,nr_seq_carteira_cobr,ie_portador_exclusivo,
								cd_banco,cd_agencia_bancaria,ie_digito_agencia,cd_conta,ie_digito_conta,
								nr_seq_empresa,cd_profissao,nr_seq_vinculo_empresa,cd_matricula,ie_geracao_nota_titulo,
								ie_destacar_reajuste,nr_seq_pagador_novo_w
							from	pls_contrato_pagador_fin
							where	nr_sequencia	= nr_seq_pagador_fin_w);
					end if;

					/*Criar o beneficiario para o intercambio*/

					select	coalesce(max(nr_seq_seg_contrato),0) + 1
					into STRICT	nr_seq_seg_contrato_w
					from	pls_segurado
					where	nr_seq_intercambio	= nr_seq_intercambio_novo_w;

					select	nr_seq_plano,
						nr_seq_tabela
					into STRICT	nr_seq_plano_novo_w,
						nr_seq_tabela_nova_w
					from	pls_intercambio_plano
					where	nr_seq_intercambio	= nr_seq_intercambio_novo_w;
					
					select	nextval('pls_segurado_seq')
					into STRICT	nr_seq_segurado_novo_w
					;

					insert into pls_segurado(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
							cd_estabelecimento,nr_seq_intercambio,cd_pessoa_fisica,dt_contratacao,dt_inclusao_operadora,
							ie_situacao_atend,nr_seq_seg_contrato,nr_seq_pagador,nr_seq_plano,nr_seq_tabela,
							ie_tipo_segurado,ie_nascido_plano,ie_taxa_inscricao,ie_pcmso,nr_seq_segurado_obito,
							cd_cartao_intercambio)
					values (	nr_seq_segurado_novo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
							cd_estabelecimento_p,nr_seq_intercambio_novo_w,cd_pessoa_fisica_w,dt_rescisao_titular_p,dt_inclusao_operadora_w,
							'A',nr_seq_seg_contrato_w,nr_seq_pagador_novo_w,nr_seq_plano_novo_w,nr_seq_tabela_nova_w,
							'R','N','S','N',nr_seq_segurado_w,
							cd_usuario_plano_w);
						
					if (coalesce(cd_pf_pagador_w::text, '') = '') then
						nr_seq_resc_prog_gerada_w := pls_gerar_rescisao_programada(null, null, nr_seq_segurado_novo_w, nr_seq_motivo_rescisao_w, qt_validade_contrato_w, dt_rescisao_titular_p, 'PJ', 'N', wheb_mensagem_pck.get_texto(1106517), nm_usuario_p, null, null, 0, null, 'S', nr_seq_resc_prog_gerada_w, nr_seq_causa_rescisao_w);
					end if;	

				end if;
			end if;
		end if;
		end;
	end loop;
	close C01;
	end;
end loop;
close C00;

if (ie_tipo_contrato_w	= 'O') then
	select	count(*)
	into STRICT	qt_segurados_w
	from	pls_segurado
	where	nr_seq_contrato	 = nr_seq_contrato_novo_w;
	/*Verificar se gerou beneficiarios para o contrato da regra de obito*/

	if (qt_segurados_w = 0) then
		delete	FROM pls_contrato
		where	nr_sequencia	= nr_seq_contrato_novo_w;
	end if;
elsif (ie_tipo_contrato_w	= 'I') then
	select	count(*)
	into STRICT	qt_segurados_w
	from	pls_segurado
	where	nr_seq_intercambio	 = nr_seq_intercambio_novo_w;
	/*Verificar se gerou beneficiarios para o intercambio da regra de obito*/

	if (qt_segurados_w = 0) then
		delete	FROM pls_intercambio
		where	nr_sequencia	= nr_seq_intercambio_novo_w;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_seg_beneficio_obito ( nr_seq_titular_p bigint, dt_rescisao_titular_p timestamp, cd_estabelecimento_P bigint, nm_usuario_p text) FROM PUBLIC;

