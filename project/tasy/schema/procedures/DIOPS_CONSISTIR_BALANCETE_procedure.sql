-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE diops_consistir_balancete ( nr_seq_periodo_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


ds_conta_ativo_w		varchar(255);
ds_conta_passivo_w		varchar(255);
ds_conta_receita_w		varchar(255);
ds_conta_despesa_w		varchar(255);
qt_lancamento_ativo_w		bigint	:= 0;
qt_lancamento_ativo_ww		bigint	:= 0;
qt_lancamento_passivo_w		bigint	:= 0;
qt_lancamento_passivo_ww	bigint	:= 0;
qt_lancamento_receita_w		bigint	:= 0;
qt_lancamento_receita_ww	bigint	:= 0;
qt_lancamento_despesa_w		bigint	:= 0;
qt_lancamento_despesa_ww	bigint	:= 0;
qt_registros_w			bigint	:= 0;
nr_seq_operadora_w		bigint;


BEGIN
/* Obter a operadora do estabelecimento */

select	coalesce(max(nr_sequencia), 0)
into STRICT	nr_seq_operadora_w
from	pls_outorgante
where	cd_estabelecimento	= cd_estabelecimento_p;

select	qt_lancamento_ativo,
	qt_lancamento_passivo,
	qt_lancamento_receita,
	qt_lancamento_despesa
into STRICT	qt_lancamento_ativo_w,
	qt_lancamento_passivo_w,
	qt_lancamento_receita_w,
	qt_lancamento_despesa_w
from	w_diops_fin_balancete
where	nr_seq_periodo	= nr_seq_periodo_p;

select	count(ds_conta)
into STRICT	qt_lancamento_ativo_ww
from	diops_fin_mov_ativo
where	nr_seq_periodo		= nr_seq_periodo_p;

select	count(ds_conta)
into STRICT	qt_lancamento_passivo_ww
from	diops_fin_mov_passivo
where	nr_seq_periodo		= nr_seq_periodo_p;

select	count(ds_conta)
into STRICT	qt_lancamento_receita_ww
from	diops_fin_mov_receita
where	nr_seq_periodo		= nr_seq_periodo_p;

select	count(ds_conta)
into STRICT	qt_lancamento_despesa_ww
from	diops_fin_mov_despesa
where	nr_seq_periodo		= nr_seq_periodo_p;

/* 6 - Número de lançamentos declarado para o ativo não confere com numero de registros de lancamento */

if (qt_lancamento_ativo_w <> qt_lancamento_ativo_ww) then
	CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
					6,
					qt_lancamento_ativo_w || ' - ' || qt_lancamento_ativo_ww,
					null,
					nm_usuario_p,
					cd_estabelecimento_p);
end if;

/* 7 - Número de lançamentos declarado para o passivo não confere com numero de registros de lancamento */

if (qt_lancamento_passivo_w <> qt_lancamento_passivo_ww) then
	CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
					7,
					qt_lancamento_passivo_w || ' - ' || qt_lancamento_passivo_ww,
					null,
					nm_usuario_p,
					cd_estabelecimento_p);
end if;

/* 8 - Número de lançamentos declarado para a receita não confere com numero de registros de lancamento */

if (qt_lancamento_receita_w <> qt_lancamento_receita_ww) then
	CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
					8,
					qt_lancamento_receita_w || ' - ' || qt_lancamento_receita_ww,
					null,
					nm_usuario_p,
					cd_estabelecimento_p);
end if;

/* 9 - Número de lançamentos declarado para a despesa não confere com numero de registros de lancamento */

if (qt_lancamento_despesa_w <> qt_lancamento_despesa_ww) then
	CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
					9,
					qt_lancamento_despesa_w || ' - ' || qt_lancamento_despesa_ww,
					null,
					nm_usuario_p,
					cd_estabelecimento_p);
end if;

if (qt_lancamento_ativo_ww	> 0) then
	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_ativo
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_saldo_anterior::text, '') = '';

	/* 18 - Existem contas no "Balancete ativo" com "Saldo anterior" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						18,
						/*Contas com saldo anterior nulo: #@qt_registros_w#@*/

						wheb_mensagem_pck.get_texto(298018,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_ativo
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_debitos::text, '') = '';

	/* 19 - Existem contas no "Balancete ativo" com "Débito" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						19,
						/*Contas com valor de débito nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298022,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_ativo
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_creditos::text, '') = '';

	/* 20 - Existem contas no "Balancete ativo" com "Crédito" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						20,
						/*Contas com valor de crédito nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298027,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_ativo
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_saldo_final::text, '') = '';

	/* 21 - Existem contas no "Balancete ativo" com "Saldo final" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						21,
						/*Contas com saldo final nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298028,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	begin
	select	max(ds_conta)
	into STRICT	ds_conta_ativo_w
	from	diops_fin_mov_ativo
	where	nr_seq_operadora	= nr_seq_operadora_w
	and	nr_seq_periodo          = nr_seq_periodo_p
	group by ds_conta
	having count(*) > 1;
	exception
	when others then
		ds_conta_ativo_w	:= '';
	end;

	/* 34 - Existem contas duplicadas no balancete ativo */

	if (ds_conta_ativo_w IS NOT NULL AND ds_conta_ativo_w::text <> '') then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						34,
						/*Conta duplicada: #@DS_CONTA_ATIVO_W#@*/

						wheb_mensagem_pck.get_texto(298029,'DS_CONTA_ATIVO_W=' || ds_conta_ativo_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;
end if;

if (qt_lancamento_passivo_ww > 0) then
	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_passivo
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_saldo_anterior::text, '') = '';

	/* 22 - Existem contas no "Balancete passivo" com "Saldo anterior" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						22,
						/*Contas com saldo anterior nulo: #@qt_registros_w#@*/

						wheb_mensagem_pck.get_texto(298018,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_passivo
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_debitos::text, '') = '';

	/* 23 - Existem contas no "Balancete passivo" com "Débito" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						23,
						/*Contas com valor de débito nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298022,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_passivo
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_creditos::text, '') = '';

	/* 24 - Existem contas no "Balancete passivo" com "Crédito" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						24,
						/*Contas com valor de crédito nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298027,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_passivo
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_saldo_final::text, '') = '';

	/* 25 - Existem contas no "Balancete passivo" com "Saldo final" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						25,
						/*Contas com saldo final nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298028,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	begin
	select	max(ds_conta)
	into STRICT	ds_conta_passivo_w
	from	diops_fin_mov_passivo
	where	nr_seq_operadora	= nr_seq_operadora_w
	and	nr_seq_periodo          = nr_seq_periodo_p
	group by ds_conta
	having count(*) > 1;
	exception
		when others then
		ds_conta_ativo_w	:= '';
	end;

	/* 35 - Existem contas duplicadas no balancete passivo */

	if (ds_conta_passivo_w IS NOT NULL AND ds_conta_passivo_w::text <> '') then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						35,
						/*Conta duplicada: #@ds_conta_passivo_w#@*/

						wheb_mensagem_pck.get_texto(298029,'DS_CONTA_ATIVO_W=' || ds_conta_passivo_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;
end if;

if (qt_lancamento_receita_ww > 0) then
	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_receita
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_saldo_anterior::text, '') = '';

	/* 26 - Existem contas no "Balancete receita" com "Saldo anterior" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						26,
						/*Contas com saldo anterior nulo: #@qt_registros_w#@*/

						wheb_mensagem_pck.get_texto(298018,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_receita
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_debitos::text, '') = '';

	/* 27 - Existem contas no "Balancete receita" com "Débito" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						27,
						/*Contas com valor de débito nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298022,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_receita
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_creditos::text, '') = '';

	/* 28 - Existem contas no "Balancete receita" com "Crédito" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						28,
						/*Contas com valor de crédito nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298027,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_receita
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_saldo_final::text, '') = '';

	/* 29 - Existem contas no "Balancete receita" com "Saldo final" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						29,
						/*Contas com saldo final nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298028,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	begin
	select	max(ds_conta)
	into STRICT	ds_conta_receita_w
	from	diops_fin_mov_receita
	where	nr_seq_operadora	= nr_seq_operadora_w
	and	nr_seq_periodo          = nr_seq_periodo_p
	group by ds_conta
	having count(*) > 1;
	exception
		when others then
		ds_conta_receita_w	:= '';
	end;

	/* 36 - Existem contas duplicadas no balancete receita*/

	if (ds_conta_receita_w IS NOT NULL AND ds_conta_receita_w::text <> '') then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						36,
						/*Conta duplicada: #@ds_conta_receita_w#@*/

						wheb_mensagem_pck.get_texto(298029,'DS_CONTA_ATIVO_W=' || ds_conta_receita_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;
end if;

if (qt_lancamento_despesa_ww > 0) then
	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_despesa
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_saldo_anterior::text, '') = '';

	/* 30 - Existem contas no "Balancete despesa" com "Saldo anterior" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						30,
						/*Contas com saldo anterior nulo: #@qt_registros_w#@*/

						wheb_mensagem_pck.get_texto(298018,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_despesa
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_debitos::text, '') = '';

	/* 31 - Existem contas no "Balancete despesa" com "Débito" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						31,
						/*Contas com valor de débito nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298022,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_despesa
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_creditos::text, '') = '';

	/* 32 - Existem contas no "Balancete despesa" com "Crédito" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						32,
						/*Contas com valor de crédito nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298027,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	select	count(*)
	into STRICT	qt_registros_w
	from	diops_fin_mov_despesa
	where	nr_seq_periodo	= nr_seq_periodo_p
	and	coalesce(vl_saldo_final::text, '') = '';

	/* 33 - Existem contas no "Balancete despesa" com "Saldo final" não informado/gerado */

	if (qt_registros_w > 0) then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						33,
						/*Contas com saldo final nulo: #@QT_REGISTROS_W#@*/

						wheb_mensagem_pck.get_texto(298028,'QT_REGISTROS_W=' || qt_registros_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	begin
	select	max(ds_conta)
	into STRICT	ds_conta_despesa_w
	from	diops_fin_mov_despesa
	where	nr_seq_operadora	= nr_seq_operadora_w
	and	nr_seq_periodo          = nr_seq_periodo_p
	group by ds_conta
	having count(*) > 1;
	exception
	when others then
		ds_conta_despesa_w	:= '';
	end;

	/* 37 - Existem contas duplicadas no balancete despesa */

	if (ds_conta_despesa_w IS NOT NULL AND ds_conta_despesa_w::text <> '') then
		CALL diops_gravar_inconsistencia(	nr_seq_periodo_p,
						37,
						/*Conta duplicada: #@ds_conta_despesa_w#@*/

						wheb_mensagem_pck.get_texto(298029,'DS_CONTA_ATIVO_W=' || ds_conta_despesa_w),
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE diops_consistir_balancete ( nr_seq_periodo_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

