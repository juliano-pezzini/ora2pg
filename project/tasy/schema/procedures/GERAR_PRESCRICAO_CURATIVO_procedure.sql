-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_prescricao_curativo (nr_seq_curativo_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_prescricao_w				bigint;
cd_pessoa_fisica_w			varchar(10);
nr_atendimento_w			bigint;
cd_medico_w				varchar(10);
dt_prescricao_w				timestamp;
cd_setor_atendimento_w			integer;
cd_estabelecimento_w			smallint;
cd_prescritor_w				varchar(10);
ie_funcao_prescritor_w			varchar(3);
cd_material_w				integer;
ie_via_aplicacao_w			varchar(5);
cd_unidade_medida_dose_w		varchar(30);
qt_dose_w				double precision;
nr_seq_presc_material_w			integer;
cd_unidade_medida_w			varchar(30);
qt_conversao_w				double precision;
cd_intervalo_w				varchar(7);
nr_seq_acum_w				bigint;
ie_tipo_material_w			varchar(3);
ie_agrupador_w				varchar(2);
vl_prim_hor_w				varchar(15);
hr_prim_horario_w			varchar(10);
nr_intervalo_w				bigint;
ds_horarios_w				varchar(2000);
ds_horarios2_w				varchar(2000);
qt_material_w				double precision;
qt_dispensar_w				double precision;
ie_regra_disp_w				varchar(5);
ds_erro_w				varchar(2000);
nr_horas_validade_w			integer;
ie_adep_w					varchar(10);

 
c01 CURSOR FOR 
	SELECT	a.cd_intervalo, 
		a.cd_material, 
		coalesce(a.qt_material,1), 
		nr_seq_acum_w + row_number() OVER () AS rownum 
	from	cur_material a, 
		cur_curativo b 
	where	a.nr_seq_curativo = nr_seq_curativo_p 
	and	b.nr_sequencia = nr_seq_curativo_p;


BEGIN 
 
if (nr_seq_curativo_p IS NOT NULL AND nr_seq_curativo_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then 
 
	/* obter dados do atendimento do curativo */
 
	select	obter_pessoa_atendimento(nr_atendimento,'C'), 
		nr_atendimento, 
		substr(obter_medico_resp_atend(nr_atendimento,'C'),1,10) cd_medico, 
		(substr(obter_unidade_atendimento(nr_atendimento,'A','CS'),1,5))::numeric  cd_setor_atendimento, 
		obter_estab_atend(nr_atendimento) cd_estabelecimento, 
		substr(obter_dados_usuario_opcao(nm_usuario_p,'C'),1,10) cd_prescritor, 
		substr(obter_funcao_usuario_orig(nm_usuario_p),1,3) ie_funcao_prescritor, 
		nr_horas_validade 
	into STRICT	cd_pessoa_fisica_w, 
		nr_atendimento_w, 
		cd_medico_w, 
		cd_setor_atendimento_w, 
		cd_estabelecimento_w, 
		cd_prescritor_w, 
		ie_funcao_prescritor_w, 
		nr_horas_validade_w 
	from	cur_curativo 
	where	nr_sequencia		= nr_seq_curativo_p;
	 
	select	coalesce(max(ie_adep),'N') 
	into STRICT	ie_adep_w 
	from	setor_atendimento 
	where	cd_setor_atendimento	= cd_setor_atendimento_w;
 
	vl_prim_hor_w := Obter_Param_Usuario(281, 388, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, vl_prim_hor_w);
	 
	if (vl_prim_hor_w = '1') then 
		dt_prescricao_w	:= to_date(to_char(clock_timestamp(),'dd/mm/yyyy') || ' ' || to_char(coalesce(Obter_Prim_Horario_Setor(cd_setor_atendimento_w),clock_timestamp()),'hh24:mi'),'dd/mm/yyyy hh24:mi:ss');
		if (dt_prescricao_w < clock_timestamp()) then 
			dt_prescricao_w := dt_prescricao_w + 1;
		end if;	
	elsif (vl_prim_hor_w = '2') then 
		dt_prescricao_w	:= PKG_DATE_UTILS.start_of(clock_timestamp() + (1/24), 'hh24', 0);
	end if;
	 
	/* gerar prescricao */
 
	select	nextval('prescr_medica_seq') 
	into STRICT	nr_prescricao_w 
	;
 
	insert into prescr_medica( 
					nr_prescricao, 
					cd_pessoa_fisica, 
					nr_atendimento, 
					cd_medico, 
					dt_prescricao, 
					dt_atualizacao, 
					nm_usuario, 
					nr_horas_validade, 
					dt_primeiro_horario, 
					cd_setor_atendimento, 
					ie_recem_nato, 
					ie_origem_inf, 
					nm_usuario_original, 
					cd_estabelecimento, 
					cd_prescritor, 
					ie_emergencia, 
					ie_funcao_prescritor, 
					ie_prescricao_alta, 
					ie_prescr_emergencia, 
					ie_adep 
					) 
	values ( 
					nr_prescricao_w, 
					cd_pessoa_fisica_w, 
					nr_atendimento_w, 
					cd_medico_w, 
					clock_timestamp(), 
					clock_timestamp(), 
					nm_usuario_p, 
					coalesce(nr_horas_validade_w,24), 
					dt_prescricao_w, 
					cd_setor_atendimento_w, 
					'N', 
					Obter_Tipo_Pessoa(cd_prescritor_w),--'S', 
					nm_usuario_p, 
					cd_estabelecimento_w, 
					cd_prescritor_w, 
					'N', 
					ie_funcao_prescritor_w, 
					'N', 
					'N', 
					ie_adep_w 
					);
 
	/* atualizar curativo */
 
	update	cur_curativo 
	set	nr_prescricao = nr_prescricao_w 
	where	nr_sequencia = nr_seq_curativo_p;
 
	select coalesce(max(nr_sequencia),0) 
	into STRICT	nr_seq_acum_w 
	from	prescr_material 
	where	nr_prescricao = nr_prescricao_w;
 
	open c01;
	loop 
		fetch c01 into			 
			cd_intervalo_w, 
			cd_material_w, 
			qt_dose_w, 
			nr_seq_presc_material_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
 
		select	substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UMS'),1,30) cd_unidade_medida_consumo, 
			ie_tipo_material, 
			ie_via_aplicacao 
		into STRICT	cd_unidade_medida_w, 
			ie_tipo_material_w, 
			ie_via_aplicacao_w 
		from	material 
		where	cd_material = cd_material_w;
 
		if (ie_tipo_material_w = '1') then 
			ie_agrupador_w	:= '2';
		elsif (ie_tipo_material_w in ('2','3')) then 
			ie_agrupador_w	:= '1';
		end if;
 
		select	coalesce(max(qt_conversao),1) 
		into STRICT	qt_conversao_w 
		from	material_conversao_unidade 
		where	cd_material			= cd_material_w 
		and	cd_unidade_medida		= cd_unidade_medida_w;
 
		hr_prim_horario_w	:= obter_primeiro_horario(cd_intervalo_w,nr_prescricao_w,cd_material_w,ie_via_aplicacao_w);
		 
		nr_intervalo_w	:= 0;
		ds_horarios_w	:= '';
		ds_horarios2_w	:= '';
		SELECT * FROM Calcular_Horario_Prescricao(	nr_prescricao_w, cd_intervalo_w, dt_prescricao_w, coalesce(to_date(hr_prim_horario_w, 'hh24:mi'), dt_prescricao_w), coalesce(nr_horas_validade_w,24), cd_material_w, 0, 0, nr_intervalo_w, ds_horarios_w, ds_horarios2_w, 'N', null) INTO STRICT nr_intervalo_w, ds_horarios_w, ds_horarios2_w;
						 
		qt_material_w	:=	qt_dose_w;
		SELECT * FROM Obter_Quant_Dispensar(	wheb_usuario_pck.get_cd_estabelecimento, cd_material_w, nr_prescricao_w, nr_seq_presc_material_w, cd_intervalo_w, ie_via_aplicacao_w, qt_dose_w, null, nr_intervalo_w, null, 'A', cd_unidade_medida_w, null, qt_material_w, qt_dispensar_w, ie_regra_disp_w, ds_erro_w, 'N', 'N') INTO STRICT qt_material_w, qt_dispensar_w, ie_regra_disp_w, ds_erro_w;
		 
		Insert	into Prescr_material(	 
			nr_prescricao, 
			nr_sequencia, 
			ie_origem_inf, 
			cd_material, 
			cd_unidade_medida_dose, 
			cd_unidade_medida, 
			qt_dose, 
			qt_unitaria, 
			qt_material, 
			dt_atualizacao, 
			nm_usuario, 
			cd_intervalo, 
			ds_observacao, 
			nr_seq_pe_proc, 
			ie_agrupador, 
			ie_medicacao_paciente, 
			ie_se_necessario, 
			ie_urgencia, 
			ie_suspenso, 
			ie_utiliza_kit, 
			ie_status_cirurgia, 
			ie_bomba_infusao, 
			ie_aplic_bolus, 
			ie_aplic_lenta, 
			ie_acm, 
			cd_motivo_baixa, 
			dt_baixa, 
			qt_conversao_dose, 
			ds_horarios, 
			nr_ocorrencia, 
			ie_via_aplicacao, 
			ie_recons_diluente_fixo, 
			ie_sem_aprazamento, 
			ie_cobra_paciente, 
			ie_intervalo_dif, 
			hr_prim_horario, 
			nr_agrupamento, 
			ds_justificativa, 
			qt_total_dispensar, 
			ie_regra_disp) 
		values (		 
			nr_prescricao_w, 
			nr_seq_presc_material_w, 
			'A', 
			cd_material_w, 
			cd_unidade_medida_w, 
			cd_unidade_medida_w, 
			qt_dose_w, 
			obter_conversao_unid_med_cons(cd_material_w, cd_unidade_medida_w, qt_dose_w), 
			qt_material_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_intervalo_w, 
			null, 
			null, 
			ie_agrupador_w, 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			'GI', 
			'N', 
			'N', 
			'N', 
			'N', 
			0, 
			null, 
			qt_conversao_w, 
			ds_horarios_w, 
			nr_intervalo_w, 
			ie_via_aplicacao_w, 
			'N', 
			'N',		 
			null, 
			null, 
			hr_prim_horario_w, 
			CASE WHEN ie_agrupador_w='1' THEN Obter_proximo_agrup_medic(nr_prescricao_w)  ELSE null END , 
			null, 
			qt_dispensar_w, 
			ie_regra_disp_w);
 
	end loop;
	close c01;
 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_prescricao_curativo (nr_seq_curativo_p bigint, nm_usuario_p text) FROM PUBLIC;

