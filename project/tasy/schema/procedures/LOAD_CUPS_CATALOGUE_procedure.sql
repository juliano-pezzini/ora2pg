-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE load_cups_catalogue () AS $body$
DECLARE

    qt_area_procedimento_w bigint;
    qt_especialidade_proc_w bigint;
    qt_grupo_proc_w bigint;
    qt_procedimento_w bigint;
    cd_area_procedimento_w bigint;
    cd_especialidade_proc_w bigint;
    cd_grupo_proc_w bigint;
    cd_area_procedimento_seq_w bigint;
    cd_especialidade_proc_seq_w bigint;
    cd_grupo_proc_seq_w bigint;
    cd_procedimento_seq_w bigint;
    cd_mapped_item_subgroup_ww varchar(5);
    ds_mapped_item_subgroup_ww varchar(255);
    cd_procedimento_exist_w bigint;
    qt_proc_versao_exist_w smallint;
    ds_details varchar(4000);
    ie_activate varchar(5);
    qt_procedimento_exist_w bigint;
    ds_error_w varchar(4000);
    qt_procedimento_active bigint;
    cd_procedimento_active boolean;

  c01 CURSOR FOR
    SELECT * from W_CUPS_CATALOG_BOLIVIA
    where ((substr(cd_2019,-1,1) not in (':')
    and substr(cd_2019,1,1) not in ('I','E')) or coalesce(cd_2019::text, '') = '')
    and cd_tracebility in ('1','2','3','4','6','7','8') order by cd_2018 asc;
  r1 c01%rowtype;



BEGIN
delete from W_CUPS_TRACE_BOLIVIA;
commit;
for r1 in c01
loop
ds_details := ' ';

if ((r1.ds_2018 IS NOT NULL AND r1.ds_2018::text <> '') or (r1.ds_2019 IS NOT NULL AND r1.ds_2019::text <> '')) then

    if (r1.CD_TRACEBILITY in ('6','7','8') and (r1.cd_2019 IS NOT NULL AND r1.cd_2019::text <> '')
	and length(r1.cd_2019) >= 6) then

          insert into W_CUPS_TRACE_BOLIVIA(
				  nr_sequencia,
				  dt_atualizacao,
				  nm_usuario,
				  dt_atualizacao_nrec,
				  nm_usuario_nrec,
				  cd_2018,
				  ds_2018,
				  cd_traceability,
        		  cd_2019,
				  ds_2019
				  )
				  values (
				  nextval('w_cups_trace_bolivia_seq'),
				  clock_timestamp(),
				  'TASY',
				  clock_timestamp(),
				  'TASY',
				  r1.cd_2018,
				  r1.ds_2018,
				  r1.cd_tracebility,
				  r1.cd_2019,
				  r1.ds_2019
				  );
       end if;


  if (length(r1.cd_2019) = 2 or (coalesce(r1.cd_2019::text, '') = '' and length(r1.cd_2018) = 2)) then
  begin
       if (r1.CD_TRACEBILITY in ('1','2','3','4','5','6','7','8')) then
            ds_details := substr(r1.DS_2019,1,40);
       end if;

       if (coalesce(r1.cd_2019::text, '') = '' and r1.cd_tracebility = '8') then
        r1.cd_2019 := r1.cd_2018;
       end if;

    
	   select count(*)
	   into STRICT qt_area_procedimento_w
	   from area_procedimento
	   where cd_sistema_ant=r1.CD_2018
	   AND ie_origem_proced=1;
		if (qt_area_procedimento_w=0) then
		  select max(cd_area_procedimento)+1
		  into STRICT cd_area_procedimento_seq_w
		  from area_procedimento;
			 begin
				insert into area_procedimento(
				cd_area_procedimento,
				cd_original,
				cd_sistema_ant,
				ds_area_procedimento,
				dt_atualizacao,
				dt_atualizacao_nrec,
				ie_origem_proced,
				nm_usuario,
				nm_usuario_nrec
				)
				values (
				cd_area_procedimento_seq_w,
				cd_area_procedimento_seq_w,
				r1.CD_2019,
                ds_details,
				clock_timestamp(),
				clock_timestamp(),
				1,
				'TASY',
				'TASY'
				);
			end;
		else
			update area_procedimento
			set ds_area_procedimento=ds_details,
			dt_atualizacao=clock_timestamp(),
			nm_usuario='TASY',
            cd_sistema_ant=r1.CD_2019
			where cd_sistema_ant=r1.CD_2018
		    and ie_origem_proced=1;
		end if;
  exception
	when others then
		ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.CD_2019) || chr(10);
  end;
  elsif (length(r1.cd_2019) = 3 or (coalesce(r1.cd_2019::text, '') = '' and length(r1.cd_2018) = 3)) then
    begin

        if (coalesce(r1.cd_2019::text, '') = '' and r1.cd_tracebility = '8') then
        r1.cd_2019 := r1.cd_2018;
       end if;

       if (r1.CD_TRACEBILITY in ('1','2','3','4','5','6','7','8')) then
       ds_details := substr(r1.DS_2019,1,40);
       end if;

		select count(*)
		into STRICT qt_especialidade_proc_w
		from especialidade_proc
		where cd_sistema_ant=r1.CD_2018
		and ie_origem_proced=1;
		if (qt_especialidade_proc_w=0) then
		  select max(cd_especialidade)+1
		  into STRICT cd_especialidade_proc_seq_w
		  from especialidade_proc;
		  select cd_area_procedimento
		  into STRICT cd_area_procedimento_w
		  from area_procedimento
		  where cd_sistema_ant=substr(r1.CD_2019,1,2)
          and ie_origem_proced=1;
			 begin
				insert into especialidade_proc(
				cd_area_procedimento,
				cd_especialidade,
				cd_especialidade_medica,
				cd_original,
				cd_sistema_ant,
				ds_especialidade,
				dt_atualizacao,
				dt_atualizacao_nrec,
				ie_origem_proced,
				nm_usuario,
				nm_usuario_nrec
				)
				values (
				cd_area_procedimento_w,
				cd_especialidade_proc_seq_w,
				null,
				cd_especialidade_proc_seq_w,
				r1.CD_2019,
				ds_details,
				clock_timestamp(),
				clock_timestamp(),
				1,
				'TASY',
				'TASY'
				);

			end;
		else
			update  especialidade_proc
			set 	ds_especialidade=ds_details,
					dt_atualizacao=clock_timestamp(),
					nm_usuario='TASY',
                    cd_sistema_ant=r1.CD_2019
			where   cd_sistema_ant=r1.CD_2018
			and     ie_origem_proced=1;

		end if;
    exception
	when others then
		ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.CD_2019) || chr(10);
    end;
elsif (length(r1.cd_2019) = 4 or (coalesce(r1.cd_2019::text, '') = '' and length(r1.cd_2018) = 4)) then
begin
       if (r1.CD_TRACEBILITY in ('1','2','3','4','5','6','7','8')) then
       ds_details := substr(r1.DS_2019,1,40);
       end if;

       if (coalesce(r1.cd_2019::text, '') = '' and r1.cd_tracebility = '8') then
        r1.cd_2019 := r1.cd_2018;
       end if;

		cd_mapped_item_subgroup_ww:= r1.CD_2018;
		ds_mapped_item_subgroup_ww := r1.DS_2019;
		select count(*)
		into STRICT qt_grupo_proc_w
		from grupo_proc
		where cd_sistema_ant=cd_mapped_item_subgroup_ww
        and ie_origem_proced=1;
		if (qt_grupo_proc_w=0) then
		   select max(cd_grupo_proc)+1
		   into STRICT cd_grupo_proc_seq_w
		   from grupo_proc;
		   select cd_especialidade
           into STRICT cd_especialidade_proc_w
           from especialidade_proc
           where cd_sistema_ant=substr(r1.CD_2019,1,3)
           and ie_origem_proced=1;
			begin
				insert into grupo_proc(
				cd_especialidade,
				cd_grupo_proc,
				cd_original,
				cd_sistema_ant,
				ds_grupo_proc,
				ds_observacao,
				dt_atualizacao,
				ie_origem_proced,
				ie_situacao,
				nm_usuario
				)
				values (
				cd_especialidade_proc_w,
				cd_grupo_proc_seq_w,
				cd_grupo_proc_seq_w,
				r1.CD_2019,
				ds_details,
				null,
				clock_timestamp(),
				1,
				'A',
				'TASY'
				);

			end;
		else
			update  grupo_proc
			set  	ds_grupo_proc=ds_details,
					dt_atualizacao=clock_timestamp(),
					nm_usuario='TASY',
                    cd_sistema_ant=r1.CD_2019
			where   cd_sistema_ant=cd_mapped_item_subgroup_ww
			and     ie_origem_proced=1;
		end if;
    exception
	when others then
		ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.CD_2019) || chr(10);
   end;
elsif (length(r1.cd_2019) >= 6 or (coalesce(r1.cd_2019::text, '') = '' and length(r1.cd_2018) = 6)) then
begin
       ie_activate := 'A';
       cd_procedimento_active := TRUE;

       select count(*)
       into STRICT qt_procedimento_exist_w
       from procedimento
       where cd_procedimento_loc= r1.cd_2018
	   and ie_origem_proced=1;

       if ((qt_procedimento_exist_w IS NOT NULL AND qt_procedimento_exist_w::text <> '') and r1.CD_TRACEBILITY = '5') then
        ie_activate := 'I';
       end if;

      if (coalesce(r1.cd_2019::text, '') = '' and r1.cd_tracebility = '8') then
        r1.cd_2019 := r1.cd_2018;
       end if;

       select count(*) 
       into STRICT qt_procedimento_active
       from procedimento_versao
       where ie_origem_proced = 1
       and cd_proc_previous = r1.cd_2019
       and (dt_vigencia_final IS NOT NULL AND dt_vigencia_final::text <> '');

       if (qt_procedimento_active > 0) then
            cd_procedimento_active := FALSE;
       end if;

    if (cd_procedimento_active) then
		select count(*)
		into STRICT qt_procedimento_w
		from procedimento
		where cd_procedimento_loc= r1.cd_2018
		and ie_origem_proced=1;
		if (qt_procedimento_w=0) then
			select nextval('procedimento_seq')
			into STRICT cd_procedimento_seq_w
			;
        	select cd_grupo_proc
			into STRICT cd_grupo_proc_w
			from grupo_proc
			where cd_sistema_ant=substr(r1.cd_2019,1,4)
			and ie_origem_proced=1  LIMIT 1;

            
			insert into procedimento(
					cd_procedimento,
					cd_procedimento_loc,
					cd_grupo_proc,
					ds_procedimento,
					ie_situacao,
					ie_sexo_sus,
					qt_idade_minima_sus,
					qt_idade_maxima_sus,
					ie_alta_complexidade,
					ie_ativ_prof_bpa,
					ie_localizador,
					ie_classificacao,
					ie_origem_proced,
					dt_atualizacao,
					nm_usuario,
					ie_gera_associado,
					ie_assoc_adep,
					ie_classif_custo,
					qt_exec_barra,
					ie_cobra_adep,
					ie_ignora_origem,
					ie_exige_autor_sus
					)
					values (
					cd_procedimento_seq_w,
					r1.cd_2019,
					cd_grupo_proc_w,
					r1.DS_2019,
					ie_activate,
					null,
					null,
					null,
					'N',
					'N',
					'S',
					1,
					1,
					clock_timestamp(),
					'TASY',
					'S',
					'S',
					'B',
					1,
					'S',
					'N',
					'N'
					);
			insert into procedimento_versao(
					  nr_sequencia,
					  dt_versao,
					  dt_atualizacao,
					  nm_usuario,
					  dt_atualizacao_nrec,
					  nm_usuario_nrec,
					  dt_vigencia_inicial,
					  dt_vigencia_final,
					  cd_procedimento,
					  ie_origem_proced,
					  cd_versao,
					  cd_proc_previous
					  )
					  values (
					  nextval('procedimento_versao_seq'),
					  null,
					  clock_timestamp(),
					  'TASY',
					  clock_timestamp(),
					  'TASY',
					  clock_timestamp(),
					  null,
					  cd_procedimento_seq_w,
					  1,
					  '2019',
					  r1.cd_2019
					  );
		else
			select count(*)
			into STRICT qt_proc_versao_exist_w
			from procedimento_versao
			where ie_origem_proced=1
			and cd_proc_previous = r1.cd_2018;
        if (qt_proc_versao_exist_w=0) then
			select cd_procedimento
			into STRICT cd_procedimento_exist_w
			from procedimento
			where cd_procedimento_loc = r1.cd_2019;
            insert into procedimento_versao(
					  nr_sequencia,
					  dt_versao,
					  dt_atualizacao,
					  nm_usuario,
					  dt_atualizacao_nrec,
					  nm_usuario_nrec,
					  dt_vigencia_inicial,
					  dt_vigencia_final,
					  cd_procedimento,
					  ie_origem_proced,
					  cd_versao,
					  cd_proc_previous
					  )
					  values (
					  nextval('procedimento_versao_seq'),
					  null,
					  clock_timestamp(),
					  'TASY',
					  clock_timestamp(),
					  'TASY',
					  clock_timestamp(),
                      null,
					  cd_procedimento_exist_w,
					  1,
					  '2019',
					  r1.cd_2019
					  );
          else
            update 	procedimento_versao
            set 	dt_vigencia_final = clock_timestamp()
            where 	ie_origem_proced=1
			and 	cd_proc_previous = r1.cd_2018;
          end if;
		end if;
    end if;
    exception
	when others then
		ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.CD_2019) || chr(10);
  end;
 end if;
if (ds_error_w IS NOT NULL AND ds_error_w::text <> '') then
	insert into mbs_import_log(dt_start,ie_status,ds_error) values (clock_timestamp(),'ECUPS',ds_error_w);
	ds_error_w := null;
else
      update mbs_import_log
      set dt_end = clock_timestamp()
      where ie_status = 'ICUPS'
      and coalesce(dt_end::text, '') = '';
end if;
EXIT WHEN NOT FOUND; /* apply on c01 */
end if;
end loop;
delete from W_CUPS_CATALOG_BOLIVIA;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE load_cups_catalogue () FROM PUBLIC;

