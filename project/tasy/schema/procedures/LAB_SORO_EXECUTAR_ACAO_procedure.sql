-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE lab_soro_executar_acao (nr_seq_armazem_rack_p bigint, ds_amostra_p text, nr_etiqueta_p text, nr_seq_acao_p bigint, ds_observacao_p text, nm_usuario_p text, ie_tipo_acao_p text, nr_seq_rack_p text, nr_seq_armazenamento_prim_p bigint, nr_seq_armazenamento_sec_p bigint, ie_divide_amostra_p text, ds_retorno_w INOUT text) AS $body$
DECLARE


c01 CURSOR FOR
  SELECT DISTINCT b.nr_prescricao, e.nr_seq_prescr, a.nr_seq_amostra_rack
    FROM lab_soro_exame_amostra a, prescr_procedimento b, exame_laboratorio c,
         lab_soro_amostra_rack d, exame_lab_result_item e
   WHERE a.nr_prescricao = b.nr_prescricao AND
         b.nr_sequencia = a.nr_seq_prescr AND
         b.nr_seq_exame = c.nr_seq_exame AND
         d.nr_sequencia = a.nr_seq_amostra_rack AND
         d.ds_amostra = ds_amostra_p AND
         b.nr_sequencia = e.nr_seq_prescr AND
         d.nr_seq_armazem_rack IN (SELECT DISTINCT a.nr_sequencia
                                     FROM lab_soro_armazena_rack a, lab_soro_rack b
                                    WHERE coalesce(b.ds_etiqueta,b.nr_etiqueta) = nr_etiqueta_p AND
                                          b.nr_sequencia = a.nr_seq_rack AND
                                          coalesce(a.nr_seq_descarte::text, '') = '');

    nr_seq_rack_w          lab_soro_armazena_rack.nr_seq_rack%TYPE;
    nr_seq_amostra_rack_w  lab_soro_amostra_rack.nr_sequencia%TYPE;
    nr_seq_armazena_rack_w lab_soro_armazena_rack.nr_sequencia%TYPE;
    nr_seq_amostra_w       lab_soro_amostra_rack.nr_sequencia%TYPE;
    ds_amostra_w           lab_soro_amostra_rack.ds_amostra%TYPE;
    nr_prescricao_w        prescr_procedimento.nr_prescricao%TYPE;
    nr_seq_prescr_w        exame_lab_result_item.nr_seq_prescr%TYPE;

BEGIN
    IF (ie_tipo_acao_p = 'RET') THEN
      IF (ds_amostra_p IS NOT NULL AND ds_amostra_p::text <> '' AND nr_etiqueta_p IS NOT NULL AND nr_etiqueta_p::text <> '') THEN
        BEGIN
          SELECT c.nr_seq_rack, a.nr_sequencia
            INTO STRICT nr_seq_rack_w, nr_seq_amostra_rack_w
            FROM lab_soro_amostra_rack a, lab_soro_rack b, lab_soro_armazena_rack c
           WHERE a.ds_amostra = ds_amostra_p AND
                 c.nr_sequencia = a.nr_seq_armazem_rack AND
                 b.nr_sequencia = c.nr_seq_rack AND
                 coalesce(c.nr_seq_descarte::text, '') = '' AND
                 coalesce(b.ds_etiqueta,b.nr_etiqueta) = nr_etiqueta_p;

          UPDATE lab_soro_amostra_rack
             SET dt_atualizacao = clock_timestamp(),
                 nm_usuario = nm_usuario_p,
                 nr_seq_descarte = nr_seq_acao_p,
                 ie_status = 'L'
           WHERE nr_sequencia = nr_seq_amostra_rack_w;

        EXCEPTION
          WHEN no_data_found THEN
               nr_seq_rack_w := NULL;
               nr_seq_amostra_rack_w := NULL;
        END;
      ELSE
        select MAX(a.nr_seq_rack), max(a.nr_sequencia)
          INTO STRICT nr_seq_rack_w, nr_seq_armazena_rack_w
          from lab_soro_armazena_rack a
         inner join lab_soro_rack b on b.nr_sequencia = a.nr_seq_rack and
                                       coalesce(b.ds_etiqueta,b.nr_etiqueta) = nr_etiqueta_p
         where coalesce(a.nr_seq_descarte::text, '') = '';

        UPDATE lab_soro_armazena_rack
           SET dt_atualizacao = clock_timestamp(),
               nm_usuario = nm_usuario_p,
               nr_seq_descarte = nr_seq_acao_p
         WHERE nr_sequencia = nr_seq_armazena_rack_w;

        UPDATE lab_soro_amostra_rack
           SET dt_atualizacao = clock_timestamp(),
               nm_usuario = nm_usuario_p,
               nr_seq_descarte = nr_seq_acao_p,
               ie_status = 'L'
         WHERE nr_seq_armazem_rack = nr_seq_armazena_rack_w;
      END IF;

      INSERT INTO lab_soro_processo_info(ie_acao,
                                          dt_acao,
                                          nr_seq_armazena_rack,
                                          nr_seq_amostra_rack,
                                          ds_observacao,
                                          nr_sequencia,
                                          dt_atualizacao,
                                          nm_usuario)
                                  VALUES ('D',
                                          clock_timestamp(),
                                          nr_seq_armazena_rack_w,
                                          nr_seq_amostra_rack_w,
                                          ds_observacao_p,
                                          nextval('lab_soro_processo_info_seq'),
                                          clock_timestamp(),
                                          nm_usuario_p);
    END IF;

    IF (ie_tipo_acao_p = 'MOV') THEN
      IF (ds_amostra_p IS NOT NULL AND ds_amostra_p::text <> '' AND nr_etiqueta_p IS NOT NULL AND nr_etiqueta_p::text <> '') THEN
        SELECT MAX(c.nr_seq_rack), MAX(a.nr_sequencia)
          INTO STRICT nr_seq_rack_w, nr_seq_amostra_rack_w
          FROM lab_soro_amostra_rack a, lab_soro_rack b, lab_soro_armazena_rack c
         WHERE a.ds_amostra = ds_amostra_p AND
               c.nr_sequencia = a.nr_seq_armazem_rack AND
               b.nr_sequencia = c.nr_seq_rack AND
               coalesce(b.ds_etiqueta,b.nr_etiqueta) = nr_etiqueta_p;

        UPDATE lab_soro_armazena_rack
           SET nr_seq_armazenamento_prim = nr_seq_armazenamento_prim_p,
               nr_seq_armazenamento_sec = nr_seq_armazenamento_sec_p,
               nr_seq_movimentacao = nr_seq_acao_p,
               ie_status = 'M',
               nm_usuario = nm_usuario_p,
               dt_atualizacao = clock_timestamp()
         WHERE nr_sequencia = nr_seq_armazena_rack_w;

        UPDATE lab_soro_amostra_rack
           SET ie_status = 'L',
               nm_usuario = nm_usuario_p,
               dt_atualizacao = clock_timestamp(),
               ds_amostra = ' '
         WHERE nr_sequencia = nr_seq_amostra_rack_w;

        BEGIN
          SELECT nr_sequencia, ds_posicao, ds_amostra
            INTO STRICT nr_seq_amostra_w, ds_retorno_w, ds_amostra_w
            FROM (SELECT MIN(a.nr_sequencia) nr_sequencia,
                         a.nr_pos_linha || '-' || a.nr_pos_coluna ds_posicao,
                         a.ds_amostra ds_amostra
                    FROM lab_soro_amostra_rack a, lab_soro_armazena_rack b
                   WHERE a.ie_status = 'L' AND
                         b.nr_seq_rack = nr_seq_rack_p AND
                         a.nr_seq_armazem_rack = b.nr_sequencia
                   GROUP BY a.nr_pos_linha, a.nr_pos_coluna, a.ds_amostra,
                            a.nr_pos_linha || '-' || a.nr_pos_coluna
                   ORDER BY a.nr_pos_linha, a.nr_pos_coluna) alias1 LIMIT 1;

        EXCEPTION
          WHEN no_data_found THEN
            CALL wheb_mensagem_pck.exibir_mensagem_abort(1026186);
        END;

        UPDATE lab_soro_amostra_rack
           SET ie_status = 'O',
               ds_amostra = ds_amostra_p,
               nm_usuario = nm_usuario_p,
               nr_seq_movimentacao = nr_seq_acao_p,
               ds_observacao = CASE WHEN ds_amostra_w=' ' THEN ''  ELSE obter_desc_expressao(341002) || ds_amostra_w END ,
               dt_atualizacao = clock_timestamp()
         WHERE nr_sequencia = nr_seq_amostra_w;

        ds_retorno_w := obter_desc_expressao(882111) || ds_retorno_w;
      ELSE
        select MAX(a.nr_seq_rack), max(a.nr_sequencia)
          INTO STRICT nr_seq_rack_w, nr_seq_armazena_rack_w
          from lab_soro_armazena_rack a
         inner join lab_soro_rack b on b.nr_sequencia = a.nr_seq_rack and
                               coalesce(b.ds_etiqueta,b.nr_etiqueta) = nr_etiqueta_p
         where coalesce(a.nr_seq_descarte::text, '') = '';

        UPDATE lab_soro_armazena_rack
           SET nr_seq_armazenamento_prim = nr_seq_armazenamento_prim_p,
               nr_seq_armazenamento_sec = nr_seq_armazenamento_sec_p,
               nr_seq_movimentacao = nr_seq_acao_p,
               ie_status = 'M',
               nm_usuario = nm_usuario_p,
               dt_atualizacao = clock_timestamp()
         WHERE nr_sequencia = nr_seq_armazena_rack_w;

        ds_retorno_w := obter_desc_expressao(503283);
      END IF;

      INSERT INTO lab_soro_processo_info(ie_acao,
                                          dt_acao,
                                          nr_seq_armazena_rack,
                                          nr_seq_amostra_rack,
                                          ds_observacao,
                                          nr_sequencia,
                                          dt_atualizacao,
                                          nm_usuario)
                                  VALUES ('M',
                                          clock_timestamp(),
                                          nr_seq_armazena_rack_w,
                                          nr_seq_amostra_rack_w,
                                          ds_observacao_p,
                                          nextval('lab_soro_processo_info_seq'),
                                          clock_timestamp(),
                                          nm_usuario_p);
    END IF;

    IF (ie_tipo_acao_p = 'REP') THEN
      BEGIN
        open c01;
          loop
            fetch c01 into
              nr_prescricao_w,
              nr_seq_prescr_w,
              nr_seq_amostra_rack_w;
            EXIT WHEN NOT FOUND; /* apply on c01 */
            begin
              CALL alterar_status_repeticao_js(nr_prescricao_w,nr_seq_prescr_w,'N',nm_usuario_p);
            end;
          end loop;
        close c01;

      EXCEPTION
        WHEN no_data_found THEN
          CALL wheb_mensagem_pck.exibir_mensagem_abort(1026186);
      END;

      IF (ie_divide_amostra_p = 'N') THEN
        UPDATE lab_soro_amostra_rack
           SET dt_atualizacao = clock_timestamp(),
               nm_usuario = nm_usuario_p,
               ie_status = 'L',
               ds_amostra = ' '
         WHERE nr_sequencia = nr_seq_amostra_rack_w;
      else
        UPDATE lab_soro_amostra_rack
           SET dt_atualizacao = clock_timestamp(),
               nm_usuario = nm_usuario_p,
               ds_observacao = obter_desc_expressao(882962)
         WHERE nr_sequencia = nr_seq_amostra_rack_w;
      END IF;

      INSERT INTO lab_soro_processo_info(ie_acao,
                                          dt_acao,
                                          nr_seq_armazena_rack,
                                          nr_seq_amostra_rack,
                                          ds_observacao,
                                          nr_sequencia,
                                          dt_atualizacao,
                                          nm_usuario)
                                  VALUES ('R',
                                          clock_timestamp(),
                                          nr_seq_armazena_rack_w,
                                          nr_seq_amostra_rack_w,
                                          ds_observacao_p,
                                          nextval('lab_soro_processo_info_seq'),
                                          clock_timestamp(),
                                          nm_usuario_p);

      ds_retorno_w := obter_desc_expressao(503283);
    END IF;
    COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE lab_soro_executar_acao (nr_seq_armazem_rack_p bigint, ds_amostra_p text, nr_etiqueta_p text, nr_seq_acao_p bigint, ds_observacao_p text, nm_usuario_p text, ie_tipo_acao_p text, nr_seq_rack_p text, nr_seq_armazenamento_prim_p bigint, nr_seq_armazenamento_sec_p bigint, ie_divide_amostra_p text, ds_retorno_w INOUT text) FROM PUBLIC;

