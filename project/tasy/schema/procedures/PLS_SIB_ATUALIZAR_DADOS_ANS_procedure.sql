-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_sib_atualizar_dados_ans ( nr_seq_lote_p pls_sib_conferencia_lote.nr_sequencia%type, nr_seq_conferencia_p pls_sib_conferencia.nr_sequencia%type, cd_atributo_p pls_sib_reenvio_atrib.cd_atributo%type, ie_benef_filtro_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


ie_benef_filtro_w	varchar(1);

C01 CURSOR(	nr_seq_conferencia_pc	pls_sib_conferencia.nr_sequencia%type,
		nr_seq_lote_pc		pls_sib_conferencia_lote.nr_sequencia%type,
		ie_benef_filtro_pc	text) FOR
	SELECT	a.nr_sequencia		nr_seq_conferencia,
		b.nr_sequencia		nr_seq_segurado,
		a.nm_beneficiario,
		c.nm_pessoa_fisica,
		c.cd_pessoa_fisica,
		c.dt_nascimento		dt_nascimento_pessoa,
		a.dt_nascimento		dt_nascimento_conferencia,
		c.nr_cpf		nr_cpf_pessoa,
		a.nr_cpf		nr_cpf_conferencia,
		obter_nome_contato(c.cd_pessoa_fisica, 5) nm_mae_pessoa,
		a.nm_mae		nm_mae_conferencia,
		c.nr_cartao_nac_sus	nr_cns_pessoa,
		a.cd_cns		nr_cns_conferencia,
		c.ie_sexo		ie_sexo_pessoa,
		CASE WHEN a.ie_sexo=1 THEN 'M' WHEN a.ie_sexo=3 THEN 'F'  ELSE '' END 	ie_sexo_conferencia,
		a.nr_cco		nr_cco_conferencia,
		b.cd_cco		nr_cco_segurado
	from	pls_sib_conferencia	a,
		pls_segurado		b,
		pessoa_fisica		c
	where	a.nr_seq_lote		= nr_seq_lote_pc
	and	b.nr_sequencia		= a.nr_seq_segurado
	and	c.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	((a.nr_sequencia = nr_seq_conferencia_pc) or (coalesce(nr_seq_conferencia_pc::text, '') = ''))
	and	(a.nr_seq_segurado IS NOT NULL AND a.nr_seq_segurado::text <> '')
	and	ie_benef_filtro_pc	= 'N'
	
union

	SELECT	a.nr_sequencia		nr_seq_conferencia,
		b.nr_sequencia		nr_seq_segurado,
		a.nm_beneficiario,
		c.nm_pessoa_fisica,
		c.cd_pessoa_fisica,
		c.dt_nascimento		dt_nascimento_pessoa,
		a.dt_nascimento		dt_nascimento_conferencia,
		c.nr_cpf		nr_cpf_pessoa,
		a.nr_cpf		nr_cpf_conferencia,
		obter_nome_contato(c.cd_pessoa_fisica, 5) nm_mae_pessoa,
		a.nm_mae		nm_mae_conferencia,
		c.nr_cartao_nac_sus	nr_cns_pessoa,
		a.cd_cns		nr_cns_conferencia,
		c.ie_sexo		ie_sexo_pessoa,
		CASE WHEN a.ie_sexo=1 THEN 'M' WHEN a.ie_sexo=3 THEN 'F'  ELSE '' END 	ie_sexo_conferencia,
		a.nr_cco		nr_cco_conferencia,
		b.cd_cco		nr_cco_segurado
	from	pls_sib_conferencia	a,
		pls_segurado		b,
		pessoa_fisica		c
	where	a.nr_seq_lote		= nr_seq_lote_pc
	and	b.nr_sequencia		= a.nr_seq_segurado
	and	c.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	((a.nr_sequencia = nr_seq_conferencia_pc) or (coalesce(nr_seq_conferencia_pc::text, '') = ''))
	and	(a.nr_seq_segurado IS NOT NULL AND a.nr_seq_segurado::text <> '')
	and	ie_benef_filtro_pc	= 'S'
	and	(a.nr_ordem IS NOT NULL AND a.nr_ordem::text <> '');

BEGIN

ie_benef_filtro_w	:= coalesce(ie_benef_filtro_p, 'N');

if (cd_atributo_p IS NOT NULL AND cd_atributo_p::text <> '') then
	CALL wheb_usuario_pck.set_ie_executar_trigger('N');
	
	begin
	for r_c01_w in c01(	nr_seq_conferencia_p,
				nr_seq_lote_p,
				ie_benef_filtro_w) loop
		begin
		if (cd_atributo_p = 1) then -- Nome do beneficiario
			if (coalesce(r_c01_w.nm_beneficiario, r_c01_w.nm_pessoa_fisica) <> r_c01_w.nm_pessoa_fisica) then
				update	pessoa_fisica
				set	nm_pessoa_fisica	= r_c01_w.nm_beneficiario,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	cd_pessoa_fisica	= r_c01_w.cd_pessoa_fisica;
				
				CALL pls_gerar_segurado_historico(	r_c01_w.nr_seq_segurado, '101', clock_timestamp(), wheb_mensagem_pck.get_texto(1105606,'NM_ANTERIOR='||r_c01_w.nm_pessoa_fisica||';NM_NOVO='||r_c01_w.nm_beneficiario),
								'pls_sib_atualizar_dados_ans', null, null, null,
								null, null, null, null,
								null, null, null, null,
								nm_usuario_p, 'N');
			end if;
			
			update	pls_sib_segurado
			set	nm_beneficiario	= r_c01_w.nm_beneficiario,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_seq_segurado	= r_c01_w.nr_seq_segurado;
			
		elsif (cd_atributo_p = 2) then -- Data de nascimento do beneficiario
			if	((coalesce(r_c01_w.dt_nascimento_conferencia, r_c01_w.dt_nascimento_pessoa) <> r_c01_w.dt_nascimento_pessoa) and (r_c01_w.dt_nascimento_pessoa IS NOT NULL AND r_c01_w.dt_nascimento_pessoa::text <> '')) then
				update	pessoa_fisica
				set	dt_nascimento		= r_c01_w.dt_nascimento_conferencia,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	cd_pessoa_fisica	= r_c01_w.cd_pessoa_fisica;
				
				CALL pls_gerar_segurado_historico(	r_c01_w.nr_seq_segurado, '101', clock_timestamp(), wheb_mensagem_pck.get_texto(1105607, 'DT_NASC_ANT='|| r_c01_w.dt_nascimento_pessoa ||';DT_NASC_NOVA='||r_c01_w.dt_nascimento_conferencia),
								'pls_sib_atualizar_dados_ans', null, null, null,
								null, null, null, null,
								null, null, null, null,
								nm_usuario_p, 'N');
			end if;
			
			update	pls_sib_segurado
			set	dt_nascimento	= r_c01_w.dt_nascimento_conferencia,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_seq_segurado	= r_c01_w.nr_seq_segurado;
			
		elsif (cd_atributo_p = 3) then -- Sexo do beneficiario
			if (coalesce(r_c01_w.ie_sexo_conferencia, r_c01_w.ie_sexo_pessoa) <> r_c01_w.ie_sexo_pessoa) then
				update	pessoa_fisica
				set	ie_sexo			= r_c01_w.ie_sexo_conferencia,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	cd_pessoa_fisica	= r_c01_w.cd_pessoa_fisica;
				
				CALL pls_gerar_segurado_historico(	r_c01_w.nr_seq_segurado, '101', clock_timestamp(), wheb_mensagem_pck.get_texto(1105608, 'IE_SEXO_ANT='|| r_c01_w.ie_sexo_pessoa ||';IE_SEXO_NOVO='||r_c01_w.ie_sexo_conferencia),
								'pls_sib_atualizar_dados_ans', null, null, null,
								null, null, null, null,
								null, null, null, null,
								nm_usuario_p, 'N');
			end if;
			
			update	pls_sib_segurado
			set	cd_sexo		= CASE WHEN r_c01_w.ie_sexo_conferencia='M' THEN 1 WHEN r_c01_w.ie_sexo_conferencia='F' THEN 3  ELSE cd_sexo END ,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_seq_segurado	= r_c01_w.nr_seq_segurado;
			
		elsif (cd_atributo_p = 4) then -- Numero do CPF do beneficiario
			if	((coalesce(r_c01_w.nr_cpf_conferencia, r_c01_w.nr_cpf_pessoa) <> r_c01_w.nr_cpf_pessoa) and (r_c01_w.nr_cpf_pessoa IS NOT NULL AND r_c01_w.nr_cpf_pessoa::text <> '')) then
				update	pessoa_fisica
				set	nr_cpf			= r_c01_w.nr_cpf_conferencia,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	cd_pessoa_fisica	= r_c01_w.cd_pessoa_fisica;
				
				CALL pls_gerar_segurado_historico(	r_c01_w.nr_seq_segurado, '101', clock_timestamp(), wheb_mensagem_pck.get_texto(1105609,'NR_CPF_ANT='|| r_c01_w.nr_cpf_pessoa ||';NR_CPF_NOVO='||r_c01_w.nr_cpf_conferencia),
								'pls_sib_atualizar_dados_ans', null, null, null,
								null, null, null, null,
								null, null, null, null,
								nm_usuario_p, 'N');
			end if;
			
			update	pls_sib_segurado
			set	nr_cpf		= r_c01_w.nr_cpf_conferencia,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_seq_segurado	= r_c01_w.nr_seq_segurado;
			
		elsif (cd_atributo_p = 6) then -- Nome da mae do beneficiario
			if	((coalesce(r_c01_w.nm_mae_conferencia, r_c01_w.nm_mae_pessoa) <> r_c01_w.nm_mae_pessoa) and (r_c01_w.nm_mae_pessoa IS NOT NULL AND r_c01_w.nm_mae_pessoa::text <> '')) then
				update	compl_pessoa_fisica
				set	nm_contato		= r_c01_w.nm_mae_conferencia,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	cd_pessoa_fisica	= r_c01_w.cd_pessoa_fisica
				and	ie_tipo_complemento = 5;
				
				CALL pls_gerar_segurado_historico(	r_c01_w.nr_seq_segurado, '101', clock_timestamp(), wheb_mensagem_pck.get_texto(1105611, 'NM_MAE_ANT='|| r_c01_w.nm_mae_pessoa ||';NM_MAE_NOVO='||r_c01_w.nm_mae_conferencia),
								'pls_sib_atualizar_dados_ans', null, null, null,
								null, null, null, null,
								null, null, null, null,
								nm_usuario_p, 'N');
			end if;
			
			update	pls_sib_segurado
			set	nm_mae		= r_c01_w.nm_mae_conferencia,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_seq_segurado	= r_c01_w.nr_seq_segurado;
			
		elsif (cd_atributo_p = 7) then -- Numero do Cartao Nacional de Saude
			if	(((coalesce(r_c01_w.nr_cns_conferencia, r_c01_w.nr_cns_pessoa) <> r_c01_w.nr_cns_pessoa) or
				((coalesce(r_c01_w.nr_cns_pessoa::text, '') = '') and (r_c01_w.nr_cns_conferencia IS NOT NULL AND r_c01_w.nr_cns_conferencia::text <> ''))) and (coalesce(r_c01_w.nr_cns_conferencia, 0) > 0)) then
				update	pessoa_fisica
				set	nr_cartao_nac_sus	= r_c01_w.nr_cns_conferencia,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	cd_pessoa_fisica	= r_c01_w.cd_pessoa_fisica;
				
				CALL pls_gerar_segurado_historico(	r_c01_w.nr_seq_segurado, '101', clock_timestamp(), wheb_mensagem_pck.get_texto(1105613, 'NR_CNS_ANT='|| r_c01_w.nr_cns_pessoa ||';NR_CNS_NOVO='||r_c01_w.nr_cns_conferencia),
								'pls_sib_atualizar_dados_ans', null, null, null,
								null, null, null, null,
								null, null, null, null,
								nm_usuario_p, 'N');
			end if;
			
			update	pls_sib_segurado
			set	nr_cns		= r_c01_w.nr_cns_conferencia,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_seq_segurado	= r_c01_w.nr_seq_segurado;
			
		elsif (cd_atributo_p = 30) then -- CCO - Codigo de Controle Operacional
			if (coalesce(r_c01_w.nr_cco_conferencia, r_c01_w.nr_cco_segurado) <> r_c01_w.nr_cco_segurado or coalesce(r_c01_w.nr_cco_segurado::text, '') = '') then
				update	pls_segurado
				set	cd_cco		= r_c01_w.nr_cco_conferencia,
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= r_c01_w.nr_seq_segurado;
				
				CALL pls_gerar_segurado_historico(	r_c01_w.nr_seq_segurado, '101', clock_timestamp(), wheb_mensagem_pck.get_texto(1187110, 'CD_CCO_ANT='|| r_c01_w.nr_cco_segurado ||';CD_CCO_NOVO='||r_c01_w.nr_cco_conferencia),
								'pls_sib_atualizar_dados_ans', null, null, null,
								null, null, null, null,
								null, null, null, null,
								nm_usuario_p, 'N');
			end if;
		end if;
		
		if	((ie_benef_filtro_w = 'S') or (nr_seq_conferencia_p IS NOT NULL AND nr_seq_conferencia_p::text <> '')) then
			pls_consistir_conferencia_pck.consistir_conferencia(nr_seq_lote_p, r_c01_w.nr_seq_conferencia, nm_usuario_p);
		end if;
		end;
	end loop;
	exception
	when others then
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(215669,'DS_ERRO='||sqlerrm(SQLSTATE));
	end;
	
	if	((ie_benef_filtro_w = 'N') and (coalesce(nr_seq_conferencia_p::text, '') = '')) then
		pls_consistir_conferencia_pck.consistir_conferencia(nr_seq_lote_p, null, nm_usuario_p);
	end if;
	
	CALL wheb_usuario_pck.set_ie_executar_trigger('S');
	
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sib_atualizar_dados_ans ( nr_seq_lote_p pls_sib_conferencia_lote.nr_sequencia%type, nr_seq_conferencia_p pls_sib_conferencia.nr_sequencia%type, cd_atributo_p pls_sib_reenvio_atrib.cd_atributo%type, ie_benef_filtro_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

