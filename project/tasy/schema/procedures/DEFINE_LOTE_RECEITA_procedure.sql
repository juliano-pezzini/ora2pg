-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE define_lote_receita ( nr_lote_contabil_p bigint, nm_usuario_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


dt_referencia_w			timestamp;
dt_mesano_inicial_w		timestamp;
dt_mesano_final_w			timestamp;
cd_convenio_w			convenio.cd_convenio%type;
ds_protocolo_w			varchar(8000);
ds_protocolo_ww			varchar(4000);
ds_protocolo_compl_w		varchar(4000);
nr_lote_contabil_w			bigint	:= 0;	
cd_estabelecimento_w		smallint;
qt_registro_w			bigint		:= 0;
protocolos_w			dbms_sql.number_table;
nr_seq_protocolo_w      conta_paciente.nr_seq_protocolo%type;
nr_seq_protocolos_w     varchar(4000);

BEGIN

select	dt_referencia,
	cd_estabelecimento
into STRICT	dt_referencia_w,
	cd_estabelecimento_w
from	Lote_Contabil
where	nr_lote_contabil	= nr_lote_contabil_p;

ds_retorno_p		:= null;
dt_mesano_inicial_w	:= trunc(dt_referencia_w, 'month');
dt_mesano_final_w	:= last_day(trunc(dt_referencia_w, 'month')) + 86399/86400;

/* Leitura para identificar o convenio a ser contabilizado*/

begin
select	max(coalesce(vl_parametro,0))
into STRICT	cd_convenio_w
from	lote_contabil_parametro
where	nr_lote_contabil		= nr_lote_contabil_p
and	nr_seq_parametro		= 3;
exception when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1009381);
end;

/* Leitura para identificar os protocolos */

select	substr(ds_valor_parametro,1,4000) ds_protocolo,
	substr(ds_valor_parametro_compl,1,4000) ds_protocolo_compl
into STRICT	ds_protocolo_ww,
	ds_protocolo_compl_w
from	lote_contabil_parametro
where	nr_lote_contabil		= nr_lote_contabil_p
and	nr_seq_parametro		= 9;

ds_protocolo_w	:= ds_protocolo_ww;

if (trim(both ds_protocolo_compl_w) <> '') then
	ds_protocolo_w	:= substr(ds_protocolo_ww || ',' || ds_protocolo_compl_w,1,8000);
end if;

protocolos_w	:= string_to_table_number(ds_protocolo_w,',');

if (protocolos_w.Count > 0) then
	begin
	
	delete	FROM lote_contabil_param_item
	where	nr_lote_contabil	= nr_lote_contabil_p
	and	nr_seq_parametro	= 9;
	nr_seq_protocolos_w := null;
	for i in 1..protocolos_w.Count loop
		begin
		insert into lote_contabil_param_item(
			nr_sequencia,
			nr_lote_contabil,
			cd_tipo_lote_contabil,
			nr_seq_parametro,
			nr_documento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec)
		values (	nextval('lote_contabil_param_item_seq'),
			nr_lote_contabil_p,
			6,
			9,
			protocolos_w(i),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p);

			select  coalesce(max(a.nr_lote_contabil),0)
			into STRICT    nr_lote_contabil_w
			from    conta_paciente a
			where   a.nr_seq_protocolo = protocolos_w(i)
			and 	coalesce(a.nr_lote_contabil,0) <> 0;

            	if (nr_lote_contabil_w IS NOT NULL AND nr_lote_contabil_w::text <> '') then
            		nr_seq_protocolos_w := substr(nr_seq_protocolos_w || protocolos_w(i) || chr(13)||chr(10),1,3900);
            	end if;	
		end;
	end loop;
	commit;

	if (nr_lote_contabil_w <> 0) then
		nr_seq_protocolos_w := substr(chr(13)||chr(10)||nr_seq_protocolos_w,1,3900);
        	CALL wheb_mensagem_pck.exibir_mensagem_abort(1133538, 'NR_SEQ_PROTOCOLOS='|| nr_seq_protocolos_w);
	end if;
	
	select	count(b.nr_seq_protocolo)
	into STRICT	qt_registro_w
	from	lote_contabil_param_item a,
		protocolo_convenio b
	where	b.nr_seq_protocolo	= a.nr_documento
	and	a.nr_lote_contabil	= nr_lote_contabil_p
	and	a.cd_tipo_lote_contabil	= 6
	and	a.nr_seq_parametro	= 9
	and	b.ie_status_protocolo	= 1;
	
	if (qt_registro_w > 0 ) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(194967);				
	end if;
	
	select	count(b.nr_seq_protocolo)
	into STRICT	qt_registro_w
	from	lote_contabil_param_item p,
		pre_fatur_perda_conta c,
		conta_paciente a,
		protocolo_convenio b
	where	a.nr_seq_protocolo 	= b.nr_seq_protocolo
	and   	a.nr_interno_conta = c.nr_interno_conta
	and 	b.nr_seq_protocolo = p.nr_documento
	and	p.nr_lote_contabil	= nr_lote_contabil_p
	and	p.cd_tipo_lote_contabil	= 6
	and	p.nr_seq_parametro	= 9;
					
	if (qt_registro_w > 0) then
		ds_retorno_p	:= wheb_mensagem_pck.get_texto(306668, null);
						/*	Existem contas que estao vinculadas em um protocolo de perda!
							 Este protocolo nao pode entrar no lote de receitas!	*/
	end if;
					
	end;
elsif (protocolos_w.Count = 0) and (coalesce(cd_convenio_w,0) = 0) then
	begin
	ds_retorno_p	:= wheb_mensagem_pck.get_texto(306669, null); -- Nao foram informados parametros
	end;
end if;

if (coalesce(ds_retorno_p::text, '') = '') then
	begin
	if (cd_convenio_w	> 0) then
		begin
		update	conta_paciente b
		set	b.nr_lote_contabil	 = nr_lote_contabil_p
		where	exists (	SELECT	1
				from	protocolo_convenio a
				where	a.nr_seq_protocolo	= b.nr_seq_protocolo
				and	coalesce(a.nr_seq_lote_receita,0) = 0
				and	a.ie_status_protocolo	= 2
				and	a.cd_convenio		= cd_convenio_w
				and	a.cd_estabelecimento	= cd_estabelecimento_w
				and	a.dt_mesano_referencia	between dt_mesano_inicial_w and dt_mesano_final_w)
		and	coalesce(b.nr_lote_contabil,0)	= 0;
		
		commit;
		exception when others then
			ds_retorno_p	:= 	wheb_mensagem_pck.get_texto(305028)||SQLERRM(SQLSTATE);
		end;
	elsif (ds_protocolo_w IS NOT NULL AND ds_protocolo_w::text <> '') then
		begin
		for i in 1..protocolos_w.Count loop
			begin
			update	conta_paciente a
			set	a.nr_lote_contabil	= nr_lote_contabil_p
			where	a.nr_seq_protocolo	= protocolos_w(i)
			and	coalesce(a.nr_lote_contabil,0) = 0
			and	a.ie_status_acerto	= 2
			and	exists (	SELECT	1
					from	protocolo_convenio p
					where	p.nr_seq_protocolo	= a.nr_seq_protocolo
					and	coalesce(p.nr_seq_lote_receita,0) = 0
					and	p.ie_status_protocolo	= 2
					and	p.cd_estabelecimento	= cd_estabelecimento_w);
			exception when others then
				ds_retorno_p	:= 	wheb_mensagem_pck.get_texto(305028)||SQLERRM(SQLSTATE);
			end;
		end loop;
		commit;
		end;
	end if;	
	
	update	procedimento_paciente p
	set 	p.nr_lote_contabil	=  nr_lote_contabil_p
	where	exists (
		SELECT 	1
		from	conta_paciente c
		where	c.nr_lote_contabil	= nr_lote_contabil_p
		and	c.nr_interno_conta	= p.nr_interno_conta)
	and	(p.nr_interno_conta IS NOT NULL AND p.nr_interno_conta::text <> '');
	commit;
	
	update	material_Atend_paciente m
	set 	m.nr_lote_contabil	=  nr_lote_contabil_p
	where	exists (
		SELECT 	1
		from	conta_paciente c
		where	c.nr_lote_contabil	= nr_lote_contabil_p
		and	c.nr_interno_conta	= m.nr_interno_conta)
	and	(m.nr_interno_conta IS NOT NULL AND m.nr_interno_conta::text <> '');
	
	commit;
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE define_lote_receita ( nr_lote_contabil_p bigint, nm_usuario_p text, ds_retorno_p INOUT text) FROM PUBLIC;

