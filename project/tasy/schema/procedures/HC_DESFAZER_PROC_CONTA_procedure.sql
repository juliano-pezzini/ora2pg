-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hc_desfazer_proc_conta (nr_seq_agenda_p text, nm_usuario_p text) AS $body$
DECLARE

 
 
nr_atendimento_w	bigint;	
cd_procedimento_w	bigint;	
ie_origem_proced_w	bigint;
nr_sequencia_w		bigint;
nr_conta_fechada_w	bigint;	
ds_observacao_w		varchar(255);
nr_seq_agenda_w		varchar(10);
ie_excluir_proc_w	varchar(1);
ie_conta_vazia_w	varchar(1);
		
C01 CURSOR FOR 
	SELECT	d.nr_atendimento_origem,		 
		c.cd_procedimento, 
		c.ie_origem_proced		 
	FROM paciente_home_care d, agenda_hc_paciente b, hc_agenda_prof a
LEFT OUTER JOIN hc_profissional c ON (a.nr_seq_prof_hc = c.nr_sequencia)
WHERE a.nr_seq_agenda = b.nr_sequencia  and b.nr_seq_paciente_hc = d.nr_sequencia and b.nr_sequencia 	 = nr_seq_agenda_p and (c.cd_procedimento IS NOT NULL AND c.cd_procedimento::text <> '');
	
C02 CURSOR FOR 
	SELECT	d.nr_atendimento_origem,		 
		e.cd_procedimento, 
		e.ie_origem_proced		 
	FROM hc_profissional_proc e, paciente_home_care d, agenda_hc_paciente b, hc_agenda_prof a
LEFT OUTER JOIN hc_profissional c ON (a.nr_seq_prof_hc = c.nr_sequencia)
WHERE a.nr_seq_agenda = b.nr_sequencia  and c.nr_sequencia = e.nr_seq_profissional and b.nr_seq_paciente_hc = d.nr_sequencia and b.nr_sequencia 	 = nr_seq_agenda_p and (e.cd_procedimento IS NOT NULL AND e.cd_procedimento::text <> '');

C03 CURSOR FOR 
	SELECT	nr_sequencia, 
		ds_observacao 
	from	procedimento_paciente 
	where	nr_atendimento = nr_atendimento_w 
	and	cd_procedimento = cd_procedimento_w 
	and	ie_origem_proced = ie_origem_proced_w;


BEGIN 
ie_conta_vazia_w := 'N';
ie_excluir_proc_w := 'N';
open C01;
loop 
fetch C01 into	 
	nr_atendimento_w, 
	cd_procedimento_w, 
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	open C03;
	loop 
	fetch C03 into	 
		nr_sequencia_w, 
		ds_observacao_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		nr_seq_agenda_w := substr(substr(ds_observacao_w,position(':'  ds_observacao_w)+1,length(ds_observacao_w)), 1, 10);
		 
		if (obter_somente_numero(nr_seq_agenda_w) = obter_somente_numero(nr_seq_agenda_p)) then 
			ie_excluir_proc_w := 'S';
		else 
			ie_excluir_proc_w := 'N';
		end if;
		 
		if (ie_excluir_proc_w = 'S') then 
			 
			ie_conta_vazia_w := 'S';
			 
			select	count(*) 
			into STRICT	nr_conta_fechada_w 
			from	conta_paciente 
			where	nr_interno_conta in ( 
				SELECT	nr_interno_conta 
				from	procedimento_paciente 
				where	nr_sequencia		= nr_sequencia_w 
				
union
 
				SELECT	nr_interno_conta 
				from	procedimento_paciente 
				where	nr_seq_proc_princ	= nr_sequencia_w) 
			and	ie_status_acerto = 2;
 
			if (nr_conta_fechada_w > 0) then 
				-- 'Existem contas fechadas para este procedimento!'); 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(189629);
			else	 
				/*Realizar o delete cascade pela propaci_propaci_fk da Procedimento_paciente. Evitando o problema de filhos do procedimento também possuirem filhos. */
 
				CALL Deletar_propaci_propaci(nr_sequencia_w,null);
				 
				--Caso precizar sem delete cascade 
				 
				/*delete	from material_atend_paciente 
				where	nr_seq_proc_princ	= nr_sequencia_w; 
 
				open	c02; 
				loop 
				fetch	c02 into 
					nr_seq_w; 
				exit when c02%notfound; 
					delete	from material_atend_paciente 
					where	nr_seq_proc_princ	= nr_seq_w; 
				end loop; 
				close c02; 
				 
				update	procedimento_paciente 
				set	nm_usuario	= nm_usuario_p 
				where	nr_seq_proc_princ	= nr_sequencia_w; 
				 
				delete	from procedimento_paciente 
				where	nr_seq_proc_princ	= nr_sequencia_w; 
				 
				update	procedimento_paciente 
				set	nm_usuario	= nm_usuario_p 
				where	nr_sequencia	= nr_sequencia_w; 
 
				delete	from procedimento_paciente 
				where	nr_sequencia		= nr_sequencia_w;*/
 
				 
			end if;		
		end if;	
		end;
	end loop;
	close C03;
	if (ie_conta_vazia_w = 'S') then 
		CALL Ajustar_Conta_Vazia(nr_atendimento_w,nm_usuario_p);
	end if;	
	end;
end loop;
close C01;
 
ie_conta_vazia_w := 'N';
ie_excluir_proc_w := 'N';
 
open C02;
loop 
fetch C02 into	 
	nr_atendimento_w, 
	cd_procedimento_w, 
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin 
	open C03;
	loop 
	fetch C03 into	 
		nr_sequencia_w, 
		ds_observacao_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		nr_seq_agenda_w := substr(substr(ds_observacao_w,position(':' in ds_observacao_w)+1,length(ds_observacao_w)), 1, 10);
		 
		if (obter_somente_numero(nr_seq_agenda_w) = obter_somente_numero(nr_seq_agenda_p)) then 
			ie_excluir_proc_w := 'S';
		else 
			ie_excluir_proc_w := 'N';
		end if;		
		 
		if (ie_excluir_proc_w = 'S') then 
			ie_conta_vazia_w := 'S';
			select	count(*) 
			into STRICT	nr_conta_fechada_w 
			from	conta_paciente 
			where	nr_interno_conta in ( 
				SELECT	nr_interno_conta 
				from	procedimento_paciente 
				where	nr_sequencia		= nr_sequencia_w 
				
union
 
				SELECT	nr_interno_conta 
				from	procedimento_paciente 
				where	nr_seq_proc_princ	= nr_sequencia_w) 
			and	ie_status_acerto = 2;
 
			if (nr_conta_fechada_w > 0) then 
				-- 'Existem contas fechadas para este procedimento!'); 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(189629);
			else	 
				/*Realizar o delete cascade pela propaci_propaci_fk da Procedimento_paciente. Evitando o problema de filhos do procedimento também possuirem filhos. */
 
				CALL Deletar_propaci_propaci(nr_sequencia_w,null);
				 
				--Caso precizar sem delete cascade 
				 
				/*delete	from material_atend_paciente 
				where	nr_seq_proc_princ	= nr_sequencia_w; 
 
				open	c02; 
				loop 
				fetch	c02 into 
					nr_seq_w; 
				exit when c02%notfound; 
					delete	from material_atend_paciente 
					where	nr_seq_proc_princ	= nr_seq_w; 
				end loop; 
				close c02; 
				 
				update	procedimento_paciente 
				set	nm_usuario	= nm_usuario_p 
				where	nr_seq_proc_princ	= nr_sequencia_w; 
				 
				delete	from procedimento_paciente 
				where	nr_seq_proc_princ	= nr_sequencia_w; 
				 
				update	procedimento_paciente 
				set	nm_usuario	= nm_usuario_p 
				where	nr_sequencia	= nr_sequencia_w; 
 
				delete	from procedimento_paciente 
				where	nr_sequencia		= nr_sequencia_w;*/
 
				 
			end if;
		end if;	
		end;
	end loop;
	close C03;
	if (ie_conta_vazia_w = 'S') then 
		CALL Ajustar_Conta_Vazia(nr_atendimento_w,nm_usuario_p);
	end if;	
	end;
end loop;
close C02;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hc_desfazer_proc_conta (nr_seq_agenda_p text, nm_usuario_p text) FROM PUBLIC;

