-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_ordem_compra_consig_nf ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_item_oci_w				integer;
cd_comprador_padrao_w			varchar(10);
cd_moeda_padrao_w			bigint;
cd_condicao_pagamento_padrao_w 		bigint;
cd_local_estoque_padrao_w			bigint;
cd_local_consig_w				bigint;
cd_pessoa_solic_padrao_w    		varchar(10);
qt_dia_prazo_entrega_w			bigint;
qt_material_w				double precision;
cd_material_w        			integer  	:= 0;
cd_estabelecimento_w    			smallint  	:= 1;
cd_unidade_medida_compra_w 		varchar(30) 	:= '';
nr_ordem_compra_w			bigint;
dt_prevista_entrega_w			timestamp;
cd_local_estoque_w			integer	:= '';
cd_local_entrega_w			integer	:= '';
cd_centro_custo_w			integer	:= '';
vl_unitario_material_w			double precision	:= 0;
dt_entrega_w				timestamp;
ie_aprova_auto_w				varchar(1);
cd_conta_contabil_w			varchar(20);
nm_pessoa_contato_w			varchar(255);
tx_desc_ordem_w				double precision;
pr_desc_financeiro_w			double precision;
ie_solic_comprador_w			varchar(1);
qt_existe_w				bigint;
vl_total_item_w				double precision;
vl_unitario_item_w				double precision;
cd_cgc_emitente_w			varchar(14);

c01 CURSOR FOR 
SELECT	cd_material, 
	cd_unidade_medida_compra, 
	qt_item_nf, 
	vl_unitario_item_nf, 
	cd_local_estoque, 
	cd_centro_custo, 
	cd_conta_contabil 
from	nota_fiscal_item 
where	nr_sequencia = nr_sequencia_p 
and	(nr_sequencia_vinc_consig IS NOT NULL AND nr_sequencia_vinc_consig::text <> '') 
order by	nr_item_nf;


BEGIN 
 
select	cd_estabelecimento, 
	cd_cgc_emitente 
into STRICT	cd_estabelecimento_w, 
	cd_cgc_emitente_w 
from	nota_fiscal 
where	nr_sequencia = nr_sequencia_p;
 
select	coalesce(cd_comprador_consig, cd_comprador_padrao), 
   	cd_moeda_padrao, 
   	cd_condicao_pagamento_padrao, 
   	cd_local_estoque_padrao, 
	cd_local_consig, 
   	coalesce(cd_pessoa_solic_consig,cd_pessoa_solic_padrao), 
	ie_aprova_ordem_consig, 
	cd_local_entrega_consig, 
	coalesce(ie_solic_comprador,'N') 
into STRICT 	cd_comprador_padrao_w, 
   	cd_moeda_padrao_w, 
   	cd_condicao_pagamento_padrao_w, 
   	cd_local_estoque_padrao_w, 
	cd_local_consig_w, 
   	cd_pessoa_solic_padrao_w, 
	ie_aprova_auto_w, 
	cd_local_entrega_w, 
	ie_solic_comprador_w 
from 	parametro_compras 
where 	cd_estabelecimento = cd_estabelecimento_w;
 
if (coalesce(cd_pessoa_solic_padrao_w::text, '') = '') or (coalesce(cd_moeda_padrao_w::text, '') = '') or (coalesce(cd_local_estoque_padrao_w::text, '') = '') or (coalesce(cd_comprador_padrao_w::text, '') = '') then 
	--(-20011,'Os parametros de compra estão incompletos'); 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(195748);
end if;
 
select	coalesce(obter_dados_pf_pj_estab(cd_estabelecimento_w, null, cd_cgc_emitente_w, 'EPE'),0), 
	coalesce(obter_dados_pf_pj_estab(cd_estabelecimento_w, null, cd_cgc_emitente_w, 'ECP'), cd_condicao_pagamento_padrao_w), 
	substr(obter_dados_pf_pj_estab(cd_estabelecimento_w, null, cd_cgc_emitente_w, 'ENC'),1,255), 
	obter_dados_pf_pj_estab(cd_estabelecimento_w, null, cd_cgc_emitente_w, 'TDO'), 
	obter_dados_pf_pj_estab(cd_estabelecimento_w, null, cd_cgc_emitente_w, 'TDF') 
into STRICT	qt_dia_prazo_entrega_w, 
	cd_condicao_pagamento_padrao_w, 
	nm_pessoa_contato_w, 
	tx_desc_ordem_w, 
	pr_desc_financeiro_w
;
 
if (ie_solic_comprador_w = 'S') then 
	begin 
 
	select	max(coalesce(cd_pessoa_fisica,cd_comprador_padrao_w)) 
	into STRICT	cd_comprador_padrao_w 
	from	comprador 
	where	cd_pessoa_fisica = cd_pessoa_solic_padrao_w;
	 
	end;
end if;
 
dt_entrega_w	:= trunc(clock_timestamp(),'dd') + qt_dia_prazo_entrega_w;
 
select	nextval('ordem_compra_seq') 
into STRICT	nr_ordem_compra_w
;
 
insert into ordem_compra( 
	nr_ordem_compra, 
	cd_estabelecimento, 
	cd_cgc_fornecedor, 
	cd_condicao_pagamento, 
	cd_comprador, 
	dt_ordem_compra, 
	dt_atualizacao, 
	nm_usuario, 
	cd_moeda, 
	ie_situacao, 
	dt_inclusao, 
	cd_pessoa_solicitante, 
	ie_frete, 
	vl_frete, 
	pr_desc_pgto_antec, 
	pr_juros_negociado, 
	cd_local_entrega, 
	dt_entrega, 
	ie_aviso_chegada, 
	ie_emite_obs, 
	ie_urgente, 
	ie_somente_pagto, 
	ie_tipo_ordem, 
	ds_pessoa_contato, 
	pr_desconto, 
	pr_desc_financeiro, 
	cd_centro_custo) 
values ( 
	nr_ordem_compra_w, 
	cd_estabelecimento_w, 
	cd_cgc_emitente_w, 
	cd_condicao_pagamento_padrao_w, 
	cd_comprador_padrao_w, 
	clock_timestamp(), 
	clock_timestamp(), 
	nm_usuario_p, 
	cd_moeda_padrao_w, 
	'A', 
	clock_timestamp(), 
	cd_pessoa_solic_padrao_w, 
	'C', 
	0, 
	0, 
	0, 
	cd_local_entrega_w, 
	dt_entrega_w, 
	'N', 
	'S', 
	'N', 
	'N', 
	'G', 
	nm_pessoa_contato_w, 
	tx_desc_ordem_w, 
	pr_desc_financeiro_w, 
	cd_centro_custo_w);
 
open c01;
loop 
fetch c01 into 
	cd_material_w, 
	cd_unidade_medida_compra_w, 
	qt_material_w, 
	vl_unitario_item_w, 
	cd_local_estoque_w, 
	cd_centro_custo_w, 
	cd_conta_contabil_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
 
	select	coalesce(max(nr_item_oci),0) + 1 
	into STRICT	nr_item_oci_w 
	from	ordem_compra_item 
	where	nr_ordem_compra = nr_ordem_compra_w;
 
	vl_total_item_w	:= (vl_unitario_item_w * qt_material_w);
 
	insert into ordem_compra_item( 
		nr_ordem_compra, 
		nr_item_oci, 
		cd_material, 
		cd_unidade_medida_compra, 
		qt_material, 
		qt_original, 
		vl_unitario_material, 
		vl_total_item, 
		cd_local_estoque, 
		cd_centro_custo, 
		cd_conta_contabil, 
		dt_atualizacao, 
		nm_usuario, 
		ie_situacao) 
	values ( 
		nr_ordem_compra_w, 
		nr_item_oci_w, 
		cd_material_w, 
		cd_unidade_medida_compra_w, 
		qt_material_w, 
		qt_material_w, 
		vl_unitario_item_w, 
		vl_total_item_w, 
		cd_local_estoque_w, 
		cd_centro_custo_w, 
		cd_conta_contabil_w, 
		clock_timestamp(), 
		nm_usuario_p, 
		'A');
 
	select	to_date(clock_timestamp() + coalesce(qt_dias_entrega_oc_consig,0)) 
	into STRICT	dt_prevista_entrega_w 
	from	parametro_compras 
	where	cd_estabelecimento = cd_estabelecimento_w;
 
	insert into ordem_compra_item_entrega( 
		nr_sequencia, 
		nr_ordem_compra, 
		nr_item_oci, 
		dt_prevista_entrega, 
		dt_real_entrega, 
		dt_entrega_original, 
		dt_entrega_limite, 
		qt_prevista_entrega, 
		qt_real_entrega, 
		dt_atualizacao, 
		nm_usuario, 
		ds_observacao) 
	values (	nextval('ordem_compra_item_entrega_seq'), 
		nr_ordem_compra_w, 
		nr_item_oci_w, 
		dt_prevista_entrega_w, 
		null, 
		dt_entrega_w, 
		dt_entrega_w, 
		qt_material_w, 
		null, 
		clock_timestamp(), 
		nm_usuario_p, 
		null);
 
	end;
end loop;
close c01;
 
Calcular_Liquido_Ordem_Compra(nr_ordem_compra_w, nm_usuario_p);
 
if (ie_aprova_auto_w = 'S') then 
	begin 
	select	count(*) 
	into STRICT	qt_existe_w 
	from	ordem_compra 
	where	nr_ordem_compra	= nr_ordem_compra_w 
	and	coalesce(dt_aprovacao::text, '') = '';
	/*Para verificar se a OC já não esta aprovada ou reprovada*/
 
	if (qt_existe_w > 0) then 
		CALL Gerar_Aprov_Ordem_Compra(nr_ordem_compra_w, null, 'S', nm_usuario_p);
	end if;
	end;
end if;
 
CALL gerar_ordem_compra_venc(nr_ordem_compra_w, nm_usuario_p);	
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_ordem_compra_consig_nf ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

