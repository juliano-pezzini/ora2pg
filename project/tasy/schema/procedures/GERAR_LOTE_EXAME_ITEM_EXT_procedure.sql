-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_lote_exame_item_ext (nr_lote_ext_p bigint, ds_erro_p INOUT text) AS $body$
DECLARE

  dt_inicio_w timestamp;
  dt_fim_w timestamp;
  cd_cgc_w varchar(14);
  nr_prescricao_w bigint;
  nr_sequencia_pp_w integer;
  qtd_registros_w bigint;

C01 CURSOR FOR
SELECT distinct pp.nr_prescricao, pp.nr_sequencia
	from prescr_procedimento pp
  join prescr_medica pm on pm.nr_prescricao = pp.nr_prescricao
  join atend_categoria_convenio atc
    on atc.nr_atendimento=pm.nr_atendimento
   and atc.dt_inicio_vigencia = (select max(w.dt_inicio_vigencia) from atend_categoria_convenio w where w.nr_atendimento  = pm.nr_atendimento)
  join lab_lote_regra_convenio rco
    on rco.cd_convenio=atc.cd_convenio
  join exame_lab_resultado r
    on r.nr_prescricao		= pp.nr_prescricao
  join exame_lab_result_item i
    on r.nr_seq_resultado	= i.nr_seq_resultado
    and	r.nr_prescricao		= pp.nr_prescricao
    and	i.nr_seq_prescr		= pp.nr_sequencia
  where trunc(i.dt_aprovacao) between  dt_inicio_w and dt_fim_w
    and (pp.nr_seq_exame IS NOT NULL AND pp.nr_seq_exame::text <> '')
    and lab_obter_regra_estab_ext(1,pm.cd_estabelecimento,0) = 'S'
    and rco.cd_cgc = cd_cgc_w
    and obter_se_contido_entre_virgula(rco.ie_status, pp.ie_status_atend)='S'
    and not exists (select 1
                    from lab_lote_item li
                    where li.nr_prescricao =pp.nr_prescricao
                    and li.nr_seq_prescr =pp.nr_sequencia);




BEGIN
 qtd_registros_w :=0;
 ds_erro_p:='';

 select dt_inicio_vig,
        dt_fim_vig,
        cd_cgc
	 into STRICT dt_inicio_w,
        dt_fim_w,
        cd_cgc_w
	from lab_lote_externo
	where nr_sequencia = nr_lote_ext_p;

  if (nr_lote_ext_p IS NOT NULL AND nr_lote_ext_p::text <> '') then
     open C01;
           loop
            fetch C01 into
              nr_prescricao_w,
              nr_sequencia_pp_w;
             EXIT WHEN NOT FOUND; /* apply on C01 */

            qtd_registros_w :=1;
            insert into lab_lote_item(nr_sequencia ,
                nr_seq_lote_externo  ,
                dt_atualizacao ,
                nm_usuario  ,
                dt_atualizacao_nrec ,
                nm_usuario_nrec  ,
                nr_prescricao  ,
                nr_seq_prescr
             ) values (
                nextval('lab_lote_item_seq'),
                nr_lote_ext_p,
                clock_timestamp(),
                obter_usuario_ativo(),
                clock_timestamp(),
                obter_usuario_ativo(),
                nr_prescricao_w,
                nr_sequencia_pp_w
            );

            update prescr_procedimento pp
              set pp.nr_seq_lote_externo = nr_lote_ext_p,
                  pp.ie_externo = 'S'
              where pp.nr_prescricao = nr_prescricao_w
                and pp.nr_sequencia = nr_sequencia_pp_w
                and coalesce(pp.nr_seq_lote_externo::text, '') = '';
          end loop;
        close c01;
    if (qtd_registros_w=0) then
       ds_erro_p := WHEB_MENSAGEM_PCK.get_texto(1048406); --buscar mensagem do schematics
    end if;
  end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_lote_exame_item_ext (nr_lote_ext_p bigint, ds_erro_p INOUT text) FROM PUBLIC;

