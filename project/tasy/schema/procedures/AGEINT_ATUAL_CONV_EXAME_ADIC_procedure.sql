-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_atual_conv_exame_adic (nr_seq_item_ageint_p bigint, cd_convenio_p bigint, cd_categoria_p text) AS $body$
DECLARE


nr_seq_agenda_int_w		agenda_integrada_item.nr_seq_agenda_int %type;
nr_seq_proc_interno_w		agenda_integrada_item.nr_seq_proc_interno %type;
ie_tipo_agendamento_w		agenda_integrada_item.ie_tipo_agendamento %type;
cd_especialidade_w		agenda_integrada_item.cd_especialidade %type;
ie_classif_agenda_w		agenda_integrada_item.ie_classif_agenda %type;
ie_lado_w			agenda_integrada_item.ie_lado %type;
nr_seq_grupo_selec_w		agenda_integrada_item.nr_seq_grupo_selec %type;
cd_estabelecimento_w		agenda_integrada.cd_estabelecimento%type;
nr_sequencia_w        		ageint_exame_adic_item.nr_sequencia%type;
nr_seq_item_w		 	ageint_exame_adic_item.nr_seq_item%type;
nr_seq_item_selec_w		agenda_integrada_item.nr_seq_item_selec%type;
NR_SEQUENCIA_GRUPO_W	agenda_int_grupo_item.NR_SEQUENCIA%TYPE;
CD_MEDICO_W			agenda_integrada_item.CD_MEDICO%type;
nr_seq_grupo_w			agenda_int_grupo_item.nr_seq_grupo%type;
ie_forma_checklist_w		varchar(1) := 'L';
ie_gerar_check_list_w		varchar(1);
nr_seq_ageint_check_list_w 		bigint;
nm_usuario_w			varchar(255);
ie_utiliza_tempo_proced_w		varchar(1);
cd_estabelecimento_p		bigint;
qt_exame_adic_w			bigint;
nr_seq_exame_adic_w		bigint;

C01 CURSOR FOR
	
	SELECT	nr_seq_proc_interno
	from	ageint_ex_adic_grupo_item
	where	nr_seq_grupo_item	= nr_seq_item_selec_w
	
union all

	SELECT	nr_seq_proc_interno
	from	AGENDA_INT_GRUPO_ITEM
	where	nr_sequencia = nr_seq_item_selec_w
	  and 	ie_tipo_agendamento_w = 'C';

	

BEGIN

nm_usuario_w := obter_usuario_ativo;
cd_estabelecimento_p := obter_estabelecimento_ativo;

ie_forma_checklist_w := Obter_Param_Usuario(869, 75, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_p, ie_forma_checklist_w);
ie_utiliza_tempo_proced_w := Obter_Param_Usuario(869, 178, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_p, ie_utiliza_tempo_proced_w);

select	b.nr_seq_agenda_int,
	b.nr_seq_proc_interno,
	b.ie_tipo_agendamento,
	b.cd_especialidade,
	b.ie_classif_agenda,
	b.ie_lado,
    a.cd_estabelecimento,
    b.nr_seq_item_selec,
	CD_MEDICO,
	nr_seq_grupo_selec
into STRICT	nr_seq_agenda_int_w,
	nr_seq_proc_interno_w,
	ie_tipo_agendamento_w,
	cd_especialidade_w,
	ie_classif_agenda_w,
	ie_lado_w,
	cd_estabelecimento_w,
	nr_seq_item_selec_w,
	CD_MEDICO_W,
	nr_seq_grupo_selec_w
from	agenda_integrada a,
	agenda_integrada_item b
where	a.nr_sequencia = b.nr_seq_agenda_int
and 	b.nr_sequencia	=  nr_seq_item_ageint_p;

delete from ageint_exame_adic_item where nr_seq_item = nr_seq_item_ageint_p;

select	count(*)
into STRICT	qt_exame_adic_w
from	AGENDA_INT_GRUPO_ITEM
where	nr_sequencia = nr_seq_item_selec_w;

if (qt_exame_adic_w	> 0) and (nr_seq_item_ageint_p	> 0) then
	open C01;
	loop
	fetch C01 into
		nr_seq_exame_adic_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (nr_seq_exame_adic_w IS NOT NULL AND nr_seq_exame_adic_w::text <> '') then								
			insert into ageint_exame_adic_item(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_proc_interno,
					nr_seq_item,
					nr_seq_grupo_selec,
					ie_lado)
				values (nextval('ageint_exame_adic_item_seq'),
					clock_timestamp(),
					nm_usuario_w,
					clock_timestamp(),
					nm_usuario_w,
					nr_seq_exame_adic_w,
					nr_seq_item_ageint_p,
					nr_seq_grupo_selec_w,
					ie_lado_w);


				if (ie_forma_checklist_w = 'L') then

					select	substr(ageint_obter_se_proc_check(nr_seq_exame_adic_w,nr_seq_agenda_int_w, cd_estabelecimento_w),1,1)
					into STRICT	ie_gerar_check_list_w
					;

					if (ie_gerar_check_list_w = 'S') then
						select	nextval('ageint_check_list_paciente_seq')
						into STRICT	nr_seq_ageint_check_list_w
						;

						insert into ageint_check_list_paciente(nr_sequencia,
											nr_seq_ageint,
											dt_atualizacao,
											nm_usuario,
											ie_tipo_check_list)
										values (nr_seq_ageint_check_list_w,
											nr_seq_agenda_int_w,
											clock_timestamp(),
											nm_usuario_w,
											'I');

						commit;

						CALL Ageint_Gerar_Check_List(nr_seq_ageint_check_list_w,nr_seq_exame_adic_w,nr_seq_agenda_int_w,nm_usuario_w, cd_estabelecimento_w);
					end if;
				end if;

			if (ie_utiliza_tempo_proced_w = 'S') then
				CALL Ageint_atualiza_dur_ex_adic(nr_seq_item_ageint_p,'A','L');
			end if;
		end if;
		end;
	end loop;
	close C01;
	
IF ie_tipo_agendamento_w = 'C' THEN

	CALL inserir_proc_regra_ageint_cons(cd_especialidade_w,
									nr_seq_item_ageint_p,
									ie_classif_agenda_w,
									cd_convenio_p,
									cd_categoria_p,
									cd_estabelecimento_w,
									nm_usuario_w);
									
	if (coalesce(nr_seq_grupo_selec_w::text, '') = '') then
		select nr_seq_grupo 
		  into STRICT nr_seq_grupo_w
		  from agenda_int_grupo_item
		 where nr_sequencia = nr_seq_item_selec_w;
	else
		nr_seq_grupo_w := nr_seq_grupo_selec_w;
	end if;			
	
	CALL gerar_ajust_proc_grupo_ageint(cd_especialidade_w,
								  ie_classif_agenda_w,
								  nr_seq_item_ageint_p,
								  nr_seq_agenda_int_w,
								  nr_seq_grupo_w,
								  nr_seq_proc_interno_w,
								  ie_lado_w,
								  nm_usuario_w,
								  cd_estabelecimento_w);
END IF;

end if;
commit;	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_atual_conv_exame_adic (nr_seq_item_ageint_p bigint, cd_convenio_p bigint, cd_categoria_p text) FROM PUBLIC;

