-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_regra_lib_fat ( nr_seq_conta_p pls_conta.nr_sequencia%type, dt_referencia_p timestamp, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_exige_med_aud_p INOUT pls_regra_lib_fat.ie_exige_med_aud%type, ie_exige_enf_aud_p INOUT pls_regra_lib_fat.ie_exige_enf_aud%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dt_referencia_w		timestamp;
ie_tipo_guia_w		pls_conta.ie_tipo_guia%type;
vl_cobranca_w		pls_conta_pos_estabelecido.vl_beneficiario%type;
nr_crm_auditor_w	medico.nr_crm%type;
nm_medico_auditor_w	pessoa_fisica.nm_pessoa_fisica%type;
cd_uf_crm_w		medico.uf_crm%type;
nr_coren_auditor_w	medico.nr_crm%type;
nm_enfer_auditor_w	pessoa_fisica.nm_pessoa_fisica%type;
cd_uf_coren_w		medico.uf_crm%type;

c01 CURSOR(	dt_referencia_pc	timestamp,
		cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type,
		ie_tipo_guia_pc		pls_conta.ie_tipo_guia%type,
		vl_cobranca_pc		pls_conta_pos_estabelecido.vl_beneficiario%type) FOR
	SELECT	coalesce(ie_exige_med_aud, 'N') ie_exige_med_aud,
		coalesce(ie_exige_enf_aud, 'N') ie_exige_enf_aud
	from	pls_regra_lib_fat
	where	cd_estabelecimento	= cd_estabelecimento_pc
	and (ie_tipo_guia		= ie_tipo_guia_pc or coalesce(ie_tipo_guia::text, '') = '')
	and	dt_referencia_pc between dt_inicio_vigencia and coalesce(dt_fim_vigencia,dt_referencia_pc)
	and	vl_cobranca_pc between coalesce(vl_cobranca_inicial,vl_cobranca_pc) and coalesce(vl_cobranca_final,vl_cobranca_pc);

BEGIN

dt_referencia_w		:= trunc(coalesce(dt_referencia_p,clock_timestamp()));
ie_exige_med_aud_p	:= 'N';
ie_exige_enf_aud_p	:= 'N';

select	max(ie_tipo_guia)
into STRICT	ie_tipo_guia_w
from	pls_conta
where	nr_sequencia = nr_seq_conta_p;

select	coalesce(sum(vl_cobranca), 0)
into STRICT	vl_cobranca_w
from (SELECT	coalesce(vl_beneficiario, 0) vl_cobranca
	from	pls_conta_pos_estabelecido
	where	nr_seq_conta		= nr_seq_conta_p
	and	ie_status_faturamento	= 'L'
	and	coalesce(ie_situacao, 'A')	= 'A'
	and	coalesce(nr_seq_lote_fat::text, '') = ''
	
union all

	SELECT	coalesce(vl_medico, 0) + coalesce(vl_materiais, 0) + coalesce(vl_custo_operacional, 0) + coalesce(vl_lib_taxa_co, 0) + coalesce(vl_lib_taxa_material, 0) + coalesce(vl_lib_taxa_servico, 0) vl_cobranca
	from	pls_conta_pos_proc
	where	nr_seq_conta		= nr_seq_conta_p
	and	ie_status_faturamento in ('L', 'P')
	and	coalesce(nr_seq_lote_fat::text, '') = ''
	
union all

	select	coalesce(vl_materiais, 0) + coalesce(vl_lib_taxa_material, 0) vl_cobranca
	from	pls_conta_pos_mat
	where	nr_seq_conta		= nr_seq_conta_p
	and	ie_status_faturamento in ('L', 'P')
	and	coalesce(nr_seq_lote_fat::text, '') = '') alias17;

-- Obter dados de auditoria
SELECT * FROM ptu_obter_dados_aud_analise(nr_seq_conta_p, nr_crm_auditor_w, nm_medico_auditor_w, cd_uf_crm_w, nr_coren_auditor_w, nm_enfer_auditor_w, cd_uf_coren_w) INTO STRICT nr_crm_auditor_w, nm_medico_auditor_w, cd_uf_crm_w, nr_coren_auditor_w, nm_enfer_auditor_w, cd_uf_coren_w;

for r_c01_w in c01( dt_referencia_w , cd_estabelecimento_p , ie_tipo_guia_w , vl_cobranca_w ) loop
	-- Exigi médico auditor
	if (r_c01_w.ie_exige_med_aud = 'S') and (coalesce(nr_crm_auditor_w::text, '') = '') and (coalesce(nm_medico_auditor_w::text, '') = '') then
		ie_exige_med_aud_p := 'S';
	else
		ie_exige_med_aud_p := 'N';
	end if;

	-- Exigi enfermeiro auditor
	if (r_c01_w.ie_exige_enf_aud = 'S') and (coalesce(nr_coren_auditor_w::text, '') = '') and (coalesce(nm_enfer_auditor_w::text, '') = '') then
		ie_exige_enf_aud_p := 'S';
	else
		ie_exige_enf_aud_p := 'N';
	end if;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_regra_lib_fat ( nr_seq_conta_p pls_conta.nr_sequencia%type, dt_referencia_p timestamp, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_exige_med_aud_p INOUT pls_regra_lib_fat.ie_exige_med_aud%type, ie_exige_enf_aud_p INOUT pls_regra_lib_fat.ie_exige_enf_aud%type) FROM PUBLIC;

