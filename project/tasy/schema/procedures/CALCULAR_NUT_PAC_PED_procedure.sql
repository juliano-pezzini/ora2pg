-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_nut_pac_ped ( nr_sequencia_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_alterou_volume_p text default 'N') AS $body$
DECLARE


qt_peso_w				double precision;
qt_idade_dia_w			bigint;
qt_idade_mes_w			bigint;
qt_idade_ano_w			bigint;
qt_altura_cm_w			bigint;
qt_dia_npt_w			bigint;
qt_kcal_total_w			double precision;
qt_kcal_kg_w			double precision;
qt_fase_npt_w			bigint;
qt_nec_hidrica_diaria_w	double precision;
qt_aporte_nec_kcal_dia_w double precision;
qt_sodio_calcio_mag_w	double precision;
qt_osmolaridade_total_w	double precision;
qt_potassio_w			double precision;
qt_diaria_sodio_w		double precision;
qt_fosforo_w			double precision;
qt_vol_glicose_w		double precision;
qt_vol_lip_ml_w			double precision;
qt_diaria_calcio_w		double precision;
qt_conc_calcio_w		double precision;
qt_aporte_hidrico_diario_w double precision;
qt_vel_inf_glicose_w	double precision;
qt_nec_kcal_kg_dia_w	double precision;
pr_conc_glic_solucao_w	double precision;
qt_volume_final_w		double precision;
qt_vol_final_ele_w		double precision;
nr_casas_w				smallint;
qt_hora_inf_w			smallint;
nr_fator_lipideo_w		double precision;
nr_fator_glicose_w		double precision;
qt_rel_cal_nit_w		bigint;
nr_seq_zinco_w			bigint;
nr_seq_calcio_w			bigint;
nr_seq_oligoelemento_w	bigint;
qt_equipo_w				double precision;
qt_rel_cal_fosforo_w	double precision;
qt_elem_kg_dia_calcio_w	double precision;
qt_calcio_w				double precision;
qt_g_prot_kg_dia_w		double precision;
qt_g_lip_kg_dia_w		double precision;
qt_g_glic_kg_dia_w		double precision;
qt_g_prot_dia_w			double precision;
qt_g_lip_dia_w			double precision;
qt_g_glic_dia_w			double precision;
qt_kcal_prot_w			double precision;
qt_kcal_lip_w			double precision;
qt_kcal_glic_w			double precision;
qt_vol_prot_w			double precision;
qt_vol_lip_w			double precision;
qt_vol_glic_w			double precision;
qt_kcal_elem_w			double precision;
nr_seq_glicose_w		bigint;
nr_seq_elemento_w		bigint;
qt_vol_elemento_w		double precision;
qt_vol_total_w			double precision;
pr_total_w				double precision;
qt_conversao_ml_w		double precision;
qt_conversao_ml_ww		double precision;
ie_equilibrio_w			varchar(1)		:= 'S';
qt_produto_w			integer	:= 0;
qt_g_menor_w			double precision;
qt_g_maior_w			double precision;
nr_seq_pac_elem_w		bigint;
nr_seq_pac_elem2_w		bigint;
nr_seq_elem_w			bigint;
ie_prim_fase_w			varchar(1);
ie_seg_fase_w			varchar(1);
ie_terc_fase_w			varchar(1);
ie_quar_fase_w			varchar(1);
ie_zinco_w				varchar(1);
qt_fase_w				double precision;
qt_fase1_w				double precision := null;
qt_fase2_w				double precision := null;
qt_fase3_w				double precision := null;
qt_fase4_w				double precision := null;
qt_volume_w				double precision;
qt_vol_cor_w			double precision;
nr_seq_elem_mat_w		bigint;
nr_seq_potassio_w		bigint;
nr_seq_sodio_w			bigint;
nr_seq_fosforo_w		bigint;
cd_material_w			integer;
qt_pot_clor_fosforo_w	double precision;
nr_seq_material_w		bigint;
qt_diaria_w				double precision;
ie_correcao_w			varchar(01);
ie_ajustar_potassio_w	varchar(01);
ie_ajustar_sodio_w		varchar(01);
nr_seq_heparina_w		bigint;
qt_troca_glicose_w		bigint;
nr_seq_glic_Troca_w		bigint;
qt_volume_total_w		double precision;
nr_prescricao_w			bigint;
nr_horas_validade_w		integer;
qt_gotejo_w				double precision;
qt_vol_sodio_w			double precision;
qt_vol_magnesio_w		double precision;
nr_casas_gotejo_w		bigint;
qt_vol_calcio_w			double precision;
qt_rel_cal_fos_w		double precision;
qt_kcal_carboidrato_w	double precision;
qt_kcal_proteina_w		double precision;
qt_kcal_lipidio_w		double precision;
qt_kcal_totais_w		double precision;
pr_proteina_w			real;
pr_lipidio_w			real;
pr_carboidrato_w		real;
ie_geracao_fos_cal_w	varchar(1);
ie_calculo_auto_w		varchar(1);
qt_descontar_hidrico_w	double precision;
ie_editado_w			nut_pac.ie_editado%type;
qt_conversao_kcal_w		nut_elem_material.qt_conversao_kcal%type;
nr_fator_lipideo_ww		double precision;
qt_g_lip_kg_dia_ww		double precision;
qt_vol_lip_ww			double precision;
qt_g_glu_kg_dia_w		double precision;
qt_vol_glutamina_w		double precision;
qt_kcal_glutamina_w		double precision;
qt_diaria_zinco_w		double precision;
ie_arredonda_npt_w		parametro_medico.ie_arredondar_npt%type := 'N';
qt_fator_correcao_w		double precision;
nr_seq_elem_agua_w		bigint := 0;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
		coalesce(qt_kcal,0)
from	nut_pac_elemento a
where	nr_seq_nut_pac	= nr_sequencia_p;

c02 CURSOR FOR
SELECT	a.nr_sequencia,
		qt_conversao_ml,
		a.nr_seq_pac_elem
from	nut_elem_material b,
		nut_pac_elem_mat a,
		nut_pac_elemento e
where	a.nr_seq_pac_elem	= e.nr_sequencia
and		a.nr_seq_elem_mat	= b.nr_sequencia
and		e.nr_seq_elemento	= nr_seq_glicose_w
and		e.nr_seq_nut_pac	= nr_sequencia_p
and		qt_g_menor_w		> 0
and		coalesce(b.ie_tipo,'NPT')	= 'NPT'
order by qt_conversao_ml desc;

c03 CURSOR FOR
SELECT	a.nr_sequencia,
		a.ie_prim_fase,
		a.ie_seg_fase,
		a.ie_terc_fase,
		a.ie_quar_fase
from	nut_pac_elem_mat b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_sequencia	= b.nr_seq_pac_elem;

c04 CURSOR FOR
SELECT	coalesce(qt_vol_cor, qt_volume),
		nr_sequencia
from	nut_pac_elem_mat
where	nr_seq_pac_elem	= nr_seq_elem_w;

c05 CURSOR FOR
SELECT	a.nr_sequencia,
		b.nr_sequencia,
		b.qt_volume
from	nut_pac_elem_mat b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_sequencia	= b.nr_seq_pac_elem
and		coalesce(b.qt_volume,0)	> 0;

c06 CURSOR FOR
SELECT	b.nr_sequencia
from	nut_elem_material b
where	b.nr_seq_elemento       = nr_seq_glicose_w
and		b.nr_sequencia  not in (select	nr_seq_elem_mat
								from	nut_pac_elem_mat
								where	nr_seq_pac_elem = nr_seq_pac_elem_w)
and		qt_conversao_ml < qt_conversao_ml_w
and		coalesce(b.ie_tipo,'NPT')	= 'NPT'
order by qt_conversao_ml;

c07 CURSOR FOR
SELECT c.qt_elem_kg_dia,
	   obter_vol_elem_nut_pac(c.nr_sequencia),
	   b.qt_conversao_kcal
from   nut_elemento a,
	   nut_elem_material b,
	   nut_pac_elemento c,
	   nut_pac_elem_mat d
where  a.nr_sequencia		= c.nr_seq_elemento
and	   c.nr_sequencia		= d.nr_seq_pac_elem
and	   b.nr_sequencia		= d.nr_seq_elem_mat
and	   c.nr_seq_nut_pac	  	= nr_sequencia_p
and    a.ie_tipo_elemento	= 'L';


BEGIN
CALL Gerar_Nut_Elemento_Pac(nr_sequencia_p, nm_usuario_p);

nr_casas_w := Obter_Param_Usuario(924, 748, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, nr_casas_w);
nr_fator_lipideo_w := Obter_Param_Usuario(924, 763, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, nr_fator_lipideo_w);
nr_casas_gotejo_w := Obter_Param_Usuario(924, 884, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, nr_casas_gotejo_w);
nr_fator_glicose_w := Obter_Param_Usuario(924, 1009, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, nr_fator_glicose_w);

select	qt_peso,
		qt_idade_dia,
		qt_idade_mes,
		qt_idade_ano,
		qt_altura_cm,
		qt_dia_npt,
		qt_kcal_total,
		qt_kcal_kg,
		qt_fase_npt,
		qt_nec_hidrica_diaria,
		qt_aporte_hidrico_diario,
		qt_vel_inf_glicose,
		qt_nec_kcal_kg_dia,
		pr_conc_glic_solucao,
		qt_rel_cal_nit,
		qt_equipo,
		coalesce(ie_correcao,'N'),
		coalesce(ie_ajustar_potassio,'S'),
		nr_prescricao,
		coalesce(ie_ajustar_sodio,'N'),
		coalesce(ie_zinco,'N'),
		qt_rel_cal_fos,
		coalesce(ie_geracao_fos_cal,'N'),
		coalesce(ie_calculo_auto,'S'),
		qt_gotejo_npt,
		qt_hora_inf,
		coalesce(qt_descontar_hidrico,0),
		coalesce(ie_editado,'N')
into STRICT	qt_peso_w,
		qt_idade_dia_w,
		qt_idade_mes_w,
		qt_idade_ano_w,
		qt_altura_cm_w,
		qt_dia_npt_w,
		qt_kcal_total_w,
		qt_kcal_kg_w,
		qt_fase_npt_w,
		qt_nec_hidrica_diaria_w,
		qt_aporte_hidrico_diario_w,
		qt_vel_inf_glicose_w,
		qt_nec_kcal_kg_dia_w,
		pr_conc_glic_solucao_w,
		qt_rel_cal_nit_w,
		qt_equipo_w,
		ie_correcao_w,
		ie_ajustar_potassio_w,
		nr_prescricao_w,
		ie_ajustar_sodio_w,
		ie_zinco_w,
		qt_rel_cal_fos_w,
		ie_geracao_fos_cal_w,
		ie_calculo_auto_w,
		qt_gotejo_w,
		qt_hora_inf_w,
		qt_descontar_hidrico_w,
		ie_editado_w
from	Nut_pac
where	nr_sequencia = nr_sequencia_p;

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_glicose_w
from	nut_elemento
where	ie_tipo_elemento	= 'C'
and		coalesce(ie_gerar_ped,'S') = 'S'
and		ie_situacao = 'A';

select 	coalesce(max(ie_arredondar_npt),'N')
into STRICT	ie_arredonda_npt_w
from	parametro_medico
where 	cd_estabelecimento = cd_estabelecimento_p;

qt_aporte_hidrico_diario_w	:= (qt_nec_hidrica_diaria_w * qt_peso_w) - qt_descontar_hidrico_w;
qt_aporte_nec_kcal_dia_W	:= qt_nec_kcal_kg_dia_w * qt_peso_w;

if (coalesce(ie_alterou_volume_p,'N') = 'S') then

	select	max(nr_sequencia),
			coalesce(max(qt_volume_final),0)
	into STRICT	nr_seq_pac_elem2_w,
			qt_vol_final_ele_w
	from	nut_pac_elemento
	where	nr_seq_nut_pac = nr_sequencia_p
	and		nr_seq_elemento = nr_seq_glicose_w;

	select	round((coalesce(max(coalesce(qt_vol_final_ele_w,0) * dividir_sem_round(coalesce(b.qt_conv_unid_cons,1),coalesce(b.qt_conversao_ml,1))),0))::numeric,2)
	into STRICT	qt_g_glic_dia_w
	from	nut_elem_material b,
			nut_pac_elem_mat a
	where	a.nr_seq_pac_elem	= nr_seq_pac_elem2_w
	and		a.nr_seq_elem_mat	= b.nr_sequencia
	and		coalesce(b.ie_padrao,'N') = 'S'
	and		coalesce(b.ie_tipo,'NPT')	= 'NPT';

	qt_g_Glic_kg_dia_w 	 := round((dividir_Sem_round(qt_g_glic_dia_w,qt_peso_w))::numeric,2);
	qt_vel_inf_glicose_w := round((qt_g_Glic_kg_dia_w/1.44)::numeric,2);
	qt_kcal_glic_w		 := qt_g_glic_dia_w * nr_fator_glicose_w;

	if (ie_arredonda_npt_w = 'S') then
		qt_g_glic_dia_w	:= round((qt_g_glic_dia_w)::numeric,2);
		qt_g_Glic_kg_dia_w	:= round((qt_g_Glic_kg_dia_w)::numeric,2);
	end if;

	update	nut_pac_elemento
	set		qt_diaria 		= qt_g_glic_dia_w,
			qt_elem_kg_dia	= qt_g_Glic_kg_dia_w,
			pr_concentracao = dividir((qt_g_glic_dia_w * 100), qt_aporte_hidrico_diario_w),
			nm_usuario		= nm_usuario_p,
			dt_atualizacao 	= clock_timestamp(),
			qt_kcal			= qt_kcal_glic_w
	where	nr_sequencia 	= nr_seq_pac_elem2_w;

	update	nut_pac
	set		qt_vel_inf_glicose 	= qt_vel_inf_glicose_w,
			nm_usuario 			= nm_usuario_p,
			dt_atualizacao 		= clock_timestamp()
	where	nr_sequencia 		= nr_sequencia_p;
elsif (coalesce(ie_alterou_volume_p,'N') = 'Q') then

	select	max(nr_sequencia),
			coalesce(max(qt_elem_kg_dia),0)
	into STRICT	nr_seq_pac_elem2_w,
			qt_g_Glic_kg_dia_w
	from	nut_pac_elemento
	where	nr_seq_nut_pac = nr_sequencia_p
	and		nr_seq_elemento = nr_seq_glicose_w;

	select	max(coalesce(b.qt_conversao_ml,1))
	into STRICT	qt_conversao_ml_ww
	from	nut_elem_material b,
			nut_pac_elem_mat a
	where	a.nr_seq_pac_elem	= nr_seq_pac_elem2_w
	and		a.nr_seq_elem_mat	= b.nr_sequencia
	and		coalesce(b.ie_padrao,'N') = 'S'
	and		coalesce(b.ie_tipo,'NPT')	= 'NPT';

	qt_g_glic_dia_w		 := round((qt_g_Glic_kg_dia_w*qt_peso_w)::numeric,2);
	qt_vel_inf_glicose_w := round((qt_g_Glic_kg_dia_w/1.44)::numeric,2);
	qt_vol_final_ele_w	 := round((qt_g_glic_dia_w * qt_conversao_ml_ww)::numeric,2);
	qt_kcal_glic_w		 := qt_g_glic_dia_w * nr_fator_glicose_w;

	if (ie_arredonda_npt_w = 'S') then
		--qt_vol_final_ele_w	:= ceil(qt_vol_final_ele_w * 100) / 100;
		qt_vol_final_ele_w	:= round((qt_vol_final_ele_w)::numeric, 2);
	end if;

	update	nut_pac_elemento
	set		qt_diaria 		= qt_g_glic_dia_w,
			pr_concentracao = dividir((qt_g_glic_dia_w * 100), qt_aporte_hidrico_diario_w),
			nm_usuario		= nm_usuario_p,
			dt_atualizacao 	= clock_timestamp(),
			qt_kcal			= qt_kcal_glic_w,
			qt_volume_final = qt_vol_final_ele_w
	where	nr_sequencia 	= nr_seq_pac_elem2_w;

	update	nut_pac
	set		qt_vel_inf_glicose 	= qt_vel_inf_glicose_w,
			nm_usuario 			= nm_usuario_p,
			dt_atualizacao 		= clock_timestamp()
	where	nr_sequencia 		= nr_sequencia_p;
end if;

CALL Calcular_Nut_Elem_Ped(nr_sequencia_p, nm_usuario_p,ie_alterou_volume_p);

if (ie_arredonda_npt_w = 'S') then

	select	coalesce(sum(qt_elem_kg_dia),0),
			coalesce(sum(Obter_vol_elem_nut_pac(a.nr_sequencia)),0)
	into STRICT	qt_g_prot_kg_dia_w,
			qt_vol_prot_w
	from	nut_elemento b,
			nut_pac_elemento a
	where	a.nr_seq_nut_pac	= nr_sequencia_p
	and		a.nr_seq_elemento	= b.nr_sequencia
	and		b.ie_tipo_elemento	= 'P'
	and		b.ie_glutamina 		= 'N';

	select	coalesce(sum(qt_elem_kg_dia),0),
			coalesce(sum(Obter_vol_elem_nut_pac(a.nr_sequencia)),0)
	into STRICT	qt_g_glu_kg_dia_w,
			qt_vol_glutamina_w
	from	nut_elemento b,
			nut_pac_elemento a
	where	a.nr_seq_nut_pac	= nr_sequencia_p
	and		a.nr_seq_elemento	= b.nr_sequencia
	and		b.ie_tipo_elemento	= 'P'
	and		b.ie_glutamina 		= 'S';

else

	select	coalesce(sum(qt_elem_kg_dia),0),
			coalesce(sum(Obter_vol_elem_nut_pac(a.nr_sequencia)),0)
	into STRICT	qt_g_prot_kg_dia_w,
			qt_vol_prot_w
	from	nut_elemento b,
			nut_pac_elemento a
	where	a.nr_seq_nut_pac	= nr_sequencia_p
	and		a.nr_seq_elemento	= b.nr_sequencia
	and		b.ie_tipo_elemento	= 'P';

end if;

/*
	Cálculo dos lipídios separados devido ao fator de conversão para calorias poderem ser diferentes
*/
qt_kcal_lip_w	:= 0;
qt_vol_lip_ww	:= 0;
open c07;
loop
fetch c07 into
	qt_g_lip_kg_dia_w,
	qt_vol_lip_w,
	qt_conversao_kcal_w;
EXIT WHEN NOT FOUND; /* apply on c07 */
	begin
		if (qt_conversao_kcal_w > 0) then
			nr_fator_lipideo_ww	:= qt_conversao_kcal_w;
		else
			nr_fator_lipideo_ww	:= nr_fator_lipideo_w;
		end if;

		if (ie_arredonda_npt_w = 'S') then
			qt_g_Lip_kg_dia_ww	:= qt_vol_lip_w;
		else
			qt_g_Lip_kg_dia_ww	:= qt_g_Lip_kg_dia_w * qt_peso_w;
		end if;

		qt_kcal_lip_w	:= qt_kcal_lip_w + (qt_g_Lip_kg_dia_ww * nr_fator_lipideo_ww);
		qt_vol_lip_ww	:= qt_vol_lip_ww + qt_vol_lip_w;
	end;
end loop;
close c07;

qt_vol_Glic_w	:= trunc(qt_aporte_hidrico_diario_w - qt_vol_prot_w - qt_vol_lip_w);

if (coalesce(ie_alterou_volume_p,'N') = 'N') then
	if (ie_editado_w = 'S') or (coalesce(qt_kcal_total_w,0) = 0) then
		qt_g_Glic_kg_dia_w	:= round((qt_vel_inf_glicose_w * 1.44)::numeric,2);
	else
			select	coalesce(max(qt_elem_kg_dia),0)
			into STRICT	qt_g_Glic_kg_dia_w
			from	nut_pac_elemento
			where	nr_seq_nut_pac = nr_sequencia_p
			and		nr_seq_elemento = nr_seq_glicose_w;
	end if;
	qt_g_glic_dia_w		:= qt_g_glic_kg_dia_w * qt_peso_w;
	qt_kcal_glic_w		:= qt_g_glic_dia_w * nr_fator_glicose_w;

	begin
	update	nut_pac_elemento
	set		qt_elem_kg_dia	= qt_g_Glic_kg_dia_w,
			qt_diaria	= qt_g_glic_dia_w,
			qt_kcal		= qt_kcal_glic_w
	where	nr_seq_nut_pac	= nr_sequencia_p
	and		nr_seq_elemento	= nr_seq_glicose_w;
	exception when others then
		--'Ocorreu uma excessão ao calcular os valores da NPT. Verifique se os valores informados estão corretos! #@#@');
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(190072);
	end;
end if;

qt_g_prot_dia_w		:= qt_g_Prot_kg_dia_w * qt_peso_w;
qt_g_lip_dia_w		:= qt_g_Lip_kg_dia_w * qt_peso_w;
qt_kcal_prot_w		:= qt_g_Prot_dia_w * 4;

if (ie_arredonda_npt_w = 'S') then
	qt_kcal_glutamina_w	:= qt_vol_glutamina_w * 0.8;
	qt_kcal_total_w		:= qt_kcal_prot_w + qt_kcal_lip_w + qt_kcal_glic_w + qt_kcal_glutamina_w;
else
	qt_kcal_total_w		:= qt_kcal_prot_w + qt_kcal_lip_w + qt_kcal_glic_w;
end if;

qt_kcal_kg_w		:= Dividir(qt_kcal_total_w, qt_peso_w);
if (ie_arredonda_npt_w = 'S') then
	qt_rel_cal_nit_w	:= dividir_sem_round((coalesce(qt_kcal_lip_w,0) + (coalesce(qt_g_glic_dia_w,0) * 3.4)), (dividir_sem_round(coalesce(qt_g_prot_dia_w,0), 6.25) + dividir_sem_round((qt_vol_glutamina_w * 3.87)::numeric,100)));
else
	qt_rel_cal_nit_w	:= Dividir((coalesce(qt_kcal_lip_w,0) + coalesce(qt_kcal_glic_w,0)), (coalesce(qt_g_prot_dia_w,0) * 0.15));
end if;
pr_conc_glic_solucao_w	:= Dividir((qt_g_glic_dia_w * 100), qt_aporte_hidrico_diario_w);

select	coalesce(sum(qt_osmolaridade),0)
into STRICT	qt_osmolaridade_total_w
from	nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_seq_elemento	= b.nr_sequencia;

select	coalesce(sum(obter_vol_elem_nut_pac(nr_sequencia)),0)
into STRICT	qt_vol_total_w
from	nut_pac_elemento
where	nr_seq_nut_pac	= nr_sequencia_p;

update	Nut_pac
set		qt_dia_npt		= qt_dia_npt_w,
		qt_kcal_total		= qt_kcal_total_w,
		qt_kcal_kg		= qt_kcal_kg_w,
		qt_aporte_hidrico_diario = qt_aporte_hidrico_diario_w,
		qt_nec_kcal_dia		= qt_aporte_nec_kcal_dia_W,
		pr_conc_glic_solucao	= pr_conc_glic_solucao_w,
		qt_rel_cal_nit		= qt_rel_cal_nit_w,
		qt_osmolaridade_total	= qt_osmolaridade_total_w
where	nr_sequencia		= nr_sequencia_p;

open c01;
loop
fetch c01	into
		nr_seq_elemento_w,
      	qt_kcal_elem_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	update	nut_pac_elem_mat
	set		qt_vol_1_fase	= 0,
			qt_vol_2_fase	= 0,
			qt_vol_3_fase	= 0,
			qt_vol_4_fase	= 0,
			qt_vol_cor	= 0
	where	nr_seq_pac_elem	= nr_seq_elemento_w;

	pr_total_w		:= dividir(qt_kcal_elem_w * 100, qt_kcal_total_w);
	update	nut_pac_elemento
	set		pr_total	= coalesce(pr_total_w,0)
	where	nr_sequencia	= nr_seq_elemento_w;
	end;
end loop;
close c01;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
/* Equilibrar Glicose x Balanço Hidrico */

qt_produto_w		:= 0;
qt_vol_total_w	:= 0;
ie_equilibrio_w	:= 'S';
qt_troca_glicose_w	:= 0;
qt_g_menor_w		:= 999;
open c02;
loop
fetch c02	into
	nr_seq_elemento_w,
	qt_conversao_ml_w,
	nr_seq_pac_elem_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	qt_produto_w		:= qt_produto_w + 1;
	if (qt_produto_w = 1) then
		qt_vol_elemento_w	:= qt_g_glic_dia_w * qt_conversao_ml_w;
		qt_vol_total_w		:= qt_vol_elemento_w;
		qt_g_menor_w		:= qt_g_glic_dia_w;
		qt_g_maior_w		:= 0;
		nr_seq_glic_Troca_w	:= nr_seq_elemento_w;
	else
		qt_vol_elemento_w	:= 0;
	end if;

	update	nut_pac_elem_mat
	set		qt_volume			= qt_vol_elemento_w,
			qt_vol_1_fase		= 0,
			qt_vol_2_fase		= 0,
			qt_vol_3_fase		= 0,
			qt_vol_4_fase		= 0,
			qt_vol_cor			= 0
	where	nr_sequencia		= nr_seq_elemento_w;
end loop;
close c02;

if (qt_vol_total_w <= qt_vol_glic_w) then
	ie_equilibrio_w		:= 'S';
elsif (qt_produto_w	= 2) then
	ie_equilibrio_w		:= 'N';
end if;

WHILE(ie_equilibrio_w = 'N') LOOP
	if (qt_vol_total_w > 0) and (qt_vol_total_w <= qt_vol_glic_w) then
		ie_equilibrio_w	:= 'S';
	elsif (qt_vol_total_w = 0) and (qt_troca_glicose_w > 7) then
		ie_equilibrio_w	:= 'S';
	elsif (qt_vol_total_w = 0) or (qt_g_menor_w < 0) then
		nr_seq_elemento_w	:= 0;
		OPEN c06;
		LOOP
		FETCH C06	into
			nr_seq_elemento_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			nr_seq_elemento_w	:= nr_seq_elemento_w;
		END LOOP;
		CLOSE C06;
		if (nr_seq_elemento_w > 0) then
			qt_troca_glicose_w	:= qt_troca_glicose_w + 1;
			update	nut_pac_elem_mat
			set		nr_seq_elem_mat = nr_seq_elemento_w
			where	nr_sequencia	= nr_seq_glic_Troca_w;
		else
			ie_equilibrio_w	:= 'S';
		end if;
	else
		qt_g_menor_w		:= qt_g_menor_w - 1;
		qt_g_maior_w		:= qt_g_maior_w + 1;
		qt_vol_total_w		:= 0;
		OPEN c02;
		LOOP
		FETCH C02	into
			nr_seq_elemento_w,
			qt_conversao_ml_w,
			nr_seq_pac_elem_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			if (qt_vol_total_w = 0) then
				qt_vol_elemento_w	:= qt_g_menor_w * qt_conversao_ml_w;
			else
				qt_vol_elemento_w	:= qt_g_maior_w * qt_conversao_ml_w;
			end if;
			qt_vol_total_w		:= qt_vol_total_w + qt_vol_elemento_w;

			update	nut_pac_elem_mat
			set		qt_volume	= qt_vol_elemento_w
			where	nr_sequencia	= nr_seq_elemento_w;
		END LOOP;
		CLOSE C02;
	end if;
END LOOP;

if (ie_geracao_fos_cal_w = 'S') then
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_fosforo_w
	from	nut_elemento
	where	ie_tipo_elemento	= 'F';

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_calcio_w
	from	nut_elemento
	where	ie_tipo_elemento	= 'I';

	select	coalesce(sum(qt_elem_kg_dia),0)
	into STRICT	qt_elem_kg_dia_calcio_w
	from	nut_elemento b,
			nut_pac_elemento a
	where	a.nr_seq_nut_pac	= nr_sequencia_p
	and		a.nr_seq_elemento	= b.nr_sequencia
	and		b.ie_tipo_elemento	= 'I';

	qt_fosforo_w	:= dividir(qt_elem_kg_dia_calcio_w,qt_rel_cal_fos_w);

	update	nut_pac_elemento
	set		qt_elem_kg_dia	= qt_fosforo_w,
			qt_diaria		= (qt_fosforo_w * qt_peso_w)
	where	nr_seq_nut_pac	= nr_sequencia_p
	and		nr_seq_elemento	= nr_seq_fosforo_w;

end if;

if (ie_ajustar_sodio_w = 'S') then
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_sodio_w
	from	nut_elemento
	where	ie_tipo_elemento	= 'N'
	and	coalesce(ie_gerar_ped,'N')	= 'S';

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_fosforo_w
	from	nut_elemento
	where	ie_tipo_elemento	= 'F';

	select	coalesce(max(c.cd_material),0),
			coalesce(max(b.qt_volume),0),
			coalesce(max(a.qt_diaria),0)
	into STRICT	cd_material_w,
			qt_volume_w,
			qt_diaria_w
	from	nut_elem_material c,
			nut_pac_elem_mat b,
			nut_pac_elemento a
	where	b.nr_seq_elem_mat	= c.nr_sequencia
	and		a.nr_sequencia		= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_fosforo_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p
	and		coalesce(c.ie_tipo,'NPT')	= 'NPT';

/* Obter dados do fósforo
Pegar os valores do Fósforo orgânico, porém a conversão deve ser de acordo com o cadastro do sódio, uma vez que o PRODUTO é o mesmo em ambos */
	select	max(qt_diaria)
	into STRICT	qt_diaria_sodio_w
	from	nut_pac_elemento a
	where	nr_seq_elemento		= nr_seq_sodio_w
	and	a.nr_seq_nut_pac	= nr_sequencia_p;

	begin
		if (ie_arredonda_npt_w = 'S') then
			select	dividir_sem_round(qt_volume_w, qt_conversao_ml)
			into STRICT	qt_fosforo_w
			from	nut_elem_material
			where	nr_seq_elemento		= nr_seq_sodio_w
			and		cd_material		= cd_material_w
			and		coalesce(ie_tipo,'NPT')	= 'NPT';
		else
			select	dividir(qt_volume_w, qt_conversao_ml)
			into STRICT	qt_fosforo_w
			from	nut_elem_material
			where	nr_seq_elemento		= nr_seq_sodio_w
			and		cd_material		= cd_material_w
			and		coalesce(ie_tipo,'NPT')	= 'NPT';
		end if;
	exception
	when others then
		qt_fosforo_w	:= 0;
	end;

	select	coalesce(max(a.qt_diaria),0),
			coalesce(max(b.nr_sequencia),0)
	into STRICT	qt_diaria_w,
			nr_seq_material_w
	from	nut_pac_elem_mat b,
			nut_pac_elemento a
	where	a.nr_sequencia	= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_sodio_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p;

	select	coalesce(max(c.qt_conversao_ml),0)
	into STRICT	qt_conversao_ml_w
	from	nut_elem_material c,
			nut_pac_elem_mat b,
			nut_pac_elemento a
	where	b.nr_seq_elem_mat	= c.nr_sequencia
	and		a.nr_sequencia		= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_sodio_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p
	and		coalesce(c.ie_tipo,'NPT')	= 'NPT';

/* Atualizar dados do potássio */

	/*Tirar do total de mEq do Sódio, os Meqs de Sódio que vieram do FÓSFORO orgânico e do Bicarbonato.
	Só então Gerar os mls do produto do Sódio, geralmente Cloreto de Sódio.*/
	if (ie_arredonda_npt_w = 'S') then
		qt_diaria_w	:= qt_diaria_sodio_w;
	else
		qt_diaria_w	:= qt_diaria_sodio_w - qt_fosforo_w;
	end if;

	--qt_diaria_w	:= qt_diaria_w - qt_pot_clor_fosforo_w;
	if (qt_diaria_w < 0) then
		qt_diaria_w		:= 0;
	end if;

	update	nut_pac_elemento
	set		qt_diaria	= qt_diaria_w
	where	nr_seq_nut_pac	= nr_sequencia_p
	and		nr_seq_elemento	= nr_seq_sodio_w;

	if (ie_arredonda_npt_w = 'S') then
		if (qt_diaria_sodio_w < qt_fosforo_w) then
			qt_volume_w	:= 0;
		else
			qt_volume_w	:= (qt_diaria_sodio_w - qt_fosforo_w) * qt_conversao_ml_w;
		end if;

		qt_volume_w	:= ceil(qt_volume_w * 100) / 100;
	else
		qt_volume_w	:= qt_diaria_w * qt_conversao_ml_w;
	end if;

	update	nut_pac_elem_mat
	set		qt_volume	= qt_volume_w
	where	nr_sequencia	= nr_seq_material_w;
end if;


/* Ajustar MEQ de potássio em função de que parte do mesmo já vem com o Fosfato de potássio do elemento Fósforo */

/* Obter dados do Fósforo e do fosfato de potássio */

if (ie_ajustar_potassio_w = 'S') then
	select coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_potassio_w
	from	nut_elemento
	where	ie_tipo_elemento	= 'K';

	select coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_fosforo_w
	from	nut_elemento
	where	ie_tipo_elemento	= 'F';

	select	coalesce(max(c.cd_material),0),
			coalesce(max(b.qt_volume),0),
			coalesce(max(a.qt_diaria),0)
	into STRICT	cd_material_w,
			qt_volume_w,
			qt_diaria_w
	from	nut_elem_material c,
			nut_pac_elem_mat b,
			nut_pac_elemento a
	where	b.nr_seq_elem_mat	= c.nr_sequencia
	and		a.nr_sequencia	= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_fosforo_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p
	and		coalesce(c.ie_tipo,'NPT')	= 'NPT';

/* Obter dados do potássio */

	begin
	select	dividir(qt_volume_w, qt_conversao_ml)
	into STRICT	qt_pot_clor_fosforo_w
	from	nut_elem_material
	where	nr_seq_elemento	= nr_seq_potassio_w
	and		cd_material		= cd_material_w
	and		coalesce(ie_tipo,'NPT')	= 'NPT';
	exception
	when others then
		qt_pot_clor_fosforo_w:= 0;
	end;
	select	coalesce(max(a.qt_diaria),0),
			coalesce(max(b.nr_sequencia),0)
	into STRICT	qt_diaria_w,
			nr_seq_material_w
	from	nut_pac_elem_mat b,
			nut_pac_elemento a
	where	a.nr_sequencia	= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_potassio_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p;

	select	coalesce(max(c.qt_conversao_ml),0)
	into STRICT	qt_conversao_ml_w
	from	nut_elem_material c,
			nut_pac_elem_mat b,
			nut_pac_elemento a
	where	b.nr_seq_elem_mat	= c.nr_sequencia
	and		a.nr_sequencia	= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_potassio_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p
	and		coalesce(c.ie_tipo,'NPT')	= 'NPT';

/* Atualizar dados do potássio */

	qt_diaria_w	:= qt_diaria_w - qt_pot_clor_fosforo_w;
	if (qt_diaria_w < 0) then
		qt_diaria_w		:= 0;
	end if;

	update	nut_pac_elemento
	set		qt_diaria		= qt_diaria_w
	where	nr_seq_nut_pac	= nr_sequencia_p
	and		nr_seq_elemento	= nr_seq_potassio_w;

	qt_volume_w	:= qt_diaria_w * qt_conversao_ml_w;

	if (ie_arredonda_npt_w = 'S') then
		--qt_volume_w	:= ceil(qt_volume_w * 100) / 100;
		qt_volume_w	:= round((qt_volume_w)::numeric, 2);
	end if;

	update	nut_pac_elem_mat
	set		qt_volume	= qt_volume_w
	where	nr_sequencia	= nr_seq_material_w;
end if;

if (ie_zinco_w = 'S') then
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_zinco_w
	from	nut_elemento
	where	ie_tipo_elemento	= 'Z'
	and		coalesce(ie_gerar_ped,'N')	= 'S'
	and		coalesce(ie_situacao,'I')	= 'A';

	select	coalesce(min(nr_sequencia),0)
	into STRICT	nr_seq_oligoelemento_w
	from	nut_elemento
	where	ie_tipo_elemento	= 'G'
	and		coalesce(ie_gerar_ped,'N')	= 'S'
	and		coalesce(ie_situacao,'I')	= 'A';

	select	coalesce(max(c.cd_material),0),
			coalesce(max(b.qt_volume),0),
			coalesce(max(a.qt_diaria),0)
	into STRICT	cd_material_w,
			qt_volume_w,
			qt_diaria_w
	from	nut_elem_material c,
			nut_pac_elem_mat b,
			nut_pac_elemento a
	where	b.nr_seq_elem_mat	= c.nr_sequencia
	and		a.nr_sequencia		= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_oligoelemento_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p
	and		coalesce(c.ie_tipo,'NPT')	= 'NPT';

/* Obter dados do Zinco
Pegar os valores do Zinco orgânico, porém a conversão deve ser de acordo com o cadastro do sódio, uma vez que o PRODUTO é o mesmo em ambos */
	if (ie_arredonda_npt_w = 'S') then
		select	max(qt_diaria)
		into STRICT	qt_diaria_zinco_w
		from	nut_pac_elemento a
		where	nr_seq_elemento		= nr_seq_zinco_w
		and		a.nr_seq_nut_pac	= nr_sequencia_p;
	else
		select	max(qt_diaria)
		into STRICT	qt_diaria_sodio_w
		from	nut_pac_elemento a
		where	nr_seq_elemento		= nr_seq_zinco_w
		and		a.nr_seq_nut_pac	= nr_sequencia_p;
	end if;

	begin
	select	dividir(qt_volume_w, qt_conversao_ml)
	into STRICT	qt_fosforo_w
	from	nut_elem_material
	where	nr_seq_elemento		= nr_seq_zinco_w
	and		cd_material		= cd_material_w
	and		coalesce(ie_tipo,'NPT')	= 'NPT'
	and		ie_situacao = 'A';
	exception
	when others then
		qt_fosforo_w	:= 0;
	end;

	select	coalesce(max(a.qt_diaria),0),
			coalesce(max(b.nr_sequencia),0)
	into STRICT	qt_diaria_w,
			nr_seq_material_w
	from	nut_pac_elem_mat b,
			nut_pac_elemento a
	where	a.nr_sequencia	= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_zinco_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p;

	select	coalesce(max(c.qt_conversao_ml),0)
	into STRICT	qt_conversao_ml_w
	from	nut_elem_material c,
			nut_pac_elem_mat b,
			nut_pac_elemento a
	where	b.nr_seq_elem_mat	= c.nr_sequencia
	and		a.nr_sequencia		= b.nr_seq_pac_elem
	and		a.nr_seq_elemento	= nr_seq_zinco_w
	and		a.nr_seq_nut_pac	= nr_sequencia_p
	and		coalesce(c.ie_tipo,'NPT')	= 'NPT';

/* Atualizar dados do potássio */

	/*Tirar do total de mEq do Sódio, os Meqs de Sódio que vieram do FÓSFORO orgânico e do Bicarbonato.
	Só então Gerar os mls do produto do Sódio, geralmente Cloreto de Sódio.*/
	if (ie_arredonda_npt_w = 'S') then
		qt_diaria_w	:= qt_diaria_zinco_w;
	else
		qt_diaria_w	:= qt_diaria_sodio_w - qt_fosforo_w;
	end if;

	--qt_diaria_w	:= qt_diaria_w - qt_pot_clor_fosforo_w;
	if (qt_diaria_w < 0) then
		qt_diaria_w		:= 0;
	end if;

	update	nut_pac_elemento
	set		qt_diaria	= qt_diaria_w
	where	nr_seq_nut_pac	= nr_sequencia_p
	and		nr_seq_elemento	= nr_seq_zinco_w;

	if (ie_arredonda_npt_w = 'S') then
		qt_volume_w	:= (qt_diaria_w - qt_fosforo_w) * qt_conversao_ml_w;
		--qt_volume_w := ceil(qt_volume_w * 100) / 100;
		qt_volume_w := round((qt_volume_w)::numeric, 2);

		if (qt_volume_w < 0) then
			qt_volume_w	:= 0;
		end if;
	else
		qt_volume_w	:= qt_diaria_w * qt_conversao_ml_w;
	end if;

	update	nut_pac_elem_mat
	set		qt_volume	= qt_volume_w
	where	nr_sequencia	= nr_seq_material_w;
end if;

/* Calcular a necessidade de Heparina da NPT */

/* Obtem se com base em 1 MEQ por ml da mesma */

select 	coalesce(max(a.nr_sequencia),0)
into STRICT	nr_seq_heparina_w
from	nut_elemento b,
		nut_pac_elemento a
where	b.ie_tipo_elemento	= 'H'
and		a.nr_seq_elemento	= b.nr_sequencia
and		a.nr_seq_nut_pac	= nr_sequencia_p;

if (nr_seq_heparina_w > 0) then
	select	coalesce(sum(obter_vol_elem_nut_pac(nr_sequencia)),0)
	into STRICT	qt_vol_total_w
	from	nut_pac_elemento
	where	nr_seq_nut_pac		= nr_sequencia_p;

	update	nut_pac_elemento
	set		qt_diaria		= qt_vol_total_w,
			qt_elem_kg_dia		= 0
	where	nr_sequencia		= nr_seq_heparina_w;

	select	coalesce(max(c.qt_conversao_ml),0)
	into STRICT	qt_conversao_ml_w
	from	nut_elem_material c,
			nut_pac_elem_mat b,
			nut_pac_elemento a
	where	b.nr_seq_elem_mat	= c.nr_sequencia
	and		b.nr_seq_pac_elem	= a.nr_sequencia
	and		a.nr_sequencia	= nr_seq_heparina_w
	and		coalesce(c.ie_tipo,'NPT')	= 'NPT';

	qt_volume_w	:= qt_vol_total_w * qt_conversao_ml_w;

	if (ie_arredonda_npt_w = 'S') then
		--qt_volume_w	:= ceil(qt_volume_w * 100) / 100;
		qt_volume_w	:= round((qt_volume_w)::numeric, 2);
	end if;

	update	nut_pac_elem_mat
	set		qt_volume		= qt_volume_w
	where	nr_seq_pac_elem	= nr_seq_heparina_w;
end if;

/* Aplicar o fator de correção em função do volume do equipo */

if (ie_correcao_w = 'S') and (qt_equipo_w > 0) then
	select	coalesce(sum(obter_vol_elem_nut_pac(nr_sequencia)),0)
	into STRICT	qt_vol_total_w
	from	nut_pac_elemento
	where	nr_seq_nut_pac	= nr_sequencia_p;

	if (ie_arredonda_npt_w = 'S') then
		qt_fator_correcao_w := ceil(dividir_sem_round((qt_aporte_hidrico_diario_w + qt_equipo_w), qt_aporte_hidrico_diario_w) * 10000) / 10000;
	else
		qt_fator_correcao_w := dividir_sem_round((qt_aporte_hidrico_diario_w + qt_equipo_w), qt_aporte_hidrico_diario_w);
	end if;

	open C05;
	loop
	fetch C05	into
		nr_seq_elemento_w,
		nr_seq_elem_mat_w,
		qt_volume_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */

		if (ie_arredonda_npt_w = 'S') then
			--qt_volume_w		:= ceil(qt_volume_w * 100) / 100;
			qt_volume_w		:= round((qt_volume_w)::numeric, 2);
			qt_vol_cor_w	:= qt_volume_w * qt_fator_correcao_w;
			--qt_vol_cor_w	:= ceil(qt_vol_cor_w * 100) / 100;
			qt_vol_cor_w	:= round((qt_vol_cor_w)::numeric, 2);
		else
			qt_vol_cor_w	:= (qt_volume_w * qt_fator_correcao_w);
		end if;

		update	nut_pac_elem_mat
		set		qt_vol_cor	= qt_vol_cor_w
		where	nr_sequencia	= nr_seq_elem_mat_w;

	end loop;
	close C05;

	if (ie_arredonda_npt_w = 'S') then
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_elem_agua_w
		from	nut_elemento b,
				nut_pac_elemento a
		where	a.nr_seq_nut_pac	= nr_sequencia_p
		and		a.nr_seq_elemento	= b.nr_sequencia
		and		b.ie_tipo_elemento	= 'A';

		select	sum(b.qt_vol_cor)
		into STRICT	qt_volume_total_w
		from	nut_pac_elem_mat b,
				nut_pac_elemento a
		where	a.nr_seq_nut_pac	= nr_sequencia_p
		and		a.nr_sequencia		= b.nr_seq_pac_elem
		and 	a.nr_sequencia		<> nr_seq_elem_agua_w
		and		coalesce(b.qt_volume,0)	> 0;

		qt_vol_cor_w	:= trunc((qt_aporte_hidrico_diario_w + qt_equipo_w) - qt_volume_total_w,2);

		update	nut_pac_elem_mat
		set		qt_vol_cor	= qt_vol_cor_w
		where	nr_seq_pac_elem	= nr_seq_elem_agua_w;
	end if;
else
	update	nut_pac_elem_mat
	set		qt_vol_cor	= qt_volume
	where	nr_seq_pac_elem in (
		SELECT nr_sequencia
		from	nut_pac_elemento
		where	nr_seq_nut_pac	= nr_sequencia_p);
end if;

/* Dividir o volume do elemento para cada uma das fases que o elemento define */

open c03;
loop
fetch c03	into
	nr_seq_elem_w,
	ie_prim_fase_w,
	ie_seg_fase_w,
	ie_terc_fase_w,
	ie_quar_fase_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	qt_fase_w	:= 0;
	if (ie_prim_fase_w = 'S') then
		qt_fase_w	:= 1;
	end if;
	if (ie_seg_fase_w = 'S') then
		qt_fase_w	:= qt_fase_w + 1;
	end if;
	if (ie_terc_fase_w = 'S') then
		qt_fase_w	:= qt_fase_w + 1;
	end if;
	if (ie_quar_fase_w = 'S') then
		qt_fase_w	:= qt_fase_w + 1;
	end if;

	open c04;
	loop
	fetch c04	into
		qt_volume_w,
		nr_seq_elem_mat_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		qt_fase1_w	:= null;
		qt_fase2_w	:= null;
		qt_fase3_w	:= null;
		qt_fase4_w	:= null;
		if (qt_volume_w > 0) then
			qt_volume_w	:= dividir(qt_volume_w, qt_fase_w);
		end if;
		if (ie_prim_fase_w = 'S') then
			qt_fase1_w	:= qt_volume_w;
		end if;
		if (ie_seg_fase_w = 'S') then
			qt_fase2_w	:= qt_volume_w;
		end if;
		if (ie_terc_fase_w = 'S') then
			qt_fase3_w	:= qt_volume_w;
		end if;
		if (ie_quar_fase_w = 'S') then
			qt_fase4_w	:= qt_volume_w;
		end if;

		update	nut_pac_elem_mat
		set		qt_vol_1_fase	= qt_fase1_w,
				qt_vol_2_fase	= qt_fase2_w,
				qt_vol_3_fase	= qt_fase3_w,
				qt_vol_4_fase	= qt_fase4_w
		where	nr_sequencia	= nr_seq_elem_mat_w;

	end loop;
	close c04;

end loop;
close c03;

select	coalesce(sum(c.qt_volume),0)
into STRICT	qt_volume_total_w
from	nut_pac_elem_mat c,
		nut_pac_elemento b,
		nut_pac a
where	a.nr_sequencia	= nr_sequencia_p
and		a.nr_sequencia	= b.nr_seq_nut_pac
and		b.nr_sequencia	= c.nr_seq_pac_elem;

select	coalesce(max(nr_horas_validade),0)
into STRICT	nr_horas_validade_w
from	prescr_medica
where	nr_prescricao	= nr_prescricao_w;

select	coalesce(sum(obter_vol_elem_nut_pac(nr_sequencia)),0)
into STRICT	qt_vol_total_w
from	nut_pac_elemento
where	nr_seq_nut_pac	= nr_sequencia_p;

if (ie_calculo_auto_w	<> 'N') then
	qt_gotejo_w		:= round(dividir(qt_volume_total_w,coalesce(qt_hora_inf_w,nr_horas_validade_w)),nr_casas_gotejo_w);
end if;

-- fator cálcio = 0,25
-- fator fósforo = 0,323
/* Fósforo */

select	coalesce(sum(a.qt_elem_kg_dia),0)
into STRICT	qt_fosforo_w
from	nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_seq_elemento	= b.nr_sequencia
and		b.ie_tipo_elemento	= 'F';

/* cálcio */

select	coalesce(sum(a.qt_elem_kg_dia),0)
into STRICT	qt_calcio_w
from	nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_seq_elemento	= b.nr_sequencia
and		b.ie_tipo_elemento	= 'I';

if (ie_geracao_fos_cal_w = 'S') then
	qt_rel_cal_fosforo_w	:= qt_rel_cal_fos_w;
elsif (qt_fosforo_w > 0) and (qt_calcio_w > 0) then
	qt_rel_cal_fosforo_w	:= Dividir(qt_calcio_w, qt_fosforo_w);
end if;

if (coalesce(ie_alterou_volume_p,'N') = 'N') then
	if (ie_arredonda_npt_w = 'S') then
		update	nut_pac_elemento
		set		pr_concentracao	= dividir((qt_diaria * 100), qt_aporte_hidrico_diario_w),
				--qt_volume_final = ceil(obter_vol_elem_nut_pac(nr_sequencia) * 100) / 100
				qt_volume_final = round((obter_vol_elem_nut_pac(nr_sequencia))::numeric, 2)
		where	nr_seq_nut_Pac	= nr_sequencia_p
		and		cd_unidade_medida like '%g%';
	else
		update	nut_pac_elemento
		set		pr_concentracao	= dividir((qt_diaria * 100), qt_aporte_hidrico_diario_w),
				qt_volume_final = obter_vol_elem_nut_pac(nr_sequencia)
		where	nr_seq_nut_Pac	= nr_sequencia_p
		and		cd_unidade_medida like '%g%';
	end if;
else
	if (ie_arredonda_npt_w = 'S') then
		update	nut_pac_elemento
		set		pr_concentracao	= dividir((qt_diaria * 100), qt_aporte_hidrico_diario_w),
				--qt_volume_final = ceil(obter_vol_elem_nut_pac(nr_sequencia) * 100) / 100
				qt_volume_final = round((obter_vol_elem_nut_pac(nr_sequencia))::numeric, 2)
		where	nr_seq_nut_Pac	= nr_sequencia_p
		and		cd_unidade_medida like '%g%'
		and		obter_tipo_elemento(nr_seq_elemento) <> 'C';
	else
		update	nut_pac_elemento
		set		pr_concentracao	= dividir((qt_diaria * 100), qt_aporte_hidrico_diario_w),
				qt_volume_final = obter_vol_elem_nut_pac(nr_sequencia)
		where	nr_seq_nut_Pac	= nr_sequencia_p
		and		cd_unidade_medida like '%g%'
		and		obter_tipo_elemento(nr_seq_elemento) <> 'C';
	end if;
end if;

if (ie_arredonda_npt_w = 'S') then
	update	nut_pac_elemento
	set		pr_concentracao	= 0,
			--qt_volume_final = ceil(obter_vol_elem_nut_pac(nr_sequencia) * 100) / 100
			qt_volume_final = round((obter_vol_elem_nut_pac(nr_sequencia))::numeric, 2)
	where	nr_seq_nut_pac	= nr_sequencia_p
	and		cd_unidade_medida not like '%g%';
else
	update	nut_pac_elemento
	set		pr_concentracao	= 0,
			qt_volume_final = Obter_vol_elem_nut_pac(NR_SEQUENCIA)
	where	nr_seq_nut_pac	= nr_sequencia_p
	and		cd_unidade_medida not like '%g%';
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

select	sum(qt_volume_final)
into STRICT	qt_volume_final_w
from	nut_pac_elemento
where	nr_seq_nut_Pac	= nr_sequencia_p;

if (ie_arredonda_npt_w = 'S') then
	--qt_volume_final_w	:= ceil(qt_volume_final_w * 100) / 100;
	qt_volume_final_w	:= round((qt_volume_final_w)::numeric, 2);
end if;

--- Quantidade de Carboidratos
select	coalesce(sum(a.qt_kcal),0)
into STRICT	qt_kcal_carboidrato_w
from	nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_seq_elemento	= b.nr_sequencia
and		b.ie_tipo_elemento	= 'C'
and 	coalesce(a.ie_prod_adicional,'N') = 'N';

--- Quantidade de Proteína
select	coalesce(sum(qt_kcal),0)
into STRICT	qt_kcal_proteina_w
from	nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_seq_elemento	= b.nr_sequencia
and		b.ie_tipo_elemento	= 'P'
and 	coalesce(a.ie_prod_adicional,'N') = 'N';

--- Quantidade de Lípidio
select	coalesce(sum(qt_kcal),0)
into STRICT	qt_kcal_lipidio_w
from	nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_seq_elemento	= b.nr_sequencia
and		b.ie_tipo_elemento	= 'L'
and 	coalesce(a.ie_prod_adicional,'N') = 'N';

--- Quantidade total dos elementos
select	coalesce(sum(qt_kcal),0)
into STRICT	qt_kcal_totais_w
from	nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_seq_elemento	= b.nr_sequencia
and		b.ie_tipo_elemento in ('C','P','L')
and		coalesce(a.ie_prod_adicional,'N') = 'N';

pr_proteina_w					:= dividir((qt_kcal_proteina_w * 100),qt_kcal_totais_w);
pr_lipidio_w					:= dividir((qt_kcal_lipidio_w * 100),qt_kcal_totais_w);
pr_carboidrato_w				:= dividir((qt_kcal_carboidrato_w * 100),qt_kcal_totais_w);

select	coalesce(sum(qt_diaria),0)
into STRICT	qt_diaria_calcio_w
from	nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac	= nr_sequencia_p
and		a.nr_seq_elemento	= b.nr_sequencia
and		b.ie_tipo_elemento	= 'I';

if (qt_diaria_calcio_w > 0) then
	select	coalesce(sum(qt_volume_final),0)
	into STRICT	qt_vol_total_w
	from	nut_pac_elemento
	where	nr_seq_nut_pac		= nr_sequencia_p;
	qt_conc_calcio_w	:= dividir((qt_diaria_calcio_w * 1000), qt_vol_total_w);
end if;

update	nut_pac
set		qt_gotejo_npt		= qt_gotejo_w,
		qt_conc_calcio		= qt_conc_calcio_w,
		qt_rel_cal_fos		= qt_rel_cal_fosforo_w,
		pr_carboidrato		= coalesce(pr_carboidrato_w,0),
		pr_lipidio			= coalesce(pr_lipidio_w,0),
		pr_proteina			= coalesce(pr_proteina_w,0),
		qt_volume_diario	= qt_volume_final_w
where	nr_sequencia		= nr_sequencia_p;


if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

CALL calcula_osmolaridade_npt_ped(nr_sequencia_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_nut_pac_ped ( nr_sequencia_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_alterou_volume_p text default 'N') FROM PUBLIC;

