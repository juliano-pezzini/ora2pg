-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_rfc_pessoa_juridica ( cd_cgc_p text, cd_estabelecimento_p bigint, nm_usuario_p text, cd_rfc_p INOUT text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
-------------------------------------------------------------------------------------------------------------------
Referências:
	http://www.consisa.com.mx/rfc.html
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_razao_social_w			pessoa_juridica.ds_razao_social%type;
cd_rfc_w				pessoa_fisica.cd_rfc%type	:= '';
ds_letra_w				varchar(255);
ds_primeiro_nome_w			varchar(255)	:= '';
ds_segundo_nome_w			varchar(255)	:= '';
ds_terceiro_nome_w			varchar(255)	:= '';
ds_segundo_nome_aux_w			varchar(255)	:= '';
ds_terceiro_nome_aux_w			varchar(255)	:= '';
ds_vazio_w				varchar(255)	:= '';
qt_nome_w				bigint	:= 1;
dt_criacao_w				timestamp;


BEGIN
select	upper(a.ds_razao_social),
	a.dt_criacao
into STRICT	ds_razao_social_w,
	dt_criacao_w
from	pessoa_juridica	a
where	a.cd_cgc	= cd_cgc_p;

ds_razao_social_w	:= eliminar_caracteres_pj_mx(ds_razao_social_w);

-- Regra 3 e 4
SELECT * FROM separar_nome_pj_mx(	ds_razao_social_w, ds_primeiro_nome_w, ds_segundo_nome_w, ds_terceiro_nome_w) INTO STRICT ds_primeiro_nome_w, ds_segundo_nome_w, ds_terceiro_nome_w;

ds_primeiro_nome_w	:= trim(both ds_primeiro_nome_w);
ds_segundo_nome_w	:= trim(both ds_segundo_nome_w);
ds_terceiro_nome_w	:= trim(both ds_terceiro_nome_w);

-- Regra 10
if (ds_primeiro_nome_w IS NOT NULL AND ds_primeiro_nome_w::text <> '') and (obter_se_somente_numero_mx(ds_primeiro_nome_w) = 'S') then
	ds_primeiro_nome_w	:= upper(obter_numero_extenso_mx(ds_primeiro_nome_w,'M'));

	ds_primeiro_nome_w	:= trim(both eliminar_caracteres_pj_mx(ds_primeiro_nome_w));

	SELECT * FROM separar_nome_pj_mx(	ds_primeiro_nome_w, ds_primeiro_nome_w, ds_segundo_nome_aux_w, ds_terceiro_nome_aux_w) INTO STRICT ds_primeiro_nome_w, ds_segundo_nome_aux_w, ds_terceiro_nome_aux_w;


	if (ds_segundo_nome_aux_w IS NOT NULL AND ds_segundo_nome_aux_w::text <> '') then
		ds_segundo_nome_w	:= ds_segundo_nome_aux_w;
	end if;

	if (ds_terceiro_nome_aux_w IS NOT NULL AND ds_terceiro_nome_aux_w::text <> '') then
		ds_terceiro_nome_w	:= ds_terceiro_nome_aux_w;
	end if;

	ds_primeiro_nome_w	:= trim(both ds_primeiro_nome_w);
end if;

if (ds_segundo_nome_w IS NOT NULL AND ds_segundo_nome_w::text <> '') and (obter_se_somente_numero_mx(ds_segundo_nome_w) = 'S') then
	ds_segundo_nome_w	:= upper(obter_numero_extenso_mx(ds_segundo_nome_w,'M'));

	ds_segundo_nome_w	:= trim(both eliminar_caracteres_pj_mx(ds_segundo_nome_w));

	SELECT * FROM separar_nome_pj_mx(	ds_segundo_nome_w, ds_segundo_nome_w, ds_terceiro_nome_aux_w, ds_vazio_w) INTO STRICT ds_segundo_nome_w, ds_terceiro_nome_aux_w, ds_vazio_w;

	if (ds_terceiro_nome_aux_w IS NOT NULL AND ds_terceiro_nome_aux_w::text <> '') then
		ds_terceiro_nome_w	:= ds_terceiro_nome_aux_w;
	end if;

	ds_segundo_nome_w	:= trim(both ds_segundo_nome_w);
end if;

if (ds_terceiro_nome_w IS NOT NULL AND ds_terceiro_nome_w::text <> '') and (obter_se_somente_numero_mx(ds_terceiro_nome_w) = 'S') then
	ds_terceiro_nome_w	:= trim(both upper(obter_numero_extenso_mx(ds_terceiro_nome_w,'M')));
	ds_terceiro_nome_w	:= trim(both ds_terceiro_nome_w);
end if;
-- Fim regra 10
-- Regra 1
if (ds_terceiro_nome_w IS NOT NULL AND ds_terceiro_nome_w::text <> '') then
	cd_rfc_w	:= substr(cd_rfc_w || substr(ds_primeiro_nome_w,1,1),1,10);
	cd_rfc_w	:= substr(cd_rfc_w || substr(ds_segundo_nome_w,1,1),1,10);
	cd_rfc_w	:= substr(cd_rfc_w || substr(ds_terceiro_nome_w,1,1),1,10);
elsif (coalesce(ds_terceiro_nome_w::text, '') = '') and (ds_segundo_nome_w IS NOT NULL AND ds_segundo_nome_w::text <> '') then
	-- Regra 6
	cd_rfc_w	:= substr(cd_rfc_w || substr(ds_primeiro_nome_w,1,1),1,10);
	cd_rfc_w	:= substr(cd_rfc_w || substr(ds_segundo_nome_w,1,2),1,10);
elsif (coalesce(ds_segundo_nome_w::text, '') = '') then
	-- Regra 7 e 8
	cd_rfc_w	:= substr(cd_rfc_w || substr(rpad(ds_primeiro_nome_w,3,'X'),1,3),1,10);
end if;

cd_rfc_w	:= substr(cd_rfc_w || '-',1,10);
-- Regra 2
cd_rfc_w	:= substr(cd_rfc_w || substr(to_char(dt_criacao_w, 'YYMMDD'),1,6),1,10);

cd_rfc_p	:= cd_rfc_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_rfc_pessoa_juridica ( cd_cgc_p text, cd_estabelecimento_p bigint, nm_usuario_p text, cd_rfc_p INOUT text) FROM PUBLIC;

