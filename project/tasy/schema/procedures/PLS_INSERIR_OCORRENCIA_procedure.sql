-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_inserir_ocorrencia ( nr_seq_segurado_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_requisicao_p bigint, nr_seq_guia_plano_p bigint, nr_seq_conta_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint, nr_seq_regra_p bigint, nm_usuario_p text, ds_observacao_p text, nr_seq_motivo_glosa_p bigint, ie_tipo_item_p bigint, cd_estabelecimento_p bigint, ie_consist_grau_espc_p text, nr_seq_execucao_p bigint, nr_seq_oc_benef_p INOUT bigint, nr_seq_conta_pos_estab_p bigint, nr_seq_proc_partic_p bigint, ie_lib_manual_p text, nr_seq_ocor_pag_p bigint, qt_excedido_P pls_conta_proc.qt_excedido%type default null, nr_seq_oc_cta_comb_p pls_ocorrencia_benef.nr_seq_oc_cta_comb%type default null, ie_proc_mat_novo_pos_p text default null) AS $body$
DECLARE


ds_documentacao_ww		varchar(4000);
ie_glosa_w			varchar(255)	:= null;
ie_glosar_faturamento_w		varchar(255);
cd_motivo_glosa_w		varchar(10);
cd_ocorrencia_w			varchar(10);
nr_seq_nivel_lib_w		varchar(10);
ie_tipo_glosa_w			varchar(10);
ie_documento_fisico_w		varchar(10);
ie_pre_analise_w		varchar(2);
ie_auditoria_w			varchar(1);
ie_fechar_conta_w		varchar(1);
ie_finalizar_analise_w		varchar(1);
ie_situacao_w			varchar(1)	:= 'A';
ie_forma_inativacao_w		varchar(2)	:= null;
vl_calculado_w			pls_conta_proc.vl_procedimento%type;
vl_glosa_w			pls_conta_proc.vl_procedimento%type	:= 0;
vl_solicitado_w			pls_conta_proc.vl_procedimento%type;
vl_unitario_w			pls_conta_proc.vl_procedimento%type;
nr_nivel_liberacao_w		bigint;
nr_seq_benef_w			bigint;
qt_glosa_w			pls_conta_proc.qt_procedimento%type := 0;
qt_solicitado_w			pls_conta_proc.qt_procedimento%type;
qt_autorizado_w			pls_conta_proc.qt_procedimento%type;
ie_regra_combinada_w		pls_ocorrencia.ie_regra_combinada%type;
nr_seq_glosa_w			bigint;
nr_seq_conta_proc_w		bigint	:= null;
nr_seq_conta_mat_w		bigint	:= null;
nr_seq_ocor_ant_w		bigint;
nr_seq_ocor_benef_w		bigint;
nr_seq_conta_pos_w		bigint;
qt_ocorr_pos_w			bigint;
nr_seq_analise_pos_w		bigint;
ie_existe_ocorrencia_w		varchar(1);
qt_ocor_cta_combinada_w		bigint;
ie_respeita_padrao_glosa_w	pls_ocorrencia.ie_respeita_padrao_glosa%type;
ie_gerar_log_regra_ocor_aut_w	varchar(1);
ds_observacao_w			pls_ocorrencia.ds_observacao%type;
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type;
ie_tipo_item_w			varchar(1) := null;
ie_origem_ocorrencia_w		pls_oc_cta_combinada.ie_evento%type;


BEGIN
if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	nr_seq_conta_proc_w	:= nr_seq_proc_p;
	nr_seq_conta_mat_w	:= nr_seq_mat_p;
end if;

select 	coalesce(max(ie_novo_pos_estab),'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false;

select	max(ie_evento)
into STRICT	ie_origem_ocorrencia_w
from	pls_oc_cta_combinada
where	nr_sequencia = nr_seq_oc_cta_comb_p;

begin
select	coalesce(ie_auditoria_conta,'N'),
	nr_seq_nivel_lib,
	ie_fechar_conta,
	ie_tipo_glosa,
	coalesce(ie_documento_fisico,'N'),
	coalesce(ie_pre_analise,'N'),
	coalesce(ie_finalizar_analise,'S'),
	coalesce(ie_glosar_faturamento,'N'),
	coalesce(ie_glosa,'N'),
	coalesce(ie_regra_combinada,'N'),
	coalesce(ie_respeita_padrao_glosa_w,'S'),
	ds_observacao
into STRICT	ie_auditoria_w,
	nr_seq_nivel_lib_w,
	ie_fechar_conta_w,
	ie_tipo_glosa_w,
	ie_documento_fisico_w,
	ie_pre_analise_w,
	ie_finalizar_analise_w,
	ie_glosar_faturamento_w,
	ie_glosa_w,
	ie_regra_combinada_w,
	ie_respeita_padrao_glosa_w,
	ds_observacao_w
from	pls_ocorrencia
where	nr_sequencia	= nr_seq_ocorrencia_p;
exception
when others then
	ie_auditoria_w		:= 'N';
	nr_nivel_liberacao_w	:= null;
end;

if (ds_observacao_p IS NOT NULL AND ds_observacao_p::text <> '') then
	ds_observacao_w :=  substr(ds_observacao_p || ds_observacao_w, 1, 4000);
end if;
/* Francisco - 25/09/2012 - Adriano solicitou para ocorrência informativa já ser incluída inativa */

if (ie_auditoria_w = 'N') then
	ie_situacao_w		:= 'I';
	ie_forma_inativacao_w	:= 'U';
end if;

select	max(nr_nivel_liberacao)
into STRICT	nr_nivel_liberacao_w
from	pls_nivel_liberacao
where	nr_sequencia	= nr_seq_nivel_lib_w;

/*Somente válido para contas médicas*/

if (ie_tipo_item_p in (3,4)) then
	if (coalesce(nr_seq_proc_p,0) > 0) then
		select	qt_procedimento_imp,
			vl_procedimento_imp,
			qt_autorizado,
			(vl_procedimento/CASE WHEN coalesce(qt_procedimento_imp,0)=0 THEN 1  ELSE qt_procedimento_imp END ),
			vl_procedimento
		into STRICT	qt_solicitado_w,
			vl_solicitado_w,
			qt_autorizado_w,
			vl_unitario_w,
			vl_calculado_w
		from	pls_conta_proc
		where	nr_sequencia	= nr_seq_proc_p;

		if (pls_obter_ie_valor_glosa(nr_seq_proc_p, 'P') = 1) then
			qt_glosa_w	:= qt_solicitado_w;
			vl_glosa_w	:= vl_solicitado_w;
		else
			qt_glosa_w	:= qt_solicitado_w;
			vl_glosa_w	:= vl_calculado_w;
		end if;
	elsif (coalesce(nr_seq_mat_p,0) > 0) then
		select	qt_material_imp,
			vl_material_imp,
			qt_autorizado,
			(vl_material/CASE WHEN coalesce(qt_material_imp,0)=0 THEN  1  ELSE qt_material_imp END ),
			vl_material
		into STRICT	qt_solicitado_w,
			vl_solicitado_w,
			qt_autorizado_w,
			vl_unitario_w,
			vl_calculado_w
		from	pls_conta_mat
		where	nr_sequencia	= nr_seq_mat_p;

		if (pls_obter_ie_valor_glosa(nr_seq_mat_p, 'M') = 1) then
			qt_glosa_w	:= qt_solicitado_w;
			vl_glosa_w	:= vl_solicitado_w;
		else
			qt_glosa_w	:= qt_solicitado_w;
			vl_glosa_w	:= vl_calculado_w;
		end if;
	end if;
end if;

select	nextval('pls_ocorrencia_benef_seq')
into STRICT	nr_seq_benef_w
;

select	max(a.ds_documentacao)
into STRICT	ds_documentacao_ww
from	pls_ocorrencia	a
where 	a.nr_sequencia	= nr_seq_ocorrencia_p;

ie_existe_ocorrencia_w		:= pls_verificar_se_existe_ocorr(nr_seq_guia_plano_p, nr_seq_requisicao_p, nr_seq_execucao_p,
								 nr_seq_proc_p, nr_seq_mat_p, nr_seq_ocorrencia_p);

if (ie_existe_ocorrencia_w	= 'N') then

	if ( ie_regra_combinada_w = 'S' ) then
		/* Select utilizado para verificar se os registros criados na tabela  PLS_OC_CTA_COMBINADA são para o evento Importação A500,
		    caso seja do A500 a ocorrência é gerada como Pré-analise. Não é verificado as datas de vigências, pois as mesmas são validadas dentro dos filtros  */
		select 	count(1)
		into STRICT	qt_ocor_cta_combinada_w
		from 	pls_oc_cta_combinada
		where 	nr_seq_ocorrencia = nr_seq_ocorrencia_p
		and	ie_evento = 'PTU';

		if ( qt_ocor_cta_combinada_w > 0 ) then
			ie_pre_analise_w := 'S';
		end if;
	end if;

	if (ie_novo_pos_estab_w = 'N' or coalesce(ie_proc_mat_novo_pos_p::text, '') = '') then
		insert into pls_ocorrencia_benef(nr_sequencia, nr_seq_segurado, nr_seq_ocorrencia,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec, nr_seq_requisicao, nr_seq_conta,
			nr_seq_proc, nr_seq_mat, nr_seq_regra,
			nr_seq_guia_plano, ie_auditoria, nr_nivel_liberacao,
			ds_observacao, ie_fechar_conta, qt_glosa,
			vl_glosa, nr_seq_execucao, ie_tipo_glosa,
			ie_documento_fisico, ie_pre_analise,
			ds_documentacao, nr_seq_conta_pos_estab, nr_seq_proc_partic,
			nr_seq_conta_proc, nr_seq_conta_mat, ie_situacao,
			ie_finalizar_analise, ie_lib_manual, ie_forma_inativacao,
			nr_seq_ocor_pag, qt_excedido, nr_seq_oc_cta_comb)
		values (nr_seq_benef_w, nr_seq_segurado_p, nr_seq_ocorrencia_p,
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, nr_seq_requisicao_p, nr_seq_conta_p,
			nr_seq_proc_p, nr_seq_mat_p, nr_seq_regra_p,
			nr_seq_guia_plano_p, ie_auditoria_w, nr_nivel_liberacao_w,
			ds_observacao_w, ie_fechar_conta_w, qt_glosa_w,
			vl_glosa_w, nr_seq_execucao_p, ie_tipo_glosa_w,
			ie_documento_fisico_w, ie_pre_analise_w,
			ds_documentacao_ww, nr_seq_conta_pos_estab_p, nr_seq_proc_partic_p,
			nr_seq_conta_proc_w, nr_seq_conta_mat_w, ie_situacao_w,
			ie_finalizar_analise_w, coalesce(ie_lib_manual_p,'N'), ie_forma_inativacao_w,
			nr_seq_ocor_pag_p, qt_excedido_p, nr_seq_oc_cta_comb_p);

		-- Grava o histórico do lançamento da ocorrência
		CALL pls_gerar_ocor_cta_hist(nr_seq_conta_p, nr_seq_ocorrencia_p, nm_usuario_p, 'L', ie_origem_ocorrencia_w);
	else
		if (ie_proc_mat_novo_pos_p IS NOT NULL AND ie_proc_mat_novo_pos_p::text <> '') then

			if (ie_proc_mat_novo_pos_p = 'P') then
				insert into pls_ocorrencia_benef(nr_sequencia, nr_seq_segurado, nr_seq_ocorrencia,
					dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
					nm_usuario_nrec, nr_seq_requisicao, nr_seq_conta,
					nr_seq_proc, nr_seq_mat, nr_seq_regra,
					nr_seq_guia_plano, ie_auditoria, nr_nivel_liberacao,
					ds_observacao, ie_fechar_conta, qt_glosa,
					vl_glosa, nr_seq_execucao, ie_tipo_glosa,
					ie_documento_fisico, ie_pre_analise,
					ds_documentacao, nr_seq_conta_pos_proc, nr_seq_proc_partic,
					nr_seq_conta_proc, nr_seq_conta_mat, ie_situacao,
					ie_finalizar_analise, ie_lib_manual, ie_forma_inativacao,
					nr_seq_ocor_pag, qt_excedido, nr_seq_oc_cta_comb)
				values (nr_seq_benef_w, nr_seq_segurado_p, nr_seq_ocorrencia_p,
					clock_timestamp(), nm_usuario_p, clock_timestamp(),
					nm_usuario_p, nr_seq_requisicao_p, nr_seq_conta_p,
					nr_seq_proc_p, nr_seq_mat_p, nr_seq_regra_p,
					nr_seq_guia_plano_p, ie_auditoria_w, nr_nivel_liberacao_w,
					ds_observacao_w, ie_fechar_conta_w, qt_glosa_w,
					vl_glosa_w, nr_seq_execucao_p, ie_tipo_glosa_w,
					ie_documento_fisico_w, ie_pre_analise_w,
					ds_documentacao_ww, nr_seq_conta_pos_estab_p, nr_seq_proc_partic_p,
					nr_seq_conta_proc_w, nr_seq_conta_mat_w, ie_situacao_w,
					ie_finalizar_analise_w, coalesce(ie_lib_manual_p,'N'), ie_forma_inativacao_w,
					nr_seq_ocor_pag_p, qt_excedido_p, nr_seq_oc_cta_comb_p);

				-- Grava o histórico do lançamento da ocorrência
				CALL pls_gerar_ocor_cta_hist(nr_seq_conta_p, nr_seq_ocorrencia_p, nm_usuario_p, 'L', ie_origem_ocorrencia_w);
			else
				insert into pls_ocorrencia_benef(nr_sequencia, nr_seq_segurado, nr_seq_ocorrencia,
					dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
					nm_usuario_nrec, nr_seq_requisicao, nr_seq_conta,
					nr_seq_proc, nr_seq_mat, nr_seq_regra,
					nr_seq_guia_plano, ie_auditoria, nr_nivel_liberacao,
					ds_observacao, ie_fechar_conta, qt_glosa,
					vl_glosa, nr_seq_execucao, ie_tipo_glosa,
					ie_documento_fisico, ie_pre_analise,
					ds_documentacao, nr_seq_conta_pos_mat, nr_seq_proc_partic,
					nr_seq_conta_proc, nr_seq_conta_mat, ie_situacao,
					ie_finalizar_analise, ie_lib_manual, ie_forma_inativacao,
					nr_seq_ocor_pag, qt_excedido, nr_seq_oc_cta_comb)
				values (nr_seq_benef_w, nr_seq_segurado_p, nr_seq_ocorrencia_p,
					clock_timestamp(), nm_usuario_p, clock_timestamp(),
					nm_usuario_p, nr_seq_requisicao_p, nr_seq_conta_p,
					nr_seq_proc_p, nr_seq_mat_p, nr_seq_regra_p,
					nr_seq_guia_plano_p, ie_auditoria_w, nr_nivel_liberacao_w,
					ds_observacao_w, ie_fechar_conta_w, qt_glosa_w,
					vl_glosa_w, nr_seq_execucao_p, ie_tipo_glosa_w,
					ie_documento_fisico_w, ie_pre_analise_w,
					ds_documentacao_ww, nr_seq_conta_pos_estab_p, nr_seq_proc_partic_p,
					nr_seq_conta_proc_w, nr_seq_conta_mat_w, ie_situacao_w,
					ie_finalizar_analise_w, coalesce(ie_lib_manual_p,'N'), ie_forma_inativacao_w,
					nr_seq_ocor_pag_p, qt_excedido_p, nr_seq_oc_cta_comb_p);
				-- Grava o histórico do lançamento da ocorrência
				CALL pls_gerar_ocor_cta_hist(nr_seq_conta_p, nr_seq_ocorrencia_p, nm_usuario_p, 'L', ie_origem_ocorrencia_w);
			end if;

		end if;
	end if;

	--Realiza o Insert na tabela PLS_OCOR_AUT_BENEF_LOG - Caso parâmetro 21 for igual 'S' e não for ocorrência combinada
	ie_gerar_log_regra_ocor_aut_w	:= coalesce(obter_valor_param_usuario(1306, 21, Obter_Perfil_Ativo, nm_usuario_p, 0), 'N');

	if (ie_gerar_log_regra_ocor_aut_w = 'S') and (ie_regra_combinada_w = 'N') then
		if (nr_seq_guia_plano_p IS NOT NULL AND nr_seq_guia_plano_p::text <> '') then
			CALL pls_gerar_log_regra_ocor_aut(null, null,
				nr_seq_guia_plano_p, nr_seq_mat_p, nr_seq_proc_p,
				null, null, null,
				null, null, null,
				nr_seq_regra_p, nr_seq_benef_w, nm_usuario_p);
		elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
			CALL pls_gerar_log_regra_ocor_aut(null, null,
				null, null, null,
				nr_seq_requisicao_p, nr_seq_mat_p, nr_seq_proc_p,
				null, null, null,
				nr_seq_regra_p, nr_seq_benef_w, nm_usuario_p);
		elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
			CALL pls_gerar_log_regra_ocor_aut(null, null,
				null, null, null,
				null, null, null,
				nr_seq_execucao_p, nr_seq_mat_p, nr_seq_proc_p,
				nr_seq_regra_p, nr_seq_benef_w, nm_usuario_p);
		end if;
	end if;
end if;

nr_seq_oc_benef_p	:= nr_seq_benef_w;

/* Se possuir glosa vinculada no cadastro da ocorrência, então gera a glosa */

if (coalesce(nr_seq_motivo_glosa_p,0) > 0) then

	if (nr_seq_proc_partic_p IS NOT NULL AND nr_seq_proc_partic_p::text <> '') and (coalesce(nr_seq_glosa_w::text, '') = '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_glosa_w
		from	pls_conta_glosa
		where	nr_seq_proc_partic	= nr_seq_proc_partic_p
		and	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p
		and	coalesce(nr_seq_ocorrencia_benef::text, '') = ''
		and	((nr_seq_ocorrencia	= nr_seq_ocorrencia_p) or (ie_glosa_w = 'S'));
	elsif (nr_seq_mat_p IS NOT NULL AND nr_seq_mat_p::text <> '') and (coalesce(nr_seq_glosa_w::text, '') = '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_glosa_w
		from	pls_conta_glosa
		where	nr_seq_conta_mat	= nr_seq_mat_p
		and	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p
		and	coalesce(nr_seq_ocorrencia_benef::text, '') = ''
		and	((nr_seq_ocorrencia	= nr_seq_ocorrencia_p) or (ie_glosa_w = 'S'));
	elsif (nr_seq_proc_p IS NOT NULL AND nr_seq_proc_p::text <> '') and (coalesce(nr_seq_glosa_w::text, '') = '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_glosa_w
		from	pls_conta_glosa
		where	nr_seq_conta_proc	= nr_seq_proc_p
		and	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p
		and	coalesce(nr_seq_ocorrencia_benef::text, '') = ''
		and	((nr_seq_ocorrencia	= nr_seq_ocorrencia_p) or (ie_glosa_w = 'S'));
	elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_glosa_w
		from	pls_conta_glosa
		where	nr_seq_conta		= nr_seq_conta_p
		and	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p
		and	coalesce(nr_seq_ocorrencia_benef::text, '') = ''
		and	((nr_seq_ocorrencia	= nr_seq_ocorrencia_p) or (ie_glosa_w = 'S'));
	end if;

	if (coalesce(nr_seq_glosa_w,0) > 0) then
		update	pls_conta_glosa
		set	nr_seq_ocorrencia 	= nr_seq_ocorrencia_p,
			ie_situacao		= 'A',
			ie_fechar_conta		= CASE WHEN ie_respeita_padrao_glosa_w='S' THEN ie_fechar_conta  ELSE ie_fechar_conta_w END
		where	nr_sequencia		= nr_seq_glosa_w;

		select	max(nr_sequencia)
		into STRICT	nr_seq_ocor_ant_w
		from	pls_ocorrencia_benef
		where	nr_seq_glosa	= nr_seq_glosa_w;

		update	pls_ocorrencia_benef
		set	ie_situacao	= 'A',
			ie_fechar_conta	= ie_fechar_conta_w
		where	nr_sequencia	= nr_seq_ocor_ant_w;

		update	pls_ocorrencia_benef
		set	nr_seq_glosa    = nr_seq_glosa_w
		where 	nr_sequencia	= nr_seq_benef_w;
	else
		if (ie_consist_grau_espc_p = 'N') then
			cd_motivo_glosa_w	:= tiss_obter_motivo_glosa(nr_seq_motivo_glosa_p,'C');
			cd_ocorrencia_w		:= pls_obter_codigo_ocorrencia(nr_seq_ocorrencia_p);

			if (ie_tipo_item_p	in (5,6)) then
				CALL pls_gravar_requisicao_glosa(	cd_motivo_glosa_w, null, nr_seq_proc_p,
								nr_seq_mat_p, 'Glosa gerada através da ocorrência:' || cd_ocorrencia_w, nm_usuario_p,
								null, cd_estabelecimento_p, nr_seq_ocorrencia_p, '');
			elsif (ie_tipo_item_p in (1,2)) then
				CALL pls_gravar_motivo_glosa(cd_motivo_glosa_w, null, nr_seq_proc_p, nr_seq_mat_p,
							'Glosa gerada através da ocorrência:' || cd_ocorrencia_w, nm_usuario_p,
							'C','CG',null, '',nr_seq_benef_w);
			elsif (ie_tipo_item_p in (3,4)) then
				CALL pls_gravar_conta_glosa(	cd_motivo_glosa_w,null, nr_seq_proc_p, nr_seq_mat_p,
							coalesce(ie_lib_manual_p,'N'),'Glosa gerada através da ocorrência:' || cd_ocorrencia_w,
							nm_usuario_p,'A','SCE',
							null, cd_estabelecimento_p, nr_seq_benef_w, nr_seq_proc_partic_p);
			elsif (ie_tipo_item_p = 7) then
				CALL pls_gravar_motivo_glosa(cd_motivo_glosa_w, nr_seq_guia_plano_p, null, null,
							'Glosa gerada através da ocorrência:' || cd_ocorrencia_w, nm_usuario_p,
							'C','CG',null, '',nr_seq_benef_w);
			elsif (ie_tipo_item_p = 8) then
				CALL pls_gravar_conta_glosa(	cd_motivo_glosa_w,nr_seq_conta_p, null, null,
							coalesce(ie_lib_manual_p,'N'),'Glosa gerada através da ocorrência:' || cd_ocorrencia_w,
							nm_usuario_p,'A','SCE',
							null, cd_estabelecimento_p, nr_seq_benef_w, null);
			elsif (ie_tipo_item_p = 9) then
				CALL pls_gravar_requisicao_glosa(	cd_motivo_glosa_w, nr_seq_requisicao_p, null,
								null, 'Glosa gerada através da ocorrência:' || cd_ocorrencia_w, nm_usuario_p,
								null, cd_estabelecimento_p, nr_seq_ocorrencia_p,
								'');
			elsif (ie_tipo_item_p in (10,11)) then
				CALL pls_gravar_execucao_req_glosa(	cd_motivo_glosa_w, nr_seq_execucao_p, nr_seq_proc_p,
								nr_seq_mat_p, 'Glosa gerada através da ocorrência:' || cd_ocorrencia_w, nm_usuario_p,
								null, cd_estabelecimento_p, nr_seq_ocorrencia_p,
								null);
			end if;
		elsif (ie_consist_grau_espc_p = 'S') then
			select	cd_ocorrencia,
				tiss_obter_motivo_glosa(nr_seq_motivo_glosa,'C')
			into STRICT	cd_ocorrencia_w,
				cd_motivo_glosa_w
			from	pls_ocorrencia
			where	nr_sequencia	= nr_seq_ocorrencia_p;

			CALL pls_gravar_conta_glosa(	cd_motivo_glosa_w,nr_seq_conta_p, nr_seq_proc_p, null,
					'N','Glosa gerada através da ocorrência:' || cd_ocorrencia_w,
					nm_usuario_p,'A','CC',
					null, cd_estabelecimento_p, nr_seq_benef_w, null);
		end if;
	end if;
end if;

if (ie_glosar_faturamento_w = 'S') then

	if (coalesce(nr_seq_conta_pos_estab_p::text, '') = '') then

		if (ie_novo_pos_estab_w = 'N') then
			if (nr_seq_mat_p IS NOT NULL AND nr_seq_mat_p::text <> '') and (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_conta_pos_w
				from	pls_conta_pos_estabelecido	a
				where	a.nr_seq_conta		= nr_seq_conta_p
				and	((a.ie_situacao		= 'A') or (coalesce(a.ie_situacao::text, '') = ''))
				and	a.nr_seq_conta_mat	= nr_seq_mat_p;
			elsif (nr_seq_proc_p IS NOT NULL AND nr_seq_proc_p::text <> '') and (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_conta_pos_w
				from	pls_conta_pos_estabelecido	a
				where	a.nr_seq_conta		= nr_seq_conta_p
				and	((a.ie_situacao		= 'A') or (coalesce(a.ie_situacao::text, '') = ''))
				and	a.nr_seq_conta_proc	= nr_seq_proc_p;
			end if;
		else
			if (nr_seq_proc_p IS NOT NULL AND nr_seq_proc_p::text <> '') then
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_conta_pos_w
				from	pls_conta_pos_proc	a
				where	a.nr_seq_conta		= nr_seq_conta_p
				and	a.nr_seq_conta_proc	= nr_seq_proc_p;
			else
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_conta_pos_w
				from	pls_conta_pos_mat	a
				where	a.nr_seq_conta		= nr_seq_conta_p
				and	a.nr_seq_conta_mat	= nr_seq_mat_p;
			end if;
		end if;
	else
		nr_seq_conta_pos_w := nr_seq_conta_pos_estab_p;
	end if;

	if (nr_seq_conta_pos_w IS NOT NULL AND nr_seq_conta_pos_w::text <> '') then

		--Com geração de  pós-estabelecido antigo.
		if ( ie_novo_pos_estab_w = 'N' or coalesce(ie_proc_mat_novo_pos_p::text, '') = '') then
			select	count(1)
			into STRICT	qt_ocorr_pos_w
			from	pls_ocorrencia_benef	a
			where	a.nr_seq_conta_pos_estab	= nr_seq_conta_pos_w
			and	a.nr_seq_ocorrencia		= nr_seq_ocorrencia_p  LIMIT 1;

			if (qt_ocorr_pos_w = 0) then
				nr_seq_ocor_benef_w := pls_inserir_ocorrencia(nr_seq_segurado_p, nr_seq_ocorrencia_p, null, null, null, null, null, null, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_p, ie_tipo_item_p, cd_estabelecimento_p, 'N', null, nr_seq_ocor_benef_w, nr_seq_conta_pos_w, null, ie_lib_manual_p, nr_seq_benef_w);
			end if;

			select	a.nr_seq_analise
			into STRICT	nr_seq_analise_pos_w
			from	pls_conta_pos_estabelecido a
			where	a.nr_sequencia	= nr_seq_conta_pos_w;

			if (nr_seq_analise_pos_w IS NOT NULL AND nr_seq_analise_pos_w::text <> '') then

				if (ie_novo_pos_estab_w = 'N') then
					CALL pls_gerar_fluxo_audit_item_pos(nr_seq_analise_pos_w, null, nm_usuario_p);
				else
					CALL pls_gera_fluxo_audit_novo_pos(nr_seq_analise_pos_w, null, nm_usuario_p, cd_estabelecimento_p);
				end if;
			end if;

		--Se tiver utilizando geração de pós-estabelecido nova, necessita buscar e atualizar informações em tabelas distintas para materiais e procedimentos.
		else
			--Se pós foi informado na chamada da rotina ou obtido através da conta, necessita ainda verificar se estamos falando de materiais ou procedimentos
			-- para trabalhar com tabela correta. Aqui nesse IF é para procedimentos
			if	(((nr_seq_conta_pos_estab_p IS NOT NULL AND nr_seq_conta_pos_estab_p::text <> '') and coalesce(ie_proc_mat_novo_pos_p,'X') = 'P') or (nr_seq_conta_pos_w IS NOT NULL AND nr_seq_conta_pos_w::text <> '' AND nr_seq_proc_p IS NOT NULL AND nr_seq_proc_p::text <> ''))then

				select	count(1)
				into STRICT	qt_ocorr_pos_w
				from	pls_ocorrencia_benef	a
				where	a.nr_seq_conta_pos_proc	= nr_seq_conta_pos_w
				and	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_p  LIMIT 1;

				select	a.nr_seq_analise
				into STRICT	nr_seq_analise_pos_w
				from	pls_conta_pos_proc a
				where	a.nr_sequencia	= nr_seq_conta_pos_w;

				ie_tipo_item_w := 'P';
			end if;

			--Pós-estabelecido para mateirais
			if	(((nr_seq_conta_pos_estab_p IS NOT NULL AND nr_seq_conta_pos_estab_p::text <> '') and coalesce(ie_proc_mat_novo_pos_p,'X') = 'M') or (nr_seq_conta_pos_w IS NOT NULL AND nr_seq_conta_pos_w::text <> '' AND nr_seq_mat_p IS NOT NULL AND nr_seq_mat_p::text <> ''))then

				select	count(1)
				into STRICT	qt_ocorr_pos_w
				from	pls_ocorrencia_benef	a
				where	a.nr_seq_conta_pos_mat	= nr_seq_conta_pos_w
				and	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_p  LIMIT 1;

				select	a.nr_seq_analise
				into STRICT	nr_seq_analise_pos_w
				from	pls_conta_pos_mat a
				where	a.nr_sequencia	= nr_seq_conta_pos_w;

				ie_tipo_item_w := 'M';
			end if;

			--Insere ocorrência para o registro de pós obtido anteriormente
			if ( qt_ocorr_pos_w = 0) then
				nr_seq_ocor_benef_w := pls_inserir_ocorrencia(nr_seq_segurado_p, nr_seq_ocorrencia_p, null, null, null, null, null, null, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_p, ie_tipo_item_p, cd_estabelecimento_p, 'N', null, nr_seq_ocor_benef_w, nr_seq_conta_pos_w, null, ie_lib_manual_p, nr_seq_benef_w, null, null, ie_tipo_item_w);
			end if;

			--Geração do fluxo de análise de pós
			if (nr_seq_analise_pos_w IS NOT NULL AND nr_seq_analise_pos_w::text <> '') then

				if (ie_novo_pos_estab_w = 'N') then
					CALL pls_gerar_fluxo_audit_item_pos( nr_seq_analise_pos_w, null, nm_usuario_p);
				else
					CALL pls_gera_fluxo_audit_novo_pos( nr_seq_analise_pos_w, null, nm_usuario_p, cd_estabelecimento_p);
				end if;
			end if;
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_inserir_ocorrencia ( nr_seq_segurado_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_requisicao_p bigint, nr_seq_guia_plano_p bigint, nr_seq_conta_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint, nr_seq_regra_p bigint, nm_usuario_p text, ds_observacao_p text, nr_seq_motivo_glosa_p bigint, ie_tipo_item_p bigint, cd_estabelecimento_p bigint, ie_consist_grau_espc_p text, nr_seq_execucao_p bigint, nr_seq_oc_benef_p INOUT bigint, nr_seq_conta_pos_estab_p bigint, nr_seq_proc_partic_p bigint, ie_lib_manual_p text, nr_seq_ocor_pag_p bigint, qt_excedido_P pls_conta_proc.qt_excedido%type default null, nr_seq_oc_cta_comb_p pls_ocorrencia_benef.nr_seq_oc_cta_comb%type default null, ie_proc_mat_novo_pos_p text default null) FROM PUBLIC;

