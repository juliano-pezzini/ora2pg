-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS (ds_dias_aplicacao	varchar(6));


CREATE OR REPLACE PROCEDURE consiste_onco_laudo_apac ( dt_inicio_p timestamp, nr_seq_paciente_p bigint, nr_ciclo_inicial_p bigint, nr_ciclo_final_p bigint, nr_dia_inicial_p bigint, nr_dia_final_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
i 			integer;
z			integer;
r			integer	:= 1;
k 			integer	:= 1;
X			varchar(1);

ds_dias_aplicacao_w	varchar(4000);
ds_texto_w		varchar(4000);
ds_valido_w 		varchar(13)	:= '0123456789D,-';
nr_dia_inicial_w	varchar(10);
nr_dia_final_w		varchar(10);
dia_w			varchar(4);
ie_dia_util_w		varchar(1);
cd_pessoa_fisica_w	varchar(10);

qt_dias_intervalo_w	smallint;
posicao_w		smallint;
cont_w			bigint;
qt_nao_util_w		smallint	:= 0;
qt_count_w		bigint;

dt_inicio_w		timestamp;
dt_prevista_w		timestamp;
dt_val_apac_w		timestamp;
dt_maior_w		timestamp	:= clock_timestamp();
type Vetor is table of campos index by integer;
dias_w			Vetor;

c01 CURSOR FOR 
SELECT	a.ds_dias_aplicacao 
from	material 			b, 
	paciente_protocolo_medic 	a 
where	a.cd_material		= b.cd_material 
and	a.nr_seq_paciente	= nr_seq_paciente_p 
and	coalesce(a.nr_seq_diluicao::text, '') = '' 
and	coalesce(a.nr_seq_solucao::text, '') = '';

BEGIN 
 
nr_dia_inicial_w	:= 'D'|| to_char(nr_dia_inicial_p);
if (nr_dia_final_p IS NOT NULL AND nr_dia_final_p::text <> '') then 
	nr_dia_final_w		:= 'D'|| to_char(nr_dia_final_p);
end if;
 
select	coalesce(max(coalesce(a.qt_dias_intervalo,b.nr_dias_intervalo)),0) 
into STRICT	qt_dias_intervalo_w 
from	protocolo_medicacao b, 
	paciente_setor a 
where	a.nr_seq_paciente	= nr_seq_paciente_p 
and	a.cd_protocolo		= b.cd_protocolo 
and	a.nr_seq_medicacao	= b.nr_sequencia;
 
dt_inicio_w	:= dt_inicio_p - nr_dia_inicial_p;
 
	OPEN C01;
	LOOP 
	FETCH C01 into 
		ds_dias_aplicacao_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		ds_dias_aplicacao_w	:= Replace(ds_dias_aplicacao_w,' ','');
		ds_texto_w		:= '';
		FOR y IN 1..length(ds_dias_aplicacao_w) LOOP 
			X	:= substr(upper(ds_dias_aplicacao_w), y, 1);	
			if (position(X in ds_valido_w) > 0) then 
				ds_texto_w	:= ds_texto_w || X;
			else 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(282302);
			end if;
		END LOOP;
 
		ds_dias_aplicacao_w	:= ds_texto_w;
		z	:= 0;
		ds_dias_aplicacao_w	:= ds_dias_aplicacao_w ||',';
		cont_w	:= 0;
		dias_w.delete;
		while	(ds_dias_aplicacao_w IS NOT NULL AND ds_dias_aplicacao_w::text <> '') LOOP 
			begin 
			posicao_w	:= position(',' in ds_dias_aplicacao_w);
			z := z + 1;
			dias_w[z].ds_dias_aplicacao	:= substr(ds_dias_aplicacao_w,1,posicao_w - 1);
			ds_dias_aplicacao_w	:= substr(ds_dias_aplicacao_w,posicao_w + 1,length(ds_dias_aplicacao_w));
			cont_w	:= cont_w + 1;
			if (cont_w > 100) then 
				exit;
			end if;
			end;
		end loop;
		 
		r		:= 1;
		k		:= 1;
		qt_nao_util_w	:= 0;
		qt_count_w	:= dias_w.count;
 
		while(r <= qt_count_w) LOOP 
			begin 
			dia_w	:= dias_w[k].ds_dias_aplicacao;
			dia_w	:= substr(dia_w,2,length(dia_w));
			dia_w	:= dia_w + qt_nao_util_w; /* Soma o dia do ciclo mais a quantidade de dias não úteis*/
 
			if ((campo_numerico(dia_w) IS NOT NULL AND (campo_numerico(dia_w))::text <> '')) and (somente_numero_real(nr_dia_inicial_w) <= somente_numero_real(dias_w[k].ds_dias_aplicacao)) and 
				((coalesce(nr_dia_final_p::text, '') = '') or (somente_numero_real(nr_dia_final_w) >= somente_numero_real(dias_w[k].ds_dias_aplicacao))) then 
				dt_prevista_w := dt_inicio_w + (dia_w)::numeric;
				if (dt_prevista_w < clock_timestamp()) then 
					dt_prevista_w	:= clock_timestamp(); /* Felipe - OS 31185 Se a data gerada do ciclo for menos que sysdate a data recebe sysdate */
				end if;
				r	:= r + 1;
				if (r > 100) then 
					CALL wheb_mensagem_pck.exibir_mensagem_abort(282304);
				end if;
 
				select	Obter_Se_Dia_Util_Oncologia(dt_prevista_w, cd_estabelecimento_p, nm_usuario_p) 
				into STRICT	ie_dia_util_w 
				;
 
				if (ie_dia_util_w		= 'S') then 
					if (dt_prevista_w	> dt_maior_w) then 
						dt_maior_w	:= dt_prevista_w;
					end if;
					k	:= k + 1;
				else	 
					qt_count_w	:= qt_count_w + 1;
					qt_nao_util_w	:= qt_nao_util_w + 1;
				end if;
			else 
				r	:= r + 1;
				k	:= k + 1;
			end if;
			end;
		END LOOP;
 
		end;
	END LOOP;
	CLOSE C01;
	dt_inicio_w	:= dt_inicio_w + qt_dias_intervalo_w;
 
select	coalesce(max(b.cd_pessoa_fisica),0) 
into STRICT	cd_pessoa_fisica_w 
from	paciente_setor		b, 
	paciente_atendimento	a 
where	a.nr_seq_paciente	= b.nr_seq_paciente 
and	a.nr_Seq_paciente	= nr_seq_paciente_p;
 
begin 
select	coalesce(DT_FIM_VAL_APAC,max(PKG_DATE_UTILS.ADD_MONTH(PKG_DATE_UTILS.get_datetime(PKG_DATE_UTILS.end_of(b.dt_emissao, 'MONTH', 0), b.dt_emissao),2,0))) 
into STRICT	dt_val_apac_W 
from	sus_laudo_paciente		b, 
	atendimento_paciente 	a 
where	a.nr_atendimento	= b.nr_atendimento 
and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w 
and	b.ie_classificacao	= 11;
exception 
	when others then 
		dt_val_apac_w	:= null;
end;
 
if (PKG_DATE_UTILS.start_of(dt_maior_w, 'mm', 0)	> PKG_DATE_UTILS.start_of(dt_val_apac_w, 'mm', 0)) then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(282310,'DT_MAIOR='||dt_maior_w ||';DT_VAL_APAC='||dt_val_apac_w );
end if;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_onco_laudo_apac ( dt_inicio_p timestamp, nr_seq_paciente_p bigint, nr_ciclo_inicial_p bigint, nr_ciclo_final_p bigint, nr_dia_inicial_p bigint, nr_dia_final_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

