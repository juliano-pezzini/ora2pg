-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE carregar_ciap_philips (( nr_seq_versao_p bigint) is nr_seq_capitulo_w capitulo_ciap.nr_sequencia%type) RETURNS bigint AS $body$
DECLARE

		nr_seq_capitulo_w	bigint := 0;
	
BEGIN
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_capitulo_w
		from	capitulo_ciap
		where	cd_capitulo		=	cd_capitulo_p
		and		ie_situacao		=	'A'
		and		nr_seq_versao	=	nr_seq_versao_p;

		return nr_seq_capitulo_w;
	end;
	/* Fim obter_nr_seq_capitulo */

	/* Inicio obter_desc_capitulo_ciap */

	function	obter_desc_capitulo_ciap(cd_capitulo_p	varchar2)
		return varchar2 is
		ds_retorno_w	varchar2(2000) := '';
	begin
		if (upper(ie_localizacao_w) = 'BR') then
			case cd_capitulo_p
				when 'A' then ds_retorno_w := 'Geral';
				when 'B' then ds_retorno_w := 'Sangue, orgãos hematopoiéticos e linfáticos';
				when 'D' then ds_retorno_w := 'Aparelho digestivo';
				when 'F' then ds_retorno_w := 'Olhos';
				when 'H' then ds_retorno_w := 'Ouvidos';
				when 'K' then ds_retorno_w := 'Aparelho circulatório';
				when 'L' then ds_retorno_w := 'Sistema musculoesquelético';
				when 'N' then ds_retorno_w := 'Sistema nervoso';
				when 'P' then ds_retorno_w := 'Psicológico';
				when 'R' then ds_retorno_w := 'Aparelho respiratório';
				when 'S' then ds_retorno_w := 'Pele';
				when 'T' then ds_retorno_w := 'Endócrino, metabólico e nutricional';
				when 'U' then ds_retorno_w := 'Urinário';
				when 'W' then ds_retorno_w := 'Gravidez e planejamento familiar';
				when 'X' then ds_retorno_w := 'Aparelho genital feminino (incluindo mama)';
				when 'Y' then ds_retorno_w := 'Aparelho genital masculino';
				when 'Z' then ds_retorno_w := 'Problemas sociais';
				else ds_retorno_w := '';
			end case;
		end if;
		return ds_retorno_w;
	end;
	/* Fim obter_desc_capitulo_ciap */

	/* Inicio obter_nr_seq_componente */

	function	obter_nr_seq_componente(
						cd_componente_ciap_p	number,
						nr_seq_capitulo_p		number)
		return varchar2 is
		qtd_comp_int_w		number(10);
	begin
		select	coalesce(max(nr_sequencia),0)
		into STRICT	qtd_comp_int_w
		from	componente_ciap
		where	ie_situacao 		=	'A'
		and		nr_seq_capitulo 	=	nr_seq_capitulo_p
		and		cd_componente_ciap	=	cd_componente_ciap_p;

		return	qtd_comp_int_w;
	end;
	/* Fim obter_nr_seq_componente */

	/* Inicio obter_desc_componente_ciap */

	function	obter_desc_componente_ciap(cd_componente_ciap_p	varchar2)
		return varchar2 is
		ds_retorno_w	varchar2(2000) := '';
	begin
		if (upper(ie_localizacao_w) = 'BR') then
			case cd_componente_ciap_p
				when 1 then ds_retorno_w := 'Queixas e sintomas';
				when 2 then ds_retorno_w := 'Procedimentos diagnósticos e preventivos';
				when 3 then ds_retorno_w := 'Medicações, tratamentos e procedimentos terapêuticos';
				when 4 then ds_retorno_w := 'Resultados de exames';
				when 5 then ds_retorno_w := 'Administrativo';
				when 6 then ds_retorno_w := 'Acompanhamento e outros motivos da consulta';
				when 7 then ds_retorno_w := 'Diagnósticos e doenças';
				else ds_retorno_w := '';
			end case;
		end if;
		return ds_retorno_w;
	end;
	/* Fim obter_desc_componente_ciap */

begin
	if (nr_seq_versao_p IS NOT NULL AND nr_seq_versao_p::text <> '') then

		select	ie_localizacao
		into STRICT	ie_localizacao_w
		from	ciap_versao_philips
		where	nr_sequencia	=	nr_seq_versao_p;

		select	wheb_usuario_pck.get_nm_usuario
		into STRICT	nm_usuario_w
		;

		update	capitulo_ciap
		set		ie_situacao	=	'I';

		update	componente_ciap
		set		ie_situacao	=	'I';

		update	problema_ciap
		set		ie_situacao	=	'I';

		commit;

		open C01;
		loop
		fetch C01 into
			c01_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

			select	substr(c01_w.cd_capitulo,0,1)
			into STRICT	cd_capitulo_w
			;

			nr_seq_capitulo_w := obter_nr_seq_capitulo(cd_capitulo_w);

			if (coalesce(nr_seq_capitulo_w::text, '') = '' or nr_seq_capitulo_w = 0) then

				select	nextval('capitulo_ciap_seq')
				into STRICT	nr_seq_capitulo_w
				;

				ds_capitulo_ciap_w := obter_desc_capitulo_ciap(cd_capitulo_w);

				insert into capitulo_ciap(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								ie_situacao,
								nr_seq_versao,
								cd_capitulo,
								ds_capitulo
								) values (
								nr_seq_capitulo_w,
								clock_timestamp(),
								nm_usuario_w,
								clock_timestamp(),
								nm_usuario_w,
								'A',
								nr_seq_versao_p,
								cd_capitulo_w,
								ds_capitulo_ciap_w
								);
			end if;

			cd_componente_w := c01_w.cd_componente;

			nr_seq_componente_w := obter_nr_seq_componente(cd_componente_w, nr_seq_capitulo_w);

			if (coalesce(nr_seq_componente_w::text, '') = '' or nr_seq_componente_w = 0) then

				select	nextval('componente_ciap_seq')
				into STRICT	nr_seq_componente_w
				;

				ds_componente_w := obter_desc_componente_ciap(cd_componente_w);

				insert into componente_ciap(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								ie_situacao,
								nr_seq_capitulo,
								cd_componente_ciap,
								ds_componente
								) values (
								nr_seq_componente_w,
								clock_timestamp(),
								nm_usuario_w,
								clock_timestamp(),
								nm_usuario_w,
								'A',
								nr_seq_capitulo_w,
								cd_componente_w,
								ds_componente_w
								);
			end if;

			cd_doenca_freq_w := replace(c01_w.ds_cid_frequente ,'.','');

			select	count(*)
			into STRICT	qt_reg_cid_freq_w
			from	cid_doenca
			where	cd_doenca_cid = cd_doenca_freq_w;

			if (qt_reg_cid_freq_w = 0) then
				cd_doenca_freq_w	:= null;
			end if;

			select 	nextval('problema_ciap_seq')
			into STRICT	nr_seq_problema_w
			;

			insert into problema_ciap(
							nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nr_seq_componente,
							cd_ciap,
							ie_situacao,
							cd_doenca_cid,
							ds_ciap,
							ds_criterio_exclusao,
							ds_criterio_inclusao,
							ds_definicao,
							ds_descricao_original,
							ds_observacao,
							ds_referencia
							) values (
							nr_seq_problema_w,
							clock_timestamp(),
							nm_usuario_w,
							clock_timestamp(),
							nr_seq_componente_w,
							c01_w.cd_capitulo,
							'A',
							cd_doenca_freq_w,
							c01_w.ds_titulo_leigo,
							c01_w.ds_exclusao,
							c01_w.ds_inclusao,
							c01_w.ds_definicao,
							c01_w.ds_titulo_orig,
							c01_w.ds_nota,
							c01_w.ds_considerar);

			ds_lista_cids_poss_w := c01_w.ds_cid_possiveis;

			if (ds_lista_cids_poss_w IS NOT NULL AND ds_lista_cids_poss_w::text <> '') then

				ds_lista_cids_poss_w := replace(ds_lista_cids_poss_w,' ','');
				ds_lista_cids_poss_w := replace(ds_lista_cids_poss_w,'.','');

				if (substr(ds_lista_cids_poss_w, length(ds_lista_cids_poss_w)) <> ',') then
					ds_lista_cids_poss_w := ds_lista_cids_poss_w || ',';
				end if;

				while(ds_lista_cids_poss_w IS NOT NULL AND ds_lista_cids_poss_w::text <> '') loop
				begin

					vl_virgula_poss_w := position(',' in ds_lista_cids_poss_w);

					if (vl_virgula_poss_w <> 0) then
						ds_cid_possivel_w	 := substr(ds_lista_cids_poss_w, 1, (vl_virgula_poss_w - 1));
						ds_lista_cids_poss_w := substr(ds_lista_cids_poss_w, (vl_virgula_poss_w + 1), length(ds_lista_cids_poss_w));
					end if;

					if (ds_cid_possivel_w IS NOT NULL AND ds_cid_possivel_w::text <> '') then
						select 	count(*)
						into STRICT	qt_reg_cid_freq_w
						from	cid_doenca
						where	cd_doenca_cid = ds_cid_possivel_w;

						if (qt_reg_cid_freq_w > 0) then

							insert into diagnostico_ciap(
											nr_sequencia,
											dt_atualizacao,
											nm_usuario,
											dt_atualizacao_nrec,
											nm_usuario_nrec,
											nr_seq_problema,
											cd_doenca_cid
											) values (
											nextval('diagnostico_ciap_seq'),
											clock_timestamp(),
											nm_usuario_w,
											clock_timestamp(),
											nm_usuario_w,
											nr_seq_problema_w,
											ds_cid_possivel_w);
						end if;

					end if;

				end;
				end loop;

			end if;

		end;
		end loop;
		close c01;

		commit;

		open C02;
		loop
		fetch C02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

			open C03;
			loop
			fetch C03 into
				c03_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
			begin

				nr_seq_componente_w := obter_nr_seq_componente(c02_w.cd_componente, c03_w.nr_sequencia);

				if (coalesce(nr_seq_componente_w::text, '') = '' or nr_seq_componente_w = 0) then

					select	nextval('componente_ciap_seq')
					into STRICT	nr_seq_componente_w
					;

					ds_componente_w := obter_desc_componente_ciap(c02_w.cd_componente);

					insert into componente_ciap(
									nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									ie_situacao,
									nr_seq_capitulo,
									cd_componente_ciap,
									ds_componente
									) values (
									nr_seq_componente_w,
									clock_timestamp(),
									nm_usuario_w,
									clock_timestamp(),
									nm_usuario_w,
									'A',
									c03_w.nr_sequencia,
									c02_w.cd_componente,
									ds_componente_w);
				end if;

				insert into problema_ciap(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_componente,
								cd_ciap,
								ie_situacao,
								ds_ciap,
								ds_descricao_original
								) values (
								nextval('problema_ciap_seq'),
								clock_timestamp(),
								nm_usuario_w,
								clock_timestamp(),
								nm_usuario_w,
								nr_seq_componente_w,
								replace(c02_w.cd_capitulo, '-', c03_w.cd_capitulo),
								'A',
								c02_w.ds_titulo_leigo,
								c02_w.ds_titulo_orig);

				commit;

			end;
			end loop;
			close c03;
		end;
		end loop;
		close c02;
	end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE carregar_ciap_philips (( nr_seq_versao_p bigint) is nr_seq_capitulo_w capitulo_ciap.nr_sequencia%type) FROM PUBLIC;

