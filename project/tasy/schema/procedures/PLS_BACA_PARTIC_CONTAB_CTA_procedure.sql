-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_baca_partic_contab_cta () AS $body$
DECLARE

 
j				integer := 0;
tb_nr_sequencia_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_proc_partic_w		pls_util_cta_pck.t_number_table;
ie_execute_w			varchar(1) := 'S';
dt_inicio_w			timestamp;
dt_fim_w			timestamp;

 -- Levanta todo o pós contabil que não tem vinculo com participante 
c01 CURSOR(	dt_inicio_pc	timestamp, 
		dt_fim_pc	timestamp) FOR 
	SELECT	pe.nr_sequencia nr_seq_conta_pos, 
		pc.nr_sequencia nr_seq_pos_contab, 
		coalesce(pc.vl_medico,0) + coalesce(pc.vl_lib_taxa_servico,0) vl_pos_contab, 
		coalesce(pe.vl_beneficiario,0) vl_benef 
	from	pls_conta			c, 
		pls_conta_pos_estabelecido	pe, 
		pls_conta_pos_estab_contab	pc 
	where	c.nr_sequencia 			= pe.nr_seq_conta 
	and	pe.nr_sequencia			= pc.nr_seq_conta_pos 
	and	pe.ie_status_faturamento	= 'L' 
	and	pe.ie_situacao			= 'A' 
	and	coalesce(pc.nr_seq_proc_partic::text, '') = '' 
	and	(pe.nr_seq_conta_proc IS NOT NULL AND pe.nr_seq_conta_proc::text <> '') 
	and	c.dt_atendimento_referencia	between dt_inicio_pc and dt_fim_pc 
	and	exists (SELECT	1 
			from	pls_conta_pos_estab_partic	pp 
			where	pp.nr_seq_conta_pos	= pe.nr_sequencia);

-- Levanta os participantes do pós estabelecido 
c02 CURSOR(nr_seq_conta_pos_pc	pls_conta_pos_estabelecido.nr_sequencia%type) FOR 
	SELECT	pp.vl_participante_pos, 
		pp.nr_seq_proc_partic 
	from	pls_conta_pos_estab_partic	pp 
	where	pp.nr_seq_conta_pos	= nr_seq_conta_pos_pc;

BEGIN 
dt_inicio_w := trunc(to_date('01/01/2016'),'mm');
dt_fim_w := fim_mes(dt_inicio_w);
 
loop 
 
	for r_c01_w in c01(dt_inicio_w, dt_fim_w) loop	 
		for r_c02_w in c02(r_c01_w.nr_seq_conta_pos) loop 
			-- Compara se o valor do participante é o mesmo que o pós contabil 
			if (r_c02_w.vl_participante_pos = r_c01_w.vl_pos_contab) or (r_c02_w.vl_participante_pos = r_c01_w.vl_benef) then 
				tb_nr_sequencia_w(j) := r_c01_w.nr_seq_pos_contab;
				tb_nr_seq_proc_partic_w(j) := r_c02_w.nr_seq_proc_partic;
				 
				if (tb_nr_sequencia_w.count >= 500) then 
					forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last 
						update	pls_conta_pos_estab_contab 
						set	nr_seq_proc_partic	= tb_nr_seq_proc_partic_w(i), 
							dt_atualizacao		= clock_timestamp() 
						where	nr_sequencia		= tb_nr_sequencia_w(i);
					commit;
					 
					tb_nr_seq_proc_partic_w.delete;
					tb_nr_sequencia_w.delete;
					j := 0;
				else 
					j := j + 1;
				end if;
			end if;
		end loop;
	end loop;
	 
	dt_inicio_w := trunc(add_months(dt_inicio_w, 1),'mm');
	dt_fim_w := fim_mes(dt_inicio_w);
	 
	if (dt_inicio_w > clock_timestamp()) then 
		ie_execute_w := 'N';
	end if;
	 
	exit when ie_execute_w = 'N';
end loop;
 
if (tb_nr_sequencia_w.count > 0) then 
	forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last 
		update	pls_conta_pos_estab_contab 
		set	nr_seq_proc_partic	= tb_nr_seq_proc_partic_w(i), 
			dt_atualizacao		= clock_timestamp() 
		where	nr_sequencia		= tb_nr_sequencia_w(i);
	commit;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_baca_partic_contab_cta () FROM PUBLIC;

