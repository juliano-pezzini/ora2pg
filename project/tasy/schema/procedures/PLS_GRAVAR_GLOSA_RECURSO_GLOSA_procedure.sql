-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gravar_glosa_recurso_glosa ( cd_motivo_glosa_p text, nr_seq_conta_imp_p bigint, nr_seq_proc_imp_p bigint, nr_seq_mat_imp_p bigint, nr_seq_protocolo_cta_p bigint, ds_observacao_p text, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Inserir as glosas nos arquivos de Recurso de Glosa.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  x] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: As glosas foram criadas manualmente conforme necessário, foi criado
baca para criar a glosa na base do cliente, pode ocorrer da glosa não existir
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_motivo_glosa_w	bigint;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
ie_ocorrencia_w		pls_controle_estab.ie_ocorrencia%type := 'N';
qt_glosa_w		integer := 0;


BEGIN
ie_ocorrencia_w := pls_obter_se_controle_estab('GO');

if (nr_seq_conta_imp_p IS NOT NULL AND nr_seq_conta_imp_p::text <> '') then
	select	max(a.cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	pls_rec_glosa_protocolo a,
		pls_rec_glosa_prot_cta_imp b,
		pls_rec_glosa_conta_imp c
	where	a.nr_sequencia = b.nr_seq_protocolo
	and	b.nr_sequencia = c.nr_seq_protocolo_cta
	and	c.nr_sequencia = nr_seq_conta_imp_p;
end if;

if (coalesce(cd_estabelecimento_w::text, '') = '') then
	cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
end if;

begin
	if (ie_ocorrencia_w = 'S') then
		select	coalesce(a.nr_sequencia,0)
		into STRICT	nr_seq_motivo_glosa_w
		from	tiss_motivo_glosa a,
			pls_glosa_evento b
		where	a.cd_motivo_tiss = cd_motivo_glosa_p
		and	a.nr_sequencia	= b.nr_seq_motivo_glosa
		and	b.ie_evento 	= 'RG'
		and 	b.ie_plano = 'S'
		and	coalesce(cd_convenio::text, '') = ''
		and	b.cd_estabelecimento = cd_estabelecimento_w;
	else
		select	coalesce(a.nr_sequencia,0)
		into STRICT	nr_seq_motivo_glosa_w
		from	tiss_motivo_glosa a,
			pls_glosa_evento b
		where	a.cd_motivo_tiss = cd_motivo_glosa_p
		and	a.nr_sequencia	= b.nr_seq_motivo_glosa
		and	b.ie_evento 	= 'RG'
		and 	b.ie_plano = 'S'
		and	coalesce(cd_convenio::text, '') = '';
	end if;
exception
when others then
	nr_seq_motivo_glosa_w	:= 0;
end;


if ( nr_seq_motivo_glosa_w > 0 ) then

	if (nr_seq_protocolo_cta_p IS NOT NULL AND nr_seq_protocolo_cta_p::text <> '') and (coalesce(nr_seq_mat_imp_p::text, '') = '') and (coalesce(nr_seq_proc_imp_p::text, '') = '') and (coalesce(nr_seq_conta_imp_p::text, '') = '') then

		select	count(1)
		into STRICT	qt_glosa_w
		from	pls_rec_retorno_glosa
		where	nr_seq_protocolo_cta = nr_seq_protocolo_cta_p
		and	nr_seq_motivo_glosa = nr_seq_motivo_glosa_w;

	elsif (nr_seq_conta_imp_p IS NOT NULL AND nr_seq_conta_imp_p::text <> '') and (coalesce(nr_seq_mat_imp_p::text, '') = '') and (coalesce(nr_seq_proc_imp_p::text, '') = '') then

		select	count(1)
		into STRICT	qt_glosa_w
		from	pls_rec_retorno_glosa
		where	nr_seq_conta_imp = nr_seq_conta_imp_p
		and	nr_seq_motivo_glosa = nr_seq_motivo_glosa_w;

	elsif (nr_seq_mat_imp_p IS NOT NULL AND nr_seq_mat_imp_p::text <> '') and (coalesce(nr_seq_proc_imp_p::text, '') = '') then

		select	count(1)
		into STRICT	qt_glosa_w
		from	pls_rec_retorno_glosa
		where	nr_seq_mat_imp = nr_seq_mat_imp_p
		and	nr_seq_motivo_glosa = nr_seq_motivo_glosa_w;

	elsif (nr_seq_proc_imp_p IS NOT NULL AND nr_seq_proc_imp_p::text <> '') and (coalesce(nr_seq_mat_imp_p::text, '') = '') then

		select	count(1)
		into STRICT	qt_glosa_w
		from	pls_rec_retorno_glosa
		where	nr_seq_proc_imp = nr_seq_proc_imp_p
		and	nr_seq_motivo_glosa = nr_seq_motivo_glosa_w;
	end if;

	if (qt_glosa_w = 0) then
		insert into pls_rec_retorno_glosa(
						nr_sequencia, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta_imp,
						nr_seq_proc_imp, nr_seq_mat_imp,nr_seq_protocolo_cta,
						nr_seq_motivo_glosa, ds_observacao)
				values (	nextval('pls_rec_retorno_glosa_seq'), clock_timestamp(),nm_usuario_p,
						clock_timestamp(), nm_usuario_p, nr_seq_conta_imp_p,
						nr_seq_proc_imp_p, nr_seq_mat_imp_p, nr_seq_protocolo_cta_p,
						nr_seq_motivo_glosa_w, ds_observacao_p);
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gravar_glosa_recurso_glosa ( cd_motivo_glosa_p text, nr_seq_conta_imp_p bigint, nr_seq_proc_imp_p bigint, nr_seq_mat_imp_p bigint, nr_seq_protocolo_cta_p bigint, ds_observacao_p text, nm_usuario_p text) FROM PUBLIC;

