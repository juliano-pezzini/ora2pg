-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_lote_saldo_banco ( cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, nr_interno_conta_p bigint, nr_ordem_compra_p bigint, nr_repasse_terceiro_p bigint, nr_seq_agenda_p bigint, nr_seq_cheque_cp_p bigint, nr_seq_cheque_cr_p bigint, nr_seq_contrato_p bigint, nr_seq_conv_receb_p bigint, nr_seq_lote_fluxo_p bigint, nr_seq_movto_cartao_p bigint, nr_seq_movto_trans_p bigint, nr_seq_proj_recurso_p bigint, nr_seq_protocolo_p bigint, nr_seq_regra_p bigint, nr_titulo_pagar_p bigint, nr_titulo_receber_p bigint) AS $body$
DECLARE


/*--------------------------------------------------------------- ATENÇÃO ----------------------------------------------------------------*/


/* Cuidado ao realizar alterações no fluxo de caixa em lote. Toda e qualquer alteração realizada em qualquer uma */


/* das procedures do fluxo de caixa em lote deve ser cuidadosamente verificada e realizada no fluxo de caixa      */


/* convencional. Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando     */


/* assim que existam diferenças entre os fluxos de caixa.                                                                                                */


/*--------------- AO ALTERAR O FLUXO DE CAIXA EM LOTE ALTERAR TAMBÉM O FLUXO DE CAIXA ---------------*/

dt_referencia_w		timestamp;
cd_conta_financ_inf_w	bigint;
vl_fluxo_w		fluxo_caixa_item.vl_fluxo%type;
nr_seq_saldo_w		bigint;
nr_seq_saldo_ant_w	bigint;
ie_tratar_fim_semana_w	varchar(255);
cont_w			bigint;
ie_conta_financ_ativa_w	varchar(1);
cd_empresa_w		empresa.cd_empresa%type;
dt_referencia_fim_w	timestamp;
dt_referencia_dia_w	timestamp;
/* Projeto Multimoeda - Variáveis */

cd_moeda_empresa_w	integer;
cd_moeda_estrang_w	integer;
vl_fluxo_estrang_w	fluxo_caixa_item.vl_fluxo%type;

c01 CURSOR FOR
SELECT	distinct
	b.cd_conta_financ_inf
from	banco_saldo c,
	banco_estabelecimento b
where	c.nr_seq_conta			= b.nr_sequencia
and	(b.cd_conta_financ_inf IS NOT NULL AND b.cd_conta_financ_inf::text <> '')
and	b.cd_empresa			= cd_empresa_w;


BEGIN

select	max(a.cd_empresa)
into STRICT	cd_empresa_w
from	estabelecimento a
where	a.cd_estabelecimento	= cd_estabelecimento_p;

select	max(cd_moeda)
into STRICT	cd_moeda_estrang_w
from 	fluxo_caixa_lote
where	nr_sequencia = nr_seq_lote_fluxo_p;
/* Projeto Multimoeda - Busca a moeda padrão da empresa e verifica a moeda cadastrada no fluxo em lote. Ele será a base da busca dos dados
		em moeda estrangeira. Caso a moeda do fluxo seja nula, deverá ser considerada a moeda padrão da empresa nas consultas,
		caso contrário irá buscar somente os dados na moeda selecionada.*/
select obter_moeda_padrao_empresa(cd_estabelecimento_p,'E')
into STRICT cd_moeda_empresa_w
;
if (coalesce(cd_moeda_estrang_w::text, '') = '') then
	cd_moeda_estrang_w := cd_moeda_empresa_w;
end if;

select	ie_tratar_fim_semana
into STRICT	ie_tratar_fim_semana_w
from	parametro_fluxo_caixa
where	cd_estabelecimento	= cd_estabelecimento_p;

open c01;
loop
fetch c01 into
	cd_conta_financ_inf_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	dt_referencia_w	:= dt_inicial_p;

	while(dt_referencia_w <= dt_final_p) loop

		if (dt_referencia_w between dt_inicial_p and dt_final_p) then

			if (ie_tratar_fim_semana_w = 'S') then
				dt_referencia_w			:= obter_proximo_dia_util(cd_estabelecimento_p, dt_referencia_w);
			end if;

			dt_referencia_dia_w	:= trunc(dt_referencia_w,'dd');
			dt_referencia_fim_w	:= fim_dia(dt_referencia_w);

			select	sum(obter_saldo_banco_diario(c.nr_sequencia, dt_referencia_fim_w)) vl_fluxo,
				sum(obter_saldo_banco_diario_estr(c.nr_sequencia, dt_referencia_fim_w)) vl_fluxo_estrang,
				count(*)
			into STRICT	vl_fluxo_w,
				vl_fluxo_estrang_w,
				cont_w
			from	banco_saldo c,
				banco_estabelecimento b
			where	c.nr_seq_conta		= b.nr_sequencia
			and	b.cd_empresa		= cd_empresa_w
			and	coalesce(c.cd_moeda,cd_moeda_empresa_w) = coalesce(cd_moeda_estrang_w,cd_moeda_empresa_w)  --Projeto Multimoeda - Busca apenas os registros da moeda relacionada
			and	c.dt_referencia		between dt_referencia_dia_w and dt_referencia_fim_w
			and	b.cd_conta_financ_inf	= cd_conta_financ_inf_w;

			if (cont_w = 0) then

				select	max(c.nr_sequencia)
				into STRICT	nr_seq_saldo_ant_w
				from	banco_saldo c,
					banco_estabelecimento b
				where	c.nr_seq_conta		= b.nr_sequencia
				and	b.cd_empresa		= cd_empresa_w
				and	b.cd_conta_financ_inf	= cd_conta_financ_inf_w
				and	coalesce(c.cd_moeda,cd_moeda_empresa_w) = coalesce(cd_moeda_estrang_w,cd_moeda_empresa_w)  --Projeto Multimoeda - Busca apenas os registros da moeda relacionada
				and	c.dt_referencia		< dt_referencia_dia_w;

				select	max(obter_saldo_banco_diario(c.nr_sequencia, dt_referencia_fim_w)) vl_fluxo,
					max(obter_saldo_banco_diario_estr(c.nr_sequencia, dt_referencia_fim_w)) vl_fluxo_estrang
				into STRICT	vl_fluxo_w,
					vl_fluxo_estrang_w
				from	banco_saldo c,
					banco_estabelecimento b
				where	c.nr_seq_conta	= b.nr_sequencia
				and	b.cd_empresa		= cd_empresa_w
				and	coalesce(c.cd_moeda,cd_moeda_empresa_w) = coalesce(cd_moeda_estrang_w,cd_moeda_empresa_w)  --Projeto Multimoeda - Busca apenas os registros da moeda relacionada
				and	c.nr_sequencia	= nr_Seq_saldo_ant_w;

			end if;
			
			/* Projeto Multimoeda - Quando o fluxo for em moeda estrangeira, alterar o valor que será gravado no item do fluxo*/

			if (coalesce(cd_moeda_estrang_w,cd_moeda_empresa_w) <> cd_moeda_empresa_w) then
				vl_fluxo_w := vl_fluxo_estrang_w;
			end if;
			
			CALL gerar_fluxo_caixa_lote(	dt_referencia_w,
						cd_conta_financ_inf_w,
						'',
						'12',
						'CB',
						nm_usuario_p,
						nr_interno_conta_p,
						nr_ordem_compra_p,
						nr_repasse_terceiro_p,
						nr_seq_agenda_p,
						nr_seq_cheque_cp_p,
						nr_seq_cheque_cr_p,
						nr_seq_contrato_p,
						nr_seq_conv_receb_p,
						nr_seq_lote_fluxo_p,
						nr_seq_movto_cartao_p,
						nr_seq_movto_trans_p,
						nr_seq_proj_recurso_p,
						nr_seq_protocolo_p,
						nr_seq_regra_p,
						nr_titulo_pagar_p,
						nr_titulo_receber_p,
						coalesce(vl_fluxo_w, 0));

		end if;
	dt_referencia_w	:= dt_referencia_w + 1;
	end loop;

end loop;
close c01;

/*NAO COLOCAR COMMIT NESTA PROCEDURE*/

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_lote_saldo_banco ( cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, nr_interno_conta_p bigint, nr_ordem_compra_p bigint, nr_repasse_terceiro_p bigint, nr_seq_agenda_p bigint, nr_seq_cheque_cp_p bigint, nr_seq_cheque_cr_p bigint, nr_seq_contrato_p bigint, nr_seq_conv_receb_p bigint, nr_seq_lote_fluxo_p bigint, nr_seq_movto_cartao_p bigint, nr_seq_movto_trans_p bigint, nr_seq_proj_recurso_p bigint, nr_seq_protocolo_p bigint, nr_seq_regra_p bigint, nr_titulo_pagar_p bigint, nr_titulo_receber_p bigint) FROM PUBLIC;

