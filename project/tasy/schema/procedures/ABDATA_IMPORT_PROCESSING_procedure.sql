-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE abdata_import_processing (nm_usuario_p text) AS $body$
DECLARE


    quantidades_w			dbms_sql.varchar2_table;
    nr_seq_import_w			abdamed_import.nr_sequencia%type;
    nr_seq_import_ges_w		abdamed_import.nr_sequencia%type;
    ie_tipo_import_w			abdamed_import.ie_tipo%type;
    nr_key_fam_w			are_med.key_fam%type;
    nr_key_war_w			war_med.key_war%type;
    key_sto_orig_w			fai_med.key_sto%type;
    cd_classe_material_w		classe_material.cd_classe_material%type;
    nr_seq_familia_w			material.nr_seq_familia%type;
    fam_med_w			fam_med%rowtype;
    war_med_w			war_med%rowtype;
    sna_med_w			sna_med%rowtype;
    fak_med_w			fak_med%rowtype;
    material_w			material%rowtype;
    medic_ficha_deriv_ger_w		medic_ficha_deriv_ger%rowtype;
    einheit_pgr2_w			pgr2_med.einheit%type;
    zahl_pgr2_w			pgr2_med.zahl%type;
    key_sto_deriv_w			fai_med.key_sto%type;
    ds_name_deriv_w			sna_med.name%type;
    material_sistema_ext_w		material_sistema_externo%rowtype;
    medic_ficha_tecnica_w		medic_ficha_tecnica%rowtype;
    medic_ficha_tecnica_deriv_w		medic_ficha_tecnica%rowtype;
    material_princ_ativo_w		material_princ_ativo%rowtype;
    cd_tabela_preco_mat_w		tabela_preco_material.cd_tab_preco_mat%type;
    cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
    cd_moeda_w			moeda.cd_moeda%type;
    pzn_w				pgr_med.pzn%type;
    einheit_compra_w			pgr2_med.einheit%type;
    cd_unidade_med_forma_farm_w	unidade_medida.cd_unidade_medida%type;
    cd_unid_med_base_conc_w		unidade_medida.cd_unidade_medida%type;
    cd_unidade_medida_consumo_w	material.cd_unidade_medida_consumo%type;
    qt_conversao_mg_w		material_princ_ativo.qt_conversao_mg%type;
    nr_seq_medic_ficha_tec_w		medic_ficha_tecnica.nr_sequencia%type;
    cd_material_w			material.cd_material%type;
    dt_versao_atual_w			timestamp;
    ds_unidade_medida_w		varchar(30);
    nm_usuario_abdata_w		varchar(15);
    ie_princ_vinculado_w		varchar(1);
    qt_registro_w			bigint := 0;
    qt_total_w			bigint := 0;
    qt_commit_w			bigint := 0;
    ds_erro_w			varchar(4000);

    c00 CURSOR FOR
        SELECT	a.nr_sequencia,
                  a.ie_tipo,
                  a.dt_versao_atual
        from	abdamed_import a
        where	coalesce(a.dt_importacao::text, '') = ''
          and	a.ie_tipo		in ('ADD','UPD','DEL')
        order by	a.dt_versao_atual asc,
                    CASE WHEN ie_tipo='ADD' THEN 0 WHEN ie_tipo='UPD' THEN 1 WHEN ie_tipo='DEL' THEN 2 END;

    c01 CURSOR FOR
        SELECT a.pzn,
               a.packungskomponente,
               a.einstufung
        from pgr_med a
                 inner join are_med b on b.nr_seq_import = a.nr_seq_import and b.pzn = a.pzn
                 inner join fam_med c on c.nr_seq_import = b.nr_seq_import and c.key_fam = b.key_fam
        where a.nr_seq_import = nr_seq_import_w

union

        SELECT a.pzn,
               a.packungskomponente,
               a.einstufung
        from pgr_med a
                 left outer join are_med b on b.nr_seq_import = a.nr_seq_import and b.pzn = a.pzn
                 left outer join fam_med c on c.nr_seq_import = a.nr_seq_import and c.key_fam = b.key_fam
                 inner join art_med d on d.nr_seq_import = a.nr_seq_import and a.pzn = d.pzn
                 inner join war_med e on e.key_war = d.key_war and e.nr_seq_import = a.nr_seq_import
        where a.nr_seq_import = nr_seq_import_w
          and coalesce(b.nr_sequencia::text, '') = '';

    c02 CURSOR FOR
        SELECT	*
        from	art_med
        where	nr_seq_import	= nr_seq_import_w
          and	pzn		= pzn_w;

    c03 CURSOR FOR
        SELECT	key_sto,
                  entsprichtstoff,
                  zahl,
                  einheit,
                  vergleich,
                  rang
        from	fai_med
        where	nr_seq_import	= nr_seq_import_w
          and	key_fam 	= nr_key_fam_w
          and	stofftyp 	= '1'
          and	vergleich	= '1'
          and	(zahl IS NOT NULL AND zahl::text <> '')
        order by entsprichtstoff,
                 rang asc;

    c03_w	c03%rowtype;

    c04 CURSOR FOR
        SELECT	a.pzn,
                  a.zaehler,
                  a.einheit,
                  a.komponentennr,
                  a.typ,
                  a.zahl
        from	pgr2_med a
        where	a.pzn			= pzn_w
          and	a.nr_seq_import 	= nr_seq_import_w
        order by a.typ;

    c04_w	c04%rowtype;

    c05 CURSOR FOR
        SELECT	a.*
        from	art_med a
        where	a.nr_seq_import	= nr_seq_import_w;

    c06 CURSOR FOR
        SELECT	a.*
        from	fam_med a
        where	a.nr_seq_import	= nr_seq_import_w;

    c07 CURSOR FOR
        SELECT	a.*
        from	fai_med a
        where	a.nr_seq_import	= nr_seq_import_w
        order by a.key_fam, (a.rang)::numeric;

    c08 CURSOR FOR
        SELECT	null nr_sequencia,
                  qt_conversao_mg,
                  cd_unid_med_concetracao,
                  cd_unid_med_base_conc,
                  qt_concentracao_total,
                  cd_unid_med_conc_total
        from	material
        where	cd_material		= cd_material_w
          and	nr_seq_ficha_tecnica	= nr_seq_medic_ficha_tec_w

union

        SELECT	b.nr_sequencia nr_sequencia,
                  b.qt_conversao_mg,
                  b.cd_unid_med_concetracao,
                  b.cd_unid_med_base_conc,
                  b.qt_concentracao_total,
                  b.cd_unid_med_conc_total
        from	material a,
                material_princ_ativo b
        where	a.cd_material			= cd_material_w
          and	a.cd_material			= b.cd_material
          and	b.nr_seq_medic_ficha_tecnica	= nr_seq_medic_ficha_tec_w;

    c09 CURSOR FOR
        SELECT	a.*
        from	fak_med a
        where	a.nr_seq_import	= nr_seq_import_w
        order by nr_sequencia;

    c10 CURSOR FOR
        SELECT 	'P' as cd_unidade_medida_compra, --packung
                  case when
                           regexp_like((SELECT pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn  art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),'([[:digit:]]+)X([[:digit:]]+)X([[:digit:]]+)')
                           then
                           to_char(
                                       to_number(regexp_substr((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),'[^X]+',1,1),'9999999.9999',' NLS_NUMERIC_CHARACTERS = '',.''') *
                                       to_number(regexp_substr((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),'[^X]+',3,1),'9999999.9999',' NLS_NUMERIC_CHARACTERS = '',.'''))
                       else
                           coalesce((select substr(pgr2.zahl,1,position('X' in pgr2.zahl)-1) from pgr2_med pgr2 where pgr2.typ=1 and pgr2.pzn in art.pzn and pgr2.nr_seq_import = art.nr_seq_import),coalesce((select pgr2.zahl from pgr2_med pgr2 where pgr2.einheit = 'St' and pgr2.typ=1 and pgr2.pzn in art.pzn and pgr2.nr_seq_import = art.nr_seq_import),'1'))
                      end as qt_conv_compra_estoque,
                  'St' as cd_unidade_medida_estoque, --stuck
                  case when position('X' in coalesce((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),(select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import)))=0
                           then
                           to_char(
                                       to_number(coalesce((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),(select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import)),'9999999.9999',' NLS_NUMERIC_CHARACTERS = '',.''') /
                                       coalesce((select substr(pgr2.zahl,1,position('X' in pgr2.zahl)-1) from pgr2_med pgr2 where pgr2.typ=1 and pgr2.pzn in art.pzn and pgr2.nr_seq_import = art.nr_seq_import),coalesce((select pgr2.zahl from pgr2_med pgr2 where pgr2.einheit = 'St' and pgr2.typ=1 and pgr2.pzn in art.pzn and pgr2.nr_seq_import = art.nr_seq_import),'1')))
                       else
                           case when
                                        regexp_like(coalesce((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),(select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import)),'([[:digit:]]+)X([[:digit:]]+)X([[:digit:]]+)')
                                        or
                                        regexp_like(coalesce((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),(select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import)),'([[:digit:]]+)X([[:digit:]]+)')
                                    then
                                    substr(coalesce((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),(select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import)),
                                           instr(coalesce((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),(select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import)),'X',-1)+1)
                                else
                                    '0'
                               end
                      end as qt_conv_estoque_consumo,
                  case (when(select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import) IS NOT NULL AND (when(select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import))::text <> '')
                           then (select (select kvp.schluesselwert from kvp_med kvp where kvp.dateinr=1224 and kvp.feldidentifier='03' and kvp.schluesselwert=pgr2_.einheit and kvp.nr_seq_import = art.nr_seq_import) from pgr2_med pgr2_ where pgr2_.typ=2 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import)
                       else (select (select kvp.schluesselwert from kvp_med kvp where kvp.dateinr=1224 and kvp.feldidentifier='03' and kvp.schluesselwert=pgr2_.einheit and kvp.nr_seq_import = art.nr_seq_import) from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import)
                      end as cd_unidade_medida_consumo
        from 	art_med art
        where 	art.pzn 		= pzn_w
          and	art.nr_seq_import	= nr_seq_import_w;

    c10_w	c10%rowtype;

    c11 CURSOR FOR
        SELECT	coalesce(fak.absolutbezug_zahl,coalesce(fak.relativbezug_zahl,'k.A.')) as conversao_qt_conversao_1,
                  coalesce(fak.absolutbezug_einheit,coalesce(fak.relativbezug_einheit,'k.A')) as conversao_unidade_medida_1,
                  case when
                               position('X' in (SELECT pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import))=0
                           then	to_char(to_number(
                                                   (select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),'9999999.9999',' NLS_NUMERIC_CHARACTERS = '',.''') /
                                           coalesce((select substr(pgr2.zahl,1,position('X' in pgr2.zahl)-1) from pgr2_med pgr2 where pgr2.typ=1 and pgr2.pzn in art.pzn and pgr2.nr_seq_import = art.nr_seq_import),
                                               coalesce((select pgr2.zahl from pgr2_med pgr2 where pgr2.einheit = 'St' and pgr2.typ=1 and pgr2.pzn in art.pzn and pgr2.nr_seq_import = art.nr_seq_import),'1')))
                       else	case when
                                            regexp_like((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),'([[:digit:]]+)X([[:digit:]]+)X([[:digit:]]+)')
                                            or
                                            regexp_like((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),'([[:digit:]]+)X([[:digit:]]+)')
                                        then
                                        substr((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),
                                               instr((select pgr2_.zahl from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import),'X',-1)+1)
                                    else
                                        '0'
                           end
                      end as conversao_qt_conversao_2,
                  (select (select kvp.schluesselwert from kvp_med kvp where kvp.dateinr=1224 and kvp.feldidentifier='03' and kvp.schluesselwert=pgr2_.einheit and kvp.nr_seq_import = art.nr_seq_import) from pgr2_med pgr2_ where pgr2_.typ=1 and pgr2_.pzn in art.pzn and pgr2_.nr_seq_import = art.nr_seq_import) as conversao_unidade_medida_2
        from 	art_med art,
                fam_med fam,
                fak_med fak,
                are_med are
        where 	art.pzn 		= are.pzn
          and 	are.key_fam 		= fam.key_fam
          and	fam.key_fam		= fak.key_fam
          and	art.pzn			= pzn_w
          and	art.nr_seq_import	= nr_seq_import_w
          and	are.nr_seq_import	= nr_seq_import_w
          and	fam.nr_seq_import	= nr_seq_import_w
          and	fak.nr_seq_import	= nr_seq_import_w  LIMIT 1;

    c11_w	c11%rowtype;

    procedure
        ie_tipo_p		text := gravar_log(
        ie_tipo_p		text, ie_acao_p	text) is
        abdamed_import_log_w	abdamed_import_log%rowtype;

BEGIN

        begin
            select	*
            into STRICT	abdamed_import_log_w
            from	abdamed_import_log
            where	nr_seq_import	= nr_seq_import_w
              and	ie_tipo		= ie_tipo_p  LIMIT 1;
        exception
            when others then
                abdamed_import_log_w.nr_sequencia := null;
        end;

        if (ie_tipo_p = 'E') and (ds_log_p IS NOT NULL AND ds_log_p::text <> '') then

            select	nextval('abdamed_import_log_seq')
            into STRICT	abdamed_import_log_w.nr_sequencia
;

            abdamed_import_log_w.nm_usuario		:= nm_usuario_abdata_w;
            abdamed_import_log_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
            abdamed_import_log_w.dt_atualizacao		:= clock_timestamp();
            abdamed_import_log_w.dt_atualizacao_nrec	:= clock_timestamp();
            abdamed_import_log_w.nr_seq_import		:= nr_seq_import_w;
            abdamed_import_log_w.ie_tipo		:= ie_tipo_p;
            abdamed_import_log_w.ds_log		:= substr(ds_log_p,1,4000);

            insert into abdamed_import_log values (abdamed_import_log_w.*);

        elsif (abdamed_import_log_w.nr_sequencia IS NOT NULL AND abdamed_import_log_w.nr_sequencia::text <> '') then
            if (ie_acao_p = 'I') then
                abdamed_import_log_w.qt_insert := coalesce(abdamed_import_log_w.qt_insert,0) + 1;
            elsif (ie_acao_p = 'U') then
                abdamed_import_log_w.qt_update := coalesce(abdamed_import_log_w.qt_update,0) + 1;
            elsif (ie_acao_p = 'D') then
                abdamed_import_log_w.qt_delete := coalesce(abdamed_import_log_w.qt_delete,0) + 1;
            end if;

            update	abdamed_import_log
            set	row = abdamed_import_log_w
            where	nr_sequencia	= abdamed_import_log_w.nr_sequencia;
        else
            select	nextval('abdamed_import_log_seq')
            into STRICT	abdamed_import_log_w.nr_sequencia
;

            abdamed_import_log_w.nm_usuario		:= nm_usuario_abdata_w;
            abdamed_import_log_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
            abdamed_import_log_w.dt_atualizacao		:= clock_timestamp();
            abdamed_import_log_w.dt_atualizacao_nrec	:= clock_timestamp();
            abdamed_import_log_w.nr_seq_import		:= nr_seq_import_w;
            abdamed_import_log_w.ie_tipo		:= ie_tipo_p;

            if (ie_acao_p = 'I') then
                abdamed_import_log_w.qt_insert	:= 1;
            elsif (ie_acao_p = 'U') then
                abdamed_import_log_w.qt_update	:= 1;
            elsif (ie_acao_p = 'D') then
                abdamed_import_log_w.qt_delete	:= 1;
            end if;

            insert into abdamed_import_log values (abdamed_import_log_w.*);
        end if;

    end;

    function get_number(
        nr_p varchar2)
        return;

    begin

        begin
            retorno_w	:= to_number(nr_p,'9999999.9999',' NLS_NUMERIC_CHARACTERS = '',.''');
        exception
            when others then
                retorno_w := null;
        end;
        return;
    end;

    function get_seq_tabela(
        nm_tabela_p	varchar2,
        ds_chave_p	varchar2,
        qt_max_p		number)
        return;
        i		integer;
        retorno_w		number(10);

    begin
        i := 1;
        for 	i in 1..qt_max_p loop
                ds_sql_w	:= 'select count(1) from '||nm_tabela_p||' where '||ds_chave_p||' = '||to_char(i);

                select	somente_numero(obter_select_concatenado(ds_sql_w,null,null))
                into STRICT	retorno_w
;

                if (retorno_w  = 0) then --if not exists, then return the value
                    retorno_w := i;
                    exit;
                end if;
            end loop;

        return;
    end;

    procedure gerar_estrutura_mat(
        key_ind_p	varchar2,
        produktgruppe_p	varchar2,
        key_war_p	war_med.key_war%type ) is

        grupo_material_w	grupo_material%rowtype;
        subgrupo_material_w	subgrupo_material%rowtype;
        classe_material_w	classe_material%rowtype;
        material_familia_w	material_familia%rowtype;

    begin

        -- Added check for the product structure of the WAR_MED table
        if (key_war_p IS NOT NULL AND key_war_p::text <> '') then
            --group
            begin
                select	cd_grupo_material
                into STRICT	grupo_material_w.cd_grupo_material
                from	grupo_material
                where	cd_sistema_ant	= substr(key_war_p, 1, 1)  LIMIT 1;
            exception
                when others then
                    grupo_material_w.cd_grupo_material	:= null;
            end;

            if (coalesce(grupo_material_w.cd_grupo_material::text, '') = '')	then
                select	substr(name, 1, 255)
                into STRICT	grupo_material_w.ds_grupo_material
                from	war_med
                where	length(key_war)	= 1
                  and	key_war 	= substr(key_war_p, 1, 1)  LIMIT 1;

                grupo_material_w.cd_grupo_material 	:= get_seq_tabela('GRUPO_MATERIAL','CD_GRUPO_MATERIAL',999);
                grupo_material_w.dt_atualizacao 	:= clock_timestamp();
                grupo_material_w.dt_atualizacao_nrec 	:= clock_timestamp();
                grupo_material_w.nm_usuario		:= nm_usuario_abdata_w;
                grupo_material_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
                grupo_material_w.ie_situacao		:= 'A';
                grupo_material_w.cd_sistema_ant		:= substr(key_war_p, 1, 1);

                insert into grupo_material values (grupo_material_w.*);
                'GRU' := gravar_log('GRU', 'I'); --grupo material
            end if;

            -- subgroup
            begin
                select	cd_subgrupo_material
                into STRICT	subgrupo_material_w.cd_subgrupo_material
                from	subgrupo_material
                where	cd_sistema_ant		= substr(key_war_p,1,2)
                  and	cd_grupo_material	= grupo_material_w.cd_grupo_material  LIMIT 1;
            exception
                when others then
                    subgrupo_material_w.cd_subgrupo_material := null;
            end;

            if (coalesce(subgrupo_material_w.cd_subgrupo_material::text, '') = '') then

                begin
                    select	substr(name,1,255)
                    into STRICT	subgrupo_material_w.ds_subgrupo_material
                    from	war_med
                    where	key_war	= substr(key_war_p,1,2)
                      and	nr_seq_import = nr_seq_import_w  LIMIT 1;
                exception
                    when others then
                        -- Check the last record independent  of load
                        select	x.name
                        into STRICT	subgrupo_material_w.ds_subgrupo_material
                        from (SELECT	substr(name,1,255) name,
                                           nr_seq_import
                                 from	war_med
                                 where	key_war	= substr(key_war_p,1,2)
                                 order by nr_seq_import desc) x LIMIT 1;
                end;

                subgrupo_material_w.cd_subgrupo_material := get_seq_tabela('SUBGRUPO_MATERIAL','CD_SUBGRUPO_MATERIAL',999);
                subgrupo_material_w.cd_grupo_material	:= grupo_material_w.cd_grupo_material;
                subgrupo_material_w.dt_atualizacao 	:= clock_timestamp();
                subgrupo_material_w.nm_usuario		:= nm_usuario_abdata_w;
                subgrupo_material_w.ie_situacao		:= 'A';
                subgrupo_material_w.cd_sistema_ant	:= substr(key_war_p,1,2);

                insert into subgrupo_material values (subgrupo_material_w.*);
                'SUB' := gravar_log('SUB', 'I'); --subgrupo material
            end if;

            --class
            begin
                select	cd_classe_material
                into STRICT	cd_classe_material_w
                from	classe_material
                where	cd_sistema_ant		= substr(key_war_p,1,4)
                  and 	cd_subgrupo_material	= subgrupo_material_w.cd_subgrupo_material
                  and	ie_situacao		= 'A'  LIMIT 1;
            exception
                when others then
                    cd_classe_material_w := null;
            end;

            if (coalesce(cd_classe_material_w::text, '') = '') then

                begin
                    select	substr(name,1,255)
                    into STRICT	classe_material_w.ds_classe_material
                    from	war_med
                    where	key_war		= substr(key_war_p,1,4)
                      and	nr_seq_import	= nr_seq_import_w  LIMIT 1;
                exception
                    when others then
                        -- Check the last record independent  of load
                        select	x.name
                        into STRICT	classe_material_w.ds_classe_material
                        from (SELECT	substr(name,1,255) name,
                                           nr_seq_import
                                 from	war_med
                                 where	key_war	= substr(key_war_p,1,4)
                                 order by nr_seq_import desc) x LIMIT 1;
                end;


                classe_material_w.cd_classe_material 	:= get_seq_tabela('CLASSE_MATERIAL','CD_CLASSE_MATERIAL',99999);

                classe_material_w.cd_subgrupo_material	:= subgrupo_material_w.cd_subgrupo_material;
                classe_material_w.dt_atualizacao 	:= clock_timestamp();
                classe_material_w.nm_usuario		:= nm_usuario_abdata_w;
                classe_material_w.ie_situacao		:= 'A';
                classe_material_w.cd_sistema_ant	:= substr(key_war_p,1,4);

                insert into classe_material values (classe_material_w.*);
                cd_classe_material_w := classe_material_w.cd_classe_material;
            end if;

            -- material family
            begin
                select	substr(name,1,255)
                into STRICT	material_familia_w.ds_familia
                from	war_med
                where	key_war	= substr(key_war_p, 1, 5)
                  and	nr_seq_import = nr_seq_import_w  LIMIT 1;
            exception
                when others then
                    -- Check the last record independent  of load
                    select	x.name
                    into STRICT	material_familia_w.ds_familia
                    from (SELECT	substr(name,1,255) name,
                                       nr_seq_import
                             from	war_med
                             where	key_war		= substr(key_war_p, 1, 5)
                             order by nr_seq_import desc) x LIMIT 1;
            end;

            if (material_familia_w.ds_familia IS NOT NULL AND material_familia_w.ds_familia::text <> '') then
                begin
                    select	nr_sequencia
                    into STRICT	nr_seq_familia_w
                    from	material_familia
                    where	lower(ds_familia) 	= lower(material_familia_w.ds_familia)
                      and	cd_estabelecimento	= cd_estabelecimento_w
                      and	ie_situacao		= 'A'  LIMIT 1;
                exception
                    when others then
                        nr_seq_familia_w	:= null;
                end;

                if (coalesce(nr_seq_familia_w::text, '') = '') then

                    select	nextval('material_familia_seq')
                    into STRICT	material_familia_w.nr_sequencia
;

                    material_familia_w.cd_estabelecimento	:= cd_estabelecimento_w;
                    material_familia_w.dt_atualizacao	:= clock_timestamp();
                    material_familia_w.nm_usuario		:= nm_usuario_abdata_w;
                    material_familia_w.ds_familia		:= material_familia_w.ds_familia;
                    material_familia_w.dt_atualizacao_nrec	:= clock_timestamp();
                    material_familia_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
                    material_familia_w.ie_situacao		:= 'A';

                    insert into material_familia values (material_familia_w.*);
                    nr_seq_familia_w	:= material_familia_w.nr_sequencia;
                end if;
            end if;
        else
            --grupo
            begin
                select	cd_grupo_material
                into STRICT	grupo_material_w.cd_grupo_material
                from	grupo_material
                where	cd_sistema_ant	= produktgruppe_p  LIMIT 1;
            exception
                when others then
                    grupo_material_w.cd_grupo_material	:= null;
            end;

            if (coalesce(grupo_material_w.cd_grupo_material::text, '') = '') then

                select	substr(ds_grupo,1,255)
                into STRICT	grupo_material_w.ds_grupo_material
                from	abdata_produktgruppe_v
                where	cd_grupo	= produktgruppe_p;

                grupo_material_w.cd_grupo_material 	:= get_seq_tabela('GRUPO_MATERIAL','CD_GRUPO_MATERIAL',999);
                grupo_material_w.dt_atualizacao 	:= clock_timestamp();
                grupo_material_w.dt_atualizacao_nrec 	:= clock_timestamp();
                grupo_material_w.nm_usuario		:= nm_usuario_abdata_w;
                grupo_material_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
                grupo_material_w.ie_situacao		:= 'A';
                grupo_material_w.cd_sistema_ant		:= produktgruppe_p;

                insert into grupo_material values (grupo_material_w.*);
                'GRU' := gravar_log('GRU', 'I'); --grupo material
            end if;

            --subgrupo
            begin
                select	cd_subgrupo_material
                into STRICT	subgrupo_material_w.cd_subgrupo_material
                from	subgrupo_material
                where	cd_sistema_ant		= substr(key_ind_p,1,2)
                  and	cd_grupo_material	= grupo_material_w.cd_grupo_material  LIMIT 1;
            exception
                when others then
                    subgrupo_material_w.cd_subgrupo_material := null;
            end;

            if (coalesce(subgrupo_material_w.cd_subgrupo_material::text, '') = '') then

                begin
                    select	substr(name,1,255)
                    into STRICT	subgrupo_material_w.ds_subgrupo_material
                    from	ind_med
                    where	key_ind	= substr(key_ind_p,1,2)
                      and	nr_seq_import = nr_seq_import_w  LIMIT 1;
                exception
                    when others then
                        select	x.name --Changed to fetch the last imported load independent record
                        into STRICT	subgrupo_material_w.ds_subgrupo_material
                        from (SELECT	substr(name,1,255) name,
                                           nr_seq_import
                                 from	ind_med
                                 where	key_ind	= substr(key_ind_p,1,2)
                                 order by nr_seq_import desc) x LIMIT 1;
                end;


                subgrupo_material_w.cd_subgrupo_material := get_seq_tabela('SUBGRUPO_MATERIAL','CD_SUBGRUPO_MATERIAL',999);

                subgrupo_material_w.cd_grupo_material	:= grupo_material_w.cd_grupo_material;
                subgrupo_material_w.dt_atualizacao 	:= clock_timestamp();
                subgrupo_material_w.nm_usuario		:= nm_usuario_abdata_w;
                subgrupo_material_w.ie_situacao		:= 'A';
                subgrupo_material_w.cd_sistema_ant	:= substr(key_ind_p,1,2);

                insert into subgrupo_material values (subgrupo_material_w.*);
                'SUB' := gravar_log('SUB', 'I'); --subgrupo material
            end if;

            --classe
            begin
                select	cd_classe_material
                into STRICT	cd_classe_material_w
                from	classe_material
                where	cd_sistema_ant		= substr(key_ind_p,1,3)
                  and 	cd_subgrupo_material	= subgrupo_material_w.cd_subgrupo_material
                  and	ie_situacao		= 'A'  LIMIT 1;
            exception
                when others then
                    cd_classe_material_w := null;
            end;

            if (coalesce(cd_classe_material_w::text, '') = '') then

                begin
                    select	substr(name,1,255)
                    into STRICT	classe_material_w.ds_classe_material
                    from	ind_med
                    where	key_ind		= substr(key_ind_p,1,3)
                      and	nr_seq_import	= nr_seq_import_w  LIMIT 1;
                exception
                    when others then
                        --Changed to fetch the last imported load independent record
                        select	x.name
                        into STRICT	classe_material_w.ds_classe_material
                        from (SELECT	substr(name,1,255) name,
                                           nr_seq_import
                                 from	ind_med
                                 where	key_ind	= substr(key_ind_p,1,3)
                                 order by nr_seq_import desc) x LIMIT 1;
                end;


                classe_material_w.cd_classe_material 	:= get_seq_tabela('CLASSE_MATERIAL','CD_CLASSE_MATERIAL',99999);

                classe_material_w.cd_subgrupo_material	:= subgrupo_material_w.cd_subgrupo_material;
                classe_material_w.dt_atualizacao 	:= clock_timestamp();
                classe_material_w.nm_usuario		:= nm_usuario_abdata_w;
                classe_material_w.ie_situacao		:= 'A';
                classe_material_w.cd_sistema_ant	:= substr(key_ind_p,1,3);

                insert into classe_material values (classe_material_w.*);

                cd_classe_material_w := classe_material_w.cd_classe_material;
            end if;

            --familia do material
            begin
                select	substr(name,1,255)
                into STRICT	material_familia_w.ds_familia
                from	ind_med
                where	key_ind	= key_ind_p
                  and	nr_seq_import = nr_seq_import_w  LIMIT 1;
            exception
                when others then
                    select	x.name
                    into STRICT	material_familia_w.ds_familia
                    from (SELECT	substr(name,1,255) name,
                                       nr_seq_import
                             from	ind_med
                             where	key_ind		= key_ind_p
                             order by nr_seq_import desc) x LIMIT 1;
            end;

            if (material_familia_w.ds_familia IS NOT NULL AND material_familia_w.ds_familia::text <> '') then

                begin
                    select	nr_sequencia
                    into STRICT	nr_seq_familia_w
                    from	material_familia
                    where	lower(ds_familia) 	= lower(material_familia_w.ds_familia)
                      and	cd_estabelecimento	= cd_estabelecimento_w
                      and	ie_situacao		= 'A'  LIMIT 1;
                exception
                    when others then
                        nr_seq_familia_w	:= null;
                end;

                if (coalesce(nr_seq_familia_w::text, '') = '') then

                    select	nextval('material_familia_seq')
                    into STRICT	material_familia_w.nr_sequencia
;

                    material_familia_w.cd_estabelecimento	:= cd_estabelecimento_w;
                    material_familia_w.dt_atualizacao	:= clock_timestamp();
                    material_familia_w.nm_usuario		:= nm_usuario_abdata_w;
                    material_familia_w.ds_familia		:= material_familia_w.ds_familia;
                    material_familia_w.dt_atualizacao_nrec	:= clock_timestamp();
                    material_familia_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
                    material_familia_w.ie_situacao		:= 'A';

                    insert into material_familia values (material_familia_w.*);
                    nr_seq_familia_w	:= material_familia_w.nr_sequencia;
                end if;
            end if;

        end if;
    end;

    procedure imp_unidade_medida(
        key_daa_p 		in varchar2,
        name_p			in varchar2,
        ie_forma_farmaceutica_p	in varchar2,
        cd_unidade_medida_p 	out varchar2) is

        cd_unidade_medida_w	unidade_medida.cd_unidade_medida%type;
        unidade_medida_w		unidade_medida%rowtype;
        ds_undiade_medida_w	unidade_medida.ds_unidade_medida%type;
        cd_unidade_abdata_w	unidade_medida.cd_unidade_medida%type;
    begin

        cd_unidade_abdata_w	:= key_daa_p;
        ds_undiade_medida_w	:= substr(name_p,1,40);

        --busca a unidade de medida do abdata
        SELECT * FROM abdata_obter_unidade_medida(nr_seq_import_w, cd_unidade_abdata_w, ds_undiade_medida_w) INTO STRICT cd_unidade_abdata_w, ds_undiade_medida_w;

        --busca da carga anterior completa
        if (coalesce(cd_unidade_abdata_w::text, '') = '') and (nr_seq_import_ges_w IS NOT NULL AND nr_seq_import_ges_w::text <> '') then
            cd_unidade_abdata_w	:= key_daa_p;
            ds_undiade_medida_w	:= substr(name_p,1,40);

            SELECT * FROM abdata_obter_unidade_medida(nr_seq_import_ges_w, cd_unidade_abdata_w, ds_undiade_medida_w) INTO STRICT cd_unidade_abdata_w, ds_undiade_medida_w;
        end if;

        if (coalesce(cd_unidade_abdata_w::text, '') = '') and (key_daa_p not in ('ESTNOTDEF','COMPNOTDEF')) then
            cd_unidade_abdata_w := key_daa_p;
            ds_undiade_medida_w := key_daa_p;
            'E' := gravar_log('E', null);
        elsif (coalesce(cd_unidade_abdata_w::text, '') = '') and (key_daa_p = 'COMPNOTDEF') then
            cd_unidade_abdata_w	:= 'COMPNOTDEF';
            ds_undiade_medida_w	:= wheb_mensagem_pck.get_texto(1121574);
        elsif (coalesce(cd_unidade_abdata_w::text, '') = '') and (key_daa_p = 'ESTNOTDEF') then
            cd_unidade_abdata_w	:= 'ESTNOTDEF';
            ds_undiade_medida_w	:= wheb_mensagem_pck.get_texto(1121573);
        end if;

        --checks if there is already in the tasy based on the code.
        begin
            select	cd_unidade_medida
            into STRICT	cd_unidade_medida_w
            from	unidade_medida
            where	cd_unidade_medida	= cd_unidade_abdata_w  LIMIT 1;
        exception
            when others then
                cd_unidade_medida_w 	:= null;
        end;

        if (coalesce(cd_unidade_medida_w::text, '') = '') then

            unidade_medida_w.cd_unidade_medida		:= cd_unidade_abdata_w;
            unidade_medida_w.ds_unidade_medida		:= ds_undiade_medida_w;
            unidade_medida_w.ie_situacao		:= 'A';
            unidade_medida_w.dt_atualizacao		:= clock_timestamp();
            unidade_medida_w.nm_usuario		:= nm_usuario_abdata_w;
            unidade_medida_w.ie_adm_diluicao		:= 'N';
            unidade_medida_w.ie_unidade_adm		:= coalesce(ie_forma_farmaceutica_p,'N');

            insert into unidade_medida values (unidade_medida_w.*);
            'UM' := gravar_log('UM', 'I'); --unit of measure
            cd_unidade_medida_w			:= unidade_medida_w.cd_unidade_medida;

        elsif (coalesce(ie_forma_farmaceutica_p,'N') = 'S') then

            update	unidade_medida
            set	ie_unidade_adm		= coalesce(ie_forma_farmaceutica_p,'N'),
                   nm_usuario		= nm_usuario_abdata_w,
                   dt_atualizacao		= clock_timestamp()
            where	cd_unidade_medida	= cd_unidade_medida_w;

        end if;
        cd_unidade_medida_p := cd_unidade_medida_w;

    end;

    procedure atualiza_mat_conversao_unidade(
        cd_material_p		number,
        cd_unidade_medida_p	varchar2,
        ie_prioridade_p		number,
        qt_conversao_p		number) is

        cd_unidade_medida_w		material_conversao_unidade.cd_unidade_medida%type;
        material_conversao_unidade_w	material_conversao_unidade%rowtype;

    begin

        imp_unidade_medida(cd_unidade_medida_p, null, 'N', cd_unidade_medida_w);

        begin
            select	*
            into STRICT	material_conversao_unidade_w
            from	material_conversao_unidade
            where	cd_material		= cd_material_p
              and	cd_unidade_medida	= cd_unidade_medida_w  LIMIT 1;
        exception
            when others then
                material_conversao_unidade_w.cd_unidade_medida := null;
        end;

        if (coalesce(material_conversao_unidade_w.cd_unidade_medida::text, '') = '') then

            material_conversao_unidade_w.cd_material		:= cd_material_p;
            material_conversao_unidade_w.cd_unidade_medida	:= cd_unidade_medida_w;
            material_conversao_unidade_w.ie_prioridade		:= ie_prioridade_p;
            material_conversao_unidade_w.nm_usuario		:= nm_usuario_abdata_w;
            material_conversao_unidade_w.dt_atualizacao		:= clock_timestamp();
            material_conversao_unidade_w.dt_atualizacao_nrec	:= clock_timestamp();
            material_conversao_unidade_w.nm_usuario_nrec		:= nm_usuario_abdata_w;
            material_conversao_unidade_w.qt_conversao		:= qt_conversao_p;

            insert into material_conversao_unidade values (material_conversao_unidade_w.*);
            'CONVUNI' := gravar_log('CONVUNI', 'I'); --conversion of material unit
        elsif (material_conversao_unidade_w.qt_conversao <> qt_conversao_p) then

            material_conversao_unidade_w.qt_conversao		:= qt_conversao_p;

            update	material_conversao_unidade
            set	row = material_conversao_unidade_w
            where	cd_material		= cd_material_p
              and	cd_unidade_medida	= cd_unidade_medida_w;
            'CONVUNI' := gravar_log('CONVUNI', 'U'); --conversion of material unit
        end if;

    end;

    procedure atualiza_preco_mat(
        cd_material_p	number,
        vl_material_p	number,
        dt_vigencia_p	date) is

        preco_material_w	preco_material%rowtype;
    begin

        if (cd_tabela_preco_mat_w IS NOT NULL AND cd_tabela_preco_mat_w::text <> '') then

            begin
                select	*
                into STRICT	preco_material_w
                from	preco_material
                where	cd_tab_preco_mat 		= cd_tabela_preco_mat_w
                  and	cd_material		= cd_material_p
                  and	cd_estabelecimento		= cd_estabelecimento_w
                  and	trunc(dt_inicio_vigencia)	= trunc(dt_vigencia_p)
                  and	coalesce(dt_final_vigencia::text, '') = ''  LIMIT 1;
            exception
                when others then
                    preco_material_w.cd_material := null;
            end;

            if (preco_material_w.cd_material IS NOT NULL AND preco_material_w.cd_material::text <> '') then
                update	preco_material
                set	vl_preco_venda		= dividir(vl_material_p,100),
                       nm_usuario		= nm_usuario_abdata_w,
                       dt_atualizacao		= clock_timestamp()
                where	cd_material		= preco_material_w.cd_material
                  and	cd_tab_preco_mat 		= preco_material_w.cd_tab_preco_mat
                  and	cd_estabelecimento		= preco_material_w.cd_estabelecimento
                  and	dt_inicio_vigencia		= preco_material_w.dt_inicio_vigencia;

                'PRECO' := gravar_log('PRECO', 'U'); --material price
            else
                preco_material_w.dt_inicio_vigencia	:= dt_vigencia_p;
                preco_material_w.dt_final_vigencia	:= null;
                preco_material_w.vl_preco_venda	:= dividir(vl_material_p,100);
                preco_material_w.dt_atualizacao	:= clock_timestamp();
                preco_material_w.nm_usuario		:= nm_usuario_abdata_w;
                preco_material_w.cd_estabelecimento	:= cd_estabelecimento_w;
                preco_material_w.cd_tab_preco_mat	:= cd_tabela_preco_mat_w;
                preco_material_w.cd_material		:= cd_material_p;
                preco_material_w.ie_brasindice	:= 'N';
                preco_material_w.cd_moeda		:= cd_moeda_w;

                insert into preco_material values (preco_material_w.*);
                'PRECO' := gravar_log('PRECO', 'I'); --material price
            end if;

        end if;

    end;

    procedure atualizar_cod_barra_mat(
        cd_material_p	number,
        ds_cod_barra_p	varchar2) is

        count_w		number(10);

    begin

        begin
            select	1
            into STRICT	count_w
            from	material_cod_barra
            where	cd_material	= cd_material_p
              and	cd_barra_material	= ds_cod_barra_p  LIMIT 1;
        exception
            when no_data_found then
                begin
                    insert into material_cod_barra(
                        cd_material,
                        cd_barra_material,
                        dt_atualizacao,
                        nm_usuario,
                        dt_atualizacao_nrec,
                        nm_usuario_nrec)
                    values (	cd_material_p,
                               ds_cod_barra_p,
                               clock_timestamp(),
                               nm_usuario_abdata_w,
                               clock_timestamp(),
                               nm_usuario_abdata_w);

                    'BARC' := gravar_log('BARC', 'I');
                exception
                    when unique_violation then
                        'E' := gravar_log('E', null);
                end;
        end;

        if (count_w > 0) then
            update	material_cod_barra
            set	cd_barra_material	= ds_cod_barra_p
            where	cd_material		= cd_material_p;
            'BARC' := gravar_log('BARC', 'U');
        end if;

    end;

    procedure inserir_medic_controlado(
        cd_material_p 	number,
        ie_classif_p	varchar2) is

        medic_controlado_w	medic_controlado%rowtype;

    begin

        begin
            select	a.*
            into STRICT	medic_controlado_w
            from	medic_controlado a
            where	a.cd_material	= cd_material_p  LIMIT 1;
        exception
            when others then
                medic_controlado_w.nr_sequencia := null;
        end;

        if (coalesce(medic_controlado_w.nr_sequencia::text, '') = '') then

            select	nextval('medic_controlado_seq')
            into STRICT	medic_controlado_w.nr_sequencia
;

            medic_controlado_w.cd_material		:= cd_material_p;
            medic_controlado_w.dt_atualizacao		:= clock_timestamp();
            medic_controlado_w.nm_usuario		:= nm_usuario_abdata_w;
            medic_controlado_w.cd_classificacao		:= ie_classif_p;
            medic_controlado_w.dt_atualizacao_nrec	:= clock_timestamp();
            medic_controlado_w.nm_usuario_nrec		:= nm_usuario_abdata_w;
            medic_controlado_w.ie_situacao		:= 'A';

            insert into medic_controlado values (medic_controlado_w.*);
            'MEDCONT' := gravar_log('MEDCONT', 'I');
        end if;

    end;

    procedure insert_anvisa_forma_farma(
        key_p			varchar2,
        nr_seq_forma_farm_p	out number) is

        anvisa_forma_formaceutica_w	anvisa_forma_formaceutica%rowtype;
        anvisa_forma_localizada_w	anvisa_forma_localizada%rowtype;
        ds_keydaa_w			varchar2(60);
        abkuerzung_w			daa_med.abkuerzung%type;

    begin

        select	max(name),
                  max(abkuerzung)
        into STRICT	ds_keydaa_w,
            abkuerzung_w
        from	daa_med
        where	key_daa		= key_p
          and	nr_seq_import 	= nr_seq_import_w;

        begin
            select	*
            into STRICT	anvisa_forma_formaceutica_w
            from	anvisa_forma_formaceutica a
            where	a.ds_abreviatura	= abkuerzung_w
              and	exists (SELECT	1
                 from	anvisa_forma_localizada x
                 where	x.nr_seq_forma_farm	= a.nr_sequencia
                   and	x.ds_locale		= 'de_DE')  LIMIT 1;
        exception
            when others then
                anvisa_forma_formaceutica_w.nr_sequencia := null;
        end;

        if (coalesce(anvisa_forma_formaceutica_w.nr_sequencia::text, '') = '') and (ds_keydaa_w IS NOT NULL AND ds_keydaa_w::text <> '') then

            select	nextval('anvisa_forma_formaceutica_seq') + 1000000
            into STRICT	anvisa_forma_formaceutica_w.nr_sequencia
;

            anvisa_forma_formaceutica_w.dt_atualizacao		:= clock_timestamp();
            anvisa_forma_formaceutica_w.nm_usuario		:= nm_usuario_abdata_w;
            anvisa_forma_formaceutica_w.dt_atualizacao_nrec	:= clock_timestamp();
            anvisa_forma_formaceutica_w.nm_usuario_nrec		:= nm_usuario_abdata_w;
            anvisa_forma_formaceutica_w.ds_conceito		:= ds_keydaa_w;
            anvisa_forma_formaceutica_w.ds_forma_farmaceutica	:= ds_keydaa_w;
            anvisa_forma_formaceutica_w.ds_abreviatura		:= abkuerzung_w;
            anvisa_forma_formaceutica_w.ie_situacao		:= 'A';

            insert into anvisa_forma_formaceutica values (anvisa_forma_formaceutica_w.*);

            select	nextval('anvisa_forma_localizada_seq')
            into STRICT	anvisa_forma_localizada_w.nr_sequencia
;

            anvisa_forma_localizada_w.dt_atualizacao		:= clock_timestamp();
            anvisa_forma_localizada_w.nm_usuario			:= nm_usuario_abdata_w;
            anvisa_forma_localizada_w.dt_atualizacao_nrec		:= clock_timestamp();
            anvisa_forma_localizada_w.nm_usuario_nrec		:= nm_usuario_abdata_w;
            anvisa_forma_localizada_w.nr_seq_forma_farm		:= anvisa_forma_formaceutica_w.nr_sequencia;
            anvisa_forma_localizada_w.ds_locale			:= 'de_DE';

            insert into anvisa_forma_localizada values (anvisa_forma_localizada_w.*);

        end if;

        nr_seq_forma_farm_p	:= anvisa_forma_formaceutica_w.nr_sequencia;

    end;

    function obter_se_atrib_update(
        nm_tabela_p	varchar2,
        nm_atributo_p	varchar2,
        nr_seq_registro_p	number)
        return;

    begin

        begin
            select	1
            into STRICT	qt_reg_w
            from	abdamed_imp_reg_valor
            where	nr_seq_import	= nr_seq_import_w
              and	nm_tabela	= nm_tabela_p
              and	nm_atributo	= nm_atributo_p  LIMIT 1;
        exception
            when others then
                qt_reg_w := 0;
        end;

        if (qt_reg_w > 0) then
            return;
        else
            return;
        end if;
    end;

    function get_mat_key_fam(
        key_fam_p varchar2)
        return;

        pzn_w			are_med.pzn%type;
        nr_seq_are_med_w	are_med.nr_sequencia%type;

    begin

        select	max(nr_sequencia)
        into STRICT	nr_seq_are_med_w
        from	are_med
        where	key_fam = key_fam_p;

        begin
            select	pzn
            into STRICT	pzn_w
            from	are_med
            where	nr_sequencia = nr_seq_are_med_w;

            select	cd_material
            into STRICT	cd_material_w
            from	material_sistema_externo
            where	ie_sistema 	= 'ABDATA'
              and	cd_codigo	= pzn_w  LIMIT 1;
        exception
            when others then
                cd_material_w	:= null;
        end;

        return;

    end;

begin

    nm_usuario_abdata_w := 'ABDATA';

    CALL wheb_usuario_pck.set_ie_executar_trigger('N');

    select	max(cd_moeda)
    into STRICT	cd_moeda_w
    from	moeda
    where	upper(ds_sigla_moeda) = 'EUR'
      and	ie_situacao = 'A';

    if (coalesce(cd_moeda_w::text, '') = '') then
        --euro (eur) currency register not found.

        --cehck the currency register.
        CALL wheb_mensagem_pck.exibir_mensagem_abort(1034179);
    end if;

    select	max(cd_tab_preco_mat),
              max(cd_estabelecimento)
    into STRICT	cd_tabela_preco_mat_w,
        cd_estabelecimento_w
    from	integr_material_scheduler
    where	nr_seq_empresa_integr = 163; --abdata
    open c00;
    loop
        fetch c00 into
            nr_seq_import_w,
            ie_tipo_import_w,
            dt_versao_atual_w;
        EXIT WHEN NOT FOUND; /* apply on c00 */

        --search the initial catalog import with all items
        select	max(nr_sequencia)
        into STRICT	nr_seq_import_ges_w
        from	abdamed_import
        where	(dt_importacao IS NOT NULL AND dt_importacao::text <> '')
          and	ie_tipo		= 'ADD'
          and	dt_versao_atual	< dt_versao_atual_w;

        update	abdamed_import
        set	dt_atualizacao	= clock_timestamp()
        where	nr_sequencia	= nr_seq_import_w;

        delete 	from abdamed_import_log
        where	nr_seq_import	= nr_seq_import_w;

        if (ie_tipo_import_w = 'ADD') then

            select	count(1)
            into STRICT	qt_total_w
            from	pgr_med a
            where	a.nr_seq_import	= nr_seq_import_w;
            /*and	exists
                (select	1
                from	are_med x,
                    fam_med y
                where	x.nr_seq_import	= a.nr_seq_import
                and	y.nr_seq_import	= a.nr_seq_import
                and	x.pzn		= a.pzn
                and	x.key_fam	= y.key_fam);*/
            qt_commit_w	:= 0;
            qt_registro_w	:= 0;

            CALL gravar_processo_longo(obter_desc_expressao(887394),'ABDATA_IMPORT_PROCESSING',qt_registro_w);

            for cpgr_med_w in c01 loop

                    pzn_w	:= cpgr_med_w.pzn;

                    for cart_med_w in c02 loop

                            qt_commit_w	:= qt_commit_w + 1;
                            qt_registro_w 	:= qt_registro_w + 1;

                            CALL gravar_processo_longo(obter_desc_expressao(887394)||' ('||qt_registro_w||'..'||qt_total_w||')','ABDATA_IMPORT_PROCESSING',qt_registro_w);

                            begin

                                begin
				    nr_key_war_w := null;
                                    select	key_fam
                                    into STRICT	nr_key_fam_w
                                    from	are_med
                                    where	pzn	= pzn_w
                                      and	nr_seq_import = nr_seq_import_w  LIMIT 1;
                                exception
                                    when others then
					nr_key_fam_w := null;
                                        select	key_war
                                        into STRICT	nr_key_war_w
                                        from	art_med
                                        where	pzn		= pzn_w
                                          and	nr_seq_import	= nr_seq_import_w  LIMIT 1;
                                end;

                                if ((nr_key_fam_w IS NOT NULL AND nr_key_fam_w::text <> '') OR (nr_key_war_w IS NOT NULL AND nr_key_war_w::text <> '')) then

                                    begin
					war_med_w := null;
                                        select	*
                                        into STRICT	fam_med_w
                                        from	fam_med
                                        where	key_fam = nr_key_fam_w
                                          and	nr_seq_import = nr_seq_import_w  LIMIT 1;
                                    exception
                                        when others then
					    fam_med_w.nr_sequencia	:= null;
                                            select	*
                                            into STRICT	war_med_w
                                            from	war_med
                                            where	key_war		= nr_key_war_w
                                              and	nr_seq_import	= nr_seq_import_w  LIMIT 1;
                                    end;

                                    if (fam_med_w.nr_sequencia > 0 OR war_med_w.nr_sequencia > 0) then

                                        if ((fam_med_w.key_ind_haupt IS NOT NULL AND fam_med_w.key_ind_haupt::text <> '') OR (war_med_w.key_war IS NOT NULL AND war_med_w.key_war::text <> '')) then

                                            begin
                                                select	a.*
                                                into STRICT	material_w
                                                from	material a,
                                                        material_sistema_externo b
                                                where	a.cd_material	= b.cd_material
                                                  and	b.ie_sistema 	= 'ABDATA'
                                                  and	cd_codigo	= pzn_w  LIMIT 1;
                                            exception
                                                when others then
                                                    material_w := null;
                                            end;

                                            begin
                                                select	*
                                                into STRICT	fak_med_w
                                                from	fak_med
                                                where	key_fam		= nr_key_fam_w
                                                  and	nr_seq_import	= nr_seq_import_w  LIMIT 1;
                                            exception
                                                when others then
                                                    fak_med_w.nr_sequencia 	:= null;
                                            end;

                                            if (coalesce(material_w.cd_material::text, '') = '') then

                                                gerar_estrutura_mat( fam_med_w.key_ind_haupt, fam_med_w.produktgruppe, war_med_w.key_war );

                                                material_w.cd_classe_material		:= cd_classe_material_w;
                                                material_w.nr_seq_familia		:= nr_seq_familia_w;
                                                material_w.ds_material		:= l10nger_converte_protpy(cart_med_w.langname);
                                                material_w.ds_reduzida		:= l10nger_converte_protpy(cart_med_w.kurzname);
                                                material_w.dt_atualizacao		:= clock_timestamp();
                                                material_w.dt_cadastramento		:= clock_timestamp();
                                                material_w.ie_abrigo_luz		:= 'N';
                                                material_w.ie_baixa_estoq_pac	:= 'S';
                                                material_w.ie_baixa_inteira		:= 'S';
                                                material_w.ie_bomba_infusao		:= 'N';
                                                material_w.ie_cobra_paciente		:= 'S';
                                                material_w.ie_diluicao		:= 'N';
                                                material_w.ie_gravar_obs_prescr	:= 'N';
                                                material_w.ie_inf_ultima_compra	:= 'S';
                                                material_w.ie_material_estoque	:= 'S';
                                                material_w.ie_mistura		:= 'N';
                                                material_w.ie_situacao		:= 'A';
                                                material_w.ie_solucao		:= 'S';
                                                material_w.ie_umidade_controlada	:= 'N';
                                                material_w.nm_usuario		:= nm_usuario_abdata_w;
                                                material_w.ie_controle_medico	:= 0;
                                                material_w.ie_receita		:= 'N';
                                                material_w.ie_consignado	:= '0';
                                                --material_w.ie_narcotico		:= cart_med_w.btm; --OS 1767607
                                                if (cart_med_w.btm in ('2','3')) then
                                                    material_w.ie_receita 	:= 'S'; --controlled medication
                                                end if;

                                                if (coalesce(cart_med_w.key_daa,'null') <> 'null') and (obter_se_base_wheb = 'N') then --it cannot import on the wheb base, because is exported in the version. Must be imported only on the customer base.
                                                    insert_anvisa_forma_farma(cart_med_w.key_daa, material_w.nr_seq_forma_farm );
                                                end if;

                                                if (fam_med_w.produktgruppe = '1') then
                                                    material_w.ie_tipo_material	:= '2';
                                                elsif (fam_med_w.produktgruppe in ('3','5')) then
                                                    material_w.ie_tipo_material	:= '5';
                                                else
                                                    material_w.ie_tipo_material	:= '1';
                                                end if;

                                                /* commented, units and quantities will be searched based on 1769192.
                                                open c04;
                                                loop
                                                fetch c04 into
                                                    c04_w; --pgr2_med
                                                exit when c04%notfound;

                                                    if	(instr(c04_w.zahl,'X') > 0) then

                                                        quantidades_w	:= obter_lista_string(c04_w.zahl,'X');
                                                        material_w.qt_conv_estoque_consumo	:= get_number(quantidades_w(quantidades_w.last)); --the last value;

                                                        if	(quantidades_w.count > 2) then
                                                            material_w.qt_conv_compra_estoque	:= get_number(quantidades_w(quantidades_w.last -2 )) * get_number(quantidades_w(quantidades_w.last -1 ));
                                                        else
                                                            material_w.qt_conv_compra_estoque	:= get_number(quantidades_w(quantidades_w.last -1 ));
                                                        end if;

                                                    else
                                                        material_w.qt_conv_compra_estoque	:= get_number(c04_w.zahl);
                                                        material_w.qt_conv_estoque_consumo	:= 1;
                                                    end if;

                                                    dbms_output.put_line('2: '||c04_w.einheit);
                                                    imp_unidade_medida(c04_w.einheit, null, 'N', cd_unidade_medida_consumo_w );
                                                end loop;
                                                close c04;


                                                imp_unidade_medida('P', null, 'N', material_w.cd_unidade_medida_compra);
                                                imp_unidade_medida('St', null, 'N', material_w.cd_unidade_medida_estoque);

                                                if	(einheit_pgr2_w is not null) then
                                                    dbms_output.put_line('3: '||einheit_pgr2_w);
                                                    imp_unidade_medida(einheit_pgr2_w, null, 'N', cd_unidade_medida_consumo_w );
                                                end if;

                                                material_w.cd_unidade_medida_consumo := cd_unidade_medida_consumo_w;
                                                */

                                                --cursor based on the SO 1769192
						if c10%isopen then
							close c10;
						end if;

                                                open c10;
                                                loop
                                                    fetch c10 into
                                                        c10_w;
                                                    EXIT WHEN NOT FOUND; /* apply on c10 */

                                                    material_w.cd_unidade_medida_compra		:= c10_w.cd_unidade_medida_compra;
                                                    material_w.qt_conv_compra_estoque		:= c10_w.qt_conv_compra_estoque;
                                                    material_w.cd_unidade_medida_estoque	:= c10_w.cd_unidade_medida_estoque;
                                                    material_w.qt_conv_estoque_consumo		:= c10_w.qt_conv_estoque_consumo;
                                                    material_w.cd_unidade_medida_consumo	:= c10_w.cd_unidade_medida_consumo;
                                                    material_w.qt_minimo_multiplo_solic		:= 1;

                                                end loop;
                                                close c10;

                                                begin
                                                    select	a.zahl,
                                                              a.einheit
                                                    into STRICT	material_w.ds_dose_embalagem,
                                                        material_w.cd_unid_med_dose_emb
                                                    from	pgr2_med a
                                                    where	a.typ = '1'
                                                      and	a.pzn = pzn_w
                                                      and	a.nr_seq_import = nr_seq_import_w  LIMIT 1;
                                                exception
                                                    when others then
                                                        material_w.ds_dose_embalagem	:=	null;
                                                        material_w.cd_unid_med_dose_emb	:=	null;
                                                end;

                                                begin
                                                    select	kvp.entschluesselung
                                                    into STRICT	material_w.ie_tamanho_embalagem
                                                    from	kvp_med kvp,
                                                            pgr_med pgr
                                                    where	kvp.dateinr = 1065
                                                      and	kvp.feldidentifier = '03'
                                                      and	kvp.schluesselwert = pgr.einstufung
                                                      and	pgr.pzn = pzn_w
                                                      and	kvp.nr_seq_import = nr_seq_import_w
                                                      and	pgr.nr_seq_import = nr_seq_import_w  LIMIT 1;
                                                exception
                                                    when others then
                                                        material_w.ie_tamanho_embalagem	:=	null;
                                                end;

                                                select	nextval('material_seq')
                                                into STRICT	material_w.cd_material
;

                                                material_w.cd_material_estoque	:= material_w.cd_material;

                                                insert into material values (material_w.*);
                                                'M' := gravar_log('M', 'I'); --mat/med registration
						if c11%isopen then
							close c11;
						end if;
                                                --cursor created based on the SO 1769192, to add the unit conversion
                                                open c11;
                                                loop
                                                    fetch c11 into
                                                        c11_w;
                                                    EXIT WHEN NOT FOUND; /* apply on c11 */
                                                    atualiza_mat_conversao_unidade(material_w.cd_material, c11_w.conversao_unidade_medida_1, 1, c11_w.conversao_qt_conversao_1);
                                                    atualiza_mat_conversao_unidade(material_w.cd_material, c11_w.conversao_unidade_medida_2, 2, c11_w.conversao_qt_conversao_2);
                                                end loop;
                                                close c11;

                                                /*if	(material_w.ie_receita = 'S') then
                                                    inserir_medic_controlado(material_w.cd_material, cart_med_w.btm);
                                                end if;*/
                                                CALL gerar_material_estab_integ(cd_estabelecimento_w,material_w.cd_material,nm_usuario_abdata_w);

                                                update	material_estab
                                                set	cd_material_conta	= material_w.cd_material
                                                where	cd_material		= material_w.cd_material
                                                  and	cd_estabelecimento	= cd_estabelecimento_w;

                                                update	material_estab
                                                set	ie_estoque_lote 		= 'N',
                                                       ie_controla_serie 		= 'N',
                                                       ie_requisicao 		= 'N',
                                                       ie_prescricao 		= 'S',
                                                       ie_padronizado 		= 'N',
                                                       ie_ressuprimento 		= 'N',
                                                       ie_material_estoque 	= 'N',
                                                       ie_baixa_estoq_pac 	= 'N'
                                                where	cd_material 		= material_w.cd_material;

                                                select	nextval('material_sistema_externo_seq')
                                                into STRICT	material_sistema_ext_w.nr_sequencia
;

                                                material_sistema_ext_w.dt_atualizacao		:= clock_timestamp();
                                                material_sistema_ext_w.dt_atualizacao_nrec	:= clock_timestamp();
                                                material_sistema_ext_w.nm_usuario		:= nm_usuario_abdata_w;
                                                material_sistema_ext_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
                                                material_sistema_ext_w.ie_sistema		:= 'ABDATA';
                                                material_sistema_ext_w.cd_material		:= material_w.cd_material;
                                                material_sistema_ext_w.cd_codigo		:= pzn_w;
                                                material_sistema_ext_w.cd_referencia		:= material_w.ds_material;

                                                insert into material_sistema_externo values (material_sistema_ext_w.*);

                                            end if;

                                            --update price table
                                            if (get_number(cart_med_w.apo_vk) > 0) and (cart_med_w.gdat_preise IS NOT NULL AND cart_med_w.gdat_preise::text <> '') then
                                                atualiza_preco_mat(material_w.cd_material, get_number(cart_med_w.apo_vk), to_date(cart_med_w.gdat_preise,'yyyymmdd'));
                                            end if;

                                            ie_princ_vinculado_w	:= 'N';

                                            if c03 %isopen then
                                                close c03;
                                            end if;

                                            --cursor of the active ingredient
                                            open c03;
                                            loop
                                                fetch c03 into
                                                    c03_w;
                                                EXIT WHEN NOT FOUND; /* apply on c03 */

                                                begin
                                                    select	*
                                                    into STRICT	medic_ficha_tecnica_w
                                                    from	medic_ficha_tecnica
                                                    where	nr_externo	= c03_w.key_sto
                                                      and	coalesce(nr_seq_superior::text, '') = '' LIMIT 1;
                                                exception
                                                    when others then
                                                        medic_ficha_tecnica_w.nr_sequencia := null;
                                                end;

                                                begin
                                                    select	*
                                                    into STRICT	sna_med_w
                                                    from	sna_med
                                                    where	key_sto = c03_w.key_sto
                                                      and	vorzugsbezeichnung = '1'
                                                      and	nr_seq_import = nr_seq_import_w  LIMIT 1;
                                                exception
                                                    when others then
                                                        sna_med_w.nr_sequencia := null;
                                                end;

                                                if (coalesce(medic_ficha_tecnica_w.nr_sequencia::text, '') = '') and (coalesce(sna_med_w.name,'XPTO') <> 'XPTO')  then

                                                    select	nextval('medic_ficha_tecnica_seq')
                                                    into STRICT	medic_ficha_tecnica_w.nr_sequencia
;

                                                    medic_ficha_tecnica_w.nr_externo		:= c03_w.key_sto;
                                                    medic_ficha_tecnica_w.dt_atualizacao		:= clock_timestamp();
                                                    medic_ficha_tecnica_w.nm_usuario 		:= nm_usuario_abdata_w;
                                                    medic_ficha_tecnica_w.dt_atualizacao_nrec	:= clock_timestamp();
                                                    medic_ficha_tecnica_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
                                                    medic_ficha_tecnica_w.ds_substancia		:= substr(sna_med_w.name,1,80);
                                                    medic_ficha_tecnica_w.ie_antimicrobiano	:= 'N';

                                                    insert into medic_ficha_tecnica values (medic_ficha_tecnica_w.*);

                                                    'PRIATIV' := gravar_log('PRIATIV', 'I'); --active ingredient
                                                end if;

                                                if	((c03_w.entsprichtstoff = '1') or
                                                       ((coalesce(c03_w.entsprichtstoff,'XPTO') = 'XPTO') and (c03_w.rang = '1'))) and (ie_princ_vinculado_w = 'N') then --It is the main
                                                    ie_princ_vinculado_w 		:= 'S';
                                                    material_w.nr_seq_ficha_tecnica	:= medic_ficha_tecnica_w.nr_sequencia;
                                                    qt_conversao_mg_w 		:= dividir(get_number(c03_w.zahl), get_number(coalesce(fak_med_w.relativbezug_zahl,1)));

                                                    if (length(qt_conversao_mg_w) <= 9) then
                                                        material_w.qt_conversao_mg		:= qt_conversao_mg_w; --aligned with the srcunha, about the form of conversion.
                                                    --material_w.qt_concentracao_total	:= get_number(c03_w.zahl); OS 1834382
                                                    end if;

                                                    if (coalesce(fak_med_w.relativbezug_einheit,'XPTO') <> 'XPTO') then
                                                        imp_unidade_medida(fak_med_w.relativbezug_einheit, null, 'N', material_w.cd_unid_med_base_conc );
                                                    else
                                                        imp_unidade_medida(fak_med_w.absolutbezug_einheit, null, 'N', material_w.cd_unid_med_base_conc );
                                                    end if;

                                                    imp_unidade_medida(c03_w.einheit, null, 'N', material_w.cd_unid_med_concetracao );
                                                    imp_unidade_medida(c03_w.einheit, null, 'N', material_w.cd_unid_med_conc_total );

                                                    update	material
                                                    set	row 		= material_w
                                                    where	cd_material	= material_w.cd_material;

                                                else
                                                    begin
                                                        select	*
                                                        into STRICT	material_princ_ativo_w
                                                        from	material_princ_ativo
                                                        where	cd_material = material_w.cd_material
                                                          and	nr_seq_medic_ficha_tecnica = medic_ficha_tecnica_w.nr_sequencia  LIMIT 1;
                                                    exception
                                                        when others then
                                                            material_princ_ativo_w.nr_sequencia	:= null;
                                                    end;

                                                    if (coalesce(material_princ_ativo_w.nr_sequencia::text, '') = '') then

                                                        select	nextval('material_princ_ativo_seq')
                                                        into STRICT	material_princ_ativo_w.nr_sequencia
;

                                                        material_princ_ativo_w.dt_atualizacao			:= clock_timestamp();
                                                        material_princ_ativo_w.nm_usuario 			:= nm_usuario_abdata_w;
                                                        material_princ_ativo_w.dt_atualizacao_nrec		:= clock_timestamp();
                                                        material_princ_ativo_w.nm_usuario_nrec		:= nm_usuario_abdata_w;
                                                        material_princ_ativo_w.cd_material			:= material_w.cd_material;
                                                        material_princ_ativo_w.nr_seq_medic_ficha_tecnica	:= medic_ficha_tecnica_w.nr_sequencia;

                                                        qt_conversao_mg_w				:= dividir(get_number(c03_w.zahl), get_number(coalesce(fak_med_w.relativbezug_zahl,1)));

                                                        if (length(qt_conversao_mg_w) <= 9) then
                                                            material_princ_ativo_w.qt_conversao_mg	:= qt_conversao_mg_w;
                                                            --material_princ_ativo_w.qt_concentracao_total	:= get_number(c03_w.zahl); OS 1834382
                                                        end if;

                                                        material_princ_ativo_w.cd_unid_med_base_conc		:= coalesce(material_w.cd_unid_med_base_conc,material_w.cd_unidade_medida_consumo);

                                                        imp_unidade_medida(c03_w.einheit, null, 'N', material_princ_ativo_w.cd_unid_med_concetracao );
                                                        imp_unidade_medida(c03_w.einheit, null, 'N', material_princ_ativo_w.cd_unid_med_conc_total );

                                                        insert into material_princ_ativo values (material_princ_ativo_w.*);
                                                        'PRIATIV' := gravar_log('PRIATIV', 'I'); --active ingredient
                                                    elsif (material_princ_ativo_w.qt_conversao_mg	<> get_number(c03_w.zahl)) or
                                                        --(material_princ_ativo_w.qt_concentracao_total	<> get_number(c03_w.zahl)) or OS 1834382
                                                             (material_princ_ativo_w.cd_unid_med_base_conc <> material_w.cd_unidade_medida_consumo) then

                                                        material_princ_ativo_w.dt_atualizacao			:= clock_timestamp();
                                                        material_princ_ativo_w.nm_usuario 			:= nm_usuario_abdata_w;
                                                        qt_conversao_mg_w 				:= dividir(get_number(c03_w.zahl), get_number(coalesce(fak_med_w.relativbezug_zahl,1)));

                                                        if (length(qt_conversao_mg_w) <= 9) then
                                                            material_princ_ativo_w.qt_conversao_mg	:= qt_conversao_mg_w;
                                                            --material_princ_ativo_w.qt_concentracao_total	:= get_number(c03_w.zahl); OS 1834382
                                                        end if;

                                                        material_princ_ativo_w.cd_unid_med_base_conc		:= coalesce(material_w.cd_unid_med_base_conc,material_w.cd_unidade_medida_consumo);

                                                        imp_unidade_medida(c03_w.einheit, null, 'N', material_princ_ativo_w.cd_unid_med_concetracao );
                                                        imp_unidade_medida(c03_w.einheit, null, 'N', material_princ_ativo_w.cd_unid_med_conc_total );

                                                        update	material_princ_ativo
                                                        set	row = material_princ_ativo_w
                                                        where	nr_sequencia	= material_princ_ativo_w.nr_sequencia;

                                                        'PRIATIV' := gravar_log('PRIATIV', 'U'); --active ingredient
                                                    end if;

                                                end if;

                                                --treatment to link derivatives of the substance
                                                select	max(key_sto)
                                                into STRICT	key_sto_deriv_w
                                                from	fai_med x
                                                where	x.nr_seq_import		= nr_seq_import_w
                                                  and	x.key_fam		= nr_key_fam_w
                                                  and	x.stofftyp			= '1'
                                                  and	coalesce(x.entsprichtstoff::text, '') = ''
                                                  and	x.vergleich		= '0'
                                                  and	x.rang			= c03_w.rang - 1;

                                                if (key_sto_deriv_w IS NOT NULL AND key_sto_deriv_w::text <> '') then

                                                    begin
                                                        select	name
                                                        into STRICT	ds_name_deriv_w
                                                        from	sna_med
                                                        where	key_sto 			= key_sto_deriv_w
                                                          and	vorzugsbezeichnung 	= '1'
                                                          and	nr_seq_import 		= nr_seq_import_w  LIMIT 1;
                                                    exception
                                                        when others then
                                                            ds_name_deriv_w := null;
                                                    end;

                                                    if (position(sna_med_w.name  in ds_name_deriv_w) > 0) then

                                                        begin
                                                            select	*
                                                            into STRICT	medic_ficha_tecnica_deriv_w
                                                            from	medic_ficha_tecnica
                                                            where	nr_externo	= key_sto_deriv_w
                                                              and	coalesce(nr_seq_superior::text, '') = '' LIMIT 1;
                                                        exception
                                                            when others then
                                                                medic_ficha_tecnica_deriv_w.nr_sequencia := null;
                                                        end;

                                                        if (coalesce(medic_ficha_tecnica_deriv_w.nr_sequencia::text, '') = '')  then

                                                            select	nextval('medic_ficha_tecnica_seq')
                                                            into STRICT	medic_ficha_tecnica_deriv_w.nr_sequencia
;

                                                            medic_ficha_tecnica_deriv_w.nr_externo		:= key_sto_deriv_w;
                                                            medic_ficha_tecnica_deriv_w.dt_atualizacao		:= clock_timestamp();
                                                            medic_ficha_tecnica_deriv_w.nm_usuario 		:= nm_usuario_abdata_w;
                                                            medic_ficha_tecnica_deriv_w.dt_atualizacao_nrec	:= clock_timestamp();
                                                            medic_ficha_tecnica_deriv_w.nm_usuario_nrec		:= nm_usuario_abdata_w;
                                                            medic_ficha_tecnica_deriv_w.ds_substancia		:= substr( ds_name_deriv_w ,1,80);
                                                            medic_ficha_tecnica_deriv_w.ie_antimicrobiano		:= 'N';

                                                            insert into medic_ficha_tecnica values (medic_ficha_tecnica_deriv_w.*);

                                                            'PRIATIV' := gravar_log('PRIATIV', 'I'); --active ingredient
                                                        end if;

                                                        --link the derivative in the principal
                                                        begin
                                                            select	*
                                                            into STRICT	medic_ficha_deriv_ger_w
                                                            from	medic_ficha_deriv_ger
                                                            where	nr_seq_ficha_sup	= medic_ficha_tecnica_w.nr_sequencia
                                                              and	nr_seq_derivado		= medic_ficha_tecnica_deriv_w.nr_sequencia  LIMIT 1;
                                                        exception
                                                            when others then
                                                                medic_ficha_deriv_ger_w.nr_sequencia := null;
                                                        end;

                                                        if (coalesce(medic_ficha_deriv_ger_w.nr_sequencia::text, '') = '') then

                                                            select	nextval('medic_ficha_deriv_ger_seq')
                                                            into STRICT	medic_ficha_deriv_ger_w.nr_sequencia
;

                                                            medic_ficha_deriv_ger_w.dt_atualizacao	:= clock_timestamp();
                                                            medic_ficha_deriv_ger_w.nm_usuario		:= nm_usuario_abdata_w;
                                                            medic_ficha_deriv_ger_w.dt_atualizacao_nrec	:= clock_timestamp();
                                                            medic_ficha_deriv_ger_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
                                                            medic_ficha_deriv_ger_w.nr_seq_ficha_sup	:= medic_ficha_tecnica_w.nr_sequencia;
                                                            medic_ficha_deriv_ger_w.nr_seq_derivado	:= medic_ficha_tecnica_deriv_w.nr_sequencia;

                                                            insert into medic_ficha_deriv_ger values (medic_ficha_deriv_ger_w.*);

                                                        end if;

                                                        --vincular no derivado o principal.
                                                        begin
                                                            select	*
                                                            into STRICT	medic_ficha_deriv_ger_w
                                                            from	medic_ficha_deriv_ger
                                                            where	nr_seq_ficha_sup	= medic_ficha_tecnica_deriv_w.nr_sequencia
                                                              and	nr_seq_derivado	= medic_ficha_tecnica_w.nr_sequencia  LIMIT 1;
                                                        exception
                                                            when others then
                                                                medic_ficha_deriv_ger_w.nr_sequencia := null;
                                                        end;

                                                        if (coalesce(medic_ficha_deriv_ger_w.nr_sequencia::text, '') = '') then

                                                            select	nextval('medic_ficha_deriv_ger_seq')
                                                            into STRICT	medic_ficha_deriv_ger_w.nr_sequencia
;

                                                            medic_ficha_deriv_ger_w.dt_atualizacao	:= clock_timestamp();
                                                            medic_ficha_deriv_ger_w.nm_usuario		:= nm_usuario_abdata_w;
                                                            medic_ficha_deriv_ger_w.dt_atualizacao_nrec	:= clock_timestamp();
                                                            medic_ficha_deriv_ger_w.nm_usuario_nrec	:= nm_usuario_abdata_w;
                                                            medic_ficha_deriv_ger_w.nr_seq_ficha_sup	:= medic_ficha_tecnica_deriv_w.nr_sequencia;
                                                            medic_ficha_deriv_ger_w.nr_seq_derivado	:= medic_ficha_tecnica_w.nr_sequencia;

                                                            insert into medic_ficha_deriv_ger values (medic_ficha_deriv_ger_w.*);

                                                        end if;

                                                    end if;
                                                end if;
                                                --end of treatment to bind derivatives of the substance
                                            end loop;
                                            close c03;

                                            --update/insert barcode for material
                                            if (coalesce(cart_med_w.gtin,'XPTO') <> 'XPTO') then
                                                atualizar_cod_barra_mat(material_w.cd_material, cart_med_w.gtin);
                                            end if;

                                        end if;
                                    end if;
                                end if;

                            exception
                                when others then
                                    ds_erro_w	:= substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,2000);
                                    --process import error. pzn: #@nr_pzn#@

                                    --reason: #@ds_erro#@
                                    'E' := gravar_log('E', null);
                            end;

                            if (qt_commit_w = 100) then
                                commit;
                                qt_commit_w := 0;
                            end if;
                        end loop;

                        if (qt_commit_w > 0) then
                                commit;
                        end if;

                end loop;

        elsif (ie_tipo_import_w = 'UPD') then --data update
            begin

                --atualizar os dados com base na art_med
                for cart_med_w in c05 loop
                        begin
                            select	cd_material
                            into STRICT	cd_material_w
                            from	material_sistema_externo
                            where	ie_sistema 	= 'ABDATA'
                              and	cd_codigo	= cart_med_w.pzn  LIMIT 1;
                        exception
                            when others then
                                cd_material_w	:= null;
                        end;

                        if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then

                            select	*
                            into STRICT	material_w
                            from	material
                            where	cd_material	= cd_material_w;

                            /* as requested by stefan, shouldn't update the description of the materials in the update routine
                            if	(obter_se_atrib_update('ART_MED','LANGNAME',cart_med_w.nr_sequencia)) and
                                (cart_med_w.langname is not null) then
                                material_w.ds_material	:= l10nger_converte_protpy(cart_med_w.langname);
                            end if;
                            if	(obter_se_atrib_update('ART_MED','KURZNAME',cart_med_w.nr_sequencia)) and
                                (cart_med_w.kurzname is not null) then
                                material_w.ds_reduzida	:=l10nger_converte_protpy(cart_med_w.kurzname);
                            end if;*/
                            if (obter_se_atrib_update('ART_MED','BTM',cart_med_w.nr_sequencia)) then

                                --material_w.ie_narcotico	:= cart_med_w.btm;
                                if (cart_med_w.btm in ('2','3')) then --se passou a ser controlado
                                    material_w.ie_receita 	:= 'S';
                                    --	inserir_medic_controlado(material_w.cd_material, cart_med_w.btm);
                                elsif (material_w.ie_receita = 'S') and --se estava como controlado, mas deixou de ser.
                                         (cart_med_w.btm in ('0','1')) then
                                    material_w.ie_receita 	:= 'N';

                                    /*update	medic_controlado a
                                    set	a.ie_situacao	= 'I',
                                        a.dt_atualizacao	= sysdate,
                                        a.nm_usuario	= nm_usuario_abdata_w
                                    where	a.cd_material	= material_w.cd_material;*/
                                end if;
                            end if;
                            if (obter_se_atrib_update('ART_MED','APO_VK',cart_med_w.nr_sequencia)) and (obter_se_atrib_update('ART_MED','GDAT_PREISE',cart_med_w.nr_sequencia)) then
                                --update price table
                                if (get_number(cart_med_w.apo_vk) > 0) and (cart_med_w.gdat_preise IS NOT NULL AND cart_med_w.gdat_preise::text <> '') then
                                    atualiza_preco_mat(material_w.cd_material, get_number(cart_med_w.apo_vk), to_date(cart_med_w.gdat_preise,'yyyymmdd'));
                                end if;
                            end if;

                            if (obter_se_atrib_update('ART_MED','KEY_DAA',cart_med_w.nr_sequencia)) and (coalesce(cart_med_w.key_daa,'null') <> 'null') then
                                insert_anvisa_forma_farma(cart_med_w.key_daa, material_w.nr_seq_forma_farm );
                            end if;

                            material_w.dt_atualizacao	:= clock_timestamp();
                            material_w.nm_usuario		:= nm_usuario_abdata_w;

                            update	material
                            set	row 		= material_w
                            where	cd_material	= material_w.cd_material;

                            'M' := gravar_log('M', 'U');

                            if (obter_se_atrib_update('ART_MED','GTIN',cart_med_w.nr_sequencia)) and (cart_med_w.gtin IS NOT NULL AND cart_med_w.gtin::text <> '') then
                                atualizar_cod_barra_mat(material_w.cd_material, cart_med_w.gtin);
                            end if;
                        end if;
                    end loop;--cart_med_w

                --data update according to the fam_med
                for cfam_med_w in c06 loop
                        cd_material_w := get_mat_key_fam(cfam_med_w.key_fam);

                        if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then

                            select	*
                            into STRICT	material_w
                            from	material
                            where	cd_material	= cd_material_w;

                            if (obter_se_atrib_update('FAM_MED','KEY_IND_HAUPT',cfam_med_w.nr_sequencia)) and (obter_se_atrib_update('FAM_MED','PRODUKTGRUPPE',cfam_med_w.nr_sequencia)) then --if the material structure has been changed
                                gerar_estrutura_mat( cfam_med_w.key_ind_haupt, cfam_med_w.produktgruppe );

                                material_w.cd_classe_material	:= cd_classe_material_w;
                                material_w.nr_seq_familia	:= nr_seq_familia_w;

                                material_w.dt_atualizacao	:= clock_timestamp();
                                material_w.nm_usuario	:= nm_usuario_abdata_w;

                                update	material
                                set	row 		= material_w
                                where	cd_material	= cd_material_w;
                                'M' := gravar_log('M', 'U');
                            end if;
                        end if;
                    end loop; --cfam_med_w

                --update active ingredient data based on fai_med
                for cfai_med_w in c07 loop

                        cd_material_w := get_mat_key_fam(cfai_med_w.key_fam);
                        if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then

                            begin
                                select	*
                                into STRICT	fak_med_w
                                from	fak_med
                                where	key_fam		= cfai_med_w.key_fam
                                  and	nr_seq_import	= nr_seq_import_w  LIMIT 1;
                            exception
                                when others then
                                    begin
                                        select	x.relativbezug_zahl
                                        into STRICT	fak_med_w.relativbezug_zahl
                                        from (SELECT	relativbezug_zahl,
                                                           nr_seq_import
                                                 from	fak_med
                                                 where	key_fam		= cfai_med_w.key_fam
                                                 order by nr_seq_import desc) x LIMIT 1;
                                    exception
                                        when others then
                                            fak_med_w.relativbezug_zahl	:= null;
                                    end;
                            end;

                            begin
                                select	a.key_sto
                                into STRICT	key_sto_orig_w
                                from	fai_med a
                                where	a.key_fam	= cfai_med_w.key_fam
                                  and	a.rang		= cfai_med_w.rang
                                  and	a.stofftyp 	= '1'
                                  and	a.vergleich	= '1'
                                  and	(a.zahl IS NOT NULL AND a.zahl::text <> '')
                                  and	a.nr_seq_import	= nr_seq_import_ges_w  LIMIT 1;
                            exception
                                when others then
                                    key_sto_orig_w	:= null;
                            end;

                            if (key_sto_orig_w IS NOT NULL AND key_sto_orig_w::text <> '') then

                                begin
                                    select	nr_sequencia
                                    into STRICT	nr_seq_medic_ficha_tec_w
                                    from	medic_ficha_tecnica
                                    where	nr_externo	= key_sto_orig_w  LIMIT 1;
                                exception
                                    when others then
                                        nr_seq_medic_ficha_tec_w	:= null;
                                end;

                                select	*
                                into STRICT	material_w
                                from	material
                                where	cd_material	= cd_material_w;

                                --cursor of the active ingredient of the imported material, based on the key_sto
                                for cprincativomat in c08 loop

                                        if (coalesce(cprincativomat.nr_sequencia::text, '') = '') then
                                            select	*
                                            into STRICT	material_princ_ativo_w
                                            from	material_princ_ativo
                                            where	nr_sequencia	= cprincativomat.nr_sequencia;
                                            --update the quantities
                                            if (obter_se_atrib_update('FAI_MED','ZAHL',cfai_med_w.nr_sequencia)) and (get_number(cfai_med_w.zahl) >= 0) then

                                                qt_conversao_mg_w 	:= dividir( get_number( cfai_med_w.zahl ), get_number(coalesce( fak_med_w.relativbezug_zahl,1)) );
                                                if (length(qt_conversao_mg_w) <= 9) then
                                                    material_princ_ativo_w.qt_conversao_mg	:= qt_conversao_mg_w; --aligned with the srcunha, about the form of conversion.
                                                    --material_princ_ativo_w.qt_concentracao_total	:= get_number(cfai_med_w.zahl);
                                                    material_princ_ativo_w.dt_atualizacao	:= clock_timestamp();
                                                    material_princ_ativo_w.nm_usuario	:= nm_usuario_abdata_w;

                                                    update	material_princ_ativo
                                                    set	row		= material_princ_ativo_w
                                                    where	nr_sequencia	= cprincativomat.nr_sequencia;
                                                    'PRIATIV' := gravar_log('PRIATIV', 'U');
                                                end if;
                                            end if;
                                            --update unit of measure
                                            if (obter_se_atrib_update('FAI_MED','EINHEIT',cfai_med_w.nr_sequencia)) then
                                                if (cfai_med_w.einheit IS NOT NULL AND cfai_med_w.einheit::text <> '') then

                                                    imp_unidade_medida(cfai_med_w.einheit, null, 'N', material_princ_ativo_w.cd_unid_med_concetracao );
                                                    imp_unidade_medida(cfai_med_w.einheit, null, 'N', material_princ_ativo_w.cd_unid_med_conc_total );

                                                    material_princ_ativo_w.dt_atualizacao	:= clock_timestamp();
                                                    material_princ_ativo_w.nm_usuario	:= nm_usuario_abdata_w;

                                                    update	material_princ_ativo
                                                    set	row		= material_princ_ativo_w
                                                    where	nr_sequencia	= cprincativomat.nr_sequencia;

                                                    'PRIATIV' := gravar_log('PRIATIV', 'U');
                                                end if;
                                            end if;

                                        else
                                            --updates quantities if they have been updated
                                            if (obter_se_atrib_update('FAI_MED','ZAHL',cfai_med_w.nr_sequencia)) and (get_number(cfai_med_w.zahl) >= 0) then

                                                qt_conversao_mg_w 	:= dividir( get_number( cfai_med_w.zahl ), get_number(coalesce( fak_med_w.relativbezug_zahl,1)) );

                                                if (length(qt_conversao_mg_w) <= 9) then
                                                    material_w.qt_conversao_mg		:= qt_conversao_mg_w; --aligned with the srcunha, about the form of conversion.
                                                --material_w.qt_concentracao_total	:= get_number(cfai_med_w.zahl);
                                                end if;

                                                material_w.dt_atualizacao	:= clock_timestamp();
                                                material_w.nm_usuario	:= nm_usuario_abdata_w;

                                                update	material
                                                set	row		= material_w
                                                where	cd_material	= cd_material_w;
                                                'PRIATIV' := gravar_log('PRIATIV', 'U');
                                            end if;
                                            --updates unit of measure
                                            if (obter_se_atrib_update('FAI_MED','EINHEIT',cfai_med_w.nr_sequencia)) then
                                                if (cfai_med_w.einheit IS NOT NULL AND cfai_med_w.einheit::text <> '') then

                                                    imp_unidade_medida(cfai_med_w.einheit, null, 'N', material_w.cd_unid_med_concetracao );
                                                    imp_unidade_medida(cfai_med_w.einheit, null, 'N', material_w.cd_unid_med_conc_total );

                                                    material_w.dt_atualizacao	:= clock_timestamp();
                                                    material_w.nm_usuario	:= nm_usuario_abdata_w;

                                                    update	material
                                                    set	row		= material_w
                                                    where	cd_material	= cd_material_w;
                                                    'PRIATIV' := gravar_log('PRIATIV', 'U');
                                                end if;
                                            end if;
                                        end if;
                                    end loop;
                            end if;
                        end if;
                    end loop; --cfai_med_w
                for cfak_med_w in c09 loop

                        cd_material_w := get_mat_key_fam(cfak_med_w.key_fam);
                        if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then

                            if (obter_se_atrib_update('FAK_MED','RELATIVBEZUG_EINHEIT',cfak_med_w.nr_sequencia)) or (obter_se_atrib_update('FAK_MED','ABSOLUTBEZUG_EINHEIT',cfak_med_w.nr_sequencia)) then
                                if (coalesce(cfak_med_w.relativbezug_einheit,'XPTO') <> 'XPTO') then
                                    imp_unidade_medida(cfak_med_w.relativbezug_einheit, null, 'N', cd_unid_med_base_conc_w );
                                else
                                    imp_unidade_medida(cfak_med_w.absolutbezug_einheit, null, 'N', cd_unid_med_base_conc_w );
                                end if;

                                if (cd_unid_med_base_conc_w IS NOT NULL AND cd_unid_med_base_conc_w::text <> '') then
                                    update	material
                                    set	cd_unid_med_base_conc	= cd_unid_med_base_conc_w,
                                           dt_atualizacao		= clock_timestamp(),
                                           nm_usuario		= nm_usuario_abdata_w
                                    where	cd_material		= cd_material_w;

                                    update	material_princ_ativo
                                    set	cd_unid_med_base_conc	= cd_unid_med_base_conc_w,
                                           dt_atualizacao		= clock_timestamp(),
                                           nm_usuario		= nm_usuario_abdata_w
                                    where	cd_material		= cd_material_w;

                                    'PRIATIV' := gravar_log('PRIATIV', 'U');
                                end if;
                            end if;
                        end if;
                    end loop; --cfak_med_w
            exception
                when others then
                    ds_erro_w	:= substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,2000);
                    --process import error. pzn: #@nr_pzn#@

                    --reason: #@ds_erro#@
                    'E' := gravar_log('E', null);
            end;

        elsif (ie_tipo_import_w = 'DEL') then --records exclusion

        --exclude the active ingredient based on fai_med
            for cfai_med_w in c07 loop

                    cd_material_w := get_mat_key_fam(cfai_med_w.key_fam);
                    if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
                        begin
                            select	a.key_sto
                            into STRICT	key_sto_orig_w
                            from	fai_med a
                            where	a.key_fam	= cfai_med_w.key_fam
                              and	a.rang		= cfai_med_w.rang
                              and	a.stofftyp 		= '1'
                              and	a.vergleich	= '1'
                              and	(a.zahl IS NOT NULL AND a.zahl::text <> '')
                              and	a.nr_seq_import	= nr_seq_import_ges_w  LIMIT 1;
                        exception
                            when others then
                                key_sto_orig_w	:= null;
                        end;

                        if (key_sto_orig_w IS NOT NULL AND key_sto_orig_w::text <> '') then

                            begin
                                select	nr_sequencia
                                into STRICT	nr_seq_medic_ficha_tec_w
                                from	medic_ficha_tecnica
                                where	nr_externo	= key_sto_orig_w  LIMIT 1;
                            exception
                                when others then
                                    nr_seq_medic_ficha_tec_w	:= null;
                            end;

                            if (nr_seq_medic_ficha_tec_w IS NOT NULL AND nr_seq_medic_ficha_tec_w::text <> '') then

                                update	material
                                set	nr_seq_ficha_tecnica 	 = NULL,
                                       dt_atualizacao		= clock_timestamp(),
                                       nm_usuario		= nm_usuario_abdata_w
                                where	cd_material		= cd_material_w
                                  and	nr_seq_ficha_tecnica	= nr_seq_medic_ficha_tec_w;

                                delete	from material_princ_ativo
                                where	cd_material		=  cd_material_w
                                  and	nr_seq_medic_ficha_tecnica	= nr_seq_medic_ficha_tec_w;

                                'PRIATIV' := gravar_log('PRIATIV', 'D');
                            end if;
                        end if;
                    end if;
                end loop;

            --inactivate materials based on art_med
            for cart_med_w in c05 loop
                    begin
                        select	cd_material
                        into STRICT	cd_material_w
                        from	material_sistema_externo
                        where	ie_sistema 	= 'ABDATA'
                          and	cd_codigo	= cart_med_w.pzn  LIMIT 1;
                    exception
                        when others then
                            cd_material_w	:= null;
                    end;

                    if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then

                        update	material
                        set	ie_situacao 	= 'I',
                               dt_atualizacao	= clock_timestamp(),
                               nm_usuario	= nm_usuario_abdata_w
                        where 	cd_material	= cd_material_w;

                        'M' := gravar_log('M', 'D');
                    end if;
                end loop;

        end if;

        update	abdamed_import
        set	dt_importacao	= clock_timestamp()
        where	nr_sequencia	= nr_seq_import_w;

    end loop;
    close c00;

    delete	FROM abdamed_import a
    where	a.ie_tipo 	= 'FLD'
      and	coalesce(a.dt_importacao::text, '') = ''
      and	not exists (SELECT	1
         from	abdamed_field x
         where	x.nr_seq_import	= a.nr_sequencia);

--updates the field record
    update	abdamed_import
    set	dt_importacao	= clock_timestamp()
    where	coalesce(dt_importacao::text, '') = ''
      and	ie_tipo		= 'FLD';

    commit;

    CALL gravar_processo_longo('','',null);

    CALL wheb_usuario_pck.set_ie_executar_trigger('S');

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE abdata_import_processing (nm_usuario_p text) FROM PUBLIC;

