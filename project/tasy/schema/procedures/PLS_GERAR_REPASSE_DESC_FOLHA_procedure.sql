-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_repasse_desc_folha ( nr_seq_lote_repasse_p bigint, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

/*
ie_opcao_p
	'G' = Gerar
	'D' = Desfazer
*/
nr_seq_cobranca_w		bigint;
dt_inicial_w			timestamp;
dt_final_w			timestamp;
nr_seq_empresa_w		bigint;
nr_seq_titulo_w			bigint;
nr_seq_repasse_tit_w		bigint;
pr_comissao_w			double precision;
vl_comissao_w			double precision;
vl_cobranca_w			double precision;
pr_comissao_ww			double precision;
vl_comissao_ww			double precision;
vl_cobranca_ww			double precision;
vl_total_titulos_w		double precision;
dt_referencia_w			timestamp;
cd_historico_credito_w		bigint;
cd_historico_debito_w		bigint;
cd_conta_contabil_credito_w	varchar(20);
cd_conta_contabil_debito_w	varchar(20);
qt_total_titulos_w		bigint;
ie_tipo_lote_w			varchar(2);
nr_titulo_w			bigint;
qt_titulo_retorno_w		bigint;

C01 CURSOR FOR /* Busca conta contábil e histório para Crédito */
	SELECT	cd_historico,
		cd_conta_contabil
	from	pls_regra_ctb_mensal_desc
	where	trunc(dt_referencia_w) between trunc(dt_inicio_vigencia) and fim_dia(coalesce(dt_fim_vigencia,dt_referencia_w))
	and	cd_estabelecimento	= cd_estabelecimento_p
	and	ie_debito_credito	= 'C'
	and	(((nr_seq_empresa_desc_folha = nr_seq_empresa_w) or (coalesce(nr_seq_empresa_w::text, '') = '')) or coalesce(nr_seq_empresa_desc_folha::text, '') = '')
	order	by nr_seq_empresa_desc_folha;

C02 CURSOR FOR /* Busca conta contábil e histório para Débito */
	SELECT	cd_historico,
		cd_conta_contabil
	from	pls_regra_ctb_mensal_desc
	where	trunc(dt_referencia_w) between trunc(dt_inicio_vigencia) and fim_dia(coalesce(dt_fim_vigencia,dt_referencia_w))
	and	cd_estabelecimento	= cd_estabelecimento_p
	and	ie_debito_credito	= 'D'
	and	(((nr_seq_empresa_desc_folha = nr_seq_empresa_w) or (coalesce(nr_seq_empresa_w::text, '') = '')) or coalesce(nr_seq_empresa_desc_folha::text, '') = '')
	order	by nr_seq_empresa_desc_folha;

C03 CURSOR FOR
	SELECT	b.nr_sequencia,
		b.vl_cobranca,
		b.nr_titulo
	from	cobranca_escritural	a,
		titulo_receber_cobr	b
	where	b.nr_seq_cobranca = a.nr_sequencia
	and	(a.nr_seq_empresa IS NOT NULL AND a.nr_seq_empresa::text <> '')
	and (nr_seq_cobranca_w = a.nr_sequencia or coalesce(nr_seq_cobranca_w::text, '') = '')
	and	((((coalesce(dt_inicial_w::text, '') = '') and (coalesce(dt_final_w::text, '') = '')) and (trunc(a.dt_remessa_retorno, 'month') = trunc(dt_referencia_w, 'month'))) or
		(dt_inicial_w IS NOT NULL AND dt_inicial_w::text <> '' AND dt_final_w IS NOT NULL AND dt_final_w::text <> '' AND a.dt_remessa_retorno between dt_inicial_w and dt_final_w))
	and (nr_seq_empresa_w = a.nr_seq_empresa or coalesce(nr_seq_empresa_w::text, '') = '')
	and	a.ie_remessa_retorno = 'T'
	and	ie_tipo_lote_w	= 'R'
	
union

	SELECT	b.nr_sequencia,
		b.vl_cobranca,
		b.nr_titulo
	from	cobranca_escritural	a,
		titulo_receber_cobr	b
	where	b.nr_seq_cobranca = a.nr_sequencia
	and	(a.nr_seq_empresa IS NOT NULL AND a.nr_seq_empresa::text <> '')
	and (nr_seq_cobranca_w = a.nr_sequencia or coalesce(nr_seq_cobranca_w::text, '') = '')
	and	((((coalesce(dt_inicial_w::text, '') = '') and (coalesce(dt_final_w::text, '') = '')) and (trunc(a.dt_remessa_retorno, 'month') = trunc(dt_referencia_w, 'month'))) or
		(dt_inicial_w IS NOT NULL AND dt_inicial_w::text <> '' AND dt_final_w IS NOT NULL AND dt_final_w::text <> '' AND a.dt_remessa_retorno between dt_inicial_w and dt_final_w))
	and (nr_seq_empresa_w = a.nr_seq_empresa or coalesce(nr_seq_empresa_w::text, '') = '')
	and	a.ie_remessa_retorno = 'R'
	and	ie_tipo_lote_w	= 'P';

C04 CURSOR FOR
	SELECT	pr_comissao,
		vl_comissao
	from	pls_desc_empresa_regra
	where	nr_seq_empresa	= nr_seq_empresa_w
	and	trunc(clock_timestamp()) between trunc(dt_inicio_vigencia,'dd') and fim_dia(coalesce(dt_fim_vigencia,clock_timestamp()));


BEGIN

if (ie_opcao_p = 'G') then
	select	nr_seq_cobranca,
		dt_inicial,
		dt_final,
		nr_seq_empresa,
		dt_referencia,
		coalesce(ie_tipo_lote,'R')
	into STRICT	nr_seq_cobranca_w,
		dt_inicial_w,
		dt_final_w,
		nr_seq_empresa_w,
		dt_referencia_w,
		ie_tipo_lote_w
	from	pls_desc_lote_comissao
	where	nr_sequencia = nr_seq_lote_repasse_p;

	if ((dt_inicial_w IS NOT NULL AND dt_inicial_w::text <> '') and coalesce(dt_final_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265923,'');
		--Mensagem: Falta informar a data final para a geração do lote!
	elsif ((dt_final_w IS NOT NULL AND dt_final_w::text <> '') and coalesce(dt_inicial_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265924,'');
		--Mensagem: Falta informar a data inicial para a geração do lote!
	end if;

	/* Buscar as contas para contabilização */

	open C01;
	loop
	fetch C01 into
		cd_historico_credito_w,
		cd_conta_contabil_credito_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	end loop;
	close C01;
	if (coalesce(cd_conta_contabil_credito_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1008711);
		--Mensagem: Não foi realizado o cadastro da conta financeira para contabilização de Crédito para Comissão. ' || chr(13) || '(Shift + F11 -> Plano de Saúde -> OPS - Contabilidade -> Regra contábil de descontos em folha)
	end if;

	open C02;
	loop
	fetch C02 into
		cd_historico_debito_w,
		cd_conta_contabil_debito_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
	end loop;
	close C02;
	if (coalesce(cd_conta_contabil_debito_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1008715);
		--Mensagem: Não foi realizado o cadastro da conta financeira para contabilização de Débito para Comissão. ' ||chr(13) || '(Shift + F11 -> Plano de Saúde -> OPS - Contabilidade -> Regra contábil de descontos em folha)
	end if;

	open C04;
	loop
	fetch C04 into
		pr_comissao_w,
		vl_comissao_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		pr_comissao_ww	:= coalesce(pr_comissao_ww,0) + coalesce(pr_comissao_w,0);
		vl_comissao_ww	:= coalesce(vl_comissao_ww,0) + coalesce(vl_comissao_w,0);
		end;
	end loop;
	close C04;

	open C03;
	loop
	fetch c03 into
		nr_seq_titulo_w,
		vl_cobranca_w,
		nr_titulo_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		select	max(nr_sequencia)
		into STRICT	nr_seq_repasse_tit_w
		from	pls_desc_comissao
		where	nr_seq_titulo_cobr = nr_seq_titulo_w;

		if (ie_tipo_lote_w = 'P') then
			select	count(*)
			into STRICT	qt_titulo_retorno_w
			from	cobranca_escritural	a,
				titulo_receber_cobr	b
			where	b.nr_seq_cobranca	= a.nr_sequencia
			and	b.nr_titulo		= nr_titulo_w
			and	a.ie_remessa_retorno	= 'T';
		end if;

		if (coalesce(nr_seq_repasse_tit_w,0) = 0) then
			vl_cobranca_w	:= round((vl_cobranca_w * pr_comissao_ww) / 100,2) + vl_comissao_ww;

			if	((ie_tipo_lote_w = 'R') or (ie_tipo_lote_w = 'P' AND qt_titulo_retorno_w = 0)) then
				insert	into	pls_desc_comissao(	nr_sequencia, nr_seq_titulo_cobr, nr_seq_lote,
						cd_estabelecimento, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, vl_cobranca,
						cd_conta_cred, cd_conta_deb, cd_historico_cred,
						cd_historico_deb)
					values (	nextval('pls_desc_comissao_seq'), nr_seq_titulo_w, nr_seq_lote_repasse_p,
						cd_estabelecimento_p, clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, vl_cobranca_w,
						cd_conta_contabil_credito_w, cd_conta_contabil_debito_w, cd_historico_credito_w,
						cd_historico_debito_w);

				vl_cobranca_ww	:= coalesce(vl_cobranca_ww,0) + coalesce(vl_cobranca_w,0);
			end if;
		end if;

		end;
	end loop;
	close c03;

	select	count(*)
	into STRICT	qt_total_titulos_w
	from	pls_desc_comissao
	where	nr_seq_lote	= nr_seq_lote_repasse_p;

	if (qt_total_titulos_w > 0) then
		select	sum((substr(pls_obter_dados_titulo_cobr(nr_seq_titulo_cobr, 'VLC'),1,50))::numeric )
		into STRICT	vl_total_titulos_w
		from	pls_desc_comissao
		where	nr_seq_lote	= nr_seq_lote_repasse_p;

		update	pls_desc_lote_comissao
		set	dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			vl_total_titulos	= coalesce(vl_total_titulos_w,0),
			vl_repasse_lote		= coalesce(vl_cobranca_ww,0),
			ie_status		= 'G'
		where	nr_sequencia		= nr_seq_lote_repasse_p;
	end if;
elsif (ie_opcao_p = 'D') then
	delete	from	pls_desc_comissao
	where	nr_seq_lote = nr_seq_lote_repasse_p;

	update	pls_desc_lote_comissao
	set	dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		ie_status		= 'P',
		vl_total_titulos	= 0,
		vl_repasse_lote		= 0
	where	nr_sequencia	= nr_seq_lote_repasse_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_repasse_desc_folha ( nr_seq_lote_repasse_p bigint, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

