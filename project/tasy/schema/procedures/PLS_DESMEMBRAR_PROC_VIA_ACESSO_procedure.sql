-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_desmembrar_proc_via_acesso ( nr_seq_conta_p bigint, nm_usuario_p text, nr_seq_regra_p text) AS $body$
DECLARE


ie_simultaneo_w			varchar(255);
nr_seq_regra_ww			varchar(255);
cd_guia_referencia_w		varchar(20);
cd_medico_executor_w		varchar(20);
ie_tipo_guia_w			varchar(15);
dt_inicio_proc_w		varchar(15);
dt_fim_proc_w			varchar(15);
qt_proc_conta_w			double precision;
nr_seq_segurado_w		bigint;
nr_seq_regra_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
qt_proc_loop_w			bigint;
nr_seq_max_proc_w		bigint;
nr_seq_participante_w		bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_regra_aux_w		bigint	:= 0;
dt_procedimento_w		timestamp;
cd_estabelecimento_w		bigint;
nr_seq_conta_w			bigint;
qt_max_w			bigint;
vl_taxa_co_imp_w		pls_conta_proc.vl_taxa_co_imp%type;
vl_taxa_material_imp_w		pls_conta_proc.vl_taxa_material_imp%type;
vl_taxa_servico_imp_w		pls_conta_proc.vl_taxa_servico_imp%type;
vl_procedimento_ptu_imp_w	pls_conta_proc.vl_procedimento_ptu_imp%type;
vl_material_ptu_imp_w		pls_conta_proc.vl_material_ptu_imp%type;
vl_co_ptu_imp_w			pls_conta_proc.vl_co_ptu_imp%type;
vl_taxa_co_imp_unit_w		pls_conta_proc.vl_taxa_co_imp%type;
vl_taxa_material_imp_unit_w	pls_conta_proc.vl_taxa_material_imp%type;
vl_taxa_servico_imp_unit_w	pls_conta_proc.vl_taxa_servico_imp%type;
vl_procedimento_ptu_imp_unit_w	pls_conta_proc.vl_procedimento_ptu_imp%type;
vl_material_ptu_imp_unit_w	pls_conta_proc.vl_material_ptu_imp%type;
vl_co_ptu_imp_unit_w		pls_conta_proc.vl_co_ptu_imp%type;
/* Ler os procedimentos da conta 
Ter que ordenar pelo CD_PROCEDIMENTO para atualizar corretamente a variável qt_proc_loop_w */
C01 CURSOR FOR
	SELECT	a.nr_seq_conta,
		a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(a.qt_procedimento_imp,0),
		a.dt_procedimento,
		to_char(dt_inicio_proc,'hh24:mi:ss') dt_inicio_proc,
		to_char(dt_fim_proc,'hh24:mi:ss') dt_fim_proc,
		vl_taxa_co_imp,
		vl_taxa_material_imp,
		vl_taxa_servico_imp,
		vl_procedimento_ptu_imp,
		vl_material_ptu_imp,
		vl_co_ptu_imp	
	from	pls_conta_proc	a,
		pls_conta b
	where	a.nr_seq_conta	= b.nr_sequencia
	and	b.cd_guia	= cd_guia_referencia_w
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	
UNION

	SELECT	a.nr_seq_conta,
		a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(a.qt_procedimento_imp,0),
		a.dt_procedimento,
		to_char(dt_inicio_proc,'hh24:mi:ss'),
		to_char(dt_fim_proc,'hh24:mi:ss'),
		vl_taxa_co_imp,
		vl_taxa_material_imp,
		vl_taxa_servico_imp,
		vl_procedimento_ptu_imp,
		vl_material_ptu_imp,
		vl_co_ptu_imp
	from	pls_conta_proc	a,
		pls_conta b
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.cd_guia_referencia	= cd_guia_referencia_w
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	order by
		cd_procedimento,
		ie_origem_proced,
		dt_procedimento,
		dt_inicio_proc,
		dt_fim_proc,
		nr_seq_conta;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_proc_participante
	where	nr_seq_conta_proc	= nr_seq_max_proc_w;


BEGIN
select	coalesce(cd_guia_referencia,cd_guia),
	nr_seq_segurado,
	ie_tipo_guia,
	cd_medico_executor,
	cd_estabelecimento
into STRICT	cd_guia_referencia_w,
	nr_seq_segurado_w,
	ie_tipo_guia_w,
	cd_medico_executor_w,
	cd_estabelecimento_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_p;

nr_seq_regra_ww	:= nr_seq_regra_p;

while(length(nr_seq_regra_ww) > 0) loop
	begin
	if (position(',' in nr_seq_regra_ww) > 0) then
		nr_seq_regra_w	:= (substr(nr_seq_regra_ww,1,position(',' in nr_seq_regra_ww) -1))::numeric;
		nr_seq_regra_ww	:= substr(nr_seq_regra_ww,position(',' in nr_seq_regra_ww) + 1,length(nr_seq_regra_ww));
	else
		nr_seq_regra_w	:= (nr_seq_regra_ww)::numeric;
		nr_seq_regra_ww	:= null;
	end if;

	open C01;
	loop
	fetch C01 into
		nr_seq_conta_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		qt_proc_conta_w,
		dt_procedimento_w,
		dt_inicio_proc_w,
		dt_fim_proc_w,
		vl_taxa_co_imp_w,
		vl_taxa_material_imp_w,
		vl_taxa_servico_imp_w,
		vl_procedimento_ptu_imp_w,
		vl_material_ptu_imp_w,
		vl_co_ptu_imp_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin		
		qt_proc_loop_w	:= 0;
		
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_max_proc_w
		from	pls_conta_proc	a,
			pls_conta	b
		where	b.nr_sequencia		= a.nr_seq_conta
		and	b.nr_sequencia		= nr_seq_conta_w
		and	cd_procedimento 	= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w
		and	trunc(a.dt_procedimento)	= trunc(dt_procedimento_w)
		and	to_char(a.dt_inicio_proc,'hh24:mi:ss')	= dt_inicio_proc_w
		and	coalesce(a.ie_glosa,'N')	<> 'S'
		and	qt_procedimento_imp	<> 1;
		
		if (coalesce(nr_seq_max_proc_w::text, '') = '') then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_max_proc_w
			from	pls_conta_proc	a,
				pls_conta	b
			where	b.nr_sequencia		= a.nr_seq_conta
			and	b.nr_sequencia		= nr_seq_conta_w
			and	cd_procedimento 	= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w
			and	coalesce(a.ie_glosa,'N')	<> 'S'
			and	trunc(a.dt_procedimento)	= trunc(dt_procedimento_w)
			and	to_char(a.dt_inicio_proc,'hh24:mi:ss')	= dt_inicio_proc_w;
		end if;
		
		vl_taxa_co_imp_unit_w	   	:= dividir(vl_taxa_co_imp_w,qt_proc_conta_w);
		vl_taxa_material_imp_unit_w     := dividir(vl_taxa_material_imp_w,qt_proc_conta_w);
		vl_taxa_servico_imp_unit_w      := dividir(vl_taxa_servico_imp_w,qt_proc_conta_w);
		vl_procedimento_ptu_imp_unit_w  := dividir(vl_procedimento_ptu_imp_w,qt_proc_conta_w);
		vl_material_ptu_imp_unit_w      := dividir(vl_material_ptu_imp_w,qt_proc_conta_w);
		vl_co_ptu_imp_unit_w		:= dividir(vl_co_ptu_imp_w,qt_proc_conta_w);
					
		while(qt_proc_loop_w < qt_proc_conta_w) loop
			/*Para fazer insert da na segunda vez que passa no cursor, ou caso tenha só uma regra para o procedimento com quantidade de procedimento maior que 1*/

			begin
			if (qt_proc_loop_w	<> 0) then
				if (nr_seq_max_proc_w IS NOT NULL AND nr_seq_max_proc_w::text <> '') then

					update	pls_conta_proc
					set	qt_procedimento_imp	= 1,
						vl_procedimento_imp	= vl_procedimento_imp - vl_unitario_imp,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp(),
						vl_taxa_co_imp		= vl_taxa_co_imp_unit_w,
						vl_taxa_material_imp    = vl_taxa_material_imp_unit_w,
						vl_taxa_servico_imp     = vl_taxa_servico_imp_unit_w,
						vl_procedimento_ptu_imp	= vl_procedimento_ptu_imp_unit_w,
						vl_material_ptu_imp	= vl_material_ptu_imp_unit_w,
						vl_co_ptu_imp		= vl_co_ptu_imp_unit_w
					where	nr_sequencia		= nr_seq_max_proc_w;
					
					select	nextval('pls_conta_proc_seq')
					into STRICT	nr_seq_conta_proc_w
					;

					insert into pls_conta_proc(nr_sequencia, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, dt_procedimento,
						cd_procedimento, ie_origem_proced, qt_procedimento, 
						vl_unitario, vl_procedimento, ie_via_acesso, 
						nr_seq_conta, dt_procedimento_imp, cd_procedimento_imp, 
						qt_procedimento_imp, vl_unitario_imp, vl_procedimento_imp, 
						ie_via_acesso_imp, dt_inicio_proc, dt_fim_proc,
						dt_inicio_proc_imp, dt_fim_proc_imp, tx_participacao,
						vl_participacao, ds_procedimento_imp, cd_tipo_tabela_imp,
						tx_reducao_acrescimo_imp, ie_tipo_despesa_imp, ie_tecnica_utilizada, 
						vl_liberado, vl_glosa, vl_saldo,
						nr_seq_regra, ie_tipo_despesa, ie_situacao, 
						ie_status, dt_liberacao, nm_usuario_liberacao, 
						tx_item, nr_seq_tiss_tabela, nr_seq_regra_horario, 
						vl_custo_operacional, vl_anestesista, vl_materiais, 
						vl_medico, vl_auxiliares, nr_seq_regra_liberacao, 
						ds_log, cd_conta_cred, cd_conta_deb, 
						cd_historico, cd_conta_glosa_cred, cd_conta_glosa_deb,
						cd_historico_glosa, nr_seq_regra_ctb_deb, nr_seq_regra_ctb_cred, 
						nr_seq_grupo_ans, nr_seq_honorario_crit, nr_seq_dados_proc, 
						nr_seq_pacote, vl_beneficiario, nr_seq_regra_pos_estab, 
						ie_cobranca_prevista, ds_justificativa, nr_seq_grupo_ans_sup, 
						nr_lote_provisao, nr_lote_contabil, vl_coparticipacao, 
						vl_liquido, cd_conta_copartic_cred, cd_conta_copartic_deb,
						cd_historico_copartic, ie_valor_informado, ie_sca, 
						nr_seq_mensalidade_item, nr_seq_tabela_sca, nr_seq_cobertura,
						nr_seq_item_sip, nr_seq_regra_vinculo, ie_tipo_cobertura,
						nr_seq_sca_cobertura, nr_seq_tipo_limitacao, nr_seq_conta_medica, vl_proc_copartic,
						nr_seq_regra_copartic, ie_tipo_contratacao, ie_segmentacao_sip, 
						cd_item_sip, sg_uf_sip, cd_classificacao_sip, 
						cd_porte_anestesico, nr_seq_setor_atend,
						ie_autogerado, dt_item_sip, ie_ato_cooperado, nr_seq_regra_cooperado, 
						cd_medico_solicitante, tx_intercambio, vl_intercambio, 
						tx_pcmso, vl_pcmso, cd_classif_cred, 
						cd_classif_deb, nr_seq_regra_valor, ie_estagio_complemento,
						nr_seq_proc_princ, nr_seq_proc_ref, ie_via_obrigatoria, 
						ie_glosa, nr_seq_participante_hi, vl_taxa_co_imp,
						vl_taxa_material_imp, vl_taxa_servico_imp, vl_procedimento_ptu_imp,
						vl_material_ptu_imp, vl_co_ptu_imp)
					(SELECT	nr_seq_conta_proc_w, clock_timestamp(), nm_usuario_p, 
						clock_timestamp(), nm_usuario_p, dt_procedimento,
						cd_procedimento, ie_origem_proced, 1,
						vl_unitario, vl_procedimento, ie_via_acesso, 
						nr_seq_conta, dt_procedimento_imp, cd_procedimento_imp, 
						1, vl_unitario_imp, vl_unitario_imp, 
						ie_via_acesso_imp, dt_inicio_proc, dt_fim_proc,
						dt_inicio_proc_imp, dt_fim_proc_imp, tx_participacao,
						vl_participacao, ds_procedimento_imp, cd_tipo_tabela_imp,
						tx_reducao_acrescimo_imp, ie_tipo_despesa_imp, ie_tecnica_utilizada, 
						vl_liberado, vl_glosa, vl_saldo,
						nr_seq_regra, ie_tipo_despesa, ie_situacao, 
						ie_status, dt_liberacao, nm_usuario_liberacao, 
						tx_item, nr_seq_tiss_tabela, nr_seq_regra_horario, 
						vl_custo_operacional, vl_anestesista, vl_materiais, 
						vl_medico, vl_auxiliares, nr_seq_regra_liberacao, 
						ds_log, cd_conta_cred, cd_conta_deb, 
						cd_historico, cd_conta_glosa_cred, cd_conta_glosa_deb,
						cd_historico_glosa, nr_seq_regra_ctb_deb, nr_seq_regra_ctb_cred, 
						nr_seq_grupo_ans, nr_seq_honorario_crit, nr_seq_dados_proc, 
						nr_seq_pacote, vl_beneficiario, nr_seq_regra_pos_estab, 
						ie_cobranca_prevista, ds_justificativa, nr_seq_grupo_ans_sup, 
						nr_lote_provisao, nr_lote_contabil, vl_coparticipacao, 
						vl_liquido, cd_conta_copartic_cred, cd_conta_copartic_deb,
						cd_historico_copartic, ie_valor_informado, ie_sca, 
						nr_seq_mensalidade_item, nr_seq_tabela_sca, nr_seq_cobertura,
						nr_seq_item_sip, nr_seq_regra_vinculo, ie_tipo_cobertura,
						nr_seq_sca_cobertura, nr_seq_tipo_limitacao, nr_seq_conta_medica, vl_proc_copartic,
						nr_seq_regra_copartic, ie_tipo_contratacao, ie_segmentacao_sip, 
						cd_item_sip, sg_uf_sip, cd_classificacao_sip, 
						cd_porte_anestesico, nr_seq_setor_atend,
						ie_autogerado, dt_item_sip, ie_ato_cooperado, nr_seq_regra_cooperado, 
						cd_medico_solicitante, tx_intercambio, vl_intercambio, 
						tx_pcmso, vl_pcmso, cd_classif_cred, 
						cd_classif_deb, nr_seq_regra_valor, ie_estagio_complemento,
						nr_seq_max_proc_w, nr_seq_proc_ref, ie_via_obrigatoria, 
						ie_glosa, nr_seq_participante_hi, vl_taxa_co_imp_unit_w,
						vl_taxa_material_imp_unit_w, vl_taxa_servico_imp_unit_w, vl_procedimento_ptu_imp_unit_w,
						vl_material_ptu_imp_unit_w, vl_co_ptu_imp_unit_w
					from	pls_conta_proc
					where	nr_sequencia	= nr_seq_max_proc_w);
					
					CALL pls_gravar_log_conta(	nr_seq_conta_p, nr_seq_conta_proc_w, null,
								'Procedimento '||nr_seq_conta_proc_w||' gerado a partir da via de acesso! ', nm_usuario_p);
					
					CALL pls_cta_proc_mat_regra_pck.cria_copia_regra_proc_tiss(nr_seq_max_proc_w, nr_seq_conta_proc_w, 'S', nm_usuario_p);
						
					open C02;
					loop
					fetch C02 into	
						nr_seq_participante_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */
						begin
						insert into pls_proc_participante(cd_cbo_saude_imp, cd_cgc_imp, cd_guia,
							cd_medico, cd_medico_imp, cd_prestador_imp,
							dt_atualizacao, dt_atualizacao_nrec, ie_conselho_profissional,
							ie_funcao_medico_imp, nm_medico_executor_imp, nm_usuario,
							nm_usuario_nrec, nr_cpf_imp, nr_crm_imp,
							nr_seq_cbo_saude, nr_seq_conselho, nr_seq_conta_proc,
							nr_seq_grau_partic, nr_seq_honorario_crit, nr_seq_prestador_pgto,
							nr_sequencia, sg_conselho_imp, uf_crm_imp,
							vl_honorario_medico, vl_participante, ie_status,
							ie_gerada_cta_honorario)
						(SELECT	cd_cbo_saude_imp, cd_cgc_imp, cd_guia,
							cd_medico, cd_medico_imp, cd_prestador_imp,
							dt_atualizacao, dt_atualizacao_nrec, ie_conselho_profissional,
							ie_funcao_medico_imp, nm_medico_executor_imp, nm_usuario,
							nm_usuario_nrec, nr_cpf_imp, nr_crm_imp,
							nr_seq_cbo_saude, nr_seq_conselho, nr_seq_conta_proc_w,
							nr_seq_grau_partic, nr_seq_honorario_crit, nr_seq_prestador_pgto,
							nextval('pls_proc_participante_seq'), sg_conselho_imp, uf_crm_imp,
							vl_honorario_medico, vl_participante,ie_status,
							ie_gerada_cta_honorario
						from	pls_proc_participante
						where	nr_sequencia	= nr_seq_participante_w);
						end;
					end loop;
					close C02;
					
					CALL pls_atualizar_proc_ref(nr_seq_conta_proc_w, cd_estabelecimento_w, nm_usuario_p);
				end if;
			end if;
			
			qt_proc_loop_w	:= qt_proc_loop_w + 1;
			end;
		end loop;
		end;
	end loop;
	close C01;
	end;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_desmembrar_proc_via_acesso ( nr_seq_conta_p bigint, nm_usuario_p text, nr_seq_regra_p text) FROM PUBLIC;

