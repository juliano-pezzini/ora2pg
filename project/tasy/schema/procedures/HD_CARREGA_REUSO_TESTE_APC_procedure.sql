-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_carrega_reuso_teste_apc ( nr_seq_dialisador_p bigint, nr_seq_dialise_p bigint, ie_result_prim_neg_p text, ds_erro_p INOUT text, ds_retorno_p INOUT text) AS $body$
DECLARE


nr_seq_unid_dialise_w		bigint;
nr_sequencia_w          bigint;
ie_dialise_iniciada_w		varchar(1);
cd_estabelecimento_w	  smallint;
cd_pf_teste_w           varchar(10);
nr_teste_w              smallint;
ie_status_w			        varchar(1);
ie_resultado_w			    varchar(1);
ie_status_atual_w		    varchar(15);
dt_fim_dialise_w		    timestamp;
dt_cancelamento_w		    timestamp;
dt_atualizacao_w        timestamp;
dt_atualizacao_nrec_w   timestamp;
dt_teste_w              timestamp;
nm_usuario_w            usuario.nm_usuario%type;
nm_usuario_nrec_w       usuario.nm_usuario%type;
nr_seq_hd_dialisador_teste_w	hd_dialisador_teste.nr_sequencia%type;
nr_seq_dialisador_ativo_w     varchar(255);
nr_seq_dialise_dialis_ativo_w varchar(255);
nr_seq_dialise_dialisador_w   varchar(255);
nm_pessoa_fisica_w            varchar(255);
qt_pa_diast_pre_deitado_w     varchar(255);
qt_pa_diast_pre_pe_w          varchar(255);
qt_pa_sist_pre_deitado_w      varchar(255);
qt_peso_pre_w                 varchar(255);
nr_seq_ponto_acesso_w         varchar(255);
nr_seq_maquina_w              varchar(255);
ie_tipo_dialise_w             varchar(255);
dt_dialise_retro_w            varchar(255);
ds_dt_nascimento_pf_w         varchar(255);

c01 CURSOR FOR
SELECT cd_estabelecimento,
       dt_atualizacao,
       nm_usuario,
       dt_atualizacao_nrec,
       nm_usuario_nrec,
       dt_teste,
       nr_teste,
       ie_resultado,
       cd_pf_teste,
       nr_seq_unid_dialise,
       nr_sequencia
  FROM hd_teste_reuso
 WHERE nr_seq_dialisador = nr_seq_dialisador_p
 AND  coalesce(nr_seq_dialise::text, '') = '';


BEGIN

open c01;
    loop
    fetch c01 INTO cd_estabelecimento_w,
       dt_atualizacao_w,
       nm_usuario_w,
       dt_atualizacao_nrec_w,
       nm_usuario_nrec_w,
       dt_teste_w,
       nr_teste_w,
       ie_resultado_w,
       cd_pf_teste_w,
       nr_seq_unid_dialise_w,
       nr_sequencia_w;
    EXIT WHEN NOT FOUND; /* apply on c01 */

    SELECT * FROM hd_obter_dados_dialise_js(nr_seq_dialise_p, cd_pf_teste_w, nr_seq_dialisador_ativo_w, nr_seq_dialise_dialisador_w, nm_pessoa_fisica_w, qt_pa_diast_pre_deitado_w, qt_pa_diast_pre_pe_w, qt_pa_sist_pre_deitado_w, qt_peso_pre_w, nr_seq_unid_dialise_w, nr_seq_ponto_acesso_w, nr_seq_maquina_w, ie_tipo_dialise_w, dt_dialise_retro_w, ds_dt_nascimento_pf_w) INTO STRICT cd_pf_teste_w, nr_seq_dialisador_ativo_w, nr_seq_dialise_dialisador_w, nm_pessoa_fisica_w, qt_pa_diast_pre_deitado_w, qt_pa_diast_pre_pe_w, qt_pa_sist_pre_deitado_w, qt_peso_pre_w, nr_seq_unid_dialise_w, nr_seq_ponto_acesso_w, nr_seq_maquina_w, ie_tipo_dialise_w, dt_dialise_retro_w, ds_dt_nascimento_pf_w;

                              /* obtem dados do dialisador da diálise */

      select max(nr_seq_dialisador),
             max(nr_sequencia),
             max(nr_seq_ponto_acesso),
             max(nr_seq_maquina)
        into STRICT nr_seq_dialisador_ativo_w,
             nr_seq_dialise_dialis_ativo_w,
             nr_seq_ponto_acesso_w,
             nr_seq_maquina_w
        from hd_dialise_dialisador
       where nr_seq_dialise  = nr_seq_dialise_p
         and coalesce(dt_retirada::text, '') = '';

      /* Pega a unidade de diálise */

      select	nr_seq_unid_dialise,
	            CASE WHEN coalesce(dt_inicio_dialise::text, '') = '' THEN  'N'  ELSE 'S' END ,
	            dt_fim_dialise,
	            dt_cancelamento
         into STRICT	nr_seq_unid_dialise_w,
	            ie_dialise_iniciada_w,
	            dt_fim_dialise_w,
	            dt_cancelamento_w
        from	hd_dialise
       where	nr_sequencia	= nr_seq_dialise_p;

      /* Obter status do dialisador */

      select	ie_status
        into STRICT	ie_status_atual_w
        from	hd_dializador
       where	nr_sequencia	= nr_seq_dialisador_p;

      select	nextval('hd_dialisador_teste_seq')
        into STRICT	nr_seq_hd_dialisador_teste_w
;

      /* Insere os dados do teste */

      insert into hd_dialisador_teste(
	      nr_sequencia,
	      dt_atualizacao,
	      nm_usuario,
	      dt_atualizacao_nrec,
	      nm_usuario_nrec,
	      nr_teste,
	      dt_teste,
	      ie_resultado,
	      cd_pf_teste,
	      nr_seq_dialise,
	      nr_seq_dialisador,
	      nr_seq_dialise_dialisador,
	      cd_estabelecimento,
	      nr_seq_unid_dialise,
	      ie_pos_dialise
      ) values (
	      nr_seq_hd_dialisador_teste_w,
	      dt_atualizacao_w,
	      nm_usuario_w,
	      dt_atualizacao_nrec_w,
	      nm_usuario_nrec_w,
	      nr_teste_w,
	      dt_teste_w,
	      ie_resultado_w,
	      cd_pf_teste_w,
	      nr_seq_dialise_p,
	      nr_seq_dialisador_p,
	      nr_seq_dialise_dialisador_w,
	      cd_estabelecimento_w,
	      nr_seq_unid_dialise_w,
	      'N'
      );

      update hd_teste_reuso
        set  nr_seq_dialise = nr_seq_dialise_p,
             nr_seq_unid_dialise = nr_seq_unid_dialise_w
      where  nr_sequencia = nr_sequencia_w;


      if (nr_teste_w = 1) then
	      CALL hd_gerar_assinatura(nr_seq_dialise_dialisador_w, null, nr_seq_dialise_p, nr_seq_hd_dialisador_teste_w, null, null, null, null, null, 'TI', nm_usuario_w, 'N');
      elsif (nr_teste_w = 2) then
	      CALL hd_gerar_assinatura(null, null, nr_seq_dialise_p, nr_seq_hd_dialisador_teste_w, null, null, null, null, null, 'TII', nm_usuario_w, 'N');
      end if;

    end loop;
    close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_carrega_reuso_teste_apc ( nr_seq_dialisador_p bigint, nr_seq_dialise_p bigint, ie_result_prim_neg_p text, ds_erro_p INOUT text, ds_retorno_p INOUT text) FROM PUBLIC;

