-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_benef_cong_eventual (cd_pessoa_fisica_p text, nr_seq_segurado_p bigint, cd_matricula_p text, ie_abrangencia_p text, dt_nascimento_p timestamp, nr_acomodacao_p bigint, nr_plano_p bigint, ds_email_p text, nm_mae_p text, nr_ddd_celular_p text, nr_telefone_celular_p text, ie_estado_civil_p text, ie_sexo_p text, nr_ddd_telefone_p text, nr_telefone_p text, nr_cpf_p text, nm_beneficiario_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_carteira_p text, nr_seq_congenere_p bigint, cd_coperativa_p text, ie_salvar_hominimo_p text, dt_validade_cartao_p timestamp, cd_pessoa_fisica_homon_p text, /* Utilizar pessoa fisica ja cadastrada para o novo cadastro */
 cd_usuario_plano_p INOUT text, qt_homonimos_p INOUT bigint, nr_seq_inclusao_p INOUT bigint, nm_social_p text) AS $body$
DECLARE

			
			
qt_homonimos_w		   	bigint := 0;
nr_seq_segurado_w	   	bigint;
nr_seq_inclusao_w	   	bigint := null;
cd_pessoa_fisica_w	  	varchar(10);
cd_usuario_plano_w	   	varchar(30);
ie_tipo_congenere_w	   	varchar(2);
cd_matricula_estipulante_w 	varchar(30);
ds_historico_w		   	varchar(4000);
nr_sequencia_compl_w	   	bigint;
qt_registro_w		   	bigint := 0;
nr_seq_segurado_cart_w	   	bigint;
ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;
ie_atual_cart_benef_int_w	pls_web_param_geral.ie_atual_cart_benef_int%type;	
dt_validade_atual_w		timestamp;
nr_seq_plano_ant_w		pls_plano.nr_sequencia%type;
ie_pcmso_w			pls_segurado.ie_pcmso%type;
ie_pcmso_prod_w			pls_plano.ie_pcmso%type;


BEGIN
--cadastra o segurado
if (coalesce(cd_pessoa_fisica_p::text, '') = '' or nr_seq_segurado_p is  null) then	
	nr_seq_inclusao_w := nr_seq_inclusao_p;	

	if (coalesce(cd_pessoa_fisica_homon_p::text, '') = '' ) then
		/* Rotina utilizada para gerar a inclusao de beneficiario e tambem a geracao de homonimos */

		SELECT * FROM pls_gerar_inclusao_benef_web(  	nm_beneficiario_p, to_char(dt_nascimento_p,'dd/mm/yyyy'), dt_validade_cartao_p, nr_cpf_p, nm_mae_p, null, nr_plano_p, null, null, nr_ddd_celular_p, nr_telefone_celular_p, ie_sexo_p, null, null, null, null, null, null, null, null, null, nr_ddd_telefone_p, nr_telefone_p, ds_email_p, null, null, null, nm_usuario_p, cd_estabelecimento_p, qt_homonimos_w, nr_seq_inclusao_w, nm_social_p) INTO STRICT qt_homonimos_w, nr_seq_inclusao_w;
	else
		select	max(b.nr_seq_inclusao_benef)
		into STRICT	nr_seq_inclusao_w
		from	pls_homonimo_pessoa_fisica	b,
			pessoa_fisica			a
		where	a.cd_pessoa_fisica = b.cd_pessoa_fisica			
		and	a.cd_pessoa_fisica = cd_pessoa_fisica_homon_p;
	end if;		
	
	if (qt_homonimos_w = 0  or coalesce(qt_homonimos_w::text, '') = '' or ie_salvar_hominimo_p = 'S') then
		/* Gerar somente o segurado */
			
		nr_seq_segurado_w := pls_gerar_segurado_congenere(	cd_pessoa_fisica_homon_p, nr_seq_inclusao_w, cd_coperativa_p, cd_usuario_plano_p, dt_validade_cartao_p, nm_usuario_p, cd_estabelecimento_p, coalesce(nr_seq_congenere_p,0), nr_carteira_p, 1, nr_seq_segurado_w);
	end if;	

	if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then		
		select	max(cd_usuario_plano)
		into STRICT	cd_usuario_plano_w
		from	pls_segurado_carteira
		where 	nr_seq_segurado =  nr_seq_segurado_w;
		
		if (cd_usuario_plano_w IS NOT NULL AND cd_usuario_plano_w::text <> '') then
			cd_usuario_plano_p := cd_usuario_plano_w;
		end if;			
	end if;	
end if;

nr_seq_segurado_w := coalesce(nr_seq_segurado_p, nr_seq_segurado_w);

--altera os dados do segurado
if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
	select	max(nr_seq_plano),
		coalesce(max(ie_pcmso), 'N')
	into STRICT	nr_seq_plano_ant_w,
		ie_pcmso_w
	from	pls_segurado
	where	nr_sequencia = nr_seq_segurado_w;
	
	update  pls_segurado
	set	cd_matricula_estipulante = cd_matricula_p,
		nr_seq_plano 	= nr_plano_p,
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_sequencia 	= nr_seq_segurado_w
	and 	((nr_seq_plano	<> nr_plano_p) or (cd_matricula_estipulante <> cd_matricula_p));
	
	if (nr_seq_plano_ant_w <> nr_plano_p) then
		CALL pls_gerar_segurado_historico(	nr_seq_segurado_w, '4', clock_timestamp(),
						wheb_mensagem_pck.get_texto(1105646,	'DS_PLANO_ANT='|| nr_seq_plano_ant_w || ' ' || substr(pls_obter_dados_produto(nr_seq_plano_ant_w,'N'),1,255) ||
											';DS_PLANO_NOVO='|| nr_plano_p || ' ' || substr(pls_obter_dados_produto(nr_plano_p,'N'),1,255)),
						'pls_gerar_benef_cong_eventual',
						null, null, null,
						null, clock_timestamp(), null,
						null, null, null,
						null, null, nm_usuario_p, 'N');
						
		select	coalesce(max(ie_pcmso), 'N')
		into STRICT	ie_pcmso_prod_w
		from	pls_plano
		where	nr_sequencia = nr_plano_p;

		if (ie_pcmso_prod_w <> ie_pcmso_w) then
			update	pls_segurado
			set	ie_pcmso = ie_pcmso_prod_w,
				dt_atualizacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_sequencia = nr_seq_segurado_w;
			
			CALL pls_gerar_segurado_historico(	nr_seq_segurado_w, '77', clock_timestamp(),
							wheb_mensagem_pck.get_texto(1182130, 'DE='|| ie_pcmso_w || ';PARA='|| ie_pcmso_prod_w), 'pls_gerar_benef_cong_eventual', null,
							null, null, null, 
							clock_timestamp(), null, null, 
							null, null, null, 
							null, nm_usuario_p, 'N');
		end if;
	end if;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_segurado_compl_inter
	where	nr_seq_segurado 	= nr_seq_segurado_w;
	
	if (qt_registro_w > 0) then
		update	pls_segurado_compl_inter
		set	ie_abrangencia 		  = ie_abrangencia_p,
			nr_seq_tipo_acomodacao    = nr_acomodacao_p,
			nm_usuario 		  = nm_usuario_p,
			dt_atualizacao		  = clock_timestamp()
		where	nr_seq_segurado           = nr_seq_segurado_w;
		
	else
		insert into pls_segurado_compl_inter(nr_sequencia, nr_seq_segurado, dt_atualizacao,
						     nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						     nr_seq_tipo_acomodacao, ie_abrangencia)
					      values (nextval('pls_segurado_compl_inter_seq'), nr_seq_segurado_w, clock_timestamp(),
						     nm_usuario_p, clock_timestamp(), nm_usuario_p,
						     nr_acomodacao_p, ie_abrangencia_p);
	end if;
	
	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	pls_segurado
	where	nr_sequencia = nr_seq_segurado_w;
	
	--segurado ja cadastrado na base
	if (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
		select	ie_tipo_segurado
		into STRICT	ie_tipo_segurado_w
		from 	pls_segurado
		where 	nr_sequencia	= nr_seq_segurado_w;
		
		ie_atual_cart_benef_int_w	:= pls_parametro_operadora_web('FAC', cd_estabelecimento_p);	
		
		if ((dt_validade_cartao_p IS NOT NULL AND dt_validade_cartao_p::text <> '') or (nr_carteira_p IS NOT NULL AND nr_carteira_p::text <> '')) then
			select  max(nr_sequencia)
			into STRICT	nr_seq_segurado_cart_w
			from 	pls_segurado_carteira
			where   nr_seq_segurado 	= nr_seq_segurado_p;
			
			if (nr_seq_segurado_cart_w IS NOT NULL AND nr_seq_segurado_cart_w::text <> '') then
				select  dt_validade_carteira
				into STRICT	dt_validade_atual_w
				from 	pls_segurado_carteira
				where   nr_sequencia 	= nr_seq_segurado_cart_w;					
			
				/* Sempre atualizar os dados da carteira quando se tratar de beneficiario eventual. 
				Qaundo for beneficiario de intercambio, verifica o parametro 'Forma de atualizacao da carteira beneficiario intercambio.', 
				da OPS - Gestao de Operadoras */
				if (ie_tipo_segurado_w in ('I','H')) or ((ie_tipo_segurado_w not in ('I','H')) and
					((ie_atual_cart_benef_int_w = 'SA') or (ie_atual_cart_benef_int_w = 'DM' and (to_date(dt_validade_cartao_p) > dt_validade_atual_w)))) then										
					if (nr_seq_segurado_cart_w IS NOT NULL AND nr_seq_segurado_cart_w::text <> '') then
						insert into 	pls_segurado_cart_ant(	nr_sequencia, nm_usuario, dt_atualizacao,
								cd_usuario_ant, dt_validade, dt_inicio_vigencia, 
								nr_seq_segurado, dt_alteracao, ds_observacao, 
								ie_status_carteira, nm_usuario_solicitacao, dt_solicitacao,
								nr_via_anterior, nm_usuario_nrec, dt_atualizacao_nrec,
								dt_desbloqueio, nm_usuario_desbloqueio, ie_tipo_desbloqueio)
							SELECT	nextval('pls_segurado_cart_ant_seq'), nm_usuario_p, clock_timestamp(), 
								cd_usuario_plano, dt_validade_carteira, dt_inicio_vigencia, 
								nr_seq_segurado, clock_timestamp(), ds_observacao, 
								'P', nm_usuario_solicitante, dt_solicitacao, 
								nr_via_solicitacao, nm_usuario_p, clock_timestamp(),
								dt_desbloqueio, nm_usuario_desbloqueio, ie_tipo_desbloqueio
							from	pls_segurado_carteira
							where	nr_sequencia	= nr_seq_segurado_cart_w;
						
						update	pls_segurado_carteira
						set	dt_validade_carteira 	= dt_validade_cartao_p,
							dt_atualizacao		= clock_timestamp(),
							nm_usuario		= nm_usuario_p,
							nm_usuario_solicitante	= nm_usuario_p,
							dt_solicitacao		= clock_timestamp(),
							ds_observacao		= wheb_mensagem_pck.get_texto(1127391)
						where	nr_sequencia		= nr_seq_segurado_cart_w;				
					
						if (nr_carteira_p IS NOT NULL AND nr_carteira_p::text <> '') then
							update	pls_segurado_carteira
							set	nr_via_solicitacao 	= nr_carteira_p,
								dt_atualizacao		= clock_timestamp(),
								nm_usuario		= nm_usuario_p
							where	nr_sequencia 		= nr_seq_segurado_cart_w;
						end if;	
					end if;
				end if;
			end if;
		end if;
	
		select  max(cd_matricula_estipulante)
		into STRICT	cd_matricula_estipulante_w
		from	pls_segurado
		where	nr_sequencia = nr_seq_segurado_p;
	
		if (cd_matricula_estipulante_w <> cd_matricula_p) then
			ds_historico_w := wheb_mensagem_pck.get_texto(1127396, 'NM_USUARIO_P='||nm_usuario_p);
				
			if (cd_matricula_estipulante_w IS NOT NULL AND cd_matricula_estipulante_w::text <> '') then
				ds_historico_w := wheb_mensagem_pck.get_texto(1127409, 'DS_HISTORICO='||ds_historico_w||';CD_MATRICULA_ESTIPULANTE='||cd_matricula_estipulante_w);
			end if;			

			CALL pls_gerar_segurado_historico(	nr_seq_segurado_p, '21', clock_timestamp(), ds_historico_w,
							null, null, null, null,
							null, null, null, null,
							null, null, null, null,
							nm_usuario_p, 'N');				
		end if;	
		
	end if;		
end if;	

--altera os dados da pessoa fisica
if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then	
	update	pessoa_fisica
	set 	nm_pessoa_fisica	= nm_beneficiario_p,
		nm_social		= nm_social_p,
		dt_nascimento		= dt_nascimento_p,
		nr_cpf			= nr_cpf_p,
		ie_sexo			= ie_sexo_p,
		ie_estado_civil		= ie_estado_civil_p,
		nr_ddd_celular		= nr_ddd_celular_p,
		nr_telefone_celular	= nr_telefone_celular_p,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where   cd_pessoa_fisica 	= cd_pessoa_fisica_w
	and((nm_pessoa_fisica 	<> nm_beneficiario_p) or (nm_social		<> nm_social_p) or (dt_nascimento		<> dt_nascimento_p) or (nr_cpf			<> nr_cpf_p) or (ie_sexo		<> ie_sexo_p) or (ie_estado_civil	<> ie_estado_civil_p) or (nr_ddd_celular		<> nr_ddd_celular_p) or (nr_telefone_celular	<> nr_telefone_celular_p));
	
	select	count(1)
	into STRICT	qt_registro_w
	from	compl_pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	and	ie_tipo_complemento = 5;
	
	if (qt_registro_w > 0) then		
		update	compl_pessoa_fisica
		set	nm_contato		= nm_mae_p,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	ie_tipo_complemento	= 5
		and	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and 	nm_contato		<> nm_mae_p;
	else
		select (coalesce(max(nr_sequencia),0)+1)
		into STRICT 	nr_sequencia_compl_w
		from 	compl_pessoa_fisica
		where 	cd_pessoa_fisica = cd_pessoa_fisica_w;
		
		insert     into	 compl_pessoa_fisica(nr_sequencia, cd_pessoa_fisica, ie_tipo_complemento,
				 dt_atualizacao, nm_usuario, nm_contato)
			 values (nr_sequencia_compl_w, cd_pessoa_fisica_w, 5,
				 clock_timestamp(), nm_usuario_p, nm_mae_p);
		commit;
	end if;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	compl_pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	and	ie_tipo_complemento = 1;
	
	if (qt_registro_w > 0) then
		update	compl_pessoa_fisica
		set	nr_ddd_telefone		= nr_ddd_telefone_p,
			nr_telefone		= nr_telefone_p,
			ds_email		= ds_email_p,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	ie_tipo_complemento	= 1
		and	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and 	((nr_ddd_telefone 	<> nr_ddd_telefone_p) or (nr_telefone 		<> nr_telefone_p) or (ds_email		<> ds_email_p));
	else
		select (coalesce(max(nr_sequencia),0)+1)
		into STRICT 	nr_sequencia_compl_w
		from 	compl_pessoa_fisica
		where 	cd_pessoa_fisica = cd_pessoa_fisica_w;
		
		insert   into	compl_pessoa_fisica(nr_sequencia, cd_pessoa_fisica, ie_tipo_complemento,
				dt_atualizacao, nm_usuario, nr_telefone,
				ds_email, nr_ddd_telefone)
			values (nr_sequencia_compl_w, cd_pessoa_fisica_w, 1,
				clock_timestamp(), nm_usuario_p, nr_telefone_p,
				ds_email_p, nr_ddd_telefone_p);
	end if;
end if;
	
qt_homonimos_p 		:= qt_homonimos_w;
nr_seq_inclusao_p 	:= nr_seq_inclusao_w;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_benef_cong_eventual (cd_pessoa_fisica_p text, nr_seq_segurado_p bigint, cd_matricula_p text, ie_abrangencia_p text, dt_nascimento_p timestamp, nr_acomodacao_p bigint, nr_plano_p bigint, ds_email_p text, nm_mae_p text, nr_ddd_celular_p text, nr_telefone_celular_p text, ie_estado_civil_p text, ie_sexo_p text, nr_ddd_telefone_p text, nr_telefone_p text, nr_cpf_p text, nm_beneficiario_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_carteira_p text, nr_seq_congenere_p bigint, cd_coperativa_p text, ie_salvar_hominimo_p text, dt_validade_cartao_p timestamp, cd_pessoa_fisica_homon_p text,  cd_usuario_plano_p INOUT text, qt_homonimos_p INOUT bigint, nr_seq_inclusao_p INOUT bigint, nm_social_p text) FROM PUBLIC;

