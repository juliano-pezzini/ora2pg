-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function consiste_validade_venc_item as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE consiste_validade_venc_item ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'CALL consiste_validade_venc_item_atx ( ' || quote_nullable(nr_sequencia_p) || ',' || quote_nullable(cd_estabelecimento_p) || ',' || quote_nullable(nm_usuario_p) || ' )';
	PERFORM * FROM dblink(v_conn_str, v_query) AS p (ret boolean);

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE consiste_validade_venc_item_atx ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_validade_menor_w		varchar(1);
qt_dias_vencimento_w		bigint;
ie_validade_prox_w		varchar(1);
ds_lista_mat_w			varchar(255);
cd_material_w			nota_fiscal_item.cd_material%type;
dt_validade_w			nota_fiscal_item.dt_validade%type;
ie_tipo_nota_w			nota_fiscal.ie_tipo_nota%type;c01 CURSOR FOR
SELECT 	a.cd_material,
	a.dt_validade,
	n.ie_tipo_nota
from   	nota_fiscal n,
	nota_fiscal_item a,
	nota_fiscal_item_lote b
where  	n.nr_sequencia = a.nr_sequencia
and  	a.nr_item_nf = b.nr_item_nf
and	a.nr_sequencia = b.nr_seq_nota
and 	n.nr_sequencia = nr_sequencia_p;


BEGIN

ie_validade_menor_w := obter_param_usuario(40, 38, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_validade_menor_w);
qt_dias_vencimento_w := obter_param_usuario(40, 230, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_dias_vencimento_w);
ie_validade_prox_w := obter_param_usuario(40, 231, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_validade_prox_w);

open C01;
loop
fetch C01 into	
	cd_material_w,
	dt_validade_w,
	ie_tipo_nota_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	if (coalesce(ie_validade_menor_w,'S') = 'N') and (dt_validade_w IS NOT NULL AND dt_validade_w::text <> '') and (dt_validade_w < clock_timestamp()) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(153760);
	end if;
	
	if (ie_tipo_nota_w = 'E') and (coalesce(qt_dias_vencimento_w,0) > 0) then
		ds_lista_mat_w := obter_se_validade_vencer_nf(nr_sequencia_p, cd_estabelecimento_p, nm_usuario_p, ds_lista_mat_w);
		
		if (coalesce(ie_validade_prox_w,'S') = 'N') and (coalesce(ds_lista_mat_w,'X') <> 'X') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(169735, 'DS_LISTA=' || ds_lista_mat_w);
		elsif (coalesce(ie_validade_prox_w,'S') = 'J') and (coalesce(ds_lista_mat_w,'X') <> 'X') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(169736);
		end if;
	end if;
	end;
end loop;
close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_validade_venc_item ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC; -- REVOKE ALL ON PROCEDURE consiste_validade_venc_item_atx ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

