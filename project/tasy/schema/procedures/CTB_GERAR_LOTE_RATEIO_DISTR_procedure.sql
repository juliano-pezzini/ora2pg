-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_gerar_lote_rateio_distr ( nr_seq_mes_ref_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, dt_referencia_p timestamp) AS $body$
DECLARE


nr_lote_contabil_w		lote_contabil.nr_lote_contabil%type;
cd_tipo_lote_contabil_w		lote_contabil.cd_tipo_lote_contabil%type;
dt_movimento_w			timestamp;
dt_referencia_w			timestamp;
ie_lote_gerado_w		varchar(1)	:= 'N';
nr_seq_regra_rateio_w		ctb_regra_rat_contabil.nr_sequencia%type;
cd_conta_origem_w		conta_contabil.cd_conta_contabil%type;
cd_centro_origem_w		centro_custo.cd_centro_custo%type;
cd_centro_distr_w		centro_custo.cd_centro_custo%type;
cd_historico_w			ctb_regra_rat_contabil.cd_historico%type;
pr_total_rateio_w		ctb_regra_rateio_grupo.pr_rateio%type;
cd_conta_contabil_w		conta_contabil.cd_conta_contabil%type;
ie_debito_credito_w		varchar(01);
cd_classif_credito_w		ctb_movimento.cd_classif_credito%type;
cd_classif_debito_w		ctb_movimento.cd_classif_debito%type;
cd_conta_debito_w		conta_contabil.cd_conta_contabil%type;
cd_conta_credito_w		conta_contabil.cd_conta_contabil%type;
vl_base_w			double precision;
nr_seq_contrapartida_w		ctb_movimento.nr_sequencia%type;
cd_centro_custo_ww		centro_custo.cd_centro_custo%type;
cd_conta_contabil_ww		conta_contabil.cd_conta_contabil%type;
nr_sequencia_w			ctb_movimento.nr_sequencia%type;
vl_movimento_w			ctb_movimento.vl_movimento%type;
vl_movimento_cc_w		double precision;
cd_conta_contabil_dest_w	ctb_regra_rat_dest.cd_conta_contabil_dest%type;
cd_centro_custo_dest_w		ctb_regra_rat_dest.cd_centro_custo_dest%type;
pr_rateio_w			ctb_regra_rateio_grupo.pr_rateio%type;
vl_saldo_origem_ant_w		ctb_balancete_distr.vl_saldo_origem%type;
vl_saldo_acum_ant_w		ctb_balancete_distr.vl_saldo_distr_acum%type;
vl_saldo_origem_w		ctb_balancete_distr.vl_saldo_origem%type;
vl_saldo_distr_acum_w		ctb_balancete_distr.vl_saldo_distr_acum%type;
vl_saldo_cc_origem_w		ctb_balancete_distr.vl_saldo_origem%type;
vl_saldo_distr_cc_acum_w	ctb_balancete_distr.vl_saldo_distr_acum%type;
nr_seq_mes_ref_ant_w		ctb_mes_ref.nr_sequencia%type;
qt_registros_w			bigint;
qt_total_registros_w		bigint;
dt_ultima_geracao_w		timestamp;
nr_seq_ultimo_mes_w		ctb_mes_ref.nr_sequencia%type;
nr_seq_distr_w			ctb_balancete_distr.nr_sequencia%type;
vl_movimento_sem_abs_w		ctb_movimento.vl_movimento%type;
vl_movimento_total_w		ctb_movimento.vl_movimento%type;
nr_seq_movto_cc_w		w_ctb_distr_centro.nr_sequencia%type;
vl_movto_dest_cc_w		ctb_movimento.vl_movimento%type;
nr_contador_cc_w		bigint;
qt_registros_cc_w		bigint;
nr_contador_conta_w		bigint;
qt_registros_conta_w		bigint;
nr_contador_dest_w		bigint;
qt_registros_dest_w		bigint;
nr_contador_cc_origem_w		bigint;
qt_registros_cc_origem_w	bigint;
qt_fator_rateio_w		bigint	:= 10000000;
vl_acum_cc_w			ctb_movimento.vl_movimento%type;
vl_movto_cc_w			ctb_movto_centro_custo.vl_movimento%type;
vl_acum_dest_w			w_ctb_distr_conta.vl_movimento%type;
vl_acum_cc_origem_w		w_ctb_distr_centro.vl_movimento%type;


c01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_conta_origem,
		a.cd_centro_origem,
		a.cd_centro_distr,
		a.cd_historico,
		(SELECT	sum(r.pr_rateio)
		from	ctb_grupo_rateio g,
			ctb_regra_rateio_grupo r,
			ctb_regra_rat_dest d
		where	d.nr_seq_regra_rateio = a.nr_sequencia
		and	g.nr_sequencia = d.nr_seq_grupo
		and	g.nr_sequencia = r.nr_seq_grupo
		and	r.cd_estabelecimento = cd_estabelecimento_p
		and	dt_referencia_p between r.dt_inicio_vigencia and coalesce(r.dt_fim_vigencia,dt_referencia_p)) pr_total_rateio
	from	ctb_regra_rat_contabil a
	where	a.cd_estabelecimento = cd_estabelecimento_p
	and	dt_referencia_p between dt_inicio_vigencia and coalesce(dt_final_vigencia,dt_referencia_p)
	and	coalesce(ie_regra_rat_saldo,'N') = 'S'
	and (select	sum(r.pr_rateio)
		from	ctb_grupo_rateio g,
			ctb_regra_rateio_grupo r,
			ctb_regra_rat_dest d
		where	d.nr_seq_regra_rateio = a.nr_sequencia
		and	g.nr_sequencia = d.nr_seq_grupo
		and	g.nr_sequencia = r.nr_seq_grupo
		and	r.cd_estabelecimento = cd_estabelecimento_p
		and	dt_referencia_p between r.dt_inicio_vigencia and coalesce(r.dt_fim_vigencia,dt_referencia_p)) > 0
	order by a.nr_seq_calculo, a.nr_sequencia;

c02 CURSOR FOR
	SELECT 	cd_conta_contabil,
		vl_movimento,
		vl_saldo
	from 	(SELECT	a.cd_conta_contabil,
			sum(a.vl_movimento) vl_movimento,
			sum(a.vl_saldo) vl_saldo
		from	ctb_saldo a
		where	a.nr_seq_mes_ref	= nr_seq_mes_ref_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.cd_conta_contabil	= coalesce(cd_conta_origem_w, a.cd_conta_contabil)
		and	(((a.cd_centro_custo	= cd_centro_origem_w)
		and (coalesce(cd_centro_origem_w,0) > 0))
		or (coalesce(cd_centro_origem_w,0) = 0))
		group by a.cd_conta_contabil) alias10
	where 	vl_movimento 	<> 0
	and	vl_saldo	<> 0
	order by cd_conta_contabil;

vet02	C02%RowType;

cc_origem CURSOR FOR
	SELECT	a.cd_centro_custo,
		a.cd_conta_contabil,
		a.cd_classificacao,
		a.vl_movimento,
		a.vl_saldo
	from	ctb_saldo a
	where	a.nr_seq_mes_ref	= nr_seq_mes_ref_p
	and	a.cd_estabelecimento	= cd_estabelecimento_p
	and	a.cd_conta_contabil	= coalesce(cd_conta_origem_w, a.cd_conta_contabil)
	and	(((a.cd_centro_custo	= cd_centro_origem_w)
	and (coalesce(cd_centro_origem_w,0) > 0))
	or (coalesce(cd_centro_origem_w,0) = 0))
	and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '')
	order by a.vl_saldo, a.vl_movimento, a.cd_conta_contabil, a.cd_centro_custo;

vet_cc_origem	cc_origem%RowType;

c03 CURSOR FOR
	SELECT	a.cd_conta_contabil_dest,
		a.cd_centro_custo_dest,
		(SELECT	sum(r.pr_rateio)
		from	ctb_grupo_rateio g,
			ctb_regra_rateio_grupo r
		where	g.nr_sequencia = a.nr_seq_grupo
		and	g.nr_sequencia = r.nr_seq_grupo
		and	r.cd_estabelecimento = cd_estabelecimento_p
		and	dt_referencia_p between r.dt_inicio_vigencia and coalesce(r.dt_fim_vigencia,dt_referencia_p)) pr_rateio
	from	ctb_regra_rat_dest a
	where	a.nr_seq_regra_rateio	= nr_seq_regra_rateio_w
	order by pr_rateio,
		cd_conta_contabil_dest,
		cd_centro_custo_dest;

c_movto_origem CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_lote_contabil,
		a.vl_movimento,
		a.cd_historico,
		a.cd_conta_contabil,
		a.nr_seq_agrupamento
	from	w_ctb_distr_conta a
	where	a.nr_lote_contabil = nr_lote_contabil_w
	and	exists (	SELECT	1
			from	w_ctb_distr_centro b
			where	a.nr_sequencia = b.nr_seq_movimento);

vet_movto_origem	c_movto_origem%RowType;

c_movto_dest CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_lote_contabil,
		a.vl_movimento,
		a.cd_historico,
		a.cd_conta_contabil,
		a.nr_seq_agrupamento,
		a.cd_centro_custo
	from	w_ctb_distr_conta a
	where	a.nr_seq_agrupamento	= vet_movto_origem.nr_seq_agrupamento
	and	a.nr_sequencia		<> vet_movto_origem.nr_sequencia;
	
vet_movto_dest	c_movto_dest%RowType;

c_movto_cc_origem CURSOR FOR
	SELECT	b.nr_sequencia,
		b.nr_seq_movimento,
		b.cd_centro_custo,
		coalesce((	SELECT	max(r.cd_centro_distr)
			from	w_ctb_distr_conta c,
				ctb_regra_rat_contabil r
			where	c.nr_sequencia		= b.nr_seq_movimento
			and	r.nr_sequencia		= c.nr_seq_agrupamento), b.cd_centro_custo) cd_centro_distr,
		b.vl_movimento,
		b.pr_rateio
	from	w_ctb_distr_centro b
	where	b.nr_seq_movimento = vet_movto_origem.nr_sequencia;

vet_movto_cc_origem	c_movto_cc_origem%RowType;

c_movto_lote CURSOR FOR
	SELECT  nr_sequencia
	from  ctb_movimento m
	where nr_lote_contabil = nr_lote_contabil_w
	and vl_movimento <> ( 	SELECT  abs(sum(c.vl_movimento))
				from  	ctb_movto_centro_custo c
				where 	c.nr_seq_movimento = m.nr_sequencia)
	and	1 = 2;

vet_movto_lote		c_movto_lote%RowType;


BEGIN

select	max(a.nr_sequencia)
into STRICT	nr_seq_mes_ref_ant_w
from	ctb_mes_ref a
where	a.dt_referencia = pkg_date_utils.start_of(pkg_date_utils.add_month(dt_referencia_p, -1, 0),'MONTH',0);

select	count(*)
into STRICT	qt_total_registros_w
from	ctb_balancete_distr a;

if (qt_total_registros_w <> 0) then

	select	count(*)
	into STRICT	qt_registros_w
	from	ctb_balancete_distr a
	where	a.nr_seq_mes_ref = nr_seq_mes_ref_ant_w;
					
	if (qt_registros_w = 0) then
	
		select	coalesce(max(a.nr_seq_mes_ref),0)
		into STRICT	nr_seq_ultimo_mes_w
		from	ctb_balancete_distr a;

		select	max(a.dt_referencia)
		into STRICT	dt_ultima_geracao_w
		from	ctb_mes_ref a
		where	a.nr_sequencia = nr_seq_ultimo_mes_w;
		

		if	((pkg_date_utils.start_of(dt_referencia_p,'MONTH',0) > pkg_date_utils.start_of(pkg_date_utils.add_month(dt_ultima_geracao_w, 1, 0),'MONTH',0)) and (pkg_date_utils.start_of(dt_referencia_p, 'MONTH') <> pkg_date_utils.start_of(dt_referencia_p,'YEAR',0))) then
			/* A ultima distribuicao de saldo foi realizada no mes #@DT_ULTIMA_GERACAO#@. Favor tambem gerar nos meses posteriores ate o atual. */

			CALL wheb_mensagem_pck.exibir_mensagem_abort(447051,'DT_ULTIMA_GERACAO=' || to_char(dt_ultima_geracao_w));
		end if;
	end if;
end if;

dt_movimento_w := dt_referencia_p;

select	coalesce(max(campo_numerico(coalesce(vl_parametro, vl_parametro_padrao))),0)
into STRICT	cd_tipo_lote_contabil_w
from	funcao_parametro
where	cd_funcao	= 923
and	nr_sequencia	= 3;

select	coalesce(max(nr_lote_contabil),0) + 1
into STRICT	nr_lote_contabil_w
from	lote_contabil;

if (cd_tipo_lote_contabil_w <> 0) then
	begin
	
	select	max(dt_referencia)
	into STRICT	dt_referencia_w
	from	ctb_mes_ref
	where	nr_sequencia	= nr_seq_mes_ref_p;

	if (pkg_date_utils.start_of(dt_referencia_w,'MONTH',0) <>
		 pkg_date_utils.start_of(dt_movimento_w,'MONTH',0)) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(260279);
	end if;
	
	select	coalesce(max(nr_lote_contabil),0) + 1
	into STRICT	nr_lote_contabil_w
	from	lote_contabil;
	
	insert into lote_contabil(
		nr_lote_contabil,
		dt_referencia,
		cd_tipo_lote_contabil,
		dt_atualizacao,
		nm_usuario,
		cd_estabelecimento,
		ie_situacao,
		vl_debito,
		vl_credito,
		dt_integracao,
		dt_atualizacao_saldo,
		dt_consistencia,
		nm_usuario_original,
		nr_seq_mes_ref,
		ie_encerramento,
		ds_observacao)
	values (	nr_lote_contabil_w,
		trunc(dt_movimento_w),
		cd_tipo_lote_contabil_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_estabelecimento_p,
		'A', 0, 0, null, null, null,
		nm_usuario_p,
		nr_seq_mes_ref_p,
		'N',
		-- Gerado pela distribuicao dos saldos
		wheb_mensagem_pck.get_texto(448687));
		
	
	ie_lote_gerado_w	:= 'S';
	end;
end if;

delete	
from	ctb_balancete_distr
where	nr_seq_mes_ref = nr_seq_mes_ref_p
and	nr_seq_regra_rat in (	SELECT	a.nr_sequencia
				from	ctb_regra_rat_contabil a
				where	a.cd_estabelecimento = cd_estabelecimento_p
				and	dt_referencia_p between dt_inicio_vigencia and coalesce(dt_final_vigencia,dt_referencia_p)
				and	coalesce(ie_regra_rat_saldo,'N') = 'S'
				and (select	sum(r.pr_rateio)
					from	ctb_grupo_rateio g,
						ctb_regra_rateio_grupo r,
						ctb_regra_rat_dest d
					where	d.nr_seq_regra_rateio	= a.nr_sequencia
					and	g.nr_sequencia		= d.nr_seq_grupo
					and	g.nr_sequencia		= r.nr_seq_grupo
					and	r.cd_estabelecimento	= cd_estabelecimento_p
					and	dt_referencia_p between r.dt_inicio_vigencia and coalesce(r.dt_fim_vigencia,dt_referencia_p)) <> 0);

delete	
from	w_ctb_distr_conta;

delete	
from	w_ctb_distr_centro a;

commit;

open C01;
loop
fetch C01 into	
	nr_seq_regra_rateio_w,
	cd_conta_origem_w,
	cd_centro_origem_w,
	cd_centro_distr_w,
	cd_historico_w,
	pr_total_rateio_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	cd_conta_contabil_w		:= '0';
	
	open C02;
	loop
	fetch C02 into	
		vet02;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
		vl_saldo_origem_ant_w 	:= 0;
		vl_saldo_acum_ant_w	:= 0;
		
		if (pkg_date_utils.start_of(dt_referencia_p,'MONTH',0) <> pkg_date_utils.start_of(dt_referencia_p,'YEAR',0)) then
			select	coalesce(sum(vl_saldo_origem),0) vl_saldo_origem,
				coalesce(sum(vl_saldo_distr_acum),0) vl_saldo_distr_acum
			into STRICT	vl_saldo_origem_ant_w,
				vl_saldo_acum_ant_w
			from	ctb_balancete_distr a,
				ctb_regra_rat_contabil r
			where	a.nr_seq_regra_rat = r.nr_sequencia
			and	r.cd_estabelecimento = cd_estabelecimento_p
			and	a.cd_conta_contabil = vet02.cd_conta_contabil
			and	a.nr_seq_mes_ref = nr_seq_mes_ref_ant_w;
		end if;
		
		if (vl_saldo_origem_ant_w = 0) then
			vl_saldo_origem_ant_w := vet02.vl_saldo - vet02.vl_movimento;
		end if;

		vl_saldo_origem_w	:= vet02.vl_movimento + vl_saldo_origem_ant_w;
		vl_base_w		:= dividir(vl_saldo_origem_w * pr_total_rateio_w,100);
		vl_saldo_distr_acum_w	:= vl_base_w;
		vl_movimento_w		:= vl_base_w - vl_saldo_acum_ant_w;
		
		vl_movimento_sem_abs_w	:= vl_movimento_w;

		/*Movimento de Contra-partida*/

		if (vet02.cd_conta_contabil <> cd_conta_contabil_w) then
			begin
			
			select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_seq_contrapartida_w
			from	w_ctb_distr_conta;
			
			insert into w_ctb_distr_conta(
				nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_lote_contabil,
				vl_movimento,
				cd_historico,
				cd_conta_contabil,
				nr_seq_agrupamento)
			values (	nr_seq_contrapartida_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_lote_contabil_w,
				vl_movimento_sem_abs_w,
				cd_historico_w,
				vet02.cd_conta_contabil,
				nr_seq_regra_rateio_w);
			
			end;
		else
			update	w_ctb_distr_conta
			set	vl_movimento	= vl_movimento + vl_movimento_sem_abs_w
			where	nr_sequencia	= nr_seq_contrapartida_w;
		end if;
		
		if (nr_seq_contrapartida_w IS NOT NULL AND nr_seq_contrapartida_w::text <> '') then
		
			select	count(*)
			into STRICT	qt_registros_cc_origem_w
			from	ctb_saldo a
			where	a.nr_seq_mes_ref	= nr_seq_mes_ref_p
			and	a.cd_estabelecimento	= cd_estabelecimento_p
			and	a.cd_conta_contabil	= coalesce(cd_conta_origem_w, a.cd_conta_contabil)
			and	(((a.cd_centro_custo	= cd_centro_origem_w)
			and (coalesce(cd_centro_origem_w,0) > 0))
			or (coalesce(cd_centro_origem_w,0) = 0))
			and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '');
			
			nr_contador_cc_origem_w	:= 0;
			vl_acum_cc_origem_w	:= 0;
			
			open cc_origem;
			loop
			fetch cc_origem into	
				vet_cc_origem;
			EXIT WHEN NOT FOUND; /* apply on cc_origem */
				begin
				nr_contador_cc_origem_w	:= nr_contador_cc_origem_w + 1;
				
				
				if (pkg_date_utils.start_of(dt_referencia_p,'MONTH',0) <> pkg_date_utils.start_of(dt_referencia_p,'YEAR',0)) then
					select	coalesce(sum(vl_saldo_origem),0) vl_saldo_origem,
						coalesce(sum(vl_saldo_distr_acum),0) vl_saldo_distr_acum
					into STRICT	vl_saldo_origem_ant_w,
						vl_saldo_acum_ant_w
					from	ctb_balancete_distr a,
						ctb_regra_rat_contabil r
					where	a.nr_seq_regra_rat = r.nr_sequencia
					and	r.cd_estabelecimento = cd_estabelecimento_p
					and	a.cd_conta_contabil	= vet02.cd_conta_contabil
					and	a.cd_centro_custo	= vet_cc_origem.cd_centro_custo
					and	a.nr_seq_mes_ref	= nr_seq_mes_ref_ant_w;
				end if;
				
				if (vl_saldo_origem_ant_w = 0) then
					vl_saldo_origem_ant_w := vet_cc_origem.vl_saldo - vet_cc_origem.vl_movimento;
				end if;
				
				vl_movimento_cc_w	:= round(dividir((vet_cc_origem.vl_movimento + vl_saldo_origem_ant_w) * pr_total_rateio_w,100) - vl_saldo_acum_ant_w,2);

				if (nr_contador_cc_origem_w = qt_registros_cc_origem_w) then
					vl_movimento_cc_w	:= vl_movimento_sem_abs_w - vl_acum_cc_origem_w;
				else
					vl_acum_cc_origem_w	:= vl_acum_cc_origem_w + vl_movimento_cc_w;
				end if;

				select	coalesce(max(nr_sequencia),0) + 1
				into STRICT	nr_seq_movto_cc_w
				from	w_ctb_distr_centro;
				
				insert into w_ctb_distr_centro(
					nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nr_seq_movimento,
					cd_centro_custo,
					vl_movimento,
					pr_rateio)
				values (	nr_seq_movto_cc_w,
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nr_seq_contrapartida_w,
					vet_cc_origem.cd_centro_custo,
					vl_movimento_cc_w,
					dividir_sem_round(vl_movimento_cc_w, vl_movimento_sem_abs_w) * qt_fator_rateio_w);
				
				select	nextval('ctb_balancete_distr_seq')
				into STRICT	nr_seq_distr_w
				;
				
				if (vl_saldo_origem_ant_w = 0) then
					vl_saldo_cc_origem_w := vet_cc_origem.vl_saldo;
				else
					vl_saldo_cc_origem_w := vet_cc_origem.vl_movimento + vl_saldo_origem_ant_w;
				end if;
				
				vl_saldo_distr_cc_acum_w	:= dividir(vl_saldo_cc_origem_w * pr_total_rateio_w,100);
				
				insert into ctb_balancete_distr(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_conta_contabil,
					cd_centro_custo,
					nr_seq_mes_ref,
					vl_saldo_origem,
					vl_saldo_distr_acum,
					nr_lote_contabil,
					nr_seq_regra_rat)
				values (	nr_seq_distr_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					vet02.cd_conta_contabil,
					vet_cc_origem.cd_centro_custo,
					nr_seq_mes_ref_p,
					vl_saldo_cc_origem_w,
					vl_saldo_distr_cc_acum_w,
					nr_lote_contabil_w,
					nr_seq_regra_rateio_w);
				
				end;
			end loop;
			close cc_origem;		
		end if;
		
		cd_conta_contabil_w	:= vet02.cd_conta_contabil;
		cd_conta_contabil_ww	:= vet02.cd_conta_contabil;
		nr_sequencia_w		:= null;
		
		select	count(*)
		into STRICT	qt_registros_dest_w
		from	ctb_regra_rat_dest a
		where	a.nr_seq_regra_rateio	= nr_seq_regra_rateio_w;
		
		nr_contador_dest_w	:= 0;
		vl_acum_dest_w		:= 0;
		
		open C03;
		loop
		fetch C03 into	
			cd_conta_contabil_dest_w,
			cd_centro_custo_dest_w,
			pr_rateio_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			nr_contador_dest_w	:= nr_contador_dest_w + 1;
			
			if (coalesce(nr_sequencia_w::text, '') = '') then
				cd_conta_contabil_ww	:= '0';
			end if;

			vl_saldo_acum_ant_w := 0;
			
			if (pkg_date_utils.start_of(dt_referencia_p,'MONTH',0) <> pkg_date_utils.start_of(dt_referencia_p,'YEAR',0)) then
				select	coalesce(sum(vl_saldo_distr_acum),0) vl_saldo_origem
				into STRICT	vl_saldo_acum_ant_w
				from	ctb_balancete_distr a,
					ctb_regra_rat_contabil r
				where	a.nr_seq_regra_rat = r.nr_sequencia
				and	r.cd_estabelecimento = cd_estabelecimento_p
				and	a.cd_conta_contabil = cd_conta_contabil_dest_w
				and	a.nr_seq_mes_ref = nr_seq_mes_ref_ant_w;
			end if;
			
			vl_movimento_w	:= dividir(vl_base_w * pr_rateio_w,pr_total_rateio_w);
			vl_saldo_distr_acum_w		:= (dividir(vl_base_w * pr_rateio_w,pr_total_rateio_w));
			
			if (vl_movimento_w < 0) then
				vl_movimento_w:= vl_movimento_w + abs(vl_saldo_acum_ant_w);
			else
				vl_movimento_w:= vl_movimento_w - abs(vl_saldo_acum_ant_w);
			end if;
			
			if (nr_contador_dest_w = qt_registros_dest_w) then
				vl_movimento_w		:= vl_movimento_sem_abs_w - vl_acum_dest_w;
			else
				vl_acum_dest_w		:= vl_acum_dest_w + vl_movimento_w;
			end if;
			
			if (vl_movimento_w <> 0) then
			
				if (cd_conta_contabil_dest_w <> cd_conta_contabil_ww) then
					
					select	coalesce(max(nr_sequencia),0) + 1
					into STRICT	nr_sequencia_w
					from	w_ctb_distr_conta;
				
					insert into w_ctb_distr_conta(
						nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						nr_lote_contabil,
						vl_movimento,
						cd_historico,
						cd_conta_contabil,
						nr_seq_agrupamento,
						cd_centro_custo)
					values (	nr_sequencia_w,
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nr_lote_contabil_w,
						vl_movimento_w,
						cd_historico_w,
						cd_conta_contabil_dest_w,
						nr_seq_regra_rateio_w,
						cd_centro_custo_dest_w);
				
				end if;
			end if;
			
			cd_conta_contabil_ww	:= cd_conta_contabil_dest_w;
			
			end;
		end loop;
		close C03;

		cd_conta_contabil_w	:= vet02.cd_conta_contabil;
		
		end;
	end loop;
	close C02;
	
	end;
end loop;
close C01;

open c_movto_origem;
loop
fetch c_movto_origem into
	vet_movto_origem;
EXIT WHEN NOT FOUND; /* apply on c_movto_origem */
	begin
	
	cd_conta_debito_w	:= '';
	cd_conta_credito_w	:= '';
	cd_classif_debito_w	:= '';
	cd_classif_credito_w	:= '';
	
	select	coalesce(max(ie_debito_credito),'D')
	into STRICT	ie_debito_credito_w
	from	ctb_grupo_conta b,
		conta_contabil a
	where	a.cd_grupo		= b.cd_grupo
	and	a.cd_conta_contabil	= vet_movto_origem.cd_conta_contabil;
	
	open c_movto_cc_origem;
	loop
	fetch c_movto_cc_origem into
		vet_movto_cc_origem;
	EXIT WHEN NOT FOUND; /* apply on c_movto_cc_origem */
		begin

		vl_movimento_sem_abs_w		:= vet_movto_cc_origem.vl_movimento;
	
		if (ie_debito_credito_w = 'D') then
			cd_conta_credito_w	:= vet_movto_origem.cd_conta_contabil;
			cd_classif_credito_w	:= substr(ctb_obter_classif_conta(cd_conta_credito_w,null,dt_movimento_w),1,40);
		else
			cd_conta_debito_w	:= vet_movto_origem.cd_conta_contabil;
			cd_classif_debito_w	:= substr(ctb_obter_classif_conta(cd_conta_debito_w,null,dt_movimento_w),1,40);
		end if;

		if (vl_movimento_sem_abs_w <> 0) then
			
			select	nextval('ctb_movimento_seq')
			into STRICT	nr_seq_contrapartida_w
			;
		
			insert into ctb_movimento(
				nr_sequencia,
				nr_lote_contabil,
				nr_seq_mes_ref,
				dt_movimento,
				vl_movimento,
				dt_atualizacao,
				nm_usuario,
				cd_historico,
				cd_conta_debito,
				cd_conta_credito,
				ds_compl_historico,
				nr_seq_agrupamento,
				ie_revisado,
				cd_estabelecimento,
				cd_classif_debito,
				cd_classif_credito)
			values (	nr_seq_contrapartida_w,
				nr_lote_contabil_w,
				nr_seq_mes_ref_p,
				dt_movimento_w,
				vl_movimento_sem_abs_w,
				clock_timestamp(),
				nm_usuario_p,
				vet_movto_origem.cd_historico, 
				cd_conta_debito_w,
				cd_conta_credito_w, 
				null, 
				vet_movto_origem.nr_seq_agrupamento,
				'N',
				cd_estabelecimento_p,
				cd_classif_debito_w,
				cd_classif_credito_w);		
		
			insert into ctb_movto_centro_custo(
				nr_sequencia,
				nr_seq_movimento,
				cd_centro_custo,
				dt_atualizacao,
				nm_usuario,
				vl_movimento,
				pr_rateio)
			values (	nextval('ctb_movto_centro_custo_seq'),
				nr_seq_contrapartida_w,
				vet_movto_cc_origem.cd_centro_distr,
				clock_timestamp(),
				nm_usuario_p,
				abs(vet_movto_cc_origem.vl_movimento),
				100);
		end if;
		end;
	end loop;
	close c_movto_cc_origem;
	
	open c_movto_dest;
	loop
	fetch c_movto_dest into
		vet_movto_dest;
	EXIT WHEN NOT FOUND; /* apply on c_movto_dest */
		begin
		nr_contador_conta_w := nr_contador_conta_w + 1;
		
		cd_conta_debito_w		:= '';
		cd_conta_credito_w		:= '';
		cd_classif_credito_w		:= '';
		cd_classif_debito_w		:= '';
		ie_debito_credito_w		:= '';
		
		select	coalesce(max(ie_debito_credito),'D')
		into STRICT	ie_debito_credito_w
		from	ctb_grupo_conta b,
			conta_contabil a
		where	a.cd_grupo		= b.cd_grupo
		and	a.cd_conta_contabil	= vet_movto_dest.cd_conta_contabil;
		
		vl_movimento_sem_abs_w		:= vet_movto_dest.vl_movimento;
		
		if (ie_debito_credito_w = 'D') then
			cd_conta_debito_w	:= vet_movto_dest.cd_conta_contabil;
			cd_classif_debito_w	:= substr(ctb_obter_classif_conta(cd_conta_debito_w,null,dt_movimento_w),1,40);
		else
			cd_conta_credito_w	:= vet_movto_dest.cd_conta_contabil;
			cd_classif_credito_w	:= substr(ctb_obter_classif_conta(cd_conta_credito_w,null,dt_movimento_w),1,40);
		end if;

		select	count(*)
		into STRICT	qt_registros_cc_w
		from	w_ctb_distr_centro b
		where	b.nr_seq_movimento = vet_movto_origem.nr_sequencia;
		
		nr_contador_cc_w 	:= 0;
		vl_acum_cc_w		:= 0;
		
		open c_movto_cc_origem;
		loop
		fetch c_movto_cc_origem into
			vet_movto_cc_origem;
		EXIT WHEN NOT FOUND; /* apply on c_movto_cc_origem */
			begin
		
			nr_contador_cc_w := nr_contador_cc_w + 1;
			
			vl_movto_dest_cc_w := dividir(vl_movimento_sem_abs_w * vet_movto_cc_origem.pr_rateio,qt_fator_rateio_w);
			
			vl_acum_cc_w := vl_acum_cc_w + vl_movto_dest_cc_w;
			
			if (nr_contador_conta_w = qt_registros_conta_w) then
				vl_movto_dest_cc_w := vet_movto_cc_origem.vl_movimento;	
			elsif (nr_contador_cc_w = qt_registros_cc_w) then
				if (vl_acum_cc_w != abs(vl_movimento_sem_abs_w)) then
					vl_movto_dest_cc_w := vl_movto_dest_cc_w + (vl_movimento_sem_abs_w - vl_acum_cc_w);
				end if;
				
			end if;
			
			update 	w_ctb_distr_centro
			set	vl_movimento	= vl_movimento - vl_movto_dest_cc_w
			where	nr_sequencia	= vet_movto_cc_origem.nr_sequencia;
		
			if (vl_movto_dest_cc_w <> 0) then

				select	nextval('ctb_movimento_seq')
				into STRICT	nr_sequencia_w
				;
			
				insert into ctb_movimento(
					nr_sequencia,
					nr_lote_contabil,
					nr_seq_mes_ref,
					dt_movimento,
					vl_movimento,
					dt_atualizacao,
					nm_usuario,
					cd_historico,
					cd_conta_debito,
					cd_conta_credito,
					ds_compl_historico,
					nr_seq_agrupamento,
					ie_revisado,
					cd_estabelecimento,
					cd_classif_debito,
					cd_classif_credito)
				values (	nr_sequencia_w,
					nr_lote_contabil_w,
					nr_seq_mes_ref_p,
					dt_movimento_w,
					vl_movto_dest_cc_w,
					clock_timestamp(),
					nm_usuario_p,
					vet_movto_dest.cd_historico, 
					cd_conta_debito_w,
					cd_conta_credito_w, 
					null, 
					vet_movto_dest.nr_seq_agrupamento,
					'N',
					cd_estabelecimento_p,
					cd_classif_debito_w,
					cd_classif_credito_w);
			
				insert into ctb_movto_centro_custo(
					nr_sequencia,
					nr_seq_movimento,
					cd_centro_custo,
					dt_atualizacao,
					nm_usuario,
					vl_movimento,
					pr_rateio)
				values (	nextval('ctb_movto_centro_custo_seq'),
					nr_sequencia_w,
					coalesce(vet_movto_dest.cd_centro_custo,vet_movto_cc_origem.cd_centro_distr),
					clock_timestamp(),
					nm_usuario_p,
					abs(vl_movto_dest_cc_w),
					100);
			end if;
			
			vl_saldo_acum_ant_w := 0;
			
			if (pkg_date_utils.start_of(dt_referencia_p,'MONTH',0) <> pkg_date_utils.start_of(dt_referencia_p,'YEAR',0)) then
				select	coalesce(sum(vl_saldo_distr_acum),0) vl_saldo_distr_acum
				into STRICT	vl_saldo_acum_ant_w
				from	ctb_balancete_distr a,
					ctb_regra_rat_contabil r
				where	a.nr_seq_regra_rat = r.nr_sequencia
				and	r.cd_estabelecimento = cd_estabelecimento_p
				and	a.cd_conta_contabil	= vet_movto_dest.cd_conta_contabil
				and	a.cd_centro_custo	= vet_movto_cc_origem.cd_centro_custo
				and	a.nr_seq_mes_ref	= nr_seq_mes_ref_ant_w;
			end if;
			
			vl_saldo_distr_acum_w :=   vl_movto_dest_cc_w + vl_saldo_acum_ant_w;
			
			insert into ctb_balancete_distr(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_conta_contabil,
				cd_centro_custo,
				nr_seq_mes_ref,
				vl_saldo_origem,
				vl_saldo_distr_acum,
				nr_lote_contabil,
				nr_seq_regra_rat)
			values (	nextval('ctb_balancete_distr_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				vet_movto_dest.cd_conta_contabil,
				vet_movto_cc_origem.cd_centro_custo,
				nr_seq_mes_ref_p,
				0,
				vl_saldo_distr_acum_w,
				nr_lote_contabil_w,
				vet_movto_origem.nr_seq_agrupamento);	
			
			commit;
			end;
		end loop;
		close c_movto_cc_origem;		
		
		end;
	end loop;
	close c_movto_dest;
	
	end;
end loop;
close c_movto_origem;

update	ctb_movimento
set	vl_movimento = abs(vl_movimento),
	cd_conta_credito = cd_conta_debito,
        cd_conta_debito	= cd_conta_credito,
	cd_classif_credito = cd_classif_debito,
	cd_classif_debito = cd_classif_credito
where	nr_lote_contabil = nr_lote_contabil_w
and	vl_movimento 	< 0;

commit;

open c_movto_lote;
loop
fetch c_movto_lote into	
	vet_movto_lote;
EXIT WHEN NOT FOUND; /* apply on c_movto_lote */
	begin
	select  abs(sum(c.vl_movimento))
	into STRICT	vl_movto_cc_w
	from  	ctb_movto_centro_custo c
	where 	c.nr_seq_movimento 	= vet_movto_lote.nr_sequencia;
	
	update	ctb_movimento
	set	vl_movimento 		= vl_movto_cc_w
	where	nr_lote_contabil 	= nr_lote_contabil_w
	and	nr_sequencia 		= vet_movto_lote.nr_sequencia;
		
	end;
end loop;
close c_movto_lote;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_gerar_lote_rateio_distr ( nr_seq_mes_ref_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, dt_referencia_p timestamp) FROM PUBLIC;

