-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE lic_iniciar_nova_rodada_lance ( nr_seq_licitacao_p bigint, nr_seq_lic_item_p bigint, nm_usuario_p text, ie_adic_empresas_p text, qt_empresas_p INOUT bigint) AS $body$
DECLARE



nr_seq_fornec_w				bigint;
nr_seq_lance_w				bigint;
nr_seq_lic_item_fornec_w			bigint;
vl_original_w				double precision;
vl_original_ww				double precision 	:= 0;
qt_contador_w				bigint	:= 0;
vl_inicial_w				double precision;
vl_melhor_inicial_w				double precision;
qt_existe_w				bigint;
ie_qualificado_w				varchar(1);
ie_qualif_lance_fornec_w			varchar(1);
ie_tipo_w					bigint;
nr_seq_lance_anterior_w			bigint;
dt_fechamento_rodada_w			timestamp;
qt_empresas_w				bigint := 0;



c01 CURSOR FOR
SELECT	distinct
	0 ie_tipo,		/*Traz somente os fornec que estão dentro da margem % conforme parametro [2] da licitação, por exemplo, estão dentro dos 10%*/
	a.nr_sequencia,
	b.vl_original
from	reg_lic_fornec a,
	reg_lic_item_fornec b
where	a.nr_sequencia 		= b.nr_seq_fornec
and	a.nr_seq_licitacao		= nr_seq_licitacao_p
and	b.nr_seq_lic_item		= nr_seq_lic_item_p
and	coalesce(a.ie_situacao, 'A')	<> 'I'
and	coalesce(b.ie_qualificado, 'S')	= 'S'
and	coalesce(b.ie_qualif_lance_fornec,'S')	= 'S'
and	obter_se_aceita_fornec_lances(a.nr_sequencia,b.nr_seq_lic_item,nm_usuario_p) = 'S'
and not exists (
	SELECT	1
	from	reg_lic_fornec_lance x
	where	x.nr_seq_fornec	= a.nr_sequencia
	and	x.nr_seq_licitacao	= a.nr_seq_licitacao
	and	x.nr_seq_lic_item	= b.nr_seq_lic_item
	and	x.nr_seq_lance	= nr_seq_lance_w)

union all

select	distinct
	1 ie_tipo,		/*Caso não tenha completado 3 fornecedor com preço diferente no select acima, busca os próximos fornecedores com menor preço até completar 3 fornecedores*/
	a.nr_sequencia,
	b.vl_original
from	reg_lic_fornec a,
	reg_lic_item_fornec b
where	a.nr_sequencia		= b.nr_seq_fornec
and	a.nr_seq_licitacao		= nr_seq_licitacao_p
and	b.nr_seq_lic_item		= nr_seq_lic_item_p
and	coalesce(a.ie_situacao, 'A')	<> 'I'
and	coalesce(b.ie_qualificado, 'S')	= 'S'
and	coalesce(b.ie_qualif_lance_fornec,'S')	= 'S'
and	obter_se_aceita_fornec_lances(a.nr_sequencia,b.nr_seq_lic_item,nm_usuario_p) = 'N'
and not exists (
	select	1
	from	reg_lic_fornec_lance x
	where	x.nr_seq_fornec	= a.nr_sequencia
	and	x.nr_seq_licitacao	= a.nr_seq_licitacao
	and	x.nr_seq_lic_item	= b.nr_seq_lic_item
	and	x.nr_seq_lance	= nr_seq_lance_w)
order by	ie_tipo,vl_original;

c02 CURSOR FOR
SELECT	a.nr_sequencia,
	b.vl_item
from	reg_lic_fornec a,
	reg_lic_fornec_lance b
where	a.nr_sequencia		= b.nr_seq_fornec
and	a.nr_seq_licitacao		= nr_seq_licitacao_p
and	b.nr_seq_lic_item		= nr_seq_lic_item_p
and	coalesce(a.ie_situacao, 'A')	<> 'I'
and	coalesce(b.vl_item,0)		> 0
and	coalesce(b.ie_qualificado,'S')	= 'S'
and	nr_seq_lance		= nr_seq_lance_anterior_w
order by	vl_item;


BEGIN

select	count(*)
into STRICT	qt_existe_w
from	reg_lic_item_fornec
where	nr_seq_licitacao		= nr_seq_licitacao_p
and	nr_seq_lic_item		= nr_seq_lic_item_p
and	coalesce(ie_qualificado,'S')	= 'N';

if (qt_existe_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(266230);
	--'Este item está desqualificado.');
end if;

select	coalesce(max(nr_seq_lance), 0) +1
into STRICT	nr_seq_lance_w
from	reg_lic_fornec_lance
where	nr_seq_licitacao	= nr_seq_licitacao_p
and	nr_seq_lic_item	= nr_seq_lic_item_p;

select	lic_obter_valor_vencedor_item(nr_seq_licitacao_p,nr_seq_lic_item_p)
into STRICT	vl_melhor_inicial_w
;

/*Quando é o primeiro lance, tem que gerar os fornecedor que estão a margem de preço aceitável  de acordo com o parâmetro [2] da licitação*/

if (nr_seq_lance_w = 1) or (ie_adic_empresas_p = 'S') then
	begin

	insert into reg_lic_historico(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		ie_tipo_historico,
		ds_observacao,
		nr_seq_licitacao)
	values(	nextval('reg_lic_historico_seq'),
		clock_timestamp(),
		nm_usuario_p,
		'GL',
		WHEB_MENSAGEM_PCK.get_texto(310772, 'NR_SEQ_LIC_ITEM_P=' || nr_seq_lic_item_p), --'Gerado os fornecedores da 1ª rodada para o item ' || nr_seq_lic_item_p || ' (através da opção Iniciar nova rodada para este item).',
		nr_seq_licitacao_p);

	open C01;
	loop
	fetch C01 into
		ie_tipo_w,
		nr_seq_fornec_w,
		vl_original_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		select	nr_sequencia,
			coalesce(ie_qualificado,'S'),
			coalesce(ie_qualif_lance_fornec,'S')
		into STRICT	nr_seq_lic_item_fornec_w,
			ie_qualificado_w,
			ie_qualif_lance_fornec_w
		from	reg_lic_item_fornec
		where	nr_seq_fornec	= nr_seq_fornec_w
		and	nr_seq_lic_item	= nr_seq_lic_item_p;

		if (ie_qualificado_w = 'S') and (ie_qualif_lance_fornec_w = 'S') then

			if (vl_original_w <> vl_original_ww) then
				qt_contador_w	:= qt_contador_w + 1;
				vl_original_ww	:= vl_original_w;
			end if;

			if (ie_tipo_w = 1) and (qt_contador_w > 3) then
				exit;
			end if;

			insert into reg_lic_fornec_lance(
				nr_sequencia,				dt_atualizacao,			nm_usuario,
				dt_atualizacao_nrec,			nm_usuario_nrec,			nr_seq_licitacao,
				nr_seq_fornec,				nr_seq_lance,			nr_seq_lic_item,
				nr_seq_lic_item_fornec,			vl_item,				vl_inicial,
				ie_qualificado,				vl_melhor_inicial)
			values (	nextval('reg_lic_fornec_lance_seq'),		clock_timestamp(),				nm_usuario_p,
				clock_timestamp(),					nm_usuario_p,			nr_seq_licitacao_p,
				nr_seq_fornec_w,				nr_seq_lance_w,			nr_seq_lic_item_p,
				nr_seq_lic_item_fornec_w,			null,				vl_original_w,
				'S',					vl_melhor_inicial_w);

			qt_empresas_w	:= qt_empresas_w + 1;

		end if;
	end;
	end loop;
	close C01;
	end;

/*Quando não é mais o primeiro lance*/

elsif (nr_seq_lance_w > 1) then
	begin

	nr_seq_lance_anterior_w := nr_seq_lance_w - 1;

	select	max(dt_fechamento_rodada)
	into STRICT	dt_fechamento_rodada_w
	from	reg_lic_fornec_lance
	where	nr_seq_licitacao	= nr_seq_licitacao_p
	and	nr_seq_lic_item	= nr_seq_lic_item_p
	and	nr_seq_lance	= nr_seq_lance_anterior_w;

	insert into reg_lic_historico(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		ie_tipo_historico,
		ds_observacao,
		nr_seq_licitacao)
	values(	nextval('reg_lic_historico_seq'),
		clock_timestamp(),
		nm_usuario_p,
		'GL',
		WHEB_MENSAGEM_PCK.get_texto(310777, 'NR_SEQ_LANCE_W=' || nr_seq_lance_w || ';NR_SEQ_LIC_ITEM_P=' || nr_seq_lic_item_p), --Gerado os fornecedores da ' || nr_seq_lance_w || 'ª rodada para o item ' || nr_seq_lic_item_p || ' (através da opção Iniciar nova rodada)
		nr_seq_licitacao_p);

	open C02;
	loop
	fetch C02 into
		nr_seq_fornec_w,
		vl_inicial_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		select	nr_sequencia
		into STRICT	nr_seq_lic_item_fornec_w
		from	reg_lic_item_fornec
		where	nr_seq_fornec	= nr_seq_fornec_w
		and	nr_seq_lic_item	= nr_seq_lic_item_p;

		insert into reg_lic_fornec_lance(
			nr_sequencia,				dt_atualizacao,			nm_usuario,
			dt_atualizacao_nrec,			nm_usuario_nrec,			nr_seq_licitacao,
			nr_seq_fornec,				nr_seq_lance,			nr_seq_lic_item,
			nr_seq_lic_item_fornec,			vl_item,				vl_inicial,
			ie_qualificado,				vl_melhor_inicial)
		values (	nextval('reg_lic_fornec_lance_seq'),		clock_timestamp(),				nm_usuario_p,
			clock_timestamp(),					nm_usuario_p,			nr_seq_licitacao_p,
			nr_seq_fornec_w,				nr_seq_lance_w,			nr_seq_lic_item_p,
			nr_seq_lic_item_fornec_w,			null,				vl_inicial_w,
			'S',					vl_melhor_inicial_w);

		qt_empresas_w	:= qt_empresas_w + 1;

		end;
	end loop;
	close C02;
	end;
end if;

commit;

qt_empresas_p := qt_empresas_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE lic_iniciar_nova_rodada_lance ( nr_seq_licitacao_p bigint, nr_seq_lic_item_p bigint, nm_usuario_p text, ie_adic_empresas_p text, qt_empresas_p INOUT bigint) FROM PUBLIC;

