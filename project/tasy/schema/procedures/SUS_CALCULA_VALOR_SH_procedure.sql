-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_calcula_valor_sh ( nr_interno_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_sequencia_w		bigint;
nr_interno_conta_w	bigint;
cd_item_w		bigint;
ie_origem_proced_w	bigint;
vl_preco_w		double precision;
vl_receita_w		double precision;
qt_item_w		double precision;
nr_seq_propaci_w	bigint;
nr_seq_matpaci_w	bigint;

cd_estabelecimento_w	smallint;
cd_setor_atendimento_w	integer;
cd_setor_atend_ant_w	integer;
cd_item_ant_w		bigint;
dt_item_w		timestamp;

vl_fixo_w		double precision;
cd_convenio_w		integer;
cd_categoria_w		integer;
ie_custo_medio_mat_w	varchar(15) := 'N';
nr_seq_proc_interno_w	w_conta_sus_sh.nr_seq_proc_interno%type;
vl_proc_interno_w	double precision := 0;
vl_proc_interno_ww	double precision := 0;
cd_proc_princ_w		procedimento.cd_procedimento%type;
nr_atendimento_w	atendimento_paciente.nr_atendimento%type;
nr_seq_interno_w	sus_laudo_paciente.nr_seq_interno%type;
qt_proc_int_w		bigint := 0;

c01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_item,
		a.qt_item,
		a.nr_seq_matpaci,
		a.dt_item,
		a.cd_setor_atendimento
	from	w_conta_sus_sh a
	where	a.nr_interno_conta	= nr_interno_conta_p
	and	(a.nr_seq_matpaci IS NOT NULL AND a.nr_seq_matpaci::text <> '')
	order by
		a.cd_item,
		a.cd_setor_atendimento;

c02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_item,
		a.qt_item,
		a.nr_seq_propaci,
		a.dt_item,
		a.cd_setor_atendimento,
		a.ie_origem_proced,
		a.nr_seq_proc_interno
	from	w_conta_sus_sh a
	where	a.nr_interno_conta	= nr_interno_conta_p
	and	(a.nr_seq_propaci IS NOT NULL AND a.nr_seq_propaci::text <> '')
	and	coalesce(a.cd_registro,0)	<> 3
	order by
		a.cd_item,
		a.cd_setor_atendimento;

C03 CURSOR FOR
	SELECT	b.cd_procedimento,
		b.ie_origem_proced
	from	proc_interno a,
		proc_interno_conv b
	where	a.nr_sequencia = b.nr_seq_proc_interno
	and	a.nr_sequencia = nr_seq_proc_interno_w;
	
type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w			vetor;

type 		fetch_array02 is table of c02%rowtype;
w_array 	fetch_array02;
n		integer := 1;
type vetor02 is table of fetch_array02 index by integer;
vetor_c02_w			vetor02;
		
BEGIN

/* obter estabelecimento da conta paciente */

begin
select	cd_estabelecimento,
	nr_atendimento
into STRICT	cd_estabelecimento_w,
	nr_atendimento_w
from	conta_paciente
where	nr_interno_conta	= nr_interno_conta_p;
exception
	when others then
	--R.aise_application_error(-20011,'Problama ao obter o estabelecimento da conta: '||nr_interno_conta_p||' #@#@');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(263437,'nr_interno_conta_p='||nr_interno_conta_p);
	end;

ie_custo_medio_mat_w	:= coalesce(obter_valor_param_usuario(1123,165,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');	
	
/* Atualizar dados matmed */

cd_setor_atend_ant_w	:= 0;
cd_item_ant_w		:= 0;

open c01;
loop
fetch c01 bulk collect into s_array limit 100000;
	vetor_c01_w(i) := s_array;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

for i in 1..vetor_c01_w.count loop
	begin
	s_array := vetor_c01_w(i);
	for z in 1..s_array.count loop
		begin
		
		nr_sequencia_w			:= s_array[z].nr_sequencia;
		cd_item_w			:= s_array[z].cd_item;
		qt_item_w			:= s_array[z].qt_item;
		nr_seq_matpaci_w		:= s_array[z].nr_seq_matpaci;
		dt_item_w			:= s_array[z].dt_item;
		cd_setor_atendimento_w		:= s_array[z].cd_setor_atendimento;
		
		if (cd_setor_atendimento_w <> cd_setor_atend_ant_w) or (cd_item_w		<> cd_item_ant_w)	then
			begin
			
			cd_setor_atend_ant_w	:= cd_setor_atendimento_w;
			cd_item_ant_w		:= cd_item_w;
			
			SELECT * FROM sus_obter_rateio_sh(cd_estabelecimento_w, cd_item_w, null, null, cd_setor_atendimento_w, cd_convenio_w, cd_categoria_w, vl_fixo_w, null) INTO STRICT cd_convenio_w, cd_categoria_w, vl_fixo_w;
			
			if (coalesce(vl_fixo_w::text, '') = '') or (vl_fixo_w	= '') then
				begin			
				if (coalesce(ie_custo_medio_mat_w,'N') = 'S') then					
					vl_fixo_w	:= coalesce(Obter_custo_medio_material(cd_estabelecimento_w, ESTABLISHMENT_TIMEZONE_UTILS.startOfmonth(dt_item_w), cd_item_w),0);					
				else
					vl_fixo_w	:= Obter_Preco_Material(cd_estabelecimento_w,cd_convenio_w,cd_categoria_w,dt_item_w,cd_item_w,0,0,cd_setor_atendimento_w,null,0,0);
				end if;
				end;
			end if;
			end;
		end if;
	
		if (vl_fixo_w	> 0) then
			begin
			update 	w_conta_sus_sh
			set	vl_preco = (vl_fixo_w * qt_item_w)
			where	nr_sequencia	= nr_sequencia_w;
			end;
		end if;
	
		end;
	end loop;
	end;
end loop;

/* atualizar dados propaci */

cd_setor_atend_ant_w	:= 0;
cd_item_ant_w		:= 0;

open c02;
loop
fetch c02 bulk collect into w_array limit 100000;
	vetor_c02_w(n) := w_array;
	n := n + 1;
EXIT WHEN NOT FOUND; /* apply on c02 */
end loop;
close c02;

vl_fixo_w := 0;

for j in 1..vetor_c02_w.count loop
	begin
	w_array := vetor_c02_w(j);
	for w in 1..w_array.count loop
		begin
		
		nr_sequencia_w			:= w_array[w].nr_sequencia;
		cd_item_w			:= w_array[w].cd_item;
		qt_item_w			:= w_array[w].qt_item;
		nr_seq_propaci_w			:= w_array[w].nr_seq_propaci;
		dt_item_w			:= w_array[w].dt_item;
		cd_setor_atendimento_w		:= w_array[w].cd_setor_atendimento;
		ie_origem_proced_w		:= w_array[w].ie_origem_proced;
		nr_seq_proc_interno_w		:= w_array[w].nr_seq_proc_interno;
	
		if (cd_setor_atendimento_w <> cd_setor_atend_ant_w) or (cd_item_w		<> cd_item_ant_w)	then
			begin
			
			cd_setor_atend_ant_w	:= cd_setor_atendimento_w;
			cd_item_ant_w		:= cd_item_w;
			
			if (coalesce(nr_seq_proc_interno_w,0) <> 0) then
				begin

				select	count(1)
				into STRICT	qt_proc_int_w
				from	proc_interno a,
					proc_interno_conv b
				where	a.nr_sequencia = b.nr_seq_proc_interno
				and	a.nr_sequencia = nr_seq_proc_interno_w  LIMIT 1;
					
				if (qt_proc_int_w > 0) then
					begin
					vl_proc_interno_w:=0;
					open C03;
					loop
					fetch C03 into	
						cd_item_w,
						ie_origem_proced_w;
					EXIT WHEN NOT FOUND; /* apply on C03 */
						begin
						
						cd_convenio_w := null;
						cd_categoria_w := null;
						
						SELECT * FROM sus_obter_rateio_sh(cd_estabelecimento_w, null, cd_item_w, ie_origem_proced_w, cd_setor_atendimento_w, cd_convenio_w, cd_categoria_w, vl_fixo_w, null) INTO STRICT cd_convenio_w, cd_categoria_w, vl_fixo_w;
						
						if	((coalesce(vl_fixo_w::text, '') = '') or (vl_fixo_w	= '')) and (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then			
							vl_proc_interno_ww	:= obter_preco_procedimento(cd_estabelecimento_w,
													cd_convenio_w,
													cd_categoria_w,
													dt_item_w,
													cd_item_w,
													ie_origem_proced_w,
													0,0,0,0,0,
													null,null,null,null,'P');
								
							if (vl_proc_interno_ww > vl_proc_interno_w) then
								vl_proc_interno_w := vl_proc_interno_ww;
							end if;					
						end if;
						
						end;
					end loop;
					close C03;
				
					if (vl_proc_interno_w > 0) then
						vl_fixo_w := vl_proc_interno_w;
					end if;
				
					end;
				else
					SELECT * FROM sus_obter_rateio_sh(cd_estabelecimento_w, null, null, null, cd_setor_atendimento_w, cd_convenio_w, cd_categoria_w, vl_fixo_w, nr_seq_proc_interno_w) INTO STRICT cd_convenio_w, cd_categoria_w, vl_fixo_w;
					if (coalesce(vl_fixo_w::text, '') = '') or (vl_fixo_w = '') then
						begin
						vl_fixo_w := 0;
						end;
					end if;
					
				end if;	
				
				end;
			else
				begin
		
				SELECT * FROM sus_obter_rateio_sh(cd_estabelecimento_w, null, cd_item_w, ie_origem_proced_w, cd_setor_atendimento_w, cd_convenio_w, cd_categoria_w, vl_fixo_w, null) INTO STRICT cd_convenio_w, cd_categoria_w, vl_fixo_w;
			
				if (coalesce(vl_fixo_w::text, '') = '') or (vl_fixo_w	= '') then			
					vl_fixo_w	:= obter_preco_procedimento(cd_estabelecimento_w,
										cd_convenio_w,
										cd_categoria_w,
										dt_item_w,
										cd_item_w,
										ie_origem_proced_w,
										0,0,0,0,0,
										null,null,null,null,'P');
				end if;
				end;
			end if;
				
			end;
		end if;
		
		if (vl_fixo_w	> 0) then
			begin		
			update 	w_conta_sus_sh
			set	vl_preco = (vl_fixo_w * qt_item_w)
			where	nr_sequencia	= nr_sequencia_w;
			end;
		end if;
	
		end;
	end loop;
	end;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_calcula_valor_sh ( nr_interno_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

