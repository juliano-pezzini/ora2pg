-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_movto_banco_adiant ( nr_adiantamento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_conta_banco_w	bigint;
vl_saldo_w		double precision;
cd_estabelecimento_w	bigint;
nr_seq_movto_w		bigint;
nr_seq_trans_fin_w	bigint;
ie_movto_bco_adiant_w	varchar(1)	:= 'N';
dt_adiantamento_w	timestamp;
vl_adiant_banco_w	double precision;
nr_documento_w		varchar(22);
/* Projeto Multimoeda - Variáveis */

vl_saldo_estrang_w	double precision;
vl_complemento_w	double precision;
vl_cotacao_w		cotacao_moeda.vl_cotacao%type;
cd_moeda_w		integer;


BEGIN

if (nr_adiantamento_p IS NOT NULL AND nr_adiantamento_p::text <> '') then

	select	nr_seq_conta_banco,
		vl_saldo,
		cd_estabelecimento,
		nr_seq_trans_fin,
		dt_adiantamento,
		substr(nr_documento,1,22),
		vl_saldo_estrang,
		vl_cotacao,
		cd_moeda
	into STRICT	nr_seq_conta_banco_w,
		vl_saldo_w,
		cd_estabelecimento_w,
		nr_seq_trans_fin_w,
		dt_adiantamento_w,
		nr_documento_w,
		vl_saldo_estrang_w,
		vl_cotacao_w,
		cd_moeda_w
	from	adiantamento
	where	nr_adiantamento	= nr_adiantamento_p;

	select	coalesce(ie_movto_bco_adiant,'N')
	into STRICT	ie_movto_bco_adiant_w
	from	parametro_contas_receber
	where	cd_estabelecimento	= cd_estabelecimento_w;

	if (coalesce(nr_seq_conta_banco_w, 0) <> 0) and (nr_seq_trans_fin_w IS NOT NULL AND nr_seq_trans_fin_w::text <> '') and (ie_movto_bco_adiant_w = 'S') then

		select	coalesce(sum(vl_transacao),0)
		into STRICT	vl_adiant_banco_w
		from	movto_trans_financ
		where	(nr_seq_saldo_banco IS NOT NULL AND nr_seq_saldo_banco::text <> '')
		and	nr_adiantamento	= nr_adiantamento_p;

		if (vl_adiant_banco_w = 0) then

			select	nextval('movto_trans_financ_seq')
			into STRICT	nr_seq_movto_w
			;

			/* Projeto Multimoeda - Verifica se o adiantamento é moeda estrangeira, caso positivo calcula o complemento antes de gravar o movimento */

			if (coalesce(vl_saldo_estrang_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
				vl_complemento_w := vl_saldo_w - vl_saldo_estrang_w;
			else
				vl_saldo_estrang_w := null;
				vl_complemento_w := null;
				vl_cotacao_w := null;
				cd_moeda_w := null;
			end if;

			insert into movto_trans_financ(nr_sequencia,
				dt_transacao,
				nr_seq_trans_financ,
				vl_transacao,
				dt_atualizacao,
				nm_usuario,
				nr_adiantamento,
				nr_seq_banco,
				nr_lote_contabil,
				ie_conciliacao,
				nr_documento,
				vl_transacao_estrang,
				vl_complemento,
				vl_cotacao,
				cd_moeda)
			values (nr_seq_movto_w,
				dt_adiantamento_w,
				nr_seq_trans_fin_w,
				vl_saldo_w,
				clock_timestamp(),
				nm_usuario_p,
				nr_adiantamento_p,
				nr_seq_conta_banco_w,
				0,
				'N',
				nr_documento_w,
				vl_saldo_estrang_w,
				vl_complemento_w,
				vl_cotacao_w,
				cd_moeda_w);

			CALL gerar_adiantamento_hist(nr_adiantamento_p,
						'S',
						clock_timestamp(),
						substr(wheb_mensagem_pck.get_texto(303738,	'NR_SEQ_MOVTO=' || nr_seq_movto_w),1,4000),
						nm_usuario_p,
						'N');

			CALL atualizar_transacao_financeira(cd_estabelecimento_w, nr_seq_movto_w, nm_usuario_p, 'I');

		end if;

	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_movto_banco_adiant ( nr_adiantamento_p bigint, nm_usuario_p text) FROM PUBLIC;

