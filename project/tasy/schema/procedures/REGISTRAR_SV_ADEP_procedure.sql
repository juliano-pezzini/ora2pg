-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE registrar_sv_adep ( nr_atendimento_p bigint, dt_sinal_vital_p timestamp, nr_seq_sinal_vital_p bigint, nr_seq_monit_resp_p bigint, nr_seq_monit_hemod_p bigint, nr_seq_analisador_p bigint, nr_seq_uronalise_p bigint, nr_seq_urocolor_p bigint, nr_seq_item_p bigint, ds_valor_item_p text, nr_seq_horario_p bigint, nm_usuario_p text, nr_seq_perda_ganho_p bigint, ds_retorno_p INOUT text, nr_seq_tipo_p bigint default 0, nr_seq_aval_analgesia_p bigint default 0, ie_conduta_escala_p text default 'N', ie_executa_mentor_p text default 'N', ie_ganhos_perdas_p text default 'N', nr_seq_dispositivo_pac_p bigint default 0) AS $body$
DECLARE


nm_tabela_w			  varchar(50);
nm_atributo_w		  varchar(50);
ie_tipo_atributo_w	  varchar(10);
qt_registro_w		  bigint;
dt_registro_w		  timestamp;
ie_novo_w			  varchar(1) := 'S';
ds_comando_w		  varchar(2000);
ds_atrib_insert_w	  varchar(2000);
nr_atrib_insert_w	  bigint;
nr_seq_sinal_vital_w  bigint;
nr_seq_registro_w	  bigint;
cd_pessoa_fisica_w	  varchar(10);
cd_setor_atend_w	  integer;
cd_perfil_w			  integer;
cd_estabelecimento_w  smallint;
nr_seq_intervencao_w  bigint;
ie_liberar_sv_w		  varchar(1);
dt_monitorizacao_w	  timestamp;
ie_atualizou_peso_w	  boolean := false;
ds_errow_w			  varchar(2000);
ie_campo_inf_adic_w	  varchar(1);
nr_regras_atendidas_w varchar(2000);
ds_erro_w			  varchar(2000);
nr_seq_conduta_w      bigint;
ds_respostas_w        varchar(500);
ds_perda_ganho_w	  varchar(1000) := null;
ds_perda_ganho_disp_w varchar(1000) := null;
invalid_perda_ganho_w exception;
invalid_perda_ganho_disp_w exception;
dt_medida_w			  timestamp;
nr_seq_dispositivo_pac_w bigint := null;
qt_peso_w			atendimento_sinal_vital.qt_peso%type;
qt_peso_atual_w			atendimento_sinal_vital.qt_peso_atual%type;
qt_altura_cm_w			atendimento_sinal_vital.qt_altura_cm%type;
qt_altura_m_w			atendimento_sinal_vital.qt_altura_m%type;
nr_seq_agenda_w			atendimento_sinal_vital.nr_seq_agendamento%type;
nr_tipo_agenda_w		atendimento_sinal_vital.nr_tipo_agenda%type;
nr_seq_aval_analgesia_w atend_aval_analgesia.nr_sequencia%type;



BEGIN


nr_seq_sinal_vital_w := nr_seq_sinal_vital_p;
		
select	max(dt_sinal_vital),
		max(nr_sequencia)
into STRICT	dt_registro_w,
		nr_seq_registro_w
from	atendimento_sinal_vital
where	nr_atendimento = nr_atendimento_p
and		nm_usuario = nm_usuario_p
and     trunc(dt_sinal_vital,'mi') = trunc(dt_sinal_vital_p,'mi')
and		coalesce(ie_situacao, 'A') = 'A';

if (trunc(dt_registro_w,'mi') = trunc(dt_sinal_vital_p,'mi')) then
	ie_novo_w := 'N';
	nr_seq_sinal_vital_w := nr_seq_registro_w;		
end if;	

ie_liberar_sv_w := obter_param_usuario(1113, 266, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_liberar_sv_w);

--Executa mentor para verificar se o sinal vital ira dispara alguma regra de suporte a decisao clinica
if (coalesce(ie_executa_mentor_p,'N') = 'S') and (coalesce(nr_seq_sinal_vital_w, 0) > 0) and (coalesce(nr_atendimento_p, 0) > 0) and (coalesce(ie_liberar_sv_w, 'N') = 'S') then
	begin
			nr_regras_atendidas_w := GQA_Liberacao_Sinal_Vital(nr_seq_sinal_vital_w, nm_usuario_p);
			CALL gera_protocolo_assistencial(nr_atendimento_p, nm_usuario_p);
		
		exception
		when others then
			null;
	end;

else
	begin
	if (ie_conduta_escala_p = 'S') then

		if (length(ds_valor_item_p) > 0) then

			nr_seq_conduta_w := (substr(ds_valor_item_p, 0, position('=' in ds_valor_item_p) - 1))::numeric;
			ds_respostas_w   := substr(ds_valor_item_p, position('=' in ds_valor_item_p) + 1, length(ds_valor_item_p));
			
			CALL gerar_evolucao_conduta_escala(nr_seq_conduta_w,ds_respostas_w,nr_atendimento_p,nm_usuario_p);
			
		end if;

	else

		select	obter_perfil_ativo
		into STRICT	cd_perfil_w
		;

		select	obter_setor_usuario(nm_usuario_p)
		into STRICT	cd_setor_atend_w
		;

		select	max(cd_estabelecimento)
		into STRICT	cd_estabelecimento_w
		from 	atendimento_paciente
		where	nr_atendimento	=	nr_atendimento_p;

		ie_liberar_sv_w := obter_param_usuario(1113, 266, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_liberar_sv_w);

		--Verifica se existe campos "adicionais"  vinculados ao tipo de perda/ganho
		select	coalesce(max('S'), 'N')
		into STRICT	ie_campo_inf_adic_w
		from	perda_ganho_inf_adic_tipo
		where	nr_seq_tipo = nr_seq_tipo_p
		and		nr_seq_inf_adic = nr_seq_item_p;

		if (ie_campo_inf_adic_w = 'N') then

			select	max(nm_tabela),
					max(nm_atributo),
					max(nr_seq_intervencao)
			into STRICT	nm_tabela_w,
					nm_atributo_w,
					nr_seq_intervencao_w
			from	adep_sv
			where	nr_sequencia	=	nr_seq_item_p;

			select	max(ie_tipo_atributo)
			into STRICT	ie_tipo_atributo_w
			from	tabela_atributo
			where	nm_tabela	=	nm_tabela_w
			and		nm_atributo	=	nm_atributo_w;
			
		else
				
			nm_tabela_w			:= 'ATENDIMENTO_PERDA_GANHO';
			nm_atributo_w		:= '';
			ds_atrib_insert_w	:= '';
		end if;

		cd_pessoa_fisica_w	:=	Obter_Dados_Usuario_Opcao(nm_usuario_p,'C');

		if (nm_tabela_w = 'ATENDIMENTO_SINAL_VITAL') and (ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') then	

			if (ie_novo_w = 'S') then
				insert into atendimento_sinal_vital(
					nr_sequencia,
					nr_atendimento,
					dt_sinal_vital,
					dt_atualizacao,
					nm_usuario,
					ie_pressao,
					cd_pessoa_fisica,
					dt_liberacao,
					ie_situacao,
					nr_seq_intervencao,
					nr_seq_horario)
				values (
					nr_seq_sinal_vital_w,
					nr_atendimento_p,
					coalesce(dt_sinal_vital_p,clock_timestamp()),
					clock_timestamp(),
					nm_usuario_p,
					'D',
					cd_pessoa_fisica_w,
					CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE null END ,
					'A',
					nr_seq_intervencao_w,
					nr_seq_horario_p);
				commit;
			end if;

			if (ie_tipo_atributo_w = 'NUMBER') then
				ds_atrib_insert_w := replace(ds_valor_item_p,'.',',');
			elsif (ie_tipo_atributo_w = 'DATE') then
				ds_atrib_insert_w := ds_valor_item_p;
			elsif (ie_tipo_atributo_w = 'VARCHAR2') then
				ds_atrib_insert_w := ds_valor_item_P;
			end if;
			
			if (ie_tipo_atributo_w = 'DATE') then
				ds_comando_w	:=	' update atendimento_sinal_vital set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_w)||';dt_atrib_insert_w=' || ds_atrib_insert_w);
			else	
				ds_comando_w	:=	' update atendimento_sinal_vital set ' || nm_atributo_w || ' = :ds_atrib_insert_w ' ||
							' where nr_sequencia = :nr_sequencia ';
				begin
							CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_w)||';ds_atrib_insert_w=' || ds_atrib_insert_w);
					exception
						when others then
							CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_w)||';ds_atrib_insert_w=' || ds_valor_item_p);
					 end;

				if (nm_atributo_w = 'QT_PESO_ATUAL') then
					qt_peso_w := (ds_atrib_insert_w)::numeric  / 1000;
					ds_comando_w := 'update atendimento_sinal_vital set qt_peso = :ds_atrib_insert_w where nr_sequencia = :nr_sequencia';
					CALL exec_sql_dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_w)||';ds_atrib_insert_w=' || to_char(qt_peso_w));
				elsif (nm_atributo_w = 'QT_PESO') then
					qt_peso_atual_w := (ds_atrib_insert_w)::numeric  * 1000;
					ds_comando_w := 'update atendimento_sinal_vital set qt_peso_atual = :ds_atrib_insert_w where nr_sequencia = :nr_sequencia';
					CALL exec_sql_dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_w)||';ds_atrib_insert_w=' || to_char(qt_peso_atual_w));
				elsif (nm_atributo_w = 'QT_ALTURA_M') then
					qt_altura_cm_w := (ds_atrib_insert_w)::numeric  * 100;
					ds_comando_w := 'update atendimento_sinal_vital set qt_altura_cm = :ds_atrib_insert_w where nr_sequencia = :nr_sequencia';
					CALL exec_sql_dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_w)||';ds_atrib_insert_w=' || to_char(qt_altura_cm_w));
				elsif (nm_atributo_w = 'QT_ALTURA_CM') then
					qt_altura_m_w := (ds_atrib_insert_w)::numeric  / 100;
					ds_comando_w := 'update atendimento_sinal_vital set qt_altura_m = :ds_atrib_insert_w where nr_sequencia = :nr_sequencia';
					CALL exec_sql_dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_w)||';ds_atrib_insert_w=' || to_char(qt_altura_m_w));
				end if;					
				
			end if;
			
			commit;
			
			ie_atualizou_peso_w	:= nm_atributo_w = 'QT_PESO';	
			
			if (ie_atualizou_peso_w) then
				ds_retorno_p	:= obter_alerta_sinal_vital(nr_seq_sinal_vital_w);
			end if;
			
			if (nr_atendimento_p > 0) then
				select	max(a.nr_seq_agendamento),
						max(a.nr_tipo_agenda)
				into STRICT	nr_seq_agenda_w,
						nr_tipo_agenda_w
				from	atendimento_sinal_vital a
				where	a.nr_sequencia	= nr_seq_sinal_vital_w;

				CALL gerar_reaprazar_sae_regra_sv(	nr_seq_SV_p				=>	nr_seq_sinal_vital_w,
												nm_usuario_p			=>	nm_usuario_p);

				CALL gerar_lanc_automatico_tabela(	nr_atendimento_p		=> nr_atendimento_p,
												nr_seq_evento_p			=> 412,
												nm_tabela_p				=> upper(nm_tabela_w),
												nr_sequencia_p			=> nr_seq_sinal_vital_w,
												nm_usuario_p			=> nm_usuario_p);

				CALL executar_evento_agenda_atend(	nr_atendimento_p		=> nr_atendimento_p,
												ie_evento_p				=> 'LSV',
												cd_estabelecimento_p	=> obter_estab_atend(nr_atendimento_p),
												nm_usuario_p			=> nm_usuario_p,
												ie_evolucao_clinica_p	=> null,
												nr_seq_tipo_atend_p		=> null,
												nr_seq_agenda_p			=> nr_seq_agenda_w,
												cd_tipo_agenda_p		=> nr_tipo_agenda_w);
			end if;
			
			if (nr_seq_sinal_vital_w > 0) then
				update	atendimento_sinal_vital
				set	qt_pam = ((qt_pa_sistolica + (qt_pa_diastolica * 2)) / 3)
				where	nr_sequencia = nr_seq_sinal_vital_w
				and	coalesce(qt_pam::text, '') = ''
				and	(qt_pa_sistolica IS NOT NULL AND qt_pa_sistolica::text <> '')
				and	(qt_pa_diastolica IS NOT NULL AND qt_pa_diastolica::text <> '');
				commit;
			end if;
			
			
		elsif (nm_tabela_w = 'ATENDIMENTO_MONIT_RESP') and (ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') then

			select	count(*)
			into STRICT	qt_registro_w
			from	atendimento_monit_resp
			where	nr_sequencia	=	nr_seq_monit_resp_p;	

			if (qt_registro_w = 0) then
			
				insert into atendimento_monit_resp(
					nr_sequencia,
					nr_atendimento,
					dt_monitorizacao,
					dt_atualizacao,
					nm_usuario,
					cd_pessoa_fisica,
					dt_liberacao,
					ie_situacao)
				values (
					nr_seq_monit_resp_p,
					nr_atendimento_p,
					coalesce(dt_sinal_vital_p,clock_timestamp()),
					clock_timestamp(),
					nm_usuario_p,
					cd_pessoa_fisica_w,
					CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE null END ,
					'A');
				commit;
			end if;

			if (ie_tipo_atributo_w = 'NUMBER') then
				ds_atrib_insert_w := replace(ds_valor_item_p,'.',',');
			elsif (ie_tipo_atributo_w = 'DATE') then
				ds_atrib_insert_w := ds_valor_item_p;
			elsif (ie_tipo_atributo_w = 'VARCHAR2') then
				ds_atrib_insert_w := ds_valor_item_P;
			end if;
		 
			if (ie_tipo_atributo_w = 'DATE') then
				ds_comando_w	:=	' update atendimento_monit_resp set ' || nm_atributo_w || ' = :dt_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_monit_resp_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);	
			else
				ds_comando_w	:=	' update atendimento_monit_resp set ' || nm_atributo_w || ' = :ds_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_monit_resp_p) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
			end if;
			
			
			commit;		
		elsif (nm_tabela_w = 'ATEND_MONIT_HEMOD') and (ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') then

			select	count(*)
			into STRICT	qt_registro_w
			from	atend_monit_hemod
			where	nr_sequencia	=	nr_seq_monit_hemod_p;	

			if (qt_registro_w = 0) then
			
				insert into atend_monit_hemod(
					nr_sequencia,
					nr_atendimento,
					dt_monitoracao,
					dt_atualizacao,
					nm_usuario,
					cd_pessoa_fisica,
					dt_liberacao,
					ie_situacao,
					qt_altura_cm,
					qt_super_corp,
					qt_peso,
					qt_fc,
					qt_pa_sist,
					qt_pa_diast,
					qt_pa_sist_ap,
					qt_pa_diast_ap,
					qt_pa_ocluida_ap,
					qt_pvd_sist,
					qt_pvd_diast_final,
					qt_pvc,
					qt_pam,
					qt_debito_card,
					qt_pa_media_ap,
					tx_indice_card,
					qt_volume_sist,
					tx_indice_sist,
					qt_rv_sistemica,
					qt_rv_pulmonar,
					qt_trab_sist_ve,
					qt_trab_sist_vd,
					tx_rv_sistemica,
					tx_rv_pulmonar,
					tx_trab_sist_vd,
					tx_trab_sist_ve,
					ie_pam_informada,
					ie_pa_media_ap_informada)
				values (
					nr_seq_monit_hemod_p,
					nr_atendimento_p,
					coalesce(dt_sinal_vital_p,clock_timestamp()),
					clock_timestamp(),
					nm_usuario_p,
					cd_pessoa_fisica_w,
					CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE null END ,
					'A',
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					'N',
					'N');
				commit;
			end if;
			if (ie_tipo_atributo_w = 'NUMBER') then
				ds_atrib_insert_w := replace(ds_valor_item_p,'.',',');
			elsif (ie_tipo_atributo_w = 'DATE') then
				ds_atrib_insert_w := ds_valor_item_p;
			elsif (ie_tipo_atributo_w = 'VARCHAR2') then
				ds_atrib_insert_w := ds_valor_item_P;
			end if;
		 
			if (ie_tipo_atributo_w = 'DATE') then
				ds_comando_w	:=	' update atend_monit_hemod set ' || nm_atributo_w || ' = :dt_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_monit_hemod_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);	
			else
				ds_comando_w	:=	' update atend_monit_hemod set ' || nm_atributo_w || ' = :ds_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_monit_hemod_p) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
			end if;

			commit;
		elsif (nm_tabela_w = 'ATENDIMENTO_PERDA_GANHO') and (ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') then		
				
			select	count(*)
			into STRICT	qt_registro_w
			from	atendimento_perda_ganho
			where	nr_sequencia = nr_seq_perda_ganho_p;

			if (ie_tipo_atributo_w = 'NUMBER') then
				ds_atrib_insert_w := replace(ds_valor_item_p,'.',',');
			elsif (ie_tipo_atributo_w = 'DATE') then
				ds_atrib_insert_w := ds_valor_item_p;
			elsif (ie_tipo_atributo_w = 'VARCHAR2') then
				ds_atrib_insert_w := ds_valor_item_P;
			end if;
					
			if (qt_registro_w = 0) then
				begin
				if (ie_ganhos_perdas_p = 'S') then
					begin
					
					select 	CASE WHEN nm_atributo_w='DT_MEDIDA' THEN  ds_atrib_insert_w  ELSE clock_timestamp() END
					into STRICT	dt_medida_w
					;
					
					if (nr_seq_dispositivo_pac_p > 0) then
						select 	nr_seq_dispositivo
						into STRICT	nr_seq_dispositivo_pac_w
						from	ATEND_PAC_DISPOSITIVO
						where	nr_sequencia = nr_seq_dispositivo_pac_p;
					end if;
							
					if (ie_tipo_atributo_w = 'NUMBER') then
						ds_perda_ganho_w := consiste_perda_ganho(cd_pessoa_fisica_w, ds_atrib_insert_w, nr_seq_tipo_p, ds_perda_ganho_w);
					end if;
					ds_perda_ganho_disp_w := consistir_perda_ganho_disp(nr_atendimento_p, nr_seq_tipo_p, dt_medida_w, nm_usuario_p, ds_perda_ganho_disp_w);
					if (ds_perda_ganho_w IS NOT NULL AND ds_perda_ganho_w::text <> '') then
						raise invalid_perda_ganho_w;
					end if;
					if (ds_perda_ganho_disp_w IS NOT NULL AND ds_perda_ganho_disp_w::text <> '') then
						raise invalid_perda_ganho_disp_w;
					end if;
					insert into	atendimento_perda_ganho(	NR_SEQUENCIA,
									NR_ATENDIMENTO, 
									DT_ATUALIZACAO, 
									NM_USUARIO, 
									CD_SETOR_ATENDIMENTO,
									NR_SEQ_TIPO, 
									QT_VOLUME, 												
									DT_MEDIDA, 
									CD_TURNO,												
									IE_SITUACAO,												
									CD_PERFIL_ATIVO,
									CD_PROFISSIONAL,
									NR_SEQ_DISPOSITIVO)
							values (	nr_seq_perda_ganho_p,
									nr_atendimento_p,
									clock_timestamp(),
									nm_usuario_p,
									cd_setor_atend_w,
									nr_seq_tipo_p,
									0,
									clock_timestamp(),
									null,
									'A',
									cd_perfil_w,
									cd_pessoa_fisica_w,
									nr_seq_dispositivo_pac_w);																							
					exception
						when invalid_perda_ganho_w then
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(ds_perda_ganho_w);
						when invalid_perda_ganho_disp_w then
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(ds_perda_ganho_disp_w);
						when others then
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(226362);
					end;	
				else
					begin
						insert into	atendimento_perda_ganho(NR_SEQUENCIA,
										NR_ATENDIMENTO, 
										DT_ATUALIZACAO, 
										NM_USUARIO, 
										CD_SETOR_ATENDIMENTO,
										NR_SEQ_TIPO, 
										QT_VOLUME, 												
										DT_MEDIDA, 
										CD_TURNO,												
										IE_SITUACAO,												
										CD_PERFIL_ATIVO,
										NR_SEQ_DISPOSITIVO)
								values (	nr_seq_perda_ganho_p,
										nr_atendimento_p,
										clock_timestamp(),
										nm_usuario_p,
										cd_setor_atend_w,
										CASE WHEN coalesce(nr_seq_tipo_p, 0)=0 THEN  coalesce(ds_atrib_insert_w,nr_atrib_insert_w)  ELSE nr_seq_tipo_p END ,
										0,
										clock_timestamp(),
										null,
										'A',
										cd_perfil_w,
										nr_seq_dispositivo_pac_w);																							
						exception
							when others then
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(226362);			
					end;
				end if;
				end;
			end if;	 	
			
			if (nm_atributo_w not in ('DS_PERDA_GANHO', 'DS_GRUPO_GP', 'NR_SEQ_DISPOSITIVO')) then
				if (ie_tipo_atributo_w = 'DATE') then
					ds_comando_w	:=	' update atendimento_perda_ganho set ' || nm_atributo_w || ' = :dt_atrib_insert_w '||
								' where nr_sequencia = :nr_sequencia ';
					CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_perda_ganho_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);	
				else
					ds_comando_w	:=	' update atendimento_perda_ganho set ' || nm_atributo_w || ' = :ds_atrib_insert_w '||
								' where nr_sequencia = :nr_sequencia ';
					CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_perda_ganho_p) || ';ds_atrib_insert_w=' || coalesce(ds_atrib_insert_w,nr_atrib_insert_w));
				end if;
				commit;		
			end if;
			
			if (ie_campo_inf_adic_w = 'S') then
			
				insert into atend_perda_ganho_inf_adic(
							nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_atend_pg,
							nr_seq_inf_adic,
							nr_seq_inf_adic_item)
						values (
							nextval('atend_perda_ganho_inf_adic_seq'),
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_perda_ganho_p,
							nr_seq_item_p,
							ds_valor_item_p);
			
			end if;	
			
			update	atendimento_perda_ganho
			set		dt_liberacao = clock_timestamp(),
					nm_usuario   = nm_usuario_p
			where	nr_sequencia = nr_seq_perda_ganho_p;
			commit;	
			
		elsif (nm_tabela_w = 'ATEND_UROANALISE') and (ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') then	
					
			select	count(*)
			into STRICT	qt_registro_w
			from	atend_uroanalise
			where	nr_sequencia = nr_seq_uronalise_p;

			if (ie_tipo_atributo_w = 'NUMBER') then
				ds_atrib_insert_w := replace(ds_valor_item_p,'.',',');
			elsif (ie_tipo_atributo_w = 'DATE') then
				ds_atrib_insert_w := ds_valor_item_p;
			elsif (ie_tipo_atributo_w = 'VARCHAR2') then
				ds_atrib_insert_w := ds_valor_item_P;
			end if;
					
			if (qt_registro_w = 0) then		
				insert into atend_uroanalise( 	nr_sequencia,
								dt_atualizacao, 
								nm_usuario, 
								dt_atualizacao_nrec,
								nm_usuario_nrec, 
								nr_atendimento, 
								cd_profissional, 
								dt_analise, 						
								ie_situacao,
								cd_perfil_ativo) 
							values (nr_seq_uronalise_p,  
								clock_timestamp(), 
								nm_usuario_p, 
								clock_timestamp(),
								nm_usuario_p, 
								nr_atendimento_p, 
								cd_pessoa_fisica_w,  
								clock_timestamp(),
								'A',
								cd_perfil_w);								
			
				
				commit;
						
			end if;
					
			if (ie_tipo_atributo_w = 'DATE') then
				ds_comando_w	:=	' update atend_uroanalise set ' || nm_atributo_w || ' = :dt_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_uronalise_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);	
			else
				ds_comando_w	:=	' update atend_uroanalise set ' || nm_atributo_w || ' = :ds_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_uronalise_p) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
			end if;

			commit;
			
		elsif (nm_tabela_w = 'ATEND_UROCOLOR') and (ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') then	
			
			select	count(*)
			into STRICT	qt_registro_w
			from	atend_urocolor
			where	nr_sequencia = nr_seq_urocolor_p;

			if (ie_tipo_atributo_w = 'NUMBER') then
				ds_atrib_insert_w := replace(ds_valor_item_p,'.',',');
			elsif (ie_tipo_atributo_w = 'DATE') then
				ds_atrib_insert_w := ds_valor_item_p;
			elsif (ie_tipo_atributo_w = 'VARCHAR2') then
				ds_atrib_insert_w := ds_valor_item_P;
			end if;
				
			if (qt_registro_w = 0) then
				
				insert into 	atend_urocolor(nr_sequencia,
								dt_atualizacao, 
								nm_usuario, 
								dt_atualizacao_nrec, 
								nm_usuario_nrec, 
								dt_analise, 
								nr_atendimento, 
								cd_profissional, 
								ie_situacao, 
								cd_perfil_ativo ) 
							values (nr_seq_urocolor_p,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nr_atendimento_p,
								cd_pessoa_fisica_w,
								'A',
								cd_perfil_w);
				commit;
			end if;

			if (ie_tipo_atributo_w = 'DATE') then
				ds_comando_w	:=	' update atend_urocolor set ' || nm_atributo_w || ' = :dt_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_urocolor_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);	
			else
				ds_comando_w	:=	' update atend_urocolor set ' || nm_atributo_w || ' = :ds_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_urocolor_p) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
			end if;

			commit;
			
		elsif (nm_tabela_w = 'ATEND_AVAL_ANALGESIA') and (ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') then

        select nextval('atend_aval_analgesia_seq')
        into STRICT nr_seq_aval_analgesia_w
;

				insert into atend_aval_analgesia(
					nr_sequencia,
					nr_atendimento,
					dt_avaliacao,
					dt_atualizacao,
					dt_atualizacao_nrec,
					nm_usuario,
					nm_usuario_nrec,
					cd_profissional,
					dt_liberacao,
					ie_situacao)
				values (
					nr_seq_aval_analgesia_w,
					nr_atendimento_p,
					coalesce(dt_sinal_vital_p,clock_timestamp()),
					clock_timestamp(),
					clock_timestamp(),
					nm_usuario_p,
					nm_usuario_p,
					cd_pessoa_fisica_w,
					CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE null END ,
					'A');
				commit;

			if (ie_tipo_atributo_w = 'NUMBER') then
				ds_atrib_insert_w := replace(ds_valor_item_p,'.',',');
			elsif (ie_tipo_atributo_w = 'DATE') then
				ds_atrib_insert_w := ds_valor_item_p;
			elsif (ie_tipo_atributo_w = 'VARCHAR2') then
				ds_atrib_insert_w := ds_valor_item_P;
			end if;
			
			if (ie_tipo_atributo_w = 'DATE') then
				ds_comando_w	:=	' update atend_aval_analgesia set ' || nm_atributo_w || ' = :dt_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_aval_analgesia_w) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);	
			else
				ds_comando_w	:=	' update atend_aval_analgesia set ' || nm_atributo_w || ' = :ds_atrib_insert_w '||
							' where nr_sequencia = :nr_sequencia ';
				CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_aval_analgesia_w) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
			end if;
			
			
			commit;	
			
		end if;	
	end if;
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE registrar_sv_adep ( nr_atendimento_p bigint, dt_sinal_vital_p timestamp, nr_seq_sinal_vital_p bigint, nr_seq_monit_resp_p bigint, nr_seq_monit_hemod_p bigint, nr_seq_analisador_p bigint, nr_seq_uronalise_p bigint, nr_seq_urocolor_p bigint, nr_seq_item_p bigint, ds_valor_item_p text, nr_seq_horario_p bigint, nm_usuario_p text, nr_seq_perda_ganho_p bigint, ds_retorno_p INOUT text, nr_seq_tipo_p bigint default 0, nr_seq_aval_analgesia_p bigint default 0, ie_conduta_escala_p text default 'N', ie_executa_mentor_p text default 'N', ie_ganhos_perdas_p text default 'N', nr_seq_dispositivo_pac_p bigint default 0) FROM PUBLIC;

