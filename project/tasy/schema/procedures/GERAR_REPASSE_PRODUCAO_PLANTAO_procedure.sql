-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_repasse_producao_plantao (nr_seq_prod_plantao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* Producao por plantao */

cd_medico_prod_w	varchar(10);
dt_inicial_prod_w	timestamp;
dt_final_prod_w		timestamp;
nr_seq_terceiro_prod_w	bigint;
vl_repasse_prod_w	double precision;
cd_estabelecimento_w	smallint;

/* Regra producao plantao */

cd_medico_w		varchar(10);
cd_procedimento_w	bigint;
cd_setor_atendimento_w	integer;
ie_acumula_w		varchar(15);
ie_origem_proced_w	bigint;
ie_tipo_regra_w		varchar(15);
ie_valor_w		varchar(15);
nr_seq_terceiro_w	bigint;
nr_seq_regra_w		bigint;
tx_incidencia_w		double precision;
tx_repasse_w		double precision;
tx_desconto_exced_w     double precision;

/* Plantao medico */

dt_inicial_plant_w	timestamp;
vl_repasse_plant_w	double precision;
dt_plant_maior_w	timestamp;
cd_medico_plant_w	varchar(10);
nr_seq_terceiro_plant_w	bigint;

/* Valores acumulados */

vl_plantao_maior_w	double precision;
vl_producao_maior_w	double precision;
vl_acumulado_w		double precision;

/* valores gerados */

vl_repasse_w		double precision;
dt_inicial_w		timestamp;
vl_excedente_w		double precision;
qt_item_w		bigint;
vl_total_w		double precision;
ds_ocorrencia_w		varchar(4000);


c01 CURSOR FOR
SELECT	a.cd_medico,
	a.cd_procedimento,
	a.cd_setor_atendimento,
	a.ie_acumula,
	a.ie_origem_proced,
	a.ie_tipo_regra,
	a.ie_valor,
	a.nr_seq_terceiro,
	a.nr_sequencia,
	a.tx_incidencia,
	a.tx_repasse,
    	a.tx_desconto_exced
from	regra_producao_plantao a
where	coalesce(a.cd_medico,coalesce(cd_medico_prod_w,'X'))		= coalesce(cd_medico_prod_w,coalesce(a.cd_medico,'X'))
and	coalesce(a.nr_seq_terceiro,coalesce(nr_seq_terceiro_prod_w,0))	= coalesce(nr_seq_terceiro_prod_w,coalesce(a.nr_seq_terceiro,0))
and	a.cd_estabelecimento	= cd_estabelecimento_p
and	coalesce(a.ie_situacao,'A')	= 'A'
and	clock_timestamp()			between coalesce(a.dt_inicio_vigencia,clock_timestamp()) and coalesce(a.dt_final_vigencia,clock_timestamp());

c02 CURSOR FOR
SELECT	distinct
	a.cd_medico cd_medico_plant
from	medico_plantao a
where	exists (SELECT	1
	from	repasse_terceiro_item y,
		repasse_item_plantao x
	where	y.nr_seq_terceiro	= coalesce(coalesce(nr_seq_terceiro_w,nr_seq_terceiro_prod_w),y.nr_seq_terceiro)
	and	x.nr_seq_repasse_item	= y.nr_sequencia
	and	x.nr_seq_med_plantao	= a.nr_sequencia)
and	a.cd_medico	= coalesce(coalesce(cd_medico_w,cd_medico_prod_w),a.cd_medico)
and	a.dt_inicial	between dt_inicial_prod_w and dt_final_prod_w;

c03 CURSOR FOR
SELECT	distinct
	trunc(a.dt_inicial,'dd') dt_inicial_plant
from	medico_plantao a
where	exists (SELECT	1
	from	repasse_terceiro_item y,
		repasse_item_plantao x
	where	y.nr_seq_terceiro	= coalesce(coalesce(nr_seq_terceiro_w,nr_seq_terceiro_prod_w),y.nr_seq_terceiro)
	and	x.nr_seq_repasse_item	= y.nr_sequencia
	and	x.nr_seq_med_plantao	= a.nr_sequencia)
and	a.cd_medico	= cd_medico_plant_w
and	a.dt_inicial	between dt_inicial_prod_w and dt_final_prod_w
order by	1;


BEGIN

select	a.cd_medico,
	trunc(a.dt_inicial,'dd'),
	fim_dia(a.dt_final),
	a.nr_seq_terceiro,
	a.cd_estabelecimento
into STRICT	cd_medico_prod_w,
	dt_inicial_prod_w,
	dt_final_prod_w,
	nr_seq_terceiro_prod_w,
	cd_estabelecimento_w
from	producao_medica_plantao a
where	a.nr_sequencia	= nr_seq_prod_plantao_p;

/* buscar as regras */

open	c01;
loop
fetch	c01 into
	cd_medico_w,
	cd_procedimento_w,
	cd_setor_atendimento_w,
	ie_acumula_w,
	ie_origem_proced_w,
	ie_tipo_regra_w,
	ie_valor_w,
	nr_seq_terceiro_w,
	nr_seq_regra_w,
	tx_incidencia_w,
	tx_repasse_w,
    	tx_desconto_exced_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	/* buscar os medicos que realizaram plantao */

	open	c02;
	loop
	fetch	c02 into
		cd_medico_plant_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */

		vl_acumulado_w	:= 0;

		select	trunc(max(a.dt_inicial),'dd') dt_inicial_plant
		into STRICT	dt_plant_maior_w
		from	medico_plantao a
		where	exists (SELECT	1
			from	repasse_terceiro_item y,
				repasse_item_plantao x
			where	y.nr_seq_terceiro	= coalesce(coalesce(nr_seq_terceiro_w,nr_seq_terceiro_prod_w),y.nr_seq_terceiro)
			and	x.nr_seq_repasse_item	= y.nr_sequencia
			and	x.nr_seq_med_plantao	= a.nr_sequencia)
		and	a.cd_medico	= cd_medico_plant_w
		and	a.dt_inicial	between dt_inicial_prod_w and dt_final_prod_w;

		/* obter o terceiro */

		if (coalesce(nr_seq_terceiro_w::text, '') = '') and (coalesce(nr_seq_terceiro_prod_w::text, '') = '') then

			select	obter_terceiro_medico(cd_medico_plant_w,cd_estabelecimento_w,dt_inicial_prod_w)
			into STRICT	nr_seq_terceiro_plant_w
			;

		else

			nr_seq_terceiro_plant_w	:= coalesce(nr_seq_terceiro_w,nr_seq_terceiro_prod_w);

		end if;

		if (dt_plant_maior_w IS NOT NULL AND dt_plant_maior_w::text <> '') then

			/* buscar os plantoes que se encaixam na regra */

			open	c03;
			loop
			fetch	c03 into
				dt_inicial_plant_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */

				if (coalesce(vl_acumulado_w,0)	= 0) then
					dt_inicial_w	:= dt_inicial_plant_w;
				end if;

				/* buscar o valor do plantao no dia */

				select	sum(a.vl_repasse)
				into STRICT	vl_repasse_plant_w
				from	repasse_terceiro_item a
				where	a.nr_seq_terceiro	= coalesce(coalesce(nr_seq_terceiro_w,nr_seq_terceiro_prod_w),a.nr_seq_terceiro)
				and	exists (SELECT	1
					from	medico_plantao y,
						repasse_item_plantao x
					where	y.cd_medico			= cd_medico_plant_w
					and	trunc(y.dt_inicial,'dd')	= dt_inicial_plant_w
					and	x.nr_seq_med_plantao		= y.nr_sequencia
					and	x.nr_seq_repasse_item		= a.nr_sequencia);

				-- Plantao calculado de acordo com data/hora de ini e fim do plantao
				select    coalesce(sum(b.vl_repasse),0)
				into STRICT    vl_repasse_prod_w
				from    procedimento_repasse b,
					procedimento_paciente a,
					medico_plantao c
				where    a.ie_origem_proced    = coalesce(ie_origem_proced_w,a.ie_origem_proced)
				and    a.cd_procedimento = coalesce(cd_procedimento_w,a.cd_procedimento)
				and    a.cd_setor_atendimento = coalesce(cd_setor_atendimento_w,a.cd_setor_atendimento)
				and    b.cd_medico = cd_medico_plant_w
				and    b.nr_seq_terceiro    = coalesce(coalesce(nr_seq_terceiro_w,nr_seq_terceiro_prod_w),b.nr_seq_terceiro)
				and    a.nr_sequencia        = b.nr_seq_procedimento
				and    c.cd_medico = cd_medico_plant_w
				and    trunc(c.dt_inicial,'dd') =  dt_inicial_plant_w
				and    a.dt_procedimento >= c.dt_inicial and a.dt_procedimento <= c.dt_final;

				vl_repasse_prod_w	:= vl_repasse_prod_w * (coalesce(tx_incidencia_w,0) / 100);
				vl_producao_maior_w	:= 0;
				vl_plantao_maior_w	:= 0;

				if (ie_tipo_regra_w = 'M') then
				
					vl_repasse_w	:= greatest(vl_repasse_plant_w, vl_repasse_prod_w);

					insert	into repasse_producao_plantao(cd_medico,
						dt_atualizacao,
						dt_atualizacao_nrec,
						dt_final,
						dt_inicial,
						nm_usuario,
						nm_usuario_nrec,
						nr_seq_prod_plantao,
						nr_seq_regra,
						nr_seq_terceiro,
						nr_sequencia,
						vl_excedente,
						vl_plantao,
						vl_producao,
						vl_repasse)
					values (cd_medico_plant_w,
						clock_timestamp(),
						clock_timestamp(),
						dt_inicial_plant_w,
						dt_inicial_w,
						nm_usuario_p,
						nm_usuario_p,
						nr_seq_prod_plantao_p,
						nr_seq_regra_w,
						nr_seq_terceiro_plant_w,
						nextval('repasse_producao_plantao_seq'),
						0,
						vl_repasse_plant_w,
						vl_repasse_prod_w,
						vl_repasse_w);

					qt_item_w	:= coalesce(qt_item_w,0) + 1;
					vl_total_w	:= coalesce(vl_total_w,0) + vl_repasse_w;

				else
					/* producao superior ao plantao */

					if (ie_tipo_regra_w = 'S') then
						if (vl_repasse_prod_w >= vl_repasse_plant_w) then
							vl_producao_maior_w := vl_repasse_prod_w - vl_repasse_plant_w;
						else
							if (vl_repasse_prod_w	< vl_repasse_plant_w) then
								vl_producao_maior_w := vl_repasse_plant_w - vl_repasse_prod_w;
							end if;
						end if;
					/* producao inferior ao plantao */

					elsif (ie_tipo_regra_w	= 'I') then
						if (vl_repasse_prod_w	< vl_repasse_plant_w) then
							vl_plantao_maior_w	:= vl_repasse_plant_w - vl_repasse_prod_w;
						else
							vl_repasse_plant_w	:= coalesce(vl_repasse_plant_w,0) + coalesce(vl_acumulado_w,0);
							vl_acumulado_w		:= 0;
							if (vl_repasse_prod_w	< vl_repasse_plant_w) then
								vl_plantao_maior_w	:= vl_repasse_plant_w - vl_repasse_prod_w;
							end if;
						end if;
					end if;

					/* acumular excedente */

					if (ie_acumula_w	= 'A') then
						vl_acumulado_w		:= coalesce(vl_producao_maior_w,0) + coalesce(vl_plantao_maior_w,0);
						vl_producao_maior_w	:= 0;
						vl_plantao_maior_w	:= 0;
					end if;

					vl_producao_maior_w	:= coalesce(vl_producao_maior_w,0) * coalesce(tx_repasse_w,0) / 100;
					vl_plantao_maior_w	:= coalesce(vl_plantao_maior_w,0) * coalesce(tx_repasse_w,0) / 100;

					/* aplicar calculo sobre o excedente antes de acumular */

					if (ie_acumula_w	= 'C') then
						vl_acumulado_w		:= coalesce(vl_producao_maior_w,0) + coalesce(vl_plantao_maior_w,0);
						vl_producao_maior_w	:= 0;
						vl_plantao_maior_w	:= 0;
					end if;

					if (dt_plant_maior_w	= dt_inicial_plant_w) or (vl_acumulado_w		= 0) then
						/* o calculo ja foi aplicado e nao precisa ser aplicado novamente */

						if (ie_acumula_w	= 'C') then
							vl_excedente_w	:= coalesce(vl_producao_maior_w,0) + coalesce(vl_plantao_maior_w,0) + coalesce(vl_acumulado_w,0);
						else
							vl_excedente_w	:= (coalesce(vl_producao_maior_w,0) + coalesce(vl_plantao_maior_w,0) + coalesce(vl_acumulado_w,0)) * coalesce(tx_repasse_w,0) / 100;
						end if;

						/* diferenca entre producao e plantao */

						if (ie_valor_w	= 'D') then
																	
							/* decrementa do valor excedido quando existir porcentagem de taxa de desconto do excedido */

                            				if (tx_desconto_exced_w > 0) then
                               					vl_excedente_w  := vl_excedente_w * ((100-tx_desconto_exced_w)/100);
                            				end if;										
																	 
							/* producao maior que plantao - estornar producao e lancar diferenca */

							if (vl_repasse_prod_w	> vl_repasse_plant_w) then
								vl_repasse_w	:= vl_repasse_plant_w + vl_excedente_w;
							/* plantao maior que producao - estornar plantao e lancar diferenca */

							elsif (vl_repasse_plant_w	> vl_repasse_prod_w) then
								vl_repasse_w	:= vl_repasse_prod_w + vl_excedente_w;
							end if;
						/* valor do plantao - estornar producao */

						elsif (ie_valor_w	= 'P') then
							vl_repasse_w	:= vl_repasse_plant_w;
						end if;

						insert	into repasse_producao_plantao(cd_medico,
							dt_atualizacao,
							dt_atualizacao_nrec,
							dt_final,
							dt_inicial,
							nm_usuario,
							nm_usuario_nrec,
							nr_seq_prod_plantao,
							nr_seq_regra,
							nr_seq_terceiro,
							nr_sequencia,
							vl_excedente,
							vl_plantao,
							vl_producao,
							vl_repasse)
						values (cd_medico_plant_w,
							clock_timestamp(),
							clock_timestamp(),
							CASE WHEN vl_acumulado_w=0 THEN dt_inicial_plant_w  ELSE dt_plant_maior_w END ,
							dt_inicial_w,
							nm_usuario_p,
							nm_usuario_p,
							nr_seq_prod_plantao_p,
							nr_seq_regra_w,
							nr_seq_terceiro_plant_w,
							nextval('repasse_producao_plantao_seq'),
							vl_excedente_w,
							vl_repasse_plant_w,
							vl_repasse_prod_w,
							vl_repasse_w);

						qt_item_w	:= coalesce(qt_item_w,0) + 1;
						vl_total_w	:= coalesce(vl_total_w,0) + vl_repasse_w;
					end if;
				end if;
			end	loop;
			close	c03;

		end if;

	end	loop;
	close	c02;

end	loop;
close	c01;

/*
Gerada simulacao de repasse.
Itens gerados na simulacao: #@QT_ITEM_P#@
Valor total da simulacao: #@VL_TOTAL_P#@
*/
ds_ocorrencia_w	:= substr(wheb_mensagem_pck.get_texto(307550,'QT_ITEM_P='||qt_item_w||';VL_TOTAL_P='||to_char(vl_total_w,'999999990.00')),1,2000);

CALL gerar_repasse_prod_plantao_log(	nr_seq_prod_plantao_p,
				'F',
				'S',
				ds_ocorrencia_w,
				nm_usuario_p);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_repasse_producao_plantao (nr_seq_prod_plantao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

