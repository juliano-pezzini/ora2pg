-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tratar_baixa_duplicidade_tit ( nr_seq_tit_rec_cobr_p bigint, nr_titulo_p bigint, nr_seq_baixa_p bigint, ie_acao_p text, dt_baixa_p timestamp, nm_usuario_p text, ie_apropriar_p INOUT text) AS $body$
DECLARE


ds_observacao_w			varchar(255)	:= null;
vl_parametro_w			varchar(255);
cd_cgc_w			varchar(14);
cd_pessoa_fisica_w		varchar(10);
ie_acao_w			varchar(3);
ie_origem_nota_w			varchar(3)	:= 'CE';
ie_juros_multa_barras_bloq_w		varchar(3)	:= 'N';
ie_gerar_adiant_tit_duplic_w		varchar(1);
ie_gerar_nc_pag_duplic_w		varchar(1)	:= 'N';
ie_rescisao_inadimplencia_w		varchar(1)	:= 'N';
ie_situacao_tit_w			varchar(1);
ie_saldo_titulo_w			varchar(1);
vl_saldo_titulo_w			double precision;
vl_liquidacao_w			double precision;
vl_devolver_w			double precision;
vl_juros_w			double precision;
vl_saldo_adiant_w			double precision;
vl_multa_w			double precision;
vl_desp_banc_w			double precision;
vl_saldo_nota_w			double precision;
vl_saldo_juros_w			double precision;
vl_saldo_multa_w			double precision;
vl_pagos_w			double precision;
vl_titulo_w			double precision;
vl_recebido_cobr_escrit_w		double precision;
vl_recebido_w			double precision;
vl_descontos_w			double precision;
vl_baixa_w			double precision;
vl_cobranca_tit_w			double precision	:= 0;
vl_juros_data_w			double precision	:= 0;
vl_multa_data_w			double precision	:= 0;
vl_juros_boleto_w			double precision;
vl_multa_boleto_w			double precision;
vl_rec_maior_w			double precision;
vl_regra_ger_nc_w			double precision;
nr_adiantamento_w			bigint;
nr_seq_trans_financ_w		bigint;
nr_seq_conta_banco_w		bigint;
nr_seq_nota_credito_w		bigint	:= null;
qt_registro_w			bigint;
nr_titulo_w			bigint;
nr_seq_regra_w			bigint;
nr_seq_cobranca_w		bigint;
nr_seq_tit_rec_cobr_w		bigint	:= null;
nr_seq_movto_banco_pend_w	bigint;
cd_tipo_receb_adiant_duplic_w	integer;
cd_moeda_w			integer;
nr_seq_devolucao_w		integer;
cd_estabelecimento_w		smallint;
cd_moeda_cp_w			smallint;
nr_seq_pagador_w			bigint;
nr_seq_trans_contab_nota_w		bigint;
nr_seq_trans_baixa_tit_pagar_w	bigint;
nr_seq_trans_inadimplencia_w	bigint	:= null;
dt_liquidacao_w			timestamp;
dt_remessa_w			timestamp;
dt_pagamento_previsto_w		timestamp;
dt_alteracao_venc_w		timestamp;
dt_credito_bancario_w		timestamp;
ie_param_w			varchar(1);
nr_seq_movto_trans_fin_w		bigint;
ie_situacao_tit_regra_w		varchar(5);
ie_juros_multa_mens_w		varchar(5);
ie_dt_nota_credito_w		parametro_contas_receber.ie_dt_nota_credito%type	:= '3';
dt_nota_credito_w			timestamp;
nr_seq_motivo_w			regra_acao_pag_duplic.nr_seq_motivo%type;


BEGIN
ie_apropriar_p	:= 'N';

if (nr_seq_tit_rec_cobr_p IS NOT NULL AND nr_seq_tit_rec_cobr_p::text <> '') or (nr_titulo_p IS NOT NULL AND nr_titulo_p::text <> '') then
	if (nr_titulo_p IS NOT NULL AND nr_titulo_p::text <> '') then
		cd_estabelecimento_w	:= obter_estabelecimento_ativo;
	else
		select	b.cd_estabelecimento,
			b.dt_credito_bancario
		into STRICT	cd_estabelecimento_w,
			dt_credito_bancario_w
		from	cobranca_escritural b,
			titulo_receber_cobr a
		where	a.nr_seq_cobranca	= b.nr_sequencia
		and	a.nr_sequencia		= nr_seq_tit_rec_cobr_p;
	end if;

	-- parâmetro [145] - Gerar da nota de crédito ao baixar manualmente um título que tenha recebimento a maior
	vl_parametro_w := Obter_Param_Usuario(801, 145, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, vl_parametro_w);

	begin
	select	a.cd_moeda_padrao,
		coalesce(ie_gerar_nc_pag_duplic,'N'),
		coalesce(ie_juros_multa_barras_bloq,'N'),
		coalesce(a.ie_dt_nota_credito,'3')
	into STRICT	cd_moeda_w,
		ie_gerar_nc_pag_duplic_w,
		ie_juros_multa_barras_bloq_w,
		ie_dt_nota_credito_w
	from	parametro_contas_receber a
	where	a.cd_estabelecimento	= cd_estabelecimento_w;
	exception
		when no_data_found then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(181572);
	end;

	SELECT * FROM obter_regra_acao_pag_duplic(dt_baixa_p, cd_estabelecimento_w, nm_usuario_p, nr_seq_regra_w, ie_acao_w) INTO STRICT nr_seq_regra_w, ie_acao_w;

	begin
	select	nr_seq_trans_contab_nota,
		nr_seq_trans_baixa_tit_pagar,
		vl_minimo_nc,
		coalesce(ie_saldo_titulo, 'S'),
		coalesce(ie_situacao_tit,'T'),
		nr_seq_motivo
	into STRICT	nr_seq_trans_contab_nota_w,
		nr_seq_trans_baixa_tit_pagar_w,
		vl_regra_ger_nc_w,
		ie_saldo_titulo_w,
		ie_situacao_tit_regra_w,
		nr_seq_motivo_w
	from	regra_acao_pag_duplic
	where	nr_sequencia	= nr_seq_regra_w;
	exception
	when others then
		nr_seq_trans_contab_nota_w	:= null;
		nr_seq_trans_baixa_tit_pagar_w	:= null;
		vl_regra_ger_nc_w		:= null;
		ie_saldo_titulo_w		:= 'S';
		ie_situacao_tit_regra_w		:= 'T';
		nr_seq_motivo_w			:= null;
	end;

	begin
	select	a.cd_moeda_padrao
	into STRICT	cd_moeda_cp_w
	from	parametros_contas_pagar a
	where	a.cd_estabelecimento	= cd_estabelecimento_w;
	exception
		when no_data_found then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(181573);
	end;

	select	max(nr_seq_trans_inadimplencia),
		coalesce(max(a.ie_juros_multa_mens),'N')
	into STRICT	nr_seq_trans_inadimplencia_w,
		ie_juros_multa_mens_w
	from	pls_parametros_cr a
	where	a.cd_estabelecimento	= cd_estabelecimento_w;

	if (ie_acao_w in ('NC','NCM')) then
		if (nr_seq_tit_rec_cobr_p IS NOT NULL AND nr_seq_tit_rec_cobr_p::text <> '') then -- Se for estorno pela cobranca escritural
			select	b.vl_saldo_titulo,
				trunc(a.dt_liquidacao),
				c.nr_seq_conta_banco,
				b.cd_pessoa_fisica,
				b.cd_cgc,
				coalesce(a.vl_juros,0),
				coalesce(a.vl_multa,0),
				coalesce(a.vl_despesa_bancaria,0),
				a.nr_titulo,
				c.dt_remessa_retorno,
				c.nr_sequencia,
				b.vl_titulo,
				a.vl_cobranca,
				b.dt_pagamento_previsto,
				b.ie_situacao
			into STRICT	vl_saldo_titulo_w,
				dt_liquidacao_w,
				nr_seq_conta_banco_w,
				cd_pessoa_fisica_w,
				cd_cgc_w,
				vl_juros_w,
				vl_multa_w,
				vl_desp_banc_w,
				nr_titulo_w,
				dt_remessa_w,
				nr_seq_cobranca_w,
				vl_titulo_w,
				vl_cobranca_tit_w,
				dt_pagamento_previsto_w,
				ie_situacao_tit_w
			from	cobranca_escritural c,
				titulo_receber b,
				titulo_receber_cobr a
			where	a.nr_titulo		= b.nr_titulo
			and	a.nr_seq_cobranca	= c.nr_sequencia
			and	a.nr_sequencia		= nr_seq_tit_rec_cobr_p;
		elsif (nr_titulo_p IS NOT NULL AND nr_titulo_p::text <> '') and (nr_seq_baixa_p IS NOT NULL AND nr_seq_baixa_p::text <> '') then -- Se for estorno pela baixa "manual"
			select	b.vl_saldo_titulo,
				trunc(a.dt_recebimento),
				a.nr_seq_conta_banco,
				b.cd_pessoa_fisica,
				b.cd_cgc,
				coalesce(a.vl_juros,0),
				coalesce(a.vl_multa,0),
				a.nr_titulo,
				b.vl_titulo,
				a.nr_seq_cobranca,
				b.ie_situacao
			into STRICT	vl_saldo_titulo_w,
				dt_liquidacao_w,
				nr_seq_conta_banco_w,
				cd_pessoa_fisica_w,
				cd_cgc_w,
				vl_juros_w,
				vl_multa_w,
				nr_titulo_w,
				vl_titulo_w,
				nr_seq_cobranca_w,
				ie_situacao_tit_w
			from	titulo_receber b,
				titulo_receber_liq a
			where	a.nr_titulo	= b.nr_titulo
			and	a.nr_titulo	= nr_titulo_p
			and	a.nr_sequencia	= nr_seq_baixa_p;

			if (nr_seq_cobranca_w IS NOT NULL AND nr_seq_cobranca_w::text <> '') then
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_tit_rec_cobr_w
				from	titulo_receber_cobr	a
				where	a.nr_seq_cobranca	= nr_seq_cobranca_w
				and	a.nr_titulo		= nr_titulo_p;
			end if;
		end if;

		-- Se foi originado de crédito não identificado
		if (coalesce(nr_seq_tit_rec_cobr_p::text, '') = '') and (coalesce(nr_seq_tit_rec_cobr_w::text, '') = '') then
			ie_origem_nota_w	:= 'CN';
		end if;

		begin
		select	coalesce(a.vl_recebido,0)
		into STRICT	vl_baixa_w
		from	titulo_receber_liq a
		where	a.nr_titulo	= nr_titulo_w
		and	a.nr_sequencia	<> nr_seq_baixa_p;
		exception
			when others then
			vl_baixa_w	:= 0;
		end;

		begin
		select	a.vl_recebido,
			a.vl_juros,
			a.vl_multa,
			coalesce(a.vl_descontos,0)
		into STRICT	vl_recebido_w,
			vl_juros_w,
			vl_multa_w,
			vl_descontos_w
		from	titulo_receber_liq a
		where	a.nr_titulo	= nr_titulo_w
		and	a.nr_sequencia	= nr_seq_baixa_p;
		exception
			when others then
			null;
		end;

		-- Se a baixa for de estorno, verificar se já tem nota de crédito
		if (ie_acao_p = 'E') then
			if (nr_seq_tit_rec_cobr_w IS NOT NULL AND nr_seq_tit_rec_cobr_w::text <> '') then -- Se for estorno pela prória baixa na manutenção de títulos a receber
				select	max(nr_sequencia)
				into STRICT	nr_seq_nota_credito_w
				from	nota_credito a
				where	a.nr_seq_tit_rec_cobr	= nr_seq_tit_rec_cobr_w
				and	a.ie_situacao		<> 'C';
			else
				select	max(nr_sequencia) -- Se for estorno pela cobranca escritural
				into STRICT	nr_seq_nota_credito_w
				from	nota_credito a
				where	a.nr_seq_tit_rec_cobr	= nr_seq_tit_rec_cobr_p
				and	a.ie_situacao		<> 'C';
			end if;

			-- Se não achou, procurar pelo título
			if (coalesce(nr_seq_nota_credito_w::text, '') = '') then
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_nota_credito_w
				from	nota_credito a,
					titulo_receber_liq b
				where	a.nr_titulo_receber	= nr_titulo_p
				and	a.nr_titulo_receber	= b.nr_titulo
				and	a.nr_seq_baixa_origem	= b.nr_sequencia
				and	b.nr_sequencia		= nr_seq_baixa_p
				and	a.ie_situacao		<> 'C';
			end if;


			if (nr_seq_nota_credito_w IS NOT NULL AND nr_seq_nota_credito_w::text <> '') then
				select	vl_saldo
				into STRICT	vl_saldo_nota_w
				from	nota_credito a
				where	a.nr_sequencia	= nr_seq_nota_credito_w;

				if (vl_saldo_nota_w <> 0) then
					insert into nota_credito_baixa(nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						nr_seq_nota_credito,
						dt_baixa,
						vl_baixa,
						ie_cancelamento)
					values (nextval('nota_credito_baixa_seq'),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nr_seq_nota_credito_w,
						coalesce(dt_baixa_p,dt_liquidacao_w),
						vl_saldo_nota_w,
						'S');

					CALL atualizar_saldo_nota_credito(nr_seq_nota_credito_w,nm_usuario_p);
				end if;
			end if;

			ie_apropriar_p	:= 'S';

		else
			vl_devolver_w	:= abs(vl_saldo_titulo_w - (vl_recebido_w + vl_descontos_w));

			select	count(*)
			into STRICT	qt_registro_w
			from	nota_credito a
			where	a.nr_seq_tit_rec_cobr	= nr_seq_tit_rec_cobr_p
			and	a.ie_situacao		<> 'C';

			if (vl_devolver_w > 0) and (qt_registro_w = 0) and (vl_saldo_titulo_w < vl_recebido_w) then
				-- Se o valor de cobrança é maior que o valor do título, foi cobrado juros e multa no próprio boleto, Daí tem que descontar
				vl_juros_data_w	:= 0;
				vl_multa_data_w := 0;

				if (ie_juros_multa_barras_bloq_w <> 'N') and (vl_cobranca_tit_w > vl_titulo_w) and
					((coalesce(vl_juros_w,0) = 0) and (coalesce(vl_multa_w,0) = 0)) then
					-- Pegar a data de alteracao do vencimento como data de referência
					select	coalesce(max(a.dt_alteracao),dt_pagamento_previsto_w)
					into STRICT	dt_alteracao_venc_w
					from	alteracao_vencimento a
					where	a.nr_titulo	= coalesce(nr_titulo_w,nr_titulo_p);

					select	a.vl_juros_boleto,
						a.vl_multa_boleto
					into STRICT	vl_juros_boleto_w,
						vl_multa_boleto_w
					from	titulo_receber a
					where	a.nr_titulo	= coalesce(nr_titulo_w,nr_titulo_p);

					-- Verificar primeiro no título
					if (vl_juros_boleto_w IS NOT NULL AND vl_juros_boleto_w::text <> '') or (vl_multa_boleto_w IS NOT NULL AND vl_multa_boleto_w::text <> '') then
						vl_juros_data_w	:= vl_juros_boleto_w;
						vl_multa_data_w	:= vl_multa_boleto_w;
					else
						vl_juros_data_w	:= obter_juros_multa_titulo(nr_titulo_w,dt_alteracao_venc_w,'R','J');
						vl_multa_data_w	:= obter_juros_multa_titulo(nr_titulo_w,dt_alteracao_venc_w,'R','M');

						if (vl_juros_data_w + vl_multa_data_w < vl_devolver_w) then
							vl_juros_data_w	:= obter_juros_multa_titulo(nr_titulo_w,dt_pagamento_previsto_w,'R','J');
							vl_multa_data_w	:= obter_juros_multa_titulo(nr_titulo_w,dt_pagamento_previsto_w,'R','M');
						end if;
					end if;

					if	((vl_juros_data_w + vl_multa_data_w) <= vl_devolver_w) then
						ie_apropriar_p	:= 'S';
						vl_devolver_w	:= (vl_devolver_w - vl_juros_data_w - vl_multa_data_w);
					end if;
				end if;

				if	(ie_juros_multa_mens_w = 'PF' AND cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					ie_juros_multa_mens_w := 'S';
				end if;

				if (ie_apropriar_p = 'N') and (ie_juros_multa_mens_w = 'S') and (coalesce(obter_juros_multa_titulo(nr_titulo_w,dt_pagamento_previsto_w,'R','J'),0) +
					coalesce(obter_juros_multa_titulo(nr_titulo_w,dt_pagamento_previsto_w,'R','M'),0) <= vl_devolver_w) then
					ie_apropriar_p	:= 'S';
				end if;

				select	max(b.nr_seq_pagador)
				into STRICT	nr_seq_pagador_w
				from	pls_mensalidade b,
					titulo_receber a
				where	a.nr_seq_mensalidade	= b.nr_sequencia
				and	a.nr_titulo		= coalesce(nr_titulo_w,nr_titulo_p);

				if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
					select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
					into STRICT	ie_rescisao_inadimplencia_w
					from	pls_contrato_pagador	b,
						pls_notificacao_pagador a
					where	a.nr_seq_pagador	= b.nr_sequencia
					and	b.nr_sequencia		= nr_seq_pagador_w
					and	(a.dt_rescisao IS NOT NULL AND a.dt_rescisao::text <> '');
				end if;

				nr_seq_nota_credito_w	:= null;

				select	coalesce(max(vl_rec_maior),0)
				into STRICT	vl_rec_maior_w
				from	titulo_receber_liq
				where	nr_titulo	= coalesce(nr_titulo_p,nr_titulo_w)
				and	nr_sequencia	= nr_seq_baixa_p;

				-- Caso a baixa do título for manual
				if (coalesce(vl_rec_maior_w,0) > 0) and (coalesce(vl_parametro_w,'N') = 'S') then
					vl_devolver_w := vl_rec_maior_w;
				end if;

				ie_param_w := Obter_Param_Usuario(813, 163, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_param_w);

				if (ie_param_w = 'N') and (vl_devolver_w <> 0) and
					((ie_rescisao_inadimplencia_w = 'N') or (coalesce(nr_seq_trans_inadimplencia_w::text, '') = '')) and
					((coalesce(vl_regra_ger_nc_w::text, '') = '') or (vl_devolver_w >= vl_regra_ger_nc_w)) and
					((ie_saldo_titulo_w = 'S') or (vl_saldo_titulo_w = 0)) and
					((coalesce(ie_situacao_tit_regra_w,'T') = 'T') or
					((coalesce(ie_situacao_tit_regra_w,'T') = 'LC') and (ie_situacao_tit_w in ('2','3')))) then
					-- Gerar nota de crédito
					if (ie_dt_nota_credito_w	= '1') then
						dt_nota_credito_w	:= coalesce(dt_credito_bancario_w,clock_timestamp());
					elsif (ie_dt_nota_credito_w	= '2') then
						dt_nota_credito_w	:= coalesce(dt_liquidacao_w,clock_timestamp());
					else
						dt_nota_credito_w	:= coalesce(dt_credito_bancario_w, dt_liquidacao_w);
					end if;

					select	nextval('nota_credito_seq')
					into STRICT	nr_seq_nota_credito_w
					;

					insert into nota_credito(nr_sequencia,
						cd_estabelecimento,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						vl_nota_credito,
						cd_pessoa_fisica,
						cd_cgc,
						dt_nota_credito,
						dt_vencimento,
						cd_moeda,
						tx_juros,
						tx_multa,
						cd_tipo_taxa_juro,
						cd_tipo_taxa_multa,
						ie_origem,
						vl_saldo,
						nr_lote_contabil,
						ds_observacao,
						ie_situacao,
						nr_seq_tit_rec_cobr,
						nr_seq_regra_pag_duplic,
						nr_seq_trans_fin_contab,
						nr_seq_trans_baixa_tit_pagar,
						nr_seq_conta_banco,
						nr_titulo_receber,
						nr_seq_baixa_origem,
						ie_situacao_tit_rec,
						nr_seq_motivo)
					values (nr_seq_nota_credito_w,
						cd_estabelecimento_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						vl_devolver_w,
						cd_pessoa_fisica_w,
						cd_cgc_w,
						coalesce(dt_nota_credito_w,clock_timestamp()),
						null,
						cd_moeda_cp_w,
						null,
						null,
						null,
						null,
						ie_origem_nota_w,
						vl_devolver_w,
						null,
						wheb_mensagem_pck.get_texto(305838),
						'A',
						nr_seq_tit_rec_cobr_p,
						nr_seq_regra_w,
						nr_seq_trans_contab_nota_w,
						nr_seq_trans_baixa_tit_pagar_w,
						nr_seq_conta_banco_w,
						coalesce(nr_titulo_w,nr_titulo_p),
						nr_seq_baixa_p,
						ie_situacao_tit_w,
						nr_seq_motivo_w);
				end if;

				-- Tratamento para observação da baixa do título - OS 451220
				if (ie_param_w = 'N') and (nr_seq_nota_credito_w IS NOT NULL AND nr_seq_nota_credito_w::text <> '') then
					ds_observacao_w := wheb_mensagem_pck.get_texto(305841,'nr_seq_nota_credito_w='||nr_seq_nota_credito_w);
				else
					ds_observacao_w := null;
				end if;

				if (coalesce(vl_rec_maior_w,0) = 0) then
					-- Antes excluia a baixa do título, agora só irá alterar o valor a maior
					if (ie_param_w = 'S') then
						select	coalesce(max(nr_seq_movto_trans_fin),0)
						into STRICT	nr_seq_movto_trans_fin_w
						from	titulo_receber_liq
						where	nr_titulo = coalesce(nr_titulo_w,nr_titulo_p);

						if (nr_seq_movto_trans_fin_w IS NOT NULL AND nr_seq_movto_trans_fin_w::text <> '') then
							update	titulo_receber_liq
							set	vl_recebido		= vl_recebido - (vl_devolver_w + vl_juros_data_w + vl_multa_data_w),
								vl_outros_acrescimos	= vl_devolver_w,
								vl_juros		= CASE WHEN vl_juros=0 THEN vl_juros_data_w  ELSE vl_juros END ,
								vl_multa		= CASE WHEN vl_multa=0 THEN vl_multa_data_w  ELSE vl_multa END ,
								ds_observacao		= ds_observacao_w
							where	nr_titulo		= nr_titulo_w
							and	nr_sequencia		= nr_seq_baixa_p;
						end if;
					else
						update	titulo_receber_liq
						set	vl_recebido	= vl_recebido - (vl_devolver_w + vl_juros_data_w + vl_multa_data_w),
							vl_rec_maior	= vl_devolver_w,
							vl_juros	= CASE WHEN vl_juros=0 THEN vl_juros_data_w  ELSE vl_juros END ,
							vl_multa	= CASE WHEN vl_multa=0 THEN vl_multa_data_w  ELSE vl_multa END ,
							ds_observacao	= ds_observacao_w
						where	nr_titulo	= nr_titulo_w
						and	nr_sequencia	= nr_seq_baixa_p;
					end if;
				else
					update	titulo_receber_liq
					set	ds_observacao	= ds_observacao_w
					where	nr_titulo	= nr_titulo_w
					and	nr_sequencia	= nr_seq_baixa_p;
				end if;

				if (ie_acao_p <> 'E') and (nr_seq_nota_credito_w IS NOT NULL AND nr_seq_nota_credito_w::text <> '') and (vl_saldo_titulo_w = 0) then
					select	coalesce(vl_rec_maior,0) + coalesce(vl_juros,0) + coalesce(vl_multa,0)
					into STRICT	vl_devolver_w
					from	titulo_receber_liq
					where	nr_titulo	= nr_titulo_w
					and	nr_sequencia	= nr_seq_baixa_p;

					update	nota_credito
					set	vl_nota_credito	= vl_devolver_w,
						vl_saldo	= vl_devolver_w
					where	nr_sequencia	= nr_seq_nota_credito_w;

					update	titulo_receber_liq
					set	vl_recebido	= 0,
						vl_rec_maior	= vl_devolver_w,
						vl_juros	= 0,
						vl_multa	= 0
					where	nr_titulo	= nr_titulo_w
					and	nr_sequencia	= nr_seq_baixa_p;
				end if;

				-- Tratar transações financeiras da baixa e da nota para rescisão de mensalidade e mensalidade cancelada
				CALL pls_tratar_canc_mens_rescisao(nr_titulo_w,nr_seq_baixa_p,nr_seq_tit_rec_cobr_p,
							nr_seq_nota_credito_w,cd_estabelecimento_w);

				if (ie_acao_w = 'NCM') and (nr_seq_nota_credito_w IS NOT NULL AND nr_seq_nota_credito_w::text <> '') then
					select	max(d.nr_seq_pagador)
					into STRICT	nr_seq_pagador_w
					from	pls_mensalidade d,
						titulo_receber c,
						titulo_receber_cobr b,
						nota_credito a
					where	a.nr_seq_tit_rec_cobr	= b.nr_sequencia
					and	b.nr_titulo		= c.nr_titulo
					and	c.nr_seq_mensalidade	= d.nr_sequencia
					and	a.nr_sequencia		= nr_seq_nota_credito_w;

					if (coalesce(nr_seq_pagador_w::text, '') = '') then
						select	max(d.nr_seq_pagador)
						into STRICT	nr_seq_pagador_w
						from	pls_mensalidade d,
							titulo_receber c,
							nota_credito a
						where	a.nr_titulo_receber	= c.nr_titulo
						and	c.nr_seq_mensalidade	= d.nr_sequencia
						and	a.nr_sequencia		= nr_seq_nota_credito_w;
					end if;

					if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
						update	nota_credito
						set	nr_seq_pagador_aprop	= nr_seq_pagador_w
						where	nr_sequencia		= nr_seq_nota_credito_w;
					end if;
				end if;
			else
				ie_apropriar_p	:= 'S';
			end if; -- Tem valor a devolver
		end if; -- Estorno
		-- Adicionada restrição para atualizar saldo titulo, caso não tenha que ser apropriado valores. Caso tenha que apropria, la é chamada a atualização de saldo -- OS 598582
		if (ie_apropriar_p = 'N') then
			CALL atualizar_saldo_tit_rec(nr_titulo_w,nm_usuario_p);
		end if;
	end if; -- Parâmetro
end if;
-- Não pode ter commit
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tratar_baixa_duplicidade_tit ( nr_seq_tit_rec_cobr_p bigint, nr_titulo_p bigint, nr_seq_baixa_p bigint, ie_acao_p text, dt_baixa_p timestamp, nm_usuario_p text, ie_apropriar_p INOUT text) FROM PUBLIC;

