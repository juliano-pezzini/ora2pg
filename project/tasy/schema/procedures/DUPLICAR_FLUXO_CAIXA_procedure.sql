-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duplicar_fluxo_caixa (CD_ESTABELECIMENTO_p bigint, DT_REFERENCIA_p timestamp, CD_CONTA_FINANC_p bigint, IE_CLASSIF_FLUXO_p text, IE_PERIODO_p text, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_empresa_p bigint) AS $body$
DECLARE


/*--------------------------------------------------------------- ATENCAO ----------------------------------------------------------------*/


/* Cuidado ao realizar alteracoes no fluxo de caixa. Toda e qualquer alteracao realizada em qualquer uma das      						  */


/* procedures do fluxo de caixa deve ser cuidadosamente verificada e realizada no fluxo de caixa em lote.           					  */


/* Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando assim que           					  */


/* existam diferencas entre os fluxos de caixa. Fluxo de caixa em lote parametro 43 = "L"                                                 */


/*----------------------------------- AO ALTERAR O FLUXO DE CAIXA ALTERAR TAMBEM O FLUXO DE CAIXA EM LOTE --------------------------------*/

dt_referencia_w		timestamp;
cd_moeda_empresa_w	integer;


BEGIN

dt_referencia_w		:= dt_inicial_p;

/* Projeto Multimoeda - Busca a moeda padrao da empresa para gravar no fluxo. */

select	obter_moeda_padrao_empresa(cd_estabelecimento_p,'E')
into STRICT	cd_moeda_empresa_w
;

while	pkg_date_utils.start_of(dt_referencia_w, 'MONTH',0) <= pkg_date_utils.start_of(dt_final_p, 'MONTH',0)
loop
	if (pkg_date_utils.start_of(dt_referencia_w, 'MONTH',0) <> pkg_date_utils.start_of(dt_referencia_p, 'MONTH',0)) then
		begin
		insert into fluxo_caixa(CD_ESTABELECIMENTO,
			DT_REFERENCIA,
			CD_CONTA_FINANC,
			IE_CLASSIF_FLUXO,
			DT_ATUALIZACAO,
			NM_USUARIO,
			VL_FLUXO,
			IE_ORIGEM,
			IE_PERIODO,
			IE_INTEGRACAO,
			DS_OBSERVACAO,
			cd_empresa,
			cd_moeda)
		SELECT	CD_ESTABELECIMENTO_p,
			dt_referencia_w,
			CD_CONTA_FINANC_p,
			IE_CLASSIF_FLUXO_p,
			clock_timestamp(),
			nm_usuario_p,
			vl_fluxo,
			ie_origem,
			ie_periodo_p,
			ie_integracao,
			DS_OBSERVACAO,
			cd_empresa,
			coalesce(cd_moeda,cd_moeda_empresa_w)
		from	fluxo_caixa
		where	coalesce(CD_ESTABELECIMENTO, 0)	= coalesce(CD_ESTABELECIMENTO_p, coalesce(CD_ESTABELECIMENTO, 0))
		and	DT_REFERENCIA		= DT_REFERENCIA_p
		and	CD_CONTA_FINANC	= CD_CONTA_FINANC_p
		and	IE_CLASSIF_FLUXO	= IE_CLASSIF_FLUXO_p
		and	IE_PERIODO		= IE_PERIODO_p
		and	cd_empresa		= cd_empresa_p;
		exception when unique_violation then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(991947);
		end;

	end if;

	dt_referencia_w		:= pkg_date_utils.add_month(dt_referencia_w, 1,0);

end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duplicar_fluxo_caixa (CD_ESTABELECIMENTO_p bigint, DT_REFERENCIA_p timestamp, CD_CONTA_FINANC_p bigint, IE_CLASSIF_FLUXO_p text, IE_PERIODO_p text, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_empresa_p bigint) FROM PUBLIC;

