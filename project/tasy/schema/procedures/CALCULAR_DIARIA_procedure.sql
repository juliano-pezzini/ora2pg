-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_diaria (nm_usuario_p text, dt_parametro_p timestamp) AS $body$
DECLARE

nr_atendimento_w				bigint;
cd_estabelecimento_w			smallint;
dt_entrada_w				timestamp;
ie_tipo_convenio_w			smallint;
ie_tipo_atendimento_w			smallint;
cd_proc_longa_perm_w			bigint;
qt_dia_longa_perm_w			smallint;

qt_perm_sus_calc_w			smallint;
qt_perm_real_calc_w			smallint;
qt_longa_perm_calc_w			smallint;
nr_aih_calc_w				bigint;
qt_dispensa_w				bigint;

qt_dispensa_periodo_w			bigint;
cd_convenio_atend_w			integer;
hr_inicio_w				timestamp;
hr_final_w				timestamp;
ie_dispensa_diaria_w			varchar(1):='N';
qt_disp_w				bigint;
qt_regra_evento_w			bigint;

c00 CURSOR FOR 
   SELECT 	e.nr_atendimento, 
   	   	e.dt_entrada, 
		e.cd_estabelecimento, 
		coalesce(e.ie_tipo_convenio,0), 
		e.ie_tipo_atendimento 
	from 	atendimento_paciente e 
    where 	e.dt_entrada  		<= dt_parametro_p 
     and 	coalesce(e.dt_fim_conta::text, '') = '' 
	 and 	coalesce(e.dt_cancelamento::text, '') = '' 
	 and 	coalesce(e.dt_alta,to_date('2999','yyyy')) > dt_parametro_p 
	 AND 	e.dt_alta_interno BETWEEN dt_parametro_p AND TO_DATE('30/12/2999 23:59:59','dd/mm/yyyy hh24:mi:ss');

C01 CURSOR FOR 
	SELECT	hr_inicio, 
		hr_final 
	from	dispensa_diaria_periodo 
	where	ie_situacao = 'A' 
	and 	coalesce(cd_convenio, coalesce(cd_convenio_atend_w,0)) = coalesce(cd_convenio_atend_w,0) 
	and 	coalesce(cd_estabelecimento, cd_estabelecimento_w) = cd_estabelecimento_w 
	order by coalesce(cd_convenio,0), 
		coalesce(cd_estabelecimento,0);


BEGIN 
 
/* Calculo de diarias */
 
OPEN C00;
LOOP 
  	FETCH C00 into 
     	nr_atendimento_w, 
		dt_entrada_w, 
		cd_estabelecimento_w, 
		ie_tipo_convenio_w, 
		ie_tipo_atendimento_w;
  	EXIT WHEN NOT FOUND; /* apply on c00 */
	BEGIN 
 
	-- Evento Geração diária de itens por atendimento 
	-- Retirado esse tratamento e criado a JOB GERACAO_DIARIA_ITENS_ATEND_J. OS 658750 
	/*select	count(*) 
	into	qt_regra_evento_w 
	from 	regra_lanc_automatico 
	where 	nr_seq_evento = 544 
	and 	ie_situacao = 'A'; 
 
	if	(qt_regra_evento_w > 0) then 
		Gerar_lancamento_automatico(nr_atendimento_w, null, 544, nm_usuario_p, null, null,null,null,null,null); 
	end if;*/
 
	ie_dispensa_diaria_w:= 'N';
 
	select 	count(*) 
	into STRICT	qt_dispensa_periodo_w 
	from 	dispensa_diaria_periodo 
	where 	ie_situacao = 'A';
 
	if (qt_dispensa_periodo_w > 0) then 
 
		select 	obter_convenio_atendimento(nr_atendimento_w) 
		into STRICT	cd_convenio_atend_w 
		;
 
		open C01;
		loop 
		fetch C01 into 
			hr_inicio_w, 
			hr_final_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			hr_inicio_w	:= hr_inicio_w;
			hr_final_w	:= hr_final_w;
			end;
		end loop;
		close C01;
 
		select 	count(*) 
		into STRICT	qt_disp_w 
		 
		where 	dt_parametro_p between to_date((to_char(dt_parametro_p, 'dd/mm/yyyy') || to_char(hr_inicio_w, 'hh24:mi:ss')), 'dd/mm/yyyy hh24:mi:ss') and 
						to_date((to_char(dt_parametro_p, 'dd/mm/yyyy') || to_char(hr_final_w, 'hh24:mi:ss')), 'dd/mm/yyyy hh24:mi:ss');
 
		if (qt_disp_w > 0) then 
			ie_dispensa_diaria_w:= 'S';
		end if;
 
	end if;
 
	select	count(*) 
	into STRICT	qt_dispensa_w 
	from	DISPENSA_COB_DIARIA 
	where	nr_atendimento		= nr_atendimento_w 
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') 
	and	dt_parametro_p between dt_inicio and dt_fim;
 
	if (qt_dispensa_w 	= 0) and (ie_dispensa_diaria_w = 'N') then 
		begin 
 
		if (ie_tipo_convenio_w	<> 3) and (ie_tipo_convenio_w	<> 10) then 
			begin 
			CALL CALCULAR_DIARIA_ATENDIMENTO(cd_estabelecimento_w, 
					nr_atendimento_w, 
					dt_entrada_w, 
					dt_parametro_p, 
					nm_usuario_p,'S','S','D');
			end;
		else 
			begin 
			CALL Gerar_lancamento_automatico( 
				nr_atendimento_w, 
				null, 
				39, 
				nm_usuario_p, 
				null, null,null,dt_parametro_p,null,null);
			/*Adicionada a data para poder verificar os acompanhantes, 
			sem esta informação não é possível verificar se tem acompanhante 
			momento da execução da JOB */
 
			end;
		end if;
 
		if (ie_tipo_convenio_w	in (3,10)) 	and (ie_tipo_atendimento_w	= 1) 	then 
			begin 
			qt_dia_longa_perm_w := 0;
			SELECT * FROM calcular_longa_permanencia(	nr_atendimento_w, 0, cd_proc_longa_perm_w, qt_perm_sus_calc_w, qt_perm_real_calc_w, qt_longa_perm_calc_w, nr_aih_calc_w) INTO STRICT cd_proc_longa_perm_w, qt_perm_sus_calc_w, qt_perm_real_calc_w, qt_longa_perm_calc_w, nr_aih_calc_w;
			if (cd_proc_longa_perm_w IS NOT NULL AND cd_proc_longa_perm_w::text <> '')	then 
				qt_dia_longa_perm_w	:= substr(cd_proc_longa_perm_w,6,2);
			end if;
 
			update	atendimento_paciente 
			set		qt_dia_longa_perm	= qt_dia_longa_perm_w 
			where		nr_atendimento	= nr_atendimento_w;
			exception 
					when others then 
					qt_dia_longa_perm_w := 0;
 
			end;
		end if;
		end;
	end if;
 
	CALL GERACAO_DIARIA_ITENS_CONTA(nr_atendimento_w);
	 
	END;
END LOOP;
CLOSE C00;
 
commit;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_diaria (nm_usuario_p text, dt_parametro_p timestamp) FROM PUBLIC;

