-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_get_regular_rule ( dt_reference_p timestamp, cd_estabelecimento_p bigint, cd_setor_atendimento_p bigint, ie_via_aplicacao_p text, nr_seq_order_unit_p bigint, nr_seq_cpoe_rp_p bigint, dt_start_p INOUT timestamp, dt_end_p INOUT timestamp, dt_deadline_p INOUT timestamp) AS $body$
DECLARE


dt_start_w					timestamp	:= null;
dt_end_w					timestamp	:= null;
dt_deadline_w				timestamp	:= null;

nr_seq_rule_normal_w		cpoe_week_dispens_rule.nr_sequencia%type;
dt_start_calc_normal_w		timestamp	:= null;
dt_end_calc_normal_w		timestamp	:= null;
dt_deadline_calc_normal_w	timestamp	:= null;

nr_seq_rule_specific_w		cpoe_week_dispens_rule.nr_sequencia%type;
dt_start_calc_specific_w	timestamp	:= null;
dt_end_calc_specific_w		timestamp	:= null;
dt_deadline_calc_specific_w	timestamp	:= null;

qt_days_to_deadline_w		smallint;
qt_days_to_dispensation_w	smallint;
ie_via_aplicacao_w			varchar(5) := null;
cd_setor_atendimento_w		integer;
dt_current_date_w			timestamp;
current_weekday_w			smallint;
dt_calc_w					timestamp;
is_specific_rule_found_w    varchar(1) := 'N';
is_specific_with_deadline_w varchar(1) := 'N';
dt_ref_specific_w       timestamp    := null;

c01 CURSOR FOR
SELECT	nr_sequencia,
    si_dispensation_day,
    hr_dispensation_time,
    coalesce(si_action,'1') si_action,
    coalesce(qt_dispensation_days, 0) qt_dispensation_days,
    si_limit_day,
    dt_fixed_start,
    dt_fixed_end,
    dt_fixed_limit,
    hr_limit_time,
    ie_via_aplicacao,
    cd_setor_atendimento
from	cpoe_week_dispens_rule	
where si_action = '2'
and (cd_setor_atendimento = coalesce(cd_setor_atendimento_w,cd_setor_atendimento) or coalesce(cd_setor_atendimento::text, '') = '')
and (ie_via_aplicacao = coalesce(ie_via_aplicacao_w, ie_via_aplicacao) or coalesce(ie_via_aplicacao::text, '') = '')

union all

select	null nr_sequencia,
    null si_dispensation_day,
    null hr_dispensation_time,
    null si_action,
    null qt_dispensation_days,
    null si_limit_day,
    null dt_fixed_start,
    null dt_fixed_end,
    null dt_fixed_limit,
    null hr_limit_time,
    null ie_via_aplicacao,
    null cd_setor_atendimento

where	not exists (select	1
          from	cpoe_week_dispens_rule	
          where si_action = '2'
          and (cd_setor_atendimento = coalesce(cd_setor_atendimento_w,cd_setor_atendimento) or coalesce(cd_setor_atendimento::text, '') = '')
          and (ie_via_aplicacao = coalesce(ie_via_aplicacao_w, ie_via_aplicacao) or coalesce(ie_via_aplicacao::text, '') = '')
          )
order by cd_setor_atendimento, ie_via_aplicacao;

c02 CURSOR(dt_reference_pc timestamp,
      dt_prior_deadline_pc	timestamp) FOR
SELECT	nr_sequencia,
    si_dispensation_day,
    hr_dispensation_time,
    coalesce(si_action,'1') si_action,
    coalesce(qt_dispensation_days, 0) qt_dispensation_days,
    si_limit_day,
    dt_fixed_start,
    dt_fixed_end,
    dt_fixed_limit
from	cpoe_week_dispens_rule	
where si_action = '3'
and (cd_setor_atendimento = coalesce(cd_setor_atendimento_w,cd_setor_atendimento) or coalesce(cd_setor_atendimento::text, '') = '')
and (ie_via_aplicacao = coalesce(ie_via_aplicacao_w, ie_via_aplicacao) or coalesce(ie_via_aplicacao::text, '') = '')
and ((dt_reference_pc between dt_fixed_start and dt_fixed_end) or (dt_prior_deadline_pc between dt_fixed_limit and dt_fixed_end))
order by cd_setor_atendimento, ie_via_aplicacao, dt_fixed_start;
BEGIN
dt_current_date_w := clock_timestamp();

if (nr_seq_cpoe_rp_p IS NOT NULL AND nr_seq_cpoe_rp_p::text <> '') then
  begin
  select 	a.ie_via_aplicacao,
      obter_setor_atendimento(b.nr_atendimento)
  into STRICT 	ie_via_aplicacao_w,
      cd_setor_atendimento_w
  from 	cpoe_order_unit b,
      cpoe_rp a
  where 	b.nr_sequencia = a.nr_seq_cpoe_order_unit
  and		a.nr_seq_cpoe_order_unit = nr_seq_order_unit_p
  and 	a.nr_sequencia = nr_seq_cpoe_rp_p;
  exception
    when others then
    begin
    ie_via_aplicacao_w := null;
    cd_setor_atendimento_w	:= null;
    end;
  end;
else
  ie_via_aplicacao_w		:= ie_via_aplicacao_p;
  cd_setor_atendimento_w	:= cd_setor_atendimento_p;
end if;

if (dt_reference_p IS NOT NULL AND dt_reference_p::text <> '') and (cd_setor_atendimento_w IS NOT NULL AND cd_setor_atendimento_w::text <> '') then
  for r_c01 in c01 loop
    -- Search on normal rule
    nr_seq_rule_normal_w	:= r_c01.nr_sequencia;

    -- Calculate the start date of rule
    dt_start_calc_normal_w	:= trunc(dt_reference_p,'dd');
    current_weekday_w	:= to_char(dt_start_calc_normal_w,'d');

    while(current_weekday_w <> r_c01.si_dispensation_day) and (dt_start_calc_normal_w > trunc(dt_reference_p,'dd') - r_c01.qt_dispensation_days) loop

      dt_start_calc_normal_w	:= dt_start_calc_normal_w - 1;
      current_weekday_w	:= to_char(dt_start_calc_normal_w,'d');
    end loop;
    -- Add time to the date
    dt_start_calc_normal_w	:= pkg_date_utils.get_DateTime(dt_start_calc_normal_w, pkg_date_utils.get_Time(
                            coalesce(pkg_date_utils.extract_field('HOUR', r_c01.hr_dispensation_time, 0), 0),
                            coalesce(pkg_date_utils.extract_field('MINUTE', r_c01.hr_dispensation_time, 0), 0)));

    -- Calculate the end date of rule
    dt_end_calc_normal_w	:= trunc(dt_start_calc_normal_w + r_c01.qt_dispensation_days, 'mi') - 1/(24*60);

    -- Calculate the current deadline
    dt_deadline_calc_normal_w	:= trunc(dt_reference_p,'dd');
    current_weekday_w	:= to_char(dt_deadline_calc_normal_w,'d');

    while ((current_weekday_w <> r_c01.si_limit_day) or (current_weekday_w = r_c01.si_limit_day and dt_deadline_calc_normal_w between dt_start_calc_normal_w and dt_end_calc_normal_w)) and
      (dt_deadline_calc_normal_w > trunc(dt_reference_p,'dd') - (r_c01.qt_dispensation_days * 2)) loop

      dt_deadline_calc_normal_w	:= dt_deadline_calc_normal_w - 1;
      current_weekday_w	:= to_char(dt_deadline_calc_normal_w,'d');
    end loop;
    --Add time to the date
    dt_deadline_calc_normal_w := pkg_date_utils.get_DateTime(dt_deadline_calc_normal_w, pkg_date_utils.get_Time(
                              coalesce(pkg_date_utils.extract_field('HOUR', r_c01.hr_limit_time, 0), 0),
                              coalesce(pkg_date_utils.extract_field('MINUTE', r_c01.hr_limit_time, 0), 0)));

    -- Search for specific rule on period
    for r_c02 in c02(dt_reference_p,dt_end_calc_normal_w) loop
      nr_seq_rule_specific_w			:= r_c02.nr_sequencia;
      dt_start_calc_specific_w		:= r_c02.dt_fixed_start;
      dt_end_calc_specific_w			:= r_c02.dt_fixed_end;
      dt_deadline_calc_specific_w		:= r_c02.dt_fixed_limit;
      exit;
    end loop;

    -- If specific rule found, necessary to check the deadline
    if (nr_seq_rule_specific_w IS NOT NULL AND nr_seq_rule_specific_w::text <> '') then
      -- When there is a next specific rule before normal, should assume the end date before starting the specific
      if (dt_end_calc_normal_w  between dt_deadline_calc_specific_w and dt_end_calc_specific_w) and (dt_current_date_w < dt_deadline_calc_normal_w) and (dt_reference_p < dt_start_calc_specific_w) then


        dt_start_w	:= dt_start_calc_normal_w;
        dt_end_w	:= trunc(dt_start_calc_specific_w,'mi') - 1/(24*60);
        dt_deadline_w	:= dt_deadline_calc_normal_w;

      -- When fits on next specific rule should consider this one
      elsif	((dt_reference_p between dt_start_calc_specific_w and dt_end_calc_specific_w) or (dt_end_calc_normal_w  between dt_deadline_calc_specific_w and dt_end_calc_specific_w)) and (dt_current_date_w < dt_deadline_calc_specific_w) then


        dt_start_w	:= dt_start_calc_specific_w;
        dt_end_w	:= dt_end_calc_specific_w;
        dt_deadline_w	:= dt_deadline_calc_specific_w;

      end if;
    end if;
    -- Otherwise use always the normal rule
    if (coalesce(dt_start_w::text, '') = '') then
      --Check if deadline breached, then next period
      if (dt_current_date_w > dt_deadline_calc_normal_w) or (dt_current_date_w > dt_deadline_calc_specific_w) then

        dt_start_calc_normal_w		:= dt_start_calc_normal_w + r_c01.qt_dispensation_days;
        dt_end_calc_normal_w		:= dt_end_calc_normal_w + r_c01.qt_dispensation_days;
        dt_deadline_calc_normal_w	:= dt_deadline_calc_normal_w + r_c01.qt_dispensation_days;

      end if;
      -- Otherwise normal next dispensation
      dt_start_w	:= dt_start_calc_normal_w;
      dt_end_w	:= dt_end_calc_normal_w;
      dt_deadline_w	:= dt_deadline_calc_normal_w;

    end if;

    if ((dt_start_w IS NOT NULL AND dt_start_w::text <> '') and (dt_end_w IS NOT NULL AND dt_end_w::text <> '') and (dt_deadline_w IS NOT NULL AND dt_deadline_w::text <> '')) then		
      exit;
    end if;
  end loop;
end if;

if (coalesce(nr_seq_rule_specific_w::text, '') = '' and coalesce(nr_seq_rule_normal_w::text, '') = '') then
	dt_start_p 	:= null;
	dt_end_p		:= null;
	dt_deadline_p	:= null;
else
	dt_start_p 	:= dt_start_w;
	dt_end_p		:= dt_end_w;
	dt_deadline_p	:= dt_deadline_w;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_get_regular_rule ( dt_reference_p timestamp, cd_estabelecimento_p bigint, cd_setor_atendimento_p bigint, ie_via_aplicacao_p text, nr_seq_order_unit_p bigint, nr_seq_cpoe_rp_p bigint, dt_start_p INOUT timestamp, dt_end_p INOUT timestamp, dt_deadline_p INOUT timestamp) FROM PUBLIC;

