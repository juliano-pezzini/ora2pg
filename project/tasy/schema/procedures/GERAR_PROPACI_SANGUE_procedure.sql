-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_propaci_sangue (nr_sequencia_p bigint, ie_res_trans_p bigint,   --2
 nm_usuario_p text, cd_setor_atendimento_p bigint, dt_vigencia_p timestamp) AS $body$
DECLARE


nr_seq_prod_w			bigint := NULL;
cd_proced_w			bigint := NULL;
ie_origem_proced_w		smallint := NULL;
nr_seq_derivado_w		bigint := NULL;
qt_proced_w			integer := NULL;
cd_proced_ant_w			bigint := 0;
ie_origem_ant_w			smallint;
cd_estabelecimento_w		integer;
ie_tipo_atendimento_w		integer;
nr_seq_lote_w			bigint := NULL;
nr_seq_exame_w			bigint := NULL;
nr_atend_w			bigint := NULL;
nr_prescr_w			bigint := NULL;
dt_prescr_w			timestamp;
dt_term_util_w			timestamp;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
ie_tipo_convenio_w		smallint;
dt_ent_unidade_w		timestamp;
nr_seq_atepacu_w		bigint;
nr_seq_prescr_w			integer;
nr_sequencia_w			bigint;
ds_erro_w			varchar(2000) := '';
cd_cgc_prestador_w		varchar(14);
cd_cgc_consisitdo_w		varchar(14);
ie_medico_executor_w		varchar(30);
cd_medico_regra_w		varchar(10);
cd_setor_atend_w		integer;
cd_medico_requisitante_w	varchar(10);
cd_especialidade_med_w		varchar(10);
nr_seq_reserva_w		bigint;
nr_seq_proc_interno_w		bigint;
cd_local_estoque_w		smallint;
ie_finalizar_trans_conta_w	varchar(1);
ie_gerar_conta_res_nao_util_w	varchar(1);
ie_regra_uso_w			varchar(1);
qt_excedida_w			integer	:= 0;
cd_profissional_w		varchar(10);
dt_passagem_w			timestamp;
qt_proced_exame_w		bigint;
ie_irradiado_w			varchar(1);
ie_lavado_w			varchar(1);
ie_filtrado_w			varchar(1);
ie_aliquotado_w			varchar(1);
cd_setor_atendimento_w		integer;
cd_setor_atend_regra_w		integer;
nr_seq_regra_setor_w		bigint;
cd_setor_exame_w		bigint;
ie_gerar_bolsa_nao_util_w	varchar(1);
nr_seq_classificacao_w		bigint;
ie_irradiado_derivado_w		varchar(1);
ie_lavado_derivado_w		varchar(1);
ie_filtrado_derivado_w		varchar(1);
ie_aliquotado_derivado_w	varchar(1);
ie_aferese_derivado_w		varchar(1);
ie_data_procedimento_conta_w	varchar(1);
nr_seq_proc_interno_regra_w	bigint;
NR_SEQ_PROC_INTERNO_ANT_W	bigint;
ds_parametro_w			varchar(10) := Obter_Valor_Param_Usuario(450,348,Obter_Perfil_Ativo,Wheb_Usuario_Pck.get_nm_usuario,Wheb_Usuario_Pck.get_cd_estabelecimento);
ie_medico_executor_trans_w	varchar(1)  := Obter_Valor_Param_Usuario(450,398,Obter_Perfil_Ativo,Wheb_Usuario_Pck.get_nm_usuario,Wheb_Usuario_Pck.get_cd_estabelecimento);
ie_excluir_procedimentos_w	varchar(1)  := Obter_Valor_Param_Usuario(450,432,Obter_Perfil_Ativo,nm_usuario_p,Wheb_Usuario_Pck.get_cd_estabelecimento);
qt_exames_conta_w		integer;
cd_pessoa_fisica_w		varchar(10);
ie_via_acesso_w			varchar(1);
ie_pool_w			varchar(1);
nr_seq_propaci_w		bigint;
nr_seq_propaci_la_w		bigint;
ie_gerar_itens_solic_w		varchar(1);
ie_item_solic_w			varchar(1);
qt_procedimentos_w		san_reserva_item.qt_solicitada%type;
dt_reserv_transf_w		timestamp;

c001 CURSOR FOR
SELECT	a.nr_sequencia nr_seq_item,
	b.cd_procedimento,
	b.ie_origem_proced,
	b.nr_sequencia,
	b.nr_seq_proc_interno,
	a.ie_irradiado,
	a.ie_lavado,
	a.ie_filtrado,
	a.ie_aliquotado,
	a.ie_aferese,
	a.dt_termino_util,
	a.ie_pool,
	'N' ie_item_solic,
	1 qt_solicitada
FROM	SAN_DERIVADO b,
	SAN_PRODUCAO a
WHERE	a.nr_seq_derivado = b.nr_sequencia
AND	coalesce(a.nr_seq_propaci::text, '') = ''
AND    (((ie_res_trans_p = 2) AND (coalesce(b.ie_conta_transfusao,'S') = 'S')) OR
       ((ie_res_trans_p = 1) AND (coalesce(b.ie_conta_reserva,'S') = 'S')))
AND	(((ie_res_trans_p = 2) AND ((nr_seq_transfusao = nr_sequencia_p) OR (a.nr_sequencia IN (SELECT nr_seq_producao
							FROM SAN_RESERVA_PROD X
							WHERE X.nr_seq_reserva = nr_seq_reserva_w
							  AND X.ie_status = 'N'
							  AND ie_gerar_bolsa_nao_util_w = 'S'
							 AND (ie_tipo_convenio_w = 3))))) OR
	 ((ie_res_trans_p = 1) AND (a.nr_sequencia IN (	SELECT nr_seq_producao
							FROM SAN_RESERVA_PROD X
							WHERE X.nr_seq_reserva = nr_sequencia_p
							  AND (X.ie_status = 'R'
							      OR (X.ie_status = 'N' AND ie_tipo_convenio_w = 3 AND ie_gerar_bolsa_nao_util_w = 'S'))))))

UNION ALL

SELECT	a.nr_seq_item,
	b.cd_procedimento,
	b.ie_origem_proced,
	b.nr_sequencia,
	b.nr_seq_proc_interno,
	a.ie_irradiado,
	a.ie_lavado,
	a.ie_filtrado,
	a.ie_aliquotado,
	NULL,
	NULL,
	NULL,
	'S' ie_item_solic,
	a.qt_solicitada qt_solicitada
FROM	SAN_DERIVADO b,
	SAN_RESERVA_ITEM a
WHERE	a.nr_seq_derivado = b.nr_sequencia
AND	ie_res_trans_p = 1
AND		coalesce(a.nr_seq_propaci::text, '') = ''
AND 	coalesce(b.ie_conta_reserva,'S') = 'S'
AND	ie_gerar_itens_solic_w = 'S'
AND	a.nr_seq_reserva = nr_sequencia_p
ORDER 	BY cd_procedimento,
	ie_origem_proced,
  nr_seq_proc_interno,
	nr_sequencia;

c002 CURSOR FOR
SELECT	nr_seq_exame_lote,
	nr_seq_exame,
	cd_procedimento,
	ie_origem_proced,
	nr_seq_derivado,
	nr_seq_proc_interno,
	qt_procedimento,
	nr_seq_producao,
	cd_setor_atendimento,
	dt_termino_util
FROM	(SELECT	C.nr_seq_exame_lote,
		C.nr_seq_exame,
		d.cd_procedimento,
		d.ie_origem_proced,
		0 nr_seq_derivado,
		d.nr_seq_proc_interno,
		coalesce(C.qt_execucao,coalesce(d.qt_procedimento,1)) qt_procedimento,
		b.nr_seq_producao,
		C.cd_setor_atendimento,
		NULL dt_termino_util
	FROM	SAN_EXAME d,
		SAN_EXAME_REALIZADO C,
		SAN_EXAME_LOTE b
	WHERE	CASE WHEN ie_res_trans_p=1 THEN b.nr_seq_reserva  ELSE b.nr_seq_transfusao END  = nr_sequencia_p
	AND		coalesce(C.nr_seq_propaci::text, '') = ''
	AND	coalesce(d.ie_situacao,'A')	= 'A'
	AND     CASE WHEN ie_res_trans_p=1 THEN coalesce(d.ie_conta_reserva,'S')  ELSE coalesce(d.ie_conta_transfusao,'S') END  = 'S'
	AND	b.nr_sequencia		= C.nr_seq_exame_lote
	AND	C.nr_seq_exame		= d.nr_sequencia
	--and	d.cd_procedimento is not null elemar 17/01/2005
	AND	(((C.vl_resultado IS NOT NULL AND C.vl_resultado::text <> '') OR (C.ds_resultado IS NOT NULL AND C.ds_resultado::text <> '')) OR (coalesce(d.ie_conta_sem_result,'N') = 'S'))
	AND	((coalesce(d.ie_gerar_conta_amostra,'N') = 'N')
	OR 	EXISTS (SELECT	1
			FROM	SAN_RESERVA r
			WHERE	r.nr_sequencia = b.nr_seq_reserva
			AND	SUBSTR(San_Obter_Se_Amostra_Conta(r.cd_pessoa_fisica),1,1) = 'S'))
	
UNION ALL

	SELECT	C.nr_seq_exame_lote,
		C.nr_seq_exame,
		d.cd_procedimento,
		d.ie_origem_proced,
		a.nr_seq_derivado,
		d.nr_seq_proc_interno,
		coalesce(C.qt_execucao,coalesce(d.qt_procedimento,1)) qt_procedimento,
		a.nr_sequencia nr_seq_producao,
		C.cd_setor_atendimento,
		a.dt_termino_util
	FROM 	SAN_EXAME d,
	     	SAN_EXAME_REALIZADO C,
	     	SAN_EXAME_LOTE b,
	     	SAN_PRODUCAO a
	WHERE 	ie_res_trans_p		= 2
	AND	coalesce(d.ie_situacao,'A')	= 'A'
	AND	coalesce(C.nr_seq_propaci::text, '') = ''
	AND	a.nr_seq_transfusao	= nr_sequencia_p
	AND	a.nr_sequencia		= b.nr_seq_producao
	AND     coalesce(d.ie_conta_transfusao,'S')   = 'S'
	AND	b.nr_sequencia		= C.nr_seq_exame_lote
	AND	C.nr_seq_exame		= d.nr_sequencia
	--and	d.cd_procedimento is not null elemar 17/01/2005
	AND	(((C.vl_resultado IS NOT NULL AND C.vl_resultado::text <> '') OR (C.ds_resultado IS NOT NULL AND C.ds_resultado::text <> '')) OR (coalesce(d.ie_conta_sem_result,'N') = 'S'))
	AND	((coalesce(d.ie_gerar_conta_amostra,'N') = 'N')
	OR 	EXISTS (SELECT	1
			FROM	SAN_RESERVA r
			WHERE	r.nr_sequencia = b.nr_seq_reserva
			AND	SUBSTR(San_Obter_Se_Amostra_Conta(r.cd_pessoa_fisica),1,1) = 'S'))
	
UNION ALL

	SELECT	C.nr_seq_exame_lote,
		C.nr_seq_exame,
		d.cd_procedimento,
		d.ie_origem_proced,
		0,
		d.nr_seq_proc_interno,
		coalesce(C.qt_execucao,coalesce(d.qt_procedimento,1)) qt_procedimento,
		a.nr_sequencia nr_seq_producao,
		C.cd_setor_atendimento,
		a.dt_termino_util
	FROM 	SAN_EXAME d,
	     	SAN_EXAME_REALIZADO C,
	     	SAN_EXAME_LOTE b,
	     	SAN_PRODUCAO a
	WHERE	ie_res_trans_p		= 2
	AND     coalesce(d.ie_conta_transfusao,'S')   = 'S'
	AND		coalesce(C.nr_seq_propaci::text, '') = ''
	AND	a.nr_seq_transfusao	= nr_sequencia_p
	AND	coalesce(d.ie_situacao,'A')	= 'A'
	AND	a.nr_seq_doacao		= b.nr_seq_doacao
	AND	b.nr_sequencia		= C.nr_seq_exame_lote
	AND	C.nr_seq_exame		= d.nr_sequencia
	/*  and 	d.cd_procedimento is not null elemar 17/01/2005 */

	AND	(((C.vl_resultado IS NOT NULL AND C.vl_resultado::text <> '') OR (C.ds_resultado IS NOT NULL AND C.ds_resultado::text <> '')) OR (coalesce(d.ie_conta_sem_result,'N') = 'S'))
	AND	((coalesce(d.ie_gerar_conta_amostra,'N') = 'N')
	OR 	EXISTS (SELECT	1
			FROM	SAN_RESERVA r
			WHERE	r.nr_sequencia = b.nr_seq_reserva
			AND	SUBSTR(San_Obter_Se_Amostra_Conta(r.cd_pessoa_fisica),1,1) = 'S'))
	
UNION ALL

	SELECT	DISTINCT
		C.nr_seq_exame_lote,
		C.nr_seq_exame,
		d.cd_procedimento,
		d.ie_origem_proced,
		f.nr_seq_derivado nr_seq_derivado,
		d.nr_seq_proc_interno,
		coalesce(C.qt_execucao,coalesce(d.qt_procedimento,1)) qt_procedimento,
		f.nr_sequencia nr_seq_producao,
		C.cd_setor_atendimento,
		f.dt_termino_util
	FROM	SAN_RESERVA_PROD a,
		SAN_EXAME d,
		SAN_EXAME_REALIZADO C,
		SAN_EXAME_LOTE b,
		SAN_PRODUCAO f
	WHERE	b.nr_sequencia = C.nr_seq_exame_lote
	AND	coalesce(d.ie_situacao,'A') = 'A'
	AND	coalesce(C.nr_seq_propaci::text, '') = ''
	AND	C.nr_seq_exame = d.nr_sequencia
	AND	(((C.vl_resultado IS NOT NULL AND C.vl_resultado::text <> '') OR (C.ds_resultado IS NOT NULL AND C.ds_resultado::text <> '')) OR (coalesce(d.ie_conta_sem_result,'N') = 'S'))
	AND	coalesce(b.nr_seq_reserva::text, '') = ''
	AND	((ie_gerar_conta_res_nao_util_w = 'S'
	AND	a.ie_status = 'N'
	AND	coalesce(d.ie_gerar_bolsa_nao_util,'S') = 'S') or coalesce(d.ie_gerar_bolsa_nao_util,'S') = 'A')
	AND	a.nr_seq_reserva = nr_seq_reserva_w
	AND	f.nr_sequencia = a.nr_seq_producao
	AND     CASE WHEN ie_res_trans_p=1 THEN coalesce(d.ie_conta_reserva,'S')  ELSE coalesce(d.ie_conta_transfusao,'S') END  = 'S'
	AND	((coalesce(f.nr_seq_transfusao::text, '') = '') OR (f.nr_seq_transfusao <> nr_sequencia_p AND ie_res_trans_p = 2))
	AND	((coalesce(d.ie_gerar_conta_amostra,'N') = 'N')
	OR 	EXISTS (SELECT	1
			FROM	SAN_RESERVA r
			WHERE	r.nr_sequencia = b.nr_seq_reserva
			AND	SUBSTR(San_Obter_Se_Amostra_Conta(r.cd_pessoa_fisica),1,1) = 'S'))
	AND	b.nr_seq_res_prod = a.nr_sequencia) alias79
ORDER BY	cd_procedimento,
		ie_origem_proced,
    nr_seq_proc_interno;

C003 CURSOR FOR
	SELECT	nr_sequencia
	FROM	SAN_DERIVADO_SETOR
	WHERE	nr_seq_derivado 				= nr_seq_derivado_w
	AND	ie_irradiado 					= ie_irradiado_w
	AND	ie_lavado					= ie_lavado_w
	AND	ie_filtrado					= ie_filtrado_w
	AND	ie_aliquotado 					= ie_aliquotado_w
	AND	coalesce(cd_convenio,cd_convenio_w)			= cd_convenio_w
	AND	coalesce(ie_tipo_atendimento,ie_tipo_atendimento_w)	= ie_tipo_atendimento_w
	AND	coalesce(cd_estabelecimento,cd_estabelecimento_w)	= cd_estabelecimento_w
	ORDER BY coalesce(cd_convenio,0),coalesce(ie_tipo_atendimento,0);

C004 CURSOR FOR
	SELECT	nr_sequencia
	FROM	PROCEDIMENTO_PACIENTE
	WHERE	((ie_res_trans_p = 1 AND nr_seq_reserva = nr_sequencia_p)
	OR (ie_res_trans_p = 2 AND nr_seq_transfusao = nr_sequencia_p))
	ORDER BY 1;


BEGIN

IF (ie_medico_executor_trans_w = 'S') THEN

	IF (ie_res_trans_p = 2) THEN
		SELECT	MAX(cd_medico_requisitante),
			Obter_Especialidade_Medico(MAX(cd_medico_requisitante),'C')
		INTO STRICT	cd_medico_requisitante_w,
			cd_especialidade_med_w
		FROM	SAN_TRANSFUSAO
		WHERE	nr_sequencia   = nr_sequencia_p;
	ELSIF (ie_res_trans_p = 1) THEN
		SELECT	MAX(cd_medico_requisitante),
			Obter_Especialidade_Medico(MAX(cd_medico_requisitante),'C')
		INTO STRICT	cd_medico_requisitante_w,
			cd_especialidade_med_w
		FROM	SAN_RESERVA
		WHERE	nr_sequencia   = nr_sequencia_p;
	END IF;
END IF;

BEGIN

SELECT 	nr_atendimento,
	nr_prescricao,
	dt_transfusao,
	dt_prescricao,
	nr_seq_reserva,
	cd_pessoa_fisica
INTO STRICT	nr_atend_w,
	nr_prescr_w,
	dt_reserv_transf_w,
	dt_prescr_w,
	nr_seq_reserva_w,
	cd_pessoa_fisica_w
FROM (SELECT	a.nr_atendimento,
		a.nr_prescricao,
		a.dt_transfusao,
		b.dt_prescricao,
		a.nr_seq_reserva,
		a.cd_pessoa_fisica
	FROM san_transfusao a
LEFT OUTER JOIN prescr_medica b ON (a.nr_prescricao = b.nr_prescricao)
WHERE a.nr_sequencia	= nr_sequencia_p AND ie_res_trans_p	= 2
	
UNION

	SELECT	a.nr_atendimento,
		NULL,
		GREATEST(dt_cirurgia,dt_entrada),
		clock_timestamp(),
		a.nr_sequencia nr_seq_reserva,
		a.cd_pessoa_fisica
	FROM	ATENDIMENTO_PACIENTE b,
		SAN_RESERVA a
	WHERE	a.nr_sequencia		= nr_sequencia_p
	AND	a.nr_atendimento	= b.nr_atendimento
	AND	ie_res_trans_p		= 1) alias2;
EXCEPTION
	WHEN OTHERS THEN
	CALL Wheb_Mensagem_Pck.exibir_mensagem_abort(177568, 'NR_SEQUENCIA_P='||TO_CHAR(nr_sequencia_p)||';'||
							'IE_RES_TRANS='||TO_CHAR(ie_res_trans_p));

END;

dt_ent_unidade_w	:= dt_reserv_transf_w;
nr_seq_classificacao_w  := Obter_Classif_Atendimento(nr_atend_w);

SELECT	a.cd_cgc,
	a.cd_estabelecimento,
	b.ie_tipo_atendimento
INTO STRICT	cd_cgc_prestador_w,
	cd_estabelecimento_w,
	ie_tipo_atendimento_w
FROM	ESTABELECIMENTO a,
	ATENDIMENTO_PACIENTE b
WHERE	a.cd_estabelecimento = b.cd_estabelecimento
AND	b.nr_atendimento = nr_atend_w;

SELECT	MAX(cd_local_estoque)
INTO STRICT	cd_local_estoque_w
FROM	SETOR_ATENDIMENTO
WHERE	cd_setor_atendimento	= cd_setor_atendimento_p;

SELECT 	MAX(coalesce(ie_finalizar_trans_conta,'S')),
	MAX(coalesce(ie_gerar_conta_res_nao_util,'N')),
	MAX(coalesce(ie_regra_uso,'N')),
	MAX(coalesce(ie_gerar_bolsa_nao_util,'S')),
	MAX(coalesce(ie_data_procedimento_conta,'P')),
	MAX(coalesce(ie_gerar_conta_itens_solic,'N'))
INTO STRICT	ie_finalizar_trans_conta_w,
	ie_gerar_conta_res_nao_util_w,
	ie_regra_uso_w,
	ie_gerar_bolsa_nao_util_w,
	ie_data_procedimento_conta_w,
	ie_gerar_itens_solic_w
FROM 	SAN_PARAMETRO
WHERE 	cd_estabelecimento = cd_estabelecimento_w;

BEGIN
SELECT	cd_convenio,
	cd_categoria,
	ie_tipo_convenio
INTO STRICT	cd_convenio_w,
	cd_categoria_w,
	ie_tipo_convenio_w
FROM	atendimento_paciente_v
WHERE	nr_atendimento = nr_atend_w;
EXCEPTION
WHEN OTHERS THEN
	CALL Wheb_Mensagem_Pck.exibir_mensagem_abort(177564,'NR_ATEND='||TO_CHAR(nr_atend_w));
END;
IF (dt_ent_unidade_w > clock_timestamp()) THEN
	dt_ent_unidade_w := clock_timestamp();
END IF;

/* rafael em 21/2/8 os76992 */

BEGIN
SELECT	MAX(nr_seq_interno)
INTO STRICT	nr_seq_atepacu_w
FROM 	ATEND_PACIENTE_UNIDADE
WHERE 	cd_setor_atendimento	= cd_setor_atendimento_p
AND	nr_atendimento 		= nr_atend_w
--and	dt_ent_unidade_w between dt_entrada_unidade and nvl(dt_saida_unidade, sysdate);

--and	dt_ent_unidade_w between dt_entrada_unidade and nvl(dt_saida_unidade, dt_passagem_w); - feltrin em 03/07/2008 os99270
AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_unidade)= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_ent_unidade_w);
EXCEPTION
WHEN OTHERS THEN
	nr_seq_atepacu_w := 0;
END;

IF (coalesce(nr_seq_atepacu_w,0) = 0) THEN /* rafael em 21/2/8 os76992 incluido o if */
	CALL Gerar_Passagem_Setor_Atend(nr_atend_w, cd_setor_atendimento_p, dt_ent_unidade_w, 'S', nm_usuario_p);
END IF;

cd_setor_atend_w := Obter_Setor_Atendimento(nr_atend_w);

SELECT	MAX(nr_seq_interno)
INTO STRICT	nr_seq_atepacu_w
FROM	ATEND_PACIENTE_UNIDADE
WHERE	nr_atendimento 			= nr_atend_w
AND	cd_setor_atendimento		= cd_setor_atendimento_p
AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_unidade)= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_ent_unidade_w);

SELECT	dt_entrada_unidade
INTO STRICT	dt_ent_unidade_w
FROM	ATEND_PACIENTE_UNIDADE
WHERE	nr_seq_interno = nr_seq_atepacu_w;

nr_seq_proc_interno_regra_w	:= NULL;

IF (ie_excluir_procedimentos_w = 'S') THEN
	OPEN C004;
	LOOP
	FETCH C004 INTO
		nr_seq_propaci_w;
	EXIT WHEN NOT FOUND; /* apply on C004 */
		BEGIN

		CALL Excluir_Matproc_Dependentes(nr_seq_propaci_w);
		CALL San_Excluir_Proced_Paciente(nr_seq_propaci_w,nm_usuario_p,'T');

		END;
	END LOOP;
	CLOSE C004;
END IF;


insert into log_tasy(	dt_atualizacao,
			nm_usuario, 
			cd_log, 
			ds_log)
		values (
			clock_timestamp(),
			nm_usuario_p,
			1092,
			'nr_sequencia_p='||nr_sequencia_p||
			' - ie_res_trans_p='||ie_res_trans_p||
			' - cd_setor_atendimento_p='||cd_setor_atendimento_p||
			' - dt_vigencia_p='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_vigencia_p, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)||
			' - nr_seq_reserva_w='||nr_seq_reserva_w||
			' - ie_tipo_convenio_w='||ie_tipo_convenio_w||
			' - ie_gerar_bolsa_nao_util_w='||ie_gerar_bolsa_nao_util_w);

OPEN c001;
LOOP
FETCH c001 	INTO	nr_seq_prod_w,
			cd_proced_w,
			ie_origem_proced_w,
			nr_seq_derivado_w,
			nr_seq_proc_interno_w,
			ie_irradiado_derivado_w,
			ie_lavado_derivado_w,
			ie_filtrado_derivado_w,
			ie_aliquotado_derivado_w,
			ie_aferese_derivado_w,
			dt_term_util_w,
			ie_pool_w,
			ie_item_solic_w,
			qt_procedimentos_w;
	EXIT WHEN NOT FOUND; /* apply on c001 */
	BEGIN

	qt_exames_conta_w	:= NULL;
	IF (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') THEN
		SELECT * FROM Obter_Proc_Tab_Interno(nr_seq_proc_interno_w, NULL, nr_atend_w, NULL, cd_proced_w, ie_origem_proced_w, NULL, NULL) INTO STRICT cd_proced_w, ie_origem_proced_w;
	ELSE
		SELECT * FROM Obter_San_Proced_Convenio(0, nr_seq_derivado_w, cd_estabelecimento_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, cd_categoria_w, cd_setor_atend_w, cd_proced_w, ie_origem_proced_w, 0, nr_seq_proc_interno_w, dt_vigencia_p, nr_seq_proc_interno_regra_w, qt_exames_conta_w, ie_irradiado_derivado_w, ie_lavado_derivado_w, ie_filtrado_derivado_w, ie_aliquotado_derivado_w, ie_aferese_derivado_w, ie_pool_w) INTO STRICT cd_setor_atend_w, cd_proced_w, ie_origem_proced_w, nr_seq_proc_interno_regra_w, qt_exames_conta_w;

		IF (nr_seq_proc_interno_regra_w IS NOT NULL AND nr_seq_proc_interno_regra_w::text <> '') THEN
			nr_seq_proc_interno_w	:= nr_seq_proc_interno_regra_w;
		END IF;
	END IF;

	IF (cd_proced_w IS NOT NULL AND cd_proced_w::text <> '') THEN
		IF ((cd_proced_w <> cd_proced_ant_w) OR
		   ((cd_proced_w = cd_proced_ant_w) AND (coalesce(nr_seq_proc_interno_ant_w,0) <> coalesce(nr_seq_proc_interno_w,0))) OR (ds_parametro_w = 'T')) THEN
			IF (cd_proced_ant_w <> 0) THEN
				UPDATE PROCEDIMENTO_PACIENTE
				SET qt_procedimento = qt_proced_w
				WHERE nr_sequencia = nr_sequencia_w;

				ds_erro_w := Consiste_Exec_Procedimento(nr_sequencia_w, ds_erro_w);
				CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				CALL Gerar_Lancamento_Automatico(nr_atend_w,cd_local_estoque_w,34,nm_usuario_p,nr_sequencia_w,NULL,NULL,NULL,NULL,NULL);
				CALL Gerar_Autor_Regra(nr_atend_w, NULL, nr_sequencia_w, NULL, NULL, nr_seq_proc_interno_w,
								'CP',nm_usuario_p,NULL,NULL,NULL,NULL,NULL,NULL,'','','');
			END IF;

			qt_proced_w := coalesce(qt_exames_conta_w,1) * coalesce(qt_procedimentos_w,1);

			IF (nr_prescr_w IS NOT NULL AND nr_prescr_w::text <> '') THEN
				SELECT MIN(nr_sequencia)
				INTO STRICT nr_seq_prescr_w
				FROM PRESCR_PROCEDIMENTO
				WHERE nr_prescricao = nr_prescr_w
				  AND cd_procedimento = cd_proced_w
				  AND ie_origem_proced = ie_origem_proced_w;
			END IF;

			/* edgar 03/11/2003 - inclui a consistencia para obedecer a regra de prestador "consiste_setor_proc"

*/
			IF (ie_item_solic_w = 'S') THEN
				ie_irradiado_w	:= ie_irradiado_derivado_w;
				ie_lavado_w	:= ie_lavado_derivado_w;
				ie_filtrado_w	:= ie_filtrado_derivado_w;
				ie_aliquotado_w	:= ie_aliquotado_derivado_w;
			ELSE
				SELECT	MAX(ie_irradiado),
					MAX(ie_lavado),
					MAX(ie_filtrado),
					MAX(ie_aliquotado)
				INTO STRICT	ie_irradiado_w,
					ie_lavado_w,
					ie_filtrado_w,
					ie_aliquotado_w
				FROM	SAN_PRODUCAO
				WHERE	nr_sequencia = nr_seq_prod_w;
			END IF;

			OPEN c003;
			LOOP
			FETCH c003 INTO
				nr_seq_regra_setor_w;
			EXIT WHEN NOT FOUND; /* apply on c003 */
				BEGIN
				nr_seq_regra_setor_w	:= nr_seq_regra_setor_w;
				END;
			END LOOP;
			CLOSE c003;

			cd_setor_atend_regra_w	:= 0;

			IF (nr_seq_regra_setor_w IS NOT NULL AND nr_seq_regra_setor_w::text <> '') THEN

				SELECT	coalesce(MAX(cd_setor_atendimento),0)
				INTO STRICT	cd_setor_atend_regra_w
				FROM	SAN_DERIVADO_SETOR
				WHERE 	nr_sequencia = nr_seq_regra_setor_w;

			END IF;

			cd_setor_atendimento_w	:= cd_setor_atendimento_p;

			IF (cd_setor_atend_regra_w <> cd_setor_atendimento_w) AND (cd_setor_atend_regra_w > 0) THEN

				cd_setor_atendimento_w	:= cd_setor_atend_regra_w;

				BEGIN
				SELECT	MAX(nr_seq_interno)
				INTO STRICT	nr_seq_atepacu_w
				FROM 	ATEND_PACIENTE_UNIDADE
				WHERE 	cd_setor_atendimento	= cd_setor_atend_regra_w
				AND	nr_atendimento 		= nr_atend_w
				AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_unidade)= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_ent_unidade_w);
				EXCEPTION
				WHEN OTHERS THEN
					nr_seq_atepacu_w := 0;
				END;

				IF (coalesce(nr_seq_atepacu_w,0) = 0) THEN
					CALL Gerar_Passagem_Setor_Atend(nr_atend_w, cd_setor_atend_regra_w, dt_ent_unidade_w, 'S', nm_usuario_p);
				END IF;

				SELECT	MAX(nr_seq_interno)
				INTO STRICT	nr_seq_atepacu_w
				FROM	ATEND_PACIENTE_UNIDADE
				WHERE	nr_atendimento 			= nr_atend_w
				AND	cd_setor_atendimento		= cd_setor_atend_regra_w
				AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_unidade)= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_ent_unidade_w);

				SELECT 	dt_entrada_unidade
				INTO STRICT 	dt_ent_unidade_w
				FROM 	ATEND_PACIENTE_UNIDADE
				WHERE 	nr_seq_interno = nr_seq_atepacu_w;

			END IF;

			ie_via_acesso_w := Obter_Regra_Via_Acesso(cd_proced_w, ie_origem_proced_w, cd_estabelecimento_w, cd_convenio_w);

			SELECT * FROM Consiste_Medico_Executor(cd_estabelecimento_w, cd_convenio_w, cd_setor_atendimento_w, cd_proced_w, ie_origem_proced_w, ie_tipo_atendimento_w, NULL, nr_seq_proc_interno_w, ie_medico_executor_w, cd_cgc_consisitdo_w, cd_medico_regra_w, cd_profissional_w, NULL, coalesce(dt_prescr_w,dt_ent_unidade_w), nr_seq_classificacao_w, 'N', NULL, NULL) INTO STRICT ie_medico_executor_w, cd_cgc_consisitdo_w, cd_medico_regra_w, cd_profissional_w;

			SELECT nextval('procedimento_paciente_seq')
			INTO STRICT nr_sequencia_w
			;

			INSERT INTO PROCEDIMENTO_PACIENTE(nr_sequencia,
				nr_atendimento,
				dt_entrada_unidade,
				cd_procedimento,
				dt_procedimento,
				qt_procedimento,
				dt_atualizacao,
				nm_usuario,
				cd_convenio,
				cd_categoria,
				dt_prescricao,
				nr_prescricao,
				nr_sequencia_prescricao,
				cd_acao,
				cd_setor_atendimento,
				ie_origem_proced,
				tx_procedimento,
				nm_usuario_original,
				nr_seq_atepacu,
				ds_observacao,
				ie_auditoria,
				cd_cgc_prestador,
				nr_seq_proc_interno,
				cd_pessoa_fisica,
				cd_medico_executor,
				cd_especialidade,
				nr_seq_reserva,
				nr_seq_transfusao,
				ie_via_acesso)
			VALUES (nr_sequencia_w,
				nr_atend_w,
				dt_ent_unidade_w,
				cd_proced_w,
				CASE WHEN ds_parametro_w='S' THEN dt_ent_unidade_w WHEN ds_parametro_w='N' THEN coalesce(dt_prescr_w,dt_ent_unidade_w) WHEN ds_parametro_w='T' THEN coalesce(dt_term_util_w,dt_ent_unidade_w) WHEN ds_parametro_w='R' THEN coalesce(dt_reserv_transf_w,dt_ent_unidade_w) END ,
				qt_proced_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_convenio_w,
				cd_categoria_w,
				dt_prescr_w,
				nr_prescr_w,
				nr_seq_prescr_w,
				1,
				cd_setor_atendimento_w,
				ie_origem_proced_w,
				100,
				nm_usuario_p,
				nr_seq_atepacu_w,
				CASE WHEN ie_res_trans_p=1 THEN  wheb_mensagem_pck.get_texto(791957) || ' : '  ELSE wheb_mensagem_pck.get_texto(791958) || ' : ' END  || nr_sequencia_p,
				'N',
				coalesce(cd_cgc_consisitdo_w, cd_cgc_prestador_w),
				nr_seq_proc_interno_w,
				cd_profissional_w,
				CASE WHEN ie_medico_executor_trans_w='N' THEN cd_medico_regra_w  ELSE cd_medico_requisitante_w END ,
				CASE WHEN ie_medico_executor_trans_w='S' THEN cd_especialidade_med_w  ELSE NULL END ,
				CASE WHEN ie_res_trans_p=1 THEN nr_sequencia_p  ELSE NULL END ,
				CASE WHEN ie_res_trans_p=2 THEN nr_sequencia_p  ELSE NULL END ,
				ie_via_acesso_w);

				/*consiste_exec_procedimento(nr_sequencia_w, ds_erro_w);
				atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				gerar_lancamento_automatico(nr_atend_w,cd_local_estoque_w,34,nm_usuario_p,nr_sequencia_w,null,null,null,null,null);*/
		ELSE
			qt_proced_w := qt_proced_w + (coalesce(qt_exames_conta_w,1) * coalesce(qt_procedimentos_w,1));
		END IF;
	cd_proced_ant_w := cd_proced_w;
	nr_seq_proc_interno_ant_w	:= 	coalesce(nr_seq_proc_interno_w,0);

	UPDATE SAN_PRODUCAO a
	SET nr_seq_propaci = nr_sequencia_w
	WHERE nr_sequencia = nr_seq_prod_w
	  AND ie_res_trans_p = 2
	  AND NOT EXISTS (SELECT 1
				FROM SAN_RESERVA_PROD a
				WHERE a.nr_seq_producao = nr_seq_prod_w
				AND   a.nr_seq_reserva = nr_seq_reserva_w
				AND   ie_status = 'N');

	IF (ie_item_solic_w = 'S') THEN
		UPDATE	SAN_RESERVA_ITEM
		SET 	nr_seq_propaci 	= nr_sequencia_w
		WHERE	ie_res_trans_p 	= 1
		AND	nr_seq_item 	= nr_seq_prod_w
		AND  	nr_seq_reserva	= nr_sequencia_p;
	ELSE
		UPDATE	SAN_RESERVA_PROD
		SET 	nr_seq_propaci = nr_sequencia_w
		WHERE	ie_res_trans_p = 1
		/* and 	(ie_status = 'R' or (ie_status = 'N' and ie_tipo_convenio_w = 3)) bruna, os69315 comentado */

		AND (ie_status = 'R')
		AND	nr_seq_producao = nr_seq_prod_w
		AND  nr_seq_reserva	= nr_sequencia_p;
	END IF;

	END IF;
	END;
END LOOP;
CLOSE c001;

IF (cd_proced_ant_w <> 0) THEN
	UPDATE PROCEDIMENTO_PACIENTE
	SET qt_procedimento = qt_proced_w
	WHERE nr_sequencia = nr_sequencia_w;

	ds_erro_w := Consiste_Exec_Procedimento(nr_sequencia_w, ds_erro_w);
	CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
	CALL Gerar_Lancamento_Automatico(nr_atend_w,cd_local_estoque_w,34,nm_usuario_p,nr_sequencia_w,NULL,NULL,NULL,NULL,NULL);

	CALL Gerar_Autor_Regra(nr_atend_w, NULL, nr_sequencia_w, NULL, NULL, nr_seq_proc_interno_w,
								'CP',nm_usuario_p,NULL,NULL,NULL,NULL,NULL,NULL,'','','');
END IF;



nr_seq_proc_interno_ant_w	:= 0;
cd_proced_ant_w 		:= 0;
OPEN 	c002;
LOOP
FETCH c002 INTO
	nr_seq_lote_w,
	nr_seq_exame_w,
	cd_proced_w,
	ie_origem_proced_w,
	nr_seq_derivado_w,
	nr_seq_proc_interno_w,
	qt_proced_exame_w,
	nr_seq_prod_w,
	cd_setor_exame_w,
	dt_term_util_w;
EXIT WHEN NOT FOUND; /* apply on c002 */



	UPDATE	SAN_AMOSTRA_RECEPTOR
	SET	ie_amostra_conta = 'S'
	WHERE	cd_pessoa_fisica = cd_pessoa_fisica_w;

	qt_exames_conta_w	:= NULL;
	IF (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') THEN
		SELECT * FROM Obter_Proc_Tab_Interno(nr_seq_proc_interno_w, NULL, nr_atend_w, NULL, cd_proced_w, ie_origem_proced_w, NULL, NULL) INTO STRICT cd_proced_w, ie_origem_proced_w;
	ELSE
		SELECT * FROM Obter_San_Proced_Convenio(1, nr_seq_exame_w, cd_estabelecimento_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, cd_categoria_w, cd_setor_atend_w, cd_proced_w, ie_origem_proced_w, nr_seq_derivado_w, nr_seq_proc_interno_w, dt_vigencia_p, nr_seq_proc_interno_regra_w, qt_exames_conta_w, 'N', 'N', 'N', 'N', 'N', 'N') INTO STRICT cd_setor_atend_w, cd_proced_w, ie_origem_proced_w, nr_seq_proc_interno_regra_w, qt_exames_conta_w;
	END IF;



	
	IF (cd_proced_w IS NOT NULL AND cd_proced_w::text <> '') AND
		((nr_seq_prod_w IS NOT NULL AND nr_seq_prod_w::text <> '') or (Obter_san_proc_tran_parcial(CASE ie_res_trans_p WHEN 1 THEN nr_sequencia_p ELSE null END,CASE ie_res_trans_p WHEN 2 THEN nr_sequencia_p ELSE null END,nr_seq_exame_w, 'A'))<=0) THEN
		
		IF ((cd_proced_w <> cd_proced_ant_w) OR
		   ((cd_proced_w = cd_proced_ant_w) AND (coalesce(nr_seq_proc_interno_ant_w,0) <> coalesce(nr_seq_proc_interno_w,0)))) THEN
			IF (cd_proced_ant_w <> 0) THEN
				IF (ie_regra_uso_w	= 'S') THEN  /* felipe - 05/10/2007 - os70567 */
					qt_excedida_w	:=	coalesce((Obter_Se_Uso_Qtde_Proc(nr_atend_w, cd_proced_ant_w , ie_origem_ant_w, qt_proced_w,cd_medico_regra_w, cd_setor_atendimento_p, coalesce(dt_prescr_w,dt_ent_unidade_w), 2, 0, NULL, 0,NULL,NULL,NULL,nr_seq_exame_w))::numeric ,0);
				END IF;

				IF (qt_excedida_w = 0) THEN
					UPDATE PROCEDIMENTO_PACIENTE
					SET qt_procedimento = qt_proced_w
					WHERE nr_sequencia = nr_sequencia_w;

					ds_erro_w := Consiste_Exec_Procedimento(nr_sequencia_w, ds_erro_w);
					CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
					CALL Gerar_Lancamento_Automatico(nr_atend_w,cd_local_estoque_w,34,nm_usuario_p,nr_sequencia_w,NULL,NULL,NULL,NULL,NULL);
					CALL Gerar_Autor_Regra(nr_atend_w, NULL, nr_sequencia_w, NULL, NULL, nr_seq_proc_interno_w,
								'CP',nm_usuario_p,NULL,NULL,NULL,NULL,NULL,NULL,'','','');
			--	else

				--	insert into logxx_tasy values

				--	(sysdate, nm_usuario_p, 453, 'Quantidade excedida: ' || qt_excedida_w || ' Proced. ant: ' || cd_proced_ant_w);
				END IF;
			END IF;

			qt_proced_w := coalesce(qt_exames_conta_w,qt_proced_exame_w);

			/* edgar 03/11/2003 - inclui a consistencia para obedecer a regra de prestador "consiste_setor_proc" */

			SELECT * FROM Consiste_Medico_Executor(cd_estabelecimento_w, cd_convenio_w, cd_setor_atendimento_p, cd_proced_w, ie_origem_proced_w, ie_tipo_atendimento_w, NULL, nr_seq_proc_interno_w, ie_medico_executor_w, cd_cgc_consisitdo_w, cd_medico_regra_w, cd_profissional_w, NULL, coalesce(dt_prescr_w,dt_ent_unidade_w), nr_seq_classificacao_w, 'N', NULL, NULL) INTO STRICT ie_medico_executor_w, cd_cgc_consisitdo_w, cd_medico_regra_w, cd_profissional_w;

			SELECT nextval('procedimento_paciente_seq')
			INTO STRICT nr_sequencia_w
			;

			IF (ie_regra_uso_w	= 'S') THEN  /* felipe - 05/10/2007 - os70567 */
				qt_excedida_w	:=	coalesce((Obter_Se_Uso_Qtde_Proc(nr_atend_w, cd_proced_w, ie_origem_proced_w, qt_proced_w, cd_medico_regra_w,
							cd_setor_atendimento_p, coalesce(dt_prescr_w,dt_ent_unidade_w), 2, nr_sequencia_w, NULL,0,NULL,NULL,NULL,nr_seq_exame_w))::numeric ,0);

			END IF;

			SELECT	MAX(ie_irradiado),
				MAX(ie_lavado),
				MAX(ie_filtrado),
				MAX(ie_aliquotado)
			INTO STRICT	ie_irradiado_w,
				ie_lavado_w,
				ie_filtrado_w,
				ie_aliquotado_w
			FROM	SAN_PRODUCAO
			WHERE	nr_sequencia = nr_seq_prod_w;

			OPEN c003;
			LOOP
			FETCH c003 INTO
				nr_seq_regra_setor_w;
			EXIT WHEN NOT FOUND; /* apply on c003 */
				BEGIN
				nr_seq_regra_setor_w	:= nr_seq_regra_setor_w;
				END;
			END LOOP;
			CLOSE c003;

			cd_setor_atend_regra_w	:= 0;

			IF (nr_seq_regra_setor_w IS NOT NULL AND nr_seq_regra_setor_w::text <> '') THEN

				SELECT	coalesce(MAX(cd_setor_atendimento),0)
				INTO STRICT	cd_setor_atend_regra_w
				FROM	SAN_DERIVADO_SETOR
				WHERE 	nr_sequencia = nr_seq_regra_setor_w;

			END IF;

			IF (coalesce(cd_setor_exame_w,0) > 0) THEN
				cd_setor_atend_regra_w	:= cd_setor_exame_w;
			END IF;
			cd_setor_atendimento_w	:= cd_setor_atendimento_p;

			IF (cd_setor_atend_regra_w <> cd_setor_atendimento_w) AND (cd_setor_atend_regra_w > 0) THEN

				cd_setor_atendimento_w	:= cd_setor_atend_regra_w;
			END IF;

			BEGIN
			SELECT	MAX(nr_seq_interno)
			INTO STRICT	nr_seq_atepacu_w
			FROM 	ATEND_PACIENTE_UNIDADE
			WHERE 	cd_setor_atendimento	= cd_setor_atendimento_w
			AND	nr_atendimento 		= nr_atend_w
			AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_unidade)= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_ent_unidade_w);
			EXCEPTION
			WHEN OTHERS THEN
				nr_seq_atepacu_w := 0;
			END;

			IF (coalesce(nr_seq_atepacu_w,0) = 0) THEN
				CALL Gerar_Passagem_Setor_Atend(nr_atend_w, cd_setor_atendimento_w, dt_ent_unidade_w, 'S', nm_usuario_p);
			END IF;

			SELECT	MAX(nr_seq_interno)
			INTO STRICT	nr_seq_atepacu_w
			FROM	ATEND_PACIENTE_UNIDADE
			WHERE	nr_atendimento 			= nr_atend_w
			AND	cd_setor_atendimento		= cd_setor_atendimento_w
			AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_unidade)= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_ent_unidade_w);

			SELECT 	dt_entrada_unidade
			INTO STRICT 	dt_ent_unidade_w
			FROM 	ATEND_PACIENTE_UNIDADE
			WHERE 	nr_seq_interno = nr_seq_atepacu_w;

			ie_via_acesso_w := Obter_Regra_Via_Acesso(cd_proced_w, ie_origem_proced_w, cd_estabelecimento_w, cd_convenio_w);




			IF (qt_excedida_w	= 0) THEN
				INSERT INTO PROCEDIMENTO_PACIENTE(
					nr_sequencia,
					nr_atendimento,
					dt_entrada_unidade,
					cd_procedimento,
					dt_procedimento,
					qt_procedimento,
					dt_atualizacao,
					nm_usuario,
					cd_convenio,
					cd_categoria,
					cd_acao,
					cd_setor_atendimento,
					ie_origem_proced,
					tx_procedimento,
					nm_usuario_original,
					nr_seq_atepacu,
					ds_observacao,
					cd_cgc_prestador,
					cd_pessoa_fisica,
					nr_seq_proc_interno,
					ie_auditoria,
					cd_medico_executor,
					cd_especialidade,
					nr_seq_reserva,
					nr_seq_transfusao,
					ie_via_acesso
				) VALUES (
					nr_sequencia_w,
					nr_atend_w,
					CASE WHEN ie_data_procedimento_conta_w='S' THEN clock_timestamp()  ELSE dt_ent_unidade_w END ,
					cd_proced_w,
					CASE WHEN ds_parametro_w='S' THEN dt_ent_unidade_w WHEN ds_parametro_w='N' THEN coalesce(dt_prescr_w,dt_ent_unidade_w) WHEN ds_parametro_w='T' THEN coalesce(dt_term_util_w,dt_ent_unidade_w) WHEN ds_parametro_w='R' THEN coalesce(dt_reserv_transf_w,dt_ent_unidade_w) END ,
					qt_proced_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_convenio_w,
					cd_categoria_w,
					1,
					cd_setor_atendimento_w,
					ie_origem_proced_w,
					100,
					nm_usuario_p,
					nr_seq_atepacu_w,
					CASE WHEN ie_res_trans_p=1 THEN  wheb_mensagem_pck.get_texto(791957) || '(' || wheb_mensagem_pck.get_texto(791960) || ') : '  ELSE wheb_mensagem_pck.get_texto(791958) || '(' || wheb_mensagem_pck.get_texto(791960) || ') : ' END  || nr_sequencia_p,
					coalesce(cd_cgc_consisitdo_w, cd_cgc_prestador_w),
					cd_profissional_w,
					nr_seq_proc_interno_w,
					'N',
					CASE WHEN ie_medico_executor_trans_w='N' THEN cd_medico_regra_w  ELSE cd_medico_requisitante_w END ,
					CASE WHEN ie_medico_executor_trans_w='S' THEN cd_especialidade_med_w  ELSE NULL END ,
					CASE WHEN ie_res_trans_p=1 THEN nr_sequencia_p  ELSE NULL END ,
					CASE WHEN ie_res_trans_p=2 THEN nr_sequencia_p  ELSE NULL END ,
					ie_via_acesso_w);

				ds_erro_w := Consiste_Exec_Procedimento(nr_sequencia_w, ds_erro_w);
				CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				CALL Gerar_Lancamento_Automatico(nr_atend_w,cd_local_estoque_w,34,nm_usuario_p,nr_sequencia_w,NULL,NULL,NULL,NULL,NULL);
				CALL Gerar_Autor_Regra(nr_atend_w, NULL, nr_sequencia_w, NULL, NULL, nr_seq_proc_interno_w,
								'CP',nm_usuario_p,NULL,NULL,NULL,NULL,NULL,NULL,'','','');
-- else

	--			insert into log_xxtasy values

		--			(sysdate, nm_usuario_p, 453, 'Quantidade excedida: ' || qt_excedida_w);
			END IF;
		ELSE
			qt_proced_w := qt_proced_w + coalesce(qt_exames_conta_w,qt_proced_exame_w);
		END IF;

		cd_proced_ant_w 		:= cd_proced_w;
		ie_origem_ant_w			:= ie_origem_proced_w;
		nr_seq_proc_interno_ant_w	:= coalesce(nr_seq_proc_interno_w,0);

		IF (qt_excedida_w	= 0) THEN
			UPDATE	SAN_EXAME_REALIZADO
			SET 	nr_seq_propaci = nr_sequencia_w
			WHERE 	nr_seq_exame_lote = nr_seq_lote_w
			AND 	nr_seq_exame = nr_seq_exame_w;
		END IF;
	END IF;
END LOOP;
CLOSE c002;

IF (cd_proced_ant_w <> 0) THEN
	IF (ie_regra_uso_w	= 'S') THEN /* felipe - 05/10/2007 - os70567 */
		qt_excedida_w	:=	coalesce((Obter_Se_Uso_Qtde_Proc(nr_atend_w, cd_proced_ant_w, ie_origem_ant_w, qt_proced_w, cd_medico_regra_w,
				cd_setor_atendimento_p, coalesce(dt_prescr_w,dt_ent_unidade_w), 2, 0, NULL,0,NULL,NULL,NULL,nr_seq_exame_w))::numeric ,0);
	END IF;

	IF (qt_excedida_w = 0) THEN
		UPDATE PROCEDIMENTO_PACIENTE
		SET qt_procedimento = qt_proced_w
		WHERE nr_sequencia = nr_sequencia_w;

		ds_erro_w := Consiste_Exec_Procedimento(nr_sequencia_w, ds_erro_w);
		CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
		CALL Gerar_Lancamento_Automatico(nr_atend_w,cd_local_estoque_w,34,nm_usuario_p,nr_sequencia_w,NULL,NULL,NULL,NULL,NULL);
		CALL Gerar_Autor_Regra(nr_atend_w, NULL, nr_sequencia_w, NULL, NULL, nr_seq_proc_interno_w,
								'CP',nm_usuario_p,NULL,NULL,NULL,NULL,NULL,NULL,'','','');

	--else

		--insert into logxx_tasy values

		--(sysdate, nm_usuario_p, 453, 'Quantidade excedida: ' || qt_excedida_w || ' Proced. ant: ' || cd_proced_ant_w);
	END IF;
END IF;

if (ie_res_trans_p = 2) then
	update	san_transfusao
	set	ie_conta_gerada = 'S'
	where 	nr_sequencia = nr_sequencia_p;
end if;

IF	(ie_res_trans_p = 2 AND ie_finalizar_trans_conta_w = 'S') THEN
	UPDATE  SAN_TRANSFUSAO
	SET     ie_status = 'F',
                dt_fim_transfusao = clock_timestamp()
	WHERE   nr_sequencia = nr_sequencia_p;
END IF;

COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_propaci_sangue (nr_sequencia_p bigint, ie_res_trans_p bigint, nm_usuario_p text, cd_setor_atendimento_p bigint, dt_vigencia_p timestamp) FROM PUBLIC;

