-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_alterar_dados_conta_medica ( nr_sequencia_p pls_protocolo_conta.nr_sequencia%type, dt_mes_competencia_p timestamp, dt_protocolo_p timestamp, nr_seq_prestador_p pls_prestador.nr_sequencia%type, ds_observacao_p text, nr_seq_lote_p text, qt_contas_informadas_p bigint, ie_guia_fisica_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, dt_recebimento_p timestamp, ie_apresentacao_p text, vl_cobrado_manual_p bigint, ie_altera_prestador_conta_p text, ie_altera_prestador_partic_p text, ie_alterar_prot_ref_p text, nr_seq_prot_referencia_p pls_protocolo_conta.nr_seq_prot_referencia%type default null) AS $body$
DECLARE


ie_mes_competencia_w            varchar(1)     := 'N';
ie_contabilidade_w              varchar(1)     := 'N';
qt_lote_contabil_w              integer	:= 0;

dt_mes_competencia_atual_w	timestamp;
dt_mes_competencia_atual_ww	timestamp;
dt_protocolo_atual_w		timestamp;
dt_protocolo_atual_ww		timestamp;
nr_seq_prestador_atual_w	bigint;
nr_seq_prestador_atual_ww	bigint;
ds_observacao_atual_w		varchar(2000);
nr_seq_lote_atual_w		varchar(255);	
qt_contas_informadas_atual_w 	bigint;
ie_guia_fisica_atual_w		varchar(1);
ie_guia_fisica_atual_ww		varchar(1);
dt_recebimento_atual_w		timestamp;
dt_recebimento_atual_ww		timestamp;
ie_apresentacao_atual_w      	varchar(3);
ie_apresentacao_atual_ww     	varchar(3);
vl_cobrado_manual_atual_w	double precision;
vl_cobrado_manual_atual_ww	double precision;

dt_mes_competencia_anterior_w	timestamp;
dt_protocolo_anterior_w		timestamp;
nr_seq_prestador_anterior_w	bigint;
ds_observacao_anterior_w	varchar(2000);
nr_seq_lote_anterior_w		bigint;	
qt_contas_inf_anterior_w 	bigint;
ie_guia_fisica_anterior_w	varchar(1);
dt_recebimento_anterior_w	timestamp;
ie_apresentacao_anterior_w      varchar(3);
vl_cobrado_manual_anterior_w	double precision;
nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
nr_seq_prot_referencia_w 	pls_protocolo_conta.nr_seq_prot_referencia%type;
qt_prot_referencia_w            integer := 0;

/* IE_TIPO_DATA_P
         1 - Referencia do protocolo (DT_MES_COMPETENCIA)
*/
C01 CURSOR FOR
	SELECT nr_sequencia
	from   pls_protocolo_conta
	where  nr_seq_prot_referencia = nr_sequencia_p;

C02 CURSOR(nr_seq_protocolo_pc		pls_protocolo_conta.nr_sequencia%type)FOR
	SELECT	nr_sequencia nr_seq_conta
	from	pls_conta
	where	nr_seq_protocolo = nr_seq_protocolo_pc;
	
BEGIN
ie_mes_competencia_w    := pls_obter_se_mes_fechado( dt_mes_competencia_p , 'M', cd_estabelecimento_p);
ie_contabilidade_w      := pls_obter_se_mes_fechado(dt_mes_competencia_p, 'C', cd_estabelecimento_p);

if (ie_mes_competencia_w   = 'S') then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(180559);
        /*(-20011,'O mes de competencia da nova data ja esta fechado, a alteracao nao foi concluida.#@#@');
end if;
if      (ie_contabilidade_w     = 'S') then
        wheb_mensagem_pck.exibir_mensagem_abort(180617);

        /*(-20011,'A contabilidade da nova data ja esta fechada, a alteracao nao foi concluida.#@#@');*/

end if;


begin

select	dt_mes_competencia,	
	dt_protocolo,		
	nr_seq_prestador,	
	ds_observacao,	
	nr_seq_lote,		
	qt_contas_informadas,
	ie_guia_fisica,	
	dt_recebimento,	
	ie_apresentacao,      
	vl_cobrado_manual	
into STRICT	dt_mes_competencia_anterior_w,	
	dt_protocolo_anterior_w,
	nr_seq_prestador_anterior_w,	
	ds_observacao_anterior_w,	
	nr_seq_lote_anterior_w,		
	qt_contas_inf_anterior_w, 
	ie_guia_fisica_anterior_w,	
	dt_recebimento_anterior_w,	
	ie_apresentacao_anterior_w,      
	vl_cobrado_manual_anterior_w
from	pls_protocolo_conta
where	nr_sequencia = nr_sequencia_p;
exception
when others then
	dt_mes_competencia_anterior_w := null;	
	dt_protocolo_anterior_w := null;
	nr_seq_prestador_anterior_w := null;	
	ds_observacao_anterior_w := null;	
	nr_seq_lote_anterior_w := null;		
	qt_contas_inf_anterior_w := null;
	ie_guia_fisica_anterior_w := null;	
	dt_recebimento_anterior_w := null;	
	ie_apresentacao_anterior_w := null;
	vl_cobrado_manual_anterior_w := null;	
end;	

dt_mes_competencia_atual_w	:= dt_mes_competencia_p;
dt_mes_competencia_atual_ww	:= coalesce(dt_mes_competencia_p, dt_mes_competencia_anterior_w);
dt_protocolo_atual_w		:= dt_protocolo_p;
dt_protocolo_atual_ww		:= coalesce(dt_protocolo_p, dt_protocolo_anterior_w);
nr_seq_prestador_atual_w	:= nr_seq_prestador_p;
nr_seq_prestador_atual_ww	:= coalesce(nr_seq_prestador_p, nr_seq_prestador_anterior_w);
ds_observacao_atual_w		:= ds_observacao_p;
nr_seq_lote_atual_w		:= nr_seq_lote_p;
qt_contas_informadas_atual_w 	:= qt_contas_informadas_p;
ie_guia_fisica_atual_w		:= ie_guia_fisica_p;
ie_guia_fisica_atual_ww		:= coalesce(ie_guia_fisica_p, ie_guia_fisica_anterior_w);
dt_recebimento_atual_w		:= dt_recebimento_p;
dt_recebimento_atual_ww		:= coalesce(dt_recebimento_p, dt_recebimento_anterior_w);
ie_apresentacao_atual_w      	:= ie_apresentacao_p;
ie_apresentacao_atual_ww	:= coalesce(ie_apresentacao_p, ie_apresentacao_anterior_w);
vl_cobrado_manual_atual_w	:= vl_cobrado_manual_p;
vl_cobrado_manual_atual_ww	:= coalesce(vl_cobrado_manual_p, vl_cobrado_manual_anterior_w);
nr_seq_prot_referencia_w 	:= nr_seq_prot_referencia_p;

-- IMPORTANTE, agora e permitido alterar a observacao, mesmo quando o protocolo esta em lote contabil.

-- APENAS A OBSERVACAO, se for alterado algum outro campo, devera consultar o lote contabil normalmente

-- AO INCLUI NOVOS CAMPOS, devera ser incluso tambem na comparacao, CASO CONTRARIO PODERA GERAR PROBLEMAS CONTABEIS
if (coalesce(dt_mes_competencia_atual_ww, clock_timestamp() - interval '10000 days')	!= coalesce(dt_mes_competencia_anterior_w, clock_timestamp() - interval '10000 days')) or (coalesce(dt_protocolo_atual_ww, clock_timestamp() - interval '10000 days')		!= coalesce(dt_protocolo_anterior_w, clock_timestamp() - interval '10000 days')) or (coalesce(nr_seq_prestador_atual_ww, 0)			!= coalesce(nr_seq_prestador_anterior_w, 0)) or -- como a sequence parte do 1, e improvavel que exista -1000 e -2000
	(coalesce(nr_seq_lote_atual_w, -1000)			!= coalesce(nr_seq_lote_anterior_w, -1000)) or (coalesce(qt_contas_informadas_atual_w, -1000)		!= coalesce(qt_contas_inf_anterior_w, -1000)) or (coalesce(ie_guia_fisica_atual_ww, 'X')			!= coalesce(ie_guia_fisica_anterior_w, 'X')) or -- null, S ou N, nao tem X
	(coalesce(dt_recebimento_atual_ww, clock_timestamp() - interval '10000 days')		!= coalesce(dt_recebimento_anterior_w, clock_timestamp() - interval '10000 days')) or (coalesce(ie_apresentacao_atual_ww, 'X')			!= coalesce(ie_apresentacao_anterior_w, 'X')) or -- null, R ou A
	(coalesce(vl_cobrado_manual_atual_ww, -1000)			!= coalesce(vl_cobrado_manual_anterior_w, -1000)) then
	
	select  count(1)
	into STRICT    qt_lote_contabil_w
	from    pls_protocolo_conta
	where   coalesce(nr_lote_contabil,0) > 0
	and     nr_sequencia    = nr_sequencia_p;

	if (qt_lote_contabil_w     > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180618);
		/*(-20011,'Ja foi gerado lote contabil para esse protocolo, a alteracao nao foi concluida.#@#@');*/

	end if;
end if;

if (nr_seq_prot_referencia_w IS NOT NULL AND nr_seq_prot_referencia_w::text <> '') then

	select 	count(1)
	into STRICT 	qt_prot_referencia_w
	from 	pls_protocolo_conta
	where 	nr_sequencia = nr_seq_prot_referencia_w;

	if (qt_prot_referencia_w     = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1150641);
		/*Protocolo de referencia informado nao existe, por gentileza alterar.*/

	end if;

end if;

CALL pls_gravar_hist_prot_conta(
			nr_sequencia_p,
			dt_mes_competencia_anterior_w,
			dt_mes_competencia_atual_w,
                        vl_cobrado_manual_anterior_w,
			vl_cobrado_manual_atual_w,
                        dt_protocolo_anterior_w,
			dt_protocolo_atual_W,
                        nr_seq_prestador_anterior_w,
                        nr_seq_prestador_atual_w,
                        ds_observacao_anterior_w,
                        ds_observacao_atual_w,
                        nr_seq_lote_anterior_w,
                        nr_seq_lote_atual_w,
			qt_contas_inf_anterior_w,
			qt_contas_informadas_atual_w,
                        ie_guia_fisica_anterior_w,
                        ie_guia_fisica_atual_w,
                        dt_recebimento_anterior_w,
                        dt_recebimento_atual_w,
                        ie_apresentacao_anterior_w,
                        ie_apresentacao_atual_w,
			clock_timestamp(),
			nm_usuario_p,
			ie_altera_prestador_conta_p);

update  pls_protocolo_conta
set     dt_mes_competencia      = CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
        nr_seq_prestador        = CASE WHEN nr_seq_prestador_p='' THEN nr_seq_prestador  ELSE nr_seq_prestador_p END ,
        dt_protocolo            = CASE WHEN dt_protocolo_p='' THEN dt_protocolo  ELSE dt_protocolo_p END ,
        ds_observacao           = CASE WHEN ds_observacao_p='' THEN ds_observacao  ELSE ds_observacao_p END ,
        ie_guia_fisica          = CASE WHEN ie_guia_fisica_p='' THEN ie_guia_fisica  ELSE ie_guia_fisica_p END ,
        qt_contas_informadas    = CASE WHEN qt_contas_informadas_p='' THEN qt_contas_informadas  ELSE qt_contas_informadas_p END ,
        nr_protocolo_prestador  = CASE WHEN nr_seq_lote_p='' THEN nr_protocolo_prestador  ELSE nr_seq_lote_p END ,
        nm_usuario              = nm_usuario_p,
        dt_atualizacao          = clock_timestamp(),
        dt_recebimento          = CASE WHEN dt_recebimento_p='' THEN dt_recebimento  ELSE dt_recebimento_p END ,
        ie_apresentacao         = CASE WHEN ie_apresentacao_p='' THEN ie_apresentacao  ELSE ie_apresentacao_p END ,
	vl_cobrado_manual       = CASE WHEN vl_cobrado_manual_p='' THEN vl_cobrado_manual  ELSE vl_cobrado_manual_p END ,
	nr_seq_prot_referencia 	= nr_seq_prot_referencia_w
where   nr_sequencia            = nr_sequencia_p;

	for r_C02_w in C02(nr_sequencia_p) loop
		update	pls_conta_pos_cabecalho
		set	dt_mes_competencia 	= CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		--Se for antigo pos-estabelecido
		update	pls_conta_pos_estabelecido
		set	dt_mes_competencia 	= CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		--Se for novo pos atualizara pls_conta_pos_proc e pls_conta_pos_mat
		update pls_conta_pos_proc
		set	dt_competencia_mens = CASE WHEN dt_mes_competencia_p='' THEN dt_competencia_mens  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		update pls_conta_pos_mat
		set	dt_competencia_mens = CASE WHEN dt_mes_competencia_p='' THEN dt_competencia_mens  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		update	pls_conta_coparticipacao
		set	dt_mes_competencia 	= CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		update	pls_conta_copartic_contab
		set	dt_mes_competencia 	= CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
	end loop;


if (dt_mes_competencia_p IS NOT NULL AND dt_mes_competencia_p::text <> '') then
	CALL pls_atual_comp_contab_val_adic( nr_sequencia_p, dt_mes_competencia_p, 'T');
end if;
	
if (ie_altera_prestador_conta_p = 'S') and (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '') then
	update	pls_conta	a
	set	a.nr_seq_prestador_exec = nr_seq_prestador_p,
		a.nm_usuario		= nm_usuario_p,
		a.dt_atualizacao	= clock_timestamp()
	where	a.nr_seq_protocolo 	= nr_sequencia_p
	and not exists(	SELECT	1
			from	pls_conta_medica_resumo x
			where	x.nr_seq_conta 	= a.nr_sequencia
			and	(x.nr_seq_lote_pgto IS NOT NULL AND x.nr_seq_lote_pgto::text <> '')
			and	((ie_situacao = 'A') or (coalesce(ie_situacao::text, '') = ''))
			
union all

			SELECT	1
			from	pls_conta_medica_resumo x
			where	x.nr_seq_conta = a.nr_sequencia
			and	(x.nr_seq_pp_lote IS NOT NULL AND x.nr_seq_pp_lote::text <> '')
			and	x.ie_situacao = 'A');
end if;
if (ie_altera_prestador_partic_p = 'S')     and (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '')        then
        update  pls_proc_participante a
        set     a.nr_seq_prestador = nr_seq_prestador_p
        where   (a.nr_seq_prestador IS NOT NULL AND a.nr_seq_prestador::text <> '')
        and     a.nr_seq_conta_proc in ( SELECT  x.nr_sequencia
                                        from    pls_conta_proc  x
                                        where   x.nr_seq_conta in ( select       z.nr_sequencia
                                                                   from         pls_conta       z
                                                                   where        z.nr_seq_protocolo = nr_sequencia_p));
end if;

update  pls_conta_medica_resumo
set     dt_competencia          = CASE WHEN dt_mes_competencia_p='' THEN dt_competencia  ELSE dt_mes_competencia_p END ,
        dt_competencia_pgto     = CASE WHEN dt_mes_competencia_p='' THEN dt_competencia_pgto  ELSE dt_mes_competencia_p END ,
        nr_seq_prestador_atend  = CASE WHEN nr_seq_prestador_p='' THEN nr_seq_prestador_atend  ELSE nr_seq_prestador_p END
where   nr_seq_protocolo        = nr_sequencia_p
and	ie_situacao		= 'A';

update  sip_mov_item_assistencial
set     dt_item_sip             = CASE WHEN dt_mes_competencia_p='' THEN dt_item_sip  ELSE dt_mes_competencia_p END ,
        nm_usuario              = nm_usuario_p,
        dt_atualizacao          = clock_timestamp()
where   nr_seq_conta    in (    SELECT  nr_sequencia
                                from    pls_conta
                                where   nr_seq_protocolo        = nr_sequencia_p);

commit;

if (ie_alterar_prot_ref_p = 'S') then

open C01;
loop
fetch C01 into	
	nr_seq_protocolo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_mes_competencia_w    := pls_obter_se_mes_fechado( dt_mes_competencia_p , 'M', cd_estabelecimento_p);
	ie_contabilidade_w      := pls_obter_se_mes_fechado(dt_mes_competencia_p, 'C', cd_estabelecimento_p);

	if (ie_mes_competencia_w   = 'S') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180559);
		/*(-20011,'O mes de competencia da nova data ja esta fechado, a alteracao nao foi concluida.#@#@');
	end if;
	if      (ie_contabilidade_w     = 'S') then
		wheb_mensagem_pck.exibir_mensagem_abort(180617);

		/*(-20011,'A contabilidade da nova data ja esta fechada, a alteracao nao foi concluida.#@#@');*/

	end if;

	select  count(1)
	into STRICT    qt_lote_contabil_w
	from    pls_protocolo_conta
	where   coalesce(nr_lote_contabil,0) > 0
	and     nr_sequencia    = nr_seq_protocolo_w;

	if (qt_lote_contabil_w     > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180618);
		/*(-20011,'Ja foi gerado lote contabil para esse protocolo, a alteracao nao foi concluida.#@#@');*/

	end if;

	begin

	select	dt_mes_competencia,	
		dt_protocolo,		
		nr_seq_prestador,	
		ds_observacao,	
		nr_seq_lote,		
		qt_contas_informadas,
		ie_guia_fisica,	
		dt_recebimento,	
		ie_apresentacao,      
		vl_cobrado_manual	
	into STRICT	dt_mes_competencia_anterior_w,	
		dt_protocolo_anterior_w,
		nr_seq_prestador_anterior_w,	
		ds_observacao_anterior_w,	
		nr_seq_lote_anterior_w,		
		qt_contas_inf_anterior_w, 
		ie_guia_fisica_anterior_w,	
		dt_recebimento_anterior_w,	
		ie_apresentacao_anterior_w,      
		vl_cobrado_manual_anterior_w
	from	pls_protocolo_conta
	where	nr_sequencia = nr_seq_protocolo_w;
	exception
	when others then
		dt_mes_competencia_anterior_w := null;	
		dt_protocolo_anterior_w := null;
		nr_seq_prestador_anterior_w := null;	
		ds_observacao_anterior_w := null;	
		nr_seq_lote_anterior_w := null;		
		qt_contas_inf_anterior_w := null;
		ie_guia_fisica_anterior_w := null;	
		dt_recebimento_anterior_w := null;	
		ie_apresentacao_anterior_w := null;
		vl_cobrado_manual_anterior_w := null;	
	end;	

	dt_mes_competencia_atual_w	:= dt_mes_competencia_p;
	dt_protocolo_atual_w		:= dt_protocolo_p;
	nr_seq_prestador_atual_w	:= nr_seq_prestador_p;
	ds_observacao_atual_w		:= ds_observacao_p;
	nr_seq_lote_atual_w		:= nr_seq_lote_p;
	qt_contas_informadas_atual_w 	:= qt_contas_informadas_p;
	ie_guia_fisica_atual_w		:= ie_guia_fisica_p;
	dt_recebimento_atual_w		:= dt_recebimento_p;
	ie_apresentacao_atual_w      	:= ie_apresentacao_p;
	vl_cobrado_manual_atual_w	:= vl_cobrado_manual_p;

	CALL pls_gravar_hist_prot_conta(
				nr_seq_protocolo_w,
				dt_mes_competencia_anterior_w,
				dt_mes_competencia_atual_w,
				vl_cobrado_manual_anterior_w,
				vl_cobrado_manual_atual_w,
				dt_protocolo_anterior_w,
				dt_protocolo_atual_W,
				nr_seq_prestador_anterior_w,
				nr_seq_prestador_atual_w,
				ds_observacao_anterior_w,
				ds_observacao_atual_w,
				nr_seq_lote_anterior_w,
				nr_seq_lote_atual_w,
				qt_contas_inf_anterior_w,
				qt_contas_informadas_atual_w,
				ie_guia_fisica_anterior_w,
				ie_guia_fisica_atual_w,
				dt_recebimento_anterior_w,
				dt_recebimento_atual_w,
				ie_apresentacao_anterior_w,
				ie_apresentacao_atual_w,
				clock_timestamp(),
				nm_usuario_p,
				ie_altera_prestador_conta_p);

	update  pls_protocolo_conta
	set     dt_mes_competencia      = CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
		nr_seq_prestador        = CASE WHEN nr_seq_prestador_p='' THEN nr_seq_prestador  ELSE nr_seq_prestador_p END ,
		dt_protocolo            = CASE WHEN dt_protocolo_p='' THEN dt_protocolo  ELSE dt_protocolo_p END ,
		ds_observacao           = CASE WHEN ds_observacao_p='' THEN ds_observacao  ELSE ds_observacao_p END ,
		ie_guia_fisica          = CASE WHEN ie_guia_fisica_p='' THEN ie_guia_fisica  ELSE ie_guia_fisica_p END ,
		qt_contas_informadas    = CASE WHEN qt_contas_informadas_p='' THEN qt_contas_informadas  ELSE qt_contas_informadas_p END ,
		nr_protocolo_prestador  = CASE WHEN nr_seq_lote_p='' THEN nr_protocolo_prestador  ELSE nr_seq_lote_p END ,
		nm_usuario              = nm_usuario_p,
		dt_atualizacao          = clock_timestamp(),
		dt_recebimento          = CASE WHEN dt_recebimento_p='' THEN dt_recebimento  ELSE dt_recebimento_p END ,
		ie_apresentacao         = CASE WHEN ie_apresentacao_p='' THEN ie_apresentacao  ELSE ie_apresentacao_p END ,
		vl_cobrado_manual       = CASE WHEN vl_cobrado_manual_p='' THEN vl_cobrado_manual  ELSE vl_cobrado_manual_p END
	where   nr_sequencia            = nr_seq_protocolo_w;
	
	for r_C02_w in C02(nr_seq_protocolo_w) loop
		update	pls_conta_pos_cabecalho
		set	dt_mes_competencia 	= CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		--Se for antigo pos-estabelecido
		update	pls_conta_pos_estabelecido
		set	dt_mes_competencia 	= CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		--Se for novo pos atualizara pls_conta_pos_proc e pls_conta_pos_mat
		update pls_conta_pos_proc
		set	dt_competencia_mens = CASE WHEN dt_mes_competencia_p='' THEN dt_competencia_mens  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		update pls_conta_pos_mat
		set	dt_competencia_mens = CASE WHEN dt_mes_competencia_p='' THEN dt_competencia_mens  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		update	pls_conta_coparticipacao
		set	dt_mes_competencia 	= CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		
		update	pls_conta_copartic_contab
		set	dt_mes_competencia 	= CASE WHEN dt_mes_competencia_p='' THEN dt_mes_competencia  ELSE dt_mes_competencia_p END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
	end loop;
	
	if (dt_mes_competencia_p IS NOT NULL AND dt_mes_competencia_p::text <> '') then
		CALL pls_atual_comp_contab_val_adic( nr_seq_protocolo_w, dt_mes_competencia_p, 'T');
	end if;

	if (ie_altera_prestador_conta_p = 'S') and (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '') then
		update	pls_conta	a
		set	a.nr_seq_prestador_exec = nr_seq_prestador_p,
			a.nm_usuario		= nm_usuario_p,
			a.dt_atualizacao	= clock_timestamp()
		where	a.nr_seq_protocolo 	= nr_seq_protocolo_w
		and not exists(	SELECT	1
				from	pls_conta_medica_resumo x
				where	x.nr_seq_conta 	= a.nr_sequencia
				and	(x.nr_seq_lote_pgto IS NOT NULL AND x.nr_seq_lote_pgto::text <> '')
				and	((ie_situacao		= 'A') or (coalesce(ie_situacao::text, '') = ''))
				
union all

				SELECT	1
				from	pls_conta_medica_resumo x
				where	x.nr_seq_conta = a.nr_sequencia
				and	(x.nr_seq_pp_lote IS NOT NULL AND x.nr_seq_pp_lote::text <> '')
				and	x.ie_situacao = 'A');
	end if;

	if (ie_altera_prestador_partic_p = 'S')     and (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '')        then
		update  pls_proc_participante a
		set     a.nr_seq_prestador = nr_seq_prestador_p
		where   (a.nr_seq_prestador IS NOT NULL AND a.nr_seq_prestador::text <> '')
		and     a.nr_seq_conta_proc in ( SELECT  x.nr_sequencia
						from    pls_conta_proc  x
						where   x.nr_seq_conta in ( select       z.nr_sequencia
									   from         pls_conta       z
									   where        z.nr_seq_protocolo = nr_seq_protocolo_w));
	end if;

	update  pls_conta_medica_resumo
	set     dt_competencia          = CASE WHEN dt_mes_competencia_p='' THEN dt_competencia  ELSE dt_mes_competencia_p END ,
		dt_competencia_pgto     = CASE WHEN dt_mes_competencia_p='' THEN dt_competencia_pgto  ELSE dt_mes_competencia_p END ,
		nr_seq_prestador_atend  = CASE WHEN nr_seq_prestador_p='' THEN nr_seq_prestador_atend  ELSE nr_seq_prestador_p END
	where   nr_seq_protocolo        = nr_seq_protocolo_w
	and	ie_situacao		= 'A';

	update  sip_mov_item_assistencial
	set     dt_item_sip             = CASE WHEN dt_mes_competencia_p='' THEN dt_item_sip  ELSE dt_mes_competencia_p END ,
		nm_usuario              = nm_usuario_p,
		dt_atualizacao          = clock_timestamp()
	where   nr_seq_conta    in (    SELECT  nr_sequencia
					from    pls_conta
					where   nr_seq_protocolo        = nr_seq_protocolo_w);

	commit;	
	end;
end loop;
close C01;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_alterar_dados_conta_medica ( nr_sequencia_p pls_protocolo_conta.nr_sequencia%type, dt_mes_competencia_p timestamp, dt_protocolo_p timestamp, nr_seq_prestador_p pls_prestador.nr_sequencia%type, ds_observacao_p text, nr_seq_lote_p text, qt_contas_informadas_p bigint, ie_guia_fisica_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, dt_recebimento_p timestamp, ie_apresentacao_p text, vl_cobrado_manual_p bigint, ie_altera_prestador_conta_p text, ie_altera_prestador_partic_p text, ie_alterar_prot_ref_p text, nr_seq_prot_referencia_p pls_protocolo_conta.nr_seq_prot_referencia%type default null) FROM PUBLIC;

