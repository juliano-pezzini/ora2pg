-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_desfazer_aplic_recalc_auto ( nr_seq_lote_p pls_lote_recalculo_autoger.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

 
nr_seq_prot_w		pls_protocolo_conta.nr_sequencia%type;
nr_lote_contabil_w	pls_protocolo_conta.nr_lote_contabil%type;
nr_lote_contab_pag_w	pls_protocolo_conta.nr_lote_contab_pag%type;
nr_lote_prov_copartic_w	pls_protocolo_conta.nr_lote_prov_copartic%type;	
vl_lib_anterior_w	pls_conta_proc.vl_lib_original%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
vl_liberado_hi_w	pls_conta_proc.vl_liberado_hi%type;
vl_liberado_co_w	pls_conta_proc.vl_liberado_co%type;
vl_liberado_material_w	pls_conta_proc.vl_liberado_material%type;
qt_pgto_w		integer;
aux_w			integer;
qt_item_w		integer;
vl_tot_partic_w		pls_proc_participante.vl_participante%type;
vl_dif_partic_w		double precision;

--Itens do lote de recalculo de autogerado 
c_itens_recalculo CURSOR(	nr_seq_lote_pc	pls_lote_recalculo_autoger.nr_sequencia%type) FOR 
	SELECT	nr_sequencia, 
		nr_seq_conta_proc, 
		nr_seq_conta, 
		vl_item_atual, 
		vl_item, 
		qt_item 
	from	pls_itens_rec_auto 
	where	nr_seq_lote = nr_seq_lote_pc;

--Obtém infromações dos procedimentos para processamento 
c_procedimentos CURSOR(	nr_seq_conta_proc_pc	pls_conta_proc.nr_sequencia%type) FOR 
	SELECT	vl_liberado, 
		vl_lib_original, 
		vl_procedimento, 
		qt_procedimento_imp, 
		vl_calc_co_util, 
		vl_calc_hi_util, 
		vl_calc_mat_util 
	from	pls_conta_proc 
	where	nr_sequencia = nr_seq_conta_proc_pc;

c_contas CURSOR( 	nr_seq_lote_pc	pls_lote_recalculo_autoger.nr_sequencia%type) FOR 
	SELECT	distinct nr_seq_conta, 
		(SELECT	nr_seq_protocolo 
		from 	pls_conta 
		where 	nr_sequencia = a.nr_sequencia) nr_seq_protocolo 
	from	pls_itens_rec_auto a 
	where	nr_seq_lote = nr_seq_lote_pc;

BEGIN 
 
cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
 
for r_itens_w in c_itens_recalculo(nr_seq_lote_p) loop 
 
	--Primeiramente faz uma verificação para garantir que a conta não esta em um lote do SIP 
	select	count(1) 
	into STRICT	aux_w 
	from	sip_nv_dados a 
	where	a.ie_conta_enviada_ans = 'S' 
	and	a.nr_seq_conta = r_itens_w.nr_seq_conta 
	and	exists (	SELECT	1 
			from	pls_lote_sip b 
			where	b.nr_sequencia = a.nr_seq_lote_sip 
			and	(b.dt_envio IS NOT NULL AND b.dt_envio::text <> ''));
 
	if (aux_w > 0) then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(338028);
	end if;
 
	--Verifica se esta em lote contábil 
	select	nr_sequencia, 
		nr_lote_contabil, 
		nr_lote_contab_pag, 
		nr_lote_prov_copartic 
	into STRICT	nr_seq_prot_w, 
	    nr_lote_contabil_w, 
	    nr_lote_contab_pag_w, 
	    nr_lote_prov_copartic_w 
	from	pls_protocolo_conta a 
	where	nr_sequencia = (SELECT	nr_seq_protocolo 
				from	pls_conta b 
				where	b.nr_sequencia = r_itens_w.nr_seq_conta);
 
	if (nr_lote_contabil_w IS NOT NULL AND nr_lote_contabil_w::text <> '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(335018, 'NR_LOTE_CONTABIL_W=' || nr_lote_contabil_w);
	end if;
 
	if (nr_lote_contab_pag_w IS NOT NULL AND nr_lote_contab_pag_w::text <> '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(335020, 'NR_LOTE_CONTABIL_W=' || nr_lote_contab_pag_w);
	end if;
 
	if (nr_lote_prov_copartic_w IS NOT NULL AND nr_lote_prov_copartic_w::text <> '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(335021, 'NR_LOTE_CONTABIL_W=' || nr_lote_prov_copartic_w);
	end if;
 
	--Verifica se esta em lote de pagamento 
	select	sum(qt) 
	into STRICT	qt_pgto_w 
	from ( 
		SELECT	count(1) qt 
		from 	pls_conta_medica_resumo 
		where	nr_seq_conta = r_itens_w.nr_seq_conta 
		and	nr_seq_conta_proc = r_itens_w.nr_seq_conta_proc 
		and	ie_situacao = 'A' 
		and	ie_tipo_item <> 'I' 
		and 	(nr_seq_lote_pgto IS NOT NULL AND nr_seq_lote_pgto::text <> '') 
		
union all
 
		SELECT	count(1) qt 
		from 	pls_conta_medica_resumo 
		where	nr_seq_conta = r_itens_w.nr_seq_conta 
		and	nr_seq_conta_proc = r_itens_w.nr_seq_conta_proc 
		and	ie_situacao = 'A' 
		and	ie_tipo_item <> 'I' 
		and 	(nr_seq_pp_lote IS NOT NULL AND nr_seq_pp_lote::text <> '') 
	) alias5;
 
	if (qt_pgto_w > 0) then 
		/* Não foi possível desfazer o recalculo, já existem itens vinculados a um lote de pagamento. */
 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(334860);
	end if;
 
	for r_procedimentos_w in c_procedimentos( r_itens_w.nr_seq_conta_proc) loop 
 
		--Guarda o valor liberado antes de alterá-lo, devido ao log gravado ao término da alteração. 
		vl_lib_anterior_w := r_procedimentos_w.vl_liberado;
 
		--Atualiza valores proporcionalmente ao valor de recalculo(Vl unitário será alterado automaticamente). 
		vl_liberado_hi_w	:= r_procedimentos_w.vl_lib_original * dividir_sem_round( r_procedimentos_w.vl_calc_hi_util, r_procedimentos_w.vl_procedimento);
		vl_liberado_co_w	:= r_procedimentos_w.vl_lib_original * dividir_sem_round( r_procedimentos_w.vl_calc_co_util, r_procedimentos_w.vl_procedimento);
		vl_liberado_material_w	:= r_procedimentos_w.vl_lib_original * dividir_sem_round( r_procedimentos_w.vl_calc_mat_util,r_procedimentos_w.vl_procedimento);
 
		--Inativa que havia sido gerada pela aplicação dos valores de recálculo de autogerado. 
		update	pls_ocorrencia_benef 
		set	ie_situacao = 'I' 
		where	nr_seq_proc = r_itens_w.nr_seq_conta_proc 
		and	ds_observacao = 'Ocorrência gerada pelo recálculo de autogerado';
 
		update	pls_conta_proc 
		set	vl_liberado			= r_procedimentos_w.vl_lib_original, 
			vl_pag_medico_conta		= 0, 
			vl_total_partic			= 0, 
			vl_prestador			= r_procedimentos_w.vl_lib_original, 
			vl_unitario			= dividir(r_procedimentos_w.vl_lib_original, qt_procedimento), 
			vl_glosa			= vl_procedimento_imp - r_procedimentos_w.vl_lib_original, 
			vl_liberado_hi			= vl_liberado_hi_w, 
			vl_liberado_co			= vl_liberado_co_w, 
			vl_liberado_material		= vl_liberado_material_w 
		where	nr_sequencia			= r_itens_w.nr_seq_conta_proc;
 
		--Retorna o valor calculado dos participantes 
		update	pls_proc_participante 
		set	vl_participante		= dividir((r_procedimentos_w.vl_lib_original * vl_calculado),r_procedimentos_w.vl_procedimento) 
		where	nr_seq_conta_proc		= r_itens_w.nr_seq_conta_proc 
		and	((coalesce(ie_status::text, '') = '') or (ie_status != 'C')) 
		and	((coalesce(ie_gerada_cta_honorario::text, '') = '') or (ie_gerada_cta_honorario <> 'S'));
 
		--Para resolver algum possível problema de arredondamento no calculo do vl_participante. 
		select 	coalesce(sum(vl_participante),0) 
		into STRICT	vl_tot_partic_w 
		from	pls_proc_participante 
		where	nr_seq_conta_proc = r_itens_w.nr_seq_conta_proc 
		and	((coalesce(ie_status::text, '') = '') or (ie_status != 'C')) 
		and	((coalesce(ie_gerada_cta_honorario::text, '') = '') or (ie_gerada_cta_honorario <> 'S'));
 
		--Ocorreu diferença de arredondamento 
		if ( vl_tot_partic_w > r_procedimentos_w.vl_lib_original ) then 
			 
			 vl_dif_partic_w := vl_tot_partic_w - r_procedimentos_w.vl_lib_original;
			 
			update	pls_proc_participante	a 
			set	a.vl_participante = a.vl_participante - vl_dif_partic_w 
			where	a.nr_sequencia = (	SELECT	max(x.nr_sequencia) 
							from	pls_proc_participante	x 
							where	x.nr_seq_conta_proc	= r_itens_w.nr_seq_conta_proc 
							and	((coalesce(x.ie_status::text, '') = '') or (x.ie_status != 'C')) 
							and	((coalesce(x.ie_gerada_cta_honorario::text, '') = '') or (x.ie_gerada_cta_honorario <> 'S')) 
							and	x.vl_participante >= vl_dif_partic_w);
		end if;
 
		update	pls_conta_proc 
		set	vl_glosa = 0 
		where	nr_sequencia = r_itens_w.nr_seq_conta_proc 
		and	vl_glosa < 0;
 
		select	count(1) 
		into STRICT	qt_item_w 
		from	pls_conta_proc 
		where	nr_sequencia = r_itens_w.nr_seq_conta_proc;
 
		if (qt_item_w > 0) then 
			CALL pls_atualiza_conta_resumo_item( r_itens_w.nr_seq_conta_proc, 'P', nm_usuario_p,'N');
		end if;	
	end loop;
end loop;
 
--Ajuste dos valores a nível de conta(Considerando todas as contas do lote de recálculo) 
for r_contas_w in c_contas(nr_seq_lote_p) loop 
	CALL pls_atualiza_valor_conta( r_contas_w.nr_seq_conta, nm_usuario_p);
	CALL pls_cta_consistir_pck.gerar_resumo_conta( null, null, null, r_contas_w.nr_seq_conta, nm_usuario_p, cd_estabelecimento_w);
	CALL pls_gerar_valores_protocolo( r_contas_w.nr_seq_protocolo, nm_usuario_p);
end loop;
 
update	pls_lote_recalculo_autoger 
set	dt_aplicacao  = NULL 
where	nr_sequencia = nr_seq_lote_p;
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_desfazer_aplic_recalc_auto ( nr_seq_lote_p pls_lote_recalculo_autoger.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

