-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE administrar_item_pero (qt_dose_isol_p bigint, qt_vel_quan_p bigint, dt_inicio_p timestamp, dt_final_p timestamp, ds_observacao_p text, nr_seq_medic_p bigint, ie_inter_cont_p text, ie_bolus_p text, nm_usuario_p text, ie_operacao_p bigint, qt_halog_p bigint, ie_modo_registro_p text, qt_dose_total_p bigint, ie_disp_infusao_p text, ds_identificacao_bolsa_p text, lista_sequencia_p INOUT text, cd_estabelecimento_p bigint, ie_html_p text default 'N', qt_total_dose_p bigint default null) AS $body$
DECLARE


dt_final_adm_w				timestamp;
dt_final_adm_ww				timestamp;
dt_inicio_w					timestamp;
ie_libera_w					varchar(1)	:= 'S';
nr_sequencia_w				bigint;
lista_sequencia_w			varchar(255)	:=null;
dt_liberacao_w				timestamp		:=null;
ie_libera_agente_pepo_w 	varchar(1);
ie_libera_medic_pepo_w		varchar(1);
ie_libera_material_pepo_w	varchar(1);
ie_libera_terapia_pepo_w	varchar(1);
ie_libera_hemoder_pepo_w	varchar(1);
ie_tipo_w					smallint;
qt_pendente_w				bigint;
ds_identificacao_bolsa_w	varchar(20) := ds_identificacao_bolsa_p;

ie_hemoderivados_cirurgia_w	varchar(1);
nr_cirurgia_w               cirurgia.nr_cirurgia%type;
nr_atendimento_w            cirurgia.nr_atendimento%type;
nr_seq_atend_pac_unid_w     san_producao.nr_seq_atend_pac_unid%type;
nr_seq_derivado_w			cirurgia_agente_anestesico.nr_seq_derivado%type;
ie_existe_w         		varchar(1) := 'N';
ie_gerar_prescr_evento_w	varchar(1);
ie_param_543_w				varchar(1);
nr_seq_pepo_w				cirurgia_agente_anestesico.nr_seq_pepo%type;
ie_modo_adm_w      cirurgia_agente_anestesico.ie_modo_adm%type;
qt_infundido_w      cirurgia_agente_anest_ocor.qt_dose%type;
qt_dose_w      cirurgia_agente_anest_ocor.qt_dose%type;

c01 CURSOR FOR
	SELECT	nr_sequencia, qt_dose
	from	cirurgia_agente_anest_ocor
	where	nr_seq_cirur_agente = nr_seq_medic_p
	and	coalesce(dt_final_adm::text, '') = ''
	and	coalesce(ie_situacao,'A') = 'A';


BEGIN


ie_hemoderivados_cirurgia_w := obter_param_usuario(872, 514, wheb_usuario_pck.get_cd_perfil, nm_usuario_p, cd_estabelecimento_p, ie_hemoderivados_cirurgia_w);
ie_param_543_w := obter_param_usuario(872, 543, wheb_usuario_pck.get_cd_perfil, nm_usuario_p, cd_estabelecimento_p, ie_param_543_w);

select	max(nr_seq_derivado),
	max(nr_seq_pepo),
	max(ie_modo_adm)
into STRICT	nr_seq_derivado_w,
	nr_seq_pepo_w,
	ie_modo_adm_w
from 	cirurgia_agente_anestesico
where	nr_sequencia = nr_seq_medic_p;

if (obtain_user_locale(wheb_usuario_pck.get_nm_usuario) = 'de_DE') then
	select	coalesce(max(nr_sequencia),ds_identificacao_bolsa_p)
	into STRICT	ds_identificacao_bolsa_w
	from	san_producao
	where	nr_sangue = ds_identificacao_bolsa_p;

	if (dt_final_p IS NOT NULL AND dt_final_p::text <> '') then
		select     coalesce(max('S'),'N')
		into STRICT       ie_existe_w
		from       san_producao
		where   nr_sequencia = ds_identificacao_bolsa_w;

		if (ie_existe_w = 'N') then
			/*Mensagem: Identification da bolsa not encontrada!*/

			CALL Wheb_mensagem_pck.exibir_mensagem_abort(354397);
		end if;
	end if;
end if;

SELECT    MAX(coalesce(b.ie_tipo, a.ie_tipo))
INTO STRICT      ie_tipo_w
FROM      cirurgia_agente_anestesico a
LEFT JOIN agente_anestesico b ON b.nr_sequencia = a.nr_seq_agente
WHERE     a.nr_sequencia = nr_seq_medic_p;

if (ie_html_p = 'S') then
	ie_libera_w := 'S';
else
	select	coalesce(max(ie_libera_agente_pepo),'N'),
		coalesce(max(ie_libera_medic_pepo),'N'),
		coalesce(max(ie_libera_material_pepo),'N'),
		coalesce(max(ie_libera_terapia_pepo),'N'),
		coalesce(max(ie_libera_hemoder_pepo),'N')
	into STRICT	ie_libera_agente_pepo_w,
		ie_libera_medic_pepo_w,
		ie_libera_material_pepo_w,
		ie_libera_terapia_pepo_w,
		ie_libera_hemoder_pepo_w
	from	parametro_medico
	where	cd_estabelecimento = cd_estabelecimento_p;	

	if (ie_tipo_w = 1 AND ie_libera_agente_pepo_w = 'N') or
		(ie_tipo_w = 2 AND ie_libera_terapia_pepo_w = 'N') or
		(ie_tipo_w = 3 AND ie_libera_medic_pepo_w = 'N') or
		(ie_tipo_w = 4 AND ie_libera_material_pepo_w = 'N') or
		(nr_seq_derivado_w IS NOT NULL AND nr_seq_derivado_w::text <> '' AND ie_libera_hemoder_pepo_w = 'N') then
		ie_libera_w := 'N';
	end if;
end if;

lista_sequencia_w := null;

begin
select	max(dt_final_adm)
into STRICT	dt_final_adm_w
from	cirurgia_agente_anest_ocor
where	nr_seq_cirur_agente	=	nr_seq_medic_p
and	coalesce(ie_situacao,'A') = 'A';
exception
	when others then
		dt_final_adm_w	:= null;
end;


select	count(*)
into STRICT	qt_pendente_w
from	cirurgia_agente_anestesico
where	nr_sequencia = nr_seq_medic_p
and	coalesce(ie_situacao,'A') = 'A'
and	coalesce(dt_liberacao::text, '') = '';

if (ie_libera_w = 'S') and (qt_pendente_w > 0) then
	update	cirurgia_agente_anestesico
	set	dt_liberacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_medic_p;
	commit;
end if;

select  max(nr_cirurgia)
into STRICT    nr_cirurgia_w
from    cirurgia_agente_anestesico
where	nr_sequencia = nr_seq_medic_p;

select max(nr_atendimento)
into STRICT nr_atendimento_w
from cirurgia
where nr_cirurgia = nr_cirurgia_w;


if (ie_inter_cont_p = 'I') then
  if (ie_operacao_p = 0) then
		select	nextval('cirurgia_agente_anest_ocor_seq')
		into STRICT	nr_sequencia_w
		;
		if (coalesce(lista_sequencia_w::text, '') = '') then
			lista_sequencia_w := nr_sequencia_w;
		else
			lista_sequencia_w := lista_sequencia_w ||','||nr_sequencia_w;
		end if;
		dt_liberacao_w := null;
		if (ie_bolus_p = 'S') then
			dt_liberacao_w := clock_timestamp();
		end if;

		insert	into cirurgia_agente_anest_ocor(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_cirur_agente,
			dt_inicio_adm,
			dt_final_adm,
			qt_dose,
			qt_velocidade_inf,
			ds_observacao,
			qt_dose_ataque,
			ie_aplic_bolus,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			ds_identificacao_bolsa,
			dt_liberacao,
			ie_situacao)
		values (
			nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_medic_p,
			dt_inicio_p,
			CASE WHEN ie_bolus_p='S' THEN dt_inicio_p  ELSE dt_final_p END ,
			qt_vel_quan_p,
			null,
			ds_observacao_p,
			qt_dose_isol_p,
			ie_bolus_p,
			nm_usuario_p,
			clock_timestamp(),
			ds_identificacao_bolsa_w,
			CASE WHEN ie_libera_w='S' THEN dt_liberacao_w  ELSE null END ,
			'A');

			if (ie_html_p = 'S' and
				obtain_user_locale(wheb_usuario_pck.get_nm_usuario) = 'de_DE' and
				ie_hemoderivados_cirurgia_w = 'S') then

				CALL iniciar_finalizar_infusao_hemo(ds_identificacao_bolsa_w, dt_inicio_p, 'I', nm_usuario_p, qt_vel_quan_p);				

				select   max(nr_seq_interno)
				into STRICT     nr_seq_atend_pac_unid_w
				from     atend_paciente_unidade
				where    nr_atendimento          = nr_atendimento_w
				and      cd_setor_atendimento = obter_setor_atendimento(nr_atendimento_w);

				update 	san_producao
				set 	qt_vol_transf 		= qt_vel_quan_p,
						dt_utilizacao 		=  dt_inicio_p,
						dt_termino_util 	= dt_final_p,
						ds_observacao   	= ds_observacao_p,
						nm_usuario_resp     = nm_usuario_p,
						nr_seq_atend_pac_unid 	= nr_seq_atend_pac_unid_w,
						dt_atualizacao 			= clock_timestamp(),
						nm_usuario 				= nm_usuario_p
				where 	nr_sequencia     		= ds_identificacao_bolsa_w;

				commit;
			end if;
	elsif (ie_operacao_p = 1) then
		open c01;
		loop
		fetch c01 into
			nr_sequencia_w,
			qt_dose_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			update	cirurgia_agente_anest_ocor
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				dt_final_adm		= dt_inicio_p, --Conforme visto com Luciano na OS 1076741, alteardo de SYSDATE para dt_inicio_p
				qt_dose			= CASE WHEN nr_seq_derivado_w = NULL THEN qt_dose  ELSE qt_vel_quan_p END ,
				ds_observacao	=	substr(ds_observacao_p, 1, 255),
				dt_liberacao		= CASE WHEN ie_libera_w='S' THEN clock_timestamp()  ELSE null END
			where	nr_sequencia		= nr_sequencia_w;
			if (coalesce(lista_sequencia_w::text, '') = '') then
				lista_sequencia_w := nr_sequencia_w;
			else
				lista_sequencia_w := lista_sequencia_w ||','||nr_sequencia_w;
			end if;
			end;
		end loop;
		close c01;

		select	nextval('cirurgia_agente_anest_ocor_seq')
		into STRICT	nr_sequencia_w
		;

		if (coalesce(lista_sequencia_w::text, '') = '') then
			lista_sequencia_w := nr_sequencia_w;
		else
			lista_sequencia_w := lista_sequencia_w ||','||nr_sequencia_w;
		end if;

		dt_liberacao_w := null;
		if (ie_bolus_p = 'S') then
			dt_liberacao_w := clock_timestamp();
		end if;



		insert	into cirurgia_agente_anest_ocor(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_cirur_agente,
			dt_inicio_adm,
			dt_final_adm,
			qt_dose,
			qt_velocidade_inf,
			ds_observacao,
			qt_dose_ataque,
			ie_aplic_bolus,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			dt_liberacao,
			ie_situacao)
		values(
			nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_medic_p,
			dt_inicio_p + (3/86400),
			CASE WHEN ie_bolus_p='S' THEN dt_inicio_p  ELSE dt_final_p END ,
			qt_vel_quan_p,
			null,
			ds_observacao_p,
			qt_dose_isol_p,
			ie_bolus_p,
			nm_usuario_p,
			clock_timestamp(),
			CASE WHEN ie_libera_w='S' THEN dt_liberacao_w  ELSE null END ,
			'A');
	elsif (ie_operacao_p = 2) then
		open c01;
		loop
		fetch c01 into
			nr_sequencia_w,
			qt_dose_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			if (coalesce(qt_dose_w, 0) <> coalesce(qt_vel_quan_p,0) and
			ie_modo_adm_w = 'IN' and 
			ie_tipo_w = 2) then
				qt_infundido_w := qt_vel_quan_p;
			else
				select CASE WHEN coalesce(nr_seq_derivado_w::text, '') = '' THEN qt_dose  ELSE qt_vel_quan_p END 
				into STRICT   	qt_infundido_w
				from  	cirurgia_agente_anest_ocor
				where  	nr_sequencia = nr_sequencia_w;
			end if;
			
			update	cirurgia_agente_anest_ocor set
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				dt_final_adm		= dt_final_p,
				ds_identificacao_bolsa 	= ds_identificacao_bolsa_w,
				qt_dose			= qt_infundido_w,
				ds_observacao	=	substr(ds_observacao_p, 1, 255),
				dt_liberacao		= CASE WHEN ie_libera_w='S' THEN clock_timestamp()  ELSE null END
			where	nr_sequencia		= nr_sequencia_w;
			if (coalesce(lista_sequencia_w::text, '') = '') then
				lista_sequencia_w := nr_sequencia_w;
			else
				lista_sequencia_w := lista_sequencia_w ||','||nr_sequencia_w;
			end if;
			end;
		end loop;
		close c01;

		if (ie_html_p = 'S' and
			obtain_user_locale(wheb_usuario_pck.get_nm_usuario) = 'de_DE' and
			ie_hemoderivados_cirurgia_w = 'S') then

				CALL iniciar_finalizar_infusao_hemo(ds_identificacao_bolsa_w, dt_final_p, 'F', nm_usuario_p, qt_vel_quan_p);

				update 	san_producao
				set 	qt_vol_transf 	= qt_vel_quan_p,
						dt_termino_util = dt_final_p,
						ds_observacao   = ds_observacao_p,
						nm_usuario_resp = nm_usuario_p,
						dt_atualizacao 	= clock_timestamp(),
						nm_usuario 		= nm_usuario_p
				where 	nr_sequencia    = ds_identificacao_bolsa_w;

				commit;
		end if;
	end if;
else
	if (ie_operacao_p = 0) then

		dt_inicio_w		:= dt_inicio_p;
		if (dt_final_adm_w = dt_inicio_p) then
			dt_inicio_w	:= dt_inicio_p + (3/86400);

		end if;

		select	nextval('cirurgia_agente_anest_ocor_seq')
		into STRICT	nr_sequencia_w
		;
		if (coalesce(lista_sequencia_w::text, '') = '') then
			lista_sequencia_w := nr_sequencia_w;
		else
			lista_sequencia_w := lista_sequencia_w ||','||nr_sequencia_w;
		end if;

		dt_final_adm_ww := null;
		select	CASE WHEN coalesce(qt_dose_isol_p::text, '') = '' THEN dt_final_p  ELSE dt_inicio_w END
		into STRICT	dt_final_adm_ww
		;

		dt_liberacao_w := null;
		if (dt_final_adm_ww IS NOT NULL AND dt_final_adm_ww::text <> '') then
			dt_liberacao_w := clock_timestamp();
		end if;



		insert	into cirurgia_agente_anest_ocor(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_cirur_agente,
			dt_inicio_adm,
			dt_final_adm,
			qt_dose,
			qt_velocidade_inf,
			ds_observacao,
			qt_dose_ataque,
			ie_aplic_bolus,
			qt_halog_ins,
			ie_modo_registro,
			qt_dose_total,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			dt_liberacao,
			ie_situacao,
			qt_total_dose)
		values (
			nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_medic_p,
			dt_inicio_w,
			dt_final_adm_ww,
			null,
			qt_vel_quan_p,
			ds_observacao_p,
			qt_dose_isol_p,
			'N',
			qt_halog_p,
			ie_modo_registro_p,
			qt_dose_total_p,
			nm_usuario_p,
			clock_timestamp(),
			CASE WHEN ie_libera_w='S' THEN dt_liberacao_w  ELSE null END ,
			'A',
			qt_total_dose_p);
		if (ie_disp_infusao_p IS NOT NULL AND ie_disp_infusao_p::text <> '') then
			update	cirurgia_agente_anestesico
			set	ie_disp_infusao = ie_disp_infusao_p
			where	nr_sequencia 	= nr_seq_medic_p;
		end if;
	elsif (ie_operacao_p = 1) then
		open c01;
		loop
		fetch c01 into
			nr_sequencia_w,
			qt_dose_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			if (coalesce(lista_sequencia_w::text, '') = '') then
				lista_sequencia_w := nr_sequencia_w;
			else
				lista_sequencia_w := lista_sequencia_w ||','||nr_sequencia_w;
			end if;



			update	cirurgia_agente_anest_ocor
			set	dt_atualizacao	=	clock_timestamp(),
				nm_usuario	=	nm_usuario_p,
				dt_final_adm	=	dt_inicio_p,
				qt_dose		= 	CASE WHEN nr_seq_derivado_w = NULL THEN qt_dose  ELSE qt_vel_quan_p END ,
				ds_observacao	=	substr(ds_observacao_p, 1, 255),
				dt_liberacao	=	CASE WHEN ie_libera_w='S' THEN clock_timestamp()  ELSE null END
			where	nr_sequencia	=	nr_sequencia_w;
			end;
		end loop;
		close c01;

		select	nextval('cirurgia_agente_anest_ocor_seq')
		into STRICT	nr_sequencia_w
		;

		if (coalesce(lista_sequencia_w::text, '') = '') then
			lista_sequencia_w := nr_sequencia_w;
		else
			lista_sequencia_w := lista_sequencia_w ||','||nr_sequencia_w;
		end if;

		dt_liberacao_w := null;
		if (dt_final_p IS NOT NULL AND dt_final_p::text <> '') then
			dt_liberacao_w := clock_timestamp();
		end if;

		insert	into cirurgia_agente_anest_ocor(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_cirur_agente,
			dt_inicio_adm,
			dt_final_adm,
			qt_dose,
			qt_velocidade_inf,
			ds_observacao,
			qt_dose_ataque,
			ie_aplic_bolus,
			qt_halog_ins,
			ie_modo_registro,
			qt_dose_total,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			dt_liberacao,
			ie_situacao,
			qt_total_dose)
		values(
			nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_medic_p,
			dt_inicio_p + (3/86400),
			dt_final_p,
			null,
			qt_vel_quan_p,
			ds_observacao_p,
			qt_dose_isol_p,
			'N',
			qt_halog_p,
			ie_modo_registro_p,
			qt_dose_total_p,
			nm_usuario_p,
			clock_timestamp(),
			CASE WHEN ie_libera_w='S' THEN dt_liberacao_w  ELSE null END ,
			'A',
			qt_total_dose_p);

	elsif (ie_operacao_p = 2) then
		open c01;
		loop
		fetch c01 into
			nr_sequencia_w,
			qt_dose_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			if (coalesce(qt_dose_w, 0) <> coalesce(qt_vel_quan_p,0) and
			ie_modo_adm_w = 'IN' and 
			ie_tipo_w = 2) then
				qt_infundido_w := qt_vel_quan_p;
			else
				select CASE WHEN coalesce(nr_seq_derivado_w::text, '') = '' THEN qt_dose  ELSE qt_vel_quan_p END 
				into STRICT   	qt_infundido_w
				from  	cirurgia_agente_anest_ocor
				where  	nr_sequencia = nr_sequencia_w;
			end if;
			
			update	cirurgia_agente_anest_ocor
			set	dt_atualizacao	=	clock_timestamp(),
				nm_usuario	=	nm_usuario_p,
				dt_final_adm	=	dt_final_p,
				qt_dose_total	= 	CASE WHEN ie_modo_registro_p='R' THEN qt_dose_total_p  ELSE qt_dose_total END ,
				qt_total_dose 	= 	CASE WHEN ie_modo_registro_p='T' THEN qt_total_dose_p  ELSE qt_total_dose END ,
				qt_dose		= 	qt_infundido_w,
				ds_observacao	=	substr(ds_observacao_p, 1, 255),
				dt_liberacao	=	CASE WHEN ie_libera_w='S' THEN clock_timestamp()  ELSE null END
			where	nr_sequencia	= 	nr_sequencia_w;
			if (coalesce(lista_sequencia_w::text, '') = '') then
				lista_sequencia_w := nr_sequencia_w;
			else
				lista_sequencia_w := lista_sequencia_w ||','||nr_sequencia_w;
			end if;
			end;
		end loop;
		close c01;
	end if;
end if;

select 	coalesce(max('S'), 'N')
into STRICT ie_gerar_prescr_evento_w
from	cirurgia_agente_anestesico
where 	nr_sequencia = nr_seq_medic_p
and	(coalesce(nr_seq_mat_cpoe, nr_seq_diet_cpoe) IS NOT NULL AND (coalesce(nr_seq_mat_cpoe, nr_seq_diet_cpoe))::text <> '');

if (ie_gerar_prescr_evento_w = 'S') then
	CALL gerar_prescr_event_agent_anest(nr_sequencia_w, ie_operacao_p,'S');
end if;

select    max(dt_final_adm)
into STRICT    dt_final_adm_w
from    cirurgia_agente_anest_ocor
where    nr_sequencia    =    nr_sequencia_w
and    coalesce(ie_situacao,'A') = 'A';


if (ie_param_543_w = 'S' and ie_libera_w = 'S' and (dt_final_adm_w IS NOT NULL AND dt_final_adm_w::text <> '')) then
    CALL inserir_ganhos_perdas_auto(nr_atendimento_w, nr_cirurgia_w, obter_setor_atendimento(nr_atendimento_w), dt_final_adm_w, 0, 'S', to_char(dt_final_adm_w, 'hh24'), ds_observacao_p, nm_usuario_p, 1, nr_seq_pepo_w, nr_seq_medic_p, cd_estabelecimento_p, ie_tipo_w, nr_sequencia_w);
end if;

lista_sequencia_p := lista_sequencia_w;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE administrar_item_pero (qt_dose_isol_p bigint, qt_vel_quan_p bigint, dt_inicio_p timestamp, dt_final_p timestamp, ds_observacao_p text, nr_seq_medic_p bigint, ie_inter_cont_p text, ie_bolus_p text, nm_usuario_p text, ie_operacao_p bigint, qt_halog_p bigint, ie_modo_registro_p text, qt_dose_total_p bigint, ie_disp_infusao_p text, ds_identificacao_bolsa_p text, lista_sequencia_p INOUT text, cd_estabelecimento_p bigint, ie_html_p text default 'N', qt_total_dose_p bigint default null) FROM PUBLIC;

