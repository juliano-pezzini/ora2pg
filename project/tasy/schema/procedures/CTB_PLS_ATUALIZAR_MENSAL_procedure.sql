-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_pls_atualizar_mensal ( nr_seq_lote_p bigint, nr_seq_mensalidade_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


ie_tipo_contratacao_w		varchar(15);
ie_tipo_item_w			varchar(15);
nr_seq_mensalidade_seg_w	bigint;
nr_seq_item_mensal_w		bigint;
cd_conta_contabil_w		varchar(20);
ie_preco_w			varchar(2);
ie_segmentacao_w		varchar(3);
ie_regulamentacao_w		varchar(2);
ie_participacao_w		varchar(1);
nr_seq_regra_w			bigint;
ie_tipo_beneficiario_w		varchar(3);
ie_cancelamento_w		varchar(1);
cd_historico_w			numeric(20);
nr_seq_mensalidade_antec_w	bigint;
cd_conta_antec_w		varchar(20);
nr_seq_conta_w			bigint;
nr_seq_conta_copartic_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_grupo_ans_w		bigint;
nr_lote_contab_antecip_w	bigint;
ie_tipo_conta_w			varchar(2);
ie_antecipacao_w		varchar(1) := 'N';
dt_mesano_referencia_w		timestamp;
dt_contabilizacao_w		timestamp;
nr_seq_regra_copartic_w		bigint;
nr_seq_tipo_coparticipacao_w	bigint;
nr_seq_clinica_w		bigint;
ie_tipo_segurado_w		varchar(3);
cd_historico_baixa_w		bigint;
nr_seq_mensalidade_w		bigint;
ie_centro_custo_w		varchar(1);
cd_centro_custo_w		integer;
nr_seq_regra_cc_w		bigint;
cd_cgc_w			varchar(20);
cd_pessoa_fisica_w		varchar(10);
cd_municipio_ibge_w		varchar(20);
cd_conta_contab_baixa_antec_w	varchar(20);
cd_historico_antec_w		bigint;
cd_historico_antec_baixa_w	bigint;
nr_seq_tipo_lanc_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_sca_w			bigint;
nr_seq_segurado_w		bigint;
ie_tipo_vinculo_operadora_w	varchar(2);
ds_erro_w			varchar(255);
cd_historico_rev_baixa_w	bigint;
qt_registros_w			bigint;
nr_seq_conta_pos_estab_w	bigint;
cd_conta_contabil_rec_antec_w	varchar(20);
cd_historico_rec_antec_w	bigint;
cd_historico_reversao_w		bigint;
cd_historico_rev_antec_w	bigint;
nr_seq_rec_futura_w		pls_conta_receita_futura.nr_sequencia%type;
cd_conta_contabil_dev_w		pls_mensalidade_seg_item.cd_conta_devolucao%type;
cd_historico_dev_w		pls_mensalidade_seg_item.cd_historico_devolucao%type;

C00 CURSOR FOR
	SELECT	b.ie_cancelamento,
		trunc(a.dt_contabilizacao,'month'),
		trunc(a.dt_mesano_referencia,'month'),
		b.nr_sequencia,
		c.cd_cgc,
		c.cd_pessoa_fisica
	from	pls_contrato_pagador	c,
		pls_mensalidade 	b,
		pls_lote_mensalidade 	a
	where	a.nr_sequencia		= b.nr_seq_lote
	and	b.nr_seq_pagador	= c.nr_sequencia
	and	coalesce(b.nr_seq_cancel_rec_mens::text, '') = ''
	and	((a.nr_sequencia	= nr_seq_lote_p) or (coalesce(nr_seq_lote_p::text, '') = ''))
	and	((b.nr_sequencia	= nr_seq_mensalidade_p) or (coalesce(nr_seq_mensalidade_p::text, '') = ''));

C01 CURSOR FOR
	SELECT	b.nr_sequencia,
		d.ie_tipo_contratacao,
		d.ie_preco,
		d.ie_segmentacao,
		d.ie_regulamentacao,
		d.ie_participacao,
		e.ie_tipo_beneficiario,
		c.ie_tipo_segurado,
		c.nr_sequencia,
		c.ie_tipo_vinculo_operadora
	from	pls_contrato		e,
		pls_plano		d,
		pls_segurado		c,
		pls_mensalidade_segurado b,
		pls_mensalidade		a
	where	b.nr_seq_mensalidade	= a.nr_sequencia
	and	a.nr_sequencia		= nr_seq_mensalidade_w
	and	c.nr_sequencia		= b.nr_seq_segurado
	and	d.nr_sequencia		= c.nr_seq_plano
	and	c.nr_seq_contrato	= e.nr_sequencia;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_tipo_item,
		a.nr_seq_conta,
		a.nr_seq_tipo_lanc,
		b.nr_seq_plano,
		c.nr_seq_plano
	FROM pls_mensalidade_segurado b, pls_mensalidade_seg_item a
LEFT OUTER JOIN pls_sca_vinculo c ON (a.nr_seq_vinculo_sca = c.nr_sequencia)
WHERE a.nr_seq_mensalidade_seg	= b.nr_sequencia and b.nr_sequencia			= nr_seq_mensalidade_seg_w;

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		b.cd_procedimento,
		b.ie_origem_proced,
		a.nr_seq_regra
	from	pls_conta_coparticipacao a,
		pls_conta_proc b
	where	a.nr_seq_conta_proc = b.nr_sequencia
	and	exists (	SELECT	1
				from	pls_conta_proc x
				where	x.nr_sequencia = a.nr_seq_conta_proc
				and	x.nr_seq_conta = nr_seq_conta_w)
	
union

	select	a.nr_sequencia,
		0 cd_procedimento,
		0 ie_origem_proced,
		a.nr_seq_regra
	from	pls_conta_coparticipacao a
	where	a.nr_seq_conta = nr_seq_conta_w
	and	not exists (	select	1
				from	pls_conta_proc x
				where	x.nr_sequencia = a.nr_seq_conta_proc
				and	x.nr_seq_conta = nr_seq_conta_w);

C05 CURSOR FOR
	SELECT	cd_conta_contabil,
		cd_conta_contab_baixa,
		cd_conta_contabil_rec_antec,
                cd_conta_contabil_dev,
		cd_historico,
		cd_historico_baixa,
		cd_historico_rev_baixa,
		cd_historico_rec_antec,
		cd_historico_reversao,
		cd_historico_rev_antec,
                cd_historico_dev,
		nr_sequencia
	from	pls_conta_receita_futura
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	trunc(clock_timestamp(),'dd') between trunc(dt_vigencia_inicial,'dd') and trunc(coalesce(dt_vigencia_final,clock_timestamp()),'dd')
	and	((ie_tipo_contratacao = ie_tipo_contratacao_w) or (coalesce(ie_tipo_contratacao::text, '') = ''))
	and	((ie_tipo_segurado = ie_tipo_segurado_w) or (coalesce(ie_tipo_segurado::text, '') = ''))
	and	((nr_seq_plano = nr_seq_plano_w) or (coalesce(nr_seq_plano::text, '') = ''))
	and	((nr_seq_sca = nr_seq_sca_w) or (coalesce(nr_seq_sca::text, '') = ''))
	and	((ie_tipo_item = ie_tipo_item_w) or (coalesce(ie_tipo_item::text, '') = ''))
	and	((ie_tipo_vinculo_operadora	= ie_tipo_vinculo_operadora_w) or (coalesce(ie_tipo_vinculo_operadora::text, '') = ''))
	and	((nr_seq_tipo_lanc = nr_seq_tipo_lanc_w) or (coalesce(nr_seq_tipo_lanc::text, '') = ''))
	order by	coalesce(ie_tipo_item,0),
			coalesce(nr_seq_plano,0),
			coalesce(nr_seq_sca,0),
			coalesce(ie_tipo_segurado,' '),
			coalesce(ie_tipo_contratacao,' '),
			coalesce(ie_tipo_vinculo_operadora,' '),
			coalesce(cd_conta_contabil,' ');

C06 CURSOR FOR
	SELECT	a.nr_sequencia,
		b.cd_procedimento,
		b.ie_origem_proced
	from	pls_conta_pos_estabelecido	a,
		pls_conta_proc 			b
	where	a.nr_seq_conta_proc = b.nr_sequencia
	and	coalesce(a.ie_situacao,'A') = 'A'
	and	exists (	SELECT	1
				from	pls_conta_proc x
				where	x.nr_sequencia = a.nr_seq_conta_proc
				and	x.nr_seq_conta = nr_seq_conta_w)
	
union

	select	a.nr_sequencia,
		0 cd_procedimento,
		0 ie_origem_proced
	from	pls_conta_pos_estabelecido	a
	where	a.nr_seq_conta = nr_seq_conta_w
	and	coalesce(a.ie_situacao,'A') = 'A'
	and	not exists (	select	1
				from	pls_conta_proc x
				where	x.nr_sequencia = a.nr_seq_conta_proc
				and	x.nr_seq_conta = nr_seq_conta_w);


BEGIN

open C00;
loop
fetch C00 into
	ie_cancelamento_w,
	dt_contabilizacao_w,
	dt_mesano_referencia_w,
	nr_seq_mensalidade_w,
	cd_cgc_w,
	cd_pessoa_fisica_w;
EXIT WHEN NOT FOUND; /* apply on C00 */
	begin
	if (coalesce(cd_cgc_w,'0') <> '0') then
		select	max(cd_municipio_ibge)
		into STRICT	cd_municipio_ibge_w
		from	pessoa_juridica
		where	cd_cgc = cd_cgc_w;
	elsif (coalesce(cd_pessoa_fisica_w,'0') <> '0') then
		select	max(cd_municipio_ibge)
		into STRICT	cd_municipio_ibge_w
		from	compl_pessoa_fisica
		where	ie_tipo_complemento = 1
		and	cd_pessoa_fisica = cd_pessoa_fisica_w;
	end if;
	
	open C01;
	loop
	fetch C01 into
		nr_seq_mensalidade_seg_w,
		ie_tipo_contratacao_w,
		ie_preco_w,
		ie_segmentacao_w,
		ie_regulamentacao_w,
		ie_participacao_w,
		ie_tipo_beneficiario_w,
		ie_tipo_segurado_w,
		nr_seq_segurado_w,
		ie_tipo_vinculo_operadora_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		ie_tipo_item_w	:= null;
		
		if (dt_contabilizacao_w IS NOT NULL AND dt_contabilizacao_w::text <> '') then
			/*	Se data de antecipacao = data de referencia do lote entao o credito vai na conta de antecipacao e o debito e normal.
			Ex.:	Mensalidade de 01/08/2008 com data de contabilizacao = 01/05/2008
			No lote do mes 01/05/2008:
				Conta Credito = Conta antecipacao
				Conta Debito = Normal.
			No lote do mes 01/08/2008:
				Conta Credito = Normal
				Conta Debito = Conta antecipacao
			Levantamento feito por Adriano juntamente com o cantador do Costa Cavalcanti. Alteracoes feitas por Paulo em 28/07/2008 - OS 102277*/
			ie_antecipacao_w	:= 'S';
		end if;
		
		open C02;
		loop
		fetch C02 into
			nr_seq_item_mensal_w,
			ie_tipo_item_w,
			nr_seq_conta_w,
			nr_seq_tipo_lanc_w,
			nr_seq_plano_w,
			nr_seq_sca_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			/* Obter conta e historico de antecipacao */

			
			nr_seq_rec_futura_w		:= null;
			cd_conta_antec_w		:= null;
			cd_conta_contab_baixa_antec_w	:= null;
			cd_conta_contabil_rec_antec_w	:= null;
                        cd_conta_contabil_dev_w		:= null;
			cd_historico_antec_w		:= null;
			cd_historico_antec_baixa_w	:= null;
			cd_historico_rev_baixa_w	:= null;
			cd_historico_rec_antec_w	:= null;
			cd_historico_reversao_w		:= null;
			cd_historico_rev_antec_w	:= null;
                        cd_historico_dev_w		:= null;
			
			open C05;
			loop
			fetch C05 into
				cd_conta_antec_w,
				cd_conta_contab_baixa_antec_w,
				cd_conta_contabil_rec_antec_w,
                                cd_conta_contabil_dev_w,
				cd_historico_antec_w,
				cd_historico_antec_baixa_w,
				cd_historico_rev_baixa_w,
				cd_historico_rec_antec_w,
				cd_historico_reversao_w,
				cd_historico_rev_antec_w,
                                cd_historico_dev_w,
				nr_seq_rec_futura_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
			end loop;
			close C05;
			
			/* Obter o centro custo */

			SELECT * FROM pls_obter_centro_custo(	'R', nr_seq_plano_w, cd_estabelecimento_p, cd_municipio_ibge_w, ie_tipo_contratacao_w, ie_regulamentacao_w, nr_seq_segurado_w, ie_tipo_item_w, cd_centro_custo_w, nr_seq_regra_cc_w, nr_seq_tipo_lanc_w, null, nr_seq_sca_w) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;
			
			if (ie_tipo_item_w = '3') then /* Coparticipacao */
				open C04;
				loop
				fetch C04 into
					nr_seq_conta_copartic_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_regra_copartic_w;
				EXIT WHEN NOT FOUND; /* apply on C04 */
					if (cd_procedimento_w	= 0) then -- Co-participacao de internacao
						select	max(nr_seq_tipo_coparticipacao)
						into STRICT	nr_seq_tipo_coparticipacao_w
						from	pls_regra_coparticipacao
						where	nr_sequencia	= nr_seq_regra_copartic_w;
						
						if (coalesce(nr_seq_tipo_coparticipacao_w,0) <> 0) then
							select	max(nr_seq_clinica)
							into STRICT	nr_seq_clinica_w
							from	pls_coparticipacao_proc
							where	nr_seq_tipo_coparticipacao	= nr_seq_tipo_coparticipacao_w
							and	(nr_seq_clinica IS NOT NULL AND nr_seq_clinica::text <> '')
							and	ie_liberado = 'S';
						end if;
					end if;
					
					SELECT * FROM ctb_pls_obter_conta(cd_estabelecimento_p, dt_mesano_referencia_w, 'C', ie_tipo_contratacao_w, ie_tipo_item_w, ie_preco_w, ie_segmentacao_w, ie_regulamentacao_w, ie_participacao_w, ie_tipo_beneficiario_w, ie_cancelamento_w, nr_seq_conta_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_clinica_w, ie_tipo_segurado_w, null, null, nr_seq_item_mensal_w, null, nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w) INTO STRICT nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w;
					
					if ((nr_seq_regra_w)::numeric  > 0) then
						if (cd_historico_w = 0) then /*Falta cadastrar o historico padrao para a regra contabil */
							CALL wheb_mensagem_pck.exibir_mensagem_abort( 192547, 'NR_SEQ_REGRA='||nr_seq_regra_w );
						end if;
						
						select	max(nr_seq_grupo_ans)
						into STRICT	nr_seq_grupo_ans_w
						from	pls_regra_ctb_mensal
						where	nr_sequencia	= nr_seq_regra_w;
						
						-- Paulo OS 104607 - Nao contabilizar mensalidades de antecipacao canceladas
						update	pls_conta_coparticipacao
						set	cd_conta_cred		= cd_conta_contabil_w,
							nr_seq_regra_ctb_cred	= nr_seq_regra_w,
							nr_seq_grupo_ans	= nr_seq_grupo_ans_w,
							cd_historico		= cd_historico_w,
							cd_historico_baixa	= cd_historico_baixa_w,
							cd_conta_deb_antecip	= cd_conta_antec_w,
							cd_conta_cred_antecip	= cd_conta_antec_w,
							cd_centro_custo		= cd_centro_custo_w,
							nr_seq_rec_futura	= nr_seq_rec_futura_w
						where	nr_sequencia		= nr_seq_conta_copartic_w;
					end if;
					
					SELECT * FROM ctb_pls_obter_conta(cd_estabelecimento_p, dt_mesano_referencia_w, 'D', ie_tipo_contratacao_w, ie_tipo_item_w, ie_preco_w, ie_segmentacao_w, ie_regulamentacao_w, ie_participacao_w, ie_tipo_beneficiario_w, ie_cancelamento_w, nr_seq_conta_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_clinica_w, ie_tipo_segurado_w, null, null, nr_seq_item_mensal_w, null, nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w) INTO STRICT nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w;
					
					if ((nr_seq_regra_w)::numeric  > 0) then
						if (cd_historico_w = 0) then /*Falta cadastrar o historico padrao para a regra contabil */
							CALL wheb_mensagem_pck.exibir_mensagem_abort( 192547, 'NR_SEQ_REGRA='||nr_seq_regra_w );
						end if;
						
						select	max(nr_seq_grupo_ans)
						into STRICT	nr_seq_grupo_ans_w
						from	pls_regra_ctb_mensal
						where	nr_sequencia = nr_seq_regra_w;
						
						update	pls_conta_coparticipacao
						set	cd_conta_deb		= cd_conta_contabil_w,
							nr_seq_regra_ctb_deb	= nr_seq_regra_w,
							nr_seq_grupo_ans	= nr_seq_grupo_ans_w,
							cd_historico		= cd_historico_w,
							cd_historico_baixa	= cd_historico_baixa_w,
							cd_conta_deb_antecip	= cd_conta_antec_w,
							cd_conta_cred_antecip	= cd_conta_antec_w,
							cd_centro_custo		= cd_centro_custo_w,
							cd_conta_antec_baixa	= cd_conta_contab_baixa_antec_w,
							nr_seq_rec_futura	= nr_seq_rec_futura_w
						where	nr_sequencia		= nr_seq_conta_copartic_w;
					end if;
				end loop;
				close C04;
			elsif (ie_tipo_item_w in ('6','7')) then /*Preco pos-estabelecido*/
				open C06;
				loop
				fetch C06 into	
					nr_seq_conta_pos_estab_w,
					cd_procedimento_w,
					ie_origem_proced_w;
				EXIT WHEN NOT FOUND; /* apply on C06 */
					
					SELECT * FROM ctb_pls_obter_conta(cd_estabelecimento_p, dt_mesano_referencia_w, 'C', ie_tipo_contratacao_w, ie_tipo_item_w, ie_preco_w, ie_segmentacao_w, ie_regulamentacao_w, ie_participacao_w, ie_tipo_beneficiario_w, ie_cancelamento_w, nr_seq_conta_w, cd_procedimento_w, ie_origem_proced_w, null, ie_tipo_segurado_w, null, null, nr_seq_item_mensal_w, null, nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w) INTO STRICT nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w;
					
					if ((nr_seq_regra_w)::numeric  > 0) then
						if (cd_historico_w = 0) then /*Falta cadastrar o historico padrao para a regra contabil */
							CALL wheb_mensagem_pck.exibir_mensagem_abort(192547, 'NR_SEQ_REGRA='||nr_seq_regra_w);
						end if;
						
						select	max(nr_seq_grupo_ans)
						into STRICT	nr_seq_grupo_ans_w
						from	pls_regra_ctb_mensal
						where	nr_sequencia	= nr_seq_regra_w;
						
						update	pls_conta_pos_estabelecido
						set	cd_conta_cred		= cd_conta_contabil_w,
							nr_seq_regra_ctb_cred	= nr_seq_regra_w,
							cd_historico		= cd_historico_w,
							cd_centro_custo		= cd_centro_custo_w,
							nr_seq_rec_futura	= nr_seq_rec_futura_w,
							dt_atualizacao		= clock_timestamp(),
							nm_usuario		= nm_usuario_p
						where	nr_sequencia		= nr_seq_conta_pos_estab_w;
					end if;
					
					SELECT * FROM ctb_pls_obter_conta(cd_estabelecimento_p, dt_mesano_referencia_w, 'D', ie_tipo_contratacao_w, ie_tipo_item_w, ie_preco_w, ie_segmentacao_w, ie_regulamentacao_w, ie_participacao_w, ie_tipo_beneficiario_w, ie_cancelamento_w, nr_seq_conta_w, cd_procedimento_w, ie_origem_proced_w, null, ie_tipo_segurado_w, null, null, nr_seq_item_mensal_w, null, nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w) INTO STRICT nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w;
					
					if ((nr_seq_regra_w)::numeric  > 0) then
						if (cd_historico_w = 0) then /*Falta cadastrar o historico padrao para a regra contabil */
							CALL wheb_mensagem_pck.exibir_mensagem_abort(192547, 'NR_SEQ_REGRA='||nr_seq_regra_w );
						end if;
						
						select	max(nr_seq_grupo_ans)
						into STRICT	nr_seq_grupo_ans_w
						from	pls_regra_ctb_mensal
						where	nr_sequencia = nr_seq_regra_w;
						
						update	pls_conta_pos_estabelecido
						set	cd_conta_deb		= cd_conta_contabil_w,
							nr_seq_regra_ctb_deb	= nr_seq_regra_w,
							cd_historico		= cd_historico_w,
							cd_centro_custo		= cd_centro_custo_w,
							nr_seq_rec_futura	= nr_seq_rec_futura_w,
							dt_atualizacao		= clock_timestamp(),
							nm_usuario		= nm_usuario_p
						where	nr_sequencia		= nr_seq_conta_pos_estab_w;
					end if;
				end loop;
				close C06;
			else
				/* Conta de receita */

				SELECT * FROM ctb_pls_obter_conta(cd_estabelecimento_p, dt_mesano_referencia_w, 'C', ie_tipo_contratacao_w, ie_tipo_item_w, ie_preco_w, ie_segmentacao_w, ie_regulamentacao_w, ie_participacao_w, ie_tipo_beneficiario_w, ie_cancelamento_w, nr_seq_conta_w, null, null, null, ie_tipo_segurado_w, null, nr_seq_tipo_lanc_w, nr_seq_item_mensal_w, null, nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w) INTO STRICT nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w;
				
				if ((nr_seq_regra_w)::numeric  > 0) then
					if (cd_historico_w = 0) then /*Falta cadastrar o historico padrao para a regra contabil */
						CALL wheb_mensagem_pck.exibir_mensagem_abort( 192547, 'NR_SEQ_REGRA='||nr_seq_regra_w );
					end if;
					
					-- Paulo OS 104607 - Nao contabilizar mensalidades de antecipacao canceladas
					update	pls_mensalidade_seg_item
					set	cd_conta_rec			= cd_conta_contabil_w,
						nr_seq_regra_ctb_mensal 	= nr_seq_regra_w,
						cd_historico			= cd_historico_w,
						cd_conta_rec_antecip		= cd_conta_antec_w,
						cd_conta_deb_antecip		= cd_conta_antec_w,
						cd_historico_baixa		= cd_historico_baixa_w,
						cd_conta_antec_baixa		= cd_conta_contab_baixa_antec_w,
						cd_historico_antec		= cd_historico_antec_w,
						cd_historico_antec_baixa	= cd_historico_antec_baixa_w,
						cd_historico_rev_antec_baixa	= cd_historico_rev_baixa_w,
						cd_conta_contabil_rec_antec	= cd_conta_contabil_rec_antec_w,
						cd_historico_rec_antec		= cd_historico_rec_antec_w,
						cd_historico_rev_antec		= cd_historico_reversao_w,
						cd_historico_rev_rec_antec	= cd_historico_rev_antec_w,
                                                cd_conta_devolucao		= cd_conta_contabil_dev_w,
                                                cd_historico_devolucao		= cd_historico_dev_w,
						nr_seq_rec_futura		= nr_seq_rec_futura_w
					where	nr_sequencia			= nr_seq_item_mensal_w;
				end if;
				/* Conta de debito */

				SELECT * FROM ctb_pls_obter_conta(cd_estabelecimento_p, dt_mesano_referencia_w, 'D', ie_tipo_contratacao_w, ie_tipo_item_w, ie_preco_w, ie_segmentacao_w, ie_regulamentacao_w, ie_participacao_w, ie_tipo_beneficiario_w, ie_cancelamento_w, nr_seq_conta_w, null, null, null, ie_tipo_segurado_w, null, nr_seq_tipo_lanc_w, nr_seq_item_mensal_w, null, nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w) INTO STRICT nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_baixa_w;
				
				if ((nr_seq_regra_w)::numeric  > 0) then
					if (cd_historico_w = 0) then /*Falta cadastrar o historico padrao para a regra contabil */
						CALL wheb_mensagem_pck.exibir_mensagem_abort( 192547, 'NR_SEQ_REGRA='||nr_seq_regra_w );
					end if;
					
					update	pls_mensalidade_seg_item
					set	cd_conta_deb			= cd_conta_contabil_w,
						nr_seq_regra_ctb_mensal_deb	= nr_seq_regra_w,
						cd_historico			= cd_historico_w,
						cd_conta_rec_antecip		= cd_conta_antec_w,
						cd_conta_deb_antecip		= cd_conta_antec_w,
						cd_historico_baixa		= cd_historico_baixa_w,
						cd_conta_antec_baixa		= cd_conta_contab_baixa_antec_w,
						cd_historico_antec		= cd_historico_antec_w,
						cd_historico_antec_baixa	= cd_historico_antec_baixa_w,
						cd_historico_rev_antec_baixa	= cd_historico_rev_baixa_w,
						cd_conta_contabil_rec_antec	= cd_conta_contabil_rec_antec_w,
						cd_historico_rec_antec		= cd_historico_rec_antec_w,
						cd_historico_rev_antec		= cd_historico_reversao_w,
						cd_historico_rev_rec_antec	= cd_historico_rev_antec_w,
                                                cd_conta_devolucao		= cd_conta_contabil_dev_w,
                                                cd_historico_devolucao		= cd_historico_dev_w,
						nr_seq_rec_futura		= nr_seq_rec_futura_w
					where	nr_sequencia			= nr_seq_item_mensal_w;
				end if;
				
				qt_registros_w	:= 0;
				
				/*aaschlote 21/12/2011 OS - 387841*/

				if (ie_tipo_item_w	= '20') then
					select	count(*)
					into STRICT	qt_registros_w
					from	pls_mensalidade_seg_item
					where	nr_sequencia	= nr_seq_item_mensal_w
					and	(cd_centro_custo IS NOT NULL AND cd_centro_custo::text <> '');
				end if;
				
				if (qt_registros_w = 0) then
					begin
					update	pls_mensalidade_seg_item
					set	cd_centro_custo		= cd_centro_custo_w
					where	nr_sequencia		= nr_seq_item_mensal_w;
					exception
					when others then
						ds_erro_w	:= '';
					end;
				end if;
			end if;
		end loop;
		close c02;
	end loop;
	close c01;
	
	CALL pls_atualizar_conta_tit_mens(nr_seq_mensalidade_w,'N',nm_usuario_p);
	
	end;
end loop;
close C00;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_pls_atualizar_mensal ( nr_seq_lote_p bigint, nr_seq_mensalidade_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

