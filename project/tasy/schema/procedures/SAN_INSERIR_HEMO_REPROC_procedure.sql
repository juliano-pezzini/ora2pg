-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE san_inserir_hemo_reproc ( nr_seq_doacao_p bigint, nr_seq_producao_p bigint, nr_Seq_derivado_p bigint, qt_volume_p bigint, qt_peso_bolsa_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint) AS $body$
DECLARE


qt_peso_bolsa_w			double precision;
qt_peso_bolsa_vazia_w		double precision;
dt_vencimento_w			timestamp;
nr_seq_conservante_w		bigint;
cd_material_w			integer;
dt_validade_conservante_w	timestamp;
cd_pf_realizou_w		varchar(10);
dt_inicio_repouso_w		timestamp;
dt_fim_repouso_w		timestamp;
ds_observacao_w			varchar(255);
nr_sangue_w			varchar(20);
ie_filtrado_w			varchar(1);
ie_lavado_w			varchar(1);
ie_irradiado_w			varchar(1);
ie_aliquotado_w			varchar(1);
ie_tipo_bolsa_w			varchar(5);
cd_barras_w			varchar(30);
dt_recebimento_w		timestamp;
nr_seq_emp_ent_w		bigint;
dt_inicio_prod_emprestimo_w	timestamp;
dt_fim_prod_emprestimo_w	timestamp;
dt_producao_w			timestamp;
nr_seq_san_producao_w		bigint;
qt_volume_w			smallint;

ie_informar_peso_volume_w	varchar(1);
qt_hora_w			varchar(255);
ie_consiste_regra_prod_hem_w	varchar(1);
nr_seq_inutil_w			bigint;
nr_seq_motivo_inut_w		bigint;
ie_aferese_w			san_producao.ie_aferese%type;
nr_seq_derivado_w		san_derivado.nr_sequencia%type;
nr_sec_saude_w			san_producao.nr_sec_saude%type;


BEGIN
--dt_producao_w	:= sysdate;
select	max(dt_doacao),
	max(ie_tipo_bolsa)
into STRICT	dt_producao_w,
	ie_tipo_bolsa_w
from	san_doacao
where	nr_sequencia = nr_seq_doacao_p;

ie_informar_peso_volume_w := Obter_valor_param_usuario(450, 286, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p);
ie_consiste_regra_prod_hem_w := Obter_valor_param_usuario(450, 487, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p);

IF (nr_seq_doacao_p IS NOT NULL AND nr_seq_doacao_p::text <> '') AND (nr_Seq_derivado_p IS NOT NULL AND nr_Seq_derivado_p::text <> '') THEN

	qt_hora_w := Obter_valor_param_usuario(450, 262, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p);

	SELECT	MAX(qt_peso_bolsa),
		MAX(qt_peso_bolsa_vazia),
		MAX(CASE WHEN qt_hora_w='00:00:00' THEN  dt_producao_w+(select coalesce(max(b.qt_dias_validade),0) from san_derivado b where b.nr_sequencia = nr_seq_derivado_p)  ELSE TO_DATE(TO_CHAR(dt_producao_w+(select coalesce(max(b.qt_dias_validade),0) from san_derivado b where b.nr_sequencia = nr_seq_derivado_p),'dd/mm/yyyy')||' '||qt_hora_w,'dd/mm/yyyy hh24:mi:ss') END ),
		MAX(nr_seq_conservante),
		MAX(cd_material),
		MAX(san_calc_vencimento_conserv(dt_producao_w, nr_seq_derivado_p, nr_seq_conservante, cd_material,ie_tipo_bolsa_w))  ,
		MAX(obter_pessoa_fisica_usuario(nm_usuario_p,'C')),
		MAX(dt_inicio_repouso),
		MAX(dt_fim_repouso),
		MAX(ds_observacao),
		MAX(nr_sangue),
		MAX(ie_filtrado),
		MAX(ie_lavado),
		MAX(ie_irradiado),
		MAX(ie_aliquotado),
		max(cd_barras),
		max(a.dt_recebimento),
		max(nr_seq_emp_ent),
		max(dt_inicio_prod_emprestimo),
		max(dt_fim_prod_emprestimo),
		max(ie_aferese),
		max(nr_seq_derivado),
		max(nr_sec_saude)
	INTO STRICT	qt_peso_bolsa_w,
		qt_peso_bolsa_vazia_w,
		dt_vencimento_w,
		nr_seq_conservante_w,
		cd_material_w,
		dt_validade_conservante_w,
		cd_pf_realizou_w,
		dt_inicio_repouso_w,
		dt_fim_repouso_w,
		ds_observacao_w,
		nr_sangue_w,
		ie_filtrado_w,
		ie_lavado_w,
		ie_irradiado_w,
		ie_aliquotado_w,
		cd_barras_w,
		dt_recebimento_w,
		nr_seq_emp_ent_w,
		dt_inicio_prod_emprestimo_w,
		dt_fim_prod_emprestimo_w,
		ie_aferese_w,
		nr_seq_derivado_w,
		nr_sec_saude_w
	FROM	san_producao a
	WHERE	a.nr_sequencia = nr_seq_producao_p;
	
	if (dt_validade_conservante_w IS NOT NULL AND dt_validade_conservante_w::text <> '') then
		dt_vencimento_w := dt_validade_conservante_w;
	end if;
	
	
	update	san_producao
	set	ie_pai_reproduzido = 'S'
	where	nr_sequencia = nr_seq_producao_p;
	
	if (ie_informar_peso_volume_w = 'S') then
		
		qt_volume_w := qt_volume_p;
		
		if (coalesce(ie_tipo_bolsa_w::text, '') = '') then
			select	max(qt_peso_bolsa_vazia)
			into STRICT	qt_peso_bolsa_vazia_w
			from	san_derivado_regra
			where	nr_seq_derivado = nr_seq_derivado_p
			and	ie_situacao = 'A'
			and	coalesce(ie_tipo_bolsa_w::text, '') = '';
		elsif (ie_tipo_bolsa_w IS NOT NULL AND ie_tipo_bolsa_w::text <> '') then
			select	max(qt_peso_bolsa_vazia)
			into STRICT	qt_peso_bolsa_vazia_w
			from	san_derivado_regra
			where	nr_seq_derivado = nr_seq_derivado_p
			and	ie_situacao = 'A'
			and	ie_tipo_bolsa = ie_tipo_bolsa_w;
		end if;
		
		qt_peso_bolsa_w := san_calc_peso_hemo(	nr_seq_derivado_p,
							qt_volume_w,
							qt_peso_bolsa_vazia_w,
							nr_seq_conservante_w,
							cd_material_w,
							ie_tipo_bolsa_w);
		
	elsif (ie_informar_peso_volume_w = 'P') then
		
		qt_peso_bolsa_w := qt_peso_bolsa_p;
		
		if (coalesce(ie_tipo_bolsa_w::text, '') = '') then
			select	max(qt_peso_bolsa_vazia)
			into STRICT	qt_peso_bolsa_vazia_w
			from	san_derivado_regra
			where	nr_seq_derivado = nr_seq_derivado_p
			and	ie_situacao = 'A'
			and	coalesce(ie_tipo_bolsa_w::text, '') = '';
		elsif (ie_tipo_bolsa_w IS NOT NULL AND ie_tipo_bolsa_w::text <> '') then
			select	max(qt_peso_bolsa_vazia)
			into STRICT	qt_peso_bolsa_vazia_w
			from	san_derivado_regra
			where	nr_seq_derivado = nr_seq_derivado_p
			and	ie_situacao = 'A'
			and	ie_tipo_bolsa = ie_tipo_bolsa_w;
		end if;
		
		qt_volume_w := san_calc_volume_hemo( 	nr_seq_derivado_p,
							qt_peso_bolsa_w,
							qt_peso_bolsa_vazia_w,
							nr_seq_conservante_w,
							cd_material_w,
							ie_tipo_bolsa_w);
						
	else
		qt_volume_w := null;		
	end if;
	
	select	nextval('san_producao_seq')
	into STRICT	nr_seq_san_producao_w
	;
	
	INSERT INTO san_producao(nr_sequencia,
				nr_seq_derivado,
				dt_producao,
				qt_peso_bolsa,
				qt_peso_bolsa_vazia,
				qt_volume,
				dt_vencimento,
				nr_seq_conservante,
				cd_material,
				dt_validade_conservante,
				cd_pf_realizou,
				dt_inicio_repouso,
				dt_fim_repouso,
				ds_observacao,
				nr_seq_prod_origem,
				dt_Atualizacao,
				nm_usuario,
				nr_sangue,
				ie_filtrado,
				ie_lavado,
				ie_irradiado,
				ie_aliquotado,
				nr_seq_doacao,
				dt_recebimento,
				nr_seq_emp_ent,
				dt_inicio_prod_emprestimo,
				dt_fim_prod_emprestimo,
				dt_inicio_producao,
				nm_usuario_ini_producao,
				ie_reproduzido,
				cd_estabelecimento,
				ie_aferese,
				nr_sec_saude)
		VALUES (		nr_seq_san_producao_w,
				nr_seq_derivado_p,
				dt_producao_w,
				qt_peso_bolsa_w,
				qt_peso_bolsa_vazia_w,
				qt_volume_w,
				dt_vencimento_w,
				nr_seq_conservante_w,
				cd_material_w,
				dt_validade_conservante_w,
				cd_pf_realizou_w,
				dt_inicio_repouso_w,
				dt_fim_repouso_w,
				ds_observacao_w,
				nr_seq_producao_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_sangue_w,
				ie_filtrado_w,
				ie_lavado_w,
				ie_irradiado_w,
				ie_aliquotado_w,
				nr_seq_doacao_p,
				dt_recebimento_w,
				nr_seq_emp_ent_w,
				dt_inicio_prod_emprestimo_w,
				dt_fim_prod_emprestimo_w,
				clock_timestamp(),
				nm_usuario_p,
				'S',
				cd_estabelecimento_p,
				ie_aferese_w,
				nr_sec_saude_w);
				
	CALL san_verifica_inutil_hemo_rep(nr_seq_san_producao_w, nr_seq_derivado_p, cd_estabelecimento_p, nm_usuario_p);

	if (ie_consiste_regra_prod_hem_w = 'S') then
	
		nr_seq_motivo_inut_w	:= san_valida_vol_prod_regra(nr_seq_doacao_p, nr_seq_derivado_w,
								nr_seq_derivado_p, qt_volume_w);
		
		if (nr_seq_motivo_inut_w IS NOT NULL AND nr_seq_motivo_inut_w::text <> '') then
		
			nr_seq_inutil_w := inutiliza_hem_producao_regra(nr_seq_doacao_p, nm_usuario_p, cd_estabelecimento_p, cd_pf_realizou_w, nr_seq_motivo_inut_w, nr_seq_inutil_w);
		
			update	san_producao
			set	nr_seq_inutil 		= nr_seq_inutil_w,
				ie_local_inutilizacao	= 'P',
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario_inut		= nm_usuario_p,
				dt_inutilizacao		= clock_timestamp()
			where	nr_seq_derivado		= nr_seq_derivado_p
			and	nr_sequencia		= nr_seq_san_producao_w
			and	coalesce(dt_inutilizacao::text, '') = '';
			
		end if;
		
	end if;
	
END IF;

COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE san_inserir_hemo_reproc ( nr_seq_doacao_p bigint, nr_seq_producao_p bigint, nr_Seq_derivado_p bigint, qt_volume_p bigint, qt_peso_bolsa_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint) FROM PUBLIC;

