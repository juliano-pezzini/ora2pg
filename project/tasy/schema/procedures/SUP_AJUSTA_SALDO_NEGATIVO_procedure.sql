-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sup_ajusta_saldo_negativo ( cd_estabelecimento_p bigint, dt_mesano_referencia_p timestamp, nm_usuario_p text) AS $body$
DECLARE


cd_material_w			integer;
cd_local_estoque_w		smallint;
qt_estoque_w			double precision;
cd_unidade_medida_estoque_w	varchar(30);
cd_operacao_entrada_ajuste_w	smallint;
cd_operacao_saida_ajuste_w	smallint;
cd_funcao_ativa_w		bigint;
cd_perfil_ativo_w		bigint;
ie_permite_estoque_negativo_w	varchar(5);
ie_estoque_lote_w		varchar(1);
nr_seq_lote_fornec_w		bigint;
qt_estoque_lote_w		double precision;
qt_estoque_mat_w		double precision;
ie_disp_emprestimo_lib_w	varchar(1);
ie_disp_nf_emprestimo_w		varchar(1);

C01 CURSOR FOR
	SELECT	cd_material,
		cd_local_estoque,
		abs(qt_estoque)
	FROM	saldo_estoque
	WHERE	dt_mesano_referencia = dt_mesano_referencia_p
	AND	cd_estabelecimento = cd_estabelecimento_p
	AND	qt_estoque < 0;

C02 CURSOR FOR
	SELECT	cd_material,
		cd_local_estoque,
		abs(qt_estoque),
		nr_seq_lote
	FROM	saldo_estoque_lote
	WHERE	dt_mesano_referencia = dt_mesano_referencia_p
	AND	cd_estabelecimento = cd_estabelecimento_p
	and	cd_material = cd_material_w
	and	cd_local_estoque = cd_local_estoque_w
	AND	qt_estoque < 0;


BEGIN
cd_funcao_ativa_w := obter_funcao_ativa;
cd_perfil_ativo_w := obter_perfil_ativo;

select	cd_oper_virada_entrada,
	cd_oper_virada_saida,
	ie_permite_estoque_negativo
into STRICT	cd_operacao_entrada_ajuste_w,
	cd_operacao_saida_ajuste_w,
	ie_permite_estoque_negativo_w
from	parametro_estoque
where	cd_estabelecimento = cd_estabelecimento_p;

select	coalesce(max(ie_disp_emprestimo_lib), 'N'),
	coalesce(max(ie_disp_nf_emprestimo),'N')
into STRICT	ie_disp_emprestimo_lib_w,
	ie_disp_nf_emprestimo_w
from	parametro_estoque
where	cd_estabelecimento	= cd_estabelecimento_p;

open C01;
loop
fetch C01 into
	cd_material_w,
	cd_local_estoque_w,
	qt_estoque_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	nr_seq_lote_fornec_w	:= null;

	cd_unidade_medida_estoque_w := substr(obter_dados_material_estab(cd_material_w, cd_estabelecimento_p, 'UME'),1,30);

	ie_estoque_lote_w := coalesce(substr(obter_se_material_estoque_lote(cd_estabelecimento_p, cd_material_w),1,1),'N');

	if (ie_estoque_lote_w = 'S') then
		select	coalesce(sum(qt_estoque),0)
		into STRICT 	qt_estoque_lote_w
		from	saldo_estoque_lote
		where	dt_mesano_referencia = dt_mesano_referencia_p
		and	cd_estabelecimento = cd_estabelecimento_p
		and	cd_material = cd_material_w
		and	cd_local_estoque = cd_local_estoque_w;

		select	coalesce(sum(qt_estoque),0)
		into STRICT	qt_estoque_mat_w
		from	saldo_estoque
		where	dt_mesano_referencia = dt_mesano_referencia_p
		and	cd_estabelecimento = cd_estabelecimento_p
		and	cd_material = cd_material_w
		and	cd_local_estoque = cd_local_estoque_w;


		if (qt_estoque_mat_w <> qt_estoque_lote_w) then
			select	max(nr_seq_lote)
			into STRICT	nr_seq_lote_fornec_w
			from	saldo_estoque_lote
			where	dt_mesano_referencia = (
				SELECT	max(dt_mesano_referencia)
				from	saldo_estoque_lote
				where	cd_estabelecimento = cd_estabelecimento_p
				and	cd_material = cd_material_w
				and	cd_local_estoque = cd_local_estoque_w)
			and	cd_estabelecimento = cd_estabelecimento_p
			and	cd_material = cd_material_w
			and	cd_local_estoque = cd_local_estoque_w;


			insert into movimento_estoque(
				nr_movimento_estoque,
				cd_estabelecimento,
				cd_local_estoque,
				dt_movimento_estoque,
				cd_operacao_estoque,
				cd_acao,
				cd_material,
				dt_mesano_referencia,
				qt_movimento,
				dt_atualizacao,
				nm_usuario,
				ie_origem_documento,
				cd_unidade_medida_estoque,
				qt_estoque,
				cd_unidade_med_mov,
				cd_material_estoque,
				cd_funcao,
				cd_perfil,
				ie_movto_consignado,
				nr_seq_lote_fornec)
			values (nextval('movimento_estoque_seq'),
				cd_estabelecimento_p,
				cd_local_estoque_w,
				PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.END_OF(dt_mesano_referencia_p, 'MONTH', 0),'dd',0),
				cd_operacao_entrada_ajuste_w,
				1,
				cd_material_w,
				dt_mesano_referencia_p,
				qt_estoque_w,
				clock_timestamp(),
				nm_usuario_p,
				15,
				cd_unidade_medida_estoque_w,
				qt_estoque_w,
				cd_unidade_medida_estoque_w,
				cd_material_w,
				cd_funcao_ativa_w,
				cd_perfil_ativo_w,
				'N',
				nr_seq_lote_fornec_w);

			insert into movimento_estoque(
				nr_movimento_estoque,
				cd_estabelecimento,
				cd_local_estoque,
				dt_movimento_estoque,
				cd_operacao_estoque,
				cd_acao,
				cd_material,
				dt_mesano_referencia,
				qt_movimento,
				dt_atualizacao,
				nm_usuario,
				ie_origem_documento,
				cd_unidade_medida_estoque,
				qt_estoque,
				cd_unidade_med_mov,
				cd_material_estoque,
				cd_funcao,
				cd_perfil,
				ie_movto_consignado,
				nr_seq_lote_fornec)
			values (nextval('movimento_estoque_seq'),
				cd_estabelecimento_p,
				cd_local_estoque_w,
				PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p,1,0),'month',0),
				cd_operacao_saida_ajuste_w,
				1,
				cd_material_w,
				PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p,1,0),
				qt_estoque_w,
				clock_timestamp(),
				nm_usuario_p,
				15,
				cd_unidade_medida_estoque_w,
				qt_estoque_w,
				cd_unidade_medida_estoque_w,
				cd_material_w,
				cd_funcao_ativa_w,
				cd_perfil_ativo_w,
				'N',
				nr_seq_lote_fornec_w);


		else
			open C02;
			loop
			fetch C02 into
				cd_material_w,
				cd_local_estoque_w,
				qt_estoque_w,
				nr_seq_lote_fornec_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin

				insert into movimento_estoque(
				nr_movimento_estoque,
				cd_estabelecimento,
				cd_local_estoque,
				dt_movimento_estoque,
				cd_operacao_estoque,
				cd_acao,
				cd_material,
				dt_mesano_referencia,
				qt_movimento,
				dt_atualizacao,
				nm_usuario,
				ie_origem_documento,
				cd_unidade_medida_estoque,
				qt_estoque,
				cd_unidade_med_mov,
				cd_material_estoque,
				cd_funcao,
				cd_perfil,
				ie_movto_consignado,
				nr_seq_lote_fornec)
			values (nextval('movimento_estoque_seq'),
				cd_estabelecimento_p,
				cd_local_estoque_w,
				PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.END_OF(dt_mesano_referencia_p, 'MONTH', 0),'dd',0),
				cd_operacao_entrada_ajuste_w,
				1,
				cd_material_w,
				dt_mesano_referencia_p,
				qt_estoque_w,
				clock_timestamp(),
				nm_usuario_p,
				15,
				cd_unidade_medida_estoque_w,
				qt_estoque_w,
				cd_unidade_medida_estoque_w,
				cd_material_w,
				cd_funcao_ativa_w,
				cd_perfil_ativo_w,
				'N',
				nr_seq_lote_fornec_w);

			insert into movimento_estoque(
				nr_movimento_estoque,
				cd_estabelecimento,
				cd_local_estoque,
				dt_movimento_estoque,
				cd_operacao_estoque,
				cd_acao,
				cd_material,
				dt_mesano_referencia,
				qt_movimento,
				dt_atualizacao,
				nm_usuario,
				ie_origem_documento,
				cd_unidade_medida_estoque,
				qt_estoque,
				cd_unidade_med_mov,
				cd_material_estoque,
				cd_funcao,
				cd_perfil,
				ie_movto_consignado,
				nr_seq_lote_fornec)
			values (nextval('movimento_estoque_seq'),
				cd_estabelecimento_p,
				cd_local_estoque_w,
				PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p,1,0),'month',0),
				cd_operacao_saida_ajuste_w,
				1,
				cd_material_w,
				PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p,1,0),
				qt_estoque_w,
				clock_timestamp(),
				nm_usuario_p,
				15,
				cd_unidade_medida_estoque_w,
				qt_estoque_w,
				cd_unidade_medida_estoque_w,
				cd_material_w,
				cd_funcao_ativa_w,
				cd_perfil_ativo_w,
				'N',
				nr_seq_lote_fornec_w);

				end;
			end loop;
			close C02;
		end if;
	else
		insert into movimento_estoque(
			nr_movimento_estoque,
			cd_estabelecimento,
			cd_local_estoque,
			dt_movimento_estoque,
			cd_operacao_estoque,
			cd_acao,
			cd_material,
			dt_mesano_referencia,
			qt_movimento,
			dt_atualizacao,
			nm_usuario,
			ie_origem_documento,
			cd_unidade_medida_estoque,
			qt_estoque,
			cd_unidade_med_mov,
			cd_material_estoque,
			cd_funcao,
			cd_perfil,
			ie_movto_consignado)
		values (nextval('movimento_estoque_seq'),
			cd_estabelecimento_p,
			cd_local_estoque_w,
			PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.END_OF(dt_mesano_referencia_p, 'MONTH', 0),'dd',0),
			cd_operacao_entrada_ajuste_w,
			1,
			cd_material_w,
			dt_mesano_referencia_p,
			qt_estoque_w,
			clock_timestamp(),
			nm_usuario_p,
			15,
			cd_unidade_medida_estoque_w,
			qt_estoque_w,
			cd_unidade_medida_estoque_w,
			cd_material_w,
			cd_funcao_ativa_w,
			cd_perfil_ativo_w,
			'N');

		insert into movimento_estoque(
			nr_movimento_estoque,
			cd_estabelecimento,
			cd_local_estoque,
			dt_movimento_estoque,
			cd_operacao_estoque,
			cd_acao,
			cd_material,
			dt_mesano_referencia,
			qt_movimento,
			dt_atualizacao,
			nm_usuario,
			ie_origem_documento,
			cd_unidade_medida_estoque,
			qt_estoque,
			cd_unidade_med_mov,
			cd_material_estoque,
			cd_funcao,
			cd_perfil,
			ie_movto_consignado)
		values (nextval('movimento_estoque_seq'),
			cd_estabelecimento_p,
			cd_local_estoque_w,
			PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p,1,0),'month',0),
			cd_operacao_saida_ajuste_w,
			1,
			cd_material_w,
			PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p,1,0),
			qt_estoque_w,
			clock_timestamp(),
			nm_usuario_p,
			15,
			cd_unidade_medida_estoque_w,
			qt_estoque_w,
			cd_unidade_medida_estoque_w,
			cd_material_w,
			cd_funcao_ativa_w,
			cd_perfil_ativo_w,
			'N');
	end if;
	end;
end loop;
close C01;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sup_ajusta_saldo_negativo ( cd_estabelecimento_p bigint, dt_mesano_referencia_p timestamp, nm_usuario_p text) FROM PUBLIC;

