-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mprev_consiste_inc_part_turma ( nr_seq_turma_p mprev_grupo_col_turma.nr_sequencia%type, nr_seq_grupo_turm_partic_p mprev_grupo_turma_partic.nr_sequencia%type, dt_referencia_p timestamp, nr_seq_participante_p mprev_participante.nr_sequencia%type default null, nm_usuario_p text DEFAULT NULL, ie_motivo_p INOUT text DEFAULT NULL, ds_motivo_p INOUT text DEFAULT NULL) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Consistir a inclusão do participante na turma
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [  X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
-------------------------------------------------------------------------------------------------------------------
Referências:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qt_max_participante_w		mprev_grupo_col_turma.qt_max_participante%type;
qt_registros_w			bigint;
qt_aprovacao_necessaria_w	bigint;


BEGIN

select	max(qt_max_participante)
into STRICT	qt_max_participante_w
from	mprev_grupo_col_turma
where	nr_sequencia	= nr_seq_turma_p;

if (coalesce(qt_max_participante_w,0) <> 0) then
	select	count(1)
	into STRICT	qt_registros_w
	from	MPREV_GRUPO_TURMA_PARTIC
	where	nr_seq_turma	= nr_seq_turma_p
	and	nr_sequencia	<> coalesce(nr_seq_grupo_turm_partic_p,-1)
	and	((coalesce(dt_saida::text, '') = '') or (dt_saida >= clock_timestamp()));

	if (qt_registros_w >= qt_max_participante_w) then
		ie_motivo_p	:= 1;
		ds_motivo_p	:= substr(wheb_mensagem_pck.get_texto(290924,'NM_TURMA=' || substr(mprev_obter_nm_turma(nr_seq_turma_p),1,255)||
								';QT_MAXIMA='||qt_max_participante_w||';QT_ATUAL='||qt_registros_w),1,255);
	end if;
end if;

/* Consistir se precisa de aprovação (workflow) */

select	count(1)
into STRICT	qt_aprovacao_necessaria_w
from	mprev_grupo_col_turma b,
	mprev_grupo_col_aprovacao a
where	a.nr_seq_grupo = b.nr_seq_grupo_coletivo
and	b.nr_sequencia = nr_seq_turma_p;

if (qt_aprovacao_necessaria_w > 0) then
	select	count(1)
	into STRICT	qt_registros_w
	from	mprev_grupo_turma_espera b,
		mprev_grupo_turma_aprov a
	where	a.nr_seq_espera = b.nr_sequencia
	and	b.nr_seq_participante 	= nr_seq_participante_p
	and	b.nr_seq_turma		= nr_seq_turma_p
	and	(b.dt_aprovacao IS NOT NULL AND b.dt_aprovacao::text <> '');

	if (qt_aprovacao_necessaria_w <> qt_registros_w) then
		/* É necessário aprovação de profissional para incluir na turma X */

		ie_motivo_p	:= 2;
		ds_motivo_p	:= substr(wheb_mensagem_pck.get_texto(294242,'NM_TURMA=' || substr(mprev_obter_nm_turma(nr_seq_turma_p),1,255)),1,255);

		qt_registros_w := 0;

		select	count(*)
		into STRICT	qt_registros_w
		from	mprev_grupo_turma_espera
		where	nr_seq_turma = nr_seq_turma_p
		and	nr_seq_participante = nr_seq_participante_p
		and	coalesce(dt_remocao::text, '') = '';

		if (qt_registros_w = 0) then
			CALL mprev_add_grupo_turma_espera(nr_seq_turma_p,nr_seq_participante_p,ie_motivo_p,nm_usuario_p, 'G', 1, '');
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_consiste_inc_part_turma ( nr_seq_turma_p mprev_grupo_col_turma.nr_sequencia%type, nr_seq_grupo_turm_partic_p mprev_grupo_turma_partic.nr_sequencia%type, dt_referencia_p timestamp, nr_seq_participante_p mprev_participante.nr_sequencia%type default null, nm_usuario_p text DEFAULT NULL, ie_motivo_p INOUT text DEFAULT NULL, ds_motivo_p INOUT text DEFAULT NULL) FROM PUBLIC;

