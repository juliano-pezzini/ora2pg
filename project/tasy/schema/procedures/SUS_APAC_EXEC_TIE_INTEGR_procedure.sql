-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_apac_exec_tie_integr ( cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type ) AS $body$
DECLARE


cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type not null := cd_estabelecimento_p;
nm_usuario_w		usuario.nm_usuario%type	not null := nm_usuario_p;
ds_json_w		varchar(2000);
dt_data_format_w	varchar(100);

YEAR_W 		constant varchar(4) := 'YEAR';
MONTH_W 	constant varchar(5) := 'MONTH';
DAY_W 		constant varchar(3) := 'DAY';
HIPHEN_W 	constant varchar(1) := '-';
TZ_HR_W 	constant varchar(19) := 'T00:00:00.000-03:00';

OPEN_JSON_W 	constant varchar(1) := '{';
DT_INIT_W 	constant varchar(24) := '"DT_INICIO_CADASTRO" : ';
NR_GERPAC_W 	constant varchar(23) := '"DS_PROTOCOLO_SOLIC" : ';
COMMA_W 	constant varchar(1) := ',';
QUOT_MARK_W 	constant varchar(1) := '"';
CLOSE_JSON_W 	constant varchar(1) := '}';
TRUNC_DAY_W 	constant varchar(2) := 'dd';

INTEGRATION_CODE_W constant integer := 1002;

laudos CURSOR FOR
SELECT 	nr_protocolo_gerpac
from	sus_laudo_paciente
where	(dt_envio_gerpac IS NOT NULL AND dt_envio_gerpac::text <> '')
and	(nr_protocolo_gerpac IS NOT NULL AND nr_protocolo_gerpac::text <> '')
and	trunc(dt_envio_gerpac, TRUNC_DAY_W) = trunc(clock_timestamp(), TRUNC_DAY_W);

BEGIN

	if coalesce(wheb_usuario_pck.get_cd_estabelecimento::text, '') = '' then
		CALL wheb_usuario_pck.set_cd_estabelecimento(cd_estabelecimento_w);
	end if;

	if coalesce(wheb_usuario_pck.get_nm_usuario::text, '') = '' then
		CALL wheb_usuario_pck.set_nm_usuario(nm_usuario_w);
	end if;

	/* Convert current date to ISO-8601. */

	dt_data_format_w := pkg_date_utils.extract_field(field => YEAR_W, baseDate => clock_timestamp())
	|| HIPHEN_W || pkg_date_utils.extract_field(field => MONTH_W, baseDate => clock_timestamp())
	|| HIPHEN_W || pkg_date_utils.extract_field(field => DAY_W, baseDate => clock_timestamp())
	|| TZ_HR_W;

	for laudo in laudos loop
	
		/* Create JSON. */

		ds_json_w := OPEN_JSON_W
			|| DT_INIT_W   || QUOT_MARK_W || dt_data_format_w || QUOT_MARK_W || COMMA_W
			|| NR_GERPAC_W || QUOT_MARK_W || laudo.nr_protocolo_gerpac || QUOT_MARK_W
			|| CLOSE_JSON_W;
		
		/* 
			Execute integration request.
			1002 => "API - GET - APAC Executor" flow code.
		*/
		
		CALL execute_bifrost_integration(cd_integration_p => INTEGRATION_CODE_W,
			ds_parameters_p => ds_json_w);
			
		
	end loop;

	

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_apac_exec_tie_integr ( cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type ) FROM PUBLIC;

