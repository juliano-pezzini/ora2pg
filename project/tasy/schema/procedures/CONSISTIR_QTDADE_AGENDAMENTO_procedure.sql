-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_qtdade_agendamento ( nr_seq_agenda_p bigint, nm_usuario_p text, ds_consistencia_p INOUT text) AS $body$
DECLARE


dt_inicial_w		timestamp;
dt_final_w		timestamp;
qt_agendamento_w	bigint;
qt_agend_regra_w	bigint;
cd_convenio_w		integer;
nr_sequencia_w		bigint;
cd_agenda_w		bigint;
cd_agenda_ww		bigint;
ds_agenda_w		varchar(1000);
ie_proceed_w 		varchar(1) := 'S';

					
C01 CURSOR FOR
	SELECT	qt_agendamento,
		nr_sequencia
	from	regra_agendamento_horario
	where	coalesce(cd_convenio, coalesce(cd_convenio_w,0))	=	coalesce(cd_convenio_w,0);
	
C02 CURSOR FOR
	SELECT	cd_agenda
	from	regra_sala_excluir_hor
	where	nr_seq_regra = nr_sequencia_w;
					

BEGIN
begin
	select	cd_agenda,
		hr_inicio,
		hr_inicio + (nr_minuto_duracao / 1440) - (1/86400),
		cd_convenio
	into STRICT	cd_agenda_ww,
		dt_inicial_w,
		dt_final_w,
		cd_convenio_w
	from	agenda_paciente
	where	nr_sequencia	= nr_seq_agenda_p;	
exception
	when 	no_data_found then
		ie_proceed_w := 'N';

end;
if (ie_proceed_w = 'S') then
	open C01;
	loop
	fetch C01 into	
		qt_agend_regra_w,
		nr_sequencia_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		open C02;
		loop
		fetch C02 into	
			cd_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			if (coalesce(ds_agenda_w::text, '') = '') then
				ds_agenda_w	:= to_char(cd_agenda_w);
			else
				ds_agenda_w	:= ds_agenda_w || ',' || to_char(cd_agenda_w);
			end if;
			end;
		end loop;
		close C02;
		
		select	count(*)
		into STRICT	qt_agendamento_w
		from	agenda_paciente b
		where	((hr_inicio between dt_inicial_w and dt_final_w) or
			 (hr_inicio + (nr_minuto_duracao / 1440) - (1/86400) between dt_inicial_w and dt_final_w) or
			 ((hr_inicio < dt_inicial_w) and (hr_inicio + (nr_minuto_duracao / 1440) - (1/86400) > dt_final_w)))
		and	b.nr_sequencia <> coalesce(nr_seq_agenda_p,0)
		and	b.cd_convenio = cd_convenio_w
		and	obter_se_contido(cd_agenda,ds_agenda_w) = 'N'
		and	obter_tipo_agenda(cd_agenda) = 1
		and	ie_status_agenda not in ('L','C','B');
		
			
		if (qt_agendamento_w >= qt_agend_regra_w) and (obter_se_contido(cd_agenda_ww,ds_agenda_w) = 'N') then
			ds_consistencia_p := obter_desc_expressao(933094, null) || ' ' || to_char(qt_agend_regra_w);
		end if;
			
		end;
	end loop;
	close C01;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_qtdade_agendamento ( nr_seq_agenda_p bigint, nm_usuario_p text, ds_consistencia_p INOUT text) FROM PUBLIC;

