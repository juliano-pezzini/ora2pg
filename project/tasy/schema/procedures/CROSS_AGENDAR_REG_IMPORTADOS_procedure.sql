-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cross_agendar_reg_importados () AS $body$
DECLARE


    c CURSOR FOR
    SELECT
        g.*
    FROM
        gercon_solic_consulta g
    WHERE
        g.ie_status = 'I';

    c_01                    c%rowtype;
    tipo_agenda_paciente_w  gercon_solic_consulta.cd_tipo_agenda%TYPE := 2;
    tipo_agenda_consulta_w  gercon_solic_consulta.cd_tipo_agenda%TYPE := 3;
    qt_agendamentos_w agenda_paciente.qt_idade_meses%TYPE;
    cd_pessoa_fisica_w agenda.cd_pessoa_fisica%TYPE;
	
    NM_USUARIO_CROSS_W constant     gercon_solic_consulta.nm_usuario%TYPE := 'Cross';
	IE_ACAO_AGENDAMENTO_W	constant reg_age_evento.ie_acao%TYPE := 'A';
	IE_STATUS_ERRO_W constant reg_age_evento.ie_status%TYPE := 'E';
	IE_STATUS_AGENDADO_W constant reg_age_evento.ie_status%TYPE := 'A';
	
    ie_erro_w               gercon_solic_consulta.ie_status%TYPE;
    ds_erro_w               gercon_solic_consulta.ds_erro_agendamento%TYPE;
    nr_seq_agenda_w         agenda_consulta.nr_sequencia%TYPE;
    cd_tipo_agenda_w        gercon_solic_consulta.cd_tipo_agenda%TYPE;
    qt_idade_w         agenda_paciente.qt_idade_paciente%TYPE;
    nr_seq_evento_w reg_age_evento.nr_sequencia%TYPE;
    dt_ajust_func_w gercon_solic_consulta.cd_cid%TYPE;
  cd_medico_w GERCON_SOLIC_CONSULTA.CD_MEDICO%TYPE;
	
  IE_STATUS_LIVRE_W constant agenda_consulta.ie_status_agenda%type := 'L';
  IE_STATUS_FORCADO_W constant agenda_consulta.ie_status_agenda%type := 'LF';
  IE_STATUS_FALTA_W constant agenda_consulta.ie_status_agenda%type := 'F';
  IE_STATUS_FALTA_JUST_W constant agenda_consulta.ie_status_agenda%type := 'I';
  IE_STATUS_CANCELADO_W constant agenda_consulta.ie_status_agenda%type := 'C';
  IE_STATUS_CONFIR_W constant agenda_consulta.ie_status_agenda%type := 'CN';
  IE_ACAO_TRANSF_W constant reg_age_evento.ie_Acao%type := 'T';

  ie_acao_w  reg_age_evento.ie_Acao%type;
  dt_agenda_evento_w REG_AGE_EVENTO.dt_agenda%TYPE;

BEGIN
    OPEN c;
    LOOP
        FETCH c INTO c_01;
        EXIT WHEN NOT FOUND; /* apply on c */
        BEGIN
		
		select 	max(ie_Acao),
				max(nr_sequencia),
				max(dt_agenda)
		INTO STRICT 	ie_acao_w,
				nr_seq_evento_w,
				dt_agenda_evento_w
		from 	reg_age_evento r
		where	r.nr_Seq_solic = c_01.nr_sequencia
		and r.dt_atualizacao =
		(SELECT max(x.dt_atualizacao) from reg_age_evento x where x.nr_seq_solic = c_01.nr_sequencia);

    SELECT
      MAX(pf0.cd_pessoa_fisica)
    INTO STRICT
      cd_medico_w
    FROM PESSOA_FISICA pf0
    INNER JOIN MEDICO m0 ON (
      m0.cd_pessoa_fisica = pf0.cd_pessoa_fisica
    )
    INNER JOIN PF_CODIGO_EXTERNO pce0 ON (
      pce0.cd_pessoa_fisica = pf0.cd_pessoa_fisica
    )
    WHERE
      pce0.cd_pessoa_fisica_externo = c_01.cd_medico  LIMIT 1;
		
		if (ie_acao_w = IE_ACAO_TRANSF_W and (nr_seq_evento_w IS NOT NULL AND nr_seq_evento_w::text <> '')) then -- se a ultima acao foi transferencia, o o status da solicitacao esta como I, o usuario tentou alterar o horario para reagendar a transferencia.
			if (dt_agenda_evento_w <> c_01.dt_agenda) then
				update reg_age_evento
				set dt_agenda = c_01.dt_agenda
				where nr_Sequencia = nr_seq_evento_w;
			end if;
		
			CALL CROSS_AGENDAR_REG_TRANSFERIDOS(nr_seq_evento_w);
			commit;
		else
            SELECT
                cross_validar_existencia_pf(c_01.cd_paciente_externo,
												 c_01.nr_cpf,
												 c_01.nr_cartao_nac_sus,
                                                 c_01.nm_mae,
                                                 c_01.dt_nascimento,
                                                 c_01.nm_pessoa_fisica)
            INTO STRICT cd_pessoa_fisica_w
;

            IF cd_pessoa_fisica_w = 'N' THEN
                SELECT
                    CASE
                        WHEN (c_01.dt_nascimento IS NOT NULL AND c_01.dt_nascimento::text <> '') THEN
                            to_char(c_01.dt_nascimento,'yyyy/mm/dd')
                        ELSE
                            to_char(clock_timestamp(),'yyyy/mm/dd')
                    END as correcao_data
                INTO STRICT dt_ajust_func_w
;
                cd_pessoa_fisica_w := inserir_pf_conexa(c_01.nm_pessoa_fisica, c_01.cd_paciente_externo, c_01.ie_sexo, dt_ajust_func_w, c_01.nr_rg, c_01.nr_cpf, c_01.nm_mae, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, c_01.nr_cartao_nac_sus, NM_USUARIO_CROSS_W, cd_pessoa_fisica_w);
            END IF;

            ie_erro_w := 'N';
            ds_erro_w := NULL;
            qt_idade_w := NULL;

            CASE c_01.cd_tipo_agenda
            WHEN tipo_agenda_consulta_w THEN
				SELECT
					MAX(c.nr_sequencia)
				INTO STRICT
					nr_seq_agenda_w
				FROM
					agenda_consulta c,
					agenda a
				WHERE
					a.cd_agenda = c.cd_agenda
					AND	c.dt_agenda = c_01.dt_agenda
					AND c.ie_status_agenda IN ( IE_STATUS_LIVRE_W, IE_STATUS_FORCADO_W )
					AND a.cd_agenda_externa = to_char(c_01.cd_agenda_externa);

				IF coalesce(nr_seq_agenda_w::text, '') = '' THEN
					ie_erro_w := 'S';
					ds_erro_w := obter_expressao_dic_objeto(1112604);
				END IF;

				IF ie_erro_w = 'N' THEN
                    SELECT
                        COUNT(*)
                    INTO STRICT qt_agendamentos_w
                    FROM
                        agenda_consulta  c
						inner join agenda a on c.cd_agenda = a.cd_agenda
                    WHERE
                        c.dt_agenda = c_01.dt_agenda
                        AND c.cd_pessoa_fisica = cd_pessoa_fisica_w
                        AND c.ie_status_agenda NOT IN ( IE_STATUS_CANCELADO_W, IE_STATUS_FALTA_W, IE_STATUS_FALTA_JUST_W )
                        AND a.cd_tipo_agenda IN ( tipo_agenda_consulta_w );

                    IF qt_agendamentos_w > 0 THEN
                        ie_erro_w := 'S';
                        ds_erro_w := obter_expressao_dic_objeto(1112605);
                    END IF;

                    IF ie_erro_w = 'N' THEN
                        IF (c_01.dt_nascimento IS NOT NULL AND c_01.dt_nascimento::text <> '') THEN
                                qt_idade_w:= trunc(months_between(trunc(clock_timestamp()), c_01.dt_nascimento) / 12);
                        END IF;
                            UPDATE agenda_consulta a
                            SET
                                a.dt_agendamento = coalesce(a.dt_agendamento, clock_timestamp()),
                                a.nm_usuario = NM_USUARIO_CROSS_W,
                                a.nm_usuario_origem = NM_USUARIO_CROSS_W,
                                a.ie_status_agenda = IE_STATUS_CONFIR_W,
                                a.cd_pessoa_fisica = cd_pessoa_fisica_w,
                                a.nm_paciente = c_01.nm_pessoa_fisica,
                                a.qt_idade_pac = qt_idade_w,
                                a.dt_nascimento_pac = c_01.dt_nascimento,
                                a.ie_classif_agenda = coalesce(a.ie_classif_agenda, c_01.ie_classif_agenda),
                                a.cd_cid = c_01.cd_cid,
                                a.cd_medico_req = cd_medico_w,
								a.cd_agendamento_externo = c_01.cd_agendamento_externo
                            WHERE
                                a.nr_sequencia = nr_seq_agenda_w;
                    END IF;
                END IF;
            WHEN tipo_agenda_paciente_w THEN
				SELECT
					MAX(p.nr_sequencia)
				INTO STRICT
					nr_seq_agenda_w
				FROM
					agenda_paciente p,
					agenda a
				WHERE
				a.cd_agenda = p.cd_agenda
                AND p.hr_inicio = c_01.dt_agenda
                AND p.ie_status_agenda IN ( IE_STATUS_LIVRE_W, IE_STATUS_FORCADO_W )
                AND a.cd_agenda_externa = to_char(c_01.cd_agenda_externa);

				IF coalesce(nr_seq_agenda_w::text, '') = '' THEN
					ie_erro_w := 'S';
					ds_erro_w := obter_expressao_dic_objeto(1112604);
				END IF;

                IF ie_erro_w = 'N' THEN
                    SELECT
                        COUNT(*)
                    INTO STRICT qt_agendamentos_w
                    FROM
                        agenda_paciente  p
						inner join agenda a on p.cd_agenda = a.cd_agenda
                    WHERE
						p.hr_inicio = c_01.dt_agenda
                        AND p.cd_pessoa_fisica = cd_pessoa_fisica_w
                        AND p.ie_status_agenda NOT IN ( IE_STATUS_CANCELADO_W, IE_STATUS_FALTA_W, IE_STATUS_FALTA_JUST_W )
                        AND a.cd_tipo_agenda IN ( tipo_agenda_paciente_w );

                    IF qt_agendamentos_w > 0 THEN
                        ie_erro_w := 'S';
                        ds_erro_w := obter_expressao_dic_objeto(1112605);
                    END IF;

                    IF ie_erro_w = 'N' THEN
                        IF (c_01.dt_nascimento IS NOT NULL AND c_01.dt_nascimento::text <> '') THEN
                            qt_idade_w:= trunc(months_between(trunc(clock_timestamp()), c_01.dt_nascimento) / 12);
                        END IF;
                            UPDATE agenda_paciente p
                            SET
                                p.dt_agendamento = coalesce(p.dt_agendamento, clock_timestamp()),
                                p.nm_usuario = NM_USUARIO_CROSS_W,
                                p.nm_usuario_orig = NM_USUARIO_CROSS_W,
                                p.ie_status_agenda = IE_STATUS_CONFIR_W,
                                p.cd_pessoa_fisica = cd_pessoa_fisica_w,
                                p.nm_paciente = c_01.nm_pessoa_fisica,
                                p.qt_idade_paciente = qt_idade_w,
                                p.dt_nascimento_pac = c_01.dt_nascimento,
                                p.cd_doenca_cid = c_01.cd_cid,
                                p.cd_medico_req = cd_medico_w,
								p.cd_agendamento_externo = c_01.cd_agendamento_externo
                            WHERE
                                p.nr_sequencia = nr_seq_agenda_w;
                    END IF;
                END IF;
			else
				ie_erro_w := 'S';
				ds_erro_w := obter_expressao_dic_objeto(1112606);
            END CASE;

            IF ie_erro_w = 'S' THEN
                UPDATE gercon_solic_consulta
                SET
                    ie_status = IE_STATUS_ERRO_W,
                    ds_erro_agendamento = ds_erro_w,
					nm_usuario = NM_USUARIO_CROSS_W,
					dt_atualizacao = clock_timestamp()
                WHERE
                    nr_sequencia = c_01.nr_sequencia;

                INSERT INTO reg_age_evento(nr_sequencia, nr_seq_solic, nm_usuario, nm_usuario_nrec, dt_atualizacao, dt_atualizacao_nrec, ie_status, ds_erro_agendamento, ie_acao, dt_agenda)
                VALUES (nextval('reg_age_evento_seq'), c_01.nr_sequencia, NM_USUARIO_CROSS_W, NM_USUARIO_CROSS_W, clock_timestamp(), clock_timestamp(), IE_STATUS_ERRO_W, ds_erro_w, IE_ACAO_AGENDAMENTO_W, c_01.dt_agenda);
            ELSE
                UPDATE gercon_solic_consulta
                SET
                    ie_status = IE_STATUS_AGENDADO_W,
                    ds_erro_agendamento = ds_erro_w,
					nm_usuario = NM_USUARIO_CROSS_W,
					dt_atualizacao = clock_timestamp()
                WHERE
                    nr_sequencia = c_01.nr_sequencia;

                INSERT INTO reg_age_evento(nr_sequencia, nr_seq_solic, nm_usuario, nm_usuario_nrec, dt_atualizacao, dt_atualizacao_nrec,  ie_status, ds_erro_agendamento, ie_acao, dt_agenda)
                VALUES (nextval('reg_age_evento_seq'), c_01.nr_sequencia, NM_USUARIO_CROSS_W, NM_USUARIO_CROSS_W, clock_timestamp(), clock_timestamp(), IE_STATUS_AGENDADO_W, ds_erro_w, IE_ACAO_AGENDAMENTO_W, c_01.dt_agenda);
            END IF;

            COMMIT;
			
		end if;
        END;
    END LOOP;
    CLOSE c;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cross_agendar_reg_importados () FROM PUBLIC;

