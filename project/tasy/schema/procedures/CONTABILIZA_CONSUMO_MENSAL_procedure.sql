-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE contabiliza_consumo_mensal ( nr_lote_contabil_p bigint, nm_usuario_p text, ie_exclusao_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


cd_empresa_w                            empresa.cd_empresa%type;
cd_estabelecimento_w                    estabelecimento.cd_estabelecimento%type;
cd_estab_movto_w                        estabelecimento.cd_estabelecimento%type;
cd_material_w                           material.cd_material%type;
cd_conta_contabil_w                     conta_contabil.cd_conta_contabil%type;
cd_conta_receita_w                      conta_contabil.cd_conta_contabil%type;
cd_centro_custo_w                       centro_custo.cd_centro_custo%type;
vl_movimento_w                          double precision;
cd_historico_w                          historico_padrao.cd_historico%type;
cd_historico_ww                         bigint;
nr_sequencia_movto_w                    integer;
dt_movimento_w                          timestamp;
dt_mesano_referencia_w                  timestamp;
ds_compl_historico_w                    varchar(255)   := '';
ds_complemento_w                        varchar(255)   := '';
ds_doc_agrupamento_w                    varchar(50)    := '';
nr_seq_agrupamento_w                    w_movimento_contabil.nr_seq_agrupamento%type;
ie_clinica_w                            integer;
cd_local_estoque_w                      smallint    := Null;
cd_operacao_estoque_w                   bigint;
cd_tipo_lote_contabil_w                 bigint;
ds_local_estoque_w                      local_estoque.ds_local_estoque%type;
ds_local_consumo_w                      varchar(80);
ie_debito_credito_w                     varchar(01);
cd_hist_transf_entrada_w                bigint;
cd_hist_transf_saida_w                  bigint;
cd_hist_transf_w                        bigint;
ie_mat_contab_cons_w                    varchar(01);
ds_material_w                           material.ds_material%type;
ie_mes_contab_w                         varchar(03);
ie_compl_hist_w                         varchar(1);
ds_conteudo_w                           varchar(4000);
ds_mesano_referencia_w                  varchar(30);
qt_lotes_gerados_w                      bigint;
ie_compl_historico_w                    varchar(1);
cd_conta_debito_w                       varchar(20);
cd_historico_debito_w                   bigint;
ds_operacao_estoque_w                   varchar(40);
ie_resumo_movto_estoque_dia_w           varchar(1);
dt_dia_contabil_w                       timestamp;
nm_estabelecimento_w                    varchar(255);
cd_grupo_material_w                     bigint;
cd_subgrupo_material_w                  bigint;
cd_classe_material_w                    bigint;
ds_classe_material_w                    varchar(240);
ds_grupo_material_w                     varchar(240);
ds_subgrupo_material_w                  varchar(240);
cd_evento_w                             bigint;
cd_historico_evento_w                   bigint;
ie_historico_evento_oper_w              varchar(1);
ie_contab_consignado_w                  parametro_estoque.ie_contab_consignado%type;
ie_contab_consig_op_w                   operacao_estoque.ie_contab_consignado%type;
cd_unidade_medida_consumo_w             varchar(30);
qt_consumo_w                            double precision;
ie_permite_estab_dif_w                  varchar(15);
cd_historico_ct_w                       historico_padrao.cd_historico%type;
cd_conta_transitoria_w                  conta_contabil.cd_conta_contabil%type;
nm_agrupador_w                          varchar(255);
ds_mes_ano_w                            varchar(10);
ie_centro_custo_w                       conta_contabil.ie_centro_custo%type;
ie_ctb_estab_centro_w                   parametro_estoque.ie_ctb_estab_centro%type;
cd_fornecedor_w                         resumo_movto_estoque.cd_fornecedor%type;
cd_conta_pj_consig_faturar_w            pessoa_jur_conta_cont.cd_conta_contabil%type;
ie_consignado_w                         resumo_movto_estoque.ie_consignado%type;
cd_sequencia_parametro_w                bigint;
cd_sequencia_parametro_ww		parametros_conta_contabil.cd_sequencia_parametro%type;
nm_tabela_w                             w_movimento_contabil.nm_tabela%type;
nm_atributo_w                           w_movimento_contabil.nm_atributo%type;

/* Cursor para ler os Movimentos a serem contabilizados */

c000 CURSOR FOR
        SELECT  cd_material,
                cd_centro_custo,
                a.cd_local_estoque,
                a.cd_operacao_estoque,
                sum(CASE WHEN b.ie_entrada_saida='S' THEN  vl_estoque  ELSE vl_estoque * -1 END ),
                '',
                '',
                0,
                substr(obter_desc_local_estoque(a.cd_local_estoque),1,80),
                coalesce(sum(a.qt_consumo),0) qt_consumo,
                a.cd_fornecedor,
                coalesce(a.ie_consignado,'N') ie_consignado,
                coalesce(b.ie_contab_consignado,'S') ie_contab_consig_op_w,
		'RESUMO_MOVTO_ESTOQUE' nm_tabela,
		'VL_ESTOQUE' nm_atributo
        from    operacao_estoque b,
                resumo_movto_estoque a
        where   a.dt_mesano_referencia          = trunc(dt_mesano_referencia_w,'month')
        and     a.cd_estabelecimento            = cd_estabelecimento_w
        and     (a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '')
        and (coalesce(a.ie_consignado,'N')       = 'N' or ie_contab_consignado_w = 'S')
        and     a.cd_operacao_estoque           = b.cd_operacao_estoque
        and     ie_exclusao_p                   = 'N'
        and     ie_resumo_movto_estoque_dia_w   = 'N'
        group by
                cd_material,
                cd_centro_custo,
                a.cd_local_estoque,
                a.cd_operacao_estoque,
                substr(obter_desc_local_estoque(a.cd_local_estoque),1,80),
                a.cd_fornecedor,
                coalesce(a.ie_consignado,'N'),
                coalesce(b.ie_contab_consignado,'S')

union all

        SELECT  cd_material,
                cd_centro_custo,
                a.cd_local_estoque,
                a.cd_operacao_estoque,
                sum(vl_estoque),
                substr(obter_desc_local_estoque(cd_local_destino),1,80),
                CASE WHEN b.ie_entrada_saida='S' THEN 'C'  ELSE 'D' END ,
                CASE WHEN b.ie_entrada_saida='S' THEN  cd_hist_transf_saida_w  ELSE cd_hist_transf_entrada_w END ,
                '',
                coalesce(sum(a.qt_consumo),0),
                a.cd_fornecedor,
                coalesce(a.ie_consignado,'N') ie_consignado,
                coalesce(b.ie_contab_consignado,'S') ie_contab_consig_op_w,
		'RESUMO_MOVTO_ESTOQUE' nm_tabela,
		'VL_ESTOQUE' nm_atributo
        from    operacao_estoque b,
                resumo_movto_estoque a
        where   a.dt_mesano_referencia          = trunc(dt_mesano_referencia_w,'month')
        and     a.cd_estabelecimento            = cd_estabelecimento_w
        and     (a.cd_local_destino IS NOT NULL AND a.cd_local_destino::text <> '')
        and (coalesce(a.ie_consignado,'N')       = 'N' or ie_contab_consignado_w = 'S')
        and     a.cd_operacao_estoque           = b.cd_operacao_estoque
        and     ie_exclusao_p                   = 'N'
        and     (cd_hist_transf_entrada_w IS NOT NULL AND cd_hist_transf_entrada_w::text <> '')
        and     (cd_hist_transf_saida_w IS NOT NULL AND cd_hist_transf_saida_w::text <> '')
        and     ie_resumo_movto_estoque_dia_w   = 'N'
        and     b.ie_tipo_requisicao            = '2'
        group by
                cd_material,
                cd_centro_custo,
                a.cd_local_estoque,
                a.cd_operacao_estoque,
                substr(obter_desc_local_estoque(cd_local_destino),1,80),
                b.ie_entrada_saida,
                a.cd_fornecedor,
                coalesce(a.ie_consignado,'N'),
                coalesce(b.ie_contab_consignado,'S')
        
union all
                       /* Contabilizacao diaria do consumo */
        select  cd_material,
                cd_centro_custo,
                a.cd_local_estoque,
                a.cd_operacao_estoque,
                sum(CASE WHEN b.ie_entrada_saida='S' THEN  vl_estoque  ELSE vl_estoque * -1 END ),
                '',
                '',
                0,
                substr(obter_desc_local_estoque(a.cd_local_estoque),1,80),
                coalesce(sum(a.qt_estoque),0),
                a.cd_fornecedor,
                coalesce(a.ie_consignado,'N') ie_consignado,
                coalesce(b.ie_contab_consignado,'S') ie_contab_consig_op_w,
		'RESUMO_MOVTO_ESTOQUE_DIA' nm_tabela,
		'VL_ESTOQUE' nm_atributo
        from    operacao_estoque b,
                resumo_movto_estoque_dia a
        where   a.cd_estabelecimento            = cd_estabelecimento_w
                /*a.dt_mesano_referencia        = trunc(dt_mesano_referencia_w,'month')*/

        and     (a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '')
        and (coalesce(a.ie_consignado,'N')       = 'N' or ie_contab_consignado_w = 'S')
        and     a.cd_operacao_estoque           = b.cd_operacao_estoque
        and     ie_exclusao_p                   = 'N'
        and     ie_resumo_movto_estoque_dia_w   = 'S'
        and     a.dt_dia                        = dt_dia_contabil_w
        group by
                cd_material,
                cd_centro_custo,
                a.cd_local_estoque,
                a.cd_operacao_estoque,
                substr(obter_desc_local_estoque(a.cd_local_estoque),1,80),
                a.cd_fornecedor,
                coalesce(a.ie_consignado,'N'),
                coalesce(b.ie_contab_consignado,'S')
        
union all

        select  cd_material,
                cd_centro_custo,
                a.cd_local_estoque,
                a.cd_operacao_estoque,
                sum(vl_estoque),
                substr(obter_desc_local_estoque(cd_local_destino),1,80),
                CASE WHEN b.ie_entrada_saida='S' THEN 'C'  ELSE 'D' END ,
                CASE WHEN b.ie_entrada_saida='S' THEN  cd_hist_transf_saida_w  ELSE cd_hist_transf_entrada_w END ,
                '',
                coalesce(sum(a.qt_estoque),0),
                a.cd_fornecedor,
                coalesce(a.ie_consignado,'N') ie_consignado,
                coalesce(b.ie_contab_consignado,'S') ie_contab_consig_op_w,
		'RESUMO_MOVTO_ESTOQUE_DIA' nm_tabela,
		'VL_ESTOQUE' nm_atributo
        from    operacao_estoque b,
                resumo_movto_estoque_dia a
        where   a.cd_estabelecimento            = cd_estabelecimento_w
                /*a.dt_mesano_referencia        = trunc(dt_mesano_referencia_w,'month')*/

        and     (a.cd_local_destino IS NOT NULL AND a.cd_local_destino::text <> '')
        and (coalesce(a.ie_consignado,'N')       = 'N' or ie_contab_consignado_w = 'S')
        and     a.cd_operacao_estoque           = b.cd_operacao_estoque
        and     ie_exclusao_p                   = 'N'
        and     (cd_hist_transf_entrada_w IS NOT NULL AND cd_hist_transf_entrada_w::text <> '')
        and     (cd_hist_transf_saida_w IS NOT NULL AND cd_hist_transf_saida_w::text <> '')
        and     ie_resumo_movto_estoque_dia_w   = 'S'
        and     a.dt_dia                        = dt_dia_contabil_w
        and     b.ie_tipo_requisicao            = '2'
        group by
                cd_material,
                cd_centro_custo,
                a.cd_local_estoque,
                a.cd_operacao_estoque,
                substr(obter_desc_local_estoque(cd_local_destino),1,80),
                b.ie_entrada_saida,
                a.cd_fornecedor,
                coalesce(a.ie_consignado,'N'),
                coalesce(b.ie_contab_consignado,'S');


BEGIN
/*Validacao para impedir a geracao em lotes incorretos */

if (ie_exclusao_p <> 'S') then
        select b.cd_tipo_lote_contabil
        into STRICT cd_tipo_lote_contabil_w
        from lote_contabil b
        where b.nr_lote_contabil = nr_lote_contabil_p;
        if (cd_tipo_lote_contabil_w <> 3) then
                CALL wheb_mensagem_pck.exibir_mensagem_abort(261346);
        end if;
end if;
ds_retorno_p    := null;
ie_contab_consignado_w  := 'S';
cd_sequencia_parametro_w := null;

/* Identifica o Estabelecimento do Lote Contabil */

select  cd_estabelecimento,
        dt_referencia,
        cd_tipo_lote_contabil
into STRICT    cd_estabelecimento_w,
        dt_mesano_referencia_w,
        cd_tipo_lote_contabil_w
from    lote_contabil
where   nr_lote_contabil        = nr_lote_contabil_p;

select  max(nm_fantasia_estab)
into STRICT    nm_estabelecimento_w
from    estabelecimento
where   cd_estabelecimento      = cd_estabelecimento_w;

cd_empresa_w            := obter_empresa_estab(cd_estabelecimento_w);
dt_dia_contabil_w       := trunc(dt_mesano_referencia_w,'dd');

begin
        select  cd_hist_transf_entrada,
                cd_hist_transf_saida,
                ie_mat_contab_cons,
                ie_mes_contab,
                coalesce(ie_compl_historico,'N'),
                coalesce(ie_contab_consumo_dia,'N'),
                coalesce(ie_historico_evento_oper,'N'),
                coalesce(ie_ctb_estab_centro,'N'),
                coalesce(ie_contab_consignado,'N')
        into STRICT    cd_hist_transf_entrada_w,
                cd_hist_transf_saida_w,
                ie_mat_contab_cons_w,
                ie_mes_contab_w,
                ie_compl_historico_w,
                ie_resumo_movto_estoque_dia_w,
                ie_historico_evento_oper_w,
                ie_ctb_estab_centro_w,
                ie_contab_consignado_w
        from    parametro_estoque
        where   cd_estabelecimento      = cd_estabelecimento_w;
        exception when no_data_found then
                CALL wheb_mensagem_pck.exibir_mensagem_abort(338526);
end;

SELECT * FROM ctb_obter_regra_estab_dif(cd_estabelecimento_w, cd_tipo_lote_contabil_w, null, ie_permite_estab_dif_w, cd_conta_transitoria_w, cd_historico_ct_w) INTO STRICT ie_permite_estab_dif_w, cd_conta_transitoria_w, cd_historico_ct_w;

if (ie_resumo_movto_estoque_dia_w = 'N') then
        dt_movimento_w          := last_day(trunc(dt_mesano_referencia_w,'dd'));

        select  count(*)
        into STRICT    qt_lotes_gerados_w
        from    lote_contabil
        where   trunc(dt_referencia,'month')    = trunc(dt_mesano_referencia_w,'month')
        and     cd_tipo_lote_contabil           = cd_tipo_lote_contabil_w
        and     nr_lote_contabil                <> nr_lote_contabil_p
        and     cd_estabelecimento              = cd_estabelecimento_w;
elsif (ie_resumo_movto_estoque_dia_w          = 'S') then
        dt_movimento_w                          := dt_dia_contabil_w;

        select  count(*)
        into STRICT    qt_lotes_gerados_w
        from    lote_contabil
        where   trunc(dt_referencia,'dd')       = trunc(dt_mesano_referencia_w,'dd')
        and     cd_tipo_lote_contabil           = cd_tipo_lote_contabil_w
        and     nr_lote_contabil                <> nr_lote_contabil_p
        and     cd_estabelecimento              = cd_estabelecimento_w;
end if;

if (qt_lotes_gerados_w > 0) and (ie_exclusao_p = 'N') then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(198984);
        /*Ja existe um lote gerado para esta data de referencia. Verifique.*/

end if;

ie_compl_hist_w := substr(obter_se_compl_tipo_lote(cd_estabelecimento_w, cd_tipo_lote_contabil_w),1,1);

/* Consiste a data de referencia */

if (coalesce(dt_mesano_referencia_w::text, '') = '')  then
        ds_retorno_p    := wheb_mensagem_pck.get_texto(337762);
        /*'A data de Referencia esta invalida'*/

end if;

/* Identifica se e exclusao do lote */

if (ie_exclusao_p = 'S') and (coalesce(ds_retorno_p::text, '') = '') then
        CALL ctb_regras_contabil.comprovante_cache_storage(nr_lote_contabil_p, nm_usuario_p);
        delete from movimento_contabil
        where  nr_lote_contabil = nr_lote_contabil_p;
        commit;
end if;

/* Leitura para identificar o codigo do historico */

select  max(cd_historico)
into STRICT    cd_historico_w
from    evento_contabil_param_estab
where   cd_tipo_lote_contabil   = 3
and     cd_estabelecimento      = cd_estabelecimento_w;

cd_historico_ww := cd_historico_w;

if (coalesce(cd_historico_w,0) = 0) then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(198985);
        --Falta informar os parametros do estabelecimento no Evento Contabil.
end if;

delete  FROM w_movimento_contabil
where   nr_lote_contabil = nr_lote_contabil_p;

ds_mesano_referencia_w  := substr(obter_desc_mes_ano(dt_mesano_referencia_w, ie_mes_contab_w),1,30);
nr_sequencia_movto_w    := 0;
nm_agrupador_w          := coalesce(trim(both obter_agrupador_contabil(3)),'DS_MES_ANO');

open c000;
loop
fetch c000 into
        cd_material_w,
        cd_centro_custo_w,
        cd_local_estoque_w,
        cd_operacao_estoque_w,
        vl_movimento_w,
        ds_local_estoque_w,
        ie_debito_credito_w,
        cd_hist_transf_w,
        ds_local_consumo_w,
        qt_consumo_w,
        cd_fornecedor_w,
        ie_consignado_w,
        ie_contab_consig_op_w,
	nm_tabela_w,
	nm_atributo_w;
EXIT WHEN NOT FOUND; /* apply on c000 */

ds_compl_historico_w    := ds_mesano_referencia_w;
cd_historico_w          := cd_historico_ww;
cd_sequencia_parametro_ww := null;

if (ie_mat_contab_cons_w = 'S') then
        select  max(ds_material)
        into STRICT    ds_material_w
        from    material
        where   cd_material             = cd_material_w;
        ds_compl_historico_w            := substr(to_char(dt_mesano_referencia_w,'mm/yyyy') || ' ' || ds_material_w,1,255);
end if;
ds_operacao_estoque_w   := substr(obter_desc_operacao_estoque(cd_operacao_estoque_w),1,40);
cd_estab_movto_w        := cd_estabelecimento_w;
if (ie_ctb_estab_centro_w = 'S') then
        begin
        select  cd_estabelecimento
        into STRICT    cd_estab_movto_w
        from    centro_custo
        where   cd_centro_custo = cd_centro_custo_w;
        exception when others then
                cd_estab_movto_w        := cd_estabelecimento_w;
        end;
end if;
begin
select  cd_grupo_material,
        cd_subgrupo_material,
        cd_classe_material,
        ds_grupo_material,
        ds_subgrupo_material,
        ds_classe_material
into STRICT    cd_grupo_material_w,
        cd_subgrupo_material_w,
        cd_classe_material_w,
        ds_grupo_material_w,
        ds_subgrupo_material_w,
        ds_classe_material_w
from    estrutura_material_v
where   cd_material     = cd_material_w;
cd_unidade_medida_consumo_w     := coalesce(substr(obter_dados_material(cd_material_w, 'UMC'),1,30),'');
exception when others then
        cd_grupo_material_w     := null;
        cd_subgrupo_material_w  := null;
        cd_classe_material_w    := null;
        ds_grupo_material_w     := null;
        ds_subgrupo_material_w  := null;
        ds_classe_material_w    := null;
end;
if (ie_resumo_movto_estoque_dia_w = 'S')then
        ds_mes_ano_w    :=      to_char(dt_mesano_referencia_w,'DDMMYYYY');
else
        ds_mes_ano_w    :=      to_char(dt_mesano_referencia_w,'MMYYYY');
end if;
if (nm_agrupador_w = 'CD_CLASSE_MATERIAL') then
        nr_seq_agrupamento_w    := cd_classe_material_w;
elsif (nm_agrupador_w = 'CD_SUBGRUPO_MATERIAL') then
        nr_seq_agrupamento_w    := cd_subgrupo_material_w;
elsif (nm_agrupador_w = 'CD_GRUPO_MATERIAL') then
        nr_seq_agrupamento_w    := cd_grupo_material_w;
elsif (nm_agrupador_w = 'CD_OPERACAO_ESTOQUE')         then
        nr_seq_agrupamento_w :=  cd_operacao_estoque_w;
elsif (nm_agrupador_w = 'DS_MES_ANO')  then
        nr_seq_agrupamento_w :=  somente_numero(substr(ds_mes_ano_w,1,8));
elsif (nm_agrupador_w = 'CD_MATERIAL')         then
        nr_seq_agrupamento_w :=  cd_material_w;
end if;
if (coalesce(nr_seq_agrupamento_w,0) = 0)then
        nr_seq_agrupamento_w := ds_mes_ano_w;
end if;
if (cd_centro_custo_w IS NOT NULL AND cd_centro_custo_w::text <> '') then
        nr_sequencia_movto_w    :=      nr_sequencia_movto_w + 1;
end if;
if (coalesce(ie_historico_evento_oper_w,'N') = 'S') then
        select  max(cd_evento)
        into STRICT    cd_evento_w
        from    operacao_estoque
        where   cd_operacao_estoque     = cd_operacao_estoque_w;
        select  max(cd_historico)
        into STRICT    cd_historico_evento_w
        from    evento_contabil_param_estab
        where   cd_evento               = cd_evento_w
        and     cd_tipo_lote_contabil   = cd_tipo_lote_contabil_w
        and     cd_estabelecimento      = cd_estabelecimento_w;
        cd_historico_w          := coalesce(cd_historico_evento_w, cd_historico_w);
end if;
if (ie_compl_hist_w = 'S') then
        ds_conteudo_w   := substr(
                dt_mesano_referencia_w          || '#@' ||
                ds_local_estoque_w              || '#@' ||
                ds_mesano_referencia_w          || '#@' ||
                ds_material_w                   || '#@' ||
                cd_operacao_estoque_w           || '#@' ||
                ds_local_consumo_w              || '#@' ||
                ds_operacao_estoque_w           || '#@' ||
                nm_estabelecimento_w            || '#@' ||
                ds_grupo_material_w             || '#@' ||
                ds_subgrupo_material_w          || '#@' ||
                ds_classe_material_w            || '#@' ||
                cd_unidade_medida_consumo_w     || '#@' ||
                qt_consumo_w                    || '#@' ||
                nr_sequencia_movto_w            || '#@' ||
                cd_material_w,1,4000);
        ds_complemento_w        := obter_compl_historico(cd_tipo_lote_contabil_w, cd_historico_w, ds_conteudo_w);
end if;
ds_compl_historico_w    := substr(coalesce(ds_complemento_w, ds_compl_historico_w),1,255);
if (ie_compl_historico_w = 'S') then /*Matheus OS 113168 17/10/2008*/
        ds_compl_historico_w    := substr(ds_complemento_w,1,255);
end if;
select  coalesce(max(obter_conta_hist_oper_estoque(cd_empresa_w,cd_operacao_estoque_w,'C')),'') cd_conta,
        coalesce(max(obter_conta_hist_oper_estoque(cd_empresa_w,cd_operacao_estoque_w,'H')),'') cd_historico
into STRICT    cd_conta_debito_w,
        cd_historico_debito_w
;
if (cd_centro_custo_w IS NOT NULL AND cd_centro_custo_w::text <> '') then
        --nr_sequencia_movto_w  :=      nr_sequencia_movto_w + 1;
        SELECT * FROM define_conta_material(
                cd_estabelecimento_w, cd_material_w, 2, null, 0, '0', 0, null, null, null, cd_local_estoque_w, cd_operacao_estoque_w, dt_movimento_w, cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

                cd_sequencia_parametro_w := philips_contabil_pck.get_parametro_conta_contabil();

if (coalesce(cd_conta_contabil_w::text, '') = '') then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(198988,'CD_MATERIAL_W='||cd_material_w ||'CD_LOCAL_ESTOQUE_W='||cd_local_estoque_w);
        --Nao foi encontrada conta de credito (baixa estoque) para material = ' ||  cd_material_w || ' local de estoque: ' || cd_local_estoque_w
end if;
if (ie_consignado_w = 'N') or
        (ie_consignado_w = 'S' AND ie_contab_consig_op_w = 'S') then
        insert into w_movimento_contabil(
                nr_lote_contabil,
                nr_sequencia,
                cd_conta_contabil,
                ie_debito_credito,
                cd_historico,
                dt_movimento,
                vl_movimento,
                cd_centro_custo,
                ds_compl_historico,
                ds_doc_agrupamento,
                nr_seq_agrupamento,
                nr_seq_trans_fin,
                cd_cgc,
                cd_pessoa_fisica,
                nr_documento,
                ie_transitorio,
                cd_sequencia_parametro,
                nr_codigo_controle,
		nr_seq_info,
		nm_tabela,
		nm_atributo)
        values (
                nr_lote_contabil_p,
                nr_sequencia_movto_w,
                cd_conta_contabil_w,
                'C',
                cd_historico_w,
                dt_movimento_w,
                vl_movimento_w,
                null,
                ds_compl_historico_w,
                ds_doc_agrupamento_w,
                nr_seq_agrupamento_w,
                null,
                null,
                null,
                null,
                'N',
                cd_sequencia_parametro_w,
                null,				
		96,
		nm_tabela_w,
		nm_atributo_w);
        cd_conta_contabil_w     := null;
        SELECT * FROM define_conta_material(
                cd_estabelecimento_w, cd_material_w, 3, ie_clinica_w, 0, '0', 0, null, null, null, cd_local_estoque_w, cd_operacao_estoque_w, dt_movimento_w, cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
        cd_sequencia_parametro_w := philips_contabil_pck.get_parametro_conta_contabil();
        cd_conta_contabil_w     := coalesce(cd_conta_debito_w,cd_conta_contabil_w);
        cd_historico_w          := coalesce(cd_historico_debito_w,cd_historico_w);
        if (coalesce(cd_conta_contabil_w::text, '') = '') then
                CALL wheb_mensagem_pck.exibir_mensagem_abort(198989,'CD_MATERIAL_W='||cd_material_w||'CD_LOCAL_ESTOQUE_W='||cd_local_estoque_w);
                --Nao foi encontrada conta de debito (custo)para material = ' || cd_material_w || ' local de estoque: ' || cd_local_estoque_w ||
        end if;
        begin
        select  ie_centro_custo
        into STRICT    ie_centro_custo_w
        from    conta_contabil
        where   cd_conta_contabil       = cd_conta_contabil_w;
        exception when others then
                ie_centro_custo_w       := 'N';
        end;
        insert into w_movimento_contabil(
                nr_lote_contabil,
                nr_sequencia,
                cd_conta_contabil,
                ie_debito_credito,
                cd_historico,
                dt_movimento,
                vl_movimento,
                cd_centro_custo,
                ds_compl_historico,
                ds_doc_agrupamento,
                nr_seq_agrupamento,
                nr_seq_trans_fin,
                cd_cgc,
                cd_pessoa_fisica,
                nr_documento,
                ie_transitorio,
                cd_estabelecimento,
                cd_sequencia_parametro,
                nr_codigo_controle,
		nr_seq_info,
		nm_tabela,
		nm_atributo)
        values (
                nr_lote_contabil_p,
                nr_sequencia_movto_w,
                cd_conta_contabil_w,
                'D',
                cd_historico_w,
                dt_movimento_w,
                vl_movimento_w,
                CASE WHEN ie_centro_custo_w='S' THEN cd_centro_custo_w  ELSE null END ,
                ds_compl_historico_w,
                ds_doc_agrupamento_w,
                nr_seq_agrupamento_w,
                null,
                null,
                null,
                null,
                'N',
                cd_estab_movto_w,
                cd_sequencia_parametro_w,
                null,
		96,
		nm_tabela_w,
		nm_atributo_w);
end if;
SELECT * FROM define_conta_material(
        cd_estabelecimento_w, cd_material_w, 10, ie_clinica_w, 0, '0', 0, null, null, null, cd_local_estoque_w, cd_operacao_estoque_w, dt_movimento_w, cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
cd_sequencia_parametro_w := philips_contabil_pck.get_parametro_conta_contabil();
if (ie_consignado_w = 'S') then
        select  obter_conta_contab_pj(cd_empresa_w, cd_estabelecimento_w, cd_fornecedor_w, 'C', dt_mesano_referencia_w)
        into STRICT    cd_conta_pj_consig_faturar_w
;
        if (coalesce(cd_conta_contabil_w,'0') <> '0') and (coalesce(cd_conta_pj_consig_faturar_w, '0') <> '0') then
                begin
                        select ie_centro_custo
                        into STRICT ie_centro_custo_w
                        from conta_contabil a
                        where a.cd_conta_contabil = cd_conta_contabil_w;
                exception
                when others then
                        ie_centro_custo_w := 'S';
                end;
                insert into w_movimento_contabil(
                        nr_lote_contabil,
                        nr_sequencia,
                        cd_conta_contabil,
                        ie_debito_credito,
                        cd_historico,
                        dt_movimento,
                        vl_movimento,
                        cd_centro_custo,
                        ds_compl_historico,
                        ds_doc_agrupamento,
                        nr_seq_agrupamento,
                        nr_seq_trans_fin,
                        cd_cgc,
                        cd_pessoa_fisica,
                        nr_documento,
                        ie_transitorio,
                        cd_estabelecimento,
                        cd_sequencia_parametro,
                        nr_codigo_controle,
			nr_seq_info,
			nm_tabela,
			nm_atributo)
                values (
                        nr_lote_contabil_p,
                        nr_sequencia_movto_w,
                        cd_conta_contabil_w,
                        'D',
                        cd_historico_w,
                        dt_movimento_w,
                        vl_movimento_w,
                        CASE WHEN ie_centro_custo_w='S' THEN cd_centro_custo_w  ELSE null END ,
                        ds_compl_historico_w,
                        ds_doc_agrupamento_w,
                        nr_seq_agrupamento_w,
                        null,
                        null,
                        null,
                        null,
                        'N',
                        cd_estab_movto_w,
                        cd_sequencia_parametro_w,
                        null,
			96,
			nm_tabela_w,
			nm_atributo_w);
                begin
                        select ie_centro_custo
                        into STRICT ie_centro_custo_w
                        from conta_contabil a
                        where a.cd_conta_contabil = cd_conta_pj_consig_faturar_w;
                exception
                when others then
                        ie_centro_custo_w := 'S';
                end;
                insert into w_movimento_contabil(
                        nr_lote_contabil,
                        nr_sequencia,
                        cd_conta_contabil,
                        ie_debito_credito,
                        cd_historico,
                        dt_movimento,
                        vl_movimento,
                        cd_centro_custo,
                        ds_compl_historico,
                        ds_doc_agrupamento,
                        nr_seq_agrupamento,
                        nr_seq_trans_fin,
                        cd_cgc,
                        cd_pessoa_fisica,
                        nr_documento,
                        ie_transitorio,
                        cd_estabelecimento,
                        cd_sequencia_parametro,
                        nr_codigo_controle,
			nr_seq_info,
			nm_tabela,
			nm_atributo)
                values (
                        nr_lote_contabil_p,
                        nr_sequencia_movto_w,
                        cd_conta_pj_consig_faturar_w,
                        'C',
                        cd_historico_w,
                        dt_movimento_w,
                        vl_movimento_w,
                        CASE WHEN ie_centro_custo_w='S' THEN cd_centro_custo_w  ELSE null END ,
                        ds_compl_historico_w,
                        ds_doc_agrupamento_w,
                        nr_seq_agrupamento_w,
                        null,
                        null,
                        null,
                        null,
                        'N',
                        cd_estab_movto_w,
                        cd_sequencia_parametro_w,
                        null,
			96,
			nm_tabela_w,
			nm_atributo_w);
        end if;
end if;
/*Maicon Eduardo Prange 14/11/2017 OS 1453745*/

SELECT * FROM define_conta_material(
        cd_estabelecimento_w, cd_material_w, 9, ie_clinica_w, 0, '0', 0, null, null, null, cd_local_estoque_w, cd_operacao_estoque_w, dt_movimento_w, cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
		
cd_sequencia_parametro_ww := philips_contabil_pck.get_parametro_conta_contabil();


if (coalesce(cd_conta_contabil_w,'0') <> '0') then
        SELECT * FROM define_conta_material(
                cd_estabelecimento_w, cd_material_w, 3, ie_clinica_w, 0, '0', 0, null, null, null, cd_local_estoque_w, cd_operacao_estoque_w, dt_movimento_w, cd_conta_receita_w, cd_centro_custo_w, null) INTO STRICT cd_conta_receita_w, cd_centro_custo_w;
        cd_sequencia_parametro_w := philips_contabil_pck.get_parametro_conta_contabil();

if (coalesce(cd_conta_receita_w,'0') <> '0') then
        begin
        select  ie_centro_custo
        into STRICT    ie_centro_custo_w
        from    conta_contabil
        where   cd_conta_contabil       = cd_conta_contabil_w;
        exception when others then
                ie_centro_custo_w       := 'N';
        end;
        insert into w_movimento_contabil(
                nr_lote_contabil,
                nr_sequencia,
                cd_conta_contabil,
                ie_debito_credito,
                cd_historico,
                dt_movimento,
                vl_movimento,
                cd_centro_custo,
                ds_compl_historico,
                ds_doc_agrupamento,
                nr_seq_agrupamento,
                nr_seq_trans_fin,
                cd_cgc,
                cd_pessoa_fisica,
                nr_documento,
                ie_transitorio,
                cd_estabelecimento,
                cd_sequencia_parametro,
                nr_codigo_controle,
		nr_seq_info,
		nm_tabela,
		nm_atributo)
        values (
                nr_lote_contabil_p,
                nr_sequencia_movto_w,
                cd_conta_contabil_w,
                'D',
                cd_historico_w,
                dt_movimento_w,
                vl_movimento_w,
                CASE WHEN ie_centro_custo_w='S' THEN cd_centro_custo_w  ELSE null END ,
                ds_compl_historico_w,
                ds_doc_agrupamento_w,
                nr_seq_agrupamento_w,
                null,
                null,
                null,
                null,
                'N',
                cd_estab_movto_w,
                cd_sequencia_parametro_ww,
                null,
		96,
		nm_tabela_w,
		nm_atributo_w);
        begin
        select  ie_centro_custo
        into STRICT    ie_centro_custo_w
        from    conta_contabil
        where   cd_conta_contabil       = cd_conta_receita_w;
        exception when others then
                ie_centro_custo_w       := 'N';
        end;
        insert into w_movimento_contabil(
                nr_lote_contabil,
                nr_sequencia,
                cd_conta_contabil,
                ie_debito_credito,
                cd_historico,
                dt_movimento,
                vl_movimento,
                cd_centro_custo,
                ds_compl_historico,
                ds_doc_agrupamento,
                nr_seq_agrupamento,
                nr_seq_trans_fin,
                cd_cgc,
                cd_pessoa_fisica,
                nr_documento,
                ie_transitorio,
                cd_sequencia_parametro,
                nr_codigo_controle,
		nr_seq_info,
		nm_tabela,
		nm_atributo)
        values (
                nr_lote_contabil_p,
                nr_sequencia_movto_w,
                cd_conta_receita_w,
                'C',
                cd_historico_w,
                dt_movimento_w,
                vl_movimento_w,
                CASE WHEN ie_centro_custo_w='S' THEN cd_centro_custo_w  ELSE null END ,
                ds_compl_historico_w,
                ds_doc_agrupamento_w,
                nr_seq_agrupamento_w,
                null,
                null,
                null,
                null,
                'N',
                cd_sequencia_parametro_w,
                null,
		96,
		nm_tabela_w,
		nm_atributo_w);
        end if;
end if;
       --//*Maicon Eduardo Prange 14/11/2017 OS 1453745*/
        else
                cd_conta_contabil_w     := null;
                SELECT * FROM define_conta_material(
                        cd_estabelecimento_w, cd_material_w, 2, ie_clinica_w, 0, '0', 0, null, null, null, cd_local_estoque_w, cd_operacao_estoque_w, dt_movimento_w, cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

                cd_sequencia_parametro_w := philips_contabil_pck.get_parametro_conta_contabil();

                if (ie_debito_credito_w = 'D') then
                        cd_conta_contabil_w     := coalesce(cd_conta_debito_w,cd_conta_contabil_w);
                        cd_hist_transf_w        := coalesce(cd_historico_debito_w,cd_hist_transf_w);
                end if;

                if (cd_conta_contabil_w IS NOT NULL AND cd_conta_contabil_w::text <> '') then
                        ds_compl_historico_w            := substr(coalesce(ds_complemento_w,
                                                                ds_compl_historico_w || ' ' || WHEB_MENSAGEM_PCK.get_texto(804189) || ' ' || ds_local_estoque_w),1,255);
                        insert into w_movimento_contabil(
                                nr_lote_contabil,
                                nr_sequencia,
                                cd_conta_contabil,
                                ie_debito_credito,
                                cd_historico,
                                dt_movimento,
                                vl_movimento,
                                cd_centro_custo,
                                ds_compl_historico,
                                ds_doc_agrupamento,
                                nr_seq_agrupamento,
                                nr_seq_trans_fin,
                                cd_cgc,
                                cd_pessoa_fisica,
                                nr_documento,
                                ie_transitorio,
                                cd_sequencia_parametro,
                                nr_codigo_controle,
				nr_seq_info,
				nm_tabela,
				nm_atributo)
                        values (
                                nr_lote_contabil_p,
                                nr_sequencia_movto_w,
                                cd_conta_contabil_w,
                                ie_debito_credito_w,
                                cd_hist_transf_w,
                                dt_movimento_w,
                                vl_movimento_w,
                                cd_centro_custo_w,
                                ds_compl_historico_w,
                                ds_doc_agrupamento_w,
                                nr_seq_agrupamento_w,
                                null,
                                null,
                                null,
                                null,
                                'N',
                                cd_sequencia_parametro_w,
                                null,
				96,
				nm_tabela_w,
				nm_atributo_w);
                end if;
        end if;
end loop;
close c000;

if (pkg_i18n.get_user_locale = 'es_BO' AND ie_exclusao_p = 'N') then
        BEGIN
                CALL ctb_regras_contabil.CTB_GERAR_CD_CONTROLE_CONSUMO(nr_lote_contabil_p, nm_usuario_p);
        EXCEPTION WHEN OTHERS THEN
                CALL ctb_gravar_log_lote(nr_lote_contabil_p, 1, SQLERRM, nm_usuario_p);
        END;
end if;

CALL Agrupa_Movimento_Contabil(nr_lote_contabil_p, nm_usuario_p);

if (coalesce(ds_retorno_p::text, '') = '') then
        update  lote_contabil
        set     ie_situacao = 'A',
                dt_geracao_lote = clock_timestamp()
        where   nr_lote_contabil = nr_lote_contabil_p;

        if (ie_exclusao_p = 'S') then
                ds_retorno_p            := wheb_mensagem_pck.get_texto(299468);
                CALL ctb_gravar_log_lote( nr_lote_contabil_p, 2, '', nm_usuario_p);
        else
                CALL ctb_gravar_log_lote( nr_lote_contabil_p, 1, '', nm_usuario_p);
                ds_retorno_p            := wheb_mensagem_pck.get_texto(299469);
        end if;
        commit;
else
        rollback;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE contabiliza_consumo_mensal ( nr_lote_contabil_p bigint, nm_usuario_p text, ie_exclusao_p text, ds_retorno_p INOUT text) FROM PUBLIC;

