-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_conta_pos_estab_part ((nr_seq_conta_pos_p bigint, ie_commit_p text, nm_usuario_p text, ie_ajustar_valores_p text default 'N') is nr_seq_conta_proc_w bigint) RETURNS bigint AS $body$
DECLARE

				
vl_glosa_part_w		pls_conta_medica_resumo.vl_glosa%type;		
vl_glosa_tot_consid_w	pls_conta_medica_resumo.vl_glosa%type;
vl_proporcao_w		double precision;
				
BEGIN

	select  max(coalesce(vl_glosa,0)),
		max(( 	select sum(coalesce(vl_glosa,0))
			from	pls_conta_medica_resumo b
			where 	a.nr_seq_conta = b.nr_seq_conta
			and 	a.nr_seq_conta_proc = b.nr_seq_conta_proc
			and ((b.ie_status 	<> 'C') or (coalesce(b.ie_status::text, '') = '')))) vl_glosa_tot_consid
	into STRICT	vl_glosa_part_w,
		vl_glosa_tot_consid_w
	from	pls_conta_medica_resumo a
	where 	nr_seq_conta = nr_seq_conta_p
	and	nr_seq_conta_proc = nr_seq_conta_proc_p
	and 	nr_seq_participante = nr_seq_partic_p;
	
	if ( vl_glosa_part_w != vl_glosa_tot_consid_w) then
	
		vl_proporcao_w := dividir(vl_glosa_part_w, vl_glosa_tot_consid_w);
	
	end if;
	
	if ( vl_proporcao_w != 1 and vl_proporcao_w != 0) then
		return vl_benef_proc_w * vl_proporcao_w;
	else
		return vl_benef_proc_w;
	end if;
end;
	
begin

select	max(nr_seq_conta_proc),
		max(tx_administracao),
		max(coalesce(vl_medico,0) + coalesce(vl_lib_taxa_servico,0)),
		max(coalesce(vl_materiais,0) + coalesce(vl_custo_operacional,0) + coalesce(vl_lib_taxa_co,0) + coalesce(vl_lib_taxa_material,0) + coalesce(vl_medico,0)),
		max(vl_lib_taxa_servico),
		max(qt_item),
		max(coalesce(ie_vl_pag_prestador,'N')),
		max(ie_origem_valor_pos),
		max(nr_seq_conta_rec)
into STRICT	nr_seq_conta_proc_w,
	tx_administracao_w,
	vl_benef_proc_w,
	vl_total_adicionais_w,
	vl_taxa_servico_w,
	qt_item_w,
	ie_vl_pag_prestador_w,
	ie_origem_valor_pos_w,
	nr_seq_conta_rec_w
from	pls_conta_pos_estabelecido
where	nr_sequencia = nr_seq_conta_pos_p;

if (ie_ajustar_valores_p = 'N') then

	delete 	FROM pls_conta_pos_estab_partic
	where	nr_seq_conta_pos = nr_seq_conta_pos_p
	and	ie_alterado_pos != 'S';
	
	delete 	FROM pls_conta_pos_estab_partic
	where	nr_seq_conta_pos = nr_seq_conta_pos_p
	and	coalesce(ie_alterado_pos::text, '') = '';

	select	max(qt_procedimento_imp)
	into STRICT	qt_procedimento_imp_w
	from	pls_conta_proc
	where	nr_sequencia	= nr_seq_conta_proc_w;

	if (coalesce(qt_procedimento_imp_w::text, '') = '') then
		qt_procedimento_imp_w	:= 1;
	end if;

	if (coalesce(qt_item_w::text, '') = '') then
		qt_item_w	:= 1;
	end if;

	if (coalesce(tx_administracao_w::text, '') = '') then
		tx_administracao_w	:= 0;
	end if;

	--Cursor que ira gerar os participante vinculados ao registro de pos_estabelecido
	for r_c01_w in C01(nr_seq_conta_proc_w,ie_origem_valor_pos_w) loop
		begin
		
		select	count(1)
		into STRICT	qt_ocor_partic_w
		from	pls_ocorrencia_benef a,
			pls_ocorrencia b
		where	b.nr_sequencia = a.nr_seq_ocorrencia
		and	a.nr_seq_proc_partic = r_c01_w.nr_sequencia
		and	a.ie_situacao = 'A'
		and	b.ie_glosar_faturamento = 'S';
		
		if (qt_ocor_partic_w = 0) then
			
			if (ie_vl_pag_prestador_w = 'S') then
				
				if  not((nr_seq_conta_rec_w IS NOT NULL AND nr_seq_conta_rec_w::text <> '') and (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') and r_c01_w.vl_liberado = 0) then
					vl_pos_estab_w := r_c01_w.vl_liberado;
				else
				
					vl_pos_estab_w := estima_vl_lib_partic(r_c01_w.nr_seq_conta, r_c01_w.nr_sequencia, nr_seq_conta_proc_w);
				
				end if;
	
			else
				vl_pos_estab_w	:= r_c01_w.vl_pos_estab;
			end if;
			
			if (qt_item_w 	!= qt_procedimento_imp_w) and (qt_item_w <> 0) then
				vl_pos_estab_w	:= dividir_sem_round(coalesce(vl_pos_estab_w,0) ,qt_procedimento_imp_w) * qt_item_w;
			end if;
			
			vl_part_pos_w 		:= vl_pos_estab_w + dividir((vl_pos_estab_w * tx_administracao_w),100);
			vl_administracao_w	:= vl_part_pos_w - vl_pos_estab_w;
			
			
			-- se nao existe um pos partic vinculado ao proc partic
			if (coalesce(r_c01_w.nr_seq_pos_estab_partic::text, '') = '') then
				
				insert into pls_conta_pos_estab_partic(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_conta_pos,
						nr_seq_proc_partic,
						vl_liberado,
						vl_participante_pos,
						vl_administracao,
						nr_seq_grau_partic,
						cd_medico,
						nr_seq_cbo_saude)
				values (	nextval('pls_conta_pos_estab_partic_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_conta_pos_p,
						r_c01_w.nr_sequencia,
						0,
						coalesce(vl_part_pos_w,0),
						coalesce(vl_administracao_w,0),
						r_c01_w.nr_seq_grau_partic,
						r_c01_w.cd_medico,
						r_c01_w.nr_seq_cbo_saude) returning nr_sequencia into nr_seq_pos_estab_partic_w;
			else
				-- se existe apenas atualiza
				update	pls_conta_pos_estab_partic
				set	vl_liberado		= 0,
					vl_participante_pos	= coalesce(vl_part_pos_w,0),
					vl_administracao	= coalesce(vl_administracao_w,0)
				where	nr_sequencia		= r_c01_w.nr_seq_pos_estab_partic;
			end if;
		end if;	
		end;
	end loop;
else

	select 	max(nr_sequencia)
	into STRICT	nr_seq_pos_estab_partic_w
	from	pls_conta_pos_estab_partic
	where 	nr_seq_conta_pos = nr_seq_conta_pos_p;
		
end if;

	select 	count(1)
	into STRICT	qt_pos_estab_w
	from	pls_conta_pos_estab_partic
	where	nr_seq_conta_pos	= nr_seq_conta_pos_p;

	if (qt_pos_estab_w	> 0) and (coalesce(vl_benef_proc_w,0) > 0) then
	-- Ajuste no valor final
		select	sum(coalesce(vl_participante_pos,0)),
			sum(coalesce(vl_administracao,0))
		into STRICT	vl_total_part_pos_w,
			vl_administracao_part_w
		from	pls_conta_pos_estab_partic
		where	nr_seq_conta_pos = nr_seq_conta_pos_p;

		vl_total_w 	:= (vl_total_part_pos_w + vl_total_adicionais_w);
		
		vl_diferenca_w 	:= coalesce(vl_benef_proc_w,0) - coalesce(vl_total_w,0);
		
		vl_dif_taxa_w	:= coalesce(vl_taxa_servico_w,0) - coalesce(vl_administracao_part_w,0);
		
		if (vl_dif_taxa_w	!= 0) then
			if (qt_pos_estab_w	> 1) then
				for r_c02_w in C02(nr_seq_conta_pos_p) loop
					begin

					if (vl_dif_taxa_w != 0) then
			
						update	pls_conta_pos_estab_partic
						set	vl_administracao	= vl_administracao + vl_dif_taxa_w
						where	nr_sequencia 		= r_c02_w.nr_sequencia;	

						vl_dif_taxa_w	:= 0;
					end if;
					
					end;
				end loop;
			else
				update	pls_conta_pos_estab_partic
				set	vl_participante_pos 	= coalesce(vl_participante_pos,0) +vl_dif_taxa_w,
					vl_administracao	= vl_administracao + vl_dif_taxa_w
				where	nr_sequencia 		= nr_seq_pos_estab_partic_w;
			end if;
		end if;
		
		--necessario fazer o tratamento para retiar o valor de diferenca apos ter tirado  valor de diferenca da taxa de intercambio
		select	sum(coalesce(vl_participante_pos,0))
		into STRICT	vl_total_part_pos_w
		from	pls_conta_pos_estab_partic
		where	nr_seq_conta_pos = nr_seq_conta_pos_p;

		vl_diferenca_w 	:= coalesce(vl_benef_proc_w,0) - coalesce(vl_total_part_pos_w,0);
	
		if (vl_diferenca_w	!= 0) then
			if (qt_pos_estab_w	> 1) then
				for r_c02_w in C02(nr_seq_conta_pos_p) loop
					begin
					if (vl_diferenca_w != 0) then
					
						update	pls_conta_pos_estab_partic
						set	vl_participante_pos 	= coalesce(vl_participante_pos,0) + vl_diferenca_w
						where	nr_sequencia 		= r_c02_w.nr_sequencia;
						
						vl_diferenca_w	:= 0;
					end if;
					
					end;
				end loop;
			else
				update	pls_conta_pos_estab_partic
				set	vl_participante_pos 	= coalesce(vl_participante_pos,0) + vl_diferenca_w
				where	nr_sequencia 		= nr_seq_pos_estab_partic_w;
			end if;
		end if;

	end if;

if (coalesce(ie_commit_p,'N') = 'S') then
	commit;
end if;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_conta_pos_estab_part ((nr_seq_conta_pos_p bigint, ie_commit_p text, nm_usuario_p text, ie_ajustar_valores_p text default 'N') is nr_seq_conta_proc_w bigint) FROM PUBLIC;

