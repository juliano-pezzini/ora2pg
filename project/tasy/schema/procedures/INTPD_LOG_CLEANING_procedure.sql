-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_log_cleaning ( qt_dias_registro_p bigint default 30) AS $body$
DECLARE


dt_registro_w		timestamp;
ds_error_message_w	varchar(4000);
nr_seq_erro_w		intpd_fila_transmissao.nr_sequencia%type;
nr_idx_error    	integer;

TYPE nr_seq_fila_transmissao IS TABLE OF intpd_fila_transmissao.nr_sequencia%type;
nr_seq_fila_trans_array_w          nr_seq_fila_transmissao:= nr_seq_fila_transmissao();

c_fila_trans CURSOR FOR
	SELECT	nr_sequencia,
		dt_atualizacao,
		nm_usuario,
	        dt_atualizacao_nrec,
	        nm_usuario_nrec,
	        nr_seq_evento_sistema,
	        nr_seq_documento,
	        nr_doc_externo,
	        nr_seq_item_documento,
	        ie_evento,
	        ie_operacao,
	        ie_status,
	        ds_parametros_adic,
	        nr_seq_agrupador
	from	intpd_fila_transmissao
	where	ie_status = 'S'
	and	dt_status < dt_registro_w;

type reg_c_fila_trans is table of c_fila_trans%RowType;
vet_reg_c_fila_trans reg_c_fila_trans;

type registro is table of intpd_id%rowtype index by integer;
intpd_id_w registro;

dml_errors  exception;


BEGIN

dt_registro_w	:=	trunc(clock_timestamp() - qt_dias_registro_p);

open c_fila_trans;
loop
fetch c_fila_trans bulk collect      into vet_reg_c_fila_trans limit 10000;
	for i in 1 .. vet_reg_c_fila_trans.Count loop
		begin
		
		intpd_id_w[i].dt_atualizacao		:=	vet_reg_c_fila_trans[i].dt_atualizacao;
		intpd_id_w[i].nm_usuario		:=	vet_reg_c_fila_trans[i].nm_usuario;
		intpd_id_w[i].dt_atualizacao_nrec	:=	vet_reg_c_fila_trans[i].dt_atualizacao_nrec;
		intpd_id_w[i].nm_usuario_nrec		:=	vet_reg_c_fila_trans[i].nm_usuario_nrec;
		intpd_id_w[i].nr_seq_evento_sistema	:=	vet_reg_c_fila_trans[i].nr_seq_evento_sistema;
		intpd_id_w[i].nr_seq_documento		:=	vet_reg_c_fila_trans[i].nr_seq_documento;
		intpd_id_w[i].nr_doc_externo		:=	coalesce(vet_reg_c_fila_trans[i].nr_doc_externo, '0');
		intpd_id_w[i].nr_seq_item_documento	:=	vet_reg_c_fila_trans[i].nr_seq_item_documento;
		intpd_id_w[i].ie_evento			:=	vet_reg_c_fila_trans[i].ie_evento;
		intpd_id_w[i].ie_operacao		:=	vet_reg_c_fila_trans[i].ie_operacao;
		intpd_id_w[i].ie_status			:=	vet_reg_c_fila_trans[i].ie_status;
		intpd_id_w[i].ds_parametros_adic	:=	vet_reg_c_fila_trans[i].ds_parametros_adic;
		intpd_id_w[i].nr_seq_agrupador		:=	vet_reg_c_fila_trans[i].nr_seq_agrupador;
		
		nr_seq_fila_trans_array_w.extend;
		nr_seq_fila_trans_array_w(i)	:=	vet_reg_c_fila_trans[i].nr_sequencia;
		
		select	nextval('intpd_id_seq')
		into STRICT	intpd_id_w[i].nr_sequencia
		;
		
		end;
	end loop;
	
	forall i in nr_seq_fila_trans_array_w.first .. nr_seq_fila_trans_array_w.last
		delete	FROM intpd_data_receive
		where	nr_seq_fila = nr_seq_fila_trans_array_w(i);
	
	
	CALL wheb_usuario_pck.set_ie_executar_trigger('N');
	
	begin
		forall i in nr_seq_fila_trans_array_w.first .. nr_seq_fila_trans_array_w.last SAVE EXCEPTIONS
			update	intpd_fila_transmissao
			set	nr_seq_dependencia  = NULL
			where	nr_seq_dependencia = nr_seq_fila_trans_array_w(i);
	
	exception
	when SQLSTATE '50005' then
		for i in 1..sql%bulk_exceptions.count loop
			begin
			
	
			ds_error_message_w := sqlerrm(-(sql%bulk_exceptions[i].error_code));

			nr_idx_error := sql%bulk_exceptions[i].error_index;
			
			intpd_gravar_log_recebimento(nr_seq_fila_trans_array_w(nr_idx_error), ds_error_message_w, 'Intpd_cleaning');

			end;
		end loop;
	end;	
	
	begin
	
		forall i in nr_seq_fila_trans_array_w.first .. nr_seq_fila_trans_array_w.last	save exceptions
			delete FROM intpd_fila_transmissao
			where nr_seq_superior = nr_seq_fila_trans_array_w(i);
			
	exception
	when SQLSTATE '50005' then
		for i in 1..sql%bulk_exceptions.count loop
			begin
			
	
			ds_error_message_w := sqlerrm(-(sql%bulk_exceptions[i].error_code));

			nr_idx_error := sql%bulk_exceptions[i].error_index;
			
			intpd_gravar_log_recebimento(nr_seq_fila_trans_array_w(nr_idx_error), ds_error_message_w, 'Intpd_cleaning');

			end;
		end loop;
	end;
	
	begin
			
		forall i in nr_seq_fila_trans_array_w.first .. nr_seq_fila_trans_array_w.last	save exceptions
			delete FROM intpd_fila_transmissao
			where nr_sequencia = nr_seq_fila_trans_array_w(i);
	
	exception
	when SQLSTATE '50005' then
		for i in 1..sql%bulk_exceptions.count loop
			begin
			
	
			ds_error_message_w := sqlerrm(-(sql%bulk_exceptions[i].error_code));

			nr_idx_error := sql%bulk_exceptions[i].error_index;
			
			intpd_gravar_log_recebimento(nr_seq_fila_trans_array_w(nr_idx_error), ds_error_message_w, 'Intpd_cleaning');

			end;
		end loop;
	end;
	
	CALL wheb_usuario_pck.set_ie_executar_trigger('S');
	
	forall i in intpd_id_w.first .. intpd_id_w.last SAVE EXCEPTIONS
		insert into intpd_id values intpd_id_w(i);
	
	commit;	
	vet_reg_c_fila_trans.delete;
	intpd_id_w.delete;

	
EXIT WHEN NOT FOUND; /* apply on c_fila_trans */
end loop;
close c_fila_trans;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_log_cleaning ( qt_dias_registro_p bigint default 30) FROM PUBLIC;

