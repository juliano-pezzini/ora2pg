-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE importar_w_cartao_cr (cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_mov_atual_w	bigint;
nr_seq_mov_seguinte_w	bigint;
nr_seq_par_atual_w	bigint;
nr_sequencia_w		bigint;

qt_reg_w		bigint;

nr_autorizacao_w	varchar(20);
ds_comprovante_w	varchar(20);
dt_transacao_w		timestamp;
dt_cancelamento_w	timestamp;
ie_tipo_cartao_w	varchar(2);
nr_seq_bandeira_w	bigint;
nr_seq_forma_pagto_w	bigint;
qt_parcela_w		smallint;
vl_transacao_w		double precision;
dt_parcela_w		timestamp;
vl_parcela_w		double precision;
vl_despesa_w		double precision;
vl_liquido_w		double precision;

nm_usuario_w		varchar(15);

/* Movimentações */

c01 CURSOR FOR
SELECT	nr_sequencia
from	w_import_cartao_cr
where	substr(ds_conteudo,1,1) = 'M'
and	nm_usuario	= nm_usuario_p
order by
	nr_sequencia;

/* Parcelas */

c02 CURSOR FOR
SELECT	nr_sequencia
from	w_import_cartao_cr
where	substr(ds_conteudo,1,1) = 'P'
and	nm_usuario	= nm_usuario_p
and	nr_sequencia > nr_seq_mov_atual_w
and	nr_sequencia < nr_seq_mov_seguinte_w
order by
	nr_sequencia;


BEGIN

nm_usuario_w	:= nm_usuario_p;

/* Movimentações */

open c01;
loop
fetch c01 into
	nr_seq_mov_atual_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	select	coalesce(min(nr_sequencia),9999999999)
	into STRICT	nr_seq_mov_seguinte_w
	from	w_import_cartao_cr
	where	nm_usuario	= nm_usuario_p
	and	substr(ds_conteudo,1,1) = 'M'
	and	nr_sequencia	> nr_seq_mov_atual_w;

	begin
	select	trim(both substr(ds_conteudo,2,20)),
		trim(both substr(ds_conteudo,22,20)),
		to_date(substr(ds_conteudo,42,14),'ddmmyyyyhh24miss'),
		to_date(CASE WHEN trim(both substr(ds_conteudo,56,8))='' THEN null  ELSE substr(ds_conteudo,56,8) END ,'ddmmyyyy'),
		substr(ds_conteudo,64,1),
		(substr(ds_conteudo,65,10))::numeric ,
		(substr(ds_conteudo,75,10))::numeric ,
		(substr(ds_conteudo,85,4))::numeric ,
		(substr(ds_conteudo,89,15) || ',' || substr(ds_conteudo,104,2))::numeric
	into STRICT	nr_autorizacao_w,
		ds_comprovante_w,
		dt_transacao_w,
		dt_cancelamento_w,
		ie_tipo_cartao_w,
		nr_seq_bandeira_w,
		nr_seq_forma_pagto_w,
		qt_parcela_w,
		vl_transacao_w
	from	w_import_cartao_cr
	where	nr_sequencia	= nr_seq_mov_atual_w;
	exception
		when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265433,'chr(13)=' ||chr(13)|| 'movto_atual =' ||nr_seq_mov_atual_w|| 'chr(13)=' ||chr(13)||'sqlerrm='||sqlerrm);
		--Mensagem: Erro de conversão:  || chr(13) ||
		--' movto_atual = ' || nr_seq_mov_atual_w || chr(13) ||
		--sqlerrm;
	end;

	select	count(*)
	into STRICT	qt_reg_w
	from	bandeira_cartao_cr
	where	nr_sequencia	= nr_seq_bandeira_w;

	if (qt_reg_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265435, 'nr_seq_bandeira=' ||nr_seq_bandeira_w);
		--Mensagem: Não foi encontrada no Tasy a bandeira : || nr_seq_bandeira_w
	end if;

	select	count(*)
	into STRICT	qt_reg_w
	from	forma_pagto_cartao_cr
	where	nr_sequencia	= nr_seq_forma_pagto_w;

	if (qt_reg_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265436, 'nr_seq_forma_pagto=' ||nr_seq_forma_pagto_w);
		--Mensagem: Não foi encontrada no Tasy a forma de pagto : || nr_seq_forma_pagto_w
	end if;

	select	nextval('movto_cartao_cr_seq')
	into STRICT	nr_sequencia_w
	;

	insert	into	movto_cartao_cr(nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		cd_estabelecimento,
		nr_autorizacao,
		ds_comprovante,
		dt_transacao,
		dt_cancelamento,
		ie_tipo_cartao,
		nr_seq_bandeira,
		nr_seq_forma_pagto,
		qt_parcela,
		vl_transacao,
		ie_lib_caixa,
		ie_situacao,
		dt_importacao)
	values (nr_sequencia_w,
		nm_usuario_w,
		clock_timestamp(),
		nm_usuario_w,
		clock_timestamp(),
		cd_estabelecimento_p,
		nr_autorizacao_w,
		ds_comprovante_w,
		dt_transacao_w,
		dt_cancelamento_w,
		ie_tipo_cartao_w,
		nr_seq_bandeira_w,
		nr_seq_forma_pagto_w,
		qt_parcela_w,
		vl_transacao_w,
		'S',
		CASE WHEN coalesce(dt_cancelamento_w::text, '') = '' THEN 'A'  ELSE 'C' END ,
		clock_timestamp());

	/* Parcelas */

	open c02;
	loop
	fetch c02 into
		nr_seq_par_atual_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		select	to_date(substr(ds_conteudo,5,8),'ddmmyyyy'),
			(substr(ds_conteudo,13,15) || ',' || substr(ds_conteudo,28,2))::numeric ,
			(substr(ds_conteudo,30,15) || ',' || substr(ds_conteudo,45,2))::numeric ,
			(substr(ds_conteudo,47,15) || ',' || substr(ds_conteudo,62,2))::numeric
		into STRICT	dt_parcela_w,
			vl_parcela_w,
			vl_despesa_w,
			vl_liquido_w
		from	w_import_cartao_cr
		where	nr_sequencia	= nr_seq_par_atual_w;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(265437, 'sqlerrm=' ||sqlerrm);
			--Erro de conversão: ||sqlerrm
		end;

		insert	into	movto_cartao_cr_parcela(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_movto,
			dt_parcela,
			vl_parcela,
			vl_despesa,
			vl_liquido,
			vl_saldo_liquido)
		values (nextval('movto_cartao_cr_parcela_seq'),
			nm_usuario_w,
			clock_timestamp(),
			nm_usuario_w,
			clock_timestamp(),
			nr_sequencia_w,
			dt_parcela_w,
			vl_parcela_w,
			vl_despesa_w,
			vl_liquido_w,
			vl_liquido_w);

	end loop;
	close c02;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE importar_w_cartao_cr (cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

