-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE contabiliza_nota_credito ( nr_lote_contabil_p bigint, ie_exclusao_p text, ds_retorno_p INOUT text, nm_usuario_p text) AS $body$
DECLARE


ds_conteudo_w                   varchar(4000);
nr_titulo_orig_cr_w             varchar(255);
nm_pessoa_nota_credito_w        varchar(255);
ds_origem_w                     varchar(120);
nr_titulo_origem_hist_guia_w    varchar(20);
cd_conta_contabil_w             varchar(20);
nr_documento_w                  varchar(20);
cd_pessoa_nota_credito_w        varchar(14);
vl_transacao_w                  double precision;
nr_seq_conta_banco_w            bigint;
cd_estabelecimento_w            bigint;
cd_tipo_lote_contabil_w         bigint;
dt_contabil_inicial_w           timestamp;
dt_contabil_final_w             timestamp;
dt_referencia_w                 timestamp;
nr_seq_movto_w                  bigint;
nr_documento_ww                 movimento_contabil.nr_documento%type;
ie_origem_documento_w           movimento_contabil.ie_origem_documento%type;
ie_regra_w                      varchar(255);
ds_atributos_w                  varchar(4000);
nm_agrupador_w                  varchar(255);
nr_seq_agrupamento_w            w_movimento_contabil.nr_seq_agrupamento%type;
dt_cancelamento_w               nota_credito.dt_cancelamento%type;
dt_movimento_w                  timestamp;

c01 CURSOR FOR
        SELECT  a.nr_sequencia,
                a.dt_nota_credito,
                a.dt_vencimento,
                coalesce(coalesce(b.vl_classificacao,a.vl_nota_credito),0) vl_transacao,
                'VL_NOTA_CREDITO' nm_atributo,
                b.cd_centro_custo,
                b.cd_conta_contabil,
                a.cd_cgc,
                a.cd_pessoa_fisica,
                a.nr_seq_trans_fin_contab,
                a.ie_origem,
                a.nr_seq_lote_audit_hist,
                a.nr_seq_lote_hist_guia,
                a.nr_seq_motivo,
                a.ds_observacao,
                a.nr_seq_conta_banco,
                a.nr_titulo_receber,
                nr_seq_credito_n_ident,
                a.dt_cancelamento
        FROM nota_credito a
LEFT OUTER JOIN nota_credito_classif b ON (a.nr_sequencia = b.nr_seq_nota_credito)
WHERE a.cd_estabelecimento    = cd_estabelecimento_w and a.nr_lote_contabil      = nr_lote_contabil_p

union all

        SELECT  a.nr_sequencia,
                a.dt_nota_credito,
                a.dt_vencimento,
                coalesce(coalesce(b.vl_classificacao,a.vl_nota_credito),0) * -1 vl_transacao,
                'VL_NOTA_CREDITO' nm_atributo,
                b.cd_centro_custo,
                b.cd_conta_contabil,
                a.cd_cgc,
                a.cd_pessoa_fisica,
                a.nr_seq_trans_fin_contab,
                a.ie_origem,
                a.nr_seq_lote_audit_hist,
                a.nr_seq_lote_hist_guia,
                a.nr_seq_motivo,
                a.ds_observacao,
                a.nr_seq_conta_banco,
                a.nr_titulo_receber,
                nr_seq_credito_n_ident,
                a.dt_cancelamento
        FROM nota_credito a
LEFT OUTER JOIN nota_credito_classif b ON (a.nr_sequencia = b.nr_seq_nota_credito)
WHERE a.cd_estabelecimento    = cd_estabelecimento_w and a.nr_lote_contabil_est  = nr_lote_contabil_p and (a.dt_cancelamento IS NOT NULL AND a.dt_cancelamento::text <> '');

vet01   c01%rowtype;


BEGIN
/*Validacao para impedir a geracao em lotes incorretos */

if (ie_exclusao_p <> 'S') then
        select b.cd_tipo_lote_contabil
        into STRICT cd_tipo_lote_contabil_w
        from lote_contabil b
        where b.nr_lote_contabil = nr_lote_contabil_p;
        if (cd_tipo_lote_contabil_w <> 29) then
                CALL wheb_mensagem_pck.exibir_mensagem_abort(261346);
        end if;
end if;
delete
from    lote_contabil_log
where   nr_lote_contabil = nr_lote_contabil_p
and     cd_log_lote in (9,10);

commit;

select  a.cd_estabelecimento,
        a.dt_referencia,
        a.cd_tipo_lote_contabil
into STRICT    cd_estabelecimento_w,
        dt_referencia_w,
        cd_tipo_lote_contabil_w
from    lote_contabil a
where   a.nr_lote_contabil      = nr_lote_contabil_p;

dt_contabil_inicial_w   := trunc(dt_referencia_w,'month');
dt_contabil_final_w     := fim_dia(dt_referencia_w);

if (ie_exclusao_p = 'S') then
        --exec_sql_dinamico(nm_usuario_p,'truncate table w_movimento_contabil');
        delete  FROM w_movimento_contabil
        where   nr_lote_contabil = nr_lote_contabil_p;

        delete  FROM movimento_contabil
        where   nr_lote_contabil        = nr_lote_contabil_p;

        update  lote_contabil
        set     vl_credito      = 0,
                vl_debito       = 0
        where   nr_lote_contabil        = nr_lote_contabil_p;

        update  nota_credito
        set     nr_lote_contabil         = NULL
        where   nr_lote_contabil        = nr_lote_contabil_p
        and     coalesce(dt_cancelamento::text, '') = '';

        update  nota_credito
        set     nr_lote_contabil_est     = NULL
        where   nr_lote_contabil_est    = nr_lote_contabil_p
        and     (dt_cancelamento IS NOT NULL AND dt_cancelamento::text <> '');

else
        update  nota_credito
        set     nr_lote_contabil        = nr_lote_contabil_p
        where   cd_estabelecimento      = cd_estabelecimento_w
        and     dt_nota_credito between dt_contabil_inicial_w and dt_contabil_final_w
        and     coalesce(nr_lote_contabil::text, '') = ''
        and     coalesce(dt_cancelamento::text, '') = '';

        update  nota_credito
        set     nr_lote_contabil_est    = nr_lote_contabil_p
        where   cd_estabelecimento      = cd_estabelecimento_w
        and     dt_cancelamento between dt_contabil_inicial_w and dt_contabil_final_w
        and     (nr_lote_contabil IS NOT NULL AND nr_lote_contabil::text <> '')
        and     coalesce(nr_lote_contabil_est::text, '') = '';

        nm_agrupador_w  := coalesce(trim(both obter_agrupador_contabil(cd_tipo_lote_contabil_w)),'NR_SEQ_NOTA_CREDITO');

        open c01;
        loop
        fetch c01 into
                vet01;
        EXIT WHEN NOT FOUND; /* apply on c01 */
                vl_transacao_w                          := vet01.vl_transacao;
                nr_documento_w                          := vet01.nr_sequencia;
                ds_origem_w                                     := substr(obter_valor_dominio(3346, vet01.ie_origem),1,120);
                cd_pessoa_nota_credito_w        := substr(coalesce(vet01.cd_pessoa_fisica, vet01.cd_cgc),1,14);
                nm_pessoa_nota_credito_w        := substr(obter_nome_pf_pj(vet01.cd_pessoa_fisica, vet01.cd_cgc),1,255);
                nr_seq_conta_banco_w            := vet01.nr_seq_conta_banco;
                dt_movimento_w                  := vet01.dt_nota_credito;
                if (vet01.dt_cancelamento IS NOT NULL AND vet01.dt_cancelamento::text <> '') and (trunc(vet01.dt_cancelamento,'dd') <> trunc(vet01.dt_nota_credito,'dd')) then
                        dt_movimento_w  := vet01.dt_cancelamento;
                end if;


                if (nm_agrupador_w = 'NR_SEQ_NOTA_CREDITO')then
                        nr_seq_agrupamento_w    :=      vet01.nr_sequencia;
                end if;

                if (coalesce(nr_seq_agrupamento_w,0) = 0)then
                        nr_seq_agrupamento_w    :=      vet01.nr_sequencia;
                end if;

                if (coalesce(vet01.nr_seq_lote_hist_guia,0) <> 0) then
                        select  max(somente_numero(obter_titulo_conta_guia(nr_interno_conta,cd_autorizacao,null,null)))
                        into STRICT    nr_titulo_origem_hist_guia_w
                        from    lote_audit_hist_guia
                        where   nr_sequencia    = vet01.nr_seq_lote_hist_guia;
                end if;

                nr_titulo_orig_cr_w     := substr(obter_titulo_orig_cr(vet01.nr_sequencia),1,255);

                if (coalesce(nr_titulo_orig_cr_w,'X') = 'X') then
                        nr_titulo_orig_cr_w := vet01.nr_titulo_receber;
                end if;

                ds_conteudo_w           := substr(      vet01.nr_sequencia              || '#@' ||
                                                        cd_pessoa_nota_credito_w        || '#@' ||
                                                        nm_pessoa_nota_credito_w        || '#@' ||
                                                        ds_origem_w                     || '#@' ||
                                                        nr_titulo_origem_hist_guia_w    || '#@' ||
                                                        nr_titulo_orig_cr_w             || '#@' ||
                                                        vet01.nr_seq_credito_n_ident,1,4000);

                ds_atributos_w  := null;

                ds_atributos_w  :=      'NR_TITULO_RECEBER=' || vet01.nr_titulo_receber;

                ctb_obter_doc_movto(    cd_tipo_lote_contabil_w,
                                        vet01.nm_atributo,
                                        'VR',
                                        vet01.dt_nota_credito,
                                        null,
                                        null,
                                        ds_atributos_w,
                                        nm_usuario_p,
                                        ie_regra_w,
                                        nr_documento_ww,
                                        ie_origem_documento_w);

                nr_seq_movto_w := gerar_contab_trans_financ(      cd_estabelecimento_w, cd_estabelecimento_w, nr_lote_contabil_p, nm_usuario_p, vet01.cd_conta_contabil, vet01.cd_centro_custo, nr_documento_w, nr_seq_agrupamento_w, dt_movimento_w, vl_transacao_w, vet01.nr_seq_trans_fin_contab, nr_seq_conta_banco_w, vet01.nm_atributo, vet01.cd_pessoa_fisica, vet01.cd_cgc, null, null, nr_documento_ww, null, ds_conteudo_w, null, null, null, null, null, null, null, null, null, null, null, null, null, null, nr_seq_movto_w, null, null, null, ie_origem_documento_w);
        end loop;
        close c01;

        CALL agrupa_movimento_contabil(      nr_lote_contabil_p,
                                        nm_usuario_p);
end if;

if (coalesce(ds_retorno_p::text, '') = '') then
        update  lote_contabil
        set     ie_situacao = 'A',
                dt_geracao_lote = clock_timestamp()
        where   nr_lote_contabil = nr_lote_contabil_p;
        if (ie_exclusao_p = 'S') then
                ds_retorno_p            := wheb_mensagem_pck.get_texto(298780);

                CALL ctb_gravar_log_lote( nr_lote_contabil_p, 2, '', nm_usuario_p);
        else
                ds_retorno_p            := wheb_mensagem_pck.get_texto(298781);

                CALL ctb_gravar_log_lote( nr_lote_contabil_p, 1, '', nm_usuario_p);
        end if;
        commit;
else
        rollback;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE contabiliza_nota_credito ( nr_lote_contabil_p bigint, ie_exclusao_p text, ds_retorno_p INOUT text, nm_usuario_p text) FROM PUBLIC;

