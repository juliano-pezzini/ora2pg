-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_exames_coletados (cd_estabelecimento_p integer , nm_usuario_banco_p text , exames_coletados INOUT REFCURSOR) AS $body$
BEGIN

open exames_coletados for
   SELECT DISTINCT
    a.nr_prescricao,
    a.nr_sequencia,
    a.dt_coleta,
    a.cd_procedimento,
    p.ds_procedimento,
    a.qt_procedimento,
    a.dt_atualizacao,
    a.nm_usuario,
    a.ds_observacao,
    a.ie_origem_proced,
    a.ie_urgencia,
    a.ds_dado_clinico,
    a.ie_suspenso,
    a.cd_setor_atendimento,
    b.nr_atendimento,
    b.cd_medico,
    b.dt_prescricao,
    b.dt_liberacao,
    b.dt_liberacao_medico,
    b.ie_recem_nato,
    g.cd_setor_atendimento                                                                                       cd_setor_paciente,
    CASE WHEN coalesce(b.cd_recem_nato::text, '') = '' THEN  c.nm_pessoa_fisica  ELSE substr(obter_nome_pf(b.cd_recem_nato), 1, 80)                                                      || 'RN de '                                                      || c.nm_pessoa_fisica END                                                                                         nm_paciente,
    elimina_acentuacao(upper(CASE WHEN coalesce(b.cd_recem_nato::text, '') = '' THEN  c.nm_pessoa_fisica  ELSE substr(obter_nome_pf(b.cd_recem_nato), 1, 80)                                                                               || 'RN de '                                                                               || c.nm_pessoa_fisica END ))                                                                                      nm_paciente_sem_acento,
    c.dt_nascimento,
    c.ie_sexo,
    c.nr_cpf,
    c.nr_prontuario,
    d.nm_pessoa_fisica                                                                                           nm_medico,
    d.nr_cpf                                                                                                     nr_cpf_medico,		/*elemar - 27/08/2008*/
    e.nr_crm,
    e.uf_crm,			/*elemar - 27/08/2008*/
    f.cd_convenio,
    f.cd_categoria,
    f.cd_usuario_convenio,
    f.dt_validade_carteira, 	/*elemar - 27/08/2008*/
    f.nr_doc_convenio,		/*elemar - 27/08/2008*/
    f.ie_tipo_guia,			/*elemar - 27/08/2008*/
    v.ds_convenio,
    v.cd_cgc                                                                                                     cd_cgc_conv,		/*elemar - 27/08/2008*/
    v.cd_regional                                                                                                cd_regional_conv,	/*elemar - 27/08/2008*/
    a.cd_material_exame,
    m.ds_material_exame,
    y.cd_exame,
    y.nm_exame,
    a.ds_material_especial,
    coalesce(a.ie_amostra, 'N')                                                                                        ie_amostra_entregue,
    a.ds_horarios,
    a.nr_seq_exame,
    z.ds_endereco,
    z.nr_endereco,
    z.ds_complemento,
    z.ds_bairro,
    z.ds_municipio,
    z.sg_estado,
    z.nr_telefone,
    z.cd_cep, 	
	/*to_char(a.dt_prev_execucao,'dd/mm/yyyy hh24:mi:ss') dt_prev_execucao,*/

    a.dt_prev_execucao,
    s.ds_setor_atendimento                                                                                       ds_setor_paciente,
    g.cd_unidade_basica
    || ' '
    || cd_unidade_compl                                                                                          cd_unidade,
    obter_preco_procedimento(t.cd_estabelecimento, f.cd_convenio, f.cd_categoria, b.dt_prescricao, a.cd_procedimento,
                             a.ie_origem_proced,
                             f.cd_tipo_acomodacao,
                             t.ie_tipo_atendimento,
                             g.cd_setor_atendimento,
                             b.cd_medico,
                             NULL,
                             f.cd_usuario_convenio,
                             f.cd_plano_convenio,
                             t.ie_clinica,
                             f.cd_empresa,
                             'P')                                                                                vl_procedimento,
    a.ie_executar_leito,
    b.cd_recem_nato,
    substr(obter_nome_pf(b.cd_recem_nato), 1, 80)                                                                  nm_recem_nato,
    y.nr_seq_grupo,
    coalesce(substr(obter_estab_integracao(b.cd_estabelecimento, 19), 1, 20), b.cd_estabelecimento)                       cd_estabelecimento,
    a.nr_seq_proc_interno,
    substr(obter_proc_interno(a.nr_seq_proc_interno, 'CI'), 1, 20)                                                  cd_interno_integracao,
    y.cd_exame_integracao                                                                                        cd_exame_integracao,
    m.cd_material_integracao,
    a.nr_controle_exame                                                                                          nr_controle_exame,
    substr(obter_medic_hist_saude_atend(t.nr_atendimento), 1, 2000)                                                ds_medicamento_uso
FROM dual x, convenio v, atendimento_paciente t, setor_atendimento s, procedimento p, atend_paciente_unidade g, atend_categoria_convenio f, pessoa_fisica d, pessoa_fisica c, prescr_medica b
LEFT OUTER JOIN compl_pessoa_fisica z ON (b.cd_pessoa_fisica = z.cd_pessoa_fisica AND 1 = z.ie_tipo_complemento)
LEFT OUTER JOIN medico e ON (b.cd_medico = e.cd_pessoa_fisica)
LEFT OUTER JOIN lab_parametro l ON (b.cd_estabelecimento = l.cd_estabelecimento)
, prescr_procedimento a
LEFT OUTER JOIN prescr_proc_hor i ON (a.nr_prescricao = i.nr_prescricao AND a.nr_sequencia = i.nr_seq_procedimento)
LEFT OUTER JOIN material_exame_lab m ON (a.cd_material_exame = m.cd_material_exame)
, coalesce(a
LEFT OUTER JOIN exame_laboratorio y ON (coalesce(a.nr_seq_exame, obter_exame_lab_proc_int(a.nr_seq_proc_interno)) = y.nr_seq_exame)
WHERE a.cd_motivo_baixa = 0 AND (a.dt_integracao IS NOT NULL AND a.dt_integracao::text <> '') AND a.cd_procedimento = p.cd_procedimento AND a.ie_origem_proced = p.ie_origem_proced AND (coalesce(dt_liberacao_medico, dt_liberacao) IS NOT NULL AND (coalesce(dt_liberacao_medico, dt_liberacao))::text <> '') AND a.nr_prescricao = b.nr_prescricao AND b.cd_pessoa_fisica = c.cd_pessoa_fisica   AND b.cd_medico = d.cd_pessoa_fisica      AND g.nr_seq_interno = obter_atepacu_paciente(b.nr_atendimento, 'A') AND g.cd_setor_atendimento = s.cd_setor_atendimento  AND coalesce(a.ie_suspenso, 'N') = 'N' AND ( ( coalesce(l.qt_dias_int_webs, 0) = 0 )
          OR ( coalesce(dt_liberacao_medico, dt_liberacao) > clock_timestamp() - l.qt_dias_int_webs ) ) AND coalesce(a.dt_integracao_coleta::text, '') = '' AND ( ( coalesce(l.ie_proces_status_webserv, 'S') = 'S'
            AND a.ie_status_atend = 25 )
          OR ( ( coalesce(l.ie_proces_status_webserv, 'S') = 'N' )
               AND ( a.ie_status_atend >= 25 ) ) ) AND a.cd_setor_atendimento IN (
        SELECT
            s.cd_setor_atendimento
        FROM
            setor_atendimento s
        WHERE
            upper(s.nm_usuario_banco) = upper(nm_usuario_banco_p)
    ) AND f.nr_atendimento = b.nr_atendimento AND t.nr_atendimento = b.nr_atendimento AND f.dt_inicio_vigencia = (
        SELECT
            MAX(w.dt_inicio_vigencia)
        FROM
            atend_categoria_convenio w
        WHERE
            w.nr_atendimento = b.nr_atendimento
    ) AND f.cd_convenio = v.cd_convenio AND ( ( cd_estabelecimento_p = 0 )
          OR ( coalesce(substr(obter_estab_integracao(b.cd_estabelecimento, 19), 1, 20), b.cd_estabelecimento) = cd_estabelecimento_p ) ) AND ( ( ( a.ie_se_necessario = 'S'
              AND EXISTS (
        SELECT
            1
        FROM
            empresa_integr_dados i
        WHERE
                b.cd_estabelecimento = coalesce(i.cd_estabelecimento, b.cd_estabelecimento)
            AND i.nr_seq_empresa_integr = 19
            AND ie_gerar_exame_se_necessario = 'S'
    )
              AND (i.nm_usuario_reaprazamento IS NOT NULL AND i.nm_usuario_reaprazamento::text <> '') )
            OR ( coalesce(a.ie_se_necessario, 'N') = 'N' ) )
          OR ( NOT EXISTS (
        SELECT
            1
        FROM
            empresa_integr_dados i
        WHERE
                b.cd_estabelecimento = coalesce(i.cd_estabelecimento, b.cd_estabelecimento)
            AND i.nr_seq_empresa_integr = 19
            AND ie_gerar_exame_se_necessario = 'S'
    ) ) ) AND lab_valida_realiza_integracao(a.nr_prescricao, a.nr_sequencia) = 'S' ORDER BY
    b.nr_atendimento,
    a.nr_prescricao;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_exames_coletados (cd_estabelecimento_p integer , nm_usuario_banco_p text , exames_coletados INOUT REFCURSOR) FROM PUBLIC;

