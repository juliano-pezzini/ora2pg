-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE executar_evento_agenda_alta ( ie_evento_p text, ie_agenda_p text, nr_seq_agenda_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_status_w		varchar(2);
ie_status_atend_w	varchar(1);
nr_atend_agenda_w	bigint;
nr_seq_agenda_w		agenda_paciente.nr_sequencia%type;
nr_atendimento_w	bigint;
ds_erro_w		varchar(4000);
cd_perfil_w		bigint;
cd_agenda_w		agenda_paciente.cd_agenda%type;
dt_agenda_w		agenda_paciente.dt_agenda%type;
hr_inicio_w		agenda_paciente.hr_inicio%type;
hr_inicio_seg_w		bigint;
nr_seq_status_pac_w		status_evento_agenda.nr_seq_status_pac%type;

c01 CURSOR FOR
	SELECT	nr_sequencia
	from	agenda_paciente
	where	nr_sequencia <> nr_seq_agenda_p
	and	nr_atendimento = nr_atend_agenda_w
	and 	ie_status_agenda not in ('C','B','F','I','II')
	order by nr_sequencia;

c03 CURSOR FOR
	SELECT	nr_sequencia
	from	agenda_paciente a, agenda b
	where	a.nr_sequencia <> nr_seq_agenda_p
	and	a.nr_atendimento = nr_atend_agenda_w
	and 	a.cd_agenda = b.cd_agenda
	and 	b.cd_tipo_agenda = CASE WHEN ie_agenda_p='CI' THEN  1  ELSE 2 END
	and 	a.ie_status_agenda not in ('C','B','F','I','II')
	order by nr_sequencia;
	
C02 CURSOR FOR
	SELECT	a.ie_status,
			coalesce(a.nr_seq_status_pac, 0)
	from	status_evento_agenda a
	where (a.cd_estabelecimento = cd_estabelecimento_p or exists (SELECT 1
									from STATUS_EVENTO_AGENDA_ESTAB x 
									where x.cd_estabelecimento = cd_estabelecimento_p 
									and a.nr_sequencia 	   = x.nr_seq_status_evento_ag ))
	and	a.ie_evento = ie_evento_p
	and	((a.ie_agenda = ie_agenda_p) or (a.ie_agenda = 'T'))
	and	coalesce(a.cd_perfil,cd_perfil_w)	= cd_perfil_w
	order by a.ie_status;


BEGIN

if (ie_evento_p IS NOT NULL AND ie_evento_p::text <> '') and (ie_agenda_p IS NOT NULL AND ie_agenda_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

	cd_perfil_w	:= obter_perfil_ativo;
	open C02;
	loop
	fetch C02 into	
		ie_status_w,
		nr_seq_status_pac_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
	end loop;
	close C02;
	/* alterar status agenda */

	if (ie_status_w IS NOT NULL AND ie_status_w::text <> '') then
		/* agenda cirurgica e exames */

		if (ie_agenda_p in ('CI','E')) and (ie_status_w <> 'AC') then
		
			select	max(nr_Atendimento),
				max(cd_agenda),
				max(dt_agenda),
				max(hr_inicio)
			into STRICT	nr_atendimento_w,
				cd_agenda_w,
				dt_agenda_w,
				hr_inicio_w
			from	agenda_paciente
			where	nr_sequencia = nr_seq_agenda_p;
			
			select	coalesce(max(PKG_DATE_UTILS.extract_field('SECOND', hr_inicio)),0)+1
			into STRICT	hr_inicio_seg_w
			from	agenda_paciente
			where	cd_agenda = cd_agenda_w
			and	PKG_DATE_UTILS.get_Time(hr_inicio, to_char(hr_inicio, 'hh24:mi')) = PKG_DATE_UTILS.get_Time(hr_inicio_w, to_char(hr_inicio_w, 'hh24:mi'))
			and	dt_agenda = dt_agenda_w
			and	ie_status_agenda = ie_status_w;
		
			if (hr_inicio_seg_w > 0) then
			
				update	agenda_paciente
				set	hr_inicio = hr_inicio + ((hr_inicio_seg_w+1)/86400),
					ie_status_agenda = ie_status_w
				where	nr_sequencia = nr_seq_agenda_p;
				
			else
				
				update	agenda_paciente
				set	ie_status_agenda = ie_status_w
				where	nr_sequencia = nr_seq_agenda_p;
			
			end if;

			if (nr_seq_status_pac_w > 0) then
				CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
			end if;
			
			if (ie_status_w = 'AD') then

				update	agenda_paciente
				set	dt_atendido = clock_timestamp()
				where	nr_sequencia = nr_seq_agenda_p;

			end if;
			
			if (ie_status_w = 'A') then

				update	agenda_paciente
				set	dt_chegada = clock_timestamp()
				where	nr_sequencia = nr_seq_agenda_p;

			end if;
			
			if (ie_status_w = 'O') then

				update	agenda_paciente
				set	dt_atendimento	= clock_timestamp()
				where	nr_sequencia = nr_seq_agenda_p;
			end if;


			/* alterar status agendas atendimento */

			select	coalesce(max(obter_valor_param_usuario(820, 24, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N')
			into STRICT	ie_status_atend_w
			;

      

			if (ie_status_atend_w = 'S') then -- Todos os agendamentos, independente do tipo de agenda
				select	coalesce(max(nr_atendimento),0)
				into STRICT	nr_atend_agenda_w
				from	agenda_paciente
				where	nr_sequencia = nr_seq_agenda_p;

				if (nr_atend_agenda_w > 0) then
					open c01;
					loop
					fetch c01 into nr_seq_agenda_w;
					EXIT WHEN NOT FOUND; /* apply on c01 */
						begin

						update	agenda_paciente
						set	ie_status_agenda = ie_status_w,
            				dt_atendido 	 = CASE WHEN ie_status_w='E' THEN  clock_timestamp()  ELSE dt_atendido END
						where	nr_sequencia = nr_seq_agenda_w;
						
						if (nr_seq_status_pac_w > 0) then
							CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
						end if;

						if (ie_status_w = 'AD') then

							update	agenda_paciente
							set	dt_atendido = clock_timestamp()
							where	nr_sequencia = nr_seq_agenda_w;

						end if;

						end;
					end loop;
					close c01;
				end if;
			elsif (ie_status_atend_w = 'T') then -- Somente para o mesmo tipo de agenda
				select	coalesce(max(nr_atendimento),0)
				into STRICT	nr_atend_agenda_w
				from	agenda_paciente
				where	nr_sequencia = nr_seq_agenda_p;

				if (nr_atend_agenda_w > 0) then
					open c03;
					loop
					fetch c03 into nr_seq_agenda_w;
					EXIT WHEN NOT FOUND; /* apply on c03 */
						begin

						update	agenda_paciente
						set	ie_status_agenda = ie_status_w,
            dt_atendido = CASE WHEN ie_status_w='E' THEN  clock_timestamp()  ELSE dt_atendido END
						where	nr_sequencia = nr_seq_agenda_w;
						
						if (nr_seq_status_pac_w > 0) then
							CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
						end if;

						if (ie_status_w = 'AD') then

							update	agenda_paciente
							set	dt_atendido = clock_timestamp()
							where	nr_sequencia = nr_seq_agenda_w;

						end if;

						end;
					end loop;
					close c03;
				end if;
			end if;
			
		elsif (ie_agenda_p in ('C','S')) then
		
			select	max(nr_Atendimento)
			into STRICT	nr_atendimento_w
			from	agenda_consulta
			where	nr_sequencia = nr_seq_agenda_p;
			
			update	agenda_consulta
			set	ie_status_agenda = ie_status_w
			where	nr_sequencia = nr_seq_agenda_p;
			
			if (nr_seq_status_pac_w > 0) then
				CALL alterar_status_pac_agecons(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
			end if;
			
		end if;
		
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE executar_evento_agenda_alta ( ie_evento_p text, ie_agenda_p text, nr_seq_agenda_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

