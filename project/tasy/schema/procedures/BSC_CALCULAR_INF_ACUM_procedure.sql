-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE bsc_calcular_inf_acum ( nr_seq_indicador_p bigint, nr_seq_inf_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_ano_w			smallint;
cd_periodo_w			smallint;
dt_referencia_w			timestamp;
dt_referencia_ww			timestamp;
ie_forma_calculo_w			varchar(15);
ie_operacao_w			varchar(15);
ie_periodo_w			varchar(2);
qt_meta_w			double precision;
qt_limite_w			double precision;
qt_real_w				double precision;
nr_sequencia_w			bigint;
nr_divisor_w			bigint;
nr_seq_result_w			bigint;

c01 CURSOR FOR
SELECT	a.ie_forma_calculo,
	a.ie_operacao
from	bsc_ind_regra_inf a
where	a.nr_seq_indicador	= nr_seq_indicador_p;


BEGIN

delete	FROM bsc_ind_inf_acum
where	nr_seq_inf	= nr_seq_inf_p;

select	max(cd_ano),
	max(cd_periodo)
into STRICT	cd_ano_w,
	cd_periodo_w
from	bsc_ind_inf
where	nr_sequencia	= nr_seq_inf_p;

dt_referencia_w	:= PKG_DATE_UTILS.get_Date(cd_ano_w, cd_periodo_w, 01);

open C01;
loop
fetch C01 into
	ie_forma_calculo_w,
	ie_operacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	if (ie_forma_calculo_w = 'A') then
		select	coalesce(sum(qt_meta),0),
			coalesce(sum(qt_limite),0),
			coalesce(sum(qt_real),0)
		into STRICT	qt_meta_w,
			qt_limite_w,
			qt_real_w
		from	bsc_ind_inf
		where	nr_seq_indicador	= nr_seq_indicador_p
		and	cd_ano		= cd_ano_w
		and	cd_periodo	<= cd_periodo_w;

		select	count(*)
		into STRICT	nr_divisor_w
		from	bsc_ind_inf a,
			bsc_indicador b
		where 	a.nr_seq_indicador = b.nr_sequencia
		and 	a.nr_seq_indicador = nr_seq_indicador_p
		and 	a.cd_ano = cd_ano_w
		and 	a.cd_periodo between 1 and cd_periodo_w;

		if (ie_operacao_w = 'M') then
			qt_meta_w	:= dividir(qt_meta_w,	nr_divisor_w);
			qt_limite_w	:= dividir(qt_limite_w,	nr_divisor_w);
			qt_real_w		:= dividir(qt_real_w,		nr_divisor_w);
		end if;

	elsif (ie_forma_calculo_w = 'MD') then

		dt_referencia_ww	:= PKG_DATE_UTILS.ADD_MONTH(dt_referencia_w,-11,0);

		select	coalesce(sum(qt_meta),0),
			coalesce(sum(qt_limite),0),
			coalesce(sum(qt_real),0)
		into STRICT	qt_meta_w,
			qt_limite_w,
			qt_real_w
		from	bsc_ind_inf a
		where	nr_seq_indicador	= nr_seq_indicador_p
		and	bsc_obter_data_inf(a.nr_sequencia) between dt_referencia_ww and dt_referencia_w;

		if (ie_operacao_w = 'M') then
			qt_meta_w	:= dividir(qt_meta_w,	12);
			qt_limite_w	:= dividir(qt_limite_w,	12);
			qt_real_w	:= dividir(qt_real_w,	12);
		end if;

	elsif (ie_forma_calculo_w = 'MS') then

		dt_referencia_ww	:= PKG_DATE_UTILS.ADD_MONTH(dt_referencia_w,-5,0);

		select	coalesce(sum(qt_meta),0),
			coalesce(sum(qt_limite),0),
			coalesce(sum(qt_real),0)
		into STRICT	qt_meta_w,
			qt_limite_w,
			qt_real_w
		from	bsc_ind_inf a
		where	nr_seq_indicador	= nr_seq_indicador_p
		and	bsc_obter_data_inf(a.nr_sequencia) between dt_referencia_ww and dt_referencia_w;

		if (ie_operacao_w = 'M') then
			qt_meta_w	:= dividir(qt_meta_w,	6);
			qt_limite_w	:= dividir(qt_limite_w,	6);
			qt_real_w	:= dividir(qt_real_w,	6);
		end if;
	elsif (ie_forma_calculo_w = 'MT') then

		dt_referencia_ww	:= PKG_DATE_UTILS.ADD_MONTH(dt_referencia_w,-2,0);

		select	coalesce(sum(qt_meta),0),
			coalesce(sum(qt_limite),0),
			coalesce(sum(qt_real),0)
		into STRICT	qt_meta_w,
			qt_limite_w,
			qt_real_w
		from	bsc_ind_inf a
		where	nr_seq_indicador	= nr_seq_indicador_p
		and	bsc_obter_data_inf(a.nr_sequencia) between dt_referencia_ww and dt_referencia_w;

		if (ie_operacao_w = 'M') then
			qt_meta_w	:= dividir(qt_meta_w,	3);
			qt_limite_w	:= dividir(qt_limite_w,	3);
			qt_real_w	:= dividir(qt_real_w,	3);
		end if;

	elsif (ie_forma_calculo_w = 'S') then

		ie_periodo_w	:= obter_periodo_data(dt_referencia_w,'E');
		if (ie_periodo_w = '01') then
			dt_referencia_ww	:= PKG_DATE_UTILS.start_of(dt_referencia_w,'year',0);
		else
			dt_referencia_ww	:= PKG_DATE_UTILS.get_Date(cd_ano_w,07,01);
		end if;

		select	coalesce(sum(qt_meta),0),
			coalesce(sum(qt_limite),0),
			coalesce(sum(qt_real),0)
		into STRICT	qt_meta_w,
			qt_limite_w,
			qt_real_w
		from	bsc_ind_inf a
		where	nr_seq_indicador	= nr_seq_indicador_p
		and	bsc_obter_data_inf(a.nr_sequencia) between dt_referencia_ww and dt_referencia_w;

		if (ie_operacao_w = 'M') then
			qt_meta_w	:= dividir(qt_meta_w,	6);
			qt_limite_w	:= dividir(qt_limite_w,	6);
			qt_real_w	:= dividir(qt_real_w,	6);
		end if;

	elsif (ie_forma_calculo_w = 'T') then

		ie_periodo_w	:= obter_periodo_data(dt_referencia_w,'T');

		if (ie_periodo_w = '01') then
			dt_referencia_ww	:= PKG_DATE_UTILS.start_of(dt_referencia_w,'YYYY',0);
		elsif (ie_periodo_w = '02') then
			dt_referencia_ww	:= PKG_DATE_UTILS.get_Date(cd_ano_w,04,01);
		elsif (ie_periodo_w = '03') then
			dt_referencia_ww	:= PKG_DATE_UTILS.get_Date(cd_ano_w,07,01);
		elsif (ie_periodo_w = '04') then
			dt_referencia_ww	:= PKG_DATE_UTILS.get_Date(cd_ano_w,10,01);
		end if;

		select	coalesce(sum(qt_meta),0),
			coalesce(sum(qt_limite),0),
			coalesce(sum(qt_real),0)
		into STRICT	qt_meta_w,
			qt_limite_w,
			qt_real_w
		from	bsc_ind_inf a
		where	nr_seq_indicador	= nr_seq_indicador_p
		and	bsc_obter_data_inf(a.nr_sequencia) between dt_referencia_ww and dt_referencia_w;

		if (ie_operacao_w = 'M') then
			qt_meta_w	:= dividir(qt_meta_w,	3);
			qt_limite_w	:= dividir(qt_limite_w,	3);
			qt_real_w	:= dividir(qt_real_w,	3);
		end if;

	elsif (ie_forma_calculo_w = 'Q') then

		ie_periodo_w	:= obter_periodo_data(dt_referencia_w,'U');

		if (ie_periodo_w = '01') then
			dt_referencia_ww	:= PKG_DATE_UTILS.start_of(dt_referencia_w,'YYYY',0);
		elsif (ie_periodo_w = '02') then
			dt_referencia_ww	:= PKG_DATE_UTILS.get_Date(cd_ano_w,05,01);
		elsif (ie_periodo_w = '03') then
			dt_referencia_ww	:= PKG_DATE_UTILS.get_Date(cd_ano_w,09,01);
		end if;

		select	coalesce(sum(qt_meta),0),
			coalesce(sum(qt_limite),0),
			coalesce(sum(qt_real),0)
		into STRICT	qt_meta_w,
			qt_limite_w,
			qt_real_w
		from	bsc_ind_inf a
		where	nr_seq_indicador	= nr_seq_indicador_p
		and	bsc_obter_data_inf(a.nr_sequencia) between dt_referencia_ww and dt_referencia_w;

		if (ie_operacao_w = 'M') then
			qt_meta_w	:= dividir(qt_meta_w,	4);
			qt_limite_w	:= dividir(qt_limite_w,	4);
			qt_real_w	:= dividir(qt_real_w,	4);
		end if;
	end if;

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_sequencia_w
	from	bsc_ind_inf_acum
	where	nr_seq_inf	= nr_seq_inf_p
	and	ie_forma_calculo	= ie_forma_calculo_w
	and	ie_operacao	= ie_operacao_w;

	nr_seq_result_w	:= bsc_obter_result_indicador(nr_seq_indicador_p,qt_limite_w, qt_real_w, qt_meta_w);

	if (nr_sequencia_w = 0) then

		insert into bsc_ind_inf_acum(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			qt_meta,
			qt_real,
			qt_limite,
			nr_seq_inf,
			ie_forma_calculo,
			ie_operacao,
			nr_seq_result)
		values ( nextval('bsc_ind_inf_acum_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			qt_meta_w,
			qt_real_w,
			qt_limite_w,
			nr_seq_inf_p,
			ie_forma_calculo_w,
			ie_operacao_w,
			nr_seq_result_w);
	else
		update	bsc_ind_inf_acum
		set	qt_meta		= qt_meta_w,
			qt_limite		= qt_limite_w,
			qt_real		= qt_real_w,
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp(),
			nr_seq_result	= nr_seq_result_w
		where	nr_sequencia	= nr_sequencia_w;
	end if;
	end;
end loop;
close C01;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE bsc_calcular_inf_acum ( nr_seq_indicador_p bigint, nr_seq_inf_p bigint, nm_usuario_p text) FROM PUBLIC;

