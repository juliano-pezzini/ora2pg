-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_analise_atual_fluxo_audit ( nr_seq_analise_p bigint, nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_proc_partic_p bigint, nr_seq_pos_estab_p bigint, nr_seq_grupo_atual_p bigint, nr_seq_mot_liberacao_p bigint, ds_observacao_p text, ie_finalizacao_p text, ie_pre_analise_p text, nm_usuario_p text, ie_conta_inteira_p text, ie_tipo_glosa_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gravar o fluxo de análise do item e da ocorrência (Análise nova)
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
/* IE_TIPO_GLOSA_P
P - Pagamento
F - Faturamento
A - Ambos
*/
nr_seq_ocor_benef_w		bigint;
nr_seq_conta_glosa_w		bigint;
nr_seq_fluxo_padrao_w		bigint;
qt_fluxo_w			bigint;
nr_seq_fluxo_w			bigint;
ie_situacao_w			varchar(1);
ie_inserido_w			varchar(1);
nr_seq_ocorrencia_w		bigint;
nr_seq_motivo_glosa_w		bigint;
ie_lib_manual_w			varchar(3);
ie_fluxo_adic_w			pls_ocorrencia_benef.ie_fluxo_adic%type;
vl_calculado_w			pls_conta_pos_estabelecido.vl_calculado%type;
vl_beneficiario_w		pls_conta_pos_estabelecido.vl_beneficiario%type;
ie_liberado_w			varchar(1);
ie_novo_pos_estab_w		varchar(1);
C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_ocorrencia,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_ocorrencia_benef a
	where	a.nr_seq_conta_proc	= nr_seq_conta_proc_p
	and	(nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '')
	
union all

	SELECT	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_ocorrencia,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_ocorrencia_benef a
	where	a.nr_seq_conta_mat	= nr_seq_conta_mat_p
	and	(nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '')
	
union all

	select	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_ocorrencia,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_ocorrencia_benef a
	where	a.nr_seq_proc_partic	= nr_seq_proc_partic_p
	and	(nr_seq_proc_partic_p IS NOT NULL AND nr_seq_proc_partic_p::text <> '')
	
union all

	select	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_ocorrencia,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_ocorrencia_benef a
	where	a.nr_seq_conta	 	= nr_seq_conta_p
	and	coalesce(a.nr_seq_proc_partic::text, '') = ''
	and	coalesce(a.nr_seq_conta_mat::text, '') = ''
	and	coalesce(a.nr_seq_conta_proc::text, '') = ''
	and	coalesce(nr_seq_proc_partic_p::text, '') = ''
	and	coalesce(nr_seq_conta_mat_p::text, '') = ''
	and	coalesce(nr_seq_conta_proc_p::text, '') = ''
	
union all

	select	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_ocorrencia,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_ocorrencia_benef a
	where	a.nr_seq_conta_pos_estab	= nr_seq_pos_estab_p
	and	ie_novo_pos_estab_w = 'N'
	and	(nr_seq_pos_estab_p IS NOT NULL AND nr_seq_pos_estab_p::text <> '')
	
union all

	select	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_ocorrencia,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_ocorrencia_benef a
	where	a.nr_seq_conta_pos_proc	= nr_seq_pos_estab_p
	and	ie_novo_pos_estab_w 	= 'S'
	and	(nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '')
	and	(nr_seq_pos_estab_p IS NOT NULL AND nr_seq_pos_estab_p::text <> '')
	
union all

	select	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_ocorrencia,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_ocorrencia_benef a
	where	a.nr_seq_conta_pos_mat	= nr_seq_pos_estab_p
	and	ie_novo_pos_estab_w 	= 'S'
	and	(nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '')
	and	(nr_seq_pos_estab_p IS NOT NULL AND nr_seq_pos_estab_p::text <> '');

/* Glosas sem fluxo */

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_motivo_glosa,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_conta_glosa a
	where	1=1
	and	a.nr_seq_conta_proc	= nr_seq_conta_proc_p
	and 	not exists (SELECT	1
				from	pls_ocorrencia_benef x
				where	x.nr_seq_glosa = a.nr_sequencia)
	and	not exists (select	1
				from	pls_analise_glo_ocor_grupo x
				where	x.nr_seq_analise	= nr_seq_analise_p
				and	x.nr_seq_conta_glosa	= a.nr_sequencia)
	
union all

	select	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_motivo_glosa,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_conta_glosa a
	where	1=1
	and	a.nr_seq_conta_mat	= nr_seq_conta_mat_p
	and 	not exists (select	1
				from	pls_ocorrencia_benef x
				where	x.nr_seq_glosa = a.nr_sequencia)
	and	not exists (select	1
				from	pls_analise_glo_ocor_grupo x
				where	x.nr_seq_analise	= nr_seq_analise_p
				and	x.nr_seq_conta_glosa	= a.nr_sequencia)
	
union all

	select	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_motivo_glosa,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_conta_glosa a
	where	1=1
	and	a.nr_seq_proc_partic	= nr_seq_proc_partic_p
	and 	not exists (select	1
				from	pls_ocorrencia_benef x
				where	x.nr_seq_glosa = a.nr_sequencia)
	and	not exists (select	1
				from	pls_analise_glo_ocor_grupo x
				where	x.nr_seq_analise	= nr_seq_analise_p
				and	x.nr_seq_conta_glosa	= a.nr_sequencia)
	
union all

	select	a.nr_sequencia,
		a.ie_situacao,
		a.nr_seq_motivo_glosa,
		a.ie_lib_manual,
		a.ie_fluxo_adic
	from	pls_conta_glosa a
	where	a.nr_seq_conta	 = nr_seq_conta_p
	and	1=1
	and	coalesce(a.nr_seq_proc_partic::text, '') = ''
	and	coalesce(a.nr_seq_conta_mat::text, '') = ''
	and	coalesce(a.nr_seq_conta_proc::text, '') = ''
	and	coalesce(nr_seq_proc_partic_p::text, '') = ''
	and	coalesce(nr_seq_conta_mat_p::text, '') = ''
	and	coalesce(nr_seq_conta_proc_p::text, '') = ''
	and 	not exists (select	1
				from	pls_ocorrencia_benef x
				where	x.nr_seq_glosa = a.nr_sequencia)
	and	not exists (select	1
				from	pls_analise_glo_ocor_grupo x
				where	x.nr_seq_analise	= nr_seq_analise_p
				and	x.nr_seq_conta_glosa	= a.nr_sequencia);


BEGIN
ie_liberado_w	:= 'G';

select 	coalesce(max(ie_novo_pos_estab),'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false;

if (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') and
	((nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') or (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') or (nr_seq_proc_partic_p IS NOT NULL AND nr_seq_proc_partic_p::text <> '') or (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '')) then
	/* Gravar o fluxo de análise do item - histórico */

	if (nr_seq_pos_estab_p IS NOT NULL AND nr_seq_pos_estab_p::text <> '') then
		if (ie_novo_pos_estab_w = 'N') then
			select	max(vl_beneficiario),
				max(vl_calculado)
			into STRICT	vl_beneficiario_w,
				vl_calculado_w
			from	pls_conta_pos_estabelecido
			where	nr_sequencia	= nr_seq_pos_estab_p;

			if (vl_beneficiario_w	>= vl_calculado_w) then
				ie_liberado_w	:= 'L';
			else
				ie_liberado_w	:= 'G';
			end if;
		else
			if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then
				select	max(vl_custo_operacional) + max(vl_materiais) + max(vl_medico) +
					max(vl_lib_taxa_co) + max(vl_lib_taxa_material) + max(vl_lib_taxa_servico),
					max(vl_custo_operacional_calc) + max(vl_materiais_calc) + max(vl_medico_calc) +
					max(vl_taxa_co) + max(vl_taxa_material) + max(vl_taxa_servico)
				into STRICT	vl_beneficiario_w,
					vl_calculado_w
				from	pls_conta_pos_proc
				where	nr_sequencia	= nr_seq_pos_estab_p;

				if (vl_beneficiario_w	>= vl_calculado_w) then
					ie_liberado_w	:= 'L';
				else
					ie_liberado_w	:= 'G';
				end if;
			elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then
				select
					max(vl_materiais) + max(vl_lib_taxa_material),
					max(vl_materiais_calc) + max(vl_taxa_material)
				into STRICT	vl_beneficiario_w,
					vl_calculado_w
				from	pls_conta_pos_mat
				where	nr_sequencia	= nr_seq_pos_estab_p;

				if (vl_beneficiario_w	>= vl_calculado_w) then
					ie_liberado_w	:= 'L';
				else
					ie_liberado_w	:= 'G';
				end if;
			end if;

		end if;
	end if;
	nr_seq_fluxo_w := pls_gravar_fluxo_analise_item(	nr_seq_analise_p, nr_seq_conta_p, nr_seq_conta_proc_p, nr_seq_conta_mat_p, nr_seq_proc_partic_p, nr_seq_pos_estab_p, nr_seq_grupo_atual_p, ie_liberado_w, /* Glosa */
					nr_seq_mot_liberacao_p, ds_observacao_p, ie_pre_analise_p, ie_finalizacao_p, nm_usuario_p, ie_conta_inteira_p, ie_tipo_glosa_p, '2', nr_seq_fluxo_w);

	/* Mudar o status das ocorrências do o grupo que está analisando */

	open C01;
	loop
	fetch C01 into
		nr_seq_ocor_benef_w,
		ie_situacao_w,
		nr_seq_ocorrencia_w,
		ie_lib_manual_w,
		ie_fluxo_adic_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		/* Se não tem fluxo para a ocorrência, dar insert do fluxo */

		/* Francisco - 12/03/2013 - Alterei para só dar insert quando estiver inserindo nova ocorrência pois senão acaba mudando o fluxo
		original das ocorrências (se perde quais eram os grupos responsáveis pela ocorrência)*/
		select	count(1)
		into STRICT	qt_fluxo_w
		from	pls_analise_glo_ocor_grupo x
		where	x.nr_seq_analise	= nr_seq_analise_p
		and	x.nr_seq_ocor_benef	= nr_seq_ocor_benef_w
		and	x.nr_seq_grupo		= nr_seq_grupo_atual_p;

		if (qt_fluxo_w 		= 0  ) and (ie_lib_manual_w 	= 'S') then
			insert into pls_analise_glo_ocor_grupo(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_analise,
				nr_seq_ocor_benef,
				nr_seq_grupo,
				nr_seq_fluxo,
				ie_fluxo_gerado,
				nm_usuario_analise,
				dt_analise,
				ie_status,
				ie_fluxo_adic)
			values (nextval('pls_analise_glo_ocor_grupo_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_analise_p,
				nr_seq_ocor_benef_w,
				nr_seq_grupo_atual_p,
				nr_seq_fluxo_padrao_w,
				'S',
				nm_usuario_p,
				clock_timestamp(),
				CASE WHEN ie_pre_analise_p='S' THEN 'P'  ELSE 'G' END , -- Visto com Vilmir e Diogo que o correto é apresentar como pendente e não glosado
				ie_fluxo_adic_w);
		elsif (qt_fluxo_w	> 0) then
			update	pls_analise_glo_ocor_grupo
			set	ie_status		= CASE WHEN ie_pre_analise_p='S' THEN 'P'  ELSE 'G' END , -- Visto com Vilmir e Diogo que o correto é apresentar como pendente e não glosado
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario_analise	= nm_usuario_p,
				dt_analise		= clock_timestamp(),
				ie_finalizacao		= CASE WHEN ie_finalizacao_p='S' THEN 'S'  ELSE ie_finalizacao END
			where	nr_seq_analise		= nr_seq_analise_p
			and	nr_seq_ocor_benef	= nr_seq_ocor_benef_w
			and	nr_seq_grupo		= nr_seq_grupo_atual_p;
		end if;

		/* Se estiver ativa a ocorrência, gravar vinculando ao parecer */

		if (ie_situacao_w = 'A') then
			select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_inserido_w
			from	w_pls_analise_glosa_ocor a
			where	a.nr_seq_analise	= nr_seq_analise_p
			and	a.nm_usuario		= nm_usuario_p
			and	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_w
			and	a.ie_inserido_auditor	= 'S';

			insert into pls_analise_fluxo_ocor(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_analise,
				nr_seq_fluxo_item,
				nr_seq_ocor_benef,
				nr_seq_conta_proc,
				nr_seq_conta_mat,
				ie_inserido)
			values (nextval('pls_analise_fluxo_ocor_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_analise_p,
				nr_seq_fluxo_w,
				nr_seq_ocor_benef_w,
				nr_seq_conta_proc_p,
				nr_seq_conta_mat_p,
				ie_inserido_w);
		end if;
		end;
	end loop;
	close C01;

	/* Criar um fluxo pro grupo que está analisando para marcar as glosas sem ocorrência vinculada (sem fluxo) */

	open C02;
	loop
	fetch C02 into
		nr_seq_conta_glosa_w,
		ie_situacao_w,
		nr_seq_motivo_glosa_w,
		ie_lib_manual_w,
		ie_fluxo_adic_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		/* Francisco - 12/03/2013 - Alterei para só dar insert quando estiver inserindo nova ocorrência pois senão acaba mudando o fluxo
		original das ocorrências (se perde quais eram os grupos responsáveis pela ocorrência)*/
		select	count(1)
		into STRICT	qt_fluxo_w
		from	pls_analise_glo_ocor_grupo x
		where	x.nr_seq_analise	= nr_seq_analise_p
		and	x.nr_seq_conta_glosa	= nr_seq_conta_glosa_w
		and	x.nr_seq_grupo		= nr_seq_grupo_atual_p;

		if (qt_fluxo_w = 0) and (ie_lib_manual_w = 'S') then
			insert into pls_analise_glo_ocor_grupo(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_analise,
				nr_seq_conta_glosa,
				nr_seq_grupo,
				nr_seq_fluxo,
				ie_fluxo_gerado,
				nm_usuario_analise,
				dt_analise,
				ie_status,
				ie_fluxo_adic)
			values (nextval('pls_analise_glo_ocor_grupo_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_analise_p,
				nr_seq_conta_glosa_w,
				nr_seq_grupo_atual_p,
				nr_seq_fluxo_padrao_w,
				'S',
				nm_usuario_p,
				clock_timestamp(),
				CASE WHEN ie_pre_analise_p='S' THEN 'P'  ELSE 'G' END , -- Visto com Vilmir e Diogo que o correto é apresentar como pendente e não glosado
				ie_fluxo_adic_w);
		elsif (qt_fluxo_w	> 0) then
			update	pls_analise_glo_ocor_grupo
			set	ie_status		= CASE WHEN ie_pre_analise_p='S' THEN 'P'  ELSE 'G' END , -- Visto com Vilmir e Diogo que o correto é apresentar como pendente e não glosado
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario_analise	= nm_usuario_p,
				dt_analise		= clock_timestamp(),
				ie_finalizacao		= CASE WHEN ie_finalizacao_p='S' THEN 'S'  ELSE ie_finalizacao END
			where	nr_seq_analise		= nr_seq_analise_p
			and	nr_seq_conta_glosa	= nr_seq_conta_glosa_w
			and	nr_seq_grupo		= nr_seq_grupo_atual_p;
		end if;

		/* Se estiver ativa a ocorrência, gravar vinculando ao parecer */

		if (ie_situacao_w = 'A') then
			select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_inserido_w
			from	w_pls_analise_glosa_ocor a
			where	a.nr_seq_analise	= nr_seq_analise_p
			and	a.nm_usuario		= nm_usuario_p
			and	a.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
			and	a.ie_inserido_auditor	= 'S';

			insert into pls_analise_fluxo_ocor(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_analise,
				nr_seq_fluxo_item,
				nr_seq_conta_glosa,
				nr_seq_conta_proc,
				nr_seq_conta_mat,
				ie_inserido)
			values (nextval('pls_analise_fluxo_ocor_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_analise_p,
				nr_seq_fluxo_w,
				nr_seq_conta_glosa_w,
				nr_seq_conta_proc_p,
				nr_seq_conta_mat_p,
				ie_inserido_w);
		end if;
		end;
	end loop;
	close C02;

end if;

/* interna, não vai commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_atual_fluxo_audit ( nr_seq_analise_p bigint, nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_proc_partic_p bigint, nr_seq_pos_estab_p bigint, nr_seq_grupo_atual_p bigint, nr_seq_mot_liberacao_p bigint, ds_observacao_p text, ie_finalizacao_p text, ie_pre_analise_p text, nm_usuario_p text, ie_conta_inteira_p text, ie_tipo_glosa_p text) FROM PUBLIC;

