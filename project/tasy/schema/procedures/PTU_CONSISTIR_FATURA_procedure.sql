-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_consistir_fatura ( nr_seq_fatura_p bigint, ds_erro_p INOUT text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



vl_atributo_w			varchar(255);
ds_valor_valido_w		varchar(255);
ds_valores_valido_w		varchar(255);
ds_valores_invalido_w		varchar(255);
nm_atributo_w			varchar(50);
ie_consistir_w			varchar(10);
ie_tipo_registro_w		varchar(10);
ie_tipo_tabela_w 		smallint;
ie_status_w			varchar(2);
ie_classif_cobranca_w		varchar(1);
ie_consistencia_w		bigint;
qt_contar_w			bigint;
qt_registro_w			bigint;
qt_inconsist_w			bigint;
nr_sequencia_w			bigint;
nr_seq_cobranca_w		bigint;
nr_seq_nota_hospitalar_w	bigint;
nr_seq_nota_servico_w		bigint;
nr_nota_complemento_w		bigint;
nr_seq_nota_cobranca_w		bigint;
nr_linha_w			bigint;
ie_tipo_tab_serv_w 		smallint;
vl_informado_w			double precision := 0;
vl_total_fatura_w		double precision := 0;
dt_emissao_w			timestamp;
dt_recebimento_w		timestamp;
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type;

C01 CURSOR FOR
	SELECT	ie_tipo_registro,
		nm_atributo,
		ie_consistencia,
		ds_valor_valido,
		ds_valor_invalido,
    		ie_tipo_tabela
	from	ptu_fatura_regra_consist
	where	coalesce(ie_situacao,'A')	= 'A'
	and (ie_classif_cobranca	= ie_classif_cobranca_w or coalesce(ie_classif_cobranca::text, '') = '')
	and	CASE WHEN ie_data_referencia='E' THEN dt_emissao_w WHEN ie_data_referencia='R' THEN dt_recebimento_w END  between
			coalesce(dt_inicio_vigencia,CASE WHEN ie_data_referencia='E' THEN dt_emissao_w WHEN ie_data_referencia='R' THEN dt_recebimento_w END ) and 
			coalesce(dt_fim_vigencia,CASE WHEN ie_data_referencia='E' THEN dt_emissao_w WHEN ie_data_referencia='R' THEN dt_recebimento_w END );

C02 CURSOR FOR
	SELECT	nr_sequencia,
		nr_linha
	from	ptu_nota_cobranca
	where	nr_seq_fatura	= nr_seq_fatura_p;
	
C03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_linha
	from	ptu_nota_hospitalar	a,
		ptu_nota_cobranca	b
	where	b.nr_sequencia	= a.nr_seq_nota_cobr
	and	b.nr_seq_fatura	= nr_seq_fatura_p;
	
C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_linha,
    		a.ie_tipo_tabela
	from	ptu_nota_servico	a,
		ptu_nota_cobranca	b
	where	b.nr_sequencia	= a.nr_seq_nota_cobr
	and	b.nr_seq_fatura = nr_seq_fatura_p;
	
C05 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_linha
	from	ptu_nota_complemento	a,
		ptu_nota_cobranca	b
	where	b.nr_sequencia	= a.nr_seq_nota_cobr
	and	b.nr_seq_fatura	= nr_seq_fatura_p;

C06 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_linha
	from	ptu_nota_fiscal		a,
		ptu_nota_cobranca	b
	where	b.nr_sequencia	= a.nr_seq_nota_cobr
	and	b.nr_seq_fatura	= nr_seq_fatura_p;
	
C07 CURSOR FOR
	SELECT	nr_seq_conta
	from 	pls_conta_pos_estabelecido
	where	nr_seq_conta in (	SELECT 	nr_sequencia
					from	pls_conta c
					where 	c.nr_seq_fatura = nr_seq_fatura_p);
					
C08 CURSOR FOR
	SELECT	nr_seq_conta
	from 	pls_conta_coparticipacao
	where	nr_seq_conta in ( 	SELECT 	nr_sequencia
					from	pls_conta c
					where 	c.nr_seq_fatura = nr_seq_fatura_p);
	
BEGIN

CALL pls_grava_log_proces_imp_a500('Inicio ptu_consistir_fatura', nr_seq_fatura_p, nm_usuario_p);

ds_erro_p := null;

select	coalesce(max(ie_novo_pos_estab),'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false;

-- Colocar qualquer tratamento SEMPRE dentro do EXCEPTION
begin
select 	max(a.vl_total_fatura),
	max(a.ie_status),
	max(a.ie_classif_cobranca)
into STRICT	vl_informado_w,
	ie_status_w,
	ie_classif_cobranca_w
from	ptu_fatura a
where	a.nr_sequencia	= nr_seq_fatura_p;

if (ie_status_w = 'FD') then
	select	coalesce(sum(coalesce(c.vl_procedimento,0) +
		coalesce(c.vl_filme,0) + 
		coalesce(c.vl_custo_operacional,0) +
		coalesce(vl_adic_procedimento,0) + 
		coalesce(vl_adic_co,0) + 
		coalesce(vl_adic_filme,0)
		),0)
	into STRICT	vl_total_fatura_w
	from	ptu_nota_servico	c,
		ptu_nota_cobranca	b,
		ptu_fatura		a
	where	a.nr_sequencia	= b.nr_seq_fatura
	and	b.nr_sequencia	= c.nr_seq_nota_cobr
	and	a.nr_sequencia	= nr_seq_fatura_p;
	
	if (vl_total_fatura_w <> vl_informado_w) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(236489,	'VL_INFORMADO=' || campo_mascara_virgula(vl_informado_w)||';'||
								'VL_TOTAL_FATURA=' || campo_mascara_virgula(vl_total_fatura_w));
	end if;
end if;	

delete	FROM ptu_fatura_consistencia
where	nr_seq_fatura = nr_seq_fatura_p;

select	dt_emissao_fatura,
	dt_recebimento_fatura
into STRICT	dt_emissao_w,
	dt_recebimento_w
from	ptu_fatura
where	nr_sequencia	= nr_seq_fatura_p;

dt_emissao_w		:= coalesce(dt_emissao_w,clock_timestamp());
dt_recebimento_w	:= coalesce(dt_recebimento_w,clock_timestamp());

open C01;
loop
fetch C01 into	
	ie_tipo_registro_w,
	nm_atributo_w,
	ie_consistencia_w,
	ds_valores_valido_w,
	ds_valores_invalido_w,
	ie_tipo_tabela_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (ie_tipo_registro_w = '501') then
		select	count(*)
		into STRICT	qt_registro_w
		from	ptu_fatura
		where	nr_sequencia	= nr_seq_fatura_p;

		if (qt_registro_w <> 0) then
			vl_atributo_w := Obter_valor_Dinamico_char_bv('select '||nm_atributo_w||' from ptu_fatura where nr_sequencia = :nr_seq_fatura	', 'nr_seq_fatura='||nr_seq_fatura_p||';', vl_atributo_w);
			
			nr_sequencia_w	:= nr_seq_fatura_p;
		else
			vl_atributo_w	:= 'XXX';
		end if;
		
		CALL ptu_validar_consistencias(	vl_atributo_w,
						ie_consistencia_w,
						nr_seq_fatura_p,
						ie_tipo_registro_w,
						nm_atributo_w,
						nr_sequencia_w,
						ds_valores_valido_w,
						ds_valores_invalido_w,
						1,
						nm_usuario_p);
	elsif (ie_tipo_registro_w = '502') then
		open C02;
		loop
		fetch C02 into
			nr_seq_cobranca_w,
			nr_linha_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			vl_atributo_w	:= 'XXX';
			nr_sequencia_w	:= nr_seq_cobranca_w;
			vl_atributo_w := Obter_valor_Dinamico_char_bv('select '||nm_atributo_w||' from ptu_nota_cobranca where nr_sequencia = :nr_seq_cobranca ', 'nr_seq_cobranca='||nr_seq_cobranca_w||';', vl_atributo_w);
			
			CALL ptu_validar_consistencias(	vl_atributo_w,
							ie_consistencia_w,
							nr_seq_fatura_p,
							ie_tipo_registro_w,
							nm_atributo_w,
							nr_sequencia_w,
							ds_valores_valido_w,
							ds_valores_invalido_w,
							nr_linha_w,
							nm_usuario_p);
			end;
		end loop;
		close C02;
	elsif (ie_tipo_registro_w = '503') then
		open C03;
		loop
		fetch C03 into	
			nr_seq_nota_hospitalar_w,
			nr_linha_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			vl_atributo_w	:= 'XXX';
			nr_sequencia_w	:= nr_seq_nota_hospitalar_w;
			vl_atributo_w := Obter_valor_Dinamico_char_bv('select a.'||nm_atributo_w||' from ptu_nota_hospitalar a ' ||
										'  where a.nr_sequencia = :nr_seq_nota_hospitalar ', 'nr_seq_nota_hospitalar='||nr_seq_nota_hospitalar_w||';', vl_atributo_w);
			
			CALL ptu_validar_consistencias(	vl_atributo_w,
							ie_consistencia_w,
							nr_seq_fatura_p,
							ie_tipo_registro_w,
							nm_atributo_w,
							nr_sequencia_w,
							ds_valores_valido_w,
							ds_valores_invalido_w,
							nr_linha_w,
							nm_usuario_p);
			end;
		end loop;
		close C03;
	elsif (ie_tipo_registro_w = '504') then
		open C04;
		loop
		fetch C04 into	
			nr_seq_nota_servico_w,
			nr_linha_w,
      			ie_tipo_tab_serv_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
				-- Se o tipo de tabela da regra for null ou se o tipo de tabela for igual ao do servico que esta sendo validado
				if coalesce(ie_tipo_tabela_w,9) = 9 or coalesce(ie_tipo_tabela_w,9) =  coalesce(ie_tipo_tab_serv_w,9) then
					vl_atributo_w	:= 'XXX';
					nr_sequencia_w	:= nr_seq_nota_servico_w;
					vl_atributo_w := Obter_valor_Dinamico_char_bv('select a.'||nm_atributo_w||' from ptu_nota_servico a ' ||
												'  where a.nr_sequencia = :nr_seq_nota_servico ', 'nr_seq_nota_servico='||nr_seq_nota_servico_w||';', vl_atributo_w);
			
					CALL ptu_validar_consistencias(	vl_atributo_w,
									ie_consistencia_w,
									nr_seq_fatura_p,
									ie_tipo_registro_w,
									nm_atributo_w,
									nr_sequencia_w,
									ds_valores_valido_w,
									ds_valores_invalido_w,
									nr_linha_w,
									nm_usuario_p);
				end if;
			end;
		end loop;
		close C04;
	elsif (ie_tipo_registro_w = '505') then
		open C05;
		loop
		fetch C05 into	
			nr_nota_complemento_w,
			nr_linha_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin
			vl_atributo_w	:= 'XXX';
			nr_sequencia_w	:= nr_nota_complemento_w;
			vl_atributo_w := Obter_valor_Dinamico_char_bv('select a.'||nm_atributo_w||' from ptu_nota_complemento a ' ||
										'  where a.nr_sequencia = :nr_nota_complemento ', 'nr_nota_complemento='||nr_nota_complemento_w||';', vl_atributo_w);
			
			CALL ptu_validar_consistencias(	vl_atributo_w,
							ie_consistencia_w,
							nr_seq_fatura_p,
							ie_tipo_registro_w,
							nm_atributo_w,
							nr_sequencia_w,
							ds_valores_valido_w,
							ds_valores_invalido_w,
							nr_linha_w,
							nm_usuario_p);
			end;
		end loop;
		close C05;
	elsif (ie_tipo_registro_w = '506') then
		open C06;
		loop
		fetch C06 into	
			nr_seq_nota_cobranca_w,
			nr_linha_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin
			vl_atributo_w	:= 'XXX';
			nr_sequencia_w	:= nr_seq_nota_cobranca_w;
			vl_atributo_w := Obter_valor_Dinamico_char_bv('select a.'||nm_atributo_w||' from ptu_nota_fiscal a ' ||
										'  where a.nr_sequencia = :nr_seq_nota_cobranca ', 'nr_seq_nota_cobranca='||nr_seq_nota_cobranca_w||';', vl_atributo_w);
			
			CALL ptu_validar_consistencias(	vl_atributo_w,
							ie_consistencia_w,
							nr_seq_fatura_p,
							ie_tipo_registro_w,
							nm_atributo_w,
							nr_sequencia_w,
							ds_valores_valido_w,
							ds_valores_invalido_w,
							nr_linha_w,
							nm_usuario_p);
							
			end;
		end loop;
		close C06;
	end if;
	end;
end loop;
close C01;

select	count(1)
into STRICT	qt_inconsist_w
from	ptu_fatura_consistencia a
where	a.nr_seq_fatura	= nr_seq_fatura_p;

if (qt_inconsist_w > 0) then
		
	for r_c08_w in C08 loop
	
		CALL pls_deletar_coparticipacao(r_c08_w.nr_seq_conta, null, 'N', 'N', null, null, nm_usuario_p, cd_estabelecimento_p);
	
	end loop;
		
	if (ie_novo_pos_estab_w = 'N') then
		for r_C07_w in C07 loop
			
			CALL pls_delete_pls_conta_pos_estab(null, null, r_C07_w.nr_seq_conta, null);
		
		end loop;
	end if;
									
	CALL ptu_atualizar_status_fatura(nr_seq_fatura_p, 'I', null, nm_usuario_p);
	
	ds_erro_p := substr('Erro: ' || sqlerrm || pls_util_pck.enter_w || 'Error Back Trace: ' || dbms_utility.format_error_backtrace,1,255);
end if;

exception
when others then
	ds_erro_p := 	substr('Erro: ' || sqlerrm || pls_util_pck.enter_w ||
			'Error Back Trace: ' || dbms_utility.format_error_backtrace,1,255);
end;

commit;

CALL pls_grava_log_proces_imp_a500('Fim ptu_consistir_fatura', nr_seq_fatura_p, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_consistir_fatura ( nr_seq_fatura_p bigint, ds_erro_p INOUT text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

