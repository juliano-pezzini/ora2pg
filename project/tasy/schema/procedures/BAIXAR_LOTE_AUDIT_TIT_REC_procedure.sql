-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixar_lote_audit_tit_rec ( nr_sequencia_p bigint, nm_usuario_p text, ie_acao_p text) AS $body$
DECLARE

 
dt_baixa_w			timestamp;
dt_baixa_cr_w			timestamp;
dt_geracao_w			timestamp;
cd_estabelecimento_w		integer;
nr_interno_conta_w			bigint;
cd_autorizacao_w			varchar(20);
nr_sequencia_w			bigint;
ie_acao_w			smallint;
vl_historico_w			double precision;
nr_seq_protocolo_w		bigint;
nr_seq_ret_item_w			bigint;
nr_seq_retorno_w			bigint;
cd_moeda_w			integer;
nr_titulo_w			bigint;
dt_vencimento_w			timestamp;
vl_saldo_w			double precision;
nr_seq_tit_w			bigint;
qt_baixa_w			integer;
vl_recebido_w			double precision;
vl_glosa_w			double precision;
nr_seq_trans_fin_conv_ret_w		bigint;
ie_consiste_mes_contabil_w 		varchar(1);
ie_gerar_data_atual_estorno_w	varchar(50);
dt_abertura_w			timestamp;
nr_sequencia_contabil_w		bigint;
cd_tipo_receb_audit_w		integer;
nr_seq_lote_recurso_w		bigint;
vl_perdas_w			double precision;
cd_tipo_receb_perda_w		bigint;
nr_seq_trans_fin_perda_w		bigint;
cd_tipo_recebimento_hist_w		bigint;
nr_seq_trans_financ_hist_w		bigint;
ie_perm_contas_nao_cons_w		varchar(1)	:= 'S';
vl_amenor_post_w			double precision;
vl_titulo_pagar_w			double precision;
nr_titulo_pagar_w			bigint;
cd_tipo_taxa_juro_w		bigint;
cd_tipo_taxa_multa_w		bigint;
cd_cgc_w			varchar(14);
nr_seq_conta_banco_w		bigint;
nr_seq_movto_trans_w		bigint;
nr_seq_conta_banco_lote_w		bigint;
vl_nota_credito_w		double precision;
ds_texto_w			varchar(255);

C01 CURSOR FOR 
SELECT	a.nr_interno_conta, 
	a.cd_autorizacao, 
	b.nr_sequencia, 
	c.ie_acao, 
	b.vl_historico, 
	b.nr_seq_ret_item, 
	d.nr_seq_protocolo, 
	c.cd_tipo_recebimento, 
	c.nr_seq_trans_financ, 
	c.nr_seq_conta_banco 
from	conta_paciente d, 
	hist_audit_conta_paciente c, 
	conta_paciente_retorno a, 
	conta_paciente_ret_hist b 
where	a.nr_sequencia		= b.nr_seq_conpaci_ret 
and	b.nr_seq_hist_audit	= c.nr_sequencia 
and	b.nr_seq_lote_audit	= nr_sequencia_p 
and	a.nr_interno_conta	= d.nr_interno_conta;

C02 CURSOR FOR 
SELECT	distinct nr_titulo, 
	dt_vencimento, 
	vl_saldo_titulo 
from	(SELECT	nr_titulo, 
		dt_vencimento, 
   		vl_saldo_titulo 
	from	titulo_receber 
	where (nr_documento IS NOT NULL AND nr_documento::text <> '') 
	and (nr_documento <> nr_interno_conta_w) 
	and	nr_interno_conta = nr_interno_conta_w 
	and	ie_situacao not in (2,3,5) 
	
union
 
	select	nr_titulo, 
		dt_vencimento, 
   		vl_saldo_titulo 
	from	titulo_receber 
	where	((coalesce(nr_documento::text, '') = '') or (nr_documento = nr_interno_conta_w)) 
	and	nr_interno_conta	= nr_interno_conta_w 
	and	ie_situacao not in (2,3,5) 
	
union
 
	select	nr_titulo, 
		dt_vencimento, 
   		vl_saldo_titulo 
	from	titulo_receber 
	where	(nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') 
 	and	nr_seq_protocolo = nr_seq_protocolo_w 
 	and	coalesce(nr_interno_conta::text, '') = '' 
	and	ie_situacao not in (2,3,5)) alias11 
order	by dt_vencimento;

/* Gerar título a pagar com todas as glosas devidas posteriores */
 
c03 CURSOR FOR 
SELECT	sum(a.vl_historico), 
	d.cd_cgc 
from	hist_audit_conta_paciente e, 
	convenio d, 
	convenio_retorno c, 
	convenio_retorno_item b, 
	conta_paciente_ret_hist a 
where	a.nr_seq_ret_item	= b.nr_sequencia 
and	b.nr_seq_retorno	= c.nr_sequencia 
and	c.cd_convenio		= d.cd_convenio 
and	a.nr_seq_hist_audit	= e.nr_sequencia 
and	e.ie_acao 		= 3 
and	b.vl_glosado_post	> 0 
and	a.nr_seq_lote_audit	= nr_sequencia_p 
group by 
	d.cd_cgc;


BEGIN 
 
select	dt_baixa, 
	coalesce(dt_baixa_cr,clock_timestamp()), 
	dt_geracao, 
	cd_estabelecimento, 
	nr_seq_lote_recurso, 
	nr_seq_conta_banco 
into STRICT	dt_baixa_w, 
	dt_baixa_cr_w, 
	dt_geracao_w, 
	cd_estabelecimento_w, 
	nr_seq_lote_recurso_w, 
	nr_seq_conta_banco_lote_w 
from	lote_audit_tit_rec 
where	nr_sequencia = nr_sequencia_p;
 
ie_perm_contas_nao_cons_w	:= coalesce(obter_valor_param_usuario(66,7,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'S');
ie_gerar_data_atual_estorno_w	:= coalesce(obter_valor_param_usuario(66,21,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
 
if (ie_acao_p = 'E') and (ie_gerar_data_atual_estorno_w = 'S') then 
	dt_baixa_cr_w	:= clock_timestamp();
end if;
 
if (ie_perm_contas_nao_cons_w = 'N') then 
	select	max(c.nr_sequencia) 
	into STRICT	nr_seq_retorno_w 
	from	convenio_retorno c, 
		convenio_retorno_item b, 
		conta_paciente_ret_hist a 
	where	a.nr_seq_ret_item	= b.nr_sequencia 
	and	b.nr_seq_retorno	= c.nr_sequencia 
	and	coalesce(c.dt_consistencia::text, '') = '' 
	and	a.nr_seq_lote_audit	= nr_sequencia_p;
 
	if (nr_seq_retorno_w > 0) then 
		--aapplication_error(-20011,'O retorno ' || nr_seq_retorno_w || ' ainda não foi consistido, não é possível baixar.'); 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(255633, 'nr_seq_retorno=' || NR_SEQ_RETORNO_W);
	end if;
end if;
 
if (coalesce(dt_geracao_w::text, '') = '') then 
	--aapplication_error(-20011,'Lote ainda não foi gerado !'); 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(255634);
end if;
 
--if	(dt_baixa_w is not null) then 
--	aapplication_error(-20011,'Lote já baixado !'); 
--end if; 
 
select	cd_moeda_padrao, 
	coalesce(nr_seq_trans_fin_audit,coalesce(nr_seq_trans_fin_conv_ret,null)), 
	ie_consiste_mes_contabil, 
	coalesce(cd_tipo_receb_audit,1), 
	coalesce(cd_tipo_receb_perda, coalesce(cd_tipo_receb_audit,1)), 
	coalesce(nr_seq_trans_fin_perda, nr_seq_trans_fin_conv_ret) 
into STRICT	cd_moeda_w, 
	nr_seq_trans_fin_conv_ret_w, 
	ie_consiste_mes_contabil_w, 
	cd_tipo_receb_audit_w, 
	cd_tipo_receb_perda_w, 
	nr_seq_trans_fin_perda_w 
from	parametro_contas_receber 
where	cd_estabelecimento = cd_estabelecimento_w;
 
if (ie_consiste_mes_contabil_w = 'S') then 	-- OS35550, Bruna 
	 
	select 	coalesce(max(nr_sequencia),0) 
	into STRICT 	nr_sequencia_contabil_w 
	from	ctb_mes_ref 
	where 	coalesce(dt_fechamento::text, '') = '' 
	and	(dt_abertura IS NOT NULL AND dt_abertura::text <> '');
 
	if (nr_sequencia_contabil_w <> 0)	then 
 
		select	coalesce(max(dt_abertura),clock_timestamp()) 
		into STRICT	dt_abertura_w 
		from	ctb_mes_ref 
		where 	nr_sequencia = nr_sequencia_contabil_w;
 
		if (dt_baixa_cr_w < dt_abertura_w) then 
			--aapplication_error(-20011, 'A data de baixa do titulo no Contas a Receber é inferior a data vigente na contabilidade (Mês de Referencia)' ); 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(255635);
		end if;
	end if;
end if;
 
vl_titulo_pagar_w	:= 0;
 
open c01;
loop 
fetch C01 into	 
	nr_interno_conta_w, 
	cd_autorizacao_w, 
	nr_sequencia_w, 
	ie_acao_w, 
	vl_historico_w, 
	nr_seq_ret_item_w, 
	nr_seq_protocolo_w, 
	cd_tipo_recebimento_hist_w, 
	nr_seq_trans_financ_hist_w, 
	nr_seq_conta_banco_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
 
	 
	select	max(a.nr_sequencia), 
		max(a.nr_seq_retorno) 
	into STRICT	nr_seq_ret_item_w, 
		nr_seq_retorno_w 
	from	convenio_retorno b, 
		convenio_retorno_item a 
	where	b.nr_sequencia 		= a.nr_seq_retorno 
	and	b.ie_status_retorno 	= 'F' 
	and	a.nr_sequencia 		= nr_seq_ret_item_w;
 
	/* Francisco - 25/09/2009 - OS 156069 - Gerar título a pagar glosa posterior */
 
	select	coalesce(sum(vl_amenor_post),0) 
	into STRICT	vl_amenor_post_w 
	from	convenio_retorno_item 
	where	nr_sequencia	= nr_seq_ret_item_w;	
 
	/* Se é glosa posterior e o historico é de glosa devida deve gerar título pagar */
 
	if (vl_amenor_post_w > 0) and (ie_acao_w	= 3) then	 
		 
		update	Convenio_Retorno_Item 
		set	vl_glosado_post	= vl_glosado_post + (vl_historico_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ), 
			vl_amenor_post	= vl_amenor_post - (vl_historico_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ), 
			ie_glosa	= 'S', 
			nm_usuario	= nm_usuario_p, 
			dt_atualizacao	= clock_timestamp() 
		where	nr_sequencia	= nr_seq_ret_item_w;
 
		update	conta_paciente_ret_hist 
		set	nr_seq_lote_audit	= nr_sequencia_p 
		where	nr_sequencia		= nr_sequencia_w;
		 
	else 
 
		open C02;
		loop 
		fetch C02 into 
			nr_titulo_w, 
			dt_vencimento_w, 
			vl_saldo_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
	 
			vl_recebido_w		:= 0;
			vl_glosa_w		:= 0;
			vl_perdas_w		:= 0;
			vl_nota_credito_w	:= 0;
	 
			if (ie_acao_w	in (1,6)) then 
				vl_recebido_w 	:= vl_historico_w;
			elsif (ie_acao_w	= 3) then 
				vl_glosa_w	:= vl_historico_w;
				update	Convenio_Retorno_Item 
				set	vl_glosado	= vl_glosado + (vl_historico_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ), 
					vl_amenor	= vl_amenor - (vl_historico_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ), 
					ie_glosa	= 'S', 
					nm_usuario	= nm_usuario_p, 
					dt_atualizacao	= clock_timestamp() 
				where	nr_sequencia	= nr_seq_ret_item_w;
			elsif (ie_acao_w	in (0,2)) then 
				update	Convenio_Retorno_Item 
				set	vl_amenor 	= vl_amenor - (vl_historico_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ), 
					nm_usuario 	= nm_usuario_p, 
					dt_atualizacao 	= clock_timestamp() 
				where	nr_sequencia 	= nr_seq_ret_item_w;
			elsif (ie_acao_w	= 7) then 
				vl_perdas_w		:= vl_historico_w;
			elsif (ie_acao_w	= 9) then 
				vl_nota_credito_w	:= vl_historico_w;
			else 
				--aapplication_error(-20011,'Histórico de ação "' || IE_ACAO_W || '" não foi previsto para ser baixado!'); 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(255636, 'IE_ACAO=' || IE_ACAO_W);
			end if;						
	 
			if (vl_recebido_w <> 0) or (vl_glosa_w <> 0) or (vl_perdas_w <> 0) or (vl_nota_credito_w <> 0) then 
 
				if (coalesce(coalesce(nr_seq_conta_banco_lote_w,nr_seq_conta_banco_w),0) = 0) then 
 
					select	coalesce(max(nr_sequencia),0) + 1 
					into STRICT	nr_seq_tit_w 
					from	titulo_receber_liq 
					where	nr_titulo	= nr_titulo_w;
					 
					ds_texto_w := initcap(substr(wheb_mensagem_pck.get_texto(303089),1,255)); --Lote Recurso 
					insert into titulo_receber_liq(nr_titulo, 
							nr_sequencia, 
							dt_recebimento, 
							vl_recebido, 
							vl_descontos, 
							vl_juros, 
							vl_multa, 
							cd_moeda, 
							dt_atualizacao, 
							nm_usuario, 
							cd_tipo_recebimento, 
							ie_acao, 
							cd_serie_nf_devol, 
							nr_nota_fiscal_devol, 
							cd_banco, 
							cd_agencia_bancaria, 
							nr_documento, 
							nr_lote_banco, 
							cd_cgc_emp_cred, 
							nr_cartao_cred, 
							nr_adiantamento, 
							nr_lote_contabil, 
							nr_seq_trans_fin, 
							vl_rec_maior, 
							vl_glosa, 
							nr_seq_ret_item, 
							nr_seq_retorno, 
							ie_lib_caixa, 
							ds_observacao, 
							vl_perdas, 
							nr_seq_conpaci_ret_hist, 
							nr_lote_contab_antecip, 
							nr_lote_contab_pro_rata, 
							vl_nota_credito) 
					values (nr_titulo_w, 
							nr_seq_tit_w, 
							dt_baixa_cr_w, 
							(vl_recebido_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ), 
							0, 
							0, 
							0, 
							cd_moeda_w, 
							clock_timestamp(), 
							nm_usuario_p, 
							coalesce(cd_tipo_recebimento_hist_w, CASE WHEN vl_perdas_w=0 THEN  cd_tipo_receb_audit_w  ELSE cd_tipo_receb_perda_w END ), 
							coalesce(ie_acao_p,'I'), 
							null, 
							null, 
							null, 
							null, 
							nr_sequencia_p, 
							null, 
							null, 
							null, 
							null, 
							0, 
							coalesce(nr_seq_trans_financ_hist_w, CASE WHEN vl_perdas_w=0 THEN  nr_seq_trans_fin_conv_ret_w  ELSE nr_seq_trans_fin_perda_w END ), 
							0, 
							(vl_glosa_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ), 
							nr_seq_ret_item_w, 
							nr_seq_retorno_w, 
							'S', 
							CASE WHEN coalesce(nr_seq_lote_recurso_w::text, '') = '' THEN null  ELSE ds_texto_w || ': ' || nr_seq_lote_recurso_w END , 
							(vl_perdas_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ), 
							nr_sequencia_w, 
							0, 
							0, 
							(vl_nota_credito_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END )); /* Francisco - OS 175078 - 28/10/2009 - Gravar qual historico gerou a baixa */
 
 
					-- Edgar OS 34355, gerar centro de custo na baixa do título 
					CALL gerar_titulo_rec_liq_cc(cd_estabelecimento_w, null, nm_usuario_p, nr_titulo_w, nr_seq_tit_w);
	 
					CALL atualizar_saldo_tit_rec(nr_titulo_w, nm_usuario_p);
 
				elsif (vl_recebido_w <> 0) then	/* ahoffelder - OS 302995 - 28/03/2011 - Baixa com movimentação bancária */
 
 
					select	nextval('movto_trans_financ_seq') 
					into STRICT	nr_seq_movto_trans_w 
					;
 
					insert	into movto_trans_financ(cd_tipo_recebimento, 
						dt_atualizacao, 
						dt_transacao, 
						ie_conciliacao, 
						nm_usuario, 
						nr_lote_contabil, 
						nr_seq_banco, 
						nr_seq_titulo_receber, 
						nr_seq_trans_financ, 
						nr_sequencia, 
						vl_transacao) 
					values (coalesce(cd_tipo_recebimento_hist_w, CASE WHEN vl_perdas_w=0 THEN  cd_tipo_receb_audit_w  ELSE cd_tipo_receb_perda_w END ), 
						clock_timestamp(), 
						coalesce(dt_baixa_cr_w,clock_timestamp()), 
						'N', 
						nm_usuario_p, 
						0, 
						coalesce(nr_seq_conta_banco_lote_w,nr_seq_conta_banco_w), 
						nr_titulo_w, 
						coalesce(nr_seq_trans_financ_hist_w, CASE WHEN vl_perdas_w=0 THEN  nr_seq_trans_fin_conv_ret_w  ELSE nr_seq_trans_fin_perda_w END ), 
						nr_seq_movto_trans_w, 
						(vl_recebido_w * CASE WHEN ie_acao_p='I' THEN  1  ELSE -1 END ));
 
					CALL atualizar_transacao_financeira(cd_estabelecimento_w,nr_seq_movto_trans_w,nm_usuario_p,ie_acao_p);
 
					select	max(a.nr_sequencia) 
					into STRICT	nr_seq_tit_w 
					from	titulo_receber_liq a 
					where	a.nr_titulo	= nr_titulo_w;
 
					ds_texto_w := initcap(substr(wheb_mensagem_pck.get_texto(303089),1,255)); --Lote Recurso 
					
					update	titulo_receber_liq 
					set	ds_observacao		= CASE WHEN nr_seq_lote_recurso_w = NULL THEN null  ELSE ds_texto_w|| ': ' || nr_seq_lote_recurso_w END , 
						nr_documento		= nr_sequencia_p, 
						nr_seq_conpaci_ret_hist	= nr_sequencia_w, 
						nr_seq_ret_item		= nr_seq_ret_item_w, 
						nr_seq_retorno		= nr_seq_retorno_w 
					where	nr_sequencia		= nr_seq_tit_w 
					and	nr_titulo			= nr_titulo_w;
 
				end if;
	 
				update	conta_paciente_ret_hist 
				set	nr_seq_lote_audit	= nr_sequencia_p 
				where	nr_sequencia		= nr_sequencia_w;
			end if;
		end loop;
		close C02;
	end if;
end loop;
close c01;
 
/* Francisco - 25/09/2009 - OS 156069 - Gerar título a pagar glosa posterior */
 
open c03;
loop 
fetch c03 into 
	vl_titulo_pagar_w, 
	cd_cgc_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
 
	if (vl_titulo_pagar_w > 0) then 
		select	nextval('titulo_pagar_seq') 
		into STRICT	nr_titulo_pagar_w 
		;
 
		select	max(cd_tipo_taxa_juro), 
			max(cd_tipo_taxa_multa), 
			max(cd_moeda_padrao) 
		into STRICT	cd_tipo_taxa_juro_w, 
			cd_tipo_taxa_multa_w, 
			cd_moeda_w 
		from	parametros_contas_pagar 
		where	cd_estabelecimento	= cd_estabelecimento_w;
	 
		insert	into	titulo_pagar(nr_titulo, 
			nm_usuario, 
			dt_atualizacao, 
			ie_origem_titulo, 
			ie_tipo_titulo, 
			dt_emissao, 
			dt_vencimento_original, 
			dt_vencimento_atual, 
			vl_titulo, 
			vl_saldo_titulo, 
			vl_saldo_juros, 
			vl_saldo_multa, 
			tx_juros, 
			tx_multa, 
			cd_tipo_taxa_juro, 
			cd_tipo_taxa_multa, 
			cd_moeda, 
			cd_estabelecimento, 
			ie_situacao, 
			cd_cgc, 
			nr_seq_lote_audit) 
		values (nr_titulo_pagar_w, 
			nm_usuario_p, 
			clock_timestamp(), 
			'11', 
			'10', /* Diversos */
 
			trunc(clock_timestamp(),'dd'), 
			trunc(clock_timestamp(),'dd') + 30, 
			trunc(clock_timestamp(),'dd') + 30, 
			vl_titulo_pagar_w, 
			vl_titulo_pagar_w, 
			0, 
			0, 
			0, 
			0, 
			cd_tipo_taxa_juro_w, 
			cd_tipo_taxa_multa_w, 
			cd_moeda_w, 
			cd_estabelecimento_w, 
			'A', 
			cd_cgc_w, 
			nr_sequencia_p);
		CALL ATUALIZAR_INCLUSAO_TIT_PAGAR(nr_titulo_pagar_w,nm_usuario_p);	
	end if;
end loop;
close c03;
 
CALL GERAR_NOTA_CREDITO_RET_HIST( nr_sequencia_p, cd_estabelecimento_w, nm_usuario_p, ie_acao_p);
 
select	count(*) 
into STRICT	qt_baixa_w 
from	conta_paciente_ret_hist 
where	nr_seq_lote_audit = nr_sequencia_p;
 
if (qt_baixa_w > 0) then 
	update	lote_audit_tit_rec 
	set	dt_baixa	= CASE WHEN ie_acao_p='I' THEN  clock_timestamp()  ELSE null END , 
		dt_baixa_cr	= CASE WHEN ie_acao_p='I' THEN  dt_baixa_cr_w  ELSE null END  
	where	nr_sequencia	= nr_sequencia_p;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixar_lote_audit_tit_rec ( nr_sequencia_p bigint, nm_usuario_p text, ie_acao_p text) FROM PUBLIC;

