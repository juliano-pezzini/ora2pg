-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hdm_continuar_ciclo_atend ( nr_seq_prog_partic_mod_copy_p mprev_prog_partic_modulo.nr_sequencia%type, nr_seq_prog_partic_paste_p mprev_programa_partic.nr_sequencia%type, nr_seq_motivo_p mprev_partic_ciclo_item.nr_seq_motivo_desvio%type, nm_usuario_p text, nr_seq_prog_partic_mod_paste_p INOUT mprev_prog_partic_modulo.nr_sequencia%type, ds_mensagem_erro_p INOUT text ) AS $body$
DECLARE


nr_seq_programa_paste_w			mprev_programa.nr_sequencia%type;
nr_seq_prog_modulo_copy_w		mprev_programa_modulo.nr_sequencia%type;
nr_seq_modulo_copy_w			mprev_modulo_atend.nr_sequencia%type;
new_prog_partic_modulo_seq_w	mprev_prog_partic_modulo.nr_sequencia%type;
new_partic_ciclo_atend_seq_w	mprev_partic_ciclo_atend.nr_sequencia%type;
new_partic_ciclo_item_seq_w		mprev_partic_ciclo_item.nr_sequencia%type;
new_part_cic_item_ativ_seq_w	mprev_part_cic_item_ativ.nr_sequencia%type;
ds_modulo_atend_w				varchar(4000);
nm_programa_w					varchar(4000);
ie_prog_contem_modulo_w			varchar(1);
ie_existe_atend_previ_agend_w	varchar(1);
ie_existe_mod_vigente_w			varchar(1);

C01 CURSOR( nr_seq_prog_partic_modulo_pc	mprev_prog_partic_modulo.nr_sequencia%type ) FOR
	SELECT	a.dt_fim_ciclo,
			a.dt_inicio_ciclo,
			a.nr_seq_ciclo_ant,
			a.nr_seq_plano_atend,
			a.nr_sequencia
	from	mprev_partic_ciclo_atend a
	where	a.nr_seq_prog_partic_mod = nr_seq_prog_partic_modulo_pc;

C02 CURSOR( nr_seq_partic_ciclo_atend_pc	mprev_partic_ciclo_atend.nr_sequencia%type ) FOR
	SELECT	a.ds_observacao,
			a.dt_cancelamento,
			a.dt_execucao,
			a.dt_prevista,
			a.dt_ultima_tent_contato,
			a.dt_ultimo_contato_sucesso,
			a.ie_cancel_troca_mod,
			a.ie_forma_atend_prev,
			a.ie_origem_atend_prev,
			a.ie_resultado_visita,
			a.ie_status,
			row_number() OVER () - 1 nr_atendimento_ciclo,
			a.nr_atend_origem,
			a.nr_seq_motivo_agendamento,
			a.nr_seq_motivo_desvio,
			a.nr_seq_part_canc_ativ,
			a.nr_seq_plano_atend_item,
			a.nr_sequencia
	from	mprev_partic_ciclo_item a
	where	a.nr_seq_partic_ciclo_atend = nr_seq_partic_ciclo_atend_pc
	and		a.ie_status in ('P', 'A')
	order by a.nr_sequencia;

C03 CURSOR( nr_seq_partic_ciclo_item_pc	mprev_partic_ciclo_item.nr_sequencia%type ) FOR
	SELECT	a.cd_profissional,
			a.ds_motivo_repasse,
			a.dt_finalizacao,
			a.nr_seq_equipe,
			a.nr_seq_funcao_colab,
			a.nr_sequencia
	from	mprev_part_cic_item_resp a
	where	a.nr_seq_partic_ciclo_item = nr_seq_partic_ciclo_item_pc;

C04 CURSOR( nr_seq_partic_ciclo_item_pc	mprev_partic_ciclo_item.nr_sequencia%type ) FOR
	SELECT	a.dt_executado_sistema,
			a.ie_executado,
			a.ie_gerado_sistema,
			a.nr_seq_atividade,
			a.nr_seq_ativ_plano_aval,
			a.nr_seq_ativ_plano_exame,
			a.nr_seq_proc_interno,
			a.nr_sequencia
	from	mprev_part_cic_item_ativ a
	where	a.nr_seq_partic_ciclo_item = nr_seq_partic_ciclo_item_pc;

BEGIN


if (nr_seq_prog_partic_paste_p IS NOT NULL AND nr_seq_prog_partic_paste_p::text <> '' AND nr_seq_prog_partic_mod_copy_p IS NOT NULL AND nr_seq_prog_partic_mod_copy_p::text <> '') then

	-- OBTER A SEQUÊNCIA DO PROGRAMA HDM PARA O QUAL VAMOS COPIAR O MÓDULO
	select	a.nr_seq_programa
	into STRICT	nr_seq_programa_paste_w
	from	mprev_programa_partic a
	where	a.nr_sequencia = nr_seq_prog_partic_paste_p;

	-- VERIFICAR SE EXISTE MÓDULOS COM CICLOS VIGENTES
	select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
	into STRICT	ie_existe_mod_vigente_w
	from	mprev_prog_partic_modulo a
	where	nr_seq_programa_partic = nr_seq_prog_partic_paste_p
	-- A BAIXO É VERIFICADO SE HÁ MÓDULOS COM CICLO GERADOS
	and		(dt_geracao_prim_ciclo IS NOT NULL AND dt_geracao_prim_ciclo::text <> '')
	-- A BAIXO É UMA RESTRIÇÃO PARA TRAZER OS MÓDULOS AINDA VIGENTES
	and		((coalesce(dt_saida::text, '') = '' and coalesce(dt_cancelamento::text, '') = '')
		-- A DATA DE CANCELAMENTO DEVE SER VERIFICADA PRIMEIRO QUE A DATA DE SAÍDA
		or ((dt_cancelamento IS NOT NULL AND dt_cancelamento::text <> '') and clock_timestamp() between pkg_date_utils.start_of(dt_entrada, 'DAY') and dt_cancelamento)
		or ((dt_saida IS NOT NULL AND dt_saida::text <> '') and clock_timestamp() between pkg_date_utils.start_of(dt_entrada, 'DAY') and dt_saida));
	
	-- SE ENTRAR NESSE IF, SIGNIFICAQUE QUE NÃO HÁ MÓDULOS COM CICLO VIGENTE NO PROGRAMA PARA O QUAL ESTAMOS COPIANDO
	if (ie_existe_mod_vigente_w = 'N') then
	
		-- VERIFICAR SE EXISTE PELO MENOS UM ATENDIMENTO PREVISTO OU AGENDADO NO CICLO, POIS SE NÃO HOUVER, NÃO FAZ SENTIDO DAR CONTINUIDADE
		select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
		into STRICT	ie_existe_atend_previ_agend_w
		from	mprev_partic_ciclo_atend a
		where	nr_seq_prog_partic_mod = nr_seq_prog_partic_mod_copy_p
		and exists (	SELECT	1
						from	mprev_partic_ciclo_item z
						where	z.ie_status in ('P', 'A')
						and		z.nr_seq_partic_ciclo_atend = a.nr_sequencia);

		-- SE ENTRAR NESSE IF, SIGNIFICAQUE HÁ PELO MENOS UM ATENDIMENTO PREVISTO OU AGENDADO NO CICLO DO MÓDULO
		if (ie_existe_atend_previ_agend_w = 'S') then
			
			-- OBTER A SEQUÊNCIA DA TABELA INTERMEDIÁRIA PROGRAMA/MÓDULO PARA USAR NO PRÓXIMO SELECT
			select	a.nr_seq_prog_modulo
			into STRICT	nr_seq_prog_modulo_copy_w
			from	mprev_prog_partic_modulo a
			where	a.nr_sequencia = nr_seq_prog_partic_mod_copy_p;
			
			-- OBTER A SEQUÊNCIA DO MÓDULO DE ATENDIMENTO QUE ESTÁ CADASTRADO PARA AQUELE PROGRAMA
			select	a.nr_seq_modulo
			into STRICT	nr_seq_modulo_copy_w
			from	mprev_programa_modulo a
			where	a.nr_sequencia = nr_seq_prog_modulo_copy_w;

			-- VERIFICAR SE O MESMO MÓDULO DE ATENDIMENTO, OBTIDO NO SELECT ANTERIOR, ESTÁ CONFIGURADO DENTRO DO PROGRAMA PARA O QUAL IREMO COPIAR O REGISTRO EM QUESTÃO
			select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
			into STRICT	ie_prog_contem_modulo_w
			from	mprev_programa_modulo a
			where	a.nr_seq_programa = nr_seq_programa_paste_w
			and		a.nr_seq_modulo = nr_seq_modulo_copy_w;

			-- SE ENTRAR NESSE IF, SIGNIFICA QUE O MÓDULO DE ATENDIMENTO ESTÁ CONFIGURADO DENTRO DO PROGRAMA PARA O QUAL ESTAMOS TENTANDO COPIAR O REGISTRO
			if (ie_prog_contem_modulo_w = 'S') then
				
					select	nextval('mprev_prog_partic_modulo_seq')
					into STRICT	new_prog_partic_modulo_seq_w
					;
					
					-- INSERINDO UM MÓDULO
					insert into mprev_prog_partic_modulo(	ds_motivo,
						dt_atualizacao,
						dt_atualizacao_nrec,
						dt_cancelamento,
						dt_entrada,
						dt_geracao_prim_ciclo,
						dt_saida,
						ie_cancelamento,
						ie_data_final,
						ie_gerar_profi_prog_partic,
						nm_usuario,
						nm_usuario_nrec,
						nr_seq_classificacao,
						nr_seq_motivo_canc,
						nr_seq_prog_modulo,
						nr_seq_programa_partic,
						nr_sequencia )
					SELECT	a.ds_motivo,
							clock_timestamp(),
							clock_timestamp(),
							a.dt_cancelamento,
							clock_timestamp(),
							clock_timestamp(),
							a.dt_saida,
							a.ie_cancelamento,
							a.ie_data_final,
							a.ie_gerar_profi_prog_partic,
							nm_usuario_p,
							nm_usuario_p,
							a.nr_seq_classificacao,
							a.nr_seq_motivo_canc,
							a.nr_seq_prog_modulo,
							nr_seq_prog_partic_paste_p,
							new_prog_partic_modulo_seq_w
					from	mprev_prog_partic_modulo a
					where	a.nr_sequencia = nr_seq_prog_partic_mod_copy_p;
					
					-- 'for' POR REGISTRO DE CICLO DENTRO DO MÓDULO
					for	r_c01_w	in C01( nr_seq_prog_partic_mod_copy_p ) loop
						
						select	nextval('mprev_partic_ciclo_atend_seq')
						into STRICT	new_partic_ciclo_atend_seq_w
						;
						
						-- INSERINDO UM CICLO
						insert into mprev_partic_ciclo_atend(	dt_atualizacao,
							dt_atualizacao_nrec,
							dt_fim_ciclo,
							dt_inicio_ciclo,
							nm_usuario,
							nm_usuario_nrec,
							nr_seq_ciclo_ant,
							nr_seq_plano_atend,
							nr_seq_prog_partic_mod,
							nr_sequencia )
						values ( clock_timestamp(),
							clock_timestamp(),
							r_c01_w.dt_fim_ciclo,
							r_c01_w.dt_inicio_ciclo,
							nm_usuario_p,
							nm_usuario_p,
							r_c01_w.nr_seq_ciclo_ant,
							r_c01_w.nr_seq_plano_atend,
							new_prog_partic_modulo_seq_w,
							new_partic_ciclo_atend_seq_w );
						
						-- TODOS OS REGISTROS DE CICLO QUE ESTIVEREM VINCULADOS AO REGISTRO QUE ESTOU COPIANDO, PELO ATRIBUTO "nr_seq_ciclo_ant", TERÃO O VALOR DESTE ATRIBUTO ATUALIZADO PARA O NOVO "nr_sequencia" DO REGISTRO QUE ACABOU DE SER INSERIDO
						update	mprev_partic_ciclo_atend a
						set		a.nr_seq_ciclo_ant = new_partic_ciclo_atend_seq_w
						where	a.nr_seq_ciclo_ant = r_c01_w.nr_sequencia;

						-- 'for' POR REGISTRO DE ATENDIMENTO PREVISTRO (Ciclo Item) DENTRO DO CICLO
						for	r_c02_w	in C02( r_c01_w.nr_sequencia ) loop
						
							select	nextval('mprev_partic_ciclo_item_seq')
							into STRICT	new_partic_ciclo_item_seq_w
							;

							-- INSERINDO UM ATENDIMENTO PREVISTRO (Ciclo Item)
							insert into mprev_partic_ciclo_item(	ds_observacao,
								dt_atualizacao,
								dt_atualizacao_nrec,
								dt_cancelamento,
								dt_execucao,
								dt_prevista,
								dt_ultima_tent_contato,
								dt_ultimo_contato_sucesso,
								ie_cancel_troca_mod,
								ie_forma_atend_prev,
								ie_origem_atend_prev,
								ie_resultado_visita,
								ie_status,
								nm_usuario,
								nm_usuario_nrec,
								nr_atendimento_ciclo,
								nr_atend_origem,
								nr_seq_motivo_agendamento,
								nr_seq_motivo_desvio,
								nr_seq_part_canc_ativ,
								nr_seq_partic_ciclo_atend,
								nr_seq_plano_atend_item,
								nr_seq_programa_partic,
								nr_sequencia )
							values ( r_c02_w.ds_observacao,
								clock_timestamp(),
								clock_timestamp(),
								r_c02_w.dt_cancelamento,
								r_c02_w.dt_execucao,
								r_c02_w.dt_prevista,
								r_c02_w.dt_ultima_tent_contato,
								r_c02_w.dt_ultimo_contato_sucesso,
								r_c02_w.ie_cancel_troca_mod,
								r_c02_w.ie_forma_atend_prev,
								r_c02_w.ie_origem_atend_prev,
								r_c02_w.ie_resultado_visita,
								r_c02_w.ie_status,
								nm_usuario_p,
								nm_usuario_p,
								r_c02_w.nr_atendimento_ciclo,
								r_c02_w.nr_atend_origem,
								r_c02_w.nr_seq_motivo_agendamento,
								r_c02_w.nr_seq_motivo_desvio,
								r_c02_w.nr_seq_part_canc_ativ,
								new_partic_ciclo_atend_seq_w,
								r_c02_w.nr_seq_plano_atend_item,
								nr_seq_prog_partic_paste_p,
								new_partic_ciclo_item_seq_w );
							
							-- OS UPDATES A SEGUIR SÃO REALIZADOS PARA QUE TODOS OS REGISTROS QUE SÃO VINCULADOS AO "NR_SEQUENCIA" DO ATENDIMENTO PREVISTRO (Ciclo Item) SEJAM ALTERADOS PARA O NOVO "NR_SEQUENCIA" DO REGISTRO QUE ACABOU DE SER INSERIDO
							update	agenda_consulta a
							set		a.nr_seq_partic_ciclo_item = new_partic_ciclo_item_seq_w
							where	a.nr_seq_partic_ciclo_item = r_c02_w.nr_sequencia;
							
							update	agenda_integrada a
							set		a.nr_seq_partic_ciclo_item = new_partic_ciclo_item_seq_w
							where	a.nr_seq_partic_ciclo_item = r_c02_w.nr_sequencia;
							
							update	agenda_integrada_item a
							set		a.nr_seq_partic_ciclo_item = new_partic_ciclo_item_seq_w
							where	a.nr_seq_partic_ciclo_item = r_c02_w.nr_sequencia;
							
							update	mprev_agendamento a
							set		a.nr_seq_partic_ciclo_item = new_partic_ciclo_item_seq_w
							where	a.nr_seq_partic_ciclo_item = r_c02_w.nr_sequencia;
							
							update	w_hdm_prof_resp_ageint a
							set		a.nr_seq_partic_ciclo_item = new_partic_ciclo_item_seq_w
							where	a.nr_seq_partic_ciclo_item = r_c02_w.nr_sequencia;
							
							update	mprev_tele_repasse a
							set		a.nr_seq_part_ciclo_item = new_partic_ciclo_item_seq_w
							where	a.nr_seq_part_ciclo_item = r_c02_w.nr_sequencia;
							
							update	mprev_tele_sug_contato a
							set		a.nr_seq_partic_ciclo_item = new_partic_ciclo_item_seq_w
							where	a.nr_seq_partic_ciclo_item = r_c02_w.nr_sequencia;
							
							update	pls_atendimento a
							set		a.nr_seq_mprev_part_ciclo_item = new_partic_ciclo_item_seq_w
							where	a.nr_seq_mprev_part_ciclo_item = r_c02_w.nr_sequencia;
							
							-- 'for' POR REGISTRO DE RESPONSÁVEL DENTRO DO ATENDIMENTO PREVISTRO (Ciclo Item)
							for	r_c03_w	in C03( r_c02_w.nr_sequencia ) loop
								
								-- INSERINDO UM RESPONSÁVEL
								insert into mprev_part_cic_item_resp(	cd_profissional,
									ds_motivo_repasse,
									dt_atualizacao,
									dt_atualizacao_nrec,
									dt_finalizacao,
									nm_usuario,
									nm_usuario_nrec,
									nr_seq_equipe,
									nr_seq_funcao_colab,
									nr_seq_partic_ciclo_item,
									nr_sequencia )
								values ( r_c03_w.cd_profissional,
									r_c03_w.ds_motivo_repasse,
									clock_timestamp(),
									clock_timestamp(),
									r_c03_w.dt_finalizacao,
									nm_usuario_p,
									nm_usuario_p,
									r_c03_w.nr_seq_equipe,
									r_c03_w.nr_seq_funcao_colab,
									new_partic_ciclo_item_seq_w,
									nextval('mprev_part_cic_item_resp_seq') );
							end loop;
							
							-- 'for' POR REGISTRO DE ATIVIDADES DENTRO DO ATENDIMENTO PREVISTRO (Ciclo Item)
							for	r_c04_w	in C04( r_c02_w.nr_sequencia ) loop
								
								select	nextval('mprev_part_cic_item_ativ_seq')
								into STRICT	new_part_cic_item_ativ_seq_w
								;
								
								-- INSERINDO UMA ATIVIDADE
								insert into mprev_part_cic_item_ativ(	dt_atualizacao,
									dt_atualizacao_nrec,
									dt_executado_sistema,
									ie_executado,
									ie_gerado_sistema,
									nm_usuario,
									nm_usuario_nrec,
									nr_seq_atividade,
									nr_seq_ativ_plano_aval,
									nr_seq_ativ_plano_exame,
									nr_seq_partic_ciclo_item,
									nr_seq_proc_interno,
									nr_sequencia )
								values ( clock_timestamp(),
									clock_timestamp(),
									r_c04_w.dt_executado_sistema,
									r_c04_w.ie_executado,
									r_c04_w.ie_gerado_sistema,
									nm_usuario_p,
									nm_usuario_p,
									r_c04_w.nr_seq_atividade,
									r_c04_w.nr_seq_ativ_plano_aval,
									r_c04_w.nr_seq_ativ_plano_exame,
									new_partic_ciclo_item_seq_w,
									r_c04_w.nr_seq_proc_interno,
									new_part_cic_item_ativ_seq_w );

								-- OS UPDATES A SEGUIR SÃO REALIZADOS PARA QUE TODOS OS REGISTROS QUE SÃO VINCULADOS AO "NR_SEQUENCIA" DA ATIVIDADE SEJAM ALTERADOS PARA O NOVO "NR_SEQUENCIA" DO REGISTRO QUE ACABOU DE SER INSERIDO
								update	w_mprev_agendamento_ativ a
								set		a.nr_seq_part_cic_item_ativ = new_part_cic_item_ativ_seq_w
								where	a.nr_seq_part_cic_item_ativ = r_c04_w.nr_sequencia;

								update	mprev_agendamento_ativ a
								set		a.nr_seq_part_cic_item_ativ = new_part_cic_item_ativ_seq_w
								where	a.nr_seq_part_cic_item_ativ = r_c04_w.nr_sequencia;
							end loop;
						end loop;
					end loop;
					
					CALL mprev_cancelar_mod_partic( nr_seq_prog_partic_mod_copy_p, nr_seq_motivo_p, nm_usuario_p );
			else
				-- SE ENTRAR NESSE ELSE, SIGNIFICA QUE NÃO TEM O MÓDULO DE ATENDIMENTO CONFIGURADO PARA O PROGRAMA PARA O QUAL ESTAMOS TENTANDO COPIAR O REGISTRO
				select	'"' || a.ds_modulo  || ' (' || nr_seq_modulo_copy_w || ')' || '"'
				into STRICT	ds_modulo_atend_w
				from	mprev_modulo_atend a
				where	a.nr_sequencia = nr_seq_modulo_copy_w;

				select	'"' || a.nm_programa || ' (' || nr_seq_programa_paste_w || ')' || '"'
				into STRICT	nm_programa_w
				from	mprev_programa a
				where	a.nr_sequencia = nr_seq_programa_paste_w;
				
				-- MENSAGEM APRESENTADA: Módulo de atendimento #@DS_MODULO_ATEND#@ não configurado para o programa #@DS_PROGRAMA#@. Para configurar acesse a função "HDM - Programas" > pasta "Programas" > selecione o registro com o programa #@DS_PROGRAMA#@ > pasta "Módulos atendimento" > e crie um registro ativo com o módulo #@DS_MODULO_ATEND#@.
				ds_mensagem_erro_p := wheb_mensagem_pck.get_texto(1089385,'DS_MODULO_ATEND=' || ds_modulo_atend_w || ';DS_PROGRAMA=' || nm_programa_w);
			end if;
		else
			-- SE ENTRAR NESSE ELSE, SIGNIFICAQUE QUE NÃO HÁ ATENDIMENTOS PREVISTOS OU AGENDADOS NO CICLO DO MÓDULO

			
			-- MENSAGEM APRESENTADA: Não há atendimentos previstos ou agendados no ciclo deste módulo.
			ds_mensagem_erro_p := wheb_mensagem_pck.get_texto(1089433);
		end if;
	else
		-- SE ENTRAR NESSE ELSE, SIGNIFICAQUE QUE HÁ MÓDULOS AINDA VIGENTES
		select	'"' || a.nm_programa || ' (' || nr_seq_programa_paste_w || ')' || '"'
		into STRICT	nm_programa_w
		from	mprev_programa a
		where	a.nr_sequencia = nr_seq_programa_paste_w;
		
		-- MENSAGEM APRESENTADA: No programa #@DS_PROGRAMA#@, já existe um módulo com ciclo vigente.
		ds_mensagem_erro_p := wheb_mensagem_pck.get_texto(1089629,'DS_PROGRAMA='||nm_programa_w);
	end if;
end if;

nr_seq_prog_partic_mod_paste_p := new_prog_partic_modulo_seq_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hdm_continuar_ciclo_atend ( nr_seq_prog_partic_mod_copy_p mprev_prog_partic_modulo.nr_sequencia%type, nr_seq_prog_partic_paste_p mprev_programa_partic.nr_sequencia%type, nr_seq_motivo_p mprev_partic_ciclo_item.nr_seq_motivo_desvio%type, nm_usuario_p text, nr_seq_prog_partic_mod_paste_p INOUT mprev_prog_partic_modulo.nr_sequencia%type, ds_mensagem_erro_p INOUT text ) FROM PUBLIC;

