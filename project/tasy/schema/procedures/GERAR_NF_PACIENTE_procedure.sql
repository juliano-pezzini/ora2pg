-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nf_paciente ( nr_interno_conta_p bigint, nr_atendimento_p INOUT bigint, cd_convenio_p INOUT bigint, nr_seq_protocolo_p INOUT bigint, cd_estabelecimento_p bigint, dt_emissao_p timestamp, dt_base_vencimento_p timestamp, cd_pessoa_fisica_p INOUT text, cd_cgc_p INOUT text, cd_serie_nf_p text, cd_nat_oper_nf_p text, cd_operacao_nf_p bigint, cd_condicao_pagamento_p bigint, qt_item_maximo_p bigint, ie_origem_proced_p bigint, cd_procedimento_p bigint, cd_proced_acrescimo_p bigint, ie_origem_proc_acres_p bigint, ie_opcao_p INOUT text, nm_usuario_p text, nr_sequencia_p INOUT bigint, ds_complemento_p text, nr_nota_fiscal_p bigint, ds_observacao_p text, ds_obs_desconto_nf_p text, vl_desconto_nf_p bigint, ie_commit_p text, nr_seq_classif_fiscal_p bigint, nr_seq_sit_trib_p bigint, nr_recibo_p text, cd_setor_atendimento_p bigint, cd_moeda_p bigint default null, vl_cotacao_p bigint default null, cd_pagamento_cfdi_p text default null, cd_uso_cfdi_p text default null, cd_tipo_relacao_p text default null, ie_tipo_cfdi_p text default null) AS $body$
DECLARE


/*  ie_opcao_p
	todos - gerar todos os proc/mat das contas
	unico	- acumular todos os itens num unico procedimento
	secouber - se todos os itens couberem numa nota fiscal (ou se item negativo)
	unicoacr - acumular todos os itens num unico procedimento + o procedimento de acrescimo
	lista - insere a lista de proced/materiais cadastradas nos parametros da nota fiscal
	Estrutura - Nova regra do Cadastros Gerais semelhante a estrutura da conta paciente
*/
ie_geracao_w                    ctb_regra_geracao_lote_rec.ie_geracao%type;
cd_empresa_w			ctb_param_lote_nf.cd_empresa%type;
ie_ctb_online_w			ctb_param_lote_nf.ie_ctb_online%type	:= 'N';
ie_geracao_p			ctb_regra_geracao_lote_rec.ie_geracao%type;
reg_integracao_p		gerar_int_padrao.reg_integracao;
c001					integer;
c002					integer;
cd_convenio_w				integer;
cd_evento_nf_w				smallint;
dt_atualizacao_w				timestamp		:= clock_timestamp();
nr_sequencia_nf_w				bigint;
nr_seq_protoc_w				bigint 	:= null;
ie_origem_proced_w			bigint;
cd_procedimento_w			bigint;
cd_unidade_medida_w			varchar(30);
cd_unidade_medida_ww			varchar(30);
ie_numero_nota_w				varchar(1);
cd_material_w				integer;
qt_proc_mat_w				integer;
vl_proc_mat_w				double precision;
vl_proc_mat_acum_w			double precision;
vl_desc_item_w				double precision;
vl_desc_unif_w				double precision;
vl_desc_acum_w				double precision;
vl_item_prot_w				double precision;
vl_guias_w				double precision;
vl_total_guias_w				double precision	:= 0;
nr_interno_conta_prot_w			bigint;
vl_total_conta_w				double precision	:= 0;
vl_acrescimo_w				double precision	:= 0;
vl_tributos_w				double precision	:= 0;

cont_w					integer;
nr_contas_w				integer;
qt_item_nf_w				integer;
qt_item_calc_w				integer;
qt_item_neg_w				integer;
qt_item_par_w				integer;
ie_opcao_w				varchar(10);
ie_tipo_ordem_w				smallint;

cd_cgc_emitente_w         			varchar(14);
nr_nota_fiscal_w           			varchar(255);
IE_CONTA_FINANC_NF_w       		varchar(255);
vl_total_nota_w         			double precision;
vl_mercadoria_w            			double precision;
vl_ipi_w        	         			double precision;
vl_descontos_w             			double precision;
vl_descontos_ww             			nota_fiscal.vl_descontos%type;
vl_frete_w                			double precision;
vl_seguro_w                			double precision;
vl_despesa_acessoria_w     			double precision;
ds_observacao_w            			varchar(40);
vl_desconto_rateio_w       			double precision;
nr_sequencia_w             			bigint;
vl_unitario_item_nf_w			double precision;
ie_nf_guia_partic_w				varchar(001);
ds_erro_valor_w				varchar(12000)	:= null;
ds_erro_nota_w				varchar(12000)	:= null;
nr_notas_conta_w				integer	:= 0;
ds_sql_w					varchar(2000);
--ds_sql_seq_item_w			parametro_nfs_lista.ds_sql_seq_item%type;
ds_retorno_w				varchar(15);
ds_retorno_ww				varchar(15);
ds_retorno_www				varchar(15);
ds_erro_w				varchar(4000);
qt_itens_nf_w				integer;
nr_atendimento_w				bigint;
ie_calcula_nf_w				varchar(01);			/*Parametros faturamento*/
ie_regra_calcula_nf_w			varchar(01);			/*Par 27 da funcao -80*/
ie_gerar_qt_nf_w				varchar(01);			/*Par 60 da funcao -80*/
ie_calcula_nf_conv_w			varchar(01);			/*Cad convenio*/
ie_permite_alterar_pj_nf_w		varchar(01);			/*Par 51 da funcao -80*/
ie_altera_pj_tit				varchar(01) := 'N';			/*Cad convenio*/
ie_tipo_nota_w				varchar(03);
qt_reg_w					bigint;
ie_lista_itens_w				varchar(2);
ie_origem_proced_ww			varchar(15);
C10_w					integer;
Ignore					integer;
ds_historico_nf_w				varchar(255);
ie_atualiza_serie_nf_saida_w			varchar(15);
ie_tipo_convenio_w				smallint;
ie_tipo_conta_w				bigint;
cd_conta_contabil_w			varchar(20);
cd_centro_custo_w				bigint;
ie_tipo_atendimento_w			bigint;
CD_CONTA_FINANC_W			bigint;
cd_categoria_convenio_w			varchar(255);
cd_estab_nota_fiscal_w			smallint 	:= cd_estabelecimento_p;
cd_serie_nf_w				nota_fiscal.cd_serie_nf%type	:= cd_serie_nf_p;
qt_existe_w				bigint;
cd_perfil_w				integer;
dt_emissao_w				timestamp;
ie_nf_conta_canc_w			varchar(5);
qt_conta_cancelada_w			bigint;
nr_seq_proc_interno_ww			varchar(10);
nr_seq_proc_interno_w			bigint;
nr_seq_lock_w				bigint;
vl_desc_item_ww				varchar(20);
pr_desc_item_w				double precision;
cd_cgc_w				varchar(14);
nr_item_nf_w				bigint;
cd_tributo_w				smallint;
nr_sequencia_nf_ww			bigint;
cd_tipo_pessoa_w				smallint;
nr_seq_regra_classe_w			bigint;
nr_seq_classe_regra_w			bigint;
nr_seq_classe_w				bigint;
ie_gerar_classe_tit_w			varchar(1);
ie_ratear_desconto_item_w			varchar(1);
ie_situacao_w				natureza_operacao.ie_situacao%type;
ie_situacao_nf_w				nota_fiscal.ie_situacao%type;
ds_retorno_seq_item_w			varchar(15);
ds_retorno_ie_proc_mat_w			varchar(15);
nr_seq_item_w				double precision;
ie_proc_mat_w				varchar(1);
nr_seq_item_atend_w			nota_fiscal_item_atend.nr_sequencia%type;
dt_competencia_w				protocolo_convenio.dt_mesano_referencia%type := null;
ie_estab_serie_nf_w			parametro_compras.ie_estab_serie_nf%type;
vl_desconto_item_w			nota_fiscal_item.vl_desconto%type;
nr_item_nf_ww				nota_fiscal_item.nr_item_nf%type;
vl_imposto_nota_w				nota_fiscal_item_trib.vl_tributo%type;
vl_imposto_conta_w			double precision;
vl_diferencia_w				double precision;
vl_conta_total_w				double precision;
vl_nota_total_w				double precision;
vl_total_estrangeiro_w                  		nota_fiscal_item.vl_total_estrangeiro%type;
vl_unit_estrangeiro_w                   		nota_fiscal_item.vl_unit_estrangeiro%type;
ie_tit_tributo_paciente_w			varchar(1);
cd_centro_custo_ww			setor_atendimento.cd_centro_custo%type;
qt_centro_custo_w				bigint := 0;
vl_total_item_nf_w				nota_fiscal_item.vl_total_item_nf%type;
ie_ratear_trib_centro_c_w			varchar(1);
vl_rateio_w                             nota_fiscal_item_rateio.vl_rateio%type;
vl_valor_cc_w				double precision;
vl_diferenca_cc_w                       double precision;
pr_percentual_cc_w                        double precision;
vl_mercadoria_cc_w                      nota_fiscal.vl_mercadoria%type;
vl_rateio_item_ww                       nota_fiscal_item_rateio.vl_rateio%type;
nr_sequencia_rateio_w                    nota_fiscal_item_rateio.nr_sequencia%type;
vl_lancado_cc_w                          nota_fiscal_item_rateio.vl_rateio%type;
ie_gerar_trib_sem_tit_w         parametros_contas_pagar.ie_gerar_trib_sem_tit%type;
cd_operacao_estoque_w			operacao_nota.cd_operacao_estoque%type;
vl_item_neg_cfdi_w		nota_fiscal_item.vl_total_item_nf%type;
pr_percentual_cfdi_w		double precision;
vl_item_cfdi_w		  	nota_fiscal_item.vl_total_item_nf%type;
vl_desc_cfdi_w		  	nota_fiscal_item.vl_desconto%type;
vl_total_item_cfdi_w		nota_fiscal_item.vl_total_item_nf%type;
ie_rateio_trib_w		procedimento_fiscal.ie_rateio_trib%type;
vl_item_med_cfdi_w		nota_fiscal_item.vl_total_item_nf%type;
vl_item_nmed_cfdi_w		nota_fiscal_item.vl_total_item_nf%type;
ie_utilizar_cfdi_w		nfe_senha_conexao.ie_utilizar_cfdi%type;
cd_conta_contabil_ww		material_atend_paciente.cd_conta_contabil%type;

vl_diferenca_imp_w		double precision;
vl_trib_conta_w			propaci_imposto.vl_imposto%type;
vl_trib_nota_w			nota_fiscal_trib.vl_tributo%type;
ie_item_qt_1_w			varchar(1);
vl_tot_itens_nf_w		nota_fiscal_item.vl_total_item_nf%type;
qt_itens_nota_w			integer;
vl_adiantamento_conta_w	conta_paciente_adiant.vl_adiantamento%type;
vl_total_desc_cfdi_w	nota_fiscal_item.vl_desconto%type;
ie_teste_w				boolean;

cd_unidade_medida_compra_w nota_fiscal_item.cd_unidade_medida_compra%type;
cd_unidade_medida_estoque_w nota_fiscal_item.cd_unidade_medida_estoque%type;

nr_seq_proc_interno_1_w		procedimento_paciente.nr_seq_proc_interno%type;

ie_classificacao_w		conta_paciente_desconto.ie_classificacao%type;
ie_tipo_desconto_w	        conta_paciente_desconto.ie_tipo_desconto%type;

cd_categoria_iva_w              nota_fiscal_item.cd_categoria_iva%type;
ie_integra_finnegans_w          parametro_faturamento.ie_integra_finnegans%type;
ds_retorno_integracao_w         varchar(4000);

nr_atendimento_ww				bigint;
nr_interno_conta_ww				bigint;
cd_procedimento_loc_w           procedimento.cd_procedimento_loc%type;
cd_convenio_conta_w             conta_paciente.cd_convenio_parametro%type;

nr_seq_rule_w           protocolo_convenio.nr_seq_rule%type;

c02 CURSOR FOR
SELECT 	i.nr_item_nf,
	coalesce(vl_total_item_nf, 0)
from 	nota_fiscal_item i
where	i.nr_sequencia = nr_sequencia_w;

c04 CURSOR FOR
SELECT	cd_material,
	cd_procedimento,
	ie_origem_proced,
	upper(ds_sql),
	coalesce(ie_lista_itens,'N')
	--upper(ds_sql_seq_item)
from	parametro_nfs_lista
where	cd_estabelecimento			= cd_estabelecimento_p
and	cd_convenio			= cd_convenio_w
order by coalesce(ie_ordenacao, 1);

c03 CURSOR FOR
SELECT	coalesce(sum(a.vl_item),0),
	a.nr_interno_conta
from	protocolo_convenio_item_v a
where	a.nr_seq_protocolo	= nr_seq_protoc_w
and (coalesce(nr_seq_proc_pacote::text, '') = '' or nr_sequencia <> nr_seq_proc_pacote)
and 	coalesce(a.cd_motivo_exc_conta::text, '') = ''
group	by a.nr_interno_conta;

c01 CURSOR FOR
SELECT	0 ie_tipo_ordem,
        a.ie_origem_proced,
        a.cd_procedimento,
        0 cd_material,
        ' ' cd_unidade_medida,
        sum(coalesce(a.qt_procedimento,0)),
        sum(coalesce(a.vl_procedimento,0)),
        coalesce(sum(obter_proc_paciente_valor(a.nr_sequencia, 3, 1)),0),
        a.nr_seq_proc_interno,
        a.nr_interno_conta,
		null cd_procedimento_loc,
        OBTER_CONV_CONTA(a.nr_interno_conta) cd_convenio_conta
from 	procedimento_paciente a
where	a.nr_interno_conta in (
            SELECT	nr_interno_conta
            from	conta_paciente_nf
            where	nr_sequencia = nr_sequencia_w
        )
and		coalesce(a.cd_motivo_exc_conta::text, '') = ''
and		coalesce(a.nr_seq_proc_pacote, 0) 	<> a.nr_sequencia
and		a.cd_procedimento		        = coalesce(cd_proced_acrescimo_p,0)
and		a.ie_origem_proced		        = ie_origem_proc_acres_p
group 	by a.ie_origem_proced, a.cd_procedimento, 0, ' ', a.nr_seq_proc_interno, a.nr_interno_conta, OBTER_CONV_CONTA(a.nr_interno_conta)

union

select 1,
        a.ie_origem_proced,
        a.cd_procedimento,
        0 cd_material,
        ' ' cd_unidade_medida,
        sum(coalesce(a.qt_procedimento,0)),
        sum(coalesce(a.vl_procedimento,0)),
        coalesce(sum(obter_proc_paciente_valor(a.nr_sequencia, 3, 1)),0),
        a.nr_seq_proc_interno,
        a.nr_interno_conta,
		(select coalesce(x.cd_procedimento_loc,x.cd_procedimento) from procedimento x where x.cd_procedimento = a.cd_procedimento and x.ie_origem_proced = a.ie_origem_proced) cd_procedimento_loc,
        OBTER_CONV_CONTA(a.nr_interno_conta) cd_convenio_conta
from 	procedimento_paciente a
where	a.nr_interno_conta in (
            select nr_interno_conta
            from conta_paciente_nf
            where nr_sequencia = nr_sequencia_w
        )
and		coalesce(a.cd_motivo_exc_conta::text, '') = ''
and		a.cd_procedimento			   <> coalesce(cd_proced_acrescimo_p,0)
and		coalesce(a.nr_seq_proc_pacote, 0)   <> a.nr_sequencia
group 	by	a.ie_origem_proced, a.cd_procedimento, 0, ' ', a.nr_seq_proc_interno, a.nr_interno_conta, OBTER_CONV_CONTA(a.nr_interno_conta)

union

select	1,
        0,
        0,
        a.cd_material,
        a.cd_unidade_medida,
        sum(a.qt_material),
        sum(coalesce(a.vl_material,0)),
        coalesce(sum(coalesce(b.vl_material,0)),0),
        null,
        a.nr_interno_conta,
		null cd_procedimento_loc,
        OBTER_CONV_CONTA(a.nr_interno_conta) cd_convenio_conta
FROM material_atend_paciente a
LEFT OUTER JOIN mat_atend_paciente_valor b ON (a.nr_sequencia = b.nr_seq_material AND 3 = b.ie_tipo_valor)
WHERE a.nr_interno_conta in (
            select	nr_interno_conta
            from	conta_paciente_nf
            where	nr_sequencia = nr_sequencia_w
        ) and coalesce(a.cd_motivo_exc_conta::text, '') = ''   and coalesce(a.nr_seq_proc_pacote, 0)	      <> a.nr_sequencia and Obter_Tipo_Convenio(a.cd_convenio)    <> 3
group 	by 0, 0, a.cd_material, a.cd_unidade_medida, a.nr_interno_conta, OBTER_CONV_CONTA(a.nr_interno_conta)
order 	by 1;

c05 CURSOR FOR
SELECT	coalesce(b.cd_centro_custo, b.cd_centro_custo_receita) cd_centro_custo,
        sum(a.valor)
from 	valores_atend_paciente_v a,
     	setor_atendimento b
where 	a.cd_setor_atendimento = b.cd_setor_atendimento
  and	a.nr_interno_conta = nr_interno_conta_p
  and (a.quantidade <> 0 or a.valor <> 0)
  and 	coalesce(a.cd_motivo_exc_conta::text, '') = ''
  and 	(coalesce(b.cd_centro_custo, b.cd_centro_custo_receita) IS NOT NULL AND (coalesce(b.cd_centro_custo, b.cd_centro_custo_receita))::text <> '')
and	coalesce(a.nr_seq_proc_pacote, 0) 	<> a.nr_sequencia
group by coalesce(b.cd_centro_custo, b.cd_centro_custo_receita);


c06 CURSOR FOR
SELECT 	i.nr_item_nf,
	coalesce(vl_total_item_nf - vl_desconto, 0),
	coalesce(vl_desconto, 0)
from 	nota_fiscal_item i
where	i.nr_sequencia = nr_sequencia_w
and	((ie_rateio_trib_w = 'N') or ((ie_rateio_trib_w = 'S') and (exists (SELECT 1 from procedimento_fiscal p where p.cd_procedimento = i.cd_procedimento and p.ie_rateio_trib = 'S'))));

c07 CURSOR FOR
SELECT 	b.nr_item_nf,
	a.cd_conta_contabil,
	coalesce(a.cd_centro_custo_receita,
		(SELECT	max(coalesce(x.cd_centro_custo_receita,x.cd_centro_custo))
		from	conta_contabil y,
			setor_atendimento x
		where	y.cd_conta_contabil = a.cd_conta_contabil
		and	x.cd_setor_atendimento = a.cd_setor_atendimento
		and	y.ie_centro_custo = 'S')),
	sum(a.vl_procedimento) vl_item
from   	procedimento_paciente a,
	conta_pac_nf_item b
where  	a.nr_sequencia = b.nr_seq_propaci
and	nr_sequencia_nf = nr_sequencia_w
group by nr_item_nf,
	a.nr_interno_conta,
	a.cd_conta_contabil,
	a.cd_centro_custo_receita,
	a.cd_setor_atendimento

union all

select 	b.nr_item_nf,
	a.cd_conta_contabil,
	coalesce(a.cd_centro_custo_receita,
		(select	max(coalesce(x.cd_centro_custo_receita,x.cd_centro_custo))
		from	conta_contabil y,
			setor_atendimento x
		where	y.cd_conta_contabil = a.cd_conta_contabil
		and	x.cd_setor_atendimento = a.cd_setor_atendimento
		and	y.ie_centro_custo = 'S')),
	sum(a.vl_material) vl_item
from   	material_atend_paciente a,
	conta_pac_nf_item b
where  	a.nr_sequencia = b.nr_seq_matpaci
and	nr_sequencia_nf = nr_sequencia_w
group by nr_item_nf,
	a.nr_interno_conta,
	a.cd_conta_contabil,
	a.cd_centro_custo_receita,
	a.cd_setor_atendimento;

c08 CURSOR FOR
SELECT 	i.nr_item_nf,
		coalesce(vl_total_item_nf, 0),
		coalesce(vl_desconto, 0)
from 	nota_fiscal_item i
where	i.nr_sequencia = nr_sequencia_w;


BEGIN

cd_cgc_w := cd_cgc_p;

ie_permite_alterar_pj_nf_w := obter_param_usuario(-80, 51, obter_perfil_ativo, nm_usuario_p, cd_estab_nota_fiscal_w, ie_permite_alterar_pj_nf_w);

if (ie_permite_alterar_pj_nf_w = 'R') then
    select	coalesce(max(ie_altera_pj_tit),'S')
     into STRICT	ie_altera_pj_tit
     from	convenio_estabelecimento
    where	cd_estabelecimento = cd_estabelecimento_p
      and	cd_convenio = cd_convenio_p;
end if;

if((ie_permite_alterar_pj_nf_w = 'N') or (ie_permite_alterar_pj_nf_w = 'R' and ie_altera_pj_tit <> 'S')) then
    select	count(*)
    into STRICT	qt_existe_w
    from	convenio_estabelecimento
    where	cd_estabelecimento = cd_estabelecimento_p
    and	cd_convenio = cd_convenio_p
    and	(cd_cnpj_conv_estab IS NOT NULL AND cd_cnpj_conv_estab::text <> '');

    if (qt_existe_w > 0) then
        select	coalesce(max(cd_cnpj_conv_estab),cd_cgc_w)
        into STRICT	cd_cgc_w
        from	convenio_estabelecimento
        where	cd_estabelecimento = cd_estabelecimento_p
        and	cd_convenio = cd_convenio_p;
    end if;
end if;

ie_gerar_qt_nf_w := obter_param_usuario(-80, 60, obter_perfil_ativo, nm_usuario_p, cd_estab_nota_fiscal_w, ie_gerar_qt_nf_w);

cd_estab_nota_fiscal_w		:= cd_estabelecimento_p;
cd_serie_nf_w			:= cd_serie_nf_p;
cd_perfil_w			:= obter_perfil_ativo;

select	count(*)
into STRICT	qt_existe_w
from	regra_estab_nf
where	cd_estab_origem = cd_estabelecimento_p
and	((coalesce(cd_perfil::text, '') = '') or
	(cd_perfil IS NOT NULL AND cd_perfil::text <> '' AND cd_perfil = cd_perfil_w));

if (qt_existe_w > 0) then
	select	coalesce(cd_estab_destino,1),
		coalesce(cd_serie_nf,2)
	into STRICT	cd_estab_nota_fiscal_w,
		cd_serie_nf_w
	from	regra_estab_nf
	where	cd_estab_origem = cd_estabelecimento_p
	and	((coalesce(cd_perfil::text, '') = '') or
		(cd_perfil IS NOT NULL AND cd_perfil::text <> '' AND cd_perfil = cd_perfil_w));
end if;

select  max(a.ie_gerar_trib_sem_tit)
into STRICT    ie_gerar_trib_sem_tit_w
from	parametros_contas_pagar a
where	a.cd_estabelecimento	= cd_estabelecimento_p;


select	coalesce(max(ie_nf_guia_partic),'S'),
	coalesce(max(ie_calcula_nf),'N'),
	coalesce(max(ie_conta_financ_nf), 'N'),
	coalesce(max(ie_nf_conta_canc),'S'),
        coalesce(max(ie_integra_finnegans),'N')
into STRICT	ie_nf_guia_partic_w,
	ie_calcula_nf_w,
	ie_conta_financ_nf_w,
	ie_nf_conta_canc_w,
        ie_integra_finnegans_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estab_nota_fiscal_w;

select	count(*)
into STRICT	qt_reg_w
from	conta_paciente_nf a,
	nota_fiscal b
where	a.nr_sequencia	= b.nr_sequencia
and	b.ie_situacao	= '1'
and	a.nr_interno_conta	= nr_interno_conta_p;

if (qt_reg_w > 0) then
	--(-20011,'Ja existe uma nota fiscal vinculada conta ' || nr_interno_conta_p);
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173196,'NR_INTERNO_CONTA_P='||nr_interno_conta_p);
end if;

select	count(*)
into STRICT	qt_reg_w
from	nota_fiscal
where	ie_situacao	= '1'
and	nr_interno_conta	= nr_interno_conta_p;

if (qt_reg_w > 0) then
	--(-20011,'Ja existe uma nota fiscal vinculada conta ' || nr_interno_conta_p);
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173196,'NR_INTERNO_CONTA_P='||nr_interno_conta_p);
end if;

if (trunc(dt_emissao_p) > trunc(clock_timestamp())) then
	--(-20011,'A data de emissao da nota nao pode ser maior que a data atual!' || '#@#@');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173206);
end if;

if (coalesce(nr_seq_protocolo_p, 0) <> 0) then
  begin
    select nr_seq_rule
    into STRICT nr_seq_rule_w
    from protocolo_convenio
    where nr_seq_protocolo = nr_seq_protocolo_p;
  exception when others then
    nr_seq_rule_w := null;
  end;
end if;

nr_atendimento_w	:= nr_atendimento_p;
cd_convenio_w	:= cd_convenio_p;


begin
select	ie_tipo_convenio
into STRICT	ie_tipo_convenio_w
from	convenio
where	cd_convenio = cd_convenio_w;
exception when others then
	--(-20011,	'Falta informar os parametros para geracao da Nota Fiscal, para o convenio informado nesta conta paciente. ' ||

	--	'Esses parametros devem ser cadastrados na funcao Cadastro de Convenio Precos e Regras, pasta Regras, subpasta Nota Fiscal.');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173207);
end;

/* Marcus 05/07/2004 - consitencia para ver se a serie da nota fiscal existe */

select count(*)
into STRICT 	cont_w
from	serie_nota_fiscal
where	cd_serie_nf 		= cd_serie_nf_p
and 	cd_estabelecimento 	= cd_estabelecimento_p;
if (cont_w = 0) then
	--(-20011, 'A Serie informada nao esta cadastrada!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173208);
end if;

/* Edgar 12/11/2003 - consitencia para ver se a conta ja tem nota gerada */

if (coalesce(nr_interno_conta_p, 0) <> 0) then
	select	count(*)
	into STRICT	nr_notas_conta_w
	from	nota_fiscal
	where	nr_interno_conta = nr_interno_conta_p;
	if (nr_notas_conta_w > 0) and (ie_gerar_qt_nf_w = 'N') then
		--(-20011, 'Esta conta ja possui nota fiscal gerada!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173210);
	end if;

	select	count(*)
	into STRICT	qt_conta_cancelada_w
	from	conta_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	ie_cancelamento	= 'C';

	if (coalesce(ie_nf_conta_canc_w,'S') = 'N') and /*lhalves OS323780 em 26/05/2011 - Nao gerar NF para contas canceladas*/
		(qt_conta_cancelada_w > 0) then
		---20011,'Esta conta esta cancelada!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173211);
	end if;
end if;

/* Edgar 22/03/2004 - os7145, verificar se ja existe nota fiscal para o protocolo */

if (coalesce(nr_seq_protocolo_p, 0) <> 0) then
	select	count(*)
	into STRICT	cont_w
	from	nota_fiscal
	where	nr_seq_protocolo	= nr_seq_protocolo_p
	and	ie_situacao = '1';
	if (cont_w > 0) and (ie_gerar_qt_nf_w = 'N') then
		--(-20011, 'Este protocolo ja possui nota fiscal!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173212);
	end if;

	select	count(*)
	into STRICT	qt_conta_cancelada_w
	from	conta_paciente
	where	nr_seq_protocolo	= nr_seq_protocolo_p
	and	ie_cancelamento	= 'C';

	select	count(1)
	into STRICT	cont_w
	from	protocolo_convenio
	where	nr_seq_protocolo = nr_seq_protocolo_p;

	if (cont_w > 0) then
		begin

		select	max(dt_mesano_referencia)
		into STRICT	dt_competencia_w
		from	protocolo_convenio
		where	nr_seq_protocolo = nr_seq_protocolo_p;

		end;
	end if;

	if (coalesce(ie_nf_conta_canc_w,'S') = 'N') and /*lhalves OS323780 em 26/05/2011 - Nao gerar NF para contas canceladas*/
		(qt_conta_cancelada_w > 0) then
		--(-20011,'Este protocolo possui contas canceladas!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173213);
	end if;
end if;


if (nr_seq_protocolo_p > 0) or (coalesce(nr_seq_protocolo_p::text, '') = '') then
	nr_seq_protoc_w		:= nr_seq_protocolo_p;
end if;

select	coalesce(max(ie_calcular_nf),'N'),
	coalesce(max(ie_atualiza_serie_nf_saida),'S')
into STRICT	ie_calcula_nf_conv_w,
	ie_atualiza_serie_nf_saida_w
from	convenio_estabelecimento
where	cd_convenio		= cd_convenio_p
and	cd_estabelecimento	= cd_estab_nota_fiscal_w;

if (nr_seq_protoc_w > 0) and (nr_seq_protoc_w IS NOT NULL AND nr_seq_protoc_w::text <> '') and (ie_tipo_convenio_w <> 3) then
	begin

	select	sum(vl_item)
	into STRICT	vl_total_conta_w
	from 	protocolo_convenio_item_v
	where 	nr_seq_protocolo = nr_seq_protoc_w
	and (coalesce(nr_seq_proc_pacote::text, '') = '' or nr_sequencia <> nr_seq_proc_pacote)
  	and 	coalesce(cd_motivo_exc_conta::text, '') = '';

	if (ie_tipo_convenio_w = 3) then
		select	sum(Sus_Obter_Valor_Unif(nr_interno_conta,0))
		into STRICT	vl_total_conta_w
		from	conta_paciente a
		where	nr_seq_protocolo = nr_seq_protoc_w;
	end if;

	open	c03;
	loop
	fetch 	c03 into
		vl_item_prot_w,
		nr_interno_conta_prot_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin

		select	count(*)
		into STRICT	nr_notas_conta_w
		from	nota_fiscal
		where	nr_interno_conta	= nr_interno_conta_prot_w;

		if (nr_notas_conta_w > 0) then
			ds_erro_nota_w	:= ds_erro_nota_w || Wheb_mensagem_pck.get_Texto(307127) || nr_interno_conta_prot_w || chr(13);
		end if;

		select	coalesce(sum(a.vl_guia),0)
		into STRICT	vl_guias_w
		from	conta_paciente_guia a
		where	a.nr_interno_conta	= nr_interno_conta_prot_w;

		vl_total_guias_w	:= vl_total_guias_w + vl_guias_w;

		if (vl_guias_w	<> vl_item_prot_w) then
			ds_erro_valor_w	:= substr(ds_erro_valor_w || Wheb_mensagem_pck.get_Texto(307127) || nr_interno_conta_prot_w || Wheb_mensagem_pck.get_Texto(307129) || vl_item_prot_w || Wheb_mensagem_pck.get_Texto(307130) || vl_guias_w || chr(13),1,12000);
		end if;

		end;
	end loop;

	close c03;

	if (ds_erro_nota_w IS NOT NULL AND ds_erro_nota_w::text <> '') then
		--(-20011,' Existem contas com notas ja geradas ' || chr(13) || ds_erro_nota_w || chr(13) || ' ');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173214,'DS_ERRO_NOTA_W='||ds_erro_nota_w);
	end if;

	if (ds_erro_valor_w IS NOT NULL AND ds_erro_valor_w::text <> '') and (philips_param_pck.get_cd_pais <> 2) then
		--(-20011,' O valor do titulo ' || vl_total_conta_w || ' nao bate com o valor das guias ' || vl_total_guias_w || chr(13) || ds_erro_valor_w || chr (13) || ' ');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173217,
							'VL_TOTAL_CONTA_W='||vl_total_conta_w||';'||
							'VL_TOTAL_GUIAS_W='||vl_total_guias_w||';'||
							'DS_ERRO_VALOR_W='||ds_erro_valor_w);
	end if;

	end;
end if;

if (nr_interno_conta_p > 0) then
	begin

		select	sum(vl_item)
		into STRICT	vl_total_conta_w
		from 	conta_paciente_v
		where 	nr_interno_conta = nr_interno_conta_p
		and 	coalesce(cd_motivo_exc_conta::text, '') = ''
	  	and 	((ie_proc_mat = 2) or (coalesce(nr_seq_proc_pacote::text, '') = '' or nr_sequencia <> nr_seq_proc_pacote))
		and (qt_item <> 0 or vl_item <> 0); -- bruna, 04/05/2007
		if (ie_tipo_convenio_w = 3) then
			select	sum(Sus_Obter_Valor_Unif(nr_interno_conta,0))
			into STRICT	vl_total_conta_w
			from	conta_paciente
			where	nr_interno_conta = nr_interno_conta_p;
		end if;

		select	coalesce(sum(a.vl_guia),0)
		into STRICT	vl_guias_w
		from	conta_paciente_guia a
		where	a.nr_interno_conta	= nr_interno_conta_p;


		if (philips_param_pck.get_cd_pais <> 2 and philips_param_pck.get_cd_pais <> 9 and philips_param_pck.get_cd_pais <> 7 and philips_param_pck.get_cd_pais <> 12) and (vl_guias_w <> vl_total_conta_w) and (ie_tipo_convenio_w <> 3) then
			--(-20011,' O valor do titulo ' || vl_total_conta_w || ' nao bate com o valor das guias ' ||  vl_guias_w);
			CALL wheb_mensagem_pck.exibir_mensagem_abort(173243,
								'VL_TOTAL_CONTA_W='||vl_total_conta_w||';'||
								'VL_GUIAS_W='||vl_guias_w);
		end if;
	end;
end if;

/* consistencias dos parametros */

if (ie_opcao_p <> 'Todos') and (ie_opcao_p <> 'Estrut') and
	((coalesce(ie_origem_proced_p::text, '') = '') or (coalesce(coalesce(cd_procedimento_p,0)::text, '') = '')) then
	--(-20011,'Nao foi informado o procedimento correto');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173244);
end if;

if (ie_opcao_p <> 'SeCouber') and (ie_opcao_p <> 'Lista') and (coalesce(qt_item_maximo_p::text, '') = '') then
	--(-20011,'O numero maximo de itens deve ser informado #@#@');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173245);
end if;

if (nr_interno_conta_p IS NOT NULL AND nr_interno_conta_p::text <> '') and (nr_interno_conta_p <> 0) then
	begin
	nr_atendimento_p	:= null;
	cd_convenio_p		:= null;
	nr_atendimento_p	:= null;
	nr_seq_protocolo_p	:= null;
	end;
end if;
if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (coalesce(cd_convenio_p::text, '') = '') then
	--(-20011,'O convenio nao pode ser nulo');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173246);
end if;

if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') and
	((coalesce(cd_pessoa_fisica_p::text, '') = '') or (coalesce(cd_cgc_w::text, '') = '')) then
	begin
/*	cd_pessoa_fisica_p:= null;  Anderson 07/04/2008 - OS85089*/

	if (coalesce(cd_cgc_w::text, '') = '') and (coalesce(cd_pessoa_fisica_p::text, '') = '') then
		begin
		select	b.cd_cgc
		into STRICT	cd_cgc_w
		from	convenio b,
			protocolo_convenio a
		where	a.cd_convenio 		= b.cd_convenio
		and	a.nr_seq_protocolo 	= nr_seq_protocolo_p;
		exception
			when others then
			--(-20011,'Erro ao ler o CGC do convenio do protocolo');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(173247);
		end;
	end if;
	end;
end if;

if (coalesce(cd_estabelecimento_p::text, '') = '') or (coalesce(cd_serie_nf_p::text, '') = '') or (coalesce(cd_operacao_nf_p::text, '') = '') or (coalesce(cd_condicao_pagamento_p::text, '') = '') or (coalesce(dt_emissao_p::text, '') = '') then
	--(-20011,'O estabelecimento/serie/data/operacao/CP Nulo ');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173248);
end if;
if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then
	cd_pessoa_fisica_p	:= null;
end if;
if (coalesce(cd_cgc_w::text, '') = '') and (coalesce(cd_pessoa_fisica_p::text, '') = '') then
	--(-20011,'Pessoa fisica ou CNPJ invalidos ');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173249);
end if;

/* obter sequencia da nota fiscal */

select nextval('nota_fiscal_seq')
into STRICT nr_sequencia_w
;

/* obter cgc do emitente */

select	cd_cgc
into STRICT	cd_cgc_emitente_w
from 	estabelecimento
where 	cd_estabelecimento = cd_estab_nota_fiscal_w;

/* obter se sera considerado estabelecimento no parametro de compras */

select	coalesce(max(ie_estab_serie_nf),'N')
into STRICT	ie_estab_serie_nf_w
from	parametro_compras
where	cd_estabelecimento = cd_estab_nota_fiscal_w;

/* zerar valores nao sabidos */

nr_nota_fiscal_w		:= nr_sequencia_w + 800000;
vl_mercadoria_w		:= 0;
vl_total_nota_w		:= 0;
vl_ipi_w			:= 0;
vl_descontos_w		:= abs(coalesce(vl_desconto_nf_p,0));
vl_frete_w		:= 0;
vl_seguro_w		:= 0;
vl_despesa_acessoria_w	:= 0;
vl_desconto_rateio_w	:= 0;
nr_sequencia_nf_w		:= 9;
vl_desc_item_w		:= 0;
vl_desc_acum_w		:= 0;
ie_tipo_nota_w		:= 'SF';

if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
	ie_tipo_nota_w	:= 'SE';
end if;
select	coalesce(max(ie_situacao),'I')
into STRICT	ie_situacao_w
from	natureza_operacao
where	cd_natureza_operacao = cd_nat_oper_nf_p;

if (ie_situacao_w = 'I') then
	/* A natureza da operacao informada esta inativa. */

	CALL wheb_mensagem_pck.exibir_mensagem_abort(264381);
end if;

/* gravar nota fiscal */

begin

--dt_emissao_w	:= to_date(to_char(dt_emissao_p, 'dd/mm/yyyy') || ' 00:00:01','dd/mm/yyyy hh24:mi:ss');
dt_emissao_w	:= to_date(to_char(dt_emissao_p, 'dd/mm/yyyy') || ' ' || to_char(clock_timestamp(), 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');


insert into nota_fiscal(nr_sequencia, cd_estabelecimento, cd_cgc_emitente, cd_serie_nf,
	nr_nota_fiscal, nr_sequencia_nf, cd_operacao_nf, dt_emissao,
	dt_entrada_saida, ie_acao_nf, ie_emissao_nf, ie_tipo_frete,
	vl_mercadoria,vl_total_nota, qt_peso_bruto, qt_peso_liquido,
	dt_atualizacao, nm_usuario, cd_condicao_pagamento, cd_cgc,
	cd_pessoa_fisica, vl_ipi, vl_descontos, vl_frete, vl_seguro,
	vl_despesa_acessoria, ds_observacao, cd_natureza_operacao,
	vl_desconto_rateio, ie_situacao, nr_interno_conta,
	nr_seq_protocolo,ds_obs_desconto_nf,nr_seq_classif_fiscal, ie_tipo_nota, nr_recibo,
	dt_atualizacao_nrec, nm_usuario_nrec,cd_setor_digitacao,dt_competencia,cd_pagamento_cfdi,cd_moeda_estrangeira)
values (nr_sequencia_w, cd_estab_nota_fiscal_w, cd_cgc_emitente_w, cd_serie_nf_w,
	nr_nota_fiscal_w, nr_sequencia_nf_w, cd_operacao_nf_p, dt_emissao_w, dt_emissao_p,
	'1', '0', '0', vl_mercadoria_w, vl_total_nota_w, 0, 0,
	clock_timestamp(), nm_usuario_p, cd_condicao_pagamento_p, cd_cgc_w,
	cd_pessoa_fisica_p, vl_ipi_w, vl_descontos_w, vl_frete_w, vl_seguro_w,
	vl_despesa_acessoria_w, ds_observacao_p, cd_nat_oper_nf_p,
	vl_desconto_rateio_w, '1', CASE WHEN nr_interno_conta_p=0 THEN null  ELSE nr_interno_conta_p END ,
	CASE WHEN nr_seq_protocolo_p=0 THEN null  ELSE nr_seq_protocolo_p END ,ds_obs_desconto_nf_p,
	nr_seq_classif_fiscal_p, ie_tipo_nota_w, nr_recibo_p,
	clock_timestamp(), nm_usuario_p,cd_setor_atendimento_p,dt_competencia_w,cd_pagamento_cfdi_p,cd_moeda_p);

exception
	when others then
		ds_erro_w	:= sqlerrm(SQLSTATE);
		/*(-20011,'Erro ao Gravar Corpo da Nota Fiscal' || chr(10) ||
		'estab: ' ||cd_estab_nota_fiscal_w||
		'cgc: '   || cd_cgc_emitente_w 	||
		'serie: ' || cd_serie_nf_w 	||
		'nota: '  || nr_nota_fiscal_w 	||
		'seq: '   || nr_sequencia_nf_w  || chr(10) ||
		ds_erro_w);*/
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173250,
							'CD_ESTAB_NOTA_FISCAL_W='||cd_estab_nota_fiscal_w||';'||
							'CD_CGC_EMITENTE_W='||cd_cgc_emitente_w||';'||
							'CD_SERIE_NF_W='||cd_serie_nf_w||';'||
							'NR_NOTA_FISCAL_W='||nr_nota_fiscal_w||';'||
							'NR_SEQUENCIA_NF_W='||nr_sequencia_nf_w||';'||
							'DS_ERRO_W='||ds_erro_w);

end;

 begin
	CALL atualizar_obs_nota(nr_sequencia_w, cd_estab_nota_fiscal_w);
 exception when others then
	ds_erro_w := substr(sqlerrm(SQLSTATE),1,1000);
	CALL gravar_log_tasy(6789,wheb_mensagem_pck.get_texto(652440,'DS_ERRO_W='||ds_erro_w), nm_usuario_p);
 end;

if (coalesce(nr_seq_protocolo_p,0) > 0) then
	begin
	cd_evento_nf_w		:= 16;
	ds_historico_nf_w	:= Wheb_mensagem_pck.get_Texto(307131); /*'Digitacao da nota.';*/
	end;
else
	begin
	cd_evento_nf_w		:= 15;
	if (coalesce(nr_interno_conta_p,0) > 0) then
		select	Wheb_mensagem_pck.get_Texto(307133, 'VL_CONTA_W='|| obter_valor_conta(nr_interno_conta_p,0)) /*Digitacao da nota. Valor da conta: #@VL_CONTA_W#@*/
		into STRICT	ds_historico_nf_w
		;
	end if;
	end;
end if;


/* matheus os 82807 25/02/2008 */

CALL gerar_historico_nota_fiscal(nr_sequencia_w, nm_usuario_p, cd_evento_nf_w, ds_historico_nf_w);
/* vincular as contas a nota fiscal */

insert into conta_paciente_nf(nr_interno_conta,
	nr_sequencia,
	dt_atualizacao,
	nm_usuario,
	cd_perfil)
	SELECT	nr_interno_conta,
		nr_sequencia_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_perfil_w
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_p
	
union

	SELECT	a.nr_interno_conta, nr_sequencia_w, clock_timestamp(), nm_usuario_p,cd_perfil_w
	from	conta_paciente a
	where	a.ie_status_acerto 	=  2
	and	a.nr_atendimento 	= nr_atendimento_p
	and	a.cd_convenio_parametro	= cd_convenio_p
	and	(nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '')
	
union

	select	a.nr_interno_conta,
		nr_sequencia_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_perfil_w
	from	conta_paciente a
	where	a.ie_status_acerto 	=  2
	and	a.nr_seq_protocolo 	= nr_seq_protocolo_p
	and 	(nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '');


/* testar condicao erro */

select	count(*)
into STRICT	nr_contas_w
from	conta_paciente_nf
where	nr_sequencia = nr_sequencia_w;
if (nr_contas_w = 0) then
	--(-20011,'Nenhuma conta foi associada');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173251);
end if;

/* tratar itens da nota fiscal */

qt_item_nf_w		:= 0;
qt_item_calc_w		:= 0;
qt_item_neg_w		:= 0;
vl_proc_mat_acum_w	:= 0;

if (ie_opcao_p = 'Estrut') then
	SELECT * FROM gerar_itens_nf_saida_estrut(nr_sequencia_w, nr_atendimento_w, nr_interno_conta_p, nr_seq_protoc_w, ie_tipo_convenio_w, cd_convenio_w, nr_nota_fiscal_w, nr_sequencia_nf_w, cd_operacao_nf_p, cd_serie_nf_w, cd_cgc_w, cd_moeda_p, vl_cotacao_p, cd_nat_oper_nf_p, ie_conta_financ_nf_w, ds_complemento_p, cd_estab_nota_fiscal_w, cd_cgc_emitente_w, vl_proc_mat_acum_w, vl_desc_acum_w, nm_usuario_p) INTO STRICT vl_proc_mat_acum_w, vl_desc_acum_w;

/* ricardo 22/01/2004 - feita a rotina para gerar a nota atraves da lista de proc/mat definida
no cadastro de convenios */
elsif (ie_opcao_p <> 'Lista') then
	begin

	open c01;
	loop
		fetch c01 into
			ie_tipo_ordem_w,
			ie_origem_proced_w,
			cd_procedimento_w,
			cd_material_w,
			cd_unidade_medida_w,
			qt_proc_mat_w,
			vl_proc_mat_w,
			vl_desc_item_w,
			nr_seq_proc_interno_1_w,
			nr_interno_conta_ww,
			cd_procedimento_loc_w,
      			cd_convenio_conta_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			qt_item_nf_w		:= qt_item_nf_w + 1;
			if (qt_proc_mat_w < 0) or (vl_proc_mat_w < 0) then
				qt_item_neg_w	:= qt_item_neg_w + 1;
			end if;
			end;
	end loop;
	close c01;

	if (qt_item_neg_w > 0) or (qt_item_nf_w > qt_item_maximo_p) and (ie_opcao_p <> 'UnicoAcr') then
		ie_opcao_p			:= 'Unico';
	end if;

	open c01;
	loop
		fetch c01 into
			ie_tipo_ordem_w,
			ie_origem_proced_w,
			cd_procedimento_w,
			cd_material_w,
			cd_unidade_medida_w,
			qt_proc_mat_w,
			vl_proc_mat_w,
			vl_desc_item_w,
			nr_seq_proc_interno_1_w,
			nr_interno_conta_ww,
			cd_procedimento_loc_w,
      			cd_convenio_conta_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			if (nr_seq_rule_w IS NOT NULL AND nr_seq_rule_w::text <> '') then
        			cd_convenio_w  := cd_convenio_conta_w;
      			end if;
			select	max(b.ie_tipo_atendimento),
					max(a.cd_categoria_parametro),
					max(a.nr_atendimento)
			into STRICT	ie_tipo_atendimento_w,
					cd_categoria_convenio_w,
					nr_atendimento_ww
			from	atendimento_paciente b,
					conta_paciente a
			where	a.nr_interno_conta	= nr_interno_conta_ww
			and		a.nr_atendimento	= b.nr_atendimento;

			select	coalesce(max(nr_seq_categoria_iva), 0)
			into STRICT	cd_categoria_iva_w
			from 	conta_paciente
			where 	nr_interno_conta = nr_interno_conta_ww;

			if (cd_categoria_iva_w = 0) then
				select  coalesce(max(nr_seq_categoria_iva), 0)
				into STRICT    cd_categoria_iva_w
				from    atend_categoria_convenio
				where   nr_atendimento = coalesce(nr_atendimento_p, nr_atendimento_ww)
				and     cd_convenio = cd_convenio_p
				and     cd_categoria = cd_categoria_convenio_w
				and     (
							((coalesce(dt_final_vigencia::text, '') = '') and (clock_timestamp() >= dt_inicio_vigencia)) or (clock_timestamp() between dt_inicio_vigencia and dt_final_vigencia)
						);
			end if;

			cd_conta_contabil_w	:= '';
			cd_centro_custo_w	:= null;

			qt_item_calc_w	:= qt_item_calc_w + 1;
			vl_proc_mat_w		:= vl_proc_mat_w + vl_desc_item_w;
			vl_proc_mat_acum_w	:= vl_proc_mat_acum_w + vl_proc_mat_w;
			vl_desc_acum_w	:= vl_desc_acum_w + vl_desc_item_w;

			if	(ie_opcao_p <> 'Unico' AND ie_opcao_p <> 'UnicoAcr') or (qt_item_calc_w = qt_item_nf_w) or
				((ie_opcao_p = 'UnicoAcr') and (cd_procedimento_w = coalesce(cd_proced_acrescimo_p,0))) then
				begin

				if (ie_opcao_p = 'Unico') then
					begin
					qt_proc_mat_w			:= 1;
					vl_unitario_item_nf_w	:= vl_proc_mat_acum_w;
					vl_proc_mat_w			:= vl_proc_mat_acum_w;
					vl_desc_item_w		:= vl_desc_acum_w;
					cd_material_w			:= null;
					ie_origem_proced_w		:= coalesce(ie_origem_proced_p,1);
					cd_procedimento_w		:= cd_procedimento_p;
					end;
				elsif (ie_opcao_p = 'UnicoAcr') then
					begin
					if (cd_procedimento_w <> coalesce(cd_proced_acrescimo_p,0)) then
						begin
						qt_proc_mat_w		:= 1;
						vl_unitario_item_nf_w	:= vl_proc_mat_acum_w - vl_acrescimo_w;
						vl_proc_mat_w		:= vl_proc_mat_acum_w - vl_acrescimo_w;
						vl_desc_item_w	:= vl_desc_acum_w;
						cd_material_w		:= null;
						ie_origem_proced_w	:= coalesce(ie_origem_proced_p,1);
						cd_procedimento_w	:= cd_procedimento_p;
						end;
					else
						begin
						if (coalesce(qt_proc_mat_w, 0) > 0) then
							vl_acrescimo_w	:= vl_proc_mat_w / coalesce(qt_proc_mat_w,1);
						else
							vl_acrescimo_w	:= 0;
						end if;

						vl_unitario_item_nf_w	:= vl_acrescimo_w;
						cd_material_w		:= null;
						ie_origem_proced_w	:= coalesce(ie_origem_proc_acres_p,1);
						cd_procedimento_w	:= cd_proced_acrescimo_p;
						end;
					end if;
					end;
				else
					begin
					if (coalesce(qt_proc_mat_w, 0) > 0) then
						vl_unitario_item_nf_w	:= vl_proc_mat_w / coalesce(qt_proc_mat_w,1);
					else
						vl_unitario_item_nf_w	:= 0;
					end if;
					end;
				end if;
				if (ie_opcao_p = 'Unico') then
					qt_item_calc_w		:= 1;
				end if;

				if (coalesce(cd_procedimento_w,0) <> 0) and (coalesce(ie_origem_proced_w,0) <> 0) then
					begin

					begin
					select 	coalesce(cd_operacao_estoque,0)
					into STRICT	cd_operacao_estoque_w
					from 	operacao_nota
					where	cd_operacao_nf = cd_operacao_nf_p;
					exception when others then
						cd_operacao_estoque_w := null;
					end;

					ie_tipo_conta_w		:= 2;
					SELECT * FROM Define_Conta_Procedimento(	cd_estab_nota_fiscal_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_conta_w, null, null, null, null, ie_tipo_convenio_w, cd_convenio_w, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null, 'N', null, null, null, cd_operacao_estoque_w, null, null, null, nr_seq_proc_interno_1_w) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
					end;
				end if;

				if (coalesce(cd_material_w,0) <> 0) then
					begin
						ie_tipo_conta_w		:= 2;

						begin
						select 	coalesce(cd_operacao_estoque,0)
						into STRICT	cd_operacao_estoque_w
						from 	operacao_nota
						where	cd_operacao_nf = cd_operacao_nf_p;
						exception when others then
							cd_operacao_estoque_w := null;
						end;


						SELECT * FROM define_conta_material(	cd_estab_nota_fiscal_w, cd_material_w, ie_tipo_conta_w, null, null, null, null, ie_tipo_convenio_w, cd_convenio_w, null, null, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null, 'N', null, null, null, cd_operacao_estoque_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;


					end;
				end if;

				begin

				if (ie_conta_financ_nf_w = 'S') then
					/* Edgar 10/05/2010, OS 212387, tratar conta financeira */

					cd_conta_financ_w := obter_conta_financeira(	'E', cd_estab_nota_fiscal_w, cd_material_w, cd_procedimento_w, ie_origem_proced_w, null, cd_convenio_w, cd_cgc_w, cd_centro_custo_w, cd_conta_financ_w, null, cd_operacao_nf_p, null, ie_tipo_atendimento_w, cd_categoria_convenio_w, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
				end if;

				if (cd_unidade_medida_w = ' ') or (coalesce(cd_unidade_medida_w::text, '') = '') then
					cd_unidade_medida_ww := null;
				else
					cd_unidade_medida_ww := cd_unidade_medida_w;
				end if;

				if (cd_conta_financ_w = 0) then
					cd_conta_financ_w := null;
				end if;

				select 	coalesce(max(nr_item_nf),0)+1
				into STRICT	nr_item_nf_w
				from	nota_fiscal_item
				where 	nr_sequencia = nr_sequencia_w;

				vl_desconto_item_w := 0;
				if (philips_param_pck.get_cd_pais <> 1) then
					vl_desconto_item_w := coalesce(vl_desc_item_w, 0);

					if (cd_moeda_p IS NOT NULL AND cd_moeda_p::text <> '') and (coalesce(vl_cotacao_p,0) > 0) then
					    vl_total_estrangeiro_w := (vl_proc_mat_w/vl_cotacao_p);
					    vl_unit_estrangeiro_w  := (vl_total_estrangeiro_w/qt_proc_mat_w);
					end if;

				end if;

				insert into nota_fiscal_item(nr_sequencia, cd_estabelecimento, cd_cgc_emitente,
					cd_serie_nf, nr_nota_fiscal, nr_sequencia_nf, nr_item_nf,
					cd_natureza_operacao, dt_atualizacao, nm_usuario,
					qt_item_nf, vl_unitario_item_nf,vl_total_item_nf,
					vl_frete, vl_desconto, vl_despesa_acessoria,
					vl_desconto_rateio, vl_seguro, vl_liquido,
					cd_material, cd_procedimento, cd_procedimento_loc, ie_origem_proced,
					cd_local_estoque,  ds_observacao, nr_seq_conta_financ,
					ds_complemento, nr_atendimento,
					cd_conta_contabil, cd_centro_custo,
					cd_unidade_medida_compra,
					cd_unidade_medida_estoque,
					vl_total_estrangeiro,vl_unit_estrangeiro,
					cd_sequencia_parametro,
                                        cd_categoria_iva)
				values (nr_sequencia_w, cd_estab_nota_fiscal_w, cd_cgc_emitente_w,
					cd_serie_nf_w, nr_nota_fiscal_w, nr_sequencia_nf_w,
					nr_item_nf_w, cd_nat_oper_nf_p, clock_timestamp(), nm_usuario_p,
					qt_proc_mat_w, vl_unitario_item_nf_w, vl_proc_mat_w,
/*Jonas alterado  para 0  o vl_desc_item_w*/
		0, vl_desconto_item_w, 0, 0, 0, vl_proc_mat_w,
					CASE WHEN cd_material_w=0 THEN  null  ELSE cd_material_w END ,
					CASE WHEN cd_procedimento_w=0 THEN  null  ELSE cd_procedimento_w END ,
					cd_procedimento_loc_w,
					CASE WHEN ie_origem_proced_w=0 THEN  null  ELSE ie_origem_proced_w END ,
					null, ds_observacao_w, cd_conta_financ_w, ds_complemento_p, CASE WHEN nr_atendimento_w=0 THEN null  ELSE nr_atendimento_w END ,
					cd_conta_contabil_w, cd_centro_custo_w,
					cd_unidade_medida_ww,
					cd_unidade_medida_ww,
					vl_total_estrangeiro_w, vl_unit_estrangeiro_w,
					philips_contabil_pck.get_parametro_conta_contabil,
                                        cd_categoria_iva_w);
				exception
					when others then
					ds_erro_w	:= sqlerrm(SQLSTATE);
					if (coalesce(qt_item_calc_w::text, '') = '') or (coalesce(qt_proc_mat_w::text, '') = '') then
						--(-20011,'Erro ao Gravar Item da Nota Fiscal - Qtde');
						CALL wheb_mensagem_pck.exibir_mensagem_abort(198442,'DS_ERRO_W='||ds_erro_w);
					elsif (coalesce(vl_unitario_item_nf_w::text, '') = '') or (coalesce(vl_proc_mat_w::text, '') = '') or (coalesce(vl_desc_item_w::text, '') = '') or (coalesce(vl_proc_mat_w::text, '') = '') then
						--(-20011,'Erro ao Gravar Item da Nota Fiscal - Valor');
						CALL wheb_mensagem_pck.exibir_mensagem_abort(198443,'DS_ERRO_W='||ds_erro_w);
					else
						CALL wheb_mensagem_pck.exibir_mensagem_abort(198444,'DS_ERRO_W='||ds_erro_w);
					end if;
				end;
				end;
			end if;
			end;
	end loop;
	close c01;
	end;
else
	begin

	qt_item_calc_w	:= 0;
	vl_desc_acum_w	:= 0;

	open	c04;
	loop
	fetch 	c04 into
		cd_material_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		ds_sql_w,
		ie_lista_itens_w;
		--ds_sql_seq_item_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		begin

		cd_conta_contabil_w	:= '';
		cd_centro_custo_w	:= null;

		qt_proc_mat_w		:= 1;
		vl_proc_mat_w		:= 0;
		vl_desc_item_w		:= 0;
		ds_retorno_www		:= 0;
		ds_sql_w	:= replace(ds_sql_w, ':NR_INTERNO_CONTA', coalesce(nr_interno_conta_p,0));
		ds_sql_w	:= replace(ds_sql_w, ':NR_SEQ_PROTOCOLO', coalesce(nr_seq_protocolo_p,0));
		ds_sql_w	:= replace(ds_sql_w, ':NR_SEQ_LOTE_PROTOCOLO', 0);

		if (ie_lista_itens_w		= 'N') then
			c001 := dbms_sql.open_cursor;
			dbms_sql.parse(c001, ds_sql_w, dbms_sql.native);
			dbms_sql.define_column(c001, 1, ds_retorno_w, 15);
			/*fabio 21/06/2007 para conseguir parametrizar mais um campo (ex: quantidade)*/

			begin
			dbms_sql.define_column(c001, 2, ds_retorno_ww, 15);
			exception when others then
				ds_retorno_ww	:= 1;
			end;
			/*Felipe Martini 17/09/2008    OS108482, Parametriz o valor de Desconto*/

			begin
			dbms_sql.define_column(c001, 3, ds_retorno_www, 15);
			exception when others then
				ds_retorno_www	:= 0;
			end;
			vl_proc_mat_w	:= dbms_sql.execute(c001);
			vl_proc_mat_w	:= dbms_sql.fetch_rows(c001);
			dbms_sql.column_value(c001, 1, ds_retorno_w);
			begin
			dbms_sql.column_value(c001, 2, ds_retorno_ww);
			exception when others then
				ds_retorno_ww	:= 1;
			end;
			begin
			dbms_sql.column_value(c001, 3, ds_retorno_www);
			exception when others then
				ds_retorno_www	:= 0;
			end;
			vl_desc_item_w	:= ds_retorno_www;


			dbms_sql.close_cursor(c001);

			if (coalesce(cd_material_w::text, '') = '') and (coalesce(cd_procedimento_w::text, '') = '') then
				begin
				if (coalesce((ds_retorno_w)::numeric ,0) > 0) then
					vl_desc_acum_w	:= (ds_retorno_w)::numeric;
				end if;
				end;
			else
				begin

				vl_proc_mat_w			:= (ds_retorno_w)::numeric;
				vl_proc_mat_w			:= vl_proc_mat_w + coalesce(vl_desc_item_w,0);
				vl_unitario_item_nf_w	:= 	vl_proc_mat_w;
				vl_proc_mat_acum_w		:= vl_proc_mat_acum_w + vl_proc_mat_w;
				vl_desc_acum_w			:= coalesce(vl_desc_acum_w,0) + coalesce(vl_desc_item_w,0);

				if ((ds_retorno_ww)::numeric  > 1) then
					qt_proc_mat_w		:= (ds_retorno_ww)::numeric;
					vl_unitario_item_nf_w	:= dividir(vl_proc_mat_w, (ds_retorno_ww)::numeric );
				end if;

				ds_erro_w	:= sqlerrm(SQLSTATE);

				if (coalesce(qt_item_calc_w::text, '') = '') or (coalesce(qt_proc_mat_w::text, '') = '') then
					--(-20011,'Erro ao Gravar Item da Nota Fiscal - Qtde');
					CALL wheb_mensagem_pck.exibir_mensagem_abort(198442,'DS_ERRO_W='||ds_erro_w);
				elsif (coalesce(vl_unitario_item_nf_w::text, '') = '') or (coalesce(vl_desc_item_w::text, '') = '') or (coalesce(vl_proc_mat_w::text, '') = '') then
					--(-20011,'Erro ao Gravar Item da Nota Fiscal - Valor');
					CALL wheb_mensagem_pck.exibir_mensagem_abort(198443,'DS_ERRO_W='||ds_erro_w);
				end if;

				if (coalesce(cd_procedimento_w,0) <> 0) and (coalesce(ie_origem_proced_w,0) <> 0) then
					begin

					begin
					select 	coalesce(cd_operacao_estoque,0)
					into STRICT	cd_operacao_estoque_w
					from 	operacao_nota
					where	cd_operacao_nf = cd_operacao_nf_p;
					exception when others then
						cd_operacao_estoque_w := null;
					end;

					ie_tipo_conta_w		:= 2;
					SELECT * FROM Define_Conta_Procedimento(	cd_estab_nota_fiscal_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_conta_w, null, null, null, null, ie_tipo_convenio_w, cd_convenio_w, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null, 'N', null, null, null, cd_operacao_estoque_w) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
					end;
				end if;


				if (coalesce(cd_material_w,0) <> 0) then
					begin
						ie_tipo_conta_w		:= 2;

						begin
						select 	coalesce(cd_operacao_estoque,0)
						into STRICT	cd_operacao_estoque_w
						from 	operacao_nota
						where	cd_operacao_nf = cd_operacao_nf_p;
						exception when others then
							cd_operacao_estoque_w := null;
						end;


						SELECT * FROM define_conta_material(	cd_estab_nota_fiscal_w, cd_material_w, ie_tipo_conta_w, null, null, null, null, ie_tipo_convenio_w, cd_convenio_w, null, null, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null, 'N', null, null, null, cd_operacao_estoque_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

					end;
				end if;

				if (vl_proc_mat_w	<> 0) 		and (vl_unitario_item_nf_w	<> 0)	then
					begin

					if (ie_conta_financ_nf_w = 'S') then
						/* Edgar 10/05/2010, OS 212387, tratar conta financeira */

						cd_conta_financ_w := obter_conta_financeira(	'E', cd_estab_nota_fiscal_w, cd_material_w, cd_procedimento_w, ie_origem_proced_w, null, cd_convenio_w, cd_cgc_w, cd_centro_custo_w, cd_conta_financ_w, null, cd_operacao_nf_p, null, ie_tipo_atendimento_w, cd_categoria_convenio_w, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
					end if;

					if (cd_conta_financ_w = 0) then
						cd_conta_financ_w := null;
					end if;

					qt_item_calc_w		:= qt_item_calc_w + 1;

					select 	coalesce(max(nr_item_nf),0)+1
					into STRICT	nr_item_nf_w
					from	nota_fiscal_item
					where 	nr_sequencia = nr_sequencia_w;

					vl_desconto_item_w := 0;
					if (philips_param_pck.get_cd_pais <> 1) then
						vl_desconto_item_w := coalesce(vl_desc_item_w, 0);

						if (cd_moeda_p IS NOT NULL AND cd_moeda_p::text <> '') and (coalesce(vl_cotacao_p,0) > 0) then
						    vl_total_estrangeiro_w := (vl_proc_mat_w/vl_cotacao_p);
						    vl_unit_estrangeiro_w  := (vl_total_estrangeiro_w/qt_proc_mat_w);
						end if;

					end if;

					if ((coalesce(cd_material_w, 0) > 0) and (coalesce(cd_procedimento_w, 0) = 0)) then

						select 	max(obter_dados_material(cd_material_w,'UME')),
								max(obter_dados_material(cd_material_w,'UMP'))
						into STRICT	cd_unidade_medida_estoque_w, 
							    cd_unidade_medida_compra_w
						from	material
						where 	cd_material = cd_material_w;

					end if;

					insert into nota_fiscal_item(
						nr_sequencia,
						cd_estabelecimento,
						cd_cgc_emitente,
						cd_serie_nf,
						nr_nota_fiscal,
						nr_sequencia_nf,
						nr_item_nf,
						cd_natureza_operacao,
						dt_atualizacao,
						nm_usuario,
						qt_item_nf,
						vl_unitario_item_nf,
						vl_total_item_nf,
						vl_frete,
						vl_desconto,
						vl_despesa_acessoria,
						vl_desconto_rateio,
						vl_seguro,
						vl_liquido,
						cd_material,
						cd_procedimento,
						cd_procedimento_loc,
						ie_origem_proced,
						cd_local_estoque,
						ds_observacao,
						nr_seq_conta_financ,
						ds_complemento,
						nr_atendimento,
						cd_centro_custo,
						cd_conta_contabil,
						vl_total_estrangeiro,
						vl_unit_estrangeiro,
						cd_sequencia_parametro,
						cd_unidade_medida_compra,
						cd_unidade_medida_estoque,
                                                cd_categoria_iva)
					values (	nr_sequencia_w,
						cd_estab_nota_fiscal_w,
						cd_cgc_emitente_w,
						cd_serie_nf_w,
						nr_nota_fiscal_w,
						nr_sequencia_nf_w,
						nr_item_nf_w,
						cd_nat_oper_nf_p,
						clock_timestamp(),
						nm_usuario_p,
						qt_proc_mat_w,
						vl_unitario_item_nf_w,
						vl_proc_mat_w,
						0,
						vl_desconto_item_w,
						0,
						0,
						0,
						(vl_proc_mat_w),
						CASE WHEN cd_material_w=0 THEN  null  ELSE cd_material_w END ,
						CASE WHEN cd_procedimento_w=0 THEN  null  ELSE cd_procedimento_w END ,
						cd_procedimento_loc_w,
						CASE WHEN ie_origem_proced_w=0 THEN  null  ELSE ie_origem_proced_w END ,
						null,
						ds_observacao_w,
						cd_conta_financ_w,
						ds_complemento_p,
						CASE WHEN nr_atendimento_w=0 THEN null  ELSE nr_atendimento_w END ,
						cd_centro_custo_w,
						cd_conta_contabil_w,
						vl_total_estrangeiro_w,
						vl_unit_estrangeiro_w,
						philips_contabil_pck.get_parametro_conta_contabil,
						cd_unidade_medida_compra_w,
						cd_unidade_medida_estoque_w,
                                                cd_categoria_iva_w);

					/*if	(ds_sql_seq_item_w is not null) then
						ds_sql_seq_item_w := replace(ds_sql_seq_item_w, ':NR_INTERNO_CONTA', nvl(nr_interno_conta_p, 0));
						ds_sql_seq_item_w := replace(ds_sql_seq_item_w, ':NR_SEQ_PROTOCOLO', nvl(nr_seq_protocolo_p, 0));
						ds_sql_seq_item_w := replace(ds_sql_seq_item_w, ':NR_SEQ_LOTE_PROTOCOLO', 0);

						c002 := dbms_sql.open_cursor;

						dbms_sql.parse(c002, ds_sql_seq_item_w, dbms_sql.native);

						dbms_sql.define_column(c002, 1, ds_retorno_seq_item_w, 15);
						dbms_sql.define_column(c002, 2, ds_retorno_ie_proc_mat_w, 15);

						nr_seq_item_w := dbms_sql.execute(c002);
						loop
							if	(dbms_sql.fetch_rows(c002) > 0) then
								begin
								dbms_sql.column_value(c002, 1, ds_retorno_seq_item_w);
								exception
								when others then
									ds_retorno_seq_item_w	 := '';
								end;
								begin
								dbms_sql.column_value(c002, 2, ds_retorno_ie_proc_mat_w);
								exception
								when others then
									ds_retorno_ie_proc_mat_w := '';
								end;
								begin
								nr_seq_item_w := somente_numero(ds_retorno_seq_item_w);
								ie_proc_mat_w := ds_retorno_ie_proc_mat_w;

								select	nota_fiscal_item_atend_seq.nextval
								into	nr_seq_item_atend_w
								from	dual;

								insert into nota_fiscal_item_atend (
										nr_sequencia,
										dt_atualizacao,
										nm_usuario,
										dt_atualizacao_nrec,
										nm_usuario_nrec,
										nr_seq_nota,
										nr_item_nf,
										nr_seq_matpaci,
										nr_seq_propaci)
								values (
										nr_seq_item_atend_w,
										sysdate,
										nm_usuario_p,
										sysdate,
										nm_usuario_p,
										nr_sequencia_w,
										nr_item_nf_w,
										decode(ie_proc_mat_w,'M',nr_seq_item_w,null),
										decode(ie_proc_mat_w,'P',nr_seq_item_w,null)
								);

								end;
							else
								exit;
							end if;
						end loop;
						dbms_sql.close_cursor(c002);
					end if;*/
					end;
				end if;
				end;
			end if;

		else

			/*
			ordem dos atributos SQL na funcao Cadastro de Convenio Precos e Regras
			1 VL_ITEM
			2 QT_ITEM
			3 CD_ITEM
			4 IE_ORIGEM_PROCED
			5 NR_SEQ_PROC_INTERNO
			6 VL_DESCONTO
			*/
			cd_conta_contabil_w	:= '';
			cd_centro_custo_w	:= null;
			c10_w	:= dbms_sql.open_cursor; /* Felipe Martini em 06/08/2008 OS103418 Inicio*/
			dbms_sql.parse(c10_w,ds_sql_w,dbms_sql.native);
			dbms_sql.define_column(c10_w, 1, ds_retorno_w,15);

			begin
			dbms_sql.define_column(c10_w, 2, ds_retorno_ww, 15);
			exception when others then
				ds_retorno_ww	:= 1;
			end;

			begin
			dbms_sql.define_column(c10_w, 3, ds_retorno_www, 15);
			exception when others then
				ds_retorno_www	:= 0;
			end;

			begin
			dbms_sql.define_column(c10_w, 4, ie_origem_proced_ww, 15);
			exception when others then
				ie_origem_proced_ww	:= 1;
			end;

			begin
			dbms_sql.define_column(c10_w, 5, nr_seq_proc_interno_ww, 15);
			exception when others then
				nr_seq_proc_interno_ww	:= null;
			end;

			begin
			dbms_sql.define_column(c10_w, 6, vl_desc_item_ww, 15);
			exception when others then
				vl_desc_item_ww	:= null;
			end;

			ignore := DBMS_SQL.EXECUTE(c10_w);
			LOOP
			if (dbms_sql.fetch_rows(c10_w) > 0) then
				begin
				ds_retorno_w		:= null;
				ds_retorno_ww		:= null;
				ds_retorno_www		:= null;
				qt_proc_mat_w		:= 1;
				nr_seq_proc_interno_w	:= null;
				nr_seq_proc_interno_ww  := null;
				vl_desc_item_w		:= 0; --Coloca para zero.
				vl_desc_item_ww		:= null;
				pr_desc_item_w		:= null;
				dbms_sql.column_value(c10_w, 1, ds_retorno_w);

				begin
				dbms_sql.column_value(c10_w, 2, ds_retorno_ww);
				exception when others then
					ds_retorno_ww	:= 1;
				end;

				begin
				dbms_sql.column_value(c10_w, 3, ds_retorno_www);
				exception when others then
					ds_retorno_www	:= 0;
				end;

				begin
				dbms_sql.column_value(c10_w, 4, ie_origem_proced_ww);
				exception when others then
					ie_origem_proced_ww	:= 1;
				end;

				begin
				dbms_sql.column_value(c10_w, 5, nr_seq_proc_interno_ww);
				exception when others then
					nr_seq_proc_interno_ww	:= null;
				end;

				if (nr_seq_proc_interno_ww IS NOT NULL AND nr_seq_proc_interno_ww::text <> '') then
					nr_seq_proc_interno_w	:= (nr_seq_proc_interno_ww)::numeric;
				end if;

				begin
				dbms_sql.column_value(c10_w, 6, vl_desc_item_ww);
				exception when others then
					vl_desc_item_ww		:= null;
				end;

				if (vl_desc_item_ww IS NOT NULL AND vl_desc_item_ww::text <> '') then
					vl_desc_item_w		:= (vl_desc_item_ww)::numeric;
				end if;

				if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
					cd_material_w	:= (ds_retorno_www)::numeric;
				elsif (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
					cd_procedimento_w	:= (ds_retorno_www)::numeric;
					ie_origem_proced_w	:= (ie_origem_proced_ww)::numeric;
				end if;

				if (coalesce(cd_material_w::text, '') = '') and (coalesce(cd_procedimento_w::text, '') = '') then
					begin
					if (coalesce((ds_retorno_w)::numeric ,0) > 0) then
						vl_desc_acum_w	:= (ds_retorno_w)::numeric;
					end if;
					end;
				else
					begin

					vl_proc_mat_w			:= (ds_retorno_w)::numeric;
					vl_unitario_item_nf_w		:= vl_proc_mat_w;
					vl_proc_mat_acum_w		:= vl_proc_mat_acum_w + vl_proc_mat_w;
					vl_desc_acum_w			:= coalesce(vl_desc_acum_w,0) + coalesce(vl_desc_item_w,0);

					if (coalesce(vl_desc_item_w,0) > 0) then
						pr_desc_item_w		:= round((vl_desc_item_w / vl_proc_mat_w) * 100,4);
					end if;

					if ((ds_retorno_ww)::numeric  > 1) then
						qt_proc_mat_w		:= (ds_retorno_ww)::numeric;
						vl_unitario_item_nf_w	:= dividir(vl_proc_mat_w, (ds_retorno_ww)::numeric );
					end if;

					ds_erro_w	:= sqlerrm(SQLSTATE);

					if (coalesce(qt_item_calc_w::text, '') = '') or (coalesce(qt_proc_mat_w::text, '') = '') then
						--(-20011,'Erro ao Gravar Item da Nota Fiscal - Qtde');
						CALL wheb_mensagem_pck.exibir_mensagem_abort(198442,'DS_ERRO_W='||ds_erro_w);
					elsif (coalesce(vl_unitario_item_nf_w::text, '') = '') or (coalesce(vl_desc_item_w::text, '') = '') or (coalesce(vl_proc_mat_w::text, '') = '') then
						--(-20011,'Erro ao Gravar Item da Nota Fiscal - Valor');
						CALL wheb_mensagem_pck.exibir_mensagem_abort(198443,'DS_ERRO_W='||ds_erro_w);
					end if;

					if (coalesce(cd_procedimento_w,0) <> 0) and (coalesce(ie_origem_proced_w,0) <> 0) then
						begin
						ie_tipo_conta_w		:= 2;

						begin
						select 	coalesce(cd_operacao_estoque,0)
						into STRICT	cd_operacao_estoque_w
						from 	operacao_nota
						where	cd_operacao_nf = cd_operacao_nf_p;
						exception when others then
							cd_operacao_estoque_w := null;
						end;

						SELECT * FROM Define_Conta_Procedimento(	cd_estab_nota_fiscal_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_conta_w, null, null, null, null, ie_tipo_convenio_w, cd_convenio_w, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null, 'N', null, null, null, cd_operacao_estoque_w) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

						end;
					end if;

					if (coalesce(cd_material_w,0) <> 0) then
						begin
						ie_tipo_conta_w		:= 2;

						begin
						select 	coalesce(cd_operacao_estoque,0)
						into STRICT	cd_operacao_estoque_w
						from 	operacao_nota
						where	cd_operacao_nf = cd_operacao_nf_p;
						exception when others then
							cd_operacao_estoque_w := null;
						end;


						SELECT * FROM define_conta_material(	cd_estab_nota_fiscal_w, cd_material_w, ie_tipo_conta_w, null, null, null, null, ie_tipo_convenio_w, cd_convenio_w, null, null, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null, 'N', null, null, null, cd_operacao_estoque_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

						end;
					end if;

					if (vl_proc_mat_w	<> 0) 		and (vl_unitario_item_nf_w	<> 0)	then
						begin

						if (ie_conta_financ_nf_w = 'S') then
							/* Edgar 10/05/2010, OS 212387, tratar conta financeira */

							cd_conta_financ_w := obter_conta_financeira(	'E', cd_estab_nota_fiscal_w, cd_material_w, cd_procedimento_w, ie_origem_proced_w, null, cd_convenio_w, cd_cgc_w, cd_centro_custo_w, cd_conta_financ_w, null, cd_operacao_nf_p, null, ie_tipo_atendimento_w, cd_categoria_convenio_w, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
						end if;

						qt_item_calc_w		:= qt_item_calc_w + 1;

						select 	coalesce(max(nr_item_nf),0)+1
						into STRICT	nr_item_nf_w
						from	nota_fiscal_item
						where 	nr_sequencia = nr_sequencia_w;

						vl_desconto_item_w := 0;
						if (philips_param_pck.get_cd_pais <> 1) then
							vl_desconto_item_w := coalesce(vl_desc_item_w, 0);

							if (cd_moeda_p IS NOT NULL AND cd_moeda_p::text <> '') and (coalesce(vl_cotacao_p,0) > 0) then
							   vl_total_estrangeiro_w := (vl_proc_mat_w/vl_cotacao_p);
							   vl_unit_estrangeiro_w  := (vl_total_estrangeiro_w/qt_proc_mat_w);
                                                        end if;

						end if;

						insert into nota_fiscal_item(
							nr_sequencia, 	cd_estabelecimento,
							cd_cgc_emitente,	cd_serie_nf,
							nr_nota_fiscal,	nr_sequencia_nf,
							nr_item_nf,		cd_natureza_operacao,
							dt_atualizacao,	nm_usuario,
							qt_item_nf,		vl_unitario_item_nf,
							vl_total_item_nf,	vl_frete,
							vl_desconto,		vl_despesa_acessoria,
							vl_desconto_rateio,	vl_seguro,
							vl_liquido,		cd_material,
							cd_procedimento, cd_procedimento_loc, ie_origem_proced,
							cd_local_estoque,	ds_observacao,
							nr_seq_conta_financ,	ds_complemento,
							nr_atendimento,
							cd_centro_custo,	cd_conta_contabil,
							nr_seq_proc_interno,	pr_desconto,
							vl_total_estrangeiro,   vl_unit_estrangeiro,
							cd_sequencia_parametro,
                                                        cd_categoria_iva)
						values (nr_sequencia_w,	cd_estab_nota_fiscal_w,
							cd_cgc_emitente_w,	cd_serie_nf_w,
							nr_nota_fiscal_w,	nr_sequencia_nf_w,
							nr_item_nf_w,	cd_nat_oper_nf_p,
							clock_timestamp(),		nm_usuario_p,
							qt_proc_mat_w,	vl_unitario_item_nf_w,
							vl_proc_mat_w,	0,
							vl_desconto_item_w,	0,
							0,      0,
							vl_proc_mat_w,	CASE WHEN cd_material_w=0 THEN  null  ELSE cd_material_w END ,
							CASE WHEN cd_procedimento_w=0 THEN  null  ELSE cd_procedimento_w END ,
							cd_procedimento_loc_w,
							CASE WHEN ie_origem_proced_w=0 THEN  null  ELSE ie_origem_proced_w END ,
							null,			ds_observacao_w,
							cd_conta_financ_w,			ds_complemento_p,
							CASE WHEN nr_atendimento_w=0 THEN null  ELSE nr_atendimento_w END ,
							cd_centro_custo_w,	cd_conta_contabil_w,
							nr_seq_proc_interno_w,	pr_desc_item_w,
							vl_total_estrangeiro_w, vl_unit_estrangeiro_w,
							philips_contabil_pck.get_parametro_conta_contabil,
                                                        cd_categoria_iva_w);
						end;
					end if;
					end;
				end if;



				end;
			else
				exit;
			end if;

			END LOOP;
			DBMS_SQL.CLOSE_CURSOR(c10_w);


		end if; /* Felipe Martini em 06/08/2008 OS103418 Fim*/
		end;
	end loop;
	close c04;
	end;
end if; --Fim IE_OPCAO
select 	coalesce(max(ie_utilizar_cfdi), 'N')
into STRICT	ie_utilizar_cfdi_w
from   	nfe_senha_conexao
where  	cd_estabelecimento = cd_estabelecimento_p
and	ie_tipo_nota = 'NFSE';

if (philips_param_pck.get_cd_pais = 2) and (ie_utilizar_cfdi_w = 'S') then --- Mexico
	select	trunc((sum(vl_adiantamento) / 1.16),2)
	into STRICT	vl_adiantamento_conta_w
	from	conta_paciente_adiant
	where	nr_interno_conta = nr_interno_conta_p;

	select	coalesce(sum(vl_total_item_nf) - sum(vl_desconto),0)
	into STRICT	vl_item_neg_cfdi_w
	from   	nota_fiscal_item
	where  	nr_sequencia = nr_sequencia_w
	and (vl_total_item_nf - vl_desconto) < 0;


	if vl_item_neg_cfdi_w < 0 then

		select  coalesce(max('S'),'N')
		into STRICT	ie_rateio_trib_w
		from   	procedimento_fiscal
		where	ie_rateio_trib = 'S'
		and	cd_procedimento in (SELECT cd_procedimento from nota_fiscal_item where (cd_procedimento IS NOT NULL AND cd_procedimento::text <> '') and nr_sequencia = nr_sequencia_w);

		if ie_rateio_trib_w = 'S' then
			vl_item_neg_cfdi_w := vl_item_neg_cfdi_w * -1;
		else
			vl_item_neg_cfdi_w := vl_item_neg_cfdi_w * -1.16;
		end if;

		select	coalesce(sum(vl_total_item_nf) - sum(vl_desconto),0)
		into STRICT	vl_total_item_cfdi_w
		from	nota_fiscal_item i
		where	nr_sequencia = nr_sequencia_w
		and (vl_total_item_nf - vl_desconto) > 0
		and	((ie_rateio_trib_w = 'N') or ((ie_rateio_trib_w = 'S') and (exists (SELECT 1 from procedimento_fiscal p where p.cd_procedimento = i.cd_procedimento and p.ie_rateio_trib = 'S'))));

		open	c06;
		loop
		fetch 	c06 into
			nr_item_nf_w,
			vl_item_cfdi_w,
			vl_desc_cfdi_w;
		EXIT WHEN NOT FOUND; /* apply on c06 */
			begin

			if (vl_item_cfdi_w > 0 ) then

				pr_percentual_cfdi_w := (vl_item_neg_cfdi_w / vl_total_item_cfdi_w);

				vl_desc_cfdi_w := vl_desc_cfdi_w + (vl_item_cfdi_w * pr_percentual_cfdi_w);

				update	nota_fiscal_item
				set	vl_desconto		= vl_desc_cfdi_w
				where	nr_sequencia 		= nr_sequencia_w
				and	nr_item_nf		= nr_item_nf_w;

			end if;

			end;
			end loop;
		close c06;

		delete	FROM nota_fiscal_item
		where	nr_sequencia 	= nr_sequencia_w
		and (vl_total_item_nf - vl_desconto) < 0;

	end if;

	vl_total_desc_cfdi_w := 0;

	if (ie_tipo_cfdi_p = 'B' ) then

		open	c08;
		loop
		fetch 	c08 into
			nr_item_nf_w,
			vl_item_cfdi_w,
			vl_desc_cfdi_w;
		EXIT WHEN NOT FOUND; /* apply on c08 */
			begin


			if (vl_item_cfdi_w > 0 ) then

				select 	count(*),
						sum(vl_total_item_nf)
				into STRICT	qt_itens_nota_w,
						vl_tot_itens_nf_w
				from	nota_fiscal_item
				where 	nr_sequencia = nr_sequencia_w;

				vl_desc_cfdi_w := vl_desc_cfdi_w + ((vl_item_cfdi_w * vl_adiantamento_conta_w) /vl_tot_itens_nf_w);
				vl_total_desc_cfdi_w := vl_total_desc_cfdi_w + vl_desc_cfdi_w;

				if (qt_itens_nota_w = nr_item_nf_w ) then
					vl_diferencia_w := coalesce(vl_adiantamento_conta_w,0) - vl_total_desc_cfdi_w;

					if (vl_diferencia_w >= -0.02) and (vl_diferencia_w <=  0.02) then
						vl_desc_cfdi_w := vl_desc_cfdi_w + vl_diferencia_w;
					end if;
				end if;

				update	nota_fiscal_item
				set		vl_desconto		= vl_desc_cfdi_w
				where	nr_sequencia 	= nr_sequencia_w
				and	nr_item_nf		= nr_item_nf_w;

				update 	nota_fiscal
				set		ds_observacao   = 'CFDI por remanente de un anticipo'
				where	nr_sequencia = nr_sequencia_w;

			end if;
			end;
		end loop;
		close c08;
	end if;


end if;

/* testar condicao erro  - nota sem itens */

qt_itens_nf_w := 0;
select count(*)
into STRICT	 qt_itens_nf_w
from	 nota_fiscal_item
where	 nr_sequencia = nr_sequencia_w;
if (qt_itens_nf_w = 0) then
	--(-20011,'Nenhum item gerado para nota fiscal');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173254);
end if;

ie_regra_calcula_nf_w := obter_param_usuario(-80, 27, obter_perfil_ativo, nm_usuario_p, cd_estab_nota_fiscal_w, ie_regra_calcula_nf_w);

/* locar a tabela e obter o numero da nota fiscal */

lock table serie_nota_fiscal in exclusive mode;

select	nr_ultima_nf + 1,
	ie_numero_nota
into STRICT	nr_nota_fiscal_w,
	ie_numero_nota_w
from	serie_nota_fiscal
where	cd_serie_nf 		= cd_serie_nf_w
and	cd_estabelecimento 	= cd_estab_nota_fiscal_w;

if (nr_nota_fiscal_p <> 0) and
	(	(coalesce(ie_numero_nota_w,'X') <> 'S') or
		((coalesce(ie_numero_nota_w,'X') = 'S') and (somente_numero(nr_nota_fiscal_p) >= somente_numero(nr_nota_fiscal_w)))) then
	nr_nota_fiscal_w	:= nr_nota_fiscal_p;
end if;

select	count(*)
into STRICT	qt_reg_w
from	nota_fiscal_aidf
where	cd_estabelecimento 	= cd_estab_nota_fiscal_w
and	cd_serie_nf 		= cd_serie_nf_w;

if (qt_reg_w > 0) then
	select	count(*)
	into STRICT	qt_reg_w
	from	nota_fiscal_aidf
	where	cd_estabelecimento 	= cd_estab_nota_fiscal_w
	and	cd_serie_nf 		= cd_serie_nf_w
	and	nr_nota_fiscal_w >= nr_nota_ini
	and 	nr_nota_fiscal_w <= nr_nota_fim;

	if (qt_reg_w = 0) then
		--(-20011,	'Sem autorizacao para informar este numero de nota fiscal (' || nr_nota_fiscal_w || '), ' || chr(10) || chr(13) ||

		--	'verifique o cadastro de autorizacoes(AIDF) nos cadastros de estoque.');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173255,'NR_NOTA_FISCAL_W='||nr_nota_fiscal_w);
	end if;
end if;

if (ie_atualiza_serie_nf_saida_w = 'S') or (ie_numero_nota_w in ('S','T')) then

	if (ie_numero_nota_w = 'T') and (cd_setor_atendimento_p > 0) then

		select	count(*)
		into STRICT	qt_reg_w
		from	serie_nota_fiscal_setor
		where	cd_serie_nf = cd_serie_nf_w
		and	cd_Estabelecimento = cd_estab_nota_fiscal_w
		and	cd_setor_atendimento = cd_setor_atendimento_p;

		if (qt_reg_w > 0) then
			select	nr_ultima_nf +1
			into STRICT	nr_nota_fiscal_w
			from	serie_nota_fiscal_setor
			where	cd_serie_nf = cd_serie_nf_w
			and	cd_Estabelecimento = cd_estab_nota_fiscal_w
			and	cd_setor_atendimento = cd_setor_atendimento_p;


			if	((coalesce(ie_regra_calcula_nf_w,'D') = 'S') or
				((coalesce(ie_regra_calcula_nf_w,'D') = 'D') and (ie_calcula_nf_w = 'S')) or
				((coalesce(ie_regra_calcula_nf_w,'D') = 'C') and (ie_calcula_nf_conv_w = 'S'))) then
				update	serie_nota_fiscal_setor
				set	nr_ultima_nf 		= nr_nota_fiscal_w
				where	cd_serie_nf 		= cd_serie_nf_w
				and	cd_estabelecimento 	= cd_estab_nota_fiscal_w
				and	cd_setor_atendimento	= cd_setor_atendimento_p;
			end if;
		end if;
	else
		begin

		if (coalesce(ie_estab_serie_nf_w,'N') = 'S') then
			update	serie_nota_fiscal
			set	nr_ultima_nf 		= nr_nota_fiscal_w
			where	cd_serie_nf 		= cd_serie_nf_w
			and	cd_estabelecimento in (SELECT	z.cd_estabelecimento
							from	estabelecimento z
							where	z.cd_cgc = cd_cgc_emitente_w);
		else
			update	serie_nota_fiscal
			set	nr_ultima_nf 		= nr_nota_fiscal_w
			where	cd_serie_nf 		= cd_serie_nf_w
			and	cd_estabelecimento 	= cd_estab_nota_fiscal_w;
		end if;

		end;
	end if;
end if;

/* atualizar os totais da nota fiscal */

begin

/*OS 796446 - Nao pode ter uma nota com mesmo numero, mesma serie, mesmo emitente e mesmo estabelecimento. Exceto se ela for estornada*/

select 	coalesce(min(ie_situacao),1)
into STRICT	ie_situacao_nf_w
from 	nota_fiscal
where	nr_nota_fiscal 		= nr_nota_fiscal_w
and	cd_estabelecimento 	= cd_estab_nota_fiscal_w
and	cd_serie_nf 		= cd_serie_nf_w
and	cd_cgc_emitente		= cd_cgc_emitente_w;

if (ie_situacao_nf_w <> '1') then

	select 	coalesce(max(nr_sequencia_nf),0)+1
	into STRICT	nr_sequencia_nf_ww
	from 	nota_fiscal
	where	nr_nota_fiscal 		= nr_nota_fiscal_w
	and	cd_estabelecimento 	= cd_estab_nota_fiscal_w
	and	cd_serie_nf 		= cd_serie_nf_w
	and	cd_cgc_emitente		= cd_cgc_emitente_w;

	update	nota_fiscal
	set	nr_sequencia_nf	= nr_sequencia_nf_ww
	where	nr_sequencia 	= nr_sequencia_w;
end if;
/*FIM OS 796446*/

update	nota_fiscal
set	vl_mercadoria	= vl_proc_mat_acum_w,
	vl_total_nota	= vl_proc_mat_acum_w, -- (vl_desc_acum_w + vl_descontos_w),  Estava aplicando o desconto da nota em duplicidade na chamada da procedure atualiza_total_nota_fiscal no final desta procedure.
	vl_descontos	= vl_desc_acum_w + vl_descontos_w,
	vl_ipi		= vl_ipi_w,
	nr_nota_fiscal	= nr_nota_fiscal_w
where	nr_sequencia 	= nr_sequencia_w;

update	nota_fiscal_item
set	nr_nota_fiscal	= nr_nota_fiscal_w
where	nr_sequencia 	= nr_sequencia_w;


exception when others then
	/*(-20011,'Erro na atualizacao da NF. Verifique se nao ha nota gerada com os seguintes dados!' || chr(10) ||
		'Estab: ' ||cd_estab_nota_fiscal_w || chr(10) ||
		'Cgc: '   || cd_cgc_emitente_w || chr(10) ||
		'Serie: ' || cd_serie_nf_w || chr(10) ||
		'Nota: '  || nr_nota_fiscal_w || chr(10) ||
		'Seq: '   || nr_sequencia_nf_w);*/
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173256,
						'CD_ESTAB_NOTA_FISCAL_W='||cd_estab_nota_fiscal_w||';'||
						'CD_CGC_EMITENTE_W='||cd_cgc_emitente_w||';'||
						'CD_SERIE_NF_W='||cd_serie_nf_w||';'||
						'NR_NOTA_FISCAL_W='||nr_nota_fiscal_w||';'||
						'NR_SEQUENCIA_NF_W='||nr_sequencia_nf_w);
end;

ie_gerar_classe_tit_w := obter_param_usuario(-80, 96, obter_perfil_ativo, nm_usuario_p, cd_estab_nota_fiscal_w, ie_gerar_classe_tit_w);
if (ie_gerar_classe_tit_w = 'S') then
	cont_w	:= 0;
	select	count(*)
	into STRICT	cont_w
	from	regra_tit_receber_classif;

	if (cont_w > 0) and (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
		select	cd_tipo_pessoa
		into STRICT	cd_tipo_pessoa_w
		from	pessoa_juridica
		where	cd_cgc	= cd_cgc_w;

		cont_w	:= 0;
		select	count(*)
		into STRICT	cont_w
		from	regra_tit_receber_classif
		where	(((cd_cnpj = cd_cgc_w and coalesce(cd_tipo_pessoa::text, '') = '') or (cd_tipo_pessoa = cd_tipo_pessoa_w and coalesce(cd_cnpj::text, '') = '')) or
			 (cd_cnpj = cd_cgc_w AND cd_tipo_pessoa = cd_tipo_pessoa_w));

		if (cont_w > 0) then

			select	max(nr_sequencia)
			into STRICT	nr_seq_regra_classe_w
			from	regra_tit_receber_classif
			where	(((cd_cnpj = cd_cgc_w and coalesce(cd_tipo_pessoa::text, '') = '') or (cd_tipo_pessoa = cd_tipo_pessoa_w and coalesce(cd_cnpj::text, '') = '')) or
				 (cd_cnpj = cd_cgc_w AND cd_tipo_pessoa = cd_tipo_pessoa_w));

			select	max(nr_seq_classe)
			into STRICT	nr_seq_classe_w
			from	regra_tit_receber_classif
			where	nr_sequencia	= nr_seq_regra_classe_w;
		end if;

	end if;
end if;

/* atualizar a guia da conta */

if (ie_nf_guia_partic_w = 'S') and (nr_interno_conta_p IS NOT NULL AND nr_interno_conta_p::text <> '') then
	begin

	update	procedimento_paciente
	set	nr_doc_convenio		= substr(nr_nota_fiscal_w,1,20)
	where	nr_interno_conta	= nr_interno_conta_p;

	update	material_atend_paciente
	set	nr_doc_convenio		= substr(nr_nota_fiscal_w,1,20)
	where	nr_interno_conta	= nr_interno_conta_p;

	-- Edgar 03/06/2009, OS 146303 e 145940, alterar nr_documento do titulo pois tem que bater com a guia
	update	titulo_receber
	set	nr_documento		= substr(nr_nota_fiscal_w,1,20),
		nr_seq_classe		= coalesce(nr_seq_classe_w,nr_seq_classe)
	where	nr_interno_conta	= nr_interno_conta_p;

	CALL gerar_conta_paciente_guia(nr_interno_conta_p, 2);
	end;
end if;

/* edgar 05/11/2004, os 12515 acertar o nr nota no titulo */

if (coalesce(nr_interno_conta_p,0) > 0) then
	update	titulo_receber
	set	nr_nota_fiscal		= nr_nota_fiscal_w,
		nr_seq_nf_saida		= nr_sequencia_w,
		nr_seq_classe		= coalesce(nr_seq_classe_w,nr_seq_classe)
	where	nr_interno_conta	= nr_interno_conta_p
	and	coalesce(nr_nota_fiscal, '0') = '0';
end if;
if (coalesce(nr_seq_protocolo_p,0) > 0) then
	update	titulo_receber
	set	nr_nota_fiscal		= nr_nota_fiscal_w,
		nr_seq_nf_saida		= nr_sequencia_w,
		nr_seq_classe		= coalesce(nr_seq_classe_w,nr_seq_classe)
	where	nr_seq_protocolo	= nr_seq_protocolo_p
	and	coalesce(nr_nota_fiscal, '0') = '0';

	update	titulo_receber a
	set	a.nr_nota_fiscal	= nr_nota_fiscal_w,
		a.nr_seq_nf_saida	= nr_sequencia_w,
		nr_seq_classe		= coalesce(nr_seq_classe_w,nr_seq_classe)
	where	a.nr_interno_conta in (	SELECT	x.nr_interno_conta
					from 	conta_paciente x
					where 	x.nr_seq_protocolo = nr_seq_protocolo_p)
	and	coalesce(a.nr_nota_fiscal, '0') = '0';
end if;

vl_descontos_ww := 0;

/*Verifica se o desconto aplicado no corpo da nota para passar as informacoes na geracao do tributo*/

if (coalesce(nr_interno_conta_p,0) > 0 and (coalesce(vl_descontos_w,0) + coalesce(vl_desc_acum_w,0)) > 0) then

	select 	max(a.ie_classificacao),
		max(a.ie_tipo_desconto)
	into STRICT 	ie_classificacao_w,
		ie_tipo_desconto_w
	from 	conta_paciente_desconto a
	where 	a.nr_interno_conta = nr_interno_conta_p;

	if ((coalesce(ie_classificacao_w,'XX') = 'D') and (coalesce(ie_tipo_desconto_w,0) = 1)) then
		vl_descontos_ww := coalesce(vl_descontos_w,0) + coalesce(vl_desc_acum_w,0);
	end if;
end if;

if (coalesce(ie_integra_finnegans_w,'N') = 'N') then
        CALL gerar_imposto_nf(nr_sequencia_w, nm_usuario_p, nr_seq_sit_trib_p, null);
        open	c02;
        loop
        fetch 	c02 into
                nr_item_nf_w,
                vl_total_item_nf_w;
        EXIT WHEN NOT FOUND; /* apply on c02 */
                begin
                        CALL gerar_imposto_nf_item(nr_sequencia_w, nr_item_nf_w, nm_usuario_p, nr_seq_sit_trib_p, null,null,vl_descontos_ww);
                end;
                end loop;
        close c02;
end if;

CALL sup_natureza_op_cfps_nf(nr_sequencia_w);

CALL atualiza_total_nota_fiscal(nr_sequencia_w,nm_usuario_p);

CALL Gerar_Venc_Nota_Fiscal_Pac(nr_sequencia_w, dt_base_vencimento_p);

if	((coalesce(ie_regra_calcula_nf_w,'D') = 'S') or
	((coalesce(ie_regra_calcula_nf_w,'D') = 'D') and (ie_calcula_nf_w = 'S')) or
	((coalesce(ie_regra_calcula_nf_w,'D') = 'C') and (ie_calcula_nf_conv_w = 'S'))) then
	update	nota_fiscal
	set	dt_atualizacao_estoque = clock_timestamp()
	where	nr_sequencia = nr_sequencia_w;
end if;
	
ie_ratear_desconto_item_w  := obter_param_usuario(-80, 105, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_ratear_desconto_item_w );
if (coalesce(ie_ratear_desconto_item_w,0) = 'S') and
	((coalesce(nr_seq_protocolo_p,0) > 0) or (coalesce(nr_interno_conta_p,0) > 0)) then
	CALL ratear_valores_nf(nr_sequencia_w, nm_usuario_p, cd_moeda_p, vl_cotacao_p);
end if;

begin
	ie_ratear_trib_centro_c_w := obter_param_usuario(-80, 112, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_ratear_trib_centro_c_w);
	if (coalesce(ie_ratear_trib_centro_c_w,'N') = 'S') or (philips_param_pck.get_cd_pais = 2) then


		if (ie_opcao_p = 'Estrut') then

			open	c07;
			loop
			fetch 	c07 into
				nr_item_nf_w,
				cd_conta_contabil_ww,
				cd_centro_custo_ww,
				vl_total_item_nf_w;
			EXIT WHEN NOT FOUND; /* apply on c07 */
				begin

				if (coalesce(nr_item_nf_w::text, '') = '') then
					select max(nr_item_nf)
					into STRICT   nr_item_nf_w
					from   nota_fiscal_item
					where  nr_sequencia = nr_sequencia_w;
				end if;

				commit;

				insert	into nota_fiscal_item_rateio(nr_sequencia,
					nr_seq_nota,
					nr_item_nf,
					dt_atualizacao,
					nm_usuario,
					cd_centro_custo,
					vl_rateio,
					ie_situacao,
					vl_desconto,
					vl_frete,
					vl_seguro,
					vl_despesa_acessoria,
					vl_tributo,
					cd_conta_contabil)
				values (	nextval('nota_fiscal_item_rateio_seq'),
					nr_sequencia_w,
					nr_item_nf_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_centro_custo_ww,
					vl_total_item_nf_w,
					'A',
					0,
					0,
					0,
					0,
					0,
					cd_conta_contabil_ww);

				end;
				end loop;
			close c07;
		else

			select 	count(1)
			into STRICT	qt_centro_custo_w
			from (SELECT	coalesce(b.cd_centro_custo, b.cd_centro_custo_receita) cd_centro_custo
				from 	valores_atend_paciente_v a,
					setor_atendimento b
				where 	a.cd_setor_atendimento = b.cd_setor_atendimento
				and	a.nr_interno_conta = nr_interno_conta_p
				and (a.quantidade <> 0 or a.valor <> 0)
				and 	coalesce(a.cd_motivo_exc_conta::text, '') = ''
				and 	(coalesce(b.cd_centro_custo, b.cd_centro_custo_receita) IS NOT NULL AND (coalesce(b.cd_centro_custo, b.cd_centro_custo_receita))::text <> '')
				group by coalesce(b.cd_centro_custo, b.cd_centro_custo_receita)) alias9;

			if (qt_centro_custo_w > 0) then

				open	c05;
				loop
				fetch 	c05 into
					cd_centro_custo_ww,
					vl_valor_cc_w;
				EXIT WHEN NOT FOUND; /* apply on c05 */
					begin

					open	c02;
					loop
					fetch 	c02 into
						nr_item_nf_w,
						vl_total_item_nf_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */
						begin

						if (vl_total_item_nf_w > 0 ) then

							select	coalesce(max(vl_mercadoria),0)
							into STRICT	vl_mercadoria_cc_w
							from	nota_fiscal
							where	nr_sequencia = nr_sequencia_w;

							pr_percentual_cc_w := (vl_valor_cc_w / vl_mercadoria_cc_w);
							vl_rateio_w := (vl_total_item_nf_w * pr_percentual_cc_w);

							insert	into nota_fiscal_item_rateio(nr_sequencia,
								nr_seq_nota,
								nr_item_nf,
								dt_atualizacao,
								nm_usuario,
								cd_centro_custo,
								vl_rateio,
								ie_situacao,
								vl_desconto,
								vl_frete,
								vl_seguro,
								vl_despesa_acessoria,
								vl_tributo)
							values (	nextval('nota_fiscal_item_rateio_seq'),
								nr_sequencia_w,
								nr_item_nf_w,
								clock_timestamp(),
								nm_usuario_p,
								cd_centro_custo_ww,
								vl_rateio_w,
								'A',
								0,
								0,
								0,
								0,
								0);

						end if;

						end;
						end loop;
					close c02;

						select coalesce(sum(vl_rateio),0)
						into STRICT   vl_lancado_cc_w
						from   nota_fiscal_item_rateio
						where  nr_seq_nota = nr_sequencia_w
						and    cd_centro_custo = cd_centro_custo_ww;

					if (vl_lancado_cc_w <> vl_valor_cc_w) then

						vl_diferenca_cc_w :=  (vl_valor_cc_w - vl_lancado_cc_w);

						select coalesce(max(nr_sequencia),0),
						       coalesce(max(vl_rateio),0)
						into STRICT   nr_sequencia_rateio_w,
						       vl_rateio_item_ww
						from   nota_fiscal_item_rateio
						where  nr_seq_nota = nr_sequencia_w
						and    cd_centro_custo = cd_centro_custo_ww
						and    vl_rateio =  (SELECT    max(vl_rateio)
								     from   nota_fiscal_item_rateio
								     where  nr_seq_nota = nr_sequencia_w
								     and    cd_centro_custo = cd_centro_custo_ww );

						if (nr_sequencia_rateio_w > 0) then

							update 	nota_fiscal_item_rateio
							set    	vl_rateio = (vl_rateio_item_ww + vl_diferenca_cc_w)
							where   nr_seq_nota = nr_sequencia_w
							and     nr_sequencia = nr_sequencia_rateio_w;

						end if;

					end if;

					if      ((coalesce(ie_ratear_trib_centro_c_w,'N') = 'S') and (coalesce(ie_integra_finnegans_w,'N') = 'N')) then
						CALL fis_ratear_trib_item(nm_usuario_p, cd_estabelecimento_p, nr_sequencia_w);
					end if;

					end;
					end loop;
				close c05;

			end if;
		end if;
	end if;
exception when others then
	ds_erro_w :=  'IE_OPCAO_P=' || ie_opcao_p || ' - ' || substr(sqlerrm(SQLSTATE),1,1000);
	CALL gravar_log_tasy(6789,wheb_mensagem_pck.get_texto(794212,'DS_ERRO_W='||ds_erro_w), nm_usuario_p);
end;

if	((coalesce(ie_regra_calcula_nf_w,'D') = 'S') or
	((coalesce(ie_regra_calcula_nf_w,'D') = 'D') and (ie_calcula_nf_w = 'S')) or
	((coalesce(ie_regra_calcula_nf_w,'D') = 'C') and (ie_calcula_nf_conv_w = 'S'))) then
	if (philips_param_pck.get_cd_pais = 2)  then
		CALL ratear_valores_nf(nr_sequencia_w, nm_usuario_p, cd_moeda_p, vl_cotacao_p);
	end if;

	begin
		ie_tit_tributo_paciente_w := obter_param_usuario(-80, 111, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_tit_tributo_paciente_w);
		if	((coalesce(ie_tit_tributo_paciente_w,'N') = 'S') and (coalesce(ie_integra_finnegans_w,'N') = 'N')) then
			CALL gerar_tit_tributo_paciente(nr_sequencia_w, nm_usuario_p);
		end if;

	exception when others then
		ds_erro_w := substr(sqlerrm(SQLSTATE),1,1000);
		CALL gravar_log_tasy(6789,wheb_mensagem_pck.get_texto(794210,'DS_ERRO_W='||ds_erro_w), nm_usuario_p);
	end;

	update	nota_fiscal
	set	dt_atualizacao_estoque = clock_timestamp()
	where	nr_sequencia = nr_sequencia_w;

	reg_integracao_p.ie_operacao		:=	'I';

        if (coalesce(ie_integra_finnegans_w,'N') = 'N') then
	        reg_integracao_p := gerar_int_padrao.gravar_integracao('3', nr_sequencia_w, nm_usuario_p, reg_integracao_p);
        end if;
end if;
if (obter_perfil_ativo <> 0) then
	/*gravar__log__tasy(7653,'Geracao NF - Sequencia: '||nr_sequencia_w||
			' - Conta: '||nr_interno_conta_p||
			' - Perfil: '||substr(obter_desc_perfil(obter_perfil_ativo),1,255),
			nm_usuario_p);*/
	CALL gerar_historico_nota_fiscal(
			nr_sequencia_w,
			nm_usuario_p,
			55,
			WHEB_MENSAGEM_PCK.get_texto(301241,'NR_SEQUENCIA_W='|| NR_SEQUENCIA_W ||';NR_INTERNO_CONTA_P='|| NR_INTERNO_CONTA_P ||';NR_SEQ_PROTOCOLO_P='|| NR_SEQ_PROTOCOLO_P ||';DS_PERFIL_W='|| substr(obter_desc_perfil(obter_perfil_ativo),1,255)));
			/*Geracao NF - Sequencia: #@NR_SEQUENCIA_W#@ - Conta: #@NR_INTERNO_CONTA_P#@ - Protocolo: #@NR_SEQ_PROTOCOLO_P#@ - Perfil: #@DS_PERFIL_W#@*/

end if;

if (cd_uso_cfdi_p IS NOT NULL AND cd_uso_cfdi_p::text <> '') then

	insert	into fis_uso_cfdi(nr_sequencia,
				nr_seq_nota,
				dt_atualizacao,
				nm_usuario,
				cd_uso_cfdi,
				cd_estabelecimento)
			values (	nextval('fis_uso_cfdi_seq'),
				nr_sequencia_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_uso_cfdi_p,
				cd_estabelecimento_p);


end if;

if (cd_tipo_relacao_p IS NOT NULL AND cd_tipo_relacao_p::text <> '') then

	insert  into fis_tipo_relacao(nr_sequencia,
			nr_seq_nota,
			dt_atualizacao,
			nm_usuario,
			cd_tipo_relacao,
			cd_estabelecimento)
		values (	nextval('fis_tipo_relacao_seq'),
			nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_tipo_relacao_p,
			cd_estabelecimento_p);


end if;

begin
CALL gerar_conta_contabil_nf(nr_sequencia_w,nm_usuario_p);
exception when others then
	nr_sequencia_w	:= nr_sequencia_w;
end;

if      ((ie_gerar_trib_sem_tit_w = 'S') and (coalesce(ie_integra_finnegans_w,'N') = 'N')) then
	CALL gerar_titulo_trib_receb(nr_sequencia_w,nm_usuario_p);
end if;

select	count(*)
into STRICT	qt_reg_w
from	conta_paciente_nf a,
	nota_fiscal b
where	a.nr_sequencia	= b.nr_sequencia
and	b.nr_sequencia <> nr_sequencia_w
and	b.ie_situacao	= '1'
and	a.nr_interno_conta	= nr_interno_conta_p;

if (qt_reg_w > 0) then
	begin
	rollback;
	--(-20011,'Ja existe uma nota fiscal vinculada conta ' || nr_interno_conta_p);
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173196,
						'NR_INTERNO_CONTA_P='||nr_interno_conta_p);
	end;
end if;

nr_sequencia_p		:= nr_sequencia_w;

/* Chamada Contabilizacao Lote Receita */

if (coalesce(ie_integra_finnegans_w,'N') = 'N') then
        cd_empresa_w	:= obter_empresa_estab(cd_estabelecimento_p);	
        ie_ctb_online_w := ctb_online_pck.get_modo_lote(  6, cd_estabelecimento_p, cd_empresa_w);		

        ie_geracao_w	:= ctb_online_pck.get_geracao_lote_receita( cd_convenio_p,
                                        cd_estabelecimento_p,
                                        nm_usuario_p,
                                        ie_tipo_convenio_w);

        if (ie_ctb_online_w = 'S' and ie_geracao_w = 'ENF') then
                begin
                CALL ctb_contab_onl_lote_receita(nr_seq_protocolo_p  =>  nr_seq_protocolo_p,
                                            nr_interno_conta_p  =>  nr_interno_conta_p,
                                            nm_usuario_p        =>  nm_usuario_p,
                                            ie_operacao_p       =>  1,
                                            ie_commit_p         =>  'N',
                                            nr_seq_nota_p       =>  nr_sequencia_p,
                                            dt_referencia_p     =>  null);
                end;
        end if;

        ie_ctb_online_w := ctb_online_pck.get_modo_lote(  14, cd_estabelecimento_p, cd_empresa_w);
        if (ie_ctb_online_w = 'S' and ie_geracao_w = 'ENF') then
                CALL ctb_contab_onl_repasse( null, nr_interno_conta_p, null, nm_usuario_p,1,'S','N');
        end if;

        if (coalesce(ie_commit_p,'S') = 'S') then
                commit;
        end if;
end if;

if (coalesce(ie_integra_finnegans_w,'N') = 'S') then
        begin
        select  bifrost.send_integration('api.send.invoice.notransmission.request',
                                        'com.philips.tasy.integration.invoice.callback.SendInvoiceWithoutTransmissionCallback',
                                        '{"invoiceId": ' || nr_sequencia_w || '}',
                                        nm_usuario_p)
        into STRICT    ds_retorno_integracao_w
;
        end;

        CALL send_invoice_tie(nr_sequencia_w, nm_usuario_p, 'I', 'E');
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nf_paciente ( nr_interno_conta_p bigint, nr_atendimento_p INOUT bigint, cd_convenio_p INOUT bigint, nr_seq_protocolo_p INOUT bigint, cd_estabelecimento_p bigint, dt_emissao_p timestamp, dt_base_vencimento_p timestamp, cd_pessoa_fisica_p INOUT text, cd_cgc_p INOUT text, cd_serie_nf_p text, cd_nat_oper_nf_p text, cd_operacao_nf_p bigint, cd_condicao_pagamento_p bigint, qt_item_maximo_p bigint, ie_origem_proced_p bigint, cd_procedimento_p bigint, cd_proced_acrescimo_p bigint, ie_origem_proc_acres_p bigint, ie_opcao_p INOUT text, nm_usuario_p text, nr_sequencia_p INOUT bigint, ds_complemento_p text, nr_nota_fiscal_p bigint, ds_observacao_p text, ds_obs_desconto_nf_p text, vl_desconto_nf_p bigint, ie_commit_p text, nr_seq_classif_fiscal_p bigint, nr_seq_sit_trib_p bigint, nr_recibo_p text, cd_setor_atendimento_p bigint, cd_moeda_p bigint default null, vl_cotacao_p bigint default null, cd_pagamento_cfdi_p text default null, cd_uso_cfdi_p text default null, cd_tipo_relacao_p text default null, ie_tipo_cfdi_p text default null) FROM PUBLIC;

