-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_valida_ocor_aut_elegib ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_segurado_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, ie_utiliza_filtro_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Validar a ocorrência combinada de 'Valida limite beneficiário' 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ x] Portal [ ] Relatórios [ ] Outros: Consistencia da guia 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ie_tipo_processo_w		pls_guia_plano.ie_tipo_processo%type;
nr_seq_segurado_w		pls_guia_plano.nr_seq_segurado%type;
dt_nascimento_w			varchar(10);
nr_cpf_w			pls_guia_dados_compl.nr_cpf%type;
nr_identidade_w			pls_guia_dados_compl.nr_identidade%type;
nr_cpf_pf_w			pessoa_fisica.nr_cpf%type;
nr_identidade_pf_w		pessoa_fisica.nr_identidade%type;
dt_nascimento_pf_w		varchar(10);
qt_idade_w			bigint;
qt_registros_w			bigint;
ie_regra_w			varchar(2) := 'S';
nr_seq_oc_benef_w		bigint;
ie_tipo_ocorrencia_w		varchar(2);


BEGIN 
 
if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then 
	 
	select	ie_tipo_processo, 
		nr_seq_segurado 
	into STRICT	ie_tipo_processo_w, 
		nr_seq_segurado_w 
	from	pls_guia_plano 
	where	nr_sequencia = nr_seq_guia_p;
	 
	if (coalesce(ie_tipo_processo_w, 'X') = 'P') then 
		 
		begin 
			select	to_char(dt_nascimento,'dd/mm/yyyy'), 
				nr_cpf, 
				nr_identidade 
			into STRICT	dt_nascimento_w, 
				nr_cpf_w, 
				nr_identidade_w 
			from	pls_guia_dados_compl 
			where	nr_seq_guia = nr_seq_guia_p;
		exception 
		when others then 
			dt_nascimento_w := null;
			nr_cpf_w := null;
			nr_identidade_w := null;
		end;
		 
		if ( (dt_nascimento_w IS NOT NULL AND dt_nascimento_w::text <> '') or (nr_cpf_w IS NOT NULL AND nr_cpf_w::text <> '') or (nr_identidade_w IS NOT NULL AND nr_identidade_w::text <> '') ) then 
		 
			begin 
				select	(obter_idade(dt_nascimento, clock_timestamp(), 'A'))::numeric , 
					nr_cpf, 
					nr_identidade, 
					to_char(dt_nascimento,'dd/mm/yyyy') 
				into STRICT	qt_idade_w, 
					nr_cpf_pf_w, 
					nr_identidade_pf_w, 
					dt_nascimento_pf_w 
				from	pessoa_fisica a, 
					pls_segurado b 
				where	b.cd_pessoa_fisica = a.cd_pessoa_fisica 
				and	b.nr_sequencia = nr_seq_segurado_w;
			exception 
			when others then 
				qt_idade_w :=0;
				nr_cpf_pf_w := null;
				nr_identidade_pf_w := null;
				dt_nascimento_pf_w := null;
			end;
		 
			select count(1) 
			into STRICT	qt_registros_w 
			from  pls_validacao_aut_eleg a, 
				pls_regra_val_eleg b 
			where  a.nr_seq_regra_eleg = b.nr_sequencia 
			and	a.nr_seq_ocor_aut_combinada = nr_seq_ocor_combinada_p 
			and (qt_idade_w >= qt_idade_min or coalesce(qt_idade_min::text, '') = '') 
			and (qt_idade_w <= qt_idade_max or coalesce(qt_idade_max::text, '') = '') 
			and	dt_inicio_vigencia <= clock_timestamp() 
			and (coalesce(dt_fim_vigencia::text, '') = '' or dt_fim_vigencia >= clock_timestamp()) 
			and	((coalesce(ie_exige_cpf::text, '') = '' or (ie_exige_cpf = 'A' and nr_cpf_w <> nr_cpf_pf_w)) 
			or (coalesce(ie_exige_dt_nasc::text, '') = '' or (ie_exige_dt_nasc = 'A' and dt_nascimento_w <> dt_nascimento_pf_w)) 
			or (coalesce(ie_exige_rg::text, '') = '' or (ie_exige_rg = 'A' and nr_identidade_pf_w <> nr_identidade_w)));
			 
	 
			if (qt_registros_w > 0) then 
			 
				if (ie_utiliza_filtro_p = 'S') then 
					ie_regra_w := 'N';
				 
					/* TRATAMENTO PARA FILTROS */
 
					SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, nr_seq_guia_p, null, null, null, null, null, null, null, null, null, null, null, null, nr_seq_ocorrencia_p, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w ) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
				end if;
				 
				/* AVALIA RETORNO DO TRATAMENTO DO FILTRO E INSERI A OCORRÊNCIA */
 
				if (ie_regra_w = 'S') then 
				 
					update	pls_guia_dados_compl 
					set	ie_revisao = 'S' 
					where	nr_seq_guia = nr_seq_guia_p;
				 
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, null, nr_seq_guia_p, null, null, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 1, cd_estabelecimento_p, 'N', null, nr_seq_oc_benef_w, null, null, null, null);
					 
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p, 
									nr_seq_guia_p, null, null, 
									null, null, null, 
									null, null, null, 
									nm_usuario_p, cd_estabelecimento_p);
				end if;
				 
			 
			end if;
			 
		end if;
		 
	end if;
	 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_valida_ocor_aut_elegib ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_segurado_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, ie_utiliza_filtro_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

