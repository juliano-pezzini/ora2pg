-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerencia_processos_cta ( ie_processo_10_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, cd_processos_p INOUT text) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Alterações:
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qtd_regra_w		bigint;
nr_valida_proc_w	bigint;

C01 CURSOR FOR
	SELECT	a.cd_processo cd
	from	pls_cta_tipo_processo a
	where	a.ie_situacao = 'A'
	and (a.cd_processo = 10 and ie_processo_10_p = 'S')
	
union

	SELECT	a.cd_processo cd
	from	pls_cta_tipo_processo a
	where	a.ie_situacao = 'A'
	and	a.cd_processo <> 10
	order by cd;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_exec_cta_proc a
	where exists (	SELECT 	1
			from	pls_membro_exec_cta_proc b
			where	nm_usuario_exec = nm_usuario_p
			and	b.nr_seq_regra 	= a.nr_sequencia)
	and	a.ie_situacao = 'A';
BEGIN
--VERIFICA SE POSSUI REGRA CADASTRADA
select	count(1)
into STRICT	qtd_regra_w
from	pls_regra_exec_cta_proc
where	ie_situacao = 'A';

for r_c01_w in C01 loop
	begin
	if (coalesce(qtd_regra_w,0) > 0) then
		for r_c02_w in C02 loop
			begin
			if (r_c01_w.cd = 2) then --CONSISTIR
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia = r_c02_w.nr_sequencia
				and	ie_consistir = 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 3) then --VALORIZAÇÃO
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 	= r_c02_w.nr_sequencia
				and	ie_valorizacao 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 4) then --GLOSAS
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 	= r_c02_w.nr_sequencia
				and	ie_glosas 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 5) then --OCORRÊNCIAS ANTIGAS
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c02_w.nr_sequencia
				and	ie_ocorrencia_antiga 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 6) then --OCORRÊNCIAS COMBINADAS
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c02_w.nr_sequencia
				and	ie_ocorrencia_comb 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 7) then --LIBERAÇÃO AUTOMATICA
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c02_w.nr_sequencia
				and	ie_lib_automatica 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 8) then --ATUALIZAR PAGAMENTO
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c02_w.nr_sequencia
				and	ie_pagamento_cobranca 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 9) then --ATUALIZAR COBRANÇA
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c02_w.nr_sequencia
				and	ie_atualiza_cobranca 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 10) then --GERAÇÃO DE ANÁLISE
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c02_w.nr_sequencia
				and	ie_geracao_analise 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 11) then --PÓS-ESTABELECIDO
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia = r_c02_w.nr_sequencia
				and	ie_pos_estab = 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (r_c01_w.cd = 12) then --LIBERAÇÃO AUTOMATICA DE ANÁLISE
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 	= r_c02_w.nr_sequencia
				and	ie_lib_analise 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);
			end if;

			if (coalesce(nr_valida_proc_w,0) > 0) then
				exit;
			end if;
			end;
		end loop;
		if (coalesce(nr_valida_proc_w,0) = 0) and (coalesce(cd_processos_p::text, '') = '') then
			cd_processos_p := r_c01_w.cd;
		elsif (coalesce(nr_valida_proc_w,0) = 0) and (cd_processos_p IS NOT NULL AND cd_processos_p::text <> '') then
			cd_processos_p := r_c01_w.cd || ',' || cd_processos_p;
		end if;
	end if;
	end;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_processos_cta ( ie_processo_10_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, cd_processos_p INOUT text) FROM PUBLIC;

