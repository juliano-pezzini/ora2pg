-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE oft_obter_biometria ( nr_seq_consulta_p bigint, nr_seq_consulta_form_p bigint, cd_pessoa_fisica_p text, ie_opcao_p text, vListaBiometria INOUT strRecTypeFormOft) AS $body$
DECLARE


dt_exame_w						oft_biometria.dt_registro%type;
ds_observacao_w				oft_biometria.ds_observacao%type;
cd_lente_alternativa_od_w	oft_biometria.cd_lente_alternativa_od%type;
cd_lente_alternativa_oe_w	oft_biometria.cd_lente_alternativa_oe%type;
cd_lente_planejada_od_w		oft_biometria.cd_lente_planejada_od%type;
cd_lente_planejada_oe_w		oft_biometria.cd_lente_planejada_oe%type;
ie_od_formula_w				oft_biometria.ie_od_formula%type;
ie_oe_formula_w				oft_biometria.ie_oe_formula%type;
ie_tipo_biometria_w			oft_biometria.ie_tipo_biometria%type;
qt_od_acd_w						oft_biometria.qt_od_acd%type;
qt_od_eixo_w					oft_biometria.qt_od_eixo%type;
qt_od_emt_w						oft_biometria.qt_od_emt%type;
qt_oe_acd_w						oft_biometria.qt_oe_acd%type;
qt_oe_eixo_w					oft_biometria.qt_oe_eixo%type;
qt_oe_emt_w						oft_biometria.qt_oe_emt%type;
cd_profissional_w				oft_biometria.cd_profissional%TYPE;
nr_comprimento_axial_od_w	oft_biometria.nr_comprimento_axial_od%type;
nr_comprimento_axial_oe_w	oft_biometria.nr_comprimento_axial_oe%type;
dt_liberacao_w					timestamp;
cd_estabelecimento_w			estabelecimento.cd_estabelecimento%type := wheb_usuario_pck.get_cd_estabelecimento;
nm_usuario_w					usuario.nm_usuario%type := wheb_usuario_pck.get_nm_usuario;
ds_erro_w						varchar(4000);

biometria_form CURSOR FOR
	SELECT	a.*
	from		oft_biometria a,
				oft_consulta_formulario b
	where		a.nr_seq_consulta_form 	=	b.nr_sequencia
	and		a.nr_seq_consulta_form 	=	nr_seq_consulta_form_p
	and		a.nr_seq_consulta			=	nr_seq_consulta_p
	and		((a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '') or (a.nm_usuario = nm_usuario_w))
	and		((coalesce(a.dt_inativacao::text, '') = '') or (b.dt_inativacao IS NOT NULL AND b.dt_inativacao::text <> ''))
	order by dt_registro;

biometria_paciente CURSOR FOR
	SELECT	a.*
	from		oft_biometria a,
				oft_consulta b
	where		a.nr_seq_consulta		=	b.nr_sequencia
	and		b.cd_pessoa_fisica	=	cd_pessoa_fisica_p
	and		(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and		coalesce(a.dt_inativacao::text, '') = ''
	and		b.nr_sequencia 		<> nr_seq_consulta_p
	order by dt_registro;
BEGIN
begin

if (coalesce(nr_seq_consulta_p,0) > 0) and (vListaBiometria.count > 0) then
	if (ie_opcao_p = 'F') then
		FOR c_biometria IN biometria_form LOOP
			begin
			dt_exame_w						:=	c_biometria.dt_registro;
			ds_observacao_w				:=	c_biometria.ds_observacao;
			cd_lente_alternativa_od_w	:=	c_biometria.cd_lente_alternativa_od;
			cd_lente_alternativa_oe_w	:=	c_biometria.cd_lente_alternativa_oe;
			cd_lente_planejada_od_w		:=	c_biometria.cd_lente_planejada_od;
			cd_lente_planejada_oe_w		:=	c_biometria.cd_lente_planejada_oe;
			ie_od_formula_w				:=	c_biometria.ie_od_formula;
			ie_oe_formula_w				:=	c_biometria.ie_oe_formula;
			ie_tipo_biometria_w			:=	c_biometria.ie_tipo_biometria;
			qt_od_acd_w						:=	c_biometria.qt_od_acd;
			qt_od_eixo_w					:=	c_biometria.qt_od_eixo;
			qt_od_emt_w						:=	c_biometria.qt_od_emt;
			qt_oe_acd_w						:=	c_biometria.qt_oe_acd;
			qt_oe_eixo_w					:=	c_biometria.qt_oe_eixo;
			qt_oe_emt_w						:=	c_biometria.qt_oe_emt;
			dt_liberacao_w					:=	c_biometria.dt_liberacao;
			cd_profissional_w				:=	c_biometria.cd_profissional;
			nr_comprimento_axial_od_w	:=	c_biometria.nr_comprimento_axial_od;
			nr_comprimento_axial_oe_w	:=	c_biometria.nr_comprimento_axial_oe;
			end;
		end loop;
	else
		FOR c_biometria IN biometria_paciente LOOP
			begin
			cd_profissional_w				:=	obter_pf_usuario(nm_usuario_w,'C');
			dt_exame_w						:= clock_timestamp();
			ds_observacao_w				:=	c_biometria.ds_observacao;
			cd_lente_alternativa_od_w	:=	c_biometria.cd_lente_alternativa_od;
			cd_lente_alternativa_oe_w	:=	c_biometria.cd_lente_alternativa_oe;
			cd_lente_planejada_od_w		:=	c_biometria.cd_lente_planejada_od;
			cd_lente_planejada_oe_w		:=	c_biometria.cd_lente_planejada_oe;
			ie_od_formula_w				:=	c_biometria.ie_od_formula;
			ie_oe_formula_w				:=	c_biometria.ie_oe_formula;
			ie_tipo_biometria_w			:=	c_biometria.ie_tipo_biometria;
			qt_od_acd_w						:=	c_biometria.qt_od_acd;
			qt_od_eixo_w					:=	c_biometria.qt_od_eixo;
			qt_od_emt_w						:=	c_biometria.qt_od_emt;
			qt_oe_acd_w						:=	c_biometria.qt_oe_acd;
			qt_oe_eixo_w					:=	c_biometria.qt_oe_eixo;
			qt_oe_emt_w						:=	c_biometria.qt_oe_emt;
			nr_comprimento_axial_od_w	:=	c_biometria.nr_comprimento_axial_od;
			nr_comprimento_axial_oe_w	:=	c_biometria.nr_comprimento_axial_oe;
			end;
		end loop;
	end if;

	for i in 1..vListaBiometria.count loop
		begin
		if (ie_opcao_p = 'F') or (vListaBiometria[i].ie_obter_resultado = 'S') then
			vListaBiometria[i].dt_liberacao	:= dt_liberacao_w;
			case upper(vListaBiometria[i].nm_campo)
				WHEN 'CD_PROFISSIONAL' THEN
					vListaBiometria[i].ds_valor	:= cd_profissional_w;
				when 'DT_REGISTRO' then
					vListaBiometria[i].dt_valor	:= dt_exame_w;
				when 'DS_OBSERVACAO' then
					vListaBiometria[i].ds_valor	:=	ds_observacao_w;
				when 'CD_LENTE_ALTERNATIVA_OD' then
					vListaBiometria[i].nr_valor	:=	cd_lente_alternativa_od_w;
				when 'CD_LENTE_ALTERNATIVA_OE' then
					vListaBiometria[i].nr_valor	:=	cd_lente_alternativa_oe_w;
				when 'CD_LENTE_PLANEJADA_OD' then
					vListaBiometria[i].nr_valor	:=	cd_lente_planejada_od_w;
				when 'CD_LENTE_PLANEJADA_OE' then
					vListaBiometria[i].nr_valor	:=	cd_lente_planejada_oe_w;
				when 'IE_OD_FORMULA' then
					vListaBiometria[i].ds_valor	:=	ie_od_formula_w;
				when 'IE_OE_FORMULA' then
					vListaBiometria[i].ds_valor	:=	ie_oe_formula_w;
				when 'IE_TIPO_BIOMETRIA' then
					vListaBiometria[i].ds_valor	:=	ie_tipo_biometria_w;
				when 'QT_OD_ACD' then
					vListaBiometria[i].nr_valor	:=	qt_od_acd_w;
				when 'QT_OD_EIXO' then
					vListaBiometria[i].nr_valor	:=	qt_od_eixo_w;
				when 'QT_OD_EMT' then
					vListaBiometria[i].nr_valor	:=	qt_od_emt_w;
				when 'QT_OE_ACD' then
					vListaBiometria[i].nr_valor	:=	qt_oe_acd_w;
				when 'QT_OE_EIXO' then
					vListaBiometria[i].nr_valor	:=	qt_oe_eixo_w;
				when 'QT_OE_EMT' then
					vListaBiometria[i].nr_valor	:=	qt_oe_emt_w;
				when 'NR_COMPRIMENTO_AXIAL_OD' then
					vListaBiometria[i].nr_valor	:=	nr_comprimento_axial_od_w;
				when 'NR_COMPRIMENTO_AXIAL_OE' then
					vListaBiometria[i].nr_valor	:=	nr_comprimento_axial_oe_w;
				else
					null;
			end case;
		end if;
	end;
	end loop;
end if;

exception
when others then
	ds_erro_w	:= substr(sqlerrm,1,4000);
end;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE oft_obter_biometria ( nr_seq_consulta_p bigint, nr_seq_consulta_form_p bigint, cd_pessoa_fisica_p text, ie_opcao_p text, vListaBiometria INOUT strRecTypeFormOft) FROM PUBLIC;

