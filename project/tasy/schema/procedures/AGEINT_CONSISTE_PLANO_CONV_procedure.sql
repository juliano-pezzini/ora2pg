-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_consiste_plano_conv (nr_atendimento_p bigint, cd_convenio_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_procedimento_p timestamp, qt_procedimento_p bigint, ie_tipo_atendimento_p bigint, cd_plano_p text, cd_autorizacao_p text, ds_erro_p INOUT text, cd_setor_atendimento_p bigint, nr_seq_exame_p bigint, ie_regra_p INOUT text, nr_seq_agenda_p bigint, nr_seq_regra_p INOUT bigint, nr_seq_proc_interno_p bigint, cd_categoria_p text, cd_estabelecimento_p bigint, cd_setor_entrega_prescr_p bigint, ie_sexo_p text, ie_glosa_p INOUT text, cd_edicao_ajuste_p INOUT bigint, nr_seq_cobertura_p bigint, cd_convenio_glosa_p INOUT bigint, cd_categoria_glosa_p INOUT text, cd_paciente_p text, cd_empresa_p bigint default null, pr_glosa_p INOUT bigint DEFAULT NULL, vl_glosa_p INOUT bigint DEFAULT NULL, cd_medico_p text default null) AS $body$
DECLARE


  ds_erro_w              varchar(255) := '';
  ds_erro_autor_w        varchar(255) := '';
  cd_grupo_w             bigint := 0;
  cd_especialidade_w     bigint := 0;
  cd_tipo_acomodacao_w   bigint := 0;
  cd_area_w              bigint := 0;
  ie_regra_w             smallint := 0;
  cd_plano_w             varchar(10) := '';
  ie_valor_w             varchar(4);
  qt_ponto_min_w         double precision;
  qt_ponto_max_w         double precision;
  cd_categoria_w         varchar(10);
  cd_estabelecimento_w   integer;
  ie_tipo_atendimento_w  integer;
  cd_classif_setor_w     varchar(10);
  nr_seq_regra_w         bigint;
  vl_procedimento_w      double precision;
  ie_regra_valor_w       varchar(3);
  ie_carater_inter_sus_w varchar(2);
  ie_clinica_w           integer;
  ds_irrelevante_w       varchar(30);
  nr_seq_forma_org_w     bigint := 0;
  nr_seq_grupo_w         bigint := 0;
  nr_seq_subgrupo_w      bigint := 0;
  cd_usuario_convenio_w  varchar(30);
  cd_doenca_atend_w      varchar(10);
  cd_empresa_conv_w      bigint;
  cd_setor_atendimento_w bigint;
  qt_minima_w            double precision;
  qt_maxima_w            double precision;
  qt_proc_w              double precision;
  cd_setor_paciente_w    bigint;
  ie_cobertura_w         varchar(1);
  nr_seq_cobertura_w     bigint;
  nr_seq_classif_atend_w bigint;

  cd_edicao_ajuste_w        integer;
  nr_seq_regra_preco_w      bigint;
  ie_glosa_w                varchar(3) := null;
  cd_perfil_w               integer := obter_perfil_ativo;
  cd_edicao_amb_w		integer 	:= 0;
  ie_prioridade_edicao_w	varchar(01);
  ie_tipo_convenio_w	smallint;
  vl_ch_honorarios_w	double precision	:= 0;
  vl_ch_custo_oper_w	double precision	:= 0;
  vl_m2_filme_w		double precision	:= 0;
  dt_inicio_vigencia_w	timestamp;
  tx_ajuste_geral_w		double precision	:= 0;
  nr_seq_cbhpm_edicao_w	bigint;

  nr_seq_classif_proc_int_w bigint;
  nr_seq_origem_w           convenio_origem_usuario.nr_sequencia%type;

  pr_glosa_w                   double precision;
  vl_glosa_w                   double precision;
  ie_regra_arredondamento_tx_w varchar(1) := 'N';
  ie_tipo_rounded_w            varchar(1);
  ie_regra_arred_ipe_w         varchar(1) := 'N';
  qt_idade_w                   regra_convenio_plano.qt_idade_max%type;
  nr_seq_classif_medico_w      atendimento_paciente.nr_seq_classif_medico%type;
  cd_medico_executor_w          regra_Convenio_Plano.cd_medico_executor%type;

  c01 CURSOR FOR
    SELECT /*+ index(REGRA_CONVENIO_PLANO REGCOPL_CATCONV_FK_I) */           nr_sequencia,
           ie_regra,
           ie_valor,
           coalesce(qt_ponto_min, 0),
           coalesce(qt_ponto_max, 0),
           coalesce(ie_regra_valor, 'FF'),
           coalesce(qt_minimo, 0),
           coalesce(qt_maximo, 999),
           coalesce(cd_medico_executor,cd_medico_p)
      from regra_convenio_plano
     where cd_convenio = cd_convenio_p
       and coalesce(cd_plano, coalesce(cd_plano_w, 0)) = coalesce(cd_plano_w, 0)
       and coalesce(nr_seq_proc_interno, coalesce(nr_seq_proc_interno_p, 0)) = coalesce(nr_seq_proc_interno_p, 0)
       and coalesce(cd_procedimento, coalesce(cd_procedimento_p, 0)) = coalesce(cd_procedimento_p, 0)
       and coalesce(cd_area_procedimento, cd_area_w) = cd_area_w
       and coalesce(cd_especialidade_proc, cd_especialidade_w) = cd_especialidade_w
       and coalesce(cd_grupo_proc, cd_grupo_w) = cd_grupo_w
       and coalesce(nr_seq_forma_org, nr_seq_forma_org_w) = nr_seq_forma_org_w
       and coalesce(nr_seq_subgrupo, nr_seq_subgrupo_w) = nr_seq_subgrupo_w
       and coalesce(nr_seq_grupo, nr_seq_grupo_w) = nr_seq_grupo_w
       and coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_w, 0)) = coalesce(ie_tipo_atendimento_w, 0)
       and coalesce(cd_tipo_acomodacao, coalesce(cd_tipo_acomodacao_w, 0)) = coalesce(cd_tipo_acomodacao_w, 0)
       and coalesce(cd_setor_atendimento, coalesce(cd_setor_atendimento_p, coalesce(cd_setor_atendimento_w, 0))) =
           coalesce(cd_setor_atendimento_p, coalesce(cd_setor_atendimento_w, 0))
       and coalesce(nr_seq_exame, coalesce(nr_seq_exame_p, 0)) = coalesce(nr_seq_exame_p, 0)
       and coalesce(cd_classif_setor, cd_classif_setor_w) = cd_classif_setor_w
       and coalesce(ie_carater_inter_sus, ie_carater_inter_sus_w) = ie_carater_inter_sus_w
       and coalesce(ie_clinica, ie_clinica_w) = ie_clinica_w
       and (coalesce(dt_procedimento_p, clock_timestamp()) between coalesce(dt_inicio_vigencia, to_date('01/01/1900', 'dd/mm/yyyy')) and
           coalesce(pkg_date_utils.end_of(dt_fim_vigencia, 'DAY', 0), to_date('31/12/2099', 'dd/mm/yyyy')))
       and coalesce(cd_categoria, coalesce(cd_categoria_p, '0')) = coalesce(cd_categoria_p, '0')
       and coalesce(obter_se_carteira_mascara(ds_mascara_carteira, cd_usuario_convenio_w), 'S') = 'S'
       and (cd_estabelecimento = coalesce(cd_estabelecimento_p, cd_estabelecimento) or coalesce(cd_estabelecimento::text, '') = '')
       and coalesce(cd_empresa, coalesce(obter_empresa_estab(wheb_usuario_pck.get_cd_estabelecimento),0)) = coalesce(obter_empresa_estab(wheb_usuario_pck.get_cd_estabelecimento),0)
       and coalesce(cd_doenca, cd_doenca_atend_w) = cd_doenca_atend_w
       and coalesce(cd_setor_entrega_prescr, coalesce(cd_setor_entrega_prescr_p, 0)) = coalesce(cd_setor_entrega_prescr_p, 0)
       and coalesce(cd_setor_atual, coalesce(cd_setor_paciente_w, 0)) = coalesce(cd_setor_paciente_w, 0)
       and coalesce(cd_empresa_conv, coalesce(cd_empresa_p, coalesce(cd_empresa_conv_w, 0))) =
           coalesce(cd_empresa_p, coalesce(cd_empresa_conv_w, 0))
       and coalesce(nr_seq_classif_atend, coalesce(nr_seq_classif_atend_w, 0)) = coalesce(nr_seq_classif_atend_w, 0)
       and	coalesce(cd_medico_executor, coalesce(cd_medico_p,'X'))			= coalesce(cd_medico_p,'X')
       and coalesce(nr_seq_cobertura, coalesce(nr_seq_cobertura_p, 0)) = coalesce(nr_seq_cobertura_p, 0)
       and coalesce(cd_perfil, coalesce(cd_perfil_w, 0)) = coalesce(cd_perfil_w, 0)
       and	coalesce(obter_se_espec_medico_plano(cd_especialidade_medic,cd_medico_p),'S') = 'S'
       and coalesce(ie_situacao, 'A') = 'A'
       and	coalesce(cd_edicao_amb,coalesce(cd_edicao_amb_w,0))			= coalesce(cd_edicao_amb_w,0)
       and coalesce(nr_seq_classif_proc_int, coalesce(nr_seq_classif_proc_int_w, 0)) = coalesce(nr_seq_classif_proc_int_w, 0)
       and coalesce(cd_pessoa_fisica, coalesce(cd_paciente_p, '0')) = coalesce(cd_paciente_p, '0')
       and	coalesce(nr_seq_cbhpm_edicao,coalesce(nr_seq_cbhpm_edicao_w,0))			= coalesce(nr_seq_cbhpm_edicao_w,0)
       and coalesce(qt_idade_w, 0) between coalesce(qt_idade_min, 0) and coalesce(qt_idade_max, 999)
     order by CASE WHEN ie_prioridade='S' THEN  coalesce(cd_plano, 0)  ELSE 0 END , /* OS 107055 - 17/09/2008 */
              coalesce(ds_mascara_carteira, 'X'),
              coalesce(cd_pessoa_fisica, '0'),
              coalesce(nr_seq_exame_p, 0),
              coalesce(nr_seq_proc_interno, 0),
              coalesce(cd_procedimento, 0),
              coalesce(cd_grupo_proc, 0),
              coalesce(cd_especialidade_proc, 0),
              coalesce(cd_area_procedimento, 0),
	      coalesce(cd_categoria,'0'),
              coalesce(ie_tipo_atendimento, 0),
              coalesce(ie_carater_inter_sus, 'X'),
              coalesce(ie_clinica, 0),
              coalesce(cd_empresa_conv, 0),
              coalesce(cd_medico_executor, 'X'),
              coalesce(cd_edicao_amb, 0),
              coalesce(cd_perfil, 0),
              coalesce(ie_carater_cirurgia, 'X'),
              coalesce(nr_seq_cbhpm_edicao, 0),
	      coalesce(nr_seq_classif_proc_int,0),
              coalesce(qt_idade_min, 0),
              coalesce(qt_idade_max, 999);


BEGIN

  ds_erro_w       := '';
  ds_erro_autor_w := '';
  ie_regra_w      := 0;
  cd_plano_w      := '';
  ie_cobertura_w  := 'N';

  select coalesce(max(cd_classif_setor), 'X')
    into STRICT cd_classif_setor_w
    from setor_atendimento
   where cd_setor_atendimento = cd_setor_atendimento_p;

  select coalesce(max(cd_estabelecimento), 0),
         coalesce(max(ie_tipo_atendimento), ie_tipo_atendimento_p),
         coalesce(max(ie_carater_inter_sus), 'X'),
         coalesce(max(ie_clinica), 0),
         coalesce(max(obter_cid_atendimento(nr_atendimento, 'P')), 'X'),
         coalesce(max(nr_seq_classificacao), 0),
         coalesce((max(obter_dados_categ_conv(nr_atendimento, 'OC')))::numeric , 0),
         coalesce(max(obter_idade_pf(cd_pessoa_fisica, clock_timestamp(), 'A')), 0),
         coalesce(max(nr_seq_classif_medico), 0)
    into STRICT cd_estabelecimento_w,
         ie_tipo_atendimento_w,
         ie_carater_inter_sus_w,
         ie_clinica_w,
         cd_doenca_atend_w,
         nr_seq_classif_atend_w,
         nr_seq_origem_w,
         qt_idade_w,
         nr_seq_classif_medico_w
    from atendimento_paciente
   where nr_atendimento = nr_atendimento_p;

  if (qt_idade_w = 0) then
    --buscar a idade da pck para mehorar a performace
    qt_idade_w := coalesce(ageint_sugerir_horarios_pck.get_idade_pac(cd_paciente_p), 0);
    if qt_idade_w = 0 then
      select max(coalesce(obter_idade_pf(cd_paciente_p, clock_timestamp(), 'A'), 0)) into STRICT qt_idade_w;
    end if;
  end if;

  /* Obter Plano Caso esteja Null */

  if (cd_plano_p IS NOT NULL AND cd_plano_p::text <> '') then
    cd_plano_w := cd_plano_p;
  else
    select max(cd_plano_convenio)
      into STRICT cd_plano_w
      from atend_categoria_convenio
     where nr_atendimento = nr_atendimento_p
       and cd_convenio = cd_convenio_p;
  end if;

  /* Obter o tipo de acomodacao */

  select max(cd_tipo_acomodacao),
         max(cd_categoria),
         max(cd_usuario_convenio),
         max(cd_empresa)
    into STRICT cd_tipo_acomodacao_w,
         cd_categoria_w,
         cd_usuario_convenio_w,
         cd_empresa_conv_w
    from atend_categoria_convenio
   where nr_atendimento = nr_atendimento_p
     and nr_seq_interno = obter_atecaco_atendimento(nr_atendimento);

  if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
    select max(a.cd_setor_atendimento)
      into STRICT cd_setor_paciente_w
      from atend_paciente_unidade a
     where a.nr_seq_interno =
           (SELECT max(x.nr_seq_interno) from atend_paciente_unidade x where x.nr_atendimento = nr_atendimento_p);
  end if;

  if (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (coalesce(nr_atendimento_p::text, '') = '') then

    select coalesce(max(b.cd_estabelecimento), 0),
           coalesce(max(a.ie_tipo_atendimento), ie_tipo_atendimento_p),
           max(a.cd_tipo_acomodacao),
           max(a.cd_categoria),
           max(a.cd_usuario_convenio),
           max(a.cd_empresa_ref),
           coalesce(cd_plano_p, max(a.cd_plano)),
           coalesce(cd_setor_atendimento_p, coalesce(max(a.cd_setor_atendimento), max(b.cd_setor_exclusivo)))
      into STRICT cd_estabelecimento_w,
           ie_tipo_atendimento_w,
           cd_tipo_acomodacao_w,
           cd_categoria_w,
           cd_usuario_convenio_w,
           cd_empresa_conv_w,
           cd_plano_w,
           cd_setor_atendimento_w
      from agenda          b,
           agenda_paciente a
     where a.cd_agenda = b.cd_agenda
       and a.nr_sequencia = nr_seq_agenda_p;
  end if;

  cd_categoria_w := coalesce(cd_categoria_p, cd_categoria_w);

  /* Obter Estrutura do procedimento */

  begin
    select cd_grupo_proc,
           cd_especialidade,
           cd_area_procedimento,
           coalesce(substr(sus_obter_seq_estrut_proc(sus_obter_estrut_proc(cd_procedimento_p, ie_origem_proced_p, 'C', 'G'),
                                                'G'),
                      1,
                      10),
               0),
           coalesce(substr(sus_obter_seq_estrut_proc(sus_obter_estrut_proc(cd_procedimento_p, ie_origem_proced_p, 'C', 'F'),
                                                'F'),
                      1,
                      10),
               0),
           coalesce(substr(sus_obter_seq_estrut_proc(sus_obter_estrut_proc(cd_procedimento_p, ie_origem_proced_p, 'C', 'S'),
                                                'S'),
                      1,
                      10),
               0)
      into STRICT cd_grupo_w,
           cd_especialidade_w,
           cd_area_w,
           nr_seq_grupo_w,
           nr_seq_forma_org_w,
           nr_seq_subgrupo_w
      from estrutura_procedimento_v
     where cd_procedimento = coalesce(cd_procedimento_p, 0)
       and ie_origem_proced = coalesce(ie_origem_proced_p, 0)
       and (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '');
  exception
    when others then
      begin
        cd_grupo_w         := 0;
        cd_especialidade_w := 0;
        cd_area_w          := 0;
      end;
  end;

  qt_proc_w := 0;

select	coalesce(max(ie_prioridade_edicao_amb), 'N')
into STRICT	ie_prioridade_edicao_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_p;

begin
	ie_tipo_convenio_w := coalesce(obter_tipo_convenio(cd_convenio_p),0);
exception
when others then
	ie_tipo_convenio_w := 0;
end;


if (ie_tipo_convenio_w = 3) then
	cd_edicao_amb_w 	:= 0;
elsif (ie_prioridade_edicao_w	= 'N' ) then
	begin
	select	cd_edicao_amb,
		nr_seq_cbhpm_edicao
	into STRICT	cd_edicao_amb_w,
		nr_seq_cbhpm_edicao_w
	from	convenio_amb
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	cd_convenio		= cd_convenio_p
	and	cd_categoria		= cd_categoria_p
	and 	coalesce(ie_situacao,'A')	= 'A'
	and	dt_inicio_vigencia	=
		(SELECT max(dt_inicio_vigencia)
			from		convenio_amb a
			where		a.cd_estabelecimento	= cd_estabelecimento_p
			and		a.cd_convenio		= cd_convenio_p
			and		a.cd_categoria		= cd_categoria_p
		      and 		coalesce(ie_situacao,'A')	= 'A'
			and		a.dt_inicio_vigencia 	<= dt_procedimento_p);
	exception
		when others then
     			cd_edicao_amb_w 	:= 0;
			nr_seq_cbhpm_edicao_w	:= 0;
	end;
else
	begin
	SELECT * FROM obter_edicao_proc_conv(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, dt_procedimento_p, cd_procedimento_p, cd_edicao_amb_w, vl_ch_honorarios_w, vl_ch_custo_oper_w, vl_m2_filme_w, dt_inicio_vigencia_w, tx_ajuste_geral_w, nr_seq_cbhpm_edicao_w) INTO STRICT cd_edicao_amb_w, vl_ch_honorarios_w, vl_ch_custo_oper_w, vl_m2_filme_w, dt_inicio_vigencia_w, tx_ajuste_geral_w, nr_seq_cbhpm_edicao_w;
	exception
	when others then
		cd_edicao_amb_w := 0;
	end;
end if;

  if (nr_seq_proc_interno_p IS NOT NULL AND nr_seq_proc_interno_p::text <> '') then
    begin
      select nr_seq_classif
        into STRICT nr_seq_classif_proc_int_w
        from proc_interno
       where nr_sequencia = nr_seq_proc_interno_p;
    exception
      when others then
        nr_seq_classif_proc_int_w := null;
    end;
  end if;

  open c01;
  loop
    fetch c01
      into nr_seq_regra_w, ie_regra_w, ie_valor_w, qt_ponto_min_w, qt_ponto_max_w, ie_regra_valor_w, qt_minima_w, qt_maxima_w, cd_medico_executor_w;
    EXIT WHEN NOT FOUND; /* apply on c01 */

    ie_regra_w := ie_regra_w;
    -- Edgar 02/11/2005, OS 23134, tratamento de consistencia de valor
    if (ie_valor_w <> 'N') then
      -- se consiste valor
      if (ie_origem_proced_p = 1) then
        -- se e amb
        if (ie_valor_w = 'PP') then

          if (cd_estabelecimento_w = 0) then
            cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
          end if;

          vl_procedimento_w := coalesce(obter_preco_procedimento(cd_estabelecimento_w,
                                                            cd_convenio_p,
                                                            cd_categoria_w,
                                                            clock_timestamp(),
                                                            cd_procedimento_p,
                                                            ie_origem_proced_p,
                                                            cd_tipo_acomodacao_w,
                                                            ie_tipo_atendimento_w,
                                                            cd_setor_atendimento_p,
                                                            null,
                                                            null,
                                                            null,
                                                            cd_plano_p,
                                                            null,
                                                            null,
                                                            ie_valor_w),
                                   0);

          if (ie_regra_valor_w = 'FF' AND vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) or
             (ie_regra_valor_w = 'DF' AND not vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) then
            ie_regra_w := null;
          end if;
        elsif (ie_valor_w = 'P') then
          if (cd_estabelecimento_w = 0) then
            cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
          end if;
          vl_procedimento_w := coalesce(obter_preco_procedimento(cd_estabelecimento_w,
                                                            cd_convenio_p,
                                                            cd_categoria_w,
                                                            clock_timestamp(),
                                                            cd_procedimento_p,
                                                            ie_origem_proced_p,
                                                            cd_tipo_acomodacao_w,
                                                            ie_tipo_atendimento_w,
                                                            cd_setor_atendimento_p,
                                                            null,
                                                            null,
                                                            null,
                                                            cd_plano_p,
                                                            null,
                                                            null,
                                                            ie_valor_w),
                                   0);

          if (ie_regra_valor_w = 'FF' AND vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) or
             (ie_regra_valor_w = 'DF' AND not vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) then
            ie_regra_w := null;
          end if;
        else
          /*
          -- se nao estiver dentro da faixa de valores da regra, entao nao considerar a regra
          if  not(obter_preco_amb(cd_procedimento_p,
                cd_convenio_p,
                cd_categoria_w,
                cd_estabelecimento_w,
                ie_valor_w)     between qt_ponto_min_w and qt_ponto_max_w) then
            ie_regra_w    := null;
          end if;
          Rafael em 13/04/2006 OS32586. Substitui a rotina acima, pela rotina abaixo;
          */
          -- se estiver dentro da faixa de valores da regra, entao nao considerar a regra
          vl_procedimento_w := obter_preco_amb(cd_procedimento_p,
                                               cd_convenio_p,
                                               cd_categoria_w,
                                               cd_estabelecimento_w,
                                               ie_valor_w);

          if (ie_regra_valor_w = 'FF' AND vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) or
             (ie_regra_valor_w = 'DF' AND not vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) then
            ie_regra_w := null;
          end if;
        end if;
      else
        /* Francisco - 10/08/07 - OS 61240 - Obter precos para CBHPM */

        if (ie_valor_w = 'CO') then
          ie_valor_w := 'C';
        end if;

        vl_procedimento_w := obter_preco_procedimento(cd_estabelecimento_w,
                                                      cd_convenio_p,
                                                      cd_categoria_w,
                                                      clock_timestamp(),
                                                      cd_procedimento_p,
                                                      ie_origem_proced_p,
                                                      cd_tipo_acomodacao_w,
                                                      ie_tipo_atendimento_w,
                                                      cd_setor_atendimento_p,
                                                      null,
                                                      null,
                                                      null,
                                                      cd_plano_p,
                                                      null,
                                                      null,
                                                      ie_valor_w);

        if (ie_regra_valor_w = 'FF' AND vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) or
           (ie_regra_valor_w = 'DF' AND not vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) then
          ie_regra_w := null;
        end if;

      end if;

      if (ie_origem_proced_p = 4) then
        --Origem Proprio
        if (ie_valor_w = 'PP') then
          vl_procedimento_w := coalesce(obter_preco_procedimento(cd_estabelecimento_w,
                                                            cd_convenio_p,
                                                            cd_categoria_w,
                                                            clock_timestamp(),
                                                            cd_procedimento_p,
                                                            ie_origem_proced_p,
                                                            cd_tipo_acomodacao_w,
                                                            ie_tipo_atendimento_w,
                                                            cd_setor_atendimento_p,
                                                            null,
                                                            null,
                                                            null,
                                                            cd_plano_p,
                                                            null,
                                                            null,
                                                            ie_valor_w),
                                   0);

          if (ie_regra_valor_w = 'FF' AND vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) or
             (ie_regra_valor_w = 'DF' AND not vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) then
            ie_regra_w := null;
          end if;
        else
          vl_procedimento_w := coalesce(obter_preco_procedimento(cd_estabelecimento_w,
                                                            cd_convenio_p,
                                                            cd_categoria_w,
                                                            clock_timestamp(),
                                                            cd_procedimento_p,
                                                            ie_origem_proced_p,
                                                            cd_tipo_acomodacao_w,
                                                            ie_tipo_atendimento_w,
                                                            cd_setor_atendimento_p,
                                                            null,
                                                            null,
                                                            null,
                                                            cd_plano_p,
                                                            null,
                                                            null,
                                                            ie_valor_w),
                                   0);

          if (ie_regra_valor_w = 'FF' AND vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) or
             (ie_regra_valor_w = 'DF' AND not vl_procedimento_w between qt_ponto_min_w and qt_ponto_max_w) then
            ie_regra_w := null;
          end if;
        end if;
      end if;

    end if;

  end loop;
  close c01;

  SELECT * FROM obter_regra_ajuste_proc(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, cd_procedimento_p, ie_origem_proced_p, 'N', dt_procedimento_p, cd_tipo_acomodacao_w, ie_tipo_atendimento_p, cd_setor_atendimento_p, cd_medico_executor_w, 0, 0, null, nr_seq_proc_interno_p, cd_usuario_convenio_w, cd_plano_p, ie_clinica_w, cd_empresa_p, ie_sexo_p, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ie_glosa_w, ds_irrelevante_w, ds_irrelevante_w, cd_edicao_ajuste_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, pr_glosa_w, vl_glosa_w, ds_irrelevante_w, null, 0, ds_irrelevante_w, cd_convenio_glosa_p, cd_categoria_glosa_p, nr_seq_regra_preco_w, null, null, null, null, null, null, null, null, ds_irrelevante_w, null, null, nr_seq_classif_atend_w, null, ie_carater_inter_sus_w, null, null, nr_seq_origem_w, null, nr_seq_classif_medico_w) INTO STRICT ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ie_glosa_w, ds_irrelevante_w, ds_irrelevante_w, cd_edicao_ajuste_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, pr_glosa_w, vl_glosa_w, ds_irrelevante_w, ds_irrelevante_w, cd_convenio_glosa_p, cd_categoria_glosa_p, nr_seq_regra_preco_w, ds_irrelevante_w;

  if (ie_glosa_w = 'P') then
    vl_glosa_w := vl_procedimento_w * pr_glosa_w / 100;

    /* ROTINA DE ARREDONDAMENTO, USADO PELO CONVeNIO IPE   --->>    INICIO  <<----- */

    begin
      select coalesce(max(ie_regra_arredondamento_tx), 'N')
        into STRICT ie_regra_arredondamento_tx_w
        from parametro_faturamento
       where cd_estabelecimento = cd_estabelecimento_w;
    exception
      when others then
        ie_regra_arredondamento_tx_w := 'N';
    end;

    if (ie_regra_arredondamento_tx_w = 'S') then

      select max(ie_arredondamento)
        into STRICT ie_tipo_rounded_w
        from convenio_estabelecimento
       where cd_convenio = cd_convenio_p
         and cd_estabelecimento = cd_estabelecimento_w;

      if (ie_tipo_rounded_w = 'R') then

        select obter_regra_arredondamento(cd_convenio_p,
                                          cd_categoria_p,
                                          cd_procedimento_p,
                                          ie_origem_proced_p,
                                          cd_estabelecimento_w,
                                          coalesce(dt_procedimento_p, clock_timestamp()),
                                          'P',
                                          1)
          into STRICT ie_tipo_rounded_w
;

        ie_regra_arred_ipe_w := 'S';

      end if;

      if (ie_tipo_rounded_w IS NOT NULL AND ie_tipo_rounded_w::text <> '') and (ie_regra_arred_ipe_w = 'S') then

        vl_glosa_w := arredondamento(vl_glosa_w, 2, ie_tipo_rounded_w);

      else
        ie_regra_arred_ipe_w := 'N';
      end if;

    end if;
  end if;

  /* Bloqueio Atendimento (Quando a Chamada e no Atendimento: Proc = null) */

  if (ie_regra_w = 1) then
    ds_erro_w := ds_erro_w || '404 ';
    /* Bloqueio Execucao */

  elsif (ie_regra_w = 2) then
    ds_erro_w := ds_erro_w || '405 ';
    /* Libera com Autorizacao */

  elsif (ie_regra_w in (3, 6, 7)) and (coalesce(cd_procedimento_p, 0) <> 0) then
    begin
      ds_erro_autor_w := ageint_consiste_autor_proc(nr_atendimento_p, cd_convenio_p, dt_procedimento_p, cd_procedimento_p, ie_origem_proced_p, qt_procedimento_p, cd_autorizacao_p, ds_erro_autor_w, nr_seq_agenda_p);
      ds_erro_w := ds_erro_w || ds_erro_autor_w;

      /*lhalves OS 224696 em 08/07/2010 - Consistir quantidade procedimento*/

      if (qt_minima_w > 0) or (qt_maxima_w < 999) then

        select coalesce(sum(qt_procedimento), 0)
          into STRICT qt_proc_w
          from procedimento_paciente
         where nr_atendimento = nr_atendimento_p
           and cd_convenio = cd_convenio_p
           and cd_procedimento = cd_procedimento_p
           and ie_origem_proced = ie_origem_proced_p
           and coalesce(cd_motivo_exc_conta::text, '') = '';

        if (qt_proc_w < qt_minima_w) or (qt_proc_w > qt_maxima_w) then
          ie_regra_w := null;
          ds_erro_w  := null;
        end if;
      end if;

      if (ie_glosa_w = 'T') then
        ds_erro_w := '';
      end if;

      if (coalesce(ds_erro_w::text, '') = '') then
        -- Quando nao houver erro nao deve retornar regra
        ie_regra_w := null;
      end if;

    end;
  end if;

  if (ie_regra_w IS NOT NULL AND ie_regra_w::text <> '') or (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then

    if (ie_glosa_w = 'T') then
      ds_erro_w  := null;
      ie_regra_w := null;
    end if;
  end if;

  cd_edicao_ajuste_p := cd_edicao_ajuste_w;
  ie_regra_p         := ie_regra_w;
  nr_seq_regra_p     := nr_seq_regra_w;
  ds_erro_p          := ds_erro_w;
  ie_glosa_p         := ie_glosa_w;
  pr_glosa_p         := pr_glosa_w;
  vl_glosa_p         := vl_glosa_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_consiste_plano_conv (nr_atendimento_p bigint, cd_convenio_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_procedimento_p timestamp, qt_procedimento_p bigint, ie_tipo_atendimento_p bigint, cd_plano_p text, cd_autorizacao_p text, ds_erro_p INOUT text, cd_setor_atendimento_p bigint, nr_seq_exame_p bigint, ie_regra_p INOUT text, nr_seq_agenda_p bigint, nr_seq_regra_p INOUT bigint, nr_seq_proc_interno_p bigint, cd_categoria_p text, cd_estabelecimento_p bigint, cd_setor_entrega_prescr_p bigint, ie_sexo_p text, ie_glosa_p INOUT text, cd_edicao_ajuste_p INOUT bigint, nr_seq_cobertura_p bigint, cd_convenio_glosa_p INOUT bigint, cd_categoria_glosa_p INOUT text, cd_paciente_p text, cd_empresa_p bigint default null, pr_glosa_p INOUT bigint DEFAULT NULL, vl_glosa_p INOUT bigint DEFAULT NULL, cd_medico_p text default null) FROM PUBLIC;

