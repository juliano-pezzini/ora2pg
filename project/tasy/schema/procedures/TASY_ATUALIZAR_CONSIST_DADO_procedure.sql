-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tasy_atualizar_consist_dado (nm_owner_origem_p text, ds_inconsistencias_p INOUT text) AS $body$
DECLARE


-- SEMPRE QUE ALTERAR ESTE OBJETO, ALTERAR O OBJETO tasy_atualizar_consist_Dado2 QUE Â¿ UM FUNCTION COM O MESMO OBJETIVO DESTE
nm_tabela_w	varchar(50);
qt_rows_tabela	bigint;
qt_rows_tabela_import	bigint;
ds_retorno	varchar(255);
ds_erro_w	varchar(2000);
Nr_seq_log_w	bigint;

C01 CURSOR FOR
	SELECT table_name
	from user_tables ut, tabela_sistema ts
	where ts.nm_tabela = ut.table_name
	and ts.ie_exportar = 'S'
	and upper(ut.table_name) in ('INDICE','INDICE_ATRIBUTO','INTEGRIDADE_ATRIBUTO','INTEGRIDADE_REFERENCIAL','OBJETO_SISTEMA_PARAM','DIC_OBJETO','DIC_OBJETO_FILTRO','FUNCAO_PARAMETRO','XML_PROJETO','XML_ATRIBUTO','XML_ELEMENTO');


BEGIN
ds_retorno	:= '';

select  max(nr_sequencia)
into STRICT	Nr_seq_log_w
from 	log_atualizacao;

open C01;
loop
fetch C01 into
	nm_tabela_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
		begin
			EXECUTE 'select (select count(1) from ' || nm_tabela_w || '), (select count(1) from ' || nm_owner_origem_p || '.' || nm_tabela_w || ') from dual'
			into STRICT qt_rows_tabela, qt_rows_tabela_import;

			if	qt_rows_tabela < qt_rows_tabela_import then

				if nm_tabela_W = 'INDICE' then
					begin
					tasy_copiar_tabela(nm_owner_origem_p,'INDICE','N','S','where not exists (select 1 from indice b where a.nm_tabela = b.nm_tabela and a.nm_indice = b.nm_indice)');
					Tasy_Atualizar_tabela(nm_owner_origem_p,'indice','indice','where a.nm_tabela = b.nm_tabela and a.nm_indice = b.nm_indice and a.dt_Atualizacao between b.dt_Atualizacao +1/86400 and sysdate', 'S', 'S', 'S');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela INDICE - Tasy_Copiar_Tabela', ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'INDICE_ATRIBUTO' then
					begin
					tasy_copiar_tabela(nm_owner_origem_p,'INDICE_ATRIBUTO','N','S','where not exists (select 1 from indice_atributo b where a.nm_tabela = b.nm_tabela and a.nm_indice = b.nm_indice and a.nr_sequencia = b.nr_sequencia)');
					Tasy_Atualizar_tabela(nm_owner_origem_p,'indice_atributo','indice_atributo','WHERE a.nm_tabela = b.nm_tabela and a.nm_indice = b.nm_indice and a.nr_sequencia = b.nr_sequencia and a.dt_Atualizacao between b.dt_Atualizacao +1/86400 and sysdate', 'S', 'S', 'S');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela INDICE_ATRIBUTO - Tasy_Copiar_Tabela', ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'INTEGRIDADE_ATRIBUTO' then
					begin
					tasy_copiar_tabela(nm_owner_origem_p,'INTEGRIDADE_ATRIBUTO','N','S','where not exists (select 1 from integridade_atributo b where a.nm_tabela = b.nm_tabela and a.nm_integridade_referencial = b.nm_integridade_referencial and a.nm_atributo = b.nm_atributo)');
					Tasy_Atualizar_tabela(nm_owner_origem_p,'integridade_atributo','integridade_atributo','Where a.nm_tabela = b.nm_tabela and a.nm_integridade_referencial = b.nm_integridade_referencial and a.nm_atributo = b.nm_atributo and a.dt_Atualizacao between b.dt_atualizacao  +1/86400 and sysdate', 'S', 'S', 'S');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela INTEGRIDADE_ATRIBUTO - Tasy_Copiar_Tabela', ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'INTEGRIDADE_REFERENCIAL' then
					begin
					tasy_copiar_tabela(nm_owner_origem_p,'INTEGRIDADE_REFERENCIAL','N','S','where not exists (select 1 from integridade_referencial b where a.nm_tabela = b.nm_tabela and a.nm_integridade_referencial = b.nm_integridade_referencial)');
					Tasy_Atualizar_tabela(nm_owner_origem_p,'integridade_referencial','integridade_referencial','where a.nm_tabela = b.nm_tabela and a.nm_integridade_referencial = b.nm_integridade_referencial and a.dt_atualizacao between b.dt_atualizacao +1/86400 and sysdate', 'S', 'S', 'S');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela INTEGRIDADE_REFERENCIAL - Tasy_Copiar_Tabela', ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'OBJETO_SISTEMA_PARAM' then
					begin
					Tasy_Atualizar_Tabela(nm_owner_origem_p,'OBJETO_SISTEMA_PARAM','OBJETO_SISTEMA_PARAM',' where a.dt_atualizacao > (select b.dt_atualizacao from OBJETO_SISTEMA_PARAM b where a.nr_sequencia = b.nr_sequencia)');
					Tasy_Copiar_tabela(nm_owner_origem_p,'OBJETO_SISTEMA_PARAM','N','S',' where not exists (select 1 from OBJETO_SISTEMA_PARAM b '||' where a.nr_sequencia = b.nr_sequencia)');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela OBJETO_SISTEMA_PARAM - Tasy_Copiar_Tabela', ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'DIC_OBJETO' then
					begin
					Tasy_Atualizar_Tabela(nm_owner_origem_p, 'DIC_OBJETO', 'DIC_OBJETO', 'where a.dt_atualizacao > (select b.dt_atualizacao from DIC_OBJETO b where a.nr_sequencia = b.nr_sequencia)');
					Tasy_Copiar_Tabela(nm_owner_origem_p, 'DIC_OBJETO', 'N', 'S', 'where not exists (select 1 from DIC_OBJETO b where a.nr_sequencia = b.nr_sequencia)');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela DIC_OBJETOS - Tasy_Copiar_Tabela',ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'DIC_OBJETO_FILTRO' then
					begin
					Tasy_Atualizar_Tabela(nm_owner_origem_p, 'DIC_OBJETO_FILTRO', 'DIC_OBJETO_FILTRO', 'where a.dt_atualizacao > (select b.dt_atualizacao from DIC_OBJETO_FILTRO b where a.nr_sequencia = b.nr_sequencia)');
					Tasy_Copiar_Tabela(nm_owner_origem_p, 'DIC_OBJETO_FILTRO', 'N', 'S', 'where not exists (select 1 from DIC_OBJETO_FILTRO b where a.nr_sequencia = b.nr_sequencia)');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela DIC_OBJETO_FILTRO - Tasy_Copiar_Tabela',ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'FUNCAO_PARAMETRO' then
					begin
					Tasy_Atualizar_Tabela(nm_owner_origem_p, 'FUNCAO_PARAMETRO', 'FUNCAO_PARAMETRO', 'where a.dt_atualizacao > (select b.dt_atualizacao from FUNCAO_PARAMETRO b where a.cd_funcao = b.cd_funcao and a.nr_sequencia = b.nr_sequencia)','N');
					Tasy_Copiar_Tabela(nm_owner_origem_p, 'FUNCAO_PARAMETRO', 'N', 'S', 'where not exists (select 1 from FUNCAO_PARAMETRO b where a.cd_funcao = b.cd_funcao and a.nr_sequencia = b.nr_sequencia)');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela FUNCAO_PARAMETRO - Tasy_Copiar_Tabela',ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'XML_PROJETO' then
					begin
					Tasy_Atualizar_Tabela(nm_owner_origem_p,'XML_PROJETO','XML_PROJETO',' where a.dt_atualizacao > (select b.dt_atualizacao from xml_projeto b where a.nr_sequencia = b.nr_sequencia)');
					Tasy_Copiar_tabela(nm_owner_origem_p,'XML_PROJETO','N','S',' where not exists (select 1 from xml_projeto b '||' where a.nr_sequencia = b.nr_sequencia)');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela XML_PROJETO - Tasy_Copiar_Tabela', ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'XML_ATRIBUTO' then
					begin
					Tasy_Atualizar_Tabela(nm_owner_origem_p,'XML_ATRIBUTO','XML_ATRIBUTO',' where a.dt_atualizacao > (select b.dt_atualizacao from xml_atributo b where a.nr_sequencia = b.nr_sequencia)');
					Tasy_Copiar_tabela(nm_owner_origem_p,'XML_ATRIBUTO','N','S',' where not exists (select 1 from xml_atributo b '||' where a.nr_sequencia = b.nr_sequencia)');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela XML_ATRIBUTO - Tasy_Copiar_Tabela', ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				elsif nm_tabela_W = 'XML_ELEMENTO' then
					begin
					Tasy_Atualizar_Tabela(nm_owner_origem_p,'XML_ELEMENTO','XML_ELEMENTO',' where a.dt_atualizacao > (select b.dt_atualizacao from xml_elemento b where a.nr_sequencia = b.nr_sequencia)');
					Tasy_Copiar_tabela(nm_owner_origem_p,'XML_ELEMENTO','N','S',' where not exists (select 1 from xml_elemento b '||' where a.nr_sequencia = b.nr_sequencia)');
					exception
						when others then
							ds_erro_w := substr(SQLERRM,1,2000);
							insert into log_atualizacao_erro values (nextval('log_atualizacao_erro_seq'), 'Erro na proc TASY_ATUALIZAR_CONSIST_DADO na tabela XML_ELEMENTO - Tasy_Copiar_Tabela', ds_erro_w,Nr_seq_log_w, clock_timestamp(), nm_owner_origem_p);
					end;

				end if;

				EXECUTE 'select (select count(1) from ' || nm_tabela_w || '), (select count(1) from ' || nm_owner_origem_p || '.' || nm_tabela_w || ') from dual'
				into STRICT qt_rows_tabela, qt_rows_tabela_import;
				-- 25 devido deletes feitos incorretamente por nosso desenvolvimento, o que encadeia muitas OSÂ¿s sem necessidade.
				if (qt_rows_tabela + 25) < qt_rows_tabela_import then
					ds_retorno := ds_retorno || nm_tabela_w || ': ' || qt_rows_tabela || ', ' || qt_rows_tabela_import || '.'|| chr(13) || chr(10);
				end if;

			end if;
		exception
			WHEN OTHERS THEN
				null;
		end;
	end;
end loop;

ds_inconsistencias_p := ds_retorno;

close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tasy_atualizar_consist_dado (nm_owner_origem_p text, ds_inconsistencias_p INOUT text) FROM PUBLIC;

