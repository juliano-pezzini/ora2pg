-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_importar_cadastro_sis (nm_usuario_p text, ds_xml_p text) is type regra_conversao is record (nr_seq_old bigint, nr_seq_new bigint) RETURNS varchar AS $body$
DECLARE

	qt_registros_w	bigint;
	ds_sql_w	varchar(2000);
	
BEGIN

	begin
	ds_sql_w := 'select count(1) qt_reg from ' || nm_tabela_p || ' where ' || nm_atributo_p || ' = :ds_valor ';
	EXECUTE ds_sql_w into STRICT qt_registros_w using ds_valor_p;
	exception
	when others then
		qt_registros_w	:=	0;
	end;

	if (coalesce(qt_registros_w,0) = 0) then
		return null;
	else
		return ds_valor_p;
	end if;

	end;

	--#######################################################
	procedure IMPORTAR_CONVERSAO(nr_sequencia_p		number,
			ie_situacao_p		varchar2,
			ds_regra_p		varchar2,
			nr_sequencia_new_p	out number) is

	regra_conv_meio_ext_w	regra_conv_meio_ext%rowtype;
	nr_sequencia_w		number(10);
	i integer;

	begin

	select	max(nr_sequencia)
	into STRICT	nr_sequencia_w
	from	regra_conv_meio_ext
	where	lower(ds_regra) = lower(ds_regra_p);

	if (coalesce(nr_sequencia_w::text, '') = '') then

		select	nextval('regra_conv_meio_ext_seq')
		into STRICT	nr_sequencia_w
		;

		regra_conv_meio_ext_w.nm_usuario		:= nm_usuario_p;
		regra_conv_meio_ext_w.nm_usuario_nrec		:= nm_usuario_p;
		regra_conv_meio_ext_w.dt_atualizacao		:= clock_timestamp();
		regra_conv_meio_ext_w.dt_atualizacao_nrec	:= clock_timestamp();
		regra_conv_meio_ext_w.nr_sequencia		:= nr_sequencia_w;
		regra_conv_meio_ext_w.ie_situacao		:= ie_situacao_p;
		regra_conv_meio_ext_w.ds_regra			:= ds_regra_p;

		insert into regra_conv_meio_ext values (regra_conv_meio_ext_w.*);
	end if;

	--Armazena no vetor, as novas regras criadas.
	i := vet_regra_conv_w.Count+1;
	vet_regra_conv_w[i].nr_seq_old := nr_sequencia_p;
	vet_regra_conv_w[i].nr_seq_new := nr_sequencia_w;

	nr_sequencia_new_p	:= nr_sequencia_w;

	end;
	--#######################################################
	procedure IMPORTAR_CONV_MEIO_EXTERNO(	nr_seq_regra_conv_p	number,
						c02_p	c02_w%type) is
	conversao_meio_externo_w	conversao_meio_externo%rowtype;
	nr_sequencia_w			number(10);
	begin

	begin
	select	*
	into STRICT	conversao_meio_externo_w
	from	conversao_meio_externo
	where	NR_SEQ_REGRA	= nr_seq_regra_conv_p
	and	nm_tabela	= c02_p.nm_tabela
	and	nm_atributo	= c02_p.nm_atributo
	and	cd_interno	= c02_p.cd_interno  LIMIT 1;
	exception
	when others then
		null;
	end;	

	conversao_meio_externo_w.nm_usuario		:= nm_usuario_p;
	conversao_meio_externo_w.dt_atualizacao		:= clock_timestamp();
	conversao_meio_externo_w.CD_CGC			:= c02_p.CD_CGC;
	conversao_meio_externo_w.NM_TABELA		:= c02_p.NM_TABELA;
	conversao_meio_externo_w.NM_ATRIBUTO		:= c02_p.NM_ATRIBUTO;
	conversao_meio_externo_w.CD_INTERNO		:= c02_p.CD_INTERNO;
	conversao_meio_externo_w.CD_EXTERNO		:= c02_p.CD_EXTERNO;
	conversao_meio_externo_w.IE_SISTEMA_EXTERNO	:= c02_p.IE_SISTEMA_EXTERNO;
	conversao_meio_externo_w.NR_SEQ_REGRA		:= nr_seq_regra_conv_p;
	conversao_meio_externo_w.IE_ENVIO_RECEB		:= c02_p.IE_ENVIO_RECEB;
	conversao_meio_externo_w.NM_APRESENTACAO_EXT	:= c02_p.NM_APRESENTACAO_EXT;
	conversao_meio_externo_w.CD_DOMINIO		:= c02_p.CD_DOMINIO;
	conversao_meio_externo_w.IE_TIPO		:= c02_p.IE_TIPO;

	if (coalesce(conversao_meio_externo_w.nr_sequencia::text, '') = '') then
		select	nextval('conversao_meio_externo_seq')
		into STRICT	conversao_meio_externo_w.nr_sequencia
		;

		insert into conversao_meio_externo values (conversao_meio_externo_w.*);
	else
		update	conversao_meio_externo
		set	row = conversao_meio_externo_w
		where	nr_sequencia	= conversao_meio_externo_w.nr_sequencia;
	
	end if;

	end;

	--#######################################################
	function OBTER_REGRA_CONVERSAO(nr_seq_regra_old_p	number)
			return number is
	i		integer;
	nr_sequencia_w	number(10);
	begin
	nr_sequencia_w	:= null;
	i 		:= 0;

	if (vet_regra_conv_w.count > 0) then
		for i in 1..vet_regra_conv_w.Count loop
			if (vet_regra_conv_w[i](.nr_seq_old IS NOT NULL AND .nr_seq_old::text <> '')) and (vet_regra_conv_w[i].nr_seq_old = nr_seq_regra_old_p) then
				nr_sequencia_w := vet_regra_conv_w[i].nr_seq_new;
			end if;
		end loop;
	end if;

	return	nr_sequencia_w;

	end;
	--#######################################################
	procedure IMPORTAR_SISTEMA(c03_p c03_w%type, nr_seq_sistema_p out number) is

	intpd_sistemas_w	INTPD_SISTEMAS%rowtype;
	nr_sequencia_w		number(10);
	begin

	begin
		select	*
		into STRICT	intpd_sistemas_w
		from	intpd_sistemas
		where	DS_SISTEMA 	= c03_p.ds_sistema
		and	DS_ENDPOINT	= c03_p.DS_ENDPOINT
		and	DS_HOST		= c03_p.DS_HOST  LIMIT 1;
	exception
	when others then
		null;
	end;

	intpd_sistemas_w.ds_accept_encoding	:= c03_p.ds_accept_encoding;
	intpd_sistemas_w.ds_connection		:= c03_p.ds_connection;
	intpd_sistemas_w.ds_content_type	:= c03_p.ds_content_type;
	intpd_sistemas_w.ds_endpoint		:= c03_p.ds_endpoint;
	intpd_sistemas_w.ds_host		:= c03_p.ds_host;
	intpd_sistemas_w.ds_login		:= c03_p.ds_login;
	intpd_sistemas_w.ds_path_certificado	:= c03_p.ds_path_certificado;
	intpd_sistemas_w.ds_path_keystore	:= c03_p.ds_path_keystore;
	intpd_sistemas_w.ds_pwd_certificado	:= c03_p.ds_pwd_certificado;
	intpd_sistemas_w.ds_pwd_keystore	:= c03_p.ds_pwd_keystore;
	intpd_sistemas_w.ds_senha		:= c03_p.ds_senha;
	intpd_sistemas_w.ds_senha_auth_http	:= c03_p.ds_senha_auth_http;
	intpd_sistemas_w.ds_senha_serv_proxy	:= c03_p.ds_senha_serv_proxy;
	intpd_sistemas_w.ds_sistema		:= c03_p.ds_sistema;
	intpd_sistemas_w.ds_user_agent		:= c03_p.ds_user_agent;
	intpd_sistemas_w.dt_atualizacao		:= clock_timestamp();
	intpd_sistemas_w.ie_https		:= c03_p.ie_https;
	intpd_sistemas_w.ie_situacao		:= c03_p.ie_situacao;
	intpd_sistemas_w.nm_usuario		:= nm_usuario_p;
	intpd_sistemas_w.nm_usuario_auth_http	:= c03_p.nm_usuario_auth_http;
	intpd_sistemas_w.nm_usuario_serv_proxy	:= c03_p.nm_usuario_serv_proxy;
	intpd_sistemas_w.nr_ip_serv_proxy	:= c03_p.nr_ip_serv_proxy;
	intpd_sistemas_w.nr_porta_serv_proxy	:= c03_p.nr_porta_serv_proxy;

	if (coalesce(intpd_sistemas_w.nr_sequencia::text, '') = '') then

		select	nextval('intpd_sistemas_seq')
		into STRICT	nr_sequencia_w
		;

		intpd_sistemas_w.nr_sequencia		:= nr_sequencia_w;
		intpd_sistemas_w.dt_atualizacao_nrec	:= clock_timestamp();
		intpd_sistemas_w.nm_usuario_nrec	:= nm_usuario_p;

		insert into intpd_sistemas values (intpd_sistemas_w.*);
	else

		update	intpd_sistemas
		set	row = intpd_sistemas_w
		where	nr_sequencia	= intpd_sistemas_w.nr_sequencia;

	end if;

	nr_seq_sistema_p := intpd_sistemas_w.nr_sequencia;

	end;
	--#######################################################
	procedure IMPORTAR_EVENTOS(c04_p c04_w%type, nr_seq_evento_p out number) is
	nr_sequencia_w	number(10);
	intpd_eventos_w	INTPD_EVENTOS%rowtype;
	begin

	select	max(nr_sequencia)
	into STRICT	nr_sequencia_w
	from	INTPD_EVENTOS
	where	ie_evento	= c04_p.ie_evento;

	if (coalesce(nr_sequencia_w::text, '') = '') then

		select	nextval('intpd_eventos_seq')
		into STRICT	nr_sequencia_w
		;

		intpd_eventos_w.DT_ATUALIZACAO          := clock_timestamp();
		intpd_eventos_w.DT_ATUALIZACAO_NREC	:= clock_timestamp();
		intpd_eventos_w.IE_ENVIA_RECEBE         := c04_p.IE_ENVIA_RECEBE;
		intpd_eventos_w.IE_EVENTO               := c04_p.IE_EVENTO;
		intpd_eventos_w.IE_SITUACAO             := c04_p.IE_SITUACAO;
		intpd_eventos_w.NM_USUARIO              := nm_usuario_p;
		intpd_eventos_w.NM_USUARIO_NREC         := nm_usuario_p;
		intpd_eventos_w.NR_SEQUENCIA            := nr_sequencia_w;

		insert into intpd_eventos values (intpd_eventos_w.*);

	end if;
	nr_seq_evento_p	:= nr_sequencia_w;
	end;
	--#######################################################
	procedure IMPORTAR_EVENTOS_SISTEMA(c05_p c05_w%type, nr_seq_evento_sistema_p out number) is
	nr_sequencia_w			number(10);
	intpd_eventos_sistema_w		intpd_eventos_sistema%rowtype;
	ds_soap_request_start_w		intpd_eventos_sistema.ds_soap_request_start%type;
	ds_soap_request_end_w		intpd_eventos_sistema.ds_soap_request_end%type;
	begin

	begin
	select	*
	into STRICT	intpd_eventos_sistema_w
	from	intpd_eventos_sistema
	where	nr_seq_sistema	= nr_seq_sistema_w
	and	nr_seq_evento	= nr_seq_evento_w
	and	ds_action	= c05_p.ds_action;
	exception
	when others then
		null;
	end;
	
	--Tratamento para remover <> das tags de dentro do campo do envelope SOAP, para evita erros no XML, devido ao conteudo dos campos abaixo.
	if (c05_p.ds_soap_request_start IS NOT NULL AND c05_p.ds_soap_request_start::text <> '') then
		ds_soap_request_start_w	:= replace(replace(c05_p.ds_soap_request_start,'X..X','<'),'Y__Y','>');
	end if;
	if (c05_p.ds_soap_request_end IS NOT NULL AND c05_p.ds_soap_request_end::text <> '') then
		ds_soap_request_end_w	:= replace(replace(c05_p.ds_soap_request_end,'X..X','<'),'Y__Y','>');
	end if;	

	intpd_eventos_sistema_w.DS_ACTION			:= c05_p.DS_ACTION;
	intpd_eventos_sistema_w.DS_CLASSE_JAVA			:= c05_p.DS_CLASSE_JAVA;
	intpd_eventos_sistema_w.DS_ID_ORIGIN			:= c05_p.DS_ID_ORIGIN;
	intpd_eventos_sistema_w.DS_PROCEDURE			:= c05_p.DS_PROCEDURE;
	intpd_eventos_sistema_w.DS_SOAP_REQUEST_END		:= ds_soap_request_end_w;
	intpd_eventos_sistema_w.DS_SOAP_REQUEST_START		:= ds_soap_request_start_w;
	intpd_eventos_sistema_w.DS_STATUS_ERRO			:= c05_p.DS_STATUS_ERRO;
	intpd_eventos_sistema_w.DS_STATUS_OK			:= c05_p.DS_STATUS_OK;
	intpd_eventos_sistema_w.DS_TAG_DOC_EXTERNO		:= c05_p.DS_TAG_DOC_EXTERNO;
	intpd_eventos_sistema_w.DS_TAG_MENSAGEM			:= c05_p.DS_TAG_MENSAGEM;
	intpd_eventos_sistema_w.DS_TAG_STATUS			:= c05_p.DS_TAG_STATUS;
	intpd_eventos_sistema_w.DT_ATUALIZACAO			:= clock_timestamp();
	intpd_eventos_sistema_w.IE_CONVERSAO			:= c05_p.IE_CONVERSAO;
	intpd_eventos_sistema_w.IE_FORMATO			:= c05_p.IE_FORMATO;
	intpd_eventos_sistema_w.IE_METODO_REST			:= c05_p.IE_METODO_REST;
	intpd_eventos_sistema_w.IE_PROTOCOLO_INTEGRACAO		:= c05_p.IE_PROTOCOLO_INTEGRACAO;
	intpd_eventos_sistema_w.IE_SITUACAO			:= c05_p.IE_SITUACAO;
	intpd_eventos_sistema_w.IE_TIPO_UTILIZACAO		:= c05_p.IE_TIPO_UTILIZACAO;
	intpd_eventos_sistema_w.NM_USUARIO			:= nm_usuario_p;
	intpd_eventos_sistema_w.NR_SEQ_EVENTO			:= nr_seq_evento_w;
	intpd_eventos_sistema_w.NR_SEQ_ORDEM_EXEC		:= c05_p.NR_SEQ_ORDEM_EXEC;
	intpd_eventos_sistema_w.NR_SEQ_PROJETO_XML		:= c05_p.NR_SEQ_PROJETO_XML;
	intpd_eventos_sistema_w.NR_SEQ_PROJETO_XML_RETORNO	:= c05_p.NR_SEQ_PROJETO_XML_RETORNO;
	intpd_eventos_sistema_w.NR_SEQ_PROJ_JSON		:= c05_p.NR_SEQ_PROJ_JSON;
	intpd_eventos_sistema_w.NR_SEQ_REGRA_CONV		:= coalesce(OBTER_REGRA_CONVERSAO(c05_p.NR_SEQ_REGRA_CONV),intpd_eventos_sistema_w.NR_SEQ_REGRA_CONV);
	intpd_eventos_sistema_w.NR_SEQ_SISTEMA			:= nr_seq_sistema_w;

	if (coalesce(intpd_eventos_sistema_w.nr_sequencia::text, '') = '') then

		intpd_eventos_sistema_w.DT_ATUALIZACAO_NREC		:= clock_timestamp();
		intpd_eventos_sistema_w.NM_USUARIO_NREC			:= nm_usuario_p;

		select	nextval('intpd_eventos_sistema_seq')
		into STRICT	intpd_eventos_sistema_w.NR_SEQUENCIA
		;

		insert into intpd_eventos_sistema values (intpd_eventos_sistema_w.*);
	else
		update	intpd_eventos_sistema
		set	row 		= intpd_eventos_sistema_w
		where	nr_sequencia	= intpd_eventos_sistema_w.nr_sequencia;

	end if;

	nr_seq_evento_sistema_p := intpd_eventos_sistema_w.nr_sequencia;

	end;
	--#######################################################
	procedure EVENTOS_SISTEMA_REST(c06_p	c06_w%type) is
	intpd_eventos_sistema_rest_w	intpd_eventos_sistema_rest%rowtype;
	nr_sequencia_w			number(10);
	qt_w				number(10);
	begin

	if (c06_p.nr_linha = 1) then
		delete	from intpd_eventos_sistema_rest
		where	nr_seq_evento_sistema = nr_seq_evento_sistema_w;
	end if;

	select	nextval('intpd_eventos_sistema_rest_seq')
	into STRICT	nr_sequencia_w
	;

	intpd_eventos_sistema_rest_w.cd_centro_custo		:= VALIDAR_FK('CENTRO_CUSTO','CD_CENTRO_CUSTO',c06_p.cd_centro_custo);
	intpd_eventos_sistema_rest_w.cd_classe_material		:= VALIDAR_FK('CLASSE_MATERIAL','CD_CLASSE_MATERIAL',c06_p.cd_classe_material);
	intpd_eventos_sistema_rest_w.cd_classif_setor		:= c06_p.cd_classif_setor;
	intpd_eventos_sistema_rest_w.cd_convenio		:= c06_p.cd_convenio;
	intpd_eventos_sistema_rest_w.cd_estabelecimento		:= VALIDAR_FK('ESTABELECIMENTO','CD_ESTABELECIMENTO',c06_p.cd_estabelecimento);
	intpd_eventos_sistema_rest_w.cd_grupo_material		:= VALIDAR_FK('GRUPO_MATERIAL','CD_GRUPO_MATERIAL',c06_p.cd_grupo_material);
	intpd_eventos_sistema_rest_w.cd_local_estoque		:= VALIDAR_FK('LOCAL_ESTOQUE','CD_LOCAL_ESTOQUE',c06_p.cd_local_estoque);
	intpd_eventos_sistema_rest_w.cd_local_estoque_destino	:= VALIDAR_FK('LOCAL_ESTOQUE','CD_LOCAL_ESTOQUE',c06_p.cd_local_estoque_destino);
	intpd_eventos_sistema_rest_w.cd_material		:= VALIDAR_FK('MATERIAL','CD_MATERIAL',c06_p.cd_material);
	intpd_eventos_sistema_rest_w.cd_natureza_operacao	:= VALIDAR_FK('NATUREZA_OPERACAO','CD_NATUREZA_OPERACAO',c06_p.cd_natureza_operacao);
	intpd_eventos_sistema_rest_w.cd_operacao_estoque	:= VALIDAR_FK('OPERACAO_ESTOQUE','CD_OPERACAO_ESTOQUE',c06_p.cd_operacao_estoque);
	intpd_eventos_sistema_rest_w.cd_operacao_nf		:= VALIDAR_FK('OPERACAO_NOTA','CD_OPERACAO_NF',c06_p.cd_operacao_nf);
	intpd_eventos_sistema_rest_w.cd_plano_convenio		:= c06_p.cd_plano_convenio;
	intpd_eventos_sistema_rest_w.cd_procedimento		:= c06_p.cd_procedimento;
	intpd_eventos_sistema_rest_w.cd_setor_atendimento	:= VALIDAR_FK('SETOR_ATENDIMENTO','CD_SETOR_ATENDIMENTO',c06_p.cd_setor_atendimento);
	intpd_eventos_sistema_rest_w.cd_subgrupo_material	:= VALIDAR_FK('SUBGRUPO_MATERIAL','CD_SUBGRUPO_MATERIAL',c06_p.cd_subgrupo_material);
	intpd_eventos_sistema_rest_w.cd_tipo_pessoa		:= VALIDAR_FK('TIPO_PESSOA_JURIDICA','CD_TIPO_PESSOA',c06_p.cd_tipo_pessoa);
	intpd_eventos_sistema_rest_w.ds_id_origin		:= c06_p.ds_id_origin;
	intpd_eventos_sistema_rest_w.dt_atualizacao		:= clock_timestamp();
	intpd_eventos_sistema_rest_w.dt_atualizacao_nrec	:= clock_timestamp();
	intpd_eventos_sistema_rest_w.ie_acao_movimentacao	:= c06_p.ie_acao_movimentacao;
	intpd_eventos_sistema_rest_w.ie_alteracao		:= c06_p.ie_alteracao;
	intpd_eventos_sistema_rest_w.ie_atribuicao_episodio	:= c06_p.ie_atribuicao_episodio;
	intpd_eventos_sistema_rest_w.ie_cirurgia		:= c06_p.ie_cirurgia;
	intpd_eventos_sistema_rest_w.ie_classif_proced		:= c06_p.ie_classif_proced;
	intpd_eventos_sistema_rest_w.ie_exclusao		:= c06_p.ie_exclusao;
	intpd_eventos_sistema_rest_w.ie_finalidade_cotacao	:= c06_p.ie_finalidade_cotacao;
	intpd_eventos_sistema_rest_w.ie_inclusao		:= c06_p.ie_inclusao;
	intpd_eventos_sistema_rest_w.ie_integrar		:= c06_p.ie_integrar;
	intpd_eventos_sistema_rest_w.ie_material_estoque	:= c06_p.ie_material_estoque;
	intpd_eventos_sistema_rest_w.ie_origem_documento	:= c06_p.ie_origem_documento;
	intpd_eventos_sistema_rest_w.ie_origem_lote		:= c06_p.ie_origem_lote;
	intpd_eventos_sistema_rest_w.ie_origem_titulo_cre	:= c06_p.ie_origem_titulo_cre;
	intpd_eventos_sistema_rest_w.ie_padronizado		:= c06_p.ie_padronizado;
	intpd_eventos_sistema_rest_w.ie_prontuario		:= c06_p.ie_prontuario;
	intpd_eventos_sistema_rest_w.ie_solic_prescr		:= c06_p.ie_solic_prescr;
	intpd_eventos_sistema_rest_w.ie_tipo_atendimento	:= c06_p.ie_tipo_atendimento;
	intpd_eventos_sistema_rest_w.ie_tipo_compra		:= c06_p.ie_tipo_compra;
	intpd_eventos_sistema_rest_w.ie_tipo_local		:= c06_p.ie_tipo_local;
	intpd_eventos_sistema_rest_w.ie_tipo_material		:= c06_p.ie_tipo_material;
	intpd_eventos_sistema_rest_w.ie_tipo_movimentacao	:= c06_p.ie_tipo_movimentacao;
	intpd_eventos_sistema_rest_w.ie_tipo_nota		:= c06_p.ie_tipo_nota;
	intpd_eventos_sistema_rest_w.ie_tipo_ordem		:= c06_p.ie_tipo_ordem;
	intpd_eventos_sistema_rest_w.ie_tipo_servico		:= c06_p.ie_tipo_servico;
	intpd_eventos_sistema_rest_w.ie_tipo_solicitacao	:= c06_p.ie_tipo_solicitacao;
	intpd_eventos_sistema_rest_w.ie_tipo_titulo_cre		:= c06_p.ie_tipo_titulo_cre;
	intpd_eventos_sistema_rest_w.nm_usuario			:= nm_usuario_p;
	intpd_eventos_sistema_rest_w.nm_usuario_nrec		:= nm_usuario_p;
	intpd_eventos_sistema_rest_w.nr_seq_evento_sistema	:= nr_seq_evento_sistema_w;
	intpd_eventos_sistema_rest_w.nr_seq_exame		:= VALIDAR_FK('EXAME_LABORATORIO','NR_SEQ_EXAME',c06_p.nr_seq_exame);
	intpd_eventos_sistema_rest_w.nr_seq_familia		:= VALIDAR_FK('MATERIAL_FAMILIA','NR_SEQUENCIA',c06_p.nr_seq_familia);
	intpd_eventos_sistema_rest_w.nr_seq_forma_compra	:= VALIDAR_FK('REG_LIC_FORMA_COMPRA','NR_SEQUENCIA',c06_p.nr_seq_forma_compra);
	intpd_eventos_sistema_rest_w.nr_seq_mod_compra		:= VALIDAR_FK('REG_LIC_MOD_COMPRA','NR_SEQUENCIA',c06_p.nr_seq_mod_compra);
	intpd_eventos_sistema_rest_w.nr_seq_proc_interno	:= VALIDAR_FK('PROC_INTERNO','NR_SEQUENCIA',c06_p.nr_seq_proc_interno);
	intpd_eventos_sistema_rest_w.nr_seq_tipo_compra		:= VALIDAR_FK('REG_LIC_TIPO_COMPRA','NR_SEQUENCIA',c06_p.nr_seq_tipo_compra);
	intpd_eventos_sistema_rest_w.nr_sequencia		:= nr_sequencia_w;

	if (c06_p.cd_categoria IS NOT NULL AND c06_p.cd_categoria::text <> '') then

		select	count(1)
		into STRICT	qt_w
		from	categoria_convenio
		where	cd_categoria 	= c06_p.cd_categoria
		and	cd_convenio 	= c06_p.cd_convenio;

		if (qt_w > 0) then
			intpd_eventos_sistema_rest_w.cd_categoria	:= c06_p.cd_categoria;
		end if;
	end if;

	if (c06_p.cd_procedimento IS NOT NULL AND c06_p.cd_procedimento::text <> '') then

		select	count(1)
		into STRICT	qt_w
		from	procedimento
		where	cd_procedimento 	= c06_p.cd_procedimento
		and	ie_origem_proced 	= c06_p.ie_origem_proced;

		if (qt_w > 0) then
			intpd_eventos_sistema_rest_w.ie_origem_proced		:= c06_p.ie_origem_proced;
			intpd_eventos_sistema_rest_w.cd_procedimento		:= c06_p.cd_procedimento;
		end if;
	end if;

	begin
		insert into intpd_eventos_sistema_rest values (intpd_eventos_sistema_rest_w.*);
	exception
	when others then
		null;
	end;

	end;
	--#######################################################
	procedure IMPORTAR_EVENTOS_REGRA_AUTO(c07_p c07_w%type) is
	intpd_eventos_regra_auto_w	INTPD_EVENTOS_REGRA_AUTO%rowtype;
	nr_sequencia_w			number(10);
	begin

	if (c07_p.nr_linha = 1) then
		delete	from INTPD_EVENTOS_REGRA_AUTO
		where	nr_seq_evento_sistema = nr_seq_evento_sistema_w;
	end if;

	select	nextval('intpd_eventos_regra_auto_seq')
	into STRICT	nr_sequencia_w
	;

	intpd_eventos_regra_auto_w.nr_sequencia			:= nr_sequencia_w;
	intpd_eventos_regra_auto_w.dt_atualizacao		:= clock_timestamp();
	intpd_eventos_regra_auto_w.nm_usuario			:= nm_usuario_p;
	intpd_eventos_regra_auto_w.dt_atualizacao_nrec		:= clock_timestamp();
	intpd_eventos_regra_auto_w.nm_usuario_nrec		:= nm_usuario_p;
	intpd_eventos_regra_auto_w.nr_seq_evento_sistema	:= nr_seq_evento_sistema_w;
	intpd_eventos_regra_auto_w.qt_min_retransmissao		:= c07_p.qt_min_retransmissao;
	intpd_eventos_regra_auto_w.qt_tentativas		:= c07_p.qt_tentativas;

	insert into intpd_eventos_regra_auto values (intpd_eventos_regra_auto_w.*);

	end;
	--#######################################################
	procedure IMPORTAR_EVENTOS_INF_RECEB(c08_p c08_w%type) is
	intpd_eventos_inf_receb_w	intpd_eventos_inf_receb%rowtype;
	nr_sequencia_w			number(10);
	begin

	if (c08_p.nr_linha = 1) then
		delete	from INTPD_EVENTOS_INF_RECEB
		where	nr_seq_evento_sistema = nr_seq_evento_sistema_w;
	end if;

	select	nextval('intpd_eventos_inf_receb_seq')
	into STRICT	nr_sequencia_w
	;

	intpd_eventos_inf_receb_w.nr_sequencia			:= nr_sequencia_w;
	intpd_eventos_inf_receb_w.dt_atualizacao		:= clock_timestamp();
	intpd_eventos_inf_receb_w.nm_usuario			:= nm_usuario_p;
	intpd_eventos_inf_receb_w.dt_atualizacao_nrec		:= clock_timestamp();
	intpd_eventos_inf_receb_w.nm_usuario_nrec		:= nm_usuario_p;
	intpd_eventos_inf_receb_w.nr_seq_evento_sistema		:= nr_seq_evento_sistema_w;
	intpd_eventos_inf_receb_w.nm_usuario_regra		:= c08_p.nm_usuario_regra;
	intpd_eventos_inf_receb_w.cd_estabelecimento		:= VALIDAR_FK('ESTABELECIMENTO','CD_ESTABELECIMENTO',c08_p.cd_estabelecimento);
	intpd_eventos_inf_receb_w.cd_perfil			:= VALIDAR_FK('PERFIL','CD_PERFIL',c08_p.cd_perfil);
	intpd_eventos_inf_receb_w.cd_setor_atendimento		:= VALIDAR_FK('SETOR_ATENDIMENTO','CD_SETOR_ATENDIMENTO',c08_p.cd_setor_atendimento);

	insert into intpd_eventos_inf_receb values (intpd_eventos_inf_receb_w.*);

	end;
	--#######################################################
	procedure IMPORTAR_EVENTOS_VALORES(c09_p c09_w%type) is
	intpd_eventos_valores_w	INTPD_EVENTOS_VALORES%rowtype;
	nr_sequencia_w	number(10);
	begin

	if (c09_p.nr_linha = 1) then
		delete	from INTPD_EVENTOS_VALORES
		where	nr_seq_evento_sistema = nr_seq_evento_sistema_w;
	end if;
	
	select	nextval('intpd_eventos_valores_seq')
	into STRICT	nr_sequencia_w
	;

	intpd_eventos_valores_w.ds_valor		:= c09_p.ds_Valor;				
	intpd_eventos_valores_w.dt_atualizacao		:= clock_timestamp();
	intpd_eventos_valores_w.dt_atualizacao_nrec	:= clock_timestamp();
	intpd_eventos_valores_w.ie_situacao		:= c09_p.ie_situacao;
	intpd_eventos_valores_w.nm_atributo		:= c09_p.nm_atributo;
	intpd_eventos_valores_w.nm_elemento		:= c09_p.nm_elemento;
	intpd_eventos_valores_w.nm_usuario		:= nm_usuario_p;	
	intpd_eventos_valores_w.nm_usuario_nrec		:= nm_usuario_p;
	intpd_eventos_valores_w.nr_seq_evento_sistema	:= nr_seq_evento_sistema_w;
	intpd_eventos_valores_w.nr_sequencia		:= nr_sequencia_w;
	
	insert into intpd_eventos_valores values (intpd_eventos_valores_w.*);

	end;
	--#######################################################
	
begin

if (octet_length(ds_xml_p) > 0) then

	xml_w	:= xmlparse(DOCUMENT, convert_from(, 'utf-8'));

	--Import das regras de conversao
	open C01;
	loop
	fetch C01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

		conversaoMeioExterno_w	:= c01_w.conversaoMeioExterno;

		IMPORTAR_CONVERSAO(c01_w.nr_sequencia, c01_w.ie_situacao, c01_w.ds_regra, nr_seq_regra_conv_w);

		open C02;
		loop
		fetch C02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */

			IMPORTAR_CONV_MEIO_EXTERNO(nr_seq_regra_conv_w,C02_W);

		end loop;
		close C02;

	end loop;
	close C01;

	--Import dos sistemas
	open C03;
	loop
	fetch C03 into
		c03_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */

		intpdEventos_w	:= c03_w.intpdEventos;

		IMPORTAR_SISTEMA(c03_w,nr_seq_sistema_w);

		--Eventos que possuem o sistema vinculado
		open C04;
		loop
		fetch C04 into
			c04_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */

			intpdEventosSistema_w := c04_w.intpdEventosSistema;

			IMPORTAR_EVENTOS(c04_w,nr_seq_evento_w);

			--Eventos do sistema
			open C05;
			loop
			fetch C05 into
				c05_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */

				intpdEventosSistemaRest_w	:= c05_w.intpdEventosSistemaRest;
				intpdEventosRegraAuto_w		:= c05_w.intpdEventosRegraAuto;
				intpdEventosInfReceb_w		:= c05_w.intpdEventosInfReceb;
				intpdEventosValores_w		:= c05_w.intpdEventosValores;

				IMPORTAR_EVENTOS_SISTEMA(c05_w, nr_seq_evento_sistema_w);

				open C06;
				loop
				fetch C06 into
					c06_w;
				EXIT WHEN NOT FOUND; /* apply on C06 */
					EVENTOS_SISTEMA_REST(c06_w);
				end loop;
				close C06;

				open C07;
				loop
				fetch C07 into
					c07_w;
				EXIT WHEN NOT FOUND; /* apply on C07 */
					IMPORTAR_EVENTOS_REGRA_AUTO(c07_w);
				end loop;
				close C07;

				open C08;
				loop
				fetch C08 into
					c08_w;
				EXIT WHEN NOT FOUND; /* apply on C08 */
					IMPORTAR_EVENTOS_INF_RECEB(c08_w);
				end loop;
				close C08;

				open C09;
				loop
				fetch C09 into
					c09_w;
				EXIT WHEN NOT FOUND; /* apply on C09 */
					IMPORTAR_EVENTOS_VALORES(c09_w);
				end loop;
				close C09;

			end loop;
			close C05;

		end loop;
		close C04;

	end loop;
	close C03;

	commit;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_importar_cadastro_sis (nm_usuario_p text, ds_xml_p text) is type regra_conversao is record (nr_seq_old bigint, nr_seq_new bigint) FROM PUBLIC;

