-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cancelar_caixa_receb ( nr_seq_caixa_rec_p bigint, nm_usuario_p text, ie_commit_p text, ie_cartao_p text) AS $body$
DECLARE

 
dt_fechamento_w		timestamp;
nr_titulo_w		bigint;
nr_seq_baixa_w		integer;
nr_seq_caixa_w		bigint;
nr_seq_lote_w		bigint;
cd_estabelecimento_w	bigint;
dt_fechamento_saldo_w	timestamp;
dt_cancelamento_w	timestamp;
ie_lock_caixa_receb_w	smallint		:= 0;
nr_sequencia_w		bigint;
qt_cartao_sem_cancel_w	integer;
qt_cartao_tef_w		integer;
cont_w			integer;
ie_cheque_depositado_w	varchar(255);
ie_canc_cr_baixa_w	varchar(255);
qt_cheque_depositado_w	bigint;
qt_transferencia_w	bigint		:= 0;
ie_transf_estorno_w	varchar(1);
ie_troco_w		varchar(1);
nr_seq_trans_troco_w	bigint;
nr_seq_movto_transf_w	bigint;
nr_seq_movto_transf_od_w	bigint;
nr_seq_movto_estorno_w	bigint;
nr_seq_negociacao_cr_w	bigint;
ie_estornar_transf_w	varchar(1);
nr_adiant_receb_w	bigint;
nr_seq_cheque_w		bigint;
nr_adiantamento_w	bigint;
ie_status_adiant_w	varchar(15);
cd_tipo_recebimento_w	adiantamento.cd_tipo_recebimento%type;
ie_situacao_w		adiantamento.ie_situacao%type;
ie_status_w		adiantamento.ie_status%type;
ds_observacao_w		adiantamento.ds_observacao%type;

dt_fechamento_ini_w	timestamp;
dt_fechamento_fim_w	timestamp;
/* Projeto Multimoeda - Variaveis */

vl_cotacao_w		cotacao_moeda.vl_cotacao%type;
nr_seq_trans_caixa_w	double precision;
nr_seq_adiant_dev_w	integer;

c01 CURSOR FOR
SELECT	nr_titulo, 
	nr_sequencia 
from	titulo_receber_liq 
where	nr_seq_caixa_rec = nr_seq_caixa_rec_p;

/* transferencias do recebimento */

c02 CURSOR FOR
/* origem */

SELECT	a.nr_sequencia,
  a.nr_seq_movto_transf
from	transacao_financeira b,
	movto_trans_financ a
where	not exists (SELECT	1
	from	movto_trans_financ x
	where	x.nr_seq_lote_origem	= a.nr_seq_lote
	and	x.nr_seq_saldo_caixa	= a.nr_seq_saldo_caixa)
and	coalesce(a.nr_seq_lote_origem::text, '') = ''
and (b.ie_saldo_caixa = 'S' or
	exists (select	1
	from	transacao_financeira x
	where	x.nr_sequencia		= nr_seq_trans_troco_w
	and	x.nr_seq_trans_transf	= a.nr_seq_trans_financ
	and	ie_troco_w		= 'S')
	)
and	b.ie_caixa		= 'T'
and	a.nr_seq_trans_financ	= b.nr_sequencia
and	((coalesce(a.ie_estorno,'-1') <> 'E' and coalesce(a.ie_estorno,'-1') <> 'O') or ie_transf_estorno_w = 'S')
and	coalesce(a.ie_rejeitado,'N')	= 'N'
and	coalesce(a.nr_seq_movto_transf::text, '') = ''
and	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p

union

/* destino */

select	a.nr_sequencia,
  a.nr_seq_movto_transf
from	transacao_financeira b,
	movto_trans_financ a
where	not exists (select	1
	from	movto_trans_financ x
	where	x.nr_seq_lote_origem	= a.nr_seq_lote
	and	x.nr_seq_saldo_caixa	= a.nr_seq_saldo_caixa)
and	coalesce(a.nr_seq_lote_origem::text, '') = ''
and (b.ie_saldo_caixa = 'S' or
	exists (select	1
	from	transacao_financeira x
	where	x.nr_sequencia		= nr_seq_trans_troco_w
	and	x.nr_seq_trans_transf	= a.nr_seq_trans_financ
	and	ie_troco_w		= 'S')
	)
and	b.ie_caixa		= 'T'
and	a.nr_seq_trans_financ	= b.nr_sequencia
and	((coalesce(a.ie_estorno,'-1') <> 'E' and coalesce(a.ie_estorno,'-1') <> 'O') or ie_transf_estorno_w = 'S')
and	coalesce(a.ie_rejeitado,'N')	= 'N'
and	a.nr_sequencia	in (select	x.nr_seq_movto_transf
	from	movto_trans_financ x
	where	not exists (select	1
		from	movto_trans_financ y
		where	y.nr_seq_lote_origem	= x.nr_seq_lote
		and	y.nr_seq_saldo_caixa	= x.nr_seq_saldo_caixa)
	and	coalesce(x.nr_seq_lote_origem::text, '') = ''
	and	x.nr_seq_caixa_rec	= nr_seq_caixa_rec_p);

c03 CURSOR FOR
SELECT	a.nr_seq_cheque
from	cheque_cr a
where	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p;

c04 CURSOR FOR
SELECT	a.nr_adiantamento,
	a.ie_status,
	a.vl_cotacao
from	adiantamento a
where	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p;

c05 CURSOR FOR
SELECT	a.nr_adiantamento,
	a.vl_cotacao
from	adiantamento_pago a
where	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p;


BEGIN 
 
/*-- Edgar 29/01/2008 
lock table movto_trans_financ in exclusive mode; 
lock table caixa_receb in exclusive mode; 
 
Francisco - 30/04/2008 - OS 91526 - Troquei abaixo para lockar somente os registros em uso 
*/
 
 
select	max(a.nr_sequencia), 
	max(a.dt_fechamento),
	max(a.dt_cancelamento),
	max(c.cd_estabelecimento),
	max(a.nr_seq_negociacao_cr),
	max(a.nr_seq_trans_financ)
into STRICT	nr_sequencia_w, 
	dt_fechamento_w, 
	dt_cancelamento_w,
	cd_estabelecimento_w,
	nr_seq_negociacao_cr_w,
	nr_seq_trans_caixa_w
from	caixa c,
	caixa_saldo_diario b,
	caixa_receb a
where	a.nr_sequencia		= nr_seq_caixa_rec_p
and	a.nr_seq_saldo_caixa	= b.nr_sequencia
and	b.nr_seq_caixa		= c.nr_sequencia;


if (dt_cancelamento_w IS NOT NULL AND dt_cancelamento_w::text <> '') or (coalesce(nr_sequencia_w::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(190467);
end if;

select	1
into STRICT	ie_lock_caixa_receb_w 
from	caixa_receb 
where	nr_sequencia	= nr_seq_caixa_rec_p 
for	update;

select	coalesce(max(a.ie_canc_cr_baixa), 'S'),
	max(a.nr_seq_trans_troco)
into STRICT	ie_canc_cr_baixa_w,
	nr_seq_trans_troco_w
from	parametro_tesouraria a
where	a.cd_estabelecimento	= cd_estabelecimento_w;

ie_transf_estorno_w := Obter_Param_Usuario(813, 109, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_transf_estorno_w);
ie_troco_w := Obter_Param_Usuario(813, 32, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_troco_w);
ie_estornar_transf_w := Obter_Param_Usuario(813, 124, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_estornar_transf_w);

open	c02;
loop
fetch	c02 into
	nr_seq_movto_transf_w,
  nr_seq_movto_transf_od_w;
EXIT WHEN NOT FOUND; /* apply on c02 */

	/* ahoffelder - OS 370200 - 11/10/2011 - estornar as transferencias de caixa */

	if (ie_estornar_transf_w = 'S') then

    if (nr_seq_movto_transf_od_w IS NOT NULL AND nr_seq_movto_transf_od_w::text <> '') then
      nr_seq_movto_estorno_w := estornar_movto_trans_financ(nr_seq_movto_transf_od_w, nm_usuario_p, nr_seq_movto_estorno_w);
    else
      nr_seq_movto_estorno_w := estornar_movto_trans_financ(nr_seq_movto_transf_w, nm_usuario_p, nr_seq_movto_estorno_w);
    end if;

	else
		qt_transferencia_w	:= coalesce(qt_transferencia_w,0) + 1;
	end if;

end	loop;
close	c02;

/* ahoffelder - OS 361377 - 19/09/2011 - nao cancelar recebimentos com movimentacoes transferidas */

if (coalesce(qt_transferencia_w,0) > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(190468);
end if;

/* Libera negociacao para que seja possivel recebe-la novamente */

update	negociacao_cr
set	dt_recebimento 	 = NULL
where	nr_sequencia 	= nr_seq_negociacao_cr_w;

if (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then

	if (ie_canc_cr_baixa_w = 'N') then
		select	count(*)
		into STRICT	cont_w
		from	movto_cartao_cr
		where	(dt_baixa IS NOT NULL AND dt_baixa::text <> '')
		and	nr_seq_caixa_rec	= nr_seq_caixa_rec_p;

		if (cont_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(190469);
		end if;
	end if;

	select	count(*) 
	into STRICT	qt_cartao_sem_cancel_w 
	from	movto_cartao_cr 
	where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p 
	and	coalesce(dt_cancelamento::text, '') = '' 
	and	(dt_integracao_tef IS NOT NULL AND dt_integracao_tef::text <> '') 
	and	(dt_confirmacao_tef IS NOT NULL AND dt_confirmacao_tef::text <> '');
 
	/* Se tem cartoes TEF que ainda nao foram cancelados, nao deixa cancelar */
 
	if (qt_cartao_sem_cancel_w > 0) and (coalesce(ie_cartao_p,'N') <> 'S') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(190470);
	end if;

    /* Se tem pendencia para o PIX, nao deixa cancelar*/

	if (pix_cancela_caixa_pck.pix_obter_pendencia_caixa_rec(nr_seq_caixa_rec_p)) then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(1187999);
    end if;

   	select	b.nr_seq_caixa, 
		b.dt_fechamento 
	into STRICT	nr_seq_caixa_w, 
		dt_fechamento_saldo_w 
	from	caixa_saldo_diario b, 
		caixa_receb a 
	where	a.nr_seq_saldo_caixa	= b.nr_sequencia 
	and	a.nr_sequencia		= nr_seq_caixa_rec_p;
 
	if (dt_fechamento_saldo_w IS NOT NULL AND dt_fechamento_saldo_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(190471);
	end if;

	/* ahoffelder - OS 169044 - 30/09/2009 */

	ie_cheque_depositado_w := Obter_Param_Usuario(813, 64, obter_perfil_ativo, nm_usuario_p, 0, ie_cheque_depositado_w);

	if (coalesce(ie_cheque_depositado_w,'S') = 'N') then
		select	count(*)
		into STRICT	qt_cheque_depositado_w
		from	cheque_cr b,
			caixa_receb a
		where	a.nr_sequencia	= nr_seq_caixa_rec_p
		and	a.nr_sequencia	= b.nr_seq_caixa_rec
		and	exists (
			SELECT	1
			from	deposito_cheque x
			where	x.nr_seq_cheque	= b.nr_seq_cheque
			);

		if (qt_cheque_depositado_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(190472);
		end if;
	end if;	

	select	max(nr_seq_lote) 
	into STRICT	nr_seq_lote_w 
	from	movto_trans_financ 
	where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p;
	 
	CALL Estornar_lote_tesouraria(nr_seq_caixa_w, 
				nr_seq_lote_w, 
				nm_usuario_p, 
				'N',
				null);
 
	/* Baixas de titulos no recebimento de caixa serao estornados aqui 
	Francisco - 25/04/07 - Comentei pois vai fazer as baixas agora dentro da Estonar_lote_tesouraria */
	open C01;
	loop 
	fetch C01 into 
		nr_titulo_w, 
		nr_seq_baixa_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		CALL gerar_nota_credito_tesouraria(nr_titulo_w,
						nr_seq_baixa_w,
						null,
						null,
						null,
						null,
						null,
						'E',
						cd_estabelecimento_w,
						nm_usuario_p);
		--estornar_tit_receber_liq(nr_titulo_w,nr_seq_baixa_w,null,nm_usuario_p);				  
		end;
	end loop;
	close c01;	
	
	/* Devolver cheques vinculados */
 
	update	cheque_cr 
	set	dt_devolucao	= clock_timestamp(), 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p;
	 
	/* Cancelar cartoes vinculados */
 
	update	movto_cartao_cr 
	set	dt_cancelamento	= clock_timestamp(), 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p
	and	coalesce(dt_integracao_tef::text, '') = '';
 
	/* Cancelar recebimento de caixa */
 
	update	caixa_receb 
	set	dt_cancelamento	= clock_timestamp(), 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where	nr_sequencia	= nr_seq_caixa_rec_p;

    /*Validar e tratar cancelamento de cobranca PIX*/

    CALL pix_cancela_caixa_pck.cancelar_receb_caixa_pix(nr_seq_caixa_rec_p => nr_seq_caixa_rec_p,
                                  nm_usuario_p => nm_usuario_p, 
								  dt_fechamento_p => dt_fechamento_w);

	dt_fechamento_ini_w	:= trunc(dt_fechamento_w,'dd');
	dt_fechamento_fim_w	:= fim_dia(dt_fechamento_w);

	/*Alterar os adiantamentos para provisorio*/

	open C04;
	loop
	fetch C04 into	
		nr_adiantamento_w,
		ie_status_adiant_w,
		vl_cotacao_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		
		if (ie_status_adiant_w = 'D') then
			
			update	adiantamento
			set	ie_status	= 'P'
			where	nr_adiantamento	= nr_adiantamento_w;
			
			/* Projeto Multimoeda - Passa a cotacao para a atualizacao do saldo quando moeda estrangeira */

			if (coalesce(vl_cotacao_w,0) <> 0) then
				CALL Atualizar_Saldo_Adiantamento(nr_adiantamento_w,nm_usuario_p,null,vl_cotacao_w);
			else
				CALL Atualizar_Saldo_Adiantamento(nr_adiantamento_w,nm_usuario_p,null);
			end if;
			
			CALL gerar_adiantamento_hist(nr_adiantamento_w,
						'S',
						clock_timestamp(),
						wheb_mensagem_pck.get_texto(303172), /* 'O status do adiantamento foi alterado para Provisorio devido ao cancelamento do recebimento na Tesouraria.', */
						nm_usuario_p,
						'N');

			--Adiantamento cancelado devido ao cancelamento do recebimento #@NR_RECEBIMENTO_W#@ do caixa #@NR_SEQ_CAIXA_W#@ na data #@DT_CANCELAMENTO_W#@
			ds_observacao_w	:= substr(wheb_mensagem_pck.get_texto(709073,'NR_RECEBIMENTO_W='||nr_sequencia_w||';NR_SEQ_CAIXA_W='||nr_seq_caixa_w||';DT_CANCELAMENTO_W='||trunc(clock_timestamp())),1,255);
			
			update 	adiantamento
			set 	ds_observacao = substr(ds_observacao || CASE WHEN ds_observacao = NULL THEN ''  ELSE '. ' END  || ds_observacao_w || '.',1,255)
			where	nr_adiantamento	= nr_adiantamento_w;
		
		end if;

		select	max(b.cd_tipo_receb_ant),
			max(b.ie_situacao_ant),
			max(b.ie_status_ant)
		into STRICT	cd_tipo_recebimento_w,
			ie_situacao_w,
			ie_status_w
		from	adiantamento a,
			adiantamento_alteracao b
		where	a.nr_adiantamento	= nr_adiantamento_w
		and	a.nr_adiantamento	= b.nr_adiantamento
		and	b.dt_atualizacao_nrec	between dt_fechamento_ini_w and dt_fechamento_fim_w
		and b.nr_sequencia = (SELECT max(x.nr_sequencia) from adiantamento_alteracao x where x.nr_adiantamento = b.nr_adiantamento);

		update	adiantamento
		set	cd_tipo_recebimento	= coalesce(cd_tipo_recebimento_w,cd_tipo_recebimento),
			ie_situacao		= coalesce(ie_situacao_w,ie_situacao),
			ie_status		= coalesce(ie_status_w,ie_status),
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_adiantamento		= nr_adiantamento_w;
		
		end;
	end loop;
	close C04;

	/* Devolver adiantamentos criados para a troca de valores. */

	open c05;
	loop
	fetch c05 into
		nr_adiantamento_w,
		vl_cotacao_w;
	EXIT WHEN NOT FOUND; /* apply on c05 */
		begin
		select	coalesce(max(nr_sequencia), 0) + 1
		into STRICT	nr_seq_adiant_dev_w
		from	adiant_pago_dev;
		
		insert into Adiant_pago_dev(NR_ADIANTAMENTO,
			NR_SEQUENCIA,
			DT_DEVOLUCAO,
			VL_DEVOLUCAO,
			CD_MOEDA,
			DT_ATUALIZACAO,
			NM_USUARIO,
			DS_MOTIVO_DEV,
			NR_LOTE_CONTABIL,
			NR_SEQ_TRANS_FIN,
			vl_devolucao_estrang,
			vl_complemento,
			vl_cotacao)
		SELECT	nr_adiantamento_w,
			nr_seq_adiant_dev_w,
			dt_adiantamento,
			vl_adiantamento,
			cd_moeda,
			clock_timestamp(),
			nm_usuario_p,
			null,
			0,
			null,
			vl_adto_estrang,
			vl_complemento,
			vl_cotacao
		from	adiantamento_pago
		where	nr_adiantamento = nr_adiantamento_w;
		
		if (coalesce(vl_cotacao_w,0) <> 0) then
			CALL atualizar_saldo_adiant_pago(nr_adiantamento_w,nm_usuario_p,vl_cotacao_w);
		else
			CALL atualizar_saldo_adiant_pago(nr_adiantamento_w,nm_usuario_p);
		end if;
		
		end;
	end loop;
else
 
	select	count(*) 
	into STRICT	qt_cartao_sem_cancel_w 
	from	movto_cartao_cr 
	where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p 
	and	coalesce(dt_cancelamento::text, '') = '' 
	and	(dt_integracao_tef IS NOT NULL AND dt_integracao_tef::text <> '') 
	and	(dt_confirmacao_tef IS NOT NULL AND dt_confirmacao_tef::text <> '');
 
	/* Se tem cartoes TEF que ainda nao foram cancelados, nao deixa cancelar */
 
	if (qt_cartao_sem_cancel_w > 0) then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(190466);
    /* Se tem pendencia para o PIX, nao deixa cancelar*/
		
    elsif (pix_cancela_caixa_pck.pix_obter_pendencia_caixa_rec(nr_seq_caixa_rec_p)) then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(1187999);
	else
		select	count(*) 
		into STRICT	qt_cartao_tef_w 
		from	movto_cartao_cr 
		where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p 
		and	(dt_integracao_tef IS NOT NULL AND dt_integracao_tef::text <> '') 
		and	(dt_confirmacao_tef IS NOT NULL AND dt_confirmacao_tef::text <> '');

		/* Se tem cartoes via TEF, nao exclui, apenas joga data de cancelamento */
 
		if (qt_cartao_tef_w > 0) then 
			/* Devolver cheques vinculados */
 
			update	cheque_cr 
			set	dt_devolucao	= clock_timestamp(), 
				nm_usuario	= nm_usuario_p, 
				dt_atualizacao	= clock_timestamp() 
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p;
	 
			/* Cancelar cartoes vinculados */
 
			update	movto_cartao_cr 
			set	dt_cancelamento	= clock_timestamp(), 
				nm_usuario	= nm_usuario_p, 
				dt_atualizacao	= clock_timestamp() 
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p;
 
			/* Cancelar recebimento de caixa */
 
			update	caixa_receb 
			set	dt_cancelamento	= clock_timestamp(), 
				nm_usuario	= nm_usuario_p, 
				dt_atualizacao	= clock_timestamp() 
			where	nr_sequencia	= nr_seq_caixa_rec_p;
		else 
			delete	from evento_tef
			where	nr_seq_caixa_rec = nr_seq_caixa_rec_p;

			delete	from	titulo_receber_liq
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p;
			 
			delete	from	adiantamento_cheque_cr 
			where	nr_adiantamento	in (SELECT	nr_adiantamento 
					 from	adiantamento 
							 where	nr_seq_caixa_rec = nr_seq_caixa_rec_p);	

			update	adiantamento 
			set	nr_seq_caixa_rec	 = NULL
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p 
			and	coalesce(ie_lib_caixa,'S')	= 'S';
	
			delete	from	adiantamento 
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p 
			and	coalesce(ie_lib_caixa,'S')	= 'N';			
		 
			delete	from	movto_trans_financ 
			where	coalesce(nr_seq_lote::text, '') = '' 
			and	nr_seq_caixa_rec	= nr_seq_caixa_rec_p;		

			update	cheque_cr 
			set	nr_seq_caixa_rec	 = NULL 
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p 
			and	coalesce(ie_lib_caixa,'S')	= 'S';
			
			update	negociacao_cr_cheque a
			set	nr_seq_cheque	 = NULL
			where	exists (SELECT	1
					from	cheque_cr x
					where	x.nr_seq_cheque	= a.nr_seq_cheque
					and	x.nr_seq_caixa_rec = nr_seq_caixa_rec_p);

			delete	from	cheque_cr 
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p 
			and	coalesce(ie_lib_caixa,'S')	= 'N';
			
			/*OS 1151081, Se ja tiver liberado, nao excluir e sim apenas desvincular do caixa cfme ocore pra cheque*/

			update	movto_cartao_cr
			set	nr_seq_caixa_rec	 = NULL 
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p
			and	coalesce(ie_lib_caixa,'S')	= 'S';
			
			update	negociacao_cr_cartao a
			set	nr_seq_movto_cartao	 = NULL
			where	exists (SELECT	1
					from	movto_cartao_cr x
					where	x.nr_sequencia	= a.nr_seq_movto_cartao
					and	x.nr_seq_caixa_rec = nr_seq_caixa_rec_p);
			
			/*OS 1151081, Somente excluir parcelas de cartoes ainda nao liberados*/

			delete	from	movto_cartao_cr_parcela
			where	nr_seq_movto	in (SELECT	nr_sequencia 
							 from	movto_cartao_cr 
							 where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
							 and	coalesce(ie_lib_caixa,'S')	= 'N');
		 
			delete	from	movto_cartao_cr 
			where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p
			and	coalesce(ie_lib_caixa,'S')	= 'N';
			
			/* Exclui adiantamento pago referente a troca de valores */

			delete	from adiantamento_pago
			where	nr_seq_caixa_rec 	= nr_seq_caixa_rec_p;
			
			delete	from	caixa_receb_estrang
			where	nr_seq_caixa_receb	= nr_seq_caixa_rec_p;

			delete	from	caixa_receb 
			where	nr_sequencia		= nr_seq_caixa_rec_p;
		end if;

        /*Tratar cancelamento de cobranca PIX*/


        /*Validar e tratar cancelamento de cobranca PIX*/

		CALL pix_cancela_caixa_pck.cancelar_receb_caixa_pix(nr_seq_caixa_rec_p => nr_seq_caixa_rec_p,
									  nm_usuario_p => nm_usuario_p, 
									  dt_fechamento_p => dt_fechamento_w);

	end if;
end if;

open	c03;
loop
fetch	c03 into
	nr_seq_cheque_w;
EXIT WHEN NOT FOUND; /* apply on c03 */

	/* 'O recebimento nr_seq_caixa_rec_p, onde o cheque encontra-se, foi cancelado.' */

	CALL gerar_cheque_cr_hist(nr_seq_cheque_w,wheb_mensagem_pck.get_texto(303176,'NR_SEQ_CAIXA_REC_P='||nr_seq_caixa_rec_p),'N',nm_usuario_p);
	/*AAMFIRMO OS 892531 -> Atualizar cobranca do cheque ao cancelar recebimento*/

	CALL atualizar_cobranca_cheque(nr_seq_cheque_w,nm_usuario_p);

end	loop;
close	c03;

CALL atualiza_repasse_rec_caixa(nr_seq_caixa_rec_p,nm_usuario_p,'E');
if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cancelar_caixa_receb ( nr_seq_caixa_rec_p bigint, nm_usuario_p text, ie_commit_p text, ie_cartao_p text) FROM PUBLIC;

