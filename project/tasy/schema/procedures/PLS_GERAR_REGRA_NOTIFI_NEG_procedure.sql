-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_regra_notifi_neg ( nr_seq_requisicao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

/*
----------------------------------------------------------------------------------------------------------------------
Rotina destinada para gerar as notificacoes de negativas  na funcao
'Gestao de Atendimentos (Call Center) - Solicitacoes de notificacao - Solicitacoes de notificacao de negativa'
de acrodo com as regras cadastradas na funcao
OPS - Cadastro de Regras - OPS - Atendimento - Requisicao - Regra notificacao negativa (Call Center)
----------------------------------------------------------------------------------------------------------------------
*/
nr_seq_regra_w		pls_regra_notif_atend_neg.nr_sequencia%type;
qt_regra_notific_w	bigint;
nr_seq_grupo_atend_w	pls_regra_notif_atend_neg.nr_seq_grupo_atend%type;
ds_motivo_atendimento_w	pls_regra_notif_atend_neg.ds_motivo_atend%type;
nr_seq_notific_atend_w	pls_notificacao_atend_neg.nr_sequencia%type;
nr_seq_segurado_w	pls_requisicao.nr_seq_segurado%type;
ds_historico_req_w	pls_requisicao_historico.ds_historico%type;

C01 CURSOR FOR
	SELECT	substr(tiss_obter_motivo_glosa(nr_seq_motivo_glosa,'C'),1,10) cd_motivo_glosa
	from	pls_requisicao_glosa
	where	coalesce(nr_seq_execucao::text, '') = ''
	and	(nr_seq_motivo_glosa IS NOT NULL AND nr_seq_motivo_glosa::text <> '')
	and	nr_seq_requisicao = nr_seq_requisicao_p
	
union

	SELECT	substr(tiss_obter_motivo_glosa(nr_seq_motivo_glosa,'C'),1,10) cd_motivo_glosa
	from	pls_requisicao_glosa
	where	coalesce(nr_seq_execucao::text, '') = ''
	and	(nr_seq_motivo_glosa IS NOT NULL AND nr_seq_motivo_glosa::text <> '')
	and	coalesce(nr_seq_requisicao::text, '') = ''
	and	nr_seq_req_mat in (	select   nr_sequencia
					from     pls_requisicao_mat
					where    nr_seq_requisicao = nr_seq_requisicao_p)
	
union

	select	substr(tiss_obter_motivo_glosa(nr_seq_motivo_glosa,'C'),1,10) cd_motivo_glosa
	from	pls_requisicao_glosa
	where	coalesce(nr_seq_execucao::text, '') = ''
	and	(nr_seq_motivo_glosa IS NOT NULL AND nr_seq_motivo_glosa::text <> '')
	and	coalesce(nr_seq_requisicao::text, '') = ''
	and	nr_seq_req_proc in (	select   nr_sequencia
					from     pls_requisicao_proc
					where    nr_seq_requisicao = nr_seq_requisicao_p);
BEGIN

select	count(1)
into STRICT	qt_regra_notific_w
from	pls_regra_notif_atend_neg
where	ie_situacao = 'A'
and	((pls_obter_se_controle_estab('RE') = 'S' and cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento)
or (pls_obter_se_controle_estab('RE') = 'N'));

if (qt_regra_notific_w > 0) then
	for c01_w in C01 loop
		if (c01_w.cd_motivo_glosa IS NOT NULL AND c01_w.cd_motivo_glosa::text <> '') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_regra_w
			from	pls_regra_notif_atend_neg
			where	cd_motivo_glosa = c01_w.cd_motivo_glosa
			and	ie_situacao = 'A';

			if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
				begin
					select	nr_seq_grupo_atend,
						ds_motivo_atend
					into STRICT	nr_seq_grupo_atend_w,
						ds_motivo_atendimento_w
					from	pls_regra_notif_atend_neg
					where	nr_sequencia = nr_seq_regra_w;
				exception
				when others then
					nr_seq_grupo_atend_w := null;
					ds_motivo_atendimento_w := null;
				end;

				exit;
			end if;
		end if;
	end loop;

	if (coalesce(nr_seq_regra_w::text, '') = '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_regra_w
		from	pls_regra_notif_atend_neg
		where	coalesce(cd_motivo_glosa::text, '') = ''
		and	ie_situacao = 'A';

		if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
			begin
				select	nr_seq_grupo_atend,
					ds_motivo_atend
				into STRICT	nr_seq_grupo_atend_w,
					ds_motivo_atendimento_w
				from	pls_regra_notif_atend_neg
				where	nr_sequencia = nr_seq_regra_w;
			exception
			when others then
				nr_seq_grupo_atend_w := null;
				ds_motivo_atendimento_w := null;
			end;
		end if;
	end if;

	if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
		select	max(nr_seq_segurado)
		into STRICT	nr_seq_segurado_w
		from	pls_requisicao
		where	nr_sequencia = nr_seq_requisicao_p;

		insert	into	pls_notificacao_atend_neg(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
									dt_fim_solicitacao, dt_solicitacao, ie_status,
									nm_usuario, nm_usuario_nrec, nr_seq_requisicao,
									nr_seq_grupo_atend, nr_seq_segurado, cd_estabelecimento)
			values (	nextval('pls_notificacao_atend_neg_seq'), clock_timestamp(), clock_timestamp(),
									null, clock_timestamp(), 'AG',
									nm_usuario_p, nm_usuario_p, nr_seq_requisicao_p,
									nr_seq_grupo_atend_w, nr_seq_segurado_w, cd_estabelecimento_p) returning nr_sequencia into nr_seq_notific_atend_w;

		CALL pls_gravar_hist_notific_neg(nr_seq_notific_atend_w, ds_motivo_atendimento_w, nm_usuario_p, cd_estabelecimento_p);

		ds_historico_req_w :=	expressao_pck.obter_desc_expressao(1043485)|| chr(13) || chr(10) ||
					expressao_pck.obter_desc_expressao(346472)||' '||nr_seq_regra_w||'. ' ||chr(13) || chr(10) ||
					expressao_pck.obter_desc_expressao(327458)||' '||ds_motivo_atendimento_w;

		CALL pls_gravar_hist_guia_req(nr_seq_requisicao_p, null, null, 'L', ds_historico_req_w, nm_usuario_p);
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_regra_notifi_neg ( nr_seq_requisicao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

