-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE html_obter_preco_mat_autor_esp ( nr_seq_autor_cir_p bigint, nr_seq_material_p bigint, nm_usuario_p text, ie_todos_p text, ie_opcao_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


/*
ie_todos_p
N- Apenas para o material selecionado
S- Todos os materiais

ie_opcao_p
1 - Obter preco material		=	ATUALIZAR_PRECO_MATERIAL_AUTOR
2 - Obter Preco Negociado	=	ATUALIZAR_PRECO_MAT_AUTOR_NEG
3 - Obter preco convenio	=	ATUALIZAR_PRECO_MAT_AUT_CONV
4 - Obter preco tabela (Sem taxas)	=	OBTER_PRECO_MAT_TAB_AUTOR
*/
	

nr_atendimento_w	bigint;
nr_seq_agenda_w		autorizacao_cirurgia.nr_seq_agenda%type;
cd_convenio_w		bigint;
cd_estabelecimento_w	bigint;
tx_acrescimo_w		double precision;
cd_categoria_w		varchar(10);
vl_material_w		double precision;
ie_origem_preco_w	varchar(15);
ds_retorno_w		varchar(4000);
ds_retorno_ww		varchar(4000) := '';
dt_ultima_vigencia_w	timestamp;
nr_seq_autor_conv_w 	bigint;

c01 CURSOR FOR
SELECT	a.*
from	material_autor_cirurgia a
where	a.nr_seq_autorizacao	= nr_seq_autor_cir_p
and	ie_todos_p		= 'S'

union

SELECT	a.*
from	material_autor_cirurgia a
where	a.nr_sequencia		= nr_seq_material_p
and	ie_todos_p		= 'N';


c01_w	c01%rowtype;
			

BEGIN

select	max(nr_atendimento),
	max(nr_seq_agenda),
	max(cd_estabelecimento),
	max(nr_seq_autor_conv)
into STRICT	nr_atendimento_w,
	nr_seq_agenda_w,
	cd_estabelecimento_w,
	nr_seq_autor_conv_w
from	autorizacao_cirurgia
where	nr_sequencia	= nr_seq_autor_cir_p;

if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
	select 	obter_convenio_atendimento(nr_atendimento_w),
		obter_categoria_atendimento(nr_atendimento_w)
	into STRICT	cd_convenio_w,
		cd_categoria_w
	;
elsif (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then
	
	select	max(cd_convenio),
		max(cd_categoria)
	into STRICT	cd_convenio_w,
		cd_categoria_w
	from 	agenda_paciente
	where 	nr_sequencia = nr_seq_agenda_w;		
elsif (nr_seq_autor_conv_w IS NOT NULL AND nr_seq_autor_conv_w::text <> '') then

	select	max(cd_convenio),
		max(obter_dados_autor_convenio(nr_sequencia,'CC'))
	into STRICT	cd_convenio_w,
		cd_categoria_w
	from 	autorizacao_convenio
	where 	nr_sequencia = nr_seq_autor_conv_w;	
end if;

if (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then

	open C01;
	loop
	fetch C01 into	
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		select 	obter_tx_comercializacao_conv(cd_convenio_w,cd_estabelecimento_w,clock_timestamp(),c01_w.cd_material,cd_categoria_w)
		into STRICT	tx_acrescimo_w
		;
			
		if (tx_acrescimo_w IS NOT NULL AND tx_acrescimo_w::text <> '') and (coalesce(c01_w.pr_adicional,0) = 0) then
			
			update	material_autor_cirurgia
			set	pr_adicional = tx_acrescimo_w,
                nm_usuario = nm_usuario_p,
                dt_atualizacao = clock_timestamp()
			where	nr_sequencia = c01_w.nr_sequencia;
			

			
		end if;
		
		if (ie_opcao_p = 1) then
		
			ds_retorno_w := ATUALIZAR_PRECO_MATERIAL_AUTOR(c01_w.nr_sequencia, cd_estabelecimento_w, nm_usuario_p, ds_retorno_w);
		
		elsif (ie_opcao_p = 2) then
		
			ds_retorno_w := ATUALIZAR_PRECO_MAT_AUTOR_NEG(c01_w.nr_sequencia, cd_estabelecimento_w, nm_usuario_p, ds_retorno_w);
		
		elsif (ie_opcao_p = 3) then
		
			ds_retorno_w := ATUALIZAR_PRECO_MAT_AUT_CONV(c01_w.nr_sequencia, null, cd_estabelecimento_w, nm_usuario_p, ds_retorno_w);
		
		elsif (ie_opcao_p = 4) then
		
			SELECT * FROM OBTER_PRECO_MAT_TAB_AUTOR(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, c01_w.cd_material, c01_w.nr_seq_marca, vl_material_w, ie_origem_preco_w, dt_ultima_vigencia_w) INTO STRICT vl_material_w, ie_origem_preco_w, dt_ultima_vigencia_w;
			
			update	material_autor_cirurgia
			set    	vl_material 		= coalesce(qt_solicitada,0) * vl_material_w,
				vl_unitario_material 	= vl_material_w,
				ie_origem_preco      	= ie_origem_preco_w,
                nm_usuario = nm_usuario_p,
                dt_atualizacao = clock_timestamp()
			where  	nr_sequencia		= c01_w.nr_sequencia;
		
		end if;
		
		if (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') and (coalesce(ds_retorno_ww::text, '') = '') then
			
			ds_retorno_ww := ds_retorno_w;
			ds_retorno_w := '';
			
		elsif (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') and (ds_retorno_ww IS NOT NULL AND ds_retorno_ww::text <> '') then
			
			ds_retorno_ww := ds_retorno_ww || ', ' || ds_retorno_w;
			ds_retorno_w := '';
			
		end if;
		
		end;
	end loop;
	close C01;
	
end if;

ds_retorno_p := ds_retorno_ww;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE html_obter_preco_mat_autor_esp ( nr_seq_autor_cir_p bigint, nr_seq_material_p bigint, nm_usuario_p text, ie_todos_p text, ie_opcao_p text, ds_retorno_p INOUT text) FROM PUBLIC;

