-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_desfecho_pep ( nr_atendimento_p bigint, ie_desfecho_p text, ie_exige_diagnostico_p text, ie_tipo_atend_internacao_p bigint, cd_motivo_alta_p bigint, cd_setor_transf_novo_atend_p bigint, cd_setor_transf_p bigint, ie_desdobrar_conta_p text, ie_atualizar_atendimento_pac_p text, cd_medico_destino_p text, ds_erro_diagnostico_p INOUT text, ds_erro_alta_p INOUT text, ds_compl_erro_p INOUT text, ie_lib_diag_medico_p INOUT text, nr_seq_motivo_p bigint, cd_cgc_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

		 
qt_diagnostico_w				bigint;
ds_erro_diagnostico_w			varchar(255);
ds_erro_alta_w					varchar(255);
ds_compl_erro_w					varchar(255);
ie_medico_w						varchar(1);
ie_lib_diag_medico_w			varchar(1);
ie_consiste_evasao_w			varchar(1);
ie_permite_desfe_int_w			varchar(1);
ie_consite_motivo_alta_w 		varchar(1);
ie_consiste_alta_ps_w			varchar(1);
ie_tempo_internacao_ps_w 		varchar(1);
ie_transferencia_w				varchar(1) := 'N';
ie_consiste_transferencia_w		varchar(1);
ie_consiste_motivo_transf_w		varchar(1);
cd_setor_transf_novo_atend_w	integer;
		

BEGIN 
ie_consiste_alta_ps_w := obter_param_usuario(935, 178, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_alta_ps_w);	
ie_consiste_transferencia_w := obter_param_usuario(935, 188, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_transferencia_w);
ie_consiste_motivo_transf_w := obter_param_usuario(935, 189, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_motivo_transf_w);
 
select	max(ie_lib_diag_medico) 
into STRICT	ie_lib_diag_medico_w 
from	parametro_medico 
where	cd_estabelecimento = cd_estabelecimento_p;
 
if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then 
	begin 
	if (cd_medico_destino_p IS NOT NULL AND cd_medico_destino_p::text <> '') then 
		begin 
		ie_medico_w	:= obter_se_medico(cd_medico_destino_p,'M');
		 
		if (ie_medico_w = 'N') then 
			begin 
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(188028);
			end;
		end if;
		end;
	end if;
	 
	if (ie_consiste_alta_ps_w = 'S') and (ie_desfecho_p = 'A') then 
		begin 
		ie_tempo_internacao_ps_w := verifica_tempo_internacao_ps(nr_atendimento_p, null);
		 
		if (ie_tempo_internacao_ps_w = 'S') then 
			begin 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(191081);
			end;
		end if;
		end;
	end if;
	 
	select	max(ie_transferencia) 
	into STRICT	ie_transferencia_w 
	from	motivo_alta 
	where	cd_motivo_alta = cd_motivo_alta_p;
	 
	if (ie_desfecho_p = 'A') and (coalesce(cd_motivo_alta_p::text, '') = '') and (ie_transferencia_w = 'S')then 
		begin 
		if (ie_consiste_transferencia_w = 'S') and (coalesce(cd_cgc_p::text, '') = '') then		 
			begin 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(199199);
			end;
		end if;
		 
		if (ie_consiste_motivo_transf_w = 'S') and (coalesce(nr_seq_motivo_p::text, '') = '') then		 
			begin 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(199200);
			end;
		end if;
		end;
	end if;
 
	if (ie_desfecho_p = 'I') then 
		begin 
			if (cd_motivo_alta_p > 0) then 
				begin 
				ds_erro_alta_w := gerar_estornar_alta(nr_atendimento_p, 'A', 0, cd_motivo_alta_p, clock_timestamp(), nm_usuario_p, ds_erro_alta_w, nr_seq_motivo_p, cd_cgc_p, null);
				cd_setor_transf_novo_atend_w := obter_regra_setor_desfecho(nr_atendimento_p, cd_setor_transf_novo_atend_w);
				 
				if (cd_setor_transf_novo_atend_w = 0) then 
					begin 
					cd_setor_transf_novo_atend_w := cd_setor_transf_novo_atend_p;
					end;
				end if;
				 
				if (cd_setor_transf_novo_atend_w > 0) then 
					begin 
					CALL gerar_transf_novo_atend_pa(nr_atendimento_p, cd_setor_transf_novo_atend_p, nm_usuario_p);
					end;
				end if;
				end;
			end if;
			 
			if (cd_setor_transf_p > 0) then 
				begin 
				CALL gerar_transf_atend_pa(nr_atendimento_p, cd_setor_transf_p, nm_usuario_p);
				end;
			end if;
			 
			if (ie_tipo_atend_internacao_p > 0) then 
				begin 
				CALL alterar_tipo_atend_novo_pa(nr_atendimento_p, ie_tipo_atend_internacao_p, nm_usuario_p);
				end;
			end if;
			 
			if (ie_desdobrar_conta_p = 'S') then 
				begin 
				CALL desdobrar_conta_paciente_pa(nr_atendimento_p, nm_usuario_p);
				end;
			end if;
		end;
	end if;
		 
	if (ie_atualizar_atendimento_pac_p = 'S') then 
		begin 
		CALL atualizar_tipo_atendimento_pac(nr_atendimento_p,nm_usuario_p);
		end;
	end if;
	end;
end if;
ds_erro_diagnostico_p	:= ds_erro_diagnostico_w;
ds_erro_alta_p			:= ds_erro_alta_w;
ds_compl_erro_p			:= ds_compl_erro_w;
ie_lib_diag_medico_p	:= ie_lib_diag_medico_w;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_desfecho_pep ( nr_atendimento_p bigint, ie_desfecho_p text, ie_exige_diagnostico_p text, ie_tipo_atend_internacao_p bigint, cd_motivo_alta_p bigint, cd_setor_transf_novo_atend_p bigint, cd_setor_transf_p bigint, ie_desdobrar_conta_p text, ie_atualizar_atendimento_pac_p text, cd_medico_destino_p text, ds_erro_diagnostico_p INOUT text, ds_erro_alta_p INOUT text, ds_compl_erro_p INOUT text, ie_lib_diag_medico_p INOUT text, nr_seq_motivo_p bigint, cd_cgc_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

