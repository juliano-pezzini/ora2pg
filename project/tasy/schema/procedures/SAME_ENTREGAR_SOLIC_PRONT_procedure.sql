-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE same_entregar_solic_pront (nr_seq_lote_p bigint, nr_seq_solic_p bigint, ie_acao_p text, nm_usuario_p text, ds_observacao_p text, nr_seq_motivo_p bigint, cd_estabelecimento_p bigint) AS $body$
DECLARE

/*
'E' = Entregar
'P' = Desfazer entrega (deixar pendente)
'C' = Cancelar
'D' = Devolver
'R' = Recebimento pelo setor
'V' = Recebimento da devolução pelo setor
*/
nr_seq_lote_w			bigint;
nr_seq_solic_w			bigint;
ds_erro_w			varchar(4000):= '';
ds_prontuarios_w		varchar(2000) := '';
ie_status_w			varchar(05);
ie_status_ant_w			varchar(05);
nm_pessoa_fisica_w		varchar(254);
nr_seq_pront_w			bigint;
cd_pessoa_fisica_w		varchar(10);
cd_pessoa_solicitante_w		varchar(10);
cd_setor_solicitante_w		integer;/* Ivan em 29/11/2007 OS74176 */
nr_prontuario_w			bigint;
nr_atendimento_w		bigint;
ds_atendimento_w		varchar(100);
nr_seq_agrup_w			bigint;
nr_seq_caixa_w			bigint;
nr_seq_local_w			bigint;
ds_loc_atual_w			varchar(100);/* Ivan em 19/06/2007 OS59672 */
nr_operacao_w			bigint;/* Ivan em 23/06/2007 OS59672 */
ie_tipo_solicitacao_w		varchar(1);
qt_pedido_w			bigint;/* Oraci em 21/11/2007 OS71890 */
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
dt_periodo_inicial_pront_w	timestamp;
dt_periodo_final_pront_w	timestamp;
qt_restante_w			bigint;
cd_estabelecimento_w		smallint;
nr_seq_motivo_w			bigint;
ie_status_dev_w			varchar(1);
ds_parametro_w			varchar(10) := obter_valor_param_usuario(941,103,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p);
qt_nao_entregue_w		integer;
ie_forma_visualizar_pront_w	varchar(1) := obter_valor_param_usuario(941,135,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p);
ie_status_log_w			varchar(1);
qt_nao_cancelado_w		bigint;
cd_pessoa_retirada_w	varchar(10);

c01 CURSOR FOR
	SELECT	nr_seq_lote,
		nr_sequencia,
		coalesce(nr_atendimento,0),
		cd_pessoa_fisica,
		cd_pessoa_solicitante,
		cd_setor_solicitante,
		ie_tipo_solicitacao,
		ie_status,
		dt_periodo_inicial,
		dt_periodo_final,
		cd_pessoa_retirada
	from	same_solic_pront
	where	(((coalesce(nr_seq_lote_p,-1) > -1 ) and (coalesce(nr_seq_lote,-1) = coalesce(nr_seq_lote_p, -1))) or (coalesce(nr_seq_lote_p, -1) = -1))
	and 	nr_sequencia		= coalesce(nr_seq_solic_p, nr_sequencia)
	and	ie_status <> 'C'
	and	((ie_status <> 'E') or (ie_acao_p <> 'E'))
	and	((ds_parametro_w = 'N') or (coalesce(cd_estabelecimento_solic, cd_estabelecimento) = cd_estabelecimento_p));

c02 CURSOR FOR
	SELECT	nr_sequencia,
		ie_status,
		CASE WHEN coalesce(nr_atendimento::text, '') = '' THEN  null  ELSE ' - ' || obter_desc_expressao(729675) || ' ' || nr_atendimento END ,
		coalesce(obter_pessoa_atendimento(nr_atendimento, 'N'), obter_nome_pf_pj(cd_pessoa_fisica, null)) nm_pessoa_fisica,
		nr_seq_local,
		nr_seq_caixa,
		nr_seq_agrup,
		substr(obter_nome_setor(cd_setor_atendimento),1,100),
		cd_estabelecimento
	from	same_prontuario
	where (nr_atendimento		= nr_atendimento_w or nr_atendimento_w = 0)
	and	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	dt_periodo_inicial_w	>= dt_periodo_inicial
	and	dt_periodo_final_w	<= coalesce(dt_periodo_final,clock_timestamp())
	and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p))
	order 	by nr_atendimento;

c03 CURSOR FOR
	SELECT	nr_sequencia,
		ie_status,
		CASE WHEN coalesce(nr_atendimento::text, '') = '' THEN  null  ELSE ' - ' || obter_desc_expressao(729675) || ' ' || nr_atendimento END ,
		coalesce(obter_pessoa_atendimento(nr_atendimento, 'N'), obter_nome_pf_pj(cd_pessoa_fisica, null)) nm_pessoa_fisica,
		nr_seq_local,
		nr_seq_caixa,
		nr_seq_agrup,
		substr(obter_nome_setor(cd_setor_atendimento),1,100)
	from	same_prontuario
	where (nr_atendimento		= nr_atendimento_w or nr_atendimento_w = 0)
	and	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p))
	order 	by nr_atendimento;


BEGIN

select	coalesce(max(obter_valor_param_usuario(941, 82, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'D')
into STRICT	ie_status_dev_w
;

open c01;
loop
fetch c01 into
	nr_seq_lote_w,
	nr_seq_solic_w,
	nr_atendimento_w,
	cd_pessoa_fisica_w,
	cd_pessoa_solicitante_w,
	cd_setor_solicitante_w,
	ie_tipo_solicitacao_w,
	ie_status_ant_w,
	dt_periodo_inicial_w,
	dt_periodo_final_w,
	cd_pessoa_retirada_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	if (ie_acao_p = 'P') then /* Ivan em 08/06/2007 OS58890*/
		update	same_solic_pront
		set	dt_entrega	= CASE WHEN ie_acao_p='E' THEN  clock_timestamp()  ELSE null END ,
			ie_status	= ie_acao_p,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			nm_usuario_entrega	 = NULL,
			nr_seq_motivo_cancel  = nr_seq_motivo_p,
			ds_obs_cancel	= ds_observacao_p,
			dt_recebimento	 = NULL,
			dt_recebimento_setor	 = NULL,
			nm_usuario_receb	 = NULL
		where	nr_sequencia	= nr_seq_solic_w
		and	ie_status	in ('E','R');

	elsif (ie_acao_p = 'E') then

		select	max(ie_status)
		into STRICT	ie_status_log_w
		from	same_solic_pront
		where	nr_Sequencia = nr_seq_solic_w;

		CALL gravar_log_tasy(45878,wheb_mensagem_pck.get_texto(800325)||' '||nr_seq_solic_w||' '||wheb_mensagem_pck.get_texto(803039)||': '||nr_seq_lote_w||' '||wheb_mensagem_pck.get_texto(803041)||': '||nr_seq_lote_p||' '||wheb_mensagem_pck.get_texto(793128)||' '||ie_status_log_w,nm_usuario_p);

		update	same_solic_pront
		set	dt_entrega	= CASE WHEN ie_acao_p='E' THEN  clock_timestamp()  ELSE null END ,
			nm_usuario_entrega	= nm_usuario_p,
			ie_status	= ie_acao_p,
			dt_devolucao     = NULL,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			dt_receb_devolucao  = NULL,
			nm_usuario_receb_dev  = NULL,
			dt_recebimento  = NULL,
			nm_usuario_receb  = NULL
		where	nr_sequencia	= nr_seq_solic_w
		and	ie_status	in ('P','D');

		if (ie_forma_visualizar_pront_w in ('L','N')) then
			select	max(nr_seq_lote)
			into STRICT	nr_seq_lote_w
			from	same_solic_pront
			where	nr_sequencia = nr_seq_solic_w;

			select	count(*)
			into STRICT	qt_nao_entregue_w
			from	same_solic_pront
			where	nr_seq_lote = nr_seq_lote_w
			and	ie_status <> 'E';

			if (qt_nao_entregue_w = 0) then
				update	same_solic_pront_lote
				set	dt_entrega		= clock_timestamp(),
					ie_status		= ie_acao_p,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia		= coalesce(nr_seq_lote_w, -1);
			end if;
		end if;

	elsif (ie_acao_p = 'C') then

		update	same_solic_pront
		set	dt_entrega	= CASE WHEN ie_acao_p='E' THEN  clock_timestamp()  ELSE null END ,
			ie_status	= ie_acao_p,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			nr_seq_motivo_cancel = nr_seq_motivo_p,
			ds_obs_cancel	= ds_observacao_p,
			nm_usuario_cancelamento = nm_usuario_p
		where	nr_sequencia	= nr_seq_solic_w;

		if (nr_seq_lote_w IS NOT NULL AND nr_seq_lote_w::text <> '') then
			select	count(*)
			into STRICT	qt_nao_cancelado_w
			from	same_solic_pront
			where	nr_seq_lote = nr_seq_lote_w
			and		ie_status <> 'C';

			if (qt_nao_cancelado_w = 0) then
				update 	same_solic_pront_lote
				set		ie_status = ie_acao_p,
						dt_atualizacao = clock_timestamp(),
						nm_usuario = nm_usuario_p
				where	nr_sequencia = nr_seq_lote_w;
			end if;
		end if;
	elsif (ie_acao_p = 'D') then

		update	same_solic_pront
		set	dt_devolucao	= clock_timestamp(),
			ie_status 	= ie_status_dev_w,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_solic_w
		and	coalesce(dt_devolucao::text, '') = '';

		update	same_solic_pront_envelope
		set		dt_devolucao = clock_timestamp(),
				dt_atualizacao	= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				cd_pessoa_devol =  Obter_dados_usuario_opcao(nm_usuario_p, 'C')
		where	nr_seq_solic = 	nr_seq_solic_w;

	elsif (ie_acao_p = 'R') then

		update	same_solic_pront
		set	dt_recebimento_setor	= clock_timestamp(),
			ie_status 	= ie_acao_p,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			nm_usuario_receb	= nm_usuario_p,
			nm_usuario_receb_setor = nm_usuario_p
		where	nr_sequencia		= nr_seq_solic_w
		and	coalesce(dt_devolucao::text, '') = ''
		and	ie_status		 in ('E','R');

	elsif (ie_acao_p = 'V') then

		update	same_solic_pront
		set	dt_receb_devolucao	= clock_timestamp(),
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			nm_usuario_receb_dev 	= nm_usuario_p,
			ie_status		= 'D'
		where	nr_sequencia		= nr_seq_solic_w
		and	(dt_devolucao IS NOT NULL AND dt_devolucao::text <> '')
		and	((ie_status		 = 'D') or (ie_status		 = ie_status_dev_w));

	end if;

	if	(dt_periodo_inicial_w IS NOT NULL AND dt_periodo_inicial_w::text <> '' AND dt_periodo_final_w IS NOT NULL AND dt_periodo_final_w::text <> '') then

		open C02;
			loop
			fetch C02 into
				nr_seq_pront_w,
				ie_status_w,
				ds_atendimento_w,
				nm_pessoa_fisica_w,
				nr_seq_local_w,
				nr_seq_caixa_w,
				nr_seq_agrup_w,
				ds_loc_atual_w,
				cd_estabelecimento_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				if (ie_status_w in ('1','9')) and (ie_acao_p = 'E') and (ie_tipo_solicitacao_w <> 'C') and (ie_status_ant_w <> 'E') and (ie_status_ant_w <> 'D') then
					update	same_prontuario
					set	dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p,
						ie_status		= '9'
					where	nr_sequencia		= nr_seq_pront_w
					and (nr_atendimento		= nr_atendimento_w or nr_atendimento_w = 0)
					and	cd_pessoa_fisica	= cd_pessoa_fisica_w;

					if (nr_seq_caixa_w IS NOT NULL AND nr_seq_caixa_w::text <> '') then
						begin
						rollback;
						ds_erro_w		:= wheb_mensagem_pck.get_texto(209935);
						CALL Wheb_mensagem_pck.exibir_mensagem_abort(209935);
						end;
					end if;

					CALL Gestao_Prontuario_Same(	nr_seq_pront_w,
								nm_usuario_p,
								cd_pessoa_solicitante_w,
								cd_setor_solicitante_w,
								nr_seq_local_w,
								nr_seq_caixa_w,
								nr_seq_agrup_w,
								'',
								19,
								null,
								null,
								null);

				elsif (ie_status_w in ('9')) and (ie_acao_p = 'P') and (ie_tipo_solicitacao_w <> 'C') then

					/* Verifica se ainda tem alguma solicitação por período não entregue */

					select	dt_periodo_inicial,
						coalesce(dt_periodo_final,clock_timestamp())
					into STRICT	dt_periodo_inicial_pront_w,
						dt_periodo_final_pront_w
					from	same_prontuario
					where	nr_sequencia		= nr_seq_pront_w;

					select	count(*)
					into STRICT	qt_restante_w
					from	same_solic_pront a
					where	a.cd_estabelecimento    = cd_estabelecimento_w
					and	a.nr_atendimento        = nr_atendimento_w
					and	(a.dt_periodo_inicial IS NOT NULL AND a.dt_periodo_inicial::text <> '')
					and	(a.dt_periodo_final IS NOT NULL AND a.dt_periodo_final::text <> '')
					and	a.ie_status		in ('E','R')
					and	a.dt_periodo_inicial    >= dt_periodo_inicial_pront_w
					and	a.dt_periodo_final      <= dt_periodo_final_pront_w
					and	((ds_parametro_w = 'N') or (coalesce(cd_estabelecimento,cd_estabelecimento_solic) = cd_estabelecimento_p));

					/* Caso não tenha mais solicitações em aberto, volta o status do prontuário para armazenado */

					if (qt_restante_w = 0) then
						update	same_prontuario
						set	ie_status    	= '1'
						where	nr_sequencia 	= nr_seq_pront_w;
					end if;

					/* Ao desfazer um item deve setar o status do lote como entregue, caso já não esteja */

					update	same_solic_pront_lote
					set	dt_entrega		= CASE WHEN ie_acao_p='E' THEN  clock_timestamp()  ELSE null END ,
						ie_status		= ie_acao_p,
						dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p
					where	nr_sequencia		= coalesce(nr_seq_lote_w, -1);

					/* Gera um histórico */

					CALL Gestao_Prontuario_Same(	nr_seq_pront_w,
								nm_usuario_p,
								cd_pessoa_solicitante_w,
								cd_setor_solicitante_w,
								nr_seq_local_w,
								nr_seq_caixa_w,
								nr_seq_agrup_w,
								'',
								22,
								null,
								null,
								null);
				elsif (ie_status_w in ('9')) and (ie_acao_p = 'D') and (ie_tipo_solicitacao_w <> 'C') then
					CALL Same_Devolver_Solic_Periodo(nr_seq_pront_w, nr_seq_solic_w, nm_usuario_p, 'D');
				elsif (ie_status_w in ('9')) and (ie_acao_p = 'R') and (ie_tipo_solicitacao_w <> 'C') then
					CALL Gestao_Prontuario_Same(	nr_seq_pront_w,
								nm_usuario_p,
								cd_pessoa_solicitante_w,
								cd_setor_solicitante_w,
								nr_seq_local_w,
								nr_seq_caixa_w,
								nr_seq_agrup_w,
								'',
								38,
								null,
								null,
								null);
				end if;
			end loop;
		close C02;
	else
		begin
		open C03;
		loop
		fetch C03 into
				nr_seq_pront_w,
				ie_status_w,
				ds_atendimento_w,
				nm_pessoa_fisica_w,
				nr_seq_local_w,
				nr_seq_caixa_w,
				nr_seq_agrup_w,
				ds_loc_atual_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
			if (ie_status_w = '1') then
				begin
				if (ie_acao_p = 'E' AND ie_tipo_solicitacao_w <> 'C') then
					begin
					update	same_prontuario
					set	dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p,
						ie_status		= '8'
					where	nr_sequencia		= nr_seq_pront_w
					and (nr_atendimento		= nr_atendimento_w or nr_atendimento_w = 0)
					and	cd_pessoa_fisica	= cd_pessoa_fisica_w;

					if (nr_seq_caixa_w IS NOT NULL AND nr_seq_caixa_w::text <> '') then
						begin
						rollback;
						ds_erro_w		:= wheb_mensagem_pck.get_texto(209935);
						CALL Wheb_mensagem_pck.exibir_mensagem_abort(209935);
						end;
					end if;
					end;
				end if;
				end;
			elsif (ie_status_w = '2' AND ie_acao_p = 'E') then
				begin
				rollback;
				ds_erro_w	:= wheb_mensagem_pck.get_texto(803045)||'.#@#@';
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(209936);
				end;
			elsif ((ie_status_w <> '6') and (ie_status_w <> '10') and (ie_acao_p = 'E')) then
				begin
				ds_prontuarios_w 	:= ds_prontuarios_w || nm_pessoa_fisica_w || ds_atendimento_w || chr(13);
				ds_erro_w		:= '';
				if (ds_prontuarios_w IS NOT NULL AND ds_prontuarios_w::text <> '') then
					ds_erro_w := substr(wheb_mensagem_pck.get_texto(209937,
										'DS_PRONTUARIO='||ds_prontuarios_w||
										';DS_LOC_ATUAL='||ds_loc_atual_w) || chr(13) || chr(13),1,254);
					rollback;
					CALL Wheb_mensagem_pck.exibir_mensagem_abort(209937,'DS_PRONTUARIO='||ds_prontuarios_w||';DS_LOC_ATUAL='||ds_loc_atual_w);
				end if;
				end;

			elsif ((ie_status_w = '8') and (ie_acao_p = 'P') and (ie_tipo_solicitacao_w <> 'C')) then
				begin
				update	same_prontuario
				set	dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p,
					ie_status		= '1'
				where	nr_sequencia		= nr_seq_pront_w
				and (nr_atendimento		= nr_atendimento_w or nr_atendimento_w = 0)
				and	cd_pessoa_fisica	= cd_pessoa_fisica_w;

				/* Ao desfazer um item deve setar o status do lote como entregue, caso já não esteja */

				update	same_solic_pront_lote
				set	dt_entrega		= CASE WHEN ie_acao_p='E' THEN  clock_timestamp()  ELSE null END ,
					ie_status		= ie_acao_p,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia		= coalesce(nr_seq_lote_w, -1);

				end;


			end if;
		end loop;
		close c03;
		open C03;
		loop
		fetch C03 into
			nr_seq_pront_w,
			ie_status_w,
			ds_atendimento_w,
			nm_pessoa_fisica_w,
			nr_seq_local_w,
			nr_seq_caixa_w,
			nr_seq_agrup_w,
			ds_loc_atual_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
		if (ie_status_ant_w in ('E','P','R')) then
			begin
			if 	((coalesce(ds_erro_w::text, '') = '') and (ie_status_w <> 6) and (ie_status_w <> 10) and (ie_acao_p = 'E') and (ie_tipo_solicitacao_w <> 'C')) then
				begin

				/* Verifica o último histórico gerado, caso seja igual ao que se quer gerar, não gera histórico */

				select	max(nr_sequencia)
				into STRICT	nr_operacao_w
				from	same_prontuario_hist
				where	nr_seq_same = nr_seq_pront_w;

				select	max(nr_seq_operacao)
				into STRICT	nr_operacao_w
				from	same_prontuario_hist
				where	nr_sequencia = nr_operacao_w;

				if	((nr_operacao_w <> 11) or (coalesce(nr_operacao_w::text, '') = '')) then
					CALL Gestao_Prontuario_Same(	nr_seq_pront_w,
								nm_usuario_p,
								cd_pessoa_solicitante_w,
								cd_setor_solicitante_w,
								nr_seq_local_w,
								nr_seq_caixa_w,
								nr_seq_agrup_w,
								'',
								17,
								null,
								null,
								null);

					select	max(nr_sequencia)
					into STRICT	nr_operacao_w
					from	same_prontuario_hist
					where	nr_seq_same = nr_seq_pront_w;

					update	same_prontuario_hist
					set		cd_pessoa_retirada = cd_pessoa_retirada_w
					where	nr_sequencia = nr_operacao_w;

				end if;
				end;
			elsif 	((coalesce(ds_erro_w::text, '') = '') and (ie_status_w <> 6) and (ie_status_w <> 10) and (ie_acao_p = 'P') and (ie_tipo_solicitacao_w <> 'C')) then
				begin
				CALL Gestao_Prontuario_Same(	nr_seq_pront_w,
							nm_usuario_p,
							cd_pessoa_solicitante_w,
							cd_setor_solicitante_w,
							nr_seq_local_w,
							nr_seq_caixa_w,
							nr_seq_agrup_w,
							'',
							18,
							null,
							null,
							null);
				end;
			elsif	((coalesce(ds_erro_w::text, '') = '') and (ie_status_w <> 6) and (ie_status_w <> 10) and (ie_acao_p = 'D') and (ie_tipo_solicitacao_w <> 'C')) then
				begin
				select	max(nr_sequencia)
				into STRICT	nr_operacao_w
				from	same_prontuario_hist
				where	nr_seq_same = nr_seq_pront_w;

				select	max(nr_seq_operacao)
				into STRICT	nr_operacao_w
				from	same_prontuario_hist
				where	nr_sequencia = nr_operacao_w;
				if	((nr_operacao_w <> 12 and (nr_operacao_w <> 33)) or (coalesce(nr_operacao_w::text, '') = '')) then

					CALL Gestao_Prontuario_Same(	nr_seq_pront_w,
								nm_usuario_p,
								cd_pessoa_solicitante_w,
								cd_setor_solicitante_w,
								nr_seq_local_w,
								nr_seq_caixa_w,
								nr_seq_agrup_w,
								'',
								33,
								null,
								null,
								null);
				end if;
				end;
			end if;
			end;
		elsif (ie_status_ant_w = 'V' AND ie_acao_p = 'V') then
			begin
			CALL Gestao_Prontuario_Same(	nr_seq_pront_w,
						nm_usuario_p,
						cd_pessoa_solicitante_w,
						cd_setor_solicitante_w,
						nr_seq_local_w,
						nr_seq_caixa_w,
						nr_seq_agrup_w,
						'',
						31,
						null,
						null,
						null);
			end;
		elsif (ie_acao_p = 'R')then
			CALL Gestao_Prontuario_Same(	nr_seq_pront_w,
						nm_usuario_p,
						cd_pessoa_solicitante_w,
						cd_setor_solicitante_w,
						nr_seq_local_w,
						nr_seq_caixa_w,
						nr_seq_agrup_w,
						'',
						38,
						null,
						null,
						null);
		end if;
		end loop;
		close C03;
		end;
	end if;
end loop;
close C01;
if (nr_seq_lote_p = nr_seq_lote_w) then /* Quando o número do lote passado no parâmetro  for igual ao lido no banco é porque deve atualizar o status do lote - Ivan em 08/06/2007 OS58890*/
	update	same_solic_pront_lote
	set	dt_entrega	= CASE WHEN ie_acao_p='E' THEN  clock_timestamp()  ELSE null END ,
		ie_status	= CASE WHEN ie_acao_p='D' THEN ie_status_dev_w  ELSE ie_acao_p END ,
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_sequencia	= coalesce(nr_seq_lote_w, -1)
	and	not exists (SELECT 1
			from 	same_solic_pront
			where	nr_seq_lote = nr_seq_lote_w
			and	ie_status = ie_status_ant_w);
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE same_entregar_solic_pront (nr_seq_lote_p bigint, nr_seq_solic_p bigint, ie_acao_p text, nm_usuario_p text, ds_observacao_p text, nr_seq_motivo_p bigint, cd_estabelecimento_p bigint) FROM PUBLIC;

