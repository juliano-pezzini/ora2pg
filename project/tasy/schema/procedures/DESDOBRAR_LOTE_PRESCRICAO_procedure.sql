-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE desdobrar_lote_prescricao ( nr_seq_lote_p bigint, nm_usuario_p text, ie_opcao_p text, nr_motivo_p bigint, ds_motivo_p text, ie_impressao_lote_p text, nr_novo_lote_p INOUT bigint, ie_status_lote_p text default null) AS $body$
DECLARE


qt_registros_w		smallint;
nr_seq_lote_novo_w	bigint;
nr_seq_item_w		bigint;
nr_seq_mat_hor_w	bigint;
qt_original_w		double precision;
qt_ajuste_w		double precision;
ds_maq_user_w		varchar(80);
nr_seq_lote_sup_w	bigint;
gerar_lote_unico_w	varchar(1);
cd_estabelecimento_w	smallint;
ie_status_lote_w	varchar(3) := '';
nr_seq_historico_w	bigint;
ie_motivo_desdobra_w	varchar(1);
qt_existe_w		integer;
qt_dispensar_hora_w		w_grava_lote_alterado.qt_dispensar_hor%type;
qt_dispensar_hor_w		w_grava_lote_alterado.qt_dispensar_hor%type;
qt_dispensar_real_w 	double precision;
cd_material_w			integer;

c01 CURSOR FOR
	SELECT 	nr_seq_item,
			nr_seq_mat_hor,
			qt_original,
			qt_ajuste,
			cd_material
	from 	w_ap_lote_desdob
	where	nr_seq_lote = nr_seq_lote_p;


BEGIN
begin
gerar_lote_unico_w := obter_param_usuario(7029, 44, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, gerar_lote_unico_w);
ie_status_lote_w := obter_param_usuario(7029, 63, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_status_lote_w);
ie_motivo_desdobra_w := obter_param_usuario(7029, 69, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_motivo_desdobra_w);
select	a.cd_estabelecimento
into STRICT	cd_estabelecimento_w
from 	prescr_medica a,
	ap_lote b
where 	a.nr_prescricao = b.nr_prescricao
and   	b.nr_sequencia = nr_seq_lote_p;

select	substr(obter_inf_sessao(0) ||' - ' || obter_inf_sessao(1),1,80)
into STRICT	ds_maq_user_w	
;

select 	count(*)
into STRICT	qt_registros_w
from 	w_ap_lote_desdob
where 	nr_seq_lote = nr_seq_lote_p;

select	max(nr_sequencia)
into STRICT	nr_seq_lote_sup_w
from  	ap_lote
where  	ie_status_lote = 'G'
and    	nr_seq_lote_sup = nr_seq_lote_p;

if (qt_registros_w > 0) then

	if	((coalesce(nr_seq_lote_sup_w::text, '') = '') and (coalesce(gerar_lote_unico_w,'N') = 'S')) or (coalesce(gerar_lote_unico_w,'N') = 'N') then
	
		if (ie_opcao_p <> 'R') then
			select 	nextval('ap_lote_seq')
			into STRICT	nr_seq_lote_novo_w
			;
			
			nr_novo_lote_p	:= nr_seq_lote_novo_w;
		end if;
		
		if (ie_opcao_p = 'D') then
			begin
			insert into ap_lote(
					nr_sequencia,
					ie_status_lote,
					cd_setor_atendimento,
					dt_geracao_lote,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_prescricao,
					nr_seq_turno,
					dt_inicio_dispensacao,
					nm_usuario_ini_disp,
					ds_maquina_ini_disp,
					dt_atend_farmacia,
					nm_usuario_atend,
					ds_maquina_atend,
					dt_disp_farmacia,
					nm_usuario_disp,
					dt_entrega_setor,
					nm_usuario_entrega,
					ds_maquina_disp,
					dt_recebimento_setor,
					nm_usuario_receb,
					ds_maquina_receb,
					ds_maquina_entrega,
					dt_cancelamento,
					nm_usuario_cancelamento,
					ds_maquina_cancelamento,
					dt_atend_lote,
					dt_inicio_turno,
					nr_seq_classif,
					nm_usuario_geracao,
					ds_maquina_geracao,
					dt_limite_inicio_atend,
					dt_limite_atend,
					dt_limite_disp_farm,
					dt_limite_entrega_setor,
					dt_limite_receb_setor,
					qt_min_atraso_inicio_atend,
					qt_min_atraso_atend,
					qt_min_atraso_disp,
					qt_min_atraso_entrega,
					qt_min_atraso_receb,
					ie_conta_paciente,
					ie_atualiza_estoque,
					cd_tipo_baixa,
					dt_prim_horario,
					dt_impressao,
					cd_local_estoque,
					nr_seq_lote_sup,
					nr_seq_mot_desdobrar,
					nr_atendimento)
				SELECT 	nr_seq_lote_novo_w,
					coalesce(ie_status_lote_p, ie_status_lote),
					cd_setor_atendimento,
					clock_timestamp(),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_prescricao,
					nr_seq_turno,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					dt_atend_lote,
					dt_inicio_turno,
					nr_seq_classif,
					nm_usuario_p,
					ds_maq_user_w,
					dt_limite_inicio_atend,
					dt_limite_atend,
					dt_limite_disp_farm,
					dt_limite_entrega_setor,
					dt_limite_receb_setor,
					qt_min_atraso_inicio_atend,
					qt_min_atraso_atend,
					qt_min_atraso_disp,
					qt_min_atraso_entrega,
					qt_min_atraso_receb,
					ie_conta_paciente,
					ie_atualiza_estoque,
					cd_tipo_baixa,
					dt_prim_horario,
					null,
					cd_local_estoque,
					nr_seq_lote_p,
					CASE WHEN ie_motivo_desdobra_w='N' THEN null  ELSE nr_motivo_p END ,
					nr_atendimento
				from 	ap_lote
				where 	nr_sequencia = nr_seq_lote_p;
				
				select	nextval('ap_lote_historico_seq')
				into STRICT	nr_seq_historico_w
				;
				
				insert into ap_lote_historico(
				nr_sequencia,			dt_atualizacao,
				nm_usuario,			nr_seq_lote,
				nr_seq_mot_desdobrar,
				ds_evento,			ds_log)
				values (
				nr_seq_historico_w,		clock_timestamp(),
				nm_usuario_p,			nr_seq_lote_novo_w,
				CASE WHEN ie_motivo_desdobra_w='N' THEN null  ELSE nr_motivo_p END ,
				obter_desc_expressao(728860),		ds_motivo_p || 'Lote desdobrado:' || nr_seq_lote_p);
				
				select	nextval('ap_lote_historico_seq')
				into STRICT	nr_seq_historico_w
				;
				
				insert into ap_lote_historico(
				nr_sequencia,			dt_atualizacao,
				nm_usuario,			nr_seq_lote,
				nr_seq_mot_desdobrar,
				ds_evento,			ds_log)
				values (
				nr_seq_historico_w,		clock_timestamp(),
				nm_usuario_p,			nr_seq_lote_p,
				CASE WHEN ie_motivo_desdobra_w='N' THEN null  ELSE nr_motivo_p END ,
				obter_desc_expressao(728860),		ds_motivo_p || 'Lote desdobrado:' || nr_seq_lote_novo_w);
				
			end;
		elsif (ie_opcao_p = 'E') then
			begin
			insert into ap_lote(
					nr_sequencia,
					ie_status_lote,
					cd_setor_atendimento,
					dt_geracao_lote,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_prescricao,
					nr_seq_turno,
					dt_inicio_dispensacao,
					nm_usuario_ini_disp,
					ds_maquina_ini_disp,
					dt_atend_farmacia,
					nm_usuario_atend,
					ds_maquina_atend,
					dt_disp_farmacia,
					nm_usuario_disp,
					dt_entrega_setor,
					nm_usuario_entrega,
					ds_maquina_disp,
					dt_recebimento_setor,
					nm_usuario_receb,
					ds_maquina_receb,
					ds_maquina_entrega,
					dt_cancelamento,
					nm_usuario_cancelamento,
					ds_maquina_cancelamento,
					dt_atend_lote,
					dt_inicio_turno,
					nr_seq_classif,
					nm_usuario_geracao,
					ds_maquina_geracao,
					dt_limite_inicio_atend,
					dt_limite_atend,
					dt_limite_disp_farm,
					dt_limite_entrega_setor,
					dt_limite_receb_setor,
					qt_min_atraso_inicio_atend,
					qt_min_atraso_atend,
					qt_min_atraso_disp,
					qt_min_atraso_entrega,
					qt_min_atraso_receb,
					ie_conta_paciente,
					ie_atualiza_estoque,
					cd_tipo_baixa,
					dt_prim_horario,
					dt_impressao,
					cd_local_estoque,
					nr_seq_lote_sup,
					nr_seq_mot_desdobrar,
					nr_atendimento)
				SELECT 	nr_seq_lote_novo_w,
					CASE WHEN ie_status_lote_w='' THEN ie_status_lote  ELSE ie_status_lote_w END ,
					cd_setor_atendimento,
					clock_timestamp(),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_prescricao,
					nr_seq_turno,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					dt_atend_lote,
					dt_inicio_turno,
					nr_seq_classif,
					nm_usuario_p,
					ds_maq_user_w,
					dt_limite_inicio_atend,
					dt_limite_atend,
					dt_limite_disp_farm,
					dt_limite_entrega_setor,
					dt_limite_receb_setor,
					qt_min_atraso_inicio_atend,
					qt_min_atraso_atend,
					qt_min_atraso_disp,
					qt_min_atraso_entrega,
					qt_min_atraso_receb,
					ie_conta_paciente,
					ie_atualiza_estoque,
					cd_tipo_baixa,
					dt_prim_horario,
					null,
					cd_local_estoque,
					nr_seq_lote_p,
					CASE WHEN ie_motivo_desdobra_w='N' THEN null  ELSE nr_motivo_p END ,
					nr_atendimento
				from 	ap_lote
				where 	nr_sequencia = nr_seq_lote_p;
			end;
		elsif (ie_opcao_p = 'R') then
				nr_seq_lote_sup_w := nr_seq_lote_p;
		end if;
	end if;
	
	open c01;
	loop
	fetch c01 into
		nr_seq_item_w,
		nr_seq_mat_hor_w,
		qt_original_w,
		qt_ajuste_w,
		cd_material_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		if (ie_opcao_p <> 'R') then
			insert into ap_lote_item(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_lote,
				nr_seq_mat_hor,
				ie_prescrito,
				cd_material,
				cd_unidade_medida,
				qt_dispensar,
				qt_total_dispensar,
				ie_urgente,
				dt_supensao,		
				nm_usuario_susp,
				ds_maquina_susp)
			SELECT 	nextval('ap_lote_item_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				CASE WHEN coalesce(nr_seq_lote_novo_w,0)=0 THEN nr_seq_lote_sup_w  ELSE nr_seq_lote_novo_w END ,
				nr_seq_mat_hor_w,
				ie_prescrito,
				cd_material,
				cd_unidade_medida,
				qt_original_w - qt_ajuste_w,
				qt_total_dispensar,
				ie_urgente,
				null,		
				null,
				null
			from 	ap_lote_item
			where 	nr_sequencia = nr_seq_item_w;
			
			CALL grava_log_tasy(1198,
                     'desdobrar_lote_prescricao nr_seq_item_w=' || nr_seq_item_w || ' ie_opcao_p=' || ie_opcao_p || ' nr_seq_lote_novo_w=' || nr_seq_lote_novo_w || ' nr_seq_lote_sup_w=' || nr_seq_lote_sup_w,
                     nr_seq_lote_p);
			
			if (ie_status_lote_w <> 'C' ) or (pkg_i18n.get_user_locale() <> 'en_AU') then
				update	prescr_mat_hor
				set	nr_seq_lote	= CASE WHEN coalesce(nr_seq_lote_novo_w,0)=0 THEN nr_seq_lote_sup_w  ELSE nr_seq_lote_novo_w END
				where	nr_sequencia	= nr_seq_mat_hor_w;
			end if;

			select max(qt_dispensar)
			into STRICT qt_dispensar_real_w
			from ap_lote_item
			where nr_sequencia = nr_seq_item_w;
			
			--OS 2004319 (Ajuste e validacao da quantidade a dispensar devido a bipagem por lote fornecedor)
			if (qt_dispensar_real_w <> qt_original_w) then
				qt_ajuste_w := qt_ajuste_w + (qt_dispensar_real_w - qt_original_w);
			end if;
		end if;
		
		update	ap_lote_item
		set		qt_dispensar = qt_ajuste_w,
				cd_material = coalesce(cd_material_w, cd_material)
		where 	nr_sequencia = nr_seq_item_w;
		
		select	nextval('ap_lote_historico_seq')
		into STRICT	nr_seq_historico_w
		;
			
		insert into ap_lote_historico(
			nr_sequencia,			
			dt_atualizacao,
			nm_usuario,			
			nr_seq_lote,
			nr_seq_mot_desdobrar,
			ds_evento,			
			ds_log)
			values (
			nr_seq_historico_w,		
			clock_timestamp(),
			nm_usuario_p,			
			CASE WHEN coalesce(nr_seq_lote_novo_w,0)=0 THEN nr_seq_lote_sup_w  ELSE nr_seq_lote_novo_w END ,
			CASE WHEN ie_motivo_desdobra_w='N' THEN null  ELSE nr_motivo_p END ,
			obter_desc_expressao(728860),
			ds_motivo_p || ' Lote desdobrado:' || CASE WHEN coalesce(nr_seq_lote_novo_w,0)=0 THEN nr_seq_lote_sup_w  ELSE nr_seq_lote_novo_w END  || ' Item:' || nr_seq_item_w);

		end;
	end loop;
	close c01;

end if;

select	count(*)
into STRICT	qt_existe_w
from	ap_lote_item
where	nr_seq_lote = nr_seq_lote_p
and		qt_dispensar > 0;

select	max(qt_dispensar_hor) qt_dispensar_hora,
		max(qt_dispensar) qt_dispensar_hor
into STRICT 	qt_dispensar_hora_w,
		qt_dispensar_hor_w
from	w_grava_lote_alterado
where  	qt_dispensar > 0
order by 	1;

CALL grava_log_tasy(1198,'desdobrar_lote_prescricao 1 qt_existe_w=' || qt_existe_w || ' qt_dispensar_hora_w=' || qt_dispensar_hora_w ||
' qt_dispensar_hor_w=' || qt_dispensar_hor_w,nr_seq_lote_p);

if (qt_existe_w = 0) and (qt_dispensar_hora_w = qt_dispensar_hor_w)	then

	update	ap_lote
	set	ie_status_lote = 'C'
	where	nr_sequencia = nr_seq_lote_p;

	select	nextval('ap_lote_historico_seq')
	into STRICT	nr_seq_historico_w
	;
	
	insert into ap_lote_historico(
		nr_sequencia,			dt_atualizacao,
		nm_usuario,			nr_seq_lote,
		ds_evento,			ds_log)
	values (
		nr_seq_historico_w,		clock_timestamp(),
		nm_usuario_p,			nr_seq_lote_p,
    --331148 = Lote cancelado / 728858 = Realizado desdobramento de todos os itens do lote
		obter_desc_expressao(331148),obter_desc_expressao(728858));
	
end if;

if (coalesce(ie_impressao_lote_p,'N') = 'S') then
	update	ap_lote
	set	dt_impressao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_lote_novo_w;
end if;

delete from w_ap_lote_desdob
where nr_seq_lote = nr_seq_lote_p;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
exception
when others then
rollback;
CALL grava_log_tasy(1198,'desdobrar_lote_prescricao nr_seq_item_w=' || nr_seq_item_w || ' erro=' || sqlerrm(SQLSTATE),nr_seq_lote_p);
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE desdobrar_lote_prescricao ( nr_seq_lote_p bigint, nm_usuario_p text, ie_opcao_p text, nr_motivo_p bigint, ds_motivo_p text, ie_impressao_lote_p text, nr_novo_lote_p INOUT bigint, ie_status_lote_p text default null) FROM PUBLIC;

