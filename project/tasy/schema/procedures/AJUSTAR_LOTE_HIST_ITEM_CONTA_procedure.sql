-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ajustar_lote_hist_item_conta ( nr_seq_lote_guia_p bigint, ie_commit_p text, nm_usuario_p text) AS $body$
DECLARE

 
/* Esta procedure é utilizada para cancelar os itens estornados com os seus respectivos positivos */
 
 
cd_material_w		integer;
qt_item_negativo_w	double precision;
nr_seq_lote_item_w	bigint;
qt_item_positivo_w	double precision;
vl_material_negativo_w	double precision;
vl_item_positivo_w	double precision;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
ie_itens_sem_saldo_w	varchar(1);
cd_estabelecimento_w	smallint;

/* itens negativos da conta (estornos) */
 
c01 CURSOR FOR 
SELECT	b.cd_material, 
	null cd_procedimento, 
	null ie_origem_proced, 
	sum(CASE WHEN a.qt_item - abs(a.qt_item)=0 THEN a.qt_item * -1  ELSE a.qt_item END ) qt_item, 
	coalesce(sum(CASE WHEN ie_itens_sem_saldo_w='S' THEN b.vl_material  ELSE (obter_saldo_conpaci_item(null,b.nr_sequencia))::numeric  END ),0) vl_saldo 
from	material_atend_paciente b, 
	lote_audit_hist_item a 
where	a.nr_seq_guia		= nr_seq_lote_guia_p 
and (a.qt_item < 0 or a.vl_glosa_informada < 0) 
and	a.nr_seq_matpaci	= b.nr_sequencia 
group by	b.cd_material 

union all
 
SELECT	null cd_material, 
	b.cd_procedimento, 
	b.ie_origem_proced, 
	sum(CASE WHEN a.qt_item - abs(a.qt_item)=0 THEN a.qt_item * -1  ELSE a.qt_item END ) qt_item, 
	coalesce(sum(CASE WHEN ie_itens_sem_saldo_w='S' THEN b.vl_procedimento  ELSE (obter_saldo_conpaci_item(b.nr_sequencia,null))::numeric  END ),0) vl_saldo 
from	procedimento_paciente b, 
	lote_audit_hist_item a 
where	a.nr_seq_guia		= nr_seq_lote_guia_p 
and (a.qt_item < 0 or a.vl_glosa_informada < 0) 
and	a.nr_seq_propaci	= b.nr_sequencia 
group by	b.cd_procedimento, 
	b.ie_origem_proced;

/* itens positivos, correspondentes ao item negativo selecionado no c01 */
 
c02 CURSOR FOR 
SELECT	a.nr_sequencia, 
	a.qt_item, 
	CASE WHEN ie_itens_sem_saldo_w='S' THEN b.vl_material  ELSE coalesce((obter_saldo_conpaci_item(null,b.nr_sequencia))::numeric ,0) END  vl_saldo 
from	material_atend_paciente b, 
	lote_audit_hist_item a 
where	coalesce(a.ie_ajustado,'N')	= 'N' 
and	a.nr_seq_guia		= nr_seq_lote_guia_p 
and	a.qt_item		> 0 
and	a.vl_glosa_informada	>= 0 
and	a.nr_seq_matpaci	= b.nr_sequencia 
and	b.cd_material		= cd_material_w 

union all
 
SELECT	a.nr_sequencia, 
	a.qt_item, 
	CASE WHEN ie_itens_sem_saldo_w='S' THEN b.vl_procedimento  ELSE coalesce((obter_saldo_conpaci_item(b.nr_sequencia,null))::numeric ,0) END  vl_saldo 
from	procedimento_paciente b, 
	lote_audit_hist_item a 
where	coalesce(a.ie_ajustado,'N')	= 'N' 
and	a.nr_seq_guia		= nr_seq_lote_guia_p 
and	a.qt_item		> 0 
and	a.vl_glosa_informada	>= 0 
and	a.nr_seq_propaci	= b.nr_sequencia 
and	b.cd_procedimento	= cd_procedimento_w 
and	b.ie_origem_proced	= ie_origem_proced_w 
order by	qt_item;


BEGIN 
 
select	max(c.cd_estabelecimento) 
into STRICT	cd_estabelecimento_w 
from	lote_auditoria c, 
	lote_audit_hist b, 
	lote_audit_hist_guia a 
where	b.nr_seq_lote_audit	= c.nr_sequencia 
and	a.nr_seq_lote_hist	= b.nr_sequencia 
and	a.nr_sequencia		= nr_seq_lote_guia_p;
 
ie_itens_sem_saldo_w := obter_param_usuario(69, 28, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_itens_sem_saldo_w);
 
open c01;
loop 
fetch c01 into 
	cd_material_w, 
	cd_procedimento_w, 
	ie_origem_proced_w, 
	qt_item_negativo_w, 
	vl_material_negativo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
 
	while(qt_item_negativo_w	< 0) loop 
 
		open c02;
		loop 
		fetch c02 into 
			nr_seq_lote_item_w, 
			qt_item_positivo_w, 
			vl_item_positivo_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
		end loop;
		close c02;
 
		if (qt_item_positivo_w	> abs(qt_item_negativo_w)) then	/* se tiver mais positivo do que negativo, apenas deduz do total */
 
			update	lote_audit_hist_item 
			set	qt_item			= qt_item + qt_item_negativo_w, 
				vl_saldo		= vl_saldo + vl_material_negativo_w, 
				vl_glosa_informada	= vl_glosa_informada + vl_material_negativo_w, 
				ie_ajustado		= 'S' 
			where	nr_sequencia		= nr_seq_lote_item_w;
 
			qt_item_negativo_w	:= 0;
		elsif (qt_item_positivo_w	= abs(qt_item_negativo_w)) then	/* se a qtd de positivos e negativos for igual, elimina o item */
 
			delete	from lote_audit_hist_item 
			where	nr_sequencia	= nr_seq_lote_item_w;
 
			qt_item_negativo_w	:= 0;
		/* tiver menos positivo do que negativo, elimina o positivo e deduz sua qtd da qtd negativa, depois passa para o próximo item positivo */
 
		elsif (qt_item_positivo_w	< abs(qt_item_negativo_w)) then 
			delete	from lote_audit_hist_item 
			where	nr_sequencia	= nr_seq_lote_item_w;
 
			qt_item_negativo_w	:= qt_item_negativo_w + qt_item_positivo_w;
			vl_material_negativo_w	:= vl_material_negativo_w + vl_item_positivo_w;
		/* se a quantidade total de itens negativos supera a quantidade total de itens positivos, é necessário sair do loop */
 
		elsif (coalesce(qt_item_positivo_w::text, '') = '') then 
			qt_item_negativo_w	:= 0;
		end if;
 
	end loop;
 
	if (coalesce(cd_material_w,0) <> 0) then 
 
		update	lote_audit_hist_item a 
		set	ie_ajustado	= 'S' 
		where	coalesce(a.ie_ajustado,'N')	= 'N' 
		and	a.nr_seq_guia		= nr_seq_lote_guia_p 
		and	a.qt_item		> 0 
		and	exists (SELECT	1 
			from	material_atend_paciente x 
			where	x.cd_material	= cd_material_w 
			and	x.nr_sequencia	= a.nr_seq_matpaci);
 
	else 
 
		update	lote_audit_hist_item a 
		set	ie_ajustado	= 'S' 
		where	coalesce(a.ie_ajustado,'N')	= 'N' 
		and	a.nr_seq_guia		= nr_seq_lote_guia_p 
		and	a.qt_item		> 0 
		and	exists (SELECT	1 
			from	procedimento_paciente x 
			where	x.ie_origem_proced	= ie_origem_proced_w 
			and	x.cd_procedimento	= cd_procedimento_w 
			and	x.nr_sequencia		= a.nr_seq_propaci);
 
	end if;
 
	/* elimina os itens negativos */
 
	delete	from lote_audit_hist_item a 
	where	a.nr_seq_guia	= nr_seq_lote_guia_p 
	and (a.qt_item < 0 or a.vl_glosa_informada < 0) 
	and	(((cd_material_w IS NOT NULL AND cd_material_w::text <> '') and (	SELECT	max(x.cd_material) 
							from	material_atend_paciente x 
							where	x.nr_sequencia	= a.nr_seq_matpaci) = cd_material_w) or ((cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (	select	max(x.cd_procedimento) 
							from	procedimento_paciente x 
							where	x.nr_sequencia	= a.nr_seq_propaci) = cd_procedimento_w 
						and (	select	max(x.ie_origem_proced) 
							from	procedimento_paciente x 
							where	x.nr_sequencia	= a.nr_seq_propaci) = ie_origem_proced_w));
 
end loop;
close c01;
 
if (coalesce(ie_commit_p,'S') = 'S') then 
	commit;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ajustar_lote_hist_item_conta ( nr_seq_lote_guia_p bigint, ie_commit_p text, nm_usuario_p text) FROM PUBLIC;

