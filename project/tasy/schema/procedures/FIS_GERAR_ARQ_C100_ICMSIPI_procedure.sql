-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_arq_c100_icmsipi ( nr_seq_controle_p bigint, nr_linha_p INOUT bigint) AS $body$
DECLARE


-- VARIABLES
ds_linha_w  varchar(8000);
ds_linha_comp_w  varchar(8000);
ds_sep_w    varchar(1) := '|';
qt_cursor_w bigint := 0;
nr_vetor_w  bigint := 0;
nr_sequencia_w bigint := 0;
ds_chv_nfe_w varchar(44) := '';

-- USUARIO
nm_usuario_w usuario.nm_usuario%type;

-- FIS_EFD_ICMSIPI_ARQUIVO
nr_linha_w fis_efd_icmsipi_arquivo.nr_linha%type;

c_reg_C100 CURSOR FOR
SELECT *
from fis_efd_icmsipi_c100
where nr_seq_controle = nr_seq_controle_p;

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_C100*/

type reg_c_reg_C100 is table of fis_efd_icmsipi_c100%RowType;
vetRegC100 reg_c_reg_C100;

/*Criação do array com o tipo sendo da tabela eespecificada - fis_efd_icmsipi_arquivo */

type registro is table of fis_efd_icmsipi_arquivo%rowtype index by integer;
fis_registros_w registro;

cd_part_w fis_efd_icmsipi_c100.cd_part%type;

BEGIN

nm_usuario_w := Obter_Usuario_Ativo;
nr_linha_w   := nr_linha_p;

open c_reg_C100;
loop
fetch c_reg_C100 bulk collect into vetRegC100 limit 1000;
  for i in 1 .. vetRegC100.Count loop
  begin

  /*Incrementa a variavel para o array*/

  qt_cursor_w := qt_cursor_w + 1;

  --  Guarda a chave da NFE quando preciso
  ds_chv_nfe_w := '';
  if coalesce(vetRegC100[i].ie_status_envio,'XX') <> 'X' then  --  Quando o campo 'ie_status_envio' for 'X',  preencher somente os campos 'REG', 'IND_OPER', 'IND_EMIT', 'COD_MOD', 'COD_SIT',' SER', e 'NUM_DOC'.
    ds_chv_nfe_w := vetRegC100[i].ds_chv_nfe;
  end if;

  cd_part_w := null;

  -- Gera valores para registros complementares quando preciso
  ds_linha_comp_w :=   ds_sep_w || --dt_doc
        ds_sep_w || --dt_e_s
        ds_sep_w || --vl_doc
        ds_sep_w || --cd_ind_pgto
        ds_sep_w || --vl_desc
        ds_sep_w || --vl_abat_nt
        ds_sep_w || --vl_merc
        ds_sep_w || --cd_ind_frt
        ds_sep_w || --vl_frt)
        ds_sep_w || --vl_seg
        ds_sep_w || --vl_out_da
        ds_sep_w || --vl_bc_icms
        ds_sep_w || --vl_icms
        ds_sep_w || --vl_bc_icms_st
        ds_sep_w || --vl_icms_st
        ds_sep_w || --vl_ipi
        ds_sep_w || --vl_pis
        ds_sep_w || --vl_cofins
        ds_sep_w || --vl_pis_st
        ds_sep_w || --vl_cofins_st
        ds_sep_w;

  --if nvl(vetRegC100(i).ie_status_envio,'XX') <> 'X' then  --  Quando o campo 'ie_status_envio' for 'X  preencher somente os campos 'REG', 'IND_OPER', 'IND_EMIT', 'COD_MOD', 'COD_SIT',' SER', e 'NUM_DOC'.
  if coalesce(vetRegC100[i].ie_status_envio,'XX') not in ('X','C','D') then  --  Quando o campo 'ie_status_envio' for 'X','C' ou 'D' preencher somente os campos 'REG', 'IND_OPER', 'IND_EMIT', 'COD_MOD', 'COD_SIT',' SER', e 'NUM_DOC'.
  ds_linha_comp_w :=   ds_sep_w || to_char(vetRegC100[i].dt_doc,'ddmmyyyy')  ||
        ds_sep_w || to_char(vetRegC100[i].dt_e_s,'ddmmyyyy') ||
        ds_sep_w || substr(coalesce(sped_obter_campo_valor(vetRegC100[i].vl_doc),'0,00'), 1, 30) ||
        ds_sep_w || vetRegC100[i].cd_ind_pgto ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_desc), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_abat_nt), 1, 30) ||
        ds_sep_w ||substr(sped_obter_campo_valor(vetRegC100[i].vl_merc), 1, 30) ||
        ds_sep_w || vetRegC100[i].cd_ind_frt ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_frt), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_seg), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_out_da), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_bc_icms), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_icms), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_bc_icms_st), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_icms_st), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_ipi), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_pis), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_cofins), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_pis_st), 1, 30) ||
        ds_sep_w || substr(sped_obter_campo_valor(vetRegC100[i].vl_cofins_st), 1, 30) || ds_sep_w;
        cd_part_w := vetRegC100[i].cd_part;
  end if;

  nr_linha_w := nr_linha_w + 1;
  ds_linha_w := substr(ds_sep_w || vetRegC100[i].cd_reg ||
           ds_sep_w || vetRegC100[i].cd_ind_oper ||
           ds_sep_w || vetRegC100[i].cd_ind_emit ||
           ds_sep_w || cd_part_w ||
           ds_sep_w || vetRegC100[i].cd_mod ||
           ds_sep_w || vetRegC100[i].cd_sit ||
           ds_sep_w || vetRegC100[i].cd_ser ||
           ds_sep_w || vetRegC100[i].nr_doc ||
           ds_sep_w || ds_chv_nfe_w || ds_linha_comp_w,
           1,
           8000);

  /*   Atualiza o sequencial de ordenação de linhas do arquivo */

  select  nextval('fis_efd_icmsipi_arquivo_seq')
  into STRICT  nr_sequencia_w
;

  fis_registros_w[qt_cursor_w].nr_sequencia     := nr_sequencia_w;
  fis_registros_w[qt_cursor_w].dt_atualizacao_nrec   := clock_timestamp();
  fis_registros_w[qt_cursor_w].nm_usuario_nrec     := nm_usuario_w;
  fis_registros_w[qt_cursor_w].dt_atualizacao     := clock_timestamp();
  fis_registros_w[qt_cursor_w].nm_usuario     := nm_usuario_w;
  fis_registros_w[qt_cursor_w].nr_seq_controle     := nr_seq_controle_p;
  fis_registros_w[qt_cursor_w].nr_linha       := nr_linha_w;
  fis_registros_w[qt_cursor_w].ds_arquivo     := substr(ds_linha_w,1,4000);
  fis_registros_w[qt_cursor_w].ds_arquivo_compl     := substr(ds_linha_w,4001,4000);
  fis_registros_w[qt_cursor_w].cd_registro     :=  vetRegC100[i].cd_reg;

  if coalesce(vetRegC100[i].ie_status_envio,'XX') not in ('X','C','D') then  --  Quando o campo 'ie_status_envio' for 'X','C' ou 'D' Não gerar os registros filhos(C101, C110, C113, C114, C140, C141, C170, C190, C195).
    -------> C101
    /* Gera registros do C101 */

    nr_linha_w := fis_gerar_arq_C101_icmsipi(nr_seq_controle_p, vetRegC100[i].nr_seq_nota, nr_linha_w);
    -------> C110
    /* Gera registros do C110 */

    nr_linha_w := fis_gerar_arq_C110_icmsipi(nr_seq_controle_p, vetRegC100[i].nr_seq_nota, nr_linha_w);
      ------->C113
      ------->C114
    -------> C140
    /* Gera registros do C140 */

    nr_linha_w := fis_gerar_arq_C140_icmsipi(nr_seq_controle_p, vetRegC100[i].nr_seq_nota, nr_linha_w);
      ------->C141
    if vetRegC100[i].cd_ind_emit <> '0' then -- Quando for nota fiscal de emissão própria (IND_EMIT = '0') não gerar o registro C170 no arquivo.
      -------> C170
      /* Gera registros do C170 */

      nr_linha_w := fis_gerar_arq_C170_icmsipi(nr_seq_controle_p, vetRegC100[i].nr_seq_nota, nr_linha_w);
    end if;
    -------> C190
    /* Gera registros do C190 */

    nr_linha_w := fis_gerar_arq_C190_icmsipi(nr_seq_controle_p, vetRegC100[i].nr_seq_nota, nr_linha_w);
    -------> C195
    /* Gera registros do C195 */

    nr_linha_w := fis_gerar_arq_C195_icmsipi(nr_seq_controle_p, vetRegC100[i].nr_seq_nota, nr_linha_w);
  end if;

  if (nr_vetor_w >= 1000) then
    /*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_C100 */

    forall i in fis_registros_w.first .. fis_registros_w.last
      insert into fis_efd_icmsipi_arquivo values fis_registros_w(i);

    nr_vetor_w := 0;
    fis_registros_w.delete;

    commit;
  end if;

  /*incrementa variavel para realizar o forall quando chegar no valor limite*/

  nr_vetor_w := nr_vetor_w + 1;

  end;
  end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_C100 */
end loop;
close c_reg_C100;

if (fis_registros_w.count > 0) then
  /*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

  forall i in fis_registros_w.first .. fis_registros_w.last
    insert into fis_efd_icmsipi_arquivo values fis_registros_w(i);

  fis_registros_w.delete;

  commit;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

nr_linha_p := nr_linha_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_arq_c100_icmsipi ( nr_seq_controle_p bigint, nr_linha_p INOUT bigint) FROM PUBLIC;

