-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_copiar_cadastro_regras ( cd_estab_origem_p bigint, cd_estab_destino_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_tipo_cobertura_w		bigint;
nr_seq_tipo_cobert_novo_w	bigint;
nr_seq_cobertura_proc_w		bigint;
nr_seq_cobertura_mat_w		bigint;
nr_seq_tipo_limitacao_w		bigint;
nr_seq_tipo_limit_novo_w	bigint;
nr_seq_limitacao_proc_w		bigint;
nr_seq_limitacao_mat_w		bigint;
nr_seq_tipo_carencia_w		bigint;
nr_seq_tipo_carencia_novo_w	bigint;
nr_seq_carencia_proc_w		bigint;
nr_seq_carencia_mat_w		bigint;
nr_seq_tipo_coparticipacao_w	bigint;
nr_seq_tipo_copartic_novo_w	bigint;
nr_seq_coparticipacao_proc_w	bigint;
nr_seq_coparticipacao_mat_w	bigint;
nr_seq_regra_desc_w		bigint;
nr_seq_regra_desc_novo_w	bigint;
nr_seq_preco_regra_w		bigint;
nr_seq_preco_regra_autom_w	bigint;
nr_seq_regra_simul_preco_w	bigint;
nr_seq_regra_segurado_cart_w	bigint;
nr_seq_carteira_contr_iden_w	bigint;
nr_seq_mensalidade_mensagem_w	bigint;
nr_seq_mensalidade_amortiz_w	bigint;
nr_seq_tx_boleto_emissao_w	bigint;
nr_seq_exigencia_declaracao_w	bigint;
nr_seq_plano_item_w		bigint;
nr_seq_plano_novo_item_w	bigint;
nr_seq_plano_item_operacao_w	bigint;
nr_seq_bonificacao_rest_w	bigint;
nr_seq_bonificacao_rest_novo_w	bigint;
nr_seq_bonificacao_estr_rest_w	bigint;
nr_seq_bonificacao_cobert_w	bigint;
nr_seq_bonific_cobert_novo_w	bigint;
nr_seq_bonif_estrut_cobert_w	bigint;
nr_seq_regiao_w			bigint;
nr_seq_regiao_novo_w		bigint;
nr_seq_regiao_localicadade_w	bigint;
nr_seq_liberacao_w		bigint;
nr_seq_grupo_auditor_w		bigint;
nr_seq_grupo_auditor_novo_w 	bigint;
nr_seq_regra_autorizacao_w	bigint;
nr_seq_acao_regra_conta_w	bigint;
nr_seq_vinculo_direto_w		bigint;
nr_seq_regra_via_acesso_w	bigint;
nr_seq_emissor_carteira_w	bigint;
nr_seq_emissor_cart_novo_w	bigint;
nr_seq_emissor_cart_num_w	bigint;
nr_seq_regra_carteira_w		bigint;
nr_seq_regra_cart_novo_w	bigint;
nr_seq_regra_cart_campo_w	bigint;
nr_seq_regra_lib_w		bigint;
nr_seq_lib_grupo_auditor_w	bigint;
nr_seq_membro_grupo_aud_w	bigint;
nr_seq_filtro_regra_conta_w	bigint;
nr_seq_acao_regra_conta_novo_w	bigint;
nr_seq_vinculo_direto_novo_w	bigint;
nr_seq_vinculo_direto_regra_w	bigint;
nr_seq_conversao_proc_w		bigint;
nr_seq_regra_qtde_proc_w	bigint;
nr_seq_regra_lanc_w		bigint;
nr_seq_regra_lanc_novo_w	bigint;
nr_seq_regra_lanc_item_w	bigint;
nr_seq_grupo_despesa_w		bigint;
nr_seq_grupo_despesa_novo_w	bigint;
nr_seq_desp_copartic_w		bigint;
nr_seq_regra_relat_grupo_w	bigint;
nr_seq_regra_relat_novo_w	bigint;
nr_seq_regra_relatorio_w	bigint;
nr_seq_ans_grupo_regra_w	bigint;
nr_seq_ans_grupo_proc_w		bigint;
nr_seq_ans_grupo_mat_w		bigint;
nr_seq_tipo_atendimento_novo_w	bigint;
nr_seq_tipo_atendimento_ant_w	bigint;
nr_seq_prest_novo_w		bigint;
nr_seq_prest_ant_w		bigint;
qt_registros_w			bigint;
qt_registro_w			bigint;


/* Cobertura */

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_tipo_cobertura
	where	cd_estabelecimento	= cd_estab_origem_p;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_cobertura_proc
	where	nr_seq_tipo_cobertura	= nr_seq_tipo_cobertura_w;

C03 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_cobertura_mat
	where	nr_seq_tipo_cobertura	= nr_seq_tipo_cobertura_w;

/* Limitacao */

C04 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_tipo_limitacao
	where	cd_estabelecimento	= cd_estab_origem_p;

C05 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_limitacao_proc
	where	nr_seq_tipo_limitacao	= nr_seq_tipo_limitacao_w;

C06 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_limitacao_mat
	where	nr_seq_tipo_limitacao	= nr_seq_tipo_limitacao_w;

/* Carencia */

C07 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_tipo_carencia
	where	cd_estabelecimento	= cd_estab_origem_p;

C08 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_carencia_proc
	where	nr_seq_tipo_carencia   	= nr_seq_tipo_carencia_w;

C09 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_carencia_mat
	where	nr_seq_tipo_carencia   	= nr_seq_tipo_carencia_w;

/* Co-participacao */

C10 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_tipo_coparticipacao
	where	cd_estabelecimento	= cd_estab_origem_p;

C11 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_coparticipacao_proc
	where	nr_seq_tipo_coparticipacao   	= nr_seq_tipo_coparticipacao_w;

C12 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_coparticipacao_mat
	where	nr_seq_tipo_coparticipacao   	= nr_seq_tipo_coparticipacao_w;

/*Regra Desconto*/

C13 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_desconto
	where	cd_estabelecimento	= cd_estab_origem_p
	and	coalesce(nr_seq_contrato::text, '') = ''
	and 	coalesce(nr_seq_plano::text, '') = '' 
	and 	coalesce(nr_seq_proposta::text, '') = '';

C14 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_preco_regra
	where	nr_seq_regra	= nr_seq_regra_desc_w;

C15 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_preco_regra_autom
	where	nr_seq_regra	= nr_seq_regra_desc_w;

C16 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_simul_preco_desc
	where	nr_seq_regra	= nr_seq_regra_desc_w;

/*Regra via adicinal*/

C17 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_segurado_cart
	where	cd_estabelecimento	= cd_estab_origem_p;

C18 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_carteira_controle_iden
	where	cd_estabelecimento	= cd_estab_origem_p;

/* Mensalidade - Mensagem */

C19 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_mensagem_mensalidade
	where	cd_estabelecimento	= cd_estab_origem_p;

/* Mensalidade - Amortizacoes */

C20 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_amortizacao
	where	cd_estabelecimento	= cd_estab_origem_p;

/* Mensalidade - Taxa de emissao de boleto */

C21 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_emissao_boleto
	where	cd_estabelecimento	= cd_estab_origem_p;

/*Comercial - Exigencia de declaracao de saude*/

C22 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_declaracao_prop
	where	cd_estabelecimento	= cd_estab_origem_p;

/* Produtos e regras - Itens do produto */


/*Cursor C23 is
	select	nr_sequencia
	from	pls_plano_item
	where	cd_estabelecimento	= cd_estab_origem_p;

/* Produtos e regras - Tipos de operacao */


/*Cursor C24 is
	select	nr_sequencia
	from	pls_plano_item_operacao
	where	nr_seq_plano_item = nr_seq_plano_item_w;

/* Produtos e regras - Tipos utilizacao para restricao de bonificacao */

C25 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_bonific_tipo_restricao
	where	cd_estabelecimento	= cd_estab_origem_p;

/* Produtos e regras - Tipos estrutura para restricao de bonificacao */

C26 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_bonific_restr_regra
	where	nr_seq_tipo_restricao  = nr_seq_bonificacao_rest_w;

/* Produtos e regras - Tipos de coberturas para a bonificacaes */

C27 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_tipo_cobert_bonific
	where	cd_estabelecimento	= cd_estab_origem_p;

/* Produtos e regras - Tipos estrutura de coberturas para bonificacaes */

C28 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_cobertura_bonificacao
	where	nr_seq_tipo_cobertura = nr_seq_bonificacao_cobert_w;

/* Produtos e regras - Regiao*/

C29 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regiao
	where	cd_estabelecimento	= cd_estab_origem_p;

/* Produtos e regras - Regiao localidade*/

C30 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regiao_local
	where	nr_seq_regiao	= nr_seq_regiao_w;

/*Cadastro de regras - Auditoria autorizacao medica*/

C31 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_liberacao
	where	cd_estabelecimento	= cd_estab_origem_p;

/*Cadastro de regras -  Grupo de au	ditores*/

C32 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_grupo_auditor
	where	cd_estabelecimento	= cd_estab_origem_p;

/*Cadastro de regras - Procedimentos que necessitam autorizacao previa*/

C33 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_autorizacao
	where	cd_estabelecimento	= cd_estab_origem_p;

/*Cadastro de regras - Acao da regra*/

C34 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_acao_regra_conta
	where	cd_estabelecimento	= cd_estab_origem_p;

/*Cadastro de regras - Vinculos diretos*/

C35 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_vinculo_direto
	where	cd_estabelecimento	= cd_estab_origem_p;

/*   */

C36 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_via_acesso
	where	cd_estabelecimento	= cd_estab_origem_p;

/*Emissor carteira*/

C37 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_emissor_carteira
	where	cd_estabelecimento	= cd_estab_origem_p;

C38 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_emissor_cart_numero
	where	nr_seq_emissor	= nr_seq_emissor_carteira_w;

C39 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_carteira
	where	nr_seq_emissor	= nr_seq_emissor_carteira_w;

C40 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_carteira_campo
	where	nr_seq_emissor	= nr_seq_emissor_carteira_w;

C41 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_lib_grupo_auditor
	where	nr_seq_regra_lib	= nr_seq_liberacao_w;

C42 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_membro_grupo_aud
	where	nr_seq_grupo	= nr_seq_grupo_auditor_w;

C44 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_filtro_regra_conta
	where	nr_seq_acao_regra	= nr_seq_acao_regra_conta_w;

C45 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_vinculo_direto_regra
	where	nr_seq_vinculo	= nr_seq_vinculo_direto_w;

C46 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conversao_proc
	where	cd_estabelecimento	= cd_estab_origem_p;

C47 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_qtde_proc
	where	cd_estabelecimento	= cd_estab_origem_p;

C48 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_lanc
	where	cd_estabelecimento	= cd_estab_origem_p;

C49 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_lanc_item
	where	nr_seq_regra	= nr_seq_regra_lanc_w;

C50 CURSOR FOR
	SELECT	nr_sequencia
	from	ans_grupo_despesa
	where	cd_estabelecimento	= cd_estab_origem_p;

C51 CURSOR FOR
	SELECT	nr_sequencia
	from	ans_grupo_desp_copartic
	where	nr_seq_grupo_desp	= nr_seq_grupo_despesa_w;

C52 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_relat_grupo
	where	cd_estabelecimento	= cd_estab_origem_p;

C53 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_relatorio
	where	nr_seq_grupo	= nr_seq_regra_relat_grupo_w;

C54 CURSOR FOR
	SELECT	nr_sequencia
	from	ans_grupo_desp_regra
	where	nr_seq_grupo_ans	= nr_seq_grupo_despesa_w;

C55 CURSOR FOR
	SELECT	nr_sequencia
	from	ans_grupo_desp_proc
	where	nr_seq_grupo_ans	= nr_seq_grupo_despesa_w;

C56 CURSOR FOR
	SELECT	nr_sequencia
	from	ans_grupo_desp_mat
	where	nr_seq_grupo_desp	= nr_seq_grupo_despesa_w;


BEGIN

/* Cobertura */

open C01;
loop
fetch C01 into
	nr_seq_tipo_cobertura_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_tipo_cobertura
	where	nr_seq_tipo_cobert_ant	= nr_seq_tipo_cobertura_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_tipo_cobertura_seq')
		into STRICT	nr_seq_tipo_cobert_novo_w
		;
		
		insert into pls_tipo_cobertura(nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, ds_cobertura,
						ie_situacao, cd_estabelecimento, ie_utilizacao, cd_sistema_anterior, ie_sigla, nr_seq_tipo_cobert_ant)
					(SELECT	nr_seq_tipo_cobert_novo_w, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, ds_cobertura,
						ie_situacao, cd_estab_destino_p, ie_utilizacao, cd_sistema_anterior, ie_sigla, nr_seq_tipo_cobertura_w
					from	pls_tipo_cobertura
					where	nr_sequencia	= nr_seq_tipo_cobertura_w);
		
		open C02;
		loop
		fetch C02 into
			nr_seq_cobertura_proc_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			insert into pls_cobertura_proc(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_cobertura,
							cd_procedimento, ie_origem_proced, cd_area_procedimento, cd_especialidade, cd_grupo_proc, ie_cobertura, nr_seq_grupo_servico)
						(SELECT	nextval('pls_cobertura_proc_seq'), dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_cobert_novo_w,
							cd_procedimento, ie_origem_proced, cd_area_procedimento, cd_especialidade, cd_grupo_proc, ie_cobertura, nr_seq_grupo_servico
						from	pls_cobertura_proc
						where	nr_sequencia	= nr_seq_cobertura_proc_w);
			end;
		end loop;
		close C02;
		
		open C03;
		loop
		fetch C03 into
			nr_seq_cobertura_mat_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			insert into pls_cobertura_mat(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_cobertura,
							ie_cobertura, nr_seq_estrut_mat, nr_seq_material, nr_seq_grupo_material)
						(SELECT	nextval('pls_cobertura_mat_seq'), dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_cobert_novo_w,
							ie_cobertura, nr_seq_estrut_mat, nr_seq_material, nr_seq_grupo_material
						from	pls_cobertura_mat
						where	nr_sequencia	= nr_seq_cobertura_mat_w);
			end;
		end loop;
		close C03;
	end if;
	end;
end loop;
close C01;

/* Tipo limitacao */

open C04;
loop
fetch C04 into
	nr_seq_tipo_limitacao_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_tipo_limitacao
	where	nr_seq_limitacao_ant	= nr_seq_tipo_limitacao_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_tipo_limitacao_seq')
		into STRICT	nr_seq_tipo_limit_novo_w
		;
		
		insert into pls_tipo_limitacao(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, ds_limitacao,
						ie_situacao, cd_estabelecimento, ie_tipo_incidencia, cd_sistema_anterior, ie_sigla, nr_seq_limitacao_ant)
					(SELECT	nr_seq_tipo_limit_novo_w, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, ds_limitacao,
						ie_situacao, cd_estab_destino_p, ie_tipo_incidencia, cd_sistema_anterior, ie_sigla, nr_seq_tipo_limitacao_w
					from	pls_tipo_limitacao
					where	nr_sequencia	= nr_seq_tipo_limitacao_w);
		
		open C05;
		loop
		fetch C05 into
			nr_seq_limitacao_proc_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin
			insert into pls_limitacao_proc(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_limitacao,
							cd_procedimento, ie_origem_proced, cd_area_procedimento, cd_especialidade, cd_grupo_proc, ie_limitacao,
							cd_doenca_cid, ie_tipo_guia)
						(SELECT	nextval('pls_limitacao_proc_seq'), dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_limit_novo_w,
							cd_procedimento, ie_origem_proced, cd_area_procedimento, cd_especialidade, cd_grupo_proc, ie_limitacao,
							cd_doenca_cid, ie_tipo_guia
						from	pls_limitacao_proc
						where	nr_sequencia	= nr_seq_limitacao_proc_w);
			end;
		end loop;
		close C05;
		
		open C06;
		loop
		fetch C06 into
			nr_seq_limitacao_mat_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin
			insert into pls_limitacao_mat(	nr_sequencia, nr_seq_tipo_limitacao, ie_limitacao, dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
							nm_usuario_nrec, nr_seq_estrut_mat, nr_seq_material, cd_doenca_cid, ie_tipo_guia)
						(SELECT	nextval('pls_limitacao_mat_seq'), nr_seq_tipo_limit_novo_w, ie_limitacao, dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
							nm_usuario_nrec, nr_seq_estrut_mat, nr_seq_material, cd_doenca_cid, ie_tipo_guia
						from	pls_limitacao_mat
						where	nr_sequencia	= nr_seq_limitacao_mat_w);
			end;
		end loop;
		close C06;
	end if;
	end;
end loop;
close C04;

/* Carencia */

open C07;
loop
fetch C07 into
	nr_seq_tipo_carencia_w;
EXIT WHEN NOT FOUND; /* apply on C07 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_tipo_carencia
	where	nr_seq_carencia_ant	= nr_seq_tipo_carencia_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_tipo_carencia_seq')
		into STRICT	nr_seq_tipo_carencia_novo_w
		;
		
		insert into pls_tipo_carencia(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, ds_carencia,
						ie_cpt, ie_situacao, cd_estabelecimento, ie_padrao, ie_tipo_impacto, qt_dias_padrao,
						nr_seq_classif_cpt, cd_carencia, ie_utilizacao, cd_sistema_anterior, ie_sigla, nr_seq_carencia_ant)
					(SELECT	nr_seq_tipo_carencia_novo_w, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, ds_carencia,
						ie_cpt, ie_situacao, cd_estab_destino_p, ie_padrao, ie_tipo_impacto, qt_dias_padrao,
						nr_seq_classif_cpt, cd_carencia, ie_utilizacao, cd_sistema_anterior, ie_sigla, nr_seq_tipo_carencia_w
					from	pls_tipo_carencia
					where	nr_sequencia	= nr_seq_tipo_carencia_w);
		
		open C08;
		loop
		fetch C08 into
			nr_seq_carencia_proc_w;
		EXIT WHEN NOT FOUND; /* apply on C08 */
			begin
			insert into pls_carencia_proc(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_carencia,
							cd_procedimento, ie_origem_proced, cd_area_procedimento, cd_especialidade, cd_grupo_proc, ie_tipo_guia,
							ie_liberado, nr_seq_tipo_acomodacao, cd_doenca_cid, cd_categoria_cid)
						(SELECT	nextval('pls_carencia_proc_seq'), dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_carencia_novo_w,
							cd_procedimento, ie_origem_proced, cd_area_procedimento, cd_especialidade, cd_grupo_proc, ie_tipo_guia,
							ie_liberado, nr_seq_tipo_acomodacao, cd_doenca_cid, cd_categoria_cid
						from	pls_carencia_proc
						where	nr_sequencia	= nr_seq_carencia_proc_w);
			end;
		end loop;
		close C08;
		
		open C09;
		loop
		fetch C09 into
			nr_seq_carencia_mat_w;
		EXIT WHEN NOT FOUND; /* apply on C09 */
			begin
			insert into pls_carencia_mat(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_carencia,
							ie_liberado, nr_seq_estrut_mat, nr_seq_material)
						(SELECT	nextval('pls_carencia_mat_seq'), dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_carencia_novo_w,
							ie_liberado, nr_seq_estrut_mat, nr_seq_material
						from	pls_carencia_mat
						where	nr_sequencia	= nr_seq_carencia_mat_w);
			end;
		end loop;
		close C09;
	end if;
	end;
end loop;
close C07;

/* Co-participacao */

open C10;
loop
fetch C10 into
	nr_seq_tipo_coparticipacao_w;
EXIT WHEN NOT FOUND; /* apply on C10 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_tipo_coparticipacao
	where	nr_seq_copartic_ant	= nr_seq_tipo_coparticipacao_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_tipo_coparticipacao_seq')
		into STRICT	nr_seq_tipo_copartic_novo_w
		;
		
		insert into pls_tipo_coparticipacao(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
							ds_tipo_coparticipacao, ie_situacao, cd_estabelecimento, nr_seq_copartic_ant,
							cd_procedimento_internacao, ie_origem_proced_internacao)
						(SELECT	nr_seq_tipo_copartic_novo_w, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
							ds_tipo_coparticipacao, ie_situacao, cd_estab_destino_p, nr_seq_tipo_coparticipacao_w,
							cd_procedimento_internacao, ie_origem_proced_internacao
						from	pls_tipo_coparticipacao
						where	nr_sequencia	= nr_seq_tipo_coparticipacao_w);
		
		open C11;
		loop
		fetch C11 into
			nr_seq_coparticipacao_proc_w;
		EXIT WHEN NOT FOUND; /* apply on C11 */
			begin
			insert into pls_coparticipacao_proc(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
								cd_procedimento, ie_origem_proced, cd_area_procedimento, cd_especialidade, cd_grupo_proc,
								nr_seq_tipo_coparticipacao, ie_liberado, nr_seq_clinica, nr_seq_saida_int)
							(SELECT	nextval('pls_coparticipacao_proc_seq'), dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
								cd_procedimento, ie_origem_proced, cd_area_procedimento, cd_especialidade, cd_grupo_proc,
								nr_seq_tipo_copartic_novo_w, ie_liberado, nr_seq_clinica, nr_seq_saida_int
							from	pls_coparticipacao_proc
							where	nr_sequencia	= nr_seq_coparticipacao_proc_w);
			end;
		end loop;
		close C11;
		
		open C12;
		loop
		fetch C12 into
			nr_seq_coparticipacao_mat_w;
		EXIT WHEN NOT FOUND; /* apply on C12 */
			begin
			insert into pls_coparticipacao_mat(	nr_sequencia, ie_liberado, nr_seq_tipo_coparticipacao, dt_atualizacao, nm_usuario,
								dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_estrut_mat, nr_seq_material)
							(SELECT	nextval('pls_coparticipacao_mat_seq'), ie_liberado, nr_seq_tipo_copartic_novo_w, dt_atualizacao, nm_usuario,
								dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_estrut_mat, nr_seq_material
							from	pls_coparticipacao_mat
							where	nr_sequencia	= nr_seq_coparticipacao_mat_w);
			end;
		end loop;
		close C12;
	end if;
	end;
end loop;
close C10;


/*Regra Desconto*/

open C13;
loop
fetch C13 into
	nr_seq_regra_desc_w;
EXIT WHEN NOT FOUND; /* apply on C13 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_regra_desconto
	where	nr_seq_desconto_ant	= nr_seq_regra_desc_w
	and	cd_estabelecimento		= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_regra_desconto_seq')
		into STRICT	nr_seq_regra_desc_novo_w
		;
		
		insert into pls_regra_desconto(	nr_sequencia, nm_usuario, dt_atualizacao,
							ie_situacao, ds_regra, ie_tipo_regra,
							 ie_simulacao_preco,dt_inicio_vigencia, dt_fim_vigencia,
							cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
							nr_seq_desconto_ant)
						(SELECT	nr_seq_regra_desc_novo_w, nm_usuario, dt_atualizacao,
							ie_situacao, ds_regra, ie_tipo_regra,
							ie_simulacao_preco,dt_inicio_vigencia, dt_fim_vigencia,
							cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
							nr_seq_regra_desc_w
						from	pls_regra_desconto
						where	nr_sequencia	= nr_seq_regra_desc_w);
		
		open C14;
		loop
		fetch C14 into
			nr_seq_preco_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C14 */
			begin
			insert into pls_preco_regra(	nr_sequencia, nm_usuario, dt_atualizacao,
								nr_seq_regra, qt_min_vidas, qt_max_vidas,
								tx_desconto, ie_tipo_segurado, nm_usuario_nrec, dt_atualizacao_nrec,
								vl_desconto)
							(SELECT	nextval('pls_preco_regra_seq'), nm_usuario, dt_atualizacao,
								nr_seq_regra_desc_novo_w, qt_min_vidas, qt_max_vidas,
								tx_desconto, ie_tipo_segurado, nm_usuario_nrec, dt_atualizacao_nrec,
								vl_desconto
							from	pls_preco_regra
							where	nr_sequencia	= nr_seq_preco_regra_w);
			end;
		end loop;
		close C14;
		
		open C15;
		loop
		fetch C15 into
			nr_seq_preco_regra_autom_w;
		EXIT WHEN NOT FOUND; /* apply on C15 */
			begin
			insert into pls_preco_regra_autom(	nr_sequencia, nm_usuario, dt_atualizacao,
									nr_seq_regra, ie_situacao, dt_inicio_vigencia,
									dt_fim_vigencia, ie_contrato, ie_proposta,
									ie_tipo_estipulante, cd_estabelecimento, ie_simulador,
									nr_seq_regra_preco_ant, nm_usuario_nrec, dt_atualizacao_nrec)
								(SELECT	nextval('pls_preco_regra_autom_seq'), nm_usuario, dt_atualizacao,
									nr_seq_regra_desc_novo_w, ie_situacao, dt_inicio_vigencia,
									dt_fim_vigencia, ie_contrato, ie_proposta,
									ie_tipo_estipulante, cd_estab_destino_p, ie_simulador,
									nr_seq_preco_regra_autom_w, nm_usuario_nrec, dt_atualizacao_nrec
								from	pls_preco_regra_autom
								where	nr_sequencia	= nr_seq_preco_regra_autom_w);
			end;
		end loop;
		close C15;
		
		open C16;
		loop
		fetch C16 into
			nr_seq_regra_simul_preco_w;
		EXIT WHEN NOT FOUND; /* apply on C16 */
			begin
			insert into pls_regra_simul_preco_desc(	nr_sequencia, nm_usuario, dt_atualizacao,
									nr_seq_regra, ds_observacao, dt_inicio_vigencia,
									dt_fim_vigencia, dt_liberacao, nm_usuario_liberacao,
									cd_estabelecimento,
									nm_usuario_nrec, dt_atualizacao_nrec)
								(SELECT	nextval('pls_regra_simul_preco_desc_seq'), nm_usuario, dt_atualizacao,
									nr_seq_regra_desc_novo_w, ds_observacao, dt_inicio_vigencia,
									dt_fim_vigencia, dt_liberacao, nm_usuario_liberacao,
									cd_estab_destino_p,
									nm_usuario_nrec, dt_atualizacao_nrec
								from	pls_regra_simul_preco_desc
								where	nr_sequencia	= nr_seq_regra_simul_preco_w);
			end;
		end loop;
		close C16;
	end if;
	end;
end loop;
close C13;


/*Regra via adicional*/

open C17;
loop
fetch C17 into
	nr_seq_regra_segurado_cart_w;
EXIT WHEN NOT FOUND; /* apply on C17 */
	begin
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_regra_segurado_cart
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_regra_segurado_cart_w;
	
	if (qt_registro_w	= 0) then
		insert into pls_regra_segurado_cart(	nr_sequencia, nm_usuario, dt_atualizacao,
			vl_via_adicional, dt_inicio_vigencia, dt_fim_vigencia,
			cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec, nr_seq_anterior)
		(SELECT	nextval('pls_regra_segurado_cart_seq'), nm_usuario, dt_atualizacao,
			vl_via_adicional, dt_inicio_vigencia, dt_fim_vigencia,
			cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec, nr_seq_regra_segurado_cart_w
		from	pls_regra_segurado_cart
		where	nr_sequencia	= nr_seq_regra_segurado_cart_w);
	end if;
	end;
end loop;
close C17;

/*Controle empresarial*/

open C18;
loop
fetch C18 into
	nr_seq_carteira_contr_iden_w;
EXIT WHEN NOT FOUND; /* apply on C18 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_carteira_controle_iden
	where	nr_seq_controle_ant	= nr_seq_carteira_contr_iden_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		insert into pls_carteira_controle_iden(	nr_sequencia, nm_usuario, dt_atualizacao,
									cd_inicial, cd_final, cd_atual,
									cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
									cd_fixo, ie_situacao, ie_tipo_pessoa, ie_abrangencia,
									ie_tipo_regra, nr_seq_controle_ant)
								(SELECT	nextval('pls_carteira_controle_iden_seq'), nm_usuario, dt_atualizacao,
									cd_inicial, cd_final, cd_atual,
									cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
									cd_fixo, ie_situacao, ie_tipo_pessoa, ie_abrangencia,
									ie_tipo_regra, nr_seq_carteira_contr_iden_w
								from	pls_carteira_controle_iden
								where	nr_sequencia	= nr_seq_carteira_contr_iden_w);
	end if;
	end;
end loop;
close C18;

/* Mensalidade - Mensagem */

open C19;
loop
fetch C19 into
	nr_seq_mensalidade_mensagem_w;
EXIT WHEN NOT FOUND; /* apply on C19 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_mensagem_mensalidade
	where	nr_seq_mensagem_ant	= nr_seq_mensalidade_mensagem_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		insert into pls_mensagem_mensalidade(	nr_sequencia, nm_usuario, dt_atualizacao,
								cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
								dt_inicial,dt_final,ds_mensagem,ie_aniversario,nr_seq_mensagem_ant,
								ie_regulamentacao,nr_seq_conta_banco,qt_meses_portabilidade,
								ie_tipo_estipulante,ie_mensalidade_em_dia,nr_seq_classif_itens)
							(SELECT	nextval('pls_mensagem_mensalidade_seq'), nm_usuario, dt_atualizacao,
								cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
								dt_inicial,dt_final,ds_mensagem,
								ie_aniversario,nr_seq_mensalidade_mensagem_w,
								ie_regulamentacao,nr_seq_conta_banco,qt_meses_portabilidade,
								ie_tipo_estipulante,ie_mensalidade_em_dia,nr_seq_classif_itens
							from	pls_mensagem_mensalidade
							where	nr_sequencia	= nr_seq_mensalidade_mensagem_w);
	end if;
	end;
end loop;
close C19;

/* Mensalidade - Amortizacao*/

open C20;
loop
fetch C20 into
	nr_seq_mensalidade_amortiz_w;
EXIT WHEN NOT FOUND; /* apply on C20 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_regra_amortizacao
	where	nr_seq_amortizacao_ant	= nr_seq_mensalidade_amortiz_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		insert into pls_regra_amortizacao(	nr_sequencia, nm_usuario, dt_atualizacao,
								cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
								dt_inicio_vigencia,dt_fim_vigencia,vl_minimo,
								vl_maximo,ie_amortizar,nr_seq_trans_financ,
								nr_seq_amortizacao_ant)
							(SELECT	nextval('pls_regra_amortizacao_seq'), nm_usuario, dt_atualizacao,
								cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
								dt_inicio_vigencia,dt_fim_vigencia,vl_minimo,
								vl_maximo,ie_amortizar,nr_seq_trans_financ,
								nr_seq_mensalidade_amortiz_w
							from	pls_regra_amortizacao
							where	nr_sequencia	= nr_seq_mensalidade_amortiz_w);
	end if;
	end;
end loop;
close C20;

/*Mensalidade - Taxa emissao*/

open C21;
loop
fetch C21 into
	nr_seq_tx_boleto_emissao_w;
EXIT WHEN NOT FOUND; /* apply on C21 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_regra_emissao_boleto
	where	nr_seq_regra_emissao_ant	= nr_seq_tx_boleto_emissao_w
	and	cd_estabelecimento		= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		insert into pls_regra_emissao_boleto(	nr_sequencia, nm_usuario, dt_atualizacao,
								cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
								cd_banco,cd_portador,cd_tipo_portador,
								dt_inicio_vigencia,dt_fim_vigencia,ie_primeira_mensalidade,
								ie_situacao,vl_taxa_emissao,nr_seq_regra_emissao_ant)
							(SELECT	nextval('pls_regra_emissao_boleto_seq'), nm_usuario, dt_atualizacao,
								cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
								cd_banco,cd_portador,cd_tipo_portador,
								dt_inicio_vigencia,dt_fim_vigencia,ie_primeira_mensalidade,
								ie_situacao,vl_taxa_emissao,nr_seq_tx_boleto_emissao_w
							from	pls_regra_emissao_boleto	
							where	nr_sequencia	= nr_seq_tx_boleto_emissao_w);
	end if;
	end;
end loop;
close C21;

/*Comercial - Exigencia de declaracao de saude*/

open C22;
loop
fetch C22 into
	nr_seq_exigencia_declaracao_w;
EXIT WHEN NOT FOUND; /* apply on C22 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_regra_declaracao_prop
	where	nr_seq_regra_declaracao_ant	= nr_seq_exigencia_declaracao_w
	and	cd_estabelecimento		= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		insert into pls_regra_declaracao_prop(	nr_sequencia, nm_usuario, dt_atualizacao,
								cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
								qt_vidas,ie_nascido_plano,ie_tipo_contratacao,
								ie_situacao,nr_seq_regra_declaracao_ant)
							(SELECT	nextval('pls_regra_declaracao_prop_seq'),nm_usuario, dt_atualizacao,
								cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
								qt_vidas,ie_nascido_plano,ie_tipo_contratacao,
								ie_situacao,nr_seq_exigencia_declaracao_w
							from	pls_regra_declaracao_prop
							where	nr_sequencia	= nr_seq_exigencia_declaracao_w);
	end if;
	end;
end loop;
close C22;

/* Produtos e regras - Tipos de operacao */


/*
open C23;
loop
fetch C23 into	
	nr_seq_plano_item_w;
exit when C23%notfound;
	begin
	
	select	count(*)
	into	qt_registros_w
	from	pls_plano_item
	where	nr_seq_item_ant		= nr_seq_plano_item_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if	(qt_registros_w = 0) then
		select	pls_plano_item_seq.nextval
		into	nr_seq_plano_novo_item_w
		from	dual;

		insert into pls_plano_item		(	nr_sequencia, nm_usuario, dt_atualizacao,
								cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
								ds_item,ds_descricao_item,ie_situacao,
								nm_tabsheet,nr_seq_item_ant)
							(select	nr_seq_plano_novo_item_w,nm_usuario, dt_atualizacao,
								cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,	
								ds_item,ds_descricao_item,ie_situacao,
								nm_tabsheet,nr_seq_plano_item_w
							from	pls_plano_item
							where	nr_sequencia	= nr_seq_plano_item_w);
		/* Produtos e regras - Tipos utilizacao para restricao de bonificacao */
	
		
		/*open C24;
		loop
		fetch C24 into	
			nr_seq_plano_item_operacao_w;
		exit when C24%notfound;
			begin
			insert into pls_plano_item_operacao	(	nr_sequencia, nm_usuario, dt_atualizacao,
									nm_usuario_nrec, dt_atualizacao_nrec,nr_seq_plano_item,
									ie_tipo_operacao)
								(select	pls_plano_item_operacao_seq.nextval,nm_usuario, dt_atualizacao,
									nm_usuario_nrec, dt_atualizacao_nrec,nr_seq_plano_novo_item_w,
									ie_tipo_operacao
								from	pls_plano_item_operacao
								where	nr_sequencia	= nr_seq_plano_item_operacao_w);
			end;
		end loop;
		close C24;
	end if;
	end;
end loop;
close C23;*/


/* Produtos e regras - Tipos utilizacao para restricao de bonificacao */

open C25;
loop
fetch C25 into
	nr_seq_bonificacao_rest_w;
EXIT WHEN NOT FOUND; /* apply on C25 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_bonific_tipo_restricao
	where	nr_seq_retricao_ant	= nr_seq_bonificacao_rest_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_bonific_tipo_restricao_seq')
		into STRICT	nr_seq_bonificacao_rest_novo_w
		;
		
		insert into pls_bonific_tipo_restricao(	nr_sequencia, nm_usuario, dt_atualizacao,
									cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
									ds_tipo_restricao,nr_seq_retricao_ant)
								(SELECT	nr_seq_bonificacao_rest_novo_w,nm_usuario, dt_atualizacao,
									cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
									ds_tipo_restricao,nr_seq_bonificacao_rest_w
								from	pls_bonific_tipo_restricao
								where	nr_sequencia	= nr_seq_bonificacao_rest_w);
		/* Produtos e regras - Tipos estrutura para restricao de bonificacao */

		open C26;
		loop
		fetch C26 into
			nr_seq_bonificacao_estr_rest_w;
		EXIT WHEN NOT FOUND; /* apply on C26 */
			begin
			insert into pls_bonific_restr_regra(	nr_sequencia, nm_usuario, dt_atualizacao,
									cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
									cd_area_procedimento,cd_especialidade,cd_grupo_proc,
									cd_procedimento,ie_liberado,nr_seq_tipo_restricao)
								(SELECT	nextval('pls_bonific_restr_regra_seq'),nm_usuario, dt_atualizacao,
									cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
									cd_area_procedimento,cd_especialidade,cd_grupo_proc,
									cd_procedimento,ie_liberado,nr_seq_bonificacao_rest_novo_w
								from	pls_bonific_restr_regra
								where	nr_sequencia	 = nr_seq_bonificacao_estr_rest_w);
			end;
		end loop;
		close C26;
	end if;
	end;
end loop;
close C25;

/* Produtos e regras - Tipos de coberturas para a bonificacaes */

open C27;
loop
fetch C27 into
	nr_seq_bonificacao_cobert_w;
EXIT WHEN NOT FOUND; /* apply on C27 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_tipo_cobert_bonific
	where	nr_seq_cobertura_ant	= nr_seq_bonificacao_cobert_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_tipo_cobert_bonific_seq')
		into STRICT	nr_seq_bonific_cobert_novo_w
		;
		
		insert into pls_tipo_cobert_bonific(	nr_sequencia,nm_usuario, dt_atualizacao,
									cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
									ds_tipo_cobertura,ie_situacao,nr_seq_cobertura_ant)
								(SELECT	nr_seq_bonific_cobert_novo_w,nm_usuario, dt_atualizacao,
									cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
									ds_tipo_cobertura,ie_situacao,nr_seq_bonificacao_cobert_w
								from	pls_tipo_cobert_bonific
								where	nr_sequencia	= nr_seq_bonificacao_cobert_w);
		/* Produtos e regras - Tipos estrutura de coberturas para bonificacoes */

		open C28;
		loop
		fetch C28 into
			nr_seq_bonif_estrut_cobert_w;
		EXIT WHEN NOT FOUND; /* apply on C28 */
			begin
			insert into pls_cobertura_bonificacao(	nr_sequencia,nm_usuario, dt_atualizacao,
									cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
									cd_procedimento,ie_origem_proced,cd_area_procedimento,
									cd_especialidade,cd_grupo_proc,ie_liberado,
									nr_seq_tipo_cobertura)
								(SELECT	nextval('pls_cobertura_bonificacao_seq'),nm_usuario, dt_atualizacao,
									cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
									cd_procedimento,ie_origem_proced,cd_area_procedimento,
									cd_especialidade,cd_grupo_proc,ie_liberado,
									nr_seq_bonific_cobert_novo_w
								from	pls_cobertura_bonificacao
								where	nr_sequencia = 	nr_seq_bonif_estrut_cobert_w);
			end;
		end loop;
		close C28;
	end if;
	end;
end loop;
close C27;

/* Produtos e regras - Regiao*/

open C29;
loop
fetch C29 into
	nr_seq_regiao_w;
EXIT WHEN NOT FOUND; /* apply on C29 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_regiao
	where	nr_seq_regiao_ant	= nr_seq_regiao_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_regiao_seq')
		into STRICT	nr_seq_regiao_novo_w
		;
		
		insert into	pls_regiao(	nr_sequencia,nm_usuario, dt_atualizacao,
							cd_estabelecimento, nm_usuario_nrec, dt_atualizacao_nrec,
							ds_regiao,cd_empresa,ie_abrange_nac,
							cd_regiao,ie_situacao,nr_seq_regiao_ant)
						(SELECT	nr_seq_regiao_novo_w,nm_usuario, dt_atualizacao,
							cd_estab_destino_p, nm_usuario_nrec, dt_atualizacao_nrec,
							ds_regiao,cd_empresa,ie_abrange_nac,
							cd_regiao,ie_situacao,nr_seq_regiao_w
						from	pls_regiao
						where	nr_sequencia	= nr_seq_regiao_w);
		/* Produtos e regras - Regiao localidade*/

		open C30;
		loop
		fetch C30 into
			nr_seq_regiao_localicadade_w;
		EXIT WHEN NOT FOUND; /* apply on C30 */
			begin
			insert into pls_regiao_local(	nr_sequencia,nm_usuario, dt_atualizacao,
								nm_usuario_nrec, dt_atualizacao_nrec,
								cd_municipio_ibge,sg_uf_municipio,nr_seq_regiao)
							(SELECT	nextval('pls_regiao_local_seq'),nm_usuario, dt_atualizacao,
								nm_usuario_nrec, dt_atualizacao_nrec,
								cd_municipio_ibge,sg_uf_municipio,nr_seq_regiao_novo_w
							from	pls_regiao_local
							where	nr_sequencia	= nr_seq_regiao_localicadade_w);
			end;
		end loop;
		close C30;
	end if;
	end;
end loop;
close C29;

open C31;
loop
fetch C31 into
	nr_seq_liberacao_w;
EXIT WHEN NOT FOUND; /* apply on C31 */
	begin
	
	select	nextval('pls_regra_liberacao_seq')
	into STRICT	nr_seq_regra_lib_w
	;
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_regra_liberacao
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_liberacao_w;
	
	if (qt_registro_w	= 0) then
		insert into pls_regra_liberacao(nr_sequencia, cd_estabelecimento, dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec, ie_liberado, ie_status, cd_procedimento, ie_origem_proced,
			ie_situacao, cd_area_procedimento, cd_especialidade, cd_grupo_proc, ie_tipo_regra,
			vl_procedimento, qt_executada, qt_liberada, ie_tipo_qtde, qt_tipo_quantidade,
			ie_tipo_guia_conta, nr_seq_mensagem, qt_dias_mensal_vencido, ie_tipo_processo,
			ie_tipo_pagador, nr_seq_material, nr_seq_estrut_mat, nr_seq_anterior)
		(SELECT	nr_seq_regra_lib_w, cd_estab_destino_p, clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, ie_liberado, ie_status, cd_procedimento, ie_origem_proced,
			ie_situacao, cd_area_procedimento, cd_especialidade, cd_grupo_proc, ie_tipo_regra,
			vl_procedimento, qt_executada, qt_liberada, ie_tipo_qtde, qt_tipo_quantidade,
			ie_tipo_guia_conta, nr_seq_mensagem, qt_dias_mensal_vencido, ie_tipo_processo,
			ie_tipo_pagador, nr_seq_material, nr_seq_estrut_mat, nr_seq_liberacao_w
		from	pls_regra_liberacao
		where	nr_sequencia	= nr_seq_liberacao_w);
		
		open C41;
		loop
		fetch C41 into
			nr_seq_lib_grupo_auditor_w;
		EXIT WHEN NOT FOUND; /* apply on C41 */
			begin
			
			insert into pls_lib_grupo_auditor(nr_sequencia, nr_seq_grupo_auditor, nr_seq_regra_lib,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_ordem)
			(SELECT	nextval('pls_lib_grupo_auditor_seq'), nr_seq_grupo_auditor, nr_seq_regra_lib_w,
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, nr_seq_ordem
			from	pls_lib_grupo_auditor
			where	nr_sequencia	= nr_seq_lib_grupo_auditor_w);
			end;
		end loop;
		close C41;
	end if;
	end;
end loop;
close C31;

open C32;
loop
fetch C32 into
	nr_seq_grupo_auditor_w;
EXIT WHEN NOT FOUND; /* apply on C32 */
	begin
	
	select	nextval('pls_grupo_auditor_seq')
	into STRICT	nr_seq_grupo_auditor_novo_w
	;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_grupo_auditor
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_grupo_auditor_w;
	
	if (qt_registro_w	= 0) then
		insert into pls_grupo_auditor(nr_sequencia, nm_grupo_auditor, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			ie_situacao, ie_externo, cd_estabelecimento,
			nr_seq_anterior, ie_tipo_auditoria)
		(SELECT	nr_seq_grupo_auditor_novo_w, nm_grupo_auditor, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			ie_situacao, ie_externo, cd_estab_destino_p, 
			nr_seq_grupo_auditor_w, 1
		from	pls_grupo_auditor
		where	nr_sequencia	= nr_seq_grupo_auditor_w);
		
		open C42;
		loop
		fetch C42 into
			nr_seq_membro_grupo_aud_w;
		EXIT WHEN NOT FOUND; /* apply on C42 */
			begin
			
			insert into pls_membro_grupo_aud(nr_sequencia, nr_seq_grupo, cd_pessoa_fisica,
				dt_inclusao, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, ie_situacao)
			(SELECT	nextval('pls_membro_grupo_aud_seq'), nr_seq_grupo_auditor_novo_w, cd_pessoa_fisica,
				dt_inclusao, clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, ie_situacao
			from	pls_membro_grupo_aud
			where	nr_sequencia = nr_seq_membro_grupo_aud_w);
			
			end;
		end loop;
		close C42;
	end if;
	end;
end loop;
close C32;

open C33;
loop
fetch C33 into
	nr_seq_regra_autorizacao_w;
EXIT WHEN NOT FOUND; /* apply on C33 */
	begin
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_regra_autorizacao
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_regra_autorizacao_w;
	
	if (qt_registro_w	= 0) then
		select	max(nr_seq_prestador)
		into STRICT	nr_seq_prest_ant_w
		from	pls_regra_autorizacao
		where	nr_sequencia	= nr_seq_regra_autorizacao_w;
		
		begin
		select	nr_sequencia
		into STRICT	nr_seq_prest_novo_w
		from	pls_prestador
		where	nr_seq_anterior		= nr_seq_prest_ant_w
		and	cd_estabelecimento	= cd_estab_destino_p;
		exception
		when others then
			nr_seq_prest_novo_w	:= nr_seq_prest_ant_w;
		end;
		
		insert into pls_regra_autorizacao(nr_sequencia, cd_estabelecimento, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_procedimento, ie_origem_proced, ie_situacao,
			cd_area_procedimento, cd_especialidade, cd_grupo_proc,
			ie_tipo_atendimento, ie_liberado, ie_tipo_guia,
			nr_seq_tipo_atendimento, nr_seq_prestador, nr_seq_material,
			nr_seq_estrut_mat, nr_seq_anterior, ie_guia_valida,
			dt_inicio_vigencia, dt_fim_vigencia, ie_tipo_congenere,
			ie_tipo_intercambio, ie_tipo_segurado, ie_carater_internacao,ie_preco,
			ie_saude_ocupacional, ie_regime_atendimento)
		(SELECT	nextval('pls_regra_autorizacao_seq'), cd_estab_destino_p, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			cd_procedimento, ie_origem_proced, ie_situacao,
			cd_area_procedimento, cd_especialidade, cd_grupo_proc,
			ie_tipo_atendimento, ie_liberado, ie_tipo_guia,
			nr_seq_tipo_atendimento, nr_seq_prest_novo_w, nr_seq_material,
			nr_seq_estrut_mat, nr_seq_regra_autorizacao_w, ie_guia_valida,
			dt_inicio_vigencia, dt_fim_vigencia, ie_tipo_congenere,
			ie_tipo_intercambio, ie_tipo_segurado, ie_carater_internacao, ie_preco,
			ie_saude_ocupacional, ie_regime_atendimento
		from	pls_regra_autorizacao
		where	nr_sequencia	= nr_seq_regra_autorizacao_w);
	end if;
	end;
end loop;
close C33;

open C34;
loop
fetch C34 into
	nr_seq_acao_regra_conta_w;
EXIT WHEN NOT FOUND; /* apply on C34 */
	begin
	
	select	nextval('pls_acao_regra_conta_seq')
	into STRICT	nr_seq_acao_regra_conta_novo_w
	;
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_acao_regra_conta
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_acao_regra_conta_w;
	
	if (qt_registro_w	= 0) then
		insert into pls_acao_regra_conta(nr_sequencia, ds_regra, ie_guia_referencia,
			ie_nascidos_vivos, ie_situacao, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_estabelecimento, ie_regime_internacao, ie_tipo_acomodacao,
			ie_tipo_internacao, ie_motivo_saida_internacao, ie_tipo_atendimento,
			ie_motivo_saida_spsadt, ie_profissional_compl, ie_data_internacao, nr_seq_anterior)
		(SELECT	nr_seq_acao_regra_conta_novo_w, ds_regra, ie_guia_referencia,
			ie_nascidos_vivos, ie_situacao, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			cd_estab_destino_p, ie_regime_internacao, ie_tipo_acomodacao,
			ie_tipo_internacao, ie_motivo_saida_internacao, ie_tipo_atendimento,
			ie_motivo_saida_spsadt, ie_profissional_compl, ie_data_internacao, nr_seq_acao_regra_conta_w
		from	pls_acao_regra_conta
		where	nr_sequencia	= nr_seq_acao_regra_conta_w);
		
		open C44;
		loop
		fetch C44 into
			nr_seq_filtro_regra_conta_w;
		EXIT WHEN NOT FOUND; /* apply on C44 */
			begin
			insert into pls_filtro_regra_conta(nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_acao_regra,
				ie_tipo_guia, cd_procedimento, ie_origem_proced,
				cd_area_procedimento, cd_especialidade, cd_grupo_proc,
				ie_situacao, cd_estabelecimento, ie_estrutura, nr_seq_tipo_atendimento,
				nr_seq_saida_consulta, ie_tipo_consulta)
			(SELECT	nextval('pls_filtro_regra_conta_seq'), clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, nr_seq_acao_regra_conta_novo_w,
				ie_tipo_guia, cd_procedimento, ie_origem_proced,
				cd_area_procedimento, cd_especialidade, cd_grupo_proc,
				ie_situacao, cd_estabelecimento, ie_estrutura, nr_seq_tipo_atendimento,
				nr_seq_saida_consulta, ie_tipo_consulta
			from	pls_filtro_regra_conta
			where	nr_sequencia = nr_seq_filtro_regra_conta_w);
			end;
		end loop;
		close C44;
	end if;
	end;
end loop;
close C34;

open C35;
loop
fetch C35 into
	nr_seq_vinculo_direto_w;
EXIT WHEN NOT FOUND; /* apply on C35 */
	begin
	
	select	nextval('pls_vinculo_direto_seq')
	into STRICT	nr_seq_vinculo_direto_novo_w
	;
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_vinculo_direto
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_vinculo_direto_w;
	
	if (qt_registro_w	= 0) then
		insert into pls_vinculo_direto(nr_sequencia, ie_situacao, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_procedimento, ie_origem_proced, pr_medico,
			pr_anestesista, pr_auxiliares, pr_custo_operacional,
			pr_materiais, cd_estabelecimento, nr_seq_anterior)
		(SELECT	nr_seq_vinculo_direto_novo_w, ie_situacao, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			cd_procedimento, ie_origem_proced, pr_medico,
			pr_anestesista, pr_auxiliares, pr_custo_operacional,
			pr_materiais, cd_estab_destino_p, nr_seq_vinculo_direto_w
		from	pls_vinculo_direto
		where	nr_sequencia	= nr_seq_vinculo_direto_w);
		
		open C45;
		loop
		fetch C45 into
			nr_seq_vinculo_direto_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C45 */
			begin
			
			insert into pls_vinculo_direto_regra(nr_sequencia, ie_situacao, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				cd_procedimento, ie_origem_proced, cd_area_procedimento,
				cd_especialidade, cd_grupo_proc, pr_medico,
				pr_anestesista, pr_auxiliares, pr_custo_operacional,
				pr_materiais, nr_seq_vinculo)
			(SELECT	nextval('pls_vinculo_direto_regra_seq'), ie_situacao, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				cd_procedimento, ie_origem_proced, cd_area_procedimento,
				cd_especialidade, cd_grupo_proc, pr_medico,
				pr_anestesista, pr_auxiliares, pr_custo_operacional,
				pr_materiais, nr_seq_vinculo_direto_novo_w
			from	pls_vinculo_direto_regra
			where	nr_sequencia	= nr_seq_vinculo_direto_regra_w);
			end;
		end loop;
		close C45;
	end if;
	end;
end loop;
close C35;


open C36;
loop
fetch C36 into
	nr_seq_regra_via_acesso_w;
EXIT WHEN NOT FOUND; /* apply on C36 */
	begin
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_regra_via_acesso
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_regra_via_acesso_w;
	
	if (qt_registro_w	= 0) then
		select	max(nr_seq_prestador)
		into STRICT	nr_seq_prest_ant_w
		from	pls_regra_via_acesso
		where	nr_sequencia	= nr_seq_regra_via_acesso_w;
		
		begin
		select	nr_sequencia
		into STRICT	nr_seq_prest_novo_w
		from	pls_prestador
		where	nr_seq_anterior		= nr_seq_prest_ant_w
		and	cd_estabelecimento	= cd_estab_destino_p;
		exception
		when others then
			nr_seq_prest_novo_w	:= nr_seq_prest_ant_w;
		end;
		
		insert into pls_regra_via_acesso(nr_sequencia, ie_situacao, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_procedimento, ie_origem_proced, cd_area_procedimento,
			cd_especialidade, cd_grupo_proc, nr_seq_prestador,
			ie_via_acesso, ie_via_obrigatoria, cd_estabelecimento, nr_seq_anterior)
		(SELECT	nextval('pls_regra_via_acesso_seq'), ie_situacao, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			cd_procedimento, ie_origem_proced, cd_area_procedimento,
			cd_especialidade, cd_grupo_proc, nr_seq_prest_novo_w,
			ie_via_acesso, ie_via_obrigatoria, cd_estabelecimento, nr_seq_regra_via_acesso_w
		from	pls_regra_via_acesso
		where	nr_sequencia	= nr_seq_regra_via_acesso_w);
	end if;
	end;
end loop;
close C36;


/*Emissor carteira*/

open C37;
loop
fetch C37 into
	nr_seq_emissor_carteira_w;
EXIT WHEN NOT FOUND; /* apply on C37 */
	begin
	
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_emissor_carteira
	where	nr_seq_emissor_ant	= nr_seq_emissor_carteira_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	
	if (qt_registros_w = 0) then
		select	nextval('pls_emissor_carteira_seq')
		into STRICT	nr_seq_emissor_cart_novo_w
		;
		
		insert into pls_emissor_carteira(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
					nm_usuario, nm_usuario_nrec, cd_estabelecimento,
					nr_seq_outorgante, ds_emissor, nr_seq_congenere,
					nr_seq_emissor_ant)
				(SELECT	nr_seq_emissor_cart_novo_w, dt_atualizacao, clock_timestamp(),
					nm_usuario, nm_usuario_p, cd_estab_destino_p,
					nr_seq_outorgante, ds_emissor, nr_seq_congenere,
					nr_seq_emissor_carteira_w
				from	pls_emissor_carteira
				where	nr_sequencia	= nr_seq_emissor_carteira_w);
		
		open C38;
		loop
		fetch C38 into
			nr_seq_emissor_cart_num_w;
		EXIT WHEN NOT FOUND; /* apply on C38 */
			begin
			insert into pls_emissor_cart_numero(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
						nm_usuario, nm_usuario_nrec, nr_seq_emissor,
						nr_inicial, nr_atual)
					(SELECT	nextval('pls_emissor_cart_numero_seq'), dt_atualizacao, clock_timestamp(),
						nm_usuario, nm_usuario_p, nr_seq_emissor_cart_novo_w,
						nr_inicial, nr_atual
					from	pls_emissor_cart_numero
					where	nr_sequencia	= nr_seq_emissor_cart_num_w);
			end;
		end loop;
		close C38;
		
		open C39;
		loop
		fetch C39 into
			nr_seq_regra_carteira_w;
		EXIT WHEN NOT FOUND; /* apply on C39 */
			begin
			
			select	nextval('pls_regra_carteira_seq')
			into STRICT	nr_seq_regra_cart_novo_w
			;
			
			insert into pls_regra_carteira(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
							nm_usuario, nm_usuario_nrec, nr_seq_emissor,
							ds_regra, ds_mascara, ie_situacao)
						(SELECT	nr_seq_regra_cart_novo_w, dt_atualizacao, clock_timestamp(),
							nm_usuario, nm_usuario_p, nr_seq_emissor_cart_novo_w,
							ds_regra, ds_mascara, ie_situacao
						from	pls_regra_carteira
						where	nr_sequencia	= nr_seq_regra_carteira_w);
			
			open C40;
			loop
			fetch C40 into
				nr_seq_regra_cart_campo_w;
			EXIT WHEN NOT FOUND; /* apply on C40 */
				begin
				insert into pls_regra_carteira_campo(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
							nm_usuario, nm_usuario_nrec, nr_seq_emissor,
							ds_mascara, nr_seq_apresentacao, ie_tipo_campo,
							nr_seq_atual, nr_seq_regra_carteira)
						(SELECT	nextval('pls_regra_carteira_campo_seq'), dt_atualizacao, clock_timestamp(),
							nm_usuario, nm_usuario_p, nr_seq_emissor_cart_novo_w,
							ds_mascara, nr_seq_apresentacao, ie_tipo_campo,
							nr_seq_atual, nr_seq_regra_cart_novo_w
						from	pls_regra_carteira_campo
						where	nr_sequencia	= nr_seq_regra_cart_campo_w);
				end;
			end loop;
			close C40;
			end;
		end loop;
		close C39;
	end if;	
	end;
end loop;
close C37;

open C46;
loop
fetch C46 into
	nr_seq_conversao_proc_w;
EXIT WHEN NOT FOUND; /* apply on C46 */
	begin
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_conversao_proc
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_conversao_proc_w;
	
	if (qt_registro_w	= 0) then
		select	max(nr_seq_prestador)
		into STRICT	nr_seq_prest_ant_w
		from	pls_conversao_proc
		where	nr_sequencia	= nr_seq_conversao_proc_w;
		
		begin
		select	nr_sequencia
		into STRICT	nr_seq_prest_novo_w
		from	pls_prestador
		where	nr_seq_anterior		= nr_seq_prest_ant_w
		and	cd_estabelecimento	= cd_estab_destino_p;
		exception
		when others then
			nr_seq_prest_novo_w	:= nr_seq_prest_ant_w;
		end;
		
		insert into pls_conversao_proc(nr_sequencia, cd_estabelecimento, cd_proc_conversao,
			ie_origem_conversao, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, cd_procedimento,
			ie_origem_proced, cd_area_procedimento, cd_especialidade,
			cd_grupo_proc, nr_seq_prestador, ie_situacao,
			nr_seq_congenere, nr_seq_anterior, cd_proc_envio,
			ds_proc_envio, nr_seq_grupo_contrato)
		(SELECT	nextval('pls_conversao_proc_seq'), cd_estab_destino_p, cd_proc_conversao,
			ie_origem_conversao, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, cd_procedimento,
			ie_origem_proced, cd_area_procedimento, cd_especialidade,
			cd_grupo_proc, nr_seq_prest_novo_w, ie_situacao,
			nr_seq_congenere, nr_seq_conversao_proc_w, cd_proc_envio, 
			ds_proc_envio, nr_seq_grupo_contrato
		from	pls_conversao_proc
		where	nr_sequencia	= nr_seq_conversao_proc_w);
	end if;
	end;
end loop;
close C46;

open C47;
loop
fetch C47 into
	nr_seq_regra_qtde_proc_w;
EXIT WHEN NOT FOUND; /* apply on C47 */
	begin
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_regra_qtde_proc
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_regra_qtde_proc_w;
	
	if (qt_registro_w	= 0) then
		select	max(nr_seq_prestador)
		into STRICT	nr_seq_prest_ant_w
		from	pls_regra_qtde_proc
		where	nr_sequencia	= nr_seq_regra_qtde_proc_w;
		
		begin
		select	nr_sequencia
		into STRICT	nr_seq_prest_novo_w
		from	pls_prestador
		where	nr_seq_anterior		= nr_seq_prest_ant_w
		and	cd_estabelecimento	= cd_estab_destino_p;
		exception
		when others then
			nr_seq_prest_novo_w	:= nr_seq_prest_ant_w;
		end;
		
		insert into pls_regra_qtde_proc(nr_sequencia, ie_situacao, qt_permitida,
			nr_seq_prestador, ie_tipo_quantidade, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_procedimento, ie_origem_proced, cd_area_procedimento,
			cd_especialidade, cd_grupo_proc, cd_estabelecimento,
			ie_evento, ie_tipo_guia, qt_tipo_quantidade,
			ie_tipo_atendimento, nr_seq_anterior, dt_inicio_vigencia,
			dt_fim_vigencia)
		(SELECT nextval('pls_regra_qtde_proc_seq'), ie_situacao, qt_permitida,
			nr_seq_prest_novo_w, ie_tipo_quantidade, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			cd_procedimento, ie_origem_proced, cd_area_procedimento,
			cd_especialidade, cd_grupo_proc, cd_estab_destino_p,
			ie_evento, ie_tipo_guia, qt_tipo_quantidade,
			ie_tipo_atendimento, nr_seq_regra_qtde_proc_w, dt_inicio_vigencia,
			dt_fim_vigencia
		from	pls_regra_qtde_proc
		where	nr_sequencia	= nr_seq_regra_qtde_proc_w);
	end if;
	end;
end loop;
close C47;

open C48;
loop
fetch C48 into
	nr_seq_regra_lanc_w;
EXIT WHEN NOT FOUND; /* apply on C48 */
	begin
	
	select	nextval('pls_regra_lanc_seq')
	into STRICT	nr_seq_regra_lanc_novo_w
	;
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_regra_lanc
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_regra_lanc_w;
	
	if (qt_registro_w	= 0) then
		select	max(nr_seq_prestador)
		into STRICT	nr_seq_prest_ant_w
		from	pls_regra_lanc
		where	nr_sequencia	= nr_seq_regra_lanc_w;
		
		begin
		select	nr_sequencia
		into STRICT	nr_seq_prest_novo_w
		from	pls_prestador
		where	nr_seq_anterior		= nr_seq_prest_ant_w
		and	cd_estabelecimento	= cd_estab_destino_p;
		exception
		when others then
			nr_seq_prest_novo_w	:= nr_seq_prest_ant_w;
		end;
		
		insert into pls_regra_lanc(nr_sequencia, cd_estabelecimento, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			ie_situacao, ie_evento, ie_tipo_guia,
			nr_seq_prestador, ie_tipo_atend_tiss, nr_seq_anterior)
		(SELECT nr_seq_regra_lanc_novo_w, cd_estab_destino_p, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			ie_situacao, ie_evento, ie_tipo_guia,
			nr_seq_prest_novo_w, ie_tipo_atend_tiss, nr_seq_regra_lanc_w
		from	pls_regra_lanc
		where	nr_sequencia	= nr_seq_regra_lanc_w);
		
		open C49;
		loop
		fetch C49 into
			nr_seq_regra_lanc_item_w;
		EXIT WHEN NOT FOUND; /* apply on C49 */
			begin
			insert into pls_regra_lanc_item(nr_sequencia, dt_atualizacao, nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_regra,
					cd_procedimento, ie_origem_proced)
				(SELECT	nextval('pls_regra_lanc_item_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_lanc_novo_w,
					cd_procedimento, ie_origem_proced
				from	pls_regra_lanc_item
				where	nr_sequencia	= nr_seq_regra_lanc_item_w);
			end;
		end loop;
		close C49;
	end if;
	end;
end loop;
close C48;

open C50;
loop
fetch C50 into
	nr_seq_grupo_despesa_w;
EXIT WHEN NOT FOUND; /* apply on C50 */
	begin
	
	select	nextval('ans_grupo_despesa_seq')
	into STRICT	nr_seq_grupo_despesa_novo_w
	;
	
	select	count(*)
	into STRICT	qt_registro_w
	from	ans_grupo_despesa
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_grupo_despesa_w;
	
	if (qt_registro_w	= 0) then
		insert into ans_grupo_despesa(nr_sequencia, ds_grupo, ie_tipo_grupo, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, ie_situacao,
			nr_seq_grupo_superior, nr_seq_apresentacao, cd_estabelecimento,
			nr_seq_anterior)
		(SELECT	nr_seq_grupo_despesa_novo_w, ds_grupo, ie_tipo_grupo, clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, ie_situacao,
			nr_seq_grupo_superior, nr_seq_apresentacao, cd_estab_destino_p,
			nr_seq_grupo_despesa_w
		from	ans_grupo_despesa
		where	nr_sequencia	= nr_seq_grupo_despesa_w);
		
		open C51;
		loop
		fetch C51 into
			nr_seq_desp_copartic_w;
		EXIT WHEN NOT FOUND; /* apply on C51 */
			begin
			
			insert into ans_grupo_desp_copartic(nr_sequencia, nr_seq_clinica, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				ie_liberado, nr_seq_grupo_desp)
			(SELECT	nextval('ans_grupo_desp_copartic_seq'), nr_seq_clinica, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				ie_liberado, nr_seq_grupo_despesa_novo_w
			from	ans_grupo_desp_copartic
			where	nr_sequencia	= nr_seq_desp_copartic_w);
			end;
		end loop;
		close C51;
		
		open C54;
		loop
		fetch C54 into
			nr_seq_ans_grupo_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C54 */
			begin
			
			select	nr_seq_tipo_atendimento
			into STRICT	nr_seq_tipo_atendimento_ant_w
			from	ans_grupo_desp_regra
			where	nr_sequencia	= nr_seq_ans_grupo_regra_w;
			
			begin
			select	nr_sequencia
			into STRICT	nr_seq_tipo_atendimento_novo_w
			from	pls_tipo_documento
			where	nr_seq_anterior	= nr_seq_tipo_atendimento_ant_w;
			exception
			when others then
				nr_seq_tipo_atendimento_novo_w	:= null;
			end;
			
			insert into ans_grupo_desp_regra(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
					nr_seq_grupo_ans,nr_seq_tipo_atendimento,ie_tipo_guia,nr_seq_conselho,
					ie_regime_internacao, ie_tipo_protocolo, nr_seq_tipo_atend_princ,
					ie_tipo_guia_princ)
				(SELECT	nextval('ans_grupo_desp_regra_seq'),clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
					nr_seq_grupo_despesa_novo_w,nr_seq_tipo_atendimento_novo_w,ie_tipo_guia,nr_seq_conselho,
					ie_regime_internacao, ie_tipo_protocolo, nr_seq_tipo_atend_princ,
					ie_tipo_guia_princ
				from	ans_grupo_desp_regra
				where	nr_sequencia	= nr_seq_ans_grupo_regra_w);
			end;
		end loop;
		close C54;
		
		open C55;
		loop
		fetch C55 into
			nr_seq_ans_grupo_proc_w;
		EXIT WHEN NOT FOUND; /* apply on C55 */
			begin
			insert into ans_grupo_desp_proc(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
					nr_seq_grupo_ans,cd_procedimento,ie_origem_proced,cd_area_procedimento,
					cd_especialidade,cd_grupo_proc,ie_liberado)
				(SELECT	nextval('ans_grupo_desp_proc_seq'),clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
					nr_seq_grupo_despesa_novo_w,cd_procedimento,ie_origem_proced,cd_area_procedimento,
					cd_especialidade,cd_grupo_proc,ie_liberado
				from	ans_grupo_desp_proc
				where	nr_sequencia	= nr_seq_ans_grupo_proc_w);
			end;
		end loop;
		close C55;
		
		open C56;
		loop
		fetch C56 into
			nr_seq_ans_grupo_mat_w;
		EXIT WHEN NOT FOUND; /* apply on C56 */
			begin
			insert into ans_grupo_desp_mat(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
					nr_seq_grupo_desp,ie_tipo_despesa,ie_liberado)
				(SELECT	nextval('ans_grupo_desp_mat_seq'),clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
					nr_seq_grupo_despesa_novo_w,ie_tipo_despesa,ie_liberado
				from	ans_grupo_desp_mat
				where	nr_sequencia	= nr_seq_ans_grupo_mat_w);
			end;
		end loop;
		close C56;
	end if;
	end;
end loop;
close C50;

open C52;
loop
fetch C52 into
	nr_seq_regra_relat_grupo_w;
EXIT WHEN NOT FOUND; /* apply on C52 */
	begin
	
	select	nextval('pls_regra_relat_grupo_seq')
	into STRICT	nr_seq_regra_relat_novo_w
	;
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_regra_relat_grupo
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_regra_relat_grupo_w;
	
	if (qt_registro_w	= 0) then
		insert into pls_regra_relat_grupo(nr_sequencia, ie_grupo, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_estabelecimento, nr_seq_anterior, nr_seq_grupo_relat)
		(SELECT	nr_seq_regra_relat_novo_w, ie_grupo, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			cd_estab_destino_p, nr_seq_regra_relat_grupo_w, nr_seq_grupo_relat
		from	pls_regra_relat_grupo
		where	nr_sequencia	= nr_seq_regra_relat_grupo_w);
		
		open C53;
		loop
		fetch C53 into
			nr_seq_regra_relatorio_w;
		EXIT WHEN NOT FOUND; /* apply on C53 */
			begin
			insert into pls_regra_relatorio(nr_sequencia, nr_seq_grupo, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				nr_seq_relatorio, ie_padrao)
			(SELECT	nextval('pls_regra_relatorio_seq'), nr_seq_regra_relat_novo_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				nr_seq_relatorio, ie_padrao
			from	pls_regra_relatorio
			where	nr_sequencia	= nr_seq_regra_relatorio_w);
			end;
		end loop;
		close C53;
	end if;
	end;
end loop;
close C52;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_copiar_cadastro_regras ( cd_estab_origem_p bigint, cd_estab_destino_p bigint, nm_usuario_p text) FROM PUBLIC;

