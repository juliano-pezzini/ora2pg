-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proc_rotina_adic_exam ( nr_seq_agenda_p bigint, nr_seq_grupo_item_p bigint, nm_usuario_p text, ds_erro_p INOUT text, cd_medico_p text default null, qt_procedimento_p bigint default 1, ie_lado_p text default null) AS $body$
DECLARE


cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
cd_procedimento_ww	bigint;
ie_origem_proced_ww	bigint;
nr_seq_proc_interno_ww	bigint;
nr_Sequencia_w		bigint;

cd_procedimento_princ_w		agenda_paciente.cd_procedimento%type;
ie_origem_proced_princ_w	agenda_paciente.ie_origem_proced%type;
nr_seq_proc_interno_princ_w	agenda_paciente.nr_seq_proc_interno%type;
qt_tempo_proc_princ_w		agenda_paciente.nr_minuto_duracao%type;

cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_estabelecimento_w	smallint;
ie_consiste_duracao_w	varchar(15);
ie_calc_min_dur_w		varchar(1);
qt_tempo_proc_w		bigint := 0;
qt_tempo_proc_lancado_w	bigint := 0;
qt_tot_proc_lancado_w	bigint := 0;
qt_tot_proc_lancado_ww	bigint := 0;
qt_adicionais_marcados_w	bigint := 0;
cd_agenda_w		bigint;
cd_profissional_w		varchar(10);
cd_pessoa_fisica_w	varchar(10);
ie_lado_w		varchar(1);
cd_convenio_ww		integer;
cd_categoria_ww		varchar(10);
cd_plano_w		varchar(10);
ds_erro_w		varchar(255) := '';
ie_tempo_sobrep_w		varchar(1) := 'N';
dt_agenda_w		timestamp;
nr_minuto_duracao_w	bigint;
ie_consist_sobr_hor_w	varchar(1);
cd_tipo_acomodacao_w	smallint;
ie_status_agenda_w	varchar(3);
ie_info_medico_w	varchar(1);

C01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno
	from	agenda_grupo_item_adic
	where	nr_seq_item_grupo = nr_seq_grupo_item_p
	and	coalesce(nr_seq_exame::text, '') = '';

C02 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno
	from	agenda_paciente_proc
	where	nr_sequencia = nr_seq_agenda_p;


BEGIN

select	cd_procedimento,
	ie_origem_proced,
	nr_seq_proc_interno
into STRICT	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_proc_interno_w
from	agenda_cons_grupo_item
where	nr_sequencia = nr_seq_grupo_item_p;

select	coalesce(max(nr_seq_agenda),0) + 1
into STRICT	nr_Sequencia_w
from 	agenda_paciente_proc
where	nr_sequencia	= nr_seq_agenda_p;

select	max(a.cd_convenio),
	max(a.cd_categoria),
	max(b.cd_estabelecimento),
	max(a.cd_agenda),
	max(a.cd_medico_exec),
	max(a.cd_pessoa_fisica),
	max(a.cd_plano),
	max(a.hr_inicio),
	max(a.nr_minuto_duracao),
	max(a.cd_tipo_acomodacao),
	max(a.ie_status_agenda),
	max(a.cd_procedimento),
	max(a.ie_origem_proced),
	max(a.nr_seq_proc_interno)
into STRICT	cd_convenio_w,
	cd_categoria_w,
	cd_estabelecimento_w,
	cd_agenda_w,
	cd_profissional_w,
	cd_pessoa_fisica_w,
	cd_plano_w,
	dt_agenda_w,
	nr_minuto_duracao_w,
	cd_tipo_acomodacao_w,
	ie_status_agenda_w,
	cd_procedimento_princ_w,
	ie_origem_proced_princ_w,
	nr_seq_proc_interno_princ_w
from	agenda_paciente a,
	agenda b
where	a.cd_agenda = b.cd_agenda
and	a.nr_sequencia  = nr_seq_agenda_p;

select 	coalesce(max(ie_consiste_duracao),'I')
into STRICT	ie_consiste_duracao_w
from 	parametro_agenda
where 	cd_estabelecimento =	wheb_usuario_pck.get_cd_estabelecimento;

ie_calc_min_dur_w := Obter_Param_Usuario(820, 33, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_calc_min_dur_w);
ie_consist_sobr_hor_w := Obter_Param_Usuario(820, 333, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_consist_sobr_hor_w);
ie_info_medico_w := Obter_Param_Usuario(820, 457, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_info_medico_w);

if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
	SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, cd_procedimento_w, ie_origem_proced_w, null, clock_timestamp(), cd_tipo_acomodacao_w, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
end if;

if	((ie_consiste_duracao_w = 'I') or (ie_consiste_duracao_w = 'A')) then
	qt_tempo_proc_princ_w	:= 	obter_tempo_duracao_proced(	cd_agenda_w,
								cd_profissional_w,
								cd_procedimento_princ_w,
								ie_origem_proced_princ_w,
								cd_pessoa_fisica_w,
								nr_seq_proc_interno_princ_w,
								null,
								cd_convenio_w,
								cd_categoria_w,
								cd_plano_w,
								nr_seq_agenda_p,
								null);
end if;

	if	((ie_consiste_duracao_w = 'I') or (ie_consiste_duracao_w = 'A')) and (ie_calc_min_dur_w = 'S') and (ie_consist_sobr_hor_w = 'S') and (ie_status_agenda_w <> 'L')then

		qt_tempo_proc_w	:= 	obter_tempo_duracao_proced(	cd_agenda_w,
									cd_profissional_w,
									cd_procedimento_w,
									ie_origem_proced_w,
									cd_pessoa_fisica_w,
									nr_seq_proc_interno_w,
									null,
									cd_convenio_w,
									cd_categoria_w,
									cd_plano_w,
									nr_seq_agenda_p,
									null);

		if ( qt_tempo_proc_w > 0) then
			ie_tempo_sobrep_w	:=	obter_se_sobreposicao_horario(	cd_agenda_w,
										dt_agenda_w,
										qt_tempo_proc_w+qt_tempo_proc_princ_w);
		end if;



		if (ie_tempo_sobrep_w = 'S') then
			ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(279823,null);
		end if;
	end if;

	select	count(*)
	into STRICT	qt_adicionais_marcados_w
	from	agenda_paciente_proc
	where	nr_sequencia = nr_seq_agenda_p;


	if (qt_adicionais_marcados_w >= 1)then
		open C02;
		loop
		fetch C02 into
			cd_procedimento_ww,
			ie_origem_proced_ww,
			nr_seq_proc_interno_ww;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			qt_tempo_proc_lancado_w	:= obter_tempo_duracao_proced(	cd_agenda_w,
										cd_profissional_w,
										cd_procedimento_ww,
										ie_origem_proced_ww,
										cd_pessoa_fisica_w,
										nr_seq_proc_interno_ww,
										null,
										cd_convenio_w,
										cd_categoria_w,
										cd_plano_w,
										nr_seq_agenda_p,
										null);

			qt_tot_proc_lancado_w := qt_tempo_proc_lancado_w + qt_tot_proc_lancado_w;


			end;
		end loop;
		close C02;

		if (qt_tot_proc_lancado_w > 0) then
			ie_tempo_sobrep_w	:=	obter_se_sobreposicao_horario(	cd_agenda_w,
										dt_agenda_w,
										qt_tot_proc_lancado_w+qt_tempo_proc_w+qt_tempo_proc_princ_w);
		end if;

		if (ie_tempo_sobrep_w = 'S') and (ie_consiste_duracao_w <> 'I')then
			ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(279823,null);
		end if;
	end if;

if	((ie_consiste_duracao_w <> 'I' AND ie_consist_sobr_hor_w = 'N') or
	 (ie_consiste_duracao_w <> 'N' AND ie_tempo_sobrep_w = 'N')) and (ie_status_agenda_w <> 'L') and (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then

	insert into agenda_paciente_proc(
					nr_sequencia,
					nr_seq_agenda,
					cd_procedimento,
					ie_origem_proced,
					dt_atualizacao,
					nm_usuario,
					nr_seq_proc_interno,
					qt_procedimento,
					ie_lado,
					CD_MEDICO_REQ)
					values (
					nr_seq_agenda_p,
					nr_sequencia_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_proc_interno_w,
					coalesce(qt_procedimento_p, 1),
					ie_lado_p,
					CASE WHEN ie_info_medico_w='S' THEN cd_medico_p  ELSE null END );

	CALL gerar_autor_regra(null,null,null,null,null,null,'AP', nm_usuario_p, nr_seq_agenda_p, null,null,null,null,nr_sequencia_w,'','','');

	begin
		ds_erro_w := consistir_gerar_autor_agrup(nr_seq_agenda_p, 'AP', nm_usuario_p, ds_erro_w);
	exception
	when others then
		ds_erro_w := '';
	end;


	if (qt_tempo_proc_w > 0)then
		begin
		qt_tot_proc_lancado_w := qt_tot_proc_lancado_w + qt_tempo_proc_w + qt_tempo_proc_princ_w;

		update	agenda_paciente
		set	nr_minuto_duracao 	= qt_tot_proc_lancado_w
		where	nr_sequencia	= nr_seq_agenda_p;

		commit;
		exception
		when others then
			ds_erro_w := '';

		end;
	end if;

end if;
open C01;
loop
fetch C01 into
	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_proc_interno_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	coalesce(max(nr_seq_agenda),0) + 1
	into STRICT	nr_Sequencia_w
	from 	agenda_paciente_proc
	where	nr_sequencia	= nr_seq_agenda_p;

	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and
		((coalesce(cd_procedimento_w::text, '') = '') or (coalesce(ie_origem_proced_w::text, '') = '')) then

		SELECT * FROM Obter_Proc_Tab_Interno_Conv(	nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, cd_procedimento_w, ie_origem_proced_w, null, clock_timestamp(), cd_tipo_acomodacao_w, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
	end if;

	if	((ie_consiste_duracao_w = 'I') or (ie_consiste_duracao_w = 'A')) and ( ie_calc_min_dur_w = 'S') and (ie_consist_sobr_hor_w = 'S') and (ie_status_agenda_w <> 'L')then

		qt_tempo_proc_w	:= 	obter_tempo_duracao_proced(	cd_agenda_w,
									cd_profissional_w,
									cd_procedimento_w,
									ie_origem_proced_w,
									cd_pessoa_fisica_w,
									nr_seq_proc_interno_w,
									ie_lado_w,
									cd_convenio_w,
									cd_categoria_w,
									cd_plano_w,
									nr_seq_agenda_p,
									null);

		qt_tot_proc_lancado_ww := qt_tempo_proc_w + qt_tot_proc_lancado_ww;

		if (qt_tempo_proc_w > 0) then
			ie_tempo_sobrep_w	:=	obter_se_sobreposicao_horario(	cd_agenda_w,
										dt_agenda_w,
										qt_tempo_proc_w + qt_tempo_proc_princ_w);
		end if;


		if (ie_tempo_sobrep_w = 'S') and (ie_consiste_duracao_w <> 'I')then
			ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(279823,null);
		end if;

	end if;

	if	((ie_consiste_duracao_w <> 'I' AND ie_consist_sobr_hor_w = 'N') or
		 (ie_consiste_duracao_w <> 'N' AND ie_tempo_sobrep_w = 'N')) and (ie_status_agenda_w <> 'L') and (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then

		insert into agenda_paciente_proc(
					nr_sequencia,
					nr_seq_agenda,
					cd_procedimento,
					ie_origem_proced,
					dt_atualizacao,
					nm_usuario,
					nr_seq_proc_interno,
					qt_procedimento,
					CD_MEDICO_REQ)
					values (
					nr_seq_agenda_p,
					nr_sequencia_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_proc_interno_w,
					coalesce(qt_procedimento_p, 1),
					CASE WHEN ie_info_medico_w='S' THEN cd_medico_p  ELSE null END );

		CALL gerar_autor_regra(null,null,null,null,null,null,'AP', nm_usuario_p, nr_seq_agenda_p, null,null,null,null,nr_sequencia_w,'','','');

		begin
			ds_erro_w := consistir_gerar_autor_agrup(nr_seq_agenda_p, 'AP', nm_usuario_p, ds_erro_w);
		exception
		when others then
			ds_erro_w := '';
		end;
	end if;

	end;
end loop;
close C01;

if (qt_tot_proc_lancado_ww > 0)then
	begin
	update	agenda_paciente
	set		nr_minuto_duracao 	= qt_tot_proc_lancado_ww + qt_tempo_proc_princ_w
	where	nr_sequencia		= nr_seq_agenda_p;

	exception
	when others then
		ds_erro_w := '';

	end;
end if;

commit;

ds_erro_p	:= ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proc_rotina_adic_exam ( nr_seq_agenda_p bigint, nr_seq_grupo_item_p bigint, nm_usuario_p text, ds_erro_p INOUT text, cd_medico_p text default null, qt_procedimento_p bigint default 1, ie_lado_p text default null) FROM PUBLIC;

