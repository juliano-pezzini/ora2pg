-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_finalizar_atendimento ( nr_seq_atendimento_p bigint, nr_seq_evento_p bigint, qt_tempo_p bigint, nr_seq_motivo_conclus_p text, nm_usuario_p text) AS $body$
DECLARE


nr_seq_regra_tempo_w		bigint;
nr_seq_operador_w		bigint;
cd_pessoa_fisica_w		varchar(10);
ie_status_atend_w		varchar(1);
ie_status_w			varchar(1);
ie_status_ww			varchar(2);
ie_tipo_pessoa_w		varchar(3);
nr_seq_evento_w			bigint;
nr_seq_atend_mprev_w		bigint;
nr_seq_part_ciclo_item_w	bigint;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
qt_tentativas_cancel_w		bigint;
qt_tentativas_w			bigint;
ds_texto_w			varchar(255) := null;
nr_seq_captacao_w		mprev_captacao.nr_sequencia%type;
nr_seq_regra_evento_w		bigint;
ie_acao_evento_w		smallint;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_protocolo_atend_w	pls_protocolo_atendimento.nr_sequencia%type;
nr_protocolo_w			pls_atendimento.nr_protocolo_atendimento%type;
qt_protocolo_atend_w		integer	:= 0;
qt_tentat_enviar_email_w	bigint;
ds_titulo_email_w		varchar(255);
ds_mensagem_email_w		varchar(255);
nm_participante_w		pessoa_fisica.nm_pessoa_fisica%type;
ds_email_destino_w		usuario.ds_email%type;
ds_email_origem_w		usuario.ds_email%type;
dt_prevista_atend_w		varchar(255);
nm_programa_partic_w		mprev_programa.nm_programa%type;
cd_pf_resp_programa_w		pessoa_fisica.cd_pessoa_fisica%type;
cd_pf_resp_equipe_w		pessoa_fisica.cd_pessoa_fisica%type;
ie_tele_sucesso_w		varchar(1);

c01 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento = obter_estabelecimento_ativo
	and	ie_evento_disp 	= 'FACC'
	and	coalesce(ie_situacao,'A') = 'A';


BEGIN
/* Verificar parametro com a quantidade maxima, caso superar, cancelar o tele */

qt_tentativas_cancel_w	:= somente_numero(obter_valor_param_usuario(10161,3,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w));
/* [4] - Quantidade maxima de tentativas de contato para enviar mensagem de email ao responsavel */

qt_tentat_enviar_email_w := somente_numero(obter_valor_param_usuario(10161,4,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w));

select	ie_status,
	CASE WHEN coalesce(cd_pessoa_fisica::text, '') = '' THEN 'PJ'  ELSE 'PF' END ,
	nr_seq_operador,
	cd_estabelecimento,
	cd_pessoa_fisica,
	nr_seq_segurado
into STRICT	ie_status_atend_w,
	ie_tipo_pessoa_w,
	nr_seq_operador_w,
	cd_estabelecimento_w,
	cd_pessoa_fisica_w,
	nr_seq_segurado_w
from	pls_atendimento
where	nr_sequencia = nr_seq_atendimento_p;

ie_status_w	:= pls_obter_status_atendimento(nr_seq_atendimento_p,0,ie_status_atend_w,ie_tipo_pessoa_w);
nr_seq_evento_w	:= nr_seq_evento_p;

if (ie_status_atend_w = 'A') then
	if (pls_obter_se_controle_estab('GA') = 'S') then
		begin
			select	nr_sequencia
			into STRICT	nr_seq_regra_tempo_w
			from	pls_atend_regra_tempo
			where	ie_situacao = 'A'
			and (cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento )
			and	qt_tempo_maximo = (	SELECT	min(qt_tempo_maximo)
							from	pls_atend_regra_tempo
							where	ie_situacao = 'A'
							and	qt_tempo_maximo >= qt_tempo_p
							and (cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento ));
		exception
			when others then
			nr_seq_regra_tempo_w := '';
		end;

		if (coalesce(nr_seq_regra_tempo_w::text, '') = '') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_regra_tempo_w
			from	pls_atend_regra_tempo
			where	ie_situacao = 'A'
			and (cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento )
			and	qt_tempo_maximo = (	SELECT	max(qt_tempo_maximo)
							from	pls_atend_regra_tempo
							where	ie_situacao = 'A'
							and (cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento ));
		end if;
	else
		begin
			select 	nr_sequencia
			into STRICT	nr_seq_regra_tempo_w
			from	pls_atend_regra_tempo
			where	ie_situacao = 'A'
			and	qt_tempo_maximo = (	SELECT	min(qt_tempo_maximo)
							from	pls_atend_regra_tempo
							where	ie_situacao = 'A'
							and	qt_tempo_maximo >= qt_tempo_p);
		exception
			when others then
			nr_seq_regra_tempo_w := '';
		end;

		if (coalesce(nr_seq_regra_tempo_w::text, '') = '') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_regra_tempo_w
			from	pls_atend_regra_tempo
			where	ie_situacao = 'A'
			and	qt_tempo_maximo = (	SELECT	max(qt_tempo_maximo)
							from	pls_atend_regra_tempo
							where	ie_situacao = 'A');
		end if;	
	end if;

	update	pls_atendimento
	set	dt_fim_atendimento	= clock_timestamp(),
		dt_atualizacao		= clock_timestamp(),
		nr_seq_regra_tempo	= nr_seq_regra_tempo_w,
		nm_usuario		= nm_usuario_p,
		ie_status		= ie_status_w
	where	nr_sequencia		= nr_seq_atendimento_p;

	if (ie_status_w = 'C') then
		update	pls_atendimento
		set	dt_conclusao		= clock_timestamp()
		where	nr_sequencia		= nr_seq_atendimento_p;
	end if;
	commit;
	CALL pls_gerar_atendimento_operador(nr_seq_atendimento_p,nr_seq_operador_w,qt_tempo_p,nm_usuario_p,'N');

	if (coalesce(nr_seq_evento_w,0) = 0) then

		select	max(nr_sequencia)
		into STRICT	nr_seq_evento_w
		from	pls_atendimento_evento
		where	nr_seq_atendimento = nr_seq_atendimento_p
		and	coalesce(dt_fim_evento::text, '') = '';

	end if;
elsif (ie_status_w = 'G') then
	update	pls_atendimento
	set	dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		ie_status		= ie_status_w
	where	nr_sequencia		= nr_seq_atendimento_p;
	commit;
elsif (ie_status_w = 'C') then	
	update	pls_atendimento
	set	dt_conclusao		= clock_timestamp(),
		dt_fim_atendimento	= clock_timestamp(),
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		ie_status		= ie_status_w,
		nr_seq_motivo_conclusao	= nr_seq_motivo_conclus_p
	where	nr_sequencia		= nr_seq_atendimento_p;
	commit;
end if;

if (ie_status_atend_w = 'A') or (ie_status_w <> 'C') then
	CALL pls_finalizar_evento_atend(nr_seq_evento_w,nr_seq_atendimento_p,nm_usuario_p);
elsif (ie_status_w = 'C') then
	update	pls_atendimento_evento
	set	dt_conclusao		= clock_timestamp()
	where	nr_seq_atendimento	= nr_seq_atendimento_p
	and	coalesce(dt_conclusao::text, '') = ''
	and	(dt_fim_evento IS NOT NULL AND dt_fim_evento::text <> '');
	commit;
end if;

select	max(nr_seq_mprev_part_ciclo_item)
into STRICT	nr_seq_part_ciclo_item_w
from	pls_atendimento
where	nr_sequencia = nr_seq_atendimento_p;

if (nr_seq_part_ciclo_item_w IS NOT NULL AND nr_seq_part_ciclo_item_w::text <> '') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_atend_mprev_w
	from	mprev_atendimento
	where	nr_seq_pls_atend = nr_seq_atendimento_p
	and	coalesce(dt_termino::text, '') = '';
	
	if (nr_seq_atend_mprev_w IS NOT NULL AND nr_seq_atend_mprev_w::text <> '') then
		CALL mprev_finalizar_atendimento(nr_seq_atend_mprev_w, clock_timestamp(),null, nm_usuario_p);
	else
		/* Verifica se foi atendimento gerado com sucesso*/

		select	coalesce(max('S'),'N')
		into STRICT	ie_tele_sucesso_w
		from	pls_evento_ocorrencia y,
			pls_atendimento_evento x
		where	x.nr_seq_evento	= y.nr_sequencia
		and	x.nr_seq_atendimento = nr_seq_atendimento_p
		and	y.ie_acao_evento = '24';
		
		/* Se nao foi um atendimento gerado com sucesso vai enviar o email conforme parametro [4] da HDM - Telemonitoramento */

		if (ie_tele_sucesso_w = 'N') then
			/* Envia e-mail para o participante da medicina preventiva quando a quantidade de tentativas de contato pelo Call
			Center for maior ou igual ao valor informado no parametro [4] da funcao HDM - Telemonitoramento. */
			if (coalesce(qt_tentat_enviar_email_w,0) > 0) then
				if (qt_tentativas_w >= qt_tentat_enviar_email_w) then

					/* Busca o email do usuario logado */

					select	max(ds_email)
					into STRICT	ds_email_origem_w
					from	usuario
					where	nm_usuario = nm_usuario_p;

					if (ds_email_origem_w IS NOT NULL AND ds_email_origem_w::text <> '') then
						begin
						/*Busca o emial do profisisonal responsavel pelo programa ou pela equipe do participante*/

						cd_pf_resp_programa_w := mprev_obter_dados_ciclo_partic(nr_seq_part_ciclo_item_w, 'RP');

						if (cd_pf_resp_programa_w IS NOT NULL AND cd_pf_resp_programa_w::text <> '') then
							ds_email_destino_w := obter_email_pf(cd_pf_resp_programa_w);
						else
							cd_pf_resp_equipe_w := mprev_obter_dados_ciclo_partic(nr_seq_part_ciclo_item_w, 'RE');
							ds_email_destino_w := obter_email_pf(cd_pf_resp_equipe_w);
						end if;

						if (ds_email_destino_w IS NOT NULL AND ds_email_destino_w::text <> '') then

							/*Titulo: Telemonitoramento - Tentativa de contato frustada  */

							ds_titulo_email_w := obter_texto_dic_objeto(460851, wheb_usuario_pck.get_nr_seq_idioma, null);

							/* Obter o nome da pessoa fisica do paricipante da medicina preventiva */

							select	substr(max(obter_nome_pf(a.cd_pessoa_fisica)),1,255)
							into STRICT	nm_participante_w
							from	pls_atendimento a
							where	a.nr_sequencia = nr_seq_atendimento_p;

							/* Obtem a data prevista do ciclo de atendimento do plano de atendimento */

							dt_prevista_atend_w := mprev_obter_dados_ciclo_partic(nr_seq_part_ciclo_item_w,'DT');

							/* Obtem o nome do programa do ciclo de atendimento do participante */

							nm_programa_partic_w := mprev_obter_dados_ciclo_partic(nr_seq_part_ciclo_item_w,'NP');

							/*Mensagem:Tentativa de contato com o participante #@NM_PARTICIPANTE#@ frustrada.
								Data prevista do atendimento: #@DT_ATENDIMENTO#@
								Programa: #@NM_PROGRAMA#@ */
							if (nm_participante_w IS NOT NULL AND nm_participante_w::text <> '') and (dt_prevista_atend_w IS NOT NULL AND dt_prevista_atend_w::text <> '') and (nm_programa_partic_w IS NOT NULL AND nm_programa_partic_w::text <> '') then
								ds_mensagem_email_w := obter_texto_dic_objeto(	460852,
														wheb_usuario_pck.get_nr_seq_idioma,
														'NM_PARTICIPANTE='||nm_participante_w||
														';DT_ATENDIMENTO='||dt_prevista_atend_w||
														';NM_PROGRAMA='||nm_programa_partic_w);
								
								
								CALL enviar_email(ds_titulo_email_w, ds_mensagem_email_w, ds_email_origem_w, ds_email_destino_w, nm_usuario_p, 'M');
							end if;
						end if;
						
						exception
						when others then
							CALL gravar_log_tasy(100,substr('user=' || nm_usuario_p|| ' error=' || sqlerrm,1,2000),nm_usuario_p);
						end;
					end if;
				end if;
			end if;
		end if;
	
		/* Obtem a quantidade de tentativas de contato com o participante de medicina preventiva pelo Call Center */

		qt_tentativas_w	:= somente_numero(mprev_obter_dados_tele(nr_seq_part_ciclo_item_w,'QT'));

		if (qt_tentativas_cancel_w > 0) then
			qt_tentativas_w	:=	somente_numero(mprev_obter_dados_tele(nr_seq_part_ciclo_item_w,'QT'));

			/*Cancelado por ter superado a quantidade de tentativas definidas no parametro [3]*/

			ds_texto_w := obter_texto_dic_objeto(321922, wheb_usuario_pck.get_nr_seq_idioma, null);

			if (qt_tentativas_w >= qt_tentativas_cancel_w) then
				CALL mprev_alterar_status_plano(nr_seq_part_ciclo_item_w,
							'C',
							null,
							ds_texto_w,
							null,
							'S',
							'',
							nm_usuario_p);
			end if;
		end if;
	end if;
end if;

select	max(nr_seq_captacao)
into STRICT	nr_seq_captacao_w
from	pls_atendimento
where	nr_sequencia = nr_seq_atendimento_p;

if (nr_seq_captacao_w IS NOT NULL AND nr_seq_captacao_w::text <> '') then
	CALL mprev_cancelar_captacao(	nr_seq_captacao_w,
					nm_usuario_p,
					cd_estabelecimento_w);
	
	select	max(ie_status)
	into STRICT	ie_status_ww
	from	mprev_captacao
	where	nr_sequencia	= nr_seq_captacao_w;
	
	select	max(y.ie_acao_evento)
	into STRICT	ie_acao_evento_w
	from	pls_atendimento a,
		pls_evento_ocorrencia y,
		pls_atendimento_evento x
	where	a.nr_seq_captacao = nr_seq_captacao_w
	and	x.nr_seq_evento = y.nr_sequencia
	and	x.nr_seq_atendimento = a.nr_sequencia
	and	y.ie_acao_evento in ('1','3','30'); /*Acoes de vento (Agenda Integrada, Agenda de consulta, Agendamento HDM */
	
	if	(ie_status_ww = 'P' AND ie_acao_evento_w IS NOT NULL AND ie_acao_evento_w::text <> '')then
		CALL mprev_alterar_status_capt(nr_seq_captacao_w, 'T', nm_usuario_p);
	end if;
end if;

open c01;
loop
fetch C01 into
	nr_seq_regra_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
		CALL gerar_evento_paciente(nr_seq_regra_evento_w, null, cd_pessoa_fisica_w, null, nm_usuario_p,null,null,null,null,null,null,null,null,null,null,null,null,clock_timestamp(),null,null,nr_seq_atendimento_p);
	end;
end loop;
close C01;

if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
	select	count(1)
	into STRICT	qt_protocolo_atend_w
	from	pls_protocolo_atendimento
	where	nr_seq_atend_pls	= nr_seq_atendimento_p;
	
	if (qt_protocolo_atend_w = 0) then
		SELECT * FROM pls_gravar_protocolo_atend(	3, nr_seq_segurado_w, null, null, nr_seq_atendimento_p, null, null, null, null, null, cd_estabelecimento_w, nm_usuario_p, nr_seq_protocolo_atend_w, nr_protocolo_w) INTO STRICT nr_seq_protocolo_atend_w, nr_protocolo_w;
		
		update	pls_solicitacao_rescisao
		set	nr_seq_protocolo_atend	= nr_seq_protocolo_atend_w
		where	nr_seq_atendimento	= nr_seq_atendimento_p;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_finalizar_atendimento ( nr_seq_atendimento_p bigint, nr_seq_evento_p bigint, qt_tempo_p bigint, nr_seq_motivo_conclus_p text, nm_usuario_p text) FROM PUBLIC;

