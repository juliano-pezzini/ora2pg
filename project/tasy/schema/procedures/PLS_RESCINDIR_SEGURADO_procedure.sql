-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_rescindir_segurado ( nr_seq_segurado_p pls_segurado.nr_sequencia%type, dt_rescisao_p timestamp, dt_limite_utilizacao_p timestamp, nr_seq_motivo_p pls_motivo_cancelamento.nr_sequencia%type, ds_observacao_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_tipo_rescisao_p text, ie_obito_p text, nr_seq_causa_rescisao_p pls_causa_rescisao.nr_sequencia%type, dt_fim_repasse_p timestamp, nr_seq_solicitacao_p bigint default null) AS $body$
DECLARE

				
ie_situacao_atend_w		varchar(1);
dt_contratacao_w		timestamp;
ie_rescindi_pf_contrato_w	varchar(10);
ie_cancelar_agenda_w		varchar(1);
ie_consistir_obito_w		varchar(10);
nr_seq_contrato_w		bigint;
ie_gerar_validade_cartao_w	varchar(10);
dt_rescisao_w			timestamp;
dt_limite_utilizacao_w		timestamp;
dt_rescisao_regra_w		timestamp;
nr_seq_intercambio_w		bigint;
nr_seq_processo_jud_rescisao_w	bigint;
cd_pessoa_fisica_w		varchar(10);
nm_pessoa_fisica_w		varchar(255);
ie_data_limite_sca_w		varchar(10);
dt_rescisao_sca_w		timestamp;
ds_erro_msg_w			varchar(255);
nr_seq_titular_w		bigint;
ie_situacao_atend_aux_w		pls_segurado.ie_situacao_atend%type;
ie_estipulante_w		varchar(10);
dt_cancelamento_w		timestamp;
ie_tipo_rescisao_w		varchar(2);
ie_iniciativa_beneficiario_w	pls_motivo_cancelamento.ie_iniciativa_beneficiario%type;
dt_reativacao_w			pls_segurado.dt_reativacao%type;
ie_seguro_w			varchar(1);
qt_dependentes_w		bigint;
qt_alt_rescisao_w		bigint;

C01 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_vinculo_sca,
		a.dt_liberacao
	from	pls_sca_vinculo a,
		pls_segurado b,
		pls_contrato c
	where	b.nr_sequencia	= a.nr_seq_segurado
	and	c.nr_sequencia	= b.nr_seq_contrato
	and	b.nr_sequencia	= nr_seq_segurado_p;

C02 CURSOR FOR
	SELECT	nr_sequencia nr_seq_seg_repasse,
		dt_fim_repasse
	from	pls_segurado_repasse
	where	nr_seq_segurado	= nr_seq_segurado_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	ie_tipo_compartilhamento <> 2
	and	((coalesce(dt_fim_repasse::text, '') = '') or (dt_fim_repasse > dt_rescisao_w));

BEGIN
if	((ie_tipo_rescisao_p = 'SB') /*Solicitacao do beneficiario*/
 or (ie_tipo_rescisao_p = 'RB') /*Rescisao de beneficiario*/
 or (ie_tipo_rescisao_p = 'TT') /* Transferencia de titularidade */
) then
	ie_tipo_rescisao_w		:= 'B';
else
	ie_tipo_rescisao_w		:= ie_tipo_rescisao_p;
end if;

select	coalesce(max(ie_iniciativa_beneficiario),'N')
into STRICT	ie_iniciativa_beneficiario_w
from	pls_motivo_cancelamento
where	nr_sequencia	= nr_seq_motivo_p;

if (ie_iniciativa_beneficiario_w = 'S') then --Se for "Iniciativa do beneficiario", deve respeitar o horario da solicitacao de rescisao
	dt_rescisao_w			:= dt_rescisao_p;
	dt_limite_utilizacao_w		:= dt_limite_utilizacao_p;
else
	dt_rescisao_w			:= fim_dia(dt_rescisao_p);
	dt_limite_utilizacao_w		:= fim_dia(dt_limite_utilizacao_p);
end if;

ie_rescindi_pf_contrato_w	:= coalesce(obter_valor_param_usuario(1202,91, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'N');
ie_cancelar_agenda_w		:= coalesce(obter_valor_param_usuario(1202,108, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'N');
ie_consistir_obito_w		:= coalesce(obter_valor_param_usuario(1202,109, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'N');
ie_data_limite_sca_w		:= coalesce(obter_valor_param_usuario(1202,123, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'N');
ie_seguro_w			:= coalesce(pls_obter_se_titular_obito(nr_seq_segurado_p,'M','P'),'N');

select	dt_contratacao,
	nr_seq_contrato,
	cd_pessoa_fisica,
	nr_seq_intercambio,
	ie_situacao_atend,
	nr_seq_titular,
	dt_cancelamento,
	trunc(dt_reativacao,'dd')
into STRICT	dt_contratacao_w,
	nr_seq_contrato_w,
	cd_pessoa_fisica_w,
	nr_seq_intercambio_w,
	ie_situacao_atend_aux_w,
	nr_seq_titular_w,
	dt_cancelamento_w,
	dt_reativacao_w
from	pls_segurado
where	nr_sequencia = nr_seq_segurado_p;

if	((trunc(dt_rescisao_w, 'dd') < dt_reativacao_w) and (coalesce(dt_cancelamento_w::text, '') = '')) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1084707, 'DS_BENEFICIARIO=' || nr_seq_segurado_p || ' - ' || pls_obter_nome_beneficiario(nr_seq_segurado_p) || ';DT_REATIVACAO=' || dt_reativacao_w || ';DT_RESCISAO=' || dt_rescisao_w);
	 --A data de rescisao deve ser posterior ou igual a data de reativacao. Beneficiario: #@DS_BENEFICIARIO#@ Data reativacao: #@DT_REATIVACAO#@ Data rescisao: #@DT_RESCISAO#@.
end if;

--Apenas consistir a data do SIB para beneficiarios que nao tem vinculo com intercambio
if (coalesce(nr_seq_intercambio_w::text, '') = '') then
	CALL pls_consiste_data_sib(dt_rescisao_w, nm_usuario_p, cd_estabelecimento_p);
end if;

select	max(ie_gerar_validade_cartao)
into STRICT	ie_gerar_validade_cartao_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

if (coalesce(ie_gerar_validade_cartao_w::text, '') = '') then
	ie_gerar_validade_cartao_w	:= 'S';
end if;

if (coalesce(ie_tipo_rescisao_p, 'X') <> 'TT') then
	--Alerta e abortar o processo, caso existir seguro por obito 
	select	count(*)
	into STRICT	qt_dependentes_w
	from	pls_segurado	
	where	nr_seq_titular  = nr_seq_segurado_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	coalesce(dt_cancelamento::text, '') = ''
	and (coalesce(dt_rescisao::text, '') = '' or dt_rescisao >= dt_rescisao_w);

	if (ie_obito_p	= 'S') and (ie_seguro_w 	= 'S') and (qt_dependentes_w > 0)then	
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1107009,'NM_BENEFICIARIO=' || pls_obter_dados_segurado(nr_seq_segurado_p,'N'));
	end if;
end if;

--Consistir a rescisao caso o motivo seja de obito
if (ie_obito_p	= 'S') and (ie_consistir_obito_w = 'S') then
	CALL pls_consiste_obito_segurado(nr_seq_segurado_p,nr_seq_motivo_p,nm_usuario_p);
end if;

if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
	select	count(1)
	into STRICT	qt_alt_rescisao_w
	from	pls_rescisao_contrato
	where	nr_seq_segurado = nr_seq_segurado_p
	and	ie_data_alterada_regra = 'S'
	and	trunc(dt_rescisao, 'dd') = trunc(dt_rescisao_p, 'dd')
	and	nr_seq_motivo_rescisao = nr_seq_motivo_p;

	if (qt_alt_rescisao_w = 0) then
		begin
		dt_rescisao_regra_w := pls_obter_dias_res_regra_contr(nr_seq_segurado_p, nr_seq_motivo_p, dt_rescisao_p, cd_estabelecimento_p, nm_usuario_p, dt_rescisao_regra_w);
		exception
		when others then
			dt_rescisao_regra_w	:= null;
		end;
		
		if (dt_rescisao_regra_w IS NOT NULL AND dt_rescisao_regra_w::text <> '') and (trunc(dt_rescisao_regra_w,'dd') <> trunc(dt_rescisao_p,'dd')) then
			dt_rescisao_w		:= dt_rescisao_regra_w;
			dt_limite_utilizacao_w	:= dt_rescisao_regra_w;
		end if;
	end if;
end if;

--Caso a data limite de utilizacao foi maior ou igual que a data atual, entao o sistema deve deixar a situacao de atendimento apta
if (trunc(dt_limite_utilizacao_w,'dd') >= trunc(clock_timestamp(),'dd')) and (ie_situacao_atend_aux_w <> 'S') then
	ie_situacao_atend_w	:= 'A';
elsif	((dt_limite_utilizacao_w < clock_timestamp()) or (ie_situacao_atend_aux_w = 'S')) then
	ie_situacao_atend_w	:= 'I';
end if;

--Processo judicial para impedir que o beneficiario seja rescindido
select	max(b.nr_sequencia)
into STRICT	nr_seq_processo_jud_rescisao_w
from	pls_processo_jud_contrato	a,
	processo_judicial_liminar	b
where	a.nr_seq_processo	= b.nr_sequencia
and	((b.nr_seq_segurado	= nr_seq_segurado_p) or (coalesce(b.nr_seq_segurado::text, '') = ''))
and	((b.nr_seq_contrato	= nr_seq_contrato_w) or (coalesce(b.nr_seq_contrato::text, '') = ''))
and	dt_rescisao_w between coalesce(b.dt_inicio_validade,dt_rescisao_w) and coalesce(b.dt_fim_validade,dt_rescisao_w)
and	dt_rescisao_w between coalesce(a.dt_inicio_vigencia,dt_rescisao_w) and coalesce(a.dt_fim_vigencia,dt_rescisao_w)
and	b.ie_estagio		= '2'
and	b.ie_impacto_contrato	= 'S';

if (nr_seq_processo_jud_rescisao_w > 0) then
	select	max(nm_pessoa_fisica)
	into STRICT	nm_pessoa_fisica_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_w;
	
	ds_erro_msg_w	:= 'NR_SEQ_SEGURADO='||nr_seq_segurado_p||';NM_SEGURADO='||nm_pessoa_fisica_w||';NR_SEQ_PROCESSO='||nr_seq_processo_jud_rescisao_w;
	CALL wheb_mensagem_pck.exibir_mensagem_abort(197484,ds_erro_msg_w);
end if;

--Para que o beneficiario seja rescindido, a data de adesao precisa ser menor que a data de rescisao
if	((trunc(dt_contratacao_w,'dd') > trunc(dt_rescisao_w,'dd')) and coalesce(dt_cancelamento_w::text, '') = '') then --Pode estar rescindindo um contrato com beneficiario com data de adesao futura
	if (nr_seq_solicitacao_p IS NOT NULL AND nr_seq_solicitacao_p::text <> '') then
		ie_situacao_atend_w	:= 'I';
		dt_rescisao_w		:= dt_contratacao_w;
		dt_cancelamento_w	:= clock_timestamp();
	else
		CALL wheb_mensagem_pck.exibir_mensagem_abort(177940, null); --A data de rescisao do beneficiario nao pode ser menor que a data de adesao
	end if;
end if;

update	pls_segurado
set	dt_rescisao			= dt_rescisao_w,
	dt_limite_utilizacao		= dt_limite_utilizacao_w,
	dt_cancelamento			= dt_cancelamento_w,
	nm_usuario			= nm_usuario_p,
	dt_atualizacao			= clock_timestamp(),
	nr_seq_motivo_cancelamento	= nr_seq_motivo_p,
	ie_situacao_atend		= ie_situacao_atend_w,
	ie_tipo_rescisao		= ie_tipo_rescisao_w,
	dt_reativacao			 = NULL,
	nr_seq_causa_rescisao		= nr_seq_causa_rescisao_p,
	ie_rescisao_migracao		= 'N'
where	nr_sequencia			= nr_seq_segurado_p;

--Rescindir a carteirinha
update	pls_segurado_carteira
set	dt_validade_carteira	= dt_limite_utilizacao_w,
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp()
where	nr_seq_segurado		= nr_seq_segurado_p
and	coalesce(dt_validade_carteira::text, '') = ''
and	ie_gerar_validade_cartao_w	= 'S';

if (ie_data_limite_sca_w = 'S') then
	dt_rescisao_sca_w	:= dt_limite_utilizacao_w;
else
	dt_rescisao_sca_w	:= dt_rescisao_w;
end if;

for c01_w in C01 loop
	begin
	if (c01_w.dt_liberacao IS NOT NULL AND c01_w.dt_liberacao::text <> '') then
		CALL pls_rescindir_sca_benef(c01_w.nr_seq_vinculo_sca,dt_rescisao_sca_w,'N',nm_usuario_p);
	end if;
	end;
end loop; --C01
CALL pls_gerar_segurado_historico(	nr_seq_segurado_p, '1', clock_timestamp(), wheb_mensagem_pck.get_texto(1107010,'DT_RESCISAO=' || to_char(dt_rescisao_w, 'dd/mm/yyyy')),
				ds_observacao_p, null, null, null,
				nr_seq_motivo_p, dt_rescisao_w, null, null,
				null, null, null, null,
				nm_usuario_p, 'N');

if (ie_rescindi_pf_contrato_w = 'S') then
	CALL pls_rescindir_pf_contrato_vinc(nr_seq_segurado_p,nr_seq_motivo_p,dt_rescisao_w,dt_limite_utilizacao_w,ie_tipo_rescisao_w,nr_seq_causa_rescisao_p,cd_estabelecimento_p,nm_usuario_p);
end if;

for c02_w in C02 loop
	begin
	if (coalesce(c02_w.dt_fim_repasse::text, '') = '') then
		CALL pls_finalizar_repasse_seg(c02_w.nr_seq_seg_repasse,coalesce(dt_fim_repasse_p,dt_rescisao_w),'N',nm_usuario_p);
	elsif (c02_w.dt_fim_repasse > dt_rescisao_w) then
		update	pls_segurado_repasse
		set	dt_fim_repasse	= dt_rescisao_w,
			dt_fim_real	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia	= c02_w.nr_seq_seg_repasse;
	end if;
	end;
end loop; --C02
if (ie_cancelar_agenda_w = 'S') then
	CALL pls_cancelar_agenda_pac_seg(nr_seq_segurado_p, coalesce(dt_limite_utilizacao_w,dt_rescisao_w), nr_seq_motivo_p, cd_estabelecimento_p, nm_usuario_p);
end if;

CALL pls_att_classif_dependencia(coalesce(nr_seq_titular_w,nr_seq_segurado_p),nm_usuario_p,'N');

if	((ie_tipo_rescisao_w in ('B','S')) and (ie_tipo_rescisao_p <> 'RB')) then --Se for rescisao por contrato ou produto, vai chamar na rotina pls_rescindir_contrato
	CALL pls_gerar_devolucao_mens(nr_seq_segurado_p, null, ie_tipo_rescisao_w, nr_seq_motivo_p, 'N', nm_usuario_p, cd_estabelecimento_p);
end if;

CALL pls_gerar_multa_contratual(nr_seq_contrato_w, nr_seq_segurado_p, dt_rescisao_w, nr_seq_solicitacao_p, cd_estabelecimento_p, nm_usuario_p);

if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
	CALL pls_alerta_rescisao_benef(5, nr_seq_segurado_p, nm_usuario_p, 'N');
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_rescindir_segurado ( nr_seq_segurado_p pls_segurado.nr_sequencia%type, dt_rescisao_p timestamp, dt_limite_utilizacao_p timestamp, nr_seq_motivo_p pls_motivo_cancelamento.nr_sequencia%type, ds_observacao_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_tipo_rescisao_p text, ie_obito_p text, nr_seq_causa_rescisao_p pls_causa_rescisao.nr_sequencia%type, dt_fim_repasse_p timestamp, nr_seq_solicitacao_p bigint default null) FROM PUBLIC;

