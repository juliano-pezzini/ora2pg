-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE rxt_ajustar_agenda ( nr_seq_agenda_p bigint, nr_seq_tratamento_p bigint, nr_seq_equipamento_p bigint, dt_agenda_p timestamp, nm_usuario_p text, ds_mensagem_p INOUT text) AS $body$
DECLARE


nr_seq_ultima_fase_w	bigint;
nr_seq_ultimo_dia_w	bigint;
nr_seq_ultima_agenda_w	bigint;
dt_agenda_prox_w	timestamp;
hr_agenda_prox_w	varchar(10);
hr_inicial_w            varchar(10);
hr_final_w              varchar(10);
dt_agenda_alterar_w	timestamp;
nr_seq_agenda_alterar_w	bigint;
nr_seq_fase_ult_w	bigint;
nr_seq_dia_ult_w	bigint;
nr_seq_dia_fase_ult_w	bigint;
nr_seq_agenda_w		bigint;
nr_seq_agenda_nova_w	bigint;
nr_seq_fase_ante_w	bigint;
nr_seq_dia_ante_w	bigint;
nr_seq_fase_post_w	bigint;
nr_seq_dia_post_w	bigint;
nr_seq_fase_alt_w	bigint;
nr_seq_dia_alt_w	bigint;
nr_seq_dia_fase_alt_w	bigint;
dt_agenda_w		timestamp;
dt_agenda_final_w	timestamp;
ie_status_w		varchar(15);
ie_status_agenda_w	varchar(15);
nr_minuto_duracao_w	bigint;
ds_macro_mensagem_w	varchar(255) := '';			
nr_mensagem_w		bigint := 0;
nr_seq_agenda_fase_w	bigint;
nr_atendimento_w	rxt_agenda.nr_atendimento%type;
qt_intervalo_inser_w 	bigint;
ie_tipo_trat_w          varchar(1);
nr_seq_dia_w 		bigint;
nr_seq_dia_ww 		bigint;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
ie_forma_reagendar_w    rxt_parametro.ie_forma_reagendar%type;

/* Obter os dados dos agendamentos do tratamento para alterar quando for marcada como falta ou cancelada */

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.dt_agenda
	from	rxt_agenda a
	where	a.nr_seq_tratamento = nr_seq_tratamento_p
	and	a.ie_status_agenda not in ('E','F','C','H')
	and	a.nr_sequencia not in (nr_seq_agenda_p, nr_seq_agenda_alterar_w)
	and	a.dt_agenda > dt_agenda_p
	order by a.nr_seq_dia desc,
		a.nr_seq_fase desc,
		a.nr_seq_dia_fase desc;
		
/* Obter os dados dos agendamentos do tratamento para alterar quando for estornar falta ou cancelamento */

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.dt_agenda
	from	rxt_agenda a
	where	a.nr_seq_tratamento = nr_seq_tratamento_p
	and	a.ie_status_agenda not in ('E','F','C','H')
	and	a.nr_sequencia not in (nr_seq_agenda_p, nr_seq_ultima_agenda_w)
	and	a.dt_agenda > dt_agenda_p
	order by 	a.nr_seq_dia,
		a.nr_seq_fase,
		a.nr_seq_dia_fase;


C03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.dt_agenda
	FROM	rxt_agenda a
	WHERE	a.nr_seq_tratamento = nr_seq_tratamento_p
	AND	a.ie_status_agenda NOT IN ('E','F','C','H')
	and	a.nr_sequencia not in (nr_seq_agenda_p)
	AND	a.dt_agenda >= dt_agenda_p
	ORDER BY a.dt_agenda desc;	

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.dt_agenda
	FROM	rxt_agenda a
	WHERE	a.nr_seq_tratamento = nr_seq_tratamento_p
	AND	((a.ie_status_agenda NOT('E','F','C','H')) or (a.nr_sequencia = nr_seq_agenda_p))
	--and	a.nr_sequencia not in (nr_seq_agenda_p)
	AND	a.dt_agenda >= dt_agenda_p
	ORDER BY a.dt_agenda;	


C05 CURSOR FOR
	SELECT a.nr_sequencia,
		   a.dt_agenda,
		   a.nr_seq_dia
	FROM  rxt_agenda a 
	WHERE a.nr_seq_tratamento = nr_seq_tratamento_p 
	AND   a.IE_STATUS_AGENDA NOT IN ('E','F','C','H','L') 
	AND   trunc(a.dt_agenda) >= trunc(dt_agenda_p)
	ORDER BY a.dt_agenda desc;		

C06 CURSOR FOR
	SELECT a.nr_sequencia,
		   a.dt_agenda,
		   a.nr_seq_dia
	FROM  rxt_agenda a 
	WHERE a.nr_seq_tratamento = nr_seq_tratamento_p 
	AND   a.IE_STATUS_AGENDA NOT IN ('E','F','C','H','L') 
	AND   trunc(a.dt_agenda) >= trunc(dt_agenda_p)
	
UNION

	SELECT a.nr_sequencia, 
		   a.dt_agenda,
		   a.nr_seq_dia
	FROM  rxt_agenda a 
	WHERE a.nr_sequencia = nr_seq_agenda_p
	ORDER BY 2;		


BEGIN

/*Estabelecimento*/

cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;

/* acesso exclusivo tabela */

lock table rxt_agenda in exclusive mode;

/* Obter status atual do agendamento */

select	max(ie_status_agenda)
into STRICT	ie_status_w
from	rxt_agenda
where	nr_sequencia = nr_seq_agenda_p;

/*Obter tipo do tratamento do agendamento*/

select coalesce(max(rxt_obter_tipo_trat_prot(nr_seq_protocolo)),'X')
into STRICT ie_tipo_trat_w
from rxt_tratamento
where nr_sequencia = nr_seq_tratamento_p;

/* Obter os dados do último agendamento do tratamento */

select	max(a.nr_seq_fase),
	max(a.nr_seq_dia)
into STRICT	nr_seq_ultima_fase_w,
	nr_seq_ultimo_dia_w
from	rxt_agenda a
where	a.nr_seq_tratamento = nr_seq_tratamento_p
and	a.nr_sequencia <> nr_seq_agenda_p
and	a.ie_status_agenda not in ('E','F','C','H');

select	max(a.nr_sequencia)
into STRICT	nr_seq_ultima_agenda_w
from	rxt_agenda a
where	1 = 1 --a.nr_seq_fase	= nr_seq_ultima_fase_w
and	a.nr_seq_tratamento = nr_seq_tratamento_p
and	a.nr_seq_dia	= nr_seq_ultimo_dia_w
and	a.ie_status_agenda not in ('E','F','C','H');

if (ie_status_w in ('F','C','H')) then

	begin	
	/* Busca todos os agendamentos do tratamento */

	open C02;
	loop
	fetch C02 into
		nr_seq_agenda_w,
		dt_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin		
		/* Obter os dados do agendamento do tratamento posterior */

		select	min(a.nr_seq_fase),
			min(a.nr_seq_dia)
		into STRICT	nr_seq_fase_post_w,
			nr_seq_dia_post_w
		from	rxt_agenda a
		where	a.nr_seq_tratamento	= nr_seq_tratamento_p
		and	a.nr_seq_equipamento	= nr_seq_equipamento_p
		and	a.dt_agenda > dt_agenda_w
		and	a.nr_sequencia not in (nr_seq_agenda_w)
		and	a.ie_status_agenda not in ('E','F','C','H');
		
		/* Se possuir fase do posterior ajusta os dados do agendamento lido */

		if (nr_seq_fase_post_w IS NOT NULL AND nr_seq_fase_post_w::text <> '') and (nr_seq_dia_post_w IS NOT NULL AND nr_seq_dia_post_w::text <> '') then
			begin
			/* Obter o posterior ao agendamento do tratamento */
		
			begin
			select	distinct a.nr_seq_fase,
				a.nr_seq_dia,
				a.nr_seq_dia_fase
			into STRICT	nr_seq_fase_alt_w,
				nr_seq_dia_alt_w,
				nr_seq_dia_fase_alt_w
			from	rxt_agenda a
			where	a.nr_seq_dia	= nr_seq_dia_post_w
			and		a.nr_seq_tratamento	= nr_seq_tratamento_p
			and		a.nr_seq_equipamento	= nr_seq_equipamento_p
			and		a.ie_status_agenda not in ('E','F','C','H');
			exception
				when others then
				--Não gerada as fases e dias !
				CALL wheb_mensagem_pck.exibir_mensagem_abort(264208);
			end;		
			
			/* Ajustar as fases e os dias do agendamento */

			if (nr_seq_fase_alt_w IS NOT NULL AND nr_seq_fase_alt_w::text <> '') and (nr_seq_dia_alt_w IS NOT NULL AND nr_seq_dia_alt_w::text <> '') and (nr_seq_dia_fase_alt_w IS NOT NULL AND nr_seq_dia_fase_alt_w::text <> '') then
				update	rxt_agenda
				set	nr_seq_fase	= nr_seq_fase_alt_w,
					nr_seq_dia	= nr_seq_dia_alt_w,
					nr_seq_dia_fase	= nr_seq_dia_fase_alt_w
				where	nr_sequencia	= nr_seq_agenda_w;
			end if;
			end;
		end if;
		end;
	end loop;
	close C02;

	nr_seq_agenda_fase_w := null;
	nr_seq_dia_alt_w := null;

	open C04;
	loop
	fetch C04 into	
		nr_seq_agenda_w,
		dt_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin		

		SELECT	MAX(a.nr_sequencia),
			max(a.nr_seq_dia)
		into STRICT	nr_seq_agenda_fase_w	,
			nr_seq_dia_alt_w
		FROM	rxt_agenda a
		WHERE	a.nr_seq_tratamento = nr_seq_tratamento_p
		AND	a.ie_status_agenda NOT IN ('E','F','C','H')
		AND	a.dt_agenda =  (SELECT	MIN(a.dt_agenda)
				  	FROM	rxt_agenda a
					WHERE	a.nr_seq_tratamento = nr_seq_tratamento_p
					AND	a.ie_status_agenda NOT IN ('E','F','C','H')
					AND	a.dt_agenda > dt_agenda_w);
				
		update	rxt_agenda_fase
		set	NR_SEQ_AGENDA_RXT = nr_seq_agenda_w
		where	NR_SEQ_AGENDA_RXT = nr_seq_agenda_fase_w;
		
		update	rxt_agenda
		set	nr_seq_dia = nr_seq_dia_alt_w
		where	nr_sequencia = nr_seq_agenda_w
		and	coalesce(nr_seq_fase::text, '') = '';

		end;
	end loop;
	close C04;	
	commit;
	
	nr_seq_dia_alt_w := null;

	/* Retirar o último agendamento do tratamento */

	update	rxt_agenda
	set	dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		nr_seq_tratamento	 = NULL,
		ie_status_agenda	= 'L',
		nr_seq_fase		 = NULL,
		nr_seq_dia		 = NULL,
		nr_seq_dia_fase		 = NULL
	where	nr_sequencia = nr_seq_ultima_agenda_w;
	
	if (ie_tipo_trat_w = 'B') then
		---- Ajustar ordenação da sequencia da agenda com a inserção
		nr_seq_agenda_nova_w := null;
	
		open C06;
		loop
		fetch C06 into	
			nr_seq_agenda_w,
			dt_agenda_w,
			nr_seq_dia_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin
			
			if (coalesce(nr_seq_agenda_nova_w::text, '') = '') then
				nr_seq_agenda_nova_w	:= nr_seq_agenda_w;
				nr_seq_dia_ww := nr_seq_dia_w;
			else
				update 	RXT_BRAQ_CAMPO_APLIC_TRAT
				set     nr_seq_agenda = nr_seq_agenda_nova_w
				where 	nr_seq_agenda = nr_seq_agenda_w;
				
				update rxt_agenda
				set nr_seq_dia = nr_seq_dia_ww
				where nr_sequencia = nr_seq_agenda_nova_w;
						
				commit;
				nr_seq_agenda_nova_w	:= nr_seq_agenda_w;
				nr_seq_dia_ww := nr_seq_dia_w;
			end if;				
		end;
		end loop;
		close C06;
		
		if (nr_seq_agenda_nova_w IS NOT NULL AND nr_seq_agenda_nova_w::text <> '') and (nr_seq_ultima_agenda_w IS NOT NULL AND nr_seq_ultima_agenda_w::text <> '') then
			
			update 	RXT_BRAQ_CAMPO_APLIC_TRAT
			set     nr_seq_agenda = nr_seq_agenda_nova_w
			where 	nr_seq_agenda = nr_seq_ultima_agenda_w;
			
			update rxt_agenda
			set nr_seq_dia = nr_seq_dia_ww
			where nr_sequencia = nr_seq_agenda_nova_w;
			commit;
		end if;

	end if;	
		
	commit;

	end;

else
	
        select  coalesce(max(ie_forma_reagendar), 'F')
        into STRICT    ie_forma_reagendar_w
        from    rxt_parametro;

	if (ie_tipo_trat_w = 'B') then
	
		/* Obter o intervalo de agendamento braq*/

		select	coalesce(max(a.qt_intervalo_insercoes),0)
                into STRICT 	qt_intervalo_inser_w
		from	RXT_BRAQ_APLIC_TRAT a,
			RXT_BRAQ_CAMPO_APLIC_TRAT b
		where	a.nr_sequencia = b.NR_SEQ_APLIC_TRAT
		and	b.nr_seq_agenda = nr_seq_agenda_p;
		
		select	trunc(max(a.dt_agenda)+qt_intervalo_inser_w+1),
                        to_char((max(a.dt_agenda)+qt_intervalo_inser_w+1),'hh24:mi:ss'),
                        trunc(max(a.dt_agenda))
		into STRICT	dt_agenda_prox_w,
			hr_agenda_prox_w,
			dt_agenda_final_w
		from	rxt_agenda a
		where	a.nr_seq_equipamento	= nr_seq_equipamento_p
		and	a.nr_seq_tratamento	= nr_seq_tratamento_p
		and	a.ie_status_agenda not in ('E','F','C','H')
		and 	coalesce(a.ie_classif_agenda,'N') <> 'E';
    	
		/* Busca a menor data de agendamento permitida para o equipamento + intervalo*/

		select	distinct min(a.dt_agenda)
		into STRICT	dt_agenda_alterar_w
		from	rxt_agenda a
		where	a.nr_seq_equipamento	= nr_seq_equipamento_p
		and	trunc(a.dt_agenda) not in (	
						SELECT	trunc(b.dt_agenda)
						from	rxt_agenda b
						where	b.nr_seq_equipamento	= nr_seq_equipamento_p
						and	b.nr_seq_tratamento	= nr_seq_tratamento_p
						and	a.ie_status_agenda not in ('E','F','C','H'))
		and	a.dt_agenda > dt_agenda_prox_w
                and	to_char(a.dt_agenda,'hh24:mi:ss') = hr_agenda_prox_w;
		
	else
                
		/* ( 'D' - Dia seguinte ao agendamento ): reagenda para o mesmo horário no dia seguinte ao agendamento que teve falta. 
                                                Se o horário estiver ocupado ou indisponível, será agendado para o primeiro horário livre. 
                                                Se já existir agendamento para o paciente nesse dia, será reagendado para o final do tratamento. 
                                                ( 'F' - Final do tratamento ): será reagendado para o final do tratamento.*/
                if (ie_forma_reagendar_w = 'D') then
                        
                        select	trunc(max(a.dt_agenda)+1),
                                to_char((max(a.dt_agenda)+1),'hh24:mi:ss'),
                                trunc(max(a.dt_agenda))
                        into STRICT	dt_agenda_prox_w,
                                hr_agenda_prox_w,
                                dt_agenda_final_w
                        from	rxt_agenda a
                        where	a.nr_seq_equipamento	= nr_seq_equipamento_p 
                        and	a.nr_seq_tratamento	= nr_seq_tratamento_p
                        and	a.ie_status_agenda not in ('E','F','C','H')
                        and 	coalesce(a.ie_classif_agenda,'N') <> 'E'
                        and     pkg_date_utils.start_of(a.dt_agenda, 'DAY') = pkg_date_utils.start_of(dt_agenda_p, 'DAY');

                        /* Busca a menor data de agendamento permitida para o equipamento */

                        select	distinct min(a.dt_agenda)
                        into STRICT	dt_agenda_alterar_w
                        from	rxt_agenda a
                        where	a.nr_seq_equipamento	= nr_seq_equipamento_p
                        and	trunc(a.dt_agenda) not in (	
                                                        SELECT	trunc(b.dt_agenda)
                                                        from	rxt_agenda b
                                                        where	b.nr_seq_equipamento	= nr_seq_equipamento_p
                                                        and	b.nr_seq_tratamento	= nr_seq_tratamento_p
                                                        and	b.ie_status_agenda not in ('E','F','C','H'))
                        and     pkg_date_utils.start_of(a.dt_agenda, 'DAY') =  pkg_date_utils.start_of(dt_agenda_prox_w, 'DAY')
                        and	to_char(a.dt_agenda,'hh24:mi:ss') = hr_agenda_prox_w
                        and	a.ie_status_agenda = 'L';
                        
                        if (coalesce(dt_agenda_alterar_w::text, '') = '') then
                                select	distinct min(a.dt_agenda)
                                into STRICT	dt_agenda_alterar_w
                                from	rxt_agenda a
                                where	a.nr_seq_equipamento	= nr_seq_equipamento_p
                                and	trunc(a.dt_agenda) not in (	
                                                                SELECT	trunc(b.dt_agenda)
                                                                from	rxt_agenda b
                                                                where	b.nr_seq_equipamento	= nr_seq_equipamento_p
                                                                and	b.nr_seq_tratamento	= nr_seq_tratamento_p
                                                                and	b.ie_status_agenda not in ('E','F','C','H'))
                                and     pkg_date_utils.start_of(a.dt_agenda, 'DAY') =  pkg_date_utils.start_of(dt_agenda_prox_w, 'DAY')
                                and	a.ie_status_agenda = 'L';
                        end if;
		
                end if;
				
                if (ie_forma_reagendar_w = 'F' or coalesce(dt_agenda_alterar_w::text, '') = '') then

                        select	trunc(max(a.dt_agenda)+1),
                                to_char((max(a.dt_agenda)+1),'hh24:mi:ss'),
                                trunc(max(a.dt_agenda))
                        into STRICT	dt_agenda_prox_w,
                                hr_agenda_prox_w,
                                dt_agenda_final_w
                        from	rxt_agenda a
                        where	a.nr_seq_equipamento	= nr_seq_equipamento_p
                        and	a.nr_seq_tratamento	= nr_seq_tratamento_p
                        and	a.ie_status_agenda not in ('E','F','C','H')
                        and 	coalesce(a.ie_classif_agenda,'N') <> 'E';
                        
                        /* Busca a menor data de agendamento permitida para o equipamento */

                        select	distinct min(a.dt_agenda)
                        into STRICT	dt_agenda_alterar_w
                        from	rxt_agenda a
                        where	a.nr_seq_equipamento	= nr_seq_equipamento_p
                        and	trunc(a.dt_agenda) not in (	
                                                        SELECT	trunc(b.dt_agenda)
                                                        from	rxt_agenda b
                                                        where	b.nr_seq_equipamento	= nr_seq_equipamento_p
                                                        and	b.nr_seq_tratamento	= nr_seq_tratamento_p
                                                        and	b.ie_status_agenda not in ('E','F','C','H'))
                        and	a.dt_agenda > dt_agenda_prox_w
                        and	to_char(a.dt_agenda,'hh24:mi:ss') >= hr_agenda_prox_w
                        and	a.ie_status_agenda = 'L';
                end if;

	end if;
	
	/* Atualiza os horários livres */

	CALL rxt_gerar_agenda_equip(nr_seq_equipamento_p, dt_agenda_alterar_w, 'S', nm_usuario_p);

	/* Obter o próximo dia para agendar */

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_agenda_alterar_w
	from	rxt_agenda a
	where	a.nr_seq_equipamento	= nr_seq_equipamento_p
	and	to_char(a.dt_agenda,'dd/mm/yyyy hh24:mi:ss') = to_char(dt_agenda_alterar_w ,'dd/mm/yyyy hh24:mi:ss')
	and	coalesce(a.ie_classif_agenda,'N') <> 'E';
	
	/*Obter status da agenda*/

	SELECT 	max(ie_status_agenda)
	into STRICT	ie_status_agenda_w
	FROM   	rxt_agenda
	WHERE	nr_sequencia = nr_seq_agenda_alterar_w;

	/* Se possuir agenda realiza os ajustes */

	if	(nr_seq_agenda_alterar_w IS NOT NULL AND nr_seq_agenda_alterar_w::text <> '' AND ie_status_agenda_w = 'L') then
		begin
		
		select 	max(a.nr_minuto_duracao)
		into STRICT	nr_minuto_duracao_w
		from	rxt_agenda a,
			rxt_tratamento b
		where	a.nr_sequencia = nr_seq_agenda_p
		and	b.nr_sequencia	= a.nr_seq_tratamento
		and	b.ie_horario_dif	= 'S';

		if (dt_agenda_p = dt_agenda_final_w) then
			begin
			/* Obter os dados do último agendamento */

			select	max(nr_seq_fase),
				max(nr_seq_dia),
				max(nr_seq_dia_fase),
				max(nr_atendimento)
			into STRICT	nr_seq_fase_ult_w,
				nr_seq_dia_ult_w,
				nr_seq_dia_fase_ult_w,
				nr_atendimento_w
			from	rxt_agenda
			where	nr_sequencia = nr_seq_agenda_p;
			
			/* Alterando o agendamento a ser alterado - sendo um novo registro */

			update	rxt_agenda
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				nr_seq_tratamento	= nr_seq_tratamento_p,
				ie_status_agenda	= 'M',
				nr_seq_fase		= nr_seq_fase_ult_w,
				nr_seq_dia		= nr_seq_dia_ult_w,
				nr_seq_dia_fase		= nr_seq_dia_fase_ult_w,
				nr_minuto_duracao	= coalesce(nr_minuto_duracao_w,nr_minuto_duracao),
				nr_atendimento		= nr_atendimento_w
			where	nr_sequencia		= nr_seq_agenda_alterar_w;	
			end;
		elsif (dt_agenda_p <> dt_agenda_final_w) and (nr_seq_ultima_agenda_w IS NOT NULL AND nr_seq_ultima_agenda_w::text <> '') then
			begin		
			/* Obter os dados do último agendamento */

			select	max(nr_seq_fase),
				max(nr_seq_dia),
				max(nr_seq_dia_fase),
				max(nr_atendimento)
			into STRICT	nr_seq_fase_ult_w,
				nr_seq_dia_ult_w,
				nr_seq_dia_fase_ult_w,
				nr_atendimento_w
			from	rxt_agenda
			where	nr_sequencia = nr_seq_ultima_agenda_w;

			/* Alterando o agendamento a ser alterado - sendo um novo registro */

			update	rxt_agenda
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				nr_seq_tratamento	= nr_seq_tratamento_p,
				ie_status_agenda	= 'M',
				nr_seq_fase		= nr_seq_fase_ult_w,
				nr_seq_dia		= nr_seq_dia_ult_w,
				nr_seq_dia_fase		= nr_seq_dia_fase_ult_w,
				nr_minuto_duracao	= coalesce(nr_minuto_duracao_w,nr_minuto_duracao),
				nr_atendimento		= nr_atendimento_w
			where	nr_sequencia		= nr_seq_agenda_alterar_w;				
			end;
		end if;

		/* Busca todos os agendamentos do tratamento */

		open C01;
		loop
		fetch C01 into
			nr_seq_agenda_w,
			dt_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin	
					
			/* Obter os dados do agendamento do tratamento */

			select	max(a.nr_seq_fase),
				max(a.nr_seq_dia),
				max(nr_sequencia)
			into STRICT	nr_seq_fase_ante_w,
				nr_seq_dia_ante_w,
				nr_seq_agenda_fase_w
			from	rxt_agenda a
			where	a.nr_seq_tratamento	= nr_seq_tratamento_p
			and	a.nr_seq_equipamento	= nr_seq_equipamento_p
			and	a.dt_agenda < dt_agenda_w
			and	a.nr_sequencia not in (nr_seq_agenda_w, nr_seq_agenda_alterar_w)
			and	a.ie_status_agenda not in ('E','F','C','H');		
			
			/* Se possuir fase do antecessor ajusta os dados do agendamento lido */

			if (nr_seq_fase_ante_w IS NOT NULL AND nr_seq_fase_ante_w::text <> '') and (nr_seq_dia_ante_w IS NOT NULL AND nr_seq_dia_ante_w::text <> '') then
				begin
				/* Obter o antecessor ao agendamento do tratamento */
		
				begin
				select	distinct a.nr_seq_fase,
					a.nr_seq_dia,
					a.nr_seq_dia_fase
				into STRICT	nr_seq_fase_alt_w,
					nr_seq_dia_alt_w,
					nr_seq_dia_fase_alt_w
				from	rxt_agenda a
				where	a.nr_seq_dia	= nr_seq_dia_ante_w
				and	a.ie_status_agenda not in ('E','F','C','H')
				and	a.nr_seq_tratamento	= nr_seq_tratamento_p
				and	a.nr_seq_equipamento	= nr_seq_equipamento_p;
				exception
					when others then
					--Não gerada as fases e dias !
					CALL wheb_mensagem_pck.exibir_mensagem_abort(264208);					
				end;		
				
				/* Ajustar as fases e os dias do agendamento */

				if (nr_seq_fase_alt_w IS NOT NULL AND nr_seq_fase_alt_w::text <> '') and (nr_seq_dia_alt_w IS NOT NULL AND nr_seq_dia_alt_w::text <> '') and (nr_seq_dia_fase_alt_w IS NOT NULL AND nr_seq_dia_fase_alt_w::text <> '') then
					update	rxt_agenda
					set	nr_seq_fase		= nr_seq_fase_alt_w,
						nr_seq_dia		= nr_seq_dia_alt_w,
						nr_seq_dia_fase		= nr_seq_dia_fase_alt_w
					where	nr_sequencia		= nr_seq_agenda_w;
				end if;
				end;
			elsif (nr_seq_dia_ante_w IS NOT NULL AND nr_seq_dia_ante_w::text <> '') then --por volume
				begin
				select	distinct a.nr_seq_fase,
					a.nr_seq_dia,
					a.nr_seq_dia_fase
				into STRICT	nr_seq_fase_alt_w,
					nr_seq_dia_alt_w,
					nr_seq_dia_fase_alt_w
				from	rxt_agenda a
				where	1 = 1 --a.nr_seq_fase	= nr_seq_fase_ante_w
				and	a.nr_seq_dia	= nr_seq_dia_ante_w
				and	a.nr_seq_tratamento	= nr_seq_tratamento_p
				and	a.nr_seq_equipamento	= nr_seq_equipamento_p
				and	a.ie_status_agenda not in ('E','F','C','H');
				exception
					when others then
					--Não gerada as fases e dias !
					CALL wheb_mensagem_pck.exibir_mensagem_abort(264208);					
				end;		
				
				/* Ajustar as fases e os dias do agendamento */

				if (nr_seq_dia_alt_w IS NOT NULL AND nr_seq_dia_alt_w::text <> '') then
					update	rxt_agenda
					set	nr_seq_dia		= nr_seq_dia_alt_w
					where	nr_sequencia		= nr_seq_agenda_w;
				end if;	
			
			end if;
			end;
		end loop;
		close C01;
		
		---Volume -> Ajustar rxt_agenda_fase		
		nr_seq_agenda_fase_w := null;
		open C03;
		loop
		fetch C03 into	
			nr_seq_agenda_w,
			dt_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			
			SELECT	max(a.nr_sequencia)
			into STRICT	nr_seq_agenda_fase_w
			FROM	rxt_agenda a
			WHERE	a.nr_seq_tratamento = nr_seq_tratamento_p
			AND	a.ie_status_agenda NOT IN ('E','F','C','H')
			--AND	a.nr_sequencia NOT IN (nr_seq_agenda_p)
			AND	a.dt_agenda = (
						SELECT	MAX(dt_agenda)
				 		FROM	rxt_agenda a
						WHERE	a.nr_seq_tratamento = nr_seq_tratamento_p
						AND	a.ie_status_agenda NOT IN ('E','F','C','H')
						--AND	a.nr_sequencia NOT IN (nr_seq_agenda_p)
						AND	a.dt_agenda < dt_agenda_w);
			
			update	rxt_agenda_fase
			set	NR_SEQ_AGENDA_RXT = nr_seq_agenda_w
			where	NR_SEQ_AGENDA_RXT =  nr_seq_agenda_fase_w;
				
			end;
		end loop;
		close C03;
		
		commit;
		end;
		
		if (ie_tipo_trat_w = 'B') then
		---- Ajustar ordenação da sequencia da agenda com a inserção
		nr_seq_agenda_nova_w := null;
			
			open C05;
			loop
			fetch C05 into	
				nr_seq_agenda_w,
				dt_agenda_w,
				nr_seq_dia_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin
				
				if (coalesce(nr_seq_agenda_nova_w::text, '') = '') then
					nr_seq_agenda_nova_w	:= nr_seq_agenda_w;
					nr_seq_dia_ww := nr_seq_dia_w;
				else
					update 	RXT_BRAQ_CAMPO_APLIC_TRAT
					set     nr_seq_agenda = nr_seq_agenda_nova_w
					where 	nr_seq_agenda = nr_seq_agenda_w;
					
					update rxt_agenda
					set nr_seq_dia = nr_seq_dia_ww
					where nr_sequencia = nr_seq_agenda_nova_w;
					
					nr_seq_agenda_nova_w	:= nr_seq_agenda_w;
					nr_seq_dia_ww := nr_seq_dia_w;
				end if;				
				commit;
				end;
			end loop;
			close C05;

		end if;

		nr_mensagem_w 		:= 321395;
		ds_macro_mensagem_w 	:= 'DT_AGENDA_ALTERAR=' ||PKG_DATE_FORMATERS.to_varchar(dt_agenda_alterar_w, 'timestamp', cd_estabelecimento_w, nm_usuario_p);

	else -- Gerar Encaixe
		select 	max(nr_minuto_duracao)
		into STRICT	nr_minuto_duracao_w
		from	rxt_agenda
		where	nr_sequencia = nr_seq_agenda_p;		
		   
		SELECT	max(a.dt_agenda) + 1/48 --somar 30 minutos do horário final
		into STRICT	dt_agenda_final_w
		FROM	rxt_agenda a
		WHERE	a.nr_seq_equipamento	= nr_seq_equipamento_p
		AND	to_char(a.dt_agenda,'dd/mm/yyyy') = TO_CHAR(dt_agenda_alterar_w ,'dd/mm/yyyy')
		and	obter_se_dia_valido_radio(nr_seq_equipamento_p, a.dt_agenda, cd_estabelecimento_w) = 'S';

		if (dt_agenda_final_w IS NOT NULL AND dt_agenda_final_w::text <> '') then
			/*'Encaixe gerado através da marcação da falta do dia '*/

			CALL rxt_gerar_encaixe(nr_seq_equipamento_p, dt_agenda_final_w, null, nr_minuto_duracao_w, null,nr_seq_tratamento_p,  wheb_mensagem_pck.get_texto(455727, 'DIA=' || dt_agenda_p));
			
			nr_mensagem_w		:= 321396;
			ds_macro_mensagem_w	:= 'DT_AGENDA_FINAL=' ||PKG_DATE_FORMATERS.to_varchar(dt_agenda_final_w, 'timestamp', cd_estabelecimento_w, nm_usuario_p);
		end if;
	end if;
END IF;

if (nr_mensagem_w > 0) then
	ds_mensagem_p := obter_texto_dic_objeto(nr_mensagem_w, philips_param_pck.get_nr_seq_idioma, ds_macro_mensagem_w);
end if;	


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE rxt_ajustar_agenda ( nr_seq_agenda_p bigint, nr_seq_tratamento_p bigint, nr_seq_equipamento_p bigint, dt_agenda_p timestamp, nm_usuario_p text, ds_mensagem_p INOUT text) FROM PUBLIC;

