-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_estoque_medio_mat ( cd_estabelecimento_p bigint, cd_local_estoque_p bigint, cd_material_p bigint, dt_mesano_referencia_p timestamp, qt_estoque_medio_p INOUT bigint) AS $body$
DECLARE


dt_mes_ref_w		timestamp;
dt_mes_ant_w		timestamp;
dt_processo_w		timestamp;
dt_referencia_w		timestamp;
qt_saldo_w		double precision;
qt_acum_w		double precision;
qt_estoque_ant_w		double precision;
qt_estoque_w		double precision	:= 0;
qt_movimento_w		double precision;
qt_dia_w			bigint	:= 0;
dt_ultimo_dia_w		timestamp;

c01 CURSOR FOR
SELECT	PKG_DATE_UTILS.start_of(a.dt_movimento_estoque,'dd',0) dt_processo,
	coalesce(sum(CASE WHEN a.cd_acao='1' THEN  CASE WHEN b.ie_entrada_saida='S' THEN (qt_estoque * -1)  ELSE qt_estoque END   ELSE CASE WHEN b.ie_entrada_saida='S' THEN (qt_estoque * -1)  ELSE qt_estoque END  * -1 END ),0) qt_movimento
from	operacao_estoque b,
	movimento_estoque_v a
where	a.cd_operacao_estoque	= b.cd_operacao_estoque
and	a.cd_material_estoque	= cd_material_p
and	a.cd_local_estoque		= cd_local_Estoque_p
and	a.dt_mesano_referencia	= dt_mes_ref_w
and	a.cd_estabelecimento	= cd_estabelecimento_p
and	(a.dt_processo IS NOT NULL AND a.dt_processo::text <> '')
group by
	PKG_DATE_UTILS.start_of(a.dt_movimento_estoque,'dd',0)

union all

select	dt_ultimo_dia_w,
	0

order by 1,2 desc;


BEGIN

delete
from	saldo_estoque_diario
where	cd_estabelecimento		= cd_estabelecimento_p
and	cd_local_estoque		= cd_local_estoque_p
and	cd_material		= cd_material_p
and	dt_mesano_referencia	= dt_mesano_referencia_p;

commit;

dt_mes_ref_w		:= pkg_date_utils.start_of(clock_timestamp(),'MONTH',0);
if (dt_mesano_referencia_p < dt_mes_ref_w) then
	dt_mes_ref_w	:= pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0);
	dt_ultimo_dia_w	:= trunc(pkg_date_utils.end_of(dt_mes_ref_w,'MONTH',0));
else
	dt_mes_ref_w	:= pkg_date_utils.start_of(clock_timestamp(),'MONTH',0);
	dt_ultimo_dia_w	:= PKG_DATE_UTILS.start_of(clock_timestamp(),'dd',0);
end if;

dt_mes_ant_w		:= pkg_date_utils.add_month(dt_mes_ref_w,-1,0);

select	coalesce(sum(qt_estoque),0)
into STRICT	qt_saldo_w
from	saldo_estoque
where	cd_estabelecimento		= cd_estabelecimento_p
and	dt_mesano_referencia	= dt_mes_ant_w
and	cd_local_estoque		= cd_local_estoque_p
and	cd_material		= cd_material_p;

qt_acum_w			:= 0;
dt_referencia_w			:= pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0);
open c01;
loop
fetch c01 into
	dt_processo_w,
	qt_movimento_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	if (dt_processo_w = dt_referencia_w) then
		qt_saldo_w	:= qt_saldo_w + qt_movimento_w;
		qt_acum_w	:= qt_acum_w + qt_saldo_w;
		qt_dia_w		:= qt_dia_w + 1;

		insert into saldo_estoque_diario(
			cd_estabelecimento,
			cd_local_estoque,
			cd_material,
			dt_mesano_referencia,
			dt_dia_saldo,
			qt_estoque,
			qt_acumulado)
		values (	cd_estabelecimento_p,
			cd_local_estoque_p,
			cd_material_p,
			dt_mesano_referencia_p,
			PKG_DATE_UTILS.start_of(dt_referencia_w, 'dd',0),
			qt_saldo_w,
			qt_acum_w);

		dt_referencia_w	:= dt_referencia_w + 1;

	elsif (dt_processo_w > dt_referencia_w) then
		while(dt_referencia_w < dt_processo_w) LOOP
		/*	qt_acum_w	:= qt_acum_w + qt_saldo_w;
			qt_dia_w		:= qt_dia_w + 1;*/
			dt_referencia_w	:= dt_referencia_w + 1;
		end loop;
		qt_saldo_w		:= qt_saldo_w + qt_movimento_w;
		qt_acum_w		:= qt_acum_w + qt_saldo_w;
		qt_dia_w			:= qt_dia_w + 1;

		insert into saldo_estoque_diario(
			cd_estabelecimento,
			cd_local_estoque,
			cd_material,
			dt_mesano_referencia,
			dt_dia_saldo,
			qt_estoque,
			qt_acumulado)
		values (	cd_estabelecimento_p,
			cd_local_estoque_p,
			cd_material_p,
			dt_mesano_referencia_p,
			PKG_DATE_UTILS.start_of(dt_referencia_w, 'dd',0),
			qt_saldo_w,
			qt_acum_w);

		dt_referencia_w			:= dt_referencia_w + 1;
	end if;

end loop;
close c01;

qt_estoque_medio_p				:= dividir(qt_acum_w, qt_dia_w);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_estoque_medio_mat ( cd_estabelecimento_p bigint, cd_local_estoque_p bigint, cd_material_p bigint, dt_mesano_referencia_p timestamp, qt_estoque_medio_p INOUT bigint) FROM PUBLIC;

