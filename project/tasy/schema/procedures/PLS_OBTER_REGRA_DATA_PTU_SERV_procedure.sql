-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_regra_data_ptu_serv ( ie_tipo_intercambio_p pls_regra_data_ptu_serv.ie_tipo_intercambio%type, ie_tipo_guia_p pls_regra_data_ptu_serv.ie_tipo_guia%type, cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, ie_tipo_data_p INOUT pls_regra_data_ptu_serv.ie_tipo_data%type, nr_seq_tipo_atendimento_p pls_regra_data_ptu_serv.nr_seq_tipo_atendimento%type, nr_seq_congenere_p pls_congenere.nr_sequencia%type, ie_regime_atendimento_p pls_regra_data_ptu_serv.ie_regime_atendimento%type, ie_saude_ocupacional_p pls_regra_data_ptu_serv.ie_saude_ocupacional%type) AS $body$
DECLARE

						
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Obter regras de participacao cadastradas na funcao OPS - Faturamento > Cadastros > Conversoes > Regra data servico
Pontos de atencao: 		UTILIZADA NA ROTINA 'PLS_GERAR_PTU_NOTA_SERVICO'
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_grupo_proc_w			bigint;
cd_area_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_especialidade_w		bigint;
ie_tipo_data_w			pls_regra_data_ptu_serv.ie_tipo_data%type;
nr_sequencia_w			pls_regra_data_ptu_serv.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	ie_tipo_data,
		CASE WHEN coalesce(nr_seq_grupo_operadora::text, '') = '' THEN 'S'  ELSE pls_se_grupo_preco_operadora(nr_seq_grupo_operadora,nr_seq_congenere_p) END  ie_grupo_operadora
	from	pls_regra_data_ptu_serv
	where	((coalesce(cd_grupo_proc::text, '') = '') or (cd_grupo_proc		= cd_grupo_proc_w))
	and	((coalesce(cd_area_procedimento::text, '') = '') or (cd_area_procedimento 	= cd_area_procedimento_w))
	and	((coalesce(cd_procedimento::text, '') = '') or (cd_procedimento		= cd_procedimento_p))
	and	((coalesce(cd_procedimento::text, '') = '') or (coalesce(ie_origem_proced::text, '') = '') or (ie_origem_proced = ie_origem_proced_w))
	and	((coalesce(cd_especialidade::text, '') = '') or (cd_especialidade		= cd_especialidade_w))
	and	((coalesce(ie_tipo_guia::text, '') = '') or (ie_tipo_guia 		= ie_tipo_guia_p))	
	and	((ie_tipo_intercambio 	= ie_tipo_intercambio_p) or (ie_tipo_intercambio = 'A'))
	and	((coalesce(nr_seq_tipo_atendimento::text, '') = '') or (nr_seq_tipo_atendimento = nr_seq_tipo_atendimento_p))
	and	((coalesce(ie_regime_atendimento::text, '') = '') or (ie_regime_atendimento	= ie_regime_atendimento_p))
	and	((coalesce(ie_saude_ocupacional::text, '') = '') or (ie_saude_ocupacional	= ie_saude_ocupacional_p))
	order by coalesce(cd_grupo_proc,0) desc,
		coalesce(cd_area_procedimento,0) desc,
		coalesce(cd_procedimento,0) desc,
		coalesce(ie_origem_proced,0) desc,
		coalesce(cd_especialidade,0) desc,
		coalesce(ie_tipo_guia,0) desc,
		coalesce(ie_tipo_intercambio,0) desc,
		coalesce(nr_sequencia,0) desc,
		coalesce(nr_seq_tipo_atendimento, 0) desc,
		coalesce(nr_seq_grupo_operadora,0) desc,
		coalesce(ie_regime_atendimento,0) desc,
		coalesce(ie_saude_ocupacional,0) desc;
		
BEGIN
ie_tipo_data_p := null;

-- verifica se existe alguma regra para processar
select	max(nr_sequencia)
into STRICT	nr_sequencia_w
from	pls_regra_data_ptu_serv;

-- so processa se exite regra
if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then
	SELECT * FROM pls_obter_estrut_proc(	cd_procedimento_p, ie_origem_proced_p, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w;
	
	for r_c01_w in c01 loop
		if (r_c01_w.ie_grupo_operadora = 'S') then
			ie_tipo_data_p := r_c01_w.ie_tipo_data;
		end if;
		-- o primeiro registro que retornar e o correto
		exit;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_regra_data_ptu_serv ( ie_tipo_intercambio_p pls_regra_data_ptu_serv.ie_tipo_intercambio%type, ie_tipo_guia_p pls_regra_data_ptu_serv.ie_tipo_guia%type, cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, ie_tipo_data_p INOUT pls_regra_data_ptu_serv.ie_tipo_data%type, nr_seq_tipo_atendimento_p pls_regra_data_ptu_serv.nr_seq_tipo_atendimento%type, nr_seq_congenere_p pls_congenere.nr_sequencia%type, ie_regime_atendimento_p pls_regra_data_ptu_serv.ie_regime_atendimento%type, ie_saude_ocupacional_p pls_regra_data_ptu_serv.ie_saude_ocupacional%type) FROM PUBLIC;

