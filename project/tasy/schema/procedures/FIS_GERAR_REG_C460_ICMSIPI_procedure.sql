-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_c460_icmsipi ( nr_seq_controle_p bigint, nr_ecf_cx_p text, dt_inicio_apuracao_p timestamp, dt_fim_apuracao_p timestamp, cd_estabelecimento_p bigint, cd_operacao_nf_p bigint, cd_serie_nf_p text) AS $body$
DECLARE


/*REGISTRO C470: ITENS DO DOCUMENTO FISCAL EMITIDO POR ECF (CÓDIGO 02 e2D).*/



-- VARIABLES
ie_gerou_dados_bloco_w	varchar(1) := 'N';

nr_seq_icmsipi_C460_w	fis_efd_icmsipi_C460.nr_sequencia%type;
vl_doc_w		fis_efd_icmsipi_C460.vl_doc%type;

qt_cursor_w 		bigint := 0;
nr_vetor_w  		bigint := 0;

-- USUARIO
nm_usuario_w usuario.nm_usuario%type;

/*Cursor que retorna as informações da nota fiscal*/

c_nota_ecf CURSOR FOR
	SELECT	'2D' cd_mod,
		'00' cd_sit,
		a.nr_nota_fiscal nr_doc,
		a.dt_emissao dt_doc,	
		null vl_pis,
		null vl_cofins,
		coalesce(a.cd_cgc, obter_cpf_pessoa_fisica(a.cd_pessoa_fisica)) cd_cpf_cnpj,
		obter_nome_pf_pj(a.cd_pessoa_fisica, a.cd_cgc) ds_nom_adq,
		a.nr_sequencia nr_seq_nota
	from	nota_fiscal a
	where	(a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '')
	and	a.ie_situacao		= 1
	and 	a.cd_operacao_nf	= cd_operacao_nf_p
	and 	a.cd_serie_nf		= cd_serie_nf_p
	and 	trunc(a.dt_emissao) between trunc(dt_inicio_apuracao_p )and trunc(dt_fim_apuracao_p)
	and 	a.cd_estabelecimento	= cd_estabelecimento_p
	
union all

	SELECT	'2D' cd_mod,
		'02' cd_sit,
		a.nr_nota_fiscal nr_doc,
		null dt_doc,	
		null vl_pis,
		null vl_cofins,
		null cd_cpf_cnpj,
		null ds_nom_adq,
		a.nr_sequencia nr_seq_nota
	from	nota_fiscal a
	where	(a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '')
	and	a.ie_situacao		= 9
	and 	a.cd_operacao_nf	= cd_operacao_nf_p
	and 	a.cd_serie_nf		= cd_serie_nf_p
	and 	trunc(a.dt_emissao) between trunc(dt_inicio_apuracao_p )and trunc(dt_fim_apuracao_p)
	and 	a.cd_estabelecimento	= cd_estabelecimento_p;

/*Criação do array com o tipo sendo do cursor eespecificado - c_itens_cupom_fiscal*/

type reg_c_nota_ecf is table of c_nota_ecf%RowType;
vet_c_nota_ecf reg_c_nota_ecf;

/*Criação do array com o tipo sendo da tabela eespecificada - fis_efd_icmsipi_C460 */

type registro is table of fis_efd_icmsipi_C460%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_nota_ecf;
loop
fetch c_nota_ecf bulk collect into vet_c_nota_ecf limit 1000;
	for i in 1 .. vet_c_nota_ecf.Count loop
		begin

		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;

		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w := 'S';
		end if;
		
		if (vet_c_nota_ecf[i].cd_sit <> '02') then
			CALL fis_gerar_reg_C470_icmsipi(	nr_seq_controle_p,
						vet_c_nota_ecf[i].nr_seq_nota);
		end if;
		
		begin
		/*Select para buscar os totalizadores do regintro c470*/

		select  CASE WHEN a.vl_tot_item=0 THEN  null  ELSE a.vl_tot_item END  vl_tot_item
		into STRICT	vl_doc_w
		from (
				SELECT	coalesce(sum(vl_item),0) vl_tot_item
				from	fis_efd_icmsipi_C470 a
				where	a.nr_seq_nota 		= vet_c_nota_ecf[i].nr_seq_nota
				and 	a.nr_seq_controle	= nr_seq_controle_p
			) a;
		
		exception
		when others then
			vl_doc_w	:= null;
		end;
		
		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_C460 */

		select	nextval('fis_efd_icmsipi_c460_seq')
		into STRICT	nr_seq_icmsipi_C460_w
		;

		/*Inserindo valores no array para realização do forall posteriormente*/

		fis_registros_w[qt_cursor_w].nr_sequencia         := nr_seq_icmsipi_C460_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao       := clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario           := nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec  := clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec      := nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg               := 'C460';
		fis_registros_w[qt_cursor_w].cd_mod		  := vet_c_nota_ecf[i].cd_mod;
  		fis_registros_w[qt_cursor_w].cd_sit		  := vet_c_nota_ecf[i].cd_sit;
		fis_registros_w[qt_cursor_w].nr_doc		  := vet_c_nota_ecf[i].nr_doc;
		fis_registros_w[qt_cursor_w].dt_doc		  := vet_c_nota_ecf[i].dt_doc;
		fis_registros_w[qt_cursor_w].vl_doc		  := vl_doc_w;
		fis_registros_w[qt_cursor_w].vl_pis		  := vet_c_nota_ecf[i].vl_pis;
		fis_registros_w[qt_cursor_w].vl_cofins		  := vet_c_nota_ecf[i].vl_cofins;
		fis_registros_w[qt_cursor_w].cd_cpf_cnpj	  := substr(elimina_caracteres_especiais(vet_c_nota_ecf[i].cd_cpf_cnpj), 1, 14);
		fis_registros_w[qt_cursor_w].ds_nom_adq		  := substr(vet_c_nota_ecf[i].ds_nom_adq, 1, 60);
		fis_registros_w[qt_cursor_w].nr_seq_nota	  := vet_c_nota_ecf[i].nr_seq_nota;
		fis_registros_w[qt_cursor_w].nr_seq_controle	  := nr_seq_controle_p;
		fis_registros_w[qt_cursor_w].nr_ecf_cx		  := nr_ecf_cx_p;

		if (nr_vetor_w >= 1000) then
			begin
			/*Inserindo registros definitivamente na tabela especifica - fis_efd_icmsipi_C460 */

			forall i in fis_registros_w.first .. fis_registros_w.last
				insert into fis_efd_icmsipi_C460 values fis_registros_w(i);

			nr_vetor_w := 0;
			fis_registros_w.delete;

			commit;

			end;
		end if;

		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w := nr_vetor_w + 1;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_nota_ecf */
end loop;
close c_nota_ecf;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_C460 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update	fis_efd_icmsipi_controle
	set	ie_mov_C 	= 'S'
	where	nr_sequencia 	= nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_c460_icmsipi ( nr_seq_controle_p bigint, nr_ecf_cx_p text, dt_inicio_apuracao_p timestamp, dt_fim_apuracao_p timestamp, cd_estabelecimento_p bigint, cd_operacao_nf_p bigint, cd_serie_nf_p text) FROM PUBLIC;

