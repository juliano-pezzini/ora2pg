-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_taxa_administrativa (NR_ATENDIMENTO_P bigint) AS $body$
DECLARE

dt_atualizacao_w        timestamp          := clock_timestamp();
cd_estabelecimento_w    smallint     := 0;
cd_taxa_servico_w       bigint     := 0;
cd_setor_atendimento_w  numeric(5,0)  := 0;
dt_entrada_w    		timestamp;
dt_entrada_unidade_w    timestamp;
dt_alta_w    		timestamp;
cd_convenio_w           numeric(5,0)  := 0;
cd_procedimento_w       bigint     := 0;
cd_categoria_w		varchar(10)  := '';
nr_doc_convenio_w       varchar(20)  := '';
ie_flag_ok              varchar(1)   := 'S';
cd_motivo_alta_w 	 	smallint     := 0;
ie_censo_diario_w	 	varchar(1)   := 'S';
cd_diaria_w       	bigint     := 0;
nr_sequencia_w       	bigint     := 0;
ie_origem_proced_w     	bigint     := 0;
nr_seq_atepacu_w		bigint;
ie_gerar_diaria_w	varchar(01)	:= 'S';
nr_seq_proc_interno_w	bigint;
cd_proc_int_w		bigint;
ie_origem_proc_int_w	bigint;
cd_plano_convenio_w	varchar(10);
cd_tipo_acomodacao_w	smallint;
ie_tipo_atendimento_w	smallint;
ie_situacao_w		varchar(1);

C01 CURSOR FOR
	SELECT	coalesce(ie_gerar_diaria, 'S')
	into STRICT	ie_gerar_diaria_w
	from	regra_diaria_taxa_administ
	where	cd_convenio					= cd_convenio_w
	and	coalesce(cd_motivo_alta, cd_motivo_alta_w)		= cd_motivo_alta_w
	and	coalesce(nr_tempo_maximo_int,coalesce(obter_hora_entre_datas(dt_entrada_w, dt_alta_w),0)) >= coalesce(obter_hora_entre_datas(dt_entrada_w, dt_alta_w),0)
	and	((obter_minutos_hora(to_char(dt_alta_w,'hh24:mi:ss')) >= coalesce(obter_minutos_hora(to_char(hr_inicial_alta,'hh24:mi:ss')),0)) or (coalesce(obter_minutos_hora(to_char(hr_inicial_alta,'hh24:mi:ss')),0) = 0))
	and	((obter_minutos_hora(to_char(dt_alta_w,'hh24:mi:ss')) <= coalesce(obter_minutos_hora(to_char(hr_final_alta,'hh24:mi:ss')),0)) or (coalesce(obter_minutos_hora(to_char(hr_final_alta,'hh24:mi:ss')),0) = 0))
	order by cd_convenio,
		coalesce(cd_motivo_alta,0),
		coalesce(nr_tempo_maximo_int,0),
		coalesce(obter_minutos_hora(to_char(hr_inicial_alta,'hh24:mi:ss')),0),
		coalesce(obter_minutos_hora(to_char(hr_final_alta,'hh24:mi:ss')),0);


BEGIN

/* Selecionar dados do atendimento */

begin
SELECT	DT_ENTRADA_UNIDADE,
	DT_ENTRADA,
	CD_SETOR_ATENDIMENTO,
	CD_CONVENIO,
	CD_CATEGORIA,
	NR_DOC_CONVENIO,
	To_Date((To_Char(dt_alta,'dd/mm/yyyy hh24:mi')||':00'),'DD/MM/YYYY HH24:MI:SS'),
	CD_ESTABELECIMENTO,
	CD_MOTIVO_ALTA,
	nr_seq_interno,
	obter_plano_atendimento(nr_atendimento,'C'),
	obter_tipo_acomod_atend(nr_atendimento,'C'),
	ie_tipo_atendimento
INTO STRICT	dt_entrada_unidade_w,
	dt_entrada_w,
	cd_setor_atendimento_w,
	cd_convenio_w,
	cd_categoria_w,
	nr_doc_convenio_w,
	dt_alta_w,
	cd_estabelecimento_w,
	cd_motivo_alta_w,
	nr_seq_atepacu_w,
	cd_plano_convenio_w,
	cd_tipo_acomodacao_w,
	ie_tipo_atendimento_w
FROM	Alta_Hospitalar_v
WHERE	nr_atendimento = nr_atendimento_p;
exception
     when others then
	ie_flag_ok := 'N';
end;


/*select	nvl(max(ie_gerar_diaria), 'S')
into	ie_gerar_diaria_w
from	REGRA_DIARIA_TAXA_ADMINIST
where	cd_convenio					= cd_convenio_w
and	nvl(cd_motivo_alta, cd_motivo_alta_w)		= cd_motivo_alta_w;*/
open C01;
loop
fetch C01 into
	ie_gerar_diaria_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_gerar_diaria_w := ie_gerar_diaria_w;
	end;
end loop;
close C01;

if (cd_motivo_alta_w > 0)       then
	begin
	Select ie_censo_diario
	  into STRICT ie_censo_diario_w
	  from motivo_alta
	 where cd_motivo_alta = cd_motivo_alta_w;
	exception
     		when others then
     		ie_censo_diario_w := 'S';
	end;
end if;

if (ie_censo_diario_w = 'N') then
          ie_flag_ok := 'N';
end if;

/* Gravar diaria da alta */

if (ie_flag_ok = 'S') and (ie_gerar_diaria_w = 'S') then
	CALL CALCULAR_DIARIA_ATENDIMENTO(cd_estabelecimento_w,
				nr_atendimento_p,
				dt_entrada_w,
				dt_alta_w,
				'Tasy','S','S','X');
end if;

/* Obter o codigo da taxa administrativa */

if (ie_flag_ok = 'S') then
	begin
	SELECT	CD_TAXA_SERVICO,
		coalesce(ie_origem_proced,1),
		nr_seq_proc_interno
	INTO STRICT	cd_taxa_servico_w,
		ie_origem_proced_w,
		nr_seq_proc_interno_w
	FROM	CONVENIO_TAXA_SERVICO
	WHERE	CD_ESTABELECIMENTO = cd_estabelecimento_w
	AND	CD_CONVENIO        = cd_convenio_w
	AND	CD_CATEGORIA       = cd_categoria_w
	AND	IE_TAXA_SERVICO    = 1
	and	coalesce(ie_situacao, 'A')	= 'A';
	exception
     	     when others then
          	  ie_flag_ok := 'N';
	end;

	if (coalesce(nr_seq_proc_interno_w,0) > 0) then

		SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_setor_atendimento_w, cd_proc_int_w, ie_origem_proc_int_w, cd_setor_atendimento_w, dt_alta_w, cd_tipo_acomodacao_w, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_proc_int_w, ie_origem_proc_int_w;

		if (coalesce(cd_proc_int_w,0) > 0) and (coalesce(ie_origem_proc_int_w,0) > 0) then
			cd_taxa_servico_w	:= cd_proc_int_w;
			ie_origem_proced_w	:= ie_origem_proc_int_w;
		end if;

	end if;
end if;


/* Gerar taxa administrativa */

if (ie_flag_ok = 'S') then
     	begin
	select	cd_procedimento
	into STRICT		cd_procedimento_w
	from		procedimento_paciente
	where		nr_atendimento		= nr_atendimento_p
	and		dt_entrada_unidade	= dt_entrada_unidade_w
	and		cd_procedimento		= cd_taxa_servico_w;
	exception
     		when others then
			begin
		    	select 	nextval('procedimento_paciente_seq')
     			into STRICT 		nr_sequencia_w
     			;


     			INSERT INTO PROCEDIMENTO_PACIENTE(NR_SEQUENCIA, NR_ATENDIMENTO, DT_ENTRADA_UNIDADE,CD_PROCEDIMENTO,
			DT_PROCEDIMENTO,QT_PROCEDIMENTO, DT_ATUALIZACAO, NM_USUARIO, CD_CONVENIO,
			CD_CATEGORIA,VL_PROCEDIMENTO, VL_MEDICO, VL_ANESTESISTA, VL_MATERIAIS,
			DT_ACERTO_CONTA,VL_AUXILIARES, VL_CUSTO_OPERACIONAL, TX_MEDICO,
			TX_ANESTESIA,NR_DOC_CONVENIO,DT_CONTA,CD_SETOR_ATENDIMENTO,
			IE_ORIGEM_PROCED, nr_seq_atepacu, ie_auditoria, nr_seq_proc_interno)
     			VALUES (NR_SEQUENCIA_W, NR_ATENDIMENTO_P, dt_entrada_unidade_w,
			cd_taxa_servico_w, dt_alta_w, 1,
             	DT_ATUALIZACAO_W, 'Tasy', cd_convenio_w, cd_categoria_w, 0, 0, 0, 0,
             	null, 0, 0, 0, 0, nr_doc_convenio_w, dt_alta_w, cd_setor_atendimento_w,
			ie_origem_proced_w, nr_seq_atepacu_w, 'N', nr_seq_proc_interno_w);

     			CALL Atualiza_Preco_Servico(NR_SEQUENCIA_W,
             	'Tasy');
     			exception
          			when others then
               			ie_flag_ok := 'N';
     			end;
	end;
end if;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_taxa_administrativa (NR_ATENDIMENTO_P bigint) FROM PUBLIC;

