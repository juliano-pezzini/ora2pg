-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_31 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Aplicar a validação para verificar se o procedimento ou material tem regra de liberação vinculada.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Alterações:
-------------------------------------------------------------------------------------------------------------------
dlehmkuhl OS 630672 - Criação da procedure.
-------------------------------------------------------------------------------------------------------------------
dlehmkuhl OS 688483 - 14/04/2014 -

Alteração:	Modificada a forma de trabalho em relação a atualização dos campos de controle
	que basicamente decidem se a ocorrência será ou não gerada. Foi feita também a
	substituição da rotina obterX_seX_geraX.

Motivo:	Necessário realizar essas alterações para corrigir bugs principalmente no que se
	refere a questão de aplicação de filtros (passo anterior ao da validação). Também
	tivemos um foco especial em performance, visto que a mesma precisou ser melhorada
	para não inviabilizar a nova solicitação que diz que a exceção deve verificar todo
	o atendimento.
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
i			integer;
nr_seq_selecao_w	dbms_sql.number_table;
ie_valido_w		dbms_sql.varchar2_table;
ds_observacao_w		dbms_sql.varchar2_table;

dados_filtro_w			pls_tipos_ocor_pck.dados_filtro;
ie_gerar_ocor_valor_zerado_w	pls_parametros.ie_gerar_glosa_valor_zerado%type;
ie_regra_liberacao_w		pls_regra_valor_conta.ie_regra_liberacao%type;
ie_gera_ocor_w			varchar(1);
ie_regra_preco_comb_w		varchar(1);
nr_seq_regra_w			pls_conta_proc_ocor_v.nr_seq_regra%type;

-- Informações da validação de valor apresentado a maior
C01 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_validacao,
		a.ie_val_regra_preco,
		a.ie_regra_lib_dif_vl_calc_zero
	from	pls_oc_cta_val_tab_preco a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

-- todos os procedimentos da seleção
C02 CURSOR(nr_id_transacao_pc	pls_selecao_ocor_cta.nr_id_transacao%type) FOR
	SELECT	'P'	ie_tipo_item,
		a.nr_seq_regra,
		a.nr_seq_regra_vinculo,
		a.nr_seq_regra_valor,
		a.nr_seq_conta,
		a.nr_seq_preco_pacote,
		a.nr_sequencia nr_seq_proc,
		x.nr_sequencia nr_seq_selecao,
		(SELECT	max(z.nr_seq_cp_comb_filtro)
		from	pls_conta_proc_regra z
		where	z.nr_sequencia = a.nr_sequencia) nr_seq_cp_comb_filtro
	from	pls_oc_cta_selecao_ocor_v	x,
		pls_conta_proc_ocor_v		a
	where 	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and	a.nr_sequencia		= x.nr_seq_conta_proc;

-- todos os materiais da seleção
C03 CURSOR(nr_id_transacao_pc	pls_selecao_ocor_cta.nr_id_transacao%type) FOR
	SELECT	'M'	ie_tipo_item,
		a.nr_seq_regra,
		a.nr_seq_conta,
		a.nr_sequencia nr_seq_mat,
		a.nr_seq_regra_valor,
		x.nr_sequencia nr_seq_selecao,
		(SELECT	max(z.nr_seq_cp_comb_filtro)
		from 	pls_conta_mat_regra z
		where	z.nr_sequencia = a.nr_sequencia) nr_seq_cp_comb_filtro
	from	pls_oc_cta_selecao_ocor_v	x,
		pls_conta_mat_ocor_v		a
	where	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and 	a.nr_sequencia		= x.nr_seq_conta_mat;
BEGIN

-- Deve existir a informação da regra para aplicar a validação
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	select	coalesce(ie_gerar_glosa_valor_zerado,'S')
	into STRICT	ie_gerar_ocor_valor_zerado_w
	from	table(pls_parametros_pck.f_retorna_param(cd_estabelecimento_p));

	ie_regra_preco_comb_w := pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(dados_regra_p.cd_estabelecimento);

	for	r_C01_w in C01(dados_regra_p.nr_sequencia) loop

		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

		-- Somente se foi marcado que a validação será feita
		if (r_C01_w.ie_val_regra_preco = 'S') then

			-- Inicializar as listas para cada regra.
			ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
			ds_observacao_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
			nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;

			-- Iniciar o índice para preenchimento da tabela.
			i := 0;
			-- tratamento para procedimentos
			for	r_C02_w in C02(nr_id_transacao_p) loop

				ie_gera_ocor_w := 'N';
				-- Inicializar os valores que serão atualizados na tabela de seleção.
				ds_observacao_w(i) := null;
				nr_seq_selecao_w(i) := r_C02_w.nr_seq_selecao;

				-- verifica se é para utilizar o campo da regra de preço combinada ou campo nr_seq_regra
				if (ie_regra_preco_comb_w = 'S') then

					nr_seq_regra_w := r_C02_w.nr_seq_cp_comb_filtro;
				else
					nr_seq_regra_w := r_C02_w.nr_seq_regra;
				end if;

				-- se não tiver regra de preço
				if	((coalesce(nr_seq_regra_w::text, '') = '') and (coalesce(r_C02_w.nr_seq_regra_vinculo::text, '') = '') and (coalesce(r_C02_w.nr_seq_preco_pacote::text, '') = '')) then

					ie_gera_ocor_w := 'S';

					-- se for para considerar regra de liberação de valor diferente de valor calculado zerado.
					if (r_C01_w.ie_regra_lib_dif_vl_calc_zero = 'S') then
						-- busca o tipo da regra de valorização
						ie_regra_liberacao_w := pls_util_cta_pck.pls_obter_regr_lib_it(r_C02_w.nr_seq_regra_valor);

						-- se for valor calculado zerado não deve gerar ocorrência
						if (ie_regra_liberacao_w = 3) then
							ie_gera_ocor_w := 'N';
						end if;
					end if;
				end if;

				-- Verificar se o registro atual é válido ou não conforme as parametrizações de regras e regras de exceção.
				ie_valido_w(i) := ie_gera_ocor_w;

				-- Quando a quantidade de itens da lista tiver chegado ao máximo definido na PLS_CTA_CONSISTIR_PCK, então os registros são levados para
				-- o BD e gravados todos de uma vez, pela procedure GERENCIAL_SELECAO_VALIDACAO, que atualiza os registros conforme passado por
				-- parâmetro, o indice e as listas são reiniciados para carregar os novos registros e para que os registros atuais não sejam atualizados novamente em
				-- na próxima carga.
				if (i = pls_cta_consistir_pck.qt_registro_transacao_w) then

					-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
					-- conforme passado por parâmetro,
					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
											'SEQ', ds_observacao_w, ie_valido_w, nm_usuario_p);

					-- Zerar o índice
					i := 0;

					-- Zerar as listas.
					ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
					ds_observacao_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
					nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;
				-- Enquanto os registros não tiverem atingido a carga para gravar na seleção incrementa o índice para armazenar os próximos registros.
				else
					i := i + 1;
				end if;

			end loop; -- C02
			-- Quando tiver sobrado algo na lista irá gravar o que restou após a execução do loop.
			if (nr_seq_selecao_w.count > 0) then

				-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
				-- conforme passado por parâmetro,
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
										'SEQ', ds_observacao_w, ie_valido_w, nm_usuario_p);
			end if;

			-- Inicializar as listas para cada regra.
			ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
			ds_observacao_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
			nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;

			-- Iniciar o índice para preenchimento da tabela.
			i := 0;
			-- tratamento para materiais
			for	r_C03_w in C03(nr_id_transacao_p) loop

				ie_gera_ocor_w := 'N';
				-- Inicializar os valores que serão atualizados na tabela de seleção.
				ds_observacao_w(i) := null;
				nr_seq_selecao_w(i) := r_C03_w.nr_seq_selecao;

				-- verifica se é para utilizar o campo da regra de preço combinada ou campo nr_seq_regra
				if (ie_regra_preco_comb_w = 'S') then

					nr_seq_regra_w := r_C03_w.nr_seq_cp_comb_filtro;
				else
					nr_seq_regra_w := r_C03_w.nr_seq_regra;
				end if;

				-- se não tiver regra de preço
				if (coalesce(nr_seq_regra_w::text, '') = '') then

					ie_gera_ocor_w := 'S';

					-- se for para considerar regra de liberação de valor diferente de valor calculado zerado.
					if (r_C01_w.ie_regra_lib_dif_vl_calc_zero = 'S') then
						-- busca o tipo da regra de valorização
						ie_regra_liberacao_w := pls_util_cta_pck.pls_obter_regr_lib_it(r_C03_w.nr_seq_regra_valor);

						-- se for valor calculado zerado não deve gerar ocorrência
						if (ie_regra_liberacao_w = 3) then
							ie_gera_ocor_w := 'N';
						end if;
					end if;
				end if;

				-- Verificar se o registro atual é válido ou não conforme as parametrizações de regras e regras de exceção.
				ie_valido_w(i) := ie_gera_ocor_w;

				-- Quando a quantidade de itens da lista tiver chegado ao máximo definido na PLS_CTA_CONSISTIR_PCK, então os registros são levados para
				-- o BD e gravados todos de uma vez, pela procedure GERENCIAL_SELECAO_VALIDACAO, que atualiza os registros conforme passado por
				-- parâmetro, o indice e as listas são reiniciados para carregar os novos registros e para que os registros atuais não sejam atualizados novamente em
				-- na próxima carga.
				if (i = pls_cta_consistir_pck.qt_registro_transacao_w) then

					-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
					-- conforme passado por parâmetro,
					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
											'SEQ', ds_observacao_w, ie_valido_w, nm_usuario_p);

					-- Zerar o índice
					i := 0;

					-- Zerar as listas.
					ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
					ds_observacao_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
					nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;
				-- Enquanto os registros não tiverem atingido a carga para gravar na seleção incrementa o índice para armazenar os próximos registros.
				else
					i := i + 1;
				end if;
			end loop; -- C03
			-- Quando tiver sobrado algo na lista irá gravar o que restou após a execução do loop.
			if (nr_seq_selecao_w.count > 0) then

				-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
				-- conforme passado por parâmetro,
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
										'SEQ', ds_observacao_w, ie_valido_w, nm_usuario_p);
			end if;

		end if;

	end loop; -- C01
	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_31 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

