-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_inserir_pac_medic_ext (nr_seq_dialise_p bigint, ds_lista_param_p text, ds_lista_medic_p text, nr_seq_motivo_fim_p bigint, cd_pessoa_fisica_p text, nr_seq_medic_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_local_p text) AS $body$
DECLARE


/*
IE_LOCAL_P =
I - Gestão do Paciente
P - Cadastro Paciente
C - Cadastro do lote
*/
lista_informacao_w		varchar(32000);
lista_medic_w		varchar(32000);
ie_contador_w		bigint := 0;
/* variaveis do lote*/

tam_lista_w		bigint;
ie_pos_virgula_w		smallint;
ie_pos_traco_w		bigint;
lista_inf_w		varchar(100);
/* variaveis do medicamento*/

tam_lista_ww		bigint;
ie_pos_virgula_ww		smallint;
ie_pos_traco_ww		bigint;
lista_inf_ww		varchar(100);
nr_seq_medic_w		numeric(20);
nr_seq_medic_ww		numeric(20);
nr_lote_w			numeric(20);
qt_medic_ww		bigint;

nr_seq_hd_entrega_medic_w	bigint;
nr_seq_hd_lote_medic_ext_w	bigint;
qt_material_disp_w		bigint;

ds_lote_fornec_w		varchar(20);
dt_vencimento_w		varchar(20);
cd_material_w		bigint;
qt_diferenca_material_w	bigint := 0;

C01 CURSOR FOR
	SELECT	c.nr_sequencia,
		d.nr_sequencia,
		coalesce(d.qt_material,0) - coalesce(hd_obter_qt_medic_dialise(d.nr_sequencia),0)
	from	hd_pac_renal_cronico a,
		medic_uso_continuo b,
		hd_entrega_medic c,
		hd_medic_externo e,
		hd_lote_medic_ext d
	where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
	and	e.cd_material = b.cd_material
	and	e.nr_sequencia = c.nr_seq_medic
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_p
	and	d.nr_seq_entrega = c.nr_sequencia
	and	coalesce(b.dt_suspensao::text, '') = ''
	and	(c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
	and (coalesce(d.qt_material,0) -coalesce(hd_obter_qt_medic_dialise(d.nr_sequencia),0)) > 0
	and	coalesce(c.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and	d.ds_lote_fornec = ds_lote_fornec_w
	and	trunc(d.dt_vencimento) = trunc(to_date(dt_vencimento_w,'dd/mm/yyyy'))
	and	b.cd_material = cd_material_w;

C02 CURSOR FOR
	SELECT	c.nr_sequencia,
		d.nr_sequencia,
		coalesce(d.qt_material,0) - coalesce(hd_obter_qt_medic_dialise(d.nr_sequencia),0)
	from    	hd_entrega_medic c,
		hd_medic_externo e,
		hd_lote_medic_ext d
	where   	e.nr_sequencia = c.nr_seq_medic
	and     	d.nr_seq_entrega = c.nr_sequencia
	and     	c.nr_seq_medic = nr_seq_medic_p
	and     	coalesce(trunc(d.dt_vencimento),trunc(clock_timestamp())) >= trunc(clock_timestamp())
	and     	(c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
	and     	((c.cd_estabelecimento = cd_estabelecimento_p) or ( cd_estabelecimento_p = '0'))
	and (coalesce(d.QT_MATERIAL,0) -coalesce(hd_obter_qt_medic_dialise(d.nr_sequencia),0)) > 0
	and	d.ds_lote_fornec = ds_lote_fornec_w
	and	trunc(d.dt_vencimento) = trunc(to_date(dt_vencimento_w,'dd/mm/yyyy'))
	and	e.cd_material = cd_material_w;


BEGIN

lista_informacao_w	:= ds_lista_param_p;
lista_medic_w	:= ds_lista_medic_p;

if (ds_lista_param_p IS NOT NULL AND ds_lista_param_p::text <> '') and (ds_lista_medic_p IS NOT NULL AND ds_lista_medic_p::text <> '') then

	while(lista_informacao_w IS NOT NULL AND lista_informacao_w::text <> '') and (lista_medic_w IS NOT NULL AND lista_medic_w::text <> '') and (ie_contador_w 		< 1000) loop
		begin

		/* valor da sequência e do lote*/

		tam_lista_w		:= length(lista_informacao_w);
		ie_pos_virgula_w		:= position(',' in lista_informacao_w);
		ie_pos_traco_w		:= position('-' in lista_informacao_w);
		lista_inf_w		:= substr(lista_informacao_w,1,ie_pos_virgula_w - 1);

		/* quantidade de medicamento*/

		tam_lista_ww		:= length(lista_medic_w);
		ie_pos_virgula_ww		:= position(',' in lista_medic_w);


		/* obter a sequência lida */

		if (ie_pos_virgula_w <> 0) then

			ds_lote_fornec_w	:= substr(lista_inf_w,1,(ie_pos_traco_w - 1));
			dt_vencimento_w	:= substr(lista_inf_w,ie_pos_traco_w + 1,10);
			cd_material_w	:= substr(lista_inf_w,ie_pos_traco_w + 12);

			lista_informacao_w	:= substr(lista_informacao_w,(ie_pos_virgula_w + 1),tam_lista_w);

			/* obter a sequência lida */

			if (ie_pos_virgula_ww <> 0) then
				begin
				qt_medic_ww	:= (substr(lista_medic_w, 1, (ie_pos_virgula_ww - 1)))::numeric;
				lista_medic_w	:= substr(lista_medic_w, (ie_pos_virgula_ww + 1), tam_lista_ww);
				end;
			end if;

			if (ie_local_p = 'I') or (ie_local_p = 'P') then

				open C01;
				loop
				fetch C01 into
					nr_seq_hd_entrega_medic_w,
					nr_seq_hd_lote_medic_ext_w,
					qt_material_disp_w;

				EXIT WHEN NOT FOUND or qt_medic_ww = 0;  /* apply on C01 */
					begin

					nr_seq_medic_w	:= nr_seq_hd_entrega_medic_w;
					nr_lote_w	:= nr_seq_hd_lote_medic_ext_w;

					if (qt_medic_ww > qt_material_disp_w) then
						qt_medic_ww := qt_medic_ww - qt_material_disp_w;
						qt_diferenca_material_w := qt_material_disp_w;
					else
						qt_diferenca_material_w := qt_medic_ww;
						qt_medic_ww := 0;
					end if;

					select 	max(nr_seq_medic)
					into STRICT	nr_seq_medic_ww
					from 	hd_entrega_medic
					where	nr_sequencia = nr_seq_medic_w;

					insert 	into	hd_dialise_med_ext(
							nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							nr_seq_dialise,
							nr_seq_medic,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							qt_medicamento,
							ds_motivo_nao_util,
							nr_seq_lote,
							nr_seq_motivo_fim,
							cd_pessoa_fisica,
							cd_estabelecimento,
							ie_local,
							ie_controlado_hosp,
							dt_validade)
						values (
							nextval('hd_dialise_med_ext_seq'),
							clock_timestamp(),
							coalesce(nm_usuario_p,obter_usuario_ativo),
							nr_seq_dialise_p,
							nr_seq_medic_ww,
							clock_timestamp(),
							coalesce(nm_usuario_p,obter_usuario_ativo),
							qt_diferenca_material_w,
							null,
							nr_lote_w,
							nr_seq_motivo_fim_p,
							cd_pessoa_fisica_p,
							cd_estabelecimento_p,
							ie_local_p,
							'S',
							trunc(to_date(dt_vencimento_w,'dd/mm/yyyy')));

					end;
				end loop;
				close C01;

			elsif (ie_local_p = 'C') then

				open C02;
				loop
				fetch C02 into
					nr_seq_hd_entrega_medic_w,
					nr_seq_hd_lote_medic_ext_w,
					qt_material_disp_w;

				EXIT WHEN NOT FOUND or qt_medic_ww = 0;  /* apply on C02 */
					begin

					nr_seq_medic_w	:= nr_seq_hd_entrega_medic_w;
					nr_lote_w	:= nr_seq_hd_lote_medic_ext_w;

					if (qt_medic_ww > qt_material_disp_w) then
						qt_medic_ww := qt_medic_ww - qt_material_disp_w;
						qt_diferenca_material_w := qt_material_disp_w;
					else
						qt_diferenca_material_w := qt_medic_ww;
						qt_medic_ww := 0;
					end if;

					select 	max(nr_seq_medic)
					into STRICT	nr_seq_medic_ww
					from 	hd_entrega_medic
					where	nr_sequencia = nr_seq_medic_w;

					insert 	into	hd_dialise_med_ext(
							nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							nr_seq_dialise,
							nr_seq_medic,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							qt_medicamento,
							ds_motivo_nao_util,
							nr_seq_lote,
							nr_seq_motivo_fim,
							cd_pessoa_fisica,
							cd_estabelecimento,
							ie_local)
						values (
							nextval('hd_dialise_med_ext_seq'),
							clock_timestamp(),
							coalesce(nm_usuario_p,obter_usuario_ativo),
							nr_seq_dialise_p,
							nr_seq_medic_ww,
							clock_timestamp(),
							coalesce(nm_usuario_p,obter_usuario_ativo),
							qt_diferenca_material_w,
							null,
							nr_lote_w,
							nr_seq_motivo_fim_p,
							cd_pessoa_fisica_p,
							cd_estabelecimento_p,
							ie_local_p);

					end;
				end loop;
				close C02;

			end if;

			ie_contador_w := ie_contador_w +1;
		end if;
		end;
	end loop;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_inserir_pac_medic_ext (nr_seq_dialise_p bigint, ds_lista_param_p text, ds_lista_medic_p text, nr_seq_motivo_fim_p bigint, cd_pessoa_fisica_p text, nr_seq_medic_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_local_p text) FROM PUBLIC;

