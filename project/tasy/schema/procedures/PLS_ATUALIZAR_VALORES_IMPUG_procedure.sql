-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_valores_impug ( nr_seq_impugnacao_p pls_impugnacao.nr_sequencia%type, ie_tipo_pedido_p pls_proc_conta_pedido.ie_tipo_pedido%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text default 'N') AS $body$
DECLARE


nr_seq_defesa_w		pls_impugnacao_defesa.nr_sequencia%type;
vl_deferido_w		pls_impugnacao.vl_deferido%type 	:= 0;
vl_ressarcir_w		pls_impugnacao.vl_ressarcir%type	:= 0;
nr_seq_proc_conta_w	pls_processo_conta.nr_sequencia%type;
ie_tipo_impugnacao_w	pls_processo_conta.ie_tipo_impugnacao%type;
ie_status_defesa_w	pls_impugnacao_defesa.ie_status%type;
vl_procedimentos_w	pls_processo_procedimento.vl_procedimento%type;
vl_conta_w		double precision;
vl_pedidos_w		pls_proc_conta_pedido.vl_pedido%type;
ie_tipo_pedido_w	pls_proc_conta_pedido.ie_tipo_pedido%type;

qt_defesas_deferidas_w		integer;
qt_defesas_indeferidas_w	integer;
qt_recursos_abertos_w		integer;

BEGIN

nr_seq_defesa_w		:= pls_obter_ultima_impug_defesa(nr_seq_impugnacao_p);

if (coalesce(nr_seq_defesa_w,0) > 0) then

	select	nr_seq_conta
	into STRICT	nr_seq_proc_conta_w
	from	pls_impugnacao
	where	nr_sequencia	= nr_seq_impugnacao_p;

	select 	coalesce(ie_tipo_impugnacao, 'C')
	into STRICT	ie_tipo_impugnacao_w
	from	pls_processo_conta
	where	nr_sequencia	= nr_seq_proc_conta_w;

	select	ie_status
	into STRICT	ie_status_defesa_w
	from	pls_impugnacao_defesa
	where	nr_sequencia	= nr_seq_defesa_w;

	select	sum(vl_pedido),
		max(ie_tipo_pedido)
	into STRICT	vl_pedidos_w,
		ie_tipo_pedido_w
	from	pls_proc_conta_pedido
	where	nr_seq_proc_conta = nr_seq_proc_conta_w;

	vl_conta_w := pls_conta_processo_obter_valor(nr_seq_proc_conta_w);

	if (ie_tipo_impugnacao_w = 'C') then

		-- verifica quantas defesas validas e deferidas a impugnacao tem, e quantos recursos em aberto
		select	sum(case when a.ie_status = 'D' then 1 else 0 end), -- qt deferidas
			sum(case when a.ie_status = 'I' then 1 else 0 end), -- qt indeferidas
			sum(case when ((a.ie_tipo_defesa = 'R') and (a.ie_status not in ('D', 'I'))) then 1 else 0 end) -- qt recurso aberto
		into STRICT	qt_defesas_deferidas_w,
			qt_defesas_indeferidas_w,
			qt_recursos_abertos_w
		from	pls_impugnacao_defesa	a,
			pls_impugnacao		b
		where	a.nr_seq_impugnacao	= b.nr_sequencia
		and	b.nr_sequencia		= nr_seq_impugnacao_p
		and	coalesce(a.dt_cancelamento::text, '') = '';

		--	se possui alguma defesa valida deferida e não possui nenhum recurso pendente
		if (qt_defesas_deferidas_w > 0) and (qt_recursos_abertos_w = 0)then

			-- é verificado se o pedido é referente a todo o atendimento ou ao valor informado no campo
			-- será necessário tratar a opção 'x' pois nesta pode ser ambos os casos dependendo do retorno do SUS
			-- se for pedido de anulação e foi deferido então o valor a ressarcir é zero e o valor deferido é o total
			if (ie_tipo_pedido_w = 'A') then

				vl_deferido_w	:= vl_conta_w;
				vl_ressarcir_w	:= 0;

			-- se for pedido Retificação e foi deferido então o valor a ressarcir é o valor do pedido
			-- e o valor deferido é a diferença entre o pedido e o valor total
			elsif (ie_tipo_pedido_w = 'R') then

				vl_deferido_w := vl_conta_w - vl_pedidos_w;
				vl_ressarcir_w := vl_pedidos_w;

			-- quando o tipo do pedido for RA então o usuário informa no delphi qual foi a opção deferida
			else
				if (ie_tipo_pedido_p = 'A') then

					vl_deferido_w	:= vl_conta_w;
					vl_ressarcir_w	:= 0;
				elsif (ie_tipo_pedido_p = 'R') then

					vl_deferido_w := vl_conta_w - vl_pedidos_w;
					vl_ressarcir_w := vl_pedidos_w;
				end if;
			end if;

		--	se NÃO possui alguma defesa valida deferida, mas possui defesa valida indeferida, e não possui nenhum recurso pendente
		--		o valor deferido é zerado
		--		o valor a ressarcir é o valor total da conta
		elsif	(qt_defesas_deferidas_w = 0 AND qt_defesas_indeferidas_w > 0) and (qt_recursos_abertos_w = 0) then

			vl_deferido_w	:= 0;
			vl_ressarcir_w	:= vl_conta_w;

		--	se POSSUI algum recurso pendente na defesa, ou então não possui nenhuma defesa válida deferida/indeferida
		--		o valor deferido é zerado
		--		o valor a ressarcir é zerado
		elsif (qt_recursos_abertos_w > 0) or
		        (qt_defesas_indeferidas_w = 0 AND qt_defesas_deferidas_w = 0)then

			vl_deferido_w	:= 0;
			vl_ressarcir_w	:= 0;
		end if;
	elsif (ie_tipo_impugnacao_w = 'P') then

		select	coalesce(sum(coalesce(a.vl_liberado,0)),0),
			coalesce(sum(coalesce(b.vl_procedimento,0)),0)
		into STRICT	vl_ressarcir_w,
			vl_procedimentos_w
		from	pls_processo_procedimento b,
			pls_impugnacao_proc a
		where	a.nr_seq_processo_proc	= b.nr_sequencia
		and	a.nr_seq_impugnacao	= nr_seq_impugnacao_p;

		if (ie_status_defesa_w = 'D') then
			vl_deferido_w	:= vl_procedimentos_w - vl_ressarcir_w;
			vl_ressarcir_w	:= vl_ressarcir_w;
		elsif (ie_status_defesa_w = 'I') then
			vl_deferido_w	:= 0;
			vl_ressarcir_w	:= vl_procedimentos_w;
		end if;

	end if;

end if;

-- Quando não tem nenhuma defesa, ou todas estão canceladas
if (coalesce(nr_seq_defesa_w,0) = 0) then
	-- o valor do ressarcimento deve ser zerado
	-- o valor deferido é zerado
	vl_ressarcir_w	:= 0;
	vl_deferido_w	:= 0;
end if;

update	pls_impugnacao
set	vl_ressarcir	= vl_ressarcir_w,
	vl_deferido	= vl_deferido_w
where	nr_sequencia	= nr_seq_impugnacao_p;

if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_valores_impug ( nr_seq_impugnacao_p pls_impugnacao.nr_sequencia%type, ie_tipo_pedido_p pls_proc_conta_pedido.ie_tipo_pedido%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text default 'N') FROM PUBLIC;

