-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_copartic_rec_glosa ( nr_seq_rec_glosa_prot_p pls_rec_glosa_protocolo.nr_sequencia%type, nr_seq_rec_glosa_cta_p pls_rec_glosa_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

						
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_proc_rec_w		pls_conta_proc.nr_sequencia%type;
nr_seq_mat_rec_w		pls_conta_mat.nr_sequencia%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
ie_tipo_segurado_w		pls_conta.ie_tipo_segurado%type;
nr_seq_conta_rec_w		pls_rec_glosa_conta.nr_sequencia%type;
ie_apropriacao_copartic_w	pls_parametros.ie_apropriacao_copartic%type;
ie_retorno_w			varchar(10);
qt_pos_w			integer := 0;
ie_cobranca_prevista_w		pls_rec_glosa_proc.ie_cobranca_prevista%type;
ie_permite_multi_copart_w	pls_parametros.ie_permite_multi_copart%type;
qt_registro_copartic_w		integer;
nr_regras_copart_w		varchar(256) :='';

-- Buscar os itens para a geracao de coparticipacao - C02 / C03

-- Ao editar o where do c02, olhar o C05 (duplicado para ficar implicito, por conta das mensagem)
C02 CURSOR(	nr_seq_rec_glosa_prot_pc		pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_rec_glosa_cta_pc			pls_rec_glosa_conta.nr_sequencia%type) FOR				
	SELECT	a.nr_sequencia,
		o.nr_sequencia,
		o.nr_seq_segurado,
		o.ie_tipo_segurado,
		c.nr_sequencia,
		i.nr_sequencia,
		coalesce(i.ie_cobranca_prevista,'N') ie_cobranca_prevista
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_proc	i,
		pls_conta_proc		a,
		pls_conta		o
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	a.nr_sequencia		= i.nr_seq_conta_proc
	and	o.nr_sequencia		= c.nr_seq_conta
	and	c.nr_seq_protocolo	= nr_seq_rec_glosa_prot_pc
	and	i.vl_acatado 		> 0
	and	c.ie_status		!= '3'
	and	coalesce(nr_seq_rec_glosa_cta_pc::text, '') = ''
	
union all

	SELECT	a.nr_sequencia,
		o.nr_sequencia,
		o.nr_seq_segurado,
		o.ie_tipo_segurado,
		c.nr_sequencia,
		i.nr_sequencia,
		coalesce(i.ie_cobranca_prevista,'N') ie_cobranca_prevista
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_proc	i,
		pls_conta_proc		a,
		pls_conta		o
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	a.nr_sequencia		= i.nr_seq_conta_proc
	and	o.nr_sequencia		= c.nr_seq_conta
	and	c.nr_sequencia		= nr_seq_rec_glosa_cta_pc
	and	i.vl_acatado 		> 0
	and	c.ie_status		!= '3'
	and	coalesce(nr_seq_rec_glosa_prot_pc::text, '') = '';

C03 CURSOR(	nr_seq_rec_glosa_prot_pc		pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_rec_glosa_cta_pc			pls_rec_glosa_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		o.nr_sequencia,
		o.nr_seq_segurado,
		o.ie_tipo_segurado,
		c.nr_sequencia,
		i.nr_sequencia,
		coalesce(i.ie_cobranca_prevista,'N') ie_cobranca_prevista
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_mat	i,
		pls_conta_mat		a,
		pls_conta		o
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	a.nr_sequencia		= i.nr_seq_conta_mat
	and	o.nr_sequencia		= c.nr_seq_conta
	and	c.nr_seq_protocolo	= nr_seq_rec_glosa_prot_pc
	and	i.vl_acatado 		> 0
	and	c.ie_status		!= '3'
	and	coalesce(nr_seq_rec_glosa_cta_pc::text, '') = ''
	
union all

	SELECT	a.nr_sequencia,
		o.nr_sequencia,
		o.nr_seq_segurado,
		o.ie_tipo_segurado,
		c.nr_sequencia,
		i.nr_sequencia,
		coalesce(i.ie_cobranca_prevista,'N') ie_cobranca_prevista
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_mat	i,
		pls_conta_mat		a,
		pls_conta		o
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	a.nr_sequencia		= i.nr_seq_conta_mat
	and	o.nr_sequencia		= c.nr_seq_conta
	and	c.nr_sequencia		= nr_seq_rec_glosa_cta_pc
	and	i.vl_acatado 		> 0
	and	c.ie_status		!= '3'
	and	coalesce(nr_seq_rec_glosa_prot_pc::text, '') = '';
	
C04 CURSOR(	nr_seq_rec_glosa_prot_pc		pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_rec_glosa_cta_pc			pls_rec_glosa_conta.nr_sequencia%type) FOR
	SELECT	nr_seq_conta
	from	pls_rec_glosa_conta
	where	nr_seq_protocolo	= nr_seq_rec_glosa_prot_pc
	and	coalesce(nr_seq_rec_glosa_cta_pc::text, '') = ''
	
union all

	SELECT	nr_seq_conta
	from	pls_rec_glosa_conta
	where	nr_sequencia	= nr_seq_rec_glosa_cta_pc
	and	coalesce(nr_seq_rec_glosa_prot_pc::text, '') = '';

-- validar duplicidade de copart em proc
C05 CURSOR(	nr_seq_rec_glosa_prot_pc		pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_rec_glosa_cta_pc			pls_rec_glosa_conta.nr_sequencia%type) FOR				
	SELECT	a.cd_procedimento,
		o.nr_seq_segurado,
		c.nr_sequencia nr_seq_conta_glosa,
		i.nr_sequencia nr_seq_proc_glosa
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_proc	i,
		pls_conta_proc		a,
		pls_conta		o
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	a.nr_sequencia		= i.nr_seq_conta_proc
	and	o.nr_sequencia		= c.nr_seq_conta
	and	c.nr_seq_protocolo	= nr_seq_rec_glosa_prot_pc
	and	i.vl_acatado 		> 0
	and	c.ie_status		!= '3'
	and	coalesce(nr_seq_rec_glosa_cta_pc::text, '') = ''
	
union all

	SELECT	a.cd_procedimento,
		o.nr_seq_segurado,
		c.nr_sequencia nr_seq_conta_glosa,
		i.nr_sequencia nr_seq_proc_glosa
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_proc	i,
		pls_conta_proc		a,
		pls_conta		o
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	a.nr_sequencia		= i.nr_seq_conta_proc
	and	o.nr_sequencia		= c.nr_seq_conta
	and	c.nr_sequencia		= nr_seq_rec_glosa_cta_pc
	and	i.vl_acatado 		> 0
	and	c.ie_status		!= '3'
	and	coalesce(nr_seq_rec_glosa_prot_pc::text, '') = '';


-- Validar duplicidade de copart em mat
C06 CURSOR(	nr_seq_rec_glosa_prot_pc		pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_rec_glosa_cta_pc			pls_rec_glosa_conta.nr_sequencia%type) FOR
	SELECT	a.nr_seq_material,
		o.nr_seq_segurado,
		o.ie_tipo_segurado,
		c.nr_sequencia nr_seq_conta_glosa,
		i.nr_sequencia nr_seq_mat_glosa
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_mat	i,
		pls_conta_mat		a,
		pls_conta		o
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	a.nr_sequencia		= i.nr_seq_conta_mat
	and	o.nr_sequencia		= c.nr_seq_conta
	and	c.nr_seq_protocolo	= nr_seq_rec_glosa_prot_pc
	and	i.vl_acatado 		> 0
	and	c.ie_status		!= '3'
	and	coalesce(nr_seq_rec_glosa_cta_pc::text, '') = ''
	
union all

	SELECT	a.nr_seq_material,
		o.nr_seq_segurado,
		o.ie_tipo_segurado,
		c.nr_sequencia nr_seq_conta_glosa,
		i.nr_sequencia nr_seq_mat_glosa
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_mat	i,
		pls_conta_mat		a,
		pls_conta		o
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	a.nr_sequencia		= i.nr_seq_conta_mat
	and	o.nr_sequencia		= c.nr_seq_conta
	and	c.nr_sequencia		= nr_seq_rec_glosa_cta_pc
	and	i.vl_acatado 		> 0
	and	c.ie_status		!= '3'
	and	coalesce(nr_seq_rec_glosa_prot_pc::text, '') = '';

BEGIN
select	max(ie_apropriacao_copartic),
	coalesce(max(ie_permite_multi_copart),'N')
into STRICT	ie_apropriacao_copartic_w,
	ie_permite_multi_copart_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

-- Cursor para a geracao da coparticipacao - Procedimento
open C02(nr_seq_rec_glosa_prot_p, nr_seq_rec_glosa_cta_p);
loop
fetch C02 into	
	nr_seq_conta_proc_w,
	nr_seq_conta_w,
	nr_seq_segurado_w,
	ie_tipo_segurado_w,
	nr_seq_conta_rec_w,
	nr_seq_proc_rec_w,
	ie_cobranca_prevista_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin	
	if (ie_apropriacao_copartic_w = 'S') then
	
		select	count(1)
		into STRICT	qt_pos_w
		from	pls_conta_pos_estabelecido
		where	nr_seq_proc_rec = nr_seq_proc_rec_w
		and	ie_situacao = 'A';
	
		if (qt_pos_w = 0) and (ie_cobranca_prevista_w = 'N') then
			CALL pls_apropriacao_pck.pls_gerar_copart_aprop_rec(	nr_seq_proc_rec_w, null, nr_seq_conta_proc_w,
									null, nm_usuario_p);
		end if;
	else
		-- Verificar a regra e se ja nao foi gerado coparticipacao para o item 
		ie_retorno_w := pls_obter_se_copart_rec_glosa( nr_seq_conta_proc_w, null, clock_timestamp(), nm_usuario_p, ie_retorno_w);
		
		-- Se a regra retornar 'S', deve ser gerado a coparticipacao
		if (ie_retorno_w = 'S') and (coalesce(ie_tipo_segurado_w,'X') in ('B','A','I','C','T','H')) then
						
			CALL pls_gerar_coparticipacao(nr_seq_conta_proc_w,
						nr_seq_segurado_w,
						nr_seq_conta_w,
						cd_estabelecimento_p,
						nm_usuario_p,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						nr_seq_conta_rec_w,
						'S');
		end if;
	end if;
	end;
end loop;
close C02;

-- Cursor para a geracao da coparticipacao - Material
open C03(nr_seq_rec_glosa_prot_p, nr_seq_rec_glosa_cta_p);
loop
fetch C03 into	
	nr_seq_conta_mat_w,
	nr_seq_conta_w,
	nr_seq_segurado_w,
	ie_tipo_segurado_w,
	nr_seq_conta_rec_w,
	nr_seq_mat_rec_w,
	ie_cobranca_prevista_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	if (ie_apropriacao_copartic_w = 'S') then
	
		select	count(1)
		into STRICT	qt_pos_w
		from	pls_conta_pos_estabelecido
		where	nr_seq_mat_rec = nr_seq_mat_rec_w
		and	ie_situacao = 'A';
		
		if (qt_pos_w = 0) and (ie_cobranca_prevista_w = 'N') then
			CALL pls_apropriacao_pck.pls_gerar_copart_aprop_rec(	null, nr_seq_mat_rec_w, null,
									nr_seq_conta_mat_w, nm_usuario_p);
		end if;
	else
		-- Verificar a regra e se ja nao foi gerado coparticipacao para o item
		ie_retorno_w := pls_obter_se_copart_rec_glosa( null, nr_seq_conta_mat_w, clock_timestamp(), nm_usuario_p, ie_retorno_w);
		
		-- Se a regra retornar 'S', deve ser gerado a coparticipacao
		if (ie_retorno_w = 'S') and (ie_tipo_segurado_w in ('B','A','I','C','T')) then
			CALL pls_gerar_coparticipacao(null,
						nr_seq_segurado_w,
						nr_seq_conta_w,
						cd_estabelecimento_p,
						nm_usuario_p,
						nr_seq_conta_mat_w,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						nr_seq_conta_rec_w,
						'S');
		end if;
	end if;
	end;
end loop;
close C03;

if (ie_permite_multi_copart_w = 'N') then

	-- valida os proc
	for r_c05_w in c05(nr_seq_rec_glosa_prot_p, nr_seq_rec_glosa_cta_p) loop

		select	count(1)
		into STRICT	qt_registro_copartic_w
		from	pls_conta_coparticipacao	a
		where	a.nr_seq_proc_rec		= r_c05_w.nr_seq_proc_glosa
		and	a.nr_seq_conta_rec		= r_c05_w.nr_seq_conta_glosa
		and	a.vl_coparticipacao	 	> 0
      		and	coalesce(a.dt_estorno::text, '') = '';WITH RECURSIVE cte AS (


		if (qt_registro_copartic_w	> 1) then

			-- joga as regra ja formatadas para exibir na mensagem
			select	max(substr(t.nr_seq_regra, 3, 255)) ds_regras
			into STRICT	nr_regras_copart_w
			from (		SELECT	distinct a.nr_seq_regra,
						row_number() OVER () AS seq
					from	pls_conta_coparticipacao	a
					where	a.nr_seq_proc_rec	= r_c05_w.nr_seq_proc_glosa
					and	a.nr_seq_conta_rec	= r_c05_w.nr_seq_conta_glosa
					and	a.vl_coparticipacao 	> 0
					and	coalesce(a.dt_estorno::text, '') = ''
					and	(a.nr_seq_regra IS NOT NULL AND a.nr_seq_regra::text <> '') ) t WHERE t.seq = 1
  UNION ALL


		if (qt_registro_copartic_w	> 1) then

			
			select	c.nr_regras_copart_w || ', ' || max(substr(t.nr_seq_regra, 3, 255)) ds_regras
			into STRICT	nr_regras_copart_w
			from (		SELECT	distinct a.nr_seq_regra,
						row_number() OVER () AS seq
					from	pls_conta_coparticipacao	a
					where	a.nr_seq_proc_rec	= r_c05_w.nr_seq_proc_glosa
					and	a.nr_seq_conta_rec	= r_c05_w.nr_seq_conta_glosa
					and	a.vl_coparticipacao 	> 0
					and	coalesce(a.dt_estorno::text, '') = ''
					and	(a.nr_seq_regra IS NOT NULL AND a.nr_seq_regra::text <> '') ) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq = qt_registro_copartic_w;
;

			rollback;
				
			if (nr_regras_copart_w = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(413072,'IE_TIPO_ITEM='||'Proc :' ||r_c05_w.nr_seq_proc_glosa);
			else
				CALL wheb_mensagem_pck.exibir_mensagem_abort(449239,'IE_TIPO_ITEM='||'Proc :' ||r_c05_w.nr_seq_proc_glosa||', ' || obter_desc_expressao(327262) || r_C05_w.cd_procedimento ||';NR_SEQ_CONTA='||r_c05_w.nr_seq_conta_glosa||';NR_SEQ_SEGURADO='||r_c05_w.nr_seq_segurado||';NR_REGRAS='||nr_regras_copart_w);
			end if;



		end if;
	end loop;

	-- valida os mat
	for r_c06_w in c06(nr_seq_rec_glosa_prot_p, nr_seq_rec_glosa_cta_p) loop

		select	count(1)
		into STRICT	qt_registro_copartic_w
		from	pls_conta_coparticipacao	a
		where	a.nr_seq_mat_rec		= r_c06_w.nr_seq_mat_glosa
		and	a.nr_seq_conta_rec		= r_c06_w.nr_seq_conta_glosa
		and	a.vl_coparticipacao	 	> 0
      		and	coalesce(a.dt_estorno::text, '') = '';WITH RECURSIVE cte AS (


		if (qt_registro_copartic_w	> 1) then

			-- joga as regra ja formatadas para exibir na mensagem
			select	max(substr(t.nr_seq_regra, 3, 255)) ds_regras
			into STRICT	nr_regras_copart_w
			from (		SELECT	distinct a.nr_seq_regra,
						row_number() OVER () AS seq
					from	pls_conta_coparticipacao	a
					where	a.nr_seq_mat_rec	= r_c06_w.nr_seq_mat_glosa
					and	a.nr_seq_conta_rec	= r_c06_w.nr_seq_conta_glosa
					and	a.vl_coparticipacao 	> 0
					and	coalesce(a.dt_estorno::text, '') = ''
					and	(a.nr_seq_regra IS NOT NULL AND a.nr_seq_regra::text <> '') ) t WHERE t.seq = 1
  UNION ALL


		if (qt_registro_copartic_w	> 1) then

			
			select	c.nr_regras_copart_w || ', ' || max(substr(t.nr_seq_regra, 3, 255)) ds_regras
			into STRICT	nr_regras_copart_w
			from (		SELECT	distinct a.nr_seq_regra,
						row_number() OVER () AS seq
					from	pls_conta_coparticipacao	a
					where	a.nr_seq_mat_rec	= r_c06_w.nr_seq_mat_glosa
					and	a.nr_seq_conta_rec	= r_c06_w.nr_seq_conta_glosa
					and	a.vl_coparticipacao 	> 0
					and	coalesce(a.dt_estorno::text, '') = ''
					and	(a.nr_seq_regra IS NOT NULL AND a.nr_seq_regra::text <> '') ) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq = qt_registro_copartic_w;
;

			rollback;

			if (nr_regras_copart_w = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(413072,'IE_TIPO_ITEM='||'Mat :' ||r_C06_w.nr_seq_mat_glosa);
			else
				CALL wheb_mensagem_pck.exibir_mensagem_abort(449239,'IE_TIPO_ITEM='||'Mat :' ||r_C06_w.nr_seq_mat_glosa||', Seq mat: '||r_C06_w.nr_seq_material||';NR_SEQ_CONTA='||r_c06_w.nr_seq_conta_glosa||';NR_SEQ_SEGURADO='||r_C06_w.nr_seq_segurado||';NR_REGRAS='||nr_regras_copart_w);
			end if;
		end if;

	end loop;
end if;



CALL pls_atualizar_copart_rec_glosa( nr_seq_rec_glosa_prot_p, cd_estabelecimento_p, nm_usuario_p, 'N');

-- Gerar dados contabeis da coparticipacao do recurso de glosa
for r_c04_w in c04( nr_seq_rec_glosa_prot_p, nr_seq_rec_glosa_cta_p ) loop
	CALL pls_gerar_contab_val_adic(	r_c04_w.nr_seq_conta, null, null, null, null, null, null, 'C', 'N', nm_usuario_p);
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_copartic_rec_glosa ( nr_seq_rec_glosa_prot_p pls_rec_glosa_protocolo.nr_sequencia%type, nr_seq_rec_glosa_cta_p pls_rec_glosa_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

