-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_liberacao_ciclo ( nr_seq_paciente_p bigint, ie_todos_p text, cd_pessoa_fisica_p text, nm_usuario_p text, nr_sequencia_p INOUT text, ds_consistencias_p INOUT text) AS $body$
DECLARE



nr_sequencia_w		bigint;
nr_ciclo_w		smallint;
nr_ciclo_final_w		smallint;
nr_ciclo_atual_w		smallint;
cd_pessoa_fisica_w	varchar(10);
ie_liberar_w		varchar(1);
nr_atendimento_w		bigint;
ie_tipo_convenio_w		smallint;
cd_material_w		integer;
qt_autorizado_w		bigint;
cd_convenio_w		integer;
ds_material_w		varchar(255);
ds_material_acum_w	varchar(4000);
ie_consiste_mat_aut_w	varchar(1);
ie_consiste_protoc_w	varchar(1);
ie_consiste_medico_w	varchar(1);
qt_dose_w		bigint;
ie_exige_laudo_w	varchar(10);
ie_tipo_liberacao_w	varchar(10);
cd_medico_w		varchar(10);
qt_reg_w		bigint;
ie_regra_quimio_onc_w	varchar(1);
qt_reg_obriga_w	bigint;
qt_reg_obriga_just_w	bigint;
nr_dias_vigente_ciclo_w		smallint;
dt_protocolo_w				timestamp;

C01 CURSOR FOR
	SELECT	b.cd_material,
		m.ds_material
	from	material_autorizado b,
		autorizacao_convenio a,
		estagio_autorizacao e,
		material m
	where	a.nr_sequencia		= b.nr_sequencia_autor
	and	e.nr_sequencia		= a.nr_seq_estagio
	and	b.cd_material		= m.cd_material
	and	a.nr_seq_paciente_setor = nr_seq_paciente_p
	and	a.cd_convenio 		= cd_convenio_w
	and	e.ie_interno		<> '10'
	and	((ie_todos_p = 'S') or (ie_todos_p = 'N' AND a.nr_ciclo = nr_ciclo_w));

BEGIN

select  count(*)
into STRICT	qt_dose_w
from    material b,
        paciente_protocolo_medic a
where   a.cd_material           	= b.cd_material
and     a.nr_seq_paciente       	= nr_seq_paciente_p
and     a.qt_dose 		= 0;

if (qt_dose_w > 0) then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(277326);
end if;

select	Obter_Valor_Param_Usuario(281,170, obter_perfil_ativo, nm_usuario_p,0)
into STRICT	ie_consiste_mat_aut_w
;

ie_exige_laudo_w	:= Obter_Valor_Param_Usuario(281,134, obter_perfil_ativo, nm_usuario_p,0);
ie_tipo_liberacao_w	:= Obter_Valor_Param_Usuario(281,904, obter_perfil_ativo, nm_usuario_p,0);
ie_consiste_protoc_w	:= Obter_Valor_Param_Usuario(281,1071, obter_perfil_ativo, nm_usuario_p,0);


select 	coalesce(max(ie_regra_quimio_onc),'N'),
		coalesce(max(NR_DIAS_VIGENTE_CICLO),0)
into STRICT	ie_regra_quimio_onc_w,
		nr_dias_vigente_ciclo_w
from	parametro_medico
where	cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

if (nr_dias_vigente_ciclo_w > 0) then

	Select  trunc(dt_protocolo)
	into STRICT	dt_protocolo_w
	from    paciente_setor
	where	nr_seq_paciente = nr_seq_paciente_p;

	if ((Trunc(clock_timestamp()) - dt_protocolo_w) > nr_dias_vigente_ciclo_w) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(296507);
	end if;

end if;

select	coalesce(max(nr_ciclo),0) + 1
into STRICT	nr_ciclo_w
from	paciente_setor_lib
where	nr_seq_paciente	= nr_seq_paciente_p
and	coalesce(dt_cancelamento::text, '') = ''
and	coalesce(ie_tipo_liberacao,'M') = ie_tipo_liberacao_w;

select	coalesce(max(nr_ciclos),-1),
	max(cd_pessoa_fisica)
into STRICT	nr_ciclo_final_w,
	cd_pessoa_fisica_w
from	paciente_setor
where	nr_seq_paciente	= nr_seq_paciente_p;

select	max(nr_atendimento)
into STRICT	nr_atendimento_w
from	atendimento_paciente
where	cd_pessoa_fisica	= cd_pessoa_fisica_w;

if (nr_atendimento_w > 0) then
	select	obter_tipo_convenio(obter_convenio_atendimento(nr_atendimento_w)),
		obter_convenio_atendimento(nr_atendimento_w)
	into STRICT	ie_tipo_convenio_w,
		cd_convenio_w
	;
end if;

if (ie_tipo_convenio_w 	= 3) and (ie_exige_laudo_w 	= 'S')then /*SUS*/
	select	substr(Obter_se_laudo_vigente(cd_pessoa_fisica_w,clock_timestamp(),1),1,1)
	into STRICT	ie_liberar_w
	;

	if (ie_liberar_w = 'N') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(277332);
	end if;
end if;

if (nr_ciclo_final_w <> -1) and (nr_ciclo_w > nr_ciclo_final_w) then
	if (nr_ciclo_final_w = 1) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(277339, 'NR_CICLO_FINAL_P=' || to_char(nr_ciclo_final_w) || ';NR_CICLO_P=' || to_char(nr_ciclo_w));
	else
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(277349, 'NR_CICLO_FINAL_P=' || to_char(nr_ciclo_final_w) || ';NR_CICLO_P=' || to_char(nr_ciclo_w));
	end if;
end if;

if (ie_consiste_protoc_w = 'S') then



	select 	max(cd_pessoa_fisica)
	into STRICT	cd_medico_w
	from 	usuario
	where	nm_usuario = nm_usuario_p;

	if (cd_medico_w IS NOT NULL AND cd_medico_w::text <> '')	and (obter_se_medico(cd_medico_w,'M')	= 'S')then
		update	paciente_setor
		set	cd_medico_resp  = cd_medico_w
		where	nr_seq_paciente = nr_seq_paciente_p;

	end if;

end if;

if (ie_regra_quimio_onc_w = 'S') then

		CALL consistir_regra_prot_onc(nr_seq_paciente_p,nm_usuario_p);

		select  count(*)
		into STRICT	qt_reg_w
		from	paciente_atendimento_erro
		where	nr_seq_paciente	= nr_seq_paciente_p;

		select   count(*)
		into STRICT	 qt_reg_obriga_w
		from     paciente_atendimento_erro
		where    nr_Seq_paciente = nr_seq_paciente_p
		and      ie_libera = 'N';

		select   count(*)
		into STRICT	 qt_reg_obriga_just_w
		from     paciente_atendimento_erro
		where    nr_Seq_paciente = nr_seq_paciente_p
		and      ie_libera = 'J'
		and		 coalesce(obter_just_regra_prot_onc(nr_seq_paciente, nr_seq_material, nr_seq_regra)::text, '') = '';

		if (qt_reg_w > 0) then
			ds_consistencias_p := 'S';
		end if;


end if;

if	((coalesce(qt_reg_w,0) = 0) or
	((coalesce(qt_reg_w,0) > 0) and (coalesce(qt_reg_obriga_w,0) = 0)and (coalesce(qt_reg_obriga_just_w,0) = 0))) then

	if (ie_tipo_convenio_w not in (1,3)) and (ie_consiste_mat_aut_w = 'S') then /*SUS e Particular*/
		open	c01;
		loop
		fetch	c01 into
			cd_material_w,
			ds_material_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			select	count(1)
			into STRICT	qt_autorizado_w
			from	paciente_protocolo_medic a
			where	a.cd_material		= cd_material_w
			and	a.nr_seq_paciente	= nr_seq_paciente_p;

			if (qt_autorizado_w > 0) then
				ds_material_acum_w	:= ds_material_acum_w ||ds_material_w ||chr(13) ||chr(10);
			end if;
			end;
		end loop;
		close c01;

		if (ds_material_acum_w IS NOT NULL AND ds_material_acum_w::text <> '') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(277333, 'DS_MATERIAL_ACUM_P=' || ds_material_acum_w ||chr(13) ||chr(10) || obter_desc_expressao(619521) || nr_ciclo_w);
		end if;
	end if;

	if (ie_todos_p = 'N') then

		select	nextval('paciente_setor_lib_seq')
		into STRICT	nr_sequencia_w
		;

		insert into paciente_setor_lib(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_paciente,
			nr_ciclo,
			dt_liberacao,
			cd_pessoa_fisica,
			ie_tipo_liberacao)
		values (	nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_paciente_p,
			nr_ciclo_w,
			clock_timestamp(),
			cd_pessoa_fisica_p,
			ie_tipo_liberacao_w);

	else
		nr_ciclo_atual_w	:= nr_ciclo_w;
		FOR i IN nr_ciclo_w..nr_ciclo_final_w LOOP
			begin
			select	nextval('paciente_setor_lib_seq')
			into STRICT	nr_sequencia_w
			;

			insert into paciente_setor_lib(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_paciente,
				nr_ciclo,
				dt_liberacao,
				cd_pessoa_fisica,
				ie_tipo_liberacao)
			values (	nr_sequencia_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_paciente_p,
				nr_ciclo_atual_w,
				clock_timestamp(),
				cd_pessoa_fisica_p,
				ie_tipo_liberacao_w);

			nr_ciclo_atual_w	:= nr_ciclo_atual_w + 1;

				end;
		END LOOP;
	end if;


	nr_sequencia_p	:= nr_sequencia_w;
	commit;

	CALL gerar_evento_lib_ciclo(nr_atendimento_w, cd_pessoa_fisica_w, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, nr_seq_paciente_p, 'L');

end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_liberacao_ciclo ( nr_seq_paciente_p bigint, ie_todos_p text, cd_pessoa_fisica_p text, nm_usuario_p text, nr_sequencia_p INOUT text, ds_consistencias_p INOUT text) FROM PUBLIC;

