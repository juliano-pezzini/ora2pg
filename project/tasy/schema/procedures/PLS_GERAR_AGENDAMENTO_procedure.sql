-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_agendamento ( nr_seq_proposta_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
cd_beneficiario_w		varchar(20);
nm_pessoa_fisica_w		varchar(255);
qt_altura_cm_w			real;
dt_nascimento_w			timestamp;
nr_celular_w			varchar(40);
nr_telefone_w			varchar(15);
nr_contato_w			varchar(50)	:= '';
nr_seq_agenda_integrada_w	bigint;
cd_cgc_outorgante_w		varchar(15);
cd_convenio_w			varchar(15);
qt_agendamentos_w		smallint;
cd_pessoa_fisica_per_w		varchar(10);
hr_inicial_w			timestamp;
hr_final_w			timestamp;
nr_minuto_intervalo_w		bigint;
ie_dia_semana_w			smallint;
nr_seq_agenda_pls_w		bigint;
qt_medico_w			bigint;
nr_seq_status_w			bigint;
cd_especialidade_w		integer;
nr_seq_beneficiario_w		bigint;
cd_categoria_w			varchar(10);

C00 CURSOR FOR 
	SELECT	cd_pessoa_fisica, 
		coalesce(hr_inicial, trunc(clock_timestamp()) + 8/24), 
		coalesce(hr_final, trunc(clock_timestamp()) + 18/24), 
		coalesce(nr_minuto_intervalo, 60), 
		coalesce(ie_dia_semana,9) 
	from	pls_analise_perito;

C01 CURSOR FOR 
	SELECT	a.cd_beneficiario, 
		b.nm_pessoa_fisica, 
		coalesce(b.qt_altura_cm,''), 
		b.dt_nascimento, 
		coalesce(b.nr_telefone_celular,''), 
		a.nr_sequencia 
	from	pls_proposta_beneficiario	a, 
		pessoa_fisica			b 
	where	a.cd_beneficiario	= b.cd_pessoa_fisica 
	and	a.nr_seq_proposta	= nr_seq_proposta_p 
	and	coalesce(a.dt_cancelamento::text, '') = '';


BEGIN 
 
cd_especialidade_w	:= obter_valor_param_usuario(1232, 44, Obter_Perfil_Ativo, nm_usuario_p, 0);
 
if (coalesce(cd_especialidade_w::text, '') = '') then 
	select	max(cd_especialidade) 
	into STRICT	cd_especialidade_w 
	from	especialidade_medica;
end if;
 
select	max(cd_convenio), 
	max(cd_categoria) 
into STRICT	cd_convenio_w, 
	cd_categoria_w 
from	pls_parametros 
where	cd_estabelecimento	= cd_estabelecimento_p;
 
if (coalesce(cd_convenio_w::text, '') = '') then 
	select	max(cd_cgc_outorgante) 
	into STRICT 	cd_cgc_outorgante_w 
	from	pls_outorgante 
	where	cd_estabelecimento = cd_estabelecimento_p;
	 
	begin 
	select	max(cd_convenio) 
	into STRICT	cd_convenio_w 
	from	convenio 
	where	cd_cgc = cd_cgc_outorgante_w 
	and	ie_situacao	= 'A';
	exception 
	when others then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 225338, null); /* Falta informação do convênio! */
	end;
end if;
 
open C00;
loop 
fetch C00 into 
	cd_pessoa_fisica_per_w, 
	hr_inicial_w, 
	hr_final_w, 
	nr_minuto_intervalo_w, 
	ie_dia_semana_w;
EXIT WHEN NOT FOUND; /* apply on C00 */
	begin 
	select	count(*) 
	into STRICT	qt_medico_w 
	from	agenda 
	where	cd_pessoa_fisica = cd_pessoa_fisica_per_w 
	and	cd_estabelecimento = cd_estabelecimento_p;
	 
	if (qt_medico_w = 0) then 
		select	nextval('agenda_seq') 
		into STRICT	nr_seq_agenda_pls_w 
		;
		 
		insert	into	agenda(	cd_agenda, nm_usuario, nm_usuario_nrec, 
				dt_atualizacao, dt_atualizacao_nrec, ds_agenda, 
				cd_tipo_agenda, ie_feriado, qt_dia_historico, 
				ie_situacao, cd_estabelecimento, ie_medico_executor, 
				hr_quebra_turno, ie_gerar_sobra_horario, qt_min_quebra_turno, 
				ie_gerar_solic_pront, ie_tipo_agenda_consulta, ie_gerar_solic_pront_gp, 
				ie_medico_requisitante, ie_perm_encaixe, cd_especialidade, 
				ie_agenda_integrada, ds_complemento, ie_gerar_hor_bloq, 
				ie_mostrar_odontograma, cd_pessoa_fisica, cd_perfil_exclusivo, 
				ie_consentimento, nr_seq_prop_ades_pls) 
			values (	nr_seq_agenda_pls_w, nm_usuario_p, nm_usuario_p, 
				clock_timestamp(), clock_timestamp(), 'Consulta (Nova)', 
				3, 'N', 60, 
				'A', cd_estabelecimento_p, 'N', 
				60, 'N', '0', 
				'N', 'A', 'N', 
				'P', 'S', cd_especialidade_w, 
				'S', 'Perito Plano de Saúde', 'N', 
				'N', cd_pessoa_fisica_per_w, Obter_perfil_Ativo, 
				'N', nr_seq_proposta_p);
		 
		insert	into	agenda_turno(	nr_sequencia, nm_usuario, dt_atualizacao, 
				cd_agenda, hr_inicial, hr_final, 
				nr_minuto_intervalo, ie_encaixe, ie_dia_semana) 
			values (	nextval('agenda_turno_seq'), nm_usuario_p, clock_timestamp(), 
				nr_seq_agenda_pls_w, hr_inicial_w, hr_final_w, 
				nr_minuto_intervalo_w, 'S', ie_dia_semana_w);
	end if;
	end;
end loop;
close C00;
 
open C01;
loop 
fetch C01 into 
	cd_beneficiario_w, 
	nm_pessoa_fisica_w, 
	qt_altura_cm_w, 
	dt_nascimento_w, 
	nr_celular_w, 
	nr_seq_beneficiario_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	select	max(nr_telefone) 
	into STRICT	nr_telefone_w 
	from	compl_pessoa_fisica 
	where	cd_pessoa_fisica	= cd_beneficiario_w 
	and	ie_tipo_complemento	= 1;
	 
	if (coalesce(nr_celular_w,'') <> '') then 
		nr_contato_w := nr_contato_w + 'M: '||nr_celular_w;
	end if;
	 
	if (coalesce(nr_telefone_w,'') <> '') then 
		nr_contato_w := nr_contato_w + 'R: '||nr_telefone_w;
	end if;
	 
	select	max(nr_sequencia) 
	into STRICT	nr_seq_status_w 
	from	agenda_integrada_status 
	where	ie_status_tasy	= 'EA';
	 
	select	nextval('agenda_integrada_seq') 
	into STRICT	nr_seq_agenda_integrada_w 
	;
	 
	insert	into	agenda_integrada(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec, 
			nm_usuario, nm_usuario_nrec, cd_estabelecimento, 
			dt_inicio_agendamento, cd_convenio, nr_seq_status, 
			cd_pessoa_fisica, nm_paciente, nr_telefone, 
			ie_turno, cd_categoria,nr_seq_prop_ades_pls) 
		values (	nr_seq_agenda_integrada_w, clock_timestamp(), clock_timestamp(), 
			nm_usuario_p, nm_usuario_p, cd_estabelecimento_p, 
			clock_timestamp(), cd_convenio_w, nr_seq_status_w, 
			cd_beneficiario_w, nm_pessoa_fisica_w, nr_contato_w, 
			'2', cd_categoria_w, nr_seq_proposta_p);
	 
	insert	into	agenda_integrada_item(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec, 
			nm_usuario, nm_usuario_nrec, nr_seq_agenda_int, 
			ie_tipo_agendamento, cd_especialidade) 
		values (	nextval('agenda_integrada_item_seq'), clock_timestamp(), clock_timestamp(), 
			nm_usuario_p, nm_usuario_p, nr_seq_agenda_integrada_w, 
			'C', cd_especialidade_w);
	 
	/*aaschlote 02/05/2011 OS - 314422 - Gerar historico para o beneficiário*/
 
	CALL pls_gravar_histor_prop_benef(nr_seq_beneficiario_w,clock_timestamp(),'8','Realizado o agendamento '||nr_seq_agenda_integrada_w||' para o beneficiário',nm_usuario_p);
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_agendamento ( nr_seq_proposta_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

