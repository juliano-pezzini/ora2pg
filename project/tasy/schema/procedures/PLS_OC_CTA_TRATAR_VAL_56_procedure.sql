-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_56 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Realizar o tratamento da validação 56 - Validar prestador solicitante não informado.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Alterações:
-------------------------------------------------------------------------------------------------------------------
jjung - OS 665942 - 03/12/2013 - Criação da rotina.
-------------------------------------------------------------------------------------------------------------------
dlehmkuhl OS 688483 - 14/04/2014 -

Alteração:	Modificada a forma de trabalho em relação a atualização dos campos de controle
	que basicamente decidem se a ocorrência será ou não gerada. Foi feita também a
	substituição da rotina obterX_seX_geraX.

Motivo:	Necessário realizar essas alterações para corrigir bugs principalmente no que se
	refere a questão de aplicação de filtros (passo anterior ao da validação). Também
	tivemos um foco especial em performance, visto que a mesma precisou ser melhorada
	para não inviabilizar a nova solicitação que diz que a exceção deve verificar todo
	o atendimento.
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_valido_w		pls_oc_cta_selecao_ocor_v.ie_valido%type;

tb_valido_w		dbms_sql.varchar2_table;
tb_seqs_selecao_w	dbms_sql.clob_table;
tb_observacao_w		dbms_sql.varchar2_table;
nr_idx_w		integer;

cs_regra_val CURSOR(	dados_regra_pc 	pls_tipos_ocor_pck.dados_regra) FOR
	SELECT	nr_sequencia,
		ie_valida_prest_solic_info
	from	pls_oc_cta_val_prest_solic regra
	where	regra.nr_seq_oc_cta_comb = dados_regra_pc.nr_sequencia;

cs_conta_val CURSOR(	dados_regra_pc		pls_tipos_ocor_pck.dados_regra,
			nr_id_transacao_pc	pls_selecao_ocor_cta.nr_id_transacao%type,
			ie_valido_pc		pls_selecao_ocor_cta.ie_valido%type) FOR
	SELECT 	-- Obter as sequencias dos registros da conta e seus filhos na tabela de seleção.
		pls_tipos_ocor_pck.obter_sequencia_selecao(null, null, sub.nr_seq_conta,
						nr_id_transacao_pc, null, null, dados_regra_pc.ie_excecao,
						'V') ds_seqs_selecao,
		ie_valido_pc,
		'O prestador solicitante para a conta não está informado ' ||
		'ou não foi localizado.' ds_observacao
	from (
		SELECT	distinct
			sel.nr_seq_conta,
			-- Obter o valor do campo NR_SEQ_PRESTADOR_IMP para regras de importação e
			-- do campo NR_SEQ_PRESTADOR para as demais regras.
			CASE WHEN dados_regra_pc.ie_evento='IMP' THEN 				conta.nr_seq_prestador_imp  ELSE conta.nr_seq_prestador END  nr_seq_prestador
		from	pls_oc_cta_selecao_ocor_v	sel,
			pls_conta_ocor_v		conta
		where	sel.nr_id_transacao	= nr_id_transacao_pc
		and	sel.ie_valido		= 'S'
		and	conta.nr_sequencia	= sel.nr_seq_conta
	) sub
	where	coalesce(sub.nr_seq_prestador::text, '') = '';
BEGIN

-- Verificar se a regra informada é válida.
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	-- Verificar se os registros filtrados serão válidos para a ocorrência ou não.
	ie_valido_w := 'S';

	-- zerar o indice.
	nr_idx_w := 0;
	-- Percorrer as regra cadastradas para a validação.
	for	rw_regra_val in cs_regra_val(dados_regra_p) loop

		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

		-- Se a regra validar apenas os registros
		if (rw_regra_val.ie_valida_prest_solic_info = 'S') then

			-- Varrer os registros das contas na tabela de seleção.
			begin
				open cs_conta_val(dados_regra_p, nr_id_transacao_p, ie_valido_w);
				loop
					tb_seqs_selecao_w.delete;
					tb_valido_w.delete;
					tb_observacao_w.delete;

					fetch cs_conta_val
					bulk collect into tb_seqs_selecao_w, tb_valido_w, tb_observacao_w
					limit pls_cta_consistir_pck.qt_registro_transacao_w;

					exit when tb_seqs_selecao_w.count = 0;

					-- Grava no banco os valores das lista.
					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	pls_tipos_ocor_pck.num_table_vazia,
						tb_seqs_selecao_w, 'LISTA', tb_observacao_w, tb_valido_w, nm_usuario_p);

				end loop; -- cs_conta_val
				close cs_conta_val;
			exception
			when others then
				-- se deu erro e o cursor estava aberto, fecha
				if (cs_conta_val%isopen) then
					close cs_conta_val;
				end if;

				-- limpa a selecao e grava o log de erro.
				CALL pls_tipos_ocor_pck.trata_erro_sql_dinamico(dados_regra_p, null, nr_id_transacao_p, nm_usuario_p);
			end;
		end if;

		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
	end loop; -- cs_regra_val
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_56 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

