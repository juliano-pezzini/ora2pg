-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_agenda_encaixe_atend (nr_atendimento_p bigint, nr_seq_agenda_p bigint, ie_agenda_p text, nm_usuario_p text) AS $body$
DECLARE


cd_pessoa_fisica_w		varchar(10);
cd_convenio_w			integer;
dt_nascimento_w		timestamp;
qt_idade_w			smallint;
cd_medico_resp_w		varchar(10);
cd_categoria_w		varchar(20);
cd_tipo_acomodacao_w		smallint;
cd_usuario_convenio_w	varchar(30);
cd_complemento_w		varchar(30);
dt_validade_carteira_w	timestamp;
ie_tipo_atendimento_w	bigint;
ie_tipo_atend_vinculo_w		varchar(30) := null;
ie_vincula_atend_w		varchar(1) := 'S';
cd_tipo_agenda_w		bigint;
ie_gerar_cirurgia_w	varchar(20);
nr_cirurgia_w		bigint;


BEGIN

ie_tipo_atend_vinculo_w := Obter_Param_Usuario(871, 542, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_tipo_atend_vinculo_w);
ie_gerar_cirurgia_w := obter_param_usuario(871, 839, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_cirurgia_w);


if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (ie_tipo_atend_vinculo_w IS NOT NULL AND ie_tipo_atend_vinculo_w::text <> '') then
	select   coalesce(max('S'),'N')
	into STRICT     ie_vincula_atend_w
	from     atendimento_paciente	
	where    nr_atendimento = nr_atendimento_p
	and      obter_se_contido(ie_tipo_atendimento,ie_tipo_atend_vinculo_w) = 'S';
end if;

SELECT MAX(b.cd_tipo_agenda)
into STRICT  	cd_tipo_agenda_w
FROM   agenda_paciente a, 
	   agenda b 
WHERE  a.cd_agenda    = b.cd_agenda 
AND    a.nr_sequencia =   nr_seq_agenda_p;



if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (ie_agenda_p IS NOT NULL AND ie_agenda_p::text <> '') then
	/* obter dados atendimento */

	select	a.cd_pessoa_fisica,
		b.cd_convenio,
		to_date(obter_dados_pf(a.cd_pessoa_fisica,'DN'),'dd/mm/yyyy'),
		(obter_dados_pf(a.cd_pessoa_fisica,'I'))::numeric ,
		a.cd_medico_resp,
		b.cd_categoria,
		b.cd_tipo_acomodacao,
		b.cd_usuario_convenio,
		b.cd_complemento,
		b.dt_validade_carteira,
		a.ie_tipo_atendimento
	into STRICT	cd_pessoa_fisica_w,
		cd_convenio_w,
		dt_nascimento_w,
		qt_idade_w,
		cd_medico_resp_w,		
		cd_categoria_w,
		cd_tipo_acomodacao_w,
		cd_usuario_convenio_w,
		cd_complemento_w,
		dt_validade_carteira_w,
		ie_tipo_atendimento_w
	FROM atendimento_paciente a
LEFT OUTER JOIN atend_categoria_convenio b ON (a.nr_atendimento = b.nr_atendimento)
, obter_atecaco_atendimento(a
LEFT OUTER JOIN atend_categoria_convenio b ON (obter_atecaco_atendimento(a.nr_atendimento) = b.nr_seq_interno)
WHERE a.nr_atendimento = nr_atendimento_p;

	if (ie_agenda_p = 'C') then /* agenda consulta */
		update	agenda_consulta
		set	cd_pessoa_fisica	= cd_pessoa_fisica_w,
			cd_convenio		= cd_convenio_w,
			dt_nascimento_pac	= dt_nascimento_w,
			qt_idade_pac		= qt_idade_w,
			cd_medico_solic		= cd_medico_resp_w,
			cd_categoria		= cd_categoria_w,
			cd_tipo_acomodacao	= cd_tipo_acomodacao_w,
			cd_usuario_convenio	= cd_usuario_convenio_w,
			cd_complemento	= cd_complemento_w,
			dt_validade_carteira	= dt_validade_carteira_w,
			ie_status_agenda	= 'N',
			dt_atualizacao	= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			nm_paciente		= obter_nome_pf(cd_pessoa_fisica_w),
			nm_usuario_origem	= nm_usuario_p,
			dt_agendamento	= clock_timestamp(),
			nr_atendimento	= nr_atendimento_p
		where	nr_sequencia		= nr_seq_agenda_p;
	elsif (ie_agenda_p = 'E') then /* agenda paciente */
	
		if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')) then
		   cd_medico_resp_w := null;
		end if;

		update	agenda_paciente
		set	cd_pessoa_fisica	= cd_pessoa_fisica_w,
			nm_paciente		= obter_nome_pf(cd_pessoa_fisica_w),
			dt_nascimento_pac	= dt_nascimento_w,
			qt_idade_paciente	= qt_idade_w,
			nr_telefone		= obter_fone_pac_agenda(cd_pessoa_fisica_w),
			cd_convenio		= cd_convenio_w,
			cd_categoria		= cd_categoria_w,
			cd_usuario_convenio	= cd_usuario_convenio_w,
			dt_validade_carteira	= dt_validade_carteira_w,
			cd_tipo_acomodacao	= cd_tipo_acomodacao_w,
			cd_medico		= coalesce(cd_medico,cd_medico_resp_w),
			cd_medico_exec		= CASE WHEN cd_tipo_agenda_w=1 THEN cd_medico  ELSE cd_medico_resp_w END ,
			ie_status_agenda	= 'N',
			nm_usuario_orig	= nm_usuario_p,
			dt_agendamento	= clock_timestamp(),
			dt_atualizacao	= clock_timestamp(),			
			nr_atendimento	 = CASE WHEN ie_vincula_atend_w='S' THEN nr_atendimento_p  ELSE null END ,
			ie_tipo_atendimento	= ie_tipo_atendimento_w
		where	nr_sequencia		= nr_seq_agenda_p;
		
		
		select	max(nr_cirurgia)
		into STRICT	nr_cirurgia_w
		from	agenda_paciente
		where	nr_sequencia		= nr_seq_agenda_p;
		
		if (ie_gerar_cirurgia_w	= 'S') and (ie_vincula_atend_w = 'S') and (coalesce(nr_cirurgia_w::text, '') = '') and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
			begin
				CALL GERAR_CIRURGIA_AGENDA_HTML5(nr_seq_agenda_p);
			exception
			when others then
				null;
			end;
			
		end if;
		
		
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_agenda_encaixe_atend (nr_atendimento_p bigint, nr_seq_agenda_p bigint, ie_agenda_p text, nm_usuario_p text) FROM PUBLIC;

