-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_pedido_pa ( nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, ddd_telefone_p ptu_solicitacao_pa.nr_ddd%type, nr_telefone_p ptu_solicitacao_pa.nr_telefone%type, ds_email_p ptu_solicitacao_pa.ds_email%type, ie_tipo_manifestacao_p ptu_solicitacao_pa.ie_tipo_manifestacao%type, ie_tipo_categoria_p ptu_solicitacao_pa.ie_tipo_categoria%type, ie_tipo_sentimento_p ptu_solicitacao_pa.ie_tipo_sentimento%type, nr_transacao_intercambio_p ptu_solicitacao_pa.nr_trans_intercambio%type, nr_protocolo_anterior_p ptu_solicitacao_pa.nr_protocolo_referencia%type, ds_mensagem_livre_p ptu_solicitacao_pa.ds_mensagem_livre%type, nr_protocolo_p pls_protocolo_atendimento.nr_protocolo%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_solicitacao_pa_p INOUT ptu_solicitacao_pa.nr_sequencia%type) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Gerar o pedido do protocolo de atendimento 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[X] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção:Performance. 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
cd_pessoa_fisica_w		pls_segurado.cd_pessoa_fisica%type;

cd_usuario_plano_w		pls_segurado_carteira.cd_usuario_plano%type;

cd_cpf_w			pessoa_fisica.nr_cpf%type;
nm_pessoa_fisica_w		pessoa_fisica.nm_pessoa_fisica%type;
nr_telefone_celular_w		pessoa_fisica.nr_telefone_celular%type;
nr_ddd_celular_w		pessoa_fisica.nr_ddd_celular%type;

ds_email_w			compl_pessoa_fisica.ds_email%type;

nr_seq_protocolo_w		pls_protocolo_atendimento.nr_sequencia%type;
nr_protocolo_referencia_w	pls_protocolo_atendimento.nr_protocolo_referencia%type;

cd_cgc_outorgante_w		pls_outorgante.cd_cgc_outorgante%type;

cd_cooperativa_w		pls_congenere.cd_cooperativa%type;
cd_congenere_w			pls_congenere.cd_cooperativa%type;

nr_seq_execucao_w		ptu_pedido_autorizacao.nr_seq_execucao%type;

nr_seq_controle_exec_w		ptu_controle_execucao.nr_sequencia%type;

nr_registro_ans_w		ptu_solicitacao_pa.nr_registro_ans%type;

ds_campos_w			varchar(4000)	:= '';


BEGIN 
 
-- Obter dados da Requisição / Guia 
if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then 
	 
	begin 
		select	nr_seq_segurado 
		into STRICT	nr_seq_segurado_w 
		from	pls_requisicao 
		where	nr_sequencia	= nr_seq_requisicao_p;
	exception 
	when others then 
		nr_seq_segurado_w	:= null;
	end;
 
	begin 
		select	nr_sequencia 
		into STRICT	nr_seq_protocolo_w 
		from	pls_protocolo_atendimento 
		where	nr_seq_requisicao	= nr_seq_requisicao_p;
	exception 
	when others then 
		nr_seq_protocolo_w	:= null;
	end;
	 
	begin 
		select	max(nr_seq_execucao) 
		into STRICT	nr_seq_execucao_w 
		from	ptu_pedido_autorizacao 
		where	nr_seq_requisicao	= nr_seq_requisicao_p;
	exception 
	when others then 
		nr_seq_execucao_w	:= null;
	end;
	 
elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then 
	 
	begin 
		select	nr_seq_segurado 
		into STRICT	nr_seq_segurado_w 
		from	pls_guia_plano 
		where	nr_sequencia	= nr_seq_guia_p;
	exception 
	when others then 
		nr_seq_segurado_w	:= null;
	end;
	 
	begin 
		select	nr_sequencia 
		into STRICT	nr_seq_protocolo_w 
		from	pls_protocolo_atendimento 
		where	nr_seq_guia	= nr_seq_guia_p;
	exception 
	when others then 
		nr_seq_protocolo_w	:= null;
	end;
	 
	begin 
		select	max(nr_seq_execucao) 
		into STRICT	nr_seq_execucao_w 
		from	ptu_pedido_autorizacao 
		where	nr_seq_guia	= nr_seq_guia_p;
	exception 
	when others then 
		nr_seq_execucao_w	:= null;
	end;
end if;
 
if (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then 
	nr_seq_segurado_w	:= nr_seq_segurado_p;
end if;
 
-- Obter dados do segurado 
if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then 
 
	nm_pessoa_fisica_w	:= pls_obter_dados_segurado(nr_seq_segurado_w,'N');
	cd_pessoa_fisica_w	:= pls_obter_dados_segurado(nr_seq_segurado_w,'PF');
	cd_cpf_w		:= pls_obter_dados_segurado(nr_seq_segurado_w,'CPF');
	ds_email_w		:= pls_obter_dados_segurado(nr_seq_segurado_w,'E');
	cd_usuario_plano_w	:= pls_obter_dados_segurado(nr_seq_segurado_w,'C');
	cd_congenere_w		:= pls_obter_unimed_benef(nr_seq_segurado_w);
	nr_telefone_celular_w	:= substr(PLS_ELIMINA_CARACTERES_ESP(obter_dados_pf(cd_pessoa_fisica_w, 'TC')),1,9);
	nr_ddd_celular_w	:= obter_dados_pf(cd_pessoa_fisica_w, 'DDDC');
	 
	if (coalesce(cd_congenere_w::text, '') = '') then 
		ds_campos_w	:= ds_campos_w || 'Operadora destino';
	end if;
	if (coalesce(cd_usuario_plano_w::text, '') = '') then 
		ds_campos_w	:= ds_campos_w || ', Cartão de identificação do beneficiário';
	end if;
	if (coalesce(nr_ddd_celular_w::text, '') = '') then 
		ds_campos_w	:= ds_campos_w || ', DDD do telefone do beneficiário';
	end if;
	if (coalesce(nr_telefone_celular_w::text, '') = '') then 
		ds_campos_w	:= ds_campos_w || ', Telefone do beneficiário';
	end if;
end if;
 
-- Obter dados do protocolo 
if (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') then 
	 
	begin 
		select	nr_protocolo_referencia 
		into STRICT	nr_protocolo_referencia_w 
		from	pls_protocolo_atendimento 
		where	nr_sequencia	= nr_seq_protocolo_w;
	exception 
	when others then 
		nr_protocolo_referencia_w	:= null;
	end;
	 
elsif (nr_protocolo_p IS NOT NULL AND nr_protocolo_p::text <> '') then 
 
	begin 
		select	nr_sequencia 
		into STRICT	nr_seq_protocolo_w 
		from	pls_protocolo_atendimento 
		where	nr_protocolo	= nr_protocolo_p;
	exception 
	when others then 
		nr_seq_protocolo_w	:= null;
	end;
end if;
 
if (ds_campos_w	<> '') then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(458494, ds_campos_w);
end if;
 
SELECT * FROM pls_obter_dados_operadora(cd_estabelecimento_p, nm_usuario_p, cd_cgc_outorgante_w, nr_registro_ans_w) INTO STRICT cd_cgc_outorgante_w, nr_registro_ans_w;
 
select	max(cd_cooperativa) 
into STRICT	cd_cooperativa_w 
from	pls_congenere 
where	cd_cgc			= cd_cgc_outorgante_w 
and	(cd_cooperativa IS NOT NULL AND cd_cooperativa::text <> '');
 
select	nextval('gestao_protocolo_atend_seq') 
into STRICT	nr_seq_controle_exec_w
;
 
insert into ptu_solicitacao_pa( 
	nr_sequencia, 							cd_estabelecimento, 						dt_atualizacao, 
	nm_usuario, 							dt_atualizacao_nrec, 						nm_usuario_nrec, 
	cd_transacao, 							dt_geracao, 							nr_protocolo_referencia, 
	ie_tipo_cliente, 						cd_operadora_origem, 						cd_operadora_destino, 
	nr_registro_ans, 						nr_seq_execucao, 						cd_cpf, 
	nr_ddd, 							nr_telefone, 							ds_email, 
	ie_tipo_manifestacao, 						ie_tipo_categoria, 						ie_tipo_sentimento, 
	nr_trans_intercambio, 						cd_operadora, 							cd_usuario_plano, 
	nm_beneficiario, 						ie_resposta, 							ds_mensagem_livre, 
	nr_versao, 							nr_seq_protocolo 
	) 
values ( 
	nextval('ptu_solicitacao_pa_seq'),					cd_estabelecimento_p,						clock_timestamp(), 
	nm_usuario_p,							clock_timestamp(),							nm_usuario_p, 
	'001',								clock_timestamp(),							coalesce(nr_protocolo_anterior_p,nr_protocolo_referencia_w), 
	'U',								cd_cooperativa_w,						cd_congenere_w, 
	nr_registro_ans_w,						nr_seq_controle_exec_w,						cd_cpf_w, 
	coalesce(ddd_telefone_p,nr_ddd_celular_w),				coalesce(nr_telefone_p,nr_telefone_celular_w),			coalesce(ds_email_p,ds_email_w), 
	coalesce(ie_tipo_manifestacao_p,6),					coalesce(ie_tipo_categoria_p,19),					ie_tipo_sentimento_p, 
	coalesce(nr_transacao_intercambio_p, nr_seq_execucao_w),		substr(cd_usuario_plano_w,1,4),					substr(cd_usuario_plano_w,5,13), 
	substr(nm_pessoa_fisica_w,1,70),				null,								ds_mensagem_livre_p, 
	'001',								nr_seq_protocolo_w 
	) return;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_pedido_pa ( nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, ddd_telefone_p ptu_solicitacao_pa.nr_ddd%type, nr_telefone_p ptu_solicitacao_pa.nr_telefone%type, ds_email_p ptu_solicitacao_pa.ds_email%type, ie_tipo_manifestacao_p ptu_solicitacao_pa.ie_tipo_manifestacao%type, ie_tipo_categoria_p ptu_solicitacao_pa.ie_tipo_categoria%type, ie_tipo_sentimento_p ptu_solicitacao_pa.ie_tipo_sentimento%type, nr_transacao_intercambio_p ptu_solicitacao_pa.nr_trans_intercambio%type, nr_protocolo_anterior_p ptu_solicitacao_pa.nr_protocolo_referencia%type, ds_mensagem_livre_p ptu_solicitacao_pa.ds_mensagem_livre%type, nr_protocolo_p pls_protocolo_atendimento.nr_protocolo%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_solicitacao_pa_p INOUT ptu_solicitacao_pa.nr_sequencia%type) FROM PUBLIC;

