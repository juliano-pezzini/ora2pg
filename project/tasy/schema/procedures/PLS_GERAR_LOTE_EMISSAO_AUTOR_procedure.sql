-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_emissao_autor ( nr_seq_lote_p bigint, ie_opcao_p text, nm_usuario_p text) AS $body$
DECLARE

					
nr_seq_segurado_w			pls_segurado.nr_sequencia%type;
cd_pessoa_fisica_w			pessoa_fisica.cd_pessoa_fisica%type;
nr_seq_regra_ger_aut_cab_w	pls_regra_ger_aut_cab.nr_sequencia%type;
nr_seq_campanha_w			mprev_campanha.nr_sequencia%type;
nr_seq_programa_w			mprev_programa.nr_sequencia%type;
nr_seq_regra_w				pls_regra_geracao_autor.nr_sequencia%type;
ie_preco_plano_w			pls_plano.nr_sequencia%type;

c01 CURSOR FOR
	SELECT	b.cd_pessoa_fisica
	from	mprev_participante b,
		mprev_campanha_partic a
	where	a.nr_seq_participante 	= b.nr_sequencia
	and	a.nr_seq_campanha 	= nr_seq_campanha_w
	and	clock_timestamp() between a.dt_inclusao and coalesce(a.dt_exclusao,clock_timestamp())
	
union

	SELECT	b.cd_pessoa_fisica
	from	mprev_participante b,
		mprev_programa_partic a
	where	a.nr_seq_participante 	= b.nr_sequencia
	and	a.nr_seq_programa 	= nr_seq_programa_w
	and	clock_timestamp() between a.dt_inclusao and coalesce(a.dt_exclusao,clock_timestamp());
	
c02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_regra_ger_aut_cab a
	where	a.nr_seq_regra_geracao_aut = nr_seq_regra_w
	and (a.ie_preco_segurado = ie_preco_plano_w or coalesce(a.ie_preco_segurado::text, '') = '')
	and (coalesce(a.nr_seq_caracteristica::text, '') = '' or exists ( 	SELECT	1
								from	pls_seg_caracteristica z
								where	z.nr_seq_caracteristica = a.nr_seq_caracteristica
								and	z.nr_seq_segurado 	= nr_seq_segurado_w
								and	clock_timestamp() between pkg_date_utils.start_of(coalesce(z.dt_inicio_vigencia, clock_timestamp()), 'DAY')
								and 	pkg_date_utils.end_of(coalesce(z.dt_fim_vigencia, clock_timestamp()), 'DAY')))
	and (coalesce(a.nr_contrato::text, '') = '' or exists (	select	1
								from	pls_contrato z,
									pls_segurado y
								where	z.nr_sequencia 	= y.nr_seq_contrato
								and	z.nr_contrato 	= a.nr_contrato
								and	y.nr_sequencia 	= nr_seq_segurado_w))
	and (coalesce(a.cd_municipio_ibge::text, '') = '' or exists (	select	1
								from	pls_segurado s,
									pessoa_fisica p,
									compl_pessoa_fisica c
								where	s.nr_sequencia 		= nr_seq_segurado_w
								and	s.cd_pessoa_fisica	= p.cd_pessoa_fisica
								and	c.cd_pessoa_fisica	= p.cd_pessoa_fisica
								and	c.ie_tipo_complemento 	= 1
								and	c.cd_municipio_ibge 	= a.cd_municipio_ibge));


BEGIN

if (ie_opcao_p = 'G') then
	select	a.nr_seq_regra_geracao
	into STRICT	nr_seq_regra_w
	from	pls_lote_geracao_autor a
	where	a.nr_sequencia = nr_seq_lote_p;
	
	select	a.nr_seq_campanha,
		a.nr_seq_programa
	into STRICT	nr_seq_campanha_w,
		nr_seq_programa_w
	from	pls_regra_geracao_autor a
	where	a.nr_sequencia = nr_seq_regra_w;

	/* Inserir beneficiarios */

	open C01;
	loop
	fetch C01 into	
		cd_pessoa_fisica_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_segurado_w
		from	pls_segurado a
		where	a.cd_pessoa_fisica = cd_pessoa_fisica_w
		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
		and	a.dt_contratacao <= clock_timestamp()
		and (coalesce(a.dt_rescisao::text, '') = '' or a.dt_rescisao > clock_timestamp())
		and	a.ie_tipo_segurado = 'B';
		
		if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
			select	b.ie_preco
			into STRICT	ie_preco_plano_w
			from	pls_plano b,
				pls_segurado a
			where	a.nr_seq_plano = b.nr_sequencia
			and	a.nr_sequencia = nr_seq_segurado_w;

			nr_seq_regra_ger_aut_cab_w := null;
			/* Obter qual a regra se cabecalho que se encaixou */

			open C02;
			loop
			fetch C02 into	
				nr_seq_regra_ger_aut_cab_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				null;
				end;
			end loop;
			close C02;
			
			if (nr_seq_regra_ger_aut_cab_w IS NOT NULL AND nr_seq_regra_ger_aut_cab_w::text <> '') then
				insert into pls_lote_ger_autor_item(nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nr_seq_lote_geracao,
					nr_seq_segurado,
					nr_seq_regra_ger_aut_cab)
				values (nextval('pls_lote_ger_autor_item_seq'),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nr_seq_lote_p,
					nr_seq_segurado_w,
					nr_seq_regra_ger_aut_cab_w);
			end if;
		end if;
		end;
	end loop;
	close C01;

	update	pls_lote_geracao_autor
	set	dt_geracao = clock_timestamp(),
		nm_usuario = nm_usuario_p,
		dt_atualizacao = clock_timestamp()
	where	nr_sequencia = nr_seq_lote_p;
elsif (ie_opcao_p = 'D') then
	delete from pls_lote_ger_autor_item
	where	nr_seq_lote_geracao = nr_seq_lote_p;

	update	pls_lote_geracao_autor
	set	dt_geracao  = NULL,
		nm_usuario = nm_usuario_p,
		dt_atualizacao = clock_timestamp()
	where	nr_sequencia = nr_seq_lote_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_emissao_autor ( nr_seq_lote_p bigint, ie_opcao_p text, nm_usuario_p text) FROM PUBLIC;

