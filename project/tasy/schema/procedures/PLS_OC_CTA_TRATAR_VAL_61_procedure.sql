-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_61 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: 	Utilizada para aplicar a validação 61 - Validar se prestador solicitante é igual ao da requisição.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
 Funcionamento:  Aplica as operações necessárias pela ocorrência combinada e busca todos os registros que tiverem
	o prestador solicitante diferente do prestador da requisição para gerar a ocorrência.
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Alterações:
------------------------------------------------------------------------------------------------------------------
jjung OS 680081 - 04/02/2014 - Criação da procedure.
------------------------------------------------------------------------------------------------------------------
dlehmkuhl OS 688483 - 14/04/2014 -

Alteração:	Modificada a forma de trabalho em relação a atualização dos campos de controle
	que basicamente decidem se a ocorrência será ou não gerada. Foi feita também a
	substituição da rotina obterX_seX_geraX.

Motivo:	Necessário realizar essas alterações para corrigir bugs principalmente no que se
	refere a questão de aplicação de filtros (passo anterior ao da validação). Também
	tivemos um foco especial em performance, visto que a mesma precisou ser melhorada
	para não inviabilizar a nova solicitação que diz que a exceção deve verificar todo
	o atendimento.
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dados_tab_selecao_w	pls_tipos_ocor_pck.dados_table_selecao_ocor;

cs_regras_val CURSOR(nr_seq_combinada_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.ie_valida_prest_solic_req
	from	pls_oc_cta_val_pre_sol_req a
	where	a.nr_seq_oc_cta_comb = nr_seq_combinada_pc;

cs_gerar_ocor_imp CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
				dados_regra_pc		pls_tipos_ocor_pck.dados_regra) FOR
	SELECT 	-- Irá obter a sequencia da tabela de seleção para todos os itens daquela conta, então os registros serão atualizados para todos os itens da conta
		-- em apenas um acesso ao SQL e a validação será feita uma conta por vez, mesmo que existam itens na tabela de seleção.
		pls_tipos_ocor_pck.obter_sequencia_selecao(
			null, null, x.nr_seq_conta, nr_id_transacao_pc, 'N', null, dados_regra_pc.ie_excecao, 'V') nr_seq_selecao,
		-- todos os registros são válidos para a ocorrência ou exceção.
		'S' ie_valido,
		x.ds_observacao
	from (	SELECT	distinct
				conta.nr_sequencia nr_seq_conta,
				'O prestador solicitante informado não é o prestador que fez a requisição. ' || pls_tipos_ocor_pck.enter_w ||
				'Prestador requisição: ' || pls_obter_dados_prestador(conta.nr_seq_prestador_req,'N') || pls_tipos_ocor_pck.enter_w ||
				'Prestador atendimento: ' || pls_obter_dados_prestador(conta.nr_seq_prestador_imp, 'N') ds_observacao
			from	pls_oc_cta_selecao_ocor_v	sel,
				pls_conta_ocor_v		conta
			where	sel.nr_id_transacao		= nr_id_transacao_pc
			and	sel.ie_valido			= 'S'
			and	conta.nr_sequencia		= sel.nr_seq_conta
			and	(conta.nr_seq_prestador IS NOT NULL AND conta.nr_seq_prestador::text <> '')
			and	(conta.nr_seq_prestador_req IS NOT NULL AND conta.nr_seq_prestador_req::text <> '')
			and	conta.nr_seq_prestador_req	<> conta.nr_seq_prestador_imp
	) x;

cs_gerar_ocor CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
				dados_regra_pc		pls_tipos_ocor_pck.dados_regra) FOR
	SELECT 	-- Irá obter a sequencia da tabela de seleção para todos os itens daquela conta, então os registros serão atualizados para todos os itens da conta
		-- em apenas um acesso ao SQL e a validação será feita uma conta por vez, mesmo que existam itens na tabela de seleção.
		pls_tipos_ocor_pck.obter_sequencia_selecao(
			null, null, x.nr_seq_conta, nr_id_transacao_pc, 'N', null, dados_regra_pc.ie_excecao, 'V') nr_seq_selecao,
		-- todos os registros são válidos para a ocorrência ou exceção.
		'S' ie_valido,
		x.ds_observacao
	from (	SELECT	distinct
				conta.nr_sequencia nr_seq_conta,
				'O prestador solicitante informado não é o prestador que fez a requisição. ' || pls_tipos_ocor_pck.enter_w ||
				'Prestador requisição: ' || pls_obter_dados_prestador(conta.nr_seq_prestador_req,'N') || pls_tipos_ocor_pck.enter_w ||
				'Prestador atendimento: ' || pls_obter_dados_prestador(conta.nr_seq_prestador, 'N') ds_observacao
			from	pls_oc_cta_selecao_ocor_v	sel,
				pls_conta_ocor_v		conta
			where	sel.nr_id_transacao		= nr_id_transacao_pc
			and	sel.ie_valido			= 'S'
			and	conta.nr_sequencia		= sel.nr_seq_conta
			and	(conta.nr_seq_prestador IS NOT NULL AND conta.nr_seq_prestador::text <> '')
			and	(conta.nr_seq_prestador_req IS NOT NULL AND conta.nr_seq_prestador_req::text <> '')
			and	conta.nr_seq_prestador_req	<> conta.nr_seq_prestador
	) x;
BEGIN

-- Só processa algo com informação válida
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	-- Informações da regra de validação.
	for	rw_regras_val_w in cs_regras_val(dados_regra_p.nr_sequencia) loop

		if (rw_regras_val_w.ie_valida_prest_solic_req = 'S') then

			-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
			CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

			begin

				-- Quando for importação XML tem que olhar para os campos IMP
				if (dados_regra_p.ie_evento = 'IMP') then

					-- Obtém os dados que retornarem do cursor.
					open cs_gerar_ocor_imp(nr_id_transacao_p, dados_regra_p);
					loop
						-- limpar as tabelas a cada execução;
						pls_tipos_ocor_pck.limpar_nested_tables(dados_tab_selecao_w);

						-- Preencher as linhas no retorno
						fetch cs_gerar_ocor_imp
						bulk collect into dados_tab_selecao_w.ds_seqs_selecao,
								dados_tab_selecao_w.ie_valido,
								dados_tab_selecao_w.ds_observacao
						limit pls_util_cta_pck.qt_registro_transacao_w;
						-- abortar quando acabaram as linhas
						exit when dados_tab_selecao_w.ds_seqs_selecao.count = 0;

						-- Mandar os dados para o BD.
						CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
							dados_tab_selecao_w.nr_seq_selecao, dados_tab_selecao_w.ds_seqs_selecao,
							'LISTA', dados_tab_selecao_w.ds_observacao, dados_tab_selecao_w.ie_valido,
							nm_usuario_p);
					end loop;
					close cs_gerar_ocor_imp;
				-- Se não olha para os campos quentes.
				else
					-- Processa o cursor para obter os itens a quem a ocorrência deve ser gerada.
					open cs_gerar_ocor(nr_id_transacao_p, dados_regra_p);
					loop
						-- limpar as tabelas a cada execução;
						pls_tipos_ocor_pck.limpar_nested_tables(dados_tab_selecao_w);

						-- Preencher as linhas no retorno
						fetch cs_gerar_ocor
						bulk collect into dados_tab_selecao_w.ds_seqs_selecao,
								dados_tab_selecao_w.ie_valido,
								dados_tab_selecao_w.ds_observacao
						limit pls_util_cta_pck.qt_registro_transacao_w;
						-- abortar quando acabaram as linhas
						exit when dados_tab_selecao_w.ds_seqs_selecao.count = 0;

						-- Mandar os dados para o BD.
						CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
							dados_tab_selecao_w.nr_seq_selecao, dados_tab_selecao_w.ds_seqs_selecao,
							'LISTA', dados_tab_selecao_w.ds_observacao, dados_tab_selecao_w.ie_valido,
							nm_usuario_p);
					end loop;
					close cs_gerar_ocor;
				end if;
			exception
			when others then
				-- Se deu problema tem que ver se os cursores foram fechados corretamente.
				if (cs_gerar_ocor%isopen) then

					close cs_gerar_ocor;
				end if;

				if (cs_gerar_ocor_imp%isopen) then

					close cs_gerar_ocor_imp;
				end if;

				-- E gravar o log de erro.
				CALL pls_tipos_ocor_pck.trata_erro_sql_dinamico(dados_regra_p, sqlerrm, nr_id_transacao_p, nm_usuario_p);
			end;

			-- seta os registros que serão válidos ou inválidos após o processamento
			CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
		end if;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_61 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

