-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualiza_precaucao_isol_acomp (nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_atendimento_w	bigint;
nr_precaucao_w		bigint;
nr_seq_precaucao_w	bigint;
cd_microorganismo_w	bigint;
cd_topografia_w		bigint;
qt_valida_isolamento_w	bigint;
nr_seq_acomp_w		bigint;

ie_entrou_cursor_w	varchar(1) := 'N';
ie_copia_data_fim_w	varchar(1);

cd_pessoa_fisica_w	varchar(10);
dt_entrada_ww		timestamp;
dt_entrada_w		timestamp;
dt_alta_w		timestamp;
dt_saida_real_w		timestamp;

ie_tipo_atendimento_w	integer;
ie_gerar_alerta_w	varchar(1);
ie_possui_alerta_w	varchar(1);
ie_copia_precaucao_fim_iso_w	varchar(1);
ie_tipo_atendimento_param_w	varchar(255);

C01 CURSOR FOR
	SELECT 	b.nr_seq_precaucao,
		b.nr_sequencia,
		b.dt_inicio,
		b.dt_termino,
		b.dt_registro,
		b.nr_seq_motivo_isol,
		b.ie_situacao,
		b.dt_liberacao,
		b.dt_inativacao,
		b.nm_usuario_inativacao,
		b.ds_justificativa,
		b.cd_microorganismo,
		b.cd_topografia,
		b.dt_final_precaucao,
		b.cd_medico_solic,
		b.nr_seq_movto_termino,
		b.nm_usuario_fim,
		b.nm_usuario_lib_iso,
		b.ds_just_fim_prec,
		b.ds_observacao,
		b.dt_fim_acompanhamento,
		dt_alta,
		dt_saida_real
	from  	atendimento_paciente a,
		atendimento_precaucao b
	where	a.nr_atendimento = b.nr_atendimento
	and 	a.nr_atendimento in (	SELECT	max(c.nr_atendimento)
			        	from	atendimento_paciente c
					where	c.cd_pessoa_fisica = cd_pessoa_fisica_w
					and	c.nr_atendimento <> nr_atendimento_p)
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_w
	and	b.dt_fim_acompanhamento > dt_entrada_ww
	and	((coalesce(b.dt_final_precaucao::text, '') = '') or (ie_copia_precaucao_fim_iso_w = 'S'))
	and	coalesce(b.dt_inativacao::text, '') = ''
	and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
	and coalesce(b.nr_atend_copia::text, '') = '';

c01_w 	c01%rowtype;

C02 CURSOR FOR
	SELECT 	c.cd_microorganismo,
		c.cd_topografia
	from    atend_precaucao_micro c,
		cih_microorganismo d
	where 	c.cd_microorganismo 	= d.cd_microorganismo
	and	nr_seq_precaucao_w 	= c.nr_seq_atend_precaucao
	and	c.nr_seq_atend_precaucao = c01_w.nr_sequencia;


BEGIN
ie_tipo_atendimento_param_w := Obter_param_Usuario(916, 1075, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_tipo_atendimento_param_w);

select	max(dt_entrada),
	max(cd_pessoa_fisica),
	max(ie_tipo_atendimento)
into STRICT	dt_entrada_ww,
	cd_pessoa_fisica_w,
	ie_tipo_atendimento_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_p;

If (obter_se_contido(ie_tipo_atendimento_w,ie_tipo_atendimento_param_w) = 'S') then

	ie_copia_precaucao_fim_iso_w := Obter_param_Usuario(916, 1074, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_copia_precaucao_fim_iso_w);
	ie_copia_data_fim_w := Obter_param_Usuario(916, 962, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_copia_data_fim_w);
	If (ie_copia_data_fim_w = 'S') and (obter_funcao_ativa <> 916) then
		ie_copia_data_fim_w := 'N';
	end if;

	dt_entrada_w := dt_entrada_ww;

	open C01;
	loop
	fetch C01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

		ie_entrou_cursor_w := 'S';
		nr_seq_precaucao_w := c01_w.nr_sequencia;

		begin
			select	nr_sequencia
			into STRICT	nr_seq_acomp_w
			from	atendimento_precaucao
			where	nr_atendimento = nr_atendimento_p
			and	dt_fim_acompanhamento = c01_w.dt_fim_acompanhamento  LIMIT 1;

		exception
			when	no_data_found then
				nr_seq_acomp_w := 0;
		end;

		select 	coalesce(max(ie_gerar_alerta),'N')
		into STRICT	ie_gerar_alerta_w
		from 	CIH_PRECAUCAO
		where 	nr_sequencia = c01_w.NR_SEQ_PRECAUCAO;

		If (coalesce(nr_seq_acomp_w, 0) = 0) then
			select	nextval('atendimento_precaucao_seq')
			into STRICT	nr_precaucao_w
			;

			insert into atendimento_precaucao(
				NR_SEQUENCIA,
				DT_ATUALIZACAO,
				NM_USUARIO,
				DT_ATUALIZACAO_NREC,
				NM_USUARIO_NREC,
				NR_SEQ_PRECAUCAO,
				DT_INICIO,
				DT_TERMINO,
				NR_ATENDIMENTO,
				DT_REGISTRO,
				NR_SEQ_MOTIVO_ISOL,
				IE_SITUACAO,
				DT_LIBERACAO,
				DT_INATIVACAO,
				NM_USUARIO_INATIVACAO,
				DS_JUSTIFICATIVA,
				CD_MICROORGANISMO,
				CD_TOPOGRAFIA,
				DT_FINAL_PRECAUCAO,
				CD_MEDICO_SOLIC,
				NR_SEQ_MOVTO_TERMINO,
				NM_USUARIO_FIM,
				NM_USUARIO_LIB_ISO,
				DS_JUST_FIM_PREC,
				DS_OBSERVACAO,
				DT_FIM_ACOMPANHAMENTO)
			values (nr_precaucao_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				c01_w.NR_SEQ_PRECAUCAO,
				dt_entrada_w,
				CASE WHEN ie_copia_data_fim_w='S' THEN  c01_w.DT_TERMINO  ELSE null END ,
				nr_atendimento_p,
				dt_entrada_w,
				c01_w.NR_SEQ_MOTIVO_ISOL,
				c01_w.IE_SITUACAO,
				CASE WHEN coalesce(c01_w.DT_LIBERACAO::text, '') = '' THEN  null  ELSE dt_entrada_w END ,
				c01_w.DT_INATIVACAO,
				c01_w.NM_USUARIO_INATIVACAO,
				c01_w.DS_JUSTIFICATIVA,
				c01_w.CD_MICROORGANISMO,
				c01_w.CD_TOPOGRAFIA,
				CASE WHEN ie_copia_data_fim_w='S' THEN  c01_w.DT_FINAL_PRECAUCAO  ELSE null END ,
				c01_w.CD_MEDICO_SOLIC,
				c01_w.NR_SEQ_MOVTO_TERMINO,
				CASE WHEN ie_copia_data_fim_w='S' THEN  c01_w.NM_USUARIO_FIM  ELSE null END ,
				c01_w.NM_USUARIO_LIB_ISO,
				CASE WHEN ie_copia_data_fim_w='S' THEN  c01_w.DS_JUST_FIM_PREC  ELSE null END ,
				c01_w.DS_OBSERVACAO,
				c01_w.DT_FIM_ACOMPANHAMENTO);


			update	atendimento_precaucao
			set	nr_atend_copia = nr_atendimento_p
			where	nr_sequencia = nr_seq_precaucao_w;

			open C02;
			loop
			fetch C02 into
				cd_microorganismo_w,
				cd_topografia_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				insert into atend_precaucao_micro(
					NR_SEQUENCIA,
					DT_ATUALIZACAO,
					NM_USUARIO,
					DT_ATUALIZACAO_NREC,
					NM_USUARIO_NREC,
					NR_SEQ_ATEND_PRECAUCAO,
					CD_MICROORGANISMO,
					CD_TOPOGRAFIA)
				values (nextval('atend_precaucao_micro_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_precaucao_w,
					cd_microorganismo_w,
					cd_topografia_w);
				end;
			end loop;
			close C02;


			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_possui_alerta_w
			from	atendimento_alerta
			where	nr_seq_precaucao = nr_precaucao_w;

			if (ie_gerar_alerta_w <> 'N') and (ie_possui_alerta_w = 'N') then
				CALL inserir_alerta_precaucao(nr_precaucao_w,nm_usuario_p);
			end if;


			begin
				update	atendimento_precaucao
				set	dt_termino = coalesce(dt_saida_real_w, coalesce(dt_alta_w, dt_termino))
				where	nr_sequencia = nr_seq_precaucao_w;
			exception
				when	others then
					null;
			end;
		end if;
	end loop;
	close C01;

	If (ie_entrou_cursor_w = 'S') then
		update	atendimento_paciente
		set	ie_paciente_isolado = 'S'
		where	nr_atendimento = nr_atendimento_p;
	end if;

	commit;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualiza_precaucao_isol_acomp (nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

