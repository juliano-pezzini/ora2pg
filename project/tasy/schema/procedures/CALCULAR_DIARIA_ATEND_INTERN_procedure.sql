-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_diaria_atend_intern (CD_ESTABELECIMENTO_P bigint, NR_ATENDIMENTO_P bigint, DT_ENTRADA_P timestamp, DT_PARAMETRO_P timestamp, NM_USUARIO_P text, IE_DIFERENCA_DIARIA_P text, IE_DIARIA_ACOMPANHANTE_P text) AS $body$
DECLARE
		
 
ds_erro_w			varchar(255);
DT_ATUALIZACAO_W    	timestamp := clock_timestamp();

vl_Categoria_w			double precision;
vl_diferenca_w			double precision;
ie_calculo_diferenca_w		varchar(1);

 
cd_setor_atendimento_ler_w	integer;
dt_entrada_unidade_ler_w	timestamp;
cd_tipo_acomodacao_ler_w	smallint;
dt_saida_unidade_ler_w		timestamp;
qt_tempo_Setor_ler_w		double precision;
cd_tipo_acomod_unid_ler_w	smallint;
cd_classif_setor_ler_w		varchar(02);
cd_procedimento_ler_w		bigint;
ie_origem_proced_ler_w		bigint;
vl_proc_diaria_ler_w		double precision	:= 0;
vl_proc_diaria_w		double precision	:= 0;

cd_classif_setor_w		varchar(02);
cd_setor_atendimento_w 	integer;
dt_entrada_unidade_w  	timestamp;
cd_tipo_acomodacao_w		smallint;
dt_saida_unidade_w		timestamp;
qt_tempo_Setor_w		double precision;

cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_procedimento_dif_w		bigint;
ie_origem_proced_dif_w		bigint;
hr_virada_diaria_w		timestamp;
hr_margem_ant_virdia_w		timestamp;
hr_margem_pos_virdia_w		timestamp;
dt_margem_ant_w			timestamp;
dt_margem_pos_w			timestamp;
dt_virada_w			timestamp;
dt_seguinte_w	    	timestamp;
cd_convenio_partic_w		integer := 0;
cd_categoria_partic_w		varchar(10) := '';
cd_convenio_w      	integer := 0;
cd_categoria_w			varchar(10) := '';
nr_doc_convenio_w    	varchar(20) := '';
ie_forma_calculo_diaria_w	varchar(1);
cd_tipo_acomod_conv_w		smallint;
cd_tipo_acomod_unid_w		smallint;
dt_diaria_w			timestamp;
dt_inicio_diaria_w		timestamp;
dt_final_diaria_w		timestamp;

nr_acomp_convenio_w		smallint;
nr_acomp_Setor_w		smallint;
nr_acomp_Unidade_w		smallint;
nr_acomp_Unidade_Ler_w		smallint;
cd_procedimento_acomp_w		bigint;
ie_origem_proced_acomp_w	bigint;
cd_nivel_convenio_w		smallint;
cd_nivel_setor_w		smallint;
ie_calcula_diaria_apos_vig_w	varchar(01) := 'N';

qt_dia_int_w			bigint;

nr_sequencia_w			bigint;
dt_diaria_proc_w		timestamp;
dt_alta_pac_w			timestamp;
ie_calcular_dif_diaria_w	varchar(1);

ie_calcula_diaria_w		varchar(1)	:= 'S';
ie_tipo_atendimento_w		smallint;
ie_paciente_isolado_w		varchar(1);
cd_plano_w			varchar(10);
ie_sexo_w			varchar(1);
nr_seq_proced_int_w		bigint;
nr_seq_proced_int_ler_w		bigint;
nr_seq_proced_int_conv_w	bigint;
cd_procedimento_ww		bigint;
ie_origem_proced_ww		bigint;

C10 CURSOR FOR 
SELECT	a.cd_setor_atendimento, 
	a.dt_entrada_unidade, 
	coalesce(a.dt_saida_unidade,to_date('2999','yyyy')), 
	a.cd_tipo_acomodacao, 
	b.cd_classif_setor, 
	coalesce(a.nr_acompanhante,0), 
	c.hr_virada_diaria, 
	c.cd_procedimento, 
	c.ie_origem_proced, 
	coalesce(a.ie_calcular_dif_diaria,IE_DIFERENCA_DIARIA_P), 
	c.nr_seq_proced_int 
from	tipo_acomodacao c, 
	setor_atendimento b, 
	atend_paciente_unidade a	 
where (a.cd_setor_atendimento	= b.cd_setor_atendimento) 
and (b.cd_classif_setor in (3,4,8)) 
and (coalesce(a.dt_saida_unidade,to_date('2999','yyyy')) > dt_parametro_p -1) 
and (a.dt_entrada_unidade	<= dt_parametro_p) 
and (a.nr_atendimento	= nr_atendimento_p) 
and (a.cd_tipo_acomodacao	= c.cd_tipo_acomodacao) 
order by 2;

C20 CURSOR FOR 
SELECT	cd_procedimento, 
	ie_origem_proced, 
	coalesce(cd_procedimento_acomp, ie_origem_proced_w), 
	coalesce(ie_origem_proced_acomp, ie_origem_proced_acomp_w), 
	nr_seq_proced_int 
from	tipo_acomod_convenio 
where	cd_tipo_acomodacao	= cd_tipo_acomodacao_w 
and	((coalesce(cd_convenio::text, '') = '') or (cd_convenio	= cd_convenio_w)) 
and	qt_dia_int_w between qt_dia_inicio and qt_dia_fim 
and 	coalesce(ie_sexo, coalesce(ie_sexo_w, 'I')) = coalesce(ie_sexo_w,'I') 
order by qt_dia_inicio;

C30 CURSOR FOR 
SELECT	coalesce(ie_calcula,'S') 
from	tipo_atend_diaria 
where	ie_tipo_atendimento = ie_tipo_atendimento_w 
and	cd_estabelecimento	= cd_estabelecimento_p 
and	((coalesce(cd_convenio::text, '') = '') or (cd_convenio = cd_convenio_w)) 
order by 
	coalesce(cd_convenio,0) desc;


BEGIN 
 
select 	coalesce(max(ie_tipo_atendimento),0) 
into STRICT	ie_tipo_atendimento_w 
from	atendimento_paciente 
where	nr_atendimento = nr_atendimento_p;
 
select	coalesce(max(ie_diaria_apos_vig),'N') 
into STRICT	ie_calcula_diaria_apos_vig_w 
from	parametro_faturamento 
where	cd_estabelecimento	= CD_ESTABELECIMENTO_P;
 
qt_dia_int_w := trunc(dt_parametro_p,'DD') - trunc(dt_entrada_p,'DD');
 
if (qt_dia_int_w < 1) then 
	qt_dia_int_w := 1;
end if;
 
/* Calcular pelo Ultimo Setor(U)/Primeiro(P) ou Maior Tempo(M) */
 
ie_forma_calculo_diaria_w  := 'M';
 
select	max(a.ie_sexo) 
into STRICT	ie_sexo_w 
from	pessoa_fisica a, 
	atendimento_paciente b 
where	b.cd_pessoa_fisica	= a.cd_pessoa_fisica 
and	b.nr_atendimento 	= nr_atendimento_p;
 
/* Calculo de diarias */
 
begin 
select	d.cd_convenio, 
	d.cd_categoria, 
	d.nr_doc_convenio, 
	d.cd_tipo_acomodacao, 
	coalesce(d.nr_acompanhante,0), 
	d.cd_plano_convenio 
into STRICT	cd_convenio_w, 
	cd_categoria_w, 
	nr_doc_convenio_w, 
	cd_tipo_acomod_conv_w, 
	nr_acomp_convenio_w, 
	cd_plano_w 
from 	convenio c, 
	atend_categoria_convenio d 
where 	d.nr_atendimento	= nr_atendimento_p 
and 	d.cd_convenio		= c.cd_convenio 
and	d.dt_inicio_vigencia	= ( 
	SELECT 	max(dt_inicio_vigencia) 
	from 	atend_categoria_convenio b 
	where	nr_atendimento	= nr_atendimento_p 
	and	dt_parametro_p 	between	b.dt_inicio_vigencia and 
		CASE WHEN ie_calcula_diaria_apos_vig_w='N' THEN coalesce(b.dt_final_vigencia, to_date('2999','yyyy'))  ELSE clock_timestamp() + interval '30 days' END ) 
	and 	not exists ( 
		SELECT	x.nr_atendimento 
		from 	procedimento_paciente x	 
		where 	x.nr_atendimento = d.nr_atendimento 
		and	coalesce(x.cd_motivo_exc_conta::text, '') = '' 
		and	x.cd_procedimento in ( 
			select 	distinct(cd_procedimento) 
			from 	tipo_acomodacao 
			
union
 
			select 	distinct(cd_procedimento) 
			from 	tipo_acomod_convenio 
			where	coalesce(ie_sexo, coalesce(ie_sexo_w, 'I')) = coalesce(ie_sexo_w, 'I')) 
		and	to_char(x.dt_procedimento,'dd/mm/yyyy') = to_char(dt_parametro_p,'dd/mm/yyyy'));
exception 
when others then 
	cd_convenio_w		:= 0;
end;
 
qt_tempo_setor_w		:= 0;
cd_setor_atendimento_w  	:= 0;
nr_acomp_Unidade_w		:= 0;
 
OPEN C30;
LOOP 
FETCH C30 into 
	ie_calcula_diaria_w;
EXIT WHEN NOT FOUND; /* apply on c30 */
	begin 
	if (ie_calcula_diaria_w	= 'N') then 
		cd_convenio_w	:= 0;
	end if;
	end;
END LOOP;
CLOSE C30;
 
if (cd_convenio_w > 0) then 
	begin 
	select	max(ie_regra) 
	into STRICT	ie_forma_calculo_diaria_w 
	from	convenio_regra_diaria 
	where	cd_convenio		= cd_convenio_w 
	and	cd_estabelecimento	= cd_estabelecimento_p;
	if (coalesce(ie_forma_calculo_diaria_w::text, '') = '') then 
		select	coalesce(max(ie_regra),'M') 
		into STRICT	ie_forma_calculo_diaria_w 
		from	convenio_regra_diaria 
		where	coalesce(cd_convenio::text, '') = '' 
		and	cd_estabelecimento	= cd_estabelecimento_p;
	end if;
	OPEN C10;
	LOOP 
	FETCH C10 into 
		cd_setor_atendimento_Ler_w, 
		dt_entrada_unidade_Ler_w, 
		dt_saida_unidade_Ler_w, 
		cd_tipo_acomod_unid_ler_w, 
		cd_classif_setor_ler_w, 
		nr_acomp_Unidade_ler_w, 
		hr_virada_diaria_w, 
		cd_procedimento_ler_w, 
		ie_origem_proced_ler_w, 
		ie_calcular_dif_diaria_w, 
		nr_seq_proced_int_ler_w;
	EXIT WHEN NOT FOUND; /* apply on c10 */
		begin 
		if (coalesce(hr_virada_diaria_w::text, '') = '') then 
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(182937, 
					'NR_ATENDIMENTO='||nr_atendimento_p || ';CD_SETOR_ATENDIMENTO='||cd_setor_atendimento_Ler_w || ';CD_TIPO_ACOMODACAO='|| cd_tipo_acomod_unid_ler_w);
			/*'A hora de virada diária está nula. Atendimento : ' || nr_atendimento_p || ' Setor: ' || cd_setor_atendimento_Ler_w || ' Acomod.: ' || cd_tipo_acomod_unid_ler_w);*/
 
		end if;
		dt_final_diaria_w	:= To_Date(To_char(dt_parametro_p,'dd/mm/yyyy') || ' ' || 
					to_char(hr_virada_diaria_w,'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');
		dt_inicio_diaria_w	:= dt_final_diaria_w - 1;
 
/*		if	(dt_entrada_unidade_ler_w > dt_inicio_diaria_w) then 
			dt_inicio_diaria_w		:= dt_entrada_unidade_ler_w; 
		end if;*/
 
		if (dt_saida_unidade_ler_w < dt_final_diaria_w) then 
			dt_final_diaria_w		:= dt_saida_unidade_ler_w;
		end if;
		qt_tempo_setor_Ler_w 		:= dt_final_diaria_w - dt_inicio_diaria_w;
 
		if 	((ie_forma_calculo_diaria_w in ('U','P')) or (qt_tempo_setor_Ler_w > qt_tempo_setor_w)) and (ie_forma_calculo_diaria_w <> 'V') then 
			begin 
			cd_setor_atendimento_w	:= cd_setor_atendimento_Ler_w;
			dt_entrada_unidade_w		:= dt_entrada_unidade_Ler_w;
			dt_saida_unidade_w		:= dt_saida_unidade_Ler_w;
			qt_tempo_setor_w		:= qt_tempo_setor_Ler_w;
			cd_tipo_acomod_unid_w	:= cd_tipo_acomod_unid_ler_w;
			cd_classif_setor_w		:= cd_classif_setor_ler_w;
			nr_acomp_Unidade_w		:= nr_acomp_Unidade_ler_w;
			end;
		end if;
		if (ie_forma_calculo_diaria_w = 'P') then 
			exit;
		end if;
 
		if (ie_forma_calculo_diaria_w = 'V') then 
			if (coalesce(cd_procedimento_ler_w,0) = 0) and (coalesce(nr_seq_proced_int_ler_w,0) > 0) then 
				SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proced_int_ler_w, CD_ESTABELECIMENTO_P, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_Ler_w, cd_procedimento_ler_w, ie_origem_proced_ler_w, null, dt_parametro_p, cd_tipo_acomod_conv_w, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_ler_w, ie_origem_proced_ler_w;
			end if;
			vl_proc_diaria_ler_w	:= Obter_Preco_Procedimento(	 
								cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, dt_parametro_p, cd_procedimento_ler_w, 
								ie_origem_proced_ler_w, cd_tipo_acomod_unid_ler_w, 1, cd_setor_atendimento_Ler_w, null, null,		 
 
	 
								null, null, null, null, 'P');
			if (vl_proc_diaria_ler_w	> vl_proc_diaria_w) then 
				begin 
				vl_proc_diaria_w	:= vl_proc_diaria_ler_w;
				cd_setor_atendimento_w	:= cd_setor_atendimento_Ler_w;
				dt_entrada_unidade_w	:= dt_entrada_unidade_Ler_w;
				dt_saida_unidade_w	:= dt_saida_unidade_Ler_w;
				qt_tempo_setor_w	:= qt_tempo_setor_Ler_w;
				cd_tipo_acomod_unid_w	:= cd_tipo_acomod_unid_ler_w;
				cd_classif_setor_w	:= cd_classif_setor_ler_w;
				nr_acomp_Unidade_w	:= nr_acomp_Unidade_ler_w;
				end;
			end if;
		end if;
 
		end;
	END LOOP;
	CLOSE C10;
 
------- Caso o Setor do Paciente é UTI utiliza este senão do Convenio 
------- Caso seja igual Utilizar o do convenio senão o de nivel mais baixo 
	if (cd_classif_setor_w = '4') then 
		cd_tipo_acomodacao_w		:= cd_tipo_acomod_unid_w;
	elsif (cd_tipo_acomod_unid_w = cd_tipo_acomod_conv_w) then 
		cd_tipo_acomodacao_w		:= cd_tipo_acomod_conv_w;
	else 
		begin 
		begin 
		select coalesce(cd_nivel_acomodacao, 0) 
		into STRICT cd_nivel_convenio_w 
		from tipo_acomodacao 
		where cd_tipo_acomodacao = cd_tipo_acomod_conv_w;
		exception 
			when others then 
				cd_nivel_convenio_w := 0;
		end;
		begin 
		select coalesce(cd_nivel_acomodacao, 0) 
		into STRICT cd_nivel_setor_w 
		from tipo_acomodacao 
		where cd_tipo_acomodacao = cd_tipo_acomod_unid_w;
		exception 
			when others then 
				cd_nivel_setor_w	:= 0;
		end;
		if (cd_nivel_setor_w < cd_nivel_convenio_w) then 
			cd_tipo_acomodacao_w		:= cd_tipo_acomod_unid_w;
		else 
			cd_tipo_acomodacao_w		:= cd_tipo_acomod_conv_w;
		end if;
		end;
	end if;
 
------- Obter Tipo de Acomodação 
 
	if (cd_setor_atendimento_w <> 0) then 
		cd_procedimento_w := 0;
 
		select	max(a.hr_virada_diaria), 
   		  	max(a.hr_margem_ant_virdia), 
     		max(a.hr_margem_pos_virdia), 
			max(a.cd_procedimento), 
			max(a.ie_origem_proced), 
			max(a.cd_procedimento_acomp), 
			max(coalesce(a.ie_origem_proced_acomp,1)), 
			max(a.nr_seq_proced_int) 
		into STRICT	hr_virada_diaria_w, 
			hr_margem_ant_virdia_w, 
			hr_margem_pos_virdia_w, 
			cd_procedimento_w, 
			ie_origem_proced_w, 
			cd_procedimento_acomp_w, 
			ie_origem_proced_acomp_w, 
			nr_seq_proced_int_w 
		from	tipo_acomodacao a 
		where	a.cd_tipo_acomodacao 	= cd_tipo_acomodacao_w;
		 
		if (coalesce(cd_procedimento_w,0) > 0) then 
			nr_seq_proced_int_w	:= null;
		elsif (coalesce(cd_procedimento_w,0) = 0) and (coalesce(nr_seq_proced_int_w,0) > 0) then 
			SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proced_int_w, CD_ESTABELECIMENTO_P, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, null, dt_parametro_p, cd_tipo_acomod_conv_w, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
		end if;
 
		RAISE NOTICE '1 %', cd_procedimento_w;
		RAISE NOTICE '1 %', cd_tipo_acomodacao_w;
		 
		cd_procedimento_ww		:= 0;
		nr_seq_proced_int_conv_w	:= 0;
 
		open C20;
		loop 
		fetch C20 into	 
			cd_procedimento_ww, 
			ie_origem_proced_ww, 
			cd_procedimento_acomp_w, 
			ie_origem_proced_acomp_w, 
			nr_seq_proced_int_conv_w;
		EXIT WHEN NOT FOUND; /* apply on C20 */
			begin 
			cd_procedimento_ww		:= cd_procedimento_ww;
			ie_origem_proced_ww		:= ie_origem_proced_ww;
			cd_procedimento_acomp_w		:= cd_procedimento_acomp_w;
			ie_origem_proced_acomp_w	:= ie_origem_proced_acomp_w;
			nr_seq_proced_int_conv_w	:= nr_seq_proced_int_conv_w;
			end;
		end loop;
		close C20;
		 
		if (coalesce(cd_procedimento_ww,0) > 0) then 
			nr_seq_proced_int_w	:= null;
			cd_procedimento_w	:= cd_procedimento_ww;
			ie_origem_proced_w	:= ie_origem_proced_ww;
		elsif (coalesce(cd_procedimento_ww,0) = 0) and (coalesce(nr_seq_proced_int_conv_w,0) > 0) then 
			nr_seq_proced_int_w:= nr_seq_proced_int_conv_w;
			SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proced_int_conv_w, CD_ESTABELECIMENTO_P, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, null, dt_parametro_p, cd_tipo_acomod_conv_w, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;		
		end if;
		 
		RAISE NOTICE '2 %', cd_procedimento_w;
	end if;
 
 
------- Tratar Margens (Anterior e Posterior) 
	if (cd_procedimento_w <> 0) then 
		begin 
   	if (to_char(dt_entrada_p,'dd/mm/yyyy') <> 
      		to_char(dt_entrada_unidade_w,'dd/mm/yyyy')) then 
			dt_margem_ant_w := To_Date((To_Char(dt_parametro_p, 
      		       'dd/mm/yyyy')||To_Char(hr_virada_diaria_w, 
            		 'hh24:mi:ss')), 'DD/MM/YYYYHH24:MI:SS');
		else 
			dt_margem_ant_w := To_Date((To_Char(dt_parametro_p, 
             		'dd/mm/yyyy')||To_Char(hr_margem_ant_virdia_w, 
             	 	'hh24:mi:ss')), 'DD/MM/YYYYHH24:MI:SS');
		end if;
		dt_margem_pos_w := To_Date((To_Char(dt_parametro_p, 
             		'dd/mm/yyyy')||To_Char(hr_margem_pos_virdia_w, 
             		'hh24:mi:ss')), 'DD/MM/YYYYHH24:MI:SS');
 
		dt_virada_w   := To_Date((To_Char(dt_parametro_p, 
             		'dd/mm/yyyy')||To_Char(hr_virada_diaria_w, 
             		'hh24:mi:ss')), 'DD/MM/YYYYHH24:MI:SS');
   	dt_seguinte_w  := dt_virada_w + 1;
		end;
	end if;
 
 
 
------- Calculo da Diária 
	if (cd_procedimento_w <> 0) then 
		begin 
		if (dt_virada_w < dt_entrada_unidade_w) then 
			dt_diaria_w	:= dt_entrada_unidade_w;
		else 
     		dt_diaria_w	:= dt_virada_w;
		end if;
		end;
	end if;
 
	if (cd_procedimento_w <> 0) then 
		begin 
		 
   	   	CALL Gravar_Diaria(nr_atendimento_p, 
            dt_entrada_unidade_w, 
            cd_procedimento_w, 
			ie_origem_proced_w, 
	        dt_diaria_w, 
            cd_convenio_w, 
            cd_categoria_w, 
            nr_doc_convenio_w, 
            null, 
			null, 
            NM_USUARIO_P, 
            cd_setor_atendimento_w, 
			0, 
			1, 'I', 
			nr_seq_proced_int_w);
 
 
		select	max(dt_alta) 
		into STRICT	dt_alta_pac_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_p;
		 
		if (coalesce(dt_alta_pac_w::text, '') = '') or (trunc(dt_alta_pac_w,'dd') <> trunc(dt_diaria_w,'dd')) then 
			dt_diaria_proc_w		:= dt_diaria_w;
		else 
			dt_diaria_proc_w		:= dt_alta_pac_w;
		end if;
 
 
		select max(nr_sequencia) 
		into STRICT nr_sequencia_w 
		from procedimento_paciente 
		where nr_atendimento = nr_atendimento_p 
		 and dt_entrada_unidade = dt_entrada_unidade_w 
		 and cd_procedimento = cd_procedimento_w 
		 and dt_procedimento = dt_diaria_proc_w 
		 and ie_origem_proced = ie_origem_proced_w 
		 and coalesce(cd_motivo_exc_conta::text, '') = '' 
		 and cd_setor_atendimento = cd_setor_atendimento_w;
 
		/*Edilson em 24/03/06 OS 31345 Coloquei aqui e tirei da Calcular_Pac_Internado*/
 
		CALL Gerar_lancamento_automatico( 
			nr_atendimento_p, 
			null, 
			82, 
			nm_usuario_p, 
			nr_sequencia_w,null,null,null,null,null);
		end;
	end if;
 
 
------- Calculo da Diferença da Diária 
 
	if (ie_diferenca_diaria_p = 'S') and (ie_calcular_dif_diaria_w = 'S') and (cd_classif_setor_w = '3') 	and (cd_tipo_acomod_conv_w <> cd_tipo_acomod_unid_w) then 
		begin 
		 
		select 	coalesce(max(ie_paciente_isolado),'A') 
		into STRICT	ie_paciente_isolado_w 
		from 	atendimento_paciente 
		where 	nr_atendimento = nr_atendimento_p;
		 
		SELECT * FROM Calcular_Diferenca_Diaria( 
				cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_tipo_acomod_conv_w, cd_tipo_acomod_unid_w, dt_parametro_p, qt_dia_int_w, ie_paciente_isolado_w, cd_procedimento_dif_w, ie_origem_proced_dif_w, vl_Categoria_w, vl_diferenca_w, ie_calculo_diferenca_w) INTO STRICT cd_procedimento_dif_w, ie_origem_proced_dif_w, vl_Categoria_w, vl_diferenca_w, ie_calculo_diferenca_w;
 
		if (vl_diferenca_w > 0) then 
			begin 
			SELECT * FROM obter_convenio_particular(cd_estabelecimento_p, cd_convenio_partic_w, cd_categoria_partic_w) INTO STRICT cd_convenio_partic_w, cd_categoria_partic_w;
			if (ie_calculo_diferenca_w = 'V') or (ie_calculo_diferenca_w	= 'P') then 
	  			vl_diferenca_w	:= null;
			end if;
  			CALL Gravar_Diaria(nr_atendimento_p, 
				dt_entrada_unidade_w, 
				cd_procedimento_dif_w, 
				ie_origem_proced_dif_w, 
				dt_diaria_w, 
				cd_convenio_partic_w, 
				cd_categoria_partic_w, 
				nr_doc_convenio_w, 
				null, 
				null, 
				NM_USUARIO_P, 
				cd_setor_atendimento_w, 
				vl_diferenca_w, 
				1, 'I', 
				null);
			end;
		end if;
		end;
	end if;
 
 
------- Calculo da Diária do Acompanhante 
 
	if (ie_diaria_acompanhante_p = 'S') then 
		begin 
		begin 
		select count(*) 
		into STRICT nr_acomp_Setor_w 
		from atendimento_acompanhante 
		where nr_atendimento	= nr_atendimento_p 
		 and dt_acompanhante	between dt_parametro_p -1 and dt_parametro_p;
		exception 
			when others then 
				nr_acomp_setor_w	:= 0;
		end;
		if (nr_acomp_setor_w < nr_acomp_unidade_w) then 
			nr_acomp_setor_w	:= nr_acomp_unidade_w;
		end if;
		if (nr_acomp_setor_w > 0) then 
			begin 
------- Gravar diaria acompanhante que o convenio paga 
			if (nr_acomp_convenio_w > 0) then 
	  			CALL Gravar_Diaria(nr_atendimento_p, 
					dt_entrada_unidade_w, 
					cd_procedimento_acomp_w, 
					ie_origem_proced_acomp_w, 
					dt_diaria_w, 
					cd_convenio_w, 
					cd_categoria_w, 
					nr_doc_convenio_w, 
					null, 
					null, 
					NM_USUARIO_P, 
 					cd_setor_atendimento_w, 
					null, 
					nr_acomp_convenio_w, 'I', 
					null);
			end if;
------- Gravar diaria acompanhante que o paciente paga 
			if (nr_acomp_setor_w > nr_acomp_convenio_w) then 
				begin 
				SELECT * FROM obter_convenio_particular(cd_estabelecimento_p, cd_convenio_partic_w, cd_categoria_partic_w) INTO STRICT cd_convenio_partic_w, cd_categoria_partic_w;	  			
				begin 
				select 	 
					coalesce(b.cd_procedimento_acomp, a.cd_procedimento_acomp), 
					coalesce(b.ie_origem_proced_acomp, a.ie_origem_proced_acomp) 
				into STRICT 
					cd_procedimento_acomp_w, 
					ie_origem_proced_acomp_w 
				FROM tipo_acomodacao a
LEFT OUTER JOIN tipo_acomod_convenio b ON (a.cd_tipo_acomodacao = b.cd_tipo_acomodacao AND cd_convenio_partic_w = b.cd_convenio)
WHERE a.cd_tipo_acomodacao 		= cd_tipo_acomod_unid_w   and coalesce(ie_sexo, coalesce(ie_sexo_w, 'I')) = coalesce(ie_sexo_w, 'I');
				exception 
					when others then	 
						cd_procedimento_acomp_w := 0;
				end;
 
				if (cd_procedimento_acomp_w > 0) then 
					CALL Gravar_Diaria(nr_atendimento_p, 
						dt_entrada_unidade_w, 
						cd_procedimento_acomp_w, 
						ie_origem_proced_acomp_w, 
						dt_diaria_w + 1/1440, 
						cd_convenio_partic_w, 
						cd_categoria_partic_w, 
						nr_doc_convenio_w, 
						null, 
						null, 
						NM_USUARIO_P, 
 						cd_setor_atendimento_w, 
						null, 
						nr_acomp_setor_w - nr_acomp_convenio_w, 'I', 
						null);
				end if;
				end;
			end if;
			end;
		end if;
		end;
	end if;
	commit;
	END;
end if;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_diaria_atend_intern (CD_ESTABELECIMENTO_P bigint, NR_ATENDIMENTO_P bigint, DT_ENTRADA_P timestamp, DT_PARAMETRO_P timestamp, NM_USUARIO_P text, IE_DIFERENCA_DIARIA_P text, IE_DIARIA_ACOMPANHANTE_P text) FROM PUBLIC;

