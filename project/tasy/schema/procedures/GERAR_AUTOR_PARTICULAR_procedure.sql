-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_autor_particular (nr_atendimento_p bigint, nr_seq_material_p bigint, nr_seq_proced_p bigint, nm_usuario_p text, nr_seq_autor_gerada_p INOUT bigint) AS $body$
DECLARE


nr_seq_estagio_w	bigint;
cd_medico_w		varchar(10);
cd_convenio_partic_w	integer;
cd_categoria_partic_w	varchar(10);
cd_estabelecimento_w	smallint;
ie_tipo_autorizacao_w	varchar(4);
nr_sequencia_w		bigint	:= null;
cd_material_w		integer;
qt_material_w		double precision;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
qt_procedimento_w	double precision;
nr_seq_proc_interno_w	bigint;
nr_seq_mat_autorizado_w	bigint;
nr_seq_proc_autorizado_w	bigint;
nr_sequencia_autor_w	bigint;
qt_utilizada_w		double precision;
qt_autorizada_w		double precision;
ie_gerar_autorizacao_w	varchar(1)	:= 'N';
cd_pessoa_fisica_w	atendimento_paciente.cd_pessoa_fisica%type;


BEGIN

nr_seq_autor_gerada_p	:= null;

select	min(nr_sequencia)
into STRICT	nr_seq_estagio_w
from	estagio_autorizacao
where	ie_situacao	= 'A'
and	ie_interno	= '1'
and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;

if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then

	select	cd_medico_resp,
		cd_estabelecimento
	into STRICT	cd_medico_w,
		cd_estabelecimento_w
	from	atendimento_paciente
	where	nr_atendimento	= nr_atendimento_p;

	SELECT * FROM obter_convenio_particular(cd_estabelecimento_w, cd_convenio_partic_w, cd_categoria_partic_w) INTO STRICT cd_convenio_partic_w, cd_categoria_partic_w;


	if (nr_seq_material_p IS NOT NULL AND nr_seq_material_p::text <> '') then
		ie_tipo_autorizacao_w	:= '4';

		select	cd_material,
			qt_material
		into STRICT	cd_material_w,
			qt_material_w
		from	material_atend_paciente
		where	nr_sequencia	= nr_seq_material_p;

		/* Verificar se precisa gerar autorização nova */

		select	max(a.nr_sequencia)
		into STRICT	nr_sequencia_autor_w
		from	estagio_autorizacao b,
			autorizacao_convenio a
		where	a.nr_seq_estagio	= b.nr_sequencia
		and	a.nr_atendimento	= nr_atendimento_p
		and	a.ie_tipo_autorizacao	= '4'
		and	b.ie_interno		= '10'
		and	exists (SELECT	1
				from	material_autorizado x
				where	x.nr_sequencia_autor	= a.nr_sequencia
				and	x.cd_material		= cd_material_w)
		and (a.dt_fim_vigencia > clock_timestamp() or coalesce(a.dt_fim_vigencia::text, '') = '');

		/*Se tem autorizacao para o material, consistir quantidade autorizada*/

		if (nr_sequencia_autor_w IS NOT NULL AND nr_sequencia_autor_w::text <> '') then
			select	coalesce(max(qt_autorizada),0)
			into STRICT	qt_autorizada_w
			from	material_autorizado
			where	nr_sequencia_autor	= nr_sequencia_autor_w
			and	cd_material		= cd_material_w;

			if (qt_autorizada_w = 0) then
				/* Se for 0 nem deve consistir */

				ie_gerar_autorizacao_w := 'N';
			else
				select	coalesce(sum(qt_material),0)
				into STRICT	qt_utilizada_w
				from	conta_paciente b,
					material_atend_paciente a
				where	a.nr_interno_conta	= b.nr_interno_conta
				and	b.cd_convenio_parametro	= cd_convenio_partic_w
				and	a.cd_material		= cd_material_w
				and	b.nr_atendimento	= nr_atendimento_p;

				if (qt_utilizada_w > qt_autorizada_w) then
					ie_gerar_autorizacao_w	:= 'S';
				end if;
			end if;
		else
			ie_gerar_autorizacao_w	:= 'S';
		end if;		

	elsif (nr_seq_proced_p IS NOT NULL AND nr_seq_proced_p::text <> '') then
		ie_tipo_autorizacao_w	:= '3';

		select	cd_procedimento,
			ie_origem_proced,
			nr_seq_proc_interno,
			qt_procedimento
		into STRICT	cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_proc_interno_w,
			qt_procedimento_w
		from	procedimento_paciente
		where	nr_sequencia	= nr_seq_proced_p;

		/* Verificar se precisa gerar autorização nova */

		select	max(a.nr_sequencia)
		into STRICT	nr_sequencia_autor_w
		from	estagio_autorizacao b,
			autorizacao_convenio a
		where	a.nr_seq_estagio	= b.nr_sequencia
		and	a.nr_atendimento	= nr_atendimento_p
		and	a.ie_tipo_autorizacao	= '3'
		and	b.ie_interno		= '10'
		and	exists (SELECT	1
				from	procedimento_autorizado x
				where	x.nr_sequencia_autor	= a.nr_sequencia
				and	x.cd_procedimento	= cd_procedimento_w
				and	x.ie_origem_proced	= ie_origem_proced_w)
		and (a.dt_fim_vigencia > clock_timestamp() or coalesce(a.dt_fim_vigencia::text, '') = '');

		/*Se tem autorizacao para o material, consistir quantidade autorizada*/

		if (nr_sequencia_autor_w IS NOT NULL AND nr_sequencia_autor_w::text <> '') then
			select	coalesce(max(qt_autorizada),0)
			into STRICT	qt_autorizada_w
			from	procedimento_autorizado
			where	nr_sequencia_autor	= nr_sequencia_autor_w
			and	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w;

			if (qt_autorizada_w = 0) then
				/* Se for 0 nem deve consistir */

				ie_gerar_autorizacao_w := 'N';
			else
				select	coalesce(sum(qt_procedimento),0)
				into STRICT	qt_utilizada_w
				from	conta_paciente b,
					procedimento_paciente a
				where	a.nr_interno_conta	= b.nr_interno_conta
				and	b.cd_convenio_parametro	= cd_convenio_partic_w
				and	a.cd_procedimento	= cd_procedimento_w
				and	a.ie_origem_proced	= ie_origem_proced_w
				and	b.nr_atendimento	= nr_atendimento_p;

				if (qt_utilizada_w > qt_autorizada_w) then
					ie_gerar_autorizacao_w	:= 'S';
				end if;
			end if;
		else
			ie_gerar_autorizacao_w	:= 'S';
		end if;	
	end if;

	if (ie_gerar_autorizacao_w = 'S') then
	
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_sequencia_w
		from	autorizacao_convenio a
		where (a.nr_seq_estagio = nr_seq_estagio_w or coalesce(a.nr_seq_estagio::text, '') = '')
		and	a.cd_convenio		= cd_convenio_partic_w
		and	a.ie_tipo_autorizacao	= ie_tipo_autorizacao_w
		and	a.nr_atendimento	= nr_atendimento_p;
		
		if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
			select	cd_pessoa_fisica
			into STRICT	cd_pessoa_fisica_w
			from	atendimento_paciente
			where	nr_atendimento	= nr_atendimento_p;
		end if;

		if (nr_sequencia_w = 0) then

			select	nextval('autorizacao_convenio_seq')
			into STRICT	nr_sequencia_w
			;

			insert	into	autorizacao_convenio(nr_sequencia,
					nr_atendimento,
					dt_autorizacao,
					cd_convenio,
					dt_atualizacao,
					nm_usuario,
					dt_inicio_vigencia,
					cd_medico_solicitante,
					ie_tipo_autorizacao,
					nr_seq_estagio,
					ie_tipo_dia,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_pessoa_fisica)
				values (nr_sequencia_w,
					nr_atendimento_p,
					clock_timestamp(),
					cd_convenio_partic_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					cd_medico_w,
					ie_tipo_autorizacao_w,
					nr_seq_estagio_w,
					'C',
					clock_timestamp(),
					nm_usuario_p,
					cd_pessoa_fisica_w);
		end if;


		if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
	
			select	max(nr_sequencia)
			into STRICT	nr_seq_mat_autorizado_w
			from	material_autorizado
			where	cd_material		= cd_material_w
			and	nr_sequencia_autor	= nr_sequencia_w;
	
			if (coalesce(nr_seq_mat_autorizado_w::text, '') = '') then

				select	nextval('material_autorizado_seq')
				into STRICT	nr_seq_mat_autorizado_w
				;
	
				insert	into	material_autorizado(nr_sequencia,
					nr_sequencia_autor,
					nm_usuario,
					dt_atualizacao,
					cd_material,
					qt_solicitada,
					qt_autorizada)
				values (nr_seq_mat_autorizado_w,
					nr_sequencia_w,
					nm_usuario_p,
					clock_timestamp(),
					cd_material_w,
					qt_material_w,
					0);
			else
				update	material_autorizado
				set	qt_solicitada	= coalesce(qt_solicitada,0) + coalesce(qt_material_w,0),
					dt_atualizacao 	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia	= nr_seq_mat_autorizado_w;
			end if;

			update	material_atend_paciente
			set	nr_seq_mat_autor	= nr_seq_mat_autorizado_w
			where	nr_sequencia		= nr_seq_material_p;
	
		elsif (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
	
			select	max(nr_sequencia)
			into STRICT	nr_seq_proc_autorizado_w
			from	procedimento_autorizado
			where	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w
			and	nr_sequencia_autor	= nr_sequencia_w;
	
			if (coalesce(nr_seq_proc_autorizado_w::text, '') = '') then
				select	nextval('procedimento_autorizado_seq')
				into STRICT	nr_seq_proc_autorizado_w
				;

				insert	into	procedimento_autorizado(nr_sequencia,
					nr_sequencia_autor,
					nm_usuario,
					dt_atualizacao,
					cd_procedimento,
					ie_origem_proced,
					nr_seq_proc_interno,
					qt_solicitada,
					qt_autorizada)
				values (nr_seq_proc_autorizado_w,
					nr_sequencia_w,
					nm_usuario_p,
					clock_timestamp(),
					cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_proc_interno_w,
					qt_procedimento_w,
					0);
			else
				update	procedimento_autorizado
				set	qt_solicitada	= coalesce(qt_solicitada,0) + coalesce(qt_procedimento_w,0),
					dt_atualizacao 	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia	= nr_seq_proc_autorizado_w; 	
			end if;

			update	procedimento_paciente
			set	nr_seq_proc_autor	= nr_seq_proc_autorizado_w
			where	nr_sequencia		= nr_seq_proced_p;	
		end if;
	end if;	
end if;		 		

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_autor_particular (nr_atendimento_p bigint, nr_seq_material_p bigint, nr_seq_proced_p bigint, nm_usuario_p text, nr_seq_autor_gerada_p INOUT bigint) FROM PUBLIC;

