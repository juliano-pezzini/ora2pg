-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_rescindir_contrato_notific ( nr_seq_notific_pagador_p bigint, dt_rescisao_p timestamp, dt_limite_utilizacao_p timestamp, nr_seq_motivo_p bigint, ds_observacao_p text, nr_seq_lote_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Rescindir o pagador/beneficiarios da notificacao selecionada
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
	PLS_RESCINDIR_CONTRATOS_LOTE
	OPS - Controle de notificacoes de atraso
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_erro_w			varchar(255);
ie_rescindiu_w			varchar(1);
ie_commit_w			varchar(1);
ie_rescisao_w			varchar(1);
nr_seq_pagador_w		bigint;
nr_seq_segurado_w		bigint;
qt_liquidados_w			bigint;
nr_seq_lote_w			bigint;
ie_rescisao_pagador_w		varchar(1);
ds_nr_processo_w		varchar(255);
ie_resc_sem_confirm_receb_w	pls_notificacao_regra.ie_exige_confirmacao_receb%type;
ie_rescindir_contrato_benef_w	pls_notificacao_regra.ie_rescinde_contrato%type;
ie_internado_w			varchar(1);
ds_mensagem_w			varchar(4000);
nr_seq_contrato_w		pls_contrato.nr_sequencia%type;
ie_solicitacao_rescisao_w	pls_motivo_cancelamento.ie_solicitacao_rescisao%type;
nr_seq_solic_resc_w		pls_solicitacao_rescisao.nr_sequencia%type;
qt_benef_ativo_w		bigint;
ie_rescindir_contrato_w		varchar(1);

C01 CURSOR FOR
	SELECT	b.nr_seq_pagador
	from	pls_notificacao_item	a,
		pls_notificacao_pagador	b
	where	b.nr_sequencia			= a.nr_seq_notific_pagador
	and	a.nr_seq_notific_pagador	= nr_seq_notific_pagador_p
	and	a.ie_rescindir_contrato		= 'S'
	and	coalesce(b.ie_rescisao,'S')		= 'S'
	and	((b.dt_recebimento_notif IS NOT NULL AND b.dt_recebimento_notif::text <> '' AND b.ie_status <> 'F') or (ie_resc_sem_confirm_receb_w = 'S'))
	group by	b.nr_seq_pagador;

C02 CURSOR(nr_seq_pagador_pc	pls_contrato_pagador.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_segurado,
		CASE WHEN coalesce(nr_seq_titular::text, '') = '' THEN  'T'  ELSE 'D' END  ie_titularidade
	from	pls_segurado
	where	nr_seq_pagador	= nr_seq_pagador_pc
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and (coalesce(dt_rescisao::text, '') = '' or dt_rescisao > clock_timestamp());

c03 CURSOR(nr_seq_segurado_pc	pls_segurado.nr_sequencia%type,
		dt_referencia_pc	timestamp) FOR
	SELECT	cd_guia_referencia,
		dt_alta,
		dt_alta_estimado
	from	table(pls_cta_beneficiario_pck.obter_se_internado(nr_seq_segurado_pc, trunc(dt_referencia_pc,'dd')));

BEGIN

ds_mensagem_w := wheb_mensagem_pck.get_texto(1145863)||': ';

if (coalesce(nr_seq_lote_p::text, '') = '') then
	select	max(nr_seq_lote)
	into STRICT	nr_seq_lote_w
	from	pls_notificacao_pagador
	where	nr_sequencia	= nr_seq_notific_pagador_p;

	ie_commit_w	:= 'S';
else
	nr_seq_lote_w	:= nr_seq_lote_p;
	ie_commit_w	:= 'N';
end if;

select	max(b.nr_seq_contrato)
into STRICT	nr_seq_contrato_w
from	pls_notificacao_pagador a,
	pls_contrato_pagador b
where	b.nr_sequencia = a.nr_seq_pagador
and	a.nr_sequencia = nr_seq_notific_pagador_p;

select	pls_verificar_regra_resc_contr(nr_seq_contrato_w)
into STRICT	ie_rescindir_contrato_benef_w
;

if (ie_rescindir_contrato_benef_w = 'Q') then
	ie_rescindir_contrato_benef_w := 'N';
end if;

select	coalesce(max(a.ie_exige_confirmacao_receb),'N'),
	coalesce(max(a.ie_rescinde_contrato),ie_rescindir_contrato_benef_w)
into STRICT	ie_resc_sem_confirm_receb_w,
	ie_rescindir_contrato_benef_w
from	pls_notificacao_regra a,
	pls_notificacao_lote b
where	a.nr_sequencia	= b.nr_seq_regra
and	b.nr_sequencia	= nr_seq_lote_w;

select	count(*)
into STRICT	qt_liquidados_w
from	pls_notificacao_item	a,
	titulo_receber		b
where	b.nr_titulo = a.nr_titulo
and	a.nr_seq_notific_pagador = nr_seq_notific_pagador_p
and	(b.dt_liquidacao IS NOT NULL AND b.dt_liquidacao::text <> '')
and	b.ie_situacao	<> '6'; -- Lliquidado por perdas
if (qt_liquidados_w = 0) then
	ie_rescindiu_w	:= 'N';

	open C01;
	loop
	fetch C01 into
		nr_seq_pagador_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		--Processo judicial
		begin
		ie_rescisao_pagador_w	:= pls_obter_processo_jud_notif(nr_seq_lote_w, nr_seq_pagador_w, null, 'PR');
		exception
		when others then
			ie_rescisao_pagador_w := 'N';
		end;

		if (ie_rescisao_pagador_w  = 'N') then
			ds_nr_processo_w := pls_obter_processo_jud_notif(nr_seq_lote_w, nr_seq_pagador_w, null, 'NRP');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(337228,'NR_PROCESSO_P=' ||ds_nr_processo_w);
		end if;

		--Internacao
		ie_internado_w	:= 'N';

		for r_c02_w in C02(nr_seq_pagador_w) loop
			begin

			for r_c03_w in C03(r_c02_w.nr_seq_segurado, clock_timestamp()) loop
				begin
				ie_internado_w	:= 'S';
				ds_mensagem_w	:= ds_mensagem_w||chr(13)||wheb_mensagem_pck.get_texto(1145864)||' : '|| r_c02_w.nr_seq_segurado ||' - '|| pls_obter_dados_segurado(r_c02_w.nr_seq_segurado, 'N') ||
						' , Guia :'|| r_c03_w.cd_guia_referencia ||', Alta: '|| r_c03_w.dt_alta ||' , Alta prevista: '|| r_c03_w.dt_alta_estimado;
				end;
			end loop; --C03
			end;
		end loop; --C02
		if (ie_internado_w = 'S') then
			insert into pls_notificacao_lote_log(nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
				nm_usuario, nm_usuario_nrec, nr_seq_lote,
				nr_seq_pagador_exc, ds_log)
				values (nextval('pls_notificacao_lote_log_seq'), clock_timestamp(), clock_timestamp(),
				nm_usuario_p, nm_usuario_p, nr_seq_lote_w,
				nr_seq_pagador_w, substr(ds_mensagem_w, 1, 4000));
		else
			ie_rescindiu_w	:= 'S';

			if (nr_seq_motivo_p IS NOT NULL AND nr_seq_motivo_p::text <> '') then
				select	coalesce(ie_solicitacao_rescisao, 'N')
				into STRICT	ie_solicitacao_rescisao_w
				from	pls_motivo_cancelamento
				where	nr_sequencia = nr_seq_motivo_p;
			else
				ie_solicitacao_rescisao_w := 'N';
			end if;

			if (ie_solicitacao_rescisao_w = 'S') then
				insert	into	pls_solicitacao_rescisao(	nr_sequencia, dt_solicitacao, ie_origem_solicitacao, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, dt_liberacao, ie_status,
						nr_seq_contrato, nr_contrato, dt_rescisao,
						ie_rescindir_contrato, ie_forma_pedido, ds_observacao, nm_usuario_liberacao,
						cd_estabelecimento, nr_seq_notific_pagador)
					values (nextval('pls_solicitacao_rescisao_seq'), clock_timestamp(), 'M', clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, clock_timestamp(), 1,
						nr_seq_contrato_w, pls_obter_dados_contrato(nr_seq_contrato_w,'N'), dt_rescisao_p,
						'P', 8, ds_observacao_p, nm_usuario_p,
						cd_estabelecimento_p, nr_seq_notific_pagador_p)
						returning nr_sequencia into nr_seq_solic_resc_w;

				for r_c02_w in C02(nr_seq_pagador_w) loop
					begin
					insert	into	pls_solic_rescisao_benef(	nr_sequencia, nr_seq_solicitacao, nr_seq_segurado,
							dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
							nm_usuario_nrec, nr_seq_motivo_rescisao, ie_titularidade,
							ie_devolucao_carteira)
						values (nextval('pls_solic_rescisao_benef_seq'), nr_seq_solic_resc_w, r_c02_w.nr_seq_segurado,
							clock_timestamp(), nm_usuario_p, clock_timestamp(),
							nm_usuario_p, nr_seq_motivo_p, r_c02_w.ie_titularidade,
							'N');
					end;
				end loop;
				
				CALL pls_liberar_solic_rescisao(nr_seq_solic_resc_w, 'L', nm_usuario_p, cd_estabelecimento_p, 'N');
				
				select	count(1)
				into STRICT	qt_benef_ativo_w
				from	pls_segurado a
				where	a.nr_seq_contrato	= nr_seq_contrato_w
				and (coalesce(a.dt_rescisao::text, '') = '' or a.dt_rescisao > dt_rescisao_p)
				and	not exists (	SELECT	1
							from	pls_solic_rescisao_benef x
							where	x.nr_seq_segurado	= a.nr_sequencia
							and	x.nr_seq_solicitacao	= nr_seq_solic_resc_w);
							
				if (qt_benef_ativo_w = 0) then
					ie_rescindir_contrato_w	:= ie_rescindir_contrato_benef_w;
				else
					ie_rescindir_contrato_w := 'N';
				end if;
				
				CALL pls_efetivar_solic_rescisao(nr_seq_solic_resc_w, dt_rescisao_p,  ie_rescindir_contrato_w, nm_usuario_p, cd_estabelecimento_p, 'N');
			else
				ds_erro_w := pls_rescindir_contrato(	null, null, nr_seq_pagador_w, null, null, dt_rescisao_p, dt_limite_utilizacao_p, nr_seq_motivo_p, ds_observacao_p, cd_estabelecimento_p, 'S', nm_usuario_p, '', null, ie_rescindir_contrato_benef_w, null, ds_erro_w, nr_seq_notific_pagador_p, 'N', null);
			end if;
		end if;
		end;
	end loop;
	close C01;

	if (ie_rescindiu_w = 'S') then
		update	pls_notificacao_pagador
		set	dt_rescisao		= dt_rescisao_p,
			ie_status_ant		= ie_status,
			ie_status		= 'C',
			nm_usuario_rescisao	= nm_usuario_p,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_sequencia		= nr_seq_notific_pagador_p;
	end if;

	if (coalesce(nr_seq_lote_p::text, '') = '') then
		CALL pls_atualizar_valor_notific(nr_seq_lote_w);
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_rescindir_contrato_notific ( nr_seq_notific_pagador_p bigint, dt_rescisao_p timestamp, dt_limite_utilizacao_p timestamp, nr_seq_motivo_p bigint, ds_observacao_p text, nr_seq_lote_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

