-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_mens_coparticipacao ( nr_seq_mensalidade_seg_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_conta_copartic_w		pls_conta_coparticipacao.nr_sequencia%type;
vl_coparticipacao_w		pls_conta_coparticipacao.vl_coparticipacao%type;
vl_copartic_mens_w		pls_conta_coparticipacao.vl_copartic_mens%type;
vl_copartic_item_w		pls_conta_coparticipacao.vl_coparticipacao%type;
dt_competencia_mens_w		pls_conta_coparticipacao.dt_competencia_mens%type;
nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
dt_mes_competencia_w		pls_protocolo_conta.dt_mes_competencia%type;
vl_ato_auxiliar_w		pls_mensalidade_seg_item.vl_ato_auxiliar%type;
vl_ato_cooperado_w		pls_mensalidade_seg_item.vl_ato_cooperado%type;
vl_ato_nao_cooperado_w		pls_mensalidade_seg_item.vl_ato_nao_cooperado%type;
ie_gerar_copartic_w		varchar(1);
dt_mesano_referencia_fim_w	timestamp;
ie_status_liberado_w		varchar(1);
nr_seq_pagador_w		pls_segurado_pagador.nr_seq_pagador%type;
nr_seq_mensalidade_canc_w	pls_mensalidade.nr_sequencia%type;
qt_conta_w			bigint;
qt_registro_w			integer;
nr_seq_item_mensalidade_w	pls_mensalidade_seg_item.nr_sequencia%type;
ie_tipo_protocolo_w		pls_conta_coparticipacao.ie_tipo_protocolo%type;
ie_gerar_a700_w			pls_parametros.ie_gerar_coparticipacao_a700%type;
qt_seg_pag_w			smallint := 0;
nr_seq_pagador_mens_w		pls_contrato_pagador.nr_sequencia%type;
ie_status_w			varchar(1);

C01 CURSOR FOR 
	SELECT	a.nr_seq_conta, 
		a.nr_seq_protocolo, 
		a.dt_mes_competencia, 
		a.dt_competencia_mens, 
		sum(a.vl_coparticipacao) vl_coparticipacao, 
		sum(a.vl_ato_cooperado) vl_ato_cooperado, 
		sum(a.vl_ato_auxiliar) vl_ato_auxiliar, 
		sum(a.vl_ato_nao_cooperado) vl_ato_nao_cooperado, 
		a.ie_tipo_protocolo 
	from	pls_conta_coparticipacao a 
	where	a.nr_seq_segurado			= pls_store_data_mens_pck.get_nr_seq_segurado 
	and	coalesce(a.ie_status_mensalidade,'L')	= 'L' -- Liberado para a mensalidade 
	and	coalesce(a.ie_status_coparticipacao,'S')	= 'S' -- Liberado para a mensalidade 
	and	coalesce(a.ie_gerar_mensalidade,'S')		= 'S' -- O campo somente estará como "N" quando a coparticipação foi migrada pelo cliente 
	and	coalesce(a.dt_estorno::text, '') = '' 
	and	a.ie_tipo_segurado in ('B','A','R') 
	and	coalesce(a.nr_seq_mensalidade_seg::text, '') = '' 
	and	((a.nr_seq_pagador = nr_seq_pagador_w) or (coalesce(a.nr_seq_pagador::text, '') = '') 
	or exists (SELECT	1 
			from	pls_pagador_item_mens x 
			where	x.nr_seq_pagador = a.nr_seq_pagador 
			and	x.nr_seq_pagador_item = nr_seq_pagador_w 
			and	x.ie_tipo_item = '3')) 
	and	coalesce(pls_store_data_mens_pck.get_nr_seq_regra_grupo_lote::text, '') = '' 
	group by a.nr_seq_conta, a.nr_seq_protocolo, a.dt_mes_competencia, a.dt_competencia_mens, a.ie_tipo_protocolo 
	
union all
 
	select	a.nr_seq_conta, 
		a.nr_seq_protocolo, 
		a.dt_mes_competencia, 
		a.dt_competencia_mens, 
		sum(a.vl_coparticipacao) vl_coparticipacao, 
		sum(a.vl_ato_cooperado) vl_ato_cooperado, 
		sum(a.vl_ato_auxiliar) vl_ato_auxiliar, 
		sum(a.vl_ato_nao_cooperado) vl_ato_nao_cooperado, 
		a.ie_tipo_protocolo 
	from	pls_conta_coparticipacao a 
	where	a.nr_seq_segurado			= pls_store_data_mens_pck.get_nr_seq_segurado 
	and	coalesce(a.ie_status_mensalidade,'L')	= 'L' -- Liberado para a mensalidade 
	and	coalesce(a.ie_status_coparticipacao,'S')	= 'S' -- Liberado para a mensalidade 
	and	coalesce(a.ie_gerar_mensalidade,'S')		= 'S' -- O campo somente estará como "N" quando a coparticipação foi migrada pelo cliente 
	and	coalesce(a.dt_estorno::text, '') = '' 
	and	a.ie_tipo_segurado in ('B','A','R') 
	and	coalesce(a.nr_seq_mensalidade_seg::text, '') = '' 
	and (a.nr_seq_pagador = nr_seq_pagador_w or coalesce(a.nr_seq_pagador::text, '') = '') 
	and	(pls_store_data_mens_pck.get_nr_seq_regra_grupo_lote IS NOT NULL AND pls_store_data_mens_pck.get_nr_seq_regra_grupo_lote::text <> '') 
	and	((a.nr_seq_prestador_exec = pls_store_data_mens_pck.get_seq_prestador_regra_exec) or (coalesce(pls_store_data_mens_pck.get_seq_prestador_regra_exec::text, '') = '')) 
	and	((a.nr_seq_prestador_atend = pls_store_data_mens_pck.get_seq_prestador_regra_atend) or (coalesce(pls_store_data_mens_pck.get_seq_prestador_regra_atend::text, '') = '')) 
	and	((a.ie_tipo_prestador_exec = pls_store_data_mens_pck.get_tipo_prestador_exec_regra) or (coalesce(pls_store_data_mens_pck.get_tipo_prestador_exec_regra::text, '') = '')) 
	and	((a.ie_tipo_prestador_atend = pls_store_data_mens_pck.get_tipo_prestador_atend_regra) or (coalesce(pls_store_data_mens_pck.get_tipo_prestador_atend_regra::text, '') = '')) 
	and	((a.ie_tipo_guia = pls_store_data_mens_pck.get_ie_tipo_guia_regra) or (coalesce(pls_store_data_mens_pck.get_ie_tipo_guia_regra::text, '') = '')) 
	and	((a.ie_tipo_segurado = pls_store_data_mens_pck.get_ie_tipo_segurado_regra) or (coalesce(pls_store_data_mens_pck.get_ie_tipo_segurado_regra::text, '') = '')) 
	and	((a.ie_preco = pls_store_data_mens_pck.get_ie_preco_regra) or (coalesce(pls_store_data_mens_pck.get_ie_preco_regra::text, '') = '')) 
	group by a.nr_seq_conta, a.nr_seq_protocolo, a.dt_mes_competencia, a.dt_competencia_mens, a.ie_tipo_protocolo;

C02 CURSOR FOR 
	SELECT	nr_sequencia, 
		vl_coparticipacao 
	from	pls_conta_coparticipacao 
	where	nr_seq_conta	= nr_seq_conta_w 
	and	coalesce(ie_status_mensalidade,'L') 	= 'L' -- Liberado para a mensalidade 
	and	coalesce(ie_status_coparticipacao,'S')	= 'S' -- Liberado para a mensalidade 
	and	coalesce(ie_gerar_mensalidade,'S')		= 'S' -- O campo somente estará como "N" quando a coparticipação foi migrada pelo cliente 
	and	coalesce(nr_seq_mensalidade_seg::text, '') = '' 
	and	nr_seq_pagador = nr_seq_pagador_w;


BEGIN 
dt_mesano_referencia_fim_w	:= fim_dia(last_day(pls_store_data_mens_pck.get_dt_mesano_referencia));
ie_gerar_a700_w			:= pls_store_data_mens_pck.get_ie_gerar_copartic_a700;
 
select	count(1) --Não alterar esse select, pois possui índice específico PLSCOCOP_I4 
into STRICT	qt_registro_w 
 
where	exists (	SELECT	1 
		from	pls_conta_coparticipacao a 
		where	a.nr_seq_segurado	= pls_store_data_mens_pck.get_nr_seq_segurado 
		and	coalesce(a.nr_seq_mensalidade_seg::text, '') = '');
 
select	max(nr_seq_pagador) 
into STRICT	nr_seq_pagador_mens_w 
from	pls_pagador_item_mens 
where	nr_seq_pagador_item = pls_store_data_mens_pck.get_nr_seq_pagador 
and	ie_tipo_item = '3';
 
if (coalesce(nr_seq_pagador_mens_w::text, '') = '') then 
	begin 
	select	count(1) 
	into STRICT	qt_seg_pag_w 
	from	pls_segurado_pagador 
	where	nr_seq_segurado	= pls_store_data_mens_pck.get_nr_seq_segurado 
	and	nr_seq_pagador	= pls_store_data_mens_pck.get_nr_seq_pagador 
	and	(dt_fim_vigencia IS NOT NULL AND dt_fim_vigencia::text <> '');
	exception 
	when others then 
		qt_seg_pag_w := 0;
	end;
else 
	qt_seg_pag_w := 1;
end if;
 
if (qt_seg_pag_w = 0) then 
	nr_seq_pagador_w := coalesce(pls_store_data_mens_pck.get_seq_pagador_copartic,pls_store_data_mens_pck.get_nr_seq_pagador_benef);
else 
	nr_seq_pagador_w := pls_store_data_mens_pck.get_nr_seq_pagador;
end if;
 
CALL pls_store_data_mens_pck.set_vl_coparticipacao_gerada(0);
 
if (qt_registro_w > 0) then 
	open C01;
	loop 
	fetch C01 into 
		nr_seq_conta_w, 
		nr_seq_protocolo_w, 
		dt_mes_competencia_w, 
		dt_competencia_mens_w, 
		vl_coparticipacao_w, 
		vl_ato_cooperado_w, 
		vl_ato_auxiliar_w, 
		vl_ato_nao_cooperado_w, 
		ie_tipo_protocolo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		ie_gerar_copartic_w	:= 'N';
		qt_conta_w		:= 1;
		if (pls_store_data_mens_pck.get_ie_ref_copartic_mens = 'C') then 
			nr_seq_mensalidade_canc_w := pls_store_data_mens_pck.get_nr_seq_mens_canc;
			 
			if (nr_seq_mensalidade_canc_w IS NOT NULL AND nr_seq_mensalidade_canc_w::text <> '') then 
				select	count(1) 
				into STRICT	qt_conta_w 
				from	pls_mensalidade a, 
					pls_mensalidade_segurado b, 
					pls_mensalidade_seg_item c 
				where	a.nr_sequencia = b.nr_seq_mensalidade 
				and	b.nr_sequencia = c.nr_seq_mensalidade_seg 
				and	b.dt_mesano_referencia = pls_store_data_mens_pck.get_dt_mesano_referencia 
				and	c.nr_seq_conta = nr_seq_conta_w;
			end if;
		end if;
		 
		if (qt_conta_w > 0) then 
			if (trunc(dt_mes_competencia_w,'month') <= dt_mesano_referencia_fim_w) and 
				((coalesce(dt_competencia_mens_w::text, '') = '') or (dt_competencia_mens_w = pls_store_data_mens_pck.get_dt_mesano_referencia)) and 
				((ie_tipo_protocolo_w = 'C') or (ie_tipo_protocolo_w = 'I') or (ie_tipo_protocolo_w = 'F' AND ie_gerar_a700_w = 'S')) then 
				if (pls_store_data_mens_pck.get_ie_forma_pagamento = 'P') then 
					select	max(ie_status) 
					into STRICT	ie_status_w 
					from	pls_protocolo_conta 
					where	nr_sequencia	= nr_seq_protocolo_w;
					 
					if	((ie_status_w in ('3','6','7')) or 
						(ie_status_w = '4' AND pls_store_data_mens_pck.get_ie_copartic_prot_sem_pag = 'S')) then 
						ie_status_liberado_w	:= 'S';
					else 
						ie_status_liberado_w	:= 'N';
					end if;
				else 
					begin 
					select	'S' 
					into STRICT	ie_status_liberado_w 
					from	pls_conta 
					where	nr_sequencia	= nr_seq_conta_w 
					and	ie_status	in ('F','S');
					exception 
					when others then 
						ie_status_liberado_w	:= 'N';
					end;
				end if;
				 
				if (ie_status_liberado_w = 'S') then 
					if (coalesce(pls_store_data_mens_pck.get_vl_max_copartic,0) > 0) then 
						vl_coparticipacao_w	:= 0;
						open C02;
						loop 
						fetch C02 into 
							nr_seq_conta_copartic_w, 
							vl_copartic_item_w;
						EXIT WHEN NOT FOUND; /* apply on C02 */
							begin 
							--Caso a coparticipação já gerada seja maior, então 0 a coparticipação 
							if (coalesce(pls_store_data_mens_pck.get_vl_coparticipacao_gerada,0) >= pls_store_data_mens_pck.get_vl_max_copartic) then 
								vl_copartic_item_w	:= 0;
								update	pls_conta_coparticipacao 
								set	vl_copartic_mens		= 0, 
									nr_seq_regra_limite_copartic	= pls_store_data_mens_pck.get_nr_seq_regra_limite_copar 
								where	nr_sequencia			= nr_seq_conta_copartic_w;
								ie_gerar_copartic_w	:= 'S';
							--Caso a coparticição já gerada e mais a que vai ser gerada seja maior 
							elsif	((coalesce(pls_store_data_mens_pck.get_vl_coparticipacao_gerada,0) + vl_copartic_item_w) > pls_store_data_mens_pck.get_vl_max_copartic) then 
								--Se foi o primeiro item 
								if (coalesce(pls_store_data_mens_pck.get_vl_coparticipacao_gerada,0) = 0) and (vl_copartic_item_w > pls_store_data_mens_pck.get_vl_max_copartic) then 
									vl_copartic_mens_w	:= pls_store_data_mens_pck.get_vl_max_copartic;
								else 
									vl_copartic_mens_w	:= pls_store_data_mens_pck.get_vl_max_copartic - pls_store_data_mens_pck.get_vl_coparticipacao_gerada;
								end if;
								 
								vl_copartic_item_w	:= vl_copartic_mens_w;
								 
								update	pls_conta_coparticipacao 
								set	vl_copartic_mens		= vl_copartic_mens_w, 
									nr_seq_regra_limite_copartic	= pls_store_data_mens_pck.get_nr_seq_regra_limite_copar 
								where	nr_sequencia			= nr_seq_conta_copartic_w;
							end if;
							 
							vl_coparticipacao_w	:= vl_coparticipacao_w + coalesce(vl_copartic_item_w,0);
							--Atualiza a regra gerada 
							CALL pls_store_data_mens_pck.set_vl_coparticipacao_gerada(pls_store_data_mens_pck.get_vl_coparticipacao_gerada + vl_copartic_item_w);
							end;
						end loop;
						close C02;
					end if;
					 
					if	((coalesce(vl_coparticipacao_w,0) > 0) or (ie_gerar_copartic_w = 'S')) then 
						nr_seq_item_mensalidade_w := null;
						 
						nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('3', nm_usuario_p, null, null, null, null, null, null, null, 'N', null, null, null, null, nr_seq_conta_w, null, null, nr_seq_mensalidade_seg_p, null, null, null, nr_seq_protocolo_w, null, null, null, null, null, null, vl_ato_auxiliar_w, vl_ato_cooperado_w, vl_ato_nao_cooperado_w, vl_coparticipacao_w, nr_seq_item_mensalidade_w);
						 
						if (nr_seq_item_mensalidade_w IS NOT NULL AND nr_seq_item_mensalidade_w::text <> '') then 
							update	pls_conta_coparticipacao 
							set	nr_seq_mensalidade_seg	= nr_seq_mensalidade_seg_p, 
								dt_atualizacao		= clock_timestamp(), 
								nm_usuario		= nm_usuario_p, 
								ie_status_mensalidade  = 'G' 
							where	nr_seq_conta		= nr_seq_conta_w 
							and	coalesce(ie_status_coparticipacao,'S') = 'S' 
							and	coalesce(nr_seq_mensalidade_seg::text, '') = '';
							 
							CALL pls_atualizar_item_faturado(nr_seq_conta_w, 1, nm_usuario_p);
						end if;
					end if;
				end if;
			end if;
		end if;
		end;
	end loop;
	close C01;
end if;
 
/* Não pode dar commit nesta procedure */
 
--commit; 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_mens_coparticipacao ( nr_seq_mensalidade_seg_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

