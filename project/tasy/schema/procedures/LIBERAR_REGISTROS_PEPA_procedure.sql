-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE liberar_registros_pepa ( nr_seq_atend_cons_pepa_p bigint, nm_usuario_p text, ie_fim_consulta_p text default 'S') AS $body$
DECLARE




nm_tabela_w		TABELA_SISTEMA.NM_TABELA%type;
nm_primary_key_w	TABELA_ATRIBUTO.NM_ATRIBUTO%type;
qt_existe_reg_pepa_w	bigint;
ds_sql_w		varchar(4000);
ds_sql_update_w		varchar(2000);
qt_retorno_w		bigint := 0;
ds_retorno_w		varchar(255);
ds_erro_w		varchar(255);
c01_w			integer;
qt_chave_w		varchar(15);
retorno_w		integer;
nr_regras_atendidas_w         varchar(2000);

nr_seq_registro_w	bigint;
nr_proj_assinatura_w	TASY_PROJETO_ASSINATURA.NR_SEQUENCIA%TYPE;
nr_seq_visao_w		TABELA_VISAO.NR_SEQUENCIA%TYPE;
nr_atendimento_w	varchar(10);
cd_pessoa_fisica_w	PESSOA_FISICA.CD_PESSOA_FISICA%TYPE := 0;
ie_atendimento_w	varchar(1) := 'N';
ie_pessoa_w		varchar(1) := 'N';
ie_permite_assinar_w	varchar(1) := 'N';
nr_parecer_w		PARECER_MEDICO.NR_PARECER%TYPE;



--Buscar todas as tabelas que possuem o campo 'NR_SEQ_ATEND_CONS_PEPA'
C01 CURSOR FOR
	SELECT  a.NM_TABELA
	from    TABELA_SISTEMA a
	where   exists (SELECT  1
			from    tabela_atributo z
			where   z.NM_ATRIBUTO = 'NR_SEQ_ATEND_CONS_PEPA'
			AND     z.nm_tabela = a.nm_tabela)
	order by 1;

C02 CURSOR FOR
	SELECT a.nr_parecer, coalesce(b.CD_PESSOA_FISICA, 0), b.NR_ATENDIMENTO
	from parecer_medico a, PARECER_MEDICO_REQ b
	where b.NR_PARECER = a.NR_PARECER
	and a.nr_seq_atend_cons_pepa = nr_seq_atend_cons_pepa_p;
	
	
C03 CURSOR FOR
	SELECT a.nr_sequencia, coalesce(b.CD_PESSOA_FISICA, 0), b.NR_ATENDIMENTO
	from cur_curativo a, cur_ferida b
	where b.NR_SEQUENCIA = a.NR_SEQ_FERIDA
	and b.nr_seq_atend_cons_pepa = nr_seq_atend_cons_pepa_p;	


BEGIN

open C01;
loop
fetch C01 into
	nm_tabela_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_atendimento_w := 'N';
	ie_pessoa_w := 'N';
	ds_sql_w := '';
	ds_sql_update_w := '';

	ds_sql_w :=	'select nvl(count(*),0) from ' || nm_tabela_w || ' where nr_seq_atend_cons_pepa = ' || nr_seq_atend_cons_pepa_p || ' and dt_liberacao is null ';
	qt_retorno_w := Obter_valor_Dinamico_bv(ds_sql_w, null, qt_retorno_w);



	if (qt_retorno_w > 0) then
		begin
			begin

			select count(nm_atributo)
			into STRICT qt_retorno_w
			from INDICE_ATRIBUTO ia,
			  INDICE i
			where i.nm_tabela = nm_tabela_w
			  and ia.nm_tabela = i.NM_TABELA
			  and ia.NM_INDICE = i.NM_INDICE
			  and i.IE_TIPO = 'PK';

			if (qt_retorno_w = 1) then
				select nm_atributo
				into STRICT nm_primary_key_w
				from INDICE_ATRIBUTO ia,
				  INDICE i
				where i.nm_tabela = nm_tabela_w
				  and ia.nm_tabela = i.NM_TABELA
				  and ia.NM_INDICE = i.NM_INDICE
				  and i.IE_TIPO = 'PK';

				select coalesce(max('S'), 'N')
				into STRICT ie_atendimento_w
				from TABELA_ATRIBUTO ta
				where ta.NM_TABELA = nm_tabela_w
				  and ta.nm_atributo = 'NR_ATENDIMENTO';



				ds_sql_w := 'select ' || nm_primary_key_w;

				if (ie_atendimento_w = 'S') then
					ds_sql_w := ds_sql_w || ', NR_ATENDIMENTO';
				else
					select coalesce(max('S'), 'N')
					into STRICT ie_pessoa_w
					from TABELA_ATRIBUTO ta
					where ta.NM_TABELA = nm_tabela_w
					  and ta.nm_atributo = 'CD_PESSOA_FISICA';

					if (ie_pessoa_w = 'S') then
						ds_sql_w := ds_sql_w || ', CD_PESSOA_FISICA';
					end if;
				end if;

				ds_sql_w := ds_sql_w || ' from ' || nm_tabela_w ||
				' where nr_seq_atend_cons_pepa = ' || nr_seq_atend_cons_pepa_p ||
				' and dt_liberacao is null';

				c01_w := dbms_sql.open_cursor;
				dbms_sql.parse(c01_w, ds_sql_w, dbms_sql.native);
				dbms_sql.define_column(c01_w,1,qt_chave_w,10);

				if (ie_atendimento_w = 'S') then
					dbms_sql.define_column(c01_w,2,nr_atendimento_w,10);
				elsif (cd_pessoa_fisica_w = 'S') then
					dbms_sql.define_column(c01_w,2,cd_pessoa_fisica_w,10);
				end if;

				retorno_w := dbms_sql.execute(c01_w);

				while(dbms_sql.fetch_rows(c01_w) > 0) loop
					begin
					dbms_sql.column_value(c01_w,1,qt_chave_w);
					if (ie_atendimento_w = 'S') then
						dbms_sql.column_value(c01_w,2,nr_atendimento_w);
					elsif (cd_pessoa_fisica_w = 'S') then
						dbms_sql.column_value(c01_w,2,cd_pessoa_fisica_w);
					end if;
					CALL liberar_informacao(nm_tabela_w, nm_primary_key_w, (qt_chave_w)::numeric , nm_usuario_p);
					
					begin
						if (nm_tabela_w in ('ESCALA_EDMONTON', 'ESCALA_KARNOFSKY', 'ESCALA_ECOG',
						'ESCALA_LEE', 'ESCALA_TOXIDADE', 'ESCALA_EIF', 'ESCALA_EIF_II', 'ESCALA_EDMONTON_R', 'ESCALA_DISTRESS', 'ESCALA_HUMPTY_DUMPTY') )then
							nr_regras_atendidas_w := GQA_Liberacao_Escala(nr_atendimento_w, (qt_chave_w)::numeric , nm_usuario_p, nm_tabela_w, nr_regras_atendidas_w, null);
						end if;
					exception
					when others then
						null;
					end;
					
					if (nm_tabela_w = 'CUR_FERIDA')then
					
					open C03;
						loop
						fetch C03 into
							nr_seq_registro_w,
							cd_pessoa_fisica_w,
							nr_atendimento_w;
						EXIT WHEN NOT FOUND; /* apply on C03 */
							begin
							
							begin
								ds_sql_update_w := 'update ' || 'CUR_CURATIVO' || ' set dt_liberacao = sysdate, dt_atualizacao = sysdate, nm_usuario = ' || chr(39) || nm_usuario_p || chr(39) || ' where nr_sequencia =' || nr_seq_registro_w;
								ds_retorno_w := Executar_SQL_Dinamico(ds_sql_update_w, ds_retorno_w);
								commit;
								
								nr_regras_atendidas_w := GQA_LIBERACAO_CURATIVO(nr_atendimento_w, nr_seq_registro_w, nm_usuario_p, nr_regras_atendidas_w);
							exception
							when others then
								null;
							end;
							end;
						end loop;
					end if;
					
					
					begin
						CALL gera_protocolo_assistencial(nr_atendimento_w, nm_usuario_p);
					exception
					when others then
						null;
					end;
					
					nr_seq_registro_w:= (qt_chave_w)::numeric;

					select coalesce(max(b.NE_SEQ_PROJETO_LIBERACAO), 0), coalesce(max(b.NR_SEQUENCIA), 0)
					into STRICT nr_proj_assinatura_w, nr_seq_visao_w
					from objeto_schematic a, tabela_visao b
					where a.NR_SEQ_VISAO = b.nr_sequencia
					and (b.NE_SEQ_PROJETO_LIBERACAO IS NOT NULL AND b.NE_SEQ_PROJETO_LIBERACAO::text <> '')
					and a.nm_tabela = nm_tabela_w
					and a.CD_FUNCAO = 381  LIMIT 1;

					if ((nr_proj_assinatura_w IS NOT NULL AND nr_proj_assinatura_w::text <> '') and (nr_seq_visao_w IS NOT NULL AND nr_seq_visao_w::text <> '') and ((nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') or (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> ''))) then
						select coalesce(max('S'), 'N')
						into STRICT ie_permite_assinar_w
						from TASY_PROJ_ASSIN_PERFIL
						where nr_seq_proj = nr_proj_assinatura_w
						  and coalesce(CD_PERFIL, wheb_usuario_pck.get_cd_perfil) = wheb_usuario_pck.get_cd_perfil
						  and IE_PERMITE_LOTE = 'S';

						if (ie_permite_assinar_w = 'S') then
							CALL perform_record_signature((nr_atendimento_w)::numeric , cd_pessoa_fisica_w, nm_usuario_p, nr_proj_assinatura_w, nm_tabela_w, nr_seq_registro_w, nr_seq_visao_w, 381, 'L');
						end if;
					end if;
					end;
				end loop;
			elsif (nm_tabela_w = 'DIAGNOSTICO_DOENCA') then
				ds_sql_w := 'select nr_seq_interno, nr_atendimento' ||
				' from ' || nm_tabela_w ||
				' where nr_seq_atend_cons_pepa = ' || nr_seq_atend_cons_pepa_p ||
				' and dt_liberacao is null';

				c01_w := dbms_sql.open_cursor;
				dbms_sql.parse(c01_w, ds_sql_w, dbms_sql.native);
				dbms_sql.define_column(c01_w,1,qt_chave_w,10);
				dbms_sql.define_column(c01_w,2,nr_atendimento_w,10);
				retorno_w := dbms_sql.execute(c01_w);

				while(dbms_sql.fetch_rows(c01_w) > 0) loop
					begin
					dbms_sql.column_value(c01_w,1,qt_chave_w);
					dbms_sql.column_value(c01_w,2,nr_atendimento_w);
					CALL liberar_informacao(nm_tabela_w, 'NR_SEQ_INTERNO', (qt_chave_w)::numeric , nm_usuario_p);

						select coalesce(max('S'), 'N')
						into STRICT ie_permite_assinar_w
						from TASY_PROJ_ASSIN_PERFIL
						where nr_seq_proj = 25173
						  and coalesce(CD_PERFIL, wheb_usuario_pck.get_cd_perfil) = wheb_usuario_pck.get_cd_perfil
						  and IE_PERMITE_LOTE = 'S';

						if (ie_permite_assinar_w = 'S') then
							CALL perform_record_signature((nr_atendimento_w)::numeric , 0, nm_usuario_p, 25173, nm_tabela_w, qt_chave_w,29582, 381, 'L');
						end if;
					end;
				end loop;

			elsif (qt_retorno_w > 1) then
				ds_sql_update_w := 'update ' || nm_tabela_w || ' set dt_liberacao = sysdate, dt_atualizacao = sysdate, nm_usuario = ' || chr(39) || nm_usuario_p || chr(39) || ' where nr_seq_atend_cons_pepa =' || nr_seq_atend_cons_pepa_p;
				ds_retorno_w := Executar_SQL_Dinamico(ds_sql_update_w, ds_retorno_w);
				commit;
				/*Tabelas com maide de uma PK		Assinatura da tabela				Projeto usado
					PACIENTE_ATEND_MEDIC	--Utilizado na PACIENTE_ATENDIMENTO		100855
					PACIENTE_ATEND_PROC		--Utilizado na PACIENTE_ATENDIMENTO		100855
					PACIENTE_ATEND_SOLUC 	--Utilizado na PACIENTE_ATENDIMENTO		100855
				*/
				if (nm_tabela_w = 'PARECER_MEDICO') then

					select coalesce(max('S'), 'N')
					into STRICT ie_permite_assinar_w
					from TASY_PROJ_ASSIN_PERFIL
					where nr_seq_proj = 50723
					  and coalesce(CD_PERFIL, wheb_usuario_pck.get_cd_perfil) = wheb_usuario_pck.get_cd_perfil
					  and IE_PERMITE_LOTE = 'S';

					if (ie_permite_assinar_w = 'S') then

						open C02;
						loop
						fetch C02 into
							nr_parecer_w,
							cd_pessoa_fisica_w,
							nr_atendimento_w;
						EXIT WHEN NOT FOUND; /* apply on C02 */
							begin
								CALL perform_record_signature((nr_atendimento_w)::numeric , cd_pessoa_fisica_w, nm_usuario_p, 50723, nm_tabela_w, nr_parecer_w, 29550, 381, 'L');
							end;
						end loop;
					end if;
				end if;
			end if;
			exception
			when others then
				ds_erro_w := substr(SQLERRM,1,255);
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
			end;
		end;
	end if;


	end;
end loop;
close C01;

if (ie_fim_consulta_p = 'S') then
	update	atend_consulta_pepa
	set		dt_atualizacao = clock_timestamp(),
			dt_fim_consulta = clock_timestamp(),
			dt_liberacao = clock_timestamp(),
			nm_usuario = nm_usuario_p
	where	nr_sequencia = nr_seq_atend_cons_pepa_p;
end if;

commit;

select nr_atendimento, cd_pessoa_fisica
into STRICT nr_atendimento_w, cd_pessoa_fisica_w
from atend_consulta_pepa
where nr_sequencia = nr_seq_atend_cons_pepa_p;

select coalesce(max('S'), 'N')
into STRICT ie_permite_assinar_w
from TASY_PROJ_ASSIN_PERFIL
where nr_seq_proj = 53566
  and coalesce(CD_PERFIL, wheb_usuario_pck.get_cd_perfil) = wheb_usuario_pck.get_cd_perfil
  and IE_PERMITE_LOTE = 'S';

if (ie_permite_assinar_w = 'S') then
	CALL perform_record_signature((nr_atendimento_w)::numeric , cd_pessoa_fisica_w, nm_usuario_p, 53566, 'ATEND_CONSULTA_PEPA', nr_seq_atend_cons_pepa_p, 102350, 381, 'L');
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE liberar_registros_pepa ( nr_seq_atend_cons_pepa_p bigint, nm_usuario_p text, ie_fim_consulta_p text default 'S') FROM PUBLIC;

