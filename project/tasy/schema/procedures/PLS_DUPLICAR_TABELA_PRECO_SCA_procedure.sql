-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_duplicar_tabela_preco_sca ( nr_seq_contrato_p bigint, nr_seq_vinculo_p bigint, nr_seq_tabela_p bigint, ie_commit_p text, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar uma nova tabela de preco e informar no SCA e na nova tabela de preco
a sequencia da antiga tabela como origem, importar as faixa estarias da tabela antiga para a nova.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nm_tabela_w			varchar(255);
cd_codigo_ant_w			varchar(20);
ie_tabela_base_w		varchar(1);
ie_tabela_contrato_w		varchar(1);
ie_simulacao_preco_w		varchar(1);
vl_preco_atual_w		double precision;
vl_preco_nao_subsidiado_w	double precision;
vl_preco_inicial_w		double precision;
nr_sequencia_w			bigint;
nr_seq_plano_w			bigint;
nr_seq_tabela_origem_w		bigint;
nr_contrato_principal_w		bigint;
nr_seq_nova_tabela_w		bigint;
nr_seq_segurado_w		bigint;
nr_seq_sca_w			bigint;
nr_seq_faixa_etaria_w		bigint;
tx_acrescimo_w			double precision;
qt_idade_inicial_w		integer;
qt_idade_final_w		integer;
dt_inicio_vigencia_w		timestamp;
dt_fim_vigencia_w		timestamp;
qt_vidas_inicial_w		pls_plano_preco.qt_vidas_inicial%type;
qt_vidas_final_w		pls_plano_preco.qt_vidas_final%type;
ie_preco_vidas_contrato_w	pls_tabela_preco.ie_preco_vidas_contrato%type;
ie_calculo_vidas_w		pls_tabela_preco.ie_calculo_vidas%type;
ie_grau_titularidade_w		pls_plano_preco.ie_grau_titularidade%type;

C01 CURSOR FOR
	SELECT	qt_idade_inicial,
		qt_idade_final,
		vl_preco_atual,
		tx_acrescimo,
		vl_preco_nao_subsidiado,
		vl_preco_inicial,
		ie_grau_titularidade,
		qt_vidas_inicial,
		qt_vidas_final
	from	pls_plano_preco
	where	nr_seq_tabela	= nr_seq_tabela_p
	order by
		qt_idade_inicial;

TYPE		fetch_array IS TABLE OF c01%ROWTYPE;
s_array		fetch_array;
i		integer := 1;
type Vetor is table of fetch_array index by integer;
Vetor_c01_w			Vetor;

BEGIN

if (nr_seq_tabela_p <> 0) then
	select	nr_sequencia,
		dt_inicio_vigencia,
		ie_tabela_base,
		dt_fim_vigencia,
		nr_seq_plano,
		cd_codigo_ant,
		ie_tabela_contrato,
		nr_seq_tabela_origem,
		ie_simulacao_preco,
		nr_seq_faixa_etaria,
		ie_preco_vidas_contrato,
		ie_calculo_vidas
	into STRICT	nr_sequencia_w,
		dt_inicio_vigencia_w,
		ie_tabela_base_w,
		dt_fim_vigencia_w,
		nr_seq_plano_w,
		cd_codigo_ant_w,
		ie_tabela_contrato_w,
		nr_seq_tabela_origem_w,
		ie_simulacao_preco_w,
		nr_seq_faixa_etaria_w,
		ie_preco_vidas_contrato_w,
		ie_calculo_vidas_w
	from	pls_tabela_preco
	where	nr_sequencia	= nr_seq_tabela_p;
	
	select	nr_seq_segurado
	into STRICT	nr_seq_segurado_w
	from	pls_sca_vinculo
	where	nr_sequencia	= nr_seq_vinculo_p;
	
	select	wheb_mensagem_pck.get_texto(1183284,'NR_SEQ_SEGURADO='||nr_seq_segurado_w||';NM_BENEFICIARIO='||obter_nome_pf(a.cd_pessoa_fisica))
	into STRICT	nm_tabela_w
	from	pessoa_fisica	a,
		pls_segurado	b
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	b.nr_sequencia		= nr_seq_segurado_w;
	
	insert	into pls_tabela_preco(nr_sequencia,
		dt_inicio_vigencia,
		ie_tabela_base,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nm_tabela,
		dt_fim_vigencia,
		nr_seq_plano,
		cd_codigo_ant,
		nr_contrato,
		ie_tabela_contrato,
		nr_segurado,
		nr_seq_tabela_origem, 
		ie_proposta_adesao,
		ie_simulacao_preco,
		dt_liberacao,
		nr_seq_faixa_etaria,
		ie_preco_vidas_contrato,
		ie_calculo_vidas,
		nr_seq_sca_vinculo)
	values (nextval('pls_tabela_preco_seq'),
		dt_inicio_vigencia_w,
		ie_tabela_base_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nm_tabela_w,
		dt_fim_vigencia_w,
		nr_seq_plano_w,
		cd_codigo_ant_w,
		nr_seq_contrato_p,
		ie_tabela_contrato_w,
		nr_seq_segurado_w,
		nr_sequencia_w,
		'N',
		ie_simulacao_preco_w,
		clock_timestamp(),
		nr_seq_faixa_etaria_w,
		ie_preco_vidas_contrato_w,
		ie_calculo_vidas_w,
		nr_seq_vinculo_p)
		returning nr_sequencia into nr_seq_nova_tabela_w;
	
	open c01;
	loop
	FETCH C01 BULK COLLECT INTO s_array LIMIT 1000;
		Vetor_c01_w(i) := s_array;
		i := i + 1;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	END LOOP;
	CLOSE C01;
	
	for i in 1..Vetor_c01_w.count loop
		s_array := vetor_c01_w(i);
		for z in 1..s_array.count loop
			begin
				qt_idade_inicial_w		:= s_array[z].qt_idade_inicial;
				qt_idade_final_w		:= s_array[z].qt_idade_final;
				vl_preco_atual_w		:= s_array[z].vl_preco_atual;
				tx_acrescimo_w			:= s_array[z].tx_acrescimo;
				vl_preco_nao_subsidiado_w	:= s_array[z].vl_preco_nao_subsidiado;
				vl_preco_inicial_w		:= s_array[z].vl_preco_inicial;
				ie_grau_titularidade_w		:= s_array[z].ie_grau_titularidade;
				qt_vidas_inicial_w		:= s_array[z].qt_vidas_inicial;
				qt_vidas_final_w		:= s_array[z].qt_vidas_final;
				
				insert into pls_plano_preco(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					nr_seq_tabela,
					qt_idade_inicial,
					qt_idade_final,
					vl_preco_inicial,
					vl_preco_atual,
					tx_acrescimo,
					vl_preco_nao_subsidiado,
					ie_grau_titularidade,
					qt_vidas_inicial,
					qt_vidas_final)
				values (nextval('pls_plano_preco_seq'),
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_nova_tabela_w,
					qt_idade_inicial_w,
					qt_idade_final_w,
					vl_preco_inicial_w,
					vl_preco_atual_w,
					tx_acrescimo_w,
					vl_preco_nao_subsidiado_w,
					ie_grau_titularidade_w,
					qt_vidas_inicial_w,
					qt_vidas_final_w);
			end;
		end loop;
	end loop;
	
	update	pls_sca_vinculo
	set	nr_seq_tabela		= nr_seq_nova_tabela_w,
		nr_seq_tabela_origem	= nr_sequencia_w,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where	nr_sequencia		= nr_seq_vinculo_p;
end if;

if (coalesce(ie_commit_p, 'N') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_duplicar_tabela_preco_sca ( nr_seq_contrato_p bigint, nr_seq_vinculo_p bigint, nr_seq_tabela_p bigint, ie_commit_p text, nm_usuario_p text) FROM PUBLIC;

