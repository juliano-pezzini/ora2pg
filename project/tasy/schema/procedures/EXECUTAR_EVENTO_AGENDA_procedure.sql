-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE executar_evento_agenda ( ie_evento_p text, ie_agenda_p text, nr_seq_agenda_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_evolucao_clinica_p text default null, nr_seq_tipo_atend_p text default null, ie_status_p text default null) AS $body$
DECLARE


ie_status_w			varchar(2);
ie_gerar_alta_w			varchar(10);
cd_motivo_alta_w		bigint;
nr_atendimento_w		bigint;
ds_erro_w			varchar(4000);
ie_evolucao_clinica_w		varchar(40);
cd_perfil_w			bigint;
nr_seq_regra_w			bigint;
cd_motivo_alta_medica_w 	bigint;
ie_classif_agenda_w		varchar(5);
ie_tipo_atendimento_w		smallint:=0;
cd_setor_w			bigint;
ds_mensagem_w			varchar(255);
ie_acao_w			varchar(255);
ie_clinica_w			integer:=0;
nr_seq_status_pac_w		bigint;
ie_gerar_lanc_aut_exec_w	varchar(1);
cd_setor_atendimento_w		integer;
cd_agenda_w			bigint;
qt_regra_primaria_w		bigint;
cd_convenio_w			status_evento_agenda.cd_convenio%type;
nr_seq_tipo_atend_w 		status_evento_agenda.NR_SEQ_TIPO_ATEND%type;
nr_seq_servico_w		tipo_servico_atend.nr_sequencia%type;
cd_evol_soap_ret_w		evolucao_paciente.cd_evolucao%type;
dt_atendido_w			timestamp;
nm_tabela_w 			PROTOCOLO_INT_PAC_EVENTO.DS_TABELA_ORIGEM%type;
ie_tipo_agendamento_w 		PROTOCOLO_INT_PAC_EVENTO.IE_TIPO_AGENDAMENTO%type;
cd_pessoa_fisica_w 		PESSOA_FISICA.CD_PESSOA_FISICA%type;
ie_alta_nao_gerada_w  		status_evento_agenda.ie_alta_nao_gerada%type;
dt_alta_v             		atendimento_paciente.dt_alta%type;
ie_atualizar_w        		varchar(1);

C02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	status_evento_agenda a
	where (a.cd_estabelecimento = cd_estabelecimento_p or exists (SELECT 1
									from STATUS_EVENTO_AGENDA_ESTAB x 
									where x.cd_estabelecimento = cd_estabelecimento_p 
									and a.nr_sequencia 	   = x.nr_seq_status_evento_ag ))
    	and	a.ie_evento	    	= ie_evento_p
	and	((a.ie_agenda	    	= ie_agenda_p) or (ie_agenda = 'T'))
	and (coalesce(a.cd_perfil::text, '') = '' or a.cd_perfil = cd_perfil_w)
	and (coalesce(a.cd_agenda::text, '') = '' or a.cd_agenda = cd_agenda_w)
    	and (coalesce(a.ie_tipo_atendimento::text, '') = '' or a.ie_tipo_atendimento    = ie_tipo_atendimento_w)
	and (coalesce(a.cd_setor_atendimento::text, '') = '' or a.cd_setor_atendimento   = cd_setor_atendimento_w)
    	and (coalesce(a.cd_convenio::text, '') = '' or a.cd_convenio            = cd_convenio_w)
	and (coalesce(a.ie_classif_agenda::text, '') = '' or a.ie_classif_agenda      = ie_classif_agenda_w)
	and (coalesce(a.ie_clinica::text, '') = '' or a.ie_clinica             = ie_clinica_w)
	and (coalesce(a.nr_seq_tipo_atend::text, '') = '' or a.nr_seq_tipo_atend      = nr_seq_tipo_atend_w)
    	and (coalesce(a.ie_evolucao_clinica::text, '') = '' or a.ie_evolucao_clinica    = ie_evolucao_clinica_w)
	order by 	coalesce(a.cd_agenda,0),
			coalesce(a.cd_perfil,0),
			coalesce(a.ie_evolucao_clinica,'0'),
			coalesce(a.ie_classif_agenda,'*'),
			coalesce(a.cd_convenio,0),
			coalesce(a.nr_seq_tipo_atend,0),
			a.ie_status;


BEGIN

ie_evolucao_clinica_w	:= coalesce(ie_evolucao_clinica_p,'XPTO');
cd_perfil_w		:= obter_perfil_ativo;
nr_seq_tipo_atend_w     := coalesce(nr_seq_tipo_atend_p,0);


select	max(b.cd_setor_atendimento),
	coalesce(max(a.ie_lanc_aut_exec),'N'),
	max(a.cd_agenda),
	coalesce(max(ie_classif_agenda), '0'),
	coalesce(max(cd_convenio), 0)
into STRICT	cd_setor_w,
	ie_gerar_lanc_aut_exec_w,
	cd_agenda_w,
	ie_classif_agenda_w,
	cd_convenio_w		
from	agenda a,
	agenda_consulta b
where	a.cd_agenda = b.cd_agenda
and	b.nr_sequencia = nr_seq_agenda_p;

if (coalesce(cd_agenda_w::text, '') = '')then
	select	max(cd_agenda)
	into STRICT	cd_agenda_w
	from	agenda_paciente
	where	nr_sequencia = nr_seq_agenda_p;
end if;

if (ie_evento_p IS NOT NULL AND ie_evento_p::text <> '') and (ie_agenda_p IS NOT NULL AND ie_agenda_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

	if (ie_agenda_p in ('CI','E')) then
		select	max(nr_Atendimento)
		into STRICT	nr_atendimento_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;
	elsif (ie_agenda_p in ('C','S')) then
		select	max(nr_Atendimento),
			max(coalesce(ie_classif_agenda,'0'))
		into STRICT	nr_atendimento_w,
			ie_classif_agenda_w
		from	agenda_consulta
		where	nr_sequencia = nr_seq_agenda_p;							
	end if;	

	if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
		ie_tipo_atendimento_w 	:= coalesce(obter_tipo_atendimento(nr_atendimento_w),0);
		ie_clinica_w 		:= coalesce(Obter_Clinica_Atend(nr_atendimento_w,'C'),0);
	end if;	

	select	coalesce(max(cd_setor_atendimento), 0)	
	into STRICT	cd_setor_atendimento_w	
	from	usuario
	where	nm_usuario = nm_usuario_p;	

	open C02;
	loop
	fetch C02 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		nr_seq_regra_w := nr_seq_regra_w;
		end;
	end loop;
	close C02;


	if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
		select	ie_status,
			coalesce(ie_gerar_alta,'N'),
			cd_motivo_alta,
			coalesce(nr_seq_status_pac, 0),
                	coalesce(ie_alta_nao_gerada,'N')
		into STRICT	ie_status_w,
			ie_gerar_alta_w,
			cd_motivo_alta_w,
			nr_seq_status_pac_w,
                	ie_alta_nao_gerada_w
		from	status_evento_agenda
		where	nr_sequencia = nr_seq_regra_w;
	end if;

    ie_atualizar_w := 'S';
    if ie_evento_p in ('SPCA','SPC') and ie_alta_nao_gerada_w = 'S' then
        select	max(dt_alta)
        into STRICT	dt_alta_v
        from	atendimento_paciente
        where	nr_atendimento	= nr_atendimento_w;
	
        if (dt_alta_v IS NOT NULL AND dt_alta_v::text <> '') then
           ie_atualizar_w := 'N';
        end if;
    end if;

    if ((ie_status_p IS NOT NULL AND ie_status_p::text <> '') and ie_atualizar_w <> 'N') then

		update  agenda_consulta
		set	ie_status_agenda = ie_status_p
		where	nr_sequencia = nr_seq_agenda_p;

    /* alterar status agenda */

    elsif ((ie_status_w IS NOT NULL AND ie_status_w::text <> '') and ie_atualizar_w <> 'N') then
		/* agenda cirurgica e exames */

		if (ie_agenda_p in ('CI','E')) and (ie_status_w <> 'AC') then

			if (ie_status_w = 'E') then
				SELECT * FROM consiste_regra_inf_agenda(cd_estabelecimento_p, nr_atendimento_w, cd_setor_w, cd_perfil_w, ds_mensagem_w, ie_acao_w) INTO STRICT ds_mensagem_w, ie_acao_w;

				if (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then
					CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(183185, 'DS_MENSAGEM_W='|| ds_mensagem_w);
				end if;


        if (ie_agenda_p = 'E') then
	        nm_tabela_w := 'AGENDA_PACIENTE';
	        ie_tipo_agendamento_w := ie_agenda_p;
	
	        select 	max(cd_pessoa_fisica)
	        into STRICT 	cd_pessoa_fisica_w
	        from 	agenda_paciente
	        where 	nr_sequencia = nr_seq_agenda_p;
	
        end if;
			end if;

			if (ie_evento_p = 'INC') then --Inicio da cirurgia
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;

			end if;

			if (ie_evento_p = 'LBA') then --Liberacao de anamnese (PEPO)
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'FAG') then --Finalizar agendamento
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'GCO') then --Gerar Consulta Oftalmologia
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'ICO') then --Iniciar Consulta Oftalmologia
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'FCO') then --Finalizar Consulta Oftalmologica
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'DFCO') then --Desfazer Fim Consulta Oftalmologica
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'TAM') then --Transferir agenda marcada
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'AGS') then --Apos geracao de senha
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'ADP') then
				update	agenda_paciente
				set	ie_status_agenda = ie_status_w
				where	nr_sequencia = nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'GRH') then
				update	agenda_paciente
				set	ie_status_agenda = ie_status_w
				where	nr_sequencia = nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'VA') then

				update	agenda_paciente
				set	ie_status_agenda = ie_status_w
				where	nr_sequencia = nr_seq_agenda_p;
			else
				update	agenda_paciente
				set	ie_status_agenda = ie_status_w
				where	nr_sequencia = nr_seq_agenda_p
				and	(nr_atendimento IS NOT NULL AND nr_atendimento::text <> '');

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_evento_p = 'EPG') then
				update	agenda_paciente
				set	ie_status_agenda 	= ie_status_w
				where	nr_sequencia 		= nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_status_w = 'AD') then

				update	agenda_paciente
				set	dt_atendido = clock_timestamp()
				where	nr_sequencia = nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_status_w = 'A') then

				update	agenda_paciente
				set	dt_chegada = clock_timestamp()
				where	nr_sequencia = nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			if (ie_status_w = 'O') then

				update	agenda_paciente
				set	dt_atendimento	= clock_timestamp()
				where	nr_sequencia = nr_seq_agenda_p;

				if (nr_seq_status_pac_w > 0) then
					CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
				end if;
			end if;

			/* alterar status agendas atendimento */

		CALL ALTERA_STATUS_AGENDA_ATEND(NM_USUARIO_P ,CD_ESTABELECIMENTO_P, NR_SEQ_AGENDA_P,IE_AGENDA_P, IE_STATUS_W );
		--Agenda Consulta e Servico
		elsif (ie_agenda_p in ('C','S')) then

				select	max(b.nr_sequencia) -- Apenas para HTML
				into STRICT	nr_seq_servico_w
				from	status_evento_agenda a,
					tipo_servico_atend b
				where	a.nr_seq_servico = b.nr_sequencia
				and	b.ie_tipo_servico = 'EI'
				and	a.nr_sequencia = nr_seq_regra_w;

				Select  max(nr_seq_agend_coletiva)
				into STRICT	qt_regra_primaria_w
				from    agenda_consulta
				where   nr_sequencia = nr_seq_agenda_p;


			if (ie_evento_p = 'AGA' and wheb_assist_pck.get_nivel_atencao_perfil() = 'P' and (coalesce(nr_seq_servico_w,0) > 0)) then

					select 	count(1)
					into STRICT 	qt_regra_primaria_w
					from 	atendimento_servico
					where 	nr_seq_servico = nr_seq_servico_w
					and   	nr_atendimento = nr_atendimento_w;


					if (qt_regra_primaria_w > 0) then
						update	agenda_consulta
						set	ie_status_agenda = ie_status_w
						where	nr_sequencia = nr_seq_agenda_p;	

						if (nr_seq_status_pac_w > 0) then
							CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
						end if;
					end if;

			elsif ( ie_evento_p = 'GA' and wheb_assist_pck.get_nivel_atencao_perfil() = 'P' and coalesce(qt_regra_primaria_w,0) > 0 ) then


						update	agenda_consulta
						set	ie_status_agenda = ie_status_w
						where	nr_sequencia = nr_seq_agenda_p;	

						if (nr_seq_status_pac_w > 0) then
							CALL alterar_status_paciente_agenda(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
						end if;



			elsif (ie_evento_p <> 'VA') then
				if (ie_status_w = 'E') then
					SELECT * FROM consiste_regra_inf_agenda(cd_estabelecimento_p, nr_atendimento_w, cd_setor_w, cd_perfil_w, ds_mensagem_w, ie_acao_w) INTO STRICT ds_mensagem_w, ie_acao_w;

					if (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then						
						CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(183185, 'DS_MENSAGEM_W='|| ds_mensagem_w);
					end if;
				end if;

				dt_atendido_w := null;

				if (ie_status_w <> 'A') then
					select	max(dt_atendido)
					into STRICT	dt_atendido_w
					from	agenda_consulta
					where	nr_sequencia = nr_seq_agenda_p;
				end if;

				update	agenda_consulta
				set		ie_status_agenda 	= ie_status_w,
						dt_atendido 		= dt_atendido_w,
						nm_usuario_atendido	= CASE WHEN ie_status_w='A' THEN  null  ELSE nm_usuario_atendido END ,
						dt_aguardando		= CASE WHEN ie_status_w='A' THEN  clock_timestamp()  ELSE dt_aguardando END ,
						dt_chegada		= CASE WHEN ie_status_w='A' THEN  clock_timestamp()  ELSE dt_chegada END ,
						nm_usuario_aguardando	= CASE WHEN ie_status_w='A' THEN  nm_usuario_p  ELSE nm_usuario_aguardando END ,
						nm_usuario		= CASE WHEN ie_status_w='A' THEN  nm_usuario_p  ELSE nm_usuario END
				where	nr_sequencia 			= nr_seq_agenda_p;


				if (ie_status_w = 'E' and wheb_assist_pck.get_nivel_atencao_perfil() = 'P') then

					cd_evol_soap_ret_w := gerar_evolucao_soap(nr_atendimento_w, nm_usuario_p, cd_evol_soap_ret_w);

				end if;


				if (ie_status_w = 'O') then
					update	agenda_consulta
						set dt_consulta		= clock_timestamp(),
						nm_usuario_consulta	= nm_usuario_p,
						nm_usuario		= nm_usuario_p
					where	nr_sequencia		= nr_seq_agenda_p;

					CALL PEP_gravar_log_age_cons(nr_seq_agenda_p, nm_usuario_p);
				end if;

				if (ie_status_w = 'AD')then
					update	agenda_consulta
					set	dt_status_atendido	= clock_timestamp()
					where	nr_sequencia 		= nr_seq_agenda_p;
				end if;

				if (coalesce(nr_atendimento_w,0) > 0) and (ie_status_w = 'A') and (ie_agenda_p = 'C') then
					CALL gerar_lancamento_automatico(nr_atendimento_w, null, 352, nm_usuario_p, null, null, null, null,ie_classif_agenda_w, null);
				end if;

				if (coalesce(nr_atendimento_w,0) > 0) and (ie_status_w = 'O') and (ie_agenda_p = 'C') then
					CALL gerar_lancamento_automatico(nr_atendimento_w, null, 535, nm_usuario_p, null, null, null, null,null, null);
				end if;
			else

				dt_atendido_w := null;

				if (ie_status_w <> 'A') then
					select	max(dt_atendido)
					into STRICT	dt_atendido_w
					from	agenda_consulta
					where	nr_sequencia = nr_seq_agenda_p;
				end if;	

				update	agenda_consulta
				set		ie_status_agenda 	= ie_status_w,
						dt_atendido 		= dt_atendido_w,
						nm_usuario_atendido	= CASE WHEN ie_status_w='A' THEN  null  ELSE nm_usuario_atendido END ,
						dt_aguardando		= CASE WHEN ie_status_w='A' THEN  clock_timestamp()  ELSE dt_aguardando END ,
						dt_chegada		= CASE WHEN ie_status_w='A' THEN  clock_timestamp()  ELSE dt_chegada END ,
						nm_usuario_aguardando	= CASE WHEN ie_status_w='A' THEN  nm_usuario_p  ELSE nm_usuario_aguardando END ,
						nm_usuario		= CASE WHEN ie_status_w='A' THEN  nm_usuario_p  ELSE nm_usuario END
				where	nr_sequencia 			= nr_seq_agenda_p
				and		(nr_atendimento IS NOT NULL AND nr_atendimento::text <> '');

				if (ie_status_w = 'O') then
					update	agenda_consulta
						set dt_consulta		= clock_timestamp(),
						nm_usuario_consulta	= nm_usuario_p,
						nm_usuario		= nm_usuario_p
					where	nr_sequencia		= nr_seq_agenda_p;
				end if;


				if (coalesce(nr_atendimento_w,0) > 0) and (ie_status_w = 'A') and (ie_agenda_p = 'C') then
					CALL gerar_lancamento_automatico(nr_atendimento_w, null, 352, nm_usuario_p, null, null, null, null, ie_classif_agenda_w, null);
				end if;

				if (coalesce(nr_atendimento_w,0) > 0) and (ie_status_w = 'O') and (ie_agenda_p = 'C') then
					CALL gerar_lancamento_automatico(nr_atendimento_w, null, 535, nm_usuario_p, null, null, null, null,null, null);
				end if;
			end if;

			if (nr_seq_status_pac_w > 0) then
				CALL alterar_status_pac_agecons(nr_seq_agenda_p, nr_seq_status_pac_w, nm_usuario_p);
			end if;


			if (ie_status_w = 'E') and (ie_gerar_lanc_aut_exec_w	= 'S') and (coalesce(nr_atendimento_w,0) > 0) then
				CALL gerar_lancamento_automatico(nr_atendimento_w, null, 539, nm_usuario_p, nr_seq_agenda_p, null, null, null, ie_classif_agenda_w, null);
			end if;

      	if (ie_status_w = 'E') then
	        nm_tabela_w := 'AGENDA_CONSULTA';
	        ie_tipo_agendamento_w := ie_agenda_p;
		
	        select 	max(cd_pessoa_fisica)
	        into STRICT 	cd_pessoa_fisica_w
	        from 	agenda_consulta
	        where 	nr_sequencia = nr_seq_agenda_p;
      	end if;

		end if;

		if (ie_gerar_alta_w	= 'S') and (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then

            dt_alta_v := null;
            if ie_alta_nao_gerada_w = 'S' then
                select	max(dt_alta)
                into STRICT	dt_alta_v
                from	atendimento_paciente
                where	nr_atendimento	= nr_atendimento_w;
            end if;

            if (coalesce(dt_alta_v::text, '') = '' or ie_alta_nao_gerada_w <> 'S') then
                select	max(cd_motivo_alta_medica)
                into STRICT	cd_motivo_alta_medica_w
                from	atendimento_paciente
                where	nr_atendimento	= nr_atendimento_w;

                ds_erro_w := gerar_estornar_alta(nr_atendimento_w, 'A', null, coalesce(coalesce(cd_motivo_alta_w,cd_motivo_alta_medica_w),1), clock_timestamp(), nm_usuario_p, ds_erro_w, null, null, null);
            end if;
		end if;

    	  	if (ie_tipo_agendamento_w IS NOT NULL AND ie_tipo_agendamento_w::text <> '') then
    	  		CALL ATUALIZAR_EV_LINHA_CUIDADO('AG', nm_tabela_w, nr_seq_agenda_p, ie_tipo_agendamento_w, cd_pessoa_fisica_w, nm_usuario_p);
    		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE executar_evento_agenda ( ie_evento_p text, ie_agenda_p text, nr_seq_agenda_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_evolucao_clinica_p text default null, nr_seq_tipo_atend_p text default null, ie_status_p text default null) FROM PUBLIC;

