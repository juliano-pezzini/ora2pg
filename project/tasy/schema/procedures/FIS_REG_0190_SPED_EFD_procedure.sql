-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_reg_0190_sped_efd ( nr_seq_controle_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, cd_empresa_p bigint, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) AS $body$
DECLARE

 
nr_seq_regra_efd_w	bigint;
nr_versao_efd_w		varchar(5);
nr_linha_w		bigint 	:= qt_linha_p;
nr_seq_registro_w		bigint 	:= nr_sequencia_p;
ds_arquivo_w		varchar(4000);
ds_arquivo_compl_w	varchar(4000);
ds_linha_w		varchar(8000);
sep_w			varchar(1)	:= ds_separador_p;
ie_nota_entrada_w		varchar(1);
ie_buscar_data_w		varchar(1);
ie_local_gerar_sped_w	varchar(1);

c01 CURSOR FOR 
	SELECT	distinct '0190' tp_registro, 
			lpad(substr(u.cd_unidade_medida,1,6), 6, ' ') cd_unidade_medida, 
			u.ds_unidade_medida 
	FROM unidade_medida u, operacao_nota o, material m, nota_fiscal_item i, nota_fiscal n
LEFT OUTER JOIN lote_protocolo p ON (n.nr_seq_lote_prot = p.nr_sequencia)
LEFT OUTER JOIN conta_paciente x ON (n.nr_interno_conta = x.nr_interno_conta)
LEFT OUTER JOIN protocolo_convenio z ON (x.nr_seq_protocolo = z.nr_seq_protocolo)
WHERE n.nr_sequencia = i.nr_sequencia and n.cd_operacao_nf = o.cd_operacao_nf    and i.cd_material = m.cd_material and m.cd_unidade_medida_estoque = u.cd_unidade_medida and n.cd_estabelecimento = cd_estabelecimento_p and u.ie_situacao = 'A' and ((o.ie_operacao_fiscal = 'S' AND ie_nota_entrada_w = 'N') 
	or (ie_nota_entrada_w = 'S')) and ((n.dt_emissao between dt_inicio_p and fim_dia(dt_fim_p) and (ie_buscar_data_w = 'N')) 
	or	((n.nr_seq_lote_prot IS NOT NULL AND n.nr_seq_lote_prot::text <> '') and (p.dt_mesano_referencia = trunc(dt_inicio_p)) and (ie_buscar_data_w = 'P')) 
	or	((x.nr_seq_protocolo IS NOT NULL AND x.nr_seq_protocolo::text <> '') and (trunc(z.dt_mesano_referencia,'mm') = trunc(dt_inicio_p,'mm') and (ie_buscar_data_w = 'P')))) and (o.ie_servico = 'S') and (n.dt_atualizacao_estoque IS NOT NULL AND n.dt_atualizacao_estoque::text <> '') and n.ie_situacao in (1, 3) order by cd_unidade_medida;

c02 CURSOR FOR 
	SELECT	'0190' tp_registro, 
		lpad(substr(a.cd_unidade_medida,1,6), 6, ' ') cd_unidade_medida, 
		a.ds_unidade_medida 
	from	unidade_medida a 
	where	a.ie_situacao	= 'A' 
	order by 2;

vet01	C01%RowType;
vet02	C02%RowType;


BEGIN 
 
select	nr_seq_regra_efd 
into STRICT	nr_seq_regra_efd_w 
from	fis_efd_controle 
where	nr_sequencia = nr_seq_controle_p;
 
select	coalesce(max(ie_nota_entrada),'N'), 
	coalesce(max(ie_buscar_data),'N') 
into STRICT	ie_nota_entrada_w, 
	ie_buscar_data_w 
from	fis_regra_efd_a100 
where	nr_seq_regra_efd = nr_seq_regra_efd_w;
 
ie_local_gerar_sped_w := obter_param_usuario(5500, 25, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_local_gerar_sped_w);
 
if (ie_local_gerar_sped_w = 'N') then -- Pegar pela nota fiscal 
 
	open C01;
	loop 
	fetch C01 into	 
		vet01;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin	 
		 
		ds_linha_w	:= substr(	sep_w || vet01.tp_registro		|| 
					sep_w || vet01.cd_unidade_medida	|| 
					sep_w || vet01.ds_unidade_medida	|| sep_w,1,8000);
		 
		ds_arquivo_w		:= substr(ds_linha_w,1,4000);
		ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
		nr_seq_registro_w		:= nr_seq_registro_w + 1;
		nr_linha_w		:= nr_linha_w + 1;
 
		insert into fis_efd_arquivo(	nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					nm_usuario_nrec, 
					dt_atualizacao_nrec, 
					nr_seq_controle_efd, 
					nr_linha, 
					cd_registro, 
					ds_arquivo, 
					ds_arquivo_compl) 
			values (		nr_seq_registro_w, 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nr_seq_controle_p, 
					nr_linha_w, 
					vet01.tp_registro, 
					ds_arquivo_w, 
					ds_arquivo_compl_w);
		end;
	end loop;
	close C01;
end if;
 
if (ie_local_gerar_sped_w = 'C') or (ie_local_gerar_sped_w = 'A') then 
 
	open C02;
	loop 
	fetch C02 into	 
		vet02;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin	 
		ds_linha_w	:= substr(	sep_w || vet02.tp_registro		|| 
						sep_w || vet02.cd_unidade_medida	|| 
						sep_w || vet02.ds_unidade_medida	|| sep_w,1,8000);
		 
		ds_arquivo_w		:= substr(ds_linha_w,1,4000);
		ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
		nr_seq_registro_w	:= nr_seq_registro_w + 1;
		nr_linha_w		:= nr_linha_w + 1;
 
		insert into fis_efd_arquivo( 
			nr_sequencia, 
			nm_usuario, 
			dt_atualizacao, 
			nm_usuario_nrec, 
			dt_atualizacao_nrec, 
			nr_seq_controle_efd, 
			nr_linha, 
			cd_registro, 
			ds_arquivo, 
			ds_arquivo_compl) 
		values (	nr_seq_registro_w, 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nr_seq_controle_p, 
			nr_linha_w, 
			vet02.tp_registro, 
			ds_arquivo_w, 
			ds_arquivo_compl_w);
		end;
	end loop;
	close C02;
 
end if;
	 
commit;
 
qt_linha_p	:= nr_linha_w;
nr_sequencia_p	:= nr_seq_registro_w;	
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_reg_0190_sped_efd ( nr_seq_controle_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, cd_empresa_p bigint, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) FROM PUBLIC;

