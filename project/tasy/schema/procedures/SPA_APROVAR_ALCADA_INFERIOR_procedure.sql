-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE spa_aprovar_alcada_inferior ( nr_seq_spa_p spa_aprovacao.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE

 
/*aprova os niveis e ordens inferiores do responsavel da spa*/
 
/*chamado apos liberar spa*/
 
cd_responsavel_spa_w		spa.cd_responsavel%type;
nm_usuario_spa_w		pessoa_fisica.nm_usuario%type;
cd_cargo_resp_w			pessoa_fisica.cd_cargo%type;
nr_seq_aprovacao_w		spa_aprovacao.nr_sequencia%type;
nr_seq_aprov_maior_w 		spa_aprovacao.nr_sequencia%type := null;
nm_usuario_aprovacao_w		pessoa_fisica.nm_usuario%type;
cd_pessoa_fisica_aprov_w	pessoa_fisica.cd_pessoa_fisica%type;
cd_cargo_aprovacao_w		pessoa_fisica.cd_cargo%type;
qt_regra_w			bigint;
cd_estab_logado_w		spa_substituto.cd_estabelecimento%type;
nr_seq_tipo_w			spa_substituto.nr_seq_tipo%type;
nr_seq_motivo_w			spa_substituto.nr_seq_motivo%type;

C01 CURSOR FOR 
	SELECT a.nr_sequencia, 
		a.nm_usuario_aprov, 
		a.cd_cargo_aprov 
	from  spa_aprovacao a 
	where	a.nr_seq_spa = nr_seq_spa_p 
	order by nr_sequencia desc;


BEGIN 
cd_estab_logado_w := wheb_usuario_pck.get_cd_estabelecimento;
 
select 	max(cd_responsavel), 
	max(nr_seq_tipo), 
	max(nr_seq_motivo) 
into STRICT	cd_responsavel_spa_w, 
	nr_seq_tipo_w, 
	nr_seq_motivo_w 
from 	spa 
where 	nr_sequencia = nr_seq_spa_p;
 
select max(u.nm_usuario), 
	max(a.cd_cargo) 
into STRICT 	nm_usuario_spa_w, 
	cd_cargo_resp_w 
from 	pessoa_fisica 	a, 
	usuario 	u 
where 	a.cd_pessoa_fisica = cd_responsavel_spa_w 
and 	a.cd_pessoa_fisica = u.cd_pessoa_fisica;
 
 
open C01;--pega a maior ordem e nivel em que o responsavel se encontra na alÃ§ada. Considera o cargo ou o usuario 
loop
fetch C01 into	 
	nr_seq_aprov_maior_w, 
	nm_usuario_aprovacao_w, 
	cd_cargo_aprovacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	nr_seq_aprov_maior_w := nr_seq_aprov_maior_w;
	 
	if (nm_usuario_aprovacao_w = nm_usuario_spa_w or cd_cargo_aprovacao_w = cd_cargo_resp_w ) then 
		exit;
	end if;
	 
	begin 
	select	coalesce(max(cd_pessoa_fisica),0) 
	into STRICT 	cd_pessoa_fisica_aprov_w 
	from 	usuario 
	where 	nm_usuario = nm_usuario_aprovacao_w;
	exception 
	when others then 
		cd_pessoa_fisica_aprov_w := '0';
	end;
	 
	select count(1) 
	into STRICT  qt_regra_w 
	from  spa_substituto 
	where  cd_pessoa_substituta 	= cd_responsavel_spa_w 
	and 	coalesce(cd_cargo,coalesce(cd_cargo_aprovacao_w,0)) 	= coalesce(cd_cargo_aprovacao_w,0) 
	and  	coalesce(cd_pessoa_fisica,coalesce(cd_pessoa_fisica_aprov_w,'0')) = coalesce(cd_pessoa_fisica_aprov_w,'0')	 
	and 	coalesce(cd_estabelecimento,coalesce(cd_estab_logado_w,0)) 	= coalesce(cd_estab_logado_w,0) 
	and 	coalesce(nr_seq_tipo,coalesce(nr_seq_tipo_w,0)) 			= coalesce(nr_seq_tipo_w,0) 
	and 	coalesce(nr_seq_motivo,coalesce(nr_seq_motivo_w,0))		= coalesce(nr_seq_motivo_w,0) 
	and   trunc(dt_limite) >= trunc(clock_timestamp());
	 
	if (qt_regra_w > 0)then 
		exit;
	end if;
	nr_seq_aprov_maior_w := null;
	end;
end loop;
close C01;
 
if (coalesce(nr_seq_aprov_maior_w,0) > 0) then 
 
	/*Libera para aprovacao e aprova os niveis inferiores*/
 
	update 	spa_aprovacao 
	set	dt_aprovacao 	 = clock_timestamp(), 
		dt_lib_aprov 	 = coalesce(dt_lib_aprov,clock_timestamp()), 
		dt_atualizacao 	 = clock_timestamp(), 
		nm_usuario 	 = nm_usuario_p, 
		nm_aprovador_real = nm_usuario_p 
	where	nr_seq_spa 	 = nr_seq_spa_p 
	and	coalesce(dt_aprovacao::text, '') = '' 
	and	coalesce(dt_cancelamento::text, '') = '' 
	and 	nr_Sequencia <= nr_seq_aprov_maior_w;
 
	CALL spa_aprovar(nr_seq_aprov_maior_w, nm_usuario_p);
	 
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE spa_aprovar_alcada_inferior ( nr_seq_spa_p spa_aprovacao.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;

