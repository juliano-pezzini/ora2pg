-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_102 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Aplicar a validação para gerar a ocorrência em itens que não foram autorizados.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:


Alterações:
 ------------------------------------------------------------------------------------------------------------------
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qt_encontrado_w		integer;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
i			integer;
dados_tb_sel_w		pls_tipos_ocor_pck.dados_table_selecao_ocor;

-- cursor da regra
c01 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
SELECT	nr_sequencia,
	nr_seq_regra_semelhante
from 	pls_oc_cta_val_item_semel
where	nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

-- cursor com os procedimentos a serem avaliados
c02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
		ie_evento_pc		pls_oc_cta_combinada.ie_evento%type) FOR
SELECT	proc.ie_origem_proced,
	proc.cd_procedimento,
	coalesce(proc.nr_seq_guia_proc,proc.nr_seq_guia)	nr_seq_guia,
	sel.nr_sequencia				nr_seq_selecao
from	pls_oc_cta_selecao_ocor_v	sel,
	pls_conta_proc_ocor_v		proc
where	sel.nr_id_transacao 		= nr_id_transacao_pc
	and	sel.ie_valido		= 'S'
	and	sel.ie_tipo_registro	= 'P'
	and	proc.nr_seq_conta	= sel.nr_seq_conta
	and	proc.nr_sequencia	= sel.nr_seq_conta_proc
	and	((proc.nr_seq_guia_proc IS NOT NULL AND proc.nr_seq_guia_proc::text <> '') or (proc.nr_seq_guia IS NOT NULL AND proc.nr_seq_guia::text <> ''))
	and	ie_evento_pc		<> 'IMP'

union all

select	proc.ie_origem_proced,
	proc.cd_procedimento_imp cd_procedimento,
	coalesce(proc.nr_seq_guia_proc,proc.nr_seq_guia)	nr_seq_guia,
	sel.nr_sequencia				nr_seq_selecao
from	pls_oc_cta_selecao_ocor_v	sel,
	pls_conta_proc_ocor_v		proc
where	sel.nr_id_transacao 		= nr_id_transacao_pc
	and	sel.ie_valido		= 'S'
	and	sel.ie_tipo_registro	= 'P'
	and	proc.nr_seq_conta	= sel.nr_seq_conta
	and	proc.nr_sequencia	= sel.nr_seq_conta_proc
	and	((proc.nr_seq_guia_proc IS NOT NULL AND proc.nr_seq_guia_proc::text <> '') or (proc.nr_seq_guia IS NOT NULL AND proc.nr_seq_guia::text <> ''))
	and	ie_evento_pc		= 'IMP';
BEGIN

-- somente executa se tiver regra
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then
	cd_estabelecimento_w := cd_estabelecimento_p;

	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

	-- busca as regras criadas
	for r_c01_w in c01(dados_regra_p.nr_sequencia) loop

		-- inicia o contador
		i := 0;
		-- Inicializa as listas para cada regra
		pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);


		for r_c02_w in c02(nr_id_transacao_p, dados_regra_p.ie_evento) loop

			-- Verifica se o procedimento testado está na autorização
			select	count(1)
			into STRICT	qt_encontrado_w
			from	table(pls_conta_autor_pck.obter_dados(r_c02_w.nr_seq_guia, 'P', cd_estabelecimento_w, r_c02_w.ie_origem_proced, r_c02_w.cd_procedimento)) a;

			-- se não encontrou nenhum, então olhar se tem item semelhante
			if (qt_encontrado_w = 0) then
				-- conta se existe algum item semelhante em relação ao validado e a autorização
				select	count(1)
				into STRICT	qt_encontrado_w
				from	table(pls_conta_autor_pck.obter_dados(r_c02_w.nr_seq_guia, 'P', cd_estabelecimento_w, null, null)) a
				where	pls_obter_proc_semelhante(r_c01_w.nr_seq_regra_semelhante, cd_estabelecimento_w, r_c02_w.ie_origem_proced, r_c02_w.cd_procedimento, a.ie_origem_proced, a.cd_procedimento) = 'S';

				-- se tem semelhantes, gera a ocorrencia
				if (qt_encontrado_w > 0) then
					dados_tb_sel_w.ie_valido(i)		:= 'S';
					dados_tb_sel_w.ds_observacao(i)		:= 'O item apresentado não está autorizado, mas foi encontrado um semelhante na autorização.';
					dados_tb_sel_w.nr_seq_selecao(i)	:= r_c02_w.nr_seq_selecao;
				end if;

			end if; -- fim verifica semelhante
			-- Quando a quantidade de itens da lista tiver chegado ao máximo definido na PLS_CTA_CONSISTIR_PCK, então os registros são levados para
			-- o BD e gravados todos de uma vez, pela procedure GERENCIAL_SELECAO_VALIDACAO, que atualiza os registros conforme passado por
			-- parâmetro, o indice e as listas são reiniciados para carregar os novos registros e para que os registros atuais não sejam atualizados novamente em
			-- na próxima carga.
			if (i = pls_cta_consistir_pck.qt_registro_transacao_w) then

				-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
				-- conforme passado por parâmetro,
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
					dados_tb_sel_w.nr_seq_selecao, pls_tipos_ocor_pck.clob_table_vazia,
					'SEQ', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p);

				-- Zerar o índice
				i := 0;

				-- Zerar as listas.
				pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);
			-- Enquanto os registros não tiverem atingido a carga para gravar na seleção incrementa o índice para armazenar os próximos registros.
			else
				i := i + 1;
			end if;

		end loop; -- c02 - procedimentos
		-- Quando tiver sobrado algo na lista irá gravar o que restou após a execução do loop.
		if (dados_tb_sel_w.nr_seq_selecao.count > 0) then
			-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
			-- conforme passado por parâmetro,
			CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
				dados_tb_sel_w.nr_seq_selecao, pls_tipos_ocor_pck.clob_table_vazia,
				'SEQ', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p);
		end if;

	end loop; -- c01 regras criadas
	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);



end if; -- dados_regra_p.nr_sequencia is not null
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_102 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

