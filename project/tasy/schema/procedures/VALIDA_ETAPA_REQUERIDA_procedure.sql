-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE valida_etapa_requerida ( nr_seq_checkup_etapa_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_etapa_req_w  	bigint;
nr_atendimento_w   	bigint;
ds_etapa_req_w    	varchar(255) :='';
ds_etapa_req_msn_w  	varchar(255) :='';
ds_etapa_requerente_w 	varchar(255);
ie_existe_etapa_painel_w varchar(1) := 'N';

dt_cancel_ck_w  	timestamp;
dt_inicio_real_w 	timestamp;
dt_fim_etapa_w  	timestamp;
dt_confirmacao_w 	timestamp;
dt_cancel_etapa_w 	timestamp;
nr_seq_etapa_w  	bigint;
nr_seq_tipo_checkup_etapa_w  	bigint;

C01 CURSOR FOR 
	SELECT t.nr_seq_etapa, 
		substr(Obter_desc_etapa_checkup(t.nr_seq_etapa),1,255), 
		i.nr_atendimento, 
		substr(Obter_desc_etapa_checkup(f.nr_seq_etapa),1,255) 
	from  checkup_etapa f, 
		checkup    i, 
		empresa_pessoa_checkup l, 
		contrato_tipo_checkup_pf n, 
		tipo_checkup p, 
		tipo_checkup_etapa r, 
		etapa_checkup_requerida t 
	where  f.nr_sequencia   	= nr_seq_checkup_etapa_p 
	and   f.nr_seq_checkup  	= i.nr_sequencia 
	and   i.cd_pessoa_fisica  	= l.cd_pessoa_fisica 
	and   l.nr_sequencia    	= n.nr_seq_pessoa_checkup 
	and   n.nr_seq_tipo_checkup  = p.nr_sequencia 
	and   p.nr_sequencia     = r.nr_seq_tipo_checkup 
	and   r.nr_seq_etapa     = f.nr_seq_etapa 
	and   r.nr_sequencia     = t.nr_seq_checkup_etapa;

C02 CURSOR FOR 
	SELECT 	e.nr_seq_etapa, 
		substr(Obter_desc_etapa_checkup(e.nr_seq_etapa),1,255), 
		b.nr_atendimento, 
		substr(Obter_desc_etapa_checkup(a.nr_seq_etapa),1,255) 
	from  	checkup_etapa a, 
		checkup b, 
		tipo_checkup c, 
		tipo_checkup_etapa d, 
		etapa_checkup_requerida e 
	where 	a.nr_sequencia 		= nr_seq_checkup_etapa_p 
	and  	a.nr_seq_checkup 	= b.nr_sequencia 
	and  	b.nr_seq_tipo_checkup  = c.nr_sequencia 
	and  	c.nr_sequencia     = d.nr_seq_tipo_checkup 
	and  	d.nr_seq_etapa     = a.nr_seq_etapa 
	and  	d.nr_sequencia     = e.nr_seq_checkup_etapa 
	and	exists (	SELECT	1 
				from	checkup_etapa x 
				where	x.nr_seq_checkup	= b.nr_sequencia 
				and	e.nr_seq_etapa		= x.nr_seq_etapa);

 
C03 CURSOR FOR 
	SELECT 	d.nr_seq_etapa_req, 
		substr(Obter_desc_etapa_checkup(d.nr_seq_etapa_req),1,255), 
		b.nr_atendimento, 
		substr(Obter_desc_etapa_checkup(a.nr_seq_etapa),1,255) 
	from  	checkup_etapa a, 
		checkup b, 
		etapa_checkup c, 
		etapa_checkup_req d 
	where 	a.nr_sequencia 		= nr_seq_checkup_etapa_p 
	and  	a.nr_seq_checkup 	= b.nr_sequencia 
	and   a.nr_seq_etapa  	= c.nr_sequencia 
	and   c.nr_sequencia  	= d.nr_seq_etapa;
	

BEGIN 
if (nr_seq_checkup_etapa_p IS NOT NULL AND nr_seq_checkup_etapa_p::text <> '') then 
	select 	coalesce(max(b.nr_seq_tipo_checkup),0) 
	into STRICT	nr_seq_tipo_checkup_etapa_w 
	from  	checkup_etapa a, 
		checkup b 
	where 	a.nr_sequencia 		= nr_seq_checkup_etapa_p 
	and  	a.nr_seq_checkup 	= b.nr_sequencia;
	 
	begin 
--CONSISTE AS ETAPAS REQUERIDAS NO CADASTRO DE TIPOS DE CHECKUP 
	if (coalesce(nr_seq_tipo_checkup_etapa_w,0) = 0) then 
		begin 
		open C01;
		loop 
		fetch C01 into 
			nr_seq_etapa_req_w, 
			ds_etapa_req_w, 
			nr_atendimento_w, 
			ds_etapa_requerente_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		select max(a.dt_cancelamento), 
			max(b.dt_inicio_real), 
			max(b.dt_fim_etapa), 
			max(b.dt_confirmacao), 
			max(b.nr_sequencia), 
			max(b.dt_cancelamento) 
		into STRICT  dt_cancel_ck_w, 
			dt_inicio_real_w, 
			dt_fim_etapa_w, 
			dt_confirmacao_w, 
			nr_seq_etapa_w, 
			dt_cancel_etapa_w 
		from  checkup a, 
			checkup_etapa b, 
			atendimento_paciente c 
		where  a.dt_previsto between trunc(clock_timestamp()) and fim_dia(clock_timestamp()) 
		and   (a.nr_atendimento IS NOT NULL AND a.nr_atendimento::text <> '') 
		and 	b.nr_seq_checkup = a.nr_sequencia 
		and 	c.nr_atendimento = a.nr_atendimento 
		and   c.nr_atendimento = nr_atendimento_w 
		and 	b.nr_seq_etapa  = nr_seq_etapa_req_w 
		order by coalesce(a.nr_seq_prioridade,9999) asc, c.dt_entrada;
 
		select 	CASE WHEN coalesce(max(nr_seq_etapa)::text, '') = '' THEN 'N'  ELSE 'S' END  
		into STRICT	ie_existe_etapa_painel_w 
		from 	checkup_etapa a 
		where 	trunc(a.dt_prevista) between trunc(clock_timestamp()) and fim_dia(clock_timestamp()) 
		and  	nr_seq_etapa = nr_seq_etapa_req_w;
 
		if ( (coalesce(dt_inicio_real_w::text, '') = '' ) or (dt_inicio_real_w IS NOT NULL AND dt_inicio_real_w::text <> '')) and ( coalesce(dt_fim_etapa_w::text, '') = '' ) and (ie_existe_etapa_painel_w = 'S') then 
			ds_etapa_req_msn_w := ds_etapa_req_msn_w || ds_etapa_req_w ||chr(13)||chr(10);
		end if;
		end;
		end loop;
		close C01;
		end;
		if (ds_etapa_req_msn_w IS NOT NULL AND ds_etapa_req_msn_w::text <> '') then 
			/*--(-20011,'Para realizar a etapa ' || ds_etapa_requerente_w || ' é preciso realizar as seguintes etapas: '|| 
										chr(13)||chr(10) || ds_etapa_req_msn_w || 
										'Cadastro de Tipos de Check-up: ' || 
										chr(13)||chr(10) ||'#@#@');*/
 
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(264558,	'DS_ETAPA_REQUERENTE_W='||DS_ETAPA_REQUERENTE_W || ';' ||'DS_ETAPA_REQ_MSN_W=' || DS_ETAPA_REQ_MSN_W);							
		end if;
		--end; 
	elsif (coalesce(nr_seq_tipo_checkup_etapa_w,0) > 0) then 
		begin 
		open C02;
		loop 
		fetch C02 into 
			nr_seq_etapa_req_w, 
			ds_etapa_req_w, 
			nr_atendimento_w, 
			ds_etapa_requerente_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		select max(a.dt_cancelamento), 
			max(b.dt_inicio_real), 
			max(b.dt_fim_etapa), 
			max(b.dt_confirmacao), 
			max(b.nr_sequencia), 
			max(b.dt_cancelamento) 
		into STRICT  dt_cancel_ck_w, 
			dt_inicio_real_w, 
			dt_fim_etapa_w, 
			dt_confirmacao_w, 
			nr_seq_etapa_w, 
			dt_cancel_etapa_w 
		from  checkup a, 
			checkup_etapa b, 
			atendimento_paciente c 
		where  a.dt_previsto between trunc(clock_timestamp()) and fim_dia(clock_timestamp()) 
		and   (a.nr_atendimento IS NOT NULL AND a.nr_atendimento::text <> '') 
		and 	b.nr_seq_checkup = a.nr_sequencia 
		and 	c.nr_atendimento = a.nr_atendimento 
		and   c.nr_atendimento = nr_atendimento_w 
		and 	b.nr_seq_etapa  = nr_seq_etapa_req_w 
		order by coalesce(a.nr_seq_prioridade,9999) asc, c.dt_entrada;
 
		select 	CASE WHEN coalesce(max(nr_seq_etapa)::text, '') = '' THEN 'N'  ELSE 'S' END  
		into STRICT	ie_existe_etapa_painel_w 
		from 	checkup_etapa a 
		where 	trunc(a.dt_prevista) between trunc(clock_timestamp()) and fim_dia(clock_timestamp()) 
		and  	nr_seq_etapa = nr_seq_etapa_req_w;
 
		if ( (coalesce(dt_inicio_real_w::text, '') = '' ) or (dt_inicio_real_w IS NOT NULL AND dt_inicio_real_w::text <> '')) and ( coalesce(dt_fim_etapa_w::text, '') = '' ) and (ie_existe_etapa_painel_w = 'S') then 
			ds_etapa_req_msn_w := ds_etapa_req_msn_w || ds_etapa_req_w ||chr(13)||chr(10);
		end if;
		end;
		end loop;
		close C02;
		end;
		if (ds_etapa_req_msn_w IS NOT NULL AND ds_etapa_req_msn_w::text <> '') then 
			/*(-20011,'Para realizar a etapa ' || ds_etapa_requerente_w || ' é preciso realizar as seguintes etapas: '|| 
										chr(13)||chr(10) || ds_etapa_req_msn_w || chr(13)||chr(10) || 
										'Cadastro de Tipos de Check-up 2' || 
										chr(13)||chr(10) ||'#@#@');*/
 
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(264560,	'DS_ETAPA_REQUERENTE_W='||DS_ETAPA_REQUERENTE_W || ';' ||'DS_ETAPA_REQ_MSN_W='|| DS_ETAPA_REQ_MSN_W);				
 
		end if;
	end if;
	 
--CONSISTE SE EXISTE ETAPA REQUERIDA NA TABELA ETAPA_CHECKUP_REQ DO CADASTRO DE ETAPAS CHECKUP;	 
	open C03;
	loop 
	fetch C03 into 
		nr_seq_etapa_req_w, 
		ds_etapa_req_w, 
		nr_atendimento_w, 
		ds_etapa_requerente_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
	begin 
	select max(a.dt_cancelamento), 
		max(b.dt_inicio_real), 
		max(b.dt_fim_etapa), 
		max(b.dt_confirmacao), 
		max(b.nr_sequencia), 
		max(b.dt_cancelamento) 
	into STRICT  dt_cancel_ck_w, 
		dt_inicio_real_w, 
		dt_fim_etapa_w, 
		dt_confirmacao_w, 
		nr_seq_etapa_w, 
		dt_cancel_etapa_w 
	from  checkup a, 
		checkup_etapa b, 
		atendimento_paciente c 
	where  a.dt_previsto between trunc(clock_timestamp()) and fim_dia(clock_timestamp()) 
	and   (a.nr_atendimento IS NOT NULL AND a.nr_atendimento::text <> '') 
	and 	b.nr_seq_checkup = a.nr_sequencia 
	and 	c.nr_atendimento = a.nr_atendimento 
	and   c.nr_atendimento = nr_atendimento_w 
	and 	b.nr_seq_etapa  = nr_seq_etapa_req_w 
	order by coalesce(a.nr_seq_prioridade,9999) asc, c.dt_entrada;
 
	select 	CASE WHEN coalesce(max(nr_seq_etapa)::text, '') = '' THEN 'N'  ELSE 'S' END  
	into STRICT	ie_existe_etapa_painel_w 
	from 	checkup_etapa a 
	where 	trunc(a.dt_prevista) between trunc(clock_timestamp()) and fim_dia(clock_timestamp()) 
	and  	nr_seq_etapa = nr_seq_etapa_req_w;
 
	if ( (coalesce(dt_inicio_real_w::text, '') = '' ) or (dt_inicio_real_w IS NOT NULL AND dt_inicio_real_w::text <> '')) and ( coalesce(dt_fim_etapa_w::text, '') = '' ) and (ie_existe_etapa_painel_w = 'S') then 
		ds_etapa_req_msn_w := ds_etapa_req_msn_w || ds_etapa_req_w ||chr(13)||chr(10);
	end if;
	end;
	end loop;
	close C03;
	end;
	if (ds_etapa_req_msn_w IS NOT NULL AND ds_etapa_req_msn_w::text <> '') then 
		/*--(-20011,'Para realizar a etapa ' || ds_etapa_requerente_w || ' é preciso realizar as seguintes etapas: '|| 
									chr(13)||chr(10) || ds_etapa_req_msn_w || 
									'Cadastro de Etapas do check-up ' || 
									chr(13)||chr(10) ||'#@#@');*/
 
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(264558,	'DS_ETAPA_REQUERENTE_W='||DS_ETAPA_REQUERENTE_W || ';' ||'DS_ETAPA_REQ_MSN_W='|| DS_ETAPA_REQ_MSN_W);							
	end if;	
	 
--	end; 
end if;
 
commit;
  
  
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE valida_etapa_requerida ( nr_seq_checkup_etapa_p bigint, nm_usuario_p text) FROM PUBLIC;

