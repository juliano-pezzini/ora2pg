-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_mens_sca_retro ( nr_seq_mensalidade_seg_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_pagador_sca_w		pls_contrato_pagador.nr_sequencia%type	:= null;
nr_seq_preco_ant_w		pls_segurado_preco_origem.nr_sequencia%type	:= null;
nr_seq_segurado_preco_w		pls_segurado_preco_origem.nr_sequencia%type	:= null;
vl_preco_atual_w		pls_segurado_preco_origem.vl_preco_atual%type	:= 0;
vl_sca_ant_w			pls_segurado_preco_origem.vl_preco_atual%type	:= 0;
nr_seq_reajuste_w		pls_reajuste.nr_sequencia%type	:= null;
nr_seq_reajuste_retro_w		pls_reajuste.nr_sequencia%type	:= null;
tx_reajuste_w			pls_reajuste.tx_reajuste%type	:= 0;
dt_reajuste_w			pls_reajuste.dt_reajuste%type	:= null;
nr_seq_vinculo_sca_w		pls_sca_vinculo.nr_sequencia%type;
dt_inicio_vigencia_w		pls_sca_vinculo.dt_inicio_vigencia%type;
dt_fim_vigencia_w		pls_sca_vinculo.dt_fim_vigencia%type;
nr_seq_plano_w			pls_plano.nr_sequencia%type;
ie_lancamento_mensalidade_w	pls_plano.ie_lancamento_mensalidade%type;
ds_sca_w			pls_plano.ds_plano%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type	:= null;
dt_referencia_reajuste_w	pls_reajuste_cobr_retro.dt_referencia_reajuste%type;
dt_mesano_referencia_w		pls_mensalidade_segurado.dt_mesano_referencia%type;
qt_mensalidade_gerada_w		integer	:= 0;
qt_mens_retro_w			integer	:= 0;
vl_reajuste_w			double precision;
ds_mensagem_reajuste_w		varchar(4000)	:= null;
dt_ultimo_dia_mes_w		varchar(2);
qt_dias_proporcional_w		integer;
dt_rescisao_w			pls_segurado.dt_rescisao%type;
nr_seq_item_mensalidade_w	pls_mensalidade_seg_item.nr_sequencia%type;
ie_reaj_retro_benef_resc_w	pls_parametros.ie_reaj_retro_benef_resc%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_vinculo_sca,
		coalesce(a.nr_seq_pagador,pls_store_data_mens_pck.get_nr_seq_pagador_benef) nr_seq_pagador,
		a.nr_seq_plano,
		coalesce(a.ie_lancamento_mensalidade,b.ie_lancamento_mensalidade) ie_lancamento_mensalidade,
		b.ds_plano,
		a.dt_inicio_vigencia,
		a.dt_fim_vigencia
	from	pls_sca_vinculo		a,
		pls_plano		b
	where	a.nr_seq_plano		= b.nr_sequencia
	and	a.nr_seq_segurado	= nr_seq_segurado_w;

C02 CURSOR FOR
	SELECT	a.dt_referencia_reajuste
	from	pls_reajuste_cobr_retro	a,
		pls_reajuste		b
	where	a.nr_seq_reajuste	= b.nr_sequencia
	and	b.nr_sequencia		= nr_seq_reajuste_w
	and	a.dt_referencia_mensalidade	= dt_mesano_referencia_w
	and	coalesce(a.dt_liberacao::text, '') = '';


BEGIN
select	count(1)
into STRICT	qt_mensalidade_gerada_w
from	pls_mensalidade_segurado
where	nr_sequencia	= nr_seq_mensalidade_seg_p;

if (qt_mensalidade_gerada_w > 0) then
	nr_seq_segurado_w	:= pls_store_data_mens_pck.get_nr_seq_segurado;
	dt_mesano_referencia_w	:= pls_store_data_mens_pck.get_dt_mesano_referencia;
	dt_rescisao_w		:= trunc(pls_store_data_mens_pck.get_dt_rescisao, 'dd');
	ie_reaj_retro_benef_resc_w := pls_store_data_mens_pck.get_ie_reaj_retro_benef_resc;

	open C01;
	loop
	fetch C01 into
		nr_seq_vinculo_sca_w,
		nr_seq_pagador_sca_w,
		nr_seq_plano_w,
		ie_lancamento_mensalidade_w,
		ds_sca_w,
		dt_inicio_vigencia_w,
		dt_fim_vigencia_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (pls_store_data_mens_pck.get_nr_seq_pagador = nr_seq_pagador_sca_w) and (ie_lancamento_mensalidade_w <> 'E') and /* Não pode cobrar quando o valor é embutido, com exceção para embutido acrescendo o preço pré */
			((coalesce(dt_rescisao_w::text, '') = '') or (dt_rescisao_w > pls_store_data_mens_pck.get_dt_mesano_referencia) or (ie_reaj_retro_benef_resc_w = 'S')) then

			select	max(nr_sequencia)
			into STRICT	nr_seq_segurado_preco_w
			from	pls_segurado_preco_origem
			where	nr_seq_vinculo_sca	= nr_seq_vinculo_sca_w
			and	nr_seq_segurado		= nr_seq_segurado_w
			and	cd_motivo_reajuste	= 'I'
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

			if (coalesce(nr_seq_segurado_preco_w,0) <> 0) then
				select	coalesce(vl_preco_atual,0),
					coalesce(nr_seq_reajuste,0),
					coalesce(vl_preco_atual,0) - coalesce(vl_preco_ant,0)
				into STRICT	vl_preco_atual_w,
					nr_seq_reajuste_w,
					vl_reajuste_w
				from	pls_segurado_preco_origem
				where	nr_sequencia	= nr_seq_segurado_preco_w;

				if (nr_seq_reajuste_w <> 0) then
					select	dt_reajuste,
						tx_reajuste
					into STRICT	dt_reajuste_w,
						tx_reajuste_w
					from	pls_reajuste
					where	nr_sequencia	= nr_seq_reajuste_w;
				end if;

				if (coalesce(vl_reajuste_w,0) = 0) then
					/* Obter o valor anterior do SCA do beneficiário */

					select	max(nr_sequencia)
					into STRICT	nr_seq_preco_ant_w
					from 	pls_segurado_preco_origem
					where	nr_seq_vinculo_sca	= nr_seq_vinculo_sca_w
					and	nr_seq_segurado		= nr_seq_segurado_w
					and	nr_sequencia		<> nr_seq_segurado_preco_w
					and	dt_reajuste		< dt_reajuste_w
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

					/* Segundo a OS 144763, o valor do reajuste deve ser sobre os valores com desconto */

					if (coalesce(nr_seq_preco_ant_w,0) <> 0) then
						select	coalesce(vl_preco_atual,0)
						into STRICT	vl_sca_ant_w
						from	pls_segurado_preco_origem
						where	nr_sequencia	= nr_seq_preco_ant_w;

						vl_reajuste_w	:= coalesce(vl_preco_atual_w,0) - coalesce(vl_sca_ant_w,0);
					end if;
				end if;

				open C02;
				loop
				fetch C02 into
					dt_referencia_reajuste_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					/* Verifica se o SCA estava ativo no mês da cobrança retroativa */

					if (trunc(dt_referencia_reajuste_w,'month') between trunc(coalesce(dt_inicio_vigencia_w,dt_referencia_reajuste_w),'month') and trunc(coalesce(dt_fim_vigencia_w,dt_referencia_reajuste_w),'month')) then

						select	max(c.nr_seq_reajuste)
						into STRICT	nr_seq_reajuste_retro_w
						from	pls_mensalidade_segurado	a,
							pls_mensalidade_seg_item	b,
							pls_segurado_preco_origem	c
						where	b.nr_seq_mensalidade_seg = a.nr_sequencia
						and	b.nr_seq_seg_preco_origem = c.nr_sequencia
						and	a.nr_seq_segurado	= nr_seq_segurado_w
						and	a.dt_mesano_referencia	= dt_referencia_reajuste_w;

						/* Verificar se existe o mês da cobrança retroativa já não estava reajustado, ou se já foi realizada a cobrança retroativa desse mês */

						select	count(1)
						into STRICT	qt_mens_retro_w
						from	pls_mensalidade_segurado	a,
							pls_segurado			b,
							pls_mensalidade_seg_item	c,
							pls_mensalidade			d
						where	a.nr_seq_segurado	= b.nr_sequencia
						and	c.nr_seq_mensalidade_seg = a.nr_sequencia
						and	a.nr_seq_mensalidade	= d.nr_sequencia
						and	b.nr_sequencia		= nr_seq_segurado_w
						and	c.nr_seq_vinculo_sca	= nr_seq_vinculo_sca_w
						and	a.dt_mesano_referencia	= dt_mesano_referencia_w
						and	c.ie_tipo_item		= '4'
						and	coalesce(d.dt_cancelamento::text, '') = '';

						if (trunc(dt_mesano_referencia_w,'month') <> trunc(dt_referencia_reajuste_w,'month')) and /* Data de geração da mensalidade não pode ser igual a data retroativa */
							(coalesce(nr_seq_reajuste_retro_w,0) <> nr_seq_reajuste_w) and /* Verifica se a mensalidade que está cobrando a retroativa não teve o reajuste */
							(qt_mens_retro_w = 0) then /* Verifica se já foi realizada a cobrança retroativa ou se já estava reajustada */
							if (vl_reajuste_w <> 0) then
								ds_mensagem_reajuste_w	:= 'SCA: '||ds_sca_w||chr(13)||chr(10)||'Cobrança retroativa ao mês '||dt_referencia_reajuste_w||', referente ao reajuste de '||tx_reajuste_w||'% de '||to_char(dt_reajuste_w,'mm/yyyy');

								nr_seq_item_mensalidade_w := null;

								nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('4', nm_usuario_p, null, ds_mensagem_reajuste_w, null, null, null, dt_referencia_reajuste_w, null, 'N', null, null, null, null, null, null, null, nr_seq_mensalidade_seg_p, null, null, null, null, null, null, null, null, null, nr_seq_vinculo_sca_w, null, null, null, vl_reajuste_w, nr_seq_item_mensalidade_w);
							end if;
						end if;
					end if;
					end;
				end loop;
				close C02;
			end if;
		end if;
		end;
	end loop;
	close C01;
end if;

/* NÂO PODE DAR COMMIT
commit;*/
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_mens_sca_retro ( nr_seq_mensalidade_seg_p bigint, nm_usuario_p text) FROM PUBLIC;

