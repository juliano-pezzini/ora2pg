-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_calcular_vinculo_direto ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, ie_gravar_log_p text, nm_usuario_p text, vl_medico_p INOUT bigint, vl_anestesista_p INOUT bigint, vl_auxiliares_p INOUT bigint, vl_custo_operacional_p INOUT bigint, vl_materiais_p INOUT bigint, vl_procedimento_p INOUT bigint, vl_total_procedimento_p INOUT bigint) AS $body$
DECLARE


/* Rotina utilizada para o cadastro de vinculo direto localizada na função OPS - Cadastro de Regras */

nr_seq_proc_w                   bigint;
cd_procedimento_w               bigint;
ie_origem_proced_w              bigint;
nr_seq_vinculo_w                bigint;
pr_medico_w                     double precision;
pr_anestesista_w                double precision;
pr_auxiliares_w                 double precision;
pr_custo_operacional_w          double precision;
pr_materiais_w                  double precision;
vl_medico_w                     double precision    := 0;
vl_anestesista_w                double precision    := 0;
vl_auxiliares_w                 double precision    := 0;
vl_custo_operacional_w          double precision    := 0;
vl_materiais_w                  double precision    := 0;
vl_medico_ww                    double precision    := 0;
vl_anestesista_ww               double precision    := 0;
vl_auxiliares_ww                double precision    := 0;
vl_custo_operacional_ww         double precision    := 0;
vl_materiais_ww                 double precision    := 0;
vl_total_procedimento_w         double precision    := 0;
pr_medico_ww                    double precision;
pr_anestesista_ww               double precision;
pr_auxiliares_ww                double precision;
pr_custo_operacional_ww         double precision;
pr_materiais_ww                 double precision;
nr_seq_vinculo_regra_w          bigint;
ie_tipo_despesa_w               varchar(10);
ie_tipo_despesa_mat_w           varchar(10);
cd_estabelecimento_w            bigint;
vl_procedimento_w               double precision;
ie_gravar_log_w                 varchar(1)     := 'N';
ds_observacao_log_w             varchar(2000);
cd_proc_vinculo_w               bigint;
ie_origem_proc_vinculo_w        bigint;
ie_tipo_conta_w                 varchar(10);
qt_regra_vinculo_w		integer;

C01 CURSOR FOR
        SELECT  a.nr_sequencia,
                a.cd_procedimento,
                a.ie_origem_proced,
                b.nr_sequencia,
                b.pr_medico,
                b.pr_anestesista,
                b.pr_auxiliares,
                b.pr_custo_operacional,
                b.pr_materiais
        from    pls_vinculo_direto      b,
                pls_conta_proc          a
        where   a.nr_seq_conta          = nr_seq_conta_p
        and     b.ie_situacao           = 'A'
        and     a.cd_procedimento       = b.cd_procedimento
        and     a.ie_origem_proced      = b.ie_origem_proced
        and     b.cd_estabelecimento    = cd_estabelecimento_w
        and     a.nr_sequencia          = nr_seq_conta_proc_p
        and     ((coalesce(b.ie_tipo_conta::text, '') = '') or (b.ie_tipo_conta = 'A') or
                ((b.ie_tipo_conta = ie_tipo_conta_w) or (b.ie_tipo_conta = 'O' AND ie_tipo_conta_w = 'C')));

C02 CURSOR FOR
        SELECT  a.nr_sequencia,
                coalesce(a.pr_medico, pr_medico_w),
                coalesce(a.pr_anestesista, pr_anestesista_w),
                coalesce(a.pr_auxiliares, pr_auxiliares_w),
                coalesce(a.pr_custo_operacional, pr_custo_operacional_w),
                coalesce(a.pr_materiais, pr_materiais_w)
        from    pls_vinculo_direto_regra        a
        where   a.nr_seq_vinculo        = nr_seq_vinculo_w
        and     a.ie_situacao           = 'A'
        and     ((coalesce(a.cd_procedimento::text, '') = '')	or (a.cd_procedimento     = cd_proc_vinculo_w and a.ie_origem_proced    = ie_origem_proc_vinculo_w))
        and     ((a.ie_tipo_despesa     = ie_tipo_despesa_w) or (coalesce(a.ie_tipo_despesa::text, '') = ''))
        and     ((a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w) or (coalesce(a.ie_tipo_despesa_mat::text, '') = ''))
        and     vl_total_procedimento_w between coalesce(vl_minimo,0) and coalesce(vl_maximo,999999999999);

C03 CURSOR FOR
        SELECT  a.cd_procedimento,
                a.ie_origem_proced,
                a.ie_tipo_despesa,
                coalesce(sum(a.vl_medico),0),
                coalesce(sum(a.vl_anestesista),0),
                coalesce(sum(a.vl_auxiliares),0),
                coalesce(sum(a.vl_custo_operacional),0),
                coalesce(sum(a.vl_materiais),0),
                coalesce(sum(a.vl_total_procedimento),0),
                null
        from    pls_conta_proc  a
        where   a.nr_seq_conta  = nr_seq_conta_p
        and     a.nr_sequencia  != nr_seq_conta_proc_p
        group by a.cd_procedimento,
                 a.ie_origem_proced,
                 a.ie_tipo_despesa

union all

        SELECT  null,
                null,
                null,
                coalesce(sum(0),0),
                coalesce(sum(0),0),
                coalesce(sum(0),0),
                coalesce((sum(a.vl_material) - sum(coalesce(a.vl_taxa_material,0))),0) ,
                coalesce((sum(a.vl_material) - sum(coalesce(a.vl_taxa_material,0))),0) ,
                coalesce((sum(a.vl_material) - sum(coalesce(a.vl_taxa_material,0))),0) ,
                a.ie_tipo_despesa
        from    pls_conta_mat   a
        where   a.nr_seq_conta  = nr_seq_conta_p
        group by a.ie_tipo_despesa;


BEGIN

select	count(1)
into STRICT	qt_regra_vinculo_w
from	pls_vinculo_direto
where	ie_situacao	= 'A';

if (qt_regra_vinculo_w > 0) then
	ie_gravar_log_w := ie_gravar_log_p;

	vl_medico_p             := null;
	vl_anestesista_p        := null;
	vl_auxiliares_p         := null;
	vl_custo_operacional_p  := null;
	vl_materiais_p          := null;
	vl_procedimento_p       := null;
	vl_total_procedimento_p := null;

	select  max(cd_estabelecimento),
		max(ie_tipo_conta)
	into STRICT    cd_estabelecimento_w,
		ie_tipo_conta_w
	from    pls_conta
	where   nr_sequencia    = nr_seq_conta_p;

	open C01;
	loop
	fetch C01 into
		nr_seq_proc_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_vinculo_w,
		pr_medico_w,
		pr_anestesista_w,
		pr_auxiliares_w,
		pr_custo_operacional_w,
		pr_materiais_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		open C03;
		loop
		fetch C03 into
			cd_proc_vinculo_w,
			ie_origem_proc_vinculo_w,
			ie_tipo_despesa_w,
			vl_medico_w,
			vl_anestesista_w,
			vl_auxiliares_w,
			vl_custo_operacional_w,
			vl_materiais_w,
			vl_total_procedimento_w,
			ie_tipo_despesa_mat_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin

			open C02;
			loop
			fetch C02 into
				nr_seq_vinculo_regra_w,
				pr_medico_ww,
				pr_anestesista_ww,
				pr_auxiliares_ww,
				pr_custo_operacional_ww,
				pr_materiais_ww;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				vl_medico_w             := dividir(vl_medico_w * pr_medico_ww,100);
				vl_anestesista_w        := dividir(vl_anestesista_w * pr_anestesista_ww,100);
				vl_auxiliares_w         := dividir(vl_auxiliares_w * pr_auxiliares_ww,100);
				vl_custo_operacional_w  := dividir(vl_custo_operacional_w * pr_custo_operacional_ww,100);
				vl_materiais_w          := dividir(vl_materiais_w * pr_materiais_ww,100);

				vl_medico_ww            := vl_medico_ww + vl_medico_w;
				vl_anestesista_ww       := vl_anestesista_ww + vl_anestesista_w;
				vl_auxiliares_ww        := vl_auxiliares_ww + vl_auxiliares_w;
				vl_custo_operacional_ww := vl_custo_operacional_ww + vl_custo_operacional_w;
				vl_materiais_ww         := vl_materiais_ww + vl_materiais_w;
				end;
			end loop;
			close C02;
			end;
		end loop;
		close C03;

		if (nr_seq_vinculo_regra_w > 0) then
			vl_procedimento_w       := vl_medico_ww + vl_anestesista_ww + vl_auxiliares_ww +  vl_custo_operacional_ww + vl_materiais_ww;

			ds_observacao_log_w     :=      '% médico= ' || pr_medico_ww ||
									' % anestesista= ' || pr_anestesista_ww ||
									' % auxiliares= ' || pr_auxiliares_ww ||
									' % custo operacional= ' || pr_custo_operacional_ww ||
									' % materiais= ' || pr_materiais_ww;

			CALL pls_gravar_log_calculo_proc(ie_gravar_log_w, nr_seq_conta_proc_p, cd_estabelecimento_w,
							'Ajuste vínculo Direto', ds_observacao_log_w, 'pls_calcular_vinculo_direto',
							vl_procedimento_w, vl_materiais_ww, vl_custo_operacional_ww,
							vl_medico_ww, vl_auxiliares_ww, vl_anestesista_ww,
							7, null, null,
							null, null, null, nm_usuario_p);

			vl_medico_p                     := vl_medico_ww;
			vl_anestesista_p        := vl_anestesista_ww;
			vl_auxiliares_p         := vl_auxiliares_ww;
			vl_custo_operacional_p  := vl_custo_operacional_ww;
			vl_materiais_p          := vl_materiais_ww;
			vl_procedimento_p       := vl_procedimento_w;
			vl_total_procedimento_p	:= vl_medico_ww + vl_anestesista_ww + vl_auxiliares_ww + vl_custo_operacional_ww + vl_materiais_ww;

			update  pls_conta_proc
			set     nr_seq_regra_vinculo    = nr_seq_vinculo_w
			where   nr_sequencia            = nr_seq_proc_w;

			/* Francisco 09/05/2012 - Agora só irá retornar os valores pra pls_atualiza_valor_proc */

		end if;
		end;
	end loop;
	close C01;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_calcular_vinculo_direto ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, ie_gravar_log_p text, nm_usuario_p text, vl_medico_p INOUT bigint, vl_anestesista_p INOUT bigint, vl_auxiliares_p INOUT bigint, vl_custo_operacional_p INOUT bigint, vl_materiais_p INOUT bigint, vl_procedimento_p INOUT bigint, vl_total_procedimento_p INOUT bigint) FROM PUBLIC;

