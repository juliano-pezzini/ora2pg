-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE linkeddata_gerar_exame_externo ( nr_seq_protocolo_p bigint, nr_atendimento_p bigint, nr_seq_template_p bigint, nr_seq_reg_template_p bigint, nr_seq_linked_data_p bigint, nm_usuario_p text ) AS $body$
DECLARE


qt_exame_w			integer;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_sequencia_w			bigint;
nr_seq_exame_w			bigint;
nr_seq_exame_lab_w		bigint;
cd_convenio_w		bigint;
cd_categoria_w		varchar(10);
ie_tipo_atendimento_w	smallint;	
ds_erro_w		varchar(4000);	
cd_setor_atendimento_w	bigint;
cd_procedimento_ww	bigint;
ie_origem_proced_ww	bigint;
nr_seq_proc_interno_w	bigint;
nr_seq_proc_interno_aux_w bigint;
cd_plano_convenio_w	varchar(10);

table_name_w	varchar(50);
insert_sql_w	varchar(4000);

C01 CURSOR FOR
	SELECT	c.nr_sequencia,
		coalesce(c.qt_exame,1) qt_exame,
		b.nr_seq_apresent,
		b.ie_lado,
		c.ds_justificativa,
		c.cd_procedimento,
		c.ie_origem_proced,
		c.nr_seq_exame,
		c.nr_proc_interno,
		c.cd_material_exame
	from	med_exame_padrao c,
		med_exame_protocolo b,
		med_protocolo_exame a
	where	a.nr_sequencia	= nr_seq_protocolo_p
	and	a.nr_sequencia	= b.nr_seq_protocolo
	and	b.nr_seq_exame	= c.nr_sequencia
	
union all

	SELECT	null nr_sequencia,
		1 qt_exame,
		b.nr_seq_apresent,
		b.ie_lado,
		null ds_justificativa,
		b.cd_procedimento,
		b.ie_origem_proced,
		b.nr_seq_exame_lab nr_seq_exame,
		b.nr_proc_interno,
		NULL cd_material_exame
	from	med_exame_protocolo b,
		med_protocolo_exame a
	where	a.nr_sequencia	= nr_seq_protocolo_p
	and	a.nr_sequencia	= b.nr_seq_protocolo
	and	coalesce(b.nr_seq_exame::text, '') = '';

  c_tabela_ehr_linked CURSOR FOR
    SELECT a.nr_seq_template
          ,b.nr_sequencia
      FROM ehr_template_conteudo a
          ,linked_data           b
     WHERE a.nr_seq_linked_data = b.nr_sequencia
       AND b.nr_sequencia = nr_seq_linked_data_p
       AND a.nr_seq_template = nr_seq_template_p

     
UNION
 
          
    SELECT DISTINCT a.nr_seq_template
                   ,b.nr_sequencia
      FROM ehr_template_conteudo a
          ,linked_data           b
     WHERE a.nr_seq_linked_data = b.nr_sequencia
       AND b.nr_sequencia = nr_seq_linked_data_p
       AND a.nr_seq_template IN (SELECT a.nr_seq_template_cluster
                                   FROM ehr_template_conteudo a
                                  WHERE a.nr_seq_template = nr_seq_template_p);

c01_w	c01%rowtype;
  coluna RECORD;

BEGIN

open C01;
loop
fetch C01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	nr_seq_exame_w		:= c01_w.nr_seq_exame;
	cd_procedimento_w	:= c01_w.cd_procedimento;
	ie_origem_proced_w	:= c01_w.ie_origem_proced;
	nr_seq_proc_interno_w	:= c01_w.nr_proc_interno;
	nr_sequencia_w		:= c01_w.nr_sequencia;

	IF (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') THEN
		IF (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') THEN

			SELECT	MAX(cd_convenio),
				MAX(cd_categoria),
				MAX(ie_tipo_Atendimento),
				MAX(cd_plano_convenio)
			INTO STRICT	cd_convenio_w,
				cd_categoria_w,
				ie_tipo_atendimento_w,
				cd_plano_convenio_w
			FROM	atendimento_paciente_v
			WHERE	nr_atendimento	= nr_atendimento_p;

			SELECT * FROM Obter_Exame_Lab_Convenio(	nr_seq_exame_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, wheb_usuario_pck.get_cd_estabelecimento, NULL, NULL, NULL, cd_plano_convenio_w, cd_setor_atendimento_w, cd_procedimento_ww, ie_origem_proced_ww, ds_erro_w, nr_seq_proc_interno_aux_w) INTO STRICT cd_setor_atendimento_w, cd_procedimento_ww, ie_origem_proced_ww, ds_erro_w, nr_seq_proc_interno_aux_w;

			if (nr_seq_proc_interno_aux_w > 0) then
				nr_seq_proc_interno_w 	:= nr_seq_proc_interno_aux_w;
			end if;
			if (coalesce(cd_procedimento_ww,0)	<> 0) then
				cd_procedimento_w	:= cd_procedimento_ww;
				ie_origem_proced_w	:= ie_origem_proced_ww;
			end if;	
		elsif (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
			SELECT * FROM Obter_Proc_Tab_Interno(nr_seq_proc_interno_w, null, nr_atendimento_p, null, cd_procedimento_w, ie_origem_proced_w, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;	
		end if;
	end if;

  FOR r_tabela_ehr_linked IN c_tabela_ehr_linked LOOP
    table_name_w := upper('ehr_linked_' || r_tabela_ehr_linked.nr_seq_template || '_' || r_tabela_ehr_linked.nr_sequencia);

    insert_sql_w := ' insert into ' || table_name_w || ' (' ||
                    'NR_SEQUENCIA,' ||
                    'NR_SEQ_TEMPLATE,' ||
                    'NR_SEQ_LINKED_DATA,' || 
                    'NR_SEQ_REG_TEMPLATE,' || 
                    'DT_ATUALIZACAO,' || 
                    'DT_ATUALIZACAO_NREC,'||
                    'NM_USUARIO,'||
                    'NM_USUARIO_NREC'||
                    '##) ' ||
                    ' values (' || 
                    table_name_w || '_SEQ.nextval,' ||
                    nr_seq_template_p || ',' || 
                    nr_seq_linked_data_p || ',' ||
                    nr_seq_reg_template_p || ',' ||
                    'sysdate,' ||
                    'sysdate,' ||
                    ''''||nm_usuario_p || '''' || ',' ||
                    ''''||nm_usuario_p || '''' ||
                    '@@) ';
    
    for coluna in (
        SELECT column_name nome
        from user_tab_cols 
        where table_name = table_name_w
        order by column_name asc
    ) loop  
          if (upper(coluna.nome) = upper('NR_SEQ_TEMPLATE') or
              upper(coluna.nome) = upper('NR_SEQ_LINKED_DATA') or
              upper(coluna.nome) = upper('NR_SEQ_REG_TEMPLATE') or 
              upper(coluna.nome) = upper('DT_ATUALIZACAO') or
              upper(coluna.nome) = upper('DT_ATUALIZACAO_NREC') or
              upper(coluna.nome) = upper('NM_USUARIO') or
              upper(coluna.nome) = upper('NM_USUARIO_NREC') or
              upper(coluna.nome) = upper('NR_SEQUENCIA')) then
            null;
          else
            insert_sql_w := replace(insert_sql_w, '##', ',' || upper(coluna.nome) || '##');

            if (upper(coluna.nome) = upper('NR_SEQ_PROTOCOLO')) then
              select 
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(nr_seq_protocolo_p::text, '') = '' THEN  'null'  ELSE nr_seq_protocolo_p END   || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('NR_SEQ_EXAME')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(c01_w.nr_sequencia::text, '') = '' THEN  'null'  ELSE c01_w.nr_sequencia END  || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('QT_EXAME')) then
              select
                  replace(insert_sql_w, '@@', ',' || coalesce(c01_w.qt_exame, 1) || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('NR_SEQ_APRESENT')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(c01_w.nr_seq_apresent::text, '') = '' THEN  'null'  ELSE c01_w.nr_seq_apresent END  || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('IE_LADO')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(c01_w.ie_lado::text, '') = '' THEN  'null'  ELSE '''' || c01_w.ie_lado || '''' END  || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('DS_JUSTIFICATIVA')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(c01_w.ds_justificativa::text, '') = '' THEN  'null'  ELSE '''' || c01_w.ds_justificativa || '''' END  || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('CD_PROCEDIMENTO')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(cd_procedimento_w::text, '') = '' THEN  'null'  ELSE cd_procedimento_w END  || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('IE_ORIGEM_PROCED')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(ie_origem_proced_w::text, '') = '' THEN  'null'  ELSE ie_origem_proced_w END  || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('NR_SEQ_EXAME_LAB')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(nr_seq_exame_w::text, '') = '' THEN  'null'  ELSE nr_seq_exame_w END  || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('NR_PROC_INTERNO')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(c01_w.nr_proc_interno::text, '') = '' THEN  'null'  ELSE c01_w.nr_proc_interno END  || '@@')
              into STRICT insert_sql_w
;
            elsif (upper(coluna.nome) = upper('CD_MATERIAL_EXAME')) then
              select
                  replace(insert_sql_w, '@@', ',' || CASE WHEN coalesce(c01_w.cd_material_exame::text, '') = '' THEN  'null'  ELSE '''' || c01_w.cd_material_exame || '''' END  || '@@')
              into STRICT insert_sql_w
;
            else
              insert_sql_w := replace(insert_sql_w, '@@', ',null@@');
            end if;
          end if;
    end loop;

    insert_sql_w := replace(insert_sql_w, '##', '');
    insert_sql_w := replace(insert_sql_w, '@@', '');
    insert_sql_w := replace(insert_sql_w, '(,', '(');
    insert_sql_w := replace(insert_sql_w, ',)', ')');

    EXECUTE insert_sql_w;
  END LOOP;

	end;
end loop;
close C01;
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE linkeddata_gerar_exame_externo ( nr_seq_protocolo_p bigint, nr_atendimento_p bigint, nr_seq_template_p bigint, nr_seq_reg_template_p bigint, nr_seq_linked_data_p bigint, nm_usuario_p text ) FROM PUBLIC;

