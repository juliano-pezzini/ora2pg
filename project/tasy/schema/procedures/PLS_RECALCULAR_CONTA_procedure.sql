-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_recalcular_conta ( nr_seq_conta_p bigint, nm_usuario_p text, ie_origem_rec_p text, ie_abrir_lanc_p text, ie_processo_p text, nr_seq_analise_p bigint, nr_seq_lote_conta_p pls_lote_protocolo_conta.nr_sequencia%type) AS $body$
DECLARE


				
/*	ie_origem_rec_p
	C - Consist?ncia da Conta
	Mant?m o processo da mesma forma como ocorre hoje, utilizado na pls_consistir_conta
	G - Glosar item
	Por hora ir? realizar somente o rec?lculo quando dos itens estiverem com o campo ie_via_obrigat?ria = 'S', deve rec?lcular estes itens sem impactar nos status dos mesmo que deve ficar inalterado ap?s a consist?ncia
	
	*/
nr_seq_conta_proc_w             pls_conta_proc.nr_sequencia%type;
ie_tipo_despesa_w               varchar(10);
nr_seq_conta_mat_w              bigint;
cd_estabelecimento_w            bigint;
ie_calculo_pacote_w             varchar(2);
ie_atualiza_apresentado_w       varchar(1);
vl_procedimento_w               double precision;
ie_vinculo_direto_w             varchar(1);
vl_procedimento_imp_w           double precision;
cd_procedimento_w               procedimento.cd_procedimento%type;
ie_origem_proced_w              procedimento.ie_origem_proced%type;
vl_liberado_w                   double precision;
qt_procedimento_dif_w           bigint;
vl_calculado_w                  double precision;
ie_geracao_pos_estab_w		varchar(1);
qt_conta_mat_w			bigint;
vl_tot_calc_w			double precision;
ie_composicao_w			varchar(1);
nr_seq_pacote_w			pls_pacote.nr_sequencia%type;
nr_seq_log_exec_w		pls_cta_log_exec.nr_sequencia%type;
ie_tipo_conta_w			pls_conta.ie_tipo_conta%type;
qt_regra_tx_mat_w		integer;
tx_item_w			pls_conta_proc.tx_item%type;
ie_manter_vl_apresentado_w	pls_parametros.ie_manter_vl_apresentado%type;
ie_gerar_Previa_pos_w		pls_parametros.ie_gerar_previa_pos%type;

C01 CURSOR FOR
        /* Francisco - 09/05/2012 - Tive que separar em dois unions por causa do
        v?nculo direto, tem que calcular esses procedimentos por ?ltimo */
        SELECT  a.nr_sequencia,
                a.ie_tipo_despesa,
                'N' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado, /* O valor calculado para verifica?a? do order by deve ser a somat?ria de todos os valores individuais calculados OS 580588 dgkorz*/
                dividir(coalesce(vl_custo_operacional,0)+ coalesce(vl_anestesista,0) + coalesce(vl_medico,0) + coalesce(vl_materiais,0) + coalesce(vl_auxiliares,0),a.qt_procedimento_imp) vl_proc,
		a.vl_procedimento vl_calc,
		a.nr_seq_pacote,
		a.tx_item
        from    pls_conta_proc a
        where   nr_seq_conta    = nr_seq_conta_p
	and	(nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '')
	and	ie_status	in ('A', 'C', 'L', 'P', 'S', 'U')
        and     not exists (SELECT 1
                                from    pls_vinculo_direto x
                                where   x.cd_procedimento = a.cd_procedimento
                                and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '' AND nr_seq_regra_qtde_exec <> 0) or (ie_glosa = 'S'))))
        
union all

        select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'S' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
                dividir(coalesce(vl_custo_operacional,0)+ coalesce(vl_anestesista,0) + coalesce(vl_medico,0) + coalesce(vl_materiais,0) + coalesce(vl_auxiliares,0),a.qt_procedimento_imp) vl_proc,
		a.vl_procedimento vl_calc,
		a.nr_seq_pacote,
		a.tx_item
        from    pls_conta_proc a
        where   nr_seq_conta    = nr_seq_conta_p
	and	(nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '')
	and	ie_status	in ('A', 'C', 'L', 'P', 'S', 'U')
        and     exists (select 1
                        from    pls_vinculo_direto x
                        where   x.cd_procedimento = a.cd_procedimento
                        and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((ie_via_obrigatoria 	= 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '' AND nr_seq_regra_qtde_exec <> 0) or (ie_glosa = 'S'))))
	
union all

	select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'N' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado, /* O valor calculado para verifica?a? do order by deve ser a somat?ria de todos os valores individuais calculados OS 580588 dgkorz*/
                dividir(coalesce(vl_custo_operacional,0)+ coalesce(vl_anestesista,0) + coalesce(vl_medico,0) + coalesce(vl_materiais,0) + coalesce(vl_auxiliares,0),a.qt_procedimento_imp) vl_proc,
		a.vl_procedimento vl_calc,
		a.nr_seq_pacote,
		a.tx_item
        from    pls_conta_proc a
        where   a.nr_seq_conta	in (	select	x.nr_sequencia
					from	pls_conta x
					where	x.nr_seq_analise	= nr_seq_analise_p)
	and	(nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '')
	and	ie_status	in ('A', 'C', 'L', 'P', 'S', 'U')
        and     not exists (select 1
                                from    pls_vinculo_direto x
                                where   x.cd_procedimento = a.cd_procedimento
                                and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '' AND nr_seq_regra_qtde_exec <> 0) or (ie_glosa = 'S'))))
        
union all

        select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'S' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
                dividir(coalesce(vl_custo_operacional,0)+ coalesce(vl_anestesista,0) + coalesce(vl_medico,0) + coalesce(vl_materiais,0) + coalesce(vl_auxiliares,0),a.qt_procedimento_imp) vl_proc,
		a.vl_procedimento vl_calc,
		a.nr_seq_pacote,
		a.tx_item
        from    pls_conta_proc a
        where   a.nr_seq_conta	in (	select	x.nr_sequencia
					from	pls_conta x
					where	x.nr_seq_analise	= nr_seq_analise_p)
	and	(nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '')
	and	ie_status	in ('A', 'C', 'L', 'P', 'S', 'U')
        and     exists (select 1
                        from    pls_vinculo_direto x
                        where   x.cd_procedimento = a.cd_procedimento
                        and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((ie_via_obrigatoria 	= 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '' AND nr_seq_regra_qtde_exec <> 0) or (ie_glosa = 'S'))))
	
union all

	select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'N' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado, /* O valor calculado para verifica?a? do order by deve ser a somat?ria de todos os valores individuais calculados OS 580588 dgkorz*/
                dividir(coalesce(vl_custo_operacional,0)+ coalesce(vl_anestesista,0) + coalesce(vl_medico,0) + coalesce(vl_materiais,0) + coalesce(vl_auxiliares,0),a.qt_procedimento_imp) vl_proc,
		a.vl_procedimento vl_calc,
		a.nr_seq_pacote,
		a.tx_item
        from    pls_conta_proc a
        where   a.nr_seq_conta	in (	select	x.nr_sequencia
					from	pls_conta_v x
					where	x.nr_seq_lote_conta	= nr_seq_lote_conta_p)
	and	ie_status	in ('A', 'C', 'L', 'P', 'S', 'U')
        and     not exists (select 1
                                from    pls_vinculo_direto x
                                where   x.cd_procedimento = a.cd_procedimento
                                and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '' AND nr_seq_regra_qtde_exec <> 0) or (ie_glosa = 'S'))))
        
union all

        select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'S' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
                dividir(coalesce(vl_custo_operacional,0)+ coalesce(vl_anestesista,0) + coalesce(vl_medico,0) + coalesce(vl_materiais,0) + coalesce(vl_auxiliares,0),a.qt_procedimento_imp) vl_proc,
		a.vl_procedimento vl_calc,
		a.nr_seq_pacote,
		a.tx_item
        from    pls_conta_proc a
        where   a.nr_seq_conta	in (	select	x.nr_sequencia
					from	pls_conta_v x
					where	x.nr_seq_lote_conta	= nr_seq_lote_conta_p)
	and	ie_status	in ('A', 'C', 'L', 'P', 'S', 'U')
        and     exists (select 1
                        from    pls_vinculo_direto x
                        where   x.cd_procedimento = a.cd_procedimento
                        and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((ie_via_obrigatoria 	= 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '' AND nr_seq_regra_qtde_exec <> 0) or (ie_glosa = 'S'))))
        order by vl_proc desc,
		 vl_calc desc,
                 vl_procedimento_imp desc,
                 ie_vinculo_direto,
		 nr_sequencia,
                 cd_procedimento,
                 ie_origem_proced;

C03 CURSOR FOR
        /* Francisco - 09/05/2012 - Tive que separar em dois unions por causa do
        v?nculo direto, tem que calcular esses procedimentos por ?ltimo */
        SELECT  a.nr_sequencia,
                a.ie_tipo_despesa,
                'N' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
		a.nr_seq_pacote
        from    pls_conta_proc a
	where   nr_seq_conta    = nr_seq_conta_p
	and	(nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '')
        and     ((coalesce(ie_glosa::text, '') = '') or ( ie_glosa =  'N'))
	and	ie_status	 in ('A','D', 'C', 'L', 'P', 'S', 'U')
        and     coalesce(nr_seq_regra_qtde_exec,0) <> 0
        and     not exists (SELECT 1
                                from    pls_vinculo_direto x
                                where   x.cd_procedimento = a.cd_procedimento
                                and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and
		((ie_via_obrigatoria = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))))
        
union all

        select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'S' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
		a.nr_seq_pacote
        from    pls_conta_proc a
        where   nr_seq_conta    = nr_seq_conta_p
	and	(nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '')
        and     ((coalesce(ie_glosa::text, '') = '') or ( ie_glosa =  'N'))
	and	ie_status 	in ('A','D', 'C', 'L', 'P', 'S', 'U')
        and     coalesce(nr_seq_regra_qtde_exec,0) <> 0
        and     exists (select 1
                        from    pls_vinculo_direto x
                        where   x.cd_procedimento = a.cd_procedimento
                        and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((ie_via_obrigatoria = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))))
	
union all

	 select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'N' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
		a.nr_seq_pacote
        from    pls_conta_proc a
        where   a.nr_seq_conta	in (	select	x.nr_sequencia
					from	pls_conta x
					where	x.nr_seq_analise	= nr_seq_analise_p)
	and	(nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '')
        and     ((coalesce(ie_glosa::text, '') = '') or ( ie_glosa =  'N'))
	and	ie_status	 in ('A','D', 'C', 'L', 'P', 'S', 'U')
        and     coalesce(nr_seq_regra_qtde_exec,0) <> 0
        and     not exists (select 1
                                from    pls_vinculo_direto x
                                where   x.cd_procedimento = a.cd_procedimento
                                and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((ie_via_obrigatoria = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))))
        
union all

        select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'S' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
		a.nr_seq_pacote
        from    pls_conta_proc a
        where   a.nr_seq_conta	in (	select	x.nr_sequencia
					from	pls_conta x
					where	x.nr_seq_analise	= nr_seq_analise_p)
	and	(nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '')
        and     ((coalesce(ie_glosa::text, '') = '') or ( ie_glosa =  'N'))
	and	ie_status 	in ('A','D', 'C', 'L', 'P', 'S', 'U')
        and     coalesce(nr_seq_regra_qtde_exec,0) <> 0
        and     exists (select 1
                        from    pls_vinculo_direto x
                        where   x.cd_procedimento = a.cd_procedimento
                        and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((ie_via_obrigatoria = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))))
	
union all

	 select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'N' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
		a.nr_seq_pacote
        from    pls_conta_proc a
        where   a.nr_seq_conta	in (	select	x.nr_sequencia
					from	pls_conta_v x
					where	x.nr_seq_lote_conta	= nr_seq_lote_conta_p)
        and     ((coalesce(ie_glosa::text, '') = '') or ( ie_glosa =  'N'))
	and	ie_status	 in ('A','D', 'C', 'L', 'P', 'S', 'U')
        and     coalesce(nr_seq_regra_qtde_exec,0) <> 0
        and     not exists (select 1
                                from    pls_vinculo_direto x
                                where   x.cd_procedimento = a.cd_procedimento
                                and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((ie_via_obrigatoria = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))))
        
union all

        select  a.nr_sequencia,
                a.ie_tipo_despesa,
                'S' ie_vinculo_direto,
                a.vl_procedimento,
                a.vl_procedimento_imp,
                a.cd_procedimento,
                a.ie_origem_proced,
                a.vl_liberado,
		a.nr_seq_pacote
        from    pls_conta_proc a
        where   a.nr_seq_conta	in (	select	x.nr_sequencia
					from	pls_conta_v x
					where	x.nr_seq_lote_conta	= nr_seq_lote_conta_p)
        and     ((coalesce(ie_glosa::text, '') = '') or ( ie_glosa =  'N'))
	and	ie_status 	in ('A','D', 'C', 'L', 'P', 'S', 'U')
        and     coalesce(nr_seq_regra_qtde_exec,0) <> 0
        and     exists (select 1
                        from    pls_vinculo_direto x
                        where   x.cd_procedimento = a.cd_procedimento
                        and     x.ie_origem_proced = a.ie_origem_proced)
	and	((ie_origem_rec_p	= 'C') or
		((ie_origem_rec_p	= 'G') and 
		((ie_via_obrigatoria = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))))
        order by vl_procedimento_imp desc,
                 ie_vinculo_direto,
		 nr_sequencia,
                 cd_procedimento,
                 ie_origem_proced;
		
C04 CURSOR(	nr_seq_analise_pc	pls_conta.nr_seq_analise%type,
		nr_seq_lote_conta_pc	pls_lote_protocolo_conta.nr_sequencia%type)FOR
	SELECT	nr_sequencia
	from	pls_conta
	where	nr_seq_analise		= nr_seq_analise_pc
	
union all

	SELECT	nr_sequencia
	from	pls_conta_v
	where	nr_seq_lote_conta	= nr_seq_lote_conta_pc;
	
C05 CURSOR(	nr_seq_analise_pc	pls_conta.nr_seq_analise%type,
		nr_seq_lote_conta_pc	pls_lote_protocolo_conta.nr_sequencia%type)FOR
	SELECT	c.nr_seq_conta
	from	pls_conta_mat_v	c
	where	c.nr_seq_analise	= nr_seq_analise_pc
	group by nr_seq_conta
	
union all

	SELECT	c.nr_seq_conta
	from	pls_conta_mat_v	c
	where	c.nr_seq_lote_conta	= nr_seq_lote_conta_pc
	group by nr_seq_conta;
BEGIN
/* Obter dados da conta */

select  max(cd_estabelecimento),
	max(ie_tipo_conta)
into STRICT    cd_estabelecimento_w,
	ie_tipo_conta_w
from (SELECT	cd_estabelecimento,
		ie_tipo_conta
	from	pls_conta_v
	where   nr_sequencia    = nr_seq_conta_p
	
union all

	SELECT	cd_estabelecimento,
		ie_tipo_conta
	from	pls_conta_v
	where   nr_seq_analise	= nr_seq_analise_p
	
union all

	select	cd_estabelecimento,
		ie_tipo_conta
	from	pls_conta_v
	where   nr_seq_lote_conta	= nr_seq_lote_conta_p) alias2;

/* Felipe 04/07/2011 - OS 330793 - Definir por qual regra ser? calculado o pre?o do pacote */

select  coalesce(max(ie_calculo_pacote),'P'),
        coalesce(max(ie_atualizar_valor_apresent),'N'),
  coalesce(max(ie_geracao_pos_estabelecido),'F'),
  coalesce(max(ie_manter_vl_apresentado), 'N'),
  coalesce(max(ie_gerar_previa_pos), 'N')
into STRICT    ie_calculo_pacote_w,
        ie_atualiza_apresentado_w,
  ie_geracao_pos_estab_w,
  ie_manter_vl_apresentado_w,
  ie_gerar_Previa_pos_w
from    pls_parametros
where   cd_estabelecimento      = cd_estabelecimento_w;

if ( (ie_gerar_Previa_pos_w = 'S') and (coalesce(ie_processo_p,'N') != 'S') )then
  if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '') then
    --Limpeza de registros de previa de pos-estabelecido de execuao anterior. Nessa rotina existirao controles para saber se pdoera ocorrer a exclusao

	--Precisa fazer isso a cada consistencia para garantir que qualquer regra de lancamento que venha a gerar novos itens no pos-estabelecido, sejam cobertos na previa
	CALL pls_excluir_previa_pos(nr_seq_conta_p, 'T');
	CALL pls_lancar_item_proc_pos(nr_seq_conta_p, nm_usuario_p);
  else
    for r_c04_w in C04(nr_seq_analise_p, nr_seq_lote_conta_p) loop
      begin
	--Limpeza de registros de previa de pos-estabelecido de execuao anterior. Nessa rotina existirao controles para saber se pdoera ocorrer a exclusao
	CALL pls_excluir_previa_pos(r_c04_w.nr_sequencia, 'T');
	CALL pls_lancar_item_proc_pos(r_c04_w.nr_sequencia, nm_usuario_p);
      end;
    end loop;
  end if;

end if;   -- do if do parametro da previa do pos
if (ie_processo_p	= 'N') then
	if (ie_manter_vl_apresentado_w = 'N') then
		if (coalesce(nr_seq_analise_p::text, '') = '') then
			if (ie_abrir_lanc_p <> 'S') then
				update  pls_conta_proc
				set     tx_medico                       = CASE WHEN ie_tx_manual='S' THEN  tx_medico  ELSE null END ,
					tx_custo_operacional            = CASE WHEN ie_tx_manual='S' THEN  tx_custo_operacional  ELSE null END ,
					tx_material                     = CASE WHEN ie_tx_manual='S' THEN  tx_material  ELSE null END ,
					vl_exame_coleta			= 0,
					nr_seq_prest_pgto_coleta	 = NULL,
					nr_seq_exame_coleta		 = NULL,
					nr_seq_regra_tx_proc		 = NULL,
					ie_regra_qtde_execucao           = NULL,
					vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE CASE WHEN coalesce(vl_unitario_imp,0)=0 THEN  dividir(vl_procedimento_imp, qt_procedimento_imp)  ELSE vl_unitario_imp END  END ,
					vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE vl_procedimento_imp END ,
					ie_vl_apresentado_sistema       = 'N'
				where   nr_seq_conta                    = nr_seq_conta_p
				and	((ie_origem_rec_p	= 'C') or
					((ie_origem_rec_p	= 'G') and
					((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))));

			else
				update  pls_conta_proc
				set     tx_medico                       = CASE WHEN ie_tx_manual='S' THEN  tx_medico  ELSE null END ,
					tx_custo_operacional            = CASE WHEN ie_tx_manual='S' THEN  tx_custo_operacional  ELSE null END ,
					tx_material                     = CASE WHEN ie_tx_manual='S' THEN  tx_material  ELSE null END ,
					nr_seq_regra_qtde_exec           = NULL,
					nr_seq_regra_tx_proc		 = NULL,
					ie_regra_qtde_execucao           = NULL,
					vl_exame_coleta			= 0,
					nr_seq_prest_pgto_coleta	 = NULL,
					nr_seq_exame_coleta		 = NULL,
					vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE CASE WHEN coalesce(vl_unitario_imp,0)=0 THEN  dividir(vl_procedimento_imp, qt_procedimento_imp)  ELSE vl_unitario_imp END  END ,
					vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE vl_procedimento_imp END ,
					ie_vl_apresentado_sistema       = 'N'
				where   nr_seq_conta                    = nr_seq_conta_p
				and	((ie_origem_rec_p	= 'C') or
					((ie_origem_rec_p	= 'G') and
					((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))));
			end if;
		else
			for r_c04_w in C04(nr_seq_analise_p, nr_seq_lote_conta_p) loop
				begin
				
				if (ie_abrir_lanc_p <> 'S') then
					update  pls_conta_proc
					set     tx_medico                       = CASE WHEN ie_tx_manual='S' THEN  tx_medico  ELSE null END ,
						tx_custo_operacional            = CASE WHEN ie_tx_manual='S' THEN  tx_custo_operacional  ELSE null END ,
						tx_material                     = CASE WHEN ie_tx_manual='S' THEN  tx_material  ELSE null END ,
						vl_exame_coleta			= 0,
						nr_seq_prest_pgto_coleta	 = NULL,
						nr_seq_exame_coleta		 = NULL,
						nr_seq_regra_tx_proc		 = NULL,
						ie_regra_qtde_execucao           = NULL,
						vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE CASE WHEN coalesce(vl_unitario_imp,0)=0 THEN  dividir(vl_procedimento_imp, qt_procedimento_imp)  ELSE vl_unitario_imp END  END ,
						vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE vl_procedimento_imp END ,
						ie_vl_apresentado_sistema       = 'N'
					where   nr_seq_conta                    = r_c04_w.nr_sequencia
					and	((ie_origem_rec_p	= 'C') or
						((ie_origem_rec_p	= 'G') and
						((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))));
				else
					update  pls_conta_proc
					set     tx_medico                       = CASE WHEN ie_tx_manual='S' THEN  tx_medico  ELSE null END ,
						tx_custo_operacional            = CASE WHEN ie_tx_manual='S' THEN  tx_custo_operacional  ELSE null END ,
						tx_material                     = CASE WHEN ie_tx_manual='S' THEN  tx_material  ELSE null END ,
						nr_seq_regra_qtde_exec           = NULL,
						nr_seq_regra_tx_proc		 = NULL,
						ie_regra_qtde_execucao           = NULL,
						vl_exame_coleta			= 0,
						nr_seq_prest_pgto_coleta	 = NULL,
						nr_seq_exame_coleta		 = NULL,
						vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE CASE WHEN coalesce(vl_unitario_imp,0)=0 THEN  dividir(vl_procedimento_imp, qt_procedimento_imp)  ELSE vl_unitario_imp END  END ,
						vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE vl_procedimento_imp END ,
						ie_vl_apresentado_sistema       = 'N'
					where   nr_seq_conta                    = r_c04_w.nr_sequencia
					and	((ie_origem_rec_p	= 'C') or
						((ie_origem_rec_p	= 'G') and
						((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))));
				end if;
				end;
			end loop;
		end if;
	else
		if (coalesce(nr_seq_analise_p::text, '') = '') then
			if (ie_abrir_lanc_p <> 'S') then
				update  pls_conta_proc
				set     tx_medico                       = CASE WHEN ie_tx_manual='S' THEN  tx_medico  ELSE null END ,
					tx_custo_operacional            = CASE WHEN ie_tx_manual='S' THEN  tx_custo_operacional  ELSE null END ,
					tx_material                     = CASE WHEN ie_tx_manual='S' THEN  tx_material  ELSE null END ,
					vl_exame_coleta			= 0,
					nr_seq_prest_pgto_coleta	 = NULL,
					nr_seq_exame_coleta		 = NULL,
					nr_seq_regra_tx_proc		 = NULL,
					ie_regra_qtde_execucao           = NULL,
					vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 0  ELSE vl_unitario_imp END   ELSE CASE WHEN coalesce(vl_unitario_imp,0)=0 THEN  dividir(vl_procedimento_imp, qt_procedimento_imp)  ELSE vl_unitario_imp END  END ,
					vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 0  ELSE vl_procedimento_imp END   ELSE vl_procedimento_imp END ,
					ie_vl_apresentado_sistema       = CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 'N'  ELSE ie_vl_apresentado_sistema END
				where   nr_seq_conta                    = nr_seq_conta_p
				and	((ie_origem_rec_p	= 'C') or
					((ie_origem_rec_p	= 'G') and 
					((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))));

			else
				update  pls_conta_proc
				set     tx_medico                       = CASE WHEN ie_tx_manual='S' THEN  tx_medico  ELSE null END ,
					tx_custo_operacional            = CASE WHEN ie_tx_manual='S' THEN  tx_custo_operacional  ELSE null END ,
					tx_material                     = CASE WHEN ie_tx_manual='S' THEN  tx_material  ELSE null END ,
					nr_seq_regra_qtde_exec           = NULL,
					nr_seq_regra_tx_proc		 = NULL,
					ie_regra_qtde_execucao           = NULL,
					vl_exame_coleta			= 0,
					nr_seq_prest_pgto_coleta	 = NULL,
					nr_seq_exame_coleta		 = NULL,
					vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 0  ELSE vl_unitario_imp END   ELSE CASE WHEN coalesce(vl_unitario_imp,0)=0 THEN  dividir(vl_procedimento_imp, qt_procedimento_imp)  ELSE vl_unitario_imp END  END ,
					vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 0  ELSE vl_procedimento_imp END   ELSE vl_procedimento_imp END ,
					ie_vl_apresentado_sistema       = CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 'N'  ELSE ie_vl_apresentado_sistema END
				where   nr_seq_conta                    = nr_seq_conta_p
				and	((ie_origem_rec_p	= 'C') or
					((ie_origem_rec_p	= 'G') and 
					((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))));
			end if;
		else
			for r_c04_w in C04(nr_seq_analise_p, nr_seq_lote_conta_p) loop
				begin
				
				if (ie_abrir_lanc_p <> 'S') then
					update  pls_conta_proc
					set     tx_medico                       = CASE WHEN ie_tx_manual='S' THEN  tx_medico  ELSE null END ,
						tx_custo_operacional            = CASE WHEN ie_tx_manual='S' THEN  tx_custo_operacional  ELSE null END ,
						tx_material                     = CASE WHEN ie_tx_manual='S' THEN  tx_material  ELSE null END ,
						vl_exame_coleta			= 0,
						nr_seq_prest_pgto_coleta	 = NULL,
						nr_seq_exame_coleta		 = NULL,
						nr_seq_regra_tx_proc		 = NULL,
						ie_regra_qtde_execucao           = NULL,
						vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 0  ELSE vl_unitario_imp END   ELSE CASE WHEN coalesce(vl_unitario_imp,0)=0 THEN  dividir(vl_procedimento_imp, qt_procedimento_imp)  ELSE vl_unitario_imp END  END ,
						vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 0  ELSE vl_procedimento_imp END   ELSE vl_procedimento_imp END ,
						ie_vl_apresentado_sistema       = CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 'N'  ELSE ie_vl_apresentado_sistema END
					where   nr_seq_conta                    = r_c04_w.nr_sequencia
					and	((ie_origem_rec_p	= 'C') or
						((ie_origem_rec_p	= 'G') and 
						((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))));
				else
					update  pls_conta_proc
					set     tx_medico                       = CASE WHEN ie_tx_manual='S' THEN  tx_medico  ELSE null END ,
						tx_custo_operacional            = CASE WHEN ie_tx_manual='S' THEN  tx_custo_operacional  ELSE null END ,
						tx_material                     = CASE WHEN ie_tx_manual='S' THEN  tx_material  ELSE null END ,
						nr_seq_regra_qtde_exec           = NULL,
						nr_seq_regra_tx_proc		 = NULL,
						ie_regra_qtde_execucao           = NULL,
						vl_exame_coleta			= 0,
						nr_seq_prest_pgto_coleta	 = NULL,
						nr_seq_exame_coleta		 = NULL,
						vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 0  ELSE vl_unitario_imp END   ELSE CASE WHEN coalesce(vl_unitario_imp,0)=0 THEN  dividir(vl_procedimento_imp, qt_procedimento_imp)  ELSE vl_unitario_imp END  END ,
						vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 0  ELSE vl_procedimento_imp END   ELSE vl_procedimento_imp END ,
						ie_vl_apresentado_sistema       = CASE WHEN coalesce(nr_lote_contabil_prov,0)=0 THEN 'N'  ELSE ie_vl_apresentado_sistema END
					where   nr_seq_conta                    = r_c04_w.nr_sequencia
					and	((ie_origem_rec_p	= 'C') or
						((ie_origem_rec_p	= 'G') and 
						((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> ''))));
				end if;
				end;
			end loop;
		end if;
	end if;
end if;



/* Fazer o calculo diferenciado por quantidade de execu??o dos itens
Utiliza a fun??o OPS - Regras e Crit?rios de Pre?os / Procedimentos / Quantidade execu??o */
if (ie_abrir_lanc_p = 'S')  then
	if (pls_util_cta_pck.pls_usa_rn_qtde_exec_regra = 'S') then
		
		if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '')then
			nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	null, null, null, nr_seq_conta_p, null, null, null, null, '14,', null, nm_usuario_p, cd_estabelecimento_w, null, nr_seq_log_exec_w);
		elsif (nr_seq_lote_conta_p IS NOT NULL AND nr_seq_lote_conta_p::text <> '') then
			nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	nr_seq_lote_conta_p, null, null, null, null, null, null, null, '14,', null, nm_usuario_p, cd_estabelecimento_w, null, nr_seq_log_exec_w);
		else
			for r_c04_w in C04(nr_seq_analise_p, null) loop
				begin
				nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	null, null, null, r_c04_w.nr_sequencia, null, null, null, null, '14,', null, nm_usuario_p, cd_estabelecimento_w, null, nr_seq_log_exec_w);
				end;
			end loop;
		end if;
		
	else					
		--Abrir os lan?amentos dos procedimentos conforme as regras por quantidade de execu??o 
		if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '')then
			CALL pls_abrir_proc_qtde_proc_valor(nr_seq_conta_p, null, nm_usuario_p,
							cd_estabelecimento_w);
							
		else
	
			for r_c04_w in C04(nr_seq_analise_p, nr_seq_lote_conta_p) loop
				begin
				CALL pls_abrir_proc_qtde_proc_valor(r_c04_w.nr_sequencia, null, nm_usuario_p,
								cd_estabelecimento_w);
		
				end;
			end loop;
		end if;
	end if;
end if;

if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '') then
	select  count(1)
	into STRICT    qt_procedimento_dif_w
	
	where	1 = 1
	and	exists (SELECT 1
			from    pls_conta_proc_v  a
			where   nr_seq_conta    = nr_seq_conta_p
			and     a.nr_seq_regra_qtde_exec 	> 0
			and     exists (       SELECT  1
						from    pls_conta_proc  x
						where   x.nr_seq_conta 		= a.nr_seq_conta
						and     x.cd_procedimento       <> a.cd_procedimento
						and     a.nr_seq_regra_qtde_exec = x.nr_seq_regra_qtde_exec ));
elsif (nr_seq_lote_conta_p IS NOT NULL AND nr_seq_lote_conta_p::text <> '') then
	select  count(1)
	into STRICT    qt_procedimento_dif_w
	
	where	1 = 1
	and	exists	(SELECT 1
			from    pls_conta_proc_v  a
			where   nr_seq_lote_conta    		= nr_seq_lote_conta_p
			and     a.nr_seq_regra_qtde_exec 	> 0
			and     exists  (       SELECT  1
						from    pls_conta_proc_v  x
						where   nr_seq_lote_conta    		= nr_seq_lote_conta_p
						and     ((x.cd_procedimento      	<> a.cd_procedimento) or (a.tx_item			!= x.tx_item))
						and     a.nr_seq_regra_qtde_exec 	= x.nr_seq_regra_qtde_exec ));
else
	/*Verificar em todas os procedimentos da an?lise se existe procedimento com a mesma regra de quantidade de execu??o*/

	select  count(1)
	into STRICT    qt_procedimento_dif_w
	
	where	1 = 1
	and	exists	(SELECT 1
			from    pls_conta_proc_v  a
			where   nr_seq_analise    		= nr_seq_analise_p
			and     a.nr_seq_regra_qtde_exec 	> 0
			and     exists  (       SELECT  1
						from    pls_conta_proc_v  x
						where   nr_seq_analise    		= nr_seq_analise_p
						and     ((x.cd_procedimento      	<> a.cd_procedimento) or (a.tx_item			!= x.tx_item))
						and     a.nr_seq_regra_qtde_exec 	= x.nr_seq_regra_qtde_exec ));
end if;

						
--Realizado o tratamento aqui devido a ter um custo razoavel quando se processando a massa de dados
if (ie_tipo_conta_w	= 'I') and (ie_processo_p		= 'N') then
	
	--Le a regra de taxa de interc?mbio e atualizar a regra de taxa de interc?mbio na conta proc e conta mat
	if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '')then
		nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	null, null, null, nr_seq_conta_p, null, null, null, null, '12,', null, nm_usuario_p, cd_estabelecimento_w, null, nr_seq_log_exec_w);
	elsif (nr_seq_lote_conta_p IS NOT NULL AND nr_seq_lote_conta_p::text <> '') then
		nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	nr_seq_lote_conta_p, null, null, null, null, null, null, null, '12,', null, nm_usuario_p, cd_estabelecimento_w, null, nr_seq_log_exec_w);
	else
		nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	null, null, null, null, null, null, null, null, '12,', null, nm_usuario_p, cd_estabelecimento_w, nr_seq_analise_p, nr_seq_log_exec_w);
	end if;
	
end if;

if (ie_origem_rec_p	= 'C') then
	if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '')then
	
		select	count(1)
		into STRICT	qt_conta_mat_w
		from	pls_conta_mat
		where   nr_seq_conta    = nr_seq_conta_p;
		
		if (qt_conta_mat_w	> 0) then
			if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_w) = 'S') then
				CALL pls_atualiza_valor_mat_n(null, 'S', nm_usuario_p,'S',nr_seq_conta_p,'S');
			else
				CALL pls_atualiza_valor_mat(null, 'S', nm_usuario_p,'S',nr_seq_conta_p,'S');
			end if;
		end if;
	else
		for r_c05_w in C05(nr_seq_analise_p, nr_seq_lote_conta_p) loop
			begin
			if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_w) = 'S') then
				CALL pls_atualiza_valor_mat_n(null, 'S', nm_usuario_p,'S',r_c05_w.nr_seq_conta,'S');
			else
				CALL pls_atualiza_valor_mat(null, 'S', nm_usuario_p,'S',r_c05_w.nr_seq_conta,'S');
			end if;
			end;
		end loop;
	end if;
	--incluido tratamento para verificar se existe ao menos um regra caso contrario nem estra na procedure
	
	select 	count(1)
	into STRICT	qt_regra_tx_mat_w
	from 	pls_regra_preco_qtde_mat;
	
	if (qt_regra_tx_mat_w > 0) then
		if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '')then	
			CALL pls_obter_tx_qtde_mat_valor(null,nr_seq_conta_p, nm_usuario_p, cd_estabelecimento_w);
		else	
			for r_c05_w in C05(nr_seq_analise_p, nr_seq_lote_conta_p) loop
				begin
				CALL pls_obter_tx_qtde_mat_valor(null,r_c05_w.nr_seq_conta, nm_usuario_p, cd_estabelecimento_w);
				end;
			end loop;
		end if;
	end if;
end if;
							
if (coalesce(qt_procedimento_dif_w,0) <> 0) then
        open C03;
        loop
        fetch C03 into
                nr_seq_conta_proc_w,
                ie_tipo_despesa_w,
                ie_vinculo_direto_w,
                vl_procedimento_w,
                vl_procedimento_imp_w,
                cd_procedimento_w,
                ie_origem_proced_w,
                vl_liberado_w,
		nr_seq_pacote_w;
        EXIT WHEN NOT FOUND; /* apply on C03 */
                begin
		ie_composicao_w	:= 'S';
		/*Obter se o item est? dentro da composi??o do pacote.*/

		if (nr_seq_pacote_w IS NOT NULL AND nr_seq_pacote_w::text <> '')	then
			ie_composicao_w	:= pls_obter_se_item_composicao(nr_seq_pacote_w	,null,cd_procedimento_w,ie_origem_proced_w);
		end if;

		if (ie_composicao_w	= 'S')	then
			if (ie_tipo_despesa_w = '1') then /* Atualizar o valor do procedimento */
				if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_w) = 'S') then
					CALL pls_atualiza_valor_proc_n(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N',ie_origem_rec_p,null,'S');
				else
					CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N',ie_origem_rec_p,null,'S');
				end if;
				
			elsif (ie_tipo_despesa_w in ('2','3')) then /* Atualizar os valores das taxas e di?rias */
				if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_w) = 'S') then
					CALL pls_atualiza_valor_servico_n(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N','S');
				else
					CALL pls_atualiza_valor_servico(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N','S');
				end if;
			elsif (ie_tipo_despesa_w = '4') then
				if (ie_calculo_pacote_w    = 'R') then
			
					if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_w) = 'S') then
						CALL pls_atualiza_valor_proc_n(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N',ie_origem_rec_p,null,'S');
					else
						CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N',ie_origem_rec_p,null,'S');
					end if;
				else
					CALL pls_atualiza_valor_pacote(nr_seq_conta_proc_w, 'C', nm_usuario_p, 'N', 'N','S');/* Atualizar os valores do*/
				end if;
			else
				CALL wheb_mensagem_pck.exibir_mensagem_abort(182981); --'Problemas com a gera??o de valores. Tipo de d
			end if;
		end if;
		end;
        end loop;
        close C03;
end if;

open C01;
loop
fetch C01 into
        nr_seq_conta_proc_w,
        ie_tipo_despesa_w,
        ie_vinculo_direto_w,
        vl_procedimento_w,
        vl_procedimento_imp_w,
        cd_procedimento_w,
        ie_origem_proced_w,
        vl_liberado_w,
	vl_tot_calc_w,
        vl_calculado_w,
	nr_seq_pacote_w,
	tx_item_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
        begin
	ie_composicao_w	:= 'S';
	/*Obter se o item est? dentro da composi??o do pacote.*/

	if (nr_seq_pacote_w IS NOT NULL AND nr_seq_pacote_w::text <> '')	then
		ie_composicao_w	:= pls_obter_se_item_composicao(nr_seq_pacote_w	,null,cd_procedimento_w,ie_origem_proced_w);
	end if;
	
	if (ie_composicao_w	= 'S')	then
		
		if (ie_tipo_despesa_w = '1') then /* Atualizar o valor do procedimento */
			if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_w) = 'S') then
				CALL pls_atualiza_valor_proc_n(nr_seq_conta_proc_w, 'S', nm_usuario_p,'S',ie_origem_rec_p,null,'S');
			else
				CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'S', nm_usuario_p,'S',ie_origem_rec_p,null,'S');
			end if;
		elsif (ie_tipo_despesa_w in ('2','3')) then /* Atualizar os valores das taxas e di?rias */
			if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_w) = 'S') then
				CALL pls_atualiza_valor_servico_n(nr_seq_conta_proc_w, 'S', nm_usuario_p,'S','S');
			else
				CALL pls_atualiza_valor_servico(nr_seq_conta_proc_w, 'S', nm_usuario_p,'S','S');
			end if;
		
		elsif (ie_tipo_despesa_w = '4') then
			if (ie_calculo_pacote_w    = 'R') then
				if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_w) = 'S') then
					CALL pls_atualiza_valor_proc_n(nr_seq_conta_proc_w, 'S', nm_usuario_p,'S',ie_origem_rec_p,null,'S');
				else
					CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'S', nm_usuario_p,'S',ie_origem_rec_p,null,'S');
				end if;
			else
				CALL pls_atualiza_valor_pacote(nr_seq_conta_proc_w, 'C', nm_usuario_p, 'S', 'S','S');/* Atualizar os valores dos*/
				
			end if;
		else
			CALL wheb_mensagem_pck.exibir_mensagem_abort(182981); --'Problemas com a gera??o de valores. Tipo de de
		end if;
        end if;
	end;
end loop;
close C01;

/* Felipe - 14/10/2011 - Litoral - Gravar o valor total no Apresentado para os casos em
que n?o foi informado valor apresentado */

/* Diogo - 20/01/2012 - Litoral - Inclu?do para gravar o valor unit?rio apresentado quando a mesma f*/

if (coalesce(ie_atualiza_apresentado_w,'S') <> 'N')then
	if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '')then
		CALL pls_atualiza_valor_apresentado( null, null, null, nr_seq_conta_p, null, cd_estabelecimento_w, nm_usuario_p);
	elsif (nr_seq_lote_conta_p IS NOT NULL AND nr_seq_lote_conta_p::text <> '') then	
		CALL pls_atualiza_valor_apresentado( nr_seq_lote_conta_p, null, null, null, null, cd_estabelecimento_w, nm_usuario_p);
	else
		for r_c04_w in C04(nr_seq_analise_p, null) loop
			begin
			CALL pls_atualiza_valor_apresentado( null, null, null, r_c04_w.nr_sequencia, null, cd_estabelecimento_w, nm_usuario_p);
			end;
		end loop;
	end if;
	
end if;

/*Diogo - 31/10/2011 - Litoral - necess?rio executar o procedimento ap?s a altera??o do campo vl_pro*/

if (ie_geracao_pos_estab_w = 'C') then
	if (coalesce(nr_seq_analise_p::text, '') = '') and (coalesce(nr_seq_lote_conta_p::text, '') = '') then
		CALL pls_gerar_valor_pos_estab(nr_seq_conta_p, nm_usuario_p, ie_geracao_pos_estab_w,null,null,'A');
	else
		for r_c04_w in C04(nr_seq_analise_p, nr_seq_lote_conta_p) loop
			begin
			CALL pls_gerar_valor_pos_estab(r_c04_w.nr_sequencia, nm_usuario_p, ie_geracao_pos_estab_w,null,null,'A');
			end;
		end loop;
	end if;
	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_recalcular_conta ( nr_seq_conta_p bigint, nm_usuario_p text, ie_origem_rec_p text, ie_abrir_lanc_p text, ie_processo_p text, nr_seq_analise_p bigint, nr_seq_lote_conta_p pls_lote_protocolo_conta.nr_sequencia%type) FROM PUBLIC;

