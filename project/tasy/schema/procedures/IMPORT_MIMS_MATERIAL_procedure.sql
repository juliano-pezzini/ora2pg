-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE import_mims_material (cd_imp_material_p imp_material.cd_material%type, nr_seq_mims_ver bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

ds_reacao_w                imp_material_reacao.ds_reacao%type;
cd_material_w              material.cd_material%type;
cd_material_chk_w              material.cd_material%type;
cd_classe_material_w       classe_material.cd_classe_material%type;
cd_subgrupo_material_w     subgrupo_material.cd_subgrupo_material%type;
imp_material_sistema_ext_w imp_material_sistema_ext%rowtype;
imp_medic_ficha_tecnica_w  imp_medic_ficha_tecnica%rowtype;
nr_seq_estab_w             bigint;
imp_medic_controlado_w     imp_medic_controlado%rowtype;
value_present_w            bigint := 0;
nr_seq_mat_sistema_ext     bigint;
istablefilled              bigint;
nr_seq_ficha_tecnica_w     bigint;
isdirty                    bigint;
is_datasheet_created_w     bigint := 0;
pbs_price_w                packdat.pbs_price%type;
cd_group_material_w		grupo_material.cd_grupo_material%type;

qt_exist_pbs_rec_w		bigint;
qt_changed_price_w		bigint;
qt_exist_mat_pbs_w		bigint;
nr_seq_pbs_price_w		pbs_price.nr_sequencia%type;
nr_seq_indication_w		pbs_indication.nr_sequencia%type;
nr_seq_mat_pbs_w		material_pbs.nr_sequencia%type;
nr_mims_indication_w		pbs_indication.nr_mims_indication%type;
ds_material_packinfo_w  varchar(255);
nr_pbs_code_count_w		bigint := 0;
nr_pbs_match_count_w	bigint := 0;
is_new_mat_insert_w		varchar(1) :='N';

  /*_seq_conversao_w         material_sistema_externo.nr_sequencia%TYP*/


  /*_seq_mat_estab_w         material_estab.nr_sequencia%TYP*/

c_material_conversao_unidade CURSOR FOR
	SELECT	a.cd_material,
		a.cd_unidade_medida
	from	imp_material_conv_unidade a
	where	a.cd_material = cd_imp_material_p
        and	a.ie_dirty_check = 1;

c_via_aplic CURSOR FOR
	SELECT	a.cd_material,
		a.ie_via_aplicacao,
		a.nr_sequencia
	from	imp_mat_via_aplic a
	where	a.cd_material = cd_imp_material_p
	and	a.ie_dirty_check = 1;

c_via_aplic_del CURSOR(cd_material_ww text) FOR
SELECT a.ie_via_aplicacao from mat_via_aplic a where a.cd_material = cd_material_ww
EXCEPT
SELECT  a.ie_via_aplicacao  from IMP_MAT_VIA_APLIC a where a.cd_material = cd_imp_material_p;

c_via_aplicacao CURSOR FOR
	SELECT	a.ie_via_aplicacao
	from	imp_via_aplicacao a
	EXCEPT
	SELECT	a.ie_via_aplicacao
	from	via_aplicacao a;

c_unidade_medida CURSOR FOR
	SELECT	cd_unidade_medida
	from	imp_unidade_medida a
	EXCEPT
	SELECT	cd_unidade_medida
	from	unidade_medida a;

c_pbs_material CURSOR FOR
	SELECT	b.pbs_code,
		b.pbs,
		b.restcode,
		b.authcode,
		b.sec100code,
		a.cd_material_tasy,
    -- a.cd_sistema_ant material_cd_sistema_ant,
    (a.prodcode||'.'||a.formcode||'.'||a.packcode) material_cd_sistema_ant,
		(b.prodcode||'.'||b.formcode||'.'||b.packcode) packdat_cd_sistema_ant,
    (coalesce(b.active,'NA')||'-'||coalesce(b.active_units,'NA')||'-'||coalesce(b.units_per_pack,-1)) packdat_packinfo,
		b.pbs_price
	from	mims_material_tasy a,
		packdat b
	where	a.prodcode = b.prodcode
	and	a.formcode = b.formcode
	and	(b.pbs_code IS NOT NULL AND b.pbs_code::text <> '')
	-- and	a.packcode = b.packcode
	and	a.cd_imp_material = cd_imp_material_p;

BEGIN

EXECUTE 'alter session set nls_numeric_characters = ''.,''';

select coalesce(Max(a.is_drugsheet_created), 0)
into STRICT	is_datasheet_created_w
from	mims_version a
where	a.nr_sequencia = nr_seq_mims_ver;

if ( is_datasheet_created_w <> 1 ) then

	-- The material interaction is removed from here and enabled user driven action that triggers UPD_DRUG_INTERACTIONS_MIMS

	--material_interacao_medic_ficha(nm_usuario_p);
	CALL Insert_mims_medic_ficha();
      -- Insert all the configuration file data if not present

      -- UNIDADE_MEDIDA, VIA_APLICACAO
	for r_unidade_medida in c_unidade_medida loop
		insert into unidade_medida(cd_unidade_medida,
			ds_unidade_medida,
			dt_atualizacao,
			dt_atualizacao_nrec,
			nm_usuario,
			nm_usuario_nrec,
			ie_situacao,
			ie_adm_diluicao)
		SELECT	a.cd_unidade_medida,
			a.ds_unidade_medida,
			clock_timestamp(),
			clock_timestamp(),
			nm_usuario_p,
			nm_usuario_p,
			'I',
			a.ie_adm_diluicao
			from   imp_unidade_medida a
			where  a.cd_unidade_medida = r_unidade_medida.cd_unidade_medida;
	end loop;

	for r_via_aplicacao in c_via_aplicacao loop
		insert into via_aplicacao(ie_via_aplicacao,
			ds_via_aplicacao,
			nm_usuario,
			nm_usuario_nrec,
			dt_atualizacao,
			dt_atualizacao_nrec,
			ie_situacao,
			ie_gera_diluicao)
		SELECT	a.ie_via_aplicacao,
			a.ds_via_aplicacao,
			nm_usuario_p,
			nm_usuario_p,
			clock_timestamp(),
			clock_timestamp(),
			'I',
			a.ie_gera_diluicao
		from	imp_via_aplicacao a
		where 	a.ie_via_aplicacao = r_via_aplicacao.ie_via_aplicacao;
	end loop;

	update	mims_version a
	set	is_drugsheet_created = 1
	where	a.nr_sequencia = nr_seq_mims_ver;

	-- Dirty flag for Material Interactions and medicine is not from the below tables now

	/* update	imp_material_interacao_med
	set	ie_dirty_check = 0; */

	
	/* update 	imp_medic_ficha_tecnica
	set 	ie_dirty_check = 0; */
end if;

select	max(a.cd_material),
	max(c.cd_classe_material),
	max(d.cd_subgrupo_material)
into STRICT	cd_material_w,
	cd_classe_material_w, 
	cd_subgrupo_material_w
from	material a,
	mims_material_tasy b,
	classe_material c,
	subgrupo_material d
where 	b.cd_imp_material = cd_imp_material_p
and	b.cd_material_tasy = a.cd_material
and	a.cd_classe_material = c.cd_classe_material
and	c.cd_subgrupo_material = d.cd_subgrupo_material;

    -- SUBGRUPO_MATERIAL

    -- If value exisits then update
if ( coalesce(cd_material_w, 0) <> 0 ) then
	CALL Update_subgroup_mat_from_mims(	cd_subgrupo_material_w,
					cd_imp_material_p,
					nm_usuario_p);
    --  If value does not exisits then update
else

	select	max(cd_grupo_material)
	into STRICT 	cd_group_material_w
	from 	mims_parameter
	where 	cd_estabelecimento = cd_estabelecimento_p;

	  --- missing a message when there is no group informed in the parameter tab
		cd_subgrupo_material_w := Insert_subgroup_mat_from_mims(	cd_subgrupo_material_w, cd_imp_material_p, nm_usuario_p, cd_group_material_w);
end if;

    --    -- CLASSE_MATERIAL

    --    -- If value exisits then update
if ( coalesce(cd_material_w, 0) <> 0 ) then
	CALL Update_classe_mat_from_mims(	cd_classe_material_w,
					cd_imp_material_p,
					nm_usuario_p);
else

	cd_classe_material_w := Insert_classe_mat_from_mims(	cd_imp_material_p, cd_subgrupo_material_w, nm_usuario_p, cd_classe_material_w);
end if;

/*
-- This commit is added here because, there is a trigger on material table, 

	which checks class and sub group is added or not.

*/
commit;
       -- MATERIAL
if ( coalesce(cd_material_w, 0) <> 0 ) then
      -- If value exisits then update
	is_new_mat_insert_w := 'N';
	CALL Update_into_material_from_mims(	cd_imp_material_p,
					cd_material_w,
					nm_usuario_p, nr_seq_mims_ver);
else -- If value does not exisits then update
	is_new_mat_insert_w := 'S';
	CALL Insert_into_material_from_mims(	cd_imp_material_p,
					nm_usuario_p,
					cd_classe_material_w,
					nr_seq_mims_ver
					);

	select	cd_material_tasy 
	into STRICT 	cd_material_w 
	from 	mims_material_tasy
	where 	cd_imp_material = cd_imp_material_p;

		-- Check the PBS structure and copying to TASY
	for r_pbs_material in c_pbs_material loop
		begin

		--- Checking if the PBS is recorded in Tasy
		select	count(*)
		into STRICT	qt_exist_pbs_rec_w
		from	pbs_record
		where	cd_pbs = r_pbs_material.pbs_code;

		if (qt_exist_pbs_rec_w = 0) then
			insert into pbs_record(
				cd_pbs,
				cd_estabelecimento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_pbs,
				ie_situacao)
			values (r_pbs_material.pbs_code,
				cd_estabelecimento_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				r_pbs_material.pbs,
				'A'); -- Active
		end if;

		--- Checking if the PBS Price is registered in Tasy
		select	coalesce(max(nr_sequencia),-99)
		into STRICT	nr_seq_pbs_price_w
		from	pbs_price
		where	cd_pbs = r_pbs_material.pbs_code
		and	clock_timestamp() between coalesce(dt_start_validity,clock_timestamp()) and coalesce(dt_end_validity,clock_timestamp());

		if (nr_seq_pbs_price_w > 0) then
			begin
			pbs_price_w := REGEXP_replace(r_pbs_material.pbs_price, '\$|,', '');
			select	count(*)
			into STRICT	qt_changed_price_w
			from	pbs_price
			where	nr_sequencia = nr_seq_pbs_price_w
			and	vl_price = (pbs_price_w)::numeric;

			if (qt_changed_price_w = 0) then
				update	pbs_price
			set		dt_start_validity = coalesce(dt_start_validity,clock_timestamp()),
					dt_end_validity = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp()
				where	nr_sequencia = 	nr_seq_pbs_price_w;
			end if;

			end;
		end if;

		if	((nr_seq_pbs_price_w = -99) or (qt_changed_price_w = 0)) then
			pbs_price_w := 	REGEXP_replace(r_pbs_material.pbs_price, '\$|,', '');
			insert into pbs_price(
				nr_sequencia,
				cd_estabelecimento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_pbs,
				dt_start_validity,
				vl_price)
			values (nextval('pbs_price_seq'),
				cd_estabelecimento_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				r_pbs_material.pbs_code,
				clock_timestamp(),
				(pbs_price_w)::numeric );
		end if;

  -- link PBS only if the active, active_units, units_per_pack matches
  begin
    select (coalesce(b.active,'NA')||'-'||coalesce(b.active_units,'NA')||'-'||coalesce(b.units_per_pack,-1))
    into STRICT ds_material_packinfo_w
    from packdat b
    where (b.prodcode||'.'||b.formcode||'.'||b.packcode) = r_pbs_material.material_cd_sistema_ant
    and b.version = nr_seq_mims_ver;
  exception
    when no_data_found then 
      ds_material_packinfo_w := 'NO_DATA_FOUND';
    when too_many_rows then
      ds_material_packinfo_w := 'TOO_MANY_ROWS';
    when OTHERS then
      ds_material_packinfo_w := 'NOT_APPLICABLE_FOR_THIS_MIMS_VERSION';
  end;

  if (ds_material_packinfo_w = r_pbs_material.packdat_packinfo) then

		--- Checking if the PBS is linked with the medicinte in Tasy (Material Record)
		select	coalesce(max(nr_sequencia),-99)
		into STRICT	nr_seq_mat_pbs_w
		from	material_pbs
		where	cd_material = r_pbs_material.cd_material_tasy
		and	cd_pbs = r_pbs_material.pbs_code
		and	clock_timestamp() between coalesce(dt_start_validity,clock_timestamp()) and coalesce(dt_end_validity,clock_timestamp());

		if (nr_seq_mat_pbs_w > 0) then

			select	max(nr_mims_indication)
			into STRICT	nr_mims_indication_w
			from	material_pbs a,
				pbs_indication b
			where	a.nr_sequencia = nr_seq_mat_pbs_w
			and	a.nr_seq_indication =  b.nr_sequencia;

		end if;

-- The idea is to insert only 1 record if PBS code has multiple pbs indications

-- If only single record exist for PBS record, proceed with previous flow

-- If multiple records exist, check if the material_cd_sistema_ant matches with one of the existing  packdat_cd_sistema_ant.

-- 			if yes, insert only that one matching record and ignore others. 

-- 			if no, insert any one of multiple duplicate records. 
		select count(1) into STRICT nr_pbs_code_count_w
		from packdat
		where version = nr_seq_mims_ver
		and pbs_code = r_pbs_material.pbs_code;

    nr_pbs_match_count_w := 0;

    if ( nr_pbs_code_count_w > 1 ) then
			select count(1)
			into STRICT nr_pbs_match_count_w
			from packdat
			where version = nr_seq_mims_ver 
			and pbs_code = r_pbs_material.pbs_code
			and prodcode||'.'||formcode||'.'||packcode = r_pbs_material.material_cd_sistema_ant;
		end if;

    if ( (nr_pbs_code_count_w = 1) or (nr_pbs_match_count_w = 1  and r_pbs_material.material_cd_sistema_ant = r_pbs_material.packdat_cd_sistema_ant ) ) then

			if	((nr_seq_mat_pbs_w = -99) or
				((nr_seq_mat_pbs_w > 0) and
				 ((nr_mims_indication_w <> coalesce(r_pbs_material.restcode, nr_mims_indication_w)) or (nr_mims_indication_w <> coalesce(r_pbs_material.authcode, nr_mims_indication_w)) or (nr_mims_indication_w <> coalesce(r_pbs_material.sec100code, nr_mims_indication_w))))) then


				update	material_pbs
				set	dt_start_validity = coalesce(dt_start_validity,clock_timestamp()),
					dt_end_validity = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp()
				where	nr_sequencia = 	nr_seq_mat_pbs_w;

				select	max(nr_sequencia)
				into STRICT	nr_seq_indication_w
				from	pbs_indication
				where	((nr_mims_indication = r_pbs_material.restcode) or (nr_mims_indication = r_pbs_material.authcode) or (nr_mims_indication = r_pbs_material.sec100code))
				and	ie_situacao = 'A';

				insert into material_pbs(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_estabelecimento,
					cd_pbs,
					cd_material,
					dt_start_validity,
					nr_seq_indication)
				values (nextval('material_pbs_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_estabelecimento_p,
					r_pbs_material.pbs_code,
					r_pbs_material.cd_material_tasy,
					clock_timestamp(),
					nr_seq_indication_w);
			end if;

      end if;  -- end of condition if ( nr_pbs_code_count_w = 1) then
    if ( nr_seq_mat_pbs_w = -99  and nr_pbs_code_count_w > 1 and nr_pbs_match_count_w = 0) then
			select	max(nr_sequencia)
			into STRICT	nr_seq_indication_w
			from	pbs_indication
			where	((nr_mims_indication = r_pbs_material.restcode) or (nr_mims_indication = r_pbs_material.authcode) or (nr_mims_indication = r_pbs_material.sec100code))
			and	ie_situacao = 'A';

			insert into material_pbs(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_estabelecimento,
				cd_pbs,
				cd_material,
				dt_start_validity,
				nr_seq_indication)
			values (nextval('material_pbs_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_estabelecimento_p,
				r_pbs_material.pbs_code,
				r_pbs_material.cd_material_tasy,
				clock_timestamp(),
				nr_seq_indication_w);

		end if;  -- end of condition nr_seq_mat_pbs_w = -99  and nr_pbs_code_count_w > 1 and nr_pbs_match_count_w = 0
    end if; -- end of ds_material_packinfo_w check
		end;
	end loop;
end if;

       --material_conversao_unidade

    -- MATERIAL_CONVERSAO_UNIDADE and IMP_MATERIAL_CONV_UNIDADE
value_present_w := 0;

-- Include changes to UNIT OF CONVERSION only for New Material Scenarios
if ( coalesce(is_new_mat_insert_w,'N') = 'S' ) then
for r_material_conversao_unidade in c_material_conversao_unidade loop
	select	Count(1)
	into STRICT	value_present_w
	from	material_conversao_unidade a
	where	a.cd_material = cd_material_w
	and	a.cd_unidade_medida =
		r_material_conversao_unidade.cd_unidade_medida;

	if ( value_present_w = 0 ) then
		--Update_mat_conve_unidade_mims(cd_imp_material_p, cd_material_w);
	CALL Ins_mat_conversao_unidade_mims(cd_imp_material_p, cd_material_w,r_material_conversao_unidade.cd_unidade_medida);
	end if;
end loop;
end if;

    -- IMP_MAT_VIA_APLIC
value_present_w := 0;

FOR r_via_aplic IN c_via_aplic LOOP
    /*select	Count(1)
    into	value_present_w
    from	mat_via_aplic a
    where	a.nr_sequencia = r_via_aplic.nr_sequencia;*/
    select	Count(1)
    into STRICT	value_present_w
    from	mat_via_aplic a
    WHERE A.cd_material = cd_material_w and a.IE_VIA_APLICACAO = r_via_aplic.IE_VIA_APLICACAO;

    if ( value_present_w <> 0 ) then
      CALL Update_into_via_aplic_mims(cd_imp_material_p, cd_material_w, r_via_aplic.IE_VIA_APLICACAO);
    else
      CALL Insert_into_via_aplic_mims(cd_imp_material_p, r_via_aplic.IE_VIA_APLICACAO);
    end if;
	
	value_present_w := 0;
end loop;

--new loop to take care of deletes if any
FOR r_via_aplic_del IN c_via_aplic_del(cd_material_w) LOOP
  delete from mat_via_aplic where cd_material =  cd_material_w and ie_via_aplicacao = r_via_aplic_del.ie_via_aplicacao;
end loop;

    -- Refresh cd_material_w after the value is filled in the table
select	max(a.cd_material)
into STRICT	cd_material_w
from	material a,
	mims_material_tasy b
where	b.cd_imp_material = cd_imp_material_p
and	b.cd_material_tasy = a.cd_material;

begin

select	max(cd_material)
into STRICT	cd_material_chk_w
from	material_reacao
where	cd_material = cd_material_w;

    -- MATERIAL_REACAO

    -- If value exisits then update
if ( coalesce(cd_material_chk_w, 0) <> 0 ) then
      -- check material_reacao ( Reactions )
	select	max(a.ds_reacao)
	into STRICT	ds_reacao_w
	from	imp_material_reacao a
	where	a.cd_material = cd_imp_material_p
	and	a.ie_dirty_check = 1;

      if (ds_reacao_w IS NOT NULL AND ds_reacao_w::text <> '') then
		CALL Upd_mat_recao_frm_mims(cd_imp_material_p, ds_reacao_w, nm_usuario_p);
      end if;
    --  If value does not exisits then update
else

	CALL Ins_mat_recao_frm_mims(cd_imp_material_p, cd_material_w);
end if;

    --MEDIC_CONTROLADO
if ( coalesce(cd_material_w, 0) <> 0 ) then
	select a.*
	into STRICT   imp_medic_controlado_w
	from   imp_medic_controlado a
	where  a.cd_material = cd_imp_material_p
	and a.ie_dirty_check = 1;

	if (imp_medic_controlado_w.cd_material IS NOT NULL AND imp_medic_controlado_w.cd_material::text <> '') then
		update	medic_controlado a
		set	a.dt_atualizacao = clock_timestamp(),
			a.nm_usuario = nm_usuario_p,
			a.dt_atualizacao_nrec = clock_timestamp(),
			a.cd_classificacao = imp_medic_controlado_w.cd_classificacao
		where	a.cd_material = cd_material_w;

		update imp_medic_controlado a
		set    a.ie_dirty_check = 0
		where  a.cd_material = imp_medic_controlado_w.cd_material;
	end if;
else
	CALL Ins_mat_medic_control_mims(cd_imp_material_p);

end if;

exception when others then null;
end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE import_mims_material (cd_imp_material_p imp_material.cd_material%type, nr_seq_mims_ver bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

