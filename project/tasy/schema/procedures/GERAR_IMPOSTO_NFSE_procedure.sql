-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_imposto_nfse ( nr_seq_nota_p bigint, nm_usuario_p text, nr_seq_sit_trib_p bigint, cd_tributo_p bigint) AS $body$
DECLARE


cd_tributo_w			smallint;
pr_imposto_w			double precision;
pr_desc_base_w			double precision;
cd_estabelecimento_w		smallint;
cd_cgc_emitente_w		varchar(14);
cd_serie_nf_w			nota_fiscal.cd_serie_nf%type;
IE_TIPO_TRIBUTACAO_w		varchar(255);
nr_nota_fiscal_w		varchar(255);
nr_sequencia_nf_w		bigint;
nr_item_nf_w			integer;
vl_total_nota_w			double precision;
vl_total_item_w			double precision;
vl_total_imposto_nota_w		double precision	:= 0;
vl_total_imposto_item_w		double precision	:= 0;
vl_minimo_tributo_w		double precision;
vl_reducao_base_w		double precision;
vl_minimo_base_w		double precision;
vl_teto_base_w			double precision;
vl_desc_dependente_w		double precision;
vl_trib_anterior_w		double precision;
vl_total_base_w			double precision;
vl_reducao_w			double precision;
vl_mercadoria_w			double precision;
ie_soma_diminui_w		varchar(01);
cd_convenio_w			integer;
nr_interno_conta_w		bigint;
nr_seq_protocolo_w		bigint;
dt_emissao_w			timestamp;
VL_TRIB_NAO_RETIDO_w		double precision;
VL_BASE_NAO_RETIDO_w		double precision;
VL_TRIB_ADIC_w			double precision;
VL_BASE_ADIC_w			double precision;
vl_soma_trib_nao_retido_w	double precision;
vl_soma_base_nao_retido_w	double precision;
VL_TRIBUTO_W			double precision;
VL_MINIMO_BASE_CALCULO_W	double precision;
VL_TRIBUTO_A_RETER_W		double precision;
VL_BASE_A_RETER_W		double precision;
vl_soma_trib_adic_w		double precision;
vl_soma_base_adic_w		double precision;
vl_descontos_w			double precision;
cd_pessoa_fisica_w		varchar(10);
ie_acumulativo_w		varchar(10);
cd_cgc_w			varchar(14);
nr_seq_sit_trib_w		bigint;
vl_mercadoria_liq_ww		double precision;
cd_condicao_pagamento_w		bigint;
ie_forma_pagamento_w		smallint;
vl_vencimento_w			double precision;
qt_venctos_w			bigint;
qt_existe_w			bigint;
nr_ccm_w			bigint	:= null;
ie_vago_w			varchar(255);
nr_seq_regra_w			bigint;
nr_seq_lote_protocolo_w		bigint;
nr_seq_eme_fatura_w		bigint;
ie_tipo_tributo_w		varchar(15);
nr_seq_mensalidade_w		bigint;
nr_seq_regra_irpf_w		regra_calculo_irpf.nr_sequencia%type;

cd_darf_w			regra_calculo_imposto.cd_darf%type;

/* Impostos da nota fiscal */

C01 CURSOR FOR
	SELECT	b.cd_tributo
	from	tributo	b
	where	b.ie_corpo_item	= 'C'
	and	b.ie_situacao	= 'A'
	and	b.ie_pf_pj in ('A',CASE WHEN coalesce(cd_pessoa_fisica_w::text, '') = '' THEN 'PJ'  ELSE 'PF' END )
	and	not exists (SELECT	1
		from	nota_fiscal_trib x
		where	x.nr_sequencia	= nr_seq_nota_p
		and	x.cd_tributo	= b.cd_tributo)
	and (coalesce(nr_ccm_w::text, '') = '' or coalesce(b.ie_ccm,'S') = 'S')
	and	((coalesce(ie_tipo_tributacao_w, 'X') <> '0') or (coalesce(ie_super_simples, 'S') = 'S'))
	order 	by b.cd_tributo;


BEGIN
select	cd_estabelecimento,
	vl_total_nota,
	cd_cgc_emitente,
	cd_serie_nf,
	nr_nota_fiscal,
	nr_sequencia_nf,
	dt_emissao,
	coalesce(nr_interno_conta,0),
	coalesce(nr_seq_protocolo,0),
	coalesce(nr_seq_lote_prot,0),
	coalesce(vl_mercadoria,0),
	cd_cgc,
	cd_pessoa_fisica,
	coalesce(vl_descontos,0),
	cd_condicao_pagamento,
	coalesce(nr_seq_eme_fatura,0),
	nr_seq_mensalidade
into STRICT	cd_estabelecimento_w,
	vl_total_nota_w,
	cd_cgc_emitente_w,
	cd_serie_nf_w,
	nr_nota_fiscal_w,
	nr_sequencia_nf_w,
	dt_emissao_w,
	nr_interno_conta_w,
	nr_seq_protocolo_w,
	nr_seq_lote_protocolo_w,
	vl_mercadoria_w,
	cd_cgc_w,
	cd_pessoa_fisica_w,
	vl_descontos_w,
	cd_condicao_pagamento_w,
	nr_seq_eme_fatura_w,
	nr_seq_mensalidade_w
from	nota_fiscal
where	nr_sequencia	= nr_seq_nota_p;

select	max(ie_tipo_tributacao)
into STRICT	ie_tipo_tributacao_w
from	pessoa_juridica
where	cd_cgc	= cd_cgc_w;

if (nr_interno_conta_w > 0) then
	select	max(a.cd_convenio_parametro)
	into STRICT	cd_convenio_w
	from	atendimento_paciente	b,
		conta_paciente		a
	where	a.nr_interno_conta	= nr_interno_conta_w
	  and	a.nr_atendimento	= b.nr_atendimento;
elsif (nr_seq_protocolo_w > 0) then
	select	max(cd_convenio)
	into STRICT	cd_convenio_w
	from	protocolo_convenio
	where	nr_seq_protocolo	= nr_seq_protocolo_w;
elsif (nr_seq_lote_protocolo_w > 0) then
	select	max(cd_convenio)
	into STRICT	cd_convenio_w
	from	lote_protocolo
	where	nr_sequencia = nr_seq_lote_protocolo_w;
elsif (nr_seq_eme_fatura_w > 0) then
	select	max(a.cd_convenio)
	into STRICT	cd_convenio_w
	from	eme_contrato a,
		eme_faturamento b
	where	a.nr_sequencia	= b.nr_seq_contrato
	and	b.nr_sequencia	= nr_seq_eme_fatura_w;
else
	select	max(cd_convenio)
	into STRICT	cd_convenio_w
	from	convenio_retorno	b,
		convenio_retorno_nf	a
	where	a.nr_seq_retorno	= b.nr_sequencia
	and	a.nr_seq_nota_fiscal	= nr_seq_nota_p;
end if;

if (coalesce(cd_convenio_w::text, '') = '') then
	select	max(a.cd_conv_integracao)
	into STRICT	cd_convenio_w
	from	nota_fiscal a
	where	a.nr_sequencia	= nr_seq_nota_p;
end if;

select	ie_forma_pagamento 		
into STRICT	ie_forma_pagamento_w
from	condicao_pagamento
where	cd_condicao_pagamento	= cd_condicao_pagamento_w;

open C01;
loop
fetch C01 into
	cd_tributo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	max(ie_tipo_tributo)
	into STRICT	ie_tipo_tributo_w
	from	tributo
	where	cd_tributo	= cd_tributo_w;
	
	SELECT * FROM obter_dados_trib_tit_rec(	cd_tributo_w, cd_estabelecimento_w, cd_convenio_w, dt_emissao_w, 'N', pr_imposto_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_pessoa_fisica_w, cd_cgc_w, ie_vago_w, null, 0, nr_seq_regra_w, cd_darf_w) INTO STRICT pr_imposto_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, nr_seq_regra_w, cd_darf_w;

	select	coalesce(max(pr_desc_base),0)
	into STRICT	pr_desc_base_w
	from	regra_calculo_imposto
	where	nr_sequencia	= nr_seq_regra_w;

	if (pr_imposto_w > 0) then
		vl_trib_nao_retido_w	:= 0;
		vl_base_nao_retido_w	:= 0;
		vl_trib_adic_w		:= 0;
		vl_base_adic_w		:= 0;
		vl_mercadoria_liq_ww	:= 0;

		select	coalesce(sum(a.vl_trib_nao_retido), 0),
			coalesce(sum(a.vl_base_nao_retido), 0),
			coalesce(sum(a.vl_trib_adic), 0),
			coalesce(sum(a.vl_base_adic), 0),
			coalesce(sum(a.vl_tributo),0),
			coalesce(sum(a.vl_base_calculo),0),
			coalesce(sum(a.vl_reducao),0)
		into STRICT	vl_soma_trib_nao_retido_w,
			vl_soma_base_nao_retido_w,
			vl_soma_trib_adic_w,
			vl_soma_base_adic_w,
			vl_trib_anterior_w,
			vl_total_base_w,
			vl_reducao_w
		from	operacao_nota		o,
			nota_fiscal		b,
			nota_fiscal_trib	a
		where	a.nr_sequencia			= b.nr_sequencia
		and	trunc(b.dt_emissao, 'month')	= trunc(dt_emissao_w, 'month')
		and	a.cd_tributo			= cd_tributo_w
		and	b.cd_cgc_emitente		= cd_cgc_emitente_w
		and	coalesce(b.ie_situacao,1)		= 1
		and	b.cd_operacao_nf		= o.cd_operacao_nf
		and	o.ie_operacao_fiscal		= 'S'
		and (cd_cgc				= cd_cgc_w or
			cd_pessoa_fisica		= cd_pessoa_fisica_w);
		
		if (coalesce(nr_seq_mensalidade_w::text, '') = '') then
			vl_mercadoria_liq_ww	:= (vl_mercadoria_w - vl_descontos_w);	/*Anderson 12/09/2007 - OS66018 - Considerar o desconto ao gerar o valor do tributo*/
		else
			vl_mercadoria_liq_ww := pls_obter_base_calc_mens(	nr_seq_mensalidade_w, null, cd_tributo_w, ie_tipo_tributo_w, vl_mercadoria_liq_ww);
		end if;

		vl_reducao_base_w		:= 0;
		if (pr_desc_base_w <> 0) then
			vl_reducao_base_w	:= vl_mercadoria_liq_ww * (pr_desc_base_w / 100);
			vl_mercadoria_liq_ww	:= vl_mercadoria_liq_ww - vl_reducao_base_w;
		end if;

		SELECT * FROM obter_valores_tributo(	ie_acumulativo_w, pr_imposto_w, vl_minimo_base_w, vl_minimo_tributo_w, vl_soma_trib_nao_retido_w, vl_soma_trib_adic_w, vl_soma_base_nao_retido_w, vl_soma_base_adic_w, vl_mercadoria_liq_ww, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_teto_base_w, vl_trib_anterior_w, 'N', vl_total_base_w, vl_reducao_w, vl_desc_dependente_w, 0, 0, null, null, 0, clock_timestamp(), nr_seq_regra_irpf_w) INTO STRICT pr_imposto_w, vl_mercadoria_liq_ww, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_reducao_w, vl_desc_dependente_w, nr_seq_regra_irpf_w;

		insert	into nota_fiscal_trib(nr_sequencia,
			cd_tributo,
			vl_tributo,
			dt_atualizacao,
			nm_usuario,
			vl_base_calculo,
			tx_tributo,
			vl_reducao_base,
			vl_trib_nao_retido,
			vl_base_nao_retido,
			vl_trib_adic,
			vl_base_adic,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_interno,
			vl_reducao,
			nr_seq_regra_trib)
		values (nr_seq_nota_p,
			cd_tributo_w,
			vl_tributo_w,
			clock_timestamp(),
			nm_usuario_p,
			CASE WHEN coalesce(nr_seq_mensalidade_w::text, '') = '' THEN  vl_mercadoria_w - vl_descontos_w - vl_reducao_base_w  ELSE vl_mercadoria_liq_ww END ,
			pr_imposto_w,
			0,
			vl_trib_nao_retido_w,
			vl_base_nao_retido_w,
			vl_trib_adic_w,
			vl_base_adic_w,
			clock_timestamp(),
			nm_usuario_p,
			nextval('nota_fiscal_trib_seq'),
			vl_reducao_base_w,
			nr_seq_regra_w);
		
		if (ie_soma_diminui_w	= 'S') then
			vl_total_imposto_nota_w	:= vl_total_imposto_nota_w + vl_tributo_w;
		elsif (ie_soma_diminui_w	= 'D') then
			vl_total_imposto_nota_w	:= vl_total_imposto_nota_w - vl_tributo_w;
		end if;
	end if;
	end;
end loop;
close C01;

CALL atualiza_total_nota_fiscal(	nr_seq_nota_p,
				nm_usuario_p);

select	count(1)
into STRICT	qt_venctos_w
from	nota_fiscal_venc
where	nr_sequencia	= nr_seq_nota_p;

if (ie_forma_pagamento_w <> 10) then
	select	coalesce(vl_total_nota,0)
	into STRICT	vl_total_nota_w
	from	nota_fiscal
	where	nr_sequencia	= nr_seq_nota_p;

	select	coalesce(sum(vl_vencimento),0)
	into STRICT	vl_vencimento_w
	from	nota_fiscal_venc
	where	nr_sequencia	= nr_seq_nota_p;

	if (coalesce(vl_vencimento_w,0) <> coalesce(vl_total_nota_w,0)) then
		begin
		if (qt_venctos_w = 1) then
			update	nota_fiscal_venc
			set	vl_vencimento	= vl_vencimento + vl_total_nota_w - vl_vencimento_w
			where	nr_sequencia	= nr_seq_nota_p;
		elsif (qt_venctos_w > 1) then
			update	nota_fiscal_venc
			set	vl_vencimento	= vl_vencimento + vl_total_nota_w - vl_vencimento_w
			where	nr_sequencia	= nr_seq_nota_p
			and	dt_vencimento	= dt_emissao_w;
		end if;
		end;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_imposto_nfse ( nr_seq_nota_p bigint, nm_usuario_p text, nr_seq_sit_trib_p bigint, cd_tributo_p bigint) FROM PUBLIC;

