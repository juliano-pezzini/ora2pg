-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_imp_autor_ordem_serv_v50 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_origem_p INOUT bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Importar a Autorização de Ordem de Serviço

Rotina utilizada nas transações ptu via scs homologadas com a unimed brasil.
quando for alterar, favor verificar com o análista responsável para a realização de testes.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_transacao_w			varchar(5);
ie_tipo_cliente_w		varchar(15);
cd_unimed_executora_w		varchar(4);
cd_unimed_beneficiario_w	varchar(4);
cd_unimed_solicitante_w		varchar(4);
nr_seq_execucao_w		bigint;
nr_seq_origem_w			bigint;
nr_seq_solicitante_w		bigint;
dt_validade_w			timestamp;
dt_validade_ww    		varchar(255);
nr_versao_w			smallint;
ds_observacao_w			varchar(999);
ie_tipo_tabela_w		varchar(1);
cd_servico_w			integer;
ds_servico_w			varchar(80);
qt_autorizada_w			varchar(8);
ie_autorizado_w			smallint;
cd_mens_erro_1_w		smallint;
cd_mens_erro_2_w		smallint;
cd_mens_erro_3_w		smallint;
cd_mens_erro_4_w		smallint;
ds_mens_erro_w			varchar(300);
nr_seq_aut_ordem_serv_w		bigint;
nr_seq_guia_w			ptu_requisicao_ordem_serv.nr_seq_guia%type;
nr_seq_requisicao_w		ptu_requisicao_ordem_serv.nr_seq_requisicao%type;
cd_servico_conversao_w		bigint;
qt_registros_w			integer;
qt_autorizada_ww    		integer;

c01 CURSOR FOR
	SELECT	nr_seq_importacao,
		ds_valores
	from	w_scs_importacao
	where	nm_usuario	= nm_usuario_p
	order by nr_seq_importacao;

BEGIN
for	r_c01_w	in c01	loop
	if (r_c01_w.ds_valores	<> 'FIM$') then
		if (r_c01_w.nr_seq_importacao	= 1) then
			cd_transacao_w			:= (substr(r_c01_w.ds_valores,1,5))::numeric;
			ie_tipo_cliente_w		:= trim(both substr(r_c01_w.ds_valores,6,15));
			cd_unimed_executora_w		:= substr(r_c01_w.ds_valores,21,4);
			cd_unimed_beneficiario_w	:= substr(r_c01_w.ds_valores,25,4);
			cd_unimed_solicitante_w		:= substr(r_c01_w.ds_valores,29,4);
			nr_seq_execucao_w		:= (substr(r_c01_w.ds_valores,33,10))::numeric;
			nr_seq_origem_w			:= (substr(r_c01_w.ds_valores,43,10))::numeric;
			nr_seq_solicitante_w		:= (substr(r_c01_w.ds_valores,53,10))::numeric;
			dt_validade_ww			:= trim(both substr(r_c01_w.ds_valores,69,2)||substr(r_c01_w.ds_valores,67,2)||substr(r_c01_w.ds_valores,63,4));
			nr_versao_w			:= (substr(r_c01_w.ds_valores,71,3))::numeric;

			if (coalesce(dt_validade_ww,'X')	<> 'X') then
				dt_validade_w	:= to_date(dt_validade_ww, 'dd/mm/rrrr');
			end if;

			if (ie_tipo_cliente_w	= 'UNIMED') then
				ie_tipo_cliente_w	:= 'U';
			elsif (ie_tipo_cliente_w	= 'PORTAL') then
				ie_tipo_cliente_w	:= 'P';
			elsif (ie_tipo_cliente_w	= 'PRESTADOR') then
				ie_tipo_cliente_w	:= 'R';
			end if;

			select	nextval('ptu_autorizacao_ordem_serv_seq')
			into STRICT	nr_seq_aut_ordem_serv_w
			;

			insert into ptu_autorizacao_ordem_serv(nr_sequencia, dt_atualizacao, nm_usuario,
				 dt_atualizacao_nrec, nm_usuario_nrec, cd_transacao,
				 ie_tipo_cliente, cd_unimed_executora, cd_unimed_beneficiario,
				 nr_seq_execucao, nr_seq_origem, dt_validade,
				 nr_seq_requisicao, nr_seq_guia, ds_arquivo_pedido,
				 nr_transacao_solicitante, cd_unimed_solicitante, nr_versao,
				 ds_mensagem)
			values (nr_seq_aut_ordem_serv_w, clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, cd_transacao_w,
				ie_tipo_cliente_w, cd_unimed_executora_w, cd_unimed_beneficiario_w,
				nr_seq_execucao_w, nr_seq_origem_w, dt_validade_w,
				nr_seq_requisicao_w, nr_seq_guia_w, ds_arquivo_p,
				nr_seq_solicitante_w, cd_unimed_solicitante_w, nr_versao_w,
				'');


		elsif (r_c01_w.nr_seq_importacao	= 2) then
			ds_observacao_w	:= trim(both substr(r_c01_w.ds_valores,1,999));

			update	ptu_autorizacao_ordem_serv
			set	ds_mensagem	= ds_observacao_w
			where	nr_sequencia	= nr_seq_aut_ordem_serv_w;

		elsif (r_c01_w.nr_seq_importacao	> 2)  then
			ie_tipo_tabela_w	:= substr(r_c01_w.ds_valores,1,1);
			cd_servico_w		:= (regexp_replace(substr(r_c01_w.ds_valores,2,8), '[^0-9]', ''))::numeric;
			ds_servico_w		:= substr(r_c01_w.ds_valores,10,80);
			qt_autorizada_w		:= coalesce(trim(both substr(r_c01_w.ds_valores,90,8)),0);
			ie_autorizado_w		:= (Regexp_replace(substr(r_c01_w.ds_valores,98,1), '[^0-9]', ''))::numeric;
			cd_mens_erro_1_w	:= (Regexp_replace(substr(r_c01_w.ds_valores,99,4), '[^0-9]', ''))::numeric;
			cd_mens_erro_2_w	:= (Regexp_replace(substr(r_c01_w.ds_valores,103,4), '[^0-9]', ''))::numeric;
			cd_mens_erro_3_w	:= (Regexp_replace(substr(r_c01_w.ds_valores,107,4), '[^0-9]', ''))::numeric;
			cd_mens_erro_4_w	:= (Regexp_replace(substr(r_c01_w.ds_valores,111,4), '[^0-9]', ''))::numeric;
			ds_mens_erro_w		:= substr(r_c01_w.ds_valores,115,300);

			begin
				qt_autorizada_ww	:= (ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w, 'R'))::numeric;
			exception
			when others then
				qt_autorizada_ww 	:= (replace(ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w, 'R'),',','.'))::numeric;
			end;

			begin
				select	b.cd_servico_consersao
				into STRICT	cd_servico_conversao_w
				from	ptu_requisicao_ordem_serv a,
					ptu_req_ord_serv_servico b
				where	a.nr_sequencia		= b.nr_seq_req_ord
				and	a.nr_seq_origem		= nr_seq_solicitante_w
				and	a.cd_unimed_solicitante	= cd_unimed_solicitante_w;
			exception
			when others then
				cd_servico_conversao_w	:= null;
			end;

			insert into ptu_aut_ordem_serv_servico(nr_sequencia, 		ie_tipo_tabela, 	cd_servico,
				 ds_servico, 		ie_autorizado,		dt_atualizacao,
				 nm_usuario, 		dt_atualizacao_nrec,	nm_usuario_nrec,
				 qt_autorizado, 	cd_servico_conversao,	nr_seq_aut_ord_serv)
			values (nextval('ptu_aut_ordem_serv_servico_seq'),	ie_tipo_tabela_w, 	cd_servico_w,
				 ds_servico_w, 		ie_autorizado_w,	clock_timestamp(),
				 nm_usuario_p, 		clock_timestamp(),		nm_usuario_p,
				 qt_autorizada_ww, 	cd_servico_conversao_w, nr_seq_aut_ordem_serv_w);
		end if;
	end if;
end loop;

CALL ptu_gestao_envio_confirmacao(nr_seq_execucao_w,cd_estabelecimento_p,'AO',nm_usuario_p);

select	count(1)
into STRICT	qt_registros_w
from	ptu_aut_ordem_serv_servico
where	nr_seq_aut_ord_serv	= nr_seq_aut_ordem_serv_w
and	ie_autorizado_w		= 2;

if (qt_registros_w	= 0) then
	-- Se a autorização de ordem de serviço vier totalmente recusada, so estágio da ordem de serviço fica Recusada
	update	ptu_requisicao_ordem_serv
	set	ie_estagio			= 4
	where	nr_transacao_solicitante	= nr_seq_solicitante_w
	and	cd_unimed_solicitante		= cd_unimed_solicitante_w;
else
	-- Se a autorização de ordem de serviço não vier totalmente negada, a ordem de serviço fica Pendente geração guia (triangulação)
	update	ptu_requisicao_ordem_serv
	set	ie_estagio	= 6
	where	nr_transacao_solicitante	= nr_seq_solicitante_w
	and	cd_unimed_solicitante		= cd_unimed_solicitante_w;
end if;

nr_seq_origem_p	:= nr_seq_origem_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_imp_autor_ordem_serv_v50 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_origem_p INOUT bigint) FROM PUBLIC;

