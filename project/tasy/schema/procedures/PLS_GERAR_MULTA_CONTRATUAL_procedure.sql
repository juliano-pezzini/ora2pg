-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_multa_contratual ( nr_seq_contrato_p pls_contrato.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, dt_origem_p timestamp, nr_seq_solicitacao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_isentar_multa_p pls_motivo_cancelamento.ie_isentar_multa%type default null) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Gerar a regra de multa contratual
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_regra_multa_contr_w	pls_regra_multa_contratual.nr_sequencia%type;
vl_multa_w			pls_regra_multa_contratual.vl_multa%type;
tx_multa_w			pls_regra_multa_contratual.tx_multa%type;
ie_aplicacao_regra_w		pls_regra_multa_contratual.ie_aplicacao_regra%type;
ie_referencia_lanc_w		pls_regra_multa_contratual.ie_referencia_lanc%type;
dt_fim_vigencia_w		pls_regra_multa_contratual.dt_fim_vigencia%type;
vl_pagar_w			double precision;
qt_registros_w			bigint;
qt_meses_nao_gerados_w		bigint;
qt_passegens_loop_w		bigint;
vl_mensalidades_nao_geradas_w	double precision;
vl_mensalidade_w		pls_mensalidade.vl_pre_estabelecido%type;
nr_seq_pagador_w		bigint;
dt_mensalidade_w		timestamp;
dt_mensalidade_lanc_w		timestamp;
qt_segurado_w			integer;
qt_segurado_mens_w		integer;
nr_seq_lancamento_prog_w	pls_segurado_mensalidade.nr_sequencia%type;
vl_lancamento_w			double precision;
vl_total_lancamentos_w		double precision;
nr_seq_contrato_princ_w		pls_contrato.nr_contrato_principal%type;
ie_dias_proporcional_w		pls_regra_multa_contratual.ie_proporcional%type;
qt_dias_w			bigint;
dt_origem_w			timestamp;
dt_fim_multa_contr_w		timestamp;
dt_origem_ww			timestamp;
qt_dias_mes_w			bigint;
dt_origem_www			timestamp;
ie_isentar_multa_w		pls_motivo_cancelamento.ie_isentar_multa%type;
ie_tipo_multa_w			pls_regra_multa_contratual.ie_tipo_multa%type;
ie_data_base_w			pls_regra_multa_contratual.ie_data_base%type;
ie_exclusivo_benef_remido_w	pls_contrato.ie_exclusivo_benef_remido%type;
ie_desconsiderar_remido_w	pls_regra_multa_contratual.ie_desconsiderar_remido%type;
ie_remido_w			varchar(1);

C01 CURSOR(nr_seq_pagador_pc	pls_contrato_pagador.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_segurado
	from	pls_segurado a
	where	a.nr_seq_pagador = nr_seq_pagador_pc
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and (coalesce(a.dt_rescisao::text, '') = '' or a.dt_rescisao >= trunc(dt_origem_p,'dd'))
	and (ie_desconsiderar_remido_w = 'N' or pls_obter_se_benef_remido(a.nr_sequencia,dt_origem_p) = 'N');

BEGIN
select	coalesce(max(ie_exclusivo_benef_remido),'N')
into STRICT	ie_exclusivo_benef_remido_w
from	pls_contrato
where	nr_sequencia	= nr_seq_contrato_p;

if (ie_exclusivo_benef_remido_w = 'N') then --Se contrato ativo para remido, a multa contratual ja foi gerada na primeira rescisao
	if (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
		ie_tipo_multa_w := 'B';
	else
		ie_tipo_multa_w := 'C';
	end if;

	select	max(nr_sequencia)
	into STRICT	nr_seq_regra_multa_contr_w
	from	pls_regra_multa_contratual
	where	nr_seq_contrato	= nr_seq_contrato_p
	and	coalesce(ie_tipo_multa, 'C') = ie_tipo_multa_w
	and	dt_origem_p between trunc(dt_inicio_vigencia,'dd') and fim_dia(dt_fim_vigencia);

	if (nr_seq_regra_multa_contr_w IS NOT NULL AND nr_seq_regra_multa_contr_w::text <> '') then
		select	vl_multa,
			tx_multa,
			ie_aplicacao_regra,
			coalesce(ie_referencia_lanc,'P'),
			dt_fim_vigencia,
			coalesce(ie_proporcional,'N'),
			coalesce(ie_data_base, 'M'),
			coalesce(ie_desconsiderar_remido,'S')
		into STRICT	vl_multa_w,
			tx_multa_w,
			ie_aplicacao_regra_w,
			ie_referencia_lanc_w,
			dt_fim_vigencia_w,
			ie_dias_proporcional_w,
			ie_data_base_w,
			ie_desconsiderar_remido_w
		from	pls_regra_multa_contratual
		where	nr_sequencia	= nr_seq_regra_multa_contr_w;

		if (ie_tipo_multa_w = 'C') then
			select	a.nr_contrato_principal,
				coalesce(ie_isentar_multa_p, coalesce(b.ie_isentar_multa,'N')) ie_isentar_multa
			into STRICT	nr_seq_contrato_princ_w,
				ie_isentar_multa_w
			FROM pls_contrato a
LEFT OUTER JOIN pls_motivo_cancelamento b ON (a.nr_seq_motivo_rescisao = b.nr_sequencia)
WHERE a.nr_sequencia = nr_seq_contrato_p;

			if (ie_isentar_multa_w = 'N') then
				vl_pagar_w	:= 0;

				select	max(nr_sequencia)
				into STRICT	nr_seq_pagador_w
				from	pls_contrato_pagador
				where	nr_seq_contrato	= nr_seq_contrato_p
				and	ie_tipo_pagador	= 'P';

				if (coalesce(nr_seq_pagador_w::text, '') = '') then -- Se nao for encontrado um pagador principal no mesmo contrato deve ser considerado o pagador principal do contrato principal
					if (coalesce(nr_seq_contrato_princ_w,0) > 0) then
						select 	max(nr_sequencia)
						into STRICT	nr_seq_pagador_w
						from	pls_contrato_pagador
						where	nr_seq_contrato = nr_seq_contrato_princ_w
						and	ie_tipo_pagador = 'P';
					end if;
				end if;

				if (ie_aplicacao_regra_w <> '1') then
					select	sum(a.vl_preco_atual) - sum(coalesce(a.vl_desconto,0))
					into STRICT	vl_mensalidade_w
					from	pls_segurado_preco	a,
						pls_segurado		b
					where	a.nr_seq_segurado	= b.nr_sequencia
					and	a.nr_sequencia		= pls_obter_seg_preco_ativo(b.nr_sequencia, dt_origem_p)
					and (coalesce(b.dt_rescisao::text, '') = '' or b.dt_rescisao >= dt_origem_p)
					and (ie_desconsiderar_remido_w = 'N' or pls_obter_se_benef_remido(b.nr_sequencia,dt_origem_p) = 'N')
					and	b.nr_seq_contrato	= nr_seq_contrato_p;
				end if;

				--Preco fixo
				if (ie_aplicacao_regra_w = '1') then
					vl_pagar_w	:= vl_multa_w;
				--Busca da ultima mensalidade com percentual
				elsif (ie_aplicacao_regra_w = '3') then
					vl_pagar_w	:= ((coalesce(tx_multa_w,0)/100) * coalesce(vl_mensalidade_w,0));
				--Busca das mensalidades nao pagas com percentual
				elsif (ie_aplicacao_regra_w = '2') and (dt_fim_vigencia_w IS NOT NULL AND dt_fim_vigencia_w::text <> '') then
					if (ie_dias_proporcional_w = 'N') then

						qt_meses_nao_gerados_w	:= 0;
						dt_mensalidade_w	:= trunc(dt_fim_vigencia_w,'month');
						qt_passegens_loop_w	:= 0;
						dt_origem_www		:= dt_origem_p + 1; --solicitado para comecar a contagem dos meses a partir de um dia apos a rescisao.
						while(dt_origem_www <= dt_mensalidade_w) and (qt_passegens_loop_w < 20) loop

							select	count(1)
							into STRICT	qt_registros_w
							from	pls_mensalidade
							where	nr_seq_pagador	= nr_seq_pagador_w
							and	dt_referencia	= dt_mensalidade_w
							and	coalesce(ie_cancelamento::text, '') = ''  LIMIT 1;

							if (qt_registros_w = 0) or (ie_data_base_w = 'R') then
								qt_meses_nao_gerados_w	:= qt_meses_nao_gerados_w + 1;
							end if;

							dt_mensalidade_w	:= add_months(dt_mensalidade_w,-1);
							qt_passegens_loop_w	:= qt_passegens_loop_w + 1;
						end loop;
	
						vl_mensalidades_nao_geradas_w	:= vl_mensalidade_w * qt_meses_nao_gerados_w;

						vl_pagar_w	:= ((coalesce(tx_multa_w,0)/100) * coalesce(vl_mensalidades_nao_geradas_w,0));
		
		  
					else
						dt_origem_w		:= trunc(dt_origem_p,'dd');
						dt_fim_multa_contr_w	:= trunc(dt_fim_vigencia_w,'dd');
						qt_dias_w		:= 0;
						qt_dias_mes_w		:= 0;
						qt_meses_nao_gerados_w	:= 0;
						dt_origem_ww		:= null;

						while(dt_origem_w <= dt_fim_multa_contr_w) loop
							select	count(1)
							into STRICT	qt_registros_w
							from	pls_mensalidade
							where	nr_seq_pagador	= nr_seq_pagador_w
							and	dt_referencia	= trunc(dt_origem_w,'month')
							and	coalesce(ie_cancelamento::text, '') = '';

							dt_origem_ww	:= dt_origem_w;
							dt_origem_w	:= add_months(dt_origem_w,1);

							if	((qt_registros_w = 0) or (ie_data_base_w = 'R')) and (dt_origem_w <= dt_fim_multa_contr_w) then
								qt_meses_nao_gerados_w	:= qt_meses_nao_gerados_w + 1;
							end if;
						end loop;

						select	obter_qt_dias_mes(dt_fim_multa_contr_w)
						into STRICT	qt_dias_mes_w
						;

						if (dt_origem_ww IS NOT NULL AND dt_origem_ww::text <> '') then
							qt_dias_w	:= dt_fim_multa_contr_w - dt_origem_ww;
						end if;

						vl_mensalidades_nao_geradas_w	:= ((vl_mensalidade_w * qt_meses_nao_gerados_w) + ((vl_mensalidade_w/qt_dias_mes_w) * qt_dias_w));

						vl_pagar_w	:= ((coalesce(tx_multa_w,0)/100) * coalesce(vl_mensalidades_nao_geradas_w,0));
					end if;
				end if;

				if (vl_pagar_w	> 0) then
					if (nr_seq_solicitacao_p IS NOT NULL AND nr_seq_solicitacao_p::text <> '') then
						dt_mensalidade_lanc_w	:= clock_timestamp();
					else
						dt_mensalidade_lanc_w	:= trunc(dt_origem_p,'Month');

						if (ie_referencia_lanc_w = 'P') then
							select	count(1)
							into STRICT	qt_registros_w
							from	pls_mensalidade
							where	nr_seq_pagador	= nr_seq_pagador_w
							and	dt_referencia	= dt_mensalidade_lanc_w
							and	coalesce(ie_cancelamento::text, '') = ''  LIMIT 1;

							qt_passegens_loop_w	:= 0;

							while(qt_registros_w > 0) and (qt_passegens_loop_w < 10) loop
								dt_mensalidade_lanc_w	:= add_months(dt_mensalidade_lanc_w,1);

								select	count(1)
								into STRICT	qt_registros_w
								from	pls_mensalidade
								where	nr_seq_pagador	= nr_seq_pagador_w
								and	dt_referencia	= dt_mensalidade_lanc_w
								and	coalesce(ie_cancelamento::text, '') = ''  LIMIT 1;

								qt_passegens_loop_w	:= qt_passegens_loop_w + 1;
							end loop;
						end if;
					end if;

					select	count(1)
					into STRICT	qt_segurado_mens_w
					from	pls_segurado a
					where	a.nr_seq_pagador = nr_seq_pagador_w
					and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
					and (coalesce(a.dt_rescisao::text, '') = '' or a.dt_rescisao >= trunc(dt_origem_p,'dd'))
					and (ie_desconsiderar_remido_w = 'N' or pls_obter_se_benef_remido(a.nr_sequencia,dt_origem_p) = 'N');

					if (qt_segurado_mens_w > 0) then
						qt_segurado_w := 0;
						for r_c01_w in C01(nr_seq_pagador_w) loop
							qt_segurado_w := qt_segurado_w + 1;

							vl_lancamento_w	:= dividir_sem_round(vl_pagar_w,qt_segurado_mens_w);

							select	nextval('pls_segurado_mensalidade_seq')
							into STRICT	nr_seq_lancamento_prog_w
							;

							insert into pls_segurado_mensalidade(	nr_sequencia, nm_usuario, dt_atualizacao, nm_usuario_nrec, dt_atualizacao_nrec,
									cd_estabelecimento, nr_seq_segurado, ie_situacao, dt_referencia, vl_item,
									ie_tipo_item, tx_desconto, ie_tipo_lanc, nr_seq_regra_resc_contrato)
							values (	nr_seq_lancamento_prog_w, nm_usuario_p, clock_timestamp(), nm_usuario_p, clock_timestamp(),
									cd_estabelecimento_p, r_c01_w.nr_seq_segurado, 'A', dt_mensalidade_lanc_w, vl_lancamento_w,
									'36', 0, 'P', nr_seq_regra_multa_contr_w);

							--Se for o ultimo fazer ajuste de arredondamento
							if (qt_segurado_w = qt_segurado_mens_w) then
								select	sum(coalesce(vl_item,0))
								into STRICT	vl_total_lancamentos_w
								from	pls_segurado_mensalidade a
								where	a.nr_seq_regra_resc_contrato = nr_seq_regra_multa_contr_w;

								if (vl_total_lancamentos_w <> vl_pagar_w) then
									update	pls_segurado_mensalidade
									set	vl_item		= vl_item + (vl_pagar_w - vl_total_lancamentos_w)
									where	nr_sequencia	= nr_seq_lancamento_prog_w;
								end if;
							end if;
						end loop;
					end if;
				end if;
			end if;
		elsif (ie_tipo_multa_w = 'B') then
			select	coalesce(b.ie_isentar_multa,'N') ie_isentar_multa,
				pls_obter_se_benef_remido(b.nr_sequencia,dt_origem_p) ie_remido
			into STRICT	ie_isentar_multa_w,
				ie_remido_w
			FROM pls_segurado a
LEFT OUTER JOIN pls_motivo_cancelamento b ON (a.nr_seq_motivo_cancelamento = b.nr_sequencia)
WHERE a.nr_sequencia = nr_seq_segurado_p;

			if (ie_isentar_multa_w = 'N') and (ie_desconsiderar_remido_w = 'N' or ie_remido_w = 'N') then
				vl_pagar_w	:= 0;

				if (ie_aplicacao_regra_w <> '1') then
					select	sum(a.vl_preco_atual) - sum(coalesce(a.vl_desconto,0))
					into STRICT	vl_mensalidade_w
					from	pls_segurado_preco	a,
						pls_segurado		b
					where	a.nr_seq_segurado	= b.nr_sequencia
					and	a.nr_sequencia		= pls_obter_seg_preco_ativo(nr_seq_segurado_p, dt_origem_p);
				end if;

				if (ie_aplicacao_regra_w = '1') then --Preco fixo
					vl_pagar_w	:= vl_multa_w;
				elsif (ie_aplicacao_regra_w = '3') then --Busca da ultima mensalidade com percentual
					vl_pagar_w	:= ((coalesce(tx_multa_w,0)/100) * coalesce(vl_mensalidade_w,0));
				elsif	(ie_aplicacao_regra_w = '2' AND dt_fim_vigencia_w IS NOT NULL AND dt_fim_vigencia_w::text <> '') then --Busca das mensalidades nao pagas com percentual
					if (ie_dias_proporcional_w = 'N') then

						qt_meses_nao_gerados_w	:= 0;
						dt_mensalidade_w	:= trunc(dt_fim_vigencia_w,'month');
						qt_passegens_loop_w	:= 0;
						dt_origem_www		:= dt_origem_p + 1;

						while(dt_origem_www <= dt_mensalidade_w) and (qt_passegens_loop_w < 20) loop

							select	count(1)
							into STRICT	qt_registros_w
							from	pls_mensalidade a,
								pls_mensalidade_segurado b
							where	a.nr_sequencia = b.nr_seq_mensalidade
							and	b.nr_seq_segurado = nr_seq_segurado_p
							and	b.dt_mesano_referencia = dt_mensalidade_w
							and	coalesce(a.ie_cancelamento::text, '') = '';

							if (qt_registros_w = 0) or (ie_data_base_w = 'R') then
								qt_meses_nao_gerados_w	:= qt_meses_nao_gerados_w + 1;
							end if;

							dt_mensalidade_w	:= add_months(dt_mensalidade_w,-1);
							qt_passegens_loop_w	:= qt_passegens_loop_w + 1;
						end loop;
		
						vl_mensalidades_nao_geradas_w	:= vl_mensalidade_w * qt_meses_nao_gerados_w;

						vl_pagar_w	:= ((coalesce(tx_multa_w,0)/100) * coalesce(vl_mensalidades_nao_geradas_w,0));
					else
						dt_origem_w		:= trunc(dt_origem_p,'dd');
						dt_fim_multa_contr_w	:= trunc(dt_fim_vigencia_w,'dd');
						qt_dias_w		:= 0;
						qt_dias_mes_w		:= 0;
						qt_meses_nao_gerados_w	:= 0;
						dt_origem_ww		:= null;
						
						while(dt_origem_w <= dt_fim_multa_contr_w) loop
							select	count(1)
							into STRICT	qt_registros_w
							from	pls_mensalidade a,
								pls_mensalidade_segurado b
							where		a.nr_sequencia = b.nr_seq_mensalidade
							and	b.nr_seq_segurado = nr_seq_segurado_p
							and	b.dt_mesano_referencia = trunc(dt_origem_w, 'month')
							and	coalesce(a.ie_cancelamento::text, '') = '';
							
							dt_origem_ww	:= dt_origem_w;
							dt_origem_w	:= add_months(dt_origem_w,1);

							if	((qt_registros_w = 0) or (ie_data_base_w = 'R')) and (dt_origem_w <= dt_fim_multa_contr_w) then
								qt_meses_nao_gerados_w	:= qt_meses_nao_gerados_w + 1;
							end if;				

						end loop;
						
						select	obter_qt_dias_mes(dt_fim_multa_contr_w)
						into STRICT	qt_dias_mes_w
						;
						
						if (dt_origem_ww IS NOT NULL AND dt_origem_ww::text <> '') then
							qt_dias_w	:= dt_fim_multa_contr_w - dt_origem_ww;
						end if;
						vl_mensalidades_nao_geradas_w	:= ((vl_mensalidade_w * qt_meses_nao_gerados_w) + ((vl_mensalidade_w/qt_dias_mes_w) * qt_dias_w));

						vl_pagar_w	:= ((coalesce(tx_multa_w,0)/100) * coalesce(vl_mensalidades_nao_geradas_w,0));
					end if;
				end if;

				if (vl_pagar_w	> 0) then
					if (nr_seq_solicitacao_p IS NOT NULL AND nr_seq_solicitacao_p::text <> '') then
						dt_mensalidade_lanc_w	:= clock_timestamp();
					else
						dt_mensalidade_lanc_w	:= trunc(dt_origem_p,'Month');

						if (ie_referencia_lanc_w = 'P') then
							select	count(1)
							into STRICT	qt_registros_w
							from	pls_mensalidade a,
								pls_mensalidade_segurado b
							where	a.nr_sequencia = b.nr_seq_mensalidade
							and	b.nr_seq_segurado = nr_seq_segurado_p
							and	b.dt_mesano_referencia = dt_mensalidade_lanc_w
							and	coalesce(a.ie_cancelamento::text, '') = '';

							qt_passegens_loop_w	:= 0;

							while(qt_registros_w > 0) and (qt_passegens_loop_w < 10) loop
								dt_mensalidade_lanc_w	:= add_months(dt_mensalidade_lanc_w,1);

								select	count(1)
								into STRICT	qt_registros_w
								from	pls_mensalidade a,
									pls_mensalidade_segurado b
								where	a.nr_sequencia = b.nr_seq_mensalidade
								and	b.nr_seq_segurado = nr_seq_segurado_p
								and	b.dt_mesano_referencia = dt_mensalidade_lanc_w
								and	coalesce(a.ie_cancelamento::text, '') = '';

								qt_passegens_loop_w	:= qt_passegens_loop_w + 1;
							end loop;
						end if;
					end if;

					insert into pls_segurado_mensalidade(	nr_sequencia, nm_usuario, dt_atualizacao, nm_usuario_nrec, dt_atualizacao_nrec,
							cd_estabelecimento, nr_seq_segurado, ie_situacao, dt_referencia, vl_item,
							ie_tipo_item, tx_desconto, ie_tipo_lanc, nr_seq_regra_resc_contrato)
					values (	nextval('pls_segurado_mensalidade_seq'), nm_usuario_p, clock_timestamp(), nm_usuario_p, clock_timestamp(),
							cd_estabelecimento_p, nr_seq_segurado_p, 'A', dt_mensalidade_lanc_w, vl_pagar_w,
							'36', 0, 'P', nr_seq_regra_multa_contr_w);
				end if;
			end if;
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_multa_contratual ( nr_seq_contrato_p pls_contrato.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, dt_origem_p timestamp, nr_seq_solicitacao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_isentar_multa_p pls_motivo_cancelamento.ie_isentar_multa%type default null) FROM PUBLIC;

