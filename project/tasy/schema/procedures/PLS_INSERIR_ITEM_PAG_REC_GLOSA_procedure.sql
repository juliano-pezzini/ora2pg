-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_inserir_item_pag_rec_glosa ( nr_seq_rec_glosa_conta_p pls_rec_glosa_conta.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE

			
C01 CURSOR(	nr_seq_rec_glosa_conta_pc	pls_rec_glosa_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_proc_rec,
		null nr_seq_mat_rec,
		a.vl_acatado,
		a.nr_seq_evento,
		coalesce(a.vl_recursado,0) - coalesce(a.vl_acatado,0) vl_glosa,
		'P' ie_tipo,
		b.nr_sequencia nr_seq_item,
		(SELECT	max(x.nr_seq_prestador)
		 from	pls_proc_participante x
		 where	x.nr_seq_conta_proc = b.nr_sequencia
		 and	(nr_seq_prestador IS NOT NULL AND nr_seq_prestador::text <> '')) nr_seq_prest_partic,
		(select	count(1)
		 from	pls_proc_participante x
		 where	x.nr_seq_conta_proc = b.nr_sequencia
		 and 	(x.nr_seq_prestador IS NOT NULL AND x.nr_seq_prestador::text <> '')) qt_partic,
		a.vl_recursado,
		b.cd_procedimento,
		b.ie_origem_proced,
		null nr_seq_material,
		null nr_seq_prest_fornec,
		b.ie_tipo_despesa,
		b.ie_ato_cooperado,
		b.vl_liberado,
		b.vl_glosa vl_glosa_orig
	from	pls_rec_glosa_proc a,
		pls_conta_proc b
	where	a.nr_seq_conta_proc 	= b.nr_sequencia
	and	a.nr_seq_conta_rec	= nr_seq_rec_glosa_conta_pc
	
union all

	select	null nr_seq_proc_rec,
		a.nr_sequencia nr_seq_mat_rec,
		a.vl_acatado,
		a.nr_seq_evento,
		coalesce(a.vl_recursado,0) - coalesce(a.vl_acatado,0) vl_glosa,
		'M' ie_tipo,
		b.nr_sequencia nr_seq_item,
		null nr_seq_prest_partic,
		0 qt_partic,
		a.vl_recursado,
		null cd_procedimento,
		null ie_origem_proced,
		b.nr_seq_material,
		b.nr_seq_prest_fornec,
		b.ie_tipo_despesa,
		b.ie_ato_cooperado,
		b.vl_liberado,
		b.vl_glosa vl_glosa_orig
	from	pls_rec_glosa_mat a,
		pls_conta_mat b
	where	a.nr_seq_conta_mat = b.nr_sequencia
	and	a.nr_seq_conta_rec = nr_seq_rec_glosa_conta_pc;
	
C02 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type,
		nr_seq_item_ref_pc	pls_conta_proc.nr_sequencia%type,
		ie_tipo_pc		text) FOR
	SELECT	a.nr_seq_prestador_pgto,
		max(a.ie_ato_cooperado) ie_ato_cooperado,
		max(a.nr_seq_grupo_ans) nr_seq_grupo_ans,
		sum(a.vl_liberado) vl_liberado,
		sum(a.vl_glosa) vl_glosa_orig
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta = nr_seq_conta_pc
	and	a.nr_seq_conta_proc = nr_seq_item_ref_pc
	and	a.ie_situacao = 'A'
	and	ie_tipo_pc = 'P'
	group by a.nr_seq_prestador_pgto
	
union all

	SELECT	a.nr_seq_prestador_pgto,
		max(a.ie_ato_cooperado) ie_ato_cooperado,
		max(a.nr_seq_grupo_ans) nr_seq_grupo_ans,
		sum(a.vl_liberado) vl_liberado,
		sum(a.vl_glosa) vl_glosa_orig
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta = nr_seq_conta_pc
	and	a.nr_seq_conta_mat = nr_seq_item_ref_pc
	and	a.ie_situacao = 'A'
	and	ie_tipo_pc = 'M'
	group by a.nr_seq_prestador_pgto;

nr_seq_conta_rec_item_w		pls_conta_rec_resumo_item.nr_sequencia%type;
nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
nr_seq_segurado_w		pls_conta.nr_seq_segurado%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_grupo_ans_w		pls_conta_medica_resumo.nr_seq_grupo_ans%type;
ie_origem_conta_w		pls_conta.ie_origem_conta%type;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
nr_seq_prest_prot_w		pls_prestador.nr_sequencia%type;
dt_apresentacao_lote_w		pls_rec_glosa_protocolo.dt_apresentacao_lote%type;
nr_seq_prestador_pgto_w		pls_conta_rec_resumo_item.nr_seq_prestador_pgto%type;
nr_seq_regra_w			pls_prestador_pagamento.nr_sequencia%type;
ie_define_pgto_w		pls_prestador_pagamento.ie_define_pagamento%type;
ie_cobrar_material_w		pls_prestador_pagamento.ie_cobrar_material%type;
ie_cobrar_co_w			pls_prestador_pagamento.ie_cobrar_co%type;
ie_existe_prest_partic_w	varchar(1) := 'N';
ie_status_w			pls_rec_glosa_conta.ie_status%type;
nr_seq_prestador_solic_w	pls_prestador.nr_sequencia%type;
cd_medico_solicitante_w		pls_conta.cd_medico_solicitante%type;
dt_atendimento_referencia_w	pls_conta.dt_atendimento_referencia%type;
ie_medico_solic_coope_w		varchar(10);
ie_medico_exec_coope_w		varchar(10);
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
nr_seq_regra_cooperado_w	pls_ato_cooperado.nr_sequencia%type;
ie_ato_cooperado_w		pls_ato_cooperado.ie_ato_cooperado%type;
cd_medico_executor_w		pls_conta.cd_medico_executor%type;
ie_prestador_pagamento_w	pls_parametros_rec_glosa.ie_prestador_pagamento%type;
pr_acatado_w			double precision;	
vl_acatado_w			pls_conta_rec_resumo_item.vl_liberado%type;
vl_glosa_w			pls_conta_rec_resumo_item.vl_liberado%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
ie_prop_glosa_tot_resumo_w	pls_parametros.ie_prop_glosa_tot_resumo%type := 'N';

BEGIN

cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;

if (cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '') then
	select 	coalesce(ie_prop_glosa_tot_resumo, 'N')
	into STRICT	ie_prop_glosa_tot_resumo_w
	from 	pls_parametros
	where 	cd_estabelecimento = cd_estabelecimento_w;
end if;

select	coalesce(max(ie_prestador_pagamento),'N')
into STRICT	ie_prestador_pagamento_w
from	pls_parametros_rec_glosa;

begin
select	a.nr_seq_prestador_exec,
	a.nr_seq_segurado,
	a.nr_sequencia,
	a.ie_origem_conta,
	a.ie_tipo_guia,
	a.nr_seq_prestador,
	a.cd_medico_solicitante,
	a.cd_medico_executor,
	a.dt_atendimento,
	coalesce(a.ie_tipo_protocolo,'C')
into STRICT	nr_seq_prestador_exec_w,
	nr_seq_segurado_w,
	nr_seq_conta_w,
	ie_origem_conta_w,
	ie_tipo_guia_w,
	nr_seq_prestador_solic_w,
	cd_medico_solicitante_w,
	cd_medico_executor_w,
	dt_atendimento_referencia_w,
	ie_tipo_protocolo_w
from	pls_rec_glosa_conta	b,
	pls_conta_v		a
where	b.nr_seq_conta		= a.nr_sequencia
and	b.nr_sequencia		= nr_seq_rec_glosa_conta_p;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(750645);
end;

select	max(a.nr_seq_prestador),
	max(a.dt_apresentacao_lote),
	max(b.ie_status)
into STRICT	nr_seq_prest_prot_w,
	dt_apresentacao_lote_w,
	ie_status_w
from	pls_rec_glosa_protocolo a,
	pls_rec_glosa_conta b
where	a.nr_sequencia = b.nr_seq_protocolo
and	b.nr_sequencia = nr_seq_rec_glosa_conta_p;

ie_medico_solic_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_solicitante_w, dt_atendimento_referencia_w, null);

if (ie_medico_solic_coope_w = 'S') then
	ie_medico_solic_coope_w := 'C'; -- Caso ele n?o for cooperador a function j? retorna N
end if;

ie_medico_exec_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_executor_w, dt_atendimento_referencia_w, null);
	
if (ie_medico_exec_coope_w = 'S') then
	ie_medico_exec_coope_w := 'C'; -- Caso ele n?o for cooperador a function j? retorna N
end if;

-- N?o pode ser gerado quando a conta de recurso esta cancelada
if (coalesce(ie_status_w,'2') != '3') then
	for rc01_w in c01(nr_seq_rec_glosa_conta_p) loop
		
		if (ie_prestador_pagamento_w = 'S') then
			
			for r_C02_w in C02(nr_seq_conta_w, rc01_w.nr_seq_item, rc01_w.ie_tipo) loop
				
				nr_seq_conta_rec_item_w	:= null;
				
				--Se item totalmente glosado e utilizado o par?metro de proporcionaliza??o, ent?o precisar calcular pelo valor glosa, j? que podem ter mais de um item no resumo com valor zerado
				if (ie_prop_glosa_tot_resumo_w = 'S' and rc01_w.vl_liberado = 0) then
				
					pr_acatado_w := dividir(r_C02_w.vl_glosa_orig, rc01_w.vl_glosa_orig);			
					
					if (pr_acatado_w > 0) then
						vl_acatado_w := round((rc01_w.vl_acatado * pr_acatado_w)::numeric,2);
						vl_glosa_w := round((rc01_w.vl_glosa * pr_acatado_w)::numeric,2);
					else
						vl_acatado_w := rc01_w.vl_acatado;
						vl_glosa_w := rc01_w.vl_glosa;
					end if;
				
				else
					pr_acatado_w := dividir(r_C02_w.vl_liberado, rc01_w.vl_liberado);	
					
					if (pr_acatado_w > 0) then
						vl_acatado_w := round((rc01_w.vl_acatado * pr_acatado_w)::numeric,2);
						vl_glosa_w := round((rc01_w.vl_glosa * pr_acatado_w)::numeric,2);
					else
						vl_acatado_w := rc01_w.vl_acatado;
						vl_glosa_w := rc01_w.vl_glosa;
					end if;
					
				end if;
		
				if (rc01_w.nr_seq_mat_rec IS NOT NULL AND rc01_w.nr_seq_mat_rec::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_conta_rec_item_w
					from	pls_conta_rec_resumo_item
					where	nr_seq_mat_rec		= rc01_w.nr_seq_mat_rec
					and	nr_seq_conta_rec	= nr_seq_rec_glosa_conta_p
					and	nr_seq_prestador_pgto	= r_C02_w.nr_seq_prestador_pgto
					and	ie_situacao		= 'A';
				elsif (rc01_w.nr_seq_proc_rec IS NOT NULL AND rc01_w.nr_seq_proc_rec::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_conta_rec_item_w
					from	pls_conta_rec_resumo_item
					where	nr_seq_proc_rec		= rc01_w.nr_seq_proc_rec
					and	nr_seq_conta_rec	= nr_seq_rec_glosa_conta_p
					and	nr_seq_prestador_pgto	= r_C02_w.nr_seq_prestador_pgto
					and	ie_situacao		= 'A';
				end if;
				
				if (coalesce(nr_seq_conta_rec_item_w::text, '') = '') then
				
					insert 	into 	pls_conta_rec_resumo_item(	nr_sequencia, dt_atualizacao, nm_usuario,
							dt_atualizacao_nrec, nm_usuario_nrec, dt_competencia_pgto,
							nr_seq_mat_rec, nr_seq_conta_rec, nr_seq_prestador_pgto,
							nr_seq_proc_rec, vl_liberado, nr_seq_evento,
							nr_seq_segurado, vl_glosa, nr_seq_prestador_exec,
							nr_seq_conta,ie_ato_cooperado, ie_situacao,
							nr_seq_grupo_ans)
					values (	nextval('pls_conta_rec_resumo_item_seq'), clock_timestamp(), nm_usuario_p,
							clock_timestamp(), nm_usuario_p, clock_timestamp(),
							rc01_w.nr_seq_mat_rec, nr_seq_rec_glosa_conta_p, r_C02_w.nr_seq_prestador_pgto,
							rc01_w.nr_seq_proc_rec, vl_acatado_w, rc01_w.nr_seq_evento,
							nr_seq_segurado_w, vl_glosa_w, nr_seq_prestador_exec_w, 
							nr_seq_conta_w, r_C02_w.ie_ato_cooperado, 'A', 
							r_C02_w.nr_seq_grupo_ans);
				else
					update	pls_conta_rec_resumo_item
					set	vl_liberado		= vl_acatado_w,
						vl_glosa		= vl_glosa_w,
						ie_ato_cooperado	= r_C02_w.ie_ato_cooperado,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp(),
						nr_seq_grupo_ans	= r_C02_w.nr_seq_grupo_ans
					where	nr_sequencia		= nr_seq_conta_rec_item_w;				
				end if;
				
			end loop;
		else
		
			if (rc01_w.qt_partic > 0) then
				ie_existe_prest_partic_w := 'S';
			end if;
			
			SELECT * FROM pls_obter_prestador_pgto(	nr_seq_prest_prot_w, nr_seq_prestador_exec_w, rc01_w.nr_seq_prest_partic, rc01_w.vl_recursado, null, rc01_w.cd_procedimento, rc01_w.ie_origem_proced, rc01_w.nr_seq_material, rc01_w.nr_seq_prest_fornec, nm_usuario_p, ie_origem_conta_w, ie_tipo_guia_w, ie_existe_prest_partic_w, dt_apresentacao_lote_w, 'RG', nr_seq_prestador_pgto_w, nr_seq_regra_w, ie_define_pgto_w, ie_cobrar_material_w, ie_cobrar_co_w) INTO STRICT nr_seq_prestador_pgto_w, nr_seq_regra_w, ie_define_pgto_w, ie_cobrar_material_w, ie_cobrar_co_w;
							
			if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
				if (ie_define_pgto_w = 'A') then
					nr_seq_prestador_pgto_w := rc01_w.nr_seq_prest_partic;		
				end if;
			elsif ((nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') and ie_define_pgto_w = 'M') then
			
				--Se cair aqui ? que dever? buscar o prestador diretamente vinculado ao m?dico executor da conta. 
				if (cd_medico_executor_w IS NOT NULL AND cd_medico_executor_w::text <> '') then
					select max(nr_sequencia)
					into STRICT	nr_seq_prestador_pgto_w
					from	pls_prestador
					where 	cd_pessoa_fisica = cd_medico_executor_w;
				end if;
			
			else
				nr_seq_prestador_pgto_w := nr_seq_prestador_exec_w;
			end if;
			
			SELECT * FROM pls_obter_tipo_ato_cooperado(	rc01_w.cd_procedimento, rc01_w.ie_origem_proced, rc01_w.nr_seq_item, rc01_w.ie_tipo, nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prest_prot_w, nr_seq_prestador_pgto_w, ie_medico_solic_coope_w, ie_medico_exec_coope_w, rc01_w.nr_seq_material, ie_tipo_protocolo_w, ie_tipo_guia_w, rc01_w.ie_tipo_despesa, rc01_w.ie_tipo_despesa, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;
			
			if (coalesce(ie_ato_cooperado_w::text, '') = '') then
				select	max(x.ie_ato_cooperado)
				into STRICT	ie_ato_cooperado_w
				from	pls_conta_medica_resumo	x
				where	x.nr_seq_item		= rc01_w.nr_seq_item
				and	x.ie_proc_mat		= rc01_w.ie_tipo
				and	x.nr_seq_prestador_pgto	= nr_seq_prestador_exec_w
				and	x.ie_situacao		!= 'I';
				
				if (coalesce(ie_ato_cooperado_w::text, '') = '') then
					ie_ato_cooperado_w := rc01_w.ie_ato_cooperado;
				end if;
			end if;
			
			select	max(x.nr_seq_grupo_ans)
			into STRICT	nr_seq_grupo_ans_w
			from	pls_conta_medica_resumo	x
			where	x.nr_seq_item		= rc01_w.nr_seq_item
			and	x.ie_proc_mat		= rc01_w.ie_tipo
			and	x.nr_seq_prestador_pgto	= nr_seq_prestador_exec_w
			and	x.ie_situacao		!= 'I';
			
			nr_seq_conta_rec_item_w	:= null;
			
			if (rc01_w.nr_seq_mat_rec IS NOT NULL AND rc01_w.nr_seq_mat_rec::text <> '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_rec_item_w
				from	pls_conta_rec_resumo_item
				where	nr_seq_mat_rec		= rc01_w.nr_seq_mat_rec
				and	nr_seq_conta_rec	= nr_seq_rec_glosa_conta_p
				and	ie_situacao		= 'A';
			elsif (rc01_w.nr_seq_proc_rec IS NOT NULL AND rc01_w.nr_seq_proc_rec::text <> '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_rec_item_w
				from	pls_conta_rec_resumo_item
				where	nr_seq_proc_rec		= rc01_w.nr_seq_proc_rec
				and	nr_seq_conta_rec	= nr_seq_rec_glosa_conta_p
				and	ie_situacao		= 'A';
			end if;

			if (coalesce(nr_seq_conta_rec_item_w::text, '') = '') then
				insert into pls_conta_rec_resumo_item(	nr_sequencia, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, dt_competencia_pgto,
						nr_seq_mat_rec, nr_seq_conta_rec, nr_seq_prestador_pgto,
						nr_seq_proc_rec, vl_liberado, nr_seq_evento,
						nr_seq_segurado, vl_glosa, nr_seq_prestador_exec,
						nr_seq_conta,ie_ato_cooperado, ie_situacao,
						nr_seq_grupo_ans, nr_seq_regra_pgto)
				values (	nextval('pls_conta_rec_resumo_item_seq'), clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, clock_timestamp(),
						rc01_w.nr_seq_mat_rec, nr_seq_rec_glosa_conta_p, nr_seq_prestador_pgto_w,
						rc01_w.nr_seq_proc_rec, rc01_w.vl_acatado, rc01_w.nr_seq_evento,
						nr_seq_segurado_w, rc01_w.vl_glosa, nr_seq_prestador_exec_w, 
						nr_seq_conta_w, ie_ato_cooperado_w, 'A', 
						nr_seq_grupo_ans_w, nr_seq_regra_w);
			else
				update	pls_conta_rec_resumo_item
				set	vl_liberado		= rc01_w.vl_acatado,
					vl_glosa		= rc01_w.vl_glosa,
					ie_ato_cooperado	= ie_ato_cooperado_w,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					nr_seq_grupo_ans	= nr_seq_grupo_ans_w,
					nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w,
					nr_seq_regra_pgto	= nr_seq_regra_w
				where	nr_sequencia		= nr_seq_conta_rec_item_w;
			end if;
		end if;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_inserir_item_pag_rec_glosa ( nr_seq_rec_glosa_conta_p pls_rec_glosa_conta.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;

