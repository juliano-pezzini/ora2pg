-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_insert_solucoes_reg (( nr_atendimento_p atendimento_paciente.nr_atendimento%TYPE, nr_prescricao_p prescr_medica.nr_prescricao%TYPE, nr_sequencia_p cpoe_material.nr_sequencia%TYPE, cd_estabelecimento_p estabelecimento.cd_estabelecimento%TYPE, cd_perfil_p perfil.cd_perfil%TYPE, nm_usuario_p usuario.nm_usuario%TYPE, ie_origem_inf_p prescr_medica.ie_origem_inf%TYPE, dt_inicio_prescr_p timestamp, dt_inicio_ret_p OUT timestamp, ie_copia_diaria_p CHAR DEFAULT 'N', ie_disp_semanal_p CHAR DEFAULT 'N' ) IS qt_dose_w cpoe_material.qt_dose%TYPE) AS $body$
DECLARE

        qt_horas_w  varchar(10);
        dt_fim_ww   timestamp;

BEGIN
    /*tratamento igual ao do java, +1 para pegar todos os intervalos entre os horarios*/

        SELECT
            MAX(trunc((obter_dif_data(dt_inicio, dt_fim, 'TM') / 60), 0)) + 1,
            MAX(dt_fim)
        INTO STRICT
            qt_horas_w,
            dt_fim_ww
        FROM
            cpoe_material
        WHERE
                nr_sequencia = nr_sequencia_p
            AND nr_atendimento = nr_atendimento_p;

        IF ( qt_horas_w > 24 OR coalesce(dt_fim_ww::text, '') = '' ) THEN
            RETURN;
        ELSE
            RETURN;
        END IF;

    END;

    FUNCTION obter_obs_enf_farm(
        cd_material_p   IN  prescr_material.cd_material%TYPE,
        nr_sequencia_p  IN  cpoe_material.nr_sequencia%TYPE,
        ie_tipo_obs_p   IN  VARCHAR2
    ) RETURN;
    BEGIN
        IF ( ie_tipo_obs_p = 'farm' ) THEN
            SELECT
                MAX(ds_observacao_far)
            INTO STRICT ds_observacao_w
            FROM
                prescr_material
            WHERE
                    nr_prescricao = nr_prescricao_orig_w
                AND ie_agrupador = 4
                AND cd_material = cd_material_p
                AND nr_seq_mat_cpoe = nr_sequencia_p;

        ELSIF ( ie_tipo_obs_p = 'enf' ) THEN
            SELECT
                MAX(ds_observacao_enf)
            INTO STRICT ds_observacao_w
            FROM
                prescr_material
            WHERE
                    nr_prescricao = nr_prescricao_orig_w
                AND ie_agrupador = 4
                AND cd_material = cd_material_p
                AND nr_seq_mat_cpoe = nr_sequencia_p;

        END IF;

        RETURN;
    END;

    PROCEDURE gerar_componente_solucao(
        cd_material_p             IN  NUMBER,
        cd_unidade_medida_dose_p  IN  VARCHAR2,
        qt_dose_p                 IN  NUMBER,
        ie_agrupador_p            IN  NUMBER,
        ds_dose_diferenciada_p    IN  VARCHAR2 DEFAULT '',
        ie_diluente_p             IN  VARCHAR2 DEFAULT 'N',
        qt_solucao_p              IN  NUMBER ,
        nr_seq_diluicao_p         IN  NUMBER ,
        ds_observacao_p           IN  VARCHAR2 DEFAULT '',
        qt_dose_correcao_p        IN  NUMBER ,
        ie_medicacao_paciente_p   IN  VARCHAR2 ,
        ie_gerar_lote_p           IN  material_diluicao.ie_gerar_lote%TYPE ,
        cd_motivo_baixa_p         IN  material_diluicao.cd_motivo_baixa%TYPE
    ) IS

        qt_solucao_mat_w          prescr_material.qt_solucao%TYPE;
        qt_dose_mat_w             prescr_material.qt_dose%TYPE := qt_dose_p;
        ds_dose_diferenciada_w    prescr_material.ds_dose_diferenciada%TYPE := ds_dose_diferenciada_p;
        ds_aux_w                  prescr_material.ds_dose_diferenciada%TYPE := '';
        ds_aux_ww                 prescr_material.ds_dose_diferenciada%TYPE := '';
        nls_numeric_characters_w  VARCHAR2(255);
        ie_separador_padrao_w     CHAR(1) := '-';
        posicao                   INTEGER;
        i                         INTEGER;
    BEGIN
        BEGIN
            SELECT
                MAX(value)
            INTO STRICT nls_numeric_characters_w
            FROM
                v$nls_parameters
            WHERE
                parameter = 'NLS_NUMERIC_CHARACTERS';

        EXCEPTION
            WHEN OTHERS THEN
                nls_numeric_characters_w := NULL;
        END;

        BEGIN
            IF (
                ( ie_copia_diaria_p = 'S' )
                AND ( coalesce(ds_dose_diferenciada_p::text, '') = '' )
                AND (dt_fim_medic_w IS NOT NULL AND dt_fim_medic_w::text <> '')
            ) THEN
                ds_horarios_sol_w := cpoe_recalcula_horarios_copia(ds_horarios_sol_w, dt_inicio_w, dt_fim_medic_w, ie_acm_w, ie_se_necessario_w,
                                                                  cd_intervalo_w);
                nr_ocorrencia_w := obter_ocorrencias_horarios_rep(ds_horarios_sol_w);
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG CPOE_RECALCULA_HORARIOS_COPIA EXCEPTION: '
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || '-nr_sequencia_p: '
                                       || nr_sequencia_p
                                       || '-nr_prescricao_p: '
                                       || nr_prescricao_p
                                       || '-nr_atendimento_p: '
                                       || nr_atendimento_p
                                       || '-cd_estabelecimento_p: '
                                       || cd_estabelecimento_p
                                       || '-cd_perfil_p: '
                                       || cd_perfil_p
                                       || '-nm_usuario_p: '
                                       || nm_usuario_p
                                       || '-cd_material_p:'
                                       || cd_material_p
                                       || '-ds_horarios_sol_w: '
                                       || ds_horarios_sol_w
                                       || '-dt_inicio_w: '
                                       || to_char(dt_inicio_w, 'dd/mm/yyyy hh24:mi:ss')
                                       || '-dt_fim_medic_w: '
                                       || to_char(dt_fim_medic_w, 'dd/mm/yyyy hh24:mi:ss')
                                       || '-ie_acm_w: '
                                       || ie_acm_w
                                       || '-ie_se_necessario_w: '
                                       || ie_se_necessario_w
                                       || '-cd_intervalo_w: '
                                       || cd_intervalo_w,
                                      1,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);
        END;

        BEGIN
            IF ( ie_esquema_alternado_w = 'S' ) THEN
                qt_dose_mat_w := 0;
                qt_solucao_mat_w := 0;
                ds_aux_w := ds_dose_diferenciada_w;

        --- Inicio MD1 obter_dose_esq_alt_md
                BEGIN
                    sql_w := 'BEGIN OBTER_DOSE_ESQ_ALT_MD(:1, :2, :3, :4, :5, :6); END;';
                    EXECUTE sql_w
                        USING IN OUT ds_aux_w, IN ie_separador_padrao_w, IN nr_etapas_ww, IN nls_numeric_characters_w, OUT ds_aux_ww,
                        IN OUT qt_dose_mat_w;

                EXCEPTION
                    WHEN OTHERS THEN
                        ds_erro_w := sqlerrm;
                        ds_parametros_w := ( 'nr_atendimento_p: '
                                             || nr_atendimento_p
                                             || '-'
                                             || 'nr_prescricao_p: '
                                             || nr_prescricao_p
                                             || '-'
                                             || 'nr_sequencia_p: '
                                             || nr_sequencia_p
                                             || '-'
                                             || 'ds_aux_w: '
                                             || ds_aux_w
                                             || '-'
                                             || 'ie_separador_padrao_w: '
                                             || ie_separador_padrao_w
                                             || '-'
                                             || 'nr_etapas_ww: '
                                             || nr_etapas_ww
                                             || '-'
                                             || 'nls_numeric_characters_w: '
                                             || nls_numeric_characters_w
                                             || '-'
                                             || 'ds_aux_ww: '
                                             || ds_aux_ww
                                             || '-'
                                             || 'qt_dose_mat_w: '
                                             || qt_dose_mat_w );

                        CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                 'OBTER_DOSE_ESQ_ALT_MD',
                                                 ds_parametros_w,
                                                 substr(ds_erro_w, 4000),
                                                 nm_usuario_p,
                                                 'S');

                        ds_aux_w := NULL;
                        ds_aux_ww := NULL;
                        qt_dose_mat_w := NULL;
                END;

                sql_w := NULL;
        --- Fim MD1
            ELSE
                ds_dose_diferenciada_w := '';
            END IF;

            qt_solucao_mat_w := coalesce(obter_conversao_ml(cd_material_p, qt_dose_mat_w, cd_unidade_medida_dose_p), 0);
            SELECT
                coalesce(MAX(nr_sequencia), 0) + 1
            INTO STRICT nr_seq_material_w
            FROM
                prescr_material
            WHERE
                nr_prescricao = nr_prescricao_p;

            cd_unidade_medida_w := obter_dados_material_estab(cd_material_p, cd_estabelecimento_p, 'UMS');
            qt_conversao_dose_w := coalesce(obter_conversao_unid_med(cd_material_p, cd_unidade_medida_dose_p), 0);

      --- Inicio MD2
            BEGIN
                sql_w := 'BEGIN OBTER_QT_CONVERSAO_SOLUCAO_MD(:1, :2, :3, :4, :5, :6); END;';
                EXECUTE sql_w
                    USING IN OUT qt_conversao_dose_w, IN qt_dose_correcao_p, IN qt_dose_mat_w, IN cd_material_p, OUT qt_unitaria_w, OUT qt_material_w;

            EXCEPTION
                WHEN OTHERS THEN
                    ds_erro_w := sqlerrm;
                    ds_parametros_w := ( 'nr_atendimento_p: '
                                         || nr_atendimento_p
                                         || '-'
                                         || 'nr_prescricao_p: '
                                         || nr_prescricao_p
                                         || '-'
                                         || 'nr_sequencia_p: '
                                         || nr_sequencia_p
                                         || '-'
                                         || 'qt_conversao_dose_w: '
                                         || qt_conversao_dose_w
                                         || '-'
                                         || 'qt_dose_correcao_p: '
                                         || qt_dose_correcao_p
                                         || '-'
                                         || 'qt_dose_mat_w: '
                                         || qt_dose_mat_w
                                         || '-'
                                         || 'qt_unitaria_w: '
                                         || qt_unitaria_w
                                         || '-'
                                         || 'qt_material_w: '
                                         || qt_material_w );

                    CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                             'OBTER_QT_CONVERSAO_SOLUCAO_MD',
                                             ds_parametros_w,
                                             substr(ds_erro_w, 4000),
                                             nm_usuario_p,
                                             'S');

                    qt_conversao_dose_w := NULL;
                    qt_unitaria_w := NULL;
                    qt_material_w := NULL;
            END;

            sql_w := NULL;


      --- Fim MD2
            IF ( coalesce(nr_ocorrencia_w, 0) = 0 ) THEN
                IF ( ds_horarios_sol_w <> 'SN' )
                    AND ( ds_horarios_sol_w <> 'ACM' )
                THEN
                    nr_ocorrencia_w := obter_ocorrencias_horarios_rep(ds_horarios_sol_w);
                ELSE
                    nr_ocorrencia_w := 1;
                END IF;
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION 442:'
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || 'nr_sequencia_p:'
                                       || nr_sequencia_p
                                       || 'nr_ocorrencia_w: '
                                       || nr_ocorrencia_w
                                       || 'ds_horarios_sol_w: '
                                       || ds_horarios_sol_w
                                       || 'ie_esquema_alternado_w : '
                                       || ie_esquema_alternado_w
                                       || 'qt_solucao_mat_w:'
                                       || qt_solucao_mat_w
                                       || 'cd_unidade_medida_w:'
                                       || cd_unidade_medida_w
                                       || 'qt_conversao_dose_w:'
                                       || qt_conversao_dose_w
                                       || 'qt_unitaria_w:'
                                       || qt_unitaria_w
                                       || 'cd_material_p:'
                                       || cd_material_p
                                       || 'qt_dose_mat_w:'
                                       || qt_dose_mat_w,
                                      1,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);
        END;

        BEGIN
            CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG BEGIN OBTER_QUANT_DISPENSAR:'
                                   || substr(to_char(sqlerrm), 1, 2000)
                                   || 'nr_sequencia_p:'
                                   || nr_sequencia_p
                                   || 'nr_prescricao_p : '
                                   || nr_prescricao_p
                                   || 'cd_material_p:'
                                   || cd_material_p
                                   || 'cd_estabelecimento_p:'
                                   || cd_estabelecimento_p
                                   || 'nr_seq_material_w:'
                                   || nr_seq_material_w
                                   || 'cd_intervalo_w:'
                                   || cd_intervalo_w
                                   || 'ie_via_aplicacao_w:'
                                   || ie_via_aplicacao_w
                                   || 'qt_unitaria_w:'
                                   || qt_unitaria_w
                                   || 'nr_ocorrencia_w:'
                                   || nr_ocorrencia_w
                                   || 'ie_origem_inf_p:'
                                   || ie_origem_inf_p
                                   || 'cd_unidade_medida_w:'
                                   || cd_unidade_medida_w
                                   || 'qt_material_w:'
                                   || qt_material_w
                                   || 'qt_total_dispensar_w :'
                                   || qt_total_dispensar_w
                                   || 'ie_regra_disp_w:'
                                   || ie_regra_disp_w
                                   || 'ds_erro_w:'
                                   || ds_erro_w
                                   || 'ie_se_necessario_w:'
                                   || ie_se_necessario_w
                                   || 'ie_acm_w:'
                                   || ie_acm_w,
                                  1,
                                  2000),
                           nr_atendimento_p,
                           'M',
                           nr_sequencia_p);

            if (ie_principal_recons_w = 'S' and (qt_unitaria_medic_w IS NOT NULL AND qt_unitaria_medic_w::text <> '')) then
                qt_unitaria_aux_w := qt_unitaria_medic_w;
            else
                qt_unitaria_aux_w := qt_unitaria_w;
            end if;

            SELECT * FROM obter_quant_dispensar(cd_estabelecimento_p, cd_material_p, nr_prescricao_p, nr_seq_material_w, cd_intervalo_w, ie_via_aplicacao_w, qt_unitaria_aux_w, 0, nr_ocorrencia_w, ds_dose_diferenciada_p, ie_origem_inf_p, cd_unidade_medida_w, 0, qt_material_w, qt_total_dispensar_w, ie_regra_disp_w, ds_erro_w, ie_se_necessario_w, ie_acm_w) INTO STRICT qt_material_w, qt_total_dispensar_w, ie_regra_disp_w, ds_erro_w;

            if (ie_principal_medic_w = 'S') then
                qt_unitaria_medic_w := qt_unitaria_w;
            end if;

            IF (ie_regra_disp_ww IS NOT NULL AND ie_regra_disp_ww::text <> '') THEN
                ie_regra_disp_w := ie_regra_disp_ww;
            END IF;
            CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG END OBTER_QUANT_DISPENSAR:'
                                   || substr(to_char(sqlerrm), 1, 2000)
                                   || 'nr_sequencia_p:'
                                   || nr_sequencia_p
                                   || 'nr_prescricao_p : '
                                   || nr_prescricao_p
                                   || 'cd_material_p:'
                                   || cd_material_p
                                   || 'cd_estabelecimento_p:'
                                   || cd_estabelecimento_p
                                   || 'nr_seq_material_w:'
                                   || nr_seq_material_w
                                   || 'cd_intervalo_w:'
                                   || cd_intervalo_w
                                   || 'ie_via_aplicacao_w:'
                                   || ie_via_aplicacao_w
                                   || 'qt_unitaria_w:'
                                   || qt_unitaria_w
                                   || 'nr_ocorrencia_w:'
                                   || nr_ocorrencia_w
                                   || 'ie_origem_inf_p:'
                                   || ie_origem_inf_p
                                   || 'cd_unidade_medida_w:'
                                   || cd_unidade_medida_w
                                   || 'qt_material_w:'
                                   || qt_material_w
                                   || 'qt_total_dispensar_w :'
                                   || qt_total_dispensar_w
                                   || 'ie_regra_disp_w:'
                                   || ie_regra_disp_w
                                   || 'ds_erro_w:'
                                   || ds_erro_w
                                   || 'ie_se_necessario_w:'
                                   || ie_se_necessario_w
                                   || 'ie_acm_w:'
                                   || ie_acm_w,
                                  1,
                                  2000),
                           nr_atendimento_p,
                           'M',
                           nr_sequencia_p);

        EXCEPTION
            WHEN OTHERS THEN
                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION OBTER_QUANT_DISPENSAR:'
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || 'nr_sequencia_p:'
                                       || nr_sequencia_p
                                       || 'nr_prescricao_p : '
                                       || nr_prescricao_p
                                       || 'cd_material_p:'
                                       || cd_material_p
                                       || 'cd_estabelecimento_p:'
                                       || cd_estabelecimento_p
                                       || 'nr_seq_material_w:'
                                       || nr_seq_material_w
                                       || 'cd_intervalo_w:'
                                       || cd_intervalo_w
                                       || 'ie_via_aplicacao_w:'
                                       || ie_via_aplicacao_w
                                       || 'qt_unitaria_w:'
                                       || qt_unitaria_w
                                       || 'nr_ocorrencia_w:'
                                       || nr_ocorrencia_w
                                       || 'ie_origem_inf_p:'
                                       || ie_origem_inf_p
                                       || 'cd_unidade_medida_w:'
                                       || cd_unidade_medida_w
                                       || 'qt_material_w:'
                                       || qt_material_w
                                       || 'qt_total_dispensar_w :'
                                       || qt_total_dispensar_w
                                       || 'ie_regra_disp_w:'
                                       || ie_regra_disp_w
                                       || 'ds_erro_w:'
                                       || ds_erro_w
                                       || 'ie_se_necessario_w:'
                                       || ie_se_necessario_w
                                       || 'ie_acm_w:'
                                       || ie_acm_w,
                                      1,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);
        END;
    --- Inicio MD3
        BEGIN
            sql_w := 'CALL OBTER_QT_VOLUME_SOMA_MD(:1, :2) INTO :qt_volume_soma_w';
            EXECUTE sql_w
                USING IN qt_volume_soma_w, IN qt_solucao_mat_w, OUT qt_volume_soma_w;
        EXCEPTION
            WHEN OTHERS THEN
                ds_erro_w := sqlerrm;
                ds_parametros_w := ( 'nr_atendimento_p: '
                                     || nr_atendimento_p
                                     || '-'
                                     || 'nr_prescricao_p: '
                                     || nr_prescricao_p
                                     || '-'
                                     || 'nr_sequencia_p: '
                                     || nr_sequencia_p
                                     || '-'
                                     || 'qt_volume_soma_w: '
                                     || qt_volume_soma_w
                                     || '-'
                                     || 'qt_solucao_mat_w: '
                                     || qt_solucao_mat_w
                                     || '-'
                                     || 'qt_volume_soma_w: '
                                     || qt_volume_soma_w );

                CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                         'OBTER_QT_VOLUME_SOMA_MD',
                                         ds_parametros_w,
                                         substr(ds_erro_w, 4000),
                                         nm_usuario_p,
                                         'S');

                qt_volume_soma_w := NULL;
        END;

    --- Fim MD3
        SELECT
            coalesce(MAX(ie_dias_util_medic), 'O'),
            coalesce(MAX(ie_medic_paciente), 'N')
        INTO STRICT
            ie_dias_util_medic_w,
            ie_medicacao_paciente_w
        FROM
            material
        WHERE
            cd_material = cd_material_p;

        BEGIN
            SELECT * FROM consiste_util_solucao(nr_prescricao_p, nr_atendimento_p, dt_inicio_base_w, cd_material_p, qt_dias_util_w, qt_dias_liberado_w, ie_controle_medico_w, qt_dias_lib_atend_w) INTO STRICT qt_dias_util_w, qt_dias_liberado_w, ie_controle_medico_w, qt_dias_lib_atend_w;
        EXCEPTION
            WHEN OTHERS THEN
                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION CONSISTE_UTIL_SOLUCAO:'
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || '//nr_sequencia_p:'
                                       || nr_sequencia_p
                                       || 'nr_prescricao_p : '
                                       || nr_prescricao_p
                                       || 'dt_inicio_base_w:'
                                       || to_char(dt_inicio_base_w, 'dd/mm/yyyy hh24:mi:ss')
                                       || 'cd_material_p:'
                                       || cd_material_p
                                       || 'qt_dias_util_w:'
                                       || qt_dias_util_w
                                       || 'qt_dias_liberado_w:'
                                       || qt_dias_liberado_w
                                       || 'ie_controle_medico_w:'
                                       || ie_controle_medico_w
                                       || 'qt_dias_lib_atend_w:'
                                       || qt_dias_lib_atend_w,
                                      1,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);
        END;

        nr_dia_util_w := nr_dia_util_sol_w;
    --- Inicio MD4
        BEGIN
            sql_w := 'CALL OBTER_NR_DIA_UTIL_MD(:1, :2, :3) INTO :nr_dia_util_w';
            EXECUTE sql_w
                USING IN ie_controle_medico_w, IN qt_dias_util_w, IN ie_dias_util_medic_w, OUT nr_dia_util_w;
        EXCEPTION
            WHEN OTHERS THEN
                ds_erro_w := sqlerrm;
                ds_parametros_w := ( 'nr_atendimento_p: '
                                     || nr_atendimento_p
                                     || '-'
                                     || 'nr_prescricao_p: '
                                     || nr_prescricao_p
                                     || '-'
                                     || 'nr_sequencia_p: '
                                     || nr_sequencia_p
                                     || '-'
                                     || 'ie_controle_medico_w: '
                                     || ie_controle_medico_w
                                     || '-'
                                     || 'qt_dias_util_w: '
                                     || qt_dias_util_w
                                     || '-'
                                     || 'ie_dias_util_medic_w: '
                                     || ie_dias_util_medic_w
                                     || '-'
                                     || 'nr_dia_util_w: '
                                     || nr_dia_util_w );

                CALL gravar_log_medical_device('cpoe_insert_solucoes_reg', 'OBTER_NR_DIA_UTIL_MD',
                                         ds_parametros_w,
                                         substr(ds_erro_w, 4000),
                                         nm_usuario_p,
                                         'S');

                nr_dia_util_w := NULL;
        END;


    --- Fim MD4
        IF ( qt_dias_liberado_w = 0 ) THEN
            qt_dias_liberado_w := NULL;
        END IF;
        IF ( obter_enable_qt_total_dias(nr_dia_util_w, qt_dias_liberado_w, ie_dias_util_medic_w, nr_prescricao_p, cd_material_p) =
        'N' ) THEN
            qt_dias_solicitado_w := NULL;
        END IF;

        ds_justificativa_w := cpoe_obter_justificativa_item(nr_sequencia_p, cd_material_p, 'M');
        IF ( coalesce(nr_seq_material_w::text, '') = '' ) THEN
            SELECT
                coalesce(MAX(nr_sequencia), 0) + 1
            INTO STRICT nr_seq_material_w
            FROM
                prescr_material
            WHERE
                nr_prescricao = nr_prescricao_p;

            IF ( coalesce(nr_seq_material_w::text, '') = '' ) THEN
                nr_seq_material_w := 1;
            END IF;
        END IF;

        BEGIN
            ds_justificativa_prescr_w := '';
            OPEN c002;
            LOOP
                FETCH c002 INTO ds_just_interacao_medic_w;
                EXIT WHEN NOT FOUND; /* apply on c002 */
                BEGIN
                    IF (ds_just_interacao_medic_w IS NOT NULL AND ds_just_interacao_medic_w::text <> '') THEN
                        ds_justificativa_prescr_w := ds_justificativa_prescr_w
                                                     || ' '
                                                     || ds_just_interacao_medic_w;
                    END IF;
                END;

            END LOOP;

            CLOSE c002;
            IF (ds_justificativa_prescr_w IS NOT NULL AND ds_justificativa_prescr_w::text <> '') THEN
                UPDATE prescr_medica
                SET
                    ds_justificativa = substr(ds_justificativa || ds_justificativa_prescr_w, 1, 2000)
                WHERE
                    nr_prescricao = nr_prescricao_p;

            END IF;

            IF (nr_prescricao_orig_w IS NOT NULL AND nr_prescricao_orig_w::text <> '') THEN
                ds_observacao_enf_w := obter_obs_enf_farm(cd_material_p, nr_sequencia_p, 'enf');
                ds_observacao_far_w := obter_obs_enf_farm(cd_material_p, nr_sequencia_p, 'farm');
            END IF;

            INSERT INTO prescr_material(
                cd_material,
                cd_unidade_medida_dose,
                dt_atualizacao,
                ie_origem_inf,
                nm_usuario,
                nr_seq_mat_cpoe,
                nr_prescricao,
                nr_sequencia,
                qt_material,
                qt_unitaria, --10
                ie_agrupador,
                nr_sequencia_solucao,
                qt_dose,
                ds_dose_diferenciada,
                cd_unidade_medida,
                cd_intervalo,
                ie_via_aplicacao,
                nr_agrupamento,
                ie_utiliza_kit,
                qt_conversao_dose,
                ie_urgencia, -- 20
                nr_ocorrencia,
                qt_total_dispensar,
                qt_solucao,
                hr_prim_horario,
                ie_se_necessario,
                ie_status_cirurgia,
                ie_bomba_infusao,
                ie_aplic_bolus,
                ie_aplic_lenta,
                ie_acm, --30
                ie_erro,
                qt_baixa_especial,
                nr_dia_util,
                ie_cultura_cih,
                ie_antibiograma,
                ie_uso_antimicrobiano,
                ie_recons_diluente_fixo,
                ie_sem_aprazamento,
                ie_novo_ciclo_ccih,
                ie_supera_limite_uso, -- 40
                ie_cobra_paciente,
                ie_dose_espec_agora,
                ie_tipo_medic_hd,
                ie_intervalo_dif,
                ie_regra_disp,
                ie_checar_adep,
                cd_perfil_ativo,
                ie_permite_substituir,
                qt_baixa_nconta,
                ie_pre_medicacao, --50
                ie_permite_alterar,
                ie_ciente,
                ie_modificado,
                ie_aplicar,
                ie_alterar_horario,
                ie_gerar_lote,
                ie_horario_susp,
                ie_medicacao_paciente,
                ds_horarios,
                nr_sequencia_diluicao,
                ds_justificativa,
                ds_observacao,
                cd_protocolo,
                nr_seq_protocolo,
                nr_seq_mat_protocolo,
                cd_microorganismo_cih,
                cd_topografia_cih,
                cd_amostra_cih,
                ie_origem_infeccao,
                ie_indicacao,
                ie_objetivo,
                qt_dias_liberado,
                qt_dias_solicitado,
                qt_volume_corrigido,
                ds_observacao_far,
                ds_observacao_enf,
                nr_seq_avaliacao,
                cd_motivo_baixa
            ) VALUES (
                cd_material_p,
                cd_unidade_medida_dose_p,
                dt_atualizacao_w,
                ie_origem_inf_p,
                nm_usuario_p,
                nr_sequencia_p,
                nr_prescricao_p,
                nr_seq_material_w,
                coalesce(qt_material_w, 1),
                qt_unitaria_w, -- 10
                4,
                nr_seq_solucao_w,
                qt_dose_mat_w,
                ds_dose_diferenciada_w,
                cd_unidade_medida_w,
                cd_intervalo_w,
                ie_via_aplicacao_w,
                nr_agrupamento_w,
                'N',
                qt_conversao_dose_w,
                CASE WHEN coalesce(ie_urgencia_w::text, '') = '' THEN  'N'  ELSE 'S' END , -- 20
                nr_ocorrencia_w,
                qt_total_dispensar_w,
                qt_solucao_mat_w,
                hr_prim_horario_w,
                ie_se_necessario_w,
                'GI',
                'N',
                'N',
                'N',
                ie_acm_w, --30
                0,
                0,
                nr_dia_util_w,
                'N',
                'N',
                'N',
                'N',
                'N',
                'N',
                'N', --40
                'S',
                'N',
                'D',
                'N',
                CASE WHEN coalesce(ie_regra_disp_w, 'X')='D' THEN  ie_regra_disp_w  ELSE ie_regra_disp_w END ,
                'N',
                cd_perfil_p,
                'S',
                0,
                'N', --50
                'S',
                'N',
                'N',
                'S',
                'S',
                coalesce(ie_gerar_lote_p, 'S'),
                'N',
                coalesce(ie_medicacao_paciente_p, ie_medicacao_paciente_w),
                ds_horarios_sol_w,
                CASE WHEN ie_diluente_p='S' THEN  nr_seq_componente_princ_w END ,
                ds_justificativa_w,
                substr(ds_observacao_w, 1, 2000)
                || ' '
                || substr(ds_observacao_p, 1, 2000),
                cd_protocolo_w,
                nr_seq_protocolo_w,
                nr_seq_mat_protocolo_w,
                cd_microorganismo_cih_w,
                cd_topografia_cih_w,
                cd_amostra_cih_w,
                ie_origem_infeccao_w,
                ie_indicacao_w,
                ie_objetivo_w,
                qt_dias_liberado_w,
                qt_dias_solicitado_w,
                qt_dose_correcao_p,
                ds_observacao_far_w,
                ds_observacao_enf_w,
                nr_seq_avaliacao_w,
                cd_motivo_baixa_p
            );

            COMMIT;
            IF ( ie_diluente_p = 'N' )
                AND ( coalesce(nr_seq_componente_princ_w::text, '') = '' )
            THEN
                nr_seq_componente_princ_w := nr_seq_material_w;
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION INSERT PRESCR_MATERIAL:'
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || '//nr_prescricao_p : '
                                       || nr_prescricao_p
                                       || 'nr_sequencia_p:'
                                       || nr_sequencia_p
                                       || 'cd_material_p:'
                                       || cd_material_p
                                       || 'cd_unidade_medida_dose_p:'
                                       || cd_unidade_medida_dose_p
                                       || 'dt_atualizacao_w:'
                                       || to_char(dt_atualizacao_w, 'dd/mm/yyyy hh24:mi:ss')
                                       || 'ie_origem_inf_p:'
                                       || ie_origem_inf_p
                                       || 'nm_usuario_p:'
                                       || nm_usuario_p
                                       || 'nr_seq_material_w:'
                                       || nr_seq_material_w
                                       || 'qt_material_w:'
                                       || qt_material_w
                                       || 'qt_unitaria_w:'
                                       || qt_unitaria_w
                                       || 'nr_seq_solucao_w:'
                                       || nr_seq_solucao_w
                                       || 'qt_dose_mat_w:'
                                       || qt_dose_mat_w
                                       || 'ds_dose_diferenciada_w:'
                                       || ds_dose_diferenciada_w
                                       || 'cd_unidade_medida_w:'
                                       || cd_unidade_medida_w
                                       || 'cd_intervalo_w:'
                                       || cd_intervalo_w
                                       || 'ie_via_aplicacao_w:'
                                       || ie_via_aplicacao_w
                                       || 'ie_urgencia_w:'
                                       || ie_urgencia_w
                                       || 'nr_ocorrencia_w:'
                                       || nr_ocorrencia_w
                                       || 'qt_total_dispensar_w:'
                                       || qt_total_dispensar_w
                                       || 'qt_solucao_mat_w:'
                                       || qt_solucao_mat_w
                                       || 'hr_prim_horario_w:'
                                       || hr_prim_horario_w
                                       || 'ie_se_necessario_w:'
                                       || ie_se_necessario_w
                                       || 'ie_acm_w:'
                                       || ie_acm_w
                                       || 'nr_dia_util_w:'
                                       || nr_dia_util_w
                                       || 'cd_perfil_p:'
                                       || cd_perfil_p
                                       || 'ie_medicacao_paciente_w:'
                                       || ie_medicacao_paciente_w
                                       || 'ds_horarios_sol_w:'
                                       || ds_horarios_sol_w
                                       || 'nr_seq_componente_princ_w:'
                                       || nr_seq_componente_princ_w
                                       || 'ds_justificativa_w:'
                                       || ds_justificativa_w
                                       || 'ds_observacao_w:'
                                       || ds_observacao_w
                                       || 'cd_microorganismo_cih:'
                                       || cd_microorganismo_cih_w
                                       || 'cd_topografia_cih_w:'
                                       || cd_topografia_cih_w
                                       || 'cd_amostra_cih_w:'
                                       || cd_amostra_cih_w
                                       || 'ie_origem_infeccao_w:'
                                       || ie_origem_infeccao_w
                                       || 'ie_indicacao_w:'
                                       || ie_indicacao_w
                                       || 'ie_objetivo_w:'
                                       || ie_objetivo_w
                                       || 'qt_dias_liberado_w:'
                                       || qt_dias_liberado_w
                                       || 'qt_dias_solicitado_w:'
                                       || qt_dias_solicitado_w,
                                      1,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);
        END;

        BEGIN
            qt_horas_estabilidade_w := obter_estabilidade_mat_prescr(nr_prescricao_p, nr_seq_material_w);
        EXCEPTION
            WHEN OTHERS THEN
                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION OBTER_ESTABILIDADE_MAT_PRESCR:'
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || 'nr_sequencia_p:'
                                       || nr_sequencia_p
                                       || 'nr_prescricao_p : '
                                       || nr_prescricao_p
                                       || 'nr_seq_material_w:'
                                       || nr_seq_material_w
                                       || 'qt_horas_estabilidade_w:'
                                       || qt_horas_estabilidade_w,
                                      1,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);
        END;

        SELECT
            coalesce(MAX(ie_padronizado), 'S')
        INTO STRICT ie_padronizado_w
        FROM
            material_estab
        WHERE
                cd_material = cd_material_p
            AND cd_estabelecimento = cd_estabelecimento_p;

        IF ( ie_padronizado_w = 'S' )
            AND ( ie_agrupador_p IN ( 1, 4, 8, 12 ) )
            AND ( ie_origem_inf_p <> 'K' )
        THEN
            SELECT
                coalesce(MAX(ie_medic_paciente), 'N')
            INTO STRICT ie_medic_paciente_w
            FROM
                material
            WHERE
                cd_material = cd_material_p;

            IF ( ie_medic_paciente_w = 'N' )
                AND (ds_justificativa_w IS NOT NULL AND ds_justificativa_w::text <> '')
                AND ( coalesce(qt_dias_solicitado_w, 0) > 0 )
            THEN
                BEGIN
                    SELECT
                        coalesce(MAX('N'), 'S')
                    INTO STRICT ie_primeira_prescr_w
                    FROM
                        prescr_material
                    WHERE
                            nr_seq_mat_cpoe = nr_sequencia_p
                        AND cd_material = cd_material_p;

                    IF ( ie_copia_diaria_p = 'N' OR (
                        ie_copia_diaria_p = 'S'
                        AND ie_primeira_prescr_w = 'S'
                    ) ) THEN
                        CALL gerar_liberacao_med_naopadrao(nr_dia_util_w, cd_pessoa_fisica_w, cd_material_p, dt_inicio_prescr_p,
                                                     qt_solucao_mat_w,
                                                     nm_usuario_p,
                                                     ds_justificativa_w,
                                                     nr_prescricao_p,
                                                     nr_seq_material_w,
                                                     NULL,
                                                     cd_intervalo_w);

                    END IF;

                EXCEPTION
                    WHEN OTHERS THEN
                        CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_LIBERACAO_MED_NAOPADRAO:'
                                               || substr(to_char(sqlerrm), 1, 2000)
                                               || '//nr_dia_util_w : '
                                               || nr_dia_util_w
                                               || ' nr_seq_material_w:'
                                               || nr_seq_material_w
                                               || ' cd_pessoa_fisica_w:'
                                               || cd_pessoa_fisica_w
                                               || ' cd_material_p:'
                                               || cd_material_p
                                               || ' dt_inicio_prescr_p:'
                                               || to_char(dt_inicio_prescr_p, 'dd/mm/yyyy hh24:mi:ss')
                                               || ' qt_dose_p:'
                                               || qt_dose_p
                                               || ' nr_sequencia_orig_p:'
                                               || nm_usuario_p
                                               || ' ds_justificativa_w:'
                                               || ds_justificativa_w
                                               || ' nr_prescricao_p:'
                                               || nr_prescricao_p
                                               || 'cd_intervalo_w:'
                                               || cd_intervalo_w,
                                              1,
                                              2000),
                                       nr_atendimento_p,
                                       'M',
                                       nr_sequencia_p);
                END;

            END IF;

        END IF;

    END;

    FUNCTION obter_observacao_interacao(
        nr_seq_mat_p    IN  NUMBER,
        ie_tipo_item_p  IN  VARCHAR2
    ) RETURN;
    BEGIN
        SELECT
            MAX(ds_orientacao)
        INTO STRICT ds_retorno_w
        FROM
            material_interacao_medic
        WHERE
            nr_sequencia = (
                SELECT
                    MAX(nr_seq_interacao_medic)
                FROM
                    cpoe_justificativa_item
                WHERE
                        nr_seq_material = nr_seq_mat_p
                    AND ie_tipo_item = ie_tipo_item_p
                    AND (nr_seq_interacao_medic IS NOT NULL AND nr_seq_interacao_medic::text <> '')
            )
        AND coalesce(ie_situacao, 'A') = 'A';

        RETURN;
    END;

    FUNCTION obter_etapas_formatadas(
        ds_horarios_p          IN  VARCHAR2,
        ds_duracao_etapas_p    IN  VARCHAR2,
        dt_inicio_base_p       IN  DATE,
        dt_fim_programado_p    IN  DATE ,
        hr_primeiro_horario_p  IN  VARCHAR2
    ) RETURN;
        TYPE horarios IS
            TABLE OF v_dt_horarios INDEX BY BINARY_INTEGER;
        t_horarios             horarios;
        i                      INTEGER := 1;
        ds_mascara_w           VARCHAR2(4000) := 'hh24:mi';
        ds_mascara_completa_w  VARCHAR2(4000) := 'dd/mm/yyyy hh24:mi:ss';
        dt_inicio_base_w       DATE;
        dt_data_aux_w          DATE;
        dt_fim_aux_w           DATE;
        dt_hora_ini_w          DATE;
        dt_fim_programado_w    DATE;
        ds_horarios_w          VARCHAR2(4000);
        ds_horarios_new_w      VARCHAR2(4000);
        ds_hora_aux_w          VARCHAR2(255);
        ds_duracao_etapas_w    VARCHAR2(4000);
        index_corte_w          NUMBER(5);
        ds_etapa_w             VARCHAR2(30);
        ds_horas_w             VARCHAR2(100);
    BEGIN
        ds_etapa_w := wheb_mensagem_pck.get_texto(307054);-- das #@NR_PRIM_HOR#@ as
        dt_fim_programado_w := coalesce(dt_fim_programado_p, TO_DATE('01/01/2100', 'dd/mm/yyyy hh24:mi:ss'));
        ds_horarios_new_w := '';
        BEGIN
            IF (ds_horarios_p IS NOT NULL AND ds_horarios_p::text <> '' AND ds_duracao_etapas_p IS NOT NULL AND ds_duracao_etapas_p::text <> '') THEN
                IF ( ( obter_minutos_hora(hr_primeiro_horario_p) > 0 ) OR ( trim(both hr_primeiro_horario_p) = '00:00' ) ) THEN
                    dt_inicio_base_w := to_date(to_char(dt_inicio_base_p, 'dd/mm/yyyy ')
                                                || hr_primeiro_horario_p, ds_mascara_completa_w);
                END IF;

                BEGIN
                    ds_horarios_w := replace(padroniza_horario_prescr(ds_horarios_p, NULL), 'A', '')
                                     || ' ';

                    ds_duracao_etapas_w := replace(padroniza_horario_prescr(ds_duracao_etapas_p, NULL), 'A', '')
                                           || ' ';

                EXCEPTION
                    WHEN OTHERS THEN
                        CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION PADRONIZA_HORARIO_PRESCR:'
                                               || substr(to_char(sqlerrm), 1, 2000)
                                               || 'nr_sequencia_p:'
                                               || nr_sequencia_p
                                               || 'ds_horarios_p:'
                                               || ds_horarios_p
                                               || 'ds_duracao_etapas_p:'
                                               || ds_duracao_etapas_p
                                               || 'ds_horarios_p:'
                                               || ds_horarios_p,
                                              1,
                                              2000),
                                       nr_atendimento_p,
                                       'M',
                                       nr_sequencia_p);
                END;

                index_corte_w := position(' ' in ds_duracao_etapas_w);
                WHILE(length(ds_duracao_etapas_w) < length(ds_horarios_w)) LOOP
                    ds_duracao_etapas_w := ds_duracao_etapas_w
                                           || substr(ds_duracao_etapas_w, 1, index_corte_w);
                END LOOP;

                index_corte_w := position(' ' in ds_horarios_w);
                ds_horas_w := substr(ds_horarios_w, 1, index_corte_w - 1);
        --- Inicio MD5
        -- se baseia no horario da primeira etapa para obter suas distancias reais, ex:  ds_horarios original: 14:00, 20:00 , distancia real entre as etapas?  = 00:00, 06:00 sendo assim, uma distancia de 6 horas entre as duas etapas logo esta pronta para ser somada a dt inicio.
                obter_minutos_hora_w := obter_minutos_hora(ds_horas_w);
                BEGIN
                    sql_w := 'CALL OBTER_DT_INICIO_BASE_MD(:1, :2) INTO :dt_inicio_base_w';
                    EXECUTE sql_w
                        USING IN obter_minutos_hora_w, IN dt_inicio_base_w, OUT dt_inicio_base_w;
                EXCEPTION
                    WHEN OTHERS THEN
                        ds_erro_w := sqlerrm;
                        ds_parametros_w := ( 'nr_atendimento_p: '
                                             || nr_atendimento_p
                                             || '-'
                                             || 'nr_prescricao_p: '
                                             || nr_prescricao_p
                                             || '-'
                                             || 'nr_sequencia_p: '
                                             || nr_sequencia_p
                                             || '-'
                                             || 'obter_minutos_hora_w: '
                                             || obter_minutos_hora_w
                                             || '-'
                                             || 'dt_inicio_base_w: '
                                             || dt_inicio_base_w
                                             || '-'
                                             || 'dt_inicio_base_w: '
                                             || dt_inicio_base_w );

                        CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                 'OBTER_DT_INICIO_BASE_MD',
                                                 ds_parametros_w,
                                                 substr(ds_erro_w, 4000),
                                                 nm_usuario_p,
                                                 'S');

                        dt_inicio_base_w := NULL;
                END;


        --- Fim MD5
                WHILE(position(':' in ds_horarios_w) > 0) LOOP
                    ds_hora_aux_w := substr(ds_horarios_w, 1, index_corte_w - 1);
          --- Inicio MD6
                    obter_minutos_hora_aux_w := obter_minutos_hora(ds_hora_aux_w);
                    obter_minutos_ds_hora_w := obter_minutos_hora(ds_horas_w);
                    obter_minutos_hora_etapas_w := obter_minutos_hora(substr(ds_duracao_etapas_w, 1, index_corte_w - 1));
                    BEGIN
                        sql_w := 'BEGIN OBTER_HORARIOS_SOLUCOES_MD(:1, :2, :3, :4, :5, :6); END;';
                        EXECUTE sql_w
                            USING IN obter_minutos_hora_aux_w, IN obter_minutos_ds_hora_w, IN obter_minutos_hora_etapas_w, IN OUT
                            dt_inicio_base_w, OUT t_horarios_dt_horario_w, OUT t_horarios_dt_horario_fim_w;

                    EXCEPTION
                        WHEN OTHERS THEN
                            ds_erro_w := sqlerrm;
                            ds_parametros_w := ( 'nr_atendimento_p: '
                                                 || nr_atendimento_p
                                                 || '-'
                                                 || 'nr_prescricao_p: '
                                                 || nr_prescricao_p
                                                 || '-'
                                                 || 'nr_sequencia_p: '
                                                 || nr_sequencia_p
                                                 || '-'
                                                 || 'obter_minutos_hora_aux_w: '
                                                 || obter_minutos_hora_aux_w
                                                 || '-'
                                                 || 'obter_minutos_ds_hora_w: '
                                                 || obter_minutos_ds_hora_w
                                                 || '-'
                                                 || 'obter_minutos_hora_etapas_w: '
                                                 || obter_minutos_hora_etapas_w
                                                 || '-'
                                                 || 'dt_inicio_base_w: '
                                                 || dt_inicio_base_w
                                                 || '-'
                                                 || 't_horarios_dt_horario_w: '
                                                 || t_horarios_dt_horario_w
                                                 || '-'
                                                 || 't_horarios_dt_horario_fim_w: '
                                                 || t_horarios_dt_horario_fim_w );

                            CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                     'OBTER_HORARIOS_SOLUCOES_MD',
                                                     ds_parametros_w,
                                                     substr(ds_erro_w, 4000),
                                                     nm_usuario_p,
                                                     'S');

                            dt_inicio_base_w := NULL;
                            t_horarios_dt_horario_w := NULL;
                            t_horarios_dt_horario_fim_w := NULL;
                    END;

                    sql_w := NULL;
                    t_horarios[i].dt_horario := t_horarios_dt_horario_w;
                    t_horarios[i].dt_horario_fim := t_horarios_dt_horario_fim_w;


          --- Fim MD6
                    ds_horas_w := ds_hora_aux_w;
                    ds_horarios_w := substr(ds_horarios_w, index_corte_w + 1);
                    ds_duracao_etapas_w := substr(ds_duracao_etapas_w, index_corte_w + 1);

          --se for maior que data final programada, entao assume ela para data final da etapa e finaliza loop
                    IF (t_horarios[i].dt_horario < dt_fim_programado_w) THEN
                        ds_horarios_new_w := ds_horarios_new_w
                                             || replace(ds_etapa_w, '#@NR_PRIM_HOR#@', to_char(t_horarios[i].dt_horario, ds_mascara_w))
                                             || ' ';

                        IF ( t_horarios[i].dt_horario_fim < dt_fim_programado_w ) THEN
                            ds_horarios_new_w := ds_horarios_new_w
                                                 || to_char(t_horarios[i].dt_horario_fim, ds_mascara_w)
                                                 || '; ';

                        ELSE
                            ds_horarios_new_w := ds_horarios_new_w
                                                 || to_char(dt_fim_programado_w, ds_mascara_w)
                                                 || '; ';
                            ds_horarios_w := '';
                        END IF;

                    ELSE
                        ds_horarios_w := '';
                    END IF;

                    i := i + 1;
                END LOOP;

            END IF;

            RETURN;
        EXCEPTION
            WHEN OTHERS THEN
                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION DS_HORARIOS_W:'
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || 'nr_sequencia_p:'
                                       || nr_sequencia_p
                                       || 'ds_duracao_etapas_w:'
                                       || ds_duracao_etapas_w
                                       || 'ds_horarios_w : '
                                       || ds_horarios_w
                                       || 'ds_duracao_etapas_w :'
                                       || ds_duracao_etapas_w,
                                      1,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);
        END;

    END;

    PROCEDURE cpoe_gerar_esquema_alternado(
        nr_prescricao_p     IN  NUMBER,
        nr_seq_solucao_p    IN  NUMBER,
        qt_hora_fase_dif_p  IN  VARCHAR2,
        qt_dosagem_dif_p    IN  VARCHAR2
    ) IS

        TYPE v_base_qt_hora_fase_dif IS RECORD(
            qt_hora NUMBER(18, 6)
        );
        TYPE v_qt_hora_fase_dif IS
            TABLE OF v_base_qt_hora_fase_dif INDEX BY BINARY_INTEGER;
        TYPE v_base_ds_horarios_dif IS RECORD(
            ds_hora prescr_solucao_esquema.ds_horario%TYPE
        );
        TYPE v_ds_horarios_dif IS
            TABLE OF v_base_ds_horarios_dif INDEX BY BINARY_INTEGER;
        TYPE v_base_ds_duracao_dif IS RECORD(
            ds_vel_inf NUMBER(15, 3)
        );
        TYPE v_ds_duracao_dif IS
            TABLE OF v_base_ds_duracao_dif INDEX BY BINARY_INTEGER;
        TYPE v_base_ds_dose_dif IS RECORD(
            qt_dose NUMBER(18, 6)
        );
        TYPE v_ds_dose_diferenciada IS
            TABLE OF v_base_ds_dose_dif INDEX BY BINARY_INTEGER;
        TYPE v_base_solucao IS RECORD(
            qt_hora_fase_dif     v_qt_hora_fase_dif,
            ds_horarios_dif      v_ds_horarios_dif,
            ds_duracao_dif       v_ds_duracao_dif,
            qt_volume_etapa_dif  v_ds_dose_diferenciada,
            qt_volume_total      NUMBER(18, 6)
        );
        TYPE solucao IS
            TABLE OF v_base_solucao INDEX BY BINARY_INTEGER;
        inf_solucao                    solucao;
        i                              INTEGER := 0;
        posicao                        INTEGER := 0;
        nm_usuario_w                   usuario.nm_usuario%TYPE;
        nr_etapas_w                    prescr_solucao.nr_etapas%TYPE;
        vl_etapa_w                     prescr_solucao_esquema.qt_volume%TYPE;
        qt_tempo_aplicacao_w           prescr_solucao.qt_tempo_aplicacao%TYPE;
        ie_tipo_dosagem_w              prescr_solucao.ie_tipo_dosagem%TYPE;
        qt_solucao_total_w             prescr_solucao.qt_solucao_total%TYPE;
        qt_dosagem_w                   prescr_solucao.qt_dosagem%TYPE;
        ds_dose_dif_w                  prescr_material.ds_dose_diferenciada%TYPE;
        cd_mat_w                       prescr_material.cd_material%TYPE;
        cd_unid_med_dose_w             unidade_medida.cd_unidade_medida%TYPE;
        ds_valor_w                     VARCHAR2(10) := '';
        ds_valor_horario_w             VARCHAR2(30) := '';
        vl_retorno_w                   NUMBER(18, 6);
        ds_horarios_w                  VARCHAR2(4000);
        nr_etapa_w                     NUMBER(18, 6);
        ie_separador_padrao_w          CHAR(1) := '-';
        ie_separador_horario_w         CHAR(1) := ';';
        ds_duracao_w                   cpoe_material.qt_hora_fase%TYPE;
        qt_hora_fase_diferenciada_w    cpoe_material.qt_hora_fase_diferenciada%TYPE := replace(coalesce(qt_hora_fase_dif_p, qt_hora_fase_w)
                                                                                            || ie_separador_padrao_w, ie_separador_padrao_w ||
                                                                                            ie_separador_padrao_w,
                                                                                           ie_separador_padrao_w);
        qt_vel_infusao_diferenciada_w  cpoe_material.qt_dosagem_diferenciada%TYPE := replace(coalesce(qt_dosagem_dif_p, qt_dosagem_w)
                                                                                            || ie_separador_padrao_w, ie_separador_padrao_w ||
                                                                                            ie_separador_padrao_w,
                                                                                           ie_separador_padrao_w);
        nls_numeric_characters_w       VARCHAR2(255);
        c02 CURSOR FOR
        SELECT
            cd_material,
            ds_dose_diferenciada,
            cd_unidade_medida_dose
        FROM
            prescr_material
        WHERE
                nr_sequencia_solucao = nr_seq_solucao_p
            AND nr_prescricao = nr_prescricao_p
        ORDER BY
            nr_sequencia LIMIT 5;

    BEGIN
        BEGIN
            SELECT
                MAX(value)
            INTO STRICT nls_numeric_characters_w
            FROM
                v$nls_parameters
            WHERE
                parameter = 'NLS_NUMERIC_CHARACTERS';

        EXCEPTION
            WHEN OTHERS THEN
                nls_numeric_characters_w := NULL;
        END;

        IF ( nls_numeric_characters_w = '.,' ) THEN
            qt_vel_infusao_diferenciada_w := replace(qt_vel_infusao_diferenciada_w, ',', '');
        END IF;

        IF (ds_horarios_sol_w IS NOT NULL AND ds_horarios_sol_w::text <> '') THEN
            BEGIN
          -- Deletar registros anteriores do esquema alternado
                DELETE FROM prescr_solucao_esquema
                WHERE
                        nr_seq_solucao = nr_seq_solucao_p
                    AND nr_prescricao = nr_prescricao_p;

                SELECT
                    MAX(nm_usuario),
                    coalesce(MAX(qt_tempo_aplicacao), 24),
                    MAX(upper(ie_tipo_dosagem)),
                    MAX(qt_solucao_total),
                    MAX(qt_dosagem),
                    MAX(ds_horarios),
                    coalesce(MAX(nr_etapas), 1)
                INTO STRICT
                    nm_usuario_w,
                    qt_tempo_aplicacao_w,
                    ie_tipo_dosagem_w,
                    qt_solucao_total_w,
                    qt_dosagem_w,
                    ds_horarios_w,
                    nr_etapas_w
                FROM
                    prescr_solucao
                WHERE
                        nr_seq_solucao = nr_seq_solucao_p
                    AND nr_prescricao = nr_prescricao_p;

            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION SELECT PRESCR_SOLUCAO:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || 'nr_sequencia_p:'
                                           || nr_sequencia_p
                                           || 'nr_seq_solucao_p:'
                                           || nr_seq_solucao_p
                                           || 'nr_prescricao_p: '
                                           || nr_prescricao_p,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
          -- Substituicao de espacamento dos horarios
                ds_horarios_w := replace(replace(replace(replace(ds_horarios_w, '  ', ' '), '  ', ' '), '  ', ' '), '  ', ' ');

                IF (ds_horarios_w IS NOT NULL AND ds_horarios_w::text <> '') THEN
                    IF ( position(';' in ds_horarios_w) = 0 ) THEN
                        ds_horarios_w := replace(ds_horarios_w, ' ', ie_separador_horario_w);
                    END IF;

                    IF ( substr(ds_horarios_w, length(ds_horarios_w) - 1) <> ie_separador_horario_w ) THEN
                        ds_horarios_w := ds_horarios_w || ie_separador_horario_w;
                    END IF;

            -- 1 substituicao de duplicacao dos separadores
                    ds_horarios_w := replace(ds_horarios_w, ie_separador_horario_w || ie_separador_horario_w, ie_separador_horario_w);
            -- 2 substituicao de duplicacao dos separadores
                    ds_horarios_w := replace(ds_horarios_w, ie_separador_horario_w || ie_separador_horario_w, ie_separador_horario_w);
                END IF;

                FOR i IN 1..nr_etapas_w LOOP
                    BEGIN

            -- Velocidade de infusao
                        posicao := position(ie_separador_padrao_w in qt_vel_infusao_diferenciada_w);
                        inf_solucao[1].ds_duracao_dif(i).ds_vel_inf := (coalesce(substr(qt_vel_infusao_diferenciada_w, 1, posicao -
                        1), 0))::numeric;

                        qt_vel_infusao_diferenciada_w := substr(qt_vel_infusao_diferenciada_w, posicao + 1);

            -- Duracao da etapa
                        posicao := position(ie_separador_padrao_w in qt_hora_fase_diferenciada_w);
                        ds_duracao_w := substr(qt_hora_fase_diferenciada_w, 1, posicao - 1);
                        obter_minutos_w := obter_minutos_hora(lpad(substr(ds_duracao_w, 1, 2), 2, '0')
                                                              || ':'
                                                              || rpad(substr(ds_duracao_w, 4), 2, '0'));

                        IF ( coalesce(trim(both ds_duracao_w), '__:__') = '__:__' ) THEN
                            inf_solucao[1].qt_hora_fase_dif(i).qt_hora := 0;
                        ELSE
                            BEGIN
                                sql_w := 'CALL OBTER_QT_HORA_INF_SOLUCAO_MD(:1) INTO :qt_hora_inf_w';
                                EXECUTE sql_w
                                    USING IN obter_minutos_w, OUT qt_hora_inf_w;
                            EXCEPTION
                                WHEN OTHERS THEN
                                    ds_erro_w := sqlerrm;
                                    ds_parametros_w := ( 'nr_atendimento_p: '
                                                         || nr_atendimento_p
                                                         || '-'
                                                         || 'nr_prescricao_p: '
                                                         || nr_prescricao_p
                                                         || '-'
                                                         || 'nr_sequencia_p: '
                                                         || nr_sequencia_p
                                                         || '-'
                                                         || 'obter_minutos_w: '
                                                         || obter_minutos_w
                                                         || '-'
                                                         || 'qt_hora_inf_w: '
                                                         || qt_hora_inf_w );

                                    CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                             'OBTER_QT_HORA_INF_SOLUCAO_MD',
                                                             ds_parametros_w,
                                                             substr(ds_erro_w, 4000),
                                                             nm_usuario_p,
                                                             'S');

                                    qt_hora_inf_w := NULL;
                            END;

                            inf_solucao[1].qt_hora_fase_dif(i).qt_hora := qt_hora_inf_w; --- Inicio MD7
                        END IF;

                        qt_hora_fase_diferenciada_w := substr(qt_hora_fase_diferenciada_w, posicao + 1);

            -- Horario
                        posicao := position(ie_separador_horario_w in ds_horarios_w);
                        inf_solucao[1].ds_horarios_dif(i).ds_hora := substr(trim(both substr(ds_horarios_w, 1, posicao - 1)), 1, 60);

                        ds_horarios_w := substr(ds_horarios_w, posicao + 1);

            -- Dose
                        inf_solucao[1].qt_volume_etapa_dif(i).qt_dose := 0;
                    END;
                END LOOP;

                inf_solucao[1].qt_volume_total := 0;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION DS_HORARIOS_W ESPACAMENTO:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || 'nr_sequencia_p'
                                           || nr_sequencia_p
                                           || 'ds_horarios_w:'
                                           || ds_horarios_w
                                           || 'nr_etapas_w: '
                                           || nr_etapas_w,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
          -- Somar as doses de cada etapa e totalizar
                OPEN c02;
                LOOP
                    FETCH c02 INTO
                        cd_mat_w,
                        ds_dose_dif_w,
                        cd_unid_med_dose_w;
                    EXIT WHEN NOT FOUND; /* apply on c02 */
                    BEGIN
                        IF (ds_dose_dif_w IS NOT NULL AND ds_dose_dif_w::text <> '') THEN
                            IF ( substr(ds_dose_dif_w, length(ds_dose_dif_w)) <> ie_separador_padrao_w ) THEN
                                ds_dose_dif_w := ds_dose_dif_w || ie_separador_padrao_w;
                            END IF;

                            FOR i IN 1..nr_etapas_w LOOP
                                BEGIN
                                    posicao := position(ie_separador_padrao_w in ds_dose_dif_w);
                                    ds_valor_w := (substr(ds_dose_dif_w, 1, posicao - 1))::numeric;
                                    ds_valor_w := coalesce(obter_conversao_ml(cd_mat_w, ds_valor_w, cd_unid_med_dose_w), 0);
                --- Inicio MD8
                                    BEGIN
                                        sql_w := 'BEGIN OBTER_VOLUME_INF_SOLUCAO_MD(:1, :2, :3); END;';
                                        EXECUTE sql_w
                                            USING IN OUT inf_solucao[1].qt_volume_etapa_dif(i).qt_dose, IN OUT inf_solucao[1].qt_volume_total,
                                            IN ds_valor_w;

                                    EXCEPTION
                                        WHEN OTHERS THEN
                                            ds_erro_w := sqlerrm;
                                            ds_parametros_w := ( 'nr_atendimento_p: '
                                                                 || nr_atendimento_p
                                                                 || '-'
                                                                 || 'nr_prescricao_p: '
                                                                 || nr_prescricao_p
                                                                 || '-'
                                                                 || 'nr_sequencia_p: '
                                                                 || nr_sequencia_p
                                                                 || '-'
                                                                 || 'inf_solucao(1).qt_volume_etapa_dif(i).qt_dose: '
                                                                 || inf_solucao[1].qt_volume_etapa_dif(i).qt_dose
                                                                 || '-'
                                                                 || 'inf_solucao(1).qt_volume_total: '
                                                                 || inf_solucao[1].qt_volume_total
                                                                 || '-'
                                                                 || 'ds_valor_w: '
                                                                 || ds_valor_w );

                                            CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                                     'OBTER_VOLUME_INF_SOLUCAO_MD',
                                                                     ds_parametros_w,
                                                                     substr(ds_erro_w, 4000),
                                                                     nm_usuario_p,
                                                                     'S');

                                            inf_solucao[1].qt_volume_etapa_dif(i).qt_dose := NULL;
                                            inf_solucao[1].qt_volume_total := NULL;
                                    END;

                                    sql_w := NULL;
                --- Fim MD8
                                    ds_dose_dif_w := substr(ds_dose_dif_w, posicao + 1);
                                END;
                            END LOOP;

                        END IF;
                    END;

                END LOOP;

                CLOSE c02;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION DS_HORARIOS_W ESPACAMENTO:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || 'nr_sequencia_p'
                                           || nr_sequencia_p
                                           || 'cd_mat_w:'
                                           || cd_mat_w
                                           || 'ds_dose_dif_w: '
                                           || ds_dose_dif_w
                                           || 'cd_unid_med_dose_w'
                                           || cd_unid_med_dose_w
                                           || 'nr_etapas_w:'
                                           || nr_etapas_w,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            FOR i IN 1..nr_etapas_w LOOP
                BEGIN
          -- Esta procedure nao sera utilizada inicialmente, pois o usuario podera editar todas as informacoes
          -- Calcular_Volume_Total_Solucao(ie_tipo_dosagem_w,  qt_tempo_aplicacao_w/nr_etapas_w, vl_etapa_w, null, nr_prescricao_p, nr_seq_solucao_p, 1, vl_retorno_w, 'N');
                    BEGIN
                        INSERT INTO prescr_solucao_esquema(
                            nr_sequencia,
                            nr_prescricao,
                            nr_seq_solucao,
                            dt_atualizacao,
                            nm_usuario,
                            qt_volume,
                            qt_dosagem,
                            qt_hora_fase,
                            ds_horario,
                            nr_etapa
                        ) VALUES (
                            nextval('prescr_solucao_esquema_seq'),
                            nr_prescricao_p,
                            nr_seq_solucao_p,
                            clock_timestamp(),
                            nm_usuario_w,
                            inf_solucao[1].qt_volume_etapa_dif(i).qt_dose,
                            inf_solucao[1].ds_duracao_dif(i).ds_vel_inf,
                            inf_solucao[1].qt_hora_fase_dif(i).qt_hora,
                            substr(inf_solucao[1].ds_horarios_dif(i).ds_hora, 1, 60),
                            i
                        );

                    EXCEPTION
                        WHEN OTHERS THEN
                            CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION INSERT PRESCR_SOLUCAO_ESQUEMA:'
                                                   || substr(to_char(sqlerrm), 1, 2000)
                                                   || 'nr_sequencia_p'
                                                   || nr_sequencia_p
                                                   || 'nr_prescricao_p'
                                                   || nr_prescricao_p
                                                   || 'nr_seq_solucao_p'
                                                   || nr_seq_solucao_p
                                                   || 'nm_usuario_w'
                                                   || nm_usuario_w
                                                   || 'inf_solucao(1).qt_volume_etapa_dif(i).qt_dose'
                                                   || inf_solucao[1].qt_volume_etapa_dif(i).qt_dose
                                                   || 'inf_solucao(1).ds_duracao_dif(i).ds_vel_inf'
                                                   || inf_solucao[1].ds_duracao_dif(i).ds_vel_inf
                                                   || 'inf_solucao(1).qt_hora_fase_dif(i).qt_hora'
                                                   || inf_solucao[1].qt_hora_fase_dif(i).qt_hora
                                                   || 'inf_solucao(1).ds_horarios_dif(i).ds_hora'
                                                   || inf_solucao[1].ds_horarios_dif(i).ds_hora,
                                                  2000),
                                           nr_atendimento_p,
                                           'M',
                                           nr_sequencia_p);
                    END;

                END;
            END LOOP;

        END IF;

    END;

    PROCEDURE localizar_ultimo_item IS
    BEGIN
        nr_prescricao_orig_w := NULL;
        nr_sequencia_orig_w := NULL;
        IF ( ie_copia_diaria_p = 'S' )
            AND (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '')
        THEN
            BEGIN
      -- Localizar ultima prescricao
                SELECT
                    MAX(a.nr_prescricao)
                INTO STRICT nr_prescricao_orig_w
                FROM
                    prescr_medica a
                WHERE
                        a.nr_atendimento = nr_atendimento_p
                    AND a.dt_prescricao > dt_inicio_base_w - 10
                    AND EXISTS (
                        SELECT
                            1
                        FROM
                            prescr_solucao b
                        WHERE
                                b.nr_prescricao = a.nr_prescricao
                            AND coalesce(b.nr_seq_dialise::text, '') = ''
                            AND EXISTS (
                                SELECT
                                    1
                                FROM
                                    prescr_material c
                                WHERE
                                        c.nr_prescricao = b.nr_prescricao
                                    AND c.nr_sequencia_solucao = b.nr_seq_solucao
                                    AND c.nr_seq_mat_cpoe = nr_sequencia_p
                            )
                    );

                IF (nr_prescricao_orig_w IS NOT NULL AND nr_prescricao_orig_w::text <> '') THEN
        -- Itens copiados nao devem ser gerados como agora
                    ie_urgencia_w := NULL;

        -- Localizar ultimo item
                    SELECT
                        MIN(b.nr_seq_solucao)
                    INTO STRICT nr_sequencia_orig_w
                    FROM
                        prescr_solucao b
                    WHERE
                            b.nr_prescricao = nr_prescricao_orig_w
                        AND coalesce(b.nr_seq_dialise::text, '') = ''
                        AND EXISTS (
                            SELECT
                                1
                            FROM
                                prescr_material c
                            WHERE
                                    c.nr_prescricao = b.nr_prescricao
                                AND c.nr_sequencia_solucao = b.nr_seq_solucao
                                AND c.nr_seq_mat_cpoe = nr_sequencia_p
                        );

                END IF;

            END;
        END IF;

    END;

BEGIN
    SELECT
        MAX(cd_pessoa_fisica)
    INTO STRICT cd_pessoa_fisica_w
    FROM
        atendimento_paciente
    WHERE
        nr_atendimento = nr_atendimento_p;

    SELECT
        coalesce(MAX(nr_seq_solucao), 0)
    INTO STRICT nr_seq_solucao_w
    FROM
        prescr_solucao
    WHERE
        nr_prescricao = nr_prescricao_p;

    dt_inicio_base_w := trunc(dt_inicio_prescr_p, 'mi');
    dt_inicio_prescr_w := dt_inicio_base_w;
    nr_horas_prox_geracao_w := get_qt_hours_after_copy_cpoe(cd_perfil_p, nm_usuario_p, cd_estabelecimento_p);
    SELECT
        coalesce(MAX(nr_agrupamento), 0) + 1
    INTO STRICT nr_agrupamento_w
    FROM
        prescr_material
    WHERE
        nr_prescricao = nr_prescricao_p;

    OPEN c01;
    LOOP
        FETCH c01 INTO
            cd_material_w,
            qt_dose_w,
            ie_via_aplicacao_w,
            cd_unidade_medida_sol_w,
            cd_intervalo_w,
            hr_prim_horario_w,
            ds_horarios_sol_w,
            ie_urgencia_w,
            ds_justificativa_w,
            qt_dias_solicitado_w,
            qt_dias_liberado_w,
            ie_objetivo_w,
            cd_microorganismo_cih_w,
            cd_amostra_cih_w,
            ie_origem_infeccao_w,
            cd_topografia_cih_w,
            ie_indicacao_w,
            nr_dia_util_sol_w,
            qt_total_dias_lib_w,
            ie_uso_antimicrobiano_w,
            ie_bomba_infusao_w,
            qt_hora_aplicacao_w,
            qt_min_aplicacao_w,
            ie_aplic_bolus_w,
            ie_aplic_lenta_w,
            qt_solucao_w,
            dt_atualizacao_w,
            ds_dose_diferenciada_w,
            nr_etapas_w,
            qt_dosagem_w,
            ie_tipo_dosagem_w,
            qt_tempo_aplicacao_w,
            qt_solucao_total_w,
            qt_hora_fase_w,
            nr_sequencia_w,
            cd_mat_comp1_w,
            qt_dose_comp1_w,
            ds_dose_diferenciada_comp1_w,
            cd_unid_med_dose_comp1_w,
            ie_paciente_comp1_w,
            cd_mat_comp2_w,
            qt_dose_comp2_w,
            ds_dose_diferenciada_comp2_w,
            cd_unid_med_dose_comp2_w,
            ie_paciente_comp2_w,
            cd_mat_comp3_w,
            qt_dose_comp3_w,
            ds_dose_diferenciada_comp3_w,
            cd_unid_med_dose_comp3_w,
            ie_paciente_comp3_w,
            cd_mat_comp4_w,
            qt_dose_comp4_w,
            ds_dose_diferenciada_comp4_w,
            cd_unid_med_dose_comp4_w,
            ie_paciente_comp4_w,
            cd_mat_comp5_w,
            qt_dose_comp5_w,
            ds_dose_diferenciada_comp5_w,
            cd_unid_med_dose_comp5_w,
            ie_paciente_comp5_w,
            cd_mat_comp6_w,
            qt_dose_comp6_w,
            ds_dose_diferenciada_comp6_w,
            cd_unid_med_dose_comp6_w,
            ie_paciente_comp6_w,
            cd_mat_comp7_w,
            qt_dose_comp7_w,
            ds_dose_diferenciada_comp7_w,
            cd_unid_med_dose_comp7_w,
            ie_paciente_comp7_w,
            dt_inicio_orig_w,
            ie_tipo_sol_w,
            ie_tipo_analgesia_w,
            ie_pca_modo_prog_w,
            qt_dose_inicial_pca_w,
            qt_vol_infusao_pca_w,
            qt_bolus_pca_w,
            qt_intervalo_bloqueio_w,
            qt_limite_quatro_hora_w,
            qt_limite_uma_hora_w,
            ie_um_bolus_pca_w,
            ie_um_dose_inicio_pca_w,
            ie_um_fluxo_pca_w,
            ie_um_limite_hora_pca_w,
            ie_um_limite_pca_w,
            dt_fim_w,
            ie_ref_calculo_w,
            cd_mat_dil_w,
            cd_unid_med_dose_dil_w,
            ds_dose_diferenciada_dil_w,
            qt_dose_dil_w,
            qt_solucao_dil_w,
            cd_mat_recons_w,
            cd_unid_med_dose_recons_w,
            ds_dose_diferenciada_rec_w,
            qt_dose_recons_w,
            cd_mat_red_w,
            cd_unid_med_dose_red_w,
            ds_dose_diferenciada_red_w,
            qt_dose_red_w,
            qt_solucao_red_w,
            qt_dose_ataque_w,
            qt_min_fase_ataque_w,
            qt_hora_fase_diferenciada_w,
            qt_dosagem_diferenciada_w,
            ds_observacao_w,
            cd_protocolo_w,
            nr_seq_protocolo_w,
            nr_seq_mat_protocolo_w,
            ie_administracao_w,
            ie_fator_correcao_w,
            qt_dose_correcao1_w,
            qt_dose_correcao2_w,
            qt_dose_correcao3_w,
            qt_dose_correcao4_w,
            qt_dose_correcao5_w,
            qt_dose_correcao6_w,
            qt_dose_correcao7_w,
            qt_dose_correcao8_w,
            qt_vol_dil_corrigido_w,
            qt_vol_red_corrigido_w,
            qt_vol_rec_corrigido_w,
            qt_volume_corrigido_w,
            nr_seq_cpoe_anterior_w,
            ie_duracao_w,
            ds_solucao_w,
            ie_evento_unico_w,
            ie_alterou_horario_w,
            qt_volume_w,
            ie_trev_w,
            dt_fim_medic_w,
            nr_seq_avaliacao_w,
            nr_seq_mat_diluicao_w,
            nr_seq_mat_reconst_w,
            qt_final_concentration_w,
            ie_um_final_conc_pca_w,
            si_rapid_infusion_w,
            ie_regra_disp_ww,
			cd_mat_recons1_w,
			qt_dose_recons1_w,
			cd_unid_med_dose_recons1_w,
			ds_dose_diferenciada_rec1_w,
			cd_mat_recons2_w,
			qt_dose_recons2_w,
			cd_unid_med_dose_recons2_w,
			ds_dose_diferenciada_rec2_w,
			cd_mat_recons3_w,
			qt_dose_recons3_w,
			cd_unid_med_dose_recons3_w,
			ds_dose_diferenciada_rec3_w,
			cd_mat_recons4_w,
			qt_dose_recons4_w,
			cd_unid_med_dose_recons4_w,
			ds_dose_diferenciada_rec4_w,
			cd_mat_recons5_w,
			qt_dose_recons5_w,
			cd_unid_med_dose_recons5_w,
			ds_dose_diferenciada_rec5_w,
			cd_mat_recons6_w,
			qt_dose_recons6_w,
			cd_unid_med_dose_recons6_w,
			ds_dose_diferenciada_rec6_w,
			cd_mat_recons7_w,
			qt_dose_recons7_w,
			cd_unid_med_dose_recons7_w,
			ds_dose_diferenciada_rec7_w;

        EXIT WHEN NOT FOUND; /* apply on c01 */
        BEGIN
            IF (
                (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '')
                AND ie_administracao_w IN ( 'N', 'C' )
            ) THEN
                SELECT
                    coalesce(MAX(qt_operacao), 0)
                INTO STRICT qt_operacao_w
                FROM
                    intervalo_prescricao
                WHERE
                    cd_intervalo = cd_intervalo_w;

            ELSE
                qt_operacao_w := 1;
            END IF;

  --ie_calcula_horarios_w  := false;
            nr_seq_solucao_w := nr_seq_solucao_w + 1;
            dt_inicio_w := dt_inicio_orig_w;
            nr_etapas_ww := nr_etapas_w;
            IF
                ( ( ie_ref_calculo_w <> 'NE' ) OR ( ie_tipo_sol_w = 4 ) )
                AND ( ie_administracao_w <> 'P' )
            THEN
                ie_solucao_especial_w := 'S';
    --Se for vel. inf variavel tem que ficar null nr_etapas, ou no caso de estar gerando uma nova recalcular depois se tiver intervalo
                IF ( ( ie_copia_diaria_p <> 'S' ) OR ( ie_tipo_sol_w = 4 ) OR (
                    qt_operacao_w = 0
                    AND ie_administracao_w IN ( 'N', 'C' )
                ) ) THEN
                    nr_etapas_w := NULL;
                END IF;

            END IF;

            IF ( ie_copia_diaria_p = 'N' )
                AND (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '')
                AND ( obter_se_interv_evento_unico(cd_intervalo_w) = 'N' )
                AND ( ie_evento_unico_w = 'S' )
            THEN
                ie_evento_unico_w := 'N';
                UPDATE cpoe_material
                SET
                    ie_evento_unico = ie_evento_unico_w
                WHERE
                    nr_sequencia = nr_sequencia_w;

            END IF;

  -- Itens ACM e SN nao possuem 1 horario, definir inicio do item para execucao da geracao.
            IF ( ie_administracao_w <> 'P' ) THEN
                IF ( trunc(dt_inicio_w) > trunc(dt_inicio_base_w) ) THEN
                    hr_prim_horario_w := '00:00';
                ELSE
                    hr_prim_horario_w := to_char(dt_inicio_base_w, 'hh24:mi');
                END IF;
            END IF;

  -- Atualiza a data inicio com dia e horario.
            dt_inicio_w := to_date(to_char(dt_inicio_w, 'dd/mm/yyyy ')
                                   || hr_prim_horario_w, 'dd/mm/yyyy hh24:mi');

  -- Atualizar data de inicio com a data atual, para itens que a data de inicio ja tenha sido ultrapassada.
            IF ( ie_copia_diaria_p = 'S' ) THEN
    -- Assumir data da prescricao para o item
                dt_inicio_w := to_date(to_char(dt_inicio_base_w, 'dd/mm/yyyy ')
                                       || hr_prim_horario_w, 'dd/mm/yyyy hh24:mi');
    -- Adicionar um dia, caso o inicio do item, nao caia na data de hoje
                IF (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') THEN
                    SELECT
                        coalesce(MAX(ie_24_h), 'N')
                    INTO STRICT ie_intervalo_24_w
                    FROM
                        intervalo_prescricao
                    WHERE
                            cd_intervalo = cd_intervalo_w
                        AND coalesce(ie_operacao, 'X') = 'H'
                        AND coalesce(qt_operacao, 1) > 24;

                    IF ( ie_intervalo_24_w = 'S' ) THEN
                        qt_horas_interv_w := obter_ocorrencia_intervalo(cd_intervalo_w, 24, 'H');


        --- Inicio MD8
                        BEGIN
                            sql_w := 'CALL OBTER_DT_INICIO_INF_SOLUCAO_MD(:1, :2) INTO :dt_inicio_ww';
                            EXECUTE sql_w
                                USING IN dt_inicio_w, IN qt_horas_interv_w, OUT dt_inicio_ww;
                        EXCEPTION
                            WHEN OTHERS THEN
                                ds_erro_w := sqlerrm;
                                ds_parametros_w := ( 'nr_atendimento_p: '
                                                     || nr_atendimento_p
                                                     || '-'
                                                     || 'nr_prescricao_p: '
                                                     || nr_prescricao_p
                                                     || '-'
                                                     || 'nr_sequencia_p: '
                                                     || nr_sequencia_p
                                                     || '-'
                                                     || 'dt_inicio_w: '
                                                     || dt_inicio_w
                                                     || '-'
                                                     || 'qt_horas_interv_w: '
                                                     || qt_horas_interv_w
                                                     || '-'
                                                     || 'dt_inicio_ww: '
                                                     || dt_inicio_ww );

                                CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                         'OBTER_DT_INICIO_INF_SOLUCAO_MD',
                                                         ds_parametros_w,
                                                         substr(ds_erro_w, 4000),
                                                         nm_usuario_p,
                                                         'S');

                                dt_inicio_ww := NULL;
                        END;


           --- Fim MD8
                        hr_prim_horario_w := to_char(dt_inicio_ww, 'hh24:mi');
                        dt_inicio_w := to_date(to_char(dt_inicio_w, 'dd/mm/yyyy ')
                                               || hr_prim_horario_w, 'dd/mm/yyyy hh24:mi');

        --- Inicio MD9
                        BEGIN
                            sql_w := 'CALL OBTER_DT_INI_SOLUCOES_REG_MD(:1, :2) INTO :dt_inicio_result_w';
                            EXECUTE sql_w
                                USING IN dt_inicio_w, IN dt_inicio_base_w, OUT dt_inicio_result_w;
                        EXCEPTION
                            WHEN OTHERS THEN
                                ds_erro_w := sqlerrm;
                                ds_parametros_w := ( 'nr_atendimento_p: '
                                                     || nr_atendimento_p
                                                     || '-'
                                                     || 'nr_prescricao_p: '
                                                     || nr_prescricao_p
                                                     || '-'
                                                     || 'nr_sequencia_p: '
                                                     || nr_sequencia_p
                                                     || '-'
                                                     || 'dt_inicio_w: '
                                                     || dt_inicio_w
                                                     || '-'
                                                     || 'dt_inicio_base_w: '
                                                     || dt_inicio_base_w
                                                     || '-'
                                                     || 'dt_inicio_result_w: '
                                                     || dt_inicio_result_w );

                                CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                         'OBTER_DT_INI_SOLUCOES_REG_MD',
                                                         ds_parametros_w,
                                                         substr(ds_erro_w, 4000),
                                                         nm_usuario_p,
                                                         'S');

                                dt_inicio_result_w := NULL;
                        END;


        --- Fim MD9
						dt_inicio_w := dt_inicio_result_w;
                        hr_prim_horario_w := to_char(dt_inicio_w, 'hh24:mi');
                        ds_horarios_sol_w := hr_prim_horario_w;
                        UPDATE cpoe_material
                        SET
                            hr_prim_horario = hr_prim_horario_w,
                            ds_horarios = ds_horarios_sol_w
                        WHERE
                            nr_sequencia = nr_sequencia_w;

                    ELSE
          --- Inicio MD9
                        BEGIN
                            sql_w := 'CALL OBTER_DT_INI_SOLUCOES_REG_MD(:1, :2) INTO :dt_inicio_result_w';
                            EXECUTE sql_w
                                USING IN dt_inicio_w, IN dt_inicio_base_w, OUT dt_inicio_result_w;
                        EXCEPTION
                            WHEN OTHERS THEN
                                ds_erro_w := sqlerrm;
                                ds_parametros_w := ( 'nr_atendimento_p: '
                                                     || nr_atendimento_p
                                                     || '-'
                                                     || 'nr_prescricao_p: '
                                                     || nr_prescricao_p
                                                     || '-'
                                                     || 'nr_sequencia_p: '
                                                     || nr_sequencia_p
                                                     || '-'
                                                     || 'dt_inicio_w: '
                                                     || dt_inicio_w
                                                     || '-'
                                                     || 'dt_inicio_base_w: '
                                                     || dt_inicio_base_w
                                                     || '-'
                                                     || 'dt_inicio_result_w: '
                                                     || dt_inicio_result_w );

                                CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                         'OBTER_DT_INI_SOLUCOES_REG_MD',
                                                         ds_parametros_w,
                                                         substr(ds_erro_w, 4000),
                                                         nm_usuario_p,
                                                         'S');

                                dt_inicio_result_w := NULL;
                        END;
						dt_inicio_w := dt_inicio_result_w;


        --- Fim MD9
                    END IF;

                END IF;

            ELSIF (
                (
                    ( ( ie_tipo_sol_w = '1' ) OR ( ie_tipo_sol_w = '3' ) )
                    AND ( ( ie_administracao_w = 'P' ) OR (
                        ( ie_administracao_w IN ( 'N', 'C' ) )
                        AND (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '')
                    ) )
                    AND ( (nr_etapas_w IS NOT NULL AND nr_etapas_w::text <> '') OR (
                        (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '')
                        AND qt_operacao_w > 0
                    ) )
                    AND ( (
                        ( obter_quantidade_horarios(ds_horarios_sol_w) <> nr_etapas_w )
                        AND ( coalesce(cd_intervalo_w::text, '') = '' )
                    ) OR (
                        (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '')
                        AND ( obter_quantidade_horarios(ds_horarios_sol_w) <> obter_ocorrencia_intervalo(cd_intervalo_w, obtervalidade(
                        nr_atendimento_p, nr_sequencia_p), 'O') )
                    ) OR ( coalesce(ds_horarios_sol_w::text, '') = '' ) )
                )
                AND ie_alterou_horario_w = 'N'
            ) THEN
                IF (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') THEN
                    nr_etapas_w := NULL;
                END IF;
                SELECT * FROM cpoe_calcular_horario_prescr(nr_atendimento_p, cd_intervalo_w, NULL, dt_inicio_w, NULL, 0, nr_etapas_w, ds_horarios_aux_w, ds_horarios_aux2_w, nm_usuario_p, cd_estabelecimento_p, cd_perfil_p, '', NULL, NULL, NULL, NULL, obtervalidade(nr_atendimento_p, nr_sequencia_p)) INTO STRICT nr_etapas_w, ds_horarios_aux_w, ds_horarios_aux2_w;

                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG LOG INSERT CPOE_CALCULAR_HORARIO_PRESCR:'
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || ' nr_sequencia_p: '
                                       || nr_sequencia_p
                                       || ' ds_horarios_sol_w : '
                                       || ds_horarios_sol_w
                                       || ' ds_horarios_aux_w : '
                                       || ds_horarios_aux_w
                                       || ' ds_horarios_aux2_w : '
                                       || ds_horarios_aux2_w
                                       || ' nr_etapas_w : '
                                       || nr_etapas_w,
                                      1,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);

                ds_horarios_sol_w := ds_horarios_aux_w || ds_horarios_aux2_w;
                ds_horarios_sol_w := replace(padroniza_horario_prescr(ds_horarios_sol_w, NULL), 'A', '');
                IF ( ie_administracao_w NOT IN ( 'N', 'C' ) ) THEN
                    UPDATE cpoe_material
                    SET
                        nr_ocorrencia = nr_etapas_w,
                        ds_horarios = ds_horarios_sol_w
                    WHERE
                        nr_sequencia = nr_sequencia_w;

                END IF;

            END IF;

            IF ( ie_trev_w = 'S' ) THEN
                UPDATE cpoe_trev
                SET
                    nr_seq_mat_cpoe = nr_seq_mat_cpoe_edit,
                    nr_seq_mat_cpoe_edit  = NULL
                WHERE
                    nr_seq_mat_cpoe_edit = nr_sequencia_w;

            END IF;

            BEGIN
    -- Recalcula os horarios do item, caso a data de inicio, nao seja a mesma da tabela de CPOE_PROCEDIMENTO
    /*if  (ie_calcula_horarios_w) then
      calcular_horarios_item;
    else*/
                IF ( si_rapid_infusion_w <> 'O' ) THEN
                    qt_tempo_aplicacao_w := coalesce(qt_tempo_aplicacao_w, 24);
                END IF;
    --end if;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION QT_TEMPO_APLICACAO_W:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || 'nr_sequencia_p'
                                           || nr_sequencia_p,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
    -- Caso a data de inicio do item seja maior que a data base de inicio, reprogramar a geracao para o futuro
                IF ( dt_inicio_w > dt_inicio_base_w + 1 - 1 / 86400 )
                    AND ( ie_disp_semanal_p = 'N' )
                THEN

      --- Inicio MD10 utilizar ou criar o objeto obter_dt_prox_geracao_cpoe_md.
                    BEGIN
                        sql_w := 'CALL OBTER_DT_PROX_GERACAO_CPOE_MD(:1, :2) INTO :nr_horas_prox_w';
                        EXECUTE sql_w
                            USING IN dt_inicio_w, IN nr_horas_prox_geracao_w, OUT nr_horas_prox_w;
                    EXCEPTION
                        WHEN OTHERS THEN
                            ds_erro_w := sqlerrm;
                            ds_parametros_w := ( 'nr_atendimento_p: '
                                                 || nr_atendimento_p
                                                 || '-'
                                                 || 'nr_prescricao_p: '
                                                 || nr_prescricao_p
                                                 || '-'
                                                 || 'nr_sequencia_p: '
                                                 || nr_sequencia_p
                                                 || '-'
                                                 || 'dt_inicio_w: '
                                                 || dt_inicio_w
                                                 || '-'
                                                 || 'nr_horas_prox_geracao_w: '
                                                 || nr_horas_prox_geracao_w
                                                 || '-'
                                                 || 'nr_horas_prox_w: '
                                                 || nr_horas_prox_w );

                            CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                     'OBTER_DT_PROX_GERACAO_CPOE_MD',
                                                     ds_parametros_w,
                                                     substr(ds_erro_w, 4000),
                                                     nm_usuario_p,
                                                     'S');

                            nr_horas_prox_w := NULL;
                    END;
        --- Fim MD10
                    UPDATE cpoe_material
                    SET
                        dt_prox_geracao = nr_horas_prox_w
                    WHERE
                        nr_sequencia = nr_sequencia_p;

                    GOTO proximo_item;
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION DT_PROX_GERACAO:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || 'nr_sequencia_p'
                                           || nr_sequencia_p
                                           || 'dt_inicio_w '
                                           || to_char(dt_inicio_w, 'dd/mm/yyyy hh24:mi:ss')
                                           || 'dt_inicio_base_w:'
                                           || to_char(dt_inicio_base_w, 'dd/mm/yyyy hh24:mi:ss'),
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

  -- Se o inicio do item for apos a data de fim, definida para o mesmo, este item nao deve ser mais copiado.
            BEGIN
                sql_w := 'CALL OBTER_SE_COPIA_SOLUCAO_MD(:1, :2) INTO :se_copia_solucao_w';
                EXECUTE sql_w
                    USING IN dt_fim_w, IN dt_inicio_w, OUT se_copia_solucao_w;
            EXCEPTION
                WHEN OTHERS THEN
                    ds_erro_w := sqlerrm;
                    ds_parametros_w := ( 'nr_atendimento_p: '
                                         || nr_atendimento_p
                                         || '-'
                                         || 'nr_prescricao_p: '
                                         || nr_prescricao_p
                                         || '-'
                                         || 'nr_sequencia_p: '
                                         || nr_sequencia_p
                                         || '-'
                                         || 'dt_fim_w: '
                                         || dt_fim_w
                                         || '-'
                                         || 'dt_inicio_w: '
                                         || dt_inicio_w
                                         || '-'
                                         || 'se_copia_solucao_w: '
                                         || se_copia_solucao_w );

                    CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                             'OBTER_SE_COPIA_SOLUCAO_MD',
                                             ds_parametros_w,
                                             substr(ds_erro_w, 4000),
                                             nm_usuario_p,
                                             'S');

                    se_copia_solucao_w := NULL;
            END;

            IF ( se_copia_solucao_w = 'S' ) THEN --- Inicio MD11  Criar uma function para fazer esta validacao do IF. obter_se_copia_solucao_md
                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION DT_PROX_GERACAO:'
                                       || substr(to_char(sqlerrm), 1, 2000)
                                       || '//dt_inicio_base_w : '
                                       || to_char(dt_inicio_base_w, 'dd/mm/yyyy hh24:mi:ss')
                                       || ' dt_inicio_w : '
                                       || to_char(dt_inicio_w, 'dd/mm/yyyy hh24:mi:ss')
                                       || ' dt_fim_w : '
                                       || to_char(dt_fim_w, 'dd/mm/yyyy hh24:mi:ss')
                                       || ' nr_prescricao_p : '
                                       || nr_prescricao_p
                                       || ' nr_seq_mat_cpoe_w :'
                                       || nr_sequencia_p
                                       || ' cd_perfil_p: '
                                       || cd_perfil_p,
                                      2000),
                               nr_atendimento_p,
                               'M',
                               nr_sequencia_p);

                GOTO proximo_item;
            END IF;

  -- Localizar ultima prescricao e item principal vinculado ao registro da CPOE
            localizar_ultimo_item;

  -- Retornar a maior data de inicio dos itens.
            IF ( coalesce(dt_inicio_ret_p::text, '') = '' ) OR ( dt_inicio_w > dt_inicio_ret_p ) THEN
                dt_inicio_ret_p := dt_inicio_w;
            END IF;

            BEGIN
    --- Inicio M12
                BEGIN
                    sql_w := 'CALL OBTER_QT_HORA_FASE_MD(:1, :2, :3) INTO :qt_hora_fase_w';
                    EXECUTE sql_w
                        USING IN qt_hora_fase_w, IN qt_tempo_aplicacao_w, IN nr_etapas_w, OUT qt_hora_fase_w;
                EXCEPTION
                    WHEN OTHERS THEN
                        ds_erro_w := sqlerrm;
                        ds_parametros_w := ( 'nr_atendimento_p: '
                                             || nr_atendimento_p
                                             || '-'
                                             || 'nr_prescricao_p: '
                                             || nr_prescricao_p
                                             || '-'
                                             || 'nr_sequencia_p: '
                                             || nr_sequencia_p
                                             || '-'
                                             || 'qt_hora_fase_w: '
                                             || qt_hora_fase_w
                                             || '-'
                                             || 'qt_tempo_aplicacao_w: '
                                             || qt_tempo_aplicacao_w
                                             || '-'
                                             || 'nr_etapas_w: '
                                             || nr_etapas_w
                                             || '-'
                                             || 'qt_hora_fase_w: '
                                             || qt_hora_fase_w );

                        CALL gravar_log_medical_device('cpoe_insert_solucoes_reg',
                                                 'OBTER_QT_HORA_FASE_MD',
                                                 ds_parametros_w,
                                                 substr(ds_erro_w, 4000),
                                                 nm_usuario_p,
                                                 'S');

                        qt_hora_fase_w := NULL;
                END;


    --- Fim MD12
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION DIVIDIR_SEM_ROUND:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || 'nr_sequencia_p'
                                           || nr_sequencia_p
                                           || 'qt_hora_fase_w:'
                                           || qt_hora_fase_w
                                           || 'qt_tempo_aplicacao_w:'
                                           || qt_tempo_aplicacao_w
                                           || 'nr_etapas_w :'
                                           || nr_etapas_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            ie_se_necessario_w := 'N';
            ie_acm_w := 'N';
            IF ( ie_administracao_w = 'N' ) THEN
                ie_se_necessario_w := 'S';
                ie_acm_w := 'N';
                hr_prim_horario_w := NULL;
                ds_horarios_sol_w := '';
                ie_urgencia_w := NULL;
            ELSIF ( ie_administracao_w = 'C' ) THEN
                ie_se_necessario_w := 'N';
                ie_acm_w := 'S';
                hr_prim_horario_w := NULL;
                ds_horarios_sol_w := '';
                ie_urgencia_w := NULL;
            END IF;

            BEGIN
                IF (ds_dose_diferenciada_w IS NOT NULL AND ds_dose_diferenciada_w::text <> '') THEN
                    ie_esquema_alternado_w := 'S';
                    qt_hora_fase_w := 0;
                    ds_horarios_sol_w := obter_etapas_formatadas(ds_horarios_sol_w, qt_hora_fase_diferenciada_w, dt_inicio_w, dt_fim_w,
                    hr_prim_horario_w);
                ELSIF ( ie_alterou_horario_w = 'N' ) THEN
                    ie_esquema_alternado_w := 'N';
                    ds_horarios_sol_w := obter_etapas_formatadas(ds_horarios_sol_w, qt_hora_fase_w, dt_inicio_w, dt_fim_w, hr_prim_horario_w);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION OBTER_ETAPAS_FORMATADAS:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || 'nr_sequencia_p'
                                           || nr_sequencia_p
                                           || 'ds_dose_diferenciada_w:'
                                           || ds_dose_diferenciada_w
                                           || 'ds_horarios_sol_w:'
                                           || ds_horarios_sol_w
                                           || 'qt_hora_fase_diferenciada_w:'
                                           || qt_hora_fase_diferenciada_w
                                           || 'qt_hora_fase_w'
                                           || qt_hora_fase_w
                                           || 'dt_inicio_w '
                                           || to_char(dt_inicio_w, 'dd/mm/yyyy hh24:mi:ss')
                                           || 'ddt_fim_w '
                                           || to_char(dt_fim_w, 'dd/mm/yyyy hh24:mi:ss')
                                           || 'hr_prim_horario_w:'
                                           || hr_prim_horario_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            IF ( ie_tipo_sol_w = 5 ) THEN
                ie_solucao_pca_w := 'S';
            ELSIF ( ie_solucao_pca_w = 'S' ) THEN
                ie_tipo_sol_w := 5;
            ELSE
                ie_solucao_pca_w := 'N';
            END IF;

            IF ( ds_solucao_w = '' ) THEN
                ds_solucao_w := NULL;
            END IF;
            BEGIN
                INSERT INTO prescr_solucao(
                    nr_seq_solucao,
                    nr_prescricao,
                    ie_via_aplicacao,
                    dt_atualizacao,
                    nm_usuario,
                    cd_unidade_medida,
                    ie_tipo_dosagem,
                    ds_solucao,
                    qt_hora_fase,
                    qt_tempo_aplicacao, --10
                    hr_prim_horario,
                    qt_dosagem,
                    qt_solucao_total,
                    ds_horarios,
                    ie_acm,
                    ie_se_necessario,
                    ie_urgencia,
                    cd_intervalo,   --seta valor, porem o intervalo da REP em solucoes eh habilitado por parametro e possui restricoes aplicadas via cod. fonte
                    ie_suspenso,
                    ie_bomba_infusao, --20
                    nr_agrupamento,
                    ie_esquema_alternado,
                    ie_calc_aut,
                    dt_status,
                    ie_status,
                    ie_solucao_especial,
                    ie_hemodialise,
                    ie_pos_dialisador,
                    ie_ultima_bolsa,
                    ie_erro,
                    ie_solucao_pca,
                    cd_perfil_ativo,
                    ie_etapa_especial,
                    ie_aberto,
                    ie_estender_etapa,
                    ie_suspender,
                    ie_tidal,
                    ie_lavar_linhas,
                    ie_modificada,
                    ie_fator_correcao,
                    nr_etapas,
        --ds_orientacao,
                    ie_tipo_sol,
                    ie_tipo_analgesia,
                    ie_pca_modo_prog,
                    qt_dose_inicial_pca,
                    qt_vol_infusao_pca,
                    qt_bolus_pca,
                    qt_intervalo_bloqueio,
                    qt_limite_quatro_hora,
                    qt_limite_uma_hora,
                    ie_um_bolus_pca,
                    ie_um_dose_inicio_pca,
                    ie_um_fluxo_pca,
                    ie_um_limite_hora_pca,
                    ie_um_limite_pca,
                    qt_volume_final,
                    qt_dose_ataque,
                    qt_min_dose_ataque,
                    nr_prescricao_anterior,
                    nr_prescricao_original,
                    nr_seq_anterior,
                    qt_volume_corrigido,
                    qt_volume,
                    qt_final_concentration,
                    ie_um_final_conc_pca
                ) VALUES (
                    nr_seq_solucao_w,
                    nr_prescricao_p,
                    ie_via_aplicacao_w,
                    dt_atualizacao_w,
                    nm_usuario_p,
                    cd_unidade_medida_sol_w,
                    coalesce(ie_tipo_dosagem_w, 'mlh'), -- Padrao definido pela analista Thalita.
                    ds_solucao_w,
                    qt_hora_fase_w,
                    qt_tempo_aplicacao_w,  --10
                    hr_prim_horario_w,
                    qt_dosagem_w,
                    qt_solucao_total_w,
                    ds_horarios_sol_w,
                    ie_acm_w,
                    ie_se_necessario_w,
                    CASE WHEN coalesce(ie_urgencia_w::text, '') = '' THEN  'N'  ELSE 'S' END ,
                    cd_intervalo_w,
                    'N',
                    ie_bomba_infusao_w,
                    nr_agrupamento_w,
                    ie_esquema_alternado_w,
                    'N',
                    dt_inicio_prescr_w,
                    'P',
                    coalesce(ie_solucao_especial_w, 'N'),
                    'N',
                    'S',
                    'N',
                    0,
                    ie_solucao_pca_w,
                    cd_perfil_p,
                    'N',
                    'N',
                    'N',
                    'S',
                    'N',
                    'N',
                    'N',
                    ie_fator_correcao_w,
                    nr_etapas_w,
                    ie_tipo_sol_w,
                    ie_tipo_analgesia_w,
                    ie_pca_modo_prog_w,
                    qt_dose_inicial_pca_w,
                    qt_vol_infusao_pca_w,
                    qt_bolus_pca_w,
                    qt_intervalo_bloqueio_w,
                    qt_limite_quatro_hora_w,
                    qt_limite_uma_hora_w,
                    ie_um_bolus_pca_w,
                    ie_um_dose_inicio_pca_w,
                    ie_um_fluxo_pca_w,
                    ie_um_limite_hora_pca_w,
                    ie_um_limite_pca_w,
                    qt_volume_final_w,
                    qt_dose_ataque_w,
                    qt_min_fase_ataque_w,
                    nr_prescricao_orig_w,
                    nr_prescricao_orig_w,
                    nr_sequencia_orig_w,
                    qt_volume_corrigido_w,
                    qt_volume_w,
                    qt_final_concentration_w,
                    ie_um_final_conc_pca_w
                );

            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION INSERT PRESCR_SOLUCAO:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_seq_solucao_w '
                                           || nr_seq_solucao_w
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' ie_via_aplicacao_w '
                                           || ie_via_aplicacao_w
                                           || ' dt_atualizacao_w '
                                           || to_char(dt_atualizacao_w, 'dd/mm/yyyy hh24:mi:ss')
                                           || ' nm_usuario_p '
                                           || nm_usuario_p
                                           || ' cd_unidade_medida_sol_w '
                                           || cd_unidade_medida_sol_w
                                           || ' ie_tipo_dosagem_w '
                                           || ie_tipo_dosagem_w
                                           || ' qt_hora_fase_w '
                                           || qt_hora_fase_w
                                           || ' qt_tempo_aplicacao_w '
                                           || qt_tempo_aplicacao_w
                                           || ' hr_prim_horario_w '
                                           || hr_prim_horario_w
                                           || ' qt_dosagem_w '
                                           || qt_dosagem_w
                                           || ' qt_solucao_total_w '
                                           || qt_solucao_total_w
                                           || 'ds_horarios_sol_w'
                                           || ds_horarios_sol_w
                                           || 'ie_acm_w'
                                           || ie_acm_w
                                           || 'ie_urgencia_w'
                                           || ie_urgencia_w
                                           || 'ie_se_necessario_w'
                                           || ie_se_necessario_w
                                           || 'cd_intervalo_w'
                                           || cd_intervalo_w
                                           || 'nr_agrupamento_w'
                                           || nr_agrupamento_w
                                           || 'ie_esquema_alternado_w'
                                           || ie_esquema_alternado_w
                                           || 'dt_inicio_prescr_w'
                                           || to_char(dt_inicio_prescr_w, 'dd/mm/yyyy hh24:mi:ss')
                                           || 'ie_solucao_pca_w'
                                           || ie_solucao_pca_w
                                           || 'nr_etapas_w'
                                           || nr_etapas_w
                                           || 'ie_tipo_sol_w'
                                           || ie_tipo_sol_w
                                           || 'ie_tipo_analgesia_w'
                                           || ie_tipo_analgesia_w
                                           || 'ie_pca_modo_prog_w'
                                           || ie_pca_modo_prog_w
                                           || 'cqt_dose_inicial_pca_w'
                                           || qt_dose_inicial_pca_w
                                           || 'qt_vol_infusao_pca_w'
                                           || qt_vol_infusao_pca_w
                                           || ' qt_intervalo_bloqueio_w '
                                           || qt_intervalo_bloqueio_w
                                           || ' qt_limite_quatro_hora_w '
                                           || qt_limite_quatro_hora_w
                                           || ' qt_limite_uma_hora_w '
                                           || qt_limite_uma_hora_w
                                           || ' ie_um_bolus_pca_w '
                                           || ie_um_bolus_pca_w
                                           || ' ie_um_dose_inicio_pca_w '
                                           || ie_um_dose_inicio_pca_w
                                           || ' ie_um_fluxo_pca_w '
                                           || ie_um_fluxo_pca_w
                                           || ' ie_um_limite_hora_pca_w '
                                           || ie_um_limite_hora_pca_w
                                           || ' ie_um_limite_pca_w '
                                           || ie_um_limite_pca_w
                                           || ' qt_volume_final_w '
                                           || qt_volume_final_w
                                           || ' qt_dose_ataque_w '
                                           || qt_dose_ataque_w
                                           || ' qt_min_fase_ataque_w '
                                           || qt_min_fase_ataque_w
                                           || ' qt_volume_w '
                                           || qt_volume_w
                                           || ' qt_final_concentration_w '
                                           || qt_final_concentration_w
                                           || ' ie_um_final_conc_pca_w '
                                           || ie_um_final_conc_pca_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            SELECT
                MAX(b.nr_prescricao)
            INTO STRICT nr_presc_incons_w
            FROM
                prescr_medica               a,
                prescr_solucao              b,
                prescr_material             c,
                prescr_material_incon_farm  d
            WHERE
                    a.nr_prescricao = b.nr_prescricao
                AND b.nr_prescricao = c.nr_prescricao
                AND b.nr_seq_solucao = c.nr_sequencia_solucao
                AND b.nr_prescricao = d.nr_prescricao
                AND b.nr_seq_solucao = d.nr_seq_solucao
                AND nr_seq_mat_cpoe = nr_sequencia_p
                AND coalesce(a.dt_suspensao::text, '') = ''
                AND (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
                AND a.cd_funcao_origem NOT IN ( 924, 950 )
                AND c.ie_agrupador = 4
                AND b.nr_prescricao <> nr_prescricao_p;

            FOR c003_w IN c003 LOOP
                INSERT INTO prescr_material_incon_farm(
                    nr_sequencia,
                    dt_atualizacao,
                    nm_usuario,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    nr_prescricao,
                    nr_seq_solucao,
                    nr_seq_inconsistencia,
                    ie_situacao
                ) VALUES (
                    nextval('prescr_material_incon_farm_seq'),
                    clock_timestamp(),
                    c003_w.nm_usuario,
                    c003_w.dt_atualizacao_nrec,
                    c003_w.nm_usuario_nrec,
                    nr_prescricao_p,
                    nr_seq_solucao_w,
                    c003_w.nr_seq_inconsistencia,
                    'A'
                );

            END LOOP;

            nr_seq_componente_princ_w := NULL;
            BEGIN
                IF (cd_material_w IS NOT NULL AND cd_material_w::text <> '') THEN

                    ie_principal_medic_w := 'S';

                    gerar_componente_solucao(cd_material_w, cd_unidade_medida_sol_w, qt_dose_w, 4, ds_dose_diferenciada_w,
                                            'N',
                                            NULL,
                                            NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MAT'),
                                            qt_dose_correcao1_w,
                                            ie_medicacao_paciente_w);

                    ie_principal_medic_w := 'N';
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO MAT:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_material_w '
                                           || cd_material_w
                                           || ' cd_unidade_medida_sol_w '
                                           || cd_unidade_medida_sol_w
                                           || ' qt_dose_w '
                                           || qt_dose_w
                                           || ' ds_dose_diferenciada_w; '
                                           || ds_dose_diferenciada_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_dil_w IS NOT NULL AND cd_mat_dil_w::text <> '') THEN
                    SELECT
                        MAX(a.ie_gerar_lote),
                        MAX(a.cd_motivo_baixa)
                    INTO STRICT
                        ie_gerar_lote_w,
                        cd_motivo_baixa_w
                    FROM
                        material_diluicao a
                    WHERE
                        a.nr_seq_interno = nr_seq_mat_diluicao_w;

                    gerar_componente_solucao(cd_material_p => cd_mat_dil_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_dil_w,
                                            qt_dose_p => qt_dose_dil_w,
                                            ie_agrupador_p => 3,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_dil_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => qt_solucao_dil_w,
                                            nr_seq_diluicao_p => nr_seq_componente_princ_w,
                                            ds_observacao_p => NULL,
                                            qt_dose_correcao_p => qt_vol_dil_corrigido_w,
                                            ie_gerar_lote_p => ie_gerar_lote_w,
                                            cd_motivo_baixa_p => cd_motivo_baixa_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO DIL:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_dil_w '
                                           || cd_mat_dil_w
                                           || ' cd_unid_med_dose_dil_w '
                                           || cd_unid_med_dose_dil_w
                                           || ' qt_dose_dil_w '
                                           || qt_dose_dil_w
                                           || ' ds_dose_diferenciada_dil_w;'
                                           || ds_dose_diferenciada_dil_w
                                           || ' qt_solucao_dil_w : '
                                           || qt_solucao_dil_w
                                           || ' nr_seq_componente_princ_w:'
                                           || nr_seq_componente_princ_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_recons_w IS NOT NULL AND cd_mat_recons_w::text <> '') THEN
                    SELECT
                        MAX(a.ie_gerar_lote),
                        MAX(a.cd_motivo_baixa)
                    INTO STRICT
                        ie_gerar_lote_w,
                        cd_motivo_baixa_w
                    FROM
                        material_diluicao a
                    WHERE
                        a.nr_seq_interno = nr_seq_mat_reconst_w;

                    ie_principal_recons_w := 'S';

                    gerar_componente_solucao(cd_material_p => cd_mat_recons_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_recons_w,
                                            qt_dose_p => qt_dose_recons_w,
                                            ie_agrupador_p => 9,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_rec_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => NULL,
                                            nr_seq_diluicao_p => nr_seq_componente_princ_w,
                                            ds_observacao_p => NULL,
                                            qt_dose_correcao_p => qt_vol_rec_corrigido_w,
                                            ie_gerar_lote_p => ie_gerar_lote_w,
                                            cd_motivo_baixa_p => cd_motivo_baixa_w);

                   ie_principal_recons_w := 'N';
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RECONS:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_recons_w '
                                           || cd_mat_recons_w
                                           || ' cd_unid_med_dose_recons_w '
                                           || cd_unid_med_dose_recons_w
                                           || ' qt_dose_recons_w '
                                           || qt_dose_recons_w
                                           || ' ds_dose_diferenciada_rec_w ;'
                                           || ds_dose_diferenciada_rec_w
                                           || ' nr_seq_componente_princ_w:'
                                           || nr_seq_componente_princ_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_red_w IS NOT NULL AND cd_mat_red_w::text <> '') THEN
                    gerar_componente_solucao(cd_mat_red_w, cd_unid_med_dose_red_w, qt_dose_red_w, 7,
                                            ds_dose_diferenciada_red_w,
                                            'S',
                                            qt_solucao_red_w,
                                            nr_seq_componente_princ_w,
                                            NULL,
                                            qt_vol_red_corrigido_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RED:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_red_w '
                                           || cd_mat_red_w
                                           || ' cd_unid_med_dose_red_w '
                                           || cd_unid_med_dose_red_w
                                           || ' qt_dose_red_w '
                                           || qt_dose_red_w
                                           || ' ds_dose_diferenciada_red_w '
                                           || ds_dose_diferenciada_red_w
                                           || ' qt_solucao_red_w:'
                                           || qt_solucao_red_w
                                           || ' nr_seq_componente_princ_w:'
                                           || nr_seq_componente_princ_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_comp1_w IS NOT NULL AND cd_mat_comp1_w::text <> '') THEN
                    gerar_componente_solucao(cd_mat_comp1_w, cd_unid_med_dose_comp1_w, qt_dose_comp1_w, 4,
                                            ds_dose_diferenciada_comp1_w,
                                            'N',
                                            NULL,
                                            NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MCOMP1'),
                                            qt_dose_correcao2_w,
                                            ie_paciente_comp1_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP1:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_comp1_w '
                                           || cd_mat_comp1_w
                                           || ' cd_unid_med_dose_comp1_w '
                                           || cd_unid_med_dose_comp1_w
                                           || ' qt_dose_comp1_w '
                                           || qt_dose_comp1_w
                                           || ' ds_dose_diferenciada_comp1_w '
                                           || ds_dose_diferenciada_comp1_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

			BEGIN
                IF (cd_mat_recons1_w IS NOT NULL AND cd_mat_recons1_w::text <> '') THEN
                    gerar_componente_solucao(cd_material_p => cd_mat_recons1_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_recons1_w,
                                            qt_dose_p => qt_dose_recons1_w,
                                            ie_agrupador_p => 9,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_rec1_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => NULL,
                                            nr_seq_diluicao_p => nr_seq_material_w,
                                            ds_observacao_p => NULL);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RECONS1: '
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p: '
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p: '
                                           || nr_prescricao_p
                                           || ' cd_mat_recons1_w: '
                                           || cd_mat_recons1_w
                                           || ' cd_unid_med_dose_recons1_w: '
                                           || cd_unid_med_dose_recons1_w
                                           || ' qt_dose_recons1_w: '
                                           || qt_dose_recons1_w
                                           || ' ds_dose_diferenciada_rec1_w: '
                                           || ds_dose_diferenciada_rec1_w
                                           || ' nr_seq_material_w: '
                                           || nr_seq_material_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_comp2_w IS NOT NULL AND cd_mat_comp2_w::text <> '') THEN
                    gerar_componente_solucao(cd_mat_comp2_w, cd_unid_med_dose_comp2_w, qt_dose_comp2_w, 4,
                                            ds_dose_diferenciada_comp2_w,
                                            'N',
                                            NULL,
                                            NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MCOMP2'),
                                            qt_dose_correcao3_w,
                                            ie_paciente_comp2_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP2:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_comp2_w '
                                           || cd_mat_comp2_w
                                           || ' cd_unid_med_dose_comp2_w '
                                           || cd_unid_med_dose_comp2_w
                                           || ' qt_dose_comp2_w '
                                           || qt_dose_comp2_w
                                           || ' ds_dose_diferenciada_comp2_w '
                                           || ds_dose_diferenciada_comp2_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

			BEGIN
                IF (cd_mat_recons2_w IS NOT NULL AND cd_mat_recons2_w::text <> '') THEN
                    gerar_componente_solucao(cd_material_p => cd_mat_recons2_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_recons2_w,
                                            qt_dose_p => qt_dose_recons2_w,
                                            ie_agrupador_p => 9,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_rec2_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => NULL,
                                            nr_seq_diluicao_p => nr_seq_material_w,
                                            ds_observacao_p => NULL);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RECONS2: '
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p: '
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p: '
                                           || nr_prescricao_p
                                           || ' cd_mat_recons2_w: '
                                           || cd_mat_recons2_w
                                           || ' cd_unid_med_dose_recons2_w: '
                                           || cd_unid_med_dose_recons2_w
                                           || ' qt_dose_recons2_w: '
                                           || qt_dose_recons2_w
                                           || ' ds_dose_diferenciada_rec2_w: '
                                           || ds_dose_diferenciada_rec2_w
                                           || ' nr_seq_material_w: '
                                           || nr_seq_material_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_comp3_w IS NOT NULL AND cd_mat_comp3_w::text <> '') THEN
                    gerar_componente_solucao(cd_mat_comp3_w, cd_unid_med_dose_comp3_w, qt_dose_comp3_w, 4,
                                            ds_dose_diferenciada_comp3_w,
                                            'N',
                                            NULL,
                                            NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MCOMP3'),
                                            qt_dose_correcao4_w,
                                            ie_paciente_comp3_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP3:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_comp3_w '
                                           || cd_mat_comp3_w
                                           || ' cd_unid_med_dose_comp3_w '
                                           || cd_unid_med_dose_comp3_w
                                           || ' qt_dose_comp3_w '
                                           || qt_dose_comp3_w
                                           || ' ds_dose_diferenciada_comp3_w '
                                           || ds_dose_diferenciada_comp3_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

			BEGIN
                IF (cd_mat_recons3_w IS NOT NULL AND cd_mat_recons3_w::text <> '') THEN
                    gerar_componente_solucao(cd_material_p => cd_mat_recons3_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_recons3_w,
                                            qt_dose_p => qt_dose_recons3_w,
                                            ie_agrupador_p => 9,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_rec3_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => NULL,
                                            nr_seq_diluicao_p => nr_seq_material_w,
                                            ds_observacao_p => NULL);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RECONS3: '
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p: '
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p: '
                                           || nr_prescricao_p
                                           || ' cd_mat_recons3_w: '
                                           || cd_mat_recons3_w
                                           || ' cd_unid_med_dose_recons3_w: '
                                           || cd_unid_med_dose_recons3_w
                                           || ' qt_dose_recons3_w: '
                                           || qt_dose_recons3_w
                                           || ' ds_dose_diferenciada_rec3_w: '
                                           || ds_dose_diferenciada_rec3_w
                                           || ' nr_seq_material_w: '
                                           || nr_seq_material_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_comp4_w IS NOT NULL AND cd_mat_comp4_w::text <> '') THEN
                    gerar_componente_solucao(cd_mat_comp4_w, cd_unid_med_dose_comp4_w, qt_dose_comp4_w, 4,
                                            ds_dose_diferenciada_comp4_w,
                                            'N',
                                            NULL,
                                            NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MCOMP4'),
                                            qt_dose_correcao5_w,
                                            ie_paciente_comp4_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP4:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_comp4_w '
                                           || cd_mat_comp4_w
                                           || ' cd_unid_med_dose_comp4_w '
                                           || cd_unid_med_dose_comp4_w
                                           || ' qt_dose_comp4_w '
                                           || qt_dose_comp4_w
                                           || ' ds_dose_diferenciada_comp4_w '
                                           || ds_dose_diferenciada_comp4_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

			BEGIN
                IF (cd_mat_recons4_w IS NOT NULL AND cd_mat_recons4_w::text <> '') THEN
                    gerar_componente_solucao(cd_material_p => cd_mat_recons4_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_recons4_w,
                                            qt_dose_p => qt_dose_recons4_w,
                                            ie_agrupador_p => 9,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_rec4_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => NULL,
                                            nr_seq_diluicao_p => nr_seq_material_w,
                                            ds_observacao_p => NULL);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RECONS4: '
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p: '
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p: '
                                           || nr_prescricao_p
                                           || ' cd_mat_recons4_w: '
                                           || cd_mat_recons4_w
                                           || ' cd_unid_med_dose_recons4_w: '
                                           || cd_unid_med_dose_recons4_w
                                           || ' qt_dose_recons4_w: '
                                           || qt_dose_recons4_w
                                           || ' ds_dose_diferenciada_rec4_w: '
                                           || ds_dose_diferenciada_rec4_w
                                           || ' nr_seq_material_w: '
                                           || nr_seq_material_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_comp5_w IS NOT NULL AND cd_mat_comp5_w::text <> '') THEN
                    gerar_componente_solucao(cd_mat_comp5_w, cd_unid_med_dose_comp5_w, qt_dose_comp5_w, 4,
                                            ds_dose_diferenciada_comp5_w,
                                            'N',
                                            NULL,
                                            NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MCOMP5'),
                                            qt_dose_correcao6_w,
                                            ie_paciente_comp5_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP5:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_comp5_w '
                                           || cd_mat_comp5_w
                                           || ' cd_unid_med_dose_comp5_w '
                                           || cd_unid_med_dose_comp5_w
                                           || ' qt_dose_comp5_w '
                                           || qt_dose_comp5_w
                                           || ' ds_dose_diferenciada_comp5_w '
                                           || ds_dose_diferenciada_comp5_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

			BEGIN
                IF (cd_mat_recons5_w IS NOT NULL AND cd_mat_recons5_w::text <> '') THEN
                    gerar_componente_solucao(cd_material_p => cd_mat_recons5_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_recons5_w,
                                            qt_dose_p => qt_dose_recons5_w,
                                            ie_agrupador_p => 9,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_rec5_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => NULL,
                                            nr_seq_diluicao_p => nr_seq_material_w,
                                            ds_observacao_p => NULL);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RECONS5: '
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p: '
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p: '
                                           || nr_prescricao_p
                                           || ' cd_mat_recons5_w: '
                                           || cd_mat_recons5_w
                                           || ' cd_unid_med_dose_recons5_w: '
                                           || cd_unid_med_dose_recons5_w
                                           || ' qt_dose_recons5_w: '
                                           || qt_dose_recons5_w
                                           || ' ds_dose_diferenciada_rec5_w: '
                                           || ds_dose_diferenciada_rec5_w
                                           || ' nr_seq_material_w: '
                                           || nr_seq_material_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_comp6_w IS NOT NULL AND cd_mat_comp6_w::text <> '') THEN
                    gerar_componente_solucao(cd_mat_comp6_w, cd_unid_med_dose_comp6_w, qt_dose_comp6_w, 4,
                                            ds_dose_diferenciada_comp6_w,
                                            'N',
                                            NULL,
                                            NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MCOMP6'),
                                            qt_dose_correcao7_w,
                                            ie_paciente_comp6_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP6:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_comp6_w '
                                           || cd_mat_comp6_w
                                           || ' cd_unid_med_dose_comp6_w '
                                           || cd_unid_med_dose_comp6_w
                                           || ' qt_dose_comp6_w '
                                           || qt_dose_comp6_w
                                           || ' ds_dose_diferenciada_comp6_w '
                                           || ds_dose_diferenciada_comp6_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

			BEGIN
                IF (cd_mat_recons6_w IS NOT NULL AND cd_mat_recons6_w::text <> '') THEN
                    gerar_componente_solucao(cd_material_p => cd_mat_recons6_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_recons6_w,
                                            qt_dose_p => qt_dose_recons6_w,
                                            ie_agrupador_p => 9,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_rec6_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => NULL,
                                            nr_seq_diluicao_p => nr_seq_material_w,
                                            ds_observacao_p => NULL);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RECONS6: '
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p: '
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p: '
                                           || nr_prescricao_p
                                           || ' cd_mat_recons6_w: '
                                           || cd_mat_recons6_w
                                           || ' cd_unid_med_dose_recons6_w: '
                                           || cd_unid_med_dose_recons6_w
                                           || ' qt_dose_recons6_w: '
                                           || qt_dose_recons6_w
                                           || ' ds_dose_diferenciada_rec6_w: '
                                           || ds_dose_diferenciada_rec6_w
                                           || ' nr_seq_material_w: '
                                           || nr_seq_material_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF (cd_mat_comp7_w IS NOT NULL AND cd_mat_comp7_w::text <> '') THEN
                    gerar_componente_solucao(cd_mat_comp7_w, cd_unid_med_dose_comp7_w, qt_dose_comp7_w, 4,
                                            ds_dose_diferenciada_comp7_w,
                                            'N',
                                            NULL,
                                            NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MCOMP7'),
                                            qt_dose_correcao8_w,
                                            ie_paciente_comp7_w);

                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP7:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_comp6_w '
                                           || cd_mat_comp7_w
                                           || ' cd_unid_med_dose_comp7_w '
                                           || cd_unid_med_dose_comp7_w
                                           || ' qt_dose_comp7_w '
                                           || qt_dose_comp7_w
                                           || ' ds_dose_diferenciada_comp7_w '
                                           || ds_dose_diferenciada_comp7_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

			BEGIN
                IF (cd_mat_recons7_w IS NOT NULL AND cd_mat_recons7_w::text <> '') THEN
                    gerar_componente_solucao(cd_material_p => cd_mat_recons7_w,
                                            cd_unidade_medida_dose_p => cd_unid_med_dose_recons7_w,
                                            qt_dose_p => qt_dose_recons7_w,
                                            ie_agrupador_p => 9,
                                            ds_dose_diferenciada_p => ds_dose_diferenciada_rec7_w,
                                            ie_diluente_p => 'S',
                                            qt_solucao_p => NULL,
                                            nr_seq_diluicao_p => nr_seq_material_w,
                                            ds_observacao_p => NULL);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO RECONS7: '
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p: '
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p: '
                                           || nr_prescricao_p
                                           || ' cd_mat_recons7_w: '
                                           || cd_mat_recons7_w
                                           || ' cd_unid_med_dose_recons7_w: '
                                           || cd_unid_med_dose_recons7_w
                                           || ' qt_dose_recons7_w: '
                                           || qt_dose_recons7_w
                                           || ' ds_dose_diferenciada_rec7_w: '
                                           || ds_dose_diferenciada_rec7_w
                                           || ' nr_seq_material_w: '
                                           || nr_seq_material_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                FOR c004_w IN c004 LOOP
                    cd_mat_comp_w := c004_w.cd_material;
                    cd_unid_med_dose_comp_w := c004_w.cd_unidade_medida;
                    qt_dose_comp_w := c004_w.qt_dose;
                    gerar_componente_solucao(cd_mat_comp_w, cd_unid_med_dose_comp_w, qt_dose_comp_w, 4, '',
                                            'N', NULL, NULL,
                                            obter_observacao_interacao(nr_sequencia_p, 'MCOMP'),
                                            NULL,
                                            NULL);

                END LOOP;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' cd_mat_comp_w '
                                           || cd_mat_comp_w
                                           || ' cd_unid_med_dose_comp_w '
                                           || cd_unid_med_dose_comp_w
                                           || ' qt_dose_comp_w '
                                           || qt_dose_comp_w
                                           || ' ds_dose_diferenciada_comp_w '
                                           || '',
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF ( ie_esquema_alternado_w = 'S' ) THEN
                    qt_hora_fase_diferenciada_w := replace(qt_hora_fase_diferenciada_w, '#', '-');
                    cpoe_gerar_esquema_alternado(nr_prescricao_p, nr_seq_solucao_w, qt_hora_fase_diferenciada_w,
                                                qt_dosagem_diferenciada_w);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION GERAR_COMPONENTE_SOLUCAO COMP7:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_p'
                                           || nr_sequencia_p
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p
                                           || ' nr_seq_solucao_w '
                                           || nr_seq_solucao_w
                                           || ' qt_hora_fase_diferenciada_w '
                                           || qt_hora_fase_diferenciada_w
                                           || ' qt_dosagem_diferenciada_w '
                                           || qt_dosagem_diferenciada_w,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            BEGIN
                IF ( ie_trev_w = 'S' ) THEN
                    CALL cpoe_insert_trev_reg(nr_sequencia_w, nr_prescricao_p);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    CALL gravar_log_cpoe(substr('CPOE_INSERT_TREV_REG EXCEPTION:'
                                           || substr(to_char(sqlerrm), 1, 2000)
                                           || ' nr_sequencia_w'
                                           || nr_sequencia_w
                                           || ' nr_prescricao_p '
                                           || nr_prescricao_p,
                                          1,
                                          2000),
                                   nr_atendimento_p,
                                   'M',
                                   nr_sequencia_p);
            END;

            ie_tipo_dosagem_w := NULL;
            IF (ie_tipo_dosagem_w IS NOT NULL AND ie_tipo_dosagem_w::text <> '')
                AND ( upper(ie_tipo_dosagem_w) <> 'ACM' )
                AND ( ( coalesce(qt_dosagem_w::text, '') = '' ) OR ( coalesce(qt_solucao_total_w::text, '') = '' ) OR ( qt_solucao_total_w = 0 ) )
            THEN
                BEGIN
                    IF ( coalesce(qt_dosagem_w::text, '') = '' )
                        AND (qt_solucao_total_w IS NOT NULL AND qt_solucao_total_w::text <> '')
                    THEN
                        qt_campo_w := 1;
                    ELSIF (qt_dosagem_w IS NOT NULL AND qt_dosagem_w::text <> '')
                        AND ( coalesce(qt_solucao_total_w::text, '') = '' )
                    THEN
                        qt_campo_w := 2;
                    END IF;

                    BEGIN
                        vl_retorno_w := calcular_volume_total_solucao(upper(ie_tipo_dosagem_w), qt_tempo_aplicacao_w, qt_solucao_total_w, qt_dosagem_w, nr_prescricao_p, nr_seq_solucao_w, qt_campo_w, vl_retorno_w, 'N', nr_etapas_w, qt_hora_fase_w);

                    EXCEPTION
                        WHEN OTHERS THEN
                            CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION CALCULAR_VOLUME_TOTAL_SOLUCAO:'
                                                   || substr(to_char(sqlerrm), 1, 2000)
                                                   || ' nr_sequencia_p'
                                                   || nr_sequencia_p
                                                   || ' nr_prescricao_p '
                                                   || nr_prescricao_p
                                                   || ' qt_tempo_aplicacao_w'
                                                   || qt_tempo_aplicacao_w
                                                   || ' qt_solucao_total_w'
                                                   || qt_solucao_total_w
                                                   || ' qt_dosagem_w'
                                                   || qt_dosagem_w
                                                   || ' nr_seq_solucao_w'
                                                   || nr_seq_solucao_w
                                                   || ' iqt_campo_w'
                                                   || qt_campo_w
                                                   || ' vl_retorno_w'
                                                   || vl_retorno_w
                                                   || ' nr_etapas_w'
                                                   || nr_etapas_w
                                                   || ' qt_hora_fase_w'
                                                   || qt_hora_fase_w,
                                                  1,
                                                  2000),
                                           nr_atendimento_p,
                                           'M',
                                           nr_sequencia_p);
                    END;

                    UPDATE prescr_solucao
                    SET
                        qt_solucao_total = vl_retorno_w
                    WHERE
                            nr_prescricao = nr_prescricao_p
                        AND nr_seq_solucao = nr_seq_solucao_w;

                END;
            ELSE
                BEGIN
                    BEGIN
                        BEGIN
                            SELECT * FROM calcular_valores_solucao(nr_prescricao_p, nr_seq_solucao_w, qt_dosagem_w, ie_tipo_dosagem_w, 'S', 'N', 'N', 'N', nm_usuario_p, qt_tempo_aplicacao_w, qt_volume_solucao_w, nr_etapas_solucao_w, qt_tempo_total_w, 'N') INTO STRICT qt_volume_solucao_w, nr_etapas_solucao_w, qt_tempo_total_w;
                        EXCEPTION
                            WHEN OTHERS THEN
                                CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION CALCULAR_VALORES_SOLUCAO:'
                                                       || substr(to_char(sqlerrm), 1, 2000)
                                                       || 'nr_prescricao_p:'
                                                       || nr_prescricao_p
                                                       || 'nr_seq_solucao_w:'
                                                       || nr_seq_solucao_w
                                                       || 'qt_dosagem_w:'
                                                       || qt_dosagem_w
                                                       || 'ie_tipo_dosagem_w:'
                                                       || ie_tipo_dosagem_w
                                                       || 'qt_tempo_aplicacao_w:'
                                                       || qt_tempo_aplicacao_w
                                                       || 'qt_volume_solucao_w:'
                                                       || qt_volume_solucao_w
                                                       || 'nr_etapas_solucao_w:'
                                                       || nr_etapas_solucao_w
                                                       || 'qt_tempo_total_w:'
                                                       || qt_tempo_total_w,
                                                      1,
                                                      2000),
                                               nr_atendimento_p,
                                               'M',
                                               nr_sequencia_p);
                        END;

                        IF ( coalesce(nr_etapas_solucao_w, 0) > 0 ) THEN
                            UPDATE prescr_solucao
                            SET
                                nr_etapas = nr_etapas_solucao_w,
                                cd_intervalo = (
                                    SELECT
                                        MAX(a.cd_intervalo)
                                    FROM
                                        intervalo_prescricao a
                                    WHERE
                                            a.nr_etapas = nr_etapas_solucao_w
                                        AND coalesce(a.ie_situacao, 'A') = 'A'
                                        AND obter_se_intervalo(a.cd_intervalo, 15) = 'S'
                                        AND coalesce(obter_ocorrencia_intervalo(cd_intervalo_w, 24, 'O'), 1) = nr_etapas_solucao_w
                                        AND obter_se_interv_superior_24h(a.cd_intervalo, nm_usuario_p) = 'N'
                                        AND ( ( coalesce(a.cd_estabelecimento::text, '') = '' )
                                              OR ( a.cd_estabelecimento = cd_estabelecimento_p ) )
                                        AND obter_se_exibe_intervalo(nr_prescricao_p, a.cd_intervalo, NULL) = 'S'
                                )
                            WHERE
                                    nr_prescricao = nr_prescricao_p
                                AND nr_seq_solucao = nr_seq_solucao_w;

                        END IF;

                    EXCEPTION
                        WHEN OTHERS THEN
                            CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION UPDATE PRESCR_SOLUCAO:'
                                                   || substr(to_char(sqlerrm), 1, 2000)
                                                   || ' nr_sequencia_p'
                                                   || nr_sequencia_p
                                                   || ' nr_prescricao_p '
                                                   || nr_prescricao_p
                                                   || ' qt_tempo_aplicacao_w'
                                                   || qt_tempo_aplicacao_w
                                                   || ' ie_tipo_dosagem_w'
                                                   || ie_tipo_dosagem_w
                                                   || ' qt_dosagem_w'
                                                   || qt_dosagem_w
                                                   || ' nr_seq_solucao_w'
                                                   || nr_seq_solucao_w
                                                   || ' nr_etapas_solucao_w'
                                                   || nr_etapas_solucao_w,
                                                  1,
                                                  2000),
                                           nr_atendimento_p,
                                           'M',
                                           nr_sequencia_p);
                    END;

                END;
            END IF;

            IF (qt_horas_estabilidade_w IS NOT NULL AND qt_horas_estabilidade_w::text <> '') THEN
                UPDATE prescr_solucao
                SET
                    qt_horas_estabilidade = qt_horas_estabilidade_w
                WHERE
                        nr_prescricao = nr_prescricao_p
                    AND nr_seq_solucao = nr_seq_solucao_w;

            END IF;

            << proximo_item >> COMMIT;

  -- A rotina abaixo e utilizada pelo DELPHI
  --   Atualizar_dados_solucao( nr_prescricao_p, nr_seq_solucao_w, qt_volume_soma_w, 0, cd_perfil_p, cd_estabelecimento_p, nm_usuario_p );
  ----------- Fim rotinas  para apos geracao da solucao
        END;

    END LOOP;

    CLOSE c01;
EXCEPTION
    WHEN OTHERS THEN
        CALL gravar_log_cpoe(substr('CPOE_INSERT_SOLUCOES_REG EXCEPTION:'
                               || substr(to_char(sqlerrm), 1, 2000)
                               || 'nr_sequencia_p:'
                               || nr_sequencia_p
                               || 'nr_prescricao_p:'
                               || nr_prescricao_p
                               || 'nr_atendimento_p:'
                               || nr_atendimento_p
                               || 'cd_estabelecimento_p'
                               || cd_estabelecimento_p
                               || 'cd_perfil_p:'
                               || cd_perfil_p
                               || 'nm_usuario_p : '
                               || nm_usuario_p
                               || 'ie_origem_inf_p:'
                               || ie_origem_inf_p
                               || 'dt_inicio_prescr_p :'
                               || to_char(dt_inicio_prescr_p, 'dd/mm/yyyy hh24:mi:ss')
                               || 'dt_inicio_ret_p :'
                               || to_char(dt_inicio_ret_p, 'dd/mm/yyyy hh24:mi:ss'),
                              1,
                              2000),
                       nr_atendimento_p,
                       'M',
                       nr_sequencia_p);
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_insert_solucoes_reg (( nr_atendimento_p atendimento_paciente.nr_atendimento%TYPE, nr_prescricao_p prescr_medica.nr_prescricao%TYPE, nr_sequencia_p cpoe_material.nr_sequencia%TYPE, cd_estabelecimento_p estabelecimento.cd_estabelecimento%TYPE, cd_perfil_p perfil.cd_perfil%TYPE, nm_usuario_p usuario.nm_usuario%TYPE, ie_origem_inf_p prescr_medica.ie_origem_inf%TYPE, dt_inicio_prescr_p timestamp, dt_inicio_ret_p OUT timestamp, ie_copia_diaria_p CHAR DEFAULT 'N', ie_disp_semanal_p CHAR DEFAULT 'N' ) IS qt_dose_w cpoe_material.qt_dose%TYPE) FROM PUBLIC;

