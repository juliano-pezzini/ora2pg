-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_dados_lote_301 ( nr_seq_lote_p bigint, nr_seq_log_scheduler_p bigint, nm_usuario_p text) AS $body$
DECLARE

							
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
dt_inicio_ref_w			timestamp;
dt_fim_ref_w			timestamp;
cd_convenio_lote_w		convenio.cd_convenio%type;

/*Cursor dos arquivos gerados para o lote, para gerar o .AUF*/

c_arquivos_lote CURSOR(nr_seq_lote_pc	bigint) FOR
SELECT	nr_sequencia
from	d301_arquivo_envio
where	nr_seq_lote_envio = nr_seq_lote_pc;

c_atendimento_aufn CURSOR FOR
	SELECT	a.nr_atendimento,
		a.nr_seq_episodio,
		a.dt_entrada dt_referencia,
		b.cd_convenio
	from	atendimento_paciente a,
		atend_categoria_convenio b,
		episodio_paciente e
	where	not exists (SELECT	1
				from	d301_dataset_envio x,
					d301_arquivo_envio y
				where	x.nr_atendimento 	= a.nr_atendimento
				and	x.nr_seq_arquivo	= y.nr_sequencia
				and	y.cd_convenio		= b.cd_convenio
				and	x.ie_dataset('AUFN','PAUF'))
	and (a.dt_entrada >= trunc(dt_inicio_ref_w,'dd') or coalesce(dt_inicio_ref_w::text, '') = '')
	and (a.dt_entrada <= PKG_DATE_UTILS.end_of(dt_fim_ref_w,'DAY') or coalesce(dt_fim_ref_w::text, '') = '')	
	and	a.nr_atendimento	= b.nr_atendimento
	and (b.cd_convenio		= cd_convenio_lote_w or coalesce(cd_convenio_lote_w::text, '') = '')
	and	e.nr_sequencia	= a.nr_seq_episodio
	and	coalesce(e.dt_cancelamento::text, '') = ''
	and	(a.nr_seq_episodio IS NOT NULL AND a.nr_seq_episodio::text <> '');

c_atend_prev_alta_verl CURSOR FOR	
	SELECT	b.nr_sequencia,
		c.nr_seq_episodio,
		b.dt_liberacao dt_referencia,
		d.cd_convenio
	from	atendimento_paciente c,
		atend_previsao_alta b,
		atend_categoria_convenio d,
		episodio_paciente e
	where	b.nr_atendimento 	= c.nr_atendimento
	and	d.nr_atendimento	= c.nr_atendimento
	and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
	and	coalesce(b.dt_inativacao::text, '') = ''
	and	not exists (SELECT	1
				from	d301_dataset_envio x,
					d301_arquivo_envio y
				where	x.nr_seq_atend_prev_alta 	= b.nr_sequencia
				and	x.nr_seq_arquivo		= y.nr_sequencia
				and	y.cd_convenio			= d.cd_convenio
				and	x.ie_dataset('PVER','VERL'))
	and (b.DT_LIBERACAO >= trunc(dt_inicio_ref_w,'dd') or coalesce(dt_inicio_ref_w::text, '') = '')
	and (b.DT_LIBERACAO <= PKG_DATE_UTILS.end_of(dt_fim_ref_w,'DAY') or coalesce(dt_fim_ref_w::text, '') = '')
	and (d.cd_convenio	= cd_convenio_lote_w or coalesce(cd_convenio_lote_w::text, '') = '')
	and	e.nr_sequencia	= c.nr_seq_episodio
	and	coalesce(e.dt_cancelamento::text, '') = ''
	and	(c.nr_seq_episodio IS NOT NULL AND c.nr_seq_episodio::text <> '');

c_atendimento_entl CURSOR FOR
	SELECT	a.nr_atendimento,
		a.nr_seq_episodio,
		a.dt_alta dt_referencia,
		b.cd_convenio
	from	atendimento_paciente a,
		atend_categoria_convenio b,
		episodio_paciente e
	where	not exists (SELECT	1
				from	d301_dataset_envio x,
					d301_arquivo_envio y
				where	x.nr_atendimento 	= a.nr_atendimento
				and	x.nr_seq_arquivo	= y.nr_sequencia
				and	y.cd_convenio		= b.cd_convenio
				and	x.ie_dataset('ENTL','PENT'))
	and (a.dt_alta >= trunc(dt_inicio_ref_w,'dd') or coalesce(dt_inicio_ref_w::text, '') = '')
	and (a.dt_alta <= PKG_DATE_UTILS.end_of(dt_fim_ref_w,'DAY') or coalesce(dt_fim_ref_w::text, '') = '')
	and	a.ie_tipo_atendimento	=  '1'
	and	e.nr_sequencia		= a.nr_seq_episodio
	and	a.nr_atendimento	= b.nr_atendimento
	and (b.cd_convenio		= cd_convenio_lote_w or coalesce(cd_convenio_lote_w::text, '') = '')
	and	coalesce(e.dt_cancelamento::text, '') = ''	
	and	(a.nr_seq_episodio IS NOT NULL AND a.nr_seq_episodio::text <> '');
	
c_atend_prev_alta_just_mbeg CURSOR FOR
	SELECT	c.nr_sequencia,
		d.nr_seq_episodio,
		b.dt_liberacao dt_referencia,
		a.cd_convenio
	from	atendimento_paciente d,
		atend_prev_alta_just c,
		atend_previsao_alta b,
		atend_categoria_convenio a,
		episodio_paciente e
	where	b.nr_atendimento	= d.nr_atendimento
	and	b.nr_sequencia 		= c.nr_seq_atend_prev_alta
	and	a.nr_atendimento	= d.nr_atendimento
	and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
	and	(c.ds_justificativa IS NOT NULL AND c.ds_justificativa::text <> '')
	and	coalesce(c.dt_inativacao::text, '') = ''
	and	e.nr_sequencia		= d.nr_seq_episodio
	and	coalesce(e.dt_cancelamento::text, '') = ''
	and	not exists (SELECT	1
				from	d301_dataset_envio x,
					d301_arquivo_envio y
				where	x.nr_seq_atend_prev_alta = c.nr_sequencia
				and	x.nr_seq_arquivo	= y.nr_sequencia
				and	y.cd_convenio		= a.cd_convenio
				and	x.ie_dataset 		= 'MBEG')
	and (b.DT_LIBERACAO >= trunc(dt_inicio_ref_w,'dd') or coalesce(dt_inicio_ref_w::text, '') = '')
	and (b.DT_LIBERACAO <= PKG_DATE_UTILS.end_of(dt_fim_ref_w,'DAY') or coalesce(dt_fim_ref_w::text, '') = '')
	and (a.cd_convenio		= cd_convenio_lote_w or coalesce(cd_convenio_lote_w::text, '') = '')
	and	(d.nr_seq_episodio IS NOT NULL AND d.nr_seq_episodio::text <> '');
	
c_conta_rech CURSOR FOR
	SELECT	b.nr_interno_conta,
		a.nr_seq_episodio,
		b.dt_acerto_conta dt_referencia,
		b.cd_convenio_parametro cd_convenio
	from	conta_paciente b,
		atendimento_paciente a,
		episodio_paciente e
	where	a.nr_atendimento		= b.nr_atendimento
	and	b.ie_status_acerto 		= 2
	and	e.nr_sequencia			= a.nr_seq_episodio
	and	coalesce(e.dt_cancelamento::text, '') = ''
	and	not exists (SELECT	1
				from	d301_dataset_envio x,
					d301_arquivo_envio y
				where	x.nr_interno_conta 	= b.nr_interno_conta
				and	x.nr_seq_arquivo	= y.nr_sequencia
				and	y.cd_convenio		= b.cd_convenio_parametro
				and	x.ie_dataset('PREC','RECH'))
	and (b.dt_acerto_conta >= trunc(dt_inicio_ref_w,'dd') or coalesce(dt_inicio_ref_w::text, '') = '')
	and (b.dt_acerto_conta <= PKG_DATE_UTILS.end_of(dt_fim_ref_w,'DAY') or coalesce(dt_fim_ref_w::text, '') = '')
	and (b.cd_convenio_parametro = cd_convenio_lote_w or coalesce(cd_convenio_lote_w::text, '') = '')
	and	exists (select	1
			from	procedimento_paciente x
			where	x.nr_interno_conta	= b.nr_interno_conta
			and	coalesce(x.cd_motivo_exc_conta::text, '') = '')
	and	(a.nr_seq_episodio IS NOT NULL AND a.nr_seq_episodio::text <> '');
	
c_conta_ambo CURSOR FOR
	SELECT	b.nr_interno_conta,
		a.nr_seq_episodio,
		b.dt_acerto_conta dt_referencia,
		b.cd_convenio_parametro cd_convenio
	from	conta_paciente b,
		atendimento_paciente a,
		episodio_paciente e
	where	a.nr_atendimento		= b.nr_atendimento
	and	b.ie_status_acerto 		= 2
	and	e.nr_sequencia			= a.nr_seq_episodio
	and	coalesce(e.dt_cancelamento::text, '') = ''
	and	not exists (SELECT	1
				from	d301_dataset_envio x,
					d301_arquivo_envio y
				where	x.nr_interno_conta 	= b.nr_interno_conta
				and	x.nr_seq_arquivo	= y.nr_sequencia
				and	y.cd_convenio		= b.cd_convenio_parametro
				and	x.ie_dataset 		= 'AMBO')
	and (b.dt_acerto_conta >= trunc(dt_inicio_ref_w,'dd') or coalesce(dt_inicio_ref_w::text, '') = '')
	and (b.dt_acerto_conta <= PKG_DATE_UTILS.end_of(dt_fim_ref_w,'DAY') or coalesce(dt_fim_ref_w::text, '') = '')
	and (b.cd_convenio_parametro = cd_convenio_lote_w or coalesce(cd_convenio_lote_w::text, '') = '')
	and	(a.nr_seq_episodio IS NOT NULL AND a.nr_seq_episodio::text <> '');
	
ie_gerar_dataset_w	varchar(1);
	
BEGIN

update	d301_lote_envio
set	dt_inicio_geracao 	= clock_timestamp(),
	dt_fim_geracao 		 = NULL,
	dt_atualizacao 		= clock_timestamp(),
	nm_usuario 		= nm_usuario_p
where	nr_sequencia 		= nr_seq_lote_p;

delete 	from	d301_arquivo_envio
where	nr_seq_lote_envio	= nr_seq_lote_p;

select	a.cd_estabelecimento,
	coalesce(a.dt_inicio_ref,clock_timestamp()),
	a.dt_fim_ref,
	a.cd_convenio
into STRICT	cd_estabelecimento_w,
	dt_inicio_ref_w,
	dt_fim_ref_w,
	cd_convenio_lote_w
from	d301_lote_envio a
where	a.nr_sequencia = nr_seq_lote_p;

for	r_c_atendimento_aufn in c_atendimento_aufn loop
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_atendimento_aufn.nr_seq_episodio,r_c_atendimento_aufn.dt_referencia,'AUFN',r_c_atendimento_aufn.cd_convenio);
	
	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_aufn(nr_seq_lote_p,nr_seq_log_scheduler_p,r_c_atendimento_aufn.nr_atendimento,nm_usuario_p,r_c_atendimento_aufn.cd_convenio);
	end if;
	
	--Dataset PAUF - Convênios PKV
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_atendimento_aufn.nr_seq_episodio,r_c_atendimento_aufn.dt_referencia,'PAUF',r_c_atendimento_aufn.cd_convenio);	
	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_aufn(nr_seq_lote_p,nr_seq_log_scheduler_p,r_c_atendimento_aufn.nr_atendimento,nm_usuario_p,r_c_atendimento_aufn.cd_convenio);
	end if;
end loop;

for r_c_atend_prev_alta_verl in c_atend_prev_alta_verl loop
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_atend_prev_alta_verl.nr_seq_episodio,r_c_atend_prev_alta_verl.dt_referencia,'VERL', r_c_atend_prev_alta_verl.cd_convenio);

	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_verl(nr_seq_lote_p,nr_seq_log_scheduler_p,r_c_atend_prev_alta_verl.nr_sequencia,nm_usuario_p, r_c_atend_prev_alta_verl.cd_convenio);
	end if;
	
	--Dataset PVER - Convênios PKV
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_atend_prev_alta_verl.nr_seq_episodio,r_c_atend_prev_alta_verl.dt_referencia,'PVER', r_c_atend_prev_alta_verl.cd_convenio);
	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_verl(nr_seq_lote_p,nr_seq_log_scheduler_p,r_c_atend_prev_alta_verl.nr_sequencia,nm_usuario_p, r_c_atend_prev_alta_verl.cd_convenio);
	end if;
end loop;

for r_c_atendimento_entl in c_atendimento_entl loop
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_atendimento_entl.nr_seq_episodio, r_c_atendimento_entl.dt_referencia, 'ENTL', r_c_atendimento_entl.cd_convenio );

	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_entl( nr_seq_lote_p, nr_seq_log_scheduler_p, r_c_atendimento_entl.nr_atendimento, nm_usuario_p, r_c_atendimento_entl.cd_convenio);
	end if;
	
	--Dataset PENT - Convênios PKV
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_atendimento_entl.nr_seq_episodio, r_c_atendimento_entl.dt_referencia, 'PENT', r_c_atendimento_entl.cd_convenio );
	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_entl( nr_seq_lote_p, nr_seq_log_scheduler_p, r_c_atendimento_entl.nr_atendimento, nm_usuario_p, r_c_atendimento_entl.cd_convenio);
	end if;
end loop;

for r_c_atend_prev_alta_just_mbeg in c_atend_prev_alta_just_mbeg loop
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_atend_prev_alta_just_mbeg.nr_seq_episodio,r_c_atend_prev_alta_just_mbeg.dt_referencia,'MBEG', r_c_atend_prev_alta_just_mbeg.cd_convenio);

	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_mbeg(nr_seq_lote_p,nr_seq_log_scheduler_p,r_c_atend_prev_alta_just_mbeg.nr_sequencia,nm_usuario_p, r_c_atend_prev_alta_just_mbeg.cd_convenio);
	end if;
end loop;

for r_c_conta_rech in c_conta_rech loop
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_conta_rech.nr_seq_episodio,r_c_conta_rech.dt_referencia,'RECH', r_c_conta_rech.cd_convenio);

	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_rech(nr_seq_lote_p,nr_seq_log_scheduler_p,r_c_conta_rech.nr_interno_conta,nm_usuario_p, r_c_conta_rech.cd_convenio);
	end if;
	
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_conta_rech.nr_seq_episodio,r_c_conta_rech.dt_referencia,'PREC', r_c_conta_rech.cd_convenio);

	--Dataset PREC - Convênios PKV
	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_rech(nr_seq_lote_p,nr_seq_log_scheduler_p,r_c_conta_rech.nr_interno_conta,nm_usuario_p, r_c_conta_rech.cd_convenio);
	end if;
end loop;

for r_c_conta_ambo in c_conta_ambo loop
	ie_gerar_dataset_w := obter_se_regra_geracao_301(r_c_conta_ambo.nr_seq_episodio,r_c_conta_ambo.dt_referencia,'AMBO', r_c_conta_ambo.cd_convenio);

	if (ie_gerar_dataset_w = 'S') then
		CALL gerar_dados_301_pck.gerar_dataset_ambo(nr_seq_lote_p,nr_seq_log_scheduler_p,r_c_conta_ambo.nr_interno_conta,nm_usuario_p, r_c_conta_ambo.cd_convenio);
	end if;
end loop;

commit;

/*Este cursor deve ser sempre o último, após gerar todos os dataset*/

for r_c_arquivos_lote in c_arquivos_lote(nr_seq_lote_p) loop

	CALL GERAR_D301_SEGMENTO_UNB(r_c_arquivos_lote.nr_sequencia,nm_usuario_p); --header do arquivo
	CALL GERAR_D301_SEGMENTO_UNZ(r_c_arquivos_lote.nr_sequencia,nm_usuario_p); --footer do arquivo
	CALL GERAR_D301_ARQUIVO_CONTEUDO(r_c_arquivos_lote.nr_sequencia,nm_usuario_p); --salva o clob do conteúdo do arquivo
	CALL GERAR_D301_ARQUIVO_AUF(r_c_arquivos_lote.nr_sequencia,nm_usuario_p); --arquivo .auf de cada arquivo
	
end loop;

update	d301_lote_envio
set	dt_fim_geracao 		= clock_timestamp()
where	nr_sequencia 		= nr_seq_lote_p;

CALL CONSISTIR_LOTE_301(nr_seq_lote_p,nm_usuario_p);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_dados_lote_301 ( nr_seq_lote_p bigint, nr_seq_log_scheduler_p bigint, nm_usuario_p text) FROM PUBLIC;

