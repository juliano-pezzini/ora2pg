-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_titulos_lote_evento (nr_seq_lote_p pls_lote_evento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


cd_cgc_w			varchar(14);
cd_pessoa_fisica_w		varchar(10);
ie_natureza_w			varchar(5);
vl_movimento_w			double precision;
nr_sequencia_w			bigint;
nr_novo_titulo_w		bigint;
nr_seq_prestador_w		bigint;
cd_tipo_taxa_juro_cp_w		bigint;
cd_tipo_taxa_multa_cp_w		bigint;
cd_tipo_taxa_juro_cr_w		bigint;
cd_tipo_taxa_multa_cr_w		bigint;
cd_tipo_portador_w		bigint;
cd_portador_w			bigint;
nr_seq_classe_titulo_w		bigint;
nr_seq_classe_tit_pagar_w	bigint;
nr_seq_regra_fixo_w		bigint;
nr_seq_trans_fin_baixa_w	bigint;
nr_seq_trans_fin_contab_w	bigint;
tx_juros_cp_w			double precision;
tx_multa_cp_w			double precision;
tx_juros_cr_w			double precision;
tx_multa_cr_w			double precision;
cd_moeda_cp_w			integer;
cd_moeda_cr_w			integer;
dt_movimento_w			timestamp;
nr_seq_conta_banco_w		bigint;
ie_bloqueto_w			varchar(1);
qt_dia_venc_w			bigint;
dt_competencia_w		timestamp;
tx_juros_pj_cr_w		double precision;
tx_multa_pj_cr_w		double precision;
nr_seq_classe_tit_eve_w		bigint;
ds_observacao_w			varchar(4000);
cd_pf_titulo_pagar_w		pls_evento_movimento.cd_pf_titulo_pagar%type;
cd_cgc_titulo_pagar_w		pls_evento_movimento.cd_cgc_titulo_pagar%type;
ie_titulo_pagar_w		varchar(1);
cd_conta_financ_cr_w		titulo_receber_classif.cd_conta_financ%type;
vl_classif_w			titulo_receber_classif.vl_original%type;
cd_centro_custo_w		pls_evento_movimento.cd_centro_custo%type;
cd_conta_debito_w		pls_evento_movimento.cd_conta_debito%type;
cd_historico_w			pls_evento_movimento.cd_historico%type;
nr_seq_evento_w			pls_evento.nr_sequencia%type;
nr_seq_carteira_cobr_rec_w	bigint;
nr_seq_trans_fin_contab_rec_w	bigint;
nr_seq_trans_fin_baixa_rec_w	bigint;
ds_observacao_rec_w		varchar(4000);
cd_prestador_w			pls_prestador.cd_prestador%type;
ie_data_emissao_geracao_w	varchar(1);
qt_dias_vencimento_w		bigint;
nr_seq_forma_cobranca_w		pls_prestador_rec.nr_seq_forma_cobranca%type;





-- S?rar t?lo onde o movimenta? for de t?lo
C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_prestador,
		coalesce(a.dt_venc_titulo,a.dt_movimento),
		abs(a.vl_movimento), -- Retorna o valor sempre sendo positivo
		b.ie_natureza,	-- D = Desconto,	P = Provento
		a.nr_seq_regra_fixo,
		nr_seq_classe_tit_rec,
		a.ds_observacao,
		a.cd_pf_titulo_pagar,
		a.cd_cgc_titulo_pagar,
		coalesce(a.ie_titulo_pagar, 'N'),
		a.nr_seq_trans_fin_baixa,
		a.nr_seq_trans_fin_contab,
		a.cd_centro_custo,
		a.cd_conta_debito,
		a.cd_historico,
		b.nr_sequencia
	from	pls_evento_movimento	a,
		pls_evento		b
	where	a.nr_seq_lote		= nr_seq_lote_p
	and	coalesce(a.vl_movimento,0)	!= 0 -- retorna todo valor que for diferente de zero, sendo positivo ou negativo
	and	a.ie_forma_pagto	= 'T'
	and	a.nr_seq_evento		= b.nr_sequencia
	and	coalesce(a.ie_cancelamento::text, '') = '';


BEGIN
begin
select	a.cd_moeda_padrao,
	a.cd_tipo_taxa_juro,
	a.cd_tipo_taxa_multa,
	a.pr_juro_padrao,
	a.pr_multa_padrao,
	a.pr_juro_pj,
	a.pr_multa_pj,
	a.cd_tipo_portador,
	a.cd_portador
into STRICT	cd_moeda_cr_w,
	cd_tipo_taxa_juro_cr_w,
	cd_tipo_taxa_multa_cr_w,
	tx_juros_cr_w,
	tx_multa_cr_w,
	tx_juros_pj_cr_w,
	tx_multa_pj_cr_w,
	cd_tipo_portador_w,
	cd_portador_w
from	parametro_contas_receber a
where	a.cd_estabelecimento	= cd_estabelecimento_p;
exception
	when no_data_found then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(184268);
end;
	
begin
select	a.cd_moeda_padrao,
	a.cd_tipo_taxa_juro,
	a.cd_tipo_taxa_multa,
	a.pr_juro_padrao,
	a.pr_multa_padrao
into STRICT	cd_moeda_cp_w,
	cd_tipo_taxa_juro_cp_w,
	cd_tipo_taxa_multa_cp_w,
	tx_juros_cp_w,
	tx_multa_cp_w
from	parametros_contas_pagar a
where	a.cd_estabelecimento	= cd_estabelecimento_p;
exception
	when no_data_found then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(184269);
end;

open C01;
loop
fetch C01 into	
	nr_sequencia_w,
	nr_seq_prestador_w,
	dt_movimento_w,
	vl_movimento_w,
	ie_natureza_w,
	nr_seq_regra_fixo_w,
	nr_seq_classe_tit_eve_w,
	ds_observacao_w,
	cd_pf_titulo_pagar_w,
	cd_cgc_titulo_pagar_w,
	ie_titulo_pagar_w,
	nr_seq_trans_fin_baixa_w,
	nr_seq_trans_fin_contab_w,
	cd_centro_custo_w,
	cd_conta_debito_w,
	cd_historico_w,
	nr_seq_evento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	max(cd_pessoa_fisica),
		max(cd_cgc),
		max(cd_prestador)
	into STRICT	cd_pessoa_fisica_w,
		cd_cgc_w,
		cd_prestador_w
	from	pls_prestador
	where	nr_sequencia = nr_seq_prestador_w;
	
	select	trunc(dt_competencia, 'month')
	into STRICT	dt_competencia_w
	from	pls_lote_evento
	where	nr_sequencia = nr_seq_lote_p;
	
	if (nr_seq_regra_fixo_w IS NOT NULL AND nr_seq_regra_fixo_w::text <> '') then

		select	max(a.nr_seq_classe_titulo),
			max(a.nr_seq_classe_tit_pagar),
			coalesce(nr_seq_trans_fin_baixa_w, max(a.nr_seq_trans_fin_baixa)),
			coalesce(nr_seq_trans_fin_contab_w, max(a.nr_seq_trans_fin_contab)),
			max(a.qt_dia_venc)
		into STRICT	nr_seq_classe_titulo_w,
			nr_seq_classe_tit_pagar_w,
			nr_seq_trans_fin_baixa_w,
			nr_seq_trans_fin_contab_w,
			qt_dia_venc_w
		from	pls_evento_regra_fixo a
		where	a.nr_sequencia	= nr_seq_regra_fixo_w;
	end if;

	if (qt_dia_venc_w IS NOT NULL AND qt_dia_venc_w::text <> '') and (qt_dia_venc_w > 0) and (qt_dia_venc_w < 31) then

		if (to_char(last_day(dt_competencia_w),'dd') < qt_dia_venc_w) then
			dt_movimento_w		:= to_date(to_char(last_day(dt_competencia_w),'dd') || '/' || to_char(dt_competencia_w,'mm/yyyy'));
		else
			dt_movimento_w		:= to_date(qt_dia_venc_w || '/' || to_char(dt_competencia_w,'mm/yyyy'));
		end if;

		if (trunc(dt_movimento_w,'dd') < trunc(clock_timestamp(),'dd')) then
			if (to_char(last_day(add_months(dt_competencia_w,1)), 'dd') < qt_dia_venc_w) then
				dt_movimento_w	:= add_months(to_date(to_char(last_day(add_months(dt_competencia_w,1)), 'dd') || '/' || to_char(dt_competencia_w,'mm/yyyy')),1);
			else
				dt_movimento_w	:= add_months(to_date(qt_dia_venc_w || '/' || to_char(dt_competencia_w,'mm/yyyy')),1);
			end if;
		end if;
	end if;

	if (ie_natureza_w = 'D') and (ie_titulo_pagar_w = 'N') then -- Desconto 	(Receber)
		if (coalesce(nr_seq_classe_titulo_w::text, '') = '') and (nr_seq_classe_tit_eve_w IS NOT NULL AND nr_seq_classe_tit_eve_w::text <> '') then
			nr_seq_classe_titulo_w := nr_seq_classe_tit_eve_w;
		end if;

		-- Obter dados de recebimento do prestador
		SELECT * FROM pls_obter_dados_prestador_rec(	nr_seq_prestador_w, nr_seq_classe_titulo_w, nr_seq_conta_banco_w, ie_bloqueto_w, nr_seq_carteira_cobr_rec_w, nr_seq_trans_fin_contab_rec_w, nr_seq_trans_fin_baixa_rec_w, ds_observacao_rec_w, ie_data_emissao_geracao_w, qt_dias_vencimento_w, nr_seq_forma_cobranca_w) INTO STRICT nr_seq_conta_banco_w, ie_bloqueto_w, nr_seq_carteira_cobr_rec_w, nr_seq_trans_fin_contab_rec_w, nr_seq_trans_fin_baixa_rec_w, ds_observacao_rec_w, ie_data_emissao_geracao_w, qt_dias_vencimento_w, nr_seq_forma_cobranca_w;


		if (coalesce(trim(both ds_observacao_rec_w)::text, '') = '') then
			ds_observacao_rec_w := 'C?rest: '||cd_prestador_w;
		end if;

		if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
			tx_juros_cr_w := tx_juros_pj_cr_w;
			tx_multa_cr_w := tx_multa_pj_cr_w;
		end if;

		insert into titulo_receber(
			nr_titulo,
			nm_usuario,
			dt_atualizacao,
			cd_estabelecimento,
			cd_tipo_portador,
			cd_portador,
			dt_emissao,
			dt_contabil,
			dt_vencimento,
			dt_pagamento_previsto,
			vl_titulo,
			vl_saldo_titulo,
			vl_saldo_juros,
			vl_saldo_multa,
			tx_juros,
			tx_multa,
			cd_tipo_taxa_juro,
			cd_tipo_taxa_multa,
			tx_desc_antecipacao,
			ie_tipo_titulo,
			ie_tipo_inclusao,
			ie_origem_titulo,
			cd_moeda,
			ie_situacao,
			cd_pessoa_fisica,
			cd_cgc,
			ie_tipo_emissao_titulo,
			nr_lote_contabil,
			ds_observacao_titulo,
			nr_seq_classe,
			nr_seq_trans_fin_baixa,
			nr_seq_trans_fin_contab,
			nr_seq_conta_banco,
			nr_seq_carteira_cobr
		) values (
			nextval('titulo_seq'),
			nm_usuario_p,
			clock_timestamp(),
			cd_estabelecimento_p,
			cd_tipo_portador_w,
			cd_portador_w,
			trunc(clock_timestamp(),'dd'),
			trunc(clock_timestamp(),'dd'),
			trunc(dt_movimento_w,'dd'),
			trunc(dt_movimento_w,'dd'),
			vl_movimento_w,
			vl_movimento_w,
			0,
			0,
			coalesce(tx_juros_cr_w,0),
			coalesce(tx_multa_cr_w,0),
			cd_tipo_taxa_juro_cr_w,
			cd_tipo_taxa_multa_cr_w,
			0,
			CASE WHEN nr_seq_forma_cobranca_w=2 THEN  '10'  ELSE '1' END , -- Bloqueto
			'2',
			'10', -- OPS - Ocorr?ia financeira 
			cd_moeda_cr_w,
			'1',
			cd_pessoa_fisica_w,
			cd_cgc_w,
			CASE WHEN coalesce(nr_seq_forma_cobranca_w,1)=2 THEN 1  ELSE '2' END , -- Emissao bloqueto origem
			0,
			coalesce(ds_observacao_w, coalesce(ds_observacao_rec_w,'T?lo gerado pela fun? OPS - Controle de Eventos e Ocorr?ias Financeiras')),
			nr_seq_classe_titulo_w,
			coalesce(nr_seq_trans_fin_baixa_w, nr_seq_trans_fin_baixa_rec_w),
			coalesce(nr_seq_trans_fin_contab_w, nr_seq_trans_fin_contab_rec_w),
			nr_seq_conta_banco_w,
			nr_seq_carteira_cobr_rec_w) returning nr_titulo into nr_novo_titulo_w;
			
		update	pls_evento_movimento
		set	nr_titulo_receber	= nr_novo_titulo_w
		where	nr_sequencia		= nr_sequencia_w;
		
		cd_conta_financ_cr_w := pls_obter_conta_financ_regra(	'TRP', null, cd_estabelecimento_p, null, null, null, null, nr_seq_prestador_w, null, null, null, nr_seq_evento_w, null, null, null, null, null, cd_conta_financ_cr_w);
						
		vl_classif_w := coalesce(vl_movimento_w,0);
			
		insert into titulo_receber_classif(nr_titulo,
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			cd_conta_financ,
			vl_original,
			vl_classificacao,
			vl_desconto,
			cd_centro_custo,
			cd_conta_contabil,
			cd_historico)
		values (nr_novo_titulo_w,
			1,
			nm_usuario_p,
			clock_timestamp(),
			cd_conta_financ_cr_w,
			vl_classif_w,
			vl_classif_w,
			0,
			cd_centro_custo_w,
			cd_conta_debito_w,
			cd_historico_w);
		
		-- Verifica se deve ser gerado n?mero do bloqueto para este prestador
		if (coalesce(ie_bloqueto_w,'N') = 'S') and (coalesce(nr_seq_forma_cobranca_w,0) <> 2)  then
			CALL gerar_bloqueto_tit_rec(nr_novo_titulo_w, 'OPSCEOF');
		end if;

	elsif (ie_natureza_w	= 'P') or (ie_titulo_pagar_w = 'S') then -- Provento 	(Pagar) 
			
		insert into titulo_pagar(nr_titulo,
			nm_usuario,
			dt_atualizacao,
			cd_estabelecimento,
			vl_titulo,
			vl_saldo_titulo,
			dt_emissao,
			dt_contabil,
			dt_vencimento_original,
			dt_vencimento_atual,
			vl_saldo_juros,
			vl_saldo_multa,
			cd_moeda,
			cd_tipo_taxa_juro,
			cd_tipo_taxa_multa,
			tx_juros,
			tx_multa,
			ie_origem_titulo,
			ie_tipo_titulo,
			ie_situacao,
			cd_pessoa_fisica,
			cd_cgc,
			ie_pls,
			nr_lote_contabil,
			ds_observacao_titulo,
			nr_seq_classe,
			nr_seq_trans_fin_baixa,
			nr_seq_trans_fin_contab)
		values (nextval('titulo_pagar_seq'),
			nm_usuario_p,
			clock_timestamp(),
			cd_estabelecimento_p,
			abs(vl_movimento_w),
			abs(vl_movimento_w),
			trunc(clock_timestamp(),'dd'),
			trunc(dt_movimento_w,'dd'),
			trunc(dt_movimento_w,'dd'),
			trunc(dt_movimento_w,'dd'),
			0,
			0,
			cd_moeda_cp_w,
			cd_tipo_taxa_juro_cp_w,
			cd_tipo_taxa_multa_cp_w,
			tx_juros_cp_w,
			tx_multa_cp_w,
			'18', -- OPS - Ocorr?ia financeira
			'23', -- Fatura 
			'A',
			CASE WHEN ie_titulo_pagar_w='S' THEN  coalesce(cd_pf_titulo_pagar_w,cd_pessoa_fisica_w)  ELSE cd_pessoa_fisica_w END ,
			CASE WHEN ie_titulo_pagar_w='S' THEN  coalesce(cd_cgc_titulo_pagar_w,cd_cgc_w)  ELSE cd_cgc_w END ,
			'S',
			0,
			coalesce(ds_observacao_w, 'T?lo gerado pela fun? OPS - Controle de Eventos e Ocorr?ias Financeiras'),
			nr_seq_classe_tit_pagar_w,
			nr_seq_trans_fin_baixa_w,
			nr_seq_trans_fin_contab_w) returning nr_titulo into nr_novo_titulo_w;

		CALL atualizar_inclusao_tit_pagar(nr_novo_titulo_w, nm_usuario_p);

		update	pls_evento_movimento
		set	nr_titulo_pagar	= nr_novo_titulo_w
		where	nr_sequencia	= nr_sequencia_w;	
	end if;
	end;
end loop;
close C01;

if (nr_novo_titulo_w IS NOT NULL AND nr_novo_titulo_w::text <> '') then
	update	pls_lote_evento
	set	dt_geracao_titulos	= clock_timestamp()
	where	nr_sequencia		= nr_seq_lote_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_titulos_lote_evento (nr_seq_lote_p pls_lote_evento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

