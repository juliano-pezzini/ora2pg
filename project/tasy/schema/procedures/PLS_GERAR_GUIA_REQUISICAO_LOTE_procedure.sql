-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_guia_requisicao_lote ( nr_seq_exec_lote_p bigint, nr_seq_segurado_p bigint, nr_seq_prestador_p bigint, nm_usuario_p text, ie_origem_p text, cd_estabelecimento_p bigint, nr_seq_usuario_web_p bigint, ie_validacao_digital_p bigint, nr_seq_maquina_p bigint, id_maquina_p text, ds_biometria_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar guia requisicao lote..
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ x]    Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
Pontos de atencao:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

				
/*  ie_origem_p
 E - Execucao da requisicao
 A - Analise de autorizacao
 L - Liberacao de execucao negada  
 EP - Execucao pelo portal do Plano de Saude ( nao precisa consistir a execucao pois no portal existe guias executadas diretamente)
W - WebService (nao consiste a execucao)

*/
cd_especialidade_w		integer;
cd_senha_w			varchar(20);
cd_senha_externa_w		varchar(50);
cd_medico_requisitante_w	bigint;
cd_procedimento_w		bigint;
cd_guia_principal_w		varchar(20);
ds_indicacao_clinica_w		varchar(4000);
dt_nasc_recem_nascido_w		timestamp;
dt_validade_senha_w		timestamp;
dt_valid_senha_ext_w		timestamp;
ie_tipo_gat_w			varchar(1);
ie_regime_internacao_w		varchar(1);
ie_tipo_atendimento_w		varchar(2);
ie_indicacao_acidente_w		varchar(1);
ie_unidade_tempo_w		varchar(2);
ie_carater_internacao_w		varchar(1);
ie_tipo_saida_w			varchar(1);
ie_tipo_consulta_w		smallint;
ie_recem_nascido_w		varchar(1);
ie_tipo_processo_w		varchar(1);
ie_origem_proced_w		bigint;
ie_tipo_guia_w			pls_requisicao.ie_tipo_guia%type;
ie_origem_solic_w		varchar(2) := 'M';
ie_situacao_w			varchar(2);
nr_seq_plano_w			bigint;
nr_seq_material_w		bigint;
nr_seq_req_proc_w		bigint;
nr_seq_req_mat_w		bigint;
nr_seq_guia_w			bigint;
nr_seq_requisicao_w		bigint;
nr_seq_execucao_w		bigint;
nm_recem_nascido_w		varchar(60);
nr_seq_prestador_solic_w	bigint;
nr_seq_clinica_w		bigint;
nr_seq_tipo_acomodacao_w	bigint;
nr_seq_preco_pacote_w		bigint;
nr_seq_exec_req_item_w		bigint;
nr_seq_ret_gest_pct_w		varchar(255);
nr_seq_guia_principal_w		bigint;
qt_item_w			pls_execucao_req_item.qt_item%type;
qt_tempo_w			bigint;
qt_dia_solicitado_w		smallint;
qt_dia_autorizado_w		smallint;
cd_medico_executor_w		varchar(10);
ie_cobran_prev_serv_w		varchar(2);
ds_observacao_w			varchar(4000);
cd_matricula_estipulante_w	varchar(30);
nr_seq_req_execucao_w		bigint;
cd_doenca_w			varchar(10);
ds_diagnostico_w		varchar(2000);
dt_diagnostico_w		timestamp;
ie_classificacao_w		varchar(1);
ie_tipo_doenca_w		varchar(1);
ie_tipo_intercambio_w		varchar(255);
qt_itens_aprov_w		bigint;
ie_historico_home_care_w	varchar(1);
ie_pcmso_w			varchar(2);
nr_seq_motivo_prorrogacao_w	bigint;
ie_consulta_urgencia_w		varchar(1);
nr_seq_pacote_w			bigint;
ie_tipo_anexo_w			pls_requisicao_proc.ie_tipo_anexo%type;
nr_seq_guia_plano_mat_w		pls_guia_plano_mat.nr_sequencia%type;
nr_seq_guia_plano_proc_w	pls_guia_plano_proc.nr_sequencia%type;
dt_internacao_sugerida_w	pls_requisicao.dt_internacao_sugerida%type;
nr_seq_cbo_saude_w		pls_requisicao.nr_seq_cbo_saude%type;
dt_entrada_hospital_w		pls_requisicao.dt_entrada_hospital%type;
cd_guia_prestador_w		pls_requisicao.cd_guia_prestador%type;
ie_cobranca_prevista_w		varchar(1);
nr_seq_material_forn_w		pls_requisicao_mat.nr_seq_material_forn%type;
vl_material_w			pls_requisicao_mat.vl_material%type;
nr_seq_prest_fornec_w		pls_requisicao_mat.nr_seq_prest_fornec%type;
ds_texto_w			varchar(4000) := 'X';
ds_tipo_atendimento_w		varchar(255);	
ie_tipo_atendimento_exec_w	varchar(2);
vl_procedimento_w		pls_guia_plano_proc.vl_procedimento%type;
nr_seq_regra_tipo_atend_w	pls_regra_tipo_consulta.nr_sequencia%type;
tipo_atend_lote_w		pls_itens_lote_execucao.ie_tipo_atendimento%type;
nr_seq_pacote_regra_w		pls_pacote.nr_sequencia%type;
nr_seq_item_tiss_w		pls_guia_plano_proc.nr_seq_item_tiss%type := 0;
ie_origem_execucao_w		pls_guia_plano.ie_origem_execucao%type;

ie_saude_ocupacional_w		pls_guia_plano.ie_saude_ocupacional%type;
ie_regime_atendimento_w		pls_guia_plano.ie_regime_atendimento%type;
ie_cobertura_especial_w		pls_guia_plano.ie_cobertura_especial%type;


C01 CURSOR FOR
	/*select	a.ie_tipo_guia,
		a.cd_medico_requisitante,
		nvl(a.ie_tipo_processo, 'M'),
		a.nr_seq_requisicao,
		a.nr_seq_execucao
	from	pls_execucao_req_item a,
		pls_execucao_requisicao b
	where	b.nr_sequencia 	   = a.nr_seq_execucao
	and	b.nr_seq_lote_exec = nr_seq_exec_lote_p
	and	a.nr_seq_guia is null
	and	a.ie_situacao in ('S','P','C')
	group by a.nr_seq_requisicao,
		 a.nr_seq_execucao,
		 a.ie_tipo_guia,
		 a.cd_medico_requisitante,
		 a.ie_tipo_processo;*/
		
	SELECT	a.ie_tipo_guia,
		a.cd_medico_requisitante,
		coalesce(a.ie_tipo_processo, 'M'),
		a.nr_seq_requisicao,
		a.nr_seq_execucao,
		a.nr_seq_pacote,
		a.ie_tipo_atendimento
	from	pls_execucao_req_item a
	where	a.nr_seq_execucao = nr_seq_req_execucao_w
	and	coalesce(a.nr_seq_guia::text, '') = ''
	and	a.ie_situacao in ('S','P','C')
	group by a.nr_seq_requisicao,
		 a.nr_seq_execucao,
		 a.ie_tipo_guia,
		 a.cd_medico_requisitante,
		 a.ie_tipo_processo,
		 a.nr_seq_pacote,
		 a.ie_tipo_atendimento;

C02 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_material,
		a.qt_item,
		a.nr_seq_req_proc,
		a.nr_seq_req_mat,
		a.nr_sequencia,
		a.ie_situacao,
		a.cd_medico_executor,
		a.ie_tipo_anexo,
		a.nr_seq_preco_pacote
	from	pls_execucao_req_item a
	where	a.nr_seq_execucao = nr_seq_req_execucao_w
	and	coalesce(a.nr_seq_guia::text, '') = ''
	and	a.ie_situacao in ('S','P','C')
	and	a.ie_tipo_guia 		= ie_tipo_guia_w
	and	a.nr_seq_requisicao = nr_seq_requisicao_w
	and (a.cd_medico_requisitante	= cd_medico_requisitante_w or coalesce(cd_medico_requisitante_w,0) = 0)	
	order by a.nr_sequencia;	
		

C03 CURSOR FOR
	SELECT 	nr_sequencia
	from	pls_execucao_requisicao
	where	nr_seq_lote_exec = nr_seq_exec_lote_p;
	
C04 CURSOR FOR
	SELECT	cd_doenca,
		ds_diagnostico,
		dt_diagnostico,
		ie_classificacao,
		ie_indicacao_acidente,
		ie_tipo_doenca,
		ie_unidade_tempo,
		qt_tempo
	from	pls_requisicao_diagnostico
	where	nr_seq_requisicao	= nr_seq_requisicao_w;

C05 CURSOR FOR
	SELECT	nr_seq_processo
	from	pls_req_liminar_judicial
	where	nr_seq_requisicao = nr_seq_requisicao_w;
	
BEGIN
if (ie_origem_p = 'E') then
	update	pls_execucao_requisicao
	set	dt_execucao = clock_timestamp()
	where	nr_seq_lote_exec = nr_seq_exec_lote_p;

	nr_seq_ret_gest_pct_w := pls_gestao_pacotes_execucao(nr_seq_exec_lote_p, nr_seq_prestador_p, nr_seq_segurado_p, cd_estabelecimento_p, nm_usuario_p, nr_seq_ret_gest_pct_w);
	if ((ie_validacao_digital_p IS NOT NULL AND ie_validacao_digital_p::text <> '') or (ds_biometria_p IS NOT NULL AND ds_biometria_p::text <> '')) then
		update	pls_execucao_requisicao
		set	ie_tipo_validacao_digital = ie_validacao_digital_p,
			ds_biometria = ds_biometria_p
		where	nr_seq_lote_exec = nr_seq_exec_lote_p;		
	end if;

	CALL pls_consistir_execucao_req(nr_seq_exec_lote_p, nr_seq_segurado_p, nr_seq_prestador_p, nm_usuario_p, cd_estabelecimento_p);
	
elsif (ie_origem_p = 'EP' or ie_origem_p = 'W') then
	update	pls_execucao_requisicao
	set	dt_execucao = clock_timestamp()
	where	nr_seq_lote_exec = nr_seq_exec_lote_p;
	
	nr_seq_ret_gest_pct_w := pls_gestao_pacotes_execucao(nr_seq_exec_lote_p, nr_seq_prestador_p, nr_seq_segurado_p, cd_estabelecimento_p, nm_usuario_p, nr_seq_ret_gest_pct_w);
	
	--Como nao e realizada a consistencia e necessario fazer este update para poder executar a requisicao
	update	pls_execucao_req_item
	set	ie_situacao	= 'S',
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_seq_execucao in (	SELECT	b.nr_sequencia
					from	pls_execucao_requisicao b
					where	b.nr_seq_lote_exec = nr_seq_exec_lote_p)
	and	ie_situacao	<> 'C';
	--OS 1621333 - Adicionado a restricao pela situacao diferente de 'C' pois caso a regra de preco do pacote estivesse marcado para excluir o item de origem da requisicao na execucao, a mesma nao ocorria uma vez que era feito update para sempre executar os itens.
end if;

--Update utilizado apos a consistencia da execucao, para liberar novamente os itens da requisicao para serem executados novamente, caso sua quantidade seja executada em varias guias 
update 	pls_requisicao_proc p
set	p.ie_estagio_execucao 	= 'L',
	p.dt_atualizacao	= clock_timestamp(),
	p.nm_usuario		= nm_usuario_p
where	exists (SELECT 1
		from	pls_execucao_req_item a,
			pls_execucao_requisicao b
		where	b.nr_sequencia 	   = a.nr_seq_execucao
		and	b.nr_seq_lote_exec = nr_seq_exec_lote_p
		and	a.nr_seq_req_proc  = p.nr_sequencia);

update 	pls_requisicao_mat m
set	m.ie_estagio_execucao 	= 'L',
	m.dt_atualizacao	= clock_timestamp(),
	m.nm_usuario		= nm_usuario_p
where	exists (SELECT 1
		from	pls_execucao_req_item a,
			pls_execucao_requisicao b
		where	b.nr_sequencia 	   = a.nr_seq_execucao
		and	b.nr_seq_lote_exec = nr_seq_exec_lote_p
		and	a.nr_seq_req_mat   = m.nr_sequencia);
		
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

			

if (nr_seq_usuario_web_p IS NOT NULL AND nr_seq_usuario_web_p::text <> '') then
	ie_origem_solic_w := 'P';
end if;

begin
	select	coalesce(ie_historico_home_care,'N')
	into STRICT	ie_historico_home_care_w
	from	pls_param_autorizacao
	where	cd_estabelecimento = cd_estabelecimento_p;
exception
when others then
	ie_historico_home_care_w := 'N';
end;


open C03;
loop
fetch C03 into
	nr_seq_req_execucao_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	open C01;
	loop
	fetch C01 into
		ie_tipo_guia_w,
		cd_medico_requisitante_w,
		ie_tipo_processo_w,
		nr_seq_requisicao_w,
		nr_seq_execucao_w,
		nr_seq_pacote_w,
		ie_tipo_atendimento_exec_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select	count(1)
		into STRICT	qt_itens_aprov_w
		from	pls_execucao_req_item a
		where	a.nr_seq_execucao = nr_seq_req_execucao_w
		and	coalesce(a.nr_seq_guia::text, '') = ''
		and	a.ie_situacao in ('S','P')
		and	not exists (	SELECT	1
					from	pls_pacote_tipo_acomodacao	x
					where	x.nr_sequencia			= a.nr_seq_preco_pacote
					and	x.ie_excluir_proc_pacote	= 'S'
					and	x.nr_seq_pacote			= nr_seq_pacote_w);
		
		if (qt_itens_aprov_w	> 0 and (pls_obter_se_itens_penden_exec(nr_seq_req_execucao_w) = 'S')) then
			nr_seq_plano_w := pls_obter_produto_benef(nr_seq_segurado_p, clock_timestamp());

			select	nextval('pls_guia_plano_seq')
			into STRICT	nr_seq_guia_w
			;
			
			begin
			select	cd_senha_externa,
				cd_senha,
				dt_valid_senha_ext,
				dt_validade_senha,
				ie_tipo_saida,
				ie_tipo_consulta,
				ie_recem_nascido,
				nm_recem_nascido,
				dt_nasc_recem_nascido,
				ie_carater_atendimento,
				ds_indicacao_clinica,
				nr_seq_prestador,
				cd_especialidade,
				ie_tipo_atendimento,
				nr_seq_clinica,
				ie_regime_internacao,
				nr_seq_tipo_acomodacao,
				coalesce(ie_tipo_gat,'N'),
				cd_guia_principal,
				nr_seq_guia_principal,
				ds_observacao,
				cd_matricula_estipulante,
				qt_dia_solicitado,
				qt_dia_autorizado,
				ie_tipo_intercambio,
				ie_pcmso,
				nr_seq_motivo_prorrogacao,
				ie_consulta_urgencia,
				dt_internacao_sugerida,
				nr_seq_cbo_saude,
				dt_entrada_hospital,
				cd_guia_prestador,
				ie_saude_ocupacional,
				ie_regime_atendimento, 
				ie_cobertura_especial
			into STRICT	cd_senha_externa_w,
				cd_senha_w,
				dt_valid_senha_ext_w,
				dt_validade_senha_w,
				ie_tipo_saida_w,
				ie_tipo_consulta_w,
				ie_recem_nascido_w,
				nm_recem_nascido_w,
				dt_nasc_recem_nascido_w,
				ie_carater_internacao_w,
				ds_indicacao_clinica_w,
				nr_seq_prestador_solic_w,
				cd_especialidade_w,
				ie_tipo_atendimento_w,
				nr_seq_clinica_w,
				ie_regime_internacao_w,
				nr_seq_tipo_acomodacao_w,
				ie_tipo_gat_w,
				cd_guia_principal_w,
				nr_seq_guia_principal_w,
				ds_observacao_w,
				cd_matricula_estipulante_w,
				qt_dia_solicitado_w,
				qt_dia_autorizado_w,
				ie_tipo_intercambio_w,
				ie_pcmso_w,
				nr_seq_motivo_prorrogacao_w,
				ie_consulta_urgencia_w,
				dt_internacao_sugerida_w,
				nr_seq_cbo_saude_w,
				dt_entrada_hospital_w,
				cd_guia_prestador_w,
				ie_saude_ocupacional_w, 
				ie_regime_atendimento_w, 
				ie_cobertura_especial_w
				
			from	pls_requisicao
			where	nr_sequencia	= nr_seq_requisicao_w;
			exception
			when others then
				cd_senha_externa_w		:= null;
				cd_senha_w			:= null;
				dt_valid_senha_ext_w		:= null;
				dt_validade_senha_w		:= null;
				ie_tipo_saida_w			:= null;
				ie_tipo_consulta_w		:= null;
				ie_recem_nascido_w		:= null;
				nm_recem_nascido_w		:= null;
				dt_nasc_recem_nascido_w	:= null;
				ie_saude_ocupacional_w	:= null;
				ie_regime_atendimento_w := null;
				ie_cobertura_especial_w := null;

			end;
			
			begin
				select 	ie_tipo_atendimento
				into STRICT	tipo_atend_lote_w
				from	pls_itens_lote_execucao
				where 	nr_seq_lote_exec = nr_seq_exec_lote_p;
				exception
			when others then
				tipo_atend_lote_w		:= null;
			end;
			
			if (coalesce(ie_tipo_consulta_w::text, '') = '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_regra_tipo_atend_w
				from	pls_regra_tipo_consulta
				where	ie_tipo_atendimento = coalesce(tipo_atend_lote_w, ie_tipo_atendimento_w)
				and	ie_situacao = 'A';
			elsif (tipo_atend_lote_w IS NOT NULL AND tipo_atend_lote_w::text <> '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_regra_tipo_atend_w
				from	pls_regra_tipo_consulta
				where	ie_tipo_atendimento = ie_tipo_atendimento_exec_w
				and	ie_situacao = 'A';
			end if;
			
			if (nr_seq_regra_tipo_atend_w IS NOT NULL AND nr_seq_regra_tipo_atend_w::text <> '') then
				select	ie_tipo_consulta
				into STRICT	ie_tipo_consulta_w
				from	pls_regra_tipo_consulta
				where	nr_sequencia = nr_seq_regra_tipo_atend_w;
			end if;

			select	CASE WHEN ie_origem_p='W' THEN  'W' WHEN ie_origem_p='EP' THEN  'P' WHEN ie_origem_p='A' THEN  'M' WHEN ie_origem_p='L' THEN  'M' WHEN ie_origem_p='E' THEN  'M'  ELSE 'M' END
			into STRICT	ie_origem_execucao_w
			;

			if (ie_origem_solic_w = 'P') then
				ie_origem_execucao_w := ie_origem_solic_w;
			end if;
			
			insert into pls_guia_plano(nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_segurado,
				ie_tipo_guia, ie_status, cd_estabelecimento,
				ie_tipo_processo, ie_situacao, cd_medico_solicitante,
				cd_guia, dt_solicitacao, nr_seq_plano,
				ie_estagio,nr_seq_prestador, nr_seq_prestador_web,
				cd_senha_externa, dt_valid_senha_ext, cd_senha,
				dt_validade_senha, ie_tipo_saida, ie_tipo_consulta,
				ie_recem_nascido, nm_recem_nascido, dt_nasc_recem_nascido,
				nm_usuario_atendimento, ie_carater_internacao, ds_indicacao_clinica,
				cd_especialidade, ie_tipo_atend_tiss, nr_seq_clinica,
				ie_regime_internacao, nr_seq_tipo_acomodacao, ie_tipo_gat,
				dt_autorizacao, nm_usuario_solic,ie_origem_solic,
				cd_guia_principal, ds_observacao, cd_matricula_estipulante,
				nr_seq_guia_principal, qt_dia_solicitado, qt_dia_autorizado,
				dt_emissao, ie_tipo_intercambio, ie_pcmso,
				nr_seq_motivo_prorrogacao, nr_seq_prest_solic, ie_consulta_urgencia,
				dt_internacao_sugerida, nr_seq_cbo_saude, dt_admissao_hosp,
				cd_guia_prestador, ie_origem_execucao, ie_saude_ocupacional,
				ie_regime_atendimento, ie_cobertura_especial)
			values (nr_seq_guia_w ,clock_timestamp(),nm_usuario_p,
				clock_timestamp(),nm_usuario_p,nr_seq_segurado_p,
				ie_tipo_guia_w,	'2',cd_estabelecimento_p,
				ie_tipo_processo_w,'U',cd_medico_requisitante_w,
				nr_seq_guia_w, clock_timestamp(), nr_seq_plano_w,
				7,nr_seq_prestador_p, nr_seq_usuario_web_p,
				cd_senha_externa_w, dt_valid_senha_ext_w, cd_senha_w,
				dt_validade_senha_w, ie_tipo_saida_w, ie_tipo_consulta_w,
				ie_recem_nascido_w, nm_recem_nascido_w, dt_nasc_recem_nascido_w,
				nm_usuario_p, ie_carater_internacao_w, ds_indicacao_clinica_w,
				cd_especialidade_w, coalesce(ie_tipo_atendimento_exec_w, ie_tipo_atendimento_w), nr_seq_clinica_w,
				ie_regime_internacao_w,	nr_seq_tipo_acomodacao_w, ie_tipo_gat_w,
				clock_timestamp(), nm_usuario_p,ie_origem_solic_w,
				cd_guia_principal_w, ds_observacao_w, cd_matricula_estipulante_w,
				nr_seq_guia_principal_w, qt_dia_solicitado_w, qt_dia_autorizado_w,
				clock_timestamp(), ie_tipo_intercambio_w, ie_pcmso_w,
				nr_seq_motivo_prorrogacao_w, nr_seq_prestador_solic_w, ie_consulta_urgencia_w,
				dt_internacao_sugerida_w, nr_seq_cbo_saude_w, dt_entrada_hospital_w,
				cd_guia_prestador_w, ie_origem_execucao_w, ie_saude_ocupacional_w, 
				ie_regime_atendimento_w, ie_cobertura_especial_w);
			
			for C05_w in C05 loop
				begin
					if (C05_w.nr_seq_processo IS NOT NULL AND C05_w.nr_seq_processo::text <> '') then
						CALL pls_inserir_liminar_requisicao(C05_w.nr_seq_processo, null, nr_seq_guia_w, nm_usuario_p);
					end if;
				end;
			end loop;
			
			-- OS 1196026
			if (ie_tipo_guia_w = '2') then
				ds_texto_w	:= 'X';
				
				select 	substr(obter_valor_dominio(1761, ie_tipo_atendimento_exec_w),1,255)	
				into STRICT	ds_tipo_atendimento_w
				;
				
				if (coalesce(ie_tipo_atendimento_w::text, '') = '') and (ie_tipo_atendimento_exec_w IS NOT NULL AND ie_tipo_atendimento_exec_w::text <> '') then				
					ds_texto_w	:= wheb_mensagem_pck.get_texto(1107419,'USUARIO=' || nm_usuario_p || ';' || 'DS_ATENDIMENTO=' || ds_tipo_atendimento_w);
				elsif (ie_tipo_atendimento_w IS NOT NULL AND ie_tipo_atendimento_w::text <> '') and (ie_tipo_atendimento_exec_w IS NOT NULL AND ie_tipo_atendimento_exec_w::text <> '') and (ie_tipo_atendimento_w <> ie_tipo_atendimento_exec_w) then
					ds_texto_w	:= wheb_mensagem_pck.get_texto(1107418,'USUARIO=' || nm_usuario_p || ';' || 'DS_ATENDIMENTO=' || ds_tipo_atendimento_w);
				end if;
								
				if (ds_texto_w <> 'X') then
					CALL pls_guia_gravar_historico(nr_seq_guia_w, 2, ds_texto_w, null, nm_usuario_p);					
					CALL pls_requisicao_gravar_hist(nr_seq_requisicao_w, 'L', ds_texto_w, null, nm_usuario_p);
				end if;
			end if;		
			
			open C04;
			loop
			fetch C04 into	
				cd_doenca_w,
				ds_diagnostico_w,
				dt_diagnostico_w,
				ie_classificacao_w,
				ie_indicacao_acidente_w,
				ie_tipo_doenca_w,
				ie_unidade_tempo_w,
				qt_tempo_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin
				insert	into pls_diagnostico(nr_sequencia, cd_doenca, ds_diagnostico,
					 dt_atualizacao, dt_atualizacao_nrec, ie_classificacao,
					 ie_indicacao_acidente, ie_tipo_doenca, nm_usuario,
					 nm_usuario_nrec, nr_seq_guia, ie_unidade_tempo,
					 qt_tempo)
				values (nextval('pls_diagnostico_seq'), cd_doenca_w, ds_diagnostico_w,
					 clock_timestamp(), clock_timestamp(), coalesce(ie_classificacao_w,'P'),
					 ie_indicacao_acidente_w, ie_tipo_doenca_w, nm_usuario_p,
					 nm_usuario_p, nr_seq_guia_w, ie_unidade_tempo_w,
					 qt_tempo_w);
				end;
			end loop;
			close C04;
			
			update	pls_execucao_requisicao
			set	ie_situacao	= 1,
				nr_seq_guia	= nr_seq_guia_w,
				dt_execucao	= clock_timestamp(),
				nr_seq_maquina  = nr_seq_maquina_p,
				id_maquina      = id_maquina_p
			where	nr_sequencia	= nr_seq_execucao_w;

			open C02;
			loop
			fetch C02 into
				cd_procedimento_w,
				ie_origem_proced_w,
				nr_seq_material_w,
				qt_item_w,
				nr_seq_req_proc_w,
				nr_seq_req_mat_w,
				nr_seq_exec_req_item_w,
				ie_situacao_w,
				cd_medico_executor_w,
				ie_tipo_anexo_w,
				nr_seq_preco_pacote_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				
				nr_seq_guia_plano_proc_w	:= null;
				nr_seq_guia_plano_mat_w		:= null;
				
				if (nr_seq_req_proc_w IS NOT NULL AND nr_seq_req_proc_w::text <> '') then
					select	coalesce(ie_cobranca_previa_servico,'N'),
						coalesce(ie_cobranca_prevista,'N'),
						vl_procedimento,
						nr_seq_pacote
					into STRICT	ie_cobran_prev_serv_w,
						ie_cobranca_prevista_w,
						vl_procedimento_w,
						nr_seq_pacote_regra_w
					from	pls_requisicao_proc
					where	nr_sequencia	= nr_seq_req_proc_w;
				elsif (nr_seq_req_mat_w IS NOT NULL AND nr_seq_req_mat_w::text <> '') then
					select	coalesce(ie_cobranca_previa_servico,'N'),
						coalesce(ie_cobranca_prevista,'N'),
						nr_seq_material_forn,
						vl_material,
						nr_seq_prest_fornec
					into STRICT	ie_cobran_prev_serv_w,
						ie_cobranca_prevista_w,
						nr_seq_material_forn_w,
						vl_material_w,
						nr_seq_prest_fornec_w
					from	pls_requisicao_mat
					where	nr_sequencia	= nr_seq_req_mat_w;
				end if;

				if (coalesce(cd_procedimento_w,0) <> 0) then
					if (ie_situacao_w	<> 'C') then
						
						select	nextval('pls_guia_plano_proc_seq')
						into STRICT	nr_seq_guia_plano_proc_w
						;
						
						nr_seq_item_tiss_w := nr_seq_item_tiss_w + 1;					
						
						insert into pls_guia_plano_proc(nr_sequencia, ie_status, cd_procedimento,
							ie_origem_proced, qt_solicitada, dt_atualizacao,
							nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
							qt_autorizada, nr_seq_guia, dt_liberacao,
							nm_usuario_liberacao, cd_medico_executor, ie_cobranca_previa_servico,
							ie_tipo_anexo, nr_seq_preco_pacote, ie_cobranca_prevista,
							vl_procedimento, nr_seq_item_tiss)
						values (nr_seq_guia_plano_proc_w, 'S', cd_procedimento_w,
							ie_origem_proced_w, qt_item_w, clock_timestamp(),
							nm_usuario_p, clock_timestamp(), nm_usuario_p,
							qt_item_w, nr_seq_guia_w, clock_timestamp(),
							nm_usuario_p, cd_medico_executor_w, ie_cobran_prev_serv_w,
							ie_tipo_anexo_w, nr_seq_preco_pacote_w, ie_cobranca_prevista_w,
							vl_procedimento_w, nr_seq_item_tiss_w);
					end if;
					
					update	pls_requisicao_proc
					set	nr_seq_guia		= nr_seq_guia_w,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp(),
						qt_proc_executado	= coalesce(qt_proc_executado,0) + qt_item_w
					where	nr_sequencia		= nr_seq_req_proc_w;

					if (nr_seq_pacote_regra_w IS NOT NULL AND nr_seq_pacote_regra_w::text <> '') then
						--	Atualizar a quantidade de execucao dos procedimentos vinculados ao pacote.
						update	pls_requisicao_proc
						set	nr_seq_guia		= nr_seq_guia_w,
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp(),
							qt_proc_executado	= coalesce(qt_proc_executado,0) + qt_item_w
						where	cd_pacote_item		= cd_procedimento_w
						and	ie_status		in ('P','S')
						and	nr_seq_requisicao	= (	SELECT	c.nr_seq_requisicao
											from	pls_requisicao_proc c
											where	c.nr_sequencia		= nr_seq_req_proc_w)
						and	exists(	select	1
								from	pls_pacote_tipo_acomodacao	x
								where	x.nr_sequencia			= nr_seq_preco_pacote_w
								and	coalesce(x.ie_abrir_exec_requisicao, 'N')	<> 'S'
								and	coalesce(x.ie_excluir_proc_pacote, 'N')	<> 'S'
								and	coalesce(x.ie_fecha_pacote_exec, 'N')	= 'S'
								and	coalesce(x.ie_situacao, 'I')			= 'A'
								and	((coalesce(x.dt_inicio_vigencia::text, '') = '')		or (x.dt_inicio_vigencia 	<= clock_timestamp()))
								and	((coalesce(x.dt_fim_vigencia::text, '') = '')		or (x.dt_fim_vigencia 		>= clock_timestamp()))
								and	x.nr_seq_pacote				= nr_seq_pacote_regra_w);

						--	Atualizar a quantidade de execucao dos materiais vinculados ao pacote.
						update	pls_requisicao_mat
						set	nr_seq_guia		= nr_seq_guia_w,
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp(),
							qt_mat_executado	= coalesce(qt_mat_executado,0) + qt_item_w
						where	cd_pacote_item		= cd_procedimento_w
						and	ie_status		in ('P','S')
						and	nr_seq_requisicao	= (	SELECT	c.nr_seq_requisicao
											from	pls_requisicao_proc c
											where	c.nr_sequencia		= nr_seq_req_proc_w)
						and	exists(	select	1
								from	pls_pacote_tipo_acomodacao	x
								where	x.nr_sequencia			= nr_seq_preco_pacote_w
								and	coalesce(x.ie_abrir_exec_requisicao, 'N')	<> 'S'
								and	coalesce(x.ie_excluir_proc_pacote, 'N')	<> 'S'
								and	coalesce(x.ie_fecha_pacote_exec, 'N')	= 'S'
								and	coalesce(x.ie_situacao, 'I')			= 'A'
								and	((coalesce(x.dt_inicio_vigencia::text, '') = '')		or (x.dt_inicio_vigencia 	<= clock_timestamp()))
								and	((coalesce(x.dt_fim_vigencia::text, '') = '')		or (x.dt_fim_vigencia 		>= clock_timestamp()))
								and	x.nr_seq_pacote				= nr_seq_pacote_regra_w);
					end if;
					
					update	pls_execucao_req_item
					set	nr_seq_guia	= nr_seq_guia_w
					where	nr_sequencia	= nr_seq_exec_req_item_w;
					--and	nr_seq_req_proc	= nr_seq_req_proc_w;

					--ds_lista_seq_req_proc_w := ds_lista_seq_req_proc_w || ' '||nr_seq_req_proc_w ||' ';
					
				elsif (coalesce(nr_seq_material_w,0) <> 0) then
				
					select	nextval('pls_guia_plano_mat_seq')
					into STRICT	nr_seq_guia_plano_mat_w
					;
					
					nr_seq_item_tiss_w := nr_seq_item_tiss_w + 1;	
					
					insert into pls_guia_plano_mat(nr_sequencia, ie_status, nr_seq_material,
						qt_solicitada, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, qt_autorizada,
						nr_seq_guia, dt_liberacao, nm_usuario_liberacao,
						cd_medico_executor, ie_cobranca_previa_servico, ie_tipo_anexo,
						nr_seq_preco_pacote, ie_cobranca_prevista, nr_seq_material_forn,
						vl_material, nr_seq_prest_fornec, nr_seq_item_tiss)
					values (nr_seq_guia_plano_mat_w, 'S', nr_seq_material_w,
						qt_item_w, clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, qt_item_w,
						nr_seq_guia_w, clock_timestamp(), nm_usuario_p,
						cd_medico_executor_w, ie_cobran_prev_serv_w,ie_tipo_anexo_w,
						nr_seq_preco_pacote_w, ie_cobranca_prevista_w, nr_seq_material_forn_w,
						vl_material_w, nr_seq_prest_fornec_w, nr_seq_item_tiss_w);

					update	pls_requisicao_mat
					set	nr_seq_guia		= nr_seq_guia_w,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp(),
						qt_mat_executado	= coalesce(qt_mat_executado,0) + qt_item_w
					where	nr_sequencia		= nr_seq_req_mat_w;

					update	pls_execucao_req_item
					set	nr_seq_guia	= nr_seq_guia_w
					where	nr_sequencia	= nr_seq_exec_req_item_w;
					--and	nr_seq_req_mat	= nr_seq_req_mat_w;					
				end if;
					
				--Gerar anexo na Guia gerada
				CALL pls_atualizar_anexo_execucao(	nr_seq_guia_w, nr_seq_requisicao_w, ie_tipo_anexo_w,
								nr_seq_guia_plano_proc_w, nr_seq_guia_plano_mat_w,
								nr_seq_req_proc_w, nr_seq_req_mat_w, nm_usuario_p);
				
				end;
			end loop;
			close C02;
			
			nr_seq_item_tiss_w := 0;
			--Inserido este update apos a inclusao dos itens por causa das triggers criadas para a validacao correta dos estagios da guia com os status dos itens.
			update	pls_guia_plano
			set	ie_status	= '1',
				ie_estagio	= 6
			where	nr_sequencia	= nr_seq_guia_w;
			
			CALL pls_gerar_tratamento_benef(nr_seq_requisicao_w,'E', nr_seq_exec_lote_p, nm_usuario_p);
			CALL pls_consiste_guia_complemento(nr_seq_guia_w, nr_seq_prestador_p, nr_seq_segurado_p, cd_estabelecimento_p, nm_usuario_p);			
			CALL pls_atualizar_conta_aut(nr_seq_guia_w, nm_usuario_p, cd_estabelecimento_p);
			CALL pls_gerar_cd_guia_regra(nr_seq_guia_w,nm_usuario_p);
			
			--Rotina utilizada para verificar se existe beneficiario sendo atendido no Home Care, caso exista e gravado as informacoes da guia na pasta Atendimentos externos na funcao Gestao de Home Care 
			if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
				
				if (ie_historico_home_care_w = '1') and (ie_tipo_guia_w = '1')then
					begin
						CALL hd_gerar_ated_ext_guia(nr_seq_guia_w,nm_usuario_p);
					exception
					when others then				
						nr_seq_guia_w := nr_seq_guia_w;
					end;
				elsif ( ie_historico_home_care_w = '2') and (coalesce(ie_consulta_urgencia_w,'N') = 'S') then
					begin	
						CALL hd_gerar_ated_ext_guia(nr_seq_guia_w,nm_usuario_p);
					exception
					when others then				
						nr_seq_guia_w := nr_seq_guia_w;
					end;
				elsif (ie_historico_home_care_w = '3') then
					begin
						CALL hd_gerar_ated_ext_guia(nr_seq_guia_w,nm_usuario_p);
					exception
					when others then				
						nr_seq_guia_w := nr_seq_guia_w;
					end;
				end if;
				--  OS 1151201 - Execucao liberada manualmente
				if (ie_origem_p = 'L') then
					ds_texto_w	:=  wheb_mensagem_pck.get_texto(1107417,'USUARIO=' || nm_usuario_p);
					CALL pls_guia_gravar_historico(nr_seq_guia_w, 2, ds_texto_w, null, nm_usuario_p);
				end if;
			end if;	
			
			--Tratamento realizado para a virada da Unimed Sao Jose do Rio Preto pois foi feito o cadastro de conversao errada, este update e feito pois na hora em que abre o pacote na execucao e inserido o nr_seq_requisicao no campo nr_seq_guia 
			update	pls_requisicao_proc
			set	nr_seq_guia		= nr_seq_guia_w,
				qt_proc_executado	= qt_procedimento
			where	nr_seq_guia		= nr_seq_requisicao_w
			and	nr_seq_requisicao	= nr_seq_requisicao_w;
			
			if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') and (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') and (ie_tipo_processo_w = 'I')  then
				CALL pls_atualiza_registro_inter(nr_seq_requisicao_w, nr_seq_guia_w);
			end if;
			
		end if;
		end;
	end loop;
	close C01;
	
	select	max(a.nr_seq_requisicao)
	into STRICT	nr_seq_requisicao_w
	from	pls_execucao_req_item a
	where	a.nr_seq_execucao = nr_seq_req_execucao_w;
	
	CALL pls_requisicao_gravar_hist(nr_seq_requisicao_w,'L', expressao_pck.obter_desc_expressao(961798), null, nm_usuario_p);
	
end loop;
close C03;

if (nr_seq_usuario_web_p IS NOT NULL AND nr_seq_usuario_web_p::text <> '') then
	CALL pls_gravar_log_acesso_portal( null, null, nr_seq_usuario_web_p,
				      null, null, null,
				      null, null, '36',
				      wheb_mensagem_pck.get_texto(1107402,'USUARIO=' || nm_usuario_p || ';' || 'EXECUCAO=' || nr_seq_req_execucao_w), expressao_pck.obter_desc_expressao(496717), 'N');
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_guia_requisicao_lote ( nr_seq_exec_lote_p bigint, nr_seq_segurado_p bigint, nr_seq_prestador_p bigint, nm_usuario_p text, ie_origem_p text, cd_estabelecimento_p bigint, nr_seq_usuario_web_p bigint, ie_validacao_digital_p bigint, nr_seq_maquina_p bigint, id_maquina_p text, ds_biometria_p text) FROM PUBLIC;

