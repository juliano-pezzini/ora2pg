-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sams_api_solic_agenda ( DS_JSON_P text, CD_TIPO_AGENDA_P bigint) AS $body$
DECLARE


    json_lista_w philips_json_list;
    registro_w   philips_json;

    nr_sequencia_w sams_solic_agenda.nr_sequencia%TYPE;
    nm_usuario_w  sams_solic_agenda.nm_usuario%TYPE := 'Tasy';
    nm_usuario_nrec_w  sams_solic_agenda.nm_usuario_nrec%TYPE := 'Tasy';
    nm_pessoa_fisica_w  sams_solic_agenda.nm_pessoa_fisica%TYPE;
    nm_social_w  sams_solic_agenda.nm_social%TYPE;
    dt_nascimento_w  sams_solic_agenda.dt_nascimento%TYPE;
    ie_sexo_w  sams_solic_agenda.ie_sexo%TYPE;
    cd_agenda_externa_w  sams_solic_agenda.cd_agenda_externa%TYPE;
    dt_agenda_w  sams_solic_agenda.dt_agenda%TYPE;
    nr_minuto_duracao_w  sams_solic_agenda.nr_minuto_duracao%TYPE;
    nr_crm_w  sams_solic_agenda.nr_crm%TYPE;
    nm_medico_w  sams_solic_agenda.nm_medico%TYPE;
    cd_estabelecimento_w  sams_solic_agenda.cd_estabelecimento%TYPE;
    nm_fantasia_estab_w  sams_solic_agenda.nm_fantasia_estab%TYPE;
    cd_especialidade_w  sams_solic_agenda.cd_especialidade%TYPE;
    ds_especialidade_w  sams_solic_agenda.ds_especialidade%TYPE;
    ie_status_agenda_w  sams_solic_agenda.ie_status_agenda%TYPE;
    nr_seq_motivo_falta_w  sams_solic_agenda.nr_seq_motivo_falta%TYPE;
    cd_agendamento_externo_w  sams_solic_agenda.cd_agendamento_externo%TYPE;
    cd_pessoa_externo_w  sams_solic_agenda.cd_pessoa_externo%TYPE;
    cd_procedimento_ext_w  sams_solic_agenda.cd_procedimento_ext%TYPE;
    ds_procedimento_w  sams_solic_agenda.ds_procedimento%TYPE;

    nr_cpf_w pessoa_fisica.nr_cpf%TYPE;
    cd_pessoa_fisica_w pessoa_fisica.cd_pessoa_fisica%TYPE;
    nr_cartao_nac_sus_w pessoa_fisica.nr_cartao_nac_sus%TYPE;
    cd_sistema_ant_w pessoa_fisica.cd_sistema_ant%TYPE;

    nr_insert_w          bigint := 0;
    nr_insert_before_commit_w bigint := 100;
    existe_w bigint;
    dt_agenda_helper varchar(10);

BEGIN
  json_lista_w := philips_json_list(ds_json_p);

    FOR i IN 1 .. json_lista_w.count LOOP

        nm_pessoa_fisica_w := NULL;
        nm_social_w := NULL;
        dt_nascimento_w := NULL;
        ie_sexo_w := NULL;
        cd_agenda_externa_w := NULL;
        dt_agenda_w := NULL;
        nr_minuto_duracao_w := NULL;
        nr_crm_w := NULL;
        nm_medico_w := NULL;
        cd_estabelecimento_w := NULL;
        nm_fantasia_estab_w := NULL;
        cd_especialidade_w := NULL;
        ds_especialidade_w := NULL;
        ie_status_agenda_w := NULL;
        nr_seq_motivo_falta_w := NULL;
        cd_agendamento_externo_w := NULL;
        cd_pessoa_externo_w := NULL;
        cd_procedimento_ext_w := NULL;
        ds_procedimento_w := NULL;
        dt_agenda_helper := NULL;
        nr_cpf_w := NULL;
        cd_sistema_ant_w := NULL;
        cd_pessoa_fisica_w := NULL;
        nr_cartao_nac_sus_w := NULL;
        existe_w := 1;

        registro_w := philips_json(json_lista_w.get(i));

        IF registro_w.exist('PROT_NUM') THEN
            cd_agendamento_externo_w := registro_w.get['PROT_NUM'].get_string;
            SELECT COUNT(*)
                INTO STRICT existe_w
                FROM sams_solic_agenda ssa
                WHERE ssa.cd_agendamento_externo = cd_agendamento_externo_w;
        END IF;

        IF existe_w = 0 THEN
            
            IF registro_w.exist('PAC_NUM_CADASTRO') THEN
                cd_sistema_ant_w := registro_w.get['PAC_NUM_CADASTRO'].get_string;
            END IF;

            IF registro_w.exist('PAC_CPF') THEN
                nr_cpf_w := registro_w.get['PAC_CPF'].get_string;
            END IF;

            IF registro_w.exist('PAC_CARTAO_SUS') THEN
                nr_cartao_nac_sus_w := registro_w.get['PAC_CARTAO_SUS'].get_string;
            END IF;

            IF registro_w.exist('PAC_NOME') THEN
                nm_pessoa_fisica_w := registro_w.get['PAC_NOME'].get_string;
            END IF;

            IF registro_w.exist('PAC_DT_NASCTO') THEN
                dt_nascimento_w := to_date(registro_w.get['PAC_DT_NASCTO'].get_string, 'DD-MM-YYYY');
            END IF;

            SELECT sams_busca_pessoa_fisica(cd_sistema_ant_w, nr_cpf_w, nr_cartao_nac_sus_w, nm_pessoa_fisica_w, dt_nascimento_w) 
                INTO STRICT cd_pessoa_fisica_w 
;

            IF registro_w.exist('PAC_NOME_SOCIAL') THEN
                nm_social_w := registro_w.get['PAC_NOME_SOCIAL'].get_string;
            END IF;

            IF registro_w.exist('COD_OR_SEXUAL') THEN
                ie_sexo_w := registro_w.get['COD_OR_SEXUAL'].get_string;
            END IF;

            IF registro_w.exist('PRA_CODIGO') THEN
                cd_agenda_externa_w := registro_w.get['PRA_CODIGO'].get_string;
            END IF;

            IF registro_w.exist('DT_AGENDA') THEN
                IF registro_w.exist('HR_AGENDA') THEN
                    BEGIN
                        dt_agenda_helper:= substr(registro_w.get['DT_AGENDA'].get_string,1,10);
                        dt_agenda_w := to_date(dt_agenda_helper || registro_w.get['HR_AGENDA'].get_string, 'DD/MM/YYYY hh24:mi:ss');
                    EXCEPTION
                        WHEN OTHERS THEN
                            dt_agenda_w := NULL;
                            RAISE EXCEPTION '%', ' - dt_agenda - Retorno: ' || registro_w.get['DT_AGENDA'].get_string || ' hr_agenda: '|| registro_w.get['HR_AGENDA'].get_string
                                                     || '   ID: ' || ' Erro:' ||
                                                    SQLERRM USING ERRCODE = '45150';
                    END;
                END IF;
            END IF;

            IF registro_w.exist('TEMPO_DURACAO') THEN
                nr_minuto_duracao_w := registro_w.get['TEMPO_DURACAO'].get_string;
            END IF;

            IF registro_w.exist('PRO_CRM') THEN
                nr_crm_w := registro_w.get['PRO_CRM'].get_string;
            END IF;

            IF registro_w.exist('PRO_NOME') THEN
                nm_medico_w := registro_w.get['PRO_NOME'].get_string;
            END IF;

            IF registro_w.exist('COD_UNI_EXEC') THEN
                cd_estabelecimento_w := registro_w.get['COD_UNI_EXEC'].get_string;
            END IF;

            IF registro_w.exist('DESC_UNI_EXEC') THEN
                nm_fantasia_estab_w := registro_w.get['DESC_UNI_EXEC'].get_string;
            END IF;

            IF registro_w.exist('COD_ESPEC') THEN
                cd_especialidade_w := registro_w.get['COD_ESPEC'].get_string;
            END IF;

            IF registro_w.exist('DESC_ESPEC') THEN
                ds_especialidade_w := registro_w.get['DESC_ESPEC'].get_string;
            END IF;

            IF registro_w.exist('BLOQUEADO') THEN
                ie_status_agenda_w := registro_w.get['BLOQUEADO'].get_string;
            END IF;

            IF registro_w.exist('COD_FALTA') THEN
                nr_seq_motivo_falta_w := registro_w.get['COD_FALTA'].get_string;
            END IF;

            IF registro_w.exist('PROT_NUM') THEN
                cd_agendamento_externo_w := registro_w.get['PROT_NUM'].get_string;
            END IF;

            IF registro_w.exist('PAC_CRA') THEN
                cd_pessoa_externo_w := registro_w.get['PAC_CRA'].get_string;
            END IF;

            IF registro_w.exist('EXA_ID') THEN
                IF registro_w.exist('EXA_DV') THEN
                    cd_procedimento_ext_w := registro_w.get['EXA_ID'].get_string||'-'||registro_w.get['EXA_DV'].get_string;
                END IF;
            END IF;

            IF registro_w.exist('EXA_DESC') THEN
                ds_procedimento_w := registro_w.get['EXA_DESC'].get_string;
            END IF;

        SELECT nextval('sams_solic_agenda_seq') INTO STRICT nr_sequencia_w;

        INSERT INTO sams_solic_agenda(nr_sequencia,
            dt_atualizacao,
            nm_usuario,
            dt_atualizacao_nrec,
            nm_usuario_nrec,
            nm_pessoa_fisica,
            nm_social,
            dt_nascimento,
            ie_sexo,
            cd_agenda_externa,
            dt_agenda,
            nr_minuto_duracao,
            nr_crm,
            nm_medico,
            cd_estabelecimento,
            nm_fantasia_estab,
            cd_especialidade,
            ds_especialidade,
            ie_status_agenda,
            nr_seq_motivo_falta,
            cd_agendamento_externo,
            cd_pessoa_externo,
            cd_procedimento_ext,
            ds_procedimento,
            cd_tipo_agenda,
            cd_pessoa_fisica,
            nr_cartao_nac_sus)
            
        VALUES (nr_sequencia_w,
            clock_timestamp(),
            nm_usuario_w,
            clock_timestamp(),
            nm_usuario_nrec_w,
            nm_pessoa_fisica_w,
            nm_social_w,
            dt_nascimento_w,
            ie_sexo_w,
            cd_agenda_externa_w,
            dt_agenda_w,
            nr_minuto_duracao_w,
            nr_crm_w,
            nm_medico_w,
            cd_estabelecimento_w,
            nm_fantasia_estab_w,
            cd_especialidade_w,
            ds_especialidade_w,
            ie_status_agenda_w,
            nr_seq_motivo_falta_w,
            cd_agendamento_externo_w,
            cd_pessoa_externo_w,
            cd_procedimento_ext_w,
            ds_procedimento_w,
            cd_tipo_agenda_p,
            cd_pessoa_fisica_w,
            nr_cartao_nac_sus_w);

        nr_insert_w := nr_insert_w +1;
     END IF;
        IF nr_insert_w >= nr_insert_before_commit_w THEN
             COMMIT;
            nr_insert_w := 0;
        END IF;
    END LOOP;
    COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sams_api_solic_agenda ( DS_JSON_P text, CD_TIPO_AGENDA_P bigint) FROM PUBLIC;

