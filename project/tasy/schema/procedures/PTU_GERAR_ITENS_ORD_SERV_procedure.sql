-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_itens_ord_serv ( nr_seq_ordem_serv_p ptu_requisicao_ordem_serv.nr_sequencia%type, nr_seq_resposta_p ptu_resposta_req_ord_serv.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Rotina utilizada para validação da transação 00806 - Ordem de serviço do PTU
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_resp_req_serv_w		ptu_resposta_req_servico.nr_sequencia%type;
cd_unimed_solicitante_w		ptu_requisicao_ordem_serv.cd_unimed_solicitante%type;
cd_unimed_beneficiario_w	ptu_requisicao_ordem_serv.cd_unimed_beneficiario%type;
nr_seq_material_w		pls_material.nr_sequencia%type;
ie_aceito_w			varchar(1);
qt_registros_w			bigint;

C01 CURSOR FOR
	SELECT	cd_servico,
		cd_servico_consersao,
		ie_origem_servico,
		ie_tipo_tabela,
		qt_servico_aut,
		nr_seq_item
	from	ptu_req_ord_serv_servico
	where	nr_seq_req_ord = nr_seq_ordem_serv_p;

BEGIN

select	cd_unimed_beneficiario,
	cd_unimed_solicitante
into STRICT	cd_unimed_beneficiario_w,
	cd_unimed_solicitante_w
from	ptu_requisicao_ordem_serv
where	nr_sequencia	= nr_seq_ordem_serv_p;

for	r_c01_w	in c01	loop
	select	nextval('ptu_resposta_req_servico_seq')
	into STRICT	nr_seq_resp_req_serv_w
	;

	if (r_c01_w.ie_tipo_tabela	in ('0','1','4')) then
		if (cd_unimed_solicitante_w	= cd_unimed_beneficiario_w) then
			ie_aceito_w	:= ptu_obter_item_req_ord_aceito(	coalesce(r_c01_w.cd_servico_consersao, r_c01_w.cd_servico), r_c01_w.ie_origem_servico, null,
										cd_unimed_beneficiario_w);
		else
			ie_aceito_w	:= 'S';
		end if;
		
		insert	into ptu_resposta_req_servico(nr_sequencia, nr_seq_resp_req_ord, cd_servico,
			 qt_servico_aut, ie_status_requisicao, ie_tipo_tabela,
			 nm_usuario, dt_atualizacao, nm_usuario_nrec,
			 dt_atualizacao_nrec, nr_seq_item)
		values (nr_seq_resp_req_serv_w, nr_seq_resposta_p, r_c01_w.cd_servico,
			 CASE WHEN ie_aceito_w='S' THEN r_c01_w.qt_servico_aut  ELSE 0 END , CASE WHEN ie_aceito_w='S' THEN 2  ELSE 1 END , r_c01_w.ie_tipo_tabela,
			 nm_usuario_p, clock_timestamp(), nm_usuario_p,
			 clock_timestamp(), r_c01_w.nr_seq_item);

		if (ie_aceito_w	= 'N') then
			CALL ptu_inserir_inconsistencia(	null, null, 2010,
							'',cd_estabelecimento_p, nr_seq_resposta_p,
							'OR', '00807', nr_seq_resp_req_serv_w, 
							null, null, nm_usuario_p);
		end if;
	elsif (r_c01_w.ie_tipo_tabela	in ('2','3','5','6')) then
		nr_seq_material_w	:= substr(pls_obter_dados_material_a900(coalesce(r_c01_w.cd_servico_consersao, r_c01_w.cd_servico),null,'NR'),1,255);

		if (coalesce(nr_seq_material_w,0)	= 0) then
			nr_seq_material_w	:= substr(pls_obter_seq_codigo_material('',coalesce(r_c01_w.cd_servico_consersao, r_c01_w.cd_servico)),1,8);
		end if;

		if (cd_unimed_solicitante_w	= cd_unimed_beneficiario_w) then
			ie_aceito_w	:= ptu_obter_item_req_ord_aceito(null, null, nr_seq_material_w, cd_unimed_beneficiario_w);
		else
			ie_aceito_w	:= 'S';
		end if;
		
		insert	into ptu_resposta_req_servico(nr_sequencia, nr_seq_resp_req_ord, cd_servico,
			 qt_servico_aut, ie_status_requisicao, ie_tipo_tabela,
			 nm_usuario, dt_atualizacao, nm_usuario_nrec,
			 dt_atualizacao_nrec, nr_seq_item)
		values (nr_seq_resp_req_serv_w, nr_seq_resposta_p, r_c01_w.cd_servico,
			 CASE WHEN ie_aceito_w='S' THEN r_c01_w.qt_servico_aut  ELSE 0 END , CASE WHEN ie_aceito_w='S' THEN 2  ELSE 1 END , r_c01_w.ie_tipo_tabela,
			 nm_usuario_p, clock_timestamp(), nm_usuario_p,
			 clock_timestamp(), r_c01_w.nr_seq_item);

		if (ie_aceito_w	= 'N') then
			CALL ptu_inserir_inconsistencia(	null, null, 2010,
							'',cd_estabelecimento_p, nr_seq_resposta_p,
							'OR', '00807', null, 
							nr_seq_resp_req_serv_w, null, nm_usuario_p);
		end if;
	end if;
end loop;

select	count(1)
into STRICT	qt_registros_w
from	ptu_resposta_req_servico
where	ie_status_requisicao	= 2
and	nr_seq_resp_req_ord	= nr_seq_resposta_p;

if (qt_registros_w	> 0) then
	-- Se a resposta da ordem de serviço vier com serviços recusados e aceitos, a ordem de serviço fica pendente de pedido de autorização
	update	ptu_requisicao_ordem_serv
	set	ie_estagio		= 8
	where	nr_sequencia		= nr_seq_ordem_serv_p;
else
	-- Se a resposta da ordem de serviço for totalmente recusada, se encerra o processo
	update	ptu_requisicao_ordem_serv
	set	ie_estagio		= 4
	where	nr_sequencia		= nr_seq_ordem_serv_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_itens_ord_serv ( nr_seq_ordem_serv_p ptu_requisicao_ordem_serv.nr_sequencia%type, nr_seq_resposta_p ptu_resposta_req_ord_serv.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

