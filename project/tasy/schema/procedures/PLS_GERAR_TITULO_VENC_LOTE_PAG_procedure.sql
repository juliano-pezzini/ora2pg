-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_titulo_venc_lote_pag ( nr_seq_pag_prest_p pls_pagamento_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nm_prestador_w			varchar(255);
ds_erro_w			varchar(255);
ds_irrelevante_w		varchar(255);
ie_periodicidade_w		varchar(255);
cd_darf_w			varchar(255);
cd_conta_cred_w			varchar(20);
cd_cgc_prestador_w		varchar(14);
cd_beneficiario_w		varchar(14);
cd_pf_prestador_w		varchar(10);
ie_saldo_negativo_venc_w	varchar(3);
ie_saldo_negativo_prest_w	varchar(3);
ie_saldo_negativo_param_w	varchar(3);
ie_saldo_negativo_w		varchar(3);
cd_variacao_w			varchar(2);
ie_tipo_contratacao_w		varchar(2);
ie_forma_retencao_inss_ir_w	varchar(2);
ie_gerar_cp_w			varchar(1)	:= 'N';
ie_vencimento_w			varchar(1);
ie_inss_ir_semanal_w		varchar(1);
ie_bloqueto_w			varchar(1);
vl_tributo_w			double precision;
vl_base_calculo_w		double precision;
vl_lote_w			double precision;
vl_liquido_w			double precision;
vl_vencimento_w			double precision;
vl_ir_w				double precision;
vl_imposto_munic_w		double precision;
vl_nao_retido_w			double precision;
vl_base_nao_retido_w		double precision;
vl_trib_adic_w			double precision;
vl_base_adic_w			double precision;
vl_titulo_rateio_w		double precision;
cd_empresa_w			bigint := null;
nr_seq_prestador_w		bigint;
nr_titulo_w			bigint;
nr_seq_trans_fin_baixa_conta_w	bigint;
cd_conta_financ_w		bigint;
nr_seq_classif_w		bigint;
qt_regras_prestador_w		bigint;
nr_seq_vencimento_w		bigint;
cd_cond_pg_w			bigint;
nr_seq_imposto_w		bigint;
cd_condicao_pagto_w		bigint;
nr_seq_trans_reg_w		bigint;
nr_seq_trans_baixa_w		bigint;
cd_conta_financ_regra_w		bigint;
nr_seq_periodo_w		bigint;
nr_seq_evento_w			bigint;
nr_seq_pag_prestador_w		bigint;
cd_tipo_taxa_juro_w		bigint;
cd_tipo_taxa_multa_w		bigint;
cd_portador_w			bigint;
nr_titulo_receber_w		bigint;
qt_notas_w			bigint;
nr_seq_nota_fiscal_w		bigint	:= null;
nr_seq_conta_banco_w		bigint;
nr_seq_venc_trib_w		bigint;
nr_titulo_tributo_w		bigint;
pr_imposto_w			double precision;
cd_moeda_w			integer;
cd_tipo_portador_w		integer;
cd_estabelecimento_w		smallint;
cd_tributo_w			smallint;
dt_base_venc_w			timestamp;
dt_vencimento_w			timestamp;
dt_emissao_w			timestamp;
dt_imposto_w			timestamp;
cd_banco_fav_w			smallint;
cd_agencia_bancaria_fav_w 	varchar(8);
nr_digito_agencia_fav_w 	varchar(2);
nr_conta_fav_w			varchar(20);
nr_digito_conta_fav_w 		varchar(2);
nr_seq_pj_conta_fav_w		varchar(14);
nr_seq_pf_conta_fav_w		varchar(10);
ie_gerar_cta_favorecido_w	varchar(1);
nr_seq_trans_fin_baixa_w	bigint;
nr_seq_trib_cp_w		bigint;
nr_seq_classe_pgto_neg_w	classe_titulo_receber.nr_sequencia%type;
ie_trib_saldo_tit_nf_w		parametros_contas_pagar.ie_trib_saldo_tit_nf%type;
nr_seq_classe_tp_w		pls_parametro_pagamento.nr_seq_classe_tp%type;
nr_seq_tipo_prestador_w		pls_tipo_prestador.nr_sequencia%type;
nr_seq_classificacao_w		pls_prestador.nr_seq_classificacao%type;
nr_seq_carteira_cobr_rec_w	bigint;
nr_seq_trans_fin_contab_rec_w	bigint;
nr_seq_trans_fin_baixa_rec_w	bigint;
ds_observacao_rec_w		varchar(4000);	
qt_pag_negativo_max_w		pls_prestador_pagto.qt_pag_negativo_max%type;
ie_gerar_titulo_w		varchar(1);
qt_pag_negativo_ant_w		bigint;
dt_ultima_ger_tit_w		pls_lote_pagamento.dt_geracao_titulos%type;
nr_seq_lote_w			pls_lote_pagamento.nr_sequencia%type;
dt_mes_competencia_ww		pls_lote_pagamento.dt_mes_competencia%type;
nr_fluxo_pgto_w			pls_periodo_pagamento.nr_fluxo_pgto%type;
vl_pagamento_item_w		double precision;
ie_tipo_tributo_w		tributo.ie_tipo_tributo%type;
cd_prestador_w			pls_prestador.cd_prestador%type;
tx_juros_cr_w			double precision;
tx_multa_cr_w			double precision;
tx_juros_pj_cr_w		double precision;
tx_multa_pj_cr_w		double precision;
ie_carta_retencao_w		pls_periodo_pagamento.ie_carta_retencao%type;
nr_seq_trans_fin_baixa_ct_w	pls_parametro_pagamento.nr_seq_trans_fin_baixa_carta%type;
nr_seq_trans_fin_contab_ct_w	pls_parametro_pagamento.nr_seq_trans_fin_contab_carta%type;
vl_minimo_tit_liq_w		pls_prestador_pagto.vl_minimo_tit_liq%type := 0;
ie_pag_prest_venc_valor_w	varchar(1);
ie_elim_regra_valor_min_w	varchar(1);
ie_data_emissao_geracao_w	varchar(1);
qt_dias_vencimento_w		bigint;
ie_excecao_pag_negativo_w	pls_prestador_pagto.ie_excecao_pag_negativo%type;
nr_seq_prestador_pagto_w	pls_prestador_pagto.nr_sequencia%type;
cd_estab_financeiro_w		estabelecimento.cd_estab_financeiro%type;
ie_recurso_proprio_w		pls_periodo_pagamento.ie_recurso_proprio%type;
nr_seq_trans_fin_baixa_rec_d_w	pls_parametro_pagamento.nr_seq_trans_fin_baixa_rec_pro%type;
ds_observacao_titulo_apag_w	titulo_pagar.ds_observacao_titulo%type;
nr_seq_tipo_prest_rec_prop_w	pls_parametro_pagamento.nr_seq_tipo_prest_rec_prop%type;
nr_seq_forma_cobranca_w		pls_prestador_rec.nr_seq_forma_cobranca%type;
cd_conta_financ_cr_w		titulo_receber_classif.cd_conta_financ%type;

C02 CURSOR FOR
	SELECT	distinct nr_seq_lote,
		dt_mes_competencia,
		nr_fluxo_pgto
	from	(SELECT	b.nr_sequencia nr_seq_lote,
			b.dt_mes_competencia dt_mes_competencia,
			a.nr_fluxo_pgto nr_fluxo_pgto
		from	pls_periodo_pagamento 	a,
			pls_pagamento_prestador c,
			pls_lote_pagamento	b
		where	b.nr_sequencia		= c.nr_seq_lote
		and	b.nr_seq_periodo	= a.nr_sequencia
		and	coalesce(c.ie_cancelamento::text, '') = ''
		and	(b.dt_fechamento IS NOT NULL AND b.dt_fechamento::text <> '')
		and	b.nr_sequencia		<> nr_seq_lote_w
		and	b.dt_mes_competencia	<= dt_emissao_w
		and	c.nr_seq_prestador	= nr_seq_prestador_w
		and (b.dt_mes_competencia	> dt_ultima_ger_tit_w or coalesce(dt_ultima_ger_tit_w::text, '') = '')
		and	coalesce(a.ie_complementar,'N') <> 'S'
		and	((ie_excecao_pag_negativo_w = 'N') or
			((ie_excecao_pag_negativo_w = 'S') and
			not exists (	select	1
					from	pls_regra_pag_neg_max_exec 	z
					where	z.nr_seq_prest_pagto		= nr_seq_prestador_pagto_w
					and	z.nr_seq_periodo		= a.nr_sequencia)))
		order by b.dt_mes_competencia desc,
			a.nr_fluxo_pgto desc) alias10 ORDER by dt_mes_competencia desc,
		nr_fluxo_pgto desc LIMIT (qt_pag_negativo_max_w);

/* Manter a ordem */

C03 CURSOR FOR
	SELECT	nr_titulo
	from	titulo_pagar
	where	nr_seq_pls_pag_prest	= nr_seq_pag_prest_p
	and	coalesce(nr_seq_pls_venc_trib::text, '') = ''
	and	ie_carta_retencao_w	= 'N';

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.dt_vencimento,
		a.vl_vencimento,
		coalesce(vl_liquido, (vl_vencimento - coalesce(vl_ir,0) - coalesce(vl_imposto_munic,0))),
		a.vl_imposto_munic,
		a.vl_ir,
		a.ie_saldo_negativo,
		'N' ie_pag_prest_venc_valor
	from	pls_pag_prest_vencimento a
	where	a.nr_seq_pag_prestador	= nr_seq_pag_prest_p
	and	coalesce(a.nr_titulo::text, '') = ''
	and	not exists (SELECT	1
				from	pls_pag_prest_venc_valor	x
				where	a.nr_sequencia			= x.nr_seq_vencimento)
	
union all

	select	a.nr_sequencia,
		a.dt_vencimento,
		sum(x.vl_vencimento),
		sum(x.vl_vencimento),
		0,
		0,
		x.ie_tipo_valor,
		'S' ie_pag_prest_venc_valor
	from	pls_pag_prest_venc_valor	x,
		pls_pag_prest_vencimento 	a
	where	a.nr_sequencia			= x.nr_seq_vencimento
	and	a.nr_seq_pag_prestador		= nr_seq_pag_prest_p
	group by
		a.nr_sequencia,
		a.dt_vencimento,
		a.vl_vencimento,
		x.ie_tipo_valor
	order by
		dt_vencimento;

C00 CURSOR FOR	
	SELECT	x.nr_sequencia
	from	pls_pag_prest_venc_valor	x,
		pls_pag_prest_vencimento 	a
	where	a.nr_sequencia			= x.nr_seq_vencimento
	and	a.nr_seq_pag_prestador		= nr_seq_pag_prest_p
	and	x.ie_tipo_valor			= 'TR';

C05 CURSOR FOR
	SELECT	a.cd_tributo,
		a.dt_imposto,
		sum(coalesce(vl_base_calculo,0)),
		sum(coalesce(a.vl_imposto,0)),
		dividir_sem_round(sum(coalesce(a.vl_imposto,0)), sum(coalesce(vl_base_calculo,0))) pr_imposto,
		b.ie_gerar_titulo_pagar,
		sum(coalesce(vl_nao_retido,0)),
		max(ie_vencimento) ie_vencimento,
		sum(coalesce(a.vl_base_nao_retido,0)),
		sum(coalesce(a.vl_trib_adic,0)),
		sum(coalesce(a.vl_base_adic,0)),
		a.nr_seq_trans_reg,
		a.nr_seq_trans_baixa,
		a.cd_beneficiario,
		a.nr_sequencia
	from	tributo			b,
		pls_pag_prest_venc_trib a
	where	a.nr_seq_vencimento	= nr_seq_vencimento_w
	and	a.cd_tributo		= b.cd_tributo
	and	a.ie_pago_prev		= 'V'
	and	b.ie_conta_pagar	= 'S'
	group	by
		a.cd_tributo,
		a.dt_imposto,
		b.ie_gerar_titulo_pagar,
		a.nr_seq_trans_reg,
		a.nr_seq_trans_baixa,
		a.cd_beneficiario,
		a.nr_sequencia;

C09 CURSOR FOR
	SELECT	cd_cond_pagto
	from	tributo_conta_pagar
	where	cd_tributo					= cd_tributo_w
	and (coalesce(cd_estabelecimento, cd_estabelecimento_w)	= cd_estabelecimento_w)
	and	cd_empresa					= cd_empresa_w
	and	((coalesce(cd_pessoa_juridica::text, '') = '')
		 or (cd_pessoa_juridica = cd_cgc_prestador_w))
	and	((coalesce(cd_pessoa_fisica::text, '') = '')
		 or (cd_pessoa_fisica = cd_pf_prestador_w));

C11 CURSOR FOR
	/* Procedimentos */

	SELECT	coalesce(b.cd_conta_cred,c.cd_conta_cred),
		a.nr_seq_evento,
		sum(coalesce(b.vl_liberado,0))
	from	pls_conta_proc c,
		pls_conta_medica_resumo b,
		pls_pagamento_item a
	where	a.nr_seq_pagamento	= nr_seq_pag_prest_p
	and	a.nr_sequencia		= b.nr_seq_pag_item
	and	b.nr_seq_item		= c.nr_sequencia
	and	b.ie_proc_mat		= 'P'
	and	((coalesce(b.ie_situacao::text, '') = '') or (b.ie_situacao != 'I'))
	group by
		coalesce(b.cd_conta_cred,c.cd_conta_cred),
		a.nr_seq_evento
	
union all

	/* Materiais */

	SELECT	coalesce(b.cd_conta_cred,c.cd_conta_cred),
		a.nr_seq_evento,
		sum(coalesce(b.vl_liberado,0))
	from	pls_conta_mat c,
		pls_conta_medica_resumo b,
		pls_pagamento_item a
	where	a.nr_seq_pagamento	= nr_seq_pag_prest_p
	and	a.nr_sequencia		= b.nr_seq_pag_item
	and	b.nr_seq_item		= c.nr_sequencia
	and	b.ie_proc_mat		= 'M'
	and	((coalesce(b.ie_situacao::text, '') = '') or (b.ie_situacao != 'I'))
	group by
		coalesce(b.cd_conta_cred,c.cd_conta_cred),
		a.nr_seq_evento
	
union all

	/* Ocorrencias financeiras */

	select	c.cd_conta_credito,
		b.nr_seq_evento,
		sum(coalesce(coalesce(c.vl_movimento,b.vl_item), 0))
	from	pls_evento_movimento c,
		pls_pagamento_item b,
		pls_pagamento_prestador a
	where	a.nr_sequencia	= nr_seq_pag_prest_p
	and	a.nr_sequencia	= b.nr_seq_pagamento
	and	c.nr_seq_evento	= b.nr_seq_evento
	and	c.nr_seq_prestador = a.nr_seq_prestador
	and	c.nr_seq_lote_pgto = a.nr_seq_lote
	group by
		c.cd_conta_credito,
		b.nr_seq_evento
	--Union para os recursos de glosas.	
	
union all

	--procedimentos recurso de glosa
	select	b.cd_conta_cred,
		a.nr_seq_evento,
		sum(coalesce(b.vl_liberado, 0))
	from	pls_rec_glosa_proc c,
		pls_conta_rec_resumo_item  b,
		pls_pagamento_item a
	where	a.nr_sequencia		= b.nr_seq_pag_item
	and	b.nr_seq_proc_rec 	= c.nr_sequencia
	and	a.nr_seq_pagamento 	= nr_seq_pag_prest_p	
	and	b.ie_situacao		= 'A'
	group by
		b.cd_conta_cred,
		a.nr_seq_evento
	
union all

	--procedimentos recurso de glosa
	select	b.cd_conta_cred,
		a.nr_seq_evento,
		sum(coalesce(b.vl_liberado, 0))
	from	pls_rec_glosa_mat c,
		pls_conta_rec_resumo_item  b,
		pls_pagamento_item a
	where	a.nr_sequencia		= b.nr_seq_pag_item
	and	b.nr_seq_mat_rec 	= c.nr_sequencia
	and	a.nr_seq_pagamento 	= nr_seq_pag_prest_p	
	and	b.ie_situacao		= 'A'
	group by
		b.cd_conta_cred,
		a.nr_seq_evento  
	order by 2;

BEGIN
select	nr_seq_prestador, /* Obter dados do lote */
	a.vl_pagamento,
	b.cd_estabelecimento,
	b.dt_mes_competencia,
	b.dt_mes_competencia,
	b.nr_seq_periodo,
	a.nr_sequencia,
	b.nr_sequencia,
	coalesce(p.ie_carta_retencao,'N'),
	coalesce(p.ie_recurso_proprio,'N')
into STRICT	nr_seq_prestador_w,
	vl_lote_w,
	cd_estabelecimento_w,
	dt_base_venc_w,
	dt_emissao_w,
	nr_seq_periodo_w,
	nr_seq_pag_prestador_w,
	nr_seq_lote_w,
	ie_carta_retencao_w,
	ie_recurso_proprio_w
from	pls_lote_pagamento	b,
	pls_pagamento_prestador	a,
	pls_periodo_pagamento	p
where	a.nr_seq_lote		= b.nr_sequencia
and	p.nr_sequencia		= b.nr_seq_periodo
and	a.nr_sequencia		= nr_seq_pag_prest_p;

select	max(coalesce(cd_estab_financeiro, cd_estabelecimento))
into STRICT	cd_estab_financeiro_w
from	estabelecimento
where	cd_estabelecimento	= cd_estabelecimento_w;

select	count(1)
into STRICT	qt_notas_w
from	pls_pagamento_nota
where	nr_seq_pagamento	= nr_seq_pag_prest_p;

if (qt_notas_w = 1) then
	select	max(a.nr_seq_nota_fiscal)
	into STRICT	nr_seq_nota_fiscal_w
	from	pls_pagamento_nota	a
	where	a.nr_seq_pagamento	= nr_seq_pag_prest_p;
end if;

if (coalesce(nr_seq_nota_fiscal_w::text, '') = '') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_nota_fiscal_w
	from	nota_fiscal
	where	nr_seq_pgto_prest	= nr_seq_pag_prest_p
	and	ie_situacao		not in ('2','3', '9');
end if;

select	count(1)
into STRICT	qt_regras_prestador_w
from	pls_prestador_pagto a,
	pls_prestador b
where	b.nr_sequencia		= a.nr_seq_prestador
and	a.nr_seq_prestador	= nr_seq_prestador_w  LIMIT 1;

select	substr(max(pls_obter_dados_prestador(nr_seq_prestador_w,'N')),1,80)
into STRICT	nm_prestador_w
;

if (qt_regras_prestador_w = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(178534,'NM_PRESTADOR=' || nm_prestador_w);
end if;

select	obter_moeda_padrao(cd_estabelecimento_w,'P')
into STRICT	cd_moeda_w
;

select	cd_pessoa_fisica,
	cd_cgc,
	nr_seq_tipo_prestador,
	cd_prestador,
	nr_seq_classificacao
into STRICT	cd_pf_prestador_w,
	cd_cgc_prestador_w,
	nr_seq_tipo_prestador_w,
	cd_prestador_w,
	nr_seq_classificacao_w
from	pls_prestador
where	nr_sequencia	= nr_seq_prestador_w;

select	max(nr_sequencia)
into STRICT	nr_seq_prestador_pagto_w
from	pls_prestador_pagto
where	nr_seq_prestador = nr_seq_prestador_w;

select	coalesce(max(ie_saldo_negativo),'CP'),
	coalesce(max(qt_pag_negativo_max),0),
	coalesce(max(vl_minimo_tit_liq),0),
	coalesce(max(ie_excecao_pag_negativo),'N')
into STRICT	ie_saldo_negativo_prest_w,
	qt_pag_negativo_max_w,
	vl_minimo_tit_liq_w,
	ie_excecao_pag_negativo_w
from	pls_prestador_pagto
where	nr_sequencia = nr_seq_prestador_pagto_w;

select	coalesce(max(ie_saldo_negativo),'PP'),
	coalesce(max(ie_forma_retencao_inss_ir), 'ME'),
	max(nr_seq_classe),
	max(nr_seq_classe_tp),
	max(nr_seq_trans_fin_baixa),
	max(nr_seq_trans_fin_baixa_carta),
	max(nr_seq_trans_fin_contab_carta),
	max(nr_seq_trans_fin_baixa_rec_pro),
	max(nr_seq_tipo_prest_rec_prop)
into STRICT	ie_saldo_negativo_param_w,
	ie_forma_retencao_inss_ir_w,
	nr_seq_classe_pgto_neg_w,
	nr_seq_classe_tp_w,
	nr_seq_trans_fin_baixa_w,
	nr_seq_trans_fin_baixa_ct_w,
	nr_seq_trans_fin_contab_ct_w,
	nr_seq_trans_fin_baixa_rec_d_w,
	nr_seq_tipo_prest_rec_prop_w
from	pls_parametro_pagamento
where	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_recurso_proprio_w = 'S') and (nr_seq_tipo_prestador_w <> coalesce(nr_seq_tipo_prest_rec_prop_w, nr_seq_tipo_prestador_w)) then
	ie_recurso_proprio_w	:= 'N';
end if;

select	nr_seq_trans_fin_baixa_conta,
	cd_conta_financ_conta
into STRICT	nr_seq_trans_fin_baixa_conta_w,
	cd_conta_financ_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_w;

-- Quando for atribuir a transa? financeira de baixa da conta, se for de recurso proprio, prioria a padr?do mesmo, sen?permanece a ja carregada
if (ie_recurso_proprio_w = 'S') then
	nr_seq_trans_fin_baixa_conta_w := coalesce(nr_seq_trans_fin_baixa_rec_d_w, nr_seq_trans_fin_baixa_conta_w);
end if;

begin
select 	cd_tipo_taxa_juro,
	cd_tipo_taxa_multa,
	cd_tipo_portador,
	cd_portador,
	pr_juro_padrao,
	pr_multa_padrao,
	pr_juro_pj,
	pr_multa_pj
into STRICT	cd_tipo_taxa_juro_w,
	cd_tipo_taxa_multa_w,
	cd_tipo_portador_w,
	cd_portador_w,
	tx_juros_cr_w,
	tx_multa_cr_w,
	tx_juros_pj_cr_w,
	tx_multa_pj_cr_w
from 	parametro_contas_receber
where 	cd_estabelecimento	= cd_estabelecimento_w;
exception
	when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(178535); /*N?foram encontrados os par?tros do contas a receber, por favor verifique.
							 (Tipo taxa juros/Tipo taxa multa/Tipo portador/Portador)*/
	
end;

if (coalesce(cd_tipo_taxa_juro_w::text, '') = '') or (coalesce(cd_tipo_taxa_multa_w::text, '') = '') or (coalesce(cd_tipo_portador_w::text, '') = '') or (coalesce(cd_portador_w::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(178535); /*N?foram encontrados os par?tros do contas a receber, por favor verifique.
							 (Tipo taxa juros/Tipo taxa multa/Tipo portador/Portador)*/
	
end if;

begin
select	coalesce(ie_trib_saldo_tit_nf,'N')
into STRICT	ie_trib_saldo_tit_nf_w
from	parametros_contas_pagar
where	cd_estabelecimento	= cd_estabelecimento_w;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(189078);
end;

/* Francisco - 19/02/2010 - os 195591 - troquei o cursor porque os vencimentos ser?gerados anteriormente */

open C04;
loop
fetch C04 into
	nr_seq_vencimento_w,
	dt_vencimento_w,
	vl_vencimento_w,
	vl_liquido_w,
	vl_imposto_munic_w,
	vl_ir_w,
	ie_saldo_negativo_venc_w,
	ie_pag_prest_venc_valor_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin
	if (vl_liquido_w > 0) then
	
		/*aaschlote 17/04/2014 OS 663837 - Feito tratamento para gerar o valor do saldo do t?lo igual da nota fiscal*/

		if (ie_trib_saldo_tit_nf_w = 'S') then
			vl_liquido_w	:= vl_vencimento_w;
		end if;
		
		if (ie_carta_retencao_w = 'N') then
			nr_seq_trans_fin_baixa_ct_w	:= null;
			nr_seq_trans_fin_contab_ct_w	:= null;
			
		else
			-- Quando for atribuir a transa? financeira de baixa, se for de recurso proprio, prioria a padr?do mesmo, sen?permanece a ja carregada
			if (ie_recurso_proprio_w = 'S') then
				nr_seq_trans_fin_baixa_ct_w := coalesce(nr_seq_trans_fin_baixa_rec_d_w, nr_seq_trans_fin_baixa_ct_w);
			end if;
		end if;
		
		-- inicializa a obs
		ds_observacao_titulo_apag_w := null;
		
				
		select	nextval('titulo_pagar_seq')
		into STRICT	nr_titulo_w
		;
		
		insert into titulo_pagar(
			nr_titulo, cd_estabelecimento, nm_usuario,
			dt_atualizacao, dt_emissao, dt_contabil,
			dt_vencimento_original, dt_vencimento_atual, vl_titulo,
			vl_saldo_titulo, vl_saldo_juros, vl_saldo_multa,
			nr_lote_contabil, cd_moeda, tx_juros,
			tx_multa, cd_tipo_taxa_juro, cd_tipo_taxa_multa,
			ie_situacao, ie_origem_titulo, ie_tipo_titulo,
			cd_cgc, cd_pessoa_fisica, ie_pls,
			nr_seq_pls_pag_prest, vl_ir, vl_imposto_munic,
			nr_seq_nota_fiscal, nr_seq_classe, nr_seq_trans_fin_baixa,
			nr_seq_trans_fin_contab, cd_estab_financeiro
		) values (
			nr_titulo_w, cd_estabelecimento_w, nm_usuario_p,
			clock_timestamp(), dt_emissao_w, dt_emissao_w,
			dt_vencimento_w, dt_vencimento_w, vl_liquido_w,
			vl_liquido_w, 0, 0,
			0, cd_moeda_w, 0,
			0, 1, 1,
			'A', '20', '1',
			cd_cgc_prestador_w, cd_pf_prestador_w, 'S',
			nr_seq_pag_prest_p, vl_ir_w, vl_imposto_munic_w,
			nr_seq_nota_fiscal_w, nr_seq_classe_tp_w, nr_seq_trans_fin_baixa_ct_w,
			nr_seq_trans_fin_contab_ct_w, cd_estab_financeiro_w
		);
		
		CALL gerar_titulo_pagar_resp_pagto(nr_titulo_w, nm_usuario_p);
		
		CALL atualizar_inclusao_tit_pagar(nr_titulo_w, nm_usuario_p);
		
		ie_gerar_cta_favorecido_w := obter_param_usuario(1282, 24, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_gerar_cta_favorecido_w);	
		
		if (coalesce(ie_gerar_cta_favorecido_w,'N') = 'S') then --OS 651925
			begin
				select  a.cd_banco, -- buscar dados banc?os do prestador
					a.cd_agencia_bancaria,
					substr(pls_obter_digito_banc_prest(a.nr_seq_pessoa_fisica_conta,a.nr_seq_pessoa_jur_conta,'DA'),1,255) nr_digito_agencia,
					a.nr_conta, 
					substr(pls_obter_digito_banc_prest(a.nr_seq_pessoa_fisica_conta,a.nr_seq_pessoa_jur_conta,'DC'),1,255) nr_digito_conta, 
					b.cd_cgc,
					b.cd_pessoa_fisica
				into STRICT 	cd_banco_fav_w, 
					cd_agencia_bancaria_fav_w,
					nr_digito_agencia_fav_w,
					nr_conta_fav_w, 
					nr_digito_conta_fav_w,
					nr_seq_pj_conta_fav_w,
					nr_seq_pf_conta_fav_w
				from 	pls_prestador_pagto a,
					pls_prestador b
				where	a.nr_seq_prestador	= b.nr_sequencia
				and	nr_seq_prestador  	= nr_seq_prestador_w
				and	dt_emissao_w between trunc(dt_inicio_vigencia_ref,'mm') and fim_dia(last_day(dt_fim_vigencia_ref))  LIMIT 1;
			exception
			when others then
				-- N?foram encontrados dados para pagamento, para esta vig?ia, por favor verifique. (OPS - Prestadores > Prestadores > Dados complementares > Dados para pagamento) 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(449405, 'NR_SEQ_PRESTADOR=' || nr_seq_prestador_w);
			end;
			
			if (nr_titulo_w > 0) then -- inserir na pasta favorecido do titulo
				insert into titulo_pagar_favorecido(
					cd_agencia_bancaria, cd_banco, cd_cgc,
					cd_codigo_identificacao, cd_pessoa_fisica, dt_atualizacao,
					dt_atualizacao_nrec, ie_digito_agencia, nm_usuario,
					nm_usuario_nrec, nr_conta, nr_digito_conta,
					nr_sequencia, nr_titulo
				) values (
					cd_agencia_bancaria_fav_w, cd_banco_fav_w, nr_seq_pj_conta_fav_w,
					null, nr_seq_pf_conta_fav_w, clock_timestamp(),
					clock_timestamp(), nr_digito_agencia_fav_w, nm_usuario_p,
					nm_usuario_p, nr_conta_fav_w, nr_digito_conta_fav_w,
					nextval('titulo_pagar_seq'), nr_titulo_w
				);
									
				update	titulo_pagar -- Definir como conta do t?lo.
				set	nr_conta	= nr_conta_fav_w
				where	nr_titulo	= nr_titulo_w;
			end if;
		end if;
		
		open C11;
		loop
		fetch C11 into
			cd_conta_cred_w,
			nr_seq_evento_w,
			vl_titulo_rateio_w;
		EXIT WHEN NOT FOUND; /* apply on C11 */
			begin
			/* Para cada conta cont?l tem fazer ainda o rateio por conta financeira */

			cd_conta_financ_regra_w := pls_obter_conta_financ_regra(	'PP', null, cd_estabelecimento_w, null, null, null, null, nr_seq_prestador_w, null, null, null, nr_seq_evento_w, nr_seq_periodo_w, null, null, null, null, cd_conta_financ_regra_w);

			if (cd_conta_financ_regra_w IS NOT NULL AND cd_conta_financ_regra_w::text <> '') or (cd_conta_cred_w IS NOT NULL AND cd_conta_cred_w::text <> '') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_classif_w
				from	titulo_pagar_classif a
				where	a.nr_titulo	= nr_titulo_w
				and	coalesce(a.cd_conta_contabil,'X') = coalesce(cd_conta_cred_w,'X')
				and	coalesce(a.nr_seq_conta_financ,coalesce(cd_conta_financ_regra_w,0)) = coalesce(cd_conta_financ_regra_w,0);
				
				if (coalesce(nr_seq_classif_w::text, '') = '') then
				
					select	coalesce(max(nr_sequencia),0) + 1
					into STRICT	nr_seq_classif_w
					from	titulo_pagar_classif
					where	nr_titulo	= nr_titulo_w;
					
					if (vl_titulo_rateio_w > vl_liquido_w) then
						vl_titulo_rateio_w	:= dividir_sem_round(vl_liquido_w,vl_titulo_rateio_w) * vl_titulo_rateio_w;
					else
						vl_titulo_rateio_w	:= dividir_sem_round(vl_titulo_rateio_w,vl_liquido_w) * vl_liquido_w;
					end if;
					
					insert into titulo_pagar_classif(
						dt_atualizacao, nm_usuario, nr_seq_conta_financ,
						nr_sequencia, nr_titulo, vl_acrescimo,
						vl_desconto, vl_original, vl_titulo,
						cd_conta_contabil
					) values (
						clock_timestamp(), nm_usuario_p, cd_conta_financ_regra_w,
						nr_seq_classif_w, nr_titulo_w, 0,
						0, vl_titulo_rateio_w, vl_titulo_rateio_w,
						cd_conta_cred_w
					);
				else
					update	titulo_pagar_classif
					set	vl_original	= vl_original + coalesce(vl_titulo_rateio_w, 0),
						vl_titulo	= vl_titulo   + coalesce(vl_titulo_rateio_w, 0)
					where	nr_titulo	= nr_titulo_w
					and	nr_sequencia	= nr_seq_classif_w;
				end if;
			end if;
			end;
		end loop;
		close C11;
		
		update	pls_pag_prest_vencimento
		set	nr_titulo	= nr_titulo_w
		where	nr_sequencia	= nr_seq_vencimento_w;
		
		/* Tributos do lote */

		open C05;
		loop
		fetch C05 into
			cd_tributo_w,
			dt_imposto_w,
			vl_base_calculo_w,
			vl_tributo_w,
			pr_imposto_w,
			ie_gerar_cp_w,
			vl_nao_retido_w,
			ie_vencimento_w,
			vl_base_nao_retido_w,
			vl_trib_adic_w,
			vl_base_adic_w,
			nr_seq_trans_reg_w,
			nr_seq_trans_baixa_w,
			cd_beneficiario_w,
			nr_seq_venc_trib_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin
			select	max(a.ie_tipo_contratacao)
			into STRICT	ie_tipo_contratacao_w
			from	pls_pag_prest_venc_trib a
			where	a.nr_sequencia = nr_seq_venc_trib_w;
			
			select	max(ie_tipo_tributo)
			into STRICT	ie_tipo_tributo_w
			from	tributo
			where	cd_tributo	= cd_tributo_w;
			
			if (cd_pf_prestador_w IS NOT NULL AND cd_pf_prestador_w::text <> '') and (ie_tipo_tributo_w in ('INSS', 'IR')) then
				if (ie_forma_retencao_inss_ir_w <> 'SE') then
					ie_inss_ir_semanal_w := 'S';
				end if;
			end if;
			
			SELECT * FROM obter_dados_trib_tit_pagar(	cd_tributo_w, cd_estabelecimento_w, cd_cgc_prestador_w, cd_pf_prestador_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, cd_darf_w, dt_imposto_w, cd_variacao_w, ie_periodicidade_w, 'R', null, null, null, ie_tipo_contratacao_w, null, nr_seq_trib_cp_w, null, 0, ds_irrelevante_w, ds_irrelevante_w, vl_base_calculo_w, 'S', null, null, nr_seq_tipo_prestador_w, nr_seq_classificacao_w) INTO STRICT ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, cd_darf_w, cd_variacao_w, ie_periodicidade_w, nr_seq_trib_cp_w, ds_irrelevante_w, ds_irrelevante_w;
			
			select	max(cd_empresa)
			into STRICT	cd_empresa_w
			from	estabelecimento
			where	cd_estabelecimento	= cd_estabelecimento_w;
			
			open C09;
			loop
			fetch C09 into	
				cd_cond_pg_w;
			EXIT WHEN NOT FOUND; /* apply on C09 */
				cd_condicao_pagto_w	:= cd_cond_pg_w;
			end loop;
			close C09;
				
			select	nextval('titulo_pagar_imposto_seq')
			into STRICT	nr_seq_imposto_w
			;
			
			insert into titulo_pagar_imposto(
				nr_sequencia, nr_titulo, cd_tributo,
				ie_pago_prev, dt_atualizacao, nm_usuario,
				dt_imposto, vl_base_calculo, vl_imposto,
				ds_emp_retencao, pr_imposto, cd_conta_financ,
				nr_seq_trans_reg, nr_seq_trans_baixa, cd_beneficiario,
				cd_cond_pagto, vl_nao_retido, ie_vencimento,
				vl_base_nao_retido, vl_trib_adic, vl_base_adic,
				nm_usuario_nrec, dt_atualizacao_nrec, cd_variacao,
				ie_periodicidade, cd_darf, ie_inss_ir_semanal,
				nr_seq_pls_venc_trib, nr_seq_trib_cp
			) values (
				nr_seq_imposto_w, nr_titulo_w, cd_tributo_w,
				'V', clock_timestamp(), nm_usuario_p,
				dt_imposto_w, vl_base_calculo_w, vl_tributo_w,
				null, pr_imposto_w, null,
				nr_seq_trans_reg_w, nr_seq_trans_baixa_w, cd_beneficiario_w,
				cd_condicao_pagto_w, vl_nao_retido_w, ie_vencimento_w,
				vl_base_nao_retido_w, vl_trib_adic_w, vl_base_adic_w,
				nm_usuario_p, clock_timestamp(), cd_variacao_w,
				ie_periodicidade_w, cd_darf_w, ie_inss_ir_semanal_w,
				nr_seq_venc_trib_w, nr_seq_trib_cp_w
			);

			if (cd_pf_prestador_w IS NOT NULL AND cd_pf_prestador_w::text <> '') and (ie_tipo_tributo_w in ('INSS', 'IR')) then
				if (ie_forma_retencao_inss_ir_w <> 'SE') then
					if (ie_gerar_cp_w = 'S') then
						if (coalesce(vl_tributo_w,0) > 0) then
							CALL gerar_titulo_tributo(nr_seq_imposto_w, nm_usuario_p);
						end if;
					end if;
				end if;
			elsif (ie_gerar_cp_w = 'S') and (coalesce(vl_tributo_w,0) > 0) then
				CALL gerar_titulo_tributo(nr_seq_imposto_w, nm_usuario_p);
			end if;

			-- OS 494676, vincular aos tributos do vencimento os devidos titulos gerados
			select	max(nr_titulo)
			into STRICT	nr_titulo_tributo_w
			from	titulo_pagar
			where	nr_seq_tributo = nr_seq_imposto_w
			and	nr_titulo_original = nr_titulo_w;
			
			if (nr_titulo_tributo_w IS NOT NULL AND nr_titulo_tributo_w::text <> '') then
				update	titulo_pagar
				set	nr_seq_pls_venc_trib	= nr_seq_venc_trib_w
				where	nr_titulo		= nr_titulo_tributo_w;
			end if;
			
			exception
			when others then
				ds_erro_w	:= sqlerrm(SQLSTATE);
				CALL wheb_mensagem_pck.exibir_mensagem_abort(178536,'DS_ERRO=' || ds_erro_w);
			end;
		end loop;
		close C05;
		
		CALL Atualizar_Saldo_Tit_Pagar(nr_titulo_w,nm_usuario_p);
		
		-- ?adicionado na obs "T?lo gerado a partir de um lote de pagamento para recurso pr?o, liquidado sem pagamento"
		if (ie_recurso_proprio_w = 'S')  then
			
			update	titulo_pagar
			set	ds_observacao_titulo	= CASE WHEN ds_observacao_titulo='' THEN  'T?lo gerado a partir de um lote de pagamento para recurso pr?o, liquidado sem pagamento'  ELSE pls_util_pck.enter_w || 'T?lo gerado a partir de um lote de pagamento para recurso pr?o, liquidado sem pagamento' END
			where	nr_titulo		= nr_titulo_w
			and	vl_saldo_titulo		= 0;
		end if;
		
		
	else
		/* Gerar t?los para os tributos */

		-- jlsilva OS 1201893, passado o if do valor liquido para depois dos tributos, isso pois mesmo que o valor liquido seja 0 (zero) ainda
		-- sim precisamos gerar os t?los dos tributos caso o valor dos mesmos sejam maior que zero
		open C05;
		loop
		fetch C05 into	
			cd_tributo_w,
			dt_imposto_w,
			vl_base_calculo_w,
			vl_tributo_w,
			pr_imposto_w,
			ie_gerar_cp_w,
			vl_nao_retido_w,
			ie_vencimento_w,
			vl_base_nao_retido_w,
			vl_trib_adic_w,
			vl_base_adic_w,
			nr_seq_trans_reg_w,
			nr_seq_trans_baixa_w,
			cd_beneficiario_w,
			nr_seq_venc_trib_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			-- o cadastro do tributo deve estar setado para gerar o t?lo e o valor do tributo deve ser maior que zero
			if (ie_gerar_cp_w = 'S') and (vl_tributo_w > 0) then

				CALL pls_gerar_tit_trib_lote_pag(	nr_seq_pag_prest_p, nr_seq_venc_trib_w, vl_tributo_w,
								cd_moeda_w, vl_base_calculo_w, cd_cgc_prestador_w,
								cd_pf_prestador_w, cd_estabelecimento_w, cd_tributo_w,
								coalesce(dt_imposto_w,dt_vencimento_w), dt_emissao_w, nm_usuario_p);
			end if;
		end loop;
		close C05;

		-- aqui s?ve entrar caso seja diferente de zero
		if (vl_liquido_w <> 0) then

			if (ie_saldo_negativo_venc_w IS NOT NULL AND ie_saldo_negativo_venc_w::text <> '') and (ie_saldo_negativo_venc_w <> 'CP') then /* Se no vencimento n?estiver como conforme prestador, pega do vencimento */
				ie_saldo_negativo_w	:= ie_saldo_negativo_venc_w;
			elsif (ie_saldo_negativo_prest_w = 'CP') then /* Se no prestador n?tratar ou estiver conforme par?tro, pega regra geral */
				ie_saldo_negativo_w	:= ie_saldo_negativo_param_w;
			else
				ie_saldo_negativo_w	:= ie_saldo_negativo_prest_w;
			end if;
			
			if (ie_saldo_negativo_w = 'TR') and ((qt_pag_negativo_max_w > 0) or (vl_minimo_tit_liq_w > 0)) then

				ie_gerar_titulo_w := 'S';
				qt_pag_negativo_ant_w := 0;
				
				begin
					select	max(b.dt_geracao_titulos)
					into STRICT	dt_ultima_ger_tit_w
					from	pls_pag_prest_vencimento	d,
						pls_periodo_pagamento 		a,
						pls_pagamento_prestador 	c,
						pls_lote_pagamento		b
					where	c.nr_sequencia			= d.nr_seq_pag_prestador
					and	b.nr_sequencia			= c.nr_seq_lote
					and	b.nr_seq_periodo		= a.nr_sequencia
					and	c.nr_seq_prestador		= nr_seq_prestador_w
					and	b.dt_mes_competencia <= dt_emissao_w
					and	b.nr_sequencia <> nr_seq_lote_w
					and	coalesce(a.ie_complementar,'N') <> 'S'
					and	(d.nr_titulo_receber IS NOT NULL AND d.nr_titulo_receber::text <> '')
					and	coalesce(c.ie_cancelamento::text, '') = ''
					and	(b.dt_fechamento IS NOT NULL AND b.dt_fechamento::text <> '');
				exception
					when others then
					dt_ultima_ger_tit_w := null;
				end;
				
				open C02;
				loop
				fetch C02 into	
					nr_seq_lote_w,
					dt_mes_competencia_ww,
					nr_fluxo_pgto_w;
				EXIT WHEN NOT FOUND or ie_gerar_titulo_w = 'N';  /* apply on C02 */
					
					select	coalesce(sum(vl_item),0)
					into STRICT 	vl_pagamento_item_w
					from	pls_pagamento_item	b,
						pls_pagamento_prestador	a
					where	a.nr_sequencia		= b.nr_seq_pagamento
					and	a.nr_seq_lote 		= nr_seq_lote_w
					and	a.nr_seq_prestador 	= nr_seq_prestador_w;	
					
					if (vl_pagamento_item_w > 0) then
						ie_gerar_titulo_w	:= 'N';
					else
						qt_pag_negativo_ant_w	:= qt_pag_negativo_ant_w + 1;
					end if;
					
				end loop;
				close C02;
				
				if (qt_pag_negativo_ant_w < qt_pag_negativo_max_w) or (ie_gerar_titulo_w = 'N') then
					ie_saldo_negativo_w	:= null;
				end if;
				
				ie_elim_regra_valor_min_w	:= 'N';
				if (ie_saldo_negativo_w IS NOT NULL AND ie_saldo_negativo_w::text <> '') and (vl_minimo_tit_liq_w > 0) and (abs(vl_liquido_w) < vl_minimo_tit_liq_w) then
					ie_saldo_negativo_w		:= null;
					ie_elim_regra_valor_min_w	:= 'S';
				end if;
			end if;
			
			if (ie_saldo_negativo_w in ('PP', 'AT')) then

				update	pls_pag_prest_vencimento
				set	ie_proximo_pgto	= 'S'
				where	nr_sequencia	= nr_seq_vencimento_w;

			elsif (ie_saldo_negativo_w = 'TR') then

				-- Obter dados de recebimento do prestador
				SELECT * FROM pls_obter_dados_prestador_rec(	nr_seq_prestador_w, null, nr_seq_conta_banco_w, ie_bloqueto_w, nr_seq_carteira_cobr_rec_w, nr_seq_trans_fin_contab_rec_w, nr_seq_trans_fin_baixa_rec_w, ds_observacao_rec_w, ie_data_emissao_geracao_w, qt_dias_vencimento_w, nr_seq_forma_cobranca_w) INTO STRICT nr_seq_conta_banco_w, ie_bloqueto_w, nr_seq_carteira_cobr_rec_w, nr_seq_trans_fin_contab_rec_w, nr_seq_trans_fin_baixa_rec_w, ds_observacao_rec_w, ie_data_emissao_geracao_w, qt_dias_vencimento_w, nr_seq_forma_cobranca_w;

				
				if (coalesce(trim(both ds_observacao_rec_w)::text, '') = '') then
					ds_observacao_rec_w := 'C?rest: '||cd_prestador_w;
				end if;
				
				if (cd_cgc_prestador_w IS NOT NULL AND cd_cgc_prestador_w::text <> '') then
					tx_juros_cr_w := tx_juros_pj_cr_w;
					tx_multa_cr_w := tx_multa_pj_cr_w;
				end if;
				
				if (coalesce(ie_data_emissao_geracao_w,'N') = 'S') then
					dt_emissao_w	:= clock_timestamp();
					dt_vencimento_w	:= dt_emissao_w + coalesce(qt_dias_vencimento_w,0);
				end if;
				
				select	nextval('titulo_seq')
				into STRICT	nr_titulo_receber_w
				;
				
				insert into titulo_receber(
					nr_titulo, dt_atualizacao, nm_usuario,
					dt_inclusao, nm_usuario_orig, dt_vencimento,
					ie_situacao, cd_portador, ie_tipo_inclusao,
					ie_origem_titulo, dt_pagamento_previsto, cd_tipo_taxa_multa,
					cd_moeda, ie_tipo_titulo, cd_tipo_portador,
					cd_estabelecimento, vl_titulo, dt_emissao,
					dt_contabil, cd_tipo_taxa_juro, tx_desc_antecipacao,
					ie_tipo_emissao_titulo, vl_saldo_titulo, vl_saldo_juros,
					vl_saldo_multa, tx_juros, tx_multa,
					cd_pessoa_fisica, cd_cgc, nr_seq_conta_banco,
					nr_seq_classe, nr_seq_trans_fin_baixa, nr_seq_carteira_cobr,
					nr_seq_trans_fin_contab, ds_observacao_titulo, cd_estab_financeiro

				) values (
					nr_titulo_receber_w, clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, dt_vencimento_w,
					'1', cd_portador_w, '2',
					'12', dt_vencimento_w, cd_tipo_taxa_multa_w,
					cd_moeda_w, CASE WHEN nr_seq_forma_cobranca_w=2 THEN  '10'  ELSE '1' END , cd_tipo_portador_w,
					cd_estabelecimento_w, vl_liquido_w * -1, dt_emissao_w,
					dt_emissao_w, cd_tipo_taxa_juro_w, 0,
					'1', vl_liquido_w * -1, 0,
					0, coalesce(tx_juros_cr_w,0), coalesce(tx_multa_cr_w,0),
					cd_pf_prestador_w, cd_cgc_prestador_w, nr_seq_conta_banco_w,
					nr_seq_classe_pgto_neg_w, coalesce(nr_seq_trans_fin_baixa_w, nr_seq_trans_fin_baixa_rec_w), nr_seq_carteira_cobr_rec_w,
					nr_seq_trans_fin_contab_rec_w, ds_observacao_rec_w, cd_estab_financeiro_w

				);
					
				update	pls_pag_prest_vencimento
				set	nr_titulo_receber	= nr_titulo_receber_w
				where	nr_sequencia		= nr_seq_vencimento_w;
				
				cd_conta_financ_cr_w := pls_obter_conta_financ_regra(	'TRP', null, cd_estabelecimento_w, null, null, null, null, nr_seq_prestador_w, null, null, null, null, nr_seq_periodo_w, null, null, null, null, cd_conta_financ_cr_w);
								
				if (cd_conta_financ_cr_w IS NOT NULL AND cd_conta_financ_cr_w::text <> '') then
					insert into titulo_receber_classif(	nr_titulo,		nr_sequencia,		nm_usuario,
										dt_atualizacao,		cd_conta_financ,	vl_original,
										vl_classificacao,	vl_desconto)
									values (nr_titulo_receber_w,	1,			nm_usuario_p,
										clock_timestamp(),		cd_conta_financ_cr_w,	vl_liquido_w * -1,
										vl_liquido_w * -1,	0);
				end if;
				
				-- Verifica se deve ser gerado n?mero do bloqueto para este prestador
				if (coalesce(ie_bloqueto_w,'N') = 'S') then
					CALL gerar_bloqueto_tit_rec(nr_titulo_receber_w, 'OPSPPM');
				end if;
			end if;

			if (ie_elim_regra_valor_min_w = 'S') and (coalesce(ie_pag_prest_venc_valor_w,'N') = 'S') then

				for r_C00_w in C00 loop
					update	pls_pag_prest_venc_valor
					set	ie_tipo_valor	= 'PP',
						ds_observacao	 = NULL
					where	nr_sequencia	= r_C00_w.nr_sequencia;
				end loop;
			end if;

			--aaschlote 18/03/2016 OS 1034279 - Caso o pagamento seja negativo ou zerado, verifica se tem contas vinculadas ao pagamentos e tenta colocar o status do protocolo como pago
			CALL pls_atualiza_prot_pag_prod(null,nr_seq_vencimento_w,nm_usuario_p);
		end if;
	end if;
	end;
end loop;
close C04;

open C03;
loop
fetch C03 into	
	nr_titulo_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	update	titulo_pagar
	set	nr_seq_trans_fin_baixa	= nr_seq_trans_fin_baixa_conta_w
	where	nr_titulo = nr_titulo_w;
	end;
end loop;
close C03;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_titulo_venc_lote_pag ( nr_seq_pag_prest_p pls_pagamento_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

