-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hem_duplicar_laudo ( nr_seq_laudo_p bigint, nr_seq_proc_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_proc_ant_w	bigint;
nr_seq_laudo_novo_w	bigint;
nr_seq_conduta_w	bigint;
nr_seq_complicacao_w	bigint;
ds_obs_laudo_w		varchar(255);
ds_laudo_w		varchar(32000);
nr_seq_coron_w		hem_coronariografia.nr_sequencia%type;
nr_seq_coron_novo_w	hem_coronariografia.nr_sequencia%type;
nr_seq_vaso_w		hem_coronariografia.nr_seq_vaso%type;
nr_seq_importancia_w	hem_coronariografia.nr_seq_importancia%type;
nr_seq_segmento_w	hem_coronariografia.nr_seq_segmento%type;
pr_obstrucao_w		hem_coronariografia.pr_obstrucao%type;
nr_seq_tipo_lesao_w	hem_coronariografia.nr_seq_tipo_lesao%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nextval('hem_coronariografia_seq'),
		nr_seq_vaso,
		nr_seq_importancia,
		nr_seq_segmento,
		pr_obstrucao,
		nr_seq_tipo_lesao
	from	hem_coronariografia
	where	nr_seq_proc = nr_seq_proc_ant_w;


BEGIN
if (coalesce(nr_seq_laudo_p,0) > 0) then

	select	max(nr_seq_proc)
	into STRICT	nr_seq_proc_ant_w
	from	hem_laudo
	where	nr_sequencia = nr_seq_laudo_p;

	select	nextval('hem_laudo_seq')
	into STRICT	nr_seq_laudo_novo_w
	;

	select	ds_laudo,
		ds_obs_laudo,
		nr_seq_conduta,
		nr_seq_complicacao
	into STRICT	ds_laudo_w,
		ds_obs_laudo_w,
		nr_seq_conduta_w,
		nr_seq_complicacao_w
	from	hem_laudo
	where	nr_sequencia = nr_seq_laudo_p;

	insert into hem_laudo(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_registro,
		ds_laudo,
		dt_liberacao,
		nm_usuario_lib,
		ds_obs_laudo,
		nr_seq_conduta,
		nr_seq_proc,
		nr_seq_complicacao
	) values (
		nr_seq_laudo_novo_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		ds_laudo_w,
		null,
		null,
		ds_obs_laudo_w,
		nr_seq_conduta_w,
		nr_seq_proc_p,
		nr_seq_complicacao_w);

	insert into hem_manometria_completa(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_proc,
		nr_seq_analise,
		ie_tipo,
		qt_pa_sistolica,
		qt_pa_diastolica_ini,
		qt_pa_diastolica_fim,
		qt_pam,
		nr_seq_laudo
		) (
		SELECT	nextval('hem_manometria_completa_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_proc_p,
			nr_seq_analise,
			ie_tipo,
			qt_pa_sistolica,
			qt_pa_diastolica_ini,
			qt_pa_diastolica_fim,
			qt_pam,
			nr_seq_laudo_novo_w
		from	hem_manometria_completa
		where	nr_seq_proc = nr_seq_proc_ant_w);

	insert into hem_analise_manometria(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_analise,
		nr_seq_manometria,
		nr_seq_laudo,
		nr_seq_proc
		)(
		SELECT	nextval('hem_analise_manometria_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_analise,
			nr_seq_manometria,
			nr_seq_laudo_novo_w,
			nr_seq_proc_p
		from	hem_analise_manometria
		where	nr_seq_proc = nr_seq_proc_ant_w);

	open C01;
	loop
	fetch C01 into
		nr_seq_coron_w,
		nr_seq_coron_novo_w,
		nr_seq_vaso_w,
		nr_seq_importancia_w,
		nr_seq_segmento_w,
		pr_obstrucao_w,
		nr_seq_tipo_lesao_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		insert into hem_coronariografia(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_vaso,
			nr_seq_importancia,
			nr_seq_segmento,
			pr_obstrucao,
			nr_seq_tipo_lesao,
			nr_seq_proc,
			nr_seq_laudo)
		values (	nr_seq_coron_novo_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_vaso_w,
			nr_seq_importancia_w,
			nr_seq_segmento_w,
			pr_obstrucao_w,
			nr_seq_tipo_lesao_w,
			nr_seq_proc_p,
			nr_seq_laudo_novo_w);

		insert into hem_coron_localizacao(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_coron,
				nr_seq_segmento
		)(
		SELECT 	nextval('hem_coron_localizacao_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_coron_novo_w,
				nr_seq_segmento
		from	hem_coron_localizacao
		where	nr_seq_coron = nr_seq_coron_w
		);

		end;
	end loop;
	close C01;

	insert into hem_ventriculografia_proc(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_proc,
		nr_seq_ventric_ve,
		nr_seq_ventric_vd,
		nr_seq_laudo
		)(
		SELECT	nextval('hem_ventriculografia_proc_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_proc_p,
			nr_seq_ventric_ve,
			nr_seq_ventric_vd,
			nr_seq_laudo_novo_w
		from	hem_ventriculografia_proc
		where	nr_seq_proc = nr_seq_proc_ant_w);

	insert into hem_cineangiocard_proc(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_proc,
		nr_seq_cineangioc,
		nr_seq_laudo
		)(
		SELECT	nextval('hem_cineangiocard_proc_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_proc_p,
			nr_seq_cineangioc,
			nr_seq_laudo_novo_w
		from	hem_cineangiocard_proc
		where	nr_seq_proc = nr_seq_proc_ant_w);

	insert into hem_circulacao_colateral(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			ie_circulacao_col,
			nr_seq_fonte_dir,
			nr_seq_intensidade,
			nr_seq_laudo,
			nr_seq_proc
		)(
		SELECT	nextval('hem_circulacao_colateral_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			ie_circulacao_col,
			nr_seq_fonte_dir,
			nr_seq_intensidade,
			nr_seq_laudo_novo_w,
			nr_seq_proc_p
		from	hem_circulacao_colateral
		where	nr_seq_proc = nr_seq_proc_ant_w);

	insert into hem_conclusao_coron(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_proc,
			ie_circulacao_col,
			nr_seq_coronaria,
			nr_seq_laudo,
			nr_seq_fonte_dir,
			nr_seq_intensidade,
			nr_seq_apresent,
			ds_observacao_laudo,
			nr_seq_inf_adic
		)(
		SELECT	nextval('hem_conclusao_coron_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_proc_p,
			ie_circulacao_col,
			nr_seq_coronaria,
			nr_seq_laudo_novo_w,
			nr_seq_fonte_dir,
			nr_seq_intensidade,
			nr_seq_apresent,
			ds_observacao_laudo,
			nr_seq_inf_adic
		from	hem_conclusao_coron
		where	nr_seq_proc = nr_seq_proc_ant_w);

	insert into hem_observacao_laudo(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			ds_observacao_laudo,
			nr_seq_proc
		)(
		SELECT	nextval('hem_observacao_laudo_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			ds_observacao_laudo,
			nr_seq_proc_p
		from	hem_observacao_laudo
		where	nr_seq_proc = nr_seq_proc_ant_w);

end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hem_duplicar_laudo ( nr_seq_laudo_p bigint, nr_seq_proc_p bigint, nm_usuario_p text) FROM PUBLIC;

