-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_contrato_intercambio ( nr_seq_intercambio_p bigint, ie_tipo_contrato_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_empresa_w		bigint;
ie_tipo_pessoa_w		smallint;
cd_cgc_cpf_w			varchar(14);
cd_cgc_w			varchar(14);
cd_cpf_w			varchar(14);
cd_unimed_origem_w		varchar(10);
cd_pessoa_fisica_w		varchar(10);
ds_razao_social_w		varchar(40);
nm_empr_abrev_w			varchar(60);
cd_cep_w			varchar(15);
ds_bairro_w 			varchar(40);
ds_complemento_w		varchar(40);
ds_endereco_w			varchar(40);
cd_municipio_ibge_w		varchar(7);
nm_cidade_w			varchar(40);
nr_ddd_w			varchar(3);
nr_fax_w			ptu_intercambio_empresa.nr_fax%type;
nr_insc_estadual_w		varchar(20);
nr_telefone_w			ptu_intercambio_empresa.nr_telefone%type;
sg_uf_w				ptu_intercambio_empresa.sg_uf%type;
dt_exclusao_w			timestamp;
dt_inclusao_w			timestamp;
nr_seq_intercabio_novo_w	bigint;
nr_seq_benef_w			bigint;
nr_seq_congenere_w		bigint;
nr_seq_intercambio_atual_w	bigint;
ie_repasse_w			varchar(1);
nr_seq_emissor_w		bigint;
ie_emite_cartao_w		varchar(1);
dt_validade_cart_param_int_w	varchar(2);
nr_seq_segurado_gerado_w	bigint;
nr_seq_intercambio_w		bigint;
qt_inconsistentes_w		bigint;
nr_seq_pagador_compl_w		bigint;
qt_registros_w			bigint;
nr_seq_emissor_atual_w		bigint;
cd_empresa_origem_w		varchar(10);
cd_empresa_origem_ww		bigint;
cd_unimed_w			varchar(10);
cd_usuario_plano_w		varchar(20);
nr_seq_benef_encontrado_w	bigint;
nr_seq_motivo_rescisao_w	bigint;
ie_alteracao_prestador_w	varchar(10);
ie_gerar_renovacao_w		varchar(10);
ie_vincular_pag_coop_a100_w	varchar(10);
nr_endereco_w			varchar(5);
nr_seq_contrato_w		bigint;

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	ptu_intercambio_empresa	a,
		ptu_intercambio_benef	b
	where	b.nr_seq_empresa	= a.nr_sequencia
	and	a.nr_seq_intercambio	= nr_seq_intercambio_p
	and	b.ie_status	= 'A'
	group by a.nr_sequencia;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	ptu_intercambio_benef
	where	nr_seq_empresa	= nr_seq_empresa_w
	and	ie_status	= 'A'
	and	coalesce(nr_seq_segurado::text, '') = ''
	order by cd_familia,cd_dependencia,nr_sequencia;

C03 CURSOR FOR
	SELECT	nr_sequencia
	from	ptu_intercambio_benef
	where	nr_seq_empresa	= nr_seq_empresa_w
	and	ie_status	= 'C'
	order by cd_familia,cd_dependencia,nr_sequencia;

C04 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_benef_encontrado
	from	ptu_intercambio_benef
	where	nr_seq_empresa	= nr_seq_empresa_w
	and	ie_status	= 'A'
	and	coalesce(nr_seq_segurado::text, '') = ''
	and	(nr_seq_benef_encontrado IS NOT NULL AND nr_seq_benef_encontrado::text <> '')
	and	ie_tipo_registro in ('A','E','R')
	order by cd_familia,cd_dependencia,nr_sequencia;


BEGIN

select	cd_unimed_origem
into STRICT	cd_unimed_origem_w
from	ptu_intercambio
where	nr_sequencia	= nr_seq_intercambio_p;

select	max(nr_sequencia)
into STRICT	nr_seq_congenere_w
from	pls_congenere
where	(cd_cooperativa)::numeric  = (cd_unimed_origem_w)::numeric;

select	coalesce(dt_base_validade_cart_inter,'B'),
	nr_seq_motivo_rescisao_a100,
	coalesce(ie_vincular_pag_coop_a100,'N')
into STRICT	dt_validade_cart_param_int_w,
	nr_seq_motivo_rescisao_w,
	ie_vincular_pag_coop_a100_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

ie_alteracao_prestador_w	:= coalesce(obter_valor_param_usuario(1286, 8, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'G');
ie_gerar_renovacao_w		:= coalesce(obter_valor_param_usuario(1286, 9, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'N');

/*Caso o beneficiario receba o pagador de fundacao, busca o pagador do contrato*/

if (ie_vincular_pag_coop_a100_w = 'S') and (ie_tipo_contrato_p	= 'F') then
	ie_vincular_pag_coop_a100_w	:= 'N';
end if;


CALL pls_usuario_pck.set_ie_commit('N');
	

open C01;
loop
fetch C01 into
	nr_seq_empresa_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	select	ie_tipo_pessoa,
		substr(cd_cgc_cpf,1,14),
		ds_razao_social,
		substr(nm_empr_abrev,1,60),
		cd_cep,
		ds_bairro,
		ds_complemento,
		ds_endereco,
		cd_municipio_ibge,
		substr(nm_cidade,1,40),
		substr(nr_ddd,1,3),
		nr_fax,
		nr_insc_estadual,
		nr_telefone,
		coalesce(sg_uf,'SC'),
		dt_exclusao,
		coalesce(dt_inclusao,clock_timestamp()),
		cd_empresa_origem,
		nr_endereco,
		nr_seq_contrato
	into STRICT	ie_tipo_pessoa_w,
		cd_cgc_cpf_w,
		ds_razao_social_w,
		nm_empr_abrev_w,
		cd_cep_w,
		ds_bairro_w,
		ds_complemento_w,
		ds_endereco_w,
		cd_municipio_ibge_w,
		nm_cidade_w,
		nr_ddd_w,
		nr_fax_w,
		nr_insc_estadual_w,
		nr_telefone_w,
		sg_uf_w,
		dt_exclusao_w,
		dt_inclusao_w,
		cd_empresa_origem_w,
		nr_endereco_w,
		nr_seq_contrato_w
	from	ptu_intercambio_empresa
	where	nr_sequencia	= nr_seq_empresa_w;
	
	select	max(ie_repasse)
	into STRICT	ie_repasse_w
	from	ptu_intercambio_benef
	where	nr_seq_empresa	= nr_seq_empresa_w;
	
	begin
	select	max(nr_seq_emissor)
	into STRICT	nr_seq_emissor_w
	from	ptu_intercambio_emissor
	where	coalesce(ie_repasse,ie_repasse_w)	= ie_repasse_w
	and	nr_seq_congenere		= nr_seq_congenere_w
	and	((ie_tipo_contrato		= ie_tipo_contrato_p) or (coalesce(ie_tipo_contrato::text, '') = ''))
	and	ie_origem_destino	in ('O','A');
	exception
	when others then
		nr_seq_emissor_w	:= null;
	end;
	
	if (coalesce(nr_seq_emissor_w::text, '') = '') then
		begin
		select	max(nr_seq_emissor)
		into STRICT	nr_seq_emissor_w
		from	ptu_intercambio_emissor
		where	coalesce(ie_repasse,ie_repasse_w)	= ie_repasse_w
		and	((ie_tipo_contrato		= ie_tipo_contrato_p) or (coalesce(ie_tipo_contrato::text, '') = ''))
		and	coalesce(nr_seq_congenere::text, '') = ''
		and	ie_origem_destino	in ('O','A');
		exception
		when others then
			nr_seq_emissor_w	:= null;
		end;
	end if;
	
	if (nr_seq_emissor_w IS NOT NULL AND nr_seq_emissor_w::text <> '') then
		ie_emite_cartao_w	:= 'S';
	elsif (coalesce(nr_seq_emissor_w::text, '') = '') then
		ie_emite_cartao_w	:= 'N';
	end if;
	
	if (ie_tipo_pessoa_w = 2) then
		cd_cgc_cpf_w	:= substr(cd_cgc_cpf_w,1,11);
		select	max(cd_pessoa_fisica)
		into STRICT	cd_pessoa_fisica_w
		from	pessoa_fisica
		where	nr_cpf	= cd_cgc_cpf_w;
		
		if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
			cd_pessoa_fisica_w	:= 'X';
		end if;	
		
		if (cd_pessoa_fisica_w = 'X') then
			cd_cpf_w	:= cd_cgc_cpf_w;
			cd_cgc_w	:= null;
			
			select	nextval('pessoa_fisica_seq')
			into STRICT	cd_pessoa_fisica_w
			;
			
			insert into pessoa_fisica(cd_pessoa_fisica, ie_tipo_pessoa, nm_pessoa_fisica,
				nr_cpf, nm_abreviado, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec)
			values (cd_pessoa_fisica_w, 1, nm_empr_abrev_w,
				cd_cgc_cpf_w, nm_empr_abrev_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p);
			
			insert into compl_pessoa_fisica(nr_sequencia, cd_pessoa_fisica, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				cd_cep, ds_bairro, ds_complemento,
				ds_endereco, cd_municipio_ibge, ds_municipio,
				nr_ddd_telefone, ds_fax, nr_telefone,
				sg_estado, ie_tipo_complemento)
			values (1, cd_pessoa_fisica_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				cd_cep_w, ds_bairro_w, ds_complemento_w,
				ds_endereco_w, cd_municipio_ibge_w, nm_cidade_w,
				nr_ddd_w, nr_fax_w, nr_telefone_w,
				sg_uf_w, 1);
		end if;
		
	elsif (ie_tipo_pessoa_w = 1) then
		select	max(cd_cgc)
		into STRICT	cd_cgc_w
		from	pessoa_juridica
		where	cd_cgc	= cd_cgc_cpf_w;
		
		if (coalesce(cd_cgc_w::text, '') = '') then
			cd_cgc_w := 'X';
		end if;
		
		if (cd_cgc_w = 'X') then
			cd_cpf_w	:= null;
			cd_cgc_w	:= cd_cgc_cpf_w;
			
			insert into pessoa_juridica(cd_cgc, ds_razao_social, nm_fantasia,
				cd_cep, ds_endereco, ds_bairro,
				ds_municipio, sg_estado, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				cd_tipo_pessoa, nr_inscricao_estadual, ie_prod_fabric,
				ie_situacao, nr_endereco)
			values (cd_cgc_w, ds_razao_social_w, ds_razao_social_w,
				cd_cep_w, ds_endereco_w, ds_bairro_w,
				nm_cidade_w, sg_uf_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				1, nr_insc_estadual_w, 'S',
				'A', nr_endereco_w);
		end if;
	end if;
	
	/*Caso nao encontra o contrato pela empresa, busca pelo beneficiario, apenas para alteracoes e exclusoes*/

	open C04;
	loop
	fetch C04 into	
		nr_seq_benef_w,
		nr_seq_benef_encontrado_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		select	max(nr_seq_intercambio)
		into STRICT	nr_seq_intercambio_atual_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_benef_encontrado_w;
		
		if (coalesce(ie_tipo_contrato_p, 'X') <> 'F') then
			CALL ptu_gerar_plano(nr_seq_empresa_w, nr_seq_intercambio_atual_w,cd_estabelecimento_p, nm_usuario_p,'N');
		end if;
		
		if (nr_seq_intercambio_atual_w IS NOT NULL AND nr_seq_intercambio_atual_w::text <> '') then
			CALL ptu_gerar_benef_intercambio(nr_seq_intercambio_atual_w,nr_seq_benef_w,nr_seq_motivo_rescisao_w,ie_alteracao_prestador_w,
							ie_gerar_renovacao_w,'L',ie_vincular_pag_coop_a100_w,nr_seq_intercambio_p,
							cd_estabelecimento_p,nm_usuario_p);
		end if;
		end;
	end loop;
	close C04;

	nr_seq_intercambio_atual_w	:= nr_seq_contrato_w;

	if (coalesce(nr_seq_intercambio_atual_w::text, '') = '') then
		select	count(*)
		into STRICT	qt_registros_w
		from	ptu_intercambio_benef
		where	nr_seq_empresa	= nr_seq_empresa_w
		and	ie_status	= 'A'
		and	coalesce(nr_seq_segurado::text, '') = '';
		
		/*Verificar se na empresa todos os beneficiarios foram encontrados, caso algum nao foi encontrado cria um novo contrato*/

		if (qt_registros_w  > 0) then
			select	nextval('pls_intercambio_seq')
			into STRICT	nr_seq_intercabio_novo_w
			;
			
			begin
			cd_empresa_origem_ww :=	(cd_empresa_origem_w)::numeric;
			exception
			when others then
			cd_empresa_origem_ww := null;
			end;

			insert into pls_intercambio(nr_sequencia, dt_atualizacao, nm_usuario,dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_congenere,cd_pessoa_fisica, cd_cgc,
				ie_emite_cartao, nr_seq_emissor,dt_exclusao, dt_inclusao,
				cd_estabelecimento,dt_aprovacao,ie_tipo_contrato,dt_base_validade_carteira,cd_operadora_empresa,
				ie_controle_carteira,ie_tipo_repasse)
			values (nr_seq_intercabio_novo_w, clock_timestamp(), nm_usuario_p,clock_timestamp(),
				nm_usuario_p, nr_seq_congenere_w,cd_pessoa_fisica_w, cd_cgc_w,
				ie_emite_cartao_w, nr_seq_emissor_w, dt_exclusao_w, dt_inclusao_w,
				cd_estabelecimento_p,clock_timestamp(),ie_tipo_contrato_p,dt_validade_cart_param_int_w,cd_empresa_origem_ww,
				'A',ie_repasse_w);
			
			update	ptu_intercambio_empresa
			set	nr_seq_contrato	= nr_seq_intercabio_novo_w
			where	nr_sequencia	= nr_seq_empresa_w;
			
			CALL pls_gerar_grupos_contr_interc(nr_seq_intercabio_novo_w,ie_repasse_w,cd_estabelecimento_p, nm_usuario_p);
		
			if (coalesce(ie_tipo_contrato_p, 'X') <> 'F') then
				CALL ptu_gerar_plano(nr_seq_empresa_w, nr_seq_intercabio_novo_w,cd_estabelecimento_p, nm_usuario_p,'N');
			end if;
			
			CALL ptu_gerar_pagador_intercambio(nr_seq_intercabio_novo_w,ie_tipo_contrato_p,cd_estabelecimento_p,nm_usuario_p);
			
			CALL pls_gerar_contrato_grupo(nr_seq_intercabio_novo_w,'I',nm_usuario_p,cd_estabelecimento_p);

			CALL ptu_gerar_campos_padrao_contr(nr_seq_intercabio_novo_w,cd_estabelecimento_p,nm_usuario_p);
			
			open C02;
			loop
			fetch C02 into
				nr_seq_benef_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				CALL ptu_gerar_benef_intercambio(nr_seq_intercabio_novo_w,nr_seq_benef_w,nr_seq_motivo_rescisao_w,ie_alteracao_prestador_w,
								ie_gerar_renovacao_w,'A',ie_vincular_pag_coop_a100_w,nr_seq_intercambio_p,
								cd_estabelecimento_p,nm_usuario_p);
				end;
			end loop;
			close C02;
			
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_segurado
			where	nr_seq_intercambio	= nr_seq_intercabio_novo_w;
			
			/*Deletar o novo contrato de intercambio, caso nao gerar beneficiarios*/

			if (qt_registros_w	= 0) then
				
				begin
				select	max(nr_sequencia)
				into STRICT	nr_seq_pagador_compl_w
				from	pls_contrato_pagador
				where	nr_seq_pagador_compl in (	SELECT	nr_sequencia
									from	pls_contrato_pagador
									where	nr_seq_pagador_intercambio	= nr_seq_intercabio_novo_w);
				exception
				when others then
					nr_seq_pagador_compl_w	:= null;
				end;					
				if (nr_seq_pagador_compl_w IS NOT NULL AND nr_seq_pagador_compl_w::text <> '') then
					delete	FROM pls_contrato_pagador
					where	nr_sequencia	= nr_seq_pagador_compl_w;
				end if;
				
				delete	FROM pls_contrato_pagador_fin
				where	nr_seq_pagador	in (	SELECT	nr_sequencia
								from	pls_contrato_pagador
								where	nr_seq_pagador_intercambio	= nr_seq_intercabio_novo_w);
				
				delete	FROM pls_contrato_pagador
				where	nr_seq_pagador_intercambio	= nr_seq_intercabio_novo_w;
				
				delete	FROM pls_preco_contrato
				where	nr_seq_intercambio	= nr_seq_intercabio_novo_w;
				
				delete	FROM pls_plano_preco
				where	nr_seq_tabela	in (	SELECT	nr_sequencia
								from	pls_tabela_preco
								where	nr_seq_contrato_inter	= nr_seq_intercabio_novo_w);
				
				delete	FROM pls_tabela_preco
				where	nr_seq_contrato_inter	= nr_seq_intercabio_novo_w;
				
				delete	FROM pls_intercambio_plano
				where	nr_seq_intercambio	= nr_seq_intercabio_novo_w;
				
				delete	FROM pls_intercambio
				where	nr_sequencia	= nr_seq_intercabio_novo_w;
			end if;
		end if;
	else
		if (dt_exclusao_w IS NOT NULL AND dt_exclusao_w::text <> '') then
			update	pls_intercambio
			set	dt_exclusao	= dt_exclusao_w
			where	nr_sequencia	= nr_seq_intercambio_atual_w;
		end if;
		
		select	max(nr_seq_emissor)
		into STRICT	nr_seq_emissor_atual_w
		from	pls_intercambio
		where	nr_sequencia	= nr_seq_intercambio_atual_w;
		
		/*Caso o contrato atual nao possuir emissor, entao inclui um emissor da regra da cooperativa*/

		if (coalesce(nr_seq_emissor_atual_w::text, '') = '') then
			update	pls_intercambio
			set	nr_seq_emissor	= nr_seq_emissor_w,
				ie_emite_cartao	= ie_emite_cartao_w
			where	nr_sequencia	= nr_seq_intercambio_atual_w;
		end if;
		
		if (coalesce(ie_tipo_contrato_p, 'X') <> 'F') then
			CALL ptu_gerar_plano(nr_seq_empresa_w, nr_seq_intercambio_atual_w,cd_estabelecimento_p, nm_usuario_p,'N');
		end if;
		
		CALL ptu_gerar_pagador_intercambio(nr_seq_intercambio_atual_w,ie_tipo_contrato_p,cd_estabelecimento_p,nm_usuario_p);
		
		open C02;
		loop
		fetch C02 into
			nr_seq_benef_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			CALL ptu_gerar_benef_intercambio(nr_seq_intercambio_atual_w,nr_seq_benef_w,nr_seq_motivo_rescisao_w,ie_alteracao_prestador_w,
							ie_gerar_renovacao_w,'L',ie_vincular_pag_coop_a100_w,nr_seq_intercambio_p,
							cd_estabelecimento_p,nm_usuario_p);
			end;
		end loop;
		close C02;
		
	end if;
	end;
end loop;
close C01;

open C03;
loop
fetch C03 into	
	nr_seq_benef_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	select	max(nr_seq_segurado)
	into STRICT	nr_seq_segurado_gerado_w
	from	ptu_intercambio_benef
	where	nr_sequencia	= nr_seq_benef_w;

	if (nr_seq_segurado_gerado_w IS NOT NULL AND nr_seq_segurado_gerado_w::text <> '') then
		select	max(nr_seq_intercambio)
		into STRICT	nr_seq_intercambio_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_gerado_w;
		
		if (coalesce(nr_seq_intercambio_w::text, '') = '') then
			CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8002,wheb_mensagem_pck.get_texto(1126542),cd_estabelecimento_p,null,null,null,null,null,null,nm_usuario_p);
		end if;
	else
		CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8002,wheb_mensagem_pck.get_texto(1126543),cd_estabelecimento_p,null,null,null,null,null,null,nm_usuario_p);
	end if;
	
	select	count(*)
	into STRICT	qt_inconsistentes_w
	from	ptu_intercambio_consist
	where	nr_seq_inter_benef	= nr_seq_benef_w;
	
	if (qt_inconsistentes_w > 0) then
		update	ptu_intercambio_benef
		set	ie_status	= 'S',
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_benef_w;
	end if;
	end;
end loop;
close C03;

CALL ptu_gerar_retorno_mov(nr_seq_intercambio_p,1,cd_estabelecimento_p,nm_usuario_p);

update	ptu_intercambio
set	dt_geracao_contrato	= clock_timestamp()
where	nr_sequencia		= nr_seq_intercambio_p;

CALL pls_usuario_pck.set_ie_commit('S');

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_contrato_intercambio ( nr_seq_intercambio_p bigint, ie_tipo_contrato_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

