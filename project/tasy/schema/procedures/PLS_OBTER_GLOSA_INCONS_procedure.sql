-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_glosa_incons (nr_seq_autorizacao_p bigint, ie_tipo_p text, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Obter as glosas das inconsistências PTU, quando a guia ou a requisição for negada.
É necessário chamar esta rotina após atualizar o status da requisição e da guia.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ x]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
IE_TIPO_P
G - guia
R - requisição
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_status_w		pls_guia_plano.ie_status%type;
ie_estagio_w		smallint;

C01 CURSOR FOR
	SELECT	distinct nr_seq_inconsistencia,
		nr_seq_material,
		nr_seq_procedimento
	from	ptu_intercambio_consist
	where	nr_seq_guia = nr_seq_autorizacao_p;

C02 CURSOR FOR
	SELECT	distinct nr_seq_inconsistencia,
		nr_seq_material,
		nr_seq_procedimento
	from	ptu_intercambio_consist
	where	nr_seq_requisicao = nr_seq_autorizacao_p;

C03 CURSOR(nr_seq_inconsistencia_w ptu_inconsistencia.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_motivo_glosa
	from	tiss_motivo_glosa a,
		pls_acao_glosa_tiss b
	where	a.nr_sequencia = b.nr_seq_motivo_glosa
	and	b.ie_situacao = 'A'
	and	b.nr_seq_inconsis_scs = nr_seq_inconsistencia_w;
BEGIN

if (ie_tipo_p = 'G') then
	begin
		select	ie_status,
			ie_estagio
		into STRICT	ie_status_w,
			ie_estagio_w
		from	pls_guia_plano
		where	nr_sequencia = nr_seq_autorizacao_p;
	exception
	when others then
		ie_status_w		:= null;
		ie_estagio_w		:= null;
	end;

	if (ie_status_w = 3 or (ie_status_w = 1 and ie_estagio_w = 10)) then
		for r_C01_w in C01 loop
			for r_C03_w in C03(r_C01_w.nr_seq_inconsistencia) loop
				if (r_c03_w.nr_seq_motivo_glosa IS NOT NULL AND r_c03_w.nr_seq_motivo_glosa::text <> '') then
					insert into pls_guia_glosa(	nr_sequencia, dt_atualizacao, nm_usuario,
							dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_motivo_glosa,
							nr_seq_guia_mat, nr_seq_guia_proc)
					values (	nextval('pls_guia_glosa_seq'), clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, r_c03_w.nr_seq_motivo_glosa,
						r_c01_w.nr_seq_material, r_c01_w.nr_seq_procedimento);
				end if;
			end loop;
		end loop;
	end if;

elsif (ie_tipo_p = 'R') then
	begin
		select	ie_estagio
		into STRICT	ie_estagio_w
		from	pls_requisicao
		where	nr_sequencia = nr_seq_autorizacao_p;
	exception
	when others then
		ie_estagio_w 	:=	null;
	end;

	if (ie_estagio_w = 7) then
		for r_C02_w in C02 loop
			for r_C03_w in C03(r_C02_w.nr_seq_inconsistencia) loop
				if (r_c03_w.nr_seq_motivo_glosa IS NOT NULL AND r_c03_w.nr_seq_motivo_glosa::text <> '') then
					insert into pls_requisicao_glosa(	nr_sequencia, dt_atualizacao, nm_usuario,
							dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_motivo_glosa,
							nr_seq_req_mat, nr_seq_req_proc)
					values (	nextval('pls_requisicao_glosa_seq'), clock_timestamp(), nm_usuario_p,
							clock_timestamp(), nm_usuario_p, r_c03_w.nr_seq_motivo_glosa,
							r_c02_w.nr_seq_material, r_c02_w.nr_seq_procedimento);
				end if;
			end loop;
		end loop;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_glosa_incons (nr_seq_autorizacao_p bigint, ie_tipo_p text, nm_usuario_p text) FROM PUBLIC;

