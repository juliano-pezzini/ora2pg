-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE Vcampos AS (nm_atributo_ww varchar(50), nr_sequencia_ww bigint, nr_seq_elemento_ww bigint, nr_seq_template_cluster_ww bigint, ds_openehr_ww varchar(50));


CREATE OR REPLACE PROCEDURE ehr_executa_sql_ehr_elemento ( nr_seq_template_p bigint, nr_seq_reg_template_p bigint, parametros_p text, /*nr_atendimento_p	in number,
						cd_pessoa_fisica_p	in varchar2,
						cd_perfil_p		in number,*/
 ie_cluster text default 'N', ie_recarregar_p INOUT text DEFAULT NULL, nr_seq_reg_template_conteudo_p bigint default 0) AS $body$
DECLARE

ds_sql_w	varchar(4000);
ds_procedure_w	varchar(60);
campos_select_w	varchar(4000);
parametros_w	varchar(250);
parametro_w	varchar(250);
nr_seq_temp_cont_w	bigint;
nr_seq_sql_w	bigint;
cont_cols_w	bigint;
ie_cluster_w	bigint;
i		bigint;
fetch_rols_w	bigint;
nr_seq_reg_template_w	bigint;ds_resultado_w	varchar(4000);
vl_resultado_w	bigint;
dt_resultado_w	timestamp;
type vetor is table of Vcampos index by integer;
vetor_campos_w	vetor;
nr_seq_item_sql_w		bigint;
nr_seq_reg_templ_w		bigint;
nr_sequencia_w			bigint;
nr_seq_elemento_w		bigint;
nr_seq_template_cluster_w	bigint;
ds_openehr_w			varchar(50);
nm_atributo_w			varchar(60);
nr_registro_cluster_w		bigint;
nr_seq_apres_w			bigint;
c02				bigint;

c01 CURSOR FOR
	SELECT	ets.DS_SQL,
		ets.DS_PROCEDURE,
		ets.NR_SEQUENCIA
	from 	ehr_template et,
		ehr_temp_sql ets
	where 	et.nr_sequencia = ets.nr_seq_template
	and 	ets.nr_seq_template = nr_seq_template_p
	and 	et.nr_sequencia = nr_seq_template_p;

c03 CURSOR FOR
	SELECT 	--etsi.nr_sequencia,
		etsi.nm_atributo,
		coalesce(etc.NR_SEQUENCIA, 0),
		coalesce(etc.NR_SEQ_ELEMENTO, 0),
		coalesce(etc.NR_SEQ_TEMPLATE_CLUSTER, 0),
		substr(obter_desc_tipo_openehr(ee.nr_seq_tipo_dado),1,50) ds_openehr,
		coalesce(etsi.nr_seq_apres, 1)
	from 	ehr_temp_sql_item etsi,
		ehr_template_conteudo etc,
		ehr_elemento ee
	where 	etsi.NR_SEQ_SQL = nr_seq_sql_w
	and	etsi.nr_seq_conteudo = etc.nr_sequencia
	and	etc.NR_SEQ_ELEMENTO = ee.nr_sequencia
	and	etc.nr_seq_template = nr_seq_template_p
	--and	((nr_seq_reg_template_conteudo_p = 0) or (etc.nr_sequencia = nr_seq_reg_template_conteudo_p))
	order 	by etsi.nr_seq_apres;


BEGIN
nr_registro_cluster_w	:= null;
ie_recarregar_p		:= 'N';
OPEN c01;
LOOP
	FETCH c01 INTO
		ds_sql_w,
		ds_procedure_w,
		nr_seq_sql_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		c02	:= DBMS_SQL.OPEN_CURSOR;
		if (ds_procedure_w IS NOT NULL AND ds_procedure_w::text <> '') then
			--loop responsavel pelas bind variables
			parametros_w := parametros_p;
			LOOP
				if (parametros_w = '') or (coalesce(parametros_w::text, '') = '') then
					EXIT;
				end	if;

				--parametros_w = todos parametros, tirando um cada laço de repetição
				--parametro_w = parametro a ser analisado atualmente
				parametro_w	:= substr(parametros_w, 1, position(';' in parametros_w) - 1);
				parametros_w	:= replace(parametros_w, parametro_w || ';', '');
				ds_sql_w	:= replace(ds_sql_w, ':' || substr(parametro_w, 1, position('=' in parametro_w)-1), substr(parametro_w, position('=' in parametro_w) + 1, length(parametro_w)));
			END	LOOP;
			/*ds_sql_w	:= replace(ds_procedure_w, ':nr_atendimento', nr_atendimento_p);
			ds_sql_w	:= replace(ds_procedure_w, ':cd_pessoa_fisica', cd_pessoa_fisica_p);
			ds_sql_w	:= replace(ds_procedure_w, ':cd_perfil', cd_perfil_p);*/
			CALL Exec_sql_Dinamico('cetrentin', 'exec ' || ds_procedure_w);
		else
			--BIND VARIABLES MANUAL
			/*ds_sql_w	:= replace(ds_sql_w, ':nr_atendimento', nr_atendimento_p);
			ds_sql_w	:= replace(ds_sql_w, ':cd_pessoa_fisica', cd_pessoa_fisica_p);
			ds_sql_w	:= replace(ds_sql_w, ':cd_perfil', cd_perfil_p);*/
			DBMS_SQL.PARSE(c02, ds_sql_w, dbms_sql.native);
			--loop responsavel pelas bind variables
			parametros_w := parametros_p;
			LOOP
				if (parametros_w = '') or (coalesce(parametros_w::text, '') = '') then
					EXIT;
				end	if;

				--parametros_w = todos parametros, tirando um cada laço de repetição
				--parametro_w = parametro a ser analisado atualmente
				parametro_w	:= substr(parametros_w, 1, position(';' in parametros_w) - 1);
				parametros_w	:= replace(parametros_w, parametro_w || ';', '');
				begin
					DBMS_SQL.BIND_VARIABLE(c02, ':' || substr(parametro_w, 1, position('=' in parametro_w)-1), substr(parametro_w, position('=' in parametro_w) + 1, length(parametro_w)));
				exception
					when others then
						null;
				end;
				--ds_sql_w	:= replace(ds_sql_w, ':' || substr(parametro_w, 1, instr(parametro_w, '=')-1), substr(parametro_w, instr(parametro_w, '=') + 1, length(parametro_w)));
			END	LOOP;


			-- define as colunas a partir da tabela ehr_temp_sql_item
			OPEN c03;
			cont_cols_w	:= 0;
			LOOP
				FETCH	c03 INTO
					--nr_seq_item_sql_w,
					nm_atributo_w,
					nr_sequencia_w,
					nr_seq_elemento_w,
					nr_seq_template_cluster_w,
					ds_openehr_w,
					nr_seq_apres_w;
				EXIT WHEN NOT FOUND; /* apply on c03 */
					cont_cols_w := nr_seq_apres_w;--cont_cols_w + 1;
					vetor_campos_w[nr_seq_apres_w].nm_atributo_ww := nm_atributo_w;
					vetor_campos_w[nr_seq_apres_w].nr_sequencia_ww := nr_sequencia_w;
					vetor_campos_w[nr_seq_apres_w].nr_seq_elemento_ww := nr_seq_elemento_w;
					vetor_campos_w[nr_seq_apres_w].nr_seq_template_cluster_ww := nr_seq_template_cluster_w;
					vetor_campos_w[nr_seq_apres_w].ds_openehr_ww := ds_openehr_w;
					dbms_sql.define_column(c02, nr_seq_apres_w, nr_sequencia_w, 4000);
			END	LOOP;
			CLOSE c03;

			--for encima das linhas
			fetch_rols_w	:= dbms_sql.execute(c02);
			LOOP
				fetch_rols_w	:= DBMS_SQL.fetch_rows(c02);
				if	fetch_rols_w <= 0 then
					EXIT;
				end	if;

				if 	ie_cluster = 'S' then
					if	coalesce(nr_registro_cluster_w::text, '') = '' then
						nr_registro_cluster_w := 1;
					else
						nr_registro_cluster_w	:= nr_registro_cluster_w + 1;
					end	if;
				end	if;
				--for encima das colunas e insere por vez
				for	i in 1..cont_cols_w loop
					begin
						if (vetor_campos_w[i].nr_sequencia_ww > 0) then
							DBMS_SQL.COLUMN_VALUE(c02, i, campos_select_w);
							if	vetor_campos_w[i].nr_seq_template_cluster_ww > 0 then
								ie_recarregar_p
												 := ehr_executa_SQL_EHR_Elemento(	vetor_campos_w[i].nr_seq_template_cluster_ww, nr_seq_reg_template_p, parametros_p, /*nr_atendimento_p,
												cd_pessoa_fisica_p,
												cd_perfil_p,*/
												'S', ie_recarregar_p);

							else
								nr_seq_item_sql_w	:= vetor_campos_w[i].nr_seq_elemento_ww;
								ds_openehr_w		:= vetor_campos_w[i].ds_openehr_ww;
								nr_seq_temp_cont_w	:= vetor_campos_w[i].nr_sequencia_ww;

								if (ds_openehr_w in ('DV_TEXT', 'DV_BOOLEAN', 'DV_CODED_TEXT', 'DV_TASY')) then
									ds_resultado_w	:= campos_select_w;
									vl_resultado_w	:= null;
									dt_resultado_w	:= null;
								elsif (ds_openehr_w in ('DV_COUNT', 'DV_QUANTITY')) then
									ds_resultado_w	:= null;
									vl_resultado_w	:= campos_select_w;
									dt_resultado_w	:= null;
								elsif (ds_openehr_w in ('DV_DATE', 'DV_DATE_TIME', 'DV_TIME')) then
									ds_resultado_w	:= null;
									vl_resultado_w	:= null;
									dt_resultado_w	:= to_date(campos_select_w,'dd/mm/yyyy hh24:mi:ss');
									--dt_resultado_w	:= campos_select_w;
								end	if;

								ie_recarregar_p	:= 'S';
								nr_seq_reg_templ_w
											 := Atualizar_Reg_Elemento(	nr_seq_temp_cont_w, nr_seq_reg_template_p, nr_seq_item_sql_w, wheb_usuario_pck.get_nm_usuario, ds_resultado_w, vl_resultado_w, dt_resultado_w, null, nr_registro_cluster_w, nr_seq_reg_templ_w
											);
							end	if;
						end	if;
					exception
						when no_data_found then
							cont_cols_w := cont_cols_w;
					end;
				END	LOOP;
			END	LOOP;
		end	if;
		DBMS_SQL.CLOSE_CURSOR(c02);
END LOOP;
CLOSE C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ehr_executa_sql_ehr_elemento ( nr_seq_template_p bigint, nr_seq_reg_template_p bigint, parametros_p text,  ie_cluster text default 'N', ie_recarregar_p INOUT text DEFAULT NULL, nr_seq_reg_template_conteudo_p bigint default 0) FROM PUBLIC;

