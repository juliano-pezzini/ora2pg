-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proced_ama (nr_sequencia_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, cd_perfil_p bigint, cd_funcao_p bigint) AS $body$
DECLARE

 
nr_prescricao_w		bigint;
nr_sequencia_w		integer;
cd_funcionario_w		varchar(10);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
cd_area_proc_w		bigint;
cd_especial_proc_w	bigint;
cd_grupo_proc_w		bigint;
qt_proc_medico_w		integer	:= 0;
qt_proc_medico2_w	integer	:= 0;
qt_proc_medico3_w	integer	:= 0;

C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_procedimento, 
		ie_origem_proced 
	from	prescr_procedimento 
	where	nr_prescricao	= nr_prescricao_w;

C02 CURSOR FOR 
	SELECT	cd_procedimento, 
		ie_origem_proced 
	from	proced_medico_ambulatorial 
	where	nr_seq_ama = nr_sequencia_p;


BEGIN 
 
OPEN C02;
LOOP 
FETCH C02 into 
	cd_procedimento_w, 
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	/* Buscar dados do procedimento executado */
 
	begin 
	select	cd_area_procedimento, 
		cd_especialidade, 
		cd_grupo_proc 
	into STRICT	cd_area_proc_w, 
		cd_especial_proc_w, 
		cd_grupo_proc_w 
	from	estrutura_procedimento_v 
	where	cd_procedimento		= cd_procedimento_w 
	and	ie_origem_proced		= ie_origem_proced_w;
	exception 
		when others then 
		cd_area_proc_w		:= null;
		cd_especial_proc_w	:= null;
		cd_grupo_proc_w 		:= null;
	end;
 
	select	count(*) 
	into STRICT	qt_proc_medico_w 
	from	sus_exclui_medico_ama 
	where (coalesce(cd_procedimento,cd_procedimento_w)		= cd_procedimento_w	or coalesce(cd_procedimento_w::text, '') = '') 
	and (coalesce(cd_area_procedimento,cd_area_proc_w)	= cd_area_proc_w 	or coalesce(cd_area_proc_w::text, '') = '') 
	and (coalesce(cd_especialidade,cd_especial_proc_w) 	= cd_especial_proc_w 	or coalesce(cd_especial_proc_w::text, '') = '') 
	and (coalesce(cd_grupo_proc,cd_grupo_proc_w)		= cd_grupo_proc_w 	or coalesce(cd_grupo_proc_w::text, '') = '') 
	and	(cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> '');
	 
	if (qt_proc_medico_w > 0) then 
		begin		 
		select	count(*) 
		into STRICT	qt_proc_medico2_w 
		from	sus_exclui_medico_ama 
		where (coalesce(cd_procedimento,cd_procedimento_w)		= cd_procedimento_w		or coalesce(cd_procedimento_w::text, '') = '') 
		and (coalesce(cd_area_procedimento,cd_area_proc_w)	= cd_area_proc_w 		or coalesce(cd_area_proc_w::text, '') = '') 
		and (coalesce(cd_especialidade,cd_especial_proc_w) 	= cd_especial_proc_w 		or coalesce(cd_especial_proc_w::text, '') = '') 
		and (coalesce(cd_grupo_proc,cd_grupo_proc_w)		= cd_grupo_proc_w 		or coalesce(cd_grupo_proc_w::text, '') = '') 
		and	cd_pessoa_fisica = cd_pessoa_fisica_p;
		 
		if (qt_proc_medico2_w = 0) then 
			--r.aise_application_error(-20011,'Esta AMA possui procedimentos que só podem ser executados pelos médicos autorizados. Cadastro geral/SUS/Cadastros/SUS regra exclui medico AMA.'); 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(263394);
		end if;
		end;
	end if;
END LOOP;
CLOSE C02;
 
nr_prescricao_w := Gerar_prescricao_AMA(nr_sequencia_p, cd_pessoa_fisica_p, nm_usuario_p, nr_prescricao_w);
 
OPEN C01;
LOOP 
FETCH C01 into 
	nr_sequencia_w, 
	cd_procedimento_w, 
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	CALL gerar_proc_pac_prescricao(nr_prescricao_w, 
		nr_sequencia_w, 
		cd_perfil_p, 
		cd_funcao_p, 
		nm_usuario_p, 
		null, 
		null, null);
 
	/* Busca o responsável da AMA*/
 
	select	cd_medico_resp 
	into STRICT	cd_funcionario_w 
	from	atend_medico_ambulatorial 
	where	nr_sequencia	= nr_sequencia_p;
 
	/* Caso não haja médico, atualiza o funcionário do procedimento com o responsável pela AMA*/
 
	update	procedimento_paciente 
	set	cd_pessoa_fisica		= cd_funcionario_w 
	where	nr_prescricao		= nr_prescricao_w 
	and	nr_sequencia_prescricao	= nr_sequencia_w 
	and	coalesce(cd_medico_executor::text, '') = '';
 
	/* Buscar dados do procedimento executado */
 
	begin 
	select	cd_area_procedimento, 
		cd_especialidade, 
		cd_grupo_proc 
	into STRICT	cd_area_proc_w, 
		cd_especial_proc_w, 
		cd_grupo_proc_w 
	from	estrutura_procedimento_v 
	where	cd_procedimento		= cd_procedimento_w 
	and	ie_origem_proced	= ie_origem_proced_w;
	exception 
		when others then 
		cd_area_proc_w		:= null;
		cd_especial_proc_w	:= null;
		cd_grupo_proc_w 	:= null;
	end;
 
	/* verifica se pode haver medico para o procedimento AMA, caso não possa, seta nulo o campo medico executor*/
 
	select	count(*) 
	into STRICT	qt_proc_medico3_w 
	from	sus_exclui_medico_ama 
	where (coalesce(cd_procedimento,cd_procedimento_w)	= cd_procedimento_w	or coalesce(cd_procedimento_w::text, '') = '') 
	and (coalesce(cd_area_procedimento,cd_area_proc_w)	= cd_area_proc_w 	or coalesce(cd_area_proc_w::text, '') = '') 
	and (coalesce(cd_especialidade,cd_especial_proc_w) 	= cd_especial_proc_w 	or coalesce(cd_especial_proc_w::text, '') = '') 
	and (coalesce(cd_grupo_proc,cd_grupo_proc_w)		= cd_grupo_proc_w 	or coalesce(cd_grupo_proc_w::text, '') = '');
	 
	if (qt_proc_medico3_w	> 0) then 
		update	procedimento_paciente 
		set	cd_medico_executor	= '' 
		where	nr_prescricao		= nr_prescricao_w 
		and	nr_sequencia_prescricao	= nr_sequencia_w;
	end if;
END LOOP;
CLOSE C01;
--OS 320176 
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proced_ama (nr_sequencia_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, cd_perfil_p bigint, cd_funcao_p bigint) FROM PUBLIC;

