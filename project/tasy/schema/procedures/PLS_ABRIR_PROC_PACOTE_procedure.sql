-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_abrir_proc_pacote ( nr_seq_preco_pacote_p bigint, nr_seq_conta_p bigint, nr_seq_autorizacao_p bigint, nr_seq_requisicao_p bigint, ie_tipo_p text, nr_seq_prestador_p bigint, ie_tipo_guia_p text, dt_referencia_p timestamp, nm_usuario_p text, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type default null) AS $body$
DECLARE


/*
 IE_TIPO_P
CC - CONSISTENCIA DA  CONTA,
A - AUTORIZACAO,
I5 - IMPORTACAO DO A500 INTERCAMBIO,
F - FATURAMENTO
R - REQUISICAO
*/
ds_teste_w                      varchar(100);
dt_emissao_w                    timestamp;
nr_seq_pacote_w                 bigint;
ie_classificacao_w              varchar(2);
nr_seq_regra_pacote_w           bigint;
qt_registro_w                   bigint;
cd_proced_pacote_w              bigint;
cd_estabelecimento_w            bigint;
nr_seq_req_proc_w               bigint;
nr_seq_req_mat_w		bigint;
nr_seq_guia_proc_w              bigint;
nr_seq_guia_mat_w		bigint;
nr_seq_composicao_w             bigint;
ie_abrir_contas_medicas_w       varchar(1);
ie_abrir_autorizacao_w          varchar(1);
ie_abrir_a500_w                 varchar(1);
ie_abrir_faturamento_w          varchar(1);
ie_abrir_requisicao_w           varchar(1);
nr_seq_pos_estab_w		bigint;
dt_inicio_vigencia_comp_w	pls_pacote_composicao.dt_inicio_vigencia%type;
dt_fim_vigencia_comp_w		pls_pacote_composicao.dt_fim_vigencia%type;
qt_procedimento_req_w		pls_conta_proc.qt_procedimento%type;
qt_material_req_w		pls_conta_mat.qt_material%type;
ie_lanca_comp_existente_w	varchar(1);
qt_procedimento_w		bigint;
qt_material_w			bigint;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
ie_origem_pacote_item_w		pls_pacote.ie_origem_proced%type;
ie_tipo_processo_w		pls_requisicao.ie_tipo_processo%type;
qt_itens_w			pls_conta_proc.qt_procedimento_imp%type := 1;
qt_itens_lancados_w		pls_conta_proc.qt_procedimento_imp%type := 0;
qt_itens_atualizar_w		pls_conta_proc.qt_procedimento_imp%type := 0;
nr_seq_proc_atualizar_w		pls_conta_proc.nr_sequencia%type;
qt_atual_proc_w			pls_conta_proc.qt_procedimento_imp%type;
cd_proc_ref_w			pls_conta_proc.cd_procedimento%type;
ie_origem_proc_ref_w		pls_conta_proc.ie_origem_proced%type;
qt_total_itens_w		pls_conta_proc.qt_procedimento_imp%type;
itens_nao_vinculados_w		integer := 0;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
ie_origem_conta_w		pls_conta.ie_origem_conta%type;
nr_seq_tipo_atendimento_w	pls_conta.nr_seq_tipo_atendimento%type;
ie_tipo_despesa_w		pls_conta_proc.ie_tipo_despesa%type;
nr_seq_segurado_w		pls_conta.nr_seq_segurado%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_evento_w			pls_conta_proc.nr_seq_evento%type;
nr_seq_evento_prod_w		pls_conta_proc.nr_seq_evento_prod%type;
ie_composicao_pacote_w		pls_pacote_tipo_acomodacao.ie_composicao_pacote%type;

nr_seq_item_tiss_w		pls_conta_proc_regra.nr_seq_item_tiss%type;
nr_seq_item_tiss_vinculo_w	pls_conta_proc_regra.nr_seq_item_tiss_vinculo%type;
nr_seq_conta_proc_regra_w	pls_conta_proc_regra.nr_sequencia%type;
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_conta.ie_saude_ocupacional%type;


C01 CURSOR(	nr_seq_composicao_pc	pls_pacote_composicao.nr_sequencia%type,
		dt_referencia_pc	timestamp,
		nr_seq_prestador_pc	pls_pacote_procedimento.nr_seq_prestador%type,
		ie_tipo_guia_pc		pls_pacote_procedimento.ie_tipo_guia%type) FOR
        SELECT  b.vl_negociado,
                b.cd_procedimento,
                b.ie_origem_proced,
                b.ie_situacao,
                coalesce(b.qt_procedimento,1) qt_procedimento,
                b.nr_sequencia
        from    pls_pacote_composicao	a,
		pls_pacote_procedimento	b
        where   a.nr_sequencia		= nr_seq_composicao_pc
	and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (a.dt_inicio_vigencia <= dt_referencia_pc))
	and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (a.dt_fim_vigencia >= dt_referencia_pc))
	and	b.nr_seq_composicao	= a.nr_sequencia
        and     b.ie_situacao     	= 'A'
        and     b.ie_estrutura    	= 'S'
        and     ((coalesce(b.nr_seq_prestador::text, '') = '') or (b.nr_seq_prestador = nr_seq_prestador_pc))
        and     ((coalesce(b.ie_tipo_guia::text, '') = '') or (b.ie_tipo_guia = ie_tipo_guia_pc));

C02 CURSOR(	nr_seq_composicao_pc	pls_pacote_composicao.nr_sequencia%type,
		dt_referencia_pc	timestamp,
		nr_seq_prestador_pc	pls_pacote_procedimento.nr_seq_prestador%type,
		ie_tipo_guia_pc		pls_pacote_procedimento.ie_tipo_guia%type) FOR
        SELECT  b.vl_negociado,
                b.cd_material,
                b.ie_situacao,
                coalesce(b.qt_material,1) qt_material,
                b.nr_sequencia,
                b.nr_seq_material
        from    pls_pacote_composicao	a,
		pls_pacote_material	b
        where   a.nr_sequencia		= nr_seq_composicao_pc
	and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (a.dt_inicio_vigencia <= dt_referencia_pc))
	and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (a.dt_fim_vigencia >= dt_referencia_pc))
	and	b.nr_seq_composicao	= a.nr_sequencia
        and     b.ie_situacao     	= 'A'
        and     ((coalesce(b.nr_seq_prestador::text, '') = '') or (b.nr_seq_prestador = nr_seq_prestador_pc))
        and     ((coalesce(b.ie_tipo_guia::text, '') = '') or (b.ie_tipo_guia = ie_tipo_guia_pc));

BEGIN

if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then

	--Quantidade apresentada no item sendo "aberto".
	select 	qt_procedimento_imp,
		cd_procedimento,
		ie_origem_proced,
		ie_tipo_guia,
		ie_origem_conta,
		nr_seq_tipo_atendimento,
		nr_seq_segurado,
		nr_seq_conta,
		cd_estabelecimento,
		ie_regime_atendimento,
		ie_saude_ocupacional	
	into STRICT	qt_itens_w,
		cd_proc_ref_w,
		ie_origem_proc_ref_w,
		ie_tipo_guia_w,
		ie_origem_conta_w,
		nr_seq_tipo_atendimento_w,
		nr_seq_segurado_w,
		nr_seq_conta_w,
		cd_estabelecimento_w,
		ie_regime_atendimento_w,	
		ie_saude_ocupacional_w	
	from	pls_conta_proc_v
	where	nr_sequencia = nr_seq_conta_proc_p;
	
	--Verifica a quantidade de itens totais, considerando a possibilidade de pacote

	--ser informado mais de uma vez
	select	sum(qt_procedimento_imp)
	into STRICT	qt_total_itens_w
	from	pls_conta_proc
	where	nr_seq_conta = nr_seq_conta_p
	and	cd_procedimento  	= cd_proc_ref_w
	and	ie_origem_proced 	= ie_origem_proc_ref_w
	and	nr_seq_preco_pacote     = nr_seq_preco_pacote_p
	and	ie_status <> 'D';
					
end if;

begin
	select  nr_seq_pacote,
		nr_seq_composicao,
		ie_abrir_contas_medicas,
		ie_abrir_autorizacao,
		ie_abrir_a500,
		ie_abrir_faturamento,
		ie_abrir_requisicao,
		ie_lanca_comp_existente,
		coalesce(ie_composicao_pacote, 'N')
	into STRICT    nr_seq_pacote_w,
		nr_seq_composicao_w,
		ie_abrir_contas_medicas_w,
		ie_abrir_autorizacao_w,
		ie_abrir_a500_w,
		ie_abrir_faturamento_w,
		ie_abrir_requisicao_w,
		ie_lanca_comp_existente_w,
		ie_composicao_pacote_w
	from    pls_pacote_tipo_acomodacao
	where   nr_sequencia    = nr_seq_preco_pacote_p;
exception
when others then
	nr_seq_pacote_w			:= 0;
	nr_seq_composicao_w		:= 0;
	ie_abrir_contas_medicas_w	:= 'X';
	ie_abrir_autorizacao_w		:= 'X';
	ie_abrir_a500_w			:= 'X';
	ie_abrir_faturamento_w		:= 'X';
	ie_abrir_requisicao_w		:= 'X';
	ie_composicao_pacote_w		:= 'X';
end;

if (nr_seq_composicao_w IS NOT NULL AND nr_seq_composicao_w::text <> '') then

	
	if      ((ie_tipo_p     = 'CC' and ie_abrir_contas_medicas_w             = 'S')  or (ie_tipo_p      = 'A' and ie_abrir_autorizacao_w                = 'S')  or (ie_tipo_p      = 'I5' and ie_abrir_a500_w                       = 'S')  or (ie_tipo_p      = 'F' and ie_abrir_faturamento_w                = 'S')  or (ie_tipo_p      = 'R' and ie_abrir_requisicao_w                 = 'S')) then
		
		for	r_C01_w in C01(nr_seq_composicao_w, dt_referencia_p, nr_seq_prestador_p, ie_tipo_guia_p) loop
		
			select  max(ie_classificacao)
			into STRICT    ie_classificacao_w
			from    procedimento
			where   cd_procedimento = r_C01_w.cd_procedimento
			and     ie_origem_proced = r_C01_w.ie_origem_proced;

			if (ie_tipo_p in ('CC', 'I5'))       then
				select  max(a.dt_emissao)
				into STRICT    dt_emissao_w
				from    pls_conta       a
				where   a.nr_Sequencia  = nr_seq_conta_p;

				select  count(1)
				into STRICT    qt_registro_w
				from    pls_conta_proc
				where   nr_seq_conta            = nr_seq_conta_p
				and     cd_procedimento         = r_C01_w.cd_procedimento
				and     ie_origem_proced        = r_C01_w.ie_origem_proced
				and     nr_seq_preco_pacote     = nr_seq_preco_pacote_p;
				
				if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then
					--Verifica a quantidade de itens que foram lancados e partir do item que esta sendo aberto
					select	max(qt_procedimento_imp)
					into STRICT	qt_itens_lancados_w
					from	pls_conta_proc
					where	nr_seq_proc_princ = nr_seq_conta_proc_p
					and	cd_procedimento = r_C01_w.cd_procedimento
					and 	ie_origem_proced = r_C01_w.ie_origem_proced
					and	ie_status <> 'D';
				end if;
				
				--Se ha algum item lancado com vinculo ao pacote, entao sera feita uma atualizacao
				if (qt_itens_lancados_w > 0) then
				
					--Aqui e verificado quantos do item atual do cursor foram lancados a partir do registro de pacote que esta sendo aberto(nr_seq_conta_proc_p) e quantos devem ter, com base 

					--na quantidade(apresentada ) * q quantidade informada na composicao e aplicada a diferenca(se for positiva) a um item(onde o nr_seq_proc_princ for igual ao nr_seq_conta_proc_p)
					qt_itens_atualizar_w := (r_C01_w.qt_procedimento * qt_itens_w) - qt_itens_lancados_w;
					
					--Retorna o item que sera atualizado e a quantidade atual dele
					select  max(nr_sequencia),
						max(qt_procedimento_imp)
					into STRICT	nr_seq_proc_atualizar_w,	
						qt_atual_proc_w
					from	pls_conta_proc
					where	nr_sequencia =
						(SELECT max(nr_sequencia)
						from	pls_conta_proc
						where	nr_seq_proc_princ 	= nr_seq_conta_proc_p
						and     cd_procedimento         = r_C01_w.cd_procedimento
						and     ie_origem_proced        = r_C01_w.ie_origem_proced
						and     nr_seq_preco_pacote     = nr_seq_preco_pacote_p
						and	ie_status <> 'D');
					
					--Para garantir que a quantidade do item nao fique zerada ou negativa
					if ( qt_atual_proc_w + qt_itens_atualizar_w < 1) then
						qt_itens_atualizar_w := 1;
					else
						qt_itens_atualizar_w := qt_atual_proc_w + qt_itens_atualizar_w;
					end if;
				
					update	pls_conta_proc
					set	qt_procedimento_imp 	=  qt_itens_atualizar_w,
						vl_unitario_imp		= dividir_Sem_round(r_C01_w.vl_negociado, r_C01_w.qt_procedimento),
						vl_procedimento_imp	= (r_C01_w.vl_negociado * qt_itens_atualizar_w),
						vl_procedimento		= (r_C01_w.vl_negociado * qt_itens_atualizar_w)
					where   nr_sequencia = nr_seq_proc_atualizar_w;
				
				else
					--Para tratar atualizar procedimentos sem o proc_princ(Lancados pela regra antes do ajuste da rotina)
					select count(1)
					into STRICT	itens_nao_vinculados_w
					from	pls_conta_proc
					where   nr_seq_conta            = nr_seq_conta_p
					and     cd_procedimento         = r_C01_w.cd_procedimento
					and     ie_origem_proced        = r_C01_w.ie_origem_proced
					and     nr_seq_preco_pacote     = nr_seq_preco_pacote_p
					and	coalesce(nr_seq_proc_princ::text, '') = '';
					
					--Se tiver item lancado e nao tiver apontado a qual pacote responsavel pelo seu lancamento, entao atualiza as informacaes nele e tb o nr_seq_proc_princ
					if (itens_nao_vinculados_w > 0) then
				
						update	pls_conta_proc
						set	qt_procedimento_imp 	= (r_C01_w.qt_procedimento * qt_itens_w),
							vl_unitario_imp		= dividir_Sem_round(r_C01_w.vl_negociado, r_C01_w.qt_procedimento),
							vl_procedimento_imp	= (r_C01_w.vl_negociado * qt_itens_w),
							vl_procedimento		= (r_C01_w.vl_negociado * qt_itens_w),
							nr_seq_proc_princ	= nr_seq_conta_proc_p
						where   nr_seq_conta            = nr_seq_conta_p
						and     cd_procedimento         = r_C01_w.cd_procedimento
						and     ie_origem_proced        = r_C01_w.ie_origem_proced
						and     nr_seq_preco_pacote     = nr_seq_preco_pacote_p;
	
					else
					
						select	nextval('pls_conta_proc_seq')
						into STRICT	nr_seq_conta_proc_w
						;
						
						insert  into pls_conta_proc(nr_sequencia, ie_via_acesso, ie_tecnica_utilizada,
							dt_procedimento, dt_inicio_proc, dt_fim_proc,
							tx_item, nr_seq_setor_atend, qt_procedimento_imp,
							vl_unitario_imp, vl_procedimento_imp, ie_status,
							nr_seq_proc_princ, nr_seq_pacote, cd_procedimento,
							nm_usuario, dt_atualizacao, nm_usuario_nrec,
							dt_atualizacao_nrec, ie_situacao, nr_seq_conta,
							ie_origem_proced,vl_liberado,vl_procedimento,
							qt_procedimento,vl_unitario,ie_tipo_despesa,
							nr_seq_preco_pacote)
						(SELECT nr_seq_conta_proc_w, null, null,
							dt_emissao_w, null, null,
							100, null, (r_C01_w.qt_procedimento * qt_itens_w),
							dividir_Sem_round(r_C01_w.vl_negociado, r_C01_w.qt_procedimento), (r_C01_w.vl_negociado * qt_itens_w), 'U',
							nr_seq_conta_proc_p, nr_seq_pacote_w, r_C01_w.cd_procedimento,
							nm_usuario_p, clock_timestamp(), nm_usuario_p,
							clock_timestamp(), 'I', nr_seq_conta_p,
							r_C01_w.ie_origem_proced,(r_C01_w.vl_negociado * qt_itens_w),(r_C01_w.vl_negociado * qt_itens_w),
							(r_C01_w.qt_procedimento * qt_itens_w),dividir_sem_round(r_C01_w.vl_negociado, r_C01_w.qt_procedimento),ie_classificacao_w,
							nr_seq_preco_pacote_p
						from    pls_pacote_procedimento
						where   nr_sequencia    = r_C01_w.nr_sequencia);
						
						-- se exitir o procedimento principal, verifica se o mesmo em informado o sequencial tiss, se possuir entao replica a proc regra
						if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then
	
							select	max(a.nr_sequencia),
								max(a.nr_seq_item_tiss),
								max(a.nr_seq_item_tiss_vinculo)
							into STRICT	nr_seq_conta_proc_regra_w,
								nr_seq_item_tiss_w,
								nr_seq_item_tiss_vinculo_w
							from	pls_conta_proc_regra	a
							where	a.nr_sequencia		= nr_seq_conta_proc_p;
							
							
							if (nr_seq_conta_proc_regra_w IS NOT NULL AND nr_seq_conta_proc_regra_w::text <> '') and (nr_seq_item_tiss_w IS NOT NULL AND nr_seq_item_tiss_w::text <> '') then
							
								CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_proc(nr_seq_conta_proc_w, nm_usuario_p);
								CALL pls_cta_proc_mat_regra_pck.atualiza_seq_tiss_proc(nr_seq_conta_proc_w, nr_seq_item_tiss_w, nr_seq_item_tiss_vinculo_w, nm_usuario_p);
								
							end if;
						end if;
						
						select 	max(ie_tipo_despesa)
						into STRICT	ie_tipo_despesa_w
						from	pls_conta_proc
						where	nr_sequencia = nr_seq_conta_proc_w;
						
						SELECT * FROM pls_obter_evento_item(	r_C01_w.cd_procedimento, r_C01_w.ie_origem_proced, null, cd_estabelecimento_w, ie_tipo_guia_w, ie_origem_conta_w, nr_seq_tipo_atendimento_w, ie_tipo_despesa_w, nr_seq_segurado_w, nr_seq_conta_w, 'N', null, nr_seq_evento_w, nr_seq_evento_prod_w, 'C', ie_regime_atendimento_w, ie_saude_ocupacional_w) INTO STRICT nr_seq_evento_w, nr_seq_evento_prod_w;
							        	
						
						update	pls_conta_proc
						set	nr_seq_evento		= nr_seq_evento_w,
							nr_seq_evento_prod	= nr_seq_evento_prod_w
						where	nr_sequencia		= nr_seq_conta_proc_w;
						
						CALL pls_gravar_log_conta(	nr_seq_conta_p, nr_seq_conta_proc_w, null,
									'Procedimento '||nr_seq_conta_proc_w||' gerado a partir da abertura de pacote! ', nm_usuario_p);
					end if;

				end if;
				
			elsif (ie_tipo_p = 'A')       then
				if (ie_lanca_comp_existente_w	= 'S') then
					select	count(1)
					into STRICT	qt_procedimento_w
					from	pls_guia_plano_proc
					where	nr_seq_guia		= nr_seq_autorizacao_p
					and	cd_procedimento		= r_C01_w.cd_procedimento
					and	ie_origem_proced	= r_C01_w.ie_origem_proced;
					
					begin
						select	cd_estabelecimento,
							ie_tipo_processo
						into STRICT	cd_estabelecimento_w,
							ie_tipo_processo_w
						from	pls_guia_plano
						where	nr_sequencia	= nr_seq_autorizacao_p;
					exception
					when others then
						cd_estabelecimento_w 	:= 1;
					end;					
					
					if (qt_procedimento_w = 0) then				
						select	nextval('pls_guia_plano_proc_seq')
						into STRICT	nr_seq_guia_proc_w
						;
					
						insert  into pls_guia_plano_proc(nr_sequencia, cd_procedimento, ie_origem_proced,
							dt_atualizacao, nm_usuario, nr_seq_pacote,
							vl_procedimento, ie_status, qt_solicitada,
							nr_seq_guia, nr_seq_preco_pacote, ie_pacote_ptu)
						values (nr_seq_guia_proc_w, r_C01_w.cd_procedimento, r_C01_w.ie_origem_proced,
							clock_timestamp(), nm_usuario_p, nr_seq_pacote_w,
							r_C01_w.vl_negociado, 'U', r_C01_w.qt_procedimento,
							nr_seq_autorizacao_p, nr_seq_preco_pacote_p, CASE WHEN ie_composicao_pacote_w='S' THEN  'S'  ELSE 'N' END );
							
						if (ie_tipo_processo_w = 'I') then
							CALL pls_gerar_de_para_aut_intercam(	nr_seq_guia_proc_w, '', cd_estabelecimento_w,
											nm_usuario_p);						
						end if;
					end if;
				else
					select	nextval('pls_guia_plano_proc_seq')
					into STRICT	nr_seq_guia_proc_w
					;
					
					insert  into pls_guia_plano_proc(nr_sequencia, cd_procedimento, ie_origem_proced,
						dt_atualizacao, nm_usuario, nr_seq_pacote,
						vl_procedimento, ie_status, qt_solicitada,
						nr_seq_guia, nr_seq_preco_pacote, ie_pacote_ptu)
					values (nr_seq_guia_proc_w, r_C01_w.cd_procedimento, r_C01_w.ie_origem_proced,
						clock_timestamp(), nm_usuario_p, nr_seq_pacote_w,
						r_C01_w.vl_negociado, 'U', r_C01_w.qt_procedimento,
						nr_seq_autorizacao_p, nr_seq_preco_pacote_p, CASE WHEN ie_composicao_pacote_w='S' THEN  'S'  ELSE 'N' END );
						
					begin
						select	cd_estabelecimento,
							ie_tipo_processo
						into STRICT	cd_estabelecimento_w,
							ie_tipo_processo_w
						from	pls_guia_plano
						where	nr_sequencia	= nr_seq_autorizacao_p;
					exception
					when others then
						cd_estabelecimento_w 	:= 1;
					end;					
						
					if (ie_tipo_processo_w = 'I') then
						CALL pls_gerar_de_para_aut_intercam(	nr_seq_guia_proc_w, '', cd_estabelecimento_w,
										nm_usuario_p);						
					end if;
				end if;
					
			elsif (ie_tipo_p = 'R')       then
				if (ie_lanca_comp_existente_w	= 'S') then
					select	count(1)
					into STRICT	qt_procedimento_w
					from	pls_requisicao_proc
					where	nr_seq_requisicao	= nr_seq_requisicao_p
					and	cd_procedimento		= r_C01_w.cd_procedimento
					and	ie_origem_proced	= r_C01_w.ie_origem_proced;
					
					if (qt_procedimento_w = 0) then
						select	ie_tipo_processo
						into STRICT	ie_tipo_processo_w
						from	pls_requisicao
						where	nr_sequencia	= nr_seq_requisicao_p;
						
						begin
							select  cd_procedimento,
								ie_origem_proced
							into STRICT    cd_proced_pacote_w,
								ie_origem_pacote_item_w
							from    pls_pacote
							where   nr_sequencia    = nr_seq_pacote_w;
						exception
						when others then
							cd_proced_pacote_w      := null;
						end;
						
						if (coalesce(r_C01_w.qt_procedimento::text, '') = '') then
							begin
								select	qt_solicitado
								into STRICT	qt_procedimento_req_w
								from	pls_requisicao_proc
								where	nr_seq_pacote		= nr_seq_pacote_w
								and	nr_seq_requisicao	= nr_seq_requisicao_p;
							exception
							when others then
								qt_procedimento_req_w := r_C01_w.qt_procedimento;
							end;
						else	
							qt_procedimento_req_w := r_C01_w.qt_procedimento;
						end if;

						select  nextval('pls_requisicao_proc_seq')
						into STRICT    nr_seq_req_proc_w
						;

						begin
							select  cd_estabelecimento
							into STRICT    cd_estabelecimento_w
							from    pls_requisicao
							where   nr_sequencia    = nr_seq_requisicao_p;
						exception
						when others then
							cd_estabelecimento_w    := 1;
						end;

						insert  into pls_requisicao_proc(nr_sequencia, cd_procedimento, ie_origem_proced,
							dt_atualizacao, nm_usuario, nr_seq_pacote,
							vl_procedimento, ie_status, qt_solicitado,
							nr_seq_requisicao, ie_estagio, cd_pacote_item,
							ie_pacote_aberto, qt_proc_executado, nr_seq_preco_pacote,
							ie_origem_pacote_item, ie_pacote_ptu)
						values (nr_seq_req_proc_w, r_C01_w.cd_procedimento, r_C01_w.ie_origem_proced,
							clock_timestamp(), nm_usuario_p, null,
							r_C01_w.vl_negociado, 'U', coalesce(qt_procedimento_req_w,1),
							nr_seq_requisicao_p, 'AE', cd_proced_pacote_w,
							'S', 0, nr_seq_preco_pacote_p,
							ie_origem_pacote_item_w, CASE WHEN ie_composicao_pacote_w='S' THEN  'S'  ELSE 'N' END );
							
						if (ie_tipo_processo_w = 'I') then	
							CALL pls_gerar_de_para_req_intercam(	nr_seq_req_proc_w, '', null,
											null, null, null,
											null, cd_estabelecimento_w, nm_usuario_p);
						end if;
					end if;
				else	
				
					begin
						select  cd_procedimento,
							ie_origem_proced
						into STRICT    cd_proced_pacote_w,
							ie_origem_pacote_item_w
						from    pls_pacote
						where   nr_sequencia    = nr_seq_pacote_w;
					exception
					when others then
						cd_proced_pacote_w      := null;
					end;
					
					if (coalesce(r_C01_w.qt_procedimento::text, '') = '') then
						begin
							select	qt_solicitado
							into STRICT	qt_procedimento_req_w
							from	pls_requisicao_proc
							where	nr_seq_pacote		= nr_seq_pacote_w
							and	nr_seq_requisicao	= nr_seq_requisicao_p;
						exception
						when others then
							qt_procedimento_req_w := r_C01_w.qt_procedimento;
						end;
					else	
						qt_procedimento_req_w := r_C01_w.qt_procedimento;
					end if;

					select  nextval('pls_requisicao_proc_seq')
					into STRICT    nr_seq_req_proc_w
					;

					begin
						select  cd_estabelecimento
						into STRICT    cd_estabelecimento_w
						from    pls_requisicao
						where   nr_sequencia    = nr_seq_requisicao_p;
					exception
					when others then
						cd_estabelecimento_w    := 1;
					end;
					
					select	ie_tipo_processo
					into STRICT	ie_tipo_processo_w
					from	pls_requisicao
					where	nr_sequencia	= nr_seq_requisicao_p;

					insert  into pls_requisicao_proc(nr_sequencia, cd_procedimento, ie_origem_proced,
						dt_atualizacao, nm_usuario, nr_seq_pacote,
						vl_procedimento, ie_status, qt_solicitado,
						nr_seq_requisicao, ie_estagio, cd_pacote_item,
						ie_pacote_aberto, qt_proc_executado, nr_seq_preco_pacote,
						ie_origem_pacote_item, ie_pacote_ptu)
					values (nr_seq_req_proc_w, r_C01_w.cd_procedimento, r_C01_w.ie_origem_proced,
						clock_timestamp(), nm_usuario_p, null,
						r_C01_w.vl_negociado, 'U', coalesce(qt_procedimento_req_w,1),
						nr_seq_requisicao_p, 'AE', cd_proced_pacote_w,
						'S', 0, nr_seq_preco_pacote_p,
						ie_origem_pacote_item_w, CASE WHEN ie_composicao_pacote_w='S' THEN  'S'  ELSE 'N' END );
						
					if (ie_tipo_processo_w = 'I') then	
						CALL pls_gerar_de_para_req_intercam(	nr_seq_req_proc_w, '', null,
										null, null, null,
										null, cd_estabelecimento_w, nm_usuario_p);
					end if;
				end if;
					
			elsif (ie_tipo_p = 'F')       then
					
							select	nextval('pls_conta_pos_estabelecido_seq')
							into STRICT	nr_seq_pos_estab_w
							;

				insert  into pls_conta_pos_estabelecido(nr_sequencia,nm_usuario,nr_seq_conta,
					dt_atualizacao,vl_beneficiario,
					ie_situacao)
				values (nr_seq_pos_estab_w,nm_usuario_p,nr_seq_conta_p,
					clock_timestamp(),r_C01_w.vl_negociado,
					'A');

				-- Gerar os participantes do procedimento referente ao pos-estabelecido
				CALL pls_gerar_conta_pos_estab_part(nr_seq_pos_estab_w,'N',nm_usuario_p);
			end if;
		end loop; -- C01
		
		for	r_C02_w in C02(nr_seq_composicao_w, dt_referencia_p, nr_seq_prestador_p, ie_tipo_guia_p) loop
		
			if (ie_tipo_p in ('CC','I5'))       then

				select  max(a.dt_emissao)
				into STRICT    dt_emissao_w
				from    pls_conta       a
				where   a.nr_Sequencia  = nr_seq_conta_p;

				select  count(1)
				into STRICT    qt_registro_w
				from    pls_conta_mat
				where   nr_seq_conta            = nr_seq_conta_p
				and     nr_seq_material         = r_C02_w.nr_seq_material
				and     nr_seq_preco_pacote     = nr_seq_preco_pacote_p;

				if (qt_registro_w = 0)     then
				
					select	nextval('pls_conta_mat_seq')
					into STRICT	nr_seq_conta_mat_w
					;
					
					insert  into pls_conta_mat(nr_sequencia, qt_material_imp, vl_unitario_imp,
						vl_material_imp, ie_status,nr_seq_pacote,
						cd_material,nm_usuario,dt_atualizacao,
						nm_usuario_nrec,dt_atualizacao_nrec,ie_situacao,
						nr_seq_conta,vl_liberado,vl_material,
						qt_material,vl_unitario,ie_tipo_despesa,
						nr_seq_preco_pacote,nr_Seq_material, dt_atendimento)
					(SELECT nr_seq_conta_mat_w, (r_C02_w.qt_material * qt_itens_w), dividir_Sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material),
						(r_C02_w.vl_negociado * qt_itens_w),'U',nr_seq_pacote_w,
						r_C02_w.cd_material,nm_usuario_p, clock_timestamp(),
						nm_usuario_p,clock_timestamp(), 'I',
						nr_seq_conta_p,(r_C02_w.vl_negociado * qt_itens_w), (r_C02_w.vl_negociado * qt_itens_w),
						(r_C02_w.qt_material * qt_itens_w) ,dividir_sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material),ie_classificacao_w,
						nr_seq_preco_pacote_p,r_C02_w.nr_seq_material, dt_emissao_w
					from    pls_pacote_material
					where   nr_sequencia    = r_C02_w.nr_sequencia);
					
					
					
					-- se exitir o procedimento principal, verifica se o mesmo em informado o sequencial tiss, se possuir entao gera a mat regra, copia o sequencial e vincula
					if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then

						select	max(a.nr_sequencia),
							max(a.nr_seq_item_tiss),
							max(a.nr_seq_item_tiss_vinculo)
						into STRICT	nr_seq_conta_proc_regra_w,
							nr_seq_item_tiss_w,
							nr_seq_item_tiss_vinculo_w
						from	pls_conta_proc_regra	a
						where	a.nr_sequencia		= nr_seq_conta_proc_p;
						
						
						if (nr_seq_conta_proc_regra_w IS NOT NULL AND nr_seq_conta_proc_regra_w::text <> '') and (nr_seq_item_tiss_w IS NOT NULL AND nr_seq_item_tiss_w::text <> '') then
						
							CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_mat(nr_seq_conta_mat_w, nm_usuario_p);
							CALL pls_cta_proc_mat_regra_pck.atualiza_seq_tiss_mat(nr_seq_conta_mat_w, nr_seq_item_tiss_w, nr_seq_item_tiss_vinculo_w, nm_usuario_p);
							
						end if;
					end if;
					
					select 	max(ie_tipo_despesa)
					into STRICT	ie_tipo_despesa_w
					from	pls_conta_mat
					where	nr_sequencia = nr_seq_conta_mat_w;
					
					SELECT * FROM pls_obter_evento_item(	null, null, r_C02_w.nr_seq_material, cd_estabelecimento_w, ie_tipo_guia_w, ie_origem_conta_w, nr_seq_tipo_atendimento_w, ie_tipo_despesa_w, nr_seq_segurado_w, nr_seq_conta_w, 'N', null, nr_seq_evento_w, nr_seq_evento_prod_w, 'C', ie_regime_atendimento_w, ie_saude_ocupacional_w) INTO STRICT nr_seq_evento_w, nr_seq_evento_prod_w;
						
					
					update	pls_conta_mat
					set	nr_seq_evento		= nr_seq_evento_w,
						nr_seq_evento_prod	= nr_seq_evento_prod_w
					where	nr_sequencia		= nr_seq_conta_mat_w;
					
					CALL pls_gravar_log_conta(	nr_seq_conta_p, null, nr_seq_conta_mat_w,
								'Material '||nr_seq_conta_mat_w||' gerado a partir da abertura de pacote! ', nm_usuario_p);

				else
					--Se ja tiver lancado o material na conta, entao atualiza com a quantidade correta baseado na quantidade de itens 

					--do pacote responsavel pelo lancamento do material(se o pacote for informado duas vezes, entao soma as quantidades) * 

					--a quantidade informada na composicao
					qt_itens_atualizar_w := qt_total_itens_w * r_C02_w.qt_material;
					
					update	pls_conta_mat
					set	qt_material_imp 	= qt_itens_atualizar_w,
						vl_unitario_imp		= dividir_Sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material),
						vl_material_imp		= dividir_Sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material) * qt_itens_atualizar_w,
						vl_material		=  dividir_Sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material) * qt_itens_atualizar_w
					where   nr_seq_conta            = nr_seq_conta_p
					and     nr_seq_material         = r_C02_w.nr_seq_material
					and     nr_seq_preco_pacote     = nr_seq_preco_pacote_p;
					
				end if;
			elsif (ie_tipo_p = 'R')       then
				if (ie_lanca_comp_existente_w	= 'N') then
						select	count(1)
						into STRICT	qt_material_w
						from	pls_requisicao_mat
						where	nr_seq_requisicao	= nr_seq_requisicao_p
						and	nr_seq_material		= r_C02_w.nr_seq_material;
						
					if (qt_material_w = 0) then
						begin
							select  cd_procedimento
							into STRICT    cd_proced_pacote_w						
							from    pls_pacote
							where   nr_sequencia    = nr_seq_pacote_w;
						exception
						when others then
							cd_proced_pacote_w      := null;
						end;
						
						if (coalesce(r_C02_w.qt_material::text, '') = '') then
							begin
								select	qt_solicitado
								into STRICT	qt_material_req_w
								from	pls_requisicao_proc
								where	nr_seq_pacote		= nr_seq_pacote_w
								and	nr_seq_requisicao	= nr_seq_requisicao_p;
							exception
							when others then
								qt_material_req_w	:= r_C02_w.qt_material;
							end;
						else	
							qt_material_req_w := r_C02_w.qt_material;
						end if;

						select  nextval('pls_requisicao_mat_seq')
						into STRICT    nr_seq_req_mat_w
						;

						begin
							select  cd_estabelecimento
							into STRICT    cd_estabelecimento_w
							from    pls_requisicao
							where   nr_sequencia    = nr_seq_requisicao_p;
						exception
						when others then
							cd_estabelecimento_w    := 1;
						end;

						insert  into pls_requisicao_mat(nr_sequencia, nr_seq_material, dt_atualizacao,
							nm_usuario, vl_material, ie_status, 
							qt_solicitado, nr_seq_requisicao, ie_estagio, 
							cd_pacote_item, ie_pacote_aberto, qt_mat_executado,
							nr_seq_preco_pacote, ie_pacote_ptu)
						values (nr_seq_req_mat_w, r_C02_w.nr_seq_material, clock_timestamp(), 
							nm_usuario_p, r_C02_w.vl_negociado, 'U', 
							coalesce(qt_material_req_w,1), nr_seq_requisicao_p, 'AE', 
							cd_proced_pacote_w, 'S', 0,
							nr_seq_preco_pacote_p, CASE WHEN ie_composicao_pacote_w='S' THEN  'S'  ELSE 'N' END );	
						
						select	ie_tipo_processo
						into STRICT	ie_tipo_processo_w
						from	pls_requisicao
						where	nr_sequencia	= nr_seq_requisicao_p;
						
						if (ie_tipo_processo_w = 'I') then	
							CALL pls_gerar_de_para_req_intercam(	'', nr_seq_req_mat_w, null,
											null, null, null,
											null, cd_estabelecimento_w, nm_usuario_p);
						end if;
					end if;
				else
					begin
						select  cd_procedimento
						into STRICT    cd_proced_pacote_w
						from    pls_pacote
						where   nr_sequencia    = nr_seq_pacote_w;
					exception
					when others then
						cd_proced_pacote_w      := null;
					end;
					
					if (coalesce(r_C02_w.qt_material::text, '') = '') then
						begin
							select	qt_solicitado
							into STRICT	qt_material_req_w
							from	pls_requisicao_proc
							where	nr_seq_pacote		= nr_seq_pacote_w
							and	nr_seq_requisicao	= nr_seq_requisicao_p;
						exception
						when others then
							qt_material_req_w	:= r_C02_w.qt_material;
						end;
					else	
						qt_material_req_w := r_C02_w.qt_material;
					end if;

					select  nextval('pls_requisicao_mat_seq')
					into STRICT    nr_seq_req_mat_w
					;

					begin
						select  cd_estabelecimento
						into STRICT    cd_estabelecimento_w
						from    pls_requisicao
						where   nr_sequencia    = nr_seq_requisicao_p;
					exception
					when others then
						cd_estabelecimento_w    := 1;
					end;

					insert  into pls_requisicao_mat(nr_sequencia, nr_seq_material, dt_atualizacao,
						nm_usuario, vl_material, ie_status, 
						qt_solicitado, nr_seq_requisicao, ie_estagio, 
						cd_pacote_item, ie_pacote_aberto, qt_mat_executado,
						nr_seq_preco_pacote, ie_pacote_ptu)				
					values (nr_seq_req_mat_w, r_C02_w.nr_seq_material, clock_timestamp(), 
						nm_usuario_p, r_C02_w.vl_negociado, 'U', 
						coalesce(qt_material_req_w,1), nr_seq_requisicao_p, 'AE', 
						cd_proced_pacote_w, 'S', 0,
						nr_seq_preco_pacote_p, CASE WHEN ie_composicao_pacote_w='S' THEN  'S'  ELSE 'N' END );
						
					select	ie_tipo_processo
					into STRICT	ie_tipo_processo_w
					from	pls_requisicao
					where	nr_sequencia	= nr_seq_requisicao_p;
					
					if (ie_tipo_processo_w = 'I') then	
						CALL pls_gerar_de_para_req_intercam(	'', nr_seq_req_mat_w, null,
										null, null, null,
										null, cd_estabelecimento_w, nm_usuario_p);
					end if;						
				end if;				
			elsif (ie_tipo_p = 'A')       then	
				if (ie_lanca_comp_existente_w	= 'N') then
					select	count(1)
					into STRICT	qt_material_w
					from	pls_guia_plano_mat
					where	nr_seq_guia		= nr_seq_autorizacao_p
					and	nr_seq_material		= r_C02_w.nr_seq_material;
					
					if (qt_material_w = 0) then	
						select	nextval('pls_guia_plano_mat_seq')
						into STRICT	nr_seq_guia_mat_w
						;
					
						insert  into pls_guia_plano_mat(nr_sequencia,				nr_seq_material,		dt_atualizacao,
							nm_usuario,				vl_material,			ie_status,
							qt_solicitada,				nr_seq_guia,			nr_seq_preco_pacote,
							ie_pacote_ptu)
						values (nr_seq_guia_mat_w,			r_C02_w.nr_seq_material,	clock_timestamp(),
							nm_usuario_p,				r_C02_w.vl_negociado,		'U',
							coalesce(r_C02_w.qt_material, 1),		nr_seq_autorizacao_p,		nr_seq_preco_pacote_p,
							CASE WHEN ie_composicao_pacote_w='S' THEN  'S'  ELSE 'N' END );
						
						begin
							select	cd_estabelecimento,
								ie_tipo_processo
							into STRICT	cd_estabelecimento_w,
								ie_tipo_processo_w
							from	pls_guia_plano
							where	nr_sequencia	= nr_seq_autorizacao_p;
						exception
						when others then
							cd_estabelecimento_w	:= 1;
						end;	
							
						if (ie_tipo_processo_w = 'I') then
							CALL pls_gerar_de_para_aut_intercam(	'', nr_seq_guia_mat_w, cd_estabelecimento_w,
											nm_usuario_p);						
						end if;							
					end if;
				else
					select	nextval('pls_guia_plano_mat_seq')
					into STRICT	nr_seq_guia_mat_w
					;
					
					insert  into pls_guia_plano_mat(nr_sequencia,				nr_seq_material,		dt_atualizacao,
						nm_usuario,				vl_material,			ie_status,
						qt_solicitada,				nr_seq_guia,			nr_seq_preco_pacote,
						ie_pacote_ptu)
					values (nextval('pls_guia_plano_mat_seq'),	r_C02_w.nr_seq_material,	clock_timestamp(),
						nm_usuario_p,				r_C02_w.vl_negociado,		'U',
						coalesce(r_C02_w.qt_material, 1),		nr_seq_autorizacao_p,		nr_seq_preco_pacote_p,
						CASE WHEN ie_composicao_pacote_w='S' THEN  'S'  ELSE 'N' END );
						
					begin
						select	cd_estabelecimento,
							ie_tipo_processo
						into STRICT	cd_estabelecimento_w,
							ie_tipo_processo_w
						from	pls_guia_plano
						where	nr_sequencia	= nr_seq_autorizacao_p;
					exception
					when others then
						cd_estabelecimento_w	:= 1;
					end;	
						
					if (ie_tipo_processo_w = 'I') then
						CALL pls_gerar_de_para_aut_intercam(	'', nr_seq_guia_mat_w, cd_estabelecimento_w,
										nm_usuario_p);						
					end if;							
				end if;
			end if;	
		end loop; -- C02
	end if;
end if;

-- Valorizar os itens que foram abertos pelo pacote
if (ie_tipo_p = 'CC' and ie_abrir_contas_medicas_w             = 'S')	then
	CALL pls_recalcular_itens_pacote(nr_seq_conta_p, nr_seq_preco_pacote_p,nm_usuario_p,'C','N');
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_abrir_proc_pacote ( nr_seq_preco_pacote_p bigint, nr_seq_conta_p bigint, nr_seq_autorizacao_p bigint, nr_seq_requisicao_p bigint, ie_tipo_p text, nr_seq_prestador_p bigint, ie_tipo_guia_p text, dt_referencia_p timestamp, nm_usuario_p text, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type default null) FROM PUBLIC;

