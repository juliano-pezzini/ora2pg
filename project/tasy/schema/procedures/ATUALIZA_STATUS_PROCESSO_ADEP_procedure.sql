-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualiza_status_processo_adep ( nr_seq_processo_p bigint, nr_seq_area_prep_p bigint, ie_funcao_p text, ie_acao_p text, dt_acao_p timestamp, nm_usuario_p text) AS $body$
DECLARE


ora2pg_rowcount int;
nr_seq_area_prep_w				bigint;
ie_areas_nao_separadas_w		varchar(1);
ie_areas_nao_geradas_a_sep_w	varchar(1);
ie_ordens_nao_prep_area_w		varchar(1);
ie_areas_nao_preparadas_w		varchar(1);
ie_areas_nao_geradas_a_prep_w	varchar(1);
ie_areas_nao_higienizadas_w		varchar(1);
ie_areas_nao_geradas_a_hig_w	varchar(1);
ie_status_anterior_processo_w	varchar(15);
nr_prescricao_w					bigint;
nr_seq_material_w				integer;
nr_seq_horario_w				bigint;
cd_material_w					integer;
dt_horario_w					timestamp;
nr_seq_map_w					bigint;
dt_paciente_w					timestamp;
ie_regra_lanc_conta_w			varchar(1);
nr_seq_processo_item_w			bigint;
cd_setor_atendimento_w			integer;
cd_intervalo_w					varchar(7);
nr_seq_regra_w					bigint;
ie_higienizacao_w				varchar(1);
ie_preparo_w					varchar(1);
ie_conferencia_w				varchar(1) := null;
ie_acm_w						varchar(1);
ie_se_necessario_w				varchar(1);
qt_tempo_min_w					bigint;
ie_dose_especial_w				varchar(1);
dt_entrega_w					timestamp;
ie_setar_dt_recebimento_w 		varchar(1);
ie_status_ant_processo_w		varchar(15);
ie_tipo_processo_w				varchar(15);
cd_local_estoque_saida_w		smallint;
cd_local_estoque_w				bigint;
nr_seq_lote_w					bigint;
nr_seq_lote_fornec_w			bigint;
nr_atendimento_w				bigint;
cd_cgc_fornec_w					varchar(14);
ie_data_conta_lote_w			varchar(15);
qt_dispensar_hor_w				double precision;
ie_consignado_w					varchar(1);
dt_atendimento_w				timestamp;
dt_inicio_prescr_w				timestamp;
cd_estabelecimento_w			smallint;
ie_nao_requisitado_w			varchar(1);
nm_usuario_entrega_w			varchar(15);
qt_itens_lote_w					smallint;
nr_seq_mat_hor_w				prescr_mat_hor.nr_sequencia%type;
nr_seq_lote_desdobrado_w		ap_lote.nr_sequencia%type;
nr_seq_ap_lote_item_w			ap_lote_item.nr_sequencia%type;
ie_baixar_lote_w				varchar(1);
ie_proc_suspenso_w				varchar(1);
ie_rastreabilidade_adep_w    varchar(1);

c01 CURSOR FOR
	SELECT	b.nr_prescricao,
			b.nr_sequencia,
			a.nr_sequencia,
			b.cd_material,
			a.dt_horario
	from	prescr_material b,
			prescr_mat_hor a
	where	b.nr_sequencia		= a.nr_seq_material
	and		b.nr_prescricao		= a.nr_prescricao
	and		a.nr_seq_processo	= nr_seq_processo_p
	--and		nvl(b.cd_motivo_baixa,0) = 0
	and		coalesce(a.cd_motivo_baixa,0) = 0
	and		coalesce(a.dt_suspensao::text, '') = ''
	and		Obter_se_horario_liberado(a.dt_lib_horario, a.dt_horario) = 'S'
	order by
			b.nr_prescricao desc,
			b.nr_sequencia,
			a.nr_sequencia;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	regra_etapa_gedipa
	where	coalesce(cd_setor_atendimento,coalesce(cd_setor_atendimento_w,0)) = coalesce(cd_setor_atendimento_w,0)
	and		coalesce(cd_intervalo,coalesce(cd_intervalo_w,'0'))		= coalesce(cd_intervalo_w,'0')
	and		coalesce(ie_acm,coalesce(ie_acm_w,'N'))				= coalesce(ie_acm_w,'N')
	and		coalesce(ie_se_necessario,coalesce(ie_se_necessario_w,'N'))	= coalesce(ie_se_necessario_w,'N')
	and		coalesce(ie_dose_especial,coalesce(ie_dose_especial_w,'N'))	= coalesce(ie_dose_especial_w,'N')
	and		coalesce(qt_tempo_min_w,0) between coalesce(qt_tempo_min,-99999) and coalesce(qt_tempo_max,99999)
	and		ie_situacao = 'A'
	and		(((coalesce(ie_hemodialise,'S') = 'S') and (ie_tipo_processo_w = 'H')) or
			((coalesce(ie_hemodialise,'N') = 'N') and (ie_tipo_processo_w <> 'H')))
	order by
		coalesce(cd_setor_atendimento,000000),
		coalesce(cd_intervalo,'AAAAAAA'),
		coalesce(ie_acm,'AAAAAAA'),
		coalesce(ie_se_necessario,'AAAAAAA'),
		coalesce(qt_tempo_min,000000);

C03 CURSOR FOR
	SELECT	a.nr_atendimento,
			b.cd_material,
			c.nr_prescricao,
			c.nr_seq_material,
			c.nr_seq_lote,
			x.nr_seq_lote_fornec,
			m.cd_setor_atendimento,
			m.dt_inicio_prescr,
			c.dt_horario,
			c.qt_dispensar_hor,
			coalesce(c.cd_local_estoque_baixa, x.cd_local_estoque)
	from	adep_processo_item b,
			adep_processo a,
			prescr_mat_hor c,
			prescr_material x,
			prescr_medica m
	where	b.nr_seq_processo	= a.nr_sequencia
	and		b.nr_seq_horario	= c.nr_sequencia
	and		x.nr_prescricao		= c.nr_prescricao
	and		x.nr_sequencia		= c.nr_seq_material
	and		m.nr_prescricao		= x.nr_prescricao
	and		a.nr_sequencia		= nr_seq_processo_p
	and		b.ie_lanca_conta_adep = 'S'
	and		coalesce(b.ie_nao_requisitado,'N') <> 'S'
	and		((coalesce(nr_seq_area_prep_p,0) = 0) or (b.nr_seq_area_prep = nr_seq_area_prep_p))
	order by coalesce(b.nr_seq_horario,999999999);

c04 CURSOR FOR
	SELECT	distinct(nr_seq_lote)
	from	prescr_mat_hor
	where	nr_seq_processo	= nr_seq_processo_p
	and		ie_agrupador 	= 1
	and		coalesce(nr_seq_superior::text, '') = '';

c05 CURSOR FOR
	SELECT	nr_sequencia,
			nr_seq_material,
			qt_dispensar_hor
	from	prescr_mat_hor
	where	nr_seq_processo = nr_seq_processo_p
	and		nr_seq_lote		= nr_seq_lote_w;


BEGIN

ie_rastreabilidade_adep_w := obter_rastreabilidade_adep(nr_seq_processo_p, 'AP');

if (ie_rastreabilidade_adep_w = 'S') then
    CALL adep_gerar_log_rastr('{'||chr(10)||
    '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
    '"dt_acao_p" : "'||to_char(dt_acao_p, 'dd/mm/yyyy hh24:mi:ss')||'",'||chr(10)||
    '"ie_acao_p" : "'||ie_acao_p||'",'||chr(10)||
    '"ie_funcao_p" : "'||ie_funcao_p||'",'||chr(10)||
    '"nm_usuario_p" : "'||nm_usuario_p||'",'||chr(10)||
    '"nr_seq_area_prep_p" : "'||nr_seq_area_prep_p||'",'||chr(10)||
    '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
end if;

ie_setar_dt_recebimento_w := Obter_Param_Usuario(3112, 55, obter_perfil_ativo, nm_usuario_p, 0, ie_setar_dt_recebimento_w);
ie_baixar_lote_w := Obter_param_Usuario(3112, 87, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_baixar_lote_w);

select	coalesce(max('S'), 'N')
into STRICT	ie_proc_suspenso_w
from	adep_processo
where	nr_sequencia = nr_seq_processo_p
and		(dt_suspensao IS NOT NULL AND dt_suspensao::text <> '');

if (ie_proc_suspenso_w = 'S') then
	--Este horario/processo esta suspenso. A acao selecionada nao sera realizada.
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1121433);
end if;

if (nr_seq_processo_p IS NOT NULL AND nr_seq_processo_p::text <> '') and (ie_funcao_p IS NOT NULL AND ie_funcao_p::text <> '') and (ie_acao_p IS NOT NULL AND ie_acao_p::text <> '') and (dt_acao_p IS NOT NULL AND dt_acao_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

	select	max(cd_setor_atendimento),
			max(cd_intervalo),
			max(ie_acm),
			max(ie_se_necessario),
			trunc((max(dt_horario_processo) - max(dt_processo)) * 1440),
			max(ie_dose_especial),
			obter_status_ant_processo(max(nr_sequencia)),
			coalesce(max(ie_tipo_processo),'X'),
			max(cd_local_estoque)
	into STRICT	cd_setor_atendimento_w,
			cd_intervalo_w,
			ie_acm_w,
			ie_se_necessario_w,
			qt_tempo_min_w,
			ie_dose_especial_w,
			ie_status_ant_processo_w,
			ie_tipo_processo_w,
			cd_local_estoque_saida_w
	from	adep_processo
	where	nr_sequencia = nr_seq_processo_p;

    if (ie_rastreabilidade_adep_w = 'S') then
        CALL adep_gerar_log_rastr('{'||chr(10)||
        '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
        '"cd_intervalo_w" : "'||cd_intervalo_w||'",'||chr(10)||
        '"cd_setor_atendimento_w" : "'||cd_setor_atendimento_w||'",'||chr(10)||
        '"ie_acm_w" : "'||ie_acm_w||'",'||chr(10)||
        '"ie_dose_especial_w" : "'||ie_dose_especial_w||'",'||chr(10)||
        '"ie_se_necessario_w" : "'||ie_se_necessario_w||'",'||chr(10)||
        '"ie_tipo_processo_w" : "'||ie_tipo_processo_w||'",'||chr(10)||
        '"qt_tempo_min_w" : "'||qt_tempo_min_w||'"}', wheb_usuario_pck.get_ie_commit);
    end if;

	open C02;
	loop
	fetch C02 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		nr_seq_regra_w := nr_seq_regra_w;
		end;
	end loop;
	close C02;

	if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
		select	coalesce(ie_higienizacao,'S'),
				coalesce(ie_preparo,'S'),
				coalesce(ie_conferencia,'S')
		into STRICT	ie_higienizacao_w,
				ie_preparo_w,
				ie_conferencia_w
		from	regra_etapa_gedipa
		where	nr_sequencia	= nr_seq_regra_w;
	end if;

	ie_regra_lanc_conta_w	:= obter_regra_lanc_conta_adep(wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, nm_usuario_p, 'PP');

	if (coalesce(nr_seq_area_prep_p,0) > 0) then
		nr_seq_area_prep_w	:= nr_seq_area_prep_p;
	else
		nr_seq_area_prep_w	:= null;
	end if;

	if (ie_funcao_p = 'G') then

		if (ie_acao_p = 'S') then

			if (nr_seq_area_prep_w IS NOT NULL AND nr_seq_area_prep_w::text <> '') then

				select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_areas_nao_separadas_w
				from	adep_processo_area a
				where	a.nr_seq_processo 	= nr_seq_processo_p
				and		a.nr_seq_area_prep 	<> nr_seq_area_prep_w
				and		coalesce(a.dt_dispensacao::text, '') = ''
				and 	exists (			SELECT 1
											from   prescr_mat_hor p
											where  p.nr_seq_processo = a.nr_seq_processo
											and	   p.nr_seq_area_prep = a.nr_seq_area_prep
											and	   coalesce(p.dt_suspensao::text, '') = '');

				if (ie_areas_nao_separadas_w = 'N') then

					select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
					into STRICT	ie_areas_nao_geradas_a_sep_w
					from	prescr_mat_hor a
					where	a.nr_seq_processo	= nr_seq_processo_p
					and	a.nr_seq_area_prep	<> nr_seq_area_prep_w
					and	coalesce(a.dt_suspensao::text, '') = ''
					and	Obter_se_horario_liberado(a.dt_lib_horario, a.dt_horario) = 'S'
					and	not exists (
							SELECT	1
							from	adep_processo_area x
							where	x.nr_seq_processo	= a.nr_seq_processo
							and	x.nr_seq_area_prep	= a.nr_seq_area_prep);

					if (ie_areas_nao_geradas_a_sep_w = 'N') then

						update	adep_processo
						set		ie_status_processo		= 'D',
								dt_dispensacao			= clock_timestamp(),
								nm_usuario_dispensacao	= nm_usuario_p
						where	nr_sequencia			= nr_seq_processo_p;

						if (coalesce(ie_baixar_lote_w,'N') = 'S') then

                        if (ie_rastreabilidade_adep_w = 'S') then
                            CALL adep_gerar_log_rastr('{'||chr(10)||
                            '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
                            '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
                        end if;

							open c04;
							loop
							fetch c04 into
								nr_seq_lote_w;
							EXIT WHEN NOT FOUND; /* apply on c04 */
								begin

									select	count(*)
									into STRICT	qt_itens_lote_w
									from 	prescr_mat_hor
									where	nr_seq_lote = nr_seq_lote_w
									and (coalesce(nr_seq_processo::text, '') = '' or
											nr_seq_processo <> nr_seq_processo_p)
									and		ie_agrupador	= 1
									and		coalesce(nr_seq_superior::text, '') = '';

									if (coalesce(qt_itens_lote_w,0) > 0) then

                                    if (ie_rastreabilidade_adep_w = 'S') then
                                        CALL adep_gerar_log_rastr('{'||chr(10)||
                                        '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
                                        '"nr_seq_lote_w" : "'||nr_seq_lote_w||'",'||chr(10)||
                                        '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
                                    end if;

										open c05;
										loop
										fetch c05 into
											nr_seq_mat_hor_w,
											nr_seq_material_w,
											qt_dispensar_hor_w;
										EXIT WHEN NOT FOUND; /* apply on c05 */
											begin

												select 	max(nr_sequencia)
												into STRICT	nr_seq_ap_lote_item_w
												from	ap_lote_item
												where	nr_seq_lote	= nr_seq_lote_w
												and		nr_seq_mat_hor	= nr_seq_mat_hor_w;

												CALL Gerar_w_ap_lote_desdob(nr_seq_lote_w, nr_seq_ap_lote_item_w, nr_seq_mat_hor_w, qt_dispensar_hor_w, 0);

											end;
										end loop;
										close c05;

										nr_seq_lote_desdobrado_w := desdobrar_lote_prescricao(nr_seq_lote_w, nm_usuario_p, 'D', null, obter_desc_expressao(781468)/*'Lote desdobrado por preparo de processo.'*/, 'N', nr_seq_lote_desdobrado_w);

                                        if (ie_rastreabilidade_adep_w = 'S') then
                                            CALL adep_gerar_log_rastr('{'||chr(10)||
                                            '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
                                            '"nr_seq_lote_w" : "'||nr_seq_lote_w||'",'||chr(10)||
                                            '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
                                        end if;

										open c05;
										loop
										fetch c05 into
											nr_seq_mat_hor_w,
											nr_seq_material_w,
											qt_dispensar_hor_w;
										EXIT WHEN NOT FOUND; /* apply on c05 */
											begin

												update	prescr_mat_hor
												set		nr_seq_lote		= nr_seq_lote_desdobrado_w
												where	nr_sequencia	= nr_seq_mat_hor_w;

											end;
										end loop;
										close c05;

									end if;

									update	ap_lote
									set		ie_status_lote		= 'A',
											dt_atend_farmacia	= clock_timestamp()
									where	nr_sequencia		= coalesce(nr_seq_lote_desdobrado_w, nr_seq_lote_w);
								end;
							end loop;
							close c04;

						end if;
					end if;
				end if;
			end if;

		elsif (ie_acao_p = 'H') then

			if (nr_seq_area_prep_w IS NOT NULL AND nr_seq_area_prep_w::text <> '') then

				select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_areas_nao_higienizadas_w
				from	adep_processo_area a
				where	a.nr_seq_processo 	= nr_seq_processo_p
				and		a.nr_seq_area_prep 	<> nr_seq_area_prep_w
				and		coalesce(a.dt_higienizacao::text, '') = ''
				and 	exists (			SELECT 1
											from   prescr_mat_hor p
											where  p.nr_seq_processo = a.nr_seq_processo
											and	   p.nr_seq_area_prep = a.nr_seq_area_prep
											and	   coalesce(p.dt_suspensao::text, '') = '');

				if (ie_areas_nao_higienizadas_w = 'N') then

					select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
					into STRICT	ie_areas_nao_geradas_a_hig_w
					from	prescr_mat_hor a
					where	a.nr_seq_processo	= nr_seq_processo_p
					and		a.nr_seq_area_prep	<> nr_seq_area_prep_w
					and		coalesce(a.dt_suspensao::text, '') = ''
					and		Obter_se_horario_liberado(a.dt_lib_horario, a.dt_horario) = 'S'
					and	not exists (
							SELECT	1
							from	adep_processo_area x
							where	x.nr_seq_processo	= a.nr_seq_processo
							and		x.nr_seq_area_prep	= a.nr_seq_area_prep);

					if (ie_areas_nao_geradas_a_hig_w = 'N') then

						if (coalesce(ie_preparo_w,'S') = 'N')  and (coalesce(ie_conferencia_w,'S') = 'N') then
							update	adep_processo
							set	ie_status_processo	= 'L',
								dt_higienizacao		= clock_timestamp(),
								nm_usuario_higienizacao	= nm_usuario_p,
								nr_seq_regra		= nr_seq_regra_w
							where	nr_sequencia		= nr_seq_processo_p;
						else
							update	adep_processo
							set	ie_status_processo	= 'H',
								dt_higienizacao		= clock_timestamp(),
								nm_usuario_higienizacao	= nm_usuario_p,
								nr_seq_regra		= nr_seq_regra_w
							where	nr_sequencia		= nr_seq_processo_p;
						end if;
					end if;
				end if;
			else
				if (coalesce(ie_preparo_w,'S') = 'N')  and (coalesce(ie_conferencia_w,'S') = 'N') then
					update	adep_processo
					set	ie_status_processo	= 'L',
						dt_higienizacao		= clock_timestamp(),
						nm_usuario_higienizacao	= nm_usuario_p,
						nr_seq_regra		= nr_seq_regra_w
					where	nr_sequencia		= nr_seq_processo_p;
				else
					update	adep_processo
					set	ie_status_processo	= 'H',
						dt_higienizacao		= clock_timestamp(),
						nm_usuario_higienizacao	= nm_usuario_p,
						nr_seq_regra		= nr_seq_regra_w
					where	nr_sequencia		= nr_seq_processo_p;
				end if;
			end if;

		elsif (ie_acao_p = 'P') then

			if (nr_seq_area_prep_w IS NOT NULL AND nr_seq_area_prep_w::text <> '') then

				select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_ordens_nao_prep_area_w
				from	adep_processo_frac x,
					prescr_mat_hor y
				where	y.nr_seq_etiqueta	= x.nr_sequencia
				and	y.nr_seq_processo	= x.nr_seq_processo
				and	x.nr_seq_processo	= nr_seq_processo_p
				and	y.nr_seq_area_prep	= nr_seq_area_prep_w
				and	coalesce(x.dt_fim_preparo::text, '') = ''
				and	coalesce(y.dt_suspensao::text, '') = '';

				if (ie_ordens_nao_prep_area_w = 'N') then

					select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
					into STRICT	ie_areas_nao_preparadas_w
					from	adep_processo_area a
					where	a.nr_seq_processo 	= nr_seq_processo_p
					and	a.nr_seq_area_prep 	<> nr_seq_area_prep_w
					and	coalesce(a.dt_preparo::text, '') = ''
					and	not exists (	SELECT	1
										from	lp_individual x
										where	x.nr_seq_processo	=	a.nr_seq_processo
										and		x.nr_seq_area_prep	=	a.nr_seq_area_prep)
					and 	exists (	select 1
										from   prescr_mat_hor p
										where  p.nr_seq_processo = a.nr_seq_processo
										and	   p.nr_seq_area_prep = a.nr_seq_area_prep
										and	   coalesce(p.dt_suspensao::text, '') = '');

					if (ie_areas_nao_preparadas_w = 'N') then

						select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
						into STRICT	ie_areas_nao_geradas_a_prep_w
						from	prescr_mat_hor a
						where	a.nr_seq_processo	= nr_seq_processo_p
						and	a.nr_seq_area_prep	<> nr_seq_area_prep_w
						and	coalesce(a.dt_suspensao::text, '') = ''
						and	Obter_se_horario_liberado(a.dt_lib_horario, a.dt_horario) = 'S'
						and	not exists (
								SELECT	1
								from	adep_processo_area x
								where	x.nr_seq_processo	= a.nr_seq_processo
								and	x.nr_seq_area_prep	= a.nr_seq_area_prep);

						if (ie_areas_nao_geradas_a_prep_w = 'N') then
							begin
								if (coalesce(ie_conferencia_w,'S') = 'N') then
									update	adep_processo
									set	ie_status_processo	= 'L',
										dt_preparo			= clock_timestamp(),
										nm_usuario_preparo	= nm_usuario_p,
										ie_local_preparo	= 'GEDIPA',
										nr_seq_regra		= nr_seq_regra_w
									where	nr_sequencia	= nr_seq_processo_p;
								else
									update	adep_processo
									set	ie_status_processo	= 'P',
										dt_preparo			= clock_timestamp(),
										nm_usuario_preparo	= nm_usuario_p,
										ie_local_preparo	= 'GEDIPA',
										nr_seq_regra		= nr_seq_regra_w
									where	nr_sequencia	= nr_seq_processo_p;
								end if;

								if (coalesce(ie_baixar_lote_w,'N') = 'S') then

                                if (ie_rastreabilidade_adep_w = 'S') then
                                    CALL adep_gerar_log_rastr('{'||chr(10)||
                                    '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
                                    '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
                                end if;

									open c04;
									loop
									fetch c04 into
										nr_seq_lote_w;
									EXIT WHEN NOT FOUND; /* apply on c04 */
										begin

											select	count(*)
											into STRICT	qt_itens_lote_w
											from 	prescr_mat_hor
											where	nr_seq_lote = nr_seq_lote_w
											and (coalesce(nr_seq_processo::text, '') = '' or
													nr_seq_processo <> nr_seq_processo_p)
											and		ie_agrupador	= 1
											and		coalesce(nr_seq_superior::text, '') = '';

											if (coalesce(qt_itens_lote_w,0) > 0) then

                                            if (ie_rastreabilidade_adep_w = 'S') then
                                                CALL adep_gerar_log_rastr('{'||chr(10)||
                                                '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||                                                '"nr_seq_lote_w" : "'||nr_seq_lote_w||'",'||chr(10)||
                                                '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
                                            end if;

												open c05;
												loop
												fetch c05 into
													nr_seq_mat_hor_w,
													nr_seq_material_w,
													qt_dispensar_hor_w;
												EXIT WHEN NOT FOUND; /* apply on c05 */
													begin

														select 	max(nr_sequencia)
														into STRICT	nr_seq_ap_lote_item_w
														from	ap_lote_item
														where	nr_seq_lote	= nr_seq_lote_w
														and		nr_seq_mat_hor	= nr_seq_mat_hor_w;

														CALL Gerar_w_ap_lote_desdob(nr_seq_lote_w, nr_seq_ap_lote_item_w, nr_seq_mat_hor_w, qt_dispensar_hor_w, 0);

													end;
												end loop;
												close c05;

												nr_seq_lote_desdobrado_w := desdobrar_lote_prescricao(nr_seq_lote_w, nm_usuario_p, 'D', null, obter_desc_expressao(781468)/*'Lote desdobrado por preparo de processo.'*/, 'N', nr_seq_lote_desdobrado_w);

                                                if (ie_rastreabilidade_adep_w = 'S') then
                                                    CALL adep_gerar_log_rastr('{'||chr(10)||
                                                    '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
                                                    '"nr_seq_lote_w" : "'||nr_seq_lote_w||'",'||chr(10)||
                                                    '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
                                                end if;

												open c05;
												loop
												fetch c05 into
													nr_seq_mat_hor_w,
													nr_seq_material_w,
													qt_dispensar_hor_w;
												EXIT WHEN NOT FOUND; /* apply on c05 */
													begin

														update	prescr_mat_hor
														set		nr_seq_lote		= nr_seq_lote_desdobrado_w
														where	nr_sequencia	= nr_seq_mat_hor_w;

													end;
												end loop;
												close c05;

											end if;

											update	ap_lote
											set		ie_status_lote		= 'A',
													dt_atend_farmacia	= clock_timestamp()
											where	nr_sequencia		= coalesce(nr_seq_lote_desdobrado_w, nr_seq_lote_w);
										end;
									end loop;
									close c04;

								end if;
							end;
						end if;

					end if;

				end if;

			end if;

		elsif (ie_acao_p = 'C') then

			ie_regra_lanc_conta_w	:= obter_regra_lanc_conta_adep(wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, nm_usuario_p, 'CF');

			update	adep_processo
			set		ie_status_processo	= 'L',
					dt_leitura			= clock_timestamp(),
					nm_usuario_leitura	= nm_usuario_p,
					nr_seq_regra		= nr_seq_regra_w
			where	nr_sequencia		= nr_seq_processo_p;


			select	coalesce(max(dt_paciente),clock_timestamp())
			into STRICT	dt_paciente_w
			from	adep_processo
			where	nr_sequencia = nr_seq_processo_p;

			--Cobrar do paciente conferencia
			if (ie_regra_lanc_conta_w	= 'R') then
				CALL gravar_log_before_rais(94902,'atualiza_status_processo_adep nr_seq_processo_p='||nr_seq_processo_p||' dt_paciente_w='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_paciente_w, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)||' cd_estabelecimento='||wheb_usuario_pck.get_cd_estabelecimento||' cd_perfil='||obter_perfil_ativo,nm_usuario_p);
				nr_seq_map_w := gerar_estornar_adep_map(nr_seq_processo_p, null, null, 'GN', dt_paciente_w, nm_usuario_p, nr_seq_map_w, null, null, null);
			else

				select	coalesce(max('S'),'N')
				into STRICT	ie_nao_requisitado_w
				from	adep_processo_item
				where 	nr_seq_processo = nr_seq_processo_p
				and	coalesce(ie_nao_requisitado, 'N') = 'S';

            if (ie_rastreabilidade_adep_w = 'S') then
                CALL adep_gerar_log_rastr('{'||chr(10)||
                '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
                '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
            end if;

				open C01;
				loop
				fetch C01 into
					nr_prescricao_w,
					nr_seq_material_w,
					nr_seq_horario_w,
					cd_material_w,
					dt_horario_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin

					if (ie_regra_lanc_conta_w = 'S') then
						nr_seq_map_w := gerar_estornar_adep_map(null, nr_seq_horario_w, null, 'G', dt_paciente_w, nm_usuario_p, nr_seq_map_w, 'PP', null, null);
					elsif (ie_regra_lanc_conta_w = 'L') and (obter_se_lote_hor_conta_pac(nr_seq_horario_w) = 'S') then
						nr_seq_map_w := gerar_estornar_adep_map(null, nr_seq_horario_w, null, 'G', dt_paciente_w, nm_usuario_p, nr_seq_map_w, 'PP', null, null);
					end if;

					end;
				end loop;
				close C01;

				if (ie_nao_requisitado_w	= 'S') then
					nr_seq_map_w := gerar_estornar_adep_map(nr_seq_processo_p, null, null, 'GN', dt_paciente_w, nm_usuario_p, nr_seq_map_w, null, null, null);
				end if;

			end if;
			--Fim cobrar do paciente conferencia.
                if (ie_rastreabilidade_adep_w = 'S') then
                    CALL adep_gerar_log_rastr('{'||chr(10)||
                    '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
                    '"nr_seq_area_prep_p" : "'||nr_seq_area_prep_p||'",'||chr(10)||
                    '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
                end if;

			open C03;
			loop
			fetch C03 into
				nr_atendimento_w,
				cd_material_w,
				nr_prescricao_w,
				nr_seq_material_w,
				nr_seq_lote_w,
				nr_seq_lote_fornec_w,
				cd_setor_atendimento_w,
				dt_inicio_prescr_w,
				dt_horario_w,
				qt_dispensar_hor_w,
				cd_local_estoque_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */

				if (cd_setor_atendimento_w IS NOT NULL AND cd_setor_atendimento_w::text <> '') then
					select	coalesce(max(cd_local_estoque),0)
					into STRICT	cd_local_estoque_w
					from	setor_local
					where	cd_setor_atendimento = cd_setor_atendimento_w
					and	cd_local_estoque = cd_local_estoque_w
					and	coalesce(ie_loca_estoque_pac,'N') = 'S';
				end if;

				if (cd_local_estoque_w > 0) and (cd_local_estoque_w <> cd_local_estoque_saida_w) then
					if (ie_data_conta_lote_w = 'I') then
						dt_atendimento_w := dt_inicio_prescr_w;
					elsif (ie_data_conta_lote_w = 'D') then
						dt_atendimento_w := dt_horario_w;
					else
						dt_atendimento_w := clock_timestamp();
					end if;

					select	coalesce(ie_consignado,'0')
					into STRICT	ie_consignado_w
					from	material
					where	cd_material = cd_material_w;

					if (ie_consignado_w <> '0') then
						begin
						if (coalesce(nr_seq_lote_fornec_w, 0) > 0) then
							select	cd_cgc_fornec
							into STRICT	cd_cgc_fornec_w
							from	material_lote_fornec
							where	nr_sequencia = nr_seq_lote_fornec_w;
						else
							cd_cgc_fornec_w	:= obter_fornecedor_regra_consig(
										cd_estabelecimento_w,
										cd_material_w,
										'1');
						end if;
						end;
					end if;

					CALL gerar_transf_lote_prescricao(	nr_seq_lote_w, nr_prescricao_w, nr_seq_material_w, nr_atendimento_w, cd_material_w, cd_setor_atendimento_w,
									dt_atendimento_w, cd_cgc_fornec_w, qt_dispensar_hor_w, nr_seq_lote_fornec_w, cd_local_estoque_saida_w,
									cd_local_estoque_w, cd_estabelecimento_w, nm_usuario_p);
				end if;
			end loop;
			close C03;

		elsif (ie_acao_p = 'E') then

			if (ie_setar_dt_recebimento_w = 'S') then
				dt_entrega_w 	:=	clock_timestamp();
				nm_usuario_entrega_w	:= 	nm_usuario_p;
			else
				dt_entrega_w	:=	null;
				nm_usuario_entrega_w	:=	null;
			end if;

			update	adep_processo
			set	ie_status_processo	= 'R',
				dt_retirada			= clock_timestamp(),
				nm_usuario_retirada	= nm_usuario_p,
				nr_seq_regra		= nr_seq_regra_w,
				dt_entrega			= dt_entrega_w,
				nm_usuario_entrega	= nm_usuario_entrega_w
			where	nr_sequencia	= nr_seq_processo_p;

		end if;

	elsif (ie_funcao_p = 'A') then

		if (ie_acao_p = 'S') then

			update	adep_processo
			set	ie_status_processo		= 'D',
				dt_dispensacao			= clock_timestamp(),
				nm_usuario_dispensacao	= nm_usuario_p,
				nr_seq_regra			= nr_seq_regra_w
			where	nr_sequencia		= nr_seq_processo_p;

		elsif (ie_acao_p = 'E') then

			update	adep_processo
			set	ie_status_processo		= 'E',
				dt_expedicao			= clock_timestamp(),
				nm_usuario_expedicao	= nm_usuario_p,
				nr_seq_regra			= nr_seq_regra_w
			where	nr_sequencia		= nr_seq_processo_p;

		elsif (ie_acao_p = 'RS') then

			update	adep_processo
			set	ie_status_processo		= 'G',
				dt_dispensacao			 = NULL,
				nm_usuario_dispensacao	 = NULL,
				nr_seq_regra			= nr_seq_regra_w
			where	nr_sequencia		= nr_seq_processo_p;
						
			delete from adep_processo_area
			where	nr_seq_processo = nr_seq_processo_p;

		elsif (ie_acao_p = 'C') then

			update	adep_processo
			set	ie_status_processo	= 'L',
				dt_leitura			= clock_timestamp(),
				nm_usuario_leitura	= nm_usuario_p,
				nr_seq_regra		= nr_seq_regra_w
			where	nr_sequencia	= nr_seq_processo_p;

		elsif (ie_acao_p = 'RC') then

			update	adep_processo
			set	ie_status_processo	= 'D',
				dt_leitura			 = NULL,
				nm_usuario_leitura	 = NULL,
				nr_seq_regra		= nr_seq_regra_w
			where	nr_sequencia	= nr_seq_processo_p;

		elsif (ie_acao_p = 'P') then

			update	adep_processo
			set	ie_status_processo	= 'P',
				dt_preparo			= clock_timestamp(),
				nm_usuario_preparo	= nm_usuario_p,
				ie_local_preparo	= 'ADEP',
				nr_seq_regra		= nr_seq_regra_w
			where	nr_sequencia	= nr_seq_processo_p;

			select	coalesce(max(dt_paciente),clock_timestamp())
			into STRICT	dt_paciente_w
			from	adep_processo
			where	nr_sequencia = nr_seq_processo_p;

			if (ie_regra_lanc_conta_w	= 'R') then
				CALL gravar_log_before_rais(94902,'atualiza_status_processo_adep nr_seq_processo_p='||nr_seq_processo_p||' dt_paciente_w='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_paciente_w, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)||' cd_estabelecimento='||wheb_usuario_pck.get_cd_estabelecimento||' cd_perfil='||obter_perfil_ativo,nm_usuario_p);
				nr_seq_map_w := gerar_estornar_adep_map(nr_seq_processo_p, null, null, 'GN', dt_paciente_w, nm_usuario_p, nr_seq_map_w, null, null, null);
			else

				select	coalesce(max('S'),'N')
				into STRICT	ie_nao_requisitado_w
				from	adep_processo_item
				where 	nr_seq_processo = nr_seq_processo_p
				and		coalesce(ie_nao_requisitado, 'N') = 'S';

            if (ie_rastreabilidade_adep_w = 'S') then
                CALL adep_gerar_log_rastr('{'||chr(10)||
                '"'||$$plsql_unit||'" : "'||$$plsql_line||'",'||chr(10)||
                '"nr_seq_processo_p" : "'||nr_seq_processo_p||'"}', wheb_usuario_pck.get_ie_commit);
            end if;

				open C01;
				loop
				fetch C01 into
					nr_prescricao_w,
					nr_seq_material_w,
					nr_seq_horario_w,
					cd_material_w,
					dt_horario_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin

					if (ie_regra_lanc_conta_w = 'S') then
						nr_seq_map_w := gerar_estornar_adep_map(null, nr_seq_horario_w, null, 'G', dt_paciente_w, nm_usuario_p, nr_seq_map_w, 'PP', null, null);
					elsif (ie_regra_lanc_conta_w = 'L') and (obter_se_lote_hor_conta_pac(nr_seq_horario_w) = 'S') then
						nr_seq_map_w := gerar_estornar_adep_map(null, nr_seq_horario_w, null, 'G', dt_paciente_w, nm_usuario_p, nr_seq_map_w, 'PP', null, null);
					end if;

					end;
				end loop;
				close C01;

				if (ie_nao_requisitado_w	= 'S') then
					nr_seq_map_w := gerar_estornar_adep_map(nr_seq_processo_p, null, null, 'GN', dt_paciente_w, nm_usuario_p, nr_seq_map_w, null, null, null);
				end if;

			end if;

		elsif (ie_acao_p = 'RP') then

			update	adep_processo
			set	ie_status_processo	= 'L',
				dt_preparo			 = NULL,
				nm_usuario_preparo	 = NULL,
				nr_seq_regra		= nr_seq_regra_w
			where	nr_sequencia	= nr_seq_processo_p;

		elsif (ie_acao_p = 'A') then

			update	adep_processo
			set	ie_status_processo	= 'A',
				dt_paciente			= clock_timestamp(),
				nm_usuario_paciente	= nm_usuario_p,
				nr_seq_regra		= nr_seq_regra_w
			where	nr_sequencia	= nr_seq_processo_p;
			
		elsif (ie_acao_p = 'RA') then

			update	adep_processo
			set	ie_status_processo	= coalesce(ie_status_ant_processo_w,'P'),
				dt_paciente			 = NULL,
				nm_usuario_paciente	 = NULL,
				nr_seq_regra		= nr_seq_regra_w
			where	nr_sequencia	= nr_seq_processo_p;

		end if;

	end if;

GET DIAGNOSTICS ora2pg_rowcount = ROW_COUNT;


if ( ora2pg_rowcount > 0) then
	update	prescr_mat_hor
	set		dt_recusa  = NULL
	where	nr_seq_processo = nr_seq_processo_p;
end if;

end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualiza_status_processo_adep ( nr_seq_processo_p bigint, nr_seq_area_prep_p bigint, ie_funcao_p text, ie_acao_p text, dt_acao_p timestamp, nm_usuario_p text) FROM PUBLIC;

