-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_enviar_sms_mensalidade ( nr_seq_lote_p pls_lote_mensalidade.nr_sequencia%type, nr_seq_mensalidade_p pls_mensalidade.nr_sequencia%type, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


id_sms_w		bigint;
ds_mensagem_w		pls_parametros.ds_mensagem_sms_mens%type;
ds_remetente_w		pls_parametros.ds_remetente_sms%type;
cd_barras_w		varchar(255);
cd_barras_ww		varchar(255);
ds_mensagem_orig_w	pls_parametros.ds_mensagem_sms_mens%type;

C01 CURSOR FOR
	SELECT	a.nr_titulo,
		b.nr_sequencia nr_seq_mensalidade,
		replace(a.vl_titulo, ',', '.') vl_titulo,
		obter_desc_sigla_moeda(a.cd_moeda) ds_sigla_moeda,
		a.ie_tipo_titulo,
		to_char(a.dt_pagamento_previsto, 'dd/mm/yyyy') dt_vencimento_yyyy,
		to_char(a.dt_pagamento_previsto, 'dd/mm/yy') dt_vencimento_yy,
		to_char(a.dt_pagamento_previsto, 'mon/yyyy') dt_vencimento_mon_yyyy,
		obter_nome_pessoa_fisica(a.cd_pessoa_fisica,null) nm_pessoa,
		(a.vl_saldo_titulo + coalesce(a.vl_juros_boleto,0) + coalesce(a.vl_multa_boleto,0)) vl_total_titulo,
		obter_dias_entre_datas(a.dt_pagamento_previsto,clock_timestamp()) qt_dias_vencidos,
		(	SELECT	x.nr_ddd_celular || x.nr_telefone_celular
			from	pessoa_fisica x
			where	x.cd_pessoa_fisica = c.cd_pessoa_fisica) nr_destinatario,
		coalesce(c.ie_receber_sms, 'S') ie_receber_sms
	from	titulo_receber a,
		pls_mensalidade b,
		pls_contrato_pagador c
	where	b.nr_sequencia	= a.nr_seq_mensalidade
	and	c.nr_sequencia	= b.nr_seq_pagador
	and	(c.cd_pessoa_fisica IS NOT NULL AND c.cd_pessoa_fisica::text <> '')
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	b.nr_sequencia	= nr_seq_mensalidade_p
	and	a.ie_situacao = 1	
		
	
union all

	select	a.nr_titulo,
		b.nr_sequencia nr_seq_mensalidade,
		replace(a.vl_titulo, ',', '.') vl_titulo,
		obter_desc_sigla_moeda(a.cd_moeda) ds_sigla_moeda,
		a.ie_tipo_titulo,
		to_char(a.dt_pagamento_previsto, 'dd/mm/yyyy') dt_vencimento_yyyy,
		to_char(a.dt_pagamento_previsto, 'dd/mm/yy') dt_vencimento_yy,
		to_char(a.dt_pagamento_previsto, 'mon/yyyy') dt_vencimento_mon_yyyy,
		obter_nome_pessoa_fisica(a.cd_pessoa_fisica,null) nm_pessoa,
		(a.vl_saldo_titulo + coalesce(a.vl_juros_boleto,0) + coalesce(a.vl_multa_boleto,0)) vl_total_titulo,
		obter_dias_entre_datas(a.dt_pagamento_previsto,clock_timestamp()) qt_dias_vencidos,
		(	select	x.nr_ddd_celular || x.nr_telefone_celular
			from	pessoa_fisica x
			where	x.cd_pessoa_fisica = c.cd_pessoa_fisica) nr_destinatario,
		coalesce(c.ie_receber_sms, 'S') ie_receber_sms
	from	titulo_receber a,
		pls_mensalidade b,
		pls_contrato_pagador c
	where	b.nr_sequencia	= a.nr_seq_mensalidade
	and	c.nr_sequencia	= b.nr_seq_pagador
	and	(c.cd_pessoa_fisica IS NOT NULL AND c.cd_pessoa_fisica::text <> '')
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	b.nr_seq_lote	= nr_seq_lote_p
	and	a.ie_situacao = 1;

BEGIN
if ((nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') or (nr_seq_mensalidade_p IS NOT NULL AND nr_seq_mensalidade_p::text <> '')) then
		
	select	max(ds_mensagem_sms_mens),
		max(ds_remetente_sms)
	into STRICT	ds_mensagem_orig_w,
		ds_remetente_w
	from	pls_parametros
	where	cd_estabelecimento	= cd_estabelecimento_p;

	if (coalesce(ds_mensagem_orig_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort('Mensagem padrão não cadastrada. Favor realizar o cadastro na função OPS - Gestão de Operadoras / Parâmetros da OPS / Mensalidade, campo "Mensagem SMS".');
	end if;
	
	for r_c01_w in C01 loop
		begin
				
		ds_mensagem_w	:= ds_mensagem_orig_w;			
		
		if ((r_c01_w.nr_destinatario IS NOT NULL AND r_c01_w.nr_destinatario::text <> '') and r_c01_w.ie_tipo_titulo <> 10) and (r_c01_w.ie_receber_sms = 'S') then
			CALL gerar_bloqueto_tit_rec(r_c01_w.nr_titulo, null);
			
			select	replace(substr(converte_codigo_Bloqueto('Barra_Editado', nr_bloqueto),1,80),'.','-')
			into STRICT	cd_barras_w
			from	titulo_receber
			where	nr_titulo = r_c01_w.nr_titulo;
			
			select	replace(replace(substr(converte_codigo_Bloqueto('Barra_Editado', nr_bloqueto),1,80),'.',''),' ','')
			into STRICT	cd_barras_ww
			from	titulo_receber
			where	nr_titulo = r_c01_w.nr_titulo;
			
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@VL_TITULO', r_c01_w.vl_titulo), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@VENC_DD_MM_YYYY', r_c01_w.dt_vencimento_yyyy), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@VENC_DD_MM_YY', r_c01_w.dt_vencimento_yy), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@QT_DIAS_VENC', r_c01_w.qt_dias_vencidos), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@DS_SIGLA_MOEDA', r_c01_w.ds_sigla_moeda), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@CD_BARRAS', cd_barras_w), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@BARRAS', cd_barras_ww), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@NM_PESSOA', r_c01_w.nm_pessoa), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@PRIMEIRO_NOME', substr(r_c01_w.nm_pessoa,1,position(' ' in r_c01_w.nm_pessoa)-1)), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@VL_TOTAL_TIT',r_c01_w.vl_total_titulo), 1, 255);
			ds_mensagem_w	:=	substr(replace(ds_mensagem_w,'@VENC_ORIG_MON_YYYY',r_c01_w.dt_vencimento_mon_yyyy), 1, 255);
			
			if (length(ds_mensagem_w) > 150) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(321572,'QTD_LETRAS_W=' || to_char(length(ds_mensagem_w)) || ' ');
			end if;
			
			begin
				id_sms_w := wheb_sms.enviar_sms(ds_remetente_w, r_c01_w.nr_destinatario, ds_mensagem_w, nm_usuario_p, id_sms_w);
				
				insert into	log_envio_sms(	nr_sequencia,dt_atualizacao,nm_usuario,
						dt_envio,nr_telefone,ds_mensagem,id_sms)
				values (	nextval('log_envio_sms_seq'),clock_timestamp(),nm_usuario_p,
						clock_timestamp(),r_c01_w.nr_destinatario,ds_mensagem_w,id_sms_w);
				
				insert into 	pls_mensalidade_historico(	nr_sequencia, nr_seq_mensalidade, cd_estabelecimento,
						dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						dt_historico, nm_usuario_historico, ie_tipo_historico,
						ds_historico)
					values (	nextval('pls_mensalidade_historico_seq'), r_c01_w.nr_seq_mensalidade, cd_estabelecimento_p,
						clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, 'ES',
						substr('Código de barras  ' || cd_barras_w || ' enviado via SMS para o Celular Nº ' || r_c01_w.nr_destinatario || chr(13) || chr(10) ||
							'Mensagem: ' || ds_mensagem_w,1,4000));
			exception
			when others then
				ds_mensagem_w := sqlerrm;
				
				insert into	log_envio_sms(	nr_sequencia,dt_atualizacao,nm_usuario,
					dt_envio,nr_telefone,ds_mensagem,id_sms)
				values (	nextval('log_envio_sms_seq'),clock_timestamp(),nm_usuario_p,
					clock_timestamp(),r_c01_w.nr_destinatario,ds_mensagem_w,id_sms_w);
				
				insert into 	pls_mensalidade_historico(	nr_sequencia, nr_seq_mensalidade, cd_estabelecimento,
						dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						dt_historico, nm_usuario_historico, ie_tipo_historico,
						ds_historico)
					values (	nextval('pls_mensalidade_historico_seq'), r_c01_w.nr_seq_mensalidade, cd_estabelecimento_p,
						clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, 'EN',
						substr('Não foi possível enviar o boleto nº ' || cd_barras_w || ' via SMS para o pagador '|| r_c01_w.nm_pessoa ||', celular Nº ' || r_c01_w.nr_destinatario || chr(13) || chr(10) ||
							'Mensagem: ' || ds_mensagem_w,1,4000));
			end;		
		end if;
		end;
	end loop; --C01
	
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_enviar_sms_mensalidade ( nr_seq_lote_p pls_lote_mensalidade.nr_sequencia%type, nr_seq_mensalidade_p pls_mensalidade.nr_sequencia%type, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

