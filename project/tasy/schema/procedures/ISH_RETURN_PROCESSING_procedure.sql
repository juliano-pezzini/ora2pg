-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ish_return_processing ( nr_seq_fila_p bigint, xml_p xml, ie_status_p INOUT text) AS $body$
DECLARE


c01 CURSOR FOR
SELECT	*	
from	xmltable('Return/item' passing xml_p columns
		tipo		varchar(1)	path	'Type',
		identificador	varchar(10)	path	'Id',
		numero		varchar(3)	path	'Number',
		mensagem	varchar(220)	path	'Message',
	--	logno		varchar2(20)	path	'LogNo',

	--	logmsgno		varchar2(6)	path	'LogMsgNo',
		messagev1	varchar(50)	path	'MessageV1',
		messagev2	varchar(50)	path	'MessageV2',
		messagev3	varchar(50)	path	'MessageV3',
		messagev4	varchar(50)	path	'MessageV4',
		parametro		varchar(32)	path	'Parameter',
		linha		varchar(10)	path	'Row',
		campo		varchar(30)	path	'Field',
		sistema		varchar(10)	path	'System')
where	coalesce(tipo,'X') <> 'X'

union all

SELECT	*	
from	xmltable('Return/item' passing xml_p columns
		tipo		varchar(1)	path	'TYPE',
		identificador	varchar(10)	path	'ID',
		numero		varchar(3)	path	'NUMBER',
		mensagem	varchar(220)	path	'MESSAGE',
	--	logno		varchar2(20)	path	'LogNo',

	--	logmsgno		varchar2(6)	path	'LogMsgNo',
		messagev1	varchar(50)	path	'MESSAGEV1',
		messagev2	varchar(50)	path	'MESSAGEV2',
		messagev3	varchar(50)	path	'MESSAGEV3',
		messagev4	varchar(50)	path	'MESSAGEV4',
		parametro		varchar(32)	path	'PARAMETER',
		linha		varchar(10)	path	'ROW',
		campo		varchar(30)	path	'FIELD',
		sistema		varchar(10)	path	'SYSTEM')
where	coalesce(tipo,'X') <> 'X'

union all

select	*	
from	xmltable('ReturnTab/item' passing xml_p columns
		tipo		varchar(1)	path	'Type',
		identificador	varchar(10)	path	'Id',
		numero		varchar(3)	path	'Number',
		mensagem	varchar(220)	path	'Message',
	--	logno		varchar2(20)	path	'LogNo',

	--	logmsgno		varchar2(6)	path	'LogMsgNo',
		messagev1	varchar(50)	path	'MessageV1',
		messagev2	varchar(50)	path	'MessageV2',
		messagev3	varchar(50)	path	'MessageV3',
		messagev4	varchar(50)	path	'MessageV4',
		parametro		varchar(32)	path	'Parameter',
		linha		varchar(10)	path	'Row',
		campo		varchar(30)	path	'Field',
		sistema		varchar(10)	path	'System')
where	coalesce(tipo,'X') <> 'X'

union all

select	*	
from	xmltable('ReturnTab/item' passing xml_p columns
		tipo		varchar(1)	path	'TYPE',
		identificador	varchar(10)	path	'ID',
		numero		varchar(3)	path	'NUMBER',
		mensagem	varchar(220)	path	'MESSAGE',
	--	logno		varchar2(20)	path	'LogNo',

	--	logmsgno		varchar2(6)	path	'LogMsgNo',
		messagev1	varchar(50)	path	'MESSAGEV1',
		messagev2	varchar(50)	path	'MESSAGEV2',
		messagev3	varchar(50)	path	'MESSAGEV3',
		messagev4	varchar(50)	path	'MESSAGEV4',
		parametro		varchar(32)	path	'PARAMETER',
		linha		varchar(10)	path	'ROW',
		campo		varchar(30)	path	'FIELD',
		sistema		varchar(10)	path	'SYSTEM')
where	coalesce(tipo,'X') <> 'X';
		
c01_w	c01%rowtype;

ds_log_w		varchar(4000);
ie_tipo_erro_conv_w	varchar(40);
ie_tipo_w		intpd_log_recebimento.ie_tipo%type;
		

BEGIN
open c01;
loop
fetch c01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	
	/* Foi esclarecido pelo Daniel, que na verdade o codigo que deve ser ignorado pelo EGK e quenaod <Id>PC</Id><Number>011</Number>
	E este tratamento foi enviado para ISH_CONVERTER_RESPONSE
	if	(c01_w.tipo = 'E') and
		(nvl(c01_w.messagev2,'XPTO') = '0001828747')	then
		ie_status_p	:=	'S';
	else*/
	
	ie_tipo_erro_conv_w	:=	bkf_obter_conv_interna(null, 'INTPD_FILA_TRANSMISSAO', 'IE_TIPO_ERRO', c01_w.numero || ish_param_pck.get_separador || c01_w.identificador, null, null);
	
	if (c01_w.tipo = 'E') and (coalesce(ie_tipo_erro_conv_w,'XPTO') <> 'S') then
		ie_status_p	:=	'E';
	end if;
	
	
	begin	
	if (c01_w.tipo = 'E') and (ie_tipo_erro_conv_w = 'S') then
		ie_tipo_w	:=	'S';
	else
		ie_tipo_w	:=	c01_w.tipo;
	end if;
	exception
	when others then
		ie_tipo_w	:=	'E';
	end;
	
	
	ds_log_w	:=	null;
	
	if (length( c01_w.mensagem ) > 0) then
		ds_log_w	:=	substr('Message=' || c01_w.mensagem,1,4000);
	end if;
	
	if (length( c01_w.messagev1 ) > 0) then
		ds_log_w	:=	substr(ds_log_w || ';MessageV1=' || c01_w.messagev1,1,4000);
	end if;	
	
	if (length( c01_w.messagev2 ) > 0) then
		ds_log_w	:=	substr(ds_log_w || ';MessageV2=' || c01_w.messagev2,1,4000);
	end if;
	
	if (length( c01_w.messagev3 ) > 0) then
		ds_log_w	:=	substr(ds_log_w || ';MessageV3=' || c01_w.messagev3,1,4000);
	end if;
	
	if (length( c01_w.messagev4 ) > 0) then
		ds_log_w	:=	substr(ds_log_w || ';MessageV4=' || c01_w.messagev4,1,4000);
	end if;	
	
	if (length( c01_w.parametro ) > 0) then
		ds_log_w	:=	substr(ds_log_w || ';Parameter=' || c01_w.parametro,1,4000);
	end if;	
	
	if (length( c01_w.linha ) > 0) then
		ds_log_w	:=	substr(ds_log_w || ';Row=' || c01_w.linha,1,4000);
	end if;
	
	if (length( c01_w.campo ) > 0) then
		ds_log_w	:=	substr(ds_log_w || ';Field=' || c01_w.campo,1,4000);
	end if;
	
	if (length( c01_w.sistema ) > 0) then
		ds_log_w	:=	substr(ds_log_w || ';System=' || c01_w.sistema,1,4000);
	end if;

	if (length(ds_log_w) > 0) then	
		intpd_gravar_log_recebimento(nr_seq_fila_p, ds_log_w, 'INTPDTASY', null, ie_tipo_w);
	end if;
	
	end;
end loop;
close c01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_return_processing ( nr_seq_fila_p bigint, xml_p xml, ie_status_p INOUT text) FROM PUBLIC;

