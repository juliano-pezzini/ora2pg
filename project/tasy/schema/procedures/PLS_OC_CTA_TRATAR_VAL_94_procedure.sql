-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_94 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p text) AS $body$
DECLARE


i			integer;
dados_tb_sel_w		pls_tipos_ocor_pck.dados_table_selecao_ocor;
qt_cob_duplic_w		integer;
nr_lote_w			ptu_nota_cobranca.nr_lote%type;

C01 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
	SELECT	a.ie_valida_cob_duplic
	from	pls_oc_cta_val_cob_duplic a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

C02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type) FOR
	SELECT 	b.ie_origem_conta,
		b.nr_seq_conta,
		b.nr_seq_protocolo,
		b.cd_guia,
		b.cd_guia_ref cd_guia_referencia,
		b.dt_atendimento,
		b.nr_seq_segurado,
		b.nr_seq_nota_cobranca
	from 	pls_conta_ocor_v b
	where 	exists (SELECT	1
			from	pls_selecao_ocor_cta a
			where	a.nr_id_transacao = nr_id_transacao_pc
			and	a.ie_valido = 'S'
			and	a.nr_seq_conta = b.nr_sequencia);

c03 CURSOR(	nr_seq_conta_p		pls_conta_ocor_v.nr_seq_conta%type,
		cd_guia_p		pls_conta_ocor_v.cd_guia%type,
		cd_guia_referencia_p	pls_conta_ocor_v.cd_guia_referencia%type,
		nr_seq_nota_cobranca_p	pls_conta_ocor_v.nr_seq_nota_cobranca%type,
		nr_seq_segurado_p	pls_conta_ocor_v.nr_seq_segurado%type,
		dt_atendimento_p	pls_conta_ocor_v.dt_atendimento%type,
		ie_origem_conta_p	pls_conta_ocor_v.ie_origem_conta%type,
		nr_seq_protocolo_p	pls_conta_ocor_v.nr_seq_protocolo%type)FOR
	SELECT 	a.nr_sequencia nr_seq_conta_duplic
	from	pls_conta a,
		ptu_nota_cobranca b
	where	b.nr_sequencia = a.nr_seq_nota_cobranca
	and	a.nr_sequencia 	<> nr_seq_conta_p
	and	a.cd_guia	<> cd_guia_p
	and	coalesce(cd_guia_referencia::text, '') = ''
	and	coalesce(cd_guia_referencia_p::text, '') = ''
	and	b.nr_lote	= (	SELECT	nr_lote
					from	ptu_nota_cobranca
					where	nr_sequencia = nr_seq_nota_cobranca_p)
	and	nr_seq_segurado	= nr_seq_segurado_p
	and	dt_atendimento_referencia between inicio_dia(dt_atendimento_p) and fim_dia(dt_atendimento_p)
	and	a.ie_status <> 'C'
	and 	ie_origem_conta_p = 'A'
	
union all

	select 	nr_sequencia nr_seq_conta_duplic
	from	pls_conta
	where	nr_sequencia 	<> nr_seq_conta_p
	and	cd_guia		<> cd_guia_p
	and	coalesce(cd_guia_referencia::text, '') = ''
	and	coalesce(cd_guia_referencia_p::text, '') = ''
	and	nr_seq_protocolo = nr_seq_protocolo_p
	and	nr_seq_segurado  = nr_seq_segurado_p
	and	dt_atendimento_referencia between inicio_dia(dt_atendimento_p) and fim_dia(dt_atendimento_p)
	and	ie_status	<> 'C'
	and 	ie_origem_conta_p <> 'A';
BEGIN

-- Deve ter a informação da regra para que seja aplicada a validação.
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '')  then
	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);
	pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);
	i := 0;

	for r_C01_w in C01(dados_regra_p.nr_sequencia) loop

		if (coalesce(r_c01_w.ie_valida_cob_duplic, 'N') = 'S') then

			for	r_C02_w in C02(nr_id_transacao_p) loop
				qt_cob_duplic_w		:= 0;
				dados_tb_sel_w.ds_observacao(i):= null;

				for r_C03_w in C03(	r_c02_w.nr_seq_conta,
							r_c02_w.cd_guia,
							r_c02_w.cd_guia_referencia,
							r_c02_w.nr_seq_nota_cobranca,
							r_c02_w.nr_seq_segurado,
							r_c02_w.dt_atendimento,
							r_C02_w.ie_origem_conta,
							r_c02_w.nr_seq_protocolo) loop
					begin

					dados_tb_sel_w.ds_observacao(i):= dados_tb_sel_w.ds_observacao(i) || r_C03_w.nr_seq_conta_duplic || ', ';

					end;
				end loop;

				if (coalesce(dados_tb_sel_w.ds_observacao(i), 'X') <> 'X') then
					--Passa nr_seq_conta ao invéz do nr_seq_selecao, pois será feito validação a nível de conta
					dados_tb_sel_w.nr_seq_selecao(i) := r_C02_w.nr_seq_conta;
					dados_tb_sel_w.ds_observacao(i):= substr('Conta(s): ' || substr(dados_tb_sel_w.ds_observacao(i), 1, length(dados_tb_sel_w.ds_observacao(i)) - 2),1, 4000);
					dados_tb_sel_w.ie_valido(i) := 'S';

					if ( i >= pls_util_pck.qt_registro_transacao_w) then

						CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_sel_w.nr_seq_selecao, pls_util_cta_pck.clob_table_vazia_w,
												'SEQ_CONTA', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p, nr_id_transacao_p);
						pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);
						i := 0; -- zera o contador e fecha a transação
					else
						i := i + 1;
					end if;
				end if;

			end loop;  -- fehca o loop do c02
		end if;
	end loop;  -- fecha o loop do c01
	CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_sel_w.nr_seq_selecao, pls_util_cta_pck.clob_table_vazia_w,
							'SEQ_CONTA', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p, nr_id_transacao_p);
	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);

end if; -- fecha o if dados regras
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_94 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p text) FROM PUBLIC;

