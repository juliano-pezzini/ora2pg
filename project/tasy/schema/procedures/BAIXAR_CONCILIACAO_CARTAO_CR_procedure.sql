-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixar_conciliacao_cartao_cr (nr_seq_extrato_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_parcela_w		bigint;
vl_despesa_w			double precision;
nr_seq_trans_financ_w		bigint;
nr_seq_conta_banco_w		bigint;
nr_seq_bandeira_w		bigint;

vl_transacao_w			double precision;
nr_seq_trans_indevido_w		double precision;
dt_prev_pagto_w			timestamp;

ie_forma_lanc_lote_cartao_w	varchar(1);
cd_estabelecimento_w		smallint;
ie_gerar_movto_banco_w		varchar(1);
nr_seq_movto_trans_w		bigint;
ie_cni_indevido_w		varchar(1);
vl_ajuste_w			double precision;
nr_seq_movto_fin_w		bigint;

nr_seq_parcela_ajuste_w		bigint;
vl_total_parcela_w		double precision;
vl_total_original_w		double precision;
vl_original_w			double precision;
vl_liquido_w			double precision;
vl_ajuste_sobra_w		double precision;
nr_seq_movto_w			bigint;

c01 CURSOR FOR 
SELECT	a.nr_sequencia, 
	d.dt_prev_pagto, 
	b.vl_ajuste, 
	b.nr_sequencia 
from	movto_cartao_cr e, 
	extrato_cartao_cr_res d, 
	extrato_cartao_cr_parcela c, 
	extrato_cartao_cr_movto b, 
	movto_cartao_cr_parcela a 
where	a.nr_seq_extrato_parcela	= c.nr_sequencia 
and	b.nr_seq_extrato_parcela	= c.nr_sequencia 
and	b.nr_seq_extrato_res		= d.nr_sequencia 
and	a.nr_seq_movto			= e.nr_sequencia 
and	coalesce(e.dt_cancelamento::text, '') = '' 
and	c.nr_seq_extrato		= nr_seq_extrato_p;

c02 CURSOR FOR 
SELECT	a.vl_liquido, 
	a.dt_prev_pagto 
from	extrato_cartao_cr_desp a 
where	a.nr_seq_extrato	= nr_seq_extrato_p;

c03 CURSOR FOR 
SELECT	coalesce(a.vl_liquido,a.vl_parcela), 
	b.dt_prev_pagto 
from	extrato_cartao_cr_res b, 
	extrato_cartao_cr_movto a 
where	a.nr_seq_extrato_res	= b.nr_sequencia 
and	a.nr_seq_extrato	= nr_seq_extrato_p 
and	a.ie_pagto_indevido	= 'S';


BEGIN 
 
select	max(nr_seq_bandeira), 
	max(cd_estabelecimento) 
into STRICT	nr_seq_bandeira_w, 
	cd_estabelecimento_w 
from	extrato_cartao_cr 
where	nr_sequencia	= nr_seq_extrato_p;
 
select	coalesce(max(ie_forma_lanc_lote_cartao),'P') 
into STRICT	ie_forma_lanc_lote_cartao_w 
from	parametro_contas_receber 
where	cd_estabelecimento	= cd_estabelecimento_w;
 
ie_cni_indevido_w := obter_param_usuario(3020, 32, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_cni_indevido_w);
 
open c03;
loop 
fetch c03 into 
	vl_transacao_w, 
	dt_prev_pagto_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
 
	if (nr_seq_bandeira_w IS NOT NULL AND nr_seq_bandeira_w::text <> '') then 
 
		select	max(obter_valor_bandeira_estab(nr_sequencia,cd_estabelecimento_w,'NR_SEQ_CONTA_BANCO')), 
			max(obter_valor_bandeira_estab(nr_sequencia,cd_estabelecimento_w,'NR_SEQ_TRANS_INDEVIDO')) 
		into STRICT	nr_seq_conta_banco_w, 
			nr_seq_trans_indevido_w 
		from	bandeira_cartao_cr 
		where	nr_sequencia	= nr_seq_bandeira_w;
 
		if (coalesce(nr_seq_trans_indevido_w::text, '') = '') then 
			--'Falta informar a transação de pagamento indevido no cadastro da bandeira.'); 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(186819);
		end if;
 
		select	nextval('movto_trans_financ_seq') 
		into STRICT	nr_seq_movto_trans_w 
		;
 
		insert	into movto_trans_financ(nr_sequencia, 
			dt_transacao, 
			nr_seq_trans_financ, 
			vl_transacao, 
			dt_atualizacao, 
			nm_usuario, 
			nr_lote_contabil, 
			ie_conciliacao, 
			nr_seq_banco, 
			dt_referencia_saldo) 
		values (nr_seq_movto_trans_w, 
			coalesce(dt_prev_pagto_w,clock_timestamp()), 
			nr_seq_trans_indevido_w, 
			vl_transacao_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			0, 
			'N', 
			nr_seq_conta_banco_w, 
			clock_timestamp());
 
		if (ie_cni_indevido_w = 'S') then 
			CALL atualizar_transacao_financeira(cd_estabelecimento_w,nr_seq_movto_trans_w,nm_usuario_p,'I');
		end if;
 
	end if;
end loop;
close c03;
 
if (ie_forma_lanc_lote_cartao_w = 'P') then 
	ie_gerar_movto_banco_w	:= 'S';
else 
	ie_gerar_movto_banco_w	:= 'N';
end if;
 
nr_seq_parcela_ajuste_w	:= null;
vl_total_parcela_w	:= 0;
vl_total_original_w	:= 0;
vl_liquido_w		:= 0;
vl_original_w		:= 0;
 
open c01;
loop 
fetch c01 into 
	nr_seq_parcela_w, 
	dt_prev_pagto_w, 
	vl_ajuste_w, 
	nr_seq_movto_fin_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
 
	CALL ajustar_parcela_cartao_cr(nr_seq_parcela_w,null,vl_ajuste_w,nm_usuario_p,nr_seq_movto_fin_w);
 
	select	max(a.vl_original), 
		coalesce(vl_total_parcela_w,0) + coalesce(max(a.vl_liquido),0), 
		coalesce(vl_total_original_w,0) + coalesce(max(CASE WHEN coalesce(a.vl_original,0)=0 THEN a.vl_liquido  ELSE a.vl_original END ),0) 
	into STRICT	vl_original_w, 
		vl_total_parcela_w, 
		vl_total_original_w 
	from	movto_cartao_cr_parcela a 
	where	a.nr_sequencia	= nr_seq_parcela_w;
 
	if (coalesce(vl_original_w,0)	<> 0) then 
		nr_seq_parcela_ajuste_w	:= nr_seq_parcela_w;
	end if;
 
	CALL baixar_parcela_cartao_cr(nr_seq_parcela_w,coalesce(dt_prev_pagto_w,clock_timestamp()),nm_usuario_p,'S','S',null,ie_gerar_movto_banco_w,'N',0,0,null);
 
end loop;
close c01;
 
if (nr_seq_parcela_ajuste_w IS NOT NULL AND nr_seq_parcela_ajuste_w::text <> '') or (nr_seq_parcela_w IS NOT NULL AND nr_seq_parcela_w::text <> '') then 
 
	if (coalesce(nr_seq_parcela_ajuste_w::text, '') = '') then 
 
		update	movto_cartao_cr_parcela 
		set	vl_original		= coalesce(vl_liquido,0), 
			vl_liquido		= coalesce(vl_liquido,0) + coalesce(vl_ajuste_w,0), 
			vl_saldo_liquido	= vl_saldo_liquido + coalesce(vl_ajuste_w,0), 
			vl_despesa		= coalesce(vl_despesa,0) - coalesce(vl_ajuste_w,0) 
		where	nr_sequencia		= nr_seq_parcela_w;
 
	else 
 
		vl_ajuste_sobra_w	:= coalesce(vl_ajuste_w,0) - (coalesce(vl_total_parcela_w,0) - coalesce(vl_total_original_w,0));
 
		update	movto_cartao_cr_parcela 
		set	vl_liquido		= coalesce(vl_liquido,0) + coalesce(vl_ajuste_sobra_w,0), 
			vl_saldo_liquido	= vl_saldo_liquido + coalesce(vl_ajuste_sobra_w,0), 
			vl_despesa		= coalesce(vl_despesa,0) - coalesce(vl_ajuste_sobra_w,0) 
		where	nr_sequencia		= nr_seq_parcela_ajuste_w;
 
	end if;
 
	select	max(a.nr_seq_movto), 
		max(a.vl_liquido), 
		max(a.vl_despesa) 
	into STRICT	nr_seq_movto_w, 
		vl_liquido_w, 
		vl_despesa_w 
	from	movto_cartao_cr_parcela a 
	where	a.nr_sequencia	= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w);
 
	update	movto_cartao_cr_baixa a 
	set	a.vl_baixa		= vl_liquido_w, 
		a.vl_despesa		= vl_despesa_w 
	where	a.nr_sequencia		= 
		(SELECT	max(x.nr_sequencia) 
		from	movto_cartao_cr_baixa x 
		where	x.nr_seq_parcela	= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w)) 
	and	a.nr_seq_parcela		= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w);
 
	CALL atualizar_saldo_cartao_cr(nr_seq_movto_w, nm_usuario_p);
 
end if;
 
if (nr_seq_bandeira_w IS NOT NULL AND nr_seq_bandeira_w::text <> '') then 
 
	select	max((obter_valor_bandeira_estab(nr_sequencia,cd_estabelecimento_w,'NR_SEQ_CONTA_BANCO'))::numeric ), 
		max((obter_valor_bandeira_estab(nr_sequencia,cd_estabelecimento_w,'NR_SEQ_TRANS_DESP_EQUIP'))::numeric ) 
	into STRICT	nr_seq_conta_banco_w, 
		nr_seq_trans_financ_w 
	from	bandeira_cartao_cr 
	where	nr_sequencia	= nr_seq_bandeira_w;
 
	if (nr_seq_trans_financ_w IS NOT NULL AND nr_seq_trans_financ_w::text <> '') and (nr_seq_conta_banco_w IS NOT NULL AND nr_seq_conta_banco_w::text <> '') then 
		open c02;
		loop 
		fetch c02 into 
			vl_despesa_w, 
			dt_prev_pagto_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			CALL gerar_movto_despesa_equip(vl_despesa_w,nr_seq_trans_financ_w,nr_seq_conta_banco_w,coalesce(dt_prev_pagto_w,clock_timestamp()),nm_usuario_p,'N');
		end loop;
		close c02;
	end if;
end if;
 
update	extrato_cartao_cr 
set	dt_baixa	= clock_timestamp() 
where	nr_sequencia	= nr_seq_extrato_p;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixar_conciliacao_cartao_cr (nr_seq_extrato_p bigint, nm_usuario_p text) FROM PUBLIC;

