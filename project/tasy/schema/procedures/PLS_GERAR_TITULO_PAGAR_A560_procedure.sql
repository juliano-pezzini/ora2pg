-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_titulo_pagar_a560 ( nr_seq_nota_debito_p ptu_nota_debito.nr_sequencia%type, nr_seq_acao_p pls_processo_interc_acao.nr_sequencia%type, ie_commit_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar o titulo a pagar do arquivo A560
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/nr_titulo_w			titulo_pagar.nr_titulo%type;
cd_moeda_cp_w			parametros_contas_pagar.cd_moeda_padrao%type;
cd_tipo_taxa_juro_cp_w		parametros_contas_pagar.cd_tipo_taxa_juro%type;
cd_tipo_taxa_multa_cp_w		parametros_contas_pagar.cd_tipo_taxa_multa%type;
tx_juros_cp_w			parametros_contas_pagar.pr_juro_padrao%type;
tx_multa_cp_w			parametros_contas_pagar.pr_multa_padrao%type;
nr_seq_trans_fin_baixa_w	pls_processo_interc_acao.nr_seq_trans_fin_baixa%type;
nr_seq_trans_fin_contab_w	pls_processo_interc_acao.nr_seq_trans_fin_contab%type;
ie_status_w			varchar(2) := 'P';
ie_status_tit_pagar_w		pls_processo_interc_acao.ie_status_tit_pagar%type;
ie_tit_pagar_lib_pagamento_w	pls_processo_interc_acao.ie_tit_pagar_lib_pagamento%type;
dt_vencimento_w			timestamp;
vl_titulo_w			titulo_pagar.vl_titulo%type := 0;
nr_documento_w			ptu_nota_deb_conclusao.nr_nota_debito%type;
nr_seq_camara_contest_w		ptu_camara_contestacao.nr_sequencia%type;
nr_seq_ptu_fatura_w		ptu_fatura.nr_sequencia%type;
nr_seq_pls_fatura_w		pls_fatura.nr_sequencia%type;
cd_unimed_origem_w		ptu_fatura.cd_unimed_origem%type;
cd_cgc_w			pessoa_juridica.cd_cgc%type;
cd_cgc_regra_w			pessoa_juridica.cd_cgc%type;
nr_seq_lote_contest_w		pls_lote_contestacao.nr_sequencia%type;
nr_seq_lote_discussao_w		pls_lote_discussao.nr_sequencia%type;
ie_acao_w			pls_processo_interc_acao.ie_acao%type;
vl_titulo_fat_w			ptu_nota_deb_dados.vl_ndc%type;
vl_titulo_ndr_w			ptu_nota_deb_dados.vl_ndc%type;
id_ndc_conclusao_w		ptu_nota_deb_conclusao.id_ndc_conclusao%type;
nr_seq_nota_conclusao_w		ptu_nota_deb_conclusao.nr_sequencia%type;
qt_registro_562_w		integer;
dt_postagem_w			ptu_nota_debito.dt_postagem%type;
dt_emissao_w			timestamp;
ie_data_emissao_tit_a560_w	pls_parametros.ie_data_emissao_tit_a560%type;
qt_titulo_w			integer;
nr_seq_congenere_w		pls_congenere.nr_sequencia%type;
------------------------------------------------------------------------------------
nr_seq_camara_w			pls_camara_calendario.nr_seq_camara%type;
qt_dias_antes_a500_w		pls_processo_interc_acao.qt_dias_antes_a500%type;
nr_seq_classe_w			titulo_pagar.nr_seq_classe%type;
qt_registro_w			integer;
nr_titulo_fat_w			titulo_receber.nr_titulo%type;
cd_cgc_fat_w			pessoa_juridica.cd_cgc%type;
ie_data_tit_pag_a560_w		pls_camara_compensacao.ie_data_tit_pag_a560%type;
dt_referencia_camara_w		timestamp;

------------------------------------------------------------------------------------
ie_data_venc_tit_a560_w		pls_parametros.ie_data_venc_tit_a560%type;
nr_seq_periodo_w		bigint;
ds_camara_w			pls_camara_compensacao.ds_camara%type;
-------------------------------------------------------------------------------------
C01 CURSOR FOR
	SELECT	nr_nota_debito,
		dt_ven_nota,
		id_ndc_conclusao,
		nr_sequencia
	from	ptu_nota_deb_conclusao
	where	nr_seq_nota_debito = nr_seq_nota_debito_p;
	


BEGIN
select	coalesce(max(ie_data_emissao_tit_a560),'A'),
	coalesce(max(ie_data_venc_tit_a560),'DA')
into STRICT	ie_data_emissao_tit_a560_w,
	ie_data_venc_tit_a560_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

if (nr_seq_nota_debito_p IS NOT NULL AND nr_seq_nota_debito_p::text <> '') then
	qt_registro_562_w := 0;
	qt_titulo_w := 0;

	begin
	select	a.cd_moeda_padrao,
		a.cd_tipo_taxa_juro,
		a.cd_tipo_taxa_multa,
		a.pr_juro_padrao,
		a.pr_multa_padrao
	into STRICT	cd_moeda_cp_w,
		cd_tipo_taxa_juro_cp_w,
		cd_tipo_taxa_multa_cp_w,
		tx_juros_cp_w,
		tx_multa_cp_w
	from	parametros_contas_pagar a
	where	a.cd_estabelecimento	= cd_estabelecimento_p;
	exception
		when no_data_found then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(189164);
	end;
	
	select 	max(a.nr_seq_trans_fin_baixa),
		max(a.nr_seq_trans_fin_contab),
		CASE WHEN max(a.ie_tit_pagar_lib_pagamento)='S' THEN 'D'  ELSE 'P' END ,
		max(ie_status_tit_pagar),
		max(ie_tit_pagar_lib_pagamento),
		max(ie_acao),
		max(qt_dias_antes_a500),
		max(nr_seq_classe)
	into STRICT	nr_seq_trans_fin_baixa_w,
		nr_seq_trans_fin_contab_w,
		ie_status_w,
		ie_status_tit_pagar_w,
		ie_tit_pagar_lib_pagamento_w,
		ie_acao_w,
		qt_dias_antes_a500_w,
		nr_seq_classe_w
	from	pls_processo_interc_acao a
	where	a.nr_sequencia = nr_seq_acao_p;
	
	select	max(nr_seq_camara_contest),
		max(dt_postagem)
	into STRICT	nr_seq_camara_contest_w,
		dt_postagem_w
	from	ptu_nota_debito
	where	nr_sequencia = nr_seq_nota_debito_p;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	ptu_questionamento
	where	nr_seq_contestacao = nr_seq_camara_contest_w  LIMIT 1;
	
	select	max(z.nr_seq_ptu_fatura),
		max(z.nr_seq_pls_fatura),
		max(z.nr_sequencia)
	into STRICT	nr_seq_ptu_fatura_w,
		nr_seq_pls_fatura_w,
		nr_seq_lote_contest_w
	from	ptu_camara_contestacao	y,
		pls_lote_contestacao	z
	where	z.nr_sequencia	=	y.nr_seq_lote_contest
	and	y.nr_sequencia	=	nr_seq_camara_contest_w;
	
	-- Pagamento
	if (nr_seq_ptu_fatura_w IS NOT NULL AND nr_seq_ptu_fatura_w::text <> '') then
		select	max(a.cd_unimed_origem)
		into STRICT	cd_unimed_origem_w
		from	ptu_fatura a
		where	a.nr_sequencia	= nr_seq_ptu_fatura_w;
		
		select	max(a.cd_cgc),
			max(a.nr_sequencia)
		into STRICT	cd_cgc_w,
			nr_seq_congenere_w
		from	pls_congenere	a
		where	(a.cd_cooperativa)::numeric 	= (cd_unimed_origem_w)::numeric;
		
		select	max(cd_cgc)
		into STRICT	cd_cgc_regra_w
		from	pls_cong_cedente_intercamb
		where	nr_seq_congenere	= nr_seq_congenere_w
		and	trunc(clock_timestamp(), 'DD')	between dt_inicio_vigencia and coalesce(dt_fim_vigencia, trunc(clock_timestamp(), 'DD'))
		and	ie_ptu_a560		= 'S';
		
		cd_cgc_w := coalesce(cd_cgc_regra_w, cd_cgc_w);
	end if;
	
	-- Faturamento
	if (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') then
		select	max(a.cd_unimed_destino),
			max(b.nr_titulo)
		into STRICT	cd_unimed_origem_w,
			nr_titulo_fat_w
		from	ptu_fatura	a,
			pls_fatura	b
		where	b.nr_sequencia	= a.nr_seq_pls_fatura
		and	b.nr_sequencia	= nr_seq_pls_fatura_w;
		
		if (cd_unimed_origem_w IS NOT NULL AND cd_unimed_origem_w::text <> '') then		
			select	max(a.cd_cgc),
				max(a.nr_sequencia)
			into STRICT	cd_cgc_w,
				nr_seq_congenere_w
			from	pls_congenere a
			where	(a.cd_cooperativa)::numeric 	= (cd_unimed_origem_w)::numeric;
		end if;
		
		-- Pega a pessoa juridica do titulo do faturamento
		if (nr_titulo_fat_w IS NOT NULL AND nr_titulo_fat_w::text <> '') then
			select	max(cd_cgc)
			into STRICT	cd_cgc_fat_w
			from	titulo_receber
			where	nr_titulo = nr_titulo_fat_w;
		end if;
		
		if (coalesce(cd_cgc_w::text, '') = '') and (coalesce(cd_cgc_fat_w::text, '') = '') then
			select	max(nr_seq_congenere)
			into STRICT	nr_seq_congenere_w
			from	pls_fatura
			where	nr_sequencia = nr_seq_pls_fatura_w;
		
			if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
				select	max(cd_cooperativa)
				into STRICT	cd_unimed_origem_w
				from	pls_congenere
				where	nr_sequencia 	= nr_seq_congenere_w;
				
				if (cd_unimed_origem_w IS NOT NULL AND cd_unimed_origem_w::text <> '') then		
					select	max(a.cd_cgc)
					into STRICT	cd_cgc_w
					from	pls_congenere a
					where	(a.cd_cooperativa)::numeric 	= (cd_unimed_origem_w)::numeric;
				end if;
			end if;		
		end if;
		
		cd_cgc_w := coalesce(cd_cgc_fat_w, cd_cgc_w);
	end if;
	
	if (coalesce(cd_cgc_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(189165,'CD_UNIMED_ORIGEM='||cd_unimed_origem_w);
	end if;
	
	select	sum(coalesce(CASE WHEN d.tp_doc_568=2 THEN d.vl_ndc  ELSE 0 END ,0)) vl_fat,
		sum(coalesce(CASE WHEN d.tp_doc_568=1 THEN d.vl_ndc  ELSE 0 END ,0)) vl_fat_ndr
	into STRICT	vl_titulo_fat_w,
		vl_titulo_ndr_w
	from	ptu_nota_deb_dados	d,
		ptu_nota_deb_conclusao	c
	where	c.nr_sequencia		= d.nr_seq_nota_deb_conclusao
	and	c.nr_seq_nota_debito	= nr_seq_nota_debito_p;
	
	if (ie_status_tit_pagar_w = 'P') then
		ie_tit_pagar_lib_pagamento_w := 'N';
	end if;
	
	select	count(1)
	into STRICT	qt_registro_562_w
	from	ptu_nota_deb_conclusao
	where	nr_seq_nota_debito = nr_seq_nota_debito_p;
	
	open C01;
	loop
	fetch C01 into	
		nr_documento_w,
		dt_vencimento_w,
		id_ndc_conclusao_w,
		nr_seq_nota_conclusao_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		vl_titulo_w := 0;
		
		if (ie_data_emissao_tit_a560_w = 'A') then
			dt_emissao_w := clock_timestamp();
			
		elsif (ie_data_emissao_tit_a560_w = 'P') then
			dt_emissao_w := coalesce(dt_postagem_w,clock_timestamp());
			
		elsif (ie_data_emissao_tit_a560_w = 'R568') then
			select	max(dt_emissao_ndc)
			into STRICT	dt_emissao_w
			from	ptu_nota_deb_dados
			where	nr_seq_nota_deb_conclusao = nr_seq_nota_conclusao_w;
			
			dt_emissao_w := coalesce(dt_emissao_w,clock_timestamp());
		end if;
		
		-- Data de emissao nunca pode ser maior que a data de vencimento
		if (dt_emissao_w > dt_vencimento_w) then
			dt_emissao_w := clock_timestamp();
			
			if (dt_emissao_w > dt_vencimento_w) then
				dt_emissao_w := dt_vencimento_w;
			end if;
		end if;
		
		if (ie_acao_w = '2') then			
			if (qt_registro_562_w > 1) then
				if (id_ndc_conclusao_w = '1') then
					vl_titulo_w := vl_titulo_ndr_w;
					
				elsif (id_ndc_conclusao_w = '2') then
					vl_titulo_w := vl_titulo_fat_w;
				end if;				
			end if;
		
		elsif (ie_acao_w = '10') and (id_ndc_conclusao_w = '2') then -- Gerar titulo a pagar (Fatura)
			vl_titulo_w := vl_titulo_fat_w;
		
		elsif (ie_acao_w = '11') and (id_ndc_conclusao_w = '1') then -- Gerar titulo a pagar (NDR)
			vl_titulo_w := vl_titulo_ndr_w;
		end if;
		
		if (qt_registro_562_w = 1) then
			vl_titulo_w := vl_titulo_ndr_w + vl_titulo_fat_w;
			
			select	count(1)
			into STRICT	qt_titulo_w
			from	titulo_pagar
			where	nr_seq_nota_deb_conclusao = nr_seq_nota_conclusao_w;
		end if;
		
		-- OS 2017382 - inicio
		if (ie_data_venc_tit_a560_w = 'DC') then	-- Dt saldo devedor do calendario
			if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
				select	max(a.nr_seq_camara)
				into STRICT	nr_seq_camara_w
				from	pls_congenere_camara	a
				where	a.nr_seq_congenere	= nr_seq_congenere_w
				and	dt_emissao_w between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref;
				
				if (nr_seq_camara_w IS NOT NULL AND nr_seq_camara_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_periodo_w
					from (SELECT	a.nr_sequencia
						from	pls_camara_calendario b,
							pls_camara_calend_periodo a
						where	a.nr_seq_calendario	= b.nr_sequencia
						and	b.nr_seq_camara		= nr_seq_camara_w
						and	trunc(coalesce(dt_postagem_w,clock_timestamp()) - coalesce(qt_dias_antes_a500_w, 0),'dd') <= trunc(a.dt_limite_a500,'dd')
							order by a.dt_limite_a500) alias7 LIMIT 1;
					
					if (coalesce(nr_seq_periodo_w::text, '') = '') then
						select	substr(a.ds_camara, 1, 255)
						into STRICT	ds_camara_w
						from	pls_camara_compensacao a
						where	a.nr_sequencia	= nr_seq_camara_w;
						
						CALL wheb_mensagem_pck.exibir_mensagem_abort(176421,'DS_CAMARA=' || ds_camara_w);
					else
						select	coalesce(max(dt_saldo_devedor), dt_vencimento_w)
						into STRICT	dt_vencimento_w
						from	pls_camara_calend_periodo
						where	nr_sequencia = nr_seq_periodo_w;
						
						update	ptu_nota_deb_conclusao
						set	dt_ven_nota	= dt_vencimento_w
						where	nr_sequencia 	= nr_seq_nota_conclusao_w;
					end if;
				end if;
			end if;
		end if;
		-- OS 2017382 - Fim
		
		if (vl_titulo_w > 0) and (qt_titulo_w = 0) then			
			select	nextval('titulo_pagar_seq')
			into STRICT	nr_titulo_w
			;
			
			insert into titulo_pagar(nr_titulo,
				nm_usuario,
				dt_atualizacao,
				cd_estabelecimento,
				vl_titulo,
				vl_saldo_titulo,
				dt_emissao,
				dt_contabil,
				dt_vencimento_original,
				dt_vencimento_atual,
				vl_saldo_juros,
				vl_saldo_multa,
				cd_moeda,
				cd_tipo_taxa_juro,
				cd_tipo_taxa_multa,
				tx_juros,
				tx_multa,
				ie_origem_titulo,
				ie_tipo_titulo,
				ie_situacao,
				cd_pessoa_fisica,
				cd_cgc,
				ie_pls,
				nr_lote_contabil,
				ds_observacao_titulo,
				nr_seq_trans_fin_baixa,
				nr_seq_trans_fin_contab,
				ie_desconto_dia,
				ie_bloqueto,
				nr_seq_nota_deb_conclusao,
				nr_documento,
				ie_status,
				dt_liberacao,
				nm_usuario_lib,
				nr_seq_pls_lote_contest,
				nr_seq_classe)
			values (nr_titulo_w,
				nm_usuario_p,
				clock_timestamp(),
				cd_estabelecimento_p,
				coalesce(vl_titulo_w,0),
				coalesce(vl_titulo_w,0),
				dt_emissao_w,
				clock_timestamp(),
				coalesce(dt_vencimento_w,clock_timestamp()),
				coalesce(dt_vencimento_w,clock_timestamp()),
				0,
				0,
				cd_moeda_cp_w,
				cd_tipo_taxa_juro_cp_w,
				cd_tipo_taxa_multa_cp_w,
				tx_juros_cp_w,
				tx_multa_cp_w,
				'19', --Contestacao
				'27', --27 - Nota a pagar (credito/debito) 
				'A',
				null,
				cd_cgc_w,
				'S',
				0,
				'Titulo gerado a partir da importacao do arquivo A560.',
				nr_seq_trans_fin_baixa_w,
				nr_seq_trans_fin_contab_w,
				'N',
				'N',
				nr_seq_nota_conclusao_w,
				nr_documento_w,
				ie_status_tit_pagar_w,
				CASE WHEN ie_tit_pagar_lib_pagamento_w='S' THEN clock_timestamp()  ELSE null END ,
				CASE WHEN ie_tit_pagar_lib_pagamento_w='S' THEN 'Tasy'  ELSE null END ,
				nr_seq_lote_contest_w,
				nr_seq_classe_w);
				
			CALL atualizar_inclusao_tit_pagar(nr_titulo_w, nm_usuario_p);
			
			if (nr_seq_lote_contest_w IS NOT NULL AND nr_seq_lote_contest_w::text <> '') then				
				select	max(nr_sequencia)
				into STRICT	nr_seq_lote_discussao_w
				from	pls_lote_discussao a
				where	a.nr_seq_lote_contest = nr_seq_lote_contest_w
				and	ie_status  <> 'A'
				and	((coalesce(a.nr_titulo_pagar_ndr::text, '') = '')
				or (exists (SELECT	1
						from	titulo_pagar x,
							ptu_nota_deb_conclusao z
						where	x.nr_titulo	= a.nr_titulo_pagar_ndr
						and	z.nr_sequencia	= x.nr_seq_nota_deb_conclusao
						and	z.nr_seq_nota_debito = nr_seq_nota_debito_p)))
				and	((coalesce(a.nr_titulo_pagar::text, '') = '') 
				or (exists (select	1
						from	titulo_pagar x,
							ptu_nota_deb_conclusao z
						where	x.nr_titulo	= a.nr_titulo_pagar
						and	z.nr_sequencia	= x.nr_seq_nota_deb_conclusao
						and	z.nr_seq_nota_debito = nr_seq_nota_debito_p)));
			end if;
			
			if (nr_seq_lote_discussao_w IS NOT NULL AND nr_seq_lote_discussao_w::text <> '') then
				if (id_ndc_conclusao_w = '2') or (ie_acao_w = '2') then -- Gerar titulo a pagar (Fatura)
					update	pls_lote_discussao
					set	nr_titulo_pagar		= nr_titulo_w,
						nr_nota_credito_debito	= coalesce(nr_nota_credito_debito,nr_titulo_w)
					where	nr_sequencia		= nr_seq_lote_discussao_w;
				
				elsif (id_ndc_conclusao_w = '1') then -- Gerar titulo a pagar (NDR)
					update	pls_lote_discussao
					set	nr_titulo_pagar_ndr		= nr_titulo_w,
						nr_nota_credito_debito_ndr	= coalesce(nr_nota_credito_debito_ndr,nr_titulo_w)
					where	nr_sequencia			= nr_seq_lote_discussao_w;
				
				end if;
				
				if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
					update	titulo_pagar
					set		nr_seq_pls_lote_disc = nr_seq_lote_discussao_w
					where	nr_titulo = nr_titulo_w;
				end if;
			end if;
			
			-- Para gerar classificacao, o titulo tem que estar vinculado ao lote de discussao
			CALL pls_gerar_tit_pag_class_disc(nr_titulo_w, nm_usuario_p,'N');
			
			/*aaschlote 22/04/2014 - OS 662499 - Inserir o titulo na camara de compensacao*/

			if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
				select	max(a.nr_seq_camara)
				into STRICT	nr_seq_camara_w
				from	pls_congenere_camara	a
				where	a.nr_seq_congenere	= nr_seq_congenere_w
				and	dt_emissao_w between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref;
				
				-- avalia a data para o A560, conforme cadastro na camara, se a mesma existir. Se nao existir, deve ser usado o vencimento como padrao
				if (nr_seq_camara_w IS NOT NULL AND nr_seq_camara_w::text <> '') then
				
					select	coalesce(max(a.ie_data_tit_pag_a560), 'V')
					into STRICT	ie_data_tit_pag_a560_w
					from	pls_camara_compensacao	a
					where	a.nr_sequencia		= nr_seq_camara_w;
					
				else -- Padrao VENCIMENTO
					
					ie_data_tit_pag_a560_w := 'V';
				
				end if;
				
				-- se for usado a data de postagem
				if (ie_data_tit_pag_a560_w = 'P') then
				
					dt_referencia_camara_w := coalesce(dt_postagem_w,clock_timestamp());
				else -- PADRAO VENCIMENTO
				
					dt_referencia_camara_w := dt_vencimento_w;
				end if;

				if (qt_dias_antes_a500_w IS NOT NULL AND qt_dias_antes_a500_w::text <> '') and (nr_seq_camara_w IS NOT NULL AND nr_seq_camara_w::text <> '') then
					CALL pls_inserir_tit_camara( nr_titulo_w,null,nr_seq_camara_w,dt_referencia_camara_w,
								qt_dias_antes_a500_w,cd_estabelecimento_p,nm_usuario_p);
				end if;	
			end if;
		end if;
		end;
	end loop;
	close C01;
end if;

if (coalesce(ie_commit_p,'N') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_titulo_pagar_a560 ( nr_seq_nota_debito_p ptu_nota_debito.nr_sequencia%type, nr_seq_acao_p pls_processo_interc_acao.nr_sequencia%type, ie_commit_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

