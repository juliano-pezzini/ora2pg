-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_confirmar_lote_imp_unimed ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_lote_p bigint) AS $body$
DECLARE


nr_sequencia_w			bigint;
dt_atualizacao_w		timestamp;
nm_usuario_w			varchar(15);
dt_atualizacao_nrec_w		timestamp;
nm_usuario_nrec_w		varchar(15);
ds_razao_social_w		pessoa_juridica.ds_razao_social%type;
nm_fantasia_w			varchar(255);
ds_endereco_w			varchar(4000);
ds_bairro_w			varchar(255);
ds_cidade_w			varchar(255);
sg_estado_w 			pls_w_import_cad_unimed.sg_estado%type;
cd_cep_w	        	varchar(15);
cd_cgc_w	        	varchar(14);
nr_inscr_estadual_w     	varchar(30);
nr_inscr_municipal_w		varchar(30);
cd_ans_w	        	varchar(255);
ds_email_w			varchar(255);
nr_telefone_1_w			varchar(40);
ds_site_w	        	varchar(255);
cd_complexo_w           	bigint;
cd_tipo_pessoa_w		smallint;
qt_registro_w			varchar(14);
ds_tipo_prestador_w		varchar(255);
nr_seq_tipo_coop_w		bigint;
qt_inconsistencias_w		integer	:= 0;
cd_unimed_w			varchar(3);
nr_seq_congenere_w		bigint;	
cd_cgc_cad_w			varchar(14);
	
C01 CURSOR FOR
	SELECT	nr_sequencia,
		dt_atualizacao,
		nm_usuario,		
		dt_atualizacao_nrec,
		nm_usuario_nrec,		
		substr(ds_razao_social,1,80),
		substr(nm_fantasia,1,80),
		ds_tipo_prestador,
		substr(ds_endereco,1,40),	
		substr(ds_bairro,1,40),		
		substr(ds_cidade,1,40),
		sg_estado, 		
		cd_cep,	
		to_char(cd_cgc),
		substr(nr_inscr_estadual,1,20),     
		substr(nr_inscr_municipal,1,20),
		substr(cd_ans,1,20),		     
		substr(ds_email,1,60),		
		substr(nr_telefone_1,1,15),		
		substr(ds_site,1,40),
		cd_complexo
	from	pls_w_import_cad_unimed
	where	nr_seq_lote	= nr_seq_lote_p
	and	coalesce(ie_tipo_inconsistencia::text, '') = '';

C02 CURSOR FOR
	SELECT	substr(CASE WHEN coalesce(ds_hierarquia_5::text, '') = '' THEN				CASE WHEN coalesce(ds_hierarquia_4::text, '') = '' THEN 					CASE WHEN coalesce(ds_hierarquia_3::text, '') = '' THEN 						CASE WHEN coalesce(ds_hierarquia_2::text, '') = '' THEN ds_hierarquia_1  ELSE ds_hierarquia_2 END   ELSE ds_hierarquia_3 END   ELSE ds_hierarquia_4 END   ELSE ds_hierarquia_5 END ,1,3),
		cd_complexo
	from	pls_w_import_cad_unimed
	where	nr_seq_lote	= nr_seq_lote_p
	and	cd_complexo <> '999'
	and	coalesce(ie_tipo_inconsistencia::text, '') = '';


BEGIN

select	count(*)
into STRICT	qt_inconsistencias_w
from	pls_w_import_cad_unimed
where	nr_seq_lote	= nr_seq_lote_p
and	ie_tipo_inconsistencia	= 12;

if (qt_inconsistencias_w = 0) then
	update	pls_w_import_cad_unimed
	set	dt_importacao	= clock_timestamp()
	where	nr_seq_lote	= nr_seq_lote_p;
	
	select	max(cd_tipo_pessoa)
	into STRICT	cd_tipo_pessoa_w
	from	tipo_pessoa_juridica
	where	ie_comercial_ops = 'O';

	open C01;
	loop
	fetch C01 into
		nr_sequencia_w,
		dt_atualizacao_w,
		nm_usuario_w,		
		dt_atualizacao_nrec_w,
		nm_usuario_nrec_w,		
		ds_razao_social_w,		
		nm_fantasia_w,
		ds_tipo_prestador_w,
		ds_endereco_w,	
		ds_bairro_w,		
		ds_cidade_w,		
		sg_estado_w, 		
		cd_cep_w,	
		cd_cgc_w,	             
		nr_inscr_estadual_w,     
		nr_inscr_municipal_w,	
		cd_ans_w,		     
		ds_email_w,		
		nr_telefone_1_w,		
		ds_site_w,
		cd_complexo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select	max(cd_cgc)
		into STRICT	cd_cgc_cad_w
		from	pessoa_juridica a
		where	a.cd_cgc	= cd_cgc_w;
		
		if (coalesce(cd_cgc_cad_w::text, '') = '') then			
			if (cd_tipo_pessoa_w IS NOT NULL AND cd_tipo_pessoa_w::text <> '') then
				insert into pessoa_juridica(nm_usuario,		dt_atualizacao,		nm_usuario_nrec,
					dt_atualizacao_nrec,	ds_razao_social,	nm_fantasia,
					ds_endereco,		ds_bairro,		ds_municipio,
					sg_estado,		cd_cep,			cd_cgc,
					nr_inscricao_estadual,	nr_inscricao_municipal,	cd_ans,
					ds_email,		nr_telefone,		ds_site_internet,
					ie_prod_fabric,		ie_situacao,		cd_tipo_pessoa)
				values (nm_usuario_p, 		clock_timestamp(), 		nm_usuario_p,
					clock_timestamp(), 		ds_razao_social_w, 	nm_fantasia_w,
					ds_endereco_w,		ds_bairro_w,		ds_cidade_w,
					sg_estado_w,		cd_cep_w, 		cd_cgc_w,
					nr_inscr_estadual_w, 	nr_inscr_municipal_w, 	cd_ans_w,		
					ds_email_w, 		nr_telefone_1_w, 	ds_site_w,
					'N',	 		'A', 			cd_tipo_pessoa_w);
			end if;
		else
			update	pessoa_juridica
			set	nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario_nrec		= nm_usuario_p,
				dt_atualizacao_nrec	= clock_timestamp(),
				ds_razao_social		= ds_razao_social_w,
				nm_fantasia		= nm_fantasia_w,
				ds_endereco		= ds_endereco_w,
				ds_bairro		= ds_bairro_w,
				ds_municipio		= ds_cidade_w,
				sg_estado		= sg_estado_w,
				cd_cep			= cd_cep_w,
				cd_ans			= cd_ans_w,
				ds_email		= ds_email_w,
				nr_telefone		= nr_telefone_1_w,
				ds_site_internet	= ds_site_w,
				cd_tipo_pessoa		= cd_tipo_pessoa_w
			where	cd_cgc			= cd_cgc_cad_w;
		end if;
		
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_congenere_w
		from	pls_congenere	a
		where	a.cd_cgc	= cd_cgc_w;
		
		select	max(c.nr_sequencia)
		into STRICT	nr_seq_tipo_coop_w
		from	pls_tipo_cooperativa	c
		where	upper(c.ds_tipo) = upper(ds_tipo_prestador_w);
		
		if (coalesce(nr_seq_congenere_w::text, '') = '') then			
			if (nr_seq_tipo_coop_w IS NOT NULL AND nr_seq_tipo_coop_w::text <> '') then
				insert into pls_congenere(nr_sequencia, 			dt_atualizacao, 		nm_usuario,
					dt_atualizacao_nrec, 		nm_usuario_nrec, 		cd_cgc,
					ie_situacao, 			cd_cooperativa, 		dt_inclusao,
					nr_seq_tipo_coop,		cd_estabelecimento, 		ie_tipo_congenere,
					ie_gerar_usuario_eventual,	ie_relatorio_a100,		ie_situacao_atend)
				values (nextval('pls_congenere_seq'), 	clock_timestamp(), 			nm_usuario_p,
					clock_timestamp(), 			nm_usuario_p, 			cd_cgc_w,
					'A', 				cd_complexo_w, 			clock_timestamp(), 
					nr_seq_tipo_coop_w,		cd_estabelecimento_p, 		'CO',
					'S',				'N',				'A');
			end if;	
		else
			update	pls_congenere
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				dt_atualizacao_nrec	= clock_timestamp(),
				nm_usuario_nrec		= nm_usuario_p,
				cd_cooperativa		= cd_complexo_w,
				dt_inclusao		= clock_timestamp(),
				nr_seq_tipo_coop	= nr_seq_tipo_coop_w
			where	nr_sequencia		= nr_seq_congenere_w;
		end if;
			
		end;
	end loop;
	close C01;
else
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186839);
end if;

open C02;
loop
fetch C02 into	
	cd_unimed_w,
	cd_complexo_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	select	max(nr_sequencia)
	into STRICT	nr_seq_congenere_w
	from	pls_congenere
	where	lpad(cd_cooperativa,10,'0')	= lpad(cd_unimed_w,10,'0');
	
	if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
		update	pls_congenere
		set	nr_seq_congenere		= nr_seq_congenere_w
		where	lpad(cd_cooperativa,4,'0')	= lpad(cd_complexo_w,4,'0');
	end if;
	end;
end loop;
close C02;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_confirmar_lote_imp_unimed ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_lote_p bigint) FROM PUBLIC;

