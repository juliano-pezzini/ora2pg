-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_internacao_atendimento (nr_atendimento_p bigint, nr_seq_interno_p bigint, ie_tipo_guia_p text, dt_internacao_p timestamp, cd_setor_atendimento_p bigint, cd_unidade_basica_p text, cd_unidade_compl_p text, nr_doc_convenio_p text, ie_tipo_atendimento_p bigint, ie_clinica_p bigint, ie_novo_atendimento_p text, cd_medico_resp_p text, cd_responsavel_p text, nr_seq_classif_medico_p bigint, nm_usuario_p text, ie_manter_setor_origem_p text, cd_motivo_alta_p bigint, cd_procedencia_p bigint, ie_carater_inter_sus_p text, nr_seq_classificacao_p bigint, cd_tipo_acomodacao_p bigint default null, ie_atend_tiss_p bigint default null, ie_responsavel_p text DEFAULT NULL, nr_seq_grau_parentesco_p bigint DEFAULT NULL, nr_novo_atend_p INOUT bigint DEFAULT NULL, ds_erro_fecha_conta_p INOUT text DEFAULT NULL, dt_ving_ini_p timestamp DEFAULT NULL, dt_ving_fim_p timestamp DEFAULT NULL, qt_dia_int_p bigint DEFAULT NULL, ie_regime_internacao_p text default null, nr_seq_tipo_episodio_p bigint default null, nr_seq_tipo_admissao_fat_p bigint default null, nr_seq_queixa_p bigint default null, cd_departamento_medico_p bigint default null) AS $body$
DECLARE



cd_empresa_w				bigint;
cd_tipo_acomodacao_w			smallint;
cd_usuario_convenio_w			varchar(30);
ie_copia_disp_alta_pa_w			varchar(5);
ie_troca_setor_prescr_w			varchar(5);
nr_seq_interno_w				bigint;
nr_seq_unidade_w				bigint;
cd_convenio_w				integer;
cd_categoria_w				varchar(10);
cd_categoria_ww				varchar(10);
cd_classif_setor_w				varchar(02);
ie_copia_anamn_alta_pa_w		varchar(10);
cd_pessoa_fisica_w			varchar(10);
cd_tipo_acomod_unidade_w			smallint;
ie_copia_evolucao_alta_pa_w		varchar(1);
nr_atendimento_w				bigint;
cd_estabelecimento_w			bigint;
nr_seq_saida_spsadt_w			bigint;
cd_medico_resp_w				varchar(10);
ie_convenio_gv_w				varchar(1);/* Rafael em 19/2/8 OS69346 */
cd_plano_convenio_w			varchar(10);/*Edilson OS 86564*/
nr_seq_evento_w				bigint;
ds_erro_w				varchar(2000);
ie_procedencia_setor_w			varchar(1) := 'N';
cd_procedencia_setor_w			integer;
cd_setor_atendimento_w			integer;
cd_setor_ant_w				integer;
nr_seq_interno_unid_w			bigint;
dt_alta_w					timestamp;
cd_convenio_ww				integer;

cd_setor_atendimento_atend_w		integer;
cd_unidade_basica_atend_w			varchar(10);
cd_unidade_compl_atend_w			varchar(10);
nr_interno_conta_w				bigint;
ie_fecha_conta_w				varchar(1);
ie_fecha_atendimento_w			varchar(1);
qt_processo_pendente_w			bigint;
ds_inconsistencia_w			varchar(4000);
ds_erro_fecha_conta_w			varchar(4000);
ie_fechar_contas_internacao_w		varchar(1);
ie_registrar_atend_origem_w			varchar(1);
nr_prontuario_w				bigint;
nr_atendimento_utilizado_w			bigint;
ie_consiste_atend_w			varchar(2);
ie_fecha_conta_int_w			varchar(2);
ie_tipo_atend_tiss_w			varchar(255);
qt_idade_w				bigint;
qt_convenio_w				bigint;
cd_convenio_parametro_w			integer;
cd_categoria_parametro_w			varchar(10);
ie_permite_gerar_pacote_w			varchar(1);
ie_gera_pacote_automatic_w			varchar(1);
cd_convenio_atend_w			integer;
cd_categoria_atend_w			varchar(10);
dt_validade_carteira_w			timestamp;
cd_municipio_convenio_w			integer;
cd_complemento_w				varchar(30);
dt_ultimo_pagto_w				timestamp;
cd_dependente_w				smallint;
ie_regime_internacao_w			varchar(5);
nr_seq_lib_dieta_conv_w			bigint;
qt_dia_internacao_w			smallint;
cd_senha_w				varchar(20);
dt_final_vigencia_w				timestamp;
cd_convenio_glosa_w			integer;
cd_categoria_glosa_w			varchar(10);
cd_usuario_conv_glosa_w			varchar(30);
cd_complemento_glosa_w			varchar(30);
dt_validade_cart_glosa_w			timestamp;
nr_doc_conv_principal_w			varchar(20);
nr_acompanhante_w			smallint;
ie_lib_dieta_w				varchar(15);
qt_dieta_acomp_w				smallint;
ds_observacao_w				atend_categoria_convenio.ds_observacao%type;
nr_seq_tipo_lib_guia_w			bigint;

ie_transfere_itens_w			varchar(1);
ie_origem_proced_w			bigint;
cd_procedimento_w			bigint;
nr_sequencia_w				bigint;
ie_classificacao_w				varchar(5);
cd_cgc_prestador_w			varchar(14);
cd_medico_executor_w			varchar(10);
dt_procedimento_w				timestamp;
cd_setor_atendimento_ww			bigint;
ie_gera_proc_w				varchar(1);
dt_entrada_w				timestamp;
dt_atendimento_w				timestamp;
ie_consiste_setor_w 		varchar(1);
ie_gerar_pagador_atend_w	varchar(1);
qt_idade_min_pagador_w		bigint;
ds_msg_idade_pagador_w		varchar(255);
ie_tranf_nasc_pa_w			varchar(10);
ie_gerar_guia_w				varchar(1);
ie_tipo_guia_w				varchar(2);
nr_doc_conv_regra_w			varchar(20);
ie_tipo_convenio_w				smallint;
ie_clinica_w				integer;
ie_transfere_prescr_w			varchar(1);
qt_regra_taxa_repouso_w			bigint;
qt_regra_etapa_w				bigint;
ie_trans_ped_parec_pend_pa_w		varchar(10);	
ie_regra_tipo_atend_w			varchar(1) := 'A';
ie_atualizar_atend_guia_tiss_w		varchar(15) := 'N';
nr_seq_cobertura_w			bigint := null;
nr_acompanhante_dieta_w			smallint;
qt_acomp_dieta_w				smallint;
nr_seq_regra_acomp_w			bigint;
ie_atualizar_dieta_lib_conv_w			varchar(1);
ie_lib_diet_w				varchar(15);
ie_lib_dieta_conv_w			varchar(15);
ie_altera_periodo_final_w			varchar(1);
ie_utiliza_data_intern_alta_w			varchar(1);
nr_seq_classif_pf_w			bigint;
qtd_internado_w 				bigint;
nr_seq_classif_w				bigint;
nr_seq_queixa_w				bigint;
ie_consiste_estab_conta_w		varchar(1) := 'S';
nr_atend_novo_w				bigint;
qt_existe_regra_setor_w			bigint;
qt_existe_dips_setor_w			bigint;
nr_seq_empresa_w			empresa_integracao.nr_sequencia%type;
ie_setor_swisslog_w			varchar(1) := 'N';
ds_param_integ_hl7_w			varchar(4000);
cd_cid_principal_w			gestao_vaga.cd_cid_principal%type;
nr_seq_vaga_w				gestao_vaga.nr_sequencia%type;	
ie_data_gasto_superior_w	varchar(15);
ie_gasto_superior_w		varchar(3);
ds_setores_w			varchar(4000);
dt_inicio_vigencia_ww	timestamp;
dt_fim_vigencia_ww		timestamp;
cd_senha_ww				varchar(20);
cd_autorizacao_ww		varchar(20);
qt_dia_autorizado_ww	smallint;
ie_tipo_guia_ww			varchar(2);
ie_utiliza_ult_autorizacao_w	varchar(1);
ie_replicar_diag_w		varchar(1);
ie_replicar_diagnostico_w		varchar(1);
nr_seq_episodio_w		atendimento_paciente.nr_seq_episodio%type;
cd_departamento_w		atend_paciente_unidade.cd_departamento%type;
nr_seq_interno_ww		atend_categoria_convenio.nr_seq_interno%type;
qt_movto_pac_w			bigint;	
dt_chegada_paciente_w		atendimento_paciente.dt_entrada%type;		
qt_dias_pagamento_w		pessoa_fisica_taxa.qt_dias_pagamento%type;
dt_pagamento_w			pessoa_fisica_taxa.dt_pagamento%type;
nr_seq_justificativa_w  	pessoa_fisica_taxa.nr_seq_justificativa%type;
ie_obriga_pag_adicional_w	pessoa_fisica_taxa.ie_obriga_pag_adicional%type;
nr_prioridade_w			atend_categoria_convenio.nr_prioridade%type;
ie_tipo_conveniado_w		atend_categoria_convenio.ie_tipo_conveniado%type;
nr_seq_atecaco_w            atend_categoria_convenio.nr_seq_interno%type;
qt_mesmo_convenio_p		integer;
qtd_encounters_w        smallint := 0;
cd_plano_glosa_w            atend_categoria_convenio.cd_plano_glosa%TYPE;
ie_cod_usuario_mae_resp_w   atend_categoria_convenio.ie_cod_usuario_mae_resp%TYPE;
cd_senha_provisoria_w       atend_categoria_convenio.cd_senha_provisoria%TYPE;
nr_seq_origem_w             atend_categoria_convenio.nr_seq_origem%TYPE;
pessoa_fisica_taxa_w  pessoa_fisica_taxa%rowtype;
ie_can_admit_w			varchar(1);
nr_seq_justif_w			pessoa_fisica_taxa.nr_seq_justificativa%type;

ds_leito_w				varchar(10);
ds_leito_ant_w			varchar(10);

C01 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_evento_disp		= 'I'
	and	(((nr_seq_classif IS NOT NULL AND nr_seq_classif::text <> '') and (coalesce(nr_seq_classif, nr_seq_classif_w) = nr_seq_classif_w)) or
		 ((coalesce(nr_seq_classif::text, '') = '') and (obter_classif_regra_pf(nr_sequencia,coalesce(nr_seq_classif_w,0)) = 'S')))	
	and (obter_se_conv_rec_alerta(cd_convenio_ww, nr_sequencia) = 'S')
	and (obter_se_sms_setor_alerta(nr_Atendimento_w, nr_sequencia) = 'S')
	and	obter_se_regra_envio(nr_sequencia, nr_atendimento_w) = 'S'
	and	obter_se_regra_envio_intern(nr_sequencia, nr_atendimento_w, ie_novo_atendimento_p) = 'S'
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)	
	and	coalesce(CD_SETOR_ATENDIMENTO,cd_setor_atendimento_p) = cd_setor_atendimento_p
	and	coalesce(ie_situacao,'A') = 'A';
	
C02 CURSOR FOR
	SELECT	nr_interno_conta,
		cd_convenio_parametro,	
	        cd_categoria_parametro	
	from	conta_paciente
	where	nr_atendimento		= nr_atendimento_w
	and 	((cd_estabelecimento = cd_estabelecimento_w) or (ie_consiste_estab_conta_w = 'N'))
	and 	cd_convenio_parametro   = obter_convenio_atendimento(nr_atendimento_w)
	and 	ie_status_acerto	= 1
	and	ie_novo_atendimento_p	= 'N';
	
c03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_procedimento,
		a.ie_origem_proced,
		b.ie_classificacao,
		a.cd_cgc_prestador,
		a.cd_medico_executor,
		a.dt_procedimento,
		a.cd_setor_atendimento
	from	procedimento b,
		procedimento_paciente a,
		conta_paciente c
	where	a.nr_atendimento	= nr_atendimento_p
	and	a.nr_interno_conta	= c.nr_interno_conta
	and	c.ie_status_acerto	= 1
	and	a.cd_procedimento	= b.cd_procedimento
	and	a.ie_origem_proced	= b.ie_origem_proced
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	order by a.dt_procedimento;

c04 CURSOR FOR
	SELECT	m.nr_sequencia,
		cd_setor_atendimento,
		m.dt_atendimento
	from	material_atend_paciente m,
		conta_paciente c
	where	m.nr_atendimento		= nr_atendimento_p
	and	m.nr_interno_conta		= c.nr_interno_conta
	and	c.ie_status_acerto		= 1
	order by 1;

c05 CURSOR FOR
	SELECT	*
	from	parto
	where	nr_atendimento	= nr_atendimento_p;
	
c05_w c05%rowtype;

C06 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_evento_disp		= 'IC'
	and	(((nr_seq_classif IS NOT NULL AND nr_seq_classif::text <> '') and (coalesce(nr_seq_classif, nr_seq_classif_w) = nr_seq_classif_w)) or
		 ((coalesce(nr_seq_classif::text, '') = '') and (obter_classif_regra_pf(nr_sequencia,coalesce(nr_seq_classif_w,0)) = 'S')))	
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(ie_situacao,'A') = 'A';

	c_convenios_atend CURSOR FOR
        SELECT	cd_convenio,
                cd_categoria,
                dt_inicio_vigencia,
                cd_usuario_convenio,
                cd_empresa,
                nr_doc_convenio,
                cd_tipo_acomodacao,
                ie_tipo_guia,
                nr_seq_interno,
                cd_plano_convenio,
                dt_validade_carteira,
                cd_municipio_convenio,
                cd_complemento,	
                dt_ultimo_pagto,
                cd_dependente,
                ie_regime_internacao,
                nr_seq_lib_dieta_conv,
                qt_dia_internacao,
                cd_senha,
                dt_final_vigencia,
                cd_convenio_glosa,
                cd_categoria_glosa,
                cd_usuario_conv_glosa,
                cd_complemento_glosa,
                dt_validade_cart_glosa,
                nr_doc_conv_principal,
                nr_acompanhante,
                ie_lib_dieta,
                qt_dieta_acomp,
                ds_observacao,
                nr_seq_tipo_lib_guia,
                nr_seq_cobertura,
                nr_seq_regra_acomp,
                nr_prioridade,
                ie_tipo_conveniado,
				ie_autoriza_envio_convenio,
                cd_plano_glosa,
                ie_cod_usuario_mae_resp,
                cd_senha_provisoria,
                nr_seq_origem
        from	atend_categoria_convenio
        where	nr_atendimento = nr_atendimento_p
        and ((trunc(dt_internacao_p) between trunc(dt_inicio_vigencia) and trunc(dt_final_vigencia))
        or (trunc(dt_internacao_p) >= trunc(dt_inicio_vigencia) and coalesce(dt_final_vigencia::text, '') = ''));
	
	r_convenios_atend c_convenios_atend%ROWTYPE;
	
	c_convenios_paciente CURSOR FOR
	 SELECT cd_convenio,
                cd_categoria,
                dt_inicio_vigencia,
                cd_usuario_convenio,
                cd_plano_convenio,
                dt_validade_carteira,
                cd_complemento,	
                dt_fim_vigencia

          from  pessoa_titular_convenio
          where cd_pessoa_fisica = (SELECT cd_pessoa_fisica from atendimento_paciente where nr_atendimento = nr_atendimento_p )
          and   ((trunc(dt_internacao_p) between trunc(dt_inicio_vigencia) and trunc(dt_fim_vigencia))
                or (trunc(dt_internacao_p) >= trunc(dt_inicio_vigencia) and coalesce(dt_fim_vigencia::text, '') = ''));
		
		r_convenios_pac c_convenios_paciente%ROWTYPE;
		

BEGIN
nr_novo_atend_p := null;
ie_consiste_setor_w := Obter_param_usuario(916, 633, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_consiste_setor_w);
ie_replicar_diag_w := obter_param_usuario(916, 429, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_replicar_diag_w);
ie_replicar_diagnostico_w := Obter_param_Usuario(916, 1163, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_replicar_diagnostico_w);
/*Abortar todo o processo se setor estiver em branco*/

if (ie_consiste_setor_w = 'S') then
	if (cd_setor_atendimento_p = 0) or (cd_unidade_basica_p = '') or (cd_unidade_compl_p = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(183206);
	end if;
end if;

nr_atendimento_w	:= nr_atendimento_p;

select	max(cd_pessoa_fisica),
		max(cd_estabelecimento),
		max(cd_medico_resp),
		max(nr_seq_queixa)
into STRICT	cd_pessoa_fisica_w,
		cd_estabelecimento_w,
		cd_medico_resp_w,
		nr_seq_queixa_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_w;

CALL update_dt_alta_automatic(cd_pessoa_fisica_w, cd_motivo_alta_p);

qt_idade_w	:= coalesce(obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A'),0);
cd_convenio_ww	  := Obter_Convenio_Atendimento(nr_atendimento_p);
ie_gera_pacote_automatic_w := Obter_param_usuario(916, 578, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gera_pacote_automatic_w);

nr_seq_classif_w  := obter_classificacao_pf(cd_pessoa_fisica_w);

if (ie_gera_pacote_automatic_w = 'R')  then

	begin
	select	cd_convenio,
		cd_categoria
	into STRICT	cd_convenio_atend_w,
		cd_categoria_atend_w
	from	atend_categoria_convenio
	where	nr_seq_interno = nr_seq_interno_p;
	exception  when others
		then
		cd_convenio_atend_w 	:=  0;
		cd_categoria_atend_w	:= '0';	
	end;

	open C02;
	loop
	fetch C02 into	
		nr_interno_conta_w,
		cd_convenio_parametro_w,
		cd_categoria_parametro_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin		

		select	coalesce(max(ie_permite_gerar_pacote),'N')
		into STRICT	ie_permite_gerar_pacote_w
		from   	categoria_convenio
		where  	cd_convenio = cd_convenio_parametro_w	
		and    	cd_categoria = cd_categoria_parametro_w;
		
		if (coalesce(ie_permite_gerar_pacote_w,'N') = 'S') and (coalesce(ie_gera_pacote_automatic_w,'N') = 'R') and (cd_convenio_atend_w  = cd_convenio_parametro_w) and (cd_categoria_atend_w = cd_categoria_parametro_w) then
			CALL calcular_pacote(nr_atendimento_w,
				nr_interno_conta_w,
				cd_convenio_parametro_w,
				cd_categoria_parametro_w,
				nm_usuario_p,
				'S','S','S','S','N');
		end if;
		
		end;
	end loop;
	close C02;

end if;

ie_convenio_gv_w := Obter_param_usuario(916, 218, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_convenio_gv_w);
ie_procedencia_setor_w := Obter_param_usuario(916, 310, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_procedencia_setor_w);
ie_fechar_contas_internacao_w := Obter_param_usuario(916, 361, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_fechar_contas_internacao_w);
ie_troca_setor_prescr_w := Obter_param_usuario(916, 412, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_troca_setor_prescr_w);
ie_registrar_atend_origem_w := Obter_param_usuario(916, 440, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_registrar_atend_origem_w);
ie_consiste_atend_w := Obter_param_usuario(916, 467, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_consiste_atend_w);	
ie_transfere_itens_w := Obter_param_usuario(916, 609, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_transfere_itens_w);
ie_gerar_guia_w := Obter_param_usuario(916, 712, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_guia_w);
-- Jerusa OS 544010
ie_atualizar_atend_guia_tiss_w := Obter_param_usuario(916, 846, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_atualizar_atend_guia_tiss_w);

ie_altera_periodo_final_w := Obter_param_usuario(916, 956, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_altera_periodo_final_w);
ie_utiliza_data_intern_alta_w := Obter_param_usuario(916, 960, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_utiliza_data_intern_alta_w);
ie_gerar_pagador_atend_w := Obter_param_usuario(916, 394, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_pagador_atend_w);
qt_idade_min_pagador_w := Obter_param_Usuario(916, 149, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, qt_idade_min_pagador_w);
ie_data_gasto_superior_w := Obter_param_usuario(916, 76, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_data_gasto_superior_w);


select	obter_setor_atendimento(nr_Atendimento_p)
into STRICT	cd_setor_atendimento_w
;

select	coalesce(Obter_Procedencia_Setor(cd_Setor_atendimento_w, cd_estabelecimento_w),'')
into STRICT	cd_procedencia_setor_w
;

nr_seq_interno_unid_w	:= obter_atepacu_paciente(nr_atendimento_p, 'A');

if (ie_consiste_atend_w = 'S') then
	select	count(coalesce(nr_atendimento,0))
	into STRICT	nr_atendimento_utilizado_w
	from	atendimento_paciente
	where	nr_atend_original = nr_atendimento_p;

	if (nr_atendimento_utilizado_w > 0 ) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(183207);
	end if;
end if;

SELECT COUNT(*)
INTO STRICT   qtd_internado_w
FROM   atendimento_paciente
WHERE  nr_atend_origem_pa = nr_atendimento_p
AND	   cd_pessoa_fisica = obter_pessoa_atendimento(nr_atendimento_p,'C')
AND	   coalesce(dt_cancelamento::text, '') = ''
AND	   ie_tipo_atendimento = '1';


if (nr_seq_tipo_episodio_p IS NOT NULL AND nr_seq_tipo_episodio_p::text <> '') and (pkg_i18n.get_user_locale in ('de_DE', 'de_AT')) then

	CALL change_dt_treatment_certif(nr_atendimento_p);

    select nr_seq_episodio
    into STRICT   nr_seq_episodio_w
    from   atendimento_paciente
    where  nr_atendimento = nr_atendimento_p;

    update episodio_paciente
    set	   nr_seq_tipo_episodio = nr_seq_tipo_episodio_p
    where  nr_sequencia = nr_seq_episodio_w;

    cd_departamento_w	:= cd_departamento_medico_p;

end if;

if (qtd_internado_w = 0) then

	if (ie_novo_atendimento_p = 'S') then
		begin			

		select	coalesce(max('N'),'S')
		into STRICT	ie_can_admit_w
		from	atendimento_paciente ap
		where   obter_se_case_atend_planejado(ap.nr_atendimento) = 'S'
		and	ap.nr_atendimento = nr_atendimento_p;		
		
		if ((cd_motivo_alta_p IS NOT NULL AND cd_motivo_alta_p::text <> '') and ie_can_admit_w = 'S') then
			
			If (ie_utiliza_data_intern_alta_w = 'S') then
				dt_alta_w := dt_internacao_p;							
			else
				dt_alta_w := clock_timestamp();
			end if;
		
			if (ie_data_gasto_superior_w = 'I') then
				
				ie_gasto_superior_w := substr(obter_se_data_gasto_superior(nr_atendimento_p, dt_alta_w),1,3);
				if (ie_gasto_superior_w = 'S') then
					ds_setores_w := substr(obter_setor_data_gasto_sup(nr_atendimento_p, dt_alta_w),1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(329827, 'DS_SETOR_P='||ds_setores_w);
				end if;
			end if;
		
			ds_erro_w := Gerar_Estornar_Alta(nr_atendimento_p, 'A', null, cd_motivo_alta_p, dt_alta_w, nm_usuario_p, ds_erro_w, 0, null, null);
				
			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(183208,'DS_ERRO_P='||DS_ERRO_W);
			end if;
		end if;	
		
		select	nextval('atendimento_paciente_seq')
		into STRICT	nr_atendimento_w
		;
		
		dt_chegada_paciente_w := null;
		if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')) then
			
			select	coalesce(dt_internacao_p, dt_entrada)
			into STRICT	dt_chegada_paciente_w
			from	atendimento_paciente ap
			where	ap.nr_atendimento	= nr_atendimento_p;
			
			if ((dt_chegada_paciente_w IS NOT NULL AND dt_chegada_paciente_w::text <> '') and dt_chegada_paciente_w > clock_timestamp()) then
				dt_chegada_paciente_w := null;
			end if;
		else
			select	max(dt_chegada_paciente)
			into STRICT	dt_chegada_paciente_w
			from 	atendimento_paciente ap
			where	ap.nr_atendimento	= nr_atendimento_p;
			
		end if;

		insert	into atendimento_paciente(nr_atendimento,
			cd_pessoa_fisica,
			cd_estabelecimento,
			cd_procedencia,
			dt_entrada,
			ie_tipo_atendimento,
			dt_atualizacao,
			nm_usuario,
			cd_medico_resp,
			cd_motivo_alta,
			ds_sintoma_paciente,
			ds_observacao,
			dt_alta,
			ie_clinica,
			nm_usuario_atend,
			ie_responsavel,
			dt_fim_conta,
			ie_fim_conta,
			nr_cat,
			ds_causa_externa,
			cd_cgc_seguradora,
			nr_bilhete,
			nr_serie_bilhete,
			ie_carater_inter_sus,
			ie_vinculo_sus,
			ie_tipo_convenio,
			ie_tipo_atend_bpa,
			ie_grupo_atend_bpa,
			cd_medico_atendimento,
			dt_alta_interno,
			nr_seq_unid_atual,
			nr_seq_unid_int,
			nr_atend_original,
			qt_dia_longa_perm,
			dt_inicio_atendimento,
			ie_permite_visita,
			ie_status_atendimento,
			dt_previsto_alta,
			nm_usuario_alta,
			cd_pessoa_responsavel,
			dt_atend_medico,
			dt_fim_consulta,
			dt_medicacao,
			dt_saida_real,
			ie_clinica_alta,
			dt_lib_medico,
			nr_seq_regra_funcao,
			nr_seq_local_pa,
			nr_seq_tipo_acidente,
			dt_ocorrencia,
			ds_pend_autorizacao,
			cd_motivo_alta_medica,
			nr_seq_forma_laudo,
			nr_seq_check_list,
			dt_fim_triagem,
			nr_reserva_leito,
			ie_paciente_isolado,
			ie_permite_visita_rel,
			ds_senha,
			ie_probabilidade_alta,
			nr_seq_forma_chegada,
			nr_seq_indicacao,
			cd_pessoa_indic,
			ds_obs_alta,
			nm_medico_externo,
			nr_gestante_pre_natal,
			dt_alta_medico,
			nr_seq_classif_medico,
			ie_modo_internacao,
			nr_seq_classificacao,
			nr_atend_origem_pa,
			nr_seq_grau_parentesco,
			nr_seq_queixa,
			cd_municipio_ocorrencia,
			cd_medico_referido,
			dt_chegada_paciente,
			ie_tipo_atend_tiss,
			nr_seq_tipo_admissao_fat,
			nr_seq_episodio,
			dt_atualizacao_nrec)
		(SELECT	nr_atendimento_w,
			cd_pessoa_fisica,
			cd_estabelecimento,
			CASE WHEN ie_procedencia_setor_w='N' THEN  coalesce(cd_procedencia_p, cd_procedencia) WHEN ie_procedencia_setor_w='S' THEN  coalesce(cd_procedencia_setor_w, coalesce(cd_procedencia_p, cd_procedencia)) END ,
			coalesce(dt_internacao_p,dt_entrada),
			coalesce(ie_tipo_atendimento_p, ie_tipo_atendimento),
			dt_atualizacao,
			nm_usuario,
			coalesce(cd_medico_resp_p,cd_medico_resp),
			null,
			ds_sintoma_paciente,
			ds_observacao,
			null,
			coalesce(ie_clinica_p, ie_clinica),
			nm_usuario_atend,
			coalesce(ie_responsavel_p,ie_responsavel),
			null,
			'A',
			nr_cat,
			ds_causa_externa,
			cd_cgc_seguradora,
			nr_bilhete,
			nr_serie_bilhete,
			coalesce(ie_carater_inter_sus_p,ie_carater_inter_sus),
			ie_vinculo_sus,
			ie_tipo_convenio,
			ie_tipo_atend_bpa,
			ie_grupo_atend_bpa,
			cd_medico_atendimento,
			null,
			nr_seq_unid_atual,
			nr_seq_unid_int,
			CASE WHEN ie_registrar_atend_origem_w='N' THEN null  ELSE nr_atendimento_p END ,
			qt_dia_longa_perm,
			null,
			ie_permite_visita,
			ie_status_atendimento,
			null,
			null,
			coalesce(cd_responsavel_p,cd_pessoa_responsavel),
			null,
			null,
			null,
			null,
			ie_clinica_alta,
			null,
			nr_seq_regra_funcao,
			null,
			nr_seq_tipo_acidente,
			dt_ocorrencia,
			ds_pend_autorizacao,
			null,
			nr_seq_forma_laudo,
			nr_seq_check_list,
			null,
			nr_reserva_leito,
			coalesce(ie_paciente_isolado,'N'),
			ie_permite_visita_rel,
			ds_senha,
			ie_probabilidade_alta,
			nr_seq_forma_chegada,
			nr_seq_indicacao,
			cd_pessoa_indic,
			null,
			nm_medico_externo,
			nr_gestante_pre_natal,
			null,
			coalesce(CASE WHEN nr_seq_classif_medico_p=0 THEN null  ELSE nr_seq_classif_medico_p END ,nr_seq_classif_medico),
			'N',
			CASE WHEN nr_seq_classificacao_p=0 THEN null  ELSE nr_seq_classificacao_p END ,
			nr_atendimento_p,
			coalesce(nr_seq_grau_parentesco_p,nr_seq_grau_parentesco),
			coalesce(nr_seq_queixa_p, nr_seq_queixa),
			cd_municipio_ocorrencia,
			cd_medico_referido,
			dt_chegada_paciente_w,
			ie_atend_tiss_p,
			nr_seq_tipo_admissao_fat_p,
			nr_seq_episodio_w,
			clock_timestamp()
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p);
		
		nr_novo_atend_p := nr_atendimento_w;

		select	max(ie_copia_disp_alta_pa),
			max(ie_transf_nasc_pa),
			max(ie_trans_ped_parec_pend_pa),
			max(ie_copia_evolucao_alta_pa),
			max(ie_copia_anamn_alta_pa)
		into STRICT	ie_copia_disp_alta_pa_w,
			ie_tranf_nasc_pa_w,
			ie_trans_ped_parec_pend_pa_w,
			ie_copia_evolucao_alta_pa_w,
			ie_copia_anamn_alta_pa_w
		from	parametro_medico
		where	cd_estabelecimento = cd_estabelecimento_w;

		ie_transfere_prescr_w		:= coalesce(obter_valor_param_usuario(916,741,obter_perfil_ativo,nm_usuario_p,0),'N');
		/* transferir prescr_medica */

		if (ie_transfere_prescr_w = 'S') then
			update	prescr_medica
			set		nr_atendimento	= nr_atendimento_w					
			where	nr_atendimento	= nr_atendimento_p;
			
			update	laudo_paciente
			set		nr_atendimento	= nr_atendimento_w					
			where	nr_atendimento	= nr_atendimento_p;
			
			/* Atualiza o atendimento da reserva e transfusao ao atualizar 
			o atendimento da prescricao e apresentar a reserva no ADEP */
			update 	san_reserva
			set 	nr_atendimento = nr_novo_atend_p,
				ds_observacao = ds_observacao || chr(13) || chr(10)|| obter_desc_expressao(773956) || ' ' ||nr_atendimento_p||' => '|| nr_atendimento_w
			where	nr_atendimento = nr_atendimento_p;
			
			update	san_transfusao
			set	nr_atendimento = nr_novo_atend_p,
				ds_observacao = ds_observacao || chr(13) || chr(10)|| obter_desc_expressao(773956) || ' ' ||nr_atendimento_p||' => '|| nr_atendimento_w
			where 	nr_atendimento = nr_atendimento_p;
		end if;
		
		if (nr_atendimento_p	> 0) and (ie_copia_evolucao_alta_pa_w	= 'S') then
			CALL copiar_evolucao_atendimento(nr_atendimento_p,nr_atendimento_w);
		end if;

		if (nr_atendimento_p	> 0)and (ie_copia_anamn_alta_pa_w	= 'S') then
			CALL copiar_anamnese_atendimento(nr_atendimento_p,nr_atendimento_w);
		end if;
		
		if (ie_copia_disp_alta_pa_w	= 'S') and (nr_atendimento_w		> 0) then
			
			update	atend_pac_dispositivo
			set	nr_atendimento	= nr_atendimento_w,
				nr_atendimento_ant = nr_atendimento
			where	nr_atendimento	= nr_atendimento_p;
		end if;

		if (ie_trans_ped_parec_pend_pa_w	= 'S') and (nr_atendimento_w	> 0)  then
			update	parecer_medico_req a
			set		nr_atendimento =	nr_atendimento_w
			where		nr_atendimento	=	nr_atendimento_p
			and	not exists (	SELECT	1
								from	parecer_medico x
								where	x.nr_parecer = a.nr_parecer);
		end if;

		if (ie_tranf_nasc_pa_w	= 'S') and (nr_atendimento_w	> 0) then
			update nascimento
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p;
			
			open C05;
			loop
			fetch C05 into	
				C05_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin
				insert	into parto(
					nr_atendimento, dt_atualizacao, nm_usuario, 
					qt_gestacoes, qt_parto_normal, qt_filhos_vivos, 
					qt_filhos_mortos, qt_natimortos, qt_parto_cesario, 
					qt_abortos, ds_observacao_qtdades, ie_tipo_sangue_mae, 
					ie_fator_rh_mae, ie_tipo_sangue_pai, ie_fator_rh_pai, 
					ie_edema, ie_ecografia_normal, dt_ult_menstruacao, 
					dt_provavel_parto, qt_sem_ig_cronologica, qt_sem_ig_ecografica, 
					ds_anorm_ecografia, ds_sorologias, ds_doencas_gestacao, 
					ds_uso_medic, ds_anteced_patologico, ds_amamentacao, 
					ie_pre_natal, qt_consultas, ie_laqueadura, 
					ie_curso_gestante, dt_admissao, dt_contracao_regular, 
					qt_pa_diastolica, qt_pa_sistolica, qt_pulso, 
					qt_temperatura, qt_bat_cardio_fetais, ie_apresentacao_fetal, 
					ds_apresentacao_fetal, ie_bolsa_amniotica_integro, hr_bolsa_amniotica, 
					ie_aspecto_liquido, ie_parto_normal, ie_parto_forceps, 
					ie_parto_episio, ie_parto_analgesia, ie_parto_cesaria, 
					ie_perineo_integro, qt_grau_perineo, ds_perineo, 
					cd_medico, cd_anestesista, ie_aids, 
					ie_coombs, ie_vacina_igd, dt_vacina_igd, 
					qt_nasc_mortos, qt_nasc_vivos, ie_local_nascimento, 
					ie_vacina_tetano, cd_enfermagem, ie_vacina_rubeola, 
					qt_contracoes, dt_inicio_parto, ie_dequitacao, 
					ie_patologia_funicular, cd_tipo_anestesia, dt_fim_parto, 
					ie_diabetes, ie_neoplasias, ie_hipertensao, 
					/*ie_gemelaridade,*/
 ie_anemia, ie_tuberculose, 
					/*ie_surdez,*/
 ie_diabetes_fam, ie_neoplasias_fam, 
					ie_hipertensao_fam, ie_gemelaridade_fam, ie_anemia_fam, 
					ie_tuberculose_fam, ie_surdez_fam, ie_cardiopatias_fam, 
					ie_infeccao, ie_cardiopatia, ie_acompanhante, 
					ds_anteced_fam, ds_cirur_mama, ie_mamilos, 
					ie_cirur_mama, ie_sifilis, ie_rubeola, 
					ie_toxoplasmose, ie_tabagismo, ie_drogas, 
					ie_etilismo, ds_cigarro, ds_drogas, 
					ds_etilismo, dt_coombs, ie_exame_coombs, 
					qt_abortos_parto, ds_acompanhante, ie_aids_positivo, 
					ie_sifilis_positivo, ie_rubeola_positivo, ie_toxoplasmose_positivo, 
					ie_estreptococo, ie_estreptococo_positivo, ie_antibiotico, 
					ds_edema, ie_alergia, ds_alergia, 
					qt_dia_ig_cronologica, ie_gera_eis
				) values ( 
					nr_atendimento_w, clock_timestamp(), nm_usuario_p, 
					c05_w.qt_gestacoes, c05_w.qt_parto_normal, c05_w.qt_filhos_vivos, 
					c05_w.qt_filhos_mortos, c05_w.qt_natimortos, c05_w.qt_parto_cesario, 
					c05_w.qt_abortos, c05_w.ds_observacao_qtdades, c05_w.ie_tipo_sangue_mae, 
					c05_w.ie_fator_rh_mae, c05_w.ie_tipo_sangue_pai, c05_w.ie_fator_rh_pai, 
					c05_w.ie_edema, c05_w.ie_ecografia_normal, c05_w.dt_ult_menstruacao, 
					c05_w.dt_provavel_parto, c05_w.qt_sem_ig_cronologica, c05_w.qt_sem_ig_ecografica, 
					c05_w.ds_anorm_ecografia, c05_w.ds_sorologias, c05_w.ds_doencas_gestacao, 
					c05_w.ds_uso_medic, c05_w.ds_anteced_patologico, c05_w.ds_amamentacao, 
					c05_w.ie_pre_natal, c05_w.qt_consultas, c05_w.ie_laqueadura, 
					c05_w.ie_curso_gestante, c05_w.dt_admissao, c05_w.dt_contracao_regular, 
					c05_w.qt_pa_diastolica, c05_w.qt_pa_sistolica, c05_w.qt_pulso, 
					c05_w.qt_temperatura, c05_w.qt_bat_cardio_fetais, c05_w.ie_apresentacao_fetal, 
					c05_w.ds_apresentacao_fetal, c05_w.ie_bolsa_amniotica_integro, c05_w.hr_bolsa_amniotica, 
					c05_w.ie_aspecto_liquido, c05_w.ie_parto_normal, c05_w.ie_parto_forceps, 
					c05_w.ie_parto_episio, c05_w.ie_parto_analgesia, c05_w.ie_parto_cesaria, 
					c05_w.ie_perineo_integro, c05_w.qt_grau_perineo, c05_w.ds_perineo, 
					c05_w.cd_medico, c05_w.cd_anestesista, c05_w.ie_aids, 
					c05_w.ie_coombs, c05_w.ie_vacina_igd, c05_w.dt_vacina_igd, 
					c05_w.qt_nasc_mortos, c05_w.qt_nasc_vivos, c05_w.ie_local_nascimento, 
					c05_w.ie_vacina_tetano, c05_w.cd_enfermagem, c05_w.ie_vacina_rubeola, 
					c05_w.qt_contracoes, c05_w.dt_inicio_parto, c05_w.ie_dequitacao, 
					c05_w.ie_patologia_funicular, c05_w.cd_tipo_anestesia, c05_w.dt_fim_parto, 
					c05_w.ie_diabetes, c05_w.ie_neoplasias, c05_w.ie_hipertensao, 
			/*MATHEUS Comentado por erro na versao 768 este campo nao existe c05_w.ie_gemelaridade,*/
 c05_w.ie_anemia, c05_w.ie_tuberculose, 
			/*MATHEUS Comentado por erro na versao 768 este campo nao existe c05_w.ie_surdez,*/
 c05_w.ie_diabetes_fam, c05_w.ie_neoplasias_fam, 
					c05_w.ie_hipertensao_fam, c05_w.ie_gemelaridade_fam, c05_w.ie_anemia_fam, 
					c05_w.ie_tuberculose_fam, c05_w.ie_surdez_fam, c05_w.ie_cardiopatias_fam, 
					c05_w.ie_infeccao, c05_w.ie_cardiopatia, c05_w.ie_acompanhante, 
					c05_w.ds_anteced_fam, c05_w.ds_cirur_mama, c05_w.ie_mamilos, 
					c05_w.ie_cirur_mama, c05_w.ie_sifilis, c05_w.ie_rubeola, 
					c05_w.ie_toxoplasmose, c05_w.ie_tabagismo, c05_w.ie_drogas, 
					c05_w.ie_etilismo, c05_w.ds_cigarro, c05_w.ds_drogas, 
					c05_w.ds_etilismo, c05_w.dt_coombs, c05_w.ie_exame_coombs, 
					c05_w.qt_abortos_parto, c05_w.ds_acompanhante, c05_w.ie_aids_positivo, 
					c05_w.ie_sifilis_positivo, c05_w.ie_rubeola_positivo, c05_w.ie_toxoplasmose_positivo, 
					c05_w.ie_estreptococo, c05_w.ie_estreptococo_positivo, c05_w.ie_antibiotico, 
					c05_w.ds_edema, c05_w.ie_alergia, c05_w.ds_alergia, 
					c05_w.qt_dia_ig_cronologica, 'S');
				end;
			end loop;
			close C05;
			
			update	parto
			set	ie_gera_eis = 'N'
			where	nr_atendimento	= nr_atendimento_p;
			/*
			update parto
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p;
			
			update parto_prog_esp
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p;
			*/
			update parto_eventos
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p;
			/*
			update partograma
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p;
			*/
			
			insert	into partograma(
				nr_sequencia,
				nr_atendimento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				dt_registro,
				qt_dilatacao_cervical,
				cd_pessoa_fisica,
				qt_bcf,
				ie_interv_contracoes,
				ie_aspecto_liquido,
				ie_bolsa,
				ie_hora,
				ie_plano_lee,
				ie_ocitocina,
				qt_ocitocina,
				ie_apresentacao,
				ds_observacao,
				ie_situacao,
				dt_liberacao,
				dt_inativacao,
				nm_usuario_inativacao,
				ds_justificativa)
			SELECT			nextval('partograma_seq'),
						nr_atendimento_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						dt_registro,
						qt_dilatacao_cervical,
						cd_pessoa_fisica, 
						qt_bcf,
						ie_interv_contracoes,
						ie_aspecto_liquido,
						ie_bolsa,
						ie_hora,
						ie_plano_lee,
						ie_ocitocina,
						qt_ocitocina,
						ie_apresentacao,
						ds_observacao,
						ie_situacao,
						dt_liberacao,
						dt_inativacao,
						nm_usuario_inativacao,
						ds_justificativa
			from	partograma
			where	nr_atendimento	= nr_atendimento_p;
			
			
			insert	into parto_prog_esp(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				nr_seq_programa,
				nr_atendimento,
				dt_atualizacao_nrec,
				nm_usuario_nrec)
			SELECT	nextval('parto_prog_esp_seq'),
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_programa,
				nr_atendimento_w,
				clock_timestamp(),
				nm_usuario_p
			from	parto_prog_esp
			where	nr_atendimento	= nr_atendimento_p;
			
			insert	into pre_parto(	
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				nr_atendimento,
				qt_sem_ig_cronologica,
				qt_pa_diastolica,
				qt_pa_sistolica,
				qt_pulso,
				qt_temperatura,
				qt_bat_cardio_fetais,
				ie_apresentacao_fetal,
				ie_bolsa_amniotica,
				dt_bolsa_amniotica,
				ie_bolsa_rota_alta,
				ie_dinamica_uterina,
				ie_batim_fetais,
				ie_aspecto_liquido,
				qt_altura_uterina,
				ie_ritmo_bcf,
				ie_movimento_fetal,
				ie_genitalia_integra,
				ds_genitalia_alterada,
				qt_dilatacao_uterina,
				qt_contracoes,
				ie_colo_perveo,
				ie_colo_posicao,
				ie_colo_espessura,
				ie_colo_textura,
				ds_observacao,
				dt_registro,
				cd_profissional)
			SELECT	nextval('pre_parto_seq'),
				clock_timestamp(),
				nm_usuario_p,
				nr_atendimento_w,
				qt_sem_ig_cronologica,
				qt_pa_diastolica,
				qt_pa_sistolica,
				qt_pulso,
				qt_temperatura,
				qt_bat_cardio_fetais,
				ie_apresentacao_fetal,
				ie_bolsa_amniotica,
				dt_bolsa_amniotica,
				ie_bolsa_rota_alta,
				ie_dinamica_uterina,
				ie_batim_fetais,
				ie_aspecto_liquido,
				qt_altura_uterina,
				ie_ritmo_bcf,
				ie_movimento_fetal,
				ie_genitalia_integra,
				ds_genitalia_alterada,
				qt_dilatacao_uterina,
				qt_contracoes,
				ie_colo_perveo,
				ie_colo_posicao,
				ie_colo_espessura,
				ie_colo_textura,
				ds_observacao,
				dt_registro,
				cd_profissional
			from	pre_parto
			where	nr_atendimento	= nr_atendimento_p;
			
			/*	
			update PRE_PARTO
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p;
			*/
			
			update nascimento_evento
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p;
			
			update atend_vacina_teste
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p;
		end if;
		

		if (ie_replicar_diag_w = 'S') and (ie_replicar_diagnostico_w = 'S') then
			CALL REPLICA_DIAGNOSTICO_ULT_ATEND(nr_atendimento_w, nm_usuario_p);
		end if;
		
		end;
	end if;
end if;

if (cd_setor_atendimento_p > 0) then
	select	cd_classif_setor
	into STRICT	cd_classif_setor_w
	from	setor_atendimento
	where 	cd_setor_atendimento	= cd_setor_atendimento_p;
end if;

nr_prontuario_w	:= coalesce(obter_prontuario_pf(cd_estabelecimento_w, cd_pessoa_fisica_w),0);

/*Matheus OS 182242*/

if (nr_prontuario_w = 0) then
	
	nr_prontuario_w := gerar_prontuario_pac(cd_estabelecimento_w, cd_pessoa_fisica_w, 'N', nm_usuario_p, nr_prontuario_w);
	
	/*update	pessoa_fisica
	set	nr_prontuario	= prontuario_seq.NextVal
	where	cd_pessoa_fisica= cd_pessoa_fisica_w
	and	nr_prontuario is null;*/
end if;

begin
select	max(ie_clinica)
into STRICT	ie_clinica_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_p;

if (ie_clinica_w <> ie_clinica_p) then
	insert into atend_paciente_alteracao( 	nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						ie_clinica,
						nr_atendimento)
						values (	nextval('atend_paciente_alteracao_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						ie_clinica_w,
						nr_atendimento_p);
end if;
exception
when others then
	ie_clinica_w	:= null;
end;

select	max(coalesce(ie_tipo_atend_tiss,'0'))
into STRICT 	ie_tipo_atend_tiss_w
from	tiss_tipo_atendimento
where	cd_estabelecimento					= cd_estabelecimento_w
and	coalesce(ie_tipo_atendimento,coalesce(ie_tipo_atendimento_p,0))	= coalesce(ie_tipo_atendimento_p,0)
and	coalesce(ie_clinica, coalesce(ie_clinica_p,0))			= coalesce(ie_clinica_p,0)
and	coalesce(cd_setor_entrada, cd_setor_atendimento_p)		= cd_setor_atendimento_p
and	coalesce(cd_convenio, coalesce(obter_convenio_atendimento(nr_atendimento_w),0))	= coalesce(obter_convenio_atendimento(nr_atendimento_w),0)
and	coalesce(nr_seq_queixa, coalesce(nr_seq_queixa_w,0))		= coalesce(nr_seq_queixa_w,0)
order by	coalesce(cd_convenio,0),
		coalesce(ie_tipo_atendimento,0),
		coalesce(ie_clinica,0),
		coalesce(cd_setor_entrada,0),
		coalesce(nr_seq_queixa,0);

update	atendimento_paciente
set 	ie_tipo_atendimento	= coalesce(ie_tipo_atendimento_p, ie_tipo_atendimento),
	ie_clinica		= coalesce(ie_clinica_p, ie_clinica),
	cd_medico_resp		= coalesce(cd_medico_resp_p,cd_medico_resp),
	cd_pessoa_responsavel	= coalesce(cd_responsavel_p,cd_pessoa_responsavel),
	nr_seq_classif_medico	= coalesce(nr_seq_classif_medico_p,nr_seq_classif_medico),
	nr_seq_classificacao	= coalesce(CASE WHEN nr_seq_classificacao_p=0 THEN null  ELSE nr_seq_classificacao_p END , nr_seq_classificacao),
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp(),
	cd_procedencia		= CASE WHEN ie_procedencia_setor_w='N' THEN  coalesce(cd_procedencia_p, cd_procedencia) WHEN ie_procedencia_setor_w='S' THEN  coalesce(cd_procedencia_setor_w, coalesce(cd_procedencia_p, cd_procedencia)) END ,
	ie_tipo_atend_tiss	= coalesce(ie_tipo_atend_tiss_w,ie_tipo_atend_tiss),
	ie_carater_inter_sus	= coalesce(ie_carater_inter_sus_p,ie_carater_inter_sus),
	nr_seq_tipo_admissao_fat = nr_seq_tipo_admissao_fat_p,
	nr_seq_queixa		 = coalesce(nr_seq_queixa_p, nr_seq_queixa)
where	nr_atendimento		= nr_atendimento_w
and	ie_novo_atendimento_p	= 'N';

select	coalesce(max(ie_regra_tipo_atend),'A')
into STRICT	ie_regra_tipo_atend_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(ie_regra_tipo_atend_w,'A') = 'C')and (ie_atualizar_atend_guia_tiss_w = 'S') then
	begin
	update	conta_paciente
	set	ie_tipo_atend_conta = coalesce(ie_tipo_atendimento_p,ie_tipo_atend_conta),
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_atendimento = nr_atendimento_p;
	end;
end if;

if (ie_altera_periodo_final_w = 'S') and (ie_novo_atendimento_p = 'N') then
	update	conta_paciente
	set	dt_periodo_final = coalesce(dt_internacao_p,clock_timestamp()),
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_atendimento = nr_atendimento_p
	and 	ie_status_acerto = 1;
end if;

select	coalesce(max(ie_fecha_conta_int),'N')
into STRICT	ie_fecha_conta_int_w
from	convenio_estabelecimento
where	cd_convenio = obter_convenio_atendimento(nr_atendimento_w)
and	cd_estabelecimento = cd_estabelecimento_w;

begin
select	cd_convenio,
	cd_categoria
into STRICT	cd_convenio_atend_w,
	cd_categoria_atend_w
from	atend_categoria_convenio
where	nr_seq_interno = nr_seq_interno_p;
exception  when others
	then
	cd_convenio_atend_w 	:=  0;
	cd_categoria_atend_w	:= '0';	
end;

select	count(*)
into STRICT	qt_regra_taxa_repouso_w
from	conv_regra_taxa_repouso
where	cd_convenio = cd_convenio_atend_w;

if (qt_regra_taxa_repouso_w > 0) then
	CALL gerar_regra_taxa_repouso(nr_atendimento_w, dt_internacao_p, nm_usuario_p);
end if;

select	count(*)
into STRICT	qt_regra_etapa_w
from	fatur_etapa_alta
where	coalesce(ie_evento,'H') = 'H';

if (coalesce(qt_regra_etapa_w,0) > 0) then
	CALL gerar_etapa_internacao_atend(nr_atendimento_w, nm_usuario_p);
end if;

if	((ie_fechar_contas_internacao_w = 'S') or ((ie_fechar_contas_internacao_w = 'R') and (ie_fecha_conta_int_w in ('S','T')))) then
	
	if (ie_fecha_conta_int_w = 'T') then
		ie_consiste_estab_conta_w	:= 'N';
	end if;
	
	open C02;
	loop
	fetch C02 into	
		nr_interno_conta_w,
		cd_convenio_parametro_w,
		cd_categoria_parametro_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin		

		select	coalesce(max(ie_permite_gerar_pacote),'N')
		into STRICT	ie_permite_gerar_pacote_w
				from   	categoria_convenio
				where  	cd_convenio	= cd_convenio_parametro_w	
				and    	cd_categoria	= cd_categoria_parametro_w;
		
		if (coalesce(ie_permite_gerar_pacote_w,'N') = 'S') and (coalesce(ie_gera_pacote_automatic_w,'N') = 'S') and (cd_convenio_atend_w  = cd_convenio_parametro_w) and (cd_categoria_atend_w = cd_categoria_parametro_w) then
		CALL calcular_pacote(nr_atendimento_w,
				nr_interno_conta_w,
				cd_convenio_parametro_w,
				cd_categoria_parametro_w,
				nm_usuario_p,
				'S','S','S','S','N');
		end if;
		
		SELECT * FROM consiste_conta_paciente(
			nr_interno_conta_w, nr_atendimento_w, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w;

		if (ie_fecha_conta_w = 'S') then
			ds_erro_fecha_conta_w := fechar_conta_paciente(nr_interno_conta_w, nr_atendimento_w, 2, nm_usuario_p, ds_erro_fecha_conta_w);
			
			if (ds_erro_fecha_conta_w IS NOT NULL AND ds_erro_fecha_conta_w::text <> '') then
				ds_erro_fecha_conta_p := substr(ds_erro_fecha_conta_w,1,255);	
			else
				ds_erro_fecha_conta_p := '';
			end if;
		end if;
		end;
	end loop;
	close C02;
	
	ie_consiste_estab_conta_w	:= 'S';
	
end if;

if (ie_fechar_contas_internacao_w = 'R') and (ie_fecha_conta_int_w = 'N') then
	
	open C02;
	loop
	fetch C02 into	
		nr_interno_conta_w,
		cd_convenio_parametro_w,
		cd_categoria_parametro_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin			
		select	coalesce(max(ie_permite_gerar_pacote),'N')
		into STRICT	ie_permite_gerar_pacote_w
				from   	categoria_convenio
				where  	cd_convenio	= cd_convenio_parametro_w	
				and    	cd_categoria	= cd_categoria_parametro_w;

		if (coalesce(ie_permite_gerar_pacote_w,'N') = 'S') and (coalesce(ie_gera_pacote_automatic_w,'N') = 'S') and (cd_convenio_atend_w  = cd_convenio_parametro_w) and (cd_categoria_atend_w = cd_categoria_parametro_w) then

		CALL calcular_pacote(nr_atendimento_w,
				nr_interno_conta_w,
				cd_convenio_parametro_w,
				cd_categoria_parametro_w,
				nm_usuario_p,
				'S','S','S','S','N');
		end if;
		
		SELECT * FROM consiste_conta_paciente(
			nr_interno_conta_w, nr_atendimento_w, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w;

		update	conta_paciente
		set	ie_tipo_atend_conta = ie_tipo_atendimento_p
		where	nr_interno_conta = nr_interno_conta_w;
		end;
	end loop;
	close C02;
end if;

if (ie_convenio_gv_w = 'S') and (obter_solic_vaga_atend(nr_atendimento_p,'IE') = 'S') then
	
	select	cd_convenio,
		cd_categoria,
		null,
		coalesce(cd_tipo_acomod_desej,cd_tipo_acomodacao_p),
		ds_cod_usuario,
		cd_plano_convenio
	into STRICT	cd_convenio_w,
		cd_categoria_w,
		cd_empresa_w,
		cd_tipo_acomodacao_w,
		cd_usuario_convenio_w,
		cd_plano_convenio_w
	from	gestao_vaga
	where	nr_sequencia = (obter_solic_vaga_atend(nr_atendimento_p,'S'))::numeric;

	if (coalesce(cd_categoria_w::text, '') = '') and (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then
		begin
		CALL wheb_mensagem_pck.exibir_mensagem_abort(183210);
		end;
	end if;
	
else
	begin
	
		nr_seq_interno_ww := nr_seq_interno_p;
		
		if (pkg_i18n.get_user_locale in ('de_DE', 'de_AT')) then
			if (coalesce(nr_seq_interno_ww,0) = 0) then
			   select max(a.nr_seq_interno)
			   into STRICT   nr_seq_interno_ww
			   from   atend_categoria_convenio a
			   where  a.nr_atendimento = (SELECT max(x.nr_atendimento)
						      from   atend_categoria_convenio x
						      where  x.nr_atendimento = nr_atendimento_p);
			end if;
		end if;
		

		select	cd_convenio,
			cd_categoria,
			cd_empresa,
			coalesce(cd_tipo_acomodacao_p,cd_tipo_acomodacao),
			cd_usuario_convenio,
			cd_plano_convenio,
			dt_validade_carteira,
			cd_municipio_convenio,
			cd_complemento,
			dt_ultimo_pagto,
			cd_dependente,
			ie_regime_internacao,
			nr_seq_lib_dieta_conv,
			qt_dia_internacao,
			cd_senha,
			dt_final_vigencia,
			cd_convenio_glosa,
			cd_categoria_glosa,
			cd_usuario_conv_glosa,
			cd_complemento_glosa,
			dt_validade_cart_glosa,
			nr_doc_conv_principal,
			nr_acompanhante,
			ie_lib_dieta,
			qt_dieta_acomp,
			ds_observacao,
			nr_seq_tipo_lib_guia,
			nr_seq_cobertura,
			nr_prioridade,
			ie_tipo_conveniado,
            cd_plano_glosa,
            ie_cod_usuario_mae_resp,
            nr_doc_conv_principal,
            cd_senha_provisoria,
            nr_seq_origem
		into STRICT	cd_convenio_w,
			cd_categoria_w,
			cd_empresa_w,
			cd_tipo_acomodacao_w,
			cd_usuario_convenio_w,
			cd_plano_convenio_w,
			dt_validade_carteira_w,	
			cd_municipio_convenio_w,
			cd_complemento_w,
			dt_ultimo_pagto_w,
			cd_dependente_w,
			ie_regime_internacao_w,
			nr_seq_lib_dieta_conv_w,
			qt_dia_internacao_w,
			cd_senha_w,
			dt_final_vigencia_w,
			cd_convenio_glosa_w,
			cd_categoria_glosa_w,
			cd_usuario_conv_glosa_w,
			cd_complemento_glosa_w,
			dt_validade_cart_glosa_w,
			nr_doc_conv_principal_w,
			nr_acompanhante_w,
			ie_lib_dieta_w,
			qt_dieta_acomp_w,
			ds_observacao_w,
			nr_seq_tipo_lib_guia_w,
			nr_seq_cobertura_w,
			nr_prioridade_w,
			ie_tipo_conveniado_w,
            cd_plano_glosa_w,
            ie_cod_usuario_mae_resp_w,
            nr_doc_conv_principal_w,
            cd_senha_provisoria_w,
            nr_seq_origem_w
		from	atend_categoria_convenio
		where	nr_seq_interno = nr_seq_interno_ww;
	
	exception  when others then
	     cd_convenio_w := 0;
	     cd_categoria_w := '0';
	end;	
	
	if (nr_seq_tipo_admissao_fat_p IS NOT NULL AND nr_seq_tipo_admissao_fat_p::text <> '') and (pkg_i18n.get_user_locale in ('de_DE', 'de_AT')) then

	    select     coalesce(max(cd_categoria),0)
	    into STRICT       cd_categoria_ww
	    from       categoria_convenio
	    where      cd_convenio = cd_convenio_w
	    and        ie_situacao = 'A'
	    and        obter_plano_lib_categoria(cd_convenio_w, cd_categoria, cd_plano_convenio_w, cd_estabelecimento_w, coalesce(dt_entrada_w,clock_timestamp())) = 'S'
	    and        obter_se_cat_lib_tipo_adm(nr_seq_tipo_admissao_fat_p, cd_convenio_w, cd_categoria) = 'S'
	    and        obter_se_categoria_lib_estab(cd_estabelecimento_w, cd_convenio_w, cd_categoria) = 'S'
	    and        obter_se_categoria_lib_func(cd_estabelecimento_w, cd_convenio_w, cd_categoria, 916) = 'S'
	    and        obter_se_categoria_lib_perf(cd_convenio_w, cd_categoria, obter_perfil_ativo) = 'S';

	    if (cd_categoria_ww <> 0) then
		cd_categoria_w := cd_categoria_ww;
	    end if;
    end if;
end if;

if (cd_setor_atendimento_p > 0) then
	select	max(cd_tipo_acomodacao)
	into STRICT	cd_tipo_acomod_unidade_w
	from	unidade_atendimento
	where	cd_setor_atendimento	= cd_setor_atendimento_p
	and	cd_unidade_basica	= cd_unidade_basica_p
	and	cd_unidade_compl	= cd_unidade_compl_p;
end if;

ie_atualizar_dieta_lib_conv_w := obter_param_usuario(916, 466, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_atualizar_dieta_lib_conv_w);

if (coalesce(ie_lib_dieta_w::text, '') = '') then
	select	max(ie_lib_dieta)
	into STRICT	ie_lib_dieta_w
	from	atend_categoria_convenio
	where	nr_seq_interno = nr_seq_interno_p;
end if;

select	max(ie_lib_dieta)
into STRICT	ie_lib_dieta_conv_w
from	atend_categoria_convenio
where	nr_seq_interno = nr_seq_interno_p;

if (ie_atualizar_dieta_lib_conv_w = 'S') and (ie_lib_dieta_w = 'N') then
	SELECT * FROM Obter_Dados_Dieta_Categ_Conv(cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_pessoa_fisica_w, nr_acompanhante_dieta_w, qt_acomp_dieta_w, ie_lib_diet_w, nr_seq_regra_acomp_w, coalesce(nr_atendimento_w,nr_atendimento_p)) INTO STRICT nr_acompanhante_dieta_w, qt_acomp_dieta_w, ie_lib_diet_w, nr_seq_regra_acomp_w;
	
	if (coalesce(nr_acompanhante_dieta_w,0) > 0) then
		nr_acompanhante_w := nr_acompanhante_dieta_w;
	end if;
	
	if (coalesce(qt_acomp_dieta_w,0) > 0) then
		qt_dieta_acomp_w := qt_acomp_dieta_w;
	end if;	

end if;

IF (coalesce(pkg_i18n.get_user_locale, 'pt_BR') not in ('de_DE', 'de_AT')) THEN

	update	atend_categoria_convenio	
	set	dt_final_vigencia	= coalesce(dt_ving_fim_p,dt_internacao_p)
	where	nr_seq_interno		= nr_seq_interno_p
	and	coalesce(dt_final_vigencia::text, '') = '';

end if;

select	count(*)
into STRICT	qt_convenio_w
from	atend_categoria_convenio
where	nr_atendimento		= nr_atendimento_w
and	cd_convenio		= cd_convenio_w
and	cd_categoria		= cd_categoria_w
and	dt_inicio_vigencia	= coalesce(dt_ving_ini_p,dt_internacao_p);



if (qt_convenio_w	= 0) then
	select	nextval('atend_categoria_convenio_seq')
	into STRICT	nr_seq_interno_w
	;
	
	ie_utiliza_ult_autorizacao_w := obter_param_usuario(916, 1137, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_utiliza_ult_autorizacao_w);
	
	if (ie_utiliza_ult_autorizacao_w = 'S') then
	
		select	coalesce(max(dt_inicio_vigencia),coalesce(dt_ving_ini_p,dt_internacao_p)),
				coalesce(max(dt_fim_vigencia),   coalesce(dt_ving_fim_p,dt_final_vigencia_w)),
				coalesce(max(cd_senha),			cd_senha_w),
				coalesce(max(cd_autorizacao),	substr(nr_doc_convenio_p,1,20)),
				coalesce(max(qt_dia_autorizado), coalesce(qt_dia_int_p, qt_dia_internacao_w)),
				coalesce(max(ie_tipo_guia),		ie_tipo_guia_p)
		into STRICT	dt_inicio_vigencia_ww,
				dt_fim_vigencia_ww,
				cd_senha_ww,
				cd_autorizacao_ww,
				qt_dia_autorizado_ww,
				ie_tipo_guia_ww
		from	autorizacao_convenio
		where	nr_sequencia = ( SELECT	max(a.nr_sequencia)
								 from	autorizacao_convenio a,
										estagio_autorizacao b
								 where 	a.nr_atendimento 	= nr_atendimento_w
								 and	a.cd_convenio		= cd_convenio_w
								 and	a.cd_autorizacao   <> nr_doc_convenio_p
								 and   	b.ie_interno 		<> '70'
								 and   	a.nr_seq_estagio 	= b.nr_sequencia
								 and	a.ie_tipo_guia 		= 'I');
								
	else
	
		dt_inicio_vigencia_ww 	:= coalesce(dt_ving_ini_p,dt_internacao_p);
		dt_fim_vigencia_ww		:= coalesce(dt_ving_fim_p,dt_final_vigencia_w);
		cd_senha_ww				:= cd_senha_w;
		cd_autorizacao_ww		:= substr(nr_doc_convenio_p,1,20);
		qt_dia_autorizado_ww	:= coalesce(qt_dia_int_p, qt_dia_internacao_w);
		ie_tipo_guia_ww			:= ie_tipo_guia_p;
		
	end if;
	
	IF (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')) THEN
        OPEN c_convenios_atend;
        LOOP
            FETCH c_convenios_atend INTO r_convenios_atend;
            EXIT WHEN NOT FOUND; /* apply on c_convenios_atend */
            BEGIN
                SELECT	nextval('atend_categoria_convenio_seq')
                INTO STRICT	nr_seq_interno_w
;

                INSERT INTO atend_categoria_convenio(
                       nr_atendimento,
                       cd_convenio,
                       cd_categoria,
                       dt_inicio_vigencia,
                       dt_atualizacao,
                       nm_usuario,
                       cd_usuario_convenio,
                       cd_empresa,
                       nr_doc_convenio,
                       cd_tipo_acomodacao,
                       ie_tipo_guia,
                       nr_seq_interno,
                       cd_plano_convenio,
                       dt_validade_carteira,
                       cd_municipio_convenio,
                       cd_complemento,	
                       dt_ultimo_pagto,
                       cd_dependente,
                       ie_regime_internacao,
                       nr_seq_lib_dieta_conv,
                       qt_dia_internacao,
                       cd_senha,
                       dt_final_vigencia,
                       cd_convenio_glosa,
                       cd_categoria_glosa,
                       cd_usuario_conv_glosa,
                       cd_complemento_glosa,
                       dt_validade_cart_glosa,
                       nr_doc_conv_principal,
                       nr_acompanhante,
                       ie_lib_dieta,
                       qt_dieta_acomp,
                       ds_observacao,
                       nr_seq_tipo_lib_guia,
                       nr_seq_cobertura,
                       nr_seq_regra_acomp,
                       nr_prioridade,
                       ie_tipo_conveniado,
					   ie_autoriza_envio_convenio,
                       cd_plano_glosa,
                       ie_cod_usuario_mae_resp,
                       cd_senha_provisoria,
                       nr_seq_origem)
                VALUES (nr_atendimento_w,
                       r_convenios_atend.cd_convenio,
                       r_convenios_atend.cd_categoria,
                       r_convenios_atend.dt_inicio_vigencia,
                       clock_timestamp(),
                       USER,
                       r_convenios_atend.cd_usuario_convenio,
                       r_convenios_atend.cd_empresa,
                       r_convenios_atend.nr_doc_convenio,
                       r_convenios_atend.cd_tipo_acomodacao,
                       r_convenios_atend.ie_tipo_guia,
                       nr_seq_interno_w,
                       r_convenios_atend.cd_plano_convenio,
                       r_convenios_atend.dt_validade_carteira,	
                       r_convenios_atend.cd_municipio_convenio,
                       r_convenios_atend.cd_complemento,
                       r_convenios_atend.dt_ultimo_pagto,
                       r_convenios_atend.cd_dependente,
                       r_convenios_atend.ie_regime_internacao,
                       r_convenios_atend.nr_seq_lib_dieta_conv,
                       r_convenios_atend.qt_dia_internacao,
                       r_convenios_atend.cd_senha,
                       r_convenios_atend.dt_final_vigencia,
                       r_convenios_atend.cd_convenio_glosa,
                       r_convenios_atend.cd_categoria_glosa,
                       r_convenios_atend.cd_usuario_conv_glosa,
                       r_convenios_atend.cd_complemento_glosa,
                       r_convenios_atend.dt_validade_cart_glosa,
                       r_convenios_atend.nr_doc_conv_principal,
                       r_convenios_atend.nr_acompanhante,
                       r_convenios_atend.ie_lib_dieta,
                       r_convenios_atend.qt_dieta_acomp,
                       r_convenios_atend.ds_observacao,
                       r_convenios_atend.nr_seq_tipo_lib_guia,
                       r_convenios_atend.nr_seq_cobertura,
                       r_convenios_atend.nr_seq_regra_acomp,
                       r_convenios_atend.nr_prioridade,
                       r_convenios_atend.ie_tipo_conveniado,
		       r_convenios_atend.ie_autoriza_envio_convenio,
                       r_convenios_atend.cd_plano_glosa,
                       r_convenios_atend.ie_cod_usuario_mae_resp,
                       r_convenios_atend.cd_senha_provisoria,
                       r_convenios_atend.nr_seq_origem);	

            END;

            BEGIN
                SELECT  nr_seq_interno
                INTO STRICT    nr_seq_interno_ww
                FROM    atend_categoria_convenio
                WHERE   nr_atendimento = nr_atendimento_p
                AND     cd_convenio = r_convenios_atend.cd_convenio
                AND     cd_categoria = r_convenios_atend.cd_categoria;
            END;

            BEGIN
                SELECT 	*
                INTO STRICT	pessoa_fisica_taxa_w
                FROM	pessoa_fisica_taxa
                WHERE	nr_seq_atecaco = nr_seq_interno_ww;
            EXCEPTION
                WHEN OTHERS THEN
                    pessoa_fisica_taxa_w.nr_sequencia := NULL;
            END;
            --            
            pessoa_fisica_taxa_w.nr_seq_atecaco      := nr_seq_interno_w;
            pessoa_fisica_taxa_w.nr_atendimento      := nr_atendimento_w;
            pessoa_fisica_taxa_w.nm_usuario_nrec     := wheb_usuario_pck.get_nm_usuario();
            pessoa_fisica_taxa_w.nm_usuario          := wheb_usuario_pck.get_nm_usuario();
            pessoa_fisica_taxa_w.dt_atualizacao_nrec := clock_timestamp();
            pessoa_fisica_taxa_w.dt_atualizacao      := clock_timestamp();
            --
            IF (pessoa_fisica_taxa_w.nr_sequencia IS NOT NULL AND pessoa_fisica_taxa_w.nr_sequencia::text <> '') THEN
                BEGIN
                    SELECT  nextval('pessoa_fisica_taxa_seq')
                    INTO STRICT	pessoa_fisica_taxa_w.nr_sequencia
;
                    --
                    INSERT INTO pessoa_fisica_taxa values (pessoa_fisica_taxa_w.*);
                END;
            END IF;
        END LOOP;
        CLOSE c_convenios_atend;

        qtd_encounters_w := obter_qtd_atend_episodio(nr_seq_episodio_w, nr_atendimento_p);

        IF (qtd_encounters_w = 0) THEN
            OPEN c_convenios_paciente;
                LOOP
                    FETCH c_convenios_paciente INTO r_convenios_pac;
                    EXIT WHEN NOT FOUND; /* apply on c_convenios_paciente */
                    BEGIN

                select	count(1)
                into STRICT	qt_mesmo_convenio_p
                from	atend_categoria_convenio acc
                where	acc.nr_atendimento = nr_atendimento_p
                and	acc.cd_convenio = r_convenios_pac.cd_convenio;

                if (qt_mesmo_convenio_p = 0)  then 
                    SELECT	nextval('atend_categoria_convenio_seq')
                    INTO STRICT	nr_seq_interno_w
;
                    INSERT INTO atend_categoria_convenio(
                               nr_atendimento,
                               cd_convenio,
                               cd_categoria,
                               dt_inicio_vigencia,
                               dt_atualizacao,
                               nm_usuario,
                               cd_usuario_convenio,
                               cd_plano_convenio,
                               dt_validade_carteira,
                               cd_complemento,	
                               dt_final_vigencia,
                               nr_prioridade,
                               nr_seq_interno)
                    VALUES (nr_atendimento_w,
                               r_convenios_pac.cd_convenio,
                               r_convenios_pac.cd_categoria,
                               r_convenios_pac.dt_inicio_vigencia,
                               clock_timestamp(),
                               USER,
                               r_convenios_pac.cd_usuario_convenio,
                               r_convenios_pac.cd_plano_convenio,
                               r_convenios_pac.dt_validade_carteira,	
                               r_convenios_pac.cd_complemento,
                               r_convenios_pac.dt_fim_vigencia,
                               OBTER_PRIOR_PADRAO_CONV_ATEND(nr_atendimento_p,	r_convenios_pac.cd_convenio),
                               nr_seq_interno_w
                        );

                end if;	
                END;
            END LOOP;
            CLOSE c_convenios_paciente;
         END IF;
     ELSE
		insert	into atend_categoria_convenio(
			nr_atendimento,
			cd_convenio,
			cd_categoria,
			dt_inicio_vigencia,
			dt_atualizacao,
			nm_usuario,
			cd_usuario_convenio,
			cd_empresa,
			nr_doc_convenio,
			cd_tipo_acomodacao,
			ie_tipo_guia,
			nr_seq_interno,
			cd_plano_convenio,
			dt_validade_carteira,
			cd_municipio_convenio,
			cd_complemento,	
			dt_ultimo_pagto,
			cd_dependente,
			ie_regime_internacao,
			nr_seq_lib_dieta_conv,
			qt_dia_internacao,
			cd_senha,
			dt_final_vigencia,
			cd_convenio_glosa,
			cd_categoria_glosa,
			cd_usuario_conv_glosa,
			cd_complemento_glosa,
			dt_validade_cart_glosa,
			nr_doc_conv_principal,
			nr_acompanhante,
			ie_lib_dieta,
			qt_dieta_acomp,
			ds_observacao,
			nr_seq_tipo_lib_guia,
			nr_seq_cobertura,
			nr_seq_regra_acomp,
			nr_prioridade,
			ie_tipo_conveniado,
            cd_plano_glosa,
            ie_cod_usuario_mae_resp,
            cd_senha_provisoria,
            nr_seq_origem
		) values (
			nr_atendimento_w,
			cd_convenio_w,
			cd_categoria_w,
			dt_inicio_vigencia_ww,
			clock_timestamp(),
			nm_usuario_p,
			cd_usuario_convenio_w,
			cd_empresa_w,
			cd_autorizacao_ww,
			cd_tipo_acomodacao_w,
			ie_tipo_guia_ww,
			nr_seq_interno_w,
			cd_plano_convenio_w,
			dt_validade_carteira_w,	
			cd_municipio_convenio_w,
			cd_complemento_w,
			dt_ultimo_pagto_w,
			cd_dependente_w,
			coalesce(ie_regime_internacao_p,ie_regime_internacao_w),
			nr_seq_lib_dieta_conv_w,
			qt_dia_autorizado_ww,
			cd_senha_ww,
			dt_fim_vigencia_ww,
			cd_convenio_glosa_w,
			cd_categoria_glosa_w,
			cd_usuario_conv_glosa_w,
			cd_complemento_glosa_w,
			dt_validade_cart_glosa_w,
			nr_doc_conv_principal_w,
			nr_acompanhante_w,
			coalesce(ie_lib_diet_w,ie_lib_dieta_w),
			qt_dieta_acomp_w,
			ds_observacao_w,
			nr_seq_tipo_lib_guia_w,
			nr_seq_cobertura_w,
			nr_seq_regra_acomp_w,
			nr_prioridade_w,
			ie_tipo_conveniado_w,
            cd_plano_glosa_w,
            ie_cod_usuario_mae_resp_w,
            cd_senha_provisoria_w,
            nr_seq_origem_w);
	END IF;
		
		if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')) then

			select	max(pft.qt_dias_pagamento),
				max(pft.dt_pagamento), 
				max(pft.nr_seq_justificativa), 
				max(pft.ie_obriga_pag_adicional)
			into STRICT	qt_dias_pagamento_w,
				dt_pagamento_w,
				nr_seq_justificativa_w,
				ie_obriga_pag_adicional_w
			from 	pessoa_fisica_taxa pft 
			where 	pft.cd_pessoa_fisica = cd_pessoa_fisica_w
			and 	pft.nr_atendimento = nr_atendimento_p
			order by pft.nr_sequencia desc;

			select 	get_justification_under_aged(cd_pessoa_fisica_w, cd_convenio_w, null)
			into STRICT	nr_seq_justif_w
			;
						
			if (coalesce(nr_seq_justif_w, 0) > 0) then
				nr_seq_justificativa_w := nr_seq_justif_w;
			end if;

			CALL create_pessoa_fisica_taxa(qt_dias_pagamento_w, dt_pagamento_w, nr_seq_justificativa_w, cd_pessoa_fisica_w,
                      			          nr_atendimento_w, wheb_usuario_pck.get_nm_usuario, ie_obriga_pag_adicional_w, nr_seq_interno_w, 'A');
		end if;
else
	if (ie_atualizar_dieta_lib_conv_w = 'S') and (ie_lib_dieta_conv_w = 'N') and (ie_lib_dieta_w IS NOT NULL AND ie_lib_dieta_w::text <> '')	then
		update	atend_categoria_convenio	
		set	ie_lib_dieta		= ie_lib_dieta_w
		where	nr_seq_interno		= nr_seq_interno_p;	
	end if;	
end if;

if (ie_gerar_guia_w = 'S') then
	select	coalesce(max(ie_tipo_convenio),0)
	into STRICT	ie_tipo_convenio_w
	from 	atendimento_paciente
	where	nr_atendimento = nr_atendimento_w;

	if (ie_tipo_atendimento_p = 1) then
		ie_tipo_guia_w		:= 'I';
	elsif (ie_tipo_atendimento_p = 3) then
		ie_tipo_guia_w		:= 'C';
	elsif (ie_tipo_atendimento_p = 8) then
		if (ie_tipo_convenio_w = 3) then
			ie_tipo_guia_w := 'A';
		else
			ie_tipo_guia_w := 'C';
		end if;
	else
		ie_tipo_guia_w := 'E';
	end if;

	if (cd_convenio_w > 0) then
		nr_doc_conv_regra_w := obter_guia_conv_atend(nr_atendimento_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_p, cd_estabelecimento_w, ie_tipo_guia_w, nr_doc_conv_regra_w);

		if (nr_doc_conv_regra_w IS NOT NULL AND nr_doc_conv_regra_w::text <> '') then
			update	atend_categoria_convenio
			set	nr_doc_convenio = nr_doc_conv_regra_w
			where	nr_seq_interno = nr_seq_interno_w;
		
		end if;
	end if;
end if;

select	nextval('atend_paciente_unidade_seq')
into STRICT	nr_seq_interno_w
;

select	coalesce(max(nr_sequencia),0) + 1
into STRICT	nr_seq_unidade_w
from 	atend_paciente_unidade
where	nr_atendimento		= nr_atendimento_w;

select	coalesce(max(nr_atendimento),0)
into STRICT	nr_atend_novo_w
from  	atendimento_paciente
where	nr_atend_origem_pa = nr_atendimento_p
and	cd_pessoa_fisica = obter_pessoa_atendimento(nr_atendimento_p,'C')
and	coalesce(dt_cancelamento::text, '') = ''
and	ie_tipo_atendimento = '1';

if (ie_novo_atendimento_p = 'S') and (ie_manter_setor_origem_p = 'S') and (qtd_internado_w = 0) then

	select 	max(cd_setor_atendimento),
		max(cd_unidade_basica),
		max(cd_unidade_compl),
		max(cd_tipo_acomodacao)
	into STRICT	cd_setor_atendimento_atend_w,
		cd_unidade_basica_atend_w,
		cd_unidade_compl_atend_w,
		cd_tipo_acomod_unidade_w
	from 	atend_paciente_unidade
	where	nr_seq_interno = nr_seq_interno_unid_w;
	
	CALL gerar_higienizacao_leito(clock_timestamp(),nm_usuario_p,cd_estabelecimento_w,'ARI',null,nr_atendimento_p);
	
	if (cd_setor_atendimento_atend_w IS NOT NULL AND cd_setor_atendimento_atend_w::text <> '') then	
		insert	into atend_paciente_unidade(
			nr_atendimento,
			nr_sequencia,
			cd_setor_atendimento,
			cd_unidade_basica,
			cd_unidade_compl,
			dt_entrada_unidade,
			dt_atualizacao,
			nm_usuario,
			nm_usuario_original,	
			cd_tipo_acomodacao,
			nr_seq_interno,
			ie_calcular_dif_diaria,
			ie_passagem_setor
		) values (
			nr_atendimento_w,
			nr_seq_unidade_w,
			cd_setor_atendimento_atend_w,
			cd_unidade_basica_atend_w,
			cd_unidade_compl_atend_w,
			dt_internacao_p,
			clock_timestamp(),
			nm_usuario_p,
			nm_usuario_p,
			coalesce(cd_tipo_acomod_unidade_w, cd_tipo_acomodacao_w),
			nr_seq_interno_w,
			'S',
			'N');	
	CALL limpar_dados_local_PA_mov(cd_setor_atendimento_atend_w, nr_atendimento_w, nm_usuario_p);
	CALL atend_paciente_unid_afterpost(nr_seq_interno_w, 'I', nm_usuario_p);			

	end if;
	
elsif (ie_manter_setor_origem_p = 'N') and (ie_novo_atendimento_p = 'S') and (nr_atendimento_w = nr_atendimento_p) and (nr_atend_novo_w > 0) then
	CALL gerar_higienizacao_leito(clock_timestamp(),nm_usuario_p,cd_estabelecimento_w,'ARI',null,nr_atendimento_p);
	
	insert	into Atend_Paciente_Unidade(nr_atendimento,
		nr_sequencia,
		cd_setor_atendimento,
		cd_unidade_basica,
		cd_unidade_compl,
		dt_entrada_unidade,
		dt_atualizacao,
		nm_usuario,
		nm_usuario_original,	
		cd_tipo_acomodacao,
		nr_seq_interno,
		ie_calcular_dif_diaria,
		ie_passagem_setor,
		cd_departamento)
	values (nr_atend_novo_w,
		nr_seq_unidade_w,
		cd_setor_atendimento_p,
		cd_unidade_basica_p,
		cd_unidade_compl_p,
		dt_internacao_p,
		clock_timestamp(),
		nm_usuario_p,
		nm_usuario_p,
		coalesce(cd_tipo_acomod_unidade_w, cd_tipo_acomodacao_w),
		nr_seq_interno_w,
		'S',
		'N',
		cd_departamento_w);	
	CALL limpar_dados_local_PA_mov(cd_setor_atendimento_p, nr_atend_novo_w, nm_usuario_p);
	CALL atend_paciente_unid_afterpost(nr_seq_interno_w, 'I', nm_usuario_p);
	
elsif (ie_manter_setor_origem_p = 'N') then
	CALL gerar_higienizacao_leito(clock_timestamp(),nm_usuario_p,cd_estabelecimento_w,'ARI',null,nr_atendimento_p);
	insert	into Atend_Paciente_Unidade(nr_atendimento,
		nr_sequencia,
		cd_setor_atendimento,
		cd_unidade_basica,
		cd_unidade_compl,
		dt_entrada_unidade,
		dt_atualizacao,
		nm_usuario,
		nm_usuario_original,	
		cd_tipo_acomodacao,
		nr_seq_interno,
		ie_calcular_dif_diaria,
		ie_passagem_setor,
		cd_departamento)
	values (nr_atendimento_w,
		nr_seq_unidade_w,
		cd_setor_atendimento_p,
		cd_unidade_basica_p,
		cd_unidade_compl_p,
		dt_internacao_p,
		clock_timestamp(),
		nm_usuario_p,
		nm_usuario_p,
		coalesce(cd_tipo_acomod_unidade_w, cd_tipo_acomodacao_w),
		nr_seq_interno_w,
		'S',
		'N',
		cd_departamento_w);	
	CALL limpar_dados_local_PA_mov(cd_setor_atendimento_p, nr_atendimento_w, nm_usuario_p);
	CALL atend_paciente_unid_afterpost(nr_seq_interno_w, 'I', nm_usuario_p);
end if;
					
if (cd_classif_setor_w in ('3','4','8')) then
	begin
	
	if  not((coalesce(cd_motivo_alta_p::text, '') = '') and (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')) and (dt_internacao_p > clock_timestamp())) then
	
		update	Atend_Paciente_Unidade
		set		dt_saida_unidade	= dt_internacao_p,
				nm_usuario 		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
		where	nr_seq_interno		<> nr_seq_interno_w
		and		nr_atendimento		= nr_atendimento_p
		and		coalesce(dt_saida_unidade::text, '') = '';
	end if;

	CALL ajustar_mapa_dieta(nr_atendimento_p, nm_usuario_p);
	end;
end if;

select	max(nr_seq_saida_spsadt)
into STRICT	nr_seq_saida_spsadt_w
from	tiss_parametros_convenio
where	cd_convenio		= cd_convenio_w
and	cd_estabelecimento	= cd_estabelecimento_w;

if (coalesce(nr_seq_saida_spsadt_w, 0) <> 0) then
	update	conta_paciente
	set	nr_seq_saida_spsadt	= coalesce(nr_seq_saida_spsadt, nr_seq_saida_spsadt_w)
	where	nr_atendimento		= nr_atendimento_p;
end if;

CALL atualizar_atendimento_paciente(nr_atendimento_w);
CALL gerar_lancamento_automatico(nr_atendimento_w, null, 26, nm_usuario_p, null,null,null,null,null,null);

if (ie_troca_setor_prescr_w = 'S') then

	select 	max(cd_setor_atendimento)
	into STRICT	cd_setor_ant_w
	from 	atend_paciente_unidade
	where	nr_seq_interno = nr_seq_interno_unid_w;
	
	CALL Atualizar_setor_prescricao(nr_atendimento_w, cd_setor_atendimento_p, cd_setor_ant_w, nm_usuario_p);
end if;

if (coalesce(ie_transfere_itens_w,'N') = 'S') and (ie_novo_atendimento_p = 'S') and (qtd_internado_w = 0) then
	
	select 	max(dt_entrada)
	into STRICT	dt_entrada_w
	from 	atendimento_paciente
	where 	nr_atendimento = nr_atendimento_w;
	
	open c03;
	loop
	fetch c03 into
		nr_sequencia_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		ie_classificacao_w,
		cd_cgc_prestador_w,
		cd_medico_executor_w,
		dt_procedimento_w,
		cd_setor_atendimento_ww;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		ie_gera_proc_w	:= Obter_Se_Gera_Proc_Internacao(cd_procedimento_w, ie_origem_proced_w);		
		if (ie_gera_proc_w	= 'S') then
			if (dt_procedimento_w < dt_entrada_w) then
				dt_procedimento_w:= dt_entrada_w + 3/1440;
			end if;

			update	procedimento_paciente
			set	dt_procedimento	= dt_procedimento_w
			where	nr_sequencia	= nr_sequencia_w;
			
			commit;

			CALL transferir_gasto_atendimento(	nr_sequencia_w,
							1,
							nr_atendimento_w,
							'N',
							'S',
							nm_usuario_p);
			
			update	prescr_medica
			set	nr_atendimento	= nr_atendimento_w
			where	nr_atendimento	= nr_atendimento_p
			and	nr_prescricao 	= 	(SELECT nr_prescricao
							from 	procedimento_paciente
							where	nr_atendimento = nr_atendimento_w
							and	nr_sequencia = nr_sequencia_w);			
		end if;
	end loop;
	close c03;

	open c04;
	loop
	fetch c04 into
		nr_sequencia_w,
		cd_setor_atendimento_ww,
		dt_atendimento_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
	
		if (dt_atendimento_w < dt_entrada_w) then
			dt_atendimento_w:= dt_entrada_w + 3/1440;
		end if;
	
		update	material_atend_paciente
		set	dt_atendimento	= dt_atendimento_w
		where	nr_sequencia	= nr_sequencia_w;
		
		commit;

		CALL transferir_gasto_atendimento(	nr_sequencia_w,
						2,
						nr_atendimento_w,
						'N',
						'S',
						nm_usuario_p);

		update	prescr_medica
		set	nr_atendimento	= nr_atendimento_w
		where	nr_atendimento	= nr_atendimento_p
		and	nr_prescricao 	=	(SELECT nr_prescricao
						from 	material_atend_paciente
						where	nr_atendimento = nr_atendimento_w
						and	nr_sequencia = nr_sequencia_w);
	end loop;
	close c04;	

end if;

begin
insert into log_mov(	dt_atualizacao,
			nm_usuario,
			ds_log,
			cd_log) 
	values (	clock_timestamp(), 
			nm_usuario_p,
			nr_atendimento_p,
			1429);
end;

open C01;
loop
fetch C01 into	
	nr_seq_evento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_w,cd_pessoa_fisica_w,null,nm_usuario_p,null);
	end;
end loop;
close C01;

begin
	nr_seq_classif_pf_w := substr(obter_classificacao_pf(cd_pessoa_fisica_w), 1, 10);
exception
	when	others then
		nr_seq_classif_pf_w := 0;
end;

If (coalesce(nr_seq_classif_pf_w, 0) > 0) then
	open C06;
	loop
	fetch C06 into
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin
		CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_w,cd_pessoa_fisica_w,null,nm_usuario_p,null);
		end;
	end loop;
	close C06;
End if;

if (nr_atendimento_p > 0 ) then
	CALL gerar_ajustes_ap_lote( 'M', nr_atendimento_p, nm_usuario_p);
	CALL gerar_autor_regra(nr_atendimento_w,null,null,null,null,null,'AT',nm_usuario_p,null,null,null,null,null,null,'','','');
end if;

begin
select	1
into STRICT	qt_existe_regra_setor_w
from	dis_regra_setor
where	cd_setor_atendimento = cd_setor_atendimento_p  LIMIT 1;
exception
when others then
	qt_existe_regra_setor_w := 0;
end;

if (qt_existe_regra_setor_w > 0) then
	CALL intdisp_gerar_movimento(nr_atendimento_p, 'EPA');
end if;	
if (qt_existe_regra_setor_w = 0) then
	begin
		begin
		select	1
		into STRICT	qt_existe_dips_setor_w
		from	int_disp_movt_pac
		where	nr_atendimento = nr_atendimento_p  LIMIT 1;
		exception
		when others then
			qt_existe_dips_setor_w := 0;
		end;	
		if (qt_existe_dips_setor_w > 0) then
		CALL intdisp_gerar_movimento(nr_atendimento_p, 'EPD');
		end if;
	end;	
end if;

--Integrar quando o paciente e internado atraves de um setor de emergencia.
select	count(*)
into STRICT	qt_movto_pac_w
from	int_disp_movt_pac
where	nr_atendimento = nr_novo_atend_p;

if (coalesce(ie_novo_atendimento_p,'N') = 'S') and (nr_novo_atend_p IS NOT NULL AND nr_novo_atend_p::text <> '') and (qt_movto_pac_w = 0) then
	if (qt_existe_regra_setor_w > 0) then
		CALL intdisp_gerar_movimento(nr_novo_atend_p, 'EPA');
	end if;
end if;

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_vaga_w
from	gestao_vaga
where	nr_atendimento	= nr_atendimento_w
and	dt_solicitacao	<= clock_timestamp()
and	ie_status		in ('P','A');

if (nr_seq_vaga_w IS NOT NULL AND nr_seq_vaga_w::text <> '') then

	select	max(cd_cid_principal)
	into STRICT	cd_cid_principal_w
	from	gestao_vaga
	where	nr_sequencia = nr_seq_vaga_w;
	
	if (cd_cid_principal_w IS NOT NULL AND cd_cid_principal_w::text <> '') then

		insert into  diagnostico_medico(
			nr_atendimento,
			dt_diagnostico,                 
			ie_tipo_diagnostico,           
			cd_medico,                      
			dt_atualizacao,                 
			nm_usuario)
		values (
			nr_atendimento_w,
			clock_timestamp(),		
			1,
			coalesce(cd_medico_resp_p,cd_medico_resp_w),
			clock_timestamp(),
			nm_usuario_p);
		commit;
				
		insert into diagnostico_doenca(
			nr_atendimento,
			dt_diagnostico,          
			cd_doenca,              
			dt_atualizacao,
			nm_usuario)        
		values (
			nr_atendimento_w,
			clock_timestamp(),
			cd_cid_principal_w,
			clock_timestamp(),
			nm_usuario_p);
	end if;
end if;

--Gerar pagador na EUP
if (ie_gerar_pagador_atend_w = 'S') then
	begin
	ds_msg_idade_pagador_w := gerar_atend_pagador(nr_atend_novo_w, coalesce(qt_idade_min_pagador_w,0), nm_usuario_p, cd_estabelecimento_w, obter_perfil_ativo, ds_msg_idade_pagador_w);
	exception
	when others then
		ds_msg_idade_pagador_w	:= null;
	end;
end if;

select	max(cd_setor_atendimento),
		max(cd_unidade_basica),
		max(cd_unidade_compl)
into STRICT	cd_setor_ant_w,
		cd_unidade_basica_atend_w,
		cd_unidade_compl_atend_w	
from 	atend_paciente_unidade
where	nr_seq_interno = nr_seq_interno_unid_w;

ds_leito_w 		:= substr(cd_unidade_basica_p || ' - ' || cd_unidade_compl_p,1,10);
ds_leito_ant_w 	:= substr(cd_unidade_basica_atend_w || ' - ' || cd_unidade_compl_atend_w,1,10);

CALL gerar_int_dankia_pck.dankia_gerar_movimentacao(nr_atendimento_p, cd_setor_atendimento_p, cd_setor_ant_w, ds_leito_w, ds_leito_ant_w, cd_estabelecimento_w, nm_usuario_p);		

/*
-- Rotina para enviar paciente internado para integrac?o Swisslog

begin
select	nr_sequencia
into	nr_seq_empresa_w
from	empresa_integracao
where	upper(nm_empresa) = 'SWISSLOG';

select	'S'
into	ie_setor_swisslog_w
from	far_setores_integracao
where	nr_seq_empresa_int = nr_seq_empresa_w
and	cd_setor_atendimento = cd_setor_atendimento_p;
exception
when others then
	nr_seq_empresa_w := 0;
	ie_setor_swisslog_w := 'N';
end;

if	(ie_setor_swisslog_w = 'S') then
	ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || obter_separador_bv;
	
	-- Envio das informac?es do paciente internado para a integrac?o

	swisslog_gerar_integracao(430, ds_param_integ_hl7_w);
end if;*/
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_internacao_atendimento (nr_atendimento_p bigint, nr_seq_interno_p bigint, ie_tipo_guia_p text, dt_internacao_p timestamp, cd_setor_atendimento_p bigint, cd_unidade_basica_p text, cd_unidade_compl_p text, nr_doc_convenio_p text, ie_tipo_atendimento_p bigint, ie_clinica_p bigint, ie_novo_atendimento_p text, cd_medico_resp_p text, cd_responsavel_p text, nr_seq_classif_medico_p bigint, nm_usuario_p text, ie_manter_setor_origem_p text, cd_motivo_alta_p bigint, cd_procedencia_p bigint, ie_carater_inter_sus_p text, nr_seq_classificacao_p bigint, cd_tipo_acomodacao_p bigint default null, ie_atend_tiss_p bigint default null, ie_responsavel_p text DEFAULT NULL, nr_seq_grau_parentesco_p bigint DEFAULT NULL, nr_novo_atend_p INOUT bigint DEFAULT NULL, ds_erro_fecha_conta_p INOUT text DEFAULT NULL, dt_ving_ini_p timestamp DEFAULT NULL, dt_ving_fim_p timestamp DEFAULT NULL, qt_dia_int_p bigint DEFAULT NULL, ie_regime_internacao_p text default null, nr_seq_tipo_episodio_p bigint default null, nr_seq_tipo_admissao_fat_p bigint default null, nr_seq_queixa_p bigint default null, cd_departamento_medico_p bigint default null) FROM PUBLIC;

