-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_evento_escrit ( nr_seq_pagamento_p pls_pagamento_prestador.nr_sequencia%type, dt_referencia_p timestamp, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


vl_max_desc_pagto_w		double precision;
vl_evento_w			double precision;
vl_escrituracao_w		double precision;
vl_total_parcelas_w		double precision;
tx_desc_pagto_w			double precision;
nr_seq_evento_escrit_w		bigint;
ie_possui_regra_w		bigint;
nr_seq_evento_incid_w		bigint;
nr_seq_escrit_quota_w		bigint;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
nr_seq_cooperado_w		bigint;
nr_seq_evento_w			bigint;
nr_parcela_w			bigint;
nr_seq_pag_item_w		bigint;
nr_seq_pag_item_exist_w		bigint;
nr_seq_lote_w			pls_lote_pagamento.nr_sequencia%type;
nr_seq_lote_evento_w		bigint;
dt_competencia_w		timestamp;
dt_vencimento_w			timestamp;
dt_movimento_w			timestamp;
ie_complementar_w		pls_periodo_pagamento.ie_complementar%type;
nr_seq_periodo_w		pls_periodo_pagamento.nr_sequencia%type;
nr_seq_tipo_prestador_w		pls_prestador.nr_seq_tipo_prestador%type;
nr_seq_classificacao_w		pls_prestador.nr_seq_classificacao%type;
ie_consiste_periodo_pag_w	pls_evento.ie_consiste_periodo_pag%type;
ie_gerar_w			varchar(5);

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.vl_max_desc_pagto,
		coalesce(a.tx_desc_pagto,100),
		a.nr_seq_evento
	from	pls_evento_escrit a
	where	dt_referencia_p between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,dt_referencia_p)
	order by a.nr_seq_evento;

C02 CURSOR FOR
	SELECT	a.nr_seq_cooperado
	from	pls_evento_escrit_coop a
	where	dt_referencia_p between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,dt_referencia_p)
	and	a.nr_seq_evento_escrit 	= nr_seq_evento_escrit_w
	and	a.nr_seq_cooperado	= nr_seq_cooperado_w;

C03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.vl_escrituracao
	from	pls_escrituracao_quota a
	where	a.nr_seq_cooperado 		= nr_seq_cooperado_w
	and	a.ie_forma_pagamento 		= 'P'
	and	exists (SELECT	1
			from	pls_tipo_escrit_quota	x
			where	x.nr_sequencia 		= nr_seq_tipo_escrit_quota
			and	ie_tipo_escrituracao 	= 'IQ');


BEGIN
if (nr_seq_pagamento_p IS NOT NULL AND nr_seq_pagamento_p::text <> '') and (dt_referencia_p IS NOT NULL AND dt_referencia_p::text <> '') then
	select	b.nr_seq_prestador,
		a.nr_sequencia,
		coalesce(ie_complementar,'N'),
		d.nr_sequencia,
		c.nr_seq_tipo_prestador,
		c.nr_seq_classificacao,
		a.dt_mes_competencia
	into STRICT	nr_seq_prestador_w,
		nr_seq_lote_w,
		ie_complementar_w,
		nr_seq_periodo_w,
		nr_seq_tipo_prestador_w,
		nr_seq_classificacao_w,
		dt_competencia_w
	from	pls_periodo_pagamento	d,
		pls_prestador		c,
		pls_pagamento_prestador b,
		pls_lote_pagamento	a
	where	a.nr_sequencia		= b.nr_seq_lote
	and	c.nr_sequencia		= b.nr_seq_prestador
	and	d.nr_sequencia		= a.nr_seq_periodo
	and	b.nr_sequencia 		= nr_seq_pagamento_p;

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_lote_evento_w
	from	pls_lote_evento a
	where	a.nr_seq_lote_pagamento = nr_seq_lote_w;

	if (coalesce(nr_seq_lote_evento_w::text, '') = '') then

		select	max(a.nr_seq_lote)
		into STRICT	nr_seq_lote_evento_w
		from	pls_evento_movimento a
		where	a.nr_seq_lote_pgto = nr_seq_lote_w;
	end if;

	if (nr_seq_lote_evento_w IS NOT NULL AND nr_seq_lote_evento_w::text <> '') then

		select	trunc(max(dt_competencia), 'month')
		into STRICT	dt_movimento_w
		from	pls_lote_evento a
		where	a.nr_sequencia = nr_seq_lote_evento_w;
	end if;

	select	max(b.nr_sequencia)
	into STRICT	nr_seq_cooperado_w
	from	pls_cooperado	b,
		pls_prestador 	a
	where	a.nr_sequencia 		= nr_seq_prestador_w
	and (a.cd_pessoa_fisica 	= b.cd_pessoa_fisica or
		a.cd_cgc 		= b.cd_cgc);

	open C01;
	loop
	fetch C01 into
		nr_seq_evento_escrit_w,
		vl_max_desc_pagto_w,
		tx_desc_pagto_w,
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		select	coalesce(a.ie_consiste_periodo_pag, 'S')
		into STRICT	ie_consiste_periodo_pag_w
		from	pls_evento	a
		where	a.nr_sequencia	= nr_seq_evento_w;

		ie_gerar_w	:= 'N';
		if (ie_complementar_w = 'N') then
			if (ie_consiste_periodo_pag_w = 'S') then
				ie_gerar_w := pls_obter_se_evento_inside_per(nr_seq_periodo_w, nr_seq_evento_w, nr_seq_prestador_w, dt_competencia_w, dt_movimento_w);
			end if;
		else
			ie_gerar_w := pls_obter_se_entra_pgto_compl(nr_seq_lote_w, nr_seq_evento_w, nr_seq_prestador_w, nr_seq_tipo_prestador_w, nr_seq_classificacao_w);
		end if;

		if (ie_gerar_w = 'S') then
			open C02;
			loop
			fetch C02 into
				nr_seq_cooperado_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				open C03;
				loop
				fetch C03 into
					nr_seq_escrit_quota_w,
					vl_escrituracao_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin
					select	coalesce(sum(a.vl_parcela),0)
					into STRICT	vl_total_parcelas_w
					from	pls_escrit_quota_parcela a
					where	a.nr_seq_escrituracao = nr_seq_escrit_quota_w;

					select	count(1)
					into STRICT	ie_possui_regra_w
					from	pls_evento_escrit_incid a
					where	a.nr_seq_evento_escrit 	= nr_seq_evento_escrit_w  LIMIT 1;

					if (ie_possui_regra_w > 0) then

						select	nextval('pls_pagamento_item_seq')
						into STRICT	nr_seq_pag_item_w
						;

						select	coalesce(sum(a.vl_item),0)
						into STRICT	vl_evento_w
						from	pls_pagamento_item 	a,
							pls_evento		b
						where	b.nr_sequencia		= a.nr_seq_evento
						and	b.ie_natureza 		= 'P'
						and	a.nr_seq_pagamento 	= nr_seq_pagamento_p
						and exists (	SELECT	1
								from	pls_evento_escrit_incid 	z
								where	z.nr_seq_evento_escrit 			= nr_seq_evento_escrit_w
								and	coalesce(z.nr_seq_evento, a.nr_seq_evento)	= a.nr_seq_evento
								and	z.ie_incidencia				= 'S')
						and not exists (	select	1
								from	pls_evento_escrit_incid 	z
								where	z.nr_seq_evento_escrit 			= nr_seq_evento_escrit_w
								and	coalesce(z.nr_seq_evento, a.nr_seq_evento)	= a.nr_seq_evento
								and	z.ie_incidencia				= 'N');

						vl_evento_w := dividir_sem_round((vl_evento_w * tx_desc_pagto_w)::numeric,100);

						if (vl_evento_w > vl_max_desc_pagto_w) then
							if	((vl_total_parcelas_w + vl_max_desc_pagto_w) > vl_escrituracao_w) then
								vl_evento_w := vl_escrituracao_w - vl_total_parcelas_w;
							else
								vl_evento_w := vl_max_desc_pagto_w;
							end if;
						elsif	((vl_total_parcelas_w + vl_evento_w) > vl_escrituracao_w) then
							vl_evento_w := vl_escrituracao_w - vl_total_parcelas_w;
						end if;

						if (vl_evento_w <> 0) then
							select	coalesce(max(a.nr_parcela),0)
							into STRICT	nr_parcela_w
							from	pls_escrit_quota_parcela a
							where	a.nr_seq_escrituracao = nr_seq_escrit_quota_w;

							select	coalesce(max(a.dt_vencimento),dt_referencia_p)
							into STRICT	dt_vencimento_w
							from	pls_escrit_quota_parcela a
							where	a.nr_seq_escrituracao 	= nr_seq_escrit_quota_w
							and	a.nr_parcela		= nr_parcela_w;

							select	max(a.nr_sequencia)
							into STRICT	nr_seq_pag_item_exist_w
							from	pls_pagamento_item a
							where	a.nr_seq_pagamento 	= nr_seq_pagamento_p
							and	a.nr_seq_evento		= nr_seq_evento_w;

							insert into pls_pagamento_item(nr_sequencia,
								nr_seq_pagamento,
								nm_usuario_nrec,
								nm_usuario,
								dt_atualizacao_nrec,
								dt_atualizacao,
								nr_seq_evento,
								vl_item)
							values (nr_seq_pag_item_w,
								nr_seq_pagamento_p,
								nm_usuario_p,
								nm_usuario_p,
								clock_timestamp(),
								clock_timestamp(),
								nr_seq_evento_w,
								vl_evento_w * -1);

							insert into pls_evento_movimento(nr_sequencia,
								nr_seq_lote_pgto,
								nr_seq_lote,
								nr_seq_prestador,
								nm_usuario_nrec,
								nm_usuario,
								dt_atualizacao_nrec,
								dt_atualizacao,
								vl_movimento,
								nr_seq_evento,
								ie_forma_pagto,
								dt_movimento)
							values (nextval('pls_evento_movimento_seq'),
								nr_seq_lote_w,
								nr_seq_lote_evento_w,
								nr_seq_prestador_w,
								nm_usuario_p,
								nm_usuario_p,
								clock_timestamp(),
								clock_timestamp(),
								vl_evento_w * -1,
								nr_seq_evento_w,
								'R',
								clock_timestamp());

							insert into pls_escrit_quota_parcela(nr_sequencia,
								nr_seq_escrituracao,
								nm_usuario_nrec,
								nm_usuario,
								dt_atualizacao_nrec,
								dt_atualizacao,
								vl_parcela,
								nr_parcela,
								dt_vencimento,
								nr_seq_pag_item,
								qt_quotas)
							values (nextval('pls_escrit_quota_parcela_seq'),
								nr_seq_escrit_quota_w,
								nm_usuario_p,
								nm_usuario_p,
								clock_timestamp(),
								clock_timestamp(),
								vl_evento_w,
								nr_parcela_w + 1,
								dt_referencia_p,
								nr_seq_pag_item_w,
								vl_evento_w);

							update	pls_escrituracao_quota
							set	nm_usuario 		= nm_usuario_p,
								dt_atualizacao 		= clock_timestamp(),
								dt_geracao_parcelas 	= clock_timestamp()
							where	nr_sequencia		= nr_seq_escrit_quota_w;

							CALL pls_atualizar_saldo_escrit(nr_seq_escrit_quota_w, nm_usuario_p, 'N');
						end if;
					end if;
					end;
				end loop;
				close C03;
				end;
			end loop;
			close C02;
		end if;
		end;
	end loop;
	close C01;

	CALL pls_atualizar_valor_lote_pag(nr_seq_pagamento_p, nm_usuario_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_evento_escrit ( nr_seq_pagamento_p pls_pagamento_prestador.nr_sequencia%type, dt_referencia_p timestamp, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

