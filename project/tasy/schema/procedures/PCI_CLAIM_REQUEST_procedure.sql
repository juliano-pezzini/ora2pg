-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pci_claim_request ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_interno_conta_p bigint, nr_seq_account_p bigint, cd_seq_transaction_P INOUT text, ie_validation_P text default 'F') AS $body$
DECLARE


--------------------Claim--------
nr_voucher_seq_w		        pci_voucher.nr_sequencia%type;

cd_referring_tw 			varchar(15);
ie_hospital_w 				varchar(1) :='Y';
dt_referral_tw  			timestamp;
cd_requesting_tw 			varchar(15);
dt_request_tw   			timestamp;
is_found_record                smallint := 0;
ie_referral_period_tw 			varchar(5);

claimant_nm_family_w 			varchar(40);
claimant_nm_first_w 			varchar(40);
claimant_dt_birth_w 			timestamp;
claimant_nr_patient_num_w  		varchar(20);
claimant_ie_authorised_w  		pci_claim.claimant_ie_authorised%type := 'N';
cd_med_card_num_w    			varchar(20);
CLAIMANT_DS_ADDRESS_ONE_w   		pci_claim.CLAIMANT_DS_ADDRESS_ONE%type;
CLAIMANT_DS_ADDRESS_TWO_w  		pci_claim.CLAIMANT_DS_ADDRESS_TWO%type;
CLAIMANT_DS_LOCALITY_w  		pci_claim.CLAIMANT_DS_LOCALITY%type;
CLAIMANT_NR_POSTCODE_w  		pci_claim.CLAIMANT_NR_POSTCODE%type;

nr_seq_ext_doc_w		bigint;
dt_service_w                    timestamp;
nr_voucher_count_w         	smallint;
curr_cd_medico_resp_w      	varchar(10);
nr_voucher_w               	varchar(2);
qt_procedure_count_w		bigint;
voucher_date_w 			timestamp;
new_voucher_ind_w          	smallint;
cd_equipamento_w  		varchar(10);
dt_atualizacao_nrec_w           timestamp;
nm_usuario_nrec_w               varchar(15);
qt_distance_w			bigint;
ie_referral_override_w          varchar(1);
dt_referral_w                   timestamp;
ie_referral_period_w            varchar(1);
cd_referring_w                  varchar(8);
cd_requesting_w                 varchar(8);
dt_request_w                    timestamp;
ie_request_type_w               varchar(1);
nr_time_service_w               timestamp;
nr_seq_claim_w                  bigint;
cd_payee_provider_w             varchar(8);
nm_first_w                      varchar(40);
nm_family_w                     varchar(40);
ie_multiple_procedure_w   	varchar(1);
dt_birth_w                      timestamp;
ie_service_type_w		varchar(1);
cd_transaction_id		varchar(25);
error_flag_w			varchar(1);
nr_lsp_w 			pci_service.nr_lsp%type;

cd_attribute_w             	varchar(100);
cd_field_name_w            	varchar(100);
--------------------Voucher-----------
nr_claim_seq_w			pci_claim.nr_sequencia%type;
ie_account_paid_w		varchar(1);
nr_account_w			varchar(9);
nm_bank_account_w		varchar(30);
nr_bank_account_w		integer;
cd_bsb_w			varchar(8);
ds_address_one_w		varchar(40);
ds_address_two_w		varchar(40);
ds_locality_w			varchar(40);
nr_postcode_w			smallint;
cd_medicare_card_w		varchar(10);
ie_authorised_w			varchar(1);
nr_sender_phone_w		varchar(19);
nr_time_lod_w			timestamp;
nr_patient_ref_w		smallint;
dt_lodgement_w			timestamp;
cd_provider_w			varchar(8);
claimant_cd_medicare_card_w 	bigint;
ds_service_w			varchar(100);
cd_med_issue_card_w		bigint;
cd_medicare_issue_card_w	bigint;
dt_ref_req_w    		timestamp;

--------------------Service-----------
nr_service_seq_w		pci_service.nr_sequencia%type;
qt_patients_w       		pci_service.qt_patients%type;
dt_accession_w			prescr_procedimento.dt_coleta%type;
cd_scp_w			pci_service.cd_scp%type;
nr_atendimento_w		conta_paciente.nr_interno_conta%type;
cd_service_code_w		bigint;
is_found_rec			boolean := false;
cd_mbs_code_w			varchar(5);
ie_rule_w			pci_service.ie_rule%type;
ie_duplicate_w			pci_service.ie_duplicate%type;
ie_adm_type_w 			varchar(1);
service_count_number 		varchar(4);
ie_aftercare_w   		varchar(1);
ie_selfdeemed_w			pci_service.ie_selfdeemed%type;
cd_motivo_alta_w    		atendimento_paciente.cd_motivo_alta%type;
ie_restrictive_w    		varchar(2);
ie_specialist_w			varchar(10) := 'N';
dt_validate_w			timestamp;
ie_s4b3_w			pci_service.ie_s4b3%type;
cd_medic_w			parecer_medico_req.cd_medico%type;
req_ref_provider_num_w 		medical_provider_number.nr_provider%type;
general_procedures_w   		varchar(400);
specialist_procedures_w  	varchar(400);
pathology_procedures_w 		varchar(400);

c03 CURSOR FOR
SELECT	nm_eclipse_field,
	nm_atributo
from	eclipse_attribute
where	ie_condition = 'M'
and	ie_pci = 'S';

c01 CURSOR FOR
SELECT	c.vl_procedimento,
	c.dt_atualizacao,
	c.cd_procedimento,
	c.cd_equipamento,
	c.ie_origem_proced,
	c.dt_inicio_procedimento,
	c.dt_final_procedimento,
	trunc(c.dt_final_procedimento - c.dt_inicio_procedimento) qt_duracao,
	  (select max(Lpad(substr(k.NR_PROVIDER, 1,8),8,'0')) from MEDICAL_PROVIDER_NUMBER k where k.CD_MEDICO = c.CD_MEDICO) as cd_medico_resp,
	  c.ds_observacao,
	  c.QT_PROCEDIMENTO,
	  c.DT_PROCEDIMENTO,
	  c.VL_CUSTO_OPERACIONAL
from	procedimento_paciente c
where	c.nr_interno_conta = nr_seq_account_p
--and	c.ie_origem_proced = 20 -- Only MBS codes
ORDER  BY c.dt_atualizacao, c.DT_PROCEDIMENTO,c.CD_MEDICO,  c.cd_procedimento desc;


	
BEGIN

	delete from eclipse_inco_account
	where nr_interno_conta = nr_seq_account_p;
	commit;

	-- checking the type of claim
		SELECT * FROM get_eclipse_service_types(nr_seq_account_p, general_procedures_w, specialist_procedures_w, pathology_procedures_w ) INTO STRICT general_procedures_w, specialist_procedures_w, pathology_procedures_w;
	if (specialist_procedures_w IS NOT NULL AND specialist_procedures_w::text <> '' AND pathology_procedures_w IS NOT NULL AND pathology_procedures_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1118140, ' Specialist items = ' || specialist_procedures_w || ' Pathology items = ' || pathology_procedures_w);
	end if;

	if (specialist_procedures_w IS NOT NULL AND specialist_procedures_w::text <> '') then
		ie_service_type_w := 'S';
	elsif (pathology_procedures_w IS NOT NULL AND pathology_procedures_w::text <> '') then
		ie_service_type_w := 'P';
	else
		ie_service_type_w := 'O';
	end if;
	select	nextval('pci_claim_seq')
	into STRICT	nr_claim_seq_w
	;

	cd_transaction_id := generateRandomNumber();

-------------CLAIM-----------------
	select	coalesce(max(CASE WHEN coalesce(b.vl_saldo_titulo::text, '') = '' THEN  'N'  ELSE 'Y' END ),'N') ie_account_paid,max((select max(substr(e.ds_banco, 1, 30))
	from 
		autorizacao_convenio c,pessoa_fisica_conta d,banco e 
	where c.cd_pessoa_fisica = b.cd_pessoa_fisica
	and	d.cd_pessoa_fisica = c.cd_pessoa_fisica
	and	e.cd_banco = d.cd_banco )) nm_bank_account,
	max((select max(d.nr_conta) 
	from autorizacao_convenio c,
	pessoa_fisica_conta d 
	where c.cd_pessoa_fisica = b.cd_pessoa_fisica
	and	d.cd_pessoa_fisica = c.cd_pessoa_fisica)) nr_bank_account,
	max((select max(d.CD_AGENCIA_BANCARIA) 
	from autorizacao_convenio c,
	pessoa_fisica_conta d 
	where c.cd_pessoa_fisica = b.cd_pessoa_fisica
	and	d.cd_pessoa_fisica = c.cd_pessoa_fisica ))  cd_bsb
	--max(c.dt_retorno) ie_authorised
INTO STRICT	ie_account_paid_w,
	nm_bank_account_w,
	nr_bank_account_w,
	cd_bsb_w 
	--ie_authorised_w
from	conta_paciente a,
		titulo_receber b
where	a.nr_interno_conta = nr_seq_account_p
and	b.nr_interno_conta = a.nr_interno_conta  LIMIT 1;

ie_authorised_w := 'Y'; -- Hard coding this to Y for SATH
select 	max(a.nr_interno_conta) nr_account,
		max(substr(e.cd_cep, 1, 4)),
		max(substr(e.ds_endereco, 1, 40)) ds_address,
		max(substr(e.DS_COMPLEMENTO, 1, 40))DS_ADDRESS_TWO_w,
		max(substr(e.DS_MUNICIPIO, 1, 40)) DS_LOCALITY_w, 
		max(e.nr_telefone) nr_sender_phone,
		max(clock_timestamp()) dt_lodgement,
		max(pkg_name_utils.get_person_name(d.nr_seq_person_name,1,'givenName')) nm_first,
        max(pkg_name_utils.get_person_name(d.nr_seq_person_name,1,'familyName')) nm_family,
      	max(d.dt_nascimento) dt_birth,
		max(b.cd_usuario_convenio)  cd_medicare_card,
		max(substr(b.cd_complemento, 1, 10))  nr_patient_num,
		max(clock_timestamp()) nr_time_lod,
		max(CASE WHEN c.ie_tipo_atendimento='1' THEN  'Y'  ELSE 'N' END ) ie_tipo_atendimento,
		max(a.dt_periodo_inicial)
INTO STRICT    nr_account_w,
	nr_postcode_w,
	ds_address_one_w,
	ds_address_two_w,
	ds_locality_w,
	nr_sender_phone_w,
	dt_lodgement_w,
	nm_first_w,
	nm_family_w,
	dt_birth_w,
	cd_medicare_card_w,
	nr_patient_ref_w,
	nr_time_lod_w,
	ie_adm_type_w,
  dt_service_w
   
from  	conta_paciente a,
	atend_categoria_convenio b,
	atendimento_paciente c, 
	pessoa_fisica d,
	compl_pessoa_fisica e,
	convenio f
where 	a.nr_interno_conta = coalesce(nr_seq_account_p,nr_interno_conta_p)
and   	b.nr_atendimento   = a.nr_atendimento
and   	b.cd_convenio 	 = f.cd_convenio
and   	c.nr_atendimento   = b.nr_atendimento
and   	c.cd_pessoa_fisica = d.cd_pessoa_fisica
and   	d.cd_pessoa_fisica = e.cd_pessoa_fisica  LIMIT 1;

--Clamaint details 
select
	max(pkg_name_utils.get_person_name(d2.nr_seq_person_name,cd_estabelecimento_p,'familyName')) nm_family,
	max(pkg_name_utils.get_person_name(d2.nr_seq_person_name,cd_estabelecimento_p,'givenName')) nm_first,
	max(d2.dt_nascimento) dt_birth,
	max(e2.CD_USUARIO_CONVENIO) cd_med_card_num_w,
	max(substr(e2.CD_USUARIO_CONVENIO_TIT, 1, 1)) claimant_nr_patient_num_w ,
	max(substr(f.ds_endereco, 1, 40)) ds_address,
	max(substr(f.DS_COMPLEMENTO, 1, 40)) CLAIMANT_DS_ADDRESS_TWO_w,
	max(substr(f.DS_MUNICIPIO, 1, 40)) CLAIMANT_DS_LOCALITY_w, 
	max(substr(f.cd_cep, 1, 4)),  
	max('N') 
INTO STRICT     

	claimant_nm_family_w, 
	claimant_nm_first_w, 
	claimant_dt_birth_w, 
	cd_med_card_num_w,
	claimant_nr_patient_num_w,
	CLAIMANT_DS_ADDRESS_ONE_w,
	CLAIMANT_DS_ADDRESS_TWO_w,
	CLAIMANT_DS_LOCALITY_w,
	CLAIMANT_NR_POSTCODE_w,
	claimant_ie_authorised_w
from  	conta_paciente a,
	atendimento_paciente c, 
	pessoa_fisica d,
	PESSOA_TITULAR_CONVENIO e, 
	pessoa_fisica d2,
	PESSOA_TITULAR_CONVENIO e2,
	compl_pessoa_fisica f
where 	a.nr_interno_conta = coalesce(nr_seq_account_p,nr_interno_conta_p)
and   	c.nr_atendimento   = a.nr_atendimento
and   	c.cd_pessoa_fisica = d.cd_pessoa_fisica
and   	d.cd_pessoa_fisica = e.cd_pessoa_fisica
and     e.CD_PESSOA_TITULAR = d2.cd_pessoa_fisica
and     d2.cd_pessoa_fisica = e2.cd_pessoa_fisica
and     d2.cd_pessoa_fisica = f.cd_pessoa_fisica  LIMIT 1;

--ie_request_type_w
if (coalesce(claimant_ie_authorised_w::text, '') = '') then 
  claimant_ie_authorised_w := 'N';
end if;

select CASE WHEN max(IE_SERVICE_TYPE)=3 THEN 'D' WHEN max(IE_SERVICE_TYPE)=6 THEN 'P'  ELSE null END
into STRICT ie_request_type_w
from ECLIPSE_PARAMETERS;




/*  setting climant details to null */

--ds_address_one_w 	:= null;
--ds_address_two_w 	:= null;
--ds_locality_w 		:= null;
--nr_postcode_w 		:= null;
--nr_sender_phone_w 	:= null;
select	max(Lpad(substr(k.NR_PROVIDER, 1,8),8,'0')) 
into STRICT	cd_provider_w--,
	--	qt_distance_w
from   	conta_paciente b,
        medical_provider_number k
where  	b.nr_interno_conta = nr_seq_account_p
and     b.CD_RESPONSAVEL = k.cd_medico  LIMIT 1;

select	max(Lpad(substr(c.nr_provider, 1,8),8,'0')) cd_provider
into STRICT	cd_payee_provider_w
from	conta_paciente a,
	atendimento_paciente b ,
	medical_provider_number c
where	a.nr_interno_conta = nr_seq_account_p
and	b.nr_atendimento = a.nr_atendimento
and	c.cd_medico =  b.cd_medico_resp  LIMIT 1;

if (coalesce(cd_provider_w::text, '') = '') then
cd_provider_w := cd_payee_provider_w;

end if;


-------------------Voucher------------
select	max(a.dt_referencia),
        max((select max(Lpad(substr(k.nr_provider, 1,8),8,'0'))
		from 	medical_provider_number k
		where 	k.cd_medico = a.cd_medico )) as ref_provider_num,
        max(a.dt_validade),
        max(a.ie_type_code)
	--decode(ie_service_type_w , 'S' , null)
into STRICT 	dt_ref_req_w,  		---- ReferralIssueDate
		req_ref_provider_num_w,   	---- RequestingProviderNum
		dt_validate_w,		---- Validate date
		ie_referral_override_w  -- referral override indicator
		--ie_specialist_w	---- specialist type
from	atendimento_paciente_inf a,
        conta_paciente b
where 	b.nr_interno_conta = nr_seq_account_p
and	a.nr_atendimento = b.nr_atendimento;

select	 max(c.nr_seq_tipo_medico)
into STRICT	nr_seq_ext_doc_w
from 	conta_paciente a,
	atendimento_paciente b,
	pf_medico_externo c
where 	a.nr_interno_conta = nr_seq_account_p
and 	a.nr_atendimento = b.nr_atendimento
and 	b.cd_medico_resp = c.cd_medico;


if (coalesce(nr_seq_ext_doc_w::text, '') = '') then
--	ie_specialist_w := 'SP'; -- if type is not set then consider as general physician
  select max(cd_especialidade) 
  into STRICT ie_specialist_w  
  from conta_paciente a,
	atendimento_paciente b,
	medico_especialidade c
	where a.nr_interno_conta = nr_seq_account_p
	and a.nr_atendimento = b.nr_atendimento
	and c.cd_pessoa_fisica = b.cd_medico_resp;

  
else 
	select 	coalesce(max(m.ie_medico_familia) ,'SP')
	into STRICT	ie_specialist_w
	from 	tipo_medico_externo m
	where m.nr_sequencia = nr_seq_ext_doc_w;
end if;

select	CASE WHEN coalesce(ie_specialist_w::text, '') = '' THEN  'GP'   ELSE 'SP' END
into STRICT 	ie_specialist_w
;

if (ie_service_type_w = 'S') then
  cd_referring_w := req_ref_provider_num_w;
  dt_referral_w := dt_ref_req_w;
end if;

 if (ie_service_type_w = 'P') then

	cd_requesting_w := req_ref_provider_num_w;
	dt_request_w := dt_ref_req_w;
 end if;

select	CASE WHEN coalesce(ie_specialist_w::text, '') = '' THEN  'GP'  WHEN ie_specialist_w='S' THEN 'GP'  WHEN ie_specialist_w='N' THEN 'SP'  ELSE 'SP' END 
into STRICT 	ie_specialist_w
;


if ( ie_service_type_w = 'S' and (dt_referral_w IS NOT NULL AND dt_referral_w::text <> '') ) then

	/*
		if we set the value of ReferralOverrideTypeCde , value of ReferralPeriodTypeCde should be null;

	*/
	if (coalesce(dt_validate_w::text, '') = '') then
		ie_referral_period_w := 'I';  -- Indifinate
	elsif (pkg_date_utils.get_diffdate(dt_referral_w, dt_validate_w, 'MONTH') <= 3 and ie_specialist_w = 'SP') then
		ie_referral_period_w := 'S';
  	elsif (pkg_date_utils.get_diffdate(dt_referral_w, dt_validate_w, 'MONTH') <= 12 and ie_specialist_w = 'GP') then
		ie_referral_period_w := 'S';

  	elsif (pkg_date_utils.get_diffdate(dt_referral_w, dt_validate_w, 'MONTH') >= 3 and ie_specialist_w = 'SP') then
		ie_referral_period_w := 'N';

  	elsif (pkg_date_utils.get_diffdate(dt_referral_w, dt_validate_w, 'MONTH') >= 12 and ie_specialist_w = 'GP') then
		ie_referral_period_w := 'N';

  	end if;
end if;


 if (ie_referral_override_w IS NOT NULL AND ie_referral_override_w::text <> '') then
		cd_referring_w := null;
		dt_referral_w := null;
		cd_requesting_w :=null;
		dt_request_w :=null;
    ie_referral_period_w :=null;


  end if;

------------Service--------------
select	nr_atendimento
into STRICT	nr_atendimento_w
from	conta_paciente
where	nr_interno_conta = nr_seq_account_p;

--select	max(dt_coleta)
--into	dt_accession_w
--from	procedimento_paciente a ,
--	prescr_procedimento b
--where	a.nr_prescricao= b.nr_prescricao
--and	a.nr_sequencia_prescricao = b.nr_sequencia
--and	a.nr_interno_conta = nr_seq_account_p  	---DT_LAUDO
--and	rownum = 1;
select	max(cd_setor_externo)
into STRICT	cd_scp_w
from	setor_atendimento
where	cd_setor_atendimento =(SELECT max(cd_setor_atendimento)
from	procedimento_paciente
where	nr_atendimento = nr_atendimento_w); 	---CD_SETOR_EXTERNO
if (ie_service_type_w = 'P') then
	ie_duplicate_w := null;   	-- Hard coded to N;
end if;


select Lpad(cd_medicare_card_w,10,0)
into STRICT cd_medicare_card_w
;

--AfterCareOverrideInd
select	CASE WHEN max(b.ie_contato_alta)='S' THEN 'Y'   ELSE 'N' END
into STRICT	ie_aftercare_w
from	atendimento_paciente a, motivo_alta b, conta_paciente c
where	a.cd_motivo_alta = b.cd_motivo_alta
and	c.nr_atendimento = a.nr_atendimento
and    	c.nr_interno_conta = nr_seq_account_p;

-- Mandatory field validations
for r03 in c03 loop
begin

cd_attribute_w	:= r03.nm_atributo;
cd_field_name_w := r03.nm_eclipse_field;
	if (upper(cd_field_name_w) = upper('dateoflodgement') and (coalesce(dt_lodgement_w::text, '') = '' ) ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112318), nm_usuario_p); --provide date of lodgement
		error_flag_w := 'T';

	elsif (upper(cd_field_name_w) = upper('claimsubmissionauthorised') and (coalesce(claimant_ie_authorised_w::text, '') = '' ) ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112319), nm_usuario_p);  --provide claim submission authorised
		error_flag_w := 'T';

	elsif (upper(cd_field_name_w) = upper('dateofservice') and ( coalesce(dt_service_w::text, '') = '' ) ) then
 		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112320), nm_usuario_p); --provide date of service
		error_flag_w := 'T';

	elsif (dt_service_w < add_months( to_date(clock_timestamp()), -24 )  )then
 		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112320), nm_usuario_p);-------provide date of service
		error_flag_w := 'T';

	elsif (upper(cd_field_name_w) = upper('patientdateofbirth') and ( coalesce(dt_birth_w::text, '') = '' ) ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112321), nm_usuario_p); --patient data of birth
		error_flag_w := 'T';

	elsif ( upper(cd_field_name_w) = upper('patientfamilyname') and ( coalesce(nm_family_w::text, '') = '' ) ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112322), nm_usuario_p); --patient family name
		error_flag_w := 'T';

	elsif ( upper(cd_field_name_w) = upper('patientfirstname') and ( coalesce(nm_first_w::text, '') = '' ) ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1,Wheb_mensagem_pck.get_texto(1112323), nm_usuario_p); --patient first name
		error_flag_w := 'T';

	elsif ( upper(cd_field_name_w) = upper('patientmedicarecardnum') and (coalesce(cd_medicare_card_w::text, '') = '') ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112324), nm_usuario_p); --patientmedicarecardnum
		error_flag_w := 'T';

	elsif ( upper(cd_field_name_w) = upper('patientreferencenum') and ( coalesce(nr_patient_ref_w::text, '') = '' )  ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112325), nm_usuario_p); --patientreferencenum
		error_flag_w := 'T';

	elsif ( upper(cd_field_name_w) = upper('timeoflodgement') and ( coalesce(nr_time_lod_w::text, '') = '' ) ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112326), nm_usuario_p); --timeoflodgement
		error_flag_w := 'T';

	elsif ( upper(cd_field_name_w) = upper('servicingprovidernum') and (coalesce(cd_provider_w::text, '') = '' )   ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112327), nm_usuario_p); --servicingprovidernum
		error_flag_w := 'T';

	elsif ( upper(cd_field_name_w) = upper('AccountPaidInd') and (coalesce(ie_account_paid_w::text, '') = '' )   ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112327), nm_usuario_p); --servicingprovidernum
		error_flag_w := 'T';

	end if;

end;
end loop;
commit;
--  Conditional check validations
--ie_request_type_w := get_key_values('CD_ESPECIALIDADE',ie_request_type_w,'PCI', null);
if ((cd_medicare_card_w IS NOT NULL AND cd_medicare_card_w::text <> '') and (is_number(cd_medicare_card_w) <> 1)) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112324), nm_usuario_p); --patientmedicarecardnum
	error_flag_w := 'T';
end if;

if (ie_account_paid_w = 'Y' and (coalesce(nm_bank_account_w::text, '') = '' or coalesce(nr_bank_account_w::text, '') = '' or  coalesce(cd_bsb_w::text, '') = '' )) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112328), nm_usuario_p); --AccountPaidInd
        error_flag_w := 'T';
end if;

if ((ie_adm_type_w IS NOT NULL AND ie_adm_type_w::text <> '') and (ie_adm_type_w not in ('Y','N') )) then
  	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112329), nm_usuario_p); -- HospitalInd
        error_flag_w := 'T';
end if;

if (coalesce(nm_bank_account_w::text, '') = '' and ( (nr_bank_account_w IS NOT NULL AND nr_bank_account_w::text <> '') or  (cd_bsb_w IS NOT NULL AND cd_bsb_w::text <> '') )) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112330), nm_usuario_p); --BankAccountName
        error_flag_w := 'T';
end if;

if (coalesce(nr_bank_account_w::text, '') = '' and ( (nm_bank_account_w IS NOT NULL AND nm_bank_account_w::text <> '') or  (cd_bsb_w IS NOT NULL AND cd_bsb_w::text <> '') )) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112331), nm_usuario_p); --bankaccountnumber
        error_flag_w := 'T';
end if;

if (coalesce(cd_bsb_w::text, '') = '' and ( (nm_bank_account_w IS NOT NULL AND nm_bank_account_w::text <> '') or  (nr_bank_account_w IS NOT NULL AND nr_bank_account_w::text <> '') )) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112332), nm_usuario_p); --bankaccountname
        error_flag_w := 'T';
end if;

if((ds_address_one_w is  null) and ((ds_address_two_w IS NOT NULL AND ds_address_two_w::text <> '') or (ds_locality_w IS NOT NULL AND ds_locality_w::text <> '') or  (nr_postcode_w IS NOT NULL AND nr_postcode_w::text <> ''))) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112333), nm_usuario_p); --Adress One
       	error_flag_w := 'T';
end if;

if((ds_address_two_w IS NOT NULL AND ds_address_two_w::text <> '') and coalesce(ds_address_one_w::text, '') = '' ) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112333), nm_usuario_p); --adress two
        error_flag_w := 'T';
end if;

if ( coalesce(ds_locality_w::text, '') = ''  and ((ds_address_one_w IS NOT NULL AND ds_address_one_w::text <> '') or (ds_address_two_w IS NOT NULL AND ds_address_two_w::text <> '') or  (nr_postcode_w IS NOT NULL AND nr_postcode_w::text <> ''))) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112333), nm_usuario_p); --locality address
       	error_flag_w := 'T';
end if;


if((nr_postcode_w is  null) and ((ds_address_one_w IS NOT NULL AND ds_address_one_w::text <> '') or (ds_address_two_w IS NOT NULL AND ds_address_two_w::text <> '') or  (ds_locality_w IS NOT NULL AND ds_locality_w::text <> '') )) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112333), nm_usuario_p); --claimantaddresspostcode
       	error_flag_w := 'T';
end if;

if ((dt_referral_w IS NOT NULL AND dt_referral_w::text <> '') and ((cd_requesting_w IS NOT NULL AND cd_requesting_w::text <> '')  or (dt_request_w IS NOT NULL AND dt_request_w::text <> '') or (ie_referral_override_w IS NOT NULL AND ie_referral_override_w::text <> '') )) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112334), nm_usuario_p); --referralissuedate
	error_flag_w := 'T';
end if;

if (coalesce(ie_referral_period_w::text, '') = '' and ((cd_referring_w IS NOT NULL AND cd_referring_w::text <> '') or (dt_referral_w IS NOT NULL AND dt_referral_w::text <> '')  )) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112335), nm_usuario_p); --ReferralPeriodTypeCde
	error_flag_w := 'T';
end if;

if ((ie_referral_period_w IS NOT NULL AND ie_referral_period_w::text <> '') and (ie_referral_override_w in ('L','E','H') or ((cd_requesting_w IS NOT NULL AND cd_requesting_w::text <> '') or (ie_request_type_w IS NOT NULL AND ie_request_type_w::text <> '')  or (dt_request_w IS NOT NULL AND dt_request_w::text <> '') ))) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112335), nm_usuario_p); --ReferralPeriodTypeCde
	error_flag_w := 'T';
end if;

if((cd_referring_w IS NOT NULL AND cd_referring_w::text <> '') and( (cd_referring_w = cd_provider_w) or (cd_requesting_w IS NOT NULL AND cd_requesting_w::text <> '') or (ie_request_type_w IS NOT NULL AND ie_request_type_w::text <> '') or (dt_request_w IS NOT NULL AND dt_request_w::text <> '') or (ie_referral_override_w in ('H' ,'L','E')))) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112336), nm_usuario_p); --referringprovidernum
	error_flag_w := 'T';
end if;

if (ie_service_type_w <> 'O' and coalesce(cd_requesting_w::text, '') = '' and ((ie_request_type_w IS NOT NULL AND ie_request_type_w::text <> '') or (dt_request_w IS NOT NULL AND dt_request_w::text <> ''))) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112337), nm_usuario_p); --requestingprovidernum
	error_flag_w := 'T';
end if;

if (ie_service_type_w <> 'O' and cd_requesting_w is not  null and ((cd_referring_w IS NOT NULL AND cd_referring_w::text <> '') or (dt_referral_w IS NOT NULL AND dt_referral_w::text <> '') or (ie_referral_period_w IS NOT NULL AND ie_referral_period_w::text <> '') or (ie_referral_override_w IS NOT NULL AND ie_referral_override_w::text <> ''))) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112337), nm_usuario_p); --requestingprovidernum
	error_flag_w := 'T';
end if;

if (coalesce(dt_request_w::text, '') = '' and ((cd_requesting_w IS NOT NULL AND cd_requesting_w::text <> '') or (ie_request_type_w IS NOT NULL AND ie_request_type_w::text <> '')) and ie_service_type_w <> 'O') then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112338), nm_usuario_p); --requestissuedate
	error_flag_w := 'T';
end if;

if ( ie_service_type_w <> 'O' and (dt_request_w IS NOT NULL AND dt_request_w::text <> '') and ((cd_referring_w IS NOT NULL AND cd_referring_w::text <> '') or (ie_referral_period_w IS NOT NULL AND ie_referral_period_w::text <> '') or (dt_referral_w IS NOT NULL AND dt_referral_w::text <> '') or (dt_request_w > dt_service_w))) then
  CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112338), nm_usuario_p); --requestissuedate
	error_flag_w := 'T';
end if;

if ((ie_request_type_w IS NOT NULL AND ie_request_type_w::text <> '') and ((cd_referring_w IS NOT NULL AND cd_referring_w::text <> '') or (ie_referral_period_w IS NOT NULL AND ie_referral_period_w::text <> '') or (dt_referral_w IS NOT NULL AND dt_referral_w::text <> '') or (dt_request_w > dt_service_w))) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112339), nm_usuario_p); --RequestTypeCde
	error_flag_w := 'T';
end if;

if ((cd_scp_w IS NOT NULL AND cd_scp_w::text <> '') and (length(cd_scp_w) < 3 or length(cd_scp_w) > 5 )) then
	CALL generate_inco_eclipse(nr_seq_account_p , 1,Wheb_mensagem_pck.get_texto(1112340), nm_usuario_p); --SCPId
	error_flag_w := 'T';
end if;


for r01 in c01 loop
begin

is_found_record :=1;

	select	cd_procedimento_loc
	into STRICT   	cd_mbs_code_w
	from   	procedimento
	where  	cd_procedimento = r01.cd_procedimento
	and 	ie_origem_proced = r01.ie_origem_proced;


  --dt_accession_w := r01.DT_INICIO_PROCEDIMENTO;
if (ie_service_type_w ='P' or ie_s4b3_w ='Y') then
	dt_accession_w := r01.DT_INICIO_PROCEDIMENTO;
end if;
	if (coalesce(cd_mbs_code_w::text, '') = '' ) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112341), nm_usuario_p);
		error_flag_w := 'T';
	end if;

	if((dt_accession_w IS NOT NULL AND dt_accession_w::text <> '') and (ie_service_type_w = 'P') and ((dt_accession_w < dt_birth_w) or (dt_accession_w > clock_timestamp()) or (dt_accession_w < dt_request_w))) then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112342), nm_usuario_p);  -- AccessionDateTime
		error_flag_w := 'T';
	end if;

	if ((dt_accession_w IS NOT NULL AND dt_accession_w::text <> '') and (ie_service_type_w = 'P') and (dt_accession_w > clock_timestamp()))	then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112342), nm_usuario_p);
		error_flag_w := 'T';
	end if;

	if((dt_accession_w IS NOT NULL AND dt_accession_w::text <> '') and (ie_service_type_w = 'P') and (dt_accession_w < dt_birth_w))	then
		CALL generate_inco_eclipse(nr_seq_account_p , 1, Wheb_mensagem_pck.get_texto(1112342), nm_usuario_p);
		error_flag_w := 'T';
	end if;

end;
end loop;
if (coalesce(error_flag_w::text, '') = '' and ie_validation_P = 'F') then

insert into pci_claim(nr_sequencia,
			ie_account_paid ,
			dt_atualizacao  ,
			nm_usuario   ,
			dt_atualizacao_nrec ,
			nm_usuario_nrec  ,
			nr_account     ,
			nm_bank_account  ,
			nr_bank_account  ,
			cd_bsb   ,
			ds_address_one   ,
			ds_address_two  ,
			ds_locality    ,
			nr_postcode  ,
			dt_birth    ,
			nm_family    ,
			nm_first     ,
			cd_medicare_card  ,
			nr_patient_num    ,
			nr_sender_phone    ,
			ie_authorised    ,
			dt_lodgement        ,
			claimant_dt_birth   ,
			claimant_nm_family   ,
			claimant_nm_first      ,
			claimant_cd_medicare_card    ,
			claimant_nr_patient_num ,
			claimant_ie_authorised  ,
			CLAIMANT_CD_MED_ISSUE_NUM,
			cd_payee_provider     ,
			nr_time_lod    ,
			cd_provider,
			ie_service_type,
			cd_med_card_issue_num,
		      CLAIMANT_DS_ADDRESS_ONE, 
		      CLAIMANT_DS_ADDRESS_TWO,
		      CLAIMANT_DS_LOCALITY,
		      CLAIMANT_NR_POSTCODE,
			cd_seq_transaction )
values (nr_claim_seq_w,
			ie_account_paid_w ,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_account_w     ,
			null, --nm_bank_account_w  ,
			null, --nr_bank_account_w  ,
			null, --cd_bsb_w   , 
			ds_address_one_w   ,
			ds_address_two_w  ,
			ds_locality_w    ,
			lpad(nr_postcode_w, 4, '0')   ,
			dt_birth_w      ,
			nm_family_w    ,
			nm_first_w     ,
			substr(cd_medicare_card_w , 1,9)  ,  -- storing 9 digits
			nr_patient_ref_w,  
			nr_sender_phone_w ,
			ie_authorised_w,
			dt_lodgement_w,
			claimant_dt_birth_w,--dt_birth_w,--null,                 --claimant_dt_birth
			claimant_nm_family_w,--nm_family_w,--null,               --claimant_nm_family
			claimant_nm_first_w,--nm_first_w,--null,               --claimant_nm_first
			substr(cd_med_card_num_w , 1,9), --null,               --claimant_cd_medicare_card
			claimant_nr_patient_num_w ,
			claimant_ie_authorised_w, 
			substr(cd_med_card_num_w,10,1),
			cd_payee_provider_w,
			dt_lodgement_w    ,
			cd_provider_w,
			ie_service_type_w,
			substr(cd_medicare_card_w,10,1),
			CLAIMANT_DS_ADDRESS_ONE_w, 
			CLAIMANT_DS_ADDRESS_TWO_w, 
			CLAIMANT_DS_LOCALITY_w,
			lpad(CLAIMANT_NR_POSTCODE_w, 4, '0'),
			cd_transaction_id);

--	ie_restrictive_w := check_seprate_site(nr_sequencia,nr_seq_account_p,r01.cd_procedimento,r01.ie_origem_proced);
 
	cd_service_code_w := 0;
	nr_voucher_count_w := 0;

for r01 in c01 loop
begin

if (coalesce(voucher_date_w::text, '') = '' or (TO_CHAR( voucher_date_w, 'YYYY-MM-DD' ) <> TO_CHAR( r01.DT_PROCEDIMENTO, 'YYYY-MM-DD' ))) then
		new_voucher_ind_w := 1;
		voucher_date_w := r01.DT_PROCEDIMENTO;
	if (coalesce(r01.DT_PROCEDIMENTO::text, '') = '') then
		voucher_date_w := dt_service_w;
	end if;
	end if;
  
  	if (new_voucher_ind_w <> 1) then
				If (r01.cd_medico_resp IS NOT NULL AND r01.cd_medico_resp::text <> '' AND  r01.cd_medico_resp <> cd_provider_w ) THEN
				curr_cd_medico_resp_w :=r01.cd_medico_resp;
				new_voucher_ind_w := 1;

			ELSIF ( coalesce(r01.cd_medico_resp::text, '') = '' ) THEN
				if (curr_cd_medico_resp_w <> cd_provider_w) then
        				curr_cd_medico_resp_w := cd_provider_w;
				end if;

			END IF;

    
	end if;

IF( ( MOD(cd_service_code_w, 14) = 0 and cd_service_code_w <> 0 ) OR new_voucher_ind_w = 1  or ie_selfdeemed_w = 'SD') THEN
	new_voucher_ind_w := 0;
	nr_voucher_count_w := nr_voucher_count_w + 1;
    if (nr_voucher_count_w > 80) then
    	CALL wheb_mensagem_pck.exibir_mensagem_abort('Too many services are added in one claim - more than 80 vouchers are not allowed in one claim please split the claims');
end if;


cd_referring_tw := cd_referring_w;
dt_referral_tw := dt_referral_w;
cd_requesting_tw := cd_requesting_w;
dt_request_tw :=dt_request_w;
ie_referral_period_tw :=ie_referral_period_w;

if ((ie_referral_override_w IS NOT NULL AND ie_referral_override_w::text <> '') or ie_selfdeemed_w ='SD' ) then 
		cd_referring_w := null;
    dt_referral_w := null;
		cd_requesting_w :=null;
		ie_referral_period_w := null;
    dt_request_w :=null;
else

cd_referring_w := cd_referring_tw;
dt_referral_w := dt_referral_tw;
cd_requesting_w := cd_requesting_tw;
dt_request_w :=dt_request_tw;
ie_referral_period_w :=ie_referral_period_tw;

end if;

if (coalesce(voucher_date_w::text, '') = '') then
  voucher_date_w := dt_service_w;
end if;

select 	Lpad(nr_voucher_count_w, 2, '0')
		into STRICT  	 nr_voucher_w
		;

select  nextval('pci_voucher_seq')
into STRICT	nr_voucher_seq_w
;
insert into pci_voucher(nr_sequencia ,
			dt_atualizacao ,
			dt_service ,
			nm_usuario ,
			dt_atualizacao_nrec ,
			nm_usuario_nrec ,
			ie_referral_override ,
			dt_referral ,
			ie_referral_period,
			cd_referring ,
			cd_requesting ,
			dt_request ,
			ie_request_type ,
			nr_time_service,
			nr_seq_claim,
			nr_voucher)
values (nr_voucher_seq_w,
			clock_timestamp(),
			voucher_date_w,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			ie_referral_override_w,
			dt_referral_w,
			ie_referral_period_w, 
			cd_referring_w,
			cd_requesting_w,
			dt_request_w,
			ie_request_type_w,
			voucher_date_w,
			nr_claim_seq_w,
			nr_voucher_w);

	END IF;

	
	select  max(CASE WHEN a.cd_setor_entrega=50 THEN 'SD'  WHEN a.cd_setor_entrega=37 THEN 'SS'  WHEN a.cd_setor_entrega=44 THEN 'SN'  END )  ,     	--selfdeemed
		max(CASE WHEN a.ie_aprovacao_execucao='S' THEN 'Y' END ) , 	-- Rule 3 excemption
		max(CASE WHEN a.ie_urgencia='S' THEN  'Y' END ), 			-- rule s4b3,
		max(CASE WHEN coalesce(a.nr_seq_topografia::text, '') = '' THEN 'N'  ELSE 'Y' END ),
		max(CASE WHEN a.IE_EXECUTAR_LEITO='S' THEN 'Y'  END ),
		max(a.qt_procedimento),
		max(a.DS_DADO_CLINICO),
		max(CASE WHEN coalesce(a.NR_CONTROLE_EXT::text, '') = '' THEN  'Y' WHEN a.NR_CONTROLE_EXT=1 THEN  'N'  ELSE 'Y' END )
	into STRICT	ie_selfdeemed_w,
		ie_rule_w,
		ie_s4b3_w,
		ie_multiple_procedure_w, 
		ie_duplicate_w,
		qt_procedure_count_w,
		cd_equipamento_w,
		ie_hospital_w
	from	prescr_procedimento a ,
		prescr_medica b ,
		atendimento_paciente c ,
		conta_paciente d

	where	d.nr_interno_conta = nr_seq_account_p   -- :conta_pat
	and  	a.cd_procedimento  = r01.cd_procedimento
	and   	d.nr_atendimento   = c.nr_atendimento
	and   	b.nr_atendimento   = c.nr_atendimento
	and   	b.nr_prescricao    = a.nr_prescricao;

 
	cd_service_code_w := cd_service_code_w + 1;
  dt_accession_w := r01.DT_INICIO_PROCEDIMENTO;
	select	max(substr(cd_procedimento_loc,1,5)),
		lpad(cd_service_code_w, 4, '0')
	into STRICT	cd_mbs_code_w,
		service_count_number
	from	procedimento
	where	cd_procedimento = r01.cd_procedimento
	and	ie_origem_proced = r01.ie_origem_proced;

ie_restrictive_w := check_seprate_site(nr_voucher_seq_w,nr_seq_account_p,r01.cd_procedimento,r01.ie_origem_proced);
	-- Validation rules for service level
	if ((ie_selfdeemed_w IS NOT NULL AND ie_selfdeemed_w::text <> '') and (ie_selfdeemed_w not in ('SD' , 'SS','NN'))) then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid selfdeemed code', nm_usuario_p);
	end if;

	if (ie_selfdeemed_w  = 'SD' and ((cd_referring_w IS NOT NULL AND cd_referring_w::text <> '') or  (cd_requesting_w IS NOT NULL AND cd_requesting_w::text <> ''))) then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid selfDeemed value', nm_usuario_p);
	end if;

	if (ie_selfdeemed_w  = 'SS' and ( (ie_referral_period_w IS NOT NULL AND ie_referral_period_w::text <> '') or (ie_referral_period_w IS NOT NULL AND ie_referral_period_w::text <> '') or (cd_medic_w IS NOT NULL AND cd_medic_w::text <> '') or (dt_referral_w IS NOT NULL AND dt_referral_w::text <> '') )) then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid selfDeemed value', nm_usuario_p);
	end if;

	if ((ie_rule_w IS NOT NULL AND ie_rule_w::text <> '') and (ie_rule_w not in ('Y' ,'N'))) then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid rule indication', nm_usuario_p);
	end if;

	if (ie_rule_w IS NOT NULL AND ie_rule_w::text <> '' AND ie_service_type_w <> 'P' ) then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid rule indication', nm_usuario_p);
	end if;

	if (ie_rule_w = 'Y' and coalesce(r01.qt_duracao::text, '') = '') then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid rule indication', nm_usuario_p);
	end if;

	if (ie_rule_w = 'Y' and ie_s4b3_w = 'Y') then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid rule indication', nm_usuario_p);
	end if;
	if ((ie_s4b3_w IS NOT NULL AND ie_s4b3_w::text <> '') and (ie_s4b3_w not in ('Y' ,'N'))) then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid S4b3ExemptInd', nm_usuario_p);
	end if;
	if (ie_s4b3_w IS NOT NULL AND ie_s4b3_w::text <> '' AND ie_s4b3_w <> 'P' ) then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid S4b3ExemptInd', nm_usuario_p);
	end if;

	if (ie_s4b3_w IS NOT NULL AND ie_s4b3_w::text <> '' AND ie_s4b3_w <> 'P' ) then
		CALL generate_inco_eclipse(nr_seq_account_p, 1, 'invalid S4b3ExemptInd', nm_usuario_p);
	end if;


      select max(coalesce((SUBSTR(r01.DS_OBSERVACAO, 24, 2))::numeric , 1))
      into STRICT qt_patients_w

      where upper(SUBSTR(r01.DS_OBSERVACAO , 1,23)) = upper('Number of patient seen ');

      	select	max(cd_imobilizado_ext)
	into STRICT	nr_lsp_w
	from	equipamento
	where	cd_equipamento = r01.cd_equipamento;

  --cd_equipamento_w := '00901';
  
select	nextval('pci_service_seq')
into STRICT	nr_service_seq_w
;
if (ie_service_type_w ='P' or ie_s4b3_w ='Y') then
	dt_accession_w := r01.DT_INICIO_PROCEDIMENTO;
end if;

if (LENGTH(r01.ds_observacao) > 50 ) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort('Service text is too long please curtail it to 50 characters and resend the claim' );

end if;
	insert into pci_service(nr_sequencia,
			dt_atualizacao, 		--sysdate,
			nm_usuario,     		--nm_usuario_p,
			dt_atualizacao_nrec,  		--sysdate,
			nm_usuario_nrec,    		--nm_usuario_p,
			dt_accession,   		--null,
			ie_aftercare,  			--ie_aftercare_w
			vl_charge,              	-- r01.vl_procedimento,
			dt_collection,   		--dt_collection,
			ie_duplicate,   		--'n'
			cd_equipament,   		--r01.cd_equipamento, 
			qt_service,     		--null,
			ie_hospital,        --'Y'
			cd_item ,      			--cd_mbs_code_w
			nr_lsp ,       			--null,
			ie_multiple,   			--'n'
			qt_patients,    		--null,
			vl_patient_contrib,      	--null,
			ie_restrictive,        		--ie_restrictive_w,
			ie_rule,              		--ie_rule_w
			ie_s4b3 ,              		--ie_s4b3_w
			cd_scp ,               		--cd_scp_w
			ie_selfdeemed ,        		--ie_selfdeemed_w
			ds_service ,           		--r01.ds_observacao
			nr_duration ,
			cd_service_id,
			nr_seq_voucher)      	--nr_voucher_seq_w
Values (nr_service_seq_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,  
			CASE WHEN ie_service_type_w='P' THEN r01.dt_final_procedimento  ELSE null END ,
			ie_aftercare_w,
			CASE WHEN coalesce(r01.vl_procedimento::text, '') = '' THEN null  ELSE (r01.vl_procedimento)::numeric *100 END ,
			CASE WHEN ie_service_type_w='P' THEN r01.dt_inicio_procedimento  ELSE null END ,
			ie_duplicate_w ,
			cd_equipamento_w,
			qt_procedure_count_w,--r01.QT_PROCEDIMENTO,
			null, --decode(ie_hospital_w, null, 'Y', ie_hospital_w), 
			cd_mbs_code_w,   
			nr_lsp_w, 
			ie_multiple_procedure_w  ,
			qt_patients_w,  
			CASE WHEN coalesce(r01.VL_CUSTO_OPERACIONAL::text, '') = '' THEN  null  ELSE r01.VL_CUSTO_OPERACIONAL*100 END  , 
			ie_restrictive_w,  
			ie_rule_w,
			ie_s4b3_w, 
			CASE WHEN ie_service_type_w ='P' THEN cd_scp_w  ELSE null END ,  --SCPId is required only in case of pathology
			ie_selfdeemed_w,
			substr(r01.ds_observacao,1,50), 
			CASE WHEN coalesce(qt_procedure_count_w::text, '') = '' THEN   rpad(pkg_date_utils.get_DiffDate(r01.dt_inicio_procedimento,r01.dt_final_procedimento ,'MINUTE'),3) WHEN qt_procedure_count_w=0 THEN  rpad(pkg_date_utils.get_DiffDate(r01.dt_inicio_procedimento,r01.dt_final_procedimento ,'MINUTE'),3)  ELSE null END ,
			service_count_number,
			nr_voucher_seq_w);
commit;
			cd_seq_transaction_p := cd_transaction_id;
end;
end loop;
if (is_found_record = 0) then
      CALL generate_inco_eclipse(nr_seq_account_p , 1,Wheb_mensagem_pck.get_texto(1130935), nm_usuario_p);
end if;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pci_claim_request ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_interno_conta_p bigint, nr_seq_account_p bigint, cd_seq_transaction_P INOUT text, ie_validation_P text default 'F') FROM PUBLIC;

