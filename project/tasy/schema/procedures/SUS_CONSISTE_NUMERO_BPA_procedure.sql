-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_numero_bpa ( nr_interno_conta_p bigint, nr_bpa_p text, nr_seq_bpa_p bigint, nm_usuario_p text, ie_tipo_consiste_p bigint, ds_erro_p INOUT text) AS $body$
DECLARE



cd_estabelecimento_w		smallint;
ds_detalhe_w			varchar(255)	:= '';
nr_aih_consiste13_w		bigint;
ds_digito_aih13_w		varchar(1);
ds_erro_w			varchar(255)   := '';
qt_digitos_bpa_w		integer	:= 0;
nr_atendimento_w		atendimento_paciente.nr_atendimento%type;
nr_atend_atual_w		atendimento_paciente.nr_atendimento%type;
cd_pessoa_fisica_w		atendimento_paciente.cd_pessoa_fisica%type;
cd_conv_sus_w			convenio.cd_convenio%type;
ie_consiste_pf_igual_w		varchar(15) := 'N';
cd_procedimento_w		procedimento.cd_procedimento%type;
cd_proced_atual_w		procedimento.cd_procedimento%type;
ds_texto_atend_w		varchar(100) := wheb_mensagem_pck.Get_texto(297915);
ds_texto_proc_w			varchar(100) := wheb_mensagem_pck.Get_texto(281195);
ds_texto_conta_w		varchar(100) := wheb_mensagem_pck.Get_texto(280625);
nr_doc_convenio_w		procedimento_paciente.nr_doc_convenio%type;
nr_interno_conta_w		procedimento_paciente.nr_interno_conta%type;


C01 CURSOR FOR
	SELECT	cd_procedimento,
		nr_doc_convenio
	from	procedimento_paciente a
	where	nr_interno_conta = nr_interno_conta_p
	and	coalesce(a.nr_doc_convenio,'0') <> '0'
	and	coalesce(a.cd_motivo_exc_conta::text, '') = '';


BEGIN

/* Obter dados da conta e do procedimento */

select	coalesce(max(cd_estabelecimento),1)
into STRICT	cd_estabelecimento_w
from	conta_Paciente
where	nr_interno_conta	= nr_interno_conta_p;

begin
select	coalesce(qt_digitos_bpa,0)
into STRICT	qt_digitos_bpa_w
from	sus_parametros_bpa
where	cd_estabelecimento	= cd_estabelecimento_w;
exception
	when others then
	qt_digitos_bpa_w	:= 0;
end;

cd_conv_sus_w		:= obter_dados_param_faturamento(cd_estabelecimento_w,'CSUS');
ie_consiste_pf_igual_w 	:= coalesce(Obter_valor_param_usuario(1125,107, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');

/* 4 - Número da BPA inválido */

if (Sus_Obter_Inco_Ativa(71)) and (nr_bpa_p IS NOT NULL AND nr_bpa_p::text <> '') and (qt_digitos_bpa_w <> 0) and (length(nr_bpa_p) <> qt_digitos_bpa_w) then
	if (ie_tipo_consiste_p = 1) then
		--ds_detalhe_w	:= 'BPA: ' || nr_bpa_p || ' - ' || nr_seq_bpa_p;
		ds_detalhe_w	:= wheb_mensagem_pck.get_texto(299669, 'NR_BPA=' ||  nr_bpa_p || ';NR_SEQ_BPA=' || nr_seq_bpa_p);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 71, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	elsif (ie_tipo_consiste_p = 2) then
        	ds_erro_w	:= ds_erro_w || '71, ';
	end if;
end if;

if (sus_obter_inco_atv_conta(298,nr_interno_conta_p,null)) then
	begin

	begin
	select	nr_atendimento
	into STRICT	nr_atend_atual_w
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_p;
	exception
	when others then
		nr_atend_atual_w := 0;
	end;

	cd_pessoa_fisica_w := obter_pessoa_atendimento(nr_atendimento_w,'C');

	begin
	select	c.nr_atendimento,
		a.cd_procedimento
	into STRICT	nr_atendimento_w,
		cd_procedimento_w
	from    procedimento_paciente a,
		conta_paciente b,
		atendimento_paciente c
	where   a.nr_interno_conta = b.nr_interno_conta
	and     b.nr_atendimento = c.nr_atendimento
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	c.ie_tipo_atendimento <> 1
	and     a.nr_doc_convenio  = nr_bpa_p
	and     coalesce(a.nr_doc_convenio,'0') <> '0'
	and	b.cd_convenio_parametro = cd_conv_sus_w
	and     c.nr_atendimento <> nr_atend_atual_w
	and     ((c.cd_pessoa_fisica <> cd_pessoa_fisica_w) or (ie_consiste_pf_igual_w = 'S'))  LIMIT 1;
	exception
	when others then
		nr_atendimento_w	:= 0;
		cd_procedimento_w	:= 0;
	end;

	if (coalesce(nr_atendimento_w,0) = 0) then
		begin

		open C01;
		loop
		fetch C01 into
			cd_proced_atual_w,
			nr_doc_convenio_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			begin
			select	c.nr_atendimento,
				a.cd_procedimento,
				b.nr_interno_conta
			into STRICT	nr_atendimento_w,
				cd_procedimento_w,
				nr_interno_conta_w
			from    procedimento_paciente a,
				conta_paciente b,
				atendimento_paciente c
			where   a.nr_interno_conta = b.nr_interno_conta
			and     b.nr_atendimento = c.nr_atendimento
			and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
			and	b.nr_interno_conta = nr_interno_conta_p
			and	a.cd_procedimento <> cd_proced_atual_w
			and     a.nr_doc_convenio  = nr_doc_convenio_w
			and     coalesce(a.nr_doc_convenio,'0') <> '0'
			and	b.cd_convenio_parametro = cd_conv_sus_w
			and     c.nr_atendimento = nr_atend_atual_w  LIMIT 1;
			exception
			when others then
				begin
				select	c.nr_atendimento,
					a.cd_procedimento,
					b.nr_interno_conta
				into STRICT	nr_atendimento_w,
					cd_procedimento_w,
					nr_interno_conta_w
				from    procedimento_paciente a,
					conta_paciente b,
					atendimento_paciente c
				where   a.nr_interno_conta = b.nr_interno_conta
				and     b.nr_atendimento = c.nr_atendimento
				and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
				and	b.nr_interno_conta <> nr_interno_conta_p
				and     a.nr_doc_convenio  = nr_doc_convenio_w
				and     coalesce(a.nr_doc_convenio,'0') <> '0'
				and	b.cd_convenio_parametro = cd_conv_sus_w
				and     c.nr_atendimento = nr_atend_atual_w  LIMIT 1;
				exception
				when others then
					nr_atendimento_w	:= 0;
					cd_procedimento_w	:= 0;
				end;
			end;

			if (coalesce(nr_atendimento_w,0) = 0) then
				begin

				begin
				select	c.nr_atendimento,
					b.nr_interno_conta,
					a.cd_procedimento
				into STRICT	nr_atendimento_w,
					nr_interno_conta_w,
					cd_procedimento_w
				from    procedimento_paciente a,
					conta_paciente b,
					atendimento_paciente c
				where   a.nr_interno_conta = b.nr_interno_conta
				and     b.nr_atendimento = c.nr_atendimento
				and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
				and	c.ie_tipo_atendimento <> 1
				and     a.nr_doc_convenio  = nr_doc_convenio_w
				and     coalesce(a.nr_doc_convenio,'0') <> '0'
				and	b.cd_convenio_parametro = cd_conv_sus_w
				and     c.nr_atendimento <> nr_atend_atual_w
				and     ((c.cd_pessoa_fisica <> cd_pessoa_fisica_w) or (ie_consiste_pf_igual_w = 'S'))  LIMIT 1;
				exception
				when others then
					nr_atendimento_w	:= 0;
					cd_procedimento_w	:= 0;
				end;

				end;
			end if;

			end;
		end loop;
		close C01;

		end;
	else
		begin
		select	a.cd_procedimento
		into STRICT	cd_proced_atual_w
		from	procedimento_paciente a
		where	a.nr_interno_conta = nr_interno_conta_p
		and     a.nr_doc_convenio  = nr_bpa_p;
		end;
	end if;


	if (coalesce(nr_atendimento_w,0) > 0) then
		begin
		if (ie_tipo_consiste_p = 1) then
			ds_detalhe_w	:= substr(ds_texto_atend_w || nr_atendimento_w ||','|| ds_texto_conta_w || nr_interno_conta_w || ',' || ds_texto_proc_w || cd_procedimento_w || ',' || ds_texto_proc_w || cd_proced_atual_w,1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 298, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		elsif (ie_tipo_consiste_p = 2) then
			ds_erro_w	:= ds_erro_w || '298, ';
		end if;
		end;
	end if;

	end;
end if;

ds_erro_p	:= ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_numero_bpa ( nr_interno_conta_p bigint, nr_bpa_p text, nr_seq_bpa_p bigint, nm_usuario_p text, ie_tipo_consiste_p bigint, ds_erro_p INOUT text) FROM PUBLIC;

