-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE suspender_etapa_solucao ( ie_tipo_solucao_p bigint, nr_prescricao_p bigint, nr_seq_solucao_p bigint, nr_seq_motivo_p bigint, ie_evento_p bigint, ds_justificativa_p text, nm_usuario_p text, nr_seq_esquema_p bigint, nr_etapa_evento_p bigint, nr_etapas_suspender_p text, nr_etapas_erro_p INOUT text, nr_seq_dialise_p bigint default 0, cd_perfil_p bigint DEFAULT NULL, nr_seq_assinatura_p bigint default null, ie_solucao_evento_p text default 'S', ie_solucao_separada_p text default 'S', cd_item_p bigint default null) AS $body$
DECLARE


dt_atualizacao_w	    timestamp := clock_timestamp();
qt_volume_etapa_w	    double precision;
nr_sequencia_w		    bigint;
ds_justificativa_w	    varchar(2000);
nr_etapas_suspender_w	varchar(1000);
tam_lista_w		        bigint;
nr_seq_evento_w		    bigint;
qt_volume_suspenso_W	double precision;
ie_pos_virgula_w	    smallint;
nr_etapa_evento_w	    prescr_mat_hor.nr_sequencia%type;
nr_etapas_suspensa_W	prescr_mat_hor.nr_sequencia%type;
ie_erro_w		        varchar(1);
nr_etapas_erro_w	    varchar(255) := null;
dt_horario_w		    timestamp;
ie_gerou_evento_w	    boolean;

ie_param716_w			varchar(1);
ie_tipo_item_cpoe_w		varchar(5);
nr_atendimento_w		bigint;
nr_seq_item_cpoe_w		cpoe_material.nr_sequencia%type;

nr_prescricao_w     	prescr_medica.nr_prescricao%type;
nr_seq_solucao_w    	prescr_mat_hor.nr_seq_solucao%type;
nr_etapa_ref_w      	smallint;



BEGIN

ie_gerou_evento_w := false;

CALL Gerar_log_prescricao(nr_prescricao_p, null, null, null, null,
				' SUSPENDER_ETAPA_SOLUCAO ie_tipo_solucao_p: ' || ie_tipo_solucao_p || ' nr_seq_solucao_p: ' || nr_seq_solucao_p ||
				' nr_seq_motivo_p: ' || nr_seq_motivo_p || ' ie_evento_p: ' || ie_evento_p || ' nm_usuario_p: ' || nm_usuario_p ||
				' nr_seq_esquema_p : ' || nr_seq_esquema_p || ' nr_etapa_evento_p: ' || nr_etapa_evento_p || ' nr_etapas_suspender_p :' || nr_etapas_suspender_p ||
				' nr_etapas_erro_p: ' || nr_etapas_erro_p || ' nr_seq_dialise_p: ' || nr_seq_dialise_p || ' cd_perfil_p: ' || cd_perfil_p ||
				' nr_seq_assinatura_p: ' || nr_seq_assinatura_p || ' ie_solucao_evento_p: ' || ie_solucao_evento_p,
				nm_usuario_p, null, wheb_usuario_pck.get_ie_commit);

if (ie_tipo_solucao_p IS NOT NULL AND ie_tipo_solucao_p::text <> '') and (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (nr_seq_solucao_p IS NOT NULL AND nr_seq_solucao_p::text <> '') and
	--(d2_justificativa_p is not null) and
	(nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

	begin	
		ds_justificativa_w	:= substr(ds_justificativa_p,1,255);
		nr_etapas_erro_w	:= nr_etapas_erro_p;

		if	((ie_tipo_solucao_p = 1) or (ie_tipo_solucao_p = 8)) then
			begin
				if (coalesce(nr_seq_esquema_p,0) > 0) then
					begin
						select	coalesce(max(qt_volume),0)
						into STRICT	qt_volume_etapa_w
						from	prescr_solucao_esquema
						where	nr_sequencia = nr_seq_esquema_p;
					end;
				elsif (nr_etapas_suspender_p IS NOT NULL AND nr_etapas_suspender_p::text <> '') then
					begin
						nr_etapas_suspender_w	:= nr_etapas_suspender_p;
						
						if (position(',' in nr_etapas_suspender_w) = 0) or (substr(nr_etapas_suspender_w, length(nr_etapas_suspender_w),1) <> ',') then
							nr_etapas_suspender_w := nr_etapas_suspender_w||',';
						end if;
						
						while(nr_etapas_suspender_w IS NOT NULL AND nr_etapas_suspender_w::text <> '') loop
							begin
							tam_lista_w		:= length(nr_etapas_suspender_w);
							ie_pos_virgula_w	:= position(',' in nr_etapas_suspender_w);
						
							if (ie_pos_virgula_w <> 0) then
								begin
								nr_etapa_evento_w	:= (substr(nr_etapas_suspender_w,1,(ie_pos_virgula_w - 1)))::numeric;
								nr_etapas_suspender_w	:= substr(nr_etapas_suspender_w,(ie_pos_virgula_w + 1),tam_lista_w);
								end;
							end if;	
							
							if (coalesce(nr_etapa_evento_w,0) > 0) then
								begin
								
								if (ie_solucao_separada_p <> 'S') then
									select  nr_prescricao,
											nr_seq_solucao,
											nr_etapa_sol
									into STRICT    nr_prescricao_w,
											nr_seq_solucao_w,
											nr_etapa_ref_w
									from    prescr_mat_hor
									where   nr_sequencia = nr_etapa_evento_w;
								else
									nr_prescricao_w := nr_prescricao_p;
									nr_seq_solucao_w := nr_seq_solucao_p;
									nr_etapa_ref_w := nr_etapa_evento_w;
								end if;
								
								nr_etapas_erro_p        => nr_etapas_erro_w := suspender_etapa_solucao(   ie_tipo_solucao_p	=> ie_tipo_solucao_p, nr_prescricao_p		=> nr_prescricao_w, nr_seq_solucao_p	=> nr_seq_solucao_w, nr_seq_motivo_p		=> nr_seq_motivo_p, ie_evento_p		=> ie_evento_p, ds_justificativa_p	=> ds_justificativa_w, nm_usuario_p		=> nm_usuario_p, nr_seq_esquema_p	=> nr_seq_esquema_p, nr_etapa_evento_p	=> nr_etapa_ref_w, nr_etapas_suspender_p	=> null, nr_etapas_erro_p        => nr_etapas_erro_w, nr_seq_dialise_p	=> 0, cd_perfil_p		=> cd_perfil_p, nr_seq_assinatura_p	=> nr_seq_assinatura_p);
								
								
								ie_erro_p   	=> ie_erro_w := atualizar_disp_solucao_susp(   nr_prescricao_p	=> nr_prescricao_w, nr_seq_solucao_p	=> nr_seq_solucao_w, nr_etapa_p		=> nr_etapa_ref_w, ie_acao_p		=> ie_evento_p, nm_usuario_p	=> nm_usuario_p, ie_erro_p   	=> ie_erro_w);
								
								if (ie_erro_w = 'S') then
									begin
									if (coalesce(nr_etapas_erro_w::text, '') = '') then
										begin
										nr_etapas_erro_w	:= nr_etapa_ref_w;
										end;
									else
										begin
										nr_etapas_erro_w	:= nr_etapas_erro_w || ', ' || nr_etapa_ref_w;
										end;
									end if;
									end;
								end if;
								
								if (nr_seq_dialise_p > 0) then
									select	nextval('hd_prescricao_evento_seq')
									into STRICT	nr_seq_evento_w
									;

									insert into hd_prescricao_evento(
										nr_sequencia,
										dt_atualizacao_nrec,
										nm_usuario_nrec,
										dt_atualizacao,
										nm_usuario,
										nr_prescricao,
										nr_seq_solucao,
										nr_etapa_evento,
										ie_evento,
										dt_evento,
										cd_pessoa_evento,
										dt_ciclo)
									values (
										nr_seq_evento_w,
										clock_timestamp(),
										nm_usuario_p,
										clock_timestamp(),
										nm_usuario_p,
										nr_prescricao_w,
										nr_seq_solucao_w,
										coalesce(nr_etapa_ref_w,1),
										'SE',
										clock_timestamp(),
										substr(obter_dados_usuario_opcao(nm_usuario_p,'C'),1,10),
										null);
										
										GET DIAGNOSTICS ie_gerou_evento_w = ROW_COUNT > 0;

									if (obter_se_fim_ctrl_irrig_dp(nr_prescricao_w,nr_seq_solucao_w, nm_usuario_p, cd_perfil_p) = 'S') then
										CALL encerrar_ctrl_irrig_dp(nr_prescricao_w, nr_seq_solucao_w, clock_timestamp(), nm_usuario_p);
									end if;							
										
								end if;
								
								end;
							end if;
							end;
						end loop;
					end;
				else
					begin
						select	coalesce(max(qt_volume),0)
						into STRICT	qt_volume_etapa_w
						from	prescr_solucao
						where	nr_prescricao = nr_prescricao_p
						and	nr_seq_solucao = nr_seq_solucao_p;
					end;
				end if;
					
				if (qt_volume_etapa_w > 0) then			
					if (coalesce(nr_etapa_evento_p::text, '') = '') then
						select	coalesce(min(nr_etapa_sol),0) --Obter a proxima/primeira etapa pendente
						into STRICT	nr_etapa_evento_w
						from	prescr_mat_hor b where		obter_se_horario_liberado(b.dt_lib_horario, b.dt_horario) = 'S'
						and		coalesce(b.ie_horario_especial,'N') = 'N'
						and		coalesce(b.dt_fim_horario::text, '') = ''
						and		coalesce(b.dt_suspensao::text, '') = ''
						and     coalesce(b.dt_inicio_horario::text, '') = ''
						and		b.nr_seq_solucao	= nr_seq_solucao_p
						and		b.nr_prescricao 	= nr_prescricao_p LIMIT 1;
					else
						nr_etapa_evento_w 	:= nr_etapa_evento_p;
					end if;
					
					if (coalesce(nr_etapa_evento_w,0) > 0) then
						select 	max(dt_horario)
						into STRICT	dt_horario_w
						from	prescr_mat_hor
						where	nr_prescricao = nr_prescricao_p
						and		nr_seq_solucao = nr_seq_solucao_p
						and		nr_etapa_sol = nr_etapa_evento_w;
						
						if (coalesce(ie_solucao_evento_p,'S')= 'S') then
							select	nextval('prescr_solucao_evento_seq')
							into STRICT	nr_sequencia_w
							;
							
							insert into prescr_solucao_evento(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_prescricao,
								nr_seq_solucao,
								nr_seq_material,
								nr_seq_procedimento,
								nr_seq_nut,
								nr_seq_nut_neo,
								ie_forma_infusao,
								ie_tipo_dosagem,
								qt_dosagem,
								qt_vol_infundido,
								qt_vol_desprezado,
								cd_pessoa_fisica,
								ie_alteracao,
								dt_alteracao,
								ie_evento_valido,
								nr_seq_motivo,
								ds_observacao,
								ie_tipo_solucao,
								nr_seq_esquema,
								nr_etapa_evento,
								nr_seq_assinatura,
								dt_horario)
							values (
								nr_sequencia_w,
								dt_atualizacao_w,
								nm_usuario_p,
								dt_atualizacao_w,
								nm_usuario_p,
								nr_prescricao_p,
								nr_seq_solucao_p,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								obter_dados_usuario_opcao(nm_usuario_p, 'C'),
								ie_evento_p,
								dt_atualizacao_w,
								'S',
								nr_seq_motivo_p,
								ds_justificativa_w,
								ie_tipo_solucao_p,
								nr_seq_esquema_p,
								nr_etapa_evento_w, 
								nr_seq_assinatura_p,
								dt_horario_w);
								
								GET DIAGNOSTICS ie_gerou_evento_w = ROW_COUNT > 0;
						end if;
						
						CALL atualizar_valor_susp_solucao(ie_tipo_solucao_p, nr_prescricao_p, nr_seq_solucao_p, qt_volume_etapa_w, 'S', nm_usuario_p);
						CALL atualizar_status_etapa_sol_pmh(nr_prescricao_p, nr_seq_solucao_p, nr_etapa_evento_w, nm_usuario_p);
						
					end if;
				end if;
			end;
		elsif (ie_tipo_solucao_p = 3) then
			begin
				select	coalesce(max(dividir(qt_vol_hemocomp,qt_procedimento)),0)
				into STRICT	qt_volume_etapa_w
				from	prescr_procedimento
				where	nr_prescricao = nr_prescricao_p
				and	nr_sequencia = nr_seq_solucao_p
				and	(nr_seq_solic_sangue IS NOT NULL AND nr_seq_solic_sangue::text <> '')
				and	(nr_seq_derivado IS NOT NULL AND nr_seq_derivado::text <> '');

				if (qt_volume_etapa_w = 0) then
					select	coalesce(max(qt_volume_fase),0)
					into STRICT	qt_volume_etapa_w
					from	prescr_solucao_evento
					where	ie_alteracao	= 1
					and	ie_tipo_solucao	= 3
					and	nr_prescricao	= nr_prescricao_p
					and	nr_seq_procedimento = nr_seq_solucao_p;
				end if;
				
						
				if (qt_volume_etapa_w > 0) then
					begin
						if (coalesce(ie_solucao_evento_p,'S') = 'S') then
						
						select	nextval('prescr_solucao_evento_seq')
						into STRICT	nr_sequencia_w
						;

						insert into prescr_solucao_evento(
							nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_prescricao,
							nr_seq_solucao,
							nr_seq_material,
							nr_seq_procedimento,
							nr_seq_nut,
							nr_seq_nut_neo,
							ie_forma_infusao,
							ie_tipo_dosagem,
							qt_dosagem,
							qt_vol_infundido,
							qt_vol_desprezado,
							cd_pessoa_fisica,
							ie_alteracao,
							dt_alteracao,
							ie_evento_valido,
							nr_seq_motivo,
							ds_observacao,
							ie_tipo_solucao,
							nr_seq_assinatura)
						values (
							nr_sequencia_w,
							dt_atualizacao_w,
							nm_usuario_p,
							dt_atualizacao_w,
							nm_usuario_p,
							nr_prescricao_p,
							null,
							null,
							nr_seq_solucao_p,
							null,
							null,
							null,
							null,
							null,
							null,
							null,
							obter_dados_usuario_opcao(nm_usuario_p, 'C'),
							ie_evento_p,
							dt_atualizacao_w,
							'S',
							nr_seq_motivo_p,
							ds_justificativa_w,
							ie_tipo_solucao_p,
							nr_seq_assinatura_p);
							
							GET DIAGNOSTICS ie_gerou_evento_w = ROW_COUNT > 0;
						end if;
						CALL atualizar_valor_susp_solucao(ie_tipo_solucao_p, nr_prescricao_p, nr_seq_solucao_p, qt_volume_etapa_w, 'S', nm_usuario_p);
					end;
				end if;
			end;
		end if;
	end;
	
	ie_param716_w := obter_param_usuario(1113, 716, obter_perfil_ativo, nm_usuario_p, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_param716_w);
	if (ie_param716_w <> 'N') then
		ie_tipo_item_cpoe_w := obter_tipo_solucao_adep(ie_tipo_solucao_p);
		nr_seq_item_cpoe_w := obter_nr_sequencia_cpoe(nr_seq_solucao_p, nr_prescricao_p, ie_tipo_item_cpoe_w);
		
		select
			max(nr_atendimento)
		into STRICT
			nr_atendimento_w
		from prescr_medica
		where nr_prescricao = nr_prescricao_p;

		CALL generate_nurse_ack('N',ie_tipo_item_cpoe_w, nr_atendimento_w, nr_seq_item_cpoe_w, cd_item_p);
	end if;
	
end if;
nr_etapas_erro_p	:= nr_etapas_erro_w;

if (ie_gerou_evento_w
    and   coalesce(obter_data_assinatura_digital(nr_seq_assinatura_p)::text, '') = ''
    and   ie_tipo_solucao_p = 1 ) then
        
        CALL adep_gerar_pend_prim_checagem(	nr_seq_projeto_p	=> 50892, --ADEP - Suspender Solucao
                                        nr_prescricao_p		=> nr_prescricao_p,
                                        ie_tipo_item_p		=> 'SOL',
                                        nr_etapa_adep_p     	=> nr_etapa_evento_w,
                                        nm_usuario_p		=> nm_usuario_p,
                                        nr_seq_item_adep_p	=> nr_seq_solucao_p);

end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE suspender_etapa_solucao ( ie_tipo_solucao_p bigint, nr_prescricao_p bigint, nr_seq_solucao_p bigint, nr_seq_motivo_p bigint, ie_evento_p bigint, ds_justificativa_p text, nm_usuario_p text, nr_seq_esquema_p bigint, nr_etapa_evento_p bigint, nr_etapas_suspender_p text, nr_etapas_erro_p INOUT text, nr_seq_dialise_p bigint default 0, cd_perfil_p bigint DEFAULT NULL, nr_seq_assinatura_p bigint default null, ie_solucao_evento_p text default 'S', ie_solucao_separada_p text default 'S', cd_item_p bigint default null) FROM PUBLIC;

