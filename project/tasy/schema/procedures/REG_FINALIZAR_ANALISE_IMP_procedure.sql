-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE reg_finalizar_analise_imp (nr_sequencia_p bigint) AS $body$
DECLARE


  ie_tipo_impacto_w man_ordem_serv_impacto.ie_tipo_impacto%type;
  sql_update_w      varchar(4000);

  c01 CURSOR FOR
    SELECT nr_sequencia, nr_product_requirement
      from man_ordem_serv_imp_pr
     where nr_seq_impacto = nr_sequencia_p
       and ie_impacto_requisito = 'A';

  c02 CURSOR(nr_sequencia_w  bigint) FOR
    SELECT p.nm_coluna, q.vl_resultado, q.ds_resultado, q.dt_resultado
      from man_os_imp_pr_quest q, pergunta p, man_ordem_serv_imp_pr pr
     where q.nr_seq_pergunta = p.nr_sequencia
       and q.nr_seq_imp_pr = pr.nr_sequencia
       and pr.nr_sequencia = nr_sequencia_w;

  c03 CURSOR FOR
    SELECT nr_sequencia, nr_customer_requirement
      from man_ordem_serv_imp_cr
     where nr_seq_impacto = nr_sequencia_p
       and ie_impacto_requisito = 'A';

  c04 CURSOR(nr_sequencia_w  bigint) FOR
    SELECT p.nm_coluna, q.vl_resultado, q.ds_resultado, q.dt_resultado
      from man_os_imp_cr_quest q, pergunta p, man_ordem_serv_imp_cr cr
     where q.nr_seq_pergunta = p.nr_sequencia
       and q.nr_seq_imp_cr = cr.nr_sequencia
       and cr.nr_sequencia = nr_sequencia_w;

  r01 c01%rowtype;
  r02 c02%rowtype;
  r03 c03%rowtype;
  r04 c04%rowtype;


BEGIN

  -- Adicionar as funcoes de PRS
  update reg_funcao_pr
     set ie_status_ccb = 'A'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AI';

  -- Deletar as funcoes de PRS
  update reg_funcao_pr
     set ie_status_ccb = 'I'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AE';

  -- Adicionar os escopos de PRS/URS
  update reg_escopo_product_req
     set ie_status_ccb = 'A'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AI';

  update reg_escopo_customer_req
     set ie_status_ccb = 'A'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AI';

  -- Deletar os escoposde PRS/URS
  update reg_escopo_product_req
     set ie_status_ccb = 'I'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AE';

  update reg_escopo_customer_req
     set ie_status_ccb = 'I'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AE';

  -- Adicionar as localizacoes de PRS/URS
  update reg_product_req_loc
     set ie_status_ccb = 'A'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AI';

  update reg_customer_req_loc
     set ie_status_ccb = 'A'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AI';

  -- Deletar as localizacoes de PRS/URS
  update reg_product_req_loc
     set ie_status_ccb = 'I'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AE';

  update reg_customer_req_loc
     set ie_status_ccb = 'I'
   where nr_seq_analise_impacto = nr_sequencia_p
     and ie_status_ccb = 'AE';

  -- Busca o tipo da analise de impacto (URS ou PRS)     
  select ie_tipo_impacto
    into STRICT ie_tipo_impacto_w
    from man_ordem_serv_impacto
   where nr_sequencia = nr_sequencia_p;

  if (ie_tipo_impacto_w = 'PRS') then

    for r01 in c01 loop
    
      for r02 in c02(r01.nr_sequencia) loop
      
        sql_update_w := 'update reg_product_requirement set nr_seq_analise_impacto = ' || nr_sequencia_p || ', ';

        if (r02.dt_resultado IS NOT NULL AND r02.dt_resultado::text <> '') then
          sql_update_w := sql_update_w || r02.nm_coluna || ' = to_date(''' ||
                          to_char(r02.dt_resultado, 'YYYY/MM/DD HH24:MI:SS') ||
                          ''', ''YYYY/MM/DD HH24:MI:SS''';
        elsif (r02.ds_resultado IS NOT NULL AND r02.ds_resultado::text <> '') then
          sql_update_w := sql_update_w || r02.nm_coluna || ' = ''' ||
                          r02.ds_resultado || '''';
        elsif (r02.vl_resultado IS NOT NULL AND r02.vl_resultado::text <> '') then
          sql_update_w := sql_update_w || r02.nm_coluna || ' = ' ||
                          r02.vl_resultado;
        end if;

        sql_update_w := sql_update_w || ' where nr_sequencia = ' ||
                        r01.nr_product_requirement;

        EXECUTE sql_update_w;

      end loop;

    end loop;

  elsif (ie_tipo_impacto_w = 'URS') then
  
    for r03 in c03 loop
    
      for r04 in c04(r03.nr_sequencia) loop
      
        sql_update_w := 'update reg_customer_requirement set nr_seq_analise_impacto = ' || nr_sequencia_p || ', ';

        if (r04.dt_resultado IS NOT NULL AND r04.dt_resultado::text <> '') then
          sql_update_w := sql_update_w || r04.nm_coluna || ' = to_date(''' ||
                          to_char(r04.dt_resultado, 'YYYY/MM/DD HH24:MI:SS') ||
                          ''', ''YYYY/MM/DD HH24:MI:SS''';
        elsif (r04.ds_resultado IS NOT NULL AND r04.ds_resultado::text <> '') then
          sql_update_w := sql_update_w || r04.nm_coluna || ' = ''' ||
                          r04.ds_resultado || '''';
        elsif (r04.vl_resultado IS NOT NULL AND r04.vl_resultado::text <> '') then
          sql_update_w := sql_update_w || r04.nm_coluna || ' = ' ||
                          r04.vl_resultado;
        end if;

        sql_update_w := sql_update_w || ' where nr_sequencia = ' ||
                        r03.nr_customer_requirement;

        EXECUTE sql_update_w;

      end loop;

    end loop;

  end if;

  commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE reg_finalizar_analise_imp (nr_sequencia_p bigint) FROM PUBLIC;

