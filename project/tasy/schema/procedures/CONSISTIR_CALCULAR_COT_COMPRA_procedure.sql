-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_calcular_cot_compra ( nr_cot_compra_p bigint, qt_fornecedor_p bigint, nm_usuario_p text, ie_tipo_consistencia_p bigint) AS $body$
DECLARE


/* ie_tipo_consistencia_p
0 - Antes do calculo
1 - Depois do calculo*/
qt_solic_urgente_w			bigint;
qt_existe_w				bigint;
ds_marca_w				varchar(30);
ds_marca_fornec_w			varchar(30);
nr_sequencia_w				bigint;
cd_material_w				integer;
nr_item_cot_compra_w			bigint;
cd_estabelecimento_w			integer;
ie_consiste_validade_anvisa_w		varchar(1);
ie_consiste_valid_marca_mat_w		varchar(1);
dt_validade_anvisa_marca_w		timestamp;
qt_validade_vencida_w			smallint;
pr_dif_valor_ultima_compra_w		smallint;
vl_ultima_compra_w			double precision;
vl_unitario_material_w			double precision;
vl_unit_mat_convertido_w		double precision;
vl_diferenca_w				double precision;
qt_conv_compra_estoque_w		double precision;
ds_material_w				varchar(255);
nr_seq_fornecedor_w			bigint;
ds_consistencia_w			varchar(2000);
ds_erro_w				varchar(2000);
qt_regra_w				integer;
ie_bloqueia_w				varchar(01);
qt_registro_w				bigint;
qt_fornecedor_w				bigint;
qt_exclusivo_w				bigint;
nr_minimo_cotacao_w			smallint;
ie_consiste_qt_fornec_w			varchar(1);
ie_pendente_compra_w			varchar(1);
qt_itens_pendentes_w			bigint;
nr_seq_motivo_cancel_w			bigint;
ie_consiste_contrato_w			varchar(1);
ie_com_contrato_w			varchar(1);
qt_existe_sem_contrato_w		bigint;
qt_dias_entrega_w			integer;
dt_limite_entrega_w			timestamp;
ie_forma_calc_entrega_w			varchar(1);
dt_entrega_ww				timestamp;
nr_solic_compra_w			bigint;
nr_item_solic_compra_w			bigint;
cd_cgc_fornecedor_w			varchar(14);
ie_exclusivo_w				varchar(1);
ie_tipo_w				varchar(1);
ie_qualificado_w			varchar(15);
qt_existe_param_compra_w		smallint;
pr_valor_simpro_w			smallint;
ie_bloqueia_simpro_w			varchar(1);
pr_valor_bras_w				smallint;
ie_bloqueia_bras_w			varchar(1);
vl_brasindice_w				double precision;
vl_simpro_w				double precision;
vl_unitario_material_consumo_w		double precision;
cd_unidade_medida_estoque_w		varchar(30);
ie_pfb_pmc_w				varchar(15);
ie_tipo_regra_w				smallint;
cd_tab_preco_mat_w			bigint;
cd_unidade_medida_compra_w		varchar(30);
vl_preco_regra_w			double precision;
ds_tab_preco_mat_w			varchar(200);
ie_consiste_proj_rec_w			varchar(1);
vl_unit_previsto_w			double precision;
vl_diferenca_permitida_w		double precision;
ie_consiste_doc_vencido_w		varchar(15);
qt_consiste_ca_w			bigint;
qt_conversao_w  			double precision;
cd_simpro_w 				bigint;
cd_mat_simpro_w				integer;
ie_situacao_w				varchar(1);
qt_consiste_anvisa_w			bigint;
cd_perfil_w				bigint;
ie_consiste_orcado_w			varchar(1);
ie_orcado_w				varchar(1);
qt_fornec_exige_w			bigint;
dt_validade_w				timestamp;
vl_parametro_w				bigint;
ie_qtd_projeto_w			varchar(1);
ie_material_projeto_w			varchar(1);
cd_material_cot_w			integer;
qt_material_cot_w			bigint;
ie_mat_proj_rec_w			varchar(1);
qt_mat_proj_rec_w			bigint;
cd_classe_material_w			bigint;
ie_consiste_regra_mat_w			varchar(1);
ie_consiste_permissao_compra_w		varchar(15);
ie_consiste_permissao_mat_w		varchar(1);
ie_vigente_anvisa_w  		material_estab.ie_vigente_anvisa%type;
ie_vigente_anvisa_marca_w	material_marca.ie_vigente_anvisa%type;
vl_max_purchase_w	rule_regulated_price.vl_max_purchase%type;
is_regulated_price_w	varchar(1);
pr_valor_tabela_preco_w		cot_regra_consist_calc.vl_parametro%type;
ie_bloqueia_tabela_preco_w	cot_regra_consist_calc.ie_bloqueia%type;
cd_tab_preco_consist_w		cot_regra_consist_calc.cd_tab_preco_mat%type;
vl_tabela_preco_w			double precision;

c01 CURSOR FOR
SELECT	a.cd_material,
	b.nr_item_cot_compra
from	material a,
	cot_compra_item b
where 	b.nr_cot_compra	= nr_cot_compra_p
and	a.cd_material	= b.cd_material
and	not exists (	SELECT	1
			from	material_estab c
			where	a.cd_material = c.cd_material
			and	c.cd_estabelecimento = cd_estabelecimento_w);

c02 CURSOR FOR
SELECT	a.cd_material,
	a.nr_item_cot_compra,
	e.cd_classe_material
from	cot_compra_item a,
	estrutura_material_v e
where 	a.cd_material = e.cd_material
and	a.nr_cot_compra = nr_cot_compra_p;

c03 CURSOR FOR
SELECT	dividir(a.vl_unitario_material, Obter_Dados_Material(c.cd_material, 'QCE')),
	a.vl_unitario_material,
	b.nr_sequencia,
	coalesce(b.qt_dias_entrega,0),
	dt_limite_entrega
from	cot_compra_item c,
	cot_compra_forn b,
	cot_compra_forn_item a
where	a.nr_cot_compra = nr_cot_compra_p
and	a.nr_item_cot_compra = nr_item_cot_compra_w
and	a.nr_seq_cot_forn = b.nr_sequencia
and	a.nr_cot_compra = c.nr_cot_compra
and	a.nr_item_cot_compra = c.nr_item_cot_compra
and	a.vl_unitario_material > 0
and	obter_Se_fornec_venc_cotacao(c.nr_cot_compra,a.nr_item_cot_compra,b.nr_sequencia) = 'S'
order by	substr(obter_nome_pf_pj(b.cd_pessoa_fisica, b.cd_cgc_fornecedor),1,80);

c04 CURSOR FOR
SELECT	nr_sequencia
from	cot_compra_forn_item
where	nr_cot_compra = nr_cot_compra_p;


c05 CURSOR FOR
SELECT	distinct
	nr_solic_compra
from (	SELECT	a.nr_solic_compra
	from	cot_compra_item a
	where	a.nr_cot_compra = nr_cot_compra_p
	and	(a.nr_solic_compra IS NOT NULL AND a.nr_solic_compra::text <> '')
	
union

	select	b.nr_solic_compra
	from	cot_compra_item a,
		cot_compra_solic_agrup b
	where	a.nr_cot_compra = b.nr_cot_compra
	and	a.nr_item_cot_compra = b.nr_item_cot_compra
	and	a.nr_cot_compra = nr_cot_compra_p
	and	(b.nr_solic_compra IS NOT NULL AND b.nr_solic_compra::text <> '')) alias2;

c06 CURSOR FOR
SELECT	distinct
	cd_cgc_fornecedor,
	ie_exclusivo,
	ie_tipo
from (
	SELECT	0 ie_tipo,
		cd_fornec_exclusivo cd_cgc_fornecedor,
		'S' ie_exclusivo
	from	solic_compra
	where	nr_solic_compra = nr_solic_compra_w
	and	(cd_fornec_exclusivo IS NOT NULL AND cd_fornec_exclusivo::text <> '')
	
union

	select	1 ie_tipo,
		cd_fornec_sugerido cd_cgc_fornecedor,
		'N' ie_exclusivo
	from	solic_compra
	where	nr_solic_compra = nr_solic_compra_w
	and	(cd_fornec_sugerido IS NOT NULL AND cd_fornec_sugerido::text <> '')
	and	coalesce(cd_fornec_exclusivo::text, '') = '') alias3
order by	ie_tipo;

c07 CURSOR FOR
SELECT	a.nr_item_cot_compra,
	a.cd_material,
	a.nr_seq_cot_forn,
	obter_se_mat_lib_fornec(a.cd_cgc_fornecedor,a.cd_material, a.cd_estabelecimento, 'C')
from    cot_compra_resumo_v a
where	a.nr_cot_compra = nr_cot_compra_p
and	coalesce(a.dt_liberacao::text, '') = ''
and	substr(obter_se_existe_cot_resumo(a.nr_cot_compra),1,1) = 'S'
and	substr(obter_se_mat_lib_fornec(a.cd_cgc_fornecedor,a.cd_material, a.cd_estabelecimento, 'C'),1,15) in ('L', 'N', 'V')
order 	by 4;

C08 CURSOR FOR
SELECT	obter_dados_simpro(a.cd_simpro,'PF'),
        qt_conversao,
        cd_simpro,
        cd_material
from	material_simpro a
where	a.cd_material = cd_material_w;

c09 CURSOR FOR
SELECT	a.nr_item_cot_compra,
	a.cd_material,
	a.nr_seq_cot_forn,
	a.cd_unidade_medida_compra,
	a.vl_unitario_material
from    cot_compra_resumo_v a
where	a.nr_cot_compra = nr_cot_compra_p
and	substr(obter_se_existe_cot_resumo(a.nr_cot_compra),1,1) = 'S';

c10 CURSOR FOR
SELECT	ie_tipo_regra,
	cd_tab_preco_mat,
	coalesce(ie_bloqueia,'N'),
	ie_pfb_pmc,
	substr(Obter_Desc_Tabela_Mat(cd_tab_preco_mat, cd_estabelecimento),1,200)
from	cot_regra_consist_calc
where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
and	cd_estabelecimento	= cd_estabelecimento_w
and	ie_tipo_regra 		in (10,11,12)
and	ie_tipo_consistencia_p = 1;

c11 CURSOR FOR
SELECT	cd_material,
	nr_item_cot_compra
from	cot_compra_item
where 	nr_cot_compra = nr_cot_compra_p
and	coalesce(nr_seq_proj_rec::text, '') = '';

c12 CURSOR FOR
SELECT	distinct
	nr_solic_compra,
	nr_item_solic_compra
from (	SELECT	a.nr_solic_compra,
		a.nr_item_solic_compra
	from	cot_compra_item a
	where	a.nr_cot_compra = nr_cot_compra_p
	and	a.nr_item_cot_compra = nr_item_cot_compra_w
	and	(a.nr_solic_compra IS NOT NULL AND a.nr_solic_compra::text <> '')
	
union

	select	b.nr_solic_compra,
		b.nr_item_solic_compra
	from	cot_compra_item a,
		cot_compra_solic_agrup b
	where	a.nr_cot_compra = b.nr_cot_compra
	and	a.nr_item_cot_compra = b.nr_item_cot_compra
	and	a.nr_cot_compra = nr_cot_compra_p
	and	a.nr_item_cot_compra = nr_item_cot_compra_w
	and	(b.nr_solic_compra IS NOT NULL AND b.nr_solic_compra::text <> '')) alias2;
	
c13 CURSOR FOR	
SELECT	distinct
	a.nr_seq_cot_forn
from    cot_compra_resumo_v a
where	a.nr_cot_compra = nr_cot_compra_p
and	obter_se_existe_cot_resumo(a.nr_cot_compra) = 'S'
and	obter_se_existe_doc_venc_cot(cd_cgc_fornecedor, nr_cot_compra) = 'S';

C14 CURSOR FOR
SELECT	nr_item_cot_compra,
	cd_material,
	qt_material,
	obter_se_item_proj_recurso(nr_seq_proj_rec,cd_material) ie_mat_proj_rec,
	obter_dados_item_proj_recurso(nr_seq_proj_rec,cd_material,'Q') qt_mat_proj_rec
from	cot_compra_item
where	nr_cot_compra = nr_cot_compra_p
and	(nr_seq_proj_rec IS NOT NULL AND nr_seq_proj_rec::text <> '');

BEGIN

delete	from cot_compra_consist_calc
where	nr_cot_compra = nr_cot_compra_p;

if (ie_tipo_consistencia_p = 0) then
	update	cot_compra
	set	ds_justif_divergencia = ''
	where	nr_cot_compra = nr_cot_compra_p;
end if;

select	cd_estabelecimento,
	nr_seq_motivo_cancel,
	ie_orcado
into STRICT	cd_estabelecimento_w,
	nr_seq_motivo_cancel_w,
	ie_orcado_w
from	cot_compra
where	nr_cot_compra = nr_cot_compra_p;

if (nr_seq_motivo_cancel_w IS NOT NULL AND nr_seq_motivo_cancel_w::text <> '') then
	ds_consistencia_w := 	substr(Wheb_mensagem_pck.get_Texto(298697),1,255); /*'Esta cotacao de compras esta cancelada, nao pode ser calculada.'*/
	CALL grava_consistencia_cotacao(nr_cot_compra_p,null,null,ds_consistencia_w,'S',nm_usuario_p);
end if;

cd_perfil_w := Obter_perfil_ativo;

select	coalesce(max(obter_valor_param_usuario(915,37,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,38,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,56,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,136,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,148,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),0),
	coalesce(max(obter_valor_param_usuario(915,48, cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,164,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,169,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,170,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,177,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N'),
	coalesce(max(obter_valor_param_usuario(915,178,cd_perfil_w,nm_usuario_p,cd_estabelecimento_w)),'N')
into STRICT	ie_consiste_qt_fornec_w,
	ie_pendente_compra_w,
	ie_consiste_contrato_w,
	ie_consiste_proj_rec_w,
	vl_diferenca_permitida_w,
	ie_consiste_doc_vencido_w,
	ie_consiste_orcado_w,
	ie_material_projeto_w,
	ie_qtd_projeto_w,
	ie_consiste_regra_mat_w,
	ie_consiste_permissao_compra_w
;

open C01;
loop
fetch C01 into
	cd_material_w,
	nr_item_cot_compra_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ds_consistencia_w := substr(Wheb_mensagem_pck.get_Texto(298699, 'CD_MATERIAL_W='||CD_MATERIAL_W),1,255); /*O material #@CD_MATERIAL_W#@ nao possui dados para o estabelecimento logado.Verifique o cadastro de materiais.*/
	CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
	end;
end loop;
close C01;


select	count(*)
into STRICT	qt_existe_param_compra_w
from	parametro_compras
where	cd_estabelecimento = cd_estabelecimento_w;

if (qt_existe_param_compra_w > 0) then
	select	coalesce(ie_consiste_validade_anvisa,'N'),
		coalesce(ie_consiste_validade_marca_mat,'N')
	into STRICT	ie_consiste_validade_anvisa_w,
		ie_consiste_valid_marca_mat_w
	from	parametro_compras
	where	cd_estabelecimento = cd_estabelecimento_w;
else
	/*(-20011,'Nao existe Parametro de Compras cadastrado no estabelecimento!');*/

	CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(184699);
end if;

select	count(*)
into STRICT	qt_fornecedor_w
from	cot_compra_forn
where	nr_cot_compra = nr_cot_compra_p;

select	count(*)
into STRICT	qt_exclusivo_w
from	cot_compra_forn
where	nr_cot_compra = nr_cot_compra_p
and	coalesce(ie_exclusivo,'N') = 'S';

if (coalesce(qt_exclusivo_w,0) > 0) and (coalesce(qt_fornecedor_w,0) > 1) then
	ds_consistencia_w :=	substr( Wheb_mensagem_pck.get_Texto(298703),1,255);
				/*A cotacao de compra possui um fornecedor exclusivo.
				Portanto so deve existir um unico fornecedor.*/
	CALL grava_consistencia_cotacao(nr_cot_compra_p,null,null,ds_consistencia_w,'S',nm_usuario_p);
end if;

if (coalesce(qt_exclusivo_w,0) > 1) then
	ds_consistencia_w :=	substr( Wheb_mensagem_pck.get_Texto(298704),1,255);
				/*A cotacao de compra nao pode ter mais de um fornecedor exclusivo.*/

	CALL grava_consistencia_cotacao(nr_cot_compra_p,null,null,ds_consistencia_w,'S',nm_usuario_p);
end if;

if (coalesce(qt_fornecedor_p,0) > 0) and (coalesce(qt_exclusivo_w,0) = 0) and (coalesce(qt_fornecedor_w,0) < coalesce(qt_fornecedor_p,0)) then
	ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298705, 'QT_FORNECEDOR_P='||QT_FORNECEDOR_P),1,255);
				/*A cotacao de compra exige no minimo #@QT_FORNECEDOR_P#@ fornecedores.
				Verifique o parametro [28] da funcao.*/
	CALL grava_consistencia_cotacao(nr_cot_compra_p,null,null,ds_consistencia_w,'S',nm_usuario_p);
end if;

if (ie_consiste_orcado_w = 'S') and (ie_orcado_w = 'N') then
	ds_consistencia_w :=	substr( Wheb_mensagem_pck.get_Texto(298706),1,255);
				/*A cotacao de compra nao passou pela analise do orcamento.
				Verifique o parametro [164] da funcao.*/
	CALL grava_consistencia_cotacao(nr_cot_compra_p,null,null,ds_consistencia_w,'S',nm_usuario_p);
end if;

open C14;
loop
fetch C14 into	
	nr_item_cot_compra_w,
	cd_material_cot_w,
	qt_material_cot_w,
	ie_mat_proj_rec_w,
	qt_mat_proj_rec_w;
EXIT WHEN NOT FOUND; /* apply on C14 */
	begin
	if (ie_material_projeto_w = 'S') and (ie_tipo_consistencia_p = 0) and (ie_mat_proj_rec_w = 'N') then
		ds_consistencia_w := 	substr(Wheb_mensagem_pck.get_Texto(298707, 'CD_MATERIAL_COT_W='||CD_MATERIAL_COT_W),1,255);
					/*O material #@CD_MATERIAL_COT_W#@ nao existe no projeto recurso vinculado.
					Verifique o parametro [169] da funcao.*/
		CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
	end if;
	
	if (ie_qtd_projeto_w = 'S') and (ie_tipo_consistencia_p = 0) and (qt_mat_proj_rec_w <> qt_material_cot_w) then
		ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298708, 'CD_MATERIAL_COT_W='||CD_MATERIAL_COT_W),1,255);
					/*A quantidade do material #@CD_MATERIAL_COT_W#@ esta diferente da quantidade do projeto recurso.
					Verifique o parametro [170] da funcao.*/
		CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
	end if;
	end;
end loop;
close C14;


select	count(*)
into STRICT	qt_regra_w
from	cot_regra_consist_calc
where	ie_situacao 		= 'A'
and	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_consiste_validade_anvisa_w = 'S') or (qt_regra_w > 0) then
	begin
	open c02;
	loop
	fetch c02 into
		cd_material_w,
		nr_item_cot_compra_w,
		cd_classe_material_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */

	/* Consiste se validade do registro da anvisa vencida*/

	if (ie_consiste_validade_anvisa_w = 'S') then

		select	count(*)
		into STRICT	qt_validade_vencida_w
		from	material_estab
		where	cd_material = cd_material_w
		and		cd_estabelecimento = cd_estabelecimento_w
		and		(dt_validade_reg_anvisa IS NOT NULL AND dt_validade_reg_anvisa::text <> '')
		and		dt_validade_reg_anvisa < clock_timestamp();
		
		select	max(coalesce(ie_vigente_anvisa,'N'))
		into STRICT 	ie_vigente_anvisa_w
		from	material_estab
		where	cd_material 		= cd_material_w
		and		cd_estabelecimento 	= cd_estabelecimento_w;
		
		if (qt_validade_vencida_w > 0) and (ie_vigente_anvisa_w = 'N') then
			ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298709, 'CD_MATERIAL_W='||CD_MATERIAL_W),1,255);
						/*O material #@CD_MATERIAL_W#@ esta com a validade do registro com Anvisa vencido.
						Verifique o cadastro de materiais.*/
			CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
		end if;
	end if;

	select	count(*),
		coalesce(max(ie_bloqueia),'N')
	into STRICT	qt_consiste_ca_w,
		ie_bloqueia_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_tipo_regra 		= 13
	and	ie_tipo_consistencia_p 	= 0
	and	not exists (SELECT	1
			from	material x
			where	x.cd_material = cd_material_w
			and	(nr_certificado_aprovacao IS NOT NULL AND nr_certificado_aprovacao::text <> '')
			and	dt_validade_certificado_aprov >= trunc(clock_timestamp()));

	if (qt_consiste_ca_w > 0) then
		begin

		ds_consistencia_w	:= substr(Wheb_mensagem_pck.get_Texto(298710, 'CD_MATERIAL_W='||CD_MATERIAL_W),1,255);
					/*O material #@CD_MATERIAL_W#@ nao possui ou esta com certificado de aprovacao vencido.*/

		CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);		

		end;
	end if;

	select	count(*),
			coalesce(max(ie_bloqueia),'N')
	into STRICT	qt_consiste_anvisa_w,
			ie_bloqueia_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and		cd_estabelecimento	= cd_estabelecimento_w
	and		ie_tipo_regra 		= 14
	and		ie_tipo_consistencia_p 	= 0
	and		not exists (SELECT	1
						from	material_estab x
						where	x.cd_material = cd_material_w
						and		x.cd_estabelecimento = cd_estabelecimento_w
						and		(x.nr_registro_anvisa IS NOT NULL AND x.nr_registro_anvisa::text <> '')
						and		((x.dt_validade_reg_anvisa >= trunc(clock_timestamp()))
						and (coalesce(x.ie_vigente_anvisa,'N') = 'N')));

	if (qt_consiste_anvisa_w > 0) then
		begin

		ds_consistencia_w	:= substr(Wheb_mensagem_pck.get_Texto(298711, 'CD_MATERIAL_W='||CD_MATERIAL_W),1,255);
						/*O material #@CD_MATERIAL_W#@ nao possui ou esta com registro na ANVISA vencido.*/

		CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);		

		end;
	end if;

	if (ie_consiste_qt_fornec_w = 'S') and (coalesce(qt_exclusivo_w,0) = 0) then

		select	count(*),
			coalesce(max(ie_bloqueia),'N')
		into STRICT	qt_regra_w,
			ie_bloqueia_w
		from	cot_regra_consist_calc
		where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
		and	cd_estabelecimento	= cd_estabelecimento_w
		and	ie_tipo_regra 		= 4;

		if (qt_regra_w > 0) then

			select	coalesce(max(nr_minimo_cotacao),1)
			into STRICT	nr_minimo_cotacao_w
			from	material_estab
			where	cd_material = cd_material_w
			and	cd_estabelecimento = cd_estabelecimento_w;


			select	count(*)
			into STRICT	qt_fornecedor_w
			from 	cot_compra_forn a
			where	exists (
				SELECT	1
				from	cot_compra_forn_item b
				where	a.nr_sequencia 	= b.nr_seq_cot_forn
				and	b.nr_cot_compra	= nr_cot_compra_p
				and	b.cd_material	= cd_material_w
				and	b.vl_unitario_material > 0);


			if (qt_fornecedor_w > 0) and (nr_minimo_cotacao_w > 1) and (qt_fornecedor_w < nr_minimo_cotacao_w) then
				ds_consistencia_w :=	substr(	WHEB_MENSAGEM_PCK.get_texto(298712,'CD_MATERIAL_W='||cd_material_w||';NR_MINIMO_COTACAO_W='||NR_MINIMO_COTACAO_W),1,255);
							/*O material #@CD_MATERIAL_W#@ exige no minimo #@NR_MINIMO_COTACAO_W#@ fornecedores com preco cotado, conforme campo Cotacoes (compra) do cadastro de materiais.
							Esta cotacao possui uma quantidade de fornecedores menor do que exige este material.*/
				CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
			end if;
		end if;		
	end if;

	if (ie_pendente_compra_w = 'S') then


		select	count(*)
		into STRICT	qt_itens_pendentes_w
		from	compra_pendente_v
		where	nr_documento <> nr_cot_compra_p
		and	nr_documento <> 0
		and	cd_material_estoque = cd_material_w;

		if (qt_itens_pendentes_w > 0) then
			ds_consistencia_w :=	substr(	Wheb_mensagem_pck.get_Texto(298713, 'CD_MATERIAL_W='||CD_MATERIAL_W),1,255);
						/*O material #@CD_MATERIAL_W#@ ainda possui compras pendentes de entrega.
						Voce nao tem permissao para gerar uma cotacao com itens pendentes. Verifique o parametro [38].*/
			CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
		end if;
	end if;

	select	coalesce(max((vl_parametro)::numeric ),0),
		coalesce(max(ie_bloqueia),'N')
	into STRICT	pr_dif_valor_ultima_compra_w,
		ie_bloqueia_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_tipo_regra 		= 1;

	select	coalesce(max((vl_parametro)::numeric ),0),
		coalesce(max(ie_bloqueia),'N')
	into STRICT	pr_valor_simpro_w,
		ie_bloqueia_simpro_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_tipo_regra 		= 8;

	select	coalesce(max((vl_parametro)::numeric ),0),
		coalesce(max(ie_bloqueia),'N')
	into STRICT	pr_valor_bras_w,
		ie_bloqueia_bras_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_tipo_regra 		= 9;
	
	select	coalesce(max((vl_parametro)::numeric ),0),
		coalesce(max(ie_bloqueia),'N'),
		max(cd_tab_preco_mat)
	into STRICT	pr_valor_tabela_preco_w,
		ie_bloqueia_tabela_preco_w,
		cd_tab_preco_consist_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_tipo_regra 		= 16;
	
	if (ie_tipo_consistencia_p = 1) then		
		
		open c03;
		loop
		fetch c03 into
			vl_unit_mat_convertido_w, /*Convertido para estoque*/
			vl_unitario_material_w, /*Sem conversao - E em unidade de compra*/
			nr_seq_fornecedor_w,
			qt_dias_entrega_w,
			dt_limite_entrega_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			
			/*Consiste valor ultima compra*/

			if (pr_dif_valor_ultima_compra_w > 0) then
				begin
				select	coalesce(obter_dados_ult_compra_data(cd_estabelecimento_w, cd_material_w, null, clock_timestamp(), 0, 'VU'), 0) /*E em unidade de compra*/
				into STRICT	vl_ultima_compra_w
				;

				if (vl_ultima_compra_w > 0) then
					vl_diferenca_w	:= dividir((vl_ultima_compra_w * pr_dif_valor_ultima_compra_w), 100);
					if	(vl_unitario_material_w > (vl_ultima_compra_w + vl_diferenca_w)) or
						(vl_unitario_material_w < (vl_ultima_compra_w - vl_diferenca_w)) then
						begin
						ds_consistencia_w	:= substr( Wheb_mensagem_pck.get_Texto(298714),1,255);
						/*A diferenca supera o percentual permitido entre o valor ultima compra.*/

						CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
						end;
					end if;
				end if;
				end;
			end if;

			/*Consiste valor Simpro*/

			if (pr_valor_simpro_w > 0) then
				begin
				open C08;
				loop
				fetch C08 into
					vl_simpro_w,
					qt_conversao_w,
					cd_simpro_w,
					cd_mat_simpro_w;
				exit when(C08%notfound or vl_simpro_w > 0);
				end loop;
				close C08;

				if (vl_simpro_w > 0) then
					begin
					qt_conv_compra_estoque_w := obter_dados_material(cd_material_w, 'QEC');
					vl_unitario_material_consumo_w := vl_unit_mat_convertido_w;
					vl_simpro_w := (vl_simpro_w * dividir(pr_valor_simpro_w, 100));
					
					if (qt_conversao_w <= qt_conv_compra_estoque_w) then
						vl_simpro_w := dividir(vl_simpro_w * obter_dados_simpro(cd_simpro_w, 'EM'), obter_dados_simpro(cd_simpro_w, 'FR'));
					end if;
					
					if (vl_unitario_material_consumo_w > vl_simpro_w) then
						begin
						ds_consistencia_w	:= substr(Wheb_mensagem_pck.get_Texto(298715, 'VL_SIMPRO_W='||campo_mascara_virgula(VL_SIMPRO_W)),1,255);
									/*O valor unitario do material supera o valor maximo permitido com relacao ao preco fabrica Simpro: #@VL_SIMPRO_W#@.*/

						CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_simpro_w,nm_usuario_p);
						end;
					end if;
					end;
				end if;
				end;
			end if;
			/*Consiste valor Brasindice*/

			if (pr_valor_bras_w > 0) then
			
				select	obter_menor_preco_brasindice(cd_Estabelecimento_w, cd_material_w, clock_timestamp(), 'C', ie_pfb_pmc_w) /*Ja convertido em unidade de consumo*/
				into STRICT	vl_brasindice_w
				;				
				
				if (vl_brasindice_w > 0) then
					cd_unidade_medida_estoque_w 	:= SUBSTR(obter_dados_material_estab(cd_material_w, cd_estabelecimento_w,'UME'),1,30);
					vl_unitario_material_consumo_w 	:= sup_obter_valor_convertido(cd_material_w, vl_unit_mat_convertido_w, cd_unidade_medida_estoque_w, 'UMC');
					vl_brasindice_w			:= (vl_brasindice_w * dividir(pr_valor_bras_w, 100));
					
					if (vl_unitario_material_consumo_w > vl_brasindice_w) then
						begin
						ds_consistencia_w	:= substr(Wheb_mensagem_pck.get_Texto(298716, 'VL_BRASINDICE_W='||campo_mascara_virgula(VL_BRASINDICE_W)),1,255);
									/*O valor unitario do material supera o valor maximo permitido com relacao ao preco Brasindice: #@VL_BRASINDICE_W#@.*/

						CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_bras_w,nm_usuario_p);
						end;			
					end if;
				end if;
			end if;
			/*Consiste valor Tabela Preco*/

			if (pr_valor_tabela_preco_w > 0) then
			
				select	coalesce(obter_preco_mat_tab_compras(cd_estabelecimento_w, cd_material_w, cd_tab_preco_consist_w, cd_unidade_medida_compra_w),0)
				into STRICT	vl_tabela_preco_w
				;			
				
				if (vl_tabela_preco_w > 0) then
					cd_unidade_medida_estoque_w 	:= SUBSTR(obter_dados_material_estab(cd_material_w, cd_estabelecimento_w,'UME'),1,30);
					vl_unitario_material_consumo_w 	:= sup_obter_valor_convertido(cd_material_w, vl_unit_mat_convertido_w, cd_unidade_medida_estoque_w, 'UMC');
					vl_tabela_preco_w			:= (vl_tabela_preco_w * dividir(pr_valor_tabela_preco_w, 100));
					
					if (vl_unitario_material_consumo_w > vl_tabela_preco_w) then
						ds_consistencia_w	:= substr(Wheb_mensagem_pck.get_Texto(1215209, 'CD_TAB_PRECO=' || CD_TAB_PRECO_CONSIST_W),1,255);
						CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_tabela_preco_w,nm_usuario_p);
					end if;
				end if;
			end if;
			
			select	count(*),
				coalesce(max(ie_bloqueia),'N')
			into STRICT	qt_regra_w,
				ie_bloqueia_w
			from	cot_regra_consist_calc
			where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
			and	cd_estabelecimento	= cd_estabelecimento_w
			and	ie_tipo_regra 		= 3;

			select	substr(coalesce(obter_valor_param_usuario(915, 67, Obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'L'),1,1)
			into STRICT	ie_forma_calc_entrega_w
			;

			if (ie_forma_calc_entrega_w = 'L') then
				dt_entrega_ww	:= trunc(dt_limite_entrega_w,'dd') + coalesce(qt_dias_entrega_w,0);
			else
				dt_entrega_ww	:= trunc(clock_timestamp(),'dd') + coalesce(qt_dias_entrega_w,0);
			end if;

			if (qt_regra_w > 0) and
				((trunc(dt_limite_entrega_w,'dd') + qt_dias_entrega_w) > trunc(dt_limite_entrega_w,'dd')) then
				begin
				ds_consistencia_w :=	substr(	WHEB_MENSAGEM_PCK.get_texto(298718,'DT_LIMITE_ENTREGA_W='||DT_LIMITE_ENTREGA_W||';DT_ENTREGA_WW='||DT_ENTREGA_WW),1,255);
							/*A data que o item sera entregue na ordem de compra e maior que a data limite estipulada.
							Foi estipulado dia: #@DT_LIMITE_ENTREGA_W#@ e sera entregue dia: #@DT_ENTREGA_WW#@.*/
				CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
				end;
			end if;

			end;
		end loop;
		close c03;
	end if;
	end loop;
	close c02;
	end;
end if;

open C04;
loop
fetch C04 into
	nr_sequencia_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin

	select	substr(coalesce(substr(b.ds_marca,1,CASE WHEN(position('(' in b.ds_marca)-1)=-1 THEN 255  ELSE (position('(' in b.ds_marca)-1) END ),'X'),1,30),
		coalesce(b.ds_marca_fornec,'X'),
		b.nr_seq_cot_forn,
		a.nr_item_cot_compra,
		b.cd_material,
		substr(obter_desc_material(b.cd_material),1,100),
		b.dt_validade
	into STRICT	ds_marca_w,
		ds_marca_fornec_w,
		nr_seq_fornecedor_w,
		nr_item_cot_compra_w,
		cd_material_w,
		ds_material_w,
		dt_validade_w
	from	cot_compra_forn_item b,
		cot_compra_item a
	where	a.nr_cot_compra = b.nr_cot_compra
	and	a.nr_item_cot_compra = b.nr_item_cot_compra
	and	nr_sequencia = nr_sequencia_w;

	if (ie_consiste_valid_marca_mat_w = 'S') then

		select	max(dt_validade_reg_anvisa),
				max(ie_vigente_anvisa)
		into STRICT	dt_validade_anvisa_marca_w,
				ie_vigente_anvisa_marca_w
		from	material_marca
		where	cd_material = cd_material_w
		and	elimina_acentuacao(elimina_caracteres_especiais(upper(obter_descricao_padrao('MARCA','DS_MARCA',nr_sequencia)))) = elimina_acentuacao(elimina_caracteres_especiais(upper(ds_marca_w)));

		if	((coalesce(ie_vigente_anvisa_marca_w,'X') = 'N') or (coalesce(dt_validade_anvisa_marca_w, clock_timestamp()) < trunc(clock_timestamp()))) then
			ds_consistencia_w :=	substr(	Wheb_mensagem_pck.get_Texto(298724),1,255);
						/*A validade da marca deste material esta vencida.
						Verifique na funcao Cadastro de Materiais, pasta Estoque > subpasta Marcas.	*/
			CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,'S',nm_usuario_p);
		end if;
	end if;
	


	select	count(*),
		coalesce(max(ie_bloqueia),'N')
	into STRICT	qt_regra_w,
		ie_bloqueia_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_tipo_regra 		= 2;

	if (qt_regra_w > 0) and (ds_marca_w <> 'X') and (ds_marca_fornec_w <> 'X') and (ds_marca_w <> ds_marca_fornec_w) then
		begin
		ds_consistencia_w :=	substr(	WHEB_MENSAGEM_PCK.get_texto(298729,'DS_MARCA_W='||DS_MARCA_W||';DS_MARCA_FORNEC_W='||DS_MARCA_FORNEC_W),1,255);
					/*O fornecedor cotou este material com uma marca diferente da marca estipulada pelo Hospital.
					Foi estipulado: #@DS_MARCA_W#@ e cotou com: #@DS_MARCA_FORNEC_W#@.*/
		CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
		end;
	end if;
	




	select	count(*),
		coalesce(max(ie_bloqueia),'N')
	into STRICT	qt_regra_w,
		ie_bloqueia_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_tipo_regra 		= 5;

	if (qt_regra_w > 0) and (ie_tipo_consistencia_p = 1) then

		select	count(*)
		into STRICT	qt_existe_w
		from	cot_compra_forn_item_tr_v a
		where	a.nr_cot_compra	= nr_cot_compra_p
		and	obter_se_cotacao_preco_igual(nr_sequencia_w) > 0
		and	coalesce(obter_dados_parametro_compras(cd_estabelecimento,10),'N') = 'N';

		if (qt_existe_w > 0) then
			begin
			ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298731),1,255);
						/*Ocorreu duplicacao de fornecedores vencedores para este item. Favor consultar na pasta Consulta, subpasta Precos iguais*/

			CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
			end;
		end if;
	end if;

	select	count(*)
	into STRICT	qt_existe_w
	from	cot_compra_forn_item_op
	where	nr_seq_cot_item_forn = nr_sequencia_w;

	if (qt_existe_w > 0) then
		begin

		select	vl_unitario_material
		into STRICT	vl_unitario_material_w
		from	cot_compra_forn_item
		where	nr_sequencia = nr_sequencia_w;

		select	count(*)
		into STRICT	qt_existe_w
		from	cot_compra_forn_item_op
		where	nr_seq_cot_item_forn = nr_sequencia_w
		and	vl_preco < vl_unitario_material_w;

		if (vl_unitario_material_w > 0) and (qt_existe_w > 0) then
			begin
			ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298732),1,255);
						/*'O fornecedor estipulou outras marcas com precos menores para este material. ' ||
						'Verifique na pasta Cotacao fornecedor > subpasta Marcas e precos. ' ||
						'Utilize a opcao mouse lado direito caso queira trocar a marca e o preco.*/
			CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,'N',nm_usuario_p);
			end;
		end if;
		end;
	end if;

	select	count(*),
		coalesce(max(ie_bloqueia),'N')
	into STRICT	qt_regra_w,
		ie_bloqueia_w
	from	cot_regra_consist_calc
	where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_tipo_regra 		= 6;

	if (qt_regra_w > 0) and (ie_tipo_consistencia_p = 1) then

		select	count(*)
		into STRICT	qt_existe_w
		from	cot_compra_forn_item
		where	cd_material = cd_material_w
		and	nr_seq_cot_forn = nr_seq_fornecedor_w;

		if (qt_existe_w > 1) then
			ds_consistencia_w :=	substr(	WHEB_MENSAGEM_PCK.get_texto(298733,'CD_MATERIAL_W='||cd_material_w||';DS_MATERIAL_W='||ds_material_w),1,255);
						/*O material #@CD_MATERIAL_W#@ - #@DS_MATERIAL_W#@, esta duplicado para o fornecedor citado acima.*/

			CALL grava_consistencia_cotacao(nr_cot_compra_p,null,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
		end if;
	end if;
	
	
	if (ie_tipo_consistencia_p = 0) and (dt_validade_w IS NOT NULL AND dt_validade_w::text <> '') then
		
		select	count(*),
			coalesce(max(ie_bloqueia),'N'),
			coalesce(max((vl_parametro)::numeric ),0)
		into STRICT	qt_regra_w,
			ie_bloqueia_w,
			vl_parametro_w
		from	cot_regra_consist_calc
		where	obter_se_consist_regra_mat(nr_sequencia, cd_material_w) = 'S'
		and	cd_estabelecimento	= cd_estabelecimento_w
		and	ie_tipo_regra 		= 15;
		
		if (qt_regra_w > 0) and
			((trunc(dt_validade_w,'dd') - trunc(clock_timestamp(),'dd')) < vl_parametro_w) then			
			ds_consistencia_w :=	substr(	WHEB_MENSAGEM_PCK.get_texto(298735,'CD_MATERIAL_W='||cd_material_w||';DS_MATERIAL_W='||ds_material_w),1,255);
						/*O material #@CD_MATERIAL_W#@ - #@DS_MATERIAL_W#@, esta com data de validade inferior ao limite permitido na regra "Consistencias ao calcular a cotacao".*/

			CALL grava_consistencia_cotacao(nr_cot_compra_p,null,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);

		end if;
	end if;
	
	if (ie_consiste_contrato_w = 'N') then
		begin
		open C02;
		loop
		fetch C02 into
			cd_material_w,
			nr_item_cot_compra_w,
			cd_classe_material_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			select	substr(obter_se_item_contrato(cd_material_w),1,1)
			into STRICT	ie_com_contrato_w
			;

			if (ie_com_contrato_w = 'S') then
				select	count(*)
				into STRICT	qt_existe_sem_contrato_w
				from	cot_compra_forn_item
				where	nr_cot_compra = nr_cot_compra_p
				and	nr_item_cot_compra = nr_item_cot_compra_w
				and	coalesce(nr_contrato::text, '') = '';

				if (qt_existe_sem_contrato_w > 0) then
					ds_consistencia_w :=	substr(	Wheb_mensagem_pck.get_Texto(298736) ,1,255);
									/*Para este material existe um contrato vigente, portanto, os fornecedores devem ser gerados ' ||
									'a partir da opcao Gerar itens pela regra do contrato. Deve ser desta forma para buscar o ' ||
									'fornecedor e o preco conforme definido no contrato.',1,255);*/
					CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,'S',nm_usuario_p);
				end if;
			end if;
			end;
		end loop;
		close C02;
		end;
	end if;
	end;
end loop;
close C04;

open C05;
loop
fetch C05 into
	nr_solic_compra_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin

	open C06;
	loop
	fetch C06 into
		cd_cgc_fornecedor_w,
		ie_exclusivo_w,
		ie_tipo_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin

		if (ie_exclusivo_w = 'S') then
			select	count(*)
			into STRICT	qt_existe_w
			from	cot_compra_forn
			where	cd_cgc_fornecedor	= cd_cgc_fornecedor_w
			and	nr_cot_compra		= nr_cot_compra_p;

			if (qt_existe_w = 0) then
				ds_consistencia_w :=	substr(	WHEB_MENSAGEM_PCK.get_texto(298737,'NR_SOLIC_COMPRA_W='||NR_SOLIC_COMPRA_W||';NM_FORNEC_W='||substr(obter_nome_pf_pj(null,cd_cgc_fornecedor_w),1,100)),1,255);
							/*A solicitacao de compras numero #@NR_SOLIC_COMPRA_W#@, que originou essa cotacao, tem um fornecedor exclusivo.
							Portanto, a cotacao e obrigada a ser cotada com aquele fornecedor.
							O fornecedor e #@NM_FORNEC_W#@.*/
				CALL grava_consistencia_cotacao(nr_cot_compra_p,null,null,ds_consistencia_w,'S',nm_usuario_p);
			end if;
		end if;
		
		select	count(*)
		into STRICT	qt_existe_w
		from	cot_compra_forn
		where	cd_cgc_fornecedor	= cd_cgc_fornecedor_w
		and	nr_cot_compra		= nr_cot_compra_p;

		if (qt_existe_w = 0) then
			ds_consistencia_w :=	substr(	WHEB_MENSAGEM_PCK.get_texto(298740,'NR_SOLIC_COMPRA_W='||NR_SOLIC_COMPRA_W||';NM_FORNEC_W='||substr(obter_nome_pf_pj(null,cd_cgc_fornecedor_w),1,100)),1,255);
						/*A solicitacao de compras numero #@NR_SOLIC_COMPRA_W#@, que originou essa cotacao, tem um fornecedor sugestivo.
						Portanto, este fornecedor deve estar presente nesta cotacao.
						O fornecedor e #@NM_FORNEC_W#@.*/
			CALL grava_consistencia_cotacao(nr_cot_compra_p,null,null,ds_consistencia_w,'S',nm_usuario_p);
		end if;
		end;
	end loop;
	close C06;

	end;
end loop;
close C05;

open C07;
loop
fetch C07 into
	nr_item_cot_compra_w,
	cd_material_w,
	nr_seq_fornecedor_w,
	ie_qualificado_w;
EXIT WHEN NOT FOUND; /* apply on C07 */
	begin

	if (ie_qualificado_w = 'N') then
		ds_consistencia_w :=	substr(	Wheb_mensagem_pck.get_Texto(298744) ,1,255);
					/*'Nao e possivel efetuar a compra deste item porque ele esta desqualificado para este fornecedor. ' ||
					'Verifique a regra de liberacao da estrutura do material por fornecedor.',1,255);*/
					CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,'S',nm_usuario_p);
	end if;

	if (ie_qualificado_w = 'L') then
		ds_consistencia_w :=	substr( Wheb_mensagem_pck.get_Texto(298745),1,255);
					/*'Este item esta desqualificado para este fornecedor, e para efetuar a compra, depende de uma liberacao do responsavel. ' ||
					'O responsavel e a pessoa que tem o parametro [80] da cotacao liberado.'*/
					CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,'S',nm_usuario_p);
	end if;

	if (ie_qualificado_w = 'V') then
		ds_consistencia_w :=	substr(	Wheb_mensagem_pck.get_Texto(298747) ,1,255);
					/*'Este item esta desqualificado porque este fornecedor nao foi avaliado, e para efetuar a compra, depende de uma liberacao do responsavel. ' ||
					'O responsavel e a pessoa que tem o parametro [80] da cotacao liberado.'*/
					CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,'S',nm_usuario_p);
	end if;
	end;
	
end loop;
close C07;

open C09;
loop
fetch C09 into
	nr_item_cot_compra_w,
	cd_material_w,
	nr_seq_fornecedor_w,
	cd_unidade_medida_compra_w,
	vl_unitario_material_w;
EXIT WHEN NOT FOUND; /* apply on C09 */
	begin
	
	open C10;
	loop
	fetch C10 into	
		ie_tipo_regra_w,
		cd_tab_preco_mat_w,
		ie_bloqueia_w,
		ie_pfb_pmc_w,
		ds_tab_preco_mat_w;
	EXIT WHEN NOT FOUND; /* apply on C10 */
		begin
		
		if (ie_tipo_regra_w = 10) then --Brasindice
		
			select	coalesce(obter_maior_preco_brasindice(cd_estabelecimento_w, cd_material_w, clock_timestamp(), cd_unidade_medida_compra_w, ie_pfb_pmc_w),0)
			into STRICT	vl_preco_regra_w
			;
			
			if (vl_preco_regra_w > 0) and (vl_unitario_material_w > vl_preco_regra_w) then
				ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298748, 'VL_BRASINDICE_W='||campo_mascara_virgula(vl_preco_regra_w)),1,255);
							/*O valor unitario do material e maior que o preco Brasindice: #@VL_BRASINDICE_W#@.*/

				CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
			end if;			
		elsif (ie_tipo_regra_w = 11) then --Tabela de precos
			
			select	coalesce(obter_preco_mat_tab_compras(cd_estabelecimento_w, cd_material_w, cd_tab_preco_mat_w, cd_unidade_medida_compra_w),0)
			into STRICT	vl_preco_regra_w
			;
			
			if (vl_preco_regra_w > 0) and (vl_unitario_material_w > vl_preco_regra_w) then
				ds_consistencia_w :=	substr(WHEB_MENSAGEM_PCK.get_texto(298749,'DS_TAB_PRECO_MAT_W='||DS_TAB_PRECO_MAT_W||';VL_PRECO_REGRA_W='||campo_mascara_virgula(vl_preco_regra_w)),1,255);
							/*O valor unitario do material e maior que o preco da tabela de precos #@DS_TAB_PRECO_MAT_W#@. Preco: #@VL_PRECO_REGRA_W#@.*/

				CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
			end if;
		elsif (ie_tipo_regra_w = 12) then -- Simpro
			
			select	coalesce(Obter_maior_preco_Simpro_mat(cd_material_w, cd_unidade_medida_compra_w, clock_timestamp()),0)
			into STRICT	vl_preco_regra_w
			;
									
			if (vl_preco_regra_w > 0) and (vl_unitario_material_w > vl_preco_regra_w) then
				ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298750, 'VL_PRECO_REGRA_W='||campo_mascara_virgula(vl_preco_regra_w)),1,255);
							/*O valor unitario do material e maior que o preco Simpro: #@VL_PRECO_REGRA_W#@.*/

				CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);	
			end if;		
		end if;		
		end;
	end loop;
	close C10;
	end;
	
	if (vl_diferenca_permitida_w > 0) and (ie_tipo_consistencia_p = 1) then
		begin	
	
		open C12;
		loop
		fetch C12 into	
			nr_solic_compra_w,
			nr_item_solic_compra_w;
		EXIT WHEN NOT FOUND; /* apply on C12 */
			begin
			
			if (nr_solic_compra_w > 0) and (nr_item_solic_compra_w > 0) then
			
				select	coalesce(vl_unit_previsto,0)
				into STRICT	vl_unit_previsto_w
				from	solic_compra_item
				where	nr_solic_compra = nr_solic_compra_w
				and	nr_item_solic_compra = nr_item_solic_compra_w;
				
				
				
				if (vl_unit_previsto_w > 0) and
					(vl_unitario_material_w >= (vl_unit_previsto_w + vl_diferenca_permitida_w)) then
					
					ds_consistencia_w :=	substr( Wheb_mensagem_pck.get_Texto(298751) ,1,255);
								/*O valor unitario do material ultrapassou o maximo permitido com base no valor previsto na solicitacao.*/

					CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,nr_seq_fornecedor_w,ds_consistencia_w,'S',nm_usuario_p);					
				end if;
			end if;		
			end;
		end loop;
		close C12;
		end;
	end if;	
end loop;
close C09;

if (ie_consiste_proj_rec_w = 'S') then

	open C11;
	loop
	fetch C11 into	
		cd_material_w,
		nr_item_cot_compra_w;
	EXIT WHEN NOT FOUND; /* apply on C11 */
		begin
		ds_consistencia_w :=	substr( Wheb_mensagem_pck.get_Texto(298752) ,1,255);
					/*O material nao possui projeto recurso informado.*/

		CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);		
		
		end;
	end loop;
	close C11;

end if;

if (ie_consiste_doc_vencido_w <> 'N') then
	
	if (ie_consiste_doc_vencido_w = 'S') then
		ie_bloqueia_w := 'S';
	else
		ie_bloqueia_w := 'N';
	end if;
	
	open C13;
	loop
	fetch C13 into	
		nr_seq_fornecedor_w;
	EXIT WHEN NOT FOUND; /* apply on C13 */
		begin
		ds_consistencia_w :=	substr( Wheb_mensagem_pck.get_Texto(298753) ,1,255);
					/*Este fornecedor possui documentos vencidos.*/

		CALL grava_consistencia_cotacao(nr_cot_compra_p,null,nr_seq_fornecedor_w,ds_consistencia_w,ie_bloqueia_w,nm_usuario_p);
		end;
	end loop;
	close C13;
end if;


if (ie_tipo_consistencia_p = 0) then
	open C02;
	loop
	fetch C02 into	
		cd_material_w,
		nr_item_cot_compra_w,
		cd_classe_material_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
		select	ie_situacao
		into STRICT	ie_situacao_w
		from	material
		where	cd_material = cd_material_w;
		
		if (ie_situacao_w = 'I') then
			ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298756, 'CD_MATERIAL_W='||CD_MATERIAL_W),1,255);
						/*O material #@CD_MATERIAL_W#@ esta inativo.
						Verifique o cadastro de materiais.*/
			CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
		end if;
		
		if (ie_consiste_regra_mat_w = 'S') then

			select	coalesce(obter_regra_material_usuario(cd_classe_material_w, cd_material_w, nm_usuario_p, '5'),'S')
			into STRICT	ie_consiste_permissao_mat_w
			;
		
			if (ie_consiste_permissao_mat_w = 'N') then
				ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298757, 'CD_MATERIAL_W='||CD_MATERIAL_W),1,255);
							/*Sem permissao para comprar o material #@CD_MATERIAL_W#@.
							Verifique o parametro [177].*/
				CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
			end if;
		end if;
		
		if (ie_consiste_permissao_compra_w = 'S') then

			select	coalesce(obter_permissao_compra_mat(cd_estabelecimento_w, cd_material_w, 'C'),'S')
			into STRICT	ie_consiste_permissao_mat_w
			;
		
			if (ie_consiste_permissao_mat_w = 'N') then
				ds_consistencia_w :=	substr(Wheb_mensagem_pck.get_Texto(298764, 'CD_MATERIAL_W='||CD_MATERIAL_W),1,255);
							/*Sem permissao para comprar o material #@CD_MATERIAL_W#@.
							Verifique o parametro [178].*/
				CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
			end if;
		end if;
		
		select	count(*)
		into STRICT	qt_existe_w
		from	regra_min_fornec_item_cot
		where	cd_estabelecimento = cd_estabelecimento_w;
		
		if (qt_existe_w > 0) then
			
			select	obter_se_consiste_min_for_item(nr_cot_compra_p, cd_material_w, 'C'),
				obter_se_consiste_min_for_item(nr_cot_compra_p, cd_material_w, 'Q')
			into STRICT	ie_bloqueia_w,
				qt_fornec_exige_w			
			;
			
			if (ie_bloqueia_w = 'S') then
				ds_consistencia_w := substr(Wheb_mensagem_pck.get_Texto(312365, 'QT_FORNEC_EXIGE_W='||QT_FORNEC_EXIGE_W),1,255);
								/*Este item exige no minimo #@QT_FORNEC_EXIGE_W#@ fornecedores.
								Verifique a regra de Quantidade minima de fornecedores para o item da cotacao.*/
				CALL grava_consistencia_cotacao(nr_cot_compra_p,nr_item_cot_compra_w,null,ds_consistencia_w,'S',nm_usuario_p);
			end if;	
		end if;
		end;
	end loop;
	close C02;
end if;

if (ie_tipo_consistencia_p = 1 and coalesce(qt_exclusivo_w,0) = 0) then

	select	count(*)
	into STRICT	qt_existe_w
	from	regra_qt_minima_fornec_cot
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	select	count(*)
	into STRICT	qt_solic_urgente_w
	from	solic_compra_agrup_v a,
		solic_compra b
	where	a.nr_solic_compra = b.nr_solic_compra
	and	a.nr_cot_compra = nr_cot_compra_p
	and	b.ie_urgente = 'S';
	
	if (qt_existe_w > 0) and (qt_solic_urgente_w = 0) then --Se tiver alguma solicitacao urgente nessa cotacao, a regra sera desconsiderada
		
		select	obter_se_consiste_min_fornec(nr_cot_compra_p, 'C'),
			obter_se_consiste_min_fornec(nr_cot_compra_p, 'Q')
		into STRICT	ie_bloqueia_w,
			qt_fornec_exige_w
		;
		
		if (ie_bloqueia_w = 'S') then
			ds_consistencia_w := substr(Wheb_mensagem_pck.get_Texto(298765, 'QT_FORNEC_EXIGE_W='||QT_FORNEC_EXIGE_W),1,255);
						/*A cotacao de compra exige no minimo #@QT_FORNEC_EXIGE_W#@ fornecedores.
						Verifique a regra de Quantidade minima de fornecedores na cotacao.*/
			CALL grava_consistencia_cotacao(nr_cot_compra_p,null,null,ds_consistencia_w,'S',nm_usuario_p);
		end if;	
	end if;

end if;

select  (CASE WHEN (max(nr_sequencia) IS NOT NULL AND (max(nr_sequencia))::text <> '') THEN 'S' ELSE 'N' END)
into STRICT	is_regulated_price_w
from    rule_regulated_price;

if (is_regulated_price_w = 'S') then
	for cotacao_compra_w in c09 loop
		select	to_number(obter_regulated_price('VMC', cotacao_compra_w.cd_material), '99999D99')
		into STRICT	vl_max_purchase_w
		;

		if (cotacao_compra_w.vl_unitario_material > vl_max_purchase_w) then
			ds_consistencia_w := substr(Wheb_mensagem_pck.get_Texto(1206805, 'CD_MATERIAL_W='||cotacao_compra_w.cd_material)  || chr(13) ||
										wheb_mensagem_pck.get_texto(1206806),1,2000);
						/*'O item #@CD_MATERIAL_W#@ possui valor unitario maior que o preco de compra regulamentado.'
						Verifique a regra de preco regulado na funcao "Cadastros Gerais" > "Aplicacao Principal" > "Cadastros Gerais" > "Regra de preco regulado".*/
			CALL grava_consistencia_cotacao(nr_cot_compra_p,cotacao_compra_w.nr_item_cot_compra,null,ds_consistencia_w,'N',nm_usuario_p);
		end if;
	end loop;
end if;

CALL consistir_entrega_cot_compra(nr_cot_compra_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_calcular_cot_compra ( nr_cot_compra_p bigint, qt_fornecedor_p bigint, nm_usuario_p text, ie_tipo_consistencia_p bigint) FROM PUBLIC;

