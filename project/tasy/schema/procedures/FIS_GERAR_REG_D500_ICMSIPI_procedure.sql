-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_d500_icmsipi (nr_seq_controle_p bigint) AS $body$
DECLARE


/*REGISTRO D500: NOTA FISCAL DE SERVIO DE COMUNICAO (CDIGO 21) E NOTA FISCAL DE SERVIO DE TELECOMUNICAO (CDIGO 22).*/



-- VARIABLES
ie_gerou_dados_bloco_w varchar(1) := 'N';
nr_seq_icmsipi_D500_w	fis_efd_icmsipi_D500.nr_sequencia%type;
vl_red_bc_w		        fis_efd_icmsipi_d590.vl_red_bc%type;
vl_bc_icms_w		      fis_efd_icmsipi_d590.vl_bc_icms%type;
vl_icms_w		          fis_efd_icmsipi_d590.vl_icms%type;
cd_inf_w		          fis_efd_icmsipi_d500.cd_inf%type;
dt_inicio_apuracao_w	fis_efd_icmsipi_controle.dt_inicio_apuracao%type;
dt_fim_apuracao_w	    fis_efd_icmsipi_controle.dt_fim_apuracao%type;
nr_seq_modelo_nf_w	  fis_efd_icmsipi_regra_c100.nr_seq_modelo_nf%type;
ie_tipo_data_w		    fis_efd_icmsipi_regra_c100.ie_tipo_data%type;
cd_tp_assinante_w	    fis_efd_icmsipi_regra_d500.ie_tipo_assinante%type;
cd_estabelecimento_w	fis_efd_icmsipi_controle.cd_estabelecimento%type;
nr_cod_0450_w		      fis_efd_icmsipi_controle.nr_cod_0450%type	:= 0;
qt_cursor_w 		      bigint := 0;
nr_vetor_w  		      bigint := 0;
nm_usuario_w          usuario.nm_usuario%type;
cd_sit_w				      fis_efd_icmsipi_D500.cd_sit%type;
movement_date_w       nota_fiscal.dt_entrada_saida%type;

c_regras CURSOR FOR
	SELECT	trunc(a.dt_inicio_apuracao),
		trunc(a.dt_fim_apuracao),
		c.nr_seq_modelo_nf,
		c.ie_tipo_data,
		c.ie_tipo_assinante,
		a.cd_estabelecimento
	from	fis_efd_icmsipi_controle 	a,
		fis_efd_icmsipi_lote		b,
		fis_efd_icmsipi_regra_d500	c
	where	a.nr_seq_lote	= b.nr_sequencia
	and 	b.nr_sequencia	= c.nr_seq_lote
	and 	a.nr_sequencia 	= nr_seq_controle_p;

/*Cursor que retorna as informaes para o registro D500*/

c_nf_comunic CURSOR FOR
SELECT	'0' cd_ind_oper,
	'1' cd_ind_emit,
	max(coalesce(a.cd_cgc,a.cd_pessoa_fisica)) cd_part,
	max(lpad(b.cd_modelo_nf, 2, 0)) cd_mod,
	'00' cd_sit,
	max(a.cd_serie_nf) cd_serie,
	null cd_sub,
	max(a.nr_nota_fiscal) nr_doc,
	max(a.dt_emissao) dt_doc,
	max(a.dt_entrada_saida) dt_a_p,
	max(a.vl_total_nota) vl_doc,
	sum(a.vl_descontos) vl_desc,
	max(a.vl_mercadoria) vl_serv,
	0 vl_terc,
	max(a.vl_despesa_acessoria) vl_da,
	null cd_inf,
	null vl_pis,
	null vl_cofins,
	max(c.cd_conta_contabil) cd_cta,
	max(a.nr_sequencia) nr_seq_nota,
	max(a.ds_observacao) ds_observacao,
  max(a.nr_sequencia_ref) nr_sequencia_ref,
  max(a.ie_tipo_nota) ie_tipo_nota
FROM nota_fiscal_item c, nota_fiscal a, operacao_nota_modelo d
LEFT OUTER JOIN modelo_nota_fiscal b ON (d.nr_seq_modelo = b.nr_sequencia)
WHERE a.cd_operacao_nf	= d.cd_operacao_nf  and a.nr_sequencia 		= c.nr_Sequencia and (a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '') /*Se a nota for de entrada, no tiver sido enviada, e estiver estornada, a nota nao vai no arquivo */

  and a.ie_situacao not in ('2', '3', '9') and (((ie_tipo_data_w = 1) and (trunc(a.dt_emissao) between dt_inicio_apuracao_w and dt_fim_apuracao_w)) 
	or ((ie_tipo_data_w = 2) and (trunc(a.dt_entrada_saida) between dt_inicio_apuracao_w and dt_fim_apuracao_w))) and b.nr_sequencia		= nr_seq_modelo_nf_w and a.cd_estabelecimento	= cd_estabelecimento_w group by	a.nr_sequencia;

/*Criao do array com o tipo sendo do cursor eespecificado - c_sat_ecf*/

type reg_c_nf_comunic is table of c_nf_comunic%RowType;
vetNFCom reg_c_nf_comunic;

/*Criao do array com o tipo sendo da tabela especificada - FIS_EFD_ICMSIPI_D500 */

type registro is table of fis_efd_icmsipi_D500%rowtype index by integer;
fis_registros_w registro;

BEGIN


/*Obteo do usurio ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_regras;
loop
fetch c_regras into	
	dt_inicio_apuracao_w,
	dt_fim_apuracao_w,
	nr_seq_modelo_nf_w,
	ie_tipo_data_w,
	cd_tp_assinante_w,
	cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on c_regras */
	begin
	
	open c_nf_comunic;
	loop
	fetch c_nf_comunic bulk collect into vetNFCom limit 1000;
		for i in 1 .. vetNFCom.Count loop
			begin
			
			/*Incrementa a variavel para o array*/

			qt_cursor_w:=	qt_cursor_w + 1;
			
			CALL fis_gerar_reg_D590_icmsipi(	nr_seq_controle_p,
							vetNFCom[i].nr_seq_nota);

			if (ie_gerou_dados_bloco_w = 'N') then
				ie_gerou_dados_bloco_w := 'S';
			end if;
			
			/*Pega a sequencial e adciona mais 1 para inserir o registro posterior, esse campo serve para nao perder o sequancial do cd_inf*/

			cd_inf_w := null;
			if  vetNFCom[i](.ds_observacao IS NOT NULL AND .ds_observacao::text <> '') then
				nr_cod_0450_w := fis_obter_seq_0450_icmsipi(nr_seq_controle_p, nr_cod_0450_w);
				cd_inf_w := nr_cod_0450_w;
			end if;
			
			begin
			/*Select para buscar os totalizadores do regintro D590*/

			select  CASE WHEN a.vl_tot_red_bc=0 THEN  null  ELSE a.vl_tot_red_bc END  vl_tot_red_bc,
				CASE WHEN a.vl_tot_bc_icms=0 THEN  null  ELSE a.vl_tot_bc_icms END  vl_tot_bc_icms,
				CASE WHEN a.vl_tot_icms=0 THEN  null  ELSE a.vl_tot_icms END  vl_tot_icms
			into STRICT	vl_red_bc_w,	
				vl_bc_icms_w,
				vl_icms_w
			from (
					SELECT	coalesce(sum(vl_red_bc),0) vl_tot_red_bc,
						coalesce(sum(vl_bc_icms),0) vl_tot_bc_icms,
						coalesce(sum(vl_icms),0) vl_tot_icms
					from	fis_efd_icmsipi_d590 a
					where	a.nr_seq_nota = vetNFCom[i].nr_seq_nota
				) a;
			
			exception
			when others then
				vl_red_bc_w	:= null;
				vl_bc_icms_w	:= null;
				vl_icms_w	:= null;
			end;

			/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_D500*/

			select	nextval('fis_efd_icmsipi_d500_seq')
			into STRICT	nr_seq_icmsipi_D500_w
			;

      cd_sit_w        := vetNFCom[i].cd_sit;
      movement_date_w := vetNFCom[i].dt_a_p;
      SELECT * FROM tax_extemporaneous_icmsipi(vetNFCom[i].dt_doc, vetNFCom[i].nr_sequencia_ref, vetNFCom[i].ie_tipo_nota, movement_date_w, cd_sit_w) INTO STRICT movement_date_w, cd_sit_w;

			/*Inserindo valores no array para realizao do forall posteriormente*/

			fis_registros_w[qt_cursor_w].nr_sequencia         := nr_seq_icmsipi_D500_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao       := clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario           := nm_usuario_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao_nrec  := clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario_nrec      := nm_usuario_w;
			fis_registros_w[qt_cursor_w].cd_reg               := 'D500';
			fis_registros_w[qt_cursor_w].cd_ind_oper          := vetNFCom[i].cd_ind_oper;
			fis_registros_w[qt_cursor_w].cd_ind_emit          := vetNFCom[i].cd_ind_emit;
			fis_registros_w[qt_cursor_w].cd_part         	    := vetNFCom[i].cd_part;
			fis_registros_w[qt_cursor_w].cd_mod         	    := vetNFCom[i].cd_mod;
			fis_registros_w[qt_cursor_w].cd_sit         	    := cd_sit_w;
			fis_registros_w[qt_cursor_w].cd_serie       	    := substr(vetNFCom[i].cd_serie, 1, 4);
			fis_registros_w[qt_cursor_w].cd_sub         	    := substr(vetNFCom[i].cd_sub,1,9);
			fis_registros_w[qt_cursor_w].nr_doc         	    := substr(vetNFCom[i].nr_doc,1,9);
			fis_registros_w[qt_cursor_w].dt_doc         	    := to_char(vetNFCom[i].dt_doc, 'ddmmyyyy');
			fis_registros_w[qt_cursor_w].dt_a_p         	    := to_char(movement_date_w, 'ddmmyyyy');
			fis_registros_w[qt_cursor_w].vl_doc         	    := vetNFCom[i].vl_doc;
			fis_registros_w[qt_cursor_w].vl_desc         	    := vetNFCom[i].vl_desc;
			fis_registros_w[qt_cursor_w].vl_serv         	    := vetNFCom[i].vl_serv;
			fis_registros_w[qt_cursor_w].vl_serv_nt           := vl_red_bc_w;
			fis_registros_w[qt_cursor_w].vl_terc         	    := vetNFCom[i].vl_terc;
			fis_registros_w[qt_cursor_w].vl_da         	      := vetNFCom[i].vl_terc;
			fis_registros_w[qt_cursor_w].vl_bc_icms           := vl_bc_icms_w;
			fis_registros_w[qt_cursor_w].vl_icms         	    := vl_icms_w;
			fis_registros_w[qt_cursor_w].cd_inf         	    := cd_inf_w;--substr(vetNFCom(i).cd_inf, 1,6); /*Verificar pois o campo de sequencia da nota  10 o do registro  6*/

			fis_registros_w[qt_cursor_w].vl_pis         	    := vetNFCom[i].vl_pis;
			fis_registros_w[qt_cursor_w].vl_cofins         	  := vetNFCom[i].vl_cofins;
			fis_registros_w[qt_cursor_w].cd_cta         	    := vetNFCom[i].cd_cta;
			fis_registros_w[qt_cursor_w].cd_tp_assinante      := cd_tp_assinante_w;	
			fis_registros_w[qt_cursor_w].nr_seq_controle      := nr_seq_controle_p;
			fis_registros_w[qt_cursor_w].nr_seq_nota	        := vetNFCom[i].nr_seq_nota;

			if (nr_vetor_w >= 1000) then
				begin
				/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_D500 */

				forall i in fis_registros_w.first .. fis_registros_w.last
					insert into fis_efd_icmsipi_D500 values fis_registros_w(i);

				nr_vetor_w := 0;
				fis_registros_w.delete;

				commit;

				end;
			end if;

			/*incrementa variavel para realizar o forall quando chegar no valor limite*/

			nr_vetor_w := nr_vetor_w + 1;

			end;
		end loop;
	EXIT WHEN NOT FOUND; /* apply on c_nf_comunic */
	end loop;
	close c_nf_comunic;
	
	end;
end loop;
close c_regras;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que no entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_D500 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualizao informao no controle de gerao de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update	fis_efd_icmsipi_controle
	set	ie_mov_D = 'S'
	where	nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_d500_icmsipi (nr_seq_controle_p bigint) FROM PUBLIC;

