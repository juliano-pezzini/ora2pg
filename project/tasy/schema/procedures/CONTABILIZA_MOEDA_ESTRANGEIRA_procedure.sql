-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE contabiliza_moeda_estrangeira ( nr_lote_contabil_p bigint, nm_usuario_p text, ie_exclusao_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


dt_referencia_lote_w            lote_contabil.dt_referencia%type;
nr_seq_mes_ref_w                ctb_mes_ref.nr_sequencia%type;
vl_saldo_w                      ctb_saldo.vl_saldo%type;
cd_estab_lote_w                 lote_contabil.cd_estabelecimento%type;
cd_conta_auxiliar_w             ctb_regra_lote_moeda_est.cd_conta_auxiliar%type;
cd_conta_cred_perda_w           ctb_regra_lote_moeda_est.cd_conta_cred_perda%type;
cd_conta_cred_receita_w         ctb_regra_lote_moeda_est.cd_conta_cred_receita%type;
cd_conta_deb_perda_w            ctb_regra_lote_moeda_est.cd_conta_deb_perda%type;
cd_conta_deb_receita_w          ctb_regra_lote_moeda_est.cd_conta_deb_receita%type;
cd_conta_rec_estrang_w          ctb_regra_lote_moeda_est.cd_conta_rec_estrang%type;
cd_empresa_w                    ctb_regra_lote_moeda_est.cd_empresa%type;
cd_estabelecimento_w            ctb_regra_lote_moeda_est.cd_estabelecimento%type;
cd_historico_w                  ctb_regra_lote_moeda_est.cd_historico%type;
ds_titulo_w                     ctb_regra_lote_moeda_est.ds_titulo%type;
dt_fim_vigencia_w               ctb_regra_lote_moeda_est.dt_fim_vigencia%type;
dt_inicio_vigencia_w            ctb_regra_lote_moeda_est.dt_inicio_vigencia%type;
nr_seq_regra_w                  ctb_regra_lote_moeda_est.nr_sequencia%type;
cd_moeda_w                      ctb_regra_lote_moeda_est.cd_moeda%type;
nr_sequencia_w                  w_movimento_contabil.nr_sequencia%type  := 0;
vl_cotacao_w                    cotacao_moeda.vl_cotacao%type;
vl_recebimento_estrang_w        double precision;
vl_saldo_auxiliar_w             double precision;
vl_saldo_rec_aux_w              double precision;
vl_saldo_rec_cotacao_w          double precision;
cd_conta_credito_w              conta_contabil.cd_conta_contabil%type;
cd_conta_debito_w               conta_contabil.cd_conta_contabil%type;
vl_saldo_moeda_w                double precision;
vl_movimento_w                  double precision;
cd_tipo_lote_contabil_w         bigint;

c01 CURSOR FOR
SELECT  a.vl_movimento
from    ctb_saldo a
where   a.nr_seq_mes_ref = nr_seq_mes_ref_w
and     a.cd_estabelecimento = cd_estab_lote_w;

c02 CURSOR FOR
        SELECT  cd_conta_auxiliar,
                cd_conta_cred_perda,
                cd_conta_cred_receita,
                cd_conta_deb_perda,
                cd_conta_deb_receita,
                cd_conta_rec_estrang,
                cd_empresa,
                cd_estabelecimento,
                cd_historico,
                ds_titulo,
                dt_fim_vigencia,
                dt_inicio_vigencia,
                nr_sequencia,
                cd_moeda
        from    ctb_regra_lote_moeda_est a
        where   a.cd_estabelecimento    = cd_estab_lote_w
        and     substr(obter_se_periodo_vigente(a.dt_inicio_vigencia, a.dt_fim_vigencia, dt_referencia_lote_w),1,1) = 'S';


BEGIN
/*Validacao para impedir a geracao em lotes incorretos */

if (ie_exclusao_p <> 'S') then
        select b.cd_tipo_lote_contabil
        into STRICT cd_tipo_lote_contabil_w
        from lote_contabil b
        where b.nr_lote_contabil = nr_lote_contabil_p;
        if (cd_tipo_lote_contabil_w <> 53) then
                CALL wheb_mensagem_pck.exibir_mensagem_abort(261346);
        end if;
end if;
select  max(a.dt_referencia),
        max(a.cd_estabelecimento)
into STRICT    dt_referencia_lote_w,
        cd_estab_lote_w
from    lote_contabil a
where   a.nr_lote_contabil = nr_lote_contabil_p;

select  max(a.nr_sequencia)
into STRICT    nr_seq_mes_ref_w
from    ctb_mes_ref a
where   trunc(a.dt_referencia,'MM') = trunc(dt_referencia_lote_w,'MM')
and     a.cd_empresa = obter_empresa_estab(cd_estab_lote_w);

if (ie_exclusao_p = 'S') then
        CALL wheb_usuario_pck.set_ie_lote_contabil('S');

        delete  from w_movimento_contabil
        where   nr_lote_contabil        = nr_lote_contabil_p;
        commit;

        delete  from movimento_contabil
        where   nr_lote_contabil        = nr_lote_contabil_p;

        update lote_contabil
        set     vl_credito              = 0,
                vl_debito               = 0
        where   nr_lote_contabil        = nr_lote_contabil_p;
        commit;

        CALL wheb_usuario_pck.set_ie_lote_contabil('N');
else

        delete  from w_movimento_contabil
        where   nr_lote_contabil        = nr_lote_contabil_p;
        commit;

        delete  from movimento_contabil
        where   nr_lote_contabil        = nr_lote_contabil_p;
        commit;

        open c02;
        loop
        fetch c02 into
                cd_conta_auxiliar_w,
                cd_conta_cred_perda_w,
                cd_conta_cred_receita_w,
                cd_conta_deb_perda_w,
                cd_conta_deb_receita_w,
                cd_conta_rec_estrang_w,
                cd_empresa_w,
                cd_estabelecimento_w,
                cd_historico_w,
                ds_titulo_w,
                dt_fim_vigencia_w,
                dt_inicio_vigencia_w,
                nr_seq_regra_w,
                cd_moeda_w;
        EXIT WHEN NOT FOUND; /* apply on c02 */
                /*Soma do saldo da conta de Recebimento Estrangeiro */


                /*Soma do saldo da conta Auxiliar */

                select  coalesce(sum(a.vl_movimento),0) vl_recebimento_estrang
                into STRICT    vl_recebimento_estrang_w
                from    ctb_saldo a
                where   a.nr_seq_mes_ref        = nr_seq_mes_ref_w
                and     a.cd_estabelecimento    = cd_estab_lote_w
                and     a.cd_conta_contabil     = cd_conta_rec_estrang_w;

                select  coalesce(sum(a.vl_movimento),0) vl_saldo_auxiliar
                into STRICT    vl_saldo_auxiliar_w
                from    ctb_saldo a
                where   a.nr_seq_mes_ref        = nr_seq_mes_ref_w
                and     a.cd_estabelecimento    = cd_estab_lote_w
                and     a.cd_conta_contabil     = cd_conta_auxiliar_w;

                /*Obter o valor de cotacao da moeda */

                vl_cotacao_w    := coalesce(obter_valor_cotacao_moeda_data(cd_moeda_w,coalesce(fim_dia(dt_referencia_lote_w),clock_timestamp())),1);
                if (vl_cotacao_w = 0) then
                        vl_cotacao_w    := 1;
                end if;

                vl_saldo_rec_cotacao_w  := (vl_cotacao_w * vl_recebimento_estrang_w);
                vl_saldo_rec_aux_w      := (vl_saldo_auxiliar_w + vl_recebimento_estrang_w);
                vl_saldo_moeda_w        :=  vl_saldo_rec_cotacao_w - vl_saldo_rec_aux_w;

                if (vl_saldo_moeda_w > 0) then
                        cd_conta_debito_w       := cd_conta_deb_receita_w;
                        cd_conta_credito_w      := cd_conta_cred_receita_w;
                elsif (vl_saldo_moeda_w < 0) then
                        cd_conta_debito_w       := cd_conta_deb_perda_w;
                        cd_conta_credito_w      := cd_conta_cred_perda_w;

                end if;

                vl_movimento_w  := coalesce(abs(vl_saldo_moeda_w),0);

                /*- O valor da conversao da moeda sera multiplicado pelo valor de saldo da conta de recebimento em moeda estrangeira.
- O valor da soma da Conta auxiliar com a conta de recebimento em moeda estrangeira sera comparado com o resultado da multiplicacao do saldo da conta de recebimento em moeda estrangeira pelo valor da cotacao atual no dia da geracao do lote.
- A diferenca entre a soma das contas de moeda estrangeira e do valor convertido, se positivo sera contabilizado da seguinte forma:
DEBITO - Conta debito ativo - Valor diferenca
CREDITO - Conta credito receita - Valor diferenca

- Se a diferenca for negativa, ou seja, o valor convertido eh menor que o saldo indicando desvalorizacao, sera contabilizado da seguinte forma:

DEBITO - Conta debito Ativo
CREDITO - Conta credito de perda*/
                if (vl_movimento_w <> 0) then
                        nr_sequencia_w  := nr_sequencia_w + 1;

                        insert into w_movimento_contabil(
                                nr_lote_contabil,
                                nr_sequencia,
                                cd_conta_contabil,
                                ie_debito_credito,
                                cd_historico,
                                dt_movimento,
                                vl_movimento,
                                cd_centro_custo,
                                ds_compl_historico,
                                nr_seq_agrupamento,
                                nr_seq_trans_fin,
                                cd_cgc,
                                cd_pessoa_fisica,
                                nr_documento,
                                ie_transitorio,
                                nm_tabela,
                                nm_atributo,
                                nr_seq_tab_orig,
                                nr_seq_info)
                        values ( nr_lote_contabil_p,
                                nr_sequencia_w,
                                cd_conta_debito_w,
                                'D',
                                cd_historico_w,
                                dt_referencia_lote_w,
                                vl_movimento_w,
                                null,
                                ds_titulo_w,
                                nr_seq_regra_w,
                                null,
                                null,
                                null,
                                null,
                                'N',
                                'CTB_SALDO',
                                'VL_SALDO_MOEDA',
                                nr_seq_regra_w,
                                71);

                        insert into w_movimento_contabil(
                                nr_lote_contabil,
                                nr_sequencia,
                                cd_conta_contabil,
                                ie_debito_credito,
                                cd_historico,
                                dt_movimento,
                                vl_movimento,
                                cd_centro_custo,
                                ds_compl_historico,
                                nr_seq_agrupamento,
                                nr_seq_trans_fin,
                                cd_cgc,
                                cd_pessoa_fisica,
                                nr_documento,
                                ie_transitorio,
                                nm_tabela,
                                nm_atributo,
                                nr_seq_tab_orig,
                                nr_seq_info)
                        values ( nr_lote_contabil_p,
                                nr_sequencia_w,
                                cd_conta_credito_w,
                                'C',
                                cd_historico_w,
                                dt_referencia_lote_w,
                                vl_movimento_w,
                                null,
                                ds_titulo_w,
                                nr_seq_regra_w,
                                null,
                                null,
                                null,
                                null,
                                'N',
                                'CTB_SALDO',
                                'VL_SALDO_MOEDA',
                                nr_seq_regra_w,
                                71);
                end if;
        end loop;
        close c02;

CALL agrupa_movimento_contabil(nr_lote_contabil_p, nm_usuario_p);

end if;

if (coalesce(ds_retorno_p::text, '') = '') then
        update  lote_contabil
        set     ie_situacao             = 'A',
                dt_geracao_lote         = clock_timestamp()
        where   nr_lote_contabil        = nr_lote_contabil_p;

        if (ie_exclusao_p = 'S') then
                ds_retorno_p    := wheb_mensagem_pck.get_texto(165188);

                CALL ctb_gravar_log_lote(    nr_lote_contabil_p,
                                        2,
                                        '',
                                        nm_usuario_p);
        else
                ds_retorno_p    := wheb_mensagem_pck.get_texto(165187);

                CALL ctb_gravar_log_lote(    nr_lote_contabil_p,
                                        1,
                                        '',
                                        nm_usuario_p);
        end if;
        commit;
else
        rollback;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE contabiliza_moeda_estrangeira ( nr_lote_contabil_p bigint, nm_usuario_p text, ie_exclusao_p text, ds_retorno_p INOUT text) FROM PUBLIC;

