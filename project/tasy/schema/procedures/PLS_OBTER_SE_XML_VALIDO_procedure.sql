-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_se_xml_valido (nr_seq_lote_p pls_protocolo_conta.nr_seq_lote_conta%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, ie_permite_duplicidade_p text, ie_origem_processo_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ds_mensagem_erro_p INOUT text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Rotinas de consistencias do protocolo, onde é verificado:
-Se o protocolo ja foi com determinado número de lote ja foi importado.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [ X ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
Rotina utilizada no momento do upload da conta médica, e na confirmação.

ie_origem_processo_p :  'I'  = Rotina sendo chamada na importação
                        'C' = Rotina sendo chamada na confirmação

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_permite_duplicidade_w	varchar(1);
ie_valida_lote_prestador_w	varchar(1);
nr_seq_prot_importado_w 	pls_protocolo_conta.nr_sequencia%type;
nr_seq_lote_importado_w		pls_protocolo_conta.nr_seq_lote_conta%type;
ds_mensagem_erro_w		varchar(4000) := 'OK';
ie_fechado_w			varchar(1);
dt_mes_competencia_w		timestamp;
dt_aceite_w			timestamp;
dt_integracao_w			varchar(25);
qt_registros_w			integer;
cd_prestador_imp_w		pls_protocolo_conta_imp.cd_prestador_conv%type;
cd_prest_upper_conv_w	 	pls_protocolo_conta_imp.cd_prest_upper_conv%type;
cd_prest_number_conv_w	 	pls_protocolo_conta_imp.cd_prest_number_conv%type;
cd_cgc_prestador_conv_w 	pls_protocolo_conta_imp.cd_cgc_prestador_conv%type;
cd_cpf_prestador_conv_w		pls_protocolo_conta_imp.cd_cpf_prestador_conv%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
nr_protocolo_prestador_w	pls_protocolo_conta.nr_protocolo_prestador%type;
qt_regra_w			integer;
ie_importacao_nova_w		varchar(1);

C01 CURSOR(	nr_seq_protocolo_pc 	pls_protocolo_conta.nr_sequencia%type,
		nr_seq_lote_pc		pls_protocolo_conta.nr_seq_lote_conta%type,
		ie_importacao_nova_pc	text) FOR
	SELECT	nr_sequencia,
		ie_tipo_guia,
		ie_origem_protocolo,
		dt_protocolo,
		dt_recebimento,
		dt_mes_competencia,
		nr_protocolo_prestador,
		nr_seq_lote_conta,
		ds_hash,
		cd_cgc_prestador_imp,
		cd_prestador_imp,
		nr_seq_lote,
		nr_cpf_prestador_imp,
		nr_seq_prestador_imp_ref
	from	pls_protocolo_conta
	where	nr_seq_lote_conta	= nr_seq_lote_pc
	and	ie_importacao_nova_pc	= 'N'
	
union all

	SELECT	nr_sequencia,
		ie_tipo_guia,
		ie_origem_protocolo,
		dt_protocolo,
		dt_recebimento,
		dt_mes_competencia,
		nr_protocolo_prestador,
		nr_seq_lote_conta,
		ds_hash,
		cd_cgc_prestador_imp,
		cd_prestador_imp,
		nr_seq_lote,
		nr_cpf_prestador_imp,
		nr_seq_prestador_imp_ref
	from	pls_protocolo_conta
	where 	nr_sequencia = nr_seq_protocolo_pc
	and	ie_importacao_nova_pc	= 'N'
	
union all

	select	nr_sequencia,
		ie_tipo_guia,
		'E' ie_origem_protocolo, -- Importação XML / TISS, atualmente, esta tabela so e utilizada na imp de xml
		dt_recebimento_conv dt_protocolo, --------------
		dt_recebimento_conv dt_recebimento,
		dt_recebimento_conv dt_mes_competencia,
		nr_lote_prestador nr_protocolo_prestador,
		nr_seq_lote_protocolo nr_seq_lote_conta,
		ds_hash,
		cd_cgc_prestador_conv cd_cgc_prestador_imp,
		cd_prestador_conv cd_prestador_imp,
		nr_seq_lote_protocolo nr_seq_lote,
		cd_cpf_prestador_conv nr_cpf_prestador_imp,
		nr_seq_prestador_conv nr_seq_prestador_imp_ref
	from	pls_protocolo_conta_imp
	where 	nr_seq_lote_protocolo	= nr_seq_lote_pc
	and	ie_importacao_nova_pc	= 'S'
	
union all

	select	nr_sequencia,
		ie_tipo_guia,
		'E' ie_origem_protocolo, -- Importação XML / TISS, atualmente, esta tabela so e utilizada na imp de xml
		dt_recebimento_conv dt_protocolo, --------------
		dt_recebimento_conv dt_recebimento,
		dt_recebimento_conv dt_mes_competencia,
		nr_lote_prestador nr_protocolo_prestador,
		nr_seq_lote_protocolo nr_seq_lote_conta,
		ds_hash,
		cd_cgc_prestador_conv cd_cgc_prestador_imp,
		cd_prestador_conv cd_prestador_imp,
		nr_seq_lote_protocolo nr_seq_lote,
		cd_cpf_prestador_conv nr_cpf_prestador_imp,
		nr_seq_prestador_conv nr_seq_prestador_imp_ref
	from	pls_protocolo_conta_imp
	where 	nr_sequencia = nr_seq_protocolo_pc
	and	ie_importacao_nova_pc	= 'S';

BEGIN
ie_permite_duplicidade_w := ie_permite_duplicidade_p;

if (coalesce(ie_permite_duplicidade_w::text, '') = '') then
	ie_permite_duplicidade_w := pls_obter_param_padrao_funcao(15,1249);
end if;

-- verifica se deve ser válidado o prestador e lote
ie_valida_lote_prestador_w := coalesce(pls_obter_param_padrao_funcao(46,1249), 'N');
ie_importacao_nova_w := pls_imp_xml_cta_pck.usar_nova_imp_xml(cd_estabelecimento_p);
if (ie_origem_processo_p = 'C') then
	select	count(1)
	into STRICT	qt_registros_w
	from	pls_xml_arquivo
	where	nr_sequencia in (SELECT	nr_seq_xml_arquivo
				from	pls_protocolo_conta
				where	nr_seq_lote_conta = nr_seq_lote_p)
	and (ie_status = 'VAL' or ie_status = 'IMP');

	if (qt_registros_w > 0) then
		ds_mensagem_erro_w := 'Existem outros protocolos sendo importados no lote '||nr_seq_lote_p;
	end if;
end if;

/*Leitura do paramêtro [15] - Consistir duplicidade de protocolos importados através do TISS */

if (coalesce(ie_permite_duplicidade_w::text, '') = '' or ie_permite_duplicidade_w = 'N') then

	for r_c01_w in C01(	nr_seq_protocolo_p, nr_seq_lote_p, ie_importacao_nova_w) loop


		-- se não encontrou algum prestador verifica somente os que são nulos
		if (coalesce(r_c01_w.nr_seq_prestador_imp_ref::text, '') = '') then

			--se existe algum protocolo integrado com as mesmas informações
			select	max(nr_sequencia)
			into STRICT	nr_seq_prot_importado_w
			from	(
				SELECT	a.nr_sequencia
				from	pls_protocolo_conta a
				where	a.nr_protocolo_prestador = r_c01_w.nr_protocolo_prestador
				and	coalesce(a.nr_seq_prestador::text, '') = ''
				and	a.ie_tipo_guia = r_c01_w.ie_tipo_guia
				and	a.nr_sequencia != r_c01_w.nr_sequencia
				and	a.ie_situacao not in ('I', 'A', 'RE')	-- ** verificar se o correto não seria restringir por = 'T'
				and	a.ie_status != '4'
				
union all

				SELECT	a.nr_sequencia
				from	pls_protocolo_conta a
				where	a.nr_protocolo_prestador = r_c01_w.nr_protocolo_prestador
				and	coalesce(a.nr_seq_prestador::text, '') = ''
				and	a.ie_tipo_guia = r_c01_w.ie_tipo_guia
				and	a.nr_sequencia != r_c01_w.nr_sequencia
				and	a.ie_status != '4'
				and	exists (select  1
						 from 	 pls_xml_lote x
						 where 	 x.nr_seq_lote = a.nr_seq_lote_conta
						 and     x.ie_status in ('IMP', 'VAL')));

		-- senão verifica pelo prestador identificado
		else

			--se existe algum protocolo integrado com as mesmas informações
			select	max(nr_sequencia)
			into STRICT	nr_seq_prot_importado_w
			from	(
				SELECT	a.nr_sequencia
				from	pls_protocolo_conta a
				where	a.nr_protocolo_prestador = r_c01_w.nr_protocolo_prestador
				and	a.nr_seq_prestador = r_c01_w.nr_seq_prestador_imp_ref
				and	a.ie_tipo_guia = r_c01_w.ie_tipo_guia
				and	a.nr_sequencia != r_c01_w.nr_sequencia
				and	a.ie_situacao not in ('I', 'A', 'RE')	-- ** verificar se o correto não seria restringir por = 'T'
				and	a.ie_status != '4'
				
union all

				SELECT	a.nr_sequencia
				from	pls_protocolo_conta a
				where	a.nr_protocolo_prestador = r_c01_w.nr_protocolo_prestador
				and	a.nr_seq_prestador = r_c01_w.nr_seq_prestador_imp_ref
				and	a.ie_tipo_guia = r_c01_w.ie_tipo_guia
				and	a.nr_sequencia != r_c01_w.nr_sequencia
				and	a.ie_status != '4'
				and	exists (select  1
						 from 	 pls_xml_lote x
						 where 	 x.nr_seq_lote = a.nr_seq_lote_conta
						 and     x.ie_status in ('IMP', 'VAL')));
		end if;

		-- caso não tenha nenhum protocolo integrado, verifica se existe algum protolo aceito no mesmo lote com as mesmas infromações
		if (coalesce(nr_seq_prot_importado_w::text, '') = '') then

			select 	max(nr_sequencia)
			into STRICT	nr_seq_prot_importado_w
			from    pls_protocolo_conta
			where   ds_hash = r_c01_w.ds_hash
			and	nr_seq_lote_conta = r_c01_w.nr_seq_lote_conta
			and	nr_sequencia != r_c01_w.nr_sequencia;
		end if;

		if (ie_valida_lote_prestador_w = 'S') then
			nr_protocolo_prestador_w := null;

			-- a validação anterior é feita pelo hash porém foi verificado que o prestador pode ter alterado alguma informação no protocolo e
			-- tente importar novamente e desta forma foi necessário criar mais uma validação
			select 	max(nr_sequencia)
			into STRICT	nr_protocolo_prestador_w
			from    pls_protocolo_conta
			where   nr_seq_prestador = nr_seq_prestador_w
			and	nr_protocolo_prestador = r_c01_w.nr_protocolo_prestador
			and	nr_sequencia != r_c01_w.nr_sequencia;

			if (nr_protocolo_prestador_w IS NOT NULL AND nr_protocolo_prestador_w::text <> '') then

				ds_mensagem_erro_w := 	' Parâmetro [46]  - Consiste a informação do número do lote e código prestador na operadora (ou CGC/CPF) no upload de contas médicas. ' ||
							' Lote: ' || r_c01_w.nr_protocolo_prestador || '; Seq. Prestador: ' || nr_seq_prestador_w;
			end if;
		end if;

		-- se encontrou algum protocolo...
		if (nr_seq_prot_importado_w IS NOT NULL AND nr_seq_prot_importado_w::text <> '') then

			select	max(nr_seq_lote_conta),
				to_char(max(dt_integracao),'dd/mm/yyyy hh24:mi:ss')
			into STRICT	nr_seq_lote_importado_w,
				dt_integracao_w
			from	pls_protocolo_conta
			where	nr_sequencia = nr_seq_prot_importado_w;

			if (ie_origem_processo_p = 'C') then

				update	pls_lote_protocolo_conta
				set	dt_confirmacao  = NULL
				where	nr_sequencia = r_c01_w.nr_seq_lote_conta;

				CALL pls_gerar_log_erro_importacao(	r_c01_w.nr_sequencia, nm_usuario_p, 2899,
								' Esse arquivo já foi integrado no protocolo ' || nr_seq_prot_importado_w ||
								' do lote ' || nr_seq_lote_importado_w || ' na data ' || dt_integracao_w || '.');
			end if;

			ds_mensagem_erro_w := 	ds_mensagem_erro_w || ' O arquivo do protocolo ' || r_c01_w.nr_sequencia || ' já foi integrado no protocolo ' ||
						nr_seq_prot_importado_w || ' do lote ' || nr_seq_lote_importado_w || ' na data ' || dt_integracao_w || '.';

		-- se não encontrou porém tem que validar lote e prestador
		elsif (ie_origem_processo_p = 'C') then

			-- verifica se o procolo está com o mês fechado, no momento da confirmação do mesmo
			select	coalesce(max(a.dt_aceite),clock_timestamp())
			into STRICT	dt_aceite_w
			from	ptu_fatura a
			where	a.nr_seq_protocolo = r_c01_w.nr_sequencia;

			select 	count(1)
			into STRICT	qt_regra_w
			from	pls_regra_prest_integracao
			where   ie_situacao = 'A'
			and	coalesce(dt_fim_vigencia::text, '') = '';
			--se não tiver regra, deve ser verificado apenas se o mês  atual, pois se usar a data de competencia doprotocolo mesmo sem regra, pode cair em um mes que esteja fechado.
			if ( qt_regra_w = 0) then

				dt_mes_competencia_w := clock_timestamp();

			else

				dt_mes_competencia_w := pls_obter_dataref_prot_imp(	nr_seq_prestador_w, r_c01_w.ie_origem_protocolo,
											r_c01_w.dt_mes_competencia, r_c01_w.dt_protocolo,
											r_c01_w.dt_recebimento, dt_aceite_w,
											r_c01_w.ie_tipo_guia,r_c01_w.nr_sequencia, cd_estabelecimento_p);

			end if;

			ie_fechado_w :=	pls_obter_se_mes_fechado(	dt_mes_competencia_w, 'T', cd_estabelecimento_p);

			if (ie_fechado_w = 'S') then

				ds_mensagem_erro_w := ds_mensagem_erro_w|| ' Não é possível realizar esta operação pois o mês de competência ou a contabilidade do mês está fechada! ';

				if (ie_origem_processo_p = 'C') then

					-- rejeita o protocolo
					update	pls_lote_protocolo_conta
					set 	dt_confirmacao  = NULL
					where	nr_sequencia = r_c01_w.nr_seq_lote_conta;

					CALL pls_gerar_log_erro_importacao(	r_c01_w.nr_sequencia, nm_usuario_p, 2899,
									ds_mensagem_erro_w);

				end if;
			end if;
		end if;
	end loop;
end if;

ds_mensagem_erro_p := ds_mensagem_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_se_xml_valido (nr_seq_lote_p pls_protocolo_conta.nr_seq_lote_conta%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, ie_permite_duplicidade_p text, ie_origem_processo_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ds_mensagem_erro_p INOUT text) FROM PUBLIC;

