-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE lfpd_registro_0200 ( nr_seq_controle_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) AS $body$
DECLARE


contador_w		bigint := 0;
ds_arquivo_w		varchar(4000);
ds_arquivo_compl_w	varchar(4000);
ds_linha_w		varchar(8000);
nr_linha_w		bigint	:= qt_linha_p;
nr_seq_registro_w	bigint	:= nr_sequencia_p;
sep_w			varchar(1)	:= ds_separador_p;
cd_servico_w		grupo_servico.cd_servico%type;
cd_cgc_w		varchar(14);

c01 CURSOR FOR
	SELECT	distinct '0200'													cd_registro,
		'P' || i.cd_procedimento || coalesce(to_char(i.ie_origem_proced),'1') 						cd_item,
		obter_descricao_procedimento(i.cd_procedimento, i.ie_origem_proced) 						ds_item,
		'00'														ds_ncm,
		obter_dados_grupo_servico_item(obter_item_servico_proced(i.cd_procedimento, i.ie_origem_proced),'CD')		ds_lista_servico
	from 	nota_fiscal_item i,
		nota_fiscal_venc v,
		nota_fiscal c,
		procedimento p,
		operacao_nota o,
		natureza_operacao a
	where	c.nr_sequencia 	= i.nr_sequencia
	and	c.nr_sequencia 		= v.nr_sequencia
	and	c.cd_operacao_nf 	= o.cd_operacao_nf
	and	a.cd_natureza_operacao = i.cd_natureza_operacao
	and	p.cd_procedimento 	= i.cd_procedimento
	and	p.ie_origem_proced 	= i.ie_origem_proced
	and	c.cd_estabelecimento = cd_estabelecimento_p
	and	(c.dt_atualizacao_estoque IS NOT NULL AND c.dt_atualizacao_estoque::text <> '')
	--and	nvl(Obter_se_nota_entrada_saida(c.nr_sequencia),'E') = 'S'    -  gerar tanto da entrada como da saída
	and 	(i.cd_procedimento IS NOT NULL AND i.cd_procedimento::text <> '')
	and	to_char(c.dt_emissao,'dd/MM/yy') between to_date(dt_inicio_p,'dd/MM/yy') and to_date(dt_fim_p,'dd/MM/yy')
	and	c.vl_total_nota > 0
	and	(c.dt_atualizacao_estoque IS NOT NULL AND c.dt_atualizacao_estoque::text <> '')
	and	c.ie_situacao = 1
	and 	o.ie_servico = 'S'
	
union all

	SELECT	distinct '0200'	cd_registro,
		'M' || to_char(i.cd_material) cd_item,
		m.ds_material ds_item,
		'00' ds_ncm,
		'0403' ds_lista_servico
	from 	nota_fiscal_item i,
		nota_fiscal_venc v,
		nota_fiscal c,
		operacao_nota o,
		material m
	where	c.nr_sequencia = i.nr_sequencia
	and	c.nr_sequencia = v.nr_sequencia
	and	c.cd_operacao_nf = o.cd_operacao_nf
	and	i.cd_material = m.cd_material
	and	c.cd_estabelecimento = cd_estabelecimento_p
	-- and	nvl(Obter_se_nota_entrada_saida(c.nr_sequencia),'E') = 'E'  - gerar tanto da entrada como de saída
	and 	(i.cd_material IS NOT NULL AND i.cd_material::text <> '')
	and	to_char(c.dt_emissao,'dd/MM/yy') between to_date(dt_inicio_p,'dd/MM/yy') and to_date(dt_fim_p,'dd/MM/yy')
	and	c.vl_total_nota > 0
	and	(c.dt_atualizacao_estoque IS NOT NULL AND c.dt_atualizacao_estoque::text <> '')
	and	c.ie_situacao = 1
	and 	o.ie_servico = 'S'
	order by
		2;

vet01	c01%RowType;


BEGIN

open c01;
loop
fetch c01 into
	vet01;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	select 	REPLACE(substr(lpad(max(a.cd_servico),5,'0'),1,5),'.','')
	into STRICT	cd_servico_w
	from	grupo_servico a,
		grupo_servico_item b
	where	a.nr_sequencia = b.nr_seq_grupo_serv
	and	cd_item_servico = vet01.ds_lista_servico;

	contador_w := contador_w + 1;

	ds_linha_w	:= substr(	 sep_w	|| vet01.cd_registro		|| sep_w
						|| vet01.cd_item		|| sep_w
						|| vet01.ds_item		|| sep_w
						|| vet01.ds_ncm			|| sep_w
						|| cd_servico_w			|| sep_w, 1, 8000);

	ds_arquivo_w		:= substr(ds_linha_w,1,4000);
	ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
	nr_seq_registro_w	:= nr_seq_registro_w + 1;
	nr_linha_w		:= nr_linha_w + 1;

	insert into fis_lfpd_arquivo(	nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_linha,
						ds_arquivo,
						ds_arquivo_compl,
						cd_registro,
						nr_seq_controle_lfpd)
				values (	nextval('fis_lfpd_arquivo_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_linha_w,
						ds_arquivo_w,
						ds_arquivo_compl_w,
						vet01.cd_registro,
						nr_seq_controle_p);

	if (mod(contador_w,100) = 0) then
		commit;
	end if;

	end;
end loop;
close c01;

commit;

qt_linha_p	:= nr_linha_w;
nr_sequencia_p	:= nr_seq_registro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE lfpd_registro_0200 ( nr_seq_controle_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) FROM PUBLIC;

