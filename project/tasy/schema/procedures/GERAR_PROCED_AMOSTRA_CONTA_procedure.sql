-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proced_amostra_conta ( nr_prescricao_p bigint, cd_perfil_p bigint, cd_funcao_p bigint, cd_categoria_p text, nm_usuario_p text, nr_seq_laudo_p bigint default null) AS $body$
DECLARE


qt_exames_complementar_w	bigint;
nr_seq_prescr_proc_peca_w	bigint;
nr_sequencia_peca_w		bigint;
qt_procedimento_w		double precision;
qt_conta_prov_w			bigint;
qt_conta_def_w			bigint;
nr_atendimento_w		bigint;
nr_sequencia_w			bigint;
nr_seq_interno_w		bigint;
cd_especialidade_w		integer;
nr_seq_pq_proc_w		bigint;
cd_especialidade_prescr_w	bigint;
ie_origem_proced_comple_w	bigint;
ie_origem_proced_principal_w	bigint;
cd_estabelecimento_w		bigint;
ie_tipo_servico_sus_w		smallint;
ie_tipo_ato_sus_w		smallint;
ie_tipo_atendimento_w		smallint;
ie_clinica_w			integer;
nr_seq_exame_w			bigint;
nr_seq_proc_interno_w		bigint;
nr_seq_classificacao_w		bigint;
nr_seq_checkup_etapa_w		bigint;
nr_seq_etapa_checkup_w		bigint;
ie_tipo_atend_bpa_w		smallint;
ie_grupo_atend_bpa_w		smallint;
nr_seq_prescr_w			bigint;
cd_procedimento_comple_w	bigint;
cd_procedimento_principal_w	bigint;
ie_tipo_exame_w			bigint;
cd_setor_atendimento_w		integer;
cd_atividade_profissional_w	smallint;
cd_convenio_w			integer;
dt_procedimento_w		timestamp;
dt_entrada_unidade_w		timestamp;
dt_prescricao_w			timestamp;
dt_fim_conta_w			timestamp;
dt_entrada_w			timestamp;
cd_pessoa_usuario_w		varchar(10);
ie_funcao_medico_w		varchar(10);
ie_via_acesso_w			varchar(10);
ie_tipo_data_w			varchar(10);
cd_cbo_w			varchar(6) := '';
cd_cid_w			varchar(4);
cd_pessoa_fisica_w		varchar(10);
ie_consiste_cbo_compativel_w	varchar(1):= 'N';
cd_cgc_prest_regra_w		varchar(14);
ie_atual_cid_w			varchar(1):= 'N';
ie_medico_executor_w		varchar(10);
cd_medico_executor_w		varchar(10);
cd_medico_prescr_w		varchar(10);
cd_medico_req_w			varchar(10);
cd_medico_resp_w		varchar(10);
ie_tipo_guia_w			varchar(2);
cd_medico_w			varchar(10);
nr_doc_convenio_w		varchar(20);
cd_medico_exec_w		varchar(10);
cd_profissional_w		varchar(10);
cd_categoria_w			varchar(10);
cd_plano_convenio_w		varchar(10);
cd_tipo_acomodacao_w		smallint;
cd_cgc_prestador_w		varchar(14);
cd_senha_w			varchar(20);
ie_fim_conta_w			varchar(1);
nr_seq_tipo_amostra_w		bigint;
nr_seq_tipo_amostra_pat_w	bigint;
ie_verif_periodo_conta_sus_w	varchar(10) := 'N';
ie_origem_inf_w			varchar(1);
cd_cgc_laboratorio_w		varchar(14);
ie_executar_exame_compl_w	varchar(2) := 'S';
ie_permite_gerar_definitivo_w	varchar(15);
nr_seq_proc_paciente_w		bigint;
nr_seq_peca_exame_compl_w	bigint;
nr_seq_exame_complementar_w	bigint;
cd_procedimento_anticorp_w	bigint;
ie_origem_proced_anticorp_w	integer;
qt_registros_w			bigint;
ie_gerar_conta_w		varchar(10);
cd_setor_prescricao_w		integer;
--qt_lancamento_w			number(09,3)	:= 0;
ie_acao_excesso_w		varchar(10);
qt_excedida_w			double precision;
ds_erro_uso_w			varchar(80);
cd_convenio_excesso_w		integer;
cd_categoria_excesso_w		varchar(10);
nr_conta_w			bigint;
ie_permite_inserir_w		varchar(1) := 'S';
qt_procedimento_atend_w		bigint;
cd_motivo_exc_conta_w		bigint;

C01 CURSOR FOR
	SELECT 	a.nr_seq_prescr,
		a.nr_sequencia,
		a.dt_atualizacao,
		b.cd_procedimento,
		b.ie_tipo_exame,
		b.ie_origem_proced,
		c.cd_medico,
		c.dt_prescricao,
		c.cd_especialidade,
		c.dt_entrada_unidade,
		c.cd_estabelecimento,
		coalesce(d.nr_doc_convenio,coalesce(c.nr_doc_conv,f.nr_doc_convenio)),
		coalesce(d.cd_setor_atendimento,coalesce(c.cd_setor_entrega,c.cd_setor_atendimento)),
		CASE WHEN coalesce(c.nr_doc_conv::text, '') = '' THEN f.ie_tipo_guia  ELSE 'E' END ,
		coalesce(d.cd_senha,coalesce(c.cd_senha,f.cd_senha)),
		d.cd_medico_exec,
		d.cd_atividade_prof_bpa,
		d.cd_profissional,
		d.ie_tipo_atend_bpa,
		d.ie_grupo_atend_bpa,
		d.nr_seq_pq_proc,
		null,
		e.nr_atendimento,
		e.cd_medico_resp,
		e.dt_entrada,
		f.cd_convenio,
		f.cd_categoria,
		f.cd_plano_convenio,
		f.cd_tipo_acomodacao,
		b.nr_sequencia,
		g.nr_sequencia,
		e.ie_tipo_atendimento,
		a.nr_seq_proc_paciente
	FROM atend_categoria_convenio f, atendimento_paciente e, prescr_procedimento d, prescr_medica c, prescr_proc_peca a
LEFT OUTER JOIN tipo_amostra b ON (a.nr_seq_tipo = b.nr_sequencia)
LEFT OUTER JOIN tipo_amostra_patologia g ON (a.nr_seq_amostra_princ = g.nr_sequencia)
WHERE a.nr_prescricao 	= nr_prescricao_p and coalesce(a.nr_seq_peca::text, '') = '' and ((coalesce(a.nr_seq_proc_paciente::text, '') = '') or (ie_executar_exame_compl_w  in ('S','R')))  and c.nr_prescricao 	= a.nr_prescricao and d.nr_prescricao 	= a.nr_prescricao and d.nr_sequencia  	= a.nr_seq_prescr and e.nr_atendimento  	= c.nr_atendimento and f.nr_atendimento  	= c.nr_atendimento  and f.nr_seq_interno	= obter_atecaco_atendimento(c.nr_atendimento);WITH RECURSIVE cte AS (


C02 CURSOR FOR
	SELECT 	a.nr_sequencia,a.nr_seq_exame_complementar
	from 	prescr_proc_peca a
	 WHERE nr_sequencia = nr_seq_prescr_proc_peca_w
  UNION ALL


C02 CURSOR FOR
	SELECT 	a.nr_sequencia,a.nr_seq_exame_complementar
	from 	prescr_proc_peca a
	 JOIN cte c ON (c.prior nr_sequencia = a.nr_seq_peca)

) SELECT * FROM cte WHERE nr_prescricao = nr_prescricao_p
	and 	(a.nr_seq_peca IS NOT NULL AND a.nr_seq_peca::text <> '');
;
	

C03 CURSOR FOR
	SELECT  b.cd_procedimento,
	        b.ie_origem_proced
	from    prescr_proc_result_antic a,
		patologia_anticorpos b
	where   a.nr_seq_anticorpo = b.nr_sequencia
	and     a.nr_seq_prescr_proc_compl = nr_seq_exame_complementar_w
	and     a.nr_seq_prescr_proc_peca = nr_sequencia_peca_w
	and	(b.cd_procedimento IS NOT NULL AND b.cd_procedimento::text <> '')
	and	(b.ie_origem_proced IS NOT NULL AND b.ie_origem_proced::text <> '')
	and	qt_registros_w > 0
	order   by 1;


BEGIN

ie_executar_exame_compl_w	:= coalesce(obter_valor_param_usuario(945, 73, cd_perfil_p, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');


select	max(cd_motivo_exc_conta)
into STRICT	cd_motivo_exc_conta_w
from	parametro_faturamento
where	cd_estabelecimento	= wheb_usuario_pck.get_cd_estabelecimento;


open C01;
loop
fetch C01 into
	nr_seq_prescr_w,
	nr_seq_prescr_proc_peca_w,
	dt_procedimento_w,
	cd_procedimento_principal_w,
	ie_tipo_exame_w,
	ie_origem_proced_principal_w,
	cd_medico_w,
	dt_prescricao_w,
	cd_especialidade_w,
	dt_entrada_unidade_w,
	cd_estabelecimento_w,
	nr_doc_convenio_w,
	cd_setor_atendimento_w,
	ie_tipo_guia_w,
	cd_senha_w,
	cd_medico_exec_w,
	cd_atividade_profissional_w,
	cd_profissional_w,
	ie_tipo_atend_bpa_w,
	ie_grupo_atend_bpa_w,
	nr_seq_pq_proc_w,
	nr_seq_exame_w,
	nr_atendimento_w,
	cd_medico_resp_w,
	dt_entrada_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_plano_convenio_w,
	cd_tipo_acomodacao_w,
	nr_seq_tipo_amostra_w,
	nr_seq_tipo_amostra_pat_w,
	ie_tipo_atendimento_w,
	nr_seq_proc_paciente_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin	

	ie_permite_gerar_definitivo_w := coalesce((obter_valor_param_usuario(916, 80, cd_perfil_p, nm_usuario_p, 0)), 'S');

	ie_verif_periodo_conta_sus_w := coalesce(obter_valor_param_usuario(945,68,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');

	select	coalesce(max(cd_procedimento),cd_procedimento_principal_w),
		coalesce(max(ie_origem_proced),ie_origem_proced_principal_w)
	into STRICT	cd_procedimento_principal_w,
		ie_origem_proced_principal_w
	from	regra_patologia_proced
	where	coalesce(nr_seq_amostra_patologia,nr_seq_tipo_amostra_pat_w) = nr_seq_tipo_amostra_pat_w
	and	coalesce(nr_seq_tipo_amostra,nr_seq_tipo_amostra_w) = nr_seq_tipo_amostra_w
	order by nr_seq_amostra_patologia,
		 nr_seq_tipo_amostra LIMIT 1;


	qt_procedimento_w	:= 1;

	dt_entrada_unidade_w := dt_prescricao_w;

	if (dt_entrada_w > dt_entrada_unidade_w) then
		dt_entrada_unidade_w := dt_entrada_w;
	end if;
	if (dt_entrada_unidade_w > clock_timestamp()) then
		dt_entrada_unidade_w := clock_timestamp();
	end if;

	select	max(ie_fim_conta)
	into STRICT	ie_fim_conta_w
	from	atendimento_paciente
	where 	nr_atendimento = nr_atendimento_w;

	if	((ie_permite_gerar_definitivo_w = 'N') or
		((ie_permite_gerar_definitivo_w = 'S')	and
		((coalesce(ie_verif_periodo_conta_sus_w,'N') = 'S') or
		((coalesce(ie_verif_periodo_conta_sus_w,'N') = 'D') and (obter_se_lib_tipo_atend_pat(ie_tipo_atendimento_w, 3) = 'N')))))  then

		if (ie_fim_conta_w = 'F') then
			--O atendimento esta fechado, os procedimento nao poderao ser executados
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(191437);
		end if;

		if	((coalesce(ie_verif_periodo_conta_sus_w,'N') = 'S')  and (obter_tipo_convenio(cd_convenio_w) = 3)) then
			begin

			select	count(*)
			into STRICT	qt_conta_prov_w
			from	conta_paciente
			where	nr_atendimento		= nr_atendimento_w
			and	ie_status_acerto	= 1
			and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final;

			end;
		else
			begin

			select	count(*)
			into STRICT	qt_conta_prov_w
			from	conta_paciente
			where	nr_atendimento		= nr_atendimento_w
			and	ie_status_acerto	= 1;

			end;
		end if;

		select	count(*)
		into STRICT	qt_conta_def_w
		from	conta_paciente
		where	nr_atendimento		= nr_atendimento_w
		and	ie_status_acerto	= 2;

		if (qt_conta_prov_w = 0) and (qt_conta_def_w > 0) then
			-- A conta do atendimento esta com status definitivo. O procedimento nao pode ser executado!
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(191438);
		end if;
	end if;
	begin
	select	b.cd_cgc
	into STRICT	cd_cgc_prestador_w
	from	estabelecimento b,
		atendimento_paciente a
	where	a.nr_atendimento	= nr_atendimento_w
	and	a.cd_estabelecimento	= b.cd_estabelecimento;
	exception
		when others then
			cd_cgc_prestador_w := '';
	end;

	if (coalesce(nr_prescricao_p,0) > 0) then

		select	max(cd_setor_atendimento)
		into STRICT	cd_setor_prescricao_w
		from	prescr_medica
		where	nr_prescricao = nr_prescricao_p;

		if (coalesce(nr_seq_prescr_w,0) > 0) then
			select	max(ie_origem_inf),
				max(cd_cgc_laboratorio)
			into STRICT	ie_origem_inf_w,
				cd_cgc_laboratorio_w
			from	prescr_procedimento
			where	nr_prescricao = nr_prescricao_p
			and	nr_sequencia = nr_seq_prescr_w;
		end if;

	end if;

	SELECT * FROM consiste_medico_executor(cd_estabelecimento_w, cd_convenio_w, cd_setor_atendimento_w, cd_procedimento_principal_w, ie_origem_proced_principal_w, ie_tipo_atendimento_w, nr_seq_exame_w, nr_seq_proc_interno_w, ie_medico_executor_w, cd_cgc_prest_regra_w, cd_medico_executor_w, cd_pessoa_fisica_w, coalesce(cd_medico_exec_w,cd_medico_prescr_w), dt_procedimento_w, nr_seq_classificacao_w, ie_origem_inf_w, cd_cgc_laboratorio_w, cd_setor_prescricao_w) INTO STRICT ie_medico_executor_w, cd_cgc_prest_regra_w, cd_medico_executor_w, cd_pessoa_fisica_w;
	begin
	ie_tipo_servico_sus_w	:= null;
	ie_tipo_ato_sus_w	:= null;

	if (ie_origem_proced_principal_w = 2) then
		SELECT * FROM definir_tipo_ato_servico(cd_estabelecimento_w, cd_procedimento_principal_w, cd_convenio_w, cd_medico_exec_w, coalesce(cd_cgc_prest_regra_w, cd_cgc_prestador_w), ie_tipo_ato_sus_w, ie_tipo_servico_sus_w) INTO STRICT ie_tipo_ato_sus_w, ie_tipo_servico_sus_w;
	end if;

	if (cd_especialidade_prescr_w IS NOT NULL AND cd_especialidade_prescr_w::text <> '') then
		cd_especialidade_w	:= cd_especialidade_prescr_w;
	end if;

	if (coalesce(wheb_usuario_pck.get_cd_especialidade,0) <> 0) then
		cd_especialidade_w	:= wheb_usuario_pck.get_cd_especialidade;
	end if;

	SELECT * FROM obter_proced_espec_medica(cd_estabelecimento_w, cd_convenio_w, cd_procedimento_principal_w, ie_origem_proced_principal_w, null, null, null, ie_clinica_w, cd_setor_atendimento_w, cd_especialidade_w, ie_funcao_medico_w, cd_medico_exec_w, nr_seq_proc_interno_w, ie_tipo_atendimento_w) INTO STRICT cd_especialidade_w, ie_funcao_medico_w;

	begin
	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_usuario_w
	from	usuario
	where	nm_usuario = nm_usuario_p;
	exception
	when others then
		cd_pessoa_usuario_w	:= null;
	end;

	if (ie_origem_proced_principal_w = 7) then
		begin
		select	max(a.cd_cbo)
		into STRICT	cd_cbo_w
		from    sus_cbo                 b,
			sus_cbo_pessoa_fisica   a
		where   sus_obter_secbo_compativel(coalesce(cd_medico_exec_w,coalesce(cd_profissional_w,cd_pessoa_fisica_w)), cd_procedimento_principal_w, ie_origem_proced_principal_w, clock_timestamp(), a.cd_cbo, 0) = 'S'
		and     cd_pessoa_fisica        = coalesce(cd_medico_exec_w, coalesce(cd_profissional_w,cd_pessoa_fisica_w))
		and     a.cd_cbo        	= b.cd_cbo;

		if (ie_consiste_cbo_compativel_w = 'S')	and (coalesce(cd_cbo_w,'X') = 'X') then
			-- O executor nao possui CBO compativel com o procedimento. Parametro [550].
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(191439);
		end if;

		select	coalesce(max(obter_valor_param_usuario(1125, 18, cd_perfil_p, nm_usuario_p, 0)), 'N')
		into STRICT	ie_atual_cid_w
		;

		if (ie_atual_cid_w = 'S') then
			begin

			select	coalesce(max(b.cd_doenca),'')
			into STRICT	cd_cid_w
			from	diagnostico_doenca	b,
				diagnostico_medico	a
			where	a.nr_atendimento	= b.nr_atendimento
			and	a.dt_diagnostico	= b.dt_diagnostico
			and	a.cd_medico		= cd_medico_exec_w
			and	a.nr_atendimento	= nr_atendimento_w;
			end;
		end if;

		if (cd_medico_exec_w IS NOT NULL AND cd_medico_exec_w::text <> '') then
			cd_pessoa_fisica_w	:= null;
		end if;
		end;
	end if;

	if (ie_tipo_atendimento_w		= 7) then
		cd_medico_req_w			:= cd_medico_resp_w;
	else	cd_medico_req_w			:= cd_medico_prescr_w;
	end if;

	begin
		select	obter_regra_via_acesso(cd_procedimento_principal_w, ie_origem_proced_principal_w, cd_estabelecimento_w, cd_convenio_w)
		into STRICT	ie_via_acesso_w
		;
	exception
		when others then
			ie_via_acesso_w	:= null;
		end;

	if (cd_procedimento_principal_w IS NOT NULL AND cd_procedimento_principal_w::text <> '') and (ie_origem_proced_principal_w IS NOT NULL AND ie_origem_proced_principal_w::text <> '') and (coalesce(nr_seq_proc_paciente_w::text, '') = '') then
		begin


		SELECT * FROM obter_regra_qtde_proc_exec(nr_atendimento_w, cd_procedimento_principal_w, ie_origem_proced_principal_w, qt_procedimento_w, clock_timestamp(), cd_medico_exec_w, ie_acao_excesso_w, qt_excedida_w, ds_erro_uso_w, cd_convenio_excesso_w, cd_categoria_excesso_w, nr_seq_proc_interno_w, coalesce(cd_categoria_p, cd_categoria_w), NULL, 0, 0, nr_seq_exame_w, cd_setor_atendimento_w, null) INTO STRICT ie_acao_excesso_w, qt_excedida_w, ds_erro_uso_w, cd_convenio_excesso_w, cd_categoria_excesso_w;

		if (ie_acao_excesso_w = 'I') and (qt_excedida_w   > 0) then
			ie_permite_inserir_w := 'N';
		else
			ie_permite_inserir_w := 'S';
		end if;

		if (ie_permite_inserir_w <> 'N') then

			select	nextval('procedimento_paciente_seq')
			into STRICT	nr_sequencia_w
			;

			insert into procedimento_paciente(nr_sequencia,
				nr_atendimento,
				dt_entrada_unidade,
				cd_procedimento,
				dt_procedimento,
				qt_procedimento,
				dt_atualizacao,
				nm_usuario,
				cd_convenio,
				cd_categoria,
				dt_prescricao,
				nr_prescricao,
				nr_sequencia_prescricao,
				cd_acao,
				cd_setor_atendimento,
				ie_origem_proced,
				tx_procedimento,
				cd_cgc_prestador,
				nm_usuario_original,
				nr_doc_convenio,
				nr_seq_atepacu,
				ie_auditoria,
				cd_medico_executor,
				cd_atividade_prof_bpa,
				ie_tipo_servico_sus,
				ie_tipo_ato_sus,
				nr_seq_exame,
				ie_tipo_guia,
				cd_senha,
				nr_seq_proc_interno,
				cd_medico_req,
				ie_tipo_atend_bpa,
				ie_grupo_atend_bpa,
				cd_pessoa_fisica,
				nr_seq_pq_proc,
				cd_especialidade,
				ie_funcao_medico,
				ie_tecnica_utilizada,
				ie_via_acesso,
				ds_observacao,
				ie_integracao,
				cd_cbo,
				cd_doenca_cid,
				nr_seq_etapa_checkup,
				nr_seq_checkup_etapa)
			values (nr_sequencia_w,
				nr_atendimento_w,
				dt_entrada_unidade_w,
				cd_procedimento_principal_w,
				dt_procedimento_w,
				qt_procedimento_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_convenio_w,
				coalesce(cd_categoria_p, cd_categoria_w),
				dt_prescricao_w,
				nr_prescricao_p,
				nr_seq_prescr_w,
				1,
				cd_setor_atendimento_w,
				ie_origem_proced_principal_w,
				100,
				coalesce(cd_cgc_prest_regra_w, cd_cgc_prestador_w),
				nm_usuario_p,
				nr_doc_convenio_w,
				Obter_Atepacu_paciente(nr_atendimento_w,'A'),
				'N',
				cd_medico_exec_w,
				cd_atividade_profissional_w,
				ie_tipo_servico_sus_w,
				ie_tipo_ato_sus_w,
				nr_seq_exame_w,
				ie_tipo_guia_w,
				cd_senha_w,
				nr_seq_proc_interno_w,
				cd_medico_req_w,
				ie_tipo_atend_bpa_w,
				ie_grupo_atend_bpa_w,
				coalesce(cd_profissional_w,cd_pessoa_fisica_w),
				nr_seq_pq_proc_w,
				cd_especialidade_w,
				ie_funcao_medico_w,
				null,
				ie_via_acesso_w,
				--'Funcao: '||to_char(cd_funcao_p) ||' Perfil: '||to_char(cd_perfil_p) ||' Tipo data: S',
				wheb_mensagem_pck.get_texto(303986, 'CD_FUNCAO=' || to_char(cd_funcao_p) ||';'|| 'CD_PERFIL=' || to_char(cd_perfil_p)),
				CASE WHEN cd_funcao_p=0 THEN  'N'  ELSE 'S' END ,
				cd_cbo_w,
				cd_cid_w,
				nr_seq_etapa_checkup_w,
				nr_seq_checkup_etapa_w);

			commit;
			CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
			update	procedimento_paciente
			set	cd_procedimento = cd_procedimento_principal_w
			where	nr_sequencia	= nr_sequencia_w;
			commit;

			update 	prescr_proc_peca
			set	nr_seq_proc_paciente 	= nr_sequencia_w,
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
			where	nr_sequencia		= nr_seq_prescr_proc_peca_w;
			commit;


			if (ie_acao_excesso_w = 'E') and (qt_excedida_w   > 0)then

				select 	max(nr_interno_conta)
				into STRICT	nr_conta_w
				from 	procedimento_paciente
				where 	nr_sequencia = nr_sequencia_w;

				--excluir_matproc_conta(nr_sequencia_w, nr_conta_w, cd_motivo_exc_conta_w, 'Excluido pela regra de uso da funcao Cadastro de Convenios', 'P', nm_usuario_p);
				CALL excluir_matproc_conta(nr_sequencia_w, nr_conta_w, cd_motivo_exc_conta_w, wheb_mensagem_pck.get_texto(303984), 'P', nm_usuario_p);


			end if;

		end if;
		end;
	end if;	
	
	open C02;
	loop
	fetch C02 into
		nr_sequencia_peca_w,
		nr_seq_exame_complementar_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		if (coalesce(ie_executar_exame_compl_w,'N') = 'N') then

			select	max(c.cd_procedimento),
				max(c.ie_origem_proced),
				max(c.ie_gera_conta),
				max(c.nr_seq_proc_interno),
				count(*)
			into STRICT	cd_procedimento_comple_w,
				ie_origem_proced_comple_w,
				ie_gerar_conta_w,
				nr_seq_interno_w,
				qt_registros_w
			FROM patologia_exame_compl c, prescr_proc_peca a
LEFT OUTER JOIN tipo_amostra b ON (a.nr_seq_tipo = b.nr_sequencia)
WHERE a.nr_seq_pato_exame 	= c.nr_sequencia and a.nr_sequencia   	= nr_sequencia_peca_w;

		elsif (ie_executar_exame_compl_w = 'S') then



			select	max(c.cd_procedimento),
					max(c.ie_origem_proced),
					max(c.ie_gera_conta),
					max(c.nr_seq_proc_interno),
					count(*)
			into STRICT	cd_procedimento_comple_w,
					ie_origem_proced_comple_w,
					ie_gerar_conta_w,
					nr_seq_interno_w,
					qt_registros_w
			 from	prescr_proc_peca a,
					tipo_amostra b,
					patologia_exame_compl c,
					prescr_proc_exame_compl d,
					laudo_pac_exame_compl e
			 where	a.nr_seq_tipo   	= b.nr_sequencia
			 and	a.nr_seq_pato_exame 	= c.nr_sequencia
			 and	a.nr_sequencia  = nr_sequencia_peca_w
			 and	d.nr_seq_peca_exame_compl = a.nr_sequencia
			 and 	e.nr_seq_exame_compl = d.nr_sequencia
			 and	e.nr_seq_laudo = nr_seq_laudo_p;


		elsif (ie_executar_exame_compl_w = 'R') then

			select	max(c.cd_procedimento),
					max(c.ie_origem_proced),
					max(c.ie_gera_conta),
					max(c.nr_seq_proc_interno),
					max(d.qt_exame),
					count(*)
			into STRICT	cd_procedimento_comple_w,
					ie_origem_proced_comple_w,
					ie_gerar_conta_w,
					nr_seq_interno_w,
					qt_procedimento_w,
					qt_registros_w					
			FROM prescr_proc_exame_compl d, patologia_exame_compl c, prescr_proc_peca a
LEFT OUTER JOIN tipo_amostra b ON (a.nr_seq_tipo = b.nr_sequencia)
WHERE a.nr_seq_pato_exame 	= c.nr_sequencia and d.nr_seq_peca_exame_compl = a.nr_sequencia and a.nr_sequencia  = nr_sequencia_peca_w;


		end if;


		if (nr_seq_interno_w IS NOT NULL AND nr_seq_interno_w::text <> '') then	--carga do procedimento validando regra pelo proc interno
			SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_setor_atendimento_w, cd_procedimento_comple_w, ie_origem_proced_comple_w, null, null, cd_tipo_acomodacao_w, '', '', '', ie_tipo_atendimento_w, 0, 0, clock_timestamp()) INTO STRICT cd_procedimento_comple_w, ie_origem_proced_comple_w;
		end if;


		if (cd_procedimento_comple_w IS NOT NULL AND cd_procedimento_comple_w::text <> '') and (ie_origem_proced_comple_w IS NOT NULL AND ie_origem_proced_comple_w::text <> '') and (ie_gerar_conta_w = 'S') then
			begin

			SELECT * FROM obter_regra_qtde_proc_exec(nr_atendimento_w, cd_procedimento_comple_w, ie_origem_proced_comple_w, qt_procedimento_w, clock_timestamp(), cd_medico_exec_w, ie_acao_excesso_w, qt_excedida_w, ds_erro_uso_w, cd_convenio_excesso_w, cd_categoria_excesso_w, nr_seq_proc_interno_w, coalesce(cd_categoria_p, cd_categoria_w), NULL, 0, 0, nr_seq_exame_w, cd_setor_atendimento_w, null) INTO STRICT ie_acao_excesso_w, qt_excedida_w, ds_erro_uso_w, cd_convenio_excesso_w, cd_categoria_excesso_w;


			if (ie_acao_excesso_w = 'I') and (qt_excedida_w   > 0)then

				ie_permite_inserir_w := 'N';
			else
				ie_permite_inserir_w := 'S';

			end if;

			if (ie_permite_inserir_w <> 'N') then

				select	nextval('procedimento_paciente_seq')
				into STRICT	nr_sequencia_w
				;

				insert into procedimento_paciente(nr_sequencia,
					nr_atendimento,
					dt_entrada_unidade,
					cd_procedimento,
					dt_procedimento,
					qt_procedimento,
					dt_atualizacao,
					nm_usuario,
					cd_convenio,
					cd_categoria,
					dt_prescricao,
					nr_prescricao,
					nr_sequencia_prescricao,
					cd_acao,
					cd_setor_atendimento,
					ie_origem_proced,
					tx_procedimento,
					cd_cgc_prestador,
					nm_usuario_original,
					nr_doc_convenio,
					nr_seq_atepacu,
					ie_auditoria,
					cd_medico_executor,
					cd_atividade_prof_bpa,
					ie_tipo_servico_sus,
					ie_tipo_ato_sus,
					nr_seq_exame,
					ie_tipo_guia,
					cd_senha,
					nr_seq_proc_interno,
					cd_medico_req,
					ie_tipo_atend_bpa,
					ie_grupo_atend_bpa,
					cd_pessoa_fisica,
					nr_seq_pq_proc,
					cd_especialidade,
					ie_funcao_medico,
					ie_tecnica_utilizada,
					ie_via_acesso,
					ds_observacao,
					ie_integracao,
					cd_cbo,
					cd_doenca_cid,
					nr_seq_etapa_checkup,
					nr_seq_checkup_etapa)
				values (nr_sequencia_w,
					nr_atendimento_w,
					dt_entrada_unidade_w,
					cd_procedimento_comple_w,
					dt_procedimento_w,
					qt_procedimento_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_convenio_w,
					coalesce(cd_categoria_p, cd_categoria_w),
					dt_prescricao_w,
					nr_prescricao_p,
					nr_seq_prescr_w,
					1,
					cd_setor_atendimento_w,
					ie_origem_proced_comple_w,
					100,
					coalesce(cd_cgc_prest_regra_w, cd_cgc_prestador_w),
					nm_usuario_p,
					nr_doc_convenio_w,
					Obter_Atepacu_paciente(nr_atendimento_w,'A'),
					'N',
					cd_medico_exec_w,
					cd_atividade_profissional_w,
					ie_tipo_servico_sus_w,
					ie_tipo_ato_sus_w,
					nr_seq_exame_w,
					ie_tipo_guia_w,
					cd_senha_w,
					coalesce(nr_seq_interno_w , nr_seq_proc_interno_w),
					cd_medico_req_w,
					ie_tipo_atend_bpa_w,
					ie_grupo_atend_bpa_w,
					coalesce(cd_profissional_w,cd_pessoa_fisica_w),
					nr_seq_pq_proc_w,
					cd_especialidade_w,
					ie_funcao_medico_w,
					null,
					ie_via_acesso_w,
					--'Funcao: '||to_char(cd_funcao_p) ||' Perfil: '||to_char(cd_perfil_p) ||' Tipo data: S',
					wheb_mensagem_pck.get_texto(303986, 'CD_FUNCAO=' || to_char(cd_funcao_p) ||';'|| 'CD_PERFIL=' || to_char(cd_perfil_p)),
					CASE WHEN cd_funcao_p=0 THEN  'N'  ELSE 'S' END ,
					cd_cbo_w,
					cd_cid_w,
					nr_seq_etapa_checkup_w,
					nr_seq_checkup_etapa_w);

				commit;
				CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				update	procedimento_paciente
				set	cd_procedimento = cd_procedimento_comple_w
				where	nr_sequencia	= nr_sequencia_w;
				commit;

				update 	prescr_proc_peca
				set	nr_seq_proc_paciente 	= nr_sequencia_w,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia		= nr_seq_prescr_proc_peca_w;
				commit;

				if (ie_acao_excesso_w = 'E') and (qt_excedida_w   > 0)then

					select 	max(nr_interno_conta)
					into STRICT	nr_conta_w
					from 	procedimento_paciente
					where 	nr_sequencia = nr_sequencia_w;

					--excluir_matproc_conta(nr_sequencia_w, nr_conta_w, cd_motivo_exc_conta_w, 'Excluido pela regra de uso da funcao Cadastro de Convenios', 'P', nm_usuario_p);
					CALL excluir_matproc_conta(nr_sequencia_w, nr_conta_w, cd_motivo_exc_conta_w, wheb_mensagem_pck.get_texto(303984), 'P', nm_usuario_p);


				end if;


			end if;

			end;
		end if;

		open C03;
		loop
		fetch C03 into
			cd_procedimento_anticorp_w,
			ie_origem_proced_anticorp_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin


			SELECT * FROM obter_regra_qtde_proc_exec(nr_atendimento_w, cd_procedimento_anticorp_w, ie_origem_proced_anticorp_w, qt_procedimento_w, clock_timestamp(), cd_medico_exec_w, ie_acao_excesso_w, qt_excedida_w, ds_erro_uso_w, cd_convenio_excesso_w, cd_categoria_excesso_w, nr_seq_proc_interno_w, coalesce(cd_categoria_p, cd_categoria_w), NULL, 0, 0, nr_seq_exame_w, cd_setor_atendimento_w, null) INTO STRICT ie_acao_excesso_w, qt_excedida_w, ds_erro_uso_w, cd_convenio_excesso_w, cd_categoria_excesso_w;

			if (ie_acao_excesso_w = 'I') and (qt_excedida_w   > 0)then

				ie_permite_inserir_w := 'N';
			else
				ie_permite_inserir_w := 'S';

			end if;

			if (ie_permite_inserir_w <> 'N') then

				select	nextval('procedimento_paciente_seq')
				into STRICT	nr_sequencia_w
				;

				insert into procedimento_paciente(nr_sequencia,
					nr_atendimento,
					dt_entrada_unidade,
					cd_procedimento,
					dt_procedimento,
					qt_procedimento,
					dt_atualizacao,
					nm_usuario,
					cd_convenio,
					cd_categoria,
					dt_prescricao,
					nr_prescricao,
					nr_sequencia_prescricao,
					cd_acao,
					cd_setor_atendimento,
					ie_origem_proced,
					tx_procedimento,
					cd_cgc_prestador,
					nm_usuario_original,
					nr_doc_convenio,
					nr_seq_atepacu,
					ie_auditoria,
					cd_medico_executor,
					cd_atividade_prof_bpa,
					ie_tipo_servico_sus,
					ie_tipo_ato_sus,
					nr_seq_exame,
					ie_tipo_guia,
					cd_senha,
					nr_seq_proc_interno,
					cd_medico_req,
					ie_tipo_atend_bpa,
					ie_grupo_atend_bpa,
					cd_pessoa_fisica,
					nr_seq_pq_proc,
					cd_especialidade,
					ie_funcao_medico,
					ie_tecnica_utilizada,
					ie_via_acesso,
					ds_observacao,
					ie_integracao,
					cd_cbo,
					cd_doenca_cid,
					nr_seq_etapa_checkup,
					nr_seq_checkup_etapa)
				values (nr_sequencia_w,
					nr_atendimento_w,
					dt_entrada_unidade_w,
					cd_procedimento_anticorp_w,
					dt_procedimento_w,
					qt_procedimento_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_convenio_w,
					coalesce(cd_categoria_p, cd_categoria_w),
					dt_prescricao_w,
					nr_prescricao_p,
					nr_seq_prescr_w,
					1,
					cd_setor_atendimento_w,
					ie_origem_proced_anticorp_w,
					100,
					coalesce(cd_cgc_prest_regra_w, cd_cgc_prestador_w),
					nm_usuario_p,
					nr_doc_convenio_w,
					Obter_Atepacu_paciente(nr_atendimento_w,'A'),
					'N',
					cd_medico_exec_w,
					cd_atividade_profissional_w,
					ie_tipo_servico_sus_w,
					ie_tipo_ato_sus_w,
					nr_seq_exame_w,
					ie_tipo_guia_w,
					cd_senha_w,
					nr_seq_proc_interno_w,
					cd_medico_req_w,
					ie_tipo_atend_bpa_w,
					ie_grupo_atend_bpa_w,
					coalesce(cd_profissional_w,cd_pessoa_fisica_w),
					nr_seq_pq_proc_w,
					cd_especialidade_w,
					ie_funcao_medico_w,
					null,
					ie_via_acesso_w,
					--'Funcao: '||to_char(cd_funcao_p) ||' Perfil: '||to_char(cd_perfil_p) ||' Tipo data: S',
					wheb_mensagem_pck.get_texto(303986, 'CD_FUNCAO=' || to_char(cd_funcao_p) ||';'|| 'CD_PERFIL=' || to_char(cd_perfil_p)),
					CASE WHEN cd_funcao_p=0 THEN  'N'  ELSE 'S' END ,
					cd_cbo_w,
					cd_cid_w,
					nr_seq_etapa_checkup_w,
					nr_seq_checkup_etapa_w);

				commit;
				CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				update	procedimento_paciente
				set	cd_procedimento = cd_procedimento_anticorp_w
				where	nr_sequencia	= nr_sequencia_w;
				commit;

				if (ie_acao_excesso_w = 'E') and (qt_excedida_w   > 0)then

					select 	max(nr_interno_conta)
					into STRICT	nr_conta_w
					from 	procedimento_paciente
					where 	nr_sequencia = nr_sequencia_w;

					--excluir_matproc_conta(nr_sequencia_w, nr_conta_w, cd_motivo_exc_conta_w, 'Excluido pela regra de uso da funcao Cadastro de Convenios', 'P', nm_usuario_p);
					CALL excluir_matproc_conta(nr_sequencia_w, nr_conta_w, cd_motivo_exc_conta_w, wheb_mensagem_pck.get_texto(303984), 'P', nm_usuario_p);

				end if;
			end if;
			end;
		end loop;
		close C03;

		end;
	end loop;
	close C02;
	end;
	end;
end loop;
close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proced_amostra_conta ( nr_prescricao_p bigint, cd_perfil_p bigint, cd_funcao_p bigint, cd_categoria_p text, nm_usuario_p text, nr_seq_laudo_p bigint default null) FROM PUBLIC;

