-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_fat_baixa_interc ( nr_seq_ptu_fatura_p ptu_fatura.nr_sequencia%type, dt_liquidacao_p titulo_receber.dt_liquidacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text, dt_recebimento_p titulo_receber_liq.dt_recebimento%type, vl_baixa_p titulo_receber_liq.vl_recebido%type, vl_glosa_p titulo_receber_liq.vl_glosa%type, dt_pagto_previsto_p titulo_receber.dt_pagamento_previsto%type) AS $body$
DECLARE


-- ESSA ROTINA É CHAMADA DENTRO DA TRIGGER TITULO_RECEBER_BEF_UPDATE
nr_seq_fat_baixa_interc_w		ptu_fat_baixa_interc.nr_sequencia%type;
nr_titulo_w				titulo_receber.nr_titulo%type;
nr_titulo_ndc_w				titulo_receber.nr_titulo%type;
cd_unimed_cobr_w			ptu_fatura.cd_unimed_destino%type;
cd_unimed_origem_w			ptu_fatura.cd_unimed_origem%type;
nr_documento_1_w			ptu_fatura.nr_fatura%type;
nr_documento_2_w			ptu_fatura.nr_nota_credito_debito%type;
tp_documento_1_w			ptu_fatura.tp_documento_1%type;
tp_documento_2_w			ptu_fatura.tp_documento_2%type;
vl_pago_doc_1_w				ptu_fat_baixa_dados.vl_pago_doc_1%type;
vl_pago_doc_2_w				ptu_fat_baixa_dados.vl_pago_doc_2%type;
dt_paga_doc_1_w				ptu_fat_baixa_dados.dt_paga_doc_1%type;
dt_paga_doc_2_w				ptu_fat_baixa_dados.dt_paga_doc_2%type;
id_paga_doc_1_w				ptu_fat_baixa_dados.id_paga_doc_1%type;
id_paga_doc_2_w				ptu_fat_baixa_dados.id_paga_doc_2%type;
qt_registro_w				integer := 0;
nr_seq_congenere_w			pls_congenere.nr_sequencia%type;
ie_gerar_data_pag_a510_w		pls_camara_compensacao.ie_gerar_data_pag_a510%type;
nr_versao_transacao_w			varchar(255);
dt_referencia_w				timestamp := to_date('31/01/2017');
vl_glosa_1_w				titulo_receber_liq.vl_glosa%type := 0;
vl_glosa_2_w				titulo_receber_liq.vl_glosa%type := 0;
dt_pagamento_w				ptu_fat_baixa_dados.dt_paga_doc_1%type := coalesce(dt_liquidacao_p,dt_recebimento_p);
dt_emissao_fatura_w			ptu_fatura.dt_emissao_fatura%type;


BEGIN
-- Se for gerar 510 pra título que já venceu
if (coalesce(dt_pagamento_w::text, '') = '') then
	select	count(1)
	into STRICT	qt_registro_w
	from	ptu_fat_baixa_interc a
	where	a.nr_seq_ptu_fatura = nr_seq_ptu_fatura_p;
else
	select	count(1)
	into STRICT	qt_registro_w
	from	ptu_fat_baixa_interc a,
		ptu_fat_baixa_dados b
	where	a.nr_sequencia		= b.nr_seq_fat_baixa_interc
	and	a.nr_seq_ptu_fatura	= nr_seq_ptu_fatura_p
	and ((b.dt_paga_doc_1 IS NOT NULL AND b.dt_paga_doc_1::text <> '') or (b.dt_paga_doc_2 IS NOT NULL AND b.dt_paga_doc_2::text <> ''))
	and	not exists (SELECT	1
				from	ptu_fat_ret_baixa_interc	ri,
					ptu_fat_ret_baixa_dados		rd,
					ptu_fat_ret_baixa_status	rs
				where	a.nr_sequencia	= ri.nr_seq_fat_baixa_interc
				and	ri.nr_sequencia	= rd.nr_seq_fat_ret_baixa
				and	rd.nr_sequencia	= rs.nr_seq_fat_ret_baixa_dados
				and	(rs.cd_mens_retorno IS NOT NULL AND rs.cd_mens_retorno::text <> ''));
end if;

-- Tem que ser gerado registro apartir da data de vigência do registro 510
if (dt_pagamento_w IS NOT NULL AND dt_pagamento_w::text <> '') and (dt_pagamento_w <= dt_referencia_w) then
	qt_registro_w := 1;
end if;

if (nr_seq_ptu_fatura_p IS NOT NULL AND nr_seq_ptu_fatura_p::text <> '') and (qt_registro_w = 0) then
	
	select	c.nr_titulo,
		c.nr_titulo_ndc,
		lpad(a.cd_unimed_destino,4,'0'),
		lpad(a.cd_unimed_origem,4,'0'),
		CASE WHEN somente_numero(a.nr_fatura)=0 THEN null  ELSE a.nr_fatura END ,
		CASE WHEN somente_numero(a.nr_nota_credito_debito)=0 THEN null  ELSE a.nr_nota_credito_debito END ,
		coalesce(a.tp_documento_1,'1'),
		coalesce(a.tp_documento_2,'1'),
		a.vl_total_fatura,
		a.vl_total_ndc,
		coalesce(ptu_obter_versao_transacao( 'A510',coalesce(pls_obter_versao_ptu( cd_estabelecimento_p, c.nr_seq_congenere, clock_timestamp(), 'A510'),'8.0')),'01'),
		c.nr_seq_congenere,
		a.dt_emissao_fatura
	into STRICT	nr_titulo_w,
		nr_titulo_ndc_w,
		cd_unimed_cobr_w,
		cd_unimed_origem_w,
		nr_documento_1_w,
		nr_documento_2_w,
		tp_documento_1_w,
		tp_documento_2_w,
		vl_pago_doc_1_w,
		vl_pago_doc_2_w,
		nr_versao_transacao_w,
		nr_seq_congenere_w,
		dt_emissao_fatura_w
	from	pls_fatura		c,
		ptu_fatura		a
	where	c.nr_sequencia	= a.nr_seq_pls_fatura
	and	a.nr_sequencia	= nr_seq_ptu_fatura_p;
	
	if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
		select  coalesce(max(b.ie_gerar_data_pag_a510),'N')
		into STRICT 	ie_gerar_data_pag_a510_w
		from	pls_congenere_camara a,
			pls_camara_compensacao b
		where	a.nr_seq_camara 	= b.nr_sequencia
		and	a.nr_seq_congenere 	= nr_seq_congenere_w
		and	dt_emissao_fatura_w between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref;
		
		if (ie_gerar_data_pag_a510_w = 'S') then
			dt_pagamento_w := dt_pagto_previsto_p;
		end if;
	end if;

	if (nr_versao_transacao_w IS NOT NULL AND nr_versao_transacao_w::text <> '') and (cd_unimed_cobr_w IS NOT NULL AND cd_unimed_cobr_w::text <> '') and (cd_unimed_origem_w IS NOT NULL AND cd_unimed_origem_w::text <> '') then
		
		insert into ptu_fat_baixa_interc(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_ptu_fatura,
			cd_unimed_origem,
			cd_unimed_destino,
			nr_versao_transacao,
			dt_envio,
			ie_status,
			dt_resposta)
		values (nextval('ptu_fat_baixa_interc_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_ptu_fatura_p,
			cd_unimed_origem_w,
			'0999', -- Unimed Brasil
			nr_versao_transacao_w,
			null,
			1, -- Pendente
			null) returning nr_sequencia into nr_seq_fat_baixa_interc_w;
			
		if (nr_seq_fat_baixa_interc_w IS NOT NULL AND nr_seq_fat_baixa_interc_w::text <> '') then
		
			-- DOC 1
			if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then			
				dt_paga_doc_1_w := dt_pagamento_w;
				id_paga_doc_1_w := 3;
				
				if (dt_paga_doc_1_w IS NOT NULL AND dt_paga_doc_1_w::text <> '') then					
					select	count(1)
					into STRICT	qt_registro_w
					from	encontro_contas_item
					where	nr_titulo_receber	= nr_titulo_w;
					
					if (qt_registro_w > 0) then
						id_paga_doc_1_w := 1;
					end if;
					
					select	count(1)
					into STRICT	qt_registro_w
					from	pls_titulo_lote_camara
					where	nr_titulo_receber	= nr_titulo_w;
					
					if (qt_registro_w > 0) then
						id_paga_doc_1_w := 2;
					end if;
					
					vl_glosa_1_w := coalesce(vl_glosa_p,0);
				end if;
			end if;
			
			-- DOC 2
			if (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
				dt_paga_doc_2_w := dt_pagamento_w;
				id_paga_doc_2_w := 3;
			
				if (dt_paga_doc_2_w IS NOT NULL AND dt_paga_doc_2_w::text <> '') then				
					select	count(1)
					into STRICT	qt_registro_w
					from	encontro_contas_item
					where	nr_titulo_receber	= nr_titulo_ndc_w;
					
					if (qt_registro_w > 0) then
						id_paga_doc_2_w := 1;
					end if;
					
					select	count(1)
					into STRICT	qt_registro_w
					from	pls_titulo_lote_camara
					where	nr_titulo_receber	= nr_titulo_ndc_w;
					
					if (qt_registro_w > 0) then
						id_paga_doc_2_w := 2;
					end if;
					
					vl_glosa_2_w := coalesce(vl_glosa_p,0);
				end if;
			end if;
			
			if (coalesce(nr_documento_1_w::text, '') = '') then
				tp_documento_1_w	:= null;
				vl_pago_doc_1_w		:= null;
				dt_paga_doc_1_w		:= null;
				id_paga_doc_1_w		:= null;
			end if;
			
			if (coalesce(nr_documento_2_w::text, '') = '') then
				tp_documento_2_w	:= null;
				vl_pago_doc_2_w		:= null;
				dt_paga_doc_2_w		:= null;
				id_paga_doc_2_w		:= null;
			end if;
			
			-- A baixa sem informação de data e valor de pagamento (VL_PAGO_DOC_1 e DT_PAGA_DOC_1) será considerada como inadimplência.
			if (coalesce(dt_paga_doc_1_w::text, '') = '') then
				vl_pago_doc_1_w := null;
		
			-- Caso for feita a baixa o valor do Doc 1 deve ser gerado com o valor da baixa
			elsif (vl_baixa_p IS NOT NULL AND vl_baixa_p::text <> '') then
				vl_pago_doc_1_w := vl_baixa_p;
				
			else
				-- Quando houver uma constestação (A550) de pagamento parcial relacionado à fatura (A500) o valor pago informado não pode ser maior 

				-- que a diferença entre o valor total do documento e o valor contestado.
				vl_pago_doc_1_w := vl_pago_doc_1_w - vl_glosa_1_w;
			end if;
			
			-- A baixa sem informação de data e valor de pagamento (VL_PAGO_DOC_2 e DT_PAGA_DOC_2) será considerada como inadimplência.
			if (coalesce(dt_paga_doc_2_w::text, '') = '') then
				vl_pago_doc_2_w := null;
				
			-- Caso for feita a baixa o valor do Doc 2 deve ser gerado com o valor da baixa
			elsif (vl_baixa_p IS NOT NULL AND vl_baixa_p::text <> '') then
				vl_pago_doc_2_w := vl_baixa_p;
				
			else
				-- Quando houver uma constestação (A550) de pagamento parcial relacionado à fatura (A500) o valor pago informado não pode ser maior 

				-- que a diferença entre o valor total do documento e o valor contestado.
				vl_pago_doc_2_w := vl_pago_doc_2_w - vl_glosa_2_w;
			end if;
		
			insert into ptu_fat_baixa_dados(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_fat_baixa_interc,
				cd_unimed_origem,
				nr_documento_1,
				nr_documento_2,
				tp_documento_1,
				tp_documento_2,
				vl_pago_doc_1,
				vl_pago_doc_2,
				dt_paga_doc_1,
				dt_paga_doc_2,
				id_paga_doc_1,
				id_paga_doc_2)
			values (nextval('ptu_fat_baixa_dados_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_fat_baixa_interc_w,
				cd_unimed_cobr_w,
				nr_documento_1_w,
				nr_documento_2_w,
				tp_documento_1_w,
				tp_documento_2_w,
				vl_pago_doc_1_w,
				vl_pago_doc_2_w,
				dt_paga_doc_1_w,
				dt_paga_doc_2_w,
				id_paga_doc_1_w,
				id_paga_doc_2_w);
		end if;
		
		if (coalesce(ie_commit_p,'N') = 'S') then
			commit;
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_fat_baixa_interc ( nr_seq_ptu_fatura_p ptu_fatura.nr_sequencia%type, dt_liquidacao_p titulo_receber.dt_liquidacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text, dt_recebimento_p titulo_receber_liq.dt_recebimento%type, vl_baixa_p titulo_receber_liq.vl_recebido%type, vl_glosa_p titulo_receber_liq.vl_glosa%type, dt_pagto_previsto_p titulo_receber.dt_pagamento_previsto%type) FROM PUBLIC;

