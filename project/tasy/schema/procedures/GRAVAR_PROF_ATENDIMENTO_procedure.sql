-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gravar_prof_atendimento ( nr_atendimento_p bigint DEFAULT NULL, nr_seq_gestao_vaga_p bigint DEFAULT NULL, ds_lista_profissionais_p text DEFAULT NULL, nm_usuario_p text  DEFAULT NULL) AS $body$
DECLARE


    lista_profissionais_w   varchar(4000) := ds_lista_profissionais_p;
    tam_lista_w             bigint;
    ie_pos_virgula_w        smallint;
    ie_pos_point_w          smallint;
    tmp_prof_values_w       varchar(255);
    cd_profissional_w       atend_paciente_medico.cd_profissional%TYPE;
    cd_funcao_w             atend_paciente_medico.nr_seq_func_medico%TYPE;

BEGIN
    IF ( (nr_seq_gestao_vaga_p IS NOT NULL AND nr_seq_gestao_vaga_p::text <> '') OR (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') ) AND (ds_lista_profissionais_p IS NOT NULL AND ds_lista_profissionais_p::text <> '') THEN
        BEGIN
            DELETE FROM atend_paciente_medico
            WHERE nr_seq_gestao_vaga = coalesce(nr_seq_gestao_vaga_p,0) OR nr_atendimento = coalesce(nr_atendimento_p, 0);

            IF (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '' AND nr_seq_gestao_vaga_p IS NOT NULL AND nr_seq_gestao_vaga_p::text <> '') THEN
                UPDATE gestao_vaga set nr_atendimento = nr_atendimento_p WHERE nr_sequencia = nr_seq_gestao_vaga_p;
            END IF;

            WHILE(lista_profissionais_w IS NOT NULL AND lista_profissionais_w::text <> '') LOOP
                BEGIN
                    tam_lista_w := length(lista_profissionais_w);
                    ie_pos_virgula_w := position(',' in lista_profissionais_w);

                    IF ( ie_pos_virgula_w <> 0 ) THEN
                        tmp_prof_values_w := substr(lista_profissionais_w, 1,(ie_pos_virgula_w - 1));

                        ie_pos_point_w := position(':' in tmp_prof_values_w);

                        cd_profissional_w := (substr(tmp_prof_values_w, 1,(ie_pos_point_w - 1)))::numeric;
                        cd_funcao_w := (substr(tmp_prof_values_w, (ie_pos_point_w + 1), 3))::numeric;

                        lista_profissionais_w := substr(lista_profissionais_w,(ie_pos_virgula_w + 1), tam_lista_w);

                    ELSIF ( ie_pos_virgula_w = 0 ) THEN
                        tmp_prof_values_w := lista_profissionais_w;

                        ie_pos_point_w := position(':' in tmp_prof_values_w);

                        cd_profissional_w := (substr(tmp_prof_values_w, 1,(ie_pos_point_w - 1)))::numeric;
                        cd_funcao_w := (substr(tmp_prof_values_w, (ie_pos_point_w + 1), 3))::numeric;

                        lista_profissionais_w := null;
                    END IF;

                    IF (cd_profissional_w IS NOT NULL AND cd_profissional_w::text <> '') THEN
                        INSERT INTO atend_paciente_medico(
                            nr_sequencia,
                            nr_seq_func_medico,
                            cd_profissional,
                            nr_atendimento,
                            nr_seq_gestao_vaga,
                            cd_cargo,
                            nm_usuario,
                            nm_usuario_nrec,
                            dt_atualizacao,
                            dt_atualizacao_nrec
                        ) VALUES (
                            nextval('atend_paciente_medico_seq'),
                            cd_funcao_w,
                            cd_profissional_w,
                            nr_atendimento_p,
                            nr_seq_gestao_vaga_p,
                            obter_cargo_PF(cd_profissional_w, 'C'),
                            nm_usuario_p,
                            nm_usuario_p,
                            clock_timestamp(),
                            clock_timestamp()
                        );

                        COMMIT;
                    END IF;

                END;
            END LOOP;

        END;
    END IF;

    COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gravar_prof_atendimento ( nr_atendimento_p bigint DEFAULT NULL, nr_seq_gestao_vaga_p bigint DEFAULT NULL, ds_lista_profissionais_p text DEFAULT NULL, nm_usuario_p text  DEFAULT NULL) FROM PUBLIC;

