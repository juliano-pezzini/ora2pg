-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_contab_onl_repasse ( nr_seq_protocolo_p protocolo_convenio.nr_seq_protocolo%type default null, nr_interno_conta_p conta_paciente.nr_interno_conta%type DEFAULT NULL, nr_seq_proc_repasse_p procedimento_repasse.nr_sequencia%type default null, nm_usuario_p text DEFAULT NULL, ie_operacao_p bigint default 1, ie_atualizar_lote_p text default 'S', ie_commit_p text default 'S') AS $body$
DECLARE

/*
===============================================================================
Purpose: Indentacao

Remarks: n/a

Who         When            What
----------  -----------     --------------------------------------------------
chjreinert  13/mai/2021     OS 2444975 - Indentacao

===============================================================================
*/
cd_tipo_lote_contabil_w      tipo_lote_contabil.cd_tipo_lote_contabil%type := 14;/* Repasse a Terceiros */
ie_origem_documento_w        movimento_contabil.ie_origem_documento%type := null;
dados_contab_w               ctb_contab_onl_lote_fin_pck.dados_contab_tf := null;
nr_documento_w               movimento_contabil.nr_documento%type := null;
nr_seq_info_w                ctb_documento.nr_seq_info%type := 69;
cd_estabelecimento_w         movimento_contabil.cd_estabelecimento%type;
nr_seq_agrupamento_w         w_movimento_contabil.nr_seq_agrupamento%type;
dt_conta_protocolo_w         repasse_terceiro.dt_mesano_referencia%type;
dt_contabil_w                repasse_terceiro.dt_mesano_referencia%type;
nr_seq_protocolo_w           conta_paciente.nr_seq_protocolo%type;
nr_seq_protocolo_ww           conta_paciente.nr_seq_protocolo%type;
nr_lote_contabil_w           lote_contabil.nr_lote_contabil%type;
cd_pessoa_fisica_ant_w       terceiro.cd_pessoa_fisica%type;
ie_tipo_convenio_w           convenio.ie_tipo_convenio%type;
nm_estabelecimento_w         estabelecimento.nm_fantasia_estab%type;
nr_seq_nota_fiscal_w         nota_fiscal.nr_sequencia%type;
ctb_param_lote_repasse_w     ctb_param_lote_repasse%rowtype;
cd_cgc_ant_w                 terceiro.cd_cgc%type;
ds_erro_w                    varchar(255) := null;
ds_atributos_w               varchar(4000);
ds_convenio_w                varchar(255);
ds_estorno_w                 varchar(10);
ds_observacao_w              varchar(4000);
ds_responsavel_credito_w     varchar(255);
ds_setor_atendimento_w       varchar(255);
ds_titulo_w                  varchar(255);
ie_regra_w                   varchar(255);
nm_atrib_agrupador_w         varchar(100);
nm_beneficiario_ant_w        varchar(180);
nm_beneficiario_w            varchar(80);
nm_medico_executor_w         varchar(255);
nr_nfe_conta_protocolo_w     varchar(255);
ie_situacao_mes_contabil_w   varchar(1);
dt_atualizacao_saldo_w       lote_contabil.dt_atualizacao_saldo%type;
nr_seq_mes_ref_w             lote_contabil.nr_seq_mes_ref%type;
ctb_doc_w                    ctb_documento%rowtype;
nr_interno_conta_w           conta_paciente.nr_interno_conta%type;
nr_interno_conta_ww          conta_paciente.nr_interno_conta%type;
vl_debito_w                  ctb_movimento.vl_movimento%type;
vl_credito_w                 ctb_movimento.vl_movimento%type;
nr_protocolo_w               protocolo_convenio.nr_protocolo%type;
ds_nota_fiscal_w            varchar(4000) := '';
ds_nota_fiscal_protocolo_w  varchar(4000) := '';
cd_convenio_w               convenio.cd_convenio%type;
cd_centro_custo_w           centro_custo.cd_centro_custo%type;
cd_conta_contabil_w         conta_contabil.cd_conta_contabil%type;
ie_atualizar_movto_w        varchar(1) := 'N';
ie_commit_movto_w           varchar(1) := 'N';

c_conta_paciente CURSOR FOR
    SELECT  a.nr_interno_conta,
            a.dt_mesano_referencia,
            a.vl_conta,
            substr(obter_nota_conta_protocolo(a.nr_seq_protocolo, a.nr_interno_conta),1,255) ds_nota_fiscal
    from    conta_paciente a
    where   CASE WHEN coalesce(nr_interno_conta_p, 0)=0 THEN  0  ELSE a.nr_interno_conta END  = coalesce(nr_interno_conta_p, 0)
    and     CASE WHEN coalesce(nr_seq_protocolo_p, 0)=0 THEN  0  ELSE a.nr_seq_protocolo END  = coalesce(nr_seq_protocolo_p, 0)
    and     a.nr_lote_repasse = nr_lote_contabil_w
    and     coalesce(nr_seq_proc_repasse_p, 0) = 0

union all

    SELECT a.nr_interno_conta,
           a.dt_mesano_referencia,
           a.vl_conta,
           ''
    from   conta_paciente a
    where  a.nr_interno_conta = coalesce(nr_interno_conta_w, 0)
    and (coalesce(ie_operacao_p,1) = 1 and coalesce(a.nr_lote_repasse,0) <> 0)
    and    coalesce(nr_seq_proc_repasse_p, 0) <> 0;

type t_conta_paciente is table of c_conta_paciente%rowtype index by integer;
c_conta_paciente_w t_conta_paciente;

c010 CURSOR FOR
    SELECT 'P' ie_proc_mat,
            d.nr_sequencia nr_sequencia,
            c.nr_atendimento nr_atendimento,
            d.vl_repasse vl_repasse,
            e.cd_pessoa_fisica cd_pessoa_fisica,
            e.cd_cgc cd_cgc,
            d.nr_seq_trans_fin nr_seq_trans_fin,
            'VL_REPASSE' nm_atributo,
            d.cd_regra cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est nr_interno_conta_est,
            (null)::numeric  nr_atend_estorno,
            d.nr_repasse_terceiro nr_repasse_terceiro,
            c.cd_medico_executor cd_medico_executor,
            c.ie_responsavel_credito ie_responsavel_credito,
            d.ie_status ie_status,
            null nr_seq_terc_ant,
            null nr_lote_contabil_ant,
            'PROCEDIMENTO_REPASSE' nm_tabela,
            e.nr_sequencia nr_seq_terceiro
    from    terceiro              e,
            procedimento_repasse  d,
            procedimento_paciente c,
            conta_Paciente        b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     b.nr_interno_conta = c.nr_interno_conta
    and     c.nr_sequencia = d.nr_seq_procedimento
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(d.nr_interno_conta_est::text, '') = ''
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''

union all

    SELECT 'M',
            d.nr_sequencia,
            c.nr_atendimento,
            d.vl_repasse,
            e.cd_pessoa_fisica,
            e.cd_cgc,
            d.nr_seq_trans_fin,
            'VL_REPASSE',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            (null)::numeric ,
            d.nr_repasse_terceiro,
            '',
            c.ie_responsavel_credito,
            d.ie_status,
            null,
            null,
            'MATERIAL_REPASSE',
            e.nr_sequencia
    from    terceiro                e,
            material_repasse        d,
            material_atend_paciente c,
            conta_Paciente          b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     b.nr_interno_conta = c.nr_interno_conta
    and     c.nr_sequencia = d.nr_seq_material
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(d.nr_interno_conta_est::text, '') = ''
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union all

    select 'P',
            d.nr_sequencia,
            c.nr_atendimento,
            d.vl_repasse,
            e.cd_pessoa_fisica,
            e.cd_cgc,
            d.nr_seq_trans_fin,
            'VL_REPASSE',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            b.nr_atendimento,
            d.nr_repasse_terceiro,
            c.cd_medico_executor,
            c.ie_responsavel_credito,
            d.ie_status,
            null,
            null,
            'PROCEDIMENTO_REPASSE',
            e.nr_sequencia
    from    terceiro              e,
            procedimento_repasse  d,
            procedimento_paciente c,
            conta_Paciente        b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     b.nr_interno_conta = d.nr_interno_conta_est /* Contablizar atraes da conta paciente de estorno*/
    and     c.nr_sequencia = d.nr_seq_procedimento
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(d.nr_lote_contabil, 0) = 0
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union all

    select 'M',
            d.nr_sequencia,
            c.nr_atendimento,
            d.vl_repasse,
            e.cd_pessoa_fisica,
            e.cd_cgc,
            d.nr_seq_trans_fin,
            'VL_REPASSE',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            b.nr_atendimento,
            d.nr_repasse_terceiro,
            '',
            c.ie_responsavel_credito,
            d.ie_status,
            null,
            null,
            'MATERIAL_REPASSE' nm_tabela,
            e.nr_sequencia
    from    terceiro                e,
            material_repasse        d,
            material_atend_paciente c,
            conta_Paciente          b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     b.nr_interno_conta = d.nr_interno_conta_est /* Contablizar atraves da conta paciente de estorno*/
    and     c.nr_sequencia = d.nr_seq_material
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(d.nr_lote_contabil, 0) = 0
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union

    select 'TM',
            a.nr_sequencia,
            c.nr_atendimento,
            a.vl_repasse,
            e.cd_pessoa_fisica,
            e.cd_cgc,
            a.nr_seq_trans_financ,
            'VL_TROCA_TERC_MAT',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            b.nr_atendimento,
            d.nr_repasse_terceiro,
            '',
            c.ie_responsavel_credito,
            '',
            a.nr_seq_terc_ant,
            CASE WHEN d.nr_lote_contabil=0 THEN  null  ELSE d.nr_lote_contabil END ,
            'PROC_MAT_REPASSE_TERC',
            e.nr_sequencia
    from    terceiro                e,
            conta_Paciente          b,
            material_atend_paciente c,
            material_repasse        d,
            proc_mat_repasse_terc   a
    where   b.nr_interno_conta = nr_interno_conta_w
    and     a.nr_seq_mat_repasse = d.nr_sequencia
    and     d.nr_seq_material = c.nr_sequencia
    and     c.nr_interno_conta = b.nr_interno_conta
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     (a.nr_seq_trans_financ IS NOT NULL AND a.nr_seq_trans_financ::text <> '')
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union

    select 'TP',
            a.nr_sequencia,
            c.nr_atendimento,
            a.vl_repasse,
            e.cd_pessoa_fisica,
            e.cd_cgc,
            a.nr_seq_trans_financ,
            'VL_TROCA_TERC_PROC',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            b.nr_atendimento,
            d.nr_repasse_terceiro,
            '',
            c.ie_responsavel_credito,
            '',
            a.nr_seq_terc_ant,
            CASE WHEN d.nr_lote_contabil=0 THEN  null  ELSE d.nr_lote_contabil END ,
            'PROC_MAT_REPASSE_TERC',
            e.nr_sequencia
    from    terceiro              e,
            conta_Paciente        b,
            procedimento_paciente c,
            procedimento_repasse  d,
            proc_mat_repasse_terc a
    where   b.nr_interno_conta = nr_interno_conta_w
    and     a.nr_seq_proc_repasse = d.nr_sequencia
    and     d.nr_seq_procedimento = c.nr_sequencia
    and     c.nr_interno_conta = b.nr_interno_conta
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     (a.nr_seq_trans_financ IS NOT NULL AND a.nr_seq_trans_financ::text <> '')
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union all
 /*Diferencas de repasse*/
    select 'P',
            d.nr_sequencia,
            c.nr_atendimento,
            (d.vl_repasse - c.vl_procedimento),
            e.cd_pessoa_fisica,
            e.cd_cgc,
            d.nr_seq_trans_fin,
            'VL_REPASSE_DIF',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            (null)::numeric ,
            d.nr_repasse_terceiro,
            c.cd_medico_executor,
            c.ie_responsavel_credito,
            d.ie_status,
            null,
            null,
            'PROCEDIMENTO_REPASSE',
            e.nr_sequencia
    from    terceiro              e,
            procedimento_Repasse  d,
            procedimento_paciente c,
            conta_Paciente        b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     b.nr_interno_conta = c.nr_interno_conta
    and     c.nr_sequencia = d.nr_seq_procedimento
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(d.nr_interno_conta_est::text, '') = ''
    and     coalesce(c.vl_repasse_calc, 0) > c.vl_procedimento
    and     (d.nr_seq_trans_fin_rep_maior IS NOT NULL AND d.nr_seq_trans_fin_rep_maior::text <> '')
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union all

    select 'P',
            d.nr_sequencia,
            c.nr_atendimento,
            (abs(d.vl_repasse) - abs(c.vl_procedimento)),
            e.cd_pessoa_fisica,
            e.cd_cgc,
            d.nr_seq_trans_fin,
            'VL_REPASSE_DIF',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            b.nr_atendimento,
            d.nr_repasse_terceiro,
            c.cd_medico_executor,
            c.ie_responsavel_credito,
            d.ie_status,
            null,
            null,
            'PROCEDIMENTO_REPASSE',
            e.nr_sequencia
    from    terceiro              e,
            procedimento_repasse  d,
            procedimento_paciente c,
            conta_Paciente        b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     b.nr_interno_conta = d.nr_interno_conta_est /* Contablizar atraves da conta paciente de estorno*/
    and     c.nr_sequencia = d.nr_seq_procedimento
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(d.nr_lote_contabil, 0) = 0
    and     coalesce(abs(c.vl_repasse_calc), 0) > abs(c.vl_procedimento)
    and     (d.nr_seq_trans_fin_rep_maior IS NOT NULL AND d.nr_seq_trans_fin_rep_maior::text <> '')
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union all

    select 'P',
            d.nr_sequencia,
            c.nr_atendimento,
            (d.vl_repasse - (d.vl_repasse - c.vl_procedimento)) vl_transacao,
            e.cd_pessoa_fisica,
            e.cd_cgc,
            d.nr_seq_trans_fin,
            'VL_REPASSE_LIQ',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            (null)::numeric  nr_atend_estorno,
            d.nr_repasse_terceiro,
            c.cd_medico_executor,
            c.ie_responsavel_credito,
            d.ie_status,
            null nr_seq_terc_ant,
            null nr_lote_contabil_ant,
            'PROCEDIMENTO_REPASSE' nm_tabela,
            e.nr_sequencia
    from    terceiro              e,
            procedimento_repasse  d,
            procedimento_paciente c,
            conta_paciente        b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     b.nr_interno_conta = c.nr_interno_conta
    and     c.nr_sequencia = d.nr_seq_procedimento
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(d.nr_interno_conta_est::text, '') = ''
    and     coalesce(c.vl_repasse_calc, 0) > c.vl_procedimento
    and     (d.nr_seq_trans_fin_rep_maior IS NOT NULL AND d.nr_seq_trans_fin_rep_maior::text <> '')
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union all

    select 'P',
            d.nr_sequencia,
            c.nr_atendimento,
            (d.vl_repasse -
            abs(abs(d.vl_repasse) - abs(c.vl_procedimento))) vl_transacao,
            e.cd_pessoa_fisica,
            e.cd_cgc,
            d.nr_seq_trans_fin,
            'VL_REPASSE_LIQ',
            d.cd_regra,
            c.cd_setor_atendimento,
            d.nr_interno_conta_est,
            b.nr_atendimento,
            d.nr_repasse_terceiro,
            c.cd_medico_executor,
            c.ie_responsavel_credito,
            d.ie_status,
            null nr_seq_terc_ant,
            null nr_lote_contabil_ant,
            'PROCEDIMENTO_REPASSE' nm_tabela,
            e.nr_sequencia
    from    terceiro              e,
            procedimento_Repasse  d,
            procedimento_paciente c,
            conta_Paciente        b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     b.nr_interno_conta = d.nr_interno_conta_est /* Contablizar atraves da conta paciente de estorno*/
    and     c.nr_sequencia = d.nr_seq_procedimento
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(d.nr_lote_contabil, 0) = 0
    and     coalesce(abs(c.vl_repasse_calc), 0) > abs(c.vl_procedimento)
    and     (d.nr_seq_trans_fin_rep_maior IS NOT NULL AND d.nr_seq_trans_fin_rep_maior::text <> '')
    and     coalesce(nr_seq_proc_repasse_p::text, '') = ''
    
union all

    select 'P',
            d.nr_sequencia,
            c.nr_atendimento nr_atendimento,
            d.vl_repasse,
            e.cd_pessoa_fisica,
            e.cd_cgc,
            d.nr_seq_trans_fin,
            'VL_REPASSE',
            d.cd_regra,
            c.cd_setor_atendimento,
            null nr_interno_conta_est,
            (null)::numeric  nr_atend_estorno,
            d.nr_repasse_terceiro,
            '' cd_medico_executor,
            null ie_responsavel_credito,
            d.ie_status,
            null nr_seq_terc_ant,
            null nr_lote_contabil_ant,
            'PROCEDIMENTO_REPASSE' nm_tabela,
            e.nr_sequencia
    from    terceiro              e,
            procedimento_paciente c,
            Procedimento_Repasse  d,
            Conta_Paciente        b
    where   b.nr_interno_conta = nr_interno_conta_w
    and     d.nr_lote_contabil = nr_lote_contabil_w
    and     d.nr_sequencia = nr_seq_proc_repasse_p
    and     d.ie_status = 'E'
    and     (d.nr_seq_trans_fin IS NOT NULL AND d.nr_seq_trans_fin::text <> '')
    and     d.nr_seq_terceiro = e.nr_sequencia
    and     b.nr_interno_conta = c.nr_interno_conta
    and     d.nr_seq_procedimento = c.nr_sequencia
    and     e.cd_estabelecimento = cd_estabelecimento_w
    and     coalesce(nr_seq_proc_repasse_p,0) <> 0;

type t_c010 is table of c010%rowtype index by integer;
c010_w t_c010;
BEGIN

nr_seq_protocolo_ww := nr_seq_protocolo_p;
nr_interno_conta_ww := nr_interno_conta_p;

if (coalesce(nr_seq_proc_repasse_p,0) <> 0) then
    select  c.nr_interno_conta,
            c.nr_seq_protocolo,
            CASE WHEN coalesce(c.nr_seq_protocolo::text, '') = '' THEN  c.cd_estabelecimento  ELSE d.cd_estabelecimento END ,
            a.dt_atualizacao,
            c.cd_convenio_parametro,
            d.nr_protocolo
    into STRICT    nr_interno_conta_ww,
            nr_seq_protocolo_ww,
            cd_estabelecimento_w,
            dt_contabil_w,
            cd_convenio_w,
            nr_protocolo_w
    FROM procedimento_paciente b, procedimento_repasse a, conta_paciente c
LEFT OUTER JOIN protocolo_convenio d ON (c.nr_seq_protocolo = d.nr_seq_protocolo)
WHERE a.nr_sequencia = nr_seq_proc_repasse_p and a.nr_seq_procedimento = b.nr_sequencia and b.nr_interno_conta = c.nr_interno_conta;

    nr_seq_protocolo_w := nr_seq_protocolo_ww;
    nr_interno_conta_w := nr_interno_conta_ww;
elsif (coalesce(nr_seq_protocolo_ww,0) <> 0) then
    select  a.cd_estabelecimento,
            a.dt_mesano_referencia,
            a.cd_convenio,
            a.nr_protocolo
    into STRICT    cd_estabelecimento_w,
            dt_contabil_w,
            cd_convenio_w,
            nr_protocolo_w
    from    protocolo_convenio a
    where   a.nr_seq_protocolo = nr_seq_protocolo_ww;

    nr_seq_protocolo_w := nr_seq_protocolo_ww;
elsif (coalesce(nr_interno_conta_ww, 0) <> 0) then
    select  a.cd_estabelecimento,
            a.dt_mesano_referencia,
            a.nr_seq_protocolo,
            a.cd_convenio_parametro,
            b.nr_protocolo
    into STRICT    cd_estabelecimento_w,
            dt_contabil_w,
            nr_seq_protocolo_w,
            cd_convenio_w,
            nr_protocolo_w
    FROM conta_paciente a
LEFT OUTER JOIN protocolo_convenio b ON (a.nr_seq_protocolo = b.nr_seq_protocolo)
WHERE a.nr_interno_conta = nr_interno_conta_ww;

    nr_interno_conta_w := nr_interno_conta_ww;
end if;

nr_lote_contabil_w := ctb_online_pck.get_lote_contabil( cd_tipo_lote_contabil_w,
                                                        cd_estabelecimento_w,
                                                        dt_contabil_w,
                                                        nm_usuario_p);

ctb_doc_w := ctb_contab_onl_repasse_pck.get_ctb_documento( cd_estabelecimento_w,
                                                           nr_seq_protocolo_ww,
                                                           nr_interno_conta_ww,
                                                           nm_usuario_p);

if (ie_atualizar_lote_p = 'S') and (nr_lote_contabil_w <> 0) then
    select  dt_atualizacao_saldo,
            nr_seq_mes_ref
    into STRICT    dt_atualizacao_saldo_w,
            nr_seq_mes_ref_w
    from    lote_contabil a
    where   a.nr_lote_contabil = nr_lote_contabil_w;

    ie_situacao_mes_contabil_w := ctb_obter_se_mes_fechado(nr_seq_mes_ref_w,cd_estabelecimento_w);

    if (ie_situacao_mes_contabil_w = 'A' and (dt_atualizacao_saldo_w IS NOT NULL AND dt_atualizacao_saldo_w::text <> '')) then
        ds_erro_w := ctb_desatualizar_lote(nr_lote_contabil_w, nm_usuario_p, ds_erro_w);
    elsif (ie_situacao_mes_contabil_w = 'F') then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(237763);
    end if;
end if;

if (nr_seq_proc_repasse_p IS NOT NULL AND nr_seq_proc_repasse_p::text <> '') then
    ie_atualizar_movto_w := 'S';
    ie_commit_movto_w := ie_commit_p;
end if;

begin
select x.*
into STRICT   ctb_param_lote_repasse_w
from (SELECT a.*
        from   ctb_param_lote_repasse a
        where  a.cd_empresa = obter_empresa_estab(cd_estabelecimento_w)
        and    coalesce(a.cd_estab_exclusivo, cd_estabelecimento_w) = cd_estabelecimento_w
        order  by coalesce(a.cd_estab_exclusivo, 0) desc) x LIMIT 1;
exception
    when others then
        ctb_param_lote_repasse_w := null;
end;

if (coalesce(ie_operacao_p, 1) = 1) then

    if (coalesce(nr_seq_protocolo_p,0) <> 0) then
        begin
        update  protocolo_convenio x
        set     x.nr_seq_lote_repasse = nr_lote_contabil_w
        where   x.nr_seq_lote_repasse = 0
        and     x.ie_status_protocolo = 2
        and     x.nr_seq_protocolo = nr_seq_protocolo_p
        and exists ( SELECT  1
                    from    conta_paciente c,
                            procedimento_paciente b,
                            procedimento_repasse a
                    where   c.nr_interno_conta    = b.nr_interno_conta
                    --where   (c.nr_interno_conta    = b.nr_interno_conta or c.nr_seq_conta_origem = b.nr_interno_conta)
                    and     b.nr_sequencia        = a.nr_seq_procedimento
                    and     c.nr_seq_protocolo    = x.nr_seq_protocolo

union   all

                    PERFORM  1
                    from    conta_paciente c,
                            material_atend_paciente b,
                            material_repasse a
                    where   c.nr_interno_conta    = b.nr_interno_conta
                    and     b.nr_sequencia        = a.nr_seq_material
                    and     c.nr_seq_protocolo    = x.nr_seq_protocolo
                    
union all

                    select  1
                    from    conta_paciente c,
                            procedimento_paciente b,
                            procedimento_repasse a
                    where   c.nr_seq_conta_origem = b.nr_interno_conta
                    and     b.nr_sequencia        = a.nr_seq_procedimento
                    and     c.nr_seq_protocolo    = x.nr_seq_protocolo
                    
union   all

                    select  1
                    from    conta_paciente c,
                            material_atend_paciente b,
                            material_repasse a
                    where   c.nr_seq_conta_origem = b.nr_interno_conta
                    and     b.nr_sequencia        = a.nr_seq_material
                    and     c.nr_seq_protocolo    = x.nr_seq_protocolo);

            if (ctb_param_lote_repasse_w.ie_contab_sus_receita = 'N') and (ctb_param_lote_repasse_w.cd_convenio_sus IS NOT NULL AND ctb_param_lote_repasse_w.cd_convenio_sus::text <> '') then
                update  protocolo_convenio
                set     nr_seq_lote_repasse = 0
                where   nr_seq_lote_repasse = nr_lote_contabil_w
                and     cd_convenio = ctb_param_lote_repasse_w.cd_convenio_sus;
            end if;

            update  conta_paciente a
            set     nr_lote_repasse = nr_lote_contabil_W
            where   coalesce(nr_lote_repasse, 0) = 0
            and exists ( SELECT 1
                        from   protocolo_convenio y
                        where  y.nr_seq_protocolo = a.nr_seq_protocolo
                        and    y.nr_seq_lote_repasse = nr_lote_contabil_W);
        end;
    elsif coalesce(nr_interno_conta_p,0) <> 0  then
        begin
            update  conta_paciente x
            set     nr_lote_repasse = nr_lote_contabil_W
            where   x.nr_interno_conta = nr_interno_conta_p
            and     coalesce(x.nr_lote_repasse, 0) = 0
            and exists (
                SELECT  1
                from    procedimento_paciente b,
                        procedimento_repasse a
                where   x.nr_interno_conta    = b.nr_interno_conta
                and     b.nr_sequencia        = a.nr_seq_procedimento

union   all

                PERFORM  1
                from    material_atend_paciente b,
                        material_repasse a
                where   x.nr_interno_conta    = b.nr_interno_conta
                and     b.nr_sequencia        = a.nr_seq_material);

            if (ctb_param_lote_repasse_w.ie_contab_sus_receita = 'N') and (ctb_param_lote_repasse_w.cd_convenio_sus IS NOT NULL AND ctb_param_lote_repasse_w.cd_convenio_sus::text <> '') then
                update  conta_paciente a
                set     a.nr_lote_repasse = 0
                where   a.nr_lote_repasse = nr_lote_contabil_w
                and     cd_convenio_parametro = ctb_param_lote_repasse_w.cd_convenio_sus;
            end if;
        end;
    elsif (coalesce(nr_seq_proc_repasse_p,0) <> 0) then
        begin
            update  procedimento_repasse a
            set     nr_lote_contabil  = nr_lote_contabil_w
            where   coalesce(nr_lote_contabil,0)  = 0
            and     ie_status   = 'E'
            and     (nr_seq_trans_fin IS NOT NULL AND nr_seq_trans_fin::text <> '')
            and     nr_sequencia = nr_seq_proc_repasse_p
            and exists ( SELECT  1
                        from    procedimento_repasse y
                        where   y.nr_sequencia  = a.nr_seq_origem
                        and     y.nr_lote_contabil <> 0);
        end;
    end if;

    begin
    select  nm_fantasia_estab
    into STRICT    nm_estabelecimento_w
    from    estabelecimento
    where   cd_estabelecimento  = cd_estabelecimento_w;
    exception
    when others then
        nm_estabelecimento_w := '';
    end;

    begin
    select  ie_tipo_convenio,
            substr(ds_convenio,1,40)
    into STRICT    ie_tipo_convenio_w,
            ds_convenio_w
    from    convenio
    where   cd_convenio = cd_convenio_w;
    exception
        when others then
        ie_tipo_convenio_w := 0;
        ds_convenio_w := '';
    end;

    nm_atrib_agrupador_w := coalesce(trim(both obter_agrupador_contabil(14)),'NR_ATENDIMENTO');
    ds_nota_fiscal_protocolo_w := substr(obter_nota_conta_protocolo(nr_seq_protocolo_w,0),1,255);
    nr_nfe_conta_protocolo_w := substr(obter_nfe_conta_protocolo(nr_seq_protocolo_w,0),1,254);
    dt_conta_protocolo_w := to_date(substr(obter_dados_protocolo(nr_seq_protocolo_w, 'DT'),1,20), 'dd/mm/yyyy');

    open c_conta_paciente;
    loop fetch c_conta_paciente bulk collect into c_conta_paciente_w limit 100;
        for i in 1 .. c_conta_paciente_w.count loop
        begin
        nr_interno_conta_w := c_conta_paciente_w[i].nr_interno_conta;
        ds_nota_fiscal_w := c_conta_paciente_w[i].ds_nota_fiscal;

        if (coalesce(nr_nfe_conta_protocolo_w,'X') = 'X') then
            nr_nfe_conta_protocolo_w := substr(obter_nfe_conta_protocolo(0,nr_interno_conta_w),1,254);
        end if;

        if (ie_tipo_convenio_w = 2) or (coalesce(ds_nota_fiscal_w, 'X') = 'X') then
            ds_nota_fiscal_w := ds_nota_fiscal_protocolo_w;
        end if;

            open c010;
            loop fetch c010 bulk collect into c010_w limit 100;
                for j in 1 .. c010_w.count loop
                begin
                nm_beneficiario_ant_w := '';

                if (coalesce(c010_w[j].nr_repasse_terceiro, 0) <> 0) then
                    select  a.ds_observacao
                    into STRICT    ds_observacao_w
                    from    repasse_terceiro a
                    where   a.nr_repasse_terceiro = c010_w[j].nr_repasse_terceiro;
                end if;

                    if (coalesce(c010_w[j].cd_setor_atendimento, 0) <> 0) then
                        begin
                        select  cd_centro_custo
                        into STRICT    cd_centro_custo_w
                        from    setor_atendimento
                        where   cd_setor_atendimento = c010_w[j].cd_setor_atendimento;
                        exception
                          when no_data_found then
                            cd_centro_custo_w := 0;
                        end;
                    end if;

                    if (c010_w[j]coalesce(.nr_seq_trans_fin::text, '') = '') and (c010_w[j](.cd_regra IS NOT NULL AND .cd_regra::text <> '')) then
                        select  nr_seq_trans_fin_prod
                        into STRICT    c010_w[j].nr_seq_trans_fin
                        from    regra_repasse_terceiro
                        where   cd_regra = c010_w[j].cd_regra;
                    end if;

                    select  substr(obter_nome_pf_pj(c010_w[j].cd_pessoa_fisica,c010_w[j].cd_cgc),1,80)
                    into STRICT    nm_beneficiario_w
;

                    if (nm_atrib_agrupador_w = 'NR_REPASSE_TERCEIRO') then
                        nr_seq_agrupamento_w := c010_w[j].nr_repasse_terceiro;
                    elsif (nm_atrib_agrupador_w = 'NR_ATENDIMENTO') then
                        nr_seq_agrupamento_w := c010_w[j].nr_atendimento;
                    elsif (nm_atrib_agrupador_w = 'NR_SEQ_TERCEIRO') then
                        nr_seq_agrupamento_w := c010_w[j].nr_seq_terceiro;
                    end if;

                    if (coalesce(nr_seq_agrupamento_w, 0) = 0) then
                        nr_seq_agrupamento_w := c010_w[j].nr_atendimento;
                    end if;

                    if (c010_w[j].ie_proc_mat = 'P') then
                        begin
                        update  procedimento_repasse
                        set     nr_lote_contabil    = nr_lote_contabil_w,
                                nr_seq_trans_fin    = c010_w[j].nr_seq_trans_fin,
                                dt_contabil         = dt_contabil_w
                        where   nr_sequencia        = c010_w[j].nr_sequencia;
                        end;
                    elsif (c010_w[j].ie_proc_mat = 'M') then
                        begin
                        update  material_repasse
                        set     nr_lote_contabil    = nr_lote_contabil_w,
                                nr_seq_trans_fin    = c010_w[j].nr_seq_trans_fin,
                                dt_contabil         = dt_contabil_w
                        where   nr_sequencia        = c010_w[j].nr_sequencia;
                        end;
                    end if;

                    ds_titulo_w := substr(OBTER_TITULO_REPASSE(c010_w[j].nr_repasse_terceiro),1,255);

                    begin
                    select  nm_pessoa_fisica
                    into STRICT    nm_medico_executor_w
                    from    pessoa_fisica
                    where   cd_pessoa_fisica = c010_w[j].cd_medico_executor;
                    exception
                      when others then
                        nm_medico_executor_w := '';
                    end;

                    begin
                    select  DS_REGRA
                    into STRICT    ds_responsavel_credito_w
                    from    regra_honorario
                    where   cd_regra = c010_w[j].ie_responsavel_credito;
                    exception
                      when others then
                        ds_responsavel_credito_w := '';
                    end;

                    begin
                    select  ds_setor_atendimento
                    into STRICT    ds_setor_atendimento_w
                    from    setor_atendimento
                    where   cd_setor_atendimento = c010_w[j].cd_setor_atendimento;
                    exception
                      when others then
                        ds_setor_atendimento_w := '';
                    end;

                    if (c010_w[j].nm_atributo in ('VL_TROCA_TERC_MAT', 'VL_TROCA_TERC_PROC')) and (c010_w[j](.nr_seq_terc_ant IS NOT NULL AND .nr_seq_terc_ant::text <> '')) then
                        begin
                        cd_conta_contabil_w := '';
                        begin
                        select  cd_cgc,
                                cd_pessoa_fisica
                        into STRICT    cd_cgc_ant_w,
                                cd_pessoa_fisica_ant_w
                        from    terceiro
                        where   nr_sequencia = c010_w[j].nr_seq_terc_ant;
                        exception
                            when others then
                                cd_cgc_ant_w           := null;
                                cd_pessoa_fisica_ant_w := null;
                        end;

                        if (cd_cgc_ant_w IS NOT NULL AND cd_cgc_ant_w::text <> '') then
                            begin
                            select  cd_conta_contabil
                            into STRICT    cd_conta_contabil_w
                            from    terceiro
                            where   nr_sequencia = c010_w[j].nr_seq_terc_ant;
                            exception
                              when others then
                                cd_conta_contabil_w := '';
                            end;
                        elsif (cd_pessoa_fisica_ant_w IS NOT NULL AND cd_pessoa_fisica_ant_w::text <> '') then
                            begin
                            select  cd_conta_contabil
                            into STRICT    cd_conta_contabil_w
                            from    terceiro
                            where   nr_sequencia = c010_w[j].nr_seq_terc_ant;
                            exception
                              when others then
                                cd_conta_contabil_w := '';
                            end;
                        end if;

                        nm_beneficiario_ant_w := substr(obter_nome_pf_pj(cd_pessoa_fisica_ant_w,cd_cgc_ant_w),1,80);
                        end;
                    end if;

                    ds_estorno_w := '';

                    if (coalesce(c010_w[j].ie_status, 'X') = 'E') then
                        ds_estorno_w := Wheb_mensagem_pck.get_texto(799390);
                    end if;

                    /* Atributos Historico */

                    CALL ctb_online_pck.definir_atrib_compl(cd_tipo_lote_contabil_w);
                    CALL ctb_online_pck.set_value_compl_hist('NM_BENEFICIARIO',        nm_beneficiario_w);
                    CALL ctb_online_pck.set_value_compl_hist('DS_CONVENIO',            ds_convenio_w);
                    CALL ctb_online_pck.set_value_compl_hist('NR_NOTA_FISCAL',         ds_nota_fiscal_w);
                    CALL ctb_online_pck.set_value_compl_hist('NR_ATENDIMENTO',         c010_w[j].nr_atendimento);
                    CALL ctb_online_pck.set_value_compl_hist('NR_CONTA_ESTORNO',       c010_w[j].nr_interno_conta_est);
                    CALL ctb_online_pck.set_value_compl_hist('NR_ATEND_ESTORNO',       c010_w[j].nr_atend_estorno);
                    CALL ctb_online_pck.set_value_compl_hist('NR_REPASSE_TERCEIRO',    c010_w[j].nr_repasse_terceiro);
                    CALL ctb_online_pck.set_value_compl_hist('DS_TITULOS',             ds_titulo_w);
                    CALL ctb_online_pck.set_value_compl_hist('NR_INTERNO_CONTA',       nr_interno_conta_w);
                    CALL ctb_online_pck.set_value_compl_hist('NM_MEDICO_EXECUTOR',     nm_medico_executor_w);
                    CALL ctb_online_pck.set_value_compl_hist('CD_REGRA',               c010_w[j].cd_regra);
                    CALL ctb_online_pck.set_value_compl_hist('DS_RESPONSAVEL_CREDITO', ds_responsavel_credito_w);
                    CALL ctb_online_pck.set_value_compl_hist('DS_SETOR_ATENDIMENTO',   ds_setor_atendimento_w);
                    CALL ctb_online_pck.set_value_compl_hist('VL_REPASSE',             c010_w[j].vl_repasse);
                    CALL ctb_online_pck.set_value_compl_hist('NM_BENEFICIARIO_ANT',    nm_beneficiario_ant_w);
                    CALL ctb_online_pck.set_value_compl_hist('NR_LOTE_CONTABIL_ANT',   c010_w[j].nr_lote_contabil_ant);
                    CALL ctb_online_pck.set_value_compl_hist('NM_ESTABELECIMENTO',     nm_estabelecimento_w);
                    CALL ctb_online_pck.set_value_compl_hist('DT_CONTA_PROTOCOLO',     dt_conta_protocolo_w);
                    CALL ctb_online_pck.set_value_compl_hist('DS_ESTORNO',             ds_estorno_w);
                    CALL ctb_online_pck.set_value_compl_hist('NR_NFE_CONTA_PROTOCOLO', nr_nfe_conta_protocolo_w);
                    CALL ctb_online_pck.set_value_compl_hist('DS_OBSERVACAO',          ds_observacao_w);
                    CALL ctb_online_pck.set_value_compl_hist('NR_SEQ_PROTOCOLO',       nr_seq_protocolo_w);
                    CALL ctb_online_pck.set_value_compl_hist('NR_PROTCOLO',            nr_protocolo_w);

                    nr_documento_w        := null;
                    ie_origem_documento_w   := null;

                    if (coalesce(c010_w[j].nr_repasse_terceiro, '0') <> '0') then
                        ds_atributos_w  := 'NR_SEQ_REPASSE=' ||
                                            c010_w[j].nr_repasse_terceiro || ';' ||
                                            'NR_SEQ_NOTA_FISCAL=' ||
                                            nr_seq_nota_fiscal_w;

                        ctb_obter_doc_movto(cd_tipo_lote_contabil_w,
                                            c010_w[j].nm_atributo,
                                            'VR',
                                            dt_contabil_w,
                                            null,
                                            null,
                                            ds_atributos_w,
                                            nm_usuario_p,
                                            ie_regra_w,
                                            nr_documento_w,
                                            ie_origem_documento_w);
                    end if;

                    /* Carrega atributos Contab. Trans. FInanc*/

                    dados_contab_w.nr_lote_contabil    := nr_lote_contabil_w;
                    dados_contab_w.cd_estab_movto      := cd_estabelecimento_w;
                    dados_contab_w.dt_transacao        := dt_contabil_w;
                    dados_contab_w.cd_conta_contabil   := cd_conta_contabil_w;
                    dados_contab_w.cd_centro_custo     := cd_centro_custo_w;
                    dados_contab_w.nr_seq_agrupamento  := nr_seq_agrupamento_w;
                    dados_contab_w.ie_origem_documento := ie_origem_documento_w;
                    dados_contab_w.cd_pessoa_fisica    := c010_w[j].cd_pessoa_fisica;
                    dados_contab_w.cd_cnpj             := c010_w[j].cd_cgc;
                    dados_contab_w.cd_setor            := c010_w[j].cd_setor_atendimento;
                    dados_contab_w.cd_convenio         := cd_convenio_w;
                    dados_contab_w.nr_repasse_terceiro := c010_w[j].nr_repasse_terceiro;
                    dados_contab_w.nr_seq_nota_fiscal  := nr_seq_nota_fiscal_w;
                    dados_contab_w.nr_seq_trans_fin    := c010_w[j].nr_seq_trans_fin;
                    dados_contab_w.nm_tabela           := c010_w[j].nm_tabela;
                    dados_contab_w.nm_atributo         := c010_w[j].nm_atributo;
                    dados_contab_w.nr_seq_tab_orig     := c010_w[j].nr_sequencia;
                    --
                    dados_contab_w.doc                       := null;
                    dados_contab_w.doc.nr_documento          := c010_w[j].nr_repasse_terceiro;
                    dados_contab_w.doc.nr_seq_doc_compl      := nr_interno_conta_w;
                    dados_contab_w.doc.dt_competencia        := dt_contabil_w;
                    dados_contab_w.doc.nr_seq_trans_financ   := c010_w[j].nr_seq_trans_fin;
                    dados_contab_w.doc.nm_tabela             := c010_w[j].nm_tabela;
                    dados_contab_w.doc.nm_atributo           := c010_w[j].nm_atributo;
                    dados_contab_w.doc.cd_estabelecimento    := cd_estabelecimento_w;
                    dados_contab_w.doc.cd_tipo_lote_contabil := cd_tipo_lote_contabil_w;
                    dados_contab_w.doc.vl_movimento          := c010_w[j].vl_repasse;
                    dados_contab_w.doc.nr_seq_info           := nr_seq_info_w;
                    dados_contab_w.doc.dt_atualizacao        := clock_timestamp();
                    dados_contab_w.doc.nr_sequencia          := ctb_doc_w.nr_sequencia;

                    /* Contabilizacao por Transacao Financeira */

                    ctb_contab_onl_lote_fin_pck.contabiliza_trans_financ(dados_contab_w, nm_usuario_p,ie_commit_movto_w,ie_atualizar_movto_w,ie_atualizar_movto_w);
                end;
                end loop;
            EXIT WHEN NOT FOUND; /* apply on c010 */
            end loop;
            close c010;
        end;
        end loop;
    EXIT WHEN NOT FOUND; /* apply on c_conta_paciente */
    end loop;
    close c_conta_paciente;

    select  sum(x.vl_debito) vl_debito,
            sum(x.vl_credito) vl_credito
    into STRICT    vl_debito_w,
            vl_credito_w
    from (
        SELECT  CASE WHEN b.ie_debito_credito='C' THEN  b.vl_movimento END  vl_credito,
                CASE WHEN b.ie_debito_credito='D' THEN  b.vl_movimento END  vl_debito
        from    movimento_contabil_doc b
        where   b.nr_seq_ctb_documento = ctb_doc_w.nr_sequencia) x;

    if  ((vl_debito_w = vl_credito_w) and coalesce(dados_contab_w.doc.ds_inconsistencia, 'X') = 'X' ) then
        begin
        update ctb_documento
        set    ie_situacao_ctb  = 'C',
            nr_lote_contabil = nr_lote_contabil_w,
            ds_inconsistencia  = NULL,
            nm_usuario       = nm_usuario_p,
            dt_atualizacao   = clock_timestamp()
        where  nr_sequencia = ctb_doc_w.nr_sequencia;
        end;
    elsif (coalesce(dados_contab_w.doc.ds_inconsistencia, 'X') <> 'X') then
        begin
        update ctb_documento
        set    ie_situacao_ctb  = 'P',
            nr_lote_contabil  = NULL,
            ds_inconsistencia = dados_contab_w.doc.ds_inconsistencia,
            nm_usuario       = nm_usuario_p,
            dt_atualizacao   = clock_timestamp()
        where  nr_sequencia = ctb_doc_w.nr_sequencia;
        end;
    end if;

    update  lote_contabil
    set     ie_situacao     = 'A',
            dt_geracao_lote = clock_timestamp(),
            dt_integracao   = clock_timestamp()
    where   nr_lote_contabil = nr_lote_contabil_w;

elsif (ie_operacao_p = 2) then

    update  protocolo_convenio x
    set     x.nr_seq_lote_repasse = 0
    where   x.nr_seq_lote_repasse = nr_lote_contabil_w
    and     x.nr_seq_protocolo = nr_seq_protocolo_p;

    update  conta_paciente a
    set     a.nr_lote_repasse = 0
    where   a.nr_lote_repasse   = nr_lote_contabil_w
    and (a.nr_interno_conta  = nr_interno_conta_p or a.nr_seq_protocolo = nr_seq_protocolo_p);

    update  repasse_terceiro a
    set     nr_lote_contabil  = NULL
    where   nr_lote_contabil = nr_lote_contabil_w
    and exists (SELECT  d.nr_repasse_terceiro
                from    Procedimento_Repasse  d,
                        Procedimento_paciente c,
                        Conta_Paciente        b
                where   b.nr_interno_conta      = c.nr_interno_conta
                and     c.nr_sequencia          = d.nr_seq_procedimento
                and     d.nr_repasse_terceiro   = a.nr_repasse_terceiro
                and (b.nr_interno_conta     = nr_interno_conta_p or b.nr_seq_protocolo = nr_seq_protocolo_p));

    update  procedimento_repasse a
    set     nr_lote_contabil = 0
    where   a.nr_lote_contabil = nr_lote_contabil_w
    and exists ( SELECT  1
                from    procedimento_paciente y,
                        conta_paciente b
                where   y.nr_sequencia = a.nr_seq_procedimento
                and     y.nr_interno_conta = b.nr_interno_conta
                and (b.nr_interno_conta = nr_interno_conta_p or b.nr_seq_protocolo = nr_seq_protocolo_p));

    update  material_repasse a
    set     a.nr_lote_contabil = 0
    where   a.nr_lote_contabil = nr_lote_contabil_w
    and exists (SELECT  1
                from    material_atend_paciente c,
                        Conta_Paciente b
                where   c.nr_sequencia      = a.nr_seq_material
                and     b.nr_interno_conta  = c.nr_interno_conta
                and (b.nr_interno_conta = nr_interno_conta_p or b.nr_seq_protocolo = nr_seq_protocolo_p));


    update  proc_mat_repasse_terc a
    set     a.nr_lote_contabil  = NULL
    where   nr_lote_contabil = nr_lote_contabil_w
    and exists (SELECT 1
                from    Conta_Paciente b,
                        material_atend_paciente c,
                        Material_Repasse d
                where   a.nr_seq_mat_repasse = d.nr_sequencia
                and     d.nr_seq_material    = c.nr_sequencia
                and     c.nr_interno_conta   = b.nr_interno_conta
                and (b.nr_interno_conta = nr_interno_conta_p or b.nr_seq_protocolo = nr_seq_protocolo_p)

union

                SELECT 1
                from    Conta_Paciente b,
                        procedimento_paciente c,
                        procedimento_repasse d
                where   a.nr_seq_proc_repasse   = d.nr_sequencia
                and     d.nr_seq_procedimento   = c.nr_sequencia
                and     c.nr_interno_conta      = b.nr_interno_conta
                and (b.nr_interno_conta = nr_interno_conta_p or b.nr_seq_protocolo = nr_seq_protocolo_p));

    begin
    CALL ctb_online_pck.ctb_excluir_lancamento_doc(ctb_doc_w.nr_sequencia, nm_usuario_p,'N');
    exception
        when others then
            ds_erro_w := substr(sqlerrm(SQLSTATE) || chr(13) || chr(10) || dbms_utility.format_error_backtrace,1,4000);
            ds_erro_w := substr(replace(ds_erro_w,'#@',''),1,4000);
            CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||ds_erro_w);
    end;

    update  ctb_documento
    set     ie_situacao_ctb  = 'P',
            nr_lote_contabil  = NULL,
            ds_inconsistencia  = NULL,
            nm_usuario       = nm_usuario_p,
            dt_atualizacao   = clock_timestamp()
    where  nr_sequencia = ctb_doc_w.nr_sequencia;

end if;

if (ie_atualizar_lote_p = 'S') then
    select  dt_atualizacao_saldo
    into STRICT    dt_atualizacao_saldo_w
    from    lote_contabil
    where   nr_lote_contabil = nr_lote_contabil_w;

    if (coalesce(dt_atualizacao_saldo_w::text, '') = '') then
        begin
            ds_erro_w := ctb_atualizar_saldo(nr_lote_contabil_w, 'S', nm_usuario_p, 'N', ds_erro_w, 'S');
        exception
            when others then
            null;
        end;
    end if;
end if;

if (ie_commit_p = 'S') then
    commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_contab_onl_repasse ( nr_seq_protocolo_p protocolo_convenio.nr_seq_protocolo%type default null, nr_interno_conta_p conta_paciente.nr_interno_conta%type DEFAULT NULL, nr_seq_proc_repasse_p procedimento_repasse.nr_sequencia%type default null, nm_usuario_p text DEFAULT NULL, ie_operacao_p bigint default 1, ie_atualizar_lote_p text default 'S', ie_commit_p text default 'S') FROM PUBLIC;

