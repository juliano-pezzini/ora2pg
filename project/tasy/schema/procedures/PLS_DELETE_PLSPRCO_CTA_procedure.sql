-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_delete_plsprco_cta ( nm_usuario_p text) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
tb_sequencia_w	pls_util_cta_pck.t_number_table;

C01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	plsprco_cta 
	where 	nm_tabela = 'PLS_CONTA' 
	and	dt_atualizacao < clock_timestamp() - interval '60 days';
	
C02 CURSOR FOR 
	SELECT	nr_sequencia 
	from	plsprco_cta 
	where 	nm_tabela = 'PLS_CONTA_PROC' 
	and	dt_atualizacao < clock_timestamp() - interval '60 days';
	
C03 CURSOR FOR 
	SELECT	nr_sequencia 
	from	plsprco_cta 
	where 	nm_tabela = 'PLS_CONTA_MAT' 
	and	dt_atualizacao < clock_timestamp() - interval '60 days';
	
C04 CURSOR FOR 
	SELECT	nr_sequencia 
	from	plsprco_cta 
	where 	nm_tabela = 'PLS_PROTOCOLO_CONTA' 
	and	dt_atualizacao < clock_timestamp() - interval '60 days';

C05 CURSOR FOR 
	SELECT	nr_sequencia 
	from	plsprco_cta 
	where 	nm_tabela = 'PLS_PROC_PARTICIPANTE' 
	and	dt_atualizacao < clock_timestamp() - interval '60 days';

C06 CURSOR FOR 
	SELECT	nr_sequencia 
	from	plsprco_cta 
	where 	nm_tabela = 'PLS_CONTA_MEDICA_RESUMO' 
	and	dt_atualizacao < clock_timestamp() - interval '60 days';
	

BEGIN 
--exec pls_delete_plsprco_cta('TASY'); 
CALL exec_sql_dinamico('TASY', 'alter trigger PLS_DESTRUCTION_CTA_MED disable'); /* Inativa a trigger que gava os registros de exclusao da tabela plsprco_cta */
 
open C01;
loop 
	-- Limpa os registros da lista para que não seja processado o mesmo registro mais de uma vez. 
	tb_sequencia_w.delete;
	 
	-- Executa o fetch de um número determinado de linhas do cursor na lista. 
	fetch C01 bulk collect into tb_sequencia_w limit pls_util_pck.qt_registro_transacao_w;
 
	-- Quando o cursor não tiver mais linhas então sai do loop. 
	exit when tb_sequencia_w.count = 0;
				 
	-- apaga os registros em lote 
	forall i in tb_sequencia_w.first..tb_sequencia_w.last 
		delete from plsprco_cta 
		where	nr_sequencia		= tb_sequencia_w(i);
	 
	commit;
end loop;
close C01;
 
 
open C02;
loop 
	-- Limpa os registros da lista para que não seja processado o mesmo registro mais de uma vez. 
	tb_sequencia_w.delete;
	 
	-- Executa o fetch de um número determinado de linhas do cursor na lista. 
	fetch C02 bulk collect into tb_sequencia_w limit pls_util_pck.qt_registro_transacao_w;
 
	-- Quando o cursor não tiver mais linhas então sai do loop. 
	exit when tb_sequencia_w.count = 0;
				 
	-- apaga os registros em lote 
	forall i in tb_sequencia_w.first..tb_sequencia_w.last 
		delete from plsprco_cta 
		where	nr_sequencia		= tb_sequencia_w(i);
	 
	commit;
end loop;
close C02;
 
open C03;
loop 
	-- Limpa os registros da lista para que não seja processado o mesmo registro mais de uma vez. 
	tb_sequencia_w.delete;
	 
	-- Executa o fetch de um número determinado de linhas do cursor na lista. 
	fetch C03 bulk collect into tb_sequencia_w limit pls_util_pck.qt_registro_transacao_w;
 
	-- Quando o cursor não tiver mais linhas então sai do loop. 
	exit when tb_sequencia_w.count = 0;
				 
	-- apaga os registros em lote 
	forall i in tb_sequencia_w.first..tb_sequencia_w.last 
		delete from plsprco_cta 
		where	nr_sequencia		= tb_sequencia_w(i);
	 
	commit;
end loop;
close C03;
 
open C04;
loop 
	-- Limpa os registros da lista para que não seja processado o mesmo registro mais de uma vez. 
	tb_sequencia_w.delete;
	 
	-- Executa o fetch de um número determinado de linhas do cursor na lista. 
	fetch C04 bulk collect into tb_sequencia_w limit pls_util_pck.qt_registro_transacao_w;
 
	-- Quando o cursor não tiver mais linhas então sai do loop. 
	exit when tb_sequencia_w.count = 0;
				 
	-- apaga os registros em lote 
	forall i in tb_sequencia_w.first..tb_sequencia_w.last 
		delete from plsprco_cta 
		where	nr_sequencia		= tb_sequencia_w(i);
	 
	commit;
end loop;
close C04;
 
open C05;
loop 
	-- Limpa os registros da lista para que não seja processado o mesmo registro mais de uma vez. 
	tb_sequencia_w.delete;
	 
	-- Executa o fetch de um número determinado de linhas do cursor na lista. 
	fetch C05 bulk collect into tb_sequencia_w limit pls_util_pck.qt_registro_transacao_w;
 
	-- Quando o cursor não tiver mais linhas então sai do loop. 
	exit when tb_sequencia_w.count = 0;
				 
	-- apaga os registros em lote 
	forall i in tb_sequencia_w.first..tb_sequencia_w.last 
		delete from plsprco_cta 
		where	nr_sequencia		= tb_sequencia_w(i);
	 
	commit;
end loop;
close C05;
 
open C06;
loop 
	-- Limpa os registros da lista para que não seja processado o mesmo registro mais de uma vez. 
	tb_sequencia_w.delete;
	 
	-- Executa o fetch de um número determinado de linhas do cursor na lista. 
	fetch C06 bulk collect into tb_sequencia_w limit pls_util_pck.qt_registro_transacao_w;
 
	-- Quando o cursor não tiver mais linhas então sai do loop. 
	exit when tb_sequencia_w.count = 0;
				 
	-- apaga os registros em lote 
	forall i in tb_sequencia_w.first..tb_sequencia_w.last 
		delete from plsprco_cta 
		where	nr_sequencia		= tb_sequencia_w(i);
	 
	commit;
end loop;
close C06;
 
CALL exec_sql_dinamico('TASY', 'alter trigger PLS_DESTRUCTION_CTA_MED enable'); /* Inativa a trigger que gava os registros de exclusao da tabela plsprco_cta */
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_delete_plsprco_cta ( nm_usuario_p text) FROM PUBLIC;

