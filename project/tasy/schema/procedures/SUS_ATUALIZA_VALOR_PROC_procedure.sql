-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_atualiza_valor_proc ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE



dt_atualizacao_w			timestamp		:= clock_timestamp();
nr_interno_conta_w			conta_paciente.nr_interno_conta%type;
nr_atendimento_w			atendimento_paciente.nr_atendimento%type;
cd_procedimento_w		procedimento_paciente.cd_procedimento%type;
ie_origem_proced_w		procedimento_paciente.ie_origem_proced%type;
cd_estabelecimento_w		conta_paciente.cd_estabelecimento%type;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
dt_procedimento_w			procedimento_paciente.dt_procedimento%type;
dt_entrada_w			timestamp;
dt_alta_w				timestamp;
ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;
nr_doc_convenio_w		varchar(20);
cd_setor_atendimento_w		procedimento_paciente.cd_setor_atendimento%type;
dt_acerto_conta_w			timestamp;
cd_convenio_calculo_w		conta_paciente.cd_convenio_calculo%type;
cd_categoria_calculo_w		conta_paciente.cd_categoria_calculo%type;
ds_log_w				varchar(2000);
vl_sa_w				double precision	:= 0;
vl_sh_w				double precision	:= 0;
vl_sp_w				double precision	:= 0;
vl_sp_rateio_w			double precision;
vl_sadt_w			double precision	:= 0;
vl_total_hospitalar_w		double precision	:= 0;
vl_total_amb_w			double precision	:= 0;
vl_procedimento_w			procedimento_paciente.vl_procedimento%type	:= 0;
vl_proc_original_w			double precision	:= 0;
vl_anestesista_w			double precision	:= 0;
vl_auxiliares_w			double precision	:= 0;
vl_anestesia_w			double precision	:= 0;
vl_honorario_medico_w		double precision	:= 0;
vl_matmed_w			double precision	:= 0;
qt_pontos_ato_w			sus_valor_proc_paciente.qt_ato_medico%type	:= 0;
qt_procedimento_w			procedimento_paciente.qt_procedimento%type	:= 0;
nr_aih_w				bigint;
nr_seq_aih_w			bigint;
nr_seq_apac_w			bigint;

nr_seq_partic_w			bigint;
vl_conta_partic_w			double precision 	:= 0;
vl_participante_w			double precision	:= 0;
vl_original_part_w			double precision	:= 0;
qt_ponto_sus_w		procedimento_participante.qt_ponto_sus%type		:= 0;
ie_emite_conta_part_w		varchar(3);
cd_regra_honor_part_w		varchar(5);
pr_participante_w			double precision	:= 0;
cd_cgc_partic_w			varchar(14);
ie_regra_hon_w			smallint;
ie_pacote_w			varchar(1)	:= 'A';
nr_seq_proc_pacote_w		bigint;
ie_conv_calculo_honorario_w		varchar(1);
nr_seq_criterio_w			bigint;
cd_pessoa_honorario_w		varchar(10);
ie_calcula_honorario_w		varchar(1)	:= 'S';
vl_medico_conta_w			double precision	:= 0;
ie_conta_honorario_w		varchar(1);
cd_cgc_honorario_w		varchar(14);
cd_cgc_prestador_w		varchar(14);
cd_regra_honorario_w		varchar(5);
cd_medico_executor_w   		varchar(10);
cd_convenio_parametro_w		bigint;
cd_categoria_parametro_w		varchar(10);
qt_regra_proc_adic_w		integer		:= 0;
ie_carater_inter_sus_w		varchar(2);
cd_carater_internacao_w		varchar(2);
cd_pessoa_fisica_w         		varchar(10);
dt_conta_w			timestamp		:= clock_timestamp();
ie_valor_informado_w      		varchar(1);
vl_custo_oper_orig_w		double precision	:= 0;
vl_anestesista_orig_w		double precision	:= 0;
vl_medico_orig_w			double precision	:= 0;
vl_materiais_orig_w			double precision	:= 0;
vl_auxiliares_orig_w			double precision	:= 0;
vl_proc_orig_w			double precision	:= 0;
tx_procedimento_w			double precision	:= 0;
vl_adic_plant_orig_w		double precision	:= 0;
ie_doc_executor_w			integer	:= 0;
ie_doc_executor_ww		integer	:= 0;
nr_seq_regra_doc_w		bigint	:= 0;
cd_profissional_w			varchar(10);
pr_incremento_sa_w		double precision	:= 0;
pr_incremento_sh_w		double precision	:= 0;
pr_incremento_sp_w		double precision	:= 0;
pr_incremento_sadt_w		double precision	:= 0;
pr_urg_emerg_w			real	:= 0;
dt_competencia_w			timestamp;
ie_conta_cancelada_w		varchar(1)	:= 'X';
ie_proc_urgencia_w		varchar(1)	:= 'N';
ie_proc_aih_urgencia_w		varchar(1)	:= 'N';
qt_registros_w			bigint	:= 0;
cd_estrutura_w			integer 	:= 0;
cd_estrutura_honor_w		integer 	:= 0;
cd_especialidade_medica_w		integer		:= 0;
ie_emite_conta_w           		varchar(3);
ie_emite_conta_honor_w         	varchar(3);
ie_funcao_medico_w		varchar(10);
cd_cbo_w			varchar(6);
nr_seq_proc_interno_w		bigint;
qt_glosa_conta_convenio_w		bigint	:= 0;
ie_glosa_w			varchar(1);
cd_situacao_glosa_w		bigint;
ds_retorno_glosa_w			varchar(100);
nr_seq_ajuste_proc_w		bigint;
nr_seq_ajuste_proc_ww		bigint;
cd_categoria_orig_w		varchar(10);
cd_procedimento_real_w		bigint	:= 0;
cd_motivo_exc_conta_ww		bigint;
cd_motivo_exc_conta_w		bigint;
cd_motivo_exc_conta_par_w	bigint;
ie_inc_proc_urg_aih_w		varchar(1);
ie_clinica_w			integer;
ie_inc_proc_conta_w		varchar(15);
ie_inc_proc_conta_data_w		varchar(15);
cd_estab_terceiro_w      		smallint;
qt_reg_estab_terc_w      		bigint;
ie_sexo_w			varchar(1);
cd_convenio_sus_w		integer;
vl_negociado_w			double precision	:= 0;
vl_soma_proc_w			double precision	:= 0;
pr_ajuste_w			double precision  	:= 0;
vl_saldo_w			double precision	:= 0;
vl_incremento_pnash_w		double precision 	:= 0;
qt_reg_proc_w			integer		:= 0;
ie_gerar_proc_adic_sus_w		varchar(15) 	:= 'N';
cd_procedencia_w			integer;
ie_regra_tipo_atend_w		varchar(1)	:= 'A';
tx_ajuste_w			double precision;
qt_regra_porte_proced_w		bigint;
ie_status_acerto_w			smallint;
cd_proc_referencia_w		bigint;
ie_origem_proc_refer_w		bigint;
qt_proc_ref_w			bigint;
ie_regra_rn_item_w			varchar(1);
nr_dias_gastos_rn_w		bigint	:= 0;
ie_dias_gastos_rn_w		varchar(1)	:= 'N';
ie_trat_conta_rn_w			varchar(15);
ie_trat_conta_rn_ww		varchar(15);
cd_clas_setor_rn_sus_w		parametro_faturamento.cd_clas_setor_rn_sus%type := 'X';
cd_classif_setor_w			varchar(2);
ie_classif_gastos_rn_w		varchar(1)	:= 'S';
ie_gastos_rn_alta_w		varchar(1)	:= 'N';
pr_ivh_w				real	:= 0;
ie_alterar_sp_proc_rim_w		varchar(1)	:= 'N';
cd_setor_atend_prescr_w    		integer	:= 0;
nr_prescricao_w			bigint	:= 0;
ie_incremento_anestesista_w		varchar(1)	:= 'N';
ds_carater_incremento_w		varchar(40) := '';
nr_seq_crit_honorario_w		bigint;
ie_incemento_seq_onco_w		varchar(15) := 'N';
qt_hab_inc_onc_w		bigint;
ie_conv_conta_param_sus_w	varchar(15) := 'N';
cd_convenio_orig_w		integer;
cd_categ_orig_w		varchar(10);
vartipoguiaregra_w		varchar(1);
ie_lac_proc_conta_apac_bpa_w	varchar(15) := 'N';
qt_dia_fim_conta_w		bigint;
dt_periodo_inicial_w		timestamp;
ie_periodo_inicial_seg_w	varchar(1) := 'N';
ie_separa_conta_w		varchar(1) := 'N';
dt_periodo_final_w		timestamp;
cd_convenio_calculo_ww		integer;
cd_categoria_calculo_ww		varchar(10);
ie_tipo_atend_conta_w		smallint;
ie_tipo_guia_w			varchar(5);
qt_contas_partic_w		bigint;
dt_referencia_w			timestamp;
ie_tipo_convenio_w		smallint;
qt_regra_cir_elet_w		bigint := 0;
vl_sh_regra_w			sus_regra_cirur_elet_proc.vl_sh%type	:= 0;
vl_sp_regra_w			sus_regra_cirur_elet_proc.vl_sp%type	:= 0;
pr_acrescimo_regra_w		sus_regra_cirur_elet_proc.pr_acrescimo%type	:= 0;
nr_seq_exame_w			bigint;
nr_seq_origem_w			bigint;
qt_conta_vazia_w		bigint;
nr_conta_vazia_w		bigint;
nr_seq_conta_origem_w		bigint;
ie_atualiza_func_medico_w	convenio_estabelecimento.ie_atualiza_func_medico%type;
cd_conta_contabil_w			procedimento_paciente.cd_conta_contabil%type;
cd_centro_custo_w			procedimento_paciente.cd_centro_custo_receita%type;
cd_plano_w				varchar(40);
ie_classif_convenio_w	varchar(3);
ie_complexidade_sus_w	varchar(2);
ie_tipo_financ_sus_w	varchar(4);
cd_pessoa_partic_w		procedimento_participante.cd_pessoa_fisica%type;
cd_cbo_partic_w			procedimento_participante.cd_cbo%type;
nr_seq_atepacu_w			procedimento_paciente.nr_seq_atepacu%type;
cd_mat_item_ref_w		regra_ajuste_item_ref.cd_material%type;
cd_proc_item_ref_w		regra_ajuste_item_ref.cd_procedimento%type;
ie_origem_proc_item_ref_w	regra_ajuste_item_ref.ie_origem_proced%type;
qt_reg_ajuste_item_ref_w	bigint;
cd_registro_proc_w		sus_valor_proc_paciente.cd_registro_proc%type := null;
cd_registro_proc_bpa_w		sus_valor_proc_paciente.cd_registro_proc%type := null;
cd_medico_exec_exp_w		sus_valor_proc_paciente.cd_medico_exec_exp%type;
cd_cbo_exp_w			sus_valor_proc_paciente.cd_cbo_exp%type;
cd_cns_medico_exec_w		sus_valor_proc_paciente.cd_cns_medico_exec%type;
ie_especial_proc_exec_w		parametro_faturamento.ie_especial_proc_exec%type;
nr_seq_classif_medico_w		atendimento_paciente.nr_seq_classif_medico%type;
ie_aih_saude_mental_w		varchar(15) := 'N';
qt_obs_conta_w			bigint := 0;
nr_idade_pac_proc_w		sus_valor_proc_paciente.nr_idade_pac_proc%type;
nr_sequencia_regra_w		regra_conta_terceiro.nr_sequencia%type := 0;
ie_ajusta_tipo_fin_w		sus_regra_cirurgia_eletiva.ie_ajusta_tipo_fin_aih%type;
ie_cont_conj_ex_transp_w	sus_parametros_bpa.ie_cont_conj_ex_transp%type := 'N';
qt_proc_pac_forma_w		integer		:= 0;
ie_exp_bpa_doa_org_w		sus_valor_proc_paciente.ie_exp_bpa_doa_org%type := 'S';
ie_identifica_conta_proc_w varchar(1);
ie_zera_conta_saude_ment_w	sus_parametros_aih.ie_zera_conta_saude_ment%type := 'N';
cd_tiporeg_proc1_w		varchar(15);
cd_tiporeg_proc3_w		varchar(15);
ie_gerar_conta_proc_w		sus_parametros_bpa.ie_gerar_conta_proc%type := 'S';
ie_tipo_rounded_w           convenio_estabelecimento.IE_ARREDONDAMENTO%type;
ie_regra_arred_increm_w     sus_parametros_aih.ie_regra_arred_increm%type;
vl_sh_rounded_w				double precision	:= 0;
vl_sp_rounded_w				double precision	:= 0;
vl_sadt_rounded_w			double precision	:= 0;
qt_reg_estab_terc_ww            bigint;
nr_interno_conta_ww		conta_paciente.nr_interno_conta%type;
ie_link_bpa_account_w           varchar(1);
ie_vinc_apac_w                  integer;
ie_vinc_bpa_w                   integer;

c01 CURSOR FOR
SELECT	nr_seq_partic,
	cd_pessoa_fisica,
	cd_cbo
from	procedimento_participante
where	nr_sequencia 		= nr_sequencia_p
and	ie_origem_proced_w	= 7
and	((exists (	select	1
		from	sus_procedimento_registro x
			where	x.cd_procedimento	= cd_procedimento_w
			and	x.ie_origem_proced	= ie_origem_proced_w
			and	x.cd_registro(3,4,5) )) or (ie_tipo_atendimento_w	<> 1));

C02 CURSOR FOR
	SELECT	cd_material,
		cd_procedimento,
		ie_origem_proced
	from	regra_ajuste_item_ref
	where	nr_seq_regra_ajuste_proc = nr_seq_ajuste_proc_ww
	and	ie_situacao = 'A';
	
	procedure criar_conta as
		;
BEGIN
	/* definir periodo da conta */

		dt_acerto_conta_w 	:= coalesce(dt_acerto_conta_w,clock_timestamp());

		begin
		select	dt_ref_valida,
			coalesce(obter_valor_conv_estab(cd_convenio, cd_estabelecimento_w, 'IE_SEPARA_CONTA'),'N')
			ie_separa_conta,
			coalesce(ie_tipo_convenio,0)
		into STRICT	dt_referencia_w,
			ie_separa_conta_w,
			ie_tipo_convenio_w
		from	convenio
		where	cd_convenio = cd_convenio_orig_w;
		exception
			when others then
				begin
				dt_referencia_w  	:= dt_periodo_final_w;
				ie_separa_conta_w	:= 'N';
				end;
		end;

		select	coalesce(max(obter_valor_conv_estab(cd_convenio, cd_estabelecimento_w, 'QT_DIA_FIM_CONTA')), 0)
		into STRICT	qt_dia_fim_conta_w
		from	convenio
		where	cd_convenio	= cd_convenio_orig_w;

		if (qt_dia_fim_conta_w = 0) then
			dt_periodo_inicial_w 	:= dt_entrada_w;

		else

			select	coalesce(max(ie_periodo_inicial_seg),'N')
			into STRICT	ie_periodo_inicial_seg_w
			from	convenio_estabelecimento
			where	cd_convenio = cd_convenio_orig_w
			and	cd_estabelecimento = cd_estabelecimento_w;

			select 	CASE WHEN ie_periodo_inicial_seg_w='S' THEN  coalesce(max(dt_periodo_final) + 1/86400, dt_entrada_w)  ELSE coalesce(max(dt_periodo_final), dt_entrada_w) END
			into STRICT	dt_periodo_inicial_w
			from 	conta_paciente
			where 	nr_atendimento 		= nr_atendimento_w
			and	cd_convenio_parametro	= cd_convenio_orig_w
			and	cd_estabelecimento	= cd_estabelecimento_w
			and	cd_categoria_parametro	= cd_categ_orig_w
			and	((ie_separa_conta_w	= 'N') or (coalesce(nr_doc_convenio_w::text, '') = '')
				or ( not exists (	SELECT	1
							from	conta_paciente_guia b
							where	b.nr_atendimento	= nr_atendimento_w
							and	b.cd_autorizacao	= nr_doc_convenio_w)));
		end if;

		begin
		select	obter_data_final_conta(dt_periodo_inicial_w, dt_alta_w, cd_convenio_orig_w, cd_estabelecimento_w)
		into STRICT	dt_periodo_final_w
		;
		exception
			when others then
				begin
				dt_periodo_final_w	:= dt_periodo_inicial_w + 365;
				end;
		end;

		if (dt_periodo_final_w < clock_timestamp()) then
			dt_periodo_final_w:= clock_timestamp() + interval '365 days';
		end if;

		/* gerar conta paciente */

		cd_convenio_calculo_ww	:= cd_convenio_orig_w;
		cd_categoria_calculo_ww	:= cd_categ_orig_w;

		select	max(ie_tipo_atendimento)
		into STRICT	ie_tipo_atend_conta_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_w;

		if (coalesce(vartipoguiaregra_w,'N') = 'S') then
			select	max(ie_tipo_guia)
			into STRICT	ie_tipo_guia_w
			from 	tipo_guia_conta
			where 	ie_tipo_atendimento	= ie_tipo_atend_conta_w;
		end if;

		select	count(*)
		into STRICT	qt_contas_partic_w
		from	conta_paciente
		where	cd_convenio_parametro 	= cd_convenio_orig_w
		and	nr_atendimento 		= nr_atendimento_w
		and	ie_status_acerto 	= 1;

		select 	nextval('conta_paciente_seq')
		into STRICT 	nr_interno_conta_w
		;

		insert into conta_paciente(nr_atendimento,
			dt_acerto_conta,
			ie_status_acerto,
			dt_periodo_inicial,
			dt_periodo_final,
			dt_atualizacao,
			nm_usuario,
			cd_convenio_parametro,
			cd_categoria_parametro,
			dt_mesano_referencia,
			dt_mesano_contabil,
			cd_convenio_calculo,
			cd_categoria_calculo,
			nr_interno_conta,
			cd_estabelecimento,
			nr_protocolo,
			vl_conta,
			vl_desconto,
			ie_tipo_atend_conta,
			ie_tipo_guia)
		values (nr_atendimento_w,
			dt_acerto_conta_w,
			1,
			dt_periodo_inicial_w,
			dt_periodo_final_w,
			clock_timestamp(),
			'Tasy',
			cd_convenio_orig_w,
			cd_categ_orig_w,
			dt_referencia_w,
			dt_referencia_w,
			cd_convenio_orig_w,
			cd_categ_orig_w,
			nr_interno_conta_w,
			cd_estabelecimento_w,
			'0', 0, 0,
			ie_tipo_atend_conta_w,
			ie_tipo_guia_w);

		ds_log_w:= substr(dbms_utility.format_call_stack,1,1800);

		insert into conpaci_log(nr_sequencia,
			nr_interno_conta,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_periodo_inicial,
			dt_periodo_final,
			cd_convenio,
			cd_categoria,
			cd_estabelecimento,
			ds_log,
			ie_acao,
			cd_funcao,
			nr_atendimento
			)
		values (nextval('conpaci_log_seq'),
			nr_interno_conta_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			dt_periodo_inicial_w,
			dt_periodo_final_w,
			cd_convenio_orig_w,
			cd_categ_orig_w,
			cd_estabelecimento_w,
			ds_log_w,
			'I',
			obter_funcao_ativa,
			nr_atendimento_w);

		CALL gerar_lanc_apos_conta(nr_atendimento_w, null, 211, nm_usuario_p, null, null, null, null, null, nr_interno_conta_w);

		/*     gerar conta paciente guia*/

		if (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') then
			insert into conta_paciente_guia(nr_interno_conta      	,
				cd_autorizacao 		,
				nr_seq_envio           	,
				nr_atendimento         	,
				dt_acerto_conta        	,
				ie_situacao_guia       	,
				vl_guia                	,
				dt_atualizacao         	,
				nm_usuario             	)
			values (nr_interno_conta_w,
				nr_doc_convenio_w,
				0,
				nr_atendimento_w,
				dt_acerto_conta_w,
				'P',
				0,
				clock_timestamp(),
				'Tasy');
		end if;
	end;

begin

/* Obter o registro do procedimento do paciente */

begin
select	nr_interno_conta,
	nr_atendimento,
	cd_procedimento,
	ie_origem_proced,
	cd_convenio,
	cd_categoria,
	dt_procedimento,
	nr_doc_convenio,
	cd_setor_atendimento,
	dt_acerto_conta,
	qt_procedimento,
	nr_seq_proc_pacote,
	cd_medico_executor,
	coalesce(dt_conta, coalesce(dt_prescricao,dt_procedimento)),
	ie_valor_informado,
	coalesce(vl_custo_operacional,0),
	coalesce(vl_anestesista,0),
	coalesce(vl_medico,0),
	coalesce(vl_materiais,0),
	coalesce(vl_auxiliares,0),
	coalesce(vl_procedimento,0),
	coalesce(tx_procedimento,100),
	coalesce(vl_adic_plant,0),
	ie_doc_executor,
	cd_cgc_prestador,
	cd_pessoa_fisica,
	cd_cgc_prestador,
	cd_especialidade,
	ie_funcao_medico,
	cd_cbo,
	cd_categoria,
	cd_motivo_exc_conta,
	nr_seq_conta_origem,
	nr_seq_proc_interno,
	nr_prescricao,
	nr_seq_exame,
	nr_seq_atepacu
into STRICT	nr_interno_conta_w,
	nr_atendimento_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	cd_convenio_orig_w,
	cd_categ_orig_w,
	dt_procedimento_w,
	nr_doc_convenio_w,
	cd_setor_atendimento_w,
	dt_acerto_conta_w,
	qt_procedimento_w,
	nr_seq_proc_pacote_w,
	cd_medico_executor_w,
	dt_conta_w,
	ie_valor_informado_w,
	vl_custo_oper_orig_w,
	vl_anestesista_orig_w,
	vl_medico_orig_w,
	vl_materiais_orig_w,
	vl_auxiliares_orig_w,
	vl_proc_orig_w,
	tx_procedimento_w,
	vl_adic_plant_orig_w,
	ie_doc_executor_w,
	cd_cgc_prestador_w,
	cd_profissional_w,
	cd_cgc_prestador_w,
	cd_especialidade_medica_w,
	ie_funcao_medico_w,
	cd_cbo_w,
	cd_categoria_orig_w,
	cd_motivo_exc_conta_w,
	nr_seq_conta_origem_w,
	nr_seq_proc_interno_w,
	nr_prescricao_w,
	nr_seq_exame_w,
	nr_seq_atepacu_w
from	procedimento_paciente
where	nr_sequencia	= nr_sequencia_p;
exception
	when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173383);--Erro ao ler procedimento_paciente.
end;

/* Obter dados da conta */

begin
select	coalesce(b.ie_cancelamento,'X'),
	ie_status_acerto
into STRICT	ie_conta_cancelada_w,
	ie_status_acerto_w
from	conta_paciente		b,
	procedimento_paciente	a
where	a.nr_sequencia		= nr_sequencia_p
and	a.nr_interno_conta	= b.nr_interno_conta;
exception
	when others then
	ie_conta_cancelada_w	:= 'X';
	ie_status_acerto_w	:= 1;
end;

if (ie_conta_cancelada_w <> 'X' ) then
	goto final;
end if;

/* Obter o estabelecimento do atendimento */

begin
select	cd_estabelecimento,
	dt_entrada,
	coalesce(dt_alta,to_date('01/01/1900 00:00:00','dd/mm/yyyy hh24:mi:ss')),
	ie_tipo_atendimento,
	ie_carater_inter_sus,
	ie_clinica,
	cd_pessoa_fisica,
	obter_sexo_pf(cd_pessoa_fisica,'C'),
	ie_trat_conta_rn
into STRICT  	cd_estabelecimento_w,
	dt_entrada_w,
	dt_alta_w,
	ie_tipo_atendimento_w,
	ie_carater_inter_sus_w,
	ie_clinica_w,
	cd_pessoa_fisica_w,
	ie_sexo_w,
	ie_trat_conta_rn_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_w;
exception
	when others then
        cd_estabelecimento_w	:= 1;
	ds_log_w		:= WHEB_MENSAGEM_PCK.get_texto(299378); --Sus_Atualiza_Valor_Proc(obter o estabelecimento do atendimento)
end;

/*Obter parametros de Faturamento*/

select	coalesce(max(ie_conv_calculo_honorario), 'A'),
	coalesce(max(cd_convenio_sus),0),
	coalesce(max(ie_gerar_proc_adic_sus),'N'),
	coalesce(max(ie_regra_tipo_atend),'A'),
	coalesce(max(ie_regra_rn_item),'S'),
	coalesce(max(ie_gastos_rn_alta),'N'),
	coalesce(max(ie_conv_conta_param_sus),'N'),
	coalesce(max(ie_lac_proc_conta_apac_bpa),'N'),
	max(cd_motivo_exc_conta),
	coalesce(max(cd_clas_setor_rn_sus),'X'),
	coalesce(max(ie_especial_proc_exec),'N')
into STRICT	ie_conv_calculo_honorario_w,
	cd_convenio_sus_w,
	ie_gerar_proc_adic_sus_w,
	ie_regra_tipo_atend_w,
	ie_regra_rn_item_w,
	ie_gastos_rn_alta_w,
	ie_conv_conta_param_sus_w,
	ie_lac_proc_conta_apac_bpa_w,
	cd_motivo_exc_conta_par_w,
	cd_clas_setor_rn_sus_w,
	ie_especial_proc_exec_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

ie_link_bpa_account_w   := coalesce(Obter_Valor_Param_Usuario(1125,175,Obter_Perfil_Ativo,nm_usuario_p,cd_estabelecimento_w),'N');

if (coalesce(ie_regra_tipo_atend_w,'A') = 'C') then
	begin
	select	coalesce(max(ie_tipo_atend_conta),ie_tipo_atendimento_w)
	into STRICT	ie_tipo_atendimento_w
	from 	conta_paciente
	where 	nr_interno_conta = nr_interno_conta_w;
	exception
		when others then
		ie_tipo_atendimento_w:= ie_tipo_atendimento_w;
	end;
end if;

if (nr_interno_conta_w IS NOT NULL AND nr_interno_conta_w::text <> '') and (coalesce(ie_conv_conta_param_sus_w,'N') = 'S') then

	select	coalesce(cd_convenio_calculo,cd_convenio_parametro),
		coalesce(cd_categoria_calculo,cd_categoria_parametro)
	into STRICT	cd_convenio_w,
		cd_categoria_w
	from	conta_paciente
	where	nr_interno_conta	= nr_interno_conta_w;

	cd_convenio_orig_w		:= cd_convenio_w;
	cd_categ_orig_w		:= cd_categoria_w;
	cd_convenio_calculo_w		:= cd_convenio_w;
	cd_categoria_calculo_w		:= cd_categoria_w;
end if;

begin
select	cd_procedencia,
	coalesce((obter_dados_categ_conv(nr_atendimento,'OC'))::numeric ,0),
	coalesce(nr_seq_classif_medico,0)
into STRICT	cd_procedencia_w,
	nr_seq_origem_w,
	nr_seq_classif_medico_w
from 	atendimento_paciente
where 	nr_atendimento 	= nr_atendimento_w;
exception
    	when others then
      	cd_procedencia_w := 0;
	nr_seq_origem_w := 0;
	nr_seq_classif_medico_w	:= 0;
end;

/* rotina nova para gerar conta no estabelecimento do terceiro  - inicio (Fabricio-09/11/09) */

cd_estab_terceiro_w	:= 0;
qt_reg_estab_terc_w	:= 0;

select	count(*)
into STRICT	qt_reg_estab_terc_w
from	regra_conta_terceiro
where	cd_estabelecimento	= cd_estabelecimento_w
and	coalesce(cd_convenio,cd_convenio_orig_w) = cd_convenio_orig_w;

if (qt_reg_estab_terc_w	> 0) then
	begin

	SELECT * FROM obter_estab_regr_conta_terc(
			cd_estabelecimento_w, cd_convenio_orig_w, cd_categ_orig_w, ie_tipo_atendimento_w, cd_setor_atendimento_w, 0, 0, 0, cd_procedimento_w, ie_origem_proced_w, 0, 0, 0, 0, null, null, cd_medico_executor_w, coalesce(dt_conta_w,dt_procedimento_w), ie_clinica_w, nr_seq_proc_interno_w, cd_estab_terceiro_w, nr_sequencia_regra_w) INTO STRICT cd_estab_terceiro_w, nr_sequencia_regra_w;

	if (cd_estab_terceiro_w	<> 0) then
		cd_estabelecimento_w	:= cd_estab_terceiro_w;

                begin
                select  count(*)
                into STRICT    qt_reg_estab_terc_ww
                from    conta_paciente
                where   nr_interno_conta = nr_interno_conta_w
                and     cd_estabelecimento <> cd_estabelecimento_w;
                exception
                when others then
                        qt_reg_estab_terc_ww := 0;
                end;

                        if (qt_reg_estab_terc_ww > 0) then
                                nr_interno_conta_w := null;
                        end if;

	end if;

	end;
end if;
/* rotina nova para gerar conta no estabelecimento do terceiro  - final  */

/*-
select	nvl(max(ie_urgencia),'N')
into	ie_proc_urgencia_w
from	sus_procedimento
where	cd_procedimento		= cd_procedimento_w
and	ie_origem_proced	= ie_origem_proced_w;

select	nvl(max(ie_urgencia),'N')
into	ie_proc_aih_urgencia_w
from	sus_procedimento
where	cd_procedimento		=  somente_numero(Sus_Obter_Proced_Aih_Unif(nr_interno_Conta_w,2,'C'))
and	ie_origem_proced	= 7;
*/
ie_proc_urgencia_w	:= sus_obter_se_proc_urgencia(cd_procedimento_w,ie_origem_proced_w);
ie_proc_aih_urgencia_w	:= sus_obter_se_proc_urgencia(sus_obter_proced_aih_unif(nr_interno_conta_w,2,'C'),7);
/* Obter dados dos Parametros AIH */

if (ie_proc_urgencia_w		= 'S') or (ie_proc_aih_urgencia_w 	= 'S') then

	begin
	select	coalesce(pr_urg_emerg,0),
		ie_inc_proc_urg_aih,
		substr(ds_carater_incremento,1,40)
	into STRICT	pr_urg_emerg_w,
		ie_inc_proc_urg_aih_w,
		ds_carater_incremento_w
	from	sus_parametros_aih
	where	cd_estabelecimento	= cd_estabelecimento_w;
	exception
		when others then
	        pr_urg_emerg_w		:= 0;
		ie_inc_proc_urg_aih_w	:= 'S';
		ds_carater_incremento_w	:= '';
		ds_log_w			:= WHEB_MENSAGEM_PCK.get_texto(299385, 'CD_ESTABELECIMENTO_W=' || cd_estabelecimento_w); --Sus_Atualiza_Valor_Proc(obter dados do estabelecimento #@CD_ESTABELECIMENTO_W#@ do atendimento)
	end;

end if;

if (ie_tipo_atendimento_w	<> 1) then
	begin

	select  coalesce(max(ie_cont_conj_ex_transp),'N'),
            coalesce(max(ie_gerar_conta_proc),'N')
    into STRICT	ie_cont_conj_ex_transp_w,
            ie_gerar_conta_proc_w
    from	sus_parametros_bpa
	where	cd_estabelecimento = cd_estabelecimento_w;

	end;
end if;

select 	coalesce(max(nr_dias_gastos_rn),0),
	coalesce(max(ie_atualiza_func_medico),'N')
into STRICT	nr_dias_gastos_rn_w,
	ie_atualiza_func_medico_w
from	convenio_estabelecimento
where	cd_convenio		= cd_convenio_orig_w
and	cd_estabelecimento	= cd_estabelecimento_w;

if (nr_dias_gastos_rn_w = 0 ) then

	select 	coalesce(max(nr_dias_gastos_rn),0)
	into STRICT	nr_dias_gastos_rn_w
	from 	parametro_faturamento
	where 	cd_estabelecimento = cd_estabelecimento_w;

end if;

select 	coalesce(max(cd_classif_setor),0)
into STRICT	cd_classif_setor_w
from 	setor_atendimento
where 	cd_setor_atendimento = cd_setor_atendimento_w;

ie_dias_gastos_rn_w:= 'N';
ie_classif_gastos_rn_w	:= 'S';

if (coalesce(ie_trat_conta_rn_ww::text, '') = '') then
	ie_trat_conta_rn_ww := ie_trat_conta_rn_w;
end if;

if (nr_dias_gastos_rn_w > 0) and (ie_trat_conta_rn_w = WHEB_MENSAGEM_PCK.get_texto(299391)) and
	((dt_procedimento_w - dt_entrada_w) > nr_dias_gastos_rn_w) then
	ie_dias_gastos_rn_w:= 'S';

end if;

/*if	(cd_classif_setor_rn_w > 0) and (ie_trat_conta_rn_w = 'Mae') then
	ie_classif_gastos_rn_w:= 'N';
	if	(cd_classif_setor_rn_w = cd_classif_setor_w) then
		ie_classif_gastos_rn_w:= 'S';

	end if;
end if;*/
if (coalesce(cd_clas_setor_rn_sus_w,'X') <> 'X') and (ie_trat_conta_rn_w = WHEB_MENSAGEM_PCK.get_texto(299391)) then
	ie_classif_gastos_rn_w:= 'N';
	if (obter_se_contido_char(cd_classif_setor_w,cd_clas_setor_rn_sus_w) = 'S') then
		ie_classif_gastos_rn_w:= 'S';

	end if;
end if;

if (coalesce(ie_regra_rn_item_w,'S') = 'S') then
	begin
	select	CASE WHEN ie_trat_conta_rn=WHEB_MENSAGEM_PCK.get_texto(299391) THEN  nr_atendimento_mae  ELSE nr_atendimento_w END ,
		CASE WHEN ie_trat_conta_rn=WHEB_MENSAGEM_PCK.get_texto(299391) THEN  null  ELSE nr_interno_conta_w END
	into STRICT	nr_atendimento_w,
		nr_interno_conta_w
	from	atendimento_paciente
	where	nr_atendimento		= nr_atendimento_w
	and 	ie_dias_gastos_rn_w	= 'N'	-- parametro de dias para deixar os gastos no atend do RN
	and 	ie_classif_gastos_rn_w	= 'S'	-- parametro da classificacao do setor do RN
	and	(ie_trat_conta_rn IS NOT NULL AND ie_trat_conta_rn::text <> '')
	and 	ie_status_acerto_w		= 1
	and (obter_se_gastos_rn(cd_convenio_orig_w, nr_atendimento_w, ie_trat_conta_rn, nr_seq_atepacu_w) = 'N') -- regra de setor para definicao dos gastos RN (OS  244366)
	and 	((ie_gastos_rn_alta_w = 'N') or
		((ie_gastos_rn_alta_w = 'S') and (ie_trat_conta_rn = WHEB_MENSAGEM_PCK.get_texto(299391)) and (obter_se_atendimento_alta(nr_atendimento_mae) = 'N')) or
		((ie_gastos_rn_alta_w = 'D') and (ie_trat_conta_rn = WHEB_MENSAGEM_PCK.get_texto(299391)) and (dt_procedimento_w < coalesce(to_date(obter_dados_atendimento(nr_atendimento_mae,'DA'),'dd/mm/yyyy hh24:mi:ss'),dt_procedimento_w + 5))))
        and     cd_estabelecimento      =  cd_estabelecimento_w;
	exception
		 when others then
		if (ie_gastos_rn_alta_w = 'D') and (coalesce(nr_interno_conta_w,0) > 0) and (obter_atendimento_conta(nr_interno_conta_w) <> nr_atendimento_w) then
			begin
			select	CASE WHEN ie_trat_conta_rn=WHEB_MENSAGEM_PCK.get_texto(299391) THEN  nr_atendimento_mae  ELSE obter_atendimento_conta(nr_interno_conta_w) END ,
				CASE WHEN ie_trat_conta_rn=WHEB_MENSAGEM_PCK.get_texto(299391) THEN  null  ELSE nr_interno_conta_w END
			into STRICT	nr_atendimento_w,
				nr_interno_conta_w
			from	atendimento_paciente
			where	nr_atendimento		= obter_atendimento_conta(nr_interno_conta_w)
			and 	ie_dias_gastos_rn_w	= 'N' -- parametro de dias para deixar os gastos no atend do RN
			and 	ie_classif_gastos_rn_w 	= 'S' -- parametro da classificacao do setor do RN
			and	(ie_trat_conta_rn IS NOT NULL AND ie_trat_conta_rn::text <> '')
			and 	ie_status_acerto_w 		= 1
			and (obter_se_gastos_rn(cd_convenio_orig_w, nr_atendimento_w, ie_trat_conta_rn, nr_seq_atepacu_w) = 'N') -- regra de setor para definicao dos gastos RN (OS  244366)
			and 	((ie_gastos_rn_alta_w = 'N') or
				((ie_gastos_rn_alta_w = 'S') and (ie_trat_conta_rn = WHEB_MENSAGEM_PCK.get_texto(299391)) and (obter_se_atendimento_alta(nr_atendimento_mae) = 'N')) or
				((ie_gastos_rn_alta_w = 'D') and (ie_trat_conta_rn = WHEB_MENSAGEM_PCK.get_texto(299391)) and (dt_procedimento_w < coalesce(to_date(obter_dados_atendimento(nr_atendimento_mae,'DA'),'dd/mm/yyyy hh24:mi:ss'),dt_procedimento_w + 5))))
                        and     cd_estabelecimento      =  cd_estabelecimento_w;
			exception
			when others then
				nr_atendimento_w	:= nr_atendimento_w;
				nr_interno_conta_w := nr_interno_conta_w;
			end;
		else
			nr_atendimento_w	:= nr_atendimento_w;
			nr_interno_conta_w	:= nr_interno_conta_w;
		end if;

	end;
else
	begin
	select	CASE WHEN ie_trat_conta_rn_ww=WHEB_MENSAGEM_PCK.get_texto(299391) THEN  nr_atendimento_mae  ELSE nr_atendimento_w END ,
		CASE WHEN ie_trat_conta_rn_ww=WHEB_MENSAGEM_PCK.get_texto(299391) THEN  null  ELSE null END
	into STRICT	nr_atendimento_w,
		nr_interno_conta_w
	from	atendimento_paciente
	where	nr_atendimento		= nr_atendimento_w
	and	(ie_trat_conta_rn IS NOT NULL AND ie_trat_conta_rn::text <> '')
	and 	ie_status_acerto_w	= 1
	and	CASE WHEN ie_trat_conta_rn=WHEB_MENSAGEM_PCK.get_texto(299391) THEN  obter_se_atendimento_fechado(nr_atendimento_mae)  ELSE 'N' END  = 'N'
	and 	((ie_gastos_rn_alta_w = 'N') or
		((ie_gastos_rn_alta_w = 'S') and (ie_trat_conta_rn = WHEB_MENSAGEM_PCK.get_texto(299391)) and (obter_se_atendimento_alta(nr_atendimento_mae) = 'N')) or
		((ie_gastos_rn_alta_w = 'D') and (ie_trat_conta_rn = WHEB_MENSAGEM_PCK.get_texto(299391)) and (dt_procedimento_w < coalesce(to_date(obter_dados_atendimento(nr_atendimento_mae,'DA'),'dd/mm/yyyy hh24:mi:ss'),dt_procedimento_w + 5))))
        and     cd_estabelecimento      =  cd_estabelecimento_w;
	exception
	when others then
			nr_atendimento_w	:= nr_atendimento_w;
			nr_interno_conta_w	:= nr_interno_conta_w;

	end;
end if;

if (ie_tipo_atendimento_w	= 1) then
	begin
	/* Obter o Numero da AIH */

	begin
	select	coalesce(max(nr_aih),0),
		coalesce(max(nr_sequencia),0),
		coalesce(max(cd_procedimento_real),0)
	into STRICT	nr_aih_w,
		nr_seq_aih_w,
		cd_procedimento_real_w
	from	sus_aih_unif
	where	nr_atendimento 	= nr_atendimento_w
	and	nr_interno_conta	= nr_interno_conta_w;
	exception
		when others then
        		nr_aih_w		:= 0;
			nr_seq_aih_w		:= 0;
	end;

	/* Buscar dados da AIH */

	begin
	select	coalesce(cd_carater_internacao, ie_carater_inter_sus_w)
	into STRICT	cd_carater_internacao_w
	from	sus_aih_unif
	where	nr_aih		= nr_aih_w
	and	nr_sequencia	= nr_seq_aih_w;
	exception
		when others then
		cd_carater_internacao_w	:= ie_carater_inter_sus_w;
	end;

	if (cd_procedimento_real_w <> cd_procedimento_w) then
		begin

		begin
		select	max(cd_registro)
		into STRICT	cd_registro_proc_w
		from	sus_procedimento_registro
		where	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w
		and	cd_registro in (3,4,5);
		exception
		when others then
			cd_registro_proc_w := null;
		end;

		end;
	else
		cd_registro_proc_w := 3;
	end if;

	end;
else
	/* Obter o Numero da APAC */

	begin
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_apac_w
	from	sus_apac_unif
	where	nr_atendimento 		= nr_atendimento_w
	and	nr_interno_conta	= nr_interno_conta_w;
	exception
		when others then
        		nr_seq_apac_w	:= 0;
	end;
end if;

if	(((coalesce(ds_carater_incremento_w,'X') = 'X') and (cd_carater_internacao_w not in ('02','05','06'))) or
	((coalesce(ds_carater_incremento_w,'X') <> 'X') and (obter_se_contido_char(cd_carater_internacao_w,ds_carater_incremento_w) = 'N'))) or (ie_tipo_atendimento_w <> 1) or (sus_validar_regra(41, cd_procedimento_w, ie_origem_proced_w) > 0)  or
	(ie_inc_proc_urg_aih_w		= 'N' AND ie_proc_aih_urgencia_w		= 'N') then
	pr_urg_emerg_w	:= 0;
end if;

/* Obter os valores do procedimento */

SELECT * FROM sus_define_preco_proced(
	dt_procedimento_w, cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_w, ie_tipo_atendimento_w, vl_sa_w, vl_sh_w, vl_sp_w, vl_sadt_w, vl_total_hospitalar_w, vl_total_amb_w, qt_pontos_ato_w, vl_honorario_medico_w, vl_matmed_w, vl_anestesista_w, dt_competencia_w) INTO STRICT vl_sa_w, vl_sh_w, vl_sp_w, vl_sadt_w, vl_total_hospitalar_w, vl_total_amb_w, qt_pontos_ato_w, vl_honorario_medico_w, vl_matmed_w, vl_anestesista_w, dt_competencia_w;

begin
select	coalesce(max(cd_setor_atendimento),0)
into STRICT	cd_setor_atend_prescr_w
from	prescr_medica
where	nr_prescricao = nr_prescricao_w;
exception
when others then
	cd_setor_atend_prescr_w := 0;
end;

/* Glosa a conta SUS em uma outra conta SUS porem de outra categoria */

SELECT * FROM glosa_procedimento(	cd_estabelecimento_w, nr_atendimento_w, dt_procedimento_w, cd_procedimento_w, ie_origem_proced_w, qt_procedimento_w, 0, ie_tipo_atendimento_w, cd_setor_atendimento_w, 0, nr_seq_proc_interno_w, null, null, ie_clinica_w, 0, cd_medico_executor_w, ie_sexo_w, cd_convenio_orig_w, cd_categ_orig_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ie_glosa_w, cd_situacao_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, cd_motivo_exc_conta_ww, ds_retorno_glosa_w, vl_negociado_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, nr_seq_ajuste_proc_ww, null, null, null, null, null, null, null, cd_setor_atend_prescr_w, null, null, null, nr_seq_origem_w, nr_seq_classif_medico_w) INTO STRICT cd_convenio_orig_w, cd_categ_orig_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ie_glosa_w, cd_situacao_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, cd_motivo_exc_conta_ww, ds_retorno_glosa_w, vl_negociado_w, ds_retorno_glosa_w, ds_retorno_glosa_w, ds_retorno_glosa_w, nr_seq_ajuste_proc_ww;

begin
select	max(coalesce(ie_inc_proc_conta,'N')),
        max(coalesce(pr_ivh,0)),
        max(coalesce(ie_alterar_sp_proc_rim,'N')),
        max(coalesce(ie_incremento_anestesista,'N')),
        max(coalesce(ie_incemento_seq_onco,'N')),
        max(coalesce(ie_zera_conta_saude_ment,'N')),
        max(coalesce(ie_regra_arred_increm,'N'))
into STRICT	ie_inc_proc_conta_w,
        pr_ivh_w,
        ie_alterar_sp_proc_rim_w,
        ie_incremento_anestesista_w,
        ie_incemento_seq_onco_w,
        ie_zera_conta_saude_ment_w,
        ie_regra_arred_increm_w
from 	sus_parametros_aih
where	cd_estabelecimento = cd_estabelecimento_w;
exception
when others then
        ie_inc_proc_conta_w 	:= 'N';
        pr_ivh_w			:= 0;
        ie_alterar_sp_proc_rim_w	:= 'N';
        ie_incremento_anestesista_w	:= 'N';
        ie_regra_arred_increm_w:= 'N';
end;

select	max(coalesce(ie_inc_proc_conta_data,'N'))
into STRICT	ie_inc_proc_conta_data_w
from 	sus_parametros_apac
where	cd_estabelecimento = cd_estabelecimento_w;

/* Identificar a conta paciente que o procedimento deve ser incluido */

if (ie_inc_proc_conta_w = 'S') and (ie_tipo_atendimento_w = 1) and (ie_status_acerto_w = 1) then
	begin
		begin
		select	max(nr_interno_conta)
		into STRICT	nr_interno_conta_w
		from	conta_paciente
		where	nr_atendimento = nr_atendimento_w
		and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final
		and	ie_status_acerto = 1
		and	coalesce(ie_cancelamento::text, '') = ''
		and	cd_convenio_parametro = cd_convenio_orig_w
                and     cd_estabelecimento      =  cd_estabelecimento_w;
		exception
			when others then
			nr_interno_conta_w := null;
			end;
	end;
elsif (ie_inc_proc_conta_data_w = 'S') and (sus_obter_se_proc_apac(nr_sequencia_p,cd_procedimento_w) = 'S') and (ie_status_acerto_w = 1) then
	begin
		begin
		select	max(nr_interno_conta)
		into STRICT	nr_interno_conta_w
		from	conta_paciente
		where	nr_atendimento = nr_atendimento_w
		and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final
		and	ie_status_acerto = 1
		and	coalesce(ie_cancelamento::text, '') = ''
		and	cd_convenio_parametro = cd_convenio_orig_w
                and     cd_estabelecimento      =  cd_estabelecimento_w;
		exception
			when others then
			nr_interno_conta_w := null;
			end;
	end;
end if;

if (ie_lac_proc_conta_apac_bpa_w = 'S') and (ie_tipo_atendimento_w <> 1) and (ie_status_acerto_w = 1) then
	begin
	
	cd_tiporeg_proc1_w := coalesce(sus_obter_tiporeg_proc(cd_procedimento_w, ie_origem_proced_w, 'C', 1),'X');
	cd_tiporeg_proc3_w := coalesce(sus_obter_tiporeg_proc(cd_procedimento_w, ie_origem_proced_w, 'C', 3),'X');
	
	if	((cd_tiporeg_proc1_w in ('1','2')) or (cd_tiporeg_proc3_w in ('6','7'))) then
		begin
		vartipoguiaregra_w := obter_param_usuario(67, 359, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, vartipoguiaregra_w);

		-------
		if 	((cd_tiporeg_proc1_w in ('1','2') and ie_gerar_conta_proc_w = 'N') And --BPA E
			(cd_tiporeg_proc3_w in ('6','7'))) then -- APAC
			begin
			select	min(a.nr_interno_conta) nr_interno_conta
			into STRICT	nr_interno_conta_w
			from	conta_paciente a
			where	a.ie_status_acerto = 1
			and	a.nr_atendimento = nr_atendimento_w
			and	coalesce(a.ie_cancelamento::text, '') = ''
			and	a.cd_convenio_parametro = cd_convenio_orig_w
			and	a.nr_interno_conta = nr_interno_conta_w
			and	exists ( SELECT	1
						from	procedimento_paciente y,
                                                        sus_valor_proc_paciente z
						where	y.nr_interno_conta = a.nr_interno_conta
                                                and	y.nr_sequencia = z.nr_sequencia
						and	coalesce(y.cd_motivo_exc_conta::text, '') = ''
						and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1)) in ('1','2') --BPA
						
union

						SELECT	1
						from	procedimento_paciente x,
                                                        sus_valor_proc_paciente z
						where	x.nr_sequencia = z.nr_sequencia
                                                and     coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 16)) in ('6','7') -- APAC
						and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
						and	x.nr_interno_conta  = a.nr_interno_conta)
                        and     a.cd_estabelecimento      =  cd_estabelecimento_w;
			exception
			when others then
				nr_interno_conta_w := null;
			end;

			if (coalesce(nr_interno_conta_w,0) = 0) then

				begin
				select	min(a.nr_interno_conta) nr_interno_conta
				into STRICT	nr_interno_conta_w
				from	conta_paciente a
				where	a.ie_status_acerto = 1
				and	a.nr_atendimento = nr_atendimento_w
				and	coalesce(a.ie_cancelamento::text, '') = ''
				and	a.cd_convenio_parametro = cd_convenio_orig_w
				and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final
				and	exists ( SELECT	1
						from	procedimento_paciente y,
                                                        sus_valor_proc_paciente z
						where	y.nr_interno_conta = a.nr_interno_conta
                                                and	y.nr_sequencia = z.nr_sequencia
						and	coalesce(y.cd_motivo_exc_conta::text, '') = ''
						and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1)) in ('1','2') --BPA
						
union

						SELECT	1
						from	procedimento_paciente x,
                                                        sus_valor_proc_paciente z
						where	x.nr_sequencia = z.nr_sequencia
                                                and     coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 16)) in ('6','7') -- APAC
						and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
						and	x.nr_interno_conta  = a.nr_interno_conta)
                                and     a.cd_estabelecimento      =  cd_estabelecimento_w;
				exception
				when others then
					nr_interno_conta_w := null;
				end;

			end if;

		elsif (cd_tiporeg_proc1_w in ('1','2') and ie_gerar_conta_proc_w = 'N') then --BPA
			begin

			begin
			select	min(a.nr_interno_conta) nr_interno_conta
			into STRICT	nr_interno_conta_w
			from	conta_paciente a
			where	a.ie_status_acerto = 1
			and	a.nr_atendimento = nr_atendimento_w
			and	coalesce(a.ie_cancelamento::text, '') = ''
			and	a.cd_convenio_parametro = cd_convenio_orig_w
			and	a.nr_interno_conta = nr_interno_conta_w
			and	exists (	SELECT	1
						from	procedimento_paciente y,
                                                        sus_valor_proc_paciente z
						where	y.nr_interno_conta = a.nr_interno_conta
                                                and     y.nr_sequencia = z.nr_sequencia
						and	coalesce(y.cd_motivo_exc_conta::text, '') = ''
						and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1)) in ('1','2') --BPA
						and	not exists (	select	1
									from	procedimento_paciente x,
                                                                                sus_valor_proc_paciente z
									where	x.nr_sequencia = z.nr_sequencia
                                                                        and     coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 16)) in ('6','7') --Somente APAC
									and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
									and	x.nr_interno_conta  = a.nr_interno_conta))
                        and     a.cd_estabelecimento      =  cd_estabelecimento_w;
			exception
			when others then
				nr_interno_conta_w := null;
			end;

			if (coalesce(nr_interno_conta_w,0) = 0) then
				begin

				begin
				select	min(a.nr_interno_conta) nr_interno_conta
				into STRICT	nr_interno_conta_w
				from	conta_paciente a
				where	a.ie_status_acerto = 1
				and	a.nr_atendimento = nr_atendimento_w
				and	coalesce(a.ie_cancelamento::text, '') = ''
				and	a.cd_convenio_parametro = cd_convenio_orig_w
				and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final
				and	exists (	SELECT	1
							from	procedimento_paciente y,
                                                                sus_valor_proc_paciente z
							where	y.nr_interno_conta = a.nr_interno_conta
                                                        and     y.nr_sequencia = z.nr_sequencia
							and	coalesce(y.cd_motivo_exc_conta::text, '') = ''
							and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1)) in ('1','2') --BPA
							and	not exists (	select	1
										from	procedimento_paciente x,
                                                                                        sus_valor_proc_paciente z
										where	x.nr_sequencia = z.nr_sequencia
                                                                                and     coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 16)) in ('6','7') --Somente APAC
										and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
										and	x.nr_interno_conta  = a.nr_interno_conta))
                                and     a.cd_estabelecimento      =  cd_estabelecimento_w;
				exception
				when others then
					nr_interno_conta_w := null;
				end;

				end;
			end if;

			end;
		elsif (cd_tiporeg_proc3_w in ('6','7')) then --APAC
			begin

			begin
			select	min(a.nr_interno_conta) nr_interno_conta
			into STRICT	nr_interno_conta_ww
			from	conta_paciente a
			where	a.ie_status_acerto = 1
			and	a.nr_atendimento = nr_atendimento_w
			and	coalesce(a.ie_cancelamento::text, '') = ''
			and	a.cd_convenio_parametro = cd_convenio_orig_w
			and	a.nr_interno_conta = nr_interno_conta_w
			and	exists (	SELECT	1
						from	procedimento_paciente x,
                                                        sus_valor_proc_paciente z
						where	x.nr_sequencia = z.nr_sequencia
                                                and     coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 16)) in ('6','7') --Somente APAC
						and	x.nr_interno_conta  = a.nr_interno_conta
						and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
						and	not exists (	select	1
									from	procedimento_paciente y,
                                                                                sus_valor_proc_paciente z
									where	y.nr_interno_conta = a.nr_interno_conta
									and	coalesce(y.cd_motivo_exc_conta::text, '') = ''
                                                                        and     y.nr_sequencia = z.nr_sequencia
									and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1)) in ('1','2'))); --BPA
			exception
			when others then
				nr_interno_conta_ww := null;
			end;

			if (coalesce(nr_interno_conta_ww,0) = 0) then
				begin

				begin
				select	min(a.nr_interno_conta) nr_interno_conta
				into STRICT	nr_interno_conta_ww
				from	conta_paciente a
				where	a.ie_status_acerto = 1
				and	a.nr_atendimento = nr_atendimento_w
				and	coalesce(a.ie_cancelamento::text, '') = ''
				and	a.cd_convenio_parametro = cd_convenio_orig_w
				and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final
				and	exists (	SELECT	1
							from	procedimento_paciente x,
                                                                sus_valor_proc_paciente z
							where	x.nr_sequencia = z.nr_sequencia
                                                        and     coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 16)) in ('6','7') --Somente APAC
							and	x.nr_interno_conta  = a.nr_interno_conta
							and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
							and	not exists (	select	1
										from	procedimento_paciente y,
                                                                                        sus_valor_proc_paciente z
										where	y.nr_interno_conta = a.nr_interno_conta
										and	coalesce(y.cd_motivo_exc_conta::text, '') = ''
                                                                                and     y.nr_sequencia = z.nr_sequencia
										and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1)) in ('1','2'))); --BPA
				exception
				when others then
					nr_interno_conta_ww := null;
				end;

				if (coalesce(nr_interno_conta_ww,0) = 0) then
					begin

					begin
					select	min(a.nr_interno_conta) nr_interno_conta
					into STRICT	nr_interno_conta_ww
					from	conta_paciente a
					where	a.ie_status_acerto = 1
					and	a.nr_atendimento = nr_atendimento_w
					and	coalesce(a.ie_cancelamento::text, '') = ''
					and	a.cd_convenio_parametro = cd_convenio_orig_w
					and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final
					and	exists (	SELECT	1
								from	procedimento_paciente x,
                                                                        sus_valor_proc_paciente z
								where	x.nr_sequencia = z.nr_sequencia
                                                                and     coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 3)) in ('6','7') --Somente APAC
								and	x.nr_interno_conta  = a.nr_interno_conta
								and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
								and	not exists (	select	1
											from	procedimento_paciente y,
                                                                                                sus_valor_proc_paciente z
											where	y.nr_interno_conta = a.nr_interno_conta
											and	coalesce(y.cd_motivo_exc_conta::text, '') = ''
                                                                                        and     y.nr_sequencia = z.nr_sequencia
											and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1)) in ('1','2'))); --BPA
					exception
					when others then
						nr_interno_conta_ww  := null;
					end;
					
					if (coalesce(nr_interno_conta_ww,0) = 0) then
						begin
						
						begin
						select	min(a.nr_interno_conta) nr_interno_conta
						into STRICT	nr_interno_conta_ww
						from	conta_paciente a
						where	a.ie_status_acerto = 1
						and	a.nr_atendimento = nr_atendimento_w
						and	coalesce(a.ie_cancelamento::text, '') = ''
						and	a.cd_convenio_parametro = cd_convenio_orig_w
						and	a.nr_interno_conta = nr_interno_conta_w
						and	exists (	SELECT	1
									from	procedimento_paciente x										
									where	x.nr_interno_conta  = a.nr_interno_conta
									and     sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 16) in ('6','7') --Somente APAC
									and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
									and	not exists (	select	1
												from	procedimento_paciente y
												where	y.nr_interno_conta = a.nr_interno_conta
												and	coalesce(y.cd_motivo_exc_conta::text, '') = ''												
												and	sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1) in ('1','2'))); --BPA
						exception
						when others then
							nr_interno_conta_ww := null;
						end;
						
						if (coalesce(nr_interno_conta_ww,0) = 0) then
							begin
							
							begin
							select	min(a.nr_interno_conta) nr_interno_conta
							into STRICT	nr_interno_conta_ww
							from	conta_paciente a
							where	a.ie_status_acerto = 1
							and	a.nr_atendimento = nr_atendimento_w
							and	coalesce(a.ie_cancelamento::text, '') = ''
							and	a.cd_convenio_parametro = cd_convenio_orig_w
							and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final
							and	exists (	SELECT	1
										from	procedimento_paciente x
										where	sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 16) in ('6','7') --Somente APAC
										and	x.nr_interno_conta  = a.nr_interno_conta
										and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
										and	not exists (	select	1
													from	procedimento_paciente y
													where	y.nr_interno_conta = a.nr_interno_conta
													and	coalesce(y.cd_motivo_exc_conta::text, '') = ''													
													and	sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1) in ('1','2'))); --BPA
							exception
							when others then
								nr_interno_conta_ww := null;
							end;
							
							if (coalesce(nr_interno_conta_ww,0) = 0) then
								begin
								
								begin
								select	min(a.nr_interno_conta) nr_interno_conta
								into STRICT	nr_interno_conta_ww
								from	conta_paciente a
								where	a.ie_status_acerto = 1
								and	a.nr_atendimento = nr_atendimento_w
								and	coalesce(a.ie_cancelamento::text, '') = ''
								and	a.cd_convenio_parametro = cd_convenio_orig_w
								and	dt_procedimento_w between dt_periodo_inicial and dt_periodo_final
								and	exists (	SELECT	1
											from	procedimento_paciente x
											where	sus_obter_tiporeg_proc(x.cd_procedimento, 7, 'C', 3) in ('6','7') --Somente APAC
											and	x.nr_interno_conta  = a.nr_interno_conta
											and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
											and	not exists (	select	1
														from	procedimento_paciente y
														where	y.nr_interno_conta = a.nr_interno_conta
														and	coalesce(y.cd_motivo_exc_conta::text, '') = ''
														and	sus_obter_tiporeg_proc(y.cd_procedimento, 7, 'C', 1) in ('1','2'))); --BPA
								exception
								when others then
									nr_interno_conta_ww  := null;
								end;
								
								end;
							end if;
							
							end;
						end if;
						end;
					end if;

					end;
				end if;
				
				end;
			end if;
			
			end;
		end if;		

		if (coalesce(nr_interno_conta_w,0) = 0) and (ie_gerar_conta_proc_w = 'N') then
			begin

			begin
			select	count(*),
				min(a.nr_interno_conta)
			into STRICT	qt_conta_vazia_w,
				nr_conta_vazia_w
			from	conta_paciente a
			where	a.ie_status_acerto = 1
			and	a.nr_atendimento = nr_atendimento_w
			and	coalesce(a.ie_cancelamento::text, '') = ''
			and	a.cd_convenio_parametro = cd_convenio_orig_w
			and	not exists (	SELECT	1
						from	procedimento_paciente x
						where	x.nr_interno_conta = a.nr_interno_conta
						and	coalesce(x.cd_motivo_exc_conta::text, '') = '')
                        and     a.cd_estabelecimento = cd_estabelecimento_w;

			if (qt_conta_vazia_w > 0) then
				nr_interno_conta_w	:= nr_conta_vazia_w;
			end if;

			exception
			when others then
				nr_interno_conta_w := null;
			end;

			end;
		end if;

		if (coalesce(nr_interno_conta_w::text, '') = '') and (ie_gerar_conta_proc_w = 'N') then
			criar_conta;		
		end if;
		end;
	end if;
    end;
end if;

if (ie_gerar_conta_proc_w = 'S') and (ie_tipo_atendimento_w <> 1) and (ie_status_acerto_w = 1) then
	begin	
	if (coalesce(cd_tiporeg_proc1_w,sus_obter_tiporeg_proc(cd_procedimento_w, ie_origem_proced_w, 'C', 1),'X') in ('1','2')) then
		begin
		select	count(1)
		into STRICT	qt_conta_vazia_w
		from	procedimento_paciente x
		where	x.nr_interno_conta = nr_interno_conta_w
		and	x.cd_procedimento <> cd_procedimento_w
		and	coalesce(x.cd_motivo_exc_conta::text, '') = '';
		
		if	((qt_conta_vazia_w > 0) or (coalesce(nr_interno_conta_w::text, '') = '')) then
			criar_conta;
		end if;
		end;
	end if;
    end;
end if;

if (coalesce(nr_interno_conta_w::text, '') = '') or
	(cd_situacao_glosa_w = 13 AND cd_categ_orig_w <> cd_categoria_orig_w) then
	ie_identifica_conta_proc_w := 'S';
else
	ie_identifica_conta_proc_w := 'N';
end if;

if (ie_identifica_conta_proc_w = 'S')	 then
	begin
	SELECT * FROM obter_conta_paciente(
		cd_estabelecimento_w, nr_atendimento_w, cd_convenio_orig_w, cd_categ_orig_w, nm_usuario_p, dt_procedimento_w, dt_entrada_w, dt_alta_w, nr_doc_convenio_w, cd_setor_atendimento_w, null, dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w) INTO STRICT dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w;

	end;
end if;

qt_pontos_ato_w		:= (qt_pontos_ato_w	* qt_procedimento_w);
vl_sh_w			:= (vl_sh_w		* qt_procedimento_w);
vl_sp_w			:= (vl_sp_w		* qt_procedimento_w);
vl_sadt_w		:= (vl_sadt_w		* qt_procedimento_w);
vl_total_hospitalar_w	:= (vl_total_hospitalar_w	* qt_procedimento_w);
vl_total_amb_w		:= (vl_total_amb_w		* qt_procedimento_w);
vl_honorario_medico_w	:= (vl_honorario_medico_w	* qt_procedimento_w);
vl_matmed_w		:= (vl_matmed_w		* qt_procedimento_w);
vl_anestesista_w		:= (vl_anestesista_w	* qt_procedimento_w);

if (ie_tipo_atendimento_w	= 1) then
	vl_procedimento_w	:= vl_sh_w + vl_sp_w + vl_sadt_w;
	vl_anestesista_w	:= 0;
else
	vl_sadt_w		:= (vl_total_amb_w - (vl_honorario_medico_w + vl_matmed_w + vl_anestesista_w));
	if (vl_sadt_w < 0) then
		vl_sadt_w	:= 0;
	end if;
	vl_sp_w			:= vl_honorario_medico_w;
	vl_sh_w			:= vl_matmed_w;
	vl_procedimento_w	:= vl_total_amb_w;
end if;

vl_proc_original_w	:= vl_procedimento_w;

if (ie_regra_arred_increm_w = 'S') then

        select	max(ie_arredondamento)
        into STRICT	ie_tipo_rounded_w
        from	convenio_estabelecimento
        where	cd_convenio	  	= cd_convenio_orig_w
        and	cd_estabelecimento	= cd_estabelecimento_w;

	if (ie_tipo_rounded_w = 'R') then

                ie_tipo_rounded_w       :=      obter_regra_arredondamento(cd_convenio_orig_w, cd_categoria_calculo_w, cd_procedimento_w, ie_origem_proced_w,
                                                cd_estabelecimento_w, dt_procedimento_w, 'P', 1);

        end if;
end if;


/* Obter o incremento do procedimento */

SELECT * FROM sus_obter_incremento_proc(cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_w, nr_interno_conta_w, dt_procedimento_w, pr_incremento_sa_w, pr_incremento_sh_w, pr_incremento_sp_w, pr_incremento_sadt_w) INTO STRICT pr_incremento_sa_w, pr_incremento_sh_w, pr_incremento_sp_w, pr_incremento_sadt_w;

/* Calcular adicional de incremento para os procedimento habilitados */

if (pr_incremento_sh_w > 0) and (ie_origem_proced_w = 7) then
        if (coalesce(ie_tipo_rounded_w,'X')<>'X') then
                vl_sh_rounded_w		:= vl_sh_w * (1 + (pr_incremento_sh_w/100));
                vl_sh_rounded_w := arredondamento(vl_sh_rounded_w, 2, ie_tipo_rounded_w);
                vl_sh_w := vl_sh_rounded_w;
        else
                vl_sh_w		:= trunc(vl_sh_w * (1 + (pr_incremento_sh_w/100)),2);
        end if;
end if;

if (pr_incremento_sp_w > 0) and (ie_origem_proced_w = 7) then
        if (coalesce(ie_tipo_rounded_w,'X')<>'X') then
                vl_sp_rounded_w		:= vl_sp_w * (1 + (pr_incremento_sp_w/100));
                vl_sp_rateio_w	:= (vl_sp_w * (1 + (pr_incremento_sp_w/100)));
                vl_sp_rounded_w := arredondamento(vl_sp_rounded_w, 2, ie_tipo_rounded_w);
                vl_sp_rateio_w := arredondamento(vl_sp_rateio_w, 2, ie_tipo_rounded_w);
                vl_sp_w := vl_sp_rounded_w;
        else
                vl_sp_rateio_w	:= (vl_sp_w * (1 + (pr_incremento_sp_w/100)));
                vl_sp_w		:= trunc(vl_sp_w * (1 + (pr_incremento_sp_w/100)),2);
        end if;
end if;

if (pr_incremento_sa_w > 0) and (ie_origem_proced_w = 7) and (ie_tipo_atendimento_w	<> 1) then
        if (coalesce(ie_tipo_rounded_w,'X')<>'X') then
                vl_sadt_rounded_w		:= vl_sadt_w * (1 + (pr_incremento_sa_w/100));
                vl_sadt_rounded_w := arredondamento(vl_sadt_rounded_w, 2, ie_tipo_rounded_w);
                vl_sadt_w   := vl_sadt_rounded_w;
        else
                vl_sadt_w	:= (vl_sadt_w * (1 + (pr_incremento_sa_w/100)));
        end if;
end if;

if (coalesce(cd_procedimento_w,0) = 802010210 and
        coalesce(cd_procedimento_real_w,0) <> 415020034) then
        begin

	/* Obter o incremento do procedimento */

	SELECT * FROM sus_obter_incremento_proc(cd_procedimento_real_w, ie_origem_proced_w, cd_estabelecimento_w, nr_interno_conta_w, dt_procedimento_w, pr_incremento_sa_w, pr_incremento_sh_w, pr_incremento_sp_w, pr_incremento_sadt_w) INTO STRICT pr_incremento_sa_w, pr_incremento_sh_w, pr_incremento_sp_w, pr_incremento_sadt_w;

	/* Calcular adicional de incremento para os procedimento habilitados */

        if (pr_incremento_sh_w > 0) and (ie_origem_proced_w = 7) then
                if (coalesce(ie_tipo_rounded_w,'X')<>'X') then
                        vl_sh_rounded_w		:= vl_sh_w * (1 + (pr_incremento_sh_w/100));
                        vl_sh_rounded_w := arredondamento(vl_sh_rounded_w, 2, ie_tipo_rounded_w);
                        vl_sh_w := vl_sh_rounded_w;
                else
                        vl_sh_w		:= trunc(vl_sh_w * (1 + (pr_incremento_sh_w/100)),2);
                end if;
        end if;

        if (pr_incremento_sp_w > 0) and (ie_origem_proced_w = 7) then
                if (coalesce(ie_tipo_rounded_w,'X')<>'X') then
                        vl_sp_rounded_w		:= vl_sp_w * (1 + (pr_incremento_sp_w/100));
                        vl_sp_rateio_w	:= (vl_sp_w * (1 + (pr_incremento_sp_w/100)));
                        vl_sp_rounded_w := arredondamento(vl_sp_rounded_w, 2, ie_tipo_rounded_w);
                        vl_sp_rateio_w := arredondamento(vl_sp_rateio_w, 2, ie_tipo_rounded_w);
                        vl_sp_w := vl_sp_rounded_w;
                else
                        vl_sp_rateio_w	:= (vl_sp_w * (1 + (pr_incremento_sp_w/100)));
                        vl_sp_w		:= trunc(vl_sp_w * (1 + (pr_incremento_sp_w/100)),2);
                end if;
        end if;

        if (pr_incremento_sa_w > 0) and (ie_origem_proced_w = 7) and (ie_tipo_atendimento_w	<> 1) then
                if (coalesce(ie_tipo_rounded_w,'X')<>'X') then
                        vl_sadt_rounded_w		:= vl_sadt_w * (1 + (pr_incremento_sa_w/100));
                        vl_sadt_rounded_w := arredondamento(vl_sadt_rounded_w, 2, ie_tipo_rounded_w);
                        vl_sadt_w   := vl_sadt_rounded_w;
                else
                        vl_sadt_w	:= (vl_sadt_w * (1 + (pr_incremento_sa_w/100)));
                end if;
        end if;

	end;
end if;

/* Calcular adicional de urgencia e emergencia para AIH */

if (pr_urg_emerg_w > 0) and (ie_origem_proced_w = 7) then

	if (coalesce(ie_incremento_anestesista_w,'N') = 'S') then
		vl_sp_rateio_w		:= trunc(vl_sp_w * (1 + (pr_urg_emerg_w/100)),2);
	else
		vl_sp_rateio_w		:= (vl_sp_w * (1 + (pr_incremento_sp_w/100)));
	end if;

	vl_sh_w			:= trunc(vl_sh_w		* (1 + (pr_urg_emerg_w/100)),2);
	vl_sp_w			:= trunc(vl_sp_w	 	* (1 + (pr_urg_emerg_w/100)),2);
	vl_sadt_w		:= (vl_sadt_w 		* (1 + (pr_urg_emerg_w/100)));
	vl_total_hospitalar_w	:= (vl_total_hospitalar_w	* (1 + (pr_urg_emerg_w/100)));
	vl_total_amb_w		:= (vl_total_amb_w		* (1 + (pr_urg_emerg_w/100)));
	vl_procedimento_w		:= (vl_procedimento_w	* (1 + (pr_urg_emerg_w/100)));
end if;
/*IVH nao deve ser considerado para: OPME's ,procedimentos de hemoterapia, quando tiver percentual de urgencia ou quando nao for internacao.*/

if (pr_urg_emerg_w > 0)							or (ie_tipo_atendimento_w <> 1)							or (sus_obter_estrut_proc(cd_procedimento_w,ie_origem_proced_w,'C','G') = '7')		or (sus_obter_estrut_proc(cd_procedimento_w,ie_origem_proced_w,'C','S') in ('212','306'))	then
	pr_ivh_w	:= 0;
end if;

if (pr_ivh_w > 0) and (ie_origem_proced_w = 7) then

	if (coalesce(ie_incremento_anestesista_w,'N') = 'S') then
		vl_sp_rateio_w		:= trunc(vl_sp_w * (1 + (pr_ivh_w/100)),2);
	end if;

	vl_sh_w			:= trunc(vl_sh_w		* (1 + (pr_ivh_w/100)),2);
	vl_sp_w			:= trunc(vl_sp_w	 	* (1 + (pr_ivh_w/100)),2);
	vl_sadt_w		:= (vl_sadt_w 		* (1 + (pr_ivh_w/100)));
	vl_total_hospitalar_w	:= (vl_total_hospitalar_w	* (1 + (pr_ivh_w/100)));
	vl_total_amb_w		:= (vl_total_amb_w		* (1 + (pr_ivh_w/100)));
	vl_procedimento_w		:= (vl_procedimento_w	* (1 + (pr_ivh_w/100)));
end if;

if (coalesce(ie_incemento_seq_onco_w,'N') = 'S') and (sus_obter_proced_aih_unif(nr_interno_conta_w,2,'C') = 415020050) then
	begin

	select	count(*)
	into STRICT	qt_hab_inc_onc_w
	from	sus_habilitacao_hospital
	where	cd_estabelecimento = cd_estabelecimento_w
	and	cd_habilitacao in (1717,1718)
	and	dt_procedimento_w between coalesce(dt_inicio_vigencia,dt_procedimento_w) and coalesce(dt_final_vigencia,dt_procedimento_w);

	if (qt_hab_inc_onc_w > 0) and (sus_obter_tiporeg_proc(cd_procedimento_w,ie_origem_proced_w,'C',13) = '3')	then
		begin
		vl_sh_w			:= trunc(vl_sh_w * 1.2,2);
		vl_sp_w			:= trunc(vl_sp_w * 1.2,2);
		vl_total_hospitalar_w	:= (vl_total_hospitalar_w * 1.2);
		vl_procedimento_w	:= vl_sh_w + vl_sp_w + vl_sadt_w;
		end;
	end if;

	end;
end if;

if (tx_procedimento_w <> 100) and (ie_tipo_atendimento_w = 1) and (ie_origem_proced_w = 7) then
	vl_sh_w	:= ((tx_procedimento_w * vl_sh_w)/100);
	/* Felipe Martini em 30/09/2008 OS108199

	1 - Os componentes Servicos Profissionais (S.P) e Servicos Auxiliares de Diagnostico e
	Terapia (SADT) recebem remuneracao de 100% de valores em todos os Procedimentos
	Medicos lancados no Campo Procedimentos Especiais.

	vl_sp_w	:= ((tx_procedimento_w * vl_sp_w)/100);
	*/
end if;

begin
select	cd_convenio_parametro,
	cd_categoria_parametro
into STRICT	cd_convenio_parametro_w,
	cd_categoria_parametro_w
from	conta_paciente
where	nr_interno_conta	= nr_interno_conta_w;
exception
	when others then
		cd_convenio_parametro_w		:= null;
		cd_categoria_parametro_w	:= null;
end;

if (vl_negociado_w > 0) and (cd_convenio_parametro_w <> cd_convenio_sus_w) and (coalesce(cd_convenio_sus_w,0) <> 0)	then
	begin

	vl_procedimento_w 	:= vl_negociado_w * qt_procedimento_w;
	vl_total_amb_w		:= vl_negociado_w;
	vl_soma_proc_w		:= (vl_sadt_w + vl_anestesista_w + vl_sp_w + vl_sh_w);

	if (vl_soma_proc_w = 0) then
		pr_ajuste_w		:= 1;
	else
		pr_ajuste_w		:= vl_negociado_w / vl_soma_proc_w;
	end if;

	vl_anestesista_w := vl_anestesista_w * pr_ajuste_w;
	vl_sp_w 	:= vl_sp_w * pr_ajuste_w;
	vl_sh_w 	:= vl_sh_w * pr_ajuste_w;

	if (vl_sadt_w <> 0) then
		vl_sadt_w := vl_negociado_w - vl_sp_w - vl_sh_w - vl_anestesista_w;
	end if;

	vl_soma_proc_w		:= (vl_sadt_w + vl_anestesista_w + vl_sp_w + vl_sh_w);

	vl_saldo_w	:= vl_procedimento_w - vl_soma_proc_w;

	if (vl_saldo_w <> 0) then
		if (vl_sadt_w 	> 0) then
			vl_sadt_w 	:= vl_sadt_w  + vl_saldo_w;
		elsif (vl_sh_w	> 0) then
			vl_sh_w		:= vl_sh_w + vl_saldo_w;
		elsif (vl_sp_w	> 0) then
			vl_sp_w		:= vl_sp_w + vl_saldo_w;
		end if;
	end if;

	end;
end if;

--OS 260342
if	(ie_origem_proced_w = 7 AND ie_tipo_atendimento_w <> 1) then
	select	count(*)
	into STRICT	qt_reg_proc_w
	from	sus_bpa_proc_compativel	b,
			procedimento_paciente	a
	where	b.cd_proc_faturado	= cd_procedimento_w
	and	b.ie_origem_faturado	= 7
	and	a.cd_procedimento	= b.cd_proc_compativel
	and	a.ie_origem_proced	= b.ie_origem_compativel
	and	a.nr_interno_conta	= nr_interno_conta_w
	and	a.nr_atendimento	= nr_atendimento_w;

	if (qt_reg_proc_w	> 0) then
		vl_procedimento_w	:= 0;
		vl_sadt_w			:= 0;
		vl_anestesista_w	:= 0;
		vl_sp_w				:= 0;
		vl_auxiliares_w		:= 0;
		vl_sh_w				:= 0;
	end if;
end if;

if (ie_glosa_w = 'L') and (cd_convenio_orig_w <> cd_convenio_sus_w) then
	begin

	begin
	select	tx_ajuste
	into STRICT	tx_ajuste_w
	from	regra_ajuste_proc
	where	nr_sequencia = nr_seq_ajuste_proc_ww;
	exception
	when others then
		tx_ajuste_w := 1;
	end;

	vl_sh_w 		:= vl_sh_w 		* coalesce(tx_ajuste_w,1);
	vl_sadt_w 		:= vl_sadt_w 		* coalesce(tx_ajuste_w,1);
	vl_sp_w			:= vl_sp_w 		* coalesce(tx_ajuste_w,1);
	vl_total_amb_w		:= vl_total_amb_w	* coalesce(tx_ajuste_w,1);
	vl_sp_rateio_w		:= vl_sp_rateio_w	* coalesce(tx_ajuste_w,1);
	vl_procedimento_w 	:= vl_procedimento_w 	* coalesce(tx_ajuste_w,1);
	nr_seq_ajuste_proc_w	:= nr_seq_ajuste_proc_ww;

	end;
end if;

select	count(*)
into STRICT	qt_regra_cir_elet_w
from	sus_regra_cirurgia_eletiva
where	ie_situacao = 'A'  LIMIT 1;

if (qt_regra_cir_elet_w > 0) then
	SELECT * FROM sus_obter_regra_cirur_eletiva(nr_interno_conta_w, cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w, ie_tipo_atendimento_w, vl_sh_regra_w, vl_sp_regra_w, pr_acrescimo_regra_w, ie_ajusta_tipo_fin_w) INTO STRICT vl_sh_regra_w, vl_sp_regra_w, pr_acrescimo_regra_w, ie_ajusta_tipo_fin_w;

	if (pr_acrescimo_regra_w > 0) then
		begin
		vl_sh_w			:= trunc(vl_sh_w * (1 + (pr_acrescimo_regra_w/100)),2);
		vl_sp_w			:= trunc(vl_sp_w * (1 + (pr_acrescimo_regra_w/100)),2);
		vl_sp_rateio_w		:= trunc(vl_sp_rateio_w * (1 + (pr_acrescimo_regra_w/100)),2);
		vl_total_hospitalar_w	:= trunc(vl_total_hospitalar_w * (1 + (pr_acrescimo_regra_w/100)),2);
		vl_total_amb_w		:= trunc(vl_total_amb_w	* (1 + (pr_acrescimo_regra_w/100)),2);
		vl_procedimento_w	:= vl_sh_w + vl_sp_w + vl_sadt_w;
		end;
	elsif	((vl_sh_regra_w > 0) or (vl_sp_regra_w > 0)) then
		begin		
		vl_sh_w			:= (vl_sh_regra_w * qt_procedimento_w);
		vl_sp_w			:= (vl_sp_regra_w * qt_procedimento_w);
		vl_sp_rateio_w		:= (vl_sp_regra_w * qt_procedimento_w);

		vl_total_hospitalar_w	:= vl_sh_w + vl_sp_w + vl_sadt_w;
		vl_total_amb_w		:= vl_sh_w + vl_sp_w + vl_sadt_w;
		vl_procedimento_w	:= vl_sh_w + vl_sp_w + vl_sadt_w;
		end;
	end if;

	if (ie_ajusta_tipo_fin_w = 'S')then
		begin
			update	sus_aih_unif
			set	ie_tipo_financiamento = '04',
				dt_atualizacao = clock_timestamp(),
				nm_usuario = nm_usuario_p
			where	nr_atendimento 	= nr_atendimento_w
			and	nr_interno_conta = nr_interno_conta_w;
		end;
	end if;
end if;

/*Alterado de CD_PROC_REFERENCIA para CD_PROCEDIMENTO_REF, por que o anterior nao esta visivel na pasta para o convenio SUS
Geliard 02/01/2011 OS 390545*/
select 	coalesce(max(cd_procedimento_ref),0),
	coalesce(max(ie_origem_proc_ref),7)
into STRICT	cd_proc_referencia_w,
	ie_origem_proc_refer_w
from 	regra_ajuste_proc
where 	nr_sequencia = nr_seq_ajuste_proc_ww;

select	count(*)
into STRICT	qt_reg_ajuste_item_ref_w
from	regra_ajuste_item_ref
where	nr_seq_regra_ajuste_proc = nr_seq_ajuste_proc_ww;

if (cd_proc_referencia_w > 0) or (qt_reg_ajuste_item_ref_w > 0) then
	begin

	if (cd_proc_referencia_w > 0) then

		if (ie_glosa_w = '5') then -- Mesmo dia
			select 	count(*)
			into STRICT	qt_proc_ref_w
			from 	procedimento_paciente
			where 	cd_procedimento = cd_proc_referencia_w
			and 	ie_origem_proced = ie_origem_proc_refer_w
			and 	nr_interno_conta = nr_interno_conta_w
			and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento_w)
			and	nr_sequencia <> nr_sequencia_p
			and 	coalesce(cd_motivo_exc_conta::text, '') = '';
		else
			select 	count(*)
			into STRICT	qt_proc_ref_w
			from 	procedimento_paciente
			where 	cd_procedimento = cd_proc_referencia_w
			and 	ie_origem_proced = ie_origem_proc_refer_w
			and 	nr_interno_conta = nr_interno_conta_w
			and	nr_sequencia <> nr_sequencia_p
			and 	coalesce(cd_motivo_exc_conta::text, '') = '';
		end if;

	else

		qt_proc_ref_w	:= 0;

		open C02;
		loop
		fetch C02 into
			cd_mat_item_ref_w,
			cd_proc_item_ref_w,
			ie_origem_proc_item_ref_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			if (qt_proc_ref_w = 0) then

				if (ie_glosa_w = '5') then -- Mesmo dia
					if (coalesce(cd_mat_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	material_atend_paciente
						where 	cd_material = cd_mat_item_ref_w
						and 	nr_interno_conta = nr_interno_conta_w
						and 	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atendimento) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento_w)
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					elsif (coalesce(cd_proc_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	procedimento_paciente
						where 	cd_procedimento = cd_proc_item_ref_w
						and 	ie_origem_proced = ie_origem_proc_item_ref_w
						and 	nr_interno_conta = nr_interno_conta_w
						and	  ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento_w)
						and	  nr_sequencia <> nr_sequencia_p
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					end if;
				else
					if (coalesce(cd_mat_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	material_atend_paciente
						where 	cd_material = cd_mat_item_ref_w
						and 	nr_interno_conta = nr_interno_conta_w
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					elsif (coalesce(cd_proc_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	procedimento_paciente
						where 	cd_procedimento = cd_proc_item_ref_w
						and 	ie_origem_proced = ie_origem_proc_item_ref_w
						and 	nr_interno_conta = nr_interno_conta_w
						and	nr_sequencia <> nr_sequencia_p
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					end if;
				end if;

			end if;

			end;
		end loop;
		close C02;

	end if;

	if (ie_glosa_w = 'N') then
		begin

		if (qt_proc_ref_w > 0) then
			nr_seq_conta_origem_w		:= nr_interno_conta_w;
			nr_interno_conta_w		:= null;
			cd_motivo_exc_conta_w		:= cd_motivo_exc_conta_par_w;
		end if;

		end;
	elsif (ie_glosa_w = '5') then
		begin

		if (qt_proc_ref_w > 0) then
			nr_seq_conta_origem_w		:= nr_interno_conta_w;
			nr_interno_conta_w		:= null;
			cd_motivo_exc_conta_w		:= cd_motivo_exc_conta_par_w;
		end if;

		end;
	end if;

	end;
end if;

if (coalesce(cd_medico_executor_w,'X') = 'X') then
	cd_medico_executor_w := cd_profissional_w;
end if;

cd_cns_medico_exec_w := substr(sus_obter_regra_exp_exec(cd_procedimento_w,
					ie_origem_proced_w,
					cd_medico_executor_w,
					cd_cbo_w,
					cd_estabelecimento_w,
					'N','S','N','CNS'),1,15);

if (coalesce(cd_cns_medico_exec_w,'X') = 'X') then
	cd_cns_medico_exec_w := substr(obter_dados_pf(cd_medico_executor_w,'CNS'),1,15);
end if;	

if (ie_tipo_atendimento_w <> 1) then
	begin
	
	if (coalesce(nr_seq_apac_w,0) = 0) then
		begin
		cd_registro_proc_w	:= coalesce(cd_tiporeg_proc1_w,sus_obter_tiporeg_proc(cd_procedimento_w, ie_origem_proced_w, 'C', 1));

		if (cd_registro_proc_w = 1) then
			nr_idade_pac_proc_w	:= (substr(sus_obter_idade_pac_bpa(cd_pessoa_fisica_w, cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w, 'A'),1,3))::numeric;
		elsif (cd_registro_proc_w = 2) then
			nr_idade_pac_proc_w	:= (substr(obter_idade_pf(cd_pessoa_fisica_w, dt_procedimento_w, 'A'),1,3))::numeric;
		end if;
		end;
	else	
		cd_registro_proc_w	:= coalesce(cd_tiporeg_proc3_w,sus_obter_tiporeg_proc(cd_procedimento_w, ie_origem_proced_w, 'C', 3));
	end if;
	end;
end if;	

cd_medico_exec_exp_w := substr(sus_obter_regra_exp_exec(cd_procedimento_w,
					ie_origem_proced_w,
					cd_medico_executor_w,
					cd_cbo_w,
					cd_estabelecimento_w,
					'N','S','N','M'),1,10);

if (coalesce(cd_medico_exec_exp_w,'X') = 'X') then
	cd_medico_exec_exp_w := cd_medico_executor_w;
end if;

if (coalesce(cd_cbo_w,'X') = 'X') then
	cd_cbo_w := sus_obter_cbo_medico(cd_medico_executor_w,cd_procedimento_w,clock_timestamp(),0);
end if;

cd_cbo_exp_w := substr(sus_obter_regra_exp_exec(cd_procedimento_w,
				ie_origem_proced_w,
				cd_medico_executor_w,
				cd_cbo_w,
				cd_estabelecimento_w,
				'N','S','N','C'),1,6);

if (coalesce(cd_cbo_exp_w,'X') = 'X') then
	cd_cbo_exp_w := cd_cbo_w;
end if;

if (coalesce(ie_zera_conta_saude_ment_w,'N') = 'N') then
	ie_aih_saude_mental_w := coalesce(sus_verif_aih_saude_men(nr_interno_conta_w,cd_estabelecimento_w,dt_procedimento_w,cd_procedimento_w),'N');
else
	ie_aih_saude_mental_w := coalesce(sus_verif_aih_saude_men(nr_interno_conta_w,cd_estabelecimento_w,dt_procedimento_w,cd_procedimento_real_w),'N');
end if;

if (ie_aih_saude_mental_w = 'S') then
	begin
	qt_pontos_ato_w		:= 0;
	vl_sh_w			:= 0;
	vl_sp_w			:= 0;
	vl_anestesista_w	:= 0;
	vl_sadt_w		:= 0;
	vl_total_amb_w		:= 0;
	vl_proc_original_w	:= 0;
	vl_sp_rateio_w		:= 0;
	vl_procedimento_w	:= 0;

	select	count(1)
	into STRICT	qt_obs_conta_w
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_w
	and	ds_observacao like('%148/GM/MS%')  LIMIT 1;

	if (qt_obs_conta_w = 0) then
		CALL inserir_observacao_conta(nr_interno_conta_w,substr(wheb_mensagem_pck.get_texto(997743),1,255),nm_usuario_p);							
	end if;
	end;
end if;

if (coalesce(ie_cont_conj_ex_transp_w, 'N') = 'S') and (ie_tipo_atendimento_w <> 1) then
	begin

	cd_registro_proc_bpa_w	:= sus_obter_tiporeg_proc(cd_procedimento_w, ie_origem_proced_w, 'C', 2);

	if (sus_obter_estrut_proc(cd_procedimento_w,ie_origem_proced_w,'C','G') = '2' and (cd_registro_proc_w in (1,2) or cd_registro_proc_bpa_w = 4)) then
		begin

		if (coalesce(nr_seq_apac_w,0) = 0) then
			begin

			select	count(1)
			into STRICT	qt_proc_pac_forma_w
			from	procedimento_paciente
			where	nr_interno_conta = nr_interno_conta_w
			and	sus_obter_estrut_proc(cd_procedimento, ie_origem_proced,'C','F') = '50107'
			and	coalesce(cd_motivo_exc_conta::text, '') = '';

			if (qt_proc_pac_forma_w > 0) then
				begin

				qt_pontos_ato_w 	:= 0;
				vl_sh_w			:= 0;
				vl_sp_w			:= 0;
				vl_anestesista_w	:= 0;
				vl_sadt_w		:= 0;
				vl_total_amb_w		:= 0;
				vl_proc_original_w	:= 0;
				vl_sp_rateio_w		:= 0;
				vl_procedimento_w	:= 0;

				ie_exp_bpa_doa_org_w	:= 'N';

				end;
			end if;
			end;
		end if;
		end;
	end if;

	end;
end if;

if (cd_registro_proc_w = 0) then
        cd_registro_proc_w := null;
end if;

begin
insert into sus_valor_proc_paciente(
	nr_sequencia,			dt_atualizacao, 	nm_usuario,
	dt_competencia, 		qt_ato_medico,		qt_ato_anestesista,
	vl_matmed, 			vl_diaria,		vl_taxas,
	vl_medico,			vl_sadt, 		vl_contraste,
	vl_gesso, 			vl_quimioterapia, 	vl_dialise,
	vl_tph, 			vl_filme_rx,		vl_filme_ressonancia,
	vl_anestesia, 			vl_sadt_rx,		vl_sadt_pc,
	vl_outros, 			vl_ato_medico, 		vl_ato_anestesista,
	ie_tipo_atend_bpa, 		ie_grupo_atend_bpa, 	vl_ato_sadt,
	vl_ponto_sp, 			vl_ponto_sadt,		ie_versao,
	cd_porte_anestesico, 		vl_sp_unif, 		vl_sh_unif,
	vl_sadt_unif, 			vl_amb_unif, 		cd_proc_unif,
	vl_proc_original,		vl_sadt_rateado,	vl_medico_rateio,
	cd_registro_proc,		cd_cbo_exp,		cd_medico_exec_exp,
	cd_cns_medico_exec,		nr_idade_pac_proc,	ie_exp_bpa_doa_org)
values (	nr_sequencia_p, 		dt_atualizacao_w, 	nm_usuario_p,
	dt_competencia_w, 		qt_pontos_ato_w,	0,
	vl_sh_w, 			0, 			0,
	(vl_sp_w+vl_anestesista_w),	vl_sadt_w, 		0,
	0, 				0, 			0,
	0, 				0, 			0,
	0, 				0,			0,
	0, 				0, 			0,
	0,				0, 			0,
	0,				0,			'Teste',
	0, 				vl_sp_w, 		vl_sh_w,
	vl_sadt_w,			vl_total_amb_w, 	cd_procedimento_w,
	vl_proc_original_w,		vl_sh_w,		coalesce(vl_sp_rateio_w,vl_sp_w),
	cd_registro_proc_w,		cd_cbo_exp_w,		cd_medico_exec_exp_w,
	cd_cns_medico_exec_w,		nr_idade_pac_proc_w,	ie_exp_bpa_doa_org_w);
exception
	when others then
		begin
		update	sus_valor_proc_paciente
		set	dt_atualizacao		= dt_atualizacao_w,
			nm_usuario		= nm_usuario_p,
			dt_competencia		= dt_competencia_w,
			qt_ato_medico		= qt_pontos_ato_w,
			vl_matmed		= vl_sh_w,
			vl_medico		= vl_sp_w 	+ vl_anestesista_w,
			vl_sadt			= vl_sadt_w,
			vl_sp_unif		= vl_sp_w	+ vl_anestesista_w,
			vl_sh_unif		= vl_sh_w,
			vl_sadt_unif		= vl_sadt_w,
			vl_amb_unif		= vl_total_amb_w,
			cd_proc_unif		= cd_procedimento_w,
			vl_proc_original	= vl_proc_original_w,
			vl_ato_anestesista	= 0,
			vl_ato_sadt		= 0,
			qt_ato_sadt		= 0,
			vl_sadt_rateado		= vl_sh_w,
			vl_medico_rateio	= coalesce(vl_sp_rateio_w,vl_sp_w),
			cd_registro_proc	= cd_registro_proc_w,
			cd_cbo_exp		= cd_cbo_exp_w,
			cd_medico_exec_exp	= cd_medico_exec_exp_w,
			cd_cns_medico_exec	= cd_cns_medico_exec_w,
			nr_idade_pac_proc	= nr_idade_pac_proc_w,
			ie_exp_bpa_doa_org	= ie_exp_bpa_doa_org_w
		where	nr_sequencia		= nr_sequencia_p;
		end;
end;

/* Obter regra dos honorarios */

select	count(*)
into STRICT	ie_regra_hon_w
from	convenio b,
	regra_honorario_criterio a
where 	a.cd_convenio 		= b.cd_convenio
and	b.ie_tipo_convenio	= 3;

ie_pacote_w	:= obter_se_pacote(nr_sequencia_p,nr_seq_proc_pacote_w);

if (ie_regra_hon_w > 0) and (ie_conv_calculo_honorario_w <> 'C') then
	SELECT * FROM obter_regra_honorario(cd_estabelecimento_w, cd_convenio_orig_w, cd_categ_orig_w, cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w, ie_tipo_atendimento_w, cd_setor_atendimento_w, 0, 0, cd_medico_executor_w, cd_cgc_prestador_w, ie_pacote_w, ie_carater_inter_sus_w, null, cd_regra_honorario_w, ie_conta_honorario_w, ie_calcula_honorario_w, cd_cgc_honorario_w, cd_pessoa_honorario_w, nr_seq_criterio_w, cd_especialidade_medica_w, null, ie_funcao_medico_w, ie_clinica_w, null, null, cd_procedencia_w, ie_doc_executor_w, cd_cbo_w, nr_seq_proc_interno_w, nr_seq_exame_w) INTO STRICT cd_regra_honorario_w, ie_conta_honorario_w, ie_calcula_honorario_w, cd_cgc_honorario_w, cd_pessoa_honorario_w, nr_seq_criterio_w;
else
	SELECT * FROM obter_regra_honorario(cd_estabelecimento_w, cd_convenio_parametro_w, cd_categoria_parametro_w, cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w, ie_tipo_atendimento_w, cd_setor_atendimento_w, 0, 0, cd_medico_executor_w, cd_cgc_prestador_w, ie_pacote_w, ie_carater_inter_sus_w, null, cd_regra_honorario_w, ie_conta_honorario_w, ie_calcula_honorario_w, cd_cgc_honorario_w, cd_pessoa_honorario_w, nr_seq_criterio_w, cd_especialidade_medica_w, null, ie_funcao_medico_w, ie_clinica_w, null, null, cd_procedencia_w, ie_doc_executor_w, cd_cbo_w, nr_seq_proc_interno_w, nr_seq_exame_w) INTO STRICT cd_regra_honorario_w, ie_conta_honorario_w, ie_calcula_honorario_w, cd_cgc_honorario_w, cd_pessoa_honorario_w, nr_seq_criterio_w;
end if;

ie_doc_executor_ww := sus_obter_doc_exec_cnes(cd_estabelecimento_w, cd_cbo_w, coalesce(cd_medico_executor_w,cd_profissional_w), dt_procedimento_w, ie_doc_executor_ww);

if (coalesce(ie_doc_executor_ww::text, '') = '') then
	/* Obter a regra do Apurar Valor */

	SELECT * FROM sus_atualiza_doc_exec(cd_procedimento_w, ie_origem_proced_w, cd_medico_executor_w, cd_profissional_w, cd_cgc_prestador_w, cd_estabelecimento_w, cd_convenio_orig_w, cd_regra_honorario_w, '', cd_cbo_w, ie_doc_executor_ww, nr_seq_regra_doc_w) INTO STRICT ie_doc_executor_ww, nr_seq_regra_doc_w;
end if;

ie_doc_executor_w	:= coalesce(ie_doc_executor_ww, ie_doc_executor_w);

if (ie_valor_informado_w		= 'S') and (ie_conta_cancelada_w = 'X') then
	vl_sh_w			:= vl_materiais_orig_w;
	vl_sadt_w		:= vl_custo_oper_orig_w;
	vl_sp_w			:= vl_medico_orig_w;
	vl_procedimento_w	:= vl_proc_orig_w;
end if;

if (ie_regra_hon_w		> 0) then
	if (ie_calcula_honorario_w = 'N')	then
		vl_sp_w 		:= 0;
		vl_procedimento_w	:= 0;
		vl_sadt_w		:= 0;
		vl_anestesista_w	:= 0;
		vl_sh_w			:= 0;
	end if;
	vl_medico_conta_w			:= 0;
	if (ie_conta_honorario_w 		= 'S') 	then
		vl_medico_conta_w 		:= vl_sp_w;
	end if;
	if (ie_conta_honorario_w		= 'T') 	then
		vl_procedimento_w		:= 0;
	elsif (vl_sadt_w  		> 0) or (vl_anestesista_w	> 0) or (vl_sp_w 		> 0) or (vl_sh_w 		> 0) then
		vl_procedimento_w	:= 	(vl_sadt_w + vl_anestesista_w + vl_medico_conta_w + vl_sh_w);
	end if;
	if (cd_cgc_honorario_w IS NOT NULL AND cd_cgc_honorario_w::text <> '') then
		cd_cgc_prestador_w	:= cd_cgc_honorario_w;
	end if;
end if;

SELECT * FROM obter_estrut_conta_proc(cd_convenio_orig_w, cd_procedimento_w, ie_origem_proced_w, cd_plano_w, cd_medico_executor_w, cd_regra_honorario_w, nr_sequencia_p, cd_setor_atendimento_w, ie_tipo_atendimento_w, cd_estabelecimento_w, cd_especialidade_medica_w, cd_categ_orig_w, dt_procedimento_w, cd_cgc_prestador_w, cd_estrutura_w, cd_estrutura_honor_w) INTO STRICT cd_estrutura_w, cd_estrutura_honor_w;

if (cd_estrutura_w	> 0) then
	ie_emite_conta_w	:= cd_estrutura_w;
end if;
if (cd_estrutura_honor_w	> 0) then
	ie_emite_conta_honor_w	:= cd_estrutura_honor_w;
end if;

if (ie_glosa_w	= 'E') then
	nr_seq_conta_origem_w	:= nr_interno_conta_w;
	cd_motivo_exc_conta_w	:= cd_motivo_exc_conta_ww;
end if;


begin
select 	count(*)
into STRICT	qt_regra_porte_proced_w
from	sus_regra_porte_proced
where	ie_situacao = 'A';
exception
when others then
	qt_regra_porte_proced_w := 0;
end;

if (qt_regra_porte_proced_w > 0) then
	CALL sus_gerar_valor_porte_proced(nr_sequencia_p,nm_usuario_p);
end if;

-- Os 214352 Incremento PNASH
if (cd_procedimento_w = 303170093) then
	begin
	select	coalesce(a.vl_incremento_pnash,0)
	into STRICT	vl_incremento_pnash_w
	from	sus_parametros_aih a
	where	a.cd_estabelecimento = cd_estabelecimento_w;

	vl_procedimento_w := vl_procedimento_w + vl_incremento_pnash_w;
	end;
end if;

if (ie_atualiza_func_medico_w = 'R') then
	begin
	SELECT * FROM obter_proced_espec_medica(	cd_estabelecimento_w, cd_convenio_orig_w, cd_procedimento_w, ie_origem_proced_w, cd_regra_honorario_w, ie_emite_conta_w, ie_emite_conta_honor_w, ie_clinica_w, cd_setor_atendimento_w, cd_especialidade_medica_w, ie_funcao_medico_w, cd_medico_executor_w, nr_seq_proc_interno_w, ie_tipo_atendimento_w) INTO STRICT cd_especialidade_medica_w, ie_funcao_medico_w;
	end;
end if;

cd_plano_w :=	substr(coalesce(obter_dado_atend_cat_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, cd_categoria_w, 'P'), obter_dado_atend_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, 'P')),1,40);

select	max(ie_classif_contabil)
into STRICT	ie_classif_convenio_w
from	convenio
where	cd_convenio	= cd_convenio_w;

begin
/*APAC*/

ie_complexidade_sus_w	:= substr(sus_obter_dados_apac_conta(nr_interno_conta_w, 'CX','C'),1,2);
ie_tipo_financ_sus_w	:= substr(sus_obter_dados_apac_conta(nr_interno_conta_w, 'TF','C'),1,4);
/*AIH*/

if (coalesce(ie_complexidade_sus_w::text, '') = '') and (coalesce(ie_tipo_financ_sus_w::text, '') = '') then

	SELECT * FROM sus_obter_complex_financ_aih(nr_interno_conta_w, ie_complexidade_sus_w, ie_tipo_financ_sus_w) INTO STRICT ie_complexidade_sus_w, ie_tipo_financ_sus_w;

	/*ie_complexidade_sus_w	:= substr(sus_obter_complexidade_aih(nr_interno_conta_w),1,2);
	ie_tipo_financ_sus_w	:= substr(sus_obter_tipo_financ_aih(nr_interno_conta_w),1,4); */
	if (coalesce(ie_complexidade_sus_w::text, '') = '') and (coalesce(ie_tipo_financ_sus_w::text, '') = '') then

		select	max(ie_complexidade),
			max(ie_tipo_financiamento)
		into STRICT	ie_complexidade_sus_w,
			ie_tipo_financ_sus_w
		from	sus_aih_unif
		where	nr_interno_conta	= nr_interno_conta_w;

	end if;


end if;
/*Demais procedimentos*/

if (coalesce(ie_complexidade_sus_w::text, '') = '') and (coalesce(ie_tipo_financ_sus_w::text, '') = '') then
		select	ie_complexidade,
			ie_tipo_financiamento
		into STRICT	ie_complexidade_sus_w,
			ie_tipo_financ_sus_w
		from	sus_procedimento
		where	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w  LIMIT 1;
end if;
exception when others then
	ie_complexidade_sus_w	:= null;
	ie_tipo_financ_sus_w	:= null;
end;

if (coalesce(ie_tipo_convenio_w,0) = 0) then
	begin

	begin
		select	coalesce(ie_tipo_convenio,0)
		into STRICT	ie_tipo_convenio_w
		from	convenio
		where	cd_convenio = cd_convenio_orig_w  LIMIT 1;	
	exception
	when others then
		ie_tipo_convenio_w := 0;
	end;

	end;
end if;

SELECT * FROM define_Conta_Procedimento(
	cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, 1, ie_clinica_w, cd_setor_atendimento_w, ie_classif_convenio_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_orig_w, cd_categ_orig_w, dt_procedimento_w, cd_conta_contabil_w, cd_centro_custo_w, cd_plano_w, 'N', ie_complexidade_sus_w, ie_tipo_financ_sus_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

/* Atualizar o procedimento do paciente com os valores */

update	procedimento_paciente
set	vl_materiais		= vl_sh_w,
	vl_custo_operacional	= vl_sadt_w,
	vl_medico		= vl_sp_w,
	vl_anestesista		= 0,
	vl_auxiliares		= 0,
	vl_procedimento		= vl_procedimento_w,
	nr_interno_conta	= nr_interno_conta_w,
	dt_acerto_conta		= dt_acerto_conta_w,
	nr_aih			= nr_aih_w,
	nr_seq_aih		= coalesce(nr_seq_aih,0),
	nr_seq_apac		= nr_seq_apac_w,
	ie_responsavel_credito	= cd_regra_honorario_w,
	dt_conta		= dt_conta_w,
	ie_doc_executor		= ie_doc_executor_w,
	nr_seq_regra_doc	= nr_seq_regra_doc_w,
	ie_emite_conta		= ie_emite_conta_w,
	ie_emite_conta_honor	= ie_emite_conta_honor_w,
	cd_motivo_exc_conta	= cd_motivo_exc_conta_w,
	nr_seq_conta_origem	= nr_seq_conta_origem_w,
	cd_convenio		= cd_convenio_orig_w,
	cd_categoria		= cd_categ_orig_w,
	nr_seq_ajuste_proc	= nr_seq_ajuste_proc_w,
	cd_especialidade	= CASE WHEN ie_atualiza_func_medico_w='R' THEN  coalesce(cd_especialidade_medica_w,cd_especialidade)  ELSE cd_especialidade END ,
	ie_funcao_medico	= CASE WHEN ie_atualiza_func_medico_w='R' THEN  coalesce(ie_funcao_medico_w,ie_funcao_medico)  ELSE ie_funcao_medico END ,
	cd_conta_contabil	= cd_conta_contabil_w,
	cd_centro_custo_receita	= cd_centro_custo_w,
	ds_observacao		= CASE WHEN ie_identifica_conta_proc_w='N' THEN  ds_observacao  ELSE CASE WHEN nr_sequencia_regra_w=0 THEN  ds_observacao  ELSE substr(ds_observacao || ' ' || OBTER_DESC_EXPRESSAO(331942) || ': ' || nr_sequencia_regra_w,1,255) END  END ,
	cd_sequencia_parametro = philips_contabil_pck.get_parametro_conta_contabil
where	nr_sequencia		= nr_sequencia_p;

open c01;
loop
fetch c01 into
	nr_seq_partic_w,
	cd_pessoa_partic_w,
	cd_cbo_partic_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	cd_regra_honor_part_w	:= null;
	ie_doc_executor_ww	:= null;

	ie_doc_executor_ww := sus_obter_doc_exec_cnes(cd_estabelecimento_w, cd_cbo_partic_w, cd_pessoa_partic_w, dt_procedimento_w, ie_doc_executor_ww);

	SELECT * FROM define_valor_participante(nr_sequencia_p, nr_seq_partic_w, nm_usuario_p, vl_anestesista_w, vl_sp_w, vl_participante_w, qt_ponto_sus_w, ie_emite_conta_part_w, cd_regra_honor_part_w, vl_original_part_w, vl_conta_partic_w, pr_participante_w, cd_cgc_partic_w, null, cd_regra_honorario_w, nr_seq_crit_honorario_w, null) INTO STRICT vl_participante_w, qt_ponto_sus_w, ie_emite_conta_part_w, cd_regra_honor_part_w, vl_original_part_w, vl_conta_partic_w, pr_participante_w, cd_cgc_partic_w, nr_seq_crit_honorario_w;

	update	procedimento_participante
	set	vl_participante 	= vl_participante_w,
		vl_conta		= vl_conta_partic_w,
		ie_emite_conta		= ie_emite_conta_part_w,
		ie_responsavel_credito	= cd_regra_honor_part_w,
		qt_ponto_sus		= qt_ponto_sus_w,
		vl_ponto_sus		= 0,
		nm_usuario		= nm_usuario_p,
		cd_cgc			= cd_cgc_partic_w,
		dt_atualizacao		= dt_atualizacao_w,
		pr_procedimento		= pr_participante_w,
		nr_seq_crit_honorario  	= nr_seq_crit_honorario_w,
		ie_doc_executor		= coalesce(ie_doc_executor_ww,ie_doc_executor)
	where	nr_sequencia		= nr_sequencia_p
	and	nr_seq_partic		= nr_seq_partic_w;

	end;
end loop;
close c01;

if (ie_alterar_sp_proc_rim_w = 'S') and (sus_obter_se_detalhe_proc(cd_procedimento_w,ie_origem_proced_w,'10057',dt_procedimento_w) > 0) then
	CALL sus_alterar_sp_proc_rim(nr_sequencia_p,nm_usuario_p);
end if;

/* Teste que verifica se existe alguma regra de SUS gerar procedimento adicional */

select	count(*)
into STRICT	qt_regra_proc_adic_w
from	regra_ajuste_proc
where	ie_glosa	= 'S'
and	ie_situacao	= 'A'
and	cd_convenio	= cd_convenio_orig_w
and	cd_estabelecimento = cd_estabelecimento_w  LIMIT 1;
/*Se este parametro de faturamento estiver marcado, so gerar o procedimento se ouver convenio e categoria de glosa na Entrada unica*/

if (coalesce(ie_gerar_proc_adic_sus_w,'N') = 'S') then
	begin

	begin
	select	count(*)
	into STRICT	qt_regra_proc_adic_w
	from	atend_categoria_convenio
	where	nr_atendimento = nr_atendimento_w
	and	(cd_convenio_glosa IS NOT NULL AND cd_convenio_glosa::text <> '')
	and	(cd_categoria_glosa IS NOT NULL AND cd_categoria_glosa::text <> '')  LIMIT 1;
	exception
	when others then
		qt_regra_proc_adic_w := qt_regra_proc_adic_w;
	end;

	end;
end if;

if (qt_regra_proc_adic_w	> 0) then
	CALL sus_gerar_procconta_extra(
			cd_estabelecimento_w,
			cd_convenio_orig_w,
			cd_categ_orig_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			cd_pessoa_fisica_w,
			cd_carater_internacao_w,
			nr_interno_conta_w,
			cd_setor_atendimento_w,
			nr_sequencia_p,
			dt_procedimento_w,
			nm_usuario_p);
end if;

if (ie_tipo_atendimento_w <> 1) and (ie_link_bpa_account_w = 'S') and (cd_registro_proc_w in (1,2)) then
        begin
        /*Verifica se esta vinculada a uma APAC*/

        select  count(*)
        into STRICT    ie_vinc_apac_w
        from    sus_apac_unif
        where   nr_interno_conta = nr_interno_conta_w  LIMIT 1;

        /*Verifica se existe algum BPA sem vinculo de conta*/

        select  count(*)
        into STRICT    ie_vinc_bpa_w
        from    sus_bpa_unif
        where   nr_atendimento = nr_atendimento_w
        and     coalesce(nr_interno_conta::text, '') = ''  LIMIT 1;

        /*Faz o vinculo apos mudar o status da conta BPA*/

        if (coalesce(ie_vinc_apac_w,0) = 0) and (coalesce(ie_vinc_bpa_w,0) > 0) then
                CALL sus_vincular_bpa_conta(nr_atendimento_w, nr_interno_conta_w, nm_usuario_p);
        end if;
        end;
end if;

<<final>>

/* Incluido o select abaixo para ter algo apos o goto (precisa ter alguma linha de programa apos ele) */

select	count(*)
into STRICT	qt_registros_w
from	procedimento_paciente
where	nr_sequencia	= nr_sequencia_p  LIMIT 1;

if (ie_especial_proc_exec_w = 'S') and (coalesce(cd_especialidade_medica_w::text, '') = '') then
	CALL atualizar_especialidade_proc(nr_interno_conta_w, nr_sequencia_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_atualiza_valor_proc ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

