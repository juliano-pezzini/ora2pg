-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_baca_status_faturamento () AS $body$
DECLARE

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Navega pelos lotes de faturamento, e verifica :
		Se possuirem pelo menos uma fatura e data de geração, os lotes serão:
			status ="Finalizado"
			dt inicio geracao = dt geracao
			dt fim geracao = dt geracao
		Se não possuirem uma fatura e data de geração
			status = Aguardando


-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/tb_nr_seq_lote_w	dbms_sql.number_table;
tb_dt_geracao_lote_w	dbms_sql.date_table;


-- carrega os lotes que serão marcados como "Finalizados"
c01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.dt_geracao
	from	pls_lote_faturamento	a
	where	(a.dt_geracao IS NOT NULL AND a.dt_geracao::text <> '')
	and	exists (	SELECT	1
						from	pls_fatura	x
						where	x.nr_seq_lote	= a.nr_sequencia)
	and	coalesce(a.ie_status::text, '') = '';

--- Carrega os lotes que serão marcados como aguardando
c02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_lote_faturamento	a
	where	coalesce(a.dt_geracao::text, '') = ''
	and	not exists (	SELECT	1
						from	pls_fatura	x
						where	x.nr_seq_lote	= a.nr_sequencia)
	and	coalesce(a.ie_status::text, '') = '';

BEGIN

open c01;
loop
fetch c01 bulk collect into	tb_nr_seq_lote_w,
				tb_dt_geracao_lote_w limit pls_util_pck.qt_registro_transacao_w;
exit when tb_nr_seq_lote_w.count = 0;

	forall i in tb_nr_seq_lote_w.first..tb_nr_seq_lote_w.last
		update	pls_lote_faturamento
		set	ie_status		= 3,
			dt_inicio_ger_lote	= tb_dt_geracao_lote_w(i),
			dt_fim_ger_lote		= tb_dt_geracao_lote_w(i)
		where	nr_sequencia		= tb_nr_seq_lote_w(i);
	commit;

	tb_nr_seq_lote_w.delete;
	tb_dt_geracao_lote_w.delete;

end loop;

if (c01%isopen) then

	close c01;
end if;


open c02;
loop
fetch c02 bulk collect into	tb_nr_seq_lote_w limit pls_util_pck.qt_registro_transacao_w;
exit when tb_nr_seq_lote_w.count = 0;

	forall i in tb_nr_seq_lote_w.first..tb_nr_seq_lote_w.last
		update	pls_lote_faturamento
		set	ie_status		= 1
		where	nr_sequencia		= tb_nr_seq_lote_w(i);
	commit;

	tb_nr_seq_lote_w.delete;

end loop;

if (c02%isopen) then

	close c02;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_baca_status_faturamento () FROM PUBLIC;

