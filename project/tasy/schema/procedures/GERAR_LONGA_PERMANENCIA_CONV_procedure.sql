-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_longa_permanencia_conv ( nr_atendimento_p bigint , nr_interno_conta_p bigint , cd_procedimento_p bigint , ie_origem_proced_p bigint , nm_usuario_p text) AS $body$
DECLARE

 
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
qt_perm_proc_w		bigint;
qt_perm_real_w		bigint;
qt_longa_perm_w		bigint;
dt_entrada_unidade_w	timestamp;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_setor_atendimento_w	integer;
cd_estabelecimento_w	integer;
nr_seq_atepacu_w		bigint;
nr_seq_interno_w		bigint;
cd_cgc_prestador_w	varchar(14);
nr_sequencia_w		bigint;
vl_procedimento_w		double precision	:= 0;
vl_medico_w		double precision	:= 0;
vl_anestesista_w		double precision	:= 0;
vl_materiais_w		double precision	:= 0;
cd_medico_executor_w	varchar(10);
cd_procedimento_real_w	bigint;
ie_origem_proc_real_w	bigint;
dt_procedimento_w		timestamp;
dt_periodo_inicial_w	timestamp;
					

BEGIN 
 
SELECT * FROM calcular_longa_perm_conv(nr_atendimento_p, nr_interno_conta_p, nm_usuario_p, cd_procedimento_w, ie_origem_proced_w, qt_perm_proc_w, qt_perm_real_w, qt_longa_perm_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w, qt_perm_proc_w, qt_perm_real_w, qt_longa_perm_w;
 
select	max(cd_estabelecimento) 
into STRICT	cd_estabelecimento_w 
from	conta_paciente 
where 	nr_interno_conta	= nr_interno_conta_p;
 
if (qt_longa_perm_w	> 0) then 
	cd_procedimento_w	:= cd_procedimento_p;
	ie_origem_proced_w	:= coalesce(ie_origem_proced_p,ie_origem_proced_w);
	/*select	dt_entrada_unidade, 
		cd_convenio, 
		cd_categoria, 
		cd_setor_atendimento, 
		cd_estabelecimento, 
		nr_seq_atepacu 
	into	dt_entrada_unidade_w, 
		cd_convenio_w, 
		cd_categoria_w, 
		cd_setor_atendimento_w, 
		cd_estabelecimento_w, 
		nr_seq_atepacu_w 
	from 	atendimento_paciente_v 
	where	nr_atendimento	= nr_atendimento_p;*/
 
 
	begin 
	select 	dt_entrada_unidade, 
		cd_convenio, 
		cd_categoria, 
		cd_setor_atendimento, 
		cd_estabelecimento, 
		nr_sequencia, 
		cd_medico_resp 
	into STRICT	dt_entrada_unidade_w, 
		cd_convenio_w, 
		cd_categoria_w, 
		cd_setor_atendimento_w, 
		cd_estabelecimento_w, 
		nr_seq_atepacu_w, 
		cd_medico_executor_w 
	from 	atendimento_paciente c, 
		atend_categoria_convenio b, 
		atend_paciente_unidade a 
	where	c.nr_atendimento	= nr_atendimento_p 
	and	a.nr_atendimento 	= c.nr_atendimento 
	and	a.nr_atendimento	= b.nr_atendimento 
	and	b.nr_seq_interno	= obter_atecaco_atendimento(c.nr_atendimento) 
	and	obter_classif_setor(a.cd_setor_atendimento) in (3,4) 
	and	a.dt_entrada_unidade	= (	SELECT 	max(d.dt_entrada_unidade) 
						from 	atend_paciente_unidade d 
						where 	obter_classif_setor(d.cd_setor_atendimento) in (3,4) 
						and	d.nr_Atendimento = c.nr_atendimento);
	exception 
		when no_data_found then 
			/*Ra.ise_application_error(-20011,'Paciente não teve nenhuma passagem'|| 
						' por um setor de Internação.#@#@');*/
 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(263379);
		when others then 
			--R.aise_application_error(-20011,'Problema na leitura dos dados da unidade.#@#@'); 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(263380);
	end;
 
 
	/* selecionar ultimo setor de internação */
 
	nr_seq_interno_w	:= coalesce(obter_atepacu_paciente(nr_atendimento_p,'IA'),0);
 
 
	if (nr_seq_interno_w > 0) and (nr_seq_interno_w <> nr_seq_atepacu_w) then 
		select	dt_entrada_unidade, 
			cd_setor_atendimento, 
			nr_seq_interno 
		into STRICT	dt_entrada_unidade_w, 
			cd_setor_atendimento_w, 
			nr_seq_atepacu_w 
		from	atend_paciente_unidade 
		where	nr_atendimento	= nr_atendimento_p 
		and	nr_seq_interno	= nr_seq_interno_w;
	end if;
 
	select	cd_cgc 
	into STRICT	cd_cgc_prestador_w 
	from	estabelecimento 
	where	cd_estabelecimento	= cd_estabelecimento_w;
 
	/* Delecao de longa permanecia caso exista alguma */
 
	delete	FROM procedimento_paciente 
	where	nr_atendimento	= nr_atendimento_p 
	and	nr_interno_conta	= nr_interno_conta_p 
	and	ie_origem_Proced	= ie_origem_proced_w 
	and	cd_procedimento	= cd_procedimento_w 
	and	coalesce(cd_motivo_exc_conta::text, '') = '';
 
	select	nextval('procedimento_paciente_seq') 
	into STRICT	nr_sequencia_w 
	;
 
	dt_procedimento_w	:= dt_entrada_unidade_w;
 
	insert into procedimento_paciente(	nr_atendimento, 
			dt_entrada_unidade, 
			cd_procedimento, 
			dt_procedimento, 
			qt_procedimento, 
			dt_atualizacao, 
			nm_usuario, 
			cd_convenio, 
			cd_categoria, 
			dt_prescricao, 
			cd_setor_atendimento, 
			ie_origem_proced, 
			vl_procedimento, 
			vl_medico, 
			vl_anestesista, 
			vl_materiais, 
			tx_procedimento, 
			ie_valor_informado, 
			nr_sequencia, 
			dt_inicio_procedimento, 
			cd_cgc_prestador, 
			nr_interno_conta, 
			nr_seq_atepacu, 
			ds_observacao, 
			cd_medico_executor) 
	values (	nr_atendimento_p, 
			dt_entrada_unidade_w, 
			cd_procedimento_w, 
			coalesce(dt_procedimento_w,dt_entrada_unidade_w), 
			qt_longa_perm_w, 
			clock_timestamp(), 
			'Tasy', 
			cd_convenio_w, 
			cd_categoria_w, 
			dt_entrada_unidade_w, 
			cd_setor_atendimento_w, 
			ie_origem_proced_w, 
			vl_procedimento_w, 
			vl_medico_w, 
			vl_anestesista_w, 
			vl_materiais_w, 
			100, 
			'N', 
			nr_sequencia_w, 
			dt_entrada_unidade_w, 
			cd_cgc_prestador_w, 
			nr_interno_conta_p, 
			nr_seq_atepacu_w, 
			substr(wheb_mensagem_pck.get_texto(307174),1,255), 
			cd_medico_executor_w);
 
	begin 
	CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
		exception 
		when others then 
		dt_entrada_unidade_w := clock_timestamp();
	end;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_longa_permanencia_conv ( nr_atendimento_p bigint , nr_interno_conta_p bigint , cd_procedimento_p bigint , ie_origem_proced_p bigint , nm_usuario_p text) FROM PUBLIC;

