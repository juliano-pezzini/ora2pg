-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duplicate_latest_encounter (nr_episodio_p text, nr_seq_episodio_paciente_p bigint, dt_agenda_p timestamp, nm_usuario_p text, cd_pessoa_fisica_p text, nr_atend_novo_p INOUT bigint) AS $body$
DECLARE


nr_atend_novo_w				atendimento_paciente.nr_atendimento%type := 0;
ie_possui_atend_w			varchar(1);
ie_possui_conv_w			varchar(1);
ie_unidade_livre_w			varchar(1);
dt_entrada_unidade_w		atend_paciente_unidade.dt_entrada_unidade%type;
ie_vigencia_vencida_w		varchar(1) := 'N';
nr_atendimento_w    		atendimento_paciente.nr_atendimento%type := 0;



BEGIN

if (nr_episodio_p IS NOT NULL AND nr_episodio_p::text <> '') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then

    select	max(b.nr_atendimento)
    into STRICT	nr_atendimento_w
    from	episodio_paciente      a,
			atendimento_paciente   b
    where	a.nr_sequencia = b.nr_seq_episodio
    and		a.nr_episodio = nr_episodio_p;

    if (coalesce(nr_atendimento_w::text, '') = '') then
	
		select	max(b.nr_atendimento)
		into STRICT	nr_atendimento_w
		from	episodio_paciente      a,
			atendimento_paciente   b
		where	a.nr_sequencia = b.nr_seq_episodio
		and		a.nr_sequencia = nr_seq_episodio_paciente_p;
		
	end if;
	
	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_possui_atend_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_w;

	if (ie_possui_atend_w = 'S') then

		select	nextval('atendimento_paciente_seq')
		into STRICT	nr_atend_novo_w
		;

		insert into atendimento_paciente(
			nr_atendimento,
			ie_permite_visita,
			dt_entrada,
			ie_tipo_atendimento,
			cd_procedencia,
			cd_medico_resp,
			cd_pessoa_fisica,
			cd_estabelecimento,
			dt_atualizacao,
			nm_usuario,
			cd_pessoa_responsavel,
			ie_carater_inter_sus,
			cd_municipio_ocorrencia,
			cd_medico_referido,
			cd_cgc_indicacao,
			qt_dias_prev_inter,
			nr_seq_queixa,
			ie_tipo_convenio,
			ie_tipo_atend_tiss,
			ie_responsavel,
			nr_seq_indicacao,
			nr_seq_episodio,
            nr_seq_tipo_admissao_fat,
            nr_seq_classificacao,
            nr_seq_classif_esp,
            nr_seq_tipo_acidente,
            nr_seq_forma_chegada,
            ds_observacao,
            ds_sintoma_paciente,
            ie_paciente_gravida,
            ie_permite_visita_rel,
            ie_paciente_isolado)
		SELECT	nr_atend_novo_w,
			ie_permite_visita,
			dt_agenda_p,
			ie_tipo_atendimento,
			cd_procedencia,
			cd_medico_resp,
			cd_pessoa_fisica_p,
			cd_estabelecimento,
			clock_timestamp(),
			nm_usuario_p,
			cd_pessoa_responsavel,
			ie_carater_inter_sus,
			cd_municipio_ocorrencia,
			cd_medico_referido,
			cd_cgc_indicacao,
			qt_dias_prev_inter,
			nr_seq_queixa,
			ie_tipo_convenio,
			ie_tipo_atend_tiss,
			ie_responsavel,
			nr_seq_indicacao,
			nr_seq_episodio_paciente_p,
            nr_seq_tipo_admissao_fat,
            nr_seq_classificacao,
            nr_seq_classif_esp,
            nr_seq_tipo_acidente,
            nr_seq_forma_chegada,
            ds_observacao,
            ds_sintoma_paciente,
            ie_paciente_gravida,
            ie_permite_visita_rel,
            ie_paciente_isolado

		from	atendimento_paciente
		where	nr_atendimento = nr_atendimento_w;


		select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
		into STRICT	ie_possui_conv_w
		from	atend_categoria_convenio
		where	nr_atendimento = nr_atendimento_w;

		if (ie_possui_conv_w = 'S') then

			select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
			into STRICT	ie_vigencia_vencida_w
			from	atend_categoria_convenio
			where	nr_atendimento = nr_atendimento_w
			and		to_date(to_char(dt_final_vigencia,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') < clock_timestamp();

			insert into atend_categoria_convenio(
				cd_convenio,
				cd_categoria,
				dt_inicio_vigencia,
				nr_seq_interno,
				nr_atendimento,
				dt_atualizacao,
				nm_usuario,
				cd_plano_convenio,
				nr_seq_origem,
				cd_municipio_convenio,
				cd_plano_glosa,
				cd_empresa,
				qt_dia_internacao,
				dt_final_vigencia,
				cd_usuario_convenio,
				dt_validade_carteira,
				ie_tipo_guia,
                cd_tipo_acomodacao,
                cd_complemento,
                nr_prioridade,
                ie_tipo_conveniado,
                cd_dependente,
                ie_regime_internacao,
                nr_seq_abrangencia,
                nr_doc_convenio,
                nr_seq_tipo_lib_guia,
                ds_observacao,
                ie_cod_usuario_mae_resp,
                ie_autoriza_envio_convenio,
                cd_convenio_glosa,
                cd_categoria_glosa,
                cd_usuario_conv_glosa,
                cd_complemento_glosa,
                dt_validade_cart_glosa,
                nr_acompanhante,
                qt_dieta_acomp,
                nr_seq_lib_dieta_conv,
                nr_seq_regra_acomp,
                ie_lib_dieta)
			SELECT	cd_convenio,
				cd_categoria,
				clock_timestamp(),
				nextval('atend_categoria_convenio_seq'),
				nr_atend_novo_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_plano_convenio,
				nr_seq_origem,
				cd_municipio_convenio,
				cd_plano_glosa,
				cd_empresa,
				qt_dia_internacao,
				CASE WHEN ie_vigencia_vencida_w='S' THEN  null  ELSE dt_final_vigencia END ,
				cd_usuario_convenio,
				dt_validade_carteira,
				ie_tipo_guia,
                cd_tipo_acomodacao,
                cd_complemento,
                nr_prioridade,
                ie_tipo_conveniado,
                cd_dependente,
                ie_regime_internacao,
                nr_seq_abrangencia,
                nr_doc_convenio,
                nr_seq_tipo_lib_guia,
                ds_observacao,
                ie_cod_usuario_mae_resp,
                ie_autoriza_envio_convenio,
                cd_convenio_glosa,
                cd_categoria_glosa,
                cd_usuario_conv_glosa,
                cd_complemento_glosa,
                dt_validade_cart_glosa,
                nr_acompanhante,
                qt_dieta_acomp,
                nr_seq_lib_dieta_conv,
                nr_seq_regra_acomp,
                ie_lib_dieta
			from	atend_categoria_convenio
			where	nr_atendimento = nr_atendimento_w;

		end if;


		select	max(dt_entrada_unidade)
		into STRICT	dt_entrada_unidade_w
		from	atend_paciente_unidade
		where	nr_atendimento = nr_atendimento_w;

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_unidade_livre_w
		from	unidade_atendimento a,
				atend_paciente_unidade b
		where	a.ie_status_unidade = 'L'
		and		coalesce(a.nr_atendimento::text, '') = ''
		and		a.cd_setor_atendimento = b.cd_setor_atendimento
		and		a.cd_unidade_basica = b.cd_unidade_basica
		and		a.cd_unidade_compl = b.cd_unidade_compl
		and		b.nr_atendimento = nr_atendimento_w
		and		b.dt_entrada_unidade = dt_entrada_unidade_w;

		if (ie_unidade_livre_w = 'S') then
			insert into atend_paciente_unidade(
				cd_setor_atendimento,
                cd_departamento,
				cd_unidade_basica,
				cd_unidade_compl,
				dt_entrada_unidade,
				nr_seq_interno,
				nr_atendimento,
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_saida_interno,
				cd_tipo_acomodacao,
                nr_acompanhante,
                ds_observacao)
			SELECT	cd_setor_atendimento,
                cd_departamento,
				cd_unidade_basica,
				cd_unidade_compl,
				clock_timestamp(),
				nextval('atend_paciente_unidade_seq'),
				nr_atend_novo_w,
				1,
				clock_timestamp(),
				nm_usuario_p,
				null,
				cd_tipo_acomodacao,
                nr_acompanhante,
                ds_observacao
			from	atend_paciente_unidade
			where	nr_atendimento = nr_atendimento_w
			and	dt_entrada_unidade = dt_entrada_unidade_w;
		else
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1119341);
		end if;
	end if;
	commit;
	
end if;

nr_atend_novo_p := nr_atend_novo_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duplicate_latest_encounter (nr_episodio_p text, nr_seq_episodio_paciente_p bigint, dt_agenda_p timestamp, nm_usuario_p text, cd_pessoa_fisica_p text, nr_atend_novo_p INOUT bigint) FROM PUBLIC;

