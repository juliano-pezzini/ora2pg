-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE finalizar_cirurgia ( nr_cirurgia_p bigint, dt_termino_p timestamp, nr_min_duracao_real_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_gerar_partic_w		varchar(1);
ie_gera_partic_cirur_proc_w	varchar(1) := 'N';
cd_estabelecimento_w	smallint;
cd_medico_anestesista_w	varchar(10);
cd_medico_cirurgiao_w	varchar(10);
cd_medico_exec_w		varchar(10);
cd_funcao_w		smallint;
ie_status_conj_w		smallint;
ie_consiste_part_sus_w	varchar(1);

cd_profissional_ww     	varchar(10);
cd_funcao_prof_ww      	smallint;
nr_seq_equipe_ww	   	bigint;
cd_profissional_w		varchar(10);
cd_funcao_prof_w		smallint;
nr_seq_agenda_w		bigint;
ie_gera_prof_agenda_w	varchar(01) := 'N';
dt_termino_www		timestamp;
ie_grava_log_w		varchar(1);
nr_atendimento_w		bigint;
qt_regra_tx_tempo_w	bigint;
cd_convenio_w		bigint;
dt_entrada_unidade_w	timestamp;
ie_calc_porte_w		varchar(1);
ie_porte_w		varchar(1);
cd_tipo_anestesia_w	varchar(10);
ie_gerar_equipamentos_w 	varchar(1);
nr_seq_pepo_w		bigint;
ie_informacao_w		varchar(15);
nr_seq_equipe_w		bigint;
qt_regra_etapa_w		bigint;
ie_gerar_hist_saude_w	varchar(3);
ie_regra_lanc_automatico_w	varchar(1)		:= 'N';
qt_regra_tempo_w	bigint;
ie_tipo_tempo_w		varchar(3);
qt_minuto_w		integer;
nr_sequencia_w		integer;
dt_inicio_real_prev_w	timestamp;
nr_seq_finaliza_cir_w	bigint;
nr_seq_evento_cirurgia_w bigint;
nr_sequencia_evento_w		bigint := 0;
ie_atualizar_tempos_auto_w	varchar(01) 	:= 'N';
ds_consistencia_w	varchar(2000) := null;
ie_atende_lista_espera_w	varchar(1);
nr_seq_lista_w				bigint;
cd_especialidade_w	integer;
nr_seq_transplante_w	bigint;
ds_sep_bv_w				varchar(100);
ds_param_integ_hl7_w			varchar(4000);
nr_seq_interno_old_w	bigint;
nr_seq_interno_w		bigint;
cd_setor_atendimento_w	integer;
ds_log_hist_cir_w	varchar(2000);
cd_perfil_w		integer;
ie_atualiza_partic_w	varchar(1);
qt_proced_hemo_w	integer;
ie_momento_integracao_w	varchar(15);
ie_data_termino_w	varchar(1);
dt_inicial_w		timestamp;
dt_termino_w		timestamp;
ie_considerar_cirurgia_w	ajuste_ap_lote_evento.ie_considerar_cirurgia%type;
cd_pessoa_fisica_w			pessoa_fisica.cd_pessoa_fisica%type;
hr_inicio_w					agenda_paciente.hr_inicio%type;
cd_medico_w 				cirurgia.cd_medico_cirurgiao%type;
cd_procedimento_w			cirurgia.cd_procedimento_princ%type;
nr_seq_proc_interno_w		cirurgia.nr_seq_proc_interno%type;
ie_origem_proced_w			cirurgia.ie_origem_proced%type;
nr_seq_evento_w				regra_envio_sms.nr_seq_evento%type;
ie_status_agenda_w			agenda_paciente.ie_status_agenda%type;
cd_agenda_w					agenda_paciente.cd_agenda%type;
ds_observacao_w				agenda_paciente.ds_observacao%type;
qt_existe_regra_setor_w		bigint;
ie_pyxis_cirurgia_w		parametros_farmacia.ie_pyxis_cirurgia%type;

C01 CURSOR FOR
	SELECT	cd_profissional,
		cd_funcao,
		nr_seq_equipe,
		cd_especialidade	
	from	profissional_agenda
	where	nr_seq_agenda	= nr_seq_agenda_w
	order by 1;
	
C02 CURSOR FOR
	SELECT	distinct a.cd_medico_exec
	from	prescr_procedimento a,
		     cirurgia b
	where	a.nr_prescricao = b.nr_prescricao
	and	nr_cirurgia = nr_cirurgia_p
	order by 1;
	
C03 CURSOR FOR
	SELECT	b.cd_pessoa_fisica,
		b.ie_funcao,
		b.nr_seq_equipe
	from	pf_equipe a,
		pf_equipe_partic b
	where	a.nr_sequencia = nr_seq_equipe_w
	and 	a.nr_sequencia = b.nr_seq_equipe	
	order by 1;
	
C04 CURSOR FOR
	SELECT	a.ie_tipo_tempo,
		a.qt_minuto,
		a.ie_data_termino
	from	regra_tempo_cirurgia a
	where	coalesce(ie_gerar_automatico, 'S') = 'S';

/* Tratamento para chamada do  gerar_evento_agenda_trigger para tratar o evento Finalizar cirurgia*/

C05 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento		= cd_estabelecimento_w
	and		ie_evento_disp			= 'FIC'
	and (obter_se_convenio_rec_alerta(cd_convenio_w,nr_sequencia) = 'S')
	and (obter_se_proc_rec_alerta(nr_seq_proc_interno_w,nr_sequencia,cd_procedimento_w,ie_origem_proced_w) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(cd_pessoa_fisica_w),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,cd_agenda_w,ie_status_agenda_w) = 'S')
	and (obter_se_equip_regra(nr_sequencia,nr_seq_agenda_w) = 'S')
	and		coalesce(ie_situacao,'A') = 'A';	


BEGIN

ds_sep_bv_w := obter_separador_bv;

select	coalesce(max(cd_estabelecimento),0),
		coalesce(max(cd_pessoa_fisica),0), 
		coalesce(max(cd_medico_cirurgiao),0), 
		coalesce(max(cd_procedimento_princ),0),
		coalesce(max(nr_seq_proc_interno),0),
		coalesce(max(ie_origem_proced),0) 
into STRICT	cd_estabelecimento_w,
		cd_pessoa_fisica_w,
		cd_medico_w, 
		cd_procedimento_w,
		nr_seq_proc_interno_w,
		ie_origem_proced_w
from	cirurgia
where	nr_cirurgia = nr_cirurgia_p;

select	coalesce(max(ie_momento_integracao),'IF')
into STRICT	ie_momento_integracao_w
from	parametros_pepo
where	cd_estabelecimento = cd_estabelecimento_w;

select	max(nr_sequencia),
		max(cd_agenda),
		max(hr_inicio),
		substr(max(ds_observacao),1,255),
		max(ie_status_agenda)
into STRICT	nr_seq_agenda_w, 
		cd_agenda_w,
		hr_inicio_w, 
		ds_observacao_w,
		ie_status_agenda_w
from	agenda_paciente
where 	nr_cirurgia = nr_cirurgia_p;


cd_perfil_w := obter_perfil_ativo;

ie_gerar_partic_w := obter_param_usuario(900, 20, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gerar_partic_w);
ie_status_conj_w := obter_param_usuario(900, 69, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_status_conj_w);
ie_gera_prof_agenda_w := obter_param_usuario(900, 70, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gera_prof_agenda_w);
ie_gera_partic_cirur_proc_w := obter_param_usuario(872, 99, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gera_partic_cirur_proc_w);
ie_grava_log_w := obter_param_usuario(900, 202, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_grava_log_w); --Tratar na OS 569728
ie_gerar_equipamentos_w := obter_param_usuario(872, 292, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gerar_equipamentos_w);
ie_informacao_w := obter_param_usuario(900, 329, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_informacao_w);
ie_gerar_hist_saude_w := obter_param_usuario(900, 366, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gerar_hist_saude_w);
ie_regra_lanc_automatico_w := obter_param_usuario(900, 85, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_regra_lanc_automatico_w);
ie_atualizar_tempos_auto_w := obter_param_usuario(872, 400, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_atualizar_tempos_auto_w);
ie_consiste_part_sus_w := obter_param_usuario(900, 428, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_consiste_part_sus_w);
ie_atende_lista_espera_w := obter_param_usuario(871, 661, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_atende_lista_espera_w);
ie_atualiza_partic_w := obter_param_usuario(900, 139, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_atualiza_partic_w);
if (Obter_Funcao_Ativa = 872) then
	ie_regra_lanc_automatico_w := obter_param_usuario(872, 102, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_regra_lanc_automatico_w);
end if;

if (ie_consiste_part_sus_w = 'S') then
	ds_consistencia_w := consiste_lanc_part_cir_sus(nr_cirurgia_p);
	if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
	--if	(ds_consistencia_w <> '') then

		--Wheb_mensagem_pck.exibir_mensagem_abort(184546,'DS_CONSISTENCIA='||ds_consistencia_w);
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(184546,'ERRO='||ds_consistencia_w);
	end if;	
end if;	

select	dt_termino,
	nr_atendimento
into STRICT	dt_termino_www,
	nr_atendimento_w
from	cirurgia
where	nr_cirurgia		= nr_cirurgia_p;

if (coalesce(ie_gerar_equipamentos_w,'N') = 'S') then
	select	max(nr_seq_pepo)
	into STRICT	nr_seq_pepo_w
	from 	cirurgia
	where 	nr_cirurgia = nr_cirurgia_p;
	
	CALL gerar_equipamento_gases(nr_seq_pepo_w,nr_cirurgia_p,nm_usuario_p);
end if;

if (ie_regra_lanc_automatico_w		= 'F') then
	CALL gerar_lancamento_automatico(	nr_atendimento_w,
					null,
					28,
					nm_usuario_p,
					nr_cirurgia_p,
					null,
					null,
					null,
					null,
					null);
					
end if;	

if (ie_atualizar_tempos_auto_w = 'S') then
	select  	max(nr_sequencia)
	into STRICT 		nr_seq_finaliza_cir_w
	from  	evento_cirurgia
	where 	ie_finaliza_cirurgia = 'S';

	if (nr_seq_finaliza_cir_w IS NOT NULL AND nr_seq_finaliza_cir_w::text <> '') then
		select max(nr_sequencia)
		into STRICT nr_seq_evento_cirurgia_w
		from evento_cirurgia_paciente
		where nr_cirurgia =  nr_cirurgia_p
		and  nr_seq_evento = nr_seq_finaliza_cir_w
		and	coalesce(ie_situacao,'A') = 'A';
	end if;	

	if (nr_seq_evento_cirurgia_w > 0) then
		update  EVENTO_CIRURGIA_PACIENTE
		set 	DT_REGISTRO =   dt_termino_p
		where   nr_cirurgia =   nr_cirurgia_p
		and     nr_sequencia = nr_seq_evento_cirurgia_w
		and	coalesce(ie_situacao,'A') = 'A';
	elsif (coalesce(nr_seq_finaliza_cir_w,0) > 0) then
			select	nextval('evento_cirurgia_paciente_seq')
			into STRICT		nr_sequencia_evento_w
			;

			insert into evento_cirurgia_paciente(
				nr_sequencia,
				nr_seq_evento,
				nr_cirurgia,                      
				dt_registro,                  
				dt_atualizacao,         
				nm_usuario,
				ie_situacao,
				cd_profissional,
				dt_inicio_evento)
			values (
				nr_sequencia_evento_w,
				nr_seq_finaliza_cir_w,
				CASE WHEN nr_cirurgia_p=0 THEN null  ELSE nr_cirurgia_p END ,
				dt_termino_p,
				clock_timestamp(),
				nm_usuario_p,
				'A',
				Obter_Pessoa_Fisica_Usuario(nm_usuario_p,'C'),
				dt_termino_p);
	end if;
end if;	

select	coalesce(max(ie_pyxis_cirurgia), 'N')
into STRICT	ie_pyxis_cirurgia_w
from	parametros_farmacia
where	cd_estabelecimento = cd_estabelecimento_w;

if (ie_pyxis_cirurgia_w = 'S') then
	begin
	select	max(a.cd_setor_atendimento)
	into STRICT	cd_setor_atendimento_w
	from	atend_paciente_unidade a,
			cirurgia b
	where	a.nr_atendimento = b.nr_atendimento
	and		a.dt_entrada_unidade = b.dt_entrada_unidade
	and		b.nr_cirurgia = nr_cirurgia_p;

	begin
	select	1
	into STRICT	qt_existe_regra_setor_w
	from	dis_regra_setor
	where	cd_setor_atendimento = cd_setor_atendimento_w  LIMIT 1;
	exception
	when others then
		qt_existe_regra_setor_w := 0;
	end;

	if (qt_existe_regra_setor_w > 0) then
		CALL intdisp_gerar_movimento(nr_atendimento_w, 'EPD', cd_setor_atendimento_w, nr_cirurgia_p);
	end if;	

	exception
	when others then
			null;
	end;
end if;

update	cirurgia
set	dt_termino		= dt_termino_p,
	nr_min_duracao_real	= nr_min_duracao_real_p,
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp()
where	nr_cirurgia		= nr_cirurgia_p
and	coalesce(dt_termino::text, '') = '';

begin
select	max(nr_seq_interno),
		max(a.cd_setor_atendimento)
into STRICT	nr_seq_interno_old_w,
		cd_setor_atendimento_w
from	atend_paciente_unidade a,
		cirurgia b
where	a.nr_atendimento = b.nr_atendimento
and		a.dt_entrada_unidade = b.dt_entrada_unidade
and		b.nr_cirurgia = nr_cirurgia_p;

nr_seq_interno_w := obter_atepacu_paciente(nr_atendimento_w, 'A');

exception
when others then
		null;
end;
	
if (ie_atende_lista_espera_w = 'F') then
	select 	max(a.nr_seq_lista)
	into STRICT	nr_seq_lista_w
	from	cirurgia b,
			agenda_paciente a
	where	a.nr_cirurgia = b.nr_cirurgia;
	
	if (nr_seq_lista_w > 0) then
		CALL alterar_status_lista_espera(nm_usuario_p,nr_seq_lista_w, 'E', 'N');
	end if;

end if;

ie_porte_w := obter_regra_porte_cirurgia(nr_cirurgia_p);

if (ie_porte_w IS NOT NULL AND ie_porte_w::text <> '') then
	update	cirurgia
	set	ie_porte 	= ie_porte_w
	where	nr_cirurgia	= nr_cirurgia_p;
else  ---ALTERADO---Adicionado para buscar o porte informado na cirurgia para passar como parametro
	select ie_porte
	into STRICT ie_porte_w
	from cirurgia
	where nr_cirurgia = nr_cirurgia_p;
end if;	
	

select	dt_termino
into STRICT	dt_termino_www
from	cirurgia
where	nr_cirurgia		= nr_cirurgia_p;

if (ie_status_conj_w IS NOT NULL AND ie_status_conj_w::text <> '') then
	update	cm_conjunto_cont
	set	ie_status_conjunto	= ie_status_conj_w,
		nm_usuario = nm_usuario_p,
		dt_atualizacao = clock_timestamp()
	where	nr_cirurgia	= nr_cirurgia_p;
end if;

commit;

if (ie_momento_integracao_w = 'IF') then
	begin
		CALL gerar_cirurgia_hl7(nr_atendimento_w,nr_seq_interno_old_w,cd_setor_atendimento_w,'F');
	exception
	when others then
			null;
	end;
end if;

if (ie_gerar_partic_w = 'S') or (ie_gera_partic_cirur_proc_w = 'S') then
	

	select	cd_medico_anestesista,
			cd_medico_cirurgiao
	into STRICT	cd_medico_anestesista_w,   
			cd_medico_cirurgiao_w
	from	cirurgia
	where	nr_cirurgia	=	nr_cirurgia_p;
	
	if (cd_medico_anestesista_w IS NOT NULL AND cd_medico_anestesista_w::text <> '') then
		select	min(cd_funcao)
		into STRICT	cd_funcao_w
		from	funcao_medico
		where	ie_anestesista	=	'S';
		
		if (cd_funcao_w > 0) then
			CALL gerar_participante_cirurgia(cd_medico_anestesista_w, nr_cirurgia_p,cd_funcao_w,'A',nm_usuario_p);
		end if;
	end if;
	
	if (cd_medico_cirurgiao_w IS NOT NULL AND cd_medico_cirurgiao_w::text <> '') then
		select	min(cd_funcao)
		into STRICT	cd_funcao_w
		from	funcao_medico
		where	ie_cirurgiao	=	'S';
		
		if (cd_funcao_w > 0) then
			CALL gerar_participante_cirurgia(cd_medico_cirurgiao_w, nr_cirurgia_p,cd_funcao_w,'C',nm_usuario_p);
		end if;
	end if;
	
	if (ie_gera_prof_agenda_w = 'S')  then
		open C01;
		loop
		fetch C01 into	
			cd_profissional_w,
			cd_funcao_prof_w,
			nr_seq_equipe_w,
			cd_especialidade_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (cd_funcao_prof_w IS NOT NULL AND cd_funcao_prof_w::text <> '') then
				CALL gerar_partic_cir_prof(cd_profissional_w,
						nr_cirurgia_p,
						cd_funcao_prof_w,
						'',
						cd_especialidade_w,
						nm_usuario_p);
			end if;
			end;
			if (nr_seq_equipe_w IS NOT NULL AND nr_seq_equipe_w::text <> '') and (coalesce(cd_funcao_prof_w::text, '') = '') then
					open C03;
					loop
					fetch C03 into	
						cd_profissional_ww,
						cd_funcao_prof_ww,
						nr_seq_equipe_ww;
					EXIT WHEN NOT FOUND; /* apply on C03 */
						begin
						/*if (cd_funcao_prof_w is not null) then */

							CALL gerar_partic_cir_prof(cd_profissional_ww,
									nr_cirurgia_p,
									cd_funcao_prof_ww,
									'',
									null,
									nm_usuario_p);
       					/*end if;*/

						end;
					end loop;
				    close C03;
			
			end if;
		end loop;
		close C01;
	end if;	
end if;

if (ie_gera_partic_cirur_proc_w = 'S') then

	select	min(cd_funcao)
	into STRICT	cd_funcao_w
	from	funcao_medico
	where	ie_cirurgiao = 'S';

	if (cd_funcao_w IS NOT NULL AND cd_funcao_w::text <> '') then
		open C02;
		loop
		fetch C02 into	
			cd_medico_exec_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
				if (cd_medico_exec_w IS NOT NULL AND cd_medico_exec_w::text <> '') then
					CALL gerar_participante_cirurgia(cd_medico_exec_w, nr_cirurgia_p,cd_funcao_w,'C',nm_usuario_p);
				end if;
			end;
		end loop;
		close C02;
	end if;
	
end if;

select	max(coalesce(cd_convenio,0)),
	max(coalesce(dt_entrada_unidade,clock_timestamp())),
	max(coalesce(cd_tipo_anestesia,'0')),
	max(coalesce(nr_seq_transplante,0))
into STRICT	cd_convenio_w,
	dt_entrada_unidade_w,
	cd_tipo_anestesia_w,
	nr_seq_transplante_w
from	cirurgia
where	nr_cirurgia = nr_cirurgia_p;

select 	count(*)
into STRICT	qt_regra_tx_tempo_w
from	convenio_regra_taxa_cir
where	cd_convenio = cd_convenio_w;

select	max(ie_calc_porte)
into STRICT	ie_calc_porte_w
from	convenio
where	cd_convenio = cd_convenio_w;

begin
select 	max(coalesce(ie_calc_porte_estab, ie_calc_porte_w))
into STRICT	ie_calc_porte_w
from 	convenio_estabelecimento
where 	cd_convenio = cd_convenio_w
and 	cd_estabelecimento = cd_estabelecimento_w;
exception
	when others then
	ie_calc_porte_w:= ie_calc_porte_w;
end;

if 	((coalesce(qt_regra_tx_tempo_w,0) > 0) and (ie_calc_porte_w = 'X'))then
	CALL gerar_tx_sala_cir_tempo(cd_estabelecimento_w,nr_atendimento_w,nr_cirurgia_p,dt_entrada_unidade_w,nm_usuario_p,cd_tipo_anestesia_w, ie_porte_w);
end if;

if (ie_calc_porte_w = 'B') then
	CALL Gerar_Tx_cirur_porte_tempo(cd_estabelecimento_w,nr_atendimento_w,nr_cirurgia_p,nm_usuario_p);
end if;

if (nr_seq_transplante_w > 0) then
	CALL tx_inserir_dados_cirurgia(nr_cirurgia_p,nm_usuario_p);
end if;

if (ie_informacao_w IS NOT NULL AND ie_informacao_w::text <> '') then
	CALL gerar_dados_painel_cir_ini_fim(ie_informacao_w,nr_seq_agenda_w,'A',nm_usuario_p);
	
end if;

select	count(*)
into STRICT	qt_regra_etapa_w
from	fatur_etapa_alta
where	coalesce(ie_evento,'E') = 'E';

if (coalesce(qt_regra_etapa_w,0) > 0) then
	CALL gerar_etapa_final_cirurgia(nr_atendimento_w, nm_usuario_p);
end if;

commit;

if ((ie_grava_log_w = 'S') and (obter_se_possui_motivo_alt_cir('F','') = 'N')) then
	CALL gerar_cirurgia_hist(nr_cirurgia_p,'FC',wheb_usuario_pck.get_nm_usuario,substr(wheb_mensagem_pck.get_texto(310767),1,255));--Finalizar cirurgia
end if;


if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then
	CALL executar_evento_agenda('AFC', 'CI', nr_seq_agenda_w, cd_estabelecimento_w, nm_usuario_p);
end if;	

if (ie_gerar_hist_saude_w = 'S') then
	begin
	insert into historico_saude_cirurgia(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_cirurgia,
		cd_procedimento,
		ie_origem_proced,
		ie_tipo_anestesia,
		cd_pessoa_fisica,
		ie_intensidade,
		ds_observacao,
		dt_liberacao,
		nm_usuario_liberacao,
		ie_nega_cirurgias)
	SELECT	nextval('historico_saude_cirurgia_seq'),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		dt_inicio_real,
		cd_procedimento_princ,
		ie_origem_proced,
		cd_tipo_anestesia,
		cd_pessoa_fisica,
		'L',
		ds_observacao,
		clock_timestamp(),
		nm_usuario_p,
		'N'
	from	cirurgia c
	where	c.nr_cirurgia = nr_cirurgia_p
	and not exists (SELECT	1
			from	historico_saude_cirurgia h
			where	h.cd_pessoa_fisica	= c.cd_pessoa_fisica
			and	h.cd_procedimento	= c.cd_procedimento_princ
			and	h.ie_origem_proced	= c.ie_origem_proced
			and	h.dt_cirurgia		= c.dt_inicio_real
			and	coalesce(h.dt_inativacao::text, '') = '');
		
		
	exception
	when others then
		null;
	end;
end if;

select	count(*)
into STRICT	qt_regra_tempo_w
from	regra_tempo_cirurgia
where	coalesce(ie_gerar_automatico, 'S') = 'S';

if (qt_regra_tempo_w > 0) then
	open C04;
	loop
	fetch C04 into	
		ie_tipo_tempo_w,
		qt_minuto_w,
		ie_data_termino_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		select	coalesce(max(nr_sequencia),0)+1
		into STRICT	nr_sequencia_w
		from	cirurgia_tempo
		where	nr_cirurgia = nr_cirurgia_p;
		
		select	coalesce(dt_inicio_real, dt_inicio_prevista),
			dt_termino
		into STRICT	dt_inicio_real_prev_w,
			dt_termino_w
		from	cirurgia
		where	nr_cirurgia = nr_cirurgia_p;
		
		dt_inicial_w	:= dt_inicio_real_prev_w;
		if (ie_data_termino_w = 'S') then
			dt_inicial_w	:= dt_termino_w;
		end if;	
		
		insert into cirurgia_tempo(nr_sequencia,
				nr_cirurgia,
				ie_tipo_tempo,
				dt_atualizacao,
				nm_usuario,
				dt_inicial,
				dt_final,
				qt_minuto)
		values		(nr_sequencia_w,
				nr_cirurgia_p,
				ie_tipo_tempo_w,
				clock_timestamp(),
				nm_usuario_p,
				dt_inicial_w,
				dt_inicial_w+(qt_minuto_w/1440),
				qt_minuto_w);
		end;
	end loop;
	close C04;
end if;

if (ie_atualiza_partic_w = 'S') then
	CALL Atualiza_valor_partic_conta(nr_cirurgia_p, nm_usuario_p);
end if;

select	count(*)
into STRICT	qt_proced_hemo_w
from	cirurgia a,
		hem_proc_interno b,
		hem_procedimento c
where	nr_cirurgia = nr_cirurgia_p
and 	b.nr_seq_proc = c.nr_sequencia
and		a.nr_seq_proc_interno = b.nr_seq_proc_interno
and 	coalesce(c.ie_situacao,'A') = 'A';

if (qt_proced_hemo_w > 0) then
	CALL hem_gerar_dados_cirurgia(nr_cirurgia_p, nm_usuario_p);
end if;

if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (dt_entrada_unidade_w IS NOT NULL AND dt_entrada_unidade_w::text <> '') and (OBTER_FUNCAO_ATIVA <> 900) then
	CALL gerar_higieni_final_cirurgia(nr_atendimento_w, dt_entrada_unidade_w, nm_usuario_p, cd_estabelecimento_w);
end if;

select	coalesce(max(ie_considerar_cirurgia), 'S')
into STRICT	ie_considerar_cirurgia_w
from	ajuste_ap_lote_evento
where	ie_evento = 'M';

if (ie_considerar_cirurgia_w = 'S') then
	CALL gerar_ajustes_ap_lote('M',nr_atendimento_w,nm_usuario_p,'F');
end if;

open C05;
	loop
	fetch C05 into	
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		CALL gerar_evento_agenda_trigger(	nr_seq_evento_w,
						nr_atendimento_w,
						cd_pessoa_fisica_w,
						null,
						nm_usuario_p,
						cd_agenda_w,
						hr_inicio_w, 
						cd_medico_w, 
						cd_procedimento_w,
						ie_origem_proced_w, 
						null,
						null,
						null,
						null,
						cd_convenio_w,
						null,
						'N',
						nr_seq_agenda_w,
						null,
						null,
						null,
						null,
						ds_observacao_w);
		end;
	end loop;
close C05;

CALL ATUALIZAR_EV_LINHA_CUIDADO('CI', 'CIRURGIA', nr_cirurgia_p,
                            ('cd_procedimento_w=' || coalesce(cd_procedimento_w, 0) || ';ie_origem_proced_w=' || coalesce(ie_origem_proced_w, 0) || ';'),
                            cd_pessoa_fisica_w, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE finalizar_cirurgia ( nr_cirurgia_p bigint, dt_termino_p timestamp, nr_min_duracao_real_p bigint, nm_usuario_p text) FROM PUBLIC;

