-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_desempenho_cobr_item ( nr_seq_cobranca_p bigint, nr_seq_desempenho_p bigint, cd_pessoa_fisica_p text, cd_cgc_p text, ie_tipo_data_p text, dt_inicial_p timestamp, dt_final_p timestamp, nr_seq_historico_p bigint, nr_seq_grupo_cobr_p bigint, ie_situacao_contrato_p text, nm_usuario_oper_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

				 
ds_historico_w			varchar(255);
nm_devedor_w			varchar(80);
nm_estipulante_w		varchar(80);
nm_pagador_w			varchar(80);
nm_cobrador_w			varchar(60);
ds_situacao_contrato_w		varchar(50);
ds_tipo_recebimento_w		varchar(40);
nm_usuario_oper_w		varchar(15);
cd_cgc_ant_w			varchar(14)	:= null;
cd_cgc_w			varchar(14);
cd_pessoa_fisica_ant_w		varchar(10)	:= null;
cd_pessoa_fisica_w		varchar(10);
ie_periodo_w			varchar(3);
ie_receb_w			varchar(1);
vl_cobranca_w			double precision	:= 0;
vl_pago_w			double precision	:= 0;
vl_cobranca_total_w		double precision	:= 0;
vl_pago_total_w			double precision	:= 0;
vl_acobrar_w			double precision	:= 0;
vl_cobrar_resp_w		double precision	:= 0;
vl_total_w			double precision	:= 0;
vl_cobranca_equipe_w		double precision	:= 0;
nr_seq_grupo_w			bigint;
qt_registro_outro_w		bigint	:= 0;
qt_registro_sucesso_outro_w	bigint	:= 0;
nr_seq_historico_w		bigint	:= null;
nr_seq_desempenho_w		bigint;
nr_seq_contrato_w		bigint;
nr_contrato_w			bigint;
nr_seq_cobranca_w		bigint;	
nr_seq_cobrador_w		bigint;
nr_titulo_w			bigint;
nr_vidas_w			bigint;
qt_registro_w			bigint;
qt_registro_sucesso_w		bigint;
nr_seq_mensalidade_w		bigint;
qt_meta_regra_w			bigint;
qt_meta_definida_w		bigint;
nr_seq_pagador_w		bigint;
qt_registro_antend_w		bigint;
nr_seq_vinculo_w		bigint;
nr_seq_item_w			bigint;
qt_registro_cobr_w		bigint;
qt_contrato_w			bigint;
nr_seq_intercambio_w		bigint;
cd_tipo_recebimento_w		integer;
dt_emissao_w			timestamp;
dt_vencimento_w			timestamp;
dt_inclusao_w			timestamp;
dt_registro_w			timestamp;

C03 CURSOR FOR /* Itens */
 
	SELECT	a.nr_sequencia, 
		a.nr_titulo, 
		b.dt_emissao, 
		b.dt_pagamento_previsto, 
		a.dt_inclusao, 
		a.vl_original, 
		a.vl_original - a.vl_acobrar, 
		substr(obter_nome_pf_pj(b.cd_pessoa_fisica,b.cd_cgc),1,255), 
		b.nr_seq_mensalidade, 
		b.cd_pessoa_fisica cd_pf, 
		b.cd_cgc cd_cgc, 
		a.vl_acobrar 
	from	titulo_receber b, 
		cobranca a 
	where	a.nr_titulo		= b.nr_titulo 
	and (b.cd_pessoa_fisica = cd_pessoa_fisica_p or b.cd_cgc = cd_cgc_p) 
	and	(a.nr_seq_cobrador IS NOT NULL AND a.nr_seq_cobrador::text <> '') 
	and (exists (SELECT	1 
			from	registro_cobranca y, 
				registro_cobr_item x 
			where	x.nr_seq_registro	= y.nr_sequencia 
			and	x.nr_seq_cobranca	= a.nr_sequencia 
			and	y.dt_registro between dt_inicial_p and fim_dia(dt_final_p) 
			
union all
 
			select	1 
			from	pls_evento_ocorrencia d, 
				pls_atendimento_evento c, 
				pls_atendimento a 
			where	a.nr_sequencia		= c.nr_seq_atendimento 
			and	c.nr_seq_evento		= d.nr_sequencia 
			and	d.ie_acao_evento 	= 11 
			and	a.nm_usuario_nrec	= nm_usuario_oper_p 
			and (a.cd_pessoa_fisica = b.cd_pessoa_fisica or 
				a.cd_cgc = b.cd_cgc) 
			) or ie_tipo_data_p <> 'R') 
	and (a.dt_inclusao between dt_inicial_p and fim_dia(dt_final_p) or ie_tipo_data_p <> 'I') 
	and (b.dt_pagamento_previsto between dt_inicial_p and fim_dia(dt_final_p) or ie_tipo_data_p <> 'V') 
	and (exists (select	1 
			from	grupo_cobranca_membro x 
			where	x.nr_seq_cobrador	= a.nr_seq_cobrador 
			and	x.nr_seq_grupo		= nr_seq_grupo_cobr_p) or coalesce(nr_seq_grupo_cobr_p::text, '') = '');
	
C04 CURSOR FOR 
	SELECT	b.nr_sequencia, 
		c.ds_historico, 
		c.ie_receb_notificacao, 
		b.dt_registro 
	FROM registro_cobranca b
LEFT OUTER JOIN tipo_hist_cob c ON (b.nr_seq_historico = c.nr_sequencia)
WHERE b.cd_pessoa_fisica	= cd_pessoa_fisica_w --and	(b.nr_seq_cobrador_reg	= nr_seq_cobrador_w or b.nr_seq_cobrador_reg is null) 
  and (b.dt_registro between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) or ie_tipo_data_p <> 'R') and exists (SELECT	1 
			from	registro_cobr_item	x, 
				cobranca		y 
			where	y.nr_sequencia		= x.nr_seq_cobranca 
			and	x.nr_seq_registro	= b.nr_sequencia) and exists (select	1 
			from	cobrador y, 
				usuario x 
			where	x.nm_usuario		= b.nm_usuario_nrec 
			and	y.cd_pessoa_fisica	= x.cd_pessoa_fisica);
			
C05 CURSOR FOR 
	SELECT	b.nr_sequencia, 
		c.ds_historico, 
		c.ie_receb_notificacao, 
		b.dt_registro 
	FROM registro_cobranca b
LEFT OUTER JOIN tipo_hist_cob c ON (b.nr_seq_historico = c.nr_sequencia)
WHERE b.cd_cgc		= cd_cgc_w --and	(b.nr_seq_cobrador_reg	= nr_seq_cobrador_w or b.nr_seq_cobrador_reg is null) 
  and (b.dt_registro between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) or ie_tipo_data_p <> 'R') and exists (SELECT	1 
			from	registro_cobr_item	x, 
				cobranca		y 
			where	y.nr_sequencia		= x.nr_seq_cobranca 
			and	x.nr_seq_registro	= b.nr_sequencia) and exists (select	1 
			from	cobrador y, 
				usuario x 
			where	x.nm_usuario		= b.nm_usuario_nrec 
			and	y.cd_pessoa_fisica	= x.cd_pessoa_fisica);

C06 CURSOR FOR 
	SELECT	c.nr_sequencia, 
		substr(pls_obter_nome_evento(c.nr_seq_evento),1,255), 
		a.dt_inicio 
	from	pls_evento_ocorrencia d, 
		pls_atendimento_evento c, 
		pls_atendimento a 
	where	a.nr_sequencia		= c.nr_seq_atendimento 
	and	c.nr_seq_evento		= d.nr_sequencia 
	and	d.ie_acao_evento 	= 11 
	and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w 
	and	a.nm_usuario_nrec	= nm_usuario_oper_p 
	and (a.dt_inicio between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) or ie_tipo_data_p <> 'R');
	
C07 CURSOR FOR 
	SELECT	c.nr_sequencia, 
		substr(pls_obter_nome_evento(c.nr_seq_evento),1,255), 
		a.dt_inicio 
	from	pls_evento_ocorrencia d, 
		pls_atendimento_evento c, 
		pls_atendimento a 
	where	a.nr_sequencia		= c.nr_seq_atendimento 
	and	c.nr_seq_evento		= d.nr_sequencia 
	and	d.ie_acao_evento 	= 11 
	and	a.cd_cgc		= cd_cgc_w 
	and	a.nm_usuario_nrec	= nm_usuario_oper_p 
	and (a.dt_inicio between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) or ie_tipo_data_p <> 'R');


BEGIN 
open C03;
loop 
fetch C03 into	 
	nr_seq_cobranca_w, 
	nr_titulo_w, 
	dt_emissao_w, 
	dt_vencimento_w, 
	dt_inclusao_w, 
	vl_cobranca_w, 
	vl_pago_w, 
	nm_devedor_w, 
	nr_seq_mensalidade_w, 
	cd_pessoa_fisica_w, 
	cd_cgc_w, 
	vl_acobrar_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin 
	select	max(y.nr_seq_historico) 
	into STRICT	nr_seq_historico_w 
	FROM registro_cobranca y, registro_cobr_item x 
WHERE x.nr_seq_registro	= y.nr_sequencia and y.nr_seq_historico	= coalesce(nr_seq_historico_p,y.nr_seq_historico);		
 
	if (nm_usuario_oper_p IS NOT NULL AND nm_usuario_oper_p::text <> '') then 
		nm_cobrador_w	:= substr(obter_nome_usuario(nm_usuario_oper_p),1,60);
	end if;
	 
	if	((nr_seq_historico_p IS NOT NULL AND nr_seq_historico_p::text <> '') and (coalesce(nr_seq_historico_w::text, '') = '')) then 
		goto final;
	end if;
	 
	ds_historico_w		:= obter_descricao_padrao_pk('TIPO_HIST_COB','DS_HISTORICO','NR_SEQUENCIA',nr_seq_historico_w);
	 
	nr_vidas_w		:= null;
	nr_seq_contrato_w	:= null;
	nr_contrato_w		:= null;
	nm_estipulante_w	:= null;
	nr_seq_pagador_w	:= null;
	nm_pagador_w		:= null;
	ds_situacao_contrato_w	:= null;
	nr_seq_intercambio_w	:= null;
	 
	/* Obter dados do contrato */
 
	if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then 
		select	count(1) 
		into STRICT	qt_contrato_w 
		from	pls_contrato d, 
			pls_contrato_pagador c, 
			pls_mensalidade_segurado b, 
			pls_mensalidade a 
		where	a.nr_sequencia		= b.nr_seq_mensalidade 
		and	a.nr_seq_pagador	= c.nr_sequencia 
		and	d.nr_sequencia		= c.nr_seq_contrato 
		and	a.nr_sequencia		= nr_seq_mensalidade_w;
		 
		if (qt_contrato_w > 0) then 
			begin 
			select	substr(pls_obter_qtd_vidas_contrato(d.nr_sequencia,'A'),1.10) qt_vidas, 
				null, 
				max(d.nr_sequencia), 
				max(d.nr_contrato), 
				substr(max(obter_nome_pf_pj(d.cd_pf_estipulante,d.cd_cgc_estipulante)),1,80), 
				max(c.nr_sequencia) nr_seq_pagador, 
				substr(max(obter_nome_pf_pj(c.cd_pessoa_fisica,c.cd_cgc)),1,255), 
				--decode(max(d.dt_rescisao_contrato),null,'Ativo','Rescindido')				 
				substr(pls_obter_dados_segurado(max(b.nr_seq_segurado),'DS'),1,50) 
			into STRICT	nr_vidas_w, 
				nr_seq_intercambio_w, 
				nr_seq_contrato_w, 
				nr_contrato_w, 
				nm_estipulante_w, 
				nr_seq_pagador_w, 
				nm_pagador_w, 
				ds_situacao_contrato_w 
			from	pls_contrato			d, 
				pls_contrato_pagador		c, 
				pls_mensalidade_segurado	b, 
				pls_mensalidade			a 
			where	a.nr_sequencia		= b.nr_seq_mensalidade 
			and	a.nr_seq_pagador	= c.nr_sequencia 
			and	d.nr_sequencia		= c.nr_seq_contrato 
			and	a.nr_sequencia		= nr_seq_mensalidade_w 
			and (d.ie_situacao		= ie_situacao_contrato_p or coalesce(ie_situacao_contrato_p::text, '') = '') 
			group by d.nr_sequencia;
			exception 
			when others then 
				goto final;
			end;
		else 
			select (select	count(*) 
				from	pls_segurado	x 
				where	x.nr_seq_intercambio	= d.nr_sequencia 
				and	(x.dt_liberacao IS NOT NULL AND x.dt_liberacao::text <> '') 
				and (coalesce(x.dt_rescisao::text, '') = '' or ((x.dt_rescisao IS NOT NULL AND x.dt_rescisao::text <> '') and coalesce(x.dt_reativacao,x.dt_rescisao) > x.dt_rescisao))) qt_vidas, 
				--substr(pls_obter_qtd_vidas_contrato(d.nr_sequencia,'A'),1.10) qt_vidas, 
				max(d.nr_sequencia), 
				null, 
				null, 
				substr(max(obter_nome_pf_pj(d.cd_pessoa_fisica,d.cd_cgc)),1,80), 
				max(c.nr_sequencia) nr_seq_pagador, 
				substr(max(obter_nome_pf_pj(c.cd_pessoa_fisica,c.cd_cgc)),1,255),				 
				substr(pls_obter_dados_segurado(max(b.nr_seq_segurado),'DS'),1,50) 
			into STRICT	nr_vidas_w, 
				nr_seq_intercambio_w, 
				nr_seq_contrato_w, 
				nr_contrato_w, 
				nm_estipulante_w, 
				nr_seq_pagador_w, 
				nm_pagador_w, 
				ds_situacao_contrato_w 
			from	pls_intercambio			d, 
				pls_contrato_pagador		c, 
				pls_mensalidade_segurado	b, 
				pls_mensalidade			a 
			where	a.nr_sequencia		= b.nr_seq_mensalidade 
			and	a.nr_seq_pagador	= c.nr_sequencia 
			and	d.nr_sequencia		= c.nr_seq_pagador_intercambio 
			and	a.nr_sequencia		= nr_seq_mensalidade_w 
			group by d.nr_sequencia;
		end if;
	end if;
	 
	/* Obter último tipo de recebimento */
 
	select	max(b.cd_tipo_recebimento), 
		max(b.ds_tipo_recebimento) 
	into STRICT	cd_tipo_recebimento_w, 
		ds_tipo_recebimento_w 
	from	tipo_recebimento b, 
		titulo_receber_liq a 
	where	a.cd_tipo_recebimento	= b.cd_tipo_recebimento 
	and	a.nr_titulo		= nr_titulo_w 
	and	a.dt_recebimento	= 	(SELECT	max(x.dt_recebimento) 
						from	titulo_receber_liq x 
						where	x.nr_titulo	= a.nr_titulo);
	 
	qt_registro_w		:= 0;
	qt_registro_sucesso_w	:= 0;
	 
	select	nextval('w_cobr_desempenho_item_seq') 
	into STRICT	nr_seq_item_w 
	;
	 
	/* Se não teve registro no período, não considerar o valor da cobrança */
 
	select	count(*) 
	into STRICT	qt_registro_cobr_w 
	from	registro_cobr_item x, 
		registro_cobranca y 
	where	x.nr_seq_registro	= y.nr_sequencia 
	and	x.nr_seq_cobranca	= nr_seq_cobranca_w;
	 
	if (qt_registro_cobr_w = 0) then 
		vl_cobranca_w	:= 0;
		vl_pago_w	:= 0;
	end if;
	 
	insert into w_cobr_desempenho_item(nr_sequencia, 
		nm_usuario, 
		dt_atualizacao, 
		nm_usuario_nrec, 
		dt_atualizacao_nrec, 
		nr_seq_desempenho, 
		nr_seq_cobranca, 
		nr_titulo, 
		dt_emissao, 
		dt_inclusao_cobranca, 
		dt_vencimento, 
		vl_cobranca, 
		vl_pago, 
		nm_devedor, 
		nr_seq_contrato, 
		nr_contrato, 
		nm_estipulante, 
		nr_vidas, 
		cd_tipo_recebimento, 
		ds_tipo_recebimento, 
		qt_registro, 
		qt_registro_sucesso, 
		nr_seq_pagador, 
		nm_pagador, 
		ds_situacao_contrato, 
		nr_seq_ult_historico, 
		ds_ult_historico, 
		nr_seq_intercambio) 
	values (nr_seq_item_w, 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nr_seq_desempenho_p, 
		nr_seq_cobranca_w, 
		nr_titulo_w, 
		dt_emissao_w, 
		dt_inclusao_w, 
		dt_vencimento_w, 
		vl_cobranca_w, 
		vl_pago_w, 
		nm_devedor_w, 
		nr_seq_contrato_w, 
		nr_contrato_w, 
		nm_estipulante_w, 
		nr_vidas_w, 
		cd_tipo_recebimento_w, 
		ds_tipo_recebimento_w, 
		0, 
		0, 
		nr_seq_pagador_w, 
		nm_pagador_w, 
		ds_situacao_contrato_w, 
		nr_seq_historico_w, 
		ds_historico_w, 
		nr_seq_intercambio_w);
		 
		 
	 
	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (cd_pessoa_fisica_w <> coalesce(cd_pessoa_fisica_ant_w,0)) then 
		open C04;
		loop 
		fetch C04 into	 
			nr_seq_vinculo_w, 
			ds_historico_w, 
			ie_receb_w, 
			dt_registro_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin 
			qt_registro_w	:= qt_registro_w + 1;
			 
			if (ie_receb_w = 'S') then 
				qt_registro_sucesso_w	:= qt_registro_sucesso_w + 1;
			end if;
 
			insert into w_cobr_desemp_item_hist(nr_sequencia, 
				nm_usuario, 
				dt_atualizacao, 
				nm_usuario_nrec, 
				dt_atualizacao_nrec, 
				nr_seq_registro, 
				ds_historico, 
				nr_seq_cobr_des_item, 
				nm_pessoa_registro, 
				nm_responsavel, 
				dt_registro) 
			values (nextval('w_cobr_desemp_item_hist_seq'), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nr_seq_vinculo_w, 
				ds_historico_w, 
				nr_seq_item_w, 
				nm_cobrador_w, 
				nm_cobrador_w, 
				dt_registro_w);
			end;
		end loop;
		close C04;
		 
		open C06;
		loop 
		fetch C06 into	 
			nr_seq_vinculo_w, 
			ds_historico_w, 
			dt_registro_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin 
			qt_registro_w	:= qt_registro_w + 1;
 
			insert into w_cobr_desemp_item_hist(nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					nm_usuario_nrec, 
					dt_atualizacao_nrec, 
					nr_seq_atend_evento, 
					ds_historico, 
					nr_seq_cobr_des_item, 
					nm_pessoa_registro, 
					nm_responsavel, 
					dt_registro) 
				values (nextval('w_cobr_desemp_item_hist_seq'), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nr_seq_vinculo_w, 
					ds_historico_w, 
					nr_seq_item_w, 
					nm_cobrador_w, 
					nm_cobrador_w, 
					dt_registro_w);
			end;
		end loop;
		close C06;
	elsif (cd_cgc_w <> coalesce(cd_cgc_ant_w,0)) then 
		open C05;
		loop 
		fetch C05 into	 
			nr_seq_vinculo_w, 
			ds_historico_w, 
			ie_receb_w, 
			dt_registro_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin 
			qt_registro_w	:= qt_registro_w + 1;
 
			if (ie_receb_w = 'S') then 
				qt_registro_sucesso_w	:= qt_registro_sucesso_w + 1;
			end if;
 
			insert into w_cobr_desemp_item_hist(nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					nm_usuario_nrec, 
					dt_atualizacao_nrec, 
					nr_seq_registro, 
					ds_historico, 
					nr_seq_cobr_des_item, 
					nm_pessoa_registro, 
					nm_responsavel, 
					dt_registro) 
				values (nextval('w_cobr_desemp_item_hist_seq'), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nr_seq_vinculo_w, 
					ds_historico_w, 
					nr_seq_item_w, 
					nm_cobrador_w, 
					nm_cobrador_w, 
					dt_registro_w);
			end;
		end loop;
		close C05;
		 
		open C07;
		loop 
		fetch C07 into	 
			nr_seq_vinculo_w, 
			ds_historico_w, 
			dt_registro_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin 
			qt_registro_w	:= qt_registro_w + 1;
 
			insert into w_cobr_desemp_item_hist(nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					nm_usuario_nrec, 
					dt_atualizacao_nrec, 
					nr_seq_atend_evento, 
					ds_historico, 
					nr_seq_cobr_des_item, 
					nm_pessoa_registro, 
					nm_responsavel, 
					dt_registro) 
				values (nextval('w_cobr_desemp_item_hist_seq'), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nr_seq_vinculo_w, 
					ds_historico_w, 
					nr_seq_item_w, 
					nm_cobrador_w, 
					nm_cobrador_w, 
					dt_registro_w);
			end;
		end loop;
		close C07;
	end if;
	 
	update	w_cobr_desempenho_item 
	set	qt_registro		= qt_registro + qt_registro_w, 
		qt_registro_sucesso	= qt_registro_sucesso + qt_registro_sucesso_w 
	where	nr_sequencia		= nr_seq_item_w;
	 
	cd_cgc_ant_w		:= cd_cgc_w;
	cd_pessoa_fisica_ant_w	:= cd_pessoa_fisica_w;	
	vl_cobranca_total_w	:= vl_cobranca_total_w + vl_cobranca_w;
	vl_pago_total_w		:= vl_pago_total_w + vl_pago_w;
	<<final>> 
	nr_seq_historico_w	:= null;
	end;
end loop;
close C03;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_desempenho_cobr_item ( nr_seq_cobranca_p bigint, nr_seq_desempenho_p bigint, cd_pessoa_fisica_p text, cd_cgc_p text, ie_tipo_data_p text, dt_inicial_p timestamp, dt_final_p timestamp, nr_seq_historico_p bigint, nr_seq_grupo_cobr_p bigint, ie_situacao_contrato_p text, nm_usuario_oper_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

