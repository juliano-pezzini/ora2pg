-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_gerar_agenda (cd_pessoa_fisica_p text DEFAULT NULL, result_out_p INOUT text  DEFAULT NULL) AS $body$
DECLARE


    v_existe             bigint;
    nr_sequencia_w       bigint;
    cd_estabelecimento_w estabelecimento.cd_estabelecimento%TYPE := wheb_usuario_pck.get_cd_estabelecimento;

    nm_usuario_w varchar(255) := coalesce(wheb_usuario_pck.get_nm_usuario, 'TASY');
    nr_qtd_dias  bigint := 30;
    dt_agenda_w  timestamp;
	hr_inicio_w timestamp;
    nr_minuto_int_w smallint;
    overlap_w bigint := 0;
	ie_overlap_param_w	varchar(1):='N';
  est RECORD;
  i RECORD;
BEGIN
ie_overlap_param_w := Obter_Param_Usuario(7009, 289, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_overlap_param_w);
result_out_p := null;
    FOR est IN (SELECT ph.cd_estabelecimento,
                       qt_dias_agenda
                  FROM hd_parametro ph
                 WHERE coalesce(cd_estabelecimento_w::text, '') = ''
                    OR ph.cd_estabelecimento = cd_estabelecimento_w) LOOP
        nr_qtd_dias := coalesce(est.qt_dias_agenda,nr_qtd_dias);
        FOR i IN (SELECT ed.cd_pessoa_fisica,
                         edd.nr_sequencia,
                         edd.ie_dia_semana,
                         edd.nr_seq_escala,
                         edd.nr_seq_turno,
                         edd.nr_seq_ponto,
                         prc.cd_convenio,
                         prc.cd_estabelecimento,
                         prc.nr_seq_unid_dialise,
                         ed.dt_fim,
                         edd.dt_fim_escala_dia,
                         ht.dt_inicio            AS dt_inicio_turno,
                         ht.dt_fim               AS dt_fim_turno
                    FROM hd_escala_dialise     ed,
                         hd_escala_dialise_dia edd,
                         hd_pac_renal_cronico  prc,
                         hd_turno              ht,
                         hd_ponto_acesso       hpa
                   WHERE edd.nr_seq_turno = ht.nr_sequencia
                     AND ed.nr_sequencia = edd.nr_seq_escala
                     AND ed.cd_pessoa_fisica = prc.cd_pessoa_fisica
                     AND ht.ie_situacao = 'A'
                     AND (coalesce(cd_pessoa_fisica_p::text, '') = '' OR ed.cd_pessoa_fisica = cd_pessoa_fisica_p)
                     AND clock_timestamp() BETWEEN ed.dt_inicio AND coalesce(ed.dt_fim, clock_timestamp())
                     AND clock_timestamp() BETWEEN edd.dt_inicio_escala_dia AND coalesce(edd.dt_fim_escala_dia, clock_timestamp())
                     AND edd.nr_seq_ponto = hpa.nr_sequencia
                     AND hpa.ie_situacao = 'A'
                     AND coalesce(edd.dt_fim_escala_dia::text, '') = ''
                     AND prc.cd_estabelecimento = est.cd_estabelecimento
                     AND ht.cd_estabelecimento = est.cd_estabelecimento
                   ORDER BY 1 DESC) LOOP

            FOR x IN 0 .. nr_qtd_dias LOOP
                dt_agenda_w := trunc(clock_timestamp() + x);

                IF obter_cod_dia_semana(dt_agenda_w) = i.ie_dia_semana AND
                   dt_agenda_w < trunc(coalesce(least(i.dt_fim, i.dt_fim_escala_dia), clock_timestamp() + nr_qtd_dias)) THEN
				
				   hr_inicio_w:= (to_date(to_char(dt_agenda_w, 'dd/mm/yyyy ') || to_char(i.dt_inicio_turno, 'hh24:mi:ss'),
                       'dd/mm/yyyy hh24:mi:ss'));
                   nr_minuto_int_w:= (((to_char(i.dt_fim_turno, 'SSSSS'))::numeric - (to_char(i.dt_inicio_turno, 'SSSSS'))::numeric )/60);
				
				   select count(*)  overlap_count
                    into STRICT overlap_w
                    from
                    (SELECT nr_sequencia 
                    from agenda_paciente
                    where cd_pessoa_fisica= cd_pessoa_fisica_p
                    and ((hr_inicio_w  between(hr_inicio) and hr_inicio+(NR_MINUTO_DURACAO/24/60) - (1/24/60/60))
                        or (hr_inicio_w + (nr_minuto_int_w/24/60) between (hr_inicio + (1/24/60/60)) and hr_inicio+(NR_MINUTO_DURACAO/24/60))
                        or ((hr_inicio_w  < hr_inicio)
                    AND (hr_inicio_w + (nr_minuto_int_w/24/60) > hr_inicio+(NR_MINUTO_DURACAO/24/60))))
                    and ie_status_agenda NOT IN ('L','F','I','C','B')
                    
union

                    SELECT nr_sequencia 
                    from agenda_consulta
                    where cd_pessoa_fisica= cd_pessoa_fisica_p  
                    and ((hr_inicio_w  between(dt_agenda) and dt_agenda+(NR_MINUTO_DURACAO/24/60) - (1/24/60/60))
                        or (hr_inicio_w + (nr_minuto_int_w/24/60) between (dt_agenda + (1/24/60/60)) and dt_agenda+(NR_MINUTO_DURACAO/24/60))
                        or ((hr_inicio_w < dt_agenda)
                            AND (hr_inicio_w + (nr_minuto_int_w/24/60) > dt_agenda+(NR_MINUTO_DURACAO/24/60))))
                    and ie_status_agenda NOT IN ('L','F','I','C','B')
                    ) alias33;

                   if (overlap_w > 0 and ie_overlap_param_w ='I') then                        
							result_out_p:= result_out_p||' '|| dt_agenda_w;						
                            goto endOfLoop;
                    end if;
					
					if (overlap_w > 0 and ie_overlap_param_w ='A') then
                             result_out_p:= result_out_p||' '|| dt_agenda_w;	
                    end if;
					
                    SELECT COUNT(*)
                      INTO STRICT v_existe
                      FROM hd_agenda_dialise ad
                     WHERE dt_agenda = dt_agenda_w
                       AND cd_pessoa_fisica = i.cd_pessoa_fisica
                       AND ad.nr_seq_turno = i.nr_seq_turno
                       AND ad.ie_situacao in ('A','T');
                    IF v_existe = 0 THEN
                       select nextval('hd_agenda_dialise_seq')
                              into STRICT nr_sequencia_w
;
                        INSERT INTO hd_agenda_dialise(dt_atualizacao,
                             nm_usuario,
                             dt_atualizacao_nrec,
                             nm_usuario_nrec,
                             nr_sequencia,
                             dt_agenda,
                             cd_convenio,
                             nr_seq_dialise_dia,
                             cd_pessoa_fisica,
                             cd_estabelecimento,
                             nr_seq_unidade,
                             nr_seq_ponto_acesso,
                             nr_seq_turno,
                             ie_situacao,
                             ie_tipo_marcacao)
                        VALUES (clock_timestamp(),
                             nm_usuario_w,
                             clock_timestamp(),
                             nm_usuario_w,
                             nr_sequencia_w,
                             trunc(clock_timestamp() + x),
                             i.cd_convenio,
                             i.nr_sequencia,
                             i.cd_pessoa_fisica,
                             i.cd_estabelecimento,
                             i.nr_seq_unid_dialise,
                             i.nr_seq_ponto,
                             i.nr_seq_turno,
                             'A',
                             'A');
                        CALL hd_gerar_agendamento_servico(nr_seq_agenda_dialise_p => nr_sequencia_w);
                    END IF;
                END IF;
				<<endOfLoop>>
				null;
            END LOOP;
        END LOOP;
    END LOOP;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_gerar_agenda (cd_pessoa_fisica_p text DEFAULT NULL, result_out_p INOUT text  DEFAULT NULL) FROM PUBLIC;

