-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intcom_gerar_fornec_cotacao ( cd_cnpj_p text, ds_razao_social_p text, ds_forma_pagamento_p text, ie_frete_p text, vl_fat_minimo_p text, qt_dias_entrega_p text, dt_validade_proposta_p text, nm_usuario_p text, nr_cot_compra_p bigint) AS $body$
DECLARE


cd_estabelecimento_w			smallint;			
cd_cnpj_w				varchar(14);
qt_existe_w				bigint;
cd_moeda_w				integer;
cd_condicao_pagto_w			bigint;
ie_grava_fat_min_obs_w			varchar(1);
ie_grava_dia_entr_obs_w			varchar(1);
ie_grava_val_prop_obs_w			varchar(1);
ie_grava_prazo_ent_xml_w			varchar(1);
ie_grava_id_obs_w				varchar(1);
ie_grava_cond_pag_obs_w			varchar(1);
cd_tipo_pessoa_w				smallint;
cd_cep_w				varchar(15);
sg_estado_w				pessoa_juridica.sg_estado%type;
cd_estab_w				smallint;
nr_seq_classif_w				bigint;
nr_seq_comunic_w				bigint;
cd_perfil_w				varchar(10);
ie_ci_lida_w				varchar(1);
ds_titulo_w				varchar(255);
ds_comunicado_w				varchar(2000);
ds_forma_pagto_fornec_w			varchar(80);
ie_frete_w				varchar(1);
nr_cot_compra_w				bigint;
cd_comprador_padrao_w			varchar(10);
qt_dias_entrega_w				integer;
nm_usuario_destino_w			varchar(15);
nr_documento_externo_w			varchar(30);
ds_obs_fornec_w				varchar(2000);
qt_erro_w				bigint := 0;
ds_erro_w				varchar(2000) := '';
nr_seq_registro_w			bigint;
ds_login_w				varchar(255);
ds_senha_w				varchar(255);
cd_conta_imp_w				varchar(20);

c01 CURSOR FOR
SELECT	cd_estabelecimento
from	estabelecimento
where	ie_situacao = 'A';


BEGIN

nr_cot_compra_w := coalesce(nr_cot_compra_p,0);

select	coalesce(max(nr_cot_compra),0),
	max(nr_documento_externo),
	max(cd_estabelecimento)
into STRICT	nr_cot_compra_w,
	nr_documento_externo_w,
	cd_estabelecimento_w
from	cot_compra
where	nr_cot_compra = nr_cot_compra_w;

if (nr_cot_compra_w > 0) then
	begin

	cd_cnpj_w	:= cd_cnpj_p;

	if (length(cd_cnpj_w) <> 14) then
		cd_cnpj_w := lpad(cd_cnpj_w,14,'0');
	end if;
	
	select	cd_moeda_padrao,
		cd_condicao_pagamento_padrao,
		coalesce(ie_grava_fat_min_obs,'N'),
		coalesce(ie_grava_dia_entr_obs,'N'),
		coalesce(ie_grava_val_prop_obs,'N'),
		coalesce(ie_grava_prazo_ent_xml,'S'),
		coalesce(ie_grava_id_obs,'N'),
		coalesce(ie_grava_cond_pag_obs,'S'),
		coalesce(cd_tipo_pessoa_bionexo,0),
		coalesce(cd_comprador_padrao,'0')
	into STRICT	cd_moeda_w,
		cd_condicao_pagto_w,
		ie_grava_fat_min_obs_w,
		ie_grava_dia_entr_obs_w,
		ie_grava_val_prop_obs_w,
		ie_grava_prazo_ent_xml_w,
		ie_grava_id_obs_w,
		ie_grava_cond_pag_obs_w,
		cd_tipo_pessoa_w,
		cd_comprador_padrao_w
	from	parametro_compras
	where	cd_estabelecimento	= cd_estabelecimento_w;
	
	ds_forma_pagto_fornec_w := '';

	select	max(cd_interno)
	into STRICT	ds_forma_pagto_fornec_w
	from	conversao_meio_externo
	where	upper(nm_tabela) = 'CONDICAO_PAGAMENTO'
	and	upper(nm_atributo) = 'CD_CONDICAO_PAGAMENTO'
	and	ie_sistema_externo = 'B'
	and	cd_externo = ds_forma_pagamento_p;

	select	coalesce(max(cd_condicao_pagamento),cd_condicao_pagto_w)
	into STRICT	cd_condicao_pagto_w
	from	condicao_pagamento
	where	upper(cd_condicao_pagamento) = upper(coalesce(ds_forma_pagto_fornec_w,ds_forma_pagamento_p));

	select	count(*)
	into STRICT	qt_existe_w
	from	pessoa_juridica
	where	cd_cgc		= cd_cnpj_w;
	
	/*Cadastrar pessoa juridica caso nao exista*/

	if (qt_existe_w = 0) and (cd_cnpj_w IS NOT NULL AND cd_cnpj_w::text <> '') then
		begin
		
		select	coalesce(cd_cep,0),
			coalesce(sg_estado,'SP')
		into STRICT	cd_cep_w,
			sg_estado_w
		from	pessoa_juridica
		where	cd_cgc = obter_cgc_estabelecimento(cd_estabelecimento_w);
	
		if (cd_tipo_pessoa_w = 0) then
		
			select	min(cd_tipo_pessoa)
			into STRICT	cd_tipo_pessoa_w
			from	pessoa_juridica
			where	ie_situacao = 'A';
			
		end if;
		
		if (cd_tipo_pessoa_w > 0) then				
			select	cd_conta_imp
			into STRICT	cd_conta_imp_w
			from	tipo_pessoa_juridica
			where	cd_tipo_pessoa = cd_tipo_pessoa_w;			
		end if;
	
		begin
		insert into pessoa_juridica(
			cd_cgc,
			ds_razao_social,
			nm_fantasia,
			cd_cep,
			ds_endereco,
			ds_municipio,
			sg_estado,
			dt_atualizacao,
			nm_usuario,
			cd_tipo_pessoa,
			ie_prod_fabric,
			ie_situacao,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_conta_contabil)
		values (	cd_cnpj_w,
			substr(ds_razao_social_p,1,255),
			substr(ds_razao_social_p,1,255),
			cd_cep_w,
			wheb_mensagem_pck.get_texto(303460),
			wheb_mensagem_pck.get_texto(303460),
			sg_estado_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_tipo_pessoa_w,
			'N',
			'A',
			clock_timestamp(),
			nm_usuario_p,
			cd_conta_imp_w);
		exception
		when others then
			qt_erro_w	:= 1;
			ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(303461) || sqlerrm,1,2000);
		end;
		
		if (qt_erro_w = 0) then	
			
			open C01;
			loop
			fetch C01 into	
				cd_estab_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				
				begin
				insert into pessoa_juridica_estab(
					nr_sequencia,
					cd_cgc,
					cd_estabelecimento,
					dt_atualizacao,
					nm_usuario,
					ie_conta_dif_nf,
					ie_rateio_adiant,
					ie_retem_iss)
				values (	nextval('pessoa_juridica_estab_seq'),
					cd_cnpj_w,
					cd_estab_w,
					clock_timestamp(),
					nm_usuario_p,
					'N',
					'P',
					'N');
				exception
				when others then
					qt_erro_w	:= 1;
					ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(303463) || sqlerrm,1,2000);
				end;
					
				end;
			end loop;
			close C01;
		end if;
		
		if (qt_erro_w = 0) then
		
			select	obter_classif_comunic('F')
			into STRICT	nr_seq_classif_w
			;
			
			select	obter_usuario_pf(cd_comprador_padrao_w)
			into STRICT	nm_usuario_destino_w
			;
			
			ds_titulo_w	:= 	wheb_mensagem_pck.get_texto(303464);
			ds_comunicado_w	:= 	wheb_mensagem_pck.get_texto(303467,'NR_DOCUMENTO_EXTERNO_W='||nr_documento_externo_w||';CD_CNPJ_W='||cd_cnpj_w||';DS_RAZAO_SOCIAL_P='||substr(ds_razao_social_p,1,80));
		
			if (nm_usuario_destino_w IS NOT NULL AND nm_usuario_destino_w::text <> '') then
				
				select	nextval('comunic_interna_seq')
				into STRICT	nr_seq_comunic_w
				;
				
				begin
				insert	into comunic_interna(
					dt_comunicado,
					ds_titulo,
					ds_comunicado,
					nm_usuario,
					dt_atualizacao,	
					ie_geral,
					nm_usuario_destino,
					nr_sequencia,
					ie_gerencial,
					nr_seq_classif,
					dt_liberacao)
				values (	clock_timestamp(),
					ds_titulo_w,
					ds_comunicado_w,
					nm_usuario_p,
					clock_timestamp(),
					'N',
					nm_usuario_destino_w,
					nr_seq_comunic_w,
					'N',
					nr_seq_classif_w,
					clock_timestamp());
				exception
				when others then
					qt_erro_w	:= 1;
					ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(303469) || sqlerrm,1,2000);
				end;
				/*Para que a comunicacao seja gerada como lida ao proprio usuario */

				if (ie_ci_lida_w = 'S') then
					
					begin
					insert into comunic_interna_lida(nr_sequencia,nm_usuario,dt_atualizacao)values (nr_seq_comunic_w,nm_usuario_p,clock_timestamp());
					exception
					when others then
						qt_erro_w	:= 1;
						ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(303470) || sqlerrm,1,2000);
					end;
					
				end if;	
			end if;
		end if;

		if (qt_erro_w = 0) then
			begin
			CALL intcom_gerar_int_cnpj(cd_cnpj_w,cd_estabelecimento_w, nm_usuario_p);
			exception
			when others then
				qt_erro_w	:= 1;
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(303471) || sqlerrm,1,2000);
			end;
		end if;
		end;
	end if;
	/*Termina insert na pessoa juridica*/

		
	if (cd_cnpj_w IS NOT NULL AND cd_cnpj_w::text <> '') and (qt_erro_w = 0) then
		begin
		
		if (upper(ie_frete_p) = 'FOB') then
			ie_frete_w := 'F';
		else
			ie_frete_w := 'C';
		end if;

		if (ie_grava_cond_pag_obs_w = 'S') and (ds_forma_pagamento_p IS NOT NULL AND ds_forma_pagamento_p::text <> '') then
			ds_obs_fornec_w := substr(wheb_mensagem_pck.get_texto(303485,'DS_FORMA_PAGAMENTO_P='||ds_forma_pagamento_p),1,2000);
		end if;	
		
		if (ie_grava_id_obs_w = 'S') and (nr_documento_externo_w IS NOT NULL AND nr_documento_externo_w::text <> '') then		
			ds_obs_fornec_w := substr(ds_obs_fornec_w || 'ID: ' || nr_documento_externo_w || chr(13) || chr(10),1,2000);
		end if;	
		
		if (ie_grava_fat_min_obs_w = 'S') and (vl_fat_minimo_p IS NOT NULL AND vl_fat_minimo_p::text <> '') then
			ds_obs_fornec_w := substr(wheb_mensagem_pck.get_texto(344736,'VL_FAT_MINIMO_P='||vl_fat_minimo_p),1,2000);
		end if;
		
		if (ie_grava_dia_entr_obs_w = 'S') and (qt_dias_entrega_p IS NOT NULL AND qt_dias_entrega_p::text <> '') then
			ds_obs_fornec_w := substr(wheb_mensagem_pck.get_texto(303489,'QT_DIAS_ENTREGA_P='||qt_dias_entrega_p),1,2000);
		end if;
		
		if (ie_grava_val_prop_obs_w = 'S') and (dt_validade_proposta_p IS NOT NULL AND dt_validade_proposta_p::text <> '') then
			ds_obs_fornec_w := substr(wheb_mensagem_pck.get_texto(303492,'DT_VALIDADE_PROPOSTA_P='||dt_validade_proposta_p),1,2000);
		end if;	
		
		if (ie_grava_prazo_ent_xml_w = 'S') then
			begin
			qt_dias_entrega_w := (qt_dias_entrega_p)::numeric;
			exception
			when others then
				qt_dias_entrega_w := null;
			end;
		end if;
		
		begin
		insert	into cot_compra_forn(
			nr_sequencia,
			nr_cot_compra,
			cd_cgc_fornecedor,
			dt_atualizacao,
			nm_usuario,
			ds_observacao,
			cd_moeda,
			cd_condicao_pagamento,
			ie_frete,
			ie_gerado_bionexo,
			ie_status_envio_email_lib,
			qt_dias_entrega)
		values (	nextval('cot_compra_forn_seq'),
			nr_cot_compra_w,
			cd_cnpj_w,
			clock_timestamp(),
			nm_usuario_p,
			ds_obs_fornec_w,
			cd_moeda_w,
			cd_condicao_pagto_w,
			ie_frete_w,
			'X',
			'N',
			qt_dias_entrega_w);
		exception
		when others then
			qt_erro_w	:= 1;
			ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(303472) || sqlerrm,1,2000);
		end;
					
		end;
	end if;
	end;	
end if;

if (qt_erro_w > 0) then
	
	rollback;
	select	nextval('registro_integr_compras_seq')
	into STRICT	nr_seq_registro_w
	;

	select	a.ds_login_integr_compras_ws,
		a.ds_senha_integr_compras_ws
	into STRICT	ds_login_w,
		ds_senha_w
	from	parametro_compras a
	where	a.cd_estabelecimento	= cd_estabelecimento_w;

	insert into registro_integr_compras(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_tipo_operacao)
	values (	nr_seq_registro_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,	
		'WDG');

	insert into registro_integr_com_xml(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_registro,
		ie_status,
		ie_operacao,
		ie_sistema_origem,
		ds_erro,
		ds_retorno,
		ie_tipo_operacao,
		ds_login,
		ds_senha,
		id_pdc)
	values (	nextval('registro_integr_com_xml_seq'),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_registro_w,
		'E',
		'R',
		'TASY',
		ds_erro_w,
		null,
		'WDG',
		ds_login_w,
		ds_senha_w,
		nr_documento_externo_w);
	commit;
	
	CALL wheb_mensagem_pck.exibir_mensagem_abort(182482,'DS_ERRO_P='||DS_ERRO_W);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intcom_gerar_fornec_cotacao ( cd_cnpj_p text, ds_razao_social_p text, ds_forma_pagamento_p text, ie_frete_p text, vl_fat_minimo_p text, qt_dias_entrega_p text, dt_validade_proposta_p text, nm_usuario_p text, nr_cot_compra_p bigint) FROM PUBLIC;

