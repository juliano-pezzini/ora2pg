-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_grafico_prog (nr_seq_prog_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_ref_w		timestamp;
pr_prev_w		double precision;
pr_real_w		double precision;
qt_hora_real_w		double precision;
qt_hora_prev_w		double precision;
pr_agregado_w		double precision;
dt_controle_w  		timestamp;
pr_realizacao_w		double precision;
dt_fim_real_w 		timestamp;
dt_inicio_proj_w 	timestamp := Retorna_Data_Inicio_Fim_Prog(nr_seq_prog_p, 'I');
dt_final_proj_w  	timestamp := Retorna_Data_Inicio_Fim_Prog(nr_seq_prog_p, 'F');
dt_inicio_proj_futuro_w		timestamp;
qt_horas_total_proj_w		double precision;

C01 CURSOR FOR

	SELECT  dt_referencia
	from    (WITH RECURSIVE cte AS (

	SELECT		TRUNC((pkg_date_utils.start_of(dt_inicio_proj_w, 'MONTH')) + (LEVEL - 1)) AS dt_referencia
	
	((pkg_date_utils.start_of(dt_inicio_proj_w, 'MONTH')) + (LEVEL - 1)) < pkg_date_utils.end_of(dt_inicio_proj_futuro_w, 'MONTH')  UNION ALL

	SELECT		TRUNC((pkg_date_utils.start_of(dt_inicio_proj_w, 'MONTH')) + (LEVEL - 1)) AS dt_referencia
	
	((pkg_date_utils.start_of(dt_inicio_proj_w, 'MONTH')) + (LEVEL - 1)) < pkg_date_utils.end_of(dt_inicio_proj_futuro_w, 'MONTH') JOIN cte c ON ()

) SELECT * FROM cte;
) alias9
	where 	dt_referencia between  dt_inicio_proj_w and dt_controle_w;


BEGIN

delete from W_GRAFICO_PROG where nr_seq_prog = nr_seq_prog_p;
commit;


select 	sum(QT_TOTAL_HORAS)
into STRICT	qt_horas_total_proj_w
from 	proj_programa pr,
	proj_projeto p,
	proj_cronograma c
where 	pr.nr_sequencia	= p.nr_seq_programa
and	p.nr_sequencia = c.nr_seq_proj
and	pr.nr_sequencia = nr_seq_prog_p
and 	c.ie_situacao = 'A'
and 	(c.dt_aprovacao IS NOT NULL AND c.dt_aprovacao::text <> '');

select  max(p.pr_realizacao),
	max(c.dt_fim_real)
into STRICT 	pr_realizacao_w,
	dt_fim_real_w
from    proj_programa pr,
	proj_projeto p,
	proj_cronograma c,
	proj_cron_etapa e
where	pr.nr_sequencia = p.nr_seq_programa
and	p.nr_sequencia = c.nr_seq_proj
and     c.nr_sequencia = e.nr_seq_cronograma
and     c.ie_situacao  = 'A'
and 	pr.nr_sequencia = nr_seq_prog_p
and	p.pr_realizacao >= 100
and	(p.dt_aprovacao IS NOT NULL AND p.dt_aprovacao::text <> '')
and  	not exists (SELECT 1 from proj_cron_etapa xx where xx.nr_seq_superior =  e.nr_sequencia);

if (dt_final_proj_w  >= trunc(clock_timestamp()))then
	dt_controle_w := dt_final_proj_w;
elsif (pr_realizacao_w >= 100 and dt_fim_real_w >= dt_final_proj_w)then
	dt_controle_w := dt_fim_real_w;
elsif (pr_realizacao_w >= 100 and dt_fim_real_w < dt_final_proj_w)then /*Se o projeto acabou antes do prazo previsto*/
	dt_controle_w := dt_final_proj_w;
else
	dt_controle_w := trunc(clock_timestamp());
end if;


/*Caso o projeto tenha fim previsto para o "futuro"*/

if (dt_final_proj_w > trunc(clock_timestamp()))then
	dt_inicio_proj_futuro_w := dt_final_proj_w;
else
	dt_inicio_proj_futuro_w := trunc(clock_timestamp());
end if;


open C01;
loop
fetch C01 into
	dt_ref_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin


	qt_hora_real_w	:= OBTER_QT_HRS_RESIDUAIS_PROG(nr_seq_prog_p, dt_ref_w);
	qt_hora_prev_w	:= OBTER_QT_HRS_PREV_PROG(nr_seq_prog_p, dt_ref_w);

	insert into W_GRAFICO_PROG(nr_sequencia,
				nr_seq_prog,
				dt_ref,
				qt_hr_previstas,
				qt_hr_residuais,
				nm_usuario,
				ie_tipo_grafico)
		values (	nextval('w_grafico_prog_seq'),
				nr_seq_prog_p,
				dt_ref_w,
				qt_hora_prev_w,
				qt_hora_real_w,
				nm_usuario_p,
				'B');
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_grafico_prog (nr_seq_prog_p bigint, nm_usuario_p text) FROM PUBLIC;

