-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_regra_associada (nr_atendimento_p bigint, nr_pend_prot_assist_p bigint, nr_seq_protocolo_p bigint, nm_usuario_p text) AS $body$
DECLARE


--Busca as regras para os protocolos assistencias
C010 CURSOR FOR
    SELECT  max(a.nr_seq_regra)                                                             nr_seq_protocolo, 
            rtrim(xmlagg(XMLELEMENT(name e, a.nr_seq_regra_mult||',')).extract('//text()'),',') nr_seq_regra_mult,
            c.ie_tipo_pendencia                                                             ie_tipo_pendencia,
            max(coalesce(a.qt_horas_retroativa, 0))                                              qt_horas_retroativa
    from    gqa_pendencia_regra_mult a,
            gqa_pendencia_regra      b,
            gqa_pendencia            c
    where   b.nr_sequencia = a.nr_seq_regra_mult
    and     c.nr_sequencia = b.nr_seq_pendencia
    and     coalesce(a.ie_situacao,'A') = 'A'
    and     a.nr_seq_regra = nr_seq_protocolo_p 
    and     c.ie_tipo_pendencia <> 6
    and     b.ie_assistencial = 'S'
    group by c.ie_tipo_pendencia
    order by c.ie_tipo_pendencia;


--Percorre a lista como um cursor
C02				REFCURSOR;

nr_seq_protocolo_w              bigint;
ie_tipo_pendencia_w             bigint;
nr_seq_mentor_w                 bigint;	
nr_seq_prot_item_w              bigint;	
qt_horas_retroativa_w           bigint;	

ConvertSplitStrToCursor         varchar(2000);
nr_seq_split_regra_mult_w       varchar(2000);
nr_regras_atendidas_w           varchar(2000);
nr_seq_regra_mult_w             varchar(255);
ie_resultado_w                  varchar(1);

dt_protocolo_assist_w           timestamp;

/*Constante Tipos de regras */

ConstTipoDiagnostico            smallint := 1;
ConstTipoExames                 smallint := 2;
ConstTipoSinalVital             smallint := 3;
ConstTipoEscalaIndice           smallint := 4;
ConstTipoCurativo               smallint := 5;
ConstTipoProtAssist             smallint := 6;
ConstTipoEvento                 smallint := 7;
ConstClassificacaoRisco         smallint := 8;
ConstTipoCIAP					smallint := 9;
ConstDispositivos				smallint := 10;
ConstCalculos					smallint := 11;
ConstLinhaCuidados				smallint := 12;


BEGIN
    dt_protocolo_assist_w := clock_timestamp();

    open C010;
    loop
    fetch C010 into
        nr_seq_protocolo_w,
        nr_seq_split_regra_mult_w,
        ie_tipo_pendencia_w,
        qt_horas_retroativa_w;
    EXIT WHEN NOT FOUND; /* apply on C010 */
        begin

            case ie_tipo_pendencia_w
            
                when ConstTipoDiagnostico then
                    SELECT * FROM GQA_Liberacao_diagnostico(  null,  --Sequencia diagnosticos
                                                nm_usuario_p, nr_seq_mentor_w, nr_regras_atendidas_w, nr_atendimento_p, nr_seq_split_regra_mult_w, qt_horas_retroativa_w) INTO STRICT nr_seq_mentor_w, nr_regras_atendidas_w;

                when ConstTipoExames then                
                    nr_regras_atendidas_w := GQA_Aprov_Exame_result_item(  null,  --Sequencia Exame
                                                  null,  --Sequencia resultado
                                                  nm_usuario_p, nr_regras_atendidas_w, nr_atendimento_p, nr_seq_split_regra_mult_w, qt_horas_retroativa_w);

                when ConstTipoSinalVital then
                    nr_regras_atendidas_w := GQA_Liberacao_Sinal_Vital(  null,  -- Sequencia SV
                                                nm_usuario_p, nr_atendimento_p, nr_seq_split_regra_mult_w, qt_horas_retroativa_w);
                when ConstTipoEscalaIndice then
                     -- Tabela da escala
                                            nr_regras_atendidas_w := GQA_Liberacao_Escala(   nr_atendimento_p, null,  -- Sequencia da escala
                                            nm_usuario_p, null, 
                                            nr_regras_atendidas_w, null,  -- Regra sepse
                                            nr_seq_split_regra_mult_w, qt_horas_retroativa_w);
                when ConstTipoCurativo then
                    nr_regras_atendidas_w := GQA_Liberacao_Curativo( nr_atendimento_p, null,  -- Sequencia do curativo
                                            nm_usuario_p, nr_regras_atendidas_w, nr_seq_split_regra_mult_w, qt_horas_retroativa_w);

                when ConstTipoEvento then
                    nr_regras_atendidas_w := GQA_Liberacao_qua_evento(   null,  -- Sequencia do Evento)
                                                nm_usuario_p, nr_regras_atendidas_w, nr_atendimento_p, nr_seq_split_regra_mult_w, qt_horas_retroativa_w);

                when ConstClassificacaoRisco then
                    nr_regras_atendidas_w := GQA_Classificacao_Risco(    null,   --Sequencia da triagem
                                                nr_atendimento_p, nm_usuario_p, nr_regras_atendidas_w, null,  -- Sequencia do discriminador
                                                nr_seq_split_regra_mult_w, qt_horas_retroativa_w);

                when ConstTipoProtAssist then
                    null;
				when ConstTipoCIAP then
					null;
                when ConstDispositivos then
                    null;
				when ConstCalculos then
					null;
                when ConstLinhaCuidados then
                    null;
            end case;

            nr_regras_atendidas_w := coalesce(nr_regras_atendidas_w, 'XXXXXXX');

            nr_seq_split_regra_mult_w := chr(39) || nr_seq_split_regra_mult_w || chr(39);
            ConvertSplitStrToCursor :=  'select '
                || 'substr( '|| nr_seq_split_regra_mult_w || ', ' 
                ||' decode(level, 1, 1, instr(' || nr_seq_split_regra_mult_w || ', '','', 1, level - 1) + 1), ' 
                ||' decode(instr(' || nr_seq_split_regra_mult_w || ', '','', 1, level), 0, length(' || nr_seq_split_regra_mult_w || '), instr(' || nr_seq_split_regra_mult_w || ', '','', 1, level) -  ' 
                ||'         decode(level, 1, 0, instr(' || nr_seq_split_regra_mult_w || ', '','', 1, level - 1)) - 1) ' 
                ||' ) ' 
                || ' from  dual '
                || ' connect by level <= length(' || nr_seq_split_regra_mult_w || ') - length(replace(' || nr_seq_split_regra_mult_w || ', '','')) + 1';

            open C02 for EXECUTE ConvertSplitStrToCursor;
            loop
            fetch C02 into
                nr_seq_regra_mult_w;
            EXIT WHEN NOT FOUND; /* apply on C02 */
                begin

                    ie_resultado_w := 'N';
                    if position(nr_seq_regra_mult_w in nr_regras_atendidas_w) > 0 then
                        ie_resultado_w := 'S';
                    end if;

                    select  nextval('protocolo_assist_item_seq')
                    into STRICT    nr_seq_prot_item_w
;

                    insert into protocolo_assist_item(nr_sequencia,
                                                       dt_atualizacao,
                                                       nm_usuario,
                                                       nr_seq_regra_gqa,
                                                       ie_resultado,
                                                       nr_seq_protocolo)
                        values (                        nr_seq_prot_item_w,
                                                       dt_protocolo_assist_w,
                                                       nm_usuario_p,
                                                       nr_seq_regra_mult_w,
                                                       ie_resultado_w,
                                                       nr_pend_prot_assist_p);
            
                end;
            end loop;
            close C02;
            commit;

        end;
    end loop;
    close C010;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_regra_associada (nr_atendimento_p bigint, nr_pend_prot_assist_p bigint, nr_seq_protocolo_p bigint, nm_usuario_p text) FROM PUBLIC;

