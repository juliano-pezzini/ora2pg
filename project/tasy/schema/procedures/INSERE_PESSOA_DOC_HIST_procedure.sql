-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE insere_pessoa_doc_hist ( cd_pessoa_fisica_p text, nm_usuario_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


c01 CURSOR FOR
	SELECT	ds_inconsistencia,
		nr_seq_tipo_documentacao,
		nr_sequencia,
		cd_inconsistencia,
		nr_seq_motivo_ndigital,
		substr(obter_descricao_padrao_pk('motivo_nao_digitaliza_doc','ds_motivo', 'nr_sequencia', nr_seq_motivo_ndigital),1,255) ds_motivo,
		CASE WHEN cd_inconsistencia='O' THEN  wheb_mensagem_pck.get_texto(305652) WHEN cd_inconsistencia='A' THEN  wheb_mensagem_pck.get_texto(305654) END  ds_controle
	from	pessoa_fisica_doc_inconsis
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	order by cd_inconsistencia;

c01_w c01%rowtype;

c02 CURSOR FOR
	SELECT	nr_sequencia
	from	pessoa_documentacao
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	and	nr_seq_documento = c01_w.nr_seq_tipo_documentacao;

c02_w c02%rowtype;

ds_historico_w		varchar(4000);


BEGIN
if (coalesce(cd_pessoa_fisica_p,'X') <> 'X') then
	begin
	open c01;
	loop
	fetch c01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		if (c01_w.cd_inconsistencia = 'O') then
			begin
			--ds_retorno_p := 'O documento ''' || c01_w.ds_inconsistencia || ''' é obrigatório!';
			ds_retorno_p := wheb_mensagem_pck.get_texto(305655,'DS_INCONSISTENCIA=' || c01_w.ds_inconsistencia);
			exit;
			end;
		elsif (coalesce(c01_w.nr_seq_motivo_ndigital::text, '') = '') then
			begin
			--ds_retorno_p := 'O motivo para que o documento ''' || c01_w.ds_inconsistencia || ''' não foi digitalizado, não foi informado!';
			ds_retorno_p := wheb_mensagem_pck.get_texto(305656,'DS_INCONSISTENCIA=' || c01_w.ds_inconsistencia);
			exit;
			end;
		end if;

		if (coalesce(ds_retorno_p::text, '') = '') then
			begin
			--ds_historico_w := 	'Documento: ' || c01_w.ds_inconsistencia || ' (' || c01_w.ds_controle || ')' || chr(13) || chr(10) ||
			--			'Motivo: ' || nvl(c01_w.ds_motivo, 'Não informado');
			ds_historico_w := wheb_mensagem_pck.get_texto(305660,	'DS_INCONSISTENCIA=' 	|| c01_w.ds_inconsistencia 	|| ';' ||
										'DS_CONTROLE=' 		|| c01_w.ds_controle 		|| ';' ||
										'DS_MOTIVO=' 		|| coalesce(c01_w.ds_motivo, obter_desc_expressao(327119)/*'Não informado'*/));

			open c02;
			loop
			fetch c02 into
				c02_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				insert into pessoa_doc_hist(
					nr_sequencia,
					nr_seq_documentacao,
					ie_origem,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ds_historico)
				values (	nextval('pessoa_doc_hist_seq'),
					c02_w.nr_sequencia,
					'S',
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					ds_historico_w);
					end;
			end loop;
			close c02;
			commit;
			end;
		end if;
		end;

	end loop;
	close c01;

	commit;
	end;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE insere_pessoa_doc_hist ( cd_pessoa_fisica_p text, nm_usuario_p text, ds_retorno_p INOUT text) FROM PUBLIC;

