-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cus_gerar_w_result_centro ( cd_empresa_p bigint, cd_estab_p bigint, dt_referencia_p timestamp, nr_meses_p bigint, cd_centro_controle_p text, cd_centro_superior_p text, ie_tipo_centro_p text, nr_seq_ng_p text, nr_seq_gng_p text, ie_somente_ativo_p text, ie_valor_zerado_p text, ie_totalizar_centro_p text, ie_relatorio_p bigint, nr_seq_unid_neg_p text, nm_usuario_p text, ie_orcado_real_p text) is type reg_centro is record( cd_estabelecimento bigint, cd_centro_controle bigint, ds_centro_controle varchar(200)) RETURNS varchar AS $body$
DECLARE


ds_opcoes_w					varchar(4000);
ie_gerar_w					varchar(1);
BEGIN
/* Manter o formato  (1,2,3)  */

ds_opcoes_w := upper(ds_opcoes_p);
ds_opcoes_w := replace(ds_opcoes_w, 'NOT', '');
ds_opcoes_w := replace(ds_opcoes_w, '-', '');
ds_opcoes_w := trim(both ds_opcoes_w);

if (nr_valor_filtro_p = 99999) then
	begin
	ie_gerar_w := 'S';
	end;
else
	begin
	ie_gerar_w := obter_se_contido(nr_valor_filtro_p, ds_opcoes_w);

	if (position('-' in coalesce(ds_opcoes_p,'X')) > 0) or (position('NOT' in coalesce(upper(ds_opcoes_p),'X')) > 0) then
		begin
		ie_gerar_w := case ie_gerar_w
				when 'S' then 'N'
				when 'N' then 'S'
				else
				ie_gerar_w
				end;
		end;
	end if;
	end;
end if;

return	ie_gerar_w;

end;

begin

dt_referencia_w		:= pkg_date_utils.start_of(dt_referencia_p,'MONTH',0);
dt_final_w		:= dt_referencia_w;
dt_inicial_w		:= pkg_date_utils.start_of(pkg_date_utils.add_month(dt_referencia_w, - (nr_meses_p - 1), 0),'MONTH',0);
nr_seq_w		:= 0;
nr_seq_unid_neg_w	:= coalesce(nr_seq_unid_neg_p,'0');

delete from w_result_centro_controle
where	nm_usuario	= nm_usuario_p;

commit;


cd_estabelecimento_w := coalesce(cd_estab_p,0);
i		:= 0;
/* Armazena Centros no vetor para performance  Restrições de filtros aqui*/

open C02;
loop
fetch C02 into
	vet02;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	ie_gerar_w		:= 'S';

	if (cd_centro_controle_p IS NOT NULL AND cd_centro_controle_p::text <> '') then
		ie_gerar_w	:= obter_se_filtro_contido(vet02.cd_centro_controle, cd_centro_controle_p);
	end if;

	if (ie_gerar_w = 'S') and (ie_tipo_centro_p IS NOT NULL AND ie_tipo_centro_p::text <> '') then
		ie_gerar_w	:= obter_se_filtro_contido(somente_numero(vet02.ie_tipo_centro_controle), ie_tipo_centro_p);
	end if;

	if (ie_gerar_w = 'S') and (ie_somente_ativo_p = 'S') and (vet02.ie_situacao <> 'A') then
		ie_gerar_w	:= 'N';
	end if;

	if (ie_gerar_w = 'S') and (cd_centro_superior_p IS NOT NULL AND cd_centro_superior_p::text <> '') then
		ie_gerar_w	:= obter_se_filtro_contido(vet02.cd_centro_superior, cd_centro_superior_p);
	end if;

	if (ie_gerar_w = 'S') then
		i	:= i + 1;
		centros_w[i].cd_estabelecimento	:= vet02.cd_estabelecimento;
		centros_w[i].cd_centro_controle	:= vet02.cd_centro_controle;
		centros_w[i].ds_centro_controle	:= vet02.ds_centro_controle;
	end if;

	end;
end loop;
close C02;

/* Inicio da gravaçao dos dados */

for i in 1..centros_w.count loop
	begin
	ie_gerar_w	:= 'S';
	nr_seq_w	:= nr_seq_w + 1;

	cd_centro_controle_w				:= centros_w[i].cd_centro_controle;
	cd_estab_centro_w				:= centros_w[i].cd_estabelecimento;

	valores_w[nr_seq_w].cd_estabelecimento		:= centros_w[i].cd_estabelecimento;
	valores_w[nr_seq_w].cd_centro_controle		:= centros_w[i].cd_centro_controle;
	valores_w[nr_seq_w].ds_classificacao		:= centros_w[i].ds_centro_controle;
	valores_w[nr_seq_w].ie_classif_conta		:= 1;

	/*Gravar quebra de tipo de gasto */

	open C03;
	loop
	fetch C03 into
		vet03;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		for j in 1..12 loop
			begin
			total_w[j].vl_mes := 0;
			end;
		end loop;

		nr_seq_w	:= nr_seq_w + 1;

		valores_w[nr_seq_w].cd_centro_controle	:= centros_w[i].cd_centro_controle;
		valores_w[nr_seq_w].cd_estabelecimento	:= centros_w[i].cd_estabelecimento;
		valores_w[nr_seq_w].ds_classificacao		:= '   ' || vet03.ds_tipo_gasto;
		valores_w[nr_seq_w].ie_tipo_gasto		:= vet03.ie_tipo_gasto;
		valores_w[nr_seq_w].ie_classif_conta		:= 2;

		/*Grupo - Naturezas de gasto e valores */

		nr_seq_superior_w			:= nr_seq_w;

		if (vet03.ie_tipo_gasto = 'R') then
			nr_seq_receita_w	:= nr_seq_w;
		elsif (vet03.ie_tipo_gasto = 'V') then
			nr_seq_var_w		:= nr_seq_w;
		elsif (vet03.ie_tipo_gasto = 'F') then
			nr_seq_fixo_w		:= nr_seq_w;
		end if;

		/* Grupo e natureza de gasto*/

		open C04;
		loop
		fetch C04 into
			vet04;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			ie_gerar_w	:= 'S';
			if (ie_gerar_w = 'S') and (nr_seq_gng_p IS NOT NULL AND nr_seq_gng_p::text <> '') then
				ie_gerar_w	:= obter_se_filtro_contido(vet04.nr_seq_gng, nr_seq_gng_p);
			end if;

			if (ie_gerar_w = 'S') and (nr_seq_ng_p IS NOT NULL AND nr_seq_ng_p::text <> '') then
				ie_gerar_w	:= obter_se_filtro_contido(vet04.nr_seq_ng, nr_seq_ng_p);
			end if;

			if (ie_gerar_w = 'S') then

				nr_seq_w	:= nr_seq_w + 1;
				valores_w[nr_seq_w].cd_centro_controle	:= centros_w[i].cd_centro_controle;
				valores_w[nr_seq_w].cd_estabelecimento	:= centros_w[i].cd_estabelecimento;

				valores_w[nr_seq_w].ie_tipo_gasto		:= vet03.ie_tipo_gasto;
				valores_w[nr_seq_w].nr_seq_gng		:= vet04.nr_seq_gng;
				valores_w[nr_seq_w].ds_classificacao		:= '        ' || vet04.ds_classificacao;
				valores_w[nr_seq_w].ie_classif_conta		:= 3;

				if (ie_relatorio_p = 0) then
					valores_w[nr_seq_w].nr_seq_ng	:= vet04.nr_seq_ng;
				end if;

				valores_w[nr_seq_w].vl_mes01		:= vet04.vl_mes01;
				valores_w[nr_seq_w].vl_mes02		:= vet04.vl_mes02;
				valores_w[nr_seq_w].vl_mes03		:= vet04.vl_mes03;
				valores_w[nr_seq_w].vl_mes04		:= vet04.vl_mes04;
				valores_w[nr_seq_w].vl_mes05		:= vet04.vl_mes05;
				valores_w[nr_seq_w].vl_mes06		:= vet04.vl_mes06;
				valores_w[nr_seq_w].vl_mes07		:= vet04.vl_mes07;
				valores_w[nr_seq_w].vl_mes08		:= vet04.vl_mes08;
				valores_w[nr_seq_w].vl_mes09		:= vet04.vl_mes09;
				valores_w[nr_seq_w].vl_mes10		:= vet04.vl_mes10;
				valores_w[nr_seq_w].vl_mes11		:= vet04.vl_mes11;
				valores_w[nr_seq_w].vl_mes12		:= vet04.vl_mes12;

				total_w[1].vl_mes			:= total_w[1].vl_mes + vet04.vl_mes01;
				total_w[2].vl_mes			:= total_w[2].vl_mes + vet04.vl_mes02;
				total_w[3].vl_mes			:= total_w[3].vl_mes + vet04.vl_mes03;
				total_w[4].vl_mes			:= total_w[4].vl_mes + vet04.vl_mes04;
				total_w[5].vl_mes			:= total_w[5].vl_mes + vet04.vl_mes05;
				total_w[6].vl_mes			:= total_w[6].vl_mes + vet04.vl_mes06;
				total_w[7].vl_mes			:= total_w[7].vl_mes + vet04.vl_mes07;
				total_w[8].vl_mes			:= total_w[8].vl_mes + vet04.vl_mes08;
				total_w[9].vl_mes			:= total_w[9].vl_mes + vet04.vl_mes09;
				total_w[10].vl_mes			:= total_w[10].vl_mes + vet04.vl_mes10;
				total_w[11].vl_mes			:= total_w[11].vl_mes + vet04.vl_mes11;
				total_w[12].vl_mes			:= total_w[12].vl_mes + vet04.vl_mes12;
			end if;
			end;
		end loop;
		close C04;

		/* Classificações totalizadoras */

		if (vet03.ie_tipo_gasto = 'R1') and (nr_seq_receita_w <> 0) and (nr_seq_var_w <> 0) then
			total_w[1].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes01 - valores_w[nr_seq_var_w].vl_mes01;
			total_w[2].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes02 - valores_w[nr_seq_var_w].vl_mes02;
			total_w[3].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes03 - valores_w[nr_seq_var_w].vl_mes03;
			total_w[4].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes04 - valores_w[nr_seq_var_w].vl_mes04;
			total_w[5].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes05 - valores_w[nr_seq_var_w].vl_mes05;
			total_w[6].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes06 - valores_w[nr_seq_var_w].vl_mes06;
			total_w[7].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes07 - valores_w[nr_seq_var_w].vl_mes07;
			total_w[8].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes08 - valores_w[nr_seq_var_w].vl_mes08;
			total_w[9].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes09 - valores_w[nr_seq_var_w].vl_mes09;
			total_w[10].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes10 - valores_w[nr_seq_var_w].vl_mes10;
			total_w[11].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes11 - valores_w[nr_seq_var_w].vl_mes11;
			total_w[12].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes12 - valores_w[nr_seq_var_w].vl_mes12;
		elsif (vet03.ie_tipo_gasto = 'R2') and (nr_seq_var_w <> 0) and (nr_seq_fixo_w <> 0) then
			begin
			total_w[1].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes01,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes01,0);
			total_w[2].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes02,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes02,0);
			total_w[3].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes03,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes03,0);
			total_w[4].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes04,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes04,0);
			total_w[5].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes05,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes05,0);
			total_w[6].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes06,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes06,0);
			total_w[7].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes07,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes07,0);
			total_w[8].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes08,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes08,0);
			total_w[9].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes09,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes09,0);
			total_w[10].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes10,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes10,0);
			total_w[11].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes11,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes11,0);
			total_w[12].vl_mes	:= coalesce(valores_w[nr_seq_var_w].vl_mes12,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes12,0);
			end;

		elsif (vet03.ie_tipo_gasto = 'R3') and (nr_seq_receita_w <> 0) then
			begin
			total_w[1].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes01 - coalesce(valores_w[nr_seq_var_w].vl_mes01,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes01,0);
			total_w[2].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes02 - coalesce(valores_w[nr_seq_var_w].vl_mes02,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes02,0);
			total_w[3].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes03 - coalesce(valores_w[nr_seq_var_w].vl_mes03,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes03,0);
			total_w[4].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes04 - coalesce(valores_w[nr_seq_var_w].vl_mes04,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes04,0);
			total_w[5].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes05 - coalesce(valores_w[nr_seq_var_w].vl_mes05,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes05,0);
			total_w[6].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes06 - coalesce(valores_w[nr_seq_var_w].vl_mes06,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes06,0);
			total_w[7].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes07 - coalesce(valores_w[nr_seq_var_w].vl_mes07,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes07,0);
			total_w[8].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes08 - coalesce(valores_w[nr_seq_var_w].vl_mes08,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes08,0);
			total_w[9].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes09 - coalesce(valores_w[nr_seq_var_w].vl_mes09,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes09,0);
			total_w[10].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes10 - coalesce(valores_w[nr_seq_var_w].vl_mes10,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes10,0);
			total_w[11].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes11 - coalesce(valores_w[nr_seq_var_w].vl_mes11,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes11,0);
			total_w[12].vl_mes	:= valores_w[nr_seq_receita_w].vl_mes12 - coalesce(valores_w[nr_seq_var_w].vl_mes12,0) - coalesce(valores_w[nr_seq_fixo_w].vl_mes12,0);
			end;
		end if;

		if (nr_seq_superior_w <> 0) then
			valores_w[nr_seq_superior_w].vl_mes01		:= total_w[1].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes02		:= total_w[2].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes03		:= total_w[3].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes04		:= total_w[4].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes05		:= total_w[5].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes06		:= total_w[6].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes07		:= total_w[7].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes08		:= total_w[8].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes09		:= total_w[9].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes10		:= total_w[10].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes11		:= total_w[11].vl_mes;
			valores_w[nr_seq_superior_w].vl_mes12		:= total_w[12].vl_mes;
		end if;

		end;
	end loop;
	close C03;

	end;
end loop; /*End FOR Centros de controle*/
/* Grava os dados na tabela*/

for i in 1..valores_w.count loop
	begin
	ie_gerar_w	:= 'S';
	vl_total_w	:= valores_w[i].vl_mes01 + valores_w[i].vl_mes02 + valores_w[i].vl_mes03 + valores_w[i].vl_mes04 +
			   valores_w[i].vl_mes05 + valores_w[i].vl_mes06 + valores_w[i].vl_mes07 + valores_w[i].vl_mes08 +
			   valores_w[i].vl_mes09 + valores_w[i].vl_mes10 + valores_w[i].vl_mes11 + valores_w[i].vl_mes12;

	vl_media_w	:= dividir(vl_total_w,nr_meses_p);

	qt_registro_w	:= qt_registro_w + 1;

	if (ie_valor_zerado_p = 'S') and (coalesce(vl_total_w,0) = 0) then
		ie_gerar_w	:= 'N';
	end if;

	if (ie_gerar_w = 'S') then

		insert into w_result_centro_controle(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_estabelecimento,
			cd_centro_controle,
			ds_classificacao,
			nr_seq_ng,
			ie_tipo_gasto,
			nr_seq_gng,
			ie_classif_conta,
			vl_mes01,
			vl_mes02,
			vl_mes03,
			vl_mes04,
			vl_mes05,
			vl_mes06,
			vl_mes07,
			vl_mes08,
			vl_mes09,
			vl_mes10,
			vl_mes11,
			vl_mes12,
			vl_media,
			vl_total)
		values ( nextval('w_result_centro_controle_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			valores_w[i].cd_estabelecimento,
			valores_w[i].cd_centro_controle,
			valores_w[i].ds_classificacao,
			valores_w[i].nr_seq_ng,
			valores_w[i].ie_tipo_gasto,
			valores_w[i].nr_seq_gng,
			valores_w[i].ie_classif_conta,
			valores_w[i].vl_mes01,
			valores_w[i].vl_mes02,
			valores_w[i].vl_mes03,
			valores_w[i].vl_mes04,
			valores_w[i].vl_mes05,
			valores_w[i].vl_mes06,
			valores_w[i].vl_mes07,
			valores_w[i].vl_mes08,
			valores_w[i].vl_mes09,
			valores_w[i].vl_mes10,
			valores_w[i].vl_mes11,
			valores_w[i].vl_mes12,
			vl_media_w,
			vl_total_w);
	end if;
	if (qt_registro_w >= 100) then
		qt_registro_w	:= 0;
		commit;
	end if;
	end;
end loop;

if (ie_totalizar_centro_p = 'S') then

	open C05;
	loop
	fetch C05 into
		vet05;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin

		insert into w_result_centro_controle(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_estabelecimento,
			cd_centro_controle,
			ds_classificacao,
			nr_seq_ng,
			ie_tipo_gasto,
			nr_seq_gng,
			ie_classif_conta,
			vl_mes01,
			vl_mes02,
			vl_mes03,
			vl_mes04,
			vl_mes05,
			vl_mes06,
			vl_mes07,
			vl_mes08,
			vl_mes09,
			vl_mes10,
			vl_mes11,
			vl_mes12,
			vl_media,
			vl_total)
		values (	nextval('w_result_centro_controle_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			vet05.cd_estabelecimento,
			vet05.cd_centro_controle,
			vet05.ds_classificacao,
			vet05.nr_seq_ng,
			vet05.ie_tipo_gasto,
			vet05.nr_seq_gng,
			vet05.ie_classif_conta,
			vet05.vl_mes01,
			vet05.vl_mes02,
			vet05.vl_mes03,
			vet05.vl_mes04,
			vet05.vl_mes05,
			vet05.vl_mes06,
			vet05.vl_mes07,
			vet05.vl_mes08,
			vet05.vl_mes09,
			vet05.vl_mes10,
			vet05.vl_mes11,
			vet05.vl_mes12,
			vet05.vl_media,
			vet05.vl_total);
		end;
	end loop;
	close C05;

	if (coalesce(cd_centro_controle_p,'X') <> 'X') then
		ie_gerar_w	:= obter_se_filtro_contido(99999,cd_centro_controle_p);
	end if;

	if (ie_gerar_w = 'S') then
		delete from w_result_centro_controle
		where	nm_usuario	= nm_usuario_p
		and	cd_centro_controle <> 99999;
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cus_gerar_w_result_centro ( cd_empresa_p bigint, cd_estab_p bigint, dt_referencia_p timestamp, nr_meses_p bigint, cd_centro_controle_p text, cd_centro_superior_p text, ie_tipo_centro_p text, nr_seq_ng_p text, nr_seq_gng_p text, ie_somente_ativo_p text, ie_valor_zerado_p text, ie_totalizar_centro_p text, ie_relatorio_p bigint, nr_seq_unid_neg_p text, nm_usuario_p text, ie_orcado_real_p text) is type reg_centro is record( cd_estabelecimento bigint, cd_centro_controle bigint, ds_centro_controle varchar(200)) FROM PUBLIC;

