-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_atend_teleconsulta ( nr_seq_agenda_p bigint, ds_erro_p INOUT text, ds_alerta_p INOUT text) AS $body$
DECLARE



nr_atendimento_w			agenda_consulta.nr_atendimento%type;
cd_pessoa_fisica_w			agenda_consulta.cd_pessoa_fisica%type;
IE_CLASSIF_AGENDA_w			agenda_consulta.IE_CLASSIF_AGENDA%type;
CD_PROCEDENCIA_w			agenda_consulta.CD_PROCEDENCIA%type;
CD_MEDICO_REQ_w				agenda_consulta.CD_MEDICO_REQ%type;
CD_CONVENIO_w				agenda_consulta.CD_CONVENIO%type;
CD_CATEGORIA_w				agenda_consulta.CD_CATEGORIA%type;
CD_PLANO_w					agenda_consulta.CD_PLANO%type;
NR_SEQ_COBERTURA_w			agenda_consulta.NR_SEQ_COBERTURA%type;	
CD_USUARIO_CONVENIO_w		agenda_consulta.CD_USUARIO_CONVENIO%type;
DT_VALIDADE_CARTEIRA_w		agenda_consulta.DT_VALIDADE_CARTEIRA%type;
NR_DOC_CONVENIO_w			agenda_consulta.NR_DOC_CONVENIO%type;
CD_TIPO_ACOMODACAO_w		agenda_consulta.CD_TIPO_ACOMODACAO%type;
NR_SEQ_SALA_w				agenda_consulta.NR_SEQ_SALA%type;
CD_SETOR_ATENDIMENTO_w		agenda_consulta.CD_SETOR_ATENDIMENTO%type;
CD_EMPRESA_REF_w			agenda_consulta.CD_EMPRESA_REF%type;
dt_entrada_w				timestamp;
nm_usuario_w				agenda_consulta.nm_usuario%type;

nr_seq_atepaco_w			atend_categoria_convenio.nr_seq_interno%type;
ie_tipo_convenio_w			atendimento_paciente.ie_tipo_convenio%type;

nr_seq_atepacu_w			unidade_atendimento.nr_seq_interno%type;
cd_unid_basica_w			unidade_atendimento.cd_unidade_basica%type;
cd_unid_compl_w				unidade_atendimento.cd_unidade_compl%type;


ie_tipo_atendimento_w		agenda_classif.ie_tipo_atendimento%type;
ie_clinica_w				agenda_classif.ie_clinica%type;

sqlerrm_w					varchar(4000);

ds_erro_w					varchar(4000);
ds_alerta_w					varchar(4000);



BEGIN

if ( nr_seq_agenda_p > 0 ) then


	Select 	max(nr_atendimento),
			max(cd_pessoa_fisica),
			max(IE_CLASSIF_AGENDA),
			max(CD_PROCEDENCIA),
			max(CD_MEDICO_REQ),
			max(CD_CONVENIO),
			max(CD_CATEGORIA),
			max(CD_PLANO),
			max(NR_SEQ_COBERTURA),
			max(CD_USUARIO_CONVENIO),
			max(DT_VALIDADE_CARTEIRA),
			max(NR_DOC_CONVENIO),
			max(CD_TIPO_ACOMODACAO),
			max(NR_SEQ_SALA),
			max(CD_SETOR_ATENDIMENTO),
			max(CD_EMPRESA_REF)
	into STRICT	nr_atendimento_w,		
	        cd_pessoa_fisica_w,		
	        IE_CLASSIF_AGENDA_w,		
	        CD_PROCEDENCIA_w,		
	        CD_MEDICO_REQ_w	,		
	        CD_CONVENIO_w,			
	        CD_CATEGORIA_w	,		
	        CD_PLANO_w	,			
	        NR_SEQ_COBERTURA_w,		
	        CD_USUARIO_CONVENIO_w,	
	        DT_VALIDADE_CARTEIRA_w,	
	        NR_DOC_CONVENIO_w,		
	        CD_TIPO_ACOMODACAO_w,	
	        NR_SEQ_SALA_w,			
	        CD_SETOR_ATENDIMENTO_w,	
			CD_EMPRESA_REF_w			
	from    agenda_consulta
	where   nr_Sequencia = nr_seq_agenda_p;


	if ( coalesce(nr_atendimento_w::text, '') = '' and (IE_CLASSIF_AGENDA_w IS NOT NULL AND IE_CLASSIF_AGENDA_w::text <> '') ) then
	
		sELECT  max(ie_tipo_atendimento),
				max(ie_clinica)
		into STRICT	ie_tipo_atendimento_w,
				ie_clinica_w
		FROM    agenda_classif 
		WHERE   cd_classificacao = IE_CLASSIF_AGENDA_w;
		
		
		if ( coalesce(cd_procedencia_w::text, '') = '' or coalesce(ie_tipo_atendimento_w::text, '') = '' or coalesce(CD_MEDICO_REQ_w::text, '') = '') then		
		
			ds_erro_w := Wheb_mensagem_pck.get_texto(1213841);
		
		else
		
			select	nextval('atendimento_paciente_seq')
			into STRICT	nr_atendimento_w
			;
			
			dt_entrada_w := clock_timestamp();
			nm_usuario_w := wheb_usuario_pck.get_nm_usuario;
			
			if (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then
			
				Select 	Obter_Tipo_Convenio(cd_convenio_w)
				into STRICT	ie_tipo_convenio_w
				;
			
			end if;
			
			begin
			
			insert into atendimento_paciente(	nr_atendimento,
								cd_pessoa_fisica,
								cd_estabelecimento,
								cd_procedencia,
								dt_entrada,
								ie_tipo_atendimento,
								dt_atualizacao,
								nm_usuario,
								cd_medico_resp,
								ie_tipo_convenio,
								ie_permite_visita,
								cd_medico_referido,
								ie_clinica)
						values (	nr_atendimento_w,
								cd_pessoa_fisica_w,
								wheb_usuario_pck.get_cd_estabelecimento,
								cd_procedencia_w,
								dt_entrada_w,
								ie_tipo_atendimento_w,
								clock_timestamp(),
								nm_usuario_w,
								CD_MEDICO_REQ_w,
								ie_tipo_convenio_w,
								'S',
								CD_MEDICO_REQ_w,
								ie_clinica_w );
								
								
								
			commit;
			
			exception
			when others then
				sqlerrm_w := sqlerrm;
				ds_erro_w := substr(Wheb_mensagem_pck.get_texto(1213842)||chr(13)||chr(13)||sqlerrm_w,1,4000);
			end;
			
			
			if (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '' AND cd_categoria_w IS NOT NULL AND cd_categoria_w::text <> '') then
			
				select	nextval('atend_categoria_convenio_seq')
				into STRICT	nr_seq_atepaco_w
				;
				
				begin

					insert	into atend_categoria_convenio(	nr_seq_interno,
										nr_atendimento,
										cd_convenio,
										cd_categoria,
										dt_inicio_vigencia,
										dt_final_vigencia,
										dt_atualizacao,
										cd_usuario_convenio,
										nm_usuario,
										cd_tipo_acomodacao,
										dt_validade_carteira,
										cd_plano_convenio,
										cd_empresa)
							values (	nr_seq_atepaco_w,
										nr_atendimento_w,
										cd_convenio_w,
										cd_categoria_w,
										dt_entrada_w,
										null,
										clock_timestamp(),
										CD_USUARIO_CONVENIO_w,
										nm_usuario_w,
										cd_tipo_acomodacao_w,
										DT_VALIDADE_CARTEIRA_w,
										CD_PLANO_w,
										CD_EMPRESA_REF_w);
										
					commit;
				
				exception
				when others then
					sqlerrm_w := sqlerrm;
					ds_alerta_w := substr(Wheb_mensagem_pck.get_texto(1213843)||chr(13)||chr(13)||sqlerrm_w,1,4000);
				end;
				
				if (CD_SETOR_ATENDIMENTO_w IS NOT NULL AND CD_SETOR_ATENDIMENTO_w::text <> '' AND CD_TIPO_ACOMODACAO_w IS NOT NULL AND CD_TIPO_ACOMODACAO_w::text <> '') then
				
						Select  max(d.cd_unidade_basica),
								max(d.cd_unidade_compl)
						into STRICT	cd_unid_basica_w,
								cd_unid_compl_w
						 from   unidade_atendimento d
						 where  d.nr_seq_interno = ( SELECT	max(b.nr_seq_interno)
													from	setor_atendimento c,
															unidade_atendimento b
													where 	b.cd_setor_atendimento     	= c.cd_setor_atendimento
													and	    b.ie_situacao              	= 'A'
													and	    b.ie_status_unidade 		= 'L'
													and     b.CD_TIPO_ACOMODACAO        = CD_TIPO_ACOMODACAO_w
													and	    c.cd_setor_atendimento 	    = CD_SETOR_ATENDIMENTO_w);
						
						
						if (cd_unid_basica_w IS NOT NULL AND cd_unid_basica_w::text <> '') then
						
							select	nextval('atend_paciente_unidade_seq')
							into STRICT	nr_seq_atepacu_w
							;

							begin
								insert into atend_paciente_unidade(	nr_atendimento,
													nr_sequencia,
													cd_setor_atendimento,
													cd_unidade_basica,
													cd_unidade_compl,
													dt_entrada_unidade,
													dt_atualizacao,
													nm_usuario,
													cd_tipo_acomodacao,
													dt_saida_interno,
													nr_seq_interno)
										values (	nr_atendimento_w,
													1,
													CD_SETOR_ATENDIMENTO_w,
													cd_unid_basica_w,
													coalesce(cd_unid_compl_w,' '),
													clock_timestamp(),
													clock_timestamp(),
													nm_usuario_w,
													CD_TIPO_ACOMODACAO_w,
													clock_timestamp(),
													nr_seq_atepacu_w
													);

								commit;
							
							exception
							when others then
								sqlerrm_w := sqlerrm;
								ds_alerta_w := substr(Wheb_mensagem_pck.get_texto(1213846)||chr(13)||chr(13)||sqlerrm_w,1,4000);
							end;
				
						end if;
				
				end if;
				
			
			end if;
			
			begin	
			
				update 	agenda_consulta
				set		nr_Atendimento = nr_atendimento_w
				where   nr_sequencia = nr_seq_agenda_p;
				
				commit;
			
			exception
			when others then
				sqlerrm_w := sqlerrm;
				ds_erro_w := substr(Wheb_mensagem_pck.get_texto(1213847)|| to_char(nr_atendimento_w)||chr(13)||chr(13)||sqlerrm_w,1,4000);
			end;

	
		end if;	
	
	end if;

end if;

ds_erro_p := ds_erro_w;
ds_alerta_p := ds_alerta_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_atend_teleconsulta ( nr_seq_agenda_p bigint, ds_erro_p INOUT text, ds_alerta_p INOUT text) FROM PUBLIC;

