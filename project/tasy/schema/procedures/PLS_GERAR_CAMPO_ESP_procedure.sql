-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_campo_esp ( nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint) AS $body$
DECLARE



cd_area_procedimento_w		bigint := 0;
cd_especialidade_w		bigint := 0;
cd_grupo_proc_w			bigint := 0;
cd_procedimento_w		bigint := 0;
ie_origem_proced_w		bigint;
ie_tipo_guia_w			varchar(2);
nr_seq_prestador_exec_w		bigint;
nr_seq_prestador_prot_w		bigint;
nr_seq_prestador_prot_imp_w	varchar(20);
nr_seq_prestador_exec_imp_w	varchar(20);
nr_seq_regra_w			bigint;
ds_campo_w			varchar(255);
ds_anterior_w			varchar(100);
ds_posterior_w			varchar(100);
ie_campo_w			varchar(10);
ds_procedimento_w		varchar(255);
nr_seq_apresentacao_w		bigint;
nr_seq_setor_atend_w		bigint;
ds_valor_w			varchar(255);
ds_valor_segundo_w		varchar(255);
nm_prestador_imp_w		varchar(255);
cd_cgc_prestador_prot_imp_w	varchar(14);
nr_cpf_prestador_prot_imp_w	varchar(11);

cd_estabelecimento_w		bigint;
cd_cpf_executor_imp_w		varchar(11);
cd_cgc_executor_imp_w		varchar(14);
nr_crm_prest_solic_imp_w	pls_conta.nr_crm_prest_solic_imp%type;
sg_cons_prest_solic_imp_w	varchar(20);
uf_crm_prest_solic_imp_w	varchar(2);
nr_seq_fornecedor_mat_w		bigint;
ds_valor_campo_w		varchar(255);
ds_valor_campo_ww		varchar(255);
ds_material_w			varchar(255);
qt_caracteres_w			bigint;
cd_prestador_prot_w		varchar(30);
cd_prestador_exec_w		varchar(30);
cd_setor_atendimento_w		varchar(10);
cd_setor_atendimento_ww		varchar(10);
ie_codigo_fornecedor_w		varchar(10);
teste_w				bigint;
cd_fornecedor_mat_w		varchar(255);
vl_conversao_fornec_w		varchar(255);
cd_sequencial_prestador_w	varchar(50);
nr_seq_prestador_aux_w		pls_protocolo_conta.nr_seq_prestador%type;
dt_protocolo_w			pls_protocolo_conta.dt_protocolo%type;
dt_atendimento_referencia_w	pls_conta.dt_atendimento_referencia%type;
/*
Diego 27/05/2011 - OS 319313

Esta rotina tem a finalidade de , durante a importação de arquivos xml de contas médicas, verificar se existe regras quanto a importação
de campos especiais que não existem no schema TISS.

Isto é realizado embutindo o valor do campo, não existente no TISS, em um campo existente demarcando o valor com caracteres especiais como # ou @.

Na idéia original, por exemplo, iria ser embutido o setor do atendimento de um procedimento na descrição do mesmo sendo utilizado o caracter # para demarcação do inicio e fim.

*/
C01 CURSOR FOR
	SELECT	/*+ USE_CONCAT*/		nr_sequencia,
		ds_campo
	from	pls_xml_regra_campo_esp
	where	ie_situacao = 'A'
	and	((coalesce(ie_tipo_processo::text, '') = '') or (ie_tipo_processo 		= 'E'))
	and	((coalesce(cd_area_procedimento::text, '') = '') or (cd_area_procedimento	= cd_area_procedimento_w))
	and	((coalesce(cd_especialidade::text, '') = '') or (cd_especialidade 		= cd_especialidade_w))
	and	((coalesce(cd_grupo_proc::text, '') = '') or (cd_grupo_proc 		= cd_grupo_proc_w))
	and	((cd_procedimento 	= cd_procedimento_w AND ie_origem_proced 	= ie_origem_proced_w) or (coalesce(cd_procedimento::text, '') = ''))
	and	((coalesce(ie_tipo_guia::text, '') = '') or (ie_tipo_guia 		= ie_tipo_guia_w))
	and	((coalesce(nr_seq_prestador_exec::text, '') = '') or (nr_seq_prestador_exec 	= nr_seq_prestador_exec_w))
	and	((coalesce(nr_seq_prestador_prot::text, '') = '') or ( nr_seq_prestador_prot 	= nr_seq_prestador_prot_imp_w))
	and	((coalesce(cd_prestador_exec::text, '') = '') or (cd_prestador_exec 		= coalesce(cd_prestador_exec_w,'0')))
	and	((coalesce(cd_prestador_prot::text, '') = '') or (cd_prestador_prot 		= coalesce(cd_prestador_prot_w,'0')))
	order by  coalesce(ie_tipo_guia,0),
		 coalesce(nr_seq_prestador_exec,0),
		 coalesce(nr_seq_prestador_prot,0),
		 coalesce(cd_area_procedimento,0),
		 coalesce(cd_especialidade,0),
		 coalesce(cd_grupo_proc,0),
		 coalesce(cd_procedimento,0);

C02 CURSOR FOR
	SELECT	ds_anterior,
		ds_posterior,
		ie_campo,
		nr_seq_apresentacao,
		qt_caracteres
	from	pls_xml_regra_esp_compl
	where	nr_seq_regra = nr_seq_regra_w
	order by nr_seq_apresentacao;
BEGIN

if (coalesce(nr_seq_conta_proc_p,0) > 0) then

	select	a.cd_procedimento,
		a.ie_origem_proced,
		a.ds_procedimento_imp,
		b.ie_tipo_guia,
		b.cd_cpf_executor_imp,
		b.cd_cgc_executor_imp,
		b.nr_seq_prestador_exec_imp,
		elimina_caractere_especial(b.nr_crm_prest_solic_imp),
		b.sg_cons_prest_solic_imp,
		b.uf_crm_prest_solic_imp,
		c.cd_estabelecimento,
		c.nm_prestador_imp,
		c.cd_cgc_prestador_imp,
		c.nr_cpf_prestador_imp,
		substr(c.nr_seq_prestador_imp,1,10)
	into STRICT	cd_procedimento_w,
		ie_origem_proced_w,
		ds_procedimento_w,
		ie_tipo_guia_w,
		cd_cpf_executor_imp_w,
		cd_cgc_executor_imp_w,
		nr_seq_prestador_exec_imp_w,
		nr_crm_prest_solic_imp_w,
		sg_cons_prest_solic_imp_w,
		uf_crm_prest_solic_imp_w,
		cd_estabelecimento_w,
		nm_prestador_imp_w,
		cd_cgc_prestador_prot_imp_w,
		nr_cpf_prestador_prot_imp_w,
		nr_seq_prestador_prot_imp_w
	from	pls_conta_proc 		a,
		pls_conta 		b,
		pls_protocolo_conta 	c
	where	a.nr_seq_conta 		= b.nr_sequencia
	and	b.nr_seq_protocolo 	= c.nr_sequencia
	and	a.nr_sequencia		= nr_seq_conta_proc_p;

	SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w;

elsif (coalesce(nr_seq_conta_mat_p,0) > 0) then

	begin
	select	b.ie_tipo_guia,
		b.cd_cpf_executor_imp,
		b.cd_cgc_executor_imp,
		b.nr_seq_prestador_exec_imp,
		b.nr_crm_prest_solic_imp,
		b.sg_cons_prest_solic_imp,
		b.uf_crm_prest_solic_imp,
		c.cd_estabelecimento,
		c.nm_prestador_imp,
		c.cd_cgc_prestador_imp,
		c.nr_cpf_prestador_imp,
		substr(c.nr_seq_prestador_imp,1,10),
		ds_material_imp,
		c.dt_protocolo,
		b.dt_atendimento_referencia
	into STRICT	ie_tipo_guia_w,
		cd_cpf_executor_imp_w,
		cd_cgc_executor_imp_w,
		nr_seq_prestador_exec_imp_w,
		nr_crm_prest_solic_imp_w,
		sg_cons_prest_solic_imp_w,
		uf_crm_prest_solic_imp_w,
		cd_estabelecimento_w,
		nm_prestador_imp_w,
		cd_cgc_prestador_prot_imp_w,
		nr_cpf_prestador_prot_imp_w,
		nr_seq_prestador_prot_imp_w,
		ds_material_w,
		dt_protocolo_w,
		dt_atendimento_referencia_w
	from	pls_protocolo_conta c,
		pls_conta b,
		pls_conta_mat a
	where	a.nr_seq_conta 		= b.nr_sequencia
	and	b.nr_seq_protocolo 	= c.nr_sequencia
	and	a.nr_sequencia		= nr_seq_conta_mat_p;
	exception
	when others then
		null;
	end;
end if;

/* Obter os prestadores do protocolo */

if (cd_cgc_prestador_prot_imp_w IS NOT NULL AND cd_cgc_prestador_prot_imp_w::text <> '') then
	nr_seq_prestador_aux_w	:= pls_obter_prestador_cgc(	cd_cgc_prestador_prot_imp_w,null);

	if (nr_seq_prestador_aux_w IS NOT NULL AND nr_seq_prestador_aux_w::text <> '') then
		nr_seq_prestador_prot_imp_w	:= nr_seq_prestador_aux_w;
	end if;
end if;

if (coalesce(nr_seq_prestador_prot_imp_w::text, '') = '') then
	nr_seq_prestador_prot_imp_w	:= pls_obter_prestador_imp(cd_cgc_prestador_prot_imp_w, nr_cpf_prestador_prot_imp_w, nr_seq_prestador_prot_imp_w, null, null, null, 'C', null, dt_protocolo_w);
end if;

/* Obter os dados do prestador executor da conta*/

if (cd_cgc_executor_imp_w IS NOT NULL AND cd_cgc_executor_imp_w::text <> '') then
	nr_seq_prestador_aux_w	:= pls_obter_prestador_cgc(	cd_cgc_executor_imp_w,null);

	if (nr_seq_prestador_aux_w IS NOT NULL AND nr_seq_prestador_aux_w::text <> '') then
		nr_seq_prestador_exec_w	:= nr_seq_prestador_aux_w;
	end if;
end if;

if (coalesce(nr_seq_prestador_exec_w::text, '') = '') then
	nr_seq_prestador_exec_w		:= pls_obter_prestador_imp(cd_cgc_executor_imp_w, cd_cpf_executor_imp_w, nr_seq_prestador_exec_imp_w,
								nr_crm_prest_solic_imp_w, sg_cons_prest_solic_imp_w, uf_crm_prest_solic_imp_w, 'C', null, dt_atendimento_referencia_w);
end if;

begin
	select	cd_prestador
	into STRICT	cd_prestador_prot_w
	from	pls_prestador
	where	nr_sequencia	= nr_seq_prestador_prot_imp_w;
exception
	when others then
	cd_prestador_prot_w	:= null;
end;

begin
	select	cd_prestador
	into STRICT	cd_prestador_exec_w
	from	pls_prestador
	where	nr_sequencia	= nr_seq_prestador_exec_w;
exception
	when others then
	cd_prestador_exec_w	:= null;
end;

/*Cursor que obtem a regra mais restritiva do cadastro de regres existente na função OPS - Cadastro de Regras > Contas Médicas > Regras especiais para importação do XML*/

open C01;
loop
fetch C01 into
	nr_seq_regra_w,
	ds_campo_w; 	/*Campo existente no TISS que ira possuir tanto o valor correpondente ao campo quanto do campo não existente no TISS*/
EXIT WHEN NOT FOUND; /* apply on C01 */
end loop;
close C01;

/*Cursor que verifica quais os caracteres de inicio e fim vai delimitar o valor do campo não existente no TISS e a qual campo este valor é referente*/

open C02;
loop
fetch C02 into
	ds_anterior_w,
	ds_posterior_w,
	ie_campo_w,
	nr_seq_apresentacao_w,
	qt_caracteres_w;    /*Campo não existente no TISS ao qual o valor é referente*/
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin

	/*Valor enviado junto ao ds_procedimento_imp*/

	if (ds_campo_w in ('DS_PROCEDIMENTO','DS_MATERIAL')) then

		if (ds_campo_w = 'DS_PROCEDIMENTO') then
			ds_valor_campo_w := ds_procedimento_w;
		elsif (ds_campo_w = 'DS_MATERIAL') then
			ds_valor_campo_w := ds_material_w;
		end if;
		ds_valor_campo_ww	:= ds_valor_campo_w;
		if (coalesce(ds_valor_campo_w,'X') <> 'X') then
			/*Verificado caracter por caracter até achar o primeiro caracter que representa o inicio do valor
			    Como esta ordenado por sequencia de apresentação, e é retirada cada novo valor encontrado referente a um campo, não sera necessário a consitência de que parte se esta verificando*/
			for i in 1..(length(ds_valor_campo_w)-1) loop
				begin

				/*Verifica se é o caracter do inicio*/

				if (substr(ds_valor_campo_w,i,1) = ds_anterior_w) then

					ds_valor_campo_ww := substr(ds_valor_campo_ww, position(ds_anterior_w in ds_valor_campo_ww)+1,255);
					teste_w	 := length(ds_valor_campo_ww);

					if (ie_campo_w = 'S') then
						if (coalesce(qt_caracteres_w,0) <> 0) and (qt_caracteres_w	= length(ds_valor_campo_ww)) then
							ds_valor_segundo_w	  := substr(ds_valor_campo_ww,1,qt_caracteres_w);
						end if;
						if (ds_posterior_w IS NOT NULL AND ds_posterior_w::text <> '') and (coalesce(ds_valor_segundo_w::text, '') = '') and (position(ds_anterior_w in ds_valor_campo_w) <> 0)  then
							ds_valor_segundo_w 	  := substr(ds_valor_campo_ww,1,position(ds_posterior_w in ds_valor_campo_ww||'#')-1);
						end if;
					end if;

					if (ie_campo_w = 'F') then
						if (coalesce(qt_caracteres_w,0) <> 0) and (qt_caracteres_w	= length(ds_valor_campo_ww)) then
							ds_valor_w	  := substr(ds_valor_campo_ww,1,qt_caracteres_w);
						end if;

						if (ds_posterior_w IS NOT NULL AND ds_posterior_w::text <> '') and (coalesce(ds_valor_w::text, '') = '') and (position(ds_anterior_w in ds_valor_campo_w) <> 0) then
							ds_valor_w 	  := substr(ds_valor_campo_ww,1,position(ds_posterior_w in ds_valor_campo_ww||'#')-1);
						end if;
					end if;

					if (ie_campo_w = 'SP') then
						if (coalesce(qt_caracteres_w,0) <> 0) and (qt_caracteres_w	= length(ds_valor_campo_ww)) then
							cd_sequencial_prestador_w :=  substr(ds_valor_campo_ww,1,qt_caracteres_w);
						end if;

						if (ds_posterior_w IS NOT NULL AND ds_posterior_w::text <> '') and (coalesce(cd_sequencial_prestador_w::text, '') = '') and (position(ds_anterior_w in ds_valor_campo_w) <> 0) then
							cd_sequencial_prestador_w 	  := substr(ds_valor_campo_ww,1,position(ds_posterior_w in ds_valor_campo_ww||ds_anterior_w)-1);
						end if;

					end if;
					ds_valor_campo_ww := substr(ds_valor_campo_ww, position(ds_anterior_w in ds_valor_campo_ww),255);

				end if;

				end;

			end loop;
		end if;

	end if;

	end;
end loop;
close C02;

/* ds_valor_segundo_w = Setor de Atendimento */

if (ds_valor_segundo_w IS NOT NULL AND ds_valor_segundo_w::text <> '') then
	begin
	cd_setor_atendimento_w := ds_valor_segundo_w;
	select	max(vl_conversao)
	into STRICT	cd_setor_atendimento_ww
	from	pls_xml_campo_esp_conv
	where	vl_origem = cd_setor_atendimento_w
	and	ie_campo  = 'S';

	if (cd_setor_atendimento_ww IS NOT NULL AND cd_setor_atendimento_ww::text <> '') then
		cd_setor_atendimento_w	:= cd_setor_atendimento_ww;
	end if;

	select	max(nr_sequencia)
	into STRICT	nr_seq_setor_atend_w
	from	pls_setor_atendimento
	where	cd_setor_atendimento	= cd_setor_atendimento_w;

	if (coalesce(nr_seq_conta_proc_p,0) > 0) then

		update	pls_conta_proc
		set	nr_seq_setor_atend = nr_seq_setor_atend_w
		where	nr_sequencia	   = nr_seq_conta_proc_p;

	elsif (coalesce(nr_seq_conta_mat_p,0) > 0) and (nr_seq_setor_atend_w > 0) then
		update	pls_conta_mat
		set	nr_seq_setor_atend = nr_seq_setor_atend_w
		where	nr_sequencia	   = nr_seq_conta_mat_p;
	end if;
	exception
	when others then
		nr_seq_setor_atend_w	:= null;
	end;
end if;

/* ds_valor_w = Fornecedor do material */

if (ds_valor_w IS NOT NULL AND ds_valor_w::text <> '') then
	if (coalesce(nr_seq_conta_mat_p,0) > 0) then
		begin
		cd_fornecedor_mat_w	:= ds_valor_w;

		select	max(vl_conversao),
			max(ie_codigo_fornecedor)
		into STRICT	vl_conversao_fornec_w,
			ie_codigo_fornecedor_w
		from	pls_xml_campo_esp_conv
		where	((vl_origem = cd_fornecedor_mat_w)
		or (coalesce(vl_origem::text, '') = ''))
		and	ie_campo  = 'F';

		if (coalesce(ie_codigo_fornecedor_w,'C') = 'C') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_fornecedor_mat_w
			from	pls_prestador
			where	cd_prestador	= cd_fornecedor_mat_w;
		elsif (ie_codigo_fornecedor_w = 'S') then
			nr_seq_fornecedor_mat_w	:= (cd_fornecedor_mat_w)::numeric;
		end if;

		if (nr_seq_fornecedor_mat_w IS NOT NULL AND nr_seq_fornecedor_mat_w::text <> '') then
			update	pls_conta_mat
			set	nr_seq_prest_fornec = nr_seq_fornecedor_mat_w
			where	nr_sequencia	    = nr_seq_conta_mat_p;
		end if;

		exception
		when others then
			nr_seq_fornecedor_mat_w	:= null;
		end;
	end if;
end if;

if (cd_sequencial_prestador_w IS NOT NULL AND cd_sequencial_prestador_w::text <> '') then
	if (coalesce(nr_seq_conta_mat_p,0) > 0) then
		begin

		update	pls_conta_mat
		set	cd_sequencial_prestador = cd_sequencial_prestador_w
		where	nr_sequencia	    = nr_seq_conta_mat_p;

		end;
	end if;
end if;
/*commit;*/

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_campo_esp ( nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint) FROM PUBLIC;

