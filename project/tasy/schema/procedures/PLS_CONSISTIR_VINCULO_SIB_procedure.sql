-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_vinculo_sib ( nr_seq_tasy_ans_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_retorno_sib_w		bigint;
cd_usuario_plano_w		varchar(30);
nm_segurado_w			varchar(255);
nr_seq_segurado_w		bigint;
dt_adesao_w			timestamp;
dt_rescisao_w			timestamp;
dt_liberacao_w			timestamp;
dt_nascimento_w			timestamp;
nm_mae_w			varchar(255);
nr_seq_plano_w			bigint;
cd_plano_w			varchar(20);
ie_tipo_registro_w			varchar(1);
dt_reativacao_w			timestamp;
nm_beneficiario_ans_w		varchar(255);
cd_usuario_plano_ans_w		varchar(30);
dt_adesao_plano_ans_w		timestamp;
dt_rescisao_contrato_ans_w		timestamp;
dt_nascimento_ans_w		timestamp;
nm_mae_ans_w			varchar(255);
cd_plano_ans_ans_w		varchar(20);
ie_tipo_registro_ans_w		smallint;
ds_consistencia_w			varchar(255) := '';
dt_mesano_referencia_w		timestamp;


BEGIN 
 
select	trunc(dt_mesano_referencia,'month') 
into STRICT	dt_mesano_referencia_w 
from	pls_lote_retorno_sib a, 
	pls_sib_tasy_ans b 
where	a.nr_sequencia	= b.nr_seq_lote 
and	b.nr_sequencia	= nr_seq_tasy_ans_p;
 
/* Dados beneficiário Tasy */
 
select	nr_seq_retorno_sib, 
	cd_usuario_plano, 
	substr(pls_obter_dados_segurado(nr_seq_segurado,'N'),1,255), 
	nr_seq_segurado 
into STRICT	nr_seq_retorno_sib_w, 
	cd_usuario_plano_w, 
	nm_segurado_w, 
	nr_seq_segurado_w 
from	pls_sib_tasy_ans 
where	nr_sequencia	= nr_seq_tasy_ans_p;
 
select	dt_contratacao, 
	dt_rescisao, 
	dt_liberacao, 
	substr(obter_dados_pf(cd_pessoa_fisica,'DN'),1,20), 
	substr(obter_compl_pf(cd_pessoa_fisica,5,'N'),1,255), 
	--nr_seq_plano, 
	pls_obter_produto_benef(nr_sequencia, dt_mesano_referencia_w), 
	pls_obter_dados_seg_mes(nr_sequencia, dt_mesano_referencia_w,'S'), 
	dt_reativacao 
into STRICT	dt_adesao_w, 
	dt_rescisao_w, 
	dt_liberacao_w, 
	dt_nascimento_w, 
	nm_mae_w, 
	nr_seq_plano_w, 
	ie_tipo_registro_w, 
	dt_reativacao_w 
from	pls_segurado 
where	nr_sequencia	= nr_seq_segurado_w;
 
if (coalesce(nr_seq_plano_w,0) <> 0) then 
	select	cd_plano 
	into STRICT	cd_plano_w 
	from	pls_plano 
	where	nr_sequencia	= nr_seq_plano_w;
end if;
 
/* Dados retorno ANS */
 
select	nm_beneficiario, 
	cd_usuario_plano, 
	dt_adesao_plano, 
	dt_rescisao_contrato, 
	dt_nascimento, 
	nm_mae, 
	cd_plano_ans, 
	ie_tipo_registro 
into STRICT	nm_beneficiario_ans_w, 
	cd_usuario_plano_ans_w, 
	dt_adesao_plano_ans_w, 
	dt_rescisao_contrato_ans_w, 
	dt_nascimento_ans_w, 
	nm_mae_ans_w, 
	cd_plano_ans_ans_w, 
	ie_tipo_registro_ans_w 
from	pls_retorno_sib 
where	nr_sequencia	= nr_seq_retorno_sib_w;
 
if (upper(nm_segurado_w) <> upper(nm_beneficiario_ans_w)) then 
	insert into pls_retorno_consistencia(	NR_SEQUENCIA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					DT_ATUALIZACAO_NREC, 
					NM_USUARIO_NREC, 
					NR_SEQ_TASY_ANS, 
					DS_CONSISTENCIA) 
				values (	nextval('pls_retorno_consistencia_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_tasy_ans_p, 
					'Nome do beneficiário incompatível.');
end if;
 
if (cd_usuario_plano_w <> cd_usuario_plano_ans_w) then 
	insert into pls_retorno_consistencia(	NR_SEQUENCIA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					DT_ATUALIZACAO_NREC, 
					NM_USUARIO_NREC, 
					NR_SEQ_TASY_ANS, 
					DS_CONSISTENCIA) 
				values (	nextval('pls_retorno_consistencia_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_tasy_ans_p, 
					'Carteira incompatível.');
end if;
 
if (trunc(dt_adesao_w,'dd') <> trunc(dt_adesao_plano_ans_w,'dd')) then 
	insert into pls_retorno_consistencia(	NR_SEQUENCIA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					DT_ATUALIZACAO_NREC, 
					NM_USUARIO_NREC, 
					NR_SEQ_TASY_ANS, 
					DS_CONSISTENCIA) 
				values (	nextval('pls_retorno_consistencia_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_tasy_ans_p, 
					'Data de adesão incompatível.');
end if;
 
if (trunc(dt_rescisao_w,'dd') <> trunc(dt_rescisao_contrato_ans_w,'dd')) then 
	insert into pls_retorno_consistencia(	NR_SEQUENCIA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					DT_ATUALIZACAO_NREC, 
					NM_USUARIO_NREC, 
					NR_SEQ_TASY_ANS, 
					DS_CONSISTENCIA) 
				values (	nextval('pls_retorno_consistencia_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_tasy_ans_p, 
					'Data de rescisão incompatível.');
end if;
 
if (trunc(dt_nascimento_w,'dd') <> trunc(dt_nascimento_ans_w,'dd')) then 
	insert into pls_retorno_consistencia(	NR_SEQUENCIA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					DT_ATUALIZACAO_NREC, 
					NM_USUARIO_NREC, 
					NR_SEQ_TASY_ANS, 
					DS_CONSISTENCIA) 
				values (	nextval('pls_retorno_consistencia_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_tasy_ans_p, 
					'Data de nascimento incompatível.');
end if;
 
if (upper(nm_mae_w) <> upper(nm_mae_ans_w)) then 
	insert into pls_retorno_consistencia(	NR_SEQUENCIA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					DT_ATUALIZACAO_NREC, 
					NM_USUARIO_NREC, 
					NR_SEQ_TASY_ANS, 
					DS_CONSISTENCIA) 
				values (	nextval('pls_retorno_consistencia_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_tasy_ans_p, 
					'Nome da mãe incompatível.');
end if;
 
if (cd_plano_w <> cd_plano_ans_ans_w) then 
	insert into pls_retorno_consistencia(	NR_SEQUENCIA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					DT_ATUALIZACAO_NREC, 
					NM_USUARIO_NREC, 
					NR_SEQ_TASY_ANS, 
					DS_CONSISTENCIA) 
				values (	nextval('pls_retorno_consistencia_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_tasy_ans_p, 
					'Código do plano incompatível.');
end if;
 
if (ie_tipo_registro_w <> ie_tipo_registro_ans_w) then 
	insert into pls_retorno_consistencia(	NR_SEQUENCIA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					DT_ATUALIZACAO_NREC, 
					NM_USUARIO_NREC, 
					NR_SEQ_TASY_ANS, 
					DS_CONSISTENCIA) 
				values (	nextval('pls_retorno_consistencia_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_tasy_ans_p, 
					'Situação do beneficiário incompatível.');
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_vinculo_sib ( nr_seq_tasy_ans_p bigint, nm_usuario_p text) FROM PUBLIC;

