-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tratar_baixa_canc_resc_tit ( nr_seq_tit_rec_cobr_p bigint, nr_seq_trans_fin_p bigint, nr_seq_pagador_p bigint, ie_acao_p text, dt_baixa_p timestamp, nm_usuario_p text) AS $body$
DECLARE

 
vl_saldo_titulo_w		double precision;
vl_liquidacao_w			double precision;
vl_devolver_w			double precision;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(14);
nr_adiantamento_w		bigint;
dt_liquidacao_w			timestamp;
cd_tipo_receb_adiant_duplic_w	integer;
nr_seq_trans_financ_w		bigint;
nr_seq_conta_banco_w		bigint;
ie_gerar_adiant_tit_duplic_w	varchar(1);
cd_estabelecimento_w		smallint;
cd_moeda_w			integer;
nr_seq_devolucao_w		integer;
vl_saldo_adiant_w		double precision;
cd_moeda_cp_w			smallint;
vl_juros_w			double precision;
vl_multa_w			double precision;
vl_desp_banc_w			double precision;
ie_gerar_nc_pag_duplic_w	varchar(1)	:= 'N';
nr_seq_nota_credito_w		bigint;
vl_saldo_nota_w			double precision;
qt_registro_w			bigint;
nr_titulo_w			bigint;
vl_saldo_juros_w		double precision;
vl_saldo_multa_w		double precision;
vl_pagos_w			double precision;
vl_titulo_w			double precision;
vl_recebido_cobr_escrit_w	double precision;
nr_seq_cobranca_w		bigint;
vl_recebido_w			double precision;
dt_remessa_w			timestamp;
vl_descontos_w			double precision;
vl_baixa_w			double precision;
nr_seq_regra_w			bigint;
ie_acao_w			varchar(3);
nr_seq_pagador_w		bigint;
vl_credito_w			double precision;
nr_titulo_ret_w			double precision;
nr_conta_w			varchar(20);
ie_digito_conta_w		varchar(2);
vl_regra_ger_nc_w		double precision;
ie_situacao_tit_regra_w		varchar(5);
ie_situacao_tit_w		varchar(5);
nr_seq_motivo_w			regra_acao_pag_duplic.nr_seq_motivo%type;


BEGIN 
if (nr_seq_tit_rec_cobr_p IS NOT NULL AND nr_seq_tit_rec_cobr_p::text <> '') then 
	select	b.cd_estabelecimento 
	into STRICT	cd_estabelecimento_w 
	from	cobranca_escritural b, 
		titulo_receber_cobr a 
	where	a.nr_seq_cobranca	= b.nr_sequencia 
	and	a.nr_sequencia		= nr_seq_tit_rec_cobr_p;
 
	begin 
	select	a.cd_moeda_padrao, 
		/*nvl(a.ie_gerar_adiant_tit_duplic,'N'), 
		cd_tipo_receb_adiant_duplic*/
 
		coalesce(ie_gerar_nc_pag_duplic,'N') 
	into STRICT	cd_moeda_w, 
		/*ie_gerar_adiant_tit_duplic_w, 
		cd_tipo_receb_adiant_duplic_w*/
 
		ie_gerar_nc_pag_duplic_w 
	from	parametro_contas_receber a 
	where	a.cd_estabelecimento	= cd_estabelecimento_w;
	exception 
		when no_data_found then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(216302);
	end;
	 
	SELECT * FROM obter_regra_acao_pag_duplic(dt_baixa_p, cd_estabelecimento_w, nm_usuario_p, nr_seq_regra_w, ie_acao_w) INTO STRICT nr_seq_regra_w, ie_acao_w;
	 
	begin 
	select	max(vl_minimo_nc), 
		coalesce(max(ie_situacao_tit),'T'), 
		max(nr_seq_motivo) 
	into STRICT	vl_regra_ger_nc_w, 
		ie_situacao_tit_regra_w, 
		nr_seq_motivo_w 
	from	regra_acao_pag_duplic 
	where	nr_sequencia = nr_seq_regra_w;
	exception 
	when others then 
		vl_regra_ger_nc_w		:= null;
		ie_situacao_tit_regra_w		:= 'T';
		nr_seq_motivo_w			:= null;
	end;
	 
	begin 
	select	a.cd_moeda_padrao 
	into STRICT	cd_moeda_cp_w 
	from	parametros_contas_pagar a 
	where	a.cd_estabelecimento	= cd_estabelecimento_w;
	exception 
		when no_data_found then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(216302);
	end;
 
	select	b.vl_saldo_titulo, 
		trunc(a.dt_liquidacao,'dd'), 
		c.nr_seq_conta_banco, 
		b.cd_pessoa_fisica, 
		b.cd_cgc, 
		coalesce(a.vl_juros,0), 
		coalesce(a.vl_multa,0), 
		coalesce(a.vl_despesa_bancaria,0), 
		a.nr_titulo, 
		c.dt_remessa_retorno, 
		c.nr_sequencia, 
		b.vl_titulo, 
		a.vl_liquidacao, 
		coalesce(nr_conta,'0'), 
		ie_digito_conta, 
		b.ie_situacao 
	into STRICT	vl_saldo_titulo_w, 
		dt_liquidacao_w, 
		nr_seq_conta_banco_w, 
		cd_pessoa_fisica_w, 
		cd_cgc_w, 
		vl_juros_w, 
		vl_multa_w, 
		vl_desp_banc_w, 
		nr_titulo_w, 
		dt_remessa_w, 
		nr_seq_cobranca_w, 
		vl_titulo_w, 
		vl_credito_w, 
		nr_conta_w, 
		ie_digito_conta_w, 
		ie_situacao_tit_w 
	from	cobranca_escritural c, 
		titulo_receber b, 
		titulo_receber_cobr a 
	where	a.nr_titulo		= b.nr_titulo 
	and	a.nr_seq_cobranca	= c.nr_sequencia 
	and	a.nr_sequencia		= nr_seq_tit_rec_cobr_p;
 
	/* Se a baixa for de estorno, verificar se já tem nota de crédito */
 
	if (ie_acao_p = 'E') then 
		select	max(nr_sequencia) 
		into STRICT	nr_seq_nota_credito_w 
		from	nota_credito a 
		where	a.nr_seq_tit_rec_cobr	= nr_seq_tit_rec_cobr_p 
		and	a.ie_situacao		<> 'C';
		 
		if (nr_seq_nota_credito_w IS NOT NULL AND nr_seq_nota_credito_w::text <> '') then 
			select	vl_saldo 
			into STRICT	vl_saldo_nota_w 
			from	nota_credito a 
			where	a.nr_sequencia	= nr_seq_nota_credito_w;
 
			insert into nota_credito_baixa(nr_sequencia, 
				nm_usuario, 
				dt_atualizacao, 
				nm_usuario_nrec, 
				dt_atualizacao_nrec, 
				nr_seq_nota_credito, 
				dt_baixa, 
				vl_baixa, 
				ie_cancelamento) 
			values (nextval('nota_credito_baixa_seq'), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nr_seq_nota_credito_w, 
				coalesce(dt_baixa_p,dt_liquidacao_w), 
				vl_saldo_nota_w, 
				'S');
 
			CALL atualizar_saldo_nota_credito(nr_seq_nota_credito_w,nm_usuario_p);
		end if;
	else 
		vl_devolver_w	:= abs(vl_credito_w);
 
		select	count(*) 
		into STRICT	qt_registro_w 
		from	nota_credito a 
		where	a.nr_seq_tit_rec_cobr	= nr_seq_tit_rec_cobr_p 
		and	a.ie_situacao		<> 'C';
 
		if (vl_devolver_w > 0) and (qt_registro_w = 0) and 
			((coalesce(vl_regra_ger_nc_w::text, '') = '') or (vl_devolver_w >= vl_regra_ger_nc_w)) and 
			((coalesce(ie_situacao_tit_regra_w,'T') = 'T') or 
			((coalesce(ie_situacao_tit_regra_w,'T') = 'LC') and (ie_situacao_tit_w in ('2','3')))) then 
			--(vl_saldo_titulo_w < vl_recebido_w) then 
			/* Gerar nota de crédito */
 
			 
			select	nextval('nota_credito_seq') 
			into STRICT	nr_seq_nota_credito_w 
			;
			 
			insert into nota_credito(nr_sequencia, 
				cd_estabelecimento, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				vl_nota_credito, 
				cd_pessoa_fisica, 
				cd_cgc, 
				dt_nota_credito, 
				dt_vencimento, 
				cd_moeda, 
				tx_juros, 
				tx_multa, 
				cd_tipo_taxa_juro, 
				cd_tipo_taxa_multa, 
				ie_origem, 
				vl_saldo, 
				nr_lote_contabil, 
				ds_observacao, 
				ie_situacao, 
				nr_seq_tit_rec_cobr, 
				nr_seq_regra_pag_duplic, 
				nr_seq_trans_fin_contab, 
				nr_seq_motivo) 
			values (nr_seq_nota_credito_w, 
				cd_estabelecimento_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				vl_devolver_w, 
				cd_pessoa_fisica_w, 
				cd_cgc_w, 
				dt_liquidacao_w, 
				null, 
				cd_moeda_cp_w, 
				null, 
				null, 
				null, 
				null, 
				'CE', 
				vl_devolver_w, 
				0, 
				--'Nota de crédito gerada devido a pagamento em duplicidade/à maior', 
				wheb_mensagem_pck.get_texto(302570), 
				'A', 
				nr_seq_tit_rec_cobr_p, 
				nr_seq_regra_w, 
				nr_seq_trans_fin_p, 
				nr_seq_motivo_w);
			 
			if (ie_acao_w = 'NCM') then 
				select	max(d.nr_seq_pagador) 
				into STRICT	nr_seq_pagador_w 
				from	pls_mensalidade d, 
					titulo_receber c, 
					titulo_receber_cobr b, 
					nota_credito a 
				where	a.nr_seq_tit_rec_cobr	= b.nr_sequencia 
				and	b.nr_titulo		= c.nr_titulo 
				and	c.nr_seq_mensalidade	= d.nr_sequencia 
				and	a.nr_sequencia		= nr_seq_nota_credito_w;
				 
				if (coalesce(nr_seq_pagador_w::text, '') = '') then 
					select	max(d.nr_seq_pagador) 
					into STRICT	nr_seq_pagador_w 
					from	pls_mensalidade d, 
						titulo_receber c, 
						nota_credito a 
					where	a.nr_titulo_receber	= c.nr_titulo 
					and	c.nr_seq_mensalidade	= d.nr_sequencia 
					and	a.nr_sequencia		= nr_seq_nota_credito_w;
				end if;
				 
				if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then 
					update	nota_credito 
					set	nr_seq_pagador_aprop	= nr_seq_pagador_w 
					where	nr_sequencia		= nr_seq_nota_credito_w;
				end if;
			end if;
			 
			nr_titulo_ret_w := gerar_titulo_pagar_nc(nr_seq_nota_credito_w, nm_usuario_p, vl_devolver_w, nr_titulo_ret_w);
			 
			/*update	titulo_pagar 
			set	nr_seq_trans_fin_contab	= nr_seq_trans_fin_p 
			where	nr_titulo	= nr_titulo_ret_w;*/
 
			/*pls_gerar_hist_fin_pagador(nr_seq_pagador_p,'FF','Cliente pagou o título '|| nr_titulo_w || ' no dia ' || dt_baixa_p || 
									' no valor de R$'||substr(campo_mascara_virgula(vl_devolver_w),1,20) || 
									' na conta ' || nr_conta_w || '-' || ie_digito_conta_w || 
									', porém como já estava liquidado/cancelado foi lançado com a trasação ' || 
									nr_seq_trans_fin_p || '-' || obter_desc_trans_financ(nr_seq_trans_fin_p) 
									,nm_usuario_p,cd_estabelecimento_w);*/
 
			CALL pls_gerar_hist_fin_pagador(nr_seq_pagador_p,'FF',wheb_mensagem_pck.get_texto(302588, 'NR_TITULO_W='||nr_titulo_w|| 
									';DT_BAIXA_P='||dt_baixa_p||';VL_DEVOLVER_W='||vl_devolver_w|| 
									';NR_CONTA_W='||nr_conta_w||';IE_DIGITO_CONTA_W='||ie_digito_conta_w|| 
									';NR_SEQ_TRANS_FIN_P='||nr_seq_trans_fin_p||';DS_TRANS_FIN_P='||obter_desc_trans_financ(nr_seq_trans_fin_p)) 
									,nm_usuario_p,cd_estabelecimento_w);						
		end if; /* Tem valor a devolver */
	end if; /* Estorno */
end if;
/* Não pode ter commit */
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tratar_baixa_canc_resc_tit ( nr_seq_tit_rec_cobr_p bigint, nr_seq_trans_fin_p bigint, nr_seq_pagador_p bigint, ie_acao_p text, dt_baixa_p timestamp, nm_usuario_p text) FROM PUBLIC;

