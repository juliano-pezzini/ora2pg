-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_consiste_marc_regra (nr_seq_ageint_p bigint, nr_seq_item_p bigint, ie_acao_p text, hr_agenda_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_retorno_p INOUT text) AS $body$
DECLARE

 
nr_seq_item_w		bigint;
nr_seq_proc_interno_w	bigint;
nr_tempo_entre_exames_w	bigint;
ie_exame_principal_w	varchar(1);
nr_seq_apres_w		smallint;

 
nr_minuto_dur_marcado_w	bigint;
hr_agenda_marcada_w	timestamp;
cd_agenda_marcada_w	bigint;
nr_seq_ageint_item_marcado_w	bigint;
ie_encaixe_marcado_w	varchar(1);
cd_medico_marcado_w	varchar(10);			
			 
 
hr_agenda_princ_w	timestamp;	
nr_seq_apres_princ_w	smallint;	
 
nr_seq_horario_w	bigint;
hr_marcacao_w		timestamp;
cd_agenda_w		bigint;
nr_seq_ageint_lib_w	bigint;
nr_minuto_duracao_w	bigint;
cd_medico_w		varchar(10);

ds_aux_w		bigint;
ie_reservado_w		varchar(1);
ie_principal_w		varchar(1);
qt_pendente_w		bigint	:= 0;
cd_tipo_agenda_w	bigint;
ds_retorno_w		varchar(1)	:= 'S';	 			
nr_min_duracao_princ_w	bigint;
ds_agendas_montadas_w	varchar(1);
			
C01 CURSOR FOR                                    
	/* Buscando os item de protocolo que não estão agendados */
 
	SELECT	a.nr_Sequencia,                               
		a.nr_seq_proc_interno,                              
		c.nr_tempo_entre_exames, 
		coalesce(c.ie_exame_principal,'N'), 
		c.nr_seq_apres 
	from	agenda_integrada_item a, 
		ageint_grupo_proc b, 
		ageint_grupo_proc_item c 
	where	b.nr_sequencia = a.nr_seq_grupo_proc 
	and	c.nr_seq_grupo_proc = b.nr_sequencia 
	and	c.nr_seq_proc_interno = a.nr_seq_proc_interno 
	and	a.nr_seq_Agenda_int	= nr_seq_ageint_p 
	and	a.nr_seq_proc_item_grupo	= c.nr_sequencia 
	and	not exists (	SELECT	1                             
				from	ageint_marcacao_usuario b                         
				where	b.nr_seq_ageint_item	= a.nr_sequencia) 
	and	a.nr_sequencia	<> nr_seq_item_p 
	order by c.nr_seq_apres;
			

BEGIN 
 
if (ie_acao_p = 'I') then 
	hr_agenda_princ_w	:= hr_agenda_p;
 
	/* Buscando a sequência de marcação do procedimento principal */
 
	select	max(nr_seq_apres), 
			max(c.nr_minuto_duracao) 
	into STRICT	nr_seq_apres_princ_w, 
			nr_min_duracao_princ_w 
	from	ageint_grupo_proc_item c, 
		ageint_grupo_proc b, 
		agenda_integrada_item a 
	where	b.nr_sequencia 		= a.nr_seq_grupo_proc 
	and	c.nr_seq_grupo_proc 	= b.nr_sequencia 
	and	c.nr_seq_proc_interno 	= a.nr_seq_proc_interno 
	and	a.nr_sequencia		= nr_seq_item_p 
	and	c.ie_exame_principal	= 'S';
 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_item_w,                               
		nr_seq_proc_interno_w, 
		nr_tempo_entre_exames_w, 
		ie_exame_principal_w, 
		nr_seq_apres_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		if (qt_pendente_w	= 0) then 
			/* Consistência se deve gerar antes ou depois do horário do procedimento principal já marcado de acordo com a sequencia de marcação */
 
			if (nr_tempo_entre_exames_w IS NOT NULL AND nr_tempo_entre_exames_w::text <> '') then 
				if (nr_seq_apres_w > nr_seq_apres_princ_w) then 
					hr_marcacao_w	:= hr_agenda_princ_w + nr_tempo_entre_exames_w/1440;
				elsif (nr_seq_apres_w < nr_seq_apres_princ_w) then 
					hr_marcacao_w	:= hr_agenda_princ_w - nr_tempo_entre_exames_w/1440;
				end if;
			else 
				if (nr_seq_apres_w > nr_seq_apres_princ_w) then 
					hr_marcacao_w	:= hr_agenda_princ_w + nr_min_duracao_princ_w /1440;
				elsif (nr_seq_apres_w < nr_seq_apres_princ_w) then 
					hr_marcacao_w	:= hr_agenda_princ_w - nr_min_duracao_princ_w /1440;
				end if;
			end if;
			/* Somente gera horário ou agenda se a data for maior ou igual a atual */
 
			if (hr_marcacao_w >= clock_timestamp()) then 
				 
				/* Gerando o horário do dia de acordo com a regra */
 
				if (trunc(hr_marcacao_w) <> trunc(clock_timestamp())) then 
					SELECT * FROM Gerar_Horarios_AgeInt(trunc(hr_marcacao_w), nm_usuario_p, nr_seq_ageint_p, cd_estabelecimento_p, ds_agendas_montadas_w, ds_aux_w, ds_aux_w, ds_aux_w, ds_aux_w) INTO STRICT ds_aux_w, ds_aux_w, ds_aux_w, ds_aux_w;
				end if;
								 
				/* Buscando a minima seuquencia para agendar o item */
 
				select	min(a.nr_sequencia) 
				into STRICT	nr_seq_horario_w                               
				from	ageint_horarios_usuario a 
				where	a.ie_Status_agenda	= 'L' 
				and	a.nm_usuario		= nm_usuario_p 
				and	a.hr_agenda		= hr_marcacao_w 
				and	exists (SELECT 	1                                         
						from 	ageint_lib_usuario b                                    
						where 	a.nr_seq_ageint_lib 	= b.nr_sequencia                           
						and 	b.nr_seq_ageint_item 	= nr_seq_item_w);
 
				/* Buscando informações da sequencia em que será marcado o item */
		 
				if (nr_seq_horario_w > 0) then 
					select	max(a.cd_agenda), 
						max(a.nr_seq_ageint_lib), 
						max(a.nr_minuto_duracao), 
						max(b.cd_pessoa_fisica) 
					into STRICT	cd_agenda_w, 
						nr_seq_ageint_lib_w, 
						nr_minuto_duracao_w, 
						cd_medico_w 
					from	ageint_horarios_usuario a, 
						ageint_lib_usuario b 
					where	a.nr_sequencia 		= nr_seq_horario_w 
					and	a.nr_seq_ageint_lib	= b.nr_Sequencia;				
					 
					select	max(cd_tipo_agenda) 
					into STRICT	cd_tipo_agenda_w 
					from	agenda 
					where	cd_agenda = cd_agenda_w;
					 
				else 
					/* Verifica se não conseguiu marcar algum horário */
 
					qt_pendente_w := qt_pendente_w + 1;
				end if;
				 
			else 
				/* Verifica se não conseguiu marcar algum horário */
 
				qt_pendente_w := qt_pendente_w + 1;
			end if;
		end if;
		end;
	end loop;
	close C01;
	 
	if (qt_pendente_w > 0) then 
		ds_retorno_w	:= 'N';
	end if;
end if;
 
ds_retorno_p	:= ds_retorno_w;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_consiste_marc_regra (nr_seq_ageint_p bigint, nr_seq_item_p bigint, ie_acao_p text, hr_agenda_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_retorno_p INOUT text) FROM PUBLIC;

