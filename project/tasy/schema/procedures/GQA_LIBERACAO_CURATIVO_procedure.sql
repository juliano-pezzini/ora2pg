-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gqa_liberacao_curativo ( nr_atendimento_p bigint, nr_sequencia_p bigint, nm_usuario_p text, nr_regras_atendidas_p INOUT text, nr_restrigir_regras_p text default null, qt_horas_retroativa_p bigint default 0) AS $body$
DECLARE

 
nr_seq_pend_regra_w     bigint;
vl_minimo_w         double precision;
vl_maximo_w         double precision;	
nr_atendimento_w      bigint;
nm_atributo_w        varchar(50);
nr_sequencia_w       bigint;
vl_atributo_w        double precision;
vl_atributo_grau_w     smallint;
cd_pessoa_fisica_w     varchar(10);
qt_idade_w         bigint;
cd_setor_atendimento_w   bigint;
ie_grau_ferida_regra_w   varchar(10);
teste_w           smallint;
qt_idade_dias_w       integer;
qt_peso_gramas_w      double precision;
ie_restricao_complementar_w varchar(80);
ie_protocolo_assistencial_w boolean;

C01 CURSOR FOR 
	SELECT a.nr_sequencia, 
      coalesce(a.vl_minimo,0), 
      coalesce(a.vl_maximo,999), 
      a.ie_grau_ferida 
	from  gqa_pendencia_regra a, 
      gqa_pendencia    b 
  where  b.nr_sequencia	= a.nr_seq_pendencia		 
  and   b.ie_tipo_pendencia	= 5 
  and   b.ie_situacao 		= 'A' 
  and   a.ie_situacao		= 'A' 
  and   obter_se_gqa_regra_liberada(a.nr_sequencia) = 'S' 
  and   qt_idade_w    between coalesce(a.qt_idade_min,0) and coalesce(a.qt_idade_max,999) 
  and   qt_idade_dias_w between coalesce(a.qt_dias_min ,0) and coalesce(a.qt_dias_max ,99999) 
  and   qt_peso_gramas_w between coalesce(a.qt_peso_gramas_min,0) and coalesce(a.qt_peso_gramas_max,999999999) 
  and   coalesce(a.cd_setor_atendimento,coalesce(cd_setor_atendimento_w,0)) = coalesce(cd_setor_atendimento_w,0) 
  and   coalesce(a.ie_grau_ferida,0)	= coalesce(vl_atributo_grau_w,0) 
  and   coalesce(vl_atributo_w,0) between coalesce(a.vl_minimo,0) and coalesce(a.vl_maximo,999) 
  and (coalesce(nr_restrigir_regras_p::text, '') = '' or position(a.nr_sequencia in nr_restrigir_regras_p) > 0);

CursorCurativo  REFCURSOR;

SQLCurativoLiberado  varchar(2000) := 
  ' select max(ie_grau_ferida), ' || 
  '    max(qt_escore) '    || 
  ' from	 cur_curativo '     || 
  ' where	 nr_sequencia	= '   || nr_sequencia_p;

SQLCurativoAtendimento  varchar(2000) := 
  ' select max(ie_grau_ferida), '     || 
  '    max(qt_escore) '        || 
  ' from	 cur_curativo '         || 
  ' where	 nr_atendimento	= '       || nr_atendimento_p || 
  ' and  ie_situacao = ''A'' '     || 
  ' and  dt_liberacao is not null '  || 
  ' and   (' || qt_horas_retroativa_p || ' = 0 or dt_liberacao >= sysdate - ' || qt_horas_retroativa_p || ')';

BEGIN
 
ie_protocolo_assistencial_w := (nr_restrigir_regras_p IS NOT NULL AND nr_restrigir_regras_p::text <> '');
 
nr_atendimento_w    := nr_Atendimento_p;
cd_pessoa_fisica_w   := obter_pessoa_atendimento(nr_atendimento_w,'C');
cd_setor_atendimento_w := obter_setor_atendimento(nr_atendimento_w);
qt_idade_w       := obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A');
qt_idade_dias_w     := obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'DIA');
qt_peso_gramas_w    := (coalesce(obter_peso_pf(cd_pessoa_fisica_w),0) * 1000);
 
if ie_protocolo_assistencial_w then 
  open CursorCurativo for EXECUTE SQLCurativoAtendimento;
else 
  open CursorCurativo for EXECUTE SQLCurativoLiberado;
end if;
 
loop 
fetch CursorCurativo into 
    vl_atributo_grau_w,	 
    vl_atributo_w;
EXIT WHEN NOT FOUND; /* apply on CursorCurativo */
begin 
 
  open C01;
  loop 
  fetch C01 into	 
    nr_seq_pend_regra_w, 
    vl_minimo_w, 
    vl_maximo_w, 
    ie_grau_ferida_regra_w;
  EXIT WHEN NOT FOUND; /* apply on C01 */
    begin 
        
      if	(((vl_atributo_w IS NOT NULL AND vl_atributo_w::text <> '') and (vl_atributo_grau_w IS NOT NULL AND vl_atributo_grau_w::text <> '') and (vl_atributo_w	<> 0) and (vl_atributo_w	>= vl_minimo_w) and (vl_atributo_w	<= vl_maximo_w) and (vl_atributo_grau_w = coalesce(ie_grau_ferida_regra_w,vl_atributo_grau_w))) or		 
         
        ((vl_atributo_w IS NOT NULL AND vl_atributo_w::text <> '') and (coalesce(vl_atributo_grau_w::text, '') = '') and (vl_atributo_w	<> 0) and (vl_atributo_w	>= vl_minimo_w) and (vl_atributo_w	<= vl_maximo_w)) or 
         
        ((vl_atributo_grau_w IS NOT NULL AND vl_atributo_grau_w::text <> '') and (coalesce(vl_atributo_w::text, '') = '') and (vl_atributo_grau_w = ie_grau_ferida_regra_w))) then	 
         
        select GQA_regra_complementar(nm_usuario_p, nr_atendimento_w, nr_seq_pend_regra_w) 
        into STRICT ie_restricao_complementar_w 
;
                   
        if ie_restricao_complementar_w = 'X' then 
          if ie_protocolo_assistencial_w then 
           
            if (nr_regras_atendidas_p IS NOT NULL AND nr_regras_atendidas_p::text <> '') then 
              nr_regras_atendidas_p := nr_regras_atendidas_p || ',';
            end if;
            nr_regras_atendidas_p := nr_regras_atendidas_p || nr_seq_pend_regra_w;
           
          else 
                 
            select	nextval('gqa_pendencia_pac_seq') 
            into STRICT	nr_sequencia_w 
;
             
            insert into gqa_pendencia_pac(	nr_sequencia, 
                    dt_atualizacao, 
                    nm_usuario, 
                    dt_atualizacao_nrec, 
                    nm_usuario_nrec, 
                    cd_pessoa_fisica, 
                    nr_atendimento, 
                    nr_seq_curativo, 
                    NR_SEQ_PEND_REGRA) 
            values (	nr_sequencia_w, 
                    clock_timestamp(), 
                    nm_usuario_p, 
                    clock_timestamp(), 
                    nm_usuario_p, 
                    cd_pessoa_fisica_w, 
                    nr_atendimento_w, 
                    nr_sequencia_p, 
                    nr_seq_pend_regra_w);
            commit;
            RAISE NOTICE '%', nr_sequencia_w;
            CALL GQA_GERAR_ACAO_REGRA(nr_seq_pend_regra_w,nr_sequencia_w,nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_p);
          end if;
        end if;
      end if;
    end;
  end loop;
  close C01;
   
  end;
end loop;
close CursorCurativo;
  
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gqa_liberacao_curativo ( nr_atendimento_p bigint, nr_sequencia_p bigint, nm_usuario_p text, nr_regras_atendidas_p INOUT text, nr_restrigir_regras_p text default null, qt_horas_retroativa_p bigint default 0) FROM PUBLIC;

