-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_glosa_autor_pls (cd_estabelecimento_p bigint, nm_usuario_p text, cd_estab_pls_p bigint, nr_sequencia_autor_p bigint, nr_seq_guia_plano_p bigint) AS $body$
DECLARE


nr_seq_motivo_glosa_w		bigint;
ds_observacao_w			varchar(4000);
nr_seq_guia_proc_w		bigint;
nr_seq_guia_mat_w		bigint;
cd_procedimento_imp_w		bigint;
cd_material_imp_w		bigint;
nr_seq_proc_autor_w		bigint;
nr_seq_mat_autor_w		bigint;
ie_status_w			varchar(2);
nr_seq_estagio_w		bigint;
cd_guia_w			varchar(20);
cd_senha_w			varchar(20);
nr_seq_procecimento_w		bigint;
nr_seq_material_w		bigint;
nr_seq_guia_plano_w		bigint;
ie_atualiza_guia_negada_w	varchar(15) := 'N';
nr_seq_agenda_consulta_w	agenda_consulta.nr_sequencia%type;

c01 CURSOR FOR
SELECT	nr_seq_motivo_glosa,
	ds_observacao
from	pls_guia_glosa
where	nr_seq_guia 	= nr_seq_guia_plano_w;

c02 CURSOR FOR
SELECT	nr_sequencia,
	cd_procedimento_imp
from	pls_guia_plano_proc
where	nr_seq_guia	= nr_seq_guia_plano_w;

c03 CURSOR FOR
SELECT	nr_seq_motivo_glosa,
	ds_observacao
from	pls_guia_glosa
where	nr_seq_guia_proc 	= nr_seq_guia_proc_w;

c04 CURSOR FOR
SELECT	nr_sequencia
from	procedimento_autorizado
where	nr_sequencia_autor	= nr_sequencia_autor_p;

c05 CURSOR FOR
SELECT	nr_sequencia
from	material_autorizado
where	nr_sequencia_autor	= nr_sequencia_autor_p;


BEGIN

ie_atualiza_guia_negada_w := obter_param_usuario(3004, 126, obter_perfil_Ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_atualiza_guia_negada_w);

CALL GERAR_AUTORIZACAO_PLS(cd_estabelecimento_p, nr_sequencia_autor_p, nm_usuario_p);

open C04;
loop
fetch C04 into
	nr_seq_procecimento_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin
	CALL GERAR_AUTORIZACAO_PROC_PLS(cd_estabelecimento_p, nm_usuario_p, nr_sequencia_autor_p, nr_seq_procecimento_w);
	end;
end loop;
close C04;

open C05;
loop
fetch C05 into
	nr_seq_material_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin
	CALL GERAR_AUTORIZACAO_MAT_PLS(cd_estabelecimento_p, nm_usuario_p, nr_sequencia_autor_p, nr_seq_material_w);
	end;
end loop;
close C05;

select	max(nr_seq_guia_plano),
	max(nr_seq_agenda_consulta)
into STRICT	nr_seq_guia_plano_w,
	nr_seq_agenda_consulta_w
from	autorizacao_convenio
where	nr_sequencia	= nr_sequencia_autor_p;

nr_seq_guia_plano_w	:= coalesce(nr_seq_guia_plano_p,nr_seq_guia_plano_w);

if (nr_seq_guia_plano_w IS NOT NULL AND nr_seq_guia_plano_w::text <> '') then

	CALL pls_consistir_guia_importacao( nr_seq_guia_plano_w, cd_estab_pls_p, nm_usuario_p);

	select	max(ie_status),
		max(cd_guia),
		max(cd_senha)
	into STRICT	ie_status_w,
		cd_guia_w,
		cd_senha_w
	from	pls_guia_plano
	where	nr_sequencia	= nr_seq_guia_plano_w;

	select	max(nr_sequencia)
	into STRICT	nr_seq_estagio_w
	from	estagio_autorizacao
	where	ie_situacao	= 'A'
	and	ie_interno	= CASE WHEN ie_status_w='1' THEN '10' WHEN ie_status_w='2' THEN '5' WHEN ie_status_w='3' THEN '90' END
	and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;


	if (ie_status_w  <> '3') or (coalesce(ie_atualiza_guia_negada_w,'N') = 'S') then

		update	autorizacao_convenio
		set	cd_autorizacao	= coalesce(cd_guia_w,cd_autorizacao),
			cd_senha	= coalesce(cd_senha_w,cd_senha)
		where	nr_sequencia	= nr_sequencia_autor_p;
		
		if (coalesce(nr_seq_agenda_consulta_w,0) <> 0) and (ie_atualiza_guia_negada_w = 'S')then
		
		update	agenda_consulta
		set	nr_doc_convenio	= coalesce(cd_guia_w,nr_doc_convenio),
			cd_senha	= coalesce(cd_senha_w,cd_senha)
		where	nr_sequencia	= nr_seq_agenda_consulta_w;
		
		end if;

	end if;

	if (nr_seq_estagio_w IS NOT NULL AND nr_seq_estagio_w::text <> '') then
		CALL atualizar_autorizacao_convenio(nr_sequencia_autor_p,nm_usuario_p,nr_seq_estagio_w,'N','N','S');
	end if;

	open c01;
	loop
	fetch c01 into
		nr_seq_motivo_glosa_w,
		ds_observacao_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		insert into tiss_retorno_autorizacao(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_autorizacao,
			dt_evento,
			nr_seq_motivo_glosa,
			ds_erro_retorno,
			nr_seq_proc_autor)
		values (nextval('tiss_retorno_autorizacao_seq'),
			clock_timestamp(),
			nm_usuario_p,
			nr_sequencia_autor_p,
			clock_timestamp(),
			nr_seq_motivo_glosa_w,
			ds_observacao_w,
			null);

	end loop;
	close c01;

	open c02;
	loop
	fetch c02 into
		nr_seq_guia_proc_w,
		cd_procedimento_imp_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */

		select	max(nr_seq_proc_autor)
		into STRICT	nr_seq_proc_autor_w
		from	tiss_proc_solicitado_autor_v
		where	nr_sequencia_autor				= nr_sequencia_autor_p
		and	coalesce(cd_procedimento_convenio, cd_procedimento)	= cd_procedimento_imp_w;

		open c03;
		loop
		fetch c03 into
			nr_seq_motivo_glosa_w,
			ds_observacao_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			insert into tiss_retorno_autorizacao(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				nr_seq_autorizacao,
				dt_evento,
				nr_seq_motivo_glosa,
				ds_erro_retorno,
				nr_seq_proc_autor)
			values (nextval('tiss_retorno_autorizacao_seq'),
				clock_timestamp(),
				nm_usuario_p,
				nr_sequencia_autor_p,
				clock_timestamp(),
				nr_seq_motivo_glosa_w,
				ds_observacao_w,
				nr_seq_proc_autor_w);
		end loop;
		close c03;

	end loop;
	close c02;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_glosa_autor_pls (cd_estabelecimento_p bigint, nm_usuario_p text, cd_estab_pls_p bigint, nr_sequencia_autor_p bigint, nr_seq_guia_plano_p bigint) FROM PUBLIC;

