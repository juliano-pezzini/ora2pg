-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_pessoa_endereco ( nr_seq_pessoa_endereco_p INOUT bigint, ie_informacao_p text, nr_seq_end_endereco_p bigint, ds_valor_p text, nr_seq_catalogo_p bigint, nm_usuario_p text, ie_commit_p text) AS $body$
DECLARE


nr_seq_pessoa_endereco_w	pessoa_endereco.nr_sequencia%type;
nr_seq_pessoa_end_item_w	pessoa_endereco_item.nr_sequencia%type := null;
qt_carac_maximo_w			bigint := 0;
ds_complemento_w			varchar(255) := null;

c_endereco_pessoa CURSOR FOR
	SELECT	a.nr_sequencia
	from	pessoa_endereco a
	where	not exists (SELECT	1
						from	compl_pessoa_fisica x
						where	x.nr_seq_pessoa_endereco = a.nr_sequencia)
	and		not exists (select	1
						from	compl_pf_tel_adic x
						where	x.nr_seq_pessoa_endereco = a.nr_sequencia)
	and		not exists (select	1
						from	pessoa_juridica x
						where	x.nr_seq_pessoa_endereco = a.nr_sequencia)
	and		not exists (select	1
						from	pessoa_juridica_compl x
						where	x.nr_seq_pessoa_endereco = a.nr_sequencia)
	and		not exists (select	1
						from	declaracao_obito x
						where	x.nr_seq_cert_endereco = a.nr_sequencia)
	and		not exists (select	1
						from	declaracao_obito x
						where	x.nr_seq_ocor_endereco = a.nr_sequencia)
	and		not exists (select	1
						from	declaracao_obito x
						where	x.nr_seq_end_acidente = a.nr_sequencia)
	and		not exists (select	1
						from	nascimento x
						where	x.nr_seq_pessoa_endereco = a.nr_sequencia)
	and		not exists (select	1
						from	pre_pessoa_juridica x
						where	x.nr_seq_pessoa_endereco = a.nr_sequencia)
	and		not exists (select	1
						from	pre_pessoa_juridica_compl x
						where	x.nr_seq_pessoa_endereco = a.nr_sequencia)
	and     not exists (select	1
						from	atend_formulario_furips x
						where	a.nr_sequencia in (x.nr_seq_pessoa_endereco_acid, x.nr_seq_pessoa_endereco_cond, x.nr_seq_pessoa_endereco_prop))
	and     not exists (select	1
						from	atend_formulario_furpen x
						where	a.nr_sequencia in (x.nr_seq_pessoa_end_cond, x.nr_seq_pessoa_end_local, x.nr_seq_pessoa_end_prop, x.nr_seq_pessoa_end_reclama))
	and     not exists (select	1
						from	formulario_furtran x
						where	a.nr_sequencia in (x.nr_seq_endereco_local, x.nr_seq_endereco_transp))
	and		dt_atualizacao <= clock_timestamp() - interval '1 days';

BEGIN

select  coalesce(max(qt_carac_maximo),0),
	coalesce(max(obter_valor_dominio(8959, ie_informacao)),'')		
into STRICT	qt_carac_maximo_w,
		ds_complemento_w
from    config_endereco
where   ie_informacao = ie_informacao_p
and     nr_seq_catalogo = nr_seq_catalogo_p;

if (qt_carac_maximo_w = 0) and (length(ds_valor_p) > 255) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1074832,'DS_CAMPO=' || ds_complemento_w || ';QT_MINIMO=0;QT_MAXIMO=255');
end if;

/* Clean the addresses that does not have any association */

if (coalesce(nr_seq_pessoa_endereco_p::text, '') = '') then
	for r_c_endereco_pessoa in c_endereco_pessoa loop
		delete from pessoa_endereco_item
		where	nr_seq_pessoa_endereco = r_c_endereco_pessoa.nr_sequencia;

		delete from pessoa_endereco
		where	nr_sequencia = r_c_endereco_pessoa.nr_sequencia;
	end loop;

	select	nextval('pessoa_endereco_seq')
	into STRICT	nr_seq_pessoa_endereco_w
	;

	insert into pessoa_endereco(nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		nr_seq_catalogo)
	values (nr_seq_pessoa_endereco_w,
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nr_seq_catalogo_p);
else
	nr_seq_pessoa_endereco_w	:= nr_seq_pessoa_endereco_p;
end if;

if (ie_informacao_p IS NOT NULL AND ie_informacao_p::text <> '') then
	begin
	select	nr_sequencia
	into STRICT	nr_seq_pessoa_end_item_w
	from	pessoa_endereco_item
	where	nr_seq_pessoa_endereco = nr_seq_pessoa_endereco_w
	and		ie_informacao	= ie_informacao_p;
	exception
		when no_data_found then
			nr_seq_pessoa_end_item_w	:= null;
	end;

	if (nr_seq_pessoa_end_item_w IS NOT NULL AND nr_seq_pessoa_end_item_w::text <> '') then
		update	pessoa_endereco_item
		set		nr_seq_end_endereco = nr_seq_end_endereco_p,
				ds_valor	= ds_valor_p,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	nr_sequencia	= nr_seq_pessoa_end_item_w
		and		ie_informacao 	= ie_informacao_p;
	else
		insert into pessoa_endereco_item(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_pessoa_endereco,
			nr_seq_end_endereco,
			ds_valor,
			ie_informacao)
		values (nextval('pessoa_endereco_item_seq'),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_seq_pessoa_endereco_w,
			nr_seq_end_endereco_p,
			ds_valor_p,
			ie_informacao_p);
	end if;
end if;

nr_seq_pessoa_endereco_p	:= nr_seq_pessoa_endereco_w;

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_pessoa_endereco ( nr_seq_pessoa_endereco_p INOUT bigint, ie_informacao_p text, nr_seq_end_endereco_p bigint, ds_valor_p text, nr_seq_catalogo_p bigint, nm_usuario_p text, ie_commit_p text) FROM PUBLIC;

