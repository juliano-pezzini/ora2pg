-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dmed_anual_arquivo_rppss ( nr_sequencia_p bigint, nm_usuario_p text, nr_linha_p INOUT bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicion?o [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relat?s [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de aten?:
	VL_PAGO_W
		Pegar o valor conforme CPF da pessoa
			CPF titular = CPF dependente traz o valor
			N?buscar valor dos benefici?os de menor do titular
-------------------------------------------------------------------------------------------------------------------

Refer?ias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_pessoa_titular_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_cpf_titular_w		pessoa_fisica.nr_cpf%type;
nm_titular_w			pessoa_fisica.nm_pessoa_fisica%type;
vl_pago_w			dmed_titulos_mensal.vl_pago%type;
nr_cpf_lido_w			pessoa_fisica.nr_cpf%type;
ds_arquivo_w			varchar(2000);
nr_linha_w			bigint	:= nr_linha_p;
contador_w			bigint	:= 0;
qt_registros_w			bigint;
	
c_titular CURSOR FOR
	
	SELECT	max(cd_pessoa_fisica) cd_pessoa_fisica,
		nr_cpf_titular,
		coalesce(nr_cpf_titular,cd_pessoa_fisica) ds_ordem
	from (	SELECT	p.cd_pessoa_fisica,
			p.nr_cpf nr_cpf_titular
		from	pessoa_fisica		p
		where	exists (select	1
					from	dmed_titulos_mensal	t,
						dmed_agrupar_lote	l
					where	t.nr_seq_dmed_mensal		= l.nr_seq_dmed_mensal
					and	coalesce(t.ie_prestadora_ops,'P')	= 'P'
					and	p.cd_pessoa_fisica		= t.cd_pessoa_titular
					and	l.nr_seq_dmed_anual		= nr_sequencia_p)) alias4
	group by
		nr_cpf_titular,
		coalesce(nr_cpf_titular,cd_pessoa_fisica)
	order by
		nr_cpf_titular;
		
type 		fetch_array is table of c_titular%rowtype;
s_array 	fetch_array;

BEGIN
ds_arquivo_w	:= 'PSS' || '|';
nr_linha_w	:= nr_linha_w + 1;

insert into w_dacon(nr_sequencia,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	ds_arquivo,
	nr_linha,
	ie_tipo_registro)
values (nextval('w_dacon_seq'),
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p,
	ds_arquivo_w,
	nr_linha_w,
	4);

commit;

open c_titular;
loop
fetch c_titular bulk collect into s_array limit 1000;
	for z in 1..s_array.count loop
		cd_pessoa_titular_w	:= s_array[z].cd_pessoa_fisica;
		nm_titular_w		:= substr(obter_nome_pf(s_array[z].cd_pessoa_fisica),1,255);
		nr_cpf_titular_w	:= s_array[z].nr_cpf_titular;
		
		begin
		nm_titular_w	:= fis_remove_special_characters(nm_titular_w);
		
		if (nr_cpf_lido_w != coalesce(nr_cpf_titular_w,'0')) or (coalesce(nr_cpf_lido_w::text, '') = '') then
			--verifica se o pagador/titular tem algum registro no DMED mensal
			select	sum(t.vl_pago)
			into STRICT	vl_pago_w
			from	dmed_titulos_mensal	t,
				dmed_agrupar_lote	l,
				pessoa_fisica		p
			where	t.nr_seq_dmed_mensal	= l.nr_seq_dmed_mensal
			and	p.cd_pessoa_fisica	= t.cd_pessoa_titular
			and	((t.cd_pessoa_titular	= t.cd_pessoa_beneficiario) or (t.cd_pessoa_beneficiario in (SELECT	k.cd_pessoa_fisica
								from	pessoa_fisica	k
								where	k.nr_cpf		= nr_cpf_titular_w)))
			and	coalesce(t.ie_prestadora_ops,'P')	= 'P'
			and	p.nr_cpf		= nr_cpf_titular_w
			and	l.nr_seq_dmed_anual	= nr_sequencia_p;

			if (vl_pago_w > 0) then
				vl_pago_w	:= replace(replace(to_char(vl_pago_w,'999,999,990.00'),'.',''),',','');
				
				ds_arquivo_w 	:= 'RPPSS' || '|' || nr_cpf_titular_w || '|' || nm_titular_w || '|' || vl_pago_w || '|';
			else
				--quando s?dependente tem mensalidade o valor do titular fica vazio no arquivo
				ds_arquivo_w 	:= 'RPPSS' || '|' || nr_cpf_titular_w || '|' || nm_titular_w || '|' || '' || '|';
			end if;
			
			-- Verifica se tem valor para o beneficiario
			select	sign(sum(t.vl_pago))
			into STRICT	qt_registros_w
			from	dmed_titulos_mensal	t,
				dmed_agrupar_lote	l,
				pessoa_fisica		p
			where	t.nr_seq_dmed_mensal	= l.nr_seq_dmed_mensal
			and	t.cd_pessoa_titular	= p.cd_pessoa_fisica
			and	p.nr_cpf = nr_cpf_titular_w
			and	t.cd_pessoa_beneficiario <> p.cd_pessoa_fisica
			and coalesce(t.ie_prestadora_ops, 'P') = 'P'
			and	l.nr_seq_dmed_anual	= nr_sequencia_p;
				
			if (qt_registros_w > 0) or (vl_pago_w > 0)then
				contador_w	:= contador_w + 1;
				nr_linha_w	:= nr_linha_w + 1;

				insert into w_dacon(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ds_arquivo,
					nr_linha,
					ie_tipo_registro,
					nr_origem)
				values (nextval('w_dacon_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					ds_arquivo_w,
					nr_linha_w,
					8,
					null);
					
				if (mod(contador_w,100) = 0) then
					commit;
				end if;
			end if;
			
			if (qt_registros_w > 0) then
				nr_linha_w := dmed_anual_arquivo_brppss(	nr_sequencia_p, cd_pessoa_titular_w, nr_cpf_titular_w, nm_usuario_p, nr_linha_w);
			end if;	
		end if;
		nr_cpf_lido_w	:= s_array[z].nr_cpf_titular;
		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_titular */
end loop;
close c_titular;

nr_linha_p	:= nr_linha_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dmed_anual_arquivo_rppss ( nr_sequencia_p bigint, nm_usuario_p text, nr_linha_p INOUT bigint) FROM PUBLIC;

