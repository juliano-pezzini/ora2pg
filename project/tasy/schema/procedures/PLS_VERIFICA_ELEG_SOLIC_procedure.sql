-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_verifica_eleg_solic (nr_seq_elegibilidade_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_limite_utilizacao_w		pls_segurado.dt_limite_utilizacao%type;
dt_rescisao_w			pls_segurado.dt_rescisao%type;
dt_limite_validacao_w		timestamp;
dt_transacao_w			timestamp;
cd_prestador_interno_w		pls_elegibilidade.cd_prestador_interno%type;
cd_cgc_w			varchar(20);
nr_cpf_w			varchar(14);
cd_ans_w			varchar(30);
cd_usuario_plano_w		varchar(30);
dt_validade_carteira_w		timestamp;
dt_validade_w			timestamp;
nr_seq_segurado_w		bigint;
nr_seq_prestador_w		bigint;
nr_seq_carteira_w		bigint;
ds_plano_w			varchar(255);
nm_beneficiario_w		varchar(255);
nr_cartao_nac_sus_w		varchar(30);

ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;

cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
ie_enviar_automatico_w		pls_param_intercambio_scs.ie_enviar_automatico%type;
ds_consulta_dados_benef_w	pls_end_webservice_scs.ds_consulta_dados_benef%type;
ds_ip_proxy_w			pls_end_webservice_scs.ds_ip_proxy%type;
ds_porta_proxy_w		pls_end_webservice_scs.ds_porta_proxy%type;
ds_usuario_proxy_w		pls_end_webservice_scs.ds_usuario_proxy%type;
ds_senha_proxy_w		pls_end_webservice_scs.ds_senha_proxy%type;
ds_senha_certificado_w		pls_end_webservice_scs.ds_senha_certificado%type;
ds_caminho_certificado_w	pls_end_webservice_scs.ds_caminho_certificado%type;
ds_webservice_envio_w		pls_end_webservice_scs.ds_webservice_envio%type;
ds_porta_w			pls_end_webservice_scs.ds_porta%type;
ie_tipo_ident_benef_w 		pls_elegibilidade.ie_tipo_ident_benef%type;
cd_ident_biometria_benef_w	pls_elegibilidade.cd_ident_biometria_benef%type;
cd_template_biomet_benef_w	pls_elegibilidade.cd_template_biomet_benef%type;
cd_ausencia_val_benef_tiss_w	pls_elegibilidade.cd_ausencia_val_benef_tiss%type;
cd_validacao_benef_tiss_w	pls_elegibilidade.cd_validacao_benef_tiss%type;

req_w				utl_http.req;
res_w				utl_http.resp;
url_w				varchar(100);
ds_resposta_w			varchar(32647);
ds_parametros_w			varchar(1000);
ds_retorno_w			varchar(255);

nm_benef_consulta_w		varchar(255);
nm_beneficiario_inicial_w	varchar(255);
sobrenome_beneficiario_w	varchar(255);
ie_separa_nome_w		integer := 0;

nr_seq_consulta_benef_w		ptu_consulta_beneficiario.nr_sequencia%type;
nr_seq_resp_consulta_benef_w	ptu_resp_consulta_benef.nr_sequencia%type;
ie_confirmacao_w		ptu_resp_consulta_benef.ie_confirmacao%type;
nr_seq_dados_consulta_benef_w	ptu_resp_nomes_benef.nr_sequencia%type;
nr_versao_scs_w			varchar(10) := pls_obter_versao_scs;
nr_seq_projeto_w		xml_projeto.nr_sequencia%type;
nr_seq_execucao_w		integer := 0;
nm_social_w			pls_resp_elegibilidade.nm_Social_benef%type;


BEGIN

begin
	cd_estabelecimento_w	:= ptu_obter_estab_padrao;

	select	coalesce(max(ie_enviar_automatico),'N')
	into STRICT	ie_enviar_automatico_w
	from	pls_param_intercambio_scs
	where	ie_situacao = 'A';
exception
when others then
	ie_enviar_automatico_w	:= 'N';
end;

select	dt_transacao,
	cd_prestador_interno,
	cd_cgc,
	nr_cpf,
	cd_ans,
	cd_usuario_plano,
	dt_validade_carteira,
	nm_beneficiario,
	ds_plano,
	nr_cartao_nac_sus,
	ie_tipo_ident_benef,
	cd_ident_biometria_benef,
	cd_template_biomet_benef,
	cd_ausencia_val_benef_tiss,
	cd_validacao_benef_tiss
into STRICT	dt_transacao_w,
	cd_prestador_interno_w,
	cd_cgc_w,
	nr_cpf_w,
	cd_ans_w,
	cd_usuario_plano_w,
	dt_validade_carteira_w,
	nm_beneficiario_w,
	ds_plano_w,
	nr_cartao_nac_sus_w,
	ie_tipo_ident_benef_w,
	cd_ident_biometria_benef_w,
	cd_template_biomet_benef_w,
	cd_ausencia_val_benef_tiss_w,
	cd_validacao_benef_tiss_w
from	pls_elegibilidade
where	nr_sequencia		= nr_seq_elegibilidade_p
and	cd_estabelecimento	= cd_estabelecimento_p;

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_prestador_w
from	pls_prestador
where	nr_sequencia	= Somente_Numero(cd_prestador_interno_w);

if (nr_seq_prestador_w	= 0) then
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_prestador_w
	from	pls_prestador
	where	cd_prestador	= cd_prestador_interno_w;
end if;

if (nr_seq_prestador_w = 0) and (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_prestador_w
	from	pls_prestador
	where	cd_cgc	= cd_cgc_w;
end if;

if (nr_seq_prestador_w = 0) and (nr_cpf_w IS NOT NULL AND nr_cpf_w::text <> '') then

	select	coalesce(max(b.nr_sequencia),0)
	into STRICT	nr_seq_prestador_w
	from	pessoa_fisica a,
		pls_prestador b
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	a.nr_cpf	= nr_cpf_w;
end if;

if (nr_seq_prestador_w = 0) then
	CALL pls_gravar_glosa_eleg('1203', nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p);
end if;

select	coalesce(max(nr_seq_segurado),0),
	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_segurado_w,
	nr_seq_carteira_w
from	pls_segurado_carteira
where	cd_usuario_plano	= cd_usuario_plano_w;

if (nr_seq_segurado_w = 0) then

	select	coalesce(max(nr_seq_segurado),0),
		coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_segurado_w,
		nr_seq_carteira_w
	from	pls_segurado_cart_ant
	where	cd_usuario_ant	= cd_usuario_plano_w;

	if (nr_seq_segurado_w <> 0) then

		select	fim_dia(coalesce(dt_validade,clock_timestamp()))
		into STRICT	dt_validade_w
		from	pls_segurado_cart_ant
		where	nr_sequencia	= nr_seq_carteira_w;
	end if;
else
	select	fim_dia(coalesce(dt_validade_carteira,clock_timestamp()))
	into STRICT	dt_validade_w
	from	pls_segurado_carteira
	where	nr_sequencia	= nr_seq_carteira_w;
end if;

select	coalesce(max(ie_tipo_segurado),'I')
into STRICT	ie_tipo_segurado_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_w;

--Tratamento para enviar transacao 00412 Consulta de Dados do Beneficiario
if	((ie_enviar_automatico_w = 'S') and
	((nr_seq_segurado_w = 0) or (ie_tipo_segurado_w in ('I','H')))) then
	begin
		select	ds_consulta_dados_benef,
			ds_ip_proxy,
			ds_porta_proxy,
			ds_usuario_proxy,
			ds_senha_proxy,
			ds_senha_certificado,
			ds_caminho_certificado,
			ds_webservice_envio,
			ds_porta
		into STRICT	ds_consulta_dados_benef_w,
			ds_ip_proxy_w,
			ds_porta_proxy_w,
			ds_usuario_proxy_w,
			ds_senha_proxy_w,
			ds_senha_certificado_w,
			ds_caminho_certificado_w,
			ds_webservice_envio_w,
			ds_porta_w
		from	pls_end_webservice_scs
		where	ie_situacao = 'A';

		if (ds_porta_w IS NOT NULL AND ds_porta_w::text <> '') then
			nm_beneficiario_inicial_w	:= nm_beneficiario_w;

			select	position(' ' in nm_beneficiario_inicial_w)
			into STRICT	ie_separa_nome_w
			;

			select	substr(nm_beneficiario_inicial_w, 0, ie_separa_nome_w)
			into STRICT	nm_benef_consulta_w
			;

			nr_seq_consulta_benef_w := ptu_env_pck.ptu_env_00412_v70(	substr(lpad(cd_usuario_plano_w,17,'0'),1,4), lpad(cd_usuario_plano_w,17,'0'), nm_benef_consulta_w, '', null, nr_versao_scs_w, cd_estabelecimento_w, nm_usuario_p, nr_cpf_w, nr_cartao_nac_sus_w, null, nr_seq_consulta_benef_w);

			if (nr_versao_scs_w = '070') then
				url_w	:= 'http://' || ds_webservice_envio_w || ':' || ds_porta_w || '/SCS70Server/WScsServletProcessor';
				nr_seq_projeto_w := 101986;
			elsif (nr_versao_scs_w = '080') then
				url_w	:= 'http://' || ds_webservice_envio_w || ':' || ds_porta_w || '/SCS80Server/WScsServletProcessor';
				nr_seq_projeto_w := 102923;
			elsif (nr_versao_scs_w = '090') then
				url_w	:= 'http://' || ds_webservice_envio_w || ':' || ds_porta_w || '/SCS90Server/WScsServletProcessor';
				nr_seq_projeto_w := 103270;
			end if;
			utl_http.set_transfer_timeout(30);

			ds_parametros_w	:= 	'xml='				||
						'<nrSequenciaProjeto>'		|| nr_seq_projeto_w		|| '</nrSequenciaProjeto>'||
						'<cdTransacaoWebService>'	|| 30				|| '</cdTransacaoWebService>' ||
						'<nrSequenciaTransacao>'	|| nr_seq_consulta_benef_w	|| '</nrSequenciaTransacao>' ||
						'<nmUsuario>'			|| nm_usuario_p			|| '</nmUsuario>' ||
						'<cdEstabelecimento>'		|| cd_estabelecimento_w		|| '</cdEstabelecimento>' ||
						'<urlWSDLServico>'		|| ds_consulta_dados_benef_w	|| '</urlWSDLServico>' ||
						'<ipProxy>'			|| ds_ip_proxy_w		|| '</ipProxy>' ||
						'<portaProxy>'			|| ds_porta_proxy_w		|| '</portaProxy>' ||
						'<usuarioProxy>'		|| ds_usuario_proxy_w		|| '</usuarioProxy>' ||
						'<senhaProxy>'			|| ds_senha_proxy_w		|| '</senhaProxy>' ||
						'<senhaCertificado>'		|| ds_senha_certificado_w	|| '</senhaCertificado>' ||
						'<caminhoCertificado>'		|| ds_caminho_certificado_w	|| '</caminhoCertificado>';

			req_w           := utl_http.begin_request(url_w , method => 'POST');
			utl_http.set_header(req_w, 'user-agent', 'mozilla/4.0');
			utl_http.set_header(r => req_w, name => 'Content-Type', value => 'application/x-www-form-urlencoded;charset=utf-8');
			utl_http.set_header(r => req_w, name => 'Content-Length', value => length(ds_parametros_w));
			utl_http.write_text(r => req_w, data => ds_parametros_w);

			res_w := utl_http.get_response(req_w);

			utl_http.read_line(res_w, ds_resposta_w);

			utl_http.end_response(res_w);

			ds_retorno_w		:= substr(ds_resposta_w, 1, 5);

			if (ds_retorno_w = 'ERRO#') then
				nr_seq_execucao_w := 0;
			else
				nr_seq_execucao_w := (trim(both regexp_replace(ds_resposta_w, '[[:space:]]',' ')))::numeric;
			end if;
		end if;
	exception
	when others then
		nr_seq_execucao_w := 0;
	end;
end if;

if (nr_seq_execucao_w > 0) then
	begin
		select	nr_sequencia,
			ie_confirmacao
		into STRICT	nr_seq_resp_consulta_benef_w,
			ie_confirmacao_w
		from	ptu_resp_consulta_benef
		where	nr_seq_execucao = nr_seq_execucao_w;

		if (ie_confirmacao_w = 'S') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_dados_consulta_benef_w
			from	ptu_resp_nomes_benef
			where	nr_seq_resp_benef = nr_seq_resp_consulta_benef_w
			and	dt_validade_carteira = (SELECT	max(dt_validade_carteira)
							from	ptu_resp_nomes_benef
							where	nr_seq_resp_benef = nr_seq_resp_consulta_benef_w);

			if (nr_seq_dados_consulta_benef_w IS NOT NULL AND nr_seq_dados_consulta_benef_w::text <> '') then
				select	nm_plano,
					nm_compl_benef,
					dt_validade_carteira,
					nm_social
				into STRICT	ds_plano_w,
					nm_beneficiario_w,
					dt_validade_carteira_w,
					nm_social_w
				from	ptu_resp_nomes_benef
				where	nr_sequencia = nr_seq_dados_consulta_benef_w;
			end if;

			if (dt_validade_carteira_w < dt_transacao_w) then
				CALL pls_gravar_glosa_eleg('1017', nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p);
			end if;
		else
			CALL pls_gravar_glosa_eleg('1001', nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p);
		end if;

		insert into pls_resp_elegibilidade(
			nr_sequencia, dt_atualizacao, nm_usuario,
			cd_usuario_plano, ds_plano, cd_ans,
			dt_validade_carteira, nm_beneficiario, nr_cartao_nac_sus,
			nr_seq_elegibilidade, cd_estabelecimento, nm_usuario_nrec,
			dt_atualizacao_nrec, ie_tipo_ident_benef, cd_ident_biometria_benef,
			cd_template_biomet_benef, cd_ausencia_val_benef_tiss,cd_validacao_benef_tiss,
			nm_social_benef)
		values (nextval('pls_resp_elegibilidade_seq'), clock_timestamp(), nm_usuario_p,
			cd_usuario_plano_w, ds_plano_w, cd_ans_w,
			dt_validade_carteira_w, nm_beneficiario_w, nr_cartao_nac_sus_w,
			nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p,
			clock_timestamp(), ie_tipo_ident_benef_w, cd_ident_biometria_benef_w,
			cd_template_biomet_benef_w, cd_ausencia_val_benef_tiss_w,cd_validacao_benef_tiss_w,
			nm_social_w);
	exception
	when others then
		nr_seq_execucao_w := 0;
	end;
end if;

if (nr_seq_execucao_w = 0) then
	if (nr_seq_segurado_w = 0) then
		CALL pls_gravar_glosa_eleg('1001', nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p);
	else
		select	dt_limite_utilizacao,
			dt_rescisao
		into STRICT	dt_limite_utilizacao_w,
			dt_rescisao_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;
		
		if (dt_limite_utilizacao_w IS NOT NULL AND dt_limite_utilizacao_w::text <> '') then
			dt_limite_validacao_w := dt_limite_utilizacao_w;
		else
			dt_limite_validacao_w := dt_rescisao_w;
		end if;

		if (dt_limite_validacao_w IS NOT NULL AND dt_limite_validacao_w::text <> '') and (trunc(dt_limite_validacao_w) < trunc(dt_transacao_w)) then
			CALL pls_gravar_glosa_eleg('1006', nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p);
		end if;

		if (dt_validade_w < dt_transacao_w) then
			CALL pls_gravar_glosa_eleg('1017', nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p);
		end if;
	end if;

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_segurado_w
	from	pls_segurado a,
		pls_segurado_carteira b
	where	b.nr_seq_segurado = a.nr_sequencia
	and	b.cd_usuario_plano = cd_usuario_plano_w;

	if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
		select	pls_obter_dados_segurado(nr_sequencia, 'P'),
			pls_obter_dados_segurado(nr_sequencia, 'N'),
			Substr(pls_obter_dados_segurado(nr_sequencia, 'NST'),1,70),
			pls_obter_dados_segurado(nr_sequencia, 'V'),
			pls_obter_dados_segurado(nr_sequencia, 'CNS')
		into STRICT	ds_plano_w,
			nm_beneficiario_w,
			nm_social_w,
			dt_validade_carteira_w,
			nr_cartao_nac_sus_w
		from	pls_segurado
		where	nr_sequencia = nr_seq_segurado_w;

		insert into pls_resp_elegibilidade(
			nr_sequencia, dt_atualizacao, nm_usuario,
			cd_usuario_plano, ds_plano, cd_ans,
			dt_validade_carteira, nm_beneficiario, nr_cartao_nac_sus,
			nr_seq_elegibilidade, cd_estabelecimento, nm_usuario_nrec,
			dt_atualizacao_nrec, ie_tipo_ident_benef, cd_ident_biometria_benef,
			cd_template_biomet_benef, cd_ausencia_val_benef_tiss,cd_validacao_benef_tiss,
			nm_social_benef)
		values (nextval('pls_resp_elegibilidade_seq'), clock_timestamp(), nm_usuario_p,
			cd_usuario_plano_w, ds_plano_w, cd_ans_w,
			dt_validade_carteira_w, nm_beneficiario_w, nr_cartao_nac_sus_w,
			nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p,
			clock_timestamp(), ie_tipo_ident_benef_w, cd_ident_biometria_benef_w,
			cd_template_biomet_benef_w, cd_ausencia_val_benef_tiss_w, cd_validacao_benef_tiss_w,
			nm_social_w);

	elsif (coalesce(nr_seq_segurado_w::text, '') = '') then
		insert into pls_resp_elegibilidade(
			nr_sequencia, dt_atualizacao, nm_usuario,
			cd_usuario_plano, ds_plano, cd_ans,
			dt_validade_carteira, nm_beneficiario, nr_cartao_nac_sus,
			nr_seq_elegibilidade, cd_estabelecimento, nm_usuario_nrec,
			dt_atualizacao_nrec, ie_tipo_ident_benef, cd_ident_biometria_benef,
			cd_template_biomet_benef, cd_ausencia_val_benef_tiss,cd_validacao_benef_tiss)
		values (nextval('pls_resp_elegibilidade_seq'), clock_timestamp(), nm_usuario_p,
			cd_usuario_plano_w, ds_plano_w, cd_ans_w,
			dt_validade_carteira_w, nm_beneficiario_w, nr_cartao_nac_sus_w,
			nr_seq_elegibilidade_p, cd_estabelecimento_p, nm_usuario_p,
			clock_timestamp(), ie_tipo_ident_benef_w, cd_ident_biometria_benef_w,
			cd_template_biomet_benef_w, cd_ausencia_val_benef_tiss_w,cd_validacao_benef_tiss_w
			);

	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_verifica_eleg_solic (nr_seq_elegibilidade_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

