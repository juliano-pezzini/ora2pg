-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE reg_historico_benef AS (nr_seq_segurado bigint, nr_cartao_ant varchar(30), nr_cartao_novo varchar(30));


CREATE OR REPLACE PROCEDURE pls_gravar_cartao_sus_conf_seg ( nr_seq_lote_conf_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_segurado_aux_w		bigint;
cd_pessoa_fisica_w		varchar(10);
-----------------------------------------------------------------------------------------------
nr_seq_segurado_w		bigint;
nr_seq_segurado_encontrado_w	bigint;
nr_seq_segurado_vinculado_w	bigint;
nm_beneficiario_w		varchar(255);
nr_cns_w			varchar(20);
nr_cns_atual_w			varchar(20);
qt_registros_lidos_w		bigint;
nr_vetor_w			bigint;
i				bigint;
nr_seq_seg_historico_w		bigint;
type vetor is table of reg_historico_benef index by integer;
vetor_w				vetor;

C01 CURSOR FOR
	SELECT	nr_seq_segurado,
		nr_seq_segurado_encontrado,
		nr_seq_segurado_vinculado,
		nm_beneficiario,
		nr_cns
	from	pls_retorno_sib
	where	nr_seq_lote_sib	= nr_seq_lote_conf_p
	and	(nr_cns IS NOT NULL AND nr_cns::text <> '')
	order by nm_beneficiario,
		 nr_sequencia;


BEGIN

CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('N');

qt_registros_lidos_w	:= 0;

CALL gravar_processo_longo('Gravação do cartão SUS dos beneficiários da Operadora' ,'PLS_GRAVAR_CARTAO_SUS_CONF_SEG',0);

begin
open C01;
loop
fetch C01 into
	nr_seq_segurado_w,
	nr_seq_segurado_encontrado_w,
	nr_seq_segurado_vinculado_w,
	nm_beneficiario_w,
	nr_cns_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	nr_seq_segurado_aux_w	:= null;

	CALL gravar_processo_longo('Gravação do cartão do SUS dos beneficiários com a letra ' || substr(nm_beneficiario_w,1,1),'PLS_GRAVAR_CARTAO_SUS_CONF_SEG',-1);

	if (qt_registros_lidos_w  = 100) then
		commit;
		qt_registros_lidos_w	:= 0;
	end if;

	qt_registros_lidos_w	:= qt_registros_lidos_w + 1;

	if (nr_seq_segurado_vinculado_w IS NOT NULL AND nr_seq_segurado_vinculado_w::text <> '') then
		nr_seq_segurado_aux_w	:= nr_seq_segurado_vinculado_w;
	elsif (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
		nr_seq_segurado_aux_w	:= nr_seq_segurado_w;
	elsif (nr_seq_segurado_encontrado_w IS NOT NULL AND nr_seq_segurado_encontrado_w::text <> '') then
		nr_seq_segurado_aux_w	:= nr_seq_segurado_encontrado_w;
	else
		goto final;
	end if;

	if (nr_seq_segurado_aux_w IS NOT NULL AND nr_seq_segurado_aux_w::text <> '') then

		select	b.cd_pessoa_fisica,
			b.NR_CARTAO_NAC_SUS
		into STRICT	cd_pessoa_fisica_w,
			nr_cns_atual_w
		from	pessoa_fisica		b,
			pls_segurado		a
		where	b.cd_pessoa_fisica	= a.cd_pessoa_fisica
		and	a.nr_sequencia		= nr_seq_segurado_aux_w  LIMIT 1;

		if	((trim(both nr_cns_atual_w) <> trim(both nr_cns_w)) or (coalesce(trim(both nr_cns_atual_w)::text, '') = '')) then

			nr_vetor_w	:= vetor_w.count+1;

			vetor_w[nr_vetor_w].nr_seq_segurado	:= nr_seq_segurado_aux_w;
			vetor_w[nr_vetor_w].nr_cartao_ant	:= nr_cns_atual_w;
			vetor_w[nr_vetor_w].nr_cartao_novo	:= nr_cns_w;

			update	pessoa_fisica
			set	nr_cartao_nac_sus	= nr_cns_w,
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		end if;
	end if;

	<<final>>
	nm_beneficiario_w	:= nm_beneficiario_w;
	end;
end loop;
close C01;
exception
when others then
CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('S');
CALL wheb_mensagem_pck.exibir_mensagem_abort(215669,'DS_ERRO='||sqlerrm(SQLSTATE));
end;

i	:= 0;

for i in 1..vetor_w.count loop
	begin

	select	nextval('pls_segurado_historico_seq')
	into STRICT	nr_seq_seg_historico_w
	;

	CALL pls_gerar_segurado_historico(	vetor_w[i].nr_seq_segurado, '64', clock_timestamp(), 'Alteração do cartão SUS do beneficiário de: '|| vetor_w[i].nr_cartao_ant ||' para: '||vetor_w[i].nr_cartao_novo,
					'pls_gravar_cartao_sus_conf_seg', null, null, null,
					null, null, null, null,
					null, null, null, null,
					nm_usuario_p, 'N');
	end;
end loop;

CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('S');

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gravar_cartao_sus_conf_seg ( nr_seq_lote_conf_p bigint, nm_usuario_p text) FROM PUBLIC;

