-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duplicar_atend_bpa_aih ( nr_atend_origem_p bigint, nr_seq_interno_p bigint, ie_tipo_guia_p text, dt_internacao_p timestamp, cd_setor_atendimento_p bigint, cd_unidade_basica_p text, cd_unidade_compl_p text, nr_doc_convenio_p text, ie_clinica_p bigint, nm_usuario_p text, ie_apos_int_p text, cd_medico_resp_p text, cd_responsavel_p text, ie_atend_novo_p text, cd_procedencia_p bigint, cd_estabelecimento_p bigint, nr_atend_novo_p INOUT bigint, ie_carater_inter_sus_p text, nr_seq_classificacao_p bigint, ie_gerar_alta_atend_p text, ie_atend_tiss_p bigint default null, cd_tipo_acomodacao_p bigint default null, cd_motivo_alta_p bigint default null, ie_responsavel_p text default null, nr_seq_grau_parentesco_p bigint default null, nr_seq_classif_medico_p bigint DEFAULT NULL, dt_ving_ini_p timestamp DEFAULT NULL, dt_ving_fim_p timestamp DEFAULT NULL, qt_dia_int_p bigint DEFAULT NULL, ie_regime_internacao_p text default null) AS $body$
DECLARE


nr_atend_novo_w      bigint;
nr_seq_interno_w    bigint;
nr_seq_interno_novo_w    bigint;
nr_seq_unidade_w    bigint;
cd_processo_alta_w    bigint;
cd_motivo_alta_w    bigint;
cd_motivo_alta_ww    bigint;
cd_pessoa_fisica_w    varchar(10);
cd_unidade_basica_w    varchar(10);
cd_unidade_compl_w    varchar(10);
dt_entrada_unidade_w    timestamp;
dt_entrada_unidade_ww    timestamp;
cd_setor_atendimento_w    bigint;
cd_setor_atend_gera_saida_w  varchar(10);
ie_origem_proced_w    bigint;
cd_procedimento_w    bigint;
nr_sequencia_w      bigint;
ie_classificacao_w    varchar(5);
ds_erro_w      varchar(255);
cd_convenio_w      bigint;
cd_proc_aih_w      bigint;
cd_categoria_w      bigint;
ie_origem_proced_aih_w    bigint;
cd_tipo_acomodacao_w    bigint;
cd_usuario_convenio_w    varchar(30);
cd_empresa_w      bigint;
nr_seq_tipo_ato_w    bigint;
ie_tipo_servico_sus_w    smallint;
ie_tipo_ato_sus_w    smallint;
dt_entrada_w      timestamp;
dt_alta_w      timestamp;
cd_cgc_prestador_w    varchar(14);
cd_medico_executor_w    varchar(10);
cd_estabelecimento_w    smallint;
dt_procedimento_w    timestamp;
ie_transf_pronto_socorro_w  varchar(10);
cd_setor_atendimento_ww    integer;
nr_seq_atepacu_w    bigint;
ie_manter_setor_original_w  varchar(20);
ie_proc_excl_ambul_w    varchar(1);
ie_setor_ps_w      varchar(1);
ie_gera_proc_w      varchar(1)  := 'S';
ie_cons_proc_tipo_atend_w  varchar(1);
ie_proc_incons_w    varchar(1);
nr_prontuario_w      bigint;
ie_alta_cid_w      varchar(1);
ds_erro_cid_w      varchar(255);
ie_se_cid_w      varchar(10);
ie_transf_laudo_sus_w    varchar(1) := 'N';
ie_permite_passagem_inf_w  varchar(1);
ie_interna_com_alta_w    varchar(1) := 'N';
cd_plano_convenio_w    varchar(10);
ie_tipo_guia_w      varchar(2);
ie_internar_sem_dt_alta_w  varchar(2);
ie_dt_saida_igual_dt_entrada_w  varchar(2);
ie_gera_saida_unidade_w    varchar(1) := 'S';
ie_somente_laudo_aih_w    varchar(1) := 'N';
ie_transfere_prescr_w    varchar(1) := 'N';
ds_setores_geram_saida_w  varchar(255);
qt_dias_internar_laudo_w  bigint := 30;
ie_regra_tipo_atend_w    varchar(1):= 'A';
ie_atualizar_atend_guia_tiss_w  varchar(15) := 'N';
nr_interno_conta_nova_w    bigint;
qt_proc_bpa_w      bigint;
nr_interno_conta_ant_w    bigint;
ie_gerar_conta_aih_w    varchar(15) := 'N';
nr_atend_origem_bpa_w    bigint;
ie_grava_atend_w    varchar(5);
nr_acompanhante_dieta_w    smallint;
qt_acomp_dieta_w    smallint;
ie_lib_diet_w      varchar(15);
ie_lib_dieta_conv_w    varchar(15);
nr_seq_regra_acomp_w    bigint;
ie_atualizar_dieta_lib_conv_w  varchar(1);
ie_utiliza_data_intern_alta_w  varchar(1);
ie_atualiza_vigencia_atecaco_w  varchar(1);
ie_fecha_atend_bpa_w    varchar(15) := 'N';
qtd_internado_w      bigint := 0;
dt_entrada_origem_w    timestamp;
nr_seq_classif_w    bigint;
qt_idade_w      bigint;
nr_seq_evento_w      bigint;
nr_acompanhante_w      smallint;
qt_dieta_acomp_w        smallint;
ie_gerar_pagador_atend_w  varchar(1);
qt_idade_min_pagador_w    bigint;
ds_msg_idade_pagador_w    varchar(255);
ds_setores_w      varchar(4000);
dt_entrada_novo_atend_w    timestamp;
ie_existe_w      varchar(1);
ie_transf_diag_interna_bpa_w  sus_parametros_aih.ie_transf_diag_interna_bpa%type;
ie_clinica_laudo_int_bpa_w  sus_parametros_aih.ie_clinica_laudo_int_bpa%type;
ie_opcao_med_resp_w    varchar(15);
ie_internar_bpa_lotes_w  varchar(1);
ie_replicar_diag_w  		varchar(1);
ie_replicar_diagnostico_w   varchar(1);
ie_troca_setor_prescr_w     varchar(5);
cd_unidade_basica_atend_w	varchar(10);
cd_unidade_compl_atend_w	varchar(10);
cd_setor_ant_w				integer;
ds_leito_w					varchar(10);
ds_leito_ant_w				varchar(10);


c01 CURSOR FOR
SELECT  a.nr_sequencia,
  a.cd_procedimento,
  a.ie_origem_proced,
  b.ie_classificacao,
  a.cd_cgc_prestador,
  a.cd_medico_executor,
  a.dt_procedimento,
  a.cd_setor_atendimento
from  procedimento b,
  procedimento_paciente a,
  conta_paciente c
where  a.nr_atendimento  = nr_atend_origem_p
and  a.nr_interno_conta  = c.nr_interno_conta
and  c.ie_status_acerto  = 1
and  a.cd_procedimento  = b.cd_procedimento
and  a.ie_origem_proced  = b.ie_origem_proced
and  coalesce(a.cd_motivo_exc_conta::text, '') = ''
and     ((ie_apos_int_p  = 'S' AND a.dt_procedimento > dt_internacao_p) or (ie_apos_int_p = 'N'))
and  (((ie_proc_excl_ambul_w = 'S') and not exists (  SELECT  1
              from  sus_regra_proc_troc_atend x
              where  x.cd_procedimento   = a.cd_procedimento
              and  x.ie_origem_proced   = a.ie_origem_proced
              and  x.ie_situacao    = 'A')) or (ie_proc_excl_ambul_w = 'N'))
order by a.dt_procedimento;

c02 CURSOR FOR
SELECT  m.nr_sequencia,
  cd_setor_atendimento
from  material_atend_paciente m,
  conta_paciente c
where  m.nr_atendimento    = nr_atend_origem_p
and  m.nr_interno_conta    = c.nr_interno_conta
and  c.ie_status_acerto    = 1
and     ((ie_apos_int_p  = 'S' AND m.dt_atendimento > dt_internacao_p) or (ie_apos_int_p = 'N'));

C03 CURSOR FOR
  SELECT  nr_seq_evento
  FROM  regra_envio_sms
  WHERE  cd_estabelecimento  = cd_estabelecimento_w
  AND  ie_evento_disp    = 'IP'
  AND  (((nr_seq_classif IS NOT NULL AND nr_seq_classif::text <> '') AND (coalesce(nr_seq_classif, nr_seq_classif_w) = nr_seq_classif_w)) OR
     ((coalesce(nr_seq_classif::text, '') = '') AND (obter_classif_regra_pf(nr_sequencia,coalesce(nr_seq_classif_w,nr_seq_classif_w)) = 'S')) OR     
     ((coalesce(nr_seq_classif,nr_seq_classif_w) = nr_seq_classif_w) AND (obter_classif_regra_pf(nr_sequencia,coalesce(nr_seq_classif_w,nr_seq_classif_w)) = 'N')))  
  and  qt_idade_w between coalesce(qt_idade_min,0)  and coalesce(qt_idade_max,9999)
  and  (((cd_setor_atendimento IS NOT NULL AND cd_setor_atendimento::text <> '') and (coalesce(cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p)) or
    ((coalesce(cd_setor_atendimento::text, '') = '') and (obter_se_sms_setor_alerta(nr_atend_novo_p,nr_sequencia) = 'S')))
  AND  coalesce(ie_situacao,'A') = 'A';


BEGIN

select  coalesce(max(ie_permite_pass_inf_prim_pass),'S')
into STRICT  ie_permite_passagem_inf_w
from  parametro_atendimento
where  cd_estabelecimento = cd_estabelecimento_p;

select  cd_pessoa_fisica,
  cd_estabelecimento,
  dt_entrada
into STRICT  cd_pessoa_fisica_w,
  cd_estabelecimento_w,
  dt_entrada_origem_w
from  atendimento_paciente
where  nr_atendimento  = nr_atend_origem_p;


qt_idade_w  := coalesce(obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A'),0);
nr_seq_classif_w  := obter_classificacao_pf(cd_pessoa_fisica_w);

cd_motivo_alta_w := obter_param_usuario(916, 346, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, cd_motivo_alta_w);
ie_utiliza_data_intern_alta_w := Obter_param_usuario(916, 960, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_utiliza_data_intern_alta_w);
ie_atualiza_vigencia_atecaco_w := Obter_param_usuario(916, 985, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_atualiza_vigencia_atecaco_w);
ie_atualizar_dieta_lib_conv_w := obter_param_usuario(916, 466, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_atualizar_dieta_lib_conv_w);
ie_gerar_pagador_atend_w := Obter_param_usuario(916, 394, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_pagador_atend_w);
qt_idade_min_pagador_w := Obter_param_Usuario(916, 149, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, qt_idade_min_pagador_w);
ie_replicar_diag_w := obter_param_usuario(916, 429, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_replicar_diag_w);
ie_replicar_diagnostico_w := Obter_param_Usuario(916, 1163, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_replicar_diagnostico_w);
ie_troca_setor_prescr_w := Obter_param_usuario(916, 412, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_troca_setor_prescr_w);

if   not(cd_motivo_alta_w > 0) then

  select  somente_numero(coalesce(vl_parametro, vl_parametro_padrao))
  into STRICT  cd_motivo_alta_w
  from  funcao_parametro
  where  cd_funcao = 0
  and  nr_sequencia = 30;

end if;

begin
  select  cd_motivo_alta
  into STRICT  cd_motivo_alta_ww
  from  motivo_alta
  where  cd_motivo_alta = cd_motivo_alta_w  LIMIT 1;
exception
  when others then
  cd_motivo_alta_w := cd_motivo_alta_p;
end;

If (cd_motivo_alta_p IS NOT NULL AND cd_motivo_alta_p::text <> '') then
  cd_motivo_alta_w := cd_motivo_alta_p;
End if;

ie_transf_pronto_socorro_w    := coalesce(obter_valor_param_usuario(916,298,obter_perfil_ativo,nm_usuario_p,0),'N');
ie_manter_setor_original_w    := coalesce(obter_valor_param_usuario(916,325,obter_perfil_ativo,nm_usuario_p, cd_estabelecimento_w),'N');
ie_proc_excl_ambul_w    := coalesce(obter_valor_param_usuario(1125,38,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
ie_setor_ps_w      := coalesce(obter_valor_param_usuario(916,367,obter_perfil_ativo,nm_usuario_p,0),'S');
ie_cons_proc_tipo_atend_w    := coalesce(obter_valor_param_usuario(916,437,obter_perfil_ativo,nm_usuario_p,0),'N');
ie_transf_laudo_sus_w    := coalesce(obter_valor_param_usuario(1123,95,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
ie_interna_com_alta_w    := coalesce(obter_valor_param_usuario(916,491,obter_perfil_ativo,nm_usuario_p,0),'N');
ie_internar_sem_dt_alta_w    := coalesce(obter_valor_param_usuario(916,592,obter_perfil_ativo,nm_usuario_p,0),'N');
ie_dt_saida_igual_dt_entrada_w  := coalesce(obter_valor_param_usuario(916,595,obter_perfil_ativo,nm_usuario_p,0),'N');
ie_gera_saida_unidade_w    := coalesce(obter_valor_param_usuario(916,620,obter_perfil_ativo,nm_usuario_p,0),'S');
ds_setores_geram_saida_w  := coalesce(obter_valor_param_usuario(916,791,obter_perfil_ativo,nm_usuario_p,0),'');
ie_somente_laudo_aih_w    := coalesce(obter_valor_param_usuario(1123,141,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
ie_transfere_prescr_w    := coalesce(obter_valor_param_usuario(916,741,obter_perfil_ativo,nm_usuario_p,0),'N');
ie_gerar_conta_aih_w    := coalesce(obter_valor_param_usuario(1123,177,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
ie_internar_bpa_lotes_w    := coalesce(obter_valor_param_usuario(916,1146,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
begin
qt_dias_internar_laudo_w  := coalesce(obter_valor_param_usuario(1123,167,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),30);
exception
when others then
  qt_dias_internar_laudo_w := 30;
end;
ie_atualizar_atend_guia_tiss_w   := coalesce(obter_valor_param_usuario(916,846,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
ie_fecha_atend_bpa_w     := coalesce(obter_valor_param_usuario(916,1070,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'N');
ie_opcao_med_resp_w    := coalesce(obter_valor_param_usuario(1123,243,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'Amb');

select   count(*)
into STRICT     qtd_internado_w
from     atendimento_paciente
where   ((nr_atend_original = nr_atend_origem_p) or ((coalesce(nr_atend_original::text, '') = '') and nr_atend_origem_pa = nr_atend_origem_p))
and  cd_pessoa_fisica = obter_pessoa_atendimento(nr_atend_origem_p,'C')
and  coalesce(dt_cancelamento::text, '') = '';

if (ie_atend_novo_p  = 'S') and (qtd_internado_w = 0) then
  begin
  
  ie_grava_atend_w := obter_param_usuario(916, 910, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_grava_atend_w);

  if (ie_grava_atend_w = 'S') then
    nr_atend_origem_bpa_w := nr_atend_origem_p;
  end if;

  select  coalesce(obter_valor_param_usuario(3111, 38, obter_perfil_ativo, nm_usuario_p, 0),'S')
  into STRICT  ie_alta_cid_w
;


  ds_erro_cid_w  := null;
  if (ie_alta_cid_w = 'D') then
    ds_erro_cid_w := verifica_se_obriga_cid( nr_atend_origem_p, cd_motivo_alta_w, ds_erro_cid_w);
  end if;

  select  obter_cid_atendimento( nr_atend_origem_p,'P')
  into STRICT  ie_se_cid_w
;

  if (ie_alta_cid_w = 'N') and (coalesce(ie_se_cid_w::text, '') = '') then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(185683);
  elsif (ds_erro_cid_w IS NOT NULL AND ds_erro_cid_w::text <> '') and (coalesce(ie_se_cid_w::text, '') = '') then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(185793,'DS_ERRO_CID_W=' || DS_ERRO_CID_W);
  end if;

  if (coalesce(ie_gerar_alta_atend_p,'N') = 'S') and (coalesce(cd_motivo_alta_p::text, '') = '') then
    --'E necessario informar o motivo de alta.
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(200673);
  end if;
  
  select  coalesce(max(nr_seq_interno), 0)
  into STRICT  nr_seq_interno_w
  from  atend_paciente_unidade
  where  nr_atendimento  = nr_atend_origem_p
  and  ((coalesce(dt_saida_unidade::text, '') = '') or (ie_interna_com_alta_w = 'S'));

  if (nr_seq_interno_w = 0) then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(185800);
  end if;

  if (coalesce(cd_unidade_basica_p::text, '') = '') or (coalesce(cd_unidade_compl_p::text, '') = '') then    
      CALL wheb_mensagem_pck.exibir_mensagem_abort(236366);
  end if;

  /*Inicio alta nova*/

  dt_entrada_novo_atend_w := dt_internacao_p;

  select  max(a.cd_processo_alta)
  into STRICT  cd_processo_alta_w
  from  convenio a,
    atendimento_paciente_v b
  where  b.cd_convenio    = a.cd_convenio
  and  b.nr_atendimento  = nr_atend_origem_p;

  if (coalesce(ie_gerar_alta_atend_p,'N') = 'S') then
    begin
    /* 05 minutos antes da internacao do paciente    
    select  dt_entrada - (1 / 12 / 24) 
    into  dt_alta_w
    from  atendimento_paciente
    where  nr_atendimento  = nr_atend_novo_w;
    */
    
    if (ie_utiliza_data_intern_alta_w = 'S') then
      dt_alta_w := dt_entrada_novo_atend_w;
    else
      dt_alta_w := dt_entrada_novo_atend_w - (1 / 12 / 24);
    end if;

    if (dt_entrada_origem_w IS NOT NULL AND dt_entrada_origem_w::text <> '') and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (dt_alta_w < dt_entrada_origem_w) then
      
      dt_alta_w :=  dt_entrada_origem_w;
      
      select  max(dt_entrada_unidade)
      into STRICT  dt_entrada_unidade_ww
      from  atend_paciente_unidade
      where  nr_atendimento = nr_atend_origem_p;

      if (dt_alta_w < coalesce(dt_entrada_unidade_ww,dt_alta_w)) then
        dt_alta_w := dt_entrada_unidade_ww;
      end if;

    end if;

    ds_erro_w := gerar_estornar_alta(  nr_atend_origem_p, 'A', cd_processo_alta_w, cd_motivo_alta_w, dt_alta_w, nm_usuario_p, ds_erro_w, 0, null, null);
    end;
  end if;
  
  if (coalesce(ie_fecha_atend_bpa_w,'N') = 'S') then
    begin    
    ds_erro_w := finalizar_atendimento(nr_atend_origem_p, 'S', nm_usuario_p, ds_erro_w);
    end;
  end if;

  if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(185805,'DS_ERRO_W=' || DS_ERRO_W);
  end if;
  /*Fim alta nova*/


  
  /* matheus os 182242 substituido pela function e procedure abaixo
  update  pessoa_fisica
  set  nr_prontuario = prontuario_seq.nextval
  where  cd_pessoa_fisica = cd_pessoa_fisica_w
  and  nr_prontuario is null;*/
  nr_prontuario_w  := coalesce(obter_prontuario_pf(cd_estabelecimento_w, cd_pessoa_fisica_w),0);

  if (nr_prontuario_w = 0) then
    nr_prontuario_w := gerar_prontuario_pac(cd_estabelecimento_w, cd_pessoa_fisica_w, 'N', nm_usuario_p, nr_prontuario_w);
  end if;

  select  nextval('atendimento_paciente_seq')
  into STRICT  nr_atend_novo_w
;

  insert  into atendimento_paciente(nr_atendimento,     cd_pessoa_fisica,     cd_estabelecimento,
    cd_procedencia,      
    dt_entrada,       ie_tipo_atendimento,     dt_atualizacao, 
    nm_usuario,
    cd_medico_resp, 
    cd_motivo_alta, 
    ds_sintoma_paciente,     ds_observacao,
    dt_alta, 
    ie_clinica, 
    nm_usuario_atend, 
    ie_responsavel,
    dt_fim_conta,       ie_fim_conta,     nr_cat, 
    ds_causa_externa,    cd_cgc_seguradora,   nr_bilhete, 
    nr_serie_bilhete,
    ie_carater_inter_sus,
    ie_vinculo_sus,     ie_tipo_convenio,     ie_tipo_atend_bpa, 
    ie_grupo_atend_bpa,    cd_medico_atendimento,     
    dt_alta_interno, 
    nr_seq_unid_atual,     nr_seq_unid_int,    nr_atend_original, 
    dt_atend_original,     qt_dia_longa_perm,     dt_inicio_atendimento, 
    ie_permite_visita,    ie_status_atendimento,     dt_previsto_alta, 
    nm_usuario_alta, 
    cd_pessoa_responsavel,
    dt_atend_medico,     dt_saida_real,       ie_clinica_alta, 
    dt_fim_consulta,    dt_medicacao,       dt_lib_medico, 
    nr_seq_regra_funcao,     nr_seq_local_pa,    nr_seq_tipo_acidente, 
    dt_ocorrencia,       ds_pend_autorizacao,     nr_seq_check_list,
    dt_fim_triagem,     nr_reserva_leito, 
    ie_paciente_isolado, 
    ie_permite_visita_rel,     ie_modo_internacao,     nr_seq_classificacao, 
    ie_tipo_atend_tiss,    nr_atend_origem_pa, 
    nr_seq_classif_medico,
    nr_seq_grau_parentesco,
    nr_atend_origem_bpa)
  SELECT  nr_atend_novo_w,    cd_pessoa_fisica,    cd_estabelecimento, 
    coalesce(cd_procedencia_p,cd_procedencia),
    dt_entrada_novo_atend_w,  1,         clock_timestamp(),     
    nm_usuario_p,
    coalesce(cd_medico_resp_p,cd_medico_resp),
    CASE WHEN ie_internar_sem_dt_alta_w='N' THEN cd_motivo_alta WHEN ie_internar_sem_dt_alta_w='S' THEN null END ,
    ds_sintoma_paciente,     ds_observacao,
    CASE WHEN ie_internar_sem_dt_alta_w='N' THEN dt_alta WHEN ie_internar_sem_dt_alta_w='S' THEN null END , 
    coalesce(ie_clinica_p, ie_clinica), 
    nm_usuario_atend,
    coalesce(ie_responsavel_p,ie_responsavel),
    dt_fim_conta,       ie_fim_conta,       nr_cat, 
    ds_causa_externa,    cd_cgc_seguradora,     nr_bilhete, 
    nr_serie_bilhete, 
    coalesce(ie_carater_inter_sus_p,ie_carater_inter_sus),
    ie_vinculo_sus,     ie_tipo_convenio,     ie_tipo_atend_bpa, 
    ie_grupo_atend_bpa,    cd_medico_atendimento,
    CASE WHEN ie_internar_sem_dt_alta_w='N' THEN dt_alta_interno WHEN ie_internar_sem_dt_alta_w='S' THEN null END , 
    nr_seq_unid_atual,     nr_seq_unid_int,    nr_atend_original, 
    dt_atend_original,     qt_dia_longa_perm,     dt_inicio_atendimento, 
    ie_permite_visita,    ie_status_atendimento,     dt_previsto_alta, 
    CASE WHEN ie_internar_sem_dt_alta_w='N' THEN nm_usuario_alta WHEN ie_internar_sem_dt_alta_w='S' THEN null END , 
    coalesce(cd_responsavel_p,cd_pessoa_responsavel),
    dt_atend_medico,     dt_saida_real,       ie_clinica_alta, 
    dt_fim_consulta,    dt_medicacao,       dt_lib_medico, 
    nr_seq_regra_funcao,     nr_seq_local_pa,    nr_seq_tipo_acidente,
    dt_ocorrencia,       ds_pend_autorizacao,     nr_seq_check_list,
    dt_fim_triagem,     nr_reserva_leito, 
    coalesce(ie_paciente_isolado,'N'), 
    ie_permite_visita_rel,     'BPA',         nr_seq_classificacao_p, 
    ie_atend_tiss_p,     nr_atend_origem_bpa_w,
    coalesce(nr_seq_classif_medico_p,nr_seq_classif_medico),
    coalesce(nr_seq_grau_parentesco_p,nr_seq_grau_parentesco),
    nr_atend_origem_p
  from  atendimento_paciente
  where  nr_atendimento  = nr_atend_origem_p;

  select  max(cd_convenio),
    max(cd_categoria),
    max(cd_empresa),
    max(cd_tipo_acomodacao),
    max(cd_usuario_convenio),
    max(cd_plano_convenio),
    max(ie_tipo_guia)
  into STRICT  cd_convenio_w,
    cd_categoria_w,
    cd_empresa_w,
    cd_tipo_acomodacao_w,
    cd_usuario_convenio_w,
    cd_plano_convenio_w,
    ie_tipo_guia_w
  from  atend_categoria_convenio
  where  nr_seq_interno    = nr_seq_interno_p;

  select  max(ie_lib_dieta)
  into STRICT  ie_lib_dieta_conv_w
  from  atend_categoria_convenio
  where  nr_seq_interno = nr_seq_interno_p;

  if (ie_atualizar_dieta_lib_conv_w = 'S') and (ie_lib_dieta_conv_w = 'N') then
    SELECT * FROM Obter_Dados_Dieta_Categ_Conv(cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_pessoa_fisica_w, nr_acompanhante_dieta_w, qt_acomp_dieta_w, ie_lib_diet_w, nr_seq_regra_acomp_w, coalesce(nr_atend_novo_w,nr_atend_origem_p)) INTO STRICT nr_acompanhante_dieta_w, qt_acomp_dieta_w, ie_lib_diet_w, nr_seq_regra_acomp_w;

    if (coalesce(nr_acompanhante_dieta_w,0) > 0) then
      nr_acompanhante_w := nr_acompanhante_dieta_w;
    end if;

    if (coalesce(qt_acomp_dieta_w,0) > 0) then
      qt_dieta_acomp_w := qt_acomp_dieta_w;
    end if;
  end if;

  if (coalesce(cd_convenio_w,0) > 0) then
    insert  into atend_categoria_convenio(nr_atendimento, cd_convenio, cd_categoria, dt_inicio_vigencia,
      dt_final_vigencia, dt_atualizacao, nm_usuario, cd_usuario_convenio,
      cd_empresa, nr_doc_convenio, cd_tipo_acomodacao, ie_tipo_guia,
      nr_seq_interno, cd_plano_convenio, qt_dieta_acomp, nr_acompanhante, 
      ie_lib_dieta, nr_seq_regra_acomp, qt_dia_internacao, ie_regime_internacao)
    values (nr_atend_novo_w, cd_convenio_w, cd_categoria_w, coalesce(dt_ving_ini_p,dt_internacao_p),
      coalesce(dt_ving_fim_p,null), clock_timestamp(), nm_usuario_p, cd_usuario_convenio_w,
      cd_empresa_w, nr_doc_convenio_p, cd_tipo_acomodacao_w, coalesce(ie_tipo_guia_p,ie_tipo_guia_w),
      nextval('atend_categoria_convenio_seq'), cd_plano_convenio_w, qt_acomp_dieta_w, nr_acompanhante_dieta_w,
      coalesce(ie_lib_diet_w,ie_lib_dieta_conv_w), nr_seq_regra_acomp_w,coalesce(qt_dia_int_p,null),ie_regime_internacao_p);
  end if;

  select  cd_setor_atendimento,
    cd_unidade_basica,
    cd_unidade_compl
  into STRICT  cd_setor_atendimento_w,
    cd_unidade_basica_w,
    cd_unidade_compl_w
  from  atend_paciente_unidade
  where  nr_seq_interno  = nr_seq_interno_w;

  if (ie_setor_ps_w = 'N') and (obter_classif_setor(cd_setor_atendimento_w) <> 1)  then

    if (ie_permite_passagem_inf_w = 'N') then
      CALL gerar_passagem_setor_atend(nr_atend_novo_w, cd_setor_atendimento_w, dt_internacao_p + (2/24/60/60), 'N', nm_usuario_p);
    else
      CALL gerar_passagem_setor_atend(nr_atend_novo_w, cd_setor_atendimento_w, dt_internacao_p, 'N', nm_usuario_p);
    end if;

  elsif (ie_setor_ps_w = 'S') and (obter_classif_setor(cd_setor_atendimento_w) = 1)  then

    if (ie_permite_passagem_inf_w = 'N') then
      CALL gerar_passagem_setor_atend(nr_atend_novo_w, cd_setor_atendimento_w, dt_internacao_p + (2/24/60/60), 'N', nm_usuario_p);
    else
      CALL gerar_passagem_setor_atend(nr_atend_novo_w, cd_setor_atendimento_w, dt_internacao_p, 'N', nm_usuario_p);
    end if;

  end if;

  /*if  (ie_setor_ps_w = 'N') and
    (obter_classif_setor(cd_setor_atendimento_w) <> 1)  then

    gerar_passagem_setor_atend(nr_atend_novo_w, cd_setor_atendimento_w, dt_internacao_p, 'N', nm_usuario_p);

  else

    gerar_passagem_setor_atend(nr_atend_novo_w, cd_setor_atendimento_w, dt_internacao_p, 'N', nm_usuario_p);

  end if;*/
  select  nextval('atend_paciente_unidade_seq')
  into STRICT  nr_seq_interno_novo_w
;

  select  coalesce(max(nr_sequencia),0) + 1
  into STRICT  nr_seq_unidade_w
  from   atend_paciente_unidade
  where  nr_atendimento    = nr_atend_novo_w;

  begin
  SELECT  coalesce(max('S'), 'N')
  into STRICT   ie_existe_w
  FROM  tipo_acomodacao
  where   cd_tipo_acomodacao = cd_tipo_acomodacao_p;
  if (ie_existe_w = 'S') then
    cd_tipo_acomodacao_w := cd_tipo_acomodacao_p;
  else
    SELECT  coalesce(max('S'), 'N')
    into STRICT   ie_existe_w
    FROM  tipo_acomodacao
    where   cd_tipo_acomodacao = cd_tipo_acomodacao_w;
    if (ie_existe_w = 'N') then
      cd_tipo_acomodacao_w := null;
    end if;
  end if;
  exception
  when others then
  cd_tipo_acomodacao_w := null;
  end;

  insert  into atend_paciente_unidade(nr_atendimento, nr_sequencia, cd_setor_atendimento, cd_unidade_basica,
    cd_unidade_compl, dt_entrada_unidade, dt_atualizacao, nm_usuario,
    nm_usuario_original, cd_tipo_acomodacao, nr_seq_interno,ie_calcular_dif_diaria, DT_SAIDA_INTERNO)
  values  (nr_atend_novo_w, nr_seq_unidade_w, cd_setor_atendimento_p, cd_unidade_basica_p,
    cd_unidade_compl_p, dt_internacao_p + (1/24/60/60)/*um segundo*/
, clock_timestamp(), nm_usuario_p,
    nm_usuario_p, cd_tipo_acomodacao_w, nr_seq_interno_novo_w, 'S', clock_timestamp() + interval '3647 days');

  CALL limpar_dados_local_PA_mov(cd_setor_atendimento_p, nr_atend_novo_w, nm_usuario_p);

  select  max(nr_seq_interno)
  into STRICT  nr_seq_interno_novo_w
  from  atend_paciente_unidade
  where  nr_atendimento  = nr_atend_novo_w;

  select  coalesce(max(cd_setor_atendimento),'0')
  into STRICT  cd_setor_atend_gera_saida_w
  from  atend_paciente_unidade
  where  nr_seq_interno = obter_atepacu_paciente(nr_atend_origem_p, 'A');

  if (coalesce(ie_gera_saida_unidade_w,'S') = 'S')
  and  ((ds_setores_geram_saida_w = '') or (obter_se_contido(cd_setor_atend_gera_saida_w, ds_setores_geram_saida_w) = 'S')) then
    begin
    update  atend_paciente_unidade
    set  dt_saida_unidade  = CASE WHEN ie_dt_saida_igual_dt_entrada_w='S' THEN dt_internacao_p + (1/24/60/60)  ELSE clock_timestamp() END 
    where  nr_atendimento  = nr_atend_origem_p
    and  coalesce(dt_saida_unidade::text, '') = '';
    end;
  end if;

  /*gerar alta atendimento antigo*/
  CALL atend_paciente_unid_afterpost(nr_seq_interno_novo_w, 'I', nm_usuario_p);
  CALL atualizar_atendimento_paciente(nr_atend_novo_w);
  CALL gerar_lancamento_automatico(nr_atend_novo_w, null, 26, nm_usuario_p, null,null,null,null,null,null);
  /* fim gerar alta do atendimento antigo */



  /* inicio da rotina de conversao dos procedimentos bpa x aih */

  select  dt_entrada_unidade
  into STRICT  dt_entrada_unidade_w
  from  atend_paciente_unidade
  where  nr_seq_interno  = nr_seq_interno_novo_w;

  select  dt_entrada
  into STRICT  dt_entrada_w
  from  atendimento_paciente
  where  nr_atendimento    = nr_atend_novo_w;
  open c01;
  loop
  fetch c01 into
    nr_sequencia_w,
    cd_procedimento_w,
    ie_origem_proced_w,
    ie_classificacao_w,
    cd_cgc_prestador_w,
    cd_medico_executor_w,
    dt_procedimento_w,
    cd_setor_atendimento_ww;
  EXIT WHEN NOT FOUND; /* apply on c01 */
    ie_gera_proc_w    := obter_se_gera_proc_inter_bpa(cd_procedimento_w, ie_origem_proced_w);
    ie_proc_incons_w  := sus_consiste_proced_atend(nr_atend_novo_w, cd_procedimento_w, ie_origem_proced_w);
    if  ((ie_transf_pronto_socorro_w      = 'N') or (obter_classif_setor(cd_setor_atendimento_ww)  <> 1)) and (ie_gera_proc_w  = 'S') and
      ((ie_cons_proc_tipo_atend_w  = 'N') or
      (ie_cons_proc_tipo_atend_w  = 'S' AND ie_proc_incons_w  = 'S')) then
      if (dt_procedimento_w   < dt_entrada_w) then
        dt_procedimento_w  := dt_entrada_w;
      end if;


      if (ie_manter_setor_original_w  = 'S')  then

        update  procedimento_paciente
        set    dt_procedimento  = dt_procedimento_w
        where  nr_sequencia  = nr_sequencia_w;

        CALL transferir_gasto_atendimento(  nr_sequencia_w,
                        1,
                        nr_atend_novo_w,
                        'N',
                        'S',
                        nm_usuario_p);



      else
        update  procedimento_paciente
        set  nr_atendimento  = nr_atend_novo_w,
          nr_interno_conta   = NULL,
          nm_usuario    = nm_usuario_p,
          dt_atualizacao  = clock_timestamp(),
          nr_seq_atepacu  = nr_seq_interno_novo_w,
          cd_setor_atendimento = cd_setor_atendimento_w,
          dt_entrada_unidade  = dt_entrada_unidade_w,
          dt_procedimento    = dt_procedimento_w
        where  nr_sequencia    = nr_sequencia_w;

        if (ie_classificacao_w = 1) or (ie_classificacao_w = 3) then
          CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
        elsif (ie_classificacao_w = 2) then
          CALL atualiza_preco_servico(nr_sequencia_w, nm_usuario_p);
      end if;

      /* transferir prescr_medica */

      update  prescr_medica
      set  nr_atendimento  = nr_atend_novo_w
      where  nr_atendimento  = nr_atend_origem_p
      and  nr_prescricao   = (  SELECT   nr_prescricao
              from   procedimento_paciente
              where  nr_atendimento = nr_atend_novo_w
              and  nr_sequencia = nr_sequencia_w);

      end if;
    end if;
  end loop;
  close c01;
  /* fim da rotina de conversao dos procedimentos bpa x aih */



  /* transferir material_atend_paciente para o atendimento novo */

  open c02;
  loop
  fetch c02 into
    nr_sequencia_w,
    cd_setor_atendimento_ww;
  EXIT WHEN NOT FOUND; /* apply on c02 */

    update  material_atend_paciente
    set  nr_atendimento    = nr_atend_novo_w,
      nr_interno_conta   = NULL,
      nm_usuario    = nm_usuario_p,
      dt_atualizacao    = clock_timestamp(),
      nr_seq_atepacu    = nr_seq_interno_novo_w,
      dt_entrada_unidade  = dt_entrada_unidade_w
    where  nr_sequencia    = nr_sequencia_w;

    CALL atualiza_preco_material(nr_sequencia_w, nm_usuario_p);

    /* transferir prescr_medica */

    update  prescr_medica
    set  nr_atendimento  = nr_atend_novo_w
    where  nr_atendimento  = nr_atend_origem_p
    and  nr_prescricao   = (  SELECT   nr_prescricao
            from   material_atend_paciente
            where  nr_atendimento = nr_atend_novo_w
            and  nr_sequencia = nr_sequencia_w);

  end loop;
  close c02;

  

  /* transferir laudo_paciente */

  update  laudo_paciente a
  set  a.nr_atendimento  = nr_atend_novo_w
  where  a.nr_atendimento  = nr_atend_origem_p
  and  ((coalesce(a.nr_prescricao::text, '') = '') or (exists (SELECT  1
      from  prescr_medica x
      where  x.nr_prescricao  = a.nr_prescricao
      and  x.nr_atendimento = nr_atend_novo_w)));

  /*Alteracao para nao transferir o laudo quando a prescricao nao for transferida.*/

  if (ie_transf_laudo_sus_w = 'S') then
    begin
    update  sus_laudo_paciente
    set  nr_atendimento  = nr_atend_novo_w
    where  nr_atendimento  = nr_atend_origem_p
    and  dt_emissao between clock_timestamp() - coalesce(qt_dias_internar_laudo_w,30) and clock_timestamp()
    and  ((ie_classificacao = 1 AND ie_somente_laudo_aih_w = 'S') or (ie_somente_laudo_aih_w = 'N'));
    end;
  end if;

  /* liberar leito unidade_atendimento */

  update  unidade_atendimento
  set  nr_atendimento     = NULL,
    ie_status_unidade  = 'L',
    nm_usuario    = nm_usuario_p,
    dt_atualizacao    = clock_timestamp()
  where  nr_atendimento  = nr_atend_origem_p;

  ie_transf_diag_interna_bpa_w  := coalesce(sus_obter_parametro_aih('IE_TRANSF_DIAG_INTERNA_BPA',cd_estabelecimento_p),'N');
  ie_clinica_laudo_int_bpa_w  := coalesce(sus_obter_parametro_aih('IE_CLINICA_LAUDO_INT_BPA',cd_estabelecimento_p),'N');

  if (ie_transf_diag_interna_bpa_w = 'S') then
    CALL sus_transf_diag_atend(nr_atend_novo_w,nr_atend_origem_p,nm_usuario_p);
  end if;

  if (ie_clinica_laudo_int_bpa_w = 'S') then
    CALL sus_atualiza_clinica_atend(nr_atend_novo_w,nm_usuario_p);
  end if;

  CALL sus_atualiza_med_resp_atend(nr_atend_novo_w,ie_opcao_med_resp_w,nm_usuario_p);
  
  nr_atend_novo_p  := nr_atend_novo_w;
  
  CALL gerar_autor_regra(nr_atend_novo_p,null,null,null,null,null,'AT',nm_usuario_p,null,null,null,null,null,null,'','','');

  if (ie_replicar_diag_w = 'S') and (ie_replicar_diagnostico_w = 'S') then
    CALL REPLICA_DIAGNOSTICO_ULT_ATEND(nr_atend_novo_w, nm_usuario_p);
  end if;

  if (ie_troca_setor_prescr_w = 'S') then
    CALL atualizar_setor_prescricao(nr_atend_novo_w, cd_setor_atendimento_p, cd_setor_atendimento_w, nm_usuario_p);
  end if;

  end;
else
  begin
  update   atendimento_paciente
  set  ie_tipo_atendimento  = 1,
    dt_atualizacao    = clock_timestamp(),
    nm_usuario    = nm_usuario_p,
    cd_medico_resp    = coalesce(cd_medico_resp_p,cd_medico_resp),
    cd_pessoa_responsavel  = coalesce(cd_responsavel_p,cd_pessoa_responsavel),
    nr_seq_classif_medico  = coalesce(nr_seq_classif_medico_p,nr_seq_classif_medico),
    ie_clinica    = coalesce(ie_clinica_p, ie_clinica),
    cd_procedencia    = coalesce(cd_procedencia_p, cd_procedencia),
    nr_seq_classificacao  = coalesce(CASE WHEN nr_seq_classificacao_p=0 THEN  null  ELSE nr_seq_classificacao_p END , nr_seq_classificacao),
    ie_tipo_atend_tiss  = ie_atend_tiss_p,
    ie_responsavel    = coalesce(ie_responsavel_p,ie_responsavel),
    nr_seq_grau_parentesco  = coalesce(nr_seq_grau_parentesco_p,nr_seq_grau_parentesco),
    ie_carater_inter_sus    = coalesce(ie_carater_inter_sus_p,ie_carater_inter_sus)
  where  nr_atendimento    = nr_atend_origem_p;

  select  cd_pessoa_fisica,
    cd_estabelecimento
  into STRICT  cd_pessoa_fisica_w,
    cd_estabelecimento_w
  from  atendimento_paciente
  where  nr_atendimento  = nr_atend_origem_p;

  nr_prontuario_w  := coalesce(obter_prontuario_pf(cd_estabelecimento_w, cd_pessoa_fisica_w),0);

  if (nr_prontuario_w = 0) then
    nr_prontuario_w := gerar_prontuario_pac(cd_estabelecimento_w, cd_pessoa_fisica_w, 'N', nm_usuario_p, nr_prontuario_w);
  end if;

  /* matheus os 182242 substitutido pela procedure gerar_prontuario_pac
  update  pessoa_fisica
  set  nr_prontuario = prontuario_seq.nextval
  where  cd_pessoa_fisica = cd_pessoa_fisica_w
  and  nr_prontuario is null;*/
  select  cd_convenio,
    cd_categoria,
    cd_empresa,
    cd_tipo_acomodacao,
    cd_usuario_convenio
  into STRICT  cd_convenio_w,
    cd_categoria_w,
    cd_empresa_w,
    cd_tipo_acomodacao_w,
    cd_usuario_convenio_w
  from  atend_categoria_convenio
  where  nr_seq_interno    = nr_seq_interno_p;

  select  max(ie_lib_dieta)
  into STRICT  ie_lib_dieta_conv_w
  from  atend_categoria_convenio
  where  nr_seq_interno = nr_seq_interno_p;

  if (ie_atualizar_dieta_lib_conv_w = 'S') and (ie_lib_dieta_conv_w = 'N') then
    SELECT * FROM Obter_Dados_Dieta_Categ_Conv(cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_pessoa_fisica_w, nr_acompanhante_dieta_w, qt_acomp_dieta_w, ie_lib_diet_w, nr_seq_regra_acomp_w, coalesce(nr_atend_novo_w,nr_atend_origem_p)) INTO STRICT nr_acompanhante_dieta_w, qt_acomp_dieta_w, ie_lib_diet_w, nr_seq_regra_acomp_w;

    if (ie_lib_diet_w IS NOT NULL AND ie_lib_diet_w::text <> '') then
      update  atend_categoria_convenio  
      set  ie_lib_dieta    = ie_lib_diet_w,
        nr_seq_regra_acomp  = nr_seq_regra_acomp_w,
        qt_dieta_acomp    = CASE WHEN qt_acomp_dieta_w=0 THEN null  ELSE qt_acomp_dieta_w END ,
        nr_acompanhante    = CASE WHEN nr_acompanhante_dieta_w=0 THEN null  ELSE nr_acompanhante_dieta_w END 
      where  nr_seq_interno    = nr_seq_interno_p;
    end if;
  end if;

  update  atend_categoria_convenio
  set  dt_inicio_vigencia  = CASE WHEN ie_atualiza_vigencia_atecaco_w='S' THEN  coalesce(dt_ving_ini_p,dt_internacao_p)  ELSE dt_inicio_vigencia END ,
    dt_final_vigencia  = coalesce(dt_ving_fim_p,null),
    dt_atualizacao    = clock_timestamp(),
    nm_usuario    = nm_usuario_p,
    nr_doc_convenio    = nr_doc_convenio_p,
    ie_tipo_guia    = ie_tipo_guia_p,
    ie_regime_internacao  = coalesce(ie_regime_internacao_p, ie_regime_internacao)
  where  nr_seq_interno    = nr_seq_interno_p;


  CALL gerar_autor_regra(nr_atend_origem_p,null,null,null,null,null,'AT',nm_usuario_p,null,null,null,null,null,null,'','','');


  select  coalesce(max(nr_seq_interno), 0)
  into STRICT  nr_seq_interno_w
  from  atend_paciente_unidade
  where  nr_atendimento  = nr_atend_origem_p
  and  coalesce(dt_saida_unidade::text, '') = '';

  if (nr_seq_interno_w = 0) then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(185800);
  end if;

  select  nextval('atend_paciente_unidade_seq')
  into STRICT  nr_seq_interno_novo_w
;

  select  coalesce(max(nr_sequencia),0) + 1
  into STRICT  nr_seq_unidade_w
  from   atend_paciente_unidade
  where  nr_atendimento    = nr_atend_origem_p;

  begin
  SELECT  coalesce(max('S'), 'N')
  into STRICT   ie_existe_w
  FROM  tipo_acomodacao
  where   cd_tipo_acomodacao = cd_tipo_acomodacao_p;
  if (ie_existe_w = 'S') then
    cd_tipo_acomodacao_w := cd_tipo_acomodacao_p;
  else
    SELECT  coalesce(max('S'), 'N')
    into STRICT   ie_existe_w
    FROM  tipo_acomodacao
    where   cd_tipo_acomodacao = cd_tipo_acomodacao_w;
    if (ie_existe_w = 'N') then
      cd_tipo_acomodacao_w := null;
    end if;
  end if;
  exception
  when others then
  cd_tipo_acomodacao_w := null;
  end;

  /*gera o servico do setor antes de inserir um novo leito*/

  CALL gerar_higienizacao_leito(clock_timestamp(),nm_usuario_p,cd_estabelecimento_w,'ARI',null,nr_atend_origem_p);

  insert  into atend_paciente_unidade(nr_atendimento, nr_sequencia, cd_setor_atendimento, cd_unidade_basica,
    cd_unidade_compl, dt_entrada_unidade, dt_atualizacao, nm_usuario,
    nm_usuario_original, cd_tipo_acomodacao, nr_seq_interno,ie_calcular_dif_diaria, dt_saida_interno)
  values  (nr_atend_origem_p, nr_seq_unidade_w, cd_setor_atendimento_p, cd_unidade_basica_p,
    cd_unidade_compl_p, dt_internacao_p + (1/24/60/60)/*um segundo*/
, clock_timestamp(), nm_usuario_p,
    nm_usuario_p, cd_tipo_acomodacao_w, nr_seq_interno_novo_w, 'S', clock_timestamp() + interval '3647 days');

  CALL limpar_dados_local_PA_mov(cd_setor_atendimento_p, nr_atend_origem_p, nm_usuario_p);

  select  max(nr_seq_interno)
  into STRICT  nr_seq_interno_novo_w
  from  atend_paciente_unidade
  where  nr_atendimento  = nr_atend_origem_p;

  update  atend_paciente_unidade
  set  dt_saida_unidade  = CASE WHEN ie_dt_saida_igual_dt_entrada_w='S' THEN dt_internacao_p + (1/24/60/60)  ELSE clock_timestamp() END
  where  nr_atendimento    = nr_atend_origem_p
  and  coalesce(dt_saida_unidade::text, '') = ''
  and  nr_sequencia  <> nr_seq_unidade_w;

  CALL atend_paciente_unid_afterpost(nr_seq_interno_novo_w, 'I', nm_usuario_p);
  CALL atualizar_atendimento_paciente(nr_atend_origem_p);
  CALL gerar_lancamento_automatico(nr_atend_origem_p, null, 26, nm_usuario_p, null,null,null,null,null,null);
  /* fim gerar alta do atendimento antigo */




  /* inicio da rotina de conversao dos procedimentos bpa x aih */

  select  dt_entrada_unidade
  into STRICT  dt_entrada_unidade_w
  from  atend_paciente_unidade
  where  nr_seq_interno  = nr_seq_interno_novo_w;

  select  dt_entrada
  into STRICT  dt_entrada_w
  from  atendimento_paciente
  where  nr_atendimento    = nr_atend_origem_p;

  if (ie_gerar_conta_aih_w = 'S') then
    begin
    
    select  count(*)
    into STRICT  qt_proc_bpa_w
    from  procedimento_paciente a,
      sus_procedimento_registro b
    where  a.cd_procedimento  = b.cd_procedimento
    and  a.ie_origem_proced  = a.ie_origem_proced
    and  b.cd_registro in (1,2,6,7)
    and  a.nr_atendimento   = nr_atend_origem_p;

    if (qt_proc_bpa_w > 0) then
      begin
      
      select  max(nr_interno_conta)
      into STRICT  nr_interno_conta_ant_w
      from  conta_paciente
      where  nr_atendimento = nr_atend_origem_p
      and  ie_status_acerto = 1
      and  coalesce(ie_cancelamento::text, '') = ''
      and  obter_tipo_convenio(cd_convenio_parametro) = 3;

      select  nextval('conta_paciente_seq')
      into STRICT  nr_interno_conta_nova_w
;

      begin
      insert into Conta_Paciente(
        nr_atendimento,
        dt_acerto_conta,
        ie_status_acerto,
        dt_periodo_inicial,
        dt_periodo_final,
        dt_atualizacao,
        nm_usuario,
        cd_convenio_parametro,
        nr_protocolo,
        dt_mesano_referencia,
        dt_mesano_contabil,
        cd_convenio_calculo,
        cd_categoria_calculo,
        nr_interno_conta,
        nr_seq_protocolo,
        cd_categoria_parametro,
        cd_estabelecimento)
      SELECT  a.nr_atendimento,
        a.dt_acerto_conta  + (2/86400),
        1, 
        a.dt_periodo_inicial,
        a.dt_periodo_final,
        clock_timestamp(),
        nm_usuario_p,
        a.cd_convenio_parametro,
        '0',
        trunc(b.dt_ref_valida,'dd'),
        a.dt_mesano_contabil,
        a.cd_convenio_calculo,
        a.cd_categoria_calculo,
        nr_interno_conta_nova_w,
        null,
        a.cd_categoria_parametro,
        a.cd_estabelecimento
      from  Convenio b,
        conta_paciente a
      where  nr_interno_conta  = nr_interno_conta_ant_w
      and  b.cd_convenio    = a.cd_convenio_parametro;
      exception
      when others then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(185814);
      end;
      
      end;
    end if;
    
    end;
  end if;

  open c01;
  loop
  fetch c01 into
    nr_sequencia_w,
    cd_procedimento_w,
    ie_origem_proced_w,
    ie_classificacao_w,
    cd_cgc_prestador_w,
    cd_medico_executor_w,
    dt_procedimento_w,
    cd_setor_atendimento_ww;
  EXIT WHEN NOT FOUND; /* apply on c01 */
    if (ie_manter_setor_original_w = 'N') and
      ((ie_transf_pronto_socorro_w      = 'N') or (obter_classif_setor(cd_setor_atendimento_ww)  <> 1))  then
      if (dt_procedimento_w   < dt_entrada_w) then
        dt_procedimento_w  := dt_entrada_w;
      end if;

      update  procedimento_paciente
      set  nm_usuario    = nm_usuario_p,
        dt_atualizacao    = clock_timestamp(),
        nr_seq_atepacu    = nr_seq_interno_novo_w,
        cd_setor_atendimento   = cd_setor_atendimento_p,
        dt_entrada_unidade  = dt_internacao_p,
        dt_procedimento    = dt_procedimento_w
      where  nr_sequencia    = nr_sequencia_w;

      if (ie_classificacao_w = 1) or (ie_classificacao_w = 3) then
        CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
      elsif (ie_classificacao_w = 2) then
        CALL atualiza_preco_servico(nr_sequencia_w, nm_usuario_p);
      end if;

    end if;

    ie_proc_incons_w  := sus_consiste_proced_atend(nr_atend_origem_p, cd_procedimento_w, ie_origem_proced_w);

    if (ie_gerar_conta_aih_w = 'S') and (coalesce(nr_interno_conta_nova_w,0) <> 0) and (ie_proc_incons_w = 'S') then
      begin
    
      update  procedimento_paciente
      set  nr_interno_conta = nr_interno_conta_nova_w
      where  nr_sequencia  = nr_sequencia_w;
      
      if (ie_classificacao_w = 1) or (ie_classificacao_w = 3) then
        CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
      elsif (ie_classificacao_w = 2) then
        CALL atualiza_preco_servico(nr_sequencia_w, nm_usuario_p);
      end if;

      end;
    end if;

  end loop;
  close c01;
  /* fim da rotina de conversao dos procedimentos bpa x aih */



  /* transferir material_atend_paciente para o atendimento novo */

  open c02;
  loop
  fetch c02 into
    nr_sequencia_w,
    cd_setor_atendimento_ww;
  EXIT WHEN NOT FOUND; /* apply on c02 */
    if (ie_manter_setor_original_w = 'N') and
      ((ie_transf_pronto_socorro_w      = 'N') or (obter_classif_setor(cd_setor_atendimento_ww)  <> 1))  then
      update  material_atend_paciente
      set  nm_usuario    = nm_usuario_p,
        dt_atualizacao    = clock_timestamp(),
        nr_seq_atepacu    = nr_seq_interno_novo_w,
        dt_entrada_unidade  = dt_entrada_unidade_w
      where  nr_sequencia    = nr_sequencia_w;

      CALL atualiza_preco_material(nr_sequencia_w, nm_usuario_p);
    end if;
  end loop;
  close c02;

  /* liberar leito unidade_atendimento */

  update  unidade_atendimento
  set  nr_atendimento     = NULL,
    ie_status_unidade  = 'L',
    nm_usuario    = nm_usuario_p,
    dt_atualizacao    = clock_timestamp()
  where  nr_atendimento  = nr_atend_origem_p
  and  cd_setor_atendimento  <> cd_setor_atendimento_p;

  nr_atend_novo_p  := nr_atend_origem_p;

  if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(185805,'DS_ERRO_W=' || DS_ERRO_W);
  end if;

  if (ie_internar_bpa_lotes_w = 'S') then
    CALL atualizar_setor_prescricao(nr_atend_origem_p, cd_setor_atendimento_p, cd_setor_atendimento_w, nm_usuario_p);
    CALL gerar_ajustes_ap_lote('M',nr_atend_origem_p,nm_usuario_p);
  end if;

	select	max(cd_setor_atendimento),
			max(cd_unidade_basica),
			max(cd_unidade_compl)
	into STRICT	cd_setor_ant_w,
			cd_unidade_basica_atend_w,
			cd_unidade_compl_atend_w
	from 	atend_paciente_unidade 
	where	nr_seq_interno = nr_seq_interno_w;

	ds_leito_w 		:= substr(cd_unidade_basica_p || ' - ' || cd_unidade_compl_p,1,10);
	ds_leito_ant_w 	:= substr(cd_unidade_basica_atend_w || ' - ' || cd_unidade_compl_atend_w,1,10);

	CALL gerar_int_dankia_pck.dankia_gerar_movimentacao(nr_atend_origem_p, cd_setor_atendimento_p, cd_setor_ant_w, ds_leito_w, ds_leito_ant_w, cd_estabelecimento_w, nm_usuario_p);		
  end;
end if;

select  coalesce(max(ie_regra_tipo_atend),'A')
into STRICT  ie_regra_tipo_atend_w
from  parametro_faturamento
where  cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(nr_interno_conta_ant_w,0) <> 0) then
  begin
  ds_erro_w := fechar_conta_paciente(nr_interno_conta_ant_w, nr_atend_origem_p, 2, nm_usuario_p, ds_erro_w);
  ds_erro_w := '';
  end;
end if;

if (coalesce(ie_regra_tipo_atend_w,'A') = 'C')and (ie_atualizar_atend_guia_tiss_w = 'S') then
  begin
  update  conta_paciente
  set  ie_tipo_atend_conta = coalesce(1,ie_tipo_atend_conta),
    dt_atualizacao  = clock_timestamp(),
    nm_usuario  = nm_usuario_p
  where  nr_atendimento = coalesce(nr_atend_novo_w,nr_atend_origem_p)
  and  ((coalesce(nr_interno_conta_ant_w,0) = 0) or (nr_interno_conta <> nr_interno_conta_ant_w));
  end;
end if;

/* transferir prescr_medica */

if (ie_transfere_prescr_w = 'S') and (qtd_internado_w = 0) then
  update  prescr_medica
  set    nr_atendimento  = nr_atend_novo_w
  where  nr_atendimento  = nr_atend_origem_p;

  update  laudo_paciente
  set    nr_atendimento  = nr_atend_novo_w
  where  nr_atendimento  = nr_atend_origem_p;

   /*transferir para cpoe_material*/

  update cpoe_material
  set nr_atendimento = nr_atend_novo_w
  where nr_atendimento = nr_atend_origem_p;

  /*transferir para cpoe_procedimento*/

  update cpoe_procedimento
  set nr_atendimento = nr_atend_novo_w
  where nr_atendimento = nr_atend_origem_p;
end if;
CALL ajustar_conta_vazia(nr_atend_origem_p,nm_usuario_p);
commit;

open C03;
loop
fetch C03 into
  nr_seq_evento_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
  begin
  CALL gerar_evento_paciente(nr_seq_evento_w,nr_atend_novo_p,cd_pessoa_fisica_w,null,nm_usuario_p,null);
  end;
end loop;
close C03;

--Gerar pagador na EUP
if (ie_gerar_pagador_atend_w = 'S') then
  begin
  ds_msg_idade_pagador_w := gerar_atend_pagador(nr_atend_novo_w, coalesce(qt_idade_min_pagador_w,0), nm_usuario_p, cd_estabelecimento_w, obter_perfil_ativo, ds_msg_idade_pagador_w);
  exception
  when others then
    ds_msg_idade_pagador_w  := null;
  end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duplicar_atend_bpa_aih ( nr_atend_origem_p bigint, nr_seq_interno_p bigint, ie_tipo_guia_p text, dt_internacao_p timestamp, cd_setor_atendimento_p bigint, cd_unidade_basica_p text, cd_unidade_compl_p text, nr_doc_convenio_p text, ie_clinica_p bigint, nm_usuario_p text, ie_apos_int_p text, cd_medico_resp_p text, cd_responsavel_p text, ie_atend_novo_p text, cd_procedencia_p bigint, cd_estabelecimento_p bigint, nr_atend_novo_p INOUT bigint, ie_carater_inter_sus_p text, nr_seq_classificacao_p bigint, ie_gerar_alta_atend_p text, ie_atend_tiss_p bigint default null, cd_tipo_acomodacao_p bigint default null, cd_motivo_alta_p bigint default null, ie_responsavel_p text default null, nr_seq_grau_parentesco_p bigint default null, nr_seq_classif_medico_p bigint DEFAULT NULL, dt_ving_ini_p timestamp DEFAULT NULL, dt_ving_fim_p timestamp DEFAULT NULL, qt_dia_int_p bigint DEFAULT NULL, ie_regime_internacao_p text default null) FROM PUBLIC;

