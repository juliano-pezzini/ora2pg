-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE executar_acao_template_generic ( ie_acao_p text, nm_usuario_p ehr_registro.nm_usuario%type default null,        --se usuario for passado em branco, usara a package para obter nome de usuario
 ds_justificativa_p ehr_registro.ds_justificativa%type default null,  --justificativa para inativacao
 nr_atendimento_p ehr_registro.nr_atendimento%type default null, cd_pessoa_fisica_p ehr_registro.cd_paciente%type default null, nr_sequencia_template_p ehr_registro.nr_seq_templ%type default null,      --sequencia do template no cadastro (configuracao) do mesmo
 nr_ehr_reg_p INOUT ehr_registro.nr_sequencia%type DEFAULT NULL,                   --registro EHR_REGISTRO do template apos o preenchimento
 nr_ehr_reg_templ_p INOUT ehr_reg_template.nr_sequencia%type DEFAULT NULL,               --registro EHR_REG_TEMPLATE do template apos o preenchimento
 ds_response_p INOUT text                                          --resultado para param 'inactivated' e 'released'
  DEFAULT NULL) AS $body$
DECLARE


nm_usuario_w                    ehr_registro.nm_usuario%type;
cd_profissional_w               ehr_registro.cd_profissional%type;

ds_parametros_w	varchar(2000);
ds_sep_bv_w	varchar(10);

  tabela RECORD;

BEGIN
  ds_parametros_w	:= '';
  ds_sep_bv_w	:= obter_separador_bv;

  if (coalesce(nm_usuario_p::text, '') = '' or nm_usuario_p = '') then
    select obter_usuario_ativo
    into STRICT nm_usuario_w 
;
  else
    nm_usuario_w := nm_usuario_p;
  end if;

  if (coalesce(nr_ehr_reg_p::text, '') = '' and ((nr_ehr_reg_templ_p IS NOT NULL AND nr_ehr_reg_templ_p::text <> '') and nr_ehr_reg_templ_p <> 0)) then
    begin
      select nr_seq_reg
      into STRICT nr_ehr_reg_p
      from ehr_reg_template 
      where nr_sequencia = nr_ehr_reg_templ_p;
    exception when others then
      nr_ehr_reg_p := null;
    end;
  elsif(((nr_ehr_reg_p IS NOT NULL AND nr_ehr_reg_p::text <> '') and nr_ehr_reg_p <> 0) and coalesce(nr_ehr_reg_templ_p::text, '') = '') then
    begin
      select nr_sequencia
      into STRICT nr_ehr_reg_templ_p
      from ehr_reg_template
      where nr_seq_reg = nr_ehr_reg_p;
    exception when others then
      nr_ehr_reg_templ_p := null;
    end;
  end if;

  if (ie_acao_p = 'E' and (nr_ehr_reg_p IS NOT NULL AND nr_ehr_reg_p::text <> '') and (nr_ehr_reg_templ_p IS NOT NULL AND nr_ehr_reg_templ_p::text <> '')) then
    delete from ehr_reg_elemento where nr_seq_reg_template = nr_ehr_reg_templ_p;
    delete from ehr_reg_template where nr_sequencia = nr_ehr_reg_templ_p;
    delete from ehr_registro where nr_sequencia = nr_ehr_reg_p;

    if (nr_sequencia_template_p IS NOT NULL AND nr_sequencia_template_p::text <> '') then
      for tabela in (
          SELECT
          'delete from '|| TABLE_NAME || ' where nr_seq_template = :nr_seq_template and nr_seq_reg_template = :nr_seq_reg_template' sql_delete
          from all_tables  where upper(TABLE_NAME) like 'EHR_LINKED_'||nr_sequencia_template_p||'%'
      ) loop
          ds_parametros_w	:= 'nr_seq_template=' || nr_sequencia_template_p || ds_sep_bv_w
                          || 'nr_seq_reg_template=' || nr_ehr_reg_templ_p || ds_sep_bv_w;

          CALL exec_sql_dinamico_bv('', tabela.sql_delete, ds_parametros_w);
      end loop;
    end if;
    commit;

    nr_ehr_reg_p := null;
    nr_ehr_reg_templ_p := null;
  elsif (ie_acao_p = 'A') then
    select (obter_pf_usuario(nm_usuario_w, 'C'))::numeric
    into STRICT cd_profissional_w 
;

    select	nextval('ehr_registro_seq')
    into STRICT	nr_ehr_reg_p
;

    insert into ehr_registro(
      nr_sequencia,
      cd_paciente,
      dt_atualizacao,
      nm_usuario,
      dt_atualizacao_nrec,
      nm_usuario_nrec,
      dt_registro,
      cd_profissional,
      nr_atendimento,
      dt_liberacao,
      nr_seq_templ
    ) values (
      nr_ehr_reg_p,
      cd_pessoa_fisica_p,
      clock_timestamp(),
      nm_usuario_w,
      clock_timestamp(),
      nm_usuario_w,
      clock_timestamp(),
      cd_profissional_w,
      nr_atendimento_p,
      null,
      nr_sequencia_template_p
   );

    select	nextval('ehr_reg_template_seq')
    into STRICT	nr_ehr_reg_templ_p
;

    insert into ehr_reg_template(
      nr_sequencia,
      nr_seq_reg,
      dt_atualizacao,
      nm_usuario,
      dt_atualizacao_nrec,
      nm_usuario_nrec,
      dt_registro,
      nr_seq_template,
      dt_liberacao
    ) values (
      nr_ehr_reg_templ_p,
      nr_ehr_reg_p,
      clock_timestamp(),
      nm_usuario_w,
      clock_timestamp(),
      nm_usuario_w,
      clock_timestamp(),
      nr_sequencia_template_p,
      null
    );
    commit;

  elsif (ie_acao_p = 'RELEASED') then
    begin
      select CASE WHEN coalesce(dt_liberacao::text, '') = '' THEN  'N'  ELSE 'S' END
      into STRICT ds_response_p
      from ehr_registro 
      where nr_sequencia = nr_ehr_reg_p;
    exception when others then
      ds_response_p := null;
    end;
  elsif (ie_acao_p = 'INACTIVATED') then
    begin
      select CASE WHEN coalesce(dt_inativacao::text, '') = '' THEN  'N'  ELSE 'S' END
      into STRICT ds_response_p
      from ehr_registro 
      where nr_sequencia = nr_ehr_reg_p;
    exception when others then
      ds_response_p := null;
    end;
  elsif (ie_acao_p = 'LAST') then
    begin
      select max(nr_sequencia)
      into STRICT nr_ehr_reg_p
      from ehr_registro
      where (((nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and nr_atendimento = nr_atendimento_p) or (coalesce(nr_atendimento_p::text, '') = '' and cd_paciente = cd_pessoa_fisica_p)) 
        and nm_usuario = nm_usuario_w
        and nr_seq_templ = nr_sequencia_template_p 
        and coalesce(dt_liberacao::text, '') = '' 
        and coalesce(dt_inativacao::text, '') = '';

      select nr_sequencia
      into STRICT nr_ehr_reg_templ_p
      from ehr_reg_template
      where nr_seq_reg = nr_ehr_reg_p;
    exception when others then
      nr_ehr_reg_p := null;
      nr_ehr_reg_templ_p := null;
    end;
  elsif (ie_acao_p = 'NEXT') then
    begin
      select nr_sequencia
      into STRICT nr_ehr_reg_p
      from ehr_registro
      where (((nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and nr_atendimento = nr_atendimento_p) or (coalesce(nr_atendimento_p::text, '') = '' and cd_paciente = cd_pessoa_fisica_p)) 
        and nr_seq_templ = nr_sequencia_template_p 
        and ((dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') or (coalesce(dt_liberacao::text, '') = '' and nm_usuario = nm_usuario_w))
        and coalesce(dt_inativacao::text, '') = ''
        and nr_sequencia > nr_ehr_reg_p 
        order by nr_sequencia asc LIMIT 1;

      select nr_sequencia
      into STRICT nr_ehr_reg_templ_p
      from ehr_reg_template
      where nr_seq_reg = nr_ehr_reg_p;
    exception when others then
      nr_ehr_reg_p := null;
      nr_ehr_reg_templ_p := null;
    end;
  elsif (ie_acao_p = 'PREVIOUS') then
    begin
      select max(nr_sequencia)
      into STRICT nr_ehr_reg_p
      from ehr_registro
      where (((nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and nr_atendimento = nr_atendimento_p) or (coalesce(nr_atendimento_p::text, '') = '' and cd_paciente = cd_pessoa_fisica_p)) 
        and nr_seq_templ = nr_sequencia_template_p 
        and ((dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') or (coalesce(dt_liberacao::text, '') = '' and nm_usuario = nm_usuario_w))
        and coalesce(dt_inativacao::text, '') = ''
        and nr_sequencia < nr_ehr_reg_p;

      select nr_sequencia
      into STRICT nr_ehr_reg_templ_p
      from ehr_reg_template
      where nr_seq_reg = nr_ehr_reg_p;
    exception when others then
      nr_ehr_reg_p := null;
      nr_ehr_reg_templ_p := null;
    end;
  elsif (ie_acao_p = 'CAN_ADD') then
    begin
      select max(nr_sequencia)
      into STRICT nr_ehr_reg_p
      from ehr_registro 
      where (((nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and nr_atendimento = nr_atendimento_p) or (coalesce(nr_atendimento_p::text, '') = '' and cd_paciente = cd_pessoa_fisica_p)) 
        and nm_usuario = nm_usuario_w
        and nr_seq_templ = nr_sequencia_template_p 
        and coalesce(dt_liberacao::text, '') = ''
        and coalesce(dt_inativacao::text, '') = '';

      select nr_sequencia
      into STRICT nr_ehr_reg_templ_p
      from ehr_reg_template
      where nr_seq_reg = nr_ehr_reg_p;
    exception when others then
      nr_ehr_reg_p := null;
      nr_ehr_reg_templ_p := null;
    end;

    if (coalesce(nr_ehr_reg_p::text, '') = '' and coalesce(nr_ehr_reg_templ_p::text, '') = '') then
      ds_response_p := 'S';
    else
      ds_response_p := 'N';
    end if;
  end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE executar_acao_template_generic ( ie_acao_p text, nm_usuario_p ehr_registro.nm_usuario%type default null, ds_justificativa_p ehr_registro.ds_justificativa%type default null, nr_atendimento_p ehr_registro.nr_atendimento%type default null, cd_pessoa_fisica_p ehr_registro.cd_paciente%type default null, nr_sequencia_template_p ehr_registro.nr_seq_templ%type default null, nr_ehr_reg_p INOUT ehr_registro.nr_sequencia%type DEFAULT NULL, nr_ehr_reg_templ_p INOUT ehr_reg_template.nr_sequencia%type DEFAULT NULL, ds_response_p INOUT text DEFAULT NULL) FROM PUBLIC;

