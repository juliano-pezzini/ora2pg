-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function confirmar_cotacao_eletronica as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE confirmar_cotacao_eletronica ( cot_compra_p bigint, nr_seq_cotacao_p bigint) AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'CALL confirmar_cotacao_eletronica_atx ( ' || quote_nullable(cot_compra_p) || ',' || quote_nullable(nr_seq_cotacao_p) || ' )';
	PERFORM * FROM dblink(v_conn_str, v_query) AS p (ret boolean);

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE confirmar_cotacao_eletronica_atx ( cot_compra_p bigint, nr_seq_cotacao_p bigint) AS $body$
DECLARE
qtd_w				bigint;
ds_assunto_21_w			varchar(250);
ds_mensagem_21_w		varchar(4000);
ds_assunto_32_w			varchar(250);
ds_mensagem_32_w		varchar(4000);
cd_estabelecimento_w 		smallint;
email_comprador_w			varchar(100);
email_pessoa_solicitante_w 		varchar(100);
email_estab_w			varchar(100);
cd_cgc_w			varchar(14);
nm_usuario_w			varchar(15);
ie_envia_email_w			varchar(1);
ds_erro_w			cot_compra.ds_observacao%type;


BEGIN

select	count(*)
into STRICT	qtd_w
from	cot_compra_forn
where	nr_cot_compra = cot_compra_p
and	nr_sequencia <> nr_seq_cotacao_p
and	ie_status in ('LH','LF','AF');

if (qtd_w = 0) then

	select 	nm_usuario,
		cd_estabelecimento,
		obter_dados_usuario_opcao(obter_usuario_pessoa(cd_comprador),'E'),
		obter_dados_usuario_opcao(obter_usuario_pessoa(cd_pessoa_solicitante),'E'),
		obter_cgc_estabelecimento(cd_estabelecimento)
	into STRICT	nm_usuario_w,
		cd_estabelecimento_w,
		email_comprador_w,
		email_pessoa_solicitante_w,
		cd_cgc_w
	from 	cot_compra
	where 	nr_cot_compra  = cot_compra_p;

	select 	coalesce(max(ds_email), 'X')
	into STRICT	email_estab_w
	from 	pessoa_juridica_estab
	where 	cd_cgc 		= cd_cgc_w
	and 	cd_estabelecimento = cd_estabelecimento_w;

	select	coalesce(obter_se_envia_email_regra(cot_compra_p, 'CC', 21, cd_Estabelecimento_w),'S')
	into STRICT	ie_envia_email_w
	;
	
	if (ie_envia_email_w = 'S') then
	
		begin
		ds_assunto_21_w 	:= obter_dados_regra_email_compra(21, cd_estabelecimento_w, cot_compra_p, 'A', null, nm_usuario_w, null);
		ds_mensagem_21_w	:= obter_dados_regra_email_compra(21, cd_estabelecimento_w, cot_compra_p, 'M', null, nm_usuario_w, null);
		exception
		when others then
			ds_erro_w := WHEB_MENSAGEM_PCK.get_texto(1100290, 'CD_REGRA=' || '21' || ';DS_ERRO=' || substr(SQLERRM(SQLSTATE),1,3900));
			
			CALL gerar_historico_cotacao(cot_compra_p,
				WHEB_MENSAGEM_PCK.get_texto(1100617),
				ds_erro_w,
				'S',
				nm_usuario_w);
		end;

		if	((email_comprador_w IS NOT NULL AND email_comprador_w::text <> '') or (email_pessoa_solicitante_w IS NOT NULL AND email_pessoa_solicitante_w::text <> '')) and (email_estab_w <> 'X') and (ds_assunto_21_w IS NOT NULL AND ds_assunto_21_w::text <> '') and (ds_mensagem_21_w IS NOT NULL AND ds_mensagem_21_w::text <> '') then
			begin
			CALL enviar_email(ds_assunto_21_w, ds_mensagem_21_w, email_estab_w, email_comprador_w||';'||email_pessoa_solicitante_w,WHEB_MENSAGEM_PCK.get_texto(298423),'M');
			exception
			when others then
				ds_erro_w := WHEB_MENSAGEM_PCK.get_texto(1100313, 'CD_REGRA=' || '21' || ';DS_ERRO=' || substr(SQLERRM(SQLSTATE),1,3900));
		
				CALL gerar_historico_cotacao(cot_compra_p,
					WHEB_MENSAGEM_PCK.get_texto(1100617),
					ds_erro_w,
					'S',
					nm_usuario_w);
		end;
		end if;
	end if;
	
	select	coalesce(obter_se_envia_email_regra(cot_compra_p, 'CC', 32, cd_Estabelecimento_w),'S')
	into STRICT	ie_envia_email_w
	;
	
	if (ie_envia_email_w = 'S') then
	
		begin
		ds_assunto_32_w 	:= obter_dados_regra_email_compra(32, cd_estabelecimento_w, cot_compra_p, 'A', null, nm_usuario_w, null);
		ds_mensagem_32_w	:= obter_dados_regra_email_compra(32, cd_estabelecimento_w, cot_compra_p, 'M', null, nm_usuario_w, null);
		exception
		when others then
			ds_erro_w := WHEB_MENSAGEM_PCK.get_texto(1100290, 'CD_REGRA=' || '32' || ';DS_ERRO=' || substr(SQLERRM(SQLSTATE),1,3900));
			
			CALL gerar_historico_cotacao(cot_compra_p,
				WHEB_MENSAGEM_PCK.get_texto(1100617),
				ds_erro_w,
				'S',
				nm_usuario_w);
		end;

		if (email_comprador_w IS NOT NULL AND email_comprador_w::text <> '') and (email_estab_w <> 'X') and (ds_assunto_32_w IS NOT NULL AND ds_assunto_32_w::text <> '') and (ds_mensagem_32_w IS NOT NULL AND ds_mensagem_32_w::text <> '') then
			begin
			CALL enviar_email(ds_assunto_32_w, ds_mensagem_32_w, email_estab_w, email_comprador_w,WHEB_MENSAGEM_PCK.get_texto(298423),'M');
			exception
			when others then
				ds_erro_w := WHEB_MENSAGEM_PCK.get_texto(1100313, 'CD_REGRA=' || '32' || ';DS_ERRO=' || substr(SQLERRM(SQLSTATE),1,3900));
				
				CALL gerar_historico_cotacao(cot_compra_p,
					WHEB_MENSAGEM_PCK.get_texto(1100617),
					ds_erro_w,
					'S',
					nm_usuario_w);
		end;
		end if;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE confirmar_cotacao_eletronica ( cot_compra_p bigint, nr_seq_cotacao_p bigint) FROM PUBLIC; -- REVOKE ALL ON PROCEDURE confirmar_cotacao_eletronica_atx ( cot_compra_p bigint, nr_seq_cotacao_p bigint) FROM PUBLIC;

