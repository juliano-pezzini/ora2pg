-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_executar_itens_lote_req ( nr_seq_execucao_lote_p bigint, nr_seq_motivo_exec_p bigint, nm_usuario_p text, ie_origem_p text, cd_estabelecimento_p bigint, nr_seq_usuario_web_p bigint, ie_validacao_digital_p bigint, nr_seq_maquina_p bigint, id_maquina_p text, ds_biometria_p text, ds_conteudo_tarja_p pls_execucao_requisicao.ds_conteudo_tarja%type, ds_qrcode_p pls_execucao_requisicao.ds_qrcode%type) AS $body$
DECLARE

				
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Executar itens utilizados na execucao da requisicao por lote
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [ x ] Portal [  ] Relatorios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atencao:  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/				
				
nr_seq_material_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_tipo_guia_w			integer;
nr_seq_segurado_w		bigint;
cd_medico_w			varchar(10);
nr_seq_grupo_exec_w		bigint;
ie_tipo_processo_w		varchar(1);
nr_seq_preco_pacote_w		bigint;
nr_seq_conversao_pacote_w	bigint;
cd_pacote_item_w		bigint;

nr_seq_requisicao_w		bigint;
nr_seq_req_execucao_w		bigint;
nr_seq_prestador_w		bigint;
qt_item_w				pls_itens_lote_execucao.qt_item_exec%type;
ie_tipo_item_w			varchar(1);
cd_medico_executor_w		varchar(10);
nr_seq_req_proc_w		bigint;
nr_seq_req_mat_w		bigint;
qt_itens_zerados_w		bigint;
ie_item_executado_w		bigint;
ie_tipo_atendimento_w		varchar(2);


C01 CURSOR FOR
	SELECT	distinct a.nr_seq_requisicao
	from	pls_itens_lote_execucao a,
		pls_lote_execucao_req b
	where	b.nr_sequencia 		= a.nr_seq_lote_exec
	and	b.nr_sequencia		= nr_seq_execucao_lote_p
	and	a.ie_permite_execucao 	= 'S'
	and	a.ie_executar 		= 'S';
	
C02 CURSOR FOR
	SELECT	b.nr_seq_req_mat,
		b.nr_seq_req_proc,		
		b.cd_medico_executor,		
		b.qt_item_exec,		
		b.ie_tipo_item,
		b.ie_tipo_atendimento
	from	pls_lote_execucao_req a,
		pls_itens_lote_execucao b
	where	a.nr_sequencia 		= b.nr_seq_lote_exec
	and	a.nr_sequencia		= nr_seq_execucao_lote_p
	and	b.nr_seq_requisicao	= nr_seq_requisicao_w
	and	b.ie_permite_execucao 	= 'S'
	and	b.ie_executar 		= 'S';
	

BEGIN

select 	nr_seq_prestador,
	nr_seq_segurado
into STRICT	nr_seq_prestador_w,
	nr_seq_segurado_w
from	pls_lote_execucao_req
where 	nr_sequencia = nr_seq_execucao_lote_p;

select	count(1)
into STRICT	qt_itens_zerados_w
from	pls_itens_lote_execucao a,
	pls_lote_execucao_req b
where	b.nr_sequencia 		= a.nr_seq_lote_exec
and	b.nr_sequencia		= nr_seq_execucao_lote_p
and	a.ie_permite_execucao 	= 'S'
and	a.ie_executar 		= 'S'
and (coalesce(a.qt_item_exec::text, '') = '' or a.qt_item_exec <= 0);

ie_item_executado_w := pls_verifica_existe_execucao(nr_seq_execucao_lote_p);


if (ie_item_executado_w = 199122) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(199122);
elsif (ie_item_executado_w = 1110929) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1110929);
end if;


if (qt_itens_zerados_w > 0 ) then
	/* enviar_email(	'Guia que seria gerada zerada', 'Verificar lote de execucao ' || nr_seq_execucao_lote_p || chr(13) || chr(10) ||
			'Executado em ' || to_char(sysdate,'dd/mm/yyyy hh24:mi:ss'), 'ti@unimedriopreto.com.br',
			'rbento@unimedriopreto.com.br;freitas@unimedriopreto.com.br;ldoretto@unimedriopreto.com.br',
			nm_usuario_p, 'M'); */
	CALL wheb_mensagem_pck.exibir_mensagem_abort(198376);
end if;


open C01;
loop
fetch C01 into
	nr_seq_requisicao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
		/*select	pls_execucao_requisicao_seq.nextval
		into	nr_seq_req_execucao_w
		from	dual;
		
		
		insert	into pls_execucao_requisicao
			(nr_sequencia, ie_situacao, nr_seq_requisicao,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec, 
			nm_usuario_nrec, nr_seq_prestador, nr_seq_lote_exec)
		values	(nr_seq_req_execucao_w, 3, nr_seq_requisicao_w,
			sysdate, nm_usuario_p, sysdate,
			nm_usuario_p, nr_seq_prestador_w, nr_seq_execucao_lote_p);*/

			
		/* Gerar execucao na tabela PLS_EXECUCAO_REQUISICAO */

		nr_seq_req_execucao_w := pls_inserir_execusao_req(nr_seq_requisicao_w, nr_seq_prestador_w, nr_seq_execucao_lote_p, nr_seq_motivo_exec_p, nm_usuario_p, nr_seq_req_execucao_w, ds_conteudo_tarja_p, ds_qrcode_p);
		
		
		open C02;
		loop
		fetch C02 into
			nr_seq_req_mat_w,
			nr_seq_req_proc_w,
			cd_medico_executor_w,
			qt_item_w,
			ie_tipo_item_w,
			ie_tipo_atendimento_w;		
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			
			/*Inserir os itens na PLS_EXECUCAO_REQ_ITEM*/

			CALL pls_inserir_itens_execusao_req(	ie_tipo_item_w, nr_seq_segurado_w, qt_item_w,
							nr_seq_requisicao_w, nr_seq_req_execucao_w, cd_medico_executor_w,
							nr_seq_req_proc_w,nr_seq_req_mat_w, nm_usuario_p, ie_tipo_atendimento_w);
						
			/*if	(ie_tipo_item_w = 'P') then		
				
				select	a.ie_tipo_guia,
					a.cd_medico_solicitante,
					nvl(a.ie_tipo_processo, decode(a.ie_tipo_requisicao, 'W', 'P', 'M')),
					nvl(b.nr_seq_grupo_exec,0),
					b.cd_procedimento,
					b.ie_origem_proced,
					nr_seq_preco_pacote,
					nr_seq_conversao_pacote,
					cd_pacote_item
				into	ie_tipo_guia_w,					
					cd_medico_w,
					ie_tipo_processo_w,
					nr_seq_grupo_exec_w,
					cd_procedimento_w,
					ie_origem_proced_w,					
					nr_seq_preco_pacote_w,
					nr_seq_conversao_pacote_w,
					cd_pacote_item_w
				from	pls_requisicao_proc 	b,
					pls_requisicao		a
				where	a.nr_sequencia	= b.nr_seq_requisicao
				and	b.nr_sequencia	= nr_seq_req_proc_w;
			elsif	(ie_tipo_item_w = 'M') then
				select	a.ie_tipo_guia,					
					a.cd_medico_solicitante,
					nvl(a.ie_tipo_processo, decode(a.ie_tipo_requisicao, 'W', 'P', 'M')),
					nvl(b.nr_seq_grupo_exec,0),
					b.nr_seq_material					
				into	ie_tipo_guia_w,					
					cd_medico_w,
					ie_tipo_processo_w,
					nr_seq_grupo_exec_w,
					nr_seq_material_w									
				from	pls_requisicao_mat	b,
					pls_requisicao		a
				where	a.nr_sequencia	= b.nr_seq_requisicao
				and	b.nr_sequencia	= nr_seq_req_mat_w;
			end if;
			
			insert	into pls_execucao_req_item
				(nr_sequencia, ie_tipo_guia, nr_seq_grupo_exec,
				nr_seq_segurado, dt_atualizacao, nm_usuario,
				cd_procedimento, ie_origem_proced, nr_seq_material,
				qt_item, nr_seq_req_proc, nr_seq_req_mat,
				cd_medico_requisitante, ie_tipo_processo, nr_seq_requisicao,
				nr_seq_execucao, nr_seq_preco_pacote, nr_seq_conversao_pacote,
				cd_pacote_item, cd_medico_executor, ie_situacao)
			values	(pls_execucao_req_item_seq.nextval, ie_tipo_guia_w, nr_seq_grupo_exec_w,
				nr_seq_segurado_w, sysdate, nm_usuario_p,
				cd_procedimento_w, ie_origem_proced_w, nr_seq_material_w,
				qt_item_w,nr_seq_req_proc_w,nr_seq_req_mat_w,
				cd_medico_w, ie_tipo_processo_w, nr_seq_requisicao_w,
				nr_seq_req_execucao_w, nr_seq_preco_pacote_w, nr_seq_conversao_pacote_w,
				cd_pacote_item_w, cd_medico_executor_w, 'U');*/
			end;
		end loop;
		close C02;
	end;	
end loop;

close C01;

commit;

/* Rotina deve ser chamada apos o commit pois o processo anterior deve estar concluido caso aconteca algum problema na geracao da guia  */

CALL pls_gerar_guia_requisicao_lote(	nr_seq_execucao_lote_p, nr_seq_segurado_w, nr_seq_prestador_w,
				nm_usuario_p, ie_origem_p, cd_estabelecimento_p,
				nr_seq_usuario_web_p, ie_validacao_digital_p, nr_seq_maquina_p,
				id_maquina_p, ds_biometria_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_executar_itens_lote_req ( nr_seq_execucao_lote_p bigint, nr_seq_motivo_exec_p bigint, nm_usuario_p text, ie_origem_p text, cd_estabelecimento_p bigint, nr_seq_usuario_web_p bigint, ie_validacao_digital_p bigint, nr_seq_maquina_p bigint, id_maquina_p text, ds_biometria_p text, ds_conteudo_tarja_p pls_execucao_requisicao.ds_conteudo_tarja%type, ds_qrcode_p pls_execucao_requisicao.ds_qrcode%type) FROM PUBLIC;

