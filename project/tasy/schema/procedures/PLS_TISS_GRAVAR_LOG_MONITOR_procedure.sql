-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_tiss_gravar_log_monitor ( ie_tipo_evento_p pls_monitor_tiss_alt.ie_tipo_evento%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_conta_rec_p pls_rec_glosa_conta.nr_sequencia%type, nr_seq_conta_rec_proc_p pls_rec_glosa_proc.nr_sequencia%type, nr_seq_conta_rec_mat_p pls_rec_glosa_mat.nr_sequencia%type, qt_apresentado_p pls_conta_proc.qt_procedimento%type, vl_apresentado_p pls_conta_proc.vl_provisao%type, qt_pago_p pls_conta_proc.qt_procedimento%type, vl_pago_p pls_conta_proc.vl_liberado%type, nm_usuario_p usuario.nm_usuario%type, dt_evento_p pls_monitor_tiss_alt.dt_evento%type default clock_timestamp(), nr_seq_disc_p pls_contestacao_discussao.nr_sequencia%type default null) AS $body$
DECLARE

	
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Inserir na tabela de log do monitor TISS
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
tb_seq_proc_w		dbms_sql.number_table;
tb_seq_mat_w		dbms_sql.number_table;
tb_seq_rec_proc_w	dbms_sql.number_table;
tb_seq_rec_mat_w	dbms_sql.number_table;
tb_vl_recursado_w	dbms_sql.number_table;
tb_vl_acatado_w		dbms_sql.number_table;
tb_vl_apresentado_w	dbms_sql.number_table;
tb_vl_pago_w		dbms_sql.number_table;
tb_qt_apresentado_w	dbms_sql.number_table;
tb_qt_pago_w		dbms_sql.number_table;
tb_seq_disc_proc_w	dbms_sql.number_table;
tb_seq_disc_mat_w	dbms_sql.number_table;

dt_evento_w		pls_monitor_tiss_alt.dt_evento%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
ds_log_call_w		varchar(4000) := null;
qt_pgto_aceito_w	integer := 0;

c_proc_mat CURSOR(	nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		null nr_seq_conta_mat,
		vl_provisao vl_apresentado,	
		vl_liberado vl_pago,		
		qt_procedimento_imp qt_apresentado,
		qt_procedimento qt_pago
	from	pls_conta_proc a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_status <> 'M'
	
union all

	SELECT	null nr_seq_conta_proc,
		a.nr_sequencia nr_seq_conta_mat,
		vl_provisao vl_apresentado,
		vl_liberado vl_pago,
		qt_material_imp qt_apresentado,
		qt_material qt_pago
	from	pls_conta_mat a
	where	a.nr_seq_conta = nr_seq_conta_pc
	and	a.ie_status <> 'M';
	
c_proc_mat_rec CURSOR(	nr_seq_conta_rec_pc	pls_rec_glosa_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_conta_rec_proc,
		null nr_seq_conta_rec_mat,
		a.nr_seq_conta_proc nr_seq_conta_proc,
		null nr_seq_conta_mat,
		a.vl_recursado,
		a.vl_acatado
	from	pls_rec_glosa_proc a
	where	a.nr_seq_conta_rec = nr_seq_conta_rec_pc
	
union all

	SELECT	null nr_seq_conta_rec_proc,
		a.nr_sequencia nr_seq_conta_rec_mat,
		null nr_seq_conta_proc,
		a.nr_seq_conta_mat nr_seq_conta_mat,
		a.vl_recursado,
		a.vl_acatado
	from	pls_rec_glosa_mat a
	where	a.nr_seq_conta_rec = nr_seq_conta_rec_pc;

c_proc_mat_disc CURSOR(	nr_seq_disc_pc	pls_contestacao_discussao.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_disc_proc,
		null nr_seq_disc_mat,
		a.nr_seq_conta_proc nr_seq_conta_proc,
		null nr_seq_conta_mat,
		a.vl_contestado,
		a.vl_aceito
	from	pls_discussao_proc a
	where	a.nr_seq_discussao = nr_seq_disc_pc
	
union all

	SELECT	null nr_seq_disc_proc,
		a.nr_sequencia nr_seq_disc_mat,
		null nr_seq_conta_proc,
		a.nr_seq_conta_mat nr_seq_conta_mat,
		a.vl_contestado,
		a.vl_aceito
	from	pls_discussao_mat a
	where	a.nr_seq_discussao = nr_seq_disc_pc;	


BEGIN

if (pls_util_pck.ie_executa_monitoramento_w = 'S') then

	if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') and (coalesce(nr_seq_conta_rec_p::text, '') = '') and (coalesce(nr_seq_disc_p::text, '') = '') then
		select	count(1)
		into STRICT	qt_pgto_aceito_w
		from	pls_monitor_tiss_alt
		where	nr_seq_conta = nr_seq_conta_p
		and	ie_tipo_evento = 'PC'
		and	ie_status = 'A';
	end if;

	if (qt_pgto_aceito_w = 0) then
		ds_log_call_w := substr(	' Função ativa : '|| obter_funcao_ativa || chr(13) ||chr(10)||
						' CallStack: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,1500);

		cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;

		if (coalesce(cd_estabelecimento_w::text, '') = '') then
			select	max(cd_estabelecimento)
			into STRICT	cd_estabelecimento_w
			from	pls_outorgante;
		end if;

		dt_evento_w	:= dt_evento_p;

		if	((nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') or (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '')) and (coalesce(nr_seq_conta_rec_p::text, '') = '') and (coalesce(nr_seq_disc_p::text, '') = '')then
			
			-- Gravar sempre como Pendente primeiro no ie_status
			insert into pls_monitor_tiss_alt(nr_sequencia, nm_usuario, dt_atualizacao,
				nm_usuario_nrec, dt_atualizacao_nrec, ie_tipo_evento,
				ie_status, nr_seq_conta, nr_seq_conta_proc,
				nr_seq_conta_mat, dt_evento, qt_liberado,
				qt_apresentado, vl_liberado, vl_apresentado,
				nr_seq_conta_rec, nr_seq_proc_rec, nr_seq_mat_rec,
				ds_call_stack, cd_estabelecimento)
			values (nextval('pls_monitor_tiss_alt_seq'), coalesce(nm_usuario_p,'SESSION'),	clock_timestamp(),
				coalesce(nm_usuario_p,'SESSION'), clock_timestamp(), ie_tipo_evento_p,
				'P', nr_seq_conta_p, nr_seq_conta_proc_p,
				nr_seq_conta_mat_p,dt_evento_w, qt_pago_p,
				qt_apresentado_p, vl_pago_p, vl_apresentado_p,
				null, null, null,
				ds_log_call_w, cd_estabelecimento_w);

		elsif (nr_seq_conta_rec_proc_p IS NOT NULL AND nr_seq_conta_rec_proc_p::text <> '') or (nr_seq_conta_rec_mat_p IS NOT NULL AND nr_seq_conta_rec_mat_p::text <> '') then
			
			insert into pls_monitor_tiss_alt(nr_sequencia, nm_usuario, dt_atualizacao,
				nm_usuario_nrec, dt_atualizacao_nrec, ie_tipo_evento,
				ie_status, nr_seq_conta, nr_seq_conta_proc,
				nr_seq_conta_mat, dt_evento, qt_liberado,
				qt_apresentado, vl_liberado, vl_apresentado,
				nr_seq_conta_rec, nr_seq_proc_rec, nr_seq_mat_rec,
				ds_call_stack, cd_estabelecimento)
			values (nextval('pls_monitor_tiss_alt_seq'), coalesce(nm_usuario_p,'SESSION'),	clock_timestamp(),
				coalesce(nm_usuario_p,'SESSION'), clock_timestamp(), ie_tipo_evento_p,
				'P', nr_seq_conta_p, nr_seq_conta_proc_p,
				nr_seq_conta_mat_p,dt_evento_w, qt_pago_p,
				qt_apresentado_p, vl_pago_p, vl_apresentado_p,
				nr_seq_conta_rec_p,nr_seq_conta_rec_proc_p,nr_seq_conta_rec_mat_p,
				ds_log_call_w, cd_estabelecimento_w);	
				
		elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') and (coalesce(nr_seq_conta_rec_p::text, '') = '') and (coalesce(nr_seq_disc_p::text, '') = '') then
			
			

			-- Gravar o registro de alteração da conta

			-- Gravar sempre como Pendente primeiro no ie_status
			insert into pls_monitor_tiss_alt(nr_sequencia, nm_usuario, dt_atualizacao,
				nm_usuario_nrec, dt_atualizacao_nrec, ie_tipo_evento,
				ie_status, nr_seq_conta, nr_seq_conta_proc,
				nr_seq_conta_mat, dt_evento, nr_seq_conta_rec,
				nr_seq_proc_rec, nr_seq_mat_rec, ds_call_stack,
				cd_estabelecimento)
			values (nextval('pls_monitor_tiss_alt_seq'), coalesce(nm_usuario_p,'SESSION'), clock_timestamp(),
				coalesce(nm_usuario_p,'SESSION'),clock_timestamp(),ie_tipo_evento_p,
				'P', nr_seq_conta_p,null,
				null,dt_evento_w, null,
				null, null, ds_log_call_w,
				cd_estabelecimento_w);

			-- Quando passar a conta, precisar armazenar todos os itens da mesma
			open c_proc_mat(nr_seq_conta_p);
			loop
			tb_seq_proc_w.delete;
			tb_seq_mat_w.delete;
			tb_vl_apresentado_w.delete;
			tb_vl_pago_w.delete;
			tb_qt_apresentado_w.delete;
			tb_qt_pago_w.delete;
			
			fetch c_proc_mat bulk collect into tb_seq_proc_w, tb_seq_mat_w, tb_vl_apresentado_w, tb_vl_pago_w, tb_qt_apresentado_w, tb_qt_pago_w limit 1000;
			exit when tb_seq_proc_w.count = 0;
				forall i in tb_seq_proc_w.first..tb_seq_proc_w.last
					insert into pls_monitor_tiss_alt(nr_sequencia, nm_usuario, dt_atualizacao,
						nm_usuario_nrec, dt_atualizacao_nrec,ie_tipo_evento,
						ie_status, nr_seq_conta, nr_seq_conta_proc,				
						nr_seq_conta_mat, dt_evento, qt_liberado,
						qt_apresentado, vl_liberado, vl_apresentado,
						nr_seq_conta_rec, nr_seq_proc_rec, nr_seq_mat_rec,
						ds_call_stack, cd_estabelecimento )				
					values (nextval('pls_monitor_tiss_alt_seq'), coalesce(nm_usuario_p,'SESSION'),	clock_timestamp(),
						coalesce(nm_usuario_p,'SESSION'),clock_timestamp(),ie_tipo_evento_p,
						'P', nr_seq_conta_p, tb_seq_proc_w(i),				
						tb_seq_mat_w(i), dt_evento_w, tb_qt_pago_w(i),
						tb_qt_apresentado_w(i), tb_vl_pago_w(i), tb_vl_apresentado_w(i),
						null, null, null,
						ds_log_call_w, cd_estabelecimento_w);
			end loop;
			close c_proc_mat;
			
		elsif (nr_seq_conta_rec_p IS NOT NULL AND nr_seq_conta_rec_p::text <> '') then

			insert into pls_monitor_tiss_alt(nr_sequencia, nm_usuario, dt_atualizacao,
				nm_usuario_nrec, dt_atualizacao_nrec, ie_tipo_evento,
				ie_status, nr_seq_conta, nr_seq_conta_proc,
				nr_seq_conta_mat, dt_evento, nr_seq_conta_rec,
				nr_seq_proc_rec, nr_seq_mat_rec, ds_call_stack,
				cd_estabelecimento)
			values (nextval('pls_monitor_tiss_alt_seq'), coalesce(nm_usuario_p,'SESSION'), clock_timestamp(),
				coalesce(nm_usuario_p,'SESSION'),clock_timestamp(),ie_tipo_evento_p,
				'P', nr_seq_conta_p,null,
				null,dt_evento_w,nr_seq_conta_rec_p,
				null,null,ds_log_call_w,
				cd_estabelecimento_w);
				
				open c_proc_mat_rec(nr_seq_conta_rec_p);
				loop
				tb_seq_rec_proc_w.delete;
				tb_seq_rec_mat_w.delete;
				
				fetch c_proc_mat_rec bulk collect into tb_seq_rec_proc_w, tb_seq_rec_mat_w, tb_seq_proc_w, tb_seq_mat_w, tb_vl_recursado_w, tb_vl_acatado_w limit 1000;
				exit when tb_seq_rec_proc_w.count = 0;
					forall i in tb_seq_rec_proc_w.first..tb_seq_rec_proc_w.last
						insert into pls_monitor_tiss_alt(nr_sequencia, nm_usuario, dt_atualizacao,
							nm_usuario_nrec, dt_atualizacao_nrec,ie_tipo_evento,
							ie_status, nr_seq_conta, nr_seq_conta_proc,				
							nr_seq_conta_mat, dt_evento, qt_liberado,
							qt_apresentado, vl_liberado, vl_apresentado,
							nr_seq_conta_rec, nr_seq_proc_rec, nr_seq_mat_rec,
							ds_call_stack, cd_estabelecimento)				
						values (nextval('pls_monitor_tiss_alt_seq'), coalesce(nm_usuario_p,'SESSION'),	clock_timestamp(),
							coalesce(nm_usuario_p,'SESSION'),clock_timestamp(),ie_tipo_evento_p,
							'P', nr_seq_conta_p, tb_seq_proc_w(i),				
							tb_seq_mat_w(i), dt_evento_w, null,
							null, tb_vl_acatado_w(i), tb_vl_recursado_w(i),
							nr_seq_conta_rec_p, tb_seq_rec_proc_w(i), tb_seq_rec_mat_w(i),
							ds_log_call_w, cd_estabelecimento_w);
			end loop;
			close c_proc_mat_rec;
		elsif (nr_seq_disc_p IS NOT NULL AND nr_seq_disc_p::text <> '') then

			insert into pls_monitor_tiss_alt(nr_sequencia, nm_usuario, dt_atualizacao,
				nm_usuario_nrec, dt_atualizacao_nrec, ie_tipo_evento,
				ie_status, nr_seq_conta, nr_seq_conta_proc,
				nr_seq_conta_mat, dt_evento, nr_seq_conta_rec,
				nr_seq_proc_rec, nr_seq_mat_rec, ds_call_stack,
				cd_estabelecimento, nr_seq_conta_disc)
			values (nextval('pls_monitor_tiss_alt_seq'), coalesce(nm_usuario_p,'SESSION'), clock_timestamp(),
				coalesce(nm_usuario_p,'SESSION'),clock_timestamp(),ie_tipo_evento_p,
				'P', nr_seq_conta_p,null,
				null,dt_evento_w,nr_seq_conta_rec_p,
				null,null,ds_log_call_w,
				cd_estabelecimento_w, nr_seq_disc_p);
				
				open c_proc_mat_disc(nr_seq_disc_p);
				loop
				tb_seq_disc_proc_w.delete;
				tb_seq_disc_mat_w.delete;
				
				fetch c_proc_mat_disc bulk collect into tb_seq_disc_proc_w, tb_seq_disc_mat_w, tb_seq_proc_w, tb_seq_mat_w, tb_vl_recursado_w, tb_vl_acatado_w limit 1000;
				exit when tb_seq_disc_proc_w.count = 0;
					forall i in tb_seq_disc_proc_w.first..tb_seq_disc_proc_w.last
						insert into pls_monitor_tiss_alt(nr_sequencia, nm_usuario, dt_atualizacao,
							nm_usuario_nrec, dt_atualizacao_nrec,ie_tipo_evento,
							ie_status, nr_seq_conta, nr_seq_conta_proc,				
							nr_seq_conta_mat, dt_evento, qt_liberado,
							qt_apresentado, vl_liberado, vl_apresentado,
							nr_seq_conta_disc, nr_seq_disc_proc, nr_seq_disc_mat,
							ds_call_stack, cd_estabelecimento)				
						values (nextval('pls_monitor_tiss_alt_seq'), coalesce(nm_usuario_p,'SESSION'),	clock_timestamp(),
							coalesce(nm_usuario_p,'SESSION'),clock_timestamp(),ie_tipo_evento_p,
							'P', nr_seq_conta_p, tb_seq_proc_w(i),				
							tb_seq_mat_w(i), dt_evento_w, null,
							null, tb_vl_acatado_w(i), tb_vl_recursado_w(i),
							nr_seq_disc_p, null, null,
							ds_log_call_w, cd_estabelecimento_w);
			end loop;
			close c_proc_mat_disc;
		end if;
	end if;
end if;

-- Não pode ter commit, procedure chamada em triggers
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_tiss_gravar_log_monitor ( ie_tipo_evento_p pls_monitor_tiss_alt.ie_tipo_evento%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_conta_rec_p pls_rec_glosa_conta.nr_sequencia%type, nr_seq_conta_rec_proc_p pls_rec_glosa_proc.nr_sequencia%type, nr_seq_conta_rec_mat_p pls_rec_glosa_mat.nr_sequencia%type, qt_apresentado_p pls_conta_proc.qt_procedimento%type, vl_apresentado_p pls_conta_proc.vl_provisao%type, qt_pago_p pls_conta_proc.qt_procedimento%type, vl_pago_p pls_conta_proc.vl_liberado%type, nm_usuario_p usuario.nm_usuario%type, dt_evento_p pls_monitor_tiss_alt.dt_evento%type default clock_timestamp(), nr_seq_disc_p pls_contestacao_discussao.nr_sequencia%type default null) FROM PUBLIC;

