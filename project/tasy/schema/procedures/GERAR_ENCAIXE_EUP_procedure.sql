-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_encaixe_eup (nr_atendimento_p bigint, cd_pessoa_fisica_p text, dt_encaixe_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text, cd_empresa_p bigint default null, cd_convenio_p bigint default null, cd_setor_atendimento_p bigint default null, nr_seq_tipo_checkup_p bigint default 0, ie_autorizado_p text default 'A', ie_atualizar_etapas_p text default 'N') AS $body$
DECLARE

	
cd_empresa_w            bigint;
cd_convenio_w           integer;
cd_setor_atendimento_w  integer;
nr_seq_checkup_gerado_w bigint;
ie_sexo_paciente_w      varchar(1);
qt_idade_paciente_w     bigint;
nr_procedimentos_w      varchar(4000);
nr_exames_w				varchar(4000);
dt_prevista_w 			timestamp;
dt_encaixe_w 			timestamp;
ie_inserir_etapa_w      varchar(1);
cd_plano_w				varchar(10);
ie_tipo_atend_w         smallint;
cd_pessoa_usuario_w     varchar(10);
cd_procedimento_w       bigint;
ie_origem_proced_w		bigint;
ds_erro_w               varchar(255);
ie_regra_w				varchar(2);
nr_seq_regra_w		    bigint;
ie_glosa_w		        varchar(3);
nr_seq_regra_ajuste_w   bigint;

	
C01 CURSOR FOR
	SELECT distinct b.nr_sequencia, ie_tipo_etapa, qt_min_prev, cd_profissional, b.ie_consist_convenio, a.nr_seq_proc_interno, a.nr_seq_exame
	from   etapa_checkup_item a, etapa_checkup b, checkup d
	where  d.nr_sequencia = nr_seq_checkup_gerado_w
	and    a.nr_seq_etapa = b.nr_Sequencia
	and    (((nr_seq_proc_interno IS NOT NULL AND nr_seq_proc_interno::text <> '') and (obter_se_contido_char(nr_seq_proc_interno,nr_procedimentos_w) = 'S'))
	or     ((nr_seq_exame IS NOT NULL AND nr_seq_exame::text <> '') and (obter_se_contido_char(nr_seq_exame,nr_exames_w) = 'S')))
	and (not(coalesce(nr_seq_tipo_checkup_p,0) > 0) or Obter_se_item_checkup_lib(a.nr_sequencia,cd_empresa_w,d.nr_seq_tipo_checkup)	= 'S')
	and	   coalesce(a.ie_sexo, ie_sexo_paciente_w) = ie_sexo_paciente_w
	and    qt_idade_paciente_w between coalesce(a.qt_idade_min,qt_idade_paciente_w) and coalesce(a.qt_idade_max,qt_idade_paciente_w)
	and    b.cd_estabelecimento = coalesce(cd_estabelecimento_p,b.cd_estabelecimento)
	and    not exists (SELECT 1 from CHECKUP_ETAPA e where e.nr_seq_checkup = d.nr_sequencia and e.nr_seq_etapa = b.nr_sequencia);
	
C02 CURSOR FOR
	SELECT distinct coalesce(c.nr_seq_proc_interno,0) nr_seq_proc_interno, coalesce(c.nr_seq_exame,0) nr_seq_exame
	from   atendimento_paciente a, prescr_medica b, prescr_procedimento c
	where  a.nr_atendimento = nr_atendimento_p
	and    b.nr_atendimento = a.nr_atendimento
	and    c.nr_prescricao = b.nr_prescricao
	and    (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '');

BEGIN

select coalesce(max(ie_sexo),'X'),
       obter_idade(max(dt_nascimento),clock_timestamp(),'A')
into STRICT   ie_sexo_paciente_w, qt_idade_paciente_w
from   pessoa_fisica
where  cd_pessoa_fisica = cd_pessoa_fisica_p;

if (ie_atualizar_etapas_p = 'S') then
	select max(nr_Sequencia), max(dt_previsto), max(cd_empresa_ref)
	into STRICT   nr_seq_checkup_gerado_w, dt_encaixe_w, cd_empresa_w
	from   checkup
	where  nr_sequencia = (SELECT max(nr_Sequencia)	from checkup where nr_atendimento = nr_atendimento_p);
	
	select max(coalesce(cd_convenio_p, b.cd_convenio)),
		   max(coalesce(cd_setor_atendimento_p, cd_setor_atendimento))
	into STRICT   cd_convenio_w, cd_setor_atendimento_w
	from   atendimento_paciente a left join atend_paciente_unidade c on a.nr_atendimento = c.nr_atendimento, atend_categoria_convenio b
	where  a.nr_atendimento = nr_atendimento_p
	and    b.nr_atendimento = a.nr_atendimento;
else
	dt_encaixe_w := dt_encaixe_p;
	
	select max(coalesce(cd_empresa_p, b.cd_empresa)),
		   max(coalesce(cd_convenio_p, b.cd_convenio)),
		   max(coalesce(cd_setor_atendimento_p, cd_setor_atendimento))
	into STRICT   cd_empresa_w, cd_convenio_w, cd_setor_atendimento_w
	from   atendimento_paciente a left join atend_paciente_unidade c on a.nr_atendimento = c.nr_atendimento, atend_categoria_convenio b
	where  a.nr_atendimento = nr_atendimento_p
	and    b.nr_atendimento = a.nr_atendimento;
	
	nr_seq_checkup_gerado_w := gerar_encaixe_checkup(dt_encaixe_w, cd_pessoa_fisica_p, cd_empresa_w, cd_convenio_w, cd_estabelecimento_p, nm_usuario_p, cd_setor_atendimento_w, nr_Atendimento_p, ie_autorizado_p, nr_seq_checkup_gerado_w);
		
	if (nr_seq_tipo_checkup_p > 0) then
		update checkup
		set    nr_seq_tipo_checkup = nr_seq_tipo_checkup_p
		where  nr_sequencia = nr_seq_checkup_gerado_w;
		
		commit;
	end if;
end if;


if (nr_seq_checkup_gerado_w > 0) then
	for dados_proced in C02
		loop
		if (dados_proced.nr_seq_proc_interno > 0) then
			nr_procedimentos_w := substr(nr_procedimentos_w || ',' ||dados_proced.nr_seq_proc_interno,1,4000);
		end if;
		if (dados_proced.nr_seq_exame > 0) then
			nr_exames_w := substr(nr_exames_w || ',' ||dados_proced.nr_seq_exame,1,4000);
		end if;
		end loop;
		
	cd_plano_w := Obter_Plano_Convenio_Atend(nr_atendimento_p,'C');
    ie_tipo_atend_w := Obter_Tipo_Atendimento(nr_atendimento_p);
    cd_pessoa_usuario_w := OBTER_PESSOA_FISICA_USUARIO(nm_usuario_p,'C');
		
	FOR etapas in C01
		LOOP
		
		ie_inserir_etapa_w := 'S';
		if (etapas.ie_consist_convenio = 'S') then
				
			SELECT * FROM Obter_Proc_Tab_Interno_Conv2(etapas.nr_seq_proc_interno, obter_estabelecimento_ativo, cd_convenio_w, 0, cd_plano_w, null, 0, cd_procedimento_w, ie_origem_proced_w, ie_tipo_atend_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
					
			SELECT * FROM consiste_plano_convenio(nr_atendimento_p, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, clock_timestamp(), 1, ie_tipo_atend_w, cd_plano_w, null, ds_erro_w, cd_setor_atendimento_w, etapas.nr_seq_exame, ie_regra_w, null, nr_seq_regra_w, etapas.nr_seq_proc_interno, null, obter_estabelecimento_ativo, null, null, cd_pessoa_usuario_w, ie_glosa_w, nr_seq_regra_ajuste_w) INTO STRICT ds_erro_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, nr_seq_regra_ajuste_w;
						
			if (ie_regra_w = 2) and (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				ie_inserir_etapa_w := 'N';
			end if;
				
				
		end if;
		
		if (ie_inserir_etapa_w = 'S') then
		
			dt_prevista_w := dt_encaixe_w;
			if (etapas.ie_tipo_etapa = 'R') then
				dt_prevista_w	:= dt_encaixe_w + (etapas.qt_min_prev / 1440);
			end if;
			
			insert into checkup_etapa(
				nr_sequencia,
				nr_seq_checkup,
				dt_atualizacao,
				nm_usuario,
				nr_seq_etapa,
				dt_prevista,
				cd_pessoa_fisica)
			Values (	nextval('checkup_etapa_seq'),
				nr_seq_checkup_gerado_w,
				clock_timestamp(),
				nm_usuario_p,
				etapas.nr_sequencia,
				dt_prevista_w,
				CASE WHEN etapas.cd_profissional='' THEN null  ELSE etapas.cd_profissional END );
		end if;
		
		END LOOP;

	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_encaixe_eup (nr_atendimento_p bigint, cd_pessoa_fisica_p text, dt_encaixe_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text, cd_empresa_p bigint default null, cd_convenio_p bigint default null, cd_setor_atendimento_p bigint default null, nr_seq_tipo_checkup_p bigint default 0, ie_autorizado_p text default 'A', ie_atualizar_etapas_p text default 'N') FROM PUBLIC;

