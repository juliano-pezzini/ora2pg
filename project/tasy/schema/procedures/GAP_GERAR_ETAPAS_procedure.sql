-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gap_gerar_etapas ( nr_sequencia_p bigint, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE


cd_pessoa_fisica_w	varchar(10);
nr_sequencia_w		bigint;
nr_seq_tipo_w		bigint;
nr_sequencia_doc_w	bigint;
qt_dias_w		double precision;
dt_aux_w			timestamp		:= clock_timestamp();
ie_regra_pessoa_w		varchar(2);
nr_seq_depto_w		bigint;
ds_titulo_etapa_w		varchar(80);
cd_especialidade_w	bigint;
nr_sequencia_checklist_w bigint;

c01 CURSOR FOR
SELECT	ie_regra_pessoa,
	nr_seq_depto,
	ds_titulo_etapa,
	cd_pessoa_fisica
from	gap_ritual
where	nr_seq_tipo	= nr_seq_tipo_w
and	ie_situacao	= 'A';

c03 CURSOR FOR
SELECT	cd_pessoa_fisica,
	nr_sequencia,
	qt_dia,
	ie_regra_pessoa,
	nr_seq_depto,
	ds_titulo_etapa
from	gap_ritual
where	nr_seq_tipo	= nr_seq_tipo_w
and	ie_situacao	= 'A'
order by nr_seq_apres;

c02 CURSOR FOR
SELECT	nr_sequencia
from	gap_tipo_doc
where	nr_seq_tipo	= nr_seq_tipo_w
and		ie_situacao = 'A';

c04 CURSOR FOR
SELECT	nr_sequencia
from	gap_checklist
where	nr_seq_process_type	= nr_seq_tipo_w and ie_situacao = 'A';


BEGIN

/* limpar os registros atuais */

delete	from	gap_processo_doc
where	nr_seq_processo = nr_sequencia_p;


delete	from	gap_processo_etapa
where	nr_seq_processo = nr_sequencia_p;

delete	from	gap_process_checklist
where	nr_seq_process = nr_sequencia_p;

select	nr_seq_tipo,
	cd_especialidade
into STRICT	nr_seq_tipo_w,
	cd_especialidade_w
from	gap_processo
where	nr_sequencia	= nr_sequencia_p;

ds_erro_p	:= null;

open c01;
loop
fetch c01 into
	ie_regra_pessoa_w,
	nr_seq_depto_w,
	ds_titulo_etapa_w,
	cd_pessoa_fisica_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	if (ie_regra_pessoa_w = 'P') and (coalesce(cd_pessoa_fisica_w::text, '') = '') then

		ds_erro_p		:= ds_erro_p || ds_titulo_etapa_w || WHEB_MENSAGEM_PCK.get_texto(278789) || chr(13) || chr(10);

	elsif (ie_regra_pessoa_w = 'D') and (coalesce(nr_seq_depto_w::text, '') = '') then

		ds_erro_p	:= ds_erro_p || ds_titulo_etapa_w || WHEB_MENSAGEM_PCK.get_texto(278790) || chr(13) || chr(10);

	elsif (ie_regra_pessoa_w = 'DE') and (coalesce(cd_especialidade_w::text, '') = '') then

		ds_erro_p		:= ds_erro_p || ds_titulo_etapa_w || WHEB_MENSAGEM_PCK.get_texto(278791) || chr(13) || chr(10);

	end if;
end loop;
close c01;

if (coalesce(ds_erro_p::text, '') = '') then
	begin

	open c03;
	loop
	fetch c03 into
		cd_pessoa_fisica_w,
		nr_sequencia_w,
		qt_dias_w,
		ie_regra_pessoa_w,
		nr_seq_depto_w,
		ds_titulo_etapa_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */

		if (ie_regra_pessoa_w = 'D')	and (nr_seq_depto_w IS NOT NULL AND nr_seq_depto_w::text <> '')	then
			begin

			select	obter_resp_depto(nr_seq_depto_w,clock_timestamp())
			into STRICT	cd_pessoa_fisica_w
			;
			exception when others then
				cd_pessoa_fisica_w := null;

			end;
		elsif (ie_regra_pessoa_w = 'DE') and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '') then
			begin

			select	max(nr_seq_depto)
			into STRICT	nr_seq_depto_w
			from	depto_medico_espec
			where	cd_especialidade = cd_especialidade_w;
			exception when others then
				nr_seq_depto_w := null;
			end;
			begin
			select	obter_resp_depto(nr_seq_depto_w,clock_timestamp())
			into STRICT	cd_pessoa_fisica_w
			;
			exception when others then
				cd_pessoa_fisica_w := null;
			end;
		end if;

		insert into gap_processo_etapa(
			nr_sequencia,
			nr_seq_processo,
			nr_seq_etapa,
			dt_atualizacao,
			nm_usuario,
			cd_pessoa_fisica,
			ie_resultado,
			dt_prevista,
			nr_seq_depto)
		SELECT	nextval('gap_processo_etapa_seq'),
			nr_sequencia_p,
			nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_pessoa_fisica_w,
			'N',
			(dt_aux_w + qt_dias_w),
			nr_seq_depto_w
		;

		dt_aux_w:= dt_aux_w + qt_dias_w;

	end loop;
	close c03;

	open c02;
	loop
	fetch c02 into
		nr_sequencia_doc_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */

		insert into gap_processo_doc(
			nr_sequencia,
			nr_seq_processo,
			nr_seq_doc,
			dt_atualizacao,
			nm_usuario)
		SELECT	nextval('gap_processo_doc_seq'),
			nr_sequencia_p,
			nr_sequencia_doc_w,
			clock_timestamp(),
			nm_usuario_p
		;

	end loop;
	close c02;

  open c04;
	loop
	fetch c04 into
		nr_sequencia_checklist_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */

		insert into gap_process_checklist(
			nr_sequencia,
			nr_seq_process,
			nr_seq_checklist,
			dt_atualizacao,
			nm_usuario,
                                                dt_atualizacao_nrec,
                                                nm_usuario_nrec)
		values (	nextval('gap_process_checklist_seq'),
			nr_sequencia_p,
			nr_sequencia_checklist_w,
			clock_timestamp(),
			nm_usuario_p,
                                                clock_timestamp(),
			nm_usuario_p);

	end loop;
	close c04;

	end;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gap_gerar_etapas ( nr_sequencia_p bigint, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;

