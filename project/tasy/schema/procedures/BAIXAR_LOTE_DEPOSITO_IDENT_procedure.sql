-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixar_lote_deposito_ident ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Realizar a baixa dos itens do lote de retorno de depósito identificado, caso seja 
encontrado depósito com o código é realizada tentativa de baixa do item, caso ocorra um 
problema durante a baixa é gerado um log com o problema, caso nem mesmo seja realizada 
identificação é gerado um log de que o depósito inexiste 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ X ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: Tratamentos realizados dentro da rotina BAIXAR_ITENS_DEPOSITO_IDEN 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
				 
ds_erro_baixa_w		varchar(255);
cd_identif_dep_w	varchar(50);
nr_identificacao_w	varchar(30);				
cd_identificacao_w	varchar(25);
ie_digito_w		varchar(2);
ie_digito_ident_w	varchar(2);
ie_identificado_w	varchar(1)	:= null;
vl_deposito_w		double precision;
nr_seq_conta_banco_w	bigint;
nr_seq_deposito_w	bigint;
nr_seq_ret_dep_w	bigint;
dt_liberacao_w		timestamp;

C01 CURSOR FOR 
	SELECT	a.cd_identificacao, 
		a.vl_deposito, 
		0, 
		a.nr_sequencia 
	from	lote_ret_dep_ident_item	a 
	where	a.nr_seq_lote	= nr_seq_lote_p 
	and	coalesce(ds_erro_baixa::text, '') = '';

C02 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		a.nr_identificacao, 
		a.ie_digito_ident 
	from	deposito_identificado	a 
	where	coalesce(a.dt_deposito::text, '') = '' 
	and	a.cd_estabelecimento	= cd_estabelecimento_p 
	and	a.nr_seq_conta_banco 	= nr_seq_conta_banco_w 
	and	a.ie_status = 'AD' 
	order by 1;


BEGIN 
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then 
	-- Fazer consistencias 
	select	a.nr_seq_conta_banco 
	into STRICT	nr_seq_conta_banco_w 
	from	lote_ret_deposito_ident	a 
	where	a.nr_sequencia	= nr_seq_lote_p;
 
	update	lote_ret_dep_ident_item a 
	set	ds_erro_baixa	= wheb_mensagem_pck.get_texto(303465) -- Número de identificação repetido. 
	where	exists (SELECT	1 
		from	lote_ret_dep_ident_item x 
		where	x.nr_sequencia		<> a.nr_sequencia 
		and	x.cd_identificacao	= a.cd_identificacao 
		and	x.nr_seq_lote		= a.nr_seq_lote) 
	and	coalesce(a.ds_erro_baixa::text, '') = '' 
	and	a.nr_seq_lote	= nr_seq_lote_p;
 
	<<comeco>> 
	 
	begin 
	open C01;
	loop 
	fetch C01 into	 
		cd_identificacao_w, 
		vl_deposito_w, 
		ie_digito_w, 
		nr_seq_ret_dep_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin	 
		ds_erro_baixa_w		:= '';
		 
		open C02;
		loop 
		fetch C02 into	 
			nr_seq_deposito_w, 
			nr_identificacao_w, 
			ie_digito_ident_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			ie_identificado_w	:= 'N';
			 
			cd_identif_dep_w	:= nr_identificacao_w || ie_digito_ident_w;
			 
			if (somente_numero(cd_identif_dep_w) = somente_numero(cd_identificacao_w)) or (nr_identificacao_w = somente_numero(cd_identificacao_w)) then 
				CALL baixar_itens_deposito_iden(nr_seq_deposito_w,cd_estabelecimento_p,nm_usuario_p,'N', nr_seq_lote_p);
				 
				ie_identificado_w	:= 'S';
				 
				exit;
			else 
				ie_identificado_w	:= 'N';
			end if;
			end;
		end loop;
		close C02;
		 
		if (ie_identificado_w = 'N') then 
			update lote_ret_dep_ident_item	 
			set	ds_erro_baixa	= wheb_mensagem_pck.get_texto(303466, 'NR_SEQ_DEPOSITO_W=' || nr_seq_deposito_w) -- Número de identificação não localizado. Depósito: #@NR_SEQ_DEPOSITO_W#@ 
			where 	nr_sequencia	= nr_seq_ret_dep_w;
		else			 
			update lote_ret_dep_ident_item	 
			set	ds_erro_baixa	 = NULL 
			where 	nr_sequencia	= nr_seq_ret_dep_w;
		end if;
		end;
	end loop;
	close C01;
	exception 
	when others then 
		rollback;
		 
		/* Tratado para fechar os cursores caso ocorra um erro durante a baixa do deopósito identificado */
 
		if (C02%ISOPEN) then 
			close C02;
		end if;	
 
		if (C01%ISOPEN) then 
			close C01;
		end if;	
 
		ie_identificado_w	:= 'E';
		ds_erro_baixa_w		:= substr(sqlerrm, 1, 255);
	end;
	 
	if (ie_identificado_w = 'E') then 
		ie_identificado_w	:= 'N';
		 
		update lote_ret_dep_ident_item	 
		set	ds_erro_baixa	= coalesce(ds_erro_baixa_w, wheb_mensagem_pck.get_texto(303468)) -- Número de identificação não localizado. 
		where 	nr_sequencia	= nr_seq_ret_dep_w;
		 
		commit;
		 
		goto comeco;
	end if;
	 
	-- Atualiza o status do lote 
	update	lote_ret_deposito_ident 
	set	nm_usuario	= nm_usuario_p, 
		dt_liberacao	= clock_timestamp() 
	where	nr_sequencia	= nr_seq_lote_p;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixar_lote_deposito_ident ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

