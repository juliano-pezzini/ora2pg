-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_executor_agenda (cd_tipo_agenda_p bigint, cd_agenda_p bigint, nr_seq_agenda_p bigint, cd_medico_exec_p text, cd_pessoa_fisica_p text, qt_idade_paciente_p bigint, ds_consistencia_p INOUT text) AS $body$
DECLARE


/* retorno */

ds_consistencia_w	varchar(255) := null;

/* disp exec */

ie_exec_disp_w	varchar(1) := 'S';
dt_agenda_w		timestamp;
nr_minuto_duracao_w	bigint;
nr_seq_exame_w	            agenda_paciente.nr_sequencia%type;
nr_seq_cons_w		bigint;
ds_agenda_ww		varchar(50);
dt_agenda_ww		timestamp;
nm_paciente_ww	varchar(80);


/* idade exec */

nr_seq_regra_w	bigint;
qt_idade_min_w	smallint := -1;
qt_idade_max_w	smallint := -1;
ie_idade_regra_w	varchar(1) := 'S';

/* idade pf */

dt_nascimento_w	timestamp;
dt_atual_w		timestamp;
qt_idade_w		smallint := -1;


BEGIN
if (cd_tipo_agenda_p IS NOT NULL AND cd_tipo_agenda_p::text <> '') and (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (cd_medico_exec_p IS NOT NULL AND cd_medico_exec_p::text <> '') then
	if (cd_tipo_agenda_p = 2) then
		/* -> consistir horario executor <- */


		/* obter data x duracao agendamento atual */


		/*
		select	hr_inicio,
			nr_minuto_duracao
		into	dt_agenda_w,
			nr_minuto_duracao_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;
		*/


		/* verificar agenda exame */


		/*
		select	nvl(max(nr_sequencia),0)
		into	nr_seq_exame_w
		from	agenda_paciente
		where	nr_sequencia <> nr_seq_agenda_p
		and	cd_medico_exec = cd_medico_exec_p
		and	hr_inicio between dt_agenda_w and dt_agenda_w + nr_minuto_duracao_w / 1440
		and	ie_status_agenda not in ('F','I','L','B','R','LF','PA','E','C');
		*/


		/* verificar agenda consulta */


		/*
		if	(nr_seq_exame_w > 0) then
			ie_exec_disp_w := 'N';
		end if;
		*/

		
		/* consistir idade paciente */

		if (ie_exec_disp_w = 'S') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') or (qt_idade_paciente_p IS NOT NULL AND qt_idade_paciente_p::text <> '') then
			/* obter regra executor idade */

			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_regra_w
			from	agenda_medico			
			where	cd_agenda = cd_agenda_p
			and	cd_medico = cd_medico_exec_p
			and	coalesce(ie_situacao,'A') = 'A'
			and ((qt_idade_min IS NOT NULL AND qt_idade_min::text <> '') or (qt_idade_max IS NOT NULL AND qt_idade_max::text <> ''));

			/* validar regra */

			if (nr_seq_regra_w > 0) then
				/* obter faixa etaria */

				select	max(qt_idade_min),
					max(qt_idade_max)
				into STRICT	qt_idade_min_w,
					qt_idade_max_w
				from	agenda_medico				
				where	nr_sequencia = nr_seq_regra_w
				and	coalesce(ie_situacao,'A') = 'A';

				/* obter idade pf */

				if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then
					select	max(dt_nascimento),
						coalesce(max(dt_obito),clock_timestamp())
					into STRICT	dt_nascimento_w,
						dt_atual_w
					from	pessoa_fisica
					where	cd_pessoa_fisica = cd_pessoa_fisica_p;

					if (dt_nascimento_w IS NOT NULL AND dt_nascimento_w::text <> '') then
						select	coalesce(obter_idade(dt_nascimento_w, dt_atual_w, 'A'),-1)
						into STRICT	qt_idade_w
						;
					end if;
					/* obter idade agenda */

				elsif (qt_idade_paciente_p IS NOT NULL AND qt_idade_paciente_p::text <> '') then	
					qt_idade_w := qt_idade_paciente_p;
				end if;

				/* consistir idade x regra */

				if (qt_idade_w > -1) and
					((coalesce(qt_idade_min_w,-1) > -1) or (coalesce(qt_idade_max_w,-1) > -1)) then
					select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
					into STRICT	ie_idade_regra_w
					
					where	qt_idade_w between coalesce(qt_idade_min_w,qt_idade_w) and coalesce(qt_idade_max_w,qt_idade_w);
				end if;
			end if;
		end if;
	end if;
end if;

/* verificar consistencia */

if (cd_tipo_agenda_p = 2) then
	if (ie_exec_disp_w = 'N') then
		/*
		if	(nr_seq_exame_w > 0) then
		*/

			/* obter dados agenda x mensagem */


		/*
			select	substr(obter_nome_agenda(cd_agenda),1,50),
				nvl(substr(obter_nome_pf(cd_pessoa_fisica),1,60),nm_paciente),
				hr_inicio
			into	ds_agenda_ww,
				nm_paciente_ww,
				dt_agenda_ww
			from	agenda_paciente
			where	nr_sequencia = nr_seq_exame_w;
		elsif	(nr_seq_cons_w > 0) then
			ds_consistencia_w := null;
		end if;

		ds_consistencia_w :=	'Este profissional possui um agendamento concorrente a este marcado neste horario.'||chr(10)||
					ds_agenda_ww ||' - '||to_char(dt_agenda_ww,'dd/mm/yyyy hh24:mi:ss')||' - '||nm_paciente_ww;
		*/
		ds_consistencia_w := null;
	elsif (ie_idade_regra_w = 'N') then
		if (qt_idade_min_w > -1) and (qt_idade_max_w > -1) then
			ds_consistencia_w :=	wheb_mensagem_pck.get_texto(796785) || chr(10) ||
						wheb_mensagem_pck.get_texto(796786,
									'QT_IDADE_MIN_W='||to_char(qt_idade_min_w)||
									';QT_IDADE_MAX_W='||to_char(qt_idade_max_w)) ||
						wheb_mensagem_pck.get_texto(796790, 'QT_IDADE_W='||to_char(qt_idade_w));
		elsif (qt_idade_min_w > -1) then
			ds_consistencia_w :=	wheb_mensagem_pck.get_texto(796785) || chr(10) ||
						wheb_mensagem_pck.get_texto(796788, 'QT_IDADE_MIN_W='||to_char(qt_idade_min_w)) ||
						wheb_mensagem_pck.get_texto(796790, 'QT_IDADE_W='||to_char(qt_idade_w));
		elsif (qt_idade_max_w > -1) then
			ds_consistencia_w :=	wheb_mensagem_pck.get_texto(796785) || chr(10) ||
						wheb_mensagem_pck.get_texto(796789, 'QT_IDADE_MAX_W='||to_char(qt_idade_max_w)) ||
						wheb_mensagem_pck.get_texto(796790, 'QT_IDADE_W='||to_char(qt_idade_w));
		end if;
	end if;
end if;

ds_consistencia_p := ds_consistencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_executor_agenda (cd_tipo_agenda_p bigint, cd_agenda_p bigint, nr_seq_agenda_p bigint, cd_medico_exec_p text, cd_pessoa_fisica_p text, qt_idade_paciente_p bigint, ds_consistencia_p INOUT text) FROM PUBLIC;

