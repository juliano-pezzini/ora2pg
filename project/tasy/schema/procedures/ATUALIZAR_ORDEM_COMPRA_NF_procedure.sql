-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_ordem_compra_nf ( nr_sequencia_p bigint, nm_usuario_p text, ie_acao_p text) AS $body$
DECLARE


---- ie_acao_p (I - inclusao, E - estorno)
ie_erro_w				varchar(1) 	:= '';
nr_ordem_compra_w		bigint	:= 0;
nr_item_nf_w			integer		:= 0;
cd_material_w			integer		:= 0;
qt_entrega_w			double precision	:= 0;
qt_entrega_prevista_w		double precision;
qt_item_nf_w			double precision;
qt_item_estoque_w			double precision;
cd_unidade_medida_nota_w		varchar(30);
qt_pendente_w			bigint	:= 0;
nm_usuario_w			varchar(15)	:= '';
nr_item_oci_w			integer	:= 0;
nr_seq_lic_item_w			bigint;
dt_prev_entrega_w			timestamp;
dt_entrega_ordem_w		timestamp;
cd_estabelecimento_w   		smallint;
nm_estabelecimento_w   		varchar(80);
cd_cgc_emitente_w 		varchar(14);
cd_serie_nf_w 			nota_fiscal.cd_serie_nf%type;
nr_nota_fiscal_w 			varchar(255);
nr_sequencia_nf_w 		bigint;
qt_integracao_me_w		bigint;
ie_status_exportar_w		varchar(1);
ds_historico_w			varchar(255);
ie_tipo_ordem_w			varchar(1);
nr_seq_entrega_prev_w		bigint;
ie_unidade_medida_w		varchar(3);
qt_existe_reg_entrega_w		bigint;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_estabelecimento_w		varchar(14);
ie_devolucao_w			varchar(1);
ds_material_w			varchar(255);
ie_estorna_ordem_w		varchar(1);
dt_entrada_saida_w		timestamp;
qt_real_entrega_w		ordem_compra_item_entrega.qt_real_entrega%type;
qt_prevista_entrega_w		ordem_compra_item_entrega.qt_prevista_entrega%type;
qt_pendente_ww			ordem_compra_item_entrega.qt_prevista_entrega%type;
dt_entrega_ordem_ww		timestamp;

c01 CURSOR FOR
SELECT  a.nr_ordem_compra,
	a.cd_material,
	a.qt_item_nf,
	a.qt_item_estoque,
	a.cd_unidade_medida_compra,
	a.nr_item_nf,
	a.nm_usuario,
	b.cd_estabelecimento,
	b.cd_cgc_emitente,
	b.cd_pessoa_fisica,
	b.cd_serie_nf,
	b.nr_nota_fiscal,
	b.nr_sequencia_nf,
	a.nr_item_oci,
	a.dt_entrega_ordem
from 	nota_fiscal_item a,
	nota_fiscal b
where	a.nr_sequencia = nr_sequencia_p
and 	a.nr_sequencia = b.nr_sequencia
and 	coalesce(a.nr_ordem_compra,0) > 0
and	coalesce(a.nr_item_oci,0) > 0;

c02 CURSOR FOR
SELECT	a.nr_ordem_compra,
	a.nr_item_oci,
	a.dt_entrega,
	a.qt_entrega
from	ordem_compra_nota_fiscal a
where	a.nr_sequencia = nr_sequencia_p;

c03 CURSOR FOR
SELECT	distinct nr_ordem_compra
from	ordem_compra_nota_fiscal
where	nr_sequencia = nr_sequencia_p;


BEGIN

select	nr_ordem_compra,
	cd_estabelecimento,
	dt_entrada_saida
into STRICT	nr_ordem_compra_w,
	cd_estabelecimento_w,
	dt_entrada_saida_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

select	cd_cgc
into STRICT	cd_cgc_estabelecimento_w
from	estabelecimento
where	cd_estabelecimento = cd_estabelecimento_w;

begin
ie_estorna_ordem_w := Obter_Param_Usuario(40, 169, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_estorna_ordem_w);
exception when others then
	ie_estorna_ordem_w	:= 'N';
end;

if (coalesce(nr_ordem_compra_w,0) > 0 and ie_acao_p = 'I') then
	begin
	select	coalesce(ie_tipo_ordem,'N')
	into STRICT	ie_tipo_ordem_w
	from	ordem_compra
	where	nr_ordem_compra = nr_ordem_compra_w;
	
	if (ie_tipo_ordem_w = 'T') then
		begin
		nm_estabelecimento_w := substr(obter_nome_estabelecimento(cd_estabelecimento_w),1,80);

		ds_historico_w	:= WHEB_MENSAGEM_PCK.get_texto(297465,'NM_ESTABELECIMENTO_W='||NM_ESTABELECIMENTO_W);

		CALL inserir_historico_ordem_compra(
					nr_ordem_compra_w,
					'S',
					WHEB_MENSAGEM_PCK.get_texto(297467),
					ds_historico_w,
					nm_usuario_p);
		end;
	end if;
	end;
end if;

if (ie_acao_p = 'I') then
	begin
	open c01;
	loop
	fetch c01 into
		nr_ordem_compra_w,
		cd_material_w,
		qt_item_nf_w,
		qt_item_estoque_w,
		cd_unidade_medida_nota_w,
		nr_item_nf_w,
		nm_usuario_w,
		cd_estabelecimento_w,
		cd_cgc_emitente_w,
		cd_pessoa_fisica_w,
		cd_serie_nf_w,
		nr_nota_fiscal_w,
		nr_sequencia_nf_w,
		nr_item_oci_w,
		dt_prev_entrega_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
 		begin
		/*Sidnei 14/03/2011 - alterado forma tratamento conversao*/

		
		select	CASE WHEN 	a.cd_unidade_medida_compra=b.cd_unidade_medida_compra THEN 	'UMP' WHEN 	a.cd_unidade_medida_compra=b.cd_unidade_medida_estoque THEN  	'UME' WHEN 	a.cd_unidade_medida_compra=b.cd_unidade_medida_consumo THEN 	'UMC'  ELSE 'UME' END
		into STRICT	ie_unidade_medida_w
		from	ordem_compra_item a,
			material b
		where	a.cd_material = b.cd_material
		and	a.nr_ordem_compra = nr_ordem_compra_w
		and	a.nr_item_oci = nr_item_oci_w;			
	
		qt_entrega_w := obter_quantidade_convertida(cd_material_w, qt_item_nf_w, cd_unidade_medida_nota_w, ie_unidade_medida_w);

		select	coalesce(max(nr_seq_lic_item), 0) /* edgar 26/08/2003 */
		into STRICT	nr_seq_lic_item_w
		from	ordem_compra_item
		where	nr_ordem_compra = nr_ordem_compra_w
		and	nr_item_oci = nr_item_oci_w;

		if (nr_seq_lic_item_w <> 0) then
			update	nota_fiscal_item
			set	nr_seq_lic_item = nr_seq_lic_item_w
			where	nr_ordem_compra = nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w;
		end if;

		if (coalesce(dt_prev_entrega_w::text, '') = '') then
			select	min(dt_prevista_entrega)
			into STRICT	dt_prev_entrega_w
			from	ordem_compra_item x,
				ordem_compra_item_entrega y
			where	x.nr_ordem_compra = nr_ordem_compra_w
			and	x.nr_ordem_compra = y.nr_ordem_compra
			and	x.nr_item_oci = y.nr_item_oci
			and	x.cd_material = cd_material_w
			and (coalesce(y.qt_prevista_entrega,0) - coalesce(qt_real_entrega,0)) >= 0;
		end if;
		
		if (coalesce(nr_item_oci_w::text, '') = '') then
			select	min(x.nr_item_oci)
			into STRICT	nr_item_oci_w
			from	ordem_compra_item x,
				ordem_compra_item_entrega y
			where	x.nr_ordem_compra = nr_ordem_compra_w
			and	x.nr_ordem_compra = y.nr_ordem_compra
			and	x.nr_item_oci = y.nr_item_oci
			and	x.cd_material = cd_material_w
			and	y.dt_prevista_entrega = dt_prev_entrega_w;
		end if;

		
		if (obter_se_nota_entrada_saida(nr_sequencia_p) <> 'S') then
			begin

			select	count(*)
			into STRICT	qt_existe_reg_entrega_w
			from	ordem_compra_item_entrega
			where	nr_ordem_compra	= nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w
			and	pkg_date_utils.start_of(dt_prevista_entrega, 'DD', 0) = pkg_date_utils.start_of(dt_prev_entrega_w, 'DD', 0);

			if (qt_existe_reg_entrega_w = 0) then
				begin

				CALL INSERIR_HISTORICO_ORDEM_COMPRA(
					nr_ordem_compra_w,
					'S',
					WHEB_MENSAGEM_PCK.get_texto(297468),
					WHEB_MENSAGEM_PCK.get_texto(297470,'NR_ORDEM_COMPRA_W='||to_char(nr_ordem_compra_w)||
									';NR_ITEM_OCI_W='||to_char(nr_item_oci_w)||
									';DT_PREV_ENTREGA_W='||PKG_DATE_FORMATERS.to_varchar(dt_prev_entrega_w, 'shortDate', 8031,PKG_DATE_FORMATERS.getCalendar(cd_estabelecimento_w,nm_usuario_w))),
					nm_usuario_p);
				
				/*gravar__log__tasy(9170,
					'Sem entrega. OC/Item/Entrega ' || to_char(nr_ordem_compra_w) || '/' || to_char(nr_item_oci_w) || '/' || to_char(dt_prev_entrega_w,'dd/mm/yyyy'),
					nm_usuario_p);*/
				end;
			end if;

			update	ordem_compra_item_entrega
			set	dt_real_entrega	= coalesce(dt_entrada_saida_w,clock_timestamp()),
				qt_real_entrega	= (coalesce(qt_real_entrega,0) + qt_entrega_w)
			where	nr_ordem_compra	= nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w
			and	pkg_date_utils.start_of(dt_prevista_entrega, 'DD', 0) = pkg_date_utils.start_of(dt_prev_entrega_w, 'DD', 0)
			and	coalesce(dt_cancelamento::text, '') = '';
			/* Juan em 10/01 - coloquei o trunc pois quando a OC e gerada pela funcao Licitacao a data prevista
			 de entrega possuia hora ficando diferente da data da tabela ordem_compra_item_entrega*/

			/* Elemar em 04/03/04 - troquei a linha abaixo */


		/*	and	dt_prevista_entrega = trunc(dt_prev_entrega_w,'dd'); /*18/02/2004 fabio coloquei o trunc */

			select	max(y.qt_prevista_entrega),
				max(y.nr_sequencia)
			into STRICT	qt_entrega_prevista_w,
				nr_seq_entrega_prev_w
			from	ordem_compra_item x,
				ordem_compra_item_entrega y
			where	x.nr_ordem_compra = nr_ordem_compra_w
			and	x.nr_ordem_compra = y.nr_ordem_compra
			and	x.nr_item_oci = y.nr_item_oci
			and	x.nr_item_oci = nr_item_oci_w
			and	y.dt_prevista_entrega = dt_prev_entrega_w;
		
			if (qt_entrega_w <> qt_entrega_prevista_w) then
				CALL envia_comunic_entrega_real(	nr_ordem_compra_w,
								nr_item_oci_w,
								cd_material_w,
								nr_seq_entrega_prev_w,
								qt_entrega_w,
								nm_usuario_p);
			end if;
		
			update	ordem_compra_item
			set	qt_material_entregue = (coalesce(qt_material_entregue,0) + qt_entrega_w)
			where	nr_ordem_compra = nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w;
			end;
		else
			begin

			select	coalesce(max(o.ie_devolucao),'N')
			into STRICT	ie_devolucao_w
			from	operacao_nota o,
				nota_fiscal a
			where	a.nr_sequencia = nr_sequencia_p
			and	a.cd_operacao_nf = o.cd_operacao_nf;

			if (ie_devolucao_w = 'S') and (ie_estorna_ordem_w = 'C') and (coalesce(qt_entrega_w,0) <> 0) then /*Nem entra no IF caso a quantidade devolvida seja zero. Isso foi feito para nao limpar a data real de entrega caso devolva zero.*/
				begin

				begin
				update	ordem_compra_item
				set	qt_material_entregue = (coalesce(qt_material_entregue,0) - qt_entrega_w)
				where	nr_ordem_compra = nr_ordem_compra_w
				and	nr_item_oci = nr_item_oci_w;

				update	ordem_compra_item_entrega
				set	qt_real_entrega	= (coalesce(qt_real_entrega,0) - qt_entrega_w),
					dt_real_entrega  = NULL
				where	nr_ordem_compra	= nr_ordem_compra_w
				and	nr_item_oci = nr_item_oci_w
				and	pkg_date_utils.start_of(dt_prevista_entrega, 'DD', 0) = pkg_date_utils.start_of(dt_prev_entrega_w, 'DD', 0)
				and	coalesce(dt_cancelamento::text, '') = '';

				update	ordem_compra
				set	dt_baixa  = NULL,
					dt_atualizacao = clock_timestamp(),
					nm_usuario = nm_usuario_p
				where	nr_ordem_compra = nr_ordem_compra_w;

				select	a.ds_material
				into STRICT	ds_material_w
				from	material a,
					ordem_compra_item b
				where	b.cd_material = a.cd_material
				and	b.nr_ordem_compra	= nr_ordem_compra_w
				and	b.nr_item_oci = nr_item_oci_w;

				CALL inserir_historico_ordem_compra(
					nr_ordem_compra_w,
					'S',
					WHEB_MENSAGEM_PCK.get_texto(297471),
					WHEB_MENSAGEM_PCK.get_texto(297472,'NR_ITEM_OCI_W='||to_char(nr_item_oci_w)||
									';NR_NOTA_FISCAL_W='||to_char(nr_nota_fiscal_w)||
									';NR_SEQUENCIA_P='||to_char(nr_sequencia_p)||
									';DS_MATERIAL_W='||ds_material_w||
									';QT_ENTREGA_W='||campo_mascara(qt_entrega_w,4)||
									';DT_PREV_ENTREGA_W='||PKG_DATE_FORMATERS.to_varchar(dt_prev_entrega_w, 'shortDate', 8031,PKG_DATE_FORMATERS.getCalendar(cd_estabelecimento_w,nm_usuario_w))),
					nm_usuario_p);

				exception when others then
					CALL inserir_historico_ordem_compra(
						nr_ordem_compra_w,
						'S',
						WHEB_MENSAGEM_PCK.get_texto(297475),
						WHEB_MENSAGEM_PCK.get_texto(297476,'NR_NOTA_FISCAL_W='||to_char(nr_nota_fiscal_w)||';SQL_ERRO='||SQLERRM(SQLSTATE)),
						nm_usuario_p);
				end;

				end;
			end if;

			end;
		end if;	

		select	count(*)
		into STRICT	qt_integracao_me_w
		from	log_prepedido_me
		where	nr_ordem_compra = nr_ordem_compra_w;
		if (qt_integracao_me_w > 0) then
			ie_status_exportar_w := 0;
		end if;

		begin
		insert  into ordem_compra_nota_fiscal(
			nr_ordem_compra,
			nr_item_oci,
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			nr_item_nf,
			cd_material,
			dt_entrega,
			qt_entrega,
			dt_atualizacao,
			nm_usuario,
			nr_sequencia,
			ie_status_exportar,
			cd_pessoa_fisica)
		values (	nr_ordem_compra_w,
			nr_item_oci_w,
			cd_estabelecimento_w,
			coalesce(cd_cgc_emitente_w,cd_cgc_estabelecimento_w),
			cd_serie_nf_w,
			nr_nota_fiscal_w,
			nr_sequencia_nf_w,
			nr_item_nf_w,
			cd_material_w,
			dt_prev_entrega_w,
			qt_entrega_w,
			clock_timestamp(),
			nm_usuario_p,
			nr_sequencia_p,
			ie_status_exportar_w,
			cd_pessoa_fisica_w);	

		exception
			when others then
				CALL inserir_historico_ordem_compra(
					nr_ordem_compra_w,
					'S',
					WHEB_MENSAGEM_PCK.get_texto(297475),
					WHEB_MENSAGEM_PCK.get_texto(297503,'SQL_ERRO='||SQLERRM(SQLSTATE)),
					nm_usuario_p);
		end;
		end;
	end loop;
	close c01;

	open c03;
	loop
	fetch c03 into
		nr_ordem_compra_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		select	count(*)
		into STRICT	qt_pendente_w
		from	ordem_compra_item_entrega a
		where	nr_ordem_compra	= nr_ordem_compra_w
		and	((coalesce(qt_prevista_entrega,0) > coalesce(qt_real_entrega,0)) and coalesce(dt_baixa::text, '') = '')
		and	coalesce(a.dt_cancelamento::text, '') = '';
		
		if (qt_pendente_w = 0) then
			begin
			update	ordem_compra
			set	dt_baixa	= clock_timestamp(),
				dt_atualizacao 	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_ordem_compra = nr_ordem_compra_w;
			
			CALL inserir_historico_ordem_compra(
				nr_ordem_compra_w,
				'S',
				WHEB_MENSAGEM_PCK.get_texto(297505),
				WHEB_MENSAGEM_PCK.get_texto(297506,'NR_NOTA_FISCAL_W='||nr_nota_fiscal_w),
				nm_usuario_p);

			/*baixar tambem o processo de aprovacao quando baixa a ordem de compra*/

			update	processo_aprov_compra a
			set	a.ie_aprov_reprov = 'B',
				a.ds_observacao = substr(a.ds_observacao || WHEB_MENSAGEM_PCK.get_texto(297508,'NR_NOTA_FISCAL_W='||nr_nota_fiscal_w),1,2000)
			where	a.nr_sequencia in (
				SELECT	distinct(nr_seq_aprovacao)
				from	ordem_compra_item
				where	nr_ordem_compra = nr_ordem_compra_w)
			and	ie_aprov_reprov = 'P';

			/* retirado por fabio em 17/08/2006
			   nao sei o porque tem que limpar os vencimentos da ordem ao gerar a nota
			delete	from ordem_compra_venc
			where	nr_ordem_compra = nr_ordem_compra_w
			and	ie_inf_calc	= 'C';*/
			end;
		elsif (coalesce(nr_ordem_compra_w,0) > 0) then
			CALL gerar_ordem_compra_venc(nr_ordem_compra_w, nm_usuario_w);
		end if;
		end;
	end loop;
	close c03;
	end;
else
	begin
	open c02;
	loop
	fetch c02 into
		nr_ordem_compra_w,
		nr_item_oci_w,
		dt_prev_entrega_w,
		qt_entrega_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin

		select	coalesce(max(o.ie_devolucao),'N')
		into STRICT	ie_devolucao_w
		from	operacao_nota o,
			nota_fiscal a
		where	a.nr_sequencia = nr_sequencia_p
		and	a.cd_operacao_nf = o.cd_operacao_nf;
		
		if (ie_devolucao_w = 'S') and (ie_estorna_ordem_w = 'C') then

			begin
			update	ordem_compra_item
			set	qt_material_entregue = (coalesce(qt_material_entregue,0) + qt_entrega_w)
			where	nr_ordem_compra = nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w;
			exception
				when others then
					CALL inserir_historico_ordem_compra(
						nr_ordem_compra_w,
						'S',
						WHEB_MENSAGEM_PCK.get_texto(297475),
						WHEB_MENSAGEM_PCK.get_texto(297511,'SQL_ERRO='||SQLERRM(SQLSTATE)),
						nm_usuario_p);
			end;
			
			-- gazimmermann
			select	dt_entrada_saida
			into STRICT	dt_entrega_ordem_ww
			from	nota_fiscal
			where	nr_sequencia = nr_sequencia_p;
			
			begin
			update	ordem_compra_item_entrega
			set	dt_real_entrega	= dt_entrega_ordem_ww,
				qt_real_entrega	= qt_real_entrega + qt_entrega_w
			where	nr_ordem_compra	= nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w
			and	pkg_date_utils.start_of(dt_prevista_entrega, 'DD', 0) = pkg_date_utils.start_of(to_date(dt_prev_entrega_w), 'DD', 0)
			and	coalesce(dt_cancelamento::text, '') = '';
			exception
				when others then
					CALL inserir_historico_ordem_compra(
						nr_ordem_compra_w,
						'S',
						WHEB_MENSAGEM_PCK.get_texto(297475),
						WHEB_MENSAGEM_PCK.get_texto(297512,'SQL_ERRO='||SQLERRM(SQLSTATE)),
						nm_usuario_p);
			end;
			
			select	count(*)
			into STRICT	qt_pendente_w
			from	ordem_compra_item_entrega a
			where	nr_ordem_compra	= nr_ordem_compra_w
			and	((coalesce(qt_prevista_entrega,0) > coalesce(qt_real_entrega,0)) and coalesce(dt_baixa::text, '') = '')
			and	coalesce(a.dt_cancelamento::text, '') = '';
			
			if (qt_pendente_w = 0) then
				begin
				update	ordem_compra
				set	dt_baixa	= clock_timestamp(),
					dt_atualizacao 	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_ordem_compra = nr_ordem_compra_w;
				end;
			end if;

		else
			begin
			update	ordem_compra_item
			set	qt_material_entregue = (coalesce(qt_material_entregue,0) - qt_entrega_w)
			where	nr_ordem_compra = nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w;
			exception
				when others then
					CALL inserir_historico_ordem_compra(
						nr_ordem_compra_w,
						'S',
						WHEB_MENSAGEM_PCK.get_texto(297475),
						WHEB_MENSAGEM_PCK.get_texto(297511,'SQL_ERRO='||SQLERRM(SQLSTATE)),
						nm_usuario_p);
			end;

			begin
			update	ordem_compra_item_entrega
			set	dt_real_entrega	 = NULL,
				qt_real_entrega	= qt_real_entrega - qt_entrega_w,
				dt_baixa	 = NULL
			where	nr_ordem_compra	= nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w
			and	pkg_date_utils.start_of(dt_prevista_entrega, 'DD', 0) = pkg_date_utils.start_of(dt_prev_entrega_w, 'DD', 0)
			and	coalesce(dt_cancelamento::text, '') = '';
			exception
				when others then
					CALL inserir_historico_ordem_compra(
						nr_ordem_compra_w,
						'S',
						WHEB_MENSAGEM_PCK.get_texto(297475),
						WHEB_MENSAGEM_PCK.get_texto(297512,'SQL_ERRO='||SQLERRM(SQLSTATE)),
						nm_usuario_p);
			end;
		end if;

		begin
		delete	from ordem_compra_nota_fiscal
		where	nr_sequencia = nr_sequencia_p
		and	nr_ordem_compra	= nr_ordem_compra_w
		and	nr_item_oci = nr_item_oci_w
		and	dt_entrega = dt_prev_entrega_w;
		exception
			when others then
				CALL inserir_historico_ordem_compra(
					nr_ordem_compra_w,
					'S',
					WHEB_MENSAGEM_PCK.get_texto(297475),
					WHEB_MENSAGEM_PCK.get_texto(297514,'SQL_ERRO='||SQLERRM(SQLSTATE)),
					nm_usuario_p);
		end;

		if (ie_devolucao_w <> 'S') then
			begin
			update	ordem_compra
			set	dt_baixa  = NULL,
				dt_atualizacao = clock_timestamp(),
				nm_usuario = nm_usuario_p
			where	nr_ordem_compra = nr_ordem_compra_w;
			exception
				when others then
					CALL inserir_historico_ordem_compra(
						nr_ordem_compra_w,
						'S',
						WHEB_MENSAGEM_PCK.get_texto(297475),
						WHEB_MENSAGEM_PCK.get_texto(297515,'SQL_ERRO='||SQLERRM(SQLSTATE)),
						nm_usuario_p);
			end;
		end if;
		
		begin
		update	processo_aprov_compra a
		set	a.ie_aprov_reprov = 'P',
			a.ds_observacao = substr(a.ds_observacao || chr(13) || WHEB_MENSAGEM_PCK.get_texto(297516),1,2000)
		where	a.nr_sequencia in (
			SELECT	distinct(nr_seq_aprovacao)
			from	ordem_compra_item
			where	nr_ordem_compra = nr_ordem_compra_w)
		and	ie_aprov_reprov = 'B';
		end;
		end;
	end loop;
	close c02;
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_ordem_compra_nf ( nr_sequencia_p bigint, nm_usuario_p text, ie_acao_p text) FROM PUBLIC;

