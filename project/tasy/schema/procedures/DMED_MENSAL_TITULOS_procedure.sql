-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dmed_mensal_titulos ( nr_seq_dmed_mensal_p bigint, cd_estabelecimento_p bigint, dt_referencia_p timestamp, ie_nota_fiscal_p text, ie_conta_paciente_p text, ie_cpf_p text, ie_idade_p text, ie_estrangeiro_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
	GERAR_DMED_MENSAL_PRESTADOR
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_pessoa_responsavel_w		varchar(10);
cd_pessoa_beneficiario_w	varchar(10);
cd_cgc_w			varchar(14);
ie_buscar_responsavel_w		varchar(1);
nr_documento_w			bigint;
vl_documento_w			double precision;
dt_documento_w			timestamp;
contador_w			bigint;
nr_interno_conta_w		bigint;
nr_seq_nf_saida_w		bigint;
nr_atendimento_w		bigint;
nr_nota_fiscal_w		varchar(255);
nr_seq_nota_fiscal_w		bigint;
insere_dmed_w			boolean;
qt_registros_w			bigint;
cd_tipo_recebimento_w		integer;
cd_convenio_parametro_w		integer;
ie_tipo_convenio_w		smallint;
ie_convenio_part_w		varchar(1);
dt_recebimento_w		timestamp;
cd_pessoa_fisica_tit_w		titulo_receber.cd_pessoa_fisica%type;
vl_juros_w			titulo_receber_liq.vl_juros%type;
vl_multa_w			titulo_receber_liq.vl_multa%type;
ie_juros_multa_w		dmed_regra_geral.ie_juros_multa%type;
qt_classe_w			bigint;

c_titulo CURSOR FOR	/* cursor para identificar os responsaveis */
	SELECT 	r.nr_titulo nr_documento,
		--substr(nvl(OBTER_PESSOA_TITULO_DATA(r.nr_titulo,l.dt_recebimento,'C'),r.cd_pessoa_fisica),1,10) cd_pessoa_responsavel,
		substr(coalesce(a.cd_pessoa_fisica, r.cd_pessoa_fisica),1,10) cd_pessoa_beneficiario,
		coalesce(l.vl_recebido + l.vl_rec_maior,r.vl_titulo)	vl_documento,
		coalesce(l.dt_recebimento,r.dt_emissao) dt_documento,
		coalesce(l.vl_juros, 0) vl_juros,		
		coalesce(l.vl_multa, 0) vl_multa,		
		a.nr_atendimento,
		l.cd_tipo_recebimento,
		coalesce(r.nr_interno_conta,0),
		coalesce(r.nr_seq_nf_saida,0),
		coalesce(r.nr_nota_fiscal,0),
		l.dt_recebimento,
		r.cd_pessoa_fisica
	FROM titulo_receber r
LEFT OUTER JOIN atendimento_paciente a ON (r.nr_atendimento = a.nr_atendimento)
LEFT OUTER JOIN titulo_receber_liq l ON (r.nr_titulo = l.nr_titulo)
, pessoa_fisica p
LEFT OUTER JOIN nacionalidade n ON (p.cd_nacionalidade = n.cd_nacionalidade AND p.cd_nacionalidade = n.cd_nacionalidade)
WHERE r.cd_estabelecimento	= cd_estabelecimento_p and coalesce(r.ie_pls, 'N')	= 'N' and pkg_date_utils.start_of(coalesce(l.dt_recebimento,r.dt_emissao),'MONTH', 0) = pkg_date_utils.start_of(dt_referencia_p, 'MONTH',0) and (r.ie_situacao not in ('3','5') or (r.ie_situacao = '5' and
		exists (SELECT	1			
			from	titulo_receber_liq k
			where	k.nr_titulo = r.nr_titulo
			and 	vl_recebido > 0	
			and 	not exists (select 1 from titulo_receber_liq x where x.nr_titulo = k.nr_titulo and x.nr_seq_liq_origem = k.nr_sequencia  LIMIT 1)))) and r.cd_pessoa_fisica = p.cd_pessoa_fisica  and (((coalesce(n.ie_brasileiro,'S') = 'S') and (ie_estrangeiro_p = '2'))
	or	((coalesce(n.ie_brasileiro,'S') = 'N') and (ie_estrangeiro_p = '1'))
	or (ie_estrangeiro_p = '3'))  and (((coalesce(n.ie_brasileiro,'S') = 'S') and (ie_estrangeiro_p = '2'))
	or	((coalesce(n.ie_brasileiro,'S') = 'N') and (ie_estrangeiro_p = '1'))
	or (ie_estrangeiro_p = '3')) and exists (select	1
			from	dmed_regra_tipo_tit	w
			where	w.ie_tipo_receber		= l.cd_tipo_recebimento
			and	coalesce(w.ie_prestadora_ops,'P')	= 'P') and ((coalesce(r.nr_seq_classe::text, '') = '') or (qt_classe_w = 0) or (exists (select 1 
			from 	 dmed_regra_classe_tit t
			where	 t.nr_seq_classe = r.nr_seq_classe))) and ((exists (select	1
			from	atend_paciente_unidade c,
				dmed_regra_setor_atend b
			where	c.cd_setor_atendimento	= b.cd_setor_atendimento
			and 	c.nr_atendimento	= a.nr_atendimento)) or (not exists (	select 1 
				from 	 dmed_regra_setor_atend LIMIT 1))) and (not exists ( 	select 1 
						from pls_titulo_rec_liq_neg y
						where y.nr_titulo = l.nr_titulo   LIMIT 1));


BEGIN
select 	max(coalesce(ie_convenio_part, 'S'))
into STRICT 	ie_convenio_part_w
from 	dmed_regra_geral;

select	count(1)
into STRICT	qt_classe_w
from	dmed_regra_classe_tit LIMIT 1;

select 	coalesce(max(ie_juros_multa), 'N')
into STRICT	ie_juros_multa_w
from	dmed_regra_geral;

open c_titulo;
loop
fetch c_titulo into
	nr_documento_w,
	--cd_pessoa_responsavel_w,
	cd_pessoa_beneficiario_w,
	vl_documento_w,
	dt_documento_w,
	vl_juros_w,
	vl_multa_w,
	nr_atendimento_w,
	cd_tipo_recebimento_w,
	nr_interno_conta_w,
	nr_seq_nf_saida_w,
	nr_nota_fiscal_w,
	dt_recebimento_w,
	cd_pessoa_fisica_tit_w;
EXIT WHEN NOT FOUND; /* apply on c_titulo */
	begin
	insere_dmed_w	:= true;
	
	cd_pessoa_responsavel_w	:= substr(coalesce(OBTER_PESSOA_TITULO_DATA(nr_documento_w, dt_recebimento_w, 'C'), cd_pessoa_fisica_tit_w),1,10);

	select	max(ie_buscar_responsavel)
	into STRICT	ie_buscar_responsavel_w
	from	dmed_regra_tipo_tit	d
	where	ie_tipo_receber			= cd_tipo_recebimento_w
	and	coalesce(d.ie_prestadora_ops,'P')	= 'P';
	
	ie_buscar_responsavel_w	:= coalesce(ie_buscar_responsavel_w, 'T');

	--se o titular responsavel nao tiver  cpf cadastrado, busca o responsavel da pasta pagador
	if (ie_buscar_responsavel_w = 'P') and (coalesce(nr_atendimento_w, 0) > 0) and (trim(both obter_cpf_pessoa_fisica(cd_pessoa_responsavel_w)) is null) then
		--verific ar se o pagador foi pessoa fisica, se foi juridica nao de ve entrar na DMED
		select  count(cd_pessoa_fisica)
		into STRICT 	qt_registros_w
		from 	atendimento_pagador p
		where	(cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> '')
		and	p.nr_atendimento	= nr_atendimento_w  LIMIT 1;
		
		if (qt_registros_w > 0) then
			select 	max(cd_pessoa_fisica)
			into STRICT 	cd_pessoa_responsavel_w
			from 	atendimento_pagador	p
			where	p.nr_atendimento	= nr_atendimento_w;
			
			insere_dmed_w	:= true;
		else
			insere_dmed_w	:= false;		
		end if;	
	end if;
	
	ie_tipo_convenio_w	:= 0;
	
	if (coalesce(nr_interno_conta_w,0) <> 0)  then
		begin
		select	cd_convenio_parametro
		into STRICT	cd_convenio_parametro_w
		from	conta_paciente
		where	nr_interno_conta	= nr_interno_conta_w;	
		exception when others then
			cd_convenio_parametro_w := null;
		end;
		
		select	max(ie_tipo_convenio)
		into STRICT 	ie_tipo_convenio_w
		from 	convenio
		where  	cd_convenio	= cd_convenio_parametro_w;
	elsif (coalesce(nr_atendimento_w,0) <> 0) then
		select	max(ie_tipo_convenio)
		into STRICT	ie_tipo_convenio_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_w;	
	end if;
	
	if	((ie_convenio_part_w = 'S') and
		((ie_tipo_convenio_w = 1) or (ie_tipo_convenio_w = 0))) or (ie_convenio_part_w = 'N') then
		if	(((ie_nota_fiscal_p = 'S') and
			((nr_seq_nf_saida_w <> 0) or (nr_nota_fiscal_w <> '0'))) or (ie_nota_fiscal_p = 'N')) then
			if	((ie_conta_paciente_p = 'S' AND nr_interno_conta_w <> 0) or (ie_conta_paciente_p = 'N')) then
				contador_w		:= contador_w + 1;
				
				nr_seq_nota_fiscal_w	:= nr_seq_nf_saida_w;
				
				if (ie_buscar_responsavel_w = 'N') then
					if	(nr_seq_nota_fiscal_w = '0' AND nr_nota_fiscal_w <> '0') then
						select	max(n.nr_sequencia)
						into STRICT	nr_seq_nota_fiscal_w
						from	nota_fiscal	n,
							operacao_nota	o
						where	n.cd_operacao_nf	= o.cd_operacao_nf
						and	n.nr_nota_fiscal	= nr_nota_fiscal_w
						and	o.ie_operacao_fiscal	= 'S';
					end if;
					
					if (nr_seq_nota_fiscal_w <> '0') then
						select	coalesce(cd_pessoa_fisica, '0'),
							coalesce(cd_cgc, '0')
						into STRICT	cd_pessoa_responsavel_w,
							cd_cgc_w
						from	nota_fiscal
						where	nr_sequencia	= nr_seq_nota_fiscal_w;

						--se for pessoa juridica nao deve gerar na DMED
						if (cd_pessoa_responsavel_w = '0') and (cd_cgc_w <> '0') then
							insere_dmed_w	:= false;
						elsif (cd_pessoa_responsavel_w = '0') then
							select 	cd_pessoa_fisica
							into STRICT	cd_pessoa_responsavel_w
							from	titulo_receber
							where	nr_titulo	= nr_documento_w;
						end if;	
					end if;
				end if;
				
				select	count(1)
				into STRICT	qt_registros_w
				FROM pessoa_fisica p
LEFT OUTER JOIN nacionalidade n ON (p.cd_nacionalidade = n.cd_nacionalidade)
WHERE ((ie_cpf_p = 'AM') or
					((ie_cpf_p = 'SC') and (coalesce(p.nr_cpf::text, '') = '') 	and (pkg_date_utils.add_month(p.dt_nascimento, ie_idade_p * 12,0) <= Fim_Mes(dt_referencia_p))) or
					((ie_cpf_p = 'CC') and (((p.nr_cpf IS NOT NULL AND p.nr_cpf::text <> '') and (pkg_date_utils.add_month(p.dt_nascimento, ie_idade_p * 12,0) <= Fim_Mes(dt_referencia_p))) or (pkg_date_utils.add_month(p.dt_nascimento, ie_idade_p * 12,0) >= Fim_Mes(dt_referencia_p))))) and (((coalesce(n.ie_brasileiro,'S') = 'S') and (ie_estrangeiro_p = '2'))
				or	((coalesce(n.ie_brasileiro,'S') = 'N') and (ie_estrangeiro_p = '1'))
				or (ie_estrangeiro_p = '3')) --and 	p.nr_cpf is not null
  and cd_pessoa_fisica =  cd_pessoa_responsavel_w   LIMIT 1; 			
				
				if (qt_registros_w > 0) then
					if (insere_dmed_w = true) then
						
						if (coalesce(cd_pessoa_beneficiario_w,'X') = 'X') then
							cd_pessoa_beneficiario_w	:= cd_pessoa_responsavel_w;
						end if;	
		
						if ie_juros_multa_w = 'S' then
							vl_documento_w := vl_documento_w + vl_juros_w + vl_multa_w;
						end if;	
						
						insert into dmed_titulos_mensal(nr_sequencia,
							dt_atualizacao, 
							nm_usuario, 
							dt_atualizacao_nrec, 
							nm_usuario_nrec, 
							nr_seq_dmed_mensal, 
							nr_documento, 
							ie_tipo_documento, 
							cd_pessoa_titular, 
							cd_pessoa_beneficiario, 
							vl_pago, 
							dt_liquidacao,
							ie_prestadora_ops,
							nr_atendimento)
						values (nextval('dmed_titulos_mensal_seq'),
							clock_timestamp(),
							'Tasy5',
							clock_timestamp(),
							'Tasy5',
							nr_seq_dmed_mensal_p,
							nr_documento_w,
							'TI',
							cd_pessoa_responsavel_w,
							cd_pessoa_beneficiario_w,
							vl_documento_w,
							dt_documento_w,
							'P',
							nr_atendimento_w);
					end if;
				end if;
				
				if (mod(contador_w,100) = 0) then
					commit;
				end if;
			end if;
		end if;
	end if;
	end;
end loop;
close c_titulo;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dmed_mensal_titulos ( nr_seq_dmed_mensal_p bigint, cd_estabelecimento_p bigint, dt_referencia_p timestamp, ie_nota_fiscal_p text, ie_conta_paciente_p text, ie_cpf_p text, ie_idade_p text, ie_estrangeiro_p text) FROM PUBLIC;

