-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE agserv_obter_dados_enc_agend ( cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, dt_agenda_p timestamp, nm_usuario_p text, ie_opcao_busca_p text, cd_agenda_p bigint, cd_procedimento_p INOUT bigint, cd_medico_exec_p INOUT text, ie_classif_agenda_p INOUT text, cd_convenio_p INOUT bigint, cd_medico_solic_p INOUT text, cd_cid_p INOUT text, qt_total_sessoes_p INOUT text, nr_secao_p INOUT text ) AS $body$
DECLARE

 
 
cd_procedimento_w	bigint;
cd_medico_exec_w	varchar(10);
ie_classif_agenda_w	varchar(5);
cd_convenio_w		integer;
cd_convenio_ww		integer;
cd_medico_solic_w	varchar(10);
cd_cid_w		varchar(10);
qt_total_sessoes_w	varchar(3);
nr_secao_w		varchar(3);
cd_tipo_agenda_w	bigint;

/*AGENDA DE SERVIÃ‡OS*/
 
C01 CURSOR FOR 
	SELECT	max(a.cd_procedimento), 
		max(a.cd_medico), 
		max(a.ie_classif_agenda), 
		max(a.cd_convenio), 
		max(a.cd_medico_solic), 
		max(a.cd_cid), 
		max(a.qt_total_secao), 
		max(a.nr_secao)		 
	from	agenda_consulta a, 
			agenda b 
	where	a.cd_agenda		= b.cd_agenda 
	and	b.cd_tipo_agenda	= 5 
	and	b.cd_estabelecimento	= cd_estabelecimento_p 
	and	b.ie_situacao		= 'A'	 
	and	a.nr_sequencia		= (	SELECT	max(x.nr_sequencia) 
								from	agenda_consulta x, 
										agenda z 
								where	x.cd_agenda		= z.cd_agenda 
								and		z.cd_tipo_agenda	= 5 
								and		z.cd_estabelecimento	= cd_estabelecimento_p 
								and		x.cd_pessoa_fisica	= cd_pessoa_fisica_p 
								and		x.dt_agenda		< dt_agenda_p 
								and		((ie_opcao_busca_p = 'S' AND x.ie_status_agenda = 'E') 
									or	((ie_opcao_busca_p = 'A') and (z.cd_agenda = cd_agenda_p) and (x.ie_status_agenda = 'E')) 
									or	(ie_opcao_busca_p = 'D' AND z.cd_agenda = cd_agenda_p) 
									or (ie_opcao_busca_p = 'I'))) 
	order by 1;
	
/*AGENDA DE CONSULTAS*/
 
C02 CURSOR FOR 
	SELECT	/*max(a.cd_procedimento), 
			max(a.cd_medico), 
			max(a.ie_classif_agenda),*/
 
			max(a.cd_convenio) 
			/*max(a.cd_medico_solic), 
			max(a.cd_cid), 
			max(a.qt_total_secao), 
			max(a.nr_secao)*/
 
	from	agenda_consulta a, 
			agenda b 
	where	a.cd_agenda				= b.cd_agenda 
	and		b.cd_tipo_agenda		= 3 
	and		b.cd_estabelecimento	= cd_estabelecimento_p 
	and		b.ie_situacao			= 'A' 
	and		a.ie_status_agenda		= 'E' 
	and		a.nr_sequencia		= (	SELECT	max(x.nr_sequencia) 
									from	agenda_consulta x, 
											agenda z 
									where	x.cd_agenda				= z.cd_agenda 
									and		z.cd_tipo_agenda		= 3 
									and		z.cd_estabelecimento	= cd_estabelecimento_p 
									and		x.cd_pessoa_fisica		= cd_pessoa_fisica_p 
									and		x.dt_agenda				< dt_agenda_p 
									and		x.ie_status_agenda		= 'E' 
									and		((ie_opcao_busca_p = 'S' AND x.ie_status_agenda = 'E') 
										or	((ie_opcao_busca_p = 'A') and (z.cd_agenda = cd_agenda_p) and (x.ie_status_agenda = 'E')) 
										or	(ie_opcao_busca_p = 'D' AND z.cd_agenda = cd_agenda_p) 
										or (ie_opcao_busca_p = 'I'))) 
	order by 1;	
	 

BEGIN 
 
if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') and (ie_opcao_busca_p <> 'N') and (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '')then 
	begin 
	 
	select	max(coalesce(cd_tipo_agenda,0)) 
	into STRICT	cd_tipo_agenda_w 
	from	agenda 
	where	cd_agenda = cd_agenda_p;
	 
	if (cd_tipo_agenda_w <> 0) and (cd_tipo_agenda_w = 5)then 
	 
		open C01;
		loop 
		fetch C01 into	 
			cd_procedimento_w, 
			cd_medico_exec_w, 
			ie_classif_agenda_w, 
			cd_convenio_w, 
			cd_medico_solic_w, 
			cd_cid_w, 
			qt_total_sessoes_w, 
			nr_secao_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			 
			if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '')then 
				cd_procedimento_p	:= cd_procedimento_w;
			end if;
				 
			if (cd_medico_exec_w IS NOT NULL AND cd_medico_exec_w::text <> '')then 
				cd_medico_exec_p	:= cd_medico_exec_w;
			end if;
			 
			if (ie_classif_agenda_w IS NOT NULL AND ie_classif_agenda_w::text <> '')then 
				ie_classif_agenda_p	:= ie_classif_agenda_w;
			end if;
				 
			if (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '')then 
				cd_convenio_p	:= cd_convenio_w;
			end if;
				 
			if (cd_medico_solic_w IS NOT NULL AND cd_medico_solic_w::text <> '')then 
				cd_medico_solic_p	:= cd_medico_solic_w;
			end if;
				 
			if (cd_cid_w IS NOT NULL AND cd_cid_w::text <> '')then 
				cd_cid_p	:= cd_cid_w;
			end if;
				 
			if (qt_total_sessoes_w IS NOT NULL AND qt_total_sessoes_w::text <> '')then 
				qt_total_sessoes_p	:= qt_total_sessoes_w;
			end if;
				 
			if (nr_secao_w IS NOT NULL AND nr_secao_w::text <> '')and (nr_secao_w < qt_total_sessoes_w)then 
				nr_secao_p	:= nr_secao_w + 1;		
			end if;
			end;
		end loop;
		close C01;
	elsif (cd_tipo_agenda_w <> 0) and (cd_tipo_agenda_w = 3)then	 
	 
		open C02;
		loop 
		fetch C02 into	 
			cd_convenio_ww;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			if (cd_convenio_ww IS NOT NULL AND cd_convenio_ww::text <> '')then 
				cd_convenio_p	:= cd_convenio_ww;
			end if;
			end;
		end loop;
		close C02;
		 
	end if;
	 
	end;
 
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE agserv_obter_dados_enc_agend ( cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, dt_agenda_p timestamp, nm_usuario_p text, ie_opcao_busca_p text, cd_agenda_p bigint, cd_procedimento_p INOUT bigint, cd_medico_exec_p INOUT text, ie_classif_agenda_p INOUT text, cd_convenio_p INOUT bigint, cd_medico_solic_p INOUT text, cd_cid_p INOUT text, qt_total_sessoes_p INOUT text, nr_secao_p INOUT text ) FROM PUBLIC;

