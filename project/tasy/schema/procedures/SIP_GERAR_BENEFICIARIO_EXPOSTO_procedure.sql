-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sip_gerar_beneficiario_exposto ( nr_seq_segurado_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_classificacao_w		varchar(20);
ie_tipo_segurado_w		varchar(10);
ie_segmentacao_w		varchar(3);
ie_tipo_contratacao_w		varchar(2);
ie_sexo_w			varchar(1);
ie_exposto_w			varchar(1);
cd_procedimento_w		bigint;
cd_procedimento_ant_w		bigint;
cd_area_w			bigint;
cd_especialidade_w		bigint;
cd_grupo_w			bigint;
nr_seq_benef_exposto_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_contrato_w		bigint;
nr_seq_item_assist_w		bigint;
nr_seq_regra_exposto_w		bigint;
nr_seq_tipo_carencia_w		bigint;
nr_seq_proc_item_assist_w	bigint;
ie_origem_proced_w		bigint;
ie_origem_proced_ant_w		bigint;
qt_regras_w			bigint;
qt_carencia_contrato_w		bigint;
qt_carencia_segurado_w		bigint;
qt_idade_w			smallint;
dt_inclusao_operadora_w		timestamp;
dt_inclusao_operadora_ww	timestamp;
dt_ultima_carencia_w		timestamp;
dt_exposto_w			timestamp;
dt_exposto_ww			timestamp;
dt_consulta_medica_w		timestamp;
dt_consulta_ambulatorial_w	timestamp;
dt_consulta_pronto_soc_w	timestamp;
dt_outro_atend_amb_w		timestamp;
dt_exame_w			timestamp;
dt_proced_diagnostico_w		timestamp;
dt_mamografia_w			timestamp;
dt_sangue_oculto_w		timestamp;
dt_terapia_w			timestamp;
dt_internacao_w			timestamp;
dt_fratura_femur_w		timestamp;
dt_doenca_respiratoria_w	timestamp;
dt_hospitalar_w			timestamp;
dt_hospital_dia_w		timestamp;
dt_domiciliar_w			timestamp;
dt_rescisao_w			timestamp;
dt_liberacao_w			timestamp;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_classificacao
	from	sip_item_assistencial
	where	ie_benef_carencia	= 'S'
	and	ie_odontologico		= 'N'
	order by
		nr_seq_apres;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_tipo_carencia,
		a.nr_seq_proc_item_assist
	from	sip_regra_expostos	a
	where	a.nr_seq_item_assist	= nr_seq_item_assist_w
	and	((coalesce(a.ie_segmentacao::text, '') = '') or (a.ie_segmentacao = ie_segmentacao_w))
	and	((coalesce(a.ie_sexo::text, '') = '') or (a.ie_sexo = ie_sexo_w))
	and	((qt_idade_w between qt_idade_inicial and qt_idade_final) or (coalesce(qt_idade_inicial::text, '') = ''))
	order by
		coalesce(a.nr_seq_tipo_carencia,0) desc,
		coalesce(a.nr_seq_proc_item_assist,0) desc;

C03 CURSOR FOR
	SELECT	b.cd_procedimento,
		b.ie_origem_proced
	from	sip_item_assist_regra	b,
		sip_item_assistencial	a
	where	a.nr_sequencia	= b.nr_seq_item_assist
	and	a.nr_sequencia	= nr_seq_proc_item_assist_w
	group by
		b.cd_procedimento,
		b.ie_origem_proced;

TYPE 		fetch_array2 IS TABLE OF C02%ROWTYPE;
s_array2 	fetch_array2;
i2		integer := 1;
type Vetor2 is table of fetch_array2 index by integer;
Vetor_C02_w			Vetor2;
BEGIN
/* Obter dados do beneficiario */

begin
select	a.nr_seq_plano,
	a.nr_seq_contrato,
	a.dt_inclusao_operadora,
	a.dt_ultima_carencia,
	b.ie_sexo,
	trunc(trunc(months_between(clock_timestamp(), b.dt_nascimento))/12),
	--Obter_Idade(b.dt_nascimento, sysdate, 'A'),
	a.dt_rescisao,
	a.dt_liberacao,
	a.ie_tipo_segurado
into STRICT	nr_seq_plano_w,
	nr_seq_contrato_w,
	dt_inclusao_operadora_ww,
	dt_ultima_carencia_w,
	ie_sexo_w,
	qt_idade_w,
	dt_rescisao_w,
	dt_liberacao_w,
	ie_tipo_segurado_w
from	pessoa_fisica	b,
	pls_segurado	a
where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
and	a.nr_sequencia		= nr_seq_segurado_p;
exception
when others then
	ie_sexo_w	:= '';
	qt_idade_w	:= null;
end;

if (qt_idade_w < 0) then
	qt_idade_w	:= 0;
end if;

qt_carencia_segurado_w	:= 0;
qt_carencia_contrato_w	:= 0;

if (qt_carencia_segurado_w IS NOT NULL AND qt_carencia_segurado_w::text <> '') then
	select	count(x.nr_sequencia)
	into STRICT	qt_carencia_segurado_w
	from	pls_carencia x
	where	x.nr_seq_segurado	= nr_seq_segurado_p
	and	x.ie_cpt			= 'N';
end if;

if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') and (coalesce(qt_carencia_segurado_w::text, '') = '') then
	select	count(x.nr_sequencia)
	into STRICT	qt_carencia_contrato_w
	from	pls_carencia x
	where	x.nr_seq_contrato	= nr_seq_contrato_w
	and	x.ie_cpt		= 'N';
end if;

select	max(ie_segmentacao)
into STRICT	ie_segmentacao_w
from	pls_plano
where	nr_sequencia	= nr_seq_plano_w;

select	max(ie_tipo_contratacao)
into STRICT	ie_tipo_contratacao_w
from	pls_plano
where	nr_sequencia	= nr_seq_plano_w;

select	max(nr_sequencia)
into STRICT	nr_seq_benef_exposto_w
from	sip_beneficiario_exposto
where	nr_seq_segurado	= nr_seq_segurado_p;

if (coalesce(nr_seq_benef_exposto_w,0)	= 0) then
	select	nextval('sip_beneficiario_exposto_seq')
	into STRICT	nr_seq_benef_exposto_w
	;

	insert into sip_beneficiario_exposto(nr_sequencia, nr_seq_segurado, dt_atualizacao,
		nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec)
	values (	nr_seq_benef_exposto_w, nr_seq_segurado_p, clock_timestamp(),
		nm_usuario_p, clock_timestamp(), nm_usuario_p);
end if;

open C01;
loop
fetch C01 into
	nr_seq_item_assist_w,
	cd_classificacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	dt_inclusao_operadora_w	:= dt_inclusao_operadora_ww;

	select	/* INDEX(SIPREEX_SIPITAS_FK_I)  */
 count(1)
	into STRICT	qt_regras_w
	from	sip_regra_expostos	a
	where	a.nr_seq_item_assist	= nr_seq_item_assist_w  LIMIT 1;

	if (qt_regras_w = 0) then
		ie_exposto_w	:= 'S';
		dt_exposto_w	:= dt_inclusao_operadora_w;
	else
		ie_exposto_w	:= 'N';

		open C02;
		loop
		FETCH C02 BULK COLLECT INTO s_array2 LIMIT 1000;
			Vetor_C02_w(i2) := s_array2;
			i2 := i2 + 1;
		EXIT WHEN NOT FOUND; /* apply on C02 */
		END LOOP;
		CLOSE C02;

		for j in 1..Vetor_C02_w.COUNT loop
			s_array2 := Vetor_C02_w(j);
			for k in 1..s_array2.COUNT loop
				begin
				nr_seq_regra_exposto_w		:= s_array2[k].nr_sequencia;
				nr_seq_tipo_carencia_w		:= s_array2[k].nr_seq_tipo_carencia;
				nr_seq_proc_item_assist_w	:= s_array2[k].nr_seq_proc_item_assist;

				if (coalesce(nr_seq_tipo_carencia_w,0) = 0) and (coalesce(nr_seq_proc_item_assist_w,0) = 0) then
					ie_exposto_w	:= 'S';
					dt_exposto_w	:= dt_inclusao_operadora_w;
				else
					if (clock_timestamp() > dt_ultima_carencia_w) then
						ie_exposto_w	:= 'S';
						dt_exposto_w	:= dt_ultima_carencia_w;
					elsif (nr_seq_tipo_carencia_w IS NOT NULL AND nr_seq_tipo_carencia_w::text <> '') then
						ie_exposto_w	:= 'S';
						dt_exposto_w	:= sip_consistir_carencia_exposto(nr_seq_tipo_carencia_w, nr_seq_segurado_p, nr_seq_contrato_w,
													nr_seq_plano_w, dt_inclusao_operadora_ww);
					elsif (nr_seq_proc_item_assist_w IS NOT NULL AND nr_seq_proc_item_assist_w::text <> '') then
						open C03;
						loop
						fetch C03 into
							cd_procedimento_w,
							ie_origem_proced_w;
						EXIT WHEN NOT FOUND; /* apply on C03 */
							begin
							ie_exposto_w	:= 'S';

							if (coalesce(cd_procedimento_ant_w,cd_procedimento_w) <> cd_procedimento_w) or (coalesce(ie_origem_proced_ant_w,ie_origem_proced_w) <> ie_origem_proced_w) then
								select	max(cd_grupo_proc)
								into STRICT	cd_grupo_w
								from	procedimento
								where	cd_procedimento		= cd_procedimento_w
								and	ie_origem_proced	= ie_origem_proced_w;

								select	max(cd_especialidade)
								into STRICT	cd_especialidade_w
								from	grupo_proc
								where	cd_grupo_proc	= cd_grupo_w;

								select	max(cd_area_procedimento)
								into STRICT	cd_area_w
								from	especialidade_proc
								where	cd_especialidade	= cd_especialidade_w;
							end if;

							cd_procedimento_ant_w	:= cd_procedimento_w;
							ie_origem_proced_ant_w	:= ie_origem_proced_w;

							dt_exposto_ww	:= sip_consistir_carencia_proc(nr_seq_segurado_p, cd_procedimento_w, ie_origem_proced_w,
													cd_grupo_w, cd_especialidade_w, cd_area_w,
													qt_carencia_segurado_w, qt_carencia_contrato_w, dt_inclusao_operadora_w,
													nr_seq_contrato_w, nr_seq_plano_w);

							if (coalesce(dt_exposto_w::text, '') = '') then
								dt_exposto_w	:= dt_exposto_ww;
							elsif (dt_exposto_ww > dt_exposto_w) then
								dt_exposto_w	:= dt_exposto_ww;
							end if;
							end;
						end loop;
						close C03;
					end if;
				end if;
				end;
			end loop;
		end loop;
	end if;

	if (ie_exposto_w = 'N') then
		dt_exposto_w		:= null;
		dt_inclusao_operadora_w	:= null;
	end if;

	if (cd_classificacao_w = 'A') then
		dt_consulta_medica_w		:= dt_exposto_w;
	elsif (cd_classificacao_w = 'A1') then
		dt_consulta_ambulatorial_w	:= dt_exposto_w;
	elsif (cd_classificacao_w = 'A2') then
		dt_consulta_pronto_soc_w	:= dt_exposto_w;
	elsif (cd_classificacao_w	= 'B') then
		dt_outro_atend_amb_w		:= dt_exposto_w;
	elsif (cd_classificacao_w = 'C') then
		dt_exame_w			:= dt_exposto_w;
	elsif (cd_classificacao_w = 'C3') then
		dt_proced_diagnostico_w		:= dt_exposto_w;
	elsif (cd_classificacao_w = 'C10.1') then
		dt_mamografia_w			:= dt_exposto_w;
	elsif (cd_classificacao_w = 'C14') then
		dt_sangue_oculto_w		:= dt_exposto_w;
	elsif (cd_classificacao_w = 'D') then
		dt_terapia_w			:= dt_exposto_w;
	elsif (cd_classificacao_w = 'E') then
		dt_internacao_w			:= dt_exposto_w;
	elsif (cd_classificacao_w = 'EX2.4') then
		dt_fratura_femur_w		:= dt_exposto_w;
	elsif (cd_classificacao_w = 'EX4.1') then
		dt_doenca_respiratoria_w	:= dt_exposto_w;
	elsif (cd_classificacao_w = 'EY1') then
		dt_hospitalar_w			:= dt_inclusao_operadora_w;
	elsif (cd_classificacao_w = 'EY2') then
		dt_hospital_dia_w		:= dt_inclusao_operadora_w;
	elsif (cd_classificacao_w = 'EY3') then
		dt_domiciliar_w			:= dt_inclusao_operadora_w;
	end if;

	end;
end loop;
close C01;

update	sip_beneficiario_exposto
set	dt_consulta_medica		= dt_consulta_medica_w,
	dt_consulta_ambulatorial	= dt_consulta_ambulatorial_w,
	dt_consulta_pronto_soc		= dt_consulta_pronto_soc_w,
	dt_outro_atend_amb		= dt_outro_atend_amb_w,
	dt_exame			= dt_exame_w,
	dt_proced_diagnostico		= dt_proced_diagnostico_w,
	dt_mamografia			= dt_mamografia_w,
	dt_sangue_oculto		= dt_sangue_oculto_w,
	dt_terapia			= dt_terapia_w,
	dt_internacao			= dt_internacao_w,
	dt_fratura_femur		= dt_fratura_femur_w,
	dt_doenca_respiratoria		= dt_doenca_respiratoria_w,
	dt_hospitalar			= dt_hospitalar_w,
	dt_hospital_dia			= dt_hospital_dia_w,
	dt_domiciliar			= dt_domiciliar_w,
	dt_rescisao			= dt_rescisao_w,
	dt_liberacao			= dt_liberacao_w,
	ie_tipo_segurado		= ie_tipo_segurado_w,
	ie_tipo_contratacao		= ie_tipo_contratacao_w,
	ie_segmentacao			= ie_segmentacao_w
where	nr_sequencia			= nr_seq_benef_exposto_w;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sip_gerar_beneficiario_exposto ( nr_seq_segurado_p bigint, nm_usuario_p text) FROM PUBLIC;

