-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_cancelar_contrato ( nr_seq_contrato_p bigint, nr_seq_segurado_p bigint, nm_usuario_p text, nr_seq_motivo_p bigint, cd_estabelecimento_p bigint) AS $body$
DECLARE


ie_situacao_w			pls_contrato.ie_situacao%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_segurado_ant_w		pls_segurado.nr_sequencia%type;
qt_sib_referencia_w		integer;
dt_contratacao_w		timestamp;
vl_parametro_w			varchar(1);
nr_seq_motivo_w			bigint;
ds_erro_w			varchar(255);
ie_ativo_w			varchar(1);
dt_contrato_w			timestamp;
dt_cancelamento_w		timestamp;
nr_seq_contrato_w		pls_segurado.nr_seq_contrato%type;
ds_regra_restricao_resc_w	varchar(1);
nr_seq_dependente_w		pls_segurado.nr_sequencia%type;
nr_seq_motivo_conver_aux_w	bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_segurado
	where	nr_seq_contrato	= nr_seq_contrato_p
	and	coalesce(dt_cancelamento::text, '') = '';

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_segurado
	where	nr_seq_titular = nr_seq_segurado_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	coalesce(dt_rescisao::text, '') = ''
	and	coalesce(dt_cancelamento::text, '') = '';


BEGIN

nr_seq_motivo_w := coalesce(nr_seq_motivo_p,0);
vl_parametro_w := Obter_Param_Usuario(1202, 16, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, vl_parametro_w);

if (coalesce(nr_seq_segurado_p,0) <> 0) then
	begin
	select	dt_contratacao,
		'S',
		nr_seq_contrato,
		nr_seq_segurado_ant
	into STRICT	dt_contratacao_w,
		ie_ativo_w,
		nr_seq_contrato_w,
		nr_seq_segurado_ant_w
	from	pls_segurado
	where	coalesce(dt_rescisao::text, '') = ''
	and	nr_sequencia = nr_seq_segurado_p;
	exception
	when others then
		ie_ativo_w := 'N';
	end;
	
	select	pls_obter_restr_resc_contrato(nr_seq_contrato_w,obter_perfil_ativo,nm_usuario_p, 'B')
	into STRICT	ds_regra_restricao_resc_w
	;
		
	if (ds_regra_restricao_resc_w = 'S') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(450519, null);
	end if;
	
	if (ie_ativo_w = 'S') then
		if (dt_contratacao_w > clock_timestamp()) then
			dt_cancelamento_w	:= dt_contratacao_w;
		else
			dt_cancelamento_w	:= clock_timestamp();
		end if;
		
		if (coalesce(vl_parametro_w,'N') = 'S') then
			select	count(1)
			into STRICT	qt_sib_referencia_w
			from	pls_lote_sib
			where	trunc(dt_mes_competencia,'month') = trunc(dt_contratacao_w,'month')
			and	ie_tipo_envio	= 'E';
			
			if (qt_sib_referencia_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(262494, 'DT_ATUAL=' || to_char(dt_contratacao_w,'mm/yyyy'));
				/* Mensagem: Já foi gerado um lote para o SIB no mês DT_ATUAL! */

			end if;
		end if;
		
		update	pls_segurado
		set	dt_cancelamento		= dt_cancelamento_w,
			dt_atualizacao		= clock_timestamp(),
			ie_situacao_atend	= 'I',
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_segurado_p
		and	coalesce(dt_cancelamento::text, '') = '';
	
		if (coalesce(nr_seq_segurado_ant_w, 0) <> 0) then
			update	pls_segurado
			set	nr_seq_segurado_mig	 = NULL
			where	nr_sequencia	= nr_seq_segurado_ant_w;
		end if;
	
		CALL pls_rescindir_segurado(	nr_seq_segurado_p,
				dt_cancelamento_w,
				dt_cancelamento_w,
				nr_seq_motivo_w,
				'Cancelamento',
				cd_estabelecimento_p,
				nm_usuario_p,
				'B',
				'N',
				null,
				null);
		
		open C02;
		loop
		fetch C02 into
			nr_seq_dependente_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			update	pls_segurado
			set	dt_cancelamento		= dt_cancelamento_w,
				dt_atualizacao		= clock_timestamp(),
				ie_situacao_atend	= 'I',
				nm_usuario		= nm_usuario_p
			where	nr_sequencia		= nr_seq_dependente_w
			and	coalesce(dt_cancelamento::text, '') = '';
			
			select 	nr_seq_segurado_ant
			into STRICT	nr_seq_segurado_ant_w
			from 	pls_segurado
			where	nr_sequencia	= nr_seq_dependente_w;
				
			if (coalesce(nr_seq_segurado_ant_w, 0) <> 0) then
				update	pls_segurado
				set	nr_seq_segurado_mig	 = NULL
				where	nr_sequencia		= nr_seq_segurado_ant_w;
			end if;
			
			nr_seq_motivo_conver_aux_w := pls_converter_motivo_can_tit(	nr_seq_motivo_w, nr_seq_motivo_conver_aux_w, nm_usuario_p);
			
			if (coalesce(nr_seq_motivo_conver_aux_w::text, '') = '') then
				nr_seq_motivo_conver_aux_w	:= nr_seq_motivo_w;
			end if;
			
			CALL pls_rescindir_segurado(	nr_seq_dependente_w,
				dt_cancelamento_w,
				dt_cancelamento_w,
				nr_seq_motivo_conver_aux_w,
				'Cancelamento',
				cd_estabelecimento_p,
				nm_usuario_p,
				'B',
				'N',
				null,
				null);
			end;
		end loop;
		close C02;
	end if;
	
elsif (coalesce(nr_seq_contrato_p,0) <> 0) then
	select	ie_situacao, --domínio 1733
		dt_contrato
	into STRICT	ie_situacao_w,
		dt_contrato_w
	from	pls_contrato
	where	nr_sequencia = nr_seq_contrato_p;
	
	if (ie_situacao_w in ('1','2')) then
		if (dt_contrato_w > clock_timestamp()) then
			dt_cancelamento_w	:= dt_contrato_w;
		else
			dt_cancelamento_w	:= clock_timestamp();
		end if;
		
		if (ie_situacao_w = '2') then /* Se estiver aprovado, deve rescindir */
			if (coalesce(vl_parametro_w,'N') = 'S') then
				select	count(1)
				into STRICT	qt_sib_referencia_w
				from	pls_lote_sib
				where	trunc(dt_mes_competencia,'month') = trunc(dt_contrato_w,'month')
				and	ie_tipo_envio	= 'E';
				
				if (qt_sib_referencia_w > 0) then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(262494, 'DT_ATUAL=' || to_char(dt_contrato_w,'mm/yyyy'));
					/* Mensagem: Já foi gerado um lote para o SIB no mês DT_ATUAL! */

				end if;
			end if;
			
			ds_erro_w := pls_rescindir_contrato(	nr_seq_contrato_p, null, null, null, null, dt_cancelamento_w, dt_cancelamento_w, nr_seq_motivo_w, null, cd_estabelecimento_p, 'N', nm_usuario_p, '', null, 'S', null, ds_erro_w, null, 'N', null);
		end if;
		
		open C01;
		loop
		fetch C01 into	
			nr_seq_segurado_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			/* Cancelar o segurado */

			update	pls_segurado
			set	dt_cancelamento			= clock_timestamp(),
				dt_limite_utilizacao		= clock_timestamp(),
				nm_usuario			= nm_usuario_p,
				dt_atualizacao			= clock_timestamp(),
				nr_seq_motivo_cancelamento 	= nr_seq_motivo_p,
				ie_situacao_atend		= 'I',
				dt_reativacao			 = NULL
			where	nr_sequencia			= nr_seq_segurado_w;
			
			/* Gerar histórico */

			CALL pls_gerar_segurado_historico(	nr_seq_segurado_w, '48', clock_timestamp(), 'Cancelamento',
							'', null, null, null,
							nr_seq_motivo_p, clock_timestamp(), null, null,
							null, null, null, null,
							nm_usuario_p, 'N');				
			end;
		end loop;
		close C01;
		
		update	pls_contrato_pagador
		set	dt_rescisao			= clock_timestamp(),
			nm_usuario			= nm_usuario_p,
			dt_atualizacao			= clock_timestamp(),
			nr_seq_motivo_cancelamento	= nr_seq_motivo_p
		where	nr_seq_contrato			= nr_seq_contrato_p;
		
		update	pls_contrato
		set	dt_cancelamento	= clock_timestamp(),
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			ie_situacao	= '4'
		where	nr_sequencia	= nr_seq_contrato_p;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cancelar_contrato ( nr_seq_contrato_p bigint, nr_seq_segurado_p bigint, nm_usuario_p text, nr_seq_motivo_p bigint, cd_estabelecimento_p bigint) FROM PUBLIC;

