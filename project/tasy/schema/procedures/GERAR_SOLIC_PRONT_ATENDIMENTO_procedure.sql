-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_solic_pront_atendimento (nr_atendimento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
nr_seq_solic_w			bigint;
cd_setor_atendimento_w		bigint;
cd_pessoa_solicitante_w		varchar(10);
nr_seq_prontuario_w		bigint;
ds_lista_informacao_w		varchar(255);
qt_dias_parametro_w		varchar(255);
dt_devolucao_w			timestamp;
ie_forma_solic_pront_w		varchar(1);
cd_pessoa_fisica_w		varchar(10);
dt_entrada_w			timestamp;
ie_setor_solicitante_w		varchar(1);
ie_vincular_atend_pront_w 	varchar(1);

C01 CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	same_prontuario a 
	where	a.nr_atendimento = nr_atendimento_p 
	and	coalesce(a.nr_seq_caixa::text, '') = '' 
	and	a.ie_status not in ('2','5','6','10') 
	and	a.nr_sequencia not in (	SELECT  b.nr_seq_prontuario 
					from   same_solic_pront_envelope b 
					where  b.nr_seq_prontuario  = a.nr_sequencia 
					and   b.nr_seq_solic     = nr_seq_solic_w) 
	--and	a.dt_periodo_final  is not null					 
	and	(a.dt_periodo_inicial IS NOT NULL AND a.dt_periodo_inicial::text <> '');


BEGIN 
--dt_devolucao_w 		:= null; 
--qt_dias_parametro_w 	:= nvl(Obter_Valor_Param_Usuario(941,42, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p),'0'); 
ie_forma_solic_pront_w 		:= Obter_Valor_Param_Usuario(941,26, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p);
ie_setor_solicitante_w 	:= Obter_Valor_Param_Usuario(916,1158, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p);
--[1160] - Vincular número de atendimento ao gerar solicitação interna de prontuário 
ie_vincular_atend_pront_w 	:= Obter_Valor_Param_Usuario(916,1160, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p);
 
 
select	max(CASE WHEN ie_setor_solicitante_w='U' THEN  obter_setor_usuario(nm_usuario_p)  ELSE Obter_Setor_Atendimento(nr_atendimento) END ) 
into STRICT 	cd_setor_atendimento_w 
from	atendimento_paciente 
where	nr_atendimento = nr_atendimento_p;
 
/* Obter pessoa física e data */
 
select	max(cd_pessoa_fisica), 
		max(dt_entrada) 
into STRICT	cd_pessoa_fisica_w, 
		dt_entrada_w 
from	atendimento_paciente 
where	nr_atendimento = nr_atendimento_p;
 
/*if (qt_dias_parametro_w > '0') and (dt_entrada_w is not null) then 
	dt_devolucao_w := dt_entrada_w + obter_somente_numero(qt_dias_parametro_w); 
end if; */
 
	 
ds_lista_informacao_w	:= '';
 
/* Obter o número do atendimento e a pessoa solicitante */
 
select	substr(Obter_Pessoa_Fisica_Usuario(nm_usuario_p,'C'),1,10) 
into STRICT	cd_pessoa_solicitante_w
;
 
if (cd_setor_atendimento_w > 0) and (cd_estabelecimento_p > 0) then 
	 
	CALL Same_Consistir_Solic_Interna(	nr_atendimento_p, 
					cd_pessoa_fisica_w, 
					cd_estabelecimento_p, 
					nm_usuario_p, 
					'S');
 
	/* Verifica se possui alguma solicitação existente para o estabelecimento, setor, data */
 
	select	coalesce(max(nr_sequencia),0) 
	into STRICT	nr_seq_solic_w 
	from	same_solic_pront 
	where	cd_estabelecimento		= cd_estabelecimento_p 
	and	cd_setor_solicitante		= cd_setor_atendimento_w 
	and	trunc(dt_solicitacao, 'dd')	= trunc(clock_timestamp(), 'dd') 
	and	ie_status			<> 'C' 
	and (nr_atendimento = nr_atendimento_p or (coalesce(nr_atendimento_p,0) = 0 and cd_pessoa_fisica = cd_pessoa_fisica_w));
 
	/* Se não possuir, cria uma solicitação */
 
	if (nr_seq_solic_w = 0) then 
 
		select	nextval('same_solic_pront_seq') 
		into STRICT	nr_seq_solic_w 
		;
 
		insert into same_solic_pront( 
			nr_sequencia, 
			cd_estabelecimento, 
			dt_solicitacao, 
			dt_atualizacao, 
			nm_usuario, 
			ie_status, 
			nr_atendimento, 
			cd_pessoa_fisica, 
			cd_pessoa_solicitante, 
			ie_tipo_solicitacao, 
			ie_urgente, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			cd_setor_solicitante, 
			dt_liberacao) 
		values (	nr_seq_solic_w, 
			cd_estabelecimento_p, 
			clock_timestamp(), 
			clock_timestamp(), 
			nm_usuario_p, 
			'P', 
			CASE WHEN ie_vincular_atend_pront_w='S' THEN  nr_atendimento_p  ELSE null END , 
			cd_pessoa_fisica_w, 
			cd_pessoa_solicitante_w, 
			'O', 
			'N', 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_setor_atendimento_w, 
			clock_timestamp());
 
		if (ie_forma_solic_pront_w <> 'N') then 
			open C01;
			loop 
			fetch C01 into	 
				nr_seq_prontuario_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin		 
				ds_lista_informacao_w	:= nr_seq_prontuario_w || ',';		
				CALL Same_Inserir_Pront_Solic(nr_seq_solic_w, ds_lista_informacao_w, nm_usuario_p);
				end;
			end loop;
			close C01;
		end if;
	end if;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_solic_pront_atendimento (nr_atendimento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

