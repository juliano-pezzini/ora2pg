-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_prescr_agenda_consulta (nr_seq_agenda_p bigint, nm_usuario_p text) AS $body$
DECLARE


qt_proced_w			bigint;
dt_agenda_w			timestamp;
cd_paciente_w			varchar(10);
cd_medico_w			varchar(10);
nr_atendimento_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w		bigint;
ds_observacao_w			varchar(2000);/* Rafael em 29/02/2007 OS51268 alterado tamanho do campo para 2000 */
cd_setor_atendimento_w		integer;
cd_prescritor_w			varchar(10);
ie_funcao_prescritor_w		varchar(3);
cd_estabelecimento_w		smallint;
dt_entrada_w			timestamp;
dt_prim_horario_w		timestamp;
dt_atualizacao_w		timestamp := clock_timestamp();
nr_prescricao_w			bigint;
nr_sequencia_w			integer;
nr_seq_interno_w		bigint;
qt_setor_w			bigint := 0;
cd_medico_req_w			varchar(10);/* Ivan em 19/10/2007 OS 70579*/
cd_medico_prescr_w		varchar(10);/* Ivan em 19/10/2007 OS 70579*/
ie_medico_solic_prescr_w	varchar(1);/* Ivan em 19/10/2007 OS 70579*/
ie_medico_req_w			varchar(1);
nr_seq_exame_w			bigint;
cd_material_exame_w		varchar(20);
ie_liberar_w			varchar(10)	:= 'N';
ie_medico_w			varchar(5);
cd_pessoa_fisica_w		varchar(10);
ds_erro_w			varchar(4000);
ie_origem_inf_w			varchar(10);
--nr_atendimento_w		number(10);
cd_medico_resp_atend_w		varchar(10);
cd_profissional_w		varchar(10);
qt_procedimento_adic_w		integer;
cd_tipo_agenda_w		bigint;
ie_transf_w			varchar(1);
cd_setor_proced_w		bigint;
ie_setor_w			varchar(20);
cd_convenio_w			bigint;
cd_categoria_w			bigint;
ie_tipo_atendimento_w		smallint;
ie_considera_regra_med_exame_w	varchar(1);
cd_medico_agenda_aux_w		varchar(10);
ie_medico_executor_w		varchar(10);
cd_cgc_w			varchar(14);
ie_prescr_agenda_w		varchar(1)	:= 'N';
ds_erro			varchar(2000);
cd_setor_agenda_w		integer;
ie_somente_setor_exclusivo_w 	varchar(1);
qt_pre_venda_w			bigint;
ie_forma_dt_presc_w		varchar(1) := 'A';
dt_prescricao_w			timestamp;
ie_lado_w agenda_consulta_proc.ie_lado%type;

c01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno,
		nr_seq_exame,
		coalesce(qt_procedimento,1),
		ie_lado
	from	agenda_consulta_proc
	where	nr_seq_agenda		= nr_seq_agenda_p
	and	ie_executar_proc	= 'S'
	and	coalesce(ie_dependente,'N') = 'N';

c02 CURSOR FOR
	SELECT	cd_setor_atendimento
	from	procedimento_setor_atend
	where	cd_procedimento		= cd_procedimento_w
	and	ie_origem_proced	= ie_origem_proced_w
	and	cd_estabelecimento	= cd_estabelecimento_w
	order	by ie_prioridade desc;


BEGIN

ie_setor_w := Obter_param_Usuario(916, 47, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_setor_w);
ie_considera_regra_med_exame_w := Obter_Param_Usuario(916, 1050, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_considera_regra_med_exame_w);
ie_somente_setor_exclusivo_w := obter_param_usuario(916, 200, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_somente_setor_exclusivo_w);
ie_prescr_agenda_w := Obter_param_usuario(916, 1071, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_prescr_agenda_w);
ie_forma_dt_presc_w := Obter_param_usuario(821, 500, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_forma_dt_presc_w);

select	max(a.cd_tipo_agenda)
into STRICT	cd_tipo_agenda_w
from	agenda a,
	agenda_consulta b
where	a.cd_agenda = b.cd_agenda
and	b.nr_sequencia = nr_seq_agenda_p;

if (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (cd_tipo_agenda_w = 3)then

	/* verificar se gera prescricao */

	select	coalesce(count(*),0)
	into STRICT	qt_proced_w
	from	agenda_consulta_proc
	where	nr_seq_agenda = nr_seq_agenda_p
	and	coalesce(ie_dependente,'N') = 'N';

	/* Obter ie_origem_inf se e medico ou nao */

	select	coalesce(max('1'),'3')
	into STRICT	ie_origem_inf_w
	from	Medico b,
		Usuario a
	where 	a.nm_usuario	= nm_usuario_p
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica;

	select	max(cd_pessoa_Fisica)
	into STRICT	cd_pessoa_fisica_w
	from	usuario
	where	nm_usuario = nm_usuario_p;

	/*obter se e medico*/

	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_medico_w
	from	medico
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	and	ie_situacao	= 'A';

	if (qt_proced_w > 0) then

		/* obter dados da agenda */

		select	max(b.dt_agenda),
			max(b.cd_pessoa_fisica),
			max(a.cd_pessoa_fisica),
			max(coalesce(b.cd_setor_atendimento,a.cd_setor_exclusivo)),
			max(b.nr_atendimento),
			max(b.ds_observacao),
			max(b.cd_medico_req),
			max(b.nr_atendimento)
		into STRICT	dt_agenda_w,
			cd_paciente_w,
			cd_medico_w,
			cd_setor_atendimento_w,
			nr_atendimento_w,
			ds_observacao_w,
			cd_medico_req_w,
			nr_atendimento_w
		from	agenda a,
				agenda_consulta b
		where	a.cd_agenda 	= b.cd_agenda
		and		a.ie_situacao 	= 'A'
		and		b.nr_sequencia 	= nr_seq_agenda_p;



		cd_setor_agenda_w 	:= cd_setor_atendimento_w;
		dt_prescricao_w		:= dt_agenda_w;
		if (ie_forma_dt_presc_w = 'S') then
			dt_prescricao_w		:= clock_timestamp();
		end if;

		/* obter dados do usuario*/

		select	max(a.cd_pessoa_fisica),
			max(a.ie_tipo_evolucao)
		into STRICT	cd_prescritor_w,
			ie_funcao_prescritor_w
		from	usuario a
		where	a.nm_usuario = nm_usuario_p;

		select	max(cd_medico_resp)
		into STRICT	cd_medico_resp_atend_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_w;

		/* obter dados do atendimento */

		select	max(a.cd_estabelecimento),
			max(a.dt_entrada),
			max(ie_tipo_atendimento)
		into STRICT	cd_estabelecimento_w,
			dt_entrada_w,
			ie_tipo_atendimento_w
		from	atendimento_paciente a
		where	a.nr_atendimento = nr_atendimento_w;

		ie_liberar_w := Obter_param_usuario(916, 519, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_liberar_w);

		/*obter se utiliza medico requisitante como executor*/

		ie_medico_req_w := Obter_Param_Usuario(821, 87, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_medico_req_w);
		if (ie_medico_req_w = 'S') then
			cd_medico_w := cd_medico_req_w;
		end if;

		/* obter dados da prescricao */

		select	coalesce(obter_prim_horario_setor(cd_Setor_atendimento_w), to_date((to_char(clock_timestamp(),'dd/mm/yyyy hh24')||':00:00'),'dd/mm/yyyy hh24:mi:ss') +1/24)
		into STRICT	dt_prim_horario_w
		;

		/* gerar sequencia */

		select	nextval('prescr_medica_seq')
		into STRICT	nr_prescricao_w
		;

		/* validar data da prescricao (primeira prescricao) */

		if (dt_agenda_w < dt_entrada_w) then
			dt_agenda_w := dt_entrada_w + 1/1440;
		end if;

		if (dt_prescricao_w < dt_entrada_w) then
			dt_prescricao_w := dt_entrada_w + 1/1440;
		end if;

		/* Le parametros da agenda afim de saber qual sera o medico solicitante da prescricao*/

		select	obter_parametro_agenda(cd_estabelecimento_w, 'IE_MEDICO_SOLIC_PRESCR','E')
		into STRICT	ie_medico_solic_prescr_w
		;

		if (ie_medico_solic_prescr_w = 'E') then
			cd_medico_prescr_w	:= cd_medico_w;
		elsif (ie_medico_solic_prescr_w = 'R') then
			cd_medico_prescr_w	:= cd_medico_req_w;
		end if;

		if (cd_medico_resp_atend_w IS NOT NULL AND cd_medico_resp_atend_w::text <> '') and (obter_se_medico(cd_medico_prescr_w,'M')	= 'N') then
			cd_profissional_w	:= CD_MEDICO_W;
			cd_medico_prescr_w	:= cd_medico_resp_atend_w;
			cd_medico_w		:= null;

		end if;

		/* inserir registro na tabela */

		if (cd_paciente_w IS NOT NULL AND cd_paciente_w::text <> '') then

			insert into prescr_medica(
							nr_prescricao,
							cd_pessoa_fisica,
							nr_atendimento,
							cd_medico,
							dt_prescricao,
							dt_atualizacao,
							nm_usuario,
							nr_horas_validade,
							dt_primeiro_horario,
							cd_setor_atendimento,
							ie_recem_nato,
							ie_origem_inf,
							cd_setor_entrega,
							nm_usuario_original,
							cd_estabelecimento,
							cd_prescritor,
							ie_emergencia,
							ie_funcao_prescritor,
							nr_seq_agecons
							)
						values (
							nr_prescricao_w,
							cd_paciente_w,
							nr_atendimento_w,
							cd_medico_prescr_w,
							dt_prescricao_w,
							dt_atualizacao_w,
							nm_usuario_p,
							24,
							dt_prim_horario_w,
							cd_setor_atendimento_w,
							'N',
							'1',
							cd_setor_atendimento_w,
							nm_usuario_p,
							cd_estabelecimento_w,
							cd_prescritor_w,
							'N',
							ie_funcao_prescritor_w,
							nr_seq_agenda_p
							);
		/* validar registros inseridos */


		/*OS 591493 - Problema ao validar registros da prescr_procedimento*/

		commit;
		end if;

		/* gerar procedimentos */

		open c01;
		loop
		fetch c01 into	cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_proc_interno_w,
					nr_seq_exame_w,
					qt_procedimento_adic_w,
					ie_lado_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			/* obter dados do procedimento (se necessario) */

			if (coalesce(cd_procedimento_w::text, '') = '') and (coalesce(ie_origem_proced_w::text, '') = '') then
				SELECT * FROM obter_proc_tab_interno(nr_seq_proc_interno_w, nr_prescricao_w, nr_atendimento_w, 0, cd_procedimento_w, ie_origem_proced_w, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
			end if;

			/* gerar sequencia */

			select	coalesce(max(a.nr_sequencia),0) + 1
			into STRICT	nr_sequencia_w
			from	prescr_procedimento a
			where	a.nr_prescricao = nr_prescricao_w;

			/* gerar sequencia */

			select	nextval('prescr_procedimento_seq')
			into STRICT	nr_seq_interno_w
			;

			if (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') then
				select coalesce(max(cd_material_exame),'')
				into STRICT	cd_material_exame_w
				from (	SELECT b.cd_material_exame
						from	material_exame_lab b,
								exame_lab_material a
						where a.nr_seq_material	= b.nr_sequencia
						and a.nr_seq_exame		= nr_seq_exame_w
						and a.ie_situacao		= 'A'
						order by a.ie_prioridade) alias3 LIMIT 1;
			end if;

			IF (ie_prescr_agenda_w = 'S') THEN
				cd_setor_atendimento_w	:= 0;
			end if;

			if (coalesce(cd_setor_atendimento_w, 0) = 0) then

				If (remover_acentuacao(ie_setor_w) = 'Usuario') then
					cd_setor_atendimento_w := obter_setor_usuario(nm_usuario_p);
				elsif (ie_setor_w = 'Paciente') then
					select 	max(cd_setor_atendimento)
					into STRICT 	cd_setor_atendimento_w
					from 	atend_paciente_unidade
					where 	nr_seq_interno	= obter_atepacu_paciente(nr_atendimento_w, 'A');
				elsif (ie_setor_w = 'Procedimento') and (ie_somente_setor_exclusivo_w <> 'N')
						and (ie_somente_setor_exclusivo_w <> 'E') then



					cd_setor_atendimento_w := obter_setor_exclusivo(cd_procedimento_w,ie_origem_proced_w,nm_usuario_p);

				elsif (ie_setor_w = 'Procedimento') and (coalesce(cd_setor_atendimento_w,0) = 0) then

					open	c02;
					loop
					fetch	c02 into cd_setor_proced_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */
						begin
						cd_setor_atendimento_w	:= cd_setor_proced_w;
						end;
					end loop;
					close c02;

				elsif (ie_setor_w = 'Proc Interno') then

					select	max(cd_convenio),
						max(cd_categoria)
					into STRICT	cd_convenio_w,
						cd_categoria_w
					from	atend_categoria_convenio
					where	nr_atendimento = nr_atendimento_w
					and	nr_seq_interno = obter_atecaco_atendimento(nr_atendimento_w);

					select	max(obter_setor_exec_proc_interno(nr_seq_proc_interno_w, null, ie_tipo_atendimento_w, cd_convenio_w, cd_categoria_w))
					into STRICT	cd_setor_atendimento_w
					;
				end if;
			end if;


			if (ie_considera_regra_med_exame_w = 'S') then
				SELECT * FROM consiste_medico_executor(cd_estabelecimento_w, obter_convenio_atendimento(nr_atendimento_w), cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, obter_tipo_atendimento(nr_atendimento_w), null, nr_seq_proc_interno_w, ie_medico_executor_w, cd_cgc_w, cd_medico_agenda_aux_w, cd_pessoa_fisica_w, null, coalesce(dt_prescricao_w,clock_timestamp()), obter_classif_atendimento(nr_atendimento_w), 'N', null, null) INTO STRICT ie_medico_executor_w, cd_cgc_w, cd_medico_agenda_aux_w, cd_pessoa_fisica_w;
				if (coalesce(cd_medico_agenda_aux_w,0) > 0) then
					cd_medico_w := cd_medico_agenda_aux_w;
				end if;
			end if;

			/* inserir registro na tabela */

			insert into prescr_procedimento(
								nr_prescricao,
								nr_sequencia,
								nr_seq_interno,
								cd_procedimento,
								ie_origem_proced,
								nr_seq_proc_interno,
								qt_procedimento,
								dt_prev_execucao,
								ie_status_execucao,
								ie_origem_inf,
								dt_atualizacao,
								nm_usuario,
								cd_motivo_baixa,
								cd_setor_atendimento,
								nr_ocorrencia,
								nr_agrupamento,
								ie_urgencia,
								ie_suspenso,
								ie_amostra,
								ie_executar_leito,
								ie_se_necessario,
								ie_acm,
								ie_avisar_result,
								ds_observacao,
								cd_medico_exec,
								nr_seq_exame,
								cd_material_exame,
								CD_PROFISSIONAL,
								nr_seq_agenda_cons,
								ie_lado)
							values (
								nr_prescricao_w,
								nr_sequencia_w,
								nr_seq_interno_w,
								cd_procedimento_w,
								ie_origem_proced_w,
								nr_seq_proc_interno_w,
								qt_procedimento_adic_w,
								dt_agenda_w,
								'10',
								'1',
								dt_atualizacao_w,
								nm_usuario_p,
								0,
								cd_setor_atendimento_w,
								1,
								1,
								'N',
								'N',
								'N',
								'N',
								'N',
								'N',
								'N',
								ds_observacao_w,
								cd_medico_w,
								nr_seq_exame_w,
								cd_material_exame_w,
								cd_profissional_w,
								nr_seq_agenda_p,
								ie_lado_w);
			/* validar registros inseridos */


			/*OS 591493 - Problema ao validar registros da prescr_procedimento*/

			commit;
			end;
		end loop;
		close c01;

		select	count(*)
		into STRICT	qt_pre_venda_w
		from	pre_venda_item
		where	nr_atendimento = nr_atendimento_w
		and 	coalesce(nr_prescricao::text, '') = '';

		if (qt_pre_venda_w > 0) then
			CALL gerar_prescr_proc_pre_venda(nr_prescricao_w, nm_usuario_p);
		end if;

		/* gerar passagem setor */

		select	coalesce(count(*),0)
		into STRICT	qt_setor_w
		from	atend_paciente_unidade
		where	nr_atendimento = nr_atendimento_w;

		ie_transf_w	:= obter_tipo_passagem_regra(cd_setor_agenda_w);
		if (ie_transf_w	= 'T') and (qt_setor_w	= 0) then
			CALL gerar_entrada_setor_prescr(nr_atendimento_w, cd_setor_agenda_w, clock_timestamp(), nm_usuario_p);
		elsif (coalesce(qt_setor_w,0) = 0) and (coalesce(cd_setor_agenda_w,0) > 0) then
			CALL gerar_passagem_setor_atend(nr_atendimento_w, cd_setor_agenda_w, clock_timestamp(), 'S', nm_usuario_p);
		end if;


		if (ie_liberar_w	= 'S') then
			ds_erro_w := liberar_prescricao(nr_prescricao_w, nr_atendimento_w, ie_medico_w, Obter_Perfil_Ativo, nm_usuario_p, 'N', ds_erro_w);
		end if;

	end if;
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_prescr_agenda_consulta (nr_seq_agenda_p bigint, nm_usuario_p text) FROM PUBLIC;

