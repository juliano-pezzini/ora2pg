-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_autor_vaga ( nr_seq_gestao_p bigint, nr_seq_regra_p bigint, nm_usuario_p text, nr_seq_autor_gerada_p INOUT bigint, cd_proc_gest_vaga_p bigint default null, ie_origem_proced_p text default null, nr_seq_proc_interno_p bigint default null) AS $body$
DECLARE


nr_seq_estagio_w			bigint;
ie_exige_just_medica_w		varchar(1)	:= 'N';	
cd_procedimento_w			bigint;
ie_origem_proced_w			bigint;
cd_convenio_w				integer;
cd_setor_atendimento_w		integer;
cd_setor_atual_w			integer;
cd_medico_w					bigint;
cd_tipo_acomodacao_w		bigint;
nr_sequencia_autor_w		bigint;
dt_inicio_vigencia_w		timestamp;
nr_seq_regra_w				bigint;
ds_erro_w					varchar(255);
ie_regra_w					varchar(2) := '';
nr_seq_autor_proc_w			bigint;
qt_dia_solicitado_w			bigint;
nr_atendimento_w			bigint;
cd_categoria_w				varchar(10);
cd_estabelecimento_w		smallint;
dt_entrada_w				timestamp;
qt_medico_w					integer;		
ie_duplica_guia_w			varchar(1);
ds_indicacao_w				varchar(4000);
ie_tipo_vaga_w				varchar(2);
ie_gerar_autor_w			varchar(1);
ie_proc_diaria_acomod_w		varchar(2);
nr_seq_proc_interno_w		bigint;
nr_sequencia_autor_int_w	bigint;
nr_seq_tipo_aval_w			bigint;
CD_PESSOA_FISICA_W			varchar(10);
ie_gera_guia_padrao_w		varchar(1);
ie_paciente_isolado_w		atendimento_paciente.ie_paciente_isolado%type;
cd_setor_usuario_w			setor_atendimento.cd_Setor_atendimento%type := wheb_usuario_pck.get_cd_setor_atendimento;
ie_glosa_w					regra_ajuste_proc.ie_glosa%type;
nr_seq_regra_preco_w		regra_ajuste_proc.nr_sequencia%type;
qt_dias_solic_padrao_w		regra_gerar_autorizacao.qt_dias_solic_padrao%type;
ie_opme_w					gestao_vaga.ie_opme%type;
ie_quimio_w					gestao_vaga.ie_quimioterapia%type;
nr_seq_proc_interno_ww		bigint;
nr_seq_proc_interno_www		gestao_vaga.nr_seq_proc_interno%type;
ie_tipo_atendimento_w		atendimento_paciente.nr_atendimento%type;
ie_gerar_proc_adic_w        funcao_param_Usuario.vl_parametro%type;
cont_w						integer;
ie_gerar_somente_proc_adic_w varchar(1) := 'N';
nr_seq_estagio_ww			bigint;
ie_interno_autor_w  		estagio_autorizacao.ie_interno%type;
ds_observacao_w			gestao_vaga.ds_observacao%type;
ie_gerar_observacao_w		regra_gerar_autorizacao.ie_gerar_observacao%type;
nr_seq_autor_gerar_w 		autorizacao_convenio.nr_sequencia%type;

c01 CURSOR FOR
	SELECT	cd_procedimento,
			ie_origem_proced,
			nr_seq_proc_interno
	from	gestao_vaga_proc
	where	nr_seq_gestao		= nr_seq_gestao_p;


BEGIN
nr_seq_autor_gerada_p	:= null;
nr_sequencia_autor_w := null;
ie_gerar_proc_adic_w := Obter_Param_Usuario(1002, 172, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_proc_adic_w);

if (ie_gerar_proc_adic_w = 'S' and coalesce(nr_seq_regra_p::text, '') = '') then
    ie_gerar_somente_proc_adic_w := 'S';
end if;

if (coalesce(nr_seq_gestao_p,0) > 0) then
	ie_duplica_guia_w		:= coalesce(Obter_Valor_Param_Usuario(1002, 25, Obter_perfil_ativo, nm_usuario_p, 0),'N');

	begin
	select	min(nr_sequencia)
	into STRICT	nr_seq_estagio_w
	from	estagio_autorizacao
	where	ie_situacao	= 'A'
	and		ie_interno	= '1'
	and		OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
	exception
		when no_data_found then
			CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(183700);
	end;

	select	coalesce(max(ie_exige_just_medica),'N'),
		coalesce(max(ie_proc_diaria_acomod),'N'),
		max(qt_dias_solic_padrao), --lhalves OS 785030 em 27/10/2014
		coalesce(max(ie_gerar_observacao),'N')
	into STRICT	ie_exige_just_medica_w,
		ie_proc_diaria_acomod_w,
		qt_dias_solic_padrao_w,
		ie_gerar_observacao_w
	from	regra_gerar_autorizacao
	where	nr_sequencia	= nr_seq_regra_p;

	if (ie_exige_just_medica_w = 'S') then
		begin
		select	min(nr_sequencia)
		into STRICT	nr_seq_estagio_w
		from	estagio_autorizacao
		where	ie_situacao = 'A'
		and	ie_interno  = '2'
		and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
		exception
		when no_data_found then
			CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(183700);
		end;
	end if;
	
	select	a.cd_convenio,
		a.cd_medico,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.cd_setor_desejado,
		a.cd_tipo_acomod_desej,
		a.dt_prevista,
		coalesce(a.qt_dia,qt_dias_solic_padrao_w),
		a.nr_atendimento,
		a.cd_categoria,
		a.cd_estabelecimento,
		a.dt_prevista,
		a.ds_hd,
		a.ie_solicitacao,
		a.cd_pessoa_fisica,
		a.cd_setor_atual,
		a.ie_opme,
		a.ie_quimioterapia,
		a.nr_seq_proc_interno,
		a.ds_observacao
	into STRICT	cd_convenio_w,
		cd_medico_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_setor_atendimento_w,
		cd_tipo_acomodacao_w,
		dt_inicio_vigencia_w,
		qt_dia_solicitado_w,
		nr_atendimento_w,
		cd_categoria_w,
		cd_estabelecimento_w,
		dt_entrada_w,
		ds_indicacao_w,
		ie_tipo_vaga_w,
		CD_PESSOA_FISICA_W,
		cd_setor_atual_w,
		ie_opme_w,
		ie_quimio_w,
		nr_seq_proc_interno_www,
		ds_observacao_w
	from	gestao_vaga a
	where	a.nr_sequencia	= nr_seq_gestao_p;
	
	if	ie_gerar_observacao_w <> 'V' then
		ds_observacao_w := null;
	end if;
	
	select	max(ie_tipo_atendimento)
	into STRICT	ie_tipo_atendimento_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_w;
	
	ie_gerar_autor_w := coalesce(Obter_Valor_Param_Usuario(1002, 74, Obter_perfil_ativo, nm_usuario_p, 0),'N');
	if (ie_tipo_vaga_w <> 'TI' AND ie_gerar_autor_w = 'N') or (ie_gerar_autor_w = 'S') then
		
        if (ie_gerar_somente_proc_adic_w = 'S')then        
            select max(nr_sequencia),
				   max(nr_seq_estagio)            
            into STRICT   nr_sequencia_autor_w,
				   nr_seq_estagio_ww
            from   autorizacao_convenio
            where  nr_seq_gestao = nr_seq_gestao_p;

            select	max(ie_interno)
            into STRICT	ie_interno_autor_w
            from	estagio_autorizacao
            where	ie_situacao	= 'A'
            and		nr_sequencia = nr_seq_estagio_ww;
        end if;

        if (coalesce(nr_sequencia_autor_w::text, '') = '') then        
            select	nextval('autorizacao_convenio_seq')
            into STRICT	nr_sequencia_autor_w
;
        end if;

		select	count(*)
		into STRICT	qt_medico_w
		from	medico
		where	cd_pessoa_fisica	= cd_medico_w;

		/* OS - 132327 - O medico na gestao de vagas tem integridade apenas com a pessoa fisica
		e na autorizacao com medico */
		if (qt_medico_w = 0) then
			cd_medico_w	:= null;
		end if;
		
		ie_gera_guia_padrao_w           := substr(coalesce(Obter_Valor_Param_Usuario(1002, 105, Obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'I'),1,1);

        select	count(*)
		into STRICT	cont_w
		from	autorizacao_convenio where		nr_seq_gestao 	= nr_seq_gestao_p LIMIT 1;
        		
		if (cont_w = 0) then
            insert	into autorizacao_convenio(nr_seq_gestao,			nr_seq_autorizacao,	cd_convenio,		cd_autorizacao,
                dt_autorizacao,			dt_inicio_vigencia,	dt_atualizacao,		nm_usuario,
                dt_fim_vigencia,		nm_responsavel,		ds_observacao,		cd_senha,
                cd_procedimento_principal,	ie_origem_proced,	dt_pedido_medico,	cd_medico_solicitante,
                ie_tipo_guia,			qt_dia_autorizado,	nr_prescricao,		dt_envio,
                dt_retorno,			nr_seq_estagio,		ie_tipo_autorizacao,	ie_tipo_dia,
                cd_tipo_acomodacao,		nr_sequencia,		qt_dia_solicitado,	nr_atendimento,
                dt_entrada_prevista,		ds_indicacao,		nr_seq_regra_autor,	CD_PESSOA_FISICA,
                CD_ESTABELECIMENTO,		cd_setor_origem,	ie_previsao_uso_opme,	ie_previsao_uso_quimio,
                nr_seq_proc_interno, dt_atualizacao_nrec, nm_usuario_nrec)
            values (nr_seq_gestao_p,		null,			cd_convenio_w,		null,
                clock_timestamp(),			dt_inicio_vigencia_w,	clock_timestamp(),		nm_usuario_p,
                null,				null,			ds_observacao_w,			null,
                cd_procedimento_w,		ie_origem_proced_w,	null,			cd_medico_w,
                coalesce(ie_gera_guia_padrao_w,'I'),				null,			null,			null,
                null,				nr_seq_estagio_w,	'1',			'C',
                cd_tipo_acomodacao_w,		nr_sequencia_autor_w,	qt_dia_solicitado_w,	nr_atendimento_w,
                dt_entrada_w,			ds_indicacao_w,		nr_seq_regra_p,		CD_PESSOA_FISICA_W,
                CD_ESTABELECIMENTO_W,		coalesce(cd_setor_atual_w,cd_setor_usuario_w),	ie_opme_w,
                ie_quimio_w,			nr_seq_proc_interno_www, clock_timestamp(), nm_usuario_p);

            select	nr_seq_tipo_avaliacao
            into STRICT	nr_seq_tipo_aval_w
            from	regra_gerar_autorizacao
            where	nr_sequencia = nr_seq_regra_p;
		
            if (nr_seq_tipo_aval_w IS NOT NULL AND nr_seq_tipo_aval_w::text <> '') then
                insert into autorizacao_convenio_aval(
                        nr_sequencia,
                        nr_seq_autorizacao_conv,
                        dt_atualizacao,
                        nm_usuario,
                        dt_atualizacao_nrec,
                        nm_usuario_nrec,
                        dt_avaliacao,
                        nr_seq_tipo_avaliacao)
                    values (	nextval('autorizacao_convenio_aval_seq'),
                        nr_sequencia_autor_w,
                        clock_timestamp(),
                        nm_usuario_p,
                        clock_timestamp(),
                        nm_usuario_p,
                        clock_timestamp(),
                        nr_seq_tipo_aval_w);
            end if;

	    nr_seq_autor_gerar_w := nr_sequencia_autor_w;

            if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then

                SELECT * FROM consiste_plano_convenio(null, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, coalesce(dt_inicio_vigencia_w,clock_timestamp()), 1, ie_tipo_atendimento_w, null, null, ds_erro_w, cd_setor_atendimento_w, null, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_www, cd_categoria_w, cd_estabelecimento_w, null, cd_medico_w, CD_PESSOA_FISICA_W, ie_glosa_w, nr_seq_regra_preco_w) INTO STRICT ds_erro_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, nr_seq_regra_preco_w;
			
                if (ie_regra_w in ('3','6')) then

                    if (ie_duplica_guia_w	= 'S' or ie_duplica_guia_w = 'D') then
                        nr_seq_autor_proc_w := duplicar_autorizacao_convenio(nr_sequencia_autor_w, nm_usuario_p, nr_seq_autor_proc_w, 'N', 'N');
                        update	autorizacao_convenio
                        set	ie_tipo_autorizacao	= '3'
                        where	nr_sequencia		= nr_seq_autor_proc_w;

                        nr_seq_autor_gerar_w := nr_seq_autor_proc_w;
                    else
                        nr_seq_autor_proc_w := nr_seq_autor_gerar_w;
                    end if;

				if (coalesce(nr_seq_autor_proc_w,0) > 0) then
                insert	into	procedimento_autorizado(nr_sequencia,
							cd_procedimento,
							ie_origem_proced,
							qt_solicitada,
							qt_autorizada,
							dt_atualizacao,
							nm_usuario,
							nr_sequencia_autor,
							nr_seq_regra_plano,
							nr_seq_proc_interno)
					values (nextval('procedimento_autorizado_seq'),
							cd_procedimento_w,
							ie_origem_proced_w,
							1,
							0,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_autor_gerar_w,
							nr_seq_regra_w,
							nr_seq_proc_interno_www);
                    end if;
                end if;						
            end if;

             if (ie_duplica_guia_w = 'S') then
                nr_seq_autor_gerar_w := nr_sequencia_autor_w;
            end if;

            if (ie_proc_diaria_acomod_w = 'S') then

                select	coalesce(max(ie_paciente_isolado),'N')
                into STRICT	ie_paciente_isolado_w
                from	atendimento_paciente
                where	nr_atendimento = nr_atendimento_w;

                select 	max(cd_procedimento),
                    max(ie_origem_proced),
                    max(nr_seq_proced_int)
                into STRICT	cd_procedimento_w,
                    ie_origem_proced_w,
                    nr_seq_proc_interno_w
                from 	tipo_acomod_convenio
                where	cd_tipo_acomodacao						= cd_tipo_acomodacao_w
                and	((coalesce(ie_paciente_isolado,'A') = 'A') or (coalesce(ie_paciente_isolado,'A') = ie_paciente_isolado_w))
                and 	coalesce(cd_convenio, coalesce(cd_convenio_w,0))				= coalesce(cd_convenio_w,0)
                and 	coalesce(cd_categoria, coalesce(cd_categoria_w,0))			= coalesce(cd_categoria_w,0)			
                and 	coalesce(cd_setor_atendimento, coalesce(cd_setor_atendimento_w,0))	= coalesce(cd_setor_atendimento_w,0);

                if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and (coalesce(cd_procedimento_w::text, '') = '') then
                    select 	max(cd_procedimento),
                        max(ie_origem_proced)
                    into STRICT 	cd_procedimento_w,
                        ie_origem_proced_w
                    from 	proc_interno
                    where	nr_sequencia	= nr_seq_proc_interno_w;
                end if;

                if	(cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '' AND ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') or (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
                    
                    select	max(a.nr_sequencia)
                    into STRICT	nr_sequencia_autor_int_w			
                    from	estagio_autorizacao b,
                        autorizacao_convenio a
                    where	nr_seq_gestao		= nr_seq_gestao_p
                    and	a.nr_seq_estagio	= b.nr_sequencia
                    and	b.ie_interno		= '1' 
                    and	a.ie_tipo_autorizacao	= '1';

                    if (coalesce(nr_sequencia_autor_int_w,0) > 0) then
    
                        insert	into	procedimento_autorizado(nr_sequencia,
                                cd_procedimento,
                                ie_origem_proced,
                                nr_seq_proc_interno,
                                qt_solicitada,
                                qt_autorizada,
                                dt_atualizacao,
                                nm_usuario,
                                nr_sequencia_autor,
                                nr_seq_regra_plano)
                        values (nextval('procedimento_autorizado_seq'),
                                cd_procedimento_w,
                                ie_origem_proced_w,
                                nr_seq_proc_interno_w,
                                1,
                                0,
                                clock_timestamp(),
                                nm_usuario_p,
                                nr_sequencia_autor_int_w,
                                nr_seq_regra_w);						
                    end if;	
                end if;		
            end if;

            open C01;
            loop
            fetch C01 into	
                cd_procedimento_w,
                ie_origem_proced_w,
                nr_seq_proc_interno_ww;
            EXIT WHEN NOT FOUND; /* apply on C01 */
                begin
                SELECT * FROM consiste_plano_convenio(null, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, coalesce(dt_inicio_vigencia_w,clock_timestamp()), 1, ie_tipo_atendimento_w, null, null, ds_erro_w, cd_setor_atendimento_w, null, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_ww, cd_categoria_w, cd_estabelecimento_w, null, null, CD_PESSOA_FISICA_W, ie_glosa_w, nr_seq_regra_preco_w) INTO STRICT ds_erro_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, nr_seq_regra_preco_w;

                if (ie_regra_w in ('3','6') or ie_gerar_proc_adic_w = 'S') then

                    if (coalesce(nr_seq_autor_gerar_w,0) > 0) then
                        insert	into	procedimento_autorizado(nr_sequencia,
                                cd_procedimento,
                                ie_origem_proced,
                                qt_solicitada,
                                qt_autorizada,
                                dt_atualizacao,
                                nm_usuario,
                                nr_sequencia_autor,
                                nr_seq_regra_plano,
                                nr_seq_proc_interno)
                        values (nextval('procedimento_autorizado_seq'),
                                cd_procedimento_w,
                                ie_origem_proced_w,
                                1,
                                0,
                                clock_timestamp(),
                                nm_usuario_p,
                                nr_seq_autor_gerar_w,
                                nr_seq_regra_w,
                                nr_seq_proc_interno_ww);
                    end if;
                end if;
                end;
            end loop;
            close C01;		

            if (ie_duplica_guia_w	= 'T') then
                nr_seq_autor_gerar_w := duplicar_autorizacao_convenio(nr_sequencia_autor_w, nm_usuario_p, nr_seq_autor_gerar_w, 'S', 'N');
                update	autorizacao_convenio
                set	ie_tipo_autorizacao	= '3'
                where	nr_sequencia		= nr_seq_autor_gerar_w;
            end if;

            nr_seq_autor_gerada_p	:= coalesce(nr_seq_autor_proc_w,nr_sequencia_autor_w);
        elsif (ie_interno_autor_w not in (10,70,90)) then
            SELECT * FROM consiste_plano_convenio(null, cd_convenio_w, cd_proc_gest_vaga_p, ie_origem_proced_p, coalesce(dt_inicio_vigencia_w,clock_timestamp()), 1, ie_tipo_atendimento_w, null, null, ds_erro_w, cd_setor_atendimento_w, null, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_p, cd_categoria_w, cd_estabelecimento_w, null, null, CD_PESSOA_FISICA_W, ie_glosa_w, nr_seq_regra_preco_w) INTO STRICT ds_erro_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, nr_seq_regra_preco_w;
    
                if (ie_gerar_somente_proc_adic_w = 'S') then			
                    if (coalesce(nr_seq_autor_gerar_w,0) > 0) then
                        insert	into	procedimento_autorizado(nr_sequencia,
                                cd_procedimento,
                                ie_origem_proced,
                                qt_solicitada,
                                qt_autorizada,
                                dt_atualizacao,
                                nm_usuario,
                                nr_sequencia_autor,
                                nr_seq_regra_plano,
                                nr_seq_proc_interno)
                        values (nextval('procedimento_autorizado_seq'),
                                cd_proc_gest_vaga_p,
                                ie_origem_proced_p,
                                1,
                                0,
                                clock_timestamp(),
                                nm_usuario_p,
                                nr_seq_autor_gerar_w,
                                nr_seq_regra_w,
                                nr_seq_proc_interno_p);					
                    end if;				
            end if;
        end if;	 		
    end  if;
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_autor_vaga ( nr_seq_gestao_p bigint, nr_seq_regra_p bigint, nm_usuario_p text, nr_seq_autor_gerada_p INOUT bigint, cd_proc_gest_vaga_p bigint default null, ie_origem_proced_p text default null, nr_seq_proc_interno_p bigint default null) FROM PUBLIC;

