-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_bordero_nc_nota_credito (nr_seq_bordero_p bigint, nr_seq_nota_credito_p bigint, vl_nota_credito_p bigint, nm_usuario_p text, ie_opcao_p text) AS $body$
DECLARE


/* ie_opcao_p
'V'	Vincular nota de crédito ao borderô
'D'	Desvincular nota de crédito do borderô
'E'	Desvincular todas as notas de crédito do borderô
*/
nr_seq_nota_credito_w		bigint;
/* Projeto Multimoeda - Variáveis */

cd_estabelecimento_w		integer;
vl_nota_cred_estrang_w		double precision;
vl_complemento_w		double precision;
vl_cotacao_w			cotacao_moeda.vl_cotacao%type;
cd_moeda_w			integer;
cd_moeda_empresa_w		integer;

c01 CURSOR FOR
SELECT	a.nr_seq_nota_credito
from	bordero_nc_nota_credito a
where	a.nr_seq_bordero	= nr_seq_bordero_p;


BEGIN

/* Projeto Multimoeda - Busca os dados do bordero para verificar se é moeda estrangeira.*/

select	max(vl_cotacao),
	max(cd_moeda),
	max(cd_estabelecimento)
into STRICT	vl_cotacao_w,
	cd_moeda_w,
	cd_estabelecimento_w
from	bordero_nc
where	nr_sequencia = nr_seq_bordero_p;

select	obter_moeda_padrao_empresa(cd_estabelecimento_w,'E')
into STRICT	cd_moeda_empresa_w
;

if (ie_opcao_p	= 'V') then

	/* Projeto Multimoeda - Verifica se o borderô é moeda estrangeira, caso positivo calcula os valores para gravar na tabela*/

	if (coalesce(vl_cotacao_w,0) <> 0 and coalesce(cd_moeda_w,cd_moeda_empresa_w) <> cd_moeda_empresa_w) then
		vl_nota_cred_estrang_w := vl_nota_credito_p / vl_cotacao_w;
		vl_complemento_w := vl_nota_credito_p - vl_nota_cred_estrang_w;
	else
		vl_nota_cred_estrang_w := null;
		vl_complemento_w := null;
		vl_cotacao_w := null;
		cd_moeda_w := null;
	end if;

	insert	into bordero_nc_nota_credito(dt_atualizacao,
		nm_usuario,
		nr_seq_bordero,
		nr_seq_nota_credito,
		nr_sequencia,
		vl_nota_credito,
		vl_nota_cred_estrang,
		vl_complemento,
		vl_cotacao,
		cd_moeda)
	values (clock_timestamp(),
		nm_usuario_p,
		nr_seq_bordero_p,
		nr_seq_nota_credito_p,
		nextval('titulo_receber_nc_seq'),
		vl_nota_credito_p,
		vl_nota_cred_estrang_w,
		vl_complemento_w,
		vl_cotacao_w,
		cd_moeda_w);

	CALL atualizar_saldo_nota_credito(nr_seq_nota_credito_p,nm_usuario_p);

elsif (ie_opcao_p	= 'D') then

	delete	from bordero_nc_nota_credito
	where	nr_seq_nota_credito	= nr_seq_nota_credito_p
	and	nr_seq_bordero		= nr_seq_bordero_p;

	CALL atualizar_saldo_nota_credito(nr_seq_nota_credito_p,nm_usuario_p);

elsif (ie_opcao_p	= 'E') then

	open c01;
	loop
	fetch c01 into
		nr_seq_nota_credito_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		delete	from bordero_nc_nota_credito
		where	nr_seq_bordero		= nr_seq_bordero_p
		and	nr_seq_nota_credito	= nr_seq_nota_credito_w;

		CALL atualizar_saldo_nota_credito(nr_seq_nota_credito_w,nm_usuario_p);

	end loop;
	close c01;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_bordero_nc_nota_credito (nr_seq_bordero_p bigint, nr_seq_nota_credito_p bigint, vl_nota_credito_p bigint, nm_usuario_p text, ie_opcao_p text) FROM PUBLIC;

