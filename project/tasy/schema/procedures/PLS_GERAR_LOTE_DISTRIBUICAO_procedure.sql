-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_distribuicao ( nr_seq_lote_p pls_lote_plantonista.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


nr_seq_prest_rec_w		pls_lote_plantonista.nr_seq_prest_rec%type;
nr_seq_competencia_w		pls_competencia.nr_sequencia%type;
dt_mes_competencia_w		timestamp;

/* Cursor C01 */

cd_medico_executor_ant_w	pls_conta.cd_medico_executor%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_regra_ant_w		pls_conta_proc.nr_seq_regra%type;
vl_procedimento_w		pls_conta_proc.vl_liberado%type;

/* Cursor C02 */

cd_area_procedimento_w		especialidade_proc.cd_area_procedimento%type;
cd_especialidade_w		especialidade_proc.cd_especialidade%type;
cd_grupo_proc_w			grupo_proc.cd_grupo_proc%type;
cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
nr_seq_prestador_prot_w		pls_prestador.nr_sequencia%type;

/* Cursor C03 */

cd_medico_executor_w		pls_prestador_plantonista.cd_medico_executor%type;
nr_seq_prest_plant_w		pls_prestador_plantonista.nr_seq_prestador%type;
nr_seq_prestador_ocorr_w	pls_prestador_plantonista.nr_seq_prestador_ocorr%type;
vl_plantonista_w		pls_prestador_plantonista.vl_plantonista%type;

C01 CURSOR FOR
	SELECT	distinct
		a.nr_sequencia,
		a.vl_liberado,
		a.nr_seq_regra
	FROM pls_conta_proc a, procedimento b
LEFT OUTER JOIN grupo_proc c ON (b.cd_grupo_proc = c.cd_grupo_proc)
LEFT OUTER JOIN especialidade_proc d ON (c.cd_especialidade = d.cd_especialidade)
WHERE a.cd_procedimento	= b.cd_procedimento  and coalesce(a.nr_seq_prestador_pgto,coalesce(nr_seq_prest_rec_w,0)) = coalesce(nr_seq_prest_rec_w,0) and (d.cd_area_procedimento = coalesce(cd_area_procedimento_w,d.cd_area_procedimento)) and (d.cd_especialidade 	= coalesce(cd_especialidade_w,d.cd_especialidade)) and (c.cd_grupo_proc	= coalesce(cd_grupo_proc_w,c.cd_grupo_proc)) and (b.cd_procedimento 	= coalesce(cd_procedimento_w,b.cd_procedimento)) and (b.ie_origem_proced 	= coalesce(ie_origem_proced_w,b.ie_origem_proced)) and a.vl_liberado > 0 and not exists (	SELECT	1
			from	pls_conta_medica_resumo x,
				pls_lote_pagamento z
			where	x.nr_seq_conta = a.nr_seq_conta
			and	x.ie_situacao = 'A'
			and	z.nr_sequencia = x.nr_seq_lote_pgto
			
union all

			select	1
			from	pls_conta_medica_resumo x,
				pls_pp_lote z
			where	x.nr_seq_conta = a.nr_seq_conta
			and	x.ie_situacao = 'A'
			and	z.nr_sequencia = x.nr_seq_pp_lote) and exists (select	1
			from	pls_conta		x,
				pls_protocolo_conta	y
			where	y.nr_sequencia 		= x.nr_seq_protocolo
			and (y.nr_seq_prestador 	= nr_seq_prestador_prot_w or
				coalesce(nr_seq_prestador_prot_w::text, '') = '')
			and	x.nr_sequencia 		= a.nr_seq_conta
			and	trunc(y.dt_mes_competencia,'month') 	= trunc(dt_mes_competencia_w,'month')
			and	y.ie_status		= 3) and not exists (select	1
				from	pls_conta_proc_plant x
				where	x.nr_seq_conta_proc = a.nr_sequencia
				and	(x.nr_seq_prest_plant_item IS NOT NULL AND x.nr_seq_prest_plant_item::text <> ''));

C02 CURSOR FOR
	SELECT	a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_prestador_prot
	from	pls_regra_proc_plant a
	order by
		coalesce(a.cd_procedimento,0),
		coalesce(a.cd_grupo_proc,0),
		coalesce(a.cd_especialidade,0),
		coalesce(a.cd_area_procedimento,0);

C03 CURSOR FOR
	SELECT	a.nr_seq_prestador,
		a.nr_seq_prestador_ocorr,
		a.cd_medico_executor,
		coalesce(a.vl_plantonista,0)
	from	pls_prestador_plantonista a
	where	a.nr_seq_prest_rec 	= nr_seq_prest_rec_w
	and	trunc(dt_mes_competencia_w,'dd') between trunc(a.dt_inicio_vigencia,'dd') and fim_dia(coalesce(a.dt_fim_vigencia,dt_mes_competencia_w));


BEGIN
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	select	a.nr_seq_prest_rec,
		a.nr_seq_competencia
	into STRICT	nr_seq_prest_rec_w,
		nr_seq_competencia_w
	from	pls_lote_plantonista a
	where	a.nr_sequencia = nr_seq_lote_p;

	select	a.dt_mes_competencia
	into STRICT	dt_mes_competencia_w
	from	pls_competencia a
	where	a.nr_sequencia = nr_seq_competencia_w;

	/* Gerar os prestadores plantonistas */

	open C03;
	loop
	fetch C03 into
		nr_seq_prest_plant_w,
		nr_seq_prestador_ocorr_w,
		cd_medico_executor_w,
		vl_plantonista_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		insert	into pls_lote_prest_plant(nr_sequencia,
			nr_seq_prest_plant,
			nr_seq_prestador_ocorr,
			cd_medico_executor,
			nr_seq_lote,
			vl_plantonista,
			vl_saldo_plantonista,
			vl_vinculado,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec)
		values (nextval('pls_lote_prest_plant_seq'),
			nr_seq_prest_plant_w,
			nr_seq_prestador_ocorr_w,
			cd_medico_executor_w,
			nr_seq_lote_p,
			vl_plantonista_w,
			vl_plantonista_w,
			0,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p);

		update	pls_lote_plantonista
		set	dt_geracao 	= clock_timestamp(),
			nm_usuario 	= nm_usuario_p,
			dt_atualizacao 	= clock_timestamp()
		where	nr_sequencia 	= nr_seq_lote_p;
		end;
	end loop;
	close C03;

	/* Obter informações da regra de procedimentos plantonistas, a serem consistidos */

	open C02;
	loop
	fetch C02 into
		cd_area_procedimento_w,
		cd_especialidade_w,
		cd_grupo_proc_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_prestador_prot_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
	end loop;
	close C02;

	/* Gerar procedimentos do lote de distributição*/

	open C01;
	loop
	fetch C01 into
		nr_seq_conta_proc_w,
		vl_procedimento_w,
		nr_seq_regra_ant_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select	max(a.cd_medico_executor)
		into STRICT	cd_medico_executor_ant_w
		from	pls_conta_proc b,
			pls_conta a
		where	a.nr_sequencia = b.nr_seq_conta
		and	b.nr_sequencia = nr_seq_conta_proc_w;

		insert	into pls_conta_proc_plant(nr_sequencia,
			nr_seq_lote_plant,
			nr_seq_prestador_ant,
			cd_medico_exec_ant,
			vl_procedimento_ant,
			nr_seq_conta_proc,
			nr_seq_regra_ant,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec)
		values (nextval('pls_conta_proc_plant_seq'),
			nr_seq_lote_p,
			nr_seq_prest_rec_w,
			cd_medico_executor_ant_w,
			vl_procedimento_w,
			nr_seq_conta_proc_w,
			nr_seq_regra_ant_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p);
		end;
	end loop;
	close C01;

	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_distribuicao ( nr_seq_lote_p pls_lote_plantonista.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

