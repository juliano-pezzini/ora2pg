-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sup_gerar_solic_eme_evento ( cd_estabelecimento_p bigint, nr_seq_regra_p bigint, cd_local_estoque_p bigint, qt_dias_previsto_p bigint, qt_dias_previsto_norm_p bigint, ie_aviso_chegada_p text, ie_aviso_aprov_oc_p text, ie_padronizado_p text, ie_estoque_p text, ie_ressuprimento_p text, nm_usuario_p text, nr_solic_compra_p INOUT bigint) AS $body$
DECLARE

 
nr_solic_compra_w			bigint;
cd_grupo_material_w		smallint;
cd_subgrupo_material_w		smallint;
cd_classe_material_w		integer;
cd_material_w			integer;
qt_consumo_mensal_w		double precision;
qt_comprar_w			double precision;
qt_estoque_w			double precision;
qt_estoque_minimo_w		double precision;
ds_regra_w			varchar(80);
ie_gerar_w			varchar(1);
qt_fixa_w				double precision;
qt_conv_compra_estoque_w		double precision;

 
C01 CURSOR FOR 
SELECT	distinct a.cd_material 
from	material_estab c, 
	estrutura_material_v a, 
	sup_estrutura_emergencia b 
where	nr_seq_regra = nr_seq_regra_p 
and (	a.cd_grupo_material	= b.cd_grupo_material 
	or	a.cd_subgrupo_material	= b.cd_subgrupo_material 
	or	a.cd_classe_material	= b.cd_classe_material 
	or	a.cd_material		= b.cd_material) 
and	a.ie_situacao			= 'A' 
and	a.cd_material			= c.cd_material 
and	c.cd_material			= (obter_dados_material(c.cd_material, 'EST'))::numeric  
and	c.cd_estabelecimento		= cd_estabelecimento_p 
and (c.ie_ressuprimento			= ie_ressuprimento_p or ie_ressuprimento_p = 'N') 
and (c.ie_padronizado			= ie_padronizado_p or ie_padronizado_p = 'N') 
and (c.ie_material_estoque		= ie_estoque_p or ie_estoque_p = 'N');

c02 CURSOR FOR 
SELECT	qt_fixa, 
	ie_gerar 
from	sup_estrutura_emergencia 
where	nr_seq_regra = nr_seq_regra_p 
and	coalesce(cd_grupo_material, cd_grupo_material_w) 		= cd_grupo_material_w 
and	coalesce(cd_subgrupo_material, cd_subgrupo_material_w) 	= cd_subgrupo_material_w 
and	coalesce(cd_classe_material, cd_classe_material_w) 		= cd_classe_material_w 
and	coalesce(cd_material, cd_material_w) 			= cd_material_w 
order by 
	coalesce(cd_material, 0), 
	coalesce(cd_classe_material, 0), 
	coalesce(cd_subgrupo_material, 0), 
	coalesce(cd_grupo_material, 0);


BEGIN 
 
nr_solic_compra_w := gerar_solic_compra(	cd_estabelecimento_p, ie_aviso_chegada_p, ie_aviso_aprov_oc_p, cd_local_estoque_p, nm_usuario_p, nr_solic_compra_w);
 
select	ds_regra 
into STRICT	ds_regra_w 
from	sup_regra_emergencia 
where	nr_sequencia = nr_seq_regra_p;
 
update	solic_compra 
set	ds_observacao = Wheb_mensagem_pck.get_Texto(307072, 'DS_REGRA_W='|| DS_REGRA_W) /*Solicitação de emergência Gerada através do evento = (#@DS_REGRA_W#@)*/
 
where	nr_solic_compra = nr_solic_compra_w;
 
open C01;
loop 
fetch C01 into 
	cd_material_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
 
	select	cd_grupo_material, 
		cd_subgrupo_material, 
		cd_classe_material 
	into STRICT	cd_grupo_material_w, 
		cd_subgrupo_material_w, 
		cd_classe_material_w 
	from	estrutura_material_v 
	where	cd_material = cd_material_w;
 
	open C02;
	loop 
	fetch C02 into 
		qt_fixa_w, 
		ie_gerar_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		ie_gerar_w	:= ie_gerar_w;
	end loop;
	close c02;
 
	if (ie_gerar_w = 'S') then 
		begin 
		select	coalesce(max(Obter_mat_estabelecimento(cd_estabelecimento_p, 0, cd_material_w, 'CM')),0), 
			coalesce(max(Obter_mat_estabelecimento(cd_estabelecimento_p, 0, cd_material_w, 'MI')),0), 
			coalesce(max(obter_saldo_disp_estoque(cd_estabelecimento_p, cd_material_w, cd_local_estoque_p, trunc(clock_timestamp(),'mm'))),0), 
			max(Obter_Dados_Material(cd_material_w, 'QCE')) 
		into STRICT	qt_consumo_mensal_w, 
			qt_estoque_minimo_w, 
			qt_estoque_w, 
			qt_conv_compra_estoque_w 
		;
 
		if (coalesce(qt_fixa_w, 0) > 0) then 
			qt_comprar_w	:= qt_fixa_w;
		else 
			qt_comprar_w	:= qt_consumo_mensal_w * 
					(qt_dias_previsto_p + qt_dias_previsto_norm_p) - 
					qt_estoque_w - 
					qt_estoque_minimo_w;
 
		end if;
 
		qt_comprar_w	:= dividir(qt_comprar_w, qt_conv_compra_estoque_w);
		if (qt_comprar_w > 0) and (qt_comprar_w < 1) then 
			qt_comprar_w	:= 1;
		else	qt_comprar_w	:= round((qt_comprar_w)::numeric, 0);
		end if;
 
		if (qt_comprar_w > 0) then 
			CALL Gerar_Solic_Compra_Item( 
				nr_solic_compra_w, 
				cd_material_w, 
				'C', 
				qt_comprar_w, 
				trunc(clock_timestamp()), 
				nm_usuario_p, 
				'S', null,null);
		end if;
		end;
	end if;
	end;
end loop;
close c01;
 
nr_solic_compra_p	:= nr_solic_compra_w;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sup_gerar_solic_eme_evento ( cd_estabelecimento_p bigint, nr_seq_regra_p bigint, cd_local_estoque_p bigint, qt_dias_previsto_p bigint, qt_dias_previsto_norm_p bigint, ie_aviso_chegada_p text, ie_aviso_aprov_oc_p text, ie_padronizado_p text, ie_estoque_p text, ie_ressuprimento_p text, nm_usuario_p text, nr_solic_compra_p INOUT bigint) FROM PUBLIC;

