-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE generate_service_schedule ( nr_sequencia_p bigint, cd_pessoa_fisica_p bigint, cd_agenda_p bigint, nr_seq_treatment_p bigint DEFAULT NULL, result_out_p INOUT text DEFAULT NULL, ds_error_p INOUT text  DEFAULT NULL) AS $body$
DECLARE


    dt_mon_start_time_w      timestamp;
    dt_mon_end_time_w        timestamp;
    st_tue_start_time_w      timestamp;
    dt_tue_end_time_w        timestamp;
    dt_wed_start_time_w      timestamp;
    dt_wed_end_time_w        timestamp;
    dt_thur_start_time_w     timestamp;
    dt_thur_end_time_w       timestamp;
    dt_fri_start_time_w      timestamp;
    dt_fri_end_time_w        timestamp;
    dt_sat_start_time_w      timestamp;
    dt_sat_end_time_w        timestamp;
    dt_sun_start_time_w      timestamp;
    dt_sun_end_time_w        timestamp;
    dt_initial_w             timestamp;
    dt_initial_ww            timestamp;
    dt_final_w               timestamp;
    ie_duration_ww           agenda_consulta.nr_minuto_duracao%TYPE;
    nr_sequencia_w           agenda_consulta.nr_sequencia%TYPE;
    ie_tipo_day_w            bigint;
    dt_start_time_w          timestamp;
    nr_seq_hora_w            agenda_consulta.nr_seq_hora%TYPE;
    ie_duration_w            agenda_consulta.nr_minuto_duracao%TYPE;
    cd_convenio_w            agenda_consulta.cd_convenio%TYPE;
    dt_validade_carteira_w   agenda_consulta.dt_validade_carteira%TYPE;
    is_record_exist          varchar(1) := 'N';
    dt_cur_date_w            timestamp;
    nm_usuario_w             varchar(15);
    nm_paciente_w            varchar(80);
    dt_agenda_w              timestamp;
    hr_inicio_w              timestamp;
    nr_minuto_int_w          smallint;
    overlap_w                bigint := 0;
    ie_overlap_param_w       varchar(1) := 'N';
    ie_period_w              varchar(1);
    ie_dia_semana_w          smallint;
    dt_referencia_w          timestamp;
    nr_seq_regra_w           bigint;
    ie_mesmo_pac_w           varchar(1);
    hr_inicial_w             timestamp;
    hr_final_w               timestamp;
    qt_regra_w               bigint;
    qt_agenda_w              bigint;
    ie_periodo_w             varchar(1) := 'D';
    ds_mensagem_w            varchar(255);
    qt_permissao_w           agenda_consulta_regra.qt_permissao%TYPE;
    ie_error_type_w          agenda_consulta_regra.ie_error_type%TYPE;
    ie_consistencia_w        varchar(255) := '';
    nr_check_w               smallint:=0;
    nr_seq_procedimeto_w     rp_tratamento.nr_seq_cpoe_procedimento%TYPE;
    nr_seq_pac_rehab_w       rp_paciente_reabilitacao.nr_sequencia%TYPE;
    ie_gerar_soap_rehab_w    varchar(1) := 'N';
    cd_evolucao_w            bigint;
C01 CURSOR FOR
	SELECT	coalesce(nr_sequencia,0),
			qt_permissao
	FROM	agenda_consulta_regra
	WHERE	cd_estabelecimento 	= wheb_usuario_pck.get_cd_estabelecimento
	AND		cd_agenda 		= cd_agenda_p
	AND		((ie_dia_semana		= ie_dia_semana_w) OR (coalesce(ie_dia_semana::text, '') = '') OR ((ie_dia_semana = 9) AND (ie_dia_Semana_w NOT IN (7,1))))
	AND (dt_referencia_w BETWEEN TO_DATE(TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_referencia_w),'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_inicial,ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_referencia_w)),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
				AND 	TO_DATE(TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_referencia_w),'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_final,ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_referencia_w)),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
	AND		ie_periodo	= ie_period_w
	AND (cd_perfil = Obter_perfil_Ativo OR coalesce(cd_perfil::text, '') = '')
	ORDER BY
	qt_permissao asc;


BEGIN

    nm_paciente_w := substr(obter_nome_pf(cd_pessoa_fisica_p), 1, 100);
    nm_usuario_w  := wheb_usuario_pck.get_nm_usuario;
    dt_cur_date_w := trunc(clock_timestamp());

	ie_overlap_param_w := Obter_Param_Usuario(9091, 85, obter_perfil_ativo, nm_usuario_w, obter_estabelecimento_ativo, ie_overlap_param_w);
    ie_gerar_soap_rehab_w := Obter_Param_Usuario(281, 1667, obter_perfil_ativo, nm_usuario_w, obter_estabelecimento_ativo, ie_gerar_soap_rehab_w);
    SELECT
        dt_startdate,
        dt_enddate,
        dt_startime_mon,
        dt_endtime_mon,
        dt_startime_tue,
        dt_endtime_tue,
        dt_startime_wed,
        dt_endtime_wed,
        dt_startime_thur,
        dt_endtime_thur,
        dt_startime_fri,
        dt_endtime_fri,
        dt_startime_sat,
        dt_endtime_sat,
        dt_startime_sun,
        dt_endtime_sun
    INTO STRICT
        dt_initial_w,
        dt_final_w,
        dt_mon_start_time_w,
        dt_mon_end_time_w,
        st_tue_start_time_w,
        dt_tue_end_time_w,
        dt_wed_start_time_w,
        dt_wed_end_time_w,
        dt_thur_start_time_w,
        dt_thur_end_time_w,
        dt_fri_start_time_w,
        dt_fri_end_time_w,
        dt_sat_start_time_w,
        dt_sat_end_time_w,
        dt_sun_start_time_w,
        dt_sun_end_time_w
    FROM
        rp_reab_times
    WHERE
        nr_sequencia = nr_sequencia_p;

	select max(cd_evolucao)
	into STRICT cd_evolucao_w
	from cpoe_procedimento
	where nr_sequencia in ( SELECT nr_seq_cpoe_procedimento from rp_tratamento where nr_sequencia = nr_seq_treatment_p);

	dt_initial_ww := dt_initial_w;
    WHILE( dt_initial_w <= dt_final_w ) LOOP
        ie_tipo_day_w := obter_cod_dia_semana(dt_initial_w);
        IF ( ie_tipo_day_w = 1 ) THEN
            ie_duration_ww := pkg_date_utils.get_diffdate(dt_sun_start_time_w, dt_sun_end_time_w, 'MINUTE');
            dt_start_time_w := dt_sun_start_time_w;
        ELSIF ( ie_tipo_day_w = 2 ) THEN
            ie_duration_ww := pkg_date_utils.get_diffdate(dt_mon_start_time_w, dt_mon_end_time_w, 'MINUTE');
            dt_start_time_w := dt_mon_start_time_w;
        ELSIF ( ie_tipo_day_w = 3 ) THEN
            ie_duration_ww := pkg_date_utils.get_diffdate(st_tue_start_time_w, dt_tue_end_time_w, 'MINUTE');
            dt_start_time_w := st_tue_start_time_w;
        ELSIF ( ie_tipo_day_w = 4 ) THEN
            ie_duration_ww := pkg_date_utils.get_diffdate(dt_wed_start_time_w, dt_wed_end_time_w, 'MINUTE');
            dt_start_time_w := dt_wed_start_time_w;
        ELSIF ( ie_tipo_day_w = 5 ) THEN
            ie_duration_ww := pkg_date_utils.get_diffdate(dt_thur_start_time_w, dt_thur_end_time_w, 'MINUTE');
            dt_start_time_w := dt_thur_start_time_w;
        ELSIF ( ie_tipo_day_w = 6 ) THEN
            ie_duration_ww := pkg_date_utils.get_diffdate(dt_fri_start_time_w, dt_fri_end_time_w, 'MINUTE');
            dt_start_time_w := dt_fri_start_time_w;
        ELSIF ( ie_tipo_day_w = 7 ) THEN
            ie_duration_ww := pkg_date_utils.get_diffdate(dt_sat_start_time_w, dt_sat_end_time_w, 'MINUTE');
            dt_start_time_w := dt_sat_start_time_w;
        END IF;

        IF ( ie_duration_ww > 0 ) THEN
            dt_agenda_w := pkg_date_utils.get_datetime(dt_initial_w, dt_start_time_w);

			hr_inicio_w:= (to_date(to_char(dt_initial_w, 'dd/mm/yyyy ') || to_char(dt_start_time_w, 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'));
			nr_minuto_int_w:= ie_duration_ww;

			select 	count(*)  overlap_count
			into STRICT 	overlap_w
			from
				(	SELECT	nr_sequencia
					from agenda_paciente
					where cd_pessoa_fisica= cd_pessoa_fisica_p
					and ((hr_inicio_w  between(hr_inicio) and hr_inicio+(NR_MINUTO_DURACAO/24/60) - (1/24/60/60))
						or (hr_inicio_w + (nr_minuto_int_w/24/60) between (hr_inicio +(1/24/60/60)) and hr_inicio+(NR_MINUTO_DURACAO/24/60))
						or ((hr_inicio_w  < hr_inicio)
						AND (hr_inicio_w + (nr_minuto_int_w/24/60) > hr_inicio+(NR_MINUTO_DURACAO/24/60))))
					and ie_status_agenda NOT IN ('L','F','I','C','B')
					
union

					SELECT nr_sequencia 
					from agenda_consulta
					where cd_pessoa_fisica= cd_pessoa_fisica_p  
					and ((hr_inicio_w  between(dt_agenda)and dt_agenda+(NR_MINUTO_DURACAO/24/60) - (1/24/60/60))
						or (hr_inicio_w + (nr_minuto_int_w/24/60) between (dt_agenda +(1/24/60/60)) and dt_agenda+(NR_MINUTO_DURACAO/24/60))
						or ((hr_inicio_w  < dt_agenda)
						AND (hr_inicio_w + (nr_minuto_int_w/24/60) > dt_agenda+(NR_MINUTO_DURACAO/24/60))))
					and ie_status_agenda NOT IN ('L','F','I','C','B')
				) alias33;

			if (overlap_w > 0 and ie_overlap_param_w = 'I') then
				result_out_p:= result_out_p||' '|| hr_inicio_w;
				goto continueloop;
			end if;

			if (overlap_w > 0 and ie_overlap_param_w = 'A') then
				result_out_p:= result_out_p||' '|| hr_inicio_w;
			end if;

			ie_period_w := 'S';
			dt_referencia_w := to_date(to_char(dt_initial_w,'dd/mm/yyyy')||' '||to_char(dt_start_time_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
			ie_dia_semana_w := pkg_date_utils.get_WeekDay(dt_referencia_w);
            		nr_seq_regra_w := 0;
			OPEN C01;
			LOOP
			FETCH C01 INTO
				nr_seq_regra_w,
				qt_permissao_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				BEGIN
				nr_seq_regra_w := nr_seq_regra_w;
				END;

			IF (nr_seq_regra_w > 0) THEN

				SELECT	coalesce(MAX(qt_permissao),-1),
					coalesce(MAX(ie_periodo),'D'),
					MAX(ds_mensagem),
					MAX(hr_inicial),
					MAX(hr_final),
					MAX(coalesce(ie_mesmo_pac,'N')),
					MAX(ie_error_type)
				INTO STRICT	qt_regra_w,
					ie_periodo_w,
					ds_mensagem_w,
					hr_inicial_w,
					hr_final_w,
					ie_mesmo_pac_w,
					ie_error_type_w
				FROM	agenda_consulta_regra
				WHERE	nr_sequencia = nr_seq_regra_w;

				SELECT	COUNT(*)
					INTO STRICT	qt_agenda_w
					FROM	agenda_consulta
					WHERE	cd_agenda				= cd_agenda_p
					AND		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda) BETWEEN obter_inicio_fim_semana(dt_referencia_w,'I') AND obter_inicio_fim_semana(dt_referencia_w,'F')
					AND		ie_status_agenda NOT IN ('C','L','F')
					AND (dt_agenda BETWEEN TO_DATE(TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda),'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_inicial_w,ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda)),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
								AND TO_DATE(TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda),'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_final_w,ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda)),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
					AND		(nm_paciente IS NOT NULL AND nm_paciente::text <> '')
					AND		((ie_mesmo_pac_w = 'S' AND cd_pessoa_fisica = cd_pessoa_fisica_p) or (ie_mesmo_pac_w = 'N'));	
				IF (qt_agenda_w >= qt_regra_w) THEN
						IF (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') THEN
							ds_mensagem_w := substr(replace_macro(ds_mensagem_w,'@allowedAmounts',qt_permissao_w),1,255);
							ds_mensagem_w := substr(replace_macro(ds_mensagem_w,'@allowedScheduleUnits',qt_agenda_w),1,255);
							IF (ie_periodo_w = 'S') THEN
								ds_mensagem_w := substr(replace_macro(ds_mensagem_w,'@durationType', '(' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_initial_ww + 1, 'shortDate', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone) || ' - '  || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_final_w + 1, 'shortDate', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)|| ')'),1,255);
							ELSE
								ds_mensagem_w := substr(replace_macro(ds_mensagem_w,'@durationType', PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_initial_ww + 1, 'shortDate', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)),1,255);
							END IF;
							ie_consistencia_w := substr(replace_macro(ds_mensagem_w,'@physician','physician'),1,255);
							IF (ie_error_type_w = 'E') THEN
								CALL wheb_mensagem_pck.abort_msg_without_log(ie_consistencia_w);
							ELSE
								ie_consistencia_w := ie_consistencia_w;
							END IF;
						ELSE
							ie_consistencia_w := WHEB_MENSAGEM_PCK.get_texto(277563,NULL);
						END IF;
				END IF;
			END IF;
			END LOOP;
			CLOSE C01;

			
                nr_seq_regra_w := 0;
				ie_period_w:='D';
				OPEN c01;
				LOOP
				FETCH c01 INTO
					nr_seq_regra_w,
					qt_permissao_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					BEGIN
					nr_seq_regra_w := nr_seq_regra_w;
					END;

				IF (nr_seq_regra_w > 0) THEN

						SELECT	coalesce(MAX(qt_permissao),-1),
						coalesce(MAX(ie_periodo),'D'),
						MAX(ds_mensagem),
						MAX(hr_inicial),
						MAX(hr_final),
						MAX(coalesce(ie_mesmo_pac,'N')),
						MAX(ie_error_type)
					INTO STRICT	qt_regra_w,
						ie_periodo_w,
						ds_mensagem_w,
						hr_inicial_w,
						hr_final_w,
						ie_mesmo_pac_w,
						ie_error_type_w
					FROM	agenda_consulta_regra
					WHERE	nr_sequencia = nr_seq_regra_w;

					SELECT	COUNT(*)
						INTO STRICT	qt_agenda_w
						FROM	agenda_consulta
						WHERE	cd_agenda				= cd_agenda_p
						AND		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda)	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_referencia_w)
						AND		ie_status_agenda NOT IN ('C','L','F')
						AND (dt_agenda BETWEEN TO_DATE(TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda),'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_inicial_w,ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda)),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
									AND 	TO_DATE(TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda),'dd/mm/yyyy') ||' '|| TO_CHAR(coalesce(hr_final_w,ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda)),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
						AND		(nm_paciente IS NOT NULL AND nm_paciente::text <> '')
						AND		((ie_mesmo_pac_w = 'S' AND cd_pessoa_fisica = cd_pessoa_fisica_p) or (ie_mesmo_pac_w = 'N'));

					IF ( qt_agenda_w >= qt_regra_w ) THEN
						IF (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') THEN
								ds_mensagem_w := substr(replace_macro(ds_mensagem_w,'@allowedAmounts',qt_permissao_w),1,255);
								ds_mensagem_w := substr(replace_macro(ds_mensagem_w,'@allowedScheduleUnits',qt_agenda_w),1,255);
								IF (ie_periodo_w = 'S') THEN
									ds_mensagem_w := substr(replace_macro(ds_mensagem_w,'@durationType', '(' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_initial_ww + 1, 'shortDate', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone) || ' - '  || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_final_w + 1, 'shortDate', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)|| ')'),1,255);
								ELSE
									ds_mensagem_w := substr(replace_macro(ds_mensagem_w,'@durationType', PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_initial_ww + 1, 'shortDate', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)),1,255);
								END IF;
								ie_consistencia_w := substr(replace_macro(ds_mensagem_w,'@physician','physician'),1,255);
								IF (ie_error_type_w = 'E') THEN
									CALL wheb_mensagem_pck.abort_msg_without_log(ie_consistencia_w);
								ELSE
									ie_consistencia_w := ie_consistencia_w;
								END IF;
							ELSE
								ie_consistencia_w := WHEB_MENSAGEM_PCK.get_texto(277563,NULL);
							END IF;
					END IF;
				END IF;
			END LOOP;
			CLOSE c01;

            SELECT
                coalesce(MAX(nr_sequencia), 0),
                coalesce(MAX(nr_minuto_duracao), 0)
            INTO STRICT
                nr_sequencia_w,
                ie_duration_w
            FROM
                agenda_consulta
            WHERE
                cd_agenda = cd_agenda_p
                AND trunc(dt_agenda, 'MI') = dt_agenda_w
                AND ie_status_agenda = 'L';

            SELECT
                coalesce(MAX(nr_seq_hora), 0) + 1
            INTO STRICT nr_seq_hora_w
            FROM
                agenda_consulta
            WHERE
                cd_agenda = cd_agenda_p
                AND trunc(dt_agenda, 'MI') = dt_agenda_w;

            SELECT
                MAX(ptc.cd_convenio),
                MAX(ptc.dt_validade_carteira)
            INTO STRICT
                cd_convenio_w,
                dt_validade_carteira_w
            FROM
                pessoa_titular_convenio ptc
            WHERE
                dt_cur_date_w BETWEEN coalesce(ptc.dt_inicio_vigencia, dt_cur_date_w) AND coalesce(ptc.dt_fim_vigencia, dt_cur_date_w)
                AND ptc.cd_pessoa_fisica = cd_pessoa_fisica_p;

            IF ( nr_sequencia_w > 0 AND ie_duration_ww = ie_duration_w ) THEN
                BEGIN
                    UPDATE agenda_consulta
                    SET
                        cd_agenda = cd_agenda_p,
                        dt_agenda = dt_agenda_w,
                        nr_minuto_duracao = ie_duration_ww,
                        cd_pessoa_fisica = cd_pessoa_fisica_p,
                        dt_atualizacao = dt_cur_date_w,
                        nm_usuario = nm_usuario_w,
                        ie_status_agenda = 'N',
                        ie_encaixe = 'S',
                        dt_agendamento = dt_cur_date_w,
                        nm_paciente = nm_paciente_w,
                        cd_convenio = coalesce(cd_convenio_w, cd_convenio),
                        dt_validade_carteira = coalesce(dt_validade_carteira_w, dt_validade_carteira)
                    WHERE
                        nr_sequencia = nr_sequencia_w;
                END;
                nr_check_w := 1;
            else
                BEGIN
                    SELECT
                        nextval('agenda_consulta_seq')
                    INTO STRICT nr_sequencia_w
;

                    INSERT INTO agenda_consulta(
                        nr_sequencia,
                        cd_agenda,
                        dt_agenda,
                        nr_minuto_duracao,
                        cd_pessoa_fisica,
                        dt_atualizacao,
                        nm_usuario,
                        ie_status_agenda,
                        ie_encaixe,
                        dt_agendamento,
                        nr_seq_hora,
                        nm_paciente,
                        cd_convenio,
                        dt_validade_carteira
                    ) VALUES (
                        nr_sequencia_w,
                        cd_agenda_p,
                        dt_agenda_w,
                        ie_duration_ww,
                        cd_pessoa_fisica_p,
                        dt_cur_date_w,
                        nm_usuario_w,
                        'N',
                        'S',
                        dt_cur_date_w,
                        nr_seq_hora_w,
                        nm_paciente_w,
                        cd_convenio_w,
                        dt_validade_carteira_w
                    );
                END;
                nr_check_w := 1;
            END IF;

            IF ( nr_sequencia_w <> 0 AND nr_sequencia_p <> 0 ) THEN
                SELECT
                    coalesce(MAX('S'), 'N')
                INTO STRICT is_record_exist
                FROM
                    agenda_consulta_adic
                WHERE
                    nr_seq_agenda = nr_sequencia_w;

                IF is_record_exist = 'S' THEN
                    BEGIN
                        UPDATE agenda_consulta_adic
                        SET
                            nr_seq_reab_times = nr_sequencia_p,
                            nm_usuario = nm_usuario_w,
                            dt_atualizacao = dt_cur_date_w,
							nr_seq_tratamento = nr_seq_treatment_p
                        WHERE
                            nr_seq_agenda = nr_sequencia_w;
                    END;
                ELSE
                    INSERT INTO agenda_consulta_adic(
                        nr_seq_agenda,
                        dt_atualizacao,
                        nm_usuario,
                        nr_seq_reab_times,
						nr_seq_tratamento
                    ) VALUES (
                        nr_sequencia_w,
                        dt_cur_date_w,
                        nm_usuario_w,
                        nr_sequencia_p,
						nr_seq_treatment_p
                    );
                END IF;
            END IF;
        END IF;
		<<continueloop>>
		null;	
        dt_initial_w := dt_initial_w + 1;
    END LOOP;
    IF ( nr_check_w = 1 ) THEN

        select coalesce(MAX(a.nr_seq_cpoe_procedimento), 0),
               coalesce(MAX(b.nr_sequencia), 0)
        into STRICT   nr_seq_procedimeto_w,
               nr_seq_pac_rehab_w
        from   rp_tratamento a,
               rp_paciente_reabilitacao b
        where  a.nr_seq_pac_reav = b.nr_sequencia
        and    a.nr_sequencia = nr_seq_treatment_p;

        UPDATE cpoe_procedimento
        SET
            nr_seq_pac_reab = nr_seq_pac_rehab_w
        WHERE
            nr_sequencia = nr_seq_procedimeto_w;

    END IF;
    ds_error_p := ie_consistencia_w;
	if (ie_gerar_soap_rehab_w = 'S' and coalesce(cd_evolucao_w,0) > 0) then
		CALL clinical_notes_pck.soap_data_after_delete(cd_evolucao_w);
	end if;
    COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_service_schedule ( nr_sequencia_p bigint, cd_pessoa_fisica_p bigint, cd_agenda_p bigint, nr_seq_treatment_p bigint DEFAULT NULL, result_out_p INOUT text DEFAULT NULL, ds_error_p INOUT text  DEFAULT NULL) FROM PUBLIC;

