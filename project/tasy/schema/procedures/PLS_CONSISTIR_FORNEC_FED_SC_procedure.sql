-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_fornec_fed_sc ( nm_usuario_p text) AS $body$
DECLARE


cd_cgc_w		varchar(14);
ds_bairro_w		varchar(255);
ds_endereco_w		varchar(255);
ds_municipio_w		varchar(40);
ds_uf_w			valor_dominio.vl_dominio%type;
nr_seq_fornecedor_w	bigint;
cd_cep_w		varchar(15);
ie_inconsistencia_w	varchar(1);
ie_existe_prestador_w	integer;
dt_inclusao_w		timestamp;
ie_situacao_w		varchar(1);


/* Dados dos fornecedores */

C01 CURSOR FOR
	SELECT	cd_cgc,
		cd_cep,
		ds_bairro,
		ds_endereco,
		dt_inclusao,
		nr_sequencia
	from	pls_fornec_mat_fed_sc
	where	coalesce(dt_vinculo::text, '') = ''
	order by
		nr_sequencia;


BEGIN
/* Limpar inconsistências */

delete from	pls_fornec_mat_fed_sc_inc;

open C01;
loop
fetch C01 into
	cd_cgc_w,
	cd_cep_w,
	ds_bairro_w,
	ds_endereco_w,
	dt_inclusao_w,
	nr_seq_fornecedor_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_inconsistencia_w	:= 'N';

	/* Verificação do CGC */

	if (length(cd_cgc_w) = 14) then

		/* Verificações de CEP */

		begin
		select	b.nm_localidade
		into STRICT	ds_municipio_w
		from	cep_loc		b,
			cep_log		a
		where	b.nr_sequencia		= a.nr_seq_loc
		and	a.cd_cep		= cd_cep_w;
		exception
		when others then
			CALL pls_inserir_inco_forn_material(nr_seq_fornecedor_w,'PJ','Problema ao cadastrar o Município do fornecedor, não encontrado o CEP: '||cd_cep_w,nm_usuario_p);
			ie_inconsistencia_w	:= 'S';
		end;

		begin
		select	a.ds_uf
		into STRICT	ds_uf_w
		from	cep_loc		b,
			cep_log		a
		where	b.nr_sequencia		= a.nr_seq_loc
		and	a.cd_cep		= cd_cep_w;
		exception
		when others then
			CALL pls_inserir_inco_forn_material(nr_seq_fornecedor_w,'PJ','Falha ao cadastrar o UF do fornecedor, não encontrado o CEP: '||cd_cep_w,nm_usuario_p);
			ie_inconsistencia_w	:= 'S';
		end;

		if (cd_cep_w = '0') then
			CALL pls_inserir_inco_forn_material(nr_seq_fornecedor_w,'PJ','O CEP do fornecedor é inválido.',nm_usuario_p);
			ie_inconsistencia_w	:= 'S';
		end if;

		/* Verificação de Endereço */

		if (coalesce(ds_endereco_w::text, '') = '') then
			CALL pls_inserir_inco_forn_material(nr_seq_fornecedor_w,'PJ','O endereço do fornecedor não está informado.',nm_usuario_p);
			ie_inconsistencia_w	:= 'S';
		end if;

		/* Verificação de Bairro */

		if (coalesce(ds_bairro_w::text, '') = '') then
			CALL pls_inserir_inco_forn_material(nr_seq_fornecedor_w,'PJ','O bairro do fornecedor não está informado.',nm_usuario_p);
			ie_inconsistencia_w	:= 'S';
		end if;

		/* Verificação da data de cadastro */

		if (coalesce(dt_inclusao_w::text, '') = '') then
			CALL pls_inserir_inco_forn_material(nr_seq_fornecedor_w,'PR','A data de cadastro do fornecedor está vazia.',nm_usuario_p);
		end if;


	else
		CALL pls_inserir_inco_forn_material(nr_seq_fornecedor_w,'PJ','CGC do fornecedor inválido: '||cd_cgc_w ||'. O código do fornecedor possui ' ||length(cd_cgc_w)
						||' caracteres, é necessário possuir 14 caracteres.',nm_usuario_p);
		ie_inconsistencia_w	:= 'S';
	end if;

	/* Gravar na tabela de Fornecedores, S para inconsistente, N para consistente */

	update	pls_fornec_mat_fed_sc
	set	ie_inconsistencia	= ie_inconsistencia_w
	where	nr_sequencia		= nr_seq_fornecedor_w;

	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_fornec_fed_sc ( nm_usuario_p text) FROM PUBLIC;

