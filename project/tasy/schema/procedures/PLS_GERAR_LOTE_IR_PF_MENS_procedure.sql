-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE reg_meses_ano AS (dt_mes timestamp);


CREATE OR REPLACE PROCEDURE pls_gerar_lote_ir_pf_mens ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


ds_ano_base_w			varchar(10);
dt_inicial_w			timestamp;
dt_final_w			timestamp;
i				bigint;
nr_vetor_w			bigint;
qt_registros_w			bigint;
------------------------------------------------------------------------------------
nr_seq_pagador_ir_w		bigint;
nr_seq_pagador_w		bigint;
nr_seq_mensalidade_w		bigint;
vl_tot_pagador_mens_w		double precision;
vl_tot_pagador_copart_w		double precision;
vl_tot_pagador_remb_w		double precision;
vl_tot_pagador_desconto_w	double precision;
cd_pessoa_fisica_w		varchar(10);
ds_email_w			varchar(255);
------------------------------------------------------------------------------------
nr_seq_segurado_ir_w		bigint;
nr_seq_segurado_w		bigint;
vl_tot_segurado_mens_w		double precision;
vl_tot_segurado_copart_w	double precision;
vl_tot_segurado_remb_w		double precision;
vl_tot_segurado_desconto_w	double precision;
------------------------------------------------------------------------------------
vl_mensalidade_w		double precision;
vl_copariticipacao_w		double precision;
vl_reembolso_w			double precision;
vl_desconto_w			double precision;
type vetor_mes is table of reg_meses_ano index by integer;
vetor_mes_w	vetor_mes;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_pessoa_fisica
	from	pls_contrato_pagador	a
	where	exists (	SELECT	1
				from	pls_mensalidade		x,
					titulo_receber		y
				where	y.nr_seq_mensalidade	= x.nr_sequencia
				and	x.nr_seq_pagador	= a.nr_sequencia
				and	y.dt_liquidacao		between dt_inicial_w and dt_final_w
				and	(y.dt_liquidacao IS NOT NULL AND y.dt_liquidacao::text <> '')
				and	y.ie_situacao		= '2'
				and	coalesce(x.ie_cancelamento::text, '') = '')
	and	(a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '');

C02 CURSOR FOR
	SELECT	x.nr_sequencia
	from	pls_segurado	x
	where	exists (	SELECT	1
				from	pls_mensalidade_segurado	b,
					titulo_receber			c,
					pls_mensalidade			a
				where	b.nr_seq_mensalidade		= a.nr_sequencia
				and	c.nr_seq_mensalidade		= a.nr_sequencia
				and	b.nr_seq_segurado		= x.nr_sequencia
				and	a.nr_seq_pagador		= nr_seq_pagador_w
				and	c.dt_liquidacao 		between dt_inicial_w and dt_final_w
				and	(c.dt_liquidacao IS NOT NULL AND c.dt_liquidacao::text <> '')
				and	c.ie_situacao			= '2'
				and	coalesce(a.ie_cancelamento::text, '') = '');


BEGIN

select	ds_ano_base
into STRICT	ds_ano_base_w
from	pls_lote_mens_ir
where	nr_sequencia	= nr_seq_lote_p;

dt_inicial_w	:= to_date('01/01/'||ds_ano_base_w);
dt_final_w	:= last_day(trunc(add_months(dt_inicial_w,11),'Month'));

/*Coloca os 12 meses do ano no vetor*/

for i in 1..12 loop
	begin
	nr_vetor_w	:= vetor_mes_w.count+1;
	vetor_mes_w[nr_vetor_w].dt_mes	:= trunc(add_months(dt_inicial_w,i-1),'Month');
	end;
end loop;

i := 0;

open C01;
loop
fetch C01 into
	nr_seq_pagador_w,
	cd_pessoa_fisica_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	/*Zera os valores totais do pagador*/

	vl_tot_pagador_mens_w		:= 0;
	vl_tot_pagador_copart_w		:= 0;
	vl_tot_pagador_remb_w		:= 0;
	vl_tot_pagador_desconto_w	:= 0;

	select	max(ds_email)
	into STRICT	ds_email_w
	from	compl_pessoa_fisica
	where	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	ie_tipo_complemento	in (1,2)  LIMIT 1;

	select	nextval('pls_mens_pagador_ir_seq')
	into STRICT	nr_seq_pagador_ir_w
	;

	insert into pls_mens_pagador_ir(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
			nr_seq_lote,nr_seq_pagador,ds_email,ie_email_enviado)
	values (	nr_seq_pagador_ir_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
			nr_seq_lote_p,nr_seq_pagador_w,ds_email_w,'N');

	open c02;
	loop
	fetch c02 into
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		/*Zera os valores totais do beneficiário*/

		vl_tot_segurado_mens_w		:= 0;
		vl_tot_segurado_copart_w	:= 0;
		vl_tot_segurado_remb_w		:= 0;
		vl_tot_segurado_desconto_w	:= 0;

		select	nextval('pls_mens_beneficiario_ir_seq')
		into STRICT	nr_seq_segurado_ir_w
		;

		insert into pls_mens_beneficiario_ir(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
				nr_seq_pagador_ir,nr_seq_segurado)
		values (	nr_seq_segurado_ir_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
				nr_seq_pagador_ir_w,nr_seq_segurado_w);

		i	:= 0;

		for i in 1..vetor_mes_w.count loop
			begin
			select	sum(b.vl_mensalidade),
				sum(b.vl_coparticipacao)
			into STRICT	vl_mensalidade_w,
				vl_copariticipacao_w
			from	pls_mensalidade_segurado	b,
				titulo_receber			c,
				pls_mensalidade			a
			where	b.nr_seq_mensalidade		= a.nr_sequencia
			and	c.nr_seq_mensalidade		= a.nr_sequencia
			and	a.nr_seq_pagador		= nr_seq_pagador_w
			and	b.nr_seq_segurado		= nr_seq_segurado_w
			and	trunc(c.dt_liquidacao,'month')	= vetor_mes_w[i].dt_mes
			and	c.ie_situacao			= '2'
			and	coalesce(a.ie_cancelamento::text, '') = '';

			select	sum(vl_item)
			into STRICT	vl_desconto_w
			from (SELECT	sum(d.vl_item) vl_item
				from	pls_mensalidade_seg_item	d,
					pls_mensalidade_segurado	b,
					titulo_receber			c,
					pls_mensalidade			a
				where	d.nr_seq_mensalidade_seg	= b.nr_sequencia
				and	b.nr_seq_mensalidade		= a.nr_sequencia
				and	c.nr_seq_mensalidade		= a.nr_sequencia
				and	a.nr_seq_pagador		= nr_seq_pagador_w
				and	b.nr_seq_segurado		= nr_seq_segurado_w
				and	trunc(c.dt_liquidacao,'month')	= vetor_mes_w[i].dt_mes
				and	d.ie_tipo_item			= '14'
				and	c.ie_situacao			= '2'
				and	coalesce(a.ie_cancelamento::text, '') = ''
				
union all

				SELECT	sum(d.vl_item) vl_item
				from	pls_mensalidade_seg_item	d,
					pls_mensalidade_segurado	b,
					titulo_receber			c,
					pls_mensalidade			a,
					pls_tipo_lanc_adic		e
				where	d.nr_seq_mensalidade_seg	= b.nr_sequencia
				and	b.nr_seq_mensalidade		= a.nr_sequencia
				and	c.nr_seq_mensalidade		= a.nr_sequencia
				and	e.nr_sequencia			= d.nr_seq_tipo_lanc
				and	a.nr_seq_pagador		= nr_seq_pagador_w
				and	b.nr_seq_segurado		= nr_seq_segurado_w
				and	trunc(c.dt_liquidacao,'month')	= vetor_mes_w[i].dt_mes
				and	d.ie_tipo_item			= '20'
				and	e.ie_operacao_motivo		= 'D'
				and	c.ie_situacao			= '2'
				and	coalesce(a.ie_cancelamento::text, '') = '') alias7;

			select	sum(b.vl_total)
			into STRICT	vl_reembolso_w
			from	pls_protocolo_conta	c,
				pls_conta		b,
				pls_segurado		a
			where	a.nr_sequencia			= c.nr_seq_segurado
			and	b.nr_seq_protocolo		= c.nr_sequencia
			and	c.ie_tipo_protocolo		= 'R'
			and	a.nr_sequencia			= nr_seq_segurado_w
			and	trunc(c.dt_mes_competencia,'Month') 	= vetor_mes_w[i].dt_mes;

			vl_mensalidade_w	:= coalesce(vl_mensalidade_w,0);
			vl_desconto_w		:= coalesce(vl_desconto_w,0);
			vl_copariticipacao_w	:= coalesce(vl_copariticipacao_w,0);
			vl_reembolso_w		:= coalesce(vl_reembolso_w,0);

			insert into pls_mens_valores_ir(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
					nr_seq_benef_ir,dt_referencia,vl_mensalidade,vl_coparticipacao,vl_reembolso,
					vl_desconto)
			values (	nextval('pls_mens_valores_ir_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
					nr_seq_segurado_ir_w,vetor_mes_w[i].dt_mes,vl_mensalidade_w,vl_copariticipacao_w,0,
					vl_desconto_w);

			/*Totalizar os valores do beneficiário*/

			vl_tot_segurado_mens_w		:= vl_tot_segurado_mens_w + coalesce(vl_mensalidade_w,0);
			vl_tot_segurado_copart_w	:= vl_tot_segurado_copart_w + coalesce(vl_copariticipacao_w,0);
			vl_tot_segurado_desconto_w	:= vl_tot_segurado_desconto_w + coalesce(vl_desconto_w,0);
			vl_tot_segurado_remb_w		:= 0;
			end;
		end loop;

		/*Totalizar os valores do pagador*/

		vl_tot_pagador_mens_w		:= vl_tot_pagador_mens_w + coalesce(vl_tot_segurado_mens_w,0);
		vl_tot_pagador_copart_w		:= vl_tot_pagador_copart_w + coalesce(vl_tot_segurado_copart_w,0);
		vl_tot_pagador_desconto_w	:= vl_tot_pagador_desconto_w + coalesce(vl_tot_segurado_desconto_w,0);
		vl_tot_pagador_remb_w		:= 0;

		update	pls_mens_beneficiario_ir
		set	vl_mensalidade		= vl_tot_segurado_mens_w,
			vl_coparticipacao	= vl_tot_segurado_copart_w,
			vl_reembolso		= vl_tot_segurado_remb_w,
			vl_desconto		= vl_tot_segurado_desconto_w
		where	nr_sequencia		= nr_seq_segurado_ir_w;
		end;
	end loop;
	close c02;

	select	count(1)
	into STRICT	qt_registros_w
	from	pls_mens_beneficiario_ir
	where	nr_seq_pagador_ir	= nr_seq_pagador_ir_w;

	if (qt_registros_w > 0) then
		update	pls_mens_pagador_ir
		set	vl_mensalidade		= vl_tot_pagador_mens_w,
			vl_coparticipacao	= vl_tot_pagador_copart_w,
			vl_reembolso		= vl_tot_pagador_remb_w,
			vl_desconto		= vl_tot_pagador_desconto_w
		where	nr_sequencia		= nr_seq_pagador_ir_w;
	else
		delete	FROM pls_mens_pagador_ir
		where	nr_sequencia		= nr_seq_pagador_ir_w;
	end if;
	end;
end loop;
close C01;

select	count(1)
into STRICT	qt_registros_w
from	pls_mens_pagador_ir
where	nr_seq_lote	= nr_seq_lote_p;

if (qt_registros_w > 0) then
	update	pls_lote_mens_ir
	set	dt_geracao_lote	= clock_timestamp()
	where	nr_sequencia	= nr_seq_lote_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_ir_pf_mens ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

