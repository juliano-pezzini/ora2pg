-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE man_gerar_previsao_dia ( dt_parametro_p timestamp, nm_usuario_prev_p text) AS $body$
DECLARE


qt_min_previsto_w		bigint;
qt_min_realizado_w		bigint;
qt_min_almoco_w		bigint;
qt_min_lanche_w		bigint;
qt_min_diferenca_w		bigint;

qt_min_atividade_w		bigint;
qt_min_trabalhado_w	bigint;
qt_min_extra_w		bigint;

qt_registro_w		bigint;
nr_seq_grupo_w		bigint	:= null;
ie_tipo_os_w		varchar(10);
qt_atrasada_w		bigint	:= 0;
qt_sem_ativ_prev_w	bigint	:= 0;
qt_sem_data_prev_w	bigint	:= 0;
qt_prev_futuro_w	bigint	:= 0;
qt_total_os_w		bigint	:= 0;

ie_setor_w		varchar(3);
nr_seq_grupo_sup_w	bigint	:= null;
nr_seq_grupo_gerencia_w	bigint;
/* Retirado devido a graves problemas de performance
Matheus França - 19/11/2018
*/
c01 CURSOR FOR
SELECT	a.ie_tipo_os
from	man_ordem_serv_programar_v a
where	a.nm_usuario_prev	= nm_usuario_prev_p
and   	exists (select	1
               	from     	man_ordem_servico_exec	x
		where	x.nr_seq_ordem	= a.nr_sequencia
		and	x.nm_usuario_exec	= nm_usuario_prev_p
		and	coalesce(x.dt_fim_execucao::text, '') = '');

C02 CURSOR FOR
	SELECT	nr_seq_grupo
	from	gerencia_wheb_grupo_usu
	where	nm_usuario_grupo = nm_usuario_prev_p;


BEGIN

/* Obter o tempo previsto */

select	coalesce(sum(a.qt_min_prev),0)
into STRICT	qt_min_previsto_w
from	man_ordem_ativ_prev	a
where	a.dt_prevista between PKG_DATE_UTILS.start_of(dt_parametro_p,'dd',0) and fim_dia(dt_parametro_p)
and	nm_usuario_prev		= nm_usuario_prev_p;

/* Obter o tempo realizado */

select	coalesce(sum(a.qt_minuto),0)
into STRICT	qt_min_realizado_w
from	man_ordem_serv_ativ	a
where	a.dt_atividade between PKG_DATE_UTILS.start_of(dt_parametro_p,'dd',0) and fim_dia(dt_parametro_p)
and	nm_usuario_exec		= nm_usuario_prev_p;

/* Obter o tempo de almoço e lanche*/

select	coalesce(sum(a.qt_min_intervalo),0),
	coalesce(sum(a.qt_min_lanche),0)
into STRICT	qt_min_almoco_w,
	qt_min_lanche_w
from	usuario_controle	a
where	a.dt_entrada between PKG_DATE_UTILS.start_of(dt_parametro_p,'dd',0) and fim_dia(dt_parametro_p)
and	nm_usuario	= nm_usuario_prev_p;

/* Obter o tempo de outras atividades  */

select	coalesce(sum(b.qt_minuto),0)
into STRICT	qt_min_atividade_w
from	usuario_atividade	b,
	usuario_controle	a
where	a.nr_sequencia		= b.nr_seq_controle
and	a.dt_entrada between PKG_DATE_UTILS.start_of(dt_parametro_p,'dd',0) and fim_dia(dt_parametro_p)
and	a.nm_usuario		= nm_usuario_prev_p;

/* Verificar se já existe registro para o usuário no dia */

select	count(*)
into STRICT	qt_registro_w
from	man_previsao_dia a
where	PKG_DATE_UTILS.start_of(a.dt_dia_previsao, 'dd', 0) = PKG_DATE_UTILS.start_of(dt_parametro_p, 'dd', 0)
and	nm_usuario_prev			= nm_usuario_prev_p;

/* Verificar atrasadas, etc*/

/* Sem data prevista */

select	count(a.nr_sequencia)
into STRICT	qt_sem_data_prev_w
from	man_ordem_ativ_prev	y,
	man_ordem_servico	a,
	man_estagio_processo	c
where	a.nr_sequencia 		= y.nr_seq_ordem_serv
and	c.nr_sequencia 		= a.nr_seq_estagio
and	c.ie_desenv    		= 'S'
and	y.nm_usuario_prev	= nm_usuario_prev_p
and	coalesce(y.dt_prevista::text, '') = ''
and	coalesce(a.dt_liberacao_exec::text, '') = ''
and   	exists (SELECT	1
               	from     	man_ordem_servico_exec	x
		where	x.nr_seq_ordem	= a.nr_sequencia
		and	x.nm_usuario_exec	= nm_usuario_prev_p
		and	coalesce(x.dt_fim_execucao::text, '') = '');

/*Sem atividade prevista */

select	count(a.nr_sequencia)
into STRICT	qt_sem_ativ_prev_w
from	man_ordem_servico_exec	y,
	man_ordem_servico	a,
	man_estagio_processo	c
where	a.nr_sequencia		= y.nr_seq_ordem
and	c.nr_sequencia		= a.nr_seq_estagio
and	y.nm_usuario_exec	= nm_usuario_prev_p
and	c.ie_desenv    		= 'S'
and	coalesce(a.dt_liberacao_exec::text, '') = ''
and (y.nr_seq_tipo_exec <> 5 or coalesce(y.nr_seq_tipo_exec::text, '') = '')
and	not exists (SELECT	1
			from	man_ordem_ativ_prev	x
			where	x.nr_seq_ordem_serv	= a.nr_sequencia
			and	x.nm_usuario_prev	= y.nm_usuario_exec);

select	count(a.nr_sequencia)
into STRICT	qt_atrasada_w
from	man_ordem_ativ_prev z,
	man_ordem_servico_exec	y,
	man_ordem_servico	a,
	man_estagio_processo	c
where	a.nr_sequencia		= y.nr_seq_ordem
and	c.nr_sequencia		= a.nr_seq_estagio
and	z.nr_seq_ordem_serv	= a.nr_sequencia
and	z.nm_usuario_prev	= y.nm_usuario_exec
and	z.nm_usuario_prev	= nm_usuario_prev_p
and	c.ie_desenv    		= 'S'
and	coalesce(a.dt_liberacao_exec::text, '') = ''
and (y.nr_seq_tipo_exec <> 5 or coalesce(y.nr_seq_tipo_exec::text, '') = '')
and	(z.dt_prevista IS NOT NULL AND z.dt_prevista::text <> '')
and	z.dt_prevista	< trunc(clock_timestamp(),'dd')
and	not exists	(SELECT	1
			from	man_ordem_ativ_prev x
			where	x.nr_seq_ordem_serv	= a.nr_sequencia
			and	x.nm_usuario_prev	= z.nm_usuario_prev
			and	x.dt_prevista >= trunc(clock_timestamp(),'dd')
			and	((coalesce(x.dt_real::text, '') = '') or (trunc(x.dt_real) = trunc(clock_timestamp()))));

select	count(a.nr_sequencia)
into STRICT	qt_prev_futuro_w
from	man_ordem_ativ_prev	y,
	man_ordem_servico	a,
	man_estagio_processo	c
where	a.nr_sequencia 		= y.nr_seq_ordem_serv
and	c.nr_sequencia		= a.nr_seq_estagio
and	c.ie_desenv    		= 'S'
and	y.dt_prevista > fim_dia(clock_timestamp())
and	coalesce(a.dt_liberacao_exec::text, '') = ''
and	y.nm_usuario_prev	= nm_usuario_prev_p;

qt_total_os_w	:= qt_sem_data_prev_w + qt_sem_ativ_prev_w + qt_atrasada_w + qt_prev_futuro_w;

/* substituido pelos comandos acima count separados
analise conjunta com a Infra
open c01;
loop
fetch c01 into
	ie_tipo_os_w;
exit when c01%notfound;
	begin
	if	(ie_tipo_os_w = 'ATR') then
		qt_atrasada_w		:= qt_atrasada_w + 1;
	elsif	(ie_tipo_os_w = 'SDP') then
		qt_sem_data_prev_w	:= qt_sem_data_prev_w + 1;
	elsif	(ie_tipo_os_w = 'SAP') then
		qt_sem_ativ_prev_w	:= qt_sem_ativ_prev_w + 1;
	end if;
	qt_total_os_w	:= qt_total_os_w + 1;
	end;
end loop;
close c01;
*/
/* Calcular o tempo da diferença */

qt_min_diferenca_w	:= qt_min_previsto_w - 420;

/* Calcular o tempo trabalhado */

qt_min_trabalhado_w	:= qt_min_realizado_w + qt_min_atividade_w + qt_min_lanche_w;

/* Obter o tempo extra */

qt_min_extra_w		:= qt_min_previsto_w - 420;
if (qt_min_extra_w	< 0) then
	qt_min_extra_w	:= 0;
end if;

/* Obter o grupo de desenvolvimento do usuário */

select	max(nr_seq_grupo)
into STRICT	nr_seq_grupo_w
from	usuario_grupo_des
where	nm_usuario_grupo	= nm_usuario_prev_p;

if (coalesce(nr_seq_grupo_w::text, '') = '') then
	select	max(nr_seq_grupo)
	into STRICT	nr_seq_grupo_sup_w
	from	usuario_grupo_sup
	where	nm_usuario_grupo	= nm_usuario_prev_p;

	ie_setor_w	:= 'S';
else
	ie_setor_w	:= 'D';
end if;





open C02;
loop
fetch C02 into
	nr_seq_grupo_gerencia_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin

	select	count(*)
	into STRICT	qt_registro_w
	from	man_previsao_dia a
	where	PKG_DATE_UTILS.start_of(a.dt_dia_previsao, 'dd', 0) = PKG_DATE_UTILS.start_of(dt_parametro_p, 'dd', 0)
	and	nm_usuario_prev			= nm_usuario_prev_p
	and	nr_seq_grupo_gerencia 		= nr_seq_grupo_gerencia_w;

	if (qt_registro_w	= 0) then
		insert into man_previsao_dia(nr_sequencia, nm_usuario_prev, dt_dia_previsao,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec, qt_min_previsto, qt_min_realizado,
			qt_min_diferenca, qt_min_carga_horaria, qt_min_almoco,
			qt_min_lanche, nr_seq_grupo, qt_min_atividade,
			qt_min_trabalhado, qt_min_extra, qt_atrasada,
			qt_sem_ativ_prev, qt_sem_data_prev, qt_total_os,
			ie_setor, nr_seq_grupo_sup, nr_seq_grupo_gerencia)
		values (	nextval('man_previsao_dia_seq'), nm_usuario_prev_p, PKG_DATE_UTILS.start_of(dt_parametro_p,'dd',0),
			clock_timestamp(), nm_usuario_prev_p, clock_timestamp(),
			nm_usuario_prev_p, qt_min_previsto_w, qt_min_realizado_w,
			qt_min_diferenca_w, 420, qt_min_almoco_w,
			qt_min_lanche_w, nr_seq_grupo_w, qt_min_atividade_w,
			qt_min_trabalhado_w, qt_min_extra_w, qt_atrasada_w,
			qt_sem_ativ_prev_w, qt_sem_data_prev_w, qt_total_os_w,
			ie_setor_w, nr_seq_grupo_sup_w, nr_seq_grupo_gerencia_w);
	else
		update	man_previsao_dia
		set	dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_prev_p,
			qt_min_previsto		= qt_min_previsto_w,
			qt_min_realizado	= qt_min_realizado_w,
			qt_min_diferenca	= qt_min_diferenca_w,
			qt_min_almoco		= qt_min_almoco_w,
			qt_min_lanche		= qt_min_lanche_w,
			qt_min_carga_horaria	= 420,
			nr_seq_grupo		= nr_seq_grupo_w,
			qt_min_atividade	= qt_min_atividade_w,
			qt_min_trabalhado	= qt_min_trabalhado_w,
			qt_min_extra		= qt_min_extra_w,
			qt_atrasada		= qt_atrasada_w,
			qt_sem_ativ_prev	= qt_sem_ativ_prev_w,
			qt_sem_data_prev	= qt_sem_data_prev_w,
			qt_total_os		= qt_total_os_w,
			ie_setor		= ie_setor_w,
			nr_seq_grupo_sup	= nr_seq_grupo_sup_w,
			nr_seq_grupo_gerencia	= nr_seq_grupo_gerencia_w
		where	PKG_DATE_UTILS.start_of(dt_dia_previsao, 'dd', 0) = PKG_DATE_UTILS.start_of(dt_parametro_p, 'dd', 0)
		and	nm_usuario_prev		= nm_usuario_prev_p
		and	nr_seq_grupo_gerencia 		= nr_seq_grupo_gerencia_w;
	end if;


	end;
end loop;
close C02;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE man_gerar_previsao_dia ( dt_parametro_p timestamp, nm_usuario_prev_p text) FROM PUBLIC;

