-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE wl_gerar_finalizar_tarefa ( cd_categoria_p text, ie_acao_p text, nr_atendimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, dt_final_previsto_p timestamp, ie_commit_p text default 'S', cd_tipo_evolucao_p text default null, nr_seq_disp_pac_p bigint default null, nr_seq_document_p bigint default null, nr_prescricao_p bigint default null, nr_seq_prescr_proc_p bigint default null, nr_seq_carta_mae_p bigint default null, ie_escala_p text default null, nr_parecer_p bigint default null, nr_seq_diagnostico_p bigint default null, nr_seq_regra_p bigint default null, ie_tipo_diagnostico_p bigint default null, dt_final_real_p timestamp default clock_timestamp(), nr_seq_escala_p bigint default null, nr_seq_nota_clinica_p bigint default null, nr_seq_prev_alta_p bigint default null, nm_tabela_escala_p text default '', nr_seq_classif_diag_p bigint default null, dt_inicial_p timestamp default clock_timestamp(), nr_seq_episodio_p bigint default null, nr_seq_sae_p bigint default null, cd_profissional_p text default null, cd_pendencia_exp_p bigint default null, cd_funcionario_p bigint default null, ie_cons_episodio_p text default 'S', ie_classif_diag_p text default null, nr_seq_laudo_p bigint default null, ie_modelo_carta_p text default null, nr_seq_prescr_mipres_p wl_worklist.nr_seq_prescr_mipres%type default null) AS $body$
DECLARE


/*
CD_CATEGORIA_P --> Passar o codigo da categoria correspondente ao evento, de acordo com o dominio 8672

IE_ACAO_P
I - Inserir tarefa
F - Finalizar tarefa
R - Reabrir tarefa
*/
nr_seq_worklist_w			wl_worklist.nr_sequencia%type;
qt_pendente_cpoe_w			bigint;
qt_register_w				wl_worklist.nr_sequencia%type;
nr_seq_regra_w				wl_regra_item.nr_sequencia%type;
ie_tipo_pendencia_w			wl_regra_item.ie_tipo_pend_carta%type;
ie_opcao_wl_w				wl_regra_item.ie_opcao_wl%type;
ie_existe_inserido_w		varchar(1) := 'N';
ie_inserir_tarefa_w			varchar(1) := 'S';
ie_usa_case_w				varchar(1);
nr_seq_episodio_w			episodio_paciente.nr_sequencia%type;
ds_pendencia_w				wl_worklist.ds_pendencia%type := null;
ds_acao_w					wl_worklist.ds_acao_alt%type := null;
ie_modelo_carta_wl_w            varchar(1) := null;

C01 CURSOR FOR
	SELECT	nr_sequencia nr_seq_item
	from	wl_item
	where	cd_categoria = cd_categoria_p;

C02 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_regra
	from	wl_regra_item a,
			wl_worklist b,
			wl_item c
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.nr_seq_item = c.nr_sequencia
	and		b.nr_atendimento = nr_atendimento_p
	and		coalesce(b.dt_final_real::text, '') = ''
	and		c.cd_categoria = 'ED';

C03 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_regra
	from	wl_regra_item a,
			wl_worklist b,
			wl_item c
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.nr_seq_item = c.nr_sequencia
	and		b.nr_atendimento = nr_atendimento_p
	and		coalesce(b.dt_final_real::text, '') = ''
	and		c.cd_categoria = 'WO';

C04 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_regra
	from	wl_regra_item a,
			wl_worklist b,
			wl_item c
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.nr_seq_item = c.nr_sequencia
	and		b.nr_atendimento = nr_atendimento_p
	and		coalesce(b.dt_final_real::text, '') = ''
	and		c.cd_categoria = 'IH';				
BEGIN

select	obter_uso_case(wheb_usuario_pck.get_nm_usuario)
into STRICT	ie_usa_case_w
;

select	max(ie_opcao_wl)
into STRICT	ie_opcao_wl_w
from	wl_regra_item
where	nr_sequencia = nr_seq_regra_p;


if (ie_usa_case_w = 'S' and (nr_seq_episodio_p IS NOT NULL AND nr_seq_episodio_p::text <> '') and ie_opcao_wl_w = 'E') then

	ie_existe_inserido_w :=	obter_se_tarefa_por_episodio(nr_seq_episodio_p,
														 cd_categoria_p,
														 ie_tipo_diagnostico_p,
														 nr_seq_classif_diag_p,
														 cd_tipo_evolucao_p,
														 ie_escala_p,
														 nm_tabela_escala_p,
														 ie_classif_diag_p);
								
	if (ie_usa_case_w = 'S' and ie_existe_inserido_w = 'N') then
		ie_inserir_tarefa_w := 'S';
	elsif (ie_usa_case_w = 'N') then
		ie_inserir_tarefa_w := 'S';
	else
		ie_inserir_tarefa_w := 'N';
	end if;
	
elsif (coalesce(nr_seq_episodio_p::text, '') = '' and ie_usa_case_w = 'S' and ie_cons_episodio_p = 'S') then
	select	max(nr_seq_episodio)
	into STRICT	nr_seq_episodio_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_p;

end if;

if (ie_acao_p = 'I' and ie_inserir_tarefa_w = 'S') then

	if (cd_pendencia_exp_p IS NOT NULL AND cd_pendencia_exp_p::text <> '') then
		ds_pendencia_w := obter_expressao_dic_objeto(cd_pendencia_exp_p);
		
		if (cd_funcionario_p IS NOT NULL AND cd_funcionario_p::text <> '') then
			ds_acao_w := obter_expressao_dic_objeto(1061440) || ' ' || obter_nome_pessoa_fisica(cd_funcionario_p, null);
		end if;
	end if;

	for r_C01_w in C01 loop
		begin
		
		select	nextval('wl_worklist_seq')
		into STRICT	nr_seq_worklist_w
		;
		
		insert into wl_worklist(	
			nr_sequencia,
			nr_atendimento,
			cd_pessoa_fisica,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_inicial,
			dt_final_previsto,
			nr_seq_item,
			cd_tipo_evolucao,
			nr_seq_disp_pac,
			nr_seq_document,
			nr_prescricao,
			nr_seq_prescr_proc,
			nr_seq_carta_mae,
			ie_escala,
			nr_parecer,
			nr_seq_diagnostico,
			nr_seq_regra,
			ie_tipo_diagnostico,
			ie_classif_diag,
			nm_tabela_escala,
			nr_seq_episodio,
			cd_profissional,
			ds_pendencia,
			ds_acao_alt,
			nr_seq_laudo,
			nr_seq_prescr_mipres)
		values (	
			nr_seq_worklist_w,
			nr_atendimento_p,
			cd_pessoa_fisica_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			coalesce(dt_inicial_p, clock_timestamp()),
			dt_final_previsto_p,
			r_C01_w.nr_seq_item,
			cd_tipo_evolucao_p,
			nr_seq_disp_pac_p,
			nr_seq_document_p,
			nr_prescricao_p,
			nr_seq_prescr_proc_p,
			nr_seq_carta_mae_p,
			ie_escala_p,
			nr_parecer_p,
			nr_seq_diagnostico_p,
			nr_seq_regra_p,
			ie_tipo_diagnostico_p,
			ie_classif_diag_p,
			nm_tabela_escala_p,
			coalesce(nr_seq_episodio_p, nr_seq_episodio_w),
			cd_profissional_p,
			ds_pendencia_w,
			ds_acao_w,
			nr_seq_laudo_p,
			nr_seq_prescr_mipres_p);
		
		end;
	end loop;
		
elsif (ie_acao_p = 'F') then

	-- Tratar conforme categoria


	-- Clinical notes
	if (cd_categoria_p = 'CN') then
	
		select	count(*)
		into STRICT	qt_register_w
		from	wl_worklist
		where	nr_atendimento = nr_atendimento_p
		and		coalesce(dt_final_real::text, '') = ''
		and		cd_tipo_evolucao = cd_tipo_evolucao_p;
	
		if (qt_register_w = 1) then
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp(),
					cd_evolucao = nr_seq_nota_clinica_p
			where	nr_atendimento = nr_atendimento_p
			and		coalesce(dt_final_real::text, '') = ''
			and		cd_tipo_evolucao = cd_tipo_evolucao_p;
		else

			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp(),
					cd_evolucao = nr_seq_nota_clinica_p
			where	nr_atendimento = nr_atendimento_p
			and		coalesce(dt_final_real::text, '') = ''
			and		cd_tipo_evolucao = cd_tipo_evolucao_p
			and		dt_final_real_p between dt_inicial and dt_final_previsto;
		end if;
		
	-- Tubes and lines
	elsif (cd_categoria_p = 'TL') and (nr_seq_disp_pac_p IS NOT NULL AND nr_seq_disp_pac_p::text <> '') then
	
		update	wl_worklist
		set		dt_final_real = clock_timestamp(),
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	nr_seq_disp_pac = nr_seq_disp_pac_p
		and		coalesce(dt_final_real::text, '') = '';
		
	-- Quality data
	elsif (cd_categoria_p = 'QA') and (nr_seq_document_p IS NOT NULL AND nr_seq_document_p::text <> '') then
	
		update	wl_worklist
		set		dt_final_real 		= clock_timestamp()
		where	nr_atendimento 		= nr_atendimento_p
		and		cd_pessoa_fisica 	= cd_pessoa_fisica_p
		and		nr_seq_document		= nr_seq_document_p
		and		coalesce(dt_final_real::text, '') = '';
		
	-- Non-lab exams (EN) and Lab tests (EX)
	elsif (cd_categoria_p in ('EN','EX')) and (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (nr_seq_prescr_proc_p IS NOT NULL AND nr_seq_prescr_proc_p::text <> '') then
		
		update	wl_worklist
		set		dt_final_real = clock_timestamp(),
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	nr_prescricao = nr_prescricao_p
		and		nr_seq_prescr_proc = nr_seq_prescr_proc_p
		and		coalesce(dt_final_real::text, '') = '';

	elsif (cd_categoria_p = 'MR') then	
	
		update wl_worklist
		set dt_final_real = clock_timestamp(),
			nm_usuario = nm_usuario_p,
			dt_atualizacao = clock_timestamp()
		where coalesce(dt_final_real::text, '') = ''
		and nr_seq_laudo = nr_seq_laudo_p
		and cd_profissional = cd_profissional_p
		and nr_atendimento = nr_atendimento_p
		and cd_pessoa_fisica = cd_pessoa_fisica_p;	
		
	-- Medical letter
	elsif (cd_categoria_p = 'ML') then
		
		select	max(a.ie_tipo_pend_carta)
		into STRICT	ie_tipo_pendencia_w
		from	wl_regra_item a
		where	a.nr_sequencia = nr_seq_regra_p;

                select  max(t.ie_modelo_carta)
                into STRICT    ie_modelo_carta_wl_w
                from    wl_regra_item t
                where   t.nr_sequencia = nr_seq_regra_p;
		
                if (((ie_modelo_carta_p IS NOT NULL AND ie_modelo_carta_p::text <> '') and pkg_i18n.get_user_locale() = 'ja_JP') or (pkg_i18n.get_user_locale() != 'ja_JP') or (coalesce(ie_modelo_carta_wl_w::text, '') = '')) then
                        if ((ie_tipo_pendencia_w = 'A' or ie_tipo_pendencia_w = 'E') AND cd_profissional_p IS NOT NULL AND cd_profissional_p::text <> '') then
                                update	wl_worklist
                                set		dt_final_real = clock_timestamp(),
                                                nm_usuario = nm_usuario_p,
                                                dt_atualizacao = clock_timestamp()
                                where	coalesce(dt_final_real::text, '') = ''
                                and		nr_seq_carta_mae = nr_seq_carta_mae_p
                                and		nr_seq_regra = nr_seq_regra_p
                                and		cd_profissional = cd_profissional_p;

                        elsif (ie_tipo_pendencia_w = 'E' and coalesce(cd_profissional_p::text, '') = '') then
                                update	wl_worklist
                                set		dt_final_real = clock_timestamp(),
                                                nm_usuario = nm_usuario_p,
                                                dt_atualizacao = clock_timestamp()
                                where	coalesce(dt_final_real::text, '') = ''
                                and		nr_seq_carta_mae = nr_seq_carta_mae_p
                                and		nr_seq_regra = nr_seq_regra_p
                                and		coalesce(cd_profissional::text, '') = '';

                        else
                                update	wl_worklist
                                set		dt_final_real = clock_timestamp(),
                                                nm_usuario = nm_usuario_p,
                                                dt_atualizacao = clock_timestamp(),
                                                nr_seq_carta_mae = nr_seq_carta_mae_p
                                where	coalesce(dt_final_real::text, '') = ''
                                and		cd_pessoa_fisica = cd_pessoa_fisica_p
                                and		nr_atendimento = nr_atendimento_p
                                and		nr_seq_regra = nr_seq_regra_p;

                        end if;
                end if;

	-- Scores
	elsif (cd_categoria_p = 'S') and (ie_escala_p IS NOT NULL AND ie_escala_p::text <> '') then
	
		select	count(*)
		into STRICT	qt_register_w
		from	wl_worklist
		where	nr_atendimento = nr_atendimento_p
		and		ie_escala = ie_escala_p
		and		coalesce(dt_final_real::text, '') = '';
	
		if (qt_register_w = 1) then
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp(),
					nr_seq_escala = nr_seq_escala_p
			where	nr_atendimento = nr_atendimento_p
			and		ie_escala = ie_escala_p
			and		coalesce(dt_final_real::text, '') = '';
		else
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp(),
					nr_seq_escala = nr_seq_escala_p
			where	nr_atendimento = nr_atendimento_p
			and		ie_escala = ie_escala_p
			and		coalesce(dt_final_real::text, '') = ''
			and		dt_final_real_p between dt_inicial and dt_final_previsto;
		end if;

	-- Medical opinion
	elsif (cd_categoria_p = 'DL') then
		update	wl_worklist
		set		dt_final_real = clock_timestamp(),
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	nr_parecer = nr_parecer_p
		and		coalesce(dt_final_real::text, '') = '';	
		
	-- Estimated discharge
	elsif (cd_categoria_p = 'ED') then
	
		select	count(*)
		into STRICT	qt_register_w
		from	wl_worklist a,
				wl_item b
		where	a.nr_seq_item = b.nr_sequencia
		and		a.nr_atendimento = nr_atendimento_p
		and		coalesce(a.dt_final_real::text, '') = ''
		and		b.cd_categoria = 'ED';
		
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_regra_w
		from	wl_regra_item a,
				wl_worklist b,
				wl_item c
		where	a.nr_sequencia = b.nr_seq_regra
		and		b.nr_seq_item = c.nr_sequencia
		and		b.nr_atendimento = nr_atendimento_p
		and		coalesce(b.dt_final_real::text, '') = ''
		and		c.cd_categoria = 'ED';
	
		if (qt_register_w = 1) then
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp(),
					nr_seq_prev_alta = nr_seq_prev_alta_p
			where	nr_atendimento = nr_atendimento_p
			and		coalesce(dt_final_real::text, '') = ''
			and		nr_seq_regra = nr_seq_regra_w;
		else
			open C02;
			loop
			fetch C02 into	
				nr_seq_regra_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				
				update	wl_worklist
				set		dt_final_real = clock_timestamp(),
						nm_usuario = nm_usuario_p,
						dt_atualizacao = clock_timestamp(),
						nr_seq_prev_alta = nr_seq_prev_alta_p
				where	nr_atendimento = nr_atendimento_p
				and		coalesce(dt_final_real::text, '') = ''
				and		nr_seq_regra = nr_seq_regra_w
				and		((clock_timestamp() between dt_inicial and dt_final_previsto)
				or		(nr_seq_regra = (SELECT max(nr_sequencia)
										from	wl_regra_item
										where	nr_sequencia = nr_seq_regra_w
										and		ie_opcao_wl = 'A')));
				
				end;
			end loop;
			close C02;
		end if;
	
	-- CPOE
	elsif (cd_categoria_p = 'RA') then

	select	count(*)
		into STRICT	qt_pendente_cpoe_w
		from   	prescr_medica_cpoe_v
		where  	nr_prescricao = nr_prescricao_p
		and	   	coalesce(dt_ciencia_medico::text, '') = ''
		and		((ie_exige_ciencia = 'S' and pkg_i18n.get_user_locale() != 'en_AU') or (ie_ordered_on_behalf = 'S' and pkg_i18n.get_user_locale() = 'en_AU'))
		and		ie_checar_adep = 'S'
		and (nm_tabela = 'PRESCR_MATERIAL'
		or		nm_tabela = 'CPOE_PROCEDIMENTO')
		and   ie_agrupador <> 5;
		
		if (qt_pendente_cpoe_w = 0) then
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp()
			where	nr_atendimento = nr_atendimento_p
			and 	nr_prescricao = nr_prescricao_p
			and		coalesce(nr_seq_prescr_proc::text, '') = ''
			and		coalesce(dt_final_real::text, '') = '';
		end if;
		
	--Special approval
	elsif (cd_categoria_p = 'SA') then
		
		select 	count(a.nr_sequencia)
		into STRICT	qt_pendente_cpoe_w
		from	prescr_procedimento a,
				cpoe_procedimento c
		where	a.nr_seq_proc_cpoe = c.nr_sequencia
		and   	a.nr_prescricao = nr_prescricao_p
		and   	c.si_special_approval = 'RAD'
		and   	coalesce(c.dt_special_approval::text, '') = '';
		
		if (qt_pendente_cpoe_w = 0) then
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp()
			where	nr_atendimento = nr_atendimento_p
			and 	nr_prescricao = nr_prescricao_p
			and		coalesce(nr_seq_prescr_proc::text, '') = ''
			and		coalesce(dt_final_real::text, '') = '';
		end if;
	
	-- Diagnosis
	elsif (cd_categoria_p = 'DG') then
	
		
        select  coalesce(max(b.nr_seq_item), 0)
        into STRICT    nr_seq_worklist_w
        from    wl_item a,
                wl_regra_worklist b
        where 	a.nr_sequencia = b.nr_seq_item
		and		a.cd_categoria = cd_categoria_p;
		if (nr_seq_worklist_w > 0) then
			if (ie_usa_case_w = 'S') then
				update	wl_worklist
				set		dt_final_real = clock_timestamp(),
						nm_usuario = nm_usuario_p,
						dt_atualizacao = clock_timestamp(),
						nr_seq_diagnostico = nr_seq_diagnostico_p
				where	nr_seq_episodio = coalesce(nr_seq_episodio_p,nr_seq_episodio_w)
				and		nr_seq_item = nr_seq_worklist_w
				and (ie_tipo_diagnostico = ie_tipo_diagnostico_p
				or		ie_classif_diag = ie_classif_diag_p)
				and		coalesce(dt_final_real::text, '') = '';
			else
				update	wl_worklist
				set		dt_final_real = clock_timestamp(),
						nm_usuario = nm_usuario_p,
						dt_atualizacao = clock_timestamp(),
						nr_seq_diagnostico = nr_seq_diagnostico_p
				where	nr_atendimento = nr_atendimento_p
				and		nr_seq_item = nr_seq_worklist_w
				and (ie_tipo_diagnostico = ie_tipo_diagnostico_p
				or		ie_classif_diag = ie_classif_diag_p)
				and		coalesce(dt_final_real::text, '') = '';
			end if;
		end if;
		
	-- Workload
	elsif (cd_categoria_p = 'WO') then
	
		select	count(*)
		into STRICT	qt_register_w
		from	wl_worklist a,
				wl_item b
		where	a.nr_seq_item = b.nr_sequencia
		and		a.nr_atendimento = nr_atendimento_p
		and		coalesce(a.dt_final_real::text, '') = ''
		and		b.cd_categoria = 'WO';
		
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_regra_w
		from	wl_regra_item a,
				wl_worklist b,
				wl_item c
		where	a.nr_sequencia = b.nr_seq_regra
		and		b.nr_seq_item = c.nr_sequencia
		and		b.nr_atendimento = nr_atendimento_p
		and		coalesce(b.dt_final_real::text, '') = ''
		and		c.cd_categoria = 'WO';
		
		if (qt_register_w = 1) then
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp(),
					nr_seq_sae = nr_seq_sae_p
			where	((nr_atendimento = nr_atendimento_p and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> ''))
			or (cd_pessoa_fisica = cd_pessoa_fisica_p and coalesce(nr_atendimento_p::text, '') = ''))
			and		coalesce(dt_final_real::text, '') = ''
			and		nr_seq_regra = nr_seq_regra_w;
		else
			open C03;
			loop
			fetch C03 into	
				nr_seq_regra_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				update	wl_worklist
				set		dt_final_real = clock_timestamp(),
						nm_usuario = nm_usuario_p,
						dt_atualizacao = clock_timestamp(),
						nr_seq_sae = nr_seq_sae_p
				where	((nr_atendimento = nr_atendimento_p and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> ''))
				or (cd_pessoa_fisica = cd_pessoa_fisica_p and coalesce(nr_atendimento_p::text, '') = ''))
				and		coalesce(dt_final_real::text, '') = ''
				and		nr_seq_regra = nr_seq_regra_w
				and		((dt_final_real_p between dt_inicial and dt_final_previsto)
				or		(nr_seq_regra = (SELECT max(nr_sequencia)
										 from	wl_regra_item
										 where	nr_sequencia = nr_seq_regra_w
										 and	ie_opcao_wl = 'A')));
				end;
			end loop;
			close C03;
		end if;
		
	-- Hospital Infection
	elsif (cd_categoria_p = 'IH') then
	
        select	count(*)
            into STRICT	qt_register_w
            from	wl_regra_item a,
                	wl_worklist b,
                    wl_item c
            where	a.nr_sequencia = b.nr_seq_regra
            and		b.nr_seq_item = c.nr_sequencia
            and		b.nr_atendimento = nr_atendimento_p
            and		coalesce(b.dt_final_real::text, '') = ''
            and		c.cd_categoria = 'IH';

        select	max(a.nr_sequencia)
		into STRICT	nr_seq_regra_w
		from	wl_regra_item a,
				wl_worklist b,
				wl_item c
		where	a.nr_sequencia = b.nr_seq_regra
		and		b.nr_seq_item = c.nr_sequencia
		and		b.nr_atendimento = nr_atendimento_p
		and		coalesce(b.dt_final_real::text, '') = ''
		and		c.cd_categoria = 'IH';
		
		if (qt_register_w = 1) then
        	update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp(),
					nr_seq_sae = nr_seq_sae_p
			where (nr_atendimento = nr_atendimento_p and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> ''))
			and		coalesce(dt_final_real::text, '') = ''
			and		nr_seq_regra = nr_seq_regra_w;
		else
			open C04;
			loop
			fetch C04 into	
				nr_seq_regra_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin
				update	wl_worklist
				set		dt_final_real = clock_timestamp(),
						nm_usuario = nm_usuario_p,
						dt_atualizacao = clock_timestamp(),
						nr_seq_sae = nr_seq_sae_p
				where	((nr_atendimento = nr_atendimento_p and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> ''))
				or (cd_pessoa_fisica = cd_pessoa_fisica_p and coalesce(nr_atendimento_p::text, '') = ''))
				and		coalesce(dt_final_real::text, '') = ''
				and		nr_seq_regra = nr_seq_regra_w
				and		((dt_final_real_p between dt_inicial and dt_final_previsto)
				or		(nr_seq_regra = (SELECT max(nr_sequencia)
										 from	wl_regra_item
										 where	nr_sequencia = nr_seq_regra_w
										 and	ie_opcao_wl = 'A')));
				end;
			end loop;
			close C04;
		end if;
	-- MIPRES
	elsif (cd_categoria_p = 'PM') then
		update	wl_worklist
		set	dt_final_real = clock_timestamp(),
			nm_usuario = nm_usuario_p,
			dt_atualizacao = clock_timestamp()
		where	nr_atendimento = nr_atendimento_p
		and (nr_prescricao = nr_prescricao_p or (coalesce(nr_prescricao::text, '') = '' and coalesce(nr_prescricao_p::text, '') = ''))
		and 	nr_seq_prescr_mipres = nr_seq_prescr_mipres_p
		and	coalesce(dt_final_real::text, '') = '';
	end if;	

elsif (ie_acao_p = 'R') then

	-- Clinical notes
	if (cd_categoria_p = 'CN') then

		update	wl_worklist
		set		dt_final_real  = NULL,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	nr_atendimento = nr_atendimento_p
		and		(dt_final_real IS NOT NULL AND dt_final_real::text <> '')
		and		cd_evolucao = nr_seq_nota_clinica_p;

	-- Scores
	elsif (cd_categoria_p = 'S') and (ie_escala_p IS NOT NULL AND ie_escala_p::text <> '') then

		update	wl_worklist
		set		dt_final_real  = NULL,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	nr_atendimento = nr_atendimento_p
		and		ie_escala = ie_escala_p
		and		nr_seq_escala = nr_seq_escala_p
		and		(dt_final_real IS NOT NULL AND dt_final_real::text <> '')
		and		nm_tabela_escala = nm_tabela_escala_p;

	-- Medical opinion
	elsif (cd_categoria_p = 'DL') then
		update	wl_worklist
		set		dt_final_real  = NULL,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	nr_parecer = nr_parecer_p
		and		(dt_final_real IS NOT NULL AND dt_final_real::text <> '');	
		
	-- Estimated discharge
	elsif (cd_categoria_p = 'ED') then
	
		update	wl_worklist
		set		dt_final_real  = NULL,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	nr_atendimento = nr_atendimento_p
		and		(dt_final_real IS NOT NULL AND dt_final_real::text <> '')
		and		nr_seq_prev_alta = nr_seq_prev_alta_p;
	
	-- Diagnosis
	elsif (cd_categoria_p = 'DG') then
	
        select  coalesce(max(b.nr_seq_item), 0)
        into STRICT    nr_seq_worklist_w
        from    wl_item a,
                wl_regra_worklist b
        where 	a.nr_sequencia = b.nr_seq_item
		and		a.cd_categoria = cd_categoria_p;
		
		if (nr_seq_worklist_w > 0) then
			
			update	wl_worklist
			set		dt_final_real  = NULL,
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp()
			where	nr_atendimento = nr_atendimento_p
			and		nr_seq_item = nr_seq_worklist_w
			and		nr_seq_diagnostico = nr_seq_diagnostico_p
			and (ie_tipo_diagnostico = ie_tipo_diagnostico_p
			or		ie_classif_diag = ie_classif_diag_p)
			and		(dt_final_real IS NOT NULL AND dt_final_real::text <> '');
		end if;

	-- Workload
	elsif (cd_categoria_p = 'WO') then
	
        select  coalesce(max(b.nr_seq_item), 0)
        into STRICT    nr_seq_worklist_w
        from    wl_item a,   
                wl_regra_worklist b
        where 	a.nr_sequencia = b.nr_seq_item
		and		a.cd_categoria = cd_categoria_p;
	
		update	wl_worklist
		set		dt_final_real  = NULL,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where	((nr_atendimento = nr_atendimento_p and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> ''))
		or (cd_pessoa_fisica = cd_pessoa_fisica_p and coalesce(nr_atendimento_p::text, '') = ''))
		and		nr_seq_item = nr_seq_worklist_w
		and		(dt_final_real IS NOT NULL AND dt_final_real::text <> '')
		and		nr_seq_sae = nr_seq_sae_p;
		
	elsif (cd_categoria_p = 'ML') then
	
		update	wl_worklist
		set		dt_final_real  = NULL,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp(),
				nr_seq_carta_mae  = NULL
		where	(nr_seq_carta_mae IS NOT NULL AND nr_seq_carta_mae::text <> '')
		and		(dt_final_real IS NOT NULL AND dt_final_real::text <> '')
		and		nr_seq_carta_mae = nr_seq_carta_mae_p
		and		nr_atendimento = nr_atendimento_p
		and		nr_seq_regra = nr_seq_regra_p;

	end if;	
end if;

if (coalesce(ie_commit_p,'N') = 'S') and (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE wl_gerar_finalizar_tarefa ( cd_categoria_p text, ie_acao_p text, nr_atendimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, dt_final_previsto_p timestamp, ie_commit_p text default 'S', cd_tipo_evolucao_p text default null, nr_seq_disp_pac_p bigint default null, nr_seq_document_p bigint default null, nr_prescricao_p bigint default null, nr_seq_prescr_proc_p bigint default null, nr_seq_carta_mae_p bigint default null, ie_escala_p text default null, nr_parecer_p bigint default null, nr_seq_diagnostico_p bigint default null, nr_seq_regra_p bigint default null, ie_tipo_diagnostico_p bigint default null, dt_final_real_p timestamp default clock_timestamp(), nr_seq_escala_p bigint default null, nr_seq_nota_clinica_p bigint default null, nr_seq_prev_alta_p bigint default null, nm_tabela_escala_p text default '', nr_seq_classif_diag_p bigint default null, dt_inicial_p timestamp default clock_timestamp(), nr_seq_episodio_p bigint default null, nr_seq_sae_p bigint default null, cd_profissional_p text default null, cd_pendencia_exp_p bigint default null, cd_funcionario_p bigint default null, ie_cons_episodio_p text default 'S', ie_classif_diag_p text default null, nr_seq_laudo_p bigint default null, ie_modelo_carta_p text default null, nr_seq_prescr_mipres_p wl_worklist.nr_seq_prescr_mipres%type default null) FROM PUBLIC;

