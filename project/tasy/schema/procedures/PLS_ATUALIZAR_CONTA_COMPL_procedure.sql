-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_conta_compl ( nr_seq_prestador_p bigint, nr_seq_prestador_fornec_p bigint, nr_seq_conta_p bigint, vl_item_p bigint, qt_item_p bigint, ie_via_acesso_p text, nr_seq_item_p bigint, ie_tipo_item_p text, ie_tipo_acao_p text, nm_usuario_p text, ie_origem_proced_p bigint, cd_estabelecimento_p bigint, dt_atendimento_p text, nr_seq_setor_atend_p bigint, nr_seq_prest_fornec_p bigint, nr_seq_conta_proc_p INOUT bigint, tx_item_p bigint, ds_observacao_p text, dt_inicial_p text, dt_final_p text, ie_tecnica_utilizada_p text, nr_seq_item_tiss_vinc_p bigint) AS $body$
DECLARE

		
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Atualizar a conta no complemento de contas médicas
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ x ] Tasy (Delphi/Java) [ x ] Portal [  ] Relatórios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atenção:  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/		
		
nr_seq_item_w			bigint;	
qt_seq_participacao     	bigint := 0;	
ie_estagio_complemento_w	smallint;
ie_alterado_prestador_w		varchar(1);
ie_situacao_prot_w		varchar(2);
ie_valor_informado_w		varchar(1) := 'N';
nr_seq_conta_w			bigint;
	

BEGIN

if (coalesce(vl_item_p,0) > 0) then
	ie_valor_informado_w := 'S';
end if;

if (ie_tipo_item_p = 'P') then

	
	if (ie_tipo_acao_p = 'I') then
		select	nextval('pls_conta_proc_seq')
		into STRICT	nr_seq_item_w
		;	
		
		insert into pls_conta_proc(	
				nr_sequencia, dt_atualizacao, nm_usuario,
				nr_seq_conta, cd_procedimento, ie_tipo_despesa,
				dt_procedimento, qt_procedimento_imp, ie_estagio_complemento,
				ie_situacao, ie_status, vl_unitario_imp,
				vl_procedimento_imp, ie_origem_proced, ie_via_acesso,
				dt_inicio_proc, ie_alterado_prestador, ie_valor_informado, ds_especif_material,
				tx_item, dt_fim_proc, ie_tecnica_utilizada)
			values (	nr_seq_item_w, clock_timestamp(), nm_usuario_p,
				nr_seq_conta_p, nr_seq_item_p, 1,
				to_date(dt_atendimento_p, 'dd/mm/yyyy hh24:mi:ss'), qt_item_p, 2,
				'I', 'U', dividir(vl_item_p,qt_item_p),
				vl_item_p, ie_origem_proced_p, ie_via_acesso_p,
				to_date(dt_inicial_p ,'hh24:mi:ss'), 'I', ie_valor_informado_w, ds_observacao_p,
				tx_item_p, to_date(dt_final_p ,'hh24:mi:ss'), ie_tecnica_utilizada_p);
		
		-- gera um novo registro de regra
		CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_proc(nr_seq_item_w, nm_usuario_p);
		-- gera um novo sequencial tiss, caso o mesmo nao exista
		CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_proc(nr_seq_item_w, null, null, nr_seq_conta_p, nm_usuario_p);
		-- atualiza o vinculo tiss com o passado por parametro
		CALL pls_cta_proc_mat_regra_pck.atualiza_seq_tiss_vinc_proc(nr_seq_item_w, nr_seq_item_tiss_vinc_p, nm_usuario_p);

				
		commit;	
		
		/* Sestari - o tratamento para consistir a conta vai ser feito no Java */


		--pls_consist_conta_proc_web(nr_seq_conta_p, nr_seq_prestador_p, nm_usuario_p, cd_estabelecimento_p, 'C', ie_situacao_prot_w);
	else
		nr_seq_item_w := nr_seq_item_p;
	
		select	ie_estagio_complemento,
			ie_alterado_prestador,
			nr_seq_conta
		into STRICT	ie_estagio_complemento_w,
			ie_alterado_prestador_w,
			nr_seq_conta_w
		from 	pls_conta_proc
		where   nr_sequencia = nr_seq_item_p;
		
		--pls_desfazer_consistir_conta(nr_seq_conta_w, cd_estabelecimento_p, nm_usuario_p);
		
		if (coalesce(ie_estagio_complemento_w,0) = 0  or coalesce(ie_estagio_complemento_w,0) = 2) then
			ie_estagio_complemento_w := 1;
		end if;
		
		
		if (coalesce(ie_alterado_prestador_w::text, '') = '' and ie_estagio_complemento_w = 3) then
			ie_alterado_prestador_w := 'A';
		elsif (coalesce(ie_alterado_prestador_w::text, '') = '') then
			ie_alterado_prestador_w := 'I';
		elsif (ie_alterado_prestador_w = 'G') then
			ie_alterado_prestador_w := 'A';
		end if;
		
		update 	pls_conta_proc
		set	vl_procedimento_imp 	= vl_item_p,
			qt_procedimento_imp 	= qt_item_p,
			vl_unitario_imp		= dividir(vl_item_p,qt_item_p),
			ie_via_acesso		= ie_via_acesso_p,
			ie_estagio_complemento  = ie_estagio_complemento_w,
			dt_procedimento		= to_date(dt_atendimento_p,'dd/mm/yyyy hh24:mi:ss'),
			dt_inicio_proc		= to_date(dt_inicial_p ,'hh24:mi:ss'),
			dt_fim_proc		= to_date(dt_final_p ,'hh24:mi:ss'),
			ie_alterado_prestador   = ie_alterado_prestador_w,
			ie_valor_informado	= ie_valor_informado_w,
			dt_atualizacao		= clock_timestamp(),
			ds_especif_material	= ds_observacao_p,
			tx_item			= tx_item_p,
			ie_tecnica_utilizada 	= ie_tecnica_utilizada_p
		where	nr_sequencia 		= nr_seq_item_p;
		
	end if;	
	
	if (coalesce(dt_inicial_p::text, '') = '') then
		insert into	pls_conta_log(	nr_sequencia,dt_atualizacao, nm_usuario,
							dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
							nr_seq_conta_proc, nr_seq_conta_mat, nm_usuario_alteracao,
							dt_alteracao, ds_alteracao)
				values (	nextval('pls_conta_log_seq'), clock_timestamp(), nm_usuario_p,
							clock_timestamp(), nm_usuario_p, coalesce(nr_seq_conta_p,nr_seq_conta_w),
							nr_seq_item_w,  null, nm_usuario_p,
							clock_timestamp(), 'Hora nula '||dbms_utility.format_call_stack);
	end if;
elsif (ie_tipo_item_p = 'M') then
	if (ie_tipo_acao_p = 'I') then
		select	nextval('pls_conta_mat_seq')
		into STRICT	nr_seq_item_w
		;
		
		insert into pls_conta_mat(
				nr_sequencia, dt_atualizacao, nm_usuario,
				nr_seq_conta, nr_seq_material, ie_tipo_despesa,
				qt_material_imp, ie_estagio_complemento, ie_situacao,
				ie_status, vl_unitario_imp, vl_material_imp,
				ie_alterado_prestador, nr_seq_prest_fornec, nr_seq_setor_atend, 
				dt_atendimento, ie_valor_informado, ds_especif_material,
				tx_reducao_acrescimo, dt_inicio_atend, dt_fim_atend)
		values (	nr_seq_item_w, clock_timestamp(), nm_usuario_p,
				nr_seq_conta_p, nr_seq_item_p, 2,
				qt_item_p, 2, 'I', 
				'U', dividir(vl_item_p,qt_item_p), vl_item_p,
				'I', nr_seq_prestador_fornec_p, nr_seq_setor_atend_p, 
				to_date(dt_atendimento_p,'dd/mm/yyyy hh24:mi:ss'), ie_valor_informado_w, ds_observacao_p,
				tx_item_p, to_date(dt_inicial_p ,'hh24:mi:ss'), to_date(dt_final_p ,'hh24:mi:ss'));
		
		-- gera um novo registro de regra
		CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_mat(nr_seq_item_w, nm_usuario_p);
		-- gera um novo sequencial tiss, caso o mesmo nao exista
		CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_mat(nr_seq_item_w, null, null, nr_seq_conta_p, nm_usuario_p);
		-- atualiza o vinculo tiss com o passado por parametro
		CALL pls_cta_proc_mat_regra_pck.atualiza_seq_tiss_vinc_mat(nr_seq_item_w, nr_seq_item_tiss_vinc_p, nm_usuario_p);
				
		commit;
		
	else
		nr_seq_item_w := nr_seq_item_p;
		
		select	ie_estagio_complemento,
			ie_alterado_prestador,
			nr_seq_conta
		into STRICT	ie_estagio_complemento_w,
			ie_alterado_prestador_w,
			nr_seq_conta_w
		from 	pls_conta_mat
		where   nr_sequencia = nr_seq_item_p;
		
		if (ie_estagio_complemento_w = 0 or ie_estagio_complemento_w = 2) then
			ie_estagio_complemento_w := 1;
		end if;
		
		if (coalesce(ie_alterado_prestador_w::text, '') = '' and ie_estagio_complemento_w = 3) then
			ie_alterado_prestador_w := 'A';
		elsif (coalesce(ie_alterado_prestador_w::text, '') = '') then
			ie_alterado_prestador_w := 'I';
		elsif (ie_alterado_prestador_w = 'G') then
			ie_alterado_prestador_w := 'A';
		end if;
		
		update 	pls_conta_mat
		set	vl_material_imp 	= vl_item_p,
			qt_material_imp 	= qt_item_p,
			ie_estagio_complemento 	= ie_estagio_complemento_w,
			ie_alterado_prestador  	= ie_alterado_prestador_w,
			nr_seq_setor_atend	= nr_seq_setor_atend_p,
			dt_atendimento     	= to_date(dt_atendimento_p,'dd/mm/yyyy hh24:mi:ss'),
			ie_valor_informado	= ie_valor_informado_w,
			nr_seq_prest_fornec     = nr_seq_prest_fornec_p,
			dt_atualizacao		= clock_timestamp(),
			ds_especif_material	= ds_observacao_p,
			tx_reducao_acrescimo    = tx_item_p,
			dt_inicio_atend	= to_date(dt_inicial_p ,'hh24:mi:ss'),
			dt_fim_atend	= to_date(dt_final_p ,'hh24:mi:ss')
		where	nr_sequencia 		= nr_seq_item_p;
		
	end if;
	if (coalesce(dt_inicial_p::text, '') = '') then
		insert into	pls_conta_log(	nr_sequencia,dt_atualizacao, nm_usuario,
							dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
							nr_seq_conta_proc, nr_seq_conta_mat, nm_usuario_alteracao,
							dt_alteracao, ds_alteracao)
				values (	nextval('pls_conta_log_seq'), clock_timestamp(), nm_usuario_p,
							clock_timestamp(), nm_usuario_p, coalesce(nr_seq_conta_p,nr_seq_conta_w),
							null, nr_seq_item_w, nm_usuario_p,
							clock_timestamp(), 'Hora nula '||dbms_utility.format_call_stack);
	end if;
end if;

nr_seq_conta_proc_p := nr_seq_item_w;

commit;	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_conta_compl ( nr_seq_prestador_p bigint, nr_seq_prestador_fornec_p bigint, nr_seq_conta_p bigint, vl_item_p bigint, qt_item_p bigint, ie_via_acesso_p text, nr_seq_item_p bigint, ie_tipo_item_p text, ie_tipo_acao_p text, nm_usuario_p text, ie_origem_proced_p bigint, cd_estabelecimento_p bigint, dt_atendimento_p text, nr_seq_setor_atend_p bigint, nr_seq_prest_fornec_p bigint, nr_seq_conta_proc_p INOUT bigint, tx_item_p bigint, ds_observacao_p text, dt_inicial_p text, dt_final_p text, ie_tecnica_utilizada_p text, nr_seq_item_tiss_vinc_p bigint) FROM PUBLIC;

