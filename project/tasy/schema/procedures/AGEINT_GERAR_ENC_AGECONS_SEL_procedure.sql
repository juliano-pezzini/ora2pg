-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_gerar_enc_agecons_sel (cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p text, qt_duracao_p bigint, nr_seq_agenda_sel_p bigint, ie_transferir_p text, cd_motivo_p bigint, ds_motivo_p text, nm_usuario_p text, nr_seq_encaixe_p INOUT bigint) AS $body$
DECLARE


dt_encaixe_w			timestamp;
ds_consistencia_w		varchar(255);
cd_turno_w			varchar(1);
nr_seq_classif_w		bigint;
cd_agenda_w			bigint;
ie_status_agenda_w		varchar(3);
cd_pessoa_fisica_w		varchar(10);
nm_paciente_w			varchar(60);
dt_nascimento_pac_w		timestamp;
qt_idade_paciente_w		smallint;
nr_telefone_w			varchar(255);
nm_pessoa_contato_w		varchar(50);
ie_status_paciente_w		varchar(3);
cd_procedencia_w		integer;
cd_convenio_w			integer;
cd_usuario_convenio_w	varchar(30);
cd_categoria_w		varchar(10);
dt_validade_carteira_w	timestamp;
cd_plano_w			varchar(10);
nr_doc_convenio_w		varchar(20);
cd_tipo_acomodacao_w		smallint;
cd_medico_w			varchar(10);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w	bigint;
ie_lado_w			varchar(1);
ie_autorizacao_w		varchar(3);
cd_medico_exec_w		varchar(10);
nr_seq_sala_w			bigint;
ds_cirurgia_w			varchar(500);
ie_anestesia_w		varchar(1);
cd_anestesista_w		varchar(10);
cd_setor_atendimento_w	integer;
ds_observacao_w		varchar(4000);
nr_seq_agenda_w		agenda_consulta.nr_sequencia%type;
nm_usuario_origem_w		varchar(15);
ie_setor_encaixe_selec_w varchar(1);
cd_estabelecimento_w	smallint;
qt_horario_livre_w	bigint;
qt_tentativas_w		bigint	:= 0;
nr_reserva_w			varchar(20);
ie_reserva_transf_w	varchar(1);
cd_estab_origem_w	smallint;
cd_estab_destino_w	smallint;
ie_modo_gerar_reserva_w	varchar(1);
dt_agenda_w		timestamp;
nm_usuario_ant_w	varchar(15);
atrib_oldvalue_w	varchar(50);
atrib_newvalue_w	varchar(50);
ds_motivo_w		varchar(255);
ie_tipo_atendimento_w	smallint;
nr_seq_opm_w			bigint;
cd_doenca_cid_w 	varchar(10);
nr_seq_segurado_w   agenda_consulta.nr_seq_segurado%type;


BEGIN
if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (hr_encaixe_p IS NOT NULL AND hr_encaixe_p::text <> '') and (qt_duracao_p IS NOT NULL AND qt_duracao_p::text <> '') and (nr_seq_agenda_sel_p IS NOT NULL AND nr_seq_agenda_sel_p::text <> '') and (nr_seq_agenda_sel_p > 0) and (ie_transferir_p IS NOT NULL AND ie_transferir_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	/* obter horario agenda x encaixe */

	dt_encaixe_w := to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || hr_encaixe_p || ':00','dd/mm/yyyy hh24:mi:ss');	






	
	select	count(*)
	into STRICT	qt_horario_livre_w
	from	agenda_consulta
	where	cd_agenda	= cd_agenda_p
	and	dt_agenda	= dt_encaixe_w;
				
	while(qt_horario_livre_w > 0 and qt_tentativas_w < 30) loop
		begin
		qt_tentativas_w	:= qt_tentativas_w + 1;
		dt_encaixe_w	:= dt_encaixe_w + 1/1440;
		select	count(*)
		into STRICT	qt_horario_livre_w
		from	agenda_consulta
		where	cd_agenda	= cd_agenda_p
		and	dt_agenda	= dt_encaixe_w;
		end;
	end loop;

	/* obter turno */

	select	obter_turno_horario_agenda(cd_agenda_p, dt_encaixe_w)
	into STRICT	cd_turno_w
	;

	/* obter classificacao */


	/*
	obter_classif_encaixe_agenda(nr_seq_classif_w);
	*/


	/* obter dados selecao */

	select	cd_agenda,
		ie_status_agenda,
		cd_pessoa_fisica,
		nm_paciente,
		dt_nascimento_pac,
		qt_idade_pac,
		nr_telefone,
		nm_pessoa_contato,
		ie_status_paciente,
		cd_procedencia,
		cd_convenio,
		cd_usuario_convenio,
		cd_categoria,
		dt_validade_carteira,
		cd_plano,
		nr_doc_convenio,
		cd_tipo_acomodacao,
		cd_medico_req,
		cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno,
		--ie_lado,
		ie_autorizacao,
		--cd_medico_exec,
		nr_seq_sala,
		ds_confirmacao,
		--ie_anestesia,

		--cd_anestesista,
		cd_setor_atendimento,
		ds_observacao,
		nm_usuario_origem,
		obter_estab_agenda(cd_agenda),
		nr_reserva,
		dt_agenda,
		nm_usuario,
		ie_tipo_atendimento,
		nr_seq_opm,
		cd_cid,
		nr_seq_segurado
	into STRICT	cd_agenda_w,
		ie_status_agenda_w,
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_nascimento_pac_w,
		qt_idade_paciente_w,
		nr_telefone_w,
		nm_pessoa_contato_w,
		ie_status_paciente_w,
		cd_procedencia_w,
		cd_convenio_w,
		cd_usuario_convenio_w,
		cd_categoria_w,
		dt_validade_carteira_w,
		cd_plano_w,
		nr_doc_convenio_w,
		cd_tipo_acomodacao_w,
		cd_medico_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_proc_interno_w,
		--ie_lado_w,
		ie_autorizacao_w,
		--cd_medico_exec_w,
		nr_seq_sala_w,
		ds_cirurgia_w,
		--ie_anestesia_w,

		--cd_anestesista_w,
		cd_setor_atendimento_w,
		ds_observacao_w,
		nm_usuario_origem_w,
		cd_estabelecimento_w,
		nr_reserva_w,
		dt_agenda_w,
		nm_usuario_ant_w,
		ie_tipo_atendimento_w,
		nr_seq_opm_w,
		cd_doenca_cid_w,
		nr_seq_segurado_w
	from	agenda_consulta
	where	nr_sequencia = nr_seq_agenda_sel_p;
	
	select	cd_estabelecimento
	into STRICT	cd_estab_destino_w
	from	agenda
	where	cd_agenda	= cd_agenda_p;
	
	ie_reserva_transf_w	:= 	obter_parametro_agenda(cd_estabelecimento_w, 'IE_RESERVA_TRANSF', 'S');	
	
	ie_modo_gerar_reserva_w	:= obter_valor_param_usuario(869, 102, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
	
	if (ie_reserva_transf_w	<> 'S') then
		nr_reserva_w	:= null;
	end if;
	
	select	obter_parametro_agenda(cd_estabelecimento_w, 'IE_SETOR_ENCAIXE_SELEC', 'S')
	into STRICT	ie_setor_encaixe_selec_w
	;

	/* obter sequencia */

	select	nextval('agenda_consulta_seq')
	into STRICT	nr_seq_agenda_w
	;
	
	if (cd_estabelecimento_w	<> cd_estab_destino_w) then
		if (ie_modo_gerar_reserva_w	= '1') then			
			nr_reserva_w	:= Ageint_Obter_Reserva_Pac(nr_seq_agenda_w, dt_encaixe_w, cd_pessoa_fisica_w, cd_estab_destino_w,'S');
		end if;
	end if;
	
	if (ie_setor_encaixe_selec_w = 'E') and (ie_transferir_p = 'S') then
		cd_setor_atendimento_w	:= null;
	elsif (ie_setor_encaixe_selec_w = 'T') and (ie_transferir_p = 'N') then
		cd_setor_atendimento_w	:= null;
	elsif (ie_setor_encaixe_selec_w = 'N') then
		cd_setor_atendimento_w	:= null;
	end if;

	
	/* gerar encaixe */

	insert into agenda_consulta(
					nr_sequencia,
					cd_agenda,
					dt_agenda,
					--hr_inicio,
					nr_minuto_duracao,
					ie_status_agenda,
					cd_pessoa_fisica,
					nm_paciente,
					dt_nascimento_pac,
					qt_idade_pac,
					nr_telefone,
					nm_pessoa_contato,
					ie_status_paciente,
					cd_procedencia,
					cd_convenio,
					cd_usuario_convenio,
					cd_categoria,
					dt_validade_carteira,
					cd_plano,
					nr_doc_convenio,
					cd_tipo_acomodacao,
					cd_medico_req,
					cd_procedimento,
					ie_origem_proced,
					nr_seq_proc_interno,
					--ie_lado,
					ie_autorizacao,
					--cd_medico_exec,
					nr_seq_sala,
					ds_confirmacao,
					--ie_anestesia,

					--cd_anestesista,
					cd_setor_atendimento,
					ds_observacao,
					--nr_seq_classif_agenda,
					cd_turno,
					dt_agendamento,
					nm_usuario_origem,
					nm_usuario,
					dt_atualizacao,
					--ie_equipamento,
					ie_encaixe,
					nr_reserva,
					ie_tipo_atendimento,
					nr_seq_opm,
					cd_cid,
					nr_seq_segurado
					)
				values (
					nr_seq_agenda_w,
					cd_agenda_p,
					dt_encaixe_w,
					--dt_encaixe_w,
					qt_duracao_p,
					ie_status_agenda_w,
					cd_pessoa_fisica_w,
					nm_paciente_w,
					dt_nascimento_pac_w,
					qt_idade_paciente_w,
					nr_telefone_w,
					nm_pessoa_contato_w,
					ie_status_paciente_w,
					cd_procedencia_w,
					cd_convenio_w,
					cd_usuario_convenio_w,
					cd_categoria_w,
					dt_validade_carteira_w,
					cd_plano_w,
					nr_doc_convenio_w,
					cd_tipo_acomodacao_w,
					cd_medico_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_proc_interno_w,
					--ie_lado_w,
					ie_autorizacao_w,
					--cd_medico_exec_w,
					nr_seq_sala_w,
					ds_cirurgia_w,
					--ie_anestesia_w,

					--cd_anestesista_w,
					cd_setor_atendimento_w,
					ds_observacao_w,
					--nr_seq_classif_w,
					cd_turno_w,
					clock_timestamp(),
					nm_usuario_origem_w,
					nm_usuario_p,
					clock_timestamp(),
					--'N',
					'S',
					nr_reserva_w,
					ie_tipo_atendimento_w,
					nr_seq_opm_w,
					cd_doenca_cid_w,
					nr_seq_segurado_w
					);
					
	atrib_oldvalue_w := substr(obter_nome_agenda_cons(cd_agenda_w),1,50);
	atrib_newvalue_w := substr(obter_nome_agenda_cons(cd_agenda_p),1,50);
	
	select	max(ds_motivo)
	into STRICT	ds_motivo_w
	from	agenda_motivo
	where	nr_sequencia = cd_motivo_p;
		
	CALL gerar_agenda_consulta_hist(cd_agenda_p,nr_seq_agenda_sel_p,'T',nm_usuario_p,wheb_mensagem_pck.get_texto(790890,'atrib_oldvalue_w='||atrib_oldvalue_w||';dt_agenda_orig_w='||to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi:ss')||';atrib_newvalue_w='||atrib_newvalue_w||';dt_agenda_dest_w='||to_char(dt_encaixe_w,'dd/mm/yyyy hh24:mi:ss')) || ' ' || wheb_mensagem_pck.get_texto(790942,'ds_motivo='|| ds_motivo_w || ' ' ||ds_motivo_p), cd_pessoa_fisica_w,nm_paciente_w,dt_encaixe_w);
	CALL gerar_agenda_consulta_hist(cd_agenda_p,nr_seq_agenda_w,'T',nm_usuario_p, wheb_mensagem_pck.get_texto(790890,'atrib_oldvalue_w='||atrib_oldvalue_w||';dt_agenda_orig_w='||to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi:ss')||';atrib_newvalue_w='||atrib_newvalue_w||';dt_agenda_dest_w='||to_char(dt_encaixe_w,'dd/mm/yyyy hh24:mi:ss')) || ' ' || wheb_mensagem_pck.get_texto(790942,'ds_motivo='||ds_motivo_w|| ' ' ||ds_motivo_p),cd_pessoa_fisica_w,nm_paciente_w,dt_encaixe_w);
			
	/* cancelar agendamento anterior */

	if (ie_transferir_p = 'S') then
		update	agenda_consulta
		set	ie_status_agenda		= 'C',
			nm_usuario_status		= nm_usuario_p,
			dt_status			= clock_timestamp(),
			ds_motivo_status		= obter_desc_expressao(618480),
			nm_usuario			= nm_usuario_p
		where	nr_sequencia			= nr_seq_agenda_sel_p;
	end if;
end if;

commit;

nr_seq_encaixe_p := nr_seq_agenda_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_gerar_enc_agecons_sel (cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p text, qt_duracao_p bigint, nr_seq_agenda_sel_p bigint, ie_transferir_p text, cd_motivo_p bigint, ds_motivo_p text, nm_usuario_p text, nr_seq_encaixe_p INOUT bigint) FROM PUBLIC;

