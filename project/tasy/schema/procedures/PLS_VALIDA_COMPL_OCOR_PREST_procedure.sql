-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_valida_compl_ocor_prest ( nm_tabela_p text, nr_seq_regra_p bigint, nr_seq_conta_p bigint, nr_seq_prestador_p bigint, dt_referencia_p timestamp, ie_valido_p INOUT text) AS $body$
DECLARE


cd_prestador_regra_w			varchar(30);
cd_prestador_w				varchar(30);
nr_seq_prestador_exec_imp_w		varchar(20);
nr_seq_prestador_imp_w			varchar(20);
ie_tipo_prestador_regra_w		varchar(10);
ie_prestador_inativo_w			varchar(1);
ie_valido_w				varchar(1)	:= 'S';
ie_espec_medica_w			varchar(1);
ie_situacao_prest_w			varchar(1)	:= 'N';
ie_grupo_prest_w			varchar(1)	:= 'S';
nr_seq_prestador_regra_w		bigint;
nr_seq_grupo_prestador_regra_w		bigint;
nr_seq_tipo_prestador_regra_w		bigint;
nr_seq_classificacao_regra_w		bigint;
nr_seq_prestador_w			bigint;
nr_seq_tipo_prestador_w			bigint;
nr_seq_classificacao_w			bigint;
nr_seq_prestador_exec_w			bigint;
nr_seq_prestador_prot_w			bigint;
nr_seq_prestador_conta_w		bigint;
cd_espec_medica_w			integer;
ie_primeira_vez_w			varchar(1)	:= 'S';

C05 CURSOR FOR
	SELECT	a.nr_seq_prestador,
		a.nr_seq_grupo_prestador,
		a.cd_prestador,
		a.nr_seq_tipo_prestador,
		a.nr_seq_classificacao,
		a.ie_tipo_prestador,
		a.cd_especialidade_medica,
		a.ie_prestador_inativo
	from	pls_ocor_regra_prest a
	where	a.nr_seq_ocor_regra = nr_seq_regra_p
	and	nm_tabela_p = 'PLS_OCORRENCIA_REGRA'
	
union all

	SELECT	a.nr_seq_prestador,
		a.nr_seq_grupo_prestador,
		a.cd_prestador,
		a.nr_seq_tipo_prestador,
		a.nr_seq_classificacao,
		a.ie_tipo_prestador,
		a.cd_especialidade_medica,
		a.ie_prestador_inativo
	from	pls_ocor_regra_prest a
	where	a.nr_seq_ocor_excecao = nr_seq_regra_p
	and	nm_tabela_p = 'PLS_EXCECAO_OCORRENCIA'
	
union all

	select	a.nr_seq_prestador,
		a.nr_seq_grupo_prestador,
		a.cd_prestador,
		a.nr_seq_tipo_prestador,
		a.nr_seq_classificacao,
		a.ie_tipo_prestador,
		a.cd_especialidade_medica,
		a.ie_prestador_inativo
	from	pls_ocor_regra_prest a
	where	a.nr_seq_ocor_regra_web = nr_seq_regra_p
	and	nm_tabela_p = 'PLS_OCORRENCIA_CONTA_WEB'
	
union all

	select	a.nr_seq_prestador,
		a.nr_seq_grupo_prestador,
		a.cd_prestador,
		a.nr_seq_tipo_prestador,
		a.nr_seq_classificacao,
		a.ie_tipo_prestador,
		a.cd_especialidade_medica,
		a.ie_prestador_inativo
	from	pls_ocor_regra_prest a
	where	a.nr_seq_ocor_web_excecao = nr_seq_regra_p
	and	nm_tabela_p = 'PLS_EXCECAO_OCORRENCIA_WEB';


BEGIN
/* Francisco - 28/06/2012 - Validação complementar de prestador */

open C05;
loop
fetch C05 into
	nr_seq_prestador_regra_w,
	nr_seq_grupo_prestador_regra_w,
	cd_prestador_regra_w,
	nr_seq_tipo_prestador_regra_w,
	nr_seq_classificacao_regra_w,
	ie_tipo_prestador_regra_w,
	cd_espec_medica_w,
	ie_prestador_inativo_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin
	if (ie_primeira_vez_w = 'S') then
		select	max(b.nr_seq_prestador_exec),
			max(b.nr_seq_prestador_exec_imp_ref),
			max(b.nr_seq_prestador_imp),
			max(b.nr_seq_prestador),
			max(a.nr_seq_prestador)
		into STRICT	nr_seq_prestador_exec_w,
			nr_seq_prestador_exec_imp_w,
			nr_seq_prestador_imp_w,
			nr_seq_prestador_conta_w,
			nr_seq_prestador_prot_w
		from	pls_protocolo_conta	a,
			pls_conta		b
		where	a.nr_sequencia	= b.nr_seq_protocolo
		and	b.nr_sequencia	= nr_seq_conta_p;

		ie_primeira_vez_w	:= 'N';
	end if;

	if (ie_tipo_prestador_regra_w = 'E') then
		nr_seq_prestador_w	:= nr_seq_prestador_exec_w;

		if (coalesce(nr_seq_prestador_w::text, '') = '') then
			begin
			nr_seq_prestador_w	:= (nr_seq_prestador_exec_imp_w)::numeric;
			exception
			when others then
				nr_seq_prestador_w	:= null;
			end;
		end if;
	elsif (ie_tipo_prestador_regra_w = 'S') then
		nr_seq_prestador_w	:= nr_seq_prestador_prot_w;

		if (coalesce(nr_seq_prestador_w::text, '') = '') then
			begin
			nr_seq_prestador_w	:= (nr_seq_prestador_imp_w)::numeric;
			exception
			when others then
				nr_seq_prestador_w	:= null;
			end;
		end if;
	elsif (ie_tipo_prestador_regra_w = 'L') then
		begin
		nr_seq_prestador_w	:= coalesce(nr_seq_prestador_conta_w, nr_seq_prestador_imp_w);
		exception
		when others then
			nr_seq_prestador_w	:= null;
		end;
	else
		nr_seq_prestador_w	:= nr_seq_prestador_p;
	end if;

	nr_seq_prestador_w	:= coalesce(nr_seq_prestador_w, 0);

	/* Robson da Silva */

	if (cd_espec_medica_w IS NOT NULL AND cd_espec_medica_w::text <> '') then
		ie_espec_medica_w	:= pls_obter_se_espec_prestador(nr_seq_prestador_w, cd_espec_medica_w);

		if (ie_espec_medica_w	= 'N') then
			ie_valido_w	:= 'N';

			exit;
		end if;
	end if;

	/* Se for regra de prestador inativo */

	if (coalesce(ie_prestador_inativo_w,'N') = 'S') then
		if (coalesce(nr_seq_prestador_w,0) > 0) then
			select	coalesce(max('S'),'N')
			into STRICT	ie_situacao_prest_w
			from	pls_prestador
			where	nr_sequencia	= nr_seq_prestador_w
			and	coalesce(dt_referencia_p,clock_timestamp()) between dt_cadastro and coalesce(dt_exclusao, coalesce(dt_referencia_p,clock_timestamp()));

			if (ie_situacao_prest_w = 'S') then
				ie_valido_w	:= 'N';

				exit;
			end if;
		else
			ie_valido_w	:= 'N';

			exit;
		end if;
	end if;

	/* Obter dados do prestador */

	begin
		select	nr_seq_tipo_prestador,
			nr_seq_classificacao,
			cd_prestador
		into STRICT	nr_seq_tipo_prestador_w,
			nr_seq_classificacao_w,
			cd_prestador_w
		from	pls_prestador
		where	nr_sequencia	= nr_seq_prestador_w;
	exception
	when others then
		nr_seq_tipo_prestador_w	:= 0;
	end;

	/* Obter se a regra é para uma classificação do prestador */

	if (coalesce(nr_seq_classificacao_regra_w,0) > 0) then
		if (nr_seq_classificacao_regra_w <> nr_seq_classificacao_w) then
			ie_valido_w	:= 'N';

			exit;
		end if;
	end if;

	/* Obter se a regra é para um prestador especifico */

	if (coalesce(nr_seq_prestador_regra_w,0) > 0) then
		if (nr_seq_prestador_regra_w <> nr_seq_prestador_w) then
			ie_valido_w	:= 'N';

			exit;
		end if;
	end if;

	/* Obter se a regra é para o prestador especificado */

	if (coalesce(cd_prestador_regra_w,0) > 0) then
		if (cd_prestador_regra_w <> cd_prestador_w) then
			ie_valido_w	:= 'N';

			exit;
		end if;
	end if;

	/* Se for uma regra para o tipo do prestador */

	if (coalesce(nr_seq_tipo_prestador_regra_w,0) > 0) then
		/* Se for é verificado se o prestador é do tipo do prestador da regra */

		if (nr_seq_tipo_prestador_regra_w <> nr_seq_tipo_prestador_w) then
			ie_valido_w	:= 'N';

			exit;
		end if;
	end if;

	/* Verificar se o prestador pertence ao grupo dos prestador */

	if (coalesce(nr_seq_grupo_prestador_regra_w,0) > 0) then
		ie_grupo_prest_w	:= pls_se_grupo_preco_prestador(nr_seq_grupo_prestador_regra_w, nr_seq_prestador_w, nr_seq_classificacao_w);

		if (ie_grupo_prest_w = 'N') then
			ie_valido_w	:= 'N';

			exit;
		end if;
	end if;
	end;
end loop;
close C05;

ie_valido_p	:= ie_valido_w;

/* Sem commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_valida_compl_ocor_prest ( nm_tabela_p text, nr_seq_regra_p bigint, nr_seq_conta_p bigint, nr_seq_prestador_p bigint, dt_referencia_p timestamp, ie_valido_p INOUT text) FROM PUBLIC;

