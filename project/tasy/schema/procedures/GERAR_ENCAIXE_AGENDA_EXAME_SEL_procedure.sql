-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_encaixe_agenda_exame_sel ( cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p text, qt_duracao_p bigint, nr_seq_agenda_sel_p bigint, ie_transferir_p text, cd_motivo_p text, ds_motivo_p text, nm_usuario_p text, nr_seq_encaixe_p INOUT bigint) AS $body$
DECLARE


dt_encaixe_w			timestamp;
dt_nascimento_pac_w		timestamp;
dt_validade_carteira_w		timestamp;
dt_agendamento_w		timestamp;
ds_consistencia_w		varchar(255);
cd_turno_w			varchar(1);
ie_status_agenda_w		varchar(3);
cd_pessoa_fisica_w		varchar(10);
nm_paciente_w			varchar(60);
nr_telefone_w			varchar(255);
nm_pessoa_contato_w		varchar(50);
cd_usuario_convenio_w		varchar(30);
cd_categoria_w			varchar(10);
cd_plano_w			varchar(10);
nr_doc_convenio_w		varchar(20);
cd_medico_w			varchar(10);
ie_lado_w			varchar(1);
ie_autorizacao_w		varchar(3);
cd_medico_exec_w		varchar(10);
ds_cirurgia_w			varchar(500);
ie_anestesia_w			varchar(1);
cd_anestesista_w		varchar(10);
ds_observacao_w			varchar(4000);
nm_usuario_orig_w		varchar(15);
ie_manter_usuario_w		varchar(1);
ie_manter_atend_w		varchar(1);
ie_manter_cirurgia_w		varchar(1);
ie_setor_encaixe_selec_w	varchar(1);
ie_manut_proced_w		varchar(1);
VarGerarReqTransf		varchar(1);
ie_cancel_agend_orig_w		varchar(1);
ie_carater_cirurgia_w		varchar(15);
ds_senha_w			varchar(20);
ie_prescr_vinc_cirurgia_w	varchar(15);
ds_arquivo_w 			varchar(255);
ds_obs_anexo_w 			varchar(4000);
ie_situacao_w 			varchar(1);
ie_transf_exec_w		varchar(1);
cd_unidade_externa_w		varchar(60);
nr_seq_classif_w		bigint;
cd_agenda_w			bigint;
qt_idade_paciente_w		smallint;
cd_procedencia_w		integer;
cd_convenio_w			integer;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w		bigint;
nr_seq_agenda_proc_w		agenda_paciente_proc.nr_seq_agenda%type;
nr_seq_sala_w			bigint;
nr_seq_agenda_w			agenda_paciente.nr_sequencia%type;
nr_atendimento_w		bigint;
nr_cirurgia_w			bigint;
qt_peso_w			real;
qt_altura_cm_w			real;
nr_prescricao_w			bigint;
nr_prescricao_nova_w		bigint;
cd_setor_atendimento_w	 	integer;
cd_local_estoque_anter_w 	integer;
cd_local_estoque_atual_w	integer;
cd_tipo_agenda_w		bigint;
nr_seq_anexo_w 			bigint;
nr_seq_status_w			bigint;
nr_seq_caixa_opme_w		bigint;
nr_sequencia_caixa_opme_w	bigint;
ds_email_w			varchar(255);
ie_forma_agendamento_w		agenda_paciente.ie_forma_agendamento%type;
nr_seq_indicacao_w		agenda_paciente.nr_seq_indicacao%type;
cd_tipo_acomodacao_w		agenda_paciente.cd_tipo_acomodacao%type;
cd_tipo_anestesia_w			agenda_paciente.cd_tipo_anestesia%type;
cd_medico_req_w				agenda_paciente.cd_medico_req%type;
ie_historico_trans_w		parametro_agenda.ie_historico_transf%type;
ie_reserva_leito_w			agenda_paciente.ie_reserva_leito%type;
ie_tipo_atendimento_w		agenda_paciente.ie_tipo_atendimento%type;
nr_seq_tipo_classif_pac_w	agenda_paciente.nr_seq_tipo_classif_pac%type;
qt_historico_w			bigint;
nr_seq_pepo_w			agenda_paciente.nr_seq_pepo%type;
qt_integrada_w			bigint;
qt_autor_evento_w			bigint;
qt_autorizacoes_w			bigint;
cd_setor_atendimento_ww	setor_atendimento.cd_setor_atendimento%type;
cd_setor_prescr_w			setor_atendimento.cd_setor_atendimento%type;
nr_prescricao_esp_w		prescr_medica.nr_prescricao%type;
ds_mensagem_w			varchar(4000);
hr_inicio_origem_w	timestamp;
agenda_destino_w 	varchar(50);
agenda_origem_w		varchar(50);
expressao1_w	 	varchar(255) := obter_desc_expressao_idioma(318397, null, wheb_usuario_pck.get_nr_seq_idioma);--Gerar encaixe selecao transferencia
expressao2_w	 	varchar(255) := obter_desc_expressao_idioma(310214, null, wheb_usuario_pck.get_nr_seq_idioma);--de
expressao3_w	 	varchar(255) := obter_desc_expressao_idioma(727816, null, wheb_usuario_pck.get_nr_seq_idioma);--para
expressao4_w	 	varchar(255) := obter_desc_expressao_idioma(289197, null, wheb_usuario_pck.get_nr_seq_idioma);--origem
expressao5_w	 	varchar(255) := obter_desc_expressao_idioma(343783, null, wheb_usuario_pck.get_nr_seq_idioma);--duracao:
ie_manter_classificacao_w	varchar(1);
nr_seq_segurado_w   agenda_paciente.nr_seq_segurado%type;
ie_cons_sobrep_hor_enc_w	varchar(1);

/* cursores */


/* obter procedimentos adicionais */

c01 CURSOR FOR
SELECT		cd_procedimento,
			ie_origem_proced,
			nr_seq_proc_interno,
			nr_seq_agenda
FROM		agenda_paciente_proc
WHERE		nr_sequencia = nr_seq_agenda_sel_p
AND			ie_manut_proced_w = 'S'
ORDER BY	nr_seq_agenda;

/* obter anexos do agendamento */

C02 CURSOR FOR
SELECT	nr_sequencia,
		ds_arquivo,
		nr_seq_status, 
		ds_observacao, 
		ie_situacao
from 	anexo_agenda
where	nr_seq_agenda = nr_seq_agenda_sel_p;

/* obter caixas OPME */

c03 CURSOR(nr_seq_agenda_p	agenda_paciente.nr_sequencia%type) FOR
SELECT	nr_sequencia,
		nr_seq_tipo_caixa_opme,
		ie_origem_inf,
		nr_seq_apres,
		ie_padrao,
		ds_observacao,
		ie_autorizado
from	agenda_pac_caixa_opme
where	nr_seq_agenda	= nr_seq_agenda_p;

BEGIN

ie_cons_sobrep_hor_enc_w := obter_param_usuario(820, 417, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_cons_sobrep_hor_enc_w);

IF (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') AND (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') AND (hr_encaixe_p IS NOT NULL AND hr_encaixe_p::text <> '') AND (qt_duracao_p IS NOT NULL AND qt_duracao_p::text <> '') AND (nr_seq_agenda_sel_p IS NOT NULL AND nr_seq_agenda_sel_p::text <> '') AND (nr_seq_agenda_sel_p > 0) AND (ie_transferir_p IS NOT NULL AND ie_transferir_p::text <> '') AND (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') THEN
	/* obter horario agenda x encaixe */

	cd_tipo_agenda_w := obter_tipo_agenda(cd_agenda_p);
	dt_encaixe_w := TO_DATE(TO_CHAR(dt_agenda_p, 'dd/mm/yyyy') || ' ' || hr_encaixe_p || ':00', 'dd/mm/yyyy hh24:mi:ss');

	/* consistir horario */

	if (ie_cons_sobrep_hor_enc_w = 'S')then
		ds_consistencia_w := consistir_horario_agenda_exame(cd_agenda_p, dt_encaixe_w, qt_duracao_p, 'E', ds_consistencia_w);
	
		IF (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') THEN
			CALL wheb_mensagem_pck.exibir_mensagem_abort(186272, 'PROC_ERRO=' ||ds_consistencia_w || '#@#@');
		END IF;
	end if;
	
	/* obter turno */

	SELECT	obter_turno_horario_agenda(cd_agenda_p, dt_encaixe_w)
	INTO STRICT	cd_turno_w
	;

	ie_manter_classificacao_w := obter_param_usuario(871, 834, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_manter_classificacao_w);
	
	/* obter classificacao */

	if (cd_tipo_agenda_w = 1)
	and (coalesce(ie_manter_classificacao_w, 'N') = 'S')
	and (coalesce(ie_transferir_p, 'N') = 'S') then	
		select	max(nr_seq_classif_agenda) 
		into STRICT	nr_seq_classif_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_sel_p;
	else
		nr_seq_classif_w := obter_classif_encaixe_agenda(nr_seq_classif_w);
	end if;

  if (agenda_classif_liberada(obter_usuario_ativo(), obter_perfil_ativo(), nr_seq_classif_w, null, 'E') = 'N') then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(1142534);
  end if;

	/*obter parametro manter usuario*/

	SELECT	MAX(ie_usuario_orig_transf)
	INTO STRICT	ie_manter_usuario_w
	FROM	parametro_agenda
	WHERE	cd_estabelecimento = cd_estabelecimento_p;

	ie_manter_atend_w := obter_param_usuario(871, 204, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_manter_atend_w);
	ie_manter_cirurgia_w := obter_param_usuario(871, 205, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_manter_cirurgia_w);
	ie_manut_proced_w := obter_param_usuario(820, 150, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_manut_proced_w);
	VarGerarReqTransf := Obter_Param_Usuario(871, 666, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, VarGerarReqTransf);
	ie_cancel_agend_orig_w := obter_param_usuario(820, 78, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_cancel_agend_orig_w);
	ie_transf_exec_w := Obter_Param_Usuario(820, 72, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_transf_exec_w);

	SELECT	obter_parametro_agenda(cd_estabelecimento_p, 'IE_SETOR_ENCAIXE_SELEC', 'S')
	INTO STRICT	ie_setor_encaixe_selec_w
	;
	
	ie_historico_trans_w		:= obter_parametro_agenda(cd_estabelecimento_p, 'IE_HISTORICO_TRANSF', 'N');

	/* obter dados selecao */

	SELECT	cd_agenda,
		ie_status_agenda,
		cd_pessoa_fisica,
		nm_paciente,
		dt_nascimento_pac,
		qt_idade_paciente,
		nr_telefone,
		nm_pessoa_contato,
		cd_procedencia,
		cd_convenio,
		cd_usuario_convenio,
		cd_categoria,
		dt_validade_carteira,
		cd_plano,
		nr_doc_convenio,
		cd_medico,
		cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno,
		ie_lado,
		ie_autorizacao,
		cd_medico_exec,
		nr_seq_sala,
		ds_cirurgia,
		ie_anestesia,
		cd_anestesista,
		ds_observacao,
		nm_usuario_orig,
		dt_agendamento,
		nr_atendimento,
		nr_cirurgia,
		qt_peso,
		qt_altura_cm,
		cd_setor_atendimento,
		ie_carater_cirurgia,
		ds_senha,
		cd_unidade_externa,
		ds_email,
		ie_forma_agendamento,
		nr_seq_indicacao,
		cd_tipo_acomodacao,
		cd_tipo_anestesia,
		cd_medico_req,
		ie_reserva_leito,
		ie_tipo_atendimento,
		nr_seq_tipo_classif_pac,
		hr_inicio,
		nr_seq_segurado
	INTO STRICT	cd_agenda_w,
		ie_status_agenda_w,
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_nascimento_pac_w,
		qt_idade_paciente_w,
		nr_telefone_w,
		nm_pessoa_contato_w,
		cd_procedencia_w,
		cd_convenio_w,
		cd_usuario_convenio_w,
		cd_categoria_w,
		dt_validade_carteira_w,
		cd_plano_w,
		nr_doc_convenio_w,
		cd_medico_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_proc_interno_w,
		ie_lado_w,
		ie_autorizacao_w,
		cd_medico_exec_w,
		nr_seq_sala_w,
		ds_cirurgia_w,
		ie_anestesia_w,
		cd_anestesista_w,
		ds_observacao_w,
		nm_usuario_orig_w,
		dt_agendamento_w,
		nr_atendimento_w,
		nr_cirurgia_w,
		qt_peso_w,
		qt_altura_cm_w,
		cd_setor_atendimento_w,
		ie_carater_cirurgia_w,
		ds_senha_w,
		cd_unidade_externa_w,
		ds_email_w,
		ie_forma_agendamento_w,
		nr_seq_indicacao_w,
		cd_tipo_acomodacao_w,
		cd_tipo_anestesia_w,
		cd_medico_req_w,
		ie_reserva_leito_w,		
		ie_tipo_atendimento_w,	
		nr_seq_tipo_classif_pac_w,
		hr_inicio_origem_w,
		nr_seq_segurado_w
	FROM	agenda_paciente
	WHERE	nr_sequencia = nr_seq_agenda_sel_p;
	
	/*obter dados do fanep*/

	select	max(nr_seq_pepo)
	into STRICT	nr_seq_pepo_w
	from	agenda_paciente
	where	nr_sequencia = nr_seq_agenda_sel_p
	and		obter_tipo_agenda(cd_agenda_p) = 2;
	
	if (ie_transferir_p = 'S') and (ie_status_agenda_w = 'E') and (ie_transf_exec_w = 'N') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265715);
	end if;

	SELECT 	MAX(obter_local_estoque_setor(b.cd_setor_exclusivo, cd_estabelecimento_p))
	INTO STRICT	cd_local_estoque_anter_w
	FROM	agenda b,
			agenda_paciente a
	WHERE 	a.cd_agenda = b.cd_agenda
	AND		a.nr_sequencia = nr_seq_agenda_sel_p;

	SELECT 	MAX(obter_local_estoque_setor(a.cd_setor_exclusivo, cd_estabelecimento_p))
	INTO STRICT	cd_local_estoque_atual_w
	FROM	agenda a
	WHERE 	a.cd_agenda = cd_agenda_p;

	/* obter sequencia */

	SELECT	nextval('agenda_paciente_seq')
	INTO STRICT	nr_seq_agenda_w
	;

	IF (ie_manter_atend_w	= 'N') THEN
		nr_atendimento_w	:= NULL;
	END IF;

	IF (ie_manter_cirurgia_w	= 'N') THEN
		nr_cirurgia_w	:= NULL;
	END IF;

	IF (ie_setor_encaixe_selec_w = 'E') AND (ie_transferir_p = 'S') THEN
		cd_setor_atendimento_w	:= NULL;
	ELSIF (ie_setor_encaixe_selec_w = 'T') AND (ie_transferir_p = 'N') THEN
		cd_setor_atendimento_w	:= NULL;
	ELSIF (ie_setor_encaixe_selec_w = 'N') THEN
		cd_setor_atendimento_w	:= NULL;
	END IF;

	/* gerar encaixe */

	IF (ie_manut_proced_w = 'N') AND (ie_transferir_p = 'N') THEN
		cd_procedimento_w	:= NULL;
		ie_origem_proced_w	:= NULL;
		nr_seq_proc_interno_w	:= NULL;
	END IF;
	
	ds_mensagem_w := obter_msg_bloq_geral_agenda_js(cd_estabelecimento_p,
			cd_agenda_p,
			nr_seq_agenda_sel_p,
			null,
			dt_encaixe_w,
			'N',
			'N',
			nr_seq_proc_interno_w,
			cd_procedimento_w,
			ie_origem_proced_w);
	if (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(ds_mensagem_w);
	end if;

	INSERT INTO agenda_paciente(
				nr_sequencia,
				cd_agenda,
				dt_agenda,
				hr_inicio,
				nr_minuto_duracao,
				ie_status_agenda,
				cd_pessoa_fisica,
				nm_paciente,
				dt_nascimento_pac,
				qt_idade_paciente,
				nr_telefone,
				nm_pessoa_contato,
				cd_procedencia,
				cd_convenio,
				cd_usuario_convenio,
				cd_categoria,
				dt_validade_carteira,
				cd_plano,
				nr_doc_convenio,
				cd_medico,
				cd_procedimento,
				ie_origem_proced,
				nr_seq_proc_interno,
				ie_lado,
				ie_autorizacao,
				cd_medico_exec,
				nr_seq_sala,
				ds_cirurgia,
				ie_anestesia,
				cd_anestesista,
				ds_observacao,
				nr_seq_classif_agenda,
				cd_turno,
				dt_agendamento,
				nm_usuario_orig,
				nm_usuario,
				dt_atualizacao,
				ie_equipamento,
				ie_encaixe,
				nr_atendimento,
				nr_cirurgia,
				qt_peso,
				qt_altura_cm,
				cd_setor_atendimento,
				cd_perfil_ger_encaixe,
				ie_carater_cirurgia,
				ds_senha,
				cd_unidade_externa,
				ds_email,
				ie_forma_agendamento,
				nr_seq_indicacao,
				cd_tipo_acomodacao,
				nr_seq_pepo,
				cd_tipo_anestesia,
				cd_medico_req,
				ie_reserva_leito,		
				ie_tipo_atendimento,	
				nr_seq_tipo_classif_pac,
				nr_seq_segurado)
	VALUES (
				nr_seq_agenda_w,
				cd_agenda_p,
				TRUNC(dt_encaixe_w,'dd'),
				dt_encaixe_w,
				qt_duracao_p,
				ie_status_agenda_w,
				cd_pessoa_fisica_w,
				nm_paciente_w,
				dt_nascimento_pac_w,
				qt_idade_paciente_w,
				nr_telefone_w,
				nm_pessoa_contato_w,
				cd_procedencia_w,
				cd_convenio_w,
				cd_usuario_convenio_w,
				cd_categoria_w,
				dt_validade_carteira_w,
				cd_plano_w,
				nr_doc_convenio_w,
				cd_medico_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				nr_seq_proc_interno_w,
				ie_lado_w,
				ie_autorizacao_w,
				cd_medico_exec_w,
				nr_seq_sala_w,
				ds_cirurgia_w,
				ie_anestesia_w,
				cd_anestesista_w,
				ds_observacao_w,
				nr_seq_classif_w,
				cd_turno_w,
				CASE WHEN ie_manter_usuario_w='S' THEN  dt_agendamento_w  ELSE clock_timestamp() END ,
				CASE WHEN ie_manter_usuario_w='S' THEN  nm_usuario_orig_w  ELSE nm_usuario_p END ,
				nm_usuario_p,
				clock_timestamp(),
				'N',
				'S',
				nr_atendimento_w,
				nr_cirurgia_w,
				qt_peso_w,
				qt_altura_cm_w,
				cd_setor_atendimento_w,
				obter_perfil_ativo,
				ie_carater_cirurgia_w,
				ds_senha_w,
				CASE WHEN ie_transferir_p='S' THEN cd_unidade_externa_w  ELSE null END ,
				ds_email_w,
				ie_forma_agendamento_w,
				nr_seq_indicacao_w,
				cd_tipo_acomodacao_w,
				CASE WHEN ie_transferir_p='S' THEN  nr_seq_pepo_w  ELSE null END ,
				cd_tipo_anestesia_w,
				cd_medico_req_w,
				ie_reserva_leito_w,		
				ie_tipo_atendimento_w,	
				nr_seq_tipo_classif_pac_w,
				nr_seq_segurado_w);
	COMMIT;
	
	if (cd_tipo_agenda_w	= 1) then
		agenda_origem_w := substr(obter_nome_agenda(cd_agenda_w),1,50);
		agenda_destino_w:= substr(obter_nome_agenda(cd_agenda_p),1,50);	
		ds_mensagem_w   := substr('(' || expressao1_w || ') ' || expressao2_w || ' ' || agenda_origem_w || ' ' 		
						|| pkg_date_formaters.to_varchar(hr_inicio_origem_w, 'short', cd_estabelecimento_p, nm_usuario_p)
						|| ' ' || expressao3_w || ' ' || agenda_destino_w || ' ' 		
						|| pkg_date_formaters.to_varchar(dt_encaixe_w, 'short', cd_estabelecimento_p, nm_usuario_p)
						|| ' - ' || expressao5_w || ' ' || qt_duracao_p, 1, 2000);
	
		CALL gerar_agenda_paciente_hist(	cd_agenda_p,
									nr_seq_agenda_sel_p,
									'T',
									nm_usuario_p,
									ds_mensagem_w,
									cd_pessoa_fisica_w,
									nm_paciente_w,
									dt_encaixe_w,
									obter_perfil_ativo,
									null,
									ds_motivo_p,
									hr_inicio_origem_w);
	end if;
				
	if (ie_transferir_p = 'S' and (nr_seq_pepo_w IS NOT NULL AND nr_seq_pepo_w::text <> ''))  then
	
		update	pepo_cirurgia
		set	dt_cirurgia 			= dt_encaixe_w
		where	nr_sequencia 			= nr_seq_pepo_w;
	end if;
	
	if (ie_transferir_p = 'S') and (ie_historico_trans_w = 'S') then
		
		select	count(*)
		into STRICT	qt_historico_w
		from	agenda_pac_hist
		where	nr_seq_agenda	= nr_seq_agenda_sel_p;
		
		if (qt_historico_w > 0) then
			update	agenda_pac_hist
			set	nr_seq_agenda	=	nr_seq_agenda_w,
				nm_usuario	=	nm_usuario_p,
				dt_atualizacao	=	clock_timestamp()
			where	nr_seq_agenda	=	nr_seq_agenda_sel_p;	
		end if;		
	end if;

	/* Transferir prescricao vinculada ao agendamento */

	IF (cd_tipo_agenda_w = 1) THEN
		SELECT	MAX(nr_prescricao)
		INTO STRICT	nr_prescricao_w
		FROM	prescr_medica
		WHERE	nr_seq_agenda = nr_seq_agenda_sel_p
		and		coalesce(ie_tipo_prescr_cirur::text, '') = '';
		
		SELECT	coalesce(MAX(nr_prescricao),0)
		INTO STRICT	nr_prescricao_esp_w
		FROM	prescr_medica
		WHERE	nr_seq_agenda 			= nr_seq_agenda_sel_p
		and	ie_tipo_prescr_cirur = 1;
	else
		SELECT	MAX(nr_prescricao)
		INTO STRICT	nr_prescricao_w
		FROM	prescr_medica
		WHERE	nr_seq_agenda = nr_seq_agenda_sel_p;
	end if;	


	IF (nr_prescricao_w > 0) THEN
		IF (cd_tipo_agenda_w = 1) THEN

			-- Verificar OS 599112 - A mesma explica a situacao.

			--Ajustado por causa ocorrer casos de erros onde se tentava vincular um mesmo numero da prescricao em duas cirurgias distintas.

			-- Ao terar gerar a cirurgia, o sistema ocorria erro de UK.

			-- Prescricao na tabela cirurgia e 1 para 1.
			SELECT	coalesce(MAX('S'),'N')
			INTO STRICT	ie_prescr_vinc_cirurgia_w
			FROM	cirurgia
			WHERE	nr_prescricao = nr_prescricao_w;
			
			IF (ie_prescr_vinc_cirurgia_w = 'N') THEN
				UPDATE	prescr_medica
				SET		nr_seq_agenda	=	nr_seq_agenda_w
				WHERE	nr_prescricao	=	nr_prescricao_w;
			ELSE
				nr_prescricao_nova_w := Gerar_Prescricao_Agenda(nr_seq_agenda_w, nm_usuario_p, nr_prescricao_nova_w, cd_estabelecimento_p);
				
				IF (nr_prescricao_nova_w > 0) THEN
					UPDATE	prescr_material
					SET		nr_prescricao = nr_prescricao_nova_w
					WHERE	nr_prescricao = nr_prescricao_w;

					UPDATE	prescr_procedimento
					SET		nr_prescricao = nr_prescricao_nova_w
					WHERE	nr_prescricao = nr_prescricao_w;
				END IF;
			END IF;
		ELSE
			UPDATE	prescr_medica
			SET		nr_seq_agenda	=	nr_seq_agenda_w
			WHERE	nr_prescricao	=	nr_prescricao_w;
		END IF;
	END IF;
	
	if (nr_prescricao_esp_w > 0) then
		cd_setor_atendimento_ww := obter_param_usuario(900, 548, Obter_Perfil_ativo, nm_usuario_p, cd_estabelecimento_p, cd_setor_atendimento_ww);
		select	coalesce(max(cd_setor_exclusivo),0)
		into STRICT		cd_setor_prescr_w
		from		Agenda b,
					agenda_paciente a
		where 	a.cd_agenda		= b.cd_agenda
		and		a.nr_sequencia	= nr_seq_agenda_w;

		if (cd_setor_prescr_w = 0) then
			select	max(cd_setor_atendimento)
			into STRICT		cd_setor_prescr_w
			from 		usuario
			where 	nm_usuario = nm_usuario_p;
		end if;
		
		update	prescr_medica
		set		nr_seq_agenda 			= 	nr_seq_agenda_w,
					cd_setor_entrega		=	cd_setor_prescr_w,
					cd_setor_atendimento	=	coalesce(cd_setor_atendimento_ww,cd_setor_prescr_w),
					nr_cirurgia				=	nr_cirurgia_w,
					nr_atendimento			=	nr_atendimento_w
		WHERE		nr_prescricao 			= 	nr_prescricao_esp_w;
	end if;	
	

	/* gerar procedimentos adicionais */

	OPEN c01;
	LOOP
	FETCH c01 INTO	cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_proc_interno_w,
					nr_seq_agenda_proc_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN
		
		INSERT INTO agenda_paciente_proc(
					nr_sequencia,
					nr_seq_agenda,
					cd_procedimento,
					ie_origem_proced,
					nr_seq_proc_interno,
					dt_atualizacao,
					nm_usuario)
		VALUES (
					nr_seq_agenda_w,
					nr_seq_agenda_proc_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_proc_interno_w,
					clock_timestamp(),
					nm_usuario_p);
		END;
	END LOOP;
	CLOSE c01;

	/* Informacoes adicionais */

	insert into agenda_paciente_inf_adic(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_agenda,
				cd_convenio,
				ds_nutricao,
				qt_peso,
				vl_procedimento,
				ie_responsavel_conta,
				ie_repasse_honorarios,
				ds_informacoes_internacao)
	SELECT		nextval('agenda_paciente_inf_adic_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_agenda_w,
				cd_convenio,
				ds_nutricao,
				qt_peso,
				vl_procedimento,
				ie_responsavel_conta,
				ie_repasse_honorarios,
				ds_informacoes_internacao
	from		agenda_paciente_inf_adic
	where		nr_seq_agenda	=	nr_seq_agenda_sel_p;
	
	/* Profissionais */

	insert into profissional_agenda(
				nr_sequencia,
				cd_profissional,
				cd_funcao,
				nr_seq_agenda,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_indicacao,
				nr_seq_equipe,
				cd_especialidade)
	SELECT		nextval('profissional_agenda_seq'),
				cd_profissional,
				cd_funcao,
				nr_seq_agenda_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				ie_indicacao,
				nr_seq_equipe,
				cd_especialidade
	from		profissional_agenda
	where		nr_seq_agenda	=	nr_seq_agenda_sel_p;

	/* Equipamentos */

	insert into agenda_pac_equip(
				nr_sequencia,
				nr_seq_agenda,
				dt_atualizacao,
				nm_usuario,
				cd_equipamento,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_classif_equip,
				ie_origem_inf,
				nr_seq_proc_interno,
				ie_obrigatorio,
				ie_status_equipamento,
				ds_observacao)
	SELECT		nextval('agenda_pac_equip_seq'),
				nr_seq_agenda_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_equipamento,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_classif_equip,
				ie_origem_inf,
				nr_seq_proc_interno,
				ie_obrigatorio,
				ie_status_equipamento,
				ds_observacao
	from		agenda_pac_equip
	where		nr_seq_agenda	=	nr_seq_agenda_sel_p;

	/* CME */

	insert into agenda_pac_cme(
				nr_sequencia,
				nr_seq_agenda,
				dt_atualizacao,
				nm_usuario,
				nr_seq_conjunto,
				qt_conjunto,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_origem_inf,
				ie_obrigatorio,
				nr_seq_proc_interno,
				nr_seq_grupo,
				ds_observacao,
				ie_status_cme,
				nr_seq_classificacao)
	SELECT		nextval('agenda_pac_cme_seq'),
				nr_seq_agenda_w,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_conjunto,
				qt_conjunto,
				clock_timestamp(),
				nm_usuario_p,
				ie_origem_inf,
				ie_obrigatorio,
				nr_seq_proc_interno,
				nr_seq_grupo,
				ds_observacao,
				ie_status_cme,
				nr_seq_classificacao
	from		agenda_pac_cme
	where		nr_seq_agenda	=	nr_seq_agenda_sel_p;
	
	/* OPME */

	INSERT INTO agenda_pac_opme(
				nr_sequencia,
				nr_seq_agenda,
				dt_atualizacao,
				nm_usuario,
				cd_material,
				qt_material,
				ie_origem_inf,
				nr_seq_apres,
				ie_padrao,
				ds_observacao,
				ie_autorizado,
				nr_seq_motivo_exclusao,
				nm_usuario_exclusao,
				dt_exclusao,
				cd_cgc,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_proc_interno,
				ie_integracao,
				vl_unitario_item,
				vl_desconto,
				cd_cond_pagto,
				ie_integracao_util,
				ie_gerar_autor)
	SELECT		nextval('agenda_pac_opme_seq'),
				nr_seq_agenda_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_material,
				qt_material,
				ie_origem_inf,
				nr_seq_apres,
				ie_padrao,
				ds_observacao,
				ie_autorizado,
				nr_seq_motivo_exclusao,
				nm_usuario_exclusao,
				dt_exclusao,
				cd_cgc,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_proc_interno,
				ie_integracao,
				vl_unitario_item,
				vl_desconto,
				cd_cond_pagto,
				ie_integracao_util,
				ie_gerar_autor
	FROM		agenda_pac_opme
	WHERE		nr_seq_agenda	=	nr_seq_agenda_sel_p;

	/* Inicio Caixa OPME */

	for r_c03 in c03(nr_seq_agenda_sel_p) loop
		select	nextval('agenda_pac_caixa_opme_seq')
		into STRICT	nr_seq_caixa_opme_w
		;

		insert into agenda_pac_caixa_opme(
					nr_sequencia,
					nr_seq_agenda,
					dt_atualizacao,
					nm_usuario,
					nr_seq_tipo_caixa_opme,
					ie_origem_inf,
					nr_seq_apres,
					ie_padrao,
					ds_observacao,
					ie_autorizado,
					dt_atualizacao_nrec,
					nm_usuario_nrec)
		values (
					nr_seq_caixa_opme_w,
					nr_seq_agenda_w,
					clock_timestamp(),
					nm_usuario_p,
					r_c03.nr_seq_tipo_caixa_opme,
					r_c03.ie_origem_inf,
					r_c03.nr_seq_apres,
					r_c03.ie_padrao,
					r_c03.ds_observacao,
					r_c03.ie_autorizado,
					clock_timestamp(),
					nm_usuario_p);

		insert into agenda_pac_caixa_reserva(
					nr_sequencia,
					nr_seq_opme_agenda,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_caixa)
		SELECT		nextval('agenda_pac_caixa_reserva_seq'),
					nr_seq_caixa_opme_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_caixa
		from		agenda_pac_caixa_reserva
		where		nr_seq_opme_agenda	= r_c03.nr_sequencia;

		insert into agenda_pac_caixa_item(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_pac_caixa,
					nr_seq_item,
					qt_utilizada)
		SELECT		nextval('agenda_pac_caixa_item_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_caixa_opme_w,
					nr_seq_item,
					qt_utilizada
		from		agenda_pac_caixa_item
		where		nr_seq_pac_caixa	= r_c03.nr_sequencia;
		
		commit;
	end loop;
		
	if ( ie_transferir_p = 'S') then
		begin
		open C02;
		loop
		fetch C02 into	
			nr_seq_anexo_w,
			ds_arquivo_w,
			nr_seq_status_w,
			ds_obs_anexo_w,
			ie_situacao_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			
			if (nr_seq_anexo_w IS NOT NULL AND nr_seq_anexo_w::text <> '') then
				begin
				select	nextval('anexo_agenda_seq')
				into STRICT	nr_seq_anexo_w
				;
				
				insert into anexo_agenda(	
							nr_sequencia,
							ds_arquivo, 
							nr_seq_agenda, 
							nr_seq_status, 
							dt_atualizacao, 
							nm_usuario, 
							dt_atualizacao_nrec, 
							nm_usuario_nrec, 
							ds_observacao, 
							ie_situacao)
				values (
							nr_seq_anexo_w,
							ds_arquivo_w,
							nr_seq_agenda_w,
							nr_seq_status_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							ds_obs_anexo_w,
							ie_situacao_w);
				end;
				commit;
			end if;
			end;
		end loop;
		close C02;
		end;
		
	end if;

	/* Servicos */

	insert into agenda_pac_servico(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				nr_seq_proc_servico,
				nr_seq_agenda,
				ie_origem_inf,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_status,
				cd_cgc,
				cd_pessoa_fisica,
				ds_observacao)
	SELECT		nextval('agenda_pac_servico_seq'),
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_proc_servico,
				nr_seq_agenda_w,
				ie_origem_inf,
				clock_timestamp(),
				nm_usuario_p,
				ie_status,
				cd_cgc,
				cd_pessoa_fisica,
				ds_observacao
	from		agenda_pac_servico
	where		nr_seq_agenda	=	nr_seq_agenda_sel_p;

	if (ie_cancel_agend_orig_w = 'N') then
	
		select	count(*)
		into STRICT	qt_integrada_w
		from	agenda_integrada_item
		where	nr_seq_agenda_exame = nr_seq_agenda_sel_p;
		
		if (qt_integrada_w > 0) then
			ie_cancel_agend_orig_w	:= 'S';
		end if;		
	end if;
	
	if	ie_transferir_p = 'S' then
	
		select	count(*)
		into STRICT	qt_autorizacoes_w
		from	autorizacao_convenio
		where	nr_seq_agenda = nr_seq_agenda_sel_p;

		/* atualizar autorizacoes vinculadas */

		if (qt_autorizacoes_w > 0) then
			update	autorizacao_convenio
			set	nr_seq_agenda = nr_seq_agenda_w,
				dt_agenda 	= dt_encaixe_w
			where	nr_seq_agenda = nr_seq_agenda_sel_p;

			update procedimento_autorizado
			set	nr_seq_agenda	 = nr_seq_agenda_w
			where	nr_seq_Agenda	= nr_seq_agenda_sel_p;
		end if;		

		select	count(*)
		into STRICT	qt_autor_evento_w
		from	autor_convenio_evento
		where	nr_seq_agenda = nr_seq_agenda_sel_p;
		
		if (qt_autor_evento_w > 0) then
			update	autor_convenio_evento
			set	nr_seq_agenda = nr_seq_agenda_w
			where	nr_seq_agenda = nr_seq_agenda_sel_p;
		end if;
	end if;
	
	IF (coalesce(cd_local_estoque_atual_w, 0) <> coalesce(cd_local_estoque_anter_w, 0)) AND (VarGerarReqTransf = 'S') THEN
		SELECT	coalesce(MAX(nr_prescricao),0)
		INTO STRICT	nr_prescricao_w
		FROM 	cirurgia
		WHERE 	nr_cirurgia = nr_cirurgia_w;

		IF (nr_prescricao_w = 0) THEN
			SELECT	coalesce(MAX(nr_prescricao),0)
			INTO STRICT	nr_prescricao_w
			FROM	prescr_medica
			WHERE	nr_seq_agenda	=	nr_seq_agenda_w
			AND	coalesce(ie_tipo_prescr_cirur::text, '') = '';
		END IF;

		IF (nr_prescricao_w > 0) THEN
			CALL gerar_requisicao_mat_barras(nr_prescricao_w, nm_usuario_p, cd_estabelecimento_p, cd_local_estoque_anter_w, cd_local_estoque_atual_w);
		END IF;
	END IF;
	
	/* cancelar agendamento anterior */

	IF (ie_transferir_p = 'S') AND (ie_cancel_agend_orig_w = 'N')THEN
		BEGIN
		UPDATE	prescr_medica
		SET		nr_seq_agenda	 = NULL
		WHERE		nr_seq_agenda	=	nr_seq_agenda_sel_p;
		
		COMMIT;
			
		update med_avaliacao_paciente
		set    NR_SEQ_AGENDA_PAC = 	nr_seq_agenda_w
		where  NR_SEQ_AGENDA_PAC =  nr_seq_agenda_sel_p;

		DELETE	FROM agenda_paciente
		WHERE	nr_sequencia	= nr_seq_agenda_sel_p;
		COMMIT;
		END;
	ELSIF (ie_transferir_p = 'S') AND (ie_cancel_agend_orig_w = 'S') THEN
			
			if (ie_transferir_p = 'S') and
				((nr_seq_pepo_w IS NOT NULL AND nr_seq_pepo_w::text <> '') or (nr_cirurgia_w IS NOT NULL AND nr_cirurgia_w::text <> ''))	then
			
				
				UPDATE	prescr_medica
				SET		nr_seq_agenda	 = NULL
				WHERE		nr_seq_agenda	=	nr_seq_agenda_sel_p;
	
				update	agenda_paciente
				set		nr_seq_pepo 			 = NULL,
							nr_cirurgia				 = NULL
				where		nr_sequencia 			= nr_seq_agenda_sel_p;
			end if;
			
			CALL alterar_status_agenda(cd_agenda_w, nr_seq_agenda_sel_p, 'C', cd_motivo_p, ds_motivo_p, 'N', nm_usuario_p);
	END IF;

COMMIT;
END IF;

delete 	FROM agenda_controle_horario
where 	cd_agenda = cd_agenda_p
and 	dt_agenda = trunc(dt_agenda_p);

commit;

nr_seq_encaixe_p := nr_seq_agenda_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_encaixe_agenda_exame_sel ( cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p text, qt_duracao_p bigint, nr_seq_agenda_sel_p bigint, ie_transferir_p text, cd_motivo_p text, ds_motivo_p text, nm_usuario_p text, nr_seq_encaixe_p INOUT bigint) FROM PUBLIC;

