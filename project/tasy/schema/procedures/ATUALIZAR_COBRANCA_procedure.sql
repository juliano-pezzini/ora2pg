-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_cobranca ( nr_titulo_p bigint, nr_seq_cheque_p bigint, ie_commit_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_cobranca_w		bigint;
nr_titulo_w			bigint;
nr_seq_historico_w			bigint;
nr_seq_hist_cob_liq_w		bigint;
nr_seq_hist_cob_canc_w		bigint;
nr_seq_hist_cob_desdob_w		bigint;
nr_seq_hist_cob_pend_w		bigint;
nr_seq_hist_cob_perda_w		bigint;
nr_seq_hist_cob_perda_canc_w	bigint;
nr_seq_hist_cob_perda_baixa_w	bigint;
nr_seq_hist_cob_perda_est_bx_w	bigint;


ie_status_w		varchar(1);
ie_novo_status_w		varchar(1);
ie_encerrar_cob_liq_w	varchar(1);
ie_saldo_cob_w		varchar(1);
ie_situacao_titulo_w	varchar(5);
ie_controle_perdas_w	varchar(1);

ds_historico_w		varchar(254);
vl_saldo_titulo_w		double precision;
vl_recebido_w		double precision;
ie_tipo_consistencia_w	integer;
nr_seq_processo_w		bigint;
qt_registro_w		bigint;
ie_encerrar_cobr_w		varchar(2)	:= 'N';
nr_seq_est_proc_inicio_w	bigint;
nr_seq_est_proc_fim_w	bigint;
ie_proc_perdas_w		varchar(1)	:= 'N';
nr_seq_proc_novo_w	bigint;
cd_pessoa_fisica_w	varchar(10);
cd_cgc_w		varchar(14);
vl_tot_original_w		double precision;
vl_tot_acobrar_w		double precision;
vl_tot_acrescimos_w	double precision;
vl_tot_perdas_w		double precision;
cd_tipo_recebimento_w	bigint;

nr_seq_baixa_w		integer;
qt_reg_perda_w		bigint;
ds_perda_w		varchar(255);
ie_tipo_perda_w		varchar(15);
nr_seq_perda_w		bigint;
ie_atualizar_totais_w	varchar(1);
dt_liquidacao_w		timestamp;
nr_seq_liq_origem_w	integer;
ie_status_cobr_w	varchar(1)	:= 'E';
nr_sequencia_cobranca_w		cobranca.nr_sequencia%type;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.ie_status,
	a.nr_seq_processo,
	b.cd_pessoa_fisica,
	b.cd_cgc
from	titulo_receber b,
	cobranca a
where	a.nr_titulo		= b.nr_titulo
and	a.nr_titulo		= nr_titulo_p
and	a.ie_status		<> 'A'

union all

select	a.nr_sequencia,
	a.ie_status,
	a.nr_seq_processo,
	b.cd_pessoa_fisica,
	b.cd_cgc
from	cheque_cr b,
	cobranca a
where	a.nr_seq_cheque		= b.nr_seq_cheque
and	a.nr_seq_cheque		= nr_seq_cheque_p
and	a.ie_status		<> 'A'
and	qt_reg_perda_w 		> 0;

c02 CURSOR FOR
SELECT	nr_sequencia,
	ie_tipo_perda,
	dt_liquidacao
from	perda_contas_receber
where	nr_titulo = nr_titulo_p
and	nr_titulo_p > 0

union all

select	nr_sequencia,
	ie_tipo_perda,
	dt_liquidacao
from	perda_contas_receber
where	nr_seq_cheque = nr_seq_cheque_p
and	nr_seq_cheque_p > 0
order by	dt_liquidacao,
	ie_tipo_perda,
	nr_sequencia;

/*OS 1636767 - Buscar todos os processos de cobrança da cobrança para atualizar os valores.*/

C03 CURSOR FOR
	SELECT a.nr_seq_processo
	from   processo_cobr_item a
	where  a.nr_seq_cobranca = nr_seq_cobranca_w;


BEGIN

nr_titulo_w	:= coalesce(nr_titulo_p,0);

begin
select	nr_seq_hist_cob,
	nr_seq_hist_cob_canc,
	nr_seq_hist_cob_desdob,
	nr_seq_hist_cob_pend,
	ie_encerrar_cob_liq,
	ie_saldo_cob,
	nr_seq_est_proc_inicio,
	nr_seq_est_proc_fim,
	ie_controle_perdas,
	nr_seq_hist_cob_perda,
	nr_seq_hist_cob_perda_canc,
	nr_seq_hist_cob_perda_baixa,
	nr_seq_hist_cob_perda_est_bx
into STRICT	nr_seq_hist_cob_liq_w,
	nr_seq_hist_cob_canc_w,
	nr_seq_hist_cob_desdob_w,
	nr_seq_hist_cob_pend_w,
	ie_encerrar_cob_liq_w,
	ie_saldo_cob_w,
	nr_seq_est_proc_inicio_w,
	nr_seq_est_proc_fim_w,
	ie_controle_perdas_w,
	nr_seq_hist_cob_perda_w,
	nr_seq_hist_cob_perda_canc_w,
	nr_seq_hist_cob_perda_baixa_w,
	nr_seq_hist_cob_perda_est_bx_w
from	parametro_contas_receber
where	cd_estabelecimento	= cd_estabelecimento_p;
exception
when no_data_found then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(215576);
end;

select	coalesce(max(vl_saldo_titulo),0),
	coalesce(max(ie_situacao), '1')
into STRICT	vl_saldo_titulo_w,
	ie_situacao_titulo_w
from	titulo_receber
where	nr_titulo		= nr_titulo_p;

nr_seq_historico_w	:= nr_seq_hist_cob_liq_w;

/* francisco - os 95317 - 03/06/2008 - quando for baixa por perdas nao atualizar */

select	max(x.nr_sequencia)
into STRICT	nr_seq_baixa_w
from	titulo_receber_liq x
where	x.nr_titulo	= nr_titulo_p;

select	max(b.ie_tipo_consistencia),
	max(b.ie_encerrar_cobr),
	max(b.ie_proc_perdas),
	max(a.cd_tipo_recebimento),
	max(nr_seq_liq_origem)
into STRICT	ie_tipo_consistencia_w,
	ie_encerrar_cobr_w,
	ie_proc_perdas_w,
	cd_tipo_recebimento_w,
	nr_seq_liq_origem_w
from	tipo_recebimento b,
	titulo_receber_liq a
where	a.cd_tipo_recebimento	= b.cd_tipo_recebimento
and	a.nr_titulo		= nr_titulo_p
and	a.nr_sequencia	= nr_seq_baixa_w;

if (ie_controle_perdas_w = 'S') and
	((nr_titulo_p > 0 AND nr_seq_baixa_w > 0) or (nr_seq_cheque_p > 0)) then
	begin
	qt_reg_perda_w	:= 0;

	open c02;
	loop
	fetch c02 into
		nr_seq_perda_w,
		ie_tipo_perda_w,
		dt_liquidacao_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		qt_reg_perda_w	:= qt_reg_perda_w + 1;
	end loop;
	close c02;
	end;
end if;

if	((nr_titulo_w > 0) or (qt_reg_perda_w > 0)) and
	((ie_encerrar_cob_liq_w = 'S') or (ie_encerrar_cob_liq_w = 'P' and ie_tipo_consistencia_w <> 9) or (ie_encerrar_cob_liq_w = 'R' and ie_encerrar_cobr_w in ('S','C','N','G')) or
	(ie_controle_perdas_w = 'S' AND qt_reg_perda_w > 0)) and (nr_seq_historico_w > 0) then
	open c01;
	loop
	fetch c01 into
		nr_seq_cobranca_w,
		ie_status_w,
		nr_seq_processo_w,
		cd_pessoa_fisica_w,
		cd_cgc_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		ie_atualizar_totais_w := 'N';

		if (qt_reg_perda_w > 0) then
			ie_atualizar_totais_w := 'S';
		elsif (coalesce(nr_titulo_p,0) > 0) and (vl_saldo_titulo_w = 0) and (ie_status_w = 'P') then
			begin
			ie_status_cobr_w	:= 'E';
			if (ie_situacao_titulo_w	= '3') or (cd_tipo_recebimento_w = 4) then
				ds_historico_w		:= wheb_mensagem_pck.get_texto(305635);
				nr_seq_historico_w	:= coalesce(nr_seq_hist_cob_canc_w, nr_seq_hist_cob_liq_w);
			elsif (ie_situacao_titulo_w	= '5') then
				ds_historico_w		:= wheb_mensagem_pck.get_texto(305636);
				nr_seq_historico_w	:= coalesce(nr_seq_hist_cob_desdob_w, nr_seq_hist_cob_liq_w);
			elsif (ie_encerrar_cobr_w	= 'C') then
				ds_historico_w		:= wheb_mensagem_pck.get_texto(305637);
				nr_seq_historico_w	:= coalesce(nr_seq_hist_cob_canc_w, nr_seq_hist_cob_liq_w);
				ie_status_cobr_w	:= 'C';
			elsif (ie_encerrar_cobr_w	= 'G') then
				ds_historico_w		:= wheb_mensagem_pck.get_texto(305638);
				nr_seq_historico_w	:= coalesce(nr_seq_hist_cob_canc_w, nr_seq_hist_cob_liq_w);
				ie_status_cobr_w	:= 'N'; --Negociada
			else
				ds_historico_w		:= wheb_mensagem_pck.get_texto(305639);
				nr_seq_historico_w	:= nr_seq_hist_cob_liq_w;
			end if;

			insert into cobranca_historico(nr_sequencia,
				nr_seq_cobranca,
				dt_atualizacao,
				nm_usuario,
				nr_seq_historico,
				vl_historico,
				ds_historico,
				dt_historico)
			values (	nextval('cobranca_historico_seq'),
				nr_seq_cobranca_w,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_historico_w,
				0,
				ds_historico_w,
				clock_timestamp());

			update	cobranca_orgao
			set	dt_retirada	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_seq_cobranca	= nr_seq_cobranca_w
			and	coalesce(dt_retirada::text, '') = '';

			update	cobranca
			set	ie_status		= ie_status_cobr_w,
				nm_usuario		= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia		= nr_seq_cobranca_w;

			ie_atualizar_totais_w := 'S';
			end;
		/* francisco - os 59543 - 11/06/07 - voltar pendente ao estornar */

		elsif (coalesce(nr_titulo_p,0) > 0) and (vl_saldo_titulo_w > 0) and (ie_status_w = 'E') then
			begin
			insert into cobranca_historico(nr_sequencia,
				nr_seq_cobranca,
				dt_atualizacao,
				nm_usuario,
				nr_seq_historico,
				vl_historico,
				ds_historico,
				dt_historico)
			values (	nextval('cobranca_historico_seq'),
				nr_seq_cobranca_w,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_historico_w,
				0,
				wheb_mensagem_pck.get_texto(305643),
				clock_timestamp());

			update	cobranca_orgao
			set	dt_retirada	 = NULL,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_seq_cobranca	= nr_seq_cobranca_w
			and	(dt_retirada IS NOT NULL AND dt_retirada::text <> '');

			update	cobranca
			set	ie_status		= 'P',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_cobranca_w;

			ie_atualizar_totais_w := 'S';
			end;
		end if;

		if (ie_atualizar_totais_w = 'S') then

			open C03;
			loop
			fetch C03 into
				nr_seq_processo_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin

				/* atualizar totais */

				select	coalesce(sum(vl_original),0),
						coalesce(sum(vl_acobrar),0),
						coalesce(sum(vl_acobrar + coalesce(obter_juros_multa_titulo(a.nr_titulo,clock_timestamp(),'R','A'),0)),0),
						coalesce(sum(CASE WHEN b.ie_situacao='6' THEN a.vl_original  ELSE 0 END ),0)
				into STRICT	vl_tot_original_w,
						vl_tot_acobrar_w,
						vl_tot_acrescimos_w,
						vl_tot_perdas_w
				FROM processo_cobr_item c, cobranca a
LEFT OUTER JOIN titulo_receber b ON (a.nr_titulo = b.nr_titulo)
WHERE a.nr_sequencia 		= c.nr_seq_cobranca and c.nr_seq_processo	= nr_seq_processo_w;

				update	processo_cobranca
				set		vl_original		= coalesce(vl_tot_original_w,0),
						vl_acobrar		= coalesce(vl_tot_acobrar_w,0),
						vl_cobranca		= coalesce(vl_tot_acrescimos_w,0),
						vl_perda		= coalesce(vl_tot_perdas_w,0)
				where	nr_sequencia	= nr_seq_processo_w;
				end;

			end loop;
			close C03;
		end if;

		end;
	end loop;
	close c01;
end if;

/* se for baixa por perdas  tratar processo de cobranca */

if (nr_titulo_w > 0) and (ie_tipo_consistencia_w = 9) and (ie_proc_perdas_w = 'S') then
	open c01;
	loop
	fetch c01 into
		nr_seq_cobranca_w,
		ie_status_w,
		nr_seq_processo_w,
		cd_pessoa_fisica_w,
		cd_cgc_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		select	max(nr_sequencia)
		into STRICT	nr_seq_proc_novo_w
		from	processo_cobranca
		where	coalesce(cd_pessoa_fisica,cd_cgc)	= coalesce(cd_pessoa_fisica_w,cd_cgc_w);

		if (coalesce(nr_seq_proc_novo_w::text, '') = '') then

			select	nextval('processo_cobranca_seq')
			into STRICT	nr_seq_proc_novo_w
			;

			insert into processo_cobranca(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_estabelecimento,
				cd_pessoa_fisica,
				cd_cgc,
				dt_processo,
				nr_seq_estagio,
				ie_tipo_processo)
			values (	nr_seq_proc_novo_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_estabelecimento_p,
				cd_pessoa_fisica_w,
				cd_cgc_w,
				null,
				null,
				null); --2
		end if;

		select	nextval('cobranca_seq')
		into STRICT	nr_sequencia_cobranca_w
		;

		insert into cobranca(nr_sequencia,
			cd_estabelecimento,
			dt_atualizacao,
			nm_usuario,
			nr_titulo,
			nr_seq_cheque,
			ie_status,
			vl_original,
			vl_acobrar,
			dt_previsao_cobranca,
			dt_inclusao,
			cd_tipo_portador,
			cd_portador,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_cobrador/*,
			nr_seq_processo*/
)
		SELECT	nr_sequencia_cobranca_w,
			cd_estabelecimento,
			clock_timestamp(),
			nm_usuario_p,
			nr_titulo,
			nr_seq_cheque,
			ie_status,
			vl_original,
			vl_acobrar,
			dt_previsao_cobranca,
			dt_inclusao,
			cd_tipo_portador,
			cd_portador,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_cobrador/*,
			nr_seq_proc_novo_w*/
		from	cobranca
		where	nr_sequencia	= nr_seq_cobranca_w;

		/*OS 1636767 - Fazer o vinculo  do processo cobranca com a cobrança gerada acima*/

		CALL gerar_proc_cobr_item( nr_seq_proc_novo_w,
							   nr_sequencia_cobranca_w,
							   nm_usuario_p,
							   'N' ); --O commit deve ocorrer no fim desta proc.
		update	cobranca
		set	ie_status	= 'E',
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp(),
			vl_acobrar	= 0
		where	nr_sequencia	= nr_seq_cobranca_w;

		/*OS 1636767 - Atualizar os processos de cobrança da cobrança encerrada acima.*/

		/*Atualizar os processos da cobrança que foi encerrada acima.*/

		open C03;
		loop
		fetch C03 into
			nr_seq_processo_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin

			/* atualizar totais */

			select	coalesce(sum(vl_original),0),
					coalesce(sum(vl_acobrar),0),
					coalesce(sum(vl_acobrar + coalesce(obter_juros_multa_titulo(a.nr_titulo,clock_timestamp(),'R','A'),0)),0),
					coalesce(sum(CASE WHEN b.ie_situacao='6' THEN a.vl_original  ELSE 0 END ),0)
			into STRICT	vl_tot_original_w,
					vl_tot_acobrar_w,
					vl_tot_acrescimos_w,
					vl_tot_perdas_w
			FROM processo_cobr_item c, cobranca a
LEFT OUTER JOIN titulo_receber b ON (a.nr_titulo = b.nr_titulo)
WHERE a.nr_sequencia 		= c.nr_seq_cobranca and c.nr_seq_processo	= nr_seq_processo_w;

			update	processo_cobranca
			set		vl_original		= coalesce(vl_tot_original_w,0),
					vl_acobrar		= coalesce(vl_tot_acobrar_w,0),
					vl_cobranca		= coalesce(vl_tot_acrescimos_w,0),
					vl_perda		= coalesce(vl_tot_perdas_w,0)
			where	nr_sequencia	= nr_seq_processo_w;
			end;

		end loop;
		close C03;

	end loop;
	close c01;
end if;

if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_cobranca ( nr_titulo_p bigint, nr_seq_cheque_p bigint, ie_commit_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

