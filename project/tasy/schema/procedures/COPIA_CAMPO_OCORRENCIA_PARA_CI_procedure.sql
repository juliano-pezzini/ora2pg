-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE LISTA AS (NM varchar(50), VL text);


CREATE OR REPLACE PROCEDURE copia_campo_ocorrencia_para_ci (NR_OCORRENCIA_P bigint, NR_SEQ_CI_P bigint, IE_TIPO_OCORRENCIA_P text, CD_PESSOA_FISICA_P text) AS $body$
DECLARE


--ESTA PROCEDURE REALIZA A COPIA DE UM CAMPO LONG, POREM SERAO COPIADOS NO MAXIMO 64000 CARACTERES. NAO IRA APRESENTAR ERRO CASO O CONTEUDO A SER COPIADO SEJA SUPERIOR AO TAMANHO MAXIMO.
DS_PARAM_W					varchar(2000);
DS_CAMPO_CLOB_W				text;
DS_SQL_W					varchar(2000);
DS_PARAMETRO_W				varchar(255);
NR_SEQUENCIA_W				bigint;
QT_REGISTRO_W				bigint;
C001						integer;
RETORNO_W					integer;
DT_AUX_W					timestamp;
DS_CONTEUDO_1_W				varchar(32764);
DS_CONTEUDO_2_W				varchar(32764);
DS_POS_INICIO_RTF_W			bigint;
NR_SEQ_RTF_SRTRING_W		bigint;
DS_OCORRENCIA_W				varchar(32764);
DS_QUEBRA_W					varchar(255);
RODAPE_W					varchar(255);
DS_TIPO_OCORRENCIA_W		varchar(255);
TYPE MYARRAY IS TABLE OF LISTA INDEX BY integer;

/*CONTEM OS PARAMETROS DO SQL*/

AR_PARAMETROS_W MYARRAY;

DS_PARAM_ATUAL_W 			varchar(512);
DS_PARAMETROS_W 			varchar(2000);
NR_POS_SEPARADOR_W			bigint;
QT_PARAMETROS_W				bigint;
QT_CONTADOR_W				bigint;
DS_SEP_BV_W					varchar(10);
QT_TAM_SEQ_W				smallint;

NM_TABELA_W					varchar(255);
NM_COLUNA_W					varchar(255);
DS_RESTRICAO_WHERE_W		varchar(255);
DS_PARAM_SELECT_W			varchar(255);
NM_TABELA_UPDATE_W			varchar(255);
NM_COLUNA_UPDATE_W			varchar(255);
DS_RESTRICAO_WHERE_UPDATE_W	varchar(255);
DS_PARAM_UPDATE_W			varchar(255);

BEGIN

NM_TABELA_W := 'OCORRENCIA';
NM_COLUNA_W := 'DS_OCORRENCIA';
DS_RESTRICAO_WHERE_W := 'WHERE NR_OCORRENCIA = :NR_OCORRENCIA';
DS_PARAM_SELECT_W := 'NR_OCORRENCIA='||NR_OCORRENCIA_P;
NM_TABELA_UPDATE_W := 'COMUNIC_INTERNA';
NM_COLUNA_UPDATE_W := 'DS_COMUNICADO';
DS_RESTRICAO_WHERE_UPDATE_W := 'WHERE NR_SEQUENCIA = :NR_SEQUENCIA';
DS_PARAM_UPDATE_W := 'NR_SEQUENCIA='||NR_SEQ_CI_P;

--INICIO - TRATAMENTO PARAMETROS BIND VARIABLE
DS_SEP_BV_W := OBTER_SEPARADOR_BV;
IF (position(DS_SEP_BV_W in DS_PARAM_UPDATE_W) = 0 ) THEN
	DS_SEP_BV_W := ';';
END IF;
QT_TAM_SEQ_W := LENGTH(DS_SEP_BV_W);
DS_PARAMETROS_W := DS_PARAM_UPDATE_W;
NR_POS_SEPARADOR_W := position(DS_SEP_BV_W in DS_PARAMETROS_W);
QT_PARAMETROS_W := 0;
WHILE(NR_POS_SEPARADOR_W > 0 ) LOOP
	BEGIN
	QT_PARAMETROS_W := QT_PARAMETROS_W + 1;
	DS_PARAM_ATUAL_W  := SUBSTR(DS_PARAMETROS_W,1,NR_POS_SEPARADOR_W-1);
	DS_PARAMETROS_W   := SUBSTR(DS_PARAMETROS_W,NR_POS_SEPARADOR_W+QT_TAM_SEQ_W,LENGTH(DS_PARAMETROS_W));
	NR_POS_SEPARADOR_W := position('=' in DS_PARAM_ATUAL_W);
	AR_PARAMETROS_W[QT_PARAMETROS_W].NM := UPPER(SUBSTR(DS_PARAM_ATUAL_W,1,NR_POS_SEPARADOR_W-1));
	AR_PARAMETROS_W[QT_PARAMETROS_W].VL := SUBSTR(DS_PARAM_ATUAL_W,NR_POS_SEPARADOR_W+1,LENGTH(DS_PARAM_ATUAL_W));
	NR_POS_SEPARADOR_W := position(DS_SEP_BV_W in DS_PARAMETROS_W);
	IF (QT_PARAMETROS_W > 1000) THEN
		NR_POS_SEPARADOR_W := 0;
	END IF;
	END;
END LOOP;
	NR_POS_SEPARADOR_W := position('=' in DS_PARAMETROS_W);
IF ( NR_POS_SEPARADOR_W > 0 ) THEN
	QT_PARAMETROS_W := QT_PARAMETROS_W +1;
	DS_PARAM_ATUAL_W := DS_PARAMETROS_W;
	AR_PARAMETROS_W[QT_PARAMETROS_W].NM := UPPER(SUBSTR(DS_PARAM_ATUAL_W,1,NR_POS_SEPARADOR_W-1));
	AR_PARAMETROS_W[QT_PARAMETROS_W].VL := SUBSTR(DS_PARAM_ATUAL_W,NR_POS_SEPARADOR_W+1,LENGTH(DS_PARAM_ATUAL_W));
END IF;
--FIM - TRATAMENTO PARAMETRO BIND VARIABLE
--INICIO - VERIFICAR SE TABELA TEMPORARIA EXISTE SE NAO EXISTIR CRIAR
SELECT 	COUNT(*)
INTO STRICT	QT_REGISTRO_W
FROM	USER_TABLES
WHERE	TABLE_NAME = 'W_COPIA_CAMPO_LONG';

IF ( QT_REGISTRO_W = 0 ) THEN
	CALL EXEC_SQL_DINAMICO('','CREATE TABLE W_COPIA_CAMPO_LONG (NR_SEQUENCIA NUMBER(10), DS_TEXTO CLOB)');
END IF;
--FIM - VERIFICAR SE TABELA TEMPORARIA EXISTE SE NAO EXISTIR CRIAR
--INICIO - TRANSFERE CONTEUDO DO CAMPO LONG DA TABELA DE ORIGEM PARA O CAMPO CLOB DA TABELA TEMPORARIO
NR_SEQUENCIA_W := OBTER_VALOR_DINAMICO('SELECT	(NVL(MAX(NR_SEQUENCIA),0) + 1) FROM W_COPIA_CAMPO_LONG', NR_SEQUENCIA_W);
DS_SQL_W   := 'INSERT INTO W_COPIA_CAMPO_LONG SELECT :SEQUENCE, TO_LOB('|| NM_COLUNA_W || ') FROM ' || NM_TABELA_W || ' ' || DS_RESTRICAO_WHERE_W;
DS_PARAM_W := 'SEQUENCE='|| TO_CHAR(NR_SEQUENCIA_W)||';' || DS_PARAM_SELECT_W;
CALL EXEC_SQL_DINAMICO_BV('',DS_SQL_W,DS_PARAM_W);
--FIM - TRANSFERE CONTEUDO DO CAMPO LONG DA TABELA DE ORIGEM PARA O CAMPO CLOB DA TABELA TEMPORARIO
--INICIO - RECUPERA O VALOR DO CAMPO CLOB PARA A VARIAVEL DA PROCEDURE
DS_SQL_W	:= ' SELECT DS_TEXTO FROM W_COPIA_CAMPO_LONG WHERE NR_SEQUENCIA = :SEQUENCE ';
C001 := DBMS_SQL.OPEN_CURSOR;
DBMS_SQL.PARSE(C001, DS_SQL_W, DBMS_SQL.NATIVE);
DBMS_SQL.DEFINE_COLUMN(C001, 1, DS_CAMPO_CLOB_W);
DBMS_SQL.BIND_VARIABLE(C001, 'SEQUENCE', NR_SEQUENCIA_W);
RETORNO_W := DBMS_SQL.EXECUTE(C001);
RETORNO_W := DBMS_SQL.FETCH_ROWS(C001);
DBMS_SQL.COLUMN_VALUE(C001, 1, DS_CAMPO_CLOB_W );
DBMS_SQL.CLOSE_CURSOR(C001);
--FIM - RECUPERA O VALOR DO CAMPO CLOB PARA A VARIAVEL DA PROCEDURE
--FINICIO - QUEBRA O VALOR DO CONTEUDO CLOB EM VARIOS VARCHAR PARA PODER INSERIR NA TABELA DE ORIGEM
DS_CONTEUDO_1_W := substr(DS_CAMPO_CLOB_W,32000,1);
DS_CONTEUDO_2_W := substr(DS_CAMPO_CLOB_W,32000,32001);
--FIM QUEBRA O VALOR DO CONTEUDO CLOB EM VARIOS VARCHAR PARA PODER INSERIR NA TABELA DE ORIGEM
--INICIO - ADICIONA AS TAGS DE RTF NO INICIO E FIM DO TEXT SE NECESSARIO
IF (DS_CONTEUDO_1_W IS NOT NULL AND DS_CONTEUDO_1_W::text <> '') THEN

		SELECT 	DS_TIPO_OCORRENCIA
		INTO STRICT	DS_TIPO_OCORRENCIA_W
		FROM	TIPO_OCORRENCIA_TURNO
		WHERE	CD_TIPO_OCORRENCIA = IE_TIPO_OCORRENCIA_P;

		--PEGA O CABECALHO DO RTF
		DS_POS_INICIO_RTF_W := position('rtf1' in DS_CONTEUDO_1_W)+4;
		DS_OCORRENCIA_W	:= WHEB_RTF_PCK.GET_CABECALHO;
		DS_QUEBRA_W := WHEB_RTF_PCK.GET_QUEBRA_LINHA;
		
		DS_OCORRENCIA_W := DS_OCORRENCIA_W ||
		OBTER_DESC_EXPRESSAO(330022) || SUBSTR(OBTER_NOME_PF(CD_PESSOA_FISICA_P),1,60)  || DS_QUEBRA_W ||
		OBTER_DESC_EXPRESSAO(299670) || ' ' || DS_TIPO_OCORRENCIA_W || DS_QUEBRA_W ||
		OBTER_DESC_EXPRESSAO(294709) || ' ';
		DS_OCORRENCIA_W := DS_OCORRENCIA_W || '\par \par ' || SUBSTR(DS_CONTEUDO_1_W,ds_pos_inicio_rtf_w,32000);
		DS_CONTEUDO_1_W := DS_OCORRENCIA_W;

		IF (DS_POS_INICIO_RTF_W = 0 OR (coalesce(DS_CONTEUDO_2_W::text, '') = '' AND DS_POS_INICIO_RTF_W = 4)) THEN
			DS_CONTEUDO_2_W := DS_CONTEUDO_2_W||WHEB_RTF_PCK.GET_RODAPE;
		END IF;
		
END IF;
--FIM - ADICIONA AS TAGS DE RTF NO INICIO E FIM DO TEXT SE NECESSARIO
--INICIO - TRANSFERE CONTEUDO DAS VARIAVIES VARCHAR PARA O  CAMPO LONG DA TABELA DE ORIGEM
DS_SQL_W	:= ' UPDATE ' || NM_TABELA_UPDATE_W || ' SET ' || NM_COLUNA_UPDATE_W || '= :DS_TEXTO ' || DS_RESTRICAO_WHERE_UPDATE_W;
C001 := DBMS_SQL.OPEN_CURSOR;
DBMS_SQL.PARSE(C001, DS_SQL_W, DBMS_SQL.NATIVE);
DBMS_SQL.BIND_VARIABLE(C001, 'DS_TEXTO', DS_CONTEUDO_1_W || DS_CONTEUDO_2_W);

FOR CONTADOR_W IN 1..AR_PARAMETROS_W.COUNT LOOP
	IF (AR_PARAMETROS_W[CONTADOR_W].NM LIKE 'DT_%') THEN
		DT_AUX_W := TO_DATE(AR_PARAMETROS_W[CONTADOR_W].VL,'DD/MM/YYYY HH24:MI:SS');
		DBMS_SQL.BIND_VARIABLE(C001, AR_PARAMETROS_W[CONTADOR_W].NM, DT_AUX_W);
	ELSE
		DBMS_SQL.BIND_VARIABLE(C001, AR_PARAMETROS_W[CONTADOR_W].NM, AR_PARAMETROS_W[CONTADOR_W].VL,32764);
	END IF;
END LOOP;

RETORNO_W := DBMS_SQL.EXECUTE(C001);
DBMS_SQL.CLOSE_CURSOR(C001);
--FIM TRANSFERE CONTEUDO DAS VARIAVIES VARCHAR PARA O  CAMPO LONG DA TABELA DE ORIGEM
--INICIO - DELETA O REGISTRO DA TABELA TEMPORARIA
DS_SQL_W := 'DELETE FROM W_COPIA_CAMPO_LONG WHERE NR_SEQUENCIA = :NR_SEQUENCIA';
DS_PARAM_W := 'NR_SEQUENCIA='|| TO_CHAR(NR_SEQUENCIA_W);
CALL EXEC_SQL_DINAMICO_BV('',DS_SQL_W,DS_PARAM_W);
--FIM - DELETA O REGISTRO DA TABELA TEMPORARIA
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE copia_campo_ocorrencia_para_ci (NR_OCORRENCIA_P bigint, NR_SEQ_CI_P bigint, IE_TIPO_OCORRENCIA_P text, CD_PESSOA_FISICA_P text) FROM PUBLIC;

