-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE import_insurance_return_file (nr_seq_retorno_p bigint, ie_doc_retorno_p text, cd_convenio_p bigint, nr_mes_ant_p bigint, nr_mes_ant_conta_p bigint, cd_senha_p text, vl_senha_p bigint, dt_pagamento_p timestamp default null) AS $body$
DECLARE


-- Values that can be obtained through system-wide packages.
nm_usuario_w		usuario.nm_usuario%type;

-- Other variables.
nr_seq_retorno_w	convenio_retorno.nr_sequencia%type;
ie_doc_retorno_w	convenio_retorno.ie_doc_retorno%type;
cd_convenio_w		convenio.cd_convenio%type;
cd_senha_w		atend_categoria_convenio.cd_senha%type;
nr_mes_ant_w		bigint;
nr_mes_ant_conta_w	bigint;
ds_erro_w		varchar(2000);
qt_paid_forms		bigint;
qt_forms_w		bigint;

-- Document types - from domain 1232 - "Documento de retorno do convenio".

-- These are constants - be careful when changing them, as it will affect the whole procedure.
encounter_account_form_w	varchar(10) := 'ATCTGUIA';
encounter_w			varchar(10) := 'ATEND';
insurance_card_w		varchar(10) := 'CARTEIRA';
insurance_account_w		varchar(10) := 'CCONV';
insurance_account_form_w  	varchar(10) := 'CCONVGUIA';
insurance_account_imp_w		varchar(10) := 'CCONVIMP';
account_w			varchar(10) := 'CONTA';
account_form_w			varchar(10) := 'CONTAGUIA';
user_proc_date_code_w		varchar(10) := 'CUDTPR';
form_encounter_type_w		varchar(10) := 'GTPA';
form_w				varchar(10) := 'GUIA';
first_encounter_form_w		varchar(10) := 'GUIAATEND';
informed_encounter_form_w 	varchar(10) := 'GUIACONV';
encounter_form_user_code_w	varchar(10) := 'GUIACU';
encounter_form_user_value_w	varchar(10) := 'GUIACUVL';
form_waiting_number_w		varchar(10) := 'GUIASENHA';
form_form_type_w		varchar(10) := 'GUIA+TIPO';
form_user_code_w		varchar(10) := 'GUIAUT';
form_account_value_w		varchar(10) := 'GUIAVL';
patient_name_w			varchar(10) := 'NOME';
patient_record_w		varchar(10) := 'PRONT';
patient_record_form_w		varchar(10) := 'PRONT+GUIA';
encounter_waiting_number_w	varchar(10) := 'SENHA';
waiting_number_form_w		varchar(10) := 'SENHAGUIA';

-- Insurance Return status.
closed_insurance_return_w	varchar(10) := 'F';

-- Variables to handle cursor result set.
nr_interno_conta_w	conta_paciente.nr_interno_conta%type;
cd_autorizacao_w	conta_paciente_guia.cd_autorizacao%type;
vl_guia_w		conta_paciente_guia.vl_guia%type;
vl_saldo_w		double precision;
vl_pago_w		double precision;
vl_pago_total_w		double precision;	
vl_senha_w		double precision;
vl_adic_w		double precision;
vl_amenor_w		double precision;
nr_seq_ret_item_w	convenio_retorno_item.nr_sequencia%type;
vl_pago_senha_w		double precision;
ie_glosa_w		convenio_retorno_item.ie_glosa%type;
vl_glosado_w		convenio_retorno_item.vl_glosado%type;
cd_motivo_glosa_w	convenio_retorno_item.cd_motivo_glosa%type;
-- Expression constants.
form_not_informed_w	varchar(200) := wheb_mensagem_pck.get_texto(1097738);

-- Counts the forms avaiable to that encounter waiting number.
waiting_number_form_count CURSOR FOR
SELECT	count(*) qt
from	conta_paciente_guia b,
	atend_categoria_convenio c,
	conta_paciente a
where	a.nr_interno_conta		= b.nr_interno_conta
and	c.nr_atendimento		= a.nr_atendimento
and     c.nr_seq_interno 	      = ( 		
						SELECT  coalesce(max(nr_seq_interno),0)
						from   	atend_categoria_convenio d
						where  	d.nr_atendimento     = a.nr_atendimento
						and   	dt_inicio_vigencia    = (       	
											select max(dt_inicio_vigencia)
											from atend_categoria_convenio x 
											where x.nr_atendimento = d.nr_atendimento
										)
					)
and	coalesce(b.dt_convenio,clock_timestamp()) >= clock_timestamp() - (nr_mes_ant_w * 30)::numeric 
and	coalesce(a.dt_mesano_referencia,clock_timestamp()) >= clock_timestamp() - (nr_mes_ant_conta_w * 30)::numeric 
and	a.cd_convenio_parametro	= cd_convenio_w
and	a.ie_status_acerto	= 2
and	coalesce(a.ie_cancelamento::text, '') = ''
and	trim(both c.cd_senha)	= trim(both cd_senha_w);

-- Fetches all forms avaible to that encounter waiting number.
waiting_number_form CURSOR FOR
SELECT	a.nr_interno_conta 	nr_interno_conta,
	b.vl_guia 		vl_guia,
	coalesce(b.cd_autorizacao, form_not_informed_w) cd_autorizacao
from	conta_paciente_guia b,
	atend_categoria_convenio c,
	conta_paciente a
where	a.nr_interno_conta		= b.nr_interno_conta
and	c.nr_atendimento		= a.nr_atendimento
and     c.nr_seq_interno	      = ( 		
						SELECT  coalesce(max(nr_seq_interno),0)
						from   	atend_categoria_convenio d
						where  	d.nr_atendimento     = a.nr_atendimento
						and   	dt_inicio_vigencia    = (       	
											select max(dt_inicio_vigencia)
											from atend_categoria_convenio x 
											where x.nr_atendimento = d.nr_atendimento
										)
					)
and	coalesce(b.dt_convenio,clock_timestamp()) >= clock_timestamp() - (nr_mes_ant_w * 30)::numeric 
and	coalesce(a.dt_mesano_referencia,clock_timestamp()) >= clock_timestamp() - (nr_mes_ant_conta_w * 30)::numeric 
and	a.cd_convenio_parametro	= cd_convenio_w
and	a.ie_status_acerto	= 2
and	coalesce(a.ie_cancelamento::text, '') = ''
and	trim(both c.cd_senha)	= trim(both cd_senha_w);

BEGIN

	if (nr_seq_retorno_p IS NOT NULL AND nr_seq_retorno_p::text <> '')
		and (nr_seq_retorno_p > 0)
		and (cd_senha_p IS NOT NULL AND cd_senha_p::text <> '') then

		nr_seq_retorno_w	:= nr_seq_retorno_p;		
		nm_usuario_w		:= wheb_usuario_pck.get_nm_usuario;		
		nr_mes_ant_w		:= nr_mes_ant_p;
		nr_mes_ant_conta_w	:= nr_mes_ant_conta_p;
		vl_senha_w		:= vl_senha_p;
		cd_senha_w		:= cd_senha_p;

		if (coalesce(cd_convenio_p::text, '') = '') then
			select	max(cd_convenio)
			into STRICT	cd_convenio_w
			from	convenio_retorno
			where	nr_sequencia	= nr_seq_retorno_w;
		else
			cd_convenio_w := cd_convenio_p;
		end if;

		if (coalesce(ie_doc_retorno_p::text, '') = '') then
			select	max(ie_doc_retorno)
			into STRICT	ie_doc_retorno_w
			from	convenio_retorno
			where	nr_sequencia = nr_seq_retorno_w;
		else
			ie_doc_retorno_w := ie_doc_retorno_p;
		end if;

		-- Generate according to IE_DOC_RETORNO_W
		if (ie_doc_retorno_w = waiting_number_form_w) then -- SENHAGUIA

			/*
				Check if there's any form that was paid with 'SENHA'.			
			*/
			select 	count(*)
			into STRICT	qt_paid_forms
			from	convenio_retorno_item cri				
			where	closed_insurance_return_w = (SELECT cr.ie_status_retorno from convenio_retorno cr where cr.nr_sequencia = cri.nr_seq_retorno)
			and	cri.cd_autorizacao = cd_senha_w
			and	coalesce(cri.ie_doc_retorno_origem, encounter_waiting_number_w) = encounter_waiting_number_w;

			if (qt_paid_forms > 0) then				
			
				select	coalesce(sum(vl_pago + vl_glosado + coalesce(vl_desconto,0)),0)
				into STRICT	vl_pago_senha_w
				from	convenio_retorno_item				
				where	cd_autorizacao	= cd_senha_w  LIMIT 1;				
				
			end if;

			/* 
				The following verification is due to the condition that, according to Hospital Dona Helena (SO X)
				there are some occasions that certain forms shouldn't be generated.
				E.g.
				Waiting Number => ABC
				Patient Account Form 100 => $5000,00
				Patient Account Form 200 => $2000,00
				
				Due to an agreement with the HPMS, only the first account should be generated to be paid,
				so we generate inconsistencies when we find more than one form, so that the invoice clerk
				can analyse and manually generate the forms correctly.
				
				P.S: This behavior will probably be parameterized in the near future.
				
			*/
			for waiting_number_form_count_row in waiting_number_form_count loop
				qt_forms_w := waiting_number_form_count_row.qt;
			end loop;
			if (qt_forms_w > 1) then
				for waiting_number_form_row in waiting_number_form loop
					CALL importar_convenio_retorno_imp(
									nr_seq_retorno_p, 
									cd_senha_w, 
									vl_senha_w, 
									waiting_number_form_row.nr_interno_conta,
									waiting_number_form_row.vl_guia,
									nm_usuario_w
									);
				end loop;
			else
				for waiting_number_form_row in waiting_number_form loop

					vl_pago_w	:= 0;
					vl_adic_w	:= 0;
					vl_amenor_w	:= 0;
					vl_saldo_w 	:= 0;

					nr_interno_conta_w	:= waiting_number_form_row.nr_interno_conta;
					cd_autorizacao_w	:= waiting_number_form_row.cd_autorizacao;

					select 	obter_saldo_conpaci(nr_interno_conta_w, cd_autorizacao_w)
					into STRICT	vl_saldo_w
					;

					-- If there's anything left to be paid.
					if (vl_saldo_w > 0) then 					

						select	coalesce(sum(vl_pago + vl_glosado + coalesce(vl_desconto,0)),0) vl_pago_total
						into STRICT	vl_pago_total_w
						from	convenio_retorno_item
						where	nr_interno_conta	= nr_interno_conta_w
						and	cd_autorizacao		= cd_autorizacao_w;

						vl_pago_w	:= waiting_number_form_row.vl_guia - vl_pago_total_w;
						
						if (coalesce(vl_pago_senha_w,0) > 0) then
							vl_pago_w := vl_pago_w - vl_pago_senha_w;
							vl_pago_senha_w := 0;
						end if;

						if (vl_senha_w > 0) then
							vl_senha_w 	 := vl_senha_w 		- vl_pago_w;						
							if (vl_senha_w >= 0) then
								vl_adic_w := 0;
								vl_amenor_w := 0;
							else
								-- Partially paid.
								vl_pago_w := vl_senha_w + vl_pago_w;
								vl_amenor_w := vl_senha_w * - 1;
								vl_adic_w := 0;
							end if;
						else
							vl_amenor_w := vl_pago_w;
							vl_pago_w := 0;
							vl_adic_w := 0;
							vl_senha_w := 0;
						end if;					

						select	nextval('convenio_retorno_item_seq')
						into STRICT	nr_seq_ret_item_w
						;
						
						SELECT * FROM valida_glosa_conta(nr_interno_conta_w, vl_saldo_w, vl_saldo_w - vl_pago_w, obter_perfil_ativo(), nm_usuario_w, ie_glosa_w, cd_motivo_glosa_w) INTO STRICT ie_glosa_w, cd_motivo_glosa_w;
						
						vl_glosado_w := 0;
						
						if (ie_glosa_w = 'S') then
							vl_glosado_w := vl_amenor_w;
							vl_amenor_w := 0;
						end if;

						insert into convenio_retorno_item(cd_autorizacao,
							dt_atualizacao,
							ie_analisada,
							ie_glosa,
							nm_usuario,
							nr_seq_retorno,
							nr_interno_conta,
							nr_sequencia,
							vl_adicional,
							vl_amenor,
							vl_glosado,
							vl_pago,
							ie_doc_retorno_origem,
							dt_pagamento,
							cd_motivo_glosa)
						values (cd_autorizacao_w,
							clock_timestamp(),
							'N',
							coalesce(ie_glosa_w,'P'),
							nm_usuario_w,
							nr_seq_retorno_w,
							nr_interno_conta_w,
							nr_seq_ret_item_w,
							vl_adic_w,
							vl_amenor_w,
							vl_glosado_w,
							vl_pago_w,
							ie_doc_retorno_w,
							dt_pagamento_p,
							cd_motivo_glosa_w);

					end if;			
				end loop;

				if (vl_senha_w > 0) and (coalesce(nr_seq_ret_item_w,0) > 0) then
					update	convenio_retorno_item
					set	vl_adicional = vl_adicional + coalesce(vl_senha_w,0)
					where 	nr_sequencia = nr_seq_ret_item_w;				
				end if;
			
			end if;
		end if;
	end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE import_insurance_return_file (nr_seq_retorno_p bigint, ie_doc_retorno_p text, cd_convenio_p bigint, nr_mes_ant_p bigint, nr_mes_ant_conta_p bigint, cd_senha_p text, vl_senha_p bigint, dt_pagamento_p timestamp default null) FROM PUBLIC;

