-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_baca_atualiza_dt_comp_rec () AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: 	Atualizar a data de competência do protocolo de recurso de glosa, pois dependendo de parâmetro
	agora a data referência para geração dos pagamentos de recuros é o dt_mes_competencia
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Alterações:
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
tb_nr_sequencia_w		pls_util_cta_pck.t_number_table;
tb_dt_referencia_w		pls_util_cta_pck.t_date_table;
nr_seq_reg_min_prot_w		pls_rec_glosa_protocolo.nr_sequencia%type;
nr_seq_reg_max_prot_w		pls_rec_glosa_protocolo.nr_sequencia%type;
nr_seq_reg_min_w		pls_rec_glosa_protocolo.nr_sequencia%type;
nr_seq_reg_max_w		pls_rec_glosa_protocolo.nr_sequencia%type;
nr_seq_reg_ini_w		pls_rec_glosa_protocolo.nr_sequencia%type;
nr_seq_reg_fim_w		pls_rec_glosa_protocolo.nr_sequencia%type;
j				integer;
qt_registro_update_w		integer;
ie_finaliza_processo_w		varchar(1);

C01 CURSOR(	nr_seq_reg_ini_pc	pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_reg_fim_pc	pls_rec_glosa_protocolo.nr_sequencia%type)FOR
	SELECT	nr_sequencia,
		dt_liberacao_pag,
		dt_apresentacao_lote,
		dt_competencia_lote
	from	pls_rec_glosa_protocolo
	where	nr_sequencia between nr_seq_reg_ini_pc and nr_seq_reg_fim_pc
	and	ie_status in ('1', '2', '3', '5', '7', '8');

C02 CURSOR(	nr_seq_reg_ini_pc	pls_conta_rec_resumo_item.nr_sequencia%type,
		nr_seq_reg_fim_pc	pls_conta_rec_resumo_item.nr_sequencia%type,
		nr_seq_protocolo_pc	pls_rec_glosa_protocolo.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		coalesce(a.ie_situacao,'A') ie_situacao
	from	pls_conta_rec_resumo_item a
	where	a.nr_sequencia between nr_seq_reg_ini_pc and nr_seq_reg_fim_pc
	and	exists (	SELECT	1
				from	pls_rec_glosa_conta b
				where	b.nr_sequencia = a.nr_seq_conta_rec
				and	b.nr_seq_protocolo = nr_seq_protocolo_pc);
BEGIN
j := 0;

-- evita a execução de algumas triggers
CALL wheb_usuario_pck.set_ie_executar_trigger('N');

qt_registro_update_w := 500;
ie_finaliza_processo_w := 'N';

select	min(nr_sequencia),
	max(nr_sequencia)
into STRICT	nr_seq_reg_min_w,
	nr_seq_reg_max_w
from	pls_rec_glosa_protocolo;

nr_seq_reg_ini_w := nr_seq_reg_min_w;
nr_seq_reg_fim_w := nr_seq_reg_ini_w + qt_registro_update_w;

loop
	for r_C01_w in C01(nr_seq_reg_ini_w, nr_seq_reg_fim_w) loop
		begin
		if (r_C01_w.dt_liberacao_pag IS NOT NULL AND r_C01_w.dt_liberacao_pag::text <> '') then
			tb_nr_sequencia_w(j) := r_C01_w.nr_sequencia;
			tb_dt_referencia_w(j) := r_C01_w.dt_liberacao_pag;
		else
			tb_nr_sequencia_w(j) := r_C01_w.nr_sequencia;
			tb_dt_referencia_w(j) := r_C01_w.dt_apresentacao_lote;
		end if;

		if (tb_nr_sequencia_w.count >= pls_util_pck.qt_registro_transacao_w) then
			forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
				update	pls_rec_glosa_protocolo set
					dt_competencia_lote = tb_dt_referencia_w(i)
				where	nr_sequencia = tb_nr_sequencia_w(i);
			commit;

			tb_nr_sequencia_w.delete;
			j := 0;
		else
			j := j + 1;
		end if;
		end;
	end loop;

	nr_seq_reg_ini_w := nr_seq_reg_fim_w + 1;
	nr_seq_reg_fim_w := nr_seq_reg_ini_w + qt_registro_update_w;

	if (nr_seq_reg_ini_w <= nr_seq_reg_max_w) then
		ie_finaliza_processo_w := 'N';
	else
		ie_finaliza_processo_w := 'S';
	end if;

	exit when ie_finaliza_processo_w = 'S';
end loop;

if (tb_nr_sequencia_w.count > 0) then
	forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
		update	pls_rec_glosa_protocolo set
			dt_competencia_lote = tb_dt_referencia_w(i)
		where	nr_sequencia = tb_nr_sequencia_w(i);
	commit;
end if;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

tb_nr_sequencia_w.delete;
tb_dt_referencia_w.delete;
j:= 0;
nr_seq_reg_min_w := 0;
nr_seq_reg_max_w := 0;

select	min(nr_sequencia),
	max(nr_sequencia)
into STRICT	nr_seq_reg_min_prot_w,
	nr_seq_reg_max_prot_w
from	pls_rec_glosa_protocolo;

select	min(nr_sequencia),
	max(nr_sequencia)
into STRICT	nr_seq_reg_min_w,
	nr_seq_reg_max_w
from	pls_conta_rec_resumo_item;

nr_seq_reg_ini_w := nr_seq_reg_min_w;
nr_seq_reg_fim_w := nr_seq_reg_ini_w + qt_registro_update_w;


for r_C01_w in C01(nr_seq_reg_min_prot_w, nr_seq_reg_max_prot_w) loop
	begin
	for r_C02_w in C02(nr_seq_reg_ini_w, nr_seq_reg_fim_w, r_C01_w.nr_sequencia) loop
		begin
		if (r_C02_w.ie_situacao = 'A') then
			tb_nr_sequencia_w(j) := r_C02_w.nr_sequencia;
			tb_dt_referencia_w(j) := r_C01_w.dt_competencia_lote;

			if (tb_nr_sequencia_w.count >= pls_util_pck.qt_registro_transacao_w) then
				forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
					update	pls_conta_rec_resumo_item set
						dt_competencia_pgto = tb_dt_referencia_w(i)
					where	nr_sequencia = tb_nr_sequencia_w(i);
				commit;

				tb_nr_sequencia_w.delete;
				tb_dt_referencia_w.delete;
				j := 0;
			else
				j := j + 1;
			end if;
		end if;
		end;
	end loop;

	nr_seq_reg_ini_w := nr_seq_reg_fim_w;
	nr_seq_reg_fim_w := nr_seq_reg_ini_w + qt_registro_update_w;

	if (nr_seq_reg_ini_w <= nr_seq_reg_max_w) then
		ie_finaliza_processo_w := 'N';
	else
		ie_finaliza_processo_w := 'S';
	end if;

	exit when ie_finaliza_processo_w = 'S';

	end;
end loop;

if (tb_nr_sequencia_w.count > 0) then
	forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
		update	pls_conta_rec_resumo_item set
			dt_competencia_pgto = tb_dt_referencia_w(i)
		where	nr_sequencia = tb_nr_sequencia_w(i);
	commit;
end if;

CALL wheb_usuario_pck.set_ie_executar_trigger('S');

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_baca_atualiza_dt_comp_rec () FROM PUBLIC;

