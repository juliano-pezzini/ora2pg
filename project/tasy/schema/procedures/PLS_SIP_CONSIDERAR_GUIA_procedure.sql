-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_sip_considerar_guia ( nr_seq_regra_p bigint, nr_seq_conta_p bigint, cd_guia_p text, ie_tipo_contratacao_p text, ie_segmentacao_p text, sg_uf_sip_p text, dt_mes_competencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ie_verificar_atualiza_p INOUT text) AS $body$
DECLARE


/*ie_verificar_atualiza_p	G    - gerar na conta que esta sendo consistida caso já exista guia com o campo ie_considerar_guia.
			GA - Estou consistindo a segunda conta vinculada e a mesma pegou uma regra com ie_considerar_guia, devo atualizar as que são do mesmo atendimento pois deve pegar a mesma regra*/
nr_seq_item_assistencial_w	bigint;
ie_nasc_vivos_w			varchar(1)	:= 'S';
cd_item_sip_w			varchar(10);
cd_classificacao_w		varchar(20);
ie_nascido_vivo_w		varchar(10);
qt_idade_min_w			smallint;
qt_idade_max_w			smallint;
ie_unid_tempo_idade_w		varchar(10);
ie_considerar_conta_w		varchar(10)	:= 'N';
ie_considerar_guia_w		varchar(10)	:= 'N';
nr_seq_regra_w			bigint;
nr_seq_proc_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_mat_w			bigint;
nr_seq_material_w		bigint;
qt_evento_w			double precision;
vl_despesa_w			double precision;
dt_ocorrencia_item_w		timestamp;
dt_mes_competencia_w		timestamp;
dt_ocorrencia_w			timestamp;
nr_seq_mov_item_sip_w		bigint;
nr_seq_conta_w			bigint;
sg_uf_sip_w			varchar(10)	:= 'NC';
ie_segmentacao_w		varchar(10);
ie_tipo_contratacao_w		varchar(10);

C00 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conta
	where	((cd_guia		= cd_guia_p)
	or (cd_guia_referencia	= cd_guia_p))
	and	ie_status		<> 'U';

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_liberado,0),
		a.dt_procedimento
	from	pls_conta_proc	a
	where	a.nr_seq_conta	= nr_seq_conta_w;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_material,
		coalesce(a.qt_material_imp,0),
		coalesce(a.vl_liberado,0),
		a.dt_atendimento
	from	pls_conta_mat	a
	where	a.nr_seq_conta	= nr_seq_conta_w;


BEGIN
nr_seq_conta_w		:= nr_seq_conta_p;
if (ie_verificar_atualiza_p	= 'G') then
	begin
	select	nr_seq_item_sip,
		cd_item_sip,
		cd_classificacao_sip,
		ie_tipo_contratacao,
		ie_segmentacao,
		sg_uf,
		dt_item_sip,
		coalesce(a.dt_ocorrencia,b.dt_emissao)
	into STRICT	nr_seq_item_assistencial_w,
		cd_item_sip_w,
		cd_classificacao_w,
		ie_tipo_contratacao_w,
		ie_segmentacao_w,
		sg_uf_sip_w,
		dt_mes_competencia_w,
		dt_ocorrencia_w
	from	pls_conta			b,
		sip_mov_item_assistencial	a
	where	b.nr_sequencia		= a.nr_seq_conta
	and	((cd_guia		= cd_guia_p)
	or (cd_guia_referencia	= cd_guia_p))
	and	a.ie_considerar_guia	= 'S';
	exception
	when others then
		nr_seq_item_assistencial_w	:= null;
		cd_item_sip_w			:= null;
		cd_classificacao_w		:= null;
		ie_tipo_contratacao_w		:= null;
		ie_segmentacao_w		:= null;
		sg_uf_sip_w			:= null;
		dt_mes_competencia_w		:= null;
		dt_ocorrencia_w			:= null;
	end;

	delete	FROM sip_mov_item_assistencial
	where	nr_seq_conta	= nr_seq_conta_w;
	ie_verificar_atualiza_p	:= 'N';
	if (nr_seq_item_assistencial_w IS NOT NULL AND nr_seq_item_assistencial_w::text <> '') then
		ie_verificar_atualiza_p	:= 'G';
		open C01;
		loop
		fetch C01 into
			nr_seq_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_evento_w,
			vl_despesa_w,
			dt_ocorrencia_item_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			select	nextval('sip_mov_item_assistencial_seq')
			into STRICT	nr_seq_mov_item_sip_w
			;

			insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
				qt_beneficiario, vl_despesa, nr_seq_conta,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
				nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
				sg_uf, cd_item_sip, cd_classificacao_sip,
				dt_item_sip,cd_procedimento,ie_origem_proced,
				dt_ocorrencia)
			values (nr_seq_mov_item_sip_w, cd_estabelecimento_p, 0,
				0, vl_despesa_w, nr_seq_conta_w,
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, nr_seq_proc_w, null,
				nr_seq_item_assistencial_w, ie_tipo_contratacao_w, ie_segmentacao_w,
				sg_uf_sip_w, cd_item_sip_w, cd_classificacao_w,
				dt_mes_competencia_w, cd_procedimento_w,ie_origem_proced_w,
				dt_ocorrencia_item_w);
			end;
		end loop;
		close C01;
		open C02;
		loop
		fetch C02 into
			nr_seq_mat_w,
			nr_seq_material_w,
			qt_evento_w,
			vl_despesa_w,
			dt_ocorrencia_item_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			select	nextval('sip_mov_item_assistencial_seq')
			into STRICT	nr_seq_mov_item_sip_w
			;

			insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
				qt_beneficiario, vl_despesa, nr_seq_conta,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
				nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
				sg_uf, cd_item_sip, cd_classificacao_sip,
				dt_item_sip, nr_seq_material, dt_ocorrencia)
			values (nr_seq_mov_item_sip_w, cd_estabelecimento_p, 0,
				0, vl_despesa_w, nr_seq_conta_w,
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, null, nr_seq_mat_w,
				nr_seq_item_assistencial_w, ie_tipo_contratacao_w, ie_segmentacao_w,
				sg_uf_sip_w, cd_item_sip_w, cd_classificacao_w,
				dt_mes_competencia_w,nr_seq_material_w, dt_ocorrencia_item_w);
			end;
		end loop;
		close C02;
	end if;

elsif (ie_verificar_atualiza_p	= 'GA') then
	open C00;
	loop
	fetch C00 into
		nr_seq_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C00 */
		begin

		delete	FROM sip_mov_item_assistencial
		where	nr_seq_conta	= nr_seq_conta_w;

		select	a.nr_seq_item_assist,
			coalesce(a.ie_nascido_vivo,'N'),
			b.cd_item,
			b.cd_classificacao,
			ie_nascido_vivo,
			qt_idade_inicial,
			qt_idade_final,
			coalesce(ie_unid_tempo_idade,'X'),
			ie_considerar_conta,
			ie_considerar_guia_ref,
			a.nr_sequencia
		into STRICT	nr_seq_item_assistencial_w,
			ie_nasc_vivos_w,
			cd_item_sip_w,
			cd_classificacao_w,
			ie_nascido_vivo_w,
			qt_idade_min_w,
			qt_idade_max_w,
			ie_unid_tempo_idade_w,
			ie_considerar_conta_w,
			ie_considerar_guia_w,
			nr_seq_regra_w
		from	sip_item_assist_regra	a,
			sip_item_assistencial	b
		where	a.nr_seq_item_assist	= b.nr_sequencia
		and	a.ie_situacao		= 'A'
		and	a.nr_sequencia		= nr_seq_regra_p;

		open C01;
		loop
		fetch C01 into
			nr_seq_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_evento_w,
			vl_despesa_w,
			dt_ocorrencia_item_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			select	nextval('sip_mov_item_assistencial_seq')
			into STRICT	nr_seq_mov_item_sip_w
			;

			insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
				qt_beneficiario, vl_despesa, nr_seq_conta,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
				nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
				sg_uf, cd_item_sip, cd_classificacao_sip,
				dt_item_sip,cd_procedimento,ie_origem_proced,
				dt_ocorrencia, ie_considerar_guia)
			values (nr_seq_mov_item_sip_w, cd_estabelecimento_p, 0,
				0, vl_despesa_w, nr_seq_conta_w,
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, nr_seq_proc_w, null,
				nr_seq_item_assistencial_w, ie_tipo_contratacao_p, ie_segmentacao_p,
				sg_uf_sip_p, cd_item_sip_w, cd_classificacao_w,
				dt_mes_competencia_p,cd_procedimento_w,ie_origem_proced_w,
				dt_ocorrencia_item_w, ie_considerar_guia_w);
			end;
		end loop;
		close C01;

		open C02;
		loop
		fetch C02 into
			nr_seq_mat_w,
			nr_seq_material_w,
			qt_evento_w,
			vl_despesa_w,
			dt_ocorrencia_item_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			select	nextval('sip_mov_item_assistencial_seq')
			into STRICT	nr_seq_mov_item_sip_w
			;

			insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
				qt_beneficiario, vl_despesa, nr_seq_conta,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
				nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
				sg_uf, cd_item_sip, cd_classificacao_sip,
				dt_item_sip, nr_seq_material, dt_ocorrencia, ie_considerar_guia)
			values (nr_seq_mov_item_sip_w, cd_estabelecimento_p, 0,
				0, vl_despesa_w, nr_seq_conta_w,
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, null, nr_seq_mat_w,
				nr_seq_item_assistencial_w, ie_tipo_contratacao_p, ie_segmentacao_p,
				sg_uf_sip_p, cd_item_sip_w, cd_classificacao_w,
				dt_mes_competencia_p,nr_seq_material_w, dt_ocorrencia_item_w, ie_considerar_guia_w);
			end;
		end loop;
		close C02;
		end;
	end loop;
	close C00;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sip_considerar_guia ( nr_seq_regra_p bigint, nr_seq_conta_p bigint, cd_guia_p text, ie_tipo_contratacao_p text, ie_segmentacao_p text, sg_uf_sip_p text, dt_mes_competencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ie_verificar_atualiza_p INOUT text) FROM PUBLIC;

