-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE neo_atualiza_matricula ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE



matricula_w		varchar(255);
cod_con_w		varchar(255);
cod_plan_w		varchar(255);
cod_cat_w		varchar(255);
cod_prt_wpd_w		varchar(255);
cod_prt_tasy_w		varchar(255);
matricula_titular_w		varchar(255);
dh_validade_matricula_w	varchar(255);
sn_matricula_ativa_w	varchar(255);
bloq_modif_emp_w		varchar(255);
cod_empresa_w		varchar(255);
co_motivo_inativa_w	varchar(255);
ds_motivo_inativa_w	varchar(255);
cd_pessoa_fisica_w	varchar(10);
nr_sequencia_w		bigint;
nr_matricula_w		varchar(30);
dt_validade_carteira_w	timestamp;
cd_plano_convenio_w	varchar(04);
cd_categoria_w		varchar(10);
ds_erro_w		varchar(255);

codigo_campo_w		varchar(255);
label_campo_w		varchar(255);
valor_campo_w		varchar(255);
qt_existe_w		bigint;

c01 CURSOR FOR
SELECT	codigo_campo,
	label_campo,
	valor_campo
from	w_neo_campo_extra
where	nr_seq_matric_prontuario = nr_sequencia_p;




BEGIN
select	matricula,
	cod_con,
	substr(cod_plan, position('-'  cod_plan) +1, length(cod_plan)),
	cod_prt_wpd,
	cod_prt_tasy,
	matricula_titular,
	dh_validade_matricula,
	sn_matricula_ativa,
	bloq_modif_emp,
	cod_empresa,
	co_motivo_inativa,
	ds_motivo_inativa,
	substr(cod_plan,1, position('-' in cod_plan) -1)
into STRICT	matricula_w,
	cod_con_w,
	cod_plan_w,
	cod_prt_wpd_w,
	cod_prt_tasy_w,
	matricula_titular_w,
	dh_validade_matricula_w,
	sn_matricula_ativa_w,
	bloq_modif_emp_w,
	cod_empresa_w,
	co_motivo_inativa_w,
	ds_motivo_inativa_w,
	cod_cat_w
from	w_neo_matric_prontuario
where	nr_sequencia = nr_sequencia_p;

if (coalesce(cod_prt_tasy_w,'0') <> '0') then
	begin
	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	pessoa_fisica
	where	nr_prontuario = cod_prt_tasy_w;

	if (coalesce(cd_pessoa_fisica_w,'0') <> '0') then
		select	max(nr_sequencia)
		into STRICT	nr_sequencia_w
		from	pessoa_titular_convenio
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	cd_convenio 	= cod_con_w
		and	clock_timestamp() between coalesce(dt_inicio_vigencia,clock_timestamp()) and coalesce(dt_fim_vigencia,clock_timestamp());

		if (coalesce(nr_sequencia_w,0) > 0) then
			begin

			select	cd_categoria,
				cd_usuario_convenio,
				dt_validade_carteira,
				cd_plano_convenio
			into STRICT	cd_categoria_w,
				nr_matricula_w,
				dt_validade_carteira_w,
				cd_plano_convenio_w
			from	pessoa_titular_convenio
			where	nr_sequencia = nr_sequencia_w;

			/*Ver se foi inativada*/

			if (coalesce(co_motivo_inativa_w,'X') <> 'X') then
				begin
				update	pessoa_titular_convenio
				set	dt_fim_vigencia	= clock_timestamp(),
					dt_atualizacao	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia 	= nr_sequencia_w;
				exception
				when others then
					ds_erro_w	:= sqlerrm(SQLSTATE);
					update	w_neo_matric_prontuario
					set	ds_motivo 	= '1' || ds_erro_w
					where	nr_sequencia 	= nr_sequencia_p;
				end;
			end if;

			/*Ver se foi alterada a validade*/

			if (dh_validade_matricula_w IS NOT NULL AND dh_validade_matricula_w::text <> '') and (coalesce(dt_validade_carteira_w, to_date(dh_validade_matricula_w,'yyyy-mm-dd')) <= to_date(dh_validade_matricula_w,'yyyy-mm-dd')) then
				begin
				update	pessoa_titular_convenio
				set	dt_validade_carteira	= to_date(dh_validade_matricula_w,'yyyy-mm-dd'),
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia 		= nr_sequencia_w;
				exception
				when others then
					ds_erro_w	:= sqlerrm(SQLSTATE);
					update	w_neo_matric_prontuario
					set	ds_motivo 	= '3' || ds_erro_w
					where	nr_sequencia 	= nr_sequencia_p;
				end;
			end if;

			if (coalesce(matricula_w,'X') <> 'X') and (matricula_w <> coalesce(nr_matricula_w,'X')) then /*Verifica se houve alteração de matrícula*/
				begin
				/*Fecha a atual e cria uma nova*/

				if (coalesce(cod_cat_w,'X') = coalesce(cd_categoria_w,'X')) then
					delete from pessoa_titular_convenio where nr_sequencia = nr_sequencia_w;
				else
					update	pessoa_titular_convenio
					set	dt_fim_vigencia	= clock_timestamp(),
						dt_atualizacao	= clock_timestamp(),
						nm_usuario	= nm_usuario_p
					where	nr_sequencia 	= nr_sequencia_w;
				end if;

				insert into pessoa_titular_convenio(
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						cd_pessoa_fisica,
						cd_convenio,
						cd_pessoa_titular,
						cd_categoria,
						dt_inicio_vigencia,
						dt_fim_vigencia,
						dt_validade_carteira,
						cd_usuario_convenio,
						cd_plano_convenio,
						cd_empresa_refer,
						cd_usuario_convenio_tit)
					SELECT	nextval('pessoa_titular_convenio_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						cd_pessoa_fisica,
						cd_convenio,
						cd_pessoa_titular,
						cod_cat_w,
						clock_timestamp(),
						null,
						to_date(dh_validade_matricula_w,'yyyy-mm-dd'),
						matricula_w,
						cod_plan_w,
						cd_empresa_refer,
						matricula_titular_w
					from	pessoa_titular_convenio
					where	nr_sequencia = nr_sequencia_w;
				exception
				when others then
					ds_erro_w	:= sqlerrm(SQLSTATE);
					update	w_neo_matric_prontuario
					set	ds_motivo 	= '2' || ds_erro_w
					where	nr_sequencia 	= nr_sequencia_p;
				end;
			elsif (coalesce(cod_plan_w,'X') <> 'X') and (cod_plan_w <> coalesce(cd_plano_convenio_w,'X')) then /*Verifica se houve alteração de plano*/
				begin
				/*Fecha a atual e cria uma nova*/

				if (coalesce(cod_cat_w,'X') = coalesce(cd_categoria_w,'X')) then
					delete from pessoa_titular_convenio where nr_sequencia = nr_sequencia_w;
				else
					update	pessoa_titular_convenio
					set	dt_fim_vigencia	= clock_timestamp(),
						dt_atualizacao	= clock_timestamp(),
						nm_usuario	= nm_usuario_p
					where	nr_sequencia 	= nr_sequencia_w;
				end if;

				insert into pessoa_titular_convenio(
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						cd_pessoa_fisica,
						cd_convenio,
						cd_pessoa_titular,
						cd_categoria,
						dt_inicio_vigencia,
						dt_fim_vigencia,
						dt_validade_carteira,
						cd_usuario_convenio,
						cd_plano_convenio,
						cd_empresa_refer,
						cd_usuario_convenio_tit)
					SELECT	nextval('pessoa_titular_convenio_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						cd_pessoa_fisica,
						cd_convenio,
						cd_pessoa_titular,
						cod_cat_w,
						clock_timestamp(),
						null,
						to_date(dh_validade_matricula_w,'yyyy-mm-dd'),
						matricula_w,
						cod_plan_w,
						cd_empresa_refer,
						matricula_titular_w
					from	pessoa_titular_convenio
					where	nr_sequencia = nr_sequencia_w;
				exception
				when others then
					ds_erro_w	:= sqlerrm(SQLSTATE);
					update	w_neo_matric_prontuario
					set	ds_motivo 	= '4' || ds_erro_w
					where	nr_sequencia 	= nr_sequencia_p;
				end;
			end if;
			end;
		else
			select	max(nr_sequencia)
			into STRICT	nr_sequencia_w
			from	pessoa_titular_convenio
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	cd_convenio	= cod_con_w;

			begin
			select	cd_categoria,
				cd_usuario_convenio,
				cd_plano_convenio,
				dt_validade_carteira
			into STRICT	cd_categoria_w,
				nr_matricula_w,
				cd_plano_convenio_w,
				dt_validade_carteira_w
			from	pessoa_titular_convenio
			where	nr_sequencia = nr_sequencia_w;
			exception
			when others then
				null;
			end;

			if (coalesce(nr_sequencia_w,0) = 0) or
				((coalesce(matricula_w,'X') <> 'X') and (matricula_w <> coalesce(nr_matricula_w,'X'))) then
				begin
				if (coalesce(nr_sequencia_w,0) > 0) and (coalesce(cod_cat_w,'X') = coalesce(cd_categoria_w,'X')) then
					delete from pessoa_titular_convenio where nr_sequencia = nr_sequencia_w;
				end if;

				insert into pessoa_titular_convenio(
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						cd_pessoa_fisica,
						cd_convenio,
						cd_pessoa_titular,
						cd_categoria,
						dt_inicio_vigencia,
						dt_fim_vigencia,
						dt_validade_carteira,
						cd_usuario_convenio,
						cd_plano_convenio,
						cd_empresa_refer,
						cd_usuario_convenio_tit)
					values (	nextval('pessoa_titular_convenio_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						cd_pessoa_fisica_w,
						cod_con_w,
						cd_pessoa_fisica_w,
						cod_cat_w,
						clock_timestamp(),
						null,
						to_date(dh_validade_matricula_w,'yyyy-mm-dd'),
						matricula_w,
						cod_plan_w,
						null,
						matricula_titular_w);
				exception
				when others then
					ds_erro_w	:= sqlerrm(SQLSTATE);
					update	w_neo_matric_prontuario
					set	ds_motivo 	= '5' || ds_erro_w
					where	nr_sequencia 	= nr_sequencia_p;
				end;
			end if;
		end if;

		open C01;
		loop
		fetch C01 into
			codigo_campo_w,
			label_campo_w,
			valor_campo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (codigo_campo_w = 'PESSOA_CLASSIF') and /*classificação*/
				(coalesce(label_campo_w,'X') <> 'X') then
				begin
				select	max(nr_sequencia)
				into STRICT	valor_campo_w
				from	classif_pessoa
				where	upper(ds_classificacao) = upper(label_campo_w);

				if (coalesce(valor_campo_w,'0') <> '0') then
					insert into pessoa_classif(	nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									nr_seq_classif,
									cd_pessoa_fisica,
									dt_inicio_vigencia,
									dt_final_vigencia,
									ds_observacao,
									cd_pessoa_ref,
									cd_estabelecimento,
									ie_clinica,
									dt_inativacao,
									nm_usuario_inativacao,
									ds_justif_inativacao,
									cd_cgc)
								values (nextval('pessoa_classif_seq'),
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									valor_campo_w,
									cd_pessoa_fisica_w,
									clock_timestamp(),
									null,
									'',
									'',
									1,
									'',
									'',
									'',
									'',
									'');
				end if;
				end;
			elsif (codigo_campo_w = 'GRD') and (coalesce(label_campo_w,'X') <> 'X') then  /*Grau de dependência*/
				begin
				if (upper(valor_campo_w) = 'TITULAR') then
					valor_campo_w := '1';
				elsif (position('FILH' in upper(valor_campo_w)) > 0) then
					valor_campo_w := '3';
				elsif (position('ESPOS' in upper(valor_campo_w)) > 0) then
					valor_campo_w := '2';
				else
					valor_campo_w := '9';

					update	pessoa_titular_convenio
					set	ie_grau_dependencia = valor_campo_w
					where	cd_pessoa_fisica = cd_pessoa_fisica_w;
				end if;
				end;
			end if;
			end;
		end loop;
		close C01;

	end if;
	end;
else
	update	w_neo_matric_prontuario
	set	ds_motivo 	= substr(wheb_mensagem_pck.get_texto(305587),1,255)
	where	nr_sequencia 	= nr_sequencia_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE neo_atualiza_matricula ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

