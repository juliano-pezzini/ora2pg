-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_inco_proposta ( nr_seq_proposta_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_inconsistencia_w		bigint;
ie_titul_benef_w		varchar(1);
nr_seq_benef_w			bigint;
nr_seq_grau_parentesco_w	bigint;
qt_idade_benef_w		smallint;
cd_beneficiario_w		varchar(10);
ie_pessoa_proposta_w		varchar(2);
qt_idade_pessoa_proposta_w	bigint;
ie_inadimplente_proposta_w	varchar(1);
cd_pf_proposta_w		varchar(255);
ie_tipo_proposta_w		smallint;
nr_contrato_w			bigint;
nr_seq_contrato_w		bigint;
qt_vidas_propostas_w		bigint;
qt_vidas_contrato_w		bigint;
qt_total_vidas_w		bigint;
nr_seq_beneficiario_w		bigint;
nr_seq_pagador_w		pls_proposta_pagador.nr_sequencia%type;
qt_inconsist_pag_w		bigint;
cd_cgc_pagador_w		pls_proposta_pagador.cd_cgc_pagador%type;
qt_debito_w			double precision;
ie_tipo_inconsist_w		varchar(255);
dt_inicio_proposta_w		timestamp;
ie_inadimplente_regra_w		pls_proposta_inconsist.ie_inadimplente%type;
ie_tipo_inadimplencia_w		pls_proposta_inconsist.ie_tipo_inadimplencia%type;
ie_data_base_inadimplencia_w	pls_proposta_inconsist.ie_data_base_inadimplencia%type;
qt_dias_inadimplente_w		pls_proposta_inconsist.qt_dias_inadimplente%type;
ie_tipo_contrato_w		pls_proposta_inconsist.ie_tipo_contrato%type;
qt_dias_rescindidos_w		pls_proposta_inconsist.qt_dias_rescindidos%type;
ie_lanca_validacao_w		varchar(1);
dt_limite_rescisao_w		timestamp;
qt_benef_rescidido_w		integer;
ie_reajuste_pendente_w		pls_proposta_inconsist.ie_reajuste_pendente%type;
qt_reajuste_calculado_w		bigint;

/* Rotina chamada para o estipulante e para o pagador da proposta */

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_inadimplente,
		coalesce(a.ie_tipo_inadimplencia,'COD'),
		coalesce(a.ie_data_base_inadimplencia,'P'),
		coalesce(a.qt_dias_inadimplente,0),
		coalesce(a.ie_tipo_contrato,0)
	from	pls_proposta_inconsist a
	where	((a.ie_tipo_inconsistencia	= ie_tipo_inconsist_w) or (ie_tipo_inconsistencia	= 'T'))
	and	((coalesce(ie_tipo_contrato,0) = 0) or (ie_tipo_contrato = 2))
	and	a.ie_situacao		= 'A'
	and	a.ie_inadimplente 	= 'S'
	and	ie_tipo_inconsist_w	<> 'B'
	and	a.nr_sequencia not in (SELECT	nr_seq_inconsistencia
				from	pls_proposta_validacao
				where	nr_seq_proposta	= nr_seq_proposta_p)
	and	ie_pessoa_proposta_w	= 'PJ'
	and	qt_total_vidas_w >= coalesce(a.qt_vidas_min,qt_total_vidas_w)
	and	qt_total_vidas_w <= coalesce(a.qt_vidas_max,qt_total_vidas_w)
	
union

	select	a.nr_sequencia,
		a.ie_inadimplente,
		coalesce(a.ie_tipo_inadimplencia,'COD'),
		coalesce(a.ie_data_base_inadimplencia,'P'),
		coalesce(a.qt_dias_inadimplente,0),
		coalesce(a.ie_tipo_contrato,0)
	from	pls_proposta_inconsist a
	where	((a.ie_tipo_inconsistencia	= ie_tipo_inconsist_w) or (ie_tipo_inconsistencia	= 'T'))
	and	((coalesce(ie_tipo_contrato,0) = 0) or (ie_tipo_contrato = 1))
	and	a.ie_situacao		= 'A'	
	and	a.ie_inadimplente 	= 'S'
	and	a.nr_sequencia	not in (select	nr_seq_inconsistencia
					from	pls_proposta_validacao
					where	nr_seq_proposta	= nr_seq_proposta_p)
	and	ie_pessoa_proposta_w	= 'PF'
	and	(a.nr_seq_tipo_documento		= (	select	max(x.nr_seq_tipo_documento)
								from	pls_tipo_documento_pf	x
								where	x.cd_pessoa_fisica	= cd_pf_proposta_w
								and	x.nr_seq_tipo_documento	= a.nr_seq_tipo_documento)
	or	coalesce(a.nr_seq_tipo_documento,0)	= 0)
	and	qt_idade_pessoa_proposta_w between coalesce(qt_idade_minima,0) and coalesce(qt_idade_maxima,99999)
	and	qt_total_vidas_w >= coalesce(a.qt_vidas_min,qt_total_vidas_w)
	and	qt_total_vidas_w <= coalesce(a.qt_vidas_max,qt_total_vidas_w);
	
/* Verificacao atraves do beneficiario */

C02 CURSOR FOR
	SELECT	nr_sequencia,
		CASE WHEN coalesce(nr_seq_titular::text, '') = '' THEN 'T'  ELSE 'D' END ,
		nr_seq_parentesco,
		obter_idade_pf(cd_beneficiario,clock_timestamp(),'A'),
		cd_beneficiario,
		nr_seq_beneficiario
	from	pls_proposta_beneficiario
	where	nr_seq_proposta = nr_seq_proposta_p;

C03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_inadimplente,
		coalesce(a.ie_tipo_inadimplencia,'COD'),
		coalesce(a.ie_data_base_inadimplencia,'P'),
		coalesce(qt_dias_inadimplente,0),
		coalesce(ie_tipo_contrato,0),
		a.qt_dias_rescindidos,
		a.ie_reajuste_pendente
	from	pls_proposta_inconsist a
	where	((a.ie_tipo_inconsistencia	= ie_tipo_inconsist_w) or (a.ie_tipo_inconsistencia	= 'T'))
	and	ie_tipo_inconsist_w	= 'B'
	and (a.ie_titularidade	= ie_titul_benef_w or ie_titularidade = 'A')
	and (a.nr_seq_grau_parentesco	= nr_seq_grau_parentesco_w or coalesce(a.nr_seq_grau_parentesco,0) = 0)
	and	qt_idade_benef_w between coalesce(a.qt_idade_minima,0) and coalesce(a.qt_idade_maxima,99999)
	and	(a.nr_seq_tipo_documento		= (	SELECT	max(x.nr_seq_tipo_documento)
								from	pls_tipo_documento_pf	x
								where	x.cd_pessoa_fisica	= cd_beneficiario_w
								and	x.nr_seq_tipo_documento	= a.nr_seq_tipo_documento)
	or	coalesce(a.nr_seq_tipo_documento,0)	= 0)
	and	((coalesce(ie_tipo_contrato,0) = 0) or (ie_tipo_contrato = 1 and ie_pessoa_proposta_w = 'PF') or (ie_tipo_contrato = 2 and ie_pessoa_proposta_w = 'PJ'))	
	and	a.ie_situacao	= 'A'
	and	a.nr_sequencia not in (select	nr_seq_inconsistencia
				from	pls_proposta_validacao
				where	nr_seq_proposta	= nr_seq_proposta_p
				and	nr_seq_segurado	= nr_seq_benef_w);
/* Fim da verificacao atraves do beneficiario */



/* Verificacao atraves do pagador da proposta */

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		CASE WHEN a.cd_cgc_pagador='' THEN 'PF'  ELSE 'PJ' END ,
		b.ie_tipo_proposta,
		b.nr_seq_contrato,
		a.cd_pagador,
		a.cd_cgc_pagador
	from	pls_proposta_pagador a,
		pls_proposta_adesao b
	where	a.nr_seq_proposta	= b.nr_sequencia
	and	b.nr_sequencia		= nr_seq_proposta_p;
/* Fim da verificacao atraves do pagador da proposta */

BEGIN

delete	from pls_proposta_validacao
where	nr_seq_proposta = nr_seq_proposta_p
and	(nr_seq_inconsistencia IS NOT NULL AND nr_seq_inconsistencia::text <> '')
and	coalesce(dt_liberacao::text, '') = '';

/* Inconsistencias para estipulante da proposta*/

ie_tipo_inconsist_w	:= 'P';

/*Obter dados da proposta*/

select	CASE WHEN cd_cgc_estipulante='' THEN 'PF'  ELSE 'PJ' END ,
	ie_tipo_proposta,
	nr_seq_contrato,
	dt_inicio_proposta
into STRICT	ie_pessoa_proposta_w,
	ie_tipo_proposta_w,
	nr_contrato_w,
	dt_inicio_proposta_w
from	pls_proposta_adesao
where	nr_sequencia	= nr_seq_proposta_p;

if (nr_contrato_w IS NOT NULL AND nr_contrato_w::text <> '') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_contrato_w
	from	pls_contrato
	where	nr_contrato	= nr_contrato_w;
end if;

if (ie_tipo_proposta_w	in (2,4,6)) and (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
	select	count(*)
	into STRICT	qt_vidas_contrato_w
	from	pls_segurado
	where	nr_seq_contrato	= nr_seq_contrato_w
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	coalesce(dt_rescisao::text, '') = '';
end if;

select	count(*)
into STRICT	qt_vidas_propostas_w
from	pls_proposta_beneficiario
where	nr_seq_proposta	= nr_seq_proposta_p;

qt_total_vidas_w	:= coalesce(qt_vidas_propostas_w,0) + coalesce(qt_vidas_contrato_w,0);

if (ie_pessoa_proposta_w	= 'PF') then
	select	obter_idade_pf(cd_estipulante,clock_timestamp(),'A'),
		cd_estipulante
	into STRICT	qt_idade_pessoa_proposta_w,
		cd_pf_proposta_w
	from	pls_proposta_adesao
	where	nr_sequencia	= nr_seq_proposta_p;
elsif (ie_pessoa_proposta_w	= 'PJ') then
	select	pls_obter_debitos_pj(cd_cgc_estipulante)
	into STRICT	ie_inadimplente_proposta_w
	from	pls_proposta_adesao
	where	nr_sequencia	= nr_seq_proposta_p;
end if;	

open C01;
loop
fetch C01 into
	nr_seq_inconsistencia_w,
	ie_inadimplente_regra_w,
	ie_tipo_inadimplencia_w,
	ie_data_base_inadimplencia_w,
	qt_dias_inadimplente_w,
	ie_tipo_contrato_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	CASE WHEN pls_obter_debitos_pf(cd_pf_proposta_w,ie_tipo_inadimplencia_w,ie_data_base_inadimplencia_w,qt_dias_inadimplente_w)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_inadimplente_proposta_w
	;
	
	if (ie_inadimplente_proposta_w = 'S') then
		ie_lanca_validacao_w	:= 'S';
	else
		ie_lanca_validacao_w	:= 'N';
	end if;
	
	if (ie_lanca_validacao_w	= 'S') then
		insert into pls_proposta_validacao(
			nr_sequencia, nr_seq_proposta, nr_seq_inconsistencia,
			ie_consistido, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec)
		values (	nextval('pls_proposta_validacao_seq'), nr_seq_proposta_p, nr_seq_inconsistencia_w,
			'I', clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p);
	end if;
	end;
end loop;
close C01;
/* Fim das inconsistencias para estipulante da proposta*/



/* Inconsistencias para beneficiarios */

open C02;
loop
fetch C02 into	
	nr_seq_benef_w,
	ie_titul_benef_w,
	nr_seq_grau_parentesco_w,
	qt_idade_benef_w,
	cd_beneficiario_w,
	nr_seq_beneficiario_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	ie_tipo_inconsist_w		:= 'B';
	
	open C03;
	loop
	fetch C03 into
		nr_seq_inconsistencia_w,
		ie_inadimplente_regra_w,
		ie_tipo_inadimplencia_w,
		ie_data_base_inadimplencia_w,
		qt_dias_inadimplente_w,
		ie_tipo_contrato_w,
		qt_dias_rescindidos_w,
		ie_reajuste_pendente_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		ie_lanca_validacao_w	:= 'S';
		if (coalesce(ie_inadimplente_regra_w,'N') = 'S') then
			ie_lanca_validacao_w	:= 'N';
			
			select	CASE WHEN pls_obter_debitos_pf(cd_beneficiario_w,ie_tipo_inadimplencia_w,ie_data_base_inadimplencia_w,qt_dias_inadimplente_w)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_inadimplente_proposta_w
			;
			
			if (ie_inadimplente_proposta_w = 'S') then
				ie_lanca_validacao_w	:= 'S';
			end if;
		end if;
		
		if (ie_lanca_validacao_w = 'S') and (qt_dias_rescindidos_w IS NOT NULL AND qt_dias_rescindidos_w::text <> '') then
			if (coalesce(nr_seq_beneficiario_w::text, '') = '') then
				dt_limite_rescisao_w	:= trunc(dt_inicio_proposta_w - qt_dias_rescindidos_w,'dd');
				
				select	count(1)
				into STRICT	qt_benef_rescidido_w
				from	pls_segurado a,
					pls_contrato b
				where	b.nr_sequencia	= a.nr_seq_contrato
				and	a.cd_pessoa_fisica = cd_beneficiario_w
				and	a.ie_tipo_segurado in ('B','R')
				and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
				and	(a.dt_rescisao IS NOT NULL AND a.dt_rescisao::text <> '')
				and	a.dt_rescisao >= dt_limite_rescisao_w
				and	((ie_tipo_contrato_w = 0) or (ie_tipo_contrato_w = 1 and (b.cd_pf_estipulante IS NOT NULL AND b.cd_pf_estipulante::text <> '')) or (ie_tipo_contrato_w = 2 and (b.cd_cgc_estipulante IS NOT NULL AND b.cd_cgc_estipulante::text <> '')));
				
				if (qt_benef_rescidido_w > 0) then
					ie_lanca_validacao_w	:= 'S';
				else --Se nao existir nenhum beneficiario rescindido
					ie_lanca_validacao_w := 'N';
				end if;
			else
				ie_lanca_validacao_w	:= 'N';
			end if;			
		end if;
		
		if (ie_reajuste_pendente_w = 'S' and (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '')) then
			select	count(1)
			into STRICT	qt_reajuste_calculado_w
			from	pls_reajuste a,
				pls_reajuste_tabela b
			where	b.nr_seq_reajuste = a.nr_sequencia
			and	((a.nr_seq_contrato = nr_seq_contrato_w) or (b.nr_seq_contrato = nr_seq_contrato_w))
			and	a.ie_status = 3;

			if (qt_reajuste_calculado_w > 0) then
				ie_lanca_validacao_w := 'S';
			else
				ie_lanca_validacao_w := 'N';
			end if;		
		end if;

		if (ie_lanca_validacao_w	= 'S') then
			insert into pls_proposta_validacao(	nr_sequencia, nr_seq_proposta, nr_seq_inconsistencia,
								ie_consistido, dt_atualizacao, nm_usuario,
								dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_segurado)
						values (		nextval('pls_proposta_validacao_seq'), nr_seq_proposta_p, nr_seq_inconsistencia_w,
								'I', clock_timestamp(), nm_usuario_p,
								clock_timestamp(), nm_usuario_p, nr_seq_benef_w);
		end if;
		end;
	end loop;
	close C03;
	
	end;
end loop;
close C02;
/* Fim das inconsistencias para beneficiarios */



/* Inconsistencias para pagadores */

select	count(1)
into STRICT	qt_inconsist_pag_w
from	pls_proposta_inconsist
where	ie_tipo_inconsistencia	in ('G','T');

if (qt_inconsist_pag_w > 0) then
	ie_tipo_inconsist_w	:= 'G';
	
	open C04;
	loop
	fetch C04 into
		nr_seq_pagador_w,
		ie_pessoa_proposta_w,
		ie_tipo_proposta_w,
		nr_contrato_w,
		cd_pf_proposta_w,
		cd_cgc_pagador_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		if (nr_contrato_w IS NOT NULL AND nr_contrato_w::text <> '') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_contrato_w
			from	pls_contrato
			where	nr_contrato	= nr_contrato_w;
		end if;
		
		if (ie_pessoa_proposta_w	= 'PF') then
			qt_idade_pessoa_proposta_w	:= obter_idade_pf(cd_pf_proposta_w,clock_timestamp(),'A');
		end if;
		
		open C01;
		loop
		fetch C01 into	
			nr_seq_inconsistencia_w,
			ie_inadimplente_regra_w,
			ie_tipo_inadimplencia_w,
			ie_data_base_inadimplencia_w,
			qt_dias_inadimplente_w,
			ie_tipo_contrato_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
				
			if (ie_pessoa_proposta_w	= 'PF') then
				select	CASE WHEN pls_obter_debitos_pf(cd_pf_proposta_w,ie_tipo_inadimplencia_w,ie_data_base_inadimplencia_w,qt_dias_inadimplente_w)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_inadimplente_proposta_w
				;
			elsif (ie_pessoa_proposta_w	= 'PJ') then
				ie_inadimplente_proposta_w	:= pls_obter_debitos_pj(cd_cgc_pagador_w);
			end if;	
			
			if (ie_inadimplente_proposta_w = 'S') then
				ie_lanca_validacao_w	:= 'S';
			else
				ie_lanca_validacao_w	:= 'N';		
			end if;
			
			if (ie_lanca_validacao_w	= 'S') then
				insert into pls_proposta_validacao(
					nr_sequencia, nr_seq_proposta, nr_seq_inconsistencia,
					ie_consistido, dt_atualizacao, nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_pagador)
				values (	nextval('pls_proposta_validacao_seq'), nr_seq_proposta_p, nr_seq_inconsistencia_w,
					'I', clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_pagador_w);
			end if;
			end;
		end loop;
		close C01;
		end;
	end loop;
	close C04;
end if;
/* Fim das inconsistencias para pagadores */



--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_inco_proposta ( nr_seq_proposta_p bigint, nm_usuario_p text) FROM PUBLIC;

