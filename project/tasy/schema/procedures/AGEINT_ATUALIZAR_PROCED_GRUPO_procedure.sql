-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_atualizar_proced_grupo ( nr_seq_grupo_p bigint, nr_seq_proc_interno_p bigint, nr_seq_proced_regra_p bigint, ie_acao_p text, nm_usuario_p text) AS $body$
DECLARE

 
cd_agenda_w		bigint;
qt_proced_gerado_w	bigint;
qt_proced_regra_w	bigint;
			
C01 CURSOR FOR 
	SELECT	distinct b.cd_agenda 
	into STRICT	cd_agenda_w 
	from	ageint_proced_regra a, 
		agenda_regra b 
	where	a.nr_sequencia	= b.nr_seq_proced_regra 
	and	a.nr_seq_grupo	= nr_seq_grupo_p 
	and	(cd_agenda IS NOT NULL AND cd_agenda::text <> '');
			

BEGIN 
 
select	count(*) 
into STRICT	qt_proced_gerado_w 
from	ageint_proced_regra a, 
	agenda_regra b 
where	a.nr_sequencia	= b.nr_seq_proced_regra 
and	a.nr_seq_grupo	= nr_seq_grupo_p;
 
if (qt_proced_gerado_w	> 0) then 
	if (ie_acao_p	= 'N') then--novo 
		open c01;
		loop 
		fetch c01 into	 
			cd_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin 
			insert into agenda_regra(	nr_sequencia, 
							dt_atualizacao, 
							nm_usuario, 
							dt_atualizacao_nrec, 
							nm_usuario_nrec, 
							nr_seq_proc_interno, 
							ie_permite, 
							ie_medico, 
							ie_forma_consistencia, 
							cd_agenda, 
							nr_seq_proced_regra, 
							cd_estabelecimento, 
							IE_AGENDA) 
			values (nextval('agenda_regra_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_proc_interno_p, 
				'S', 
				'E', 
				'M', 
				cd_agenda_w, 
				nr_seq_proced_regra_p, 
				wheb_usuario_pck.get_cd_estabelecimento, 
				CASE WHEN OBTER_TIPO_AGENDA(CD_AGENDA_W)=1 THEN  'CI' WHEN OBTER_TIPO_AGENDA(CD_AGENDA_W)=2 THEN  'E'  ELSE 'T' END );
			end;
		end loop;
		close c01;
	elsif (ie_acao_p	= 'A') then--alterado 
		select	count(*) 
		into STRICT	qt_proced_regra_w 
		from	agenda_regra 
		where	nr_seq_proced_regra	= nr_seq_proced_regra_p;
		 
		if (qt_proced_regra_w	> 0) then 
			update	agenda_regra 
			set	nr_seq_proc_interno	= nr_seq_proc_interno_p, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_seq_proced_regra	= nr_seq_proced_regra_p;
		else 
			insert into agenda_regra(	nr_sequencia, 
							dt_atualizacao, 
							nm_usuario, 
							dt_atualizacao_nrec, 
							nm_usuario_nrec, 
							nr_seq_proc_interno, 
							ie_permite, 
							ie_medico, 
							ie_forma_consistencia, 
							cd_agenda, 
							nr_seq_proced_regra, 
							cd_estabelecimento, 
							IE_AGENDA) 
			values (nextval('agenda_regra_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_proc_interno_p, 
				'S', 
				'E', 
				'M', 
				cd_agenda_w, 
				nr_seq_proced_regra_p, 
				wheb_usuario_pck.get_cd_estabelecimento, 
				CASE WHEN OBTER_TIPO_AGENDA(CD_AGENDA_W)=1 THEN  'CI' WHEN OBTER_TIPO_AGENDA(CD_AGENDA_W)=2 THEN  'E'  ELSE 'T' END );
		end if;
	elsif (ie_acao_p	= 'E') then--excluido 
		delete	FROM agenda_regra 
		where	nr_seq_proced_regra	= nr_seq_proced_regra_p;
	end if;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_atualizar_proced_grupo ( nr_seq_grupo_p bigint, nr_seq_proc_interno_p bigint, nr_seq_proced_regra_p bigint, ie_acao_p text, nm_usuario_p text) FROM PUBLIC;

