-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_custo_imp_repasse ( nr_repasse_terceiro_p bigint ) AS $body$
DECLARE


vl_custo_w    			conta_paciente_resumo.vl_custo%type;
vl_imposto_w  			conta_paciente_resumo.vl_imposto%type;
qt_resumo_w	  			conta_paciente_resumo.qt_resumo%type;
total_custo_w    		double precision := 0;
total_imposto_w  		double precision := 0;
nr_sequencia_proc_w		procedimento_repasse.nr_sequencia%type;
nr_sequencia_mat_w		material_repasse.nr_sequencia%type;
vl_item_w				double precision;
vl_repasse_w			double precision;
vl_coeficiente_w		double precision;
qt_material_w			material_atend_paciente.qt_material%type;
qt_procedimento_w		procedimento_paciente.qt_procedimento%type;
nr_seq_proc_pacote_w	procedimento_paciente.nr_seq_proc_pacote%type;
nr_seq_proc_paciente_w	procedimento_paciente.nr_sequencia%type;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
		sum(coalesce(c.vl_custo,0)),
		sum(coalesce(c.vl_imposto,0)),
		sum(coalesce(c.qt_resumo,0))
from    conta_paciente_resumo c,
		procedimento_paciente b,
		procedimento_repasse  a
where	a.nr_seq_procedimento = b.nr_sequencia
and  	b.nr_interno_conta = c.nr_interno_conta
and		b.cd_procedimento = c.cd_procedimento
and 	b.ie_origem_proced = c.ie_origem_proced
and 	a.nr_repasse_terceiro = nr_repasse_terceiro_p
and		b.nr_sequencia <> coalesce(b.nr_seq_proc_pacote,0)
group by a.nr_sequencia

union	all

select	a.nr_sequencia,
		0,
		0,
		1
from	procedimento_paciente b,
		procedimento_repasse  a
where	a.nr_seq_procedimento = b.nr_sequencia
and 	a.nr_repasse_terceiro = nr_repasse_terceiro_p
and		b.nr_sequencia = coalesce(b.nr_seq_proc_pacote,0);

c02 CURSOR FOR
SELECT	a.nr_sequencia,
		sum(coalesce(c.vl_custo,0)),
		sum(coalesce(c.vl_imposto,0)),
		sum(coalesce(c.qt_resumo,0))
from    conta_paciente_resumo c,
		material_atend_paciente b,
		material_repasse   a
where	a.nr_seq_material	= b.nr_sequencia
and  	b.nr_interno_conta = c.nr_interno_conta
and		b.cd_material = c.cd_material
and 	a.nr_repasse_terceiro = nr_repasse_terceiro_p
group by a.nr_sequencia;

contas CURSOR FOR
	SELECT	c.nr_interno_conta,
			c.ie_status_acerto
	from	conta_paciente c,
			procedimento_paciente b,
			procedimento_repasse a
	where	a.nr_seq_procedimento = b.nr_sequencia
	and		b.nr_interno_conta = c.nr_interno_conta
	and		a.nr_repasse_terceiro = nr_repasse_terceiro_p
	
union

	SELECT	c.nr_interno_conta,
			c.ie_status_acerto
	from	conta_paciente c,
			material_atend_paciente b,
			material_repasse a
	where	a.nr_seq_material = b.nr_sequencia
	and		b.nr_interno_conta = c.nr_interno_conta
	and		a.nr_repasse_terceiro = nr_repasse_terceiro_p;


BEGIN

if (nr_repasse_terceiro_p IS NOT NULL AND nr_repasse_terceiro_p::text <> '') then
	open c01;
	loop
	fetch c01 into
		nr_sequencia_proc_w,
		vl_custo_w,
		vl_imposto_w,
		qt_resumo_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		total_custo_w    := vl_custo_w;
		total_imposto_w  := vl_imposto_w;
		
		select	b.vl_procedimento,
				a.vl_repasse,
				b.qt_procedimento,
				b.nr_seq_proc_pacote,
				b.nr_sequencia
		into STRICT	vl_item_w,
				vl_repasse_w,
				qt_procedimento_w,
				nr_seq_proc_pacote_w,
				nr_seq_proc_paciente_w
		from	procedimento_paciente b,
				procedimento_repasse a
		where	a.nr_seq_procedimento = b.nr_sequencia
		and		a.nr_sequencia = nr_sequencia_proc_w;
		
		if (vl_repasse_w <> 0) then
			vl_coeficiente_w	:= (vl_repasse_w/coalesce(vl_item_w,vl_repasse_w));
		else
			vl_coeficiente_w	:= 1;
		end if;
		
		if (nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') and (nr_seq_proc_paciente_w = nr_seq_proc_pacote_w) then
			select	sum(coalesce(a.vl_custo,0)),
					sum(coalesce(a.vl_imposto,0)),
					1
			into STRICT	vl_custo_w,
					vl_imposto_w,
					qt_resumo_w
			from	conta_paciente_resumo a
			where	a.nr_seq_proc_pacote = nr_seq_proc_pacote_w;
		end if;
		
		if ((qt_resumo_w IS NOT NULL AND qt_resumo_w::text <> '') and qt_resumo_w <> 0) then
			total_custo_w    := (vl_custo_w / qt_resumo_w);
			total_custo_w	:=	(total_custo_w*qt_procedimento_w) * vl_coeficiente_w;
			total_imposto_w  :=  (vl_imposto_w / qt_resumo_w);
			total_imposto_w	:=	(total_imposto_w*qt_procedimento_w) * vl_coeficiente_w;
		end if;		
		
		update	procedimento_repasse a
		set		a.vl_custo = total_custo_w,
				a.vl_imposto = total_imposto_w,
				a.vl_liberado = vl_liberado - (total_custo_w + total_imposto_w),
				a.vl_repasse = vl_repasse - (total_custo_w + total_imposto_w)
		where	a.nr_sequencia = nr_sequencia_proc_w;
	
	end loop;
	close c01;
	vl_coeficiente_w	:= 1;
	open c02;
	loop
	fetch c02 into
		nr_sequencia_mat_w,
		vl_custo_w,
		vl_imposto_w,
		qt_resumo_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		total_custo_w    :=  vl_custo_w;
		total_imposto_w  :=  vl_imposto_w;
		
		select	b.vl_material,
				a.vl_repasse,
				b.qt_material
		into STRICT	vl_item_w,
				vl_repasse_w,
				qt_material_w
		from	material_atend_paciente b,
				material_repasse a
		where	a.nr_seq_material = b.nr_sequencia
		and		a.nr_sequencia = nr_sequencia_mat_w;
		
		if (vl_repasse_w <> 0) then
			vl_coeficiente_w	:= (vl_repasse_w/coalesce(vl_item_w,vl_repasse_w));
		else
			vl_coeficiente_w	:= 1;
		end if;
		
		if ((qt_resumo_w IS NOT NULL AND qt_resumo_w::text <> '') and qt_resumo_w <> 0) then
			total_custo_w	:=	((vl_custo_w / qt_resumo_w)*qt_material_w) * vl_coeficiente_w;
			total_imposto_w	:=	((vl_imposto_w / qt_resumo_w)*qt_material_w) * vl_coeficiente_w;
			
		end if;		
		
		update	material_repasse a
		set		a.vl_custo = total_custo_w,
				a.vl_imposto = total_imposto_w,
				a.vl_liberado = vl_liberado - (total_custo_w + total_imposto_w),
				a.vl_repasse = vl_repasse - (total_custo_w + total_imposto_w)
		where	a.nr_sequencia = nr_sequencia_mat_w;
		
	end loop;
	close c02;
	
	for	r_contas in contas loop
		CALL atualizar_resumo_conta(r_contas.nr_interno_conta,r_contas.ie_status_acerto);
	end loop;
commit;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_custo_imp_repasse ( nr_repasse_terceiro_p bigint ) FROM PUBLIC;

