-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_est_mat_uni_fed_sc ( nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE



ds_primeiro_nivel_w		varchar(255);
ds_segundo_nivel_w		varchar(255);
ds_terceiro_nivel_w		varchar(255);
cd_grupo_estoque_um_w		bigint;
cd_grupo_estoque_dois_w		bigint;
cd_grupo_estoque_tres_w		bigint;
nr_seq_nivel_um_w		bigint;
nr_seq_nivel_dois_w		bigint;
qt_registros_w			integer;
cd_empresa_w			integer;


C01 CURSOR FOR
	SELECT	ds_grupo_estoque,
		cd_grupo_estoque
	from	pls_grupo_est_fed_sc
	where	coalesce(cd_pai::text, '') = ''
	order by 1;

C02 CURSOR FOR
	SELECT	ds_grupo_estoque,
		cd_grupo_estoque
	from	pls_grupo_est_fed_sc
	where	(cd_pai IS NOT NULL AND cd_pai::text <> '')
	and	cd_pai	= cd_grupo_estoque_um_w
	order by 1;

C03 CURSOR FOR
	SELECT	ds_grupo_estoque,
		cd_grupo_estoque
	from	pls_grupo_est_fed_sc
	where	(cd_pai IS NOT NULL AND cd_pai::text <> '')
	and	cd_pai	= cd_grupo_estoque_dois_w
	order by 1;


BEGIN

select	substr(obter_empresa_estab(cd_estabelecimento_p),1,20)
into STRICT	cd_empresa_w
;

open C01;
loop
fetch C01 into
	ds_primeiro_nivel_w,
	cd_grupo_estoque_um_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	--Verifica se o item já existe
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_estrutura_material
	where	cd_externo	= cd_grupo_estoque_um_w;

	-- Se não existir, grava o item
	if (qt_registros_w	= 0) then

	select	nextval('pls_estrutura_material_seq')
	into STRICT	nr_seq_nivel_um_w
	;

	insert into	pls_estrutura_material(nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		cd_empresa,
		cd_estabelecimento,
		ds_estrutura,
		nr_seq_superior,
		cd_externo)
	values (nr_seq_nivel_um_w,
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		cd_empresa_w,
		cd_estabelecimento_p,
		ds_primeiro_nivel_w,
		null,
		cd_grupo_estoque_um_w);

	--Se existir, pega a sequência do item para referência do segundo item (filho)
	else
		select	nr_sequencia
		into STRICT	nr_seq_nivel_um_w
		from	pls_estrutura_material
		where	cd_externo	= cd_grupo_estoque_um_w;

	end if;


	open C02;
	loop
	fetch C02 into
		ds_segundo_nivel_w,
		cd_grupo_estoque_dois_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		select	count(*)
		into STRICT	qt_registros_w
		from	pls_estrutura_material
		where	cd_externo	=  cd_grupo_estoque_dois_w;

		-- Se não existir, grava o item
		if (qt_registros_w	= 0) then

			select	nextval('pls_estrutura_material_seq')
			into STRICT	nr_seq_nivel_dois_w
			;

			insert into	pls_estrutura_material(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				cd_empresa,
				cd_estabelecimento,
				ds_estrutura,
				nr_seq_superior,
				cd_externo)
			values (nr_seq_nivel_dois_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				cd_empresa_w,
				cd_estabelecimento_p,
				ds_segundo_nivel_w,
				nr_seq_nivel_um_w,
				cd_grupo_estoque_dois_w);

		--Se existir, pega a sequência do item para referência do segundo item (filho)
		else
			select	nr_sequencia
			into STRICT	nr_seq_nivel_dois_w
			from	pls_estrutura_material
			where	cd_externo	= cd_grupo_estoque_dois_w;

		end if;

		open C03;
		loop
		fetch C03 into
			ds_terceiro_nivel_w,
			cd_grupo_estoque_tres_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin

			select	count(*)
			into STRICT	qt_registros_w
			from	pls_estrutura_material
			where	cd_externo	=  cd_grupo_estoque_tres_w;

			-- Se não existir, grava o item
			if (qt_registros_w	= 0) then

				insert into	pls_estrutura_material(nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					cd_empresa,
					cd_estabelecimento,
					ds_estrutura,
					nr_seq_superior,
					cd_externo)
				values (nextval('pls_estrutura_material_seq'),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					cd_empresa_w,
					cd_estabelecimento_p,
					ds_terceiro_nivel_w,
					nr_seq_nivel_dois_w,
					cd_grupo_estoque_tres_w);
			end if;


			end;
		end loop;
		close C03;

		end;
	end loop;
	close C02;
	end;

end loop;
close C01;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_est_mat_uni_fed_sc ( nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

