-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_67_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_seq_selecao_w	pls_util_cta_pck.t_number_table;
tb_valido_w			pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w		pls_util_cta_pck.t_varchar2_table_4000;
ds_dado_w			varchar(2000);
nr_seq_selecao_w	pls_oc_cta_selecao_ocor_v.nr_sequencia%type;
ds_sql_w			varchar(1000);
cs_cursor_w			pls_util_pck.t_cursor;
idx					integer;
ds_observacao_1_w	varchar(255);
ds_observacao_2_w	varchar(255);
ds_observacao_3_w	varchar(255);
ds_observacao_4_w	varchar(255);
ds_observacao_5_w	varchar(255);
ds_observacao_6_w	varchar(255);
ds_observacao_7_w	varchar(255);
ds_observacao_8_w	varchar(255);
ds_observacao_9_w	varchar(255);
ds_observacao_10_w	varchar(255);
ds_observacao_11_w	varchar(255);

-- Dados da regra de validação de atributo do item.
c_validacao CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.nr_seq_regra_atrib_web
	from	pls_oc_cta_val_atrib_item a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc;

-- Dados da regra de atributo.
c_regra CURSOR(nr_sequencia_p	pls_regra_atrib_ocor_item.nr_sequencia%type) FOR
	SELECT	a.nm_tabela,
		a.nm_atributo,
		a.ie_obrigatorio
	from	pls_regra_atrib_ocor_imp a
	where	a.nr_sequencia	= nr_sequencia_p
	and	a.ie_situacao	= 'A';

c01 CURSOR(nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	item.dt_fim,
		item.dt_inicio,
		item.dt_execucao_conv,
		item.cd_procedimento_conv,
		item.qt_executado,
		item.nr_seq_setor_atend_conv,
		item.cd_tipo_tabela_conv,
		item.tx_reducao_acrescimo,
		item.ie_via_acesso_conv,
		item.vl_total,
		item.vl_unitario,
		sel.nr_sequencia nr_seq_selecao,
		item.ie_tipo_despesa_conv,
		item.ie_tecnica_utilizada_conv,
		item.nr_sequencia nr_seq_item
	from	pls_oc_cta_selecao_imp sel,
		pls_conta_proc_imp item
	where	sel.nr_id_transacao = nr_id_transacao_pc
	and	sel.ie_valido = 'S'
	and	item.nr_sequencia = sel.nr_seq_conta_proc;

c01_w		c01%rowtype;

c02 CURSOR(nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	item.cd_ref_fabricante,
		item.cd_tipo_tabela_conv,
		item.cd_unidade_medida,
		item.dt_execucao_conv,
		item.dt_fim,
		item.dt_inicio,
		item.nr_aut_funcionamento,
		item.nr_seq_fornec_mat_conv,
		item.nr_seq_material_conv,
		item.nr_registro_anvisa,
		item.nr_seq_setor_atend_conv,
		item.qt_executado,
		item.tx_reducao_acrescimo,
		item.vl_total,
		item.vl_unitario,
		sel.nr_sequencia nr_seq_selecao,
		item.ie_tipo_despesa_conv
	from	pls_oc_cta_selecao_imp sel,
		pls_conta_mat_imp item
	where	sel.nr_id_transacao = nr_id_transacao_pc
	and	sel.ie_valido = 'S'
	and	item.nr_sequencia = sel.nr_seq_conta_mat;

c02_w		c02%rowtype;
BEGIN

idx := 0;

-- Só processa se tiver uma  regra informada
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') then

	--Foram encontradas inconsistências na informação deste item, confira abaixo:
	ds_observacao_1_w:= wheb_mensagem_pck.get_texto(793516);
	--O campo "
	ds_observacao_2_w:= wheb_mensagem_pck.get_texto(793517) || ' "';
	--" deve ser informado.
	ds_observacao_3_w:= '" ' || wheb_mensagem_pck.get_texto(793518) || '.';
	--Procedimento inválido ou inexistente
	ds_observacao_4_w:= wheb_mensagem_pck.get_texto(796784);
	--Taxa inválida
	ds_observacao_5_w:= wheb_mensagem_pck.get_texto(796791);
	--Diária inválida
	ds_observacao_6_w:= wheb_mensagem_pck.get_texto(796793);
	--Pacote inválido
	ds_observacao_7_w:= wheb_mensagem_pck.get_texto(796794);
	--Medicamento não encontrado
	ds_observacao_8_w:= wheb_mensagem_pck.get_texto(798665);
	--Material inválido.
	ds_observacao_9_w:= wheb_mensagem_pck.get_texto(798666);
	--OPME inválido
	ds_observacao_10_w:= wheb_mensagem_pck.get_texto(798667);
	--Gases medicinais inválidos
	ds_observacao_11_w:= wheb_mensagem_pck.get_texto(798668);
	CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', 'N', nr_id_transacao_p, null);
	-- Busca qual regra deve ser processada
	for r_val_w in c_validacao(nr_seq_combinada_p) loop

		-- Se tem regra informada vai atrá dos dados.
		if (r_val_w.nr_seq_regra_atrib_web IS NOT NULL AND r_val_w.nr_seq_regra_atrib_web::text <> '') then

			-- Autaliza a flag temporária de todos os itens para definir qual deve ficar ativo e qual não deve.
			-- Busca os dados da regra de atributo selecionada.
			for r_regra_w in c_regra(r_val_w.nr_seq_regra_atrib_web) loop

				SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;

				if (r_regra_w.nm_tabela = 'PLS_CONTA_PROC_IMP') then
					begin

					open c01(nr_id_transacao_p);
					loop
					fetch c01 into
						c01_w;
					EXIT WHEN NOT FOUND; /* apply on c01 */
						begin

						if (r_regra_w.ie_obrigatorio = 'S') then
							begin

							tb_valido_w(idx):= 	case	when(r_regra_w.nm_atributo = 'dtf') and (coalesce(c01_w.dt_fim::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'dti') and (coalesce(c01_w.dt_inicio::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'dtp') and (coalesce(c01_w.dt_execucao_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'pro') and (coalesce(c01_w.cd_procedimento_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'qte') and (coalesce(c01_w.qt_executado::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'set') and (coalesce(c01_w.nr_seq_setor_atend_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'tab ') and (coalesce(c01_w.cd_tipo_tabela_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'txr') and (coalesce(c01_w.tx_reducao_acrescimo::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'via') and (coalesce(c01_w.ie_via_acesso_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'vlt') and (coalesce(c01_w.vl_total::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'vlu') and (coalesce(c01_w.vl_unitario::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'tcu') and (coalesce(c01_w.ie_tecnica_utilizada_conv::text, '') = '')	then 'S'
												else
													'N'
												end;

							end;



								tb_observacao_w(idx) := ds_observacao_1_w || pls_util_pck.enter_w 	||
											ds_observacao_2_w || Obter_Valor_Dominio(8348, r_regra_w.nm_atributo)		||
											ds_observacao_3_w;


								if (r_regra_w.nm_atributo = 'pro') then
									begin
									tb_observacao_w(idx):= tb_observacao_w(idx) || ' ' || 	case	when(c01_w.ie_tipo_despesa_conv = '1')	then ds_observacao_4_w
																	when(c01_w.ie_tipo_despesa_conv = '2') 	then ds_observacao_5_w
																	when(c01_w.ie_tipo_despesa_conv = '3') 	then ds_observacao_6_w
																	when(c01_w.ie_tipo_despesa_conv = '4') 	then ds_observacao_7_w
																else
																	null
																end;
									end;
								end if;

								tb_seq_selecao_w(idx) := c01_w.nr_seq_selecao;

								idx := idx + 1;


						end if;

						-- sempre que o indice atual atingir o tamanho máximo grava na tabela.
						if (idx = pls_util_cta_pck.qt_registro_transacao_w) then

							--Grava as informações na tabela de seleção
							CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
													tb_valido_w,
													tb_observacao_w,
													nr_id_transacao_p,
													'SEQ');
							--limpa as variáveis
							SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
							idx := 0;
						end if;

						end;
					end loop;
					close c01;


					end;
				elsif (r_regra_w.nm_tabela = 'PLS_CONTA_MAT_IMP') then
					begin

					open c02(nr_id_transacao_p);
					loop
					fetch c02 into
						c02_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */
						begin


						if (r_regra_w.ie_obrigatorio = 'S') then
							begin

							tb_valido_w(idx):= 	case	when(r_regra_w.nm_atributo = 'cdf') and (coalesce(c02_w.cd_ref_fabricante::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'cdt') and (coalesce(c02_w.cd_tipo_tabela_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'cdu') and (coalesce(c02_w.cd_unidade_medida::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'dte') and (coalesce(c02_w.dt_execucao_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'dtf') and (coalesce(c02_w.dt_fim::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'dti') and (coalesce(c02_w.dt_inicio::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'nra') and (coalesce(c02_w.nr_aut_funcionamento::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'nrf') and (coalesce(c02_w.nr_seq_fornec_mat_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'nrm') and (coalesce(c02_w.nr_seq_material_conv::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'nrr') and (coalesce(c02_w.nr_registro_anvisa::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'nrs') and (coalesce(c02_w.nr_seq_setor_atend_conV::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'qte') and (coalesce(c02_w.qt_executado::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'txe') and (coalesce(c02_w.tx_reducao_acrescimo::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'vlt') and (coalesce(c02_w.vl_total::text, '') = '')	then 'S'
														when(r_regra_w.nm_atributo = 'vlu') and (coalesce(c02_w.vl_unitario::text, '') = '')	then 'S'

												else
													'N'
												end;

							end;

							if (tb_valido_w(idx) = 'S') then
								begin

								tb_observacao_w(idx) := ds_observacao_1_w || pls_util_pck.enter_w 	||
											ds_observacao_2_w || Obter_Valor_Dominio(8349, r_regra_w.nm_atributo)		||
											ds_observacao_3_w;

								tb_observacao_w(idx):= tb_observacao_w(idx) || ' ' || 	case	when(c02_w.ie_tipo_despesa_conv = '1')	then ds_observacao_11_w
																when(c02_w.ie_tipo_despesa_conv = '2') 	then ds_observacao_8_w
																when(c02_w.ie_tipo_despesa_conv = '3') 	then ds_observacao_9_w
																when(c02_w.ie_tipo_despesa_conv = '7') 	then ds_observacao_10_w
																else
																	null
																end;
								tb_seq_selecao_w(idx) := c02_w.nr_seq_selecao;

								idx := idx + 1;

								end;
							end if;

						end if;

						-- sempre que o indice atual atingir o tamanho máximo grava na tabela.
						if (idx = pls_util_cta_pck.qt_registro_transacao_w) then

							--Grava as informações na tabela de seleção
							CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
													tb_valido_w,
													tb_observacao_w,
													nr_id_transacao_p,
													'SEQ');
							--limpa as variáveis
							SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
							idx := 0;
						end if;

						end;
					end loop;
					close c02;

					end;
				end if;


				--Grava as informações na tabela de seleção
				CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
										tb_valido_w,
										tb_observacao_w,
										nr_id_transacao_p,
										'SEQ');
				--limpa as variáveis
				SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
			end loop;

			-- Marca como inválido todos os itens que não foram selecionados
			CALL pls_ocor_imp_pck.atualiza_campo_valido('V',
								'N',
								ie_regra_excecao_p,
								null,
								nr_id_transacao_p,
								null);
		end if;
	end loop;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_67_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

