-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cancelar_agecons_futura ((cd_agenda_p bigint, dt_agenda_p timestamp, cd_pessoa_fisica_p text, cd_motivo_p text, ds_observacao_p text, nm_usuario_p text, cd_profissional_p text default null) is dt_cancelamento_w timestamp) RETURNS timestamp AS $body$
BEGIN
	--busca a maior data cancelada do minuto + 1 segundo
	select	/*+ INDEX(AGENDA_CONSULTA AGECONS_I4) */			coalesce(max(dt_agenda), dt_agenda_ww) + (1/86400)
	into STRICT	dt_cancelamento_aux_w
	from	agenda_consulta
	where	trunc(dt_agenda, 'mi') = trunc(dt_agenda_ww, 'mi')
	and		dt_agenda between trunc(dt_agenda_ww) and trunc(dt_agenda_ww) + (86399/86400);
	
	--caso a data obtida tenha ultrapassado o minuto, calcula a data para este novo minuto
	if (trunc(dt_agenda_ww,'mi') <> trunc(dt_cancelamento_aux_w,'mi')) then
		dt_cancelamento_aux_w := calculaDataCancelamento(dt_cancelamento_aux_w);
	end if;
	
	return dt_cancelamento_aux_w;

end;


begin
cancela_hor_prof_w := Obter_Param_Usuario(866, 309, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, cancela_hor_prof_w);
select	max(cd_tipo_agenda)
into STRICT	cd_tipo_agenda_w
from	agenda
where	cd_agenda	= cd_agenda_p;

open	c01;
loop
fetch	c01 into
	nr_seq_agenda_w,cd_medico_w,hr_agenda_w,dt_agenda_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	qt_solic_pront_cip_w	:= 0;
	
	select	dt_agenda
	into STRICT	dt_atual_w
	from 	agenda_consulta
	where	nr_sequencia	= nr_seq_agenda_w;
	
	select	/*+ INDEX(AGENDA_CONSULTA AGECONS_I4) */			coalesce(max(dt_agenda), dt_atual_w)
	into STRICT	dt_cancelamento_w
	from	agenda_consulta
	where	trunc(dt_agenda, 'mi') = trunc(dt_atual_w, 'mi')
	and		dt_agenda between trunc(dt_atual_w) and trunc(dt_atual_w) + (86399/86400);
	
	--Verificar se ja existe outro registro com a mesma data(AGECONS_UK)
	select	count(*)
	into STRICT	qt_segundos_ajuste_w
	from	agenda_consulta
	where	cd_agenda = cd_agenda_p
	and		to_char(dt_agenda, 'dd/mm/yyyy hh24:mi')	= to_char(dt_cancelamento_w, 'dd/mm/yyyy hh24:mi')
	and		dt_agenda between trunc(dt_cancelamento_w) and trunc(dt_cancelamento_w) + (86399/86400)
	and		ie_status_agenda	= 'C';
	
	select	dt_cancelamento_w + (qt_segundos_ajuste_w + 1)/86400
	into STRICT	dt_canc_nova_w
	;
	
	--Validar caso passar de 1 minuto para o proximo agendamento
	select	count(*)
	into STRICT	qt_segundos_ajuste_w
	from	agenda_consulta
	where	cd_agenda = cd_agenda_p
	and		to_char(dt_agenda, 'dd/mm/yyyy hh24:mi')	= to_char(dt_canc_nova_w, 'dd/mm/yyyy hh24:mi')
	and		dt_agenda between trunc(dt_canc_nova_w) and trunc(dt_canc_nova_w) + (86399/86400)
	and		ie_status_agenda	= 'C';

	if (cancela_hor_prof_w = 'N' or ( cancela_hor_prof_w = 'S' and hr_agenda_w = to_char(dt_agenda_p,'hh24:mi') and cd_profissional_p = cd_medico_w and obter_cod_dia_semana(dt_agenda_p) = obter_cod_dia_semana(dt_agenda_w) ) or Obter_Funcao_Ativa <> 866) then
	
	begin
		update	agenda_consulta
		set	ie_status_agenda		= 'C',
			dt_agenda			= dt_canc_nova_w + (qt_segundos_ajuste_w + 1)/86400,
			nm_usuario			= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			cd_motivo_cancelamento	= cd_motivo_p,
			ds_observacao		= CASE WHEN cd_tipo_agenda_w=3 THEN null  ELSE ds_observacao_p END ,
			ds_motivo_status	= CASE WHEN cd_tipo_agenda_w=3 THEN ds_observacao_p  ELSE null END ,
			dt_status		= CASE WHEN cd_tipo_agenda_w=3 THEN clock_timestamp()  ELSE null END ,
			nm_usuario_status	= CASE WHEN cd_tipo_agenda_w=3 THEN nm_usuario_p  ELSE null END
		where	nr_sequencia			= nr_seq_agenda_w;
	
		exception
		when others then
			begin
				update	agenda_consulta
				set	ie_status_agenda		= 'C',
					dt_agenda			= dt_canc_nova_w + (1/1440) + (qt_segundos_ajuste_w + 1)/86400,
					nm_usuario			= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					cd_motivo_cancelamento	= cd_motivo_p,
					ds_observacao		= CASE WHEN cd_tipo_agenda_w=3 THEN null  ELSE ds_observacao_p END ,
					ds_motivo_status	= CASE WHEN cd_tipo_agenda_w=3 THEN ds_observacao_p  ELSE null END ,
					dt_status		= CASE WHEN cd_tipo_agenda_w=3 THEN clock_timestamp()  ELSE null END ,
					nm_usuario_status	= CASE WHEN cd_tipo_agenda_w=3 THEN nm_usuario_p  ELSE null END
				where	nr_sequencia			= nr_seq_agenda_w;
			exception
			when others then
				dt_canc_nova_w := calculaDataCancelamento(dt_cancelamento_w);
				
				update	agenda_consulta
				set	ie_status_agenda		= 'C',
					dt_agenda			= dt_canc_nova_w,
					nm_usuario			= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					cd_motivo_cancelamento	= cd_motivo_p,
					ds_observacao		= CASE WHEN cd_tipo_agenda_w=3 THEN null  ELSE ds_observacao_p END ,
					ds_motivo_status	= CASE WHEN cd_tipo_agenda_w=3 THEN ds_observacao_p  ELSE null END ,
					dt_status		= CASE WHEN cd_tipo_agenda_w=3 THEN clock_timestamp()  ELSE null END ,
					nm_usuario_status	= CASE WHEN cd_tipo_agenda_w=3 THEN nm_usuario_p  ELSE null END
				where	nr_sequencia			= nr_seq_agenda_w;
			end;
	end;
	
	end if;
	--Cancelar solicitacoes de prontuario futuras
	select	count(*)
	into STRICT	qt_solic_pront_cip_w
	from	same_cpi_solic
	where	nr_seq_agenda = nr_seq_agenda_w;
	
	if (cancela_hor_prof_w = 'N' or ( cancela_hor_prof_w = 'S' and hr_agenda_w = to_char(dt_agenda_p,'hh24:mi') and cd_profissional_p = cd_medico_w and obter_cod_dia_semana(dt_agenda_p) = obter_cod_dia_semana(dt_agenda_w) ) or Obter_Funcao_Ativa <> 866) then
	if (qt_solic_pront_cip_w > 0)then
		begin
		CALL cancelar_solic_pront_agenda(nr_seq_agenda_w, nm_usuario_p);
		CALL cancelar_solic_pront_agenda_gp(nr_seq_agenda_w, nm_usuario_p);
		
		exception
		when others then
			ds_erro_w := substr(sqlerrm,1,255);
		end;
	end if;
	end if;

	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cancelar_agecons_futura ((cd_agenda_p bigint, dt_agenda_p timestamp, cd_pessoa_fisica_p text, cd_motivo_p text, ds_observacao_p text, nm_usuario_p text, cd_profissional_p text default null) is dt_cancelamento_w timestamp) FROM PUBLIC;

