-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_convenio_ageint ( cd_pessoa_fisica_p text, cd_tipo_agenda_p bigint, nr_seq_agenda_p bigint, ie_forma_convenio_p text, cd_convenio_p INOUT bigint, cd_categoria_p INOUT text, cd_usuario_convenio_p INOUT text, dt_validade_carteira_p INOUT timestamp, nr_doc_convenio_p INOUT text, cd_tipo_acomodacao_p INOUT bigint, cd_plano_p INOUT text, nm_usuario_p text, ds_observacao_p INOUT text) AS $body$
DECLARE


cd_convenio_w			integer;
cd_categoria_w			varchar(10);
cd_usuario_convenio_w	varchar(30);
dt_validade_w			timestamp;
ie_ano_valido_w			varchar(1);
nr_doc_convenio_w		varchar(20);
cd_tipo_acomodacao_w	smallint;
cd_plano_w				varchar(10);
ds_observacao_w			varchar(4000);


BEGIN
if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (ie_forma_convenio_p IS NOT NULL AND ie_forma_convenio_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	
	if (ie_forma_convenio_p = 'AT') then /* convenio ultimo atendimento */
		SELECT * FROM define_convenio_atend_agenda(cd_pessoa_fisica_p, nm_usuario_p, cd_convenio_w, cd_categoria_w, dt_validade_w, cd_usuario_convenio_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w) INTO STRICT cd_convenio_w, cd_categoria_w, dt_validade_w, cd_usuario_convenio_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w;
	elsif (ie_forma_convenio_p = 'AG') or (ie_forma_convenio_p = 'A') then /* convenio ultimo agendamento */
		SELECT * FROM obter_convenio_ultima_ageint(cd_pessoa_fisica_p, nr_seq_agenda_p, ie_forma_convenio_p, cd_convenio_w, cd_categoria_w, cd_usuario_convenio_w, dt_validade_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w) INTO STRICT cd_convenio_w, cd_categoria_w, cd_usuario_convenio_w, dt_validade_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w;
	end if;	
end if;


/*tbyegmann(29/08/13) - Tratamento para consistir se a data de validade da carteira, possui valor de ano válido
Ex.: 29/08/0013 -> Retorno incorreto, gerava o erro "Divisão por zero"*/
select	substr(rpad(to_char(dt_validade_w,'dd/mm/yyyy'),7),7,7)
into STRICT	ie_ano_valido_w
;

select max(c.cd_convenio)
 into STRICT cd_convenio_w
 from convenio_estabelecimento ce,
	  convenio c
where ce.cd_convenio = c.cd_convenio
  and  c.cd_convenio = cd_convenio_w
  and ce.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento
  and c.ie_situacao = 'A';

if (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then
	cd_convenio_p		:= cd_convenio_w;
	
	SELECT max(cd_categoria) cd
	  into STRICT cd_categoria_w
	  FROM categoria_convenio
	 WHERE ie_situacao = 'A'
	   AND cd_convenio = cd_convenio_w
	   and cd_categoria = cd_categoria_w
	   AND ageint_obter_plano_lib_categ(cd_convenio_w,
										cd_categoria,
										cd_plano_p,
										wheb_usuario_pck.get_cd_estabelecimento,
										trunc(clock_timestamp())) = 'S'
	   AND obter_se_categoria_lib_estab(wheb_usuario_pck.get_cd_estabelecimento, cd_convenio_w, cd_categoria) = 'S';

	if (cd_categoria_w IS NOT NULL AND cd_categoria_w::text <> '') then
		cd_categoria_p		:= cd_categoria_w;
	end if;
							
	if (cd_usuario_convenio_w IS NOT NULL AND cd_usuario_convenio_w::text <> '') then
		cd_usuario_convenio_p	:= cd_usuario_convenio_w;
	end if;					

	if (dt_validade_w IS NOT NULL AND dt_validade_w::text <> '') and (ie_ano_valido_w <> '0') then
		dt_validade_carteira_p	:= dt_validade_w;
	end if;					

	if (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') then
		nr_doc_convenio_p		:= nr_doc_convenio_w;
	end if;					

	if (cd_tipo_acomodacao_w IS NOT NULL AND cd_tipo_acomodacao_w::text <> '') then
		cd_tipo_acomodacao_p	:= cd_tipo_acomodacao_w;
	end if;					

	SELECT max(cd_plano) cd
	  into STRICT cd_plano_w
     FROM convenio_plano
    WHERE cd_convenio = cd_convenio_w
	  and cd_plano = cd_plano_w
      AND ie_situacao = 'A'
      AND ageint_obter_plano_lib_categ(cd_convenio_w,
                                       cd_categoria_w,
                                       CD_PLANO,
                                       wheb_usuario_pck.get_cd_estabelecimento,
                                       trunc(clock_timestamp())) = 'S';


	if (cd_plano_w IS NOT NULL AND cd_plano_w::text <> '') then
		cd_plano_p				:= cd_plano_w;
	end if;					

	if (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '')then
		ds_observacao_p			:= ds_observacao_w;
	end if;					

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_convenio_ageint ( cd_pessoa_fisica_p text, cd_tipo_agenda_p bigint, nr_seq_agenda_p bigint, ie_forma_convenio_p text, cd_convenio_p INOUT bigint, cd_categoria_p INOUT text, cd_usuario_convenio_p INOUT text, dt_validade_carteira_p INOUT timestamp, nr_doc_convenio_p INOUT text, cd_tipo_acomodacao_p INOUT bigint, cd_plano_p INOUT text, nm_usuario_p text, ds_observacao_p INOUT text) FROM PUBLIC;

