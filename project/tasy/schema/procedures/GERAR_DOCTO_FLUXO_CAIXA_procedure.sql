-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_docto_fluxo_caixa () AS $body$
DECLARE


/* ---- Status do agendamento - ie_status_agend ----
-- P - Pendente

-- E - Erro

-- R - Processado

-- A - Em processamento

*/


/* -------- Origem da Informação -------- */


/* -- Identifica de onde vem a informação que será gerada no fluxo de caixa -- 
 TP - Título a pagar
 TPB - Baixa do título a pagar
 TR - Título a receber
 TRB - Baixa do título a receber
 TRT - Tributos a pagar (gerados pelo título a receber)
 CR - Cheque a receber
 CP - Cheque a pagar
 CC - Cartão
 CCB - Baixa de cartão
 RC - Recebimento convênio
 CBT - Controle bancário e Tesouraria
 PR - Projeto recurso
 BP - Borderô a pagar - Entra pelo título(TP)
 PE - Pagamento escritural - Entra pelo título(TP)
 PC - Protocolo convênio
 GR - Glosas a recuperar - Entra pelo título(TR)
 GEF - Gestão de empréstimos e financiamentos
 OC - Ordem de compra  
 CO - Contrato  --  está na consulta do fluxo (será mudado depois)
 PAC - Conta paciente  --  está na consulta do fluxo (será mudado depois)
 RT - Repasse terceiro  --  está na consulta do fluxo( será mudado depois)
 AG - Agenda  --  está na consulta do fluxo (será mudado depois)
*/
ds_log_w		fluxo_caixa_agendamento.ds_log%type;
ie_atualizou_carga_w	varchar(1) := 'N';

c01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_origem_info,
		a.nr_documento,
		a.nr_docto_compl,
		a.dt_referencia_info,
		a.ie_status_agend,
		a.nm_usuario
	from	fluxo_caixa_agendamento a
	where	(a.nr_documento IS NOT NULL AND a.nr_documento::text <> '')
	and (a.ie_status_agend = 'P'
	or (a.ie_status_agend = 'E'
		and ie_origem_info <> 'XFLCX'
		and not exists (SELECT 1
				from	fluxo_caixa_agendamento x
				where	x.nr_sequencia <> a.nr_sequencia
				and	x.nr_documento = a.nr_documento
				and	x.nr_docto_compl = a.nr_docto_compl
				and	x.dt_agendamento > a.dt_agendamento
				and	x.ie_status_agend = 'R')))
	order by ie_origem_info;
				
vet01		c01%rowtype;


BEGIN

	open c01;
	loop
	fetch c01 into
		vet01;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
			ds_log_w := null;
			if (vet01.ie_origem_info = 'XFLCX' and (to_char(clock_timestamp(),'hh24'))::numeric  >= 22 and (to_char(clock_timestamp(),'hh24'))::numeric  <= 23) then
				/* Atualiza o registro da fila para Em processamento */

				update	fluxo_caixa_agendamento
				set	ie_status_agend = 'A',
					dt_atualizacao = clock_timestamp()
				where	nr_sequencia = vet01.nr_sequencia;
			else	
				update	fluxo_caixa_agendamento
				set	ie_status_agend = 'A',
					dt_atualizacao = clock_timestamp()
				where	nr_sequencia = vet01.nr_sequencia
				and  	ie_origem_info <> 'XFLCX';
			end if;
			
			/* Inicia o processamento dos documentos conforme sua origem */

			if (vet01.ie_origem_info in ('TR','TRB','TRT')) then
				ds_log_w := gerar_fluxo_caixa_tit_receb(vet01.nr_documento, vet01.nr_docto_compl, vet01.ie_origem_info, ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('TP','TPB','TPBA')) then
				ds_log_w := gerar_fluxo_caixa_tit_pagar(vet01.nr_documento, vet01.nr_docto_compl, vet01.ie_origem_info, ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('CR')) then
				gerar_fluxo_caixa_cheque_cr(vet01.nr_documento,
							vet01.ie_origem_info,
							ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('CP')) then
				gerar_fluxo_caixa_cheque_cp(vet01.nr_documento,
							vet01.ie_origem_info,
							ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('CC','CCB')) then
				gerar_fluxo_caixa_cartao_cr(vet01.nr_documento,
							vet01.nr_docto_compl,
							vet01.ie_origem_info,
							ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('RC')) then
				gerar_fluxo_caixa_receb_conv(vet01.nr_documento,
							vet01.ie_origem_info,
							ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('CBT')) then
				gerar_fluxo_caixa_movto_trans(vet01.nr_documento,
							null,
							vet01.ie_origem_info,
							vet01.dt_referencia_info,
							ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('CBS')) then
				gerar_fluxo_caixa_movto_trans(vet01.nr_documento,
							vet01.nr_docto_compl,
							vet01.ie_origem_info,
							vet01.dt_referencia_info,
							ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('PR')) then
				gerar_fluxo_caixa_proj_rec(vet01.nr_documento,
							vet01.ie_origem_info,
							ds_log_w);
			end if;
			
			
			if (vet01.ie_origem_info in ('PC')) then
				ds_log_w := gerar_fluxo_caixa_prot_conv(vet01.nr_documento, vet01.ie_origem_info, ds_log_w);
			end if;
			
			if (vet01.ie_origem_info in ('GEF')) then
				gerar_fluxo_caixa_emprest_fin(vet01.nr_documento,
							vet01.nr_docto_compl,
							vet01.ie_origem_info,
							ds_log_w);
			end if;

			if (vet01.ie_origem_info in ('OC')) then
				ds_log_w := GERAR_FLUXO_CAIXA_DOCTO_OC(vet01.nr_documento, vet01.nr_docto_compl, vet01.ie_origem_info, 'S', ds_log_w);
							
			end if;
			
			ie_atualizou_carga_w := 'N';
			/* Realiza o processo de carga do fluxo de caixa. Processo demorado pois irá varrer todos os registros financeiros do sistema. 
			   Será iniciado somente após as 22h e antes das 03h. */
			if (vet01.ie_origem_info = 'XFLCX' and (to_char(clock_timestamp(),'hh24'))::numeric  >= 22 and (to_char(clock_timestamp(),'hh24'))::numeric  <= 23) then
				ds_log_w := gerar_carga_fluxo_caixa(vet01.dt_referencia_info, vet01.nr_sequencia, vet01.ie_origem_info, vet01.nm_usuario, ds_log_w);			

				ie_atualizou_carga_w := 'S';			
									
			end if;		
			
			/* Atualiza a fila após o processamento do registro */

			if (coalesce(ds_log_w,'') <> '') then
				update	fluxo_caixa_agendamento
				set	ie_status_agend = 'E',
					ds_log = ds_log_w,
					dt_processamento = clock_timestamp()
				where	nr_sequencia = vet01.nr_sequencia
				and	 ((ie_origem_info = 'XFLCX' and ie_atualizou_carga_w = 'S') or (ie_origem_info <> 'XFLCX' and ie_atualizou_carga_w = 'N')
					 );				
			else
				update	fluxo_caixa_agendamento
				set	ie_status_agend = 'R',
					dt_processamento = clock_timestamp()
				where	nr_sequencia = vet01.nr_sequencia
				and	 ((ie_origem_info = 'XFLCX' and ie_atualizou_carga_w = 'S') or (ie_origem_info <> 'XFLCX' and ie_atualizou_carga_w = 'N')
					 );
			end if;
			commit;
		exception when others then
			ds_log_w := substr(ds_log_w || ' ' || sqlerrm, 0, 4000);
			begin
				update	fluxo_caixa_agendamento
				set	ie_status_agend = 'E',
					ds_log = ds_log_w,
					dt_processamento = clock_timestamp()
				where	nr_sequencia = vet01.nr_sequencia;
				commit;
			end;
		end;
	end loop;
	close c01;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_docto_fluxo_caixa () FROM PUBLIC;

