-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE psa_configure () AS $body$
DECLARE


  v_id_application                application.id%TYPE;
  v_id_datasource                 datasource.id%TYPE;
  v_id_client                     client.id%TYPE;
  v_nm_datasource                 datasource.nm_datasource%TYPE;
  v_id_role_admin                 role.id%TYPE;
  v_id_permission_settings        permission.id%TYPE;
  v_id_role_permission            role_permission.id_role%TYPE;
  v_id_client_role                client_role.id_role%TYPE;

  /* Tasy Frontend Client. */

  const_client_name               CONSTANT client.nm_client%TYPE := 'tasy_front-end';
  const_client_description        CONSTANT client.nm_client%TYPE := 'Tasy - Sistema de Gestão Hospitalar';
  const_client_secret             CONSTANT client.ds_secret%TYPE := 'ccff3d50-374e-4b2a-8a6b-f3b99347ebd3';

  /* Tasy Application. */

  const_application_name          CONSTANT application.nm_application%TYPE := 'tasy';
  const_application_description   CONSTANT application.ds_application%TYPE := 'Tasy - Sistema de Gestão Hospitalar';

  /* Tasy */

  const_datasource_description    CONSTANT datasource.nm_datasource%TYPE := 'TASY - Base de dados da aplicação';

  /* Tasy administration role */

  const_admin_role_name           CONSTANT role.nm_role%TYPE := 'admin';
  const_admin_role_description    CONSTANT role.ds_role%TYPE := 'Administrator';

  /* Tasy administration permissions */

  const_settings_perm_desc        CONSTANT permission.ds_permission%TYPE := 'Full access to settings';
  const_settings_perm_tag         CONSTANT permission.ds_tag%TYPE := 'settings:*';


BEGIN
  CALL param_pck.clean_cache();

  /* Application. */

  SELECT
    MAX(id)
  INTO STRICT
    v_id_application
  FROM
    application
  WHERE
    nm_application = const_application_name;

  IF
    coalesce(v_id_application::text, '') = ''
  THEN
    INSERT INTO application(
      id,
      dt_creation,
      dt_modification,
      nm_application,
      ds_application
    ) VALUES (
      psa_uuid_generator,
      clock_timestamp(),
      clock_timestamp(),
      const_application_name,
      const_application_description
    ) RETURNING id INTO v_id_application;

  END IF;

  /* Client. */

  SELECT
    MAX(id)
  INTO STRICT
    v_id_client
  FROM
    client
  WHERE
    nm_client = const_client_name;

  IF
    coalesce(v_id_client::text, '') = ''
  THEN
    INSERT INTO client(
      id,
      dt_creation,
      dt_modification,
      id_application,
      nm_client,
      ds_client,
      ds_secret,
      vl_allowed_login_attempts,
      vl_tasy_parameter
    ) VALUES (
      psa_uuid_generator,
      clock_timestamp(),
      clock_timestamp(),
      v_id_application,
      const_client_name,
      const_client_description,
      const_client_secret,
      5,
      'S'
    ) RETURNING id INTO v_id_client;

  END IF;

  v_nm_datasource := obter_valor_param_usuario(0, 231, 0, null, 0);

  /* Datasource. */

  SELECT
    MAX(id)
  INTO STRICT
    v_id_datasource
  FROM
    datasource
  WHERE
    nm_datasource = v_nm_datasource
  AND
    id_application = v_id_application;

  IF
    coalesce(v_id_datasource::text, '') = ''
  THEN
    INSERT INTO datasource(
      id,
      dt_creation,
      dt_modification,
      id_application,
      nm_datasource,
      ds_datasource,
      vl_allowed_login_attempts
    ) VALUES (
      psa_uuid_generator,
      clock_timestamp(),
      clock_timestamp(),
      v_id_application,
      v_nm_datasource,
      const_datasource_description,
      5
    ) RETURNING id INTO v_id_datasource;

  END IF;

  /* Grant access for clients in tasy_datasource. */

  INSERT INTO datasource_client(
    id_datasource,
    id_client
  ) SELECT
    v_id_datasource,
    v_id_client

  WHERE
    NOT
      EXISTS (
        SELECT
          1
        FROM
          datasource_client
        WHERE
            id_datasource = v_id_datasource
          AND
            id_client = v_id_client
      );

  /* Admin role */

  SELECT
    MAX(id)
  INTO STRICT
    v_id_role_admin
  FROM
    role
  WHERE
    nm_role = const_admin_role_name    
  AND
    id_application = v_id_application;

  IF
    coalesce(v_id_role_admin::text, '') = ''
  THEN
     INSERT INTO role(
          id,
          dt_creation,
          dt_modification,
          id_application,
          nm_role,
          ds_role,
          ie_default
        ) VALUES (
          psa_uuid_generator,
          clock_timestamp(),
          clock_timestamp(),
          v_id_application,
          const_admin_role_name,
          const_admin_role_description,          
          'N'
        ) RETURNING id INTO v_id_role_admin;
  END IF;

  /* Settings management permission */

  
  SELECT
    MAX(id)
  INTO STRICT
    v_id_permission_settings
  FROM
    permission
  WHERE
    ds_tag = const_settings_perm_tag    
  AND
    id_application = v_id_application;

  IF
    coalesce(v_id_permission_settings::text, '') = ''
  THEN
     INSERT INTO permission(
          id,
          dt_creation,
          dt_modification,
          id_application,
          ds_tag,
          ds_permission
        ) VALUES (
          psa_uuid_generator,
          clock_timestamp(),
          clock_timestamp(),
          v_id_application,
          const_settings_perm_tag,
          const_settings_perm_desc
        ) RETURNING id INTO v_id_permission_settings;
  END IF;

  /* Link admin role to settings permission */

  
  SELECT
    MAX(id_role)
  INTO STRICT
    v_id_role_permission
  FROM
    role_permission
  WHERE
    id_role = v_id_role_admin    
  AND
    id_permission = v_id_permission_settings;

  IF
    coalesce(v_id_role_permission::text, '') = ''
  THEN
     INSERT INTO role_permission(
          dt_creation,
          dt_modification,
          id_role,
          id_permission
        ) VALUES (
          clock_timestamp(),
          clock_timestamp(),
          v_id_role_admin,
          v_id_permission_settings
        );
  END IF;

  /* Grant admin role to tasy client */

  
  SELECT
    MAX(id_role)
  INTO STRICT
    v_id_client_role
  FROM
    client_role
  WHERE
    id_role = v_id_role_admin    
  AND
    id_client = v_id_client;

  IF
    coalesce(v_id_client_role::text, '') = ''
  THEN
     INSERT INTO client_role(
          dt_creation,
          dt_modification,
          id_role,
          id_client
        ) VALUES (
          clock_timestamp(),
          clock_timestamp(),
          v_id_role_admin,
          v_id_client
        );
  END IF;

  psa_synchronize_subject;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE psa_configure () FROM PUBLIC;

