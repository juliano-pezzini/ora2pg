-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_6_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
nr_index_sel_w		integer;
ds_obs1_w		varchar(4000);
ds_obs2_w		varchar(4000);
ds_obs_w		varchar(4000);
tb_seq_selecao_w	pls_util_cta_pck.t_number_table;
tb_valido_w		pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w		pls_util_cta_pck.t_varchar2_table_4000;
ie_gera_ocor_w		varchar(1);

-- Informações da validação de período de internação com relação ao item
C01 CURSOR(	nr_seq_oc_cta_comb_p	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_validacao,
		a.ie_item_periodo_internacao,
		a.ie_utiliza_tipo_data,
		a.ie_tratamento_horario
	from	pls_oc_cta_val_item_inter a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

C02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	sel.nr_sequencia,
		'P' ie_tipo_item,
		proc.dt_inicio,
		proc.dt_execucao_trunc_conv,
		pls_manipulacao_datas_pck.obter_data_mais_hora(proc.dt_execucao_conv, proc.dt_inicio) 	dt_inicio_item_conv,
		pls_manipulacao_datas_pck.obter_data_mais_hora(proc.dt_execucao_conv, proc.dt_fim)	dt_fim_item_conv,
		conta.dt_inicio_faturamento,
		conta.dt_fim_faturamento,
		trunc(conta.dt_inicio_faturamento,'dd') dt_inicio_faturamento_trunc,
		trunc(conta.dt_fim_faturamento,'dd') 	dt_fim_faturamento_trunc,
		prot.ie_tipo_guia,
		coalesce(conta.ie_tipo_internado_conv,'A')	ie_internado
	from	pls_oc_cta_selecao_imp sel,
		pls_conta_proc_imp proc,
		pls_conta_imp conta,
		pls_protocolo_conta_imp prot
	where	sel.nr_id_transacao 	= nr_id_transacao_pc
	and	sel.ie_valido 		= 'S'
	and	proc.nr_sequencia  	= sel.nr_seq_conta_proc
	and	conta.nr_sequencia 	= proc.nr_seq_conta
	and	prot.nr_sequencia	= conta.nr_seq_protocolo
	
union all

	SELECT	sel.nr_sequencia,
		'M' ie_tipo_item,
		mat.dt_inicio,
		mat.dt_execucao_trunc_conv,
		mat.dt_inicio				dt_inicio_item_conv,
		mat.dt_fim				dt_fim_item_conv,
		conta.dt_inicio_faturamento,
		conta.dt_fim_faturamento,
		trunc(conta.dt_inicio_faturamento,'dd') dt_inicio_faturamento_trunc,
		trunc(conta.dt_fim_faturamento,'dd') 	dt_fim_faturamento_trunc,
		prot.ie_tipo_guia,
		coalesce(conta.ie_tipo_internado_conv,'A')	ie_internado
	from	pls_oc_cta_selecao_imp sel,
		pls_conta_mat_imp mat,
		pls_conta_imp conta,
		pls_protocolo_conta_imp prot
	where	sel.nr_id_transacao 	= nr_id_transacao_pc
	and	sel.ie_valido 		= 'S'
	and	mat.nr_sequencia  	= sel.nr_seq_conta_mat
	and 	conta.nr_sequencia 	= mat.nr_seq_conta
	and	prot.nr_sequencia  	= conta.nr_seq_protocolo;

BEGIN
-- Deve existir informação da regra para aplicar a validação
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') and (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '') then

	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', 'N', nr_id_transacao_p, null);

	--limpa as variáveis
	SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
	nr_index_sel_w := 0;
	--O item foi executado dentro do período em que o beneficiário ficou internado
	ds_obs1_w      := wheb_mensagem_pck.get_texto(371535);
	--O item foi executado fora do período em que o beneficiário ficou internado
	ds_obs2_w      := wheb_mensagem_pck.get_texto(371538);

	for	r_C01_w in C01(nr_seq_combinada_p) loop

		for	r_C02_w in C02(nr_id_transacao_p) loop

			if (r_C02_w.ie_internado = 'I') then

				ie_gera_ocor_w  := 'N';
				ds_obs_w	:= '';
				-- Verificar o tipo de validacao sleecionada
				-- Se for para buscar os itens dentro do periodo de internação
				if (r_C01_w.ie_item_periodo_internacao = 'DP') then

					--O item foi executado dentro do período em que o beneficiário ficou internado
					ds_obs_w := ds_obs1_w;

					--Guia de honorário individual(Quando a validação da data inicio e fim item for sobre a mesma conta e o tipo guia for honorario individual, então, a
					--validação deve ser feita considerando os campos d_inicio e dt_fim faturamento da guia de honorario)
					--Não é necessário fazer validação de horário pois os campos dt_inicio_faturamento e dt_fim_faturamento não possuem horário
					if (r_C02_w.ie_tipo_guia = '6') then

						if (r_C02_w.ie_tipo_item = 'P') then
							--Inicio do proc/mat maior que data de inicio de internação
							--e data fim do procedimento antes da data da alta da internação(ou caso ainda não tenha a data da alta)
							if	((r_C02_w.dt_execucao_trunc_conv >= r_C02_w.dt_inicio_faturamento_trunc) and (coalesce(r_C02_w.dt_fim_faturamento_trunc::text, '') = '' or r_C02_w.dt_execucao_trunc_conv <= r_C02_w.dt_fim_faturamento_trunc)) then

								ie_gera_ocor_w := 'S';
							end if;
						end if;
					else
						--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então
						--pega horarios inicias de conta truncados.
						if	((r_C01_w.ie_tratamento_horario = 'D') or
							((r_C01_w.ie_tratamento_horario = 'H') and coalesce(r_C02_w.dt_inicio::text, '') = '')) then
							 --Inicio do proc/mat maior que data de inicio de internação
							--e data fim do procedimento antes da data da alta da internação(ou caso ainda não tenha a data da alta)
							if	((r_C02_w.dt_execucao_trunc_conv >= r_C02_w.dt_inicio_faturamento_trunc) and (coalesce(r_C02_w.dt_fim_faturamento_trunc::text, '') = '' or r_C02_w.dt_execucao_trunc_conv <= r_C02_w.dt_fim_faturamento_trunc)) then

								ie_gera_ocor_w := 'S';
							end if;

						else
							--Inicio do proc/mat maior que data de inicio de internação
							--e data fim do procedimento antes da data da alta da internação(ou caso ainda não tenha a data da alta)
							if	((r_C02_w.dt_inicio_item_conv >= r_C02_w.dt_inicio_faturamento) and (coalesce(r_C02_w.dt_fim_faturamento::text, '') = '' or r_C02_w.dt_fim_item_conv <= r_C02_w.dt_fim_faturamento)) then

								ie_gera_ocor_w := 'S';
							end if;
						end if;
					end if;
				-- Se for para buscar os itens fora do periodo de internacao
				elsif (r_C01_w.ie_item_periodo_internacao = 'FP') then

					--O item foi executado fora do período em que o beneficiário ficou internado
					ds_obs_w := ds_obs2_w;
					--Guia de honorário individual(Quando a validação da data inicio e fim item for sobre a mesma conta e o tipo guia for honorario individual, então, a
					--validação deve ser feita considerando os campos d_inicio e dt_fim faturamento da guia de honorario)
					--Não é necessário fazer validação de horário pois os campos dt_inicio e dt_fim_faturamento não possuem horário
					if (r_C02_w.ie_tipo_guia = '6') then

						if (r_C02_w.ie_tipo_item = 'P') then

							if	((r_C02_w.dt_execucao_trunc_conv < r_C02_w.dt_inicio_faturamento_trunc) or ((r_C02_w.dt_fim_faturamento_trunc IS NOT NULL AND r_C02_w.dt_fim_faturamento_trunc::text <> '') and r_C02_w.dt_execucao_trunc_conv > r_C02_w.dt_fim_faturamento_trunc)) then

								ie_gera_ocor_w := 'S';
							end if;
						end if;

					else
						--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então
						--pega horarios inicias de conta truncados.
						if	((r_C01_w.ie_tratamento_horario = 'D') or
							((r_C01_w.ie_tratamento_horario = 'H') and coalesce(r_C02_w.dt_inicio::text, '') = '')) then

							if	((r_C02_w.dt_execucao_trunc_conv < r_C02_w.dt_inicio_faturamento_trunc) or ((r_C02_w.dt_fim_faturamento_trunc IS NOT NULL AND r_C02_w.dt_fim_faturamento_trunc::text <> '') and r_C02_w.dt_execucao_trunc_conv > r_C02_w.dt_fim_faturamento_trunc))then

								ie_gera_ocor_w := 'S';
							end if;
						else
							if	((r_C02_w.dt_inicio_item_conv < r_C02_w.dt_inicio_faturamento) or (r_C02_w.dt_inicio_item_conv > r_C02_w.dt_fim_faturamento) or ((r_C02_w.dt_fim_faturamento IS NOT NULL AND r_C02_w.dt_fim_faturamento::text <> '') and r_C02_w.dt_fim_item_conv > r_C02_w.dt_fim_faturamento))then

								ie_gera_ocor_w := 'S';
							end if;
						end if;
					end if;
				end if;

				if (ie_gera_ocor_w = 'S') then

					tb_seq_selecao_w(nr_index_sel_w) := r_C02_w.nr_sequencia;
					tb_observacao_w(nr_index_sel_w)  := ds_obs_w;
					tb_valido_w(nr_index_sel_w) 	 := 'S';

					if (nr_index_sel_w >= pls_cta_consistir_pck.qt_registro_transacao_w ) then

						--Grava o que restar nas variáveis na tabela
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ');
						--limpa as variáveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;

						nr_index_sel_w		:= 0;
					else
						nr_index_sel_w := nr_index_sel_w + 1;
					end if;
				end if;
			end if;
		end loop; --C02
	end loop; -- C01
	--Grava o que restar nas variáveis na tabela
	CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
							tb_observacao_w, nr_id_transacao_p,
							'SEQ');

	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N',
						ie_regra_excecao_p, null,
						nr_id_transacao_p, null);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_6_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

