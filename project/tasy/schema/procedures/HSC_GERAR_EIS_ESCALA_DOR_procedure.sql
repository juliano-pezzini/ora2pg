-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hsc_gerar_eis_escala_dor ( dt_sinal_vital_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text ) AS $body$
DECLARE

nr_atendimento_w			bigint;
cd_setor_atendimento_w		integer;
qt_reavaliacao_com_dor_w		bigint;
qt_reavaliacao_sem_dor_w		bigint;
dt_sinal_vital_avaliacao_w		timestamp;
dt_inicio_w			timestamp;
dt_fim_w				timestamp;
dt_avaliacao_dia_w			timestamp;
qt_avaliacao_w			bigint;
qt_avaliacao_dor_w		bigint;
qt_avaliacao_sem_dor_w		bigint;
nr_seq_min_intensidade_w		bigint;
cd_turno_w			smallint;
hr_inicio_dia_w			varchar(10);
hr_fim_dia_w			varchar(10);
ds_gravou_w			varchar(1);
ds_gravou_dor_w			varchar(1);
ds_gravou_intensidade_w		varchar(1);
nr_seq_turno_w			bigint;
nr_min_seq_turno_w		bigint;
nr_max_intensidade_w		bigint;
qt_se_max_intensidade_w		bigint;
qt_paciente_dor_w			bigint;
ds_turno_w			varchar(255);
qt_turno_w			bigint;
qt_turnos_registro_w		bigint;
dt_sinal_vital_w			timestamp;
qt_intensidade_w			bigint;
nr_sequencia_com_dor_w		bigint;
nr_sequencia_sem_dor_w		bigint;

 
C01 CURSOR FOR 
	SELECT	a.nr_atendimento, 
		a.cd_setor_atendimento 
	from	resumo_atendimento_paciente_v a 
	where	trunc(a.dt_entrada) <= dt_inicio_w 
	and	coalesce(a.dt_alta,dt_fim_w)	>= dt_fim_w 
	order by 	a.nr_atendimento;

C02 CURSOR FOR 
	SELECT	* 
	from	atendimento_sinal_vital 
	where	nr_Atendimento = nr_atendimento_w 
	and (cd_escala_dor IS NOT NULL AND cd_escala_dor::text <> '') and (qt_escala_dor IS NOT NULL AND qt_escala_dor::text <> '') 
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') 
	and	coalesce(dt_inativacao::text, '') = '' 
	and	coalesce(cd_Setor_atendimento,cd_setor_atendimento_w) = cd_setor_atendimento_w 
	and	dt_sinal_vital between dt_inicio_w and dt_fim_w;

C03 CURSOR FOR 
	SELECT	to_date('01/01/1999' || ' ' || to_char(dt_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') dt_inicial, 
		to_date('01/01/1999' || ' ' || to_char(dt_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') dt_final, 
		to_date('01/01/1999' || ' ' || to_char(dt_sinal_vital_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') dt_atual, 
		nr_sequencia 
	from	turno_atendimento 
	order by 	coalesce(ds_turno,0);

 
Cw02	C02%RowType;
Cw03	C03%RowType;


BEGIN 
 
 
begin 
select	coalesce(min(to_char(dt_inicial,'hh24:mi:ss')),'00:00:00') 
into STRICT	hr_inicio_dia_w 
from 	turno_atendimento 
where	to_char(dt_inicial,'hh24') <>'00' 
and 	(to_char(dt_inicial,'hh24') IS NOT NULL AND (to_char(dt_inicial,'hh24'))::text <> '');
 
select	coalesce(min(to_char(dt_final,'hh24:mi:ss')),'23:59:59') 
into STRICT	hr_fim_dia_w 
from 	turno_atendimento;
 
if (hr_fim_dia_w > hr_inicio_dia_w) then 
	 
	select	coalesce(max(to_char(dt_final,'hh24:mi:ss')),'23:59:59') 
	into STRICT	hr_fim_dia_w 
	from 	turno_atendimento;
	 
end if;
 
select	min(nr_sequencia) 
into STRICT	nr_min_seq_turno_w 
from	turno_atendimento;
 
dt_inicio_w	:= to_date(to_char(dt_sinal_vital_p,'dd/mm/yyyy')|| ' ' || hr_inicio_dia_w,'dd/mm/yyyy hh24:mi:ss');
dt_fim_w		:= to_date(to_char((dt_sinal_vital_p + 1),'dd/mm/yyyy')|| ' ' ||hr_fim_dia_w,'dd/mm/yyyy hh24:mi:ss');
 
 
 
delete	from w_eis_escala_dor 
where  	dt_sinal_vital = trunc(dt_sinal_vital_p);
 
commit;
 
select 	nr_sequencia 
into STRICT	nr_seq_min_intensidade_w 
from	escala_dor_regra 
where	qt_intensidade	= (	SELECT 	min(qt_intensidade) 
				from	escala_dor_regra);			
				 
nr_max_intensidade_w	:= 0;
qt_intensidade_w 	:= 0;
				 
select 	max(b.qt_intensidade) 
into STRICT	qt_intensidade_w 
from	atendimento_sinal_vital a, 
	escala_dor_regra b 
where	a.nr_seq_result_dor = b.nr_sequencia 
and	a.dt_sinal_vital between dt_inicio_w and dt_fim_w;
 
if (qt_intensidade_w IS NOT NULL AND qt_intensidade_w::text <> '') then 
 
	select	nr_sequencia 
	into STRICT	nr_max_intensidade_w 
	from	escala_dor_regra 
	where	qt_intensidade = qt_intensidade_w;
 
 
	open C01;
	loop 
	fetch C01 into 
		nr_atendimento_w, 
		cd_setor_atendimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		ds_gravou_w		:= 'N';
		ds_gravou_dor_w		:= 'N';
		ds_gravou_intensidade_w	:= 'N';
		qt_avaliacao_w 		:= 0;
		qt_avaliacao_dor_w 	:= 0;
		qt_paciente_dor_w	:= 0;
		qt_reavaliacao_com_dor_w:= 0;
		qt_reavaliacao_sem_dor_w:= 0;
		qt_avaliacao_sem_dor_w	:= 0;	
		nr_seq_turno_w		:= nr_min_seq_turno_w;
		ds_turno_w 		:= '0';
		qt_turno_w 		:= 0;
 
		open	c02;
		loop 
		fetch	c02 into 
			Cw02;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin 
 
			qt_avaliacao_w 		 := 1;
			qt_avaliacao_dor_w 	 := 0;
			qt_avaliacao_sem_dor_w	 := 0;
			qt_reavaliacao_com_dor_w := 0;
			qt_reavaliacao_sem_dor_w := 0;
			qt_se_max_intensidade_w	 := 0;
			qt_paciente_dor_w	 := 0;
			nr_sequencia_com_dor_w	 := 0;
			nr_sequencia_sem_dor_w	 := 0;
			nr_seq_turno_w	     := null;
			dt_sinal_vital_w	 := Cw02.dt_sinal_vital;
 
			OPEN c03;
			LOOP 
			FETCH c03 into	Cw03;
			EXIT WHEN NOT FOUND; /* apply on c03 */
 
				if	(Cw03.dt_atual >= Cw03.dt_inicial AND Cw03.dt_atual <= Cw03.dt_final) or 
					((Cw03.dt_final < Cw03.dt_inicial) and 
					 ((Cw03.dt_atual >= Cw03.dt_inicial) or (Cw03.dt_atual <= Cw03.dt_final))) then 
					nr_seq_turno_w	:= Cw03.nr_sequencia;
				end if;
				 
			END LOOP;
			CLOSE c03;			
			 
			if (cw02.cd_escala_dor IS NOT NULL AND cw02.cd_escala_dor::text <> '') and (cw02.qt_escala_dor >=3) then		 
				qt_avaliacao_dor_w := 1;
			else 
				qt_avaliacao_sem_dor_w := 1;
			end if;
			 
			if (ds_gravou_dor_w = 'N') and (qt_avaliacao_dor_w = 1) then 
				qt_paciente_dor_w := 1;
			end if;	
 
			select 	min(dt_sinal_vital) 
			into STRICT	dt_sinal_vital_avaliacao_w 
			from	atendimento_sinal_vital 
			where	nr_Atendimento = nr_atendimento_w 
			and	dt_sinal_vital between dt_inicio_w and dt_fim_w 
			and	(cd_escala_dor IS NOT NULL AND cd_escala_dor::text <> '') 
			and	(qt_escala_dor IS NOT NULL AND qt_escala_dor::text <> '');
			 
			select 	max(nr_sequencia) 
			into STRICT	nr_sequencia_com_dor_w 
			from	atendimento_sinal_vital 
			where	nr_Atendimento = cw02.nr_atendimento 
			and	dt_sinal_vital between dt_inicio_w and dt_fim_w 
			and	(cd_escala_dor IS NOT NULL AND cd_escala_dor::text <> '') 
			and	(qt_escala_dor IS NOT NULL AND qt_escala_dor::text <> '') 
			and	nr_seq_result_dor > nr_seq_min_intensidade_w 
			and	nr_sequencia < cw02.nr_sequencia 
			and	cw02.dt_sinal_vital < (dt_sinal_vital + ((1/24) *1));
			 
			 
			if (qt_avaliacao_dor_w > 0) and (nr_sequencia_com_dor_w <> 0) then 
				qt_reavaliacao_com_dor_w := 1;
			end if;
 
			if (qt_avaliacao_sem_dor_w > 0) and (nr_sequencia_com_dor_w <> 0) then 
				qt_reavaliacao_sem_dor_w := 1;
			end if;
			 
			if (cw02.nr_seq_result_dor = nr_max_intensidade_w) and ( ds_gravou_intensidade_w = 'N') then 
				qt_se_max_intensidade_w := 1;
				ds_gravou_intensidade_w := 'S';
			else 
				qt_se_max_intensidade_w := 0;
			end if;
							 
			if (hr_fim_dia_w < hr_inicio_dia_w) and (cw02.dt_sinal_vital < to_date(to_char(cw02.dt_sinal_vital,'dd/mm/yyyy') || ' ' || hr_fim_dia_w,'dd/mm/yyyy hh24:mi:ss')) then 
				dt_avaliacao_dia_w := (cw02.dt_sinal_vital) - 1;
			else 
				dt_avaliacao_dia_w := (cw02.dt_sinal_vital);
			end if;
			 
			insert into w_eis_escala_dor( 
				nr_sequencia, 
				nr_atendimento, 
				nm_usuario, 
				dt_sinal_vital, 
				dt_atualizacao, 
				cd_setor_atendimento, 
				cd_pessoa_fisica, 
				qt_avaliacao, 
				qt_avaliacao_dor, 
				qt_avaliacao_sem_dor, 
				qt_reavaliacao_com_dor, 
				qt_reavaliacao_sem_dor, 
				nr_seq_result_dor, 
				nr_seq_turno_atend, 
				qt_max_intensidade, 
				qt_paciente_dor) 
			values (nextval('w_eis_escala_dor_seq'), 
				nr_atendimento_w, 
				nm_usuario_p, 
				trunc(dt_avaliacao_dia_w), 
				clock_timestamp(), 
				cd_setor_atendimento_w, 
				obter_pessoa_atendimento(nr_atendimento_w,'C'), 
				qt_avaliacao_w, 
				qt_avaliacao_dor_w, 
				qt_avaliacao_sem_dor_w, 
				qt_reavaliacao_com_dor_w, 
				qt_reavaliacao_sem_dor_w, 
				coalesce(cw02.nr_seq_result_dor, nr_seq_min_intensidade_w ), 
				coalesce(nr_seq_turno_w,nr_min_seq_turno_w), 
				qt_se_max_intensidade_w, 
				qt_paciente_dor_w 
				);
 
			ds_gravou_w := 'S';
			if (qt_avaliacao_dor_w = 1) then 
				ds_gravou_dor_w	  := 'S';
			end if;
			end;
		end loop;
		close C02;
 
		 
		-- Inserir dados na tabela w_eis_escala_dor com avaliação. 
		if (ds_gravou_w = 'N') then 
			insert into w_eis_escala_dor( 
				nr_sequencia, 
				nr_atendimento, 
				nm_usuario, 
				dt_sinal_vital, 
				dt_atualizacao, 
				cd_setor_atendimento, 
				cd_pessoa_fisica, 
				qt_avaliacao, 
				qt_avaliacao_dor, 
				qt_avaliacao_sem_dor, 
				qt_reavaliacao_com_dor, 
				qt_reavaliacao_sem_dor, 
				nr_seq_result_dor 
				) 
			values (nextval('w_eis_escala_dor_seq'), 
				nr_atendimento_w, 
				nm_usuario_p, 
				dt_sinal_vital_p, 
				clock_timestamp(), 
				cd_setor_atendimento_w, 
				obter_pessoa_atendimento(nr_atendimento_w,'C'), 
				qt_avaliacao_w, 
				qt_avaliacao_dor_w, 
				qt_avaliacao_sem_dor_w, 
				qt_reavaliacao_com_dor_w, 
				qt_reavaliacao_sem_dor_w, 
				nr_seq_min_intensidade_w 
				);
		end if;
		end;
	end loop;
	close C01;
	 
commit;
 
end if;
 
exception 
	when others then 
	null;
end;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hsc_gerar_eis_escala_dor ( dt_sinal_vital_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text ) FROM PUBLIC;

