-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_pp_cta_fechar_lote_pag ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_log_etapa_w	pls_pp_lote_log_etapa.nr_sequencia%type;
ds_stack_w    		varchar(4000);
ds_msg_processo_w	varchar(2000);
ie_concil_contab_w	pls_visible_false.ie_concil_contab%type;
ie_data_lote_prod_med_w	pls_parametro_contabil.ie_data_lote_prod_med%type;


BEGIN

begin
	-- coloca com status em processamento
	CALL pls_pp_lote_pagamento_pck.atualiza_dados_trabalho_lote(	nr_seq_lote_p, nm_usuario_p);
	
	-- Faz o carregamento de parâmetros gerais e armazena em variáveis globais da package pls_pp_lote_pagamento_pck
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(391541); -- Lendo parâmetros de configuração
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.carrega_parametros(	nr_seq_lote_p, cd_estabelecimento_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	
	-- Faz algumas verificações quanto a poder realizar a geração do lote
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(391542); -- Validando se o lote pode ser gerado
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.valida_se_pode_fechar_lote(	nr_seq_lote_p, cd_estabelecimento_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- alimenta a tabela temporária pls_pp_prestador_tmp com todos os prestadores da base e seus

	-- respectivos dados complementares (matriz, situação cooperado, etc.)

	-- a idéia é utilizar esta tabela em vários processos futuros dentro da geração do lote
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(391545); -- Selecionando os prestadores que poderão fazer parte do lote
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.alimenta_prestadores_tab_temp(pls_pp_lote_pagamento_pck.dt_referencia_lote_fim_w);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	
	-- processamento das regras de franquia
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(460690); -- Verificando os registros de franquia
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_lote_franquia_pck.vincula_registros_franquia(nr_seq_lote_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- gera o log das tabelas de tributos, para depois ser apresentada em tela caso necessário
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(449270); -- Executando backup das regras de tributos do lote.
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_gerar_log_trib_pagto(null, nr_seq_lote_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	
	-- rotina responsável por alimentar a base de cálculo de cada um dos tributos
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(455307); -- Gerando base atual e base acumulada dos tributos do lote
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_tributacao_pck.gerar_vl_base_tributacao(	nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- irá realizar todos os cálculos dos tributos necessários para o lote de pagamento
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(455310); -- Gerando tributação para o lote
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_tributacao_pck.gerar_valores_tributos(	nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- irá jogar os valores de tributos nos itens do lote de pagamento
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(455311); -- Atualizando os valores de tributos para cada item do lote
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_tributacao_pck.atualizar_vl_tributo_item( nr_seq_lote_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- Faz a seleção de todos os lançamentos programados de desconto com valor fixo que devem fazer parte do lote de pagamento de produção (após tributação)
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(443512); -- Selecionando os lançamentos programados de desconto com valor fixo dos prestadores
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_lanc_programado_pck.gerar_lancamento_programado(nr_seq_lote_p, 'D', 'FIXO', 'S', nm_usuario_p, cd_estabelecimento_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- Faz a seleção de todos os lançamentos programados de desconto com valor por regra que devem fazer parte do lote de pagamento de produção (após tributação)
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(443513); -- Selecionando os lançamentos programados de desconto com valor por regra dos prestadores
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_lanc_programado_pck.gerar_lancamento_programado(nr_seq_lote_p, 'D', 'REGRA', 'S', nm_usuario_p, cd_estabelecimento_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- Define os registros que devem ser tomada uma ação sobre valor negativo
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(451032); -- Verificando valores negativos
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.gerencia_vl_negativo_lote(nr_seq_lote_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- Atualiza o campo ie_baixado dos registros de apropriação que serão quitados neste lote de pagamento
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(452042); -- Atualizando registros de apropriação pagas
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_apropriacao_pck.baixar_apropriacoes_pagas(nr_seq_lote_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- Alimenta o campo ie_acao_pgto_negativo da pls_pp_item para saber o que fazer caso tenha ficado negativo
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(451031); -- Verificando ação para pagamento negativo
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_apropriacao_pck.alimenta_acao_pgto_negativo(nr_seq_lote_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- Gerando registros para apropriação
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(452045); -- Verificando valores negativos
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_apropriacao_pck.gerencia_valores_apropriacao(nr_seq_lote_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	
	-- *********************************************************************************************************************

	-- Processamento das regras de critérios contábeis

	-- *********************************************************************************************************************

	
	-- *********************************************************************************************************************

	-- Processamento de regra para obter conta contábil

	-- *********************************************************************************************************************

	
	-- *********************************************************************************************************************

	-- Processamento de baixas de títulos a receber e a pagar

	-- *********************************************************************************************************************
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(455399); -- Atualizando valores de eventos e totalizações dos prestadores
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	
	-- exclui todos os eventos do lote agrupados por prestador ( pls_pp_prest_event_prest e pls_pp_prestador )
	CALL pls_pp_lote_pagamento_pck.desfazer_item_prod_prest(nr_seq_lote_p);
	-- exclui todos os eventos de produção médica do lote agrupados por evento e prestador  ( pls_pp_it_prest_event_val e pls_pp_prest_evento_valor )
	CALL pls_pp_lote_pagamento_pck.desfazer_item_prod_event_prest(nr_seq_lote_p);	
	-- Faz um agrupamento por evento e prestador de todas as contas/itens que devem fazer parte do lote de pagamento de produção
	CALL pls_pp_lote_pagamento_pck.gerar_prestador_evento_lote(nr_seq_lote_p, nm_usuario_p);
	-- Faz um agrupamento por prestador de todas as contas/itens que devem fazer parte do lote de pagamento de produção
	CALL pls_pp_lote_pagamento_pck.gerar_prestador_lote(nr_seq_lote_p, nm_usuario_p);
	
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- Atualização de status, data de fechamento e usuário fechamento
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(455334); -- Finalizando fechamento do lote de pagamento
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.atualiza_dados_fec_lote_pgto(nr_seq_lote_p, 'S', nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- Gravação dos registros para a contabilidade instantânea
	select	coalesce(max(ie_data_lote_prod_med),'C')
	into STRICT	ie_data_lote_prod_med_w
	from	pls_parametro_contabil
	where	cd_estabelecimento = cd_estabelecimento_p;

	select	coalesce(max(ie_concil_contab), 'N')
	into STRICT	ie_concil_contab_w
	from	pls_visible_false
	where	cd_estabelecimento = cd_estabelecimento_p;

	if (ie_data_lote_prod_med_w = 'C' and ie_concil_contab_w = 'S') then
		CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_fechar_lote_pp(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	end if;


exception
when others then
	-- limpa os dados de pagamento

	-- para gerar novamente só desfazendo a geração do anterior
	CALL pls_pp_lote_pagamento_pck.atualiza_dados_fec_lote_pgto(nr_seq_lote_p, 'N', nm_usuario_p);
	
	ds_stack_w := dbms_utility.format_call_stack || pls_util_pck.enter_w ||
		      dbms_utility.format_error_backtrace || pls_util_pck.enter_w ||
		      sqlerrm;
	-- grava log se deu erro
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'E', ds_msg_processo_w, nr_seq_log_etapa_w, 'F', nm_usuario_p, ds_stack_w);
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_cta_fechar_lote_pag ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

