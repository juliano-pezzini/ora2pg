-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_imp_pedido_autorizacao_v40 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_controle_exec_p INOUT bigint) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Rotina utilizada nas transações ptu via SCS homologadas com a unimed brasil. 
Quando for alterar, favor verificar com o análista responsável para a realização de testes. 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: Performance. 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ie_tipo_cliente_w		varchar(15);
cd_unimed_exec_w		varchar(10);
cd_unimed_benef_w		varchar(10);
nr_ident_exec_w			bigint;
cd_unimed_w			smallint;
cd_usuario_plano_w		varchar(30);
nr_via_cartao_w			smallint;
cd_cid_w			varchar(4);
ie_alto_custo_w			varchar(1);
nm_prestador_w			varchar(25);
cd_unimed_prest_req_w		smallint;
cd_prestador_requisitante_w	integer;
cd_unimed_prestador_w		smallint;
cd_prestador_w			integer;
cd_especialidade_medica_w	smallint;
qt_dias_doenca_w		integer;
ie_urgencia_emergencia_w	varchar(1);
dt_atendimento_w		timestamp;
nr_seq_segurado_w		numeric(20);
nr_seq_plano_w			numeric(20);
ds_observacao_w			varchar(999);
ds_indicacao_clinica_w		varchar(999);
ds_biometria_w			varchar(999);
ie_tipo_tabela_w		varchar(4);
cd_servico_w			bigint;
qt_servico_w			double precision;
ds_opme_w			varchar(80);
vl_proced_ponto_w		varchar(15);
vl_proced_virgula_w		varchar(15);
vl_procedimento_ww  		double precision;
ie_origem_proced_w		smallint;
dt_atendimento_ww		varchar(15);
ds_conteudo_w			varchar(2000);
cd_transacao_w			varchar(5);
nr_seq_pedido_novo_w		bigint;
cd_uni_beneficiario_w		varchar(4);
nr_seq_import_w			smallint;
nr_seq_uni_exec_w		bigint;
nr_seq_guia_w			bigint;
nr_seq_prestador_w		bigint;
nr_seq_pedido_ant_w		bigint;
ie_insere_w			varchar(2);
ie_funcao_scs_w			smallint;
nr_seq_requisicao_w		bigint;
cd_especialidade_w		bigint;
nr_versao_w			varchar(3);

c01 CURSOR FOR 
	SELECT	nr_seq_importacao, 
		ds_valores 
	from	w_scs_importacao 
	where	nm_usuario	= nm_usuario_p 
	order by nr_seq_importacao;


BEGIN 
 
open c01;
loop 
fetch c01 into 
	nr_seq_import_w, 
	ds_conteudo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
	 
	if (substr(ds_conteudo_w,1,4)	<> 'FIM$') then 
		if (nr_seq_import_w	= 1) then 
			cd_transacao_w			:= substr(ds_conteudo_w,1,5);
			ie_tipo_cliente_w		:= trim(both substr(ds_conteudo_w,6,15));
			cd_unimed_exec_w		:= trim(both substr(ds_conteudo_w,21,4));
			cd_unimed_benef_w		:= trim(both substr(ds_conteudo_w,25,4));
			nr_ident_exec_w			:= (coalesce(trim(both substr(ds_conteudo_w,29,10)),0))::numeric;
			cd_unimed_w			:= (coalesce(trim(both substr(ds_conteudo_w,39,4)),0))::numeric;
			cd_usuario_plano_w		:= trim(both substr(ds_conteudo_w,43,13));
			nr_via_cartao_w			:= (coalesce(trim(both substr(ds_conteudo_w,56,2)),0))::numeric;
			cd_cid_w			:= trim(both substr(ds_conteudo_w,58,4));
			ie_alto_custo_w			:= trim(both substr(ds_conteudo_w,62,1));
			nm_prestador_w			:= trim(both substr(ds_conteudo_w,63,25));
			cd_unimed_prest_req_w		:= (coalesce(trim(both substr(ds_conteudo_w,88,4)),0))::numeric;
			cd_prestador_requisitante_w	:= (coalesce(trim(both substr(ds_conteudo_w,92,8)),0))::numeric;
			cd_unimed_prestador_w		:= (coalesce(trim(both substr(ds_conteudo_w,100,4)),0))::numeric;
			cd_prestador_w			:= (coalesce(trim(both substr(ds_conteudo_w,104,8)),0))::numeric;
			cd_especialidade_medica_w	:= (coalesce(trim(both substr(ds_conteudo_w,112,2)),0))::numeric;
			qt_dias_doenca_w		:= (coalesce(trim(both substr(ds_conteudo_w,114,5)),0))::numeric;
			ie_urgencia_emergencia_w	:= trim(both substr(ds_conteudo_w,119,1));
			dt_atendimento_ww		:= trim(both substr(ds_conteudo_w,126,2)||substr(ds_conteudo_w,124,2)||substr(ds_conteudo_w,120,4));
			nr_versao_w			:= trim(both substr(ds_conteudo_w,128,3));
			 
			if (coalesce(dt_atendimento_ww,'X')	<> 'X') then 
				dt_atendimento_w	:= to_date(dt_atendimento_ww, 'dd/mm/yyyy');
			end if;
 
			begin 
			select	nr_sequencia 
			into STRICT	nr_seq_pedido_ant_w 
			from	ptu_pedido_autorizacao 
			where	nr_seq_execucao		= nr_ident_exec_w 
			and	cd_unimed_executora	= cd_unimed_exec_w;
			exception 
			when others then 
				nr_seq_pedido_ant_w	:= 0;
			end;
 
			if (nr_seq_pedido_ant_w	<> 0) then 
				select	nr_sequencia 
				into STRICT	nr_seq_controle_exec_p 
				from	ptu_controle_execucao 
				where	nr_seq_pedido_aut	= nr_seq_pedido_ant_w;
			 
				goto final;
			end if;
 
			cd_uni_beneficiario_w	:= adiciona_zeros_esquerda(cd_unimed_w, 4);
			 
			begin 
			select	b.nr_sequencia, 
				b.nr_seq_plano 
			into STRICT	nr_seq_segurado_w, 
				nr_seq_plano_w 
			from  pls_segurado_carteira a, 
				pls_segurado b 
			where  a.cd_usuario_plano	= cd_uni_beneficiario_w||cd_usuario_plano_w 
			and   a.nr_seq_segurado	= b.nr_sequencia;
			exception 
			when others then 
				nr_seq_segurado_w	:= null;
				nr_seq_plano_w		:= null;
			end;
			 
			if (ie_tipo_cliente_w	= 'UNIMED') then 
				ie_tipo_cliente_w	:= 'U';
			elsif (ie_tipo_cliente_w	= 'PORTAL') then 
				ie_tipo_cliente_w	:= 'P';
			elsif (ie_tipo_cliente_w	= 'PRESTADOR') then 
				ie_tipo_cliente_w	:= 'R';
			end if;
			 
			if (cd_transacao_w	= '00600') then 
				select	nextval('ptu_pedido_autorizacao_seq') 
				into STRICT	nr_seq_pedido_novo_w 
				;	
 
				select	nextval('ptu_controle_execucao_seq') 
				into STRICT	nr_seq_controle_exec_p 
				;
 
				begin 
					select	nr_sequencia 
					into STRICT	nr_seq_uni_exec_w 
					from	pls_congenere 
					where	(cd_cooperativa)::numeric 	= (cd_unimed_exec_w)::numeric;
				exception 
				when others then 
					select	max(nr_sequencia) 
					into STRICT	nr_seq_uni_exec_w 
					from	pls_congenere 
					where	cd_cooperativa	= cd_unimed_exec_w;
				end;
				 
 
				select	coalesce(ie_funcao_scs,1) 
				into STRICT	ie_funcao_scs_w 
				from	pls_param_intercambio_scs;
 
				if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then 
					if (ie_funcao_scs_w	= 1) then 
						select	nextval('pls_guia_plano_seq') 
						into STRICT	nr_seq_guia_w 
						;
						 
						begin 
							select	cd_especialidade 
							into STRICT	cd_especialidade_w 
							from	especialidade_medica 
							where	cd_ptu	= cd_especialidade_medica_w;
						exception 
						when others then 
							cd_especialidade_w	:= null;
						end;
						 
						insert	into pls_guia_plano(nr_sequencia, cd_guia, dt_solicitacao, 
							 ie_tipo_guia, nr_seq_segurado, cd_estabelecimento, 
							 nr_seq_plano, nr_seq_prestador, ie_status, 
							 ie_estagio, dt_atualizacao, nm_usuario, 
							 ie_tipo_processo, cd_medico_solicitante, nr_seq_uni_exec, 
							 ie_carater_internacao, ie_tipo_intercambio, ie_origem_solic, 
							 nm_usuario_nrec, dt_atualizacao_nrec, cd_especialidade) 
						values (nr_seq_guia_w, nr_seq_guia_w, clock_timestamp(), 
							 '2', nr_seq_segurado_w, cd_estabelecimento_p, 
							 nr_seq_plano_w, nr_seq_prestador_w, '2', 
							 7, clock_timestamp(), nm_usuario_p, 
							 'I', null, nr_seq_uni_exec_w, 
							 CASE WHEN ie_urgencia_emergencia_w='S' THEN 'U'  ELSE 'E' END ,'E','I', 
							 nm_usuario_p, clock_timestamp(), cd_especialidade_w);
							 
						if (cd_cid_w	<> ' ') then 
							insert	into pls_diagnostico(nr_sequencia, dt_atualizacao, nm_usuario, 
								 ie_tipo_doenca, ie_indicacao_acidente, ie_classificacao, 
								 cd_doenca, ds_diagnostico, nr_seq_guia, 
								 nm_usuario_nrec, dt_atualizacao_nrec) 
							values (nextval('pls_diagnostico_seq'), clock_timestamp(), nm_usuario_p, 
								 '', '', 'P', 
								 cd_cid_w, '', nr_seq_guia_w, 
								 nm_usuario_p, clock_timestamp());
						end if;
						 
						CALL pls_guia_gravar_historico(nr_seq_guia_w,2,'Recebido e processado o pedido de autorização da Unimed '||cd_unimed_exec_w,'',nm_usuario_p);
					elsif (ie_funcao_scs_w	= 2) then 
						select	nextval('pls_requisicao_seq') 
						into STRICT	nr_seq_requisicao_w 
						;
						 
						begin 
							select	cd_especialidade 
							into STRICT	cd_especialidade_w 
							from	especialidade_medica 
							where	cd_ptu	= cd_especialidade_medica_w;
						exception 
						when others then 
							cd_especialidade_w	:= null;
						end;
 
						insert	into pls_requisicao(nr_sequencia, dt_requisicao, 
							 ie_tipo_guia, nr_seq_segurado, cd_estabelecimento, 
							 nr_seq_plano, nr_seq_prestador, ie_status, 
							 ie_estagio, dt_atualizacao, nm_usuario, 
							 ie_tipo_processo, cd_medico_solicitante, nr_seq_uni_exec, 
							 ie_tipo_intercambio, ie_origem_solic, cd_especialidade, 
							 nm_usuario_nrec, dt_atualizacao_nrec) 
						values (nr_seq_requisicao_w, clock_timestamp(), 
							 '2', nr_seq_segurado_w, cd_estabelecimento_p, 
							 nr_seq_plano_w, null, 'P', 
							 1, clock_timestamp(), nm_usuario_p, 
							 'I', null, nr_seq_uni_exec_w, 
							 'E', 'I', cd_especialidade_w, 
							 nm_usuario_p, clock_timestamp());
							 
						if (cd_cid_w	<> ' ') then 
							insert	into pls_requisicao_diagnostico(nr_sequencia, dt_atualizacao, nm_usuario, 
								 ie_tipo_doenca, ie_indicacao_acidente, ie_classificacao, 
								 cd_doenca, ds_diagnostico, nr_seq_requisicao, 
								 nm_usuario_nrec, dt_atualizacao_nrec) 
							values (nextval('pls_requisicao_diagnostico_seq'), clock_timestamp(), nm_usuario_p, 
								 '', '', 'P', 
								 cd_cid_w, '', nr_seq_requisicao_w, 
								 nm_usuario_p, clock_timestamp());
						end if;
						 
						CALL pls_requisicao_gravar_hist(nr_seq_requisicao_w,'L','Recebido e processado o pedido de autorização da Unimed '||cd_unimed_exec_w,null,nm_usuario_p);
					end if;
				end if;
				 
				insert	into ptu_pedido_autorizacao(nr_sequencia, dt_atendimento, ie_tipo_cliente, 
					 cd_doenca_cid, ie_alto_custo, cd_unimed_prestador_req, 
					 nr_seq_prestador_req, cd_especialidade, ie_urg_emerg, 
					 cd_unimed_executora, cd_unimed_beneficiario, cd_unimed, 
					 nr_via_cartao, nr_seq_execucao, nm_usuario, 
					 dt_atualizacao, cd_usuario_plano, nr_seq_guia, 
					 cd_unimed_prestador, qt_dias_doenca, cd_transacao, 
					 nr_seq_requisicao, ds_arquivo_pedido, nr_seq_prest_alto_custo, 
					 nm_prestador_alto_custo, nr_versao, nm_usuario_nrec, 
					 dt_atualizacao_nrec) 
				values (nr_seq_pedido_novo_w, dt_atendimento_w, ie_tipo_cliente_w, 
					 cd_cid_w, ie_alto_custo_w, cd_unimed_prest_req_w, 
					 cd_prestador_requisitante_w, cd_especialidade_medica_w, ie_urgencia_emergencia_w, 
					 cd_unimed_exec_w, cd_unimed_benef_w, cd_unimed_w, 
					 coalesce(nr_via_cartao_w,1), nr_ident_exec_w, nm_usuario_p, 
					 clock_timestamp(), cd_usuario_plano_w, nr_seq_guia_w, 
					 cd_unimed_prestador_w, qt_dias_doenca_w, cd_transacao_w, 
					 nr_seq_requisicao_w, ds_arquivo_p, cd_prestador_w, 
					 nm_prestador_w, nr_versao_w, nm_usuario_p, 
					 clock_timestamp());
				 
				insert	into ptu_controle_execucao(nr_sequencia, dt_atualizacao, nm_usuario, 
					 nr_seq_pedido_compl, nr_seq_pedido_aut, nm_usuario_nrec, 
					 dt_atualizacao_nrec) 
				values (nr_seq_controle_exec_p, clock_timestamp(), nm_usuario_p, 
					 null, nr_seq_pedido_novo_w, nm_usuario_p, 
					 clock_timestamp());
			end if;
		elsif (nr_seq_import_w	= 2) then 
			ds_observacao_w	:= trim(both substr(ds_conteudo_w,1,999));
			 
			CALL ptu_insere_observacao_scs(	ds_observacao_w, nr_seq_segurado_w, nr_seq_guia_w, 
							nr_seq_requisicao_w, nr_seq_pedido_novo_w, 'PA', 
							nm_usuario_p);
		elsif (nr_seq_import_w	= 3) then 
			ds_indicacao_clinica_w	:= trim(both substr(ds_conteudo_w,1,999));
 
			CALL ptu_insere_indic_clinica_scs(	ds_indicacao_clinica_w, nr_seq_segurado_w, nr_seq_guia_w, 
							nr_seq_requisicao_w, nr_seq_pedido_novo_w, 'PA', 
							nm_usuario_p);
		elsif (nr_seq_import_w	= 4) then 
			ds_biometria_w	:= trim(both substr(ds_conteudo_w,1,999));
 
			CALL ptu_insere_biometria_scs(	ds_biometria_w, nr_seq_segurado_w, nr_seq_guia_w, 
							nr_seq_requisicao_w, nr_seq_pedido_novo_w, 'PA', 
							nm_usuario_p);
		elsif (nr_seq_import_w	> 4) and (substr(ds_conteudo_w,1,1) in ('0','1','2','3', '4')) then 
			select	substr(ds_conteudo_w,1,1), 
				CASE WHEN (substr(ds_conteudo_w,2,8))::numeric =0 THEN ''  ELSE (substr(ds_conteudo_w,2,8))::numeric  END , 
				CASE WHEN (substr(ds_conteudo_w,10,8))::numeric =0 THEN ''  ELSE (substr(ds_conteudo_w,10,8))::numeric  END , 
				trim(both substr(ds_conteudo_w,18,80)), 
				substr(ds_conteudo_w,98,12)||'.'||substr(ds_conteudo_w,110,2), 
				substr(ds_conteudo_w,98,12)||','||substr(ds_conteudo_w,110,2) 
			into STRICT	ie_tipo_tabela_w, 
				cd_servico_w, 
				qt_servico_w, 
				ds_opme_w, 
				vl_proced_ponto_w, 
				vl_proced_virgula_w 
			;
 
			if (vl_proced_ponto_w	= '000000000000.00') and (vl_proced_virgula_w	= '000000000000,00') then 
				vl_procedimento_ww := 0;
			else 
				begin 
					vl_procedimento_ww := (vl_proced_ponto_w)::numeric;
				exception 
				when others then 
					vl_procedimento_ww := (vl_proced_virgula_w)::numeric;
				end;
			end if;
			 
			ptu_insere_servicos_scs(	ie_tipo_tabela_w, cd_servico_w, qt_servico_w, 
							ds_opme_w, vl_procedimento_ww, nr_seq_prestador_w, 
							nr_seq_segurado_w, 'PA', nr_seq_guia_w, 
							nr_seq_requisicao_w, nr_seq_pedido_novo_w, cd_unimed_benef_w, 
							cd_estabelecimento_p,nm_usuario_p, null, 
							null, null, null, 
							null, null, null, 
							null, null);
		end if;
	end if;
	 
	end;
end loop;
close c01;
 
CALL ptu_atualiza_imp_ped_autor_scs(	nr_seq_guia_w, nr_seq_requisicao_w, nr_seq_segurado_w, 
				ie_tipo_tabela_w, ds_observacao_w, ds_opme_w, 
				ie_alto_custo_w, dt_atendimento_w, cd_estabelecimento_p, 
				nm_usuario_p, cd_unimed_exec_w, 'A');
 
CALL ptu_gestao_env_resp_pedido_aut(nr_seq_controle_exec_p, cd_estabelecimento_p, nm_usuario_p);
 
<<final>> 
ie_insere_w	:= 'N';
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_imp_pedido_autorizacao_v40 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_controle_exec_p INOUT bigint) FROM PUBLIC;

