-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_agecons ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
agenda_consulta_w				agenda_consulta%rowtype;

ie_conversao_w					intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w			intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w				intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w			varchar(15);
reg_integracao_w				gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w					conversao_meio_externo.nr_seq_regra%type;
ds_erro_w							varchar(4000);
i										integer;
ie_atualizou_w						varchar(1) 	:= 'N';
ie_permite_update_w 			boolean 		:= False;
ie_sexo_agenda_w				agenda.ie_sexo_agenda%type;
ie_sexo_pessoa_w				pessoa_fisica.ie_sexo%type;
cd_especialidade_w 				bigint;
cd_profissional_w 				varchar(10);
cd_setor_exclusivo_w 			integer;
qt_idade_pac_w 					bigint;
ds_mensagem_regra_w			varchar(255);
ie_excecao_paciente_w 		bigint;
ie_permite_agendar_w			varchar(1) 		:= 'S';
cd_agenda_w 						bigint;
cd_municipio_ibge_w			varchar(6);
nr_seq_plano_w					bigint;
ie_dia_semana_w					smallint;	
ie_agenda_w						varchar(1);
hr_agenda_dt_w 					timestamp;
hr_agenda_w 						varchar(30);
ds_erro_idade_turno_esp_w 	varchar(255);

/*'Efetua a consulta transformando o elemento XML num tipo de tabela'*/

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/SCHEDULING' passing xml_p columns
	
	ie_acao					varchar(10) path 'IE_ACTION',
	nr_sequencia			bigint 	path 'NR_SEQUENCE',
	cd_pessoa_fisica		varchar(10) path 'CD_NATURAL_PERSON',
	nm_paciente 			varchar(80) path 'NM_NATURAL_PERSON',
	cd_convenio			integer 	path 'CD_INSURANCE',
	cd_categoria			varchar(10) path 'CD_CATEGORY',
	cd_plano				varchar(10) path 'CD_PLAN',
	cd_medico_req		varchar(10) path 'CD_REQ_PHYSYCIAN',
	nm_usuario				varchar(15) path 'NM_USER',
	ie_validar_regras		varchar(10) path 'IE_VALIDATE_RULES');
	
c01_w	c01%rowtype;

c02 CURSOR FOR
	SELECT 	coalesce(nr_sequencia,0)
	from		regra_agecons_convenio
	where	((cd_convenio = c01_w.cd_convenio) or (coalesce(cd_convenio::text, '') = ''))
	and	((cd_agenda = cd_agenda_w) or (coalesce(cd_agenda::text, '') = ''))
	and	((cd_categoria = c01_w.cd_categoria) or (coalesce(cd_categoria::text, '') = ''))
	and	((cd_plano_convenio = c01_w.cd_plano) or (coalesce(cd_plano_convenio::text, '') = ''))
	and	((cd_medico = cd_profissional_w) or (coalesce(cd_medico::text, '') = ''))
	and	((cd_pessoa_fisica = c01_w.cd_pessoa_fisica) or (coalesce(cd_pessoa_fisica::text, '') = ''))
	and (trunc(hr_agenda_dt_w) >= dt_inicial_vigencia or coalesce(dt_inicial_vigencia::text, '') = '')
	and (trunc(hr_agenda_dt_w) <= dt_final_vigencia or coalesce(dt_final_vigencia::text, '') = '')
	and (hr_agenda_dt_w between to_date(to_char(hr_agenda_dt_w,'dd/mm/yyyy') ||' '|| to_char(coalesce(hr_inicial,trunc(hr_agenda_dt_w,'dd')),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
	and 	to_date(to_char(hr_agenda_dt_w,'dd/mm/yyyy') ||' '|| to_char(coalesce(hr_final,trunc(hr_agenda_dt_w)+86399/86400),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
	and	((cd_setor_atendimento = cd_setor_exclusivo_w) or (coalesce(cd_setor_atendimento::text, '') = ''))
	and	((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (7,1))) or (coalesce(ie_dia_semana::text, '') = ''))
	and	(((cd_setor_atendimento = cd_setor_exclusivo_w) and coalesce(ie_forma_consiste_setor,'E') = 'E') or (coalesce(cd_setor_atendimento::text, '') = ''))
	and	((cd_especialidade = cd_especialidade_w) or (coalesce(cd_especialidade::text, '') = ''))
	and	((nr_seq_plano = nr_seq_plano_w) or (coalesce(nr_seq_plano::text, '') = ''))
	--and	nvl(ie_forma_consiste_setor,'A') = 'E'
	and 	((cd_municipio_ibge = cd_municipio_ibge_w) or (coalesce(cd_municipio_ibge::text, '') = ''))
	order 	by	coalesce(cd_convenio,0),
			coalesce(cd_pessoa_fisica,0), 
			coalesce(cd_setor_atendimento,0), 
			coalesce(cd_plano_convenio,0), 
			coalesce(cd_categoria,0),
			coalesce(cd_agenda,0),
			coalesce(cd_especialidade,0),
			coalesce(dt_inicial_vigencia,clock_timestamp()),
			coalesce(dt_final_vigencia,clock_timestamp()),
			coalesce(hr_inicial,clock_timestamp()),
			coalesce(hr_final,clock_timestamp());	
	

BEGIN
/*'Atualiza o status da fila para Em processamento'*/

update	intpd_fila_transmissao
set		ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

/*'Realiza o commit para não permite o status de processamento em casa de rollback por existir consistência. Existe tratamento de exceção abaixo para colocar o status de erro em caso de falha'*/

commit;

/*'Início de controle de falha'*/

begin
	/*'Busca os dados da regra do registro da fila que está em processamento'*/

	select	coalesce(b.ie_conversao,'I'),
				nr_seq_sistema,
				nr_seq_projeto_xml,
				nr_seq_regra_conv
	into STRICT		ie_conversao_w,
				nr_seq_sistema_w,
				nr_seq_projeto_xml_w,
				nr_seq_regra_w
	from		intpd_fila_transmissao a,
				intpd_eventos_sistema b
	where	a.nr_seq_evento_sistema = b.nr_sequencia
	and		a.nr_sequencia = nr_sequencia_p;

	ie_sistema_externo_w	:=	nr_seq_sistema_w;

	/*'Alimenta as informações iniciais de controle e consistência de cada atributo do XML'*/

	reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
	reg_integracao_w.ie_envio_recebe				:=	'R';
	reg_integracao_w.ie_sistema_externo			:=	ie_sistema_externo_w;
	reg_integracao_w.ie_conversao					:=	ie_conversao_w;
	reg_integracao_w.nr_seq_projeto_xml			:=	nr_seq_projeto_xml_w;
	reg_integracao_w.nr_seq_regra_conversao	:=	nr_seq_regra_w;
	reg_integracao_w.intpd_log_receb.delete;
	reg_integracao_w.qt_reg_log						:=	0;

	open c01;
	loop
	fetch c01 into	
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
			/*Limpa variaveis de controle*/

			ie_atualizou_w 			:= 'N';
			ie_permite_update_w 	:= False;
			ie_permite_agendar_w  := 'S';
			/*'Alimenta as informações de controle e consistência referente ao Elemento a ser processado no momento. É importante manter dentro do cursor e não fora.'*/

			reg_integracao_w.nm_tabela		:=	'AGENDA_CONSULTA';
			reg_integracao_w.nm_elemento	:=	'SCHEDULING';
			reg_integracao_w.nr_seq_visao	:=	'';
			
			if (coalesce(c01_w.ie_acao,'') = 'UPDATE') then						
				SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQUENCIA', c01_w.nr_sequencia, 'N', agenda_consulta_w.nr_sequencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.nr_sequencia := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_PESSOA_FISICA', c01_w.cd_pessoa_fisica, 'N', agenda_consulta_w.cd_pessoa_fisica) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.cd_pessoa_fisica := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_PACIENTE', c01_w.nm_paciente, 'N', agenda_consulta_w.nm_paciente) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.nm_paciente := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CONVENIO', c01_w.cd_convenio, 'N', agenda_consulta_w.cd_convenio) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.cd_convenio := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CATEGORIA', c01_w.cd_categoria, 'N', agenda_consulta_w.cd_categoria) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.cd_categoria := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_PLANO', c01_w.cd_plano, 'N', agenda_consulta_w.cd_plano) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.cd_plano := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO_REQ', c01_w.cd_medico_req, 'N', agenda_consulta_w.cd_medico_req) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.cd_medico_req := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_usuario, 'N', agenda_consulta_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
				
				if (reg_integracao_w.qt_reg_log = 0) then		
					begin					
						if (coalesce(c01_w.ie_validar_regras,'N') = 'S') then
							begin												
								select 	max(cd_agenda) ,
											max(dt_agenda)
								into STRICT 		cd_agenda_w,
											hr_agenda_w
								from 	agenda_consulta 
								where 	nr_sequencia = c01_w.nr_sequencia;
								
								select  	max(cd_especialidade),
											max(cd_pessoa_fisica),
											max(cd_setor_exclusivo),
											max(coalesce(ie_sexo_agenda, 'A'))
								into STRICT    	cd_especialidade_w,
											cd_profissional_w,
											cd_setor_exclusivo_w,
											ie_sexo_agenda_w
								from    	agenda
								where   cd_agenda	= cd_agenda_w;
								
								hr_agenda_dt_w	:= to_date(hr_agenda_w,'dd/mm/yyyy hh24:mi:ss');
								ie_dia_semana_w	:= obter_cod_dia_semana(hr_agenda_dt_w);
								
								select	max(cd_municipio_ibge)
								into STRICT		cd_municipio_ibge_w
								from		compl_pessoa_fisica
								where	cd_pessoa_fisica	= c01_w.cd_pessoa_fisica
								and		ie_tipo_complemento	= 1;
								
								begin
									select	max(a.nr_seq_plano)
									into STRICT		nr_seq_plano_w
									from		pls_segurado	a
									where	a.cd_pessoa_fisica	= c01_w.cd_pessoa_fisica
									and		((coalesce(a.dt_rescisao::text, '') = '') or (a.dt_rescisao > clock_timestamp()))
									and		(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '');
								exception
									when others then
										nr_seq_plano_w	:= 0;	
								end;
								
								if (ie_sexo_agenda_w <> 'A') then
									select	max(coalesce(ie_sexo,'A'))
									into STRICT		ie_sexo_pessoa_w
									from		pessoa_fisica
									where	cd_pessoa_fisica = c01_w.cd_pessoa_fisica;
									
									if	(ie_sexo_pessoa_w <> 'A' AND ie_sexo_pessoa_w <> 'I') and (ie_sexo_pessoa_w <> ie_sexo_agenda_w)then
											--O sexo do paciente selecionado não é permitido nesta agenda!
											ds_erro_w := WHEB_MENSAGEM_PCK.get_texto(268471,null);
											goto final;
									end if;		
								end if;					
								
								open c02;
								loop
								fetch c02 into	
									nr_seq_regra_w;
								EXIT WHEN NOT FOUND; /* apply on c02 */
									begin
										nr_seq_regra_w := nr_seq_regra_w;
									end;
								end loop;
								close c02;

								if (nr_seq_regra_w > 0) then
									
									select	coalesce(max(ie_permite),'S'),
												coalesce(max(ds_mensagem),'')
									into STRICT		ie_agenda_w,
												ds_mensagem_regra_w
									from		regra_agecons_convenio
									where	nr_sequencia = nr_seq_regra_w
									and		((cd_pessoa_fisica = c01_w.cd_pessoa_fisica) or (coalesce(cd_pessoa_fisica::text, '') = ''));
											
									select 	count(*)
									into STRICT		ie_excecao_paciente_w
									from		regra_agecons_convenio
									where	((cd_convenio = c01_w.cd_convenio) or (coalesce(cd_convenio::text, '') = ''))
									and		((cd_agenda = cd_agenda_w) or (coalesce(cd_agenda::text, '') = ''))
									and		((cd_categoria = c01_w.cd_categoria) or (coalesce(cd_categoria::text, '') = ''))
									and		((cd_plano_convenio = c01_w.cd_plano) or (coalesce(cd_plano_convenio::text, '') = ''))
									and		coalesce(cd_setor_atendimento::text, '') = ''
									and		((cd_medico = cd_profissional_w) or (coalesce(cd_medico::text, '') = ''))
									and (trunc(hr_agenda_dt_w) >= dt_inicial_vigencia or coalesce(dt_inicial_vigencia::text, '') = '')
									and (trunc(hr_agenda_dt_w) <= dt_final_vigencia or coalesce(dt_final_vigencia::text, '') = '')
									and (hr_agenda_dt_w between to_date(to_char(hr_agenda_dt_w,'dd/mm/yyyy') ||' '|| to_char(coalesce(hr_inicial,trunc(hr_agenda_dt_w,'dd')),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
									and 		to_date(to_char(hr_agenda_dt_w,'dd/mm/yyyy') ||' '|| to_char(coalesce(hr_final,trunc(hr_agenda_dt_w)+86399/86400),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'))
									and		cd_pessoa_fisica = c01_w.cd_pessoa_fisica			
									and		((cd_especialidade = cd_especialidade_w) or (coalesce(cd_especialidade::text, '') = ''))
									and		ie_permite = 'S';
									
									if	(ie_agenda_w = 'N' AND ie_excecao_paciente_w = 0) then		
										ie_permite_agendar_w := 'N';
										ds_erro_w	:= ds_mensagem_regra_w;
									end if;
										
								end if;
								
								
								if (ie_permite_agendar_w = 'S') then							
																			
									/* Verificando idade */

									qt_idade_pac_w	:= (obter_dados_pf(c01_w.cd_pessoa_fisica, 'I'))::numeric;
									SELECT * FROM Consiste_Idade_Agenda_Pac(cd_agenda_w, to_date(hr_agenda_w,'dd/mm/yyyy hh24:mi:ss'), qt_idade_pac_w, null, ds_erro_w, ds_erro_idade_turno_esp_w, c01_w.nm_usuario) INTO STRICT ds_erro_w, ds_erro_idade_turno_esp_w;
	
								end if;	
								
								if  ((ie_permite_agendar_w = 'S') and (coalesce(ds_erro_w::text, '') = '')) then
									ie_permite_update_w := true;																	
								end if;
							end;
						end if;												
						<<final>>
						if ((coalesce(c01_w.ie_validar_regras,'N') = 'N') or ie_permite_update_w) then
							update	agenda_consulta
							set		cd_pessoa_fisica			= c01_w.cd_pessoa_fisica,
										nm_paciente				= c01_w.nm_paciente,
										cd_convenio				= c01_w.cd_convenio,
										cd_categoria				= c01_w.cd_categoria,
										cd_plano					= c01_w.cd_plano,
										ie_status_agenda			= 'N',
										nr_telefone					= obter_fone_pac_agenda(c01_w.cd_pessoa_fisica),
										dt_nascimento_pac		= to_date(substr(obter_dados_pf(c01_w.cd_pessoa_fisica,'DN'),1,10),'dd/mm/yyyy'),
										qt_idade_pac				= obter_dados_pf(c01_w.cd_pessoa_fisica,'I'),
										nm_usuario					= c01_w.nm_usuario,
										dt_atualizacao				= clock_timestamp(),
										nm_usuario_acesso		 = NULL,
										cd_medico_req 			= c01_w.cd_medico_req
							where	nr_sequencia				= c01_w.nr_sequencia;
							
							ie_atualizou_w := 'S';
						end if;
					end;																	
				end if;
			
				if (ie_atualizou_w = 'S')	then
					update	intpd_fila_transmissao
					set		ie_status = 'S',
								nr_seq_documento = c01_w.nr_sequencia
					where	nr_sequencia = nr_sequencia_p;
				end if;			
									
			end if;
		
		end;
	
	end loop;
	close c01;
exception
when others then
	begin
		/*'Em caso de qualquer falha o sistema captura a mensagem de erro, efetua o rollback, atualiza o status para Erro e registra a falha ocorrida'*/

		ds_erro_w	:=	substr(sqlerrm,1,4000);
		
		rollback;
		
		update	intpd_fila_transmissao
		set		ie_status = 'E',
					ds_log = ds_erro_w
		where	nr_sequencia = nr_sequencia_p;
	end;
end;

if (reg_integracao_w.qt_reg_log > 0) then
	begin
		/*'Em caso de qualquer consistência o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistência'*/

		rollback;
		
		update	intpd_fila_transmissao
		set		ie_status = 'E',
					ds_log = ds_erro_w
		where	nr_sequencia = nr_sequencia_p;
		
		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
		end loop;
	end;
end if;
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_agecons ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

