-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE define_preco_proc_sus (DT_PROCEDIMENTO_P timestamp, CD_PROCEDIMENTO_P bigint, IE_ORIGEM_PROCED_P bigint, CD_ESTABELECIMENTO_P bigint, QT_ATO_MEDICO_P INOUT bigint, QT_ATO_ANESTESISTA_P INOUT bigint, VL_MATMED_P INOUT bigint, VL_DIARIA_P INOUT bigint, VL_TAXAS_P INOUT bigint, VL_MEDICO_P INOUT bigint, VL_SADT_P INOUT bigint, VL_CONTRASTE_P INOUT bigint, VL_GESSO_P INOUT bigint, VL_QUIMIOTERAPIA_P INOUT bigint, VL_DIALISE_P INOUT bigint, VL_TPH_P INOUT bigint, VL_FILME_RX_P INOUT bigint, VL_FILME_RESSONANCIA_P INOUT bigint, VL_ANESTESIA_P INOUT bigint, VL_SADT_RX_P INOUT bigint, VL_SADT_PC_P INOUT bigint, VL_OUTROS_P INOUT bigint, VL_ATO_MEDICO_P INOUT bigint, VL_ATO_ANESTESISTA_P INOUT bigint, VL_PROCEDIMENTO_P INOUT bigint, CD_PORTE_P INOUT bigint, DT_COMPETENCIA_P INOUT timestamp, IE_VERSAO_P INOUT text, VL_ADIC_PLANT_P INOUT bigint) AS $body$
DECLARE


DT_COMPETENCIA_W        timestamp			:= clock_timestamp();
VL_MATMED_W             double precision		:= 0;
VL_DIARIA_W             double precision		:= 0;
VL_TAXAS_W              double precision		:= 0;
VL_MEDICO_W             double precision		:= 0;
VL_SADT_W		double precision		:= 0;
VL_CONTRASTE_W		double precision		:= 0;
VL_GESSO_W		double precision		:= 0;
VL_QUIMIOTERAPIA_W	double precision		:= 0;
VL_DIALISE_W		double precision		:= 0;
VL_TPH_W		double precision		:= 0;
VL_FILME_RX_W		double precision		:= 0;
VL_FILME_RESSONANCIA_W	double precision		:= 0;
VL_ANESTESIA_W		double precision		:= 0;
VL_SADT_RX_W		double precision		:= 0;
VL_SADT_PC_W		double precision		:= 0;
VL_OUTROS_W		double precision		:= 0;
VL_ATO_MEDICO_W		double precision		:= 0;
VL_ATO_ANESTESISTA_W	double precision		:= 0;
VL_PROCEDIMENTO_W	double precision		:= 0;
vl_adic_plant_w		double precision		:= 0;
QT_ATO_MEDICO_W         smallint		:= 0;
QT_ATO_ANESTESISTA_W    smallint		:= 0;
cd_porte_W    		smallint		:= 0;
IE_DEFINE_PRECO_W	varchar(1)		:= 'D';
IE_VERSAO_W		varchar(20)		:= '';
CD_VERSAO_W		varchar(20)		:= 'N';
CD_GRUPO_SUS_W		varchar(15);



BEGIN
vl_adic_plant_w	:= 0;


/*      Obter padrao tipo preco D-Data Vigência V-Versão */

if (ie_origem_proced_p = 2) then
	begin
	SELECT 	coalesce(vl_parametro,VL_PARAMETRO_PADRAO)
	INTO STRICT   	IE_DEFINE_PRECO_W
	FROM   	FUNCAO_PARAMETRO
	WHERE  	CD_FUNCAO = 134
	AND	NR_SEQUENCIA = 1;
	exception
     		when others then
          	IE_DEFINE_PRECO_W := 'D';
	end;
	begin
	select	coalesce(coalesce(vl_parametro,vl_parametro_padrao),ie_define_preco_W)
	into STRICT	ie_define_preco_W
	from	funcao_parametro
	where	cd_funcao = 997
	and	nr_Sequencia = 57;
	exception
		when others then
		ie_define_preco_w := 'D';
	end;
else
	begin
	SELECT 	coalesce(vl_parametro,VL_PARAMETRO_PADRAO)
	INTO STRICT   	IE_DEFINE_PRECO_W
	FROM   	FUNCAO_PARAMETRO
	WHERE  	CD_FUNCAO = 136
	AND	NR_SEQUENCIA = 1;
	exception
     		when others then
          	IE_DEFINE_PRECO_W := 'D';
	end;
	begin
	select	coalesce(coalesce(vl_parametro,vl_parametro_padrao),ie_define_preco_W)
	into STRICT	ie_define_preco_W
	from	funcao_parametro
	where	cd_funcao = 1001
	and	nr_Sequencia = 12;
	exception
		when others then
		ie_define_preco_W := 'D';
	end;
end if;

if (IE_DEFINE_PRECO_W 	= 'V') 	then
	BEGIN
	if (ie_origem_proced_p 	= 2) 	then
		begin
		SELECT 	IE_VERSAO_AIH
		INTO STRICT   	IE_VERSAO_W
		FROM   	SUS_PARAMETROS
		WHERE	CD_ESTABELECIMENTO	= CD_ESTABELECIMENTO_P;
		exception
     			when others then
          		IE_VERSAO_W := '';
		end;
	else
		begin
		SELECT 	IE_VERSAO_BPA
		INTO STRICT   	IE_VERSAO_W
		FROM   	SUS_PARAMETROS
		WHERE	CD_ESTABELECIMENTO	= CD_ESTABELECIMENTO_P;
		exception
     			when others then
          		IE_VERSAO_W := '';
		end;
	end if;
	END;
END IF;

/* Obter valores do sus_preco_procaih */

if (ie_origem_proced_p = 2) then
	begin
	if (IE_DEFINE_PRECO_W 	= 'D') 	then
		BEGIN
		select	coalesce(qt_ato_medico,0),
       			coalesce(qt_ato_anestesista,0),
       			coalesce(vl_matmed,0),
       			coalesce(vl_diaria,0),
       			coalesce(vl_taxas,0),
       			coalesce(vl_medico,0),
       			coalesce(vl_sadt,0),
       			dt_competencia
  		into STRICT	qt_ato_medico_w,
       			qt_ato_anestesista_w,
       			vl_matmed_w,
       			vl_diaria_w,
       			vl_taxas_w,
       			vl_medico_w,
       			vl_sadt_w,
       			dt_competencia_w
  		from	sus_preco_procaih
	 		where	cd_procedimento  = cd_procedimento_p
   		and	ie_origem_proced = ie_origem_proced_p
   		and	dt_competencia   =
       			(SELECT max(dt_competencia)
       			from 	sus_preco_procaih
       			where cd_procedimento  = cd_procedimento_p
         			and 	ie_origem_proced = ie_origem_proced_p
         			and 	dt_competencia  <= dt_procedimento_p);
		exception
    			when others then
         			vl_medico_w := 0;
		END;

	else
		BEGIN
		select	coalesce(qt_ato_medico,0),
       			coalesce(qt_ato_anestesista,0),
       			coalesce(vl_matmed,0),
       			coalesce(vl_diaria,0),
       			coalesce(vl_taxas,0),
       			coalesce(vl_medico,0),
       			coalesce(vl_sadt,0),
       			dt_competencia
  		into STRICT	qt_ato_medico_w,
       			qt_ato_anestesista_w,
       			vl_matmed_w,
       			vl_diaria_w,
       			vl_taxas_w,
       			vl_medico_w,
       			vl_sadt_w,
       			dt_competencia_w
  		from	sus_preco_procaih
 		where	cd_procedimento  = cd_procedimento_p
   		and	ie_origem_proced = ie_origem_proced_p
		and	ie_versao	 = ie_versao_w;
		exception
    			when others then
         			vl_medico_w := 0;
		END;
	end if;

	begin
	select 	cd_grupo_sus
	into STRICT		cd_grupo_sus_w
	from		procedimento
	where		cd_procedimento 	= cd_procedimento_p
	and		ie_origem_proced	= ie_origem_proced_p;
	exception
    			when others then
         			cd_grupo_sus_w := '0';
	end;

	if (cd_grupo_sus_w = '10') or (cd_grupo_sus_w = '13') or (aih_validar_regra(17, cd_procedimento_p) > 0) then
		begin
		vl_medico_w	:= vl_matmed_w;
		vl_matmed_w	:= 0;
		end;
	end if;
	end;
end if;

if (ie_origem_proced_p = 2) then
	begin
	vl_procedimento_w := (vl_matmed_w);
	end;
end if;

/* Obter valores do sus_preco_procbpa */

if (ie_origem_proced_p = 3) then
	BEGIN
	if (IE_DEFINE_PRECO_W 	= 'D') 	then
		BEGIN
		select	coalesce(vl_tph,0),
       			coalesce(vl_taxa_sala,0),
       			coalesce(vl_honorario_medico,0),
       			coalesce(vl_anestesia,0),
       			coalesce(vl_matmed,0),
       			coalesce(vl_contraste,0),
       			coalesce(vl_filme_rx,0),
				coalesce(vl_gesso,0),
				coalesce(vl_quimioterapia,0),
				coalesce(vl_dialise,0),
				coalesce(vl_sadt_rx,0),
				coalesce(vl_sadt_pc,0),
				coalesce(vl_sadt_outros,0),
				coalesce(vl_filme_ressonancia,0),
				coalesce(vl_outros,0),
				coalesce(vl_procedimento,0),
				coalesce(vl_plantonista,0),
       			dt_competencia
		into STRICT		vl_tph_w,
       			vl_taxas_w,
       			vl_medico_w,
       			vl_anestesia_w,
       			vl_matmed_w,
       			vl_contraste_w,
       			vl_filme_rx_w,
				vl_gesso_w,
				vl_quimioterapia_w,
				vl_dialise_W,
				vl_sadt_rx_w,
				vl_sadt_pc_w,
				vl_sadt_w,
				vl_filme_ressonancia_w,
				vl_outros_w,
				vl_procedimento_w,
				vl_adic_plant_w,
       			dt_competencia_w
  		from	sus_preco_procbpa
 		where	cd_procedimento  = cd_procedimento_p
   		and	ie_origem_proced = ie_origem_proced_p
   		and	dt_competencia   =
       			(SELECT max(dt_competencia)
       				from 	sus_preco_procbpa
       				where 	cd_procedimento  = cd_procedimento_p
         			and 	ie_origem_proced = ie_origem_proced_p
         			and 	dt_competencia  <= dt_procedimento_p);
		exception
    			when others then
         			vl_medico_w := 0;
		END;
	else
		BEGIN
		select	coalesce(vl_tph,0),
       			coalesce(vl_taxa_sala,0),
       			coalesce(vl_honorario_medico,0),
       			coalesce(vl_anestesia,0),
       			coalesce(vl_matmed,0),
       			coalesce(vl_contraste,0),
       			coalesce(vl_filme_rx,0),
				coalesce(vl_gesso,0),
				coalesce(vl_quimioterapia,0),
				coalesce(vl_dialise,0),
				coalesce(vl_sadt_rx,0),
				coalesce(vl_sadt_pc,0),
				coalesce(vl_sadt_outros,0),
				coalesce(vl_filme_ressonancia,0),
				coalesce(vl_outros,0),
				coalesce(vl_procedimento,0),
				coalesce(vl_plantonista,0),
       			dt_competencia
		into STRICT	vl_tph_w,
       			vl_taxas_w,
       			vl_medico_w,
       			vl_anestesia_w,
       			vl_matmed_w,
       			vl_contraste_w,
       			vl_filme_rx_w,
				vl_gesso_w,
				vl_quimioterapia_w,
				vl_dialise_W,
				vl_sadt_rx_w,
				vl_sadt_pc_w,
				vl_sadt_w,
				vl_filme_ressonancia_w,
				vl_outros_w,
				vl_procedimento_w,
				vl_adic_plant_w,
       			dt_competencia_w
  		from	sus_preco_procbpa
 		where	cd_procedimento  = cd_procedimento_p
   		and	ie_origem_proced = ie_origem_proced_p
		and	ie_versao	 = ie_versao_w;
		exception
    			when others then
         			vl_medico_w := 0;
		END;
	end if;
	END;
end if;


/*      Retirado por marcus em 10/08/2002 - Portaria 1258/GM
if	(qt_ato_anestesista_w > 0) then
	select 	nvl(max(ie_versao),'N')
	into	cd_versao_w
	from 	sus_porte_anestesico
	where 	ie_versao	= ie_versao_w
	  and 	cd_porte	= qt_ato_anestesista_w;
end if;
if	(cd_procedimento_p <> 45000050) and
	(cd_versao_w	<> 'N') then
	begin
	cd_porte_w		:= qt_ato_anestesista_w;
	qt_ato_anestesista_w	:= 0;
	end;
end if;
*/
if (cd_procedimento_p <> 45000050) then
	begin
	cd_porte_w		:= 999;
	qt_ato_anestesista_w	:= 0;
	end;
end if;

qt_ato_medico_p		:= qt_ato_medico_w;
qt_ato_anestesista_p	:= qt_ato_anestesista_w;
vl_matmed_p			:= vl_matmed_w;
vl_diaria_p			:= vl_diaria_w;
vl_taxas_p			:= vl_taxas_w;
vl_medico_p			:= vl_medico_w;
vl_sadt_p			:= vl_sadt_w;
dt_competencia_p		:= dt_competencia_w;
vl_tph_p			:= vl_tph_w;
vl_anestesia_p		:= vl_anestesia_w;
vl_contraste_p		:= vl_contraste_w;
vl_filme_rx_p		:= vl_filme_rx_w;
vl_gesso_p			:= vl_gesso_w;
vl_quimioterapia_p	:= vl_quimioterapia_w;
vl_dialise_p		:= vl_dialise_w;
vl_sadt_rx_p		:= vl_sadt_rx_w;
vl_sadt_pc_p		:= vl_sadt_pc_w;
vl_filme_ressonancia_p	:= vl_filme_ressonancia_w;
vl_outros_p			:= vl_outros_w;
vl_procedimento_p		:= vl_procedimento_w;
ie_versao_p			:= ie_versao_w;
vl_adic_plant_p		:= vl_adic_plant_w;
cd_porte_p			:= cd_porte_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE define_preco_proc_sus (DT_PROCEDIMENTO_P timestamp, CD_PROCEDIMENTO_P bigint, IE_ORIGEM_PROCED_P bigint, CD_ESTABELECIMENTO_P bigint, QT_ATO_MEDICO_P INOUT bigint, QT_ATO_ANESTESISTA_P INOUT bigint, VL_MATMED_P INOUT bigint, VL_DIARIA_P INOUT bigint, VL_TAXAS_P INOUT bigint, VL_MEDICO_P INOUT bigint, VL_SADT_P INOUT bigint, VL_CONTRASTE_P INOUT bigint, VL_GESSO_P INOUT bigint, VL_QUIMIOTERAPIA_P INOUT bigint, VL_DIALISE_P INOUT bigint, VL_TPH_P INOUT bigint, VL_FILME_RX_P INOUT bigint, VL_FILME_RESSONANCIA_P INOUT bigint, VL_ANESTESIA_P INOUT bigint, VL_SADT_RX_P INOUT bigint, VL_SADT_PC_P INOUT bigint, VL_OUTROS_P INOUT bigint, VL_ATO_MEDICO_P INOUT bigint, VL_ATO_ANESTESISTA_P INOUT bigint, VL_PROCEDIMENTO_P INOUT bigint, CD_PORTE_P INOUT bigint, DT_COMPETENCIA_P INOUT timestamp, IE_VERSAO_P INOUT text, VL_ADIC_PLANT_P INOUT bigint) FROM PUBLIC;

