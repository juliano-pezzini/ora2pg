-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_sup_transf_est_entrada ( nr_ordem_compra_p bigint, nr_item_oci_p bigint, cd_material_p bigint, cd_unidade_medida_p text, nr_seq_lote_p bigint, qt_material_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_item_oci_w	integer;
nr_seq_lote_w	bigint;
qt_material_w	double precision;
ie_unidade_w	varchar(3);
cd_unidade_medida_w	ordem_compra_item.cd_unidade_medida_compra%type;

qt_existe_w			bigint;

BEGIN
ie_unidade_w := obter_valor_param_usuario(146,13,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
if (ie_unidade_w = 'S') then
	ie_unidade_w := 'UME';
else
	ie_unidade_w := 'UMC';
end if;

qt_material_w := qt_material_p;

select	max(cd_unidade_medida_compra)
into STRICT	cd_unidade_medida_w
from	ordem_compra_item
where	nr_ordem_compra = nr_ordem_compra_p
and	nr_item_oci = nr_item_oci_p;

qt_material_w := obter_quantidade_convertida(cd_material_p,qt_material_w,cd_unidade_medida_w,ie_unidade_w,'S');

if (coalesce(qt_material_w,0) > 0) then
	begin
	if (coalesce(nr_item_oci_p,0) > 0) then
		nr_item_oci_w := nr_item_oci_p;
	else
		select	coalesce(max(nr_item_oci), 0)
		into STRICT	nr_item_oci_w
		from	ordem_compra_item
		where	nr_ordem_compra	= nr_ordem_compra_p
		and		cd_material	= cd_material_p
		and		(qt_material - (obter_qt_oci_trans_nota(nr_ordem_compra_p, nr_item_oci,'E'))) >= qt_material_w;

		if (nr_item_oci_w = 0) then
			select	coalesce(max(a.nr_item_oci), 0)
			into STRICT	nr_item_oci_w
			from	ordem_compra_item a
			where	a.nr_ordem_compra	= nr_ordem_compra_p
			and	a.cd_material		= cd_material_p;
		end if;
	end if;

	if (nr_seq_lote_p = '0') then
		nr_seq_lote_w := '';
	else
		nr_seq_lote_w := nr_seq_lote_p;
	end if;

	if (coalesce(nr_seq_lote_w::text, '') = '') then
		select	count(*)
		into STRICT	qt_existe_w
		from	ordem_compra_item_cb
		where	nr_ordem_compra = nr_ordem_compra_p
		and	nr_item_oci = nr_item_oci_w
		and	cd_unidade_medida_compra = cd_unidade_medida_w
		and	cd_material = cd_material_p
		and	coalesce(nr_seq_nota::text, '') = ''
		and	ie_atende_recebe = 'R'
		and	coalesce(nr_seq_lote::text, '') = ''
		and	ie_status = 'CB';
	else
		select	count(*)
		into STRICT	qt_existe_w
		from	ordem_compra_item_cb
		where	nr_ordem_compra = nr_ordem_compra_p
		and	nr_item_oci = nr_item_oci_w
		and	cd_unidade_medida_compra = cd_unidade_medida_w
		and	cd_material = cd_material_p
		and	coalesce(nr_seq_nota::text, '') = ''
		and	ie_atende_recebe = 'R'
		and	nr_seq_lote = nr_seq_lote_w
		and	ie_status = 'CB';
	end if;

	if (qt_existe_w > 0) then
		begin
		if (coalesce(nr_seq_lote_w::text, '') = '') then
			update ordem_compra_item_cb
			set	qt_material = (qt_material + qt_material_w),
				dt_atualizacao = clock_timestamp(),
				nm_usuario = nm_usuario_p
			where	nr_ordem_compra = nr_ordem_compra_p
			and	nr_item_oci = nr_item_oci_w
			and	cd_unidade_medida_compra = cd_unidade_medida_w
			and	coalesce(nr_seq_nota::text, '') = ''
			and	ie_atende_recebe = 'R'
			and	coalesce(nr_seq_lote::text, '') = ''
			and	ie_status = 'CB';
		else
			update ordem_compra_item_cb
			set	qt_material = (qt_material + qt_material_w),
				dt_atualizacao = clock_timestamp(),
				nm_usuario = nm_usuario_p
			where	nr_ordem_compra = nr_ordem_compra_p
			and	nr_item_oci = nr_item_oci_w
			and	cd_unidade_medida_compra = cd_unidade_medida_w
			and	coalesce(nr_seq_nota::text, '') = ''
			and	ie_atende_recebe = 'R'
			and	nr_seq_lote = nr_seq_lote_w
			and	ie_status = 'CB';
		end if;
		end;
	else
		begin
		insert into ordem_compra_item_cb(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_ordem_compra,
			nr_item_oci,
			cd_material,
			cd_unidade_medida_compra,
			qt_material,
			nr_seq_lote,
			ie_atende_recebe,
			ie_status)
		values (	nextval('ordem_compra_item_cb_seq'),
			clock_timestamp(),
			nm_usuario_p,
			nr_ordem_compra_p,
			nr_item_oci_w,
			cd_material_p,
			cd_unidade_medida_w,
			qt_material_w,
			nr_seq_lote_w,
			'R',
			'CB');
		end;
	end if;
	end;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_sup_transf_est_entrada ( nr_ordem_compra_p bigint, nr_item_oci_p bigint, cd_material_p bigint, cd_unidade_medida_p text, nr_seq_lote_p bigint, qt_material_p bigint, nm_usuario_p text) FROM PUBLIC;

