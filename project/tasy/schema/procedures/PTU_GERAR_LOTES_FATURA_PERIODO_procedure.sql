-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_lotes_fatura_periodo ( dt_inicial_p timestamp, dt_final_p timestamp, dt_prev_envio_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
ds_camara_w		varchar(255);
nr_seq_camara_w		bigint;
nr_seq_periodo_w	bigint;
nr_seq_lote_w		bigint;
dt_limite_a500_w	timestamp;

/* O parâmetro dt_prev_envio_p tem de ser varchar2 pois pelo delphi não é obrigatório passá-lo*/
 
 
/* Cursor das câmaras */
 
C01 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		a.ds_camara 
	from	pls_camara_compensacao a 
	where	a.ie_situacao	= 'A';					
 

BEGIN 
if (dt_inicial_p IS NOT NULL AND dt_inicial_p::text <> '') and (dt_final_p IS NOT NULL AND dt_final_p::text <> '') then 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_camara_w, 
		ds_camara_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		select	max(a.nr_sequencia) 
		into STRICT	nr_seq_periodo_w 
		from	pls_camara_calendario b, 
			pls_camara_calend_periodo a 
		where	a.nr_seq_calendario	= b.nr_sequencia 
		and	b.nr_seq_camara		= nr_seq_camara_w 
		and	a.dt_limite_a500 between dt_inicial_p and dt_final_p;
		 
		if (coalesce(nr_seq_periodo_w::text, '') = '') then 
			-- Não foi encontrada uma data limite envio A500 no calendário da câmara #@DS_CAMARA#@ que esteja entre o período inicial e final definido. 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(266800, 'DS_CAMARA=' || ds_camara_w);
		else 
			select	max(a.dt_limite_a500) 
			into STRICT	dt_limite_a500_w 
			from	pls_camara_calendario b, 
				pls_camara_calend_periodo a 
			where	a.nr_seq_calendario	= b.nr_sequencia 
			and	a.nr_sequencia		= nr_seq_periodo_w;
		end if;
		 
		select	nextval('ptu_lote_fatura_envio_seq') 
		into STRICT	nr_seq_lote_w 
		;
		 
		insert into ptu_lote_fatura_envio(nr_sequencia, 
			nm_usuario, 
			dt_atualizacao, 
			nm_usuario_nrec, 
			dt_atualizacao_nrec, 
			cd_estabelecimento, 
			dt_inicio, 
			dt_fim, 
			nr_seq_camara, 
			nr_seq_periodo, 
			ie_sem_camara_comp, 
			dt_previsao_envio) 
		values (nr_seq_lote_w, 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			cd_estabelecimento_p, 
			dt_inicial_p, 
			dt_final_p, 
			nr_seq_camara_w, 
			nr_seq_periodo_w, 
			'N', 
			dt_limite_a500_w);
			 
		CALL ptu_gerar_lote_fatura(nr_seq_lote_w,cd_estabelecimento_p,nm_usuario_p);
		end;
	end loop;
	close c01;
	 
	/* Criar também um lote para as unimeds sem câmara */
 
	select	nextval('ptu_lote_fatura_envio_seq') 
	into STRICT	nr_seq_lote_w 
	;
 
	insert into ptu_lote_fatura_envio(nr_sequencia, 
		nm_usuario, 
		dt_atualizacao, 
		nm_usuario_nrec, 
		dt_atualizacao_nrec, 
		cd_estabelecimento, 
		dt_inicio, 
		dt_fim, 
		nr_seq_camara, 
		nr_seq_periodo, 
		ie_sem_camara_comp, 
		dt_previsao_envio) 
	values (nr_seq_lote_w, 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		cd_estabelecimento_p, 
		dt_inicial_p, 
		dt_final_p, 
		null, 
		null, 
		'S', 
		CASE WHEN coalesce(dt_prev_envio_p::text, '') = '' THEN null  ELSE to_date(dt_prev_envio_p) END );
			 
	CALL ptu_gerar_lote_fatura(nr_seq_lote_w,cd_estabelecimento_p,nm_usuario_p);
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_lotes_fatura_periodo ( dt_inicial_p timestamp, dt_final_p timestamp, dt_prev_envio_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

