-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE adicionar_itens_copia_pacote ( ds_area_procedimento_p text, ds_especialidade_p text, ds_grupo_proc_p text, ie_opcao_p bigint, nm_usuario_p text) AS $body$
DECLARE


/*
ie_opcao_p
0 - √Årea procedimento
1 - Especialidade
2 - Grupo procedimento
*/
cd_especialidade_w	bigint;
cd_grupo_proc_w		bigint;
nr_sequencia_w		bigint;
cd_area_procedimento_w	bigint;

C01 CURSOR FOR
	SELECT	cd_area_procedimento
	from	area_procedimento
	where	obter_se_contido(cd_area_procedimento, ds_area_procedimento_p) = 'S';


C02 CURSOR FOR
	SELECT	cd_especialidade
	from	especialidade_proc
	where	cd_area_procedimento = cd_area_procedimento_w;

C03 CURSOR FOR
	SELECT	cd_grupo_proc
	from	grupo_proc
	where	cd_especialidade = cd_especialidade_w;

C04 CURSOR FOR
	SELECT	cd_especialidade
	from	especialidade_proc
	where	cd_area_procedimento = cd_area_procedimento_w
	and	obter_se_contido(cd_especialidade, ds_especialidade_p) = 'S';

C05 CURSOR FOR
	SELECT	cd_grupo_proc
	from	grupo_proc
	where	cd_especialidade = cd_especialidade_w
	and	obter_se_contido(cd_grupo_proc, ds_grupo_proc_p) = 'S';


BEGIN

if (ie_opcao_p = 0) then

	open C01;
	loop
	fetch C01 into
		cd_area_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		insert into w_copia_regra_pacote(
			nr_sequencia,
			nr_seq_pacote,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_area_procedimento,
			cd_especialidade,
			cd_grupo_proc)
		values (	nextval('w_copia_regra_pacote_seq'),
			null,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			cd_area_procedimento_w,
			null,
			null);

		open C02;
		loop
		fetch C02 into
			cd_especialidade_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			insert into w_copia_regra_pacote(
				nr_sequencia,
				nr_seq_pacote,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_area_procedimento,
				cd_especialidade,
				cd_grupo_proc)
			values (	nextval('w_copia_regra_pacote_seq'),
				null,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_area_procedimento_w,
				cd_especialidade_w,
				null);

			open C03;
			loop
			fetch C03 into
				cd_grupo_proc_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin

				insert into w_copia_regra_pacote(
					nr_sequencia,
					nr_seq_pacote,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_area_procedimento,
					cd_especialidade,
					cd_grupo_proc)
				values (	nextval('w_copia_regra_pacote_seq'),
					null,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_area_procedimento_w,
					cd_especialidade_w,
					cd_grupo_proc_w);

				end;
			end loop;
			close C03;

			end;
		end loop;
		close C02;

		end;
	end loop;
	close C01;

elsif (ie_opcao_p = 1) then

	open C01;
	loop
	fetch C01 into
		cd_area_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		insert into w_copia_regra_pacote(
			nr_sequencia,
			nr_seq_pacote,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_area_procedimento,
			cd_especialidade,
			cd_grupo_proc)
		values (	nextval('w_copia_regra_pacote_seq'),
			null,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			cd_area_procedimento_w,
			null,
			null);

		open C04;
		loop
		fetch C04 into
			cd_especialidade_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin

			insert into w_copia_regra_pacote(
				nr_sequencia,
				nr_seq_pacote,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_area_procedimento,
				cd_especialidade,
				cd_grupo_proc)
			values (	nextval('w_copia_regra_pacote_seq'),
				null,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_area_procedimento_w,
				cd_especialidade_w,
				null);

			open C03;
			loop
			fetch C03 into
				cd_grupo_proc_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin

				insert into w_copia_regra_pacote(
					nr_sequencia,
					nr_seq_pacote,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_area_procedimento,
					cd_especialidade,
					cd_grupo_proc)
				values (	nextval('w_copia_regra_pacote_seq'),
					null,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_area_procedimento_w,
					cd_especialidade_w,
					cd_grupo_proc_w);

				end;
			end loop;
			close C03;

			end;
		end loop;
		close C04;

		end;
	end loop;
	close C01;

elsif (ie_opcao_p = 2) then

	open C01;
	loop
	fetch C01 into
		cd_area_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		insert into w_copia_regra_pacote(
			nr_sequencia,
			nr_seq_pacote,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_area_procedimento,
			cd_especialidade,
			cd_grupo_proc)
		values (	nextval('w_copia_regra_pacote_seq'),
			null,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			cd_area_procedimento_w,
			null,
			null);

		open C04;
		loop
		fetch C04 into
			cd_especialidade_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin

			insert into w_copia_regra_pacote(
				nr_sequencia,
				nr_seq_pacote,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_area_procedimento,
				cd_especialidade,
				cd_grupo_proc)
			values (	nextval('w_copia_regra_pacote_seq'),
				null,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_area_procedimento_w,
				cd_especialidade_w,
				null);

			open C05;
			loop
			fetch C05 into
				cd_grupo_proc_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin

				insert into w_copia_regra_pacote(
					nr_sequencia,
					nr_seq_pacote,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_area_procedimento,
					cd_especialidade,
					cd_grupo_proc)
				values (	nextval('w_copia_regra_pacote_seq'),
					null,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_area_procedimento_w,
					cd_especialidade_w,
					cd_grupo_proc_w);

				end;
			end loop;
			close C05;

			end;
		end loop;
		close C04;

		end;
	end loop;
	close C01;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE adicionar_itens_copia_pacote ( ds_area_procedimento_p text, ds_especialidade_p text, ds_grupo_proc_p text, ie_opcao_p bigint, nm_usuario_p text) FROM PUBLIC;

