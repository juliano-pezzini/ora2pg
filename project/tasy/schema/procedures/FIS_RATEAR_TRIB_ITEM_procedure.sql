-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_ratear_trib_item ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_nota_fiscal_p bigint) AS $body$
DECLARE

/* Variáveis */

qt_registro_w		bigint;
pr_rateio_w		double precision;
vl_rateio_w		double precision;
vl_total_trib_rateado_w	double precision;
qt_centros_rateado_w	bigint;
nr_sequencia_w		fis_rateio_trib_item.nr_sequencia%type;
vl_total_rateio_w	double precision;
vl_total_item_nf_w	double precision;
vl_diferenca_w       	double precision;

/*
Cursor para buscar o total dos valores rateados de cada item, e a quantidade de rateio de cada
*/
c01 CURSOR FOR
	SELECT	a.nr_item_nf,
		count(*) qt_centros_rateado,
		sum(a.vl_rateio) vl_total_rateado
	from	nota_fiscal_item_rateio a
	where	a.nr_seq_nota = nr_seq_nota_fiscal_p
	and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '')
	group by a.nr_item_nf
	order by 1;

c01_w		c01%rowtype;

/*
Cursor para buscar os tributos do item da nota fiscal, e seus valores
*/
c02 CURSOR FOR
	SELECT	a.cd_tributo,
		a.vl_tributo
	from	nota_fiscal_item_trib a
	where	a.nr_sequencia = nr_seq_nota_fiscal_p
	and	a.nr_item_nf = c01_w.nr_item_nf
	and	a.ie_rateio = 'N'
	and	a.vl_tributo <> 0
	order by 1, 2;

c02_w		c02%rowtype;

/*
Cursor para buscar os valores rateados de cada centro de custo
*/
c03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_item_nf,
		a.cd_centro_custo,
		a.vl_rateio
	from	nota_fiscal_item_rateio a
	where	a.nr_seq_nota = nr_seq_nota_fiscal_p
	and	a.nr_item_nf = c01_w.nr_item_nf
	and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '')
	and	a.vl_rateio <> 0
	order by 1;

c03_w		c03%rowtype;


BEGIN
/*
Deletar os registros já existentes na tabela FIS_RATEIO_TRIB_ITEM
*/
delete from fis_rateio_trib_item
where	nr_seq_nota_fiscal = nr_seq_nota_fiscal_p;

/*
Ver se existe registro
*/
begin
select	1
into STRICT	qt_registro_w
from	nota_fiscal_item_rateio
where	nr_seq_nota = nr_seq_nota_fiscal_p  LIMIT 1;
exception
when others then
	qt_registro_w := 0;
end;
/*
Caso exista rateio do valor do item, então deve ratear os valores do tributo também;
Deve ratear o valor completo do tributo, proporcional a cada centro, independente de o valor do item ter sido rateado por completo;
O que faltar ou sobrar(Aredondamenbto de centavos) fica no centro com maior valor.
*/
if (qt_registro_w = 1) then
	begin

	open c01; -- totais do item rateado
	loop
	fetch c01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		if (c01_w.vl_total_rateado <> 0) then
			begin

			open c02; -- tributos do item
			loop
			fetch c02 into
				c02_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin

				/*
				Limpar as variáveis
				*/
				pr_rateio_w		:= 0;
				vl_rateio_w		:= 0;
				vl_total_trib_rateado_w	:= 0;
				qt_centros_rateado_w	:= 0;

				open c03;
				loop
				fetch c03 into
					c03_w;
				EXIT WHEN NOT FOUND; /* apply on c03 */
					begin

					begin
					qt_centros_rateado_w := qt_centros_rateado_w + 1;

					/*
					Verificar quantos rateios já foram executados, para arredondar o valor caso for o último
					*/
					if (c01_w.qt_centros_rateado = qt_centros_rateado_w) then
						begin

						/*
						Valor do rateio arredondado para o último registro, que deve ter o maior valor
						*/
						vl_rateio_w := c02_w.vl_tributo - vl_total_trib_rateado_w;

						/*
						Cálculo do percentual com base no valor rateado com o arredondamento
						*/
						pr_rateio_w := (vl_rateio_w * 100) / c02_w.vl_tributo;

						end;
					else
						begin

						/*
						Percentual que o valor rateado para o centro equivale, referente ao total rateado do item
						*/
						pr_rateio_w := (c03_w.vl_rateio * 100) / c01_w.vl_total_rateado;

						/*
						Valor a ser rateado em situações normais
						*/
						vl_rateio_w := (c02_w.vl_tributo * pr_rateio_w) / 100;

						/*
						Caso ocorrer algum problema de valores, arredondar para não ocorrer problemas de ratear um valor acima do valor do tributo
						*/
						if	((vl_rateio_w + vl_total_trib_rateado_w) > c02_w.vl_tributo) then
							begin
							vl_rateio_w := c02_w.vl_tributo - vl_total_trib_rateado_w;
							end;
						end if;

						/*
						Recalcular o percentual com base no valor rateado do tributo
						*/
						pr_rateio_w := (vl_rateio_w * 100) / c02_w.vl_tributo;

						/*
						Acumular o valor rateado para não ultrapassar o valor do tributo
						*/
						vl_total_trib_rateado_w := vl_total_trib_rateado_w + vl_rateio_w;

						end;
					end if;

					exception
					when others then
						pr_rateio_w := 0;
						vl_rateio_w := 0;

					end;

					select	nextval('fis_rateio_trib_item_seq')
					into STRICT	nr_sequencia_w
					;

					insert into fis_rateio_trib_item(	nr_sequencia,
										nm_usuario,
										nm_usuario_nrec,
										dt_atualizacao,
										dt_atualizacao_nrec,
										cd_estabelecimento,
										cd_centro_custo,
										cd_tributo,
										pr_percentual,
										vl_rateio,
										nr_seq_nota_fiscal,
										nr_item_nf)
					values (				nr_sequencia_w,
										nm_usuario_p,
										nm_usuario_p,
										clock_timestamp(),
										clock_timestamp(),
										cd_estabelecimento_p,
										c03_w.cd_centro_custo,
										c02_w.cd_tributo,
										pr_rateio_w,
										vl_rateio_w,
										nr_seq_nota_fiscal_p,
										c01_w.nr_item_nf);
					end;
				end loop;
				close c03;
				end;
			end loop;
			close c02;
			end;
		end if;

		select	sum(vl_rateio)
		into STRICT	vl_total_rateio_w
		from	fis_rateio_trib_item
		where	nr_seq_nota_fiscal	= nr_seq_nota_fiscal_p
		and	nr_item_nf		= c01_w.nr_item_nf;

		select	sum(abs(vl_tributo))
		into STRICT	vl_total_item_nf_w
		from	nota_fiscal_item_trib
		where	nr_sequencia	= nr_seq_nota_fiscal_p
		and	nr_item_nf	= c01_w.nr_item_nf;

		vl_diferenca_w := vl_total_item_nf_w - vl_total_rateio_w;

		if (vl_diferenca_w >= -0.05) and (vl_diferenca_w <=  0.05) then
			update	fis_rateio_trib_item
			set	vl_rateio	= (vl_rateio + vl_diferenca_w)
			where	nr_sequencia	= nr_sequencia_w;
		end if;
		end;

	end loop;
	close c01;
	end;
end if;

/*
Não deve ter commit porque é chamada dentro da ATUALIZAR_NOTA_FISCAL
commit;
*/
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_ratear_trib_item ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_nota_fiscal_p bigint) FROM PUBLIC;

