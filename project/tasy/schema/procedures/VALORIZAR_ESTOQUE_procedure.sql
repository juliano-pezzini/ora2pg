-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE valorizar_estoque ( dt_mesano_referencia_p timestamp, cd_estabelecimento_p bigint, ie_virada_p text, nm_usuario_p text) AS $body$
DECLARE


dt_mesano_vigente_w	timestamp;
nr_sequencia_w		bigint;
cd_estabelecimento_w	smallint;
ds_log_w			varchar(254);
ie_valorizacao_consig_w	varchar(15);
ie_ponto_valorizacao_w	varchar(15);
cd_local_estoque_w	smallint;
cd_material_w		integer;
qt_existe_w		integer;
ie_metodo_valorizacao_w	varchar(15);
dt_inicio_w	timestamp;
ds_erro_w	varchar(4000);
reg_integracao_p		gerar_int_padrao.reg_integracao;
ie_retificar_w		bigint;
dt_ultima_virada_w	timestamp;
nr_ult_virada_w		log_valorizacao.nr_sequencia%type := 0;
ds_retorno_integracao_w		varchar(4000);
cd_registro_externo transm_bndasaf.cd_registro_externo%type;

/* Fabio 17/11/2005
criei o cursor, para que seja possivel fazer a valorizacao para todos os estabelecimentos
desta forma pode-se criar um job passando o estabelecimento como 0(zero)*/


/* ie_valorizacao_consig_w
N  = nao valorizar
U = saldo pela ultima compra
CM = saldo e movimento pelo custo medio*/
c01 CURSOR FOR
SELECT	cd_estabelecimento
from	estabelecimento
where	ie_situacao = 'A'
and	cd_estabelecimento = CASE WHEN coalesce(cd_estabelecimento_p,0)=0 THEN  cd_estabelecimento  ELSE cd_estabelecimento_p END;


c02 CURSOR FOR
SELECT	cd_local_estoque,
	cd_material
from	saldo_estoque
where	cd_estabelecimento		= cd_estabelecimento_w
and	dt_mesano_referencia	= dt_mesano_referencia_p
and	ie_bloqueio_inventario	= 'S';



BEGIN


open c01;
loop
fetch c01 into
	cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	select	max(dt_mesano_vigente),
			coalesce(max(ie_valorizacao_consig), 'U'),
			max(dt_ultima_virada)
	into STRICT	dt_mesano_vigente_w,
			ie_valorizacao_consig_w,
			dt_ultima_virada_w
	from 	parametro_estoque
	where	cd_estabelecimento	= cd_estabelecimento_w;

	ie_metodo_valorizacao_w := substr(sup_obter_metodo_valorizacao(dt_mesano_referencia_p, cd_estabelecimento_w),1,15);

	select	coalesce(max(ie_ponto_valorizacao), 'N')
	into STRICT	ie_ponto_valorizacao_w
	from 	parametro_compras
	where	cd_estabelecimento	= cd_estabelecimento_w;

	dt_inicio_w	:=	clock_timestamp();

	if (ie_virada_p = 'S') then
		begin
		if (pkg_date_utils.add_month(dt_mesano_vigente_w,1,0) > pkg_date_utils.start_of(clock_timestamp(),'MONTH',0)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(266344);
			--'Nao e possivel fazer virada para mes futuro.');
		end if;

		update	parametro_estoque
		set 	dt_ultima_virada	= dt_mesano_vigente,
			dt_mesano_vigente	= pkg_date_utils.add_month(dt_mesano_vigente, 1,0)
		where	cd_estabelecimento	= cd_estabelecimento_w;
		end;
	end if;

	select	nextval('log_valorizacao_seq')
	into STRICT	nr_sequencia_w
	;

	insert into log_valorizacao(
			nr_sequencia,
			cd_estabelecimento,
			dt_atualizacao,
			nm_usuario,
			dt_mesano_referencia,
			dt_inicio,
			ds_log,
			ie_virada)
	values (	nr_sequencia_w,
			cd_estabelecimento_w,
			clock_timestamp(),
			nm_usuario_p,
			pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0),
			dt_inicio_w,
			WHEB_MENSAGEM_PCK.get_texto(311561,'IE_VIRADA_P=' || ie_virada_p || ';' || 'DT_MESANO_VIGENTE_W=' || dt_mesano_vigente_w),
			ie_virada_p);

	commit;


	begin
	if (ie_metodo_valorizacao_w = 'MPM') then
		CALL val_estoque_media_ponderada.val_prod(pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0), cd_estabelecimento_w, nm_usuario_p);
	else
		CALL val_mensal_estoque.val_est_prod(pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0), cd_estabelecimento_w, nm_usuario_p);
	end if;

	if (ie_valorizacao_consig_w = 'U') then
		CALL valorizar_consignado(pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0), cd_estabelecimento_w, nm_usuario_p);
	elsif (ie_valorizacao_consig_w = 'CM') then
		CALL val_mensal_consignado.val_consig_prod(pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0), cd_estabelecimento_w, nm_usuario_p);
	end if;
	exception
	when others then
		begin
		ds_erro_w	:=	sqlerrm;
		rollback;

		if (ie_virada_p = 'S') then
			begin
			update	parametro_estoque
			set 	dt_ultima_virada	= pkg_date_utils.add_month(dt_ultima_virada, -1,0),
				dt_mesano_vigente	= pkg_date_utils.add_month(dt_mesano_vigente, -1,0)
			where	cd_estabelecimento	= cd_estabelecimento_w;
			commit;
			end;
		end if;

		CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
		end;
	end;

	if (ie_virada_p = 'S') then
		begin
		CALL virada_saldo(pkg_date_utils.add_month(dt_mesano_vigente_w,1,0), cd_estabelecimento_w, nm_usuario_p, 'S');
		end;
	end if;

	ds_log_w	:= WHEB_MENSAGEM_PCK.get_texto(311561,'IE_VIRADA_P=' || ie_virada_p || ';' || 'DT_MESANO_VIGENTE_W=' || dt_mesano_vigente_w);

	update 	log_valorizacao
	set 	ds_log = ds_log_w,
			dt_final = clock_timestamp(),
			dt_atualizacao = clock_timestamp()
	where nr_sequencia = nr_sequencia_w;

	/*'Envia fechamento mensal para a fila de integracao'*/

	if (ie_virada_p = 'S') then
		begin
		reg_integracao_p.ie_operacao		:=	'I';
		reg_integracao_p.cd_estab_documento		:=	cd_estabelecimento_p;

		reg_integracao_p := gerar_int_padrao.gravar_integracao('9', nr_sequencia_w, nm_usuario_p, reg_integracao_p);

		select	count(1)
		into STRICT	ie_retificar_w
		from	transm_bndasaf a,
				log_valorizacao b
		where	a.IE_EVENTO = '392'
		and		a.cd_registro_origem = b.nr_sequencia
		and		b.dt_mesano_referencia = pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0);

		if (ie_retificar_w > 0) then
            select	max(a.cd_registro_externo)
            into STRICT	cd_registro_externo
            from	transm_bndasaf a,
				log_valorizacao b
            where	a.IE_EVENTO = '392'
            and		a.cd_registro_origem = b.nr_sequencia
            and		b.dt_mesano_referencia = pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0);

			reg_integracao_p := gerar_int_padrao.gravar_integracao('399', nr_sequencia_w, nm_usuario_p, reg_integracao_p);

            commit;

            select	bifrost.send_integration(
						'balanceClosingRectification.send.request',
						'com.philips.tasy.integration.stock.outbound.BalanceClosingRectificationCallback',
						'{"document":'|| nr_sequencia_w|| ', "currentMonthOfYear":'|| '"' || to_char(dt_mesano_vigente_w, 'dd/mm/yyyy') ||  '"' ||',  "userName":"'||nm_usuario_p||'", "event":"'||399||'"}',
						nm_usuario_p)
			into STRICT	ds_retorno_integracao_w
			;
		else

			reg_integracao_p := gerar_int_padrao.gravar_integracao('392', nr_sequencia_w, nm_usuario_p, reg_integracao_p);

			commit;

			select	bifrost.send_integration(
						'monthlyClosing.send.request',
						'com.philips.tasy.integration.stock.outbound.MonthlyClosingCallback',
						'{"document":'|| nr_sequencia_w|| ', "currentMonthOfYear":'|| '"' || to_char(dt_mesano_vigente_w, 'dd/mm/yyyy') ||  '"' ||',  "userName":"'||nm_usuario_p||'",  "event":"'||392||'"}',
						nm_usuario_p)
			into STRICT	ds_retorno_integracao_w
			;
		end if;
		end;
	end if;

	open c02;
	loop
	fetch c02 into
		cd_local_estoque_w,
		cd_material_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		select	count(*)
		into STRICT	qt_existe_w
		from	inventario b,
			inventario_material a
		where	a.nr_seq_inventario		= b.nr_sequencia
		and	a.cd_material		= cd_material_w
		and	b.cd_local_estoque		= cd_local_estoque_w
		and	b.cd_estabelecimento	= cd_estabelecimento_w
		and	(b.dt_bloqueio IS NOT NULL AND b.dt_bloqueio::text <> '')
		and	coalesce(b.dt_atualizacao_saldo::text, '') = '';

		if (qt_existe_w = 0) then
			update	saldo_estoque
			set	ie_bloqueio_inventario	= 'N'
			where	cd_estabelecimento		= cd_estabelecimento_w
			and	dt_mesano_referencia	= pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0)
			and	cd_local_estoque		= cd_local_estoque_w
			and	cd_material		= cd_material_w;
		end if;

		end;
	end loop;
	close c02;

	if (ie_ponto_valorizacao_w = 'S') then
		CALL calcular_ponto_pedido(
			cd_estabelecimento_w,
			0,
			pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0),
			null,
			null,
			null,
			null,
			null,
			nm_usuario_p);
	end if;

	commit;
	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE valorizar_estoque ( dt_mesano_referencia_p timestamp, cd_estabelecimento_p bigint, ie_virada_p text, nm_usuario_p text) FROM PUBLIC;

