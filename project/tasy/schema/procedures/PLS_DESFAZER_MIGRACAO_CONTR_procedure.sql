-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_desfazer_migracao_contr ( nr_seq_segurado_p bigint, cd_estabelecimento_p bigint, nr_seq_contrato_ant_p INOUT bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_segurado_ant_w		bigint;
nr_seq_segurado_w		bigint;
dt_liberacao_w			timestamp;
nm_pessoa_fisica_w		varchar(255);
dt_rescisao_w			timestamp;
dt_migracao_w			timestamp;
dt_suspensao_seg_w		timestamp;
nr_seq_contrato_ant_w		bigint;
qt_registros_w			bigint;
nr_seq_segurado_ant_pag_w	bigint;
nr_seq_motivo_cancelamento_w	bigint;
nr_seq_contrato_w		pls_contrato.nr_sequencia%type;
nr_seq_status_exclusao_w	pls_segurado_status.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	nr_seq_segurado
	from (	SELECT	nr_sequencia nr_seq_segurado
			from	pls_segurado
			where	nr_seq_titular	= nr_seq_segurado_p
			and	(nr_seq_segurado_ant IS NOT NULL AND nr_seq_segurado_ant::text <> '')
			
union all

			select	nr_sequencia nr_seq_segurado
			from	pls_segurado
			where	nr_sequencia	= nr_seq_segurado_p) alias1;


BEGIN

--Consistir o SIB
CALL pls_consiste_data_sib(clock_timestamp(),nm_usuario_p,cd_estabelecimento_p);

select	nr_seq_segurado_ant
into STRICT	nr_seq_segurado_ant_pag_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_p;

select	max(nr_seq_contrato)
into STRICT	nr_seq_contrato_w
from	pls_segurado
where	nr_sequencia = nr_seq_segurado_ant_pag_w;

open C01;
loop
fetch C01 into
	nr_seq_segurado_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	nr_seq_segurado_ant,
		dt_liberacao,
		substr(obter_nome_pf(cd_pessoa_fisica),1,255),
		dt_migracao
	into STRICT	nr_seq_segurado_ant_w,
		dt_liberacao_w,
		nm_pessoa_fisica_w,
		dt_migracao_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;

	--Verificar se o beneficário já está liberado
	if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(262210, 'NR_SEQ_SEGURADO=' || nr_seq_segurado_w || ';NM_PESSOA_FISICA=' || nm_pessoa_fisica_w);
		/* Mensagem: Beneficiário NR_SEQ_SEGURADO - NM_PESSOA_FISICA liberado. Não é possível desfazer a contratação! */

	end if;

	select	dt_rescisao,
		nr_seq_motivo_cancelamento,
		nr_seq_contrato
	into STRICT	dt_rescisao_w,
		nr_seq_motivo_cancelamento_w,
		nr_seq_contrato_ant_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_ant_w;

	/*Caso a data de rescisão do beneficiárioa anterior, for a mesma data da migração então reativa o contrato*/

	if (trunc(dt_rescisao_w,'dd')	= trunc(dt_migracao_w,'dd')) then
		dt_suspensao_seg_w := pls_obter_dt_suspensao_seg(nr_seq_segurado_ant_w);
		--Não pode atualizar a data de reativação, pois nesse caso está desfazendo a migração e não reativando. Preencher a data irá causar problema no SIB
		update	pls_segurado
		set	dt_rescisao			 = NULL,
			dt_limite_utilizacao		 = NULL,
			nr_seq_motivo_cancelamento	 = NULL,
			nr_seq_causa_rescisao		 = NULL,
			ie_tipo_rescisao		= '',
			dt_cancelamento			 = NULL,
			ie_situacao_atend		= CASE WHEN dt_suspensao_seg_w = NULL THEN CASE WHEN dt_liberacao = NULL THEN 'I'  ELSE 'A' END   ELSE 'S' END
		where	nr_sequencia			= nr_seq_segurado_ant_w;

		--Gerar histórico  de reativação do segurado anterior
		CALL pls_gerar_segurado_historico(	nr_seq_segurado_ant_w, '2', clock_timestamp(),'Reativação',
			'Desfeita a contratação do beneficiário através da função OPS - Gestão de Contratos', null, clock_timestamp(), null,
			null, clock_timestamp(), null, null,
			null, null, null, null, nm_usuario_p,
			'N');
	end if;

	--Retira informações do beneficiário, sobre a migração
	update	pls_segurado
	set	dt_migracao			 = NULL,
		nr_seq_segurado_mig		 = NULL,
		nr_contrato_migrado		 = NULL,
		nm_usuario			= nm_usuario_p,
		dt_atualizacao			= clock_timestamp()
	where	nr_sequencia			= nr_seq_segurado_ant_w;

	delete	FROM pls_segurado_compl
	where	nr_seq_segurado	= nr_seq_segurado_w;

	delete	FROM pls_carencia
	where	nr_seq_segurado	= nr_seq_segurado_w;

	delete	FROM w_pls_benef_movto_mensal
	where	nr_seq_segurado	= nr_seq_segurado_w;

	delete	FROM w_pls_carencia_abrang_ant
	where	nr_seq_segurado = nr_seq_segurado_w;

	delete from pls_segurado_preco
	where	nr_seq_segurado	= nr_seq_segurado_w;

	begin
	delete	FROM pls_bonificacao_vinculo a
	where	exists (	SELECT	1
				from	pls_segurado x
				where	a.nr_seq_segurado	= x.nr_sequencia
				and	x.nr_sequencia		= nr_seq_segurado_w);
	exception
	when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(262211, 'NM_PESSOA_FISICA=' || nm_pessoa_fisica_w || ';DS_ERRO=' || sqlerrm(SQLSTATE));
		/* Mensagem: Não foi possível excluir PLS_BONIFICACAO_VINCULO! (Beneficiário: NM_PESSOA_FISICA) DS_ERRO */

	end;

	begin
	delete	FROM pls_sca_vinculo a
	where	exists (	SELECT	1
				from	pls_segurado x
				where	a.nr_seq_segurado	= x.nr_sequencia
				and	x.nr_sequencia		= nr_seq_segurado_w);
	exception
	when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(262212, 'NM_PESSOA_FISICA=' || nm_pessoa_fisica_w || ';DS_ERRO=' || sqlerrm(SQLSTATE));
		/* Mensagem: Não foi possível excluir PLS_SCA_VINCULO! (Beneficiário: NM_PESSOA_FISICA) DS_ERRO */

	end;

	begin
	delete	FROM pls_segurado_historico a
	where	exists (	SELECT	1
				from	pls_segurado x
				where	a.nr_seq_segurado	= x.nr_sequencia
				and	x.nr_sequencia		= nr_seq_segurado_w);
	exception
		when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(262227, 'NM_PESSOA_FISICA=' || nm_pessoa_fisica_w || ';DS_ERRO=' || sqlerrm(SQLSTATE));
		/* Mensagem: Não foi possível excluir PLS_SEGURADO_HISTORICO! (Beneficiário: NM_PESSOA_FISICA) DS_ERRO */

	end;

	begin
	delete	FROM pls_carencia a
	where	exists (	SELECT	1
				from	pls_segurado x
				where	a.nr_seq_segurado	= x.nr_sequencia
				and	x.nr_sequencia		= nr_seq_segurado_w);
	exception
	when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(461237, 'NM_PESSOA_FISICA=' || nm_pessoa_fisica_w || ';DS_ERRO=' || sqlerrm(SQLSTATE));
		/* Mensagem: Não foi possível excluir PLS_CARENCIA! (Beneficiário: NM_PESSOA_FISICA) DS_ERRO */

	end;

	begin
	delete	FROM pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
	exception
		when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(262229, 'NM_PESSOA_FISICA=' || nm_pessoa_fisica_w || ';DS_ERRO=' || sqlerrm(SQLSTATE));
		/* Mensagem: Não foi possível excluir PLS_SEGURADO! (Beneficiário: NM_PESSOA_FISICA) DS_ERRO */

	end;

	end;
end loop;
close C01;

if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
	CALL pls_preco_beneficiario_pck.atualizar_preco_beneficiarios(null, nr_seq_contrato_w, null, null, clock_timestamp(), null, 'N', nm_usuario_p, cd_estabelecimento_p);
end if;

begin
delete	from	pls_contrato_pagador_fin a
where	exists (SELECT	1
		from	pls_contrato_pagador x
		where	x.nr_sequencia	= a.nr_seq_pagador
		and	x.nr_seq_seg_mig_origem	= nr_seq_segurado_ant_pag_w);

delete	from	pls_contrato_pagador
where	nr_seq_seg_mig_origem	= nr_seq_segurado_ant_pag_w;
exception
when others then
	null;
end;

nr_seq_contrato_ant_p	:= nr_seq_contrato_ant_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_desfazer_migracao_contr ( nr_seq_segurado_p bigint, cd_estabelecimento_p bigint, nr_seq_contrato_ant_p INOUT bigint, nm_usuario_p text) FROM PUBLIC;

