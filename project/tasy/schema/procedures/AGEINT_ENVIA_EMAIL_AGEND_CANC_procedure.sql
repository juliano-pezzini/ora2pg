-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_envia_email_agend_canc () AS $body$
DECLARE


nm_paciente_w			varchar(255);
dt_agenda_simples_w		varchar(20);
hr_agenda_w				varchar(10);
dt_agenda_w				varchar(20);
dt_agenda_ww			varchar(20);
ds_agenda_w				varchar(255);
nr_sequencia_w			bigint;
nr_seq_agenda_int_w		bigint;
ds_email_destino_w		varchar(255);
ie_utiliza_format_w		varchar(1) := 'N';
nr_seq_regra_w			bigint;
cd_setor_atendimento_w  bigint;
ds_mensagem_email_w		varchar(2000);
ds_assunto_email_w		varchar(255);
ds_email_origem_w		varchar(255);
ds_erro_w				varchar(255);
cd_estabelecimento_w	bigint;
ie_tipo_compl_email_w	varchar(5);
cd_pessoa_agenda_w		varchar(10);
cd_prof_agendamento_w	varchar(10);
dt_transferencia_w		timestamp;
cd_pessoa_fisica_w		varchar(10);
qt_emails_enviados_w	bigint;
nr_Seq_ageint_ant_w		bigint	:= 0;	
dt_ultima_exec_job_w		timestamp;
			
--Regra de envio de e-mail de consultas canceladas
C01 CURSOR FOR
	SELECT	cd_estabelecimento,
			ds_titulo_email,
			ds_remetente,
			ds_mensagem,
			ie_tipo_compl_envio,
			nr_sequencia,
			cd_setor_atendimento
	from	regra_email_agenda_canc	
	order by 1;
	
C02 CURSOR FOR
	/*AGENDA DE CONSULTAS*/

	SELECT	distinct
			substr(coalesce(obter_nome_pf(a.cd_pessoa_fisica), a.nm_paciente),1,255),
			to_char(a.dt_agenda, 'dd/mm/yyyy'),				
			to_char(a.dt_agenda, 'hh24:mi'),
			to_char(a.dt_agenda, 'dd/mm/yyyy hh24:mi'),
			substr(coalesce(obter_nome_medico(a.cd_medico_req,'NCD'), obter_nome_pf(b.cd_pessoa_fisica)),1,255),
			a.nr_sequencia,
			d.nr_seq_agenda_int,
			a.cd_medico_req,
			e.cd_pessoa_fisica,
			a.cd_pessoa_fisica,
			a.dt_agenda
	FROM agenda b, agenda_consulta a
LEFT OUTER JOIN agenda_integrada_item d ON (a.nr_sequencia = d.nr_seq_agenda_cons)
LEFT OUTER JOIN agenda_integrada_prof_item e ON (d.nr_sequencia = e.nr_seq_agenda_item)
WHERE a.cd_agenda			= b.cd_agenda   and b.cd_tipo_agenda	= 3 and b.ie_situacao		= 'A' and a.dt_cancelamento	between trunc(clock_timestamp()) and trunc(clock_timestamp()) + 86399/86400 and (a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') and (a.dt_cancelamento IS NOT NULL AND a.dt_cancelamento::text <> '') and a.ie_status_agenda	= 'C' and ((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = '')) and ((cd_setor_atendimento_w = b.cd_setor_exclusivo) or (coalesce(cd_setor_atendimento_w::text, '') = '')) and not exists (	SELECT	1
				from	ageint_log_envio x							
				where	x.nr_seq_agenda_int	= d.nr_sequencia
				and	x.ie_tipo_envio		= 'C'
				and	x.dt_envio		>= dt_ultima_exec_job_w) and a.dt_cancelamento >= dt_ultima_exec_job_w order by 	1,
				2;		
				

BEGIN

select coalesce(max(to_date(to_char(last_date,'dd/mm/yyyy ')  ||last_sec,'dd/mm/yyyy hh24:mi:ss')),clock_timestamp() - interval '1 days')
into STRICT	dt_ultima_exec_job_w
from  user_jobs
where lower(what) like '%ageint_envia_email_agend_canc%';

/*insert into log_atendimento (dt_atualizacao, nm_usuario, cd_log, ds_log)
				values (sysdate, 'fsgoertmann', 9, 'teste 2 ' || to_char(dt_ultima_exec_job_w,'dd/mm/yyyy hh24:mi:ss'));*/
open C01;
loop
fetch C01 into	
	cd_estabelecimento_w,	
	ds_assunto_email_w,
	ds_email_origem_w,
	ds_mensagem_email_w,
	ie_tipo_compl_email_w,
	nr_seq_regra_w,
	cd_setor_atendimento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	qt_emails_enviados_w := 0;
	
	if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') and (ds_assunto_email_w IS NOT NULL AND ds_assunto_email_w::text <> '') and (ds_mensagem_email_w IS NOT NULL AND ds_mensagem_email_w::text <> '')then
		
		open C02;
		loop
		fetch C02 into	
			nm_paciente_w,
			dt_agenda_simples_w,
			hr_agenda_w,
			dt_agenda_w,
			ds_agenda_w,
			nr_sequencia_w,
			nr_seq_agenda_int_w,
			cd_pessoa_agenda_w,
			cd_prof_agendamento_w,
			cd_pessoa_fisica_w,
			dt_agenda_ww;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			ds_erro_w	:= '';
			--Obter e-mail detino do médico responsável pela agenda
			select 	max(obter_compl_pf(coalesce(cd_pessoa_agenda_w, cd_prof_agendamento_w), ie_tipo_compl_email_w, 'M'))
			into STRICT	ds_email_destino_w
			;
			
			/*insert into log_atendimento (dt_atualizacao, nm_usuario, cd_log, ds_log)
				values (sysdate, 'fsgoertmann', 9, 'teste 1 ' || ds_email_destino_w || ' - ' || nr_seq_agenda_int_w || ' - ' || cd_pessoa_fisica_w);*/

			
			--Validar se foi feita transferência do agendamento, para buscar a nova sequência da integrada
			if (coalesce(nr_seq_agenda_int_w::text, '') = '')then
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_agenda_int_w
				from	agenda_integrada a,
						agenda_integrada_item b,
						agenda_consulta c
				where	a.nr_sequencia 			= b.nr_seq_agenda_int
				and		b.nr_seq_agenda_cons	= c.nr_sequencia
				and		a.cd_pessoa_fisica		= cd_pessoa_fisica_w
				and		b.ie_tipo_agendamento	= 'C'
				and		(b.dt_transferencia IS NOT NULL AND b.dt_transferencia::text <> '')	
				and		c.dt_agenda				> dt_agenda_ww;
			end if;			
			--R aise_application_error(-20011,'TESTE 01: '||nr_seq_agenda_int_w);

			/*insert into log_atendimento (dt_atualizacao, nm_usuario, cd_log, ds_log)
				values (sysdate, 'fsgoertmann', 9, 'teste 2 ' || nr_seq_agenda_int_w);*/
						
			if (nr_Seq_ageint_ant_w	= nr_seq_agenda_int_w) then
				--Verificar se já existe e-mail enviado no log da integrada, se existir, não enviará o próximo(para casos de transferência de horários)
				select	coalesce(count(*),0)
				into STRICT	qt_emails_enviados_w
				from	ageint_log_envio x							
				where	x.nr_seq_agenda_int	= nr_seq_agenda_int_w
				and		x.ie_tipo_envio		= 'C';
			end if;
			
			if (qt_emails_enviados_w = 0)then
			
				if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') and (ds_email_destino_w IS NOT NULL AND ds_email_destino_w::text <> '')then
					begin
					--Substituir macros do assunto
					ds_mensagem_email_w	:= substr(replace_macro(ds_mensagem_email_w, '@paciente', nm_paciente_w),1,2000);
					ds_mensagem_email_w	:= substr(replace_macro(ds_mensagem_email_w, '@data', dt_agenda_simples_w),1,2000);
					ds_mensagem_email_w	:= substr(replace_macro(ds_mensagem_email_w, '@hora', hr_agenda_w),1,2000);
					ds_mensagem_email_w	:= substr(replace_macro(ds_mensagem_email_w, '@dtagendamento', dt_agenda_w),1,2000);
					ds_mensagem_email_w	:= substr(replace_macro(ds_mensagem_email_w, '@medico', ds_agenda_w),1,2000);
					
					
					--Enviar e-mail
					CALL enviar_email(ds_assunto_email_w, ds_mensagem_email_w, ds_email_origem_w, ds_email_destino_w, 'Tasy', 'M');			
					exception
					when others then
						--R aise_application_error(-20011,'Ocorreu algum erro no envio do email!' ||chr(10)|| 'Detalhes: ' ||sqlerrm);
						ds_erro_w := Wheb_mensagem_pck.get_texto(307437) /*'Ocorreu algum erro no envio do email!'*/
 ||chr(10)|| Wheb_mensagem_pck.get_texto(307438) || ': ' /*'Detalhes: '*/ ||sqlerrm;
					end;
				else --Gravar log caso o médico não possuir e-mail definido em seu cadastro
					CALL Ageint_gravar_log_email(nr_seq_agenda_int_w, Wheb_mensagem_pck.get_texto(307439) /*'E-mail não enviado! Verificar se o médico responsável pelo agendamento possui e-mail cadastrado.'*/
, ds_email_destino_w, ds_assunto_email_w, 'Tasy', ie_utiliza_format_w, 'C', '');							
				end if;
			else
				ds_erro_w	:= Wheb_mensagem_pck.get_texto(307441); --'Erro';
			end if;
			
			--Se e-mail enviado com sucesso, gravar log na ageint_log_envio
			if (coalesce(ds_erro_w::text, '') = '') or (ds_erro_w = '')then
				begin
				CALL Ageint_gravar_log_email(nr_seq_agenda_int_w, ds_mensagem_email_w, ds_email_destino_w, ds_assunto_email_w, 'Tasy', ie_utiliza_format_w, 'C','');
				exception
				when others then					
					ds_erro_w	:= Wheb_mensagem_pck.get_texto(307442) /*'Não foi possível gravar o log de envio de e-mail.'*/
 ||chr(10)|| Wheb_mensagem_pck.get_texto(307438) || ': ' /*'Detalhes: '*/ ||sqlerrm;
				end;
			end if;
			qt_emails_enviados_w	:= 0;
			nr_Seq_ageint_ant_w	:= nr_seq_agenda_int_w;
			end;
		end loop;
		close C02;
	
	end if;	
	
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_envia_email_agend_canc () FROM PUBLIC;

