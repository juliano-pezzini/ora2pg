-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_concluir_pend_resp_atend (nr_seq_pendencia_p bigint, nr_seq_evento_p bigint, nr_seq_atendimento_p bigint, ds_resolucao_p text, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Gravar a data de resolução, usuário e o que foi feito para resolver a pendência.
Também deve deixar o evento como concluído. Caso todos os eventos do atendimento estejam concluídos,
deve alterar o status do atendimento para "Aguardando conclusão"
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ X] Tasy (Delphi/Java) [ ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_status_w	pls_atendimento_evento.ie_status%type := null;
qt_registros_w	bigint;


BEGIN

if (nr_seq_pendencia_p IS NOT NULL AND nr_seq_pendencia_p::text <> '') and (nr_seq_evento_p IS NOT NULL AND nr_seq_evento_p::text <> '') and (ds_resolucao_p IS NOT NULL AND ds_resolucao_p::text <> '') then

	update	pls_atend_evt_pend_resp
	set	ds_resolucao		= ds_resolucao_p,
		dt_solucao		= clock_timestamp(),
		nm_usuario_solucao	= nm_usuario_p
	where	nr_sequencia 		= nr_seq_pendencia_p;

	update	pls_atendimento_evento a
	set	dt_atualizacao	= clock_timestamp(),
		ie_status	= 'C'
	where	a.nr_sequencia 	= nr_seq_evento_p
	and	not exists (	SELECT	1
				from	pls_atend_evt_pend_resp x
				where	x.nr_seq_atend_evento = a.nr_sequencia
				and	coalesce(x.dt_solucao::text, '') = '');

	/* Verifica se tem para o evento algum Agendamento externo */

	select	count(1)
	into STRICT	qt_registros_w
	from	pls_atendimento a, pls_atendimento_evento b
	where	a.nr_sequencia = b.nr_seq_atendimento
	and	a.nr_sequencia = nr_seq_atendimento_p
	and	exists (	SELECT	1
				from	pls_atend_evt_agenda_ext x
				where	x.nr_seq_atend_evento	= b.nr_sequencia);
	/*Se tiver algum agendamento externo muda o status do atendimento para Aguradando conclusão se não muda o status para concluído*/

	if (qt_registros_w > 0) then
		ie_status_w	:= 'G'; /*Aguardando conclusão*/
	else
		ie_status_w	:= 'C'; /*C - Concluído*/
	end if;

	update	pls_atendimento a
	set	dt_conclusao	= CASE WHEN ie_status_w='C' THEN clock_timestamp()  ELSE dt_conclusao END ,
		ie_status	= ie_status_w,
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	not exists (	SELECT	1
					from	pls_atendimento_evento x
					where	x.nr_seq_atendimento = a.nr_sequencia
					and	x.ie_status = 'P')
	and	a.nr_sequencia = nr_seq_atendimento_p;


end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_concluir_pend_resp_atend (nr_seq_pendencia_p bigint, nr_seq_evento_p bigint, nr_seq_atendimento_p bigint, ds_resolucao_p text, nm_usuario_p text) FROM PUBLIC;

