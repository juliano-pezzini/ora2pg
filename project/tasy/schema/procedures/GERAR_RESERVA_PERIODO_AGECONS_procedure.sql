-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_reserva_periodo_agecons (cd_agenda_p bigint, ds_dias_p text, hr_reserva_inicial_p timestamp, hr_reserva_final_p timestamp, dt_inicial_p timestamp, dt_final_p timestamp, cd_estabelecimento_p bigint, nr_seq_motivo_reserva_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
dt_atual_w		timestamp;
dt_reserva_inicial_w	timestamp;	
dt_reserva_final_w	timestamp;	
dt_dia_semana_w		smallint;
ie_gerar_dia_w		varchar(1);
ds_dias_w		varchar(255);
qt_agendamento_w	bigint;
nr_seq_agecons_w	bigint;
cd_tipo_agenda_w	bigint;
ie_feriado_w		varchar(1);
ie_gerar_sobra_w	varchar(1);
cd_estabelecimento_w	smallint;
ds_retorno_w		varchar(255);	
 
 
C01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	agenda_consulta 
	where	dt_agenda between dt_reserva_inicial_w and dt_reserva_final_w 
	and	cd_agenda = cd_agenda_p 
	and	ie_status_agenda = 'L';
					

BEGIN 
 
dt_atual_w	:= dt_inicial_p;
 
if (ds_dias_p IS NOT NULL AND ds_dias_p::text <> '') then 
	select	substr(ds_dias_p,1,length(ds_dias_p) -2) 
	into STRICT	ds_dias_w 
	;
end if;	
 
while(trunc(dt_atual_w) <= trunc(dt_final_p)) loop 
	begin 
		 
	dt_dia_semana_w	:= obter_cod_dia_semana(dt_atual_w);		
	 
	ie_gerar_dia_w	:= 'S';
	 
	if (ds_dias_w IS NOT NULL AND ds_dias_w::text <> '') then 
		ie_gerar_dia_w	:= obter_se_contido(dt_dia_semana_w,ds_dias_w);
	end if;
	 
	if (ie_gerar_dia_w = 'S') then 
		 
		dt_reserva_inicial_w := pkg_date_utils.get_DateTime(dt_atual_w, hr_reserva_inicial_p);
		 
		dt_reserva_final_w := pkg_date_utils.get_DateTime(dt_atual_w, hr_reserva_final_p);
		 
		select	count(*) 
		into STRICT	qt_agendamento_w 
		from	agenda_consulta 
		where	cd_agenda = cd_agenda_p 
		and	dt_agenda between dt_atual_w and trunc(dt_atual_w) + 86399/86400;
 
		if (qt_agendamento_w = 0) then 
		 
			select	max(cd_tipo_agenda), 
				max(ie_feriado), 
				max(ie_gerar_sobra_horario), 
				max(cd_estabelecimento) 
			into STRICT	cd_tipo_agenda_w, 
				ie_feriado_w, 
				ie_gerar_sobra_w, 
				cd_estabelecimento_w 
			from	agenda 
			where	cd_agenda = cd_agenda_p;
		 
			ds_retorno_w := horario_livre_consulta(cd_estabelecimento_w, cd_agenda_p, ie_feriado_w, dt_atual_w, nm_usuario_p, 'S', ie_gerar_sobra_w, 'N', null, ds_retorno_w);
		end if;
		 
		open C01;
		loop 
		fetch C01 into	 
			nr_seq_agecons_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			CALL alterar_status_agecons(cd_agenda_p, 
						nr_seq_agecons_w, 
						'R', 
						null, 
						null, 
						'N', 
						nm_usuario_p, 
						null);
						 
			if (nr_seq_motivo_reserva_p IS NOT NULL AND nr_seq_motivo_reserva_p::text <> '') then 
				update	agenda_consulta 
				set	nr_seq_motivo_reserva 	= nr_seq_motivo_reserva_p 
				where	nr_sequencia		= nr_seq_agecons_w;			
			end if;
			end;
		end loop;
		close C01;
	 
	end if;
	 
	dt_atual_w := dt_atual_w + 1;
		 
	end;
end loop;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_reserva_periodo_agecons (cd_agenda_p bigint, ds_dias_p text, hr_reserva_inicial_p timestamp, hr_reserva_final_p timestamp, dt_inicial_p timestamp, dt_final_p timestamp, cd_estabelecimento_p bigint, nr_seq_motivo_reserva_p bigint, nm_usuario_p text) FROM PUBLIC;

