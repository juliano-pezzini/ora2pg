-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_caixa_tit_pagar (nr_documento_p bigint, nr_docto_compl_p bigint, ie_origem_info_p text, ds_erro_p INOUT text) AS $body$
DECLARE


/* -------- Origem da Informação -------- */


/* -- Identifica de onde vem a informação que será gerada no fluxo de caixa -- 
Para títulos a pagar serão utilizadas as seguintes origens: 
 TP - Título a pagar
 TPB - Baixa do título a pagar
*/
cd_conta_financ_cpa_w		parametro_fluxo_caixa.cd_conta_financ_cpa%type;
ie_fim_semana_passado_w		parametro_fluxo_caixa.ie_fim_semana_passado%type;
ie_adiant_pago_w		parametro_fluxo_caixa.ie_adiant_pago%type;
ie_classif_baixa_cp_w		parametro_fluxo_caixa.ie_classif_baixa_cp%type;
ie_tit_pagar_transf_w		parametro_fluxo_caixa.ie_tit_pagar_transf%type;
ie_data_tit_adiant_w		parametro_fluxo_caixa.ie_data_tit_adiant%type;
ie_conta_finan_trans_w		parametro_fluxo_caixa.ie_conta_finan_trans%type;
ie_tit_pagar_desdob_w		parametro_fluxo_caixa.ie_tit_pagar_desdob%type;
ie_tit_pag_fluxo_w		parametro_fluxo_caixa.ie_tit_pag_fluxo%type;
ie_oc_parcial_w			parametro_fluxo_caixa.ie_oc_parcial%type;
ie_fim_semana_w			parametro_fluxo_caixa.ie_tratar_fim_semana%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
cd_moeda_empresa_w		moeda.cd_moeda%type;
dt_referencia_w			timestamp;
cd_conta_financ_w		conta_financeira.cd_conta_financ%type;
ds_erro_w			varchar(4000);
vl_fluxo_w			fluxo_caixa_docto.vl_fluxo%type;
vl_titulo_estrang_w double precision := 0;
cd_moeda_titulo_w  moeda.cd_moeda%type;
vl_baixa_w			fluxo_caixa_docto.vl_fluxo%type;
vl_fluxo_neg_w			fluxo_caixa_docto.vl_fluxo%type;

c01 CURSOR FOR
	SELECT	'CP' ie_integracao,
		dt_baixa,
		cd_conta_financ,
		round((vl_baixa + CASE WHEN cd_conta_financ_jcp=0 THEN vl_juros  ELSE 0 END  + CASE WHEN cd_conta_financ_mcp=0 THEN vl_multa  ELSE 0 END  - CASE WHEN cd_conta_financ_dcp=0 THEN vl_desconto  ELSE 0 END  + CASE WHEN cd_conta_financ_ocp=0 THEN vl_outros_acrescimos  ELSE 0 END )::numeric,2) vl_baixa,
		vl_baixa_estrang,
		cd_moeda,
		vl_juros,
		vl_multa,
		vl_desconto,
		vl_outros_acrescimos,
		cd_conta_financ_jcp,
		cd_conta_financ_mcp,
		cd_conta_financ_dcp,
		cd_conta_financ_ocp,
		nr_seq_classe nr_seq_classe_tit_pag,
		ie_tipo_tit_pag,
		nr_titulo,
		nr_seq_baixa,
		cd_estabelecimento,
		cd_estab_financeiro,
		cd_empresa,
		nr_seq_conta_banco,
		nr_seq_caixa,
		ds_observacao,
		vl_cotacao_baixa
	from	(SELECT	dt_baixa,
			cd_conta_financ,
			vl_baixa,
			vl_baixa_estrang,
			coalesce(obter_conta_financ_regra_fc(cd_empresa,'JCP',cd_cgc,null,dt_baixa,cd_estabelecimento),0) cd_conta_financ_jcp,
			coalesce(obter_conta_financ_regra_fc(cd_empresa,'MCP',cd_cgc,null,dt_baixa,cd_estabelecimento),0) cd_conta_financ_mcp,
			coalesce(obter_conta_financ_regra_fc(cd_empresa,'DCP',cd_cgc,null,dt_baixa,cd_estabelecimento),0) cd_conta_financ_dcp,
			coalesce(obter_conta_financ_regra_fc(cd_empresa,'OCP',cd_cgc,null,dt_baixa,cd_estabelecimento),0) cd_conta_financ_ocp,
			cd_moeda,
			vl_juros,
			vl_multa,
			vl_desconto,
			vl_outros_acrescimos,
			nr_seq_classe,
			ie_tipo_tit_pag,
			nr_titulo,
			nr_seq_baixa,
			cd_estabelecimento,
			cd_estab_financeiro,
			cd_empresa,
			nr_seq_conta_banco,
			nr_seq_caixa,
			ds_observacao,
			vl_cotacao_baixa
		from	(select	dt_baixa,
				coalesce(nr_seq_conta_financ,cd_conta_financ_cpa_w) cd_conta_financ,
				(dividir_sem_round(
					coalesce(
						CASE WHEN ie_tit_pagar_transf_w='S' THEN CASE WHEN ie_situacao='T' THEN vl_original  ELSE vl_titulo END   ELSE vl_titulo END ,
						CASE WHEN ie_tit_pagar_transf_w='S' THEN CASE WHEN ie_situacao='T' THEN vl_tit_transf  ELSE vl_titulo_alteracao END   ELSE vl_titulo_alteracao END ),
					CASE WHEN ie_tit_pagar_transf_w='S' THEN CASE WHEN ie_situacao='T' THEN vl_tit_transf  ELSE vl_titulo_alteracao END   ELSE vl_titulo_alteracao END ) *
				vl_baixa) vl_baixa,
				(dividir_sem_round(
					coalesce(
						CASE WHEN ie_tit_pagar_transf_w='S' THEN CASE WHEN ie_situacao='T' THEN vl_original  ELSE vl_titulo END   ELSE vl_titulo END ,
						CASE WHEN ie_tit_pagar_transf_w='S' THEN CASE WHEN ie_situacao='T' THEN vl_tit_transf  ELSE vl_titulo_alteracao END   ELSE vl_titulo_alteracao END ),
					CASE WHEN ie_tit_pagar_transf_w='S' THEN CASE WHEN ie_situacao='T' THEN vl_tit_transf  ELSE vl_titulo_alteracao END   ELSE vl_titulo_alteracao END ) *
				vl_baixa_estrang) vl_baixa_estrang,
				coalesce(cd_moeda,cd_moeda_empresa_w) cd_moeda,
				(dividir_sem_round(coalesce(vl_titulo,vl_titulo_alteracao),vl_titulo_alteracao) * vl_juros) vl_juros,
				(dividir_sem_round(coalesce(vl_titulo,vl_titulo_alteracao),vl_titulo_alteracao) * vl_multa) vl_multa,
				(dividir_sem_round(coalesce(vl_titulo,vl_titulo_alteracao),vl_titulo_alteracao) * vl_descontos) vl_desconto,
				(dividir_sem_round(coalesce(vl_titulo,vl_titulo_alteracao),vl_titulo_alteracao) * vl_outros_acrescimos) vl_outros_acrescimos,
				cd_cgc,
				nr_seq_classe,
				ie_tipo_tit_pag,
				nr_titulo,
				nr_seq_baixa,
				cd_estabelecimento,
				cd_estab_financeiro,
				cd_empresa,
				nr_seq_conta_banco,
				nr_seq_caixa,
				ds_observacao,
				vl_cotacao_baixa
			from (select	pkg_date_utils.start_of(a.dt_baixa,'DD',0) dt_baixa,
					c.nr_seq_conta_financ,
					b.ie_situacao,
					c.vl_original,
					c.vl_titulo,
					(obter_valor_tit_transf(b.nr_titulo, a.dt_baixa, 'CP'))::numeric  vl_tit_transf,
					(obter_dados_tit_pagar(b.nr_titulo,'VT'))::numeric  vl_titulo_alteracao,
					a.vl_baixa,
					a.vl_baixa_estrang,
					a.cd_moeda,
					a.vl_juros,
					a.vl_multa,
					a.vl_descontos,
					a.vl_outros_acrescimos,
					b.cd_cgc,
					b.nr_seq_classe,
					b.ie_tipo_titulo ie_tipo_tit_pag,
					a.nr_titulo nr_titulo,
					a.nr_sequencia nr_seq_baixa,
					b.cd_estabelecimento,
					b.cd_estab_financeiro,
					k.cd_empresa,
					a.nr_seq_conta_banco nr_seq_conta_banco,
					f.nr_seq_caixa nr_seq_caixa,
					b.ds_observacao_titulo ds_observacao,
					a.VL_COTACAO vl_cotacao_baixa
				FROM estabelecimento k, tipo_baixa_cpa d, titulo_pagar b, titulo_pagar_baixa a
LEFT OUTER JOIN titulo_pagar_classif c ON (a.nr_titulo = c.nr_titulo)
LEFT OUTER JOIN movto_trans_financ f ON (a.nr_seq_movto_trans_fin = f.nr_sequencia)
WHERE b.cd_estabelecimento		= k.cd_estabelecimento and (b.ie_situacao <> 'T' or ie_tit_pagar_transf_w = 'S') and (b.ie_situacao <> 'D' or ie_tit_pagar_desdob_w = 'S') and b.ie_situacao			<> 'C' and coalesce(b.nr_titulo_transf::text, '') = '' and a.nr_titulo			= b.nr_titulo and coalesce(d.ie_fluxo_passado,'S')	= 'S' and a.cd_tipo_baixa			= d.cd_tipo_baixa and (ie_classif_baixa_cp_w = 'N' or
					not exists (select	1
					from	titulo_pagar_baixa_cc x
					where	x.nr_titulo	= a.nr_titulo
					and	x.nr_seq_baixa	= a.nr_sequencia)) and a.nr_titulo	= nr_documento_p and a.nr_sequencia	= nr_docto_compl_p ) alias41
			
union all

			select	dt_baixa,
				cd_conta_financ,
				vl_baixa,
				vl_baixa_estrang,
				cd_moeda,
				vl_juros,
				vl_multa,
				vl_desconto,
				vl_outros_acrescimos,
				cd_cgc,
				nr_seq_classe,
				ie_tipo_tit_pag,
				nr_titulo,
				nr_seq_baixa,
				cd_estabelecimento,
				cd_estab_financeiro,
				cd_empresa,
				nr_seq_conta_banco,
				nr_seq_caixa,
				ds_observacao,
				vl_cotacao_baixa
			from (select	pkg_date_utils.start_of(a.dt_baixa,'DD',0) dt_baixa,
					coalesce(e.cd_conta_financ, cd_conta_financ_cpa_w) cd_conta_financ,
					coalesce(e.vl_baixa,0) vl_baixa,
					coalesce(e.vl_baixa_estrang,0) vl_baixa_estrang,
					coalesce(a.cd_moeda,cd_moeda_empresa_w) cd_moeda,
					coalesce(e.vl_juros,0) vl_juros,
					coalesce(e.vl_multa,0) vl_multa,
					coalesce(e.vl_desconto,0) vl_desconto,
					coalesce(e.vl_outros_acrescimos,0) vl_outros_acrescimos,
					b.cd_cgc,
					b.nr_seq_classe,
					b.ie_tipo_titulo ie_tipo_tit_pag,
					a.nr_titulo nr_titulo,
					a.nr_sequencia nr_seq_baixa,
					b.cd_estabelecimento,
					b.cd_estab_financeiro,
					k.cd_empresa,
					a.nr_seq_conta_banco nr_seq_conta_banco,
					f.nr_seq_caixa nr_seq_caixa,
					b.ds_observacao_titulo ds_observacao,
					a.VL_COTACAO vl_cotacao_baixa
				FROM estabelecimento k, titulo_pagar_baixa_cc e, tipo_baixa_cpa d, titulo_pagar b, titulo_pagar_baixa a
LEFT OUTER JOIN movto_trans_financ f ON (a.nr_seq_movto_trans_fin = f.nr_sequencia)
WHERE a.nr_titulo			= e.nr_titulo and a.nr_sequencia			= e.nr_seq_baixa  and b.cd_estabelecimento		= k.cd_estabelecimento and (b.ie_situacao <> 'T' or ie_tit_pagar_transf_w = 'S') and (b.ie_situacao <> 'D' or ie_tit_pagar_desdob_w = 'S') and b.ie_situacao			<> 'C' and coalesce(b.nr_titulo_transf::text, '') = '' and a.nr_titulo			= b.nr_titulo and coalesce(d.ie_fluxo_passado,'S')	= 'S' and a.cd_tipo_baixa			= d.cd_tipo_baixa and a.nr_titulo			= nr_documento_p and a.nr_sequencia			= nr_docto_compl_p and ie_classif_baixa_cp_w		= 'S' ) a
			) alias56
		) alias57;

vet01		c01%rowtype;

c02 CURSOR FOR
	SELECT	'CP' ie_integracao,	/* Títulos a pagar */
		dt_vencimento,
		cd_conta_financ,
		CASE WHEN ie_tit_pag_fluxo_w='T' THEN  ((dividir_sem_round(coalesce(vl_classif, vl_titulo) + -- valor do título
							(dividir_sem_round((vl_saldo_juros + vl_saldo_multa),vl_titulo) * 		-- cáculo do valor do juros e multa
									coalesce(vl_classif, vl_titulo)							),						vl_titulo)						) * Obter_Saldo_Titulo_pagar(nr_titulo, trunc(clock_timestamp(), 'dd'))) WHEN ie_tit_pag_fluxo_w=	-- vezes o valor do saldo do título considerando impostos
					'L' THEN 	((dividir_sem_round(coalesce(vl_classif, vl_titulo) + -- valor do título
							(dividir_sem_round((vl_saldo_juros + vl_saldo_multa),vl_titulo) * 		-- cáculo do valor do juros e multa
									coalesce(vl_classif, vl_titulo)							),						vl_titulo)						) * vl_saldo_titulo) END  vl_titulo,	-- vezes o valor do saldo do título sem impostos
		cd_moeda,
		cd_centro_custo,
		nr_seq_classe_tit_pag,
		ie_tipo_tit_pag,
		nr_titulo,
		cd_estabelecimento,
		cd_estab_financeiro,
		cd_empresa,
		ds_observacao,
		vl_titulo_estrang
	from (SELECT	 /*+ index (a TITPAGA_I2) */			OBTER_VENC_TITULO(a.nr_titulo, null) dt_vencimento,
			coalesce(b.nr_seq_conta_financ, cd_conta_financ_cpa_w) cd_conta_financ,
			b.vl_titulo vl_classif,
			a.vl_saldo_juros,
			a.vl_saldo_multa,
			(OBTER_DADOS_TIT_PAGAR(a.nr_titulo, 'VT'))::numeric  vl_titulo,
			a.nr_titulo,
			a.cd_moeda,
			b.cd_centro_custo,
			a.nr_seq_classe nr_seq_classe_tit_pag,
			a.ie_tipo_titulo ie_tipo_tit_pag,
			a.vl_saldo_titulo,
			a.cd_estabelecimento,
			a.cd_estab_financeiro,
			d.cd_empresa,
			a.ds_observacao_titulo ds_observacao,
			a.vl_titulo_estrang vl_titulo_estrang
		FROM estabelecimento d, titulo_pagar a
LEFT OUTER JOIN titulo_pagar_classif b ON (a.nr_titulo = b.nr_titulo)
WHERE a.cd_estabelecimento	= d.cd_estabelecimento and a.nr_titulo		= nr_documento_p and (coalesce(a.nr_bordero::text, '') = '' and
			not exists (select	1
			from	bordero_tit_pagar x
			where	x.nr_titulo	= a.nr_titulo)) and not exists (select	1
			from	titulo_pagar_escrit x
			where	x.nr_titulo	= a.nr_titulo) and coalesce(substr(obter_se_tit_pagar_transf(a.nr_titulo),1,255),'N') = 'N' and (ie_oc_parcial_w = 'S' or
			not exists (select	1 			-- Edgar 20/07/2009, OS 153115, não trazer títulos que tenham OC em aberto, pois entra no fluxo pela OC
			from	ordem_compra y,
				nota_fiscal x
			where	coalesce(y.dt_baixa::text, '') = ''
			and	x.nr_ordem_compra	= y.nr_ordem_compra
			and	x.nr_sequencia		= a.nr_seq_nota_fiscal)) and coalesce(a.dt_liquidacao::text, '') = '' and a.vl_saldo_titulo			> 0 and a.ie_situacao				= 'A'
		 ) alias34
	
union all

	select	'BP' ie_integracao,	/* Borderô a pagar */
		dt_vencimento,
		cd_conta_financ,
		(dividir_sem_round(coalesce(vl_classif,coalesce(vl_bordero,vl_titulo)) + --Valor título
			(dividir_sem_round(((vl_saldo_juros + vl_saldo_multa) - vl_desconto_bordero),vl_titulo) * coalesce(vl_classif,coalesce(vl_bordero,vl_titulo))), --Valor de juros e multa - desconto
			vl_titulo)) * Obter_Saldo_Titulo_pagar(nr_titulo, trunc(clock_timestamp(), 'dd')) vl_titulo,
		cd_moeda,
		cd_centro_custo,
		nr_seq_classe_tit_pag,
		ie_tipo_tit_pag,
		nr_titulo,
		cd_estabelecimento,
		cd_estab_financeiro,
		cd_empresa,
		ds_observacao,
		vl_titulo_estrang
	from	(select	 /*+ index (a TITPAGA_I2) */			(select	max(coalesce(x.dt_real_pagamento,x.dt_prev_pagamento))
			from	bordero_pagamento x
			where	x.nr_bordero	= coalesce(c.nr_bordero,a.nr_bordero)) dt_vencimento,
			coalesce(b.nr_seq_conta_financ, cd_conta_financ_cpa_w) cd_conta_financ,
			b.vl_titulo vl_classif,
			coalesce(a.vl_saldo_juros,0) vl_saldo_juros,
			coalesce(a.vl_saldo_multa,0) vl_saldo_multa,
			coalesce(c.vl_desconto_bordero,0) vl_desconto_bordero,
			(OBTER_DADOS_TIT_PAGAR(a.nr_titulo, 'VT'))::numeric  vl_titulo,
			a.nr_titulo,
			a.cd_moeda,
			b.cd_centro_custo,
			a.nr_seq_classe nr_seq_classe_tit_pag,
			c.vl_bordero,
			a.ie_tipo_titulo ie_tipo_tit_pag,
			a.cd_estabelecimento,
			a.cd_estab_financeiro,
			d.cd_empresa,
			a.ds_observacao_titulo ds_observacao,
			coalesce(c.vl_bordero_estrang, a.vl_titulo_estrang) vl_titulo_estrang
		FROM estabelecimento d, titulo_pagar a
LEFT OUTER JOIN bordero_tit_pagar c ON (a.nr_titulo = c.nr_titulo)
LEFT OUTER JOIN titulo_pagar_classif b ON (a.nr_titulo = b.nr_titulo)
WHERE a.cd_estabelecimento	= d.cd_estabelecimento and a.nr_titulo		= nr_documento_p and ((a.nr_bordero IS NOT NULL AND a.nr_bordero::text <> '') or
			exists (select	1
			from	bordero_tit_pagar x
			where	x.nr_titulo	= a.nr_titulo)) and not exists (select	1
			from	titulo_pagar_escrit x
			where	x.nr_titulo	= a.nr_titulo) and coalesce(substr(obter_se_tit_pagar_transf(a.nr_titulo),1,255),'N') = 'N' and (ie_oc_parcial_w = 'S' or
			not exists (select	1 			-- Edgar 20/07/2009, OS 153115, não trazer títulos que tenham OC em aberto, pois entra no fluxo pela OC
			from	ordem_compra y,
				nota_fiscal x
			where	coalesce(y.dt_baixa::text, '') = ''
			and	x.nr_ordem_compra	= y.nr_ordem_compra
			and	x.nr_sequencia		= a.nr_seq_nota_fiscal)) and coalesce(a.dt_liquidacao::text, '') = '' and a.vl_saldo_titulo	> 0 and a.ie_situacao		= 'A'
		 ) alias70
	
union all

	select	'PE' ie_integracao,	/* Pagamento escritural */
		dt_vencimento,
		cd_conta_financ,
		(dividir_sem_round(coalesce(vl_classif,vl_titulo) + --Valor título
			(dividir_sem_round(((vl_saldo_juros + vl_saldo_multa) - vl_desconto),vl_titulo) * coalesce(vl_classif, vl_titulo)), --Valor de juros e multa - desconto
			vl_titulo)) * Obter_Saldo_Titulo_pagar(nr_titulo, trunc(clock_timestamp(), 'dd')) vl_titulo,
		cd_moeda,
		cd_centro_custo,
		nr_seq_classe_tit_pag,
		ie_tipo_tit_pag,
		nr_titulo,
		cd_estabelecimento,
		cd_estab_financeiro,
		cd_empresa,
		ds_observacao,
		vl_titulo_estrang
	from (select	 /*+ index (a TITPAGA_I2) */			e.dt_remessa_retorno dt_vencimento,
			coalesce(b.nr_seq_conta_financ, cd_conta_financ_cpa_w) cd_conta_financ,
			b.vl_titulo vl_classif,
			coalesce(a.vl_saldo_juros,0) vl_saldo_juros,
			coalesce(a.vl_saldo_multa,0) vl_saldo_multa,
			coalesce(c.vl_desconto,0) vl_desconto,	
			coalesce(c.vl_liquidacao,c.vl_escritural) vl_titulo,
			a.nr_titulo,
			a.cd_moeda,
			b.cd_centro_custo,
			a.nr_seq_classe nr_seq_classe_tit_pag,
			a.ie_tipo_titulo ie_tipo_tit_pag,
			a.cd_estabelecimento,
			a.cd_estab_financeiro,
			d.cd_empresa,
			a.ds_observacao_titulo ds_observacao,
			0 vl_titulo_estrang
		FROM banco_escritural e, estabelecimento d, titulo_pagar_escrit c, titulo_pagar a
LEFT OUTER JOIN titulo_pagar_classif b ON (a.nr_titulo = b.nr_titulo)
WHERE c.nr_seq_escrit		= e.nr_sequencia and a.nr_titulo		= c.nr_titulo  and a.cd_estabelecimento	= d.cd_estabelecimento and a.nr_titulo		= nr_documento_p and (coalesce(a.nr_bordero::text, '') = '' and
			not exists (select	1
			from	bordero_tit_pagar x
			where	x.nr_titulo	= a.nr_titulo)) and coalesce(substr(obter_se_tit_pagar_transf(a.nr_titulo),1,255),'N') = 'N' and (ie_oc_parcial_w = 'S' or
			not exists (select	1 			-- Edgar 20/07/2009, OS 153115, não trazer títulos que tenham OC em aberto, pois entra no fluxo pela OC
			from	ordem_compra y,
				nota_fiscal x
			where	coalesce(y.dt_baixa::text, '') = ''
			and	x.nr_ordem_compra	= y.nr_ordem_compra
			and	x.nr_sequencia		= a.nr_seq_nota_fiscal)) and coalesce(a.dt_liquidacao::text, '') = '' and a.vl_saldo_titulo	> 0 and a.ie_situacao		= 'A'
		 ) alias97;

vet02		c02%rowtype;


c03 CURSOR FOR
	SELECT coalesce(vl_baixa_estrang,0) vl_titulo_estrang,
		   coalesce(VL_BAIXA,0) VL_BAIXA,
		   cd_moeda cd_moeda,
		   nr_titulo nr_titulo
	from titulo_pagar_baixa
	where nr_titulo = nr_documento_p;
vet03		c03%rowtype;

c04 CURSOR FOR		
			SELECT	'CP' ie_integracao,
					a.dt_baixa,
				coalesce(CASE WHEN ie_conta_finan_trans_w='S' THEN (SELECT	x.cd_conta_financ									from	transacao_financeira x									where	x.nr_sequencia	= a.nr_seq_trans_fin)  ELSE a.nr_seq_conta_financ END ,	cd_conta_financ_cpa_w) cd_conta_financ,
				coalesce((dividir_sem_round((coalesce(a.vl_titulo,a.vl_titulo_alteracao) - a.vl_desconto - a.vl_acrescimo),(a.vl_titulo_alteracao - a.vl_desconto - a.vl_acrescimo)) * a.vl_adiantamento),0) vl_baixa,
				CASE WHEN coalesce((dividir_sem_round((coalesce(a.vl_titulo,a.vl_titulo_alteracao) - a.vl_desconto - a.vl_acrescimo),(a.vl_titulo_alteracao - a.vl_desconto - a.vl_acrescimo)) * a.vl_adto_estrang),0)=0 THEN null END  vl_baixa_estrang,
				coalesce(a.cd_moeda,cd_moeda_empresa_w) cd_moeda,
				0 vl_juros,
				0 vl_multa,
				0 vl_desconto,
				0 vl_outros_acrescimos,
				a.cd_cgc,
				a.nr_seq_classe,
				a.ie_tipo_tit_pag,
				a.nr_titulo,
				a.nr_seq_baixa,
				a.cd_estabelecimento,
				a.cd_estab_financeiro,
				a.cd_empresa,
				a.nr_seq_conta_banco,
				a.nr_seq_caixa,
				a.ds_observacao,
				vl_cotacao_baixa
			from (select	pkg_date_utils.start_of(CASE WHEN ie_data_tit_adiant_w='S' THEN d.dt_adiantamento  ELSE a.dt_atualizacao END ,'DD',0) dt_baixa,
					d.nr_seq_trans_fin,
					c.nr_seq_conta_financ,
					coalesce(c.vl_titulo,0) vl_titulo,
					coalesce((obter_dados_tit_pagar(b.nr_titulo,'VT'))::numeric ,0) vl_titulo_alteracao,
					coalesce(c.vl_desconto,0) vl_desconto,
					coalesce(c.vl_acrescimo,0) vl_acrescimo,
					coalesce(a.vl_adiantamento,0) vl_adiantamento,
					coalesce(a.vl_adto_estrang,0) vl_adto_estrang,
					a.cd_moeda,
					b.cd_cgc,
					b.nr_seq_classe,
					b.ie_tipo_titulo ie_tipo_tit_pag,
					a.nr_titulo nr_titulo,
					a.nr_sequencia nr_seq_baixa,
					b.cd_estabelecimento,
					b.cd_estab_financeiro,
					k.cd_empresa,
					d.nr_seq_conta_banco nr_seq_conta_banco,
					null nr_seq_caixa,
					b.ds_observacao_titulo ds_observacao,
					a.VL_COTACAO vl_cotacao_baixa
				FROM estabelecimento k, adiantamento_pago d, titulo_pagar b, titulo_pagar_adiant a
LEFT OUTER JOIN titulo_pagar_classif c ON (a.nr_titulo = c.nr_titulo)
WHERE b.cd_estabelecimento	= k.cd_estabelecimento and (b.ie_situacao <> 'T' or ie_tit_pagar_transf_w = 'S') and (b.ie_situacao <> 'D' or ie_tit_pagar_desdob_w = 'S') and b.ie_situacao		<> 'C' and coalesce(b.nr_titulo_transf::text, '') = '' and a.nr_titulo		= b.nr_titulo and a.nr_titulo		= nr_documento_p and a.nr_sequencia		= nr_docto_compl_p and a.nr_adiantamento	= d.nr_adiantamento and not exists (select	1
					from	titulo_pagar x
					where	x.nr_adiant_pago	= a.nr_adiantamento) and a.vl_adiantamento	<> 0 and ie_adiant_pago_w	in ('A','TP','TC') ) a;

vet04		c04%rowtype;


BEGIN

	/* Busca o estabelecimento do título para buscar os parâmetros do fluxo. */

	begin
		select	cd_estabelecimento,
			obter_moeda_padrao_empresa(cd_estabelecimento,'E')
		into STRICT	cd_estabelecimento_w,
			cd_moeda_empresa_w
		from	titulo_pagar
		where	nr_titulo = nr_documento_p;
	exception when no_data_found then
		/* Título a pagar não encontrado ou sem estabelecimento informado.*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(857058);
	end;
	
			open c03;
			loop
			fetch c03 into
				vet03;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				begin
				
				SELECT CD_MOEDA
				INTO STRICT cd_moeda_titulo_w
				FROM TITULO_PAGAR
				WHERE NR_TITULO = nr_documento_p;				
						
				if (cd_moeda_empresa_w = vet03.cd_moeda) then
					cd_moeda_titulo_w := cd_moeda_titulo_w;
				else
					cd_moeda_titulo_w := vet03.cd_moeda;
				end if;						
				
				 if (vet03.vl_titulo_estrang = 0) then
					vl_titulo_estrang_w := vl_titulo_estrang_w + vet03.VL_BAIXA / coalesce(OBTER_COTACAO_MOEDA_TITULO(cd_moeda_titulo_w, vet03.NR_TITULO, 'CP' ),0);
				 else
				 vl_titulo_estrang_w := vl_titulo_estrang_w + vet03.vl_titulo_estrang;
				 end if;
			end;
			end loop;
			close c03;	
	
	/* Busca os parâmetros do fluxo de caixa necessários para esta informação. */

	begin
		select	coalesce(max(cd_conta_financ_cpa),1),
			coalesce(max(ie_fim_semana_passado),'N'),
			coalesce(max(ie_adiant_pago),'A'),
			coalesce(max(ie_classif_baixa_cp), 'N'),
			coalesce(max(ie_tit_pagar_transf),'S'),
			coalesce(max(ie_data_tit_adiant),'N'),
			coalesce(max(ie_conta_finan_trans),'N'),
			coalesce(max(ie_tit_pagar_desdob), 'S'),
			coalesce(max(ie_tit_pag_fluxo),'T'),
			coalesce(max(ie_oc_parcial),'N'),
			coalesce(max(ie_tratar_fim_semana),'N')
		into STRICT 	cd_conta_financ_cpa_w,
			ie_fim_semana_passado_w,
			ie_adiant_pago_w,
			ie_classif_baixa_cp_w,
			ie_tit_pagar_transf_w,
			ie_data_tit_adiant_w,
			ie_conta_finan_trans_w,
			ie_tit_pagar_desdob_w,
			ie_tit_pag_fluxo_w,
			ie_oc_parcial_w,
			ie_fim_semana_w
		from	parametro_fluxo_caixa
		where	cd_estabelecimento	= cd_estabelecimento_w;
	exception when no_data_found then
		/* Parâmetros do fluxo de caixa não cadastrados! */

		CALL wheb_mensagem_pck.exibir_mensagem_abort(197611);
	end;

	/* Inicia a geração das informações das baixas dos títulos para o fluxo realizado. */

	if (ie_origem_info_p = 'TPBA' and (nr_documento_p IS NOT NULL AND nr_documento_p::text <> '') and (nr_docto_compl_p IS NOT NULL AND nr_docto_compl_p::text <> '')) then
		begin
			/* Remove os registros da baixa que está sendo processada para incluir novamente */

			CALL remove_docto_fluxo_caixa(nr_documento_p,nr_docto_compl_p,ie_origem_info_p,null,'S');	
				
			open c04;
			loop
			fetch c04 into
				vet04;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				begin
					
					dt_referencia_w := vet04.dt_baixa;
					
					if (ie_fim_semana_passado_w = 'S') then
						if (pkg_date_utils.start_of(vet04.dt_baixa,'MONTH',0) <>
							pkg_date_utils.start_of(obter_proximo_dia_util(vet04.cd_estabelecimento, vet04.dt_baixa),'MONTH',0)) then
							dt_referencia_w := obter_dia_anterior_util(vet04.cd_estabelecimento, vet04.dt_baixa);
						else
							dt_referencia_w	:= obter_proximo_dia_util(vet04.cd_estabelecimento, vet04.dt_baixa);
						end if;
					end if;
					
					cd_conta_financ_w := vet04.cd_conta_financ;

					if (vet04.cd_conta_financ = 0) and (vet04.vl_baixa <> 0) then

						cd_conta_financ_w := obter_conta_financeira(	'S', vet04.cd_estabelecimento, 0, 0, 0, 0, null, null, null, cd_conta_financ_w, null, null, null, null, null, null, null, null, null, null, null, vet04.nr_seq_classe, null, null, null, null, vet04.ie_tipo_tit_pag, null, vet04.cd_moeda);
					end if;
					

					if (cd_conta_financ_w <> 0) then

						SELECT CD_MOEDA
						INTO STRICT cd_moeda_titulo_w
						FROM TITULO_PAGAR
						WHERE NR_TITULO = vet04.nr_titulo;

						if (cd_moeda_empresa_w = vet04.cd_moeda) then
							cd_moeda_titulo_w := cd_moeda_titulo_w;
						else
							cd_moeda_titulo_w := vet04.cd_moeda;
						end if;		
						
						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									cd_conta_financ_w,
									vet04.cd_empresa,
									vet04.cd_estabelecimento,
									vet04.cd_estab_financeiro,
									vet04.cd_moeda,
									vet04.ds_observacao,
									'P',
									vet04.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet04.nr_seq_conta_banco,
									vet04.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet04.nr_titulo,
									null,
									null,
									null,
									vet04.vl_baixa,
									null,
									coalesce(vet04.vl_baixa_estrang, vet04.vl_baixa / coalesce(OBTER_COTACAO_MOEDA_TITULO(cd_moeda_titulo_w, vet04.nr_titulo, 'CP'),1)),
									vet04.vl_cotacao_baixa,
									null,
									vet04.nr_seq_baixa);
					end if;
				exception when others then
					ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
				end;
			end loop;
			close c03;
		exception when others then
			ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
		end;
	end if;
	
	
	/* Inicia a geração das informações das baixas dos títulos para o fluxo realizado. */

	if (ie_origem_info_p = 'TPB' and (nr_documento_p IS NOT NULL AND nr_documento_p::text <> '') and (nr_docto_compl_p IS NOT NULL AND nr_docto_compl_p::text <> '')) then
		begin
			/* Remove os registros da baixa que está sendo processada para incluir novamente */

			CALL remove_docto_fluxo_caixa(nr_documento_p,nr_docto_compl_p,ie_origem_info_p,null,'S');

			open c01;
			loop
			fetch c01 into
				vet01;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin

					dt_referencia_w := vet01.dt_baixa;
					
					if (ie_fim_semana_passado_w = 'S') then
						if (pkg_date_utils.start_of(vet01.dt_baixa,'MONTH',0) <>
							pkg_date_utils.start_of(obter_proximo_dia_util(vet01.cd_estabelecimento, vet01.dt_baixa),'MONTH',0)) then
							dt_referencia_w := obter_dia_anterior_util(vet01.cd_estabelecimento, vet01.dt_baixa);
						else
							dt_referencia_w	:= obter_proximo_dia_util(vet01.cd_estabelecimento, vet01.dt_baixa);
						end if;
					end if;
					
					cd_conta_financ_w := vet01.cd_conta_financ;

					if (vet01.cd_conta_financ = 0) and (vet01.vl_baixa <> 0) then

						cd_conta_financ_w := obter_conta_financeira(	'S', vet01.cd_estabelecimento, 0, 0, 0, 0, null, null, null, cd_conta_financ_w, null, null, null, null, null, null, null, null, null, null, null, vet01.nr_seq_classe_tit_pag, null, null, null, null, vet01.ie_tipo_tit_pag, null, vet01.cd_moeda);
					end if;
					
					/* Projeto Multimoeda - Os valores de multa, juros, desconto e outros acréscimos só devem ser gravados em moeda nacional,
							portanto as chamadas abaixo só ocorrerão quando o fluxo for gerado em moeda nacional. */
					if (vet01.cd_conta_financ_mcp > 0) and (vet01.vl_multa <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_mcp,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									null,
									null,
									vet01.vl_multa);
					end if;

					if (vet01.cd_conta_financ_jcp > 0) and (vet01.vl_juros <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_jcp,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									null,
									null,
									vet01.vl_juros);
					end if;

					if (vet01.cd_conta_financ_dcp > 0) and (vet01.vl_desconto <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_dcp,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									null,
									null,
									vet01.vl_desconto);
					end if;

					if (vet01.cd_conta_financ_ocp > 0) and (vet01.vl_outros_acrescimos <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_ocp,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									null,
									null,
									vet01.vl_outros_acrescimos);
					end if;

					if (cd_conta_financ_w <> 0) then

						SELECT CD_MOEDA
						INTO STRICT cd_moeda_titulo_w
						FROM TITULO_PAGAR
						WHERE NR_TITULO = vet01.nr_titulo;

						if (cd_moeda_empresa_w = vet01.cd_moeda) then
							cd_moeda_titulo_w := cd_moeda_titulo_w;
						else
							cd_moeda_titulo_w := vet01.cd_moeda;
						end if;		
						
						if (obter_se_moeda_estrang(cd_moeda_titulo_w,cd_moeda_empresa_w) = 'S') then
							vl_baixa_w := coalesce(vet01.vl_baixa_estrang, vet01.vl_baixa / coalesce(OBTER_COTACAO_MOEDA_TITULO(cd_moeda_titulo_w, vet01.nr_titulo, 'CP'),1));
						else
							vl_baixa_w := vet01.vl_baixa;
						end if;
						
						if (vet01.vl_baixa < 0) then
							vl_fluxo_neg_w := 0;
						else
							vl_fluxo_neg_w := vet01.vl_baixa;
						end if;

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									cd_conta_financ_w,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									null,
									null,
									vl_baixa_w,
									null,
									coalesce(vet01.vl_baixa_estrang, vl_fluxo_neg_w / coalesce(OBTER_COTACAO_MOEDA_TITULO(cd_moeda_titulo_w, vet01.nr_titulo, 'CP'),1)),
									vet01.vl_cotacao_baixa);
					end if;
				exception when others then
					ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
				end;
			end loop;
			close c01;
		exception when others then
			ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
		end;
	end if;
	
	/* Inicia a geração das informações das baixas dos títulos para o fluxo realizado. */

	if (ie_origem_info_p = 'TP' and (nr_documento_p IS NOT NULL AND nr_documento_p::text <> '')) then
		begin
			/* Remove os registros da baixa que está sendo processada para incluir novamente */

			CALL remove_docto_fluxo_caixa(nr_documento_p,nr_docto_compl_p,ie_origem_info_p,null,'S');
			
			open c02;
			loop
			fetch c02 into
				vet02;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
					
					dt_referencia_w := vet02.dt_vencimento;
					
					if (ie_fim_semana_w = 'S') then
						if (pkg_date_utils.start_of(vet02.dt_vencimento,'MONTH',0) <>
							pkg_date_utils.start_of(obter_proximo_dia_util(vet02.cd_estabelecimento, vet02.dt_vencimento),'MONTH',0)) then
							dt_referencia_w := obter_dia_anterior_util(vet02.cd_estabelecimento, vet02.dt_vencimento);
						else
							dt_referencia_w	:= obter_proximo_dia_util(vet02.cd_estabelecimento, vet02.dt_vencimento);
						end if;
					end if;
					
					cd_conta_financ_w := vet02.cd_conta_financ;
					
					if (vet02.cd_conta_financ = 0) and (vet02.vl_titulo <> 0) then

						cd_conta_financ_w := obter_conta_financeira(	'S', vet02.cd_estabelecimento, 0, 0, 0, 0, null, null, vet02.cd_centro_custo, cd_conta_financ_w, null, null, null, null, null, null, null, null, null, null, null, vet02.nr_seq_classe_tit_pag, null, null, null, null, vet02.ie_tipo_tit_pag, null, vet02.cd_moeda);
					end if;
					
					if (cd_conta_financ_w <> 0) then
						
						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									cd_conta_financ_w,
									vet02.cd_empresa,
									vet02.cd_estabelecimento,
									vet02.cd_estab_financeiro,
									vet02.cd_moeda,
									vet02.ds_observacao,
									'R',
									vet02.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet02.nr_titulo,
									null,
									null,
									null,
									vet02.vl_titulo,
									vet02.vl_titulo_estrang,
									coalesce(vet02.vl_titulo_estrang - vl_titulo_estrang_w,0));
					end if;
				exception when others then
					ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
				end;
			end loop;
			close c02;
		exception when others then
			ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
		end;
	end if;
	
	commit;
	ds_erro_p := ds_erro_w;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_caixa_tit_pagar (nr_documento_p bigint, nr_docto_compl_p bigint, ie_origem_info_p text, ds_erro_p INOUT text) FROM PUBLIC;

