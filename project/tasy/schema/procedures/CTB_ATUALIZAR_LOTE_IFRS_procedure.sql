-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_atualizar_lote_ifrs ( nr_lote_contabil_p bigint, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE


nr_sequencia_w          ctb_saldo_ifrs.nr_sequencia%type;
nr_seq_movimento_w      ctb_movto_ifrs.nr_sequencia%type;
cd_conta_contabil_w     conta_contabil_ifrs.cd_conta_contabil%type;
cd_centro_custo_w       conta_contabil.cd_centro_custo%type;
vl_movimento_w          ctb_saldo_ifrs.vl_movimento%type;
vl_encerramento_w       ctb_saldo_ifrs.vl_encerramento%type;
vl_debito_w         	ctb_saldo_ifrs.vl_debito%type;
vl_credito_w            ctb_saldo_ifrs.vl_credito%type;
vl_saldo_w          	ctb_saldo_ifrs.vl_saldo%type;
nr_seq_mes_ref_w        ctb_saldo_ifrs.nr_seq_mes_ref%type;
nr_seq_mes_ant_w        ctb_saldo_ifrs.nr_seq_mes_ref%type;
cd_estab_lote_w         lote_contabil.cd_estabelecimento%type;
cd_estabelecimento_w    lote_contabil.cd_estabelecimento%type;
cd_empresa_w            ctb_mes_ref.cd_empresa%type;
ie_deb_cred_w           varchar(01);
ie_centro_custo_w       conta_contabil.ie_centro_custo%type;
ie_encerramento_w       lote_contabil.ie_encerramento%type;
ds_erro_w           	varchar(2000);
dt_referencia_w         ctb_mes_ref.dt_referencia%type;
dt_atualizacao_w        lote_contabil.dt_atualizacao%type;
dt_consistencia_w       lote_contabil.dt_consistencia%type;
dt_abertura_w           ctb_mes_ref.dt_abertura%type;
dt_fechamento_w         ctb_mes_ref.dt_fechamento%type;
qt_movto_cc_w           bigint;
cd_classificacao_w      ctb_saldo_ifrs.cd_classificacao%type;
cd_classif_sup_w        ctb_saldo_ifrs.cd_classif_sup%type;
nr_nivel_conta_w        ctb_saldo_ifrs.nr_nivel_conta%type;
nr_seq_conta_ifrs_w     ctb_saldo_ifrs.nr_seq_conta_ifrs%type;
vl_total_debito_w       ctb_movto_ifrs.vl_movimento%type := 0;
vl_total_credito_w      ctb_movto_ifrs.vl_movimento%type := 0;
e_invalid_sequence      exception;

type t_estab is table of boolean index by integer;
estab_w		t_estab;

C01 CURSOR FOR
SELECT  a.nr_sequencia,
		a.vl_movimento,
		'D',
        d.ie_centro_custo,
		CASE WHEN ie_encerramento_w='N' THEN 0  ELSE a.vl_movimento END  vl_encerramento,
		coalesce(a.cd_estabelecimento, cd_estab_lote_w) cd_estabelecimento,
		a.cd_classif_debito cd_classificacao,
        coalesce(a.nr_seq_conta_debito,0) nr_seq_conta_ifrs
from    lote_contabil b,
		ctb_movto_ifrs a,
        conta_contabil_ifrs c,
        conta_contabil d
where   a.nr_lote_contabil = nr_lote_contabil_p
and     a.nr_lote_contabil = b.nr_lote_contabil
and     (a.nr_seq_conta_debito IS NOT NULL AND a.nr_seq_conta_debito::text <> '')
and     a.nr_seq_conta_debito = c.nr_seq_conta_ifrs
and     c.cd_conta_contabil = d.cd_conta_contabil

union all

select  a.nr_sequencia,
		a.vl_movimento,
		'C',
        d.ie_centro_custo,
		CASE WHEN ie_encerramento_w='N' THEN 0  ELSE a.vl_movimento END  vl_encerramento,
		coalesce(a.cd_estabelecimento, cd_estab_lote_w) cd_estabelecimento,
		a.cd_classif_credito cd_classificacao,
        coalesce(a.nr_seq_conta_credito,0) nr_seq_conta_ifrs
from    lote_contabil b,
		ctb_movto_ifrs a,
        conta_contabil_ifrs c,
        conta_contabil d
where   a.nr_lote_contabil  = nr_lote_contabil_p
and     a.nr_lote_contabil = b.nr_lote_contabil
and     (a.nr_seq_conta_credito IS NOT NULL AND a.nr_seq_conta_credito::text <> '')
and     a.nr_seq_conta_credito = c.nr_seq_conta_ifrs
and     c.cd_conta_contabil = d.cd_conta_contabil;

C02 CURSOR FOR
SELECT  cd_centro_custo,
		vl_movimento,
		CASE WHEN ie_encerramento_w='N' THEN 0  ELSE vl_movimento END  vl_encerramento
from    Ctb_Movto_Ifrs_Cc c
where   c.nr_seq_movto_ifrs    = nr_seq_movimento_w
and 	ie_centro_custo_w   in ('S','O')

union all

select  0,
		vl_movimento_w,
		vl_encerramento_w

where   ((ie_centro_custo_w = 'N') or (qt_movto_cc_w = 0));


BEGIN
begin
select nr_seq_mes_ref,
    cd_estabelecimento,
    dt_atualizacao_saldo,
    dt_consistencia,
    coalesce(ie_encerramento,'N')
into STRICT    nr_seq_mes_ref_w,
    cd_estab_lote_w,
    dt_atualizacao_w,
    dt_consistencia_w,
    ie_encerramento_w
from    lote_contabil
where   nr_lote_contabil    = nr_lote_contabil_p;
exception
        when no_data_found then
            nr_seq_mes_ref_w    := 0;
            cd_estab_lote_w     := 0;
            dt_atualizacao_w    := null;
            dt_consistencia_w   := null;
            ie_encerramento_w   := null;
        when too_many_rows then
            nr_seq_mes_ref_w    := 0;
            cd_estab_lote_w     := 0;
            dt_atualizacao_w    := null;
            dt_consistencia_w   := null;
            ie_encerramento_w   := null;
        when others then
            nr_seq_mes_ref_w    := 0;
            cd_estab_lote_w     := 0;
            dt_atualizacao_w    := null;
            dt_consistencia_w   := null;
            ie_encerramento_w   := null;
end;

begin
select cd_empresa,
    dt_referencia,
    dt_abertura,
    dt_fechamento
into STRICT    cd_empresa_w,
    dt_referencia_w,
    dt_abertura_w,
    dt_fechamento_w
from    ctb_mes_ref
where   nr_sequencia    = nr_seq_mes_ref_w;
exception
    when no_data_found then
            cd_empresa_w    := 0;
            dt_referencia_w := null;
            dt_abertura_w   := null;
            dt_fechamento_w := null;
    when too_many_rows then
            cd_empresa_w    := 0;
            dt_referencia_w := null;
            dt_abertura_w   := null;
            dt_fechamento_w := null;
    when others then
            cd_empresa_w    := 0;
            dt_referencia_w := null;
            dt_abertura_w   := null;
            dt_fechamento_w := null;
end;
select coalesce(max(nr_sequencia),0)
into STRICT    nr_seq_mes_ant_w
from    ctb_mes_ref
where   cd_empresa  = cd_empresa_w
and dt_referencia   = PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.ADD_MONTH(dt_referencia_w,-1,0),'month',0);

if (dt_atualizacao_w IS NOT NULL AND dt_atualizacao_w::text <> '') then
    --(-20011,'O Lote ja foi atualizado ou nao consistido ' || nr_lote_contabil_p || '#@#@');
    CALL wheb_mensagem_pck.exibir_mensagem_abort(269628,'NR_LOTE_CONTABIL='||nr_lote_contabil_p);
end if;

if (coalesce(dt_abertura_w::text, '') = '') or (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then
    --(-20011, 'O Mes esta fechado ou nao aberto' || '#@#@');
    CALL wheb_mensagem_pck.exibir_mensagem_abort(269630);
end if;

CALL ctb_gravar_log_lote( nr_lote_contabil_p, 5, null,nm_usuario_p);


open    C01;
loop
fetch   C01 into
    nr_seq_movimento_w,
    vl_movimento_w,
    ie_deb_cred_w,
    ie_centro_custo_w,
    vl_encerramento_w,
    cd_estabelecimento_w,
    cd_classificacao_w,
    nr_seq_conta_ifrs_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

	-- Adiciona os estabelecimento que serao percorridos posteriormente para chamar a acumula_saldo e virada_saldo
	if (not estab_w.exists(cd_estabelecimento_w)) then
		begin
			estab_w(cd_estabelecimento_w) := true;
		end;
	end if;

    cd_classif_sup_w    := substr(ctb_obter_classif_conta_sup(cd_classificacao_w, dt_referencia_w, cd_empresa_w),1,40);
    nr_nivel_conta_w    := CTB_Obter_Nivel_Classif_Conta(cd_classificacao_w);

    begin
    select 1
    into STRICT qt_movto_cc_w
    
    where exists (
                    SELECT  1
                    from    ctb_movto_ifrs_cc
                    where   nr_seq_movto_ifrs    = nr_seq_movimento_w
    );
    exception
        when no_data_found then
            qt_movto_cc_w := 0;
        when others then
            qt_movto_cc_w := 0;
    end;

    if (ie_encerramento_w = 'N') and (ie_centro_custo_w = 'O') and (qt_movto_cc_w = 0) then
        ie_centro_custo_w   := 'N';
    end if;

    open    C02;
    loop
    fetch   C02 into
        cd_centro_custo_w,
        vl_movimento_w,
        vl_encerramento_w;
    EXIT WHEN NOT FOUND; /* apply on C02 */
        if (cd_centro_custo_w = 0) then
            cd_centro_custo_w   := null;
        end if;

        select  coalesce(max(nr_sequencia),0)
        into STRICT    nr_sequencia_w
        from    ctb_saldo_ifrs
        where   nr_seq_mes_ref      = nr_seq_mes_ref_w
        and cd_estabelecimento      = cd_estabelecimento_w
        and nr_seq_conta_ifrs       = nr_seq_conta_ifrs_w
        and coalesce(cd_centro_custo,0)  = coalesce(cd_centro_custo_w,0);

        if (nr_sequencia_w = 0) then
            vl_saldo_w      := 0;
CALL gravar_log_tasy(1105, 'entrou', nm_usuario_p);
            select  nextval('ctb_saldo_ifrs_seq')
            into STRICT    nr_sequencia_w
;

            if (nr_seq_mes_ant_w > 0) then
                select  coalesce(max(vl_saldo),0),
                        coalesce(max(vl_credito),0),
                        coalesce(max(vl_debito),0)
                into STRICT    vl_saldo_w,
                        vl_credito_w,
                        vl_debito_w
                from    ctb_saldo_ifrs
                where   nr_seq_mes_ref      = nr_seq_mes_ant_w
                and cd_estabelecimento      = cd_estabelecimento_w
                and nr_seq_conta_ifrs       = nr_seq_conta_ifrs_w
                and coalesce(cd_centro_custo,0)  = coalesce(cd_centro_custo_w,0);
            end if;

            begin
            insert into ctb_saldo_ifrs(
                nr_sequencia, 		
                nr_seq_mes_ref,
                nr_seq_conta_ifrs,
                dt_atualizacao,
                nm_usuario,
                cd_estabelecimento,
                cd_centro_custo,
                vl_debito,
                vl_debito_origem,
                vl_encerramento,
                vl_credito,
                vl_credito_origem,
                vl_movimento,
                vl_movimento_origem,
                vl_saldo,
                vl_saldo_origem,
                vl_eliminacao,
                cd_classificacao,
                cd_classif_sup,
                nr_nivel_conta)
            values (
                nr_sequencia_w,
                nr_seq_mes_ref_w,
                nr_seq_conta_ifrs_w,
                clock_timestamp(),
                nm_usuario_p,
                cd_estabelecimento_w,
                cd_centro_custo_w,
                vl_debito_w,
                vl_debito_w,
                0,
                vl_credito_w,
                vl_credito_w,
                0,
                0,
                vl_saldo_w,
                0,
                0,
                cd_classificacao_w,
                cd_classif_sup_w,
                nr_nivel_conta_w);
            if NOT FOUND then
            raise e_invalid_sequence;
            end if;
            exception
                when e_invalid_sequence then
                    ds_erro_w   := sqlerrm(SQLSTATE);
                    --(-20011,'Erro ao Inserir Saldo: (2)' || chr(13) ||ds_erro_w || '#@#@');
                    CALL wheb_mensagem_pck.exibir_mensagem_abort(269639,'DS_ERRO='||ds_erro_w);

                    when others then
                    ds_erro_w   := sqlerrm(SQLSTATE);
                --(-20011,'Erro ao Inserir Saldo: (1)' || chr(13) ||ds_erro_w || '#@#@');
                CALL wheb_mensagem_pck.exibir_mensagem_abort(269638,'DS_ERRO='||ds_erro_w);
            end;
        end if;
        vl_debito_w		:= 0;
        vl_credito_w	:= 0;

        if (ie_deb_cred_w = 'D') then
            vl_debito_w         := vl_movimento_w;
        else
            vl_credito_w            := vl_movimento_w;
        end if;

        begin
        update  ctb_saldo_ifrs
        set dt_atualizacao      = clock_timestamp(),
            nm_usuario          = nm_usuario_p,
            vl_debito           = vl_debito + vl_debito_w,
            vl_credito          = vl_credito + vl_credito_w,
            vl_saldo            = vl_saldo + vl_movimento_w,
            vl_movimento        = vl_movimento + vl_movimento_w,
            vl_encerramento     = vl_encerramento + vl_encerramento_w,
            vl_eliminacao       = coalesce(vl_eliminacao,0),
            cd_classificacao    = cd_classificacao_w,
            cd_classif_sup      = cd_classif_sup_w,
            nr_nivel_conta      = nr_nivel_conta_w
        where   nr_sequencia    = nr_sequencia_w;
        if NOT FOUND then
            raise e_invalid_sequence;
        end if;
        exception
            when e_invalid_sequence then
                ds_erro_w   := sqlerrm(SQLSTATE);
                --(-20011,'Erro ao Inserir Saldo: (2)' || chr(13) ||ds_erro_w || '#@#@');
                CALL wheb_mensagem_pck.exibir_mensagem_abort(269639,'DS_ERRO='||ds_erro_w);
            when others then
                ds_erro_w   := sqlerrm(SQLSTATE);
                --(-20011,'Erro ao Inserir Saldo: (2)' || chr(13) ||ds_erro_w || '#@#@');
                CALL wheb_mensagem_pck.exibir_mensagem_abort(269639,'DS_ERRO='||ds_erro_w);
        end;

    end loop;
    close C02;
end loop;
close C01;

select  coalesce(sum(vl_movimento),0)
into STRICT    vl_total_debito_w
from    ctb_movto_ifrs
where   nr_lote_contabil = nr_lote_contabil_p
and     (nr_seq_conta_debito IS NOT NULL AND nr_seq_conta_debito::text <> '');

select  coalesce(sum(vl_movimento),0)
into STRICT    vl_total_credito_w
from    ctb_movto_ifrs
where   nr_lote_contabil = nr_lote_contabil_p
and     (nr_seq_conta_credito IS NOT NULL AND nr_seq_conta_credito::text <> '');

update  ctb_movto_ifrs a
set     a.dt_atualizacao = clock_timestamp()
where   a.nr_lote_contabil = nr_lote_contabil_p;

update  lote_contabil
set     dt_atualizacao_saldo    = clock_timestamp(),
        vl_debito               = vl_total_debito_w,
        vl_credito              = vl_total_credito_w
where   nr_lote_contabil = nr_lote_contabil_p;

commit;

ds_erro_p := ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_atualizar_lote_ifrs ( nr_lote_contabil_p bigint, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;

