-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_finalizar_dialise (nr_seq_dialise_p bigint, qt_pa_sist_pos_pe_p bigint, qt_pa_diast_pos_pe_p bigint, qt_pa_sist_pos_deit_p bigint, qt_pa_diast_pos_deit_p bigint, qt_peso_pos_p bigint, dt_fim_p timestamp, nr_seq_motivo_peso_pos_p text, nr_seq_motivo_pa_deitado_pos_p text, nr_seq_motivo_pa_pe_pos_p text, nm_usuario_p text, qt_freq_cardiaca_p bigint, qt_temp_axilar_p bigint, qt_uf_p bigint, qt_tempo_dialise_p bigint, qt_freq_resp_pos_p bigint, qt_glicemia_capilar_pos_p bigint, qt_saturacao_o2_pos_p bigint, qt_insulina_pos_p bigint, qt_glicose_adm_pos_p bigint, ie_commit_p text default 'S', ds_erro_p INOUT text DEFAULT NULL, nr_lista_concentrado_ret_p INOUT text DEFAULT NULL) AS $body$
DECLARE

 
 
ie_pode_pesar_w			varchar(1);
qt_dialisador_w			integer;
ie_retirar_concentrado_w	varchar(1);
nr_seq_concentrado_ret_w	hd_dialise_concentrado.nr_sequencia%type;
nr_lista_concentrado_ret_w	varchar(2000);
nr_seq_maquina_w		hd_dialise_concentrado.nr_seq_maquina%type;
nr_seq_ponto_acesso_w		hd_dialise_concentrado.nr_seq_ponto_acesso%type;

c01 CURSOR FOR 
	SELECT	distinct nr_seq_maquina, 
		nr_seq_ponto_acesso 
	from	hd_dialise_concentrado 
	where	nr_seq_dialise = nr_seq_dialise_p 
	and	coalesce(dt_retirada::text, '') = '' 
	order by 1;
	
c02 CURSOR FOR 
	SELECT	nr_sequencia 
	from	hd_dialise_concentrado 
	where	nr_seq_maquina		= nr_seq_maquina_w 
	and	nr_seq_ponto_acesso	= nr_seq_ponto_acesso_w 
	and	coalesce(dt_retirada::text, '') = '';
	

BEGIN 
 
ie_retirar_concentrado_w := obter_valor_param_usuario(7009, 199, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento);
 
select	coalesce(ie_pode_pesar,'N') 
into STRICT	ie_pode_pesar_w 
from	hd_pac_renal_cronico b, 
	hd_dialise a 
where	b.cd_pessoa_fisica	= a.cd_pessoa_fisica 
and	a.nr_sequencia	= nr_seq_dialise_p;
 
select 	count(*) 
into STRICT	qt_dialisador_w 
from 	hd_dialise_dialisador 
where	nr_seq_dialise = nr_seq_dialise_p 
and	coalesce(dt_retirada::text, '') = '';
 
if (ie_pode_pesar_w = 'S') and 
	((((qt_pa_sist_pos_pe_p = 0) or (qt_pa_diast_pos_pe_p = 0)) and (nr_seq_motivo_pa_pe_pos_p = '0')) or 
	 (((qt_pa_sist_pos_deit_p = 0) or (qt_pa_diast_pos_deit_p = 0)) and (nr_seq_motivo_pa_deitado_pos_p = '0')) or	 
 	 (qt_peso_pos_p = 0 AND nr_seq_motivo_peso_pos_p = '0')) then 
	ds_erro_p	:= wheb_mensagem_pck.get_texto(281234,null);
elsif (qt_dialisador_w > 0) then 
	ds_erro_p	:= wheb_mensagem_pck.get_texto(281235,null);
else 
 
	update 	hd_dialise 
    set  	qt_pa_sist_pos_pe		= qt_pa_sist_pos_pe_p, 
		qt_pa_diast_pos_pe		= qt_pa_diast_pos_pe_p, 
		qt_pa_sist_pos_deitado		= qt_pa_sist_pos_deit_p, 
		qt_pa_diast_pos_deitado		= qt_pa_diast_pos_deit_p, 
		qt_peso_pos			= qt_peso_pos_p, 
		dt_fim_dialise     		= dt_fim_p, 
    	cd_pf_fim_dialise   		= substr(obter_pessoa_fisica_usuario(nm_usuario_p,'C'),1,10), 
		nr_seq_motivo_peso_pos		= CASE WHEN nr_seq_motivo_peso_pos_p='0' THEN  null  ELSE nr_seq_motivo_peso_pos_p END , 
		nr_seq_motivo_pa_deitado_pos	= CASE WHEN nr_seq_motivo_pa_deitado_pos_p='0' THEN  null  ELSE nr_seq_motivo_pa_deitado_pos_p END , 
		nr_seq_motivo_pa_pe_pos		= CASE WHEN nr_seq_motivo_pa_pe_pos_p='0' THEN  null  ELSE nr_seq_motivo_pa_pe_pos_p END , 
		dt_atualizacao			= clock_timestamp(), 
		nm_usuario			= nm_usuario_p, 
		qt_freq_cardiaca		= qt_freq_cardiaca_p, 
		qt_temp_axiliar_pos 		= qt_temp_axilar_p, 
		qt_ultrafiltracao		= qt_uf_p, 
		qt_tempo_dialise		= qt_tempo_dialise_p, 
		qt_freq_resp_pos		= qt_freq_resp_pos_p, 
		qt_glicemia_capilar_pos		= qt_glicemia_capilar_pos_p, 
		qt_saturacao_o2_pos		= qt_saturacao_o2_pos_p, 
		qt_insulina_pos			= qt_insulina_pos_p, 
		qt_glicose_adm_pos		= qt_glicose_adm_pos_p 
	where	nr_sequencia      		= nr_seq_dialise_p;
 
	if (ie_retirar_concentrado_w = 'S') then 
		 
		open	c01;
			loop 
			fetch	c01 into 
				nr_seq_maquina_w, 
			    nr_seq_ponto_acesso_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
			 
			open	c02;
			loop 
			fetch	c02 into 
				nr_seq_concentrado_ret_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
			 
				if (coalesce(nr_lista_concentrado_ret_w::text, '') = '') then 
					nr_lista_concentrado_ret_w 	:= to_char(nr_seq_concentrado_ret_w);
				elsif (length(nr_lista_concentrado_ret_w || ',' || to_char(nr_seq_concentrado_ret_w)) < 2000) then 
					nr_lista_concentrado_ret_w 	:= nr_lista_concentrado_ret_w || ',' || to_char(nr_seq_concentrado_ret_w);
				end if;
			 
			end loop;
			close c02;
			 
		end loop;
		close c01;
		 
		CALL hd_retirar_concentrado_dialise(nr_seq_dialise_p, nm_usuario_p, 'N');
	end if;
	 
end if;
 
if (coalesce(ie_commit_p, 'S') = 'S') then 
	commit;
end if;
 
nr_lista_concentrado_ret_p := nr_lista_concentrado_ret_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_finalizar_dialise (nr_seq_dialise_p bigint, qt_pa_sist_pos_pe_p bigint, qt_pa_diast_pos_pe_p bigint, qt_pa_sist_pos_deit_p bigint, qt_pa_diast_pos_deit_p bigint, qt_peso_pos_p bigint, dt_fim_p timestamp, nr_seq_motivo_peso_pos_p text, nr_seq_motivo_pa_deitado_pos_p text, nr_seq_motivo_pa_pe_pos_p text, nm_usuario_p text, qt_freq_cardiaca_p bigint, qt_temp_axilar_p bigint, qt_uf_p bigint, qt_tempo_dialise_p bigint, qt_freq_resp_pos_p bigint, qt_glicemia_capilar_pos_p bigint, qt_saturacao_o2_pos_p bigint, qt_insulina_pos_p bigint, qt_glicose_adm_pos_p bigint, ie_commit_p text default 'S', ds_erro_p INOUT text DEFAULT NULL, nr_lista_concentrado_ret_p INOUT text DEFAULT NULL) FROM PUBLIC;

