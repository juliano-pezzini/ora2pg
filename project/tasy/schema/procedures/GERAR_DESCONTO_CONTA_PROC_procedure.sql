-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_desconto_conta_proc ( nr_interno_conta_p bigint, ie_acao_p text, nr_seq_proc_p bigint, tx_desconto_p bigint, dt_periodo_inicial_p timestamp, dt_periodo_final_p timestamp, cd_medico_executor_p bigint, cd_setor_atendimento_p bigint, nr_doc_convenio_p text, cd_area_procedimento_p bigint, cd_especialidade_p bigint, cd_grupo_proc_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_convenio_p bigint, cd_Categoria_p text, vl_final_p bigint, nm_usuario_p text) AS $body$
DECLARE



/* ie_acao_p	I-Inclusão do desconto E-Estorno do desconto 	*/

/* dt_periodo_inicial_p Inicializar com dt_entrada do paciente   	*/

/* dt_periodo_final_p Inicializar com sysdate				*/

/* nr_seq_proc_p 									*/

qt_pontos_w			preco_amb.qt_pontuacao%type;
dt_atualizacao_w			timestamp			:= clock_timestamp();
vl_unitario_w			double precision	:= 0;

vl_procedimento_w			double precision	:= 0;
vl_medico_w				double precision	:= 0;
vl_custo_operacional_w		double precision	:= 0;
vl_anestesista_w			double precision	:= 0;
vl_auxiliares_w			double precision	:= 0;
vl_materiais_w			double precision	:= 0;

vl_desc_procedimento_w		double precision	:= 0;
vl_desc_medico_w			double precision	:= 0;
vl_desc_custo_oper_w		double precision	:= 0;
vl_desc_anestesista_w		double precision	:= 0;
vl_desc_auxiliares_w		double precision	:= 0;
vl_desc_materiais_w		double precision	:= 0;
vl_soma_descontos_w		double precision	:= 0;

vl_preco_procedimento_w		double precision	:= 0;
vl_preco_medico_w			double precision	:= 0;
vl_preco_custo_oper_w		double precision	:= 0;
vl_preco_anestesista_w		double precision	:= 0;
vl_preco_auxiliares_w		double precision	:= 0;
vl_preco_materiais_w		double precision	:= 0;

vl_pto_procedimento_w		double precision	:= 0;
vl_pto_medico_w			double precision	:= 0;
vl_pto_custo_oper_w		double precision	:= 0;
vl_pto_anestesista_w		double precision	:= 0;
vl_pto_auxiliares_w		double precision	:= 0;
vl_pto_Materiais_w		double precision	:= 0;

qt_porte_anestesico_w		smallint	:= 0;
cd_edicao_amb_w			integer	:= 0;

ie_classificacao_w		smallint;
ie_valor_informado_w		varchar(1);
nr_sequencia_w			bigint;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
cd_medico_executor_w		varchar(10);
vl_desconto_w			double precision	:= 0;
nr_seq_w				bigint;
cd_procedimento_w			bigint;
ie_origem_proced_w		bigint;
ie_tipo_valor_w			smallint	:= 3;

cd_estabelecimento_w      	smallint  	:= 0;
cd_tipo_acomodacao_w      	smallint		:= null;
ie_tipo_atendimento_w     	smallint    	:= 0;
cd_setor_Atendimento_w    	integer  	:= 0;
dt_conta_w                	timestamp         	:= clock_timestamp();
vl_preco_proc_w			double precision 	:= 0;
vl_arredond_w			double precision	:= 0;
vl_Proc_acum_w			double precision	:= 0;
nr_seq_desc_w			bigint;
nr_seq_Item_Desc_w		bigint;

nr_seq_pacote_w			bigint;
vl_itens_pacote_w			double precision;
vl_pacote_w				double precision;

cd_usuario_convenio_w		varchar(40);
cd_plano_w			varchar(20);
ie_clinica_w			bigint;
cd_empresa_ref_w		bigint;
ie_sexo_w			varchar(01);
ie_preco_informado_w		varchar(01);
ie_atend_retorno_w		varchar(01);
ie_carater_inter_sus_w		varchar(2);
nr_seq_grupo_rec_w		bigint;
nr_seq_ajuste_proc_w		bigint;
nr_seq_origem_w			bigint;
nr_seq_classif_medico_w		atendimento_paciente.nr_seq_classif_medico%type;

/*  Os tipos de valor são (1 - Pacote, 2 - Valor Ponto AMB e 3 - Desconto) */

c01 CURSOR FOR
	SELECT 	a.nr_sequencia,
			coalesce(a.vl_procedimento,0),
			coalesce(a.vl_medico,0),
			coalesce(a.vl_custo_operacional,0),
			coalesce(a.vl_materiais,0),
			a.ie_valor_informado,
			coalesce(a.vl_anestesista,0),
			coalesce(a.vl_auxiliares,0),
			a.cd_convenio,
			a.cd_categoria,
			a.cd_procedimento,
			a.ie_origem_proced,
			c.ie_classificacao,
			d.cd_estabelecimento,
			d.ie_tipo_atendimento,
			cd_setor_atendimento,
			a.cd_medico_executor,
			CASE WHEN coalesce(d.nr_atend_original::text, '') = '' THEN  'N'  ELSE 'S' END  ie_atend_retorno,
			a.nr_seq_grupo_rec
	from		estrutura_procedimento_v b,
			atendimento_paciente d,
			procedimento c,
			procedimento_paciente a
	where		a.cd_procedimento				= b.cd_procedimento
	and		a.ie_origem_proced			= b.ie_origem_proced
	and		a.cd_procedimento				= c.cd_procedimento
	and		a.ie_origem_proced			= c.ie_origem_proced
	and		a.nr_interno_conta			= nr_interno_conta_p
	and		a.nr_atendimento				= d.nr_atendimento
	and 		a.ie_origem_proced 			not in (2,3)
	and		a.nr_sequencia				<> coalesce(a.nr_seq_proc_pacote,0)
	and		a.dt_procedimento	between 		dt_periodo_inicial_p and
									dt_periodo_final_p
	and		((coalesce(cd_medico_executor_p,a.cd_medico_executor)
									= a.cd_medico_executor) or (coalesce(a.cd_medico_executor::text, '') = ''))
	and		((coalesce(nr_doc_convenio_p, a.nr_doc_convenio)
									= a.nr_doc_convenio) or (coalesce(a.nr_doc_convenio::text, '') = ''))
	and		coalesce(cd_setor_atendimento_p, a.cd_setor_atendimento)
									= a.cd_setor_atendimento
	and		coalesce(cd_area_procedimento_p, b.cd_area_procedimento)
									= b.cd_area_procedimento
	and		coalesce(cd_especialidade_p, b.cd_especialidade)
									= b.cd_especialidade
	and		coalesce(cd_grupo_proc_p, b.cd_grupo_proc)
									= b.cd_grupo_proc
	and		coalesce(cd_procedimento_p, b.cd_procedimento)
									= b.cd_procedimento
	order by 	a.nr_sequencia;

c02 CURSOR FOR
	SELECT cd_convenio,
		 cd_categoria,
		 nr_seq_proc_pacote,
		 sum(vl_item)
	from conta_paciente_v
	where nr_interno_conta = nr_interno_conta_p
	  and (nr_seq_proc_pacote IS NOT NULL AND nr_seq_proc_pacote::text <> '')
	  and nr_sequencia <> nr_seq_proc_pacote
	group by	cd_convenio,
			cd_categoria,
			nr_seq_proc_pacote;


BEGIN
vl_Proc_acum_w			:= 0;



select	b.ie_clinica,
	obter_dado_atend_cat_conv(a.nr_atendimento, dt_periodo_final, cd_convenio_p, cd_categoria_p, 'E'),
	obter_dado_atend_cat_conv(a.nr_atendimento, dt_periodo_final, cd_convenio_p, cd_categoria_p, 'P'),
	obter_dado_atend_cat_conv(a.nr_atendimento, dt_periodo_final, cd_convenio_p, cd_categoria_p, 'U'),
	c.ie_sexo,
	b.ie_carater_inter_sus,
	coalesce((obter_dados_categ_conv(b.nr_atendimento,'OC'))::numeric ,0),
	coalesce(b.nr_seq_classif_medico,0)
into STRICT	ie_clinica_w,
	cd_empresa_ref_w,
	cd_plano_w,
	cd_usuario_convenio_w,
	ie_sexo_w,
	ie_carater_inter_sus_w,
	nr_seq_origem_w,
	nr_seq_classif_medico_w
from	pessoa_fisica c,
	atendimento_paciente b,
	conta_paciente a
where	a.nr_atendimento	= b.nr_atendimento
and	a.nr_interno_conta	= nr_interno_conta_p
and	b.cd_pessoa_fisica	= c.cd_pessoa_fisica;

OPEN C01;
LOOP
	FETCH C01 into
		nr_sequencia_w,
		vl_procedimento_w,
		vl_medico_w,
		vl_custo_operacional_w,
		vl_materiais_w,
		ie_valor_informado_w,
		vl_anestesista_w,
		vl_auxiliares_w,
		cd_convenio_w,
		cd_categoria_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		ie_classificacao_w,
		cd_estabelecimento_w,
		ie_tipo_atendimento_w,
		cd_setor_atendimento_w,
		cd_medico_executor_w,
		ie_atend_retorno_w,
		nr_seq_grupo_rec_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		if (ie_acao_p	= 'I') then
			begin
			vl_Proc_acum_w	:= vl_Proc_acum_w + vl_procedimento_w;
			/* Calcular desconto */

			if (cd_convenio_p IS NOT NULL AND cd_convenio_p::text <> '') and (cd_categoria_p IS NOT NULL AND cd_categoria_p::text <> '') and (coalesce(tx_desconto_p,0) = 0) then
				begin
				if (ie_classificacao_w = 1) then
					begin
					SELECT * FROM Define_Preco_Procedimento(
						cd_estabelecimento_w, cd_convenio_p, cd_categoria_p, dt_conta_w, cd_procedimento_w, cd_tipo_acomodacao_w, ie_tipo_atendimento_w, cd_setor_atendimento_w, cd_medico_executor_w, null, null, null, null, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, ie_sexo_w, vl_Preco_procedimento_w, vl_Preco_custo_oper_w, vl_Preco_anestesista_w, vl_Preco_medico_w, vl_Preco_auxiliares_w, vl_Preco_materiais_w, vl_pto_procedimento_w, vl_pto_custo_oper_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_Auxiliares_w, vl_pto_Materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w, 0, ie_atend_retorno_w, 0, null, null, null, null, null, null, null, null, null, null, ie_carater_inter_sus_w, null, nr_seq_grupo_rec_w, null, nr_seq_origem_w, nr_seq_classif_medico_w, null) INTO STRICT vl_Preco_procedimento_w, vl_Preco_custo_oper_w, vl_Preco_anestesista_w, vl_Preco_medico_w, vl_Preco_auxiliares_w, vl_Preco_materiais_w, vl_pto_procedimento_w, vl_pto_custo_oper_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_Auxiliares_w, vl_pto_Materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w;
					end;
				else
					begin
					SELECT * FROM Define_Preco_Servico(
            				cd_estabelecimento_w, cd_convenio_p, cd_categoria_p, dt_conta_w, cd_procedimento_w, coalesce(cd_setor_atendimento_w,0), coalesce(ie_tipo_atendimento_w,0), coalesce(cd_tipo_acomodacao_w,0), cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, ie_sexo_w, vl_preco_proc_w, nr_seq_ajuste_proc_w, ie_atend_retorno_w, 0, null, null, null, null, null, null, null, null, nr_seq_grupo_rec_w, nr_seq_origem_w, nr_seq_classif_medico_w, cd_medico_executor_w) INTO STRICT vl_preco_proc_w, nr_seq_ajuste_proc_w;
					end;
				end if;
				end;
			else
				begin
				vl_desc_procedimento_w 	:= ((vl_procedimento_w * tx_desconto_p)/100);
				vl_desc_medico_w		:= ((vl_medico_w * tx_desconto_p)/100);
				vl_desc_custo_oper_w 	:= ((vl_custo_operacional_w * tx_desconto_p)/100);
				vl_desc_materiais_w 	:= ((vl_materiais_w * tx_desconto_p)/100);
				vl_desc_anestesista_w 	:= ((vl_anestesista_w * tx_desconto_p)/100);
				vl_desc_auxiliares_w 	:= ((vl_auxiliares_w * tx_desconto_p)/100);
				vl_soma_descontos_w	:=
							vl_desc_medico_w +
							vl_desc_custo_oper_w +
							vl_desc_materiais_w +
							vl_desc_anestesista_w +
							vl_desc_auxiliares_w;
				if (vl_soma_descontos_w <> 0) and (vl_desc_procedimento_w <> 0) and (vl_soma_descontos_w <> vl_desc_procedimento_w) then
					vl_desc_procedimento_w	:= vl_soma_descontos_w;
				end if;
				end;
			end if;
			if	(vl_Procedimento_w > 0 AND vl_desc_procedimento_w > 0) or
				(vl_Procedimento_w < 0 AND vl_desc_procedimento_w < 0) then
				begin
				/* atualizar procedimento_paciente */

				vl_Proc_acum_w	:= vl_Proc_acum_w - vl_Desc_procedimento_w;
				update procedimento_paciente
				set	 ie_valor_informado 	= 'S',
					 vl_procedimento		= (vl_procedimento - vl_desc_procedimento_w),
					 vl_medico			= (vl_medico - vl_desc_medico_w),
					 vl_custo_operacional	= (vl_custo_operacional - vl_desc_custo_oper_w),
					 vl_materiais		= (vl_materiais - vl_desc_materiais_w),
					 vl_anestesista		= (vl_anestesista - vl_desc_anestesista_w),
					 vl_auxiliares		= (vl_auxiliares - vl_desc_auxiliares_w)
				where	 nr_sequencia		= nr_sequencia_w;
				/* gerar proc_paciente_valor */

				select coalesce(max(nr_sequencia), 0)
				into STRICT	 nr_seq_w
				from	 proc_paciente_valor
				where	 nr_seq_procedimento	= nr_sequencia_w;
				nr_seq_w				:= nr_seq_w + 1;
				nr_seq_desc_w			:= nr_sequencia_w;
				nr_seq_Item_Desc_w		:= nr_seq_w;
				begin
				insert into proc_paciente_valor(nr_seq_procedimento,
					nr_sequencia,
					ie_tipo_valor,
					dt_atualizacao,
					nm_usuario,
					vl_procedimento,
					vl_medico,
					vl_anestesista,
					vl_materiais,
					vl_custo_operacional,
					vl_auxiliares,
					cd_convenio,
					cd_categoria,
					pr_valor)
				values (nr_sequencia_w,
					nr_seq_w,
					ie_tipo_valor_w,
					dt_atualizacao_w,
					nm_usuario_p,
					vl_desc_procedimento_w,
					vl_desc_medico_w,
					vl_desc_anestesista_w,
					vl_desc_materiais_w,
					vl_desc_custo_oper_w,
					vl_desc_auxiliares_w,
					cd_convenio_w,
					cd_categoria_w,
					tx_desconto_p);
				exception
					when others then
					-- Erro Incluir Desconto Proc #@DS_ERRO#@
					CALL Wheb_mensagem_pck.exibir_mensagem_abort(186311,'DS_ERRO=' || SQLERRM);
				end;
				end;
			end if;
			end;
		else
			begin
			/* atualizar procedimento_paciente */

			update procedimento_paciente
			set	 ie_valor_informado 	= 'N',
				 vl_procedimento		= (vl_procedimento + vl_desconto_w)
			where	 nr_sequencia		= nr_sequencia_w;
			CALL atualiza_preco_procedimento(nr_sequencia_w,
								cd_convenio_w,
								nm_usuario_p);
			/* excluir proc_paciente_valor */

			begin
			delete from proc_paciente_valor
			where	 nr_seq_procedimento 	= nr_sequencia_w
			and	 ie_tipo_valor		= ie_tipo_valor_w;
			exception
				when others then
				nr_sequencia_w	:= nr_sequencia_w;
			end;
			end;
		end if;
		end;
END LOOP;
CLOSE C01;
if (ie_acao_p	= 'I') and (vl_final_p	> 0) and (vl_final_p <> vl_proc_acum_w) and (nr_seq_desc_w <> 0) then
	begin
	vl_arredond_w			:= vl_final_p - vl_proc_acum_w;
	update procedimento_paciente
	set	vl_procedimento		= (vl_procedimento + vl_arredond_w),
		vl_custo_operacional	= CASE WHEN vl_custo_operacional=0 THEN 0  ELSE (vl_custo_operacional + vl_arredond_w) END
	where	 nr_sequencia		= nr_sequencia_w;

	update Proc_paciente_valor
	set 	vl_procedimento		= (vl_procedimento - vl_arredond_w),
		vl_custo_operacional	= CASE WHEN vl_custo_operacional=0 THEN 0  ELSE (vl_custo_operacional - vl_arredond_w) END
	where  nr_seq_procedimento	= nr_seq_desc_w
	  and  nr_sequencia		= nr_seq_item_desc_w;
	end;
end if;

OPEN C02;
LOOP
	FETCH C02 into	cd_convenio_w,
				cd_categoria_w,
				nr_seq_pacote_w,
				vl_itens_pacote_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		select vl_procedimento
		into STRICT vl_pacote_w
		from procedimento_paciente
		where nr_sequencia = nr_seq_pacote_w;

		if (vl_pacote_w <> vl_itens_pacote_w) then
			begin
			update procedimento_paciente
			set vl_procedimento = vl_itens_pacote_w,
			    vl_custo_operacional = vl_itens_pacote_w
			where nr_sequencia = nr_seq_pacote_w;
			end;

			vl_desc_procedimento_w := vl_pacote_w - vl_itens_pacote_w;
			if (vl_pacote_w < vl_itens_pacote_w) then
				vl_desc_procedimento_w := vl_itens_pacote_w - vl_pacote_w;
			end if;

			if (ie_acao_p	= 'I') then
				begin

				select coalesce(max(nr_sequencia), 0)
				into STRICT	 nr_seq_w
				from	 proc_paciente_valor
				where	 nr_seq_procedimento	= nr_seq_pacote_w;
				nr_seq_w				:= nr_seq_w + 1;

				insert into proc_paciente_valor(nr_seq_procedimento,
					nr_sequencia,
					ie_tipo_valor,
					dt_atualizacao,
					nm_usuario,
					vl_procedimento,
					vl_medico,
					vl_anestesista,
					vl_materiais,
					vl_custo_operacional,
					vl_auxiliares,
					cd_convenio,
					cd_categoria,
					pr_valor)
				values (nr_seq_pacote_w,
					nr_seq_w,
					ie_tipo_valor_w,
					dt_atualizacao_w,
					nm_usuario_p,
					vl_desc_procedimento_w,
					0,
					0,
					0,
					vl_desc_procedimento_w,
					0,
					cd_convenio_w,
					cd_categoria_w,
					0);
				exception
					when others then
					-- Erro Incluir Desconto Proc #@DS_ERRO#@
					CALL Wheb_mensagem_pck.exibir_mensagem_abort(186311,'DS_ERRO=' || SQLERRM);
				end;
			else
				select coalesce(sum(vl_procedimento),0)
				into STRICT vl_desconto_w
				from proc_paciente_valor
				where nr_seq_procedimento = nr_seq_pacote_w
				  and ie_tipo_valor = ie_tipo_valor_w;

				update procedimento_paciente
				set	 vl_procedimento		= (vl_procedimento + vl_desconto_w),
					 vl_custo_operacional	= (vl_procedimento + vl_desconto_w)
				where	 nr_sequencia		= nr_seq_pacote_w;

				/* excluir proc_paciente_valor */

				begin
				delete from proc_paciente_valor
				where	 nr_seq_procedimento 	= nr_seq_pacote_w
				and	 ie_tipo_valor		= ie_tipo_valor_w;
				exception
					when others then
						nr_sequencia_w	:= nr_sequencia_w;
				end;

			end if;
		end if;
		end;
end loop;
CLOSE C02;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_desconto_conta_proc ( nr_interno_conta_p bigint, ie_acao_p text, nr_seq_proc_p bigint, tx_desconto_p bigint, dt_periodo_inicial_p timestamp, dt_periodo_final_p timestamp, cd_medico_executor_p bigint, cd_setor_atendimento_p bigint, nr_doc_convenio_p text, cd_area_procedimento_p bigint, cd_especialidade_p bigint, cd_grupo_proc_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_convenio_p bigint, cd_Categoria_p text, vl_final_p bigint, nm_usuario_p text) FROM PUBLIC;

