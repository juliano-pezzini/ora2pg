-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE get_dbs_voucher ( nr_seq_dbs_p bigint, nr_interno_conta_p bigint, nm_usuario_p text, ie_validate_p text, ie_service_type_p text, nr_trans_id_p text, cd_claim_p text) AS $body$
DECLARE



nm_family_w			varchar(255);
nm_first_w			varchar(255);
ie_request_type_w		varchar(255);
new_voucher_ind_w          	smallint;
cd_mbs_code_w			varchar(5);
nr_sequencia_w    		bigint;
nr_voucher_w              	varchar(2);
cd_pessoa_fisica_w		varchar(10);
cd_establishment_w		bigint;
nr_count_w 			integer;
dt_request_w          		timestamp;
dt_referal_w         		timestamp;
service_count              	bigint;
nr_voucher_count_w      	bigint;
curr_cd_medico_resp_w      	varchar(10);
cd_service_code_w  		varchar(10);
cd_service_count_w		bigint;
cd_payee_provider_w             varchar(8);
nr_seq_type_opinion_w		varchar(10);
current_date_w			timestamp := null;
isSameDaySerivice_w		smallint;
voucher_date_w			timestamp;
voucher_count_w			bigint;
service_reference_date_w	timestamp;
ie_aftercare_w   		varchar(1);
ds_justificatio_w		varchar(4000);
ie_multiple_procedure_w		varchar(1) := 'N';
nr_service_count_w		smallint;
dt_validate_w			timestamp;
ie_specialist_w			varchar(10) := 'N';
qt_procedure_count_w  		bigint;
nr_procedure_w      		bigint;
nr_seq_ext_doc_w 		bigint;
nr_ext_doc_w 			bigint;
dt_ref_req_w 			timestamp;
cd_claim_w 			varchar(10);
nr_field_quanity_w 		bigint;
nr_service_w      		bigint;
nr_rebat_val 			bigint;
nr_rebat_val_tasy 		bigint;
nr_rebat_val_eclipse 		bigint;
nr_field_quantity_w 		bigint;
vl_rebate_value 		bigint;

cd_motivo_alta_w    		atendimento_paciente.cd_motivo_alta%type;
nr_encounter_w			atendimento_paciente.nr_atendimento%type;
cd_user_insurance_w		atend_categoria_convenio.cd_usuario_convenio%type;
cd_add_information_w		atend_categoria_convenio.cd_complemento%type;
ie_benefit_w			dbs_voucher.ie_benefit%type;
dt_birth_w			pessoa_fisica.dt_nascimento%type;
cd_medic_w			parecer_medico_req.cd_medico%type;
ie_type_opinion_w		parecer_medico_req.ie_tipo_parecer%type;
cd_person_opinion_w		parecer_medico_req.cd_pessoa_parecer%type;
dt_encounter_w			atendimento_paciente.dt_entrada%type;
dt_authorisation_w		autorizacao_convenio.dt_autorizacao%type;
cd_insurance_w			convenio.cd_convenio%type;
dbs_voucher_seq_w		dbs_voucher.nr_sequencia%type;
cd_user_insurance_tit_w		pessoa_titular_convenio.cd_usuario_convenio_tit%type;
ref_provider_num_w		medical_provider_number.nr_provider%type;
req_provider_num_w		medical_provider_number.nr_provider%type;
nr_seq_tipe_parecer_w		parecer_medico_req.nr_seq_tipo_parecer%type;
nr_patient_ref_w   		atend_categoria_convenio.cd_complemento%type;
nr_seq_transaction_w		dbs_claim.nr_seq_transaction%type;
dt_update_nrec_w		prescr_proc_peca.dt_atualizacao_nrec%type;
dt_medical_report_w		laudo_paciente.dt_laudo%type;
nr_lsp_w			equipamento.cd_imobilizado_ext%type;
ie_encounter_type_w		atendimento_paciente.ie_tipo_atendimento%type;
ie_referral_override_w		dbs_voucher.ie_referral_override%type;
cd_provider_w			dbs_claim.cd_provider%type;
nr_justification_seq_w		paciente_justificativa.nr_sequencia%type;
ie_referral_period_w		dbs_voucher.ie_referral_period%type;
ie_selfdeemed_w			dbs_item.ie_selfdeemed%type;
nr_group_w			procedimento.cd_grupo_proc%type;

ie_rule_w			dbs_item.ie_rule%type;
ie_s4b3_w			dbs_item.ie_s4b3%type;
ie_restrictive_w    		dbs_item.ie_restrictive%type;
cd_opinion_text_w		tipo_parecer.ds_tipo_parecer%type;
qt_patients_w 			dbs_item.qt_patients%type;
cd_proc_w     			procedimento.cd_procedimento%type;



c_procedimento CURSOR FOR
	SELECT	a.nr_sequencia,
			(coalesce(vl_procedimento,0) * 100) vl_procedimento,
			a.cd_equipamento,
			a.cd_procedimento,
			a.ds_observacao,
			a.ie_origem_proced,
			a.dt_procedimento,
			pkg_date_utils.get_DiffDate(a.dt_inicio_procedimento,a.dt_final_procedimento , 'MINUTE') qt_duracao,
			b.cd_setor_externo,
			a.dt_inicio_procedimento,
			(SELECT max(Lpad(substr(k.nr_provider, 1,8),8,'0'))
				from	medical_provider_number k
				where	k.cd_medico = a.cd_medico) as cd_medico_resp
	from	procedimento_paciente a,
		setor_atendimento b,
		procedimento d
	where	a.nr_interno_conta	= nr_interno_conta_p
	and	a.cd_setor_atendimento	= b.cd_setor_atendimento
	and 	d.cd_procedimento = a.cd_procedimento
	and 	not exists (select b.nr_seq_proc from dbs_item b
				where b.nr_seq_proc = a.nr_sequencia)
	order by a.DT_PROCEDIMENTO, a.cd_medico ,d.CD_GRUPO_PROC desc,  a.cd_procedimento;

BEGIN

CALL billing_i18n_pck.set_validate_eclipse(ie_validate_p);

select	max(cd_establishment)
into STRICT	cd_establishment_w
from	dbs_claim
where	nr_sequencia	= nr_seq_dbs_p;

select  max(a.nr_atendimento),
	max(d.dt_nascimento),
	max(b.dt_periodo_inicial),
	max(pkg_name_utils.get_person_name(d.nr_seq_person_name,cd_establishment_w,'familyName')) ,
	max(pkg_name_utils.get_person_name(d.nr_seq_person_name,cd_establishment_w,'givenName')),
	max(	d.cd_pessoa_fisica)
	--decode(ie_service_type_p ,'O' , null, max(a.dt_atualizacao)) request_date
into STRICT    nr_encounter_w,
	dt_birth_w,
	dt_encounter_w,
	nm_family_w,
	nm_first_w,
	cd_pessoa_fisica_w
--	dt_request_w
from    atendimento_paciente	a,
        conta_paciente		b,
	pessoa_fisica		d
where   a.nr_atendimento 	= b.nr_atendimento
and	d.cd_pessoa_fisica	= a.cd_pessoa_fisica
and     b.nr_interno_conta	= nr_interno_conta_p;

-- Service provider Number
select	max(Lpad(substr(k.nr_provider, 1,8),8,'0'))
into STRICT	cd_provider_w
from   	conta_paciente b,
        atendimento_paciente a ,
        medical_provider_number k
where  	b.nr_interno_conta = nr_interno_conta_p
and 	b.nr_atendimento = a.nr_atendimento
and     a.cd_medico_resp = k.cd_medico  LIMIT 1;


select	max(a.dt_referencia),
        max((select max(Lpad(substr(k.nr_provider, 1,8),8,'0'))
		from 	medical_provider_number k
		where 	k.cd_medico = a.cd_medico )) as ref_provider_num,
        max(a.dt_validade),
	max(a.ie_type_code)

into STRICT 	dt_ref_req_w,  		---- ReferralIssueDate
	req_provider_num_w,   	---- RequestingProviderNum
	dt_validate_w,		---- Validate date
	--ie_specialist_w	---- specialist type
	ie_referral_override_w  -- referral override indicator
from	atendimento_paciente_inf a,
        conta_paciente b
where 	b.nr_interno_conta = nr_interno_conta_p
and	a.nr_atendimento = b.nr_atendimento;

if (ie_service_type_p = 'S') then
	cd_medic_w := req_provider_num_w;
	dt_referal_w := dt_ref_req_w;
	dt_request_w := null;
end if;

if (ie_service_type_p = 'P') then
	cd_person_opinion_w := req_provider_num_w;
	dt_request_w := dt_ref_req_w;
	dt_referal_w := null;
	ie_request_type_w := 'P';
end if;

begin
	select	max(c.nr_seq_tipo_medico)
	into STRICT	nr_seq_ext_doc_w
	from 	conta_paciente a,
		atendimento_paciente b,
		pf_medico_externo c
	where 	a.nr_interno_conta = nr_interno_conta_p
	and 	a.nr_atendimento = b.nr_atendimento
	and 	b.cd_medico_resp = c.cd_medico;
	if (coalesce(nr_seq_ext_doc_w::text, '') = '') then
		ie_specialist_w := 'S'; -- if type is not set then consider as general physician
	else
		select 	coalesce(max(m.ie_medico_familia) ,'N')
		into STRICT	ie_specialist_w
		from 	tipo_medico_externo m
		where m.nr_sequencia = nr_seq_ext_doc_w;

	end if;
	exception
	when	no_data_found	then
		nr_ext_doc_w := 0;
end;
if (nr_ext_doc_w = 0) then
	select max(cd_especialidade) into STRICT ie_specialist_w  from conta_paciente a,
		atendimento_paciente b,
		medico_especialidade c
	where   a.nr_interno_conta = nr_interno_conta_p
	and    	a.nr_atendimento = b.nr_atendimento
	and 	c.cd_pessoa_fisica = b.cd_medico_resp;
end if;

select	CASE WHEN coalesce(ie_specialist_w::text, '') = '' THEN  'GP'  WHEN ie_specialist_w='S' THEN 'GP'  WHEN ie_specialist_w='N' THEN 'SP'  ELSE 'SP' END
into STRICT 	ie_specialist_w
;

if ( ie_service_type_p = 'S' and (dt_referal_w IS NOT NULL AND dt_referal_w::text <> '') ) then

	if (coalesce(dt_validate_w::text, '') = '') then
		ie_referral_period_w := 'I';  -- Indifinate
	elsif (pkg_date_utils.get_diffdate(dt_referal_w, dt_validate_w, 'MONTH') <= 3 and ie_specialist_w = 'SP') then
		ie_referral_period_w := 'S';
	elsif (pkg_date_utils.get_diffdate(dt_referal_w, dt_validate_w, 'MONTH') <= 12 and ie_specialist_w = 'GP') then
		ie_referral_period_w := 'S';
	elsif (pkg_date_utils.get_diffdate(dt_referal_w, dt_validate_w, 'MONTH') >= 3 and ie_specialist_w = 'SP') then
		ie_referral_period_w := 'N';
	elsif (pkg_date_utils.get_diffdate(dt_referal_w, dt_validate_w, 'MONTH') >= 12 and ie_specialist_w = 'GP') then
		ie_referral_period_w := 'N';
	end if;
end if;

--AfterCareOverrideInd
select	CASE WHEN max(b.ie_contato_alta)='S' THEN 'Y'   ELSE 'N' END
into STRICT	ie_aftercare_w
from	atendimento_paciente a, motivo_alta b, conta_paciente c
where	a.cd_motivo_alta = b.cd_motivo_alta
and	c.nr_atendimento = a.nr_atendimento
and    	c.nr_interno_conta = nr_interno_conta_p;

if (coalesce(dt_birth_w::text, '') = '') then
	CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(618790), nm_usuario_p);
elsif (dt_birth_w > clock_timestamp())then
	CALL generate_inco_eclipse(nr_interno_conta_p, 3, obter_desc_expressao(618790), nm_usuario_p);
end if;

if (coalesce(dt_encounter_w::text, '') = '' or dt_encounter_w > clock_timestamp()) then
	CALL generate_inco_eclipse(nr_interno_conta_p, 3, obter_desc_expressao(510877), nm_usuario_p);
end if;

if (coalesce(nm_family_w::text, '') = '') then
	CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(618789), nm_usuario_p);
end if;

if (coalesce(nm_first_w::text, '') = '') then
	CALL generate_inco_eclipse(nr_interno_conta_p, 1, Wheb_mensagem_pck.get_texto(1101293), nm_usuario_p);
end if;

select	max(b.nr_seq_estagio),
	max(b.dt_autorizacao)
into STRICT	ie_benefit_w,
	dt_authorisation_w
from	autorizacao_convenio	b,
	atendimento_paciente	a
where	a.nr_atendimento	= b.nr_atendimento
and	a.nr_atendimento 	= nr_encounter_w;

if (coalesce(ie_benefit_w::text, '') = '') then
	CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(328267), nm_usuario_p);
end if;


select	max(a.cd_usuario_convenio),
	max(a.cd_convenio),
	max(a.cd_complemento)  -- patient reference number
into STRICT	cd_user_insurance_w,
	cd_insurance_w,
	nr_patient_ref_w
from	atend_categoria_convenio a
where	a.nr_atendimento = nr_encounter_w;

if (coalesce(cd_user_insurance_w::text, '') = '') then
	CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(579719), nm_usuario_p);
end if;


if (coalesce(nr_patient_ref_w::text, '') = '') then
	CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(579719), nm_usuario_p);
end if;

select  add_months( to_date(clock_timestamp()), -24 )
into STRICT    service_reference_date_w
;

if (ie_service_type_p = 'O') then
	ie_request_type_w := null;
end if;

if (ie_referral_override_w ='H') then

	select '#'|| substr(cd_claim_p,2,6 )
	into STRICT cd_claim_w
	;

	update dbs_claim set cd_claim = cd_claim_w
	where nr_sequencia = nr_seq_dbs_p;
end if;

if ((ie_referral_override_w IS NOT NULL AND ie_referral_override_w::text <> '') and (ie_referral_override_w not in ('L','E','H','N')) )  then--ReferralOverrideTypeCde
	CALL generate_inco_eclipse(nr_interno_conta_p, 1, Wheb_mensagem_pck.get_texto(1112335), nm_usuario_p);
end if;

if ((cd_medic_w IS NOT NULL AND cd_medic_w::text <> '')  and (cd_medic_w = cd_payee_provider_w or coalesce(dt_referal_w::text, '') = '' or ie_referral_override_w in ('L','H' , 'E')  )) then
  	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112336), nm_usuario_p);   -----ReferringProviderNum
end if;

if ((cd_medic_w IS NOT NULL AND cd_medic_w::text <> '')  and ( (ie_referral_override_w IS NOT NULL AND ie_referral_override_w::text <> '') or (dt_request_w IS NOT NULL AND dt_request_w::text <> '') or (cd_person_opinion_w IS NOT NULL AND cd_person_opinion_w::text <> '') or (ie_request_type_w IS NOT NULL AND ie_request_type_w::text <> '') )) then
  	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112336), nm_usuario_p);   -----ReferringProviderNum
end if;

if((dt_referal_w IS NOT NULL AND dt_referal_w::text <> '')  and ( (dt_referal_w > clock_timestamp()) or (coalesce(cd_medic_w::text, '') = ''))) then
  	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112334), nm_usuario_p);   -----ReferralIssueDate
end if;

if ((dt_referal_w IS NOT NULL AND dt_referal_w::text <> '')  and ( (cd_person_opinion_w IS NOT NULL AND cd_person_opinion_w::text <> '') or (dt_request_w IS NOT NULL AND dt_request_w::text <> '') or (ie_referral_override_w IS NOT NULL AND ie_referral_override_w::text <> '') or (ie_request_type_w IS NOT NULL AND ie_request_type_w::text <> '') )) then
  	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112334), nm_usuario_p);   -----ReferralIssueDate
end if;

if (cd_person_opinion_w IS NOT NULL AND cd_person_opinion_w::text <> '' AND (cd_person_opinion_w = cd_payee_provider_w or  dt_request_w is  null)) then
	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112337), nm_usuario_p); --requestingprovidernum
end if;

if ((cd_person_opinion_w IS NOT NULL AND cd_person_opinion_w::text <> '') and ((cd_medic_w IS NOT NULL AND cd_medic_w::text <> '') or (dt_referal_w IS NOT NULL AND dt_referal_w::text <> ''))) then
	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112337), nm_usuario_p); --requestingprovidernum
end if;

if((dt_request_w IS NOT NULL AND dt_request_w::text <> '')  and ( (dt_request_w > clock_timestamp()) or (coalesce(cd_person_opinion_w::text, '') = ''))) then
  	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112338), nm_usuario_p);   -----RequestIssueDate
end if;

if ((dt_request_w IS NOT NULL AND dt_request_w::text <> '')  and ( (cd_medic_w IS NOT NULL AND cd_medic_w::text <> '') or (dt_referal_w IS NOT NULL AND dt_referal_w::text <> '') )) then
  	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112338), nm_usuario_p);   -----RequestIssueDate
end if;

if ((ie_request_type_w IS NOT NULL AND ie_request_type_w::text <> '') and (ie_request_type_w not in ('P','D') or ie_referral_override_w   in ('L','E','H') or (cd_medic_w IS NOT NULL AND cd_medic_w::text <> '') or (dt_referal_w IS NOT NULL AND dt_referal_w::text <> '') )) then
	CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112339), nm_usuario_p); --RequestTypeCde
end if;

select	max(dt_coleta)
into STRICT	dt_medical_report_w
from	procedimento_paciente a ,
	prescr_procedimento b
where	a.nr_prescricao= b.nr_prescricao
and	a.nr_sequencia_prescricao = b.nr_sequencia
and	a.nr_interno_conta = nr_interno_conta_p  	---DT_LAUDO
  LIMIT 1;

if (ie_service_type_p <> 'P') then
	dt_medical_report_w := null;
end if;


-- Validation rules for service level
service_count := 0;
nr_voucher_count_w := 0;
curr_cd_medico_resp_w := cd_provider_w;
cd_service_count_w :=0;


for r_c_procedimento in c_procedimento loop


	select	max(a.dt_referencia),
        max((select max(Lpad(substr(k.nr_provider, 1,8),8,'0'))
		from 	medical_provider_number k
		where 	k.cd_medico = a.cd_medico )) as ref_provider_num,
        max(a.dt_validade),
	max(a.ie_type_code)

	into STRICT 	dt_ref_req_w,  		---- ReferralIssueDate
		req_provider_num_w,   	---- RequestingProviderNum
		dt_validate_w,		---- Validate date
		--ie_specialist_w	---- specialist type
		ie_referral_override_w  -- referral override indicator
	from	atendimento_paciente_inf a,
		conta_paciente b
	where 	b.nr_interno_conta = nr_interno_conta_p
	and	a.nr_atendimento = b.nr_atendimento;

	if (ie_service_type_p = 'S') then
		cd_medic_w := req_provider_num_w;
		dt_referal_w := dt_ref_req_w;
		dt_request_w := null;
	end if;

	if (ie_service_type_p = 'P') then
		cd_person_opinion_w := req_provider_num_w;
		dt_request_w := dt_ref_req_w;
		dt_referal_w := null;
		ie_request_type_w := 'P';
	end if;




	select 	max(b.dt_atualizacao_nrec)
	into STRICT	dt_update_nrec_w
	FROM laudo_paciente a
LEFT OUTER JOIN prescr_proc_peca b ON (a.nr_sequencia = b.nr_seq_laudo)
WHERE a.nr_seq_proc = r_c_procedimento.nr_sequencia;



	select  max(CASE WHEN a.cd_setor_entrega=50 THEN 'SD'  WHEN a.cd_setor_entrega=37 THEN 'SS'  WHEN a.cd_setor_entrega=44 THEN 'SN'  END ) ,     	--selfdeemed
		CASE WHEN max(a.ie_aprovacao_execucao)='S' THEN 'Y' END  , 	-- Rule 3 excemption
		CASE WHEN max(a.ie_urgencia) ='S' THEN 'Y' END ,
		max(a.QT_PROCEDIMENTO),
		max(a.dt_coleta),
		max(CASE WHEN coalesce(a.nr_seq_topografia::text, '') = '' THEN 'N'  ELSE 'Y' END )
	into STRICT	ie_selfdeemed_w,
		ie_rule_w,
		ie_s4b3_w,
		nr_field_quantity_w,
		dt_medical_report_w,
		ie_multiple_procedure_w

	from	prescr_procedimento a ,
		prescr_medica b ,
		atendimento_paciente c ,
		conta_paciente d

	where	d.nr_interno_conta = nr_interno_conta_p   -- :conta_pat
	and  	a.cd_procedimento  = r_c_procedimento.cd_procedimento
	and   	d.nr_atendimento   = c.nr_atendimento
	and   	b.nr_atendimento   = c.nr_atendimento
	and   	b.nr_prescricao    = a.nr_prescricao;


	if (ie_service_type_p = 'O' or ie_service_type_p = 'S') then
		ie_rule_w := null;
		ie_s4b3_w := null;
		dt_medical_report_w := null;
	end if;
	if (ie_service_type_p = 'P') then
		dt_update_nrec_w  := dt_medical_report_w;
	end if;

	if (ie_selfdeemed_w  = 'SD') then
		cd_medic_w := null;
		dt_referal_w := null;
		dt_request_w := null;
		req_provider_num_w := null;
		dt_ref_req_w := null;
		cd_person_opinion_w := null;
		ie_request_type_w := null;
	end if;

	ie_restrictive_w := check_seprate_site(dbs_voucher_seq_w,nr_interno_conta_p,r_c_procedimento.cd_procedimento,r_c_procedimento.ie_origem_proced);
	if ((ie_restrictive_w IS NOT NULL AND ie_restrictive_w::text <> '') and ie_restrictive_w not in ('SP','NR','NC')) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'Tasy does not allow an invalid RestrictiveOverrideCde to be used', nm_usuario_p);
	end if;

	if ((ie_selfdeemed_w IS NOT NULL AND ie_selfdeemed_w::text <> '') and (ie_selfdeemed_w not in ('SD' , 'SS','NN'))) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid selfdeemed code', nm_usuario_p);
	end if;

	if (ie_selfdeemed_w  = 'SD' and ((cd_medic_w IS NOT NULL AND cd_medic_w::text <> '') or  (cd_person_opinion_w IS NOT NULL AND cd_person_opinion_w::text <> ''))) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid selfDeemed value', nm_usuario_p);
	end if;

	if (ie_selfdeemed_w  = 'SS' and ((ie_referral_override_w IS NOT NULL AND ie_referral_override_w::text <> '') or (cd_person_opinion_w IS NOT NULL AND cd_person_opinion_w::text <> '') or (dt_request_w IS NOT NULL AND dt_request_w::text <> '') )) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid selfDeemed value', nm_usuario_p);
	end if;

	if ((ie_rule_w IS NOT NULL AND ie_rule_w::text <> '') and (ie_rule_w not in ('Y' ,'N'))) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid rule indication', nm_usuario_p);
	end if;

	if (ie_rule_w IS NOT NULL AND ie_rule_w::text <> '' AND ie_service_type_p <> 'P' ) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid rule indication', nm_usuario_p);
	end if;

--	if(ie_rule_w = 'Y' and r_c_procedimento.qt_duracao is null) then
--		generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid rule indication', nm_usuario_p);
--	end if;
	if (ie_rule_w = 'Y' and ie_s4b3_w = 'Y') then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid rule indication', nm_usuario_p);
	end if;
	if ((ie_s4b3_w IS NOT NULL AND ie_s4b3_w::text <> '') and (ie_s4b3_w not in ('Y' ,'N'))) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid S4b3ExemptInd', nm_usuario_p);
	end if;
--	if(ie_s4b3_w is not null and (ie_s4b3_w <> 'P' )) then
--		generate_inco_eclipse(nr_interno_conta_p, 1, 'invalid S4b3ExemptInd', nm_usuario_p);
--	end if;
	if ((dt_medical_report_w IS NOT NULL AND dt_medical_report_w::text <> '') and ((dt_medical_report_w > clock_timestamp()) or (coalesce(dt_update_nrec_w::text, '') = '')  or ( dt_medical_report_w < dt_request_w ))) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(567780), nm_usuario_p);
	end if;

	if (r_c_procedimento.qt_duracao = 0) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(566689), nm_usuario_p);
	end if;

	if (ie_referral_override_w = 'H' and coalesce(r_c_procedimento.ds_observacao::text, '') = '') then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(923766), nm_usuario_p);
	end if;

--  if(r_c_procedimento.ds_observacao is not null and LENGTH(r_c_procedimento.ds_observacao) > 50) then
--    generate_inco_eclipse(nr_interno_conta_p, 1,'Service text should be lesser than 50 characters', nm_usuario_p);
--  end if;
	if (coalesce(r_c_procedimento.vl_procedimento::text, '') = '') then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, obter_desc_expressao(587168), nm_usuario_p);
	end if;

	if (dt_update_nrec_w IS NOT NULL AND dt_update_nrec_w::text <> '' AND (dt_update_nrec_w > dt_medical_report_w or dt_update_nrec_w < dt_request_w )) then
		CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112343), nm_usuario_p);
	end if;

	if ( (ie_encounter_type_w IS NOT NULL AND ie_encounter_type_w::text <> '') and (ie_encounter_type_w not in ('Y','N'))) then
		CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112329), nm_usuario_p);
        end if;

	if (coalesce(r_c_procedimento.cd_procedimento::text, '') = '') then
		CALL generate_inco_eclipse(nr_interno_conta_p , 1, Wheb_mensagem_pck.get_texto(1112341), nm_usuario_p);
	end if;

	if((ie_service_type_p = 'P')  and (coalesce(r_c_procedimento.cd_setor_externo::text, '') = '' )) then
		CALL generate_inco_eclipse(nr_interno_conta_p , 1,Wheb_mensagem_pck.get_texto(1112340), nm_usuario_p); --SCPId
	end if;

	if((ie_service_type_p = 'P'  and (r_c_procedimento.cd_setor_externo IS NOT NULL AND r_c_procedimento.cd_setor_externo::text <> '') )and (length(r_c_procedimento.cd_setor_externo) < 3 or length(r_c_procedimento.cd_setor_externo) > 5)) then
		CALL generate_inco_eclipse(nr_interno_conta_p , 1,Wheb_mensagem_pck.get_texto(1112340), nm_usuario_p); --SCPId
	end if;

	if (coalesce(r_c_procedimento.dt_procedimento::text, '') = '' or r_c_procedimento.dt_procedimento > clock_timestamp()) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 3, obter_desc_expressao(510877), nm_usuario_p);
	end if;

  -- Check  service date should not be less the 2 years
	if (r_c_procedimento.dt_procedimento < service_reference_date_w ) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 3, obter_desc_expressao(510877), nm_usuario_p);
	end if;

  ------------------------------------
	if (r_c_procedimento.cd_medico_resp IS NOT NULL AND r_c_procedimento.cd_medico_resp::text <> '' AND  r_c_procedimento.cd_medico_resp <> curr_cd_medico_resp_w ) then
		curr_cd_medico_resp_w :=r_c_procedimento.cd_medico_resp;
		new_voucher_ind_w := 1;

	elsif ( coalesce(r_c_procedimento.cd_medico_resp::text, '') = '' ) then
		if (curr_cd_medico_resp_w <> cd_provider_w) then
			new_voucher_ind_w := 1;
			curr_cd_medico_resp_w := cd_provider_w;
		end if;

	end if;



	if (nr_seq_dbs_p IS NOT NULL AND nr_seq_dbs_p::text <> '') then
		select	count(*)
		into STRICT 	voucher_count_w
		from	dbs_voucher a,
			dbs_claim b
		where 	a.nr_seq_claim = b.nr_sequencia
		and	b.cd_claim = cd_claim_p
		and	to_date(dt_service,'YYYY-MM-DD') = to_date(r_c_procedimento.dt_procedimento,'YYYY-MM-DD');
	end if;

	if (voucher_count_w = 0) then
		new_voucher_ind_w := 1;
	end if;


        if( ( mod(service_count, 14) = 0 ) or new_voucher_ind_w = 1 ) then

		service_count := 0;
		nr_voucher_count_w := nr_voucher_count_w + 1;
		new_voucher_ind_w := 0;


		select	nextval('dbs_voucher_seq') , Lpad(nr_voucher_count_w, 2, '0')
		into STRICT	dbs_voucher_seq_w , nr_voucher_w
		;

		-- Number of patients seen
		select	max(coalesce((SUBSTR(r_c_procedimento.DS_OBSERVACAO, 24, 2))::numeric , 1))
		into STRICT 	qt_patients_w
		
		where 	upper(SUBSTR(r_c_procedimento.DS_OBSERVACAO , 1,23)) = upper('Number of patient seen ');

		qt_patients_w := (qt_patients_w)::numeric;

		insert into dbs_voucher(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_claim,
					ie_benefit,
					dt_service,
					dt_birth,
					nm_family,
					nm_first,
					cd_medicare_card,
					nr_patient_ref,
					ie_referral_override,
					cd_referring,
					dt_referral,
					ie_referral_period,
					cd_requesting,
					dt_request,
					ie_request_type,
					nr_time_service,
					nr_seq_account,
					cd_voucher,
					cd_med_card_issue_num)
		values (
					dbs_voucher_seq_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_dbs_p,
					'Y',  --
					r_c_procedimento.dt_procedimento,
					dt_birth_w,
					nm_family_w,
					nm_first_w,
					substr(cd_user_insurance_w, 1 , 9),
					nr_patient_ref_w,
					CASE WHEN coalesce(ie_request_type_w::text, '') = '' THEN ie_referral_override_w  ELSE null END ,

					CASE WHEN ie_service_type_p ='S' THEN req_provider_num_w   ELSE null END ,
					CASE WHEN ie_service_type_p ='S' THEN dt_referal_w  ELSE null END ,
					ie_referral_period_w,
					CASE WHEN ie_service_type_p ='P' THEN req_provider_num_w   ELSE null END ,
					CASE WHEN ie_service_type_p ='P' THEN dt_request_w  ELSE null END ,
					ie_request_type_w,
					(to_char(r_c_procedimento.dt_procedimento, 'HH24MI'))::numeric ,
					nr_interno_conta_p,
					nr_voucher_w,
					substr(cd_user_insurance_w,10));
	end if;

	service_count := service_count + 1;

	select 	nextval('dbs_item_seq')
	into STRICT 	nr_sequencia_w
	;

	cd_service_count_w := cd_service_count_w + 1;

  	select	max(cd_imobilizado_ext)
	into STRICT	nr_lsp_w
	from	equipamento
	where	cd_equipamento = r_c_procedimento.cd_equipamento;


	select	cd_procedimento_loc,
	lpad(cd_service_count_w, 3, '0')
	into STRICT 	cd_mbs_code_w ,cd_service_code_w
	from	procedimento
	where  	cd_procedimento = r_c_procedimento.cd_procedimento
	and 	ie_origem_proced = r_c_procedimento.ie_origem_proced;

	cd_service_code_w := 'Q' || cd_service_code_w;

  	if ((ie_restrictive_w IS NOT NULL AND ie_restrictive_w::text <> '') and ie_restrictive_w not in ('SP','NR','NC')) then
		CALL generate_inco_eclipse(nr_interno_conta_p, 1, 'Tasy does not allow an invalid RestrictiveOverrideCde to be used', nm_usuario_p);
	end if;


	select	obtain_price_rebate(r_c_procedimento.cd_procedimento) * 100
	into STRICT 	vl_rebate_value;

	if (vl_rebate_value = 0) then
		vl_rebate_value := r_c_procedimento.vl_procedimento;
	end if;



	insert into dbs_item(
				nr_sequencia,
				nr_seq_voucher,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				dt_accession,
				ie_aftercare,
				vl_charge,
				dt_collection,
				ie_duplicate,
				cd_equipament,
				qt_service,
				ie_hospital,
				cd_item,
				cd_scp,
				nr_lsp,
				ie_multiple,
				qt_patients,
				ie_restrictive,
				ie_rule,
				ie_s4b3,
				ie_selfdeemed,
				ds_service,
				qt_duration,
				nr_seq_proc,
				cd_service_id)
		values (
				nr_sequencia_w,
				dbs_voucher_seq_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				CASE WHEN ie_service_type_p='P' THEN r_c_procedimento.DT_INICIO_PROCEDIMENTO  ELSE null END ,
				ie_aftercare_w,
				CASE WHEN vl_rebate_value=0 THEN nr_rebat_val_eclipse  ELSE vl_rebate_value END ,
				dt_medical_report_w,
				'N',
				CASE WHEN ie_service_type_p ='S' THEN r_c_procedimento.cd_equipamento  ELSE null END ,
				CASE WHEN nr_field_quantity_w=0 THEN null   ELSE nr_field_quantity_w END ,
				'Y' ,
				cd_mbs_code_w,
				CASE WHEN ie_service_type_p ='P' THEN r_c_procedimento.cd_setor_externo  ELSE null END ,
				nr_lsp_w,
				ie_multiple_procedure_w,
				qt_patients_w,
				ie_restrictive_w,
				ie_rule_w,
				ie_s4b3_w,
				ie_selfdeemed_w,
				substr(r_c_procedimento.ds_observacao, 1,50),
				CASE WHEN nr_field_quantity_w=0 THEN r_c_procedimento.qt_duracao  ELSE null END ,
				r_c_procedimento.nr_sequencia,
				cd_service_code_w
			);
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE get_dbs_voucher ( nr_seq_dbs_p bigint, nr_interno_conta_p bigint, nm_usuario_p text, ie_validate_p text, ie_service_type_p text, nr_trans_id_p text, cd_claim_p text) FROM PUBLIC;

