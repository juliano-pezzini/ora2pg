-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE copiar_cadastro_agenda_servico (cd_estabelecimento_p bigint, ds_agenda_p text, cd_setor_atendimento_p bigint, ds_observacao_p text, ds_complemento_p text, qt_dia_historico_p bigint, ie_classificacao_p text, ie_feriado_p text, ie_gerar_solic_pront_p text, cd_medico_p text, nr_seq_agenda_copia_p bigint, ie_turno_p text, ie_classificacao_turno_p text, ie_convenio_turno_p text, ie_permissao_p text, ie_bloqueio_p text, nm_usuario_p text, cd_especialidade_p bigint, nr_seq_nova_agenda_p INOUT bigint, ie_regra_perm_p text default 'N', ie_turno_regra_perm_p text default 'N') AS $body$
DECLARE

						
cd_agenda_w			bigint;

/* variaveis do turno */

nr_seq_turno_w			bigint;
nr_seq_turno_copia_w		bigint;
ie_dia_semana_w			smallint;
hr_inicial_w			timestamp;
hr_final_w			timestamp;
nr_minuto_intervalo_w		bigint;
ie_encaixe_w			varchar(1);
ie_frequencia_w			varchar(15);

/* variaveis da classificacao do turno */

agenda_turno_classif_w  agenda_turno_classif%rowtype;


/* variaveis do convenio do turno */

nr_seq_conv_w			bigint;
hr_inicial_conv_w		timestamp;
cd_convenio_w			bigint;
ie_atende_convenio_w		varchar(1);
ie_dia_semana_conv_w		smallint;
qt_permissao_w			bigint;
pr_permissao_w			bigint;
ie_tipo_convenio_w		bigint;

/* variaveis da permissao */

nr_seq_permissao_w		bigint;
ie_paciente_w			varchar(1);
ie_atendimento_w		varchar(1);
ie_evolucao_w			varchar(1);
ie_protocolo_w			varchar(1);
ie_receita_w			varchar(1);
ie_solic_exame_w		varchar(1);
ie_agenda_w			varchar(1);
ie_resultado_w			varchar(1);
ie_consulta_w			varchar(1);
ie_fechar_atend_w		varchar(1);
ie_med_padrao_w			varchar(1);
ie_exame_padrao_w		varchar(1);
ie_permissao_w			varchar(1);
ie_config_relat_w		varchar(1);
ie_grupo_medico_w		varchar(1);
ie_diagnostico_w		varchar(1);
ie_texto_adicional_w		varchar(1);
ie_referencia_w			varchar(1);
ie_eis_w			varchar(1);
ie_enderecos_w			varchar(1);
ie_texto_padrao_w		varchar(1);
ie_parametro_w			varchar(1);
ie_config_agenda_w		varchar(1);
cd_pessoa_permissao_w		varchar(10);
cd_agenda_permissao_w		bigint;
cd_perfil_w			integer;
cd_setor_atendimento_w		integer;
ie_permite_excluir_agenda_w	varchar(1);
ie_permite_bloquear_agenda_w    varchar(1);

/* variaveis do bloqueio */

nr_seq_bloqueio_w		bigint;
dt_inicial_bloqueio_w		timestamp;
dt_final_bloqueio_w		timestamp;
ie_motivo_bloqueio_w		agenda_bloqueio.ie_motivo_bloqueio%type;
ds_observacao_bloqueio_w	varchar(255);
ie_dia_semana_bloqueio_w	integer;
hr_inicio_bloqueio_w		timestamp;
hr_final_bloqueio_w		timestamp;
ie_valor_normal_w		varchar(1);
ie_profissional_w		agenda.ie_profissional%type;
ie_exige_sessao_w		agenda.ie_exige_sessao%type;

/* variaveis do cadastro da agenda*/

ie_ordenacao_w			varchar(10);

/* variaveis da regra de permissao de realizacao de exames*/

nr_seq_regra_atual_w		ageserv_proced_permissao.nr_sequencia%type;
nr_seq_regra_exa_w			ageserv_proced_permissao.nr_sequencia%type;
cd_procedimento_w			ageserv_proced_permissao.cd_procedimento%type;
ds_mensagem_w				ageserv_proced_permissao.ds_mensagem%type;
ie_origem_proced_w			ageserv_proced_permissao.ie_origem_proced%type;
ie_situacao_w				ageserv_proced_permissao.ie_situacao%type;
ie_somente_proced_adic_w	ageserv_proced_permissao.ie_somente_proced_adic%type;
nr_seq_exame_w				ageserv_proced_permissao.nr_seq_exame%type;
nr_seq_proc_interno_w		ageserv_proced_permissao.nr_seq_proc_interno%type;

/* variaveis do turno da regra de permissao de realizacao de exames*/

nr_seq_turno_perm_w			ageserv_proced_perm_turno.nr_sequencia%type;
dt_dia_semana_w				ageserv_proced_perm_turno.dt_dia_semana%type;
hr_final_regra_w					ageserv_proced_perm_turno.hr_final%type;
hr_inicial_regra_w				ageserv_proced_perm_turno.hr_inicial%type;

/* dados do turno */

c01 CURSOR FOR
SELECT	nr_sequencia,
	ie_dia_semana,
	hr_inicial,
	hr_final,
	nr_minuto_intervalo,
	ie_encaixe,
	ie_frequencia
from	agenda_turno
where	cd_agenda	= nr_seq_agenda_copia_p;

/* dados da classificacao do turno */

c02 CURSOR FOR
SELECT  *
from	agenda_turno_classif
where	nr_seq_turno	= nr_seq_turno_copia_w;


/* dados do convenio do turno */

c03 CURSOR FOR
SELECT	hr_inicial,
	cd_convenio,
	ie_atende_convenio,
	ie_dia_semana,
	qt_permissao,
	pr_permissao,
	ie_tipo_convenio
from	agenda_turno_conv
where	nr_seq_turno	= nr_seq_turno_copia_w;

/* dados da permissao */

c04 CURSOR FOR
SELECT	ie_paciente,
	ie_atendimento,
	ie_evolucao,
	ie_protocolo,
	ie_receita,
	ie_solic_exame,
	ie_agenda,
	ie_resultado,
	ie_consulta,
	ie_fechar_atend,
	ie_med_padrao,
	ie_exame_padrao,
	ie_permissao,
	ie_config_relat,
	ie_grupo_medico,
	ie_diagnostico,
	ie_texto_adicional,
	ie_referencia,
	ie_eis,
	ie_enderecos,
	ie_texto_padrao,
	ie_parametro,
	ie_config_agenda,
	cd_pessoa_fisica,
	cd_perfil,
	cd_setor_atendimento,
	ie_permite_excluir_agenda,
	ie_permite_bloquear_agenda,
	ie_valor_normal
from	med_permissao
where	cd_agenda	= nr_seq_agenda_copia_p;

/* dados do bloqueio */

c05 CURSOR FOR
SELECT	dt_inicial,
	dt_final,
	ie_motivo_bloqueio,
	ds_observacao,
	ie_dia_semana,
	hr_inicio_bloqueio,
	hr_final_bloqueio
from	agenda_bloqueio
where	cd_agenda	= nr_seq_agenda_copia_p;

/* dados da regra de permissao de realizacao de exames */

c06 CURSOR FOR
SELECT	nr_sequencia,
	cd_procedimento,
	ds_mensagem,
	ie_origem_proced,
	ie_permissao,
	ie_situacao,
	ie_somente_proced_adic,
	nr_seq_exame,
	nr_seq_proc_interno
from	ageserv_proced_permissao
where	cd_agenda	= nr_seq_agenda_copia_p;

/* dados do turno da regra de permissao de realizacao de exames */

c07 CURSOR FOR
SELECT	dt_dia_semana,
	hr_final,
	hr_inicial
from	ageserv_proced_perm_turno
where	nr_seq_perm_exa	= nr_seq_regra_atual_w;


BEGIN

if (ds_agenda_p IS NOT NULL AND ds_agenda_p::text <> '') and (nr_seq_agenda_copia_p IS NOT NULL AND nr_seq_agenda_copia_p::text <> '') then

	/* obter sequencia */

	select	nextval('agenda_seq')
	into STRICT	cd_agenda_w
	;

	/*obter dados da agenda que foi selecionada para a copia das configuracoes*/

	select	max(ie_ordenacao),
			coalesce(max(ie_profissional),'N'),
			coalesce(max(ie_exige_sessao),'S')
	into STRICT	ie_ordenacao_w,
			ie_profissional_w,
			ie_exige_sessao_w
	from	agenda
	where	cd_agenda	= nr_seq_agenda_copia_p;
	
	insert into agenda(
				cd_agenda,
				ds_agenda,
				cd_tipo_agenda,
				ie_feriado,
				nm_usuario,
				dt_atualizacao,
				ds_observacao,
				cd_setor_exclusivo,
				qt_dia_historico,
				ie_situacao,
				cd_estabelecimento,
				ds_complemento,
				ie_medico_executor,
				hr_quebra_turno,
				qt_min_quebra_turno,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_gerar_sobra_horario,
				ie_gerar_solic_pront,
				ie_classificacao,
				ie_gerar_solic_pront_gp,
				ie_ordenacao,
				cd_especialidade,
				IE_MEDICO_REQUISITANTE,
				IE_TIPO_AGENDA_CONSULTA,
				ie_profissional,
				ie_exige_sessao
				)
			values (
				cd_agenda_w,
				ds_agenda_p,
				5,
				ie_feriado_p,
				nm_usuario_p,
				clock_timestamp(),
				ds_observacao_p,
				cd_setor_atendimento_p,
				qt_dia_historico_p,
				'A',
				cd_estabelecimento_p,
				ds_complemento_p,
				'N',
				'12',
				'00',
				clock_timestamp(),
				nm_usuario_p,
				'N',
				ie_gerar_solic_pront_p,
				ie_classificacao_p,
				'N',
				ie_ordenacao_w,
				cd_especialidade_p,
				'S',
				'A',
				ie_profissional_w,
				ie_exige_sessao_w
				);
	
	/* inserir dados do turno */

	if (coalesce(ie_turno_p,'N') = 'S') then
		open c01;
		loop
		fetch c01 into	nr_seq_turno_copia_w,
					ie_dia_semana_w,
					hr_inicial_w,
					hr_final_w,
					nr_minuto_intervalo_w,
					ie_encaixe_w,
					ie_frequencia_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			select	nextval('agenda_turno_seq')
			into STRICT	nr_seq_turno_w
			;
	
			insert into agenda_turno(
							cd_agenda,
							ie_dia_semana,
							hr_inicial,
							hr_final,
							nr_minuto_intervalo,
							nm_usuario,
							dt_atualizacao,
							ie_encaixe,
							nr_sequencia,
							ie_frequencia
							)
						values (
							cd_agenda_w,
							ie_dia_semana_w,
							hr_inicial_w,
							hr_final_w,
							nr_minuto_intervalo_w,
							nm_usuario_p,
							clock_timestamp(),
							ie_encaixe_w,
							nr_seq_turno_w,
							ie_frequencia_w
							);

			/* inserir dados da classificacao do turno */

			if (coalesce(ie_classificacao_turno_p,'N') = 'S') then
				open c02;
				loop
				fetch c02 into	
                    agenda_turno_classif_w;

					EXIT WHEN NOT FOUND; /* apply on c02 */
					begin

					select	nextval('agenda_turno_classif_seq'),
                            clock_timestamp(),
                            nm_usuario_p,
                            clock_timestamp(),
                            nm_usuario_p,
                            nr_seq_turno_w
					into STRICT	agenda_turno_classif_w.nr_sequencia,
                            agenda_turno_classif_w.dt_atualizacao_nrec,
                            agenda_turno_classif_w.nm_usuario_nrec,
                            agenda_turno_classif_w.dt_atualizacao,
                            agenda_turno_classif_w.nm_usuario,
                            agenda_turno_classif_w.nr_seq_turno
					;

					insert into agenda_turno_classif values (agenda_turno_classif_w.*);
					end;	
				end loop;
				close c02;
			end if;


			/* inserir dados do convenio do turno */

			if (coalesce(ie_convenio_turno_p,'N') = 'S') then
				open c03;
				loop
				fetch c03 into	hr_inicial_conv_w,
							cd_convenio_w,
							ie_atende_convenio_w,
							ie_dia_semana_conv_w,
							qt_permissao_w,
							pr_permissao_w,
							ie_tipo_convenio_w;
					EXIT WHEN NOT FOUND; /* apply on c03 */
					begin
					select	nextval('agenda_turno_conv_seq')
					into STRICT	nr_seq_conv_w
					;
	
					insert into agenda_turno_conv(
										nr_sequencia,
										cd_agenda,
										hr_inicial,
										cd_convenio,
										dt_atualizacao,
										nm_usuario,
										ie_atende_convenio,
										ie_dia_semana,
										nr_seq_turno,
										qt_permissao,
										pr_permissao,
										ie_tipo_convenio										
										)
									values (
										nr_seq_conv_w,
										cd_agenda_w,
										hr_inicial_conv_w,
										cd_convenio_w,
										clock_timestamp(),
										nm_usuario_p,
										ie_atende_convenio_w,
										ie_dia_semana_conv_w,
										nr_seq_turno_w,
										qt_permissao_w,
										pr_permissao_w,
										ie_tipo_convenio_w
										);
					end;
				end loop;
				close c03;
			end if;
			end;
		end loop;
		close c01;
	end if;
	

	/* inserir dados da permissao */

	if (coalesce(ie_permissao_p,'N') = 'S') then
		open c04;
		loop
		fetch c04 into	ie_paciente_w,
					ie_atendimento_w,
					ie_evolucao_w,
					ie_protocolo_w,
					ie_receita_w,
					ie_solic_exame_w,
					ie_agenda_w,
					ie_resultado_w,
					ie_consulta_w,
					ie_fechar_atend_w,
					ie_med_padrao_w,
					ie_exame_padrao_w,
					ie_permissao_w,
					ie_config_relat_w,
					ie_grupo_medico_w,
					ie_diagnostico_w,
					ie_texto_adicional_w,
					ie_referencia_w,
					ie_eis_w,
					ie_enderecos_w,
					ie_texto_padrao_w,
					ie_parametro_w,
					ie_config_agenda_w,
					cd_pessoa_permissao_w,
					cd_perfil_w,
					cd_setor_atendimento_w,
					ie_permite_excluir_agenda_w,
					ie_permite_bloquear_agenda_w,
					ie_valor_normal_w;
				EXIT WHEN NOT FOUND; /* apply on c04 */
				begin
				select	nextval('med_permissao_seq')
				into STRICT	nr_seq_permissao_w
				;

				insert into med_permissao(
								nr_sequencia,
 								dt_atualizacao,
 								nm_usuario,
 								ie_paciente,
	 							ie_atendimento,
								ie_evolucao,
	 							ie_protocolo,
 								ie_receita,
 								ie_solic_exame,
 								ie_agenda,
 								ie_resultado,
 								ie_consulta,
		 						ie_fechar_atend,
 								ie_med_padrao,
 								ie_exame_padrao,
 								ie_permissao,
 								ie_config_relat,
 								ie_grupo_medico,
 								ie_diagnostico,
		 						ie_texto_adicional,
 								ie_referencia,
 								ie_eis,
 								ie_enderecos,
 								ie_texto_padrao,
 								ie_parametro,
	 							ie_config_agenda,
	 							cd_pessoa_fisica,
 								cd_agenda,
 								cd_perfil,
 								cd_setor_atendimento,
 								ie_permite_excluir_agenda,
 								ie_permite_bloquear_agenda,
	 							dt_atualizacao_nrec,
	 							nm_usuario_nrec,
								ie_valor_normal
								)
							values (
								nr_seq_permissao_w,
								clock_timestamp(),
								nm_usuario_p,
								ie_paciente_w,
								ie_atendimento_w,
								ie_evolucao_w,
								ie_protocolo_w,
								ie_receita_w,
								ie_solic_exame_w,
								ie_agenda_w,
								ie_resultado_w,
								ie_consulta_w,
								ie_fechar_atend_w,
								ie_med_padrao_w,
								ie_exame_padrao_w,
								ie_permissao_w,
								ie_config_relat_w,
								ie_grupo_medico_w,
								ie_diagnostico_w,
								ie_texto_adicional_w,
								ie_referencia_w,
								ie_eis_w,
								ie_enderecos_w,
								ie_texto_padrao_w,
								ie_parametro_w,
								ie_config_agenda_w,
								cd_pessoa_permissao_w,
								cd_agenda_w,
								cd_perfil_w,
								cd_setor_atendimento_w,
								ie_permite_excluir_agenda_w,
								ie_permite_bloquear_agenda_w,
								clock_timestamp(),
								nm_usuario_p,
								ie_valor_normal_w
								);
				end;
		end loop;
		close c04;
	end if;

		/* inserir dados do bloqueio */

	if (coalesce(ie_bloqueio_p,'N') = 'S') then
		open c05;
		loop
		fetch c05 into	dt_inicial_bloqueio_w,
					dt_final_bloqueio_w,
					ie_motivo_bloqueio_w,
					ds_observacao_bloqueio_w,
					ie_dia_semana_bloqueio_w,
					hr_inicio_bloqueio_w,
					hr_final_bloqueio_w;
			EXIT WHEN NOT FOUND; /* apply on c05 */
			begin
			select	nextval('agenda_bloqueio_seq')
			into STRICT	nr_seq_bloqueio_w
			;
	
			insert into agenda_bloqueio(
							nr_sequencia,
							cd_agenda,
							dt_inicial,
							dt_final,
							ie_motivo_bloqueio,
							dt_atualizacao,
							nm_usuario,
							ds_observacao,
							ie_dia_semana,
							hr_inicio_bloqueio,
							hr_final_bloqueio
							)
						values (
							nr_seq_bloqueio_w,
							cd_agenda_w,
							dt_inicial_bloqueio_w,
							dt_final_bloqueio_w,
							ie_motivo_bloqueio_w,
							clock_timestamp(),
							nm_usuario_p,
							ds_observacao_bloqueio_w,
							ie_dia_semana_bloqueio_w,
							hr_inicio_bloqueio_w,
							hr_final_bloqueio_w
							);
			end;
		end loop;
		close c05;
	end if;						
	
		/* inserir dados regra de permissao de realizacao de exames */

	if (coalesce(ie_regra_perm_p,'N') = 'S') then
		open c06;
		loop
		fetch c06 into	nr_seq_regra_atual_w,
					cd_procedimento_w,
					ds_mensagem_w,
					ie_origem_proced_w,
					ie_permissao_w,
					ie_situacao_w,
					ie_somente_proced_adic_w,
					nr_seq_exame_w,
					nr_seq_proc_interno_w;
			EXIT WHEN NOT FOUND; /* apply on c06 */
			begin
			select	nextval('ageserv_proced_permissao_seq')
			into STRICT	nr_seq_regra_exa_w
			;
	
			insert into ageserv_proced_permissao(
							nr_sequencia,
							cd_agenda,
							cd_procedimento,
							ds_mensagem,
							dt_atualizacao,
							dt_atualizacao_nrec,
							ie_origem_proced,
							ie_permissao,
							ie_situacao,
							ie_somente_proced_adic,
							nm_usuario,
							nm_usuario_nrec,
							nr_seq_exame,
							nr_seq_proc_interno
							)
						values (
							nr_seq_regra_exa_w,
							cd_agenda_w,
							cd_procedimento_w,
							ds_mensagem_w,
							clock_timestamp(),
							clock_timestamp(),
							ie_origem_proced_w,
							ie_permissao_w,
							ie_situacao_w,
							ie_somente_proced_adic_w,
							nm_usuario_p,
							nm_usuario_p,
							nr_seq_exame_w,
							nr_seq_proc_interno_w
							);
							
			/* inserir dados do turno da regra de permissao de realizacao de exames */

			if (coalesce(ie_turno_regra_perm_p,'N') = 'S') then
				open c07;
				loop
				fetch c07 into	dt_dia_semana_w,
							hr_final_regra_w,
							hr_inicial_regra_w;
					EXIT WHEN NOT FOUND; /* apply on c07 */
					begin
					select	nextval('ageserv_proced_perm_turno_seq')
					into STRICT	nr_seq_turno_perm_w
					;
			
					insert into ageserv_proced_perm_turno(
									nr_sequencia,
									dt_atualizacao,
									dt_atualizacao_nrec,
									dt_dia_semana,
									hr_final,
									hr_inicial,
									nm_usuario,
									nm_usuario_nrec,
									nr_seq_perm_exa
									)
								values (
									nr_seq_turno_perm_w,
									clock_timestamp(),
									clock_timestamp(),
									dt_dia_semana_w,
									hr_final_regra_w,
									hr_inicial_regra_w,
									nm_usuario_p,
									nm_usuario_p,
									nr_seq_regra_exa_w
									);
					end;
				end loop;
				close c07;
			end if;	
			end;
		end loop;
		close c06;
	end if;									
end if;

nr_seq_nova_agenda_p	:= cd_agenda_w;

commit;
end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE copiar_cadastro_agenda_servico (cd_estabelecimento_p bigint, ds_agenda_p text, cd_setor_atendimento_p bigint, ds_observacao_p text, ds_complemento_p text, qt_dia_historico_p bigint, ie_classificacao_p text, ie_feriado_p text, ie_gerar_solic_pront_p text, cd_medico_p text, nr_seq_agenda_copia_p bigint, ie_turno_p text, ie_classificacao_turno_p text, ie_convenio_turno_p text, ie_permissao_p text, ie_bloqueio_p text, nm_usuario_p text, cd_especialidade_p bigint, nr_seq_nova_agenda_p INOUT bigint, ie_regra_perm_p text default 'N', ie_turno_regra_perm_p text default 'N') FROM PUBLIC;

