-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sec_copiar_paciente ( cd_medico_origem_p text, cd_medico_destino_p text, cd_pessoa_fisica_p text, ie_todos_paciente_p text, nm_usuario_p text) AS $body$
DECLARE

				 
 
ie_possui_med_cliente_w 	varchar(1);				
nm_usuario_w				varchar(15);				
nr_atend_w					bigint;
nr_atend_ant_w				bigint;
cd_convenio_w				bigint;
nr_seq_cliente_orig_w			bigint;
nr_seq_cliente_w			bigint;
cd_estabelecimento_w		smallint;
ie_nivel_atencao_w			varchar(1);
nr_seq_registro_novo_w		bigint;
erro_w						varchar(4000);
				
C01 CURSOR FOR 
	SELECT	a.* 
	from	med_cliente a 
	where	((ie_todos_paciente_p = 'N') and (a.cd_pessoa_fisica = cd_pessoa_fisica_p) and (a.cd_medico  =	cd_medico_origem_p)) 
	or	(ie_todos_paciente_p = 'S' AND a.cd_medico  =	cd_medico_origem_p) 
	order by nr_sequencia;
	
Vet01 C01%RowType;

 
C02 CURSOR FOR 
	SELECT	a.* 
	from	atendimento_paciente a, 
			med_paciente_Atend b 
	where	a.nr_atendimento = b.nr_atendimento 
	and		b.nr_seq_cliente = nr_seq_cliente_orig_w;
	
Vet02 C02%RowType;

 
C03 CURSOR FOR 
	SELECT	a.* 
	from	evolucao_paciente a 
	where	a.nr_atendimento = nr_atend_ant_w;
	
Vet03 C03%RowType;

C04 CURSOR FOR 
	SELECT	a.* 
	from	pedido_exame_externo a 
	where	a.nr_atendimento = nr_atend_ant_w;
	
Vet04 C04%RowType;

C05 CURSOR FOR 
	SELECT	a.* 
	from	atestado_paciente a 
	where	a.nr_atendimento = nr_atend_ant_w;
	
Vet05 C05%RowType;

C06 CURSOR FOR 
	SELECT	a.* 
	from	med_receita a 
	where	a.nr_atendimento = nr_atend_ant_w;
	
Vet06 C06%RowType;
	
C07 CURSOR FOR 
	SELECT	a.* 
	from	fa_receita_farmacia a 
	where	a.nr_atendimento = nr_atend_ant_w;
	
Vet07 C07%RowType;

C08 CURSOR FOR 
	SELECT	a.* 
	from	EXAME_LAB_RESULTADO a 
	where	a.nr_atendimento = nr_atend_ant_w;
	
Vet08 C08%RowType;
	
	 
	 
	 

BEGIN 
 
 
begin 
 
nm_usuario_w := wheb_usuario_pck.get_nm_usuario;
ie_nivel_atencao_w := wheb_assist_pck.get_nivel_atencao_perfil;
 
 
 
open C01;
loop 
fetch C01 into 
	Vet01;
EXIT WHEN NOT FOUND; /* apply on C01 */
begin 
 
	 
 
	nr_seq_cliente_orig_w := Vet01.nr_sequencia;
 
	select coalesce(max('S'),'N') 
	into STRICT	ie_possui_med_cliente_w 
	from	med_cliente 
	where	cd_pessoa_fisica = Vet01.cd_pessoa_fisica 
	and		cd_medico =	 cd_medico_destino_p;
	 
	if (ie_possui_med_cliente_w = 'N') then 
 
		select	nextval('med_cliente_seq') 
		into STRICT	nr_seq_cliente_w	 
		;
		 
		insert	into med_cliente(nr_sequencia, 
			cd_medico, 
			cd_pessoa_fisica, 
			dt_atualizacao, 
			nm_usuario, 
			ie_situacao, 
			dt_primeira_consulta, 
			dt_ultima_consulta, 
			dt_ultima_atualiz, 
			cd_convenio, 
			cd_usuario_convenio, 
			ds_encaminhamento, 
			dt_validade_carteira, 
			ie_ficha_papel, 
			ie_exame_consultorio, 
			dt_ultima_visualiz, 
			ie_exame_virtual, 
			nr_seq_plano, 
			ds_observacao, 
			nr_seq_classif, 
			ie_gemelar, 
			ie_pais_separados) 
			SELECT	nr_seq_cliente_w, 
				cd_medico_destino_p, 
				Vet01.cd_pessoa_fisica, 
				clock_timestamp(), 
				nm_usuario_w, 
				Vet01.ie_situacao, 
				Vet01.dt_primeira_consulta, 
				Vet01.dt_ultima_consulta, 
				Vet01.dt_ultima_atualiz, 
				Vet01.cd_convenio, 
				Vet01.cd_usuario_convenio, 
				Vet01.ds_encaminhamento, 
				Vet01.dt_validade_carteira, 
				Vet01.ie_ficha_papel, 
				Vet01.ie_exame_consultorio, 
				Vet01.dt_ultima_visualiz, 
				Vet01.ie_exame_virtual, 
				Vet01.nr_seq_plano, 
				Vet01.ds_observacao, 
				Vet01.nr_seq_classif, 
				Vet01.ie_gemelar, 
				Vet01.ie_pais_separados 
			from	med_cliente 
			where	nr_sequencia = Vet01.NR_SEQUENCIA;
			 
	 end if;
	 
	-- Atendimentos 
	open C02;
	loop 
	fetch C02 into 
		Vet02;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		 
		nr_atend_ant_w	:= Vet02.nr_atendimento;
		 
		select	nextval('atendimento_paciente_seq') 
		into STRICT	nr_atend_w 
		;
 
		select	max(cd_estabelecimento) 
		into STRICT	cd_estabelecimento_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atend_ant_w;
 
 
		cd_convenio_w	:= obter_convenio_atendimento(nr_atend_ant_w);		
		 
		insert	into atendimento_paciente(nr_atendimento, 
			cd_pessoa_fisica, 
			cd_estabelecimento, 
			cd_procedencia, 
			dt_entrada, 
			ie_tipo_atendimento, 
			dt_atualizacao, 
			nm_usuario, 
			cd_medico_resp, 
			cd_motivo_alta, 
			ds_sintoma_paciente, 
			ds_observacao, 
			dt_alta, 
			ie_clinica, 
			nm_usuario_atend, 
			ie_responsavel, 
			dt_fim_conta, 
			ie_fim_conta, 
			nr_cat, 
			ds_causa_externa, 
			cd_cgc_seguradora, 
			nr_bilhete, 
			nr_serie_bilhete, 
			ie_carater_inter_sus, 
			ie_vinculo_sus, 
			ie_tipo_convenio, 
			ie_tipo_atend_bpa, 
			ie_grupo_atend_bpa, 
			cd_medico_atendimento, 
			dt_alta_interno, 
			nr_seq_unid_atual, 
			nr_seq_unid_int, 
			nr_atend_original, 
			qt_dia_longa_perm, 
			dt_inicio_atendimento, 
			ie_permite_visita, 
			ie_status_atendimento, 
			dt_previsto_alta, 
			nm_usuario_alta, 
			cd_pessoa_responsavel, 
			dt_atend_medico, 
			dt_fim_consulta, 
			dt_medicacao, 
			dt_saida_real, 
			ie_clinica_alta, 
			dt_lib_medico, 
			nr_seq_regra_funcao, 
			nr_seq_local_pa, 
			nr_seq_tipo_acidente, 
			dt_ocorrencia, 
			ds_pend_autorizacao, 
			cd_motivo_alta_medica, 
			nr_seq_forma_laudo, 
			nr_seq_check_list, 
			dt_fim_triagem, 
			nr_reserva_leito, 
			ie_paciente_isolado, 
			ie_permite_visita_rel, 
			ds_senha, 
			ie_probabilidade_alta, 
			nr_seq_forma_chegada, 
			nr_seq_indicacao, 
			cd_pessoa_indic, 
			ie_nivel_atencao) 
		(SELECT	nr_atend_w, 
			Vet01.cd_pessoa_fisica, 
			cd_estabelecimento, 
			cd_procedencia, 
			dt_entrada, 
			ie_tipo_atendimento, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_medico_destino_p, 
			null, 
			ds_sintoma_paciente, 
			ds_observacao, 
			null, 
			ie_clinica, 
			nm_usuario_atend, 
			5, 
			dt_fim_conta, 
			ie_fim_conta, 
			nr_cat, 
			ds_causa_externa, 
			cd_cgc_seguradora, 
			nr_bilhete, 
			nr_serie_bilhete, 
			ie_carater_inter_sus, 
			ie_vinculo_sus, 
			ie_tipo_convenio, 
			ie_tipo_atend_bpa, 
			ie_grupo_atend_bpa, 
			cd_medico_atendimento, 
			null, 
			nr_seq_unid_atual, 
			nr_seq_unid_int, 
			nr_atend_original, 
			qt_dia_longa_perm, 
			dt_inicio_atendimento, 
			ie_permite_visita, 
			ie_status_atendimento, 
			null, 
			null, 
			Vet01.cd_pessoa_fisica, 
			dt_atend_medico, 
			dt_fim_consulta, 
			dt_medicacao, 
			dt_saida_real, 
			null, 
			dt_lib_medico, 
			nr_seq_regra_funcao, 
			nr_seq_local_pa, 
			nr_seq_tipo_acidente, 
			dt_ocorrencia, 
			ds_pend_autorizacao, 
			null, 
			nr_seq_forma_laudo, 
			nr_seq_check_list, 
			dt_fim_triagem, 
			nr_reserva_leito, 
			'N', 
			ie_permite_visita_rel, 
			ds_senha, 
			null, 
			nr_seq_forma_chegada, 
			nr_seq_indicacao, 
			cd_pessoa_indic, 
			ie_nivel_atencao_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atend_ant_w);
 
		commit;
		 
		-- Evoluções 
		open C03;
		loop 
		fetch C03 into 
			Vet03;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin 
			 
			insert into evolucao_paciente( 
						cd_evolucao, 
						dt_evolucao, 
						ie_tipo_evolucao, 
						cd_pessoa_fisica, 
						dt_atualizacao, 
						nm_usuario, 
						nr_atendimento, 
						ds_evolucao, 
						cd_medico, 
						ie_evolucao_clinica, 
						cd_setor_atendimento, 
						cd_especialidade, 
						cd_medico_parecer, 
						qt_peso, 
						qt_altura, 
						qt_superf_corporia, 
						cd_topografia, 
						cd_tumor_prim_pat, 
						cd_linfonodo_reg_pat, 
						cd_metastase_dist_pat, 
						cd_estadio_outro, 
						dt_inicio_trat_proposto, 
						dt_final_trat_proposto, 
						cd_estado_doenca, 
						ie_estado_pac_fim_trat, 
						ie_recem_nato, 
						nr_cirurgia, 
						ie_situacao, 
						ie_nivel_atencao) 
			values (nextval('evolucao_paciente_seq'), 
						clock_timestamp(), 
						Vet03.ie_tipo_evolucao, 
						Vet03.cd_pessoa_fisica, 
						Vet03.dt_atualizacao, 
						nm_usuario_w, 
						nr_atend_w, 
						Vet03.ds_evolucao, 
						cd_medico_destino_p, 
						Vet03.ie_evolucao_clinica, 
						Vet03.cd_setor_atendimento, 
						Vet03.cd_especialidade, 
						Vet03.cd_medico_parecer, 
						Vet03.qt_peso, 
						Vet03.qt_altura, 
						Vet03.qt_superf_corporia, 
						Vet03.cd_topografia, 
						Vet03.cd_tumor_prim_pat, 
						Vet03.cd_linfonodo_reg_pat, 
						Vet03.cd_metastase_dist_pat, 
						Vet03.cd_estadio_outro, 
						Vet03.dt_inicio_trat_proposto, 
						Vet03.dt_final_trat_proposto, 
						Vet03.cd_estado_doenca, 
						Vet03.ie_estado_pac_fim_trat, 
						Vet03.ie_recem_nato, 
						Vet03.nr_cirurgia, 
						Vet03.ie_situacao, 
						ie_nivel_atencao_w);
			 
			end;
		end loop;	
		close C03;
		 
		-- Solicitação de exames externos 
		open C04;
		loop 
		fetch C04 into 
			Vet04;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin	 
		 
			CALL Duplicar_Solic_Exame_Externo(Vet04.nr_sequencia,nm_usuario_w,nr_atend_w,cd_medico_destino_p);
		 
			end;
		end loop;	
		close C04;
		 
		-- Atestados 
		open C05;
		loop 
		fetch C05 into 
			Vet05;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin	 
		 
			nr_seq_registro_novo_w := Duplicar_Atestado(Vet05.nr_sequencia, cd_medico_destino_p, nr_atend_w, nm_usuario_w, nr_seq_registro_novo_w);
		 
			end;
		end loop;	
		close C05;
		 
		-- Receita 
		open C06;
		loop 
		fetch C06 into 
			Vet06;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin	 
		 
			CALL Duplicar_Receita(Vet06.nr_sequencia, nr_atend_w, cd_medico_destino_p, nm_usuario_w);
		 
			end;
		end loop;	
		close C06;
		 
		-- Receita ambulatorial 
		open C07;
		loop 
		fetch C07 into 
			Vet07;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin	 
		 
			nr_seq_registro_novo_w := fa_duplicar_receita(Vet07.nr_sequencia, nr_atend_w, nm_usuario_w, nr_seq_registro_novo_w, cd_medico_destino_p);
		 
			end;
		end loop;	
		close C07;
		 
		-- Resultado exames 
		open C08;
		loop 
		fetch C08 into 
			Vet08;
		EXIT WHEN NOT FOUND; /* apply on C08 */
			begin	 
		 
			CALL Duplicar_exame_lab_externo(Vet08.nr_seq_resultado, nm_usuario_w, nr_atend_w,cd_medico_destino_p);
		 
			end;
		end loop;	
		close C08;
				 
		 
		end;
	end loop;	
	close C02;
 
end;
end loop;	
close C01;
commit;
 
exception 
	when others then 
	erro_w := substr(obter_desc_expressao(773186)||chr(10)||chr(13)||sqlerrm,1,4000);	
	CALL exibir_erro_abortar(erro_w,773186);	
end;
	 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sec_copiar_paciente ( cd_medico_origem_p text, cd_medico_destino_p text, cd_pessoa_fisica_p text, ie_todos_paciente_p text, nm_usuario_p text) FROM PUBLIC;

