-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_cot_compra_bionexo ( nr_seq_cabecalho_p bigint, nr_cot_compra_p INOUT bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_cot_compra_w				bigint;
cd_cnpj_w				varchar(14);
cd_forma_pagamento_w			bigint;
ds_observacao_w				varchar(4000);
ie_frete_w				varchar(15);
qt_prazo_entrega_w			bigint;
cd_produto_w				varchar(80);
nr_artigo_w				varchar(80);
qt_quantidade_w				double precision;
nr_seq_item_w				bigint;
dt_entrega_w				timestamp;
qt_entrega_w				double precision;
cd_comprador_padrao_w			varchar(10);
cd_pessoa_solicitante_w			varchar(10);
cd_moeda_w				integer;
cd_condicao_pagto_w			bigint;
ds_comentario_w				varchar(4000);
ds_embalagem_w				varchar(255);
ds_fabricante_w				varchar(255);
vl_preco_total_w			double precision;
vl_preco_unitario_w			double precision;
nr_item_cot_compra_w			integer;
cd_unidade_medida_compra_w		varchar(30);
nr_seq_cot_compra_forn_w		bigint;
nr_sequencia_item_w			bigint;
nr_seq_fornec_w				bigint;
ie_forma_calc_entrega_w			varchar(1);
nr_requisicao_w				bigint;
qt_registros_w				bigint;
ie_continua_w				varchar(1) := 'S';
cd_estabelecimento_w			bigint;
ds_erro_w				varchar(255);
nr_contrato_w				bigint;
nr_solic_compra_w			bigint;
nr_item_solic_compra_w			bigint;
qt_material_solic_w			double precision;
ie_selecionado_w			varchar(1);
cd_estab_solic_w			bigint;
ie_cadastra_marca_imp_cot_w		varchar(1);
nr_seq_marca_w				marca.nr_sequencia%type;
nr_seq_tipo_marca_w			parametro_compras.nr_seq_tipo_marca%type;
cd_curp_w				pessoa_juridica.cd_curp%type := '';
cd_rfc_w				pessoa_juridica.cd_rfc%type := '';
ie_campo_cnpj_w				varchar(15) := 'CNPJ';
sg_estado_w				pessoa_juridica.sg_estado%type;
cd_tipo_pessoa_w			smallint;
cd_cep_w				varchar(15);
cd_estab_w				smallint;
ds_razao_social_w			w_bionexo_fornec.ds_razao_social%type;
qt_mat_integrados_w		solic_compra_item.qt_material%type;
qt_retorno_bionexo_w	w_bionexo_item.qt_quantidade%type;

C01 CURSOR FOR
SELECT	b.cd_cnpj,
	b.ds_razao_social,
	b.cd_forma_pagamento,
	substr(b.ds_observacao,1,2000),
	substr(b.ie_frete,1,1),
	b.qt_prazo_entrega
from	w_bionexo_fornec b
where	b.nr_seq_cabecalho = nr_seq_cabecalho_p;

C02 CURSOR FOR
SELECT	c.cd_produto,
	c.nr_artigo,
	c.qt_quantidade,
	c.nr_sequencia
from	w_bionexo_item c
where	c.nr_seq_cabecalho = nr_seq_cabecalho_p;
	
C03 CURSOR FOR
SELECT	distinct e.dt_entrega,
	e.qt_entrega
from	w_bionexo_item_entrega e
where	e.nr_seq_item = nr_seq_item_w;
	
C04 CURSOR FOR
SELECT	distinct
	a.cd_produto,
	a.nr_artigo,
	a.nr_sequencia,
	a.qt_quantidade,
	b.cd_cnpj,
	b.ds_comentario,
	b.ds_embalagem,
	b.ds_fabricante,
	b.vl_preco_total,
	b.vl_preco_unitario,
	b.ie_selecionado
from	w_bionexo_item a,
	w_bionexo_item_resposta b
where	a.nr_Sequencia = b.nr_seq_item
and	a.nr_seq_cabecalho = nr_seq_cabecalho_p;

c05 CURSOR FOR
SELECT	(substr(nr_requisicao,1,10))::numeric ,
	(substr(nr_requisicao,11,10))::numeric ,
	qt_quantidade
from	w_bionexo_item_individual
where	nr_seq_item = nr_seq_item_w;

C06 CURSOR FOR
SELECT	cd_estabelecimento
from	estabelecimento
where	ie_situacao = 'A';



BEGIN
ie_continua_w := 'S';

select	coalesce(max(nr_requisicao),0)
into STRICT	nr_requisicao_w
from	w_bionexo_cabecalho
where	nr_sequencia = nr_seq_cabecalho_p;

select	count(*)
into STRICT	qt_registros_w
from	solic_compra
where	nr_solic_compra = nr_requisicao_w;

select	sum(coalesce(qt_material,0))
into STRICT	qt_mat_integrados_w
from	solic_compra_item
where	obter_se_integra_sc_item(nr_solic_compra, cd_material) = 'S'
and		nr_solic_compra =nr_requisicao_w;

select	sum(coalesce(c.qt_quantidade,0))
into STRICT	qt_retorno_bionexo_w
from	w_bionexo_item c
where	c.nr_seq_cabecalho = nr_seq_cabecalho_p;

if (coalesce(qt_retorno_bionexo_w,0) > coalesce(qt_mat_integrados_w,0)) then
		CALL gravar_log_bionexo(nr_requisicao_w, 'ER',wheb_mensagem_pck.get_texto(800184), nm_usuario_p);
		ie_continua_w := 'N';
		commit;
end if;

if (qt_registros_w > 0) then

	delete from w_bionexo_log
	where nr_solic_compra = nr_requisicao_w;

	select	a.cd_pessoa_solicitante,
		coalesce(a.cd_comprador_resp, b.cd_comprador_padrao),
		b.cd_moeda_padrao,
		a.cd_estabelecimento,
		coalesce(b.ie_cadastra_marca_imp_cot,'N'),
		b.nr_seq_tipo_marca
	into STRICT	cd_pessoa_solicitante_w,
		cd_comprador_padrao_w,
		cd_moeda_w,
		cd_estabelecimento_w,
		ie_cadastra_marca_imp_cot_w,
		nr_seq_tipo_marca_w
	from	solic_compra a,
		parametro_compras b
	where	a.cd_estabelecimento = b.cd_estabelecimento
	and	a.nr_solic_compra = nr_requisicao_w;
	
	if (coalesce(cd_comprador_padrao_w::text, '') = '') then
		CALL gravar_log_bionexo(nr_requisicao_w, 'ER', wheb_mensagem_pck.get_texto(800185), nm_usuario_p);
		ie_continua_w := 'N';		
		commit;
	end if;
	
	if (coalesce(cd_moeda_w::text, '') = '') then
		CALL gravar_log_bionexo(nr_requisicao_w, 'ER', wheb_mensagem_pck.get_texto(800186), nm_usuario_p);
		ie_continua_w := 'N';
		commit;
	end if;
	
	if (ie_continua_w = 'S') then
 	
		select	nextval('cot_compra_seq')
		into STRICT	nr_cot_compra_w
		;
	
		begin
		insert into cot_compra(
			cd_comprador,
			dt_atualizacao,
			dt_cot_compra,
			nm_usuario,
			nr_cot_compra,
			nr_documento_externo,
			cd_estabelecimento,
			cd_pessoa_solicitante)
		SELECT	cd_comprador_padrao_w,
			clock_timestamp(),
			clock_timestamp(),
			nm_usuario_p,
			nr_cot_compra_w,
			nr_pdc,
			cd_estabelecimento_w,
			cd_pessoa_solicitante_w
		from 	w_bionexo_cabecalho
		where	nr_sequencia = nr_seq_cabecalho_p;
		exception
		when others then
			ds_erro_w := sqlerrm;
			CALL gravar_log_bionexo(nr_requisicao_w, 'ER',substr(wheb_mensagem_pck.get_texto(800187) || ds_erro_w,1,255), nm_usuario_p);
			ie_continua_w := 'N';
			commit;
		end;
		
		if (ie_continua_w = 'S') then
			
			open C02;
			loop
			fetch C02 into	
				cd_produto_w,
				nr_artigo_w,
				qt_quantidade_w,
				nr_seq_item_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				
				select	count(*)
				into STRICT	qt_registros_w
				from	material
				where	cd_material = cd_produto_w;
				
				if (qt_registros_w = 0) then
					CALL gravar_log_bionexo(nr_requisicao_w, 'ER',wheb_mensagem_pck.get_texto(802131,'CD_PRODUTO_W='||cd_produto_w), nm_usuario_p);
					ie_continua_w := 'N';
					commit;
				end if;
				
				if (ie_continua_w = 'S') then
								
					select	max(cd_unidade_medida_compra)
					into STRICT	cd_unidade_medida_compra_w
					from	material
					where	cd_material = cd_produto_w;
				
					select	coalesce(max(nr_item_cot_compra),0) + 1
					into STRICT	nr_item_cot_compra_w
					from	cot_compra_item
					where	nr_cot_compra = nr_cot_compra_w;
					
					
					begin
					insert into cot_compra_item(
						nr_cot_compra,
						nr_item_cot_compra,
						cd_material,
						qt_material,
						cd_unidade_medida_compra,
						dt_atualizacao,
						dt_limite_entrega,
						nm_usuario,
						ie_situacao,
						cd_estab_item)
					values (	nr_cot_compra_w,
						nr_item_cot_compra_w,
						cd_produto_w,
						qt_quantidade_w,
						cd_unidade_medida_compra_w,
						clock_timestamp(),
						clock_timestamp() + interval '7 days',
						nm_usuario_p,
						'A',
						cd_estabelecimento_w);
					exception
					when others then
						ds_erro_w := sqlerrm;
						CALL gravar_log_bionexo(nr_requisicao_w, 'ER',substr(wheb_mensagem_pck.get_texto(802164,	'CD_PRODUTO_W='||cd_produto_w||
																	';DS_ERRO_W='||ds_erro_w),1,255), nm_usuario_p);
						ie_continua_w := 'N';
						commit;
					end;
					
					if (ie_continua_w = 'S') then
					
						open C05;
						loop
						fetch C05 into	
							nr_solic_compra_w,
							nr_item_solic_compra_w,
							qt_material_solic_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							
							select	coalesce(max(cd_estabelecimento),0)
							into STRICT	cd_estab_solic_w
							from	solic_compra
							where	nr_solic_compra = nr_solic_compra_w;
							
							if (cd_estab_solic_w > 0) then
								insert into cot_compra_solic_agrup(
									nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									nr_cot_compra,
									nr_item_cot_compra,
									nr_solic_compra,
									nr_item_solic_compra,
									qt_material,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									cd_estabelecimento)
								values (	nextval('cot_compra_solic_agrup_seq'),
									clock_timestamp(),
									nm_usuario_p,
									nr_cot_compra_w,
									nr_item_cot_compra_w,
									nr_solic_compra_w,
									nr_item_solic_compra_w,
									qt_material_solic_w,
									clock_timestamp(),
									nm_usuario_p,
									cd_estab_solic_w);
							else
								CALL gravar_log_bionexo(nr_requisicao_w, 'ER',wheb_mensagem_pck.get_texto(802318,'NR_SOLIC_COMPRA='||nr_solic_compra_w), nm_usuario_p);
								ie_continua_w := 'N';
								commit;
							end if;							
							end;
						end loop;
						close C05;
					
						if (ie_continua_w = 'S') then
						
							select	min(dt_entrega)
							into STRICT	dt_entrega_w
							from	w_bionexo_item_entrega
							where	nr_sequencia = nr_seq_item_w;
						
							if (dt_entrega_w IS NOT NULL AND dt_entrega_w::text <> '') then
								update	cot_compra_item
								set	dt_limite_entrega = dt_entrega_w
								where	nr_cot_compra = nr_cot_compra_w
								and	nr_item_cot_compra = nr_item_cot_compra_w;
							end if;
						
						
							open C03;
							loop
							fetch C03 into	
								dt_entrega_w,
								qt_entrega_w;
							EXIT WHEN NOT FOUND; /* apply on C03 */
								begin
								insert into cot_compra_item_entrega(
									nr_sequencia,
									qt_entrega,
									nr_item_cot_compra,
									nr_cot_compra,
									nm_usuario,
									dt_entrega,
									dt_atualizacao)
								values (	nextval('cot_compra_item_entrega_seq'),
									qt_entrega_w,				
									nr_item_cot_compra_w,
									nr_cot_compra_w,
									nm_usuario_p,
									dt_entrega_w,
									clock_timestamp());
								end;
							end loop;
							close C03;
						end if;
					end if;
				end if;
				end;			
			end loop;
			close C02;
			
			if (ie_continua_w = 'S') then
			
				open C01;
				loop
				fetch C01 into	
					cd_cnpj_w,
					ds_razao_social_w,
					cd_forma_pagamento_w,
					ds_observacao_w,
					ie_frete_w,
					qt_prazo_entrega_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin
			
					select	count(*)
					into STRICT	qt_registros_w
					from	conversao_meio_externo
					where   nm_atributo = 'CD_CONDICAO_PAGAMENTO'
					and	nm_tabela = 'CONDICAO_PAGAMENTO'
					and	cd_externo = cd_forma_pagamento_w
					and	ie_sistema_externo = 'B';					
					
					if (qt_registros_w = 0) then
						CALL gravar_log_bionexo(nr_requisicao_w, 'ER',wheb_mensagem_pck.get_texto(802319,'NR_SOLIC_COMPRA='||nr_solic_compra_w),nm_usuario_p);
						ie_continua_w := 'N';
						commit;
					end if;
					
					if (qt_registros_w > 0) then
						select	max(cd_interno)
						into STRICT	cd_forma_pagamento_w
						from	conversao_meio_externo
						where   Upper(nm_atributo) = 'CD_CONDICAO_PAGAMENTO'
						and	upper(nm_tabela) = 'CONDICAO_PAGAMENTO'						
						and	cd_externo = cd_forma_pagamento_w
						and	ie_sistema_externo = 'B';											
					end if;
					
										
					select	count(*)
					into STRICT	qt_registros_w
					from	pessoa_juridica
					where	cd_cgc = cd_cnpj_w;
					
					if (qt_registros_w = 0) then
						CALL gravar_log_bionexo(nr_requisicao_w, 'ER',wheb_mensagem_pck.get_texto(802471,'CD_CNPJ_W='||cd_cnpj_w), nm_usuario_p);
						ie_continua_w := 'N';
						
						select  coalesce(ie_cod_fornec_integracao,'CNPJ')
						into STRICT	ie_campo_cnpj_w
						from	parametro_compras
						where	cd_estabelecimento	= cd_estabelecimento_w;
						
						if (ie_campo_cnpj_w = 'CNPJ') then /*Padrao do Brasil*/
							cd_cnpj_w	:= cd_cnpj_w;
							
						elsif (ie_campo_cnpj_w = 'RFC') then	
							select	coalesce(max(cd_cgc),'0') /*Padrao do Mexico*/
							into STRICT	cd_cnpj_w
							from	pessoa_juridica
							where	ie_situacao = 'A'
							and	cd_rfc = cd_cnpj_w;

							cd_rfc_w	:= cd_cnpj_w;
							
						elsif (ie_campo_cnpj_w = 'CURP') then /*Pode ser usado no Mexico, pois ele usam o CURP*/
	
							select	coalesce(max(cd_cgc),'0')
							into STRICT	cd_cnpj_w
							from	pessoa_juridica
							where	ie_situacao = 'A'
							and	cd_curp = cd_cnpj_w;
							
							cd_curp_w	:= cd_cnpj_w;
						end if;
						
						
						
						select	coalesce(cd_cep,0),
							coalesce(sg_estado,'SP')
						into STRICT	cd_cep_w,
							sg_estado_w
						from	pessoa_juridica
						where	cd_cgc = obter_cgc_estabelecimento(cd_estabelecimento_w);

						select	coalesce(max(cd_tipo_pessoa_bionexo),0 )
						into STRICT	cd_tipo_pessoa_w
						from	parametro_compras
						where	cd_estabelecimento = cd_estabelecimento_w;
						
						insert into pessoa_juridica(
							cd_cgc,
							ds_razao_social,
							nm_fantasia,
							cd_cep,
							ds_endereco,
							ds_municipio,
							sg_estado,
							dt_atualizacao,
							nm_usuario,
							cd_tipo_pessoa,
							ie_prod_fabric,
							ie_situacao,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							cd_rfc,
							cd_curp)
						values (	cd_cnpj_w,
							substr(ds_razao_social_w,1,255),
							substr(ds_razao_social_w,1,255),
							cd_cep_w,
							wheb_mensagem_pck.get_texto(802484),
							wheb_mensagem_pck.get_texto(802484),
							sg_estado_w,
							clock_timestamp(),
							nm_usuario_p,
							cd_tipo_pessoa_w,
							'N',
							'A',
							clock_timestamp(),
							nm_usuario_p,
							cd_rfc_w,
							cd_curp_w);
							
						
						/*Realiza a integracao com a bionexo atraves do evento 178 'Solicita Fornecedor (178)' */

						CALL gravar_agend_integracao(178,'cd_cnpj=' || cd_cnpj_w || ';');
						
						open C06;
						loop
						fetch C06 into	
							cd_estab_w;
						EXIT WHEN NOT FOUND; /* apply on C06 */
							begin
							
							insert into pessoa_juridica_estab(
								nr_sequencia,
								cd_cgc,
								cd_estabelecimento,
								dt_atualizacao,
								nm_usuario,
								ie_conta_dif_nf,
								ie_rateio_adiant,
								ie_retem_iss)
							values (	nextval('pessoa_juridica_estab_seq'),
								cd_cnpj_w,
								cd_estab_w,
								clock_timestamp(),
								nm_usuario_p,
								'N',
								'P',
								'N');	
							end;
						end loop;
						close C06;
						
						
						commit;

					end if;					
					
					if (ie_continua_w = 'S') then
						
						select	nextval('cot_compra_forn_seq')
						into STRICT	nr_seq_cot_compra_forn_w
						;						
						
						begin
						insert into cot_compra_forn(
							nr_cot_compra,
							cd_moeda,
							dt_atualizacao,
							nm_usuario,
							nr_sequencia,
							ie_frete,
							cd_cgc_fornecedor,
							cd_condicao_pagamento,
							ds_observacao,
							qt_dias_entrega)
						values (	nr_cot_compra_w,
							cd_moeda_w,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_cot_compra_forn_w,
							ie_frete_w,
							cd_cnpj_w,
							cd_forma_pagamento_w,
							ds_observacao_w,
							qt_prazo_entrega_w);
						exception
						when others then
							ds_erro_w := sqlerrm;
							CALL gravar_log_bionexo(nr_requisicao_w, 'ER',substr(wheb_mensagem_pck.get_texto(802487,	'CD_CNPJ_W='||cd_cnpj_w||
																		';DS_ERRO_W='||ds_erro_w),1,255), nm_usuario_p);
							ie_continua_w := 'N';
							commit;
						end;
					end if;
					
					end;
				end loop;
				close C01;
				
				if (ie_continua_w = 'S') then
					
					open C04;
					loop
					fetch C04 into
						cd_produto_w,
						nr_artigo_w,
						nr_seq_item_w,
						qt_quantidade_w,
						cd_cnpj_w,
						ds_comentario_w,
						ds_embalagem_w,
						ds_fabricante_w,
						vl_preco_total_w,
						vl_preco_unitario_w,
						ie_selecionado_w;
					EXIT WHEN NOT FOUND; /* apply on C04 */
						begin
						
						select	coalesce(max(nr_sequencia),0)
						into STRICT	nr_seq_fornec_w
						from	cot_compra_forn
						where	nr_cot_compra = nr_cot_compra_w
						and	cd_cgc_fornecedor = cd_cnpj_w;	

						select	min(nr_item_cot_compra)
						into STRICT	nr_item_cot_compra_w
						from	cot_compra_item a
						where	a.nr_cot_compra	= nr_cot_compra_w
						and 	cd_material = cd_produto_w
						and	not exists (	SELECT	b.nr_item_cot_compra
									from	cot_compra_forn_item b
									where	b.nr_cot_compra = a.nr_cot_compra
									and	b.nr_seq_cot_forn = nr_seq_fornec_w
									and	b.nr_item_cot_compra = a.nr_item_cot_compra);
						
						select	nextval('cot_compra_forn_item_seq')
						into STRICT	nr_sequencia_item_w
						;
						
						begin
						
						if (ie_cadastra_marca_imp_cot_w = 'S') and (ds_fabricante_w IS NOT NULL AND ds_fabricante_w::text <> '') and (nr_seq_tipo_marca_w > 0) then
							
							select	coalesce(max(nr_sequencia),0)
							into STRICT	nr_seq_marca_w
							from	marca
							where	substr(upper(elimina_acentuacao(ds_marca)),1,30) = substr(upper(elimina_acentuacao(ds_fabricante_w)),1,30);
							
							if (nr_seq_marca_w = 0) then
								
								select	nextval('marca_seq')
								into STRICT	nr_seq_marca_w
								;
								
								insert into marca(					
									nr_sequencia,
									ds_marca,
									ie_situacao,
									dt_atualizacao,
									nm_usuario,
									nr_seq_tipo,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									qt_dia_ressup)
								values (	nr_seq_marca_w,
									substr(ds_fabricante_w,1,30),
									'A',
									clock_timestamp(),
									nm_usuario_p,
									nr_seq_tipo_marca_w,
									clock_timestamp(),
									nm_usuario_p,
									7);
									
								insert into material_marca(
									cd_material,
									nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									ie_situacao)
								values (	cd_produto_w,
									nr_seq_marca_w,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									'A');
							else
								select	count(*)
								into STRICT	qt_registros_w
								from	material_marca
								where	cd_material	= cd_produto_w
								and	nr_sequencia	= nr_seq_marca_w;
								
								if (qt_registros_w = 0) then
									
									insert into material_marca(
										cd_material,
										nr_sequencia,
										dt_atualizacao,
										nm_usuario,
										dt_atualizacao_nrec,
										nm_usuario_nrec,
										ie_situacao)
									values (	cd_produto_w,
										nr_seq_marca_w,
										clock_timestamp(),
										nm_usuario_p,
										clock_timestamp(),
										nm_usuario_p,
										'A');
								end if;
							
							end if;
						end if;
						
						insert into cot_compra_forn_item(
							nr_sequencia,
							nr_seq_cot_forn,
							nr_cot_compra,
							nr_item_cot_compra,
							cd_cgc_fornecedor,
							vl_unitario_material,
							dt_atualizacao,
							nm_usuario,
							vl_preco_liquido,
							vl_total_liquido_item,
							ie_situacao,
							ds_observacao,
							cd_material,
							qt_material,
							nr_id_integracao)
						values (	nr_sequencia_item_w,
							nr_seq_fornec_w,
							nr_cot_compra_w,
							nr_item_cot_compra_w,
							cd_cnpj_w,
							vl_preco_unitario_w,
							clock_timestamp(),
							nm_usuario_p,
							vl_preco_unitario_w,
							vl_preco_total_w,
							'A',
							ds_comentario_w,
							cd_produto_w,
							qt_quantidade_w,
							nr_artigo_w);
						exception
						when others then
							ds_erro_w := sqlerrm;
							--Ocorreu um erro ao gravar o produto #@CD_PRODUTO_W#@ para o fornecedor #@CD_CNPJ_W#@ na cotacao de compras: #@DS_ERRO_W#@
							CALL gravar_log_bionexo(nr_requisicao_w, 'ER',substr(wheb_mensagem_pck.get_texto(779049,	'CD_PRODUTO_W='||cd_produto_w||
																		';CD_CNPJ_W='||cd_cnpj_w||
																		';DS_ERRO_W='||ds_erro_w),1,255), nm_usuario_p);
							ie_continua_w := 'N';
							commit;
						end;
						end;
						
						if (ie_continua_w = 'S') then
							--(ie_selecionado_w = 'S') then
							
							begin
							update	cot_compra_item
							set	cd_cgc_fornecedor_venc_alt = cd_cnpj_w,
								nr_seq_cot_item_forn = nr_sequencia_item_w
							where	nr_cot_compra = nr_cot_compra_w
							and	nr_item_cot_compra = nr_item_cot_compra_w;
							exception
							when others then
								ds_erro_w := sqlerrm;
								--Ocorreu um erro ao gravar o fornecedor #@CD_CNPJ_W#@ como vencedor para o produto #@CD_PRODUTO_W#@ na cotacao de compras: #@DS_ERRO_W#@
								CALL gravar_log_bionexo(nr_requisicao_w, 'ER',substr(wheb_mensagem_pck.get_texto(779050,	'CD_CNPJ_W='||cd_cnpj_w||
																			';CD_PRODUTO_W='||cd_produto_w||
																			';DS_ERRO_W='||ds_erro_w),1,255), nm_usuario_p);
								ie_continua_w := 'N';	
								commit;
							end;
						end if;
						
						if (ie_continua_w = 'S') then
							
							select	coalesce(max(a.nr_contrato),0)
							into STRICT	nr_contrato_w
							from	w_bionexo_item_contrato a,
								contrato b
							where	a.nr_contrato = b.nr_sequencia
							and	b.cd_cgc_contratado = cd_cnpj_w
							and	nr_seq_item = nr_seq_item_w;
							
							if (nr_contrato_w > 0) then								
								update	cot_compra_forn_item
								set	nr_contrato = nr_contrato_w
								where	nr_sequencia = nr_sequencia_item_w;								
							end if;				
						
						end if;
						
					end loop;
					close C04;
				end if;
			end if;
		end if;
	end if;
	
	if (ie_continua_w = 'S') then

		select	substr(coalesce(obter_valor_param_usuario(915, 67, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'L'),1,1)
		into STRICT	ie_forma_calc_entrega_w
		;

		CALL bionexo_calcula_cotacao(nr_cot_compra_w, ie_forma_calc_entrega_w, nm_usuario_p);
		commit;
	else	
		begin
		delete from cot_compra where nr_cot_compra = nr_cot_compra_w;
		delete from cot_compra_item where nr_cot_compra = nr_cot_compra_w;
		delete from cot_compra_solic_agrup where nr_cot_compra = nr_cot_compra_w;
		delete from cot_compra_item_entrega where nr_cot_compra = nr_cot_compra_w;
		delete from cot_compra_forn where nr_cot_compra = nr_cot_compra_w;
		delete from cot_compra_forn_item where nr_cot_compra = nr_cot_compra_w;
		
		commit;
		
		end;

	end if;
end if;
	
nr_cot_compra_p := coalesce(nr_cot_compra_w,0);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_cot_compra_bionexo ( nr_seq_cabecalho_p bigint, nr_cot_compra_p INOUT bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

