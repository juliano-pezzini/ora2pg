-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE colunas AS (cd_material_w		integer,
			qt_dose_w		double precision,
			qt_perda_w		double precision,
			qt_frasco_disp_w	bigint);


CREATE OR REPLACE PROCEDURE verificar_disp_medicamento ( cd_material_p bigint, cd_unidade_medida_p text, cd_intervalo_P text, ie_via_aplicacao_p text, cd_estabelecimento_p bigint, qt_dose_p bigint, nr_prescricao_p bigint, cd_melhor_material_p INOUT bigint, ds_melhor_material_p INOUT text, nm_usuario_p text) AS $body$
DECLARE


/* vetor */

type vetor is table of colunas index by integer;

vetor_w			vetor;
vetor_aux_w		vetor;

cd_material_regra_w	integer;
qt_unitaria_w   		double precision;
qt_total_dispensar_w	double precision;
qt_conversao_dose_w	double precision;

nr_seq_ficha_tecnica_w	bigint;
qt_dose_total_prescr_w	double precision;
qt_dose_regra_w		double precision;
qt_frasco_perda_zero_w	double precision;
qt_menor_perda_w	double precision;
qt_dose_mat_w		double precision;
qt_dose_total_aux_w	double precision;
qt_menor_frasco_w	double precision;
qt_dose_total_aux_ww	double precision;
cont_w			bigint;
qt_registros_vetor_w	bigint;
cd_material_w		bigint;
qt_controle_ww		bigint := 0;
qt_perda_w		double precision;
qt_perda_2w		double precision;
qt_a_lancar_w		double precision;
qt_perda_final_w		double precision;
qt_perda_final_2w		double precision;
qt_mat_vetor_w		double precision;
x			bigint := 0;
i			bigint := 0;
k			bigint := 0;
y			bigint := 0;
cd_mat_vetor_w		bigint;
ie_reg_w			bigint;
nr_ocorrencia_w		bigint;
nr_horas_validade_w	bigint;

c02 CURSOR FOR
SELECT	b.cd_material,
	obter_conversao_unid_med_onc(b.cd_material, cd_unidade_medida_p) qt_dose
from	material_estab c,
	material b,
	medic_ficha_tecnica a
where	b.nr_seq_ficha_tecnica	= a.nr_sequencia
and	c.cd_material		= b.cd_material
and	c.cd_estabelecimento	= cd_estabelecimento_p
and	a.nr_sequencia		= nr_seq_ficha_tecnica_w
and	Obter_se_via_adm(b.cd_material, ie_via_aplicacao_p) = 'S'
and	coalesce(obter_conversao_unid_med_onc(b.cd_material, cd_unidade_medida_p),0) > 0
and	b.ie_situacao		= 'A'
and	c.ie_prescricao		= 'S'
order by qt_dose desc;


BEGIN

select	max(nr_seq_ficha_tecnica)
into STRICT	nr_seq_ficha_tecnica_w
from	material
where	cd_material = cd_material_p;

select	coalesce(count(*),0)
into STRICT	cont_w
from	material b
where	b.nr_seq_ficha_tecnica	= nr_seq_ficha_tecnica_w;

if (cont_w	> 0) then

	select	nr_horas_validade
	into STRICT	nr_horas_validade_w
	from	prescr_medica
	where	nr_prescricao = nr_prescricao_p;

	select	obter_ocorrencia_intervalo(cd_intervalo_p, nr_horas_validade_w, 'O')
	into STRICT	nr_ocorrencia_w
	;

	qt_dose_total_prescr_w	:= qt_dose_p * nr_ocorrencia_w;
	qt_dose_total_aux_w	:= qt_dose_p * nr_ocorrencia_w;


	select	max(obter_conversao_unid_med_onc(b.cd_material, cd_unidade_medida_p))
	into STRICT	qt_dose_mat_w
	from	material_estab c,
		material b,
		medic_ficha_tecnica a
	where	b.nr_seq_ficha_tecnica	= a.nr_sequencia
	and	c.cd_material		= b.cd_material
	and	c.cd_material		= cd_material_p
	and	coalesce(obter_conversao_unid_med_onc(b.cd_material, cd_unidade_medida_p),0) > 0
	and	b.ie_situacao		= 'A'
	and	c.ie_prescricao		= 'S';

	if (qt_dose_total_aux_w = qt_dose_mat_w) or (mod(qt_dose_total_aux_w, qt_dose_mat_w) = 0) then
		cd_material_w	:= cd_material_p;
	end if;

	if (coalesce(cd_material_w::text, '') = '') then

		cont_w	:= 0;
		vetor_w.delete;
		ie_reg_w		:= 0;
		open c02;
		loop
		fetch c02 into
			cd_material_regra_w,
			qt_dose_regra_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			vetor_w[cont_w].cd_material_w	:= cd_material_regra_w;
			vetor_w[cont_w].qt_dose_w	:= qt_dose_regra_w;

			qt_dose_total_aux_w	:= qt_dose_p * nr_ocorrencia_w;
			qt_controle_ww		:= 0;

			while(qt_dose_total_aux_w	> 0) and (qt_controle_ww		< 1000) loop

				qt_controle_ww	:= qt_controle_ww + 1;

				if	((qt_dose_total_aux_w - vetor_w[cont_w].qt_dose_w) > 0) then

					qt_dose_total_aux_w			:= (qt_dose_total_aux_w - vetor_w[cont_w].qt_dose_w);
					vetor_aux_w[ie_reg_w].cd_material_w	:= vetor_w[cont_w].cd_material_w;
					vetor_aux_w[ie_reg_w].qt_dose_w		:= vetor_w[cont_w].qt_dose_w + coalesce(vetor_aux_w[ie_reg_w].qt_dose_w,0);
					vetor_aux_w[ie_reg_w].qt_frasco_disp_w	:= coalesce(vetor_aux_w[ie_reg_w].qt_frasco_disp_w,0) + 1;
				else
					qt_dose_total_aux_w			:= (qt_dose_total_aux_w - vetor_w[cont_w].qt_dose_w);
					vetor_aux_w[ie_reg_w].cd_material_w	:= vetor_w[cont_w].cd_material_w;
					vetor_aux_w[ie_reg_w].qt_dose_w		:= vetor_w[cont_w].qt_dose_w + coalesce(vetor_aux_w[ie_reg_w].qt_dose_w,0);
					vetor_aux_w[ie_reg_w].qt_frasco_disp_w	:= coalesce(vetor_aux_w[ie_reg_w].qt_frasco_disp_w,0) + 1;
					vetor_aux_w[ie_reg_w].qt_perda_w	:= qt_dose_total_aux_w;
					ie_reg_w	:= ie_reg_w + 1;
				end if;

			end loop;

			vetor_w.delete;
			cont_w := cont_w + 1;

		end loop;
		close c02;
		/*
		qt_menor_perda_w	:= 9999999;
		k			:= -1;
		while	(k < vetor_aux_w.count - 1) loop
			k	:= k + 1;
			if	((vetor_aux_w(k).qt_perda_w > 0) and
				 (vetor_aux_w(k).qt_perda_w < qt_menor_perda_w)) or
				(vetor_aux_w(k).qt_perda_w = 0) then
				qt_menor_perda_w	:= vetor_aux_w(k).qt_perda_w;
				cd_material_w		:= vetor_aux_w(k).cd_material_w;
			end if;
		end loop;*/
		qt_menor_frasco_w	:= 99999;
		qt_menor_perda_w	:= -99999;
		qt_frasco_perda_zero_w	:= 99999;

		while(k < vetor_aux_w.count - 1) loop
			k	:= k + 1;

			if	(vetor_aux_w[k].qt_perda_w >= qt_menor_perda_w AND vetor_aux_w[k].qt_frasco_disp_w <= qt_menor_frasco_w) or
				(vetor_aux_w[k].qt_perda_w <> 0 AND vetor_aux_w[k].qt_perda_w > qt_menor_perda_w) or
				(vetor_aux_w[k].qt_perda_w = 0 AND vetor_aux_w[k].qt_frasco_disp_w <= qt_frasco_perda_zero_w) then
				qt_menor_perda_w	:= vetor_aux_w[k].qt_perda_w;
				qt_menor_frasco_w	:= vetor_aux_w[k].qt_frasco_disp_w;
				if (vetor_aux_w[k].qt_perda_w = 0) then
					qt_frasco_perda_zero_w	:= vetor_aux_w[k].qt_frasco_disp_w;
				end if;
				cd_material_w	:= vetor_aux_w[k].cd_material_w;
			end if;
		end loop;
	end if;

	if (cd_material_p <> cd_material_w) then
		cd_melhor_material_p	:= cd_material_w;
		ds_melhor_material_p	:= obter_Desc_material(cd_melhor_material_p);
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE verificar_disp_medicamento ( cd_material_p bigint, cd_unidade_medida_p text, cd_intervalo_P text, ie_via_aplicacao_p text, cd_estabelecimento_p bigint, qt_dose_p bigint, nr_prescricao_p bigint, cd_melhor_material_p INOUT bigint, ds_melhor_material_p INOUT text, nm_usuario_p text) FROM PUBLIC;

