-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_parcelas_quota_part (nr_sequencia_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


qt_vencimentos_w		bigint;
ds_vencimentos_w		varchar(2000);
dt_vencimento_w			timestamp;
nr_parcela_w			bigint	:= 0;
qt_quotas_w			double precision	:= 0;	
vl_escrituracao_w		double precision	:= 0;
cd_condicao_pagamento_w		bigint;
vl_parcela_w			double precision	:= 0;
vl_quota_parcela_w		double precision	:= 0;
tx_fracao_parcela_w		double precision;	
nr_parcela_ww			bigint;	
vl_soma_parcelas_w		double precision	:= 0;
vl_soma_quotas_w		double precision	:= 0;	
vl_entrada_w			double precision	:= 0;	
cd_moeda_w			bigint;
vl_parcela_ini_w		double precision;
nr_seq_quota_parcela_ant_w 	bigint;
nr_seq_quota_parcela_w		bigint;
dt_vencimento_ant_w		timestamp;
dt_lancamento_w			timestamp;
nr_dia_venc_w			pls_escrituracao_quota.nr_dia_venc%type;
ie_acao_nao_util_w		pls_escrituracao_quota.ie_acao_nao_util%type;
qt_parcela_w			pls_escrituracao_quota.qt_parcela%type;
contador_w			integer;
qt_dias_w			integer;
qt_feriado_w			bigint;
ie_mes_vencimento_w		pls_escrituracao_quota.ie_mes_vencimento%type;

c01 CURSOR FOR
	SELECT	tx_fracao_parcela,
		nr_parcela
	from	parcela
	where	cd_condicao_pagamento = cd_condicao_pagamento_w
	
union all

	SELECT	100,
		0 nr_parcela
	
	where	not exists (select	1
				from	parcela x
				where	x.cd_condicao_pagamento = cd_condicao_pagamento_w)
	order by nr_parcela;
						

BEGIN

select	cd_condicao_pagamento,
	qt_quotas,
	vl_escrituracao,
	vl_entrada,
	cd_moeda,
	vl_entrada_especie,
	dt_lancamento,
	coalesce(nr_dia_venc,(to_char(dt_lancamento,'dd'))::numeric ),
	ie_acao_nao_util,
	coalesce(qt_parcela,1),
	coalesce(ie_mes_vencimento,'A')
into STRICT	cd_condicao_pagamento_w,
	qt_quotas_w,
	vl_escrituracao_w,
	vl_entrada_w,
	cd_moeda_w,
	vl_parcela_ini_w,
	dt_lancamento_w,
	nr_dia_venc_w,
	ie_acao_nao_util_w,
	qt_parcela_w,
	ie_mes_vencimento_w
from	pls_escrituracao_quota
where	nr_sequencia	= nr_sequencia_p;

-- Gerar Parcela de entrada
if (vl_entrada_w <> 0) then

	if	coalesce(vl_parcela_ini_w,0) = 0 then
		vl_parcela_ini_w	:= (obter_valor_cotacao_moeda(cd_moeda_w) *  vl_entrada_w);
		vl_escrituracao_w	:= vl_escrituracao_w - (obter_valor_cotacao_moeda(cd_moeda_w) *  vl_entrada_w);
	else
		vl_escrituracao_w	:= vl_escrituracao_w - vl_parcela_ini_w;
	end if;

	qt_quotas_w		:= qt_quotas_w - vl_entrada_w;
	
	insert into pls_escrit_quota_parcela(nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		nr_seq_escrituracao,
		nr_parcela,
		qt_quotas,
		vl_parcela,
		dt_vencimento)
	values (nextval('pls_escrit_quota_parcela_seq'),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nr_sequencia_p,
		1,
		vl_entrada_w,
		vl_parcela_ini_w,
		clock_timestamp());	
end if;

if (cd_condicao_pagamento_w IS NOT NULL AND cd_condicao_pagamento_w::text <> '') then
	SELECT * FROM calcular_vencimento(	cd_estabelecimento_p, cd_condicao_pagamento_w, dt_lancamento_w, qt_vencimentos_w, ds_vencimentos_w) INTO STRICT qt_vencimentos_w, ds_vencimentos_w;	

	vl_parcela_w		:= dividir(vl_escrituracao_w, qt_vencimentos_w);
	vl_quota_parcela_w	:= dividir((qt_quotas_w * vl_parcela_w) ,vl_escrituracao_w);

	select	coalesce(max(nr_parcela),0)
	into STRICT	nr_parcela_w
	from	pls_escrit_quota_parcela
	where	nr_seq_escrituracao	= nr_sequencia_p;
				
	open C01;
	loop
	fetch C01 into	
		tx_fracao_parcela_w,
		nr_parcela_ww;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		nr_parcela_w	 := nr_parcela_w + 1;
		dt_vencimento_w	 := substr(ds_vencimentos_w,1,position(' ' in ds_vencimentos_w) - 1);
		ds_vencimentos_w := substr(ds_vencimentos_w, (position(' ' in ds_vencimentos_w) + 1), length(ds_vencimentos_w));		
		
			
		if (tx_fracao_parcela_w = 100) and (nr_parcela_ww = 0) then
			dt_vencimento_w	:= clock_timestamp();	
		end if;		
			
		vl_soma_parcelas_w	:= vl_soma_parcelas_w + vl_parcela_w;
		vl_soma_quotas_w	:= vl_soma_quotas_w + vl_quota_parcela_w;
		
		select	nextval('pls_escrit_quota_parcela_seq')
		into STRICT	nr_seq_quota_parcela_w
		;
		
		insert into pls_escrit_quota_parcela(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_escrituracao,
			nr_parcela,
			qt_quotas,
			vl_parcela,
			dt_vencimento)
		values (nr_seq_quota_parcela_w,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_sequencia_p,
			nr_parcela_w,
			vl_quota_parcela_w,
			vl_parcela_w,
			coalesce(dt_vencimento_w,clock_timestamp()));
		end;
		
		if (dt_vencimento_w < dt_vencimento_ant_w) then
			update	pls_escrit_quota_parcela
			set	nr_parcela 	= nr_parcela_w
			where	nr_sequencia 	= nr_seq_quota_parcela_ant_w;
			
			update	pls_escrit_quota_parcela
			set	nr_parcela 	= nr_parcela_w - 1
			where	nr_sequencia 	= nr_seq_quota_parcela_w;		
		end if;
		
		nr_seq_quota_parcela_ant_w 	:= nr_seq_quota_parcela_w;
		dt_vencimento_ant_w 		:= dt_vencimento_w;
	end loop;
	close C01;
else
	if (nr_dia_venc_w < 1) or (nr_dia_venc_w > 31) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(330773);
	end if;

	--Gerar parcelas pelos campos nr_dia_venc, ie_acao_nao_util e qt_parcela
	contador_w := 0;

	while(contador_w < qt_parcela_w) loop
	
		if (ie_mes_vencimento_w = 'A') and (contador_w = 0) then
			dt_lancamento_w := clock_timestamp();
		end if;
		
		--Verifica se data informada maior que ultimo dia do mes
		if ((to_char(last_day(add_months(dt_lancamento_w,contador_w)),'dd'))::numeric  < nr_dia_venc_w) then
			dt_vencimento_w := to_date(to_char(last_day(add_months(dt_lancamento_w,contador_w)),'dd') || '/' || to_char(add_months(dt_lancamento_w,contador_w),'mm/yyyy'),'dd/mm/yyyy');
		else
			dt_vencimento_w	:= to_date(to_char(nr_dia_venc_w) || '/' || to_char(add_months(dt_lancamento_w,contador_w),'mm/yyyy'),'dd/mm/yyyy');
		end if;
		
		if (clock_timestamp() - interval '1 days' > dt_vencimento_w) and (ie_mes_vencimento_w = 'P') then
			dt_lancamento_w := add_months(dt_lancamento_w,1);
			dt_vencimento_w := add_months(dt_vencimento_w,1);
		end if;
		
		--Verifica caso caia dia nao util (P - postergar, A - Antecipar)
		if (ie_acao_nao_util_w in ('A','P')) then
			qt_dias_w	:= 0;

			while(qt_dias_w = 0) loop
				begin
				select	count(*)
				into STRICT 	qt_feriado_w
				from 	feriado
				where	cd_estabelecimento = cd_estabelecimento_p
				and	dt_feriado         = dt_vencimento_w;
				if (qt_feriado_w = 0) and ((to_char(dt_vencimento_w,'d'))::numeric  > 1) and ((to_char(dt_vencimento_w,'d'))::numeric  < 7) then
					qt_dias_w	:= qt_dias_w + 1;
				else
					if (ie_acao_nao_util_w = 'P') then
						dt_vencimento_w	:= dt_vencimento_w + 1;
					else
						dt_vencimento_w	:= dt_vencimento_w - 1;
					end if;
				end if;
				end;
			end loop;
		end if;
		
		ds_vencimentos_w := ds_vencimentos_w || dt_vencimento_w || ' ';
		contador_w := contador_w + 1;
	
	end loop;	
	
	vl_parcela_w		:= dividir(vl_escrituracao_w, qt_parcela_w);
	vl_quota_parcela_w	:= dividir(( qt_quotas_w* vl_parcela_w), vl_escrituracao_w);
	
	select	coalesce(max(nr_parcela),0)
	into STRICT	nr_parcela_w
	from	pls_escrit_quota_parcela
	where	nr_seq_escrituracao	= nr_sequencia_p;
	
	contador_w := 0;
	
	while(contador_w < qt_parcela_w) loop
	
		nr_parcela_w	 := nr_parcela_w + 1;
		dt_vencimento_w	 := substr(ds_vencimentos_w,1,position(' ' in ds_vencimentos_w) - 1);
		ds_vencimentos_w := substr(ds_vencimentos_w, (position(' ' in ds_vencimentos_w) + 1), length(ds_vencimentos_w));
		
		vl_soma_parcelas_w	:= vl_soma_parcelas_w + vl_parcela_w;
		vl_soma_quotas_w	:= vl_soma_quotas_w + vl_quota_parcela_w;
		
		select	nextval('pls_escrit_quota_parcela_seq')
		into STRICT	nr_seq_quota_parcela_w
		;

		insert into pls_escrit_quota_parcela(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_escrituracao,
			nr_parcela,
			qt_quotas,
			vl_parcela,
			dt_vencimento)
		values (nr_seq_quota_parcela_w,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_sequencia_p,
			nr_parcela_w,
			vl_quota_parcela_w,
			vl_parcela_w,
			dt_vencimento_w);	
		
		if (dt_vencimento_w < dt_vencimento_ant_w) then
			update	pls_escrit_quota_parcela
			set	nr_parcela 	= nr_parcela_w
			where	nr_sequencia 	= nr_seq_quota_parcela_ant_w;
			
			update	pls_escrit_quota_parcela
			set	nr_parcela 	= nr_parcela_w - 1
			where	nr_sequencia 	= nr_seq_quota_parcela_w;		
		end if;
		
		nr_seq_quota_parcela_ant_w 	:= nr_seq_quota_parcela_w;
		dt_vencimento_ant_w 		:= dt_vencimento_w;
		contador_w 			:= contador_w + 1;
	end loop;
end if;	

if (vl_soma_parcelas_w <> vl_escrituracao_w) then
	update	pls_escrit_quota_parcela
	set	vl_parcela	= (vl_parcela_w + (vl_escrituracao_w - vl_soma_parcelas_w)),
		qt_quotas	= vl_quota_parcela_w + (qt_quotas_w - vl_soma_quotas_w)	
	where	nr_seq_escrituracao	= nr_sequencia_p
	and	nr_parcela = (	SELECT	max(nr_parcela)
				from	pls_escrit_quota_parcela
				where	nr_seq_escrituracao	= nr_sequencia_p);
end if;

update	pls_escrituracao_quota
set	dt_geracao_parcelas	= clock_timestamp()
where	nr_sequencia		= nr_sequencia_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_parcelas_quota_part (nr_sequencia_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

