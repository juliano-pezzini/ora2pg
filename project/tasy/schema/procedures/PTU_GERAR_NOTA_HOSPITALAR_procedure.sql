-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_nota_hospitalar ( nr_seq_cobranca_p ptu_nota_cobranca.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_interface_p interface.cd_interface%type) AS $body$
DECLARE

					
-- versao ptu
ie_versao_w			bigint;
ie_versao_xml_w			bigint;

-- dados ptu_nota_cobranca
nr_seq_fatura_w			ptu_nota_cobranca.nr_seq_fatura%type;
nr_seq_conta_ww			ptu_nota_cobranca.nr_seq_conta%type;
nr_nota_w			ptu_nota_cobranca.nr_nota%type;
nr_lote_w			ptu_nota_cobranca.nr_lote%type;
nr_ver_tiss_w			ptu_nota_cobranca.nr_ver_tiss%type;
nr_seq_congenere_fat_w		pls_fatura.nr_seq_congenere%type;

-- dados ptu_fatura
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;

-- variaveis diversas
cd_unimed_local_w		pls_congenere.cd_cooperativa%type;

-- cursor 01
ie_indicacao_acidente_w		pls_conta.ie_indicacao_acidente%type;
qt_nasc_vivos_pre_w		pls_conta.qt_nasc_vivos_prematuros%type;
qt_nasc_vivos_w			smallint;
qt_nasc_mortos_w		smallint;
qt_obito_precoce_w		smallint;
qt_obito_tardio_w		smallint;
ie_gestacao_w			varchar(1);
ie_obito_w			varchar(2);
ie_transtorno_w			varchar(1);
ie_complicacao_puerperio_w	varchar(2);
ie_atend_rn_sala_parto_w	varchar(1);
ie_complicacao_neonatal_w	varchar(1);
ie_baixo_peso_w			varchar(1);
ie_parto_cesaria_w		varchar(1);
ie_parto_normal_w		varchar(1);
ie_obito_mulher_w		smallint;

-- limpa a cada loop do cursor 01
nr_crm_auditor_w		ptu_nota_hospitalar.nr_crm_auditor%type;
nm_medico_auditor_w		ptu_nota_hospitalar.nm_medico_auditor%type;
nr_coren_auditor_w		ptu_nota_hospitalar.nr_coren_auditor%type;
nm_enfer_auditor_w		ptu_nota_hospitalar.nm_enfer_auditor%type;
cd_uf_crm_w			ptu_nota_hospitalar.cd_uf_crm%type;
cd_uf_coren_w			ptu_nota_hospitalar.cd_uf_coren%type;
nr_seq_tipo_acomodacao_w	pls_guia_plano.nr_seq_tipo_acomodacao%type;
ie_tipo_acomodacao_w		varchar(2);
nr_seq_plano_w			pls_segurado.nr_seq_plano%type;

-- dados pls_diagnost_conta_obito
nr_seq_diag_conta_obito_w	bigint;
cd_doenca_w			varchar(10);
nr_declara_obito_w		varchar(17);

-- dados pls_prestador
nm_hospital_w			varchar(70);
cd_cnes_w			integer;
cd_cgc_w			pls_prestador.cd_cgc%type;
cd_hospital_w			integer;
cd_prestador_w			pls_prestador.cd_prestador%type;

-- dados pls_motivo_saida
cd_motivo_saida_w		pls_motivo_saida.cd_ptu%type;

-- dados pls_clinica
ie_tipo_internacao_w		varchar(3);

-- variaveis diversas
tx_mult_amb_w			real;
ie_tipo_fat_w			smallint;
nr_seq_hospitalar_w		bigint;

ie_tipo_cobranca_fatura_w	ptu_fatura.ie_tipo_cobranca_fatura%type;

c01 CURSOR(	nr_seq_conta_pc			pls_conta.nr_sequencia%type,
		nr_seq_cobranca_pc		ptu_nota_cobranca.nr_sequencia%type,
		ie_tipo_cobranca_fatura_pc	ptu_fatura.ie_tipo_cobranca_fatura%type) FOR
	SELECT	b.nr_seq_prestador,
		a.nr_seq_clinica,
		a.ie_indicacao_acidente,
		a.nr_seq_saida_int,
		coalesce((a.qt_nasc_vivos_prematuros)::numeric , 0) qt_nasc_vivos_pre,
		coalesce(a.dt_entrada, clock_timestamp()) dt_internacao,
		a.ie_tipo_faturamento,
		coalesce(a.dt_alta, clock_timestamp()) dt_alta,
		coalesce((coalesce(CASE WHEN (a.qt_nasc_vivos)::numeric =0 THEN  null  ELSE a.qt_nasc_vivos END , a.qt_nasc_vivos_termo))::numeric , 0) qt_nasc_vivos,
		coalesce((a.qt_nasc_mortos)::numeric , 0) qt_nasc_mortos,
		coalesce((a.qt_obito_precoce)::numeric , 0) qt_obito_precoce,
		coalesce((a.qt_obito_tardio)::numeric , 0) qt_obito_tardio,
		a.ie_gestacao,
		a.ie_obito,
		a.ie_transtorno,
		a.ie_complicacao_puerperio,
		a.ie_atend_rn_sala_parto,
		a.ie_complicacao_neonatal,
		a.ie_baixo_peso,
		a.ie_parto_cesaria,
		a.ie_parto_normal,
		a.ie_obito_mulher,
		a.nr_sequencia nr_seq_conta,
		a.nr_seq_segurado,
		c.ie_regime_internacao,
		a.nr_seq_guia,
		a.cd_guia
	FROM pls_conta_pos_cab_v c, pls_protocolo_conta b, pls_conta a
LEFT OUTER JOIN pls_tipo_atendimento t ON (a.nr_seq_tipo_atendimento = t.nr_sequencia)
WHERE a.nr_seq_protocolo	= b.nr_sequencia and a.nr_sequencia		= c.nr_sequencia and a.nr_sequencia		= nr_seq_conta_pc and ((a.ie_tipo_guia = '5') or (t.cd_tiss in ('7', '07')) or (a.ie_regime_atendimento = '03'))  and not exists (	SELECT	1
			from	ptu_nota_hospitalar
			where   nr_seq_nota_cobr = nr_seq_cobranca_pc) and ie_tipo_cobranca_fatura_pc	= 'C' group by b.nr_sequencia,
		b.nr_seq_prestador,
		a.nr_seq_clinica,
		a.ie_indicacao_acidente,
		a.nr_seq_saida_int,
		a.qt_nasc_vivos_prematuros,
		a.dt_entrada,
		a.ie_tipo_faturamento,
		a.dt_alta,
		a.qt_nasc_vivos,
		a.qt_nasc_mortos,
		a.qt_obito_precoce,
		a.qt_obito_tardio,
		a.ie_gestacao,
		a.ie_obito,
		a.ie_transtorno,
		a.ie_complicacao_puerperio,
		a.ie_atend_rn_sala_parto,
		a.ie_complicacao_neonatal,
		a.ie_baixo_peso,
		a.ie_parto_cesaria,
		a.ie_parto_normal,
		a.ie_obito_mulher,
		a.nr_sequencia,
		a.nr_seq_segurado,
		c.ie_regime_internacao,
		a.qt_nasc_vivos_termo,
		a.nr_seq_analise,
		a.nr_seq_guia,
		a.cd_guia
	
union all

	select	b.nr_seq_prestador,
		a.nr_seq_clinica,
		a.ie_indicacao_acidente,
		a.nr_seq_saida_int,
		coalesce((a.qt_nasc_vivos_prematuros)::numeric , 0) qt_nasc_vivos_pre,
		coalesce(a.dt_entrada, clock_timestamp()) dt_internacao,
		a.ie_tipo_faturamento,
		coalesce(a.dt_alta, clock_timestamp()) dt_alta,
		coalesce((coalesce(CASE WHEN (a.qt_nasc_vivos)::numeric =0 THEN  null  ELSE a.qt_nasc_vivos END , a.qt_nasc_vivos_termo))::numeric , 0) qt_nasc_vivos,
		coalesce((a.qt_nasc_mortos)::numeric , 0) qt_nasc_mortos,
		coalesce((a.qt_obito_precoce)::numeric , 0) qt_obito_precoce,
		coalesce((a.qt_obito_tardio)::numeric , 0) qt_obito_tardio,
		a.ie_gestacao,
		a.ie_obito,
		a.ie_transtorno,
		a.ie_complicacao_puerperio,
		a.ie_atend_rn_sala_parto,
		a.ie_complicacao_neonatal,
		a.ie_baixo_peso,
		a.ie_parto_cesaria,
		a.ie_parto_normal,
		a.ie_obito_mulher,
		a.nr_sequencia nr_seq_conta,
		a.nr_seq_segurado,
		c.ie_regime_internacao,
		a.nr_seq_guia,
		a.cd_guia
	FROM pls_conta_v c, pls_protocolo_conta b, pls_conta a
LEFT OUTER JOIN pls_tipo_atendimento t ON (a.nr_seq_tipo_atendimento = t.nr_sequencia)
WHERE a.nr_seq_protocolo	= b.nr_sequencia and a.nr_sequencia		= c.nr_sequencia and a.nr_sequencia		= nr_seq_conta_pc and ((a.ie_tipo_guia = '5') or (t.cd_tiss in ('7', '07')) or (a.ie_regime_atendimento = '03'))  and not exists (	select	1
			from	ptu_nota_hospitalar 
			where   nr_seq_nota_cobr = nr_seq_cobranca_pc) and ie_tipo_cobranca_fatura_pc	= 'A' group by b.nr_sequencia,
		b.nr_seq_prestador,
		a.nr_seq_clinica,
		a.ie_indicacao_acidente,
		a.nr_seq_saida_int,
		a.qt_nasc_vivos_prematuros,
		a.dt_entrada,
		a.ie_tipo_faturamento,
		a.dt_alta,
		a.qt_nasc_vivos,
		a.qt_nasc_mortos,
		a.qt_obito_precoce,
		a.qt_obito_tardio,
		a.ie_gestacao,
		a.ie_obito,
		a.ie_transtorno,
		a.ie_complicacao_puerperio,
		a.ie_atend_rn_sala_parto,
		a.ie_complicacao_neonatal,
		a.ie_baixo_peso,
		a.ie_parto_cesaria,
		a.ie_parto_normal,
		a.ie_obito_mulher,
		a.nr_sequencia,
		a.nr_seq_segurado,
		c.ie_regime_internacao,
		a.qt_nasc_vivos_termo,
		a.nr_seq_analise,
		a.nr_seq_guia,
		a.cd_guia;

-- Inf de nasc vivos ou obito da conta
c02 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type) FOR
	SELECT	substr(b.nr_decl_nasc_vivo, 1, 15) nr_decl_nasc_vivo,
		null nr_declaracao_obito,
		null cd_doenca,
		b.ie_indicador_dorn
	from	pls_diagnostico_nasc_vivo 	b,
		pls_conta		 	a
	where	a.nr_sequencia			= b.nr_seq_conta
	and	a.nr_sequencia			= nr_seq_conta_pc
	and	(b.nr_decl_nasc_vivo IS NOT NULL AND b.nr_decl_nasc_vivo::text <> '')
	-- somente se nao tiver nessa tabela intermediaria da analise, a prioridade e a analise
	and (	SELECT	count(1)
			from	pls_diagnos_nasc_viv_pos	x
			where	(x.nr_decl_nasc_vivo IS NOT NULL AND x.nr_decl_nasc_vivo::text <> '')
			and	x.nr_seq_conta			= nr_seq_conta_pc) = 0
			
	
union

	select	null nr_decl_nasc_vivo,
		substr(b.nr_declaracao_obito, 1, 17) nr_declaracao_obito,
		b.cd_doenca,
		b.ie_indicador_dorn
	FROM pls_conta a
LEFT OUTER JOIN pls_diagnost_conta_obito b ON (a.nr_sequencia = b.nr_seq_conta)
WHERE a.nr_sequencia			= nr_seq_conta_pc and ((b.nr_declaracao_obito IS NOT NULL AND b.nr_declaracao_obito::text <> '') or (b.cd_doenca IS NOT NULL AND b.cd_doenca::text <> '')) and b.nr_sequencia <> coalesce(nr_seq_diag_conta_obito_w, 0) and (	select	sum(t.contador)
			from (	select	count(1) contador
				from	pls_diag_conta_obito_pos	x
				where	(x.nr_declaracao_obito IS NOT NULL AND x.nr_declaracao_obito::text <> '')
				and	x.nr_seq_conta		= nr_seq_conta_pc
				
union all

				select	count(1) contador
				from	pls_diag_conta_obito_pos	x
				where	(x.cd_doenca IS NOT NULL AND x.cd_doenca::text <> '')
				and	x.nr_seq_conta		= nr_seq_conta_pc ) t) = 0;
			
-- Inf de nasc vivos ou obito da conta, originarios da analise
c03 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type) FOR
	SELECT	substr(a.nr_decl_nasc_vivo, 1, 15) nr_decl_nasc_vivo,
		null nr_declaracao_obito,
		null cd_doenca,
		null ie_indicador_dorn
	from	pls_diagnos_nasc_viv_pos	a
	where	(a.nr_decl_nasc_vivo IS NOT NULL AND a.nr_decl_nasc_vivo::text <> '')
	and	a.nr_seq_conta			= nr_seq_conta_pc
	
union all

	-- utilizado distinct para nao ter duplicidade de registros
	SELECT	distinct t.nr_decl_nasc_vivo,
		t.nr_declaracao_obito,
		t.cd_doenca,
		t.ie_indicador_dorn
	from (	select	null nr_decl_nasc_vivo,
			substr(a.nr_declaracao_obito, 1, 17) nr_declaracao_obito,
			a.cd_doenca,
			a.ie_indicador_dorn
		from	pls_diag_conta_obito_pos	a
		where	(a.nr_declaracao_obito IS NOT NULL AND a.nr_declaracao_obito::text <> '')
		and	a.nr_seq_conta			= nr_seq_conta_pc
		
union all

		select	null nr_decl_nasc_vivo,
			substr(a.nr_declaracao_obito, 1, 17) nr_declaracao_obito,
			a.cd_doenca,
			a.ie_indicador_dorn
		from	pls_diag_conta_obito_pos	a
		where	(a.cd_doenca IS NOT NULL AND a.cd_doenca::text <> '')
		and	a.nr_seq_conta			= nr_seq_conta_pc) t;

BEGIN
select	max(c.nr_seq_fatura),
	max(c.nr_seq_conta),
	max(c.nr_nota),
	max(c.nr_lote),
	max(c.nr_ver_tiss),
	max(f.cd_estabelecimento),
	max(l.nr_seq_congenere),
	coalesce(max(f.ie_tipo_cobranca_fatura), 'C')
into STRICT	nr_seq_fatura_w,
	nr_seq_conta_ww,
	nr_nota_w,
	nr_lote_w,
	nr_ver_tiss_w,
	cd_estabelecimento_w,
	nr_seq_congenere_fat_w,
	ie_tipo_cobranca_fatura_w
from	ptu_nota_cobranca c,
	ptu_fatura f,
	pls_fatura l
where	c.nr_seq_fatura	= f.nr_sequencia
and	l.nr_sequencia	= f.nr_seq_pls_fatura
and	c.nr_sequencia	= nr_seq_cobranca_p;

ie_versao_w := somente_numero(ptu_obter_versao_dominio('A500', cd_interface_p));
ie_versao_xml_w	:= somente_numero(ptu_batch_xml_pck.obter_versao_dominio( cd_estabelecimento_w, nr_seq_congenere_fat_w, null, clock_timestamp(), 'A500'))*100;

if (ie_versao_xml_w > 0) then
	ie_versao_w := ie_versao_xml_w;
end if;

cd_unimed_local_w := pls_obter_unimed_estab(cd_estabelecimento_w);
	
for r_c01_w in c01( nr_seq_conta_ww, nr_seq_cobranca_p, ie_tipo_cobranca_fatura_w ) loop
	ie_indicacao_acidente_w		:= r_c01_w.ie_indicacao_acidente;
	qt_nasc_vivos_pre_w		:= r_c01_w.qt_nasc_vivos_pre;
	qt_nasc_vivos_w			:= r_c01_w.qt_nasc_vivos;
	qt_nasc_mortos_w		:= r_c01_w.qt_nasc_mortos;
	qt_obito_precoce_w		:= r_c01_w.qt_obito_precoce;
	qt_obito_tardio_w		:= r_c01_w.qt_obito_tardio;
	ie_gestacao_w			:= r_c01_w.ie_gestacao;
	ie_obito_w			:= r_c01_w.ie_obito;
	ie_transtorno_w			:= r_c01_w.ie_transtorno;
	ie_complicacao_puerperio_w	:= r_c01_w.ie_complicacao_puerperio;
	ie_atend_rn_sala_parto_w	:= r_c01_w.ie_atend_rn_sala_parto;
	ie_complicacao_neonatal_w	:= r_c01_w.ie_complicacao_neonatal;
	ie_baixo_peso_w			:= r_c01_w.ie_baixo_peso;
	ie_parto_cesaria_w		:= r_c01_w.ie_parto_cesaria;
	ie_parto_normal_w		:= r_c01_w.ie_parto_normal;
	ie_obito_mulher_w		:= r_c01_w.ie_obito_mulher;
	
	nr_crm_auditor_w 		:= null;
	nm_medico_auditor_w 		:= null;
	nr_coren_auditor_w 		:= null;
	nm_enfer_auditor_w 		:= null;
	cd_uf_crm_w 			:= null;
	cd_uf_coren_w 			:= null;
	nr_seq_tipo_acomodacao_w	:= null;
	ie_tipo_acomodacao_w		:= null;
	nr_seq_plano_w			:= null;
	
	select	max(b.nr_sequencia)
	into STRICT	nr_seq_diag_conta_obito_w
	from	pls_diagnost_conta_obito b,
		pls_conta		 a
	where	a.nr_sequencia		= b.nr_seq_conta
	and	a.nr_sequencia		= r_c01_w.nr_seq_conta
	and	((b.nr_declaracao_obito IS NOT NULL AND b.nr_declaracao_obito::text <> '') or (b.cd_doenca IS NOT NULL AND b.cd_doenca::text <> ''));
	
	if (nr_seq_diag_conta_obito_w IS NOT NULL AND nr_seq_diag_conta_obito_w::text <> '') then
		select	cd_doenca,
			substr(nr_declaracao_obito, 1, 17)
		into STRICT	cd_doenca_w,
			nr_declara_obito_w
		from	pls_diagnost_conta_obito
		where	nr_sequencia = nr_seq_diag_conta_obito_w;
	end if;
	
	begin
		select	substr(upper(elimina_acentos(pls_obter_dados_prestador(nr_sequencia, 'N'), 'S')), 1,70),
			CASE WHEN coalesce(cd_pessoa_fisica::text, '') = '' THEN  substr(obter_dados_pf_pj(null, cd_cgc, 'CNES'), 1, 8)  ELSE substr(obter_dados_pf(cd_pessoa_fisica, 'CNES'), 1, 8) END ,
			substr(cd_cgc, 1, 14),
			somente_numero(substr(cd_prest_a400, 1, 8)),
			cd_prestador
		into STRICT	nm_hospital_w,
			cd_cnes_w,
			cd_cgc_w,
			cd_hospital_w,
			cd_prestador_w
		from	pls_prestador
		where	nr_sequencia	= r_c01_w.nr_seq_prestador;
	exception
	when others then
		nm_hospital_w	:= null;
		cd_cnes_w	:= null;
		cd_cgc_w	:= null;
		cd_hospital_w	:= null;
		cd_prestador_w	:= null;
	end;
	
	cd_hospital_w := coalesce(cd_hospital_w, r_c01_w.nr_seq_prestador);
	
	select	max(cd_ptu)
	into STRICT	cd_motivo_saida_w
	from	pls_motivo_saida
	where	nr_sequencia = r_c01_w.nr_seq_saida_int;
	
	-- 12/03/15 - jtonon - os 858024 - alteracao realizada para que o tipo de acomodacao nao seja pego da conta medica (pla_conta) e sim da autorizacao (pls_guia_plano), se nao tiver, utilizar do cadastro do beneficiario (pls_segurado e pls_plano).
	if (r_c01_w.nr_seq_guia IS NOT NULL AND r_c01_w.nr_seq_guia::text <> '') then
		select	max(nr_seq_tipo_acomodacao)
		into STRICT	nr_seq_tipo_acomodacao_w
		from	pls_guia_plano
		where	nr_sequencia		= r_c01_w.nr_seq_guia
		and	nr_seq_segurado		= r_c01_w.nr_seq_segurado;
		
	elsif (r_c01_w.cd_guia IS NOT NULL AND r_c01_w.cd_guia::text <> '') then
		select	max(nr_seq_tipo_acomodacao)
		into STRICT	nr_seq_tipo_acomodacao_w
		from	pls_guia_plano
		where	cd_guia			= r_c01_w.cd_guia
		and	nr_seq_segurado		= r_c01_w.nr_seq_segurado;
	end if;
	
	if (nr_seq_tipo_acomodacao_w IS NOT NULL AND nr_seq_tipo_acomodacao_w::text <> '') then
		select	coalesce(max(ie_tipo_acomodacao_ptu), 'A')
		into STRICT	ie_tipo_acomodacao_w
		from	pls_tipo_acomodacao
		where	nr_sequencia = nr_seq_tipo_acomodacao_w;
		
	elsif (r_c01_w.nr_seq_segurado IS NOT NULL AND r_c01_w.nr_seq_segurado::text <> '') then
		select	max(nr_seq_plano)
		into STRICT	nr_seq_plano_w
		from	pls_segurado
		where	nr_sequencia = r_c01_w.nr_seq_segurado;
		
		if (nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '') then
			select	pls_obter_dados_produto(nr_seq_plano_w, 'TAP')
			into STRICT	ie_tipo_acomodacao_w
			;
		end if;
	end if;
	
	ie_tipo_acomodacao_w := coalesce(ie_tipo_acomodacao_w, 'A');
	
	select	substr(coalesce(max(cd_ptu), 1), 1, 1)
	into STRICT	ie_tipo_internacao_w
	from	pls_clinica
	where	nr_sequencia = r_c01_w.nr_seq_clinica;
	
	ie_tipo_internacao_w := somente_numero(ie_tipo_internacao_w);
	
	-- se for do PTU 11.3 em diante.
	if (ie_versao_w >= 113) then
		if (ie_tipo_internacao_w = 6) then
			ie_tipo_internacao_w	:= 4;
		end if;
		
		if (ie_tipo_internacao_w = 7) then
			ie_tipo_internacao_w	:= 5;
		end if;
	end if;
	
	if (coalesce(ie_indicacao_acidente_w::text, '') = '') then
		ie_indicacao_acidente_w	:= '0';
	elsif (ie_indicacao_acidente_w = '0') then
		ie_indicacao_acidente_w	:= '1';
	elsif (ie_indicacao_acidente_w = '1') then
		ie_indicacao_acidente_w	:= '2';
	elsif (ie_indicacao_acidente_w = '1') then
		ie_indicacao_acidente_w	:= '3';
	end if;
	
	if (ie_tipo_acomodacao_w = 'A') then
		tx_mult_amb_w := 1;
	elsif (ie_tipo_acomodacao_w = 'B') then
		tx_mult_amb_w := 2;
	end if;
	
	case	r_c01_w.ie_tipo_faturamento
		when 'T' then ie_tipo_fat_w	:= 1; -- total
		when 'P' then ie_tipo_fat_w	:= 2; -- parcial
		when 'F' then ie_tipo_fat_w	:= 3; -- final
		when 'C' then ie_tipo_fat_w	:= 4; -- complementar
		else ie_tipo_fat_w		:= 1;
	end case;
	
	-- informacoes de auditoria
	SELECT * FROM ptu_obter_dados_aud_analise(r_c01_w.nr_seq_conta, nr_crm_auditor_w, nm_medico_auditor_w, cd_uf_crm_w, nr_coren_auditor_w, nm_enfer_auditor_w, cd_uf_coren_w) INTO STRICT nr_crm_auditor_w, nm_medico_auditor_w, cd_uf_crm_w, nr_coren_auditor_w, nm_enfer_auditor_w, cd_uf_coren_w;
	
	cd_prestador_w := coalesce(cd_prestador_w, to_char(cd_hospital_w));
	
	begin
	cd_hospital_w := pls_obter_convervao_ptu_a500('CD_HOSPITAL', cd_prestador_w, cd_hospital_w, cd_estabelecimento_w);
	exception
	when others then
		cd_hospital_w := somente_numero_char(substr(cd_prestador_w,1,8));
	end;
	
	nm_hospital_w := pls_obter_convervao_ptu_a500('NM_HOSPITAL', nm_hospital_w, nm_hospital_w, cd_estabelecimento_w);
	
	cd_cgc_w := pls_obter_convervao_ptu_a500('CD_CGC_HOSPITAL', cd_cgc_w, cd_cgc_w, cd_estabelecimento_w);
	
	-- campos que nao deverao conter informacoes quando a versao da tiss for superior a 3.00.00

	-- r503 - 	qt_nasc_vivos, qt_nasc_mortos, qt_nasc_vivos_pre, qt_obito_precoce, qt_obito_tardio, id_int_obstetricia_1, id_int_obstetricia_2, id_int_obstetricia_3, 

	--	id_int_obstetricia_4, id_int_obstetricia_5, id_int_obstetricia_6, id_int_obstetricia_7, id_int_obstetricia_8, id_int_obstetricia_9, tp_obito_mulher
	if (somente_numero(nr_ver_tiss_w) >= 30000) then
		qt_nasc_vivos_w			:= 0;
		qt_nasc_mortos_w		:= 0;
		qt_nasc_vivos_pre_w		:= 0;
		qt_obito_precoce_w		:= 0;
		qt_obito_tardio_w		:= 0;
		ie_gestacao_w			:= ' ';		-- id_int_obstetricia_1
		ie_obito_w			:= ' ';		-- id_int_obstetricia_2
		ie_transtorno_w			:= ' ';		-- id_int_obstetricia_3
		ie_complicacao_puerperio_w	:= ' ';		-- id_int_obstetricia_4
		ie_atend_rn_sala_parto_w	:= ' ';		-- id_int_obstetricia_5
		ie_complicacao_neonatal_w	:= ' ';		-- id_int_obstetricia_6
		ie_baixo_peso_w			:= ' ';		-- id_int_obstetricia_7
		ie_parto_cesaria_w		:= ' ';		-- id_int_obstetricia_8
		ie_parto_normal_w		:= ' ';		-- id_int_obstetricia_9
		ie_obito_mulher_w		:= null;
	end if;
	
	-- se for versao anterior a versao 9.0
	if (ie_versao_w < 90) then
		nm_hospital_w := substr(nm_hospital_w, 1,25);
	end if;
	
	-- se for versao igual ou superior a versao 11.0
	if (ie_versao_w >= 110) then
		nm_hospital_w := substr(nm_hospital_w, 1,60);
	end if;
	
	-- Versao 10.0a ou superior
	if (ie_versao_w >= 101) and (r_c01_w.ie_regime_internacao = '3') then -- (Domiciliar)
		cd_hospital_w := '0';
		cd_unimed_local_w := '0';
		ie_tipo_acomodacao_w := null;
		cd_cgc_w := lpad('0',14,'0');
		nm_hospital_w := null;
	end if;
	
	insert into ptu_nota_hospitalar(	nr_sequencia, 				dt_atualizacao, 			nm_usuario,
						dt_atualizacao_nrec, 			nm_usuario_nrec, 			nr_seq_nota_cobr,
						nr_lote, 				nr_nota, 				cd_unimed_hospital,
						cd_hospital, 				qt_obito_tardio, 			ie_int_gestacao,
						ie_int_aborto, 				ie_int_transtorno, 			nm_hospital,
						ie_tipo_acomodacao, 			dt_internacao, 				dt_alta,
						tx_mult_amb, 				ie_ind_acidente, 			cd_motivo_saida,
						cd_cgc_hospital, 			ie_tipo_internacao, 			qt_nasc_vivos,
						qt_nasc_mortos, 			qt_nasc_vivos_pre, 			qt_obito_precoce,
						ie_int_puerperio, 			ie_int_recem_nascido, 			ie_int_neonatal,
						ie_int_baixo_peso, 			ie_int_parto_cesarea, 			ie_int_parto_normal,
						ie_faturamento, 			cd_cid_obito, 				ie_obito_mulher,
						nr_declara_obito, 			reg_internacao, 			nr_crm_auditor,
						nm_medico_auditor, 			nr_coren_auditor, 			nm_enfer_auditor,
						cd_uf_crm, 				cd_uf_coren,				cd_cnes)
					values (nextval('ptu_nota_hospitalar_seq'),	clock_timestamp(), 				nm_usuario_p,
						clock_timestamp(), 				nm_usuario_p, 				nr_seq_cobranca_p,
						nr_lote_w, 				nr_nota_w, 				cd_unimed_local_w,
						cd_hospital_w, 				qt_obito_tardio_w, 			ie_gestacao_w,
						ie_obito_w,  				ie_transtorno_w, 			nm_hospital_w,
						ie_tipo_acomodacao_w, 			r_c01_w.dt_internacao, 			r_c01_w.dt_alta,
						tx_mult_amb_w, 				ie_indicacao_acidente_w,		cd_motivo_saida_w,
						cd_cgc_w, 				ie_tipo_internacao_w, 			qt_nasc_vivos_w,
						qt_nasc_mortos_w, 			qt_nasc_vivos_pre_w, 			qt_obito_precoce_w,
						ie_complicacao_puerperio_w, 		ie_atend_rn_sala_parto_w,		ie_complicacao_neonatal_w,
						ie_baixo_peso_w, 			ie_parto_cesaria_w, 			ie_parto_normal_w,
						ie_tipo_fat_w, 				cd_doenca_w, 				ie_obito_mulher_w,
						nr_declara_obito_w, 			r_c01_w.ie_regime_internacao, 		nr_crm_auditor_w,
						nm_medico_auditor_w, 			nr_coren_auditor_w, 			nm_enfer_auditor_w,
						cd_uf_crm_w, 				cd_uf_coren_w,				cd_cnes_w) returning nr_sequencia into nr_seq_hospitalar_w;
						
	-- Considera as inf da analise primeiro
	for r_c03_w in c03( r_c01_w.nr_seq_conta ) loop
		insert into ptu_nota_hosp_compl(	nr_sequencia, 								nr_seq_nota_hosp, 		dt_atualizacao,
							nm_usuario, 								dt_atualizacao_nrec, 		nm_usuario_nrec, 
							nr_declara_vivo, 							cd_cid_obito, 			nr_declara_obito,
							ie_recem_nascido)
					values (	nextval('ptu_nota_hosp_compl_seq'), 					nr_seq_hospitalar_w, 		clock_timestamp(), 
							nm_usuario_p, 								clock_timestamp(), 			nm_usuario_p, 
							ptu_somente_caracter_permitido(r_c03_w.nr_decl_nasc_vivo, 'AN'),	r_c03_w.cd_doenca, 		ptu_somente_caracter_permitido(r_c03_w.nr_declaracao_obito, 'AN'),
							r_c03_w.ie_indicador_dorn);
	end loop;
	
	-- Quando nao encontrar as inf na analise, sera carregada as inf da conta
	for r_c02_w in c02( r_c01_w.nr_seq_conta ) loop
		insert into ptu_nota_hosp_compl(	nr_sequencia, 								nr_seq_nota_hosp, 		dt_atualizacao,
							nm_usuario, 								dt_atualizacao_nrec, 		nm_usuario_nrec, 
							nr_declara_vivo, 							cd_cid_obito, 			nr_declara_obito,
							ie_recem_nascido)
					values (	nextval('ptu_nota_hosp_compl_seq'), 					nr_seq_hospitalar_w, 		clock_timestamp(), 
							nm_usuario_p, 								clock_timestamp(), 			nm_usuario_p, 
							ptu_somente_caracter_permitido(r_c02_w.nr_decl_nasc_vivo, 'AN'),	r_c02_w.cd_doenca, 		ptu_somente_caracter_permitido(r_c02_w.nr_declaracao_obito, 'AN'),
							r_c02_w.ie_indicador_dorn);
	end loop;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_nota_hospitalar ( nr_seq_cobranca_p ptu_nota_cobranca.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_interface_p interface.cd_interface%type) FROM PUBLIC;

