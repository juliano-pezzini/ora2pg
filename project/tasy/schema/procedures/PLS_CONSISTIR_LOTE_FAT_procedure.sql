-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_lote_fat ( nr_seq_lote_p bigint, dt_geracao_p timestamp, nm_usuario_p text, ie_inconsist_p INOUT text, ie_opcao_p text) AS $body$
DECLARE


/*
	ie_opcao_p
	A - Aviso
	C - Cobranca
*/
ie_inconsist_w			varchar(1)	:= 'N';			
nr_sequencia_w			w_pls_lote_fat_item.nr_sequencia%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_evento_w			w_pls_lote_fat_item.nr_seq_evento%type;
qt_registro_w			integer;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_regra_fat_w		pls_lote_faturamento.nr_seq_regra_fat%type;
nr_seq_conta_pos_contab_w	w_pls_lote_fat_item.nr_seq_conta_pos_contab%type;
nr_seq_conta_pos_w		w_pls_lote_fat_item.nr_seq_conta_pos%type;
ie_opcao_w			varchar(1);

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_conta_proc,
		a.nr_seq_conta_mat,
		a.nr_seq_evento,
		a.nr_seq_conta_pos_contab,
		a.nr_seq_conta_pos
	from	w_pls_lote_fat_item a
	where	a.nr_seq_lote	= nr_seq_lote_p
	and	a.nm_usuario	= nm_usuario_p;

C02 CURSOR FOR
	SELECT	a.nr_seq_conta_proc,
		a.nr_seq_conta_mat,
		a.nr_seq_evento,
		a.nr_seq_conta_pos_contab,
		a.nr_seq_conta_pos
	from	w_pls_lote_fat_item a
	where	a.nr_seq_lote	= nr_seq_lote_p
	and	a.nm_usuario	= nm_usuario_p
	and	(a.nr_seq_evento IS NOT NULL AND a.nr_seq_evento::text <> '')
	and	a.ie_evento_lote = 'N';				


BEGIN

ie_opcao_w := coalesce(ie_opcao_p, 'C');

if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	delete from pls_lote_fat_inconsist
	where	nr_seq_lote	= nr_seq_lote_p;
	
	select	a.nr_seq_regra_fat
	into STRICT	nr_seq_regra_fat_w
	from	pls_lote_faturamento a
	where	a.nr_sequencia	= nr_seq_lote_p;

	open C01;
	loop
	fetch C01 into
		nr_sequencia_w,
		nr_seq_conta_proc_w,
		nr_seq_conta_mat_w,
		nr_seq_evento_w,
		nr_seq_conta_pos_contab_w,
		nr_seq_conta_pos_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin	
		if (coalesce(nr_seq_evento_w::text, '') = '') then
			ie_inconsist_w	:= 'S';
			insert into pls_lote_fat_inconsist(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_lote,
				nr_seq_conta_proc,
				nr_seq_conta_mat,
				ie_tipo_inconsist,
				nr_seq_evento)
			values (nextval('pls_lote_fat_inconsist_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_lote_p,
				nr_seq_conta_proc_w,
				nr_seq_conta_mat_w,
				'1' /* Nao encontrado evento que se aplique regra */
,
				nr_seq_evento_w);

			
			
			if (ie_opcao_w = 'C') then
				update	pls_conta_pos_estabelecido
				set	nr_seq_lote_fat 	 = NULL,
					nr_seq_regra_evento_fat  = NULL,
					nr_seq_evento_fat 	 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w				
				or	nr_seq_conta_mat	= nr_seq_conta_mat_w
				and	ie_status_faturamento	!= 'A';	

			elsif (ie_opcao_w = 'A') then

				update	pls_conta_pos_estabelecido
				set	nr_seq_lote_fat 	 = NULL,
					nr_seq_regra_evento_fat  = NULL,
					nr_seq_evento_fat 	 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w
				or	nr_seq_conta_mat	= nr_seq_conta_mat_w
				and	ie_status_faturamento	= 'A';

			end if;
			
			if (nr_seq_conta_pos_contab_w IS NOT NULL AND nr_seq_conta_pos_contab_w::text <> '') then
				update	pls_conta_pos_estab_contab
				set	nr_seq_evento_fat	 = NULL,
					nr_seq_regra_evento_fat  = NULL,
					nr_seq_lote_fat		 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia		= nr_seq_conta_pos_contab_w;
			else
				
				update	pls_conta_pos_estab_contab
				set	nr_seq_evento_fat	 = NULL,
					nr_seq_regra_evento_fat  = NULL,
					nr_seq_lote_fat		 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
			end if;
		else
			/* Verificar se o evento nao entra no lote */

			select	count(1)
			into STRICT	qt_registro_w
			from	pls_regra_fat_evento a
			where	a.nr_seq_regra	= nr_seq_regra_fat_w
			and	a.nr_seq_evento = nr_seq_evento_w
			and	dt_geracao_p between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,dt_geracao_p)  LIMIT 1;
			
			/* Se  o evento nao entrar no lote, tem que ver se algum item da mesma conta */

			if (qt_registro_w > 0) then
				update	w_pls_lote_fat_item
				set	ie_evento_lote	= 'S'
				where	nr_sequencia	= nr_sequencia_w;
			else
				update	w_pls_lote_fat_item
				set	ie_evento_lote	= 'N'
				where	nr_sequencia	= nr_sequencia_w;
			end if;
		end if;
		end;
	end loop;
	close C01;
	commit;
	
	/* Verificar 2a inconsistencia */

	open C02;
	loop
	fetch C02 into	
		nr_seq_conta_proc_w,
		nr_seq_conta_mat_w,
		nr_seq_evento_w,
		nr_seq_conta_pos_contab_w,
		nr_seq_conta_pos_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
			select	nr_seq_conta
			into STRICT	nr_seq_conta_w
			from	pls_conta_proc a
			where	a.nr_sequencia	= nr_seq_conta_proc_w;
		
			select	count(1)
			into STRICT	qt_registro_w
			from	w_pls_lote_fat_item a
			where	a.nr_seq_lote	= nr_seq_lote_p
			and	a.nr_seq_conta	= nr_seq_conta_w
			and	a.ie_evento_lote = 'S'  LIMIT 1;
		elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
			select	nr_seq_conta
			into STRICT	nr_seq_conta_w
			from	pls_conta_mat a
			where	a.nr_sequencia	= nr_seq_conta_mat_w;
		
			select	count(1)
			into STRICT	qt_registro_w
			from	w_pls_lote_fat_item a
			where	a.nr_seq_lote	= nr_seq_lote_p
			and	a.nr_seq_conta	= nr_seq_conta_w
			and	a.ie_evento_lote = 'S'  LIMIT 1;
		end if;
		
		if (qt_registro_w > 0) then
			ie_inconsist_w	:= 'S';
			
			insert into pls_lote_fat_inconsist(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_lote,
				nr_seq_conta_proc,
				nr_seq_conta_mat,
				ie_tipo_inconsist,
				nr_seq_evento)
			values (nextval('pls_lote_fat_inconsist_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_lote_p,
				nr_seq_conta_proc_w,
				nr_seq_conta_mat_w,
				'2' /* Ha itens desta conta que entram no lote mas este evento nao incide no lote */
,
				nr_seq_evento_w);
				
			if (ie_opcao_w = 'C') then

				update	pls_conta_pos_estabelecido
				set	nr_seq_lote_fat 	 = NULL,
					nr_seq_regra_evento_fat  = NULL,
					nr_seq_evento_fat 	 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w
				or	nr_seq_conta_mat	= nr_seq_conta_mat_w
				and	ie_status_faturamento	!= 'A';

			elsif (ie_opcao_w = 'A') then


				update	pls_conta_pos_estabelecido
				set	nr_seq_lote_fat 	 = NULL,
					nr_seq_regra_evento_fat  = NULL,
					nr_seq_evento_fat 	 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w
				or	nr_seq_conta_mat	= nr_seq_conta_mat_w
				and	ie_status_faturamento	= 'A';
			end if;

			
			
			if (nr_seq_conta_pos_contab_w IS NOT NULL AND nr_seq_conta_pos_contab_w::text <> '') then
				update	pls_conta_pos_estab_contab
				set	nr_seq_evento_fat	 = NULL,
					nr_seq_regra_evento_fat	 = NULL,
					nr_seq_lote_fat		 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia		= nr_seq_conta_pos_contab_w;
			else
				update	pls_conta_pos_estab_contab
				set	nr_seq_evento_fat	 = NULL,
					nr_seq_regra_evento_fat	 = NULL,
					nr_seq_lote_fat		 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
			end if;
		end if;
		end;
	end loop;
	close C02;
	commit;

	
	ie_inconsist_p	:= ie_inconsist_w;	
end if;

/* Commit na procedure externa */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_lote_fat ( nr_seq_lote_p bigint, dt_geracao_p timestamp, nm_usuario_p text, ie_inconsist_p INOUT text, ie_opcao_p text) FROM PUBLIC;

