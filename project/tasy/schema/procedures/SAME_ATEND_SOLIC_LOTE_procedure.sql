-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE same_atend_solic_lote ( ds_prontuario_p text, ie_forma_controle_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
ds_prontuario_w			varchar(2000);
ie_contador_w			bigint	:= 0;
tam_lista_w			bigint;
ie_pos_virgula_w		smallint;
nr_seq_pront_w			bigint;
cd_pessoa_fisica_w		varchar(10);
cd_pessoa_solicitante_w		varchar(10);
cd_setor_atendimento_w		integer;
nr_seq_solic_pront_w		bigint;
nr_seq_solic_w			bigint;
nr_seq_same_pront_w		bigint;

cd_pessoa_pront_w		varchar(10);
nr_atendimento_w		bigint;

ie_status_param_w		varchar(1);
ie_setor_same_w			varchar(1);

cd_setor_same_w			bigint;
cd_setor_solicitante_w		integer;
ds_parametro_w			varchar(10) := obter_valor_param_usuario(941,103,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p);
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
nr_seq_prontuario_w		bigint;
ie_status_w			varchar(5);
dt_devolucao_w			timestamp;
dt_recebimento_w		timestamp;
ds_local_pront_w		varchar(100);
ds_tipo_w			varchar(40);
count_pront_w			bigint;
nr_seq_lote_w			bigint;
ie_atual_setor_atend_pront_w	varchar(1);
ds_mensagem_w			varchar(350);
ds_enter_w			varchar(10) := chr(13) || chr(10);

C01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	same_prontuario 
	where (nr_atendimento		= nr_atendimento_w or nr_atendimento_w = 0) 
	and	cd_pessoa_fisica	= coalesce(cd_pessoa_pront_w, cd_pessoa_fisica) 
	and	dt_periodo_inicial_w	>= dt_periodo_inicial 
	and	dt_periodo_final_w	<= coalesce(dt_periodo_final,clock_timestamp()) 
	and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p)) 
	order 	by nr_atendimento;

C02 CURSOR FOR 
	SELECT	nr_sequencia 
	from	same_prontuario 
	where (nr_atendimento		= nr_atendimento_w or nr_atendimento_w = 0) 
	and	cd_pessoa_fisica	= coalesce(cd_pessoa_pront_w, cd_pessoa_fisica) 
	and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p)) 
	order 	by nr_atendimento;


BEGIN 
 
ie_atual_setor_atend_pront_w 	:= coalesce(Obter_Valor_Param_Usuario(941, 112, Obter_perfil_Ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');
ie_setor_same_w			:= coalesce(obter_valor_param_usuario(941, 113, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');
 
ds_prontuario_w		:= ds_prontuario_p;
 
select	substr(obter_pessoa_fisica_usuario(nm_usuario_p, 'C'),1,10), 
	obter_setor_usuario(nm_usuario_p) 
into STRICT	cd_pessoa_fisica_w, 
	cd_setor_atendimento_w
;
 
while	(ds_prontuario_w IS NOT NULL AND ds_prontuario_w::text <> '') or ie_contador_w > 200 loop 
	begin 
	tam_lista_w		:= length(ds_prontuario_w);
	ie_pos_virgula_w	:= position(',' in ds_prontuario_w);
 
	if (ie_pos_virgula_w <> 0) then 
		nr_seq_pront_w		:= substr(ds_prontuario_w,1,(ie_pos_virgula_w-1));
		ds_prontuario_w		:= substr(ds_prontuario_w,(ie_pos_virgula_w+1),tam_lista_w);
	end if;
	 
	if (ie_forma_controle_p = 'N') then 
 
		select	max(nr_seq_lote) 
		into STRICT	nr_seq_lote_w 
		from	same_solic_pront 
		where	nr_sequencia = nr_seq_pront_w;
	 
		select	max(a.nr_sequencia) 
		into STRICT	nr_seq_solic_pront_w 
		from	same_solic_pront a 
		where	a.nr_sequencia		= nr_seq_pront_w 
		and	a.ie_status		= 'P' 
		and	coalesce(a.dt_receb_devolucao::text, '') = '';
		 
		update	same_solic_pront 
		set	dt_receb_devolucao	= clock_timestamp(), 
			nm_usuario_receb_dev = nm_usuario_p, 
			dt_atualizacao	= clock_timestamp(), 
			nm_usuario	= nm_usuario_p, 
			ie_status	= 'E' 
		where	nr_sequencia	= nr_seq_solic_pront_w 
		and	coalesce(dt_receb_devolucao::text, '') = '';
		 
		select	max(a.cd_pessoa_fisica), 
			coalesce(max(a.nr_atendimento),0), 
			max(a.cd_pessoa_solicitante), 
			max(a.cd_setor_solicitante), 
			max(dt_periodo_inicial), 
			max(dt_periodo_final) 
		into STRICT	cd_pessoa_pront_w, 
			nr_atendimento_w, 
			cd_pessoa_solicitante_w, 
			cd_setor_solicitante_w, 
			dt_periodo_inicial_w, 
			dt_periodo_final_w 
		from	same_solic_pront a 
		where	a.nr_sequencia = nr_seq_pront_w;
		 
		if (dt_periodo_inicial_w IS NOT NULL AND dt_periodo_inicial_w::text <> '') and (dt_periodo_final_w IS NOT NULL AND dt_periodo_final_w::text <> '') then 
			open C01;
			loop 
			fetch C01 into	 
				nr_seq_same_pront_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin 
				if (ie_atual_setor_atend_pront_w = 'S') then 
					update	same_prontuario 
					set	cd_setor_atendimento = cd_setor_solicitante_w 
					where	nr_sequencia = nr_seq_same_pront_w;
				end if;
				 
				CALL Same_Gerar_Historico(	nr_seq_same_pront_w, 
							31, 
							cd_pessoa_solicitante_w, 
							cd_setor_solicitante_w, 
							nm_usuario_p);
				end;
			end loop;
			close C01;
		else 
			open C02;
			loop 
			fetch C02 into	 
				nr_seq_same_pront_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin 
				if (ie_atual_setor_atend_pront_w = 'S') then 
					update	same_prontuario 
					set	cd_setor_atendimento = cd_setor_solicitante_w 
					where	nr_sequencia = nr_seq_same_pront_w;
				end if;
				 
				CALL Same_Gerar_Historico(	nr_seq_same_pront_w, 
							31, 
							cd_pessoa_solicitante_w, 
							cd_setor_solicitante_w, 
							nm_usuario_p);
				end;
			end loop;
			close C02;
		end if;
		 
	else 
		select	max(b.nr_sequencia), 
			max(b.nr_seq_solic) 
		into STRICT	nr_seq_solic_pront_w, 
			nr_seq_solic_w 
		from	same_solic_pront a, 
			same_solic_pront_envelope b 
		where	a.nr_sequencia		= b.nr_seq_solic 
		and	b.nr_seq_prontuario	= nr_seq_pront_w 
		and	coalesce(b.dt_receb_devolucao::text, '') = '';
 
		update	same_solic_pront_envelope 
		set	dt_atualizacao	= clock_timestamp(), 
			nm_usuario	= nm_usuario_p 
		where	nr_sequencia	= nr_seq_solic_pront_w 
		and	coalesce(dt_receb_devolucao::text, '') = '';
		 
		 
			 
		update	same_solic_pront 
		set	ie_status = 'E', 
			dt_atualizacao	= clock_timestamp(), 
			nm_usuario	= nm_usuario_p, 
			dt_entrega	= clock_timestamp() 
		where	nr_sequencia = nr_seq_solic_w;
		 
		select	max(nr_seq_lote), 
			max(cd_pessoa_solicitante), 
			max(cd_setor_solicitante) 
		into STRICT	nr_seq_lote_w, 
			cd_pessoa_solicitante_w, 
			cd_setor_solicitante_w 
		from	same_solic_pront 
		where	nr_sequencia = nr_seq_solic_w;
							 
		select	max(a.nr_sequencia), 
			max(a.nr_atendimento), 
			max(a.ie_status), 
			max(substr(obter_local_prontuario(a.nr_sequencia),1,100)), 
			max(substr(obter_valor_dominio(1219, a.ie_tipo),1,40)), 
			max(b.dt_devolucao), 
			max(b.dt_recebimento) 
		into STRICT	nr_seq_prontuario_w, 
			nr_atendimento_w, 
			ie_status_w, 
			ds_local_pront_w, 
			ds_tipo_w, 
			dt_devolucao_w, 
			dt_recebimento_w 
		from	same_solic_pront_envelope b, 
			same_prontuario a 
		where	b.nr_sequencia		= nr_seq_solic_pront_w 
		and	a.nr_sequencia		= b.nr_seq_prontuario;
		 
		if (ie_status_w = '1') and (coalesce(dt_devolucao_w::text, '') = '') and (coalesce(dt_recebimento_w::text, '') = '') then 
			update	same_prontuario 
			set	ie_status	= '8', 
				dt_atualizacao	= clock_timestamp(), 
				nm_usuario	= nm_usuario_p, 
				cd_setor_atendimento = CASE WHEN ie_atual_setor_atend_pront_w='S' THEN cd_setor_solicitante_w  ELSE cd_setor_atendimento END  
			where	nr_sequencia	= nr_seq_prontuario_w;				
			CALL Same_Gerar_Historico(nr_seq_prontuario_w, 11, cd_pessoa_solicitante_w, cd_setor_solicitante_w, nm_usuario_p);
		elsif (coalesce(dt_devolucao_w::text, '') = '') and (coalesce(dt_recebimento_w::text, '') = '') then 
						 
			rollback;
			 
			ds_mensagem_w := null;
			 
			if (nr_seq_prontuario_w IS NOT NULL AND nr_seq_prontuario_w::text <> '') then 
				--Prontuário (#@NR_SEQ_PRONTUARIO#@) solicitado não encontra-se no SAME. 
				ds_mensagem_w := wheb_mensagem_pck.get_Texto(459150,'NR_SEQ_PRONTUARIO='||to_char(nr_seq_prontuario_w));
					 
				if (ds_local_pront_w IS NOT NULL AND ds_local_pront_w::text <> '') then 
					--Local atual no hospital: #@DS_LOCAL_PRONT#@. 
					ds_mensagem_w := ds_mensagem_w||ds_enter_w||wheb_mensagem_pck.get_Texto(459152,'DS_LOCAL_PRONT='||ds_local_pront_w);
				end if;
				 
			else 
				--Prontuário não encontrado. Verifique o número do prontuário informado e tente novamente. 
				ds_mensagem_w := wheb_mensagem_pck.get_Texto(69134,null);
			end if;
			 
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(ds_mensagem_w);
			 
		end if;		
		 
	end if;
	 
	select 	count(*) 
	into STRICT	count_pront_w 
	from	same_solic_pront a, 
		same_solic_pront_lote b 
	where	a.nr_seq_lote = b.nr_sequencia 
	and 	a.ie_status = 'P' 
	and	b.nr_sequencia = nr_seq_lote_w;
	 
	if (count_pront_w = 0) then 
		update 	same_solic_pront_lote 
		set 	ie_status	= 'E', 
			dt_entrega	= clock_timestamp(), 
			dt_atualizacao	= clock_timestamp(), 
			nm_usuario	= nm_usuario_p 
		where	nr_sequencia 	= nr_seq_lote_w;
	end if;
	 
	ie_contador_w	:= ie_contador_w + 1;
 
	end;
end loop;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE same_atend_solic_lote ( ds_prontuario_p text, ie_forma_controle_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

