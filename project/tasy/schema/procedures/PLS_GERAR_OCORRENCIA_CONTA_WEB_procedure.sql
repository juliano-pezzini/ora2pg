-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE itens AS (	nr_seq_conta_proc		bigint,
			nr_seq_conta_mat		bigint,
			cd_procedimento			bigint,
			ie_origem_proced		bigint,
			nr_seq_material			bigint);
CREATE TYPE ocor AS (	nr_seq_ocorrencia		bigint,
			nr_seq_motivo_glosa		bigint,
			ie_auditoria			varchar(3),
			qt_excecao			bigint,
			qt_regra_conta			bigint,
			qt_regra_item			bigint,
			ie_lib_web_guia			varchar(5));


CREATE OR REPLACE PROCEDURE pls_gerar_ocorrencia_conta_web ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, nr_seq_prestador_atend_p pls_prestador.nr_sequencia%type, nr_seq_prestador_solic_p pls_prestador.nr_sequencia%type, nr_seq_prestador_exec_p pls_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


cd_procedimento_w		bigint;
cd_procedimento_regra_w		bigint;
cd_motivo_alta_w		varchar(3);
cd_motivo_alta_regra_w		varchar(3);
cd_cgc_prestador_imp_w		varchar(20);
cd_cpf_prestador_imp_w		varchar(20);
cd_cgc_executor_imp_w		varchar(20);
cd_cpf_executor_imp_w		varchar(20);
cd_cgc_prestador_prot_imp_w	varchar(255);
cd_tiss_tipo_acomodacao_w	varchar(20);/*askono*/
cd_tipo_acomodacao_imp_w	varchar(2);/*askono*/
ie_usuario_val_w		varchar(2) := 'N';
nr_seq_prestador_partic_w	varchar(2);
cd_procedimento_imp_w		numeric(20);
qt_mat_liberado_w		bigint;
nr_protocolo_prestador_w	varchar(20);

cd_area_procedimento_w		bigint := 0;
cd_especialidade_w		bigint := 0;
cd_grupo_proc_w			bigint := 0;
nr_seq_estrutura_mat_w		bigint := 0;
cd_guia_imp_w			varchar(20);
cd_guia_solic_imp_w		varchar(20);
cd_guia_importacao_w		varchar(20);
cd_pessoa_fisica_w		varchar(255);
dt_nascimento_w			timestamp;
ie_consiste_mat_prestador_w	varchar(1);
nr_seq_tipo_atendimento_w	bigint;
nr_seq_segurado_w		bigint;
cd_medico_exec_imp_w		varchar(20);
ie_gerou_partic_w		varchar(2);
nr_seq_partic_w			bigint;
ie_incidencia_quantidade_w	varchar(1);

ds_observacao_w			varchar(4000);
ds_motivo_saida_regra_w		varchar(250);
dt_emissao_w			timestamp;
dt_alta_int_w			timestamp;
dt_entrada_int_w		timestamp;
dt_procedimento_w		timestamp;
dt_material_w			timestamp;
dt_atendimento_w		timestamp;
dt_mes_competencia_w		timestamp;

ie_apresentacao_w		varchar(5);
ie_apresentacao_regra_w		varchar(5);
ie_regulamentacao_w		varchar(5);
ie_regulamentacao_ww		varchar(5);
ie_gerar_oc_partic_ww		varchar(1);
ie_gerar_oc_partic_w		varchar(1);
ie_origem_proced_w		bigint;
ie_origem_proced_regra_w	bigint;
ie_tipo_guia_w			varchar(2);
ie_data_conta_w			smallint;
ie_data_item_w			smallint;
ie_tipo_item_w			varchar(1)	:= 'C';
ie_qtd_item_fracionada_w	varchar(1);
ie_tipo_data_envio_w		varchar(10);
ie_data_alta_w			varchar(1);
ie_atributo_w			bigint;
ie_obrigatorio_w		varchar(1);
ie_tipo_prestador_w		varchar(10);
ie_prestador_inativo_w		varchar(1);
ie_situacao_prest_w		varchar(1) := 'S';
ie_excecao_w			varchar(1) := 'N';
ie_nascido_vivo_w		varchar(1);
ie_tipo_atendimento_imp_w	varchar(2);
ie_prestador_exec_w		varchar(1);--askono
ie_somar_estrutura_w		varchar(1);
ie_valor_negativo_w		varchar(1);
ie_segurado_igual_w		varchar(1);
ie_benef_autorizacao_w		varchar(1);
ie_preco_w			varchar(2);
ie_preco_regra_w		varchar(2);
ie_tipo_segurado_w		varchar(3);
ie_tipo_restricao_w		smallint;
ie_grupo_prest_w		varchar(1)	:= 'S';
ie_gerado_w			varchar(1);
ie_tipo_valor_w			varchar(2);
ie_tipo_repasse_w		varchar(2);
ie_bloqueia_custo_op_w		varchar(10);
ie_bloqueia_pre_pag_w		varchar(10);
ie_bloqueia_intercambio_w	varchar(10);
ie_bloqueia_prod_nao_reg_w	varchar(10);
ie_bloqueia_prod_reg_w		varchar(10);
cd_medico_executor_w		varchar(20);
nr_crm_executor_w		varchar(20);
ie_medico_cooperado_w		varchar(5);
ie_valida_guia_principal_w	varchar(1);
ie_valida_guia_referencia_w	varchar(1);
ie_valida_prest_exec_w		varchar(1);

nr_seq_participante_ww		bigint;
nr_seq_regra_partic_w		bigint;
nr_seq_categoria_w		bigint;
nr_seq_categoria_regra_w	bigint;
nr_seq_estrutura_w		bigint;
nr_seq_regra_w			bigint;
nr_seq_ocorrencia_w		bigint;
nr_seq_ocorrencia_benef_w	bigint;
nr_seq_motivo_glosa_w		bigint;
nr_seq_grupo_servico_w		bigint;
nr_seq_material_w		bigint	:= null;
nr_seq_material_regra_w		bigint;
nr_seq_tipo_atend_w		bigint;
nr_seq_proc_tipo_atend_regra_w	bigint;
nr_seq_tipo_atend_regra_w	bigint;
nr_seq_prestador_exec_w		bigint;
nr_seq_protocolo_w		bigint;
nr_seq_prestador_imp_w		varchar(20);
nr_crm_prest_solic_imp_w	varchar(20);
nr_seq_prestador_w		bigint;
nr_seq_prestador_exec_imp_w	varchar(20);
nr_seq_prestador_exec_imp_ww	bigint;
nr_seq_prestador_regra_w	bigint;
nr_cpf_prestador_prot_imp_w	varchar(255);
nr_seq_prestador_prot_imp_w	varchar(255);
nr_seq_clinica_w		varchar(10);
nr_seq_clinica_imp_w		varchar(10);
nr_seq_tipo_acomodacao_regra_w	bigint;
nr_seq_estrut_mat_w		bigint;
nr_seq_guia_w			varchar(10);
nr_Seq_segurado_guia_w		bigint;
nr_seq_segurado_conta_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_grupo_prestador_w	bigint;
nr_seq_classificacao_w		bigint;
nr_contrato_regra_w		bigint;
nr_seq_contrato_w		bigint;
nr_contrato_w			bigint;
nr_seq_lote_w			bigint;
nr_seq_tipo_acomodacao_imp_w	bigint;
nr_seq_lote_conta_w		bigint;
qt_participante_proc_w		bigint;
qt_minimo_item_w		double precision;
qt_maximo_item_w		double precision;
qt_situacao_prest_w		bigint;
qt_procedimento_w		double precision;
qt_participantes_w		bigint;
qt_material_w			double precision;
qt_guia_ref_val_w		bigint;
qt_guia_princ_valida_w		bigint;
qt_dias_envio_w			bigint;
qt_cid_obito_w			bigint;
qt_medico_partic_w		bigint;
qt_cid_doenca_w			bigint;
qt_excecao_w			bigint;
qt_nasc_vivos_prematuros_imp_w	integer;
qt_nasc_vivos_imp_w		bigint;
qt_total_vivos_w		bigint;
qt_reg_w			bigint;
qt_retorno_sum_estrut_w		bigint;
sg_cons_prest_solic_imp_w	varchar(20);
uf_crm_prest_solic_imp_w	medico.uf_crm%type;
vl_minimo_item_w		double precision;
vl_max_item_w			double precision;
vl_material_w			double precision;
vl_procedimento_w		double precision;
vl_retorno_sum_estrut_w		double precision;
qt_liberada_w			double precision;
qt_tipo_quantidade_w		double precision;
ie_tipo_qtde_w			varchar(3);
ie_qt_lib_posterior_w		varchar(3);
ie_regra_qtde_w			varchar(10);
ie_tipo_pessoa_qtde_w		varchar(10);
ie_tipo_item_ww			smallint;
ie_qtde_liberacao_w		varchar(2);
ie_acesso_web_w			varchar(1);
nr_seq_usu_prestador_w		bigint;
ie_status_lib_matmed_regra_w	smallint;
ie_mat_espec_aut_w		varchar(2);
nr_seq_guia_ww			bigint;
nr_seq_material_lib_w		bigint;
ie_autorizacao_especial_w	varchar(2) := 'N';
ie_autorizacao_espec_regra_w 	varchar(2);
ie_mat_espec_aut_ww		varchar(2);
nr_seq_restricao_w		bigint;
ie_consistir_cod_guia_w		varchar(1);
qt_guias_w			bigint;
nr_seq_grupo_rec_regra_w	bigint;
nr_seq_grupo_rec_w		bigint;
ie_consiste_material_w		varchar(1);
ie_internacao_w			varchar(1);
nr_seq_tipo_acomod_benef_w	bigint;
ie_unid_tempo_idade_w		varchar(1);
qt_idade_min_w			smallint;
qt_idade_max_w			smallint;
qt_idade_meses_w		integer;
qt_idade_w			varchar(5);
nr_seq_regra_atrib_w		bigint;
ie_espec_medica_w		varchar(10);
cd_especialidade_medica_w	bigint;
ie_exige_medico_w		varchar(10)	:= 'N';
ie_valida_inf_medico_w		varchar(10)	:= 'N';
nm_medico_executor_imp_w	varchar(255);
sg_conselho_exec_imp_w		varchar(20);
nr_crm_exec_imp_w		varchar(20);
uf_crm_exec_imp_w		medico.uf_crm%type;
qt_participante_w		bigint	:= 0;
qt_min_digito_crm_w		bigint;
nr_seq_usuario_web_w		bigint;
vl_unitario_proc_w		bigint;
vl_unitario_mat_w		bigint;
ie_bloqueio_mat_w		varchar(10);
qt_ocorrencia_partic_w		bigint;
nr_seq_grau_partic_w		bigint;
nr_seq_grau_partic_c02_w	bigint;
nr_seq_grau_partic_conta_w	bigint;
dt_emissao_ww			timestamp;
dt_protocolo_w			timestamp;

nr_seq_estrut_regra_w		bigint;
ie_estrut_mat_w			varchar(1);
qt_item_existe_conta_w		bigint;
qt_medico_inv_w			bigint;

nm_medico_executor_proc_w	varchar(255);
nr_crm_imp_proc_w		varchar(20);
uf_crm_imp_proc_w		medico.uf_crm%type;
sg_conselho_imp_proc_w		varchar(20);
ie_medico_crm_w			varchar(1);
nr_crm_solic_imp_w		varchar(20);
ie_consiste_exec_coop_w		varchar(1);
ie_prest_medico_w		varchar(2);
nr_seq_intercambio_w		bigint;
nr_seq_intercambio_ww		bigint;
ie_validacao_compl_prest_w	varchar(1)	:= 'S';

ie_nasc_vivos_termo_w		varchar(2);
ie_nasc_mortos_w		varchar(2);
ie_nasc_vivos_prematuros_w	varchar(2);
ie_obito_precoce_w		varchar(2);
ie_obito_tardio_w		varchar(2);
qt_nasc_vivos_termo_w		varchar(2);
qt_nasc_mortos_w		varchar(2);
qt_nasc_vivos_prematuros_w	varchar(2);
qt_obito_precoce_w		varchar(2);
qt_obito_tardio_w		varchar(2);
nr_seq_regra_tp_guia_w		bigint;
nr_seq_saida_int_W		bigint;
ie_gera_ocor_w			varchar(1);
ie_pcmso_w			varchar(1);
ie_tipo_ocorrencia_w		varchar(10);
ie_consiste_prest_fornec_w	varchar(1);
nr_seq_conta_proc_w		bigint;
nr_seq_prestador_fornec_w	bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_prest_fornec_w		bigint;
ie_tipo_desp_mat_w		bigint;
cd_material_imp_w		varchar(20);
ie_tipo_ocor_valid_w		varchar(3);
ie_proc_mat_w			varchar(1)	:= 'A';
qt_regra_conta_w		bigint;
qt_regra_item_w			bigint;
cd_usuario_plano_imp_w		varchar(30);
ie_tipo_tabela_w		varchar(10);
ie_tipo_tabela_imp_w		varchar(10);

ie_existe_medico_w		varchar(1);
cd_prestador_w			varchar(255);
ie_valida_tag_opm_w		varchar(1);
qt_opm_w			integer;
ie_primeira_vez_w		varchar(3);
ie_valida_prest_solic_w		varchar(1);
nr_seq_requisicao_w		bigint;
nr_seq_prest_requisicao_w	bigint;
ie_prest_conta_w		varchar(1)	:= 'N';
nr_seq_prest_inativo_w		bigint;
nm_prestador_inativo_w		varchar(255);
nr_seq_guia_dup_w		bigint;
ie_lib_web_guia_w		varchar(1);
ie_obito_imp_w			varchar(10);
nr_declaracao_obito_imp_w	varchar(20);
cd_doenca_imp_w			varchar(10);
ie_exige_proc_mat_w		varchar(1);
ie_existe_proc_mat_w		varchar(1)	:= 'N';
ie_valida_prest_prot_w		varchar(1);
cd_prest_requisicao_w		varchar(30);
cd_prest_protocolo_w		varchar(30);
nm_prestador_exec_imp_w		varchar(255);
dt_atendimento_referencia_w	timestamp;
qt_regra_prest_w		integer;
ie_ocorrencia_w			pls_controle_estab.ie_ocorrencia%type := pls_obter_se_controle_estab('GO');

C00 CURSOR(	ie_ocorrencia_pc	pls_controle_estab.ie_ocorrencia%type,
		cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type) FOR
	SELECT	b.nr_sequencia,
		b.nr_seq_motivo_glosa,
		b.ie_lib_web_guia
	from	pls_ocorrencia b
	where	b.ie_situacao	= 'A'
	and	b.cd_estabelecimento = cd_estabelecimento_pc
	and	ie_ocorrencia_pc = 'S'
	and (coalesce(b.ie_regra_combinada::text, '') = '' or b.ie_regra_combinada = 'N')
	and	exists (SELECT	1
			from	pls_ocorrencia_conta_web x
			where	x.nr_seq_ocorrencia = b.nr_sequencia)
	
union all

	select	b.nr_sequencia,
		b.nr_seq_motivo_glosa,
		b.ie_lib_web_guia
	from	pls_ocorrencia b
	where	b.ie_situacao	= 'A'
	and	ie_ocorrencia_pc = 'N'
	and (coalesce(b.ie_regra_combinada::text, '') = '' or b.ie_regra_combinada = 'N')
	and	exists (select	1
			from	pls_ocorrencia_conta_web x
			where	x.nr_seq_ocorrencia = b.nr_sequencia)
	order by
		nr_sequencia;

C01 CURSOR FOR
	SELECT	a.nr_seq_estrutura,
		a.nr_sequencia,
		a.ie_data_conta,
		a.ie_data_item,
		a.vl_minimo_item,
		a.vl_max_item,
		a.qt_minimo_item,
		a.qt_maximo_item,
		a.nr_seq_grupo_servico,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_material,
		a.ie_qtd_item_fracionada,
		a.qt_dias_envio,
		a.nr_seq_saida_int,
		a.ie_data_alta,
		a.nr_seq_proc_tipo_atend,
		a.ie_atributo,
		a.ie_obrigatorio,
		a.ie_tipo_prestador,
		a.ie_prestador_inativo,
		a.nr_seq_clinica,
		a.ie_nascido_vivo,
		a.ie_prestador_exec,
		a.nr_seq_prestador,
		a.nr_seq_tipo_acomodacao,
		a.ie_valor_negativo,
		a.ie_benef_autorizacao,
		a.ie_somar_estrutura,
		a.nr_seq_estrut_mat,
		a.nr_seq_grupo_prestador,
		a.ie_tipo_restricao,
		a.nr_contrato,
		a.qt_liberada,/*askono*/
		a.qt_tipo_quantidade,
		a.ie_tipo_qtde,
		a.ie_qt_lib_posterior,
		a.ie_regra_qtde,
		a.ie_tipo_pessoa_qtde,
		a.ie_acesso_web,
		a.ie_status_lib_matmed,
		a.ie_unid_tempo_idade,
		a.qt_idade_min,
		a.qt_idade_max,
		a.nr_seq_regra_atrib,
		a.cd_especialidade_medica,
		a.ie_exige_medico,
		a.ie_valida_inf_medico,
		a.qt_min_digito_crm,
		a.ie_consistir_cod_guia,
		a.ie_consiste_exec_coop,
		a.nr_seq_grupo_rec,
		a.nr_seq_categoria,
		a.ie_tipo_data_envio,
		a.nr_seq_intercambio,
		a.ie_nasc_vivos_termo,
		a.ie_nasc_mortos,
		a.ie_nasc_vivos_prematuros,
		a.ie_obito_precoce,
		a.ie_obito_tardio,
		a.nr_seq_regra_tp_guia,
		a.ie_tipo_ocorrencia,
		a.ie_consiste_mat_prestador,
		a.ie_consiste_prest_fornec,
		a.nr_seq_tipo_atendimento,
		a.ie_bloqueio_mat,
		a.ie_tipo_valor,
		a.nr_seq_regra_partic,
		a.nr_seq_grau_partic,
		a.ie_regulamentacao,
		a.ie_apresentacao,
		a.cd_medico_executor,
		a.nr_crm_executor,
		a.ie_medico_cooperado,
		a.ie_mat_autorizacao_esp,
		a.ie_preco,
		a.ie_tipo_tabela,
		a.ie_incidencia_quantidade,
		a.ie_valida_tag_opm,
		a.ie_valida_guia_principal,
		a.ie_valida_guia_referencia,
		a.ie_valida_prest_solic,
		a.ie_valida_prest_exec,
		a.ie_valida_mat_proc_dia_tx,
		a.ie_valida_prestador_prot,
		(SELECT	count(1)
		from	pls_ocor_regra_prest x
		where	x.nr_seq_ocor_regra_web = a.nr_sequencia) qt_regra_prest
	from	pls_ocorrencia_conta_web a
	where	a.nr_seq_ocorrencia = nr_seq_ocorrencia_w
	and	a.ie_situacao = 'A'
	and (dt_emissao_w >= a.dt_inicio_vigencia or coalesce(a.dt_inicio_vigencia::text, '') = '')
	and (dt_emissao_w <= a.dt_fim_vigencia or coalesce(a.dt_fim_vigencia::text, '') = '')
	and	((coalesce(a.nr_contrato::text, '') = '') or (a.nr_contrato = nr_contrato_w))
	and	((coalesce(a.ie_tipo_guia::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_w))
	and	((coalesce(a.ie_tipo_segurado::text, '') = '') or (a.ie_tipo_segurado = ie_tipo_segurado_w))
	and	((coalesce(a.cd_procedimento::text, '') = '') or (a.cd_procedimento = cd_procedimento_w and a.ie_origem_proced = ie_origem_proced_w))
	and	((coalesce(a.cd_area_procedimento::text, '') = '') or (a.cd_area_procedimento = cd_area_procedimento_w))
	and	((coalesce(a.cd_grupo_proc::text, '') = '') or (a.cd_grupo_proc = cd_grupo_proc_w))
	and	((coalesce(a.cd_especialidade::text, '') = '') or (a.cd_especialidade = cd_especialidade_w))
	and	((coalesce(a.nr_seq_material::text, '') = '') or (a.nr_seq_material = nr_seq_material_w))
	and	((coalesce(a.nr_seq_tipo_acomod_benef::text, '') = '') or (a.nr_seq_tipo_acomod_benef  = nr_seq_tipo_acomod_benef_w))
	and	((coalesce(a.ie_pcmso::text, '') = '') or (a.ie_pcmso = ie_pcmso_w))
	and (a.ie_tipo_ocorrencia = ie_tipo_ocor_valid_w or coalesce(a.ie_tipo_ocorrencia::text, '') = '')
	and (a.ie_proc_mat = ie_proc_mat_w or a.ie_proc_mat = 'A' or coalesce(a.ie_proc_mat::text, '') = '');

C02 CURSOR FOR
	SELECT	nm_medico_executor_imp,
		nr_crm_imp,
		uf_crm_imp,
		sg_conselho_imp,
		nr_Seq_grau_partic,
		nr_sequencia
	from	pls_proc_participante
	where	nr_seq_conta_proc = nr_seq_conta_proc_w;

c03 CURSOR FOR
	SELECT	null,
		null,
		null,
		null,
		null
	from	pls_conta a
	where	a.nr_sequencia	= nr_seq_conta_p
	
union all

	SELECT	a.nr_sequencia,
		null,
		cd_procedimento,
		ie_origem_proced,
		null
	from	pls_conta_proc a
	where	nr_seq_conta	= nr_seq_conta_p
	
union all

	select	null,
		a.nr_sequencia,
		null,
		null,
		nr_seq_material
	from	pls_conta_mat a
	where	nr_seq_conta	= nr_seq_conta_p;

C04 CURSOR FOR
	SELECT	distinct nr_seq_participante
	from	w_pls_ocorrencia_partic
	where	nr_seq_ocorrencia 	= nr_seq_ocorrencia_w
	and	nm_usuario	  	= nm_usuario_p
	group by nr_seq_participante;

type vetor_itens is table of itens index by integer;

/* Vetores */

vetor_itens_w		vetor_itens;
i	bigint	:= 1;
k	bigint	:= 1;

type vetor_ocor is table of ocor index by integer;

/* Vetores */

vetor_ocor_w		vetor_ocor;
total_ocor		bigint	:= 1;
ind_ocor		bigint	:= 1;

/*Diego OS - 311701
    Esta procedure é chamada no momento da importação do arquivo TISS de importação de contas.
    Tem por objetivo a consistência de dados segundo regras de ocorrência criadas pelo usuário.*/
BEGIN
/*Obter dados da conta*/

select	a.ie_tipo_guia,
	trunc(coalesce(a.dt_atendimento_imp_referencia,clock_timestamp())),
	trunc(a.dt_alta_imp),
	trunc(a.dt_entrada_imp),
	trunc(a.dt_atendimento_imp),
	a.cd_motivo_alta_imp,
	a.ie_tipo_atendimento_imp,
	a.nr_seq_protocolo,
	a.nr_seq_prestador_imp_ref,
	a.cd_cgc_prestador_imp,
	a.cd_cpf_prestador_imp,
	a.nr_crm_prest_solic_imp,
	a.sg_cons_prest_solic_imp,
	a.uf_crm_prest_solic_imp,
	a.nr_seq_prestador_exec_imp,
	a.nr_seq_prestador_exec_imp_ref,
	a.cd_cgc_executor_imp,
	a.cd_cpf_executor_imp,
	a.nr_seq_clinica_imp,
	(a.qt_nasc_vivos_prematuros_imp)::numeric ,
	(a.qt_nasc_vivos_imp)::numeric ,
	a.cd_tipo_acomodacao_imp,
	a.cd_guia_imp,
	a.cd_guia_solic_imp,
	a.nr_seq_segurado,
	a.nr_seq_plano,
	a.nm_medico_executor_imp,
	a.sg_conselho_exec_imp,
	a.nr_crm_exec_imp,
	a.uf_crm_exec_imp,
	a.nr_crm_solic_imp,
	coalesce(qt_nasc_vivos_imp,'0'),
	coalesce(qt_nasc_mortos_imp,'0'),
	coalesce(qt_nasc_vivos_prematuros_imp,'0'),
	coalesce(qt_obito_precoce_imp,'0'),
	coalesce(qt_obito_tardio_imp,'0'),
	a.nr_seq_grau_partic,
	a.cd_usuario_plano_imp,
	a.cd_medico_executor_imp,
	a.ie_obito_imp,
	a.nm_prestador_exec_imp,
	a.dt_atendimento_referencia,
	a.ie_tipo_segurado
into STRICT	ie_tipo_guia_w,
	dt_emissao_w,
	dt_alta_int_w,
	dt_entrada_int_w,
	dt_atendimento_w,
	cd_motivo_alta_w,
	ie_tipo_atendimento_imp_w,--nr_seq_tipo_atend_w, /*askono*/
	nr_seq_protocolo_w,
	nr_seq_prestador_imp_w,
	cd_cgc_prestador_imp_w,
	cd_cpf_prestador_imp_w,
	nr_crm_prest_solic_imp_w,
	sg_cons_prest_solic_imp_w,
	uf_crm_prest_solic_imp_w,
	nr_seq_prestador_exec_imp_w,
	nr_seq_prestador_exec_imp_ww,
	cd_cgc_executor_imp_w,
	cd_cpf_executor_imp_w,
	nr_seq_clinica_imp_w,
	qt_nasc_vivos_prematuros_imp_w,
	qt_nasc_vivos_imp_w,
	cd_tipo_acomodacao_imp_w,
	cd_guia_imp_w,
	cd_guia_solic_imp_w,
	nr_seq_segurado_conta_w,
	nr_seq_plano_w,
	nm_medico_executor_imp_w,
	sg_conselho_exec_imp_w,
	nr_crm_exec_imp_w,
	uf_crm_exec_imp_w,
	nr_crm_solic_imp_w,
	qt_nasc_vivos_termo_w,
	qt_nasc_mortos_w,
	qt_nasc_vivos_prematuros_w,
	qt_obito_precoce_w,
	qt_obito_tardio_w,
	nr_seq_grau_partic_conta_w,
	cd_usuario_plano_imp_w,
	cd_medico_exec_imp_w,
	ie_obito_imp_w,
	nm_prestador_exec_imp_w,
	dt_atendimento_referencia_w,
	ie_tipo_segurado_w
from	pls_conta a
where	a.nr_sequencia	= nr_seq_conta_p;

qt_participante_w	:= 0;

if (coalesce(cd_medico_exec_imp_w,'0') = '0') then
	cd_medico_exec_imp_w := pls_obter_dados_gerar_conta(nr_seq_conta_p, 'M');
end if;

if (coalesce(nr_seq_grau_partic_conta_w,0) = 0)	then
	nr_seq_grau_partic_conta_w	:= pls_obter_dados_gerar_conta(nr_seq_conta_p, 'G');
end if;

/*Obter sequencia do tipo atendimento da conta através do cd_tiss*/

select 	max(z.nr_sequencia)
into STRICT	nr_seq_tipo_atend_w
from   	pls_tipo_atendimento z
where 	z.ie_situacao = 'A'
and 	z.cd_estabelecimento = cd_estabelecimento_p
and	z.cd_tiss = ie_tipo_atendimento_imp_w;

/*Obter dados do protocolo*/

select	cd_cgc_prestador_imp,
	nr_cpf_prestador_imp,
	nr_seq_prestador_imp_ref,
	nr_seq_usu_prestador,
	nr_seq_lote_conta,
	ie_apresentacao,
	nr_protocolo_prestador,
	dt_protocolo,
	dt_mes_competencia
into STRICT	cd_cgc_prestador_prot_imp_w,
	nr_cpf_prestador_prot_imp_w,
	nr_seq_prestador_prot_imp_w,
	nr_seq_usu_prestador_w,
	nr_seq_lote_conta_w,
	ie_apresentacao_w,
	nr_protocolo_prestador_w,
	dt_protocolo_w,
	dt_mes_competencia_w
from	pls_protocolo_conta
where	nr_sequencia = nr_seq_protocolo_w;

/*Obter dados do lote*/

select	nr_seq_prestador_web
into STRICT	nr_seq_usuario_web_w
from	pls_lote_protocolo_conta
where	nr_sequencia = nr_seq_lote_conta_w;

select	count(1)
into STRICT	qt_cid_obito_w
from	pls_diagnost_conta_obito
where	nr_seq_conta = nr_seq_conta_p
and	(cd_doenca_imp IS NOT NULL AND cd_doenca_imp::text <> '');

if (qt_cid_obito_w > 0) then
	/* Obter dados Óbito*/

	select	max(nr_declaracao_obito_imp),
		max(cd_doenca_imp)
	into STRICT	nr_declaracao_obito_imp_w,
		cd_doenca_imp_w
	from 	pls_diagnost_conta_obito
	where	nr_seq_conta = nr_seq_conta_p;
end if;

select	count(1)
into STRICT	qt_cid_doenca_w
from	pls_diagnostico_conta
where	nr_seq_conta = nr_seq_conta_p
and	(cd_doenca_imp IS NOT NULL AND cd_doenca_imp::text <> '');

/* Obter dados do segurado */

begin
select	CASE WHEN coalesce(ie_tipo_segurado_w::text, '') = '' THEN  b.ie_tipo_segurado  ELSE ie_tipo_segurado_w END ,
	--b.nr_seq_plano,
	pls_obter_produto_benef(b.nr_sequencia, dt_atendimento_referencia_w),
	b.nr_seq_contrato,
	b.nr_seq_intercambio,
	coalesce(b.ie_pcmso,'N'),
	a.cd_pessoa_fisica,
	a.dt_nascimento,
	b.ie_tipo_repasse
into STRICT	ie_tipo_segurado_w,
	nr_seq_plano_w,
	nr_seq_contrato_w,
	nr_seq_intercambio_w,
	ie_pcmso_w,
	cd_pessoa_fisica_w,
	dt_nascimento_w,
	ie_tipo_repasse_w
from	pessoa_fisica 	a,
	pls_segurado	b
where	b.cd_pessoa_fisica	= a.cd_pessoa_fisica
and	b.nr_sequencia		= nr_seq_segurado_p;
qt_idade_w		:= substr(obter_idade(dt_nascimento_w, clock_timestamp(), 'A'),1,10);
qt_idade_meses_w	:= substr(obter_idade(dt_nascimento_w, clock_timestamp(), 'M'),1,10);
exception
when others then
	ie_tipo_segurado_w	:= '0';
	nr_seq_plano_w		:= 0;
	nr_seq_contrato_w	:= 0;
	ie_pcmso_w		:= 'N';
end;

 /* Obter dados do produto - askono OS362870 */

begin
select	nr_seq_tipo_acomodacao
into STRICT	nr_seq_tipo_acomod_benef_w
from 	pls_plano_acomodacao
where	nr_seq_plano = nr_seq_plano_w;
exception
when others then
	nr_seq_tipo_acomod_benef_w	:= null;
end;

/*Obter sequencia do tipo de acomodação*/

begin
select	max(nr_sequencia)
into STRICT	nr_seq_tipo_acomodacao_imp_w
from  	pls_tipo_acomodacao
where	cd_tiss   	   = cd_tipo_acomodacao_imp_w
and 	ie_situacao 	   = 'A';
exception
when others then
	nr_seq_tipo_acomodacao_imp_w := null;
end;

/*Obter dados do contrato*/

begin
select	nr_contrato
into STRICT	nr_contrato_w
from	pls_contrato
where	nr_sequencia	= nr_seq_contrato_w;
exception
when others then
	nr_contrato_w	:= 0;
end;


/* Obter dados do produto - Regras do produto*/

begin
select 	a.ie_preco,
	a.ie_regulamentacao
into STRICT	ie_preco_w,
	ie_regulamentacao_w
from   	pls_plano a
where  	a.nr_sequencia = nr_seq_plano_w;
exception
when others then
	ie_preco_w		:= null;
	ie_regulamentacao_w	:= null;
end;
i	:= 1;
open c03;
loop
fetch c03 into
	nr_seq_conta_proc_w,
	nr_seq_conta_mat_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_material_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	begin
	vetor_itens_w[i].nr_seq_conta_proc	:= nr_seq_conta_proc_w;
	vetor_itens_w[i].nr_seq_conta_mat	:= nr_seq_conta_mat_w;
	vetor_itens_w[i].cd_procedimento	:= cd_procedimento_w;
	vetor_itens_w[i].ie_origem_proced	:= ie_origem_proced_w;
	vetor_itens_w[i].nr_seq_material	:= nr_seq_material_w;
	i	:= i + 1;

	if	((nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') or (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '')) and (ie_existe_proc_mat_w = 'N') then
		ie_existe_proc_mat_w := 'S';
	end if;

	end;
end loop;
close c03;

ind_ocor	:= 1;
open C00(ie_ocorrencia_w, cd_estabelecimento_p);
loop
fetch C00 into
	nr_seq_ocorrencia_w,
	nr_seq_motivo_glosa_w,
	ie_lib_web_guia_w;
EXIT WHEN NOT FOUND; /* apply on C00 */
	begin
	vetor_ocor_w[ind_ocor].nr_seq_ocorrencia	:= nr_seq_ocorrencia_w;
	vetor_ocor_w[ind_ocor].nr_seq_motivo_glosa	:= nr_seq_motivo_glosa_w;
	vetor_ocor_w[ind_ocor].ie_lib_web_guia		:= ie_lib_web_guia_w;
	/* Verificar se existe regra de exceção, e caso exista , irá verificar na rotina de exceção se irá ou não gerar a ocorrência  */

	select	count(1)
	into STRICT	qt_excecao_w
	from	pls_excecao_ocorrencia_web
	where	nr_seq_ocorrencia = nr_seq_ocorrencia_w;

	vetor_ocor_w[ind_ocor].qt_excecao	:= qt_excecao_w;

	select	count(1)
	into STRICT	qt_regra_conta_w
	from	pls_ocorrencia_conta_web a
	where	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_w
	and (a.ie_tipo_ocorrencia = 'AC' or coalesce(a.ie_tipo_ocorrencia::text, '') = '');

	select	count(1)
	into STRICT	qt_regra_item_w
	from	pls_ocorrencia_conta_web a
	where	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_w
	and (a.ie_tipo_ocorrencia = 'I' or coalesce(a.ie_tipo_ocorrencia::text, '') = '');

	vetor_ocor_w[ind_ocor].qt_regra_conta	:= qt_regra_conta_w;
	vetor_ocor_w[ind_ocor].qt_regra_item	:= qt_regra_item_w;

	ind_ocor	:= ind_ocor + 1;
	end;
end loop;
close c00;

i := vetor_itens_w.count;
for k in 1.. i loop
	nr_seq_conta_proc_w	:= vetor_itens_w[k].nr_seq_conta_proc;
	nr_seq_conta_mat_w	:= vetor_itens_w[k].nr_seq_conta_mat;
	cd_procedimento_w	:= vetor_itens_w[k].cd_procedimento;
	ie_origem_proced_w	:= vetor_itens_w[k].ie_origem_proced;
	nr_seq_material_w	:= vetor_itens_w[k].nr_seq_material;
	ie_existe_medico_w 	:= 'S';

	/*Se  material da conta*/

	if (coalesce(nr_seq_conta_mat_w,0) > 0) then
		ie_tipo_item_w := 'M';

		begin
		select	coalesce(trunc(dt_atendimento_imp),trunc(clock_timestamp())), --nvl(a.dt_atendimento,a.dt_atualizacao)
			coalesce(vl_material_imp,0),
			coalesce(vl_unitario_imp,0),
			coalesce(qt_material_imp,0),
			coalesce(nr_seq_prest_fornec,null),
			coalesce(ie_tipo_despesa_imp,ie_tipo_despesa),
			cd_material_imp
		into STRICT	dt_material_w,
			vl_material_w,
			vl_unitario_mat_w,
			qt_material_w,
			nr_seq_prest_fornec_w,
			ie_tipo_desp_mat_w,
			cd_material_imp_w
		from	pls_conta_mat
		where	nr_sequencia = nr_seq_conta_mat_w;
		exception
		when others then
			dt_material_w		:= null;
			vl_material_w		:= 0;
			qt_material_w		:= 0;
			nr_seq_material_w	:= null;
			nr_seq_prest_fornec_w	:= null;
		end;

		begin
		select	coalesce(nr_seq_estrut_mat,0)
		into STRICT	nr_seq_estrutura_mat_w
		from	pls_material
		where	nr_sequencia = nr_seq_material_w;
		exception
			when others then
			nr_seq_estrutura_mat_w := 0;
		end;

		ie_tipo_ocor_valid_w	:= 'I';
		ie_proc_mat_w		:= 'M';
	/*Se procedimento da conta*/

	elsif (coalesce(nr_seq_conta_proc_w,0) > 0) then
		ie_tipo_item_w := 'P';

		select	trunc(dt_procedimento_imp),
			coalesce(vl_procedimento_imp,0),
			coalesce(qt_procedimento_imp,0),
			coalesce(vl_unitario_imp,0),
			coalesce(cd_procedimento_imp,cd_procedimento),
			cd_tipo_tabela_imp
		into STRICT	dt_procedimento_w,
			vl_procedimento_w,
			qt_procedimento_w,
			vl_unitario_proc_w,
			cd_procedimento_imp_w,
			ie_tipo_tabela_imp_w
		from	pls_conta_proc
		where	nr_sequencia = nr_seq_conta_proc_w;

		if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
			SELECT * FROM pls_obter_estrut_proc(	cd_procedimento_w, ie_origem_proced_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w;

			begin
			select	nr_seq_grupo_rec
			into STRICT	nr_seq_grupo_rec_w
			from	procedimento
			where	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced 	= ie_origem_proced_w  LIMIT 1;
			exception
			when others then
				nr_seq_grupo_rec_w	:= 0;
			end;
		end if;

		if (ie_tipo_guia_w in ('4','5','6')) then
			/* Verificarquantos participantes existem para o procedimento */

			select	count(nr_sequencia)
			into STRICT	qt_participante_w
			from	pls_proc_participante
			where	nr_seq_conta_proc = nr_seq_conta_proc_w;

			if (qt_participante_w > 0)	then
				select	count(nr_sequencia)
				into STRICT	qt_medico_partic_w
				from	pls_proc_participante
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w
				and ((cd_prestador_imp IS NOT NULL AND cd_prestador_imp::text <> '')
				or	(nr_cpf_imp IS NOT NULL AND nr_cpf_imp::text <> ''));

				if (qt_medico_partic_w > 0)	then
					ie_existe_medico_w := 'S';
				else
					ie_existe_medico_w := 'N';
				end if;
			else
				ie_existe_medico_w := 'N';
			end if;
		else
			ie_existe_medico_w := 'S';
		end if;

		ie_tipo_ocor_valid_w	:= 'I';
		ie_proc_mat_w		:= 'P';
	else
		ie_tipo_ocor_valid_w	:= 'AC';
		ie_proc_mat_w		:= 'A';
	end if;

	if (cd_guia_imp_w IS NOT NULL AND cd_guia_imp_w::text <> '') then
		select  max(nr_Sequencia)
		into STRICT  	nr_seq_guia_w
		from    pls_guia_plano
		where   cd_guia 	= cd_guia_imp_w
		and	nr_seq_segurado	= nr_seq_segurado_p;


		if (coalesce(nr_seq_guia_w::text, '') = '')  then
			select	max(nr_Sequencia)
			into STRICT  	nr_seq_guia_w
			from    pls_guia_plano
			where   cd_guia_pesquisa 	= cd_guia_imp_w
			and	nr_seq_segurado		= nr_seq_segurado_p;
		end if;
	end if;

	/*Obtem dados da guia de autorizacao -- integridade com cd_guia_referencia e segurado*/

	if (ie_tipo_guia_w = '3') then
		select	max(nr_Sequencia)
		into STRICT	nr_seq_guia_ww
		from   	pls_guia_plano
		where  	cd_guia_pesquisa = cd_guia_imp_w
		and	nr_seq_segurado = nr_seq_segurado_p;
	else
		select	max(nr_Sequencia)
		into STRICT	nr_seq_guia_ww
		from   	pls_guia_plano
		where  	cd_guia_pesquisa = cd_guia_solic_imp_w
		and	nr_seq_segurado = nr_seq_segurado_p;
	end if;

	if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
		select	max(nr_seq_requisicao)
		into STRICT	nr_seq_requisicao_w
		from	pls_execucao_requisicao
		where	nr_seq_guia	= nr_seq_guia_w;
	end if;
	/*Tratamento para buscar pelo campo de pesquisa sem caracteres especiais Demitrius 20/09/2012*/

	if (coalesce(nr_seq_guia_ww,0) = 0)	then
		if (ie_tipo_guia_w = '3') then
			select	max(nr_Sequencia)
			into STRICT	nr_seq_guia_ww
			from   	pls_guia_plano
			where  	cd_guia = cd_guia_imp_w
			and	nr_seq_segurado = nr_seq_segurado_p;
		else
			select	max(nr_Sequencia)
			into STRICT	nr_seq_guia_ww
			from   	pls_guia_plano
			where  	cd_guia = cd_guia_solic_imp_w
			and	nr_seq_segurado = nr_seq_segurado_p;
		end if;
	end if;

	if (ie_tipo_item_w = 'M') then
		begin
		/* Autorização material especial*/

		select	CASE WHEN count(nr_sequencia)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_mat_espec_aut_ww
		from	pls_solic_lib_mat_med
		where	nr_seq_segurado = nr_seq_segurado_p
		and	nr_seq_material = nr_seq_material_w
		and	nr_seq_guia	= nr_seq_guia_ww
		and	ie_status 	= 3;
		exception
		when others then
			ie_mat_espec_aut_ww	:= 'N';
		end;

		nr_seq_restricao_w := pls_obter_mat_restricao_data(nr_seq_material_w, dt_material_w, nr_seq_restricao_w);

		if (coalesce(nr_seq_restricao_w,0) > 0) then
			begin
			select	ie_autorizacao,
				ie_bloqueia_custo_op,
				ie_bloqueia_pre_pag,
				ie_bloqueia_intercambio,
				ie_bloqueia_prod_nao_reg,
				ie_bloqueia_prod_reg
			into STRICT	ie_autorizacao_especial_w,
				ie_bloqueia_custo_op_w,
				ie_bloqueia_pre_pag_w,
				ie_bloqueia_intercambio_w,
				ie_bloqueia_prod_nao_reg_w,
				ie_bloqueia_prod_reg_w
			from	pls_material_restricao
			where	nr_sequencia	= nr_seq_restricao_w;
			exception
			when others then
				ie_autorizacao_especial_w := 'N';
			end;

			if (ie_bloqueia_custo_op_w = 'S')	then
				ie_bloqueia_custo_op_w := 'BCO';
			end if;

			if (ie_bloqueia_pre_pag_w = 'S')	then
				ie_bloqueia_pre_pag_w := 'BPP';
			end if;

			if (ie_bloqueia_intercambio_w = 'S')	then
				ie_bloqueia_intercambio_w := 'BI';
			end if;

			if (ie_bloqueia_prod_nao_reg_w = 'S')	then
				ie_bloqueia_prod_nao_reg_w := 'BNR';
			end if;

			if (ie_bloqueia_prod_reg_w = 'S')	then
				ie_bloqueia_prod_reg_w := 'BR';
			end if;

		end if;


	end if;
	/* Vetor das ocorrências */

	total_ocor := vetor_ocor_w.count;
	for ind_ocor in 1.. total_ocor loop
		begin
		nr_seq_ocorrencia_w	:= vetor_ocor_w[ind_ocor].nr_seq_ocorrencia;
		nr_seq_motivo_glosa_w	:= vetor_ocor_w[ind_ocor].nr_seq_motivo_glosa;
		qt_excecao_w		:= vetor_ocor_w[ind_ocor].qt_excecao;
		qt_regra_conta_w	:= vetor_ocor_w[ind_ocor].qt_regra_conta;
		qt_regra_item_w		:= vetor_ocor_w[ind_ocor].qt_regra_item;
		ie_lib_web_guia_w	:= vetor_ocor_w[ind_ocor].ie_lib_web_guia;
		ie_primeira_vez_w	:= 'S';
	--if	(ie_tipo_ocor_valid_w = 'AC' or qt_regra_item_w > 0) then
		open C01;
		loop
		fetch C01 into
			nr_seq_estrutura_w,
			nr_seq_regra_w,
			ie_data_conta_w,
			ie_data_item_w,
			vl_minimo_item_w,
			vl_max_item_w,
			qt_minimo_item_w,
			qt_maximo_item_w,
			nr_seq_grupo_servico_w,
			cd_procedimento_regra_w,
			ie_origem_proced_regra_w,
			nr_seq_material_regra_w,
			ie_qtd_item_fracionada_w,
			qt_dias_envio_w,
			nr_seq_saida_int_W,
			ie_data_alta_w,
			nr_seq_proc_tipo_atend_regra_w,
			ie_atributo_w,
			ie_obrigatorio_w,
			ie_tipo_prestador_w,
			ie_prestador_inativo_w,
			nr_seq_clinica_w,
			ie_nascido_vivo_w,
			ie_prestador_exec_w,
			nr_seq_prestador_regra_w,
			nr_seq_tipo_acomodacao_regra_w,
			ie_valor_negativo_w,
			ie_benef_autorizacao_w,
			ie_somar_estrutura_w,
			nr_seq_estrut_mat_w,
			nr_seq_grupo_prestador_w,
			ie_tipo_restricao_w,
			nr_contrato_regra_w,
			qt_liberada_w,/*askono*/
			qt_tipo_quantidade_w,
			ie_tipo_qtde_w,
			ie_qt_lib_posterior_w,
			ie_regra_qtde_w,
			ie_tipo_pessoa_qtde_w,
			ie_acesso_web_w,
			ie_status_lib_matmed_regra_w,
			ie_unid_tempo_idade_w,
			qt_idade_min_w,
			qt_idade_max_w,
			nr_seq_regra_atrib_w,
			cd_especialidade_medica_w,
			ie_exige_medico_w,
			ie_valida_inf_medico_w,
			qt_min_digito_crm_w,
			ie_consistir_cod_guia_w,
			ie_consiste_exec_coop_w,
			nr_seq_grupo_rec_regra_w,
			nr_seq_categoria_w,
			ie_tipo_data_envio_w,
			nr_seq_intercambio_ww,
			ie_nasc_vivos_termo_w,
			ie_nasc_mortos_w,
			ie_nasc_vivos_prematuros_w,
			ie_obito_precoce_w,
			ie_obito_tardio_w,
			nr_seq_regra_tp_guia_w,
			ie_tipo_ocorrencia_w,
			ie_consiste_mat_prestador_w,
			ie_consiste_prest_fornec_w,
			nr_seq_tipo_atendimento_w,
			ie_bloqueio_mat_w,
			ie_tipo_valor_w,
			nr_seq_regra_partic_w,
			nr_seq_grau_partic_w,
			ie_regulamentacao_ww,
			ie_apresentacao_regra_w,
			cd_medico_executor_w,
			nr_crm_executor_w,
			ie_medico_cooperado_w,
			ie_autorizacao_espec_regra_w,
			ie_preco_regra_w,
			ie_tipo_tabela_w,
			ie_incidencia_quantidade_w,
			ie_valida_tag_opm_w,
			ie_valida_guia_principal_w,
			ie_valida_guia_referencia_w,
			ie_valida_prest_solic_w,
			ie_valida_prest_exec_w,
			ie_exige_proc_mat_w,
			ie_valida_prest_prot_w,
			qt_regra_prest_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			/* Francisco - 28/01/2013 - Criei variavel, pois só precisa passar na function da excecao
			uma vez pra cada ocorrencia */
			if (ie_primeira_vez_w = 'S') then
				ie_primeira_vez_w	:= 'N';

				if (qt_excecao_w > 0) or (ie_lib_web_guia_w = 'S') then
					ie_excecao_w := pls_obter_se_excecao_con_web(	nr_seq_ocorrencia_w, nr_seq_conta_p,
											nr_seq_conta_proc_w, nr_seq_conta_mat_w, dt_emissao_w,
											ie_tipo_item_w, nr_seq_prestador_imp_w, cd_procedimento_w,
											ie_origem_proced_w, nr_seq_material_w, nr_seq_segurado_p,
											ie_tipo_guia_w, null, nm_usuario_p,cd_estabelecimento_p,
											qt_idade_w,qt_idade_meses_w, nr_seq_tipo_acomodacao_imp_w,
											nr_seq_tipo_acomod_benef_w, ie_pcmso_w, ie_lib_web_guia_w,
											coalesce(nr_seq_guia_ww,nr_seq_guia_w));
				else
					ie_excecao_w	:= 'N';
				end if;

			end if;

			if (ie_excecao_w = 'S') then
				ds_motivo_saida_regra_w	:= 'Exceção da regra';
				goto final;
			end if;

			if (coalesce(ie_prestador_exec_w::text, '') = '') then
				ie_prestador_exec_w	:= 'N';
			end if;

			if (coalesce(ie_somar_estrutura_w::text, '') = '') then
				ie_somar_estrutura_w	:= 'N';
			end if;

			ds_observacao_w		:= '';
			ie_estrut_mat_w		:= 'S';
			qt_medico_inv_w		:= 0;

			/*Consiste médico executor*/

			if (cd_medico_executor_w IS NOT NULL AND cd_medico_executor_w::text <> '') then
				if (cd_medico_executor_w <>  cd_medico_exec_imp_w)	or (coalesce(cd_medico_exec_imp_w::text, '') = '') then
					ds_motivo_saida_regra_w	:= 'Médico executor da conta';
					goto final;
				end if;
			end if;
			/*CRM do executor*/

			if (nr_crm_executor_w IS NOT NULL AND nr_crm_executor_w::text <> '')	then
				if (nr_crm_executor_w <> nr_crm_exec_imp_w) or (coalesce(nr_crm_exec_imp_w::text, '') = '') then
					ds_motivo_saida_regra_w := 'Número do CRM do executor';
					goto final;
				end if;
			end if;

			/*Consistencia do grau de participação*/

			if (coalesce(nr_seq_grau_partic_w,0) <> 0)	and (qt_participante_w = 0)			then
				/*Verifica participantes*/

				if (nr_seq_grau_partic_w <>  coalesce(nr_seq_grau_partic_conta_w,0))	then
					ds_motivo_saida_regra_w	:= 'Grau de participação';
					goto final;
				end if;
			end if;

			if (qt_participante_w > 0)	then
				/*Consistencia do participante*/

				if (qt_min_digito_crm_w IS NOT NULL AND qt_min_digito_crm_w::text <> '')	or (nr_seq_grau_partic_w IS NOT NULL AND nr_seq_grau_partic_w::text <> '')	or (cd_medico_executor_w IS NOT NULL AND cd_medico_executor_w::text <> '')	or (nr_crm_executor_w IS NOT NULL AND nr_crm_executor_w::text <> '')		or (ie_medico_cooperado_w IS NOT NULL AND ie_medico_cooperado_w::text <> '')	then

					/*Se houver participantes para as contas verificar as regras para eles*/

					open C02;
					loop
					fetch C02 into
						nm_medico_executor_proc_w,
						nr_crm_imp_proc_w,
						uf_crm_imp_proc_w,
						sg_conselho_imp_proc_w,
						nr_Seq_grau_partic_c02_w,
						nr_seq_partic_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */
						begin
						ie_gerou_partic_w := pls_consiste_partic_web(nr_seq_partic_w, nr_seq_ocorrencia_w, qt_min_digito_crm_w, nr_seq_grau_partic_w, cd_medico_executor_w, nr_crm_executor_w, ie_medico_cooperado_w, dt_emissao_w, ie_gerou_partic_w);

						if (coalesce(ie_gerou_partic_w,'N') = 'S')	then
							ds_motivo_saida_regra_w	:= 'Rotina dos pariticipantes';
							goto final;
						end if;
						end;
					end loop;
					close C02;
				end if;
			end if;

			/*Verifica se médico é cooperado*/

			if (coalesce(ie_medico_cooperado_w, 'A') = 'C') then
				if (pls_obter_se_cooperado_ativo(cd_medico_exec_imp_w,dt_emissao_w, null) = 'N') then
					ds_motivo_saida_regra_w	:= 'Médico cooperado 1';
					goto final;
				end if;
			elsif (coalesce(ie_medico_cooperado_w, 'A') = 'N') then
				if (pls_obter_se_cooperado_ativo(cd_medico_executor_w,dt_emissao_w, null) = 'S') then
					ds_motivo_saida_regra_w	:= 'Médico cooperado 2';
					goto final;
				end if;
			end if;

			/*Consistencias do grupo de receita do procedimento*/

			if (nr_seq_grupo_rec_regra_w IS NOT NULL AND nr_seq_grupo_rec_regra_w::text <> '') then
				if (ie_tipo_item_w = 'P') then
					if (nr_seq_grupo_rec_regra_w <> coalesce(nr_seq_grupo_rec_w,0)) then
						ds_motivo_saida_regra_w	:= 'Grupo Recebimento';
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			------------------------------------------------------------------------------------------------------------------------------------
			/*Verificar se o prestador esta vinculado ao acesso Web*/

			if (coalesce(ie_acesso_web_w,'N') = 'S') and (nr_seq_usuario_web_w IS NOT NULL AND nr_seq_usuario_web_w::text <> '') then
				ie_usuario_val_w	:= 'N';

				/*Seleciona prestador participante*/

				begin
				select  coalesce(nr_seq_prestador,0)
				into STRICT	nr_seq_prestador_partic_w
				from	pls_proc_participante
				where	nr_seq_conta_proc = nr_seq_conta_proc_p;
				exception
				when others then
					nr_seq_prestador_partic_w := 0;
				end;
				ie_usuario_val_w	:=  pls_obter_prestador_login(nr_seq_usuario_web_w, nr_seq_prestador_partic_w);

				if (ie_usuario_val_w = 'S')	then
					ds_motivo_saida_regra_w	:= 'Usuario Web 1';
					goto final;
				end if;
				/*Se não existir informação para o prestador partic então verificar o prestador executor*/

				ie_usuario_val_w	:=  pls_obter_prestador_login(nr_seq_usuario_web_w, nr_seq_prestador_exec_w);

				if (ie_usuario_val_w = 'S')	then
					ds_motivo_saida_regra_w	:= 'Usuario Web 2';
					goto final;
				end if;
				/*Se não existir informação para o prestador executor verificar o prestador do protocolo*/

				ie_usuario_val_w	:=  pls_obter_prestador_login(nr_seq_usuario_web_w, nr_seq_prestador_atend_p);

				if (ie_usuario_val_w = 'S')	then
					ds_motivo_saida_regra_w	:= 'Usuario Web 3';
					goto final;
				end if;

			-- se for WebService então não deve validar regras que tenham acesso WEB
			elsif (upper(nm_usuario_p) = 'WEBSERVICE') then
				goto final;
			end if;

			if (ie_exige_proc_mat_w = 'S') then
				if (ie_existe_proc_mat_w = 'S') then
					goto final;
				end if;
			end if;
			if	( (coalesce( ie_status_lib_matmed_regra_w,0) > 0) or (coalesce(ie_consiste_prest_fornec_w,'N') = 'S')) and (ie_tipo_item_w = 'M')  then
				/*obtendo status do material especial*/

				begin
					select	ie_status,
						nr_seq_material,
						coalesce(nr_seq_prest_fornec,coalesce(nr_seq_prestador,0))
					into STRICT	ie_mat_espec_aut_w,
						nr_seq_material_lib_w,
						nr_seq_prestador_fornec_w
					from	pls_solic_lib_mat_med
					where	nr_seq_segurado = nr_seq_segurado_p
					and	nr_seq_material = nr_seq_material_w
					and	nr_seq_guia	= nr_seq_guia_ww
					and	ie_status 	= 3;
				exception
				when others then
					ie_mat_espec_aut_w	:= '';
					nr_seq_material_lib_w	:= null;
					nr_seq_prestador_fornec_w := 0;
				end;
				if (coalesce( ie_status_lib_matmed_regra_w,0) > 0)then
					if ( coalesce(nr_seq_material_lib_w,0) > 0) then

						if (ie_mat_espec_aut_w <> ie_status_lib_matmed_regra_w )   then
							ds_motivo_saida_regra_w	:= 'Material Espec Status';
							goto final;
						end if;
					else
						ds_motivo_saida_regra_w	:= 'Material Espec Status 2';
						goto final;
					end if;
				end if;
				if (coalesce(ie_consiste_prest_fornec_w,'N') = 'S') then
					if (coalesce(nr_seq_prest_fornec_w,coalesce(nr_seq_prestador_exec_imp_w,'0')) > '0') then
						if ( coalesce(nr_seq_prest_fornec_w,nr_seq_prestador_exec_imp_w) = nr_seq_prestador_fornec_w) then
							ds_motivo_saida_regra_w	:= 'Prestador Fornec';
							goto final;
						end if;
					else
						ds_motivo_saida_regra_w	:= 'Prestador Fornec 2';
						goto final;
					end if;
				end if;

			end if;

			----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			/*Consistência da data de envio / atendimento*/

			if (coalesce(qt_dias_envio_w,0) > 0) then
				/*Diego - 04/05/2011 - OS 311736 - Quantidade de dias em relação a data de entrada*/

				if (coalesce(ie_tipo_data_envio_w,'X') = 'E') then
					/*Validações quanto a guias de internação*/

					if (ie_tipo_guia_w = '5') then
						if (trunc(clock_timestamp() - qt_dias_envio_w) <=  coalesce(dt_alta_int_w,clock_timestamp())) then
							ds_motivo_saida_regra_w	:= 'Data de envio 1';
							goto final;
						end if;
					else
						ds_motivo_saida_regra_w	:= 'Data de envio 2';
						goto final;
					end if;

				/*Diego - 10/06/2011 - OS 324594 - Quantidade de dias em relação a data de alta*/

				elsif (coalesce(ie_tipo_data_envio_w,'X') = 'A') then
					/*Validações quanto a guias de internação*/

					if (ie_tipo_guia_w = '5') then
						if (trunc(clock_timestamp() - qt_dias_envio_w) <= dt_alta_int_w) then
							ds_motivo_saida_regra_w	:= 'Data de envio 3';
							goto final;
						end if;
					else
						ds_motivo_saida_regra_w	:= 'Data de envio 4';
						goto final;
					end if;
				end if;

				/*Diego - 10/06/2011 - OS 324594 - Quantidade de dias em relação a data de atendimento(dt_emissao)*/

				if (coalesce(ie_tipo_data_envio_w,'X') = 'AT') then

					if (trunc(clock_timestamp() - qt_dias_envio_w) <= coalesce(dt_atendimento_w,clock_timestamp()))then
						ds_motivo_saida_regra_w	:= 'Data de envio 5';
						goto final;
					end if;
				end if;

				if (coalesce(ie_tipo_data_envio_w,'X') = 'P') then
					/*Diego - 10/06/2011 - OS 324594 - Quantidade de dias em relação a data do procedimento*/

					if (coalesce(nr_seq_conta_proc_w,0) > 0) then
						if (trunc(clock_timestamp() - qt_dias_envio_w) <= coalesce(dt_procedimento_w,clock_timestamp())) then
							ds_motivo_saida_regra_w	:= 'Data de envio 6';
							goto final;
						end if;
					else
						ds_motivo_saida_regra_w	:= 'Data de envio 7';
						goto final;
					end if;

				end if;

				if (coalesce(ie_tipo_data_envio_w,'X') = 'M') then
					/*Tratamento para OPM o TISS não possui um campo de data para os materiais
					que entram pelas tags de OPM -  Demitrius OS 474409*/
					if (coalesce(ie_tipo_desp_mat_w,0) = 7)	then
						ds_motivo_saida_regra_w	:= 'Data de envio 8';
						goto final;
					end if;

					/*Diego - 10/06/2011 - OS 324594 - Quantidade de dias em relação a data do procedimento*/

					if (coalesce(nr_seq_conta_mat_w,0) > 0) then
						if (trunc(clock_timestamp() - qt_dias_envio_w) <= coalesce(dt_material_w,clock_timestamp())) then
							ds_motivo_saida_regra_w	:= 'Qt.Dias relação ao proc';
							goto final;
						end if;
					else
						ds_motivo_saida_regra_w	:= 'Qt.Dias relação ao Proc 2';
						goto final;
					end if;
				end if;

			end if;

			/*Autorizacao especial.*/

			if (ie_autorizacao_espec_regra_w = 'S')  then
				if (coalesce(nr_seq_prest_fornec_w,0) <> 0)	then

					select	max(cd_prestador)
					into STRICT	cd_prestador_w
					from	pls_prestador
					where	nr_sequencia = nr_seq_prest_fornec_w;

					select	count(1)
					into STRICT	qt_mat_liberado_w
					from	pls_solic_lib_mat_med a,
						pls_prestador b
					where	a.nr_seq_prestador	= b.nr_sequencia
					and	a.nr_seq_guia 		= nr_seq_guia_w
					and	b.cd_prestador		= cd_prestador_w
					and	a.nr_seq_material	= nr_seq_material_w
					and	a.ie_status		= 3;
				else
					select count(1)
					into STRICT	qt_mat_liberado_w
					from	pls_solic_lib_mat_med
					where	nr_seq_guia 		= nr_seq_guia_w
					and	nr_seq_prestador 	= nr_seq_prestador_exec_p
					and	nr_seq_material		= nr_seq_material_w
					and	ie_status		= 3;

				end if;

				if (coalesce(ie_autorizacao_especial_w,'N') <>  ie_autorizacao_espec_regra_w) or (coalesce(qt_mat_liberado_w,0) > 0)	then
					ds_motivo_saida_regra_w  := 'Necessita de autorização especial';
					goto final;
				end if;
			end if;

			/*Formação de preço*/

			if (ie_preco_regra_w IS NOT NULL AND ie_preco_regra_w::text <> '')	then

				if (ie_tipo_segurado_w in ('I','C','T','H')) then
					if (coalesce(ie_tipo_repasse_w,'X') = 'P')	then
						ie_preco_w	:= '1';
					elsif (coalesce(ie_tipo_repasse_w,'X') = 'C')	then
						ie_preco_w	:= '3';
					end if;
				end if;

				if (ie_preco_regra_w <> coalesce(ie_preco_w,'X'))	then
					ds_motivo_saida_regra_w	:= 'Formação de preço';
					goto final;
				end if;
			end if;

			/*Tipo de internação*/

			if (nr_seq_clinica_w IS NOT NULL AND nr_seq_clinica_w::text <> '')	then
				if (nr_seq_clinica_w <> nr_seq_clinica_imp_w)	then
					ds_motivo_saida_regra_w	:= 'Clínica';
					goto final;
				end if;
			end if;

			/*Consistência do grupo de serviço*/

			if (nr_seq_grupo_servico_w IS NOT NULL AND nr_seq_grupo_servico_w::text <> '') then
				if (ie_tipo_item_w = 'P') and (pls_se_grupo_preco_servico(nr_seq_grupo_servico_w, cd_procedimento_w, ie_origem_proced_w) = 'N') then
					ds_motivo_saida_regra_w	:= 'Grupo de serviço - Procedimento';
					goto final;
				elsif (ie_tipo_item_w = 'M') then
					ds_motivo_saida_regra_w	:= 'Grupo de serviço - Material';
					goto final;
				end if;
			end if;

			if (nr_seq_estrutura_w > 0) then
				if (ie_tipo_item_w = 'P') then
					if (pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, cd_procedimento_w, ie_origem_proced_w, null) = 'N') then
						ds_motivo_saida_regra_w	:= 'Estrutura - Procedimento';
						goto final;
					end if;
				elsif (ie_tipo_item_w = 'M') then
					if (pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, nr_seq_material_W) = 'N') then
						ds_motivo_saida_regra_w	:= 'Estrutura - Material';
						goto final;
					end if;
				elsif (ie_tipo_item_w = 'C') then
					select	count(1)
					into STRICT	qt_item_existe_conta_w
					from	pls_conta_proc
					where	nr_seq_conta	= nr_seq_conta_p
					and	pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, null) = 'S';

					if (qt_item_existe_conta_w = 0) then
						select	count(1)
						into STRICT	qt_item_existe_conta_w
						from	pls_conta_mat
						where	nr_seq_conta	= nr_seq_conta_p
						and	pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, null) = 'S';
					end if;

					if (qt_item_existe_conta_w = 0) then
						ds_motivo_saida_regra_w	:= 'Estrutura - Conta';
						goto final;
					end if;
				end if;
			end if;

			/*Regra para o tipo de atendimento*/

			if (nr_seq_tipo_atendimento_w IS NOT NULL AND nr_seq_tipo_atendimento_w::text <> '')	then
				if (nr_seq_tipo_atendimento_w <>  nr_seq_tipo_atend_w)	then
					ds_motivo_saida_regra_w	:= 'Tipo de Atendimento';
					goto final;
				end if;
			end if;

			/*Consiste se executor cooperado*/

			if (coalesce(ie_consiste_exec_coop_w,'N') 	= 'S') 	then
				ie_prest_medico_w := pls_obter_se_medico_prest(nr_seq_conta_p, nr_seq_conta_proc_w, coalesce(dt_emissao_w,dt_procedimento_w));
				if (ie_prest_medico_w = 'S') then
					ds_motivo_saida_regra_w	:= 'Médico cooperado';
					goto final;
				end if;
			end if;

			/*se a guia estiver cadastrada na autorização*/

			if (coalesce(ie_valida_guia_principal_w,'N') = 'S')	then
				begin
				select	count(1)
				into STRICT 	qt_guia_princ_valida_w
				from	pls_guia_plano
				where	nr_sequencia 		= nr_seq_guia_ww
				and	(nr_seq_guia_principal IS NOT NULL AND nr_seq_guia_principal::text <> '')  LIMIT 1;
				exception
				when others then
					qt_guia_princ_valida_w	:= 0;
				end;

				if (coalesce(qt_guia_princ_valida_w,0)  = 0)	then
					ds_motivo_saida_regra_w	:= 'Não existe guia principal informada';
					goto final;
				end if;
			end if;

			/*Verificar se a guia referência importada é a mesma cadastrada nas autorizações*/

			if (coalesce(ie_valida_guia_referencia_w,'N') = 'S')	then
				begin
				select	count(1)
				into STRICT	qt_guia_ref_val_w
				from	pls_guia_plano
				where	cd_guia_principal	= coalesce(cd_guia_solic_imp_w,0)
				and	nr_seq_segurado 	= coalesce(nr_seq_segurado_w,nr_seq_segurado_p);
				exception
				when others then
					qt_guia_ref_val_w	:= 0;
				end;

				if (coalesce(qt_guia_ref_val_w,0) = 0)	then
					ds_motivo_saida_regra_w	:= 'Guia referencia diferente da guia referencia importada';
					goto final;
				end if;

			end if;


			if (nr_seq_estrut_mat_w IS NOT NULL AND nr_seq_estrut_mat_w::text <> '') then
				if (pls_obter_se_mat_estrutura(nr_seq_material_w, nr_seq_estrut_regra_w) = 'N') then
					ie_estrut_mat_w	:= 'N';
				end if;
			end if;

			if (ie_estrut_mat_w = 'N') then

				ds_motivo_saida_regra_w	:= 'Estrutura  - Material 2';

				goto final;
			end if;

			if (ie_valida_tag_opm_w = 'S') then
				if (ie_tipo_desp_mat_w <> 7) or (coalesce(ie_tipo_desp_mat_w::text, '') = '') then
					ds_motivo_saida_regra_w	:= 'Valida Tag OPM, item não OPM';
					goto final;
				end if;
				if (ie_tipo_desp_mat_w = 7) then
					select	count(1)
					into STRICT	qt_opm_w
					from	pls_material
					where	nr_sequencia = nr_seq_material_w
					and	ie_tipo_despesa = 7;

					if (qt_opm_w > 0) then
						ds_motivo_saida_regra_w	:= 'Valida Tag OPM, o item esta cadastrado como OPM';
						goto final;
					end if;

				end if;
			end if;
			/*Verifica a categoria do tipo de acomodação*/

			if (coalesce(nr_seq_categoria_w,0) <> 0)	then
				/*Obtem a categoria do tipo de acomodação que vem no XML*/

				begin
				select	max(nr_seq_categoria)
				into STRICT 	nr_seq_categoria_regra_w
				from	pls_regra_categoria
				where	nr_seq_tipo_acomodacao = nr_seq_tipo_acomodacao_imp_w;
				exception
				when others then
					nr_seq_categoria_regra_w := 0;
				end;

				if (nr_seq_categoria_w <> nr_seq_categoria_regra_w)	then
					ds_motivo_saida_regra_w	:= 'Categoria';
					goto final;
				end if;

			end if;

			if (coalesce(nr_seq_regra_tp_guia_w,0) > 0) then

				/* Criada procedure para consistir o tipo de guia apresentada com guia executada, a procedure retorna na observação os tipos de guias .
				A function  pls_consiste_tp_guia_aut_apres( nr_Seq_conta_p, nr_seq_regra_tp_guia_w ) não é mais utilizada para esta validação
				*/
				SELECT * FROM pls_valida_tp_guia_aut_apres(nr_seq_conta_p, nr_seq_regra_tp_guia_w, ie_gera_ocor_w, ds_observacao_w) INTO STRICT ie_gera_ocor_w, ds_observacao_w;

				if (ie_gera_ocor_w = 'S') then
					ds_motivo_saida_regra_w	:= 'Regra tipo guia';
					goto final;
				end if;
			end if;

			/*Consistencia de apresentacao*/

			if (coalesce(ie_apresentacao_regra_w,'B') <> 'B')	then
				if (ie_apresentacao_regra_w <> ie_apresentacao_w)	then
					ds_motivo_saida_regra_w	:= 'Apresentação';
					goto final;
				end if;
			end if;

			/*Consistência da data da conta*/

			/*Data da alta menor do que a data da entrada*/

			if (coalesce( ie_data_conta_w, 0) = 1) then

				/*Se a data da alta for maior do que a data da entrada a regra não é válida*/

				if ( dt_alta_int_w >= dt_entrada_int_w) then
					ds_motivo_saida_regra_w	:= 'Data altar X Data entra int';
					goto final;
				end if;

			/*Data da alta maior do que a data atual*/

			elsif (coalesce(ie_data_conta_w,0) = 2) then

				/*Se a data da alta for menor do que a data atual a regra não é válida*/

				if (coalesce(dt_alta_int_w,trunc(clock_timestamp())) <= trunc(clock_timestamp())) then
					ds_motivo_saida_regra_w	:= 'Data alta X sysdate';
					goto final;
				end if;


			/*Data de emissão da conta maior do que a data atual*/

			elsif (coalesce(ie_data_conta_w,0) = 3) then

				/*Se a data de emissão da conta for menor do que a data atual a regra não será válida*/

				if (dt_emissao_w <= trunc(clock_timestamp())) then
					ds_motivo_saida_regra_w	:= 'Data emissao X Sysdate';
					goto final;
				end if;

			/*Data de entrada maior do que data atual*/

			elsif (coalesce(ie_data_conta_w,0) = 4) then

				/*Se a data de entrada for menor do que data atual a regra não é válida*/

				if (dt_entrada_int_w <= trunc(clock_timestamp())) then
					ds_motivo_saida_regra_w	:= 'Data entrada X Sysdate';
					goto final;
				end if;
			/*Data de emissão da conta maior que a data do protocolo*/

			elsif (coalesce(ie_data_conta_w,0) =  5)	then
				if (dt_emissao_w IS NOT NULL AND dt_emissao_w::text <> '')	and (dt_protocolo_w IS NOT NULL AND dt_protocolo_w::text <> '')	then
					if (dt_emissao_w <= dt_protocolo_w)	then
						ds_motivo_saida_regra_w	:= 'Data da conta maior que a data do protocolo';
						goto final;
					end if;
				else
					ds_motivo_saida_regra_w	:= 'Data do protocolo ou conta nula';
					goto final;
				end if;
			end if;

			/*Regras para regulamentação*/

			if (coalesce(ie_regulamentacao_ww,'X') <> 'X') then
				if (ie_regulamentacao_ww <> coalesce(ie_regulamentacao_w,'X')) then
					ds_motivo_saida_regra_w	:= 'Regra regulamentação';
					goto final;
				end if;
			end if;

			if (nr_seq_regra_partic_w IS NOT NULL AND nr_seq_regra_partic_w::text <> '') and (ie_tipo_item_w = 'P') then
				select 	count(1)
				into STRICT  	qt_participantes_w
				from 	pls_proc_participante
				where	nr_seq_conta_proc 	=  nr_seq_conta_proc_w
				and	coalesce(ie_status,'X')	<> 'C';

				/*Deve haver mais de uma participante de um precedimento para a regra ser aplicavel*/

				if (qt_participantes_w = 0) then
					select 	count(1)
					into STRICT  	qt_participantes_w
					from 	pls_conta_proc
					where	nr_sequencia 	= nr_seq_conta_proc_w
					and	((nr_seq_participante_hi IS NOT NULL AND nr_seq_participante_hi::text <> '') or (nr_seq_proc_ref IS NOT NULL AND nr_seq_proc_ref::text <> ''));
				end if;

				if (qt_participantes_w > 0) then
					ie_gerar_oc_partic_w := pls_obter_se_regra_particip(	nr_seq_conta_proc_w, nr_seq_regra_partic_w, nm_usuario_p, ie_gerar_oc_partic_w, nr_seq_ocorrencia_w);


					if (ie_gerar_oc_partic_w = 'N') then
						ds_motivo_saida_regra_w	:= 'Participantes';
						goto final;
					end if;

					select 	count(1)
					into STRICT  	qt_participantes_w
					from 	pls_proc_participante
					where	nr_seq_conta_proc 	=  nr_seq_conta_proc_w
					and	coalesce(ie_status,'X')	<> 'C';

					if (qt_participantes_w = 0) then
						ie_gerar_oc_partic_ww := ie_gerar_oc_partic_ww;
					else
						ie_gerar_oc_partic_ww := 'S';
					end if;
				else
					ds_motivo_saida_regra_w	 := 'Participantes - sem participantes';
					goto final;
				end if;
			elsif (coalesce(nr_seq_regra_partic_w,0) > 0) and
				((ie_tipo_item_w = 'M') 	   or (ie_tipo_item_w	= 'C'))		   then
				ds_motivo_saida_regra_w	:= 'Participantes - consistência de material ou conta';
				goto final;
			end if;

			/*consistêncio do contrato de intercâmbio*/

			if (nr_seq_intercambio_ww IS NOT NULL AND nr_seq_intercambio_ww::text <> '') then
				if (nr_seq_intercambio_ww <> coalesce(nr_seq_intercambio_w,0)) then
					ds_motivo_saida_regra_w	:= 'Intercâmbio';
					goto final;
				end if;
			end  if;
			if (coalesce(ie_data_item_w,0) > 0) then
				if	((dt_procedimento_w IS NOT NULL AND dt_procedimento_w::text <> '')	or (dt_material_w IS NOT NULL AND dt_material_w::text <> ''))		then
					/*Tratamento para OPM o TISS não possui um campo de data para os materiais
					que entram pelas tags de OPM -  Demitrius OS 474409*/
					if (ie_tipo_item_w = 'M')		and (coalesce(ie_tipo_desp_mat_w,0) = 7)	then
						ds_motivo_saida_regra_w	:= 'Tipo despesa material';
						goto final;
					end if;

					if (ie_data_item_w = 1) then

						if (ie_tipo_item_w = 'P') then
							if (dt_procedimento_w >= dt_entrada_int_w) then
								ds_motivo_saida_regra_w	:= 'Dt.Proc X Dt.Entrada';
								goto final;
							end if;


						elsif (ie_tipo_item_w = 'M') then

							if (dt_material_w >= dt_entrada_int_w) then
								ds_motivo_saida_regra_w := 'Dt.Material X Dt.Entrada int';
								goto final;
							end if;

						end if;

					/*Data do item maior do que a data da alta*/

					elsif (ie_data_item_w = 2) then
						if (ie_tipo_item_w = 'P') then
							if (dt_procedimento_w <= coalesce(dt_alta_int_w,clock_timestamp())) then
								ds_motivo_saida_regra_w	:= 'Dt.procedimento X Dt.Alta int';
								goto final;
							end if;

						elsif (ie_tipo_item_w = 'M') then

							if (dt_material_w <= coalesce(dt_alta_int_w,clock_timestamp())) then
								ds_motivo_saida_regra_w	:= 'Dt.Material X Dt.Alta int';
								goto final;
							end if;

						end if;

					/*Data do item menor do que a data emissão da conta*/

					elsif (ie_data_item_w = 3) then

						if (ie_tipo_item_w = 'P') then

							if (dt_procedimento_w >= coalesce(dt_emissao_w,clock_timestamp())) then
								ds_motivo_saida_regra_w	:= 'Dt.Procedimento X Dt.Emissão';
								goto final;
							end if;

						elsif (ie_tipo_item_w = 'M') then

							if (dt_material_w >= coalesce(dt_emissao_w,clock_timestamp()))then
								ds_motivo_saida_regra_w	:= 'Dt.Material X Dt.Emissao';
								goto final;
							end if;

						end if;

					/*Data do item maior do que a data atual*/

					elsif (ie_data_item_w = 4) then

						if (ie_tipo_item_w = 'P') then

							if (dt_procedimento_w <= trunc(clock_timestamp())) then
								ds_motivo_saida_regra_w	:= 'Dt.Procedimento X Sysdate';
								goto final;
							end if;

						elsif (ie_tipo_item_w = 'M') then

							if (dt_material_w <= trunc(clock_timestamp())) then
								ds_motivo_saida_regra_w	:= 'Dt.Material X Sysdate';
								goto final;
							end if;

						end if;

					/*Data do item diferente da data do atendimento da conta*/

					elsif (ie_data_item_w = 5) then

						if (ie_tipo_item_w = 'P') then

							if (dt_procedimento_w = dt_atendimento_w) then
								ds_motivo_saida_regra_w	:= 'Dt.Procedimento X Dt.Atendimento';
								goto final;
							end if;

						elsif (ie_tipo_item_w = 'M') then

							if (dt_material_w = dt_atendimento_w) then
								ds_motivo_saida_regra_w	:= 'Dt.Mateiral X Dt.Atendimento';
								goto final;
							end if;
						end if;
					end if;
				else	/*Se no XML não vir nenhum valor nas datas não gera a ocorrência*/
					goto final;
				end if;
			end if;

			if (ie_tipo_tabela_w IS NOT NULL AND ie_tipo_tabela_w::text <> '') then
				if (ie_tipo_item_w = 'P') then
					if (ie_tipo_tabela_w <> ie_tipo_tabela_imp_w) or (coalesce(ie_tipo_tabela_imp_w::text, '') = '') then
						ds_motivo_saida_regra_w	:= 'Tipo tabela';
						goto final;
					end if;
				else
					ds_motivo_saida_regra_w	:= 'Tipo tabela';
					goto final;
				end if;
			end if;

			if (coalesce(ie_exige_medico_w,'N') = 'S') and (coalesce(ie_existe_medico_w,'N') = 'S') then
				ds_motivo_saida_regra_w	:= 'Contém médico exec';
				goto final;
			end if;

			if (coalesce(ie_valida_inf_medico_w,'N') = 'S') then
				if (ie_tipo_guia_w <> '5' ) then
					if	((coalesce(nm_medico_executor_imp_w,'X') <> 'X') or (coalesce(sg_conselho_exec_imp_w,'X') <> 'X') or (coalesce(nr_crm_exec_imp_w,'X') <> 'X') or (coalesce(uf_crm_exec_imp_w,'X') <> 'X')) then
						if	((coalesce(nm_medico_executor_imp_w,'X') <> 'X') and (coalesce(sg_conselho_exec_imp_w,'X') <> 'X') and (coalesce(nr_crm_exec_imp_w,'X') <> 'X') and (coalesce(uf_crm_exec_imp_w,'X') <> 'X')) then
							ds_motivo_saida_regra_w	:= 'Validação Médica';
							goto final;
						end if;
					elsif	((coalesce(nm_medico_executor_imp_w,'X') = 'X') and (coalesce(sg_conselho_exec_imp_w,'X') = 'X') and (coalesce(nr_crm_exec_imp_w,'X') = 'X') and (coalesce(uf_crm_exec_imp_w,'X') = 'X')) then
						ds_motivo_saida_regra_w	:= 'Validação Médica 2';
						goto final;
					end if;

				elsif (coalesce(nr_seq_conta_proc_w,0)>0) then
					if (qt_participante_w > 0)	then
						open C02;/*cursor ira verificar se os participantes do procedimento possuem as informações completas*/
						loop
						fetch C02 into
							nm_medico_executor_proc_w,
							nr_crm_imp_proc_w,
							uf_crm_imp_proc_w,
							sg_conselho_imp_proc_w,
							nr_Seq_grau_partic_c02_w,
							nr_seq_partic_w;
						EXIT WHEN NOT FOUND; /* apply on C02 */
							begin
							if	((coalesce(nm_medico_executor_proc_w,'X') <> 'X') or (coalesce(sg_conselho_imp_proc_w,'X') <> 'X') or (coalesce(nr_crm_imp_proc_w,'X') <> 'X') or (coalesce(uf_crm_imp_proc_w,'X') <> 'X')) then
								if	((coalesce(nm_medico_executor_proc_w,'X') <> 'X') and (coalesce(sg_conselho_imp_proc_w,'X') <> 'X') and (coalesce(nr_crm_imp_proc_w,'X') <> 'X') and (coalesce(uf_crm_imp_proc_w,'X') <> 'X')) then
									ds_motivo_saida_regra_w	:= 'Validação Médica 3';
									goto final2;
								end if;
							elsif	((coalesce(nm_medico_executor_proc_w,'X') = 'X') and (coalesce(sg_conselho_imp_proc_w,'X') = 'X') and (coalesce(nr_crm_imp_proc_w,'X') = 'X') and (coalesce(uf_crm_imp_proc_w,'X') = 'X')) then
								ds_motivo_saida_regra_w	:= 'Validação Médica 4';
								goto final2;
							end if;
							qt_medico_inv_w := qt_medico_inv_w + 1;
							<<final2>>
							null;

							end;
						end loop;
						close C02;
					end if;
					if (qt_medico_inv_w = 0) then
						ds_motivo_saida_regra_w	:= 'Validação Médica - Final';
						goto final;
					end if;
				else
					ds_motivo_saida_regra_w	:= 'Validação Médica - Final 2';
					goto final;
				end if;
			end if;

			ie_medico_crm_w := 'N';
			qt_medico_inv_w := 0;

			if (qt_min_digito_crm_w IS NOT NULL AND qt_min_digito_crm_w::text <> '') and (qt_participante_w = 0)	then
				if (coalesce(nr_crm_exec_imp_w,'X') <> 'X') and (coalesce(sg_conselho_exec_imp_w,'X') = 'CRM')and ( length(nr_crm_exec_imp_w) > qt_min_digito_crm_w ) then
					ds_motivo_saida_regra_w	:= 'CRM Médico';
					goto final;
				end if;
			end if;
			/*Bloqueio de material*/

			if (coalesce(ie_bloqueio_mat_w,'X') <> 'X')	then
				if (ie_bloqueio_mat_w   not in (	ie_bloqueia_custo_op_w,
									ie_bloqueia_pre_pag_w,
									ie_bloqueia_intercambio_w,
									ie_bloqueia_prod_nao_reg_w,
									ie_bloqueia_prod_reg_w )) then
					ds_motivo_saida_regra_w	:= 'Bloqueio Material';
					goto final;
				end if;

				if (coalesce(ie_bloqueia_custo_op_w,'N') = 'N')		and (coalesce(ie_bloqueia_pre_pag_w,'N') = 'N')		and (coalesce(ie_bloqueia_intercambio_w,'N') = 'N')	and (coalesce(ie_bloqueia_prod_nao_reg_w,'N') = 'N')	and (coalesce(ie_bloqueia_prod_reg_w,'N') = 'N')		then
					ds_motivo_saida_regra_w	:= 'Bloqueio Material 2';
					goto final;
				end if;

			end if;

			if (ie_somar_estrutura_w <> 'N') then

					SELECT * FROM pls_obter_qt_vl_estrut_oc(	nr_seq_conta_p, nr_seq_protocolo_w, cd_procedimento_regra_w, ie_origem_proced_regra_w, nr_seq_grupo_servico_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, nr_seq_proc_tipo_atend_regra_w, nr_seq_material_w, nr_seq_estrut_mat_w, cd_estabelecimento_p, ie_somar_estrutura_w, qt_retorno_sum_estrut_w, vl_retorno_sum_estrut_w) INTO STRICT qt_retorno_sum_estrut_w, vl_retorno_sum_estrut_w;
			end if;

			/*Consistência do valor dos itens*/

			if (vl_minimo_item_w IS NOT NULL AND vl_minimo_item_w::text <> '') or (vl_max_item_w IS NOT NULL AND vl_max_item_w::text <> '') then
				if (ie_somar_estrutura_w = 'N') then
					if (ie_tipo_item_w = 'P') then
						if (coalesce(ie_tipo_valor_w,'T') = 'T')	then
							if (coalesce(vl_procedimento_w,0) > vl_minimo_item_w) and (vl_minimo_item_w IS NOT NULL AND vl_minimo_item_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Consistência de valor - 1';
								goto final;
							end if;

							if (coalesce(vl_procedimento_w,0) < vl_max_item_w) and (vl_max_item_w IS NOT NULL AND vl_max_item_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Consistência de valor - 2';
								goto final;
							end if;
						elsif (ie_tipo_valor_w = 'U')	then
							if (coalesce(vl_unitario_proc_w,0) > vl_minimo_item_w) and (vl_minimo_item_w IS NOT NULL AND vl_minimo_item_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Consistência de valor - 3';
								goto final;
							end if;


							if (coalesce(vl_unitario_proc_w,0) < vl_max_item_w) and (vl_max_item_w IS NOT NULL AND vl_max_item_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Consistência de valor - 4';
								goto final;
							end if;
						end if;
					elsif (ie_tipo_item_w = 'M') then
						if (coalesce(ie_tipo_valor_w,'T') = 'T')	then
							if (coalesce(vl_material_w,0) > vl_minimo_item_w) and (vl_minimo_item_w IS NOT NULL AND vl_minimo_item_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Consistência de valor - 5';
								goto final;
							end if;

							if (coalesce(vl_material_w,0) < vl_max_item_w) and (vl_max_item_w IS NOT NULL AND vl_max_item_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Consistência de valor - 6';
								goto final;
							end if;
						elsif (ie_tipo_valor_w = 'U')	then
							if (coalesce(vl_unitario_mat_w,0) < vl_max_item_w) and (vl_max_item_w IS NOT NULL AND vl_max_item_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Consistência de valor - 7';
								goto final;
							end if;

							if (coalesce(vl_material_w,0) > vl_minimo_item_w) and (vl_minimo_item_w IS NOT NULL AND vl_minimo_item_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Consistência de valor - 8';
								goto final;
							end if;
						end if;
					else
						ds_motivo_saida_regra_w	:= 'Consistência de valor - 11';
						goto final;
					end if;
				else
					if (coalesce(vl_retorno_sum_estrut_w,0) > vl_minimo_item_w) and (vl_minimo_item_w IS NOT NULL AND vl_minimo_item_w::text <> '') then
						ds_motivo_saida_regra_w	:= 'Consistência de valor - 9';
						goto final;
					end if;

					if (coalesce(vl_retorno_sum_estrut_w,0) < vl_max_item_w) and (vl_max_item_w IS NOT NULL AND vl_max_item_w::text <> '') then
						ds_motivo_saida_regra_w	:= 'Consistência de valor - 10';
						goto final;
					end if;

					ds_observacao_w	:= ds_observacao_w || 'Valor total: R$' || campo_mascara_virgula_casas(vl_retorno_sum_estrut_w,2) || chr(13) || chr(10);
				end if;
			end if;

			/*Consistência da quantidade dos itens*/

			if	((coalesce(qt_minimo_item_w,0) > 0) or (coalesce(qt_maximo_item_w,0) > 0)) then
				-- insert into dgk values ('gerar ocorrencia 1 - '||ie_somar_estrutura_w);
				if (ie_somar_estrutura_w = 'N') then

					if (ie_tipo_item_w = 'P') then

						if	((coalesce(qt_procedimento_w,0) > coalesce(qt_minimo_item_w,coalesce(qt_procedimento_w,0))) or (coalesce(qt_procedimento_w,0) < coalesce(qt_maximo_item_w,coalesce(qt_procedimento_w,0)))) then
							ds_motivo_saida_regra_w	:= 'Qt.max procedimento';
							goto final;
						end if;
					elsif (ie_tipo_item_w = 'M') then

						if	((coalesce(qt_material_w,0) > coalesce(qt_minimo_item_w,coalesce(qt_material_w,0))) or (coalesce(qt_material_w,0) < coalesce(qt_maximo_item_w,coalesce(qt_material_w,0)))) then
							ds_motivo_saida_regra_w	:= 'Qt.Max material';
							goto final;
						end if;
					end if;
					/*Ver se apresentou mais de uma vez o mesmo procedimento na mesma conta*/

				else

					if	((coalesce(qt_retorno_sum_estrut_w,0) > coalesce(qt_minimo_item_w,coalesce(qt_retorno_sum_estrut_w,0))) or (coalesce(qt_retorno_sum_estrut_w,0) < coalesce(qt_maximo_item_w,coalesce(qt_retorno_sum_estrut_w,0)))) then
						ds_motivo_saida_regra_w	:= 'Qt.Sum estrutura ';
						goto final;
					else
						ds_observacao_w := ds_observacao_w||'Qtd. total: '||qt_retorno_sum_estrut_w||chr(13)||chr(10);
					end if;
				end if;
			end if;
			/*Consistência de valores negativos*/

			if (coalesce(ie_valor_negativo_w,'N') = 'S') then
				if (ie_tipo_item_w = 'P') then
					if	not(coalesce(vl_procedimento_w,0) < 0) then
						ds_motivo_saida_regra_w	:= 'Valor Negativo Proc';
						goto final;
					end if;
				elsif (ie_tipo_item_w = 'M') then
					if	not(coalesce(vl_material_w,0) < 0) then
						ds_motivo_saida_regra_w	:= 'Valor Negativo Max';
						goto final;
					end if;
				end if;
			end if;

			/*Consistência do procedimento*/

			if (cd_procedimento_regra_w IS NOT NULL AND cd_procedimento_regra_w::text <> '') then
				if (ie_tipo_item_w = 'P') and
					((cd_procedimento_w <> cd_procedimento_regra_w) or (ie_origem_proced_w <> ie_origem_proced_regra_w)) then
					/*se não encontrar com o procedimento tem que olhar o campo imp Demitrius*/

					if (cd_procedimento_imp_w <> cd_procedimento_regra_w)	then
						ds_motivo_saida_regra_w	:= 'Proc Imp X Proc Regra';
						goto final;
					end if;
				elsif (ie_tipo_item_w = 'M') then
					/*Material não é verificado*/

					ds_motivo_saida_regra_w	:= 'Material - Proc Imp X Proc Regra';
					goto final;
				end if;
			end if;

			/*Consistência do material*/

			if (nr_seq_material_regra_w IS NOT NULL AND nr_seq_material_regra_w::text <> '') then
				if (ie_tipo_item_w = 'P') then
					ds_motivo_saida_regra_w	:= 'Material Regra - Procedimento';
					goto final;
				elsif (ie_tipo_item_w = 'M') and (nr_seq_material_regra_w <> nr_seq_material_w) then
					ds_motivo_saida_regra_w	:= 'Material regra X Material Imp';
					goto final;
				end if;
			end if;

			/*Consistência de quantidade fracionada*/

			if (coalesce(ie_qtd_item_fracionada_w,'N') <> 'N') then
				/*Diego - 03/05/2011 - Se o resto da divisão do número pelo seu trunc for maior que 0 então este é fracionado*/

				if (ie_tipo_item_w = 'P') and (mod(qt_procedimento_w, trunc(qt_procedimento_w)) = 0) then
					ds_motivo_saida_regra_w	:= 'Qt.Fracionada - Procedimento';
					goto final;
				elsif (ie_tipo_item_w = 'M') and (mod(qt_material_w, trunc(qt_material_w)) = 0) then
					ds_motivo_saida_regra_w	:= 'Qt.Fracionada - Material';
					goto final;
				end if;
			end if;

			/* Regra de Status Liberação mat/Med , somente materiais  - Askono */

			if (ie_status_lib_matmed_regra_w IS NOT NULL AND ie_status_lib_matmed_regra_w::text <> '') and (ie_tipo_item_w = 'M')  then
				/*obtendo status do material especial*/

				begin
					select	ie_status,
						nr_seq_material
					into STRICT	ie_mat_espec_aut_w,
						nr_seq_material_lib_w
					from	pls_solic_lib_mat_med
					where	nr_seq_segurado = nr_seq_segurado_p
					and	nr_seq_material = nr_seq_material_w
					and	nr_seq_guia	= nr_seq_guia_ww;
				exception
				when others then
					ie_mat_espec_aut_w	:= '';
					nr_seq_material_lib_w	:= null;
				end;

				if ( coalesce(nr_seq_material_lib_w,0) > 0) then

					if (ie_mat_espec_aut_w <> ie_status_lib_matmed_regra_w )   then
						ds_motivo_saida_regra_w	:= 'Liberação Material';
						goto final;
					end if;
				else
					ds_motivo_saida_regra_w	:= 'LIberação Material 2';
					goto final;
				end if;

			end if;

			/*Consistência Tipo de saída da internação*/

			if (nr_seq_saida_int_w IS NOT NULL AND nr_seq_saida_int_w::text <> '') then
				select 	max(z.cd_tiss)
				into STRICT	cd_motivo_alta_regra_w
				from 	pls_motivo_saida z
				where 	z.ie_situacao 		= 'A'
				and	z.nr_sequencia 		= nr_seq_saida_int_W
				and 	z.cd_estabelecimento 	= cd_estabelecimento_p  LIMIT 1;

				if (coalesce(cd_motivo_alta_regra_w,0) > 0) then
					if (cd_motivo_alta_w <> cd_motivo_alta_regra_w) then
						ds_motivo_saida_regra_w	:= 'Tipo saída internação';
						goto final;
					end if;
				end if;
			end if;

			/*Diego OS - 324832 - Removido pois será tratado na camo ie_atributo
			     Consistência de declaração de óbito
			if	(nvl(ie_sem_declaracao_obito_w,'N') = 'S') then

				select	count(*)
				into	qt_declaracoes_obito_w
				from	pls_diagnost_conta_obito
				where	nr_seq_conta	= nr_seq_conta_p
				and	nvl(nr_declaracao_obito_imp,'X') = 'X';

				/*Se há declarações de óbito então não gera ocorrência
				if	(qt_declaracoes_obito_w > 0) then
					goto final;
				end if;

			end if;*/
			/*Consistência de existência de data alta*/

			if (coalesce(ie_data_alta_w,'N') = 'S') then

				if (coalesce(to_char(dt_alta_int_w),'X') <> 'X') then
					ds_motivo_saida_regra_w	:= 'Existencia de data alta';
					goto final;
				end if;

			end if;

			/*Verificar as regras de tipo de atendimento X procedimento*/

			if (nr_seq_proc_tipo_atend_regra_w IS NOT NULL AND nr_seq_proc_tipo_atend_regra_w::text <> '') then

				select	max(nr_seq_tipo_atendimento)
				into STRICT	nr_seq_tipo_atend_regra_w
				from	pls_oc_proc_atendimento
				where	nr_sequencia = nr_seq_proc_tipo_atend_regra_w;

				if (coalesce(nr_seq_tipo_atend_w,0) = coalesce(nr_seq_tipo_atend_regra_w,0)) then
					if (ie_tipo_item_w = 'P') and (pls_obter_se_proc_atend(cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_tipo_atend_regra_w) = 'S') then
						ds_motivo_saida_regra_w	:= 'Tipo de atendimento 1';
						goto final;
					elsif	((ie_tipo_item_w = 'M') and (pls_obter_se_mat_atend(nr_seq_material_w, nr_seq_proc_tipo_atend_regra_w) = 'S')) then
						ds_motivo_saida_regra_w	:= 'Tipo de Atendimento 2';
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/*Prestador selecionado na regra - askono 20/07/11*/

			if ('E' = ie_tipo_prestador_w and coalesce(nr_seq_prestador_exec_p,0) > 0) then
				nr_seq_prestador_w	:=	nr_seq_prestador_exec_p;

			elsif ('A' = ie_tipo_prestador_w and coalesce(nr_seq_prestador_atend_p,0) > 0) then
				nr_seq_prestador_w	:=	nr_seq_prestador_atend_p;

			elsif ('S' = ie_tipo_prestador_w and coalesce(nr_seq_prestador_solic_p,0) > 0) then
				nr_seq_prestador_w	:=	nr_seq_prestador_solic_p;
			else
				nr_seq_prestador_w	:= nr_seq_prestador_exec_p;
			end if;

			/*Robson - OS - 379133*/

			if (cd_especialidade_medica_w IS NOT NULL AND cd_especialidade_medica_w::text <> '') then
				ie_espec_medica_w	:= pls_obter_se_espec_prestador(nr_seq_prestador_w, cd_especialidade_medica_w);
				if (ie_espec_medica_w	= 'N') then
					ds_motivo_saida_regra_w	:= 'Especialidade Médica';
					goto final;
				end if;
			end if;
			/*Consistência de prestador inativo
			    askono OS 336214 - 20/07/2011 - MODIFICADO */
			if (coalesce(ie_prestador_inativo_w,'X') = 'S') then
				/*(E,S,A)(Executor,Solicitante,Atendimento)*/

				dt_emissao_ww 		:= coalesce(coalesce(dt_procedimento_w,dt_emissao_w),dt_mes_competencia_w);
				ie_prest_conta_w	:= 'N';
				nr_seq_prest_inativo_w 	:= null;
				nm_prestador_inativo_w	:= '';

				select	coalesce(max('S'),'N')
				into STRICT	ie_situacao_prest_w
				from	pls_prestador
				where	nr_sequencia = case when 'E' = ie_tipo_prestador_w then nr_seq_prestador_exec_imp_ww
							    when 'A' = ie_tipo_prestador_w then nr_seq_prestador_atend_p
							    when 'S' = ie_tipo_prestador_w then nr_seq_prestador_solic_p
						       end
				and	dt_emissao_ww between dt_cadastro and coalesce(dt_exclusao, dt_emissao_ww)
				and	ie_situacao 	= 'A';

				/*Diego OS 317506 - 18/05/2011 - Caso for uma verificação de procedimentos é verificado os participantes*/

				if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') and (coalesce(ie_situacao_prest_w,'S') = 'S') then

					/*Verificar se existe participante no procedimento, somente se existir gera a ocorrencia Demitrius OS - 453582*/

					select	count(1)
					into STRICT	qt_participante_proc_w
					from	pls_proc_participante
					where 	nr_seq_conta_proc = nr_seq_conta_proc_w
					and	(cd_prestador_imp IS NOT NULL AND cd_prestador_imp::text <> '');

					if (qt_participante_proc_w > 0)	then
						ie_situacao_prest_w	:= 'N';

						select	count(1)
						into STRICT	qt_situacao_prest_w
						from	pls_proc_participante a
						where	a.nr_seq_conta_proc = nr_seq_conta_proc_w
						and	exists	(	SELECT	1
									from	pls_prestador x
									where	((a.cd_prestador_imp = x.cd_prestador) or (a.cd_prestador_imp  = x.nr_sequencia))
									and	dt_emissao_ww >= dt_cadastro
									and (dt_emissao_ww <= dt_exclusao or coalesce(dt_exclusao::text, '') = ''));

						if (coalesce(qt_situacao_prest_w,0) > 0)	then
							ie_situacao_prest_w	:= 'S';
						else
							ie_prest_conta_w := 'S';
						end if;
					end if;
				end if;

				if (ie_situacao_prest_w = 'S') then
					ds_motivo_saida_regra_w	:= ' Prestador Habilitado para aquele login';
					goto final;
				else
					/*Identifica quais prestadores estão inativos para apresentar ao prestador OS 545705 dgkorz*/

					if (ie_prest_conta_w = 'S') then
						select	max(nr_sequencia)
						into STRICT	nr_seq_prest_inativo_w
						from	pls_prestador a
						where	exists (SELECT	cd_prestador_imp
								from	pls_proc_participante x
								where	x.nr_seq_conta_proc = nr_seq_conta_proc_w
								and	((x.cd_prestador_imp = a.cd_prestador) or (x.cd_prestador_imp  = a.nr_sequencia)))
						and	(not ((dt_emissao_w >= dt_cadastro) and (dt_emissao_w <= dt_exclusao or coalesce(dt_exclusao::text, '') = '')));

						if (nr_seq_prest_inativo_w IS NOT NULL AND nr_seq_prest_inativo_w::text <> '') then
							nm_prestador_inativo_w := pls_obter_dados_prestador(nr_seq_prest_inativo_w,'N');
							ds_observacao_w := ds_observacao_w||' Prestador inativo '||pls_obter_dados_prestador(nr_seq_prest_inativo_w,'CD')||' - '||nm_prestador_inativo_w||' ; ';
						end if;

					else
						select	max(nr_sequencia)
						into STRICT	nr_seq_prest_inativo_w
						from	pls_prestador
						where	nr_sequencia = case when 'E' = ie_tipo_prestador_w then nr_seq_prestador_exec_imp_ww
									    when 'A' = ie_tipo_prestador_w then nr_seq_prestador_atend_p
									    when 'S' = ie_tipo_prestador_w then nr_seq_prestador_solic_p
								       end
						and	(not ((dt_emissao_w between dt_cadastro and coalesce(dt_exclusao, dt_emissao_w)) and (ie_situacao 	= 'A')));

						if (nr_seq_prest_inativo_w IS NOT NULL AND nr_seq_prest_inativo_w::text <> '') then
							nm_prestador_inativo_w := pls_obter_dados_prestador(nr_seq_prest_inativo_w,'N');
							ds_observacao_w := ds_observacao_w||' Prestador inativo '||pls_obter_dados_prestador(nr_seq_prest_inativo_w,'CD')||' - '||nm_prestador_inativo_w||' ; ';
						end if;
					end if;
				end if;

			end if;
			/*Tratamento criado para realizar a validação do prestador solicitante, esta validação irá verificar se o prestador solicitante da conta é igual ao prestador solicitante da requsição OS. 547792 dgkorz*/

			if (ie_valida_prest_solic_w = 'S')	then
				if (ie_tipo_guia_w		in ('3','4')) and (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
					/*Limpando as variaveis*/

					nr_seq_prest_requisicao_w	:= null;

					if (coalesce(nr_seq_requisicao_w::text, '') = '') then
						select	max(nr_seq_requisicao)
						into STRICT	nr_seq_requisicao_w
						from	pls_execucao_requisicao
						where	nr_seq_guia	= nr_seq_guia_w;
					end if;

					if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then
						select	max(nr_seq_prestador)
						into STRICT	nr_seq_prest_requisicao_w
						from	pls_requisicao
						where 	nr_sequencia	= nr_seq_requisicao_w;

						if (nr_seq_prest_requisicao_w 	= nr_seq_prestador_imp_w) then
							ds_motivo_saida_regra_w	:= ' Prestador da requisição igual ao prestador da conta ';
							goto final;
						else
							ds_observacao_w := ds_observacao_w||' Prestador da requisição '||pls_obter_dados_prestador(nr_seq_prest_requisicao_w,'CD')||' - '|| pls_obter_dados_prestador(	nr_seq_prest_requisicao_w,'N')||' ; ';
						end if;
					else
						ds_motivo_saida_regra_w	:= ' Requisição não encontrada ';
						goto final;
					end if;
				else
					ds_motivo_saida_regra_w	:= ' Guia de resumo de internação ';
					goto final;
				end if;
			end if;

			if (ie_valida_prest_exec_w	 = 'S')	then
				if (ie_tipo_guia_w		in ('3','4')) and (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
					/*Limpando as variaveis*/

					nr_seq_prest_requisicao_w	:= null;

					if (coalesce(nr_seq_requisicao_w::text, '') = '') then
						select	max(nr_seq_requisicao)
						into STRICT	nr_seq_requisicao_w
						from	pls_execucao_requisicao
						where	nr_seq_guia	= nr_seq_guia_w;
					end if;

					if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then
						select	max(nr_seq_prestador_exec)
						into STRICT	nr_seq_prest_requisicao_w
						from	pls_requisicao
						where 	nr_sequencia	= nr_seq_requisicao_w;

						if (nr_seq_prest_requisicao_w 	= nr_seq_prestador_exec_imp_w) then
							ds_motivo_saida_regra_w	:= ' Prestador da requisição igual ao prestador da conta ';
							goto final;
						else
							ds_observacao_w := ds_observacao_w||' Prestador da Guia '||pls_obter_dados_prestador(nr_seq_prest_requisicao_w,'CD')||' - '|| pls_obter_dados_prestador(nr_seq_prest_requisicao_w,'N')||' Prestador exec '||pls_obter_dados_prestador(nr_seq_prestador_exec_imp_w,'CD')||' - '|| pls_obter_dados_prestador(nr_seq_prestador_exec_imp_w,'N')||' ; ';
						end if;
					else
						ds_motivo_saida_regra_w	:= ' Requisição não encontrada ';
						goto final;
					end if;
				else
					ds_motivo_saida_regra_w	:= ' Guia de resumo de internação ';
					goto final;
				end if;
			end if;

			/*Valida o prestador do protocolo em relação ao prestador da guia*/

			if (ie_valida_prest_prot_w	 = 'S')	then
				if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
					/*Limpando as variaveis*/

					nr_seq_prest_requisicao_w	:= null;

					select	max(nr_seq_prestador)
					into STRICT	nr_seq_prest_requisicao_w
					from	pls_guia_plano
					where 	nr_sequencia	= nr_seq_guia_w;

					if (nr_seq_prest_requisicao_w 	= nr_seq_prestador_prot_imp_w) then
						ds_motivo_saida_regra_w	:= ' Prestador da guia igual ao prestador do protocolo ';
						goto final;
					else
						ds_observacao_w := ds_observacao_w||' Prestador da Guia '||pls_obter_dados_prestador(nr_seq_prest_requisicao_w,'CD')||' - '|| pls_obter_dados_prestador(nr_seq_prest_requisicao_w,'N')||' Prestador prot '||pls_obter_dados_prestador(nr_seq_prestador_prot_imp_w,'CD')||' - '|| pls_obter_dados_prestador(nr_seq_prestador_prot_imp_w,'N')||' ; ';
					end if;

				else
					ds_motivo_saida_regra_w	:= ' Guia de não encontrada ';
					goto final;
				end if;
			elsif (ie_valida_prest_prot_w	 = 'C')	then
				if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
					/*Limpando as variaveis*/

					nr_seq_prest_requisicao_w	:= null;

					select	max(nr_seq_prestador)
					into STRICT	nr_seq_prest_requisicao_w
					from	pls_guia_plano
					where 	nr_sequencia	= nr_seq_guia_w;


					/* Obter códigos dos prestadores */

					if (nr_seq_prest_requisicao_w IS NOT NULL AND nr_seq_prest_requisicao_w::text <> '') then
						select	cd_prestador
						into STRICT	cd_prest_requisicao_w
						from	pls_prestador a
						where	a.nr_sequencia	= nr_seq_prest_requisicao_w;
					end if;

					if (nr_seq_prestador_prot_imp_w IS NOT NULL AND nr_seq_prestador_prot_imp_w::text <> '') then
						select	cd_prestador
						into STRICT	cd_prest_protocolo_w
						from	pls_prestador a
						where	a.nr_sequencia	= nr_seq_prestador_prot_imp_w;
					end if;

					if (cd_prest_requisicao_w = cd_prest_protocolo_w) then
						ds_motivo_saida_regra_w	:= ' Prestador da guia igual ao prestador do protocolo ';
						goto final;
					else
						ds_observacao_w := ds_observacao_w||' Prestador da Guia '||pls_obter_dados_prestador(nr_seq_prest_requisicao_w,'CD')||' - '|| pls_obter_dados_prestador(nr_seq_prest_requisicao_w,'N')||' Prestador prot '||pls_obter_dados_prestador(nr_seq_prestador_prot_imp_w,'CD')||' - '|| pls_obter_dados_prestador(nr_seq_prestador_prot_imp_w,'N')||' ; ';
					end if;

				else
					ds_motivo_saida_regra_w	:= ' Guia de não encontrada ';
					goto final;
				end if;
			end if;

			if (qt_regra_prest_w > 0) then
				/* Francisco - 28/06/2012 - Validação complementar de prestador */

				ie_validacao_compl_prest_w := pls_valida_compl_ocor_prest(	'PLS_OCORRENCIA_CONTA_WEB', nr_seq_regra_w, nr_seq_conta_p, nr_seq_prestador_w, coalesce(dt_procedimento_w,dt_emissao_w), ie_validacao_compl_prest_w);
			end if;

			if (ie_validacao_compl_prest_w = 'N') then
				ds_motivo_saida_regra_w	:= 'Complemento da regra';
				goto final;
			end if;

			/* Regra dos nascidos vivos,  se a soma dos cmapos qt_nasc_vivos_prematuros e  qt_nasc_vivos_termo, for diferente a quantidade de registros da tabela pls_diagnostico_nasc_vivo, então gera a ocorrência*/

			if (coalesce(ie_nascido_vivo_w,'N') = 'S') then
				qt_total_vivos_w := qt_nasc_vivos_prematuros_imp_w + qt_nasc_vivos_imp_w;

				select	count(1)
				into STRICT	qt_reg_w
				from	pls_diagnostico_nasc_vivo
				where	nr_seq_conta = nr_seq_conta_p;

				if (qt_reg_w = coalesce(qt_total_vivos_w,0)) then
					ds_motivo_saida_regra_w	:= 'Nascidos Vivos';
					goto final;
				end if;
			end if;


			/*askono -   OS 336214  - verifica se o prestador do protocolo é igual ao prestador selecionado.
			    Se os prestadores forem diferentes, então gera ocorrência */
			if (ie_prestador_exec_w = 'S') then
				if (nr_seq_prestador_atend_p > 0) and (nr_seq_prestador_atend_p = nr_seq_prestador_w)  then
					ds_motivo_saida_regra_w	:= 'Prestador Executor';
					goto final;
				end if;
			end if;

			/*Obter se a regra é para um prestador especifico - askono OS 336228  21-07-11*/

			if (coalesce(nr_seq_prestador_regra_w,0) > 0) then
				if (nr_seq_prestador_regra_w <> nr_seq_prestador_w) then
					ds_motivo_saida_regra_w	:= 'Prestador Regra';
					goto final;
				end if;
			end if;

			/*Regra para um tipo de acomodação específico - askono OS 336440*/

			if (coalesce(nr_seq_tipo_acomodacao_regra_w,0)>0) then
				/*Obter o cd_tiss do tipo de acomodaçao da regra*/

				select	max(cd_tiss)
				into STRICT	cd_tiss_tipo_acomodacao_w
				from  	pls_tipo_acomodacao
				where	cd_estabelecimento = cd_estabelecimento_p
				and 	nr_sequencia = nr_seq_tipo_acomodacao_regra_w
				and 	ie_situacao = 'A';

				if (coalesce(cd_tiss_tipo_acomodacao_w,'X') <> coalesce(cd_tipo_acomodacao_imp_w,'X') ) then
					ds_motivo_saida_regra_w	:= 'Acomodação TISS';
					goto final;
				end if;
			end if;

			/* Consiste se o beneficiario da autorização é o mesmo da conta  -  ASKONO OS  336220 - 02/08/11*/

			/* Desconsiderar guia de honorario individual, por enquanto, e considerar a ligação entre guias pela guia referência. Por enquanto foi decidido implementar desta maneira. */

			if (ie_benef_autorizacao_w = 'S')  then

				ie_segurado_igual_w	:= '';
				nr_seq_segurado_w	:= nr_seq_segurado_p;

				if (cd_guia_imp_w IS NOT NULL AND cd_guia_imp_w::text <> '') then
					select	max(nr_Sequencia)
					into STRICT	nr_seq_guia_w
					from   	pls_guia_plano
					where  	cd_guia = cd_guia_imp_w;

					if (coalesce(nr_seq_guia_w::text, '') = '')	then
						select	max(nr_Sequencia)
						into STRICT	nr_seq_guia_w
						from   	pls_guia_plano
						where  	cd_guia_pesquisa = cd_guia_imp_w;
					end if;
				end if;

				if (coalesce(nr_seq_guia_w,0) > 0) then

					select 	coalesce(nr_seq_segurado,0)
					into STRICT	nr_Seq_segurado_guia_w
					from 	pls_guia_plano
					where	nr_sequencia 	= nr_Seq_guia_w;

					if ( nr_seq_segurado_w = nr_Seq_segurado_guia_w ) then
						ds_motivo_saida_regra_w	:= 'Segurado - Guia -Autorização';
						goto final;
					end if;
				else
					ds_motivo_saida_regra_w	:= 'Segurado - Guia -Autorização	2';
					goto final;
				end if;
			end if;
			/*fim*/

			---------------------------CONSISTE MATERIAL PARA O PRESTADOR--------------------------------
			if (coalesce(ie_consiste_mat_prestador_w,'N') = 'S')	and (coalesce(nr_seq_material_w,0) <> 0)	then

				ie_internacao_w	:= pls_obter_se_internado(nr_seq_conta_p,null);

				ie_consiste_material_w	:= pls_obter_se_mat_prestador(	nr_seq_prestador_prot_imp_w,
											null,
											nr_seq_material_w,
											dt_atendimento_w,
											nr_seq_prestador_exec_p,
											ie_internacao_w,
											cd_estabelecimento_p,
											null);

				if (ie_consiste_material_w = 'S')	then
					ds_motivo_saida_regra_w	:= 'Consiste material';
					goto final;
				end if;
			elsif (coalesce(ie_consiste_mat_prestador_w,'N') = 'S')	and (coalesce(nr_seq_material_w,0) = 0)	then
				ds_motivo_saida_regra_w	:= 'Consite material prestador';
				goto final;
			end if;
			------------------------------- CARACTERÍSTICAS DE QUANTIDADE----------------------------
			/* Verificar se a regra por quantidade liberada  - ASKONO */

			if (coalesce(qt_liberada_w,0) > 0) then
				/*REPLICADO DAS REGRAS DA CONTA MEDICA*/

				if (ie_tipo_item_w = 'P') then

					ie_tipo_item_ww := 7;
				else
					ie_tipo_item_ww := 8;
				end if;

				if (coalesce(ie_incidencia_quantidade_w,'A') = 'A')	then
					ie_qtde_liberacao_w	:= pls_obter_se_qtd_ocorrencia(	coalesce(nr_seq_conta_proc_w,nr_seq_conta_mat_w), ie_tipo_item_ww, qt_liberada_w,
												ie_tipo_qtde_w, qt_tipo_quantidade_w, ie_tipo_pessoa_qtde_w, ie_regra_qtde_w,
												ie_somar_estrutura_w, null, nr_seq_ocorrencia_w, ie_qt_lib_posterior_w,'N',
												null, null, cd_estabelecimento_p);/* parâmetro null é NR_SEQ_ESTRUTURA*/
				elsif (coalesce(ie_incidencia_quantidade_w,'A') = 'U')	then
					ie_qtde_liberacao_w	:=pls_obter_se_qtd_tipo(	coalesce(nr_seq_conta_proc_w,nr_seq_conta_mat_w), ie_tipo_item_ww, qt_liberada_w,
												ie_tipo_qtde_w, qt_tipo_quantidade_w, ie_tipo_pessoa_qtde_w, ie_regra_qtde_w,
												ie_somar_estrutura_w, null, nr_seq_ocorrencia_w, ie_qt_lib_posterior_w,'N',
												null, null, cd_estabelecimento_p,'U');
				elsif (coalesce(ie_incidencia_quantidade_w,'A') = 'I')	then
					ie_qtde_liberacao_w	:= pls_obter_se_qtd_tipo(	coalesce(nr_seq_conta_proc_w,nr_seq_conta_mat_w), ie_tipo_item_ww, qt_liberada_w,
												ie_tipo_qtde_w, qt_tipo_quantidade_w, ie_tipo_pessoa_qtde_w, ie_regra_qtde_w,
												ie_somar_estrutura_w, null, nr_seq_ocorrencia_w, ie_qt_lib_posterior_w,'N',
												null, null, cd_estabelecimento_p,'I');
				end if;

				if (ie_qtde_liberacao_w = 'S') then
					ds_motivo_saida_regra_w	:= 'Qt. Liberada';
					goto final;
				end if;
			end if;

			------------------------------------------------------------------------CARACTERISTICAS DO BENEFICIÁRIO-----------------------------------------------------------------------------------------------------------------------
			/* Verificar se for regra de quantidade de idade minima ou maxima da regra, sendo "A" por ano e "M" por meses*/

			if (ie_unid_tempo_idade_w = 'A') then
				if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w > qt_idade_w) or
					(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w < qt_idade_w) then
					ds_motivo_saida_regra_w	:= 'Consistência de Idade 1';
					goto final;
				end if;
			elsif (ie_unid_tempo_idade_w = 'M') then
				if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w > qt_idade_meses_w) or
					(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w < qt_idade_meses_w) then
					ds_motivo_saida_regra_w	:= 'Consistência de Idade 2';
					goto final;
				end if;
			end if;

			if (coalesce(ie_consistir_cod_guia_w,'N') = 'S')        then    --Demitrius OS - 415343 Consistência de guia
				/* Francisco - 28/01/2013 - Transformei e um select só para simplificar
				- OS 545014 - Não fazer pelo CD_GUIA_REFERENCIA, não precisa */
				cd_guia_importacao_w    := pls_converte_cd_guia_pesquisa(cd_guia_imp_w);

				select 	max(nr_seq_lote_conta)
				into STRICT	nr_seq_lote_w
				from 	pls_protocolo_conta
				where	nr_sequencia = nr_seq_protocolo_w;

				select	count(1) qt,
					max(a.nr_sequencia)
				into STRICT	qt_guias_w,
					nr_seq_guia_dup_w
				from 	pls_protocolo_conta	b,
					pls_conta		a
				where	b.nr_sequencia			= a.nr_seq_protocolo
				and (a.cd_guia_pesquisa = cd_guia_importacao_w or
					a.cd_guia = cd_guia_imp_w)
				and 	(
					((coalesce(b.nr_seq_lote_conta::text, '') = '') or (b.nr_seq_lote_conta <> nr_seq_lote_w)) or
					((coalesce(b.nr_protocolo_prestador::text, '') = '') or (b.nr_protocolo_prestador != nr_protocolo_prestador_w))
					)
				and	coalesce(b.nr_seq_motivo_cancel::text, '') = ''
				and	a.ie_status <> 'C'
				and	b.ie_situacao <> 'RE'
				and	a.nr_sequencia	<> nr_seq_conta_p;

				if (nr_seq_guia_dup_w > 0) then
					select	'Protocolo ' || b.nr_sequencia || ' do lote ' || b.nr_seq_lote_conta || ' Lote prestador(' || b.nr_protocolo_prestador || '), ' ||' Origem '||Obter_Valor_Dominio(3470,a.ie_origem_conta)|| '), ' ||
							' importado por ' || coalesce(b.nm_usuario_nrec,a.nm_usuario_nrec) || ' em ' || to_char(b.dt_atualizacao_nrec,'dd/mm/yyyy hh24:mi:ss') || '.' ds_obs
					into STRICT	ds_observacao_w
					from	pls_protocolo_conta b,
						pls_conta a
					where	a.nr_seq_protocolo	= b.nr_sequencia
					and	a.nr_sequencia		= nr_seq_guia_dup_w;
				end if;

				if (qt_guias_w = 0)        then
					ds_motivo_saida_regra_w	:= 'Consistir código guia';
					goto final;
				end if;
			end if;

			---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			/*  Tratamento para nascimentos/óbitos */

			if	(ie_nasc_vivos_termo_w = 'I' AND qt_nasc_vivos_termo_w <> '0') or
				(ie_nasc_vivos_termo_w = 'D' AND qt_nasc_vivos_termo_w = '0') then
				ds_motivo_saida_regra_w	:= 'Nascidos vivos';
				goto final;
			end if;

			if	(ie_nasc_mortos_w = 'I' AND qt_nasc_mortos_w <> '0') or
				(ie_nasc_mortos_w = 'D' AND qt_nasc_mortos_w = '0') then
				ds_motivo_saida_regra_w	:= 'Nascidos Mortos';
				goto final;
			end if;

			if	(ie_nasc_vivos_prematuros_w = 'I' AND qt_nasc_vivos_prematuros_w <> '0') or
				(ie_nasc_vivos_prematuros_w = 'D' AND qt_nasc_vivos_prematuros_w = '0') then
				ds_motivo_saida_regra_w	:= 'Nascidos prematuros';
				goto final;
			end if;

			if	(ie_obito_precoce_w = 'I' AND qt_obito_precoce_w <> '0') or
				(ie_obito_precoce_w = 'D' AND qt_obito_precoce_w = '0') then
				ds_motivo_saida_regra_w	:= 'Obito Precoce';
				goto final;
			end if;


			if	(ie_obito_tardio_w = 'I' AND qt_obito_tardio_w <> '0') or
				(ie_obito_tardio_w = 'D' AND qt_obito_tardio_w = '0') then
				ds_motivo_saida_regra_w	:= 'Obito Tardio';
				goto final;
			end if;

			/*tratamento dos atributos da  conta*/

			/*A ultima rotina a ser consistida deve ser a rotina dos atributos pois dentro da mesma é chamda a rotina pls_inserir_ocorrencia*/

			if (coalesce(nr_seq_regra_atrib_w,0) > 0) then
				ie_gerado_w := pls_gerar_oc_conta_web_atrib(	nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p, nr_seq_regra_atrib_w, nr_seq_ocorrencia_w, nr_seq_guia_ww, nr_seq_conta_proc_w, nr_seq_motivo_glosa_w, qt_cid_obito_w, qt_cid_doenca_w, qt_participante_w, qt_nasc_vivos_prematuros_w, qt_obito_precoce_w, qt_obito_tardio_w, ie_tipo_guia_w, nr_seq_segurado_w, ie_obito_imp_w, nr_declaracao_obito_imp_w, cd_doenca_imp_w, ie_gerado_w);
				if (ie_gerado_w = 'N')	then
					ds_motivo_saida_regra_w	:= 'Regras de Atributo';
					goto final;
				end if;
			end if;

			/*Verificar se o prestador pertence ao grupo dos prestador - askono - OS 336520  08/08/11*/

			if (coalesce(nr_seq_grupo_prestador_w,0) > 0) then
				/* Obter dados do prestador */

				select	max(nr_seq_classificacao)
				into STRICT	nr_seq_classificacao_w
				from	pls_prestador
				where	nr_sequencia	= nr_seq_prestador_w;

				ie_grupo_prest_w	:= pls_se_grupo_preco_prestador(nr_seq_grupo_prestador_w, nr_seq_prestador_w, nr_seq_classificacao_w);
				if (ie_grupo_prest_w = 'N') then
					ds_motivo_saida_regra_w	:= 'Grupo prestador';
					goto final;
				end if;
			end if;

			if (ie_gerar_oc_partic_ww = 'S') then
				open C04;
				loop
				fetch C04 into
					nr_seq_participante_ww;
				EXIT WHEN NOT FOUND; /* apply on C04 */
					begin

					select	count(1)
					into STRICT	qt_ocorrencia_partic_w
					from	pls_ocorrencia_benef
					where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
					and	nr_seq_conta		= nr_seq_conta_p
					and	nr_seq_proc		= nr_seq_conta_proc_w
					and	nr_seq_proc_partic	= nr_seq_participante_ww;

					nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_w, null, null, nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_regra_w, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_w, 8, cd_estabelecimento_p, 'N', null, nr_seq_ocorrencia_benef_w, null, nr_seq_participante_ww, null, null);

					delete	FROM w_pls_ocorrencia_partic
					where	nr_seq_ocorrencia 	= nr_seq_ocorrencia_w
					and	nm_usuario		= nm_usuario_p
					and	nr_seq_participante 	= nr_seq_participante_ww;

					commit;

					end;
				end loop;
				close C04;
			elsif (coalesce(ie_tipo_ocorrencia_w,'AC') = 'AC')	then
				nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(nr_seq_segurado_p, nr_seq_ocorrencia_w, null, null, nr_seq_conta_p, null, null, nr_seq_regra_w, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_w, 8, cd_estabelecimento_p, 'N', null, nr_seq_ocorrencia_benef_w, null, null, null, null);
			elsif (coalesce(ie_tipo_ocorrencia_w,'AC') = 'I')	and (coalesce(nr_seq_conta_proc_w,0) <> 0)	then
				nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(nr_seq_segurado_p, nr_seq_ocorrencia_w, null, null, nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_regra_w, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_w, 3, cd_estabelecimento_p, 'N', null, nr_seq_ocorrencia_benef_w, null, null, null, null);
			elsif (coalesce(ie_tipo_ocorrencia_w,'AC') = 'I')	and (coalesce(nr_seq_conta_mat_w,0) <> 0)	then
				nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(nr_seq_segurado_p, nr_seq_ocorrencia_w, null, null, nr_seq_conta_p, null, nr_seq_conta_mat_w, nr_seq_regra_w, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_w, 4, cd_estabelecimento_p, 'N', null, nr_seq_ocorrencia_benef_w, null, null, null, null);
			end if;

			goto final2;
			<<final>>

			if (C02%ISOPEN) then
				close C02;
			end if;
			/*Deve existir uma linha após o final*/

			nr_seq_regra_w := nr_seq_regra_w;
			end;
		end loop;
		close C01;
--		end if;
		<<final2>>
		if (C01%ISOPEN) then
			close C01;
		end if;
	--end if; -- Tipo regra
	end;
	end loop;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_ocorrencia_conta_web ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, nr_seq_prestador_atend_p pls_prestador.nr_sequencia%type, nr_seq_prestador_solic_p pls_prestador.nr_sequencia%type, nr_seq_prestador_exec_p pls_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

