-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE importar_sus_atend_individual (( dt_inicio_p ehr_registro.dt_liberacao%type, dt_fim_p ehr_registro.dt_liberacao%type ) is esus_atend_individual_w esus_atend_individual) RETURNS ESUS_AUTO_FICHA_IND_ATRIB.NR_SEQUENCIA%TYPE AS $body$
DECLARE


nr_seq_retorno_w ESUS_AUTO_FICHA_IND_ATRIB.NR_SEQUENCIA%type;
BEGIN

select max(nr_sequencia)
into STRICT nr_seq_retorno_w
from ESUS_AUTO_FICHA_IND_ATRIB a
where a.nm_atributo = nm_atributo_p
  and a.nr_seq_template = nr_seq_templ_p;

if (coalesce(nr_seq_retorno_w::text, '') = '') then
  select max(nr_sequencia)
  into STRICT nr_seq_retorno_w
  from ESUS_AUTO_FICHA_IND_ATRIB a
  where a.nm_atributo = nm_atributo_p
    and coalesce(a.nr_seq_template::text, '') = '';
end if;

return nr_seq_retorno_w;

end;

function set_valor_campo(
  nm_atributo_p in ESUS_AUTO_FICHA_IND_ATRIB.NM_ATRIBUTO%type,
  ds_resultado_p in varchar2,
  esus_atend_individual_p in esus_atend_individual%rowtype
) return esus_atend_individual%rowtype is
esus_atend_individual_ww esus_atend_individual%rowtype;
begin

esus_atend_individual_ww:= esus_atend_individual_p;
if ('CD_CIAP01' = nm_atributo_p) then
	esus_atend_individual_ww.CD_CIAP01 := substr(ds_resultado_p, 1, 10);
elsif ('CD_CIAP02' = nm_atributo_p) then
	esus_atend_individual_ww.CD_CIAP02 := substr(ds_resultado_p, 1, 10);
elsif ('CD_DOENCA_CID' = nm_atributo_p) then
	esus_atend_individual_ww.CD_DOENCA_CID := substr(ds_resultado_p, 1, 10);
elsif ('CD_DOENCA_CID2' = nm_atributo_p) then
	esus_atend_individual_ww.CD_DOENCA_CID2 := substr(ds_resultado_p, 1, 10);
elsif ('DT_ULTIMA_MEST' = nm_atributo_p) then
	esus_atend_individual_ww.DT_ULTIMA_MEST := to_date(ds_resultado_p, 'dd/mm/yyyy hh24:mi:ss');
elsif ('IE_AGEND_GRUPOS' = nm_atributo_p) then
	esus_atend_individual_ww.IE_AGEND_GRUPOS := substr(ds_resultado_p, 1, 1);
elsif ('IE_AGEND_NASF' = nm_atributo_p) then
	esus_atend_individual_ww.IE_AGEND_NASF := substr(ds_resultado_p, 1, 1);
elsif ('IE_ALEITAMENTO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ALEITAMENTO := substr(ds_resultado_p, 1, 15);
elsif ('IE_ALTA_EPISODIO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ALTA_EPISODIO := substr(ds_resultado_p, 1, 1);
elsif ('IE_ANTIGLOB_TIA_SOLIC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ANTIGLOB_TIA_SOLIC := substr(ds_resultado_p, 1, 1);
elsif ('IE_ANTIGLOBULINA_TIA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ANTIGLOBULINA_TIA := substr(ds_resultado_p, 1, 1);
elsif ('IE_ASMA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ASMA := substr(ds_resultado_p, 1, 1);
elsif ('IE_ATENCAO_DOMIC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ATENCAO_DOMIC := substr(ds_resultado_p, 1, 1);
elsif ('IE_AVAL_DIAG' = nm_atributo_p) then
	esus_atend_individual_ww.IE_AVAL_DIAG := substr(ds_resultado_p, 1, 1);
elsif ('IE_CANCER_COLO_UTERO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_CANCER_COLO_UTERO := substr(ds_resultado_p, 1, 1);
elsif ('IE_CANCER_MAMA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_CANCER_MAMA := substr(ds_resultado_p, 1, 1);
elsif ('IE_COLESTEROL_TOTAL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_COLESTEROL_TOTAL := substr(ds_resultado_p, 1, 1);
elsif ('IE_COLESTE_TOTAL_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_COLESTE_TOTAL_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_CREATININA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_CREATININA := substr(ds_resultado_p, 1, 1);
elsif ('IE_CREATININA_SOLIC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_CREATININA_SOLIC := substr(ds_resultado_p, 1, 1);
elsif ('IE_DEMANDA_ESPONT' = nm_atributo_p) then
	esus_atend_individual_ww.IE_DEMANDA_ESPONT := substr(ds_resultado_p, 1, 1);
elsif ('IE_DENGUE' = nm_atributo_p) then
	esus_atend_individual_ww.IE_DENGUE := substr(ds_resultado_p, 1, 1);
elsif ('IE_DESNUTRICAO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_DESNUTRICAO := substr(ds_resultado_p, 1, 1);
elsif ('IE_DIABETES' = nm_atributo_p) then
	esus_atend_individual_ww.IE_DIABETES := substr(ds_resultado_p, 1, 1);
elsif ('IE_DPOC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_DPOC := substr(ds_resultado_p, 1, 1);
elsif ('IE_DST' = nm_atributo_p) then
	esus_atend_individual_ww.IE_DST := substr(ds_resultado_p, 1, 1);
elsif ('IE_EAS_EQU' = nm_atributo_p) then
	esus_atend_individual_ww.IE_EAS_EQU := substr(ds_resultado_p, 1, 1);
elsif ('IE_EAS_EQU_SOLICIT' = nm_atributo_p) then
	esus_atend_individual_ww.IE_EAS_EQU_SOLICIT := substr(ds_resultado_p, 1, 1);
elsif ('IE_ELETROCARDIOGRAMA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ELETROCARDIOGRAMA := substr(ds_resultado_p, 1, 1);
elsif ('IE_ELETROCARD_SOLIC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ELETROCARD_SOLIC := substr(ds_resultado_p, 1, 1);
elsif ('IE_ELETROF_HEMO_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ELETROF_HEMO_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_ELETROFORESE_HEMO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ELETROFORESE_HEMO := substr(ds_resultado_p, 1, 1);
elsif ('IE_ENCAM_CAPS' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ENCAM_CAPS := substr(ds_resultado_p, 1, 1);
elsif ('IE_ENCAM_INT_DIA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ENCAM_INT_DIA := substr(ds_resultado_p, 1, 1);
elsif ('IE_ENCAM_INTERSETOR' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ENCAM_INTERSETOR := substr(ds_resultado_p, 1, 1);
elsif ('IE_ENCAM_INT_HOSP' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ENCAM_INT_HOSP := substr(ds_resultado_p, 1, 1);
elsif ('IE_ENCAM_SER_ATE_DOM' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ENCAM_SER_ATE_DOM := substr(ds_resultado_p, 1, 1);
elsif ('IE_ENCAM_SERV_ESPEC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ENCAM_SERV_ESPEC := substr(ds_resultado_p, 1, 1);
elsif ('IE_ENCAM_URGENCIA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ENCAM_URGENCIA := substr(ds_resultado_p, 1, 1);
elsif ('IE_ESPIROMETRIA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ESPIROMETRIA := substr(ds_resultado_p, 1, 1);
elsif ('IE_ESPIROMETRIA_SOLI' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ESPIROMETRIA_SOLI := substr(ds_resultado_p, 1, 1);
elsif ('IE_EXAME_ESCARRO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_EXAME_ESCARRO := substr(ds_resultado_p, 1, 1);
elsif ('IE_EXAME_ESCARRO_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_EXAME_ESCARRO_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_FICOU_OBSERV' = nm_atributo_p) then
	esus_atend_individual_ww.IE_FICOU_OBSERV := substr(ds_resultado_p, 1, 1);
elsif ('IE_GLICEMIA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_GLICEMIA := substr(ds_resultado_p, 1, 1);
elsif ('IE_GLICEMIA_SOLICITA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_GLICEMIA_SOLICITA := substr(ds_resultado_p, 1, 1);
elsif ('IE_GRAVID_PLANE' = nm_atributo_p) then
	esus_atend_individual_ww.IE_GRAVID_PLANE := substr(ds_resultado_p, 1, 1);
elsif ('IE_HANSENIASE' = nm_atributo_p) then
	esus_atend_individual_ww.IE_HANSENIASE := substr(ds_resultado_p, 1, 1);
elsif ('IE_HDL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_HDL := substr(ds_resultado_p, 1, 1);
elsif ('IE_HDL_SOLICITADO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_HDL_SOLICITADO := substr(ds_resultado_p, 1, 1);
elsif ('IE_HEMOG_GLICADA_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_HEMOG_GLICADA_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_HEMOGLOB_GLICADA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_HEMOGLOB_GLICADA := substr(ds_resultado_p, 1, 1);
elsif ('IE_HEMOGRAMA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_HEMOGRAMA := substr(ds_resultado_p, 1, 1);
elsif ('IE_HEMOGRAMA_SOLICIT' = nm_atributo_p) then
	esus_atend_individual_ww.IE_HEMOGRAMA_SOLICIT := substr(ds_resultado_p, 1, 1);
elsif ('IE_HIPER_ARTERIAL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_HIPER_ARTERIAL := substr(ds_resultado_p, 1, 1);
elsif ('IE_LDL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_LDL := substr(ds_resultado_p, 1, 1);
elsif ('IE_LDL_SOLICITADO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_LDL_SOLICITADO := substr(ds_resultado_p, 1, 1);
elsif ('IE_LOCAL_ATENDIMENTO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_LOCAL_ATENDIMENTO := substr(ds_resultado_p, 1, 15);
elsif ('IE_OBESIDADE' = nm_atributo_p) then
	esus_atend_individual_ww.IE_OBESIDADE := substr(ds_resultado_p, 1, 1);
elsif ('IE_OBSERVACAO_GOBS' = nm_atributo_p) then
	esus_atend_individual_ww.IE_OBSERVACAO_GOBS := substr(ds_resultado_p, 1, 1);
elsif ('IE_PRE_NATAL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_PRE_NATAL := substr(ds_resultado_p, 1, 1);
elsif ('IE_PRESCR_TERAP' = nm_atributo_p) then
	esus_atend_individual_ww.IE_PRESCR_TERAP := substr(ds_resultado_p, 1, 1);
elsif ('IE_PROCED_CLI_TERAP' = nm_atributo_p) then
	esus_atend_individual_ww.IE_PROCED_CLI_TERAP := substr(ds_resultado_p, 1, 1);
elsif ('IE_PUERICULTURA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_PUERICULTURA := substr(ds_resultado_p, 1, 1);
elsif ('IE_PUERPERIO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_PUERPERIO := substr(ds_resultado_p, 1, 1);
elsif ('IE_REABILITACAO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_REABILITACAO := substr(ds_resultado_p, 1, 1);
elsif ('IE_RET_FUNDO_OLHO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_RET_FUNDO_OLHO := substr(ds_resultado_p, 1, 1);
elsif ('IE_RET_FUN_OLHO_SOLIC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_RET_FUN_OLHO_SOLIC := substr(ds_resultado_p, 1, 1);
elsif ('IE_RETORNO_CONS_AGEND' = nm_atributo_p) then
	esus_atend_individual_ww.IE_RETORNO_CONS_AGEND := substr(ds_resultado_p, 1, 1);
elsif ('IE_RETORNO_CONT_PROG' = nm_atributo_p) then
	esus_atend_individual_ww.IE_RETORNO_CONT_PROG := substr(ds_resultado_p, 1, 1);
elsif ('IE_RISCO_CARDIO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_RISCO_CARDIO := substr(ds_resultado_p, 1, 1);
elsif ('IE_SAUDE_MENTAL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_SAUDE_MENTAL := substr(ds_resultado_p, 1, 1);
elsif ('IE_SAUDE_SEX_REPROD' = nm_atributo_p) then
	esus_atend_individual_ww.IE_SAUDE_SEX_REPROD := substr(ds_resultado_p, 1, 1);
elsif ('IE_SOROL_DENGUE' = nm_atributo_p) then
	esus_atend_individual_ww.IE_SOROL_DENGUE := substr(ds_resultado_p, 1, 1);
elsif ('IE_SOROL_DENGUE_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_SOROL_DENGUE_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_SOROL_HIV' = nm_atributo_p) then
	esus_atend_individual_ww.IE_SOROL_HIV := substr(ds_resultado_p, 1, 1);
elsif ('IE_SOROL_HIV_SOLICIT' = nm_atributo_p) then
	esus_atend_individual_ww.IE_SOROL_HIV_SOLICIT := substr(ds_resultado_p, 1, 1);
elsif ('IE_SOROL_SIFILIS' = nm_atributo_p) then
	esus_atend_individual_ww.IE_SOROL_SIFILIS := substr(ds_resultado_p, 1, 1);
elsif ('IE_SOROL_SIFILIS_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_SOROL_SIFILIS_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_TABAGISMO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TABAGISMO := substr(ds_resultado_p, 1, 1);
elsif ('IE_TESTE_GRAVIDEZ' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TESTE_GRAVIDEZ := substr(ds_resultado_p, 1, 1);
elsif ('IE_TESTE_GRAVID_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TESTE_GRAVID_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_TESTE_OLHINHO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TESTE_OLHINHO := substr(ds_resultado_p, 1, 1);
elsif ('IE_TESTE_OLHINHO_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TESTE_OLHINHO_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_TESTE_ORELHINHA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TESTE_ORELHINHA := substr(ds_resultado_p, 1, 1);
elsif ('IE_TESTE_ORELHIN_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TESTE_ORELHIN_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_TESTE_PEZINHO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TESTE_PEZINHO := substr(ds_resultado_p, 1, 1);
elsif ('IE_TESTE_PEZINHO_SOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TESTE_PEZINHO_SOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_TIPO_ATENDIMENTO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TIPO_ATENDIMENTO := substr(ds_resultado_p, 1, 1);
elsif ('IE_TUBERCULOSE' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TUBERCULOSE := substr(ds_resultado_p, 1, 1);
elsif ('IE_TURNO_ATENDIMENTO' = nm_atributo_p) then
	esus_atend_individual_ww.IE_TURNO_ATENDIMENTO := substr(ds_resultado_p, 1, 1);
elsif ('IE_ULTRAS_OBSTE_SOLI' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ULTRAS_OBSTE_SOLI := substr(ds_resultado_p, 1, 1);
elsif ('IE_ULTRASSON_OBST' = nm_atributo_p) then
	esus_atend_individual_ww.IE_ULTRASSON_OBST := substr(ds_resultado_p, 1, 1);
elsif ('IE_UROCULTURA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_UROCULTURA := substr(ds_resultado_p, 1, 1);
elsif ('IE_UROCULTURA_SOLIC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_UROCULTURA_SOLIC := substr(ds_resultado_p, 1, 1);
elsif ('IE_USOU_PIC' = nm_atributo_p) then
	esus_atend_individual_ww.IE_USOU_PIC := substr(ds_resultado_p, 1, 15);
elsif ('IE_USUARIO_ALCOOL' = nm_atributo_p) then
	esus_atend_individual_ww.IE_USUARIO_ALCOOL := substr(ds_resultado_p, 1, 1);
elsif ('IE_USUARIO_DROGAS' = nm_atributo_p) then
	esus_atend_individual_ww.IE_USUARIO_DROGAS := substr(ds_resultado_p, 1, 1);
elsif ('IE_VACINA_EM_DIA' = nm_atributo_p) then
	esus_atend_individual_ww.IE_VACINA_EM_DIA := substr(ds_resultado_p, 1, 1);
elsif ('QT_ALTURA' = nm_atributo_p) then
	esus_atend_individual_ww.QT_ALTURA := (ds_resultado_p)::numeric;
elsif ('QT_GESTAS_PREVIAS' = nm_atributo_p) then
	esus_atend_individual_ww.QT_GESTAS_PREVIAS := (ds_resultado_p)::numeric;
elsif ('QT_IDADE_GESTAC' = nm_atributo_p) then
	esus_atend_individual_ww.QT_IDADE_GESTAC := (ds_resultado_p)::numeric;
elsif ('QT_PARTOS' = nm_atributo_p) then
	esus_atend_individual_ww.QT_PARTOS := (ds_resultado_p)::numeric;
elsif ('QT_PERIM_CEFALIC' = nm_atributo_p) then
	esus_atend_individual_ww.QT_PERIM_CEFALIC := (ds_resultado_p)::numeric;
elsif ('QT_PESO' = nm_atributo_p) then
	esus_atend_individual_ww.QT_PESO := (ds_resultado_p)::numeric;
end if;

return esus_atend_individual_ww;
end;

--end functions
begin

    <<obtem_atendimentos_esus>>
    for	atendimento in obtem_atendimentos loop

      esus_atend_individual_w:= null;

      select      nextval('esus_atend_individual_seq')
      into STRICT        nr_sequencia_w
;

      --  DADOS DO REGISTRO
          --  nr_sequencia
          --  cd_estabelecimento
          --  dt_atualizacao
          --  nm_usuario
          --  dt_atualizacao_nrec
          --  nm_usuario_nrec
          --  cd_pessoa_digitacao
          --  cd_pessoa_conferen
      esus_atend_individual_w.cd_estabelecimento := obter_estabelecimento_ativo();
      esus_atend_individual_w.dt_atualizacao := clock_timestamp();
      esus_atend_individual_w.nm_usuario := obter_usuario_ativo();
      esus_atend_individual_w.dt_atualizacao_nrec := clock_timestamp();
      esus_atend_individual_w.nm_usuario_nrec := obter_usuario_ativo();
      esus_atend_individual_w.cd_pessoa_digitacao := obter_pessoa_fisica_usuario(esus_atend_individual_w.nm_usuario, 'C');
      esus_atend_individual_w.cd_pessoa_conferen := obter_pessoa_fisica_usuario(esus_atend_individual_w.nm_usuario, 'C');
      esus_atend_individual_w.dt_liberacao := clock_timestamp();

      select case
        when atendimento.dt_registro between trunc(atendimento.dt_registro) + 5/24 and trunc(atendimento.dt_registro) + 12/24 then '1'
        when atendimento.dt_registro between trunc(atendimento.dt_registro) + 12/24 and trunc(atendimento.dt_registro) + 18/24 then '2'
        else '3'
      end
      into STRICT esus_atend_individual_w.IE_TURNO_ATENDIMENTO 
;

      esus_atend_individual_w.IE_LOCAL_ATENDIMENTO := '1';

      nr_seq_template_w := atendimento.nr_seq_template;
        --  DADOS DO ATEND_CONSULTA_PEPA
            --  cd_profissional
            --  nr_atendimento
            --  cd_pessoa_fisica
        esus_atend_individual_w.cd_profissional := atendimento.cd_profissional;
        esus_atend_individual_w.nr_atendimento := atendimento.nr_atendimento;
        esus_atend_individual_w.cd_pessoa_fisica := atendimento.cd_paciente;
        esus_atend_individual_w.nr_seq_template := atendimento.nr_seq_reg;

        --  DADOS DO PACIENTE
            --  nr_prontuario
    
        esus_atend_individual_w.nr_prontuario := obter_dados_pf(esus_atend_individual_w.cd_pessoa_fisica, 'NP');

        --  OBTEM OS DADOS DO ATENDIMENTO
            --  dt_atendimento
            --  dt_final_atendimento
            
        select      atpac.dt_entrada,
                    atpac.dt_alta
        into STRICT        esus_atend_individual_w.dt_atendimento,
                    esus_atend_individual_w.dt_final_atendimento
        from        atendimento_paciente atpac
        where       nr_atendimento = atendimento.nr_atendimento;

        --  OBTEM OS DADOS DO PROFISSIONAL
            --  cd_cbo_prof
            --  cd_cnes_unidade
            --  nr_seq_sus_equipe
    
        SELECT * FROM esus_obter_dados_prof(
                                esus_atend_individual_w.cd_profissional, nr_seq_equipe_ine_w, esus_atend_individual_w.cd_cbo_prof, cd_municipio_equipe_w, esus_atend_individual_w.cd_cnes_unidade, esus_atend_individual_w.nr_seq_sus_equipe, ds_erro_w
                            ) INTO STRICT nr_seq_equipe_ine_w, esus_atend_individual_w.cd_cbo_prof, cd_municipio_equipe_w, esus_atend_individual_w.cd_cnes_unidade, esus_atend_individual_w.nr_seq_sus_equipe, ds_erro_w
;

      if (esus_atend_individual_w.cd_cbo_prof IS NOT NULL AND esus_atend_individual_w.cd_cbo_prof::text <> '') then
      for campo_regra in obtem_campo_com_regra loop

        nr_seq_regra_ind_w := obter_regra_campo_ficha(campo_regra.nm_atributo, nr_seq_template_w);

        select max(NR_SEQ_TEMPLATE)
        into STRICT nr_seq_template_regra_w
        from ESUS_AUTO_FICHA_IND_ATRIB
        where nr_sequencia = nr_seq_regra_ind_w;

        ds_exit_loop_w := 'N';
        for regra in obter_regra loop
          EXIT WHEN NOT FOUND or ds_exit_loop_w = 'S';  /* apply on obter_regra */

          if (regra.IE_TIPO = 'T') then
          --Regra Tipo Template
            if (coalesce(regra.NR_SEQ_ATRIBUTO::text, '') = '') then
              --Elemento normal
              SELECT
                substr(max(get_ehr_vlr(b.nr_sequencia, a.nr_seq_temp_conteudo, 'dd/mm/yyyy hh24:mi:ss', 'S', 'N')), 1, 4000) ds_texto
              INTO STRICT
                ds_result_w
              FROM
                ehr_reg_elemento        a,
                ehr_reg_template        b,
                ehr_registro            c,
                ehr_template_conteudo   d
              WHERE
                a.nr_seq_reg_template = b.nr_sequencia
                AND b.nr_seq_reg = c.nr_sequencia
                AND a.nr_seq_temp_conteudo = d.nr_sequencia
                AND (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
                AND coalesce(c.dt_inativacao::text, '') = ''
                AND c.nr_atendimento = atendimento.nr_atendimento
                AND d.nr_sequencia = regra.NR_SEQ_ELEMENTO
                AND d.nr_seq_elemento = a.nr_seq_elemento
                AND c.nr_seq_templ = regra.NR_SEQ_TEMPLATE
                AND (nr_seq_template_regra_w = regra.NR_SEQ_TEMPLATE
                  AND c.nr_sequencia = atendimento.nr_seq_ehr_registro
                  or coalesce(nr_seq_template_regra_w, -1) != regra.NR_SEQ_TEMPLATE);

            else
              --Elemento Linked data
              ds_sql_w := null;
              select max(nm_atributo), max(ie_tipo_atributo), max(nr_seq_linked)
              into STRICT nm_atrib_linked_data_w, ie_tipo_atrib_linked_data_w, nr_seq_linked_data_w
              from TABELA_ATRIBUTO_LINKED
              where nr_sequencia = regra.NR_SEQ_ATRIBUTO;

              SELECT
                max(b.nr_sequencia)
              INTO STRICT
                nr_seq_reg_template_w
              FROM
                ehr_reg_template        b,
                ehr_registro            c
              WHERE
                b.nr_seq_reg = c.nr_sequencia
                AND (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
                AND coalesce(c.dt_inativacao::text, '') = ''
                AND c.nr_atendimento = atendimento.nr_atendimento
                AND c.nr_seq_templ = regra.NR_SEQ_TEMPLATE
                AND (nr_seq_template_regra_w = regra.NR_SEQ_TEMPLATE
                  AND c.nr_sequencia = atendimento.nr_seq_ehr_registro
                  or coalesce(nr_seq_template_regra_w, -1) != regra.NR_SEQ_TEMPLATE);

              if (ie_tipo_atrib_linked_data_w = 'DATE') then
                ds_sql_w := 'select to_char(max(' || nm_atrib_linked_data_w||'), ''dd/mm/yyyy hh24:mi:ss'') ';
              elsif (ie_tipo_atrib_linked_data_w = 'NUMBER') then
                ds_sql_w := 'select to_char(max(' || nm_atrib_linked_data_w||')) ';
              elsif (ie_tipo_atrib_linked_data_w = 'VARCHAR2') then
                ds_sql_w := 'select max('|| nm_atrib_linked_data_w||') ';
              end if;

              if (ds_sql_w IS NOT NULL AND ds_sql_w::text <> '') then
                ds_sql_w:= ds_sql_w ||
                  ' from EHR_LINKED_'||regra.NR_SEQ_TEMPLATE||'_'|| nr_seq_linked_data_w ||
                  ' where NR_SEQ_REG_TEMPLATE = :NR_SEQ_REG_TEMPLATE';
                EXECUTE ds_sql_w
                  into STRICT ds_result_w
                  using nr_seq_reg_template_w;

              end if;
            end if;

            if (ds_result_w = regra.DS_VALOR_FORMULARIO) then
              ds_result_w := regra.DS_VALOR_FICHA;
            elsif (regra.DS_VALOR_FORMULARIO IS NOT NULL AND regra.DS_VALOR_FORMULARIO::text <> '') then
              ds_result_w := null;
            end if;

          elsif (regra.IE_TIPO = 'S') then
          --Regra Tipo SQL
            sql_cursor_w := DBMS_SQL.OPEN_CURSOR;
            DBMS_SQL.PARSE(sql_cursor_w, regra.DS_SQL, dbms_sql.Native);
            DBMS_SQL.DEFINE_COLUMN(sql_cursor_w,1,ds_result_w,4000);
            if (position(':NR_ATENDIMENTO' in upper(regra.DS_SQL)) > 0) then
              DBMS_SQL.BIND_VARIABLE(sql_cursor_w, ':NR_ATENDIMENTO', atendimento.nr_atendimento);
            end if;
            if (position(':DT_INICIO' in upper(regra.DS_SQL)) > 0) then
              DBMS_SQL.BIND_VARIABLE(sql_cursor_w, ':DT_INICIO', dt_inicio_p);
            end if;
            if (position(':DT_FINAL' in upper(regra.DS_SQL)) > 0) then
              DBMS_SQL.BIND_VARIABLE(sql_cursor_w, ':DT_FINAL', dt_fim_p);
            end if;

            retorno_w := DBMS_SQL.execute(sql_cursor_w);

            while( DBMS_SQL.FETCH_ROWS(sql_cursor_w) > 0 ) loop
            begin
              DBMS_SQL.COLUMN_VALUE(sql_cursor_w,1,ds_result_w);

            end;
            end loop;
			      DBMS_SQL.CLOSE_CURSOR(sql_cursor_w);
          end if;

          if (ds_result_w IS NOT NULL AND ds_result_w::text <> '') then
            ds_exit_loop_w := 'S';
            esus_atend_individual_w:= set_valor_campo(campo_regra.nm_atributo, ds_result_w, esus_atend_individual_w);
            ds_result_w := null;
          end if;

        end loop;

      end loop;

      esus_atend_individual_w.nr_sequencia := nr_sequencia_w;
      insert into esus_atend_individual values (esus_atend_individual_w.*);

      CALL esus_gerar_atend_ind_exame(	
        cd_profissional_p     => esus_atend_individual_w.cd_profissional,
        cd_cbo_p              => esus_atend_individual_w.cd_cbo_prof,
        cd_sec_profissional_p	=> esus_atend_individual_w.CD_PROF_PRI_ADIC,
        cd_sec_cbo_p          => esus_atend_individual_w.CD_CBO_PRI_ADIC,
        cd_ter_profissional_p => null,
        cd_ter_cbo_p          => null,
        nr_atendimento_p      => esus_atend_individual_w.nr_atendimento,
        dt_atendimento_p      => esus_atend_individual_w.dt_atendimento,
        nr_seq_ficha_p        => esus_atend_individual_w.nr_sequencia,
        nm_usuario_p          => esus_atend_individual_w.nm_usuario);

      for exames in obter_exames loop

        Select coalesce(max('S'),'N'), coalesce(max(c.ie_ciente),'N')
        into STRICT ie_solicitado_w, ie_ciente_w
        FROM prescr_procedimento b, prescr_medica a
LEFT OUTER JOIN (SELECT	'S' ie_ciente, lpc.nr_prescricao, lpc.nr_seq_prescricao
            from laudo_paciente_ciente lpc
            where 1=1
            and lpc.nr_sequencia = (
              SELECT max(x.nr_sequencia)
              from laudo_paciente_ciente x
              where x.nr_prescricao = lpc.nr_prescricao
              and coalesce(x.nr_seq_ext,0) = coalesce(lpc.nr_seq_ext,0)
              and coalesce(x.nr_seq_result_ext,0) = coalesce(lpc.nr_seq_result_ext,0)
              and x.nr_seq_prescricao = lpc.nr_seq_prescricao
            )
            and ie_tipo_acao = 'M'
          ) c ON (a.nr_prescricao = c.nr_prescricao)
WHERE b.nr_prescricao = a.nr_prescricao   and a.nr_Atendimento = exames.nr_atendimento and (a.DT_LIBERACAO_MEDICO IS NOT NULL AND a.DT_LIBERACAO_MEDICO::text <> '') and coalesce(a.dt_suspensao::text, '') = '' and b.cd_procedimento = exames.cd_procedimento and b.IE_ORIGEM_PROCED = exames.IE_ORIGEM_PROCED;

        update ESUS_ATEND_IND_EXAME
        set ie_solicitado = ie_solicitado_w,
          ie_avaliado = ie_ciente_w
        where nr_sequencia = exames.nr_sequencia;

        commit;
      end loop;
    end if;
  end loop obtem_atendimentos_esus;



end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE importar_sus_atend_individual (( dt_inicio_p ehr_registro.dt_liberacao%type, dt_fim_p ehr_registro.dt_liberacao%type ) is esus_atend_individual_w esus_atend_individual) FROM PUBLIC;

