-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_agenda_pep_pac ( cd_pessoa_fisica_p text, cd_agenda_dest_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_agenda_p timestamp, cd_medico_p text, nm_usuario_p text, nr_sequencia_p INOUT bigint) AS $body$
DECLARE


cd_medico_agenda_w		atendimento_paciente.cd_medico_resp%type;
nr_atendimento_w		atendimento_paciente.nr_atendimento%type;
dt_agenda_w			timestamp;
dt_nascimento_pac_w		pessoa_fisica.dt_nascimento%type;
cd_pessoa_fisica_w		atendimento_paciente.cd_pessoa_fisica%type;
nm_paciente_w			varchar(60);
qt_idade_pac_w			smallint;
nr_telefone_w			varchar(80);
nm_pessoa_contato_w		varchar(50);
cd_convenio_w			atend_categoria_convenio.cd_convenio%type;
cd_categoria_w			atend_categoria_convenio.cd_categoria%type;
cd_plano_w			atend_categoria_convenio.cd_plano_convenio%type;
cd_usuario_convenio_w		atend_categoria_convenio.cd_usuario_convenio%type;
dt_validade_carteira_w		atend_categoria_convenio.dt_validade_carteira%type;
nr_doc_convenio_w		atend_categoria_convenio.nr_doc_convenio%type;
cd_setor_atendimento_w		atend_paciente_unidade.cd_setor_atendimento%type;
cd_tipo_acomodacao_w		atend_paciente_unidade.cd_tipo_acomodacao%type;
ie_nao_consiste_hr_agenda_w	varchar(100):= null;
dt_agenda_w_auxiliar 		varchar(255):= null;
qt_agendamento_conflito_hr	bigint:= 0;
dt_dia_semana_w			smallint;
ie_feriado_w			varchar(1);
nr_seq_esp_w			bigint;
ie_hor_adic_w			varchar(1);
ie_final_semana_w		varchar(1);
ie_valido_w			varchar(1);
qt_horario_w			bigint;
qt_horario_livre_w		bigint;
nr_sequencia_w			bigint;
nr_minuto_agenda_w		bigint;
ie_status_agenda_w		varchar(3);
ie_manter_atendimento_w	varchar(1);


BEGIN	
if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (cd_agenda_dest_p IS NOT NULL AND cd_agenda_dest_p::text <> '') and (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	/*Obter ultimo atendimento*/

	select	max(nr_atendimento)
	into STRICT	nr_atendimento_w
	from	atendimento_paciente
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	and	coalesce(dt_alta::text, '') = '';
	
	
	/*Obter dados do paciente*/

	select	max(coalesce(cd_medico_p,a.cd_medico_resp)),
		max(dt_agenda_p),
		--nr_minuto_duracao,
		max(a.cd_pessoa_fisica),
		max(substr(obter_nome_pf(a.cd_pessoa_fisica),1,60)),
		max(b.dt_nascimento),
		max(substr(obter_idade(b.dt_nascimento,clock_timestamp(),'A'),1,10)),
		max(substr(obter_compl_pf(a.cd_pessoa_fisica,1,'T'),1,50)),
		max(substr(obter_nome_pf(a.cd_pessoa_responsavel),1,60)),
		max(c.cd_convenio),
		max(c.cd_categoria),
		max(c.cd_plano_convenio),
		max(c.cd_usuario_convenio),
		max(c.dt_validade_carteira),
		max(c.nr_doc_convenio),
		max(d.cd_tipo_acomodacao),
		max(d.cd_setor_atendimento)
	into STRICT	cd_medico_agenda_w,
		dt_agenda_w,
		--nr_minuto_duracao_w,
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_nascimento_pac_w,
		qt_idade_pac_w,
		nr_telefone_w,
		nm_pessoa_contato_w,
		cd_convenio_w,
		cd_categoria_w,
		cd_plano_w,
		cd_usuario_convenio_w,
		dt_validade_carteira_w,
		nr_doc_convenio_w,
		cd_tipo_acomodacao_w,
		cd_setor_atendimento_w
	from	atendimento_paciente a,
		pessoa_fisica b,
		atend_categoria_convenio c,
		atend_paciente_unidade d
	where	a.nr_atendimento = nr_atendimento_w
	and	a.cd_pessoa_fisica = b.cd_pessoa_fisica
	and	a.nr_atendimento = c.nr_atendimento
	and	a.nr_atendimento = d.nr_atendimento
	and	d.nr_seq_interno = ( SELECT Obter_Atepacu_paciente(a.nr_atendimento, 'A') )
	and	c.dt_inicio_vigencia = ( select max(h.dt_inicio_vigencia)
					 from	atend_categoria_convenio h
					 where	h.nr_atendimento = c.nr_atendimento);
					
	select	coalesce(max(obter_valor_param_usuario(821, 135, obter_perfil_ativo, nm_usuario_p, obter_estab_agenda(cd_agenda_dest_p))), 'S'),
			coalesce(max(obter_valor_param_usuario(821, 272, obter_perfil_ativo, nm_usuario_p, obter_estab_agenda(cd_agenda_dest_p))), 'S')
	into STRICT	ie_nao_consiste_hr_agenda_w,
			ie_manter_atendimento_w
	;
	
	if ie_nao_consiste_hr_agenda_w = 'N' then	
	begin
		select 	max(obter_max_horario_agepac(cd_agenda_dest_p,dt_agenda_w,'C')) --contar qtde horario conflito no horario
		into STRICT	qt_agendamento_conflito_hr
		;
		
		if qt_agendamento_conflito_hr > 0 then
			select 	max(obter_max_horario_agepac(cd_agenda_dest_p,dt_agenda_w,'DH'))
			into STRICT	dt_agenda_w_auxiliar
			;
		
		dt_agenda_w := to_date(dt_agenda_w_auxiliar,'dd/mm/yyyy hh24:mi:ss');
		end if;
	end;
	end if;

	/* obter dia semana */

	select	max(obter_cod_dia_semana(dt_agenda_w))
	into STRICT	dt_dia_semana_w
	;

	/* obter se feriado */

	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_feriado_w
	from 	feriado a,
		agenda b
	where 	a.cd_estabelecimento = obter_estab_agenda(cd_agenda_dest_p)
	and	a.dt_feriado = trunc(dt_agenda_w)
	and 	b.cd_agenda = cd_agenda_dest_p;		
	
	/* obter se horario especial */

	select	coalesce(max(nr_sequencia),0),
		coalesce(max(ie_horario_adicional),'N')
	into STRICT	nr_seq_esp_w,
		ie_hor_adic_w
	from	agenda_horario_esp
	where	cd_agenda = cd_agenda_dest_p
	and	((ie_dia_semana = dt_dia_semana_w) or ((ie_dia_semana = 9) and (dt_dia_Semana_w not in (1,7))) or (coalesce(ie_dia_semana::text, '') = ''))
	and dt_agenda_w between pkg_date_utils.start_of(dt_agenda,'DAY') and pkg_date_utils.end_of(coalesce(dt_agenda_fim,dt_agenda),'DAY');

	/* obter se final semana */

	IF (dt_dia_semana_w in (7,1)) then
		ie_final_semana_w := 'S';
	else
		ie_final_semana_w := 'N';
	END IF;	
	
	/* validar horario x cadastro */

	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_valido_w
	from	agenda_horario
	where	cd_agenda = cd_agenda_dest_p
	and	((dt_dia_semana = dt_dia_semana_w) or (dt_dia_semana = 9))
	and	((nr_seq_esp_w = 0) or (ie_hor_adic_w = 'S'))
	and	((coalesce(dt_final_vigencia::text, '') = '') or (dt_final_vigencia >= trunc(dt_agenda_w)))
	and	((coalesce(dt_inicio_vigencia::text, '') = '') or (dt_inicio_vigencia <= trunc(dt_agenda_w)))
	and 	hr_inicial < hr_final
	and	coalesce(nr_minuto_intervalo,0) > 0
	and	ie_feriado_w <> 'S';
	
	/* validar horario gerado */

	select	count(*)
	into STRICT	qt_horario_w
	from	agenda_paciente
	where	cd_agenda = cd_agenda_dest_p
	and	hr_inicio = dt_agenda_w;

	/* validar horario livre */

	select	count(*)
	into STRICT	qt_horario_livre_w
	from	agenda_paciente
	where	cd_agenda = cd_agenda_dest_p
	and	hr_inicio = dt_agenda_w
	and	ie_status_agenda = 'L'
	and	obter_se_feriado(obter_estab_agenda(cd_agenda_dest_p), dt_agenda_w) = 0;	
	
	IF	(ie_valido_w = 'S' AND qt_horario_w = 0) or
		(ie_valido_w = 'S' AND qt_horario_livre_w > 0) then
		
		IF ('S' = 'S') or (ie_final_semana_w = 'N') then

			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_sequencia_w
			from	agenda_paciente
			where	cd_agenda = cd_agenda_dest_p
			and	hr_inicio = dt_agenda_w
			and	ie_status_agenda = 'L'
			and	obter_se_feriado(obter_estab_agenda(cd_agenda_dest_p), dt_agenda_w) = 0;

			IF (nr_sequencia_w > 0) then

				select	max(nr_minuto_duracao)
				into STRICT	nr_minuto_agenda_w
				from	agenda_paciente
				where 	nr_sequencia = nr_sequencia_w;

			END IF;
			
			if (coalesce(nr_minuto_agenda_w::text, '') = '') then
				nr_minuto_agenda_w	:= 60;
			end if;
			
			/* obter sequencia */

			select	nextval('agenda_paciente_seq')
			into STRICT	nr_sequencia_w
			;
			
			delete 	
			from	agenda_paciente
			where	cd_agenda = cd_agenda_dest_p
			and	dt_agenda = trunc(dt_agenda_w,'dd')
			and	hr_inicio = dt_agenda_w
			and	ie_status_agenda = 'L';
			
			ie_status_agenda_w	:= coalesce(obter_valor_param_usuario(821, 269, obter_perfil_ativo, nm_usuario_p, obter_estab_agenda(cd_agenda_dest_p)), 'N');

			/* gerar agenda */

			insert into agenda_paciente(
							cd_agenda,
							cd_pessoa_fisica,
							dt_agenda,
							hr_inicio,
							nr_minuto_duracao,
							nm_usuario,
							dt_atualizacao,
							cd_medico,
							nm_pessoa_contato,
							cd_procedimento,
							ds_observacao,
							cd_convenio,
							nr_cirurgia,
							ds_cirurgia,
							qt_idade_paciente,
							cd_tipo_anestesia,
							ie_origem_proced,
							ie_status_agenda,
							nm_instrumentador,
							nm_circulante,
							ie_ortese_protese,
							ie_cdi,
							ie_uti,
							ie_banco_sangue,
							ie_serv_especial,
							cd_motivo_cancelamento,
							nr_sequencia,
							ds_senha,
							cd_turno,
							cd_anestesista,
							cd_pediatra,
							nm_paciente,
							ie_anestesia,
							nr_atendimento,
							ie_carater_cirurgia,
							cd_usuario_convenio,
							nm_usuario_orig,
							qt_idade_mes,
							cd_plano,
							ie_leito,
							nr_telefone,
							dt_agendamento,
							ie_equipamento,
							ie_autorizacao,
							vl_previsto,
							nr_seq_age_cons,
							cd_medico_exec,
							ie_video,
							nr_seq_classif_agenda,
							ie_uc,
							cd_procedencia,
							cd_categoria,
							cd_tipo_acomodacao,
							nr_doc_convenio,
							dt_validade_carteira,
							dt_confirmacao,
							nr_seq_proc_interno,
							nr_seq_status_pac,
							nm_usuario_confirm,
							ie_lado,
							ie_biopsia,
							ie_congelacao,
							ds_laboratorio,
							qt_min_padrao,
							cd_doenca_cid,
							dt_nascimento_pac,
							nr_seq_sala,
							nm_medico_externo,
							ie_tipo_atendimento,
							ie_consulta_anestesica,
							ie_pre_internacao,
							ie_reserva_leito,
							ie_tipo_anestesia,
							dt_chegada,
							cd_medico_req,
							nr_seq_pq_proc,
							qt_diaria_prev,
							dt_chegada_fim,
							ie_arco_c,
							nr_seq_indicacao,
							cd_pessoa_indicacao
							)
						values (
							cd_agenda_dest_p,
							cd_pessoa_fisica_w,
							trunc(dt_agenda_w,'dd'),
							dt_agenda_w,--abreiter OS191559
							nr_minuto_agenda_w,
							nm_usuario_p,
							clock_timestamp(),
							cd_medico_agenda_w,
							nm_pessoa_contato_w,
							cd_procedimento_p,
							null,
							cd_convenio_w,
							null,
							null,
							qt_idade_pac_w,
							null,
							ie_origem_proced_p,
							ie_status_agenda_w,
							null,
							null,
							'N',
							'N',
							'N',
							'N',
							'N',
							null,
							nr_sequencia_w,
							null,
							obter_turno_horario_agenda(cd_agenda_dest_p,dt_agenda_w),
							null,
							null,
							nm_paciente_w,
							'N',
							CASE WHEN ie_manter_atendimento_w='S' THEN nr_atendimento_w  ELSE null END ,
							null,
							cd_usuario_convenio_w,
							--nm_usuario_orig_w,
							nm_usuario_p,
							null,
							cd_plano_w,
							null,
							nr_telefone_w,
							clock_timestamp(),
							'N',
							null,
							null,
							null,
							null,
							'N',
							null,
							'N',
							null,
							cd_categoria_w,
							cd_tipo_acomodacao_w,
							nr_doc_convenio_w,
							dt_validade_carteira_w,
							null,
							null,
							null,
							--nm_usuario_confirm_w,
							nm_usuario_p,
							null,
							'N',
							'N',
							null,
							null,
							null,
							dt_nascimento_pac_w,
							--nr_seq_sala_w,
							null,
							null,
							null,
							'N',
							'N',
							'N',
							null,
							--dt_chegada_w,
							null,
							null,
							null,
							null,
							null,
							'N',
							null,
							null
							);

			nr_sequencia_p := nr_sequencia_w;

		END IF;
	else
		-- Nao foi possivel gerar a agenda, horario indisponivel e/ou ja ocupado!
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(264435);

	END IF;

else
	-- Por favor informe todos os dados para a geracao do agendamento!
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(264436);
	
end if;	


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_agenda_pep_pac ( cd_pessoa_fisica_p text, cd_agenda_dest_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_agenda_p timestamp, cd_medico_p text, nm_usuario_p text, nr_sequencia_p INOUT bigint) FROM PUBLIC;

