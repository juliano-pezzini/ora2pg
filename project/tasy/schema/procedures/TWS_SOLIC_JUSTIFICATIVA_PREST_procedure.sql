-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tws_solic_justificativa_prest (nr_seq_auditoria_p pls_auditoria.nr_sequencia%type, ds_lista_sequencias_itens_p text, ds_historico_justific_p pls_guia_plano_historico.ds_observacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Solicitar justificativa do prestador.
Esta rotina foi criada para unificar o processo de justificativa, conforme relaizado no Tasy.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ x] Outros: TWS
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 

ie_gerar_grupo_regra_w		varchar(2)	:= 'N';
ds_lista_sequencias_w		varchar(2000);
nr_pos_virgula_w		bigint;
nr_seq_aud_item_w		pls_auditoria_item.nr_sequencia%type;
ie_solicita_just_prest_w	pls_param_analise_aut.ie_solicita_just_prest%type := 'N';
nr_seq_grupo_auditor_w		pls_auditoria_grupo.nr_sequencia%type;


BEGIN

if (ds_lista_sequencias_itens_p IS NOT NULL AND ds_lista_sequencias_itens_p::text <> '') and (nr_seq_auditoria_p IS NOT NULL AND nr_seq_auditoria_p::text <> '') then	
	ie_gerar_grupo_regra_w := pls_encaminha_grupo_acao_regra(	nr_seq_auditoria_p, 1, nm_usuario_p, ie_gerar_grupo_regra_w);

	if (ie_gerar_grupo_regra_w = 'N') then	
		ds_lista_sequencias_w	:= ds_lista_sequencias_itens_p;
		
		while(ds_lista_sequencias_w IS NOT NULL AND ds_lista_sequencias_w::text <> '') loop
		begin
			nr_pos_virgula_w	:= position(',' in ds_lista_sequencias_w);
			
			if (nr_pos_virgula_w > 0) then
				nr_seq_aud_item_w	:= (substr(ds_lista_sequencias_w,0,nr_pos_virgula_w-1))::numeric;
				ds_lista_sequencias_w	:= substr(ds_lista_sequencias_w,nr_pos_virgula_w+1,length(ds_lista_sequencias_w));
			else
				nr_seq_aud_item_w	:= (ds_lista_sequencias_w)::numeric;
				ds_lista_sequencias_w	:= null;
			end if;
			
			if (nr_seq_aud_item_w > 0) then			
				CALL pls_atualizar_status_justifica(	nr_seq_aud_item_w, 'I', null, nm_usuario_p);				
				
			end if;
		end;
		end loop;
		
		CALL pls_atualizar_status_justifica(	nr_seq_auditoria_p, 'A', substr(ds_historico_justific_p,1,4000), nm_usuario_p);
		
	else	
		CALL pls_gravar_justific_auditor(	nr_seq_auditoria_p, substr(ds_historico_justific_p,1,4000), nm_usuario_p);
	end if;
	
	begin
		select	ie_solicita_just_prest
		into STRICT	ie_solicita_just_prest_w
		from	pls_param_analise_aut
		where	cd_estabelecimento = (	SELECT	cd_estabelecimento
						from	pls_auditoria
						where	nr_sequencia	= nr_seq_auditoria_p);
	exception
	when others then
		ie_solicita_just_prest_w := 'N';
	end;
	
	if (ie_solicita_just_prest_w = 'S') then
		nr_seq_grupo_auditor_w	:= pls_obter_grupo_analise_atual(nr_seq_auditoria_p);
		CALL pls_desfazer_assumir_grupo_aud(	nr_seq_grupo_auditor_w, nr_seq_auditoria_p, 'J', nm_usuario_p);
	end if;	
end if;	
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tws_solic_justificativa_prest (nr_seq_auditoria_p pls_auditoria.nr_sequencia%type, ds_lista_sequencias_itens_p text, ds_historico_justific_p pls_guia_plano_historico.ds_observacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

