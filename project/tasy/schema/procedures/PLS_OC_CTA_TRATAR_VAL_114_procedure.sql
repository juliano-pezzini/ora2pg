-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_114 (( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) is /* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Aplicar a validação para gerar a ocorrência em contas que tenham divergência entre a autorização e a conta médica
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:


------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 qt_proc_imp_atend_w pls_conta_proc.qt_procedimento_imp%type) RETURNS bigint AS $body$
DECLARE


qt_proc_imp_atend_w	pls_conta_proc.qt_procedimento_imp%type;
BEGIN

select	sum(coalesce(a.qt_procedimento,0))
into STRICT	qt_proc_imp_atend_w
from	pls_conta_autor_v	a
where	a.cd_procedimento	= cd_procedimento_p
and	a.ie_origem_proced	= ie_origem_proced_p
and	a.cd_guia_ok		= cd_guia_ok_p
and	a.nr_seq_segurado	= nr_seq_segurado_p;

return	qt_proc_imp_atend_w;

end;

begin

-- Só aplicar a validação se existir informação da regra.
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	-- Informações da regra de validação da carteira.
	for	r_c_regra_w in c_regra(dados_regra_p.nr_sequencia) loop
		-- Verificar se a regra irá validar os itens não autorizados ou a quantidade.
		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);
		if (r_c_regra_w.ie_valida_aut_item = 'S') then

			-- Inicializar as listas para cada regra.
			pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);

			-- Iniciar o índice para preenchimento da tabela.
			i := 0;
			for r_c_conta_w in c_conta(nr_id_transacao_p) loop
				begin
				dados_tb_sel_w.ie_valido(i)	:= 'N';
				dados_tb_sel_w.ds_observacao(i)	:= null;

				dados_tb_sel_w.nr_seq_selecao(i)	:= r_c_conta_w.nr_seq_selecao;
				dados_tb_sel_w.qt_excedido(i)		:= 0; -- A quantidade excedida inicia 0
				for r_c_itens_w in c_itens(r_c_conta_w.nr_seq_conta) loop
					begin
					-- Preparar o retorno da execução do select.
					if (r_c_regra_w.ie_tipo_guia_conta	= 	'S') and (r_c_regra_w.ie_tipo_guia_autor = 	'S')then
						nr_seq_guia_w	:= r_c_itens_w.nr_seq_guia;

						ds_guia_w := 'Guia ';
					elsif (r_c_regra_w.ie_tipo_guia_conta	=	'G') then
						if (r_c_regra_w.ie_tipo_guia_autor	= 'G') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia		= r_c_itens_w.cd_guia
							and	nr_seq_segurado	= r_c_itens_w.nr_seq_segurado;
						elsif (r_c_regra_w.ie_tipo_guia_autor = 'P') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia_prestador	= r_c_itens_w.cd_guia
							and	nr_seq_segurado		= r_c_itens_w.nr_seq_segurado;
						elsif (r_c_regra_w.ie_tipo_guia_autor = 'P') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia_manual		= r_c_itens_w.cd_guia
							and	nr_seq_segurado		= r_c_itens_w.nr_seq_segurado;
						end if;
						ds_guia_w := 'Guia ';
					elsif (r_c_regra_w.ie_tipo_guia_conta	=	'R') then
						if (r_c_regra_w.ie_tipo_guia_autor	= 'G') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia		= r_c_itens_w.cd_guia_ref
							and	nr_seq_segurado	= r_c_itens_w.nr_seq_segurado;
						elsif (r_c_regra_w.ie_tipo_guia_autor = 'P') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia_prestador	= r_c_itens_w.cd_guia_ref
							and	nr_seq_segurado		= r_c_itens_w.nr_seq_segurado;
						elsif (r_c_regra_w.ie_tipo_guia_autor = 'P') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia_manual		= r_c_itens_w.cd_guia_ref
							and	nr_seq_segurado		= r_c_itens_w.nr_seq_segurado;
						end if;
						ds_guia_w := 'Guia referência';
					elsif (r_c_regra_w.ie_tipo_guia_conta	=	'P') then
						if (r_c_regra_w.ie_tipo_guia_autor	= 'G') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia		= r_c_itens_w.cd_guia_prestador
							and	nr_seq_segurado	= r_c_itens_w.nr_seq_segurado;
						elsif (r_c_regra_w.ie_tipo_guia_autor = 'P') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia_prestador	= r_c_itens_w.cd_guia_prestador
							and	nr_seq_segurado		= r_c_itens_w.nr_seq_segurado;
						elsif (r_c_regra_w.ie_tipo_guia_autor = 'P') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_guia_w
							from	pls_guia_plano
							where	cd_guia_manual		= r_c_itens_w.cd_guia_prestador
							and	nr_seq_segurado		= r_c_itens_w.nr_seq_segurado;
						end if;
						ds_guia_w := 'Guia prestador';
					end if;
					-- Verificar se a conta em questão teve uma guia váilida, se não tiver a ocorrência será gerada
					if (coalesce(nr_seq_guia_w::text, '') = '') and (r_c_regra_w.ie_valida_aut_item = 'S') then
						dados_tb_sel_w.ds_observacao(i) := substr(dados_tb_sel_w.ds_observacao(i)||'Não foi encontrada uma autorização para esta '||ds_guia_w||' . ',1,2000);
						if (r_c_regra_w.ie_valida_beneficiario	= 'S') then
							select 	max(nr_seq_segurado)
							into STRICT	nr_seq_segurado_guia_w
							from	pls_guia_plano
							where	cd_guia = r_c_itens_w.cd_guia;

							if (coalesce(nr_seq_segurado_guia_w::text, '') = '') then
								select 	max(nr_seq_segurado)
								into STRICT	nr_seq_segurado_guia_w
								from	pls_guia_plano
								where	cd_guia = r_c_itens_w.cd_guia_ref;
							end if;

							if (r_c_itens_w.nr_seq_segurado	!= nr_seq_segurado_guia_w) then
								dados_tb_sel_w.ds_observacao(i) := substr(dados_tb_sel_w.ds_observacao(i)||'Beneficiário da autorização '||nr_seq_segurado_guia_w||' diferente do beneficiário da conta médica '||r_c_itens_w.nr_seq_segurado||' .',1,2000);
							end if;
						end if;
						dados_tb_sel_w.ie_valido(i) := 'S';

					-- Se a guia não estiver autorizada também gera ocorrência.
					elsif (r_c_itens_w.ie_status_guia <> '1') and (r_c_regra_w.ie_valida_aut_item = 'S') then

						dados_tb_sel_w.ie_valido(i) := 'S';
						dados_tb_sel_w.ds_observacao(i) :=substr(dados_tb_sel_w.ds_observacao(i)||
								'A solicitação de autorização para este atendimento ' ||
								'não foi autorizada pela operadora.' || pls_util_pck.enter_w ||
								'Status da solicitação: ' ||
								obter_valor_dominio(1747, r_c_itens_w.ie_status_guia),1,2000);
					-- Verificar o tipo de item que deve ser buscado da PLS_CONTA_AUTOR_PCK.
					-- Procedimentos
					elsif (r_c_itens_w.ie_tipo_item = 'P') and (r_c_regra_w.ie_valida_aut_item = 'S')  then

						select	count(1)
						into STRICT	qt_estrutura_w
						from	pls_estrutura_ocor_tm est
						where	est.nr_seq_estrutura 	= r_c_regra_w.nr_seq_estrutura
						and	est.ie_origem_proced  	= r_c_itens_w.ie_origem_proced
						and	est.cd_procedimento  	= r_c_itens_w.cd_procedimento;

						if (coalesce(r_c_regra_w.nr_seq_estrutura::text, '') = '' ) or
							(r_c_regra_w.nr_seq_estrutura IS NOT NULL AND r_c_regra_w.nr_seq_estrutura::text <> '' AND qt_estrutura_w > 0)then
							-- Quando for procedimentos deve ser verificado o tipo de despesa, pois devido a estrutura criada para as diárias
							-- a quantidade autorizada pode estar informada na PLS_GUIA_PLANO ou na PLS_GUIA_PLANO_PROC.  A
							-- PLS_CONTA_AUTOR_PCK já trata esta situação e portanto precisamos apenas identificar para ela que são diárias que estamos buscando.
							-- Diáriais
							if (r_c_itens_w.ie_tipo_despesa = '3') then

								-- Buscar o saldo para diárias existente nesta guia.
								for dados_conta_autor_w in c_conta_autor_dia(nr_seq_guia_w, r_c_itens_w.ie_origem_proced, r_c_itens_w.cd_procedimento, cd_estabelecimento_p) loop

									-- A partir do momento em que o item está na atuorização
									-- consideramos que a ocorrência não deva ser gerada.
									-- A ocorrência portanto só será gerada caso seja para validar também a quantidade
									-- e o item em questão já ultrapassou a quantidade autorizada.
									if (dados_conta_autor_w.qt_registro = 1) then

										-- Se o saldo já tive sido esgotado então será gerada a ocorrência, caso contrário não, então
										-- é setado como inválido para a tabela de seleção.
										if (dados_conta_autor_w.qt_saldo < 0) then

											dados_tb_sel_w.ie_valido(i) 	:= 'S';

											-- Montar a observação que deve ser montada para este item. A observação só é montada para os itens que irá ser gerada a
											-- ocorrência, para evitar comandos SQL desnecessários.
											dados_tb_sel_w.ds_observacao(i) :=dados_tb_sel_w.ds_observacao(i)||
												substr('A quantidade de diárias utilizadas ultrapassa a quantidade de diárias autorizadas para esta guia. ' || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
												'Quantidade autorizada: ' || dados_conta_autor_w.qt_autorizada || ' | Quantidade utilizada: ' || dados_conta_autor_w.qt_utilizada || ' | Saldo: ' || dados_conta_autor_w.qt_saldo || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
												'Contas deste atendimento que utilizaram diárias: ' || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
												r_c_itens_w.ds_itens_util_dia, 1, 2000);

										end if;

									else

										dados_tb_sel_w.ie_valido(i)	:= 'S';
										dados_tb_sel_w.ds_observacao(i) :=
											substr(dados_tb_sel_w.ds_observacao(i)||'Existe uma autorização válida para esta guia, porém a cobrança ' ||
												'da diária '||r_c_itens_w.nr_seq_item||' não foi autorizada.',1,2000);
									end if;
								end loop; -- dados_conta_autor_w
							-- Quando for qualquer outro tipo de despesa então temos que buscar como sendo um procedimento.
							else
								-- Buscar o saldo para este proceidmento para esta guia.
								for dados_conta_autor_w in c_conta_autor_proc(	nr_seq_guia_w,
														r_c_itens_w.ie_origem_proced,
														r_c_itens_w.cd_procedimento,
														cd_estabelecimento_p) loop
									-- A partir do momento em que o item está na atuorização
									-- consideramos que a ocorrência não deva ser gerada.
									-- A ocorrência portanto só será gerada caso seja para validar também a quantidade
									-- e o item em questão já ultrapassou a quantidade autorizada.
									if (dados_conta_autor_w.qt_registro = 1) then

										-- Se o saldo já tive sido esgotado então será gerada a ocorrência, caso contrário não, então
										-- é setado como inválido para a tabela de seleção.
										if (dados_conta_autor_w.qt_saldo < 0) then

											dados_tb_sel_w.ie_valido(i) 	:= 'S';

											-- Montar a observação que deve ser montada para este item. A observação só é montada para os itens que irá ser gerada a
											-- ocorrência, para evitar comandos SQL desnecessários.
											dados_tb_sel_w.ds_observacao(i) :=
												substr(dados_tb_sel_w.ds_observacao(i)||'A quantidade utilizada do procedimento '||r_c_itens_w.cd_procedimento||' ultrapassa a quantidade autorizada para esta guia. ' || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
												'Quantidade autorizada: ' || dados_conta_autor_w.qt_autorizada || ' | Quantidade utilizada: ' || dados_conta_autor_w.qt_utilizada || ' | Saldo: ' || dados_conta_autor_w.qt_saldo || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
												'Contas deste atendimento que utilizaram este mesmo procedimento: ' || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
												r_c_itens_w.ds_itens_util_proc, 1, 2000);

										end if;

									else

										dados_tb_sel_w.ie_valido(i)	:= 'S';
										-- Montar a observação que deve ser montada para este item.
										dados_tb_sel_w.ds_observacao(i) :=
											substr(dados_tb_sel_w.ds_observacao(i)||'Existe uma autorização válida para esta guia, porém a cobrança ' ||
											'do '||r_c_itens_w.cd_procedimento||' procedimento não foi autorizada.',1, 2000);
									end if;
								end loop; -- dados_conta_autor_w
							end if;
						end if;
					-- Materiais
					elsif (r_c_itens_w.ie_tipo_item = 'M') and (r_c_regra_w.ie_valida_aut_item = 'S')  then
						--caso valide a estrutura deve ser verificado primeiro se o item esta na estrutura se não não realiza nenhuma consistência
						select	count(1)
						into STRICT	qt_estrutura_w
						from	pls_estrutura_ocor_tm est
						where	est.nr_seq_estrutura = r_c_regra_w.nr_seq_estrutura
						and	est.nr_seq_material  = r_c_itens_w.nr_seq_material;

						if (coalesce(r_c_regra_w.nr_seq_estrutura::text, '') = '' ) or
							(r_c_regra_w.nr_seq_estrutura IS NOT NULL AND r_c_regra_w.nr_seq_estrutura::text <> '' AND qt_estrutura_w > 0)then
							-- Buscar o saldo para este proceidmento para esta guia.
							for dados_conta_autor_w in c_conta_autor_mat(	nr_seq_guia_w,
													r_c_itens_w.nr_seq_material,
													cd_estabelecimento_p) loop

								-- A partir do momento em que o item está na atuorização
								-- consideramos que a ocorrência não deva ser gerada.
								-- A ocorrência portanto só será gerada caso seja para validar também a quantidade
								-- e o item em questão já ultrapassou a quantidade autorizada.
								if (dados_conta_autor_w.qt_registro = 1) then

									-- Se o saldo já tive sido esgotado então será gerada a ocorrência, caso contrário não, então
									-- é setado como inválido para a tabela de seleção.
									if (dados_conta_autor_w.qt_saldo < 0) then

										dados_tb_sel_w.ie_valido(i) 	:= 'S';

										-- Montar a observação que deve ser montada para este item. A observação só é montada para os itens que irá ser gerada a
										-- ocorrência, para evitar comandos SQL desnecessários.
										dados_tb_sel_w.ds_observacao(i) :=
											substr(dados_tb_sel_w.ds_observacao(i)||'A quantidade utilizada do material '||r_c_itens_w.cd_material||' ultrapassa a quantidade autorizada para esta guia. ' || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
											'Quantidade autorizada: ' || dados_conta_autor_w.qt_autorizada || ' | Quantidade utilizada: ' || dados_conta_autor_w.qt_utilizada || ' | Saldo: ' || dados_conta_autor_w.qt_saldo || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
											'Contas deste atendimento que utilizaram este mesmo material: ' || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
											r_c_itens_w.ds_itens_util_mat, 1, 2000);

									end if;
								else
									dados_tb_sel_w.ie_valido(i)	:= 'S';
									-- Montar a observação que deve ser montada para este item.
									dados_tb_sel_w.ds_observacao(i) :=
										substr(dados_tb_sel_w.ds_observacao(i)||'Existe uma autorização válida para esta guia, porém a cobrança ' ||
										'do '||r_c_itens_w.nr_seq_material||' material não foi autorizada.',1, 2000);
								end if;
							end loop; -- dados_conta_autor_w
						end if;
					end if;

					if (r_c_regra_w.ie_valida_prestador = 'S') and (dados_tb_sel_w.ie_valido(i) = 'N') then

						select	max(nr_seq_prestador)
						into STRICT	nr_seq_prestador_guia_w
						from	pls_guia_plano
						where 	nr_sequencia = nr_seq_guia_w;

						if (nr_seq_prestador_guia_w	!= r_c_itens_w.nr_seq_prestador_exec) then
							dados_tb_sel_w.ie_valido(i)	:= 'S';
							dados_tb_sel_w.ds_observacao(i) :=
								substr(dados_tb_sel_w.ds_observacao(i)||'Prestador executor da conta médica '||r_c_itens_w.nr_seq_prestador_exec||' diferente do prestador solicitante da'||ds_guia_w||', prestador '||nr_seq_prestador_guia_w||' .',1,2000);
						end if;

					end if;
					end;
				end loop;

				-- Quando a quantidade de itens da lista tiver chegado ao máximo definido na PLS_CTA_CONSISTIR_PCK, então os registros são levados para
				-- o BD e gravados todos de uma vez, pela procedure GERENCIAL_SELECAO_VALIDACAO, que atualiza os registros conforme passado por
				-- parâmetro, o indice e as listas são reiniciados para carregar os novos registros e para que os registros atuais não sejam atualizados novamente em
				-- na próxima carga.
				if (i = pls_cta_consistir_pck.qt_registro_transacao_w) then

					-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
					-- conforme passado por parâmetro,
					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
						dados_tb_sel_w.nr_seq_selecao, pls_tipos_ocor_pck.clob_table_vazia,
						'SEQ', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p,
						null, dados_tb_sel_w.qt_excedido);

					-- Zerar o índice
					i := 0;

					-- Zerar as listas.
					pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);
				-- Enquanto os registros não tiverem atingido a carga para gravar na seleção incrementa o índice para armazenar os próximos registros.
				else
					i := i + 1;
				end if;

				end;
			end loop;

			if (dados_tb_sel_w.nr_seq_selecao.count > 0) then
				-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
				-- conforme passado por parâmetro,
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
					dados_tb_sel_w.nr_seq_selecao, pls_tipos_ocor_pck.clob_table_vazia,
					'SEQ', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p,
					null, dados_tb_sel_w.qt_excedido);
			end if;

		end if;

		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);

	end loop; -- c_regra
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_114 (( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) is  qt_proc_imp_atend_w pls_conta_proc.qt_procedimento_imp%type) FROM PUBLIC;

