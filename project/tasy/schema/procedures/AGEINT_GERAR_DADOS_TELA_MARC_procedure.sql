-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_gerar_dados_tela_marc ( nr_seq_ageint_p bigint, ie_consulta_especialidade_p text, ie_cons_rodizio_proc_int_p text, qt_dias_rodizio_p bigint, dt_prevista_item_p timestamp, dt_agenda_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
										 
ie_customiza_cor_panel_w	varchar(1);
ds_erro_w					varchar(255);
ds_cor_fundo_w				varchar(15);
ds_cor_fonte_w				varchar(15);
ds_cor_selecao_w			varchar(15);

 
--Itens do agendamento 
C01 CURSOR FOR 
	SELECT	DISTINCT 
			a.nr_Seq_ageint_item, 
			SUBSTR(Obter_Item_Grid_Ageint(b.nr_seq_proc_interno, b.cd_medico, b.cd_Especialidade, cd_estabelecimento_p, b.nr_seq_item_selec)||' '||c.ds_grupo_proc,1,255) ds_item, 
			Ageint_Obter_Prior_Apresent(b.nr_seq_agenda_int, b.nr_seq_proc_interno, cd_estabelecimento_p) nr_seq_ordem_apresent, 
			Ageint_Obter_Prioridade(b.nr_seq_agenda_int, b.nr_seq_proc_interno, cd_estabelecimento_p) nr_seq_ordem,		 
			b.nr_sequencia, 
			b.ie_classif_agenda, 
			b.nr_minuto_duracao, 
			b.nr_seq_proc_interno, 
			b.cd_procedimento, 
			b.ie_origem_proced, 
			b.ie_tipo_agendamento, 
			coalesce(a.ie_apres_marc,'S') ie_apres_marc 
FROM ageint_lib_usuario a, agenda_integrada_item b
LEFT OUTER JOIN ageint_grupo_proc c ON (b.nr_seq_grupo_proc = c.nr_sequencia)
WHERE a.nm_usuario     = nm_usuario_p AND a.nr_seq_ageint   = nr_seq_ageint_p AND a.nr_seq_ageint_item = b.nr_sequencia  AND (((b.ie_tipo_agendamento = 'C' AND (b.cd_medico IS NOT NULL AND b.cd_medico::text <> '')) OR (ie_consulta_especialidade_p  = 'N')) OR (b.ie_tipo_agendamento = 'E')) AND ((coalesce(b.dt_prev_transf_item, b.dt_prevista_item) = dt_prevista_item_p) OR (coalesce(b.dt_prevista_item::text, '') = '')) and coalesce(a.ie_apres_marc,'S') = 'S' ORDER BY 	nr_seq_ordem_apresent, 
			nr_Seq_ordem, 
			nr_sequencia;
			
--Profissionais liberados para o item selecionado 
C02 CURSOR FOR 
	SELECT	distinct coalesce(c.cd_pessoa_Fisica, a.cd_agenda) cd_item, 
			CASE WHEN coalesce(ie_apres_medico_marc,'S')='N' THEN ''  ELSE coalesce(d.nm_guerra,     SUBSTR(OBTER_NOME_PF(c.cd_pessoa_Fisica), 0, 255)    ) END  ds_item_prof, 
			CASE WHEN coalesce(c.cd_pessoa_fisica::text, '') = '' THEN  'I'  ELSE 'M' END  ie_item , 
			a.nr_Seq_ageint_item nr_seq_item, 
			coalesce(ie_apres_medico_marc,'S') ie_apres_medico 
	FROM agenda e, ageint_lib_usuario a
LEFT OUTER JOIN pessoa_fisica c ON (a.cd_pessoa_fisica = c.cd_pessoa_fisica)
LEFT OUTER JOIN medico d ON (a.cd_pessoa_fisica = d.cd_pessoa_fisica)
WHERE a.nm_usuario     = nm_usuario_p and a.nr_seq_ageint   = nr_seq_ageint_p   and e.cd_agenda	   = a.cd_agenda and coalesce(a.ie_apres_marc,'S') = 'S' order by a.nr_seq_ageint_item;
	
--Agendas liberadas para cada profissional que est√° liberado para agendar o item 
C03 CURSOR FOR 
	SELECT	a.cd_agenda, 
			SUBSTR(CASE WHEN b.cd_tipo_agenda=2 THEN  coalesce(b.ds_curta,b.ds_Agenda) WHEN b.cd_tipo_agenda=5 THEN  b.ds_agenda  ELSE coalesce(b.ds_curta || '-' || b.ds_complemento,      SUBSTR(OBTER_NOME_PF(c.cd_pessoa_fisica), 0, 255)     ) END  || CASE WHEN coalesce(d.ds_Classif_agendamento::text, '') = '' THEN NULL  ELSE '-' || d.ds_Classif_agendamento END ,1,38) ds_agenda, 
			b.cd_tipo_agenda, 
			b.ie_feriado, 
			b.ie_Gerar_sobra_horario ie_sobra_horario, 
			SUBSTR(OBTER_NOME_PF(c.cd_pessoa_fisica), 0, 255) nm_medico, 
			c.cd_pessoa_fisica cd_medico, 
			a.nr_seq_ageint, 
			a.nr_sequencia, 
			b.cd_estabelecimento, 
			a.nr_Seq_ageint_item, 
			a.cd_pessoa_fisica , 
			coalesce(a.cd_pessoa_fisica, b.cd_agenda) cd_item, 
			coalesce(b.ie_apres_medico_marc,'S') ie_apres_medico_marc, 
			CASE WHEN ie_cons_rodizio_proc_int_p='S' THEN  Ageint_cons_hor_rodizio_exame(a.nr_Seq_ageint_item, a.cd_pessoa_fisica, dt_agenda_p, a.cd_agenda, qt_dias_rodizio_p, b.cd_estabelecimento, nm_usuario_p)  ELSE 'S' END  ie_med_lib_rodizio 
FROM ageint_classif_agendamento d, ageint_lib_usuario a, agenda b
LEFT OUTER JOIN pessoa_fisica c ON (b.cd_pessoa_fisica = c.cd_pessoa_fisica)
WHERE a.nm_usuario     = nm_usuario_p and a.nr_seq_ageint   = nr_seq_ageint_p and a.cd_agenda     = b.cd_agenda   and coalesce(a.ie_apres_marc,'S') = 'S' order by 	a.nr_Seq_ageint_item, 12, 2;

--agenda_lib_item_q 
c01_w			c01%rowtype;
--agenda_prof_q 
c02_w			c02%rowtype;
--agendas_liberadas_q 
c03_w			c03%rowtype;

 

BEGIN 
ie_customiza_cor_panel_w	:= coalesce(Obter_Valor_Param_Usuario(869, 63, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p), 'N');
 
delete	FROM w_ageint_dados_tela_marc 
where	nr_seq_agenda_int 	= nr_seq_ageint_p 
and		nm_usuario			= nm_usuario_p;
commit;
 
open C01;
loop 
fetch C01 into	 
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	 
	if (c01_w.ie_apres_marc = 'S')then 
	 
		open C02;
		loop 
		fetch C02 into	 
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin		 
			 
			if (c02_w.nr_seq_item = c01_w.nr_seq_ageint_item) then 
				begin 
				 
				open C03;
				loop 
				fetch C03 into	 
					c03_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin			 
				 
					if (c03_w.nr_seq_ageint_item = c01_w.nr_seq_ageint_item) and 
						((c03_w.cd_pessoa_fisica = c02_w.cd_item AND c02_w.ie_item = 'M') or 
						((c03_w.cd_Agenda = c02_w.cd_item) and (c02_w.ie_item = 'I') and (coalesce(c03_w.cd_pessoa_fisica::text, '') = ''))) and (c03_w.ie_apres_medico_marc = c02_w.ie_apres_medico)then 
						begin 
						 
						if (ie_customiza_cor_panel_w = 'S')then 
							SELECT * FROM Tasy_Obter_Cor(17, obter_perfil_ativo, cd_estabelecimento_p, ds_cor_fundo_w, ds_cor_fonte_w, ds_cor_selecao_w) INTO STRICT ds_cor_fundo_w, ds_cor_fonte_w, ds_cor_selecao_w;
						end if;					
						 
						insert into w_ageint_dados_tela_marc(																							 
															nr_seq_agenda_int, 
															ie_tipo_agendamento, 
															ie_origem_proced, 
															cd_procedimento, 
															nr_seq_proc_interno, 
															cd_pessoa_fisica, 
															nr_Seq_ageint_item, 
															nr_seq_ageint_lib, 
															cd_tipo_agenda, 
															cd_agenda, 
															ds_agenda, 
															ds_item, 
															cd_item, 
															ds_item_prof, 
															ds_cor_fundo, 
															ds_cor_fonte, 
															nm_usuario, 
															ie_med_lib_rodizio, 
															ie_item, 
															nr_seq_ordem_apresent, 
															nr_seq_ordem														 
															) 
						values (														 
															nr_seq_ageint_p, 
															c01_w.ie_tipo_agendamento, 
															c01_w.ie_origem_proced, 
															c01_w.cd_procedimento, 
															c01_w.nr_seq_proc_interno, 
															c03_w.cd_pessoa_fisica, 
															c01_w.nr_seq_ageint_item, 
															c03_w.nr_sequencia, 
															c03_w.cd_tipo_agenda, 
															c03_w.cd_agenda, 
															c03_w.ds_agenda, 
															c01_w.ds_item, 
															c02_w.cd_item, 
															c02_w.ds_item_prof, 
															ds_cor_fundo_w, 
															ds_cor_fonte_w, 
															nm_usuario_p, 
															c03_w.ie_med_lib_rodizio, 
															c02_w.ie_item, 
															c01_w.nr_seq_ordem_apresent, 
															c01_w.nr_seq_ordem														 
															);				
															 
						end;					
					end if;
					 
					end;
				end loop;
				close C03;
				 
				end;
			end if;
			 
			 
			end;
		end loop;
		close C02;
	 
	end if;
	 
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_gerar_dados_tela_marc ( nr_seq_ageint_p bigint, ie_consulta_especialidade_p text, ie_cons_rodizio_proc_int_p text, qt_dias_rodizio_p bigint, dt_prevista_item_p timestamp, dt_agenda_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

