-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_reaj_quota (nr_seq_lote_p pls_lote_reaj_quota.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


vl_parcela_anterior_w		pls_escrit_quota_parcela.vl_parcela%type;
nr_seq_reaj_quota_parc_w	pls_reaj_quota_parc.nr_sequencia%type;
dt_referencia_w			pls_lote_reaj_quota.dt_referencia%type;
nr_seq_lote_reaj_mes_w		pls_lote_reaj_quota.nr_sequencia%type;

C01 CURSOR(	dt_ref_inicial_pc	pls_lote_reaj_quota.dt_referencia%type) FOR
SELECT	a.nr_sequencia,
	a.vl_parcela,
	a.nr_seq_escrituracao,
	a.dt_vencimento,
	a.nr_parcela
from	pls_escrit_quota_parcela a
where	(a.nr_titulo IS NOT NULL AND a.nr_titulo::text <> '')
and 	a.dt_vencimento >= dt_ref_inicial_pc
order	by a.dt_vencimento;

BEGIN

select	dt_referencia
into STRICT	dt_referencia_w
from	pls_lote_reaj_quota
where	nr_sequencia	= nr_seq_lote_p;

select	max(nr_sequencia)
into STRICT	nr_seq_lote_reaj_mes_w
from	pls_lote_reaj_quota
where	trunc(dt_referencia, 'month') 	= trunc(dt_referencia_w, 'month')
and	nr_sequencia			<> nr_seq_lote_p;

if (nr_seq_lote_reaj_mes_w IS NOT NULL AND nr_seq_lote_reaj_mes_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(283481);	-- Já existe outro lote neste mês de referência!
end if;

select	max(nr_sequencia)
into STRICT	nr_seq_lote_reaj_mes_w
from	pls_lote_reaj_quota
where	trunc(dt_referencia, 'month') 	< trunc(dt_referencia_w, 'month')
and	coalesce(dt_fechamento::text, '') = '';

if (nr_seq_lote_reaj_mes_w IS NOT NULL AND nr_seq_lote_reaj_mes_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(283480);	-- Existem lotes em aberto com data inferior à data deste lote!
end if;

delete	FROM pls_reaj_quota_parc
where	nr_seq_lote	= nr_seq_lote_p;

for r_c01_w in c01(trunc(dt_referencia_w, 'month')) loop

	-- Obter último reajuste desta parcela
	select max(nr_sequencia)
	into STRICT   nr_seq_reaj_quota_parc_w
	from   pls_reaj_quota_parc
	where  nr_seq_quota_parc	= r_c01_w.nr_sequencia;

	vl_parcela_anterior_w		:= r_c01_w.vl_parcela;
	if (nr_seq_reaj_quota_parc_w IS NOT NULL AND nr_seq_reaj_quota_parc_w::text <> '') then
		select	vl_parcela_atual
		into STRICT	vl_parcela_anterior_w
		from	pls_reaj_quota_parc
		where	nr_sequencia		= nr_seq_reaj_quota_parc_w;
	end if;

	insert into pls_reaj_quota_parc(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_lote,
			vl_parcela_anterior,
			vl_parcela_atual,
			vl_parcela_orig,
			vl_parcela_reajuste,
			nr_seq_quota_parc,
			nr_seq_escrituracao)
	 SELECT		nextval('pls_reaj_quota_parc_seq'),
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_lote_p,
			vl_parcela_anterior_w,
			0,
			r_c01_w.vl_parcela,
			0,
			r_c01_w.nr_sequencia,
			r_c01_w.nr_seq_escrituracao
	;

end loop;

update pls_lote_reaj_quota
set    dt_geracao_lote = clock_timestamp()
where  nr_sequencia    = nr_seq_lote_p;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_reaj_quota (nr_seq_lote_p pls_lote_reaj_quota.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

