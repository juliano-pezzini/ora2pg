-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_tabela_atc ( nm_usuario_p text) AS $body$
DECLARE


cd_atc_w		varchar(10);
ds_atc_w		varchar(255);
qt_ddd_w		double precision;
ds_observacao_w		varchar(2000);
cd_unid_med_w		varchar(30);
cd_via_adm_w		varchar(30);


c01 CURSOR FOR /* Grupo anatômico */
	SELECT	cd_atc,
		initcap(ds_atc)
	from  	w_atc
	where  	length(cd_atc) = 1
	group by
		cd_atc,
		initcap(ds_atc);

c02 CURSOR FOR /* Classe terapêutica */
	SELECT	cd_atc,
		initcap(ds_atc)
	from  	w_atc
	where  	length(cd_atc) = 3
	group by
		cd_atc,
		initcap(ds_atc);

c03 CURSOR FOR /* Subclasse terapêutica */
	SELECT	cd_atc,
		initcap(ds_atc)
	from  	w_atc
	where  	length(cd_atc) = 4
	group by
		cd_atc,
		initcap(ds_atc);

c04 CURSOR FOR /* Grupo químico */
	SELECT	cd_atc,
		initcap(ds_atc)
	from  	w_atc
	where  	length(cd_atc) = 5
	group by
		cd_atc,
		initcap(ds_atc);

c05 CURSOR FOR /* Substâncias */
	SELECT	cd_atc,
		initcap(ds_atc)
	from  	w_atc
	where  	length(cd_atc) = 7
	group by
		cd_atc,
		initcap(ds_atc);

c06 CURSOR FOR  /* DDD */
	SELECT	cd_atc,
		qt_ddd,
		substr(ds_observacao,1,255),
		substr(cd_unidade_medida,1,30),
		substr(ie_via_administracao,1,30)
	from  	w_atc
	where  	length(cd_atc) = 7
	and ((qt_ddd IS NOT NULL AND qt_ddd::text <> '') or (cd_unidade_medida IS NOT NULL AND cd_unidade_medida::text <> '') or (ie_via_administracao IS NOT NULL AND ie_via_administracao::text <> ''));


BEGIN

open c01;
	loop
	fetch c01 into
		cd_atc_w,
		ds_atc_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		CALL Consiste_Grupo_Anat_ATC(substr(cd_atc_w,1,10), substr(ds_atc_w,1,255), nm_usuario_p);
		end;
	end loop;
close c01;

open c02;
	loop
	fetch c02 into
		cd_atc_w,
		ds_atc_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		CALL Consiste_Classe_Terap_ATC(substr(cd_atc_w,1,10), substr(ds_atc_w,1,255), substr(cd_atc_w,1,1), nm_usuario_p);
		end;
	end loop;
close c02;

open c03;
	loop
	fetch c03 into
		cd_atc_w,
		ds_atc_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		CALL Consiste_SubClasse_Terap_ATC(substr(cd_atc_w,1,10), substr(ds_atc_w,1,255), substr(cd_atc_w,1,3), nm_usuario_p);
		end;
	end loop;
close c03;

open c04;
	loop
	fetch c04 into
		cd_atc_w,
		ds_atc_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		begin
		CALL Consiste_Grupo_Quim_ATC(substr(cd_atc_w,1,10), substr(ds_atc_w,1,255), substr(cd_atc_w,1,4), nm_usuario_p);
		end;
	end loop;
close c04;

open c05;
	loop
	fetch c05 into
		cd_atc_w,
		ds_atc_w;
	EXIT WHEN NOT FOUND; /* apply on c05 */
		begin
		CALL Consiste_Subst_Quim_ATC(substr(cd_atc_w,1,10), substr(ds_atc_w,1,255), substr(cd_atc_w,1,5), nm_usuario_p);
		end;
	end loop;
close c05;

/* Vias de administração padrões da ATC */

begin
insert into atc_via_adm(cd_via_adm,ds_via_adm,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('Inhal','Inhalation','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_via_adm(cd_via_adm,ds_via_adm,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('N','Nasal','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_via_adm(cd_via_adm,ds_via_adm,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('O','Oral','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_via_adm(cd_via_adm,ds_via_adm,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('P','Parenteral','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_via_adm(cd_via_adm,ds_via_adm,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('R','Rectal','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_via_adm(cd_via_adm,ds_via_adm,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('SL','Sublingual/Buccal','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_via_adm(cd_via_adm,ds_via_adm,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('TD','Transdermal','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_via_adm(cd_via_adm,ds_via_adm,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('V','Vaginal','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
exception
	when others then
	ds_atc_w	:= '';
end;

/* Unidades de medida padrões da ATC */

begin
insert into atc_unid_med(cd_unid_med,ds_unid_med,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('g','gram','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_unid_med(cd_unid_med,ds_unid_med,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('mg','milligram','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_unid_med(cd_unid_med,ds_unid_med,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('mcg','microgram','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_unid_med(cd_unid_med,ds_unid_med,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('U','unit','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_unid_med(cd_unid_med,ds_unid_med,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('TU','thousand units','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_unid_med(cd_unid_med,ds_unid_med,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('MU','million units','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_unid_med(cd_unid_med,ds_unid_med,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('mmol','millimole','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
insert into atc_unid_med(cd_unid_med,ds_unid_med,ie_situacao,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec)
	values ('ml','milliliter','A',clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p);
exception
	when others then
	ds_atc_w	:= '';
end;

open c06;
	loop
	fetch c06 into
		cd_atc_w,
		qt_ddd_w,
		ds_observacao_w,
		cd_unid_med_w,
		cd_via_adm_w;
	EXIT WHEN NOT FOUND; /* apply on c06 */
		begin

		CALL Consiste_Unid_Med_ATC(cd_unid_med_w, nm_usuario_p);
		CALL Consiste_Via_Adm_ATC(cd_via_adm_w, nm_usuario_p);

		begin
		insert into atc_ddd(
			nr_sequencia,
			cd_substancia,
			cd_via_adm,
			cd_unid_med,
			qt_ddd,
			ds_obs,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec
		) values (
			nextval('atc_ddd_seq'),
			cd_atc_w,
			cd_via_adm_w,
			cd_unid_med_w,
			qt_ddd_w,
			ds_observacao_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p
		);
		exception
			when others then
			cd_atc_w	:= '';
		end;

		end;
	end loop;
close c06;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_tabela_atc ( nm_usuario_p text) FROM PUBLIC;

