-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE reg_medias AS (qt_consumo	double precision);


CREATE OR REPLACE PROCEDURE atualizar_consumo_medio_consig ( cd_estabelecimento_p bigint, qt_meses_consumo_p bigint, dt_parametro_p timestamp, dt_periodo_inicio_p timestamp, dt_periodo_final_p timestamp, cd_grupo_material_p bigint, cd_subgrupo_material_p bigint, cd_classe_material_p bigint, nm_usuario_p text) AS $body$
DECLARE

type medias is table of reg_medias index by integer;

 
sql_errm_w			varchar(255);
cd_material_w			integer  := 0;
qt_consumo_w			double precision;
qt_consumo_mensal_w		double precision;
qt_consumo_diario_w		double precision;
qt_meses_consumo_w		smallint;
qt_consumo_mes_w		double precision;
dt_mesano_referencia_w		timestamp;
dt_parametro_w			timestamp;
dt_parametro_inicio_w		timestamp;
qt_meses_w			smallint;
qt_existe_peso_w			integer;
vl_peso_mes_w			double precision;
ie_mes_atual_consumo_w		varchar(1);
ie_regra_mes_consumo_w		varchar(1);
ie_ponto_so_ult_meses_w		varchar(1);

i				smallint	:= 0;
medias_w				medias;
soma_consumo_w			double precision;
variancia_w			double precision;
total_variancia_w			double precision;
qt_desvio_padrao_cons_w		double precision;

dt_periodo_final_w		timestamp;

c01 CURSOR FOR 
SELECT	/*+ index(a) */ 
	a.cd_material 
from	estrutura_material_v b, 
	material_estab a 
where	a.cd_material = b.cd_material 
and	a.cd_estabelecimento = cd_estabelecimento_p 
and (b.cd_grupo_material = coalesce(cd_grupo_material_p,0) or coalesce(cd_grupo_material_p,0) = 0) 
and (b.cd_subgrupo_material = coalesce(cd_subgrupo_material_p,0) or coalesce(cd_subgrupo_material_p,0) = 0) 
and (b.cd_classe_material = coalesce(cd_classe_material_p,0) or coalesce(cd_classe_material_p,0) = 0) 
and	b.ie_situacao = 'A' 
and	exists ( 
	SELECT	cd_material 
	from	fornecedor_mat_consignado x 
	where	x.cd_estabelecimento 	= a.cd_estabelecimento 
	and	x.cd_material		= a.cd_material 
	and	((ie_ponto_so_ult_meses_w = 'N') or (ie_ponto_so_ult_meses_w = 'S' and x.dt_mesano_referencia >= PKG_DATE_UTILS.ADD_MONTH(dt_parametro_w,-3,0)))) 
and	not exists( 
	select	/*+ index(salesto_i2 x) */ 
		cd_material 
	from	saldo_estoque x 
	where	x.cd_estabelecimento 	= a.cd_estabelecimento 
	and	x.cd_material		= a.cd_material 
	and	((ie_ponto_so_ult_meses_w = 'N') or (ie_ponto_so_ult_meses_w = 'S' and x.dt_mesano_referencia >= PKG_DATE_UTILS.ADD_MONTH(dt_parametro_w,-3,0))));

c02 CURSOR FOR 
SELECT	/*+ index(a) */ 
	a.dt_mesano_referencia, 
	sum(CASE WHEN b.ie_consumo='A' THEN  qt_estoque WHEN b.ie_consumo='D' THEN  qt_estoque * -1 END ) 
from 	operacao_estoque b, 
	local_estoque c, 
	resumo_movto_estoque a 
where 	a.cd_material 		= cd_material_w 
and 	a.dt_mesano_referencia 	between dt_parametro_inicio_w and dt_parametro_w 
and	a.cd_operacao_estoque	= b.cd_operacao_estoque 
and	a.cd_local_estoque	= c.cd_local_estoque 
and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '') 
and	c.ie_proprio = 'S' 
and	coalesce(ie_consumo,'N') <> 'N' 
and	coalesce(a.qt_estoque,0) <> 0 
and	a.cd_estabelecimento	= cd_estabelecimento_p 
and	coalesce(dt_periodo_inicio_p::text, '') = '' 
and	coalesce(dt_periodo_final_p::text, '') = '' 
group by a.dt_mesano_referencia 
having sum(coalesce(a.qt_estoque,0)) > 0 

union
 
SELECT	a.dt_mesano_referencia, 
	sum(qt_consumo) 
from	movimento_estoque_v a, 
	material m 
where	a.cd_material_estoque	= m.cd_material_estoque 
and	((a.ie_atualiza_estoque = 'S') or (a.ie_consignado in (2,3,4,5,6,7))) /*somente movimentos que atualizaram estoque*/
 
and	m.cd_material		= cd_material_w 
and	a.cd_estabelecimento	= cd_estabelecimento_p 
and	a.dt_movimento_estoque	between dt_periodo_inicio_p and dt_periodo_final_w 
and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '') 
and	(dt_periodo_inicio_p IS NOT NULL AND dt_periodo_inicio_p::text <> '') 
and	(dt_periodo_final_p IS NOT NULL AND dt_periodo_final_p::text <> '') 
group by a.dt_mesano_referencia 
order by 1;


BEGIN 
/*Tratamento OS 439428*/
 
dt_periodo_final_w := PKG_DATE_UTILS.END_OF(coalesce(dt_periodo_final_p,clock_timestamp()),'DAY', 0);
 
begin 
select	coalesce(qt_mes_consumo,12), 
	coalesce(ie_mes_atual_consumo, 'S'), 
	coalesce(ie_regra_mes_consumo, 'N'), 
	coalesce(ie_ponto_so_ult_meses,'S') 
into STRICT	qt_meses_w, 
	ie_mes_atual_consumo_w, 
	ie_regra_mes_consumo_w, 
	ie_ponto_so_ult_meses_w 
from	parametro_compras 
where	cd_estabelecimento	= cd_estabelecimento_p;
exception 
	when no_data_found then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(181892);
		/*r.aise_application_error(-20011,'Não foi encontrado os parametros de dias de ressuprimento nos parametros de compras');*/
 
end;
 
select	count(*) 
into STRICT	qt_existe_peso_w 
from	sup_peso_media_consumo 
where	cd_estabelecimento = cd_estabelecimento_p;
 
if (qt_meses_consumo_p > 0) then 
	qt_meses_w		:= qt_meses_consumo_p;
end if;
 
dt_parametro_w			:= PKG_DATE_UTILS.start_of(dt_parametro_p,'month',0);
dt_parametro_inicio_w		:= PKG_DATE_UTILS.ADD_MONTH(dt_parametro_w, (qt_meses_w -1) * -1, 0);
 
/*identifica se considera mes atual. se não simplesmesnte adiciona -1 nos meses de busca*/
 
if (ie_mes_atual_consumo_w = 'N') then 
	dt_parametro_w		:= PKG_DATE_UTILS.ADD_MONTH(dt_parametro_w, -1, 0);
	dt_parametro_inicio_w	:= PKG_DATE_UTILS.ADD_MONTH(dt_parametro_inicio_w, -1, 0);
end if;
 
open c01;
loop 
fetch c01 into 
	cd_material_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
	qt_desvio_padrao_cons_w	:= 0;
	qt_consumo_mensal_w	:= 0;
	qt_meses_consumo_w	:= 0;
	i			:= 0;
	qt_consumo_w		:= 0;
 
	open c02;
	loop 
	fetch c02 into 
		dt_mesano_referencia_w, 
		qt_consumo_mes_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin 
		if (qt_consumo_mes_w > 0) then 
			begin 
			/*sazionalidade do material os28421*/
 
			if (qt_existe_peso_w > 0) then 
				select	obter_peso_media_consumo(PKG_DATE_UTILS.start_of(dt_mesano_referencia_w,'month',0), cd_material_w, cd_estabelecimento_p) 
				into STRICT	vl_peso_mes_w 
				;
				qt_consumo_mes_w	:= qt_consumo_mes_w * coalesce(vl_peso_mes_w,1);
			end if;
 
			qt_consumo_w 			:= qt_consumo_w + qt_consumo_mes_w;
			qt_meses_consumo_w		:= qt_meses_consumo_w + 1;
			i				:= i + 1;
			medias_w[i].qt_consumo		:= qt_consumo_mes_w;
 
			if (ie_regra_mes_consumo_w = 'S') then 
				qt_meses_consumo_w	:= qt_meses_w;
			end if;
			end;
		end if;
		end;
	end loop;
	close c02;
 
	if (qt_meses_consumo_w > 0) then 
		begin 
		qt_consumo_mensal_w	:= dividir(qt_consumo_w, qt_meses_consumo_w);
 
		/*calculo do desvio padrao do consumo*/
 
		begin 
		total_variancia_w		:= 0;
		for i in 1..medias_w.count loop 
			begin 
			soma_consumo_w		:= medias_w[i].qt_consumo - qt_consumo_mensal_w;		
			variancia_w		:= round((soma_consumo_w * soma_consumo_w)::numeric, 4);
			total_variancia_w	:= total_variancia_w + variancia_w;
			end;
		end loop;
		qt_desvio_padrao_cons_w		:= round((sqrt(dividir(total_variancia_w, qt_meses_consumo_w)))::numeric,4);
		exception when others then 
			qt_desvio_padrao_cons_w	:= 0;
			sql_errm_w		:= sqlerrm;
		end;
		end;
	end if;
	 
	update	material_estab 
	set	qt_desvio_padrao_cons	= qt_desvio_padrao_cons_w, 
		qt_consumo_mensal	= qt_consumo_mensal_w, 
		qt_mes_consumo		= qt_meses_consumo_w, 
		dt_atual_consumo	= clock_timestamp() 
	where	cd_estabelecimento	= cd_estabelecimento_p 
	and	cd_material	= cd_material_w;
		 
	update	/*+ index (a) */ 
		material_estab a 
	set	a.qt_desvio_padrao_cons	= qt_desvio_padrao_cons_w, 
		a.qt_consumo_mensal	= qt_consumo_mensal_w, 
		a.qt_mes_consumo	= qt_meses_consumo_w, 
		a.dt_atual_consumo	= clock_timestamp() 
	where	a.cd_estabelecimento	= cd_estabelecimento_p 
	and	a.cd_material in ( 
		SELECT	b.cd_material 
		from	material b 
		where	b.cd_material_estoque = cd_material_w 
		and	b.cd_material <> cd_material_w);
	end;
end loop;
close c01;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_consumo_medio_consig ( cd_estabelecimento_p bigint, qt_meses_consumo_p bigint, dt_parametro_p timestamp, dt_periodo_inicio_p timestamp, dt_periodo_final_p timestamp, cd_grupo_material_p bigint, cd_subgrupo_material_p bigint, cd_classe_material_p bigint, nm_usuario_p text) FROM PUBLIC;

