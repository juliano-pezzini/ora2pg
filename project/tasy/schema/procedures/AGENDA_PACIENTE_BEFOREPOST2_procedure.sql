-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE agenda_paciente_beforepost2 ( nr_seq_agenda_p bigint, cd_agenda_p bigint, cd_pessoa_fisica_p text, hr_inicio_p timestamp, nr_minuto_duracao_p bigint, nr_minuto_duracao_old_p bigint, cd_medico_exec_p text, cd_usuario_convenio_p text, cd_convenio_p bigint, cd_categoria_p text, cd_plano_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, ie_lado_p text, cd_estabelecimento_p bigint, cd_perfil_p bigint, nm_usuario_p text, cd_tipo_agenda_p bigint, ie_encaixe_p text, ie_consiste_duracao_p INOUT text, ds_sobreposicao_p INOUT text, ds_exige_lado_p INOUT text, ds_erro_p INOUT text, nr_digitos_codigo_p INOUT text, ds_rotina_digito_p INOUT text, qt_proc_autor_p INOUT bigint, cd_proc_anterior_p INOUT bigint) AS $body$
DECLARE


ie_se_sobreposicao_w	varchar(1);
ie_exige_lado_w		varchar(1);
ie_consiste_duracao_w	varchar(15);
nr_digitos_codigo_w	varchar(15);
ds_rotina_digito_w	varchar(50);
ds_sobreposicao_w	varchar(255) := 'null';
vl_exige_lado_w		varchar(255);
vl_consiste_med_exec_w	varchar(255);
ds_exige_lado_w		varchar(255);
ds_erro_w		varchar(255);
vl_bloquear_atend_w	varchar(255);
ie_Calc_Min_Dur_w	varchar(1);
tempo_proc_w		bigint;
ie_con_SobrepHor_enc_w	varchar(1);
ie_consiste_sobrep_w	varchar(1) := 'N';
Var_Ie_Sobreposicao_w	varchar(1);
qt_proc_autor_w		bigint;
hr_inicio_w 		timestamp;
cd_proc_anterior_w	agenda_paciente.cd_procedimento%type;

BEGIN

ie_con_SobrepHor_enc_w := Obter_Param_Usuario(820, 417, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_con_SobrepHor_enc_w);

if (nr_minuto_duracao_p <> nr_minuto_duracao_old_p) and (ie_con_SobrepHor_enc_w = 'S' or coalesce(ie_encaixe_p,'N') = 'N') then
	
	begin	
	select coalesce(max(hr_inicio), hr_inicio_p)
	into STRICT hr_inicio_w
	from agenda_paciente
	where nr_sequencia = nr_seq_agenda_p;
	
	select	coalesce(max(ie_consiste_duracao), 'I')
	into STRICT	ie_consiste_duracao_w
	from	parametro_agenda
	where	cd_estabelecimento = cd_estabelecimento_p;
	
	if (ie_consiste_duracao_w <> 'N') then
		begin
		ie_se_sobreposicao_w	:= substr(obter_se_sobreposicao_horario(cd_agenda_p, hr_inicio_w, nr_minuto_duracao_p),1,1);
		if (ie_se_sobreposicao_w = 'S') then
			begin
			if (ie_consiste_duracao_w = 'A') then
				ds_sobreposicao_w	:= substr(obter_texto_tasy(37791, wheb_usuario_pck.get_nr_seq_idioma),1,255);
			elsif (ie_consiste_duracao_w = 'I') then				
				ds_sobreposicao_w	:= substr(obter_texto_tasy(37793, wheb_usuario_pck.get_nr_seq_idioma),1,255);				
			end if;
			end;
		end if;		
		end;
	end if;	
	
	if (ds_sobreposicao_w = 'null') then
		if (ie_consiste_duracao_w = 'I') then

			ie_Calc_Min_Dur_w := Obter_Param_Usuario(820, 33, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_Calc_Min_Dur_w);	
			if (coalesce(ie_Calc_Min_Dur_w,'X') = 'S') then
			
				select 	substr(max(coalesce(obter_tempo_duracao_proced(	cd_agenda_p,
											cd_medico_exec_p,
											cd_procedimento_p,
											ie_origem_proced_p,
											cd_pessoa_fisica_p,
											nr_seq_proc_interno_p,
											ie_lado_p,
											cd_convenio_p,
											cd_categoria_p,
											cd_plano_p,
											nr_seq_agenda_p,
											null),0)),1,240) 
				into STRICT	tempo_proc_w
				;
				
				if (coalesce(ie_encaixe_p,'N') = 'S') then					
					if (coalesce(ie_con_SobrepHor_enc_w,'S') = 'N') then
						ie_consiste_sobrep_w := 'N';
					else
						ie_consiste_sobrep_w := 'S';
					end if;
				else
					ie_consiste_sobrep_w := 'S';
				end if;
				
				
				if (ie_consiste_sobrep_w = 'S') and (coalesce(tempo_proc_w,0) > 0) then
				
					select 	max(obter_se_sobreposicao_horario(	cd_agenda_p,
											hr_inicio_w,
											coalesce(tempo_proc_w,0)))
					into STRICT	Var_Ie_Sobreposicao_w
					;
					
					if (Var_Ie_Sobreposicao_w = 'S') then
						
						ds_sobreposicao_w	:= substr(obter_texto_tasy(61121, wheb_usuario_pck.get_nr_seq_idioma),1,255);
					end if;
					
				end if;
				
			end if;
					
		end if;
	end if;
	end;
end if;

vl_exige_lado_w := Obter_Param_Usuario(820, 39, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, vl_exige_lado_w);
if (vl_exige_lado_w = 'S') then
	begin	
	ie_exige_lado_w		:= 'N';
	if (nr_seq_proc_interno_p IS NOT NULL AND nr_seq_proc_interno_p::text <> '') then
		ie_exige_lado_w	:= substr(obter_se_proc_exige_lado(nr_seq_proc_interno_p, null, null),1,1);
	elsif (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') then
		ie_exige_lado_w	:= substr(obter_se_proc_exige_lado(null, cd_procedimento_p, ie_origem_proced_p),1,1);
	end if;
	
	if (coalesce(ie_lado_p::text, '') = '') and (ie_exige_lado_w = 'S' or ie_exige_lado_w = 'L') then
		ds_exige_lado_w	:= substr(obter_texto_tasy(37794, wheb_usuario_pck.get_nr_seq_idioma),1,255);
	end if;	

	if (ie_exige_lado_w = 'L') and (ie_lado_p = 'A') then
		ds_exige_lado_w	:= substr(obter_texto_tasy(1022971, wheb_usuario_pck.get_nr_seq_idioma),1,255);
	end if;
	
	end;
end if;

vl_consiste_med_exec_w := Obter_Param_Usuario(820, 42, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, vl_consiste_med_exec_w);
if (vl_consiste_med_exec_w = 'S') or (vl_consiste_med_exec_w = 'B') or (vl_consiste_med_exec_w = 'I') then
	ds_erro_w := consistir_horario_med_agenda(	nr_seq_agenda_p, cd_medico_exec_p, nr_minuto_duracao_p, cd_tipo_agenda_p, ds_erro_w);	
end if;

vl_bloquear_atend_w := Obter_Param_Usuario(820, 92, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, vl_bloquear_atend_w);
if (vl_bloquear_atend_w = 'S') and (cd_usuario_convenio_p IS NOT NULL AND cd_usuario_convenio_p::text <> '') and (cd_convenio_p > 0) then
	begin
	select	nr_digitos_codigo,
		ds_rotina_digito
	into STRICT	nr_digitos_codigo_w,
		ds_rotina_digito_w
	from	convenio
	where	cd_convenio = cd_convenio_p;	
	end;
end if;

select 	max(cd_procedimento)
into STRICT	cd_proc_anterior_w
from 	agenda_paciente 
where 	nr_sequencia = nr_seq_agenda_p;

qt_proc_autor_w := 0;

if (cd_proc_anterior_w > 0 and cd_proc_anterior_w <> cd_procedimento_p) then
	select 	count(*)
	into STRICT	qt_proc_autor_w
	from   	autorizacao_convenio b, 
		procedimento_autorizado a
        where  	a.nr_sequencia_autor = b.nr_sequencia 
        and    	b.nr_seq_agenda = nr_seq_agenda_p
        and    	a.cd_procedimento = cd_proc_anterior_w;
end if;


ie_consiste_duracao_p	:= ie_consiste_duracao_w;
ds_sobreposicao_p	:= ds_sobreposicao_w;
ds_exige_lado_p		:= ds_exige_lado_w;
ds_erro_p		:= ds_erro_w;
nr_digitos_codigo_p	:= nr_digitos_codigo_w;
ds_rotina_digito_p	:= ds_rotina_digito_w;
qt_proc_autor_p		:= qt_proc_autor_w;
cd_proc_anterior_p	:= cd_proc_anterior_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE agenda_paciente_beforepost2 ( nr_seq_agenda_p bigint, cd_agenda_p bigint, cd_pessoa_fisica_p text, hr_inicio_p timestamp, nr_minuto_duracao_p bigint, nr_minuto_duracao_old_p bigint, cd_medico_exec_p text, cd_usuario_convenio_p text, cd_convenio_p bigint, cd_categoria_p text, cd_plano_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, ie_lado_p text, cd_estabelecimento_p bigint, cd_perfil_p bigint, nm_usuario_p text, cd_tipo_agenda_p bigint, ie_encaixe_p text, ie_consiste_duracao_p INOUT text, ds_sobreposicao_p INOUT text, ds_exige_lado_p INOUT text, ds_erro_p INOUT text, nr_digitos_codigo_p INOUT text, ds_rotina_digito_p INOUT text, qt_proc_autor_p INOUT bigint, cd_proc_anterior_p INOUT bigint) FROM PUBLIC;

