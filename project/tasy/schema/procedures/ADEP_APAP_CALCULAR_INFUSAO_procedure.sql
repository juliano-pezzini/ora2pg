-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE colunas AS (nr_seq_evento_w 	prescr_solucao_evento.nr_sequencia%type,
						ie_alteracao_w		prescr_solucao_evento.ie_alteracao%type,
						dt_inicio_evento_w	prescr_solucao_evento.dt_alteracao%type,
						dt_fim_evento_w		prescr_solucao_evento.dt_alteracao%type,
						qt_dosagem_w		prescr_solucao_evento.qt_dosagem%type,
						cd_pessoa_fisica_w	prescr_solucao_evento.cd_pessoa_fisica%type);


CREATE OR REPLACE PROCEDURE adep_apap_calcular_infusao ( nm_usuario_p text, dt_horario_p timestamp) AS $body$
DECLARE

cd_pessoa_fisica_w		prescr_solucao_evento.cd_pessoa_fisica%type;
cd_perfil_w				prescr_medica.cd_perfil_ativo%type;
cd_setor_atendimento_w	prescr_medica.cd_setor_atendimento%type;
dt_fim_w				prescr_solucao_evento.dt_alteracao%type;
dt_inicio_w				prescr_solucao_evento.dt_alteracao%type;
dt_alteracao_ant_w		prescr_solucao_evento.dt_alteracao%type;
nr_prescricao_w			prescr_solucao.nr_prescricao%type;
nr_seq_atend_w			atendimento_perda_ganho.nr_sequencia%type;
nr_seq_solucao_w		prescr_solucao.nr_seq_solucao%type;
nr_tipo_ganho_w			atendimento_perda_ganho.nr_seq_tipo%type;
qt_horas_w				smallint;
qt_volume_inf_w			prescr_solucao_evento.qt_vol_infundido%type;
qt_vol_restante_w		integer;
qt_vol_lanc_w			atendimento_perda_ganho.qt_volume%type;
ie_bomba_infusao_w		prescr_sol_perda_ganho.ie_bomba_infusao%type;
type vetor is table of colunas index by integer;
vetor_w					vetor;
ind						integer;

c01 CURSOR FOR
SELECT	a.nr_atendimento,
		a.nr_prescricao,
		x.nr_seq_solucao,
		b.cd_material,
		x.ie_bomba_infusao
from	prescr_solucao x,
		prescr_medica a,
		prescr_material b
where	a.nr_prescricao = x.nr_prescricao
and		x.nr_prescricao = b.nr_prescricao
and		x.nr_seq_solucao = b.nr_sequencia_solucao
and 	a.dt_validade_prescr > dt_horario_p
and 	coalesce(a.dt_suspensao::text, '') = ''
and		coalesce(x.dt_suspensao::text, '') = ''
and		coalesce(x.nr_seq_dialise::text, '') = ''
and		obter_status_solucao_prescr(1,a.nr_prescricao, x.nr_seq_solucao) not in ('T', 'N');WITH RECURSIVE cte AS (


c02 CURSOR FOR
SELECT 	(trunc(dt_inicio_w,'hh') + (ROWNUM / 24)) dt_horario_lanc
		
		LEVEL <= (
		(dt_fim_w - trunc(dt_inicio_w,'hh')) * 24)  UNION ALL


c02 CURSOR FOR
SELECT 	(trunc(dt_inicio_w,'hh') + (ROWNUM / 24)) dt_horario_lanc
		 
		LEVEL <= (
		(dt_fim_w - trunc(dt_inicio_w,'hh')) * 24) JOIN cte c ON ()

) SELECT * FROM cte;
;

c03 CURSOR FOR
SELECT	b.NR_SEQUENCIA,
		b.DT_ALTERACAO,
		b.IE_ALTERACAO,
		coalesce(b.ie_tipo_dosagem,a.ie_um_fluxo_pca) ie_tipo_dosagem,
		coalesce(b.QT_DOSAGEM, a.QT_VOL_INFUSAO_PCA, 0) qt_dosagem,
		b.CD_PESSOA_FISICA
from	prescr_solucao_evento b,
		prescr_solucao a
where	b.nr_prescricao = a.nr_prescricao
and		b.nr_seq_solucao = a.nr_seq_solucao
and		b.nr_seq_solucao = nr_seq_solucao_w
and		b.nr_prescricao = nr_prescricao_w
and		b.dt_alteracao < dt_horario_p
and		coalesce(b.ie_evento_valido, 'S') = 'S'
and     b.ie_alteracao <> 6
order by b.nr_sequencia desc;
BEGIN
if (dt_horario_p IS NOT NULL AND dt_horario_p::text <> '') then
	for c01_w in c01 loop
		begin
			nr_seq_solucao_w := c01_w.nr_seq_solucao;
			nr_prescricao_w := c01_w.nr_prescricao;
			ie_bomba_infusao_w	:= c01_w.ie_bomba_infusao;
			
			select	a.cd_setor_atendimento,
					a.cd_perfil_ativo
			into STRICT	cd_setor_atendimento_w,
					cd_perfil_w
			from	prescr_medica a
			where	nr_prescricao = nr_prescricao_w;
			
			select	coalesce(max(p.nr_seq_tipo), 0)
			into STRICT	nr_tipo_ganho_w
			from	prescr_sol_perda_ganho p
			where	p.ie_evento	= 58
			and		coalesce(p.ie_tipo_solucao,1) = 1
			and		coalesce(p.ie_gerar_evento_solucao,'S') = 'S'
			and		((coalesce(p.cd_material::text, '') = '') or (p.cd_material = c01_w.cd_material))
			and		coalesce(p.ie_bomba_infusao,ie_bomba_infusao_w) = ie_bomba_infusao_w
			and		((coalesce(p.cd_setor_Atendimento::text, '') = '') or (p.cd_setor_Atendimento	= coalesce(cd_setor_atendimento_w,0)))
			and		((coalesce(p.cd_perfil::text, '') = '') or (p.cd_perfil = coalesce(cd_perfil_w,0)));
			ind := 1;
			dt_alteracao_ant_w := null;
			if (nr_tipo_ganho_w > 0) then
				for	c03_w in c03 loop
					begin
						vetor_w[ind].nr_seq_evento_w := c03_w.nr_sequencia;
						vetor_w[ind].ie_alteracao_w := c03_w.ie_alteracao;
						vetor_w[ind].dt_inicio_evento_w := c03_w.dt_alteracao;
						vetor_w[ind].cd_pessoa_fisica_w := c03_w.cd_pessoa_fisica;
						if (dt_alteracao_ant_w IS NOT NULL AND dt_alteracao_ant_w::text <> '') then
							vetor_w[ind].dt_fim_evento_w := dt_alteracao_ant_w;
						else
							vetor_w[ind].dt_fim_evento_w := dt_horario_p;
						end if;
						
						if (upper(c03_w.ie_tipo_dosagem) in ('GTM', 'MCG/H')) then
							vetor_w[ind].qt_dosagem_w := (c03_w.qt_dosagem * 60) / 20;
						else
							vetor_w[ind].qt_dosagem_w := c03_w.qt_dosagem;
						end if;
						dt_alteracao_ant_w := c03_w.dt_alteracao;
						ind := ind + 1;
					end;
				end loop;

				for i in 1..vetor_w.count loop
					begin
						if (vetor_w[i].ie_alteracao_w not in (2, 53)) then
							dt_fim_w := vetor_w[i].dt_fim_evento_w;
							dt_inicio_w := vetor_w[i].dt_inicio_evento_w;
							cd_pessoa_fisica_w := vetor_w[i].cd_pessoa_fisica_w;
							dt_alteracao_ant_w := null;
							for c02_w in c02 loop
								begin
									if (dt_alteracao_ant_w IS NOT NULL AND dt_alteracao_ant_w::text <> '') then
										qt_horas_w := (c02_w.dt_horario_lanc - dt_alteracao_ant_w) * 24;
									else
										qt_horas_w := (c02_w.dt_horario_lanc - dt_inicio_w) * 24;
									end if;
									qt_volume_inf_w := (vetor_w[i].qt_dosagem_w * qt_horas_w);
									if (coalesce(qt_horas_w, 0) > 0 and
										coalesce(qt_volume_inf_w, 0) > 0) then
										
										select	coalesce(max(a.qt_volume), 0),
												max(a.nr_sequencia)
										into STRICT 	qt_vol_lanc_w,
												nr_seq_atend_w
										from	atendimento_perda_ganho a
										where	a.nr_seq_evento_adep = vetor_w[i].nr_seq_evento_w
										and		a.dt_apap = c02_w.dt_horario_lanc
										and		a.nm_usuario = nm_usuario_p
										and		a.ie_situacao = 'A';
										
										qt_vol_restante_w := qt_volume_inf_w - qt_vol_lanc_w;
										
										if (coalesce(qt_vol_restante_w,0) <> 0 and
											coalesce(qt_volume_inf_w,0) > 0 and
											coalesce(nr_seq_atend_w,0) > 0) then
											
											update 	atendimento_perda_ganho a
											set		ie_situacao = 'I'
											where	a.nr_seq_evento_adep = vetor_w[i].nr_seq_evento_w
											and		a.dt_apap = c02_w.dt_horario_lanc
											and		a.nm_usuario = nm_usuario_p
											and		nr_sequencia = nr_seq_atend_w;
											
											select	nextval('atendimento_perda_ganho_seq')
											into STRICT	nr_seq_atend_w
											;
											
											insert into atendimento_perda_ganho(nr_sequencia,
												nr_atendimento,
												dt_atualizacao,
												nm_usuario,
												qt_volume,
												nr_seq_tipo,
												dt_medida,
												cd_setor_atendimento,
												ie_origem,
												dt_referencia,
												cd_profissional,
												ie_situacao,
												dt_liberacao,
												dt_apap,
												qt_ocorrencia,
												nr_seq_evento_adep)
											values (nr_seq_atend_w,
												c01_w.nr_atendimento,
												dt_horario_p,
												nm_usuario_p,
												qt_volume_inf_w,
												nr_tipo_ganho_w,
												dt_horario_p,
												cd_setor_atendimento_w,
												'S',
												c02_w.dt_horario_lanc,
												cd_pessoa_fisica_w,
												'A',
												c02_w.dt_horario_lanc,
												c02_w.dt_horario_lanc,
												1,
												vetor_w[i].nr_seq_evento_w);
										elsif (coalesce(nr_seq_atend_w,0) = 0) then
											select	nextval('atendimento_perda_ganho_seq')
											into STRICT	nr_seq_atend_w
											;
											
											insert into atendimento_perda_ganho(nr_sequencia,
												nr_atendimento,
												dt_atualizacao,
												nm_usuario,
												qt_volume,
												nr_seq_tipo,
												dt_medida,
												cd_setor_atendimento,
												ie_origem,
												dt_referencia,
												cd_profissional,
												ie_situacao,
												dt_liberacao,
												dt_apap,
												qt_ocorrencia,
												nr_seq_evento_adep)
											values (nr_seq_atend_w,
												c01_w.nr_atendimento,
												dt_horario_p,
												nm_usuario_p,
												qt_volume_inf_w,
												nr_tipo_ganho_w,
												c02_w.dt_horario_lanc,
												cd_setor_atendimento_w,
												'S',
												c02_w.dt_horario_lanc,
												cd_pessoa_fisica_w,
												'A',
												c02_w.dt_horario_lanc,
												c02_w.dt_horario_lanc,
												1,
												vetor_w[i].nr_seq_evento_w);
										end if;
									end if;
									dt_alteracao_ant_w := c02_w.dt_horario_lanc;
								end;
							end loop;
						end if;
					end;
				end loop;
			end if;
		end;
	end loop;
	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE adep_apap_calcular_infusao ( nm_usuario_p text, dt_horario_p timestamp) FROM PUBLIC;

