-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE importar_dados_egk ((ds_xml_pessoa_p text, ds_xml_convenio_p text, nm_usuario_p text, nr_sequencia_p out bigint, ds_conteudo_kvk_p text default null, ds_xml_certificado_p text default null) is pessoa_fisica_egk_w pessoa_fisica_egk) AS $body$
DECLARE

	dt_retorno_w timestamp;
	
BEGIN

	begin
		dt_retorno_w 	:= to_date(data_w,'yyyymmdd');
        if (dt_retorno_w IS NOT NULL AND dt_retorno_w::text <> '')then
        dt_retorno_w := pkg_date_utils.get_Time(dt_retorno_w, hour_w, minute_w, second_w);
        end if;
	exception
	when others then
		dt_retorno_w	:= null;
	end;

	return;

	end;
	--################################################
	function get_hexa_as_string(nr_id_p	varchar2)
			return;
	lista_w			dbms_sql.varchar2_table;
	i 			integer;
	pos_inicial_w		number(10);
	qt_tam_w		number(10);
	ds_retorno_w		varchar(255);
	ds_charset_kvk_w    nls_database_parameters.value%type:= 'D7DEC'; -- DIN 66303
	ds_charset_base_w   nls_database_parameters.value%type;
	kvk_data_w          varchar2(4000);
	kvk_data_length_w   number;
	kvk_header_w        number;

	begin

	begin
        select  value
        into STRICT    ds_charset_base_w
        from    nls_database_parameters
        where   parameter='NLS_CHARACTERSET';

        kvk_data_w := replace(ds_conteudo_kvk_p,' ','');
        kvk_data_length_w := to_number(substr(kvk_data_w,3,2),'xx');
        kvk_header_w := 2;

        if kvk_data_length_w > 127 then
           kvk_header_w := 3;
        end if;

        ds_string_hexa_w := convert(utl_raw.cast_to_varchar2(replace(ds_conteudo_kvk_p,' ','')), ds_charset_base_w, ds_charset_kvk_w);

        lista_w := obter_lista_string(ds_conteudo_kvk_p, ' ');

        for i in lista_w.first..lista_w.last loop
        begin
            if (i > kvk_header_w) then --Ignora o Header
				if (lista_w(i) = nr_id_p) then
					pos_inicial_w := i + 2;
					qt_tam_w := to_number(lista_w(i + 1),'xx');
					exit;
				end if;
			end if;
			end;
		end loop;

		if (pos_inicial_w > 0) then
			select	substr(ds_string_hexa_w, pos_inicial_w, qt_tam_w)
			into STRICT	ds_retorno_w
			;
		end if;
	exception
	when others then
		ds_retorno_w := null;
	end;

	return;

	end;
	--################################################
	procedure proc_address(
			ds_endereco_orig_p	in varchar2,
			ds_endereco_p	out varchar2,
			nr_endereco_p	out varchar2) is

	endereco_vet_w	dbms_sql.varchar2_table;
	ds_endereco_w	varchar2(255);
	nr_endereco_w	varchar2(255);
	i   integer;

	begin
	endereco_vet_w := obter_lista_string(ds_endereco_orig_p, ' ');

	for i in 1..(endereco_vet_w.count) loop
		begin
		if (i > 1) and (endereco_vet_w.count-1 = i) and (somente_numero(endereco_vet_w(i)) > 0) and
			((somente_numero(endereco_vet_w(i+1)) = 0) or
			((somente_numero(endereco_vet_w(i+1)) > 0) and (length(somente_numero(endereco_vet_w(i+1))) <> length(endereco_vet_w(i+1))))) then
			nr_endereco_w   :=  endereco_vet_w(i) || ' ' || endereco_vet_w(i+1);
			exit;
		elsif (i > 1) and (endereco_vet_w.count = i) and (somente_numero(endereco_vet_w(i)) > 0) then
			nr_endereco_w   :=  endereco_vet_w(i);
		else
			ds_endereco_w   :=  trim(both ds_endereco_w || ' ' || endereco_vet_w(i));
		end if;
		end;
	end loop;

	ds_endereco_p	:=	ds_endereco_w;
	nr_endereco_p	:=	nr_endereco_w;
	end;

begin

begin
select	nextval('pessoa_fisica_egk_seq')
into STRICT	pessoa_fisica_egk_w.nr_sequencia
;

pessoa_fisica_egk_w.dt_atualizacao			:= clock_timestamp();
pessoa_fisica_egk_w.nm_usuario				:= nm_usuario_p;
pessoa_fisica_egk_w.dt_atualizacao_nrec			:= clock_timestamp();
pessoa_fisica_egk_w.nm_usuario_nrec			:= nm_usuario_p;

if (ds_conteudo_kvk_p IS NOT NULL AND ds_conteudo_kvk_p::text <> '') then

    pessoa_fisica_egk_w.ie_tipo_cartao := 2;

	pessoa_fisica_egk_w.versicherten_id		:= get_hexa_as_string('82');
	pessoa_fisica_egk_w.geburtsdatum		:= to_date(get_hexa_as_string('88'),'ddmmyyyy');
	pessoa_fisica_egk_w.vorname			:= get_hexa_as_string('85');
	pessoa_fisica_egk_w.nachname			:= get_hexa_as_string('87');
	pessoa_fisica_egk_w.titel			:= get_hexa_as_string('84');
	pessoa_fisica_egk_w.postleitzahl_sa		:= get_hexa_as_string('8B');
	pessoa_fisica_egk_w.ort_sa			:= get_hexa_as_string('8C');
	pessoa_fisica_egk_w.versichertenstatus_kvk	:= get_hexa_as_string('83');
	pessoa_fisica_egk_w.statuserganzung_kvk		:= get_hexa_as_string('90');

	-- Tratar nome da rua e numero da casa. Exemplo: "An der hohen Weide 12 D", Rua: "An der hohen Weide", Numero: "12 D"
	proc_address(get_hexa_as_string('89'), pessoa_fisica_egk_w.strasse_sa, pessoa_fisica_egk_w.hausnummer_sa);

	pessoa_fisica_egk_w.wohnsitzlaendercode_sa	:= coalesce(get_hexa_as_string('8A'),'D');
	pessoa_fisica_egk_w.zusatzinfos_wop		:= ltrim(get_hexa_as_string('8F'),'0');
	pessoa_fisica_egk_w.versichertenart		:= substr(get_hexa_as_string('83'),1,1);
	pessoa_fisica_egk_w.versicherungsschutz_beginn := to_date(get_hexa_as_string('88'),'ddmmyyyy');

	begin
		pessoa_fisica_egk_w.gueltig_bis := last_day(to_date(get_hexa_as_string('8D'),'mmyy'));
	exception
	when others then
		pessoa_fisica_egk_w.gueltig_bis := null;
	end;
	pessoa_fisica_egk_w.versicherungsschutz_ende	:= pessoa_fisica_egk_w.gueltig_bis;

	if (pessoa_fisica_egk_w.versichertenart = '0') then
		pessoa_fisica_egk_w.versichertenart := null;
	end if;

	if (coalesce(get_hexa_as_string('81'),'0000000') <> '0000000') then
		pessoa_fisica_egk_w.kostentraeger_kennung	:= get_hexa_as_string('81');
		pessoa_fisica_egk_w.kostentraeger_name		:= get_hexa_as_string('80');
		pessoa_fisica_egk_w.abrechnender_kennung	:= pessoa_fisica_egk_w.kostentraeger_kennung;
		pessoa_fisica_egk_w.abrechnender_name		:= pessoa_fisica_egk_w.kostentraeger_name;

		ie_check_gkv_w := 'S';

	elsif (somente_numero(get_hexa_as_string('80')) > 0) then --Em alguns casos o codigo do convenio vem juntamente com a descricao, igual exemplo "Deutscher Ring K 4013293"
		pessoa_fisica_egk_w.kostentraeger_kennung	:= somente_numero(get_hexa_as_string('80'));
		pessoa_fisica_egk_w.kostentraeger_name		:= replace(get_hexa_as_string('80'), pessoa_fisica_egk_w.kostentraeger_kennung, null);
		pessoa_fisica_egk_w.abrechnender_kennung	:= pessoa_fisica_egk_w.kostentraeger_kennung;
		pessoa_fisica_egk_w.abrechnender_name		:= pessoa_fisica_egk_w.kostentraeger_name;
	end if;

	begin
        select  substr(pessoa_fisica_egk_w.kostentraeger_kennung, 0, 4)
        into STRICT    cd_cnes_parcial_w
;

        kvk_cnes_prefix := '16';

       if (ie_check_gkv_w = 'S')then
            kvk_cnes_prefix := '';
            cd_cnes_parcial_w := pessoa_fisica_egk_w.kostentraeger_kennung;
        end if;

        if (cd_cnes_parcial_w IS NOT NULL AND cd_cnes_parcial_w::text <> '')then
            select  max(pj.cd_cnes)
            into STRICT    pessoa_fisica_egk_w.kostentraeger_kennung -- esse valor e sobrescrevido no select 1069872 - verificar uma possivel refatoracao
            from    convenio a,
                    pessoa_juridica pj
            where   a.cd_cgc in (	SELECT  b.cd_cgc
                                    from (select x.cd_cgc,
                                            length(x.ds_razao_social)
                                        from    pessoa_juridica x,
                                            convenio y
                                        where   x.cd_cgc                    = y.cd_cgc
										and 	x.ie_situacao				= 'A'
                                        and     y.ie_situacao               = 'A'
                                        and     x.cd_cnes like(kvk_cnes_prefix ||'%'|| cd_cnes_parcial_w ||'%')
                                        order by   length(x.ds_razao_social) asc) b LIMIT 1)
            and pj.cd_cgc = a.cd_cgc
			and pj.ie_situacao = 'A';

            if (coalesce(pessoa_fisica_egk_w.kostentraeger_kennung::text, '') = '')then
                pessoa_fisica_egk_w.kostentraeger_kennung := get_hexa_as_string('81');
                pessoa_fisica_egk_w.abrechnender_kennung := pessoa_fisica_egk_w.kostentraeger_kennung;
            else
                pessoa_fisica_egk_w.abrechnender_kennung := pessoa_fisica_egk_w.kostentraeger_kennung;
            end if;

        end if;
    end;

	/*pessoa_fisica_egk_w.versicherungsschutz_beginn	:= get_date(c02_w.versicherungsschutz_beginn, 0, 0, 1);
	pessoa_fisica_egk_w.versicherungsschutz_ende	:= get_date(c02_w.versicherungsschutz_ende, 23, 59, 59);
	pessoa_fisica_egk_w.abrechnender_laendercode	:= c02_w.abrechnender_laendercode;
	pessoa_fisica_egk_w.kostentraeger_laendercode	:= c02_w.kostentraeger_laendercode;
	pessoa_fisica_egk_w.zuzahlungsstatus		:= c02_w.zuzahlungsstatus;
	pessoa_fisica_egk_w.gueltig_bis			:= c02_w.gueltig_bis;
	pessoa_fisica_egk_w.geschlecht			:= c01_w.geschlecht;
	pessoa_fisica_egk_w.vorsatzwort			:= c01_w.vorsatzwort;
	pessoa_fisica_egk_w.namenszusatz		:= c01_w.namenszusatz;
	pessoa_fisica_egk_w.anschriftenzusatz_sa	:= c01_w.anschriftenzusatz_sa;
	pessoa_fisica_egk_w.postleitzahl_pa		:= c01_w.postleitzahl_pa;
	pessoa_fisica_egk_w.ort_pa			:= c01_w.ort_pa;
	pessoa_fisica_egk_w.postfach_pa			:= c01_w.postfach_pa;
	pessoa_fisica_egk_w.wohnsitzlaendercode_pa	:= c01_w.wohnsitzlaendercode_pa;
	pessoa_fisica_egk_w.besondere_personengruppe	:= c02_w.besondere_personengruppe;
	pessoa_fisica_egk_w.dmp_kennzeichnung		:= c02_w.dmp_kennzeichnung;
	pessoa_fisica_egk_w.ruhen_beginn		:= get_date(c02_w.ruhen_beginn);
	pessoa_fisica_egk_w.ruhen_ende			:= get_date(c02_w.ruhen_ende);
	pessoa_fisica_egk_w.ruhen_artdesruhens		:= c02_w.ruhen_artdesruhens;
	pessoa_fisica_egk_w.selektiv_aerztlich		:= c02_w.selektiv_aerztlich;
	pessoa_fisica_egk_w.selektiv_zahnaerztlich	:= c02_w.selektiv_zahnaerztlich;
	pessoa_fisica_egk_w.selektiv_art		:= c02_w.selektiv_art;
	pessoa_fisica_egk_w.stationaererbereich		:= c02_w.stationaererbereich;
	pessoa_fisica_egk_w.zahnaerztlicheversorgung	:= c02_w.zahnaerztlicheversorgung;
	pessoa_fisica_egk_w.veranlassteleistungen	:= c02_w.veranlassteleistungen;
	pessoa_fisica_egk_w.aerztlicheversorgung	:= c02_w.aerztlicheversorgung*/
end if;

if (ds_xml_pessoa_p IS NOT NULL AND ds_xml_pessoa_p::text <> '') then

    pessoa_fisica_egk_w.ie_tipo_cartao := 1;

	--Tratamento necessario para conseguir abrir o XML
	ds_name_space_w	:= substr(substr(ds_xml_pessoa_p,position('xmlns:' in ds_xml_pessoa_p)+6,4000),1,position('=' in substr(ds_xml_pessoa_p,position('xmlns:' in ds_xml_pessoa_p)+6,4000))-1) || ':';

	ds_xml_pessoa_w	:= replace(ds_xml_pessoa_p,ds_name_space_w,''); --Remove namespace
	ds_xml_pessoa_w	:= substr(ds_xml_pessoa_w,position('<Versicherter>' in ds_xml_pessoa_w),length(ds_xml_pessoa_w)); --Remove cabecalho
	ds_xml_pessoa_w	:= replace(ds_xml_pessoa_w,'</UC_PersoenlicheVersichertendatenXML>','');--Remove rodape
	xml_pessoa_w 	:= xmlparse(DOCUMENT, convert_from(, 'utf-8'));

	open C01;
	loop
	fetch C01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

		pessoa_fisica_egk_w.versicherten_id			:= c01_w.versicherten_id;
		pessoa_fisica_egk_w.geburtsdatum			:= get_date(c01_w.geburtsdatum);
		pessoa_fisica_egk_w.vorname				:= c01_w.vorname;
		pessoa_fisica_egk_w.nachname				:= c01_w.nachname;
		pessoa_fisica_egk_w.geschlecht				:= c01_w.geschlecht;
		pessoa_fisica_egk_w.vorsatzwort				:= c01_w.vorsatzwort;
		pessoa_fisica_egk_w.namenszusatz			:= c01_w.namenszusatz;
		pessoa_fisica_egk_w.titel				:= c01_w.titel;
		pessoa_fisica_egk_w.postleitzahl_sa			:= c01_w.postleitzahl_sa;
		pessoa_fisica_egk_w.ort_sa				:= c01_w.ort_sa;
		pessoa_fisica_egk_w.strasse_sa				:= c01_w.strasse_sa;
		pessoa_fisica_egk_w.hausnummer_sa			:= c01_w.hausnummer_sa;
		pessoa_fisica_egk_w.anschriftenzusatz_sa		:= c01_w.anschriftenzusatz_sa;
		pessoa_fisica_egk_w.wohnsitzlaendercode_sa		:= c01_w.wohnsitzlaendercode_sa;
		pessoa_fisica_egk_w.postleitzahl_pa			:= c01_w.postleitzahl_pa;
		pessoa_fisica_egk_w.ort_pa				:= c01_w.ort_pa;
		pessoa_fisica_egk_w.postfach_pa				:= c01_w.postfach_pa;
		pessoa_fisica_egk_w.wohnsitzlaendercode_pa		:= c01_w.wohnsitzlaendercode_pa;

	end loop;
	close C01;
end if;

if (ds_xml_convenio_p IS NOT NULL AND ds_xml_convenio_p::text <> '') then
	pessoa_fisica_egk_w.ie_tipo_cartao := 1;

	--remove namespace
	ds_xml_convenio_w	:= replace(ds_xml_convenio_p, chr(92) || chr(34),chr(34));
	ds_xml_convenio_2_w	:= ds_xml_convenio_w;
	ds_xml_convenio_w	:= replace(ds_xml_convenio_w,'vsda:',''); --Remove namespace
	ds_xml_convenio_w	:= substr(ds_xml_convenio_w,position('<UC_AllgemeineVersicherungsdatenXML' in ds_xml_convenio_w),4000);
	ds_xml_convenio_w	:= substr(ds_xml_convenio_w,1,position('</UC_AllgemeineVersicherungsdatenXML>' in ds_xml_convenio_w) + 36);
	ds_xml_aux_w 		:= substr(ds_xml_convenio_w,position('<UC_AllgemeineVersicherungsdatenXML' in ds_xml_convenio_w)+35,4000);
	ds_xml_convenio_w	:= replace(ds_xml_convenio_w, substr(ds_xml_aux_w,1, position('>' in ds_xml_aux_w)-1), '');

	--Tratamento para conseguir ler o XML
	ds_xml_convenio_w	:= substr(ds_xml_convenio_w,position('<Versicherter>' in ds_xml_convenio_w),length(ds_xml_convenio_w)); --Remove cabecalho
	ds_xml_convenio_w	:= replace(ds_xml_convenio_w,'</UC_AllgemeineVersicherungsdatenXML>','');--Remove rodape
	xml_convenio_w 	:= xmlparse(DOCUMENT, convert_from(, 'utf-8'));

	open C02;
	loop
	fetch C02 into
		c02_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */

		pessoa_fisica_egk_w.versicherungsschutz_beginn	:= get_date(c02_w.versicherungsschutz_beginn, 0, 0, 1);
		pessoa_fisica_egk_w.versicherungsschutz_ende	:= get_date(c02_w.versicherungsschutz_ende, 23, 59, 59);
		pessoa_fisica_egk_w.kostentraeger_kennung	:= c02_w.kostentraeger_kennung;
		pessoa_fisica_egk_w.kostentraeger_laendercode	:= c02_w.kostentraeger_laendercode;
		pessoa_fisica_egk_w.kostentraeger_name		:= c02_w.kostentraeger_name;
		pessoa_fisica_egk_w.abrechnender_kennung	:= c02_w.abrechnender_kennung;
		pessoa_fisica_egk_w.abrechnender_laendercode	:= c02_w.abrechnender_laendercode;
		pessoa_fisica_egk_w.abrechnender_name		:= c02_w.abrechnender_name;
		pessoa_fisica_egk_w.besondere_personengruppe	:= c02_w.besondere_personengruppe;
		pessoa_fisica_egk_w.dmp_kennzeichnung		:= c02_w.dmp_kennzeichnung;
		pessoa_fisica_egk_w.versichertenart		:= c02_w.versichertenart;
		pessoa_fisica_egk_w.zuzahlungsstatus		:= c02_w.zuzahlungsstatus;
		pessoa_fisica_egk_w.gueltig_bis			:= c02_w.gueltig_bis;
		pessoa_fisica_egk_w.zusatzinfos_wop		:= c02_w.zusatzinfos_wop;
		pessoa_fisica_egk_w.ruhen_beginn		:= get_date(c02_w.ruhen_beginn);
		pessoa_fisica_egk_w.ruhen_ende			:= get_date(c02_w.ruhen_ende);
		pessoa_fisica_egk_w.ruhen_artdesruhens		:= c02_w.ruhen_artdesruhens;
		pessoa_fisica_egk_w.selektiv_aerztlich		:= c02_w.selektiv_aerztlich;
		pessoa_fisica_egk_w.selektiv_zahnaerztlich	:= c02_w.selektiv_zahnaerztlich;
		pessoa_fisica_egk_w.selektiv_art		:= c02_w.selektiv_art;
		pessoa_fisica_egk_w.stationaererbereich		:= c02_w.stationaererbereich;
		pessoa_fisica_egk_w.zahnaerztlicheversorgung	:= c02_w.zahnaerztlicheversorgung;
		pessoa_fisica_egk_w.veranlassteleistungen	:= c02_w.veranlassteleistungen;
		pessoa_fisica_egk_w.aerztlicheversorgung	:= c02_w.aerztlicheversorgung;

	end loop;
	close C02;

	if (position('UC_GeschuetzteVersichertendatenXML' in ds_xml_convenio_2_w) > 0) then

		--Tratamento para conseguir ler o XML
		ds_xml_convenio_2_w	:= replace(ds_xml_convenio_2_w,'vsdg:',''); --Remove namespace
		ds_xml_convenio_2_w	:= substr(ds_xml_convenio_2_w,position('<UC_GeschuetzteVersichertendatenXML' in ds_xml_convenio_2_w),position('</UC_GeschuetzteVersichertendatenXML>' in ds_xml_convenio_2_w) + 37);

		ds_xml_aux_w := substr(ds_xml_convenio_2_w,position('<UC_GeschuetzteVersichertendatenXML' in ds_xml_convenio_2_w)+35,4000);
		ds_xml_convenio_2_w	:= replace(ds_xml_convenio_2_w, substr(ds_xml_aux_w,1, position('>' in ds_xml_aux_w)-1), '');
		xml_convenio_w 	:= xmlparse(DOCUMENT, convert_from(, 'utf-8'));

		open C03;
		loop
		fetch C03 into
			c03_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */

			pessoa_fisica_egk_w.zuzahlungsstatus		:= c03_w.zuzahlungsstatus;
			pessoa_fisica_egk_w.gueltig_bis			:= get_date(c03_w.gueltig_bis);
			pessoa_fisica_egk_w.besondere_personengruppe	:= c03_w.besondere_personengruppe;
			pessoa_fisica_egk_w.dmp_kennzeichnung		:= c03_w.dmp_kennzeichnung;
			pessoa_fisica_egk_w.selektiv_aerztlich		:= c03_w.selektiv_aerztlich;
			pessoa_fisica_egk_w.selektiv_zahnaerztlich	:= c03_w.selektiv_zahnaerztlich;
			pessoa_fisica_egk_w.selektiv_art		:= c03_w.selektiv_art;
			pessoa_fisica_egk_w.aerztlicheversorgung	:= c03_w.aerztlicheversorgung;

		end loop;
		close C03;
	end if;

end if;

--Exclui os registros ja lidos da mesma pessoa, que ainda nao esta vinculado a uma PF do Tasy
delete 	from pessoa_fisica_egk
where	coalesce(cd_pessoa_fisica::text, '') = ''
and	nm_usuario		= nm_usuario_p
and	versicherten_id		= pessoa_fisica_egk_w.versicherten_id
and	geburtsdatum		= pessoa_fisica_egk_w.geburtsdatum
and	geschlecht		= pessoa_fisica_egk_w.geschlecht;

pessoa_fisica_egk_w.ds_xml_pessoa	:= ds_xml_pessoa_p;
pessoa_fisica_egk_w.ds_xml_convenio	:= ds_xml_convenio_p;
pessoa_fisica_egk_w.ds_conteudo_kvk	:= ds_conteudo_kvk_p;
pessoa_fisica_egk_w.ds_xml_certificado := ds_xml_certificado_p;

insert into pessoa_fisica_egk values (pessoa_fisica_egk_w.*);

nr_sequencia_p	:= pessoa_fisica_egk_w.nr_sequencia;

commit;

exception
when others then
	nr_sequencia_p	:= null;
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE importar_dados_egk ((ds_xml_pessoa_p text, ds_xml_convenio_p text, nm_usuario_p text, nr_sequencia_p out bigint, ds_conteudo_kvk_p text default null, ds_xml_certificado_p text default null) is pessoa_fisica_egk_w pessoa_fisica_egk) FROM PUBLIC;

