-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_analise_consistir_item ( nr_seq_analise_p bigint, ie_acao_p text, nr_seq_grupo_atual_p bigint, nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Esse procedure foi criada com intuito de consistir, valorizar e gerar conta de participante
apenas para um ?nico item.
Para tratar na an?lise as situa??es de modifica??o, inser??o e substitui??o de item
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicion?rio [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relat?rios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de aten??o:

N?o tratar de forma alguma outros itens nessa rotina!! N?o chamar rotinas que executam coisas
para a conta inteira. Essa rotina precisa ter performance excelente.

IE_ACAO_P
'I' - Inclus?o de item
'M' - Modifica??o de item
'S' - Substitui??o de item
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_senha_externa_ww		varchar(255);
ds_conta_gerada_w		varchar(255);
cd_guia_w			varchar(30);
cd_guia_referencia_w		varchar(30);
cd_guia_conta_w			varchar(30);
ie_tipo_segurado_w		varchar(10);
ie_tipo_conta_w			varchar(10);
ie_utilizar_regra_mat_w		varchar(10);
ie_tipo_guia_w			varchar(3);
ie_origem_conta_w		varchar(3);
ie_regime_internacao_w		varchar(1);
ie_carater_internacao_w		varchar(1);
qt_regra_abert_w		bigint;
nr_seq_tipo_acomodacao_w	bigint;
nr_seq_protocolo_w		bigint;
nr_seq_segurado_w		bigint;
nr_seq_tipo_atendimento_w	bigint;
nr_seq_saida_spsadt_w		bigint;
nr_seq_fatura_w			bigint;
nr_seq_conta_proc_w		bigint;
dt_atendimento_referencia_w			timestamp;
ie_tipo_despesa_w		varchar(1);
ie_calculo_pacote_w		varchar(1);
nr_seq_conta_w			bigint;
nr_seq_log_exec_w		pls_cta_log_exec.nr_sequencia%type;
ie_atual_vl_apres_e_mantem_w	pls_parametros.ie_atualiza_vl_apres_e_mantem%type;
dt_fim_consistencia_w		pls_conta.dt_fim_consistencia%type;
ie_mantem_apres_w		varchar(1) := 'N';

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_tipo_despesa,
		a.nr_seq_conta
	from	pls_conta_proc a
	where	a.nr_sequencia	= nr_seq_conta_proc_p
	and	a.ie_status 	!= 'D'
	
union all

	SELECT	b.nr_sequencia,
		b.ie_tipo_despesa,
		b.nr_seq_conta
	from	pls_conta_proc b
	where	b.nr_seq_agrup_analise	= nr_seq_conta_proc_p
	and	b.nr_sequencia		!= b.nr_seq_agrup_analise
	and	b.ie_status 		!= 'D'
	and	ie_acao_p 		= 'I'
	
union all

	select	b.nr_sequencia,
		b.ie_tipo_despesa,
		b.nr_seq_conta
	from	pls_conta_proc b
	where	b.nr_seq_proc_ref	= nr_seq_conta_proc_p
	and	b.nr_sequencia		!= b.nr_seq_proc_ref
	and	((b.nr_seq_agrup_analise	!= nr_seq_conta_proc_p) or (coalesce(b.nr_seq_agrup_analise::text, '') = ''))
	and	b.ie_status 		!= 'D'
	and	ie_acao_p 		= 'I'
	
union all

	select	b.nr_sequencia,
		b.ie_tipo_despesa,
		b.nr_seq_conta
	from	pls_conta_proc b
	where	b.nr_seq_proc_princ	= nr_seq_conta_proc_p
	and	b.nr_sequencia		!= b.nr_seq_proc_princ
	and	((b.nr_seq_agrup_analise	!= nr_seq_conta_proc_p) or (coalesce(b.nr_seq_agrup_analise::text, '') = ''))
	and	b.ie_status 		!= 'D'
	and	ie_acao_p 		= 'I';
	
BEGIN
select  coalesce(max(ie_calculo_pacote),'P'),
	coalesce(max(ie_atualiza_vl_apres_e_mantem), 'N') ie_atualiza_vl_apres_e_mantem
into STRICT    ie_calculo_pacote_w,
	ie_atual_vl_apres_e_mantem_w
from    pls_parametros
where   cd_estabelecimento      = cd_estabelecimento_p;

update	pls_conta
set	ie_consistir_conta_analise = 'S'
where	nr_seq_analise	= nr_seq_analise_p;

if (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') and (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	/* Obter dados da conta */

	select	cd_guia,
		cd_guia_referencia,
		coalesce(cd_guia_referencia, cd_guia),
		nr_seq_tipo_acomodacao, 
		nr_seq_protocolo,  
		nr_seq_segurado,   
		coalesce(ie_tipo_guia, 'X'), 
		ie_regime_internacao,   
		ie_carater_internacao,  
		nr_seq_tipo_atendimento,
		nr_seq_saida_spsadt,    
		ie_origem_conta,
		nr_seq_fatura,
		cd_senha_externa,
		dt_atendimento_referencia,
		ie_tipo_segurado,
		dt_fim_consistencia
	into STRICT	cd_guia_w,
		cd_guia_referencia_w,
		cd_guia_conta_w,
		nr_seq_tipo_acomodacao_w,    
		nr_seq_protocolo_w,
		nr_seq_segurado_w, 
		ie_tipo_guia_w,    
		ie_regime_internacao_w, 
		ie_carater_internacao_w,
		nr_seq_tipo_atendimento_w,   
		nr_seq_saida_spsadt_w,  
		ie_origem_conta_w,
		nr_seq_fatura_w,
		cd_senha_externa_ww,
		dt_atendimento_referencia_w,
		ie_tipo_segurado_w,
		dt_fim_consistencia_w
	from	pls_conta 
	where	nr_sequencia	= nr_seq_conta_p;
	
	if (ie_tipo_segurado_w IS NOT NULL AND ie_tipo_segurado_w::text <> '') then
		
		/* Se a origem da conta for de A500, ? recebida de outras operadoras */

		if (ie_origem_conta_w = 'A') then
			ie_tipo_conta_w	:= 'I';
		/* Se o tipo de benefici?rio for Usu?rio eventual (Resp. Assumida), Interc?mbio entre OPS cong?neres (Resp. Assumida) ou 
			Interc?mbio entre cooperativas (Resp. Assumida) o tipo de conta ? para ser faturado para outra operadora*/
		elsif (ie_tipo_segurado_w in ('I', 'C', 'T', 'H')) then
			ie_tipo_conta_w	:= 'C';
		else
			ie_tipo_conta_w	:= 'O';
		end if;
	end if;
	
	if (ie_atual_vl_apres_e_mantem_w = 'S' and (dt_fim_consistencia_w IS NOT NULL AND dt_fim_consistencia_w::text <> '')) then
		ie_mantem_apres_w := 'S';
	end if;
	/* Procedimento */

	if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then
		/* 2 - Abrir contas de participantes */

		
		if (ie_acao_p in ('I', 'S')) then
			if (ie_tipo_guia_w in ('4', '5')) then
				select	count(1)
				into STRICT	qt_regra_abert_w
				from	pls_regra_conta_autom	a
				where	a.cd_estabelecimento 	= cd_estabelecimento_p
				and	a.ie_tipo_guia 		= ie_tipo_guia_w;
				
				if (coalesce(qt_regra_abert_w,0) > 0) then
					/*Diego - Diogo - Inserido em lugar da pls_conta_gerar_hi. Toda a verifica??o quanto a necessidade da cria??o das contas j? existe dentro da rotina.*/

					CALL pls_cta_gera_hono_indiv_pck.gera_conta_hono_indiv(  null, null, null,nr_seq_conta_p, null, nm_usuario_p,cd_estabelecimento_p);
				end if;
			end if;
		end if;
		if (ie_acao_p in ('I', 'S','RO')) then
			--regra de lan?amento autom?tico
			CALL pls_lanc_auto_conta_medica(	nr_seq_conta_p,nr_seq_conta_proc_p,null,
							nm_usuario_p,cd_estabelecimento_p, 'N');
		end if;
		for r_c01_w in C01() loop
			begin
			--retirado o tratamento da processos por hora ate consegurmos otimizar o processo

				--Abrir os lan?amentos dos procedimentos conforme as regras por quantidade de execu??o 
				CALL pls_abrir_proc_qtde_proc_valor(null, r_c01_w.nr_sequencia, nm_usuario_p,
								cd_estabelecimento_p);
			
			end;
		end loop;
		--atuakiza o agrupamento da an?lise ? necess?rio ser depois da aplica??o da regra de quantidade de execu??o para que os procedimentos abertos peguem o agrupamento correto
		if (coalesce(ie_acao_p,'X') <> 'RO') then
			CALL pls_atualizar_agrup_analise(nr_seq_conta_p,nm_usuario_p,'CI','S');
		end if;
		/* Abre o procedimento do par?metro e os procedimentos que foram gerados pelo sistema */

		for r_c01_w in C01() loop
			begin
			nr_seq_conta_proc_w	:= r_c01_w.nr_sequencia;
			ie_tipo_despesa_w	:= r_c01_w.ie_tipo_despesa;
			nr_seq_conta_w		:= r_c01_w.nr_seq_conta;
			
			update  pls_conta_proc
			set     vl_unitario_imp                 = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN ie_mantem_apres_w='S' THEN  vl_unitario_imp  ELSE 0 END   ELSE vl_unitario_imp END ,
				vl_procedimento_imp             = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  CASE WHEN ie_mantem_apres_w='S' THEN  vl_procedimento_imp  ELSE 0 END   ELSE vl_procedimento_imp END
			where   nr_sequencia                    = nr_seq_conta_proc_w;	
			
			/* 3 - Valorizar */

			if (coalesce(ie_acao_p,'X') <> 'RO') then
				if (ie_tipo_despesa_w = '1') then /* Atualizar o valor do procedimento */
					CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'N', nm_usuario_p,'S','C',null);
				elsif (ie_tipo_despesa_w in ('2','3')) then /* Atualizar os valores das taxas e di?rias */
					CALL pls_atualiza_valor_servico(nr_seq_conta_proc_w, 'N', nm_usuario_p,'S');
				elsif (ie_tipo_despesa_w = '4') then
					if (ie_calculo_pacote_w    = 'R') then
						CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'N', nm_usuario_p,'S','C',null); /* Atualizar os v*/
					else
						CALL pls_atualiza_valor_pacote(nr_seq_conta_proc_w, 'C', nm_usuario_p, 'S', 'N');/* Atualizar os valores do*/
					end if;
				else
					CALL wheb_mensagem_pck.exibir_mensagem_abort(182981);
				end if;
			end if;
			CALL pls_atualiza_valor_apresentado( null, null, null,
							null, nr_seq_conta_proc_w, cd_estabelecimento_p,
							nm_usuario_p, null);
			/* 4 -  Gerar ocorr?ncias s? pro item */

			CALL pls_obter_regra_valor_conta(nr_seq_conta_w,	nr_seq_conta_proc_w,null,null,nm_usuario_p);
			/* 5- Consistir glosas */

			if (ie_acao_p in ('I', 'S','RO')) then
				CALL pls_consistir_conta_proc(nr_seq_conta_proc_w,cd_estabelecimento_p,'N',nm_usuario_p);
			end if;
			--Gerar combinada
			CALL pls_oc_cta_gerar_combinada(	'CC', 'A', null, null, null, nr_seq_conta_p, nr_seq_conta_proc_w, null, null, '9', null,
							null, null, null, cd_estabelecimento_p, nm_usuario_p);
			/* 6 - Libera??o autom?tica */

			CALL pls_liberar_item_automatic(nr_seq_conta_w,nr_seq_conta_proc_w,null,nm_usuario_p);
			--atualiza os valores liberados/glosados
			CALL pls_atualiza_lib_conta(nr_seq_conta_w, 'A', nm_usuario_p);
			/* 7- Atualizar resumo */

			CALL pls_atualizar_item_resumo(nr_seq_conta_proc_w,'P',nm_usuario_p,'N');
			if (ie_acao_p in ('I', 'S','RO')) then
				CALL pls_gerar_fluxo_audit_item(nr_seq_analise_p, nr_seq_conta_w, nr_seq_conta_proc_w, null, null, nm_usuario_p);
				
				/* Atualizar ID - contas de honorario */

				if (nr_seq_conta_w <> nr_seq_conta_p) then
					CALL pls_analise_atualizar_id_itens(nr_seq_conta_w,nm_usuario_p,cd_estabelecimento_p,'N');
				end if;
			end if;
			end;
		end loop;
	end if;

	/* Material */

	if (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then
		/* Valorizar */

		if (coalesce(ie_acao_p,'X') <> 'RO') then
			CALL pls_atualiza_valor_mat(nr_seq_conta_mat_p,'N',nm_usuario_p,'N',nr_seq_conta_p);
		end if;
		/* Consistir glosas */

		CALL pls_consistir_conta_mat(nr_seq_conta_mat_p,cd_estabelecimento_p,'N',nm_usuario_p,ie_utilizar_regra_mat_w);
		/* Gerar ocorr?ncias s? pro item */


		
		/* Regra valor */

		CALL pls_obter_regra_valor_conta(nr_seq_conta_p, null, nr_seq_conta_mat_p,null,nm_usuario_p);
		
		--Gerar combinada
		CALL pls_oc_cta_gerar_combinada(	'CC', 'A', null, null, null, nr_seq_conta_p, null, nr_seq_conta_mat_p, null, '9', null,
						null, null, null, cd_estabelecimento_p, nm_usuario_p);
		/* Libera??o autom?tica */

		CALL pls_liberar_item_automatic(nr_seq_conta_p,null,nr_seq_conta_mat_p,nm_usuario_p);
		--atualiza os valores liberados/glosados
		CALL pls_atualiza_lib_conta(nr_seq_conta_p, 'A', nm_usuario_p);
		/* Atualizar resumo */

		CALL pls_atualizar_item_resumo(nr_seq_conta_mat_p,'M',nm_usuario_p,'N');
		
		if (ie_acao_p in ('I', 'S','RO')) then
			CALL pls_gerar_fluxo_audit_item(nr_seq_analise_p, nr_seq_conta_p, null, nr_seq_conta_mat_p, null, nm_usuario_p);
		end if;
	end if;
	
	CALL pls_analise_atualizar_id_itens(nr_seq_conta_p,nm_usuario_p,cd_estabelecimento_p,'S');
	
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_consistir_item ( nr_seq_analise_p bigint, ie_acao_p text, nr_seq_grupo_atual_p bigint, nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

