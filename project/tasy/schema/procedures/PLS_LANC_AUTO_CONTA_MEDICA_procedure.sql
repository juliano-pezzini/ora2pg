-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_lanc_auto_conta_medica ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_mat_p pls_conta_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_consistencia_p text) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Efetuar os lancamentos automaticos dos itens de conta medica na consistencia da
mesma. eh utilizada quando o evento a regra de lan?amento for OPS - Contas medicas (Conta).
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relat?rios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de aten??o:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_procedimento_w		pls_conta_proc.cd_procedimento%type	:= null;
cd_procedimento_item_w		pls_conta_proc.cd_procedimento%type;
dt_item_w			pls_conta_proc.dt_procedimento%type;
ie_pagamento_w			pls_regra_lanc_aut_item.ie_pagamento%type;
ie_faturamento_w		pls_regra_lanc_aut_item.ie_faturamento%type;
ie_forma_lancamento_w		pls_regra_lanc_aut_item.ie_forma_lancamento%type;
ie_quantidade_prestador_w	pls_regra_lanc_aut_item.ie_quantidade_prestador%type;
ie_origem_conta_w		pls_conta.ie_origem_conta%type;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
ie_lanc_manual_pos_w		varchar(1);
ie_apenas_pagamento_w		varchar(1);
ie_evento_lanc_conta_w		varchar(3);
ie_excecao_w			varchar(1);
ie_origem_proced_w		pls_conta_proc.ie_origem_proced%type	:= null;
ie_origem_proced_item_w		pls_regra_lanc_aut_item.ie_origem_proced%type;
nr_seq_material_w		pls_conta_mat.nr_seq_material%type	:= null;
nr_seq_regra_w			pls_regra_lanc_automatico.nr_sequencia%type;
nr_seq_material_item_w		pls_regra_lanc_aut_item.nr_seq_material%type;
nr_seq_proc_w			pls_conta_proc.nr_sequencia%type	:= null;
nr_seq_mat_w			pls_conta_mat.nr_sequencia%type	:= null;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_segurado_w		pls_conta.nr_seq_segurado%type;
nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
nr_seq_analise_w		pls_conta.nr_seq_analise%type;
qt_item_princ_w			integer;
qt_lancamento_w			pls_regra_lanc_aut_item.qt_lancamento%type;
qt_lancar_w			integer;
qt_item_w			pls_conta_proc.qt_procedimento_imp%type;
qt_item_gerar_w			pls_conta_proc.qt_procedimento_imp%type;
qt_lancado_w			integer;
qt_permitido_w			integer;
dt_inicio_item_w		pls_conta_proc.dt_inicio_proc%type;
dt_fim_item_w			pls_conta_proc.dt_fim_proc%type;
nr_seq_prestador_prot_w		pls_conta_v.nr_seq_prestador_prot%type;
cd_guia_referencia_w		pls_conta_v.cd_guia_referencia%type;
nr_seq_conta_princ_w		pls_conta.nr_sequencia%type;
qt_diaria_w			integer;
ie_preco_w			pls_plano.ie_preco%type;
nr_seq_conta_protocolo_w	pls_protocolo_conta.nr_sequencia%type;	
ie_tipo_despesa_w		pls_conta_proc.ie_tipo_despesa%type;
nr_seq_regra_cooperado_w	bigint;
ie_ato_cooperado_w		bigint;
nr_seq_prestador_solic_w	pls_conta_v.nr_seq_prestador_solic%type;
cd_medico_solicitante_w		pls_conta_v.cd_medico_solicitante%type;	
cd_medico_exec_w		pls_conta_v.cd_medico_executor%type;
ie_medico_solic_coope_w		varchar(10);
ie_medico_exec_coope_w		varchar(10);
ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;
nr_seq_congenere_w		pls_segurado.nr_seq_congenere%type;
nr_seq_ops_congenere_w		pls_segurado.nr_seq_ops_congenere%type;
ie_prestador_pgto_w		pls_regra_lanc_aut_item.ie_prestador_pgto%type;
nr_seq_congenere_prot_w		pls_protocolo_conta.nr_seq_congenere%type;
dt_item_ref_w			timestamp; -- eh usado Date ao inves do %type, porque vai representar o campo de data do proc e mat
dt_atendimento_ref_w	pls_conta.dt_atendimento_referencia%type;
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
ie_lancar_conta_origem_w	pls_parametros.ie_lancar_conta_origem%type;

/*Regras de lancamento automatico, considera quando evento de lancamento for igual ou a opcao ambos estiver marcada
 ie_evento = 6 eh o evento OPS - Contas Medicas(Contas)
 */
C01 CURSOR(	ie_origem_proced_pc		pls_conta_proc.ie_origem_proced%type,
		cd_procedimento_pc		pls_conta_proc.nr_sequencia%type,
		nr_seq_prestador_exec_pc	pls_conta.nr_seq_prestador_exec%type,
		nr_seq_material_pc		pls_conta_proc.nr_sequencia%type,
		ie_evento_lanc_conta_pc		pls_regra_lanc_automatico.ie_evento_lanc_conta%type,
		ie_tipo_guia_pc			pls_conta.ie_tipo_guia%type,
		nr_seq_congenere_pc		pls_segurado.nr_seq_congenere%type,
		nr_seq_ops_congenere_pc		pls_segurado.nr_seq_ops_congenere%type,
		dt_ref_item_pc			timestamp)FOR
	SELECT	a.nr_sequencia
	from	pls_regra_lanc_automatico 	a
	where	a.ie_situacao			= 'A'
	and	a.ie_evento			= 6
	and	((a.ie_origem_proced 		= ie_origem_proced_pc) 		or (coalesce(a.ie_origem_proced::text, '') = ''))
	and	((a.cd_procedimento 		= cd_procedimento_pc) 		or (coalesce(a.cd_procedimento::text, '') = ''))
	and	((a.nr_seq_prestador 		= nr_seq_prestador_exec_pc) 	or (coalesce(a.nr_seq_prestador::text, '') = ''))
	and	((a.nr_seq_material 		= nr_seq_material_pc) 		or (coalesce(a.nr_seq_material::text, '') = ''))
	and	((a.ie_tipo_guia		= ie_tipo_guia_pc)		or (coalesce(a.ie_tipo_guia::text, '') = ''))
	and	((a.nr_seq_cooperativa		= nr_seq_congenere_pc)		or (coalesce(a.nr_seq_cooperativa::text, '') = ''))
	and	((a.nr_seq_ops_congenere	= nr_seq_ops_congenere_pc)	or (coalesce(a.nr_seq_ops_congenere::text, '') = ''))
	and	((a.ie_somente_sem_diaria = 'N') or (a.ie_somente_sem_diaria = 'S' and qt_diaria_w = 0))
	and	((a.ie_evento_lanc_conta = ie_evento_lanc_conta_pc) or (coalesce(a.ie_evento_lanc_conta::text, '') = '') or (a.ie_evento_lanc_conta = 'T'))
	and	dt_ref_item_pc			between trunc(coalesce(a.dt_inicio_vigencia, dt_ref_item_pc), 'dd') and fim_dia(coalesce(a.dt_fim_vigencia, dt_ref_item_pc))
	;
	
	
	
	
--Os itens que podem ser lancados para as regras de lancamento automatico
C02 CURSOR(nr_seq_regra_pc	pls_regra_lanc_automatico.nr_sequencia%type)FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_material,
		coalesce(ie_pagamento, 'S') ie_pagamento,
		coalesce(ie_faturamento, 'S') ie_faturamento,
		coalesce(ie_quantidade_prestador, 'N') ie_quantidade_prestador,
		coalesce(ie_forma_lancamento, 'U') ie_forma_lancamento,
		qt_lancamento,
		coalesce(ie_prestador_pgto, 'E') ie_prestador_pgto
	from	pls_regra_lanc_aut_item
	where	nr_seq_regra	= nr_seq_regra_pc
	and	ie_situacao	= 'A';

BEGIN

select	coalesce(max(ie_lancar_conta_origem), 'N')
into STRICT	ie_lancar_conta_origem_w
from	pls_parametros a
where	a.cd_estabelecimento = cd_estabelecimento_p;


qt_diaria_w := 0;

--Restricao a nivel de conta, pode utilizar o max para tratar um hipotetico caso de no data found
select	max(a.nr_seq_protocolo),
		max(a.ie_tipo_segurado),
		coalesce(max(b.ie_tipo_protocolo),'C')
into STRICT	nr_seq_conta_protocolo_w,
		ie_tipo_segurado_w,
		ie_tipo_protocolo_w
from	pls_conta a,
		pls_protocolo_conta b
where	a.nr_sequencia = nr_seq_conta_p
and 	a.nr_seq_protocolo = b.nr_sequencia;

if (ie_consistencia_p = 'S') then
	ie_evento_lanc_conta_w	:= 'CC';
else
	ie_evento_lanc_conta_w	:= 'DI';
end if;

if (nr_seq_mat_p <> 0) then
	nr_seq_mat_w	:= nr_seq_mat_p;
end if;

if (nr_seq_proc_p <> 0) then
	nr_seq_proc_w	:= nr_seq_proc_p;
end if;

--Obtem infromacoes do procedimento
if (nr_seq_proc_p IS NOT NULL AND nr_seq_proc_p::text <> '') then
	select	max(cd_procedimento),
		max(ie_origem_proced),
		max(qt_procedimento_imp),
		max(dt_procedimento),
		max(dt_inicio_proc),
		max(dt_fim_proc),
		max(dt_procedimento_referencia)
	into STRICT	cd_procedimento_w,
		ie_origem_proced_w,
		qt_item_w,
		dt_item_w,
		dt_inicio_item_w,
		dt_fim_item_w,
		dt_item_ref_w
	from	pls_conta_proc
	where	nr_sequencia	= nr_seq_proc_p;
end if;

--Obtem informacoes do material
if (nr_seq_mat_p IS NOT NULL AND nr_seq_mat_p::text <> '') then
	select	max(nr_seq_material),
		max(qt_material_imp),
		max(dt_atendimento),
		max(dt_inicio_atend),
		max(dt_fim_atend),
		max(dt_atendimento_referencia)
	into STRICT	nr_seq_material_w,
		qt_item_w,
		dt_item_w,
		dt_inicio_item_w,
		dt_fim_item_w,
		dt_item_ref_w
	from	pls_conta_mat
	where	nr_sequencia	= nr_seq_mat_p;
end if;

if (nr_seq_proc_p <> 0) then
	select	sum(qt_procedimento_imp)
	into STRICT	qt_item_gerar_w
	from	pls_conta_proc
	where	nr_seq_conta		= nr_seq_conta_p
	and	cd_procedimento		= cd_procedimento_w
	and	ie_origem_proced	= ie_origem_proced_w;
end if;

if (nr_seq_mat_p <> 0) then
	select	sum(qt_material_imp)
	into STRICT	qt_item_gerar_w
	from	pls_conta_mat
	where	nr_seq_conta	= nr_seq_conta_p
	and	nr_seq_material	= nr_seq_material_w;
end if;

--Obtem informacoes da conta
select	nr_seq_segurado,
	nr_seq_prestador_prot,
	coalesce(nr_seq_prestador_exec,nr_seq_prestador),
	ie_tipo_guia,
	nr_seq_analise,
	ie_origem_conta,
	cd_guia_referencia,
	cd_medico_executor,
	cd_medico_solicitante,
	nr_seq_prestador_solic,
	nr_seq_conta_princ,
	nr_seq_congenere_prot,
	dt_atendimento_inf_dd
into STRICT	nr_seq_segurado_w,
	nr_seq_prestador_prot_w,
	nr_seq_prestador_exec_w,
	ie_tipo_guia_w,
	nr_seq_analise_w,
	ie_origem_conta_w,
	cd_guia_referencia_w,
	cd_medico_exec_w,
	cd_medico_solicitante_w,
	nr_seq_prestador_solic_w,
	nr_seq_conta_princ_w,
	nr_seq_congenere_prot_w,
	dt_atendimento_ref_w
from	pls_conta_v
where	nr_sequencia	= nr_seq_conta_p;

select	count(1)
into STRICT	qt_diaria_w
from	pls_conta_proc
where	ie_tipo_despesa	= '3'
and	nr_seq_conta	= nr_seq_conta_p;

if ( ie_lancar_conta_origem_w = 'S') then
	nr_seq_conta_princ_w := null;	
end if;

if (coalesce(nr_seq_conta_princ_w::text, '') = '') then
	nr_seq_conta_princ_w	:= nr_seq_conta_p;
else							
	select	coalesce(ie_tipo_guia,ie_tipo_guia_w),	
		coalesce(coalesce(nr_seq_prestador_exec,nr_seq_prestador),nr_seq_prestador_exec_w),
		coalesce(nr_seq_prestador_prot,nr_seq_prestador_prot_w),
		coalesce(nr_seq_prestador_solic,nr_seq_prestador_solic_w),
		coalesce(cd_medico_executor,cd_medico_exec_w),
		coalesce(cd_medico_solicitante,cd_medico_solicitante_w)
	into STRICT	ie_tipo_guia_w,
		nr_seq_prestador_exec_w,
		nr_seq_prestador_prot_w,
		nr_seq_prestador_solic_w,
		cd_medico_exec_w,
		cd_medico_solicitante_w
	from	pls_conta_v
	where	nr_sequencia	= nr_seq_conta_princ_w;
end if;

--Se for apenas Faturamento precisa ser verificado o contrato do beneficiario Pre estabelecido nao deve entrar
select	max(b.ie_preco)
into STRICT	ie_preco_w
from	pls_conta a,
	pls_plano b,
	pls_segurado c
where	a.nr_seq_segurado = c.nr_sequencia
and 	a.nr_sequencia 	= nr_seq_conta_p
and	c.nr_seq_plano 	= b.nr_sequencia
and	b.ie_situacao = 'A';

select	max(nr_seq_congenere),
	max(nr_seq_ops_congenere)
into STRICT	nr_seq_congenere_w,
	nr_seq_ops_congenere_w
from	pls_segurado
where	nr_sequencia = nr_seq_segurado_w;


--Na digitacao, nao existe data salva para o item ainda,  entao busca a data de atendimento da conta. 

--Obs: caso for o primeiro item da conta, a conta tambem nao tera data de atendimento ainda, buscando entao Sysdate para verificar vigencia da regra
if (coalesce(dt_item_ref_w::text, '') = '') then
	dt_item_ref_w := dt_atendimento_ref_w;
end if;

for r_C01_w in C01( ie_origem_proced_w, cd_procedimento_w, nr_seq_prestador_exec_w, nr_seq_material_w, ie_evento_lanc_conta_w, ie_tipo_guia_w, nr_seq_congenere_w, nr_seq_ops_congenere_w, coalesce(dt_item_ref_w,clock_timestamp())) loop
		
	nr_seq_regra_w := r_C01_w.nr_sequencia;
	
	if (nr_seq_regra_w	> 0) then
		
		--Verifica se existe excecao para a regra atual
		ie_excecao_w := pls_obter_excecao_lanc_aut(nr_seq_regra_w, ie_origem_conta_w, ie_tipo_segurado_w, nr_seq_congenere_prot_w, ie_excecao_w);
		
		--Se houver excecao correspondente, entao nao deve fazer nada
		if (ie_excecao_w = 'N') then
			
			for r_C02_w in C02(nr_seq_regra_w) loop
												
				if (r_C02_w.ie_prestador_pgto <> 'P') or (ie_evento_lanc_conta_w <> 'DI') then
				
					cd_procedimento_item_w 	:= r_C02_w.cd_procedimento;
					ie_origem_proced_item_w	:= r_C02_w.ie_origem_proced;
					nr_seq_material_item_w 	:= r_C02_w.nr_seq_material;
					ie_pagamento_w		:= r_C02_w.ie_pagamento;
					ie_faturamento_w	:= r_C02_w.ie_faturamento;
					ie_quantidade_prestador_w := r_C02_w.ie_quantidade_prestador;
					ie_forma_lancamento_w	:= r_C02_w.ie_forma_lancamento;
					qt_lancamento_w		:= r_C02_w.qt_lancamento;
					ie_prestador_pgto_w	:= r_C02_w.ie_prestador_pgto;
					
					if (ie_prestador_pgto_w = 'P' and ie_lancar_conta_origem_w = 'N') and (nr_seq_conta_princ_w = nr_seq_conta_p) then						
						if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_conta_princ_w
							from	pls_conta a
							where	nr_seq_conta_referencia = nr_seq_conta_p
							and	exists (	SELECT	1
									from	pls_conta_proc b
									where	b.nr_seq_conta = a.nr_sequencia
									and	b.cd_procedimento = cd_procedimento_w
									and	b.ie_origem_proced = ie_origem_proced_w);
						else
							select	max(nr_sequencia)
							into STRICT	nr_seq_conta_princ_w
							from	pls_conta a
							where	nr_seq_conta_referencia = nr_seq_conta_p;
						end if;
						
						if (nr_seq_conta_princ_w IS NOT NULL AND nr_seq_conta_princ_w::text <> '') then
							select	coalesce(ie_tipo_guia,ie_tipo_guia_w),
								coalesce(coalesce(nr_seq_prestador_exec,nr_seq_prestador),nr_seq_prestador_exec_w),
								coalesce(nr_seq_prestador_prot,nr_seq_prestador_prot_w),
								coalesce(nr_seq_prestador_solic,nr_seq_prestador_solic_w),
								coalesce(cd_medico_executor,cd_medico_exec_w),
								coalesce(cd_medico_solicitante,cd_medico_solicitante_w)
							into STRICT	ie_tipo_guia_w,
								nr_seq_prestador_exec_w,
								nr_seq_prestador_prot_w,
								nr_seq_prestador_solic_w,
								cd_medico_exec_w,
								cd_medico_solicitante_w
							from	pls_conta_v
							where	nr_sequencia	= nr_seq_conta_princ_w;
						else
							nr_seq_conta_princ_w := nr_seq_conta_p;
						end if;
						
					end if;
					
					qt_item_princ_w := 0;
					
					--Evento Consistencia da conta
					if (ie_evento_lanc_conta_w = 'CC') then
						--Verifica se o item ja foi lancado pelo item que esta sendo consistido no momento
						if (cd_procedimento_item_w IS NOT NULL AND cd_procedimento_item_w::text <> '') then
							select	count(1)
							into STRICT	qt_item_princ_w
							from	pls_conta_proc a
							where	a.nr_seq_conta		= nr_seq_conta_princ_w
							and	a.nr_seq_regra_lanc_aut	= nr_seq_regra_w
							and	a.nr_seq_proc_princ	= nr_seq_proc_p
							and	a.cd_procedimento	= cd_procedimento_item_w
							and 	a.ie_origem_proced 	= ie_origem_proced_item_w;
						elsif (nr_seq_material_item_w IS NOT NULL AND nr_seq_material_item_w::text <> '') then
							select	count(1)
							into STRICT	qt_item_princ_w
							from	pls_conta_mat a
							where	a.nr_seq_conta		= nr_seq_conta_princ_w
							and	a.nr_seq_mat_princ	= nr_seq_mat_p
							and	a.nr_seq_material	= nr_seq_material_item_w
							and	a.nr_seq_regra_lanc_aut	= nr_seq_regra_w;
						end if;
					end if;
									
					if (qt_item_princ_w = 0) then
						--Se opcao ie_pagamento no item da regra estiver marcada ou caso

						--nao esteja, porem a opcao ie_faturamento estiver entao prossegue.
						if (ie_pagamento_w = 'S') or
							(ie_pagamento_w = 'N' AND ie_faturamento_w = 'S') then
							ie_apenas_pagamento_w	:= 'N';
							
							if (ie_pagamento_w = 'N') then
								ie_lanc_manual_pos_w	:= 'S';
							else
								ie_lanc_manual_pos_w	:= 'N';
								
								if (ie_faturamento_w = 'N') then
									ie_apenas_pagamento_w	:= 'S';
								end if;
							end if;
							
							if (cd_procedimento_item_w IS NOT NULL AND cd_procedimento_item_w::text <> '') then
								--Forma de lancamento 'U' refere-se a adicionar ao novo item, a quantidade informada em qt_lancamento

								-- uma unica vez, independete da quantidade apresentada no item responsavel pelo lancamento
								if (ie_forma_lancamento_w = 'U') then
								
									if (coalesce(nr_seq_analise_w::text, '') = '') then
										select	sum(qt_procedimento_imp)
										into STRICT	qt_lancado_w
										from	pls_conta_proc_v
										where	nr_seq_conta		= nr_seq_conta_princ_w
										and	cd_procedimento		= cd_procedimento_item_w
										and	ie_origem_proced	= ie_origem_proced_item_w;
									else
										select	sum(qt_procedimento_imp)
										into STRICT	qt_lancado_w
										from	pls_conta_proc_v
										where	nr_seq_analise		= nr_seq_analise_w
										and	cd_procedimento		= cd_procedimento_item_w
										and	ie_origem_proced	= ie_origem_proced_item_w;
									end if;
									
									if (coalesce(qt_lancado_w,0)	= 0) then
										qt_lancar_w	:= coalesce(qt_lancamento_w, 1);
									end if;
								--Adicionar a quantidade informada em qt_lancamento para cada quantidade do item apresentado,

								--considerando a quantidade apresentada do item responsavel pelo lancamento do novo item
								elsif (ie_forma_lancamento_w = 'M') then
									--N?o considerar quantidade j? lan?ada para o prestador
									if (ie_quantidade_prestador_w = 'N') then
										qt_lancar_w	:= qt_item_w * coalesce(qt_lancamento_w, 1);
										
									--Considera se ja tem alguma quantidade lan?ada deste item que sera lancado
									else
										if (coalesce(nr_seq_analise_w::text, '') = '') then
											select	sum(qt_procedimento_imp)
											into STRICT	qt_lancado_w
											from	pls_conta_proc_v
											where	nr_seq_conta		= nr_seq_conta_princ_w
											and	cd_procedimento		= cd_procedimento_item_w
											and	ie_origem_proced	= ie_origem_proced_item_w;
										else
											select	sum(qt_procedimento_imp)
											into STRICT	qt_lancado_w
											from	pls_conta_proc_v
											where	nr_seq_analise		= nr_seq_analise_w
											and	cd_procedimento		= cd_procedimento_item_w
											and	ie_origem_proced	= ie_origem_proced_item_w;
										end if;
									
										qt_lancar_w	:= qt_item_w * coalesce(qt_lancamento_w, 1);
										
										/*Considera a quantidade presente na conta, do item que gerou o lancamento deste novo item
										   e multiplica pelo qt_lancamento do item da regra para que na sequencia seja subtraida
										  a quantidade desde item a ser lancado, que porventura ja tenha sido lancada na conta.
										  Con isso, chega-se a quantidade que podera ser lancada na conta*/
									
										qt_permitido_w	:= (qt_item_gerar_w * coalesce(qt_lancamento_w, 1)) - coalesce(qt_lancado_w,0);
										--Se o calculo para chegar a quantidade que pode ser lancada resultar em zero ou menos, entao

										--qt_lancar recebera esse valor para que nao seja lancado esse item.
										if (qt_permitido_w = 0) or
											((qt_permitido_w - qt_lancar_w) < 0) then
											qt_lancar_w	:= qt_permitido_w;
										end if;
									end if;
								end if;
														
								if (qt_lancar_w > 0) and
									not ((ie_preco_w = '1') and (ie_faturamento_w = 'S') and (ie_pagamento_w = 'N')) then -- Quando preco ? pre estabelecido nao deve ser lancado
									select	nextval('pls_conta_proc_seq')
									into STRICT	nr_seq_conta_proc_w
									;
									
									insert	into pls_conta_proc(nr_sequencia, dt_atualizacao, nm_usuario,
										dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
										cd_procedimento, ie_origem_proced, qt_procedimento,
										qt_procedimento_imp, ie_status, nr_seq_proc_princ,
										ie_situacao, ie_via_acesso, vl_unitario_imp,
										vl_procedimento_imp, vl_unitario, vl_liberado,
										vl_medico, vl_anestesista, vl_auxiliares,
										vl_custo_operacional, vl_materiais, vl_procedimento,
										vl_glosa, vl_beneficiario, nr_seq_regra_lanc_aut,
										ie_lanc_manual_pos, ie_apenas_pagamento, dt_procedimento,
										dt_inicio_proc,dt_fim_proc)
									values (nr_seq_conta_proc_w, clock_timestamp(), nm_usuario_p,
										clock_timestamp(), nm_usuario_p, nr_seq_conta_princ_w,
										cd_procedimento_item_w, ie_origem_proced_item_w, 0,
										qt_lancar_w, CASE WHEN ie_lanc_manual_pos_w='S' THEN 'M'  ELSE 'U' END , nr_seq_proc_w,
										'D', 'U',0,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0, nr_seq_regra_w,
										ie_lanc_manual_pos_w, ie_apenas_pagamento_w, dt_item_w,
										dt_inicio_item_w,dt_fim_item_w);
									
									CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_proc(nr_seq_conta_proc_w, nm_usuario_p);
									
										
									ie_medico_exec_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_exec_w,dt_item_w,null);

									if (ie_medico_exec_coope_w = 'S') then
										ie_medico_exec_coope_w	:= 'C'; -- Caso ele nao for cooperador a function ja retorna N
									end if;

									ie_medico_solic_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_solicitante_w,dt_item_w,null);

									if (ie_medico_solic_coope_w = 'S') then
										ie_medico_solic_coope_w	:= 'C'; -- Caso ele nao for cooperador a function ja retorna N
									end if;

									select	max(ie_tipo_despesa)
									into STRICT	ie_tipo_despesa_w
									from 	pls_conta_proc
									where 	nr_sequencia = nr_seq_conta_proc_w;
									
									SELECT * FROM pls_obter_tipo_ato_cooperado(	cd_procedimento_item_w, ie_origem_proced_item_w, nr_seq_conta_proc_w, 'P', nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_prot_w, null, ie_medico_solic_coope_w, ie_medico_exec_coope_w, null, ie_tipo_protocolo_w, ie_tipo_guia_w, ie_tipo_despesa_w, null, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;

									update 	pls_conta_proc
									set	nr_seq_regra_cooperado = nr_seq_regra_cooperado_w,
										ie_ato_cooperado = ie_ato_cooperado_w
									where	nr_sequencia = nr_seq_conta_proc_w;
									
									
									
									CALL pls_gravar_log_conta(	nr_seq_conta_princ_w, nr_seq_conta_proc_w, null,
												'Procedimento '||nr_seq_conta_proc_w||' gerado a partir do lan?amento autom?tico! ', nm_usuario_p);
									

								end if;
							end if;
							
							if (nr_seq_material_item_w IS NOT NULL AND nr_seq_material_item_w::text <> '') and (ie_tipo_guia_w	<> 3) then
								
								--Forma de lancamento 'U' refere-se a adicionar ao novo item, a quantidade informada em qt_lancamento

								-- uma unica vez, independete da quantidade apresentada no item responsavel pelo lancamento
								if (ie_forma_lancamento_w = 'U') then
									if (coalesce(nr_seq_analise_w::text, '') = '') then
										select	sum(qt_material_imp)
										into STRICT	qt_lancado_w
										from	pls_conta_mat_v
										where	nr_seq_conta		= nr_seq_conta_princ_w
										and	nr_seq_material		= nr_seq_material_item_w;
									else
										select	sum(qt_material_imp)
										into STRICT	qt_lancado_w
										from	pls_conta_mat_v
										where	nr_seq_analise		= nr_seq_analise_w
										and	nr_seq_material		= nr_seq_material_item_w;
									end if;
									
									if (coalesce(qt_lancado_w,0)	= 0) then
										qt_lancar_w	:= coalesce(qt_lancamento_w, 1);
									end if;
								
								--Adicionar a quantidade informada em qt_lancamento para cada quantidade do item apresentado,

								--considerando a quantidade apresentada do item responsavel pelo lancamento do novo item
								elsif (ie_forma_lancamento_w = 'M') then
								
									--N?o considerar quantidade ja lancada para o prestador
									if (ie_quantidade_prestador_w = 'N') then
										qt_lancar_w	:= qt_item_w * coalesce(qt_lancamento_w, 1);
									--Considera se ja tem alguma quantidade lancada deste item que sera lancado
									else
										if (coalesce(nr_seq_analise_w::text, '') = '') then
											select	sum(qt_material_imp)
											into STRICT	qt_lancado_w
											from	pls_conta_mat_v
											where	nr_seq_conta		= nr_seq_conta_princ_w
											and	nr_seq_material		= nr_seq_material_item_w;
										else
											select	sum(qt_material_imp)
											into STRICT	qt_lancado_w
											from	pls_conta_mat_v
											where	nr_seq_analise		= nr_seq_analise_w
											and	nr_seq_material		= nr_seq_material_item_w;
										end if;
										
										qt_lancar_w	:= qt_item_w * coalesce(qt_lancamento_w, 1);
										
										/*Considera a quantidade presente na conta, do item que gerou o lancamento deste novo item
										   e multiplica pelo qt_lancamento do item da regra para que na sequencia seja subtraida
										  a quantidade desde item a ser lancado, que porventura ja tenha sido lancada na conta.
										  Con isso, chega-se a quantidade que podera ser lancada na conta*/
										qt_permitido_w	:= (qt_item_gerar_w * coalesce(qt_lancamento_w, 1)) - coalesce(qt_lancado_w,0);
										--Se o calculo para chegar a quantidade que pode ser lancada resultar em zero ou menos, entao

										--qt_lancar recebera esse valor para que nao seja lancado esse item.
										if (qt_permitido_w = 0) or
											((qt_permitido_w - qt_lancar_w) < 0) then
											qt_lancar_w	:= qt_permitido_w;
										end if;
									end if;
								end if;
								
								if (qt_lancar_w > 0) and
									not ((ie_preco_w = '1') and (ie_faturamento_w = 'S') and (ie_pagamento_w = 'N')) then -- Quando preco e pre estabelecido nao deve ser lancado
									select	nextval('pls_conta_mat_seq')
									into STRICT	nr_seq_conta_mat_w
									;
									
									insert	into pls_conta_mat(nr_sequencia, dt_atualizacao, nm_usuario,
										dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
										qt_material_imp, qt_material, ie_status,
										nr_seq_material, nr_seq_mat_princ,
										ie_situacao, vl_unitario_imp, vl_material_imp,
										vl_unitario, vl_liberado, vl_saldo,
										vl_material, tx_reducao_acrescimo, nr_nota_fiscal,
										vl_glosa, vl_beneficiario,nr_seq_regra_lanc_aut,
										ie_lanc_manual_pos, ie_apenas_pagamento, dt_atendimento,
										dt_inicio_atend,dt_fim_atend)
									values (nr_seq_conta_mat_w, clock_timestamp(), nm_usuario_p,
										clock_timestamp(), nm_usuario_p, nr_seq_conta_princ_w,
										qt_lancar_w, 0, CASE WHEN ie_lanc_manual_pos_w='S' THEN 'M'  ELSE 'U' END ,
										nr_seq_material_item_w, nr_seq_mat_w,
										'D',0,0,
										0,0,0,
										0,0,0,
										0,0, nr_seq_regra_w,
										ie_lanc_manual_pos_w, ie_apenas_pagamento_w,dt_item_w,
										dt_inicio_item_w,dt_fim_item_w);
									
									CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_mat(nr_seq_conta_mat_w, nm_usuario_p);
										
									ie_medico_exec_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_exec_w,dt_item_w,null);

									if (ie_medico_exec_coope_w = 'S') then
										ie_medico_exec_coope_w	:= 'C'; -- Caso ele nao for cooperador a function ja retorna N
									end if;

									ie_medico_solic_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_solicitante_w,dt_item_w,null);
				
									if (ie_medico_solic_coope_w = 'S') then
										ie_medico_solic_coope_w	:= 'C'; -- Caso ele nao for cooperador a function ja retorna N
									end if;

									select 	max(ie_tipo_despesa)
									into STRICT 	ie_tipo_despesa_w
									from	pls_conta_mat
									where 	nr_sequencia = nr_seq_conta_mat_w;
									
									SELECT * FROM pls_obter_tipo_ato_cooperado(	null, null, nr_seq_conta_mat_w, 'M', nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_prot_w, null, ie_medico_solic_coope_w, ie_medico_exec_coope_w, nr_seq_material_item_w, ie_tipo_protocolo_w, ie_tipo_guia_w, null, ie_tipo_despesa_w, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;	

									update 	pls_conta_mat
									set	nr_seq_regra_cooperado = nr_seq_regra_cooperado_w,
										ie_ato_cooperado = ie_ato_cooperado_w
									where	nr_sequencia = nr_seq_conta_mat_w;	
									
				
									CALL pls_gravar_log_conta(	nr_seq_conta_princ_w, null,nr_seq_conta_mat_w,
												'Material '||nr_seq_conta_mat_w||' gerado a partir do lan?amento autom?tico! ', nm_usuario_p);							
								end if;
							end if;
						end if;
					end if;
				end if;
			end loop;
		end if;
	end if;
end loop;

CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_conta_proc(nr_seq_conta_p, nm_usuario_p);
CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_conta_mat(nr_seq_conta_p, nm_usuario_p);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_lanc_auto_conta_medica ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_mat_p pls_conta_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_consistencia_p text) FROM PUBLIC;

