-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_horarios_livres_cirurgia ( cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, dt_final_p timestamp, qt_minutos_p bigint, hr_inicial_p text, hr_final_p text, ds_restricao_p text, nm_usuario_p text, ie_grava_Livre_p text, ds_horarios_p INOUT text, ie_gerar_retroativo_p text default 'N', cd_departamento_medico_p bigint default null) AS $body$
DECLARE

	
ie_feriado_w    			varchar(0001) := 'N';
ie_dia_semana_w 			smallint;
hr_inicial_w 				timestamp;
hr_final_w 					timestamp;
hr_inicial_intervalo_w 	timestamp;
hr_final_intervalo_w 	timestamp;
hr_atual_w 					timestamp;
nr_minuto_intervalo_w 	smallint;
ie_existe_agenda_w    	varchar(0001);
ie_bloqueio_w         	varchar(0001);
ie_bloqueio_hora_w    	varchar(0001);
ie_bloqueio_dia_w     	varchar(0001);
qt_horario_w          	smallint := 0;
nr_sequencia_w        	bigint := 0;
dt_agenda_w 				timestamp;
ds_horarios_w    			varchar(0255) := '';
Virgula_w        			varchar(1)    := '';
qt_min_duracao_w 			bigint   := 0;
hr_inicio_w 				timestamp;
hr_fim_w 					timestamp;
hr_inicial_par_w 			timestamp;
hr_final_par_w 			timestamp;
cd_turno_w             	smallint := 0;
nr_seq_esp_w           	bigint := 0;
cd_medico_w            	varchar(10);
nr_seq_agenda_medico_w 	bigint;
cd_medico_exec_w       	varchar(10);
qt_min_minimo_w        	bigint;
qt_turno_w             	bigint;
qt_intervalo_w         	bigint;
HR_NADA_W 					timestamp;
ie_sobra_horario_w      varchar(01);
ie_bloqueio_dia_hora_w  varchar(01);
ds_observacao_horario_w varchar(255);
ie_gerar_obs_horario_w  varchar(01) := 'N';
ie_autorizacao_w        varchar(05);
ie_excluir_livres_w     varchar(01) := 'N';
qt_agenda_w             bigint;
HR_QUEBRA_TURNO_W       varchar(05);
hr_quebra_turno_not_w   varchar(05);
qt_min_QUEBRA_TURNO_W   varchar(05);
nr_seq_sala_w           bigint;
ie_anestesista_w        varchar(01) := 'N';
ie_gerar_forcado_w      varchar(01) := 'N';
ie_gerar_autorizacao_livres_w varchar(01) := 'N';
cd_anestesista_w        	varchar(10);
dt_forcado_w 					timestamp;
nr_min_forcado_w      		bigint;
cd_agenda_forcado_w   		bigint;
ie_tipo_atendimento_w 		smallint;
ie_horario_adicional_w 		varchar(1);
NR_SEQ_CLASSIF_AGENDA_w 	bigint;
qt_horario_livre_gerado_w 	bigint;
ie_carater_cirurgia_w   	varchar(1);
cd_convenio_w           	integer;
cd_categoria_w          	varchar(10);
nr_seq_agenda_w         	agenda_paciente.nr_sequencia%type;
nm_paciente_w           	varchar(60);
ie_status_agenda_w      	varchar(1);
ie_gerar_bloqueados_w   	varchar(1);
ie_deletar_bloqueados_w 	varchar(1);
ie_gerar_dia_anterior_w 	varchar(1);
ie_disp_medico_w        	varchar(1);
ie_gerar_observacao_w   	varchar(1);
ie_deletou_w            	boolean := False;
qt_processo_w           	bigint;
ie_tipo_atend_classif_w 	varchar(15) := null;
ie_reserva_completa_w   	varchar(1);
ie_exibe_motivo_bloqueio_w	varchar(1);
ds_observacao_w				varchar(255);
cd_departamento_medico_w	integer := null;
nr_seq_cycle_week_w		schedule_cycle_week.nr_sequencia%type;
ie_semana_w	                agenda_horario.ie_dia_semana%type;
dt_dia_semana_w			agenda_horario.dt_dia_semana%type;
ds_retorno_w			varchar(2);

expressao1_w	varchar(255) := obter_desc_expressao_idioma(774295, null, wheb_usuario_pck.get_nr_seq_idioma);--Geracao dos horarios livres da agenda
C01 CURSOR FOR
	SELECT 	to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(coalesce(hr_Inicial_Intervalo,hr_final),'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(coalesce(hr_final_Intervalo,hr_final),'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		CASE WHEN coalesce(qt_minutos_p,0)=0 THEN  nr_minuto_intervalo  ELSE qt_minutos_p END ,
		a.cd_medico,
		a.nr_seq_medico_exec,
		a.ds_observacao,
		a.nr_seq_sala,
		a.nr_seq_classif_agenda,
		cd_anestesista,
		ie_carater_cirurgia,
		cd_convenio,
		cd_categoria,
		ie_dia_semana,
		dt_dia_semana
	from 	agenda_Horario a
	where 	cd_agenda = coalesce(cd_agenda_p,cd_agenda)
	and	((coalesce(nr_seq_cycle_week_w::text, '') = '' and coalesce(a.nr_seq_schedule_cycle::text, '') = '') or (a.nr_seq_schedule_cycle = nr_seq_cycle_week_w))
	and 	((dt_dia_semana        	= ie_dia_Semana_w) or ((dt_dia_semana  = 9) and (ie_dia_Semana_w not  in (7,1))))
	and 	((nr_seq_esp_w         = 0) or (ie_horario_adicional_w = 'S'))
	and 	((coalesce(dt_final_vigencia::text, '') = '') or (dt_final_vigencia     >= to_date(to_char(dt_agenda_p,'dd/mm/yyyy')	|| to_char(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi')))
	and 	((coalesce(dt_inicio_vigencia::text, '') = '')	or (dt_inicio_vigencia   <= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')))
	and 	hr_inicial                 < hr_final
	and 	coalesce(nr_minuto_intervalo,0) > 0
	and (ie_feriado_w             <> 'S')
	and 	((coalesce(cd_departamento_medico_w::text, '') = '' AND a.cd_agenda = cd_agenda_p) OR (a.cd_departamento_medico = cd_departamento_medico_w))
	and (obter_se_gerar_turno_semana(dt_inicio_vigencia,'Q',dt_agenda_p) = 'S' OR coalesce(ie_dia_semana,0) <> 9 OR pkg_i18n.get_user_locale <> 'de_AT')
	
union
	
	SELECT 	to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(coalesce(hr_Inicial_Intervalo,hr_final),'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(coalesce(hr_final_Intervalo,hr_final),'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		nr_minuto_intervalo,
		a.cd_medico,
		a.nr_seq_medico_exec,
		a.ds_observacao,
		a.nr_seq_sala,
		a.NR_SEQ_CLASSIF_AGENDA,
		null,
		null,
		null,
		null,
		null,
		null
	from 	agenda_Horario_esp a
	where 	dt_agenda                	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)
	and 	hr_inicial                 < hr_final
	and 	coalesce(nr_minuto_intervalo,0) > 0
	and 	cd_agenda                  = cd_agenda_p
	order by 1 desc,2,5;
		
C02 CURSOR FOR
	SELECT	hr_inicio,
				(hr_inicio + (CASE WHEN ie_status_agenda='C' THEN  0  ELSE nr_minuto_duracao / 1440 END )) dt_final
	from 		agenda_paciente
	where 	cd_agenda 				= cd_agenda_p
	and 		hr_inicio between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p)
	and 		hr_inicio         	>= clock_timestamp()
	and 		ie_sobra_horario_w 	= 'S'
	order by 1;
	
C04 CURSOR FOR
	SELECT	a.nr_sequencia
	from 		autor_convenio_evento b,
				agenda_paciente a
	where 	a.nr_sequencia   		= b.nr_seq_agenda
	and 		a.cd_agenda        	= cd_agenda_p
	and 		a.dt_agenda        	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)
	and 		a.ie_status_agenda 	= 'L';
		

BEGIN
	if (obter_nr_seq_locale(wheb_usuario_pck.get_nm_usuario) = 7) then
		cd_departamento_medico_w := cd_departamento_medico_p;
	end if;

	select	count(*)
	into STRICT 		qt_processo_w
	from 		processo_longo_v
	where 	upper(NM_PROCEDURE) = 'OBTER_HORARIOS_LIVRES_CIRURGIA';
	
	if (qt_processo_w         = 0) then
		begin
		CALL gravar_processo_longo(expressao1_w,'OBTER_HORARIOS_LIVRES_CIRURGIA',1);
		select 	coalesce(max(ie_gerar_sobra_horario), 'N'),
					coalesce(max(HR_QUEBRA_TURNO), '12'),
					coalesce(max(qt_min_quebra_turno), '00'),
					max(ie_anestesista),
					coalesce(max(ie_tipo_atendimento), 0),
					max(hr_quebra_turno_not),
					coalesce(max(ie_reserva_completa),'S')
		into STRICT 		ie_sobra_horario_w,
					HR_QUEBRA_TURNO_W,
					qt_min_QUEBRA_TURNO_W,
					ie_anestesista_w,
					ie_tipo_atendimento_w,
					hr_quebra_turno_not_w,
					ie_reserva_completa_w
		from 		agenda
		where 	cd_agenda = cd_agenda_p;
			
		select	coalesce(max(nr_sequencia),0),
					coalesce(max(ie_horario_adicional),'N')
		into STRICT 		nr_seq_esp_w,
					ie_horario_adicional_w
		from 		agenda_horario_esp
		where 	cd_agenda    = cd_agenda_p
		and 		dt_agenda      = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p);
		
		if (coalesce(hr_inicial_p::text, '') = '') then
			hr_inicial_par_w := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p);
		else
			hr_inicial_par_w := to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || hr_inicial_p,'dd/mm/yyyy hh24:mi');
		end if;
		
		if (coalesce(hr_final_p::text, '') = '') then
			hr_final_par_w := ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p);
		else
			hr_final_par_w := to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || hr_final_p,'dd/mm/yyyy hh24:mi');
		end if;
		
		dt_agenda_w := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p);
		begin
		select	'S'
		into STRICT 		ie_feriado_w
		from 		feriado a,
					agenda b
		where 	a.cd_estabelecimento		= cd_estabelecimento_p
		and 		a.dt_feriado           	= dt_agenda_w
		and 		b.cd_agenda            	= cd_agenda_p
		and 		ie_feriado             	= 'N';
		exception
		when others then
			ie_feriado_w := 'N';
		end;
		
		ie_exibe_motivo_bloqueio_w := obter_param_usuario(871, 119, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_exibe_motivo_bloqueio_w);			
		ie_gerar_bloqueados_w := obter_param_usuario(871, 297, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_bloqueados_w);
		ie_deletar_bloqueados_w := obter_param_usuario(871, 369, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_deletar_bloqueados_w);
		ie_gerar_dia_anterior_w := obter_param_usuario(871, 423, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_dia_anterior_w);
		ie_gerar_obs_horario_w := obter_param_usuario(871, 625, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_obs_horario_w);

		ie_dia_semana_w	:= obter_cod_dia_semana(dt_agenda_w);
		if (philips_param_pck.get_nr_seq_idioma = 2) then -- Espanhol  - Mexico(MX)
			if (ie_dia_semana_w = 7) then
				ie_dia_semana_w := 1;
			else
				ie_dia_semana_w	:= ie_dia_semana_w + 1;
			end if;
		end if;

		open C04;
		Loop
			Fetch C04 into nr_seq_agenda_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
			update	autor_convenio_evento
			set 		nr_seq_agenda	 = NULL,
						nm_usuario     = nm_usuario_p,
						dt_atualizacao = clock_timestamp()
			where 	nr_seq_agenda 	= nr_seq_agenda_w;
			commit;
		end loop;
		Close C04;
		
		if (ie_excluir_livres_w = 'N') or (hr_inicial_p IS NOT NULL AND hr_inicial_p::text <> '') then
			begin
			delete
			from	agenda_paciente a
			where a.cd_agenda      		= cd_agenda_p
			and 	a.dt_agenda        	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)
			and 	a.ie_status_agenda 	= 'L';
			commit;
			end;
		else
			begin
			delete
			/*+ INDEX(A AGEPACI_UK) */
			from 	agenda_paciente a
			where cd_agenda      	= cd_agenda_p
			and 	dt_agenda       	>= clock_timestamp()
			and 	ie_status_agenda 	= 'L';
			commit;
			end;
		end if;
		
		if (ie_deletar_bloqueados_w = 'S') and (ie_gerar_bloqueados_w = 'S') then
			delete
			/*+ INDEX(A AGEPACI_UK) */
			from	agenda_paciente a
			where cd_agenda      	= cd_agenda_p
			and 	hr_inicio       	>= clock_timestamp()
			and 	ie_status_agenda 	= 'B'
			and 	nm_paciente      	like '%' || Wheb_mensagem_pck.get_texto(300737) || '%';  --'Horario bloqueado';
			commit;
			ie_deletou_w := True;
		end if;
		
		nr_seq_cycle_week_w := get_current_schedule_week(cd_agenda_p, dt_agenda_p);
		
		
		open C01;
		loop
		fetch C01 into	
			hr_inicial_w,
			hr_final_w,
			hr_inicial_Intervalo_w,
			hr_final_Intervalo_w,
			nr_minuto_Intervalo_w,
			cd_medico_w,
			nr_seq_agenda_medico_w,
			ds_observacao_horario_w,
			nr_seq_sala_w,
			nr_seq_classif_agenda_w,
			cd_anestesista_w,
			ie_carater_cirurgia_w,
			cd_convenio_w,
			cd_categoria_w,
			ie_semana_w,
			dt_dia_semana_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
		
			begin
			ds_retorno_w := 'S';
			
			if ((ie_semana_w IS NOT NULL AND ie_semana_w::text <> '') and ie_semana_w <> 9) then
				ds_retorno_w := obter_se_contem_regra_semana(dt_agenda_p, dt_dia_semana_w, ie_semana_w);
			end if;
			
			if (ds_retorno_w = 'S')then
				if (NR_SEQ_CLASSIF_AGENDA_w = 0) then
					NR_SEQ_CLASSIF_AGENDA_w   := null;
				end if;
				
				if (nr_seq_classif_agenda_w IS NOT NULL AND nr_seq_classif_agenda_w::text <> '') then
					select	max(ie_tipo_atendimento)
					into STRICT 		ie_tipo_atend_classif_w
					from 		agenda_paciente_classif
					where 	nr_sequencia = nr_seq_classif_agenda_w;
				end if;
				
				hr_atual_w       := hr_inicial_w;
				while(hr_atual_w < hr_final_w) and (hr_atual_w < hr_final_par_w)	loop
					BEGIN
					begin
					select
					/*+ INDEX(A AGEPACI_UK) */
								coalesce(max(nr_minuto_duracao),0)
					into STRICT 		qt_min_duracao_w
					from 		agenda_paciente a
					where 	cd_agenda       	= cd_agenda_p
					and 		ie_status_agenda 	<> 'C'
					and 		dt_agenda         = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w)
					and 		to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(hr_inicio,'hh24:mi'),'dd/mm/yyyy hh24:mi') < (hr_atual_w + (nr_minuto_intervalo_w / 1440))
					and 		to_date(to_char(dt_agenda_w,'dd/mm/yyyy')	|| ' ' || to_char(hr_inicio + ((nr_minuto_duracao -1) / 1440),'hh24:mi'), 'dd/mm/yyyy hh24:mi') > hr_atual_w;
					exception
					when others then
						qt_min_duracao_w := 0;
					end;
					
					begin
					/* bloqueio por periodo */

					select	'S',
								substr(coalesce(ds_observacao, obter_valor_dominio(1007, ie_motivo_bloqueio)),1,200) ds_observacao_w
					into STRICT		ie_bloqueio_w,
								ds_observacao_w
					from 		agenda_bloqueio
					where 	cd_agenda = cd_agenda_p
					and 		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final,clock_timestamp()))
					and 		coalesce(ie_dia_semana::text, '') = ''
					and 		coalesce(HR_INICIO_BLOQUEIO::text, '') = ''
					and 		coalesce(HR_FINAL_BLOQUEIO::text, '') = '';
					exception
					when others then
						ie_bloqueio_w := 'N';
					end;
					
					begin
					/* bloqueio por horario */

					select 	'S',
								substr(coalesce(ds_observacao, obter_valor_dominio(1007, ie_motivo_bloqueio)),1,200) ds_observacao_w
					into STRICT 		ie_bloqueio_hora_w,
								ds_observacao_w
					from 		agenda_bloqueio
					where 	cd_agenda = cd_agenda_p
					and 		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final,clock_timestamp()))
					and 		hr_atual_w between to_date(to_char(hr_atual_w,'dd/mm/yyyy')	|| ' ' || to_char(hr_inicio_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
					and 		to_date(to_char(hr_atual_w,'dd/mm/yyyy') ||' ' || to_char(hr_final_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
					and 		coalesce(ie_dia_semana::text, '') = ''
					and 		(HR_INICIO_BLOQUEIO IS NOT NULL AND HR_INICIO_BLOQUEIO::text <> '')
					and 		(HR_FINAL_BLOQUEIO IS NOT NULL AND HR_FINAL_BLOQUEIO::text <> '')
					and 		hr_inicio_bloqueio  < hr_final_bloqueio;
					exception
					when others then
						ie_bloqueio_hora_w := 'N';
					end;
					
					begin
					/* bloqueio por dia */

					select	'S',
								substr(coalesce(ds_observacao, obter_valor_dominio(1007, ie_motivo_bloqueio)),1,200) ds_observacao_w
					into STRICT 		ie_bloqueio_dia_w,
								ds_observacao_w
					from 		agenda_bloqueio
					where 	cd_agenda = cd_agenda_p
					and 		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final,clock_timestamp()))
					and 		((ie_dia_semana     = ie_dia_semana_w)	or (ie_dia_semana       = 9))
					and 		(ie_dia_semana IS NOT NULL AND ie_dia_semana::text <> '')
					and 		coalesce(HR_INICIO_BLOQUEIO::text, '') = ''
					and 		coalesce(HR_FINAL_BLOQUEIO::text, '') = '';
					exception
					when others then
						ie_bloqueio_dia_w := 'N';
					end;
					
					begin
					/* bloqueio dia e hora */

					select 	'S',
								substr(coalesce(ds_observacao, obter_valor_dominio(1007, ie_motivo_bloqueio)),1,200) ds_observacao_w
					into STRICT 		ie_bloqueio_dia_hora_w,
								ds_observacao_w
					from 		agenda_bloqueio
					where 	cd_agenda = cd_agenda_p
					and 		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final,clock_timestamp()))
					and 		hr_atual_w between to_date(to_char(hr_atual_w,'dd/mm/yyyy')	||' '	|| to_char(hr_inicio_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
					and 		to_date(to_char(hr_atual_w,'dd/mm/yyyy') || ' ' || to_char(hr_final_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
					and 		(ie_dia_semana IS NOT NULL AND ie_dia_semana::text <> '')
					and 		((ie_dia_semana     = ie_dia_semana_w)	or (ie_dia_semana       = 9))
					and 		(HR_INICIO_BLOQUEIO IS NOT NULL AND HR_INICIO_BLOQUEIO::text <> '')
					and 		(HR_FINAL_BLOQUEIO IS NOT NULL AND HR_FINAL_BLOQUEIO::text <> '')
					and 		hr_inicio_bloqueio  < hr_final_bloqueio;
					exception
					when others then
						ie_bloqueio_dia_hora_w := 'N';
					end;
					
					if (qt_min_duracao_w = 0) and ((hr_atual_w >= clock_timestamp()) or (ie_gerar_retroativo_p = 'S')) and (hr_atual_w >= hr_inicial_par_w) and (((ie_bloqueio_w = 'N') and (ie_bloqueio_hora_w = 'N') and (ie_bloqueio_dia_w = 'N') and (ie_bloqueio_dia_hora_w = 'N')) or (ie_gerar_bloqueados_w = 'S')) then
						begin
						if (coalesce(length(ds_horarios_w),0) < 249) then
							ds_horarios_w                  := ds_horarios_w || virgula_w || to_char(hr_atual_w,'hh24:mi');
						end if;
						virgula_w      := ',';
						
						if (ie_grava_livre_p = 'S') then
							begin
							cd_turno_w	:= 0;
							if ((to_char(hr_atual_w,'hh24'))::numeric  > somente_numero(HR_QUEBRA_TURNO_W)) or (((to_char(hr_atual_w,'hh24'))::numeric  = somente_numero(HR_QUEBRA_TURNO_W)) and ((to_char(hr_atual_w,'mi'))::numeric  >= somente_numero(qt_min_QUEBRA_TURNO_W))) then
								cd_turno_w	:= 1;
							end if;
							
							if (hr_quebra_turno_not_w IS NOT NULL AND hr_quebra_turno_not_w::text <> '') and ((to_char(hr_atual_w,'hh24'))::numeric  >= somente_numero(hr_quebra_turno_not_w)) then
								cd_turno_w	:= 3;
							end if;
							select 	nextval('agenda_paciente_seq')
							into STRICT 		nr_sequencia_w 
							;
							
							select 	max(cd_medico)
							into STRICT 		cd_medico_exec_w
							from 		agenda_medico
							where 	nr_sequencia = nr_seq_agenda_medico_w;
							
							select 	count(*) /*+ INDEX(A AGEPACI_UK) */							into STRICT 		qt_agenda_w
							from 		agenda_paciente
							where 	cd_agenda       	= cd_agenda_p
							and 		dt_agenda         = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)
							and 		hr_inicio         = hr_atual_w
							and 		ie_status_agenda 	in ('L','N','R');
							
							if (qt_agenda_w = 0) and (coalesce(ie_gerar_dia_anterior_w,'S') = 'S') then
								select	count(*)	/*+ INDEX(A AGEPACI_UK) */								into STRICT 		qt_agenda_w
								from 		agenda_paciente
								where 	cd_agenda 			= cd_agenda_p
								and 		dt_agenda   		= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p -1)
								and 		hr_atual_w 			between hr_inicio and hr_inicio + ((nr_minuto_duracao-1) / 1440)
								and 		ie_status_agenda 	not	in ('L','C','B');
							end if;
							
							if (qt_agenda_w = 0) then
								select 	count(*) /*+ INDEX(A AGEPACI_UK) */								into STRICT 	qt_agenda_w
								from 	agenda_paciente
								where cd_agenda 			= cd_agenda_p
								and 	dt_agenda   		= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)
								and 	hr_atual_w 			between hr_inicio and hr_inicio + ((nr_minuto_duracao-1) / 1440)
								and 	ie_status_agenda 	not in ('L','C','B');
							end if;
								
							nm_paciente_w       := null;
							ie_status_agenda_w  := 'L';
							
							if (ie_bloqueio_w    = 'S') or (ie_bloqueio_hora_w = 'S') or (ie_bloqueio_dia_w = 'S') or (ie_bloqueio_dia_hora_w = 'S') then
								if (ie_exibe_motivo_bloqueio_w = 'S') then
									nm_paciente_w      := substr(Wheb_mensagem_pck.get_texto(300737) || ': '|| ds_observacao_w,1,60); /*'Horario bloqueado || nvl(observacao, descricao do motivo';*/
								else
									nm_paciente_w      := Wheb_mensagem_pck.get_texto(300737); --'Horario bloqueado';
								end if;
								ie_status_agenda_w := 'B';
							end if;
							
							if (ie_status_agenda_w = 'B') and (not ie_deletou_w) then
								delete 	/*+ INDEX(A AGEPACI_UK) */								from 		agenda_paciente a
								where 	cd_agenda      	= cd_agenda_p
								and 		dt_agenda       	>= clock_timestamp()
								and 		hr_inicio       	>= clock_timestamp()
								and 		ie_status_agenda 	= 'B'
								and 		nm_paciente      like '%' || Wheb_mensagem_pck.get_texto(300737) || '%';  --'Horario bloqueado';
								commit;
								ie_deletou_w := True;
							end if;
												
							if (qt_agenda_w = 0) then
								begin
								ie_disp_medico_w := obter_se_medico_disp_agenda(hr_atual_w,nr_minuto_Intervalo_w,cd_medico_w);
								insert	into	agenda_paciente(	cd_agenda,
																				dt_agenda,
																				hr_inicio,
																				nr_minuto_duracao,
																				nm_usuario,
																				dt_atualizacao,
																				ie_status_agenda,
																				ie_ortese_protese,
																				ie_cdi,
																				ie_uti,
																				ie_banco_sangue,
																				ie_serv_especial,
																				ie_leito,
																				ie_anestesia,
																				nr_sequencia,
																				cd_turno,
																				ie_equipamento,
																				ie_autorizacao,
																				ie_video,
																				ie_uc,
																				cd_medico,
																				cd_medico_exec,
																				nm_paciente,
																				ie_biopsia,
																				ie_congelacao,
																				nr_seq_sala,
																				IE_CONSULTA_ANESTESICA,
																				IE_PRE_INTERNACAO,
																				ie_tipo_atendimento,
																				ie_arco_c,
																				NR_SEQ_CLASSIF_AGENDA,
																				cd_anestesista,
																				ie_carater_cirurgia,
																				cd_convenio,
																				cd_categoria,
																				cd_medico_regra,
																				ie_reserva_completa)
								values (
																				cd_agenda_p,
																				ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p),
																				hr_atual_w,
																				nr_minuto_Intervalo_w,
																				nm_usuario_p,
																				clock_timestamp(),
																				ie_status_agenda_w,
																				'N',
																				'N',
																				'N',
																				'N',
																				'N',
																				'S',
																				ie_anestesista_w,
																				nr_sequencia_w,
																				cd_turno_w,
																				'N',
																				NULL,
																				'N',
																				'N',
																				CASE WHEN ie_disp_medico_w='N' THEN null  ELSE cd_medico_w END ,
																				cd_medico_exec_w,
																				substr(coalesce(nm_paciente_w,CASE WHEN ie_gerar_obs_horario_w='S' THEN  substr(ds_observacao_horario_w,1,60)  ELSE null END ),1,60),
																				'N',
																				'N',
																				nr_seq_sala_w,
																				'N',
																				'N',
																				coalesce(ie_tipo_atend_classif_w,CASE WHEN ie_tipo_atendimento_w=0 THEN  null  ELSE ie_tipo_atendimento_w END ),
																				'N',
																				NR_SEQ_CLASSIF_AGENDA_w,
																				cd_anestesista_w,
																				ie_carater_cirurgia_w,
																				cd_convenio_w,
																				cd_categoria_w,
																				cd_medico_w,
																				CASE WHEN ie_reserva_completa_w='U' THEN null  ELSE ie_reserva_completa_w END
																				);
								end;
							end if;
							end;
						end if;
						end;
					end if;
					
					hr_atual_w 		:= hr_atual_w +	(nr_minuto_intervalo_w / 1440);
					qt_horario_w 	:= qt_horario_w + 1;
					
					if (hr_atual_w >= hr_inicial_intervalo_w)	and (hr_atual_w < hr_final_intervalo_w) then
						hr_atual_w     := hr_final_intervalo_w;
					end if;
					
					if (qt_horario_w > 401)	then
						hr_atual_w := hr_final_w + 1;
					end if;
					
					END;
				END LOOP;
			end if;
			end;
		END LOOP;
		CLOSE C01;
		
		hr_nada_w 			:= ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(dt_agenda_p);
		hr_fim_w				:= hr_nada_w;
		qt_min_minimo_w 	:= 0;
		
		open C02;
		loop
		fetch C02 into	
			hr_inicial_w,
			hr_final_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			if (hr_fim_w <> hr_nada_w) and (hr_inicial_w > hr_fim_w) then
				BEGIN
				nr_minuto_intervalo_w     := (hr_inicial_w - hr_fim_w) * 1440;
				hr_atual_w                := hr_fim_w;
				if (nr_minuto_intervalo_w >= qt_min_minimo_w) then
					begin
					select	count(*)
					into STRICT 		qt_turno_w
					from 		agenda_horario
					where 	cd_agenda   	= cd_agenda_p
					and 		dt_dia_semana 	= ie_dia_Semana_w
					and 		hr_atual_w		between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')
					and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
					
					if (qt_turno_w > 0) then
						select	max(cd_medico),
									max(cd_anestesista)
						into STRICT 		cd_medico_w,
									cd_anestesista_w
						from 		agenda_horario
						where 	cd_agenda   	= cd_agenda_p
						and 		dt_dia_semana 	= ie_dia_Semana_w
						and 		hr_atual_w		between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')
						and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
					end if;	
			
					
					select 	count(*)
					into STRICT 		qt_intervalo_w
					from 		agenda_horario
					where 	cd_agenda      = cd_agenda_p
					and 		dt_dia_semana  = ie_dia_Semana_w
					and 		to_char(hr_inicial_intervalo,'hh24') <> '00' and hr_atual_w between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_intervalo,'hh24:mi'),'dd/mm/yyyy hh24:mi')
					and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_intervalo - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
					
					if (qt_turno_w = 0) then
						begin
						select	count(*)
						into STRICT 		qt_turno_w
						from 		agenda_horario
						where 	cd_agenda   	= cd_agenda_p
						and 		dt_dia_semana 	= 9
						and 		hr_atual_w	between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')
						and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
						
						if (qt_turno_w > 0) then
							select	max(cd_medico),
										max(cd_anestesista)
							into STRICT 		cd_medico_w,
										cd_anestesista_w
							from 		agenda_horario
							where 	cd_agenda   	= cd_agenda_p
							and 		dt_dia_semana 	= 9
							and 		hr_atual_w	between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')
							and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
						end if;	
													
						select	count(*)
						into STRICT 		qt_intervalo_w
						from 		agenda_horario
						where 	cd_agenda                           = cd_agenda_p
						and 		dt_dia_semana                         = 9
						and 		to_char(hr_inicial_intervalo,'hh24') <> '00'	
						and 		hr_atual_w between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_intervalo,'hh24:mi'),'dd/mm/yyyy hh24:mi')
						and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_intervalo - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
						end;
					end if;
					
					begin
					/* bloqueio por dia */

					select	'S',
								substr(coalesce(ds_observacao, obter_valor_dominio(1007, ie_motivo_bloqueio)),1,200) ds_observacao_w
					into STRICT 		ie_bloqueio_dia_w,
								ds_observacao_w
					from 		agenda_bloqueio
					where 	cd_agenda = cd_agenda_p
					and 		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final,clock_timestamp()))
					and 		((ie_dia_semana     = ie_dia_semana_w) or (ie_dia_semana       = 9))
					and 		(ie_dia_semana IS NOT NULL AND ie_dia_semana::text <> '')
					and 		coalesce(HR_INICIO_BLOQUEIO::text, '') = ''
					and 		coalesce(HR_FINAL_BLOQUEIO::text, '') = '';
					exception
					when others then
						ie_bloqueio_dia_w := 'N';
					end;
					
					begin
					/* bloqueio dia e hora */

					select	'S',
								substr(coalesce(ds_observacao, obter_valor_dominio(1007, ie_motivo_bloqueio)),1,200) ds_observacao_w
					into STRICT 		ie_bloqueio_dia_hora_w,
								ds_observacao_w
					from 		agenda_bloqueio
					where 	cd_agenda = cd_agenda_p
					and 		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final,clock_timestamp()))
					and 		hr_atual_w between to_date(to_char(hr_atual_w,'dd/mm/yyyy') ||' '|| to_char(hr_inicio_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
					and 		to_date(to_char(hr_atual_w,'dd/mm/yyyy') ||' ' || to_char(hr_final_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
					and 		(ie_dia_semana IS NOT NULL AND ie_dia_semana::text <> '')
					and 		((ie_dia_semana     = ie_dia_semana_w)	or (ie_dia_semana       = 9))
					and 		(HR_INICIO_BLOQUEIO IS NOT NULL AND HR_INICIO_BLOQUEIO::text <> '')
					and 		(HR_FINAL_BLOQUEIO IS NOT NULL AND HR_FINAL_BLOQUEIO::text <> '')
					and 		hr_inicio_bloqueio  < hr_final_bloqueio;
					exception
					when others then
						ie_bloqueio_dia_hora_w := 'N';
					end;
					
					if	((ie_bloqueio_dia_w = 'N' AND ie_bloqueio_dia_hora_w = 'N') or (ie_gerar_bloqueados_w = 'S')) and (qt_turno_w > 0) and (qt_intervalo_w = 0) then
						begin
						cd_turno_w	:= 0;
						if ((to_char(hr_atual_w,'hh24'))::numeric  > somente_numero(HR_QUEBRA_TURNO_W)) or (((to_char(hr_atual_w,'hh24'))::numeric  = somente_numero(HR_QUEBRA_TURNO_W)) and ((to_char(hr_atual_w,'mi'))::numeric  >= somente_numero(qt_min_QUEBRA_TURNO_W))) then
							cd_turno_w	:= 1;
						end if;
						
						if (hr_quebra_turno_not_w IS NOT NULL AND hr_quebra_turno_not_w::text <> '') and ((to_char(hr_atual_w,'hh24'))::numeric  >= somente_numero(hr_quebra_turno_not_w)) then
							cd_turno_w               := 3;
						end if;
						
						select 	nextval('agenda_paciente_seq')
						into STRICT 		nr_sequencia_w 
						;
						
						select 	count(*) /*+ INDEX(A AGEPACI_UK) */						into STRICT 		qt_horario_livre_gerado_w
						from 		agenda_paciente
						where 	cd_agenda       	= cd_agenda_p
						and 		hr_inicio         = hr_atual_w
						and 		ie_status_agenda  = 'L'
						and 		dt_agenda         = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p);
						
						nm_paciente_w        := null;
						ie_status_agenda_w   := 'L';
						
						if (ie_bloqueio_dia_w = 'S') or (ie_bloqueio_dia_hora_w = 'S') then
							if (ie_exibe_motivo_bloqueio_w = 'S') then
								nm_paciente_w       := substr(Wheb_mensagem_pck.get_texto(300737) || ': '|| ds_observacao_w,1,60); /*'Horario bloqueado || descricao do motivo';*/
							else
								nm_paciente_w       := Wheb_mensagem_pck.get_texto(300737); --'Horario bloqueado';
							end if;
							ie_status_agenda_w  := 'B';
						end if;
						
						if (qt_horario_livre_gerado_w = 0) then
							if (ie_status_agenda_w       = 'B') and (not ie_deletou_w) then
								delete	/*+ INDEX(A AGEPACI_UK) */								from 		agenda_paciente a
								where 	cd_agenda			= cd_agenda_p
								and 		hr_inicio       	>= clock_timestamp()
								and 		ie_status_agenda 	= 'B'
								and 		nm_paciente      	like '%' || Wheb_mensagem_pck.get_texto(300737) || '%'; --'Horario bloqueado';
								commit;
								ie_deletou_w := True;
							end if;
							
								
							insert	into agenda_paciente(
																	cd_agenda,
																	dt_agenda,
																	hr_inicio,
																	nr_minuto_duracao,
																	nm_usuario,
																	dt_atualizacao,
																	ie_status_agenda,
																	ie_ortese_protese,
																	ie_cdi,
																	ie_uti,
																	ie_banco_sangue,
																	ie_serv_especial,
																	ie_leito,
																	ie_anestesia,
																	nr_sequencia,
																	cd_turno,
																	ie_equipamento,
																	ie_autorizacao,
																	ie_video,
																	ie_uc,
																	cd_medico,
																	cd_medico_exec,
																	nm_paciente,
																	ie_biopsia,
																	ie_congelacao,
																	IE_CONSULTA_ANESTESICA,
																	IE_PRE_INTERNACAO,
																	ie_tipo_atendimento,
																	ie_arco_c,
																	NR_SEQ_CLASSIF_AGENDA,
																	cd_anestesista,
																	ie_carater_cirurgia,
																	ie_reserva_completa)
								values (cd_agenda_p,
																	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p),
																	hr_atual_w,
																	nr_minuto_Intervalo_w,
																	nm_usuario_p,
																	clock_timestamp(),
																	ie_status_agenda_w,
																	'N',
																	'N',
																	'N',
																	'N',
																	'N',
																	'S',
																	ie_anestesista_w,
																	nr_sequencia_w,
																	cd_turno_w,
																	'N',
																	NULL,
																	'N',
																	'N',
																	cd_medico_w,
																	cd_medico_exec_w,
																	coalesce(nm_paciente_w,CASE WHEN ie_gerar_obs_horario_w='S' THEN  substr(ds_observacao_horario_w,1,60)  ELSE null END ),
																	'N',
																	'N',
																	'N',
																	'N',
																	coalesce(ie_tipo_atend_classif_w,CASE WHEN ie_tipo_atendimento_w=0 THEN  null  ELSE ie_tipo_atendimento_w END ),
																	'N',
																	NR_SEQ_CLASSIF_AGENDA_w,
																	cd_anestesista_w,
																	ie_carater_cirurgia_w,
																	CASE WHEN ie_reserva_completa_w='U' THEN null  ELSE ie_reserva_completa_w END );
						end if;
						end;
					end if;
					end;
				end if;
				END;
				end if;
				
				if (hr_final_w > hr_fim_w)	then
					hr_fim_w := hr_final_w;
				end if;
				
		END LOOP;
		CLOSE C02;
			
		open C02;
		loop
		fetch C02 into	
			hr_inicial_w,
			hr_final_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			if (hr_inicial_w > hr_final_w) then
				BEGIN
				nr_minuto_intervalo_w     := (hr_inicial_w - hr_final_w) * 1440;
				hr_atual_w                := hr_inicial_w;
				if (nr_minuto_intervalo_w >= qt_min_minimo_w) then
					begin
					select	count(*)
					into STRICT 		qt_turno_w
					from 		agenda_horario
					where 	cd_agenda   = cd_agenda_p
					and 		dt_dia_semana = ie_dia_Semana_w
					and 		hr_atual_w between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')
					and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
					
					if (qt_turno_w > 0) then
						select	max(cd_medico),
									max(cd_anestesista)
						into STRICT 		cd_medico_w,
									cd_anestesista_w
						from 		agenda_horario
						where 	cd_agenda   = cd_agenda_p
						and 		dt_dia_semana = ie_dia_Semana_w
						and 		hr_atual_w between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')
						and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
					end if;	
						
					
					select 	count(*)
					into STRICT 		qt_intervalo_w
					from 		agenda_horario
					where 	cd_agenda                           = cd_agenda_p
					and 		dt_dia_semana                         = ie_dia_Semana_w
					and 		to_char(hr_inicial_intervalo,'hh24') <> '00'
					and 		hr_atual_w between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_intervalo,'hh24:mi'),'dd/mm/yyyy hh24:mi')
					and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_intervalo - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
								
					if (qt_turno_w = 0) then
						begin
						select	count(*)
						into STRICT 		qt_turno_w
						from 		agenda_horario
						where 	cd_agenda   = cd_agenda_p
						and 		dt_dia_semana = 9
						and 		hr_atual_w between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')
						and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
						
						if (qt_turno_w > 0) then
							select	max(cd_medico),
										max(cd_anestesista)
							into STRICT 		cd_medico_w,
										cd_anestesista_w
							from 		agenda_horario
							where 	cd_agenda   = cd_agenda_p
							and 		dt_dia_semana = 9
							and 		hr_atual_w between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi')
							and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');			
						end if;	
						
						select 	count(*)
						into STRICT 		qt_intervalo_w
						from 		agenda_horario
						where 	cd_agenda	= cd_agenda_p
						and 		dt_dia_semana                         = 9
						and 		to_char(hr_inicial_intervalo,'hh24') <> '00'
						and 		hr_atual_w between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_intervalo,'hh24:mi'),'dd/mm/yyyy hh24:mi')
						and 		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_intervalo - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
						end;
					end if;
					
					begin
					/* bloqueio por dia */

					select	'S',
								substr(coalesce(ds_observacao, obter_valor_dominio(1007, ie_motivo_bloqueio)),1,200) ds_observacao_w
					into STRICT 		ie_bloqueio_dia_w,
								ds_observacao_w
					from 		agenda_bloqueio
					where 	cd_agenda = cd_agenda_p
					and 		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final,clock_timestamp()))
					and 		((ie_dia_semana     = ie_dia_semana_w) or (ie_dia_semana       = 9))
					and 		(ie_dia_semana IS NOT NULL AND ie_dia_semana::text <> '')
					and 		coalesce(HR_INICIO_BLOQUEIO::text, '') = ''
					and 		coalesce(HR_FINAL_BLOQUEIO::text, '') = '';
					exception
					when others then
						ie_bloqueio_dia_w := 'N';
					end;
					
					begin
					/* bloqueio dia e hora */

					select	'S',
								substr(coalesce(ds_observacao, obter_valor_dominio(1007, ie_motivo_bloqueio)),1,200) ds_observacao_w
					into STRICT 		ie_bloqueio_dia_hora_w,
								ds_observacao_w
					from 		agenda_bloqueio
					where 	cd_agenda = cd_agenda_p
					and 		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final,clock_timestamp()))
					and 		hr_atual_w between to_date(to_char(hr_atual_w,'dd/mm/yyyy') ||' ' || to_char(hr_inicio_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
					and 		to_date(to_char(hr_atual_w,'dd/mm/yyyy') || ' ' || to_char(hr_final_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
					and 		(ie_dia_semana IS NOT NULL AND ie_dia_semana::text <> '')
					and 		((ie_dia_semana     = ie_dia_semana_w) or (ie_dia_semana       = 9))
					and 		(HR_INICIO_BLOQUEIO IS NOT NULL AND HR_INICIO_BLOQUEIO::text <> '')
					and 		(HR_FINAL_BLOQUEIO IS NOT NULL AND HR_FINAL_BLOQUEIO::text <> '')
					and 		hr_inicio_bloqueio  < hr_final_bloqueio;
					exception
					when others then
						ie_bloqueio_dia_hora_w := 'N';
					end;
					
					if (ie_bloqueio_dia_w = 'N') and (ie_bloqueio_dia_hora_w = 'N') and (qt_turno_w > 0) and (qt_intervalo_w = 0) then
						begin
						cd_turno_w	:= 0;
						if ((to_char(hr_atual_w,'hh24'))::numeric  > somente_numero(HR_QUEBRA_TURNO_W)) or (((to_char(hr_atual_w,'hh24'))::numeric  = somente_numero(HR_QUEBRA_TURNO_W)) and ((to_char(hr_atual_w,'mi'))::numeric  >= somente_numero(qt_min_QUEBRA_TURNO_W))) then
							cd_turno_w := 1;
						end if;
						
						if (hr_quebra_turno_not_w IS NOT NULL AND hr_quebra_turno_not_w::text <> '') and ((to_char(hr_atual_w,'hh24'))::numeric  >= somente_numero(hr_quebra_turno_not_w)) then
							cd_turno_w               := 3;
						end if;
						
						select 	count(*) /*+ INDEX(A AGEPACI_UK) */						into STRICT 		qt_horario_livre_gerado_w
						from 		agenda_paciente
						where 	cd_agenda			= cd_agenda_p
						and 		hr_inicio         = hr_atual_w
						and 		ie_status_agenda  = 'L'
						and 		dt_agenda         = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p);
						
						if (qt_horario_livre_gerado_w = 0) then
							
							
							select 	nextval('agenda_paciente_seq')
							into STRICT 		nr_sequencia_w 
							;
							
							insert	into agenda_paciente(	cd_agenda,
																		dt_agenda,
																		hr_inicio,
																		nr_minuto_duracao,
																		nm_usuario,
																		dt_atualizacao,
																		ie_status_agenda,
																		ie_ortese_protese,
																		ie_cdi,
																		ie_uti,
																		ie_banco_sangue,
																		ie_serv_especial,
																		ie_leito,
																		ie_anestesia,
																		nr_sequencia,
																		cd_turno,
																		ie_equipamento,
																		ie_autorizacao,
																		ie_video,
																		ie_uc,
																		cd_medico,
																		cd_medico_exec,
																		nm_paciente,
																		ie_biopsia,
																		ie_congelacao,
																		IE_CONSULTA_ANESTESICA,
																		IE_PRE_INTERNACAO,
																		ie_tipo_atendimento,
																		ie_arco_c,
																		NR_SEQ_CLASSIF_AGENDA,
																		cd_anestesista,
																		ie_carater_cirurgia,
																		ie_reserva_completa)
							values (
																		cd_agenda_p,
																		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p),
																		hr_atual_w,
																		nr_minuto_Intervalo_w,
																		nm_usuario_p,
																		clock_timestamp(),
																		'L',
																		'N',
																		'N',
																		'N',
																		'N',
																		'N',
																		'S',
																		ie_anestesista_w,
																		nr_sequencia_w,
																		cd_turno_w,
																		'N',
																		NULL,
																		'N',
																		'N',
																		cd_medico_w,
																		cd_medico_exec_w,
																		CASE WHEN ie_gerar_obs_horario_w='S' THEN  substr(ds_observacao_horario_w,1,60)  ELSE null END ,
																		'N',
																		'N',
																		'N',
																		'N',
																		coalesce(ie_tipo_atend_classif_w,CASE WHEN ie_tipo_atendimento_w=0 THEN  null  ELSE ie_tipo_atendimento_w END ),
																		'N',
																		NR_SEQ_CLASSIF_AGENDA_w,
																		cd_anestesista_w,
																		ie_carater_cirurgia_w,
																		CASE WHEN ie_reserva_completa_w='U' THEN null  ELSE ie_reserva_completa_w END
																	);
						end if;
						end;
					end if;
				end;
			end if;
			END;
			end if;
			
			if (hr_final_w >= hr_fim_w)	then
				hr_fim_w := hr_final_w;
			end if;
		
		END LOOP;
		CLOSE C02;
			
		delete	/*+ INDEX(A AGEPACI_UK) */		from 		agenda_paciente
		where 	cd_agenda = cd_agenda_p
		and 		dt_agenda between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p)
		and 		nr_minuto_duracao = 0
		and 		ie_status_agenda  = 'L';
		commit;
		CALL gravar_processo_longo('','','');
		
		exception
		when others then
			CALL gravar_processo_longo('','','');
			CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(184695, 'ERRO='||sqlerrm);
		end;
	end if;
	
	ds_horarios_p := ds_horarios_w;
	
END	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_horarios_livres_cirurgia ( cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, dt_final_p timestamp, qt_minutos_p bigint, hr_inicial_p text, hr_final_p text, ds_restricao_p text, nm_usuario_p text, ie_grava_Livre_p text, ds_horarios_p INOUT text, ie_gerar_retroativo_p text default 'N', cd_departamento_medico_p bigint default null) FROM PUBLIC;

