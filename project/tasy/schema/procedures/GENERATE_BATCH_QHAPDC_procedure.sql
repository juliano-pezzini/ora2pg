-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE generate_batch_qhapdc (nr_seq_batch_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


  cd_estabelecimento_w           estabelecimento.cd_estabelecimento%TYPE;

  dt_initial_date_ref_w          timestamp;

  dt_end_date_ref_w              timestamp;

  nr_atendimento_w               bigint;

  nr_seq_arquivo_dva_w           bigint;

  nr_seq_arquivo_pal_w           bigint;

  nr_seq_arquivo_act_w           bigint;

  nr_seq_arquivo_snp_w           bigint;

  nr_seq_arquivo_men_w           bigint;

  nr_seq_arquivo_adm_w           bigint;

  nr_seq_arquivo_mor_w           bigint;

  nr_seq_arquivo_pat_w           bigint;

  nr_seq_arquivo_hdr_w           bigint;

  nr_seq_log_w                   bigint;

  is_file_generated_successful   bigint := 0;

  is_dataset_gen_successful      bigint := 0;

  is_header_generated_successful bigint := 0;

  is_header_file_gen_successful  bigint := 0;

  excp_caught_in_file_gen        varchar(500 );

  excp_caught_in_dataset_gen     varchar(500 );

  excp_caught_in_header_gen      varchar(500 );

  excp_caught_in_header_file_gen varchar(500 );

  returned_value_w               text;

  nr_records_count               bigint;

  c_batch_files CURSOR(

    nr_seq_batch_p bigint ) FOR 

    SELECT nr_sequencia, 

           ds_file_name 

    FROM   qhapdc_file 

    WHERE  nr_qhapdc_batch = nr_seq_batch_p;

  c_seg CURSOR FOR

    SELECT DISTINCT a.nr_atendimento 

    FROM   atendimento_paciente a, 

           atend_categoria_convenio b, 

           pessoa_fisica pf 

    WHERE  pf.cd_pessoa_fisica = a.cd_pessoa_fisica 

           AND ( (a.dt_alta IS NOT NULL AND a.dt_alta::text <> '') 

                  OR (pf.dt_obito IS NOT NULL AND pf.dt_obito::text <> '') ) 

           AND ( a.dt_alta BETWEEN dt_initial_date_ref_w AND dt_end_date_ref_w 

                  OR pf.dt_obito BETWEEN dt_initial_date_ref_w AND 

                                         dt_end_date_ref_w 

               ) 

           AND a.nr_atendimento = b.nr_atendimento;

BEGIN

    IF ( (nr_seq_batch_p IS NOT NULL AND nr_seq_batch_p::text <> '') 

        AND (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') 

        AND (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') ) THEN 

      SELECT Max(nr_sequencia) 

      INTO STRICT   nr_seq_log_w 

      FROM   log_atualizacao;



      UPDATE qhapdc_batch_sending 

      SET    dt_initial_generation = clock_timestamp(), 

             dt_final_generation  = NULL, 

             dt_atualizacao = clock_timestamp(), 

             nm_usuario = nm_usuario_p 

      WHERE  nr_sequencia = nr_seq_batch_p;



      SELECT a.cd_estabelecimento, 

             coalesce(a.dt_initial_ref, clock_timestamp()), 

             a.dt_final_ref 

      INTO STRICT   cd_estabelecimento_w, dt_initial_date_ref_w, dt_end_date_ref_w 

      FROM   qhapdc_batch_sending a 

      WHERE  a.nr_sequencia = nr_seq_batch_p;



      SELECT Count(*) 

      INTO STRICT   nr_records_count 

      FROM   atendimento_paciente a, 

             atend_categoria_convenio b, 

             pessoa_fisica pf 

      WHERE  pf.cd_pessoa_fisica = a.cd_pessoa_fisica 

             AND ( (a.dt_alta IS NOT NULL AND a.dt_alta::text <> '') 

                    OR (pf.dt_obito IS NOT NULL AND pf.dt_obito::text <> '') ) 

             AND ( a.dt_alta BETWEEN dt_initial_date_ref_w AND dt_end_date_ref_w 

                    OR pf.dt_obito BETWEEN dt_initial_date_ref_w AND 

                                           dt_end_date_ref_w 

                 ) 

             AND a.nr_atendimento = b.nr_atendimento;



      IF ( nr_records_count = 0 )THEN 

        CALL wheb_mensagem_pck.Exibir_mensagem_abort(1076050, 

        'DT_INICIAL=' 

        || To_char(dt_initial_date_ref_w, 'DD-MM-YYYY') 

        || ';DT_FINAL=' 

        || To_char(dt_end_date_ref_w, 'DD-MM-YYYY'));

      END IF;



      OPEN c_seg;



      -- DVA creation of the file and file names  
      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'DVA', cd_estabelecimento_p, nr_seq_arquivo_dva_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_dva_w, is_file_generated_successful, excp_caught_in_file_gen;



      -- PAL creation of the file and file names  
      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'PAL', cd_estabelecimento_p, nr_seq_arquivo_pal_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_pal_w, is_file_generated_successful, excp_caught_in_file_gen;



      -- ACT creation of the file and file names  
      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'ACT', cd_estabelecimento_p, nr_seq_arquivo_act_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_act_w, is_file_generated_successful, excp_caught_in_file_gen;



      -- SNP creation of the file and file names  
      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'SNP', cd_estabelecimento_p, nr_seq_arquivo_snp_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_snp_w, is_file_generated_successful, excp_caught_in_file_gen;



      -- MEN creation of the file and file names  
      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'MEN', cd_estabelecimento_p, nr_seq_arquivo_men_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_men_w, is_file_generated_successful, excp_caught_in_file_gen;



      -- ADM creation of the file and file names  
      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'ADM', cd_estabelecimento_p, nr_seq_arquivo_adm_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_adm_w, is_file_generated_successful, excp_caught_in_file_gen;



      -- MOR creation of the file and file names  
      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'MOR', cd_estabelecimento_p, nr_seq_arquivo_mor_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_mor_w, is_file_generated_successful, excp_caught_in_file_gen;



      -- PAT creation of the file and file names  
      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'PAT', cd_estabelecimento_p, nr_seq_arquivo_pat_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_pat_w, is_file_generated_successful, excp_caught_in_file_gen;



      LOOP 

          FETCH c_seg INTO nr_atendimento_w;



          EXIT WHEN NOT FOUND; /* apply on c_seg */



          IF (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') THEN 

            --DVA segment generation  
            SELECT * FROM generate_data_qhapdc_pkg.Generate_dataset_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_arquivo_dva_w, 'DVA', is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;



            --PAL segment generation  
            SELECT * FROM generate_data_qhapdc_pkg.Generate_dataset_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_arquivo_pal_w, 'PAL', is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;



            --ACT segment generation  
            SELECT * FROM generate_data_qhapdc_pkg.Generate_dataset_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_arquivo_act_w, 'ACT', is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;



            --SNP segment generation  
            SELECT * FROM generate_data_qhapdc_pkg.Generate_dataset_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_arquivo_snp_w, 'SNP', is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;



            --MEN segment generation  
            SELECT * FROM generate_data_qhapdc_pkg.Generate_dataset_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_arquivo_men_w, 'MEN', is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;



            --ADM segment generation  
            SELECT * FROM generate_data_qhapdc_pkg.Generate_dataset_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_arquivo_adm_w, 'ADM', is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;



            --MOR segment generation  
            SELECT * FROM generate_data_qhapdc_pkg.Generate_dataset_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_arquivo_mor_w, 'MOR', is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;



            --PAT segment generation  
            SELECT * FROM generate_data_qhapdc_pkg.Generate_dataset_seg(nr_seq_batch_p, nr_atendimento_w, nm_usuario_p, nr_seq_arquivo_pat_w, 'PAT', is_dataset_gen_successful, excp_caught_in_dataset_gen) INTO STRICT is_dataset_gen_successful, excp_caught_in_dataset_gen;

          END IF;

      END LOOP;



      -- Generating Headers for the following files  
      -- DVA  
      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_dva_w, 'DVA', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      -- PAL  
      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_pal_w, 'PAL', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      -- ACT  
      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_act_w, 'ACT', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      -- SNP  
      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_snp_w, 'SNP', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      -- MEN  
      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_men_w, 'MEN', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      -- ADM  
      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_adm_w, 'ADM', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      -- MOR  
      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_mor_w, 'MOR', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      -- PAT  
      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_pat_w, 'PAT', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      CLOSE c_seg;



      FOR r_c_batch_filese IN c_batch_files(nr_seq_batch_p) LOOP 

          CALL Genrate_file_content(r_c_batch_filese.nr_sequencia, 

          r_c_batch_filese.ds_file_name, nm_usuario_p);

      END LOOP;



      UPDATE qhapdc_batch_sending 

      SET    dt_final_generation = clock_timestamp() 

      WHERE  nr_sequencia = nr_seq_batch_p;



      SELECT * FROM generate_data_qhapdc_pkg.Obtain_qhapdc_file_name(clock_timestamp(), nr_seq_batch_p, nm_usuario_p, 'HDR', cd_estabelecimento_p, nr_seq_arquivo_hdr_w, is_file_generated_successful, excp_caught_in_file_gen) INTO STRICT nr_seq_arquivo_hdr_w, is_file_generated_successful, excp_caught_in_file_gen;



      SELECT * FROM Generate_qhapdc_segment_header(nr_seq_arquivo_hdr_w, 'HDR', nm_usuario_p, cd_estabelecimento_p, is_header_generated_successful, excp_caught_in_header_gen) INTO STRICT is_header_generated_successful, excp_caught_in_header_gen;



      CALL Validate_batch_qhapdc(nr_seq_batch_p, nm_usuario_p, nr_atendimento_w);



      SELECT * FROM Generate_header_file(nr_seq_batch_p, nm_usuario_p, is_header_file_gen_successful, excp_caught_in_header_file_gen) INTO STRICT is_header_file_gen_successful, excp_caught_in_header_file_gen;



      IF ( is_file_generated_successful = 1 

          AND is_dataset_gen_successful = 1 

          AND is_header_generated_successful = 1 

          AND is_header_file_gen_successful = 1 ) THEN 

        COMMIT;

      ELSE 

        ROLLBACK;



        IF ( (excp_caught_in_file_gen IS NOT NULL AND excp_caught_in_file_gen::text <> '') 

             OR (excp_caught_in_dataset_gen IS NOT NULL AND excp_caught_in_dataset_gen::text <> '') 

             OR (excp_caught_in_header_gen IS NOT NULL AND excp_caught_in_header_gen::text <> '') 

             OR (excp_caught_in_header_file_gen IS NOT NULL AND excp_caught_in_header_file_gen::text <> '') ) THEN 

          returned_value_w := excp_caught_in_file_gen 

                              ||Chr(13) 

                              ||Chr(10) 

                              ||excp_caught_in_dataset_gen 

                              ||Chr(13) 

                              ||Chr(10) 

                              ||excp_caught_in_header_gen 

                              ||Chr(13) 

                              ||Chr(10) 

                              ||excp_caught_in_header_file_gen;



          INSERT INTO log_atualizacao_erro 

          VALUES (nextval('log_atualizacao_erro_seq'), 

                       'Error while generating the files for QHAPDC report', 

                       returned_value_w, 

                       nr_seq_log_w, 

                       clock_timestamp(), 

                       'Tasy_Versao' );



          COMMIT;

        END IF;

      END IF;

    END IF;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_batch_qhapdc (nr_seq_batch_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

