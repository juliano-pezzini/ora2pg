-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE inpart_atualiza_tab_preco ( cd_material_p bigint, dt_vigencia_p timestamp, cd_tab_preco_mat_p bigint, cd_estabelecimento_p bigint, vl_preco_p bigint, cd_cgc_p text, nm_usuario_p text) AS $body$
DECLARE


vl_preco_venda_w		double precision:= 0;
dt_vigencia_w		timestamp;
dt_vigencia_ww		timestamp;
qt_existe_w		bigint;
cd_moeda_w		smallint:= 1;
qt_existe_dia_w		bigint;
qt_dias_antes_vig_w	integer;
ie_gravar_fornec_tabela_w	parametros_opme.ie_gravar_fornec_tabela%type := 'N';
cd_cgc_w		pessoa_juridica.cd_cgc%type;

c01 CURSOR FOR
	SELECT	/*+index (a prcmate_pk) */		a.vl_preco_venda,
		a.dt_inicio_vigencia,
		a.cd_moeda
	from	preco_material a
	where	a.cd_tab_preco_mat = cd_tab_preco_mat_p
	and	a.cd_estabelecimento = cd_estabelecimento_p
	and	a.cd_material = cd_material_p
	and	coalesce(a.ie_situacao, 'A') = 'A'
	and	a.dt_inicio_vigencia <= dt_vigencia_p
	and	coalesce(a.ie_preco_venda, 'S') = 'S'
	order by
		a.dt_inicio_vigencia;


BEGIN
/* 1 - Pegar as informações do preço vigente do item */

open C01;
loop
fetch C01 into
	vl_preco_venda_w,
	dt_vigencia_w,
	cd_moeda_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	vl_preco_venda_w := vl_preco_venda_w;
	dt_vigencia_w	 := dt_vigencia_w;
	cd_moeda_w	 := cd_moeda_w;
	end;
end loop;
close C01;

select	coalesce(max(qt_dias_antes_vig),0),
	coalesce(max(ie_gravar_fornec_tabela),'N')
into STRICT	qt_dias_antes_vig_w,
	ie_gravar_fornec_tabela_w
from	parametros_opme
where	cd_estabelecimento = cd_estabelecimento_p
and	ie_sistema_integracao = 'I';

if (qt_dias_antes_vig_w <> 0) then
	dt_vigencia_ww := (dt_vigencia_p - qt_dias_antes_vig_w);
end if;

if (ie_gravar_fornec_tabela_w = 'S') then
	cd_cgc_w := cd_cgc_p;
end if;

/* 2 - Verificar se o valor que está vindo da integração é maior ou menor que o praticado*/

if (coalesce(vl_preco_p,0) > vl_preco_venda_w) then

	/* 2.1 - Se o valor for maior, então verifica-se no mês que vem o valor novo existe o registro no dia 01 do mês*/

	select	count(*)
	into STRICT	qt_existe_w
	from	preco_material
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	cd_tab_preco_mat	= cd_tab_preco_mat_p
	and	cd_material		= cd_material_p
	and	dt_inicio_vigencia	= trunc(coalesce(dt_vigencia_ww, dt_vigencia_p), 'month');

	/* 2.2 - Se não tem o registro no primeiro dia daquele mês então cria-se um novo registro*/

	if (qt_existe_w = 0) then

		insert into preco_material(
			cd_estabelecimento,
			cd_tab_preco_mat,
			cd_material,
			dt_inicio_vigencia,
			vl_preco_venda,
			cd_moeda,
			ie_brasindice,
			dt_atualizacao,
			nm_usuario,
			ie_situacao,
			ie_preco_venda,
			ie_inpart,
			ie_integracao,
			cd_cgc_fornecedor)
		values (
			cd_estabelecimento_p,
			cd_tab_preco_mat_p,
			cd_material_p,
			trunc(coalesce(dt_vigencia_ww, dt_vigencia_p),'month'),
			coalesce(vl_preco_p,0),
			cd_moeda_w,
			'N',
			clock_timestamp(),
			nm_usuario_p,
			'A',
			'S',
			'S',
			'I',
			cd_cgc_w);

		CALL Atualiza_Registro_Atual_Inpart(cd_tab_preco_mat_p, cd_estabelecimento_p, cd_material_p, nm_usuario_p);

	elsif (qt_existe_w > 0) then

		/*update 	preco_material
		set	vl_preco_venda = nvl(vl_preco_p,0)
		where	cd_estabelecimento	= cd_estabelecimento_p
		and	cd_tab_preco_mat	= cd_tab_preco_mat_p
		and	cd_material		= cd_material_p
		and	dt_inicio_vigencia 	= trunc(dt_vigencia_p, 'month');*/
    -- Retirado após as conversas por telefone com Daniela Z e retorno da Lilian (Sírio) na OS
		select	count(*)
		into STRICT	qt_existe_dia_w
		from	preco_material
		where	cd_estabelecimento = cd_estabelecimento_p
		and	cd_tab_preco_mat = cd_tab_preco_mat_p
		and	cd_material = cd_material_p
		and	trunc(dt_inicio_vigencia,'dd') = trunc(coalesce(dt_vigencia_ww, dt_vigencia_p),'dd');

		if (qt_existe_dia_w = 0) then

			insert into preco_material(
				cd_estabelecimento,
				cd_tab_preco_mat,
				cd_material,
				dt_inicio_vigencia,
				vl_preco_venda,
				cd_moeda,
				ie_brasindice,
				dt_atualizacao,
				nm_usuario,
				ie_situacao,
				ie_preco_venda,
				ie_inpart,
				ie_integracao,
				cd_cgc_fornecedor)
			values (
				cd_estabelecimento_p,
				cd_tab_preco_mat_p,
				cd_material_p,
				trunc(coalesce(dt_vigencia_ww, dt_vigencia_p),'dd'),
				coalesce(vl_preco_p,0),
				cd_moeda_w,
				'N',
				clock_timestamp(),
				nm_usuario_p,
				'A',
				'S',
				'S',
				'I',
				cd_cgc_w);

			CALL atualiza_registro_atual_inpart(cd_tab_preco_mat_p, cd_estabelecimento_p, cd_material_p, nm_usuario_p);

		end if;
	end if;

else	/* 3 - O valor que está vindo da integração é menor que o praticado..

	/* 3.1 - Lançar o item na tabela com data que vem da integração, antes verificar se não existe um já*/

	select	count(*)
	into STRICT	qt_existe_w
	from	preco_material
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	cd_tab_preco_mat	= cd_tab_preco_mat_p
	and	cd_material		= cd_material_p
	and	trunc(dt_inicio_vigencia,'dd') = trunc(coalesce(dt_vigencia_ww, dt_vigencia_p), 'dd');

	/* 2.2 - Se não tem o registro no primeiro dia daquele mês então cria-se um novo registro*/

	if (qt_existe_w = 0) then

		insert into preco_material(
			cd_estabelecimento,
			cd_tab_preco_mat,
			cd_material,
			dt_inicio_vigencia,
			vl_preco_venda,
			cd_moeda,
			ie_brasindice,
			dt_atualizacao,
			nm_usuario,
			ie_situacao,
			ie_preco_venda,
			ie_inpart,
			ie_integracao,
			cd_cgc_fornecedor)
		values (
			cd_estabelecimento_p,
			cd_tab_preco_mat_p,
			cd_material_p,
			trunc(coalesce(dt_vigencia_ww, dt_vigencia_p),'dd'),
			coalesce(vl_preco_p,0),
			cd_moeda_w,
			'N',
			clock_timestamp(),
			nm_usuario_p,
			'A',
			'N',
			'S',
			'I',
			cd_cgc_w);

		CALL atualiza_registro_atual_inpart(cd_tab_preco_mat_p, cd_estabelecimento_p, cd_material_p, nm_usuario_p);

	elsif (qt_existe_w > 0) then	/* 3.3 - Se já  tem o registro no dia vem vem a integração então atualiza-se  o registro, pois quando isso acontecer, seria um erro segundo conversa com Lilian Sírio/Daniela Z.*/
		update 	preco_material
		set	vl_preco_venda 		= coalesce(vl_preco_p,0)
		where	cd_estabelecimento	= cd_estabelecimento_p
		and	cd_tab_preco_mat	= cd_tab_preco_mat_p
		and	cd_material		= cd_material_p
		and	dt_inicio_vigencia      = trunc(coalesce(dt_vigencia_ww, dt_vigencia_p), 'dd');

	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE inpart_atualiza_tab_preco ( cd_material_p bigint, dt_vigencia_p timestamp, cd_tab_preco_mat_p bigint, cd_estabelecimento_p bigint, vl_preco_p bigint, cd_cgc_p text, nm_usuario_p text) FROM PUBLIC;

