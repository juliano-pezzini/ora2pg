-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_imp_interface_daer_afpergs ( LFP01TIP bigint, LFP02CSG bigint, LFP03ANO bigint, LFP04MES bigint, LFP05VRB bigint, LFP06MTR bigint, LFP07VAL bigint, LFP08REF text, LFP09PAR bigint, nr_seq_cobranca_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
dt_referencia_w		timestamp;
nr_seq_mensalidade_w	bigint;
nm_pagador_w		varchar(255);
nr_titulo_w		bigint;
nr_seq_lote_mens_w	bigint;
nr_seq_pagador_w	bigint;
nm_empresa_w		varchar(255);

cd_banco_w		integer;
cd_agencia_bancaria_w	varchar(8);
nr_conta_w		varchar(20);
ie_digito_conta_w	varchar(2);
cd_moeda_w		integer;
nr_seq_cobranca_w	bigint;
vl_despesa_bancaria_w	double precision;
vl_juros_w		double precision;
vl_multa_w		double precision;
vl_desc_previsto_w	double precision;
dt_referencia_ww	varchar(6);
vl_desconto_w		double precision;
vl_acrescimo_w		double precision;


BEGIN 
 
if (LFP01TIP = 2) then 
	dt_referencia_ww	:= lpad(LFP04MES||LFP03ANO,6,0);
	dt_referencia_w		:= to_date(to_char(dt_referencia_ww),'mmyyyy');
 
	begin 
	select	nr_sequencia 
	into STRICT	nr_seq_lote_mens_w 
	from	pls_lote_mensalidade 
	where	nr_seq_empresa	= 2 
	and	trunc(dt_mesano_referencia,'mm') = trunc(dt_referencia_w,'mm');
	exception 
	when others then 
		select	substr(obter_razao_social(cd_cgc),1,255) 
		into STRICT	nm_empresa_w 
		from	pls_desc_empresa 
		where	nr_sequencia	= 2;
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265836,'empresa='||nm_empresa_w||'referencia='||dt_referencia_w);
		--Mensagem: Não existe lote de mensalidade para a empresa '||nm_empresa_w||' no mês '||dt_referencia_w); 
	end;
		 
			begin 
			select	nr_seq_pagador 
			into STRICT	nr_seq_pagador_w 
			from	pls_contrato_pagador_fin 
			where	(cd_matricula)::numeric  = LFP06MTR 
			and	nr_seq_empresa		= 2;
			exception 
			when others then 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(265845,'pagador='||nm_pagador_w);
				--Existe inconsistência com as informações do(a) pagador(a) '||nm_pagador_w||'. Verifique o número da matrícula e empresa! 
			end;
			 
			begin 
			select	nr_sequencia, 
				substr(pls_obter_dados_pagador(nr_seq_pagador,'N'),1,255), 
				substr(pls_obter_titulo_mensalidade(nr_sequencia,null),1,255) 
			into STRICT	nr_seq_mensalidade_w, 
				nm_pagador_w, 
				nr_titulo_w 
			from	pls_mensalidade 
			where	nr_seq_pagador = nr_seq_pagador_w 
			and	coalesce(ie_cancelamento::text, '') = '' 
			and	trunc(dt_referencia,'mm') = dt_referencia_w;
			exception 
			when others then 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(265846,'pagador='||nm_pagador_w);
				--Não foram encontradas informações do(a) pagador(a) '||nm_pagador_w||' no lote de mensalidade referente ao mês do arquivo. Verifique se o pagador está incluído no lote de mensalidade ou se a mensalidade foi cancelada! 
			end;
			 
			select	max(cd_banco), 
				max(cd_agencia_bancaria), 
				max(cd_conta), 
				max(ie_digito_conta) 
			into STRICT	cd_banco_w, 
				cd_agencia_bancaria_w, 
				nr_conta_w, 
				ie_digito_conta_w 
			from	pls_contrato_pagador_fin 
			where	nr_sequencia = nr_seq_pagador_w;
			 
			select	max(cd_moeda) 
			into STRICT	cd_moeda_w 
			from	titulo_receber 
			where	nr_titulo = nr_titulo_w;
			 
			select	max(vl_despesa_bancaria), 
				max(vl_juros), 
				max(vl_multa), 
				max(vl_desc_previsto), 
				max(vl_desconto), 
				max(vl_acrescimo) 
			into STRICT	vl_despesa_bancaria_w, 
				vl_juros_w, 
				vl_multa_w, 
				vl_desc_previsto_w, 
				vl_desconto_w, 
				vl_acrescimo_w 
			from	titulo_receber_cobr 
			where	nr_titulo = nr_titulo_w 
			and	nr_seq_cobranca = nr_seq_cobranca_w;
			 
			insert	into titulo_receber_cobr(	nr_sequencia, nr_seq_cobranca, nr_titulo, 
						vl_cobranca, dt_atualizacao, nm_usuario, 
						cd_banco, cd_agencia_bancaria, nr_conta, 
						cd_moeda, dt_liquidacao, vl_liquidacao, 
						ie_digito_conta, dt_atualizacao_nrec, nm_usuario_nrec, 
						vl_despesa_bancaria, vl_juros, vl_multa, 
						vl_desc_previsto, vl_desconto, vl_acrescimo, 
						nr_seq_mensalidade) 
				values (	nextval('titulo_receber_cobr_seq'), nr_seq_cobranca_p, nr_titulo_w, 
						LFP07VAL, clock_timestamp(), nm_usuario_p, 
						cd_banco_w, cd_agencia_bancaria_w, nr_conta_w, 
						cd_moeda_w, dt_referencia_w, LFP07VAL, 
						ie_digito_conta_w, clock_timestamp(), nm_usuario_p, 
						coalesce(vl_despesa_bancaria_w,0), coalesce(vl_juros_w,0), coalesce(vl_multa_w,0), 
						coalesce(vl_desc_previsto_w,0), coalesce(vl_desconto_w,0), coalesce(vl_acrescimo_w,0), 
						nr_seq_mensalidade_w);
 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_imp_interface_daer_afpergs ( LFP01TIP bigint, LFP02CSG bigint, LFP03ANO bigint, LFP04MES bigint, LFP05VRB bigint, LFP06MTR bigint, LFP07VAL bigint, LFP08REF text, LFP09PAR bigint, nr_seq_cobranca_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

