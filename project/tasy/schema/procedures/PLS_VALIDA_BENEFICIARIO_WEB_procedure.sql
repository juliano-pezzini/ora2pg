-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_valida_beneficiario_web ( ds_tarja_magnetica_p text, ie_tipo_identificacao_p text, nr_seq_prestador_p bigint, nr_seq_usuario_web_p bigint, ie_exige_biometria_p INOUT text, ie_regra_cartao_p INOUT text, nm_beneficiario_p INOUT text, cd_usuario_plano_p INOUT text, nr_via_p INOUT text, dt_validade_p INOUT text, cd_operadora_p INOUT text, dt_validade_format_p INOUT timestamp, dt_nascimento_p INOUT text, nr_seq_plano_p INOUT bigint, nm_produto_p INOUT text, nr_seq_segurado_p INOUT bigint, nm_operadora_p INOUT text, nr_seq_congenere_p INOUT bigint, ie_tipo_erro_p INOUT text, cd_pessoa_fisica_p INOUT text, nr_seq_produto_p INOUT text, nr_seq_tipo_acomodacao_p INOUT bigint, ie_tipo_segurado_p INOUT text, ds_abrangencia_p INOUT text, ie_abrangencia_p INOUT text, ie_permite_usu_eve_cong_p INOUT text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_tipo_guia_p text, ie_funcao_liberada_p bigint, ie_tipo_processo_p text, ie_urgencia_p text, ds_retorno_regra_bloq_p INOUT text, nr_seq_regra_bloq_p INOUT bigint, ie_situacao_benef_p INOUT text, ds_situacao_benef_p INOUT text, ds_erro_p INOUT text, ds_token_p text default null, ds_qrcode_p text DEFAULT NULL) AS $body$
DECLARE

				
_ora2pg_r RECORD;
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Validar o beneficiário conforme carteira ou tarja magnética
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [ x ] Portal [  ] Relatórios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atenção:  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	IE_TIPO_IDENTIFICACAO
	C - Código da carteirinha
	T - Tarja magnética
	K - Token de atendimento
	
	IE_TIPO_ERRO
	1 - Beneficiário não cadastrado na operadora
	2 - Beneficiário de intercâmbio
	3 -  Tratamento adicionado nas exceptions para quando houver erro na leitura da tarja.
*/ds_token_w			pls_token_atendimento.ds_token%type;
ds_token_qrcode_w		varchar(255);
nr_seq_segurado_w		bigint;
nr_seq_emissor_pcmso_w		bigint;
nr_seq_segurado_cart_w		bigint;
nr_seq_plano_w			bigint;
ds_plano_w			varchar(255);
ie_exige_biometria_w		varchar(1);
ie_tipo_erro_w			varchar(1) := '0';
cd_operadora_usuario_w		varchar(10);
nr_digito_w			numeric(30);
nr_seq_emissor_w		bigint;
qt_operadora_w			bigint := 0;
cd_cooperativa_w		varchar(10);
dia_validade_w			varchar(2);
mes_ano_valdiade_w		varchar(7);
ie_tipo_contratacao_w		varchar(10);
cd_plano_tarja_mag_w		varchar(50);
ie_tipo_segurado_w		varchar(3);
nr_seq_congenere_w		bigint;
dt_nascimento_w			timestamp;
ie_restringe_user_eventual_w	varchar(10) := 'N';
nr_seq_regra_bloq_w		integer := null;
ds_retorno_regra_bloq_w		varchar(255) := null;
ie_bloq_alteracao_benef_w	varchar(255) := 'N';
cd_cgc_outorgante_w		pls_outorgante.cd_cgc_outorgante%type;
ie_tipo_identificacao_w		varchar(1);
ds_validade_via_w		varchar(255);
ie_produto_tarja_w		pls_parametros.ie_produto_tarja%type;

-- Se é permitido gerar beneficiários eventuais para a congenere do segurado
ie_permite_usu_eve_cong_w	varchar(1) := 'S';
nr_seq_congenere_seg_w		bigint;
ie_retorno_w			varchar(3);
ds_tarja_magnetica_w		varchar(255);
ie_situacao_atend_w		varchar(1);
ie_gerar_usu_even_rep_w 	varchar(1);
nr_seq_regra_lib_cart_w		bigint;
ie_digito_verificador_w		varchar(2);
ie_estabelecimento_w		varchar(2);
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
ie_situacao_benef_w		varchar(2);
ds_situacao_benef_w		varchar(255);
ie_usuario_even_w		varchar(2);

/* Variaveis criadas para o retorno da procedure  PLS_CONSISTIR_CARTAO_BENEF, só é utilizado 
um parâmetro de retorno, por isso os demais recebem o mesmo parâmetro */
ds_retorno_number_w		numeric(20);
ds_retorno_varchar_w		varchar(1000);

ie_sexo_w			varchar(10);
nm_social_w			varchar(255);
ds_cns_w			varchar(50);
ds_rede_w			varchar(255);
ie_cartao_w			varchar(10);
ie_versao_w			varchar(10);
ds_qrcode_w			varchar(2000);


BEGIN

ie_tipo_identificacao_w		:= ie_tipo_identificacao_p;
ie_estabelecimento_w		:= coalesce(obter_valor_param_usuario(1273, 8, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'S');
ds_tarja_magnetica_w 		:= ds_tarja_magnetica_p;
ds_token_w			:= ds_token_p;
ds_qrcode_w			:= ds_qrcode_p;

select	max(cd_cgc_outorgante)
into STRICT	cd_cgc_outorgante_w
from	pls_outorgante
where	cd_estabelecimento = cd_estabelecimento_p;


if (cd_cgc_outorgante_w = '03637776000105') and (coalesce(ds_token_w::text, '') = '') then -- Filosanitas Saúde LTDA
	if (length(ds_tarja_magnetica_w) > 14) then -- OS 892491
		ie_tipo_identificacao_w := 'T';
	else
		ie_tipo_identificacao_w := 'C';
	end if;
end if;	

if (ie_tipo_identificacao_w = 'T') then
	if (ds_tarja_magnetica_w IS NOT NULL AND ds_tarja_magnetica_w::text <> '') then
		if (substr(ds_tarja_magnetica_w,1,1) in (';',':','ç','/')) then
			ds_tarja_magnetica_w := '%'||substr(ds_tarja_magnetica_w, 2, length(ds_tarja_magnetica_w));
		end if;
	end if;

	begin		
		SELECT * FROM pls_obter_valores_tarja_mag(ds_tarja_magnetica_w, nm_usuario_p, cd_estabelecimento_p) INTO STRICT nm_beneficiario_p, cd_usuario_plano_p, nr_via_p, dt_validade_p, cd_operadora_p, dt_validade_format_p, dt_nascimento_w, nm_produto_p, nr_seq_produto_p, ds_abrangencia_p, ie_abrangencia_p, ie_tipo_contratacao_w, cd_plano_tarja_mag_w;
	exception
	when others then		
		ie_tipo_erro_p := '3';
		goto final;
	end;	
	
	if (dt_nascimento_w IS NOT NULL AND dt_nascimento_w::text <> '') then
		dt_nascimento_p := to_char(dt_nascimento_w, 'dd/mm/yyyy');
	end if;
	
	dia_validade_w		:= to_char(last_day(dt_validade_format_p), 'dd');
	mes_ano_valdiade_w 	:= to_char(dt_validade_format_p, 'mm/yyyy');	
	
	dt_validade_p 		:= dia_validade_w||'/'|| mes_ano_valdiade_w; 	

	if ((cd_usuario_plano_p IS NOT NULL AND cd_usuario_plano_p::text <> '') and cd_usuario_plano_p <> '0') then
		/*aaschlote 06/11/2012 - OS - 513340 - Caso o usuário tiver regra de PCMSO, então deve criar um novo usuário*/
		

		nr_seq_emissor_pcmso_w := pls_obter_regra_usuario_pcmso(cd_usuario_plano_p, '', nr_seq_emissor_pcmso_w);			
			
		if (nr_seq_emissor_pcmso_w IS NOT NULL AND nr_seq_emissor_pcmso_w::text <> '') then
			nr_seq_segurado_w	:= null;
			nr_seq_segurado_cart_w	:= null;
		else
			SELECT * FROM pls_obter_benef_tarja(	cd_usuario_plano_p, ie_estabelecimento_w, nm_usuario_p, cd_estabelecimento_p, cd_pessoa_fisica_w, nr_seq_segurado_w) INTO STRICT cd_pessoa_fisica_w, nr_seq_segurado_w;
			
			begin	
				select 	b.nr_sequencia
				into STRICT	nr_seq_segurado_cart_w
				from	pls_segurado_carteira b
				where  	b.nr_seq_segurado	= nr_seq_segurado_w
				and    	b.cd_usuario_plano 	= cd_usuario_plano_p;
			exception
			when others then
				begin
					select  b.nr_sequencia,
						'S'
					into STRICT	nr_seq_segurado_cart_w,
						ie_usuario_even_w
					from   	pls_segurado_carteira b
					where  	b.nr_seq_segurado	= nr_seq_segurado_w
					and    	b.nr_cartao_intercambio = cd_usuario_plano_p;
				exception
				when others then
					select 	max(b.nr_sequencia),
						'S'
					into STRICT	nr_seq_segurado_cart_w,
						ie_usuario_even_w
					from   	pls_segurado_cart_ant b								
					where  	b.nr_seq_segurado	= nr_seq_segurado_w
					and    	b.cd_usuario_ant 	= cd_usuario_plano_p;
				end;			
			end;
			
			begin					
				if (ie_usuario_even_w = 'S') then
					--  Sestari - Verificação do beneficiário em repasse de pré-pagamento OS 459307
					ie_restringe_user_eventual_w := pls_obter_regra_usuario_even(nr_seq_segurado_cart_w, cd_estabelecimento_p);
					
					if (ie_restringe_user_eventual_w = 'S') then
						nr_seq_segurado_cart_w 		:= null;
						nr_seq_segurado_w 		:= null;
						cd_pessoa_fisica_w		:= null;
					elsif (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
						-- Sestari - Beneficiário com repasse inativo, deve gerar um beneficiário eventual OS 471602
						select	max(ie_situacao_atend)
						into STRICT	ie_situacao_atend_w
						from	pls_segurado
						where   nr_sequencia = nr_seq_segurado_w;
						
						if (ie_situacao_atend_w <> 'A') then
							select	max(ie_gerar_usuario_even_repasse)
							into STRICT	ie_gerar_usu_even_rep_w
							from	pls_parametros
							where	cd_estabelecimento = cd_estabelecimento_p;
							
							if (coalesce(ie_gerar_usu_even_rep_w,'N') = 'S') then
								nr_seq_segurado_w := null;
							end if;
						end if;
					end if;
				end if;
			exception
			when others then
				nr_seq_segurado_cart_w 	:= null;
				nr_seq_segurado_w 	:= null;
				cd_pessoa_fisica_w	:= null;
			end;
		end if;
		
		begin
			/* Valida as informações da carteirinha do beneficiário, tratameto específico para a via adicional, tarja magnética */
				
			SELECT * FROM pls_consistir_cartao_benef(	cd_usuario_plano_p, 'TM', nr_via_p, nr_seq_segurado_w, nm_usuario_p, cd_estabelecimento_p, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ie_digito_verificador_w, ds_validade_via_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w) INTO STRICT ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ie_digito_verificador_w, ds_validade_via_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w;
		exception
		when others then
			nr_via_p	:= null;	
		end;
		
		/* caso ocorra um erro de via inválida */
				
		if (ds_validade_via_w IS NOT NULL AND ds_validade_via_w::text <> '') then		
			ds_erro_p := ds_validade_via_w;		
		end if;	
	end if;
elsif (ie_tipo_identificacao_w = 'K') then
	nr_seq_segurado_w := pls_validar_token_atendimento(ds_token_w, nm_usuario_p, nr_seq_segurado_w);

	--OS 1253216 valida se o beneficiário está pertence ao estabelecimento
	begin
		select	a.nr_sequencia,
			substr(tws_get_name_person(a.cd_pessoa_fisica, a.cd_estabelecimento),1,250),
			a.cd_pessoa_fisica,
			to_char(b.dt_validade_carteira,'dd/mm/yyyy'),
			b.nr_via_solicitacao
		into STRICT	nr_seq_segurado_w,
			nm_beneficiario_p,
			cd_pessoa_fisica_w,
			dt_validade_p,
			nr_via_p			
		from	pls_segurado		a,
			pls_segurado_carteira	b
		where	b.nr_seq_segurado	= a.nr_sequencia
		and	a.nr_sequencia		= nr_seq_segurado_w
		and (coalesce(ie_estabelecimento_w, 'N') = 'N'
		or	a.cd_estabelecimento 	= cd_estabelecimento_p);
	exception
	when others then
		nr_seq_segurado_w	:= null;
	end;
elsif (ie_tipo_identificacao_w = 'Q') then
	SELECT * FROM pls_obter_valores_qr_code(	ds_qrcode_w, nm_usuario_p, cd_estabelecimento_p) INTO STRICT _ora2pg_r;
 cd_usuario_plano_p := _ora2pg_r.cd_usuario_plano_p; nm_beneficiario_p := _ora2pg_r.nm_beneficiario_p; dt_nascimento_p := _ora2pg_r.dt_nascimento_p; ie_sexo_w := _ora2pg_r.ie_sexo_p; dt_validade_p := _ora2pg_r.dt_validade_p; cd_plano_tarja_mag_w := _ora2pg_r.cd_plano_qrcode_p; ds_cns_w := _ora2pg_r.ds_cns_p; ds_rede_w := _ora2pg_r.ds_rede_p; nr_via_p := _ora2pg_r.nr_via_solicitacao_p; ie_cartao_w := _ora2pg_r.ie_cartao_p; nm_social_w := _ora2pg_r.nm_social_p; ds_token_qrcode_w := _ora2pg_r.ds_token_p; ie_versao_w := _ora2pg_r.ie_versao_p; cd_operadora_p := _ora2pg_r.cd_operadora_p;
				
	if ((cd_usuario_plano_p IS NOT NULL AND cd_usuario_plano_p::text <> '') and cd_usuario_plano_p <> '0') then
		/*aaschlote 06/11/2012 - OS - 513340 - Caso o usuário tiver regra de PCMSO, então deve criar um novo usuário*/
	
		nr_seq_emissor_pcmso_w := pls_obter_regra_usuario_pcmso(cd_usuario_plano_p, '', nr_seq_emissor_pcmso_w);			
			
		if (nr_seq_emissor_pcmso_w IS NOT NULL AND nr_seq_emissor_pcmso_w::text <> '') then
			nr_seq_segurado_w	:= null;
			nr_seq_segurado_cart_w	:= null;
		else
			SELECT * FROM pls_obter_benef_tarja(	cd_usuario_plano_p, ie_estabelecimento_w, nm_usuario_p, cd_estabelecimento_p, cd_pessoa_fisica_w, nr_seq_segurado_w) INTO STRICT cd_pessoa_fisica_w, nr_seq_segurado_w;
			
			begin	
				select 	b.nr_sequencia
				into STRICT	nr_seq_segurado_cart_w
				from	pls_segurado_carteira b
				where  	b.nr_seq_segurado	= nr_seq_segurado_w
				and    	b.cd_usuario_plano 	= cd_usuario_plano_p;
			exception
			when others then
				begin
					select  b.nr_sequencia,
						'S'
					into STRICT	nr_seq_segurado_cart_w,
						ie_usuario_even_w
					from   	pls_segurado_carteira b
					where  	b.nr_seq_segurado	= nr_seq_segurado_w
					and    	b.nr_cartao_intercambio = cd_usuario_plano_p;
				exception
				when others then
					select 	max(b.nr_sequencia),
						'S'
					into STRICT	nr_seq_segurado_cart_w,
						ie_usuario_even_w
					from   	pls_segurado_cart_ant b								
					where  	b.nr_seq_segurado	= nr_seq_segurado_w
					and    	b.cd_usuario_ant 	= cd_usuario_plano_p;
				end;			
			end;
			
			begin					
				if (ie_usuario_even_w = 'S') then
					--  Sestari - Verificação do beneficiário em repasse de pré-pagamento OS 459307
					ie_restringe_user_eventual_w := pls_obter_regra_usuario_even(nr_seq_segurado_cart_w, cd_estabelecimento_p);
					
					if (ie_restringe_user_eventual_w = 'S') then
						nr_seq_segurado_cart_w 		:= null;
						nr_seq_segurado_w 		:= null;
						cd_pessoa_fisica_w		:= null;
					elsif (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
						-- Sestari - Beneficiário com repasse inativo, deve gerar um beneficiário eventual OS 471602
						select	max(ie_situacao_atend)
						into STRICT	ie_situacao_atend_w
						from	pls_segurado
						where   nr_sequencia = nr_seq_segurado_w;
						
						if (ie_situacao_atend_w <> 'A') then
							select	max(ie_gerar_usuario_even_repasse)
							into STRICT	ie_gerar_usu_even_rep_w
							from	pls_parametros
							where	cd_estabelecimento = cd_estabelecimento_p;
							
							if (coalesce(ie_gerar_usu_even_rep_w,'N') = 'S') then
								nr_seq_segurado_w := null;
							end if;
						end if;
					end if;
				end if;
			exception
			when others then
				nr_seq_segurado_cart_w 	:= null;
				nr_seq_segurado_w 	:= null;
				cd_pessoa_fisica_w	:= null;
			end;
		end if;
				
		--OS 1198425 Se o beneficiário não existir na base, verifica o parâmetro ie_produto_tarja para retornar o código do produto identificado no QRCode
		ie_produto_tarja_w	:= pls_verif_obtem_produto_tarja(cd_estabelecimento_p);

		if (coalesce(ie_produto_tarja_w, 'S')	= 'S') then
			nr_seq_produto_p	:= pls_obter_produto_qrcode(cd_plano_tarja_mag_w, cd_usuario_plano_p, cd_estabelecimento_p, nm_usuario_p);
		end if;
		
		begin
			/* Valida as informações da carteirinha do beneficiário, tratameto específico para a via adicional, tarja magnética */
				
			SELECT * FROM pls_consistir_cartao_benef(	cd_usuario_plano_p, 'QR', nr_via_p, nr_seq_segurado_w, nm_usuario_p, cd_estabelecimento_p, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ie_digito_verificador_w, ds_validade_via_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w) INTO STRICT ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ie_digito_verificador_w, ds_validade_via_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w;
		exception
		when others then
			nr_via_p	:= null;	
		end;
		
		/* caso ocorra um erro de via inválida */
				
		if (ds_validade_via_w IS NOT NULL AND ds_validade_via_w::text <> '') then		
			ds_erro_p := ds_validade_via_w;		
		end if;	
	end if;
else
	cd_usuario_plano_p := ds_tarja_magnetica_w;
	SELECT * FROM pls_obter_dados_codigo_barras(cd_usuario_plano_p, nm_beneficiario_p, nr_via_p, nr_seq_segurado_w, dt_validade_p, nr_digito_w, cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p) INTO STRICT nm_beneficiario_p, nr_via_p, nr_seq_segurado_w, dt_validade_p, nr_digito_w, cd_pessoa_fisica_w;

	if (ie_estabelecimento_w = 'S') then
		--OS 1253216 valida se o beneficiário está pertence ao estabelecimento
		begin
			select	nr_sequencia
			into STRICT	nr_seq_segurado_w
			from	pls_segurado
			where	nr_sequencia	= nr_seq_segurado_w
			and	cd_estabelecimento 	= cd_estabelecimento_p;
		exception
		when others then
			nr_seq_segurado_w	:= null;	
			nm_beneficiario_p	:= null;
			cd_pessoa_fisica_w	:= null;
			dt_validade_p		:= null;
			nr_via_p		:= null;
		end;
	end if;
	
	---  Sestari - Verificação do beneficiário em repasse de pré-pagamento OS 459307
	if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then

		select	max(nr_sequencia)
		into STRICT	nr_seq_segurado_cart_w
		from	pls_segurado_carteira
		where	nr_seq_segurado = nr_seq_segurado_w
		and	nr_cartao_intercambio = cd_usuario_plano_p
		and	cd_estabelecimento = cd_estabelecimento_p
		and	not exists (SELECT 1
				   from	  pls_segurado_carteira
				   where  nr_seq_segurado = nr_seq_segurado_w
				   and	  cd_usuario_plano = cd_usuario_plano_p
				   and	  cd_estabelecimento = cd_estabelecimento_p);
				
			

		if (nr_seq_segurado_cart_w IS NOT NULL AND nr_seq_segurado_cart_w::text <> '') then
			ie_restringe_user_eventual_w := pls_obter_regra_usuario_even(nr_seq_segurado_cart_w, cd_estabelecimento_p);
		
			if (ie_restringe_user_eventual_w = 'S') then
				nr_seq_segurado_cart_w := null;
				nr_seq_segurado_w := null;
			else
				-- Sestari - Beneficiário com repasse inativo, deve gerar um beneficiário eventual OS 471602
				select	max(ie_situacao_atend)
				into STRICT	ie_situacao_atend_w
				from	pls_segurado
				where   nr_sequencia = nr_seq_segurado_w;
				
				if (ie_situacao_atend_w <> 'A') then
					select	max(ie_gerar_usuario_even_repasse)
					into STRICT	ie_gerar_usu_even_rep_w
					from	pls_parametros
					where	cd_estabelecimento = cd_estabelecimento_p;
					
					if (coalesce(ie_gerar_usu_even_rep_w,'N') = 'S') then
						nr_seq_segurado_w := null;
					end if;
				end if;
			end if;
		end if;
		
	end if;
	
	select	max(nr_seq_emissor)
	into STRICT	nr_seq_emissor_w
	from	pls_parametros
	where	cd_estabelecimento	= cd_estabelecimento_p;
	
	select	pls_obter_campos_carteira(cd_usuario_plano_p,nr_seq_emissor_w,'CM')
	into STRICT	cd_cooperativa_w
	;
	
	begin
		select	count(1)
		into STRICT	qt_operadora_w
		from	pls_congenere
		where	(cd_cooperativa)::numeric  = (cd_cooperativa_w)::numeric;
	exception
	when others then
		qt_operadora_w := 0;
	end;
	
	if (qt_operadora_w > 0) then
		cd_operadora_p	:= cd_cooperativa_w;
	elsif (qt_operadora_w = 0) then
		cd_operadora_p	:= null;
	end if;	
end if;

if (cd_operadora_p IS NOT NULL AND cd_operadora_p::text <> '') then
	begin	
	select  max(b.ds_razao_social),
		max(a.nr_sequencia),
		max(a.cd_cooperativa)
	into STRICT	nm_operadora_p,
		nr_seq_congenere_w,
		cd_cooperativa_w
	from    pls_congenere a,
		pessoa_juridica b 
	where   a.cd_cgc =  b.cd_cgc 				
	and     (a.cd_cooperativa)::numeric  =  (cd_operadora_p)::numeric;
	exception
	when others then
		nm_operadora_p	:= null;
		nr_seq_congenere_w := null;
		cd_cooperativa_w := null;
	end;

	cd_operadora_p := cd_cooperativa_w;
	if (cd_cooperativa_w IS NOT NULL AND cd_cooperativa_w::text <> '') then
		cd_operadora_usuario_w := coalesce(pls_obter_unimed_estab(cd_estabelecimento_p), '0');
		
		if (cd_operadora_usuario_w <> cd_cooperativa_w and (coalesce(nr_seq_segurado_w::text, '') = '' or nr_seq_segurado_w = 0))then
		
			-- OS 563794 - Allan - Verificar se possui regra, para bloqueio de cadastro de beneficiários eventuais, retornar a sequencia e a mensagem da regra
			SELECT * FROM pls_obter_regra_bloq_benef_web(nr_seq_congenere_w, ds_retorno_regra_bloq_w, nr_seq_regra_bloq_w, ie_bloq_alteracao_benef_w) INTO STRICT ds_retorno_regra_bloq_w, nr_seq_regra_bloq_w, ie_bloq_alteracao_benef_w;				
			ie_tipo_erro_p := '2';	

			/* Valida as informações da carteirinha do beneficiário, tratameto específico para o digito verificador */

			SELECT * FROM pls_consistir_cartao_benef(	cd_usuario_plano_p, 'CB', null, null, nm_usuario_p, cd_estabelecimento_p, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ie_digito_verificador_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w) INTO STRICT ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ie_digito_verificador_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_number_w, ds_retorno_number_w, ds_retorno_varchar_w, ds_retorno_varchar_w, ds_retorno_varchar_w;									
			
			if ( ie_digito_verificador_w = 'N' ) then
				/* As letras VAL são passadas para validação no Java, não pode ser retirada */

				ds_retorno_regra_bloq_w := 'VAL#Dígito verificador incorreto!';
			end if;			
			
		elsif (cd_operadora_usuario_w = cd_cooperativa_w and (coalesce(nr_seq_segurado_w::text, '') = '' or nr_seq_segurado_w = 0)) then
			ie_tipo_erro_p := '1';	
		end if;
	end if;
end if;


if ((nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') and nr_seq_segurado_w > 0 ) then
	select	ie_tipo_segurado,
		nr_seq_congenere,
		substr(pls_obter_dados_segurado(nr_sequencia, 'CS'), 1,2) ie_situacao_benef,
		substr(pls_obter_dados_segurado(nr_sequencia, 'DS'), 1,255) ds_situacao_benef
	into STRICT	ie_tipo_segurado_w,
		nr_seq_congenere_w,
		ie_situacao_benef_w,
		ds_situacao_benef_w
	from   	pls_segurado
	where  	nr_sequencia = nr_seq_segurado_w;
	
	if (coalesce(cd_operadora_p::text, '') = '') then
		select  max(a.cd_cooperativa)
		into STRICT	cd_operadora_p
		from    pls_congenere a
		where   a.nr_sequencia = nr_seq_congenere_w;
	end if;
	
	nr_seq_plano_w 	:= pls_obter_produto_benef(nr_seq_segurado_w, clock_timestamp());
	
	ds_plano_w	:= pls_obter_dados_produto(nr_seq_plano_w,'N');
	
	ie_tipo_segurado_p	:= ie_tipo_segurado_w;
	nr_seq_plano_p 		:= nr_seq_plano_w;
	nm_produto_p		:= ds_plano_w;
	nr_seq_segurado_p	:= nr_seq_segurado_w;
	cd_pessoa_fisica_p	:= cd_pessoa_fisica_w;
	ds_situacao_benef_p	:= ds_situacao_benef_w;
	
	-- Utilizado na OPSW - Requisição para validar o parâmetro [38] - Situação de beneficiário Permitido 
	select 	CASE WHEN ie_situacao_benef_w='T' THEN  '1' WHEN ie_situacao_benef_w='A' THEN  '2' WHEN ie_situacao_benef_w='I' THEN  '3' WHEN ie_situacao_benef_w='M' THEN  '4' WHEN ie_situacao_benef_w='D' THEN  '5'  ELSE '0' END
	into STRICT	ie_situacao_benef_p
	;
	
	if (nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '') then
		nr_seq_tipo_acomodacao_p := pls_obter_dados_produto(nr_seq_plano_w,'AP');
	end if;
	
	SELECT * FROM SELECT * FROM pls_verifica_regra_lib_web(nr_seq_segurado_w, nr_seq_usuario_web_p, 'C', ie_tipo_guia_p) INTO STRICT ,  INTO 'C', ie_tipo_guia_p;
	/* Sestari - OS 527324 */
			
	cd_usuario_plano_p := pls_obter_dados_segurado(nr_seq_segurado_w, 'CR');
end if;

if	(( coalesce(cd_operadora_p::text, '') = '' or length(ds_tarja_magnetica_w) < 17) and (coalesce(nr_seq_segurado_w::text, '') = '' or nr_seq_segurado_w = 0)) then
	ie_tipo_erro_p := '1';
end if;

if (coalesce(ie_tipo_erro_p::text, '') = '' and (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') and nr_seq_segurado_w > 0 and (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') ) then
	select	max(ie_usuario_eventual)
	into STRICT	ie_permite_usu_eve_cong_w
	from	pls_congenere
	where	nr_sequencia = nr_seq_congenere_w;
end if;

ie_permite_usu_eve_cong_p 	:= ie_permite_usu_eve_cong_w;
nr_seq_congenere_p 		:= nr_seq_congenere_w;

ds_retorno_regra_bloq_p		:= ds_retorno_regra_bloq_w;
nr_seq_regra_bloq_p 		:= nr_seq_regra_bloq_w;

<<final>>
ie_tipo_erro_p	:= ie_tipo_erro_p;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_valida_beneficiario_web ( ds_tarja_magnetica_p text, ie_tipo_identificacao_p text, nr_seq_prestador_p bigint, nr_seq_usuario_web_p bigint, ie_exige_biometria_p INOUT text, ie_regra_cartao_p INOUT text, nm_beneficiario_p INOUT text, cd_usuario_plano_p INOUT text, nr_via_p INOUT text, dt_validade_p INOUT text, cd_operadora_p INOUT text, dt_validade_format_p INOUT timestamp, dt_nascimento_p INOUT text, nr_seq_plano_p INOUT bigint, nm_produto_p INOUT text, nr_seq_segurado_p INOUT bigint, nm_operadora_p INOUT text, nr_seq_congenere_p INOUT bigint, ie_tipo_erro_p INOUT text, cd_pessoa_fisica_p INOUT text, nr_seq_produto_p INOUT text, nr_seq_tipo_acomodacao_p INOUT bigint, ie_tipo_segurado_p INOUT text, ds_abrangencia_p INOUT text, ie_abrangencia_p INOUT text, ie_permite_usu_eve_cong_p INOUT text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_tipo_guia_p text, ie_funcao_liberada_p bigint, ie_tipo_processo_p text, ie_urgencia_p text, ds_retorno_regra_bloq_p INOUT text, nr_seq_regra_bloq_p INOUT bigint, ie_situacao_benef_p INOUT text, ds_situacao_benef_p INOUT text, ds_erro_p INOUT text, ds_token_p text default null, ds_qrcode_p text DEFAULT NULL) FROM PUBLIC;

