-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE importar_itens_agenda_int_opme ( cd_reserva_p text, ie_evento_p text, cd_status_p bigint, nm_usuario_p text, cd_material_p text, qt_material_p text, vl_unitario_p bigint, vl_desconto_p bigint, ie_homologado_p text, ie_exclusivo_p text, cd_cond_pagto_p text, ds_observacao_p text, cd_cnpj_p text, nr_orcamento_p text, ds_erro_p INOUT text, nr_cot_compra_p INOUT bigint) AS $body$
DECLARE


/*
ie_evento_p
 0	= Dados do agendamento
 1	= Itens - OPME
*/
qt_existe_w			bigint;
nr_seq_pac_opme_w		bigint;
cd_cond_pagto_w			bigint;
ds_erro_w			varchar(255);
nr_seq_integrada_w		bigint;

cd_cnpj_w			varchar(14);
nr_sequencia_w			bigint;
nr_seq_agenda_w			bigint;
nr_cot_compra_w			bigint;
cd_moeda_w			bigint;
cd_condicao_pagto_w		bigint;

cd_material_w			bigint;
ie_cadastra_pj_w		varchar(1) := 'S';
cd_tipo_pessoa_w		smallint;
cd_estab_w			smallint;
ds_forma_pagto_fornec_w		varchar(80);
ds_titulo_w			varchar(255);
ds_comunicado_w			varchar(2000);
nr_seq_agenda_pac_w		bigint;
nr_seq_fornec_w			bigint;
nr_item_cotacao_w		bigint;
nr_sequencia_item_w		bigint;
nr_item_cot_compra_w		bigint;
cd_estabelecimento_w		smallint;
cd_cep_w			varchar(15);
sg_estado_w			pessoa_juridica.sg_estado%type;
nr_seq_classif_w		bigint;
dt_retorno_prev_w		timestamp;

ie_grava_cotacao_w		varchar(1);
cd_comprador_w			varchar(10);
vl_preco_liquido_w		double precision;
ds_marca_w			varchar(30);
ie_gerar_autor_cirurgia_w	varchar(1)	:= 'N';
nm_usuario_agenda_w		varchar(255);
qt_orcamento_w			bigint;
nr_cot_compra_orc_w		bigint;
qt_itens_w			bigint;
qt_registro_w			bigint;
vl_unitario_w			double precision;
qt_material_w			double precision;
ie_atualiza_tabela_w		varchar(1);
ie_aplicar_desconto_w	parametros_opme.ie_aplicar_desconto%type;
cd_tabela_preco_w		bigint;	
cd_convenio_w			bigint;
cd_categoria_w			varchar(10);
vl_unitario_item_w		double precision;
vl_unitario_atual_w		double precision;
qt_autorizacao_w		bigint;
nr_seq_autorizacao_w		bigint;
nr_seq_item_autor_w		bigint;
ds_retorno_w			varchar(255);
vl_preco_mat_w			double precision;
dt_agenda_w			timestamp;	
tx_custo_item_w 		parametros_opme.tx_custo_item%type;


BEGIN

select	cd_estabelecimento,
	b.nm_usuario_orig
into STRICT	cd_estabelecimento_w,
	nm_usuario_agenda_w
from	agenda a,
	agenda_paciente b
where 	a.cd_agenda = b.cd_agenda
and	b.nr_sequencia = cd_reserva_p;

ie_gerar_autor_cirurgia_w	:= obter_valor_param_usuario(871,85,obter_perfil_ativo,nm_usuario_agenda_w,cd_estabelecimento_w);

cd_cnpj_w	:= cd_cnpj_p;
/*Consiste o agendamento*/

if (ie_evento_p = '0') then
	begin

	select	count(*)
	into STRICT	qt_existe_w
	from	agenda_paciente
	where	nr_sequencia = cd_reserva_p;
	if (qt_existe_w = 0) then
		ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(281595) || cd_reserva_p || WHEB_MENSAGEM_PCK.get_texto(281596);
	end if;

	end;

	if (ie_homologado_p = 'S') then
		delete from agenda_pac_opme
		where nr_seq_agenda = cd_reserva_p;
	end if;
	
/*Consiste os itens*/

elsif (ie_evento_p = '1') then
	begin

	select	count(*)
	into STRICT	qt_existe_w
	from	material
	where	cd_material = cd_material_p;
	if (qt_existe_w = 0) then
		ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(281621) || cd_material_p || WHEB_MENSAGEM_PCK.get_texto(281596);
	end if;

	select	count(*)
	into STRICT	qt_existe_w
	from	material
	where	cd_material = cd_material_p
	and 	ie_situacao = 'I';
	if (qt_existe_w > 0) then
		ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(281621) || cd_material_p || WHEB_MENSAGEM_PCK.get_texto(281622);
	end if;

	select	coalesce(max(cd_condicao_pagamento), 0)
	into STRICT	cd_cond_pagto_w
	from	condicao_pagamento
	where	cd_condicao_pagamento = cd_cond_pagto_p;
	if (cd_cond_pagto_w = 0) then
		ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(281624) || cd_cond_pagto_p || WHEB_MENSAGEM_PCK.get_texto(281596);
	end if;

	if (cd_cnpj_p IS NOT NULL AND cd_cnpj_p::text <> '') then
		select	count(*)
		into STRICT	qt_existe_w
		from	pessoa_juridica
		where	cd_cgc		= cd_cnpj_p;
		if (qt_existe_w = 0) then
			ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(281625) || cd_cnpj_p || WHEB_MENSAGEM_PCK.get_texto(281627);
		end if;
	end if;

	if (coalesce(cd_cnpj_p::text, '') = '') then
		ds_erro_w	:= WHEB_MENSAGEM_PCK.get_texto(281631);
	end if;

	end;

/*Grava os itens - Caso nÃ£o tenha erros*/

elsif (ie_evento_p = '10') then
	begin
	
	select 	coalesce(max(nr_seq_agenda_int),0)
	into STRICT 	nr_seq_integrada_w
	from	agenda_integrada_item
	where	nr_seq_agenda_exame = cd_reserva_p;
	
	select	nextval('agenda_pac_opme_seq')
	into STRICT	nr_seq_pac_opme_w
	;

	select	max(cd_condicao_pagamento)
	into STRICT	cd_cond_pagto_w
	from	condicao_pagamento
	where	cd_condicao_pagamento = cd_cond_pagto_p;

	select 	coalesce(max(ie_grava_cotacao), 'N'),
		coalesce(max(ie_atualiza_tabela), 'N'),
		coalesce(max(ie_aplicar_desconto), 'S')
	into STRICT	ie_grava_cotacao_w,
		ie_atualiza_tabela_w,
		ie_aplicar_desconto_w
	from	parametros_opme
	where	ie_sistema_integracao = 'I'
	and	cd_estabelecimento = cd_estabelecimento_w;
	
	select	cd_comprador_padrao,
		cd_moeda_padrao
	into STRICT	cd_comprador_w,
		cd_moeda_w	
	from	parametro_compras
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	if (ie_atualiza_tabela_w in ('C','D')) then
		
		select	b.cd_convenio,
			b.cd_categoria,
			b.dt_agenda
		into STRICT	cd_convenio_w,
			cd_categoria_w,
			dt_agenda_w
		from	agenda a,
			agenda_paciente b
		where 	a.cd_agenda = b.cd_agenda	
		and 	b.nr_sequencia = cd_reserva_p
		and 	a.cd_estabelecimento = cd_estabelecimento_w;
		
		select 	max(cd_tab_preco_mat)
		into STRICT	cd_tabela_preco_w
		from	convenio_preco_mat
		where 	cd_convenio = cd_convenio_w
		and	cd_categoria = cd_categoria_w
		and	ie_integracao_opme = 'S'
		and 	cd_estabelecimento = cd_estabelecimento_w;
		
		if (coalesce(cd_tabela_preco_w,0) > 0) then
			if (ie_aplicar_desconto_w = 'S') and (coalesce(vl_unitario_p,0) > 0 ) then
				vl_preco_mat_w := (vl_unitario_p - vl_desconto_p);
			else
				vl_preco_mat_w := vl_unitario_p;
			end if;
			if (ie_atualiza_tabela_w = 'D')  then
				CALL inpart_atua_tab_preco_dt_agen(cd_material_p,dt_agenda_w,cd_tabela_preco_w,cd_estabelecimento_w,vl_preco_mat_w,nm_usuario_p);
			else
				CALL inpart_atualiza_tab_preco(cd_material_p,clock_timestamp(),cd_tabela_preco_w,cd_estabelecimento_w,vl_preco_mat_w, cd_cnpj_w, nm_usuario_p);
			end if;	
		end if;
		
	end if;	
	
	if (ie_grava_cotacao_w = 'S') and ((cd_material_p)::numeric  > 0) then
	
		select	count(*)
		into STRICT	qt_existe_w
		from	cot_compra
		where	nr_seq_agenda_pac = cd_reserva_p;
				
		if (qt_existe_w > 0) and (coalesce(nr_cot_compra_p,0) = 0) then
			select	coalesce(max(nr_cot_compra),0)
			into STRICT	nr_cot_compra_w
			from	cot_compra
			where	nr_seq_agenda_pac = cd_reserva_p;
		elsif (qt_existe_w > 0) and (coalesce(nr_cot_compra_p,0) > 0) then
			nr_cot_compra_w := nr_cot_compra_p;
		end if;
		
		if (qt_existe_w = 0) then
						
			select	nextval('cot_compra_seq')
			into STRICT	nr_cot_compra_w
			;
			
			insert into cot_compra(
				nr_cot_compra,
				dt_cot_compra,
				dt_atualizacao,
				cd_comprador,
				nm_usuario,
				cd_pessoa_solicitante,
				cd_estabelecimento,
				dt_retorno_prev,
				nr_orcamento,
				nr_seq_agenda_pac,
				ie_finalidade_cotacao)
			values ( nr_cot_compra_w,
				clock_timestamp(),
				clock_timestamp(),
				cd_comprador_w,
				nm_usuario_p,
				cd_comprador_w,
				cd_estabelecimento_w,
				clock_timestamp() + interval '7 days', --dt_retorno_prev_w);
				nr_orcamento_p,
				cd_reserva_p,
				'F');
		end if;
		

		if (nr_cot_compra_w > 0) then
		
			select	count(*)
			into STRICT	qt_existe_w
			from	cot_compra_item a
			where	nr_cot_compra = nr_cot_compra_w
			and	cd_material = (cd_material_p)::numeric
			and	qt_material = qt_material_p;
		
			if (qt_existe_w = 0) then
				select	clock_timestamp() + interval '7 days'
				into STRICT	dt_retorno_prev_w
				from	cot_compra
				where	nr_cot_compra = nr_cot_compra_w;
				
				select	coalesce(max(nr_item_cot_compra),0) +1
				into STRICT	nr_item_cot_compra_w
				from	cot_compra_item
				where	nr_cot_Compra = nr_cot_Compra_w;
					
				insert into cot_compra_item(		
					nr_cot_compra,
					nr_item_cot_compra,
					cd_material,
					qt_material,
					cd_unidade_medida_compra,
					dt_atualizacao,
					dt_limite_entrega,
					nm_usuario,
					ie_situacao)
				values (	nr_cot_compra_w,
					nr_item_cot_compra_w,
					(cd_material_p)::numeric ,
					replace(qt_material_p,'.',','),
					obter_dados_material((cd_material_p)::numeric ,'UMP'),
					clock_timestamp(),
					dt_retorno_prev_w, --dt_retorno_prev_w
					nm_usuario_p,
					'A');
					
				insert into cot_compra_item_entrega(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_cot_compra,
					nr_item_cot_compra,
					dt_entrega,
					qt_entrega)
				values (	nextval('cot_compra_item_entrega_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_cot_compra_w,
					nr_item_cot_compra_w,
					dt_retorno_prev_w,--dt_retorno_prev_w,
					replace(qt_material_p,'.',','));	

				select	coalesce(max(nr_sequencia),0)
				into STRICT	nr_seq_fornec_w
				from	cot_compra_forn
				where	nr_cot_compra = nr_cot_compra_w
				and	cd_cgc_fornecedor = cd_cnpj_w;
				
				if (nr_seq_fornec_w = 0) then
				
					select	nextval('cot_compra_forn_seq')
					into STRICT	nr_seq_fornec_w
					;
				
					insert	into cot_compra_forn(
						nr_sequencia,
						nr_cot_compra,
						cd_cgc_fornecedor,
						dt_atualizacao,
						nm_usuario,
						ds_observacao,
						cd_moeda,
						cd_condicao_pagamento,
						ie_frete,
						ie_gerado_bionexo,
						ie_status_envio_email_lib)
					values (	nr_seq_fornec_w,
						nr_cot_compra_w,
						cd_cnpj_w,
						clock_timestamp(),
						nm_usuario_p,
						'',
						cd_moeda_w, 
						cd_cond_pagto_w,
						'C',
						'N',
						'N');		
				
				end if;	
				
				select	coalesce(min(a.nr_item_cot_compra),0)
				into STRICT	nr_item_cotacao_w
				from	cot_compra_item a
				where	a.nr_cot_compra	= nr_cot_compra_w
				and	a.cd_material = (cd_material_p)::numeric;
				
				select	nextval('cot_compra_forn_item_seq')
				into STRICT	nr_sequencia_item_w
				;

				vl_preco_liquido_w	:= round(((vl_unitario_p * qt_material_p) - coalesce(vl_desconto_p,0)),2);
				ds_marca_w		:= substr(obter_marca_material((cd_material_p)::numeric ,'D'),1,30);
				
				insert into cot_compra_forn_item(
					nr_sequencia,
					nr_seq_cot_forn,
					nr_cot_compra,
					nr_item_cot_compra,
					cd_cgc_fornecedor,
					qt_material,
					vl_unitario_material,
					dt_atualizacao,
					nm_usuario,
					vl_preco_liquido,
					vl_total_liquido_item,
					ie_situacao,
					ds_marca,
					ds_marca_fornec,
					cd_material)
				values (	nr_sequencia_item_w,
					nr_seq_fornec_w,
					nr_cot_compra_w,
					nr_item_cotacao_w,
					cd_cnpj_w,
					qt_material_p,
					vl_unitario_p,
					clock_timestamp(),
					nm_usuario_p,
					vl_preco_liquido_w,
					vl_preco_liquido_w,
					'A',
					substr(ds_marca_w,1,30),
					substr(ds_marca_w,1,30),
					(cd_material_p)::numeric );
				
					
			end if;
		end if;
	end if;
	
	select	count(*)
	into STRICT	qt_existe_w
	from	agenda_pac_opme a
	where	nr_seq_agenda = cd_reserva_p
	and	cd_material = cd_material_p
	and	qt_material = qt_material_p
	and	coalesce(cd_cgc, cd_cnpj_p) = cd_cnpj_p
	and	ie_integracao = 'S';
		
	if (qt_existe_w > 0) then
		select	max(vl_unitario_atualizado)
		into STRICT	vl_unitario_atual_w
		from	agenda_pac_opme
		where	nr_seq_agenda = cd_reserva_p
		and	cd_material = cd_material_p
		and	coalesce(cd_cgc, cd_cnpj_p) = cd_cnpj_p
		and	qt_material = qt_material_p;
	end if;
	
	if (qt_existe_w = 0) then
	
		insert into agenda_pac_opme(
			nr_sequencia,			nr_seq_agenda,
			dt_atualizacao,			nm_usuario,
			cd_material,			qt_material,
			vl_unitario_item,		vl_desconto,
			cd_cond_pagto,
			ie_origem_inf,			nr_seq_apres,
			ie_padrao,			ds_observacao,
			ie_autorizado,			cd_cgc,
			dt_atualizacao_nrec,		nm_usuario_nrec,
			ie_integracao,			ie_integracao_util,
			ie_gerar_autor,
			nr_seq_agenda_int,		nr_orcamento,
			vl_unitario_atualizado)
		values ( nr_seq_pac_opme_w,		cd_reserva_p,
			clock_timestamp(),			nm_usuario_p,
			cd_material_p,			qt_material_p,
			vl_unitario_p,			vl_desconto_p,
			cd_cond_pagto_w,
			'I',				500,
			'S',				ds_observacao_p,
			'P',				cd_cnpj_p,
			clock_timestamp(),			nm_usuario_p,
			'S',				'S',
			'S',
			CASE WHEN coalesce(nr_seq_integrada_w,0)=0 THEN null  ELSE nr_seq_integrada_w END ,
			coalesce(nr_orcamento_p,0),		(vl_unitario_p - vl_desconto_p));
		
		
		if (coalesce(nr_seq_pac_opme_w,0) > 0) then
			CALL gerar_autor_regra(null,null,null,null,null,null,'AP',nm_usuario_p,cd_reserva_p,null,null,null,nr_seq_pac_opme_w,null,'','','');
		end if;
	
	-- Existia na agenda_pac_opme e foi atualizado o preÃ§o.
	elsif (qt_existe_w > 0) and (vl_unitario_atual_w <> (vl_unitario_p - vl_desconto_p)) then
		
		select	max(nr_sequencia)
		into STRICT	nr_sequencia_w
		from	agenda_pac_opme
		where	nr_seq_agenda = cd_reserva_p
		and	cd_material = cd_material_p
		and	qt_material = qt_material_p
		and	coalesce(cd_cgc, cd_cnpj_p) = cd_cnpj_p
		and	ie_integracao = 'S';
		
		update	agenda_pac_opme
		set	vl_unitario_atualizado = (vl_unitario_p - vl_desconto_p),
			dt_atualizacao 	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia = nr_sequencia_w;
		
		-- Verifica se existe autorizaÃ§Ã£o com status que pode alterar.
		select	count(*)
		into STRICT	qt_autorizacao_w
		from	autorizacao_convenio a
		where	a.nr_seq_agenda = cd_reserva_p
		and not exists (	SELECT	1
				from	estagio_autorizacao x
				where	x.nr_sequencia = a.nr_seq_estagio
				and	x.ie_interno in (10,70,90));
	
		if (qt_autorizacao_w > 0) then
		
			select	max(nr_sequencia)
			into STRICT	nr_seq_autorizacao_w
			from	autorizacao_convenio a
			where	a.nr_seq_agenda = cd_reserva_p
			and not exists (	SELECT	1
					from	estagio_autorizacao x
					where	x.nr_sequencia = a.nr_seq_estagio
					and	x.ie_interno in (10,70,90))
			and exists (	select	1
					from	material_autorizado z
					where	z.nr_sequencia_autor = a.nr_sequencia
					and	z.cd_material = cd_material_p
					and	z.qt_solicitada = qt_material_p);
			
			-- Verifica se existe o item dentro da autorizaÃ§Ã£o
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_item_autor_w
			from	material_autorizado
			where	nr_sequencia_autor = nr_seq_autorizacao_w
			and	cd_material = cd_material_p
			and	qt_solicitada = qt_material_p
			and	coalesce(cd_cgc_fabricante, cd_cnpj_p) = cd_cnpj_p;
			
			if (nr_seq_item_autor_w > 0) then
				update	material_autorizado
				set	vl_unitario = vl_unitario_p,
					vl_cotado = (vl_unitario_p - vl_desconto_p),
					ie_origem_preco = 8,
					dt_atualizacao 	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia =nr_seq_item_autor_w;
				
				ds_retorno_w := atualizar_preco_mat_aut_conv(null, nr_seq_item_autor_w, cd_estabelecimento_w, nm_usuario_p, ds_retorno_w);
			else	-- Se nÃ£o existe gera nova autorizaÃ§Ã£o
				if (coalesce(nr_sequencia_w,0) > 0) then
					CALL gerar_autor_regra(null,null,null,null,null,null,'AP',nm_usuario_p,cd_reserva_p,null,null,null,nr_sequencia_w,null,'','','');
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_autorizacao_w
					from	autorizacao_convenio a
					where	a.nr_seq_agenda = cd_reserva_p
					and not exists (	SELECT	1
							from	estagio_autorizacao x
							where	x.nr_sequencia = a.nr_seq_estagio
							and	x.ie_interno in (10,70,90));
			
					select	coalesce(max(nr_sequencia),0)
					into STRICT	nr_seq_item_autor_w
					from	material_autorizado
					where	nr_sequencia_autor = nr_seq_autorizacao_w
					and	cd_material = cd_material_p
					and	qt_solicitada = qt_material_p;
					
					/*
					Comentado o comando abaixo pois nÃ£o estava atualizando corretamente o vl_unitario. Isso ocorria
					pois o vl_unitario Ã© atualizado na gerar_autor regra e depois estava sendo realizado o update do campo
					
					update	material_autorizado
					set	vl_unitario = vl_unitario_p,
						vl_cotado = (vl_unitario_p - vl_desconto_p)
					where	nr_sequencia =nr_seq_item_autor_w;*/
					
					update	material_autorizado
					set	vl_cotado = (vl_unitario_p - vl_desconto_p),
						dt_atualizacao 	= clock_timestamp(),
						nm_usuario	= nm_usuario_p
					where	nr_sequencia =nr_seq_item_autor_w;
					
				end if;
			end if;
		else
			if (coalesce(nr_sequencia_w,0) > 0) then
				CALL gerar_autor_regra(null,null,null,null,null,null,'AP',nm_usuario_p,cd_reserva_p,null,null,null,nr_sequencia_w,null,'','','');
			
				select	max(nr_sequencia)
				into STRICT	nr_seq_autorizacao_w
				from	autorizacao_convenio a
				where	a.nr_seq_agenda = cd_reserva_p
				and not exists (	SELECT	1
						from	estagio_autorizacao x
						where	x.nr_sequencia = a.nr_seq_estagio
						and	x.ie_interno in (10,70,90));
		
				select	coalesce(max(nr_sequencia),0)
				into STRICT	nr_seq_item_autor_w
				from	material_autorizado
				where	nr_sequencia_autor = nr_seq_autorizacao_w
				and	cd_material = cd_material_p
				and	qt_solicitada = qt_material_p
				and	coalesce(cd_cgc_fabricante, cd_cnpj_p) = cd_cnpj_p;
				
				/*
				Comentado o comando abaixo pois nÃ£o estava atualizando corretamente o vl_unitario. Isso ocorria
				pois o vl_unitario Ã© atualizado na gerar_autor regra e depois estava sendo realizado o update do campo
				
				update	material_autorizado
				set	vl_unitario = vl_unitario_p,
					vl_cotado = (vl_unitario_p - vl_desconto_p)
				where	nr_sequencia =nr_seq_item_autor_w;*/
				
				update	material_autorizado
				set	vl_cotado = (vl_unitario_p - vl_desconto_p),
					dt_atualizacao 	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia = nr_seq_item_autor_w;
			
			end if;
		end if;
	end if;

	end;
elsif (ie_evento_p = '20') then
	begin
	
	select	nextval('agenda_pac_opme_seq')
	into STRICT	nr_seq_pac_opme_w
	;
	
	select 	coalesce(max(nr_seq_agenda_int),0)
	into STRICT 	nr_seq_integrada_w
	from	agenda_integrada_item
	where	nr_seq_agenda_exame = cd_reserva_p;
	
	select	max(cd_condicao_pagamento)
	into STRICT	cd_cond_pagto_w
	from	condicao_pagamento
	where	cd_condicao_pagamento = cd_cond_pagto_p;

	select 	coalesce(max(ie_grava_cotacao), 'N'),
		coalesce(max(ie_atualiza_tabela), 'N')
	into STRICT	ie_grava_cotacao_w,
		ie_atualiza_tabela_w
	from	parametros_opme
	where	ie_sistema_integracao = 'I'
	and	cd_estabelecimento = cd_estabelecimento_w;
	
	select	max(cd_comprador_padrao),
		max(cd_moeda_padrao)
	into STRICT	cd_comprador_w,
		cd_moeda_w	
	from	parametro_compras
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	if (ie_atualiza_tabela_w in ('C','D')) then
		
		select	max(b.cd_convenio),
			max(b.cd_categoria),
			max(b.dt_agenda)
		into STRICT	cd_convenio_w,
			cd_categoria_w,
			dt_agenda_w
		from	agenda a,
			agenda_paciente b
		where 	a.cd_agenda = b.cd_agenda	
		and 	b.nr_sequencia = cd_reserva_p
		and 	a.cd_estabelecimento = cd_estabelecimento_w;
		
		select 	max(cd_tab_preco_mat)
		into STRICT	cd_tabela_preco_w
		from	convenio_preco_mat
		where 	cd_convenio = cd_convenio_w
		and	cd_categoria = cd_categoria_w
		and	ie_integracao_opme = 'S'
		and 	cd_estabelecimento = cd_estabelecimento_w;
		
		if (coalesce(cd_tabela_preco_w,0) > 0) then
			if (coalesce(vl_unitario_p,0) > 0) then
				vl_preco_mat_w := (vl_unitario_p - vl_desconto_p);
			else
				vl_preco_mat_w := vl_unitario_p;
			end if;
			if (ie_atualiza_tabela_w = 'D')  then
				CALL inpart_atua_tab_preco_dt_agen(cd_material_p,dt_agenda_w,cd_tabela_preco_w,cd_estabelecimento_w,vl_preco_mat_w,nm_usuario_p);
			else
				CALL inpart_atualiza_tab_preco(cd_material_p,clock_timestamp(),cd_tabela_preco_w,cd_estabelecimento_w,vl_preco_mat_w, cd_cnpj_w, nm_usuario_p);
			end if;	
		end if;
		
	end if;	
	
	if (ie_grava_cotacao_w = 'S') and ((cd_material_p)::numeric  > 0) then
	
		select	count(*)
		into STRICT	qt_existe_w
		from	cot_compra
		where	nr_seq_agenda_pac = cd_reserva_p;
				
		if (qt_existe_w > 0) and (coalesce(nr_cot_compra_p,0) = 0) then
			select	coalesce(max(nr_cot_compra),0)
			into STRICT	nr_cot_compra_w
			from	cot_compra
			where	nr_seq_agenda_pac = cd_reserva_p;
		elsif (qt_existe_w > 0) and (coalesce(nr_cot_compra_p,0) > 0) then
			nr_cot_compra_w := nr_cot_compra_p;
		end if;
		
		if (qt_existe_w = 0) then
						
			select	nextval('cot_compra_seq')
			into STRICT	nr_cot_compra_w
			;
			
			insert into cot_compra(
				nr_cot_compra,
				dt_cot_compra,
				dt_atualizacao,
				cd_comprador,
				nm_usuario,
				cd_pessoa_solicitante,
				cd_estabelecimento,
				dt_retorno_prev,
				nr_orcamento,
				nr_seq_agenda_pac,
				ie_finalidade_cotacao)
			values ( nr_cot_compra_w,
				clock_timestamp(),
				clock_timestamp(),
				cd_comprador_w,
				nm_usuario_p,
				cd_comprador_w,
				cd_estabelecimento_w,
				clock_timestamp() + interval '7 days', --dt_retorno_prev_w);
				nr_orcamento_p,
				cd_reserva_p,
				'F');
		end if;

		if (nr_cot_compra_w > 0) then
		
			select	count(*)
			into STRICT	qt_existe_w
			from	cot_compra_item a
			where	nr_cot_compra = nr_cot_compra_w
			and	cd_material = (cd_material_p)::numeric
			and	qt_material = qt_material_p;
		
			if (qt_existe_w = 0) then
				select	clock_timestamp() + interval '7 days'
				into STRICT	dt_retorno_prev_w
				from	cot_compra
				where	nr_cot_compra = nr_cot_compra_w;
				
				select	coalesce(max(nr_item_cot_compra),0) +1
				into STRICT	nr_item_cot_compra_w
				from	cot_compra_item
				where	nr_cot_Compra = nr_cot_Compra_w;
					
				insert into cot_compra_item(		
					nr_cot_compra,
					nr_item_cot_compra,
					cd_material,
					qt_material,
					cd_unidade_medida_compra,
					dt_atualizacao,
					dt_limite_entrega,
					nm_usuario,
					ie_situacao)
				values (	nr_cot_compra_w,
					nr_item_cot_compra_w,
					(cd_material_p)::numeric ,
					replace(qt_material_p,'.',','),
					obter_dados_material((cd_material_p)::numeric ,'UMP'),
					clock_timestamp(),
					dt_retorno_prev_w, --dt_retorno_prev_w
					nm_usuario_p,
					'A');
					
				insert into cot_compra_item_entrega(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_cot_compra,
					nr_item_cot_compra,
					dt_entrega,
					qt_entrega)
				values (	nextval('cot_compra_item_entrega_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_cot_compra_w,
					nr_item_cot_compra_w,
					dt_retorno_prev_w,--dt_retorno_prev_w,
					replace(qt_material_p,'.',','));	

				select	coalesce(max(nr_sequencia),0)
				into STRICT	nr_seq_fornec_w
				from	cot_compra_forn
				where	nr_cot_compra = nr_cot_compra_w
				and	cd_cgc_fornecedor = cd_cnpj_w;
				
				if (nr_seq_fornec_w = 0) then
				
					select	nextval('cot_compra_forn_seq')
					into STRICT	nr_seq_fornec_w
					;
				
					insert	into cot_compra_forn(
						nr_sequencia,
						nr_cot_compra,
						cd_cgc_fornecedor,
						dt_atualizacao,
						nm_usuario,
						ds_observacao,
						cd_moeda,
						cd_condicao_pagamento,
						ie_frete,
						ie_gerado_bionexo,
						ie_status_envio_email_lib)
					values (	nr_seq_fornec_w,
						nr_cot_compra_w,
						cd_cnpj_w,
						clock_timestamp(),
						nm_usuario_p,
						'',
						cd_moeda_w, 
						cd_cond_pagto_w,
						'C',
						'N',
						'N');		
				
				end if;	
				
				select	coalesce(min(a.nr_item_cot_compra),0)
				into STRICT	nr_item_cotacao_w
				from	cot_compra_item a
				where	a.nr_cot_compra	= nr_cot_compra_w
				and	a.cd_material = (cd_material_p)::numeric;
				
				select	nextval('cot_compra_forn_item_seq')
				into STRICT	nr_sequencia_item_w
				;

				vl_preco_liquido_w	:= round(((vl_unitario_p * qt_material_p) - coalesce(vl_desconto_p,0)),2);
				ds_marca_w		:= substr(obter_marca_material((cd_material_p)::numeric ,'D'),1,30);
				
				insert into cot_compra_forn_item(
					nr_sequencia,
					nr_seq_cot_forn,
					nr_cot_compra,
					nr_item_cot_compra,
					cd_cgc_fornecedor,
					qt_material,
					vl_unitario_material,
					dt_atualizacao,
					nm_usuario,
					vl_preco_liquido,
					vl_total_liquido_item,
					ie_situacao,
					ds_marca,
					ds_marca_fornec,
					cd_material)
				values (	nr_sequencia_item_w,
					nr_seq_fornec_w,
					nr_cot_compra_w,
					nr_item_cotacao_w,
					cd_cnpj_w,
					qt_material_p,
					vl_unitario_p,
					clock_timestamp(),
					nm_usuario_p,
					vl_preco_liquido_w,
					vl_preco_liquido_w,
					'A',
					substr(ds_marca_w,1,30),
					substr(ds_marca_w,1,30),
					(cd_material_p)::numeric );
				
					
			end if;
		end if;
	end if;

	insert into agenda_pac_opme(
		nr_sequencia,			nr_seq_agenda,
		dt_atualizacao,			nm_usuario,
		cd_material,			qt_material,
		vl_unitario_item,		vl_desconto,
		cd_cond_pagto, 			
		ie_origem_inf,			nr_seq_apres,
		ie_padrao,			ds_observacao,
		ie_autorizado,			cd_cgc,
		dt_atualizacao_nrec,		nm_usuario_nrec,
		ie_integracao,			ie_integracao_util,
		ie_gerar_autor,
		nr_seq_agenda_int,		
		nr_orcamento,
		vl_unitario_atualizado,		
		ie_contrato,
		ie_status_cotacao,
		vl_custo,
		ie_exclusivo)
	values(
		nr_seq_pac_opme_w,		cd_reserva_p,
		clock_timestamp(),			nm_usuario_p,
		cd_material_p,			qt_material_p,
		vl_unitario_p,			vl_desconto_p,
		cd_cond_pagto_w,
		'I',				500,
		'S',				ds_observacao_p,
		'P',				cd_cnpj_p,
		clock_timestamp(),			nm_usuario_p,
		'S',				'S',
		'S',
		CASE WHEN coalesce(nr_seq_integrada_w,0)=0 THEN null  ELSE nr_seq_integrada_w END ,
		coalesce(nr_orcamento_p,0),	
		(vl_unitario_p - vl_desconto_p), 			
		ie_homologado_p,	 
		obter_status_cotacao(cd_status_p, ie_homologado_p, ie_exclusivo_p),
		((vl_unitario_p - vl_desconto_p) + (((vl_unitario_p - vl_desconto_p) * tx_custo_item_w) / 100)),
		ie_exclusivo_p);
	end;

elsif (ie_evento_p = '30') then
	CALL autorizar_agenda_cirurgia(cd_reserva_p, nm_usuario_p);
elsif (ie_evento_p = '99') then
	CALL ajusta_status_agenda_int_opme(cd_reserva_p, '30', null, nm_usuario_p);
end if;

if (coalesce(ds_erro_w,'X') <> 'X') then
	CALL ajusta_status_agenda_int_opme(cd_reserva_p, '31', substr(ds_erro_w,1,255), nm_usuario_p);
	ds_erro_p	:= substr(ds_erro_w, 1, 255);
end if;

nr_cot_compra_p := nr_cot_compra_w;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE importar_itens_agenda_int_opme ( cd_reserva_p text, ie_evento_p text, cd_status_p bigint, nm_usuario_p text, cd_material_p text, qt_material_p text, vl_unitario_p bigint, vl_desconto_p bigint, ie_homologado_p text, ie_exclusivo_p text, cd_cond_pagto_p text, ds_observacao_p text, cd_cnpj_p text, nr_orcamento_p text, ds_erro_p INOUT text, nr_cot_compra_p INOUT bigint) FROM PUBLIC;

