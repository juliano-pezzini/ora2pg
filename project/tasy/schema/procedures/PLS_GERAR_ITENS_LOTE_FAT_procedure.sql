-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_itens_lote_fat ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, qt_diferenca_p integer, nr_seq_regra_p pls_regra_faturamento.nr_sequencia%type, ie_impedimento_cobranca_p text, dt_alteracao_p timestamp, nr_seq_intercambio_p pls_intercambio.nr_sequencia%type, nr_seq_contrato_p pls_contrato.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_tipo_protocolo_p pls_protocolo_conta.ie_tipo_protocolo%type default null) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_pagador_lote_w		varchar(255);
ie_preco_pos_w			pls_plano.ie_preco%type;
vl_total_liberado_w		double precision := 0;
vl_informado_w			double precision;
vl_mensalidade_seg_w		double precision := 0;
vl_tx_intercambio_w		double precision := 0;
vl_tx_intercambio_cobr_w	double precision := 0;
nr_seq_regra_event_w		pls_regra_fat_evento.nr_seq_regra%type;
nr_seq_seg_contrato_w		pls_segurado.nr_sequencia%type;
nr_seq_conta_pos_w		pls_conta_pos_estabelecido.nr_sequencia%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_evento_w			pls_evento_faturamento.nr_sequencia%type;
qt_idade_w			integer;
dt_adesao_seg_w			timestamp;
dt_item_w			timestamp;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
dt_alta_w			pls_conta.dt_alta%type;
qt_dia_proced_receb_w		integer;
tx_administrativa_w		pls_conta_pos_estabelecido.tx_administracao%type;
qt_dias_envio_taxa_w		pls_regra_intercambio.qt_dias_envio_taxa%type;
vl_lib_taxa_servico_w		pls_conta_pos_estabelecido.vl_lib_taxa_servico%type;
vl_lib_taxa_co_w		pls_conta_pos_estabelecido.vl_lib_taxa_co%type;
vl_lib_taxa_material_w		pls_conta_pos_estabelecido.vl_lib_taxa_material%type;
ie_taxa_contrato_pos_w		pls_parametros.ie_taxa_contrato_pos%type;
vl_pos_estab_contab_w		pls_conta_pos_estab_contab.vl_custo_operacional%type;
vl_pos_adm_contab_w		pls_conta_pos_estab_contab.vl_administracao%type;
nr_seq_pos_contab_w		pls_conta_pos_estab_contab.nr_sequencia%type;
ie_tipo_taxa_w			pls_conta_pos_estab_taxa.ie_tipo_taxa%type;
qt_taxa_w			integer;

nr_seq_contrato_w		pls_contrato.nr_sequencia%type;
nr_seq_intercambio_w		pls_intercambio.nr_sequencia%type;
nr_seq_plano_w			pls_plano.nr_sequencia%type;
dt_atendimento_w		pls_conta.dt_atendimento%type;
nr_seq_congenere_seg_w		pls_congenere.nr_sequencia%type;
dt_geracao_w			pls_lote_faturamento.dt_geracao%type;
nr_seq_pos_estab_taxa_w		pls_conta_pos_estab_taxa.nr_sequencia%type;
nr_seq_pos_taxa_contab_w	pls_conta_pos_taxa_contab.nr_sequencia%type;
nr_seq_conta_resumo_w		pls_conta_pos_estab_contab.nr_seq_conta_resumo%type;
cd_guia_ok_w			pls_conta.cd_guia_ok%type;
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
nr_seq_congenere_prot_w		pls_protocolo_conta.nr_seq_congenere%type;
ie_origem_protocolo_w		pls_protocolo_conta.ie_origem_protocolo%type;

ie_benef_remido_w		pls_regra_div_fat_benef.ie_benef_remido%type;
vl_item_w			pls_segurado_mensalidade.vl_item%type;
ie_tipo_lote_w			pls_lote_faturamento.ie_tipo_lote%type;
ie_status_faturamento_w		pls_conta_pos_estabelecido.ie_status_faturamento%type;

C01 CURSOR FOR
	-- 1 Valor de manutencao = 4 Valor de manutencao || 2 Valor da taxa de administracao = 3 Taxa administrativa
	SELECT	b.vl_taxa,
		CASE WHEN a.ie_tipo_taxa='1' THEN '4' WHEN a.ie_tipo_taxa='2' THEN '3' END  ie_tipo_taxa,
		a.nr_sequencia,
		b.nr_sequencia
	from	pls_conta_pos_estab_taxa 	a,
		pls_conta_pos_taxa_contab	b
	where	a.nr_sequencia		= b.nr_seq_pos_estab_taxa
	and	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w
	and	b.nr_seq_conta_resumo	= nr_seq_conta_resumo_w
	and	b.nr_seq_conta		= nr_seq_conta_p
	
union all

	SELECT	b.vl_taxa,
		CASE WHEN a.ie_tipo_taxa='1' THEN '4' WHEN a.ie_tipo_taxa='2' THEN '3' END  ie_tipo_taxa,
		a.nr_sequencia,
		b.nr_sequencia
	from	pls_conta_pos_estab_taxa 	a,
		pls_conta_pos_taxa_contab	b
	where	a.nr_sequencia		= b.nr_seq_pos_estab_taxa
	and	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w
	and (coalesce(b.nr_seq_conta_resumo::text, '') = '' or not exists (	select	1
								from	pls_conta_pos_estab_contab x
								where	x.nr_seq_conta		= b.nr_seq_conta
								and	x.nr_seq_conta_resumo	= b.nr_seq_conta_resumo
								and	x.nr_seq_conta_pos	= a.nr_seq_conta_pos_estab));

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		trunc(months_between(clock_timestamp(), c.dt_nascimento) / 12),
		a.dt_contratacao
	from	pls_segurado	a,
		pessoa_fisica	c,
		pls_contrato	b
	where	a.nr_seq_contrato	= b.nr_sequencia
	and	a.cd_pessoa_fisica	= c.cd_pessoa_fisica
	and	b.nr_sequencia		= nr_seq_contrato_p
	
union all

	SELECT	a.nr_sequencia,
		trunc(months_between(clock_timestamp(), c.dt_nascimento) / 12),
		a.dt_contratacao
	from	pls_segurado	a,
		pessoa_fisica	c,
		pls_intercambio	b
	where	a.nr_seq_intercambio	= b.nr_sequencia
	and	a.cd_pessoa_fisica	= c.cd_pessoa_fisica
	and	b.nr_sequencia		= nr_seq_intercambio_p;

-- Verificar as restricoes do objeto 220726 ao alterar aqui

-- PASTA CONTAS PENDENTES nao receberao o tratamento para pos de aviso, segundo contato skype com o analista na os 2413415
C03 CURSOR(	dt_alteracao_pc		timestamp,
		ie_tipo_lote_pc		pls_lote_faturamento.ie_tipo_lote%type) FOR
	/* cobranca */
	SELECT	d.nr_sequencia,
		d.nr_seq_conta_proc,
		d.nr_seq_conta_mat,
		coalesce(CASE WHEN a.ie_tipo_conta='C' THEN  '3'  ELSE CASE WHEN e.ie_tipo_protocolo='R' THEN  '3'  ELSE c.ie_preco END  END ,'3'),
		pls_obter_se_benef_remido(b.nr_sequencia, a.dt_atendimento_referencia) benef_remido,
		coalesce(d.vl_beneficiario, 0),
		(coalesce(x.vl_lib_taxa_servico,0) + coalesce(x.vl_lib_taxa_co,0) + coalesce(x.vl_lib_taxa_material,0)) vl_administracao,
		coalesce(a.dt_alta,clock_timestamp()),
		a.ie_tipo_guia,
		d.tx_administracao,
		d.vl_lib_taxa_servico,
		d.vl_lib_taxa_co,
		d.vl_lib_taxa_material,
		coalesce(x.vl_custo_operacional,0) - coalesce(x.vl_administracao,0),
		coalesce(x.vl_administracao,0),
		x.nr_sequencia,
		b.nr_seq_contrato,
		b.nr_seq_intercambio,
		coalesce(a.nr_seq_plano,b.nr_seq_plano),
		coalesce(a.dt_atendimento_referencia,a.dt_atendimento),
		coalesce(b.nr_seq_ops_congenere,b.nr_seq_congenere),
		x.nr_seq_conta_resumo,
		a.cd_guia_ok,
		e.ie_tipo_protocolo,
		e.nr_seq_congenere,
		e.ie_origem_protocolo,
		d.ie_status_faturamento
	FROM pls_conta_pos_estab_contab x, pls_protocolo_conta e, pls_conta_pos_estabelecido d, pls_conta_pos_cab_v a, pls_segurado b
LEFT OUTER JOIN pls_plano c ON (b.nr_seq_plano = c.nr_sequencia)
WHERE b.nr_sequencia	= a.nr_seq_segurado and a.nr_sequencia	= d.nr_seq_conta  and d.nr_sequencia	= x.nr_seq_conta_pos and e.nr_sequencia	= a.nr_seq_protocolo and d.ie_status_faturamento = 'L' and ie_tipo_lote_pc	= 'C' and coalesce(d.nr_seq_mensalidade_seg::text, '') = '' and coalesce(d.nr_seq_lote_fat::text, '') = '' and coalesce(d.nr_seq_sca::text, '') = '' and d.nr_seq_conta = nr_seq_conta_p and (d.ie_situacao = 'A' or coalesce(d.ie_situacao::text, '') = '') and ((coalesce(c.ie_preco,'3') = '1' and (b.dt_rescisao IS NOT NULL AND b.dt_rescisao::text <> '')) or
		coalesce(c.ie_preco,'3') in ('2','3') or (c.ie_preco = '1' AND e.ie_tipo_protocolo = 'R')  or
		((c.ie_preco = '1') and (pls_obter_se_benef_remido(b.nr_sequencia, a.dt_atendimento_referencia) = 'S'))) and not exists (	SELECT	1
				from	pls_mensalidade_segurado	y,
					pls_mensalidade			w,
					pls_mensalidade_seg_item	x
				where	y.nr_sequencia	= x.nr_seq_mensalidade_seg
				and	w.nr_sequencia	= y.nr_seq_mensalidade
				and	a.nr_sequencia	= x.nr_seq_conta
				and	coalesce(w.ie_cancelamento::text, '') = ''
				and	x.ie_tipo_item in ('4', '6', '7')) and ((dt_alteracao_pc IS NOT NULL AND dt_alteracao_pc::text <> '' AND a.dt_atendimento_referencia >= dt_alteracao_pc) or (coalesce(dt_alteracao_pc::text, '') = '')) and coalesce(x.nr_seq_evento_fat::text, '') = '' and not exists (select	1
				from	pls_ajuste_fatura_conta x
				where	x.nr_seq_conta	= a.nr_sequencia
				and	x.ie_status	= 'N') and ((coalesce(a.nr_seq_discussao::text, '') = '') or (not exists (select 1
                                                     from pls_conta_pos_cab_v x
                                                     where x.nr_sequencia = d.nr_seq_conta
                                                     and   coalesce(x.nr_seq_discussao::text, '') = ''))) and ((coalesce(a.nr_seq_conta_rec::text, '') = '') or (not exists (select 1
                                                     from pls_conta_pos_cab_v x
                                                     where x.nr_sequencia = d.nr_seq_conta
                                                     and   coalesce(x.nr_seq_conta_rec::text, '') = '')))
	 
union all

	/* aviso */

	select	d.nr_sequencia,
		d.nr_seq_conta_proc,
		d.nr_seq_conta_mat,
		coalesce(CASE WHEN a.ie_tipo_conta='C' THEN  '3'  ELSE CASE WHEN e.ie_tipo_protocolo='R' THEN  '3'  ELSE c.ie_preco END  END ,'3'),
		pls_obter_se_benef_remido(b.nr_sequencia, a.dt_atendimento) benef_remido,
		coalesce(d.vl_beneficiario, 0),
		(coalesce(x.vl_lib_taxa_servico,0) + coalesce(x.vl_lib_taxa_co,0) + coalesce(x.vl_lib_taxa_material,0)) vl_administracao,
		coalesce(a.dt_alta,clock_timestamp()),
		a.ie_tipo_guia,
		d.tx_administracao,
		d.vl_lib_taxa_servico,
		d.vl_lib_taxa_co,
		d.vl_lib_taxa_material,
		coalesce(x.vl_custo_operacional,0) - coalesce(x.vl_administracao,0),
		coalesce(x.vl_administracao,0),
		x.nr_sequencia,
		b.nr_seq_contrato,
		b.nr_seq_intercambio,
		coalesce(a.nr_seq_plano,b.nr_seq_plano),
		a.dt_atendimento,
		coalesce(b.nr_seq_ops_congenere,b.nr_seq_congenere),
		x.nr_seq_conta_resumo,
		a.cd_guia_referencia cd_guia_ok,
		e.ie_tipo_protocolo,
		e.nr_seq_congenere,
		e.ie_origem_protocolo,
		d.ie_status_faturamento
	FROM pls_conta_pos_estab_contab x, pls_protocolo_conta e, pls_conta_pos_estabelecido d, pls_conta_v a, pls_segurado b
LEFT OUTER JOIN pls_plano c ON (b.nr_seq_plano = c.nr_sequencia)
WHERE b.nr_sequencia	= a.nr_seq_segurado and a.nr_sequencia	= d.nr_seq_conta  and d.nr_sequencia	= x.nr_seq_conta_pos and e.nr_sequencia	= a.nr_seq_protocolo and d.ie_status_faturamento = 'A' and ie_tipo_lote_pc	= 'A' and coalesce(d.nr_seq_mensalidade_seg::text, '') = '' and coalesce(d.nr_seq_lote_fat::text, '') = '' and coalesce(d.nr_seq_sca::text, '') = '' and d.nr_seq_conta = nr_seq_conta_p and (d.ie_situacao = 'A' or coalesce(d.ie_situacao::text, '') = '') and ((coalesce(c.ie_preco,'3') = '1' and (b.dt_rescisao IS NOT NULL AND b.dt_rescisao::text <> '')) or
		coalesce(c.ie_preco,'3') in ('2','3') or (c.ie_preco = '1' AND e.ie_tipo_protocolo = 'R')  or
		((c.ie_preco = '1') and (pls_obter_se_benef_remido(b.nr_sequencia, a.dt_atendimento) = 'S'))) and not exists (	select	1
				from	pls_mensalidade_segurado	y,
					pls_mensalidade			w,
					pls_mensalidade_seg_item	x
				where	y.nr_sequencia	= x.nr_seq_mensalidade_seg
				and	w.nr_sequencia	= y.nr_seq_mensalidade
				and	a.nr_sequencia	= x.nr_seq_conta
				and	coalesce(w.ie_cancelamento::text, '') = ''
				and	x.ie_tipo_item in ('4', '6', '7')) and ((dt_alteracao_pc IS NOT NULL AND dt_alteracao_pc::text <> '' AND a.dt_atendimento >= dt_alteracao_pc) or (coalesce(dt_alteracao_pc::text, '') = '')) and coalesce(x.nr_seq_evento_fat::text, '') = '' and not exists (select	1
				from	pls_ajuste_fatura_conta x
				where	x.nr_seq_conta	= a.nr_sequencia
				and	x.ie_status	= 'N');
				


BEGIN

if (ie_tipo_protocolo_p <> 'S') or (coalesce(ie_tipo_protocolo_p::text, '') = '') then
	select	coalesce(max(ie_taxa_contrato_pos),'F')
	into STRICT	ie_taxa_contrato_pos_w
	from	pls_parametros
	where	cd_estabelecimento = cd_estabelecimento_p;


	if (qt_diferenca_p > 0) then 	-- OS 567041 - Se nao entrar um pos estabelecido nao entrar nenhum
		update	pls_conta_pos_estab_contab
		set	nr_seq_evento_fat  = NULL,
			nr_seq_regra_evento_fat	 = NULL,
			nr_seq_lote_fat  = NULL,
			dt_atualizacao = clock_timestamp(),
			nm_usuario = nm_usuario_p
		where	nr_seq_conta_pos in (	SELECT	nr_sequencia
						from	pls_conta_pos_estabelecido
						where	nr_seq_conta	= nr_seq_conta_p
						and	nr_seq_lote_fat	= nr_seq_lote_p);

		update	pls_conta_pos_estabelecido
		set	nr_seq_evento_fat  = NULL,
			nr_seq_regra_evento_fat	 = NULL,
			nr_seq_lote_fat  = NULL,
			dt_atualizacao = clock_timestamp(),
			nm_usuario = nm_usuario_p
		where	nr_seq_conta = nr_seq_conta_p
		and	nr_seq_lote_fat	= nr_seq_lote_p;

		delete	from w_pls_lote_fat_item
		where 	nr_seq_conta = nr_seq_conta_p
		and	nr_seq_lote = nr_seq_lote_p;
		
		commit;
	else

		select	coalesce(max(dt_geracao),max(dt_mesano_referencia)),
			coalesce(max(ie_tipo_lote), 'C')
		into STRICT	dt_geracao_w,
			ie_tipo_lote_w
		from	pls_lote_faturamento
		where	nr_sequencia = nr_seq_lote_p;

		open C03(trunc(dt_alteracao_p, 'dd'), ie_tipo_lote_w);
		loop
		fetch C03 into
			nr_seq_conta_pos_w,
			nr_seq_conta_proc_w,
			nr_seq_conta_mat_w,
			ie_preco_pos_w,
			ie_benef_remido_w,
			vl_total_liberado_w,
			vl_tx_intercambio_w,
			dt_alta_w,
			ie_tipo_guia_w,
			tx_administrativa_w,
			vl_lib_taxa_servico_w,
			vl_lib_taxa_co_w,
			vl_lib_taxa_material_w,
			vl_pos_estab_contab_w,
			vl_pos_adm_contab_w,
			nr_seq_pos_contab_w,
			nr_seq_contrato_w,
			nr_seq_intercambio_w,
			nr_seq_plano_w,
			dt_atendimento_w,
			nr_seq_congenere_seg_w,
			nr_seq_conta_resumo_w,
			cd_guia_ok_w,
			ie_tipo_protocolo_w,
			nr_seq_congenere_prot_w,
			ie_origem_protocolo_w,
			ie_status_faturamento_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
		
			if (ie_tipo_protocolo_w = 'R') or (ie_origem_protocolo_w = 'G') then
				nr_seq_congenere_seg_w := coalesce(nr_seq_congenere_prot_w,nr_seq_congenere_seg_w);
			end if;

			if (vl_total_liberado_w < vl_tx_intercambio_w) then
				vl_tx_intercambio_w	:= 0;
				vl_lib_taxa_servico_w	:= 0;
				vl_lib_taxa_co_w	:= 0;
				vl_lib_taxa_material_w	:= 0;
				vl_pos_adm_contab_w	:= 0;
			else
				vl_tx_intercambio_w := coalesce(vl_lib_taxa_servico_w,0) + coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0);
			end if;

			if (vl_tx_intercambio_w = 0) then
				vl_pos_adm_contab_w	:= 0;
			end if;

			if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then

				select	max(a.dt_procedimento_referencia)
				into STRICT	dt_item_w
				from	pls_conta_proc a
				where	a.nr_sequencia = nr_seq_conta_proc_w;
				
			elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
				select	max(a.dt_atendimento_referencia)
				into STRICT	dt_item_w
				from	pls_conta_mat a
				where	a.nr_sequencia	= nr_seq_conta_mat_w;
			end if;
			
			-- Tive que tirar o nvl devido quando for nulo nao validar a data
			select	max(qt_dias_envio_taxa)
			into STRICT	qt_dias_envio_taxa_w
			from	pls_regra_intercambio
			where	pr_taxa	= tx_administrativa_w;
			
			if (ie_tipo_guia_w != '5') then
				select	max(dt_alta),
					max(ie_tipo_guia)
				into STRICT	dt_alta_w,
					ie_tipo_guia_w
				from	pls_conta_pos_cab_v
				where	cd_guia_ok	= cd_guia_ok_w
				and	nr_seq_segurado	= nr_seq_segurado_p
				and	ie_tipo_guia	= '5'; -- Internacao
			end if;

			if (ie_tipo_guia_w = '5') then
				qt_dia_proced_receb_w := (trunc(clock_timestamp()) - trunc(coalesce(dt_alta_w,dt_item_w)));
			else
				qt_dia_proced_receb_w := (trunc(clock_timestamp()) - trunc(dt_item_w));
			end if;

			nr_seq_evento_w := pls_obter_evento_faturamento(	nr_seq_conta_proc_w, nr_seq_conta_mat_w, dt_item_w, nr_seq_evento_w, nr_seq_regra_p, nr_seq_pos_contab_w, nr_seq_conta_pos_w, null, ie_tipo_lote_w);
							
			

			ie_pagador_lote_w := pls_obter_se_pagador_lote_fat(	nr_seq_lote_p, nr_seq_segurado_p, nr_seq_conta_p,
										nr_seq_evento_w, null);

			select	coalesce(max(a.nr_seq_regra), 0)
			into STRICT	nr_seq_regra_event_w
			from	pls_regra_fat_evento	a
			where	a.nr_seq_evento = nr_seq_evento_w
			and 	a.nr_seq_regra	= nr_seq_regra_p;

			if	(nr_seq_regra_event_w = nr_seq_regra_p AND ie_pagador_lote_w = 'S') then
				if (ie_preco_pos_w = '2') then	-- 7 - Preco pos-estabelecido por rateio
					if (vl_total_liberado_w > 0) then

						-- O valor qt_beneficiarios nunca e setado valor diferente de 0 pos este motivo alterei para receber somente o valor do campo dgkorz
						vl_mensalidade_seg_w := vl_total_liberado_w;

						if (qt_dia_proced_receb_w > qt_dias_envio_taxa_w) then
							vl_tx_intercambio_cobr_w := 0;
							tx_administrativa_w	:= 0;
							vl_lib_taxa_servico_w	:= 0;
							vl_lib_taxa_co_w	:= 0;
							vl_lib_taxa_material_w	:= 0;
							vl_pos_adm_contab_w	:= 0;
						else
							vl_tx_intercambio_cobr_w := vl_tx_intercambio_w;
						end if;

						update	pls_conta_pos_estabelecido
						set	nr_seq_evento_fat	= nr_seq_evento_w,
							nr_seq_regra_evento_fat	= nr_seq_regra_p,
							nr_seq_lote_fat		= nr_seq_lote_p,
							vl_beneficiario		= (coalesce(vl_mensalidade_seg_w,0) - coalesce(vl_tx_intercambio_w,0)) + coalesce(vl_tx_intercambio_cobr_w,0),
							vl_administracao	= vl_tx_intercambio_cobr_w,
							tx_administracao	= tx_administrativa_w,
							vl_lib_taxa_servico	= vl_lib_taxa_servico_w,
							vl_lib_taxa_co		= vl_lib_taxa_co_w,
							vl_lib_taxa_material	= vl_lib_taxa_material_w,
							dt_atualizacao		= clock_timestamp(),
							nm_usuario		= nm_usuario_p
						where	nr_sequencia		= nr_seq_conta_pos_w;

						if (vl_tx_intercambio_cobr_w = 0) then
							update	pls_conta_pos_estab_partic
							set	vl_participante_pos 	= coalesce(vl_participante_pos,0) - coalesce(vl_administracao,0),
								vl_administracao	= vl_tx_intercambio_cobr_w
							where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
							
							delete	from ptu_nota_servico_item b
							where	b.nr_seq_pos_estab_taxa in (SELECT	a.nr_sequencia
												from	pls_conta_pos_estab_taxa a
												where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w
												and	a.nr_sequencia	= b.nr_seq_pos_estab_taxa
												and	not exists (select	1
															from	w_pls_lote_fat_item	x
															where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
												and	not exists (select	1
															from	pls_fatura_proc x
															where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
												and	not exists (select	1
															from	pls_fatura_mat x
															where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia));

							delete	FROM pls_conta_pos_estab_taxa 	a
							where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w
							and	not exists (SELECT	1
										from	w_pls_lote_fat_item	x
										where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
							and	not exists (select	1
										from	pls_fatura_proc x
										where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
							and	not exists (select	1
										from	pls_fatura_mat x
										where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia);
						end if;

						if (nr_seq_pos_contab_w IS NOT NULL AND nr_seq_pos_contab_w::text <> '') then
							if (vl_tx_intercambio_cobr_w = 0) then
								update	pls_conta_pos_estab_contab
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_regra_evento_fat	= nr_seq_regra_p,
									nr_seq_lote_fat		= nr_seq_lote_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p,
									vl_custo_operacional 	= coalesce(vl_custo_operacional,0) - coalesce(vl_administracao,0)
								where	nr_sequencia		= nr_seq_pos_contab_w;

								update	pls_conta_pos_estab_contab
								set	vl_administracao	= 0,
									vl_lib_taxa_servico	= 0,
									vl_lib_taxa_co		= 0,
									vl_lib_taxa_material	= 0
								where	nr_sequencia		= nr_seq_pos_contab_w;
							else
								update	pls_conta_pos_estab_contab
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_regra_evento_fat	= nr_seq_regra_p,
									nr_seq_lote_fat		= nr_seq_lote_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p
								where	nr_sequencia		= nr_seq_pos_contab_w;
							end if;
						else
							if (vl_tx_intercambio_cobr_w = 0) then
								update	pls_conta_pos_estab_contab
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_regra_evento_fat	= nr_seq_regra_p,
									nr_seq_lote_fat		= nr_seq_lote_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p,
									vl_custo_operacional 	= coalesce(vl_custo_operacional,0) - coalesce(vl_administracao,0)
								where	nr_seq_conta_pos	= nr_seq_conta_pos_w;

								update	pls_conta_pos_estab_contab
								set	vl_administracao	= 0,
									vl_lib_taxa_servico	= 0,
									vl_lib_taxa_co		= 0,
									vl_lib_taxa_material	= 0
								where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
							else
								update	pls_conta_pos_estab_contab
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_regra_evento_fat	= nr_seq_regra_p,
									nr_seq_lote_fat		= nr_seq_lote_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p
								where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
							end if;
						end if;
						
						select	count(1)
						into STRICT	qt_taxa_w
						from	pls_conta_pos_estab_taxa 	a
						where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w;
						
						if (qt_taxa_w = 0) then
							CALL pls_gerar_taxa_adm_pos_estab(	nr_seq_conta_p, nr_seq_contrato_w, nr_seq_intercambio_w,
											nr_seq_plano_w, dt_geracao_w, nr_seq_congenere_seg_w, 
											nm_usuario_p, 'S');
						end if;

						open C02;
						loop
						fetch C02 into
							nr_seq_seg_contrato_w,
							qt_idade_w,
							dt_adesao_seg_w;
						EXIT WHEN NOT FOUND; /* apply on C02 */
							begin
							if (coalesce(vl_mensalidade_seg_w,0) > 0) and
								((nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') or (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '')) then
								
								insert into w_pls_lote_fat_item(
									nr_sequencia, nm_usuario, dt_atualizacao,
									nr_seq_lote, nr_seq_conta_proc, nr_seq_conta_mat,
									nr_seq_conta, nr_seq_evento, ie_evento_lote,
									nr_seq_segurado, nr_seq_conta_pos, vl_item,
									ie_tipo_cobranca, ie_impedimento_cobranca, vl_item_ndc,
									nr_seq_conta_pos_contab
								) values (
									nextval('w_pls_lote_fat_item_seq'), nm_usuario_p, clock_timestamp(),
									nr_seq_lote_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w,
									nr_seq_conta_p, nr_seq_evento_w, null,
									nr_seq_seg_contrato_w, nr_seq_conta_pos_w, CASE WHEN coalesce(nr_seq_pos_contab_w::text, '') = '' THEN  vl_tx_intercambio_cobr_w  ELSE vl_pos_adm_contab_w END ,
									'2' /* Pos estabelecido por rateio */
, ie_impedimento_cobranca_p, CASE WHEN coalesce(nr_seq_pos_contab_w::text, '') = '' THEN  vl_mensalidade_seg_w - vl_tx_intercambio_cobr_w  ELSE vl_pos_estab_contab_w END ,
									nr_seq_pos_contab_w
								);
								commit;
							end if;

							if (ie_taxa_contrato_pos_w = 'F') then
								open C01;
								loop
								fetch C01 into
									vl_informado_w,
									ie_tipo_taxa_w,
									nr_seq_pos_estab_taxa_w,
									nr_seq_pos_taxa_contab_w;
								EXIT WHEN NOT FOUND; /* apply on C01 */
									begin
									select	count(1)
									into STRICT	qt_taxa_w
									from 	w_pls_lote_fat_item
									where	nr_seq_conta_pos	= nr_seq_conta_pos_w
									and	vl_item_ndc		= vl_informado_w
									and	nr_seq_conta		= nr_seq_conta_p
									and	nr_seq_lote		= nr_seq_lote_p
									and	ie_tipo_cobranca	in ('4','3');
									
									if (vl_informado_w > 0) and (qt_taxa_w = 0) then

										insert into w_pls_lote_fat_item(
											nr_sequencia, nm_usuario, dt_atualizacao,
											nr_seq_lote, nr_seq_conta_proc, nr_seq_conta_mat,
											nr_seq_conta, nr_seq_evento, ie_evento_lote,
											nr_seq_segurado, nr_seq_conta_pos, vl_item,
											ie_tipo_cobranca, ie_impedimento_cobranca, vl_item_ndc,
											nr_seq_conta_pos_contab, nr_seq_pos_estab_taxa, nr_seq_pos_taxa_contab
										) values (
											nextval('w_pls_lote_fat_item_seq'), nm_usuario_p, clock_timestamp(),
											nr_seq_lote_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w,
											nr_seq_conta_p, nr_seq_evento_w, null,
											nr_seq_segurado_p, nr_seq_conta_pos_w, 0,
											ie_tipo_taxa_w, ie_impedimento_cobranca_p, vl_informado_w,
											nr_seq_pos_contab_w, nr_seq_pos_estab_taxa_w, nr_seq_pos_taxa_contab_w
										);
									end if;
									end;
								end loop;
								close C01;
								commit;
							end if;
						end;
						end loop;
						close C02;
					end if; -- Se tem valor e achou evento
				-- 6 - Preco pos-estabelecido por custo operacional , OU se for reembolso com preco PRE, OU se for remido com preco PRE
				elsif	((ie_preco_pos_w = '3') or
					 (ie_tipo_protocolo_w = 'R' AND ie_preco_pos_w = '1')  or
					 (ie_benef_remido_w = 'S' AND ie_preco_pos_w = '1'))  then
					if (coalesce(vl_total_liberado_w, 0) <> 0)then

						--  aaschlote  - gerei uma mensalidade, na qual um benefiiciario do pagador nao possui conta medica, assim jogando nulo o valor da mensalidade
						if (qt_dia_proced_receb_w > qt_dias_envio_taxa_w) then
							vl_tx_intercambio_cobr_w := 0;
							tx_administrativa_w	 := 0;
							vl_lib_taxa_servico_w	 := 0;
							vl_lib_taxa_co_w	 := 0;
							vl_lib_taxa_material_w	 := 0;
							vl_pos_adm_contab_w	 := 0;
						else
							vl_tx_intercambio_cobr_w := vl_tx_intercambio_w;
						end if;
						
						
						update	pls_conta_pos_estabelecido
						set	nr_seq_evento_fat	= nr_seq_evento_w,
							nr_seq_regra_evento_fat	= nr_seq_regra_p,
							nr_seq_lote_fat		= nr_seq_lote_p,
							vl_beneficiario		= (coalesce(vl_total_liberado_w,0) - coalesce(vl_tx_intercambio_w,0)) + coalesce(vl_tx_intercambio_cobr_w,0),
							vl_administracao	= vl_tx_intercambio_cobr_w,
							tx_administracao	= tx_administrativa_w,
							vl_lib_taxa_servico	= vl_lib_taxa_servico_w,
							vl_lib_taxa_co		= vl_lib_taxa_co_w,
							vl_lib_taxa_material	= vl_lib_taxa_material_w,
							dt_atualizacao		= clock_timestamp(),
							nm_usuario		= nm_usuario_p
						where	nr_sequencia		= nr_seq_conta_pos_w;
						
						if (vl_tx_intercambio_cobr_w = 0) then
							update	pls_conta_pos_estab_partic
							set	vl_participante_pos 	= coalesce(vl_participante_pos,0) - coalesce(vl_administracao,0),
								vl_administracao	= vl_tx_intercambio_cobr_w
							where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
							
							delete	from ptu_nota_servico_item b
							where	b.nr_seq_pos_estab_taxa in (SELECT	a.nr_sequencia
												from	pls_conta_pos_estab_taxa a
												where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w
												and	a.nr_sequencia	= b.nr_seq_pos_estab_taxa
												and	not exists (select	1
															from	w_pls_lote_fat_item	x
															where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
												and	not exists (select	1
															from	pls_fatura_proc x
															where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
												and	not exists (select	1
															from	pls_fatura_mat x
															where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia));
							
							delete	FROM pls_conta_pos_estab_taxa 	a
							where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w
							and	not exists (SELECT	1
										from	w_pls_lote_fat_item	x
										where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
							and	not exists (select	1
										from	pls_fatura_proc x
										where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
							and	not exists (select	1
										from	pls_fatura_mat x
										where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia)
							and	not exists (select	1
										from	pls_conta_pos_taxa_contab x
										where ((x.nr_lote_contabil IS NOT NULL AND x.nr_lote_contabil::text <> '')
										or	(x.nr_lote_contabil_prov IS NOT NULL AND x.nr_lote_contabil_prov::text <> ''))
										and	x.nr_seq_pos_estab_taxa	= a.nr_sequencia);
							commit;
						end if;

						if (nr_seq_pos_contab_w IS NOT NULL AND nr_seq_pos_contab_w::text <> '') then
							if (vl_tx_intercambio_cobr_w = 0) then
								update	pls_conta_pos_estab_contab
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_regra_evento_fat	= nr_seq_regra_p,
									nr_seq_lote_fat		= nr_seq_lote_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p,
									vl_custo_operacional 	= coalesce(vl_custo_operacional,0) - coalesce(vl_administracao,0)
								where	nr_sequencia		= nr_seq_pos_contab_w;

								update	pls_conta_pos_estab_contab
								set	vl_administracao	= 0,
									vl_lib_taxa_servico	= 0,
									vl_lib_taxa_co		= 0,
									vl_lib_taxa_material	= 0
								where	nr_sequencia		= nr_seq_pos_contab_w;
							else
								update	pls_conta_pos_estab_contab
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_regra_evento_fat	= nr_seq_regra_p,
									nr_seq_lote_fat		= nr_seq_lote_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p
								where	nr_sequencia		= nr_seq_pos_contab_w;
							end if;
						else
							if (vl_tx_intercambio_cobr_w = 0) then
								update	pls_conta_pos_estab_contab
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_regra_evento_fat	= nr_seq_regra_p,
									nr_seq_lote_fat		= nr_seq_lote_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p,
									vl_custo_operacional 	= coalesce(vl_custo_operacional,0) - coalesce(vl_administracao,0)
								where	nr_seq_conta_pos	= nr_seq_conta_pos_w;

								update	pls_conta_pos_estab_contab
								set	vl_administracao	= 0,
									vl_lib_taxa_servico	= 0,
									vl_lib_taxa_co		= 0,
									vl_lib_taxa_material	= 0
								where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
							else
								update	pls_conta_pos_estab_contab
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_regra_evento_fat	= nr_seq_regra_p,
									nr_seq_lote_fat		= nr_seq_lote_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p
								where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
							end if;
						end if;

						insert into w_pls_lote_fat_item(
							nr_sequencia, nm_usuario, dt_atualizacao,
							nr_seq_lote, nr_seq_conta_proc, nr_seq_conta_mat,
							nr_seq_conta, nr_seq_evento, ie_evento_lote,
							nr_seq_segurado, nr_seq_conta_pos, vl_item,
							ie_tipo_cobranca, ie_impedimento_cobranca, vl_item_ndc,
							nr_seq_conta_pos_contab
						) values (
							nextval('w_pls_lote_fat_item_seq'), nm_usuario_p, clock_timestamp(),
							nr_seq_lote_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w,
							nr_seq_conta_p, nr_seq_evento_w, null,
							nr_seq_segurado_p, nr_seq_conta_pos_w, CASE WHEN coalesce(nr_seq_pos_contab_w::text, '') = '' THEN  vl_tx_intercambio_cobr_w  ELSE vl_pos_adm_contab_w END ,
							'1' /* Pos por custo operacional */
, ie_impedimento_cobranca_p, CASE WHEN coalesce(nr_seq_pos_contab_w::text, '') = '' THEN  vl_total_liberado_w - vl_tx_intercambio_w  ELSE vl_pos_estab_contab_w END ,
							nr_seq_pos_contab_w
						);
						commit;

						select	count(1)
						into STRICT	qt_taxa_w
						from	pls_conta_pos_estab_taxa a
						where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w;
						
						if (qt_taxa_w = 0) then						
							CALL pls_gerar_taxa_adm_pos_estab(	nr_seq_conta_p, nr_seq_contrato_w, nr_seq_intercambio_w,
											nr_seq_plano_w, dt_geracao_w, nr_seq_congenere_seg_w, 
											nm_usuario_p, 'S');
						end if;

						if (ie_taxa_contrato_pos_w = 'F') then
							open C01;
							loop
							fetch C01 into
								vl_informado_w,
								ie_tipo_taxa_w,
								nr_seq_pos_estab_taxa_w,
								nr_seq_pos_taxa_contab_w;
							EXIT WHEN NOT FOUND; /* apply on C01 */
								begin
								select	count(1)
								into STRICT	qt_taxa_w
								from 	w_pls_lote_fat_item
								where	nr_seq_conta_pos	= nr_seq_conta_pos_w
								and	nr_seq_conta		= nr_seq_conta_p
								and	nr_seq_lote		= nr_seq_lote_p
								and	nr_seq_pos_taxa_contab	= nr_seq_pos_taxa_contab_w
								and	ie_tipo_cobranca	in ('4','3');
								
								if (vl_informado_w > 0) and (qt_taxa_w = 0) then
									insert into w_pls_lote_fat_item(
										nr_sequencia, nm_usuario, dt_atualizacao,
										nr_seq_lote, nr_seq_conta_proc, nr_seq_conta_mat,
										nr_seq_conta, nr_seq_evento, ie_evento_lote,
										nr_seq_segurado, nr_seq_conta_pos, vl_item,
										ie_tipo_cobranca, ie_impedimento_cobranca, vl_item_ndc,
										nr_seq_conta_pos_contab, nr_seq_pos_estab_taxa, nr_seq_pos_taxa_contab
									) values (
										nextval('w_pls_lote_fat_item_seq'), nm_usuario_p, clock_timestamp(),
										nr_seq_lote_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w,
										nr_seq_conta_p, nr_seq_evento_w, null,
										nr_seq_segurado_p, nr_seq_conta_pos_w, 0,
										ie_tipo_taxa_w, ie_impedimento_cobranca_p, vl_informado_w,
										nr_seq_pos_contab_w, nr_seq_pos_estab_taxa_w, nr_seq_pos_taxa_contab_w
									);
								end if;
								end;
							end loop;
							close C01;
							commit;
						end if;
					end if;
				end if;
			end if;
		end loop;
		close C03;
	end if;
-- Ressarcimento ao SUS
elsif (ie_tipo_protocolo_p = 'S') then

	nr_seq_evento_w := pls_obter_evento_faturamento( null, null, null, nr_seq_evento_w, nr_seq_regra_p, null, null, nr_seq_conta_p);
	
	select	max(c.vl_item)
	into STRICT	vl_item_w
	from	pls_processo_conta		a,
		pls_segurado			b,
		pls_segurado_mensalidade	c
	where	b.nr_sequencia	= a.nr_seq_segurado
	and	a.nr_sequencia  = c.nr_seq_processo_conta
	and	a.nr_sequencia	= nr_seq_conta_p
	and	pls_obter_se_benef_remido(b.nr_sequencia, a.dt_internacao) = 'S'
	and	c.ie_tipo_item	= '39';
	
	select	coalesce(max(a.nr_seq_regra), 0)
	into STRICT	nr_seq_regra_event_w
	from	pls_regra_fat_evento	a
	where	a.nr_seq_evento = nr_seq_evento_w
	and 	a.nr_seq_regra	= nr_seq_regra_p;

	if (nr_seq_regra_event_w = nr_seq_regra_p) then
	
		update	pls_segurado_mensalidade
		set	nr_seq_evento_fat	= nr_seq_evento_w,
			nr_seq_lote_fat		= nr_seq_lote_p,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_processo_conta	= nr_seq_conta_p;

		insert into w_pls_lote_fat_item(nr_sequencia, 				nm_usuario, 			dt_atualizacao, 		nr_seq_lote,
			nr_seq_conta_proc,			nr_seq_conta_mat,		nr_seq_conta,			nr_seq_evento,
			ie_evento_lote,				nr_seq_segurado,		nr_seq_conta_pos,		vl_item,
			ie_tipo_cobranca,			ie_impedimento_cobranca,	vl_item_ndc,			ie_origem_item,
			nr_seq_conta_pos_contab)
		values (nextval('w_pls_lote_fat_item_seq'),	nm_usuario_p,			clock_timestamp(),			nr_seq_lote_p,
			null,					null,				nr_seq_conta_p,			nr_seq_evento_w,
			'S',					nr_seq_segurado_p,		null,				vl_item_w,
			'5',					ie_impedimento_cobranca_p,	null,				'A',
			null);
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_itens_lote_fat ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, qt_diferenca_p integer, nr_seq_regra_p pls_regra_faturamento.nr_sequencia%type, ie_impedimento_cobranca_p text, dt_alteracao_p timestamp, nr_seq_intercambio_p pls_intercambio.nr_sequencia%type, nr_seq_contrato_p pls_contrato.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_tipo_protocolo_p pls_protocolo_conta.ie_tipo_protocolo%type default null) FROM PUBLIC;

