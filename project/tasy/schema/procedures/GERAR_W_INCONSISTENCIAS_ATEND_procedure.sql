-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_inconsistencias_atend ( cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) AS $body$
DECLARE

						 
nr_atendimento_w		bigint;
dt_entrada_w		timestamp;
ie_cep_internet_w		varchar(1);
cd_pessoa_fisica_w	varchar(10);
nm_bairro_w		varchar(80);
nm_municipio_w		varchar(60);
cd_municipio_ibge_w	varchar(6);
cd_uf_w			compl_pessoa_fisica.sg_estado%type;
nm_bairro_c_w		varchar(80);
nm_municipio_c_w	varchar(40);
cd_municipio_ibge_c_w	varchar(6);
cd_uf_c_w		compl_pessoa_fisica.sg_estado%type;
cd_cep_w		bigint;
qt_diferenca_w		bigint;
qt_tempo_w		bigint;
ie_tempo_w		varchar(15);
ds_setor_w		varchar(30);
cd_especialidade_w	integer;
cd_especialidade_med_w	integer;
cd_especialidade_regra_w 	integer;
cd_procedimento_w	bigint;
cd_especialidade_proc_w	bigint;
cd_grupo_proc_w		bigint;
cd_area_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
ie_existe_w		varchar(1);

ds_info_compl_w		varchar(2000);

ds_texto1_w		varchar(255);
ds_texto2_w		varchar(255);
ds_texto3_w		varchar(255);

C01 CURSOR FOR 
	SELECT	nr_atendimento, 
		cd_pessoa_fisica, 
		dt_entrada 
	from	atendimento_paciente 
	where	dt_entrada between dt_inicial_p and dt_final_p 
	order by dt_entrada;

C02 CURSOR FOR	 
	SELECT	distinct substr(to_char(coalesce(dt_saida_unidade,clock_timestamp()) - dt_entrada_unidade,'999999999') || ' '|| ds_texto1_w ,1,40), 
		substr(obter_nome_setor(t.cd_setor_atendimento),1,30) 
	from	regra_setor r, 
		atend_paciente_unidade t, 
		atendimento_paciente a 
	where	t.nr_atendimento 	= a.nr_atendimento 
	and	r.cd_setor_atendimento 	= t.cd_setor_atendimento 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	t.ie_passagem_setor	= 'N' 
	and	(r.qt_tempo IS NOT NULL AND r.qt_tempo::text <> '') 
	and	r.ie_tempo = 'DD' 
	and (coalesce(dt_saida_unidade,clock_timestamp()) - dt_entrada_unidade) > r.qt_tempo	 
	
union
 
	SELECT	distinct substr(to_char((coalesce(dt_saida_unidade,clock_timestamp()) - dt_entrada_unidade),'999999999') || ' '|| ds_texto2_w,1,40), 
		substr(obter_nome_setor(t.cd_setor_atendimento),1,30) 
	from	regra_setor r, 
		atend_paciente_unidade t, 
		atendimento_paciente a 
	where	t.nr_atendimento 	= a.nr_atendimento 
	and	r.cd_setor_atendimento 	= t.cd_setor_atendimento 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	t.ie_passagem_setor	= 'N' 
	and	(r.qt_tempo IS NOT NULL AND r.qt_tempo::text <> '') 
	and	r.ie_tempo = 'MM' 
	and	months_between(coalesce(dt_saida_unidade,clock_timestamp()), dt_entrada_unidade) > r.qt_tempo 
	
union
 
	select	distinct substr(obter_dif_data(dt_entrada_unidade, coalesce(dt_saida_unidade,clock_timestamp()), null),1,20) || ' h', 
		substr(obter_nome_setor(t.cd_setor_atendimento),1,30) 
	from	regra_setor r, 
		atend_paciente_unidade t, 
		atendimento_paciente a 
	where	t.nr_atendimento 	= a.nr_atendimento 
	and	r.cd_setor_atendimento 	= t.cd_setor_atendimento 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	t.ie_passagem_setor	= 'N' 
	and	(r.qt_tempo IS NOT NULL AND r.qt_tempo::text <> '') 
	and	r.ie_tempo = 'HH' 
	and (coalesce(dt_saida_unidade,clock_timestamp()) - dt_entrada_unidade)*24 > r.qt_tempo 
	
union
 
	select	distinct substr(obter_dif_data(dt_entrada_unidade, coalesce(dt_saida_unidade,clock_timestamp()), null),1,20) || ' h', 
		substr(obter_nome_setor(t.cd_setor_atendimento),1,30) 
	from	regra_setor r, 
		atend_paciente_unidade t, 
		atendimento_paciente a 
	where	t.nr_atendimento 	= a.nr_atendimento 
	and	r.cd_setor_atendimento 	= t.cd_setor_atendimento 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	t.ie_passagem_setor	= 'N' 
	and	(r.qt_tempo IS NOT NULL AND r.qt_tempo::text <> '') 
	and	r.ie_tempo = 'MI' 
	and (coalesce(dt_saida_unidade,clock_timestamp()) - dt_entrada_unidade)* 1440 > r.qt_tempo;
	
C03 CURSOR FOR 
	SELECT	distinct ds_texto1_w ||': ' || p.ie_sexo || ' '|| ds_texto2_w ||': ' || c.ds_doenca_cid 
	from	pessoa_fisica p, 
		cid_doenca c, 
		diagnostico_doenca o, 
		diagnostico_medico d, 
		atendimento_paciente a 
	where	d.nr_atendimento 	= a.nr_atendimento 
	and	o.nr_atendimento 	= d.nr_atendimento 
	and	o.dt_diagnostico 	= d.dt_diagnostico 
	and	c.cd_doenca_cid	 	= o.cd_doenca 
	and	p.cd_pessoa_fisica 	= a.cd_pessoa_fisica 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	c.ie_sexo 		<> 'A' 
	and	c.ie_situacao 		= 'A' 
	and	p.ie_sexo 		in ('F','M') 
	and	p.ie_sexo 		<> c.ie_sexo;
	
C04 CURSOR FOR 
	SELECT	distinct ds_texto1_w ||': ' || substr(obter_idade(p.dt_nascimento, d.dt_diagnostico, 'A'),1,3) || ' '|| ds_texto2_w ||': ' || c.ds_doenca_cid 
	from	pessoa_fisica p, 
		cid_doenca c, 
		diagnostico_doenca o, 
		diagnostico_medico d, 
		atendimento_paciente a 
	where	d.nr_atendimento 	= a.nr_atendimento 
	and	o.nr_atendimento 	= d.nr_atendimento 
	and	o.dt_diagnostico 	= d.dt_diagnostico 
	and	c.cd_doenca_cid	 	= o.cd_doenca 
	and	p.cd_pessoa_fisica 	= a.cd_pessoa_fisica 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	(((obter_idade(p.dt_nascimento, d.dt_diagnostico, 'A') < c.qt_idade_min) and (c.qt_idade_min IS NOT NULL AND c.qt_idade_min::text <> '')) or 
		((obter_idade(p.dt_nascimento, d.dt_diagnostico, 'A') > c.qt_idade_max) and (c.qt_idade_max IS NOT NULL AND c.qt_idade_max::text <> ''))) 
	and	c.ie_situacao 		= 'A' 
	and	(p.dt_nascimento IS NOT NULL AND p.dt_nascimento::text <> '');
	
C05 CURSOR FOR 
	SELECT	distinct ds_texto1_w ||': ' || substr(obter_idade(p.dt_nascimento, a.dt_alta, 'A'),1,3) || ' ' || ds_texto2_w || ': ' || substr(obter_nome_setor(t.cd_setor_atendimento),1,50)		 
	from	pessoa_fisica p, 
		regra_setor r, 
		atend_paciente_unidade t, 
		atendimento_paciente a 
	where	t.nr_atendimento 	= a.nr_atendimento 
	and	r.cd_setor_atendimento 	= t.cd_setor_atendimento 
	and	p.cd_pessoa_fisica 	= a.cd_pessoa_fisica 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	obter_tipo_unidade_atend(nr_atendimento_w, t.nr_seq_interno, t.ie_passagem_setor) = 'A' 
	and	(((obter_idade(p.dt_nascimento, a.dt_alta, 'A') < r.qt_idade_min) and (r.qt_idade_min IS NOT NULL AND r.qt_idade_min::text <> '')) or 
		((obter_idade(p.dt_nascimento, a.dt_alta, 'A') > r.qt_idade_max) and (r.qt_idade_max IS NOT NULL AND r.qt_idade_max::text <> ''))) 
	and	(p.dt_nascimento IS NOT NULL AND p.dt_nascimento::text <> '');

C06 CURSOR FOR 
	SELECT	distinct ds_texto1_w || ': ' || p.ie_sexo || ' '|| ds_texto2_w || ': ' || i.cd_procedimento || ' ' || i.ds_proc_exame 
	from	pessoa_fisica p, 
		proc_interno i, 
		procedimento_paciente c, 
		atendimento_paciente a 
	where	c.nr_atendimento 	= a.nr_atendimento 
	and	i.cd_procedimento	= c.cd_procedimento 
	and	i.ie_origem_proced	= c.ie_origem_proced 
	and	p.cd_pessoa_fisica 	= a.cd_pessoa_fisica 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	coalesce(i.ie_sexo,'A') 	<> 'A' 
	and	i.ie_situacao 		= 'A' 
	and	p.ie_sexo 		in ('F','M') 
	and	p.ie_sexo 		<> i.ie_sexo 
	
union
 
	SELECT	distinct ds_texto1_w ||': ' || p.ie_sexo || ' ' || ds_texto2_w || ': ' || i.cd_procedimento || ' ' || i.ds_procedimento 
	from	pessoa_fisica p, 
		procedimento i, 
		procedimento_paciente c, 
		atendimento_paciente a 
	where	c.nr_atendimento 	= a.nr_atendimento 
	and	i.cd_procedimento	= c.cd_procedimento 
	and	i.ie_origem_proced	= c.ie_origem_proced 
	and	p.cd_pessoa_fisica 	= a.cd_pessoa_fisica 
	and	a.nr_atendimento	= nr_atendimento_w 
	and	coalesce(i.ie_sexo_sus,'A') 	<> 'A' 
	and	i.ie_situacao 		= 'A' 
	and	p.ie_sexo 		in ('F','M') 
	and	p.ie_sexo 		<> i.ie_sexo_sus;

C07 CURSOR FOR 
	SELECT	distinct ds_texto1_w || ': ' || substr(obter_desc_cid_doenca(o.cd_doenca),1,60) || 
		'.  ' || ds_texto2_w || ' ' || p.cd_procedimento || ' ' || substr(Obter_Desc_Prescr_Proc(p.cd_procedimento, p.ie_origem_proced, p.nr_seq_proc_interno),1,240) 
	from	proced_doenca d, 
		procedimento_paciente p, 
		diagnostico_doenca o, 
		diagnostico_medico d, 
		atendimento_paciente a 
	where	d.nr_atendimento 	= a.nr_atendimento 
	and	o.nr_atendimento 	= d.nr_atendimento 
	and	o.dt_diagnostico 	= d.dt_diagnostico 
	and	p.nr_atendimento	= a.nr_atendimento 
	and	d.cd_procedimento	= p.cd_procedimento 
	and	d.ie_tipo_diagnostico	= 1 
	and	d.cd_doenca_cid		<> o.cd_doenca 
	and	a.nr_atendimento	= nr_atendimento_w;
	
 
C08 CURSOR FOR 
	SELECT	distinct (substr(obter_especialidade_medico(p.cd_medico_executor,'C'),1,5))::numeric , 
		p.cd_procedimento, 
		e.cd_grupo_proc, 
		e.cd_area_procedimento, 
		e.cd_especialidade, 
		p.ie_origem_proced, 
		p.nr_seq_proc_interno, 
		ds_texto1_w || ' ' || p.cd_procedimento || ' ' || substr(trim(both Obter_Desc_Prescr_Proc(p.cd_procedimento, p.ie_origem_proced, p.nr_seq_proc_interno)),1,240) || 
		'.  ' || ds_texto2_w || ': ' || substr(obter_especialidade_medico(p.cd_medico_executor,'D'),1,255) 
	from	estrutura_procedimento_v e, 
		procedimento_paciente p, 
		atendimento_paciente a 
	where	p.nr_atendimento	= a.nr_atendimento 
	and	e.cd_procedimento 	= p.cd_procedimento 
	and	e.ie_origem_proced	= p.ie_origem_proced 
	and	(obter_especialidade_medico(p.cd_medico_executor,'C') IS NOT NULL AND (obter_especialidade_medico(p.cd_medico_executor,'C'))::text <> '') 
	and	a.nr_atendimento	= nr_atendimento_w;

C09 CURSOR FOR 
	SELECT	cd_especialidade 
	from	proced_especialidade 
	where	coalesce(cd_especialidade_proc,cd_especialidade_w) 		= cd_especialidade_w 
	and	coalesce(cd_procedimento,cd_procedimento_w) 			= cd_procedimento_w 
	and	coalesce(cd_grupo_proc,cd_grupo_proc_w)			= cd_grupo_proc_w 
	and	coalesce(cd_area_procedimento,cd_area_procedimento_w) 	= cd_area_procedimento_w;
	

BEGIN 
 
/* 
create table w_inconsistencias_atend ( 
	nr_sequencia		number(5) not null, 
	nr_atendimento		number(10), 
	dt_entrada		date, 
	ds_informacao		varchar2(2000), 
	ie_tipo			varchar2(3), 
	nm_usuario		varchar2(20) not null) 
 
create sequence w_inconsistencias_atend_seq 
increment by 1 
start with 1 maxValue 9999999999 
cycle 
nocache 
	*/
 
 
CALL EXEC_SQL_DINAMICO_BV('TASY','delete from w_inconsistencias_atend where nm_usuario = :nm_usuario', 'nm_usuario=' || nm_usuario_p);
 
select	obter_valor_param_usuario(0, 25, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p) 
into STRICT	ie_cep_internet_w
;
 
	 
open C01;
loop 
fetch C01 into	 
	nr_atendimento_w, 
	cd_pessoa_fisica_w, 
	dt_entrada_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	ds_texto1_w	:= wheb_mensagem_pck.get_texto(299359);--Sexo	 
	ds_texto2_w	:= wheb_mensagem_pck.get_texto(299360);-- e CID 
	/* Sexo x Diagnóstico */
	open C03;
	loop 
	fetch C03 into	 
		ds_info_compl_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		insert into w_inconsistencias_atend( 
			nr_sequencia, 
			nr_atendimento, 
			dt_entrada, 
			ds_informacao, 
			ie_tipo, 
			nm_usuario) 
		values (	nextval('w_inconsistencias_atend_seq'), 
			nr_atendimento_w, 
			dt_entrada_w, 
			ds_info_compl_w, 
			'SDG', 
			nm_usuario_p);		
		end;
	end loop;
	close C03;
	 
	ds_texto1_w	:= wheb_mensagem_pck.get_texto(299363);-- Idade	 
	ds_texto2_w	:= wheb_mensagem_pck.get_texto(299360);-- e CID 
	/* Faixa etária x Diagnóstico */
	open C04;
	loop 
	fetch C04 into	 
		ds_info_compl_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin 
		insert into w_inconsistencias_atend( 
			nr_sequencia, 
			nr_atendimento, 
			dt_entrada, 
			ds_informacao, 
			ie_tipo, 
			nm_usuario) 
		values (	nextval('w_inconsistencias_atend_seq'), 
			nr_atendimento_w, 
			dt_entrada_w, 
			ds_info_compl_w, 
			'FDG', 
			nm_usuario_p);
		end;
	end loop;
	close C04;
 
	ds_texto1_w	:= wheb_mensagem_pck.get_texto(299363);-- Idade	 
	ds_texto2_w	:= wheb_mensagem_pck.get_texto(299367);-- e Ala de saída 
	/* Faixa etária x Ala de saída */
	open C05;
	loop 
	fetch C05 into	 
		ds_info_compl_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin 
		insert into w_inconsistencias_atend( 
			nr_sequencia, 
			nr_atendimento, 
			dt_entrada, 
			ds_informacao, 
			ie_tipo, 
			nm_usuario) 
		values (	nextval('w_inconsistencias_atend_seq'), 
			nr_atendimento_w, 
			dt_entrada_w, 
			ds_info_compl_w, 
			'FAS', 
			nm_usuario_p);		
		end;
	end loop;
	close C05;
	 
	ds_texto1_w	:= wheb_mensagem_pck.get_texto(299359);-- Sexo	 
	ds_texto2_w	:= wheb_mensagem_pck.get_texto(299370);-- e Procedimento 
	/* Sexo x procedimento hospitalar */
	open C06;
	loop 
	fetch C06 into	 
		ds_info_compl_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin 
		insert into w_inconsistencias_atend( 
			nr_sequencia, 
			nr_atendimento, 
			dt_entrada, 
			ds_informacao, 
			ie_tipo, 
			nm_usuario) 
		values (nextval('w_inconsistencias_atend_seq'), 
			nr_atendimento_w, 
			dt_entrada_w, 
			ds_info_compl_w, 
			'SPH', 
			nm_usuario_p);		
			end;
	end loop;
	close C06;
	 
	 
	/* CEP x Distrito x Município x UF */
	 
	ds_info_compl_w := '';	
	begin 
	select	coalesce(max((cd_cep)::numeric ),0) 
	into STRICT	cd_cep_w 
	from	compl_pessoa_fisica 
	where	cd_pessoa_fisica = cd_pessoa_fisica_w 
	and	ie_tipo_complemento = 1 
	and	length(cd_cep) > 7 
	and	trim(both cd_cep) <> ' ' 
	and	(cd_cep IS NOT NULL AND cd_cep::text <> '');
	exception when others then 
		ds_info_compl_w := ds_info_compl_w || wheb_mensagem_pck.get_texto(299380,'CD_CEP_P='||cd_cep_w) || chr(13) || chr(10); -- O CEP cadastrado: [ ] é inválido. 
		cd_cep_w := 0;
	end;
	 
	if (cd_cep_w <> 0) then		 
	 
		if (ie_cep_internet_w = 'N') then		 
		 
			select	max(a.nm_localidade), 
				max(a.nm_bairro), 
				max(a.cd_unidade_federacao) 
			into STRICT	nm_municipio_w, 
				nm_bairro_w, 
				cd_uf_w			 
			from	cep_logradouro a 
			where	a.cd_logradouro = cd_cep_w;
			 
		else 
			begin			 
			select	b.nm_localidade, 
				c.ds_bairro,  
				a.ds_uf 
			into STRICT	nm_municipio_w, 
				nm_bairro_w, 
				cd_uf_w					 
			from	cep_loc b,       
				cep_bairro c,      
				cep_log a        
			where	b.nr_sequencia   = c.nr_seq_loc 
			and	a.cd_bairro_inicial = c.nr_sequencia 
			and	b.nr_sequencia   = a.nr_seq_loc 
			and	a.cd_cep      = cd_cep_w;
			exception when no_data_found then 
				nm_bairro_w := null;
				begin 
				select	b.nm_localidade, 
					b.ds_uf 
				into STRICT	nm_municipio_w, 
					cd_uf_w					 
				from	cep_loc b        
				where	b.cd_cep    = cd_cep_w;
				exception when no_data_found then					 
					cd_cep_w := 0;
				end;				
			end;			
			 
			if (cd_cep_w <> 0) then 
				select	cd_municipio_ibge 
	        	into STRICT	cd_municipio_ibge_w 
				from	cep_municipio 
				where	cd_cep = cd_cep_w;
			end if;
		end if;
			 
		select	ds_municipio, 
			cd_municipio_ibge, 
			ds_bairro,  
			sg_estado 
		into STRICT	nm_municipio_c_w, 
			cd_municipio_ibge_c_w, 
			nm_bairro_c_w, 
			cd_uf_c_w					 
		from	compl_pessoa_fisica 
		where	cd_pessoa_fisica = cd_pessoa_fisica_w 
		and	ie_tipo_complemento = 1;
		 
		if (upper(trim(both cd_uf_w)) <> upper(trim(both cd_uf_c_w))) then 
			ds_info_compl_w := ds_info_compl_w || wheb_mensagem_pck.get_texto(299384,'CD_UF_C_P='||cd_uf_c_w||';CD_UF_P='||cd_uf_w) || chr(13) || chr(10);
			--A UF cadastrada: [#@CD_UF_C_P#@] é diferente da UF correspondente ao CEP: [#@CD_UF_P#@] 
		end if;
 
		if (cd_municipio_ibge_w <> cd_municipio_ibge_c_w) then 
			ds_info_compl_w := ds_info_compl_w || wheb_mensagem_pck.get_texto(299386,'CD_MUNICIPIO_IBGE_C_P='||cd_municipio_ibge_c_w||';CD_MUNICIPIO_IBGE_P='||cd_municipio_ibge_w) ||chr(13) || chr(10);
			--O Município IBGE cadastrado: [#@CD_MUNICIPIO_IBGE_C_P#@] é diferente do Município IBGE correspondente ao CEP: [#@CD_MUNICIPIO_IBGE_P#@] 
		end if;
		 
		if (upper(trim(both nm_municipio_w)) <> upper(trim(both nm_municipio_c_w))) then 
			ds_info_compl_w := ds_info_compl_w || wheb_mensagem_pck.get_texto(299387,'NM_MUNICIPIO_C_P='||nm_municipio_c_w||';NM_MUNICIPIO_P='||nm_municipio_w) ||chr(13) || chr(10);
			--O Município cadastrado: [#@NM_MUNICIPIO_C_P#@] é diferente do Município correspondente ao CEP: [#@NM_MUNICIPIO_P#@] 
		end if;
		 
		if (upper(trim(both nm_bairro_w)) <> upper(trim(both nm_bairro_c_w))) then 
			ds_info_compl_w := ds_info_compl_w || wheb_mensagem_pck.get_texto(299425,'NM_BAIRRO_C_P='|| nm_bairro_c_w ||';NM_BAIRRO_P='||nm_bairro_w) || chr(13) || chr(10);
			--O Bairro cadastrado: [#@NM_BAIRRO_C_P#@] é diferente do Bairro correspondente ao CEP: [#@NM_BAIRRO_P#@] 
		end if;
	end if;
				 
	if (ds_info_compl_w IS NOT NULL AND ds_info_compl_w::text <> '') then 
		 
		insert into w_inconsistencias_atend( 
			nr_sequencia, 
			nr_atendimento, 
			dt_entrada, 
			ds_informacao, 
			ie_tipo, 
			nm_usuario) 
		values (nextval('w_inconsistencias_atend_seq'), 
			nr_atendimento_w, 
			dt_entrada_w, 
			ds_info_compl_w, 
			'CME', 
			nm_usuario_p);		
	end if;
	 
	ds_texto1_w	:= wheb_mensagem_pck.get_texto(299355);-- Dia(s) 
	ds_texto2_w	:= wheb_mensagem_pck.get_texto(299356);-- dias 
	ds_texto3_w	:= wheb_mensagem_pck.get_texto(299447);-- Permanência no setor 
	 
	/* Tempo permanência x Ala de saída */
	open C02;
	loop 
	fetch C02 into	 
		ds_info_compl_w, 
		ds_setor_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		 
		ds_info_compl_w := ds_texto3_w || ' ' || ds_setor_w || ': ' || trim(both ds_info_compl_w) || '.';
		 
		insert into w_inconsistencias_atend( 
				nr_sequencia, 
				nr_atendimento, 
				dt_entrada, 
				ds_informacao, 
				ie_tipo, 
				nm_usuario) 
			values (nextval('w_inconsistencias_atend_seq'), 
				nr_atendimento_w, 
				dt_entrada_w, 
				ds_info_compl_w, 
				'TPS', 
				nm_usuario_p);
		end;
	end loop;
	close C02;	
	 
	ds_texto1_w	:= wheb_mensagem_pck.get_texto(299374);-- Diagnóstico	 
	ds_texto2_w	:= wheb_mensagem_pck.get_texto(280602);-- Proced: 
	/* Diagnóstico principal x Procedimento realizado */
	open C07;
	loop 
	fetch C07 into	 
		ds_info_compl_w;
	EXIT WHEN NOT FOUND; /* apply on C07 */
		begin 
		insert into w_inconsistencias_atend( 
					nr_sequencia, 
					nr_atendimento, 
					dt_entrada, 
					ds_informacao, 
					ie_tipo, 
					nm_usuario) 
		values (	nextval('w_inconsistencias_atend_seq'), 
			nr_atendimento_w, 
			dt_entrada_w, 
			ds_info_compl_w, 
			'DGP', 
			nm_usuario_p);		
		end;
	end loop;
	close C07;
 
	ds_texto1_w	:= wheb_mensagem_pck.get_texto(280587);-- Procedimento: 
	ds_texto2_w	:= wheb_mensagem_pck.get_texto(299376);-- Especialidade méd. 
	/* Especialidade principal médico x Diagnóstico */
	open C08;
	loop 
	fetch C08 into	 
		cd_especialidade_med_w, 
		cd_procedimento_w, 
		cd_grupo_proc_w, 
		cd_area_procedimento_w, 
		cd_especialidade_w, 
		ie_origem_proced_w, 
		nr_seq_proc_interno_w, 
		 
		ds_info_compl_w;
	EXIT WHEN NOT FOUND; /* apply on C08 */
		begin 
		 
		ie_existe_w := 'N';
		 
		open C09;
		loop 
		fetch C09 into	 
			cd_especialidade_w;
		EXIT WHEN NOT FOUND; /* apply on C09 */
			begin 
			 
			ie_existe_w := 'S';
			 
			if (cd_especialidade_w = cd_especialidade_med_w) then 
				ie_existe_w := 'N';
				exit;
			end if;
			 
			end;
		end loop;
		close C09;
		 
		if (ie_existe_w = 'S') then				 
			 
			insert into w_inconsistencias_atend( 
						nr_sequencia, 
						nr_atendimento, 
						dt_entrada, 
						ds_informacao, 
						ie_tipo, 
						nm_usuario) 
			values (	nextval('w_inconsistencias_atend_seq'), 
				nr_atendimento_w, 
				dt_entrada_w, 
				ds_info_compl_w, 
				'EMD', 
				nm_usuario_p);
		end if;
		 
		end;
	end loop;
	close C08;	
	end;
 
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_inconsistencias_atend ( cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) FROM PUBLIC;

