-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sup_importa_nota_fiscal ( tp_registro_p text, cd_estabelecimento_p bigint, cd_cgc_emitente_p text, cd_pessoa_fisica_p text, cd_serie_nf_p text, nr_nota_fiscal_p bigint, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, dt_emissao_p timestamp, dt_entrada_saida_p timestamp, cd_condicao_pagamento_p bigint, ie_tipo_nota_p text, vl_frete_p bigint, vl_seguro_p bigint, vl_despesa_acessoria_p bigint, vl_descontos_p bigint, nm_usuario_p text, nr_item_nf_p bigint, cd_material_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_item_nf_p bigint, vl_unitario_item_nf_p bigint, vl_desconto_p bigint, cd_local_estoque_p bigint, cd_conta_contabil_p text, cd_centro_custo_p text, nr_seq_conta_financ_p bigint, cd_tributo_p bigint, vl_tributo_p bigint, vl_base_calculo_p bigint, cd_conta_financ_p bigint, vl_rateio_p bigint, dt_vencimento_p timestamp, vl_vencimento_p bigint, nr_sequencia_p INOUT bigint, ds_erro_p INOUT text, nr_titulo_receber_p bigint, ie_de_para_pf_p text) AS $body$
DECLARE

 
 
cd_cgc_w				varchar(14) := '';
cd_cgc_emitente_w			varchar(14) := '';
cd_cgc_estabelecimento_w			varchar(14) := '';
cd_condicao_pagamento_w			bigint;
cd_condicao_pagamento_padrao_w		bigint;
nr_sequencia_w				bigint;
nr_sequencia_nf_w				bigint;
cd_material_w				integer;
cd_procedimento_w			bigint;
cd_material_estoque_w			integer;
cd_unidade_medida_compra_w		varchar(30);
cd_unidade_medida_estoque_w		varchar(30);
qt_conv_compra_estoque_w			double precision;
qt_item_estoque_w				double precision;
qt_conversao_w				double precision;
pr_desconto_w				double precision;
vl_liquido_w				double precision;
vl_total_item_nf_w				double precision;
cd_local_estoque_w			smallint;
nr_seq_item_trib_w				bigint;
qt_existe_w				bigint;
ie_forma_pagamento_w			smallint;
nr_nota_fiscal_w				varchar(255);
qt_registro_w				bigint;
ie_numero_nota_w				varchar(01);
nr_titulo_receber_w				bigint;
nr_seq_nf_saida_w				bigint;
dt_entrada_saida_w			timestamp;
cd_pessoa_fisica_w			pessoa_fisica.cd_pessoa_fisica%type;
cd_centro_custo_w				centro_custo.cd_centro_custo%type;
cd_conta_contabil_w			conta_contabil.cd_conta_contabil%type;


BEGIN 
	 
 
if (dt_entrada_saida_p IS NOT NULL AND dt_entrada_saida_p::text <> '') then 
	dt_entrada_saida_w	:= to_date(to_char(dt_entrada_saida_p, 'dd/mm/yyyy') || ' ' || to_char(clock_timestamp(),'hh24:mi:ss') ,'dd/mm/yyyy hh24:mi:ss');
end if;
 
if (ie_tipo_nota_p not in ('EF','EN','SD','SE','SF')) then 
	ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(280657) || ie_tipo_nota_p;
end if;
 
nr_nota_fiscal_w	:= nr_nota_fiscal_p;
 
select	obter_cgc_estabelecimento(cd_estabelecimento_p) 
into STRICT	cd_cgc_estabelecimento_w
;
 
if (ie_tipo_nota_p in ('EF','EN')) then 
	cd_cgc_emitente_w	:= cd_cgc_emitente_p;
else 
	cd_cgc_emitente_w	:= cd_cgc_estabelecimento_w;
	 
	select	count(*) 
	into STRICT	qt_registro_w 
	from	serie_nota_fiscal 
	where	cd_serie_nf 			= cd_serie_nf_p 
	and	cd_estabelecimento 		= cd_estabelecimento_p;
	 
	if (qt_registro_w > 0) and (coalesce(nr_nota_fiscal_p::text, '') = '') then 
		select	nr_ultima_nf + 1, 
			ie_numero_nota 
		into STRICT	nr_nota_fiscal_w, 
			ie_numero_nota_w 
		from	serie_nota_fiscal 
		where	cd_serie_nf 		= cd_serie_nf_p 
		and	cd_estabelecimento 	= cd_estabelecimento_p;
	end if;
end if;
 
if (tp_registro_p = 1) then 
	select	coalesce(MAX(nr_sequencia_nf),0) + 1 
	into STRICT 	nr_sequencia_nf_w 
	from 	nota_fiscal 
	where 	cd_estabelecimento	= cd_estabelecimento_p 
	and 	cd_cgc_emitente	= cd_cgc_emitente_w 
	and 	nr_nota_fiscal	= nr_nota_fiscal_w 
	and 	cd_serie_nf	= cd_serie_nf_p;
else 
	select	nr_sequencia_nf 
	into STRICT	nr_sequencia_nf_w 
	from	nota_fiscal 
	where	nr_sequencia = nr_sequencia_p;
end if;
 
if (tp_registro_p = 1) then 
	begin 
 
	select	count(*) 
	into STRICT	qt_existe_w 
	from	pessoa_juridica 
	where	cd_cgc = cd_cgc_emitente_p;
	 
	if (qt_existe_w = 0) then 
		begin 
		 
		select	count(*) 
		into STRICT	qt_existe_w 
		from	pessoa_juridica 
		where	cd_cgc = cd_cgc_emitente_w;
	 
		end;
	end if;
	 
	if (qt_existe_w = 0) then 
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280659) || cd_cgc_emitente_p;
	end if;
	 
	if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then 
	 
		if (coalesce(ie_de_para_pf_p,'0') = '1') then 
			begin 
			 
			select	count(*) 
			into STRICT	qt_existe_w 
			from	pessoa_fisica 
			where	cd_sistema_ant = trim(both cd_pessoa_fisica_p);
			 
			if (qt_existe_w > 0) then 
				select	max(cd_pessoa_fisica) 
				into STRICT	cd_pessoa_fisica_w 
				from	pessoa_fisica 
				where	cd_sistema_ant = trim(both cd_pessoa_fisica_p);
			end if;
			 
			if (qt_existe_w = 0) then 
				begin 
				 
				begin 
				 
				select	count(*) 
				into STRICT	qt_existe_w 
				from	pessoa_fisica 
				where	cd_sistema_ant = to_char((trim(both cd_pessoa_fisica_p))::numeric );
				 
				if (qt_existe_w > 0) then 
					select	max(cd_pessoa_fisica) 
					into STRICT	cd_pessoa_fisica_w 
					from	pessoa_fisica 
					where	cd_sistema_ant = to_char((trim(both cd_pessoa_fisica_p))::numeric );
				end if;
				 
				exception 
					when others then 
					qt_existe_w := 0;
				end;
				 
				end;
			end if;
			 
			if (qt_existe_w = 0) then 
				ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280660) || cd_pessoa_fisica_p;
			end if;
			 
			end;			
		else	begin 
			 
			select	count(*) 
			into STRICT	qt_existe_w 
			from	pessoa_fisica 
			where	cd_pessoa_fisica = cd_pessoa_fisica_p;
			if (qt_existe_w = 0) then 
				ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280660) || cd_pessoa_fisica_p;
			end if;
		 
			end;
		end if;
		 
	end if;
	 
	select	count(*) 
	into STRICT	qt_existe_w 
	from	serie_nota_fiscal 
	where	cd_serie_nf = cd_serie_nf_p 
	and	cd_estabelecimento = cd_estabelecimento_p;
	if (qt_existe_w = 0) then 
		ds_erro_p		:= WHEB_MENSAGEM_PCK.get_texto(280661) || cd_serie_nf_p || WHEB_MENSAGEM_PCK.get_texto(280662) || cd_estabelecimento_p;
	end if;
 
	select	coalesce(max(cd_condicao_pagamento_padrao),0) 
	into STRICT	cd_condicao_pagamento_padrao_w 
	from	parametro_compras 
	where	cd_estabelecimento = cd_estabelecimento_p;
	 
	select	max(cd_condicao_pagamento) 
	into STRICT	cd_condicao_pagamento_w 
	from	condicao_pagamento 
	where	coalesce(cd_sistema_ant, cd_condicao_pagamento) = cd_condicao_pagamento_p;		
 
	cd_condicao_pagamento_w	:= coalesce(cd_condicao_pagamento_w, cd_condicao_pagamento_padrao_w);	
 
	select	count(*) 
	into STRICT	qt_existe_w 
	from	condicao_pagamento 
	where	cd_condicao_pagamento = cd_condicao_pagamento_w;
	if (qt_existe_w = 0) then 
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280663) || cd_condicao_pagamento_w;
	end if;
 
	select	count(*) 
	into STRICT	qt_existe_w 
	from	operacao_nota 
	where	cd_operacao_nf = cd_operacao_nf_p;
	if (qt_existe_w = 0) then 
		ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(280664) || cd_operacao_nf_p;
	end if;
 
	select	count(*) 
	into STRICT	qt_existe_w 
	from	natureza_operacao 
	where	cd_natureza_operacao = cd_natureza_operacao_p;
	if (qt_existe_w = 0) then 
		ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(280665) || cd_natureza_operacao_p;
	end if;
	 
	 
	 
	if (coalesce(ds_erro_p::text, '') = '') then 
		begin 
		select	nextval('nota_fiscal_seq') 
		into STRICT	nr_sequencia_w 
		;
 
		insert into nota_fiscal( 
			nr_sequencia, 
			cd_estabelecimento, 
			cd_cgc_emitente, 
			cd_pessoa_fisica, 
			cd_serie_nf, 
			nr_nota_fiscal, 
			nr_sequencia_nf, 
			cd_operacao_nf, 
			dt_emissao, 
			dt_entrada_saida, 
			ie_acao_nf, 
			ie_emissao_nf, 
			ie_tipo_frete, 
			vl_mercadoria, 
			vl_frete, 
			vl_seguro, 
			vl_despesa_acessoria, 
			vl_ipi, 
			vl_descontos, 
			vl_total_nota, 
			qt_peso_bruto, 
			qt_peso_liquido, 
			dt_atualizacao, 
			nm_usuario, 
			cd_cgc, 
			cd_natureza_operacao, 
			cd_condicao_pagamento, 
			ie_situacao, 
			ie_tipo_nota, 
			ie_entregue_bloqueto) 
		values (	nr_sequencia_w, 
			cd_estabelecimento_p, 
			cd_cgc_emitente_w, 
			CASE WHEN coalesce(ie_de_para_pf_p,'0')='1' THEN cd_pessoa_fisica_w  ELSE cd_pessoa_fisica_p END , 
			cd_serie_nf_p, 
			nr_nota_fiscal_w, 
			nr_sequencia_nf_w, 
			cd_operacao_nf_p, 
			dt_emissao_p, 
			dt_entrada_saida_w, 
			'1', 
			'0', 
			'0', 
			0, 
			vl_frete_p, 
			vl_seguro_p, 
			vl_despesa_acessoria_p, 
			0, 
			vl_descontos_p, 
			0, 
			0, 
			0, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_cgc_emitente_p, 
			cd_natureza_operacao_p, 
			cd_condicao_pagamento_w, 
			'1', 
			ie_tipo_nota_p, 
			'N');
 
			 
			 
		if (coalesce(nr_titulo_receber_p,0) > 0) and (ie_tipo_nota_p not in ('EF','EN')) then 
			 
			 
			select	coalesce(max(nr_titulo),0) 
			into STRICT	nr_titulo_receber_w 
			from	titulo_receber 
			where	somente_numero(nr_titulo_externo) = nr_titulo_receber_p;
			 
			if (nr_titulo_receber_w = 0) then 
				select	coalesce(max(nr_titulo),0) 
				into STRICT	nr_titulo_receber_w 
				from	titulo_receber 
				where	nr_titulo = nr_titulo_receber_p;
					 
			end if;
			 
			 
			if (coalesce(nr_titulo_receber_w,0) > 0) then 
				select	count(*) 
				into STRICT	qt_existe_w 
				from	titulo_receber 
				where	nr_titulo = nr_titulo_receber_w 
				and	(nr_seq_nf_saida IS NOT NULL AND nr_seq_nf_saida::text <> '');
				 
				if (qt_existe_w > 0) then 
					select	max(nr_seq_nf_saida) 
					into STRICT	nr_seq_nf_saida_w 
					from	titulo_receber 
					where	nr_titulo = nr_titulo_receber_w;
	 
					ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(280666) || nr_titulo_receber_w || chr(10) || 
							WHEB_MENSAGEM_PCK.get_texto(280667) || nr_seq_nf_saida_w;
				else 
					update	titulo_receber 
					set	nr_seq_nf_saida	= nr_sequencia_w, 
						nr_nota_fiscal	= nr_nota_fiscal_w 
					where	nr_titulo	= nr_titulo_receber_w;
 
				end if;
			end if;
		end if;
		end;
	end if;
	end;
end if;
 
 
 
 
if (tp_registro_p = 2) then 
	begin 
 
	if (cd_material_p <> 0) then 
		select	coalesce(max(cd_material),0) 
		into STRICT	cd_material_w 
		from	preco_pj 
		where	cd_cgc	= cd_cgc_emitente_p 
		and	cd_item	= cd_material_p 
		and	cd_estabelecimento = cd_estabelecimento_p;
 
		if (cd_material_w = 0) then 
			select	coalesce(max(cd_material_import),0) 
			into STRICT	cd_material_w 
			from	parametro_compras 
			where	cd_estabelecimento = cd_estabelecimento_p;
		end if;
 
		if (cd_material_w = 0) then 
			select	coalesce(max(cd_material),0) 
			into STRICT	cd_material_w 
			from	material 
			where	cd_material = cd_material_p;
		end if;
 
		if (cd_material_w = 0) then 
			ds_erro_p		:= WHEB_MENSAGEM_PCK.get_texto(280668) || Chr(13) || 
					WHEB_MENSAGEM_PCK.get_texto(280669);
		end if;
 
		begin 
		select	cd_material_estoque, 
			substr(obter_dados_material_estab(cd_material,cd_estabelecimento_p,'UMC'),1,30) cd_unidade_medida_compra, 
			substr(obter_dados_material_estab(cd_material,cd_estabelecimento_p,'UME'),1,30) cd_unidade_medida_estoque, 
			qt_conv_compra_estoque 
		into STRICT	cd_material_estoque_w, 
			cd_unidade_medida_compra_w, 
			cd_unidade_medida_estoque_w, 
			qt_conv_compra_estoque_w 
		from	material 
		where	cd_material = cd_material_w;
		exception 
			when others then 
				ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(280670) || cd_material_p;
		end;
 
		qt_conversao_w := obter_qt_conv_compra_est(cd_material_w, cd_cgc_emitente_p, cd_unidade_medida_compra_w, cd_estabelecimento_p, null, qt_conversao_w);
		qt_item_estoque_w	:= qt_item_nf_p * qt_conversao_w;
 
	elsif (cd_procedimento_p <> 0) then 
		select	coalesce(max(cd_procedimento),0) 
		into STRICT	cd_procedimento_w 
		from	procedimento 
		where	cd_procedimento = cd_procedimento_p;
 
		if (cd_procedimento_w = 0) then 
			ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(280671) || cd_procedimento_p;
		end if;
 
	elsif (cd_procedimento_p = 0) and (cd_material_p = 0) then 
		ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(280672);
	end if;
 
	vl_total_item_nf_w	:= (qt_item_nf_p * vl_unitario_item_nf_p);
 
	if (vl_desconto_p > 0) then 
		pr_desconto_w	:= dividir((vl_desconto_p * 100),(vl_total_item_nf_w));
		vl_liquido_w	:= vl_total_item_nf_w - vl_desconto_p;
	else 
		pr_desconto_w	:= 0;
		vl_liquido_w	:= vl_total_item_nf_w;
	end if;
 
	if (cd_local_estoque_p <> 0) then 
		select	coalesce(max(cd_local_estoque),0) 
		into STRICT	cd_local_estoque_w 
		from	local_estoque 
		where	cd_local_estoque = cd_local_estoque_p 
		and	cd_estabelecimento = cd_estabelecimento_p;
		if (cd_local_estoque_w = 0) then 
			ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280673) || cd_local_estoque_p || WHEB_MENSAGEM_PCK.get_texto(280662) || cd_estabelecimento_p;
		end if;
	end if;
 
	if (cd_conta_contabil_p IS NOT NULL AND cd_conta_contabil_p::text <> '') then 
	 
		select	coalesce(max(cd_conta_contabil), cd_conta_contabil_p) 
		into STRICT	cd_conta_contabil_w 
		from	conta_contabil 
		where	coalesce(cd_sistema_contabil, cd_conta_contabil) = cd_conta_contabil_p;	
	 
		select	count(*) 
		into STRICT	qt_existe_w 
		from	conta_contabil 
		where	cd_conta_contabil = cd_conta_contabil_w;
		if (qt_existe_w = 0) then 
			ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280674) || cd_conta_contabil_w;
		end if;
	end if;
	 
	if (coalesce(nr_seq_conta_financ_p,0) > 0) then 
		select	count(*) 
		into STRICT	qt_existe_w 
		from	conta_financeira 
		where	cd_conta_financ = nr_seq_conta_financ_p;
		if (qt_existe_w = 0) then 
			ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280675) || cd_conta_contabil_w;
		end if;
	end if;	
 
	if (cd_centro_custo_p <> 0) then 
	 
		select	coalesce(max(cd_centro_custo), cd_centro_custo_p) 
		into STRICT	cd_centro_custo_w 
		from	centro_custo 
		where	coalesce(cd_sistema_contabil, cd_centro_custo) = cd_centro_custo_p 
		and	cd_estabelecimento = cd_estabelecimento_p;		
	 
		select	count(*) 
		into STRICT	qt_existe_w 
		from	centro_custo 
		where	cd_centro_custo = cd_centro_custo_w 
		and	cd_estabelecimento = cd_estabelecimento_p;
		 
		if (qt_existe_w = 0) then 
			ds_erro_p		:= WHEB_MENSAGEM_PCK.get_texto(280677) || cd_centro_custo_w || WHEB_MENSAGEM_PCK.get_texto(280662) || cd_estabelecimento_p;
		end if;
	end if;
 
	if (coalesce(ds_erro_p::text, '') = '') then 
		begin 
		insert into nota_fiscal_item( 
			nr_sequencia, 
			cd_estabelecimento, 
			cd_cgc_emitente, 
			cd_serie_nf, 
			nr_nota_fiscal, 
			nr_sequencia_nf, 
			nr_item_nf, 
			cd_natureza_operacao, 
			qt_item_nf, 
			qt_item_estoque, 
			vl_unitario_item_nf, 
			vl_total_item_nf, 
			dt_atualizacao, 
			nm_usuario, 
			cd_material, 
			cd_procedimento, 
			ie_origem_proced, 
			vl_desconto_rateio, 
			vl_seguro, 
			vl_frete, 
			pr_desconto, 
			vl_desconto, 
			vl_despesa_acessoria, 
			vl_liquido, 
			cd_material_estoque, 
			cd_unidade_medida_compra, 
			cd_unidade_medida_estoque, 
			cd_local_estoque, 
			cd_conta_contabil, 
			nr_seq_conta_financ, 
			cd_centro_custo)			 
		values (nr_sequencia_p, 
			cd_estabelecimento_p, 
			cd_cgc_emitente_p, 
			cd_serie_nf_p, 
			nr_nota_fiscal_w, 
			nr_sequencia_nf_w, 
			nr_item_nf_p, 
			cd_natureza_operacao_p, 
			qt_item_nf_p, 
			qt_item_estoque_w, 
			vl_unitario_item_nf_p, 
			vl_total_item_nf_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_material_w, 
			cd_procedimento_w, 
			ie_origem_proced_p, 
			0, 
			0, 
			0, 
			pr_desconto_w, 
			vl_desconto_p, 
			0, 
			vl_liquido_w, 
			cd_material_estoque_w, 
			cd_unidade_medida_compra_w, 
			cd_unidade_medida_estoque_w, 
			CASE WHEN cd_local_estoque_w=0 THEN ''  ELSE cd_local_estoque_w END , 
			cd_conta_contabil_w, 
			CASE WHEN nr_seq_conta_financ_p=0 THEN ''  ELSE nr_seq_conta_financ_p END , 
			CASE WHEN cd_centro_custo_w=0 THEN ''  ELSE cd_centro_custo_w END );
		end;
	end if;
	end;
end if;
 
if (tp_registro_p = 3) then 
	begin						 
	 
	select	count(*) 
	into STRICT	qt_existe_w 
	from	nota_fiscal_item 
	where	nr_sequencia = nr_sequencia_p;
	if (qt_existe_w = 0) then 
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280678);
	end if;
 
	if (coalesce(ds_erro_p::text, '') = '') and (vl_tributo_p > 0) and (cd_tributo_p IS NOT NULL AND cd_tributo_p::text <> '') then 
		begin 
		select (coalesce(max(nr_sequencia),0)+1) 
		into STRICT	nr_seq_item_trib_w 
		from	nota_fiscal_item_trib;
 
		select	count(*) 
		into STRICT	qt_existe_w 
		from	tributo 
		where	ie_corpo_item = 'I' 
		and	cd_tributo = cd_tributo_p;
		if (qt_existe_w = 0) then 
			ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(280679) || cd_tributo_p || WHEB_MENSAGEM_PCK.get_texto(280680);
		end if;
		 
		if (coalesce(ds_erro_p::text, '') = '') and (vl_tributo_p > 0) and (cd_tributo_p IS NOT NULL AND cd_tributo_p::text <> '') then 
			begin 
			 
			select	coalesce(sum(vl_liquido),0) 
			into STRICT	vl_liquido_w 
			from	nota_fiscal_item 
			where	nr_sequencia = nr_sequencia_p 
			and	nr_item_nf = nr_item_nf_p;
			 
			insert into nota_fiscal_item_trib( 
				nr_sequencia, 
				cd_estabelecimento, 
				cd_cgc_emitente, 
				cd_serie_nf, 
				nr_nota_fiscal, 
				nr_sequencia_nf, 
				nr_item_nf, 
				cd_tributo, 
				vl_tributo, 
				dt_atualizacao, 
				nm_usuario, 
				vl_base_calculo, 
				tx_tributo, 
				vl_reducao_base, 
				vl_trib_nao_retido, 
				vl_base_nao_retido, 
				vl_trib_adic, 
				vl_base_adic, 
				ie_rateio) 
			values (nr_sequencia_p, 
				cd_estabelecimento_p, 
				cd_cgc_emitente_p, 
				cd_serie_nf_p, 
				nr_nota_fiscal_w, 
				nr_sequencia_nf_w, 
				nr_item_nf_p, 
				cd_tributo_p, 
				vl_tributo_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				vl_base_calculo_p, 
				dividir((vl_tributo_p * 100), vl_liquido_w), 
				0, 
				0, 
				0, 
				0, 
				0, 
				'N');
			end;
		end if;
		end;
	end if;
	end;
end if;
 
 
if (tp_registro_p = 4) then 
	begin 
	 
	select	count(*) 
	into STRICT	qt_existe_w 
	from	nota_fiscal_item 
	where	nr_sequencia = nr_sequencia_p;
	if (qt_existe_w = 0) then 
		ds_erro_p		:= WHEB_MENSAGEM_PCK.get_texto(280678);
	end if;
	if (coalesce(ds_erro_p::text, '') = '') and (vl_rateio_p > 0) then 
		begin 
		if (cd_conta_contabil_p IS NOT NULL AND cd_conta_contabil_p::text <> '') then 
		 
			select	coalesce(max(cd_conta_contabil), cd_conta_contabil_p) 
			into STRICT	cd_conta_contabil_w 
			from	conta_contabil 
			where	coalesce(cd_sistema_contabil, cd_conta_contabil) = cd_conta_contabil_p;	
		 
			select	count(*) 
			into STRICT	qt_existe_w 
			from	conta_contabil 
			where	cd_conta_contabil = cd_conta_contabil_w;
			if (qt_existe_w = 0) then 
				ds_erro_p		:= WHEB_MENSAGEM_PCK.get_texto(280674) || cd_conta_contabil_w;
			end if;
		end if;
 
		if (cd_centro_custo_p <> 0) then 
		 
			select	coalesce(max(cd_centro_custo), cd_centro_custo_p) 
			into STRICT	cd_centro_custo_w 
			from	centro_custo 
			where	coalesce(cd_sistema_contabil, cd_centro_custo) = cd_centro_custo_p 
			and	cd_estabelecimento = cd_estabelecimento_p;			
		 
			select	count(*) 
			into STRICT	qt_existe_w 
			from	centro_custo 
			where	cd_centro_custo = cd_centro_custo_w 
			and	cd_estabelecimento = cd_estabelecimento_p;
			if (qt_existe_w = 0) then 
				ds_erro_p		:= WHEB_MENSAGEM_PCK.get_texto(280681) || cd_centro_custo_w || WHEB_MENSAGEM_PCK.get_texto(280662) || cd_estabelecimento_p;
			end if;
		end if;
 
		if (cd_conta_financ_p <> 0) then 
			begin 
			select	count(*) 
			into STRICT	qt_existe_w 
			from	conta_financeira 
			where	cd_conta_financ = cd_conta_financ_p;
			if (qt_existe_w = 0) then 
				ds_erro_p		:= WHEB_MENSAGEM_PCK.get_texto(280675) || cd_conta_financ_p;
			end if;
			end;
		end if;
		 
		if (coalesce(ds_erro_p::text, '') = '') then 
			begin 
			insert into nota_fiscal_item_rateio( 
				nr_sequencia, 
				nr_seq_nota, 
				nr_item_nf, 
				dt_atualizacao, 
				nm_usuario, 
				cd_centro_custo, 
				cd_conta_contabil, 
				cd_conta_financ, 
				vl_rateio, 
				vl_frete, 
				vl_desconto, 
				vl_seguro, 
				vl_despesa_acessoria, 
				ie_situacao) 
			values ( nextval('nota_fiscal_item_rateio_seq'), 
				nr_sequencia_p, 
				nr_item_nf_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				CASE WHEN cd_centro_custo_w=0 THEN ''  ELSE cd_centro_custo_w END , 
				cd_conta_contabil_w, 
				CASE WHEN cd_conta_financ_p=0 THEN ''  ELSE cd_conta_financ_p END , 
				vl_rateio_p, 
				0, 
				0, 
				0, 
				0, 
				'A');
			end;
		end if;
		end;
	end if;
	end;
end if;
 
if (tp_registro_p = 5) then 
	begin 
	 
	if (vl_tributo_p > 0) and (cd_tributo_p IS NOT NULL AND cd_tributo_p::text <> '') then 
		begin 
		select	count(*) 
		into STRICT	qt_existe_w 
		from	tributo 
		where	ie_corpo_item = 'C' 
		and	cd_tributo = cd_tributo_p;
		if (qt_existe_w = 0) then 
			ds_erro_p		:= WHEB_MENSAGEM_PCK.get_texto(280679) || cd_tributo_p || WHEB_MENSAGEM_PCK.get_texto(280682);
		end if;
		end;
	end if;
		 
	if (coalesce(ds_erro_p::text, '') = '') and (vl_tributo_p > 0) and (cd_tributo_p IS NOT NULL AND cd_tributo_p::text <> '') then 
		begin 
		 
		select	coalesce(sum(vl_liquido),0) 
		into STRICT	vl_liquido_w 
		from	nota_fiscal_item 
		where	nr_sequencia = nr_sequencia_p;
		 
		insert into nota_fiscal_trib( 
			nr_sequencia, 
			cd_tributo, 
			vl_tributo, 
			dt_atualizacao, 
			nm_usuario, 
			vl_base_calculo, 
			tx_tributo, 
			vl_reducao_base, 
			vl_trib_nao_retido, 
			vl_base_nao_retido, 
			vl_trib_adic, 
			vl_base_adic, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_interno) 
		values (nr_sequencia_p, 
			cd_tributo_p, 
			vl_tributo_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			vl_base_calculo_p, 
			dividir((vl_tributo_p * 100), vl_liquido_w), 
			0, 
			0, 
			0, 
			0, 
			0, 
			clock_timestamp(), 
			nm_usuario_p, 
			nextval('nota_fiscal_trib_seq'));
		end;
	end if;
	end;
end if;
 
if (tp_registro_p = 6) then 
	begin 
	 
	if (cd_condicao_pagamento_p > 0) and (cd_condicao_pagamento_p IS NOT NULL AND cd_condicao_pagamento_p::text <> '') then 
		 
		select	ie_forma_pagamento 
		into STRICT	ie_forma_pagamento_w 
		from	condicao_pagamento 
		where	coalesce(cd_sistema_ant, cd_condicao_pagamento) = cd_condicao_pagamento_p;		
		 
		if (ie_forma_pagamento_w = 10) then 
			insert into nota_fiscal_venc( 
				nr_sequencia, 
				cd_estabelecimento, 
				cd_cgc_emitente, 
				cd_serie_nf, 
				nr_nota_fiscal, 
				nr_sequencia_nf, 
				dt_vencimento, 
				vl_vencimento, 
				dt_atualizacao, 
				nm_usuario, 
				vl_base_venc, 
				ie_origem) 
			values (	nr_sequencia_p, 
				cd_estabelecimento_p, 
				cd_cgc_emitente_p, 
				cd_serie_nf_p, 
				nr_nota_fiscal_w, 
				nr_sequencia_nf_w, 
				dt_vencimento_p, 
				vl_vencimento_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				vl_vencimento_p, 
				'N');
		end if;
	end if;	
	end;
end if;
	 
if (tp_registro_p <> 1) then 
	nr_sequencia_w	:= nr_sequencia_p;
end if;
nr_sequencia_p := nr_sequencia_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sup_importa_nota_fiscal ( tp_registro_p text, cd_estabelecimento_p bigint, cd_cgc_emitente_p text, cd_pessoa_fisica_p text, cd_serie_nf_p text, nr_nota_fiscal_p bigint, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, dt_emissao_p timestamp, dt_entrada_saida_p timestamp, cd_condicao_pagamento_p bigint, ie_tipo_nota_p text, vl_frete_p bigint, vl_seguro_p bigint, vl_despesa_acessoria_p bigint, vl_descontos_p bigint, nm_usuario_p text, nr_item_nf_p bigint, cd_material_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_item_nf_p bigint, vl_unitario_item_nf_p bigint, vl_desconto_p bigint, cd_local_estoque_p bigint, cd_conta_contabil_p text, cd_centro_custo_p text, nr_seq_conta_financ_p bigint, cd_tributo_p bigint, vl_tributo_p bigint, vl_base_calculo_p bigint, cd_conta_financ_p bigint, vl_rateio_p bigint, dt_vencimento_p timestamp, vl_vencimento_p bigint, nr_sequencia_p INOUT bigint, ds_erro_p INOUT text, nr_titulo_receber_p bigint, ie_de_para_pf_p text) FROM PUBLIC;

