-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_operacao_terceiro (nr_seq_operacao_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_terceiro_w			bigint := 0;
qt_pontos_w			preco_amb.qt_pontuacao%type;
nr_seq_conta_w			bigint := 0;
dt_operacao_w			timestamp;
cd_estabelecimento_w		bigint := 0;
cd_convenio_w			bigint := 0;
cd_categoria_w			varchar(10) := '';
cd_erro_w			bigint := 0;
ie_tipo_valor_w			varchar(01) := '';
vl_operacao_w			double precision := 0;
vl_operacao_truncado_w		double precision := 0;
vl_operacao_calc_w		double precision := 0;
qt_operacao_w			double precision := 0;
vl_final_w				double precision := 0;
cd_material_w			integer	 := 0;
cd_procedimento_w		bigint   := 0;
ie_origem_proced_w		bigint   := 0;
vl_custo_operacional_w		double precision := 0;
vl_anestesista_w			double precision := 0;
vl_medico_w			double precision := 0;
vl_auxiliares_w			double precision := 0;
vl_materiais_w			double precision := 0;
vl_pto_procedimento_w		double precision := 0;
vl_pto_custo_operac_w		double precision := 0;
vl_pto_anestesista_w		double precision := 0;
vl_pto_medico_w              		double precision := 0;
vl_pto_auxiliares_w       	  	double precision := 0;
vl_pto_materiais_w       	    	double precision := 0;
dt_ult_vigencia_w            		timestamp;
cd_tab_preco_mat_w        	    	bigint       := 0;
ie_origem_preco_w          	  	bigint	 := 0;
cd_edicao_amb_w			integer	 := 0;
qt_porte_anestesico_w		smallint	 := 0;
dt_atualizacao_estoque_w		timestamp;
ie_classificacao_w			smallint	 := 0;
cd_usuario_convenio_w		varchar(40);
cd_plano_w			varchar(20);
ie_clinica_w			bigint;
cd_empresa_ref_w			bigint;
ie_preco_informado_w		varchar(01);
cd_condicao_pagamento_w		bigint;
nr_seq_classe_tit_rec_w		bigint;
nr_seq_operacao_w		bigint;
ie_gerar_conta_mes_w		varchar(1);
ie_gerar_vl_ultima_compra_w		varchar(15);
cd_unidade_medida_w		varchar(30);
nr_seq_bras_preco_w		bigint;
nr_seq_mat_bras_w			bigint;
nr_seq_conv_bras_w		bigint;
nr_seq_conv_simpro_w		bigint;
nr_seq_mat_simpro_w		bigint;
nr_seq_simpro_preco_w		bigint;
nr_seq_ajuste_proc_w		bigint;
nr_seq_ajuste_mat_w		bigint;
ie_multiplicar_valor_w		varchar(1);
ie_unidade_medida_w  	varchar(1);
nr_operacao_w           bigint;
vl_operacao_truncado4_w	double precision := 0;
nr_seq_oper_origem_w		terceiro_operacao.nr_seq_oper_origem%type;


BEGIN
begin
select coalesce(a.nr_seq_terceiro,0),
	a.dt_operacao,
	a.cd_estabelecimento,
	a.cd_material,
	a.cd_procedimento,
	a.ie_origem_proced,
	a.vl_operacao,
	coalesce(a.nr_seq_conta,0),
	b.ie_tipo_valor,
	a.dt_atualizacao_estoque,
	a.qt_operacao,
	b.cd_condicao_pagamento,
	b.nr_seq_classe_tit_rec,
	b.nr_sequencia,
	a.nr_seq_oper_origem
into STRICT 	nr_seq_terceiro_w,
     	dt_operacao_w,
     	cd_estabelecimento_w,
     	cd_material_w,
     	cd_procedimento_w,
	ie_origem_proced_w,
     	vl_operacao_w,
     	nr_seq_conta_w,
     	ie_tipo_valor_w,
	dt_atualizacao_estoque_w,
	qt_operacao_w,
	cd_condicao_pagamento_w,
	nr_seq_classe_tit_rec_w,
	nr_seq_operacao_w,
	nr_seq_oper_origem_w
from 	operacao_terceiro b,
	terceiro_operacao a
where	a.nr_seq_operacao 	= b.nr_sequencia
and	a.nr_sequencia 		= nr_seq_operacao_p;
exception
     	when others then
          nr_seq_terceiro_w     := 0;
end;

vl_operacao_truncado_w	:= trunc(vl_operacao_w,2);
vl_operacao_truncado4_w := trunc(vl_operacao_w,4);

ie_gerar_conta_mes_w := obter_param_usuario(907, 69, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_conta_mes_w);
ie_gerar_vl_ultima_compra_w := obter_param_usuario(919, 82, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_vl_ultima_compra_w);
ie_multiplicar_valor_w := obter_param_usuario(907, 73, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_multiplicar_valor_w);

if (nr_seq_terceiro_w <> 0) then
    	begin
/* rotina para obter os dados do terceiro  */

    	select cd_convenio,
           	cd_categoria
    	into STRICT 	cd_convenio_w,
         	cd_categoria_w
    	from terceiro
    	where nr_sequencia = nr_seq_terceiro_w;
    	if (nr_seq_conta_w = 0) then
		/* rotina para obter os dados da conta do terceiro  */

		if (cd_condicao_pagamento_w IS NOT NULL AND cd_condicao_pagamento_w::text <> '') then
			select	coalesce(max(nr_sequencia), 0)
			into STRICT	nr_seq_conta_w
			from	terceiro_conta
			where	nr_seq_terceiro			= nr_seq_terceiro_w
			and	ie_status_conta			= 'P'
			and (ie_gerar_conta_mes_w = 'N' or trunc(dt_operacao_w, 'month') = trunc(dt_mesano_referencia, 'month'))
			and	cd_estabelecimento		= cd_estabelecimento_w
			and	cd_condicao_pagamento		= cd_condicao_pagamento_w
			and	coalesce(nr_seq_classe_tit_rec,0)	= coalesce(nr_seq_classe_tit_rec_w,0);
		else

			select	coalesce(max(nr_sequencia), 0)
			into STRICT	nr_seq_conta_w
			from	terceiro_conta
			where	nr_seq_terceiro			= nr_seq_terceiro_w
			and	ie_status_conta			= 'P'
			and (ie_gerar_conta_mes_w = 'N' or trunc(dt_operacao_w, 'month') = trunc(dt_mesano_referencia, 'month'))
			and	cd_estabelecimento		= cd_estabelecimento_w
			and	coalesce(nr_seq_classe_tit_rec,0)	= coalesce(nr_seq_classe_tit_rec_w,0);
		end if;

/*          	and	dt_inicio	<= dt_operacao_w    -- Edgar 29/11/2004, OS 12876
          	and	dt_final	>= dt_operacao_w
          	and	ie_status_conta	= 'P';
*/
    	end if;

    	if (nr_seq_conta_w = 0) then
      	begin
        	select nextval('terceiro_conta_seq')
        	into STRICT nr_seq_conta_w
        	;

	        	insert into terceiro_conta(nr_sequencia,
				cd_estabelecimento,
				nr_seq_terceiro,
	                	ie_status_conta,
				dt_atualizacao,
				nm_usuario,
				dt_mesano_referencia,
	                	dt_inicio,
				dt_final,
				cd_convenio,
				cd_categoria,
				cd_condicao_pagamento,
				nr_seq_classe_tit_rec)
	        	values (nr_seq_conta_w,
	                	cd_estabelecimento_w,
	                	nr_seq_terceiro_w,
	                	'P',
	                	clock_timestamp(),
	                	nm_usuario_p,
	                	trunc(dt_operacao_w,'month'),
	                	trunc(dt_operacao_w,'dd'),
	                	last_day(trunc(dt_operacao_w,'dd')) + 1 - 1/86400,
	                	cd_convenio_w,
	                	cd_categoria_w,
				cd_condicao_pagamento_w,
				nr_seq_classe_tit_rec_w);

        	end;
    	end if;

	/* rotina para definicao de precos de materiais/procedimentos  */

    	if (ie_tipo_valor_w = 'C') then

	       	if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
        	  		SELECT * FROM define_preco_material(
					cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, dt_operacao_w, cd_material_w, 0, 0, 0, null, 0, 0, cd_plano_w, null, null, null, null, null, null, null, vl_operacao_truncado4_w, dt_ult_vigencia_w, cd_tab_preco_mat_w, ie_origem_preco_w, nr_seq_bras_preco_w, nr_seq_mat_bras_w, nr_seq_conv_bras_w, nr_seq_conv_simpro_w, nr_seq_mat_simpro_w, nr_seq_simpro_preco_w, nr_seq_ajuste_mat_w) INTO STRICT vl_operacao_truncado4_w, dt_ult_vigencia_w, cd_tab_preco_mat_w, ie_origem_preco_w, nr_seq_bras_preco_w, nr_seq_mat_bras_w, nr_seq_conv_bras_w, nr_seq_conv_simpro_w, nr_seq_mat_simpro_w, nr_seq_simpro_preco_w, nr_seq_ajuste_mat_w;



				SELECT * FROM CALCULAR_VL_OPERACAO(cd_estabelecimento_w, nr_seq_operacao_w, cd_material_w, vl_operacao_truncado4_w, cd_unidade_medida_w) INTO STRICT vl_operacao_truncado4_w, cd_unidade_medida_w;


				vl_operacao_truncado_w := trunc(vl_operacao_truncado4_w,2);

	       	elsif (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
			begin

			select  	ie_classificacao
			into STRICT		ie_classificacao_w
			from  	procedimento
			where 	cd_procedimento  = cd_procedimento_w
			  and 	ie_origem_proced = ie_origem_proced_w;

			if (ie_classificacao_w = 1) then
      	    			SELECT * FROM define_preco_procedimento(
					cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, dt_operacao_w, cd_procedimento_w, null, null, null, null, null, null, null, null, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, null, vl_operacao_truncado_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w, 0, null, 0, null, null, NULL, NULL, null, null, null, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_operacao_truncado_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w;
			else
				SELECT * FROM Define_Preco_Servico(
					cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, dt_operacao_w, cd_procedimento_w, 0, 0, 0, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, null, vl_operacao_truncado_w, nr_seq_ajuste_proc_w, null, 0, null, null, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_operacao_truncado_w, nr_seq_ajuste_proc_w;
			end if;
			end;
      		end if;
    	end if;



	vl_final_w	:= vl_operacao_truncado_w;

	if (ie_gerar_vl_ultima_compra_w = 'U') and (coalesce(vl_final_w,0) = 0) and (cd_material_w IS NOT NULL AND cd_material_w::text <> '') and (coalesce(cd_procedimento_w::text, '') = '') then

		vl_final_w := coalesce(obter_dados_ultima_compra(cd_estabelecimento_w, cd_material_w, 'VE'),0);
	end if;

	if (ie_tipo_valor_w = 'C') then
		vl_final_w := OBTER_REGRA_AJUSTE_TERC_OPER(cd_estabelecimento_w, nr_seq_operacao_w, nr_seq_terceiro_w, vl_final_w); /*lhalves OS 364626 em 23/09/2011*/
	end if;

if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then

select nr_seq_operacao
into STRICT nr_operacao_w
from terceiro_operacao
where nr_sequencia = nr_seq_operacao_p;


select ie_unidade_medida
into STRICT ie_unidade_medida_w
from operacao_terceiro
where nr_sequencia =  nr_operacao_w;




if (ie_unidade_medida_w IS NOT NULL AND ie_unidade_medida_w::text <> '') then
    if (ie_unidade_medida_w = 'S') then

	    vl_final_w := vl_final_w /  Obter_conversao_Material(cd_material_w,'CE');

	elsif (ie_unidade_medida_w = 'C') then
	    vl_final_w := vl_final_w * Obter_conversao_Material(cd_material_w,'EC');
	end if;
  end if;
end if;

/*OS 1715060 - Se tiver origem, indica que é estorno. Se é estorno, precisa fazer * -1, que é o que ocorre quando gera devolução da operação na rotina GERAR_DEVOLUCAO_OPER_TERC*/

if (nr_seq_oper_origem_w IS NOT NULL AND nr_seq_oper_origem_w::text <> '') and (ie_tipo_valor_w = 'C') then
	vl_final_w := vl_final_w * -1;
end if;

	    update terceiro_operacao
     	set nr_seq_conta = nr_seq_conta_w,
          	vl_operacao  = vl_final_w
     	where nr_sequencia = nr_seq_operacao_p;
    	end;
end if;

if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') and (coalesce(dt_atualizacao_estoque_w::text, '') = '') then
	CALL Gerar_movto_estoque_Terc(nr_seq_operacao_p, '1', nm_usuario_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_operacao_terceiro (nr_seq_operacao_p bigint, nm_usuario_p text) FROM PUBLIC;

