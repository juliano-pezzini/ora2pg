-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_dieta_prescr_js ( nr_prescricao_p prescr_dieta.nr_prescricao%type, ds_lista_dietas_p text, cd_perfil_p perfil.cd_perfil%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_separador_p text) AS $body$
DECLARE


ds_lista_w		varchar(32000);
ds_lista_aux_w		varchar(32000);
nr_pos_virgula_w	bigint;
nr_pos_hifem_w		bigint;
cd_dieta_w		bigint;
qt_dieta_w		prescr_dieta.qt_parametro%type;
cd_intervalo_w		varchar(7);
nr_ctrl_loop_w		smallint := 0;
ds_observacao_w		varchar(255);
ie_interv_valido_w	varchar(1);
ie_separador_w		varchar(1);
hr_primeiro_horario_w	varchar(5);
ds_erro_w				varchar(4000);


BEGIN

if (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (ds_lista_dietas_p IS NOT NULL AND ds_lista_dietas_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	begin
		
	begin

	CALL wheb_usuario_pck.set_ie_commit('N');	
		
		
	if (ie_separador_p IS NOT NULL AND ie_separador_p::text <> '') then
		ie_separador_w	:= ie_separador_p;
	end if;
	
	ds_lista_w	:= ds_lista_dietas_p;
			
	while(ds_lista_w IS NOT NULL AND ds_lista_w::text <> '') and (nr_ctrl_loop_w < 100) loop
		begin
		nr_ctrl_loop_w 		:= nr_ctrl_loop_w + 1;		
		nr_pos_virgula_w	:= position('$' in ds_lista_w);
		
		cd_dieta_w		:= 0;
		qt_dieta_w		:= 0;
		cd_intervalo_w		:= '0';
		
		if (coalesce(nr_pos_virgula_w,0) > 0) then
			begin
			ds_lista_aux_w	:= substr(ds_lista_w,0,nr_pos_virgula_w-1);
			ds_lista_w	:= substr(ds_lista_w,nr_pos_virgula_w+1,length(ds_lista_w));
			end;
		else
			begin
			ds_lista_aux_w	:= ds_lista_w;
			ds_lista_w	:= null;
			end;
		end if;
		
		if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
			begin
			nr_pos_hifem_w	:= position(ie_separador_w in ds_lista_aux_w);
		
			if (coalesce(nr_pos_hifem_w,0) > 0) then
				begin
				cd_dieta_w	:= substr(ds_lista_aux_w,0,nr_pos_hifem_w-1);
				ds_lista_aux_w		:= substr(ds_lista_aux_w,nr_pos_hifem_w+1,length(ds_lista_aux_w));

				if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
					begin
					nr_pos_hifem_w	:= position(ie_separador_w in ds_lista_aux_w);

					if (coalesce(nr_pos_hifem_w,0) > 0) then
						begin
						qt_dieta_w		:= substr(ds_lista_aux_w,0,nr_pos_hifem_w-1);
						ds_lista_aux_w		:= substr(ds_lista_aux_w,nr_pos_hifem_w+1,length(ds_lista_aux_w));

						if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
							begin
							nr_pos_hifem_w	:= position(ie_separador_w in ds_lista_aux_w);

							if (coalesce(nr_pos_hifem_w,0) > 0) then
								begin
								cd_intervalo_w		:= substr(ds_lista_aux_w,0,nr_pos_hifem_w-1);
								ds_lista_aux_w		:= substr(ds_lista_aux_w,nr_pos_hifem_w+1,length(ds_lista_aux_w));
								
								if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
									begin	
									nr_pos_hifem_w	:= position(ie_separador_w in ds_lista_aux_w);
									if (coalesce(nr_pos_hifem_w,0) > 0) then
										begin		
										--Informacao nao tratada										
										ds_lista_aux_w		:= substr(ds_lista_aux_w,nr_pos_hifem_w+1,length(ds_lista_aux_w));
										
										if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
											begin	
											nr_pos_hifem_w	:= position(ie_separador_w in ds_lista_aux_w);
											if (coalesce(nr_pos_hifem_w,0) > 0) then
												begin		
												--Informacao nao tratada												
												ds_lista_aux_w		:= substr(ds_lista_aux_w,nr_pos_hifem_w+1,length(ds_lista_aux_w));												
												
												if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
													begin	
													nr_pos_hifem_w	:= position(ie_separador_w in ds_lista_aux_w);
													if (coalesce(nr_pos_hifem_w,0) > 0) then
														begin	
														--Informacao nao tratada
														ds_lista_aux_w		:= substr(ds_lista_aux_w,nr_pos_hifem_w+1,length(ds_lista_aux_w));
														
														if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
															begin	
															nr_pos_hifem_w	:= position(ie_separador_w in ds_lista_aux_w);
															if (coalesce(nr_pos_hifem_w,0) > 0) then
																begin		
																--Informacao nao tratada
																ds_lista_aux_w		:= substr(ds_lista_aux_w,nr_pos_hifem_w+1,length(ds_lista_aux_w));																
																if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
																	begin	
																	nr_pos_hifem_w	:= position(ie_separador_w in ds_lista_aux_w);																	
																	------------
																	if (coalesce(nr_pos_hifem_w,0) > 0) then
																		begin		
																		--Informacao nao tratada
																		ds_lista_aux_w		:= substr(ds_lista_aux_w,nr_pos_hifem_w+1,length(ds_lista_aux_w));																
																		if (ds_lista_aux_w IS NOT NULL AND ds_lista_aux_w::text <> '') then
																			ds_observacao_w		:= substr(ds_lista_aux_w,1,255); --ultimo nivel de informacao para ser tratado nao precisa mais ser verificado a posicao que esta na variavel nr_pos_hifem_w
																		end if;
																		end;
																	end if;
																	end;
																end if;
																end;
															end if;
															end;
														end if;														
														end;
													end if;
													end;
												end if;												
												end;
											end if;
											end;
										end if;
										end;
									end if;
									end;
								end if;								
								end;								
							end if;
							end;
						end if;
						end;
					end if;
					end;
				end if;
				end;
			else
				begin
				ds_lista_aux_w	:= null;
				end;
			end if;
			end;
		end if;
		
		if (cd_dieta_w IS NOT NULL AND cd_dieta_w::text <> '') then
			begin
			
			if (qt_dieta_w = 0) then
				begin
				qt_dieta_w := null;
				end;
			end if;
			
			select	coalesce(max('S'),'N')
			into STRICT	ie_interv_valido_w
			from	intervalo_prescricao
			where	cd_intervalo = cd_intervalo_w
			and	ie_situacao = 'A';
			
			if (cd_intervalo_w = '0') or (ie_interv_valido_w = 'N') then
				begin
				cd_intervalo_w := null;
				end;
			end if;
			
			select 	obter_primeiro_horario(cd_intervalo_w,nr_prescricao_p,null,null)
			into STRICT	hr_primeiro_horario_w
			;
			
			CALL gerar_dieta_prescr(
				nr_prescricao_p,
				cd_dieta_w,
				cd_intervalo_w,
				qt_dieta_w,
				nm_usuario_p,
				cd_perfil_p,
				cd_estabelecimento_p,
				ds_observacao_w,
				null,
				hr_primeiro_horario_w);
				
				ds_observacao_w	:= '';
			end;
		end if;
		end;
	end loop;
	end;
	
		CALL wheb_usuario_pck.set_ie_commit('S');	
	exception when others then
		rollback;
		CALL wheb_usuario_pck.set_ie_commit('S');			
		ds_erro_w := substr(sqlerrm, 1, 2000);
		CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
	end;
	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_dieta_prescr_js ( nr_prescricao_p prescr_dieta.nr_prescricao%type, ds_lista_dietas_p text, cd_perfil_p perfil.cd_perfil%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_separador_p text) FROM PUBLIC;

