-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE autorizacao_laudo_mmed (nr_sequencia_p bigint, ie_tipo_p bigint, nm_usuario_aprovacao_p text, nm_usuario_p text, ds_laudo_p text DEFAULT NULL, ie_liberado_digitador_p text DEFAULT NULL, cd_estabelecimento_p bigint DEFAULT NULL, ie_html_p text DEFAULT 'N') AS $body$
DECLARE

ie_exige_seg_aprov_w        varchar(1);
nr_prescricao_w             bigint;
nr_sequencia_prescricao_w   bigint;
ie_tipo_atendimento_w       bigint;
nr_status_w                 bigint;
alterar_medico_conta_w      varchar(2) := 'N';
alterar_medico_exec_conta_w varchar(2) := 'N';
aprovar_laudo_1_etapa_w	    varchar(1) := 'N';
remove_lista_medica_w	    varchar(1) := 'N';
ie_liberar_primeira_ass_w varchar(1) := 'N';
dt_inicio_digitacao_w       timestamp;
nm_usuario_digitacao_w      varchar(255);

cd_procedimento_w           bigint;
cd_tipo_procedimento_w      smallint;
ie_origem_proced_w          bigint;
nr_seq_proc_interno_w       bigint;
cd_setor_atendimento_w      integer;
ie_existe_regra_conferencia smallint;
nr_atendimento_w           laudo_paciente.nr_atendimento%type;
cd_pessoa_fisica_w          laudo_paciente.cd_pessoa_fisica%type;
cd_resp_seg_aprov_w         laudo_paciente.cd_resp_seg_aprov%type;
ie_exist_pend_w             integer;
ie_have_sec_aprov_w         integer;

nr_seq_grupo_exame_nao_lab_w  PROC_INTERNO.NR_SEQUENCIA%TYPE;
nr_seq_classif_w              PROC_INTERNO_CLASSIF.NR_SEQUENCIA%TYPE;

  /* 
  1 - Primeira aprovacao 
  2 - Segunda aprovacao 
  3 - Desfazer 1 aprovacao 
  4 - Desfazer 2 aprovacao 
  */
BEGIN 

    select count(nr_sequencia)
    into STRICT ie_have_sec_aprov_w
    from laudo_paciente
    where (cd_resp_seg_aprov IS NOT NULL AND cd_resp_seg_aprov::text <> '')
    and nr_sequencia = nr_sequencia_p;

    if (ie_have_sec_aprov_w > 0) then

      select max(nr_atendimento),
             max(cd_pessoa_fisica),
             max(cd_resp_seg_aprov)
      into STRICT nr_atendimento_w,
           cd_pessoa_fisica_w,
           cd_resp_seg_aprov_w
      from laudo_paciente
      where nr_sequencia = nr_sequencia_p;

      select count(nr_sequencia)
      into STRICT ie_exist_pend_w
      from wl_worklist
      where coalesce(dt_final_real::text, '') = ''
      and cd_profissional = cd_resp_seg_aprov_w
      and nr_seq_laudo = nr_sequencia_p;

    end if;

  IF ( coalesce(ie_html_p, 'N') = 'N') THEN
    alterar_medico_conta_w := obter_param_usuario(-6930, 10, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, alterar_medico_conta_w);

    alterar_medico_exec_conta_w := obter_param_usuario(-6930, 11, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, alterar_medico_exec_conta_w);

    ie_liberar_primeira_ass_w := obter_param_usuario(-6930, 41, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_liberar_primeira_ass_w);

		
  ELSIF ( coalesce(ie_html_p, 'N') = 'S' ) THEN 
   
	 alterar_medico_conta_w := obter_param_usuario(99010, 55, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, alterar_medico_conta_w);

	 alterar_medico_exec_conta_w := obter_param_usuario(99010, 56, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, alterar_medico_exec_conta_w);
	 
	 aprovar_laudo_1_etapa_w := obter_param_usuario(99010, 89, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, aprovar_laudo_1_etapa_w);
	 
                 ie_liberar_primeira_ass_w := obter_param_usuario(99010, 110, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_liberar_primeira_ass_w);
  END IF;

  remove_lista_medica_w := obter_param_usuario(99010, 94, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, remove_lista_medica_w);
  
  IF ( ie_tipo_p = 1 ) THEN 
    SELECT lp.ie_exige_seg_aprov ,
			lp.nr_prescricao,
			lp.nr_seq_prescricao,
			ap.ie_tipo_atendimento
    INTO STRICT	ie_exige_seg_aprov_w,
			nr_prescricao_w,
			nr_sequencia_prescricao_w,
			ie_tipo_atendimento_w
    FROM   laudo_paciente lp
	inner join atendimento_paciente ap
	on lp.nr_atendimento = ap.nr_atendimento
    WHERE  nr_sequencia = nr_sequencia_p;

  IF (  ( ie_exige_seg_aprov_w = 'S' )
    AND ((aprovar_laudo_1_etapa_w  = 'N')  OR (aprovar_laudo_1_etapa_w  = 'S' AND ie_tipo_atendimento_w <> 1 AND ie_tipo_atendimento_w <> 3))
    and ( ie_liberar_primeira_ass_w = 'N' ) ) THEN

      UPDATE laudo_paciente 
      SET    dt_aprovacao = clock_timestamp(), 
             nm_usuario_aprovacao = nm_usuario_aprovacao_p, 
             nm_usuario = nm_usuario_p, 
             ie_liberado_digitador = ie_liberado_digitador_p 
      WHERE  nr_sequencia = nr_sequencia_p;

      IF ( alterar_medico_conta_w = 'A' ) THEN 
        CALL atualizar_propaci_medico_laudo(nr_sequencia_p, 'EX', nm_usuario_p);
      END IF;
    ELSE 
      UPDATE laudo_paciente 
      SET    dt_aprovacao = clock_timestamp(), 
             dt_liberacao = clock_timestamp(), 
             nm_usuario_liberacao = nm_usuario_aprovacao_p, 
             nm_usuario_aprovacao = nm_usuario_aprovacao_p, 
             nm_usuario = nm_usuario_p, 
             ie_liberado_digitador = ie_liberado_digitador_p 
      WHERE  nr_sequencia = nr_sequencia_p;

      SELECT coalesce(MAX(c.nr_sequencia), 0) nr_seq_grupo_exame_nao_lab,
             coalesce(MAX(d.nr_sequencia), 0) nr_seq_classif
        INTO STRICT nr_seq_grupo_exame_nao_lab_w,
             nr_seq_classif_w
        FROM laudo_paciente        a,
             procedimento_paciente b,
             proc_interno          c,
             proc_interno_classif  d
       WHERE b.nr_sequencia = a.nr_seq_proc
         AND b.nr_seq_proc_interno = c.nr_sequencia
         AND c.nr_seq_classif = d.nr_sequencia
         AND a.nr_sequencia = nr_sequencia_p;

      CALL atualizar_ev_linha_cuidado('EN',
                                 'LAUDO_PACIENTE',
                                 nr_sequencia_p,
                                 'nr_seq_grupo_exame_nao_lab_w=' || nr_seq_grupo_exame_nao_lab_w || ';nr_seq_classif_w=' ||
                                 nr_seq_classif_w || ';',
                                 coalesce(cd_pessoa_fisica_w, 0),
                                 nm_usuario_p,
                                 'N');

	  CALL update_situacao_procedimento(nr_prescricao_w, nr_sequencia_prescricao_w, -1, nm_usuario_p);

	  IF ( remove_lista_medica_w = 'S' ) THEN
        CALL delete_exame_lista_medico(nr_prescricao_w, nr_sequencia_prescricao_w);
      END IF;
	
      IF ( alterar_medico_conta_w = 'A' OR alterar_medico_conta_w = 'S' ) THEN 
        CALL atualizar_propaci_medico_laudo(nr_sequencia_p, 'EX', nm_usuario_p);
      END IF;
    END IF;

    IF ( alterar_medico_exec_conta_w <> 'N' ) THEN 
      CALL atualizar_propaci_medico_laudo(nr_sequencia_p, 'EXC', nm_usuario_p);
    END IF;

  ELSIF ( ie_tipo_p = 2 ) THEN 
    UPDATE laudo_paciente 
    SET    dt_seg_aprovacao = clock_timestamp(), 
           dt_liberacao = clock_timestamp(), 
           nm_usuario_seg_aprov = nm_usuario_aprovacao_p, 
           nm_usuario_liberacao = nm_usuario_aprovacao_p, 
           nm_usuario = nm_usuario_p, 
           ie_liberado_digitador = ie_liberado_digitador_p 
    WHERE  nr_sequencia = nr_sequencia_p;
	
    CALL update_situacao_procedimento(nr_prescricao_w, nr_sequencia_prescricao_w, -1, nm_usuario_p);

    if (ie_exist_pend_w > 0) then
        CALL wl_gerar_finalizar_tarefa('MR', 'F', nr_atendimento_w, cd_pessoa_fisica_w, nm_usuario_p, null, 'N', null, null, null, null, null, null, null, null, null, null,
                                 null, null, null, null, null, null, null, clock_timestamp(), null, null, cd_resp_seg_aprov_w, null, null, null, null, nr_sequencia_p);
    end if;

    IF ( remove_lista_medica_w = 'S' ) THEN 
       CALL delete_exame_lista_medico(nr_prescricao_w, nr_sequencia_prescricao_w);
    END IF;
	
    IF ( alterar_medico_conta_w = 'S' OR alterar_medico_conta_w = '2S' ) THEN 
      CALL atualizar_propaci_medico_laudo(nr_sequencia_p, 'EX', nm_usuario_p);
    END IF;

    IF ( alterar_medico_exec_conta_w <> 'N' ) THEN 
      CALL atualizar_propaci_medico_laudo(nr_sequencia_p, 'EXC', nm_usuario_p);
    END IF;

  ELSIF ( ie_tipo_p = 3 ) THEN
    UPDATE laudo_paciente 
    SET    dt_aprovacao  = NULL, 
           nm_usuario_aprovacao  = NULL, 
           dt_liberacao  = NULL, 
           nm_usuario_liberacao  = NULL, 
           ie_liberado_digitador  = NULL 
    WHERE  nr_sequencia = nr_sequencia_p;

    if (ie_exist_pend_w > 0) then
        CALL wl_gerar_finalizar_tarefa('MR', 'F', nr_atendimento_w, cd_pessoa_fisica_w, nm_usuario_p, null, 'N', null, null, null, null, null, null, null, null, null, null,
                                 null, null, null, null, null, null, null, clock_timestamp(), null, null, cd_resp_seg_aprov_w, null, null, null, null, nr_sequencia_p);
    end if;

  ELSIF ( ie_tipo_p = 4 ) THEN 
    UPDATE laudo_paciente 
    SET    dt_seg_aprovacao  = NULL, 
           nm_usuario_seg_aprov  = NULL, 
           dt_liberacao  = NULL, 
           nm_usuario_liberacao  = NULL, 
           ie_liberado_digitador  = NULL 
    WHERE  nr_sequencia = nr_sequencia_p;

  END IF;
  
  SELECT dt_inicio_digitacao,
         nm_usuario_digitacao
  INTO STRICT   dt_inicio_digitacao_w,
         nm_usuario_digitacao_w
  FROM   laudo_paciente 
  WHERE  nr_sequencia = nr_sequencia_p;
  
  IF (coalesce(nm_usuario_digitacao_w::text, '') = '') THEN
    UPDATE laudo_paciente 
    SET    dt_inicio_digitacao = clock_timestamp(), 
           nm_usuario_digitacao = obter_usuario_ativo
    WHERE  nr_sequencia = nr_sequencia_p;
  END IF;

  COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE autorizacao_laudo_mmed (nr_sequencia_p bigint, ie_tipo_p bigint, nm_usuario_aprovacao_p text, nm_usuario_p text, ds_laudo_p text DEFAULT NULL, ie_liberado_digitador_p text DEFAULT NULL, cd_estabelecimento_p bigint DEFAULT NULL, ie_html_p text DEFAULT 'N') FROM PUBLIC;

