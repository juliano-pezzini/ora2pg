-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_alterar_dados_protocolo ( nr_seq_protocolo_p bigint, dt_referencia_p timestamp, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_alterar_prot_ref_p text) AS $body$
DECLARE

 
dt_competencia_w			timestamp;
dt_fim_mes_w			timestamp := fim_mes(dt_referencia_p);
ie_permite_gerar_protocolo_w		varchar(1);
ds_erro_w			varchar(255);
ds_tipo_lote_contabil_w		varchar(255);
ds_historico_w			varchar(4000);
nr_seq_protocolo_w		pls_conta.nr_seq_protocolo%type;
tb_nr_sequencia_w			pls_util_cta_pck.t_number_table;
dif_dias_w			bigint;

C01 CURSOR FOR 
	SELECT nr_sequencia 
	from  pls_protocolo_conta 
	where nr_seq_prot_referencia = nr_seq_protocolo_p;
	
C02 CURSOR(nr_seq_protocolo_pc		pls_protocolo_conta.nr_sequencia%type)FOR 
	SELECT	nr_sequencia nr_seq_conta 
	from	pls_conta 
	where	nr_seq_protocolo = nr_seq_protocolo_pc;

BEGIN 
 
select 	to_date(clock_timestamp()) - dt_referencia_p 
into STRICT	dif_dias_w
;
 
if (dif_dias_w > 365) then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(715496); --OS 1230741 
end if;
 
if (ie_opcao_p = 'DR') then 
	select	max(a.dt_mes_competencia) 
	into STRICT	dt_competencia_w 
	from	pls_protocolo_conta	a 
	where	a.nr_sequencia	= nr_seq_protocolo_p;
	 
	ds_erro_w := pls_consiste_alt_dt_comp_prot(dt_competencia_w, dt_referencia_p, ds_erro_w, cd_estabelecimento_p, nm_usuario_p);
	 
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(319699,'ERRO='||ds_erro_w);
	end if;
	 
	select	max(ie_permite_gerar_protocolo) 
	into STRICT	ie_permite_gerar_protocolo_w 
	from	pls_parametro_contabil 
	where	cd_estabelecimento	= cd_estabelecimento_p;
	 
	if (coalesce(ie_permite_gerar_protocolo_w,'S') = 'N') then 
		/*Verifica se existe lote gerado sem estar fragmentado*/
 
		select	max(b.ds_tipo_lote_contabil) 
		into STRICT	ds_tipo_lote_contabil_w 
		from	lote_contabil		a, 
			tipo_lote_contabil	b 
		where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil 
		and	trunc(a.dt_referencia,'month') = trunc(dt_referencia_p,'month') 
		and	b.cd_tipo_lote_contabil = 41 /*OPS - Desp Pagamento de produção médica*/
 
		and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '') 
		and	not exists (	SELECT	1 
						from	lote_contabil_parametro		c, 
							lote_contabil_param_item	i 
						where	c.nr_seq_parametro	= i.nr_seq_parametro 
						and	c.nr_lote_contabil 	= i.nr_lote_contabil 
						and	c.nr_lote_contabil 	= a.nr_lote_contabil 
						
union all
 
						SELECT	1 
						from	lote_contabil_parametro		c 
						where	c.nr_lote_contabil 	= a.nr_lote_contabil 
						and	coalesce(vl_parametro,0) 	<> 0 
						and	c.nr_seq_parametro	= 1);
						 
		if (coalesce(ds_tipo_lote_contabil_w::text, '') = '') then 
			/*Verifica se o lote está gerado sem estar fragmentado por data*/
 
			select	max(b.ds_tipo_lote_contabil) 
			into STRICT	ds_tipo_lote_contabil_w 
			from	lote_contabil		a, 
				tipo_lote_contabil	b 
			where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil 
			and	b.cd_tipo_lote_contabil = 40 /*OPS - desp Provisão de produção médica*/
 
			and	a.dt_referencia = dt_fim_mes_w 
			and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');
			 
			if (coalesce(ds_tipo_lote_contabil_w::text, '') = '') then 
				select	max(b.ds_tipo_lote_contabil) 
				into STRICT	ds_tipo_lote_contabil_w 
				from	lote_contabil		a, 
					tipo_lote_contabil	b 
				where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil 
				and	b.cd_tipo_lote_contabil	in (22,42,43) /* OPS Despesas - Contas Médicas / OPS - Provisão de coparticipação / OPS - Provisão de Faturamento */
 
				and	trunc(a.dt_referencia,'month') = trunc(dt_referencia_p,'month') 
				and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');
			end if;
		end if;
		 
		if (ds_tipo_lote_contabil_w IS NOT NULL AND ds_tipo_lote_contabil_w::text <> '') then 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(280595, 'DS_TIPO_LOTE_CONTABIL_P=' || ds_tipo_lote_contabil_w);
		end if;
	end if;
	 
	update	pls_protocolo_conta 
	set	dt_mes_competencia	= trunc(dt_referencia_p,'month'), 
		nm_usuario		= nm_usuario_p, 
		dt_atualizacao		= clock_timestamp() 
	where	nr_sequencia		= nr_seq_protocolo_p;
	 
	update pls_conta_medica_resumo 
	set   dt_competencia     = trunc(dt_referencia_p,'month'), 
		dt_competencia_pgto   = trunc(dt_referencia_p,'month') 
	where  nr_seq_protocolo    = nr_seq_protocolo_p 
	and	ie_situacao		= 'A';
	 
	CALL pls_atual_comp_contab_val_adic( nr_seq_protocolo_p, trunc(dt_referencia_p,'month'), 'T');
	 
	ds_historico_w	:= 'Alterada a data de competência do protocolo de ' || to_char(dt_competencia_w,'dd/mm/yyyy') 
			|| ' para ' || to_char(dt_referencia_p,'dd/mm/yyyy') || ' por ' || obter_nome_usuario(nm_usuario_p);
 
	insert into pls_prot_conta_hist(nr_sequencia, 
		dt_atualizacao, 
		nm_usuario, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		nm_usuario_historico, 
		nr_seq_protocolo, 
		ds_historico, 
		dt_historico, 
		ie_tipo_historico) 
	values (nextval('pls_prot_conta_hist_seq'), 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		nm_usuario_p, 
		nr_seq_protocolo_p, 
		ds_historico_w, 
		clock_timestamp(), 
		'1');
 
	for r_C02_w in C02(nr_seq_protocolo_p) loop 
		update	pls_conta_pos_cabecalho 
		set	dt_mes_competencia 	= trunc(dt_referencia_p,'month'), 
			nm_usuario		= nm_usuario_p, 
			dt_atualizacao		= clock_timestamp() 
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		 
		update	pls_conta_pos_estabelecido 
		set	dt_mes_competencia 	= trunc(dt_referencia_p,'month'), 
			nm_usuario		= nm_usuario_p, 
			dt_atualizacao		= clock_timestamp() 
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		 
		update	pls_conta_coparticipacao 
		set	dt_mes_competencia 	= trunc(dt_referencia_p,'month'), 
			nm_usuario		= nm_usuario_p, 
			dt_atualizacao		= clock_timestamp() 
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		 
		update	pls_conta_copartic_contab 
		set	dt_mes_competencia 	= trunc(dt_referencia_p,'month'), 
			nm_usuario		= nm_usuario_p, 
			dt_atualizacao		= clock_timestamp() 
		where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
	end loop;
 
	commit;	
 
end if;
 
if (ie_alterar_prot_ref_p = 'S') then 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_protocolo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		if (ie_opcao_p = 'DR') then 
			select	max(a.dt_mes_competencia) 
			into STRICT	dt_competencia_w 
			from	pls_protocolo_conta	a 
			where	a.nr_sequencia	= nr_seq_protocolo_w;
			 
			ds_erro_w := pls_consiste_alt_dt_comp_prot(dt_competencia_w, dt_referencia_p, ds_erro_w, cd_estabelecimento_p, nm_usuario_p);
			 
			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(319699,'ERRO='||ds_erro_w);
			end if;
			 
			select	max(ie_permite_gerar_protocolo) 
			into STRICT	ie_permite_gerar_protocolo_w 
			from	pls_parametro_contabil 
			where	cd_estabelecimento	= cd_estabelecimento_p;
			 
			if (coalesce(ie_permite_gerar_protocolo_w,'S') = 'N') then 
				select	max(b.ds_tipo_lote_contabil) 
				into STRICT	ds_tipo_lote_contabil_w 
				from	lote_contabil		a, 
					tipo_lote_contabil	b 
				where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil 
				and	b.cd_tipo_lote_contabil	in (22,40,41,42,43) /* OPS Despesas - Contas Médicas / OPS Despesas-Provisão de produção médica / OPS Desp - Pagamento de produção médica / OPS - Provisão de coparticipação / OPS - Provisão de Faturamento */
 
				and	trunc(a.dt_referencia,'month') = trunc(dt_referencia_p,'month') 
				and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');
				 
				if (ds_tipo_lote_contabil_w IS NOT NULL AND ds_tipo_lote_contabil_w::text <> '') then 
					CALL wheb_mensagem_pck.exibir_mensagem_abort(280595, 'DS_TIPO_LOTE_CONTABIL_P=' || ds_tipo_lote_contabil_w);
				end if;
			end if;
			 
			update	pls_protocolo_conta 
			set	dt_mes_competencia	= trunc(dt_referencia_p,'month'), 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_sequencia		= nr_seq_protocolo_w;
			 
			update pls_conta_medica_resumo 
			set   dt_competencia     = trunc(dt_referencia_p,'month'), 
				dt_competencia_pgto   = trunc(dt_referencia_p,'month') 
			where  nr_seq_protocolo    = nr_seq_protocolo_w 
			and	ie_situacao		= 'A';
			 
			CALL pls_atual_comp_contab_val_adic( nr_seq_protocolo_w, trunc(dt_referencia_p,'month'), 'T');
			 
			ds_historico_w	:= 'Alterada a data de competência do protocolo de ' || to_char(dt_competencia_w,'dd/mm/yyyy') 
					|| ' para ' || to_char(dt_referencia_p,'dd/mm/yyyy') || ' por ' || obter_nome_usuario(nm_usuario_p);
		end if;	
		 
		insert into pls_prot_conta_hist(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nm_usuario_historico, 
			nr_seq_protocolo, 
			ds_historico, 
			dt_historico, 
			ie_tipo_historico) 
		values (nextval('pls_prot_conta_hist_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			nm_usuario_p, 
			nr_seq_protocolo_w, 
			ds_historico_w, 
			clock_timestamp(), 
			'1');
 
		commit;
		 
		for r_C02_w in C02(nr_seq_protocolo_w) loop 
			update	pls_conta_pos_cabecalho 
			set	dt_mes_competencia 	= trunc(dt_referencia_p,'month'), 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
 
			update	pls_conta_pos_estabelecido 
			set	dt_mes_competencia 	= trunc(dt_referencia_p,'month'), 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
			 
			update	pls_conta_coparticipacao 
			set	dt_mes_competencia 	= trunc(dt_referencia_p,'month'), 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
			 
			update	pls_conta_copartic_contab 
			set	dt_mes_competencia 	= trunc(dt_referencia_p,'month'), 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_seq_conta 		= r_C02_w.nr_seq_conta;
		end loop;
		 
		end;
	end loop;
	close C01;
	 
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_alterar_dados_protocolo ( nr_seq_protocolo_p bigint, dt_referencia_p timestamp, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_alterar_prot_ref_p text) FROM PUBLIC;

