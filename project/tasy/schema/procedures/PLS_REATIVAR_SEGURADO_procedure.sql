-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_reativar_segurado ( nr_seq_segurado_p bigint, dt_reativacao_p timestamp, ds_observacao_p text, ie_recalcular_preco_p text, nm_usuario_p text) AS $body$
DECLARE

				
dt_validade_w			timestamp;
nr_seq_titular_w		bigint;
dt_rescisao_titular_w		timestamp;
cd_estabelecimento_w		smallint;
nr_seq_contrato_w		bigint;
qt_registros_w			bigint;
ie_regulamentacao_w		pls_plano.ie_regulamentacao%type;
nr_seq_plano_w			pls_segurado.nr_seq_plano%type;
ie_recalcular_preco_w		varchar(1);
ie_reativar_plano_pre_w		varchar(1);
dt_suspensao_seg_w		timestamp;
dt_obito_w			pessoa_fisica.dt_obito%type;
ie_pessoa_contrato_w		pls_parametros.ie_pessoa_contrato%type;
qt_benef_ativo_w		integer;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
qt_dias_rescindidos_w		pls_segurado.qt_dias_reativacao%type;
dt_rescisao_w			pls_segurado.dt_rescisao%type;
ie_limpar_data_w		varchar(1);
qt_registro_sib_w		bigint;
nr_seq_seg_repasse_w		pls_segurado_repasse.nr_sequencia%type;
nr_seq_motivo_cancelamento_w	pls_motivo_cancelamento.nr_sequencia%type;
ie_impedir_reativacao_w		pls_motivo_cancelamento.ie_impedir_reativacao%type;
ie_reativar_seg_comp_w		varchar(1);

C01 CURSOR FOR
	SELECT 	a.nr_sequencia
	from	pls_segurado_repasse 	a
	where	a.nr_seq_segurado 	= nr_seq_segurado_p
	and	(a.dt_fim_repasse IS NOT NULL AND a.dt_fim_repasse::text <> '')
	and	trunc(a.dt_fim_repasse,'dd') = trunc(to_date(dt_rescisao_w),'dd');


BEGIN

begin
select	coalesce(b.cd_estabelecimento,c.cd_estabelecimento),
	c.nr_sequencia,
	b.nr_seq_plano,
	b.nr_seq_titular,
	a.dt_obito,
	a.cd_pessoa_fisica,
	b.dt_rescisao,
	b.nr_seq_motivo_cancelamento
into STRICT	cd_estabelecimento_w,
	nr_seq_contrato_w,
	nr_seq_plano_w,
	nr_seq_titular_w,
	dt_obito_w,
	cd_pessoa_fisica_w,
	dt_rescisao_w,
	nr_seq_motivo_cancelamento_w
from	pessoa_fisica	a,
	pls_segurado	b,
	pls_contrato	c
where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
and	b.nr_seq_contrato	= c.nr_sequencia
and	b.nr_sequencia		= nr_seq_segurado_p;
exception
when others then
	null;
end;

if (nr_seq_motivo_cancelamento_w IS NOT NULL AND nr_seq_motivo_cancelamento_w::text <> '') then
	select 	coalesce(ie_impedir_reativacao, 'N')
	into STRICT 	ie_impedir_reativacao_w
	from 	pls_motivo_cancelamento
	where 	nr_sequencia = nr_seq_motivo_cancelamento_w;

	if (ie_impedir_reativacao_w = 'S') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1083849);
		--Nao e possivel reativar o beneficiario. O motivo de cancelamento impede a reativacao.
	end if;
end if;

if (dt_obito_w IS NOT NULL AND dt_obito_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(325344,'DS_SEGURADO='||nr_seq_segurado_p||' - '||substr(pls_obter_dados_segurado(nr_seq_segurado_p,'N'),1,255));
end if;

ie_recalcular_preco_w	:= coalesce(obter_valor_param_usuario(1202, 95, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');
ie_reativar_plano_pre_w	:= coalesce(obter_valor_param_usuario(1202,138,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w),'S');
ie_reativar_seg_comp_w	:= coalesce(obter_valor_param_usuario(1202,175,obter_perfil_ativo,nm_usuario_p,0),'N');

-- Parametro [175]: impedir reativacao de segurado para competencia anterior a atual
if (ie_reativar_seg_comp_w = 'S') then
	if (dt_reativacao_p < trunc(clock_timestamp(),'mm')) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1172132); --A data de reativacao deve estar na competencia atual. Verifique o parametro [175].
	end if;
end if;

select	max(ie_regulamentacao)
into STRICT	ie_regulamentacao_w
from	pls_plano
where	nr_sequencia = nr_seq_plano_w;

if (ie_regulamentacao_w IS NOT NULL AND ie_regulamentacao_w::text <> '')then
	if	(ie_reativar_plano_pre_w = 'N' AND ie_regulamentacao_w = 'R')then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(319877,'');
	end if;
end if;

if (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
	select	max(ie_pessoa_contrato)
	into STRICT	ie_pessoa_contrato_w
	from	pls_parametros
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	if (coalesce(ie_pessoa_contrato_w,'N') = 'S') then
		select	count(1)
		into STRICT	qt_benef_ativo_w
		
		where	exists	(SELECT	1
				from	pls_segurado
				where	cd_pessoa_fisica = cd_pessoa_fisica_w
				and	cd_estabelecimento = cd_estabelecimento_w
				and	((coalesce(dt_rescisao::text, '') = '') or ((dt_rescisao IS NOT NULL AND dt_rescisao::text <> '') and dt_rescisao > dt_reativacao_p))
				and	ie_tipo_segurado in ('B','R')
				and	(nr_seq_contrato IS NOT NULL AND nr_seq_contrato::text <> '')
				and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
				and	nr_sequencia <> nr_seq_segurado_p);
		
		if (qt_benef_ativo_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(326883,'');
		end if;
	end if;
end if;
dt_suspensao_seg_w 	:= pls_obter_dt_suspensao_seg(nr_seq_segurado_p);

select	obter_dias_entre_datas(dt_rescisao_w, dt_reativacao_p)
into STRICT	qt_dias_rescindidos_w
;

ie_limpar_data_w	:= 'N';

if (qt_dias_rescindidos_w = 0) then --Se reativou no mesmo dia da rescisao e a exclusao ainda nao foi enviada para a ANS, as datas sao limpadas e nao e enviado para a ANS
	select	count(1)
	into STRICT	qt_registro_sib_w
	from	pls_segurado_status a
	where	a.nr_seq_segurado = nr_seq_segurado_p
	and	trunc(a.dt_final,'dd') = trunc(dt_rescisao_w,'dd')
	and	exists (SELECT	1
			from	pls_sib_movimento x
			where	x.nr_seq_status_exclusao = a.nr_sequencia);

	if (qt_registro_sib_w = 0) then
		ie_limpar_data_w	:= 'S';
	end if;
end if;

update	pls_segurado
set	dt_rescisao			 = NULL,
	dt_limite_utilizacao		 = NULL,
	nm_usuario			= nm_usuario_p,
	dt_atualizacao			= clock_timestamp(),
	dt_reativacao			= CASE WHEN ie_limpar_data_w='S' THEN null  ELSE dt_reativacao_p END ,
	nr_seq_motivo_cancelamento	 = NULL,
	dt_cancelamento			 = NULL,
	ie_tipo_rescisao		= '',
	ie_situacao_atend		= CASE WHEN dt_suspensao_seg_w = NULL THEN CASE WHEN dt_liberacao = NULL THEN 'I'  ELSE 'A' END   ELSE 'S' END ,
	nr_seq_causa_rescisao		 = NULL,
	qt_dias_reativacao		= qt_dias_rescindidos_w,
	ie_rescisao_migracao		 = NULL
where	nr_sequencia			= nr_seq_segurado_p;

open c01;
	loop
	fetch c01 into
		nr_seq_seg_repasse_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		update	pls_segurado_repasse
		set	dt_fim_repasse	 = NULL,
			dt_fim_real	 = NULL,
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia	= nr_seq_seg_repasse_w;
		
		CALL pls_gerar_segurado_historico(
			nr_seq_segurado_p, '2', clock_timestamp(),
			wheb_mensagem_pck.get_texto(1112294, 'NR_SEQ_REPASSE='|| nr_seq_seg_repasse_w ||';DT_REATIVACAO='|| to_char(dt_reativacao_p, 'dd/mm/yyyy')), ds_observacao_p, null,
			dt_reativacao_p, null, null, 
			dt_reativacao_p, null, null, 
			null, null, null, 
			null, nm_usuario_p, 'S');
		
		end;
	end loop;
	close c01;

select	max(dt_validade_carteira)
into STRICT	dt_validade_w
from	pls_segurado_carteira
where	nr_seq_segurado	= nr_seq_segurado_p;

/*A rotrina de renovacao do cartao ira gerar uma nova validade caso o cartao esteja vencido ou falta 30 dias para vencer*/

if (dt_validade_w IS NOT NULL AND dt_validade_w::text <> '') and
	((dt_validade_w+30) < clock_timestamp()) then
	CALL pls_gerar_renovacao_carteira(nr_seq_contrato_w,nr_seq_segurado_p,'R',nm_usuario_p);
end if;

if (ie_recalcular_preco_w = 'S') and (ie_recalcular_preco_p = 'S') then
	CALL pls_preco_beneficiario_pck.gravar_preco_benef(nr_seq_segurado_p, 'B', 'S', dt_reativacao_p, 'N', null, nm_usuario_p, cd_estabelecimento_w);
end if;

/* Gerar historico */

CALL pls_gerar_segurado_historico(
	nr_seq_segurado_p, '2', clock_timestamp(),
	wheb_mensagem_pck.get_texto(1112292, 'DT_REATIVACAO='|| to_char(dt_reativacao_p, 'dd/mm/yyyy')), ds_observacao_p, null, 	
	dt_reativacao_p, null, null,
	dt_reativacao_p, null, null, 
	null, null, null, 
	null, nm_usuario_p, 'S');

if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
	select	count(1)
	into STRICT	qt_registros_w
	from	pls_contrato
	where	nr_sequencia	= nr_seq_contrato_w
	and	(dt_rescisao_contrato IS NOT NULL AND dt_rescisao_contrato::text <> '');
	
	if (qt_registros_w > 0) then
		update	pls_contrato
		set	dt_rescisao_contrato	 = NULL,
			dt_limite_utilizacao	 = NULL,
			ie_situacao		= '2',
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			dt_reativacao		= CASE WHEN ie_limpar_data_w='S' THEN null  ELSE dt_reativacao_p END ,
			dt_cancelamento		 = NULL,
			nr_seq_motivo_rescisao	 = NULL,
			nr_seq_causa_rescisao	 = NULL
		where	nr_sequencia		= nr_seq_contrato_w;
		
		insert into pls_contrato_historico(
					nr_sequencia,	
					cd_estabelecimento,
					nr_seq_contrato,
					dt_historico,
					ie_tipo_historico,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ds_historico)
				values (	nextval('pls_contrato_historico_seq'),
					cd_estabelecimento_w,
					nr_seq_contrato_w,
					dt_reativacao_p,
					'2',
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					wheb_mensagem_pck.get_texto(1112293));
	end if;
end if;

CALL pls_att_classif_dependencia(coalesce(nr_seq_titular_w,nr_seq_segurado_p),nm_usuario_p,'N');
mprev_tratar_reativacao_seg(nr_seq_segurado_p, nm_usuario_p, 'N');

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_reativar_segurado ( nr_seq_segurado_p bigint, dt_reativacao_p timestamp, ds_observacao_p text, ie_recalcular_preco_p text, nm_usuario_p text) FROM PUBLIC;

