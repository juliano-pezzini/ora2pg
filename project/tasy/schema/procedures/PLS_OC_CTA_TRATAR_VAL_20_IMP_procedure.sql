-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_20_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_registro_valido_w			varchar(1);
nr_index_sel_w				integer;
tb_seq_selecao_w			pls_util_cta_pck.t_number_table;
tb_valido_w				pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w				pls_util_cta_pck.t_varchar2_table_4000;

--Cursor das validações cadastradas para regra combinada
C01 CURSOR(	nr_seq_oc_cta_comb_p	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.ie_validar_cbo_invalido,
		a.ie_valida_cbo_solic,
		a.ie_valida_cbo_desc
	from	pls_oc_cta_val_cbo a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

--Cursor das contas selecionadas que irão gerar ocorrência
C02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	conta.nr_sequencia,
		conta.cd_cbo_saude_prof_exec,
		conta.nr_seq_cbo_prof_exec_conv,
		conta.cd_cbo_saude_prof_solic,
		conta.nr_seq_cbo_prof_solic_conv,
		prot.cd_versao_tiss,
		(	SELECT	count(1)
			from	cbo_saude cbo
			where	nr_sequencia		= conta.nr_seq_cbo_prof_exec_conv
			and	cbo.ie_situacao <> 'A')	qt_cbo_prof_exec,
		(	select	count(1)
			from	cbo_saude cbo
			where	nr_sequencia		= conta.nr_seq_cbo_prof_solic_conv
			and	cbo.ie_situacao <> 'A')	qt_cbo_prof_solic,
		(	select	max(cbo.ie_versao)
			from	cbo_saude_tiss	cbo
			where	cbo.nr_sequencia	= conta.nr_seq_cbo_prof_exec_conv) ie_versao_cbo_tiss,
		pls_obter_dados_cbo_saude(conta.nr_seq_cbo_prof_exec_conv, 'C') cd_cbo
	from	pls_conta_imp		conta,
		pls_protocolo_conta_imp	prot
	where	exists (	select 1
				from	pls_oc_cta_selecao_imp sel
				where	sel.nr_id_transacao 	= nr_id_transacao_pc
				and  	sel.ie_valido 		= 'S'
				and  	sel.nr_seq_conta 	= conta.nr_sequencia)
	and	prot.nr_sequencia	= conta.nr_seq_protocolo;
BEGIN

-- Deve existir a informação da regra e transação para aplicar a validação
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') and (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '')  then

	for r_C01_w in C01(nr_seq_combinada_p) loop
		--Apenas inicia o processo de verificação se uma das duas opções estiver marcado
		if (r_C01_w.ie_validar_cbo_invalido = 'S' or r_C01_w.ie_valida_cbo_solic = 'S' or r_C01_w.ie_valida_cbo_desc = 'S')	then
			-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
			CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', 'N', nr_id_transacao_p, null);
			--limpa as variáveis
			SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
			nr_index_sel_w := 0;
			--Abre o cursor das contas
			for r_C02_w in C02(nr_id_transacao_p) loop

				ie_registro_valido_w := 'N';
				--Verificar se o CBO é inválido
				if (r_C01_w.ie_validar_cbo_invalido = 'S') then
					--cd_cbo_saude_prof_exec ou nr_seq_cbo_prof_exec_conv nulas
					if (coalesce(r_C02_w.cd_cbo_saude_prof_exec::text, '') = '' or coalesce(r_C02_w.nr_seq_cbo_prof_exec_conv::text, '') = '') then
						ie_registro_valido_w := 'S';
					end if;
					--Se tiver nr_seq_cbo_prof_exec_conv e o CBO não estiver ativo
					if ((r_C02_w.nr_seq_cbo_prof_exec_conv IS NOT NULL AND r_C02_w.nr_seq_cbo_prof_exec_conv::text <> '') and r_C02_w.qt_cbo_prof_exec > 0) then
						ie_registro_valido_w := 'S';
					end if;
				end if;
				--Verificar se o CBO do solicitante é inválido
				if (r_C01_w.ie_valida_cbo_solic = 'S') then
					--cd_cbo_saude_prof_solic ou nr_seq_cbo_prof_solic_conv nulas
					if (coalesce(r_C02_w.cd_cbo_saude_prof_solic::text, '') = '' or coalesce(r_C02_w.nr_seq_cbo_prof_solic_conv::text, '') = '') then
						ie_registro_valido_w := 'S';
					end if;
					--Se tiver nr_seq_cbo_prof_solic_conv e o CBO não estiver ativo
					if ((r_C02_w.nr_seq_cbo_prof_solic_conv IS NOT NULL AND r_C02_w.nr_seq_cbo_prof_solic_conv::text <> '') and r_C02_w.qt_cbo_prof_solic > 0) then
						ie_registro_valido_w := 'S';
					end if;
				end if;
				--Versão do TISS do protocolo e do CBO
				if (r_C02_w.cd_versao_tiss <> r_C02_w.ie_versao_cbo_tiss) then
					ie_registro_valido_w := 'S';
				end if;

				if (r_C01_w.ie_valida_cbo_desc = 'S') and (r_C02_w.cd_cbo = '999999')	then
					begin
					ie_registro_valido_w := 'S';
					end;
				end if;


				if (ie_registro_valido_w = 'S') then
					--Salva valores na variável para os registros que irão gerar ocorrência
					tb_seq_selecao_w(nr_index_sel_w) := r_C02_w.nr_sequencia;
					tb_observacao_w(nr_index_sel_w)  := null;
					tb_valido_w(nr_index_sel_w) 	 := 'S';

					if (nr_index_sel_w >= pls_cta_consistir_pck.qt_registro_transacao_w ) then

						--Grava o que restar nas variáveis na tabela
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ_CONTA');
						--limpa as variáveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;

						nr_index_sel_w		:= 0;
					else
						nr_index_sel_w := nr_index_sel_w + 1;
				end if;

			end if;
			end loop;--C02
			--Grava o que restar nas variáveis na tabela
			CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
									tb_observacao_w, nr_id_transacao_p,
									'SEQ_CONTA');

			-- seta os registros que serão válidos ou inválidos após o processamento
			CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N',
								ie_regra_excecao_p, null,
								nr_id_transacao_p, null);
		end if;
	end loop;--C01
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_20_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

