-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE validate_dataset_hcp (nr_seq_dataset_p bigint, ie_dataset_p text, nm_usuario_p text, nr_atendimento_p bigint) AS $body$
DECLARE


  qt_rec_segmento_w   bigint;
  qt_erro_w           bigint;
  qt_alerta_w         bigint;
  nr_seq_estrut_arq_w bigint;
  nr_count_hcp        bigint;
  nr_count_snap       bigint;

  c01 CURSOR FOR
    SELECT nr_sequencia, 
           ie_segment ,
           IE_MANDATORY
    FROM   HCP_SEGMENT_STRUCT 

    WHERE  ie_segment = CASE WHEN ie_dataset_p='PHDB' THEN  'PHD' WHEN ie_dataset_p='SNAP' THEN 'SNP'   ELSE 'HCP' END;

  c01_w               c01%ROWTYPE;


BEGIN
    OPEN c01;
    LOOP 
        FETCH c01 INTO c01_w;
        EXIT WHEN NOT FOUND; /* apply on c01 */
        IF ( c01_w.ie_segment = 'HCP' or c01_w.ie_segment = 'PHD' ) THEN 
			nr_count_hcp := 0;
			SELECT Count(*) 
			INTO STRICT   nr_count_hcp 
			FROM   hcp_segment_data 
			WHERE  nr_seq_dataset = nr_seq_dataset_p;
      if (nr_count_hcp=0)then
          CALL Generate_hcp_ds_inconsistency(nr_seq_dataset_p, 'E', 
          Obter_desc_exp_idioma(861837, 9, 'IE_SEGMENTO=' 
                                || c01_w.ie_segment), nm_usuario_p, 
								c01_w.ie_segment, nr_atendimento_p);
          end if;
          if (nr_count_hcp>0) then
           CALL Validate_segment_hcp(c01_w.nr_sequencia, nr_seq_dataset_p,
								c01_w.ie_segment, nm_usuario_p, nr_atendimento_p);

          end if;
        END IF;
      IF ( c01_w.ie_segment = 'SNP' ) THEN 
			nr_count_snap := 0;
			SELECT Count(*) 
			INTO STRICT   nr_count_snap 
			FROM   hcp_snap_seg_data 
			WHERE  nr_seq_dataset = nr_seq_dataset_p;
 

        if (nr_count_snap=0)then      
        
			CALL Generate_hcp_ds_inconsistency(nr_seq_dataset_p, 'E', 

										wheb_mensagem_pck.Get_texto(996261,'IE_SEGMENTO=' || c01_w.ie_segment), nm_usuario_p, 

										c01_w.ie_segment, nr_atendimento_p);
        end if;

		if (nr_count_snap>0) then
			CALL Validate_segment_hcp(c01_w.nr_sequencia, nr_seq_dataset_p,
								 c01_w.ie_segment,nm_usuario_p, nr_atendimento_p);

        end if;
        END IF;
    END LOOP;
	CLOSE c01;



    BEGIN 
        SELECT 1  
        INTO STRICT   qt_erro_w 
        FROM   hcp_inconsistency_ds 
        WHERE  nr_seq_dataset = nr_seq_dataset_p 
               AND ie_type = 'E'  LIMIT 1;

    EXCEPTION 
        WHEN OTHERS THEN 
          qt_erro_w := 0;
    END;

    BEGIN 
        SELECT 1 
        INTO STRICT   qt_alerta_w 
        FROM   hcp_inconsistency_ds 
        WHERE  nr_seq_dataset = nr_seq_dataset_p 
        AND ie_type = 'A'  LIMIT 1;

    EXCEPTION 
        WHEN OTHERS THEN 
          qt_alerta_w := 0;
    END;

    IF ( qt_erro_w > 0 ) THEN 
      UPDATE hcp_dataset_send 
      SET    ie_validation_status = 'E' 
      WHERE  nr_sequencia = nr_seq_dataset_p;

    ELSIF ( qt_alerta_w > 0 ) THEN 
      UPDATE hcp_dataset_send 
      SET    ie_validation_status = 'A' 
      WHERE  nr_sequencia = nr_seq_dataset_p;

    ELSE 

      UPDATE hcp_dataset_send 
      SET    ie_validation_status = 'V', 
             ie_sending_status = 'P' 
      WHERE  nr_sequencia = nr_seq_dataset_p;

    END IF;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE validate_dataset_hcp (nr_seq_dataset_p bigint, ie_dataset_p text, nm_usuario_p text, nr_atendimento_p bigint) FROM PUBLIC;

