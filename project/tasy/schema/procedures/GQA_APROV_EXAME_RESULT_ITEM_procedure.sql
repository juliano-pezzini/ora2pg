-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gqa_aprov_exame_result_item ( nr_seq_resultado_p bigint, nr_sequencia_p bigint, nm_usuario_p text, nr_regras_atendidas_p INOUT text, nr_atendimento_p bigint default null, nr_restrigir_regras_p text default null, qt_horas_retroativa_p bigint default 0) AS $body$
DECLARE


nr_seq_pend_regra_w         bigint;
vl_minimo_w                 double precision;
vl_maximo_w                 double precision;	
nr_seq_sinal_vital_w        bigint;
nr_atendimento_w            bigint;
nr_sequencia_w	            bigint;
vl_atributo_w	            double precision;
nr_seq_exame_w	            bigint;
qt_resultado_exame_w        double precision;
pr_resultado_exame_w        double precision;
qt_idade_w                  bigint;
cd_setor_atendimento_w      bigint := null;
nm_exame_w               	varchar(1000);
cd_pessoa_fisica_w          varchar(10);
ie_formato_result_exame_w   varchar(15);
qt_idade_dias_w             integer;
qt_peso_gramas_w            double precision;
ie_restricao_complementar_w varchar(80);
ie_protocolo_assistencial_w boolean;
nr_prescricao_w				bigint;
ds_unidade_medida_w			varchar(40);
nr_seq_lab_valor_w varchar(40);
ds_retorno_w varchar(40);
nr_sequencia_exame_w bigint;
nr_seq_resultado_w varchar(10);


    --- Exames aprovado
    SQLExameAprovado       varchar(1024) :=
        ' select  	max(a.nr_seq_exame), '                      ||
        '         	max(a.qt_resultado), '                      ||
        '         	max(a.pr_resultado), '                      ||
        '         	max(b.ie_formato_resultado), '              ||
		'			max(b.nm_exame), '							||
		'			max(c.nr_prescricao), '						||
		'			max(a.ds_unidade_medida) '					||
        ' from	exame_lab_result_item a, '                    	||
        '       exame_laboratorio     b, '                     	||
		'		exame_lab_resultado   c '						||
        ' where	b.nr_seq_exame      = a.nr_seq_exame '        	||
        ' and   a.nr_seq_resultado  = ' || nr_seq_resultado_p 	||
        ' and   a.nr_sequencia	    = ' ||nr_sequencia_p		||
		' and   c.nr_seq_resultado	= a.nr_seq_resultado';


    --- Exames do atendimento
    SQLExameAtendimento    varchar(1024) :=
        ' select b.nr_seq_exame, '                          ||
        '        b.qt_resultado, '                          ||
        '        b.pr_resultado, '                          ||
        '        d.ie_formato_resultado, '                  ||
		'		 d.nm_exame, '								||
		'		 a.nr_prescricao, '							||
		'		 b.ds_unidade_medida '						||
        ' from 	 exame_lab_result_item   b, '               ||
        '        exame_lab_resultado     a, '               ||
        '        prescr_procedimento     x, '               ||
        '        prescr_medica           c, '               ||
        '        exame_laboratorio       d '                ||
        ' where	 b.nr_seq_exame     = d.nr_seq_exame  '     ||
        ' and    a.nr_seq_resultado	= b.nr_seq_resultado '  ||
        ' and	 a.nr_prescricao    = c.nr_prescricao '     ||
        ' and	 x.nr_sequencia     = b.nr_seq_prescr '     ||
        ' and	 x.nr_prescricao    = c.nr_prescricao '     ||
        ' and	 c.nr_atendimento	= ' ||nr_atendimento_p  ||
        ' and	 x.ie_status_atend	>= 35 '                 ||
        ' and    (' || qt_horas_retroativa_p || ' = 0 or dt_aprovacao >= sysdate - ' || qt_horas_retroativa_p || ') '  ||
        ' and    b.nr_seq_exame in (select nr_seq_exame from gqa_pendencia_regra where nr_sequencia in ( ' || nr_restrigir_regras_p || ' ))  ' ||
        ' order  by nvl(b.dt_aprovacao,a.dt_resultado)';


C01 CURSOR FOR
	SELECT	a.nr_sequencia,
			coalesce(a.vl_minimo,0),
			coalesce(a.vl_maximo,999)
	from    gqa_pendencia_regra a,
            gqa_pendencia b
	where	b.nr_sequencia	    = a.nr_seq_pendencia
	and		b.ie_tipo_pendencia	= 2
	and		b.ie_situacao 		= 'A'
	and		a.ie_situacao		= 'A'
	and		obter_se_gqa_regra_liberada(a.nr_sequencia) = 'S'
	and		a.nr_seq_exame		= nr_seq_exame_w
	and		qt_idade_w       between coalesce(a.qt_idade_min,0) and coalesce(a.qt_idade_max,999)
	and     qt_idade_dias_w  between coalesce(a.qt_dias_min ,0) and coalesce(a.qt_dias_max ,99999)
	and	    qt_peso_gramas_w between coalesce(a.qt_peso_gramas_min,0) and coalesce(a.qt_peso_gramas_max,999999999)
	and		coalesce(a.cd_setor_atendimento,coalesce(cd_setor_atendimento_w,0))	= coalesce(cd_setor_atendimento_w,0)
    and (coalesce(nr_restrigir_regras_p::text, '') = '' or position(a.nr_sequencia in nr_restrigir_regras_p) > 0);

    CursorExames				REFCURSOR;

BEGIN

ie_protocolo_assistencial_w := (nr_restrigir_regras_p IS NOT NULL AND nr_restrigir_regras_p::text <> '');

if ie_protocolo_assistencial_w then

    nr_atendimento_w := nr_atendimento_p;
    cd_pessoa_fisica_w := obter_pessoa_atendimento(nr_atendimento_w,'C');

else
    select 	coalesce(max(nr_atendimento),0),
            max(obter_pessoa_atendimento(nr_atendimento,'C'))
    into STRICT	nr_atendimento_w,
            cd_pessoa_fisica_w
    from	exame_lab_resultado
    where	nr_seq_resultado = nr_seq_resultado_p;

end if;

if (coalesce(nr_atendimento_w::text, '') = '') or (nr_atendimento_w = 0) or (coalesce(cd_pessoa_fisica_w::text, '') = '') then

	select  coalesce(CASE WHEN nr_atendimento_w=0 THEN max(a.nr_atendimento)  ELSE nr_atendimento_w END ,0),
			coalesce(cd_pessoa_fisica_w,max(a.cd_pessoa_fisica))
	into STRICT    nr_atendimento_w,
			cd_pessoa_fisica_w
	from    prescr_medica a,
		   exame_lab_resultado c
	where a.nr_prescricao = c.nr_prescricao
	and c.nr_seq_resultado = nr_seq_resultado_p;

end if;

if ie_protocolo_assistencial_w then
    open CursorExames for EXECUTE SQLExameAtendimento;
else
    open CursorExames for EXECUTE SQLExameAprovado;
end if;

loop
fetch CursorExames into
        nr_seq_exame_w,
		qt_resultado_exame_w,
		pr_resultado_exame_w,
        ie_formato_result_exame_w,
		nm_exame_w,
		nr_prescricao_w,
		ds_unidade_medida_w;
EXIT WHEN NOT FOUND; /* apply on CursorExames */
begin

    if (nr_atendimento_w > 0) and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then

        if coalesce(cd_setor_atendimento_w::text, '') = '' then
            cd_setor_atendimento_w	:= obter_setor_atendimento(nr_atendimento_w);
            qt_idade_w	            := obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A');
            qt_idade_dias_w	        := obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'DIA');
            qt_peso_gramas_w	    := (coalesce(obter_peso_pf(cd_pessoa_fisica_w),0) * 1000);
        end if;

        if (ie_formato_result_exame_w in ('CA','CV','DV','VP','V')) and (qt_resultado_exame_w IS NOT NULL AND qt_resultado_exame_w::text <> '') then
            vl_atributo_w	:= qt_resultado_exame_w;
        elsif (pr_resultado_exame_w IS NOT NULL AND pr_resultado_exame_w::text <> '') and (ie_formato_result_exame_w in ('CA','P','VP')) then
            vl_atributo_w	:= pr_resultado_exame_w;
        end if;

        open C01;
        loop
        fetch C01 into
            nr_seq_pend_regra_w,
            vl_minimo_w,
            vl_maximo_w;
        EXIT WHEN NOT FOUND; /* apply on C01 */
            begin

          /*if	(vl_atributo_w	is not null) and
                (vl_atributo_w	<> 0) and
                (vl_atributo_w	>= vl_minimo_w) and
                (vl_atributo_w	<= vl_maximo_w) then*/
                select GQA_regra_complementar(nm_usuario_p, nr_atendimento_w, nr_seq_pend_regra_w)
                into STRICT ie_restricao_complementar_w
;

                        select CASE WHEN w.nr_seq_exame_lab_valor =1 THEN  obter_desc_expressao_br(296109) WHEN w.nr_seq_exame_lab_valor =2 THEN  obter_desc_expressao_br(328863)  ELSE '' END
                            into STRICT nr_seq_lab_valor_w
                            from GQA_PENDENCIA_REGRA w
                            where w.nr_seq_exame = nr_seq_exame_w;

                        select max(ds_resultado)

                            into STRICT ds_retorno_w
                            from  EXAME_LAB_RESULT_ITEM                            
                            where nr_seq_resultado = nr_seq_exame_w;

                if ie_restricao_complementar_w = 'X' then

                    if ie_protocolo_assistencial_w then

                        if (nr_regras_atendidas_p IS NOT NULL AND nr_regras_atendidas_p::text <> '') then
                            nr_regras_atendidas_p := nr_regras_atendidas_p || ',';
                        end if;
                        nr_regras_atendidas_p := nr_regras_atendidas_p || nr_seq_pend_regra_w;

                    else

                        select	nextval('gqa_pendencia_pac_seq')
                        into STRICT	nr_sequencia_w
;

                        insert into gqa_pendencia_pac(
                                nr_sequencia,
                                dt_atualizacao,
                                nm_usuario,
                                dt_atualizacao_nrec,
                                nm_usuario_nrec,
                                cd_pessoa_fisica,
                                nr_atendimento,
                                nr_seq_resultado,
                                nr_seq_result_item,
                                NR_SEQ_PEND_REGRA)
                        values (	nr_sequencia_w,
                                clock_timestamp(),
                                nm_usuario_p,
                                clock_timestamp(),
                                nm_usuario_p,
                                cd_pessoa_fisica_w,
                                nr_atendimento_w,
                                nr_seq_resultado_p,
                                nr_sequencia_p,
                                nr_seq_pend_regra_w);

                        CALL gerar_consulta_reg_mentor(nm_usuario_p, 'EXAME_LAB_RESULT_ITEM', nr_seq_pend_regra_w, nr_sequencia_p, nr_sequencia_w, vl_atributo_w, nm_exame_w, ds_unidade_medida_w, nr_prescricao_w);
                        CALL GQA_GERAR_ACAO_REGRA(nr_seq_pend_regra_w,nr_sequencia_w,nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_p);

                    end if;
                end if;
              --end if;
            end;
        end loop;
        close C01;

        commit;

    end if;
end;
end loop;
close CursorExames;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gqa_aprov_exame_result_item ( nr_seq_resultado_p bigint, nr_sequencia_p bigint, nm_usuario_p text, nr_regras_atendidas_p INOUT text, nr_atendimento_p bigint default null, nr_restrigir_regras_p text default null, qt_horas_retroativa_p bigint default 0) FROM PUBLIC;

