-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_proposta ( nr_seq_proposta_p bigint, nm_usuario_p text, ie_consistir_sib_p text, ie_commit_p text, ds_erro_p INOUT text) AS $body$
DECLARE


/* ATENCAO!!!
Colocar 'ponto e virgula' ao final de cada mensagem de erro que for adicionada nesta rotina e restringir para que cada uma delas possua no maximo 253 caracteres.
Se isto nao for feito o sistema nao sabera identificar a partir de onde comeca a segunda mensagem e a mensagem inteira nao sera apresentada caso ultrapasse os 255 caracteres. */
cd_estabelecimento_w		smallint;
ds_erro_w			varchar(4000);
ds_erro_ww			varchar(4000);
qt_inconsistente_w		bigint	:= 0;
nr_seq_segurado_w		bigint;
cd_cgc_estipulante_w		varchar(14);
cd_estipulante_w		varchar(10);
nr_seq_vendedor_pf_w		bigint;
ie_tipo_contratacao_w		varchar(2);
qt_quebra_w			integer	:= 0;
nr_seq_plano_w			bigint;
nr_seq_tabela_w			bigint;
ie_tipo_contrat_plano_w		varchar(2);
nr_seq_vendedor_canal_w		bigint;
cd_cgc_canal_venda_w		varchar(14);
cd_pessoa_canal_venda_w		varchar(10);
ie_contrato_plano_w		varchar(1)	:= 'N';
ds_mensagem_declaracao_w	varchar(255)	:= '';
ie_exige_declaracao_w		varchar(1)	:= 'N';
ie_consistir_sib_w		varchar(1)	:= 'C';
nr_seq_beneficiario_w		bigint;
nr_seq_tabela_benef_w		bigint;
ie_tipo_proposta_w		smallint;
nm_produto_w			varchar(255);
ie_gerar_erro_w			varchar(1)	:= 'S';
nr_seq_motivo_inclusao_w	pls_motivo_inclusao_seg.nr_sequencia%type;
ie_liberar_proposta_w		varchar(1);
ds_erro_www			varchar(4000)	:= '';
nr_seq_plano_benef_w		pls_plano.nr_sequencia%type;
qt_dependente_w			integer;
nr_seq_sca_w			bigint;
ds_erro_menor_idade_w		varchar(4000)	:= '';
ds_erro_pagador_w		varchar(4000)	:= '';
ie_contrato_rescindido_w	varchar(1);
nr_contrato_w			bigint;
nr_seq_contrato_w		bigint;
ie_situacao_contrato_w		varchar(1);
ie_tab_dif_proposta_adapt_w	varchar(10);
dt_inicio_proposta_w		timestamp;
dt_cancelamento_w		timestamp;
nr_seq_lote_inclusao_w		bigint;
ds_erro_limite_dep_w		varchar(4000);
ds_erro_restri_contr_w		varchar(255);
ds_erro_aux_w			varchar(255);
ds_erro_cons_grau_par_w		varchar(255);
qt_tabela_contrato_w		bigint;
qt_tabela_proposta_w		bigint;
qt_inconsistencia_w		integer;
qt_inconsistencia_doc_w		integer;
ie_permite_prop_sem_benef_w 	varchar(1);
ie_tira_virgula_w		varchar(1) 	:= 'N';
ie_area_abrangencia_w		varchar(1);
cd_municipio_ibge_w		varchar(6);
sg_estado_w			varchar(15);
qt_registro_w			bigint;
nr_seq_segurado_ant_w		pls_segurado.nr_sequencia%type;
ie_rescindir_benef_w		varchar(5);
nr_contrato_mig_w		pls_proposta_adesao.nr_seq_contrato_mig%type;
ie_grupo_contrato_w		varchar(1);
nr_seq_portabilidade_w		pls_portab_pessoa.nr_sequencia%type;
ie_inclusao_portabilidade_w	varchar(1);
qt_portabilidade_w		integer;
nm_beneficiario_w		varchar(255);
ie_empresario_individual_w      pls_proposta_adesao.ie_empresario_individual%type;
ie_titular_remido_w		varchar(1);
ie_permite_dependente_remido_w	varchar(1);
ie_validar_portabilidade_w	varchar(1);
ie_produto_diferente_w		varchar(255);
ie_regulamentacao_w		pls_plano.ie_regulamentacao%type;
qt_produto_diferente_w		integer;
nr_seq_titular_w		pls_proposta_beneficiario.nr_seq_titular%type;
nr_seq_titular_contrato_w	pls_segurado.nr_seq_titular%type;
nr_seq_plano_benef_prop_w	pls_plano.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	nr_seq_plano,
		nr_seq_tabela,
		substr(pls_obter_dados_produto(nr_seq_plano,'N'),1,100)
	from	pls_proposta_plano
	where	nr_seq_proposta	= nr_seq_proposta_p;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_tabela,
		a.nr_seq_beneficiario,
		a.nr_seq_portabilidade,
		coalesce((	SELECT	max(x.ie_portabilidade)
			from	pls_motivo_inclusao_seg x
			where	x.nr_sequencia	= a.nr_seq_motivo_inclusao),'N') ie_inclusao_portabilidade,
		obter_nome_pf(a.cd_beneficiario) nm_beneficiario,
		coalesce((	select	pls_obter_se_benef_remido(nr_sequencia,dt_inicio_proposta_w)
			from	pls_segurado x
			where	x.nr_sequencia = a.nr_seq_titular_contrato),'N') ie_titular_remido,
		a.nr_seq_titular,
		a.nr_seq_titular_contrato,
		a.nr_seq_plano
	from	pls_proposta_beneficiario a
	where	a.nr_seq_proposta	= nr_seq_proposta_p
	and	coalesce(a.dt_cancelamento::text, '') = '';

C03 CURSOR FOR
	SELECT	nr_seq_plano
	from	pls_sca_vinculo
	where	nr_seq_benef_proposta	= nr_seq_beneficiario_w;

c04 CURSOR(	nr_contrato_pc		pls_contrato.nr_contrato%type,
		ie_regulamentacao_pc	pls_plano.ie_regulamentacao%type) FOR
	SELECT	ie_permite_plano_diferente
	from	pls_regra_contrato
	where	((ie_regulamentacao = ie_regulamentacao_pc) or (coalesce(ie_regulamentacao::text, '') = ''))
	and	((nr_contrato = nr_contrato_pc) or (coalesce(nr_contrato::text, '') = ''))
	order by
		coalesce(nr_contrato, 0),
		coalesce(ie_regulamentacao, ' ');
	
BEGIN

CALL pls_verificar_parecer_benef(nr_seq_proposta_p, nm_usuario_p);

select	cd_estabelecimento,
	cd_cgc_estipulante,
	cd_estipulante,
	coalesce(nr_seq_vendedor_pf,0),
	ie_tipo_contratacao,
	coalesce(nr_seq_vendedor_canal,0),
	ie_tipo_proposta,
	nr_seq_contrato,
	dt_inicio_proposta,
	nr_seq_contrato_mig,
	coalesce(ie_empresario_individual, 'N')
into STRICT	cd_estabelecimento_w,
	cd_cgc_estipulante_w,
	cd_estipulante_w,
	nr_seq_vendedor_pf_w,
	ie_tipo_contratacao_w,
	nr_seq_vendedor_canal_w,
	ie_tipo_proposta_w,
	nr_contrato_w,
	dt_inicio_proposta_w,
	nr_contrato_mig_w,
	ie_empresario_individual_w
from	pls_proposta_adesao
where	nr_sequencia	= nr_seq_proposta_p;

/* Verificar se existe um lote de inclusao de beneficiario com importacao de arquivo, para desconsiderar algumas consistencias. */

select	max(a.nr_sequencia)
into STRICT	nr_seq_lote_inclusao_w
from	pls_lote_inclusao_benef	a,
	pls_proposta_adesao	b
where	a.nr_seq_proposta	= b.nr_sequencia
and	(a.dt_importacao_arquivo IS NOT NULL AND a.dt_importacao_arquivo::text <> '')
and	b.nr_sequencia		= nr_seq_proposta_p;
/* Obter dados do canal de venda */

begin
select	cd_cgc,
	cd_pessoa_fisica
into STRICT	cd_cgc_canal_venda_w,
	cd_pessoa_canal_venda_w
from	pls_vendedor
where	nr_sequencia	= nr_seq_vendedor_canal_w;
exception
	when others then
	nr_seq_vendedor_canal_w	:= 0;
end;

/* Obter o valor do parametro 17 */

ie_contrato_plano_w	:= coalesce(obter_valor_param_usuario(1232, 17, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

/* Obter o valor do parametro 26 */

ie_exige_declaracao_w	:= coalesce(obter_valor_param_usuario(1232, 26, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

/* Obter o valor do parametro 30 */

ie_consistir_sib_w	:= coalesce(obter_valor_param_usuario(1232, 30, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'C');

/* Obter o valor do parametro 42*/

ie_liberar_proposta_w	:= coalesce(obter_valor_param_usuario(1232, 42, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

/* Obter o valor do parametro 58*/

ie_contrato_rescindido_w	:= coalesce(obter_valor_param_usuario(1232, 58, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'S');

/* Obter o valor do parametro 78*/

ie_tab_dif_proposta_adapt_w	:= coalesce(obter_valor_param_usuario(1232, 78, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'S');

/* Obter o valor do parametro 106*/

ie_permite_prop_sem_benef_w	:= coalesce(obter_valor_param_usuario(1232, 106, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

/* Obter o valor do parametro 112*/

ie_area_abrangencia_w	:= coalesce(obter_valor_param_usuario(1232, 112, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'S');

/* Obter o valor do parametro 123*/

ie_permite_dependente_remido_w	:= coalesce(obter_valor_param_usuario(1232, 123, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

/* Obter o valor do parametro 93 - Gestao de Contratos */

ie_rescindir_benef_w	:= coalesce(obter_valor_param_usuario(1202, 93, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

/* Obter valor do parametro 124 - Proposta de adesao - Validar a informacao de portabilidade na proposta*/

ie_validar_portabilidade_w	:= coalesce(obter_valor_param_usuario(1232, 124, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'S');

ie_produto_diferente_w		:= coalesce(obter_valor_param_usuario(1202, 65, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w),'S');

/* PROPOSTA nao possui estipulante */

if (coalesce(cd_cgc_estipulante_w::text, '') = '') and (coalesce(cd_estipulante_w::text, '') = '') then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.
	/* Mensagem: Proposta de adesao nao possui estipulante informado; */
get_texto(280295);
end if;

/* PROPOSTA nao possui canal de venda */

if (nr_seq_vendedor_canal_w = 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280296);
	/* Mensagem: Proposta de adesao nao possui canal de venda informado; */

end if;

/* PROPOSTA nao possui vendedor */

if (cd_cgc_canal_venda_w IS NOT NULL AND cd_cgc_canal_venda_w::text <> '') and (nr_seq_vendedor_pf_w	= 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280297);
	/* Mensagem: Proposta de adesao nao possui vendedor informado; */

end if;

/* PROPOSTA nao possui beneficiarios */

if (ie_permite_prop_sem_benef_w = 'N') then
	select	count(1)
	into STRICT	qt_inconsistente_w
	from	pls_proposta_beneficiario
	where	nr_seq_proposta	= nr_seq_proposta_p;
	if (qt_inconsistente_w = 0) then
		ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280302);
		/* Mensagem: Nao ha beneficiarios cadastrados para essa proposta; */

	end if;
end if;

/* PROPOSTA possui titular com grau de parentesco */

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_segurado_w
from	pls_proposta_beneficiario
where	nr_seq_proposta	= nr_seq_proposta_p
and	coalesce(nr_seq_titular::text, '') = ''
and	coalesce(nr_seq_titular_contrato::text, '') = ''
and	(nr_seq_parentesco IS NOT NULL AND nr_seq_parentesco::text <> '');
if (nr_seq_segurado_w > 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(1132325,'NR_SEQ_SEGURADO_P=' || substr(pls_obter_dados_benef_prop(nr_seq_segurado_w,'N'),1,100));
	/* Mensagem: Existe beneficiario titular com grau parentesco informado; */

end if;

/* PROPOSTA nao possui produto */

select	count(1)
into STRICT	qt_inconsistente_w
from	pls_proposta_plano
where	nr_seq_proposta	= nr_seq_proposta_p
and	(nr_seq_plano IS NOT NULL AND nr_seq_plano::text <> '');
if (qt_inconsistente_w	= 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280303);
	/* Mensagem: Proposta de adesao nao possui produto vinculado; */

end if;

/* PROPOSTA nao possui tabela de preco */

select	count(1)
into STRICT	qt_inconsistente_w
from	pls_plano		b,
	pls_proposta_plano	a
where	a.nr_seq_plano	= b.nr_sequencia
and	b.ie_preco	= '1'
and	nr_seq_proposta	= nr_seq_proposta_p
and	coalesce(nr_seq_tabela::text, '') = '';
if (qt_inconsistente_w	> 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280306);
	/* Mensagem: Proposta de adesao nao possui tabela de preco vinculada; */

end if;

/* PROPOSTA nao possui pagador */

select	count(1)
into STRICT	qt_inconsistente_w
from	pls_proposta_pagador
where	nr_seq_proposta	= nr_seq_proposta_p
and	((cd_cgc_pagador IS NOT NULL AND cd_cgc_pagador::text <> '') or (cd_pagador IS NOT NULL AND cd_pagador::text <> ''));

if (qt_inconsistente_w	= 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280307);
	/* Mensagem: Proposta de adesao nao possui pagador vinculado; */

end if;

/* PROPOSTA estipulante PF nao permitido em relacao ao tipo de contratacao */

if (cd_estipulante_w IS NOT NULL AND cd_estipulante_w::text <> '') and (ie_tipo_contratacao_w	in ('CA','CE')) and (ie_empresario_individual_w = 'N') then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280308);
	/* Mensagem: Estipulante PF informado, mas o tipo de contratacao nao e Individual/Familiar; */

end if;

/* PROPOSTA estipulante PJ nao permitido em relacao ao tipo de contratacao */

if (cd_cgc_estipulante_w IS NOT NULL AND cd_cgc_estipulante_w::text <> '') and (ie_tipo_contratacao_w	= 'I') then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280309);
	/* Mensagem: Estipulante PJ informado, mas o tipo de contratacao nao e Coletivo; */

end if;

/* BENEFICIARIO nao possui produto */

begin
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_segurado_w
	from	pls_proposta_beneficiario
	where	nr_seq_proposta	= nr_seq_proposta_p
	and	coalesce(nr_seq_plano::text, '') = ''
	and	coalesce(dt_cancelamento::text, '') = '';
exception
when others then
	nr_seq_segurado_w := 0;
end;
if (nr_seq_segurado_w > 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280311, 'NR_SEQ_SEGURADO_P=' || substr(pls_obter_dados_benef_prop(nr_seq_segurado_w,'N'),1,100));
	/* Mensagem: Existe beneficiario sem produto vinculado (NR_SEQ_SEGURADO_P); */

end if;

/* BENEFICIARIO nao possui tabela de preco */

begin
	select	coalesce(max(a.nr_sequencia),0)
	into STRICT	nr_seq_segurado_w
	from	pls_plano			b,
		pls_proposta_beneficiario	a
	where	a.nr_seq_plano		= b.nr_sequencia
	and	a.nr_seq_proposta	= nr_seq_proposta_p
	and	b.ie_preco		= '1'
	and	coalesce(a.nr_seq_tabela::text, '') = ''
	and	coalesce(a.dt_cancelamento::text, '') = '';
exception
when others then
	nr_seq_segurado_w := 0;
end;
if (nr_seq_segurado_w > 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280314, 'NR_SEQ_SEGURADO_P=' || substr(pls_obter_dados_benef_prop(nr_seq_segurado_w,'N'),1,100));
	/* Mensagem: Existe beneficiario sem tabela de preco vinculada (NR_SEQ_SEGURADO_P); */

end if;

/* BENEFICIARIO inconsistente com o SIB */

if (ie_consistir_sib_p = 'S') and (ie_consistir_sib_w = 'C') then
	select	count(1)
	into STRICT	qt_inconsistente_w
	from	table(pls_sib_validacao_pck.validar_sib_contrato(null,null,nr_seq_proposta_p,null));
	
	if (qt_inconsistente_w > 0) then
		ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280316);
		/* Mensagem: Existem beneficiarios com inconsistencias para o SIB; */

	end if;
end if;

/* BENEFICIARIO nao possui pagador */

begin
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_segurado_w
	from	pls_proposta_beneficiario
	where	nr_seq_proposta	= nr_seq_proposta_p
	and	coalesce(nr_seq_pagador::text, '') = ''
	and	coalesce(dt_cancelamento::text, '') = '';
exception
when others then
	nr_seq_segurado_w := 0;
end;
if (nr_seq_segurado_w > 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280317, 'NR_SEQ_SEGURADO_P=' || substr(pls_obter_dados_benef_prop(nr_seq_segurado_w,'N'),1,100));
	/* Mensagem: Existe beneficiario sem pagador vinculado (NR_SEQ_SEGURADO_P); */

end if;

/* BENEFICIARIO com data de nascimento maior que a data da proposta*/

begin
	select	coalesce(max(a.nr_sequencia),0)
	into STRICT	nr_seq_segurado_w
	from	pessoa_fisica			b,
		pls_proposta_beneficiario	a
	where	a.cd_beneficiario	= b.cd_pessoa_fisica
	and	a.nr_seq_proposta	= nr_seq_proposta_p
	and	b.dt_nascimento		> dt_inicio_proposta_w
	and	coalesce(a.dt_cancelamento::text, '') = '';
exception
when others then
	nr_seq_segurado_w := 0;
end;
if (nr_seq_segurado_w > 0) then
	ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280320, 'NR_SEQ_SEGURADO_P=' || substr(pls_obter_dados_benef_prop(nr_seq_segurado_w,'N'),1,100));
	/* Mensagem: A data de nascimento do beneficiario maior que a data da proposta (NR_SEQ_SEGURADO_P); */

end if;

if (ie_contrato_plano_w	= 'S') and (ie_tipo_proposta_w in (1,3,7))   then
	select	count(1)
	into STRICT	qt_inconsistente_w
	from	pls_proposta_plano
	where	nr_seq_proposta	= nr_seq_proposta_p
	and	ie_principal	= 'S';
	
	if (qt_inconsistente_w	= 0) then
		ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280322);
		/* Mensagem: Deve ser cadastrado pelo menos 1 produto principal para a proposta; */

	end if;
	
	/* PROPOSTA possui mais de um produto principal */

	select	count(1)
	into STRICT	qt_inconsistente_w
	from	pls_proposta_plano
	where	nr_seq_proposta	= nr_seq_proposta_p
	and	ie_principal	= 'S';
	if (qt_inconsistente_w	> 1) then
		ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280323);
		/* Mensagem: Proposta de adesao possui mais de um produto principal vinculado; */

	end if;
end if;

if (nr_contrato_w IS NOT NULL AND nr_contrato_w::text <> '') then
	select	ie_situacao,
		nr_sequencia
	into STRICT	ie_situacao_contrato_w,
		nr_seq_contrato_w
	from	pls_contrato
	where	nr_contrato	= nr_contrato_w;
	
	if (ie_contrato_rescindido_w = 'N') then
		if (ie_situacao_contrato_w = '3') then
			ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280324);
			/* Mensagem: Nao e possivel realizar a contratacao para um contrato rescindido. Verifique o parametro 58; */

		end if;
	end if;
end if;

if (ie_area_abrangencia_w = 'N') then
	begin
		if (cd_estipulante_w IS NOT NULL AND cd_estipulante_w::text <> '') then
			select	sg_estado,
				cd_municipio_ibge
			into STRICT	sg_estado_w,
				cd_municipio_ibge_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica =  cd_estipulante_w
			and	ie_tipo_complemento = 1;
		elsif (cd_cgc_estipulante_w IS NOT NULL AND cd_cgc_estipulante_w::text <> '') then
			select	sg_estado,
				cd_municipio_ibge
			into STRICT	sg_estado_w,
				cd_municipio_ibge_w
			from	pessoa_juridica
			where	cd_cgc = cd_cgc_estipulante_w;
		end if;
	exception
	when others then
		sg_estado_w	:= null;
		cd_municipio_ibge_w := null;
	end;
	
	select 	count(1)
	into STRICT	qt_registro_w
	from	pls_regiao_atuacao
	where	cd_municipio_ibge = cd_municipio_ibge_w;
	
	if (qt_registro_w = 0) then
		select 	count(1)
		into STRICT	qt_registro_w
		from	pls_regiao_atuacao
		where	sg_uf_municipio	= sg_estado_w
		and	coalesce(cd_municipio_ibge::text, '') = '';
		
		if (qt_registro_w = 0) then
			select	count(1)
			into STRICT	qt_registro_w
			from	pls_regiao_local	a,
				pls_regiao		b,
				pls_regiao_atuacao	c
			where	b.nr_sequencia		= c.nr_seq_regiao
			and	b.nr_sequencia		= a.nr_seq_regiao
			and	c.cd_municipio_ibge	= cd_municipio_ibge_w;
			
			if (qt_registro_w = 0) then
				select	count(1)
				into STRICT	qt_registro_w
				from	pls_regiao_local	a,
					pls_regiao		b,
					pls_regiao_atuacao	c
				where	b.nr_sequencia		= c.nr_seq_regiao
				and	b.nr_sequencia		= a.nr_seq_regiao
				and	c.sg_uf_municipio	= sg_estado_w
				and	coalesce(c.cd_municipio_ibge::text, '') = '';
			end if;
		end if;
	end if;
	
	if (qt_registro_w = 0) then
		--Nao e permitido estipulante que esteja fora da area de atuacao da operadora.
		ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(449927);
	end if;
end if;

open C01;
loop
fetch C01 into
	nr_seq_plano_w,
	nr_seq_tabela_w,
	nm_produto_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	/* Obter dados do produto */

	select	ie_tipo_contratacao
	into STRICT	ie_tipo_contrat_plano_w
	from	pls_plano
	where	nr_sequencia	= nr_seq_plano_w;
	
	/* PRODUTO vinculado possui tipo de contratacao diferente da proposta de adesao */
	
	if (ie_tipo_contratacao_w	<> ie_tipo_contrat_plano_w) then
		ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280325);
		/* Mensagem: Tipo de contratacao do produto diferente do tipo de contratacao da proposta; */

	end if;
	
	begin
	select	count(1)
	into STRICT	qt_inconsistente_w
	from	pls_proposta_beneficiario
	where	nr_seq_proposta	= nr_seq_proposta_p
	and	nr_seq_plano	= nr_seq_plano_w
	and	coalesce(dt_cancelamento::text, '') = '';
	exception
	when others then
		qt_inconsistente_w := 1;
	end;
	
	/* PRODUTO nao possui nenhum beneficiario vinculado  */

	if (ie_contrato_plano_w	= 'S') and (qt_inconsistente_w	= 0)   and (ie_tipo_proposta_w in (1,3,7))   then
		ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280326, 'NR_SEQ_PLANO_P=' || nr_seq_plano_w);
		/* Mensagem: Produto nao possui nenhum beneficiario vinculado. (Seq.: NR_SEQ_PLANO_P); */

	end if;
	
	/*Permitir produtos iguais e tabelas diferentes em propostas de adaptacao*/

	if (ie_tab_dif_proposta_adapt_w = 'S') and (ie_tipo_proposta_w	= 9) then
		select	count(1)
		into STRICT	qt_inconsistente_w
		from	pls_proposta_plano
		where	nr_seq_proposta	= nr_seq_proposta_p
		and	nr_seq_plano	= nr_seq_plano_w
		and	nr_seq_tabela	= nr_seq_tabela_w;
		
		if (qt_inconsistente_w > 1 and ie_gerar_erro_w = 'S') then
			ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280327, 	'NR_SEQ_PLANO_P=' || nr_seq_plano_w ||
												';NM_PRODUTO_P=' || nm_produto_w ||
												';QT_INCONSISTENTE_P=' || qt_inconsistente_w);
			/*Mensagem: O produto NR_SEQ_PLANO_P - NM_PRODUTO_P foi adicionado QT_INCONSISTENTE_P vezes na proposta com a mesma tabela de preco. Verifique; */

			ie_gerar_erro_w	:= 'N';
		end if;
	else
		/* Verificar se o PRODUTO esta repetido na proposta (Se existe 2 produtos iguais)*/

		select	count(1)
		into STRICT	qt_inconsistente_w
		from	pls_proposta_plano
		where	nr_seq_proposta	= nr_seq_proposta_p
		and	nr_seq_plano	= nr_seq_plano_w
		and	nr_seq_tabela	= nr_seq_tabela_w;
		
		if (qt_inconsistente_w > 1 and ie_gerar_erro_w = 'S') then
			ds_erro_w	:= ds_erro_w || wheb_mensagem_pck.get_texto(280331, 	'NR_SEQ_PLANO_P=' || nr_seq_plano_w ||
												';NM_PRODUTO_P=' || nm_produto_w ||
												';QT_INCONSISTENTE_P=' || qt_inconsistente_w);
			/* Mensagem: O produto NR_SEQ_PLANO_P - NM_PRODUTO_P foi adicionado QT_INCONSISTENTE_P vezes na proposta. Verifique; */

			ie_gerar_erro_w	:= 'N';
		end if;
	end if;
	end;
end loop;
close C01;

open C02;
loop
fetch C02 into
	nr_seq_beneficiario_w,
	nr_seq_tabela_benef_w,
	nr_seq_segurado_ant_w,
	nr_seq_portabilidade_w,
	ie_inclusao_portabilidade_w,
	nm_beneficiario_w,
	ie_titular_remido_w,
	nr_seq_titular_w,
	nr_seq_titular_contrato_w,
	nr_seq_plano_benef_prop_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	
	if (ie_validar_portabilidade_w = 'S') then
		if (ie_inclusao_portabilidade_w = 'S') then
			if (coalesce(nr_seq_portabilidade_w::text, '') = '') then
				ds_erro_w	:= substr(ds_erro_w || wheb_mensagem_pck.get_texto(1071467, 'NM_BENEF='||nm_beneficiario_w),1,4000); --Nao foi gerada solicitacao de portabilidade para o beneficiario #@NM_BENEF#@. Favor verificar.
			end if;
			
			select	count(1)
			into STRICT	qt_portabilidade_w
			from	pls_portab_pessoa
			where	nr_sequencia = nr_seq_portabilidade_w
			and	ie_status = 'U';
			
			if (qt_portabilidade_w > 0) then
				ds_erro_w	:= substr(ds_erro_w || wheb_mensagem_pck.get_texto(1071468, 'NM_BENEF='||nm_beneficiario_w),1,4000); --A solicitacao de portabilidade do beneficiario #@NM_BENEF#@ esta pendente. Favor verificar.
			end if;
			
		elsif (nr_seq_portabilidade_w IS NOT NULL AND nr_seq_portabilidade_w::text <> '') then --Nao foi gerado o motivo de inclusao da portabilidade para o beneficiario #@NM_BENEF#@. Favor verificar.
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1097094, 'NM_BENEF='||nm_beneficiario_w);			
		end if;
	end if;
	
	if (ie_titular_remido_w = 'S') and (ie_permite_dependente_remido_w = 'N')then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1106167);
	end if;
	
	/* Verificar se a pessoa fisica ja existe no contrato ja existente */

	if (ie_tipo_proposta_w in ('2','4','8')) then
		if (ie_tipo_proposta_w = '2') then
			if (ie_produto_diferente_w = 'D') then
				select	max(ie_regulamentacao)
				into STRICT	ie_regulamentacao_w
				from	pls_plano
				where	nr_sequencia	= nr_seq_plano_benef_prop_w;

				for r_c04_w in c04(nr_contrato_w, ie_regulamentacao_w) loop
					begin
					ie_produto_diferente_w	:= r_c04_w.ie_permite_plano_diferente;
					end;
				end loop;
			end if;
			
			if (coalesce(ie_produto_diferente_w,'N') = 'N') then
				if (coalesce(nr_seq_titular_contrato_w,0) <> 0) then
					select	count(1)
					into STRICT	qt_produto_diferente_w
					from	pls_segurado
					where	nr_sequencia = nr_seq_titular_contrato_w
					and	coalesce(dt_cancelamento::text, '') = ''
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and	nr_seq_plano <> nr_seq_plano_benef_prop_w;
					
					if (qt_produto_diferente_w > 0) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(280765);
					end if;
				elsif (coalesce(nr_seq_titular_w,0) <> 0) then
					select	count(1)
					into STRICT	qt_produto_diferente_w
					from	pls_proposta_beneficiario
					where	nr_sequencia = nr_seq_titular_w
					and	coalesce(dt_cancelamento::text, '') = ''
					and	nr_seq_plano <> nr_seq_plano_benef_prop_w;
					
					if (qt_produto_diferente_w > 0) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(280765);
					end if;
				else
					select	count(1)
					into STRICT	qt_produto_diferente_w
					from	pls_proposta_beneficiario
					where	nr_seq_titular	= nr_seq_beneficiario_w
					and	coalesce(dt_cancelamento::text, '') = ''
					and	nr_seq_plano <> nr_seq_plano_benef_prop_w;
					
					if (qt_produto_diferente_w > 0) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(280766);
					end if;
				end if;
			end if;
		end if;
		
		select	count(1)
		into STRICT	qt_inconsistente_w
		from	pls_proposta_beneficiario 	a,
			pls_proposta_adesao		b
		where	a.nr_sequencia			= nr_seq_beneficiario_w
		and	b.nr_sequencia			= a.nr_seq_proposta
		and	exists	(SELECT     	1
				from       	pls_segurado   c,
						pls_contrato   d
				where      	d.nr_sequencia      	= c.nr_seq_contrato
				and      	d.nr_contrato       	= b.nr_seq_contrato
				and        	c.cd_pessoa_fisica  	= a.cd_beneficiario
				and		coalesce(c.dt_cancelamento::text, '') = ''	
				and		((coalesce(c.dt_rescisao::text, '') = '') or (c.dt_rescisao > coalesce(a.dt_contratacao, b.dt_inicio_proposta))));
		
		if (coalesce(qt_inconsistente_w,0) > 0) then
			ds_erro_w	:= substr(ds_erro_w || wheb_mensagem_pck.get_texto(1078001, 'NM_BENEFICIARIO_P=' || nm_beneficiario_w),1,4000);
		end if;
	end if;
	
	/* NESSAS CONSISTENCIA SEMPRE TRATAR nvl(nr_seq_tabela_benef_w,0) POIS PARA CUSTO OPERACIONAL NAO TEM TABELA */

	if (ie_tipo_proposta_w <> '9') then
		select	count(1)
		into STRICT	qt_tabela_proposta_w
		from	pls_proposta_plano
		where	nr_seq_proposta	= nr_seq_proposta_p
		and	nr_seq_tabela	= nr_seq_tabela_benef_w;
		
		/* Tabela de preco do BENEFICIARIO nao esta vinculada a proposta de adesao */

		if (coalesce(nr_seq_tabela_benef_w,0) > 0) and (qt_tabela_proposta_w = 0) then
			ds_erro_w	:= substr(ds_erro_w || wheb_mensagem_pck.get_texto(280332, 'NR_SEQ_BENEFICIARIO_P=' || nr_seq_beneficiario_w),1,4000);
			/* Mensagem: Tabela de preco do beneficiario ('NR_SEQ_BENEFICIARIO_P') nao esta vinculada a proposta de adesao; */

		end if;
	end if;
	
	/*Se o motivo de inclusao nao for informado ira ser gravado o valor padrao dos parametros*/

	select	nr_seq_motivo_inclusao,
		nr_seq_plano
	into STRICT	nr_seq_motivo_inclusao_w,
		nr_seq_plano_benef_w
	from	pls_proposta_beneficiario
	where	nr_sequencia	= nr_seq_beneficiario_w;
	
	if (coalesce(nr_seq_motivo_inclusao_w::text, '') = '') then
		begin
		select	nr_seq_motivo_inclusao
		into STRICT	nr_seq_motivo_inclusao_w
		from	pls_parametros
		where	cd_estabelecimento = cd_estabelecimento_w;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(194711);
		end;
		
		if (coalesce(nr_seq_motivo_inclusao_w::text, '') = '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(194711);
		end if;
		
		update	pls_proposta_beneficiario
		set	nr_seq_motivo_inclusao 	= nr_seq_motivo_inclusao_w
		where	nr_sequencia	= nr_seq_beneficiario_w;
	end if;
	/*Verificar as regras do grau parentesco do plano com as do beneficiarios dependentes*/

	select	count(1)
	into STRICT	qt_dependente_w
	from	pls_proposta_beneficiario
	where	nr_sequencia	= nr_seq_beneficiario_w
	and	((nr_seq_titular IS NOT NULL AND nr_seq_titular::text <> '')
	or (nr_seq_titular_contrato IS NOT NULL AND nr_seq_titular_contrato::text <> ''));
	if (qt_dependente_w > 0) then
		CALL pls_consistir_parenteco_plano(nr_seq_plano_benef_w,nr_seq_beneficiario_w,'P',nm_usuario_p);
	end if;
	
	--Verificar se existe algum dependente ativo do beneficiario que nao esteja incluido na proposta de migracao, pois o dependente nao podera ficar ativo sem o titular
	if (ie_tipo_proposta_w in (3,4,7,8)) and (nr_seq_segurado_ant_w IS NOT NULL AND nr_seq_segurado_ant_w::text <> '') and (ie_rescindir_benef_w = 'N') then
		
		ie_grupo_contrato_w	:= 'N'; --Se for migracao entre contratos do mesmo grupo, a consistencia nao deve ser realizada pois pode existir um contrato para titulares e outro para dependentes
		if (ie_tipo_proposta_w in (4,8)) then
			select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_grupo_contrato_w
			from	pls_contrato
			where	nr_contrato = nr_contrato_w
			and	cd_contrato_principal = nr_contrato_mig_w;
			
			if (ie_grupo_contrato_w = 'N') then
				select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_grupo_contrato_w
				from	pls_contrato
				where	nr_contrato = nr_contrato_mig_w
				and	cd_contrato_principal = nr_contrato_w;
				
				if (ie_grupo_contrato_w = 'N') then
					select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
					into STRICT	ie_grupo_contrato_w
					from	pls_contrato
					where	cd_contrato_principal = nr_contrato_mig_w
					and	cd_contrato_principal = nr_contrato_w;
				end if;
			end if;
		end if;
		
		if (ie_grupo_contrato_w = 'N') then
			select	count(1)
			into STRICT	qt_registro_w
			from	pls_segurado a
			where	a.nr_seq_titular = nr_seq_segurado_ant_w
			and	coalesce(a.dt_rescisao::text, '') = ''
			and	not exists (	SELECT	1
						from	pls_proposta_beneficiario x
						where	x.nr_seq_beneficiario	= a.nr_sequencia
						and	x.nr_seq_proposta	= nr_seq_proposta_p);
			
			if (qt_registro_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(692028,'nm_benef='||pls_obter_dados_segurado(nr_seq_segurado_ant_w,'N'));
				--Existem dependentes do beneficiario #@NM_BENEF#@ que estao ativos no contrato de origem e nao foram incluidos na proposta de migracao.
			end if;
		end if;
	end if;
	
	--Verificar as regras do grau parentesco do SCA com as do beneficiarios dependentes
	open C03;
	loop
	fetch C03 into
		nr_seq_sca_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		select	count(1)
		into STRICT	qt_dependente_w
		from	pls_proposta_beneficiario
		where	nr_sequencia	= nr_seq_beneficiario_w
		and	(nr_seq_titular IS NOT NULL AND nr_seq_titular::text <> '');
		if (qt_dependente_w > 0) then
			CALL pls_consistir_parenteco_plano(nr_seq_sca_w,nr_seq_beneficiario_w,'P',nm_usuario_p);
		end if;
		end;
	end loop;
	close C03;
	end;
end loop;
close C02;

if (ie_tipo_proposta_w not in (5,9)) then
	if (ie_exige_declaracao_w	= 'S') then
		ds_mensagem_declaracao_w := pls_consistir_declaracao_prop(nr_seq_proposta_p, cd_estabelecimento_w, ds_mensagem_declaracao_w);
	end if;
	
	if (coalesce(ds_mensagem_declaracao_w,'0') <> '0') then
		ds_erro_w := substr(ds_erro_w || substr(ds_mensagem_declaracao_w,1,252) || ';' || chr(13),1,4000);
		/* Mensagem: 'O(s) beneficiario(s) nao possuem declaracao de saude:
				Joao
				Maria */
	
		ie_tira_virgula_w := 'S';
	end if;
	
	if (coalesce(nr_seq_lote_inclusao_w,0) = 0) then
		/*Parametro [41] - 'Permitir apenas 1 (um) titular nas propostas de pessoa fisica'*/

		ds_erro_www := pls_consistir_prop_titular(nr_seq_proposta_p, nm_usuario_p, cd_estabelecimento_w, ds_erro_www);
		/* Mensagem: Apenas e permitido 1 titular em propostas de Pessoas Fisicas, Parametro [41]; */


		
		/*Parametro [52] - 'Permitir vincular somente pessoas maiores de idade ou emancipadas como estipulante/pagador da proposta'*/

		ds_erro_menor_idade_w := pls_consistir_idade_estip_pag(nr_seq_proposta_p, cd_estabelecimento_w, nm_usuario_p, ds_erro_menor_idade_w);
		/* Mensagem: Estipulante CD_ESTIPULANTE_P e menor de idade. Parametro[52]; */


		/* Mensagem: O pagador CD_PAGADOR_P e menor de idade. Parametro[52]; */


		
		/*Parametro [57] - 'Permite apenas 1 (um) pagador ativo na proposta de adesao'*/

		ds_erro_pagador_w := pls_consistir_proposta_pagador(nr_seq_proposta_p, cd_estabelecimento_w, nm_usuario_p, ds_erro_pagador_w);
		/* Mensagem: Apenas e permitido um pagador ativo na proposta de adesao. Parametro[57]; */


		
		/*Parametro [83] - 'Consistir limite de dependencia do beneficiario*/

		ds_erro_limite_dep_w := pls_consistir_limit_depen_prop(nr_seq_proposta_p, cd_estabelecimento_w, nm_usuario_p, ds_erro_limite_dep_w);
		/* Mensagem: Beneficiario: CD_PESSOA_FISICA_P ultrapassou seu limite dependencia. Parametro[83]; */


		
		/*Restricao de inclusao no contrato*/

		open C02;
		loop
		fetch C02 into
			nr_seq_beneficiario_w,
			nr_seq_tabela_benef_w,
			nr_seq_segurado_ant_w,
			nr_seq_portabilidade_w,
			ie_inclusao_portabilidade_w,
			nm_beneficiario_w,
			ie_titular_remido_w,
			nr_seq_titular_w,
			nr_seq_titular_contrato_w,
			nr_seq_plano_benef_prop_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			
			select	dt_cancelamento
			into STRICT	dt_cancelamento_w
			from	pls_proposta_beneficiario
			where	nr_sequencia	= nr_seq_beneficiario_w;
			
			if (coalesce(dt_cancelamento_w::text, '') = '') then
				ds_erro_aux_w := pls_cons_inclusao_benef_contr(null, nr_seq_beneficiario_w, nr_seq_contrato_w, dt_inicio_proposta_w, cd_estabelecimento_w, nm_usuario_p, ds_erro_aux_w);
			end if;
			
			if (ds_erro_aux_w IS NOT NULL AND ds_erro_aux_w::text <> '') then
				ds_erro_restri_contr_w	:= substr(ds_erro_restri_contr_w || ds_erro_aux_w,1,255);
			end if;
			
			end;
		end loop;
		close C02;
	end if;
	CALL pls_consistir_documentos_prop(nr_seq_proposta_p,cd_estabelecimento_w,nm_usuario_p);
	
	/* Consistencia de grau parentesco*/


	--pls_consistir_grau_paren_max(nr_seq_proposta_p,'P',cd_estabelecimento_w,nm_usuario_p,ds_erro_cons_grau_par_w);
end if;

ds_erro_w	:= substr(ds_erro_w || ds_erro_www || ds_erro_menor_idade_w || ds_erro_pagador_w || ds_erro_limite_dep_w || ds_erro_restri_contr_w || ds_erro_cons_grau_par_w,0,4000);

if (coalesce(ds_erro_w::text, '') = '') then
	if (ie_tipo_proposta_w <> 2 and ie_tipo_proposta_w <> 4 and ie_tipo_proposta_w <> 8) then
		CALL pls_gerar_regra_autom(0, nr_seq_proposta_p, 0, nm_usuario_p, cd_estabelecimento_w);
	end if;
	CALL pls_gerar_simulacao_proposta(nr_seq_proposta_p, nm_usuario_p, cd_estabelecimento_w);
	
	update	pls_proposta_adesao
	set	ie_status	= 'C',
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_proposta_p;
	
	/*Gerar historico para o beneficiario*/

	open C02;
	loop
	fetch C02 into
		nr_seq_beneficiario_w,
		nr_seq_tabela_benef_w,
		nr_seq_segurado_ant_w,
		nr_seq_portabilidade_w,
		ie_inclusao_portabilidade_w,
		nm_beneficiario_w,
		ie_titular_remido_w,
		nr_seq_titular_w,
		nr_seq_titular_contrato_w,
		nr_seq_plano_benef_prop_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		CALL pls_gravar_histor_prop_benef(nr_seq_beneficiario_w,clock_timestamp(),'1',wheb_mensagem_pck.get_texto(280333),nm_usuario_p); -- 280333 - Realizado consistencia
		end;
	end loop;
	close C02;
	
	/* Atualizar a lista de check list do usuario da proposta */

	CALL pls_atualizar_inco_proposta(nr_seq_proposta_p, nm_usuario_p);
	
	CALL pls_atualizar_inco_prop_fixas(nr_seq_proposta_p, nm_usuario_p);
	
	select	count(1)
	into STRICT	qt_inconsistencia_w
	from	pls_proposta_validacao
	where	nr_seq_proposta	= nr_seq_proposta_p
	and 	coalesce(dt_liberacao::text, '') = '';
	
	select	count(1)
	into STRICT	qt_inconsistencia_doc_w
	from	pls_proposta_inconsist_doc
	where	nr_seq_proposta = nr_seq_proposta_p
	and	coalesce(dt_liberacao::text, '') = '';

	if (qt_inconsistencia_w > 0) or (qt_inconsistencia_doc_w > 0) then
		update	pls_proposta_adesao
		set	ie_inconsistencia = 'S'
		where	nr_sequencia = nr_seq_proposta_p;
	else
		update	pls_proposta_adesao
		set	ie_inconsistencia = 'N'
		where	nr_sequencia = nr_seq_proposta_p;
	end if;
	
	if (ie_liberar_proposta_w = 'S') then
		ds_erro_w := pls_liberar_proposta(nr_seq_proposta_p, 1, 'N', nm_usuario_p, ds_erro_w);
	end if;
end if;

while (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') loop
	qt_quebra_w	:= position(';' in ds_erro_w)+1;
	if	((length(coalesce(ds_erro_ww,'X')) + qt_quebra_w) < 256) then
		ds_erro_ww	:= ds_erro_ww || substr(ds_erro_w,1,qt_quebra_w);
		ds_erro_w	:= substr(ds_erro_w,qt_quebra_w + 1,length(ds_erro_w));
	else
		ds_erro_w	:= null;
	end if;
end loop;

ds_erro_p := substr(ds_erro_ww,1,255);

if (ie_tira_virgula_w = 'S') then
	if (position(';' in ds_erro_p) > 0) then
		ds_erro_p := substr(ds_erro_p,1,(position(';' in ds_erro_p) - 1));
	end if;
end if;

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_proposta ( nr_seq_proposta_p bigint, nm_usuario_p text, ie_consistir_sib_p text, ie_commit_p text, ds_erro_p INOUT text) FROM PUBLIC;

