-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE avisa_diverg_insp_recebimento ( nr_seq_registro_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* Variáveis para envio da CI */

nr_seq_inspecao_w		bigint;
nr_ordem_compra_w		bigint;
nr_item_oci_w			integer;
nm_usuario_solicitante_w	varchar(255);
nm_usuario_comprador_w		varchar(255);
nm_usuarios_solic_ordem_w	varchar(2000);

/*Traz as ordens referente as inspeções do registro*/

ds_ordens_compra_w		varchar(2000);

ds_lista_mat_w			varchar(2000);

nr_seq_regra_w			bigint;
cd_perfil_ww			varchar(10);
nm_usuarios_adic_w		varchar(255);
qt_regra_usuario_w		bigint;
nr_seq_comunic_w		bigint;
nr_seq_classif_w		bigint;
ie_ci_lida_w			varchar(1);
nm_usuario_destino_w		varchar(2000);
ds_titulo_w			varchar(80);
ds_comunic_w			varchar(4000);
qt_existe_envio_soc_w		bigint;
ds_material_w			varchar(255);
ds_tipo_diver_w			varchar(80);
cd_material_w			integer;
qt_inspecao_w			double precision;

/* Campos da regra Usuário da Regra */

cd_setor_regra_usuario_w	integer;
/* Se tiver setor na regra, envia CI para os setores */

ds_setor_adicional_w    	varchar(2000) := '';

c01 CURSOR FOR
SELECT	b.nr_sequencia,
	b.cd_perfil,
	b.nm_usuarios_adic
from	regra_envio_comunic_compra a,
	regra_envio_comunic_evento b
where	a.nr_sequencia = b.nr_seq_regra
and	a.cd_funcao = 270 -- Inspeção Recebimento
and	b.cd_evento = 54
and	b.ie_situacao = 'A'
and	a.cd_estabelecimento = cd_estabelecimento_p
and	substr(obter_se_envia_ci_regra_compra(b.nr_sequencia,nr_seq_registro_p,'IR',obter_perfil_ativo,nm_usuario_p,null),1,1) = 'S';

c02 CURSOR FOR
SELECT	coalesce(a.cd_setor_atendimento,0) cd_setor_atendimento
from	regra_envio_comunic_usu a
where	a.nr_seq_evento = nr_seq_regra_w;

c03 CURSOR FOR
SELECT	distinct
	coalesce(nr_ordem_compra,0)
from	inspecao_recebimento
where	nr_seq_registro	= nr_seq_registro_p;

c04 CURSOR FOR
SELECT	substr(obter_desc_tipo_divergencia(a.nr_seq_tipo),1,80) ds_tipo_diver,
	a.cd_material,
	substr(obter_desc_material(a.cd_material),1,255) ds_material,
	b.qt_inspecao
from	inspecao_divergencia a,
	inspecao_recebimento b
where	b.nr_seq_registro = nr_seq_registro_p
and	a.nr_seq_inspecao = b.nr_sequencia;


BEGIN

open C01;
loop
fetch C01 into
	nr_seq_regra_w,
	cd_perfil_ww,
	nm_usuarios_adic_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	count(*)
	into STRICT	qt_regra_usuario_w
	from	regra_envio_comunic_compra a,
		regra_envio_comunic_evento b
	where	a.nr_sequencia = b.nr_seq_regra
	and	b.nr_sequencia = nr_seq_regra_w;

	select	coalesce(ie_ci_lida,'N')
	into STRICT	ie_ci_lida_w
	from 	regra_envio_comunic_evento
	where 	nr_sequencia = nr_seq_regra_w;

	if (qt_regra_usuario_w > 0) then
		begin

		open C02;
		loop
		fetch C02 into
			cd_setor_regra_usuario_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			if (cd_setor_regra_usuario_w <> 0) and (obter_se_contido_char(cd_setor_regra_usuario_w, ds_setor_adicional_w) = 'N') then
				ds_setor_adicional_w := substr(ds_setor_adicional_w || cd_setor_regra_usuario_w || ',',1,2000);
			end if;
			end;
		end loop;
		close C02;

		nm_usuario_solicitante_w := '';
		ds_ordens_compra_w 	 := '';
		open C03;
		loop
		fetch C03 into
			nr_ordem_compra_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			if (nr_ordem_compra_w > 0) then

				if (obter_se_contido_char(nr_ordem_compra_w, ds_ordens_compra_w) = 'N') then
					if (ds_ordens_compra_w IS NOT NULL AND ds_ordens_compra_w::text <> '') then
						ds_ordens_compra_w := substr(ds_ordens_compra_w || ' - ' || nr_ordem_compra_w,1,2000);
					else
						ds_ordens_compra_w := nr_ordem_compra_w;
					end if;
				end if;

				select	substr(obter_usuario_pessoa(cd_pessoa_solicitante),1,15) usuario_solicitante,
					substr(obter_usuario_pessoa(cd_comprador),1,15) usuario_comprador
				into STRICT	nm_usuario_solicitante_w,
					nm_usuario_comprador_w
				from	ordem_compra
				where	nr_ordem_compra = nr_ordem_compra_w;

				select	count(*)
				into STRICT	qt_existe_envio_soc_w
				from	regra_envio_comunic_usu
				where	nr_seq_evento = nr_seq_regra_w
				and	ie_usuario = 'SOC';

				if (qt_existe_envio_soc_w > 0) and (obter_se_contido_char(nm_usuario_solicitante_w, nm_usuarios_solic_ordem_w) = 'N') then
					nm_usuarios_solic_ordem_w := substr(nm_usuarios_solic_ordem_w || nm_usuario_solicitante_w || ',',1,2000);
				end if;

				select	count(*)
				into STRICT	qt_existe_envio_soc_w
				from	regra_envio_comunic_usu
				where	nr_seq_evento = nr_seq_regra_w
				and	ie_usuario = 'UCO';

				if (qt_existe_envio_soc_w > 0) and (obter_se_contido_char(nm_usuario_comprador_w, nm_usuarios_solic_ordem_w) = 'N') then
					nm_usuarios_solic_ordem_w := substr(nm_usuarios_solic_ordem_w || nm_usuario_comprador_w || ',',1,2000);
				end if;
			end if;
			end;
		end loop;
		close C03;

		open c04;
		loop
		fetch c04 into
			ds_tipo_diver_w,
			cd_material_w,
			ds_material_w,
			qt_inspecao_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			begin
			if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
				/*#@CD_MATERIAL#@ - #@DS_MATERIAL#@ - Qtde.: #@QT_INSPECAO#@ Divergência: #@DS_DIVERGENCIA#@*/

				ds_lista_mat_w := substr(wheb_mensagem_pck.get_texto(297608,
							'CD_MATERIAL=' || cd_material_w || ';DS_MATERIAL=' || ds_material_w ||
							';QT_INSPECAO=' || qt_inspecao_w || ';DS_DIVERGENCIA=' || ds_tipo_diver_w),1,2000);
			end if;
			end;
		end loop;
		close c04;

		nm_usuario_destino_w	:= '';
		nm_usuario_destino_w	:= nm_usuarios_solic_ordem_w;
		ds_titulo_w		:= '';
		ds_comunic_w		:= '';

		select	max(substr(
				replace(a.ds_titulo,
					'@nr_registro',nr_seq_registro_p),1,80)) ds_titulo,
			max(substr(
				replace(
				replace(
				replace(a.ds_comunicacao,
					'@nr_registro',nr_seq_registro_p),
					'@lista_nr_ordem', ds_ordens_compra_w),
					'@lista_materiais', ds_lista_mat_w),1,4000)) ds_comunicacao
		into STRICT	ds_titulo_w,
			ds_comunic_w
		from	regra_envio_comunic_evento a
		where	a.nr_sequencia = nr_seq_regra_w;

		if (nm_usuarios_adic_w IS NOT NULL AND nm_usuarios_adic_w::text <> '') then
			nm_usuario_destino_w := substr(nm_usuario_destino_w || nm_usuarios_adic_w || ',',1,2000);
		end if;

		if (nm_usuario_destino_w IS NOT NULL AND nm_usuario_destino_w::text <> '') then
			select	nextval('comunic_interna_seq')
			into STRICT	nr_seq_comunic_w
			;

			if (cd_perfil_ww IS NOT NULL AND cd_perfil_ww::text <> '') then
				cd_perfil_ww := cd_perfil_ww ||',';
			end if;

			insert	into comunic_interna(
				cd_estab_destino,
				dt_comunicado,
				ds_titulo,
				ds_comunicado,
				nm_usuario,
				dt_atualizacao,
				ie_geral,
				nm_usuario_destino,
				nr_sequencia,
				ie_gerencial,
				nr_seq_classif,
				dt_liberacao,
				ds_perfil_adicional,
				ds_setor_adicional)
			values (	cd_estabelecimento_p,
				clock_timestamp(),
				ds_titulo_w,
				ds_comunic_w,
				nm_usuario_p,
				clock_timestamp(),
				'N',
				nm_usuario_destino_w,
				nr_seq_comunic_w,
				'N',
				nr_seq_classif_w,
				clock_timestamp(),
				cd_perfil_ww,
				ds_setor_adicional_w);

			/*Para que a comunicação seja gerada como lida ao próprio usuário */

			if (ie_ci_lida_w = 'S') then
				insert into comunic_interna_lida(
					nr_sequencia,
					nm_usuario,
					dt_atualizacao)
				values (	nr_seq_comunic_w,
					nm_usuario_p,
					clock_timestamp());
			end if;
		end if;

		end;
	end if;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE avisa_diverg_insp_recebimento ( nr_seq_registro_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

