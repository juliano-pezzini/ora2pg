-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE autorizacao_laudo ( nr_sequencia_p bigint, ie_tipo_p bigint, ie_forma_aprovacao_p text, qt_caracteres_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
ie_nao_liberado_w	smallint;
nm_medico_w		varchar(60);
ie_desfazer_aprov_w	varchar(01)	:= 'S';
ie_limpar_integracao_w	varchar(01)	:= 'N';
cd_medico_w		varchar(10);
cd_setor_atendimento_w	integer;
qt_regra_setor_aprov_w	bigint;
ie_desfazer_seg_aprov_w varchar(10);
ie_exige_seg_aprov_w	varchar(1);
dt_aprovacao_w 	timestamp;
dt_seg_aprovacao_w 	timestamp;
nr_seq_classif_w	bigint;
qt_regra_w		bigint;
ie_aborta_w		varchar(1);
ie_int_centricity_w	varchar(1);
nr_atendimento_w	bigint;

C01 CURSOR FOR 
	SELECT b.nr_seq_classif 
	from	proc_interno b,		 
		procedimento_paciente a		 
	where	a.nr_seq_proc_interno = b.nr_sequencia	 
	and	a.nr_laudo = nr_sequencia_p 
	and	exists ( SELECT 	1 
			from 	regra_proc_classif_laudo c 
			where	b.nr_seq_classif = c.nr_seq_classif );


BEGIN 
 
SELECT	coalesce(MAX(Obter_Valor_Param_Usuario(28,74,obter_perfil_ativo,nm_usuario_p,0)) , 'S') 
into STRICT	ie_desfazer_aprov_w
;
 
SELECT	coalesce(MAX(Obter_Valor_Param_Usuario(28,145,obter_perfil_ativo,nm_usuario_p,0)) , 'S') 
into STRICT	ie_limpar_integracao_w
;
 
select	count(*) 
into STRICT	ie_nao_liberado_w 
from 	laudo_paciente 
where	nr_sequencia	= nr_sequencia_p 
and	coalesce(dt_liberacao::text, '') = '';	
 
select	coalesce(max(ie_exige_seg_aprov), 'N'), 
	max(nr_atendimento) 
into STRICT	ie_exige_seg_aprov_w, 
	nr_atendimento_w 
from	laudo_paciente 
where	nr_sequencia = nr_sequencia_p;
 
select 	coalesce(max(dt_aprovacao), null), 
	coalesce(max(dt_seg_aprovacao), null)	 
into STRICT	dt_aprovacao_w, 
    dt_seg_aprovacao_w	 
from 	laudo_paciente 
where	(dt_aprovacao IS NOT NULL AND dt_aprovacao::text <> '') 
and	(dt_seg_aprovacao IS NOT NULL AND dt_seg_aprovacao::text <> '') 
and	nr_sequencia 	= nr_sequencia_p;
 
if (ie_tipo_p = 1) then 
	begin 
	if (ie_nao_liberado_w > 0) and 
		((ie_forma_aprovacao_p = 'S') or (ie_forma_aprovacao_p = 'D')) then 
		update	laudo_paciente 
		set	dt_seg_aprovacao	= clock_timestamp(), 
			dt_liberacao		= clock_timestamp(), 
			qt_caracteres		= qt_caracteres_p, 
			nm_usuario_seg_aprov	= nm_usuario_p, 
			nm_usuario		= nm_usuario_p, 
			nm_usuario_liberacao	= nm_usuario_p 
		where	nr_sequencia		= nr_sequencia_p;
		CALL gravar_log_status_laudo(nr_sequencia_p,3,nm_usuario_p);
		CALL envia_sms_email_laudo(nr_atendimento_w,null,nm_usuario_p);
	else 
		update	laudo_paciente 
		set	dt_seg_aprovacao	= clock_timestamp(), 
			qt_caracteres		= qt_caracteres_p, 
			nm_usuario_seg_aprov	= nm_usuario_p, 
			nm_usuario		= nm_usuario_p 
		where	nr_sequencia		= nr_sequencia_p;
		CALL gravar_log_status_laudo(nr_sequencia_p,3,nm_usuario_p);
	end if;
	end;
elsif (ie_tipo_p = 0) then 
	begin 
	 
	 
	 
	select	count(*) 
	into STRICT	qt_regra_w 
	from	regra_proc_classif_laudo;
	 
	if (qt_regra_w > 0) then 
		 
		open C01;
		loop 
		fetch C01 into	 
			nr_seq_classif_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			 
			select CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END  
			into STRICT	ie_aborta_w 
			from	regra_proc_classif_laudo 
			where	nr_seq_classif = nr_seq_classif_w 
			and	cd_medico = ( SELECT 	max(cd_pessoa_fisica) 
					   from	usuario 
					   where	nm_usuario = nm_usuario_p);
						 
			 
			if (ie_aborta_w = 'S') then 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(230526);				
			end if;
			 
			end;
		end loop;
		close C01;	
		 
	end if;
	 
	if (ie_nao_liberado_w > 0) and (ie_forma_aprovacao_p = 'A') or 
		(ie_forma_aprovacao_p = 'D' AND ie_exige_seg_aprov_w = 'N') then 
		update	laudo_paciente 
		set	dt_aprovacao		= clock_timestamp(), 
			dt_liberacao		= clock_timestamp(), 
			nm_usuario_liberacao	= nm_usuario_p, 
			qt_caracteres		= qt_caracteres_p, 
			nm_usuario_aprovacao	= nm_usuario_p, 
			nm_usuario		= nm_usuario_p 
		where	nr_sequencia		= nr_sequencia_p;
		CALL gravar_log_status_laudo(nr_sequencia_p,2,nm_usuario_p);
		CALL envia_sms_email_laudo(nr_atendimento_w,null,nm_usuario_p);
	else 
	 
		select	count(*) 
		into STRICT	qt_regra_setor_aprov_w 
		from	regra_laudo_seg_aprov;
		 
		if (qt_regra_setor_aprov_w > 0) then 
			 
			select	max(a.cd_setor_atendimento) 
			into STRICT	cd_setor_atendimento_w 
			from	prescr_procedimento a, laudo_paciente b 
			where	a.nr_prescricao = b.nr_prescricao 
			and	a.nr_sequencia = b.nr_seq_prescricao 
			and	b.nr_sequencia = nr_sequencia_p;
		 
			select	count(*) 
			into STRICT	qt_regra_setor_aprov_w 
			from	regra_laudo_seg_aprov 
			where	cd_setor_atendimento = cd_setor_atendimento_w;
			 
			if (qt_regra_setor_aprov_w > 0) then 
			 
				update	laudo_paciente 
				set	dt_aprovacao		= clock_timestamp(), 
					qt_caracteres		= qt_caracteres_p, 
					nm_usuario_aprovacao	= nm_usuario_p, 
					nm_usuario		= nm_usuario_p, 
					dt_seg_aprovacao	= clock_timestamp(), 
					nm_usuario_seg_aprov	= nm_usuario_p, 
					dt_liberacao		= clock_timestamp(), 
					nm_usuario_liberacao	= nm_usuario_p 
				where	nr_sequencia		= nr_sequencia_p;
				CALL gravar_log_status_laudo(nr_sequencia_p,2,nm_usuario_p);	
				CALL envia_sms_email_laudo(nr_atendimento_w,null,nm_usuario_p);
			else 
			 
				update	laudo_paciente 
				set	dt_aprovacao		= clock_timestamp(), 
					qt_caracteres		= qt_caracteres_p, 
					nm_usuario_aprovacao	= nm_usuario_p, 
					nm_usuario		= nm_usuario_p 
				where	nr_sequencia		= nr_sequencia_p;
				CALL gravar_log_status_laudo(nr_sequencia_p,2,nm_usuario_p);
				 
			end if;
		else 
		 
			update	laudo_paciente 
			set	dt_aprovacao		= clock_timestamp(), 
				qt_caracteres		= qt_caracteres_p, 
				nm_usuario_aprovacao	= nm_usuario_p, 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= nr_sequencia_p;
			CALL gravar_log_status_laudo(nr_sequencia_p,2,nm_usuario_p);
		end if;
	end if;
	end;
else 
	begin 
	 
		if (ie_desfazer_aprov_w = 'N') then 
 
			select	coalesce(max(cd_medico),'0') 
			into STRICT	cd_medico_w 
			from	med_laudo_cdi 
			where	nr_seq_laudo = nr_sequencia_p;
 
			if (cd_medico_w <> '0')	then 
 
				select	coalesce(max(substr(obter_nome_medico(cd_medico,'N'),1,60)), '0') 
				into STRICT	nm_medico_w 
				from	med_laudo_cdi 
				where	nr_seq_laudo = nr_sequencia_p;
				 
				--O médico #@NM_MEDICO#@ já inseriu uma observação referente a este laudo! Favor entrar em contato com o médico!				 
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(213533, 'NM_MEDICO='|| nm_medico_w);
			end if;
		end if;
 
		ie_desfazer_seg_aprov_w := obter_param_usuario(28, 267, Obter_perfil_Ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_desfazer_seg_aprov_w);
		 
		if 	(((ie_forma_aprovacao_p = 'S') or (ie_forma_aprovacao_p = 'D')) and (ie_desfazer_seg_aprov_w = 'S') and (dt_aprovacao_w IS NOT NULL AND dt_aprovacao_w::text <> '') and (dt_seg_aprovacao_w IS NOT NULL AND dt_seg_aprovacao_w::text <> '')) then	 
			 
			update	laudo_paciente 
			set	dt_seg_aprovacao	 = NULL, 
				nm_usuario_seg_aprov	 = NULL, 
				dt_liberacao 		 = NULL, 
				nm_usuario_liberacao	 = NULL 
			where	nr_sequencia		= nr_sequencia_p;
			CALL gravar_log_status_laudo(nr_sequencia_p,7,nm_usuario_p);
		else	 
			update	laudo_paciente 
			set	dt_aprovacao		 = NULL, 
				dt_integracao		= CASE WHEN ie_limpar_integracao_w='S' THEN null  ELSE dt_integracao END , 
				dt_liberacao		 = NULL, 
				nm_usuario_liberacao	 = NULL, 
				dt_envelopado		 = NULL, 
				nm_usuario_aprovacao	 = NULL, 
				dt_seg_aprovacao	 = NULL, 
				nm_usuario_seg_aprov	 = NULL, 
				dt_desaprovacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= nr_sequencia_p;
			CALL gravar_log_status_laudo(nr_sequencia_p,5,nm_usuario_p);
		end if;
	end;
end if;
 
 
select	CASE WHEN coalesce(max(ie_situacao),'I')='I' THEN 'N'  ELSE 'S' END  
into STRICT	ie_int_centricity_w 
from	cliente_integracao 
where	nr_seq_inf_integracao = 585;
 
if (ie_int_centricity_w = 'S') then 
 
	select 	dt_liberacao 
	into STRICT	dt_aprovacao_w 
	from 	laudo_paciente 
	where	nr_sequencia = nr_sequencia_p;
 
	if (dt_aprovacao_w IS NOT NULL AND dt_aprovacao_w::text <> '') then 
		CALL quebra_linha_hl7(nr_sequencia_p, nm_usuario_p);
	end if;	
end if;
 
commit;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE autorizacao_laudo ( nr_sequencia_p bigint, ie_tipo_p bigint, ie_forma_aprovacao_p text, qt_caracteres_p bigint, nm_usuario_p text) FROM PUBLIC;

