-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_taxa_atend_conta ( nr_seq_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
nr_seq_segurado_w		pls_conta.nr_seq_segurado%type;
vl_base_w			pls_conta_proc.vl_procedimento%type;
vl_liberado_w			pls_conta_proc.vl_liberado%type;
nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
dt_autorizacao_w		timestamp;
tx_atendimento_w		pls_taxa_atendimento.tx_atendimento%type;
ie_controle_taxa_atend_w	pls_parametros.ie_controle_taxa_atend%type;
ie_cobrar_mensalidade_w		pls_conta_val_atend.ie_cobrar_mensalidade%type;

type t_number_table is table of bigint index by integer;
type t_date_table is table of timestamp index by integer;
nr_seq_conta_tw			t_number_table;
nr_seq_conta_proc_tw		t_number_table;
nr_seq_conta_mat_tw		t_number_table;
nr_seq_protocolo_tw		t_number_table;
nr_seq_segurado_tw		t_number_table;
vl_base_tw			t_number_table;
vl_liberado_tw			t_number_table;
dt_referencia_tw		t_date_table;
i_sequencia_w			integer;
nr_seq_congenere_w		pls_protocolo_conta.nr_seq_congenere%type;
ie_tipo_despesa_w		pls_conta_proc.ie_tipo_despesa%type;
qt_procedimento_w		pls_conta_proc.qt_procedimento%type;
vl_proc_copartic_w		pls_conta_proc.vl_proc_copartic%type;
tx_intercambio_w		pls_conta_proc.tx_intercambio%type;
nr_seq_grau_partic_w		pls_conta.nr_seq_grau_partic%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia		nr_seq_conta,
		b.nr_sequencia		nr_seq_conta_proc,
		null			nr_seq_conta_mat,
		a.nr_seq_protocolo	nr_seq_protocolo,
		b.vl_liberado,
		a.nr_seq_segurado,
		a.nr_seq_prestador_exec,
		c.nr_seq_congenere,
		coalesce(a.dt_atendimento_referencia, coalesce(a.dt_autorizacao, clock_timestamp())),
		b.ie_tipo_despesa,
		b.qt_procedimento,
		b.vl_proc_copartic,
		b.tx_intercambio,
		a.nr_seq_grau_partic
	from	pls_conta		a,
		pls_conta_proc 		b,
		pls_protocolo_conta 	c
	where	a.nr_seq_protocolo	= c.nr_sequencia
	and	b.nr_seq_conta 		= a.nr_sequencia
	and	a.nr_sequencia  	= nr_seq_conta_p
	
union all

	SELECT	a.nr_sequencia		nr_seq_conta,
		null			nr_seq_conta_proc,
		b.nr_sequencia		nr_seq_conta_mat,
		a.nr_seq_protocolo	nr_seq_protocolo,
		b.vl_liberado,
		a.nr_seq_segurado,
		a.nr_seq_prestador_exec,
		c.nr_seq_congenere,
		coalesce(a.dt_atendimento_referencia, coalesce(a.dt_autorizacao, clock_timestamp())),
		null,
		null,
		null,
		null,
		null
	from	pls_conta		a,
		pls_conta_mat		b,
		pls_protocolo_conta 	c
	where	a.nr_seq_protocolo	= c.nr_sequencia
	and	b.nr_seq_conta		= a.nr_sequencia
	and	a.nr_sequencia		= nr_seq_conta_p;


BEGIN

select	coalesce(max(ie_controle_taxa_atend),'N')
into STRICT	ie_controle_taxa_atend_w
from	pls_parametros
where	cd_estabelecimento	= wheb_usuario_pck.get_cd_estabelecimento;

if (ie_controle_taxa_atend_w = 'S') then
	ie_cobrar_mensalidade_w	:= 'P'; -- Pendente de liberação
else
	ie_cobrar_mensalidade_w	:= 'S'; -- Liberado para a mensalidade
end if;

i_sequencia_w := 0;
open C01;
loop
fetch C01 into
	nr_seq_conta_w,
	nr_seq_conta_proc_w,
	nr_seq_conta_mat_w,
	nr_seq_protocolo_w,
	vl_base_w,
	nr_seq_segurado_w,
	nr_seq_prestador_exec_w,
	nr_seq_congenere_w,
	dt_autorizacao_w,
	ie_tipo_despesa_w,
	qt_procedimento_w,
	vl_proc_copartic_w,
	tx_intercambio_w,
	nr_seq_grau_partic_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (coalesce(nr_seq_congenere_w::text, '') = '') then
		tx_atendimento_w := pls_obter_taxa_atend_prest(nr_seq_prestador_exec_w, null, nr_seq_segurado_w, dt_autorizacao_w, nr_seq_grau_partic_w);
	else
		tx_atendimento_w := pls_obter_taxa_atend_prest(null, nr_seq_congenere_w, nr_seq_segurado_w, dt_autorizacao_w, nr_seq_grau_partic_w);
	end if;

	if (ie_tipo_despesa_w = '1' and vl_proc_copartic_w <> 0) then
		vl_base_w := (vl_proc_copartic_w * qt_procedimento_w) + ((tx_intercambio_w / 100) * (vl_proc_copartic_w * qt_procedimento_w));
	end if;

	if (tx_atendimento_w > 0) then
		i_sequencia_w := i_sequencia_w + 1;
		nr_seq_conta_tw(i_sequencia_w)		:= nr_seq_conta_w;
		nr_seq_conta_proc_tw(i_sequencia_w)	:= nr_seq_conta_proc_w;
		nr_seq_conta_mat_tw(i_sequencia_w)	:= nr_seq_conta_mat_w;
		nr_seq_protocolo_tw(i_sequencia_w)	:= nr_seq_protocolo_w;
		nr_seq_segurado_tw(i_sequencia_w)	:= nr_seq_segurado_w;
		vl_base_tw(i_sequencia_w)		:= vl_base_w;
		vl_liberado_tw(i_sequencia_w)		:= (tx_atendimento_w /100) * vl_base_w;
		dt_referencia_tw(i_sequencia_w)		:= trunc(dt_autorizacao_w,'month');
	end if;
	end;
end loop;
close C01;

if (nr_seq_segurado_tw.count > 0) then
	forall i in nr_seq_segurado_tw.first..nr_seq_segurado_tw.last
		insert into pls_conta_val_atend(	nr_sequencia,			dt_atualizacao,		nm_usuario,
				nr_seq_conta_proc,		nr_seq_conta_mat,	vl_base,
				vl_liberado,			nr_seq_segurado,	dt_mes_referencia,
				nr_seq_conta,			nr_seq_protocolo,	ie_cobrar_mensalidade
			)
		values (	nextval('pls_conta_val_atend_seq'),	clock_timestamp(),	nm_usuario_p,
				nr_seq_conta_proc_tw(i),	nr_seq_conta_mat_tw(i),	vl_base_tw(i),
				vl_liberado_tw(i),		nr_seq_segurado_tw(i),	dt_referencia_tw(i),
				nr_seq_conta_tw(i),		nr_seq_protocolo_tw(i),	ie_cobrar_mensalidade_w
			);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_taxa_atend_conta ( nr_seq_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

