-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE verifica_dif_saldo ( dt_mesano_referencia_p timestamp, ie_atualiza_p bigint) AS $body$
DECLARE


cd_estabelecimento_w		smallint	:= 0;
cd_local_estoque_w		smallint	:= 0;
cd_material_estoque_w		integer	:= 0;
cd_operacao_estoque_w		smallint	:= 0;
ie_entrada_saida_w			varchar(1);
qt_estoque_w			double precision;
dt_mesano_referencia_w		timestamp;
dt_mesano_anterior_w		timestamp;
qt_entrada_w			double precision;
qt_saida_w			double precision;
qt_saldo_estoque_w		double precision;
qt_saldo_anterior_w			double precision;
qt_dif_w				double precision;
qt_emprestimo_w			double precision;
qt_estoque_lote_w		double precision;

ie_atualiza_w			bigint;
ds_retorno_w			varchar(40);
qt_existe_w			integer;


c00 CURSOR FOR
SELECT distinct
	a.cd_estabelecimento,
	a.cd_material_estoque,
	a.cd_local_estoque
from 	material b,
	operacao_estoque o,
	movimento_estoque a
where	o.cd_operacao_estoque	= a.cd_operacao_estoque
and	a.cd_material_estoque	= b.cd_material
and	a.dt_mesano_referencia 	= dt_mesano_referencia_w
and	o.ie_atualiza_estoque	= 'S'
and	coalesce(b.ie_consignado, '0') = '0'

union

select distinct
	a.cd_estabelecimento,
	a.cd_material,
	a.cd_local_estoque
from 	material b,
	saldo_estoque a
where	a.dt_mesano_referencia	= dt_mesano_referencia_w
and	a.cd_material		= b.cd_material
and	coalesce(b.ie_consignado, '0') = '0';

c01 CURSOR FOR
SELECT 	CASE WHEN a.cd_acao=1 THEN a.qt_estoque  ELSE a.qt_estoque * -1 END ,
	a.cd_operacao_estoque,
	b.ie_entrada_saida
from	operacao_estoque b,
	movimento_estoque a
where	a.dt_mesano_referencia	= dt_mesano_referencia_w
and	a.cd_material_estoque	= cd_material_estoque_w
and	a.cd_local_estoque		= cd_local_estoque_w
and	a.cd_estabelecimento	= cd_estabelecimento_w
and	a.cd_operacao_estoque	= b.cd_operacao_estoque
and	(a.dt_processo IS NOT NULL AND a.dt_processo::text <> '')
and	b.ie_atualiza_estoque	= 'S'
and	coalesce(b.ie_consignado, '0') = '0';

C02 CURSOR FOR
SELECT	a.cd_estabelecimento,
	a.cd_material,
	a.cd_local_estoque,
	a.qt_estoque,
	coalesce(sum(b.qt_estoque),0) qt_estoque_lote
FROM saldo_estoque a
LEFT OUTER JOIN saldo_estoque_lote b ON (a.cd_estabelecimento = b.cd_estabelecimento AND a.cd_local_estoque = b.cd_local_estoque AND a.dt_mesano_referencia = b.dt_mesano_referencia AND a.cd_material = b.cd_material)
WHERE a.dt_mesano_referencia = dt_mesano_referencia_w and exists ( select	1
		from	material_estab x
		where	x.cd_estabelecimento = a.cd_estabelecimento
		and	x.cd_material = a.cd_material
		and	x.ie_Estoque_lote = 'S') group by a.cd_estabelecimento,
	a.cd_material,
	a.cd_local_estoque,
	a.qt_estoque;


BEGIN
dt_mesano_referencia_w	:= pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0);
dt_mesano_anterior_w  	:= pkg_date_utils.add_month(dt_mesano_referencia_w, -1,0);
ds_retorno_w := obter_valor_dinamico('Truncate table w_saldo_estoque', ds_retorno_w);

select	min(nr_movimento_estoque)
into STRICT	ie_atualiza_w
from 	movimento_estoque
where	dt_mesano_referencia 	= dt_mesano_referencia_w;

if (ie_atualiza_p = 1557) then
	open C02;
	loop
	fetch C02 into
		cd_estabelecimento_w,
		cd_material_estoque_w,
		cd_local_estoque_w,
		qt_saldo_estoque_w,
		qt_estoque_lote_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		select	coalesce(sum(CASE WHEN y.ie_tipo='E' THEN  qt_material  ELSE qt_material*-1 END ),0)
		into STRICT	qt_emprestimo_w
		from	emprestimo y,
			emprestimo_material x,
			material z
		where	y.nr_emprestimo = x.nr_emprestimo
		and	z.cd_material = x.cd_material
		and	z.cd_material_estoque = cd_material_estoque_w
		and	y.cd_local_estoque = cd_local_estoque_w
		and	x.qt_material > 0
		and	y.ie_situacao = 'A';

		qt_dif_w	:=	qt_saldo_estoque_w + qt_emprestimo_w - qt_estoque_lote_w;

		if (qt_dif_w <> 0) then
			insert into w_saldo_estoque(
				cd_estabelecimento,
				cd_local_estoque,
				cd_material,
				dt_mesano_referencia,
				qt_estoque_atual,
				qt_estoque_anterior,
				qt_entrada,
				qt_saida,
				qt_diferenca,
				qt_emprestimo,
				qt_estoque_lote)
			values (	cd_estabelecimento_w,
				cd_local_estoque_w,
				cd_material_estoque_w,
				dt_mesano_referencia_w,
				qt_saldo_estoque_w,
				0,
				0,
				0,
				qt_dif_w,
				qt_emprestimo_w,
				qt_estoque_lote_w);
		end if;
		end;
	end loop;
	close C02;
else
	open c00;
	loop
		begin
		fetch c00 into
			cd_estabelecimento_w,
			cd_material_estoque_w,
			cd_local_estoque_w;
		EXIT WHEN NOT FOUND; /* apply on c00 */
			begin
			qt_entrada_w	:= 0;
			qt_saida_w		:= 0;
			begin
			select	qt_estoque
			into STRICT	qt_saldo_estoque_w
			from	saldo_estoque
			where	cd_estabelecimento 	= cd_estabelecimento_w
			and	cd_local_estoque 	 	= cd_local_estoque_w
			and	cd_material		= cd_material_estoque_w
			and	dt_mesano_referencia	= dt_mesano_referencia_w;
			exception
				when others	 then
					qt_saldo_estoque_w	:= 0;
			end;
			begin
			select	qt_estoque
			into STRICT	qt_saldo_anterior_w
			from	saldo_estoque
			where	cd_estabelecimento 	= cd_estabelecimento_w
			and	cd_local_estoque 	 	= cd_local_estoque_w
			and	cd_material		= cd_material_estoque_w
			and	dt_mesano_referencia	= dt_mesano_anterior_w;
			exception
				when others	 then
					qt_saldo_anterior_w	:= 0;
			end;

			open c01;
			loop
			fetch c01 into
				qt_estoque_w,
				cd_operacao_estoque_w,
				ie_entrada_saida_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
				if (ie_entrada_saida_w = 'S') then
					qt_saida_w		:= qt_saida_w + qt_estoque_w;
				else
					qt_entrada_w	:= qt_entrada_w + qt_estoque_w;
				end if;
				end;
			end loop;
			close c01;

			qt_dif_w := (qt_saldo_estoque_w - (qt_saldo_anterior_w + qt_entrada_w - qt_saida_w));

			if (qt_dif_w <> 0) then
				begin
				insert into w_saldo_estoque(
					cd_estabelecimento,
					cd_local_estoque,
					cd_material,
					dt_mesano_referencia,
					qt_estoque_atual,
					qt_estoque_anterior,
					qt_entrada,
					qt_saida,
					qt_diferenca)
				values (
					cd_estabelecimento_w,
					cd_local_estoque_w,
					cd_material_estoque_w,
					dt_mesano_referencia_w,
					qt_saldo_estoque_w,
					qt_saldo_anterior_w,
					qt_entrada_w,
					qt_saida_w,
					qt_dif_w);

				if (ie_atualiza_p = 1555) then
					update	saldo_estoque
					set	qt_estoque = qt_estoque - qt_dif_w
					where	cd_estabelecimento 	= cd_estabelecimento_w
					and	cd_local_estoque 	= cd_local_estoque_w
					and	cd_material          = cd_material_estoque_w
					and	dt_mesano_referencia = dt_mesano_referencia_w;
				end if;

				if (ie_atualiza_p = 1556) then
					select	count(*)
					into STRICT	qt_existe_w
					from	saldo_estoque
					where	cd_estabelecimento 	= cd_estabelecimento_w
					and	cd_local_estoque 	= cd_local_estoque_w
				and	cd_material         	= cd_material_estoque_w
					and	dt_mesano_referencia	= dt_mesano_referencia_w;

					if (qt_existe_w = 0) then
						insert into saldo_estoque(
							cd_estabelecimento,
							cd_local_estoque,
							cd_material,
							dt_mesano_referencia,
							qt_estoque,
							vl_estoque,
							qt_reservada_requisicao,
							qt_reservada,
							dt_atualizacao,
							nm_usuario,
							vl_custo_medio,
							vl_preco_ult_compra,
							dt_ult_compra,
							ie_status_valorizacao,
							ie_bloqueio_inventario)
						values (cd_estabelecimento_w,
							cd_local_estoque_w,
							cd_material_estoque_w,
							dt_mesano_referencia_w,
							qt_dif_w,
							0,
							0,
							0,
							clock_timestamp(),
							'dif_saldo',
							0,
							null,
							null,
							'N',
							'N');
					end if;
				end if;

				end;
			end if;
			end;
		end;
	end loop;
	close c00;
end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE verifica_dif_saldo ( dt_mesano_referencia_p timestamp, ie_atualiza_p bigint) FROM PUBLIC;

