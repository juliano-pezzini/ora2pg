-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_obter_entrega_laudo ( nr_seq_ageint_p bigint, nr_seq_proc_interno_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nm_usuario_p text, nr_seq_agenda_exame_p bigint, dt_entrega_p INOUT timestamp, nr_seq_item_p bigint) AS $body$
DECLARE

 
ie_existe_regra_w	integer;

cd_estabelecimento_w	smallint;
ie_tipo_atendimento_w	smallint;
cd_convenio_w		integer;
dt_entrada_w		timestamp;
dt_prescricao_w		timestamp;
cd_setor_prescricao_w	integer;
cd_procedencia_w	integer;

cd_area_proc_w		bigint;
cd_especial_proc_w	bigint;
cd_grupo_proc_w		bigint;

qt_dia_w		regra_entrega_laudo.qt_dia%type := 0;
qt_hora_w		smallint := 0;
qt_hora_adicional_w	smallint := 0;
ds_hora_fixa_w		varchar(2);
ds_hora_inicial_w	varchar(2);
ds_hora_final_w		varchar(2);
ie_feriado_w		varchar(1);
ie_sabado_w		varchar(1);
ie_domingo_w		varchar(1);
nr_atendimento_w	bigint;

dt_entrega_w		timestamp := clock_timestamp();
dt_entrega_calc_w	timestamp;
dt_entrega_ww		timestamp;

qt_dia_aux_w		regra_entrega_laudo.qt_dia%type;
dt_entrega_aux_w	timestamp;
dt_entrega_prescr_w	timestamp;
qt_hora_prescr_w	smallint;
ds_hora_fixa_prescr_w	varchar(2);
i			integer;
ie_tipo_convenio_w	smallint;
cd_perfil_w		integer;
ie_adiciona_dia_w		varchar(1);
ie_adiciona_dia_feriado_w	varchar(1);
ie_adiciona_dia_domingo_w	varchar(1);
ie_adiciona_dia_sabado_w	varchar(1);
ie_fim_semana_ant_w		varchar(1);

cd_Setor_atendimento_w	integer;
dt_agendamento_w	timestamp;

ie_dia_ok_w		boolean := False;
nr_seq_agenda_cons_w	agenda_integrada_item.nr_seq_agenda_cons%type;
nr_seq_agenda_exame_w	agenda_integrada_item.nr_seq_agenda_exame%type;

C01 CURSOR FOR 
	SELECT	coalesce(qt_dia,0), 
		coalesce(qt_hora,0), 
		coalesce(qt_hora_adicional,0), 
		ds_hora_fixa, 
		ds_hora_inicial, 
		ds_hora_final, 
		ie_feriado, 
		ie_sabado, 
		ie_domingo, 
		coalesce(ie_adiciona_dia,'S'), 
		coalesce(qt_hora_prescr,0), 
		ds_hora_fixa_prescr, 
		coalesce(ie_adiciona_dia_feriado,'N'), 
		coalesce(ie_adiciona_dia_domingo,'N'), 
		coalesce(ie_adiciona_dia_sabado,'N') 
	from	regra_entrega_laudo 
	where	coalesce(cd_area_procedimento, cd_area_proc_w)		= cd_area_proc_w 
	and	coalesce(cd_especialidade, cd_especial_proc_w)		= cd_especial_proc_w 
	and	coalesce(cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w 
	and	coalesce(cd_procedimento, coalesce(cd_procedimento_p,0))		= coalesce(cd_procedimento_p,0) 
	and	coalesce(ie_origem_proced, coalesce(ie_origem_proced_p,0))	= coalesce(ie_origem_proced_p,0) 
	and	coalesce(nr_seq_proc_interno,coalesce(nr_seq_proc_interno_p,0))	= coalesce(nr_seq_proc_interno_p,0) 
	and	coalesce(cd_setor_atendimento, coalesce(cd_setor_atendimento_w,0))= coalesce(cd_setor_atendimento_w,0) 
	and	coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_w,0))	= coalesce(ie_tipo_atendimento_w,0) 
	and	coalesce(ie_tipo_convenio, ie_tipo_convenio_w)		= ie_tipo_convenio_w 
	and	coalesce(cd_estabelecimento, cd_estabelecimento_w)		= cd_estabelecimento_w 
	--and	nvl(cd_procedencia, nvl(cd_procedencia_w,0))				= nvl(cd_procedencia_w,0) 
	and	coalesce(cd_convenio, coalesce(cd_convenio_w,0))			= coalesce(cd_convenio_w,0) 
	and	coalesce(cd_perfil, coalesce(cd_perfil_w,0))			= coalesce(cd_perfil_w,0) 
	--and	nvl(ie_tipo_Regra, 'P')						= 'A' 
	and	coalesce(ie_tipo_Regra, 'P')					in ('A','AM') 
	order by	coalesce(nr_seq_proc_interno,0), 
			coalesce(cd_procedimento,0), 
			coalesce(cd_grupo_proc,0), 
			coalesce(cd_especialidade,0), 
			coalesce(cd_area_procedimento,0), 
			coalesce(ie_tipo_atendimento,0), 
			coalesce(cd_convenio,0), 
			coalesce(ie_tipo_convenio, 0);

BEGIN
 
/* Verifica se existe regras cadastradas, se n√£o existir sai da procedure */
 
select	count(*) 
into STRICT	ie_existe_regra_w 
from	regra_entrega_laudo 

where	coalesce(ie_tipo_Regra, 'P')	in ('A','AM');
 
select	obter_perfil_ativo 
into STRICT	cd_perfil_w
;
 
select	max(nr_seq_agenda_cons), 
		max(nr_seq_agenda_exame) 
into STRICT	nr_seq_agenda_cons_w, 
		nr_seq_agenda_exame_w	 
from	agenda_integrada_item 
where	nr_sequencia = nr_seq_item_p;
 
if (nr_seq_item_p IS NOT NULL AND nr_seq_item_p::text <> '') then 
 
	select	max(b.cd_estabelecimento), 
			max(a.cd_convenio),     
			max(a.ie_tipo_atendimento), 
			max(obter_tipo_convenio(a.cd_convenio))  
	into STRICT	cd_estabelecimento_w, 
			cd_convenio_w, 
			ie_tipo_atendimento_w, 
			ie_tipo_convenio_w 
	from	agenda_paciente a, 
			agenda b 
	where 	b.cd_agenda = a.cd_agenda 
	and		b.cd_tipo_agenda = 2 
	and		a.nr_sequencia	= nr_seq_agenda_exame_w;
 
else 
	select	max(cd_estabelecimento), 
			max(cd_convenio),     
			max(ie_tipo_atendimento), 
			max(obter_tipo_convenio(cd_convenio))  
	into STRICT	cd_estabelecimento_w, 
			cd_convenio_w, 
			ie_tipo_atendimento_w, 
			ie_tipo_convenio_w 
	from	agenda_integrada 
	where 	nr_sequencia	= nr_seq_ageint_p;
end if;
 
select	max(cd_setor_atendimento), 
		max(hr_inicio) 
into STRICT	cd_Setor_atendimento_w, 
		dt_agendamento_w 
from	agenda_paciente 
where	nr_sequencia	= nr_seq_agenda_exame_p;
 
if (ie_existe_regra_w <> 0) then 
 
	if (cd_procedimento_p > 0) then 
		begin 
		select	cd_area_procedimento, 
			cd_especialidade, 
			cd_grupo_proc 
		into STRICT	cd_area_proc_w, 
			cd_especial_proc_w, 
			cd_grupo_proc_w 
		from	estrutura_procedimento_v 
		where	cd_procedimento	= cd_procedimento_p 
		and	ie_origem_proced	= ie_origem_proced_p;
		exception 
			when no_data_found then 
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(279681, 'CD_PROCEDIMENTO_P=' || cd_procedimento_p || 
										';IE_ORIGEM_PROC_P=' || ie_origem_proced_p);
		end;	
	end if;
		 
	open C01;
	loop 
		fetch C01 into	 
			qt_dia_w, 
			qt_hora_w, 
			qt_hora_adicional_w, 
			ds_hora_fixa_w, 
			ds_hora_inicial_w, 
			ds_hora_final_w, 
			ie_feriado_w, 
			ie_sabado_w, 
			ie_domingo_w, 
			ie_adiciona_dia_w, 
			qt_hora_prescr_w, 
			ds_hora_fixa_prescr_w,		 
			ie_adiciona_dia_feriado_w, 
			ie_adiciona_dia_domingo_w,			 
			ie_adiciona_dia_sabado_w;		
		EXIT WHEN NOT FOUND; /* apply on C01 */
 
	end loop;
	close C01;
	dt_agendamento_w:= dt_agendamento_w + (qt_hora_adicional_w/24);
	dt_entrega_w	:= dt_agendamento_w;
 
	if (coalesce(qt_dia_w::text, '') = '') then 
		qt_dia_w	:= 0;
	end if;
	qt_dia_aux_w	:= qt_dia_w;
 
 
	if (qt_dia_w > 0) and (dt_entrega_w = dt_agendamento_w) then 
 
		if (pkg_date_utils.get_WeekDay(dt_entrega_w) = 7) and (ie_adiciona_dia_sabado_w = 'S') then 
			qt_dia_aux_w	:= qt_dia_aux_w + 1;
		end if;
		if (pkg_date_utils.get_WeekDay(dt_entrega_w) = 1) and (ie_adiciona_dia_domingo_w = 'S') then 
			qt_dia_aux_w	:= qt_dia_aux_w + 1;
		end if;
		if (obter_se_feriado(cd_estabelecimento_w, dt_entrega_w) = 1) and (ie_adiciona_dia_feriado_w = 'S') then 
			qt_dia_aux_w	:= qt_dia_aux_w + 1;
		end if;
		 
	end if;
 
	dt_entrega_calc_w	:= dt_entrega_w;
 
	i := 1;
	while(qt_dia_w > 0) loop	 
		 
		if (pkg_date_utils.get_WeekDay(dt_entrega_w + i) = 7) and (ie_sabado_w = 'N') then 
			ie_fim_semana_ant_w	:= 'S';
			qt_dia_aux_w	:= qt_dia_aux_w + 1;
		elsif (pkg_date_utils.get_WeekDay(dt_entrega_w + i) = 1) and (ie_domingo_w = 'N') then 
			ie_fim_semana_ant_w	:= 'S';
			qt_dia_aux_w	:= qt_dia_aux_w + 1;		
		elsif (obter_se_feriado(cd_estabelecimento_w, dt_entrega_w + i) = 1) and (ie_feriado_w = 'N') then 
			qt_dia_aux_w	:= qt_dia_aux_w + 1;
		else 
			qt_dia_w := qt_dia_w - 1;
		end if;		
		 
		i := i + 1;
		 
	end loop;
	 
	dt_entrega_w	:= dt_agendamento_w + qt_dia_aux_w + (qt_hora_w/24);
		 
	if	((dt_entrega_w < trunc(dt_entrega_w) + ((ds_hora_inicial_w)::numeric  / 24)) or	/*	Oraci em 09/08/2008 OS97854 */
 
		(ie_adiciona_dia_w = 'N')) then 
		dt_entrega_w := trunc(dt_entrega_w) + ((ds_hora_inicial_w)::numeric  / 24);
	end if;
	if	(dt_entrega_w > trunc(dt_entrega_w) + ((ds_hora_final_w)::numeric  / 24)) and (ie_adiciona_dia_w = 'S') then 
		dt_entrega_w := trunc(dt_entrega_w) + 1 + ((ds_hora_inicial_w)::numeric  / 24);
	end if;
	 
	if (ds_hora_fixa_w IS NOT NULL AND ds_hora_fixa_w::text <> '') then 
		dt_entrega_w := trunc(dt_entrega_w) + ((ds_hora_fixa_w)::numeric  / 24);
	end if;
		 
	while not ie_dia_ok_w loop 
	 
		ie_dia_ok_w := True;
		 
		if (ie_sabado_w = 'N') and (pkg_date_utils.get_WeekDay(dt_entrega_w) = 7) then 
			dt_entrega_w := dt_entrega_w + 1;
			ie_dia_ok_w := False;
		end if;
 
		if (ie_domingo_w = 'N') and (pkg_date_utils.get_WeekDay(dt_entrega_w) = 1) then 
			dt_entrega_w := dt_entrega_w + 1;
			ie_dia_ok_w := False;
		end if;
		if (ie_feriado_w = 'N') and (obter_se_feriado(cd_estabelecimento_w, dt_entrega_w) = 1) then 
			dt_entrega_w := dt_entrega_w + 1;
			ie_dia_ok_w := False;
		end if;
	end loop;
 
	ie_dia_ok_w := False;
 
	DT_ENTREGA_P := dt_entrega_w;
end if;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_obter_entrega_laudo ( nr_seq_ageint_p bigint, nr_seq_proc_interno_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nm_usuario_p text, nr_seq_agenda_exame_p bigint, dt_entrega_p INOUT timestamp, nr_seq_item_p bigint) FROM PUBLIC;

