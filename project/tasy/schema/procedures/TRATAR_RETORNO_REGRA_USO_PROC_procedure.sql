-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tratar_retorno_regra_uso_proc (nr_atendimento_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint, cd_plano_convenio_p text, dt_procedimento_p timestamp, cd_medico_resp_p bigint, nr_seq_atepacu_p bigint, cd_motivo_exc_conta_p bigint, nm_usuario_p text, cd_categoria_p INOUT text, cd_convenio_p INOUT bigint, nr_interno_conta_p INOUT bigint, qt_lancamento_p INOUT bigint, ds_abort_p INOUT text, ie_valor_informado_p INOUT text, vl_procedimento_p INOUT bigint, nr_sequencia_p bigint default null) AS $body$
DECLARE
	
	
	
ie_acao_excesso_w	convenio_regra_qtde_mat.ie_acao_excesso%type;
qt_excedida_w		convenio_regra_qtde_mat.qt_permitida%type;
ds_erro_uso_w		varchar(255);
nr_seq_excedido_w	material_atend_paciente.nr_sequencia%type;
nr_conta_w		material_atend_paciente.nr_interno_conta%type;
ds_texto_w		varchar(255);
cd_convenio_glosa_w	convenio.cd_convenio_glosa%type;
cd_categoria_glosa_w	convenio.cd_categoria_glosa%type;
cd_convenio_excesso_w	procedimento_paciente.cd_convenio%type;
cd_categoria_excesso_w	procedimento_paciente.cd_categoria%type;


BEGIN	
	SELECT * FROM obter_regra_qtde_proc_exec(nr_atendimento_p, cd_procedimento_p, ie_origem_proced_p, qt_lancamento_p, dt_procedimento_p, cd_medico_resp_p, ie_acao_excesso_w, qt_excedida_w, ds_erro_uso_w, cd_convenio_excesso_w, cd_categoria_excesso_w, null, cd_categoria_p, cd_plano_convenio_p, nr_interno_conta_p, null, null, cd_setor_atendimento_p, null) INTO STRICT ie_acao_excesso_w, qt_excedida_w, ds_erro_uso_w, cd_convenio_excesso_w, cd_categoria_excesso_w;			
				
	if (ie_acao_excesso_w = 'E') then
		if (qt_excedida_w   > 0) then
			if 	((qt_lancamento_p - qt_excedida_w) > 0) then

				nr_seq_excedido_w := inserir_procedimento_paciente(cd_procedimento_p, qt_excedida_w, null, null, ie_origem_proced_p, cd_setor_atendimento_p, nr_atendimento_p, cd_estabelecimento_p, nm_usuario_p, null, 'S', cd_medico_resp_p, nr_seq_atepacu_p, dt_procedimento_p, cd_convenio_p, cd_categoria_p, nr_seq_excedido_w);
				CALL atualiza_preco_procedimento(nr_seq_excedido_w, cd_convenio_p, nm_usuario_p);
				
				CALL ajustar_conta_vazia(nr_atendimento_p, nm_usuario_p);
				qt_lancamento_p := qt_lancamento_p - qt_excedida_w;
				
			elsif	((qt_lancamento_p - qt_excedida_w) = 0) then
				nr_seq_excedido_w	:= nr_sequencia_p;
				nr_interno_conta_p	:= null;
				ds_abort_p		:= wheb_mensagem_pck.get_texto(152722);
			end if;
			
			select	max(nr_interno_conta)
			into STRICT	nr_conta_w
			from	procedimento_paciente
			where	nr_sequencia = nr_seq_excedido_w;
			--Excluido pela regra de uso da funcao Cadastro de Convenios
			ds_texto_w := substr(wheb_mensagem_pck.get_texto(306744),1,255);
			CALL excluir_matproc_conta(nr_seq_excedido_w, nr_conta_w, coalesce(cd_motivo_exc_conta_p, 12), ds_texto_w, 'P', nm_usuario_p);
		end if;

	elsif (ie_acao_excesso_w = 'P') then
	
		SELECT * FROM obter_convenio_particular_pf(cd_estabelecimento_p, cd_convenio_p, '', dt_procedimento_p, cd_convenio_glosa_w, cd_categoria_glosa_w) INTO STRICT cd_convenio_glosa_w, cd_categoria_glosa_w;

		if (qt_excedida_w >= qt_lancamento_p) then
			nr_interno_conta_p 	:= null;
			cd_convenio_p		:= cd_convenio_glosa_w;
			cd_categoria_p		:= cd_categoria_glosa_w;
		else
			qt_lancamento_p := qt_lancamento_p - qt_excedida_w;

			nr_seq_excedido_w := inserir_procedimento_paciente(cd_procedimento_p, qt_excedida_w, null, null, ie_origem_proced_p, cd_setor_atendimento_p, nr_atendimento_p, cd_estabelecimento_p, nm_usuario_p, null, 'S', cd_medico_resp_p, nr_seq_atepacu_p, dt_procedimento_p, cd_convenio_glosa_w, cd_categoria_glosa_w, nr_seq_excedido_w);

			CALL atualiza_preco_procedimento(nr_seq_excedido_w, cd_convenio_glosa_w, nm_usuario_p);
			CALL ajustar_conta_vazia(nr_atendimento_p, nm_usuario_p);
		end if;
		
	elsif (ie_acao_excesso_w = 'Z') then
		
		if (qt_excedida_w >= qt_lancamento_p) then		
			ie_valor_informado_p 	:= 'S';
			vl_procedimento_p 	:= 0;			
		else		
			qt_lancamento_p := qt_lancamento_p - qt_excedida_w;
			
			nr_seq_excedido_w := inserir_procedimento_paciente(cd_procedimento_p, qt_excedida_w, null, null, ie_origem_proced_p, cd_setor_atendimento_p, nr_atendimento_p, cd_estabelecimento_p, nm_usuario_p, null, 'S', cd_medico_resp_p, nr_seq_atepacu_p, dt_procedimento_p, cd_convenio_p, cd_categoria_p, nr_seq_excedido_w);
			
			CALL atualiza_preco_procedimento(nr_seq_excedido_w, cd_convenio_p, nm_usuario_p);
			CALL ajustar_conta_vazia(nr_atendimento_p, nm_usuario_p);		
		end if;
		
	elsif (ie_acao_excesso_w = 'C'
		and (cd_convenio_excesso_w IS NOT NULL AND cd_convenio_excesso_w::text <> '')
		and (cd_categoria_excesso_w IS NOT NULL AND cd_categoria_excesso_w::text <> '')
		and qt_excedida_w >= qt_lancamento_p) then
	
		nr_interno_conta_p 	:= null;
		cd_convenio_p		:= cd_convenio_excesso_w;
		cd_categoria_p		:= cd_categoria_excesso_w;
		
	elsif (ds_erro_uso_w IS NOT NULL AND ds_erro_uso_w::text <> '') then
		ds_abort_p := ds_erro_uso_w;	
	end if;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tratar_retorno_regra_uso_proc (nr_atendimento_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint, cd_plano_convenio_p text, dt_procedimento_p timestamp, cd_medico_resp_p bigint, nr_seq_atepacu_p bigint, cd_motivo_exc_conta_p bigint, nm_usuario_p text, cd_categoria_p INOUT text, cd_convenio_p INOUT bigint, nr_interno_conta_p INOUT bigint, qt_lancamento_p INOUT bigint, ds_abort_p INOUT text, ie_valor_informado_p INOUT text, vl_procedimento_p INOUT bigint, nr_sequencia_p bigint default null) FROM PUBLIC;

