-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_reembolso ( nr_seq_reembolso_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_segurado_w		bigint;
nr_seq_protocolo_w		bigint;
qt_proc_liberado_w		bigint;
nr_seq_plano_w			bigint;
ie_segmentacao_w		varchar(3);
nr_seq_reembolso_proc_w		bigint;
qt_solicitada_grupo_w		bigint;
dt_procedimento_w		timestamp;
qt_glosa_w			bigint;
qt_proc_reembolso_w		bigint;
qt_apresentado_w		bigint;
qt_procedimentos_w		bigint;
nr_seq_reemb_mat_w		bigint;
nr_seq_material_w		bigint;
qt_material_w			pls_conta_mat.qt_material%type;
dt_atendimento_w		timestamp;
vl_material_w			double precision;
ie_tipo_despesa_w		varchar(1);
qt_glosas_proc_w		integer	:= 0;
ie_valor_informado_w		varchar(1);
cd_medico_executor_w		varchar(20);
nr_seq_conselho_w		bigint;
nr_seq_tipo_atendimento_w	bigint;
ie_tipo_guia_w			varchar(10);
ie_regime_internacao_w		varchar(1);
ds_grupo_ans_w			varchar(255);
nr_seq_grupo_ans_w		bigint;
nr_seq_regra_preco_w		bigint;
ie_gerar_glosa_valor_zerado_w	varchar(1)	:= 'S';
vl_calculado_w			double precision;
vl_total_partic_w		double precision;
vl_glosa_w			pls_conta_proc.vl_glosa%type;
vl_material_imp_w		double precision;
vl_material_ww			double precision;
vl_unitario_w			double precision;
ie_carencia_abrangencia_ant_w	varchar(10);
qt_conta_mat_w			bigint;
ie_calculo_pacote_w		varchar(2);
qt_movimento_w			bigint := 0;
nr_seq_atualizacao_w		pls_atualizacao_contabil.nr_sequencia%type := 0;
nr_seq_regra_acao_reemb_w	pls_regra_reemb_acao.nr_sequencia%type;
nr_seq_preco_pacote_w		pls_conta_proc.nr_seq_preco_pacote%type;
nr_lote_reembolso_w		lote_contabil.nr_lote_contabil%type;
ie_forma_contab_reembolso_w	pls_parametro_contabil.ie_forma_contab_reembolso%type;
ie_consist_comp_fechada_w	pls_parametros.ie_consist_comp_fechada%type;
dt_mes_competencia_w		pls_protocolo_conta.dt_mes_competencia%type;
dt_fechamento_w			pls_competencia.dt_fechamento%type;
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
ie_status_origem_lote_w		lote_contabil.ie_status_origem%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		qt_procedimento_imp,
		coalesce(ie_valor_informado,'N'),
		ie_tipo_despesa,
		nr_seq_regra,
		coalesce(vl_total_partic,0),
		CASE WHEN coalesce(vl_procedimento,0)=0 THEN  coalesce(vl_procedimento_imp, 0)  ELSE vl_procedimento END ,
		coalesce(dt_procedimento,dt_procedimento_imp),
		nr_seq_regra_acao_reemb,
		nr_seq_preco_pacote,
		nr_seq_conta
	from	pls_conta_proc
	where	nr_seq_conta 		= nr_seq_reembolso_p;

C02 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_material,
		coalesce(qt_material,0),
		coalesce(dt_atendimento,clock_timestamp()),
		CASE WHEN coalesce(vl_material,0)=0 THEN  coalesce(vl_material_imp, 0)  ELSE vl_material END ,
		coalesce(ie_valor_informado,'N'),
		nr_seq_regra_acao_reemb
	from	pls_conta_mat
	where	nr_seq_conta 		= nr_seq_reembolso_p;
	
c_contas CURSOR FOR
	SELECT	'VL_CALC_PROC' nm_atributo,
		'PLS_CONTA_PROC' nm_tabela,
		coalesce(c.vl_procedimento_imp,0) vl_item,
		trunc(clock_timestamp(),'dd') dt_mes_competencia,
		23 nr_seq_info,
		a.nr_sequencia nr_seq_tab_orig,
		b.nr_sequencia nr_seq_tab_compl,
		c.nr_sequencia nr_doc_analitico
	from	pls_conta_proc 		c,
		pls_conta 		b,
		pls_protocolo_conta 	a
	where	b.nr_sequencia		= c.nr_seq_conta
	and	a.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= nr_seq_reembolso_p
	and	ie_forma_contab_reembolso_w = 'M'
	and	a.ie_tipo_protocolo 	= 'R'
	
union all

	SELECT	'VL_CALC_MAT' nm_atributo,
		'PLS_CONTA_MAT' nm_tabela,
		coalesce(c.vl_material_imp,0) vl_item,
		trunc(clock_timestamp(),'dd') dt_mes_competencia,
		23 nr_seq_info,
		a.nr_sequencia nr_seq_tab_orig,
		b.nr_sequencia nr_seq_tab_compl,
		c.nr_sequencia nr_doc_analitico
	from	pls_conta_mat		c,
		pls_conta 		b,
		pls_protocolo_conta 	a
	where	b.nr_sequencia		= c.nr_seq_conta
	and	a.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= nr_seq_reembolso_p
	and	ie_forma_contab_reembolso_w = 'M'
	and	a.ie_tipo_protocolo 	= 'R';
		
vet_contas		c_contas%rowtype;
BEGIN

begin
select  coalesce(ie_calculo_pacote,'P'),
	coalesce(ie_carencia_abrangencia_ant,'N'),
	coalesce(ie_consist_comp_fechada, 'N')
into STRICT    ie_calculo_pacote_w,
	ie_carencia_abrangencia_ant_w,
	ie_consist_comp_fechada_w
from    pls_parametros
where   cd_estabelecimento      = cd_estabelecimento_p;
exception
when others then
	ie_calculo_pacote_w		:= 'P';
	ie_carencia_abrangencia_ant_w	:= 'N';
	ie_consist_comp_fechada_w	:= 'N';
end;

select	a.nr_seq_protocolo,
	a.nr_seq_segurado,
	a.nr_seq_plano,
	a.cd_medico_executor,
	a.nr_seq_tipo_atendimento,
	a.ie_tipo_guia,
	a.ie_regime_internacao,
	b.nr_lote_contabil,
	trunc(b.dt_mes_competencia, 'mm')
into STRICT	nr_seq_protocolo_w,
	nr_seq_segurado_w,
	nr_seq_plano_w,
	cd_medico_executor_w,
	nr_seq_tipo_atendimento_w,
	ie_tipo_guia_w,
	ie_regime_internacao_w,
	nr_lote_reembolso_w,
	dt_mes_competencia_w
from	pls_conta		a,
	pls_protocolo_conta	b
where	b.nr_sequencia	= a.nr_seq_protocolo
and	a.nr_sequencia 	= nr_seq_reembolso_p;

if (coalesce(nr_lote_reembolso_w,0) <> 0) then

	select 	coalesce(max(ie_status_origem), 'M')
	into STRICT	ie_status_origem_lote_w
	from	lote_contabil
	where	nr_lote_contabil = nr_lote_reembolso_w;

	if (ie_status_origem_lote_w <> 'SO') then
		--A ação não pode ser completada pois o movimento está vinculado ao lote contábil #@NR_LOTE_CONTABIL#@ do tipo #@DS_TIPO_LOTE_CONTABIL#@!
		CALL wheb_mensagem_pck.exibir_mensagem_abort(472015, 'NR_LOTE_CONTABIL=' || nr_lote_reembolso_w ||
								';DS_TIPO_LOTE_CONTABIL=' || ctb_obter_tipo_lote_contabil(nr_lote_reembolso_w,'D'));
	end if;
end if;

if (ie_consist_comp_fechada_w = 'S') then
	
	select	max(dt_fechamento)
	into STRICT	dt_fechamento_w
	from	pls_competencia
	where	dt_mes_competencia = dt_mes_competencia_w;
	
	if (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(obter_desc_expressao_idioma(786797, null, null));
	end if;
end if;

CALL pls_insere_conta_princ(null, null, nr_seq_reembolso_p);

for r_c01_w in C01() loop
	begin
	if (r_c01_w.ie_tipo_despesa = '1') then /* Atualizar o valor do procedimento */
                CALL pls_atualiza_valor_proc(r_c01_w.nr_sequencia, 'N', nm_usuario_p,'S','C',null);
        elsif (r_c01_w.ie_tipo_despesa in ('2','3')) then /* Atualizar os valores das taxas e diárias */
                CALL pls_atualiza_valor_servico(r_c01_w.nr_sequencia, 'N', nm_usuario_p,'S');
        elsif (r_c01_w.ie_tipo_despesa = '4') then
                if (ie_calculo_pacote_w    = 'R') then
                        CALL pls_atualiza_valor_proc(r_c01_w.nr_sequencia, 'N', nm_usuario_p,'S','C',null); /* Atualizar os va*/
                else
                        CALL pls_atualiza_valor_pacote(r_c01_w.nr_sequencia, 'C', nm_usuario_p, 'S', 'N');/* Atualizar os valores dos*/
                end if;
        else
                CALL wheb_mensagem_pck.exibir_mensagem_abort(182981); --'Problemas com a geração de valores. Tipo de de
        end if;
	end;
end loop;

select	count(1)
into STRICT	qt_conta_mat_w
from	pls_conta_mat
where	nr_seq_conta = nr_seq_reembolso_p;

if (qt_conta_mat_w > 0) then
	CALL pls_atualiza_valor_mat(null, 'N', nm_usuario_p,'S',nr_seq_reembolso_p);
end if;

CALL pls_oc_cta_gerar_combinada(	'RE', 'A', null, null, null, nr_seq_reembolso_p, null, null, null, null, null,
				null, null, null, cd_estabelecimento_p, nm_usuario_p);
				
CALL pls_gerenciar_reembolso_pck.pls_gerenciar_reembolso(nr_seq_reembolso_p, cd_estabelecimento_p, nm_usuario_p);

CALL pls_tiss_consistir_guia(nr_seq_reembolso_p, 'C', 'CR',null, null, '',nm_usuario_p, cd_estabelecimento_p);

open C01;
loop
fetch C01 into	
	nr_seq_reembolso_proc_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	qt_apresentado_w,
	ie_valor_informado_w,
	ie_tipo_despesa_w,
	nr_seq_regra_preco_w,
	vl_total_partic_w,
	vl_calculado_w,
	dt_procedimento_w,
	nr_seq_regra_acao_reemb_w,
	nr_seq_preco_pacote_w,
	nr_seq_conta_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	CALL pls_tiss_consistir_guia(nr_seq_reembolso_proc_w, 'CP', 'CR',null, null, '',nm_usuario_p, cd_estabelecimento_p);
	
	/*Conselho do medico executor*/

	select	max(nr_seq_conselho)
	into STRICT	nr_seq_conselho_w
	from	pessoa_fisica
	where	cd_pessoa_fisica	= cd_medico_executor_w;
	
	nr_seq_grupo_ans_w	:= pls_obter_grupo_ans(	cd_procedimento_w, ie_origem_proced_w, nr_seq_conselho_w,
						nr_seq_tipo_atendimento_w, ie_tipo_guia_w, ie_regime_internacao_w,
						1, 'G',cd_estabelecimento_p,
						nr_seq_conta_w);
	
	if (coalesce(nr_seq_grupo_ans_w::text, '') = '') then
		CALL pls_gravar_conta_glosa('9908', '', nr_seq_reembolso_proc_w,
					null, 'N',
					'Verificar as regras de procedimento X Grupo ANS',
					nm_usuario_p, 'A', 'CR', null,
					cd_estabelecimento_p, '', null);
	end if;
	
	-- verifica se é para utilizar o campo da regra de preço combinada ou campo nr_seq_regra
	if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_p) = 'S') then

		select 	max(nr_seq_cp_comb_filtro)
		into STRICT	nr_seq_regra_preco_w
		from	pls_conta_proc_regra
		where	nr_sequencia = nr_seq_reembolso_proc_w;
	end if;
	
	if (coalesce(nr_seq_regra_preco_w,0) = 0) and (coalesce(nr_seq_preco_pacote_w,0) = 0) then
		null;
		CALL pls_gravar_conta_glosa('1707',null,nr_seq_reembolso_proc_w,
					null,'N','O sistema não pode calcular um preço para este item.'||chr(13)||chr(10)||
					'Possíveis motivos: '||chr(13)||chr(10)||
					'1)Não existe regras de preço adequadas ao item, cadastradas na função OPS - Regras e Critérios de Preço.',
					nm_usuario_p,'A','CR',
					null, cd_estabelecimento_p, '', null);
	/*Caso exista regra de preço, mas o valor calculado está zerado */

	elsif	((ie_gerar_glosa_valor_zerado_w	= 'S') and (coalesce(vl_calculado_w,0)	= 0) or (ie_gerar_glosa_valor_zerado_w	= 'N')	and (coalesce(vl_calculado_w,0)	= 0) and (coalesce(vl_total_partic_w,0) = 0)) then
		null;
		
		CALL pls_gravar_conta_glosa('9919',null, nr_seq_reembolso_proc_w,
					null,'N', 'O sistema obteve uma regra de valorização adequada, mas não foi possível realizar o cálculo do item.'||chr(13)||chr(10)||
					'Possíveis motivos: '||chr(13)||chr(10)||				
					'1)Não existe o procedimento cadastrado na tabela de preços apontada pela regra.'||chr(13)||chr(10)||
					'2)Não existe regras de honorário médico adequadas ao item, cadastradas na função OPS - Cadastro de Regras > OPS - Contas médicas > Regra honorário.',
					nm_usuario_p,'A','CR',
					null, cd_estabelecimento_p, '', null);	
	end if;
	/*Rotina que realiza a consistência das glosas 1706 e 1705*/

	CALL pls_lib_item_reemb_auto(	nr_seq_protocolo_w,nr_seq_reembolso_p, nr_seq_reembolso_proc_w,
					null,null,null,
					nm_usuario_p,	cd_estabelecimento_p);
	
	/*askono - OS383596 - 03-12-11 - CHAMADA PARA CONSTIR A REGRA DE IDENTIFICACAO ATENDIMENTO DE RETORNO   
	- CADASTROS GERAIS\PLANO DE SAUDE\ATENDIMENTO\IDENTIFICAÇÃO ATENDIMENTO DE RETORNO  */
	CALL pls_define_regra_retorno(null,null,nr_seq_reembolso_p,'CR',nm_usuario_p);	
	
	if (coalesce(pls_obter_regra_limitacao(cd_procedimento_w,null,ie_origem_proced_w,nr_seq_segurado_w, null),'0') <> '0') then
		begin			
		select	sum(coalesce(a.qt_procedimento,0))
		into STRICT	qt_solicitada_grupo_w
		from	pls_conta_proc a
		where	a.nr_seq_conta	= nr_seq_reembolso_p
		and	pls_obter_regra_limitacao(cd_procedimento_w,null,ie_origem_proced_w,nr_seq_segurado_w, null) =
			pls_obter_regra_limitacao(a.cd_procedimento,null,a.ie_origem_proced,nr_seq_segurado_w, null)
		group	by pls_obter_regra_limitacao(a.cd_procedimento,null,a.ie_origem_proced,nr_seq_segurado_w,null);
		exception
			when others then
			qt_solicitada_grupo_w	:= 0;
		end;
	else
		qt_solicitada_grupo_w := qt_apresentado_w;
	end if;

	select	coalesce(max(ie_segmentacao),0)
	into STRICT	ie_segmentacao_w
	from	pls_plano
	where	nr_sequencia	= nr_seq_plano_w;

	if (ie_tipo_despesa_w = '1') then
		qt_glosa_w := pls_consistir_cobertura_proc(nr_seq_segurado_w, null, nr_seq_reembolso_proc_w, nr_seq_reembolso_proc_w, cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w, ie_segmentacao_w, cd_estabelecimento_p, null, nm_usuario_p, qt_glosa_w, 'C');
	end if;

	if (qt_glosa_w = 0) then
		CALL pls_consistir_limitacao_proc(nr_seq_segurado_w, null, nr_seq_reembolso_proc_w,
					nr_seq_reembolso_proc_w,null, cd_procedimento_w, ie_origem_proced_w,
					qt_solicitada_grupo_w, null, cd_estabelecimento_p, 
					nm_usuario_p);
					
		CALL pls_consistir_carencia_proc(nr_seq_segurado_w, null, null,
					nr_seq_reembolso_proc_w, null, cd_procedimento_w, 
					ie_origem_proced_w, dt_procedimento_w, 
					cd_estabelecimento_p, nm_usuario_p, null,ie_carencia_abrangencia_ant_w);
					
		CALL pls_consistir_cpt(	nr_seq_segurado_w, null, nr_seq_reembolso_proc_w,
					nr_seq_reembolso_proc_w, null, cd_procedimento_w, 
					ie_origem_proced_w, dt_procedimento_w, cd_estabelecimento_p,
					nm_usuario_p);
	end if;
	
	/*Atualiza participante no reembolso*/

	update	pls_proc_participante
	set	vl_participante	  = vl_calculado
	where 	nr_seq_conta_proc = nr_seq_reembolso_proc_w;
		
	select	count(1)
	into STRICT	qt_glosas_proc_w
	from	pls_conta_glosa
	where	nr_seq_conta_proc	= nr_seq_reembolso_proc_w;
	
	/* Francisco - 05/08/2014 - Liberar conforme ação de reembolso */

	if (nr_seq_regra_acao_reemb_w IS NOT NULL AND nr_seq_regra_acao_reemb_w::text <> '') and (qt_glosas_proc_w = 0) then
		CALL pls_liberar_item_reembolso(nr_seq_reembolso_proc_w,null,'L',nm_usuario_p);
		
		/* Liebrado pelo sistema */

		update	pls_conta_proc
		set	ie_status		= 'S',
			nr_seq_grupo_ans	= nr_seq_grupo_ans_w,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_sequencia 		= nr_seq_reembolso_proc_w
		and	ie_status		<> 'D';
	else
		update	pls_conta_proc
		set	ie_status		= CASE WHEN qt_glosas_proc_w=0 THEN 'S'  ELSE 'P' END ,
			qt_procedimento		= CASE WHEN qt_glosas_proc_w=0 THEN qt_procedimento_imp  ELSE 0 END ,
			vl_unitario		= CASE WHEN qt_glosas_proc_w=0 THEN CASE WHEN ie_valor_informado_w='N' THEN dividir(vl_calculado_w,CASE WHEN qt_glosas_proc_w=0 THEN qt_procedimento_imp  ELSE 0 END )  ELSE vl_unitario END   ELSE vl_unitario END ,
			vl_liberado		= CASE WHEN qt_glosas_proc_w=0 THEN CASE WHEN ie_valor_informado_w='N' THEN vl_calculado_w  ELSE vl_liberado END   ELSE vl_liberado END ,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			nr_seq_grupo_ans	= nr_seq_grupo_ans_w
		where	nr_sequencia 		= nr_seq_reembolso_proc_w
		and	ie_status		<> 'D';
	end if;
	
	select	vl_procedimento_imp - vl_liberado
	into STRICT	vl_glosa_w
	from	pls_conta_proc
	where	nr_sequencia = nr_seq_reembolso_proc_w
	and	ie_status <> 'D';
	
	if (vl_glosa_w > 0) then
		update	pls_conta_proc
		set	vl_glosa = vl_glosa_w
		where	nr_sequencia = nr_seq_reembolso_proc_w;
	end if;
	
	end;
end loop;
close C01;

open C02;
loop
fetch C02 into	
	nr_seq_reemb_mat_w,
	nr_seq_material_w,
	qt_material_w,
	dt_atendimento_w,
	vl_material_w,
	ie_valor_informado_w,
	nr_seq_regra_acao_reemb_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	CALL pls_consistir_conta_mat(nr_seq_reemb_mat_w, cd_estabelecimento_p, 'S', nm_usuario_p, 'N', 'S');
	
	select	count(1)
	into STRICT	qt_glosas_proc_w
	from	pls_conta_glosa
	where	nr_seq_conta_mat	= nr_seq_reemb_mat_w;
	
	/* Francisco - 05/08/2014 - Liberar conforme ação de reembolso */

	if (nr_seq_regra_acao_reemb_w IS NOT NULL AND nr_seq_regra_acao_reemb_w::text <> '') and (qt_glosas_proc_w = 0) then
		CALL pls_liberar_item_reembolso(null,nr_seq_reemb_mat_w,'L',nm_usuario_p);
		
		/* Liberado pelo sistema */

		update	pls_conta_mat
		set	ie_status	= 'S'
		where	nr_sequencia 	= nr_seq_reemb_mat_w;
	else
		update	pls_conta_mat
		set	ie_status	= CASE WHEN qt_glosas_proc_w=0 THEN 'S'  ELSE 'P' END ,
			qt_material	= CASE WHEN qt_glosas_proc_w=0 THEN qt_material_imp  ELSE 0 END ,
			vl_unitario	= CASE WHEN qt_glosas_proc_w=0 THEN CASE WHEN ie_valor_informado_w='N' THEN dividir(vl_material_w,CASE WHEN qt_glosas_proc_w=0 THEN qt_material_imp  ELSE 0 END )  ELSE vl_unitario END   ELSE vl_unitario END ,
			vl_liberado	= CASE WHEN qt_glosas_proc_w=0 THEN CASE WHEN ie_valor_informado_w='N' THEN vl_material_w  ELSE vl_liberado END   ELSE vl_liberado END ,
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia 	= nr_seq_reemb_mat_w;
	end if;
	
	select	vl_material_imp - vl_liberado
	into STRICT	vl_glosa_w
	from	pls_conta_mat
	where	nr_sequencia = nr_seq_reemb_mat_w;
	
	if (vl_glosa_w > 0) then
		update	pls_conta_mat
		set	vl_glosa = vl_glosa_w
		where	nr_sequencia = nr_seq_reemb_mat_w;
	end if;

	end;
end loop;
close C02;

CALL pls_alterar_status_reembolso(nr_seq_reembolso_p, nm_usuario_p);
CALL pls_atualiza_valor_conta(nr_seq_reembolso_p,nm_usuario_p); /* Rotina chamada na PLS_FECHAR_CONTA */
select	coalesce(max(ie_concil_contab), 'N')
into STRICT	ie_concil_contab_w
from 	pls_visible_false;

if (ie_concil_contab_w = 'S') then
	begin

	select	coalesce(max(ie_forma_contab_reembolso),'C')
	into STRICT	ie_forma_contab_reembolso_w
	from	pls_parametro_contabil
	where	cd_estabelecimento = cd_estabelecimento_p;

	if (ie_forma_contab_reembolso_w = 'M') then
		nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_mes_competencia_w, nm_usuario_p, cd_estabelecimento_p, 23, 'G', qt_movimento_w, nr_seq_atualizacao_w);

		qt_movimento_w := ctb_pls_atualizar_reembolso_in(	null, nr_seq_reembolso_p, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);			
		
		nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_mes_competencia_w, nm_usuario_p, cd_estabelecimento_p, 23, 'A', qt_movimento_w, nr_seq_atualizacao_w);
	end if;

	open c_contas;
		loop
		fetch c_contas into	
			vet_contas;
		EXIT WHEN NOT FOUND; /* apply on c_contas */
			begin

			CALL ctb_concil_financeira_pck.ctb_gravar_documento(cd_estabelecimento_p,
									vet_contas.dt_mes_competencia,
									23,
									null, 
									vet_contas.nr_seq_info, 
									vet_contas.nr_seq_tab_orig,
									vet_contas.nr_seq_tab_compl,
									vet_contas.nr_doc_analitico,
									vet_contas.vl_item,
									vet_contas.nm_tabela,
									vet_contas.nm_atributo,
									nm_usuario_p,
									'P',
									ie_forma_contab_reembolso_w);
			end;
		end loop;
	close c_contas;

	end;
end if;
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_reembolso ( nr_seq_reembolso_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

