-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_prestador_pgto ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_prestador_p bigint, ie_retorno_p INOUT text, nm_usuario_p text) AS $body$
DECLARE





nr_seq_prestador_w	bigint;
ie_retorno_w		varchar(1)	:= 'N';
nr_seq_proc_w		bigint;
nr_seq_mat_w		bigint;
ie_retorno_ww		varchar(1)	:= 'N';

C01 CURSOR FOR

	SELECT	coalesce(a.nr_seq_prestador_pgto,b.nr_seq_prestador_exec) nr_seq_prestador /*Busca o prestador pagamento a verificando primeiro o valor existente no campo nr_seq_prestador_pgto, este é carregado
											na rotina pls_atualiza_valor_proc, caso não existe é buscado o valor do campo nr_seq_prestador_exec da conta*/
	from	pls_conta_proc		a,
		pls_conta		b
	where	a.nr_sequencia		= nr_seq_conta_proc_p
	and	a.nr_seq_conta		= b.nr_sequencia
	
union all

	SELECT	nr_seq_prest_pgto_medico nr_seq_prestador /*Busca o prestador pagamento que irá receber os valores de honorário médica quando da não existência de participante no procedimento*/
	from	pls_conta_proc	a
	where	a.nr_sequencia		= nr_seq_conta_proc_p
	and	not exists (select 1 from pls_proc_participante x where x.nr_seq_conta_proc = a.nr_sequencia and coalesce(x.ie_status,'U') <> 'C')
	and	(nr_seq_prest_pgto_medico IS NOT NULL AND nr_seq_prest_pgto_medico::text <> '')
	
union all

	select	p.nr_seq_prestador_pgto nr_seq_prestador /*Busca o prestador pagamento que irá receber os valores de honorário médica quando da existência de participante no procedimento*/
	from	pls_conta_proc		a,
		pls_proc_participante	p
	where	a.nr_sequencia		= nr_seq_conta_proc_p
	and	p.nr_seq_conta_proc	= a.nr_sequencia
	and	(p.nr_seq_prestador_pgto IS NOT NULL AND p.nr_seq_prestador_pgto::text <> '')
	and	coalesce(p.ie_status,'U') <> 'C'
	
union all

	select	nr_seq_prest_fornec nr_seq_prestador /*Busca o prestador pagamento que irá receber os valores do material quando da existência de fornecedor no material*/
	from	pls_conta_mat
	where	nr_sequencia	= nr_seq_conta_mat_p
	and	(nr_seq_prest_fornec IS NOT NULL AND nr_seq_prest_fornec::text <> '');

C02 CURSOR FOR
	SELECT	b.nr_sequencia	nr_seq_proc,
		null		nr_seq_mat
	from	pls_conta	a,
		pls_conta_proc	b
	where	a.nr_sequencia = nr_seq_conta_p
	and	a.nr_sequencia = b.nr_seq_conta
	
union

	SELECT	null		nr_seq_proc,
		b.nr_sequencia	nr_seq_mat
	from	pls_conta	a,
		pls_conta_mat	b
	where	a.nr_sequencia = nr_seq_conta_p
	and	a.nr_sequencia = b.nr_seq_conta;


BEGIN
/*Abre o cursor para varer todos os procedimento e materiais existentes na conta, quando destes não serêm passados por parâmetro*/

if (coalesce(nr_seq_conta_mat_p,0) = 0) and (coalesce(nr_seq_conta_proc_p,0) = 0) then
	open C02;
	loop
	fetch C02 into
		nr_seq_proc_w,
		nr_seq_mat_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		if	((coalesce(nr_seq_proc_w,0) > 0) or (coalesce(nr_seq_mat_w,0) > 0) ) then
			ie_retorno_ww := pls_consistir_prestador_pgto(	nr_seq_conta_p, nr_seq_proc_w, nr_seq_mat_w, nr_seq_prestador_p, ie_retorno_ww, nm_usuario_p);
		end if;

		if (ie_retorno_ww = 'S') then
			ie_retorno_w := ie_retorno_ww;
		end if;
		end;
	end loop;
	close C02;

else

	open C01;
	loop
	fetch C01 into
		nr_seq_prestador_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
			if (coalesce(nr_seq_prestador_w,0) = nr_seq_prestador_p ) and (nr_seq_prestador_w > 0)then
				ie_retorno_w := 'S';
			end if;
		end;
	end loop;
	close C01;

end if;

ie_retorno_p := ie_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_prestador_pgto ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_prestador_p bigint, ie_retorno_p INOUT text, nm_usuario_p text) FROM PUBLIC;

