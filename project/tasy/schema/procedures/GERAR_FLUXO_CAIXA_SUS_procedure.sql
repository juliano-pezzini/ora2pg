-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_caixa_sus (cd_estabelecimento_p bigint, cd_conta_financ_p bigint, ie_regra_data_p text, nr_dia_fixo_p bigint, qt_mes_anterior_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, IE_ACUMULAR_FLUXO_p text, nm_usuario_p text, cd_empresa_p bigint) AS $body$
DECLARE


/*--------------------------------------------------------------- ATENÇÃO ----------------------------------------------------------------*/

/* Cuidado ao realizar alterações no fluxo de caixa. Toda e qualquer alteração realizada em qualquer uma das       */

/* procedures do fluxo de caixa deve ser cuidadosamente verificada e realizada no fluxo de caixa em lote.           */

/* Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando assim que           */

/* existam diferenças entre os fluxos de caixa.                                                                                                                */

/*--------------- AO ALTERAR O FLUXO DE CAIXA ALTERAR TAMBÉM O FLUXO DE CAIXA EM LOTE ---------------*/

vl_fluxo_w			double precision;
dt_mes_w			timestamp;
dt_referencia_w		timestamp;
ie_tratar_fim_semana_w	varchar(2);
cd_moeda_empresa_w	integer;

c01 CURSOR FOR
SELECT	sum(a.vl_conta),
	add_months(trunc(a.dt_acerto_conta, 'dd'), qt_mes_anterior_p)
from	convenio b,
	conta_paciente a
where	a.cd_convenio_parametro	= b.cd_convenio
and	b.ie_tipo_convenio	= 3
and	trunc(a.dt_acerto_conta, 'dd') between	add_months(dt_inicial_p, qt_mes_anterior_p * -1) and
						add_months(dt_final_p, qt_mes_anterior_p * -1)
and	a.cd_estabelecimento	= cd_estabelecimento_p
and	a.ie_status_acerto	= 2
and	coalesce(a.ie_cancelamento, ' ') not in ('C', 'E')
group	by add_months(trunc(a.dt_acerto_conta, 'dd'), qt_mes_anterior_p);



BEGIN

select	ie_tratar_fim_semana
into STRICT	ie_tratar_fim_semana_w
from	parametro_fluxo_caixa
where	cd_estabelecimento	= cd_estabelecimento_p;

/* Projeto Multimoeda - Busca a moeda padrão da empresa para gravar no fluxo. */

select	obter_moeda_padrao_empresa(cd_estabelecimento_p,'E')
into STRICT	cd_moeda_empresa_w
;

if (ie_regra_data_p = 'F') then

	dt_mes_w	:= trunc(dt_inicial_p,'month');

	while(dt_mes_w <= trunc(dt_final_p, 'month')) loop

		if (nr_dia_fixo_p > (to_char(last_day(dt_mes_w), 'dd'))::numeric ) then
			dt_referencia_w		:= last_day(dt_mes_w);
		else
			dt_referencia_w		:= to_date(to_char(nr_dia_fixo_p,'00') || '/' ||
										to_char(dt_mes_w, 'mm/yyyy'), 'dd/mm/yyyy');
		end if;

		if (dt_referencia_w between dt_inicial_p and dt_final_p) then

			if (ie_tratar_fim_semana_w = 'S') then
				dt_referencia_w			:= obter_proximo_dia_util(cd_estabelecimento_p, dt_referencia_w);
			end if;

			select	sum(a.vl_conta)
			into STRICT	vl_fluxo_w
			from	convenio b,
				conta_paciente a
			where	a.cd_convenio_parametro	= b.cd_convenio
			and	b.ie_tipo_convenio	= 3
			and	trunc(a.dt_acerto_conta, 'dd') between	add_months(dt_inicial_p, qt_mes_anterior_p * -1) and
									add_months(dt_final_p, qt_mes_anterior_p * -1)
			and	a.cd_estabelecimento	= cd_estabelecimento_p
			and	a.ie_status_acerto	= 2
			and	coalesce(a.ie_cancelamento, ' ') not in ('C', 'E');

			begin
			insert into fluxo_caixa(cd_estabelecimento,
				dt_referencia,
				cd_conta_financ,
				ie_classif_fluxo,
				dt_atualizacao,
				nm_usuario,
				vl_fluxo,
				ie_origem,
				ie_periodo,
				ie_integracao,
				cd_empresa,
				cd_moeda)
			values (cd_estabelecimento_p,
				dt_referencia_w,
				cd_conta_financ_p,
				'R',
				clock_timestamp(),
				nm_usuario_p,
				coalesce(vl_fluxo_w,0),
				'I',
				'D',
				'RE',
				cd_empresa_p,
				cd_moeda_empresa_w);
			exception
				when unique_violation then
					update	fluxo_caixa
					set	vl_fluxo		= coalesce(CASE WHEN IE_ACUMULAR_FLUXO_p='S' THEN  vl_fluxo_w + vl_fluxo  ELSE vl_fluxo_w END , 0)
					where	cd_estabelecimento	= cd_estabelecimento_p
					and	cd_conta_financ	= cd_conta_financ_p
					and	dt_referencia		= dt_referencia_w
					and	ie_periodo		= 'D'
					and	ie_classif_fluxo	= 'R'
					and	ie_integracao		= 'RE'
					and	cd_empresa		= cd_empresa_p;
			end;

		end if;
		dt_mes_w	:= add_months(dt_mes_w, 1);
	end loop;

elsif (ie_regra_data_p = 'MA') then

	open c01;
	loop
	fetch c01 into
		vl_fluxo_w,
		dt_referencia_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		if (ie_tratar_fim_semana_w = 'S') then
			dt_referencia_w			:= obter_proximo_dia_util(cd_estabelecimento_p, dt_referencia_w);
		end if;

		insert into fluxo_caixa(cd_estabelecimento,
			dt_referencia,
			cd_conta_financ,
			ie_classif_fluxo,
			dt_atualizacao,
			nm_usuario,
			vl_fluxo,
			ie_origem,
			ie_periodo,
			ie_integracao,
			cd_empresa,
			cd_moeda)
		values (cd_estabelecimento_p,
			dt_referencia_w,
			cd_conta_financ_p,
			'R',
			clock_timestamp(),
			nm_usuario_p,
			coalesce(vl_fluxo_w, 0),
			'I',
			'D',
			'RE',
			cd_empresa_p,
			cd_moeda_empresa_w);
		exception
			when unique_violation then
				update	fluxo_caixa
				set	vl_fluxo		= coalesce(CASE WHEN IE_ACUMULAR_FLUXO_p='S' THEN  vl_fluxo_w + vl_fluxo  ELSE vl_fluxo_w END ,0)
				where	cd_estabelecimento	= cd_estabelecimento_p
				and	cd_conta_financ	= cd_conta_financ_p
				and	dt_referencia		= dt_referencia_w
				and	ie_periodo		= 'D'
				and	ie_classif_fluxo	= 'R'
				and	ie_integracao		= 'RE'
				and	cd_empresa		= cd_empresa_p;
		end;
	end loop;
	close c01;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_caixa_sus (cd_estabelecimento_p bigint, cd_conta_financ_p bigint, ie_regra_data_p text, nr_dia_fixo_p bigint, qt_mes_anterior_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, IE_ACUMULAR_FLUXO_p text, nm_usuario_p text, cd_empresa_p bigint) FROM PUBLIC;

