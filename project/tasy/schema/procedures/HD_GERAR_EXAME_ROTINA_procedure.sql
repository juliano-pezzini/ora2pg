-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_gerar_exame_rotina ( nm_usuario_p text, cd_pessoa_fisica_p text, ie_forma_geracao_p text, cd_estabelecimento_p bigint default 1) AS $body$
DECLARE


cd_pessoa_fisica_w		varchar(10);
nm_pessoa_fisica_w		varchar(80);
ds_inconsistencia_w		varchar(4000);
ds_prescricao_gerada_w		varchar(4000);
cd_unid_dialise_w		bigint;
ie_unidade_propria_w		varchar(1);
cd_estabelecimento_w		smallint;
nr_atendimento_w		bigint;
nr_atend_lib_w			bigint;
cd_medico_responsavel_w		varchar(10);
qt_altura_cm_w			real;
qt_peso_w			real;
nr_horas_validade_w		integer;
dt_prescricao_w			timestamp;
cd_setor_atendimento_w		integer;
dt_primeiro_horario_w		timestamp;
ie_tipo_pessoa_w		smallint;
ie_funcao_prescritor_w		varchar(3);
nr_prescricao_w			bigint;
nr_seq_protocolo_w		bigint;
nr_seq_proc_medic_w		bigint;
ie_possui_cad_medico_w		varchar(1);
dt_prim_horario_w		timestamp;
nr_seq_proc_interno_w		bigint;
cd_exame_w			varchar(20);
nr_seq_prescr_w			bigint;
ds_enter_w			varchar(20)	:= chr(10)||chr(13);
cd_perfil_w			integer;
ds_unid_dialise_w		varchar(255);
ie_gerar_prescr_sem_atend_w	varchar(1);
qt_convenio_w			integer;
nr_seq_prot_exame_w		bigint;
ie_nova_forma_w			varchar(1);
ie_prescr_manual_w		varchar(1);
nr_seq_pedido_w			bigint;
ds_pedido_gerado_w		varchar(4000);
ie_gerar_result_prescr_w	varchar(1);
ie_separar_prescr_prot_w	varchar(1);
ds_prescricoes_w		varchar(2000);
nr_seq_prot_padrao_w		bigint;
nr_seq_prot_padrao_ant_w	bigint := 0;
ie_gerar_sequencia_w		varchar(1);
ie_gera_amostra_coleta_w 	varchar(1);
cd_prescritor_w			varchar(10);
ie_usuario_logado_prescr_w	varchar(1);
ie_utilizar_dia_atual_w		varchar(1);
qt_integracao_w			bigint;
ie_prescr_proc_sem_lib_w        varchar(30);
nr_seq_prot_item_w	        hd_prot_exame_padrao_item.nr_sequencia%type;
ds_log_w			varchar(2000);
ds_log_w_novo     varchar(2000);
qt_possui_prescr_w bigint;
qt_possui_exam_ind_w	bigint;
ie_exists_w				bigint := 0;
ie_exames_protocolos_w	varchar(255);

c01 CURSOR FOR /* pacientes que tem prescricoes a ser geradas */
	SELECT	cd_pessoa_fisica,
		substr(obter_nome_pf(cd_pessoa_fisica),1,80)
	from	hd_pac_prot_exame
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	--and	((trunc(obter_prox_data_ref(ie_forma_solic, nr_dia, nr_mes,''))	= trunc(sysdate) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),'')) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp()) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))	
	and	(((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, null),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		 and	ie_forma_solic <> 'M' ) or (ie_forma_solic = 'M'))
		 or (ie_prescr_manual_w = 'N'))
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(cd_pessoa_fisica) = 'S'
	and	hd_obter_se_regra_compativel(cd_pessoa_fisica, nr_seq_regra_exceto, clock_timestamp()) = 'S'
	and	hd_obter_se_regra_comp_prot(cd_pessoa_fisica, nr_seq_protocolo_exc, nr_seq_proc_medic_exc, clock_timestamp()) = 'S'
	and	(cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '')
	and	ie_nova_forma_w = 'N'
	group by cd_pessoa_fisica
	
union all

	SELECT	cd_pessoa_fisica,
		substr(obter_nome_pf(cd_pessoa_fisica),1,80)
	from	hd_pac_prot_exame
	
	where	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),''))	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
	and	(((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, null),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		 and	ie_forma_solic <> 'M' ) or (ie_forma_solic = 'M'))  or (ie_forma_solic = 'M'))		
	and	hd_obter_se_pac_transito(cd_pessoa_fisica) = 'N'
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(cd_pessoa_fisica) = 'S'
	and	hd_obter_se_regra_compativel(cd_pessoa_fisica, nr_seq_regra_exceto, clock_timestamp()) = 'S'
	and	hd_obter_se_regra_comp_prot(cd_pessoa_fisica, nr_seq_protocolo_exc, nr_seq_proc_medic_exc, clock_timestamp()) = 'S'
	and	coalesce(cd_pessoa_fisica_p::text, '') = ''
	and	ie_nova_forma_w = 'N'
	group by cd_pessoa_fisica
	
union all

	select	a.cd_pessoa_fisica,
		substr(obter_nome_pf(a.cd_pessoa_fisica),1,80)
	from	hd_protocolo_exame a,
		hd_prot_exame_padrao_item b,
		hd_prot_exame_padrao c
	where	b.nr_seq_protocolo_padrao = a.nr_seq_protocolo
	and	c.nr_sequencia = b.nr_seq_protocolo_padrao
	and	coalesce(c.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	campo_numerico(HD_Obter_estab_unidade(hd_obter_unidade_prc(a.cd_pessoa_fisica,'C'))) = cd_estabelecimento_p
	--and	((trunc(obter_prox_data_ref(b.ie_forma_solic, b.nr_dia, b.nr_mes,''))	= trunc(sysdate) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(b.ie_forma_solic, CASE WHEN ie_utilizar_dia_atual_w='S' THEN  to_char(clock_timestamp(), 'dd')  ELSE b.nr_dia END , hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, b.nr_mes, 'M',cd_estabelecimento_p, b.nr_sequencia),''))	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp()) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))
	and	(((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(CASE WHEN ie_utilizar_dia_atual_w='S' THEN  to_char(clock_timestamp(), 'dd')  ELSE nr_dia END ||'/'||coalesce(hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, b.nr_sequencia),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, b.nr_sequencia),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		 and	b.ie_forma_solic <> 'M' ) or (b.ie_forma_solic = 'M'))
		 or (ie_prescr_manual_w = 'N'))
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_p
	and	coalesce(a.dt_fim::text, '') = ''
	and	((b.ie_forma_geracao = ie_forma_geracao_p) or (b.ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(a.cd_pessoa_fisica) = 'S'
	and	hd_obter_regra_pront_novo(a.cd_pessoa_fisica, b.nr_seq_protocolo_exc, b.nr_seq_proc_medic_exc, clock_timestamp()) = 'S'
	and	(cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '')
	and	ie_nova_forma_w = 'S'
	and	coalesce(c.ie_situacao,'A') = 'A'
	and	coalesce(b.ie_situacao,'A') = 'A'
	group by cd_pessoa_fisica
	
union all

	select	a.cd_pessoa_fisica,
		substr(obter_nome_pf(a.cd_pessoa_fisica),1,80)
	from	hd_protocolo_exame a,
		hd_prot_exame_padrao_item b,
		hd_prot_exame_padrao c
	where	b.nr_seq_protocolo_padrao = a.nr_seq_protocolo
	and	c.nr_sequencia = b.nr_seq_protocolo_padrao
	and	coalesce(c.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	campo_numerico(HD_Obter_estab_unidade(hd_obter_unidade_prc(a.cd_pessoa_fisica,'C'))) = cd_estabelecimento_p
	--and	trunc(obter_prox_data_ref(b.ie_forma_solic, b.nr_dia, b.nr_mes,''))	= trunc(sysdate)	
	and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(b.ie_forma_solic, b.nr_dia, hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, b.nr_mes, 'M',cd_estabelecimento_p, b.nr_sequencia),'')) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, b.nr_sequencia),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, b.nr_sequencia),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		 and	b.ie_forma_solic <> 'M' ) or (b.ie_forma_solic = 'M'))
	and	hd_obter_se_pac_transito(a.cd_pessoa_fisica) = 'N'
	and	coalesce(a.dt_fim::text, '') = ''
	and	((b.ie_forma_geracao = ie_forma_geracao_p)  or (b.ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(a.cd_pessoa_fisica) = 'S'
	and	hd_obter_regra_pront_novo(a.cd_pessoa_fisica, b.nr_seq_protocolo_exc, b.nr_seq_proc_medic_exc, clock_timestamp()) = 'S'
	and	coalesce(cd_pessoa_fisica_p::text, '') = ''
	and	ie_nova_forma_w = 'S'
	and	coalesce(c.ie_situacao,'A') = 'A'
	and	coalesce(b.ie_situacao,'A') = 'A'
	group by cd_pessoa_fisica
	order by cd_pessoa_fisica;

c02 CURSOR FOR /* sequencia dos protocolos do paciente que devem ser gerados */
	SELECT	nr_seq_protocolo,
		nr_seq_proc_medic,
		nr_sequencia,
		null nr_seq_prot_padrao,
		null nr_seq_prot_item
	from	hd_pac_prot_exame
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	--and	((trunc(obter_prox_data_ref(ie_forma_solic, nr_dia, nr_mes,''))	= trunc(sysdate) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))	
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),''))	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp()) and ie_prescr_manual_w = 'S')  or (ie_prescr_manual_w = 'N'))
	and	(((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, null),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		and	ie_forma_solic <> 'M' ) or (ie_forma_solic = 'M'))
		or (ie_prescr_manual_w = 'N'))
	and	hd_obter_se_gera_exame_compl(cd_pessoa_fisica, ie_regra_solic, null)	= 'S'
	and	hd_obter_se_regra_comp_prot(cd_pessoa_fisica, nr_seq_protocolo_exc, nr_seq_proc_medic_exc, clock_timestamp()) = 'S'
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(cd_pessoa_fisica) = 'S'
	and	hd_obter_se_regra_compativel(cd_pessoa_fisica, nr_seq_regra_exceto, clock_timestamp()) = 'S'
	and	(cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '')
	and	ie_nova_forma_w = 'N'
	and	((hd_obter_se_gerou_prescr(ie_nova_forma_w, cd_pessoa_fisica_w, nr_sequencia) = 'N') or (ie_prescr_manual_w = 'N'))
	
union all

	SELECT	nr_seq_protocolo,
		nr_seq_proc_medic,
		nr_sequencia,
		null nr_seq_prot_padrao,
		null nr_seq_prot_item
	from	hd_pac_prot_exame
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	--and	trunc(obter_prox_data_ref(ie_forma_solic, nr_dia, nr_mes,''))	= trunc(sysdate)	
	and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),''))	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, null),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		and	ie_forma_solic <> 'M' ) or (ie_forma_solic = 'M'))
	and	hd_obter_se_pac_transito(cd_pessoa_fisica) = 'N'
	and	hd_obter_se_gera_exame_compl(cd_pessoa_fisica, ie_regra_solic, null)	= 'S'
	and	hd_obter_se_regra_compativel(cd_pessoa_fisica, nr_seq_regra_exceto, clock_timestamp()) = 'S'
	and	hd_obter_se_regra_comp_prot(cd_pessoa_fisica, nr_seq_protocolo_exc, nr_seq_proc_medic_exc, clock_timestamp()) = 'S'
	and	hd_obter_se_paciente_ativo(cd_pessoa_fisica) = 'S'
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	coalesce(cd_pessoa_fisica_p::text, '') = ''
	and	ie_nova_forma_w = 'N'
	and	((hd_obter_se_gerou_prescr(ie_nova_forma_w, cd_pessoa_fisica_w, nr_sequencia) = 'N') or (ie_prescr_manual_w = 'N'))
	
union all
	
	select	b.nr_seq_protocolo,
		b.nr_seq_proc_medic,
		a.nr_sequencia,
		c.nr_sequencia nr_seq_prot_padrao,
		b.nr_sequencia nr_seq_prot_item
	from	hd_protocolo_exame a,
		hd_prot_exame_padrao_item b,
		hd_prot_exame_padrao c
	where	b.nr_seq_protocolo_padrao = a.nr_seq_protocolo
	and	c.nr_sequencia = b.nr_seq_protocolo_padrao
	and	coalesce(c.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	campo_numerico(HD_Obter_estab_unidade(hd_obter_unidade_prc(a.cd_pessoa_fisica,'C'))) = cd_estabelecimento_p
	and	coalesce(a.dt_fim::text, '') = ''
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_w
	--and	((trunc(obter_prox_data_ref(b.ie_forma_solic, nr_dia, nr_mes,'')) = trunc(sysdate) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))	
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(b.ie_forma_solic, CASE WHEN ie_utilizar_dia_atual_w='S' THEN  to_char(clock_timestamp(), 'dd')  ELSE nr_dia END , hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, b.nr_mes, 'M',cd_estabelecimento_p, b.nr_sequencia),'')) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp()) and ie_prescr_manual_w = 'S')  or (ie_prescr_manual_w = 'N'))
	and	(((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(CASE WHEN ie_utilizar_dia_atual_w='S' THEN  to_char(clock_timestamp(), 'dd')  ELSE nr_dia END ||'/'||coalesce(hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, b.nr_sequencia),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, b.nr_sequencia),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		and	b.ie_forma_solic <> 'M' ) or (b.ie_forma_solic = 'M'))
		or (ie_prescr_manual_w = 'N'))
	and	hd_obter_se_gera_exame_compl(a.cd_pessoa_fisica, b.ie_regra_solic, b.nr_sequencia) = 'S'
	and	hd_obter_regra_pront_novo(a.cd_pessoa_fisica, b.nr_seq_protocolo_exc, b.nr_seq_proc_medic_exc, clock_timestamp()) = 'S'
	and	((b.ie_forma_geracao = ie_forma_geracao_p)  or (b.ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(a.cd_pessoa_fisica) = 'S'
	and	(cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '')
	and	ie_nova_forma_w = 'S'
	and	((hd_obter_se_gerou_prescr(ie_nova_forma_w, cd_pessoa_fisica_w, a.nr_sequencia) = 'N') or (ie_prescr_manual_w = 'N'))
	and	coalesce(c.ie_situacao,'A') = 'A'
	and	coalesce(b.ie_situacao,'A') = 'A'
	
union all

	select	b.nr_seq_protocolo,
		b.nr_seq_proc_medic,
		a.nr_sequencia,
		c.nr_sequencia nr_seq_prot_padrao,
		b.nr_sequencia nr_seq_prot_item
	from	hd_protocolo_exame a,
		hd_prot_exame_padrao_item b,
		hd_prot_exame_padrao c
	where	b.nr_seq_protocolo_padrao = a.nr_seq_protocolo
	and	c.nr_sequencia = b.nr_seq_protocolo_padrao
	and	coalesce(c.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	campo_numerico(HD_Obter_estab_unidade(hd_obter_unidade_prc(a.cd_pessoa_fisica,'C'))) = cd_estabelecimento_p
	and	coalesce(a.dt_fim::text, '') = ''
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_w
	--and	trunc(obter_prox_data_ref(b.ie_forma_solic, nr_dia, nr_mes,''))	= trunc(sysdate)	
	and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(b.ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, b.nr_sequencia),'')) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, b.nr_sequencia),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(a.cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, b.nr_sequencia),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		 and	b.ie_forma_solic <> 'M' ) or (b.ie_forma_solic = 'M'))
	and	hd_obter_se_pac_transito(a.cd_pessoa_fisica) = 'N'
	and	hd_obter_se_gera_exame_compl(a.cd_pessoa_fisica, b.ie_regra_solic, b.nr_sequencia)	= 'S'
	and	hd_obter_regra_pront_novo(a.cd_pessoa_fisica, b.nr_seq_protocolo_exc, b.nr_seq_proc_medic_exc, clock_timestamp()) = 'S'
	and	hd_obter_se_paciente_ativo(a.cd_pessoa_fisica) = 'S'
	and	((b.ie_forma_geracao = ie_forma_geracao_p)  or (b.ie_forma_geracao = 'A'))
	and	coalesce(cd_pessoa_fisica_p::text, '') = ''
	and	ie_nova_forma_w = 'S'
	and	((hd_obter_se_gerou_prescr(ie_nova_forma_w, cd_pessoa_fisica_w, a.nr_sequencia) = 'N') or (ie_prescr_manual_w = 'N'))
	and	coalesce(c.ie_situacao,'A') = 'A'
	and	coalesce(b.ie_situacao,'A') = 'A'
	order by nr_seq_prot_padrao;

C03 CURSOR FOR
	SELECT	cd_pessoa_fisica,
		substr(obter_nome_pf(cd_pessoa_fisica),1,80)
	from	hd_pac_prot_exame_externo
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	--and	((trunc(obter_prox_data_ref(ie_forma_solic, nr_dia, nr_mes,''))	= trunc(sysdate) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))	
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),''))	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp()) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))
	and	(((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, null),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		and	ie_forma_solic <> 'M' ) or (ie_forma_solic = 'M'))
		or (ie_prescr_manual_w = 'N'))
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(cd_pessoa_fisica) = 'S'
	and	(cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '')
	group by cd_pessoa_fisica
	
union all

	SELECT	cd_pessoa_fisica,
		substr(obter_nome_pf(cd_pessoa_fisica),1,80)
	from	hd_pac_prot_exame_externo
	
	where	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),''))	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, null),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		and	ie_forma_solic <> 'M' ) or (ie_forma_solic = 'M'))	
	and	hd_obter_se_pac_transito(cd_pessoa_fisica) = 'N'
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(cd_pessoa_fisica) = 'S'
	and	coalesce(cd_pessoa_fisica_p::text, '') = ''
	group by cd_pessoa_fisica;
	
C04 CURSOR FOR
	SELECT	nr_seq_protocolo,
		nr_sequencia
	from	hd_pac_prot_exame_externo
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	--and	((trunc(obter_prox_data_ref(ie_forma_solic, nr_dia, nr_mes,''))	= trunc(sysdate) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),''))	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp()) and ie_prescr_manual_w = 'S') or (ie_prescr_manual_w = 'N'))
	and	(((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, null),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		 and	ie_forma_solic <> 'M' ) or (ie_forma_solic = 'M'))
		 or (ie_prescr_manual_w = 'N'))
	and	hd_obter_se_gera_exame_compl(cd_pessoa_fisica, ie_regra_solic, null)	= 'S'
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	hd_obter_se_paciente_ativo(cd_pessoa_fisica) = 'S'
	and	(cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '')
	
union all

	SELECT	nr_seq_protocolo,
		nr_sequencia
	from	hd_pac_prot_exame_externo
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	--and	trunc(obter_prox_data_ref(ie_forma_solic, nr_dia, nr_mes,'')) = trunc(sysdate)	
	and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(obter_prox_data_ref(ie_forma_solic, nr_dia, hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),'')) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
	and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date(nr_dia||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, nr_mes, 'M',cd_estabelecimento_p, null),TO_CHAR(ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(clock_timestamp())-1,'mm'))||'/'||coalesce(hd_obter_nr_dia_mes_pf(cd_pessoa_fisica, '', 'A',cd_estabelecimento_p, null),to_char(ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(clock_timestamp())-1,'yyyy')),'dd/mm/yyyy')) < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())
		and	ie_forma_solic <> 'M' ) or (ie_forma_solic = 'M'))	
	and	hd_obter_se_pac_transito(cd_pessoa_fisica) = 'N'
	and	hd_obter_se_gera_exame_compl(cd_pessoa_fisica, ie_regra_solic, null)	= 'S'
	and	hd_obter_se_paciente_ativo(cd_pessoa_fisica) = 'S'
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	coalesce(cd_pessoa_fisica_p::text, '') = '';
	
C05 CURSOR FOR
	SELECT	c.nr_seq_exame,
		c.nr_sequencia
	from	lab_exame_equip a,
		equipamento_lab b,
		prescr_procedimento c
	where	a.cd_equipamento = b.cd_equipamento
	AND	b.ds_sigla = 'MATRIX'
	and	a.nr_seq_exame	= c.nr_seq_exame
	and	(c.nr_seq_exame IS NOT NULL AND c.nr_seq_exame::text <> '')
	and	c.nr_prescricao = nr_prescricao_w;

C06 CURSOR FOR
	SELECT	cd_protocolo,
			nr_sequencia,
			nr_seq_proc
	from	hd_protocolo_medic_proc
	where	nr_seq_protocolo_exam = nr_seq_prot_exame_w;

c05_w	C05%rowtype;
c06_w	C06%rowtype;
	

BEGIN
ie_usuario_logado_prescr_w := Obter_Param_Usuario(7009, 235, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_usuario_logado_prescr_w);
ie_prescr_proc_sem_lib_w := Obter_Param_Usuario(924, 530, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_prescr_proc_sem_lib_w);
ie_utilizar_dia_atual_w := Obter_Param_Usuario(7009, 265, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_utilizar_dia_atual_w);
ie_exames_protocolos_w := Obter_Param_Usuario(7009, 292, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_exames_protocolos_w);
commit;

select	coalesce(MAX(ie_nova_forma_dialise),'N'),
	coalesce(MAX(ie_prescr_manual),'N')
into STRICT	ie_nova_forma_w,
	ie_prescr_manual_w
from	hd_parametro
where	cd_estabelecimento = cd_estabelecimento_p;

open c01;
	loop
	fetch c01 into
		cd_pessoa_fisica_w,
		nm_pessoa_fisica_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	
	nr_prescricao_w		:= 0;
	nr_atendimento_w	:= 0;
	ds_inconsistencia_w	:= '';
	ds_prescricao_gerada_w	:= '';
	ds_prescricoes_w	:= '';

	/* obter o unidade de hemodialise do paciente */

	select	campo_numerico(hd_obter_unidade_prc(cd_pessoa_fisica_w,'C')),
		substr(hd_obter_unidade_prc(cd_pessoa_fisica_w,'D'),1,255)
	into STRICT	cd_unid_dialise_w,
		ds_unid_dialise_w
	;

	if (cd_unid_dialise_w > 0) then

		/* obter estabelecimento da unidade de hemodialise */

		select	cd_estabelecimento,
			ie_propria
		into STRICT	cd_estabelecimento_w,
			ie_unidade_propria_w
		from	hd_unidade_dialise
		where	nr_sequencia	= cd_unid_dialise_w;

		if (ie_unidade_propria_w = 'S') then
			if (cd_estabelecimento_w > 0) then
				
				begin
				select  coalesce(max(a.ie_gerar_sequencia),'P'),
					coalesce(MAX(a.ie_gera_amostra_coleta),'N')
				into STRICT 	ie_gerar_sequencia_w,
					ie_gera_amostra_coleta_w	
				from 	lab_parametro a
				where 	a.cd_estabelecimento = cd_estabelecimento_w;
				
				select	coalesce(ie_gerar_prescr_sem_atend,'N'),
					coalesce(ie_separar_prescr_prot,'N')
				into STRICT	ie_gerar_prescr_sem_atend_w,
					ie_separar_prescr_prot_w
				from	hd_parametro
				where	cd_estabelecimento	= cd_estabelecimento_w;
				exception
					when others then
					CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(194488);
				end;
				/* obter o medico responsavel pelo paciente */


				/*select	substr(hd_obter_profissional_paciente(cd_pessoa_fisica_w, 'M', 'C'),1,10)
				into	cd_medico_responsavel_w
				from	dual;*/
				
				select	max(cd_profissional)
				into STRICT	cd_medico_responsavel_w
				from	hd_profissional_resp
				where	ie_tipo_profissional	= 'M'
				and	cd_pessoa_fisica	= cd_pessoa_fisica_w
				--and	cd_estabelecimento	= cd_estabelecimento_w
				and	coalesce(dt_fim::text, '') = ''
				order by dt_inicio;
				

				if (cd_medico_responsavel_w IS NOT NULL AND cd_medico_responsavel_w::text <> '') then

					select	coalesce(max('S'),'N')
					into STRICT	ie_possui_cad_medico_w
					from	medico
					where	cd_pessoa_fisica	= cd_medico_responsavel_w
					and	ie_situacao		= 'A';

					if (ie_possui_cad_medico_w = 'S') then

						/* verifica se o paciente tem atendimento gerado */

						nr_atendimento_w := Hd_Obter_Atend_Pac_Renal_Cron(cd_pessoa_fisica_w);
						
						if (nr_atendimento_w > 0) then

							select 	count(*)
							into STRICT	qt_convenio_w
							from 	atend_categoria_convenio
							where	nr_atendimento = nr_atendimento_w;

							if (qt_convenio_w > 0) then

								dt_prescricao_w		:= clock_timestamp();

								/* obter horas de validade */

								select	obter_valor_param_usuario(924, 155, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)
								into STRICT	nr_horas_validade_w
								;

								/* obter peso do paciente */

								select	obter_sinal_vital(nr_atendimento_w,'Peso')
								into STRICT	qt_peso_w
								;

								/* obter altura do paciente */

								select	obter_sinal_vital(nr_atendimento_w,'Altura')
								into STRICT	qt_altura_cm_w
								;

								/* obter setor do atendimento */

								select	obter_setor_atendimento(nr_atendimento_w)
								into STRICT	cd_setor_atendimento_w
								;

								/* obter primeiro horario da prescricao */

								select	obter_prim_horario_prescricao(nr_atendimento_w, cd_setor_atendimento_w,dt_prescricao_w, nm_usuario_p,'R')
								into STRICT	dt_primeiro_horario_w
								;

								/* obter tipo da pessoa do usuario */

								select	obter_tipo_pessoa(cd_medico_responsavel_w)
								into STRICT	ie_tipo_pessoa_w
								;

								/* obter funcao prescritor */

								select  max(b.vl_dominio)
									into STRICT ie_funcao_prescritor_w
								from  	valor_dominio_v b,
									usuario a
								where 	a.nm_usuario  = obter_usuario_pessoa(cd_medico_responsavel_w)
								and 	b.cd_dominio  = 72
								and 	a.ie_tipo_evolucao = b.vl_dominio;
								
								if (ie_usuario_logado_prescr_w = 'S') then
									select	max(cd_pessoa_fisica)
									into STRICT	cd_prescritor_w
									from	usuario
									where	nm_usuario = nm_usuario_p;
								end if;

								if (ie_separar_prescr_prot_w = 'N') then
									/* gera numero da prescricao */

									select	nextval('prescr_medica_seq')
									into STRICT	nr_prescricao_w
									;
								
									ds_prescricoes_w := nr_prescricao_w;
									
									begin
									insert into prescr_medica(
										nr_prescricao,
										cd_pessoa_fisica,
										nr_atendimento,
										cd_medico,
										dt_prescricao,
										dt_atualizacao,
										nm_usuario,
										ds_observacao,
										nr_horas_validade,
										dt_primeiro_horario,
										cd_setor_atendimento,
										ie_recem_nato,
										ie_origem_inf,
										nm_usuario_original,
										qt_altura_cm,
										qt_peso,
										cd_estabelecimento,
										cd_prescritor,
										ie_funcao_prescritor,
										ie_prescricao_alta,
										ie_prescr_emergencia,
										ie_adep,
										ie_hemodialise,
										cd_funcao_origem
									) values (
										nr_prescricao_w,
										cd_pessoa_fisica_w,
										CASE WHEN ie_gerar_prescr_sem_atend_w='S' THEN CASE WHEN ie_forma_geracao_p='M' THEN nr_atendimento_w  ELSE null END   ELSE nr_atendimento_w END ,
										cd_medico_responsavel_w,
										dt_prescricao_w,
										clock_timestamp(),
										nm_usuario_p,
										'',
										nr_horas_validade_w,
										dt_primeiro_horario_w,
										cd_setor_atendimento_w,
										'N',
										ie_tipo_pessoa_w,
										nm_usuario_p,
										qt_altura_cm_w,
										qt_peso_w,
										cd_estabelecimento_w,
										coalesce(cd_prescritor_w,cd_medico_responsavel_w),
										ie_funcao_prescritor_w,
										'N',
										'N',
										'N',
										'N',
										7009
										
									);
										ds_log_w_novo := substr(' 1 nr_atendimento_w : ' || nr_atendimento_w || ' cd_pessoa_fisica_w: ' || cd_pessoa_fisica_w || ' nr_prescricao_w: ' || nr_prescricao_w,1,2000);
										insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
										values (clock_timestamp(),NM_USUARIO_P,860,ds_log_w_novo,nr_prescricao_w);
									exception
										when others then
											ds_log_w_novo := substr(' 1 nr_atendimento_w : ' || nr_atendimento_w || ' cd_pessoa_fisica_w ' || cd_pessoa_fisica_w || ' SLQ Error1: ' || sqlerrm(SQLSTATE),1,2000);
											insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
											values (clock_timestamp(),NM_USUARIO_P,36,ds_log_w_novo,nr_prescricao_w);
									end;
									
								end if;

								nr_seq_prot_padrao_ant_w := 0;
								
								/* gerar exames do protocolo */

								open c02;
									loop
									fetch c02 into
										nr_seq_protocolo_w,
										nr_seq_proc_medic_w,
										nr_seq_prot_exame_w,
										nr_seq_prot_padrao_w,
										nr_seq_prot_item_w;
									EXIT WHEN NOT FOUND; /* apply on c02 */
										if (ie_exames_protocolos_w = 'N') then
										
											select count(*)
											into STRICT ie_exists_w
											from prescr_procedimento a
											where a.nr_prescricao in (SELECT b.nr_prescricao
																			from prescr_medica b
																			where b.cd_pessoa_fisica = cd_pessoa_fisica_w 
																			and trunc(b.dt_prescricao) = trunc(clock_timestamp()))
											and a.cd_procedimento in (select c.cd_procedimento
																			from proc_interno c
																			where c.ie_tipo in ('O', 'PTR')
																			and obter_se_proc_int_lib_estab(c.nr_sequencia,1) = 'S'
																			and c.ie_localizador = 'S'
																			and c.ie_situacao = 'A'
																			and c.nr_sequencia in (select d.nr_seq_proc_interno 
																										from protocolo_medic_proc d 
																										where d.cd_protocolo = nr_seq_protocolo_w));
										end if;
										
										if (ie_exists_w = 0) then
										
										if (ie_separar_prescr_prot_w = 'S') and ((nr_seq_prot_padrao_w <> nr_seq_prot_padrao_ant_w) or (ie_nova_forma_w = 'N')) then
											nr_seq_prot_padrao_ant_w := nr_seq_prot_padrao_w;
											
											if (ie_usuario_logado_prescr_w = 'S') then
												select	max(cd_pessoa_fisica)
												into STRICT	cd_prescritor_w
												from	usuario
												where	nm_usuario = nm_usuario_p;
											end if;
											
											/* gera numero da prescricao */

											select	nextval('prescr_medica_seq')
											into STRICT	nr_prescricao_w
											;

											ds_prescricoes_w := ds_prescricoes_w||', '||nr_prescricao_w;
											
											begin
											insert into prescr_medica(
												nr_prescricao,
												cd_pessoa_fisica,
												nr_atendimento,
												cd_medico,
												dt_prescricao,
												dt_atualizacao,
												nm_usuario,
												ds_observacao,
												nr_horas_validade,
												dt_primeiro_horario,
												cd_setor_atendimento,
												ie_recem_nato,
												ie_origem_inf,
												nm_usuario_original,
												qt_altura_cm,
												qt_peso,
												cd_estabelecimento,
												cd_prescritor,
												ie_funcao_prescritor,
												ie_prescricao_alta,
												ie_prescr_emergencia,
												ie_adep,
												ie_hemodialise,
												cd_protocolo,
												nr_seq_protocolo,
												cd_funcao_origem
											) values (
												nr_prescricao_w,
												cd_pessoa_fisica_w,
												CASE WHEN ie_gerar_prescr_sem_atend_w='S' THEN CASE WHEN ie_forma_geracao_p='M' THEN nr_atendimento_w  ELSE null END   ELSE nr_atendimento_w END ,
												cd_medico_responsavel_w,
												dt_prescricao_w,
												clock_timestamp(),
												nm_usuario_p,
												'',
												nr_horas_validade_w,
												dt_primeiro_horario_w,
												cd_setor_atendimento_w,
												'N',
												ie_tipo_pessoa_w,
												nm_usuario_p,
												qt_altura_cm_w,
												qt_peso_w,
												cd_estabelecimento_w,
												coalesce(cd_prescritor_w,cd_medico_responsavel_w),
												ie_funcao_prescritor_w,
												'N',
												'N',
												'N',
												'N',
												nr_seq_protocolo_w,
												nr_seq_proc_medic_w,
												7009
											);
											ds_log_w_novo := substr(' 2 nr_atendimento_w : ' || nr_atendimento_w || ' cd_pessoa_fisica_w: ' || cd_pessoa_fisica_w || ' nr_prescricao_w: ' || nr_prescricao_w,1,2000);
											insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
											values (clock_timestamp(),NM_USUARIO_P,860,ds_log_w_novo,nr_prescricao_w);
											exception
											when others then
												ds_log_w_novo := substr(' 2 nr_atendimento_w : ' || nr_atendimento_w || ' cd_pessoa_fisica_w ' || cd_pessoa_fisica_w  || ' SLQ Error2: ' || SQLERRM(SQLSTATE) ,1,2000);
												insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
												values (clock_timestamp(),NM_USUARIO_P,36,ds_log_w_novo,nr_prescricao_w);
											end;
										end if;
									
										/* obter primeiro horario prescricao */

										
										select coalesce(count(*),0)
										into STRICT  qt_possui_prescr_w
										from  prescr_medica
										where   nr_prescricao = nr_prescricao_w;
										
										if((coalesce(nr_prescricao_w::text, '') = '') or (nr_prescricao_w <= 0) or (qt_possui_prescr_w <= 0) ) then
											  ds_log_w_novo := substr('nr_prescricao_w: ' || nr_prescricao_w || 'qt_possui_prescr_w' || qt_possui_prescr_w || ' SLQ Error_valid: ' || SQLERRM(SQLSTATE) ,1,2000);
												insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
												values (clock_timestamp(),NM_USUARIO_P,36,ds_log_w_novo,nr_prescricao_w);
										end if;
										
										if (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') and (nr_prescricao_w > 0) and (qt_possui_prescr_w > 0) then
										
											select	dt_primeiro_horario
											into STRICT	dt_prim_horario_w
											from	prescr_medica
											where	nr_prescricao		= nr_prescricao_w;
											
											
											select	count(*)
											into STRICT	qt_possui_exam_ind_w
											from	hd_protocolo_medic_proc
											where	nr_seq_protocolo_exam = nr_seq_prot_exame_w;
										
											if (qt_possui_exam_ind_w = 0) then
												/* gerar protocolo de procedimentos */

												begin
												CALL copiar_exame_med_protocolo(
													nr_atendimento_w,
													nr_seq_protocolo_w,
													nr_seq_proc_medic_w,
													0,
													nr_horas_validade_w,
													nr_prescricao_w,
													dt_prim_horario_w,
													dt_prescricao_w,
													dt_prescricao_w,
													nm_usuario_p,
													null,
													null,
													null,
													null,
													null
												);
												exception when others then
														ds_log_w_novo := substr('cd_estabelecimento_p: ' || cd_estabelecimento_p || ' nr_prescricao_w: ' || nr_prescricao_w || ' cd_pessoa_fisica_w: ' || cd_pessoa_fisica_w || ' SLQ Error_valid: ' || SQLERRM(SQLSTATE) ,1,2000);
														insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
															values (clock_timestamp(),NM_USUARIO_P,1836,ds_log_w_novo,nr_prescricao_w);
												end;
											else
												open C06;
												loop
												fetch C06 into	
													c06_w;
												EXIT WHEN NOT FOUND; /* apply on C06 */
													begin
													CALL copiar_exame_med_protocolo(
														nr_atendimento_w,
														c06_w.cd_protocolo,
														c06_w.nr_sequencia,
														c06_w.nr_seq_proc,
														nr_horas_validade_w,
														nr_prescricao_w,
														dt_prim_horario_w,
														dt_prescricao_w,
														dt_prescricao_w,
														nm_usuario_p,
														null,
														null,
														null,
														null,
														null
													);
													exception when others then
														ds_log_w_novo := substr('cd_estabelecimento_p: ' || cd_estabelecimento_p || ' nr_prescricao_w: ' || nr_prescricao_w || ' cd_pessoa_fisica_w: ' || cd_pessoa_fisica_w || ' SLQ Error_valid: ' || SQLERRM(SQLSTATE) ,1,2000);
														insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
															values (clock_timestamp(),NM_USUARIO_P,1836,ds_log_w_novo,nr_prescricao_w);
													end;
												end loop;
												close C06;
											end if;

											if (ie_prescr_proc_sem_lib_w = 'S') then
												update	prescr_proc_hor
												set		dt_lib_horario = clock_timestamp()
												where	nr_prescricao = nr_prescricao_w
												and		coalesce(dt_lib_horario::text, '') = '';
											end if;
											
											if (ie_nova_forma_w = 'N') then
												insert into hd_pac_prot_exame_prescr(	nr_sequencia,
																	dt_atualizacao,
																	nm_usuario,
																	dt_atualizacao_nrec,
																	nm_usuario_nrec,
																	nr_prescricao,
																	nr_seq_prot_exame)
												values (nextval('hd_pac_prot_exame_prescr_seq'),
													clock_timestamp(),
													nm_usuario_p,
													clock_timestamp(),
													nm_usuario_p,
													nr_prescricao_w,
													nr_seq_prot_exame_w);
											elsif (ie_nova_forma_w = 'S') then
												insert into hd_protocolo_exame_prescr(	nr_sequencia,
																	dt_atualizacao,
																	nm_usuario,
																	dt_atualizacao_nrec,
																	nm_usuario_nrec,
																	nr_prescricao,
																	cd_pessoa_fisica,
																	nr_seq_protocolo,
																	ie_manual,
																	nr_seq_prot_item)

												values (	nextval('hd_protocolo_exame_prescr_seq'),
													clock_timestamp(),
													nm_usuario_p,
													clock_timestamp(),
													nm_usuario_p,
													nr_prescricao_w,
													cd_pessoa_fisica_w,
													nr_seq_prot_exame_w,
													'N',
													nr_seq_prot_item_w);

											end if;
											
											select	count(*)
											into STRICT	qt_integracao_w
											from	lab_exame_equip a,
												equipamento_lab b,
												prescr_procedimento c
											where	a.cd_equipamento = b.cd_equipamento
											AND	b.ds_sigla = 'MATRIX'
											and	a.nr_seq_exame	= c.nr_seq_exame
											and	(c.nr_seq_exame IS NOT NULL AND c.nr_seq_exame::text <> '')
											and	c.nr_prescricao = nr_prescricao_w;
										
											if (qt_integracao_w > 0) then
											
												open C05;
												loop
												fetch C05 into	
													c05_w;
												EXIT WHEN NOT FOUND; /* apply on C05 */
													begin
													CALL integrar_matrix_ws(252, nr_prescricao_w, c05_w.nr_sequencia, c05_w.nr_seq_exame, nm_usuario_p);
													end;
												end loop;
												close C05;
											end if;
										end if;

										 if (ie_separar_prescr_prot_w = 'S') and (qt_possui_prescr_w > 0) then
													
											update 	prescr_procedimento
											set	cd_setor_atendimento 	= cd_setor_atendimento_w
											where	nr_prescricao 		= nr_prescricao_w
											and	coalesce(cd_setor_atendimento::text, '') = '';

											update 	prescr_procedimento
											set	ie_status_atend = 10
											where	nr_prescricao 		= nr_prescricao_w
											and	ie_status_atend = 5;
																						
											select CASE WHEN ie_gerar_prescr_sem_atend_w='S' THEN CASE WHEN ie_forma_geracao_p='M' THEN nr_atendimento_w  ELSE null END   ELSE nr_atendimento_w END
											into STRICT nr_atend_lib_w
											;
											
											begin
											
											ds_log_w := liberar_prescricao(nr_prescricao_w, nr_atend_lib_w, 'S', obter_perfil_ativo, nm_usuario_p, 'N', ds_log_w);
											exception when others then
												ds_log_w_novo := substr('cd_estabelecimento_p: ' || cd_estabelecimento_p || ' nr_prescricao_w: ' || nr_prescricao_w || ' cd_pessoa_fisica_w: ' || cd_pessoa_fisica_w || ' SLQ Error_valid: ' || SQLERRM(SQLSTATE) ,1,2000);
												insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
													values (clock_timestamp(),NM_USUARIO_P,1836,ds_log_w_novo,nr_prescricao_w);
											end;
											
										end if;										
																
									if (qt_possui_prescr_w > 0) then
										CALL Executar_Proced_Lib_Prescr(nr_prescricao_w, nm_usuario_p);
									end if;
									end if;
									end loop;
								close c02;
								
								if (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') and (nr_prescricao_w > 0) and (qt_possui_prescr_w > 0) then
								
									if (ie_separar_prescr_prot_w <> 'S') then

										update 	prescr_procedimento
										set	cd_setor_atendimento 	= cd_setor_atendimento_w
										where	nr_prescricao 		= nr_prescricao_w
										and	coalesce(cd_setor_atendimento::text, '') = '';

										update 	prescr_procedimento
										set	ie_status_atend = 10
										where	nr_prescricao 		= nr_prescricao_w
										and	ie_status_atend = 5;
										
										select CASE WHEN ie_gerar_prescr_sem_atend_w='S' THEN CASE WHEN ie_forma_geracao_p='M' THEN nr_atendimento_w  ELSE null END   ELSE nr_atendimento_w END
										into STRICT nr_atend_lib_w
										;
										
										begin
										
										ds_log_w := liberar_prescricao(nr_prescricao_w, nr_atend_lib_w, 'S', obter_perfil_ativo, nm_usuario_p, 'N', ds_log_w);
												
										exception when others then
											ds_log_w_novo := substr('cd_estabelecimento_p: ' || cd_estabelecimento_p || ' nr_prescricao_w: ' || nr_prescricao_w || ' cd_pessoa_fisica_w: ' || cd_pessoa_fisica_w || ' SLQ Error_valid: ' || SQLERRM(SQLSTATE) ,1,2000);
											insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
												values (clock_timestamp(),NM_USUARIO_P,1836,ds_log_w_novo,nr_prescricao_w);
										end;

									end if;	
								end if;	
								
							else
								ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793596) || ' ' || nr_atendimento_w || ds_enter_w;
								
							end if;
						else
							ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793602) || '.' || ds_enter_w;
						end if;
					else
							ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793603) || '.' || ds_enter_w;
					end if;
				else
					ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793604) || '.' || ds_enter_w;
				end if;
			else
				ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793605) || '.' || ds_enter_w;
			end if;
		else
			ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793606) || '.' || ds_enter_w;
		end if;
	else
		ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793607) || '.' || ds_enter_w;
	end if;

	if (ie_separar_prescr_prot_w = 'S') then
		ds_prescricoes_w := substr(ds_prescricoes_w,3,length(ds_prescricoes_w));
	end if;
	
	if (nr_prescricao_w > 0) then
		ds_prescricao_gerada_w	:= ds_prescricao_gerada_w || wheb_mensagem_pck.get_texto(793608,
											'DS_PRESCRICOES='||ds_prescricoes_w||
											';CD_PESSOA_FISICA='||cd_pessoa_fisica_w||
											';nm_pessoa_fisica='||nm_pessoa_fisica_w) || ds_enter_w || wheb_mensagem_pck.get_texto(793590) || ' ' || ds_unid_dialise_w;									
	else
		ds_prescricao_gerada_w	:= wheb_mensagem_pck.get_texto(793609,
								'CD_PESSOA_FISICA='||cd_pessoa_fisica_w||
								';NM_PESSOA_FISICA='||nm_pessoa_fisica_w) || '.' || ds_enter_w || ds_inconsistencia_w || wheb_mensagem_pck.get_texto(793610) || ds_enter_w || wheb_mensagem_pck.get_texto(793590) || ' ' || ds_unid_dialise_w;						
	end if;
	insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
	values (clock_timestamp(),NM_USUARIO_P,35,substr(' 1 cd_pessoa_fisica_w: ' || cd_pessoa_fisica_w || 'ds_inconsistencia_w: ' || ds_inconsistencia_w,1,2000),0);
	
	if (ds_prescricao_gerada_w IS NOT NULL AND ds_prescricao_gerada_w::text <> '') then

		begin
		select	cd_perfil
		into STRICT	cd_perfil_w
		from	hd_parametro
		where	cd_estabelecimento	= cd_estabelecimento_w;
		exception
			when others then
			cd_perfil_w	:= 0;
		end;

		insert into comunic_interna(
			dt_comunicado,
			ds_titulo,
			ds_comunicado,
			nm_usuario,
			dt_atualizacao,
			ie_geral,
			nm_usuario_destino,
			ds_perfil_adicional,
			nr_sequencia,
			ie_gerencial,
			dt_liberacao,
			cd_estab_destino
		) values (
			clock_timestamp(),
			wheb_mensagem_pck.get_texto(793611)||' '||cd_pessoa_fisica_w||' - '||nm_pessoa_fisica_w,
			ds_prescricao_gerada_w,
			nm_usuario_p,
			clock_timestamp(),
			'N',
			'',
			cd_perfil_w||', ',
			nextval('comunic_interna_seq'),
			'N',
			clock_timestamp(),
			cd_estabelecimento_w
		);
		
		if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (nr_prescricao_w = 0) then	
			commit;
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(194483, 'DS_MENSAGEM='||ds_prescricao_gerada_w);
		end if;

	end if;

	end loop;
close c01;

open c03;
	loop
	fetch c03 into
		cd_pessoa_fisica_w,
		nm_pessoa_fisica_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */

	nr_seq_pedido_w		:= 0;
	nr_atendimento_w	:= 0;
	ds_inconsistencia_w	:= '';
	ds_pedido_gerado_w	:= '';


	/* obter o unidade de hemodialise do paciente */

	select	campo_numerico(hd_obter_unidade_prc(cd_pessoa_fisica_w,'C')),
		substr(hd_obter_unidade_prc(cd_pessoa_fisica_w,'D'),1,255)
	into STRICT	cd_unid_dialise_w,
		ds_unid_dialise_w
	;

	if (cd_unid_dialise_w > 0) then

		/* obter estabelecimento da unidade de hemodialise */

		select	cd_estabelecimento,
			ie_propria
		into STRICT	cd_estabelecimento_w,
			ie_unidade_propria_w
		from	hd_unidade_dialise
		where	nr_sequencia	= cd_unid_dialise_w;

		if (ie_unidade_propria_w = 'S') then
			if (cd_estabelecimento_w > 0) then
				
				/* obter o medico responsavel pelo paciente */

				select	substr(hd_obter_profissional_paciente(cd_pessoa_fisica_w, 'M', 'C'),1,10)
				into STRICT	cd_medico_responsavel_w
				;

				if (cd_medico_responsavel_w IS NOT NULL AND cd_medico_responsavel_w::text <> '') then

					select	coalesce(max('S'),'N')
					into STRICT	ie_possui_cad_medico_w
					from	medico
					where	cd_pessoa_fisica	= cd_medico_responsavel_w
					and	ie_situacao		= 'A';

					if (ie_possui_cad_medico_w = 'S') then

						/* verifica se o paciente tem atendimento gerado */

						nr_atendimento_w := Hd_Obter_Atend_Pac_Renal_Cron(cd_pessoa_fisica_w);

						if (nr_atendimento_w > 0) then

							select 	count(*)
							into STRICT	qt_convenio_w
							from 	atend_categoria_convenio
							where	nr_atendimento = nr_atendimento_w;

							if (qt_convenio_w > 0) then

								/* gera numero da prescricao */

								select	nextval('pedido_exame_externo_seq')
								into STRICT	nr_seq_pedido_w
								;

								insert into pedido_exame_externo(
									nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									cd_pessoa_fisica,
									nr_atendimento,
									cd_profissional,
									dt_solicitacao,
									ds_solicitacao,
									ie_ficha_unimed,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									ie_situacao,
									ie_origem_pedido)
								Values (	nr_seq_pedido_w,
									clock_timestamp(),
									nm_usuario_p,
									cd_pessoa_fisica_w,
									nr_atendimento_w,
									cd_medico_responsavel_w,
									clock_timestamp(),
									' ',
									'S',
									clock_timestamp(),
									nm_usuario_p,
									'A',
									'H');

								/* gerar exames do protocolo */

								open c04;
									loop
									fetch c04 into
										nr_seq_protocolo_w,
										nr_seq_prot_exame_w;
									EXIT WHEN NOT FOUND; /* apply on c04 */

										CALL Gerar_Exame_Externo_Protocolo(nr_seq_pedido_w,nr_seq_protocolo_w,nm_usuario_p);

									end loop;
								close c04;
								
							else
								ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793596) || ' ' || nr_atendimento_w || ds_enter_w;
							end if;
						else
							ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793602) || '.' || ds_enter_w;
						end if;
					else
							ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793603) || '.' || ds_enter_w;
					end if;
				else
					ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793604) || '.' || ds_enter_w;
				end if;
			else
				ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793605) || '.' || ds_enter_w;
			end if;
		else
			ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793606) || '.' || ds_enter_w;
		end if;
	else
		ds_inconsistencia_w	:= ds_inconsistencia_w||'-> ' || wheb_mensagem_pck.get_texto(793607) || '.' || ds_enter_w;
	end if;

	if (nr_seq_pedido_w > 0) then
		ds_pedido_gerado_w	:= ds_pedido_gerado_w || wheb_mensagem_pck.get_texto(793614) ||' '||cd_pessoa_fisica_w||' - '||nm_pessoa_fisica_w || ds_enter_w || wheb_mensagem_pck.get_texto(793590) || ' ' || ds_unid_dialise_w;
	else
		ds_pedido_gerado_w	:=  wheb_mensagem_pck.get_texto(793615)||': '||cd_pessoa_fisica_w||' - '||nm_pessoa_fisica_w||ds_enter_w||ds_inconsistencia_w|| wheb_mensagem_pck.get_texto(793617) || '.' || ds_enter_w || wheb_mensagem_pck.get_texto(793590) || ' ' || ds_unid_dialise_w;
	end if;

	insert into log_atendimento(dt_atualizacao,nm_usuario,cd_log,ds_log,nr_atendimento)
	values (clock_timestamp(),NM_USUARIO_P,35,substr(' 2 cd_pessoa_fisica_w: ' || cd_pessoa_fisica_w || ' ds_inconsistencia_w: ' || ds_inconsistencia_w,1,2000),0);
	
	if (ds_pedido_gerado_w IS NOT NULL AND ds_pedido_gerado_w::text <> '') then

		begin
		select	cd_perfil
		into STRICT	cd_perfil_w
		from	hd_parametro
		where	cd_estabelecimento	= cd_estabelecimento_w;
		exception
			when others then
			cd_perfil_w	:= 0;
		end;

		insert into comunic_interna(
			dt_comunicado,
			ds_titulo,
			ds_comunicado,
			nm_usuario,
			dt_atualizacao,
			ie_geral,
			nm_usuario_destino,
			ds_perfil_adicional,
			nr_sequencia,
			ie_gerencial,
			dt_liberacao,
			cd_estab_destino
		) values (
			clock_timestamp(),
			wheb_mensagem_pck.get_texto(793612)||' '||cd_pessoa_fisica_w||' - '||nm_pessoa_fisica_w,
			ds_pedido_gerado_w,
			nm_usuario_p,
			clock_timestamp(),
			'N',
			'',
			cd_perfil_w||', ',
			nextval('comunic_interna_seq'),
			'N',
			clock_timestamp(),
			cd_estabelecimento_w
		);
		
		if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (nr_seq_pedido_w = 0) then	
			commit;
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(194483, 'DS_MENSAGEM='||ds_pedido_gerado_w);
		end if;

	end if;

	end loop;
close c03;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_gerar_exame_rotina ( nm_usuario_p text, cd_pessoa_fisica_p text, ie_forma_geracao_p text, cd_estabelecimento_p bigint default 1) FROM PUBLIC;

