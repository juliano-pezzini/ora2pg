-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_grg_proc_partic (nr_seq_hist_item_p bigint, nm_usuario_p text, nr_seq_guia_p bigint) AS $body$
DECLARE


nr_seq_propaci_w	bigint;
vl_partic_w		double precision;
vl_saldo_amenor_w	double precision;
vl_saldo_orig_w		double precision;
vl_participante_w	double precision;
nr_seq_partic_w		bigint;
qt_registro_w		bigint;
vl_adicional_w		double precision;
vl_amenor_w		double precision;
vl_glosa_w		double precision;
vl_pago_w		double precision;
vl_amenor_partic_w	double precision	:= 0;
nr_seq_ret_item_w	bigint;
cd_estabelecimento_w	bigint;
ie_valor_amenor_ret_w	varchar(10) := 'N';
nr_seq_hist_item_w	bigint;

c01 CURSOR FOR
SELECT	a.nr_seq_partic,
	a.vl_participante
from	procedimento_participante a
where	not exists (select	1
	from	grg_proc_partic x
	where	x.nr_seq_partic		= a.nr_seq_partic
	and	x.nr_seq_proc		= a.nr_sequencia
	and	x.nr_seq_hist_item	= nr_seq_hist_item_p)
and	a.nr_sequencia	= nr_seq_propaci_w;

c02 CURSOR FOR
SELECT	a.nr_sequencia
from	lote_audit_hist_item a
where	a.nr_seq_guia		= nr_seq_guia_p
and	(a.nr_seq_propaci IS NOT NULL AND a.nr_seq_propaci::text <> '')
and	(nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '')
and	coalesce(nr_seq_hist_item_p::text, '') = ''

union

select	a.nr_sequencia
from	lote_audit_hist_item a
where	a.nr_sequencia		= nr_seq_hist_item_p
and	(a.nr_seq_propaci IS NOT NULL AND a.nr_seq_propaci::text <> '');


BEGIN

ie_valor_amenor_ret_w  := obter_param_usuario(69, 38, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_valor_amenor_ret_w );

open C02;
loop
fetch C02 into
	nr_seq_hist_item_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin

	select	max(b.cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	lote_auditoria b,
		lote_audit_hist a,
		lote_audit_hist_guia d,
		lote_audit_hist_item c
	where	c.nr_sequencia		= nr_seq_hist_item_w
	and	c.nr_seq_guia		= d.nr_sequencia
	and	d.nr_seq_lote_hist	= a.nr_sequencia
	and	a.nr_seq_lote_audit	= b.nr_sequencia;

	select	max(a.nr_seq_propaci),
		coalesce(max(a.vl_adicional),0),
		coalesce(max(a.vl_amenor),0),
		coalesce(max(a.vl_glosa),0),
		coalesce(max(a.vl_pago),0),
		max(a.nr_seq_ret_item)
	into STRICT	nr_seq_propaci_w,
		vl_adicional_w,
		vl_amenor_w,
		vl_glosa_w,
		vl_pago_w,
		nr_seq_ret_item_w
	from	lote_audit_hist_item a
	where	a.nr_sequencia	= nr_seq_hist_item_w;

	if (coalesce(nr_seq_propaci_w,0) <> 0) then

		select	count(*)	/* verificar se o médico executor já foi gerado para o item */
		into STRICT	qt_registro_w
		from	grg_proc_partic a
		where	a.nr_seq_hist_item	= nr_seq_hist_item_w
		and	coalesce(a.nr_seq_partic::text, '') = ''
		and	a.nr_seq_proc		= nr_seq_propaci_w;

		if (coalesce(qt_registro_w,0)	= 0) then

			select	coalesce(max(a.vl_medico),0)	/* valor original do participante (no caso, o médico executor) */
			into STRICT	vl_participante_w
			from	procedimento_paciente a
			where	a.nr_sequencia	= nr_seq_propaci_w;

			if (vl_participante_w = 0) then
				select	coalesce(max(a.vl_procedimento),0)	/* valor original do participante (no caso, o médico executor) */
				into STRICT	vl_participante_w
				from	procedimento_paciente a
				where	a.nr_sequencia	= nr_seq_propaci_w;
			end if;

			select	coalesce(sum(a.vl_glosa),0) + coalesce(sum(a.vl_pago),0) vl_partic	/* valor das análises anteriores */
			into STRICT	vl_partic_w
			from	grg_proc_partic a
			where	a.nr_seq_hist_item	< nr_seq_hist_item_w
			and	coalesce(a.nr_seq_partic::text, '') = ''
			and	a.nr_seq_proc		= nr_seq_propaci_w;

			vl_saldo_orig_w	:= vl_participante_w - vl_partic_w;

			if (coalesce(ie_valor_amenor_ret_w,'N') = 'S') and (nr_seq_ret_item_w IS NOT NULL AND nr_seq_ret_item_w::text <> '') then

				select	coalesce(sum(a.vl_glosa),0)
				into STRICT	vl_amenor_w
				from	motivo_glosa b,
					convenio_retorno_glosa a
				where	a.cd_motivo_glosa	= b.cd_motivo_glosa
				and	b.ie_acao_glosa		= 'R'
				and	a.nr_seq_ret_item	= nr_seq_ret_item_w
				and	a.nr_seq_propaci	= nr_seq_propaci_w
				and	coalesce(a.nr_seq_partic::text, '') = '';

			end if;

			/* Médico executor do procedimento */

			insert	into grg_proc_partic(dt_atualizacao,
				nm_usuario,
				nr_seq_hist_item,
				nr_seq_partic,
				nr_seq_proc,
				nr_sequencia,
				vl_adicional,
				vl_amenor,
				vl_glosa,
				vl_pago,
				vl_saldo_orig)
			values (clock_timestamp(),
				nm_usuario_p,
				nr_seq_hist_item_w,
				null,
				nr_seq_propaci_w,
				nextval('grg_proc_partic_seq'),
				vl_adicional_w,
				vl_amenor_w,
				vl_glosa_w,
				vl_pago_w,
				vl_saldo_orig_w);

		end if;

		open	c01;
		loop
		fetch	c01 into
			nr_seq_partic_w,
			vl_participante_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */

			select	coalesce(sum(a.vl_glosa),0) + coalesce(sum(a.vl_pago),0) vl_partic	/* valor das análises anteriores */
			into STRICT	vl_partic_w
			from	grg_proc_partic a
			where	a.nr_seq_hist_item	< nr_seq_hist_item_w
			and	a.nr_seq_partic		= nr_seq_partic_w
			and	a.nr_seq_proc		= nr_seq_propaci_w;

			vl_saldo_orig_w	:= vl_participante_w - vl_partic_w;

			vl_amenor_partic_w	:= 0;

			if (coalesce(ie_valor_amenor_ret_w,'N') = 'S') and (nr_seq_ret_item_w IS NOT NULL AND nr_seq_ret_item_w::text <> '') then

				select	coalesce(sum(a.vl_glosa),0)
				into STRICT	vl_amenor_partic_w
				from	motivo_glosa b,
					convenio_retorno_glosa a
				where	a.cd_motivo_glosa	= b.cd_motivo_glosa
				and	b.ie_acao_glosa		= 'R'
				and	a.nr_seq_ret_item	= nr_seq_ret_item_w
				and	a.nr_seq_propaci	= nr_seq_propaci_w
				and	a.nr_seq_partic 	= nr_seq_partic_w;

			end if;

			/* Participante não executor do procedimento */

			insert	into grg_proc_partic(dt_atualizacao,
				nm_usuario,
				nr_seq_hist_item,
				nr_seq_partic,
				nr_seq_proc,
				nr_sequencia,
				vl_adicional,
				vl_amenor,
				vl_glosa,
				vl_pago,
				vl_saldo_orig)
			values (clock_timestamp(),
				nm_usuario_p,
				nr_seq_hist_item_w,
				nr_seq_partic_w,
				nr_seq_propaci_w,
				nextval('grg_proc_partic_seq'),
				0,
				vl_amenor_partic_w,
				0,
				0,
				vl_saldo_orig_w);

		end	loop;
		close	c01;

	end if;

	end;
end loop;
close C02;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_grg_proc_partic (nr_seq_hist_item_p bigint, nm_usuario_p text, nr_seq_guia_p bigint) FROM PUBLIC;

