-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_orcamento_agecons ( nr_seq_agecons_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_plano_p text, ds_erro_p INOUT text) AS $body$
DECLARE



cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_pessoa_fisica_w	varchar(10);
cd_plano_w		varchar(10);
cd_usuario_convenio_w	varchar(30);
ie_tipo_atendimento_w	smallint;
nr_telefone_w		varchar(60);
dt_nascimento_w		timestamp;
qt_altura_cm_w		real;
cd_condicao_pagamento_w	bigint;
nr_seq_orcamento_w	bigint;
cd_tipo_acomodacao_w	integer;
ie_glosa_w		varchar(1);
qt_dias_validade_w	bigint;
ie_tipo_convenio_w	smallint;
cd_procedimento_item_w		bigint;
ie_origem_proced_item_w		bigint;
nr_seq_proc_interno_item_w	bigint;
nr_seq_orcamento_proc_w		bigint;
ie_gerar_assoc_w		varchar(1);
ie_gerar_lanc_aut_w		varchar(1);
cd_procedimento_lab_w		bigint;
ie_origem_proced_lab_w		bigint;
nr_seq_proc_interno_lab_w	bigint;
nr_seq_exame_lab_w		bigint;
nr_glosa_part_w			bigint;
ie_gerar_itens_w		varchar(1);
nr_sequencia_item_w		bigint;
cd_procedimento_item_adic_w	bigint;
ie_origem_proced_item_adic_w	bigint;
nr_seq_proc_int_item_adic_w 	bigint;
ie_glosa_adic_w			varchar(1);
qt_adic_w			bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno,
		ie_glosa
	from	agenda_consulta
	where	nr_sequencia = nr_seq_agecons_p;

C02 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno,
		ie_glosa
	from	agenda_consulta_proc
	where	nr_seq_agenda = nr_seq_agecons_p
	and 	coalesce(nr_seq_exame::text, '') = '';

C03 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno,
		nr_seq_exame,
		ie_glosa
	from	agenda_consulta_proc
	where	nr_seq_agenda = nr_seq_agecons_p
	and 	(nr_seq_exame IS NOT NULL AND nr_seq_exame::text <> '');



BEGIN

nr_glosa_part_w	:= 99;

ie_gerar_itens_w := obter_param_usuario(866, 305, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_itens_w);

ds_erro_p	:= '';

select	cd_pessoa_fisica,
	cd_convenio,
	cd_categoria,
	cd_plano,
	cd_usuario_convenio,
	ie_tipo_atendimento
into STRICT	cd_pessoa_fisica_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_plano_w,
	cd_usuario_convenio_w,
	ie_tipo_atendimento_w
from	agenda_consulta
where	nr_sequencia	= nr_seq_agecons_p;

cd_condicao_pagamento_w := Obter_Param_Usuario(106, 1, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, cd_condicao_pagamento_w);
qt_dias_validade_w := Obter_Param_Usuario(106, 2, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_dias_validade_w);
ie_gerar_lanc_aut_w := Obter_Param_Usuario(106, 3, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_lanc_aut_w);
cd_tipo_acomodacao_w := Obter_Param_Usuario(106, 71, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, cd_tipo_acomodacao_w);
ie_gerar_assoc_w := Obter_Param_Usuario(106, 45, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_assoc_w);

select	nextval('orcamento_paciente_seq')
into STRICT	nr_seq_orcamento_w
;

if (coalesce(cd_categoria_w::text, '') = '') or (coalesce(cd_pessoa_fisica_w::text, '') = '') or (coalesce(cd_convenio_w::text, '') = '') then
	/*Rai1se_appli1cation_err1or(-20011,'Para gerar o oramento, deve-se informar o paciente, conv?nio e categoria.');*/

	CALL Wheb_mensagem_pck.exibir_mensagem_abort(218758);
end if;

/* Validar tipo de conv?nio */

select	max(ie_tipo_convenio)
into STRICT	ie_tipo_convenio_w
from	convenio
where	cd_convenio = cd_convenio_w;

if	((ie_gerar_itens_w = 'S') or (ie_gerar_itens_w = 'A')) then

	if (coalesce(ie_tipo_convenio_w,0) <> 1) then
		select	max(CD_CONVENIO_PARTIC_ORC),
			max(CD_CATEGORIA_PARTIC_ORC),
			max(CD_PLANO_PARTIC_ORC)
		into STRICT	cd_convenio_w,
			cd_categoria_w,
			cd_plano_w
		from	parametro_agenda_integrada
		where	coalesce(cd_estabelecimento,cd_estabelecimento_p)	= cd_estabelecimento_p;

		if (coalesce(cd_convenio_w::text, '') = '') or (coalesce(cd_categoria_w::text, '') = '') or (coalesce(cd_plano_w::text, '') = '') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(1013979);
		end if;

		select	max(ie_tipo_convenio)
		into STRICT	ie_tipo_convenio_w
		from	convenio
		where	cd_convenio = cd_convenio_w;

	end if;

	insert into orcamento_paciente(nr_sequencia_orcamento,
		cd_estabelecimento,
		cd_pessoa_fisica,
		dt_orcamento,
		cd_convenio,
		cd_categoria,
		cd_plano,
		cd_condicao_pagamento,
		ie_status_orcamento,
		dt_atualizacao,
		nm_usuario,
		vl_deposito,
		ie_calculo_valor,
		ie_tipo_atendimento,
		cd_tipo_acomodacao,
		nr_seq_agecons,
		dt_validade)
	values (nr_seq_orcamento_w,
		cd_estabelecimento_p,
		cd_pessoa_fisica_w,
		clock_timestamp(),
		cd_convenio_w,
		cd_categoria_w,
		cd_plano_w,
		coalesce(cd_condicao_pagamento_w,1),
		1,
		clock_timestamp(),
		nm_usuario_p,
		0,
		'C',
		ie_tipo_atendimento_w,
		cd_tipo_acomodacao_w,
		nr_seq_agecons_p,
		clock_timestamp() + coalesce(qt_dias_validade_w,1));

	if (ie_tipo_convenio_w = 1) then
		/* PARTICULAR */

		open C01;
		loop
		fetch C01 into
			nr_sequencia_item_w,
			cd_procedimento_item_w,
			ie_origem_proced_item_w,
			nr_seq_proc_interno_item_w,
			ie_glosa_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			if (nr_seq_proc_interno_item_w IS NOT NULL AND nr_seq_proc_interno_item_w::text <> '') and (ie_glosa_w = 'T') then
				select	max(cd_procedimento),
					max(ie_origem_proced)
				into STRICT	cd_procedimento_item_w,
					ie_origem_proced_item_w
				from	proc_interno
				where	nr_sequencia = nr_seq_proc_interno_item_w;
			end if;

			if (coalesce(cd_procedimento_item_w::text, '') = '') then

				select	count(1)
				into STRICT	qt_adic_w
				from	agenda_consulta_proc
				where	nr_seq_agenda = nr_seq_agecons_p;

				if ((qt_adic_w = 0) or (ie_gerar_itens_w <> 'A')) then
					CALL Wheb_mensagem_pck.exibir_mensagem_abort(1014359);
				end if;
			end if;

			if (cd_procedimento_item_w IS NOT NULL AND cd_procedimento_item_w::text <> '') then

				select	nextval('orcamento_paciente_proc_seq')
				into STRICT	nr_seq_orcamento_proc_w
				;

				insert into orcamento_paciente_proc(
					nr_sequencia_orcamento,
					cd_procedimento,
					ie_origem_proced,
					nr_seq_proc_interno,
					qt_procedimento,
					dt_atualizacao,
					nm_usuario,
					vl_procedimento,
					ie_valor_informado,
					nr_sequencia)
				values (	 nr_seq_orcamento_w,
					cd_procedimento_item_w,
					ie_origem_proced_item_w,
					nr_seq_proc_interno_item_w,
					1,
					clock_timestamp(),
					nm_usuario_p,
					0,
					'N',
					nr_seq_orcamento_proc_w);

				if (ie_gerar_lanc_aut_w = 'S') then
					CALL gerar_lanc_orc_automatico(null,
								nr_seq_orcamento_w,
								34,
								nr_seq_orcamento_proc_w,
								nm_usuario_p);
				end if;
				if (ie_gerar_assoc_w = 'S') then
					CALL Gerar_Proc_Assoc_orcamento(nr_seq_orcamento_w,nr_seq_orcamento_proc_w,nm_usuario_p);
				end if;
			end if;

			if (ie_gerar_itens_w = 'A') then
				open C02;
				loop
				fetch C02 into
					cd_procedimento_item_adic_w,
					ie_origem_proced_item_adic_w,
					nr_seq_proc_int_item_adic_w,
					ie_glosa_adic_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin

					if (nr_seq_proc_int_item_adic_w IS NOT NULL AND nr_seq_proc_int_item_adic_w::text <> '') and (ie_glosa_adic_w = 'T') then
						select	max(cd_procedimento),
							max(ie_origem_proced)
						into STRICT	cd_procedimento_item_adic_w,
							ie_origem_proced_item_adic_w
						from	proc_interno
						where	nr_sequencia = nr_seq_proc_int_item_adic_w;
					end if;

					select	nextval('orcamento_paciente_proc_seq')
					into STRICT	nr_seq_orcamento_proc_w
					;

					insert into orcamento_paciente_proc(
						 nr_sequencia_orcamento,
						 cd_procedimento,
						 ie_origem_proced,
						 nr_seq_proc_interno,
						 qt_procedimento,
						 dt_atualizacao,
						 nm_usuario,
						 vl_procedimento,
						 ie_valor_informado,
						 nr_sequencia)
					values (	 nr_seq_orcamento_w,
						 cd_procedimento_item_adic_w,
						 ie_origem_proced_item_adic_w,
						 nr_seq_proc_int_item_adic_w,
						 1,
						 clock_timestamp(),
						 nm_usuario_p,
						 0,
						 'N',
						 nr_seq_orcamento_proc_w);

					if (ie_gerar_lanc_aut_w = 'S') then
						CALL gerar_lanc_orc_automatico(null,
									  nr_seq_orcamento_w,
									  34,
									  nr_seq_orcamento_proc_w,
									  nm_usuario_p);
					end if;
					if (ie_gerar_assoc_w = 'S') then
						CALL Gerar_Proc_Assoc_orcamento(nr_seq_orcamento_w,nr_seq_orcamento_proc_w,nm_usuario_p);
					end if;

					end;
					end loop;
				close C02;
			end if;

			end;
		end loop;
		close C01;

		open C03;
		loop
		fetch C03 into
			cd_procedimento_lab_w,
			ie_origem_proced_lab_w,
			nr_seq_proc_interno_lab_w,
			nr_seq_exame_lab_w,
			ie_glosa_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			if (nr_seq_proc_interno_lab_w IS NOT NULL AND nr_seq_proc_interno_lab_w::text <> '') and (ie_glosa_w = 'T') then
				select	max(cd_procedimento),
						max(ie_origem_proced)
				into STRICT	cd_procedimento_lab_w,
						ie_origem_proced_lab_w
				from	proc_interno
				where	nr_sequencia		= nr_seq_proc_interno_lab_w;
			end if;

			select	nextval('orcamento_paciente_proc_seq')
			into STRICT	nr_seq_orcamento_proc_w
			;

			insert into orcamento_paciente_proc(
				 nr_sequencia_orcamento,
				 cd_procedimento,
				 ie_origem_proced,
				 nr_seq_proc_interno,
				 nr_seq_exame,
				 qt_procedimento,
				 dt_atualizacao,
				 nm_usuario,
				 vl_procedimento,
				 ie_valor_informado,
				 nr_sequencia)
			values (	 nr_seq_orcamento_w,
				 cd_procedimento_lab_w,
				 ie_origem_proced_lab_w,
				 nr_seq_proc_interno_lab_w,
				 nr_seq_exame_lab_w,
				 1,
				 clock_timestamp(),
				 nm_usuario_p,
				 0,
				 'N',
				 nr_seq_orcamento_proc_w);

			if (ie_gerar_assoc_w = 'S') then
				CALL Gerar_Proc_Assoc_orcamento(nr_seq_orcamento_w,nr_seq_orcamento_proc_w,nm_usuario_p);
			end if;
			end;
		end loop;
		close C03;
	end if;
	CALL Calcular_Orcamento_Paciente(nr_seq_orcamento_w,
					nm_usuario_p,
					cd_estabelecimento_p);
else

	if (cd_convenio_p IS NOT NULL AND cd_convenio_p::text <> '') then
		cd_convenio_w := cd_convenio_p;
	end if;

	if (cd_categoria_p IS NOT NULL AND cd_categoria_p::text <> '') then
		cd_categoria_w := cd_categoria_p;
	end if;

	if (cd_plano_p IS NOT NULL AND cd_plano_p::text <> '') then
		cd_plano_w := cd_plano_p;
	end if;

	insert into orcamento_paciente(nr_sequencia_orcamento,
			cd_estabelecimento,
			cd_pessoa_fisica,
			dt_orcamento,
			cd_convenio,
			cd_categoria,
			cd_plano,
			cd_condicao_pagamento,
			ie_status_orcamento,
			dt_atualizacao,
			nm_usuario,
			vl_deposito,
			ie_calculo_valor,
			ie_tipo_atendimento,
			cd_tipo_acomodacao,
			nr_seq_agecons,
			dt_validade)
		values (nr_seq_orcamento_w,
			cd_estabelecimento_p,
			cd_pessoa_fisica_w,
			clock_timestamp(),
			cd_convenio_w,
			cd_categoria_w,
			cd_plano_w,
			coalesce(cd_condicao_pagamento_w,1),
			1,
			clock_timestamp(),
			nm_usuario_p,
			0,
			'C',
			ie_tipo_atendimento_w,
			cd_tipo_acomodacao_w,
			nr_seq_agecons_p,
			clock_timestamp() + coalesce(qt_dias_validade_w,1));

	commit;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_orcamento_agecons ( nr_seq_agecons_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_plano_p text, ds_erro_p INOUT text) FROM PUBLIC;

