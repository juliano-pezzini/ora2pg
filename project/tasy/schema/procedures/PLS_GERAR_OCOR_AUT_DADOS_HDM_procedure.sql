-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_ocor_aut_dados_hdm ( nr_seq_ocor_filtro_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, ie_gerar_ocorrencia_p INOUT text, ie_tipo_ocorrencia_p INOUT text) AS $body$
DECLARE


cd_pessoa_beneficiario_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_seq_segurado_w			pls_segurado.nr_sequencia%type;
dt_aut_req_exec_w			timestamp;
ie_gerar_ocorrencia_w			varchar(1)	:= 'N';
count_programa_w			bigint	:= 0;
count_patologia_w			bigint	:= 0;
ie_regra_com_itens_w			varchar(1);
nr_seq_regra_hdm_w			pls_ocor_aut_filtro_hdm.nr_sequencia%type;
nr_seq_programa_w			mprev_programa.nr_sequencia%type;
nr_seq_patologia_w			diagnostico_interno.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_programa,
		nr_seq_patologia
	from	pls_ocor_aut_filtro_hdm
	where	nr_seq_ocor_aut_filtro	= nr_seq_ocor_filtro_p
	and	ie_situacao	= 'A';


BEGIN
/* Colocado o fim_dia, para considerar o mesmo dia, independente do horário */

if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then

	select	nr_seq_segurado,
		fim_dia(dt_solicitacao)
	into STRICT	nr_seq_segurado_w,
		dt_aut_req_exec_w
	from	pls_guia_plano
	where	nr_sequencia	= nr_seq_guia_p;

elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then

	select	nr_seq_segurado,
		fim_dia(dt_requisicao)
	into STRICT	nr_seq_segurado_w,
		dt_aut_req_exec_w
	from	pls_requisicao
	where	nr_sequencia	= nr_seq_requisicao_p;

elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then

	select	b.nr_seq_segurado,
		fim_dia(a.dt_execucao)
	into STRICT	nr_seq_segurado_w,
		dt_aut_req_exec_w
	from	pls_execucao_requisicao a,
		pls_requisicao b
	where	b.nr_sequencia	= a.nr_seq_requisicao
	and	a.nr_sequencia	= nr_seq_execucao_p;
end if;

begin
	select	cd_pessoa_fisica
	into STRICT	cd_pessoa_beneficiario_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
exception
when others then
	cd_pessoa_beneficiario_w := null;
end;

open C01;
loop
fetch C01 into
	nr_seq_regra_hdm_w,
	nr_seq_programa_w,
	nr_seq_patologia_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
		if ((nr_seq_programa_w IS NOT NULL AND nr_seq_programa_w::text <> '') and (coalesce(nr_seq_patologia_w::text, '') = '')) then
			select	count(1)
			into STRICT	count_programa_w
			from	mprev_participante y,
				mprev_programa_partic x
			where 	x.nr_seq_participante	= y.nr_sequencia
			and 	y.cd_pessoa_fisica	= cd_pessoa_beneficiario_w
			and 	x.nr_seq_programa	= nr_seq_programa_w
			and 	dt_aut_req_exec_w between x.dt_inclusao and coalesce(x.dt_exclusao,dt_aut_req_exec_w);

			if (count_programa_w > 0) then
				ie_gerar_ocorrencia_w	:= 'S';
				exit;
			end if;
		elsif ((coalesce(nr_seq_programa_w::text, '') = '') and (nr_seq_patologia_w IS NOT NULL AND nr_seq_patologia_w::text <> '')) then
			select	count(1)
			into STRICT	count_patologia_w
			from 	diagnostico_interno z,
				mprev_prog_diagnostico y,
				paciente_antec_clinico x
			where 	y.nr_seq_diag_interno	= z.nr_sequencia
			and 	z.cd_doenca_cid		= x.cd_doenca
			and 	x.cd_pessoa_fisica	= cd_pessoa_beneficiario_w
			and 	z.nr_sequencia		= nr_seq_patologia_w
			and (coalesce(x.dt_fim::text, '') = '' or x.dt_fim > dt_aut_req_exec_w)
			and (coalesce(x.dt_inativacao::text, '') = '' or x.dt_inativacao > dt_aut_req_exec_w);

			--Caso não tenha encontrado registro no primeiro select, executa o segundo.
			if (count_patologia_w <= 0) then
				select	count(1)
				into STRICT	count_patologia_w
				from 	diagnostico_int_cid_adic z,
					mprev_prog_diagnostico y,
					paciente_antec_clinico x
				where 	y.nr_seq_diag_interno	= z.nr_seq_diagnostico
				and 	z.cd_doenca_cid		= x.cd_doenca
				and 	x.cd_pessoa_fisica	= cd_pessoa_beneficiario_w
				and 	z.nr_seq_diagnostico	= nr_seq_patologia_w
				and (coalesce(x.dt_fim::text, '') = '' or x.dt_fim > dt_aut_req_exec_w)
				and (coalesce(x.dt_inativacao::text, '') = '' or x.dt_inativacao > dt_aut_req_exec_w);
			end if;

			if (count_patologia_w > 0) then
				ie_gerar_ocorrencia_w	:= 'S';
				exit;
			end if;
		elsif (nr_seq_programa_w IS NOT NULL AND nr_seq_programa_w::text <> '' AND nr_seq_patologia_w IS NOT NULL AND nr_seq_patologia_w::text <> '') then
			select	count(1)
			into STRICT	count_programa_w
			from	mprev_participante y,
				mprev_programa_partic x
			where 	x.nr_seq_participante	= y.nr_sequencia
			and 	y.cd_pessoa_fisica	= cd_pessoa_beneficiario_w
			and 	x.nr_seq_programa	= nr_seq_programa_w
			and 	dt_aut_req_exec_w between x.dt_inclusao and coalesce(x.dt_exclusao,dt_aut_req_exec_w);

			select	count(1)
			into STRICT	count_patologia_w
			from 	diagnostico_interno z,
				mprev_prog_diagnostico y,
				paciente_antec_clinico x
			where 	y.nr_seq_diag_interno	= z.nr_sequencia
			and 	z.cd_doenca_cid		= x.cd_doenca
			and 	x.cd_pessoa_fisica	= cd_pessoa_beneficiario_w
			and 	z.nr_sequencia		= nr_seq_patologia_w
			and (coalesce(x.dt_fim::text, '') = '' or x.dt_fim > dt_aut_req_exec_w)
			and (coalesce(x.dt_inativacao::text, '') = '' or x.dt_inativacao > dt_aut_req_exec_w);

			--Caso não tenha encontrado registro no primeiro select, executa o segundo.
			if (count_patologia_w <= 0) then
				select	count(1)
				into STRICT	count_patologia_w
				from 	diagnostico_int_cid_adic z,
					mprev_prog_diagnostico y,
					paciente_antec_clinico x
				where 	y.nr_seq_diag_interno	= z.nr_seq_diagnostico
				and 	z.cd_doenca_cid		= x.cd_doenca
				and 	x.cd_pessoa_fisica	= cd_pessoa_beneficiario_w
				and 	z.nr_seq_diagnostico	= nr_seq_patologia_w
				and (coalesce(x.dt_fim::text, '') = '' or x.dt_fim > dt_aut_req_exec_w)
				and (coalesce(x.dt_inativacao::text, '') = '' or x.dt_inativacao > dt_aut_req_exec_w);
			end if;

			if (count_programa_w > 0 AND count_patologia_w > 0) then
				ie_gerar_ocorrencia_w	:= 'S';
				exit;
			end if;
		end if;
	end;
end loop;
close C01;

if (ie_gerar_ocorrencia_w = 'S') then
	ie_regra_com_itens_w  :=  pls_obter_se_oco_aut_fil_itens(nr_seq_ocor_filtro_p);

	if (ie_regra_com_itens_w = 'S') then
		ie_tipo_ocorrencia_p := 'I';
	else
		ie_tipo_ocorrencia_p := 'C';
	end if;
end if;

ie_gerar_ocorrencia_p	:= ie_gerar_ocorrencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_ocor_aut_dados_hdm ( nr_seq_ocor_filtro_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, ie_gerar_ocorrencia_p INOUT text, ie_tipo_ocorrencia_p INOUT text) FROM PUBLIC;

