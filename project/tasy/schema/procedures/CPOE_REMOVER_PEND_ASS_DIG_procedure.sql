-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_remover_pend_ass_dig ( nr_atendimento_p prescr_medica.nr_atendimento%type, ds_prescricoes_p text, nr_seq_cpoe_p bigint, ie_tipo_item_p text) AS $body$
DECLARE


ds_prescricoes_w		varchar(500);
nm_tabela_rep_w			varchar(30);
ie_medico_w				varchar(1);
dt_assinatura_medico_w	tasy_assinatura_digital.dt_assinatura%type;

c01 CURSOR FOR
SELECT	a.nr_prescricao,
		a.cd_prescritor,
		a.cd_estabelecimento,
		a.cd_perfil_ativo,
		a.nm_usuario,
		a.dt_liberacao_medico,
		a.cd_pessoa_fisica,
		a.nr_seq_assinatura,
		a.nr_seq_assinatura_enf,
		a.dt_liberacao
from	prescr_medica a,
		table(lista_pck.obter_lista(ds_prescricoes_w)) b
where	a.nr_atendimento = nr_atendimento_p
and		a.nr_prescricao = b.nr_registro;

BEGIN

if (ds_prescricoes_p IS NOT NULL AND ds_prescricoes_p::text <> '') then
	ds_prescricoes_w := replace(replace(ds_prescricoes_p,';',','),'"','');
else
	if (ie_tipo_item_p = 'DI') then
		ds_prescricoes_w := to_char(obter_nr_prescr_seq_cpoe('D', nr_seq_cpoe_p));
	elsif (ie_tipo_item_p = 'D') then
		ds_prescricoes_w := to_char(obter_nr_prescr_seq_cpoe('DO', nr_seq_cpoe_p));
	else -- M, MAT, SOL, P, O, R, S, LD, J, HM
		ds_prescricoes_w := to_char(obter_nr_prescr_seq_cpoe(ie_tipo_item_p, nr_seq_cpoe_p));
	end if;
end if;

for r_c01 in c01 loop

	if (obter_se_existe_item_nao_ass(r_c01.nr_prescricao) = 'N') then

		CALL wheb_assist_pck.set_informacoes_usuario(wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario);

		if (r_c01.cd_prescritor IS NOT NULL AND r_c01.cd_prescritor::text <> '') and ((wheb_assist_pck.get_cd_certificado IS NOT NULL AND wheb_assist_pck.get_cd_certificado::text <> '') or (wheb_assist_pck.get_gerar_sem_certificado = 'S')) then
			ie_medico_w	:= obter_se_medico(r_c01.cd_prescritor, 'M');

			CALL wheb_assist_pck.set_nr_seq_projeto_ass(1);

			if (ie_medico_w = 'S') then
				if (r_c01.dt_liberacao_medico IS NOT NULL AND r_c01.dt_liberacao_medico::text <> '') then
					CALL gerar_registro_pendente_pep(
						cd_tipo_registro_p			=> 'XREP',
						nr_sequencia_registro_p		=> r_c01.nr_prescricao,
						cd_pessoa_fisica_p			=> r_c01.cd_pessoa_fisica,
						nr_atendimento_p			=> nr_atendimento_p,
						nm_usuario_p				=> r_c01.nm_usuario,
						ie_tipo_pendencia_p			=> 'L',
						cd_funcao_pend_p			=> obter_funcao_ativa);
				end if;

				dt_assinatura_medico_w := obter_data_assinatura_digital(r_c01.nr_seq_assinatura);

				if (dt_assinatura_medico_w IS NOT NULL AND dt_assinatura_medico_w::text <> '') or (r_c01.dt_liberacao_medico IS NOT NULL AND r_c01.dt_liberacao_medico::text <> '' AND not wheb_assist_pck.get_se_gera_assinatura) then
					CALL gerar_registro_pendente_pep(
						cd_tipo_registro_p			=> 'XREP',
						nr_sequencia_registro_p		=> r_c01.nr_prescricao,
						cd_pessoa_fisica_p			=> r_c01.cd_pessoa_fisica,
						nr_atendimento_p			=> nr_atendimento_p,
						nm_usuario_p				=> r_c01.nm_usuario,
						ie_tipo_pendencia_p			=> 'A',
						cd_funcao_pend_p			=> obter_funcao_ativa);
				end if;
			end if;

			if ((obter_data_assinatura_digital(r_c01.nr_seq_assinatura_enf) IS NOT NULL AND (obter_data_assinatura_digital(r_c01.nr_seq_assinatura_enf))::text <> '')) or
				(r_c01.dt_liberacao IS NOT NULL AND r_c01.dt_liberacao::text <> '' AND not wheb_assist_pck.get_se_gera_assinatura) or
				((trunc(r_c01.dt_liberacao,'mi') = trunc(r_c01.dt_liberacao_medico,'mi')) and (r_c01.dt_liberacao IS NOT NULL AND r_c01.dt_liberacao::text <> '') and (r_c01.dt_liberacao_medico IS NOT NULL AND r_c01.dt_liberacao_medico::text <> '') and (not wheb_assist_pck.get_se_gera_assinatura)) then
					CALL gerar_registro_pendente_pep(
						cd_tipo_registro_p			=> 'XREP',
						nr_sequencia_registro_p		=> r_c01.nr_prescricao,
						cd_pessoa_fisica_p			=> r_c01.cd_pessoa_fisica,
						nr_atendimento_p			=> nr_atendimento_p,
						nm_usuario_p				=> r_c01.nm_usuario,
						ie_tipo_pendencia_p			=> 'A',
						cd_funcao_pend_p			=> obter_funcao_ativa);
			end if;
		end if;
	end if;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_remover_pend_ass_dig ( nr_atendimento_p prescr_medica.nr_atendimento%type, ds_prescricoes_p text, nr_seq_cpoe_p bigint, ie_tipo_item_p text) FROM PUBLIC;

