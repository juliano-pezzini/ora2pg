-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_solic_entreg_mat_med ( nr_seq_requisicao_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar solicitação de entrega.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ x]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_procedimento_w			bigint;
ie_origem_w				bigint;
ie_origem_proced_w			bigint;
cd_area_w				bigint;
cd_especialidade_w			bigint;
cd_grupo_w				bigint;
nr_seq_regra_w				bigint;
nr_seq_material_w			bigint;
nr_seq_mat_req_w			bigint;
nr_seq_req_proc_w			bigint;
nr_seq_req_mat_w			bigint;
nr_seq_prestador_regra_w		pls_prestador.nr_sequencia%type;
nr_seq_prestador_req_w			pls_prestador.nr_sequencia%type;
nr_seq_grupo_prestador_regra_w		pls_preco_grupo_prestador.nr_sequencia%type;
ie_tipo_intercambio_w			varchar(255);

ie_regra_grupo_prestador		varchar(1);
ie_regra_prestador			varchar(1);
inserir_entrega_w			varchar(1);

C01 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_sequencia
	from	pls_requisicao_proc	a
	where	a.nr_seq_requisicao	= nr_seq_requisicao_p
	and	a.ie_status		in ('S','P');

C02 CURSOR FOR
	SELECT	a.nr_seq_material,
		a.nr_sequencia
	from	pls_requisicao_mat	a
	where	a.nr_seq_requisicao	= nr_seq_requisicao_p
	and	a.ie_status		in ('S','P');

--Filtro apenas sobre os procedimentos da requisição
C03 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_prestador
	from	pls_regra_entrega_mat_med
	where	coalesce(cd_procedimento,coalesce(cd_procedimento_w,0))		= coalesce(cd_procedimento_w,0)
	and	coalesce(cd_grupo_proc,coalesce(cd_grupo_w,0))			= coalesce(cd_grupo_w,0)
	and	coalesce(cd_especialidade, coalesce(cd_especialidade_w,0))	= coalesce(cd_especialidade_w,0)
	and	coalesce(ie_origem_proced, coalesce(ie_origem_w,0))		= coalesce(ie_origem_w,0)
	and	coalesce(cd_area_procedimento, coalesce(cd_area_w,0))		= coalesce(cd_area_w,0)
	and	coalesce(nr_seq_material,coalesce(nr_seq_mat_req_w,0))		= coalesce(nr_seq_mat_req_w,0)
	and	clock_timestamp() between dt_inicio_vigencia and fim_dia(coalesce(dt_fim_vigencia, clock_timestamp()))
	and	coalesce(nr_seq_material::text, '') = ''
	and	coalesce(nr_seq_prestador::text, '') = ''
	and	coalesce(nr_seq_grupo_prestador::text, '') = ''
	order by
		coalesce(cd_procedimento,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0),
		coalesce(nr_seq_material,0);

--Filtro apenas sobre os materiais da requisição
C04 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_prestador
	from	pls_regra_entrega_mat_med
	where	coalesce(cd_procedimento::text, '') = ''
	and	coalesce(cd_grupo_proc::text, '') = ''
	and	coalesce(cd_especialidade::text, '') = ''
	and	coalesce(cd_area_procedimento::text, '') = ''
	and 	clock_timestamp() between dt_inicio_vigencia and fim_dia(coalesce(dt_fim_vigencia, clock_timestamp()))
	and	nr_seq_material		= nr_seq_mat_req_w
	and	coalesce(nr_seq_prestador::text, '') = ''
	and	coalesce(nr_seq_grupo_prestador::text, '') = '';

--Filtro sobre os procedimentos e sobre o prestador
C05 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_prestador,
		nr_seq_grupo_prestador
	from	pls_regra_entrega_mat_med
	where	coalesce(nr_seq_material::text, '') = ''
	and	coalesce(cd_procedimento, coalesce(cd_procedimento_w,0))		= coalesce(cd_procedimento_w,0)
	and	coalesce(cd_grupo_proc, coalesce(cd_grupo_w,0))			= coalesce(cd_grupo_w,0)
	and	coalesce(cd_especialidade, coalesce(cd_especialidade_w,0))	= coalesce(cd_especialidade_w,0)
	and	((coalesce(ie_origem_proced, coalesce(ie_origem_w,0)) 		= coalesce(ie_origem_w,0)) and (cd_procedimento IS NOT NULL AND cd_procedimento::text <> ''))
	and	coalesce(cd_area_procedimento, coalesce(cd_area_w,0))		 = coalesce(cd_area_w,0)
	and	clock_timestamp() between dt_inicio_vigencia and fim_dia(coalesce(dt_fim_vigencia, clock_timestamp()))
	and		((nr_seq_prestador IS NOT NULL AND nr_seq_prestador::text <> '') or (nr_seq_grupo_prestador IS NOT NULL AND nr_seq_grupo_prestador::text <> ''))
	--Obriga que tenha alguma informação sobre procedimento na regra
	and	((cd_procedimento IS NOT NULL AND cd_procedimento::text <> '') or (cd_grupo_proc IS NOT NULL AND cd_grupo_proc::text <> '') or (cd_especialidade IS NOT NULL AND cd_especialidade::text <> '') or (ie_origem_proced IS NOT NULL AND ie_origem_proced::text <> '') or (cd_area_procedimento IS NOT NULL AND cd_area_procedimento::text <> ''))
	order by
		coalesce(cd_procedimento,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0),
		coalesce(nr_seq_material,0);

--Filtro sobre os materiais e sobre o prestador
C06 CURSOR FOR
	SELECT  nr_sequencia,
		nr_seq_prestador,
		nr_seq_grupo_prestador
	from	pls_regra_entrega_mat_med
	where	coalesce(cd_procedimento::text, '') = ''
	and	coalesce(cd_grupo_proc::text, '') = ''
	and	coalesce(cd_especialidade::text, '') = ''
	and	coalesce(cd_area_procedimento::text, '') = ''
	and	clock_timestamp() between dt_inicio_vigencia and fim_dia(coalesce(dt_fim_vigencia, clock_timestamp()))
	and	nr_seq_material = nr_seq_mat_req_w
	and	((nr_seq_prestador IS NOT NULL AND nr_seq_prestador::text <> '') or (nr_seq_grupo_prestador IS NOT NULL AND nr_seq_grupo_prestador::text <> ''))
	order by
		nr_seq_material;

--Filtro apenas sobre o prestador
C07 CURSOR FOR
	SELECT  nr_sequencia,
		nr_seq_prestador,
		nr_seq_grupo_prestador
	from	pls_regra_entrega_mat_med
	where	coalesce(cd_procedimento::text, '') = ''
	and	coalesce(cd_grupo_proc::text, '') = ''
	and	coalesce(cd_especialidade::text, '') = ''
	and	coalesce(cd_area_procedimento::text, '') = ''
	and	coalesce(nr_seq_material::text, '') = ''
	and	clock_timestamp() between dt_inicio_vigencia and fim_dia(coalesce(dt_fim_vigencia, clock_timestamp()))
	and	((nr_seq_prestador = nr_seq_prestador_req_w) or (nr_seq_grupo_prestador IS NOT NULL AND nr_seq_grupo_prestador::text <> ''));

C08 CURSOR FOR
	SELECT	nr_seq_material
	from	pls_regra_mat_entrega
	where	nr_seq_regra_entrega	= nr_seq_regra_w;



BEGIN

begin
	select	nr_seq_prestador
	into STRICT	nr_seq_prestador_req_w
	from	pls_requisicao
	where	nr_sequencia = nr_seq_requisicao_p;
exception
when others then
	nr_seq_prestador_req_w := null;
end;

begin
	select	ie_tipo_intercambio
	into STRICT	ie_tipo_intercambio_w
	from	pls_requisicao
	where	nr_sequencia	= nr_seq_requisicao_p;
exception
when others then
	ie_tipo_intercambio_w	:= 'X';
end;

if (coalesce(ie_tipo_intercambio_w,'X')	<> 'E') then
	open C01;
	loop
	fetch C01 into
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_req_proc_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		SELECT * FROM pls_obter_estrut_proc(	cd_procedimento_w, ie_origem_proced_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w;
		open C03;
		loop
		fetch C03 into
			nr_seq_regra_w,
			nr_seq_prestador_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			open C08;
			loop
			fetch C08 into
				nr_seq_material_w;
			EXIT WHEN NOT FOUND; /* apply on C08 */
				begin
				insert	into pls_solic_entrega_mat_med(nr_sequencia, dt_atualizacao, nm_usuario,
					 dt_solicitacao, nr_seq_prestador, nr_seq_requisicao,
					 nr_seq_material, nr_seq_req_proc, ie_estagio)
				values (nextval('pls_solic_entrega_mat_med_seq'), clock_timestamp(), nm_usuario_p,
					 clock_timestamp(), coalesce(nr_seq_prestador_regra_w,nr_seq_prestador_req_w), nr_seq_requisicao_p,
					 nr_seq_material_w, nr_seq_req_proc_w, 1);
				end;
			end loop;
			close C08;
			end;
		end loop;
		close C03;

		open C05;
		loop
		fetch C05 into
			nr_seq_regra_w,
			nr_seq_prestador_regra_w,
			nr_seq_grupo_prestador_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin
			--Restringir a inserção pelo prestador da requisição ou pelo grupo do prestador
			inserir_entrega_w 			:= 'N';
			ie_regra_grupo_prestador 	:= 'N';
			ie_regra_prestador 			:= 'N';

			--Valida grupo de prestador requisição
			if (nr_seq_grupo_prestador_regra_w IS NOT NULL AND nr_seq_grupo_prestador_regra_w::text <> '') then
				ie_regra_grupo_prestador := pls_obter_se_grupo_prestador(nr_seq_prestador_req_w, nr_seq_grupo_prestador_regra_w);
			else
				ie_regra_grupo_prestador := 'S';
			end if;

			--Valida prestador da requisição
			if (nr_seq_prestador_regra_w IS NOT NULL AND nr_seq_prestador_regra_w::text <> '') then
				if (nr_seq_prestador_req_w = nr_seq_prestador_regra_w) then
					ie_regra_prestador := 'S';
				end if;
			else
				ie_regra_prestador := 'S';
			end if;

			--Se as regras estiverem válida, inseri os materiais para solicitação de entrega
			if (ie_regra_prestador = 'S' AND ie_regra_grupo_prestador = 'S') then
				inserir_entrega_w := 'S';
			end if;

			if (inserir_entrega_w = 'S') then
				open C08;
				loop
				fetch C08 into
					nr_seq_material_w;
				EXIT WHEN NOT FOUND; /* apply on C08 */
					begin
					insert	into pls_solic_entrega_mat_med(nr_sequencia, dt_atualizacao, nm_usuario,
						 dt_solicitacao, nr_seq_prestador, nr_seq_requisicao,
						 nr_seq_material, nr_seq_req_proc, ie_estagio)
					values (nextval('pls_solic_entrega_mat_med_seq'), clock_timestamp(), nm_usuario_p,
						 clock_timestamp(), nr_seq_prestador_regra_w, nr_seq_requisicao_p,
						 nr_seq_material_w, nr_seq_req_proc_w, 1);
					end;
				end loop;
				close C08;
			end if;

			end;
		end loop;
		close C05;

		end;
	end loop;
	close C01;

	open C02;
	loop
	fetch C02 into
		nr_seq_mat_req_w,
		nr_seq_req_mat_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		open C04;
		loop
		fetch C04 into
			nr_seq_regra_w,
			nr_seq_prestador_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin

			open C08;
			loop
			fetch C08 into
				nr_seq_material_w;
			EXIT WHEN NOT FOUND; /* apply on C08 */
				begin
				insert	into pls_solic_entrega_mat_med(nr_sequencia, dt_atualizacao, nm_usuario,
					 dt_solicitacao, nr_seq_prestador, nr_seq_requisicao,
					 nr_seq_material, nr_seq_req_mat, ie_estagio)
				values (nextval('pls_solic_entrega_mat_med_seq'), clock_timestamp(), nm_usuario_p,
					 clock_timestamp(), nr_seq_prestador_regra_w, nr_seq_requisicao_p,
					 nr_seq_material_w, nr_seq_req_mat_w, 1);
				end;
			end loop;
			close C08;

			end;
		end loop;
		close C04;

		open C06;
		loop
		fetch C06 into
			nr_seq_regra_w,
			nr_seq_prestador_regra_w,
			nr_seq_grupo_prestador_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin
			--Restringir a inserção pelo prestador da requisição ou pelo grupo do prestador
			inserir_entrega_w 			:= 'N';
			ie_regra_grupo_prestador 		:= 'N';
			ie_regra_prestador 			:= 'N';

			--Valida grupo de prestador requisição
			if (nr_seq_grupo_prestador_regra_w IS NOT NULL AND nr_seq_grupo_prestador_regra_w::text <> '') then
				ie_regra_grupo_prestador := pls_obter_se_grupo_prestador(nr_seq_prestador_req_w, nr_seq_grupo_prestador_regra_w);
			else
				ie_regra_grupo_prestador := 'S';
			end if;

			--Valida prestador da requisição
			if (nr_seq_prestador_regra_w IS NOT NULL AND nr_seq_prestador_regra_w::text <> '') then
				if (nr_seq_prestador_req_w = nr_seq_prestador_regra_w) then
					ie_regra_prestador := 'S';
				end if;
			else
				ie_regra_prestador := 'S';
			end if;

			--Se as regras estiverem válida, inseri os materiais para solicitação de entrega
			if (ie_regra_prestador = 'S' AND ie_regra_grupo_prestador = 'S') then
				inserir_entrega_w := 'S';
			end if;

			if (inserir_entrega_w = 'S') then
				open C08;
				loop
				fetch C08 into
					nr_seq_material_w;
				EXIT WHEN NOT FOUND; /* apply on C08 */
					begin
					insert	into pls_solic_entrega_mat_med(nr_sequencia, dt_atualizacao, nm_usuario,
						 dt_solicitacao, nr_seq_prestador, nr_seq_requisicao,
						 nr_seq_material, nr_seq_req_mat, ie_estagio)
					values (nextval('pls_solic_entrega_mat_med_seq'), clock_timestamp(), nm_usuario_p,
						 clock_timestamp(), nr_seq_prestador_regra_w, nr_seq_requisicao_p,
						 nr_seq_material_w, nr_seq_req_mat_w, 1);
					end;
				end loop;
				close C08;
			end if;

			end;
		end loop;
		close C06;

		end;
	end loop;
	close C02;

	open C07;
	loop
	fetch C07 into
		nr_seq_regra_w,
		nr_seq_prestador_regra_w,
		nr_seq_grupo_prestador_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C07 */
		begin
			--Restringir a inserção pelo prestador da requisição ou pelo grupo do prestador
			inserir_entrega_w 			:= 'N';
			ie_regra_grupo_prestador 	:= 'N';
			ie_regra_prestador 			:= 'N';

			--Valida grupo de prestador requisição
			if (nr_seq_grupo_prestador_regra_w IS NOT NULL AND nr_seq_grupo_prestador_regra_w::text <> '') then
				ie_regra_grupo_prestador := pls_obter_se_grupo_prestador(nr_seq_prestador_req_w, nr_seq_grupo_prestador_regra_w);
			else
				ie_regra_grupo_prestador := 'S';
			end if;

			--Valida prestador da requisição
			if (nr_seq_prestador_regra_w IS NOT NULL AND nr_seq_prestador_regra_w::text <> '') then
				if (nr_seq_prestador_req_w = nr_seq_prestador_regra_w) then
					ie_regra_prestador := 'S';
				end if;
			else
				ie_regra_prestador := 'S';
			end if;

			--Se as regras estiverem válida, inseri os materiais para solicitação de entrega
			if (ie_regra_prestador = 'S' AND ie_regra_grupo_prestador = 'S') then
				inserir_entrega_w := 'S';
			end if;

			if (inserir_entrega_w = 'S') then
				open C08;
				loop
				fetch C08 into
					nr_seq_material_w;
				EXIT WHEN NOT FOUND; /* apply on C08 */
					begin
					insert	into pls_solic_entrega_mat_med(nr_sequencia, dt_atualizacao, nm_usuario,
						 dt_solicitacao, nr_seq_prestador, nr_seq_requisicao,
						 nr_seq_material, nr_seq_req_mat, ie_estagio)
					values (nextval('pls_solic_entrega_mat_med_seq'), clock_timestamp(), nm_usuario_p,
						 clock_timestamp(), nr_seq_prestador_regra_w, nr_seq_requisicao_p,
						 nr_seq_material_w, nr_seq_req_mat_w, 1);
					end;
				end loop;
				close C08;
			end if;
		end;
	end loop;
	close C07;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_solic_entreg_mat_med ( nr_seq_requisicao_p bigint, nm_usuario_p text) FROM PUBLIC;

