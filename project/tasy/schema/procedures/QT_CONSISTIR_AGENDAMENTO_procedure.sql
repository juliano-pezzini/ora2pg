-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE qt_consistir_agendamento (dt_agenda_p timestamp, cd_estabelecimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, ie_permite_p INOUT text) AS $body$
DECLARE


cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
hr_inicio_w		timestamp;
cd_area_proced_w	bigint;
cd_espec_proced_w	bigint;
cd_grupo_proced_w	bigint;
nr_seq_regra_w		bigint;
qt_tempo_w		bigint;
ie_permite_w		varchar(1);

C01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno,
		hr_inicio
	from	agenda_paciente
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	and	dt_agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86399/86400
	AND	ie_status_agenda NOT IN ('B','C','L');

C02 CURSOR FOR
	SELECT	coalesce(nr_sequencia,0)
	from	qt_tempo_entre_exame
	where	((cd_area_procedimento = cd_area_proced_w) or (coalesce(cd_area_procedimento::text, '') = ''))
	and	((cd_especialidade = cd_espec_proced_w) or (coalesce(cd_especialidade::text, '') = ''))
	and	((cd_grupo_proc = cd_grupo_proced_w) or (coalesce(cd_grupo_proc::text, '') = ''))
	and	((cd_procedimento = cd_procedimento_w) or (coalesce(cd_procedimento::text, '') = ''))
	and	((coalesce(cd_procedimento::text, '') = '') or ((ie_origem_proced = ie_origem_proced_w) or (coalesce(ie_origem_proced::text, '') = '')))
	and	((nr_seq_proc_interno = nr_seq_proc_interno_w) or (coalesce(nr_seq_proc_interno::text, '') = ''))
	order by coalesce(cd_procedimento,0),
		coalesce(nr_seq_proc_interno,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0);

C03 CURSOR FOR
	SELECT	b.cd_procedimento,
		b.ie_origem_proced,
		b.nr_seq_proc_interno,
		a.dt_agenda
	from	agenda_consulta a,
		agenda_consulta_proc b
	where	a.nr_sequencia = b.nr_seq_agenda
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_p
	and	a.dt_agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86399/86400
	AND	ie_status_agenda NOT IN ('B','C','L');


BEGIN
ie_permite_w	:= 'S';

open C01;
loop
fetch C01 into
	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_proc_interno_w,
	hr_inicio_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	coalesce(max(cd_area_procedimento),0),
		coalesce(max(cd_especialidade),0),
		coalesce(max(cd_grupo_proc),0)
	into STRICT	cd_area_proced_w,
		cd_espec_proced_w,
		cd_grupo_proced_w
	from	estrutura_procedimento_v
	where	cd_procedimento = cd_procedimento_w
	and	ie_origem_proced = ie_origem_proced_w;

	open C02;
	loop
	fetch C02 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		nr_seq_regra_w := nr_seq_regra_w;
		end;
	end loop;
	close C02;

	if (nr_seq_regra_w > 0) then
		select	max(qt_tempo_entre_exame)
		into STRICT	qt_tempo_w
		from	qt_tempo_entre_exame
		where	nr_sequencia  = nr_seq_regra_w;
		if (qt_tempo_w > 0) then
			qt_tempo_w := qt_tempo_w - 1;
			if	((dt_agenda_p < (hr_inicio_w - qt_tempo_w/1440)) or (dt_agenda_p > (hr_inicio_w + qt_tempo_w/1440))) then
				ie_permite_w := 'S';
			else
				ie_permite_w := 'N';
			end if;
		else
			ie_permite_w := 'S';
		end if;
	else
		ie_permite_w	:= 'S';
	end if;

	end;
end loop;
close C01;

if (ie_permite_w = 'S') then
	open C03;
	loop
	fetch C03 into
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_proc_interno_w,
		hr_inicio_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		select	coalesce(max(cd_area_procedimento),0),
			coalesce(max(cd_especialidade),0),
			coalesce(max(cd_grupo_proc),0)
		into STRICT	cd_area_proced_w,
			cd_espec_proced_w,
			cd_grupo_proced_w
		from	estrutura_procedimento_v
		where	cd_procedimento = cd_procedimento_w
		and	ie_origem_proced = ie_origem_proced_w;

		open C02;
		loop
		fetch C02 into
			nr_seq_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			nr_seq_regra_w := nr_seq_regra_w;
			end;
		end loop;
		close C02;

		if (nr_seq_regra_w > 0) then
			select	max(qt_tempo_entre_exame)
			into STRICT	qt_tempo_w
			from	qt_tempo_entre_exame
			where	nr_sequencia  = nr_seq_regra_w;
			if (qt_tempo_w > 0) then
				qt_tempo_w := qt_tempo_w - 1;
				if	((dt_agenda_p < (hr_inicio_w - qt_tempo_w/1440)) or (dt_agenda_p > (hr_inicio_w + qt_tempo_w/1440))) then
					ie_permite_w := 'S';
				else
					ie_permite_w := 'N';
				end if;
			else
				ie_permite_w := 'S';
			end if;
		else
			ie_permite_w	:= 'S';
		end if;

		end;
	end loop;
	close C03;
end if;

ie_permite_p	:= ie_permite_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE qt_consistir_agendamento (dt_agenda_p timestamp, cd_estabelecimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, ie_permite_p INOUT text) FROM PUBLIC;

