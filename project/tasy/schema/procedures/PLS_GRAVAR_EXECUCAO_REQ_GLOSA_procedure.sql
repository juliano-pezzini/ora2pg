-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gravar_execucao_req_glosa ( cd_motivo_glosa_p text, nr_seq_execucao_p bigint, nr_seq_exec_proc_p bigint, nr_seq_exec_mat_p bigint, ds_observacao_p text, nm_usuario_p text, nr_seq_prestador_p bigint, cd_estabelecimento_p bigint, nr_seq_ocorrencia_p bigint, ds_parametro_1 text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gravar as glosas das execuções da requisição.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_motivo_glosa_w           bigint;
qt_glosa_w                      integer;
ie_consistir_w                  varchar(1);
nr_seq_outorgante_w             bigint;
nr_seq_ocorrencia_glosa_w	bigint;
nr_seq_segurado_w		bigint;
ie_nivel_liberacao_w		bigint;
nr_seq_nivel_lib_w		bigint;
ie_acao_pls_w			varchar(10);
qt_registro_w			bigint	:= 0;
ie_auditoria_w			varchar(1);
ie_finalizar_analise_w		varchar(1);
ie_ocorrencia_w			pls_controle_estab.ie_ocorrencia%type := 'N';

C01 CURSOR(	ie_ocorrencia_pc	pls_controle_estab.ie_ocorrencia%type,
		cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type) FOR
	SELECT	nr_sequencia
	from	pls_ocorrencia
	where	nr_seq_motivo_glosa		= nr_seq_motivo_glosa_w
	and	ie_glosa			= 'S'
	and	ie_situacao			= 'A'
	and	coalesce(nr_seq_ocorrencia_p,0)	= 0 --Gerar a ocorrêncioa da glosa interna somente quando esta for disparada mas não quando for  gerada a partir de uma ocorrência normal com glosa vinculada.
	and	ie_ocorrencia_pc		= 'N'
	
union all

	SELECT	nr_sequencia
	from	pls_ocorrencia
	where	nr_seq_motivo_glosa		= nr_seq_motivo_glosa_w
	and	ie_glosa			= 'S'
	and	ie_situacao			= 'A'
	and	coalesce(nr_seq_ocorrencia_p,0)	= 0 --Gerar a ocorrêncioa da glosa interna somente quando esta for disparada mas não quando for  gerada a partir de uma ocorrência normal com glosa vinculada.
	and	ie_ocorrencia_pc		= 'S'
	and	cd_estabelecimento		= cd_estabelecimento_pc
	order by 1;


BEGIN
ie_ocorrencia_w := pls_obter_se_controle_estab('GO');

select  coalesce(nr_sequencia,0),
	ie_acao_pls
into STRICT    nr_seq_motivo_glosa_w,
	ie_acao_pls_w
from    tiss_motivo_glosa
where   cd_motivo_tiss  = cd_motivo_glosa_p
and     coalesce(cd_convenio::text, '') = '';

select  max(nr_sequencia)
into STRICT    nr_seq_outorgante_w
from    pls_outorgante
where   cd_estabelecimento      = cd_estabelecimento_p;

if (nr_seq_motivo_glosa_w <> 0) then
       if (ie_acao_pls_w	= 'S') then

		if (ie_ocorrencia_w = 'N') then
			/* Verificar se a glosa está vinculada a uma ocorrência do tipo "Glosa interna" */

			select	count(*)
			into STRICT	qt_registro_w
			from	pls_ocorrencia
			where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
			and	ie_glosa		= 'S'
			and	ie_situacao		= 'A';
		else
			/* Verificar se a glosa está vinculada a uma ocorrência do tipo "Glosa interna" */

			select	count(*)
			into STRICT	qt_registro_w
			from	pls_ocorrencia
			where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
			and	ie_glosa		= 'S'
			and	ie_situacao		= 'A'
			and	cd_estabelecimento	= cd_estabelecimento_p;
		end if;

		if (qt_registro_w	> 0) then

			if (ie_ocorrencia_w = 'N') then
				select  coalesce(max('S'),'N')
				into STRICT	ie_consistir_w
				from	tiss_motivo_glosa 	a,
					pls_glosa_evento 	b
				where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
				and	ie_evento		= 'CG'
				and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
				and	b.ie_plano		= 'S';
			else
				select  coalesce(max('S'),'N')
				into STRICT	ie_consistir_w
				from	tiss_motivo_glosa 	a,
					pls_glosa_evento 	b
				where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
				and	ie_evento		= 'CG'
				and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
				and	b.ie_plano		= 'S'
				and	b.cd_estabelecimento	= cd_estabelecimento_p;
			end if;
		end if;
	else
		begin
		if (ie_ocorrencia_w = 'N') then
			select  coalesce(c.ie_consistir,'S')
			into STRICT	ie_consistir_w
			from	tiss_motivo_glosa a,
				pls_glosa_evento b,
				pls_outorgante_glosa d,
				pls_prestador_glosa c
			where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
			and	d.nr_sequencia		= c.nr_seq_outorg_glosa
			and	d.nr_seq_evento_glosa 	= b.nr_sequencia
			and	nr_seq_prestador	= nr_seq_prestador_p
			and	ie_evento		= 'CG'
			and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
			and	b.ie_plano		= 'S';
		else
			select  coalesce(c.ie_consistir,'S')
			into STRICT	ie_consistir_w
			from	tiss_motivo_glosa a,
				pls_glosa_evento b,
				pls_outorgante_glosa d,
				pls_prestador_glosa c
			where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
			and	d.nr_sequencia		= c.nr_seq_outorg_glosa
			and	d.nr_seq_evento_glosa 	= b.nr_sequencia
			and	nr_seq_prestador	= nr_seq_prestador_p
			and	ie_evento		= 'CG'
			and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
			and	b.ie_plano		= 'S'
			and	b.cd_estabelecimento	= cd_estabelecimento_p;
		end if;
		exception
		when others then
			begin
			if (ie_ocorrencia_w = 'N') then
				select  coalesce(d.ie_consistir,'S')
				into STRICT	ie_consistir_w
				from	tiss_motivo_glosa a,
					pls_glosa_evento b,
					pls_outorgante_glosa d
				where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
				and	d.nr_seq_evento_glosa 	= b.nr_sequencia
				and	ie_evento		= 'CG'
				and	nr_seq_outorgante	= nr_seq_outorgante_w
				and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
				and	b.ie_plano		= 'S';
			else
				select  coalesce(d.ie_consistir,'S')
				into STRICT	ie_consistir_w
				from	tiss_motivo_glosa a,
					pls_glosa_evento b,
					pls_outorgante_glosa d
				where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
				and	d.nr_seq_evento_glosa 	= b.nr_sequencia
				and	ie_evento		= 'CG'
				and	nr_seq_outorgante	= nr_seq_outorgante_w
				and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
				and	b.ie_plano		= 'S'
				and	b.cd_estabelecimento	= cd_estabelecimento_p;
			end if;
			exception
			when others then
				begin
				if (ie_ocorrencia_w = 'N') then
					select  'S'
					into STRICT	ie_consistir_w
					from	tiss_motivo_glosa 	a,
						pls_glosa_evento 	b
					where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
					and	ie_evento		= 'CG'
					and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
					and	b.ie_plano		= 'S';
				else
					select  'S'
					into STRICT	ie_consistir_w
					from	tiss_motivo_glosa 	a,
						pls_glosa_evento 	b
					where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
					and	ie_evento		= 'CG'
					and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
					and	b.ie_plano		= 'S'
					and	b.cd_estabelecimento	= cd_estabelecimento_p;
				end if;
				exception
				when others then
					ie_consistir_w 		:= 'N'; /* Felipe - OS 283878 - Mudei para N e coloquei o select acima, pois quando NÃO tem evento estava gerando glosa */
				end;
			end;
		end;
	end if;

	if (coalesce(nr_seq_ocorrencia_p,0) > 0) then
		ie_consistir_w := 'S';
	end if;

	if (nr_seq_exec_proc_p IS NOT NULL AND nr_seq_exec_proc_p::text <> '') then
		select  count(1)
		into STRICT    qt_glosa_w
		from    pls_requisicao_glosa
		where   nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
		and     nr_seq_exec_proc	= nr_seq_exec_proc_p;
	elsif (nr_seq_exec_mat_p IS NOT NULL AND nr_seq_exec_mat_p::text <> '') then
		select  count(1)
		into STRICT    qt_glosa_w
		from    pls_requisicao_glosa
		where   nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
		and     nr_seq_exec_mat		= nr_seq_exec_mat_p;
	else
		qt_glosa_w := 0;
	end if;

        if      (qt_glosa_w = 0 AND ie_consistir_w = 'S') then
                insert into pls_requisicao_glosa(nr_sequencia, ds_observacao, dt_atualizacao,
                        dt_atualizacao_nrec, nm_usuario, nm_usuario_nrec,
                        nr_seq_motivo_glosa, nr_seq_exec_mat, nr_seq_exec_proc,
                        nr_seq_ocorrencia, nr_seq_execucao)
                values (nextval('pls_requisicao_glosa_seq'), ds_observacao_p, clock_timestamp(),
                        clock_timestamp(), nm_usuario_p, nm_usuario_p,
                        nr_seq_motivo_glosa_w, nr_seq_exec_mat_p, nr_seq_exec_proc_p,
                        nr_seq_ocorrencia_p, nr_seq_execucao_p);

		open C01(ie_ocorrencia_w, cd_estabelecimento_p);
		loop
		fetch C01 into
			nr_seq_ocorrencia_glosa_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			begin
			select	max(nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_execucao_req_item
			where 	nr_seq_execucao = nr_seq_execucao_p;
			exception
			when others then
				nr_seq_segurado_w := null;
			end;

			select	ie_auditoria_conta,
				nr_seq_nivel_lib,
				coalesce(ie_finalizar_analise,'S')
			into STRICT	ie_auditoria_w,
				nr_seq_nivel_lib_w,
				ie_finalizar_analise_w
			from	pls_ocorrencia
			where	nr_sequencia	= nr_seq_ocorrencia_glosa_w;

			select	max(nr_nivel_liberacao)
			into STRICT	ie_nivel_liberacao_w
			from	pls_nivel_liberacao
			where	nr_sequencia = nr_seq_nivel_lib_w;

			insert into pls_ocorrencia_benef(nr_sequencia,
				nr_seq_segurado,
				nr_seq_ocorrencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_execucao,
				nr_seq_conta,
				nr_seq_proc,
				nr_seq_mat,
				nr_seq_regra,
				nr_seq_guia_plano,
				ie_auditoria,
				nr_nivel_liberacao,
				ds_observacao,
				ie_finalizar_analise)
			values (nextval('pls_ocorrencia_benef_seq'),
				nr_seq_segurado_w,
				nr_seq_ocorrencia_glosa_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_execucao_p,
				null,
				nr_seq_exec_proc_p,
				nr_seq_exec_mat_p,
				null,
				null,
				ie_auditoria_w,
				ie_nivel_liberacao_w,
				'Ocorrência gerada através da glosa interna: ' || cd_motivo_glosa_p,
				ie_finalizar_analise_w);
			end;
		end loop;
		close C01;
        end if;
end if;

--Não é para commit em procedures intermediarias
--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gravar_execucao_req_glosa ( cd_motivo_glosa_p text, nr_seq_execucao_p bigint, nr_seq_exec_proc_p bigint, nr_seq_exec_mat_p bigint, ds_observacao_p text, nm_usuario_p text, nr_seq_prestador_p bigint, cd_estabelecimento_p bigint, nr_seq_ocorrencia_p bigint, ds_parametro_1 text) FROM PUBLIC;

