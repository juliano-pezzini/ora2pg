-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_titulo_receber_nfs ( nr_seq_nfs_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_emissao_w			timestamp;
nr_seq_classe_w			bigint;
nr_seq_classe_regra_w		bigint;
cd_tipo_taxa_multa_w		bigint;
cd_tipo_taxa_juro_w		bigint;
cd_moeda_padrao_w		bigint;
cd_estabelecimento_w		smallint;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(30);
ie_forma_pagamento_w		varchar(10);
nr_interno_conta_w		bigint;
cd_convenio_w			bigint;
nr_seq_protocolo_w		bigint;
nr_seq_conta_banco_w		bigint;
cd_condicao_pagamento_w		bigint;
vl_total_nota_w			double precision;
vl_vencimento_w			double precision;
dt_vencimento_w			timestamp;
nr_seq_tit_w			bigint;
cont_w				smallint;
nr_nota_fiscal_w		varchar(255);
cd_conta_contabil_w		varchar(20);
cd_centro_custo_w		bigint;
cd_conta_financ_w		bigint;
vl_classificacao_w		double precision;
nr_seq_classif_w		bigint;
vl_classif_total_w		double precision	:= 0;
cd_conta_financ_cre_w		bigint;
nr_titulo_w			bigint;
nr_titulo_pagar_w		bigint;
cd_portador_w			bigint;
cd_tipo_portador_w		bigint;
cd_estab_financeiro_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_trans_fin_nf_w		bigint;
nr_seq_mensalidade_w		bigint;
cd_tipo_taxa_juros_plano_w	bigint	:= null;
tx_juros_plano_w		double precision	:= null;
cd_tipo_taxa_multa_plano_w	bigint	:= null;
tx_multa_plano_w		double precision	:= null;
nr_seq_reajuste_w		bigint;
ie_origem_titulo_plano_w	varchar(10)	:= null;
ds_observacao_w			varchar(255)	:= '';
nr_seq_conta_plano_w		bigint	:= null;
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
tx_reajuste_w			double precision;
ie_indice_reajuste_w		varchar(1);
ds_oficio_ans_W			varchar(255);
nr_protocolo_ans_w		varchar(60);
ie_pls_w			varchar(1)	:= 'N';
nr_seq_pagador_w		bigint	:= null;
dt_mesano_referencia_w		timestamp;
cd_tributo_w			smallint;
vl_tributo_w			double precision;
tx_tributo_w			double precision;
vl_base_calculo_w		double precision;
vl_trib_nao_retido_w		double precision;
vl_base_nao_retido_w		double precision;
vl_trib_adic_w			double precision;
vl_base_adic_w			double precision;
nr_seq_trans_fin_baixa_w	bigint;
ie_nf_tit_rec_w			varchar(1);
ie_tipo_titulo_w		varchar(5);
ie_acao_venc_nao_util_w		varchar(1);
cd_conv_integracao_w		integer;
pr_aliquota_w			double precision;
vl_minimo_base_w		double precision;
vl_minimo_tributo_w		double precision;
ie_acumulativo_w		varchar(10);
vl_teto_base_w			double precision;
vl_desc_dependente_w		double precision;
nr_seq_regra_w			bigint;
ie_titulo_pagar_w		varchar(1);
cd_cgc_beneficiario_w		varchar(14);
cd_pessoa_fisica_trib_w		varchar(10);
nr_seq_tit_rec_trib_w		bigint;
pr_juro_padrao_w		double precision;
pr_multa_padrao_w		double precision;
ie_vincular_conta_prot_w	varchar(10) := 'N';
nr_atendimento_w		bigint;
nr_seq_trans_fin_baixa_mens_w	bigint	:= null;
nr_seq_trans_fin_con_mens_w	bigint;
nr_seq_trans_prov_trib_rec_w	bigint;
nr_seq_contrato_ww		bigint;
cd_serie_w			varchar(5)	:= null;
nr_seq_conta_banco_ww		bigint;
nr_seq_carteira_cobr_w		bigint;
tx_multa_w			double precision;
tx_juros_w			double precision;
nr_seq_forma_cobranca_w		varchar(2);
ie_tipo_contrato_w		varchar(2);
nr_seq_intercambio_w		bigint;
ie_origem_trib_w		varchar(2);
cd_tipo_pessoa_w		smallint;
nr_sequencia_w			bigint;
vl_multa_fixo_w			double precision;
vl_vencimento_nf_w		double precision;
ie_conta_financ_tit_rec_w	varchar(1);
cd_operacao_nf_w		smallint;
nr_integracao_w			bigint := 0;
ie_gerar_ordem_titulo_w		varchar(1);
cd_banco_w			banco.cd_banco%type;
tx_desconto_w			pls_regra_desc_tit_mens.tx_desconto%type;
nr_seq_tf_baixa_classe_w	classe_titulo_receber.nr_seq_trans_fin_baixa%type;
nr_seq_tf_contab_classe_w	classe_titulo_receber.nr_seq_trans_fin_contab%type;
nr_seq_classe_tit_mens_w	classe_titulo_receber.nr_sequencia%type;
ie_gerar_classif_sem_cf_w	varchar(1) := 'N';
nr_seq_trans_fin_baixa_cp_w	REGRA_CALCULO_IMPOSTO.NR_SEQ_TF_BAIXA_CP%type;
nr_seq_proj_rec_w		nota_fiscal_item.nr_seq_proj_rec%type;
cd_pf_estipulante_w		pls_contrato.cd_pf_estipulante%type;
cd_cgc_estipulante_w		pls_contrato.cd_cgc_estipulante%type;
nr_seq_regra_trib_w		nota_fiscal_item_trib.nr_seq_regra_trib%type;
cd_condicao_pagamento_trib_w	regra_calculo_imposto.cd_condicao_pagamento%type;	
qt_venc_w			bigint;
ds_venc_w			varchar(4000);
dt_vencimento_trib_w		timestamp;
qt_dias_venc_mens_w		pls_parametros.qt_dias_venc_mens%type;
nr_seq_adiantamento_w		nota_fiscal_adiant_receb.nr_seq_adiantamento%type;
nr_seq_pagador_fin_w		pls_contrato_pagador_fin.nr_sequencia%type;
nr_seq_baixa_w			titulo_receber_liq.nr_sequencia%type;
ie_franquia_w			adiantamento.ie_franquia%type;
cd_tipo_receb_adiant_pac_w	parametro_contas_receber.cd_tipo_receb_adiant_conta_pac%type;
cd_tipo_recebimento_w		tipo_recebimento.cd_tipo_recebimento%type;
nr_seq_trans_financ_adiant_w	parametro_contas_receber.nr_seq_trans_fin_baixa_adiant%type;
vl_saldo_adiant_w		nota_fiscal_adiant_receb.vl_adiant_saldo%type;
vl_adto_vinc_w			titulo_receber_liq.vl_recebido%type;

ie_vencimento_w			tributo.ie_venc_nf%type;
dt_entrada_saida_w		nota_fiscal.dt_entrada_saida%type;
dt_primeiro_venc_w  		nota_fiscal_venc.dt_vencimento%type;

ie_min_reter_w			regra_calculo_imposto.ie_min_reter%type;
vl_min_reter_w			regra_calculo_imposto.vl_min_reter%type;
cd_darf_w			regra_calculo_imposto.cd_darf%type;

C01 CURSOR FOR
	SELECT	vl_vencimento,
		dt_vencimento
	from	nota_fiscal_venc
	where	nr_sequencia = nr_seq_nfs_p
	order	by 1;

C02 CURSOR FOR
	SELECT	a.cd_conta_contabil,
		a.cd_centro_custo,
		coalesce(a.nr_seq_conta_financ, cd_conta_financ_cre_w),
		sum(a.vl_liquido),
		a.nr_contrato
	from 	nota_fiscal_item a
	where	a.nr_sequencia		= nr_seq_nfs_p
	and	( (coalesce(a.nr_seq_conta_financ, cd_conta_financ_cre_w) > 0) or (ie_gerar_classif_sem_cf_w = 'S') )
	and	not exists (SELECT	1
				from	nota_fiscal_item_rateio b
				where	b.nr_seq_nota	= a.nr_sequencia)
	group	by a.cd_conta_contabil,
		a.cd_centro_custo,
		a.nr_seq_conta_financ,
		a.nr_contrato
	
union all

	select	a.cd_conta_contabil,
		a.cd_centro_custo,
		coalesce(a.cd_conta_financ, coalesce(b.nr_seq_conta_financ, cd_conta_financ_cre_w)),
		sum(a.vl_rateio),
		b.nr_contrato
	from	nota_fiscal_item_rateio a,
		nota_fiscal_item b
	where	b.nr_sequencia		= nr_seq_nfs_p
	and	b.nr_sequencia		= a.nr_seq_nota
	and	( (coalesce(a.cd_conta_financ, coalesce(b.nr_seq_conta_financ, cd_conta_financ_cre_w)) > 0) or (ie_gerar_classif_sem_cf_w = 'S') )
	group	by
		a.cd_conta_contabil,
		a.cd_centro_custo,
		a.cd_conta_financ,
		b.nr_seq_conta_financ,
		b.nr_contrato;

C03 CURSOR FOR
	SELECT	a.cd_tributo,
		a.vl_tributo,
		a.tx_tributo,
		a.vl_base_calculo,
		a.vl_trib_nao_retido,
		a.vl_base_nao_retido,
		a.vl_trib_adic,
		a.vl_base_adic,
		a.ie_origem_trib,
		a.nr_seq_regra_trib
	from	nota_fiscal_trib a
	where	a.nr_sequencia	= nr_seq_nfs_p

union

	SELECT  cd_tributo,
			sum(vl_tributo),
			tx_tributo, /*a taxa do tributo nao pode ser somada, senao ficara uma taxa incorreta no titulo*/
			sum(vl_base_calculo),
			sum(vl_trib_nao_retido),
			sum(vl_base_nao_retido),
			sum(vl_trib_adic),
			sum(vl_base_adic),
			ie_origem_trib,
			nr_seq_regra_trib
	from ( select	a.cd_tributo,
			a.vl_tributo,
			a.tx_tributo,
			a.vl_base_calculo,
			a.vl_trib_nao_retido,
			a.vl_base_nao_retido,
			a.vl_trib_adic,
			a.vl_base_adic,
			null ie_origem_trib,
			a.nr_seq_regra_trib
			from	nota_fiscal_item_trib a
			where	a.nr_sequencia	= nr_seq_nfs_p ) alias6
		group by    cd_tributo,
			  		tx_tributo,
		            ie_origem_trib,
					nr_seq_regra_trib;
					
C04 CURSOR FOR
	SELECT 	a.nr_seq_adiantamento,
		a.vl_adiant_saldo
	from  	nota_fiscal_adiant_receb a
	where 	a.nr_seq_nota 		= nr_seq_nfs_p
	and	coalesce(a.vl_adiant_saldo,0) > 0;


BEGIN

/* ahoffelder - OS 176297 - 10/11/2009 */

ie_tipo_titulo_w := Obter_Valor_Param_Usuario(801,77, Obter_perfil_Ativo, nm_usuario_p, 0);
ie_gerar_ordem_titulo_w := Obter_Valor_Param_Usuario(1005,8, Obter_perfil_Ativo, nm_usuario_p, 0);
qt_dias_venc_mens_w	:= 0;

select 	max(b.dt_entrada_saida) dt_entrada_saida
into STRICT 	dt_entrada_saida_w
FROM operacao_nota o, estabelecimento e, natureza_operacao c, nota_fiscal b
LEFT OUTER JOIN nota_fiscal_venc a ON (b.nr_sequencia = a.nr_sequencia)
WHERE b.nr_sequencia		= nr_seq_nfs_p and b.cd_natureza_operacao 	= c.cd_natureza_operacao and b.cd_operacao_nf 	= o.cd_operacao_nf and b.cd_estabelecimento	= e.cd_estabelecimento and coalesce(o.ie_contas_pagar,'S') 	= 'S' and coalesce(e.ie_contas_pagar,'S') 	<> 'N' and coalesce(a.nr_titulo_pagar::text, '') = '';

begin
select	min(dt_vencimento)
into STRICT	dt_primeiro_venc_w
from	nota_fiscal_venc
where	nr_sequencia	= nr_seq_nfs_p;
exception
when others then
	dt_primeiro_venc_w	:= null;
end;

if (coalesce(ie_tipo_titulo_w::text, '') = '') then
	ie_tipo_titulo_w	:= '1';
end if;

select	count(*)
into STRICT	cont_w
from	titulo_receber
where	nr_seq_nf_saida = nr_seq_nfs_p;

select	a.ie_forma_pagamento
into STRICT	ie_forma_pagamento_w
from	condicao_pagamento a,
	nota_fiscal b
where	a.cd_condicao_pagamento = b.cd_condicao_pagamento
and	b.nr_sequencia = nr_seq_nfs_p;

if (cont_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(176751);
else
	select	dt_emissao,
		cd_estabelecimento,
		vl_total_nota,
		cd_cgc,
		cd_pessoa_fisica,
		nr_interno_conta,
		nr_seq_protocolo,
		cd_condicao_pagamento,
		vl_total_nota,
		nr_nota_fiscal,
		nr_seq_mensalidade,
		cd_conv_integracao,
		cd_operacao_nf
	into STRICT	dt_emissao_w,
		cd_estabelecimento_w,
		vl_total_nota_w,
		cd_cgc_w,
		cd_pessoa_fisica_w,
		nr_interno_conta_w,
		nr_seq_protocolo_w,
		cd_condicao_pagamento_w,
		vl_total_nota_w,
		nr_nota_fiscal_w,
		nr_seq_mensalidade_w,
		cd_conv_integracao_w,
		cd_operacao_nf_w
	from	nota_fiscal
	where	nr_sequencia = nr_seq_nfs_p;
	
	select  max(nr_seq_proj_rec)
	into STRICT 	nr_seq_proj_rec_w
	from	nota_fiscal_item
	where	nr_sequencia   = nr_seq_nfs_p;
	
	select	max(a.nr_atendimento)
	into STRICT	nr_atendimento_w
	from	conta_paciente a
	where	a.nr_interno_conta	= nr_interno_conta_w;
	
	/* ahoffelder - OS 170263 - 05/10/2009 */

	
	if (coalesce(nr_seq_protocolo_w,0) > 0) then
		select	max(cd_convenio)
		into STRICT	cd_convenio_w
		from	protocolo_convenio
		where	nr_seq_protocolo	= nr_seq_protocolo_w;
	else
		select	max(c.cd_convenio)
		into STRICT	cd_convenio_w
		from	lote_protocolo c,
			nota_fiscal d
		where	d.nr_sequencia		= nr_seq_nfs_p
		and	d.nr_seq_lote_prot	= c.nr_sequencia;
	end if;	
	
	select	coalesce(max(a.nr_seq_trans_tit_prot),0)
	into STRICT	nr_seq_trans_fin_nf_w
	from	convenio_estabelecimento a
	where	a.cd_convenio		= cd_convenio_w
	and	a.cd_estabelecimento	= cd_estabelecimento_w;
	
	if (coalesce(nr_seq_trans_fin_nf_w,0) = 0) then
		begin
		select	nr_seq_trans_fin_nf
		into STRICT	nr_seq_trans_fin_nf_w
		from	parametro_contas_receber
		where	cd_estabelecimento = cd_estabelecimento_w;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(176753);
		end;
	end if;
	
	select	cd_tipo_taxa_juro,
		cd_tipo_taxa_multa,
		cd_moeda_padrao,
		nr_seq_conta_banco,
		nr_seq_trans_fin_baixa,
		coalesce(ie_conta_financ_tit_rec,'S')
	into STRICT	cd_tipo_taxa_juro_w,
		cd_tipo_taxa_multa_w,
		cd_moeda_padrao_w,
		nr_seq_conta_banco_w,
		nr_seq_trans_fin_baixa_w,
		ie_conta_financ_tit_rec_w
	from	parametro_contas_receber
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	select	max(a.pr_multa_padrao),
		max(a.pr_juro_padrao)
	into STRICT	pr_multa_padrao_w,
		pr_juro_padrao_w
	from	parametros_contas_pagar a
	where	a.cd_estabelecimento	= cd_estabelecimento_w;
	
	if (ie_conta_financ_tit_rec_w = 'S') then
		select	coalesce(max(cd_conta_financ_cre),0)
		into STRICT	cd_conta_financ_cre_w
		from	parametro_fluxo_caixa
		where	cd_estabelecimento = cd_estabelecimento_w;
	end if;
	
	cont_w	:= 0;
	select	count(*)
	into STRICT	cont_w
	from	regra_tit_receber_classif;
	
	if (cont_w > 0) then
		if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
			select	cd_tipo_pessoa
			into STRICT	cd_tipo_pessoa_w
			from	pessoa_juridica
			where	cd_cgc	= cd_cgc_w;
		end if;
		
		cont_w	:= 0;
		select	count(*)
		into STRICT	cont_w
		from	regra_tit_receber_classif
		where	((cd_cnpj = cd_cgc_w and coalesce(cd_tipo_pessoa::text, '') = '') or (cd_tipo_pessoa = cd_tipo_pessoa_w and coalesce(cd_cnpj::text, '') = '') or (cd_cnpj = cd_cgc_w and cd_tipo_pessoa = cd_tipo_pessoa_w) or (coalesce(cd_cnpj::text, '') = '' and coalesce(cd_tipo_pessoa::text, '') = ''))
		and (coalesce(cd_operacao_nf::text, '') = '' or cd_operacao_nf_w = cd_operacao_nf);
		
		if (cont_w > 0) then
			
			select	max(nr_sequencia)
			into STRICT	nr_sequencia_w
			from	regra_tit_receber_classif
			where	((cd_cnpj = cd_cgc_w and coalesce(cd_tipo_pessoa::text, '') = '') or (cd_tipo_pessoa = cd_tipo_pessoa_w and coalesce(cd_cnpj::text, '') = '') or (cd_cnpj = cd_cgc_w and cd_tipo_pessoa = cd_tipo_pessoa_w) or (coalesce(cd_cnpj::text, '') = '' and coalesce(cd_tipo_pessoa::text, '') = ''))
			and (coalesce(cd_operacao_nf::text, '') = '' or cd_operacao_nf_w = cd_operacao_nf);
			
			select	max(nr_seq_classe)
			into STRICT	nr_seq_classe_regra_w
			from	regra_tit_receber_classif
			where	nr_sequencia	= nr_sequencia_w;
		end if;
		
		nr_seq_classe_w := nr_seq_classe_regra_w;
	end if;
	
	ie_vincular_conta_prot_w := obter_param_usuario(40, 283, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_vincular_conta_prot_w);
	
	if (coalesce(cd_cgc_w,'X') <> 'X') then
		cd_pessoa_fisica_w := '';
	end if;
	
	SELECT * FROM obter_portador_pf_pj(cd_estabelecimento_w, cd_pessoa_fisica_w, cd_cgc_w, cd_portador_w, cd_tipo_portador_w) INTO STRICT cd_portador_w, cd_tipo_portador_w;
	
	select	coalesce(cd_estab_financeiro, cd_estabelecimento)
	into STRICT	cd_estab_financeiro_w
	from	estabelecimento
	where	cd_estabelecimento	= cd_estabelecimento_w;
	
	/* Francisco - OS 81153 - 14/02/2008 - Titulos do plano de saude */

	if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then
		begin
		ie_pls_w	:= 'S';
		dt_emissao_w	:= clock_timestamp(); /* A data de emissao do titulo da mensalidade deve ser a data atual, pois o pagamento pode ser realizado a qualquer momento e a data de vecimento da nota fiscal e conforme a referencia da mensalidade */
		
		select	max(a.nr_seq_pagador),
			max(b.dt_mesano_referencia),
			max(c.nr_seq_contrato),
			substr(max(a.nr_serie_mensalidade),1,5),
			max(c.nr_seq_pagador_intercambio),
			max(a.cd_banco),
			max(a.nr_seq_pagador_fin)
		into STRICT	nr_seq_pagador_w,
			dt_mesano_referencia_w,
			nr_seq_contrato_ww,
			cd_serie_w,
			nr_seq_intercambio_w,
			cd_banco_w,
			nr_seq_pagador_fin_w
		from	pls_mensalidade		a,
			pls_contrato_pagador	c,
			pls_lote_mensalidade	b
		where	a.nr_seq_pagador	= c.nr_sequencia
		and	a.nr_seq_lote		= b.nr_sequencia
		and	a.nr_sequencia		= nr_seq_mensalidade_w;

		if (nr_seq_intercambio_w IS NOT NULL AND nr_seq_intercambio_w::text <> '') then
			ie_tipo_contrato_w	:= 'CI';
		else
			ie_tipo_contrato_w	:= 'CO';
		end if;
		
		select	max(cd_tipo_portador),
			max(cd_portador),
			max(nr_seq_conta_banco),
			max(nr_seq_forma_cobranca),
			max(nr_seq_carteira_cobr),
			coalesce(cd_banco_w,max(cd_banco))
		into STRICT	cd_tipo_portador_w,
			cd_portador_w,
			nr_seq_conta_plano_w,
			nr_seq_forma_cobranca_w,
			nr_seq_carteira_cobr_w,
			cd_banco_w
		from	pls_contrato_pagador_fin
		where	nr_sequencia = nr_seq_pagador_fin_w;
		
		if (nr_seq_forma_cobranca_w = '1') then
			ie_tipo_titulo_w := '1';
		elsif (nr_seq_forma_cobranca_w = '2') then
			ie_tipo_titulo_w := '10';
		elsif (nr_seq_forma_cobranca_w = '3') then
			ie_tipo_titulo_w := '11';
		elsif (nr_seq_forma_cobranca_w = '4') then
			ie_tipo_titulo_w := '9';
		end if;	
		
		/* Lepinski - OS 386260 */

		select	max(cd_tipo_taxa_juro),
			max(pr_juro_padrao),
			max(cd_tipo_taxa_multa),
			max(pr_multa_padrao),
			max(vl_multa)
		into STRICT	cd_tipo_taxa_juros_plano_w,
			tx_juros_plano_w,
			cd_tipo_taxa_multa_plano_w,
			tx_multa_plano_w,
			vl_multa_fixo_w
		from	pls_contrato_juros_multa
		where	nr_seq_contrato	= nr_seq_contrato_ww;
		
		select	coalesce(cd_tipo_taxa_juros_plano_w,cd_tipo_taxa_juro),
			coalesce(tx_juros_plano_w,pr_juro_padrao),
			coalesce(cd_tipo_taxa_multa_plano_w,cd_tipo_taxa_multa),
			coalesce(tx_multa_plano_w,pr_multa_padrao),
			coalesce(ie_origem_titulo,3),
			coalesce(nr_seq_conta_plano_w,nr_seq_conta_banco),
			coalesce(cd_tipo_portador_w,cd_tipo_portador),
			coalesce(cd_portador_w,cd_portador),
			nr_seq_trans_fin_baixa_mens,
			nr_seq_trans_fin_con_mens,
			nr_seq_classe_tit_mens,
			coalesce(qt_dias_venc_mens, 0)
		into STRICT	cd_tipo_taxa_juros_plano_w,
			tx_juros_plano_w,
			cd_tipo_taxa_multa_plano_w,
			tx_multa_plano_w,
			ie_origem_titulo_plano_w,
			nr_seq_conta_plano_w,
			cd_tipo_portador_w,
			cd_portador_w,
			nr_seq_trans_fin_baixa_mens_w,
			nr_seq_trans_fin_con_mens_w,
			nr_seq_classe_tit_mens_w,
			qt_dias_venc_mens_w
		from	pls_parametros
		where	cd_estabelecimento = cd_estabelecimento_w;
		exception
			when no_data_found then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(176754);
		end;
		
		if (nr_seq_classe_tit_mens_w IS NOT NULL AND nr_seq_classe_tit_mens_w::text <> '') then
			nr_seq_classe_w	:= nr_seq_classe_tit_mens_w;
		end if;
		
		if (coalesce(cd_portador_w::text, '') = '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(176755);
		elsif (coalesce(cd_tipo_portador_w::text, '') = '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(176756);
		end if;
		
		select	coalesce(max(a.nr_seq_reajuste),0)
		into STRICT	nr_seq_reajuste_w
		from	pls_mensalidade_seg_item a,
			pls_mensalidade_segurado b
		where	a.nr_seq_mensalidade_seg = b.nr_sequencia
		and	b.nr_seq_mensalidade	= nr_seq_mensalidade_w;
		
		select	pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'P'),
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'IR'),
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'DI'),
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'DF'),
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'OA'),
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'PA')
		into STRICT	tx_reajuste_w,
			ie_indice_reajuste_w,
			dt_periodo_inicial_w,
			dt_periodo_final_w,
			ds_oficio_ans_w,
			nr_protocolo_ans_w
		;
		
		if (nr_seq_reajuste_w <> 0) then
			ds_observacao_w := WHEB_MENSAGEM_PCK.get_texto(297902,'TX_REAJUSTE_W=' || tx_reajuste_w || ';IE_INDICE_REAJUSTE_W=' || pls_obter_desc_indice_reaj(ie_indice_reajuste_w));
			if (ie_indice_reajuste_w = '1') then
				ds_observacao_w := WHEB_MENSAGEM_PCK.get_texto(297906,'DS_OBSERVACAO_W=' || ds_observacao_w || ';DS_OFICIO_ANS_W=' || ds_oficio_ans_w || ';NR_PROTOCOLO_ANS_W=' || nr_protocolo_ans_w || ';DT_PERIODO_INICIAL_W=' || dt_periodo_inicial_w || ';DT_PERIODO_FINAL_W=' || dt_periodo_final_w);
			end if;
		end if;
		
		select	coalesce(ie_acao_nao_util,'M')
		into STRICT	ie_acao_venc_nao_util_w
		from	condicao_pagamento
		where	cd_condicao_pagamento	= cd_condicao_pagamento_w;
		
		select	max(c.cd_pf_estipulante),
			max(c.cd_cgc_estipulante)
		into STRICT	cd_pf_estipulante_w,
			cd_cgc_estipulante_w
		from	pls_mensalidade		a,
			pls_contrato_pagador	b,
			pls_contrato		c
		where	a.nr_seq_pagador	= b.nr_sequencia
		and	c.nr_sequencia		= b.nr_seq_contrato
		and	a.nr_sequencia		= nr_seq_mensalidade_w;
		
		begin
		select	coalesce(max(a.tx_desconto),0) tx_desconto
		into STRICT	tx_desconto_w
		from	pls_regra_desc_tit_mens a
		where	((a.nr_seq_pagador	= nr_seq_pagador_w) or (coalesce(a.nr_seq_pagador::text, '') = ''))
		and	((a.nr_seq_forma_cobranca = nr_seq_forma_cobranca_w) or (coalesce(a.nr_seq_forma_cobranca::text, '') = ''))
		and	((coalesce(a.ie_tipo_estipulante,'A') = 'A') or
			 ((coalesce(a.ie_tipo_estipulante,'A') = 'PF') and (cd_pf_estipulante_w IS NOT NULL AND cd_pf_estipulante_w::text <> '')) or 
			 ((coalesce(a.ie_tipo_estipulante,'A') = 'PJ') and (cd_cgc_estipulante_w IS NOT NULL AND cd_cgc_estipulante_w::text <> '')));
		exception
			when others then
			tx_desconto_w 		:= 0;
		end;
		
		update	pls_contrato_pagador
		set	ie_primeira_mensalidade_gerada = 'S'
		where	nr_sequencia	= nr_seq_pagador_w
		and	coalesce(ie_primeira_mensalidade_gerada,'N') <> 'S';
	end if;
	
	ie_gerar_classif_sem_cf_w := obter_param_usuario(40, 473, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_classif_sem_cf_w);
	if (ie_forma_pagamento_w <> 1) then  /* Se nao for a vista*/
		open c01;
		loop
		fetch c01 into
			vl_vencimento_w,
			dt_vencimento_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			if (ie_pls_w = 'S') then
				while(dt_vencimento_w < PKG_DATE_UTILS.start_of(dt_emissao_w,'dd',0)) loop
					begin
					dt_vencimento_w	:= fim_dia(dt_emissao_w);
					end;
				end loop;
				
				dt_vencimento_w	:= pls_obter_proximo_dia_util(dt_vencimento_w, ie_acao_venc_nao_util_w, cd_estabelecimento_w);
			end if;
			
			if (coalesce(nr_seq_mensalidade_w::text, '') = '') then
				tx_juros_w		:= null;
				tx_multa_w		:= null;
				SELECT * FROM obter_carteira_cobranca(cd_estabelecimento_w, cd_convenio_w, vl_vencimento_w, dt_emissao_w, nr_seq_conta_banco_ww, nr_seq_carteira_cobr_w, tx_juros_w, tx_multa_w) INTO STRICT nr_seq_conta_banco_ww, nr_seq_carteira_cobr_w, tx_juros_w, tx_multa_w;
			end if;

			if (qt_dias_venc_mens_w > 0) then
				if	(trunc(dt_vencimento_w,'dd') <= (trunc(clock_timestamp(),'dd') + qt_dias_venc_mens_w)) then
					dt_vencimento_w	:= clock_timestamp() + qt_dias_venc_mens_w;
					
					dt_vencimento_w	:= pls_obter_proximo_dia_util(dt_vencimento_w, ie_acao_venc_nao_util_w, cd_estabelecimento_w);
				end if;
			end if;
			
			select	nextval('titulo_seq')
			into STRICT	nr_titulo_w
			;

			insert into titulo_receber(nr_titulo,
				cd_estabelecimento,
				dt_atualizacao,
				nm_usuario,
				dt_emissao,
				dt_vencimento,
				dt_pagamento_previsto,
				vl_titulo,
				vl_saldo_titulo,
				vl_saldo_juros,
				vl_saldo_multa,
				cd_moeda,
				cd_portador,
				cd_tipo_portador,
				ie_situacao,
				ie_tipo_emissao_titulo,
				ie_origem_titulo,
				ie_tipo_titulo,
				ie_tipo_inclusao,
				cd_pessoa_fisica,
				cd_cgc,
				nr_interno_conta,
				nr_atendimento,
				cd_serie,
				nr_documento,
				nr_sequencia_doc,
				cd_banco,
				cd_agencia_bancaria,
				nr_bloqueto,
				dt_liquidacao,
				nr_lote_contabil,
				dt_contabil,
				nr_seq_protocolo,
				tx_juros,
				cd_tipo_taxa_juro,
				tx_multa,
				cd_tipo_taxa_multa,
				tx_desc_antecipacao,
				nr_guia,
				nr_nota_fiscal,
				nr_seq_nf_saida,
				nr_seq_conta_banco,
				cd_estab_financeiro,
				ds_observacao_titulo,
				nr_seq_mensalidade,
				ie_pls,
				nr_seq_trans_fin_contab,
				nr_seq_trans_fin_baixa,
				nm_usuario_orig,
				dt_inclusao,
				nr_seq_carteira_cobr,
				nr_seq_pagador,
				vl_multa_fixo,
				dt_limite_desconto,
				nr_seq_proj_rec)
		     	values (nr_titulo_w,
				cd_estabelecimento_w,
				clock_timestamp(),
				nm_usuario_p,
				dt_emissao_w,
				dt_vencimento_w,
				dt_vencimento_w,
				vl_vencimento_w ,
				vl_vencimento_w,
				0,
				0,
				cd_moeda_padrao_w,
				cd_portador_w,
				cd_tipo_portador_w,
				1,
				1,
				coalesce(ie_origem_titulo_plano_w,1),
				ie_tipo_titulo_w,
				'2',
				cd_pessoa_fisica_w,
				cd_cgc_w,
				CASE WHEN ie_vincular_conta_prot_w='S' THEN nr_interno_conta_w  ELSE null END ,
				CASE WHEN ie_vincular_conta_prot_w='S' THEN nr_atendimento_w  ELSE null END ,
				CASE WHEN ie_pls_w='S' THEN cd_serie_w  ELSE null END ,
				null,
				0,
				cd_banco_w,
				null,
				null,
				null,
				null,
				null,
				CASE WHEN ie_vincular_conta_prot_w='S' THEN nr_seq_protocolo_w  ELSE null END ,
				coalesce(tx_juros_plano_w,coalesce(obter_juros_multa_pf_pj(cd_estabelecimento_w,cd_pessoa_fisica_w,cd_cgc_w,'J'),0)),
				coalesce(cd_tipo_taxa_juros_plano_w,cd_tipo_taxa_juro_w),
				coalesce(tx_multa_plano_w,coalesce(obter_juros_multa_pf_pj(cd_estabelecimento_w,cd_pessoa_fisica_w,cd_cgc_w,'M'),0)),
				coalesce(cd_tipo_taxa_multa_plano_w,cd_tipo_taxa_multa_w),
				coalesce(tx_desconto_w,0),
				0,
				nr_nota_fiscal_w,
				nr_seq_nfs_p,
				coalesce(nr_seq_conta_plano_w,nr_seq_conta_banco_w),
				cd_estab_financeiro_w,
				ds_observacao_w,
				nr_seq_mensalidade_w,
				ie_pls_w,
				coalesce(nr_seq_tf_contab_classe_w,coalesce(nr_seq_trans_fin_nf_w, nr_seq_trans_fin_con_mens_w)),
				coalesce(nr_seq_tf_baixa_classe_w,coalesce(nr_seq_trans_fin_baixa_mens_w, nr_seq_trans_fin_baixa_w)),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_carteira_cobr_w,
				nr_seq_pagador_w,
				vl_multa_fixo_w,
				dt_vencimento_w,
				nr_seq_proj_rec_w);
				
			if (coalesce(nr_seq_classe_w::text, '') = '') then
			
				select	obter_classe_titulo_receber(nr_interno_conta_w, nr_seq_protocolo_w, nr_titulo_w)
				into STRICT	nr_seq_classe_w
				;
				
			end if;
			
			select	max(a.nr_seq_trans_fin_baixa),
				max(a.nr_seq_trans_fin_contab)
			into STRICT	nr_seq_tf_baixa_classe_w,
				nr_seq_tf_contab_classe_w
			from	classe_titulo_receber a
			where	a.nr_sequencia = nr_seq_classe_w;
			
			update	titulo_receber
			set	nr_seq_classe		= nr_seq_classe_w,
				nr_seq_trans_fin_contab	= coalesce(nr_seq_tf_contab_classe_w,nr_seq_trans_fin_contab),
				nr_seq_trans_fin_baixa	= coalesce(nr_seq_tf_baixa_classe_w,nr_seq_trans_fin_baixa)
			where	nr_titulo		= nr_titulo_w;
			
			if (ie_vincular_conta_prot_w = 'S') and (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') then
				update	protocolo_convenio
				set	dt_integracao_cr	= clock_timestamp()
				where	nr_seq_protocolo	= nr_seq_protocolo_w;
			end if;	
			
			nr_seq_classif_w	:= 0;
			vl_classif_total_w	:= 0;
			
			open c02;
			loop
			fetch c02 into
				cd_conta_contabil_w,
				cd_centro_custo_w,
				cd_conta_financ_w,
				vl_classificacao_w,
				nr_seq_contrato_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				
				nr_seq_classif_w	:= nr_seq_classif_w + 1;
				
				if (coalesce(vl_vencimento_w,0) <> 0) then
					vl_classificacao_w	:= vl_classificacao_w * (vl_vencimento_w / vl_total_nota_w);
				end if;
				
				insert into titulo_receber_classif(nr_titulo,
					nr_sequencia,
					vl_classificacao,
					dt_atualizacao,
					nm_usuario,
					cd_conta_financ,
					cd_centro_custo,
					vl_desconto,
					vl_original,
					nr_seq_contrato,
					cd_conta_contabil)
				values (nr_titulo_w,
					nr_seq_classif_w,
					vl_classificacao_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_conta_financ_w,
					cd_centro_custo_w,
					0,
					vl_classificacao_w,
					nr_seq_contrato_w,
					cd_conta_contabil_w);
				
				vl_classif_total_w	:= vl_classificacao_w + vl_classif_total_w;
				
			end loop;
			close c02;
			
			if (vl_vencimento_w <> vl_classif_total_w) then
				update	titulo_receber_classif
				set	vl_classificacao	= vl_classificacao + vl_vencimento_w - vl_classif_total_w,
					vl_original		= vl_original + vl_vencimento_w - vl_classif_total_w
					/* Francisco - 10/09/08 - alterei para deixar o valor original igual ao da classificacao*/

				where	nr_titulo		= nr_titulo_w
				and	nr_sequencia		= nr_seq_classif_w;
			end if;
			
			/* Francisco - 23/02/2008 - OS 80151 - Gravar tributo da nota no titulo tambem */

			open C03;
			loop
			fetch C03 into
				cd_tributo_w,
				vl_tributo_w,
				tx_tributo_w,
				vl_base_calculo_w,
				vl_trib_nao_retido_w,
				vl_base_nao_retido_w,
				vl_trib_adic_w,
				vl_base_adic_w,
				ie_origem_trib_w,
				nr_seq_regra_trib_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
			
				begin
				
				select	coalesce(ie_min_reter, 'N'),
					coalesce(vl_min_reter, 0)
				into STRICT	ie_min_reter_w,
					vl_min_reter_w
				from	regra_calculo_imposto
				where	nr_sequencia	= nr_seq_regra_trib_w;
				
				exception
				when others then
					begin
					ie_min_reter_w := 'N';
					vl_min_reter_w := 0;
					end;
				end;
				
				cont_w	:= 0;
				
				select	coalesce(max(ie_nf_tit_rec),'N'),
					max(nr_seq_trans_prov_trib_rec)
				into STRICT	ie_nf_tit_rec_w,
					nr_seq_trans_prov_trib_rec_w
				from	tributo
				where	cd_tributo	= cd_tributo_w;
				
				select	count(*)
				into STRICT	cont_w
				from	titulo_receber_trib
				where	nr_titulo	= nr_titulo_w
				and	cd_tributo	= cd_tributo_w;
				
				if	(ie_nf_tit_rec_w = 'S' AND cont_w = 0) or (ie_nf_tit_rec_w = 'U') then /* Peterson - 17/12/2015 - OS 974473*/
					if (cont_w > 0) then
						delete  from titulo_receber_trib
						where   nr_titulo	= nr_titulo_w
						and 	cd_tributo	= cd_tributo_w;
					end if;
					
					select	nextval('titulo_receber_trib_seq')
					into STRICT	nr_seq_tit_rec_trib_w
					;
					
					insert into titulo_receber_trib(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						nr_titulo,
						cd_tributo,
						vl_tributo,
						tx_tributo,
						vl_base_calculo,
						vl_trib_nao_retido,
						vl_base_nao_retido,
						vl_trib_adic,
						vl_base_adic,
						nr_seq_nota_fiscal,
						ie_origem_tributo,
						nr_seq_trans_financ,
						nr_lote_contabil,
						vl_saldo)
					SELECT	nr_seq_tit_rec_trib_w,
						clock_timestamp(),
						nm_usuario_p,
						nr_titulo_w,
						cd_tributo_w,
						vl_tributo_w,
						coalesce(tx_tributo_w,0),
						coalesce(vl_base_calculo_w,0),
						vl_trib_nao_retido_w,
						vl_base_nao_retido_w,
						vl_trib_adic_w,
						vl_base_adic_w,
						nr_seq_nfs_p,
						CASE WHEN coalesce(ie_origem_trib_w::text, '') = '' THEN  'C'  ELSE ie_origem_trib_w END ,
						nr_seq_trans_prov_trib_rec_w,
						0,
						vl_tributo_w
					;
					
					/* ebcabral - OS 505562- 21/12/2012 - Atualizar o saldo do titulo, quando o tributo diminui o saldo */

					if (ie_origem_trib_w = 'CD') then
						CALL Atualizar_Saldo_Tit_Rec(nr_titulo_w, nm_usuario_p);
					end if;
					
					/* ahoffelder - OS 298350 - 05/04/2011 - gerar titulo a pagar para o tributo */

					SELECT * FROM obter_dados_trib_tit_rec(cd_tributo_w, cd_estabelecimento_w, coalesce(cd_convenio_w,cd_conv_integracao_w), dt_emissao_w, 'N', pr_aliquota_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_pessoa_fisica_w, cd_cgc_w, ie_tipo_contrato_w, coalesce(ie_origem_titulo_plano_w, 1), 0, nr_seq_regra_w, cd_darf_w) INTO STRICT pr_aliquota_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, nr_seq_regra_w, cd_darf_w;
					
					select	max(a.ie_titulo_pagar),
						max(a.cd_cgc_beneficiario),
						max(a.nr_seq_tf_baixa_cp),
						max(a.cd_condicao_pagamento)
					into STRICT	ie_titulo_pagar_w,
						cd_cgc_beneficiario_w,
						nr_seq_trans_fin_baixa_cp_w,
						cd_condicao_pagamento_trib_w
					from	regra_calculo_imposto a
					where	a.nr_sequencia	= nr_seq_regra_w;
					
					/*OS 1279760 - Caso nao encontrar no select acima, tenta pelo nr_seq_regra_trib que esta gravado no tributo dentro da nota,  com a regra que gerou o trib na nota*/

					if (nr_seq_regra_trib_w IS NOT NULL AND nr_seq_regra_trib_w::text <> '') and (coalesce(ie_titulo_pagar_w::text, '') = '') then
						select	max(a.ie_titulo_pagar),
								max(a.cd_cgc_beneficiario),
								max(a.nr_seq_tf_baixa_cp),
								max(a.cd_condicao_pagamento)
						into STRICT	ie_titulo_pagar_w,
								cd_cgc_beneficiario_w,
								nr_seq_trans_fin_baixa_cp_w,
								cd_condicao_pagamento_trib_w
						from	regra_calculo_imposto a
						where	a.nr_sequencia	= nr_seq_regra_trib_w;
					
					end if;
					if ((ie_titulo_pagar_w = 'S') and (vl_tributo_w <> 0)
					and ((ie_min_reter_w = 'S' AND vl_min_reter_w > vl_tributo_w) or (ie_min_reter_w = 'N'))) then
						if (coalesce(cd_cgc_beneficiario_w::text, '') = '') then
							cd_pessoa_fisica_trib_w	:= cd_pessoa_fisica_w;
						else
							cd_pessoa_fisica_trib_w	:= null;
						end if;
						/*OS 1279760 - Considerar condicao de pagamento na regra para o titulo gerado para o imposto*/

						if (cd_condicao_pagamento_trib_w IS NOT NULL AND cd_condicao_pagamento_trib_w::text <> '') then
						
							select	max(ie_venc_nf) ie_vencimento
							into STRICT	ie_vencimento_w	
							from	tributo b,
								nota_fiscal_trib a
							where	nr_sequencia		= nr_seq_nfs_p
							and	a.cd_tributo		= b.cd_tributo
							and	a.cd_tributo 		= cd_tributo_w
							and	b.ie_conta_pagar	= 'S';
							
							if (ie_vencimento_w = 'V') then
									dt_vencimento_trib_w	:= dt_vencimento_w;

							elsif (ie_vencimento_w = 'R') then
									dt_vencimento_trib_w	:= coalesce(dt_entrada_saida_w,clock_timestamp());

							elsif (ie_vencimento_w = 'E') then
									dt_vencimento_trib_w	:= coalesce(dt_emissao_w,clock_timestamp());
									
							elsif (ie_vencimento_w = 'P') then
									dt_vencimento_trib_w	:= coalesce(dt_primeiro_venc_w,clock_timestamp());		
							else	
								dt_vencimento_trib_w	:= dt_vencimento_w;		
							end if;
							
							/*data base do vencimento nao deve ser final de semana */

							if (PKG_DATE_UTILS.get_WeekDay(dt_vencimento_trib_w) = 7) then
								-- nao deixar passar par ao mes seguinte
								if (PKG_DATE_UTILS.start_of(dt_vencimento_trib_w,'DD',0) = PKG_DATE_UTILS.start_of(dt_vencimento_trib_w + 2, 'MONTH',0)) then
									dt_vencimento_trib_w := dt_vencimento_trib_w + 2;
								end if;
							elsif (PKG_DATE_UTILS.get_WeekDay(dt_vencimento_trib_w) = 1) then
								-- nao deixar passar par ao mes seguinte
								if (PKG_DATE_UTILS.start_of(dt_vencimento_trib_w,'DD',0) = PKG_DATE_UTILS.start_of(dt_vencimento_trib_w + 1, 'MONTH',0)) then
									dt_vencimento_trib_w := dt_vencimento_trib_w + 1;
								end if;
							end if;

							SELECT * FROM calcular_vencimento(	cd_estabelecimento_w, cd_condicao_pagamento_trib_w, dt_vencimento_trib_w, qt_venc_w, ds_venc_w) INTO STRICT qt_venc_w, ds_venc_w;

							if (qt_venc_w = 1) then	
								dt_vencimento_trib_w	:= to_date(substr(ds_venc_w,1,10),'DD/MM/YYYY');
							end if;
	
						end if;

						select	nextval('titulo_pagar_seq')
						into STRICT 	nr_titulo_pagar_w
						;
						
						insert into titulo_pagar(cd_cgc,
							cd_estabelecimento,
							cd_estab_financeiro,
							cd_moeda,
							cd_pessoa_fisica,
							cd_tipo_taxa_juro,
							cd_tipo_taxa_multa,
							dt_atualizacao,
							dt_emissao,
							dt_vencimento_atual,
							dt_vencimento_original,
							ie_origem_titulo,
							ie_situacao,
							ie_tipo_titulo,
							nm_usuario,
							nr_seq_tit_rec_trib,
							nr_titulo,
							tx_juros,
							tx_multa,
							vl_saldo_juros,
							vl_saldo_multa,
							vl_saldo_titulo,
							vl_titulo,
							cd_tributo,
							nr_seq_trans_fin_baixa)
						values (coalesce(cd_cgc_beneficiario_w,cd_cgc_w),
							cd_estabelecimento_w,
							cd_estab_financeiro_w,
							cd_moeda_padrao_w,
							cd_pessoa_fisica_trib_w,
							cd_tipo_taxa_juro_w,
							cd_tipo_taxa_multa_w,
							clock_timestamp(),
							dt_emissao_w,
							coalesce(dt_vencimento_trib_w,dt_vencimento_w),
							coalesce(dt_vencimento_trib_w,dt_vencimento_w),
							'4',
							'A',
							'4',
							nm_usuario_p,
							nr_seq_tit_rec_trib_w,
							nr_titulo_pagar_w,
							pr_juro_padrao_w,
							pr_multa_padrao_w,
							0,
							0,
							vl_tributo_w,
							vl_tributo_w,
							cd_tributo_w,
							nr_seq_trans_fin_baixa_cp_w);
												
						CALL atualizar_inclusao_tit_pagar(nr_titulo_pagar_w, nm_usuario_p);
					end if;
				end if;
			end loop;
			close C03;
			
			open C04;
			loop
			fetch C04 into	
				nr_seq_adiantamento_w,
				vl_saldo_adiant_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin

				select	coalesce(max(nr_sequencia),0) + 1
				into STRICT	nr_seq_baixa_w
				from	titulo_receber_liq
				where	nr_titulo = nr_titulo_w;
				
				select	coalesce(max(ie_franquia),'N')
				into STRICT	ie_franquia_w
				from	adiantamento
				where	nr_adiantamento	= nr_seq_adiantamento_w;
				
				select	max(cd_tipo_receb_adiant_conta_pac)
				into STRICT	cd_tipo_receb_adiant_pac_w
				from	parametro_contas_receber
				where	cd_estabelecimento	= cd_estabelecimento_w;
				
				if (coalesce(cd_tipo_receb_adiant_pac_w::text, '') = '') then
				
					if (ie_franquia_w = 'S') then
						select	max(cd_tipo_recebimento)
						into STRICT	cd_tipo_recebimento_w
						from	tipo_recebimento
						where	ie_tipo_consistencia	= 10
						and	ie_situacao = 'A'
						and     ((cd_estabelecimento = cd_estabelecimento_w) or (coalesce(cd_estabelecimento::text, '') = ''));

						if (coalesce(cd_tipo_recebimento_w::text, '') = '') then
						/*(-20011,'E necessario cadastrar um tipo de recebimento com o tipo de consistencia "Franquia" ' ||
										' para gerar titulos com baixa por franquia.')*/
							CALL wheb_mensagem_pck.exibir_mensagem_abort(206671);
						end if;
					else
						select	max(cd_tipo_recebimento)
						into STRICT	cd_tipo_recebimento_w
						from	tipo_recebimento
						where	ie_tipo_consistencia	= 7
						and	ie_situacao = 'A'
						and     ((cd_estabelecimento = cd_estabelecimento_w) or (coalesce(cd_estabelecimento::text, '') = ''));

						if (coalesce(cd_tipo_recebimento_w::text, '') = '') then
							/*(-20011,'E necessario cadastrar um tipo de recebimento com o tipo de consistencia "Adiantamento" ' ||
										' para gerar titulos com adiantamentos vinculados.');*/
							CALL wheb_mensagem_pck.exibir_mensagem_abort(206672);
						end if;
					end if;
				end if;
				
				select	max(nr_seq_trans_fin_baixa_adiant)
				into STRICT	nr_seq_trans_financ_adiant_w
				from	parametro_contas_receber
				where	cd_estabelecimento = cd_estabelecimento_w;
				
				/*Ratear o valor do adiantamento nos titulos da NF*/

				vl_adto_vinc_w := vl_vencimento_w * dividir_sem_round(vl_saldo_adiant_w,vl_total_nota_w);

				/*Se for selecionado um adto com valor maior que o da NF, o valor rateado por ser superior ao valor do titulo, e ai o valor da baixa seria superior ao valor do titulo, apresentando msg de consistencia
				Isso pode aconter pois na NF onde vincula o adiantamento nao existe um campo de valor vinculado, ele apenas vincula o adto a NF, sem informar o valor*/
				if (vl_adto_vinc_w > vl_vencimento_w) then
					vl_adto_vinc_w := coalesce(vl_vencimento_w,0);
				end if;
				
				if (vl_adto_vinc_w <> 0) then

					insert into titulo_receber_liq(NR_TITULO,
									NR_SEQUENCIA,
									DT_RECEBIMENTO,
									VL_RECEBIDO,
									VL_DESCONTOS,
									VL_JUROS,
									VL_MULTA,
									CD_MOEDA,
									DT_ATUALIZACAO,
									NM_USUARIO,
									CD_TIPO_RECEBIMENTO,
									IE_ACAO,
									NR_ADIANTAMENTO,
									CD_SERIE_NF_DEVOL,
									NR_NOTA_FISCAL_DEVOL,
									CD_BANCO,
									CD_AGENCIA_BANCARIA,
									NR_DOCUMENTO,
									NR_LOTE_BANCO,
									CD_CGC_EMP_CRED,
									NR_CARTAO_CRED,
									NR_LOTE_CONTABIL,
									VL_REC_MAIOR,
									VL_GLOSA,
									NR_SEQ_TRANS_FIN,
									ie_lib_caixa,
									nr_lote_contab_antecip,
									nr_lote_contab_pro_rata)
								values (nr_titulo_w,
									nr_seq_baixa_w,
									clock_timestamp(),
									vl_adto_vinc_w, 
									0,
									0,
									0,
									1,
									clock_timestamp(),
									nm_usuario_p,
									coalesce(cd_tipo_receb_adiant_pac_w,cd_tipo_recebimento_w), 'I',
									nr_seq_adiantamento_w,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									0,
									0,
									nr_seq_trans_financ_adiant_w,
									'S',
									0,
									0);
									
					CALL Atualizar_saldo_adiantamento(	nr_seq_adiantamento_w,
									nm_usuario_p,
									nr_titulo_w);

					CALL Atualizar_Saldo_Tit_Rec(nr_titulo_w, nm_usuario_p);
				end if;
					
				end;
			end loop;
			close C04;
			
			if (nr_integracao_w  < 1) then
				/* Projeto MXM (7001)  - Exportar cadastro pessoa */

				nr_integracao_w := 1;
				CALL gravar_agend_integracao(565,'CD_PESSOA_JURIDICA='||null||';CD_PESSOA_FISICA='||cd_pessoa_fisica_w||';'); --Cliente
				/*O fornecedor ou sera pessoa fisica, ou sera pessoa juridica, nunca os dois ao mesmo tempo, nem tao pouco sem os dois tipos*/

				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					CALL gravar_agend_integracao(566,'CD_PESSOA_JURIDICA='||null||';CD_PESSOA_FISICA='||cd_pessoa_fisica_w||';'); --Fornecedor
				else
					CALL gravar_agend_integracao(566,'CD_PESSOA_JURIDICA='||cd_cgc_w||';CD_PESSOA_FISICA='||null||';'); --Fornecedor
				end if;
				/* Projeto MXM (7001)  - Exportar titulo a pagar */

				CALL gravar_agend_integracao(567,'NR_SEQUENCIA='||nr_seq_nfs_p||';');
			end if;
			
			if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') and (ie_gerar_ordem_titulo_w = 'S') then	
				CALL FIN_Gerar_OC_Repasse_Titulo(nr_seq_nfs_p,nr_titulo_w,nm_usuario_p);	
			end if;	
		/*	COMMIT;   JA HAVIA SIDO TIRADO O COMMIT DESTE PROCEDURE.
	NAO PODE TER COMMIT,  NAO PODE, NAO PODE */
		end loop;
		close c01;
	else
		
		select	max(a.VL_VENCIMENTO) /*AAMFIRMO OS 574316 18/04/2013 se condicao de pagamento for a vista, deve possuir  apenas um vencimento */
		into STRICT	vl_vencimento_nf_w
		from	NOTA_FISCAL_VENC a
		where	a.nr_sequencia = nr_seq_nfs_p;
		
		select	nextval('titulo_seq')
		into STRICT	nr_titulo_w
		;
		
		if (coalesce(nr_seq_mensalidade_w::text, '') = '') then
			tx_juros_w		:= null;
			tx_multa_w		:= null;
			SELECT * FROM obter_carteira_cobranca(cd_estabelecimento_w, cd_convenio_w, vl_total_nota_w, dt_emissao_w, nr_seq_conta_banco_ww, nr_seq_carteira_cobr_w, tx_juros_w, tx_multa_w) INTO STRICT nr_seq_conta_banco_ww, nr_seq_carteira_cobr_w, tx_juros_w, tx_multa_w;
		end if;

		if (qt_dias_venc_mens_w > 0) then
			if	(trunc(dt_vencimento_w,'dd') <= (trunc(clock_timestamp(),'dd') + qt_dias_venc_mens_w)) then
				dt_vencimento_w	:= clock_timestamp() + qt_dias_venc_mens_w;
				
				dt_vencimento_w	:= pls_obter_proximo_dia_util(dt_vencimento_w, ie_acao_venc_nao_util_w, cd_estabelecimento_w);
			end if;
		end if;
		
		insert into titulo_receber(
				nr_titulo,
				cd_estabelecimento,
				dt_atualizacao,
				nm_usuario,
		 		dt_emissao,
				dt_vencimento,
				dt_pagamento_previsto,
			 	vl_titulo,
				vl_saldo_titulo,
				vl_saldo_juros,
				vl_saldo_multa,
				cd_moeda,
				cd_portador,
				cd_tipo_portador,
				ie_situacao,
				ie_tipo_emissao_titulo,
				ie_origem_titulo,
				ie_tipo_titulo,
				ie_tipo_inclusao,
		 		cd_pessoa_fisica,
				cd_cgc,
				nr_interno_conta,
				nr_atendimento,
		 		cd_serie,
				nr_documento,
				nr_sequencia_doc,
				cd_banco,
			 	cd_agencia_bancaria,
				nr_bloqueto,
				dt_liquidacao,
				nr_lote_contabil,
				dt_contabil,
            			nr_seq_protocolo,
				tx_juros,
				cd_tipo_taxa_juro,
				tx_multa,
				cd_tipo_taxa_multa,
				tx_desc_antecipacao,
				nr_nota_fiscal,
				nr_seq_nf_saida,
				nr_seq_conta_banco,
				cd_estab_financeiro,
				ds_observacao_titulo,
				nr_seq_mensalidade,
				ie_pls,
				nr_seq_trans_fin_contab,
				nr_seq_trans_fin_baixa,
				nm_usuario_orig,
				dt_inclusao,
				nr_seq_carteira_cobr,
				nr_seq_pagador,
				vl_multa_fixo,
				dt_limite_desconto,
				nr_seq_proj_rec)
	     	values (	nr_titulo_w,
				cd_estabelecimento_w,
				clock_timestamp(),
				nm_usuario_p,
	 			dt_emissao_w,
				dt_emissao_w,
				dt_emissao_w,
				coalesce(vl_vencimento_nf_w,vl_total_nota_w),
				coalesce(vl_vencimento_nf_w,vl_total_nota_w),
				0,
				0,
				cd_moeda_padrao_w,
				cd_portador_w,
				cd_tipo_portador_w,
			 	1,
				1,
		 		coalesce(ie_origem_titulo_plano_w,1),
				ie_tipo_titulo_w,
				'2',
				cd_pessoa_fisica_w,
				cd_cgc_w,
				CASE WHEN ie_vincular_conta_prot_w='S' THEN nr_interno_conta_w  ELSE null END ,
        	     		CASE WHEN ie_vincular_conta_prot_w='S' THEN nr_atendimento_w  ELSE null END ,
				CASE WHEN ie_pls_w='S' THEN cd_serie_w  ELSE null END ,
				null,
				0,
		 		cd_banco_w,
				null,
				null,
				null,
				null,
				null,
				CASE WHEN ie_vincular_conta_prot_w='S' THEN nr_seq_protocolo_w  ELSE null END ,
				coalesce(tx_juros_plano_w,coalesce(obter_juros_multa_pf_pj(cd_estabelecimento_w,cd_pessoa_fisica_w,cd_cgc_w,'J'),0)),
				coalesce(cd_tipo_taxa_juros_plano_w,cd_tipo_taxa_juro_w),
				coalesce(tx_juros_plano_w,coalesce(obter_juros_multa_pf_pj(cd_estabelecimento_w,cd_pessoa_fisica_w,cd_cgc_w,'M'),0)),
				coalesce(cd_tipo_taxa_multa_plano_w,cd_tipo_taxa_multa_w),
				coalesce(tx_desconto_w,0),
				nr_nota_fiscal_w,
				nr_seq_nfs_p,
				coalesce(nr_seq_conta_plano_w,nr_seq_conta_banco_w),
				cd_estab_financeiro_w,
				ds_observacao_w,
				nr_seq_mensalidade_w,
				ie_pls_w,
				coalesce(nr_seq_tf_contab_classe_w,coalesce(nr_seq_trans_fin_nf_w, nr_seq_trans_fin_con_mens_w)),
				coalesce(nr_seq_tf_baixa_classe_w,coalesce(nr_seq_trans_fin_baixa_mens_w, nr_seq_trans_fin_baixa_w)),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_carteira_cobr_w,
				nr_seq_pagador_w,
				vl_multa_fixo_w,
				dt_vencimento_w,
				nr_seq_proj_rec_w);
				
		if (coalesce(nr_seq_classe_w::text, '') = '') then
				select	obter_classe_titulo_receber(nr_interno_conta_w, nr_seq_protocolo_w, nr_titulo_w)
				into STRICT	nr_seq_classe_w
				;
			end if;
			
			select	max(a.nr_seq_trans_fin_baixa),
				max(a.nr_seq_trans_fin_contab)
			into STRICT	nr_seq_tf_baixa_classe_w,
				nr_seq_tf_contab_classe_w
			from	classe_titulo_receber a
			where	a.nr_sequencia = nr_seq_classe_w;
			
			update	titulo_receber
			set	nr_seq_classe		= nr_seq_classe_w,
				nr_seq_trans_fin_contab	= coalesce(nr_seq_tf_contab_classe_w,nr_seq_trans_fin_contab),
				nr_seq_trans_fin_baixa	= coalesce(nr_seq_tf_baixa_classe_w,nr_seq_trans_fin_baixa)
			where	nr_titulo		= nr_titulo_w;
		
		if (ie_vincular_conta_prot_w = 'S') and (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') then
			update	protocolo_convenio
			set	dt_integracao_cr	= clock_timestamp()
			where	nr_seq_protocolo	= nr_seq_protocolo_w;
		end if;
		
		nr_seq_classif_w	:= 0;
		vl_classif_total_w	:= 0;
		open c02;
		loop
		fetch c02 into
			cd_conta_contabil_w,
			cd_centro_custo_w,
			cd_conta_financ_w,
			vl_classificacao_w,
			nr_seq_contrato_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			
			nr_seq_classif_w	:= nr_seq_classif_w + 1;
			
			insert into titulo_receber_classif(nr_titulo,
				nr_sequencia,
				vl_classificacao,
				dt_atualizacao,
				nm_usuario,
				cd_conta_financ,
				cd_centro_custo,
				vl_desconto,
				vl_original,
				nr_seq_contrato,
				cd_conta_contabil)
			values (	nr_titulo_w,
				nr_seq_classif_w,
				vl_classificacao_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_conta_financ_w,
				cd_centro_custo_w,
				0,
				vl_classificacao_w,
				nr_seq_contrato_w,
				cd_conta_contabil_w);
			
			vl_classif_total_w	:= vl_classificacao_w + vl_classif_total_w;
		end loop;
		close c02;
		
		/* Francisco - OS 69831 - Estava comparando com o vl_vencimento, quando a vista deve comparar com vl_total_nota */

		
		if (vl_total_nota_w <> vl_classif_total_w) then
			update	titulo_receber_classif
			set	vl_classificacao	= vl_classificacao + vl_total_nota_w - vl_classif_total_w,
				vl_original		= vl_original + vl_total_nota_w - vl_classif_total_w
				/* Francisco - 10/09/08 - alterei para deixar o valor original igual ao da classificacao*/

			where	nr_titulo		= nr_titulo_w
			and	nr_sequencia		= nr_seq_classif_w;
		end if;
		
		/* Francisco - 23/02/2008 - OS 80151 - Gravar tributo da nota no titulo tambem */

		open C03;
		loop
		fetch C03 into
			cd_tributo_w,
			vl_tributo_w,
			tx_tributo_w,
			vl_base_calculo_w,
			vl_trib_nao_retido_w,
			vl_base_nao_retido_w,
			vl_trib_adic_w,
			vl_base_adic_w,
			ie_origem_trib_w,
			nr_seq_regra_trib_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */

			select	coalesce(max(ie_nf_tit_rec),'N'),
				max(nr_seq_trans_prov_trib_rec)
			into STRICT	ie_nf_tit_rec_w,
				nr_seq_trans_prov_trib_rec_w
			from	tributo
			where	cd_tributo	= cd_tributo_w;

			select	count(*)
			into STRICT	cont_w
			from	titulo_receber_trib
			where	nr_titulo	= nr_titulo_w
			and	cd_tributo	= cd_tributo_w;

			if	(ie_nf_tit_rec_w = 'S' AND cont_w = 0) or (ie_nf_tit_rec_w = 'U') then /* Peterson - 17/12/2015 - OS 974473*/
				
				if (cont_w > 0) then
					delete  from titulo_receber_trib
					where   nr_titulo	= nr_titulo_w
					and 	cd_tributo	= cd_tributo_w;
				end if;
				
				select	nextval('titulo_receber_trib_seq')
				into STRICT	nr_seq_tit_rec_trib_w
				;
				
				insert into titulo_receber_trib(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					nr_titulo,
					cd_tributo,
					vl_tributo,
					tx_tributo,
					vl_base_calculo,
					vl_trib_nao_retido,
					vl_base_nao_retido,
					vl_trib_adic,
					vl_base_adic,
					nr_seq_nota_fiscal,
					ie_origem_tributo,
					nr_seq_trans_financ,
					nr_lote_contabil,
					vl_saldo)
				SELECT	nr_seq_tit_rec_trib_w,
					clock_timestamp(),
					nm_usuario_p,
					nr_titulo_w,
					cd_tributo_w,
					vl_tributo_w,
					coalesce(tx_tributo_w,0),
					coalesce(vl_base_calculo_w,0),
					vl_trib_nao_retido_w,
					vl_base_nao_retido_w,
					vl_trib_adic_w,
					vl_base_adic_w,
					nr_seq_nfs_p,
					CASE WHEN coalesce(ie_origem_trib_w::text, '') = '' THEN  'C'  ELSE ie_origem_trib_w END ,
					nr_seq_trans_prov_trib_rec_w,
					0,
					vl_tributo_w
				;
				
				/* ebcabral - OS 505562- 21/12/2012 - Atualizar o saldo do titulo, quando o tributo diminui o saldo */

				if (ie_origem_trib_w = 'CD') then
					CALL Atualizar_Saldo_Tit_Rec(nr_titulo_w, nm_usuario_p);
				end if;
				
				/* ahoffelder - OS 298350 - 05/04/2011 - gerar titulo a pagar para o tributo */

				SELECT * FROM obter_dados_trib_tit_rec(cd_tributo_w, cd_estabelecimento_w, coalesce(cd_convenio_w,cd_conv_integracao_w), dt_emissao_w, 'N', pr_aliquota_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_pessoa_fisica_w, cd_cgc_w, ie_tipo_contrato_w, coalesce(ie_origem_titulo_plano_w, 1), 0, nr_seq_regra_w, cd_darf_w) INTO STRICT pr_aliquota_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, nr_seq_regra_w, cd_darf_w;
				
				select	max(a.ie_titulo_pagar),
					max(a.cd_cgc_beneficiario),
					max(a.nr_seq_tf_baixa_cp),
					max(a.cd_condicao_pagamento)
				into STRICT	ie_titulo_pagar_w,
					cd_cgc_beneficiario_w,
					nr_seq_trans_fin_baixa_cp_w,
					cd_condicao_pagamento_trib_w
				from	regra_calculo_imposto a
				where	a.nr_sequencia	= nr_seq_regra_w;
				
				/*OS 1279760 - Caso nao encontrar no select acima, tenta pelo nr_seq_regra_trib que esta gravado no tributo dentro da nota,  com a regra que gerou o trib na nota*/

				if (nr_seq_regra_trib_w IS NOT NULL AND nr_seq_regra_trib_w::text <> '') and (coalesce(ie_titulo_pagar_w::text, '') = '') then
				
					select	max(a.ie_titulo_pagar),
							max(a.cd_cgc_beneficiario),
							max(a.nr_seq_tf_baixa_cp),
							max(a.cd_condicao_pagamento)
					into STRICT	ie_titulo_pagar_w,
							cd_cgc_beneficiario_w,
							nr_seq_trans_fin_baixa_cp_w,
							cd_condicao_pagamento_trib_w
					from	regra_calculo_imposto a
					where	a.nr_sequencia	= nr_seq_regra_trib_w;
				
				end if;
				
				if (ie_titulo_pagar_w	= 'S') and (vl_tributo_w <> 0) then
					if (coalesce(cd_cgc_beneficiario_w::text, '') = '') then
						cd_pessoa_fisica_trib_w	:= cd_pessoa_fisica_w;
					else
						cd_pessoa_fisica_trib_w	:= null;
					end if;
					/*OS 1279760 - Considerar condicao de pagamento na regra para o titulo gerado para o imposto*/

					if (cd_condicao_pagamento_trib_w IS NOT NULL AND cd_condicao_pagamento_trib_w::text <> '') then
							dt_vencimento_trib_w := dt_emissao_w;
							/*data base do vencimento nao deve ser final de semana */

							if (PKG_DATE_UTILS.get_WeekDay(dt_vencimento_trib_w) = 7) then
								-- nao deixar passar par ao mes seguinte
								if (PKG_DATE_UTILS.start_of(dt_vencimento_trib_w,'DD',0) = PKG_DATE_UTILS.start_of(dt_vencimento_trib_w + 2, 'MONTH',0)) then
									dt_vencimento_trib_w := dt_vencimento_trib_w + 2;
								end if;
							elsif (PKG_DATE_UTILS.get_WeekDay(dt_vencimento_trib_w) = 1) then
								-- nao deixar passar par ao mes seguinte
								if (PKG_DATE_UTILS.start_of(dt_vencimento_trib_w,'DD',0) = PKG_DATE_UTILS.start_of(dt_vencimento_trib_w + 1, 'MONTH',0)) then
									dt_vencimento_trib_w := dt_vencimento_trib_w + 1;
								end if;
							end if;
							
							SELECT * FROM calcular_vencimento(	cd_estabelecimento_w, cd_condicao_pagamento_trib_w, dt_vencimento_trib_w, qt_venc_w, ds_venc_w) INTO STRICT qt_venc_w, ds_venc_w;

							if (qt_venc_w = 1) then	
								dt_vencimento_trib_w	:= to_date(substr(ds_venc_w,1,10),'DD/MM/YYYY');
							end if;
	
					end if;
					
					select	nextval('titulo_pagar_seq')
					into STRICT	nr_titulo_pagar_w
					;

					insert	into titulo_pagar(cd_cgc,
						cd_estabelecimento,
						cd_estab_financeiro,
						cd_moeda,
						cd_pessoa_fisica,
						cd_tipo_taxa_juro,
						cd_tipo_taxa_multa,
						dt_atualizacao,
						dt_emissao,
						dt_vencimento_atual,
						dt_vencimento_original,
						ie_origem_titulo,
						ie_situacao,
						ie_tipo_titulo,
						nm_usuario,
						nr_seq_tit_rec_trib,
						nr_titulo,
						tx_juros,
						tx_multa,
						vl_saldo_juros,
						vl_saldo_multa,
						vl_saldo_titulo,
						vl_titulo,
						cd_tributo,
						nr_seq_trans_fin_baixa)
					values (coalesce(cd_cgc_beneficiario_w,cd_cgc_w),
						cd_estabelecimento_w,
						cd_estab_financeiro_w,
						cd_moeda_padrao_w,
						cd_pessoa_fisica_trib_w,
						cd_tipo_taxa_juro_w,
						cd_tipo_taxa_multa_w,
						clock_timestamp(),
						dt_emissao_w,
						coalesce(dt_vencimento_trib_w,dt_emissao_w),
						coalesce(dt_vencimento_trib_w,dt_emissao_w),
						'4',
						'A',
						'4',
						nm_usuario_p,
						nr_seq_tit_rec_trib_w,
						nr_titulo_pagar_w,
						pr_juro_padrao_w,
						pr_multa_padrao_w,
						0,
						0,
						vl_tributo_w,
						vl_tributo_w,
						cd_tributo_w,
						nr_seq_trans_fin_baixa_cp_w);
					CALL atualizar_inclusao_tit_pagar(nr_titulo_pagar_w, nm_usuario_p);
				end if;
			end if;
		end loop;
		close c03;
		
		open C04;
		loop
		fetch C04 into	
			nr_seq_adiantamento_w,
			vl_saldo_adiant_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin

			select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_seq_baixa_w
			from	titulo_receber_liq
			where	nr_titulo = nr_titulo_w;
			
			select	coalesce(max(ie_franquia),'N')
			into STRICT	ie_franquia_w
			from	adiantamento
			where	nr_adiantamento	= nr_seq_adiantamento_w;
			
			select	max(cd_tipo_receb_adiant_conta_pac)
			into STRICT	cd_tipo_receb_adiant_pac_w
			from	parametro_contas_receber
			where	cd_estabelecimento	= cd_estabelecimento_w;
			
			if (coalesce(cd_tipo_receb_adiant_pac_w::text, '') = '') then
			
				if (ie_franquia_w = 'S') then
					select	max(cd_tipo_recebimento)
					into STRICT	cd_tipo_recebimento_w
					from	tipo_recebimento
					where	ie_tipo_consistencia	= 10
					and	ie_situacao = 'A'
					and     ((cd_estabelecimento = cd_estabelecimento_w) or (coalesce(cd_estabelecimento::text, '') = ''));

					if (coalesce(cd_tipo_recebimento_w::text, '') = '') then
					/*(-20011,'E necessario cadastrar um tipo de recebimento com o tipo de consistencia "Franquia" ' ||
									' para gerar titulos com baixa por franquia.')*/
						CALL wheb_mensagem_pck.exibir_mensagem_abort(206671);
					end if;
				else
					select	max(cd_tipo_recebimento)
					into STRICT	cd_tipo_recebimento_w
					from	tipo_recebimento
					where	ie_tipo_consistencia	= 7
					and	ie_situacao = 'A'
					and     ((cd_estabelecimento = cd_estabelecimento_w) or (coalesce(cd_estabelecimento::text, '') = ''));

					if (coalesce(cd_tipo_recebimento_w::text, '') = '') then
						/*(-20011,'E necessario cadastrar um tipo de recebimento com o tipo de consistencia "Adiantamento" ' ||
									' para gerar titulos com adiantamentos vinculados.');*/
						CALL wheb_mensagem_pck.exibir_mensagem_abort(206672);
					end if;
				end if;
			end if;
			
			select	max(nr_seq_trans_fin_baixa_adiant)
			into STRICT	nr_seq_trans_financ_adiant_w
			from	parametro_contas_receber
			where	cd_estabelecimento = cd_estabelecimento_w;
			
			/*Ratear o valor do adiantamento nos titulos da NF*/

			vl_adto_vinc_w := coalesce(vl_vencimento_nf_w,vl_total_nota_w) * dividir_sem_round(vl_saldo_adiant_w,vl_total_nota_w);

			/*Se for selecionado um adto com valor maior que o da NF, o valor rateado por ser superior ao valor do titulo, e ai o valor da baixa seria superior ao valor do titulo, apresentando msg de consistencia
			Isso pode aconter pois na NF onde vincula o adiantamento nao existe um campo de valor vinculado, ele apenas vincula o adto a NF, sem informar o valor*/
			if (vl_adto_vinc_w > coalesce(vl_vencimento_nf_w,vl_total_nota_w)) then
				vl_adto_vinc_w := coalesce(coalesce(vl_vencimento_nf_w,vl_total_nota_w),0);
			end if;
						
			if (vl_adto_vinc_w <> 0) then

				insert into titulo_receber_liq(NR_TITULO,
								NR_SEQUENCIA,
								DT_RECEBIMENTO,
								VL_RECEBIDO,
								VL_DESCONTOS,
								VL_JUROS,
								VL_MULTA,
								CD_MOEDA,
								DT_ATUALIZACAO,
								NM_USUARIO,
								CD_TIPO_RECEBIMENTO,
								IE_ACAO,
								NR_ADIANTAMENTO,
								CD_SERIE_NF_DEVOL,
								NR_NOTA_FISCAL_DEVOL,
								CD_BANCO,
								CD_AGENCIA_BANCARIA,
								NR_DOCUMENTO,
								NR_LOTE_BANCO,
								CD_CGC_EMP_CRED,
								NR_CARTAO_CRED,
								NR_LOTE_CONTABIL,
								VL_REC_MAIOR,
								VL_GLOSA,
								NR_SEQ_TRANS_FIN,
								ie_lib_caixa,
								nr_lote_contab_antecip,
								nr_lote_contab_pro_rata)
							values (nr_titulo_w,
								nr_seq_baixa_w,
								clock_timestamp(),
								vl_adto_vinc_w, 
								0,
								0,
								0,
								1,
								clock_timestamp(),
								nm_usuario_p,
								coalesce(cd_tipo_receb_adiant_pac_w,cd_tipo_recebimento_w), 'I',
								nr_seq_adiantamento_w,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								0,
								0,
								nr_seq_trans_financ_adiant_w,
								'S',
								0,
								0);
				
				CALL Atualizar_saldo_adiantamento(	nr_seq_adiantamento_w,
								nm_usuario_p,
								nr_titulo_w);
								
				CALL Atualizar_Saldo_Tit_Rec(nr_titulo_w, nm_usuario_p);
			end if;
				
			end;
		end loop;
		close C04;
		
		/* Projeto MXM (7001)  - Exportar cadastro pessoa */

		CALL gravar_agend_integracao(565,'CD_PESSOA_JURIDICA='||null||';CD_PESSOA_FISICA='||cd_pessoa_fisica_w||';'); --Cliente
		/*O fornecedor ou sera pessoa fisica, ou sera pessoa juridica, nunca os dois ao mesmo tempo, nem tao pouco sem os dois tipos*/

		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			CALL gravar_agend_integracao(566,'CD_PESSOA_JURIDICA='||null||';CD_PESSOA_FISICA='||cd_pessoa_fisica_w||';'); --Fornecedor
		else
			CALL gravar_agend_integracao(566,'CD_PESSOA_JURIDICA='||cd_cgc_w||';CD_PESSOA_FISICA='||null||';'); --Fornecedor
		end if;
		/* Projeto MXM (7001)  - Exportar titulo a pagar */

		CALL gravar_agend_integracao(567,'NR_SEQUENCIA='||nr_seq_nfs_p||';');
		
		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') and (ie_gerar_ordem_titulo_w = 'S') then
			CALL FIN_Gerar_OC_Repasse_Titulo(nr_seq_nfs_p,nr_titulo_w,nm_usuario_p);
		end if;
	end if;
	
end if;

--commit;	Edgar OS 17888
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_titulo_receber_nfs ( nr_seq_nfs_p bigint, nm_usuario_p text) FROM PUBLIC;

