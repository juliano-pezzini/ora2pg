-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_comissao_mov ( nr_seq_lote_p bigint, nr_seq_canal_venda_p bigint, nr_seq_comissao_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


dt_referencia_w			timestamp;
qt_meta_w			bigint;
vl_meta_fatur_w			double precision;
ie_mes_cobranca_reaj_reg_w	varchar(1);

/* Campos do cursor 1 */

nr_seq_contrato_w		bigint;
nr_seq_segurado_w		bigint;
nr_seq_plano_w			bigint;
ie_tipo_pessoa_w		varchar(2);
ie_acao_contrato_w		varchar(2);
dt_contratacao_w		timestamp;
nr_seq_tipo_comercial_w		bigint;
ie_preco_w			varchar(2);
nr_seq_proposta_w		bigint;
nr_seq_vendedor_pf_w		pls_comissao_beneficiario.nr_seq_vendedor_pf%type;
nr_proposta_adesao_w		pls_segurado.nr_proposta_adesao%type;
cd_pessoa_fisica_w		pls_segurado.cd_pessoa_fisica%type;
nr_seq_motivo_inclusao_w	pls_regra_adic_mensal.nr_seq_motivo_inclusao%type;

/* Campos do cursor 2 */

pr_incremento_w			double precision;
qt_vidas_min_w			bigint;
qt_vidas_max_w			bigint;
vl_incremento_w			double precision;
qt_limite_max_vidas_w		bigint;
ie_preco_regra_w		varchar(2);
pr_meta_maximo_w		double precision;
ie_tipo_pessoa_regra_w		varchar(2);
dt_inicio_vigencia_w		timestamp;
dt_fim_vigencia_w		timestamp;
pr_meta_fatur_minimo_w		double precision;
pr_meta_fatur_maximo_w		double precision;
qt_idade_w			bigint;

/* Campos do cursor 2 e 4 */

nr_seq_regra_w			bigint;
pr_meta_minimo_w		double precision;
ie_acao_contrato_regra_w	varchar(15);
ie_dt_base_ref_comissao_w	varchar(2);
nr_seq_tipo_benef_comercial_w	bigint;

/* Campos do cursor 3 */

nr_seq_reajuste_w		bigint;
vl_preco_total_w		double precision;
qt_dias_contrato_adesao_w	bigint;

/* Campos do cursor 4 */

nr_seq_regra_grupo_w		bigint;
nr_seq_canal_venda_grupo_w	bigint;

ie_gerar_comissao_w		varchar(1);
qt_vidas_w			bigint;
pr_meta_w			double precision;
qt_vidas_incluidas_w		bigint;
vl_comissao_w			double precision;
pr_incremento_ww		double precision;
qt_tot_vidas_w			bigint;
nr_seq_meta_w			bigint;
vl_comissionamento_w		double precision;
vl_total_comissao_w		double precision;
pr_total_peso_w			double precision;
qt_benef_comissao_w		bigint;
vl_comissao_benef_w		double precision;
vl_comissao_total_benef_w	double precision;
vl_comissao_total_w		double precision;
dt_ref_comissao_w		timestamp;
nr_seq_comissao_benef_w		bigint;
qt_estornos			bigint;
nr_seq_plano_item_w		bigint;
vl_total_item_mens_w		double precision;
pr_meta_fatur_w			double precision;
vl_reajuste_meta_w		double precision;

C01 CURSOR FOR	/* Filtrando beneficiários por comissão */
	SELECT	a.nr_sequencia nr_seq_contrato,
		b.nr_sequencia nr_seq_segurado,
		c.nr_sequencia nr_seq_plano,
		CASE WHEN coalesce(a.cd_pf_estipulante::text, '') = '' THEN 'PJ'  ELSE 'PF' END ,
		b.ie_acao_contrato,
		b.dt_contratacao,
		b.nr_seq_tipo_comercial,
		c.ie_preco,
		a.nr_seq_proposta,
		b.nr_seq_vendedor_pf,
		b.nr_proposta_adesao,
		b.cd_pessoa_fisica,
		b.nr_seq_motivo_inclusao
	from	pls_plano		c,
		pls_segurado		b,
		pls_contrato		a
	where	a.nr_sequencia 		= b.nr_seq_contrato
	and	b.nr_seq_plano 		= c.nr_sequencia
	and	coalesce(b.nr_seq_intercambio::text, '') = ''
	and	b.nr_seq_vendedor_canal = nr_seq_canal_venda_p
	and (b.nr_seq_tipo_comercial = nr_seq_tipo_benef_comercial_w or coalesce(nr_seq_tipo_benef_comercial_w,0) = 0)
	and	((trunc(b.dt_contratacao,'month') = trunc(dt_referencia_w,'month')) or (trunc(b.dt_liberacao,'month') = trunc(dt_referencia_w,'month')))
	
union all

	SELECT	a.nr_sequencia nr_seq_contrato,
		b.nr_sequencia nr_seq_segurado,
		c.nr_sequencia nr_seq_plano,
		CASE WHEN coalesce(a.cd_pf_estipulante::text, '') = '' THEN 'PJ'  ELSE 'PF' END ,
		b.ie_acao_contrato,
		b.dt_contratacao,
		b.nr_seq_tipo_comercial,
		c.ie_preco,
		a.nr_seq_proposta,
		d.nr_seq_vendedor_vinculado,
		b.nr_proposta_adesao,
		b.cd_pessoa_fisica,
		b.nr_seq_motivo_inclusao
	from	pls_segurado_canal_compl	d,
		pls_plano			c,
		pls_segurado			b,
		pls_contrato			a
	where	a.nr_sequencia = b.nr_seq_contrato
	and	b.nr_seq_plano = c.nr_sequencia
	and	b.nr_sequencia = d.nr_seq_segurado
	and	coalesce(b.nr_seq_intercambio::text, '') = ''
	and	d.nr_seq_vendedor_canal = nr_seq_canal_venda_p
	and (b.nr_seq_tipo_comercial = nr_seq_tipo_benef_comercial_w or coalesce(nr_seq_tipo_benef_comercial_w,0) = 0)
	and	((trunc(b.dt_contratacao,'month') = trunc(dt_referencia_w,'month')) or (trunc(b.dt_liberacao,'month') = trunc(dt_referencia_w,'month')));

C02 CURSOR FOR	/* Filtrando beneficiários que se encaixam na regra mensal */
	SELECT	a.nr_sequencia,
		pr_incremento,
		qt_vidas_min,
		qt_vidas_max,
		vl_incremento,
		qt_limite_max_vidas,
		ie_preco,
		pr_meta_minimo,
		pr_meta_maximo,
		ie_tipo_pessoa,
		ie_acao_contrato,
		coalesce(dt_inicio_vigencia,dt_referencia_w),
		coalesce(dt_fim_vigencia,dt_referencia_w),
		CASE WHEN coalesce(ie_dt_base_ref_comissao::text, '') = '' THEN 'A'  ELSE ie_dt_base_ref_comissao END ,
		b.nr_seq_tipo_benef_comercial,
		a.pr_meta_fatur_minimo,
		a.pr_meta_fatur_maximo
	FROM pls_regra_adic_mensal a
LEFT OUTER JOIN pls_regra_mensal_benef b ON (a.nr_sequencia = b.nr_seq_regra_adic)
WHERE a.nr_seq_vendedor = nr_seq_canal_venda_p and (b.nr_seq_tipo_benef_comercial = nr_seq_tipo_comercial_w or coalesce(b.nr_seq_tipo_benef_comercial,0) = 0) and ie_situacao = 'A' and dt_referencia_w	between dt_inicio_vigencia and fim_dia(dt_fim_vigencia) and position(ie_acao_contrato_w in coalesce(ie_acao_contrato,ie_acao_contrato_w)) > 0 and (coalesce(ie_tipo_pessoa,coalesce(ie_tipo_pessoa_w,'0')) = coalesce(ie_tipo_pessoa_w,'0') or (ie_tipo_pessoa = 'A')) and coalesce(ie_preco,coalesce(ie_preco_w,'0')) = coalesce(ie_preco_w,'0') and ie_movimentacao_benef = 'S' and ((a.nr_seq_proposta = nr_seq_proposta_w) or (coalesce(a.nr_seq_proposta::text, '') = '')) and ((a.nr_seq_plano = nr_seq_plano_w) or (coalesce(nr_seq_plano::text, '') = '')) and (((a.nr_seq_grupo_produto IS NOT NULL AND a.nr_seq_grupo_produto::text <> '') and (nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '') and pls_se_grupo_preco_produto(a.nr_seq_grupo_produto,nr_seq_plano_w) = 'S')
	or (coalesce(a.nr_seq_grupo_produto::text, '') = '')) and (qt_dias_contrato_adesao_w between coalesce(qt_dias_contrato, qt_dias_contrato_adesao_w) and coalesce(qt_dias_contrato_fim, qt_dias_contrato_adesao_w)) and qt_idade_w between coalesce(a.qt_idade_inicial,qt_idade_w) and coalesce(a.qt_idade_final,qt_idade_w) and ((coalesce(a.nr_seq_contrato::text, '') = '') or (a.nr_seq_contrato = nr_seq_contrato_w)) and ((a.nr_seq_motivo_inclusao = nr_seq_motivo_inclusao_w) or (coalesce(a.nr_seq_motivo_inclusao::text, '') = '')) order by	coalesce(ie_preco,'-1'),
			coalesce(ie_tipo_item_mensalidade,'-1'),
			coalesce(ie_acao_contrato,'-1');

C03 CURSOR FOR	/* Filtrando os reajustes */
	SELECT	max(nr_sequencia) nr_seq_reajuste
	from	pls_segurado_preco
	where	(((trunc(clock_timestamp(),'month') >= trunc(dt_reajuste,'month'))
	and	((cd_motivo_reajuste <> 'E') or (ie_mes_cobranca_reaj_reg_w = 'M')))
	or	(((cd_motivo_reajuste = 'E') and (trunc(clock_timestamp(),'month') >= trunc(add_months(dt_reajuste,1), 'month')))
	and (ie_mes_cobranca_reaj_reg_w = 'P')))
	and	nr_seq_segurado = nr_seq_segurado_w;

C04 CURSOR FOR 	/* Filtrando vendedores pertencentes ao grupo */
	SELECT	a.nr_sequencia,
		b.nr_seq_canal_venda
	from	pls_canal_regra_mensal	b,
		pls_regra_adic_mensal	a
	where	a.nr_sequencia = b.nr_seq_regra_mensal
	and	a.nr_seq_vendedor = nr_seq_canal_venda_p;


BEGIN

pr_incremento_w		:= 0;
qt_vidas_incluidas_w 	:= 0;
qt_tot_vidas_w		:= 0;

select	dt_referencia
into STRICT	dt_referencia_w
from	pls_lote_comissao
where	nr_sequencia = nr_seq_lote_p;

begin
select	max(coalesce(qt_meta,0)),
	max(coalesce(vl_meta_faturamento,0))
into STRICT	qt_meta_w,
	vl_meta_fatur_w
from	pls_vendedor_meta
where	trunc(dt_mesano_referencia,'month') = trunc(dt_referencia_w,'month')
and	nr_seq_vendedor	= nr_seq_canal_venda_p;
exception
when others then
	qt_meta_w	:= 0;
	vl_meta_fatur_w	:= 0;
end;

select	coalesce(max(ie_mes_cobranca_reaj_reg),'P')
into STRICT	ie_mes_cobranca_reaj_reg_w
from	pls_parametros
where	cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

open C01;
loop
fetch C01 into
	nr_seq_contrato_w,
	nr_seq_segurado_w,
	nr_seq_plano_w,
	ie_tipo_pessoa_w,
	ie_acao_contrato_w,
	dt_contratacao_w,
	nr_seq_tipo_comercial_w,
	ie_preco_w,
	nr_seq_proposta_w,
	nr_seq_vendedor_pf_w,
	nr_proposta_adesao_w,
	cd_pessoa_fisica_w,
	nr_seq_motivo_inclusao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

	nr_seq_regra_w		:= 0;
	ie_gerar_comissao_w	:= 'N';

	/*Obter a quantidade de dias entre a data de contratação e a data de adesão do beneficiário. */

	if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
		select	b.dt_contratacao - a.dt_contrato
		into STRICT	qt_dias_contrato_adesao_w
		from	pls_segurado	b,
			pls_contrato	a
		where	a.nr_sequencia = b.nr_seq_contrato
		and	b.nr_sequencia = nr_seq_segurado_w;
	end if;

	select	trunc(months_between(dt_referencia_w, b.dt_nascimento) / 12)
	into STRICT	qt_idade_w
	from	pls_segurado	a,
		pessoa_fisica	b
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	a.nr_sequencia		= nr_seq_segurado_w;

	open C02;
	loop
	fetch C02 into
		nr_seq_regra_w,
		pr_incremento_w,
		qt_vidas_min_w,
		qt_vidas_max_w,
		vl_incremento_w,
		qt_limite_max_vidas_w,
		ie_preco_regra_w,
		pr_meta_minimo_w,
		pr_meta_maximo_w,
		ie_tipo_pessoa_regra_w,
		ie_acao_contrato_regra_w,
		dt_inicio_vigencia_w,
		dt_fim_vigencia_w,
		ie_dt_base_ref_comissao_w,
		nr_seq_tipo_benef_comercial_w,
		pr_meta_fatur_minimo_w,
		pr_meta_fatur_maximo_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */

		open C03;
		loop
		fetch C03 into
			nr_seq_reajuste_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */

			begin
			select (vl_preco_atual - coalesce(vl_desconto,0))
			into STRICT	vl_preco_total_w
			from	pls_segurado_preco
			where	nr_sequencia = nr_seq_reajuste_w;
			exception
			when others then
				vl_preco_total_w	:= 0;
			end;

			if (ie_dt_base_ref_comissao_w = 'L') then
				select	dt_liberacao
				into STRICT	dt_ref_comissao_w
				from	pls_segurado
				where	nr_sequencia = nr_seq_segurado_w;
			elsif (ie_dt_base_ref_comissao_w = 'A') then
				select	dt_contratacao
				into STRICT	dt_ref_comissao_w
				from	pls_segurado
				where	nr_sequencia = nr_seq_segurado_w;
			elsif (ie_dt_base_ref_comissao_w = 'AC') then
				select	max(dt_aprovacao)
				into STRICT	dt_ref_comissao_w
				from	pls_contrato
				where	nr_sequencia	= nr_seq_contrato_w;
			end if;

			if (trunc(dt_ref_comissao_w,'month') = trunc(dt_referencia_w,'month')) then
				begin

				select	sum(qt_vidas),
					sum(vl_reajuste)
				into STRICT	qt_vidas_w,
					vl_reajuste_meta_w
				from   (SELECT	count(*) qt_vidas,
						sum(d.vl_preco_atual - coalesce(d.vl_desconto,0)) vl_reajuste
					from	pls_segurado_preco	d,
						pls_plano		c,
						pls_segurado		b,
						pls_contrato		a
					where	a.nr_sequencia = b.nr_seq_contrato
					and	b.nr_seq_plano = c.nr_sequencia
					and	b.nr_sequencia = d.nr_seq_segurado
					and	b.nr_seq_vendedor_canal = nr_seq_canal_venda_p
					and	((ie_dt_base_ref_comissao_w = 'A' and trunc(b.dt_contratacao,'month') = trunc(dt_referencia_w,'month') and (trunc(b.dt_contratacao,'month') between dt_inicio_vigencia_w and dt_fim_vigencia_w)) or (ie_dt_base_ref_comissao_w = 'L' and trunc(b.dt_liberacao,'month') = trunc(dt_referencia_w,'month') and trunc(b.dt_liberacao,'month') between dt_inicio_vigencia_w and dt_fim_vigencia_w) or (ie_dt_base_ref_comissao_w = 'AC' and trunc(a.dt_aprovacao,'month') = trunc(dt_referencia_w,'month') and trunc(a.dt_aprovacao,'month') between dt_inicio_vigencia_w and dt_fim_vigencia_w))
					and	position(b.ie_acao_contrato in coalesce(ie_acao_contrato_regra_w, b.ie_acao_contrato)) > 0
					and	((CASE WHEN coalesce(a.cd_pf_estipulante::text, '') = '' THEN 'PJ'  ELSE 'PF' END  = ie_tipo_pessoa_regra_w) or (ie_tipo_pessoa_regra_w = 'A'))
					and (coalesce(nr_seq_tipo_benef_comercial_w,0) = 0 or (b.nr_seq_tipo_comercial IS NOT NULL AND b.nr_seq_tipo_comercial::text <> ''))
					and	d.nr_sequencia = obter_seq_segurado_preco(b.nr_sequencia)
					
union all

					SELECT	count(*) qt_vidas,
						sum(e.vl_preco_atual - coalesce(e.vl_desconto,0)) vl_reajuste
					from	pls_segurado_preco		e,
						pls_segurado_canal_compl	d,
						pls_plano			c,
						pls_segurado			b,
						pls_contrato			a
					where	a.nr_sequencia = b.nr_seq_contrato
					and	b.nr_seq_plano = c.nr_sequencia
					and	b.nr_sequencia = d.nr_seq_segurado
					and	b.nr_sequencia = e.nr_seq_segurado
					and	d.nr_seq_vendedor_canal = nr_seq_canal_venda_p
					and	((ie_dt_base_ref_comissao_w = 'A' and trunc(b.dt_contratacao,'month') = trunc(dt_referencia_w,'month') and (trunc(b.dt_contratacao,'month') between dt_inicio_vigencia_w and dt_fim_vigencia_w)) or (ie_dt_base_ref_comissao_w = 'L' and trunc(b.dt_liberacao,'month') = trunc(dt_referencia_w,'month') and trunc(b.dt_liberacao,'month') between dt_inicio_vigencia_w and dt_fim_vigencia_w) or (ie_dt_base_ref_comissao_w = 'AC' and trunc(a.dt_aprovacao,'month') = trunc(dt_referencia_w,'month') and trunc(a.dt_aprovacao,'month') between dt_inicio_vigencia_w and dt_fim_vigencia_w))
					and	position(b.ie_acao_contrato in coalesce(ie_acao_contrato_regra_w, b.ie_acao_contrato)) > 0
					and	((CASE WHEN coalesce(a.cd_pf_estipulante::text, '') = '' THEN 'PJ'  ELSE 'PF' END  = ie_tipo_pessoa_regra_w) or (ie_tipo_pessoa_regra_w = 'A'))
					and (coalesce(nr_seq_tipo_benef_comercial_w,0) = 0 or (b.nr_seq_tipo_comercial IS NOT NULL AND b.nr_seq_tipo_comercial::text <> ''))
					and	e.nr_sequencia = obter_seq_segurado_preco(b.nr_sequencia)) alias59;

				/* Cálculo pela meta por quantidade de vidas vendidas */

				if (coalesce(qt_meta_w,0) > 0) then
					pr_meta_w := coalesce(round((qt_vidas_w * 100) / coalesce(qt_meta_w,1),2),0);
				else
					pr_meta_w := 0;
				end if;

				/* Cálculo pela meta por faturamento obtido */

				if (coalesce(vl_meta_fatur_w,0) > 0) then
					pr_meta_fatur_w	:= coalesce(round((vl_reajuste_meta_w * 100) / coalesce(vl_meta_fatur_w,1),2),0);
				else
					pr_meta_fatur_w	:= 0;
				end if;

				if (qt_vidas_w >= coalesce(qt_vidas_min_w,qt_vidas_w)) and (qt_vidas_w <= coalesce(qt_vidas_max_w,qt_vidas_w)) and (pr_meta_w >= coalesce(pr_meta_minimo_w,pr_meta_w)) and (pr_meta_w <= coalesce(pr_meta_maximo_w,pr_meta_w)) and (pr_meta_fatur_w >= coalesce(pr_meta_fatur_minimo_w,pr_meta_fatur_w)) and (pr_meta_fatur_w <= coalesce(pr_meta_fatur_maximo_w,pr_meta_fatur_w)) then
					ie_gerar_comissao_w	:= 'S';

					qt_vidas_incluidas_w := qt_vidas_incluidas_w + 1; /* Realizar a verificação de quantas vidas foram incluídas no repasse para não ultrapassar o limite informado no campo "Limite vidas repasse"  */
					pr_incremento_ww     := coalesce(pr_incremento_w,0);

					if (qt_vidas_incluidas_w <= coalesce(qt_limite_max_vidas_w,qt_vidas_incluidas_w)) then
						vl_comissao_w	:= round(((vl_preco_total_w * coalesce(pr_incremento_w,0)) / 100) + coalesce(vl_incremento_w,0),2);
					else
						vl_comissao_w	:= 0;
					end if;
				end if;

				/*Não gerar comissão duas vezes para o beneficiário no mesmo mês */

				select	count(*)
				into STRICT	qt_benef_comissao_w
				from	pls_comissao_beneficiario	c,
					pls_comissao			b,
					pls_lote_comissao		a
				where	a.nr_sequencia = b.nr_seq_lote
				and	b.nr_sequencia = c.nr_seq_comissao
				and	c.nr_seq_segurado = nr_seq_segurado_w
				and	trunc(a.dt_referencia,'month')	= trunc(dt_referencia_w,'month')
				and	coalesce(b.ie_cancelado,'N') = 'N';

				if	(ie_gerar_comissao_w	= 'S' AND qt_benef_comissao_w = 0) then

					select	nextval('pls_comissao_beneficiario_seq')
					into STRICT	nr_seq_comissao_benef_w
					;

					insert	into pls_comissao_beneficiario( nr_sequencia,
							nr_seq_comissao,
							nr_seq_segurado,
							vl_incremento,
							nr_seq_vendedor,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							vl_comissao_benef,
							vl_origem,
							nr_seq_regra_mensal,
							nr_seq_vendedor_pf,
							nr_seq_proposta,
							cd_pessoa_fisica )
						values (	nr_seq_comissao_benef_w,
							nr_seq_comissao_p,
							nr_seq_segurado_w,
							vl_incremento_w,
							nr_seq_canal_venda_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							vl_comissao_w,
							vl_comissao_w,
							nr_seq_regra_w,
							nr_seq_vendedor_pf_w,
							nr_proposta_adesao_w,
							cd_pessoa_fisica_w);

					qt_tot_vidas_w	:= qt_tot_vidas_w + 1;

				end if;

				end;
			end if;

		end loop;
		close C03;

	end loop;
	close C02;

end loop;
close C01;

select	sum(vl_comissao_benef)
into STRICT	vl_comissao_total_w
from	pls_comissao_beneficiario
where	nr_seq_comissao = nr_seq_comissao_p;

select	count(*) /* Verificando a quantidade de estornos pendentes */
into STRICT	qt_estornos
from	pls_estorno_comissao
where	nr_seq_canal_venda = nr_seq_canal_venda_p
and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
and	coalesce(nr_seq_comissao_benef::text, '') = '';

if (qt_estornos > 0) then
	CALL pls_gerar_comissao_estornada(nr_seq_canal_venda_p, nr_seq_comissao_p, coalesce(vl_comissao_total_w,0), nm_usuario_p);
else
	update	pls_comissao
	set	vl_comissao_canal = coalesce(vl_comissao_total_w,0)
	where	nr_sequencia = nr_seq_comissao_p;
end if;

open C04;
loop
fetch C04 into
	nr_seq_regra_grupo_w,
	nr_seq_canal_venda_grupo_w;
EXIT WHEN NOT FOUND; /* apply on C04 */

	CALL pls_gerar_lote_comis_mov_grupo(nr_seq_lote_p, nr_seq_canal_venda_p, nr_seq_canal_venda_grupo_w, nr_seq_comissao_p, nr_seq_regra_grupo_w, nm_usuario_p, cd_estabelecimento_p);

end loop;
close C04;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_comissao_mov ( nr_seq_lote_p bigint, nr_seq_canal_venda_p bigint, nr_seq_comissao_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

