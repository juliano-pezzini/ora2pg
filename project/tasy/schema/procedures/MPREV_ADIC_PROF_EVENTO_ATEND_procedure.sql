-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mprev_adic_prof_evento_atend ( nr_seq_atendimento_p bigint, nr_seq_atend_evento_p bigint, cd_profissional_p text, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Inserir profissionais adicionais adicionais responsáveis pelo atendimento
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_atend_evento_w		mprev_atendimento_evento.nr_sequencia%type;
cd_prof_atend_w			mprev_atendimento.cd_profissional%type;
qt_registro_w			bigint;

c01 CURSOR FOR
SELECT	a.nr_sequencia
from	mprev_atendimento_evento a
where	a.nr_seq_atendimento	= nr_seq_atendimento_p;

procedure inserir_prof is
;
BEGIN
/* Ver se o profissional já não está como adicional ou principal */

select	cd_profissional
into STRICT	cd_prof_atend_w
from	mprev_atendimento a
where	a.nr_sequencia	= nr_seq_atendimento_p;

if (coalesce(cd_prof_atend_w,'0') <> cd_profissional_p) then
	/* Verificar nos profissionais adicionais do evento */

	select	count(1)
	into STRICT	qt_registro_w
	from	mprev_atend_ev_prof_adic a
	where	a.nr_seq_atend_evento	= nr_seq_atend_evento_w;

	if (qt_registro_w = 0) then
		update	mprev_atendimento_evento
		set	ie_prof_adic	= 'S',
			dt_atualizacao = clock_timestamp(),
			nm_usuario = nm_usuario_p
		where	nr_sequencia	= nr_seq_atend_evento_w;

		insert into mprev_atend_ev_prof_adic(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_atend_evento,
			cd_profissional)
		values (nextval('mprev_atend_ev_prof_adic_seq'),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_seq_atend_evento_w,
			cd_profissional_p);
	end if;
end if;
end;

begin

if (coalesce(nr_seq_atend_evento_p::text, '') = '') and (cd_profissional_p IS NOT NULL AND cd_profissional_p::text <> '') then
	open C01;
	loop
	fetch C01 into
		nr_seq_atend_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		inserir_prof;
		end;
	end loop;
	close C01;
else
	nr_seq_atend_evento_w	:= nr_seq_atend_evento_p;

	inserir_prof;
end if;

/* Não pode ter commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_adic_prof_evento_atend ( nr_seq_atendimento_p bigint, nr_seq_atend_evento_p bigint, cd_profissional_p text, nm_usuario_p text) FROM PUBLIC;

