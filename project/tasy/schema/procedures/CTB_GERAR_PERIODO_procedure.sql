-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_gerar_periodo ( cd_empresa_p empresa.cd_empresa%type, nr_seq_mes_ref_p ctb_mes_ref.nr_sequencia%type, nr_seq_sit_especial_p ctb_sit_especial_empresa.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE


cd_estab_sit_especial_w				ctb_sit_especial_empresa.cd_estabelecimento%type;
nr_seq_mes_ref_w				ctb_sit_especial_empresa.nr_seq_mes_ref%type;
dt_situacao_w					ctb_sit_especial_empresa.dt_situacao%type;
cd_empresa_sit_especial_w			ctb_sit_especial_empresa.cd_empresa%type;
dt_inicio_mes_w					ctb_mes_ref.dt_referencia%type;
dt_fim_mes_w					ctb_mes_ref.dt_referencia%type;
nr_seq_mes_ant_w				ctb_mes_ref.nr_sequencia%type;
vl_saldo_ini_w					ctb_saldo.vl_saldo%type;
vl_saldo_fin_w					ctb_saldo.vl_saldo%type;
ie_debito_credito_inicial_w			varchar(1);
ie_debito_credito_final_w			varchar(1);
dt_inicial_w					timestamp;
dt_final_w					timestamp;

/*
Pega o saldo das contas que tiveram movimentação no período informado
As movimentações são pegas diretamente da CTB_MOVIMENTO e CTB_MOVTO_CENTRO_CUSTO para o período informado
Do início do mês até o dia da situação especial ou
Do dia da situação especial até o final do mês
*/
c01 CURSOR FOR
	SELECT	nextval('ctb_saldo_periodo_seq') nr_sequencia,
		z.vl_movimento,
		z.vl_debito,
		z.vl_credito,
		z.cd_conta_contabil,
		z.ie_debito_credito,
		z.cd_centro_custo
	from (
		SELECT	sum(x.vl_movimento) vl_movimento, /* SEM Centro de custo */
			sum(x.vl_debito) vl_debito,
			sum(x.vl_credito) vl_credito,
			to_char(x.cd_conta_contabil) cd_conta_contabil,
			to_char(x.ie_debito_credito) ie_debito_credito,
			(x.cd_centro_custo)::numeric  cd_centro_custo
		from (
			select	CASE WHEN c.ie_debito_credito='D' THEN a.vl_movimento  ELSE -a.vl_movimento END  vl_movimento, /* Movimento de DEBITO SEM centro de custo */
				a.vl_movimento vl_debito,
				0 vl_credito,
				a.cd_conta_debito cd_conta_contabil,
				c.ie_debito_credito,
				null cd_centro_custo
			from	ctb_grupo_conta c,
				conta_contabil b,
				ctb_movimento a,
				lote_contabil d,
				estabelecimento e
			where	a.cd_conta_debito	= b.cd_conta_contabil
			and	b.cd_grupo		= c.cd_grupo
			and	a.nr_lote_contabil	= d.nr_lote_contabil
			and 	coalesce(a.cd_estabelecimento, d.cd_estabelecimento) = e.cd_estabelecimento
			and 	a.dt_movimento between dt_inicial_w and dt_final_w
			and 	obter_empresa_estab(coalesce(a.cd_estabelecimento, d.cd_estabelecimento)) = cd_empresa_sit_especial_w
			and	e.cd_estabelecimento	= coalesce(cd_estab_sit_especial_w,e.cd_estabelecimento)
			and	coalesce(e.ie_gerar_sped, 'N') = 'S'
			and	coalesce(b.ie_centro_custo,'N') = 'N'
			
union all

			select	CASE WHEN c.ie_debito_credito='C' THEN a.vl_movimento  ELSE -a.vl_movimento END  vl_movimento, /* Movimento de CREDITO SEM centro de custo */
				0 vl_debito,
				a.vl_movimento vl_credito,
				a.cd_conta_credito cd_conta_contabil,
				c.ie_debito_credito,
				null cd_centro_custo
			from	ctb_grupo_conta c,
				conta_contabil b,
				ctb_movimento a,
				lote_contabil d,
				estabelecimento e
			where	a.cd_conta_credito	= b.cd_conta_contabil
			and	b.cd_grupo		= c.cd_grupo
			and	a.nr_lote_contabil	= d.nr_lote_contabil
			and 	coalesce(a.cd_estabelecimento, d.cd_estabelecimento) = e.cd_estabelecimento
			and 	a.dt_movimento between dt_inicial_w and dt_final_w
			and 	obter_empresa_estab(coalesce(a.cd_estabelecimento, d.cd_estabelecimento)) = cd_empresa_sit_especial_w
			and	e.cd_estabelecimento	= coalesce(cd_estab_sit_especial_w,e.cd_estabelecimento)
			and	coalesce(e.ie_gerar_sped, 'N') = 'S'
			and	coalesce(b.ie_centro_custo,'N') = 'N'
			) x
		group by
			x.cd_conta_contabil,
			x.ie_debito_credito,
			x.cd_centro_custo
		
union all

		select	sum(y.vl_movimento) vl_movimento, /* COM Centro de custo */
			sum(y.vl_debito) vl_debito,
			sum(y.vl_credito) vl_credito,
			to_char(y.cd_conta_contabil) cd_conta_contabil,
			to_char(y.ie_debito_credito) ie_debito_credito,
			(y.cd_centro_custo)::numeric  cd_centro_custo
		from (
			select	CASE WHEN c.ie_debito_credito='D' THEN f.vl_movimento  ELSE -f.vl_movimento END  vl_movimento, /* Movimento de DEBITO COM centro de custo */
				f.vl_movimento vl_debito,
				0 vl_credito,
				a.cd_conta_debito cd_conta_contabil,
				c.ie_debito_credito,
				f.cd_centro_custo
			from	ctb_grupo_conta c,
				conta_contabil b,
				ctb_movimento a,
				lote_contabil d,
				estabelecimento e,
				ctb_movto_centro_custo f
			where	a.cd_conta_debito	= b.cd_conta_contabil
			and	b.cd_grupo		= c.cd_grupo
			and	a.nr_lote_contabil	= d.nr_lote_contabil
			and 	a.nr_sequencia		= f.nr_seq_movimento
			and 	coalesce(a.cd_estabelecimento, d.cd_estabelecimento) = e.cd_estabelecimento
			and 	a.dt_movimento between dt_inicial_w and dt_final_w
			and 	obter_empresa_estab(coalesce(a.cd_estabelecimento, d.cd_estabelecimento)) = cd_empresa_sit_especial_w
			and	e.cd_estabelecimento	= coalesce(cd_estab_sit_especial_w,e.cd_estabelecimento)
			and	coalesce(e.ie_gerar_sped, 'N') = 'S'
			and	coalesce(b.ie_centro_custo,'N') = 'S'
			
union all

			select	CASE WHEN c.ie_debito_credito='C' THEN f.vl_movimento  ELSE -f.vl_movimento END  vl_movimento, /* Movimento de CREDITO COM centro de custo */
				0 vl_debito,
				f.vl_movimento vl_credito,
				a.cd_conta_credito cd_conta_contabil,
				c.ie_debito_credito,
				f.cd_centro_custo
			from	ctb_grupo_conta c,
				conta_contabil b,
				ctb_movimento a,
				lote_contabil d,
				estabelecimento e,
				ctb_movto_centro_custo f
			where	a.cd_conta_credito	= b.cd_conta_contabil
			and	b.cd_grupo		= c.cd_grupo
			and	a.nr_lote_contabil	= d.nr_lote_contabil
			and 	a.nr_sequencia		= f.nr_seq_movimento
			and 	coalesce(a.cd_estabelecimento, d.cd_estabelecimento) = e.cd_estabelecimento
			and 	a.dt_movimento between dt_inicial_w and dt_final_w
			and 	obter_empresa_estab(coalesce(a.cd_estabelecimento, d.cd_estabelecimento)) = cd_empresa_sit_especial_w
			and	e.cd_estabelecimento	= coalesce(cd_estab_sit_especial_w,e.cd_estabelecimento)
			and	coalesce(e.ie_gerar_sped, 'N') = 'S'
			and	coalesce(b.ie_centro_custo,'N') = 'S'
			) y
		group by
			y.cd_conta_contabil,
			y.ie_debito_credito,
			y.cd_centro_custo
		) z;

/*
Pega o saldo das contas que NÃO tiveram movimentação no período informado (PRIMEIRO PERÍODO)
As movimentações são pegas do balancete do mês anterior(saldo final do mês anterior, aqui como saldo inicial e final)
Debito e Credito com valor ZERO
*/
c02 CURSOR FOR
	SELECT	nextval('ctb_saldo_periodo_seq') nr_sequencia,
		z.cd_conta_contabil,
		z.cd_centro_custo,
		substr(ctb_obter_situacao_saldo(z.cd_conta_contabil, z.vl_saldo_inicial),1,1) ie_debito_credito_inicial,
		abs(z.vl_saldo_inicial) vl_saldo_inicial
	from (
		SELECT	a.cd_conta_contabil,
			a.cd_centro_custo,
			sum(a.vl_saldo) vl_saldo_inicial
		from	estabelecimento d,
			ctb_mes_ref b,
			conta_contabil c,
			ctb_saldo a
		where	a.nr_seq_mes_ref = b.nr_sequencia
		and	c.cd_conta_contabil = a.cd_conta_contabil
		and	d.cd_estabelecimento = a.cd_estabelecimento
		and	c.ie_tipo = 'A'
		and	d.cd_empresa = cd_empresa_sit_especial_w
		and	d.cd_estabelecimento	= coalesce(cd_estab_sit_especial_w,d.cd_estabelecimento)
		and	substr(obter_se_conta_vigente(a.cd_conta_contabil, b.dt_referencia), 1, 1) = 'S'
		and	coalesce(d.ie_gerar_sped, 'N') = 'S'
		and	b.nr_sequencia = nr_seq_mes_ant_w
		and	not exists (
				select	1
				from	ctb_saldo_periodo x
				where	x.cd_conta_contabil = a.cd_conta_contabil
				and	coalesce(x.cd_centro_custo,0) = coalesce(a.cd_centro_custo,0)
				and	x.nr_seq_sit_especial = nr_seq_sit_especial_p
				)
		group by
			a.cd_conta_contabil,
			a.cd_centro_custo
		) z;

/*
Pega o saldo das contas que NÃO tiveram movimentação no período informado (SEGUNDO PERÍODO)
As movimentações são pegas dos movimentos do período anterior(saldo final do período anterior, aqui como saldo inicial e final)
Debito e Credito com valor ZERO
*/
c03 CURSOR FOR
	SELECT	nextval('ctb_saldo_periodo_seq') nr_sequencia,
		a.cd_conta_contabil,
		a.cd_centro_custo,
		a.ie_deb_cred ie_debito_credito_inicial,
		a.vl_saldo vl_saldo_inicial
	from	ctb_saldo_periodo a
	where	trunc(a.dt_saldo) = dt_inicial_w-1
	and	a.nr_seq_sit_especial = nr_seq_sit_especial_p
	and	not exists (
			SELECT	1
			from	ctb_saldo_periodo x
			where	x.dt_saldo = dt_final_w
			and	x.nr_seq_sit_especial = nr_seq_sit_especial_p
			and	x.cd_conta_contabil = a.cd_conta_contabil
			and	coalesce(x.cd_centro_custo,0) = coalesce(a.cd_centro_custo,0)
			);

type ctb_saldo_periodo_w is table of ctb_saldo_periodo%rowtype index by integer;
saldo_periodo_w ctb_saldo_periodo_w;

type c01_type is table of c01%rowtype;
c01_regs_w c01_type;

type c02_type is table of c02%rowtype;
c02_regs_w c02_type;

type c03_type is table of c03%rowtype;
c03_regs_w c03_type;

BEGIN

delete from ctb_saldo_periodo
where nr_seq_sit_especial = nr_seq_sit_especial_p;
commit;

/* Gerar registros do dia 01 até o dia XX (dia a cisão/incorporação) */

select	a.dt_situacao,
	a.cd_estabelecimento,
	a.cd_empresa,
	a.nr_seq_mes_ref,
	b.dt_referencia,
	fim_mes(b.dt_referencia)
into STRICT	dt_situacao_w,
	cd_estab_sit_especial_w,
	cd_empresa_sit_especial_w,
	nr_seq_mes_ref_w,
	dt_inicio_mes_w,
	dt_fim_mes_w
from	ctb_mes_ref b,
	ctb_sit_especial_empresa a
where	a.nr_seq_mes_ref = b.nr_sequencia
and	a.nr_sequencia = nr_seq_sit_especial_p;

dt_inicial_w := trunc(dt_inicio_mes_w);
dt_final_w := fim_dia(dt_situacao_w);

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_mes_ant_w
from	ctb_mes_ref
where	cd_empresa	= cd_empresa_sit_especial_w
and	dt_referencia	= pkg_date_utils.start_of(pkg_date_utils.add_month(dt_inicio_mes_w,-1,0),'month',0);

/*
Gerar saldo diário até o dia da situação especial
Ex: Situação especial dia 09/11/2016
Vai gerar o saldo inicial, final, debito e credito para o dia 09/11/2016
*/
open c01;
loop
fetch c01 bulk collect into c01_regs_w limit 1000;
	for i in 1 .. c01_regs_w.count loop
		begin
		/*
		Saldo inicial é o saldo final do mês anterior
		*/
		select coalesce(sum(a.vl_saldo),0)
		into STRICT	vl_saldo_ini_w
		from	ctb_saldo a
		where	a.nr_seq_mes_ref		= nr_seq_mes_ant_w
		and	obter_empresa_estab(a.cd_estabelecimento) = cd_empresa_sit_especial_w
		and	a.cd_estabelecimento 		= coalesce(cd_estab_sit_especial_w,a.cd_estabelecimento)
		and	a.cd_conta_contabil		= c01_regs_w[i].cd_conta_contabil
		and	coalesce(a.cd_centro_custo,0)	= coalesce(c01_regs_w[i].cd_centro_custo,0);

		ie_debito_credito_inicial_w := substr(ctb_obter_situacao_saldo(c01_regs_w[i].cd_conta_contabil, vl_saldo_ini_w), 1, 1);

		vl_saldo_fin_w := vl_saldo_ini_w + c01_regs_w[i].vl_movimento;

		ie_debito_credito_final_w := substr(ctb_obter_situacao_saldo(c01_regs_w[i].cd_conta_contabil, vl_saldo_fin_w), 1, 1);

		vl_saldo_ini_w := abs(vl_saldo_ini_w);
		vl_saldo_fin_w := abs(vl_saldo_fin_w);

		saldo_periodo_w[i].nr_sequencia			:= c01_regs_w[i].nr_sequencia;
		saldo_periodo_w[i].nm_usuario			:= nm_usuario_p;
		saldo_periodo_w[i].dt_atualizacao		:= clock_timestamp();
		saldo_periodo_w[i].nr_seq_mes_ref		:= nr_seq_mes_ref_w;
		saldo_periodo_w[i].cd_conta_contabil		:= c01_regs_w[i].cd_conta_contabil;
		saldo_periodo_w[i].cd_centro_custo		:= c01_regs_w[i].cd_centro_custo;
		saldo_periodo_w[i].vl_debito			:= c01_regs_w[i].vl_debito;
		saldo_periodo_w[i].vl_credito			:= c01_regs_w[i].vl_credito;
		saldo_periodo_w[i].ie_deb_cred_ant		:= ie_debito_credito_inicial_w;
		saldo_periodo_w[i].vl_saldo_ant			:= vl_saldo_ini_w;
		saldo_periodo_w[i].ie_deb_cred			:= ie_debito_credito_final_w;
		saldo_periodo_w[i].vl_saldo			:= vl_saldo_fin_w;
		saldo_periodo_w[i].dt_saldo			:= dt_final_w;
		saldo_periodo_w[i].vl_movimento			:= c01_regs_w[i].vl_movimento;
		saldo_periodo_w[i].nr_seq_sit_especial		:= nr_seq_sit_especial_p;
		saldo_periodo_w[i].cd_estabelecimento		:= cd_estab_sit_especial_w;
		end;
	end loop;
	/* Inserir os registros em massa */

	forall i in c01_regs_w.first .. c01_regs_w.last
	insert into ctb_saldo_periodo values saldo_periodo_w(i);
	commit;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

/*
Gerar saldo diário até o dia da situação especial para as contas que não tiveram movimentação no mês, até a data da situação especial
Ex: Situação especial dia 09/11/2016
Vai gerar o saldo inicial e final coim e, debito e credito para o dia 09/11/2016
*/
open c02;
loop
fetch c02 bulk collect into c02_regs_w limit 1000;
	for i in 1 .. c02_regs_w.count loop
		begin
		vl_saldo_ini_w := c02_regs_w[i].vl_saldo_inicial;

		ie_debito_credito_inicial_w := c02_regs_w[i].ie_debito_credito_inicial;

		vl_saldo_fin_w := vl_saldo_ini_w;

		ie_debito_credito_final_w := ie_debito_credito_inicial_w;

		saldo_periodo_w[i].nr_sequencia			:= c02_regs_w[i].nr_sequencia;
		saldo_periodo_w[i].nm_usuario			:= nm_usuario_p;
		saldo_periodo_w[i].dt_atualizacao		:= clock_timestamp();
		saldo_periodo_w[i].nr_seq_mes_ref		:= nr_seq_mes_ref_w;
		saldo_periodo_w[i].cd_conta_contabil		:= c02_regs_w[i].cd_conta_contabil;
		saldo_periodo_w[i].cd_centro_custo		:= c02_regs_w[i].cd_centro_custo;
		saldo_periodo_w[i].vl_debito			:= 0;
		saldo_periodo_w[i].vl_credito			:= 0;
		saldo_periodo_w[i].ie_deb_cred_ant		:= ie_debito_credito_inicial_w;
		saldo_periodo_w[i].vl_saldo_ant			:= vl_saldo_ini_w;
		saldo_periodo_w[i].ie_deb_cred			:= ie_debito_credito_final_w;
		saldo_periodo_w[i].vl_saldo			:= vl_saldo_fin_w;
		saldo_periodo_w[i].dt_saldo			:= dt_final_w;
		saldo_periodo_w[i].vl_movimento			:= 0;
		saldo_periodo_w[i].nr_seq_sit_especial		:= nr_seq_sit_especial_p;
		saldo_periodo_w[i].cd_estabelecimento		:= cd_estab_sit_especial_w;
		end;
	end loop;
	/* Inserir os registros em massa */

	forall i in c02_regs_w.first .. c02_regs_w.last
	insert into ctb_saldo_periodo values saldo_periodo_w(i);
	commit;
EXIT WHEN NOT FOUND; /* apply on c02 */
end loop;
close c02;

/*
Gerar saldo diário do dia da situação especial até o final do mês
*/
dt_inicial_w := trunc(dt_situacao_w+1);
dt_final_w := fim_dia(dt_fim_mes_w);
open c01;
loop
fetch c01 bulk collect into c01_regs_w limit 1000;
	for i in 1 .. c01_regs_w.count loop
		begin
		select	coalesce(sum(a.vl_saldo),0),
			coalesce(max(a.ie_deb_cred),'X')
		into STRICT	vl_saldo_ini_w,
			ie_debito_credito_inicial_w
		from	ctb_saldo_periodo a
		where	a.cd_conta_contabil		= c01_regs_w[i].cd_conta_contabil
		and	a.cd_estabelecimento		= coalesce(cd_estab_sit_especial_w,a.cd_estabelecimento)
		and	coalesce(a.cd_centro_custo,0)	= coalesce(c01_regs_w[i].cd_centro_custo,0)
		and	a.nr_seq_sit_especial		= nr_seq_sit_especial_p;

		/* Contas utilizadas apenas após a situação especial */

		if (ie_debito_credito_inicial_w = 'X') then
			begin
			ie_debito_credito_inicial_w := substr(ctb_obter_situacao_saldo(c01_regs_w[i].cd_conta_contabil, vl_saldo_ini_w), 1, 1);
			end;
		end if;
		ie_debito_credito_final_w := substr(ctb_obter_situacao_saldo(c01_regs_w[i].cd_conta_contabil, vl_saldo_ini_w), 1, 1);

		if (ie_debito_credito_inicial_w <> ie_debito_credito_final_w) then
			begin
			vl_saldo_ini_w := -vl_saldo_ini_w;
			end;
		end if;

		vl_saldo_fin_w := vl_saldo_ini_w + c01_regs_w[i].vl_movimento;

		ie_debito_credito_final_w := substr(ctb_obter_situacao_saldo(c01_regs_w[i].cd_conta_contabil, vl_saldo_fin_w), 1, 1);

		vl_saldo_ini_w := abs(vl_saldo_ini_w);
		vl_saldo_fin_w := abs(vl_saldo_fin_w);

		saldo_periodo_w[i].nr_sequencia			:= c01_regs_w[i].nr_sequencia;
		saldo_periodo_w[i].nm_usuario			:= nm_usuario_p;
		saldo_periodo_w[i].dt_atualizacao		:= clock_timestamp();
		saldo_periodo_w[i].nr_seq_mes_ref		:= nr_seq_mes_ref_w;
		saldo_periodo_w[i].cd_conta_contabil		:= c01_regs_w[i].cd_conta_contabil;
		saldo_periodo_w[i].cd_centro_custo		:= c01_regs_w[i].cd_centro_custo;
		saldo_periodo_w[i].vl_debito			:= c01_regs_w[i].vl_debito;
		saldo_periodo_w[i].vl_credito			:= c01_regs_w[i].vl_credito;
		saldo_periodo_w[i].ie_deb_cred_ant		:= ie_debito_credito_inicial_w;
		saldo_periodo_w[i].vl_saldo_ant			:= vl_saldo_ini_w;
		saldo_periodo_w[i].ie_deb_cred			:= ie_debito_credito_final_w;
		saldo_periodo_w[i].vl_saldo			:= vl_saldo_fin_w;
		saldo_periodo_w[i].dt_saldo			:= dt_final_w;
		saldo_periodo_w[i].vl_movimento			:= c01_regs_w[i].vl_movimento;
		saldo_periodo_w[i].nr_seq_sit_especial		:= nr_seq_sit_especial_p;
		saldo_periodo_w[i].cd_estabelecimento		:= cd_estab_sit_especial_w;
		end;
	end loop;
	/* Inserir os registros em massa */

	forall i in c01_regs_w.first .. c01_regs_w.last
	insert into ctb_saldo_periodo values saldo_periodo_w(i);
	commit;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

open c03;
loop
fetch c03 bulk collect into c03_regs_w limit 1000;
	for i in 1 .. c03_regs_w.count loop
		begin
		vl_saldo_ini_w := c03_regs_w[i].vl_saldo_inicial;

		ie_debito_credito_inicial_w := c03_regs_w[i].ie_debito_credito_inicial;

		vl_saldo_fin_w := vl_saldo_ini_w;

		ie_debito_credito_final_w := ie_debito_credito_inicial_w;

		saldo_periodo_w[i].nr_sequencia			:= c03_regs_w[i].nr_sequencia;
		saldo_periodo_w[i].nm_usuario			:= nm_usuario_p;
		saldo_periodo_w[i].dt_atualizacao		:= clock_timestamp();
		saldo_periodo_w[i].nr_seq_mes_ref		:= nr_seq_mes_ref_w;
		saldo_periodo_w[i].cd_conta_contabil		:= c03_regs_w[i].cd_conta_contabil;
		saldo_periodo_w[i].cd_centro_custo		:= c03_regs_w[i].cd_centro_custo;
		saldo_periodo_w[i].vl_debito			:= 0;
		saldo_periodo_w[i].vl_credito			:= 0;
		saldo_periodo_w[i].ie_deb_cred_ant		:= ie_debito_credito_inicial_w;
		saldo_periodo_w[i].vl_saldo_ant			:= vl_saldo_ini_w;
		saldo_periodo_w[i].ie_deb_cred			:= ie_debito_credito_final_w;
		saldo_periodo_w[i].vl_saldo			:= vl_saldo_fin_w;
		saldo_periodo_w[i].dt_saldo			:= dt_final_w;
		saldo_periodo_w[i].vl_movimento			:= 0;
		saldo_periodo_w[i].nr_seq_sit_especial		:= nr_seq_sit_especial_p;
		saldo_periodo_w[i].cd_estabelecimento		:= cd_estab_sit_especial_w;
		end;
	end loop;
	/* Inserir os registros em massa */

	forall i in c03_regs_w.first .. c03_regs_w.last
	insert into ctb_saldo_periodo values saldo_periodo_w(i);
	commit;
EXIT WHEN NOT FOUND; /* apply on c03 */
end loop;
close c03;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_gerar_periodo ( cd_empresa_p empresa.cd_empresa%type, nr_seq_mes_ref_p ctb_mes_ref.nr_sequencia%type, nr_seq_sit_especial_p ctb_sit_especial_empresa.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;

