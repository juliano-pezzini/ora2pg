-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE release_vit_sign_prof_review (nm_atrib_release_p text, nm_atrib_inactive_p text, nm_atrib_pending_p text, nm_tabela_p text, nr_sequencia_p bigint, ds_justificativa_p text ) AS $body$
WITH RECURSIVE cte AS (
DECLARE


inactveAtributtes CURSOR FOR
SELECT regexp_substr(nm_atrib_inactive_p,'[^,]+', 1, level) as nm_atributte
  (regexp_substr(nm_atrib_inactive_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_inactive_p, '[^,]+', 1, level))::text <> '')  UNION ALL
DECLARE


inactveAtributtes CURSOR FOR
SELECT regexp_substr(nm_atrib_inactive_p,'[^,]+', 1, level) as nm_atributte 
  (regexp_substr(nm_atrib_inactive_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_inactive_p, '[^,]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
;WITH RECURSIVE cte AS (


releaseAtributtes CURSOR FOR
SELECT regexp_substr(nm_atrib_release_p,'[^,]+', 1, level) as nm_atributte 
  (regexp_substr(nm_atrib_release_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_release_p, '[^,]+', 1, level))::text <> '')  UNION ALL

  
releaseAtributtes CURSOR FOR
SELECT regexp_substr(nm_atrib_release_p,'[^,]+', 1, level) as nm_atributte 
  (regexp_substr(nm_atrib_release_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_release_p, '[^,]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
;

toInactive CURSOR FOR  
SELECT * from tabela_atributo 
where nm_tabela = nm_tabela_p
and nm_atributo not in ('NR_SEQUENCIA','DT_ATUALIZACAO_NREC','NM_USUARIO_NREC','DT_ATUALIZACAO','NM_USUARIO')
and ie_tipo_atributo <> 'FUNCTION'
and nm_atributo not in (WITH RECURSIVE cte AS (
SELECT regexp_substr(nm_atrib_release_p,'[^,]+', 1, level) as nm_atributte
						  
						(regexp_substr(nm_atrib_release_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_release_p, '[^,]+', 1, level))::text <> '')
						  UNION ALL
SELECT regexp_substr(nm_atrib_release_p,'[^,]+', 1, level) as nm_atributte
						  
						(regexp_substr(nm_atrib_release_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_release_p, '[^,]+', 1, level))::text <> '')
						 JOIN cte c ON ()

) SELECT * FROM cte;
)
and nm_atributo not in (WITH RECURSIVE cte AS (
select regexp_substr(nm_atrib_pending_p,'[^,]+', 1, level) as nm_atributte
						  
						(regexp_substr(nm_atrib_pending_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_pending_p, '[^,]+', 1, level))::text <> '')  UNION ALL
select regexp_substr(nm_atrib_pending_p,'[^,]+', 1, level) as nm_atributte
						  
						(regexp_substr(nm_atrib_pending_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_pending_p, '[^,]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
)						
;

toRelease CURSOR FOR
SELECT * from tabela_atributo 
where nm_tabela = nm_tabela_p
and nm_atributo not in ('NR_SEQUENCIA','DT_ATUALIZACAO_NREC','NM_USUARIO_NREC','DT_ATUALIZACAO','NM_USUARIO')
and ie_tipo_atributo <> 'FUNCTION'
and nm_atributo not in (WITH RECURSIVE cte AS (
SELECT regexp_substr(nm_atrib_inactive_p,'[^,]+', 1, level) as nm_atributte
						  
						(regexp_substr(nm_atrib_inactive_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_inactive_p, '[^,]+', 1, level))::text <> '')
						  UNION ALL
SELECT regexp_substr(nm_atrib_inactive_p,'[^,]+', 1, level) as nm_atributte
						  
						(regexp_substr(nm_atrib_inactive_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_inactive_p, '[^,]+', 1, level))::text <> '')
						 JOIN cte c ON ()

) SELECT * FROM cte;
)
and nm_atributo not in (WITH RECURSIVE cte AS (
select regexp_substr(nm_atrib_pending_p,'[^,]+', 1, level) as nm_atributte
						  
						(regexp_substr(nm_atrib_pending_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_pending_p, '[^,]+', 1, level))::text <> '')  UNION ALL
select regexp_substr(nm_atrib_pending_p,'[^,]+', 1, level) as nm_atributte
						  
						(regexp_substr(nm_atrib_pending_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(nm_atrib_pending_p, '[^,]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
)						
;

ds_InsertSql varchar(4000);
ds_SelectInst varchar(4000);
ds_UpdateSql varchar(4000);
ds_SqlSqe	varchar(1000);
nr_NewSeq atendimento_sinal_vital.nr_sequencia%type;
BEGIN

if (coalesce(nm_atrib_release_p::text, '') = '' and coalesce(nm_atrib_pending_p::text, '') = '') then
	CALL liberar_informacao(nm_tabela_p, 'NR_SEQUENCIA',nr_sequencia_p,wheb_usuario_pck.get_nm_usuario);
	CALL inativar_informacao(nm_tabela_p, 'NR_SEQUENCIA',nr_sequencia_p,ds_justificativa_p,wheb_usuario_pck.get_nm_usuario);
elsif (coalesce(nm_atrib_inactive_p::text, '') = '' and coalesce(nm_atrib_pending_p::text, '') = '') then
	CALL liberar_informacao(nm_tabela_p, 'NR_SEQUENCIA',nr_sequencia_p,wheb_usuario_pck.get_nm_usuario);
else
	if (nm_atrib_inactive_p IS NOT NULL AND nm_atrib_inactive_p::text <> '') then
		ds_SqlSqe := 'select '|| nm_tabela_p ||'_seq.nextval from dual';
		EXECUTE ds_SqlSqe into STRICT nr_NewSeq;
		
		ds_InsertSql := 'insert into '|| nm_tabela_p || ' (nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario ';
		ds_SelectInst := '(select '|| nr_NewSeq ||', dt_atualizacao_nrec, nm_usuario_nrec, sysdate, wheb_usuario_pck.get_nm_usuario ';

		for c1 in toInactive loop
			ds_InsertSql := ds_InsertSql || ','|| c1.nm_atributo;
			ds_SelectInst := ds_SelectInst || ','|| c1.nm_atributo;
		end loop;

		ds_InsertSql := ds_InsertSql || ') ';
		ds_SelectInst := ds_SelectInst ||' from '|| nm_tabela_p;
		ds_SelectInst := ds_SelectInst ||' where nr_sequencia = '|| nr_sequencia_p ||') ';
		EXECUTE ds_InsertSql || ds_SelectInst;
		
		ds_UpdateSql := 'update '|| nm_tabela_p ||' set ';
		ds_UpdateSql := ds_UpdateSql || ' dt_atualizacao = sysdate, nm_usuario = wheb_usuario_pck.get_nm_usuario,  ';

		for c2 in inactveAtributtes loop
			ds_UpdateSql := ds_UpdateSql || c2.nm_atributte || ' = null,';
		end loop;

		ds_UpdateSql := substr(ds_UpdateSql,0, length(ds_UpdateSql)-1);
		ds_UpdateSql := ds_UpdateSql || ' where nr_sequencia = '|| nr_sequencia_p;
		EXECUTE ds_UpdateSql;
		CALL liberar_informacao(nm_tabela_p, 'NR_SEQUENCIA',nr_NewSeq,wheb_usuario_pck.get_nm_usuario);
		CALL inativar_informacao(nm_tabela_p, 'NR_SEQUENCIA',nr_NewSeq,ds_justificativa_p,wheb_usuario_pck.get_nm_usuario);	
	end if;

	if (nm_atrib_pending_p IS NOT NULL AND nm_atrib_pending_p::text <> '' AND nm_atrib_release_p IS NOT NULL AND nm_atrib_release_p::text <> '') then
		ds_SqlSqe := 'select '|| nm_tabela_p ||'_seq.nextval from dual';
		EXECUTE ds_SqlSqe into STRICT nr_NewSeq;
		
		ds_InsertSql := 'insert into '|| nm_tabela_p || ' (nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario ';
		ds_SelectInst := '(select '|| nr_NewSeq ||', dt_atualizacao_nrec, nm_usuario_nrec, sysdate, wheb_usuario_pck.get_nm_usuario ';

		for c1 in toRelease loop
			ds_InsertSql := ds_InsertSql || ','|| c1.nm_atributo;
			ds_SelectInst := ds_SelectInst || ','|| c1.nm_atributo;
		end loop;

		ds_InsertSql := ds_InsertSql || ') ';
		ds_SelectInst := ds_SelectInst ||' from '|| nm_tabela_p;
		ds_SelectInst := ds_SelectInst ||' where nr_sequencia = '|| nr_sequencia_p ||') ';
		EXECUTE ds_InsertSql || ds_SelectInst;
		
		ds_UpdateSql := 'update '|| nm_tabela_p ||' set ';
		ds_UpdateSql := ds_UpdateSql || ' dt_atualizacao = sysdate, nm_usuario = wheb_usuario_pck.get_nm_usuario,  ';

		for c2 in releaseAtributtes loop
			ds_UpdateSql := ds_UpdateSql || c2.nm_atributte || ' = null,';
		end loop;

		ds_UpdateSql := substr(ds_UpdateSql,0, length(ds_UpdateSql)-1);
		ds_UpdateSql := ds_UpdateSql || ' where nr_sequencia = '|| nr_sequencia_p;
		EXECUTE ds_UpdateSql;
		CALL liberar_informacao(nm_tabela_p, 'NR_SEQUENCIA',nr_NewSeq,wheb_usuario_pck.get_nm_usuario);
	elsif (nm_atrib_release_p IS NOT NULL AND nm_atrib_release_p::text <> '') then
		CALL liberar_informacao(nm_tabela_p, 'NR_SEQUENCIA',nr_sequencia_p,wheb_usuario_pck.get_nm_usuario);
	end if;
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE release_vit_sign_prof_review (nm_atrib_release_p text, nm_atrib_inactive_p text, nm_atrib_pending_p text, nm_tabela_p text, nr_sequencia_p bigint, ds_justificativa_p text ) FROM PUBLIC;

