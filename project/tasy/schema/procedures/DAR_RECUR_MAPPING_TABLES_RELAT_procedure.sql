-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dar_recur_mapping_tables_relat (table_p text, reference_table_p text, previous_reference_nr_seq_p bigint, nivel_p bigint, CD_ESTABELECIMENTO_P dar_tables_relat.CD_ESTABELECIMENTO%TYPE DEFAULT NULL, NM_USUARIO_P dar_tables_relat.NM_USUARIO%TYPE DEFAULT NULL) AS $body$
DECLARE

already_exists_num_f_w   bigint;
already_exists_num_s_w   bigint;
nr_seq_reference_f_ret_w bigint;
nr_seq_reference_s_ret_w bigint;
nivel_w                  bigint;
BEGIN

  IF nivel_p < 6 THEN
    nivel_w := nivel_p + 1;
  ELSE 
    RETURN;
  END IF;

  DECLARE
    relationship_reverse_cur CURSOR FOR
      SELECT
          c.table_name,
          c.constraint_name,
          co.column_name,
          ref_col.owner         AS ref_schema_name,
          ref_col.table_name    AS ref_table_name,
          ref_col.column_name   AS ref_column_name
      FROM
          user_constraints    c
          INNER JOIN user_cons_columns   co ON co.owner = c.owner
                                            AND co.constraint_name = c.constraint_name
          INNER JOIN user_cons_columns   ref_col ON ref_col.owner = c.r_owner
                                                  AND ref_col.constraint_name = c.r_constraint_name
                                                  AND ref_col.position = co.position
          INNER JOIN(
              SELECT
                  constraint_name
              FROM
                  user_constraints
              WHERE
                  constraint_type  (
                      'P',
                      'U'
                  )
                  AND table_name = upper(reference_table_p)
          ) s ON c.r_constraint_name = s.constraint_name
      WHERE c.constraint_type = 'R'
      AND         c.table_name <> reference_table_p
      AND         c.table_name <> table_p
      AND         ref_col.column_name = co.column_name
      AND         c.table_name IN (SELECT DS_TABLE FROM DAR_TABLES_FK);

      TYPE relationship_rev_type IS TABLE OF relationship_reverse_cur%ROWTYPE;
      l_reverse_relations relationship_rev_type;

  BEGIN 

    SELECT
        c.table_name,
        c.constraint_name,
        co.column_name,
        ref_col.owner         AS ref_schema_name,
        ref_col.table_name    AS ref_table_name,
        ref_col.column_name   AS ref_column_name
        BULK COLLECT INTO STRICT l_reverse_relations
    FROM
        user_constraints    c
        INNER JOIN user_cons_columns   co ON co.owner = c.owner
                                          AND co.constraint_name = c.constraint_name
        INNER JOIN user_cons_columns   ref_col ON ref_col.owner = c.r_owner
                                                AND ref_col.constraint_name = c.r_constraint_name
                                                AND ref_col.position = co.position
        INNER JOIN(
            SELECT
                constraint_name
            FROM
                user_constraints
            WHERE
                constraint_type IN (
                    'P',
                    'U'
                )
                AND table_name = upper(reference_table_p)
        ) s ON c.r_constraint_name = s.constraint_name
    WHERE c.constraint_type = 'R'
    AND         c.table_name <> reference_table_p
    AND         c.table_name <> table_p
    AND         ref_col.column_name = co.column_name
    AND         c.table_name IN (SELECT DS_TABLE FROM DAR_TABLES_FK);

    IF l_reverse_relations.count > 0 THEN
      FOR x IN l_reverse_relations.first .. l_reverse_relations.last 
      LOOP 

        SELECT Count(*) 
        INTO STRICT   already_exists_num_f_w 
        FROM   dar_tables_relat 
        WHERE  nm_table = table_p 
        AND    nm_relationship_table = l_reverse_relations[x].table_name
        AND (nr_nivel <= nivel_w OR coalesce(nr_nivel::text, '') = '');

        IF already_exists_num_f_w < 1 THEN 
  
          DELETE 
          FROM   dar_tables_relat 
          WHERE  nm_table = table_p 
          AND    nm_relationship_table = l_reverse_relations[x].table_name
          AND    nr_nivel > nivel_w;

          INSERT INTO dar_tables_relat(
				nr_sequencia,
				cd_estabelecimento,
				nm_usuario,
				dt_atualizacao,
				nm_table, 
				nm_relationship_table, 
				nr_seq_reference, 
				nm_relationship_pk, 
				nm_table_fk, 
				nm_constraint 
          ) 
          VALUES ( 
				nextval('dar_tables_relat_seq'),
				CD_ESTABELECIMENTO_P,
				NM_USUARIO_P,
				clock_timestamp(),
				reference_table_p, 
				l_reverse_relations[x].table_name, 
				previous_reference_nr_seq_p, 
				l_reverse_relations[x].ref_column_name, 
				l_reverse_relations[x].column_name, 
				l_reverse_relations[x].constraint_name
          ) 
          returning   nr_sequencia 
          INTO        nr_seq_reference_f_ret_w;

          INSERT INTO dar_tables_relat( 
				nr_sequencia,
				cd_estabelecimento,
				nm_usuario,
				dt_atualizacao,
				nm_table, 
				nm_relationship_table, 
				nr_seq_reference, 
				nm_relationship_pk, 
				nm_table_fk,
				nm_constraint,
				nr_nivel 
          ) 
          VALUES ( 
				nextval('dar_tables_relat_seq'),
				CD_ESTABELECIMENTO_P,
				NM_USUARIO_P,
				clock_timestamp(),
				table_p, 
				l_reverse_relations[x].table_name, 
				nr_seq_reference_f_ret_w, 
				l_reverse_relations[x].ref_column_name, 
				l_reverse_relations[x].column_name,
				l_reverse_relations[x].constraint_name,
				nivel_w 
          );

          CALL DAR_RECUR_MAPPING_TABLES_RELAT(table_p, l_reverse_relations[x].table_name, nr_seq_reference_f_ret_w, nivel_w, CD_ESTABELECIMENTO_P, NM_USUARIO_P);
        END IF;
      END LOOP;
      COMMIT;
    END IF;
  END;

  DECLARE
    relationship_cur CURSOR FOR
      SELECT   CO.column_name,
                C.constraint_name, 
                REF_COL.owner       AS REF_SCHEMA_NAME, 
                REF_COL.table_name  AS REF_TABLE_NAME, 
                REF_COL.column_name AS REF_COLUMN_NAME 
      FROM       user_constraints C 
      inner join user_cons_columns CO 
      ON         CO.owner = C.owner 
      AND        CO.constraint_name = C.constraint_name 
      inner join user_cons_columns REF_COL 
      ON         REF_COL.owner = C.r_owner 
      AND        REF_COL.constraint_name = C.r_constraint_name 
      AND        REF_COL.position = CO.position 
      WHERE      C.table_name = reference_table_p 
      AND        REF_COL.table_name <> table_p 
      AND        REF_COL.table_name <> reference_table_p
      AND        CO.column_name = REF_COL.column_name
      AND        C.constraint_type = 'R'
      AND        REF_COL.table_name IN (SELECT DS_TABLE FROM DAR_TABLES_FK);

    TYPE relationship_type IS TABLE OF relationship_cur%ROWTYPE;
    l_relations relationship_type;

BEGIN

      SELECT   CO.column_name,
                C.constraint_name, 
                REF_COL.owner       AS REF_SCHEMA_NAME, 
                REF_COL.table_name  AS REF_TABLE_NAME, 
                REF_COL.column_name AS REF_COLUMN_NAME 
      BULK COLLECT INTO STRICT l_relations
      FROM       user_constraints C 
      inner join user_cons_columns CO 
      ON         CO.owner = C.owner 
      AND        CO.constraint_name = C.constraint_name 
      inner join user_cons_columns REF_COL 
      ON         REF_COL.owner = C.r_owner 
      AND        REF_COL.constraint_name = C.r_constraint_name 
      AND        REF_COL.position = CO.position 
      WHERE      C.table_name = reference_table_p 
      AND        REF_COL.table_name <> table_p 
      AND        REF_COL.table_name <> reference_table_p 
      AND        CO.column_name = REF_COL.column_name
      AND        C.constraint_type = 'R'
      AND        REF_COL.table_name IN (SELECT DS_TABLE FROM DAR_TABLES_FK);

  IF l_relations.COUNT > 0
  THEN
    FOR i IN l_relations.FIRST .. l_relations.LAST
    LOOP

      SELECT Count(*)
      INTO STRICT   already_exists_num_s_w 
      FROM   dar_tables_relat 
      WHERE  nm_table = table_p 
      AND    nm_relationship_table = l_relations[i].ref_table_name
      AND    nr_nivel <= nivel_w;

      IF already_exists_num_s_w < 1 THEN 
     
        DELETE 
        FROM   dar_tables_relat 
        WHERE  nm_table = table_p 
        AND    nm_relationship_table = l_relations[i].ref_table_name
        AND    nr_nivel > nivel_w;

        INSERT INTO dar_tables_relat(
				  nr_sequencia,
				  cd_estabelecimento,
				  nm_usuario,
				  dt_atualizacao,
				  nm_table, 
				  nm_relationship_table, 
				  nr_seq_reference, 
				  nm_relationship_pk, 
				  nm_table_fk, 
				  nm_constraint
		) 
		VALUES ( 
			nextval('dar_tables_relat_seq'),
			CD_ESTABELECIMENTO_P,
			NM_USUARIO_P,
			clock_timestamp(),
			reference_table_p, 
			l_relations[i].ref_table_name, 
			previous_reference_nr_seq_p, 
			l_relations[i].ref_column_name, 
			l_relations[i].column_name, 
			l_relations[i].constraint_name
		) 
        returning   nr_sequencia 
        INTO        nr_seq_reference_s_ret_w;

        INSERT INTO dar_tables_relat( 
			nr_sequencia,
			cd_estabelecimento,
			nm_usuario,
			dt_atualizacao,
			nm_table, 
			nm_relationship_table, 
			nr_seq_reference, 
			nm_relationship_pk, 
			nm_table_fk,
			nm_constraint,
			nr_nivel
		) 
		VALUES ( 
			nextval('dar_tables_relat_seq'),
			CD_ESTABELECIMENTO_P,
			NM_USUARIO_P,
			clock_timestamp(),
			table_p, 
			l_relations[i].ref_table_name, 
			nr_seq_reference_s_ret_w, 
			l_relations[i].ref_column_name, 
			l_relations[i].column_name,
			l_relations[i].constraint_name,
			nivel_w 
		);

        CALL DAR_RECUR_MAPPING_TABLES_RELAT(table_p, l_relations[i].ref_table_name, nr_seq_reference_s_ret_w, nivel_w, CD_ESTABELECIMENTO_P, NM_USUARIO_P);
		
      END IF;
    END LOOP;
    COMMIT;
  END IF;
END;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dar_recur_mapping_tables_relat (table_p text, reference_table_p text, previous_reference_nr_seq_p bigint, nivel_p bigint, CD_ESTABELECIMENTO_P dar_tables_relat.CD_ESTABELECIMENTO%TYPE DEFAULT NULL, NM_USUARIO_P dar_tables_relat.NM_USUARIO%TYPE DEFAULT NULL) FROM PUBLIC;

