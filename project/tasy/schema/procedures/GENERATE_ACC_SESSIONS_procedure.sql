-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE generate_acc_sessions ( nr_interno_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_sequencia_w		bigint;
register_w		integer := 0;
qt_records_w		integer := 0;
a			smallint;

cd_convenio_w			pessoa_titular_convenio.cd_convenio%type;
cd_categoria_w			pessoa_titular_convenio.cd_categoria%type;
qt_min_sessions_w 		performed_sessions.qt_min_sessions%type;
ie_origem_proced_w    		performed_sessions.ie_origem_proced%type;
ie_acc_gen_rule_w		performed_sessions.ie_acc_gen_rule%type;
qt_max_session_w		performed_sessions.qt_max_session%type;
cd_department_w 		performed_sessions.cd_department%type;
cd_procedimento_w		procedimento.cd_procedimento%type;
dt_entrada_unidade_w		atend_paciente_unidade.dt_entrada_unidade%type;
cd_convenio_orgi_w		atend_categoria_convenio.cd_convenio%type;
ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;
nr_seq_classificacao_w		atendimento_paciente.nr_seq_classificacao%type;
nr_atendimento_w		atendimento_paciente.nr_atendimento%type;
nr_seq_atepacu_w  		atend_paciente_unidade.nr_seq_interno%type;
nr_interno_conta_w		conta_paciente.nr_interno_conta%type;

/*
Notes:
ie_acc_gen_rule  := G = Group I - Individual

For crearting an account depending on the rule from Insurance,Prices and rule Records/Rules/Rule for Health Fund Claim tab
G - only one entry
I - entries depending on sessions performed
*/
c01 CURSOR FOR
	SELECT	coalesce(qt_min_sessions,0),
		cd_procedimento,
		ie_origem_proced,
		ie_acc_gen_rule,
		coalesce(qt_max_session,999)
	from 	performed_sessions
	where 	cd_convenio = cd_convenio_orgi_w
	and 	register_w between coalesce(qt_min_sessions,0) and coalesce(qt_max_session,999)
	and 	coalesce(cd_department, cd_department_w) = cd_department_w
	and	coalesce(ie_tipo_atendimento, ie_tipo_atendimento_w) = ie_tipo_atendimento_w
	and 	coalesce(nr_seq_classificacao, nr_seq_classificacao_w) = nr_seq_classificacao_w
	and   	cd_health_fund = cd_convenio_w
	and	clock_timestamp() between coalesce(dt_start,clock_timestamp()) and coalesce(dt_end,clock_timestamp())
	order 	by	coalesce(qt_min_sessions,0),
			coalesce(qt_max_session,999);

c02 CURSOR FOR
	SELECT 	count(*) qt_session,
		dt_atualizacao
	from 	agenda_consulta
	where 	nr_atendimento = nr_atendimento_w  -- To check how many sessions are performed
	and 	ie_status_agenda = 'E'
	group	by dt_atualizacao;

BEGIN

select	max(nr_atendimento)
into STRICT	nr_atendimento_w
from 	conta_paciente
where 	nr_interno_conta = nr_interno_conta_p;

select  ie_tipo_atendimento,
        coalesce(nr_seq_classificacao,0)
into STRICT    ie_tipo_atendimento_w,
	nr_seq_classificacao_w
from	atendimento_paciente
where   nr_atendimento = nr_atendimento_w;

cd_department_w := obter_setor_atendimento(nr_atendimento_w);

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_sequencia_w
from	pessoa_titular_convenio	a,
	atendimento_paciente b
where 	a.cd_pessoa_fisica = b.cd_pessoa_fisica
and   	b.nr_atendimento = nr_atendimento_w
and	clock_timestamp() between coalesce(a.dt_inicio_vigencia,clock_timestamp()) and coalesce(a.dt_fim_vigencia,clock_timestamp())
and 	a.cd_convenio in (	SELECT	x.cd_convenio
				from 	convenio x
				where 	x.ie_tipo_convenio = 2 --- PRIVATE HEALTH FUND
				and	x.ie_situacao = 'A');

if (nr_sequencia_w > 0) then

	select	cd_convenio,
		cd_categoria
	into STRICT	cd_convenio_w,
		cd_categoria_w
	from 	pessoa_titular_convenio
	where 	nr_sequencia = nr_sequencia_w;   -- Insurance and category
	cd_convenio_orgi_w 	:= obter_convenio_atendimento(nr_atendimento_w);
	nr_seq_atepacu_w	:= obter_atepacu_paciente(nr_atendimento_w, 'A');

	for rCountSession in c02 loop
		begin
		ie_acc_gen_rule_w := null;
		register_w := register_w + rCountSession.qt_session;

		
		open	c01;
		loop
		fetch	c01 into
			qt_min_sessions_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			ie_acc_gen_rule_w,
			qt_max_session_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		end loop;
		close c01;

		if (ie_acc_gen_rule_w IS NOT NULL AND ie_acc_gen_rule_w::text <> '') then
			select	coalesce(max(dt_entrada_unidade), clock_timestamp())
			into STRICT	dt_entrada_unidade_w
			from	atend_paciente_unidade
			where	nr_seq_interno = nr_seq_atepacu_w;


			if (ie_acc_gen_rule_w = 'G') then
				select	count(1)
				into STRICT	qt_records_w
				from 	conta_paciente
				where 	cd_convenio_parametro = cd_convenio_w
				and 	nr_atendimento = nr_atendimento_w;
			else
				select	count(1)
				into STRICT	qt_records_w
				from 	procedimento_paciente
				where 	nr_atendimento 	= nr_atendimento_w
				and 	cd_procedimento = cd_procedimento_w
				and 	cd_convenio 	= cd_convenio_w;

				qt_records_w := (register_w - qt_records_w)-1;
			end if;

			if	((ie_acc_gen_rule_w = 'G' and qt_records_w = 0) or (ie_acc_gen_rule_w = 'I')) then

				for a in 1..qt_records_w+1
				loop
					select	nextval('procedimento_paciente_seq')
					into STRICT	nr_sequencia_w
					;

					select	coalesce(max(nr_interno_conta),0)
					into STRICT	nr_interno_conta_w
					from 	conta_paciente
					where 	cd_convenio_parametro = cd_convenio_w
					and 	nr_atendimento = nr_atendimento_w
					and 	ie_status_acerto = 1;

					insert into procedimento_paciente(
								nr_sequencia,
								nr_atendimento,
								dt_entrada_unidade,
								cd_procedimento,
								dt_procedimento,
								cd_convenio,
								cd_categoria,
								ie_origem_proced,
								qt_procedimento,
								cd_setor_atendimento,
								nr_seq_atepacu,
								vl_procedimento,
								nm_usuario_original,
								dt_atualizacao,
								nm_usuario,
								nr_interno_conta)
							values ( nr_sequencia_w,
								nr_atendimento_w,
								dt_entrada_unidade_w,
								cd_procedimento_w,
								clock_timestamp(),
								cd_convenio_w,
								cd_categoria_w,
								ie_origem_proced_w,
								1,
								cd_department_w,
								nr_seq_atepacu_w,
								0,
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								CASE WHEN nr_interno_conta_w=0 THEN null  ELSE nr_interno_conta_w END
								);

					CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				end loop;
			end if;
		end if;
		end;
	end loop; -- rCountSession
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_acc_sessions ( nr_interno_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

