-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_0200_icmsipi (nr_seq_controle_p bigint) AS $body$
DECLARE


/*REGISTRO 0200: IDENTIFICAÇÃO DAS UNIDADES DE MEDIDA*/



-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) := 'N';
qt_cursor_w 			bigint := 0;
nr_vetor_w  			bigint := 0;
ie_gerar_w				FIS_EFD_ICMSIPI_REG_LOTE.IE_GERAR%type;

-- FIS_EFD_ICMSIPI_0200
nr_seq_icmsipi_0200_w 	fis_efd_icmsipi_0200.nr_sequencia%type;

-- USUARIO
nm_usuario_w 			usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro 0200 restringindo pela sequencia da nota fiscal*/
c_reg_0200 CURSOR FOR
	SELECT	distinct a.cd_item,
			fis_efd_icmsipi_elimina_c(b.ds_material) ds_item,
			null cd_barra,
			null cd_ant_item,
			b.cd_unidade_medida_estoque cd_unid_inv,
			c.ie_tipo_fiscal cd_tipo_item,
			null cd_ncm,
			null ds_ex_ipi,
			c.nr_seq_genero_item cd_gen,
			null cd_lst,
			null nr_aliq_icms,
			c.cd_tipo_cest cd_cest
	FROM material b, (	SELECT	cd_item
			from	fis_efd_icmsipi_C170
			where	nr_seq_controle	= nr_seq_controle_p
			
union all

			select	cd_item
			from	fis_efd_icmsipi_C470
			where	nr_seq_controle	= nr_seq_controle_p
			
union all

			select	cd_item
			from	fis_efd_icmsipi_H010
			where	nr_seq_controle	= nr_seq_controle_p
			
union all

			select	cd_item
			from	fis_efd_icmsipi_K200
			where	nr_seq_controle	= nr_seq_controle_p
			
union all

			select	cd_item
			from	fis_efd_icmsipi_K280
			where	nr_seq_controle	= nr_seq_controle_p) a
LEFT OUTER JOIN material_fiscal c ON (a.cd_item = c.cd_material)
WHERE a.cd_item	= b.cd_material;

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_0200*/

type reg_c_reg_0200 is table of c_reg_0200%RowType;
vetReg0200 reg_c_reg_0200;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_0200 */

type registro is table of fis_efd_icmsipi_0200%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_reg_0200;
loop
fetch c_reg_0200 bulk collect into vetReg0200 limit 1000;
	for i in 1 .. vetReg0200.Count loop
		begin

		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;

		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w := 'S';
		end if;

		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_0200 */

		select	nextval('fis_efd_icmsipi_0200_seq')
		into STRICT	nr_seq_icmsipi_0200_w
		;

		/*Inserindo valores no array para realização do forall posteriormente*/
		fis_registros_w[qt_cursor_w].nr_sequencia 			:= nr_seq_icmsipi_0200_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao 		:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario 			:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec 	:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec 		:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg 				:= '0200';
		fis_registros_w[qt_cursor_w].cd_item 				:= vetReg0200[i].cd_item;
		fis_registros_w[qt_cursor_w].ds_item 				:= trim(both vetReg0200[i].ds_item);
		fis_registros_w[qt_cursor_w].cd_barra 				:= vetReg0200[i].cd_barra;
		fis_registros_w[qt_cursor_w].cd_ant_item 			:= vetReg0200[i].cd_ant_item;
		fis_registros_w[qt_cursor_w].cd_unid_inv 			:= substr(vetReg0200[i].cd_unid_inv, 1, 6);
		fis_registros_w[qt_cursor_w].cd_tipo_item 			:= vetReg0200[i].cd_tipo_item;
		fis_registros_w[qt_cursor_w].cd_ncm 				:= vetReg0200[i].cd_ncm;
		fis_registros_w[qt_cursor_w].ds_ex_ipi 				:= vetReg0200[i].ds_ex_ipi;
		fis_registros_w[qt_cursor_w].cd_gen 				:= vetReg0200[i].cd_gen;
		fis_registros_w[qt_cursor_w].cd_lst 				:= vetReg0200[i].cd_lst;
		fis_registros_w[qt_cursor_w].nr_aliq_icms 			:= vetReg0200[i].nr_aliq_icms;
		fis_registros_w[qt_cursor_w].cd_cest 				:= vetReg0200[i].cd_cest;
		fis_registros_w[qt_cursor_w].nr_seq_controle 		:= nr_seq_controle_p;
		
		
		select	max(ie_gerar)
		into STRICT 	ie_gerar_w
		from	fis_efd_icmsipi_reg_lote
		where	nr_seq_lote		= nr_seq_controle_p
		and 	ds_registro = '0205'
		order by nr_ordem;

		if (ie_gerar_w = 'S') then
			CALL fis_gerar_reg_0205_icmsipi(	nr_seq_controle_p,vetReg0200[i].cd_item);
		end if;
		
		CALL fis_gerar_reg_0220_icmsipi(	nr_seq_controle_p,
						vetReg0200[i].cd_item,
						vetReg0200[i].cd_unid_inv);

		if (nr_vetor_w >= 1000) then
			begin
			/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_0200 */

			forall i in fis_registros_w.first .. fis_registros_w.last
				insert into fis_efd_icmsipi_0200 values fis_registros_w(i);

			nr_vetor_w := 0;
			fis_registros_w.delete;

			commit;

			end;
		end if;

		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w := nr_vetor_w + 1;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_0200 */
end loop;
close c_reg_0200;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_0200 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update	fis_efd_icmsipi_controle
	set	ie_mov_0 = 'S'
	where	nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_0200_icmsipi (nr_seq_controle_p bigint) FROM PUBLIC;

