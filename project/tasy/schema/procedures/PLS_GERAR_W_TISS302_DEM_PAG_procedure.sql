-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE rc_dados_protocolo AS (nr_protocol_w				bigint, 
						dt_protocol_w				timestamp, 
						ie_origem_w				varchar(10), 
						nr_lote_prestador_w			pls_protocolo_conta.nr_protocolo_prestador%type);
CREATE TYPE rc_guia AS (nr_seq_guia_tiss_w			bigint);
CREATE TYPE rc_dados_prot AS (vl_valor_w				double precision, -- Array que armazena os eventos financeiros dos protocolos 
				ds_proc_w				varchar(255), 
				nr_event_w				varchar(255), 
				ie_nature_w				varchar(10), 
				nr_proot_w				bigint);


CREATE OR REPLACE PROCEDURE pls_gerar_w_tiss302_dem_pag ( nr_seq_lote_p bigint, nr_seq_prestador_p bigint, nm_usuario_p text) AS $body$
DECLARE
	-- Array que armazena os números dos protocolos 
 	-- Array que armazena o número de sequencia da guia gerado 
type	tb_protocolo 	is table of rc_dados_protocolo		index by integer;
type 	tb_guia 	is table of rc_guia 			index by integer;
type	tb_dados_prot 	is table of rc_dados_prot		index by integer;

tb_protocolo_w 		tb_protocolo;
tb_guia_w		tb_guia;
tb_dados_prot_w		tb_dados_prot;

--Váriaveis 
nr_protoc_cursor_w			bigint 	:= 1;
nr_seq_tiss_guia_w			w_tiss_guia.nr_sequencia%type := null;	
nr_teste_w				bigint 	:= 1;
dt_protocolo_w				timestamp;
nr_lote_prestador_w			pls_protocolo_conta.nr_protocolo_prestador%type;
ie_origem_w				varchar(10);
vl_total_apresent_prot_w		double precision	:= 0;
vl_total_process_prot_w			double precision	:= 0;
vl_total_liberado_prot_w		double precision	:= 0;
vl_total_glosa_prot_w			double precision	:= 0;
vl_credito_w				double precision	:= 0;
vl_debito_w				double precision	:= 0;
vl_total_deb_cred_w			double precision	:= 0;
vl_total_geral_w			double precision	:= 0;
vl_apresentado_w			double precision	:= 0;
ie_natureza_w				varchar(10);

--Contadores 
nr_prot_w				bigint 	:= 1;
nr_med_w				bigint 	:= 1;
qt_pag_guia_w				bigint 	:= 1;
teste_w					bigint 	:= 1;
numero_proc_w				bigint	:= 1;
nr_protoc_tiss_w			bigint;
nr_guia_w				integer;
nr_seq_protocol_w			bigint	:= 0;

c01 CURSOR FOR  -- Cursor que seleciona os números dos protocolos onde o prestador e o número do lote seja, iguai aos passados por parametros 
	SELECT	nr_sequencia, 
		dt_protocolo, 
		nr_protocolo_prestador, 
		ie_origem 
	from	(SELECT a.nr_sequencia, 
			a.dt_protocolo, 
			a.nr_protocolo_prestador, 
			'C' ie_origem 
		from 	pls_protocolo_conta a 
		where  ie_status(3,4,6) 
		and exists (select 1 
				from 	pls_conta b 
				where 	b.nr_seq_protocolo = a.nr_sequencia 
				and 	ie_status   <>'U' 
				and 	exists (select 1 
						from	pls_conta_medica_resumo c 
						where	c.nr_seq_conta   	= b.nr_sequencia 
						and	c.nr_seq_prestador_pgto	= nr_seq_prestador_p 
						and	c.nr_seq_lote_pgto   	= nr_seq_lote_p)) 
		
union all
 
		select	b.nr_seq_protocolo, 
			c.dt_apresentacao_lote, 
			(	select	max(x.nr_lote) 
				from	pls_rec_glosa_prot_cta_imp	x 
				where	x.nr_seq_protocolo		= b.nr_seq_protocolo) nr_protocolo_prestador, 
			'R' ie_origem 
		from	pls_conta_rec_resumo_item	a, 
			pls_rec_glosa_conta		b, 
			pls_rec_glosa_protocolo		c 
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_p 
		and	a.nr_seq_lote_pgto	= nr_seq_lote_p 
		and	a.nr_seq_conta_rec	= b.nr_sequencia 
		and	b.nr_seq_protocolo	= c.nr_sequencia 
		and	b.ie_status		!= '3' 
		and	c.ie_status in ('3','6') 
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote 
		) alias6 
	order by nr_protocolo_prestador, nr_sequencia;
	
 
c02 CURSOR FOR  -- Cursor que busca as informações dos protocolos do Cursor 1 
	SELECT	dt_competencia_pgto, 
		coalesce(sum(vl_liberado),0) vl_liberado_w, 
		coalesce(sum(vl_liberado),0) vl_processado_w, 
		coalesce(sum(vl_glosa),0) vl_glosa_w 
	from 	pls_conta_medica_resumo 
	where 	nr_seq_prestador_pgto 		= nr_seq_prestador_p 
	and 	nr_seq_protocolo		= nr_protoc_cursor_w 
	and 	nr_seq_lote_pgto 		= nr_seq_lote_p 
	and	ie_situacao			!= 'I' 
	group by dt_competencia_pgto 
	
union all
 
	SELECT	a.dt_competencia_pgto, 
		coalesce(sum(coalesce(a.vl_liberado,0)),0) vl_liberado_w, 
		coalesce(sum(coalesce(a.vl_liberado,0)),0) vl_processado_w, 
		coalesce(sum(coalesce(a.vl_glosa,0)),0) vl_glosa_w 
	from	pls_conta_rec_resumo_item	a, 
		pls_rec_glosa_conta		b, 
		pls_rec_glosa_protocolo		c 
	where	a.nr_seq_prestador_pgto	= nr_seq_prestador_p 
	and	a.nr_seq_lote_pgto	= nr_seq_lote_p 
	and	a.nr_seq_conta_rec	= b.nr_sequencia 
	and	b.nr_seq_protocolo	= nr_protoc_cursor_w 
	and	b.nr_seq_protocolo	= c.nr_sequencia 
	and	a.ie_situacao		!= 'I' 
	and	b.ie_status		!= '3' 
	and	c.ie_status in ('3','6') 
	group by a.dt_competencia_pgto;
	
 
 
--IE_TIPO_EVENTO=	 F - financeiro G - recurso glosa 
--IE_NATUREZA=	 P- Provento D - Desconto 
c03 CURSOR FOR 
	SELECT 	nr_seq_evento, 
		vl_item, 
		c.ds_evento, 
		c.ie_natureza 
	from	pls_evento c, 
		pls_pagamento_item b, 
		pls_pagamento_prestador a 
	where	a.nr_sequencia	 	= b.nr_seq_pagamento 
	and	b.nr_seq_evento		= c.nr_sequencia 
	and	c.ie_tipo_evento	= 'F' and c.ie_natureza in ('P','D') 
	and	a.nr_seq_prestador	= nr_seq_prestador_p 
	and	a.nr_seq_lote		= nr_seq_lote_p 
	and (exists (SELECT	1 
			from	pls_conta_medica_resumo x 
			where	x.nr_seq_protocolo = nr_protoc_tiss_w 
			and	x.nr_seq_lote_pgto = a.nr_seq_lote) 
		or exists (select 1 
			from 	pls_rec_glosa_conta g 
			where	g.nr_seq_protocolo = nr_protoc_tiss_w 
			and 	g.vl_total_acatado > 0 
			and exists (select	1 
					from	pls_rec_glosa_proc p 
 
					where	p.nr_seq_lote_pgto	= nr_seq_lote_p 
					and	g.nr_sequencia		= p.nr_seq_conta_rec 
					
union
	 
					select	1 
					from	pls_rec_glosa_mat m 
					where	m.nr_seq_lote_pgto	= nr_seq_lote_p 
					and	g.nr_sequencia		= m.nr_seq_conta_rec)));
BEGIN
 
 
delete	from 	w_tiss_conta_proc 
where	nm_usuario	= nm_usuario_p;
 
delete	from 	w_tiss_totais 
where	nm_usuario	= nm_usuario_p;
 
delete	from 	w_tiss_guia 
where	nm_usuario	= nm_usuario_p;
 
delete	from 	w_tiss_outras_despesas 
where	nm_usuario	= nm_usuario_p;
 
commit;
 
for r_c01_w in C01 loop 
 
	begin 
	 
	tb_protocolo_w[nr_prot_w].nr_protocol_w		:= r_c01_w.nr_sequencia;
	tb_protocolo_w[nr_prot_w].dt_protocol_w 	:= r_c01_w.dt_protocolo;
	tb_protocolo_w[nr_prot_w].ie_origem_w		:= r_c01_w.ie_origem;
	tb_protocolo_w[nr_prot_w].nr_lote_prestador_w	:= r_c01_w.nr_protocolo_prestador;
	nr_prot_w	:=	nr_prot_w + 1;
					 
	end;
end loop;	
 
for i in 1..tb_protocolo_w.count loop 
	begin 
		nr_protoc_cursor_w		:= tb_protocolo_w[i].nr_protocol_w;
		dt_protocolo_w			:= tb_protocolo_w[i].dt_protocol_w;
		ie_origem_w			:= tb_protocolo_w[i].ie_origem_w;
		nr_lote_prestador_w		:= tb_protocolo_w[i].nr_lote_prestador_w;
	for r_c02_w in C02 loop 
		begin 
		if ( qt_pag_guia_w = 1) then 
		 
			select	nextval('w_tiss_guia_seq') 
			into STRICT	nr_seq_tiss_guia_w 
			;
			 
			insert into w_tiss_guia(nr_sequencia,			dt_atualizacao,			nm_usuario, 
				dt_solicitacao,			nr_atendimento,			nr_seq_protocolo) 
			values ( nr_seq_tiss_guia_w,		clock_timestamp(), 			nm_usuario_p, 
				r_c02_w.dt_competencia_pgto,	nr_seq_prestador_p,		nr_protoc_cursor_w );
	 
			tb_guia_w(nr_med_w).nr_seq_guia_tiss_w	:= nr_seq_tiss_guia_w; -- Array que armazena os números de sequencia gerado do w_tiss_guia 
			nr_med_w	:= nr_med_w + 1;
		end if;
		 
		if (ie_origem_w = 'C') then 
			select	sum(vl_apresentado) 
			into STRICT	vl_apresentado_w 
			from (SELECT	distinct nr_seq_conta_proc, 
					vl_apresentado 
				from 	pls_conta_medica_resumo 
				where 	nr_seq_prestador_pgto 	= nr_seq_prestador_p 
				and 	nr_seq_protocolo	= nr_protoc_cursor_w 
				and 	nr_seq_lote_pgto 	= nr_seq_lote_p 
				and	(nr_seq_conta_proc IS NOT NULL AND nr_seq_conta_proc::text <> '') 
				
union all
 
				SELECT	nr_seq_conta_mat nr_seq_conta_proc, 
					vl_apresentado 
				from 	pls_conta_medica_resumo 
				where 	nr_seq_prestador_pgto 	= nr_seq_prestador_p 
				and 	nr_seq_protocolo	= nr_protoc_cursor_w 
				and 	nr_seq_lote_pgto 	= nr_seq_lote_p 
				and	(nr_seq_conta_mat IS NOT NULL AND nr_seq_conta_mat::text <> '')) alias4;
		elsif (ie_origem_w = 'R') then 
			vl_apresentado_w	:= (substr(pls_obter_vl_rec_aca(nr_protoc_cursor_w,'VLR'),1,255))::numeric;
		end if;
 
		vl_total_apresent_prot_w	:= vl_total_apresent_prot_w 	+ vl_apresentado_w;
		vl_total_process_prot_w		:= vl_total_process_prot_w 	+ r_c02_w.vl_processado_w;
		vl_total_liberado_prot_w	:= vl_total_liberado_prot_w 	+ r_c02_w.vl_liberado_w;
		vl_total_glosa_prot_w		:= vl_total_glosa_prot_w 	+ r_c02_w.vl_glosa_w;
		 
		insert into w_tiss_conta_proc(nr_sequencia,			dt_atualizacao,			nm_usuario, 
			ie_tiss_tipo_guia,		cd_autorizacao,			vl_apresentado, 
			vl_processado,			vl_informado,			vl_glosa, 
			nr_seq_lote ,			nr_seq_protocolo,		nr_seq_proc, 
			dt_procedimento,		ds_prestador_tiss)	 
		values (nextval('w_tiss_conta_proc_seq'),	clock_timestamp(),			nm_usuario_p, 
			'A',				'A',				vl_apresentado_w, 
			r_c02_w.vl_processado_w,	r_c02_w.vl_liberado_w,		r_c02_w.vl_glosa_w, 
			nr_seq_lote_p,			nr_protoc_cursor_w,		nr_seq_tiss_guia_w , 
			dt_protocolo_w,			nr_lote_prestador_w);		
		 
		if ( qt_pag_guia_w = 8) then 
			qt_pag_guia_w := 1;	
			nr_seq_tiss_guia_w := null;
		else 
			qt_pag_guia_w := qt_pag_guia_w + 1;
		end if;
		end;
	end loop;
	end;
end loop;
 
--for j in 1..tb_protocolo_w.count loop -- loop que busca todos os números dos protocolos que foram utilizados e armazenados no Array	-- retirado loop pois o mesmo estava duplicando os eventos no relatório. 
if	tb_protocolo_w.count > 0 then 
	nr_protoc_tiss_w	:= tb_protocolo_w(1).nr_protocol_w;
	for r_c03_w in C03 loop 
		begin 
				tb_dados_prot_w( numero_proc_w ).vl_valor_w		:= r_c03_w.vl_item;
				tb_dados_prot_w[ numero_proc_w ].ds_proc_w		:= r_c03_w.ds_evento;
				tb_dados_prot_w[ numero_proc_w ].nr_event_w		:= r_c03_w.nr_seq_evento;
				tb_dados_prot_w[ numero_proc_w ].ie_nature_w		:= r_c03_w.ie_natureza;
				tb_dados_prot_w[ numero_proc_w ].nr_proot_w		:= nr_protoc_tiss_w;
				numero_proc_w := numero_proc_w + 1;	
		end;
	end loop;	
end if;	
--end loop; --aldellandrea os813195 
 
 
qt_pag_guia_w 	:= 1;
nr_guia_w	:= 1;
numero_proc_w 	:= 1;
 
for x in 1..tb_dados_prot_w.count loop 
	begin 
	if (qt_pag_guia_w = 1) then 
	begin 
		nr_seq_tiss_guia_w	:= tb_guia_w[ nr_guia_w ].nr_seq_guia_tiss_w;
		nr_guia_w		:= nr_guia_w + 1;
	exception 
	when others then 
		select	nextval('w_tiss_guia_seq') 
		into STRICT	nr_seq_tiss_guia_w 
		;
		 
		insert into w_tiss_guia(nr_sequencia,			dt_atualizacao,			nm_usuario, 
			nr_atendimento	) 
		values ( nr_seq_tiss_guia_w,		clock_timestamp(), 			nm_usuario_p, 
			nr_seq_prestador_p);
 
		tb_guia_w[ nr_med_w].nr_seq_guia_tiss_w	:= nr_seq_tiss_guia_w; -- Array que armazena os números de sequencia gerado do w_tiss_guia 
		nr_med_w	:= nr_med_w + 1;
	end;
	end if;	
	if ( tb_dados_prot_w[x].vl_valor_w > 0) then 
		ie_natureza_w 	:= 'C';
		vl_credito_w	:= vl_credito_w + tb_dados_prot_w[x].vl_valor_w;
	else 	ie_natureza_w 	:= 'D';
		vl_debito_w 	:= vl_debito_w + tb_dados_prot_w[x].vl_valor_w;
	end if;
	 
	vl_total_deb_cred_w := vl_total_deb_cred_w + tb_dados_prot_w[x].vl_valor_w;
	 
	insert into w_tiss_eventos_financ(nr_sequencia,				dt_atualizacao,				nm_usuario, 
		nr_seq_protocolo,			ds_evento,				ie_indicacao, 
		vl_evento,				nr_seq_guia,				nr_seq_conta)   		 
	values (nextval('w_tiss_eventos_financ_seq'),	clock_timestamp(), 				nm_usuario_p, 
		nr_protoc_tiss_w ,			tb_dados_prot_w[x].ds_proc_w,		ie_natureza_w , 
		tb_dados_prot_w[x].vl_valor_w,		nr_seq_tiss_guia_w,			tb_dados_prot_w[x].nr_event_w);
	 
		 
	if (qt_pag_guia_w = 3) then 
		qt_pag_guia_w := 0;
	end if;
	qt_pag_guia_w := qt_pag_guia_w + 1;
	end;
end loop;
 
for y in 1..tb_guia_w.count loop 
	begin		 
		nr_seq_tiss_guia_w	:= tb_guia_w[y].nr_seq_guia_tiss_w;
	 
		insert into w_tiss_outras_despesas -- tabela que armazena os dados dos valores totais de débito e crédito 
			(nr_sequencia,					dt_atualizacao,				nm_usuario, 
			nr_seq_guia,					vl_reducao_acrescimo,			vl_unitario,	 
			vl_item) 
		values	(nextval('w_tiss_outras_despesas_seq'),		clock_timestamp(), 				nm_usuario_p, 
			nr_seq_tiss_guia_w,				vl_credito_w,				vl_debito_w,			 
			(vl_credito_w + vl_debito_w) + vl_total_liberado_prot_w);	
		 
		insert into w_tiss_totais(nr_sequencia, 		dt_atualizacao, 		nm_usuario,  
				nr_seq_guia,		vl_glosa,			vl_processado, 
				vl_apresentado,		vl_informado)	 
		values (nextval('w_tiss_totais_seq'),	clock_timestamp(),			nm_usuario_p, 
			nr_seq_tiss_guia_w,		vl_total_glosa_prot_w,		vl_total_process_prot_w, 
			vl_total_apresent_prot_w,	vl_total_liberado_prot_w);
	end;
end loop;
commit;						
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_w_tiss302_dem_pag ( nr_seq_lote_p bigint, nr_seq_prestador_p bigint, nm_usuario_p text) FROM PUBLIC;

