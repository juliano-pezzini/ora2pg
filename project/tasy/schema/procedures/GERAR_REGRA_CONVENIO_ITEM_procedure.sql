-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_regra_convenio_item ( nr_sequencia_autor_p bigint, nr_seq_regra_p bigint, nr_prescricao_p bigint, nr_seq_agenda_p bigint, nr_atendimento_p bigint, nm_usuario_p text, nr_seq_agenda_consulta_p bigint, nr_seq_agenda_proc_p bigint) AS $body$
DECLARE


cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_proc_interno_w		bigint;
ie_origem_proc_intertno_w	bigint;
cd_material_w			bigint;
qt_solicitada_w			double precision;
nr_sequencia_w			bigint;
nr_seq_proc_interno_w		bigint;
cd_convenio_w			integer;
cd_estabelecimento_w		smallint;

c01 CURSOR FOR
SELECT	cd_procedimento,
	ie_origem_proced,
	cd_material,
	qt_solicitada,
	nr_seq_proc_interno
from	regra_conv_plano_item
where	nr_seq_regra	= nr_seq_regra_p
and	coalesce(ie_situacao,'A') = 'A';


BEGIN

select	max(cd_convenio),
	max(cd_estabelecimento)
into STRICT	cd_convenio_w,
	cd_estabelecimento_w
from	autorizacao_convenio
where	nr_sequencia	= nr_sequencia_autor_p;

open c01;
loop
fetch c01 into
	cd_procedimento_w,
	ie_origem_proced_w,
	cd_material_w,
	qt_solicitada_w,
	nr_seq_proc_interno_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
	
		SELECT * FROM obter_procedimento_tab_interna(	nr_seq_proc_interno_w, cd_convenio_w, cd_estabelecimento_w, clock_timestamp(), cd_proc_interno_w, ie_origem_proced_w) INTO STRICT cd_proc_interno_w, ie_origem_proced_w;
						
		cd_procedimento_w	:= cd_proc_interno_w;
		ie_origem_proced_w	:= ie_origem_proced_w;
	
	end if;

	if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then
		
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_sequencia_w
		from	procedimento_autorizado
		where	cd_procedimento	 	= cd_procedimento_w
		and	ie_origem_proced 	= ie_origem_proced_w
		and	nr_seq_proc_interno	= coalesce(nr_seq_proc_interno_w,nr_seq_proc_interno)
		and	nr_sequencia_autor	= nr_sequencia_autor_p;
		
		if (nr_sequencia_w = 0) then
			insert into procedimento_autorizado(nr_sequencia,
				nr_sequencia_autor,
				cd_procedimento,
				ie_origem_proced,
				qt_solicitada,
				qt_autorizada,
				nm_usuario,
				dt_atualizacao,
				nr_seq_proc_interno,
				nr_prescricao,
				nr_seq_agenda,
				nr_atendimento,
				nr_seq_regra_plano,
				nr_seq_agenda_consulta,
				nr_seq_agenda_proc)
			values (nextval('procedimento_autorizado_seq'),
				nr_sequencia_autor_p,
				cd_procedimento_w,
				ie_origem_proced_w,
				qt_solicitada_w,
				0,
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_proc_interno_w,
				nr_prescricao_p,
				nr_seq_agenda_p,
				nr_atendimento_p,
				nr_seq_regra_p,
				nr_seq_agenda_consulta_p,
				nr_seq_agenda_proc_p);
		else
			update	procedimento_autorizado
			set	qt_solicitada	= coalesce(qt_solicitada,0) + qt_solicitada_w,
				dt_atualizacao 	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_sequencia	= nr_sequencia_w;	
		end if;
 	
	elsif (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_sequencia_w
		from	material_autorizado
		where	cd_material	 	= cd_material_w
		and	nr_sequencia_autor	= nr_sequencia_autor_p;

		if (nr_sequencia_w = 0) then
			insert into material_autorizado(nr_sequencia,
				nr_sequencia_autor,
				cd_material,
				qt_solicitada,
				qt_autorizada,
				nm_usuario,
				dt_atualizacao,
				nr_prescricao,
				nr_atendimento,
				nr_seq_regra_plano)
			values (nextval('material_autorizado_seq'),
				nr_sequencia_autor_p,
				cd_material_w,
				qt_solicitada_w,
				0,
				nm_usuario_p,
				clock_timestamp(),
				nr_prescricao_p,
				nr_atendimento_p,
				nr_seq_regra_p);		
		else
			update	material_autorizado
			set	qt_solicitada	= coalesce(qt_solicitada,0) + qt_solicitada_w,
				dt_atualizacao 	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_sequencia	= nr_sequencia_w;
		end if;

	end if;	
end loop;
close c01;

--if (nvl(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;				 		
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_regra_convenio_item ( nr_sequencia_autor_p bigint, nr_seq_regra_p bigint, nr_prescricao_p bigint, nr_seq_agenda_p bigint, nr_atendimento_p bigint, nm_usuario_p text, nr_seq_agenda_consulta_p bigint, nr_seq_agenda_proc_p bigint) FROM PUBLIC;

