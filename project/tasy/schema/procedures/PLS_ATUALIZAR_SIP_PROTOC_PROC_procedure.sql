-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_sip_protoc_proc (nr_seq_lote_sip_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_protocolo_w	bigint;
cd_estabelecimento_w	smallint;
dt_periodo_inicial_w	timestamp;
dt_periodo_final_w	timestamp;

C01 CURSOR FOR
SELECT	distinct
	b.nr_sequencia
from	pls_conta			a,
	pls_protocolo_conta	b
where	b.nr_sequencia	= a.nr_seq_protocolo
and	b.dt_mes_competencia between coalesce(dt_periodo_inicial_w,b.dt_mes_competencia) and coalesce(dt_periodo_final_w,b.dt_mes_competencia)
and	a.ie_status <> 'U'
and	exists (select	c.nr_sequencia
		from	pls_segurado	c,
			pls_contrato	d
		where	d.nr_sequencia			= c.nr_seq_contrato
		and	c.nr_sequencia			= a.nr_seq_segurado
		and	coalesce(d.nr_seq_congenere::text, '') = ''
		and	coalesce(c.ie_tipo_segurado,'B')	= 'B')
and	exists (select 	c.nr_sequencia
		from 	pls_conta_proc 	c
		where	c.nr_seq_conta	= a.nr_sequencia
		and	c.cd_procedimento	= cd_procedimento_p
		and	c.ie_origem_proced	= ie_origem_proced_p
		and	not exists (	select	d.nr_sequencia
				from	sip_mov_item_assistencial	d
				where	d.nr_seq_proc	= c.nr_sequencia)
		/*union all
		select 	e.nr_sequencia
		from	pls_conta_mat	e
		where	e.nr_seq_conta	= a.nr_sequencia
		and	not exists (	select	d.nr_sequencia
				from	sip_mov_item_assistencial	d
				where	d.nr_seq_mat	= e.nr_sequencia)*/
);


BEGIN

if (nr_seq_lote_sip_p IS NOT NULL AND nr_seq_lote_sip_p::text <> '') then
	select	a.cd_estabelecimento,
		a.dt_periodo_inicial,
		a.dt_periodo_final
	into STRICT	cd_estabelecimento_w,
		dt_periodo_inicial_w,
		dt_periodo_final_w
	from	pls_lote_sip a
	where	a.nr_sequencia	= nr_seq_lote_sip_p;

	open c01;
	loop
	fetch c01 into
		nr_seq_protocolo_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		CALL pls_gerar_protocolo_sip(nr_seq_protocolo_w,nm_usuario_p,cd_estabelecimento_w);
		end;
	end loop;
	close c01;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_sip_protoc_proc (nr_seq_lote_sip_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nm_usuario_p text) FROM PUBLIC;

