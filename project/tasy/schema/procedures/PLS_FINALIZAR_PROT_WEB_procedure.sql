-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_finalizar_prot_web ( nr_seq_protocolo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_transferir_contas_p text, ie_finalizar_prot_glosa_p text, qt_max_contas_p bigint, ie_tipo_conta_web_p text, nr_seq_prestador_p bigint, ie_reconsistir_p text, nr_seq_usu_prestador_p bigint, qtd_glosas_prot_p INOUT bigint, ie_situacao_prot_p INOUT text) AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Finalizar o protocolo na digitação de contas médicas no portal.
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [ x ] Portal [  ] Relatórios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atenção:  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++				
				
	Parâmetro[2] da OPSW - Digitação conta médicas
	ie_finalizar_prot_glosa_p = 	'FPI' - Irá permitir o encerramento do protocolo mesmo com inconsistências. (S)
				'FPP' - Permite encerrar somente transferindo as contas para um novo protocolo (N)
				'N'  - Não irá permitir o encerramento do protocolo se possuir inconsistências. 
				Só mostrar mensagem na tela informando que não permite encerramento com contas inconsistentes. (N)
					    
	ie_transferir_contas_p = 	'S'  Vai transferir as contas com glosas/ocorencias para outro protocolo
	
	ie_situacao_prot_p =   		'F'   - protocolo foi finalizado         
				'G'   - protocolo está com glosas, mas vai permitir o usuário transferir as contas com glosas
				'NG'   - protocolo está com glosas e não vai permitir o usuário transferir as contas com glosas
				'GF'   - protocolo está com glosas e possui protocolos vinculados a ele
				'FG'   - protocolo está correto, porém os protocolos vinculados a ele estão com inconsistências
				'TG'   - todas as contas do protocolo estão com glosas
			
*/nr_seq_protocolo_w		bigint;		
nr_seq_protocolo_ref_w		bigint;			
qtd_glosas_protocolo_w		integer := 0;
qtd_glosas_protocolo_ref_w	integer := 0;
ie_situacao_prot_ref_w		varchar(2);
nr_seq_conta_w			bigint;
nr_lote_w			bigint;
nr_seq_protocolo_gerado_w	bigint;
ie_situacao_prot_w		varchar(2) := 'F';
qt_protocolos_vinc_w		bigint := 0;
qt_contas_protocolo_w		bigint := 0;
ie_gravar_quantidade_w		varchar(2);
nr_seq_prestador_w		bigint;
ie_origem_protocolo_w		varchar(20);
dt_mes_competencia_w		timestamp;
dt_protocolo_w			timestamp;
ie_reconsistir_w		varchar(1);
ie_analise_digitacao_w		pls_param_analise_conta.ie_analise_digitacao%type;
ie_competencia_w		varchar(1);
qt_contas_w			integer;
qt_analises_geradas_w		integer;
ie_tipo_guia_w			pls_protocolo_conta.ie_tipo_guia%type;
				
C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conta
	where	nr_seq_protocolo = nr_seq_protocolo_w;
	
C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_protocolo_conta
	where	nr_seq_prot_referencia = nr_seq_protocolo_w;
	
procedure tratar_conversao_proc is

cd_procedimento_imp_w		pls_conta_proc.cd_procedimento%type;
ie_origem_proced_w			pls_conta_proc.ie_origem_proced%type;
nr_seq_regra_conversao_w	pls_conversao_proc.nr_sequencia%type;
ie_somente_codigo_w			pls_conversao_proc.ie_somente_codigo%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
			a.cd_procedimento,
			a.ie_origem_proced,
			b.nr_seq_tipo_atendimento
	from	pls_conta_proc a,
			pls_conta b
	where	a.nr_seq_conta = b.nr_sequencia
	and		b.nr_seq_protocolo = nr_seq_protocolo_p;

BEGIN

	for r_c01_w in c01 loop

		nr_seq_regra_conversao_w := null;
		cd_procedimento_imp_w := null;
		ie_origem_proced_w := null;
	
		SELECT * FROM pls_obter_proced_conversao(	r_c01_w.cd_procedimento, r_c01_w.ie_origem_proced, nr_seq_prestador_p, cd_estabelecimento_p, 8, null, null, 'R', null, null, null, null, null, cd_procedimento_imp_w, ie_origem_proced_w, nr_seq_regra_conversao_w, ie_somente_codigo_w, clock_timestamp(), r_c01_w.nr_seq_tipo_atendimento, null, null) INTO STRICT cd_procedimento_imp_w, ie_origem_proced_w, nr_seq_regra_conversao_w, ie_somente_codigo_w;
							
							
		if (cd_procedimento_imp_w IS NOT NULL AND cd_procedimento_imp_w::text <> '' AND ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then
		
			
		
			update 	pls_conta_proc
			set 	cd_procedimento = cd_procedimento_imp_w,
					ie_origem_proced = ie_origem_proced_w,
					ds_log = 'pls_finalizar_prot_web.tratar_conversao_proc',
					dt_atualizacao = clock_timestamp(),
					nm_usuario = nm_usuario_p,
					nr_seq_regra_conv = nr_seq_regra_conversao_w
			where nr_sequencia = r_c01_w.nr_sequencia;
			
		end if;
	
	end loop;	
						
end;
	
	
procedure tratar_conversao_mat is

nr_seq_material_ww     	number(10)      := null;
nr_seq_regra_conv_w		number(10);
cd_material_envio_w     varchar2(30);
ds_material_envio_w     varchar2(255);
ie_tipo_tabela_conv_w	number(1);

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
			a.cd_material,
			a.nr_seq_material,
			a.ie_tipo_despesa
	from	pls_conta_mat a,
			pls_conta b
	where	a.nr_seq_conta = b.nr_sequencia
	and		b.nr_seq_protocolo = nr_seq_protocolo_p;

begin

	for r_c01_w in C01 loop

		nr_seq_material_ww := null;
		nr_seq_regra_conv_w := null;
		
	  /*Converte o código do material, para a sequência do material cadastrada na regra de conversão*/

        SELECT * FROM pls_obter_mat_conversao(r_c01_w.cd_material, r_c01_w.ie_tipo_despesa, nm_usuario_p, 'R', null, null, nr_seq_prestador_p, nr_seq_material_ww, cd_material_envio_w, ds_material_envio_w, ie_tipo_tabela_conv_w, nr_seq_regra_conv_w, 8) INTO STRICT nr_seq_material_ww, cd_material_envio_w, ds_material_envio_w, ie_tipo_tabela_conv_w, nr_seq_regra_conv_w;

        if (nr_seq_material_ww IS NOT NULL AND nr_seq_material_ww::text <> '') then
		
			update 	pls_conta_mat
			set		nr_seq_material = nr_seq_material_ww,
					nr_seq_regra_conv = nr_seq_regra_conv_w,
					dt_atualizacao 	= clock_timestamp(),
					nm_usuario		= nm_usuario_p
			where	nr_sequencia	= r_c01_w.nr_sequencia;
			
        end if;
		
	end loop;

end;
	
begin

nr_seq_protocolo_w := nr_seq_protocolo_p;

select qt_contas,
       ( select count(1)
         from   pls_conta 
         where  nr_seq_protocolo = nr_seq_protocolo_w 
         and    (nr_seq_analise IS NOT NULL AND nr_seq_analise::text <> '')) qt_analises_geradas
into STRICT	qt_contas_w,
	qt_analises_geradas_w
from (
       SELECT	count(1) qt_contas
       from	pls_conta
       where	nr_seq_protocolo = nr_seq_protocolo_w) alias4;

--Se chegou aqui com análise gerada, então tem algo errado, pois a geração deverá ocorrer após a finalização do protocolo web, então significa que já ocorreu anteriormente 

--a finalização do mesmo. Nesse caso, apenas atualizamos o status do protocolo
if (qt_analises_geradas_w = 0) then

	if (qt_contas_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(993639);
	end if;

	/*  Tranferir contas com glosas/ocorrencias para outro protocolo */

	if ( ie_transferir_contas_p = 'S') then
		CALL pls_transf_contas_web(nr_seq_protocolo_w,qt_max_contas_p,cd_estabelecimento_p, nr_seq_usu_prestador_p, nm_usuario_p);
	else
		/* Excluir glosas/ocorrencias do protocolo */

		open C01;
		loop
		fetch C01 into
			nr_seq_conta_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin	
			CALL pls_desfazer_consistir_conta(nr_seq_conta_w,cd_estabelecimento_p,nm_usuario_p);	
			end;
		end loop;
		close C01;
			
		/* Gerar glosas/ocorrencias do protocolo */

		CALL pls_consistir_conta_web(nr_seq_protocolo_w , null, ie_tipo_conta_web_p, nm_usuario_p, cd_estabelecimento_p, ie_finalizar_prot_glosa_p);
		
		/* Retorna a quantidade de contas com glosas/ocorrencias do protocolo */

		qtd_glosas_protocolo_w := pls_obter_qtd_cont_glosas_web(nr_seq_protocolo_p);
			
		select 	count(1)
		into STRICT	qt_contas_protocolo_w
		from 	pls_conta
		where	nr_seq_protocolo = nr_seq_protocolo_p;
	end if;

	if ( qtd_glosas_protocolo_w = 0 or ie_finalizar_prot_glosa_p = 'FPI') then
		/* Finalizar todos os protocolos vinculados ao protocolo de internação */

		open C02;
		loop
		fetch C02 into
			nr_seq_protocolo_ref_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin	
			
			SELECT * FROM pls_finalizar_prot_web(nr_seq_protocolo_ref_w, cd_estabelecimento_p, nm_usuario_p, 'N', ie_finalizar_prot_glosa_p, null, 'D', nr_seq_prestador_p, ie_reconsistir_p, nr_seq_usu_prestador_p, qtd_glosas_protocolo_ref_w, ie_situacao_prot_ref_w) INTO STRICT qtd_glosas_protocolo_ref_w, ie_situacao_prot_ref_w;
					
			if (qtd_glosas_protocolo_ref_w > 0 and (ie_finalizar_prot_glosa_p = 'FPP' or ie_finalizar_prot_glosa_p = 'N')) then
				ie_situacao_prot_w := 'FG';
			end if;
			end;
		end loop;
		close C02;
		
		if (ie_situacao_prot_w = 'F') then
			ie_gravar_quantidade_w := pls_obter_param_padrao_funcao(10, 1249);
			
			select	nr_seq_prestador,
				ie_origem_protocolo,
				dt_mes_competencia,
				dt_protocolo,
				ie_tipo_guia
			into STRICT	nr_seq_prestador_w,
				ie_origem_protocolo_w,
				dt_mes_competencia_w,
				dt_protocolo_w,
				ie_tipo_guia_w
			from	pls_protocolo_conta
			where	nr_sequencia	= nr_seq_protocolo_p;
			
			dt_mes_competencia_w	:= pls_obter_dataref_prot_imp(	nr_seq_prestador_w, ie_origem_protocolo_w, clock_timestamp(),
										clock_timestamp(), clock_timestamp(), clock_timestamp(),
										ie_tipo_guia_w, nr_seq_protocolo_p, cd_estabelecimento_p);
			
			ie_competencia_w	:= pls_obter_se_comp_fechada(dt_mes_competencia_w);
			
			if (ie_competencia_w	= 'S') then
				begin
				CALL wheb_mensagem_pck.exibir_mensagem_abort(495129);
				end;
			end if;
				
			update	pls_protocolo_conta
			set	ie_situacao 		= 'D',
				dt_recebimento		= clock_timestamp(),
				dt_protocolo		= clock_timestamp(),
				dt_mes_competencia	= dt_mes_competencia_w
			where	nr_sequencia		= nr_seq_protocolo_p;
			
			if (coalesce(ie_gravar_quantidade_w,'N') = 'S') then
				begin
				select 	count(nr_sequencia)
				into STRICT	qt_contas_protocolo_w
				from 	pls_conta
				where	nr_seq_protocolo = nr_seq_protocolo_p;
				
				select	nr_seq_prestador,
					ie_origem_protocolo,
					dt_mes_competencia,
					dt_protocolo,
					ie_tipo_guia
				into STRICT	nr_seq_prestador_w,
					ie_origem_protocolo_w,
					dt_mes_competencia_w,
					dt_protocolo_w,
					ie_tipo_guia_w
				from	pls_protocolo_conta
				where	nr_sequencia	= nr_seq_protocolo_p;
				
				/* Sestari OS409513 - Passado sysdate na  data de referencia do protocolo, pois o mesmo deve consisderar a data atual quando o mesmo é finalizado*/

				dt_mes_competencia_w	:= pls_obter_dataref_prot_imp(	nr_seq_prestador_w, ie_origem_protocolo_w, clock_timestamp(),
											clock_timestamp(), clock_timestamp(), clock_timestamp(),
											ie_tipo_guia_w, nr_seq_protocolo_p,cd_estabelecimento_p);
				
				ie_competencia_w	:= pls_obter_se_comp_fechada(dt_mes_competencia_w);
			
				if (ie_competencia_w	= 'S') then
					begin
					CALL wheb_mensagem_pck.exibir_mensagem_abort(495129);
					end;
				end if;
			
				update	pls_protocolo_conta
				set	qt_contas_informadas    = coalesce(qt_contas_protocolo_w,0),
					dt_mes_competencia	= dt_mes_competencia_w
				where	nr_sequencia		= nr_seq_protocolo_p
				and	cd_estabelecimento	= cd_estabelecimento_p;	
				
				end;
			end if;
		
		end if;

	else
		qt_protocolos_vinc_w := obter_qt_prot_ref_web(nr_seq_protocolo_w);
		
		if (qtd_glosas_protocolo_w = qt_contas_protocolo_w) then
			ie_situacao_prot_w := 'TG';
		elsif (qt_protocolos_vinc_w > 0) then
			if (qtd_glosas_protocolo_w > 0) then
				ie_situacao_prot_w := 'GF';
			else
				ie_situacao_prot_w := 'FG';	
			end if;
		elsif (ie_finalizar_prot_glosa_p = 'N') then	
			ie_situacao_prot_w := 'NG';
		else	
			ie_situacao_prot_w := 'G';
		end if;
	end if;

	if (ie_situacao_prot_w = 'F') then
		begin
		ie_gravar_quantidade_w := pls_obter_param_padrao_funcao(10, 1249);
		
		if (coalesce(ie_gravar_quantidade_w,'N') = 'S') then
			begin
			select 	count(nr_sequencia)
			into STRICT	qt_contas_protocolo_w
			from 	pls_conta
			where	nr_seq_protocolo = nr_seq_protocolo_p;
			
			select 	count(nr_sequencia)
			into STRICT	qt_contas_protocolo_w
			from 	pls_conta
			where	nr_seq_protocolo = nr_seq_protocolo_p;
			
			select	nr_seq_prestador,
				ie_origem_protocolo,
				dt_mes_competencia,
				dt_protocolo,
				ie_tipo_guia
			into STRICT	nr_seq_prestador_w,
				ie_origem_protocolo_w,
				dt_mes_competencia_w,
				dt_protocolo_w,
				ie_tipo_guia_w
			from	pls_protocolo_conta
			where	nr_sequencia	= nr_seq_protocolo_p;
			
			/* Sestari OS409513 - Passado sysdate na  data de referencia do protocolo, pois o mesmo deve consisderar a data atual quando o mesmo é finalizado */

			dt_mes_competencia_w	:= pls_obter_dataref_prot_imp(	nr_seq_prestador_w, ie_origem_protocolo_w, clock_timestamp(),
										clock_timestamp(), clock_timestamp(), clock_timestamp(),
										ie_tipo_guia_w,nr_seq_protocolo_p, cd_estabelecimento_p);
			
			ie_competencia_w	:= pls_obter_se_comp_fechada(dt_mes_competencia_w);
			
			if (ie_competencia_w	= 'S') then
				begin
				CALL wheb_mensagem_pck.exibir_mensagem_abort(495129);
				end;
			end if;
			
			update	pls_protocolo_conta
			set	qt_contas_informadas    = coalesce(qt_contas_protocolo_w,0),
				dt_mes_competencia	= dt_mes_competencia_w
			where	nr_sequencia		= nr_seq_protocolo_p
			and	cd_estabelecimento	= cd_estabelecimento_p;	
			end;
		end if;
		end;
	end if;

	if (ie_situacao_prot_w = 'F') and (coalesce(ie_reconsistir_p,'X') = 'S') then
		
		tratar_conversao_proc;		
		tratar_conversao_mat;
		qt_contas_protocolo_w := pls_consistir_contas_protocolo(nr_seq_protocolo_p, qt_contas_protocolo_w, cd_estabelecimento_p, nm_usuario_p );
		
	elsif (ie_situacao_prot_w = 'F') then
	
		tratar_conversao_proc;
		tratar_conversao_mat;
	
		update	pls_protocolo_conta
		set	ie_status 	= '1'
		where 	nr_sequencia 	= nr_seq_protocolo_p;
		
		update	pls_conta
		set	ie_status = 'U'
		where	nr_seq_protocolo = nr_seq_protocolo_p;
		
		select	max(ie_analise_digitacao)
		into STRICT	ie_analise_digitacao_w
		from	pls_param_analise_conta
		where	cd_estabelecimento = cd_estabelecimento_p;
		
		if (ie_analise_digitacao_w <> 'N') then
		
			nr_lote_w := pls_gerar_lote_analise(nr_seq_prestador_p, null, nm_usuario_p, cd_estabelecimento_p, null, nr_lote_w);
						
			CALL pls_vinc_protocolo_lote_conta(nr_lote_w, nr_seq_protocolo_p, nm_usuario_p);
			
			if (ie_analise_digitacao_w = 'S') then
				CALL pls_gerar_analise_lote(	nr_lote_w,'N','N',
							cd_estabelecimento_p, nm_usuario_p, null,
							'N',null);
			elsif (ie_analise_digitacao_w = 'P') then
				insert into pls_cta_lt_ger_lote_compl(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						nr_seq_lote_protocolo,DT_SOLICITACAO,IE_STATUS)
				values (	nextval('pls_cta_lt_ger_lote_compl_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
						nr_lote_w,clock_timestamp(),'P');
			end if;
		end if;
	end if;
else
	--Atualizado para D para que não seja mais exibido no portal, para que não ocorram mais finalizaçõesde um protocolo já finalizado.
	update	pls_protocolo_conta
	set	ie_situacao 		= 'D'
	where	nr_sequencia		= nr_seq_protocolo_p;
	
end if;
	
qtd_glosas_prot_p := qtd_glosas_protocolo_w;
ie_situacao_prot_p := ie_situacao_prot_w;
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_finalizar_prot_web ( nr_seq_protocolo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_transferir_contas_p text, ie_finalizar_prot_glosa_p text, qt_max_contas_p bigint, ie_tipo_conta_web_p text, nr_seq_prestador_p bigint, ie_reconsistir_p text, nr_seq_usu_prestador_p bigint, qtd_glosas_prot_p INOUT bigint, ie_situacao_prot_p INOUT text) FROM PUBLIC;

