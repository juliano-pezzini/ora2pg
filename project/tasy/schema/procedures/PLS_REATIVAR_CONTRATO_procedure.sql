-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_reativar_contrato ( nr_seq_contrato_p bigint, nr_seq_segurado_p bigint, nr_seq_pagador_p bigint, nr_seq_subestipulante_p bigint, dt_reativacao_p timestamp, ds_observacao_p text, ie_dependente_p text, ie_reativa_sub_contrato_p text, ie_reativar_pagador_p text, ie_reativar_sca_p text, ie_titular_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_commit_p text) AS $body$
DECLARE


nr_seq_segurado_w		bigint;
nr_seq_dependente_w		bigint;
dt_rescisao_contrato_w		timestamp;
dt_rescisao_pagador_w		timestamp;
dt_rescisao_subestipulante_w	timestamp;
dt_rescisao_w			timestamp;
nr_seq_contrato_w		bigint;
qt_dias_valid_cart_w		integer;
dt_validade_w			timestamp;
ie_tipo_rescisao_w		varchar(2);
nr_seq_plano_w			bigint;
nr_seq_sub_contrato_w		bigint;
dt_rescisao_depen_w		timestamp;
nr_seq_titular_w		bigint;
cd_matricula_familia_w		bigint;
ie_titular_familia_w		varchar(1);
nr_seq_seg_titular_w		bigint;
nm_pessoa_fisica_w		varchar(255);
nr_seq_pagador_w		bigint;
nr_seq_segurado_tab_w		bigint;
ds_erro_w			varchar(255);
ie_reativar_sca_w		varchar(1);
nr_seq_segurado_sca_w		pls_segurado.nr_sequencia%type;
nr_seq_vinculo_sca_w		pls_sca_vinculo.nr_sequencia%type;
nr_seq_seg_repasse_w		pls_segurado_repasse.nr_sequencia%type;
nr_seq_motivo_rescisao_w	pls_contrato.nr_seq_motivo_rescisao%type;
nr_seq_tabela_seg_w		pls_tabela_preco.nr_sequencia%type;
qt_vidas_w			integer;
qt_vidas_ant_w			integer;
qt_registro_w			integer;
nr_indice_w			integer;
tb_nr_seq_segurado_w		pls_util_cta_pck.t_number_table;
ds_mensagem_reativacao_pag_w	varchar(4000);

c01 CURSOR FOR
	SELECT	nr_sequencia
	from (	SELECT	nr_sequencia,
				nr_seq_titular
			from	pls_segurado
			where	nr_seq_contrato	= nr_seq_contrato_p
			and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
			and	coalesce(nr_seq_titular::text, '') = ''
			and	ie_dependente_p = 'N'
			and	coalesce(ie_titular_p,'N') = 'S'
			and (ie_tipo_rescisao = 'C' or nr_seq_motivo_cancelamento = nr_seq_motivo_rescisao_w)
			
union

			select	nr_sequencia,
				nr_seq_titular
			from	pls_segurado
			where	nr_seq_contrato	= nr_seq_contrato_p
			and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
			and	ie_dependente_p	= 'S'
			and	coalesce(ie_titular_p, 'N') = 'S'
			and (ie_tipo_rescisao = 'C' or nr_seq_motivo_cancelamento = nr_seq_motivo_rescisao_w)) alias7
	order by CASE WHEN coalesce(nr_seq_titular::text, '') = '' THEN -1  ELSE 1 END;

c02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_segurado
	where	nr_seq_titular	= nr_seq_segurado_p
	and	trunc(dt_rescisao,'dd')	= trunc(dt_rescisao_w,'dd')
	and	ie_dependente_p	= 'S'
	order by CASE WHEN coalesce(nr_seq_titular::text, '') = '' THEN -1  ELSE 1 END;

c03 CURSOR FOR
	SELECT	nr_sequencia
	from (	SELECT	nr_sequencia,
				nr_seq_titular
			from	pls_segurado
			where	nr_seq_subestipulante	= nr_seq_subestipulante_p
			and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
			and	coalesce(nr_seq_titular::text, '') = ''
			and (coalesce(ie_tipo_rescisao,'S')	= 'S')
			
union

			select	nr_sequencia,
				nr_seq_titular
			from	pls_segurado
			where	nr_seq_subestipulante	= nr_seq_subestipulante_p
			and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
			and	(nr_seq_titular IS NOT NULL AND nr_seq_titular::text <> '')
			and	ie_dependente_p	= 'S'
			and (coalesce(ie_tipo_rescisao,'S')	= 'S')) alias8
	order by CASE WHEN coalesce(nr_seq_titular::text, '') = '' THEN -1  ELSE 1 END;

c04 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_segurado
	where	nr_seq_pagador	= nr_seq_pagador_p
	and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
	and (coalesce(ie_tipo_rescisao,'P')	= 'P')
	order by CASE WHEN coalesce(nr_seq_titular::text, '') = '' THEN -1  ELSE 1 END;

C05 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_contrato
	where	nr_contrato_principal		= nr_seq_contrato_p
	and	ie_reativa_sub_contrato_p	= 'S';

C06 CURSOR FOR
	SELECT	nr_sequencia
	from (	SELECT	nr_sequencia,
				nr_seq_titular
			from	pls_segurado
			where	nr_seq_contrato	= nr_seq_sub_contrato_w
			and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
			and	coalesce(nr_seq_titular::text, '') = ''
			and	ie_dependente_p = 'N'
			and (coalesce(ie_tipo_rescisao,'C')	= 'C')
			and	ie_reativa_sub_contrato_p	= 'S'
			
union

			select	nr_sequencia,
				nr_seq_titular
			from	pls_segurado
			where	nr_seq_contrato	= nr_seq_sub_contrato_w
			and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
			and	ie_dependente_p	= 'S'
			and (coalesce(ie_tipo_rescisao,'C')	= 'C')
			and	ie_reativa_sub_contrato_p	= 'S') alias7
	order by CASE WHEN coalesce(nr_seq_titular::text, '') = '' THEN -1  ELSE 1 END;

C08 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_contrato_pagador
	where	nr_seq_contrato	= nr_seq_contrato_p
	and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
	and	trunc(dt_rescisao,'dd') = dt_rescisao_contrato_w;

C09 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_contrato_pagador
	where	nr_seq_contrato	= nr_seq_sub_contrato_w
	and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '')
	and	trunc(dt_rescisao,'dd') = dt_rescisao_contrato_w;
	
C10 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_segurado
	where	nr_seq_contrato	= nr_seq_contrato_w
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C11 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_sca_vinculo a,
		pls_tabela_preco b
	where	a.nr_seq_tabela = b.nr_sequencia
	and	coalesce(b.ie_preco_vidas_contrato,'N') = 'S'
	and	a.nr_seq_segurado = nr_seq_segurado_sca_w;

-- repasse tanto quando for reativado por contrato
C12 CURSOR FOR
	SELECT  a.nr_sequencia,
		a.nr_seq_segurado
	from	pls_segurado_repasse 	a,
		pls_segurado 		b
	where	b.nr_sequencia 		= a.nr_seq_segurado
	and	b.nr_seq_contrato 	= nr_seq_contrato_p
	and	(a.dt_fim_repasse IS NOT NULL AND a.dt_fim_repasse::text <> '')
	and	trunc(a.dt_fim_repasse,'dd') = dt_rescisao_contrato_w;

BEGIN

ie_titular_familia_w	:= coalesce(obter_valor_param_usuario(1202,82,obter_perfil_ativo,nm_usuario_p,0),'S');

if (ie_reativar_sca_p = 'N') then
	select	coalesce(max(ie_reativar_sca_reativacao),'S')
	into STRICT	ie_reativar_sca_w
	from	pls_parametros
	where	cd_estabelecimento	= cd_estabelecimento_p;
else
	ie_reativar_sca_w	:= 'S';
end if;

nr_indice_w := 0;
tb_nr_seq_segurado_w.delete;

if (nr_seq_contrato_p IS NOT NULL AND nr_seq_contrato_p::text <> '') and (coalesce(nr_seq_contrato_p,0) <> 0) then
	CALL pls_consiste_data_sib(dt_reativacao_p, nm_usuario_p, cd_estabelecimento_p);
	
	select	trunc(dt_rescisao_contrato,'dd'),
		nr_seq_motivo_rescisao
	into STRICT	dt_rescisao_contrato_w,
		nr_seq_motivo_rescisao_w
	from	pls_contrato
	where	nr_sequencia	= nr_seq_contrato_p;
	
	open c01;
	loop
	fetch c01 into
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		select	trunc(dt_rescisao,'dd')
		into STRICT	dt_rescisao_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;
		
		if (dt_rescisao_contrato_w	= dt_rescisao_w) then
			begin
			CALL pls_reativar_segurado(	nr_seq_segurado_w, dt_reativacao_p, ds_observacao_p,
						'N', nm_usuario_p);
			
			tb_nr_seq_segurado_w(nr_indice_w) := nr_seq_segurado_w;
			nr_indice_w := nr_indice_w + 1;
			
			if (ie_reativar_sca_w = 'S') then
				update	pls_sca_vinculo
				set	dt_fim_vigencia	 = NULL,
					dt_reativacao 	= dt_reativacao_p
				where	nr_seq_segurado	= nr_seq_segurado_w
				and	trunc(dt_fim_vigencia,'dd')	= trunc(dt_rescisao_contrato_w,'dd');
			end if;
			exception
			when others then
				ds_erro_w	:= '';
			end;
		end if;
		end;
	end loop;
	close c01;

	open c08;
	loop
	fetch c08 into
		nr_seq_pagador_w;
	EXIT WHEN NOT FOUND; /* apply on c08 */
		begin
		update	pls_contrato_pagador
		set	dt_rescisao			 = NULL,
			nm_usuario			= nm_usuario_p,
			dt_atualizacao			= clock_timestamp(),
			dt_reativacao			= dt_reativacao_p,
			nr_seq_motivo_cancelamento	 = NULL,
			dt_suspensao			 = NULL
		where	nr_sequencia			= nr_seq_pagador_w;
		
		insert into pls_pagador_historico(	nr_sequencia,nr_seq_pagador,cd_estabelecimento,dt_atualizacao,nm_usuario,
				dt_atualizacao_nrec,nm_usuario_nrec,ds_historico,dt_historico,nm_usuario_historico,
				ds_titulo,ie_origem,ie_tipo_historico)
		values (	nextval('pls_pagador_historico_seq'),nr_seq_pagador_w,cd_estabelecimento_p,clock_timestamp(),nm_usuario_p,
				clock_timestamp(),nm_usuario_p,wheb_mensagem_pck.get_texto(1136621),clock_timestamp(),nm_usuario_p,
				wheb_mensagem_pck.get_texto(1136622),'GC','S');
		end;
	end loop;
	close c08;

	update	pls_contrato
	set	dt_rescisao_contrato	 = NULL,
		dt_limite_utilizacao	 = NULL,
		ie_situacao		= '2',
		nm_usuario		= nm_usuario_p,
		dt_atualizacao		= clock_timestamp(),
		dt_reativacao		= dt_reativacao_p,
		dt_cancelamento		 = NULL,
		nr_seq_motivo_rescisao	 = NULL,
		nr_seq_causa_rescisao    = NULL
	where	nr_sequencia		= nr_seq_contrato_p;
	
	CALL pls_preco_beneficiario_pck.atualizar_desconto_benef(nr_seq_contrato_p, clock_timestamp(), null, 'N', nm_usuario_p, cd_estabelecimento_p);

	open c12;
	loop
	fetch c12 into
		nr_seq_seg_repasse_w,
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on c12 */
		begin
		
		update	pls_segurado_repasse
		set	dt_fim_repasse	 = NULL,
			dt_fim_real	 = NULL,
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia	= nr_seq_seg_repasse_w;
		
		CALL pls_gerar_segurado_historico(
			nr_seq_segurado_w, '2', clock_timestamp(),
			'Repasse ' || nr_seq_seg_repasse_w ||' reativado em ' || to_char(dt_reativacao_p, 'dd/mm/yyyy'), ds_observacao_p, null,
			dt_reativacao_p, null, null, 
			dt_reativacao_p, null, null, 
			null, null, null, 
			null, nm_usuario_p, 'S');
		
		end;
	end loop;
	close c12;
		
	open C05;
	loop
	fetch C05 into
		nr_seq_sub_contrato_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		
		select	trunc(dt_rescisao_contrato,'dd')
		into STRICT	dt_rescisao_contrato_w
		from	pls_contrato
		where	nr_sequencia	= nr_seq_sub_contrato_w;
		
		open C06;
		loop
		fetch C06 into
			nr_seq_segurado_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin
			select	trunc(dt_rescisao,'dd')
			into STRICT	dt_rescisao_w
			from	pls_segurado
			where	nr_sequencia	= nr_seq_segurado_w;
			
			if (dt_rescisao_contrato_w	= dt_rescisao_w) then
				begin
				CALL pls_reativar_segurado(	nr_seq_segurado_w, dt_reativacao_p, ds_observacao_p,
							'N', nm_usuario_p);
				
				tb_nr_seq_segurado_w(nr_indice_w) := nr_seq_segurado_w;
				nr_indice_w := nr_indice_w + 1;
				
				if (ie_reativar_sca_w = 'S') then
					update	pls_sca_vinculo
					set	dt_fim_vigencia	 = NULL,
						dt_reativacao 	= dt_reativacao_p
					where	nr_seq_segurado	= nr_seq_segurado_w
					and	trunc(dt_fim_vigencia,'dd')	= trunc(dt_rescisao_contrato_w,'dd');
				end if;
				exception
				when others then
					ds_erro_w	:= '';
				end;
			end if;
			end;
		end loop;
		close C06;

		open c09;
		loop
		fetch c09 into
			nr_seq_pagador_w;
		EXIT WHEN NOT FOUND; /* apply on c09 */
			begin
			update	pls_contrato_pagador
			set	dt_rescisao			 = NULL,
				nm_usuario			= nm_usuario_p,
				dt_atualizacao			= clock_timestamp(),
				dt_reativacao			= dt_reativacao_p,
				nr_seq_motivo_cancelamento	 = NULL,
				dt_suspensao			 = NULL
			where	nr_sequencia			= nr_seq_pagador_w;
			
			insert into pls_pagador_historico(	nr_sequencia,nr_seq_pagador,cd_estabelecimento,dt_atualizacao,nm_usuario,
					dt_atualizacao_nrec,nm_usuario_nrec,ds_historico,dt_historico,nm_usuario_historico,
					ds_titulo,ie_origem,ie_tipo_historico)
			values (	nextval('pls_pagador_historico_seq'),nr_seq_pagador_w,cd_estabelecimento_p,clock_timestamp(),nm_usuario_p,
					clock_timestamp(),nm_usuario_p,wheb_mensagem_pck.get_texto(1136621),clock_timestamp(),nm_usuario_p,
					wheb_mensagem_pck.get_texto(1136622),'GC','S');
			end;
		end loop;
		close c09;
		
		update	pls_contrato
		set	dt_rescisao_contrato	 = NULL,
			dt_limite_utilizacao	 = NULL,
			ie_situacao		= '2',
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			dt_reativacao		= dt_reativacao_p,
			dt_cancelamento		 = NULL,
			nr_seq_motivo_rescisao	 = NULL,
			nr_seq_causa_rescisao    = NULL
		where	nr_sequencia		= nr_seq_sub_contrato_w;
		
		CALL pls_preco_beneficiario_pck.atualizar_desconto_benef(nr_seq_sub_contrato_w, clock_timestamp(), null, 'N', nm_usuario_p, cd_estabelecimento_p);
		
		end;
	end loop;
	close C05;
elsif (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') and (coalesce(nr_seq_segurado_p,0) <> 0) then
	select 	max(nr_seq_contrato),
		max(dt_rescisao),
		max(nr_seq_titular),
		max(cd_matricula_familia),
		max(nr_seq_pagador)
	into STRICT	nr_seq_contrato_w,
		dt_rescisao_w,
		nr_seq_titular_w,
		cd_matricula_familia_w,
		nr_seq_pagador_w
	from 	pls_segurado
	where	nr_sequencia = nr_seq_segurado_p;
	
	if (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') then
		if (trunc(dt_reativacao_p,'dd') < trunc(dt_rescisao_w,'dd')) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(684275); --A data de reativacao deve ser posterior ou igual a data de rescisao
		end if;

		/*Consistir o parametro [82] - Permite apenas 1 titular por familia no contrato */

		if (coalesce(ie_titular_familia_w,'N') = 'S') and (coalesce(nr_seq_titular_w::text, '') = '') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_seg_titular_w
			from	pls_segurado
			where	nr_seq_contrato		= nr_seq_contrato_w
			and	cd_matricula_familia	= cd_matricula_familia_w
			and	nr_sequencia	<> nr_seq_segurado_p
			and	coalesce(nr_seq_titular::text, '') = ''
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	coalesce(dt_rescisao::text, '') = '';
			
			if (nr_seq_seg_titular_w IS NOT NULL AND nr_seq_seg_titular_w::text <> '') then
				select	max(b.nm_pessoa_fisica)
				into STRICT	nm_pessoa_fisica_w
				from	pls_segurado	a,
					pessoa_fisica	b
				where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
				and	a.nr_sequencia		= nr_seq_seg_titular_w;
				
				if (nm_pessoa_fisica_w IS NOT NULL AND nm_pessoa_fisica_w::text <> '') then
					CALL wheb_mensagem_pck.exibir_mensagem_abort( 192950, 'NR_SEQ_SEG_TITULAR=' || nr_seq_seg_titular_w || ';NM_PESSOA_FISICA=' || nm_pessoa_fisica_w );
					/*'E permitido apenas 1 titular ativo por matricula familiar!'||chr(13)||chr(10)||
					'Verifique parametro [82] - Permite apenas 1 titular por familia no contrato.'||chr(13)||chr(10)||
					'Titular ativo: '||nr_seq_seg_titular_w||' - '||nm_pessoa_fisica_w*/
				end if;
			end if;
		end if;
		
		CALL pls_consiste_data_sib(dt_reativacao_p, nm_usuario_p, cd_estabelecimento_p);
		
		if (ie_reativar_sca_w = 'S') then
			update	pls_sca_vinculo
			set	dt_fim_vigencia	 = NULL,
				dt_reativacao 	= dt_reativacao_p
			where	nr_seq_segurado	= nr_seq_segurado_p
			and	trunc(dt_fim_vigencia,'dd')	= trunc(dt_rescisao_w,'dd');
		end if;
		
		CALL pls_reativar_segurado(	nr_seq_segurado_p, dt_reativacao_p, ds_observacao_p,
					'S', nm_usuario_p);
		
		if (coalesce(ie_reativar_pagador_p,'N') = 'S') then
			update	pls_contrato_pagador
			set	dt_rescisao			 = NULL,
				nm_usuario			= nm_usuario_p,
				dt_atualizacao			= clock_timestamp(),
				dt_reativacao			= dt_reativacao_p,
				nr_seq_motivo_cancelamento	 = NULL,
				dt_suspensao			 = NULL
			where	nr_sequencia	= nr_seq_pagador_w;
		end if;
		
		CALL pls_preco_beneficiario_pck.atualizar_desconto_benef(nr_seq_contrato_w, clock_timestamp(), null, 'N', nm_usuario_p, cd_estabelecimento_p);

		open c02;
		loop
		fetch c02 into
			nr_seq_dependente_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			
			select 	max(dt_rescisao)
			into STRICT	dt_rescisao_depen_w
			from 	pls_segurado
			where	nr_sequencia = nr_seq_dependente_w;
			
			if (ie_reativar_sca_w = 'S') then
				update	pls_sca_vinculo
				set	dt_fim_vigencia	 = NULL,
					dt_reativacao 	= dt_reativacao_p
				where	nr_seq_segurado	= nr_seq_dependente_w
				and	trunc(dt_fim_vigencia,'dd')	= trunc(dt_rescisao_depen_w,'dd');
			end if;
			
			CALL pls_reativar_segurado(	nr_seq_dependente_w, dt_reativacao_p, ds_observacao_p,
						'S', nm_usuario_p);
			end;
		end loop;
		close c02;
		
		CALL pls_preco_beneficiario_pck.atualizar_preco_beneficiarios(null, nr_seq_contrato_w, null, null, dt_reativacao_p, null, 'N', nm_usuario_p, cd_estabelecimento_p);
		
		--Recalcula o preco do SCA dos beneficiarios do contrato pela quantidade de vidas
		open C10;
		loop
		fetch C10 into
			nr_seq_segurado_sca_w;
		EXIT WHEN NOT FOUND; /* apply on C10 */
			begin
			
			open C11;
			loop
			fetch C11 into
				nr_seq_vinculo_sca_w;
			EXIT WHEN NOT FOUND; /* apply on C11 */
				begin
				CALL pls_recalcular_preco_sca(nr_seq_segurado_sca_w, 'C', cd_estabelecimento_p, clock_timestamp(), nr_seq_vinculo_sca_w, nm_usuario_p);
				end;
			end loop;
			close C11;
			
			end;
		end loop;
		close C10;
	end if;
elsif (nr_seq_subestipulante_p IS NOT NULL AND nr_seq_subestipulante_p::text <> '') and (coalesce(nr_seq_subestipulante_p,0) <> 0) then
	CALL pls_consiste_data_sib(dt_reativacao_p, nm_usuario_p, cd_estabelecimento_p);
	
	select	trunc(dt_rescisao,'dd')
	into STRICT	dt_rescisao_subestipulante_w
	from	pls_sub_estipulante
	where	nr_sequencia	= nr_seq_subestipulante_p;
	
	open c03;
	loop
	fetch c03 into
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		select	trunc(dt_rescisao,'dd')
		into STRICT	dt_rescisao_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;
		
		if (dt_rescisao_subestipulante_w = dt_rescisao_w) then
			begin
			CALL pls_reativar_segurado(	nr_seq_segurado_w, dt_reativacao_p, ds_observacao_p,
						'N', nm_usuario_p);
			
			tb_nr_seq_segurado_w(nr_indice_w) := nr_seq_segurado_w;
			nr_indice_w := nr_indice_w + 1;
			
			if (ie_reativar_sca_w = 'S') then
				update	pls_sca_vinculo
				set	dt_fim_vigencia	 = NULL,
					dt_reativacao 	= dt_reativacao_p
				where	nr_seq_segurado	= nr_seq_segurado_w
				and	trunc(dt_fim_vigencia,'dd')	= trunc(dt_rescisao_contrato_w,'dd');
			end if;
			exception
			when others then
				ds_erro_w	:= '';
			end;
		end if;
		end;
	end loop;
	close c03;
	
	update	pls_sub_estipulante
	set	dt_rescisao	 = NULL,
		dt_limite_utilizacao  = NULL,
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp(),
		dt_reativacao	= dt_reativacao_p
	where	nr_sequencia	= nr_seq_subestipulante_p;
	
	select	max(nr_seq_contrato)
	into STRICT	nr_seq_contrato_w
	from	pls_segurado
	where	nr_seq_subestipulante = nr_seq_subestipulante_p;
	
	CALL pls_preco_beneficiario_pck.atualizar_desconto_benef(nr_seq_contrato_w, clock_timestamp(), null, 'N', nm_usuario_p, cd_estabelecimento_p);
elsif (nr_seq_pagador_p IS NOT NULL AND nr_seq_pagador_p::text <> '') then
	CALL pls_consiste_data_sib(dt_reativacao_p, nm_usuario_p, cd_estabelecimento_p);
	select	trunc(dt_rescisao,'dd'),
		nr_seq_contrato
	into STRICT	dt_rescisao_pagador_w,
		nr_seq_contrato_w
	from	pls_contrato_pagador
	where	nr_sequencia	= nr_seq_pagador_p;
	
	open C04;
	loop
	fetch C04 into
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		
		select	trunc(dt_rescisao,'dd')
		into STRICT	dt_rescisao_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;
		
		if (dt_rescisao_pagador_w = dt_rescisao_w) then
			begin
			CALL pls_reativar_segurado(	nr_seq_segurado_w, dt_reativacao_p, ds_observacao_p,
						'N', nm_usuario_p);
			
			tb_nr_seq_segurado_w(nr_indice_w) := nr_seq_segurado_w;
			nr_indice_w := nr_indice_w + 1;
			
			if (ie_reativar_sca_w = 'S') then
				update	pls_sca_vinculo
				set	dt_fim_vigencia	 = NULL,
					dt_reativacao 	= dt_reativacao_p
				where	nr_seq_segurado	= nr_seq_segurado_w
				and	trunc(dt_fim_vigencia,'dd')	= dt_rescisao_pagador_w;
			end if;
			exception
			when others then
				ds_erro_w	:= '';
			end;
		end if;
		end;
	end loop;
	close C04;
	
	update	pls_contrato_pagador
	set	dt_rescisao			 = NULL,
		nm_usuario			= nm_usuario_p,
		dt_atualizacao			= clock_timestamp(),
		dt_reativacao			= dt_reativacao_p,
		nr_seq_motivo_cancelamento	 = NULL,
		dt_suspensao			 = NULL
	where	nr_sequencia	= nr_seq_pagador_p;
	
	CALL pls_preco_beneficiario_pck.atualizar_desconto_benef(nr_seq_contrato_w, clock_timestamp(), null, 'N', nm_usuario_p, cd_estabelecimento_p);
	
	ds_mensagem_reativacao_pag_w	:= substr(	wheb_mensagem_pck.get_texto(1039983) || ' ' || wheb_mensagem_pck.get_texto(1039984, 'DS_MSG='||nr_seq_pagador_p) || chr(13) ||
							wheb_mensagem_pck.get_texto(1039994) || ': '|| wheb_mensagem_pck.get_texto(1039984, 'DS_MSG='||dt_reativacao_p) || chr(13) ||
							wheb_mensagem_pck.get_texto(1039992, 'DS_OBSERVACAO='||ds_observacao_p) || chr(13) ||
							wheb_mensagem_pck.get_texto(1039995) || ': '|| ie_titular_p || chr(13) ||
							wheb_mensagem_pck.get_texto(1039997) || ': '|| ie_dependente_p, 1, 4000);
	
	insert into pls_pagador_historico(	nr_sequencia,nr_seq_pagador,cd_estabelecimento,dt_atualizacao,nm_usuario,
			dt_atualizacao_nrec,nm_usuario_nrec,ds_historico,dt_historico,nm_usuario_historico,
			ds_titulo,ie_origem,ie_tipo_historico)
	values (	nextval('pls_pagador_historico_seq'),nr_seq_pagador_p,cd_estabelecimento_p,clock_timestamp(),nm_usuario_p,
			clock_timestamp(),nm_usuario_p,ds_mensagem_reativacao_pag_w,clock_timestamp(),nm_usuario_p,
			wheb_mensagem_pck.get_texto(1039981),'GC','S');	
end if;

if (tb_nr_seq_segurado_w.count > 0) then
	for i in tb_nr_seq_segurado_w.first..tb_nr_seq_segurado_w.last loop
		begin
		CALL pls_preco_beneficiario_pck.gravar_preco_benef(tb_nr_seq_segurado_w(i), 'B', 'S', dt_reativacao_p, 'N', null, nm_usuario_p, cd_estabelecimento_p);
		end;
	end loop;
end if;
	
if	((coalesce(nr_seq_pagador_p,0) <> 0) or (coalesce(nr_seq_subestipulante_p,0) <> 0)) then
	CALL pls_preco_beneficiario_pck.atualizar_preco_beneficiarios(null, nr_seq_contrato_w, null, null, clock_timestamp(), null, 'N', nm_usuario_p, cd_estabelecimento_p);
end if;
	
if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_reativar_contrato ( nr_seq_contrato_p bigint, nr_seq_segurado_p bigint, nr_seq_pagador_p bigint, nr_seq_subestipulante_p bigint, dt_reativacao_p timestamp, ds_observacao_p text, ie_dependente_p text, ie_reativa_sub_contrato_p text, ie_reativar_pagador_p text, ie_reativar_sca_p text, ie_titular_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_commit_p text) FROM PUBLIC;

