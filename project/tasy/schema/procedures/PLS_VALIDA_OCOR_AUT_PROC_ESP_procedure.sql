-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_valida_ocor_aut_proc_esp ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_segurado_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: 
Procedure utilizada para validar informações da regra de procedimento x especialidade, esta rotina é 
utilizada para geração de ocorrência na Autorização / Requisição e Execução 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [x] Tasy (Delphi/Java) [ x] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
 Rotina utilizada para geração de ocorrência na Autorização / Requisição e Execução 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
cd_especialidade_w			integer;
nr_seq_guia_proc_w			bigint;
cd_procedimento_w			procedimento.cd_procedimento%type;
ie_origem_proced_w			procedimento.ie_origem_proced%type;
ie_gerou_ocor_cabecalho_w		varchar(2);
ie_regra_w				varchar(2);
ie_tipo_ocorrencia_w			varchar(2);
ie_gerar_ocorrencia_w			varchar(2)	:= 'N';
ie_tipo_item_w				bigint;
nr_seq_oc_benef_w			bigint;
nr_seq_proc_espec_w			bigint;
nr_seq_req_proc_w			bigint;
nr_seq_exec_proc_w			bigint;

nr_seq_proc_espec_ww			varchar(20);
nr_seq_proc_w				varchar(20);

C02 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_procedimento, 
		ie_origem_proced 
	from	pls_guia_plano_proc 
	where	nr_seq_guia		= nr_seq_guia_p;

C03 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_procedimento, 
		ie_origem_proced 
	from	pls_requisicao_proc 
	where	nr_seq_requisicao	= nr_seq_requisicao_p;

C04 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_procedimento, 
		ie_origem_proced 
	from	pls_execucao_req_item 
	where	nr_seq_execucao	= nr_seq_execucao_p;
	
C05 CURSOR FOR 
	SELECT	nr_seq_proc_espec 
	from	pls_validacao_aut_proc_esp 
	where	nr_seq_ocor_aut_combinada	= nr_seq_ocor_combinada_p;
	

BEGIN 
if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then 
	begin 
		select 	cd_especialidade 
		into STRICT	cd_especialidade_w 
		from	pls_guia_plano 
		where	nr_sequencia	= nr_seq_guia_p;
	exception 
	when others then 
		cd_especialidade_w	:= null;
	end;
 
	open C05;
	loop 
	fetch C05 into	 
		nr_seq_proc_espec_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin 
		if (nr_seq_proc_espec_w IS NOT NULL AND nr_seq_proc_espec_w::text <> '') and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '') then 
			open C02;
			loop 
			fetch C02 into 
				nr_seq_guia_proc_w, 
				cd_procedimento_w, 
				ie_origem_proced_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin 
				ie_gerar_ocorrencia_w 	:= pls_obter_se_espec_solic_comb(nr_seq_guia_proc_w, null, null, nr_seq_proc_espec_w,cd_especialidade_w);
 
				if (ie_utiliza_filtro_p = 'S') then 
					/* Tratamento para filtros */
 
					SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, nr_seq_guia_p, null, null, nr_seq_guia_proc_w, null, null, null, null, cd_procedimento_w, ie_origem_proced_w, null, ie_gerou_ocor_cabecalho_w, null, null, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
 
					if (ie_regra_w	= 'S') then 
						ie_gerar_ocorrencia_w	:= 'S';
					elsif (ie_regra_w	in ('E','N')) then 
						ie_gerar_ocorrencia_w	:= 'N';
						exit;
					end if;
				end if;
				end;
 
				if (ie_gerar_ocorrencia_w	= 'S')	then 
					if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then 
						ie_tipo_item_w	:= 1;
					end if;
 
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, null, nr_seq_guia_p, null, nr_seq_guia_proc_w, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, ie_tipo_item_w, cd_estabelecimento_p, 'N', null, nr_seq_oc_benef_w, null, null, null, null);
								 
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p, 
									nr_seq_guia_p, null, null, 
									nr_seq_guia_proc_w, null, null, 
									null, null, null, 
									nm_usuario_p, cd_estabelecimento_p);							
				end if;
			end loop;
			close C02;
		end if;
		end;
	end loop;
	close C05;
 
elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then 
	begin 
		select 	cd_especialidade 
		into STRICT	cd_especialidade_w 
		from	pls_requisicao 
		where	nr_sequencia	= nr_seq_requisicao_p;
	exception 
	when others then 
		cd_especialidade_w	:= null;
	end;
 
	open C05;
	loop 
	fetch C05 into	 
		nr_seq_proc_espec_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin 
		if (nr_seq_proc_espec_w IS NOT NULL AND nr_seq_proc_espec_w::text <> '') and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '') then 
			open C03;
			loop 
			fetch C03 into 
				nr_seq_req_proc_w, 
				cd_procedimento_w, 
				ie_origem_proced_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin 
				ie_gerar_ocorrencia_w 	:= pls_obter_se_espec_solic_comb(null,nr_seq_req_proc_w,null,nr_seq_proc_espec_w,cd_especialidade_w);
 
				if (ie_utiliza_filtro_p = 'S') then 
 
					/* Tratamento para filtros */
 
					SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, null, nr_seq_requisicao_p, null, null, nr_seq_req_proc_w, null, null, null, cd_procedimento_w, ie_origem_proced_w, null, ie_gerou_ocor_cabecalho_w, null, null, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
 
					if (ie_regra_w	= 'S') then 
						ie_gerar_ocorrencia_w	:= 'S';
					elsif (ie_regra_w	in ('E','N')) then 
						ie_gerar_ocorrencia_w	:= 'N';
						exit;
					end if;
				end if;
				end;
 
				if (ie_gerar_ocorrencia_w	= 'S')	then 
					if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then 
						ie_tipo_item_w	:= 5;
					end if;
 
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, nr_seq_requisicao_p, null, null, nr_seq_req_proc_w, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, ie_tipo_item_w, cd_estabelecimento_p, 'N', nr_seq_execucao_p, nr_seq_oc_benef_w, null, null, null, null);
								 
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p, 
									null, nr_seq_requisicao_p, null, 
									null, null, nr_seq_req_proc_w, 
									null, null, null, 
									nm_usuario_p, cd_estabelecimento_p);	
				end if;
			end loop;
			close C03;
		end if;
		end;
	end loop;
	close C05;
elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then 
	begin 
		select 	b.cd_especialidade 
		into STRICT	cd_especialidade_w 
		from	pls_execucao_requisicao a, 
			pls_requisicao b 
		where	a.nr_sequencia		= nr_seq_execucao_p 
		and	a.nr_seq_requisicao	= b.nr_sequencia;
	exception 
	when others then 
		cd_especialidade_w	:= null;
	end;
	 
	open C05;
	loop 
	fetch C05 into	 
		nr_seq_proc_espec_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin 
		if (nr_seq_proc_espec_w IS NOT NULL AND nr_seq_proc_espec_w::text <> '') and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '') then 
			open C04;
			loop 
			fetch C04 into 
				nr_seq_exec_proc_w, 
				cd_procedimento_w, 
				ie_origem_proced_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin 
				ie_gerar_ocorrencia_w 	:= pls_obter_se_espec_solic_comb(null,null,nr_seq_exec_proc_w,nr_seq_proc_espec_w,cd_especialidade_w);
 
				if (ie_utiliza_filtro_p = 'S') then 
					/* Tratamento para filtros */
 
					SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, null, nr_seq_requisicao_p, null, nr_seq_execucao_p, null, null, null, nr_seq_exec_proc_w, cd_procedimento_w, ie_origem_proced_w, null, ie_gerou_ocor_cabecalho_w, null, null, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
 
					if (ie_regra_w	= 'S') then 
						ie_gerar_ocorrencia_w	:= 'S';
					elsif (ie_regra_w	in ('E','N')) then 
						ie_gerar_ocorrencia_w	:= 'N';
						exit;
					end if;
				end if;
				end;
 
				if (ie_gerar_ocorrencia_w	= 'S')	then 
					if (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then 
						ie_tipo_item_w	:= 10;
					end if;
 
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, null, null, null, nr_seq_exec_proc_w, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, ie_tipo_item_w, cd_estabelecimento_p, 'N', nr_seq_execucao_p, nr_seq_oc_benef_w, null, null, null, null);
								 
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p, 
									null, null, nr_seq_execucao_p, 
									null, null, null, 
									null, nr_seq_exec_proc_w, null, 
									nm_usuario_p, cd_estabelecimento_p);
				end if;
			end loop;
			close C04;
		end if;
		end;
	end loop;
	close C05;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_valida_ocor_aut_proc_esp ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_segurado_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

