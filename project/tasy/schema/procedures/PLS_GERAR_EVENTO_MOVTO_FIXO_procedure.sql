-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_evento_movto_fixo ( nr_seq_lote_evento_p pls_lote_evento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_opcao_p text, ie_commit_p text) AS $body$
DECLARE

					 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Gerar os lançamentos programados conforme as regras dos eventos, esta rotina 
também desfaz o lote de eventos. 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ X ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
	ie_opcao_p: 
		G - Gerar lançamentos programados 
		D - Defazer lançamentos programados 
 
	PLS_GERAR_MOVTO_COND_PGTO 
 
	Caso seja desfeito o lote de eventos manualmente é consistido se seus movimentos 
	não estão vinculados a um lote de pagamento. 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
	OPS - Controle de Eventos e Ocorrências Financeiras 
	GERAR_LANCAMENTO_PROGRAMADO 
	PLS_DESFAZER_LOTE_PAGAMENTO 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ds_observacao_w			pls_evento_regra_fixo.ds_observacao%type;
ds_erro_w			varchar(255)	:= null;
cd_conta_contabil_w		pls_evento_movimento.cd_conta_contabil%type;
cd_pf_titulo_pagar_w		pls_evento_regra_fixo.cd_pf_titulo_pagar%type;
cd_cgc_titulo_pagar_w		pls_evento_regra_fixo.cd_cgc_titulo_pagar%type;
ie_forma_incidencia_w		pls_evento_regra_fixo.ie_forma_incidencia%type;
ie_gerar_w			varchar(5);
ie_situacao_w			pls_prestador.ie_situacao%type;
ie_incidencia_lanc_prog_w	pls_evento.ie_incidencia_lanc_prog%type;
ie_periodo_aprop_neg_w		pls_prestador_pagto.ie_periodo_aprop_neg%type	:= 'N';
ie_prestador_matriz_w		pls_evento_regra_fixo.ie_prestador_matriz%type 	:= 'N';
ie_titulo_pagar_w		pls_evento_movimento.ie_titulo_pagar%type	:= 'N';
ie_evento_orig_prox_pagto_w	pls_parametro_pagamento.ie_evento_orig_prox_pagto%type;
vl_regra_w			pls_evento_regra_fixo.vl_regra%type;
nr_seq_evento_w			pls_evento.nr_sequencia%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
nr_seq_regra_fixo_w		pls_evento_regra_fixo.nr_sequencia%type;
nr_seq_prest_princ_w		pls_prestador.nr_seq_prest_princ%type;
nr_seq_periodo_pag_w		pls_periodo_pagamento.nr_sequencia%type;
nr_seq_vencimento_w		pls_pag_prest_vencimento.nr_sequencia%type;
nr_seq_evento_movto_w		pls_evento_movimento.nr_sequencia%type;
nr_seq_lote_pgto_w		pls_evento_movimento.nr_seq_lote_pgto%type;
qt_excessoes_w			integer;
nr_seq_lote_pag_w		pls_lote_evento.nr_seq_lote_pagamento%type;
cd_condicao_pagamento_w		pls_evento_regra_fixo.cd_condicao_pagamento%type;
nr_seq_tipo_prestador_w		pls_prestador.nr_seq_tipo_prestador%type;
nr_seq_periodo_w		pls_lote_pagamento.nr_seq_periodo%type;
nr_seq_classe_tit_rec_w		pls_evento_regra_fixo.nr_seq_classe_titulo%type;
qt_dia_venc_w			pls_evento_regra_fixo.qt_dia_venc%type;
qt_registro_w			integer;
nr_seq_lote_w			pls_lote_pagamento.nr_sequencia%type;
nr_seq_evento_lote_w		pls_lote_evento.nr_seq_evento%type;
nr_seq_trans_fin_baixa_w	pls_evento_regra_fixo.nr_seq_trans_fin_baixa%type;
nr_seq_trans_fin_contab_w	pls_evento_regra_fixo.nr_seq_trans_fin_contab%type;
dt_competencia_w		pls_lote_evento.dt_competencia%type;
dt_movimento_w			pls_evento_regra_fixo.dt_movimento%type := null;
nr_seq_prestador_orig_w		pls_prestador.nr_sequencia%type;
qt_total_aprop_w		integer := 0;
qt_aprop_w			integer := 0;
nr_seq_venc_valor_w		pls_pag_prest_venc_valor.nr_sequencia%type;
cd_centro_custo_w		pls_evento_regra_fixo.cd_centro_custo%type;
ie_gerar_evento_prox_pag_w	pls_parametro_pagamento.ie_gerar_evento_prox_pag%type;
ie_consiste_periodo_pag_w	pls_evento.ie_consiste_periodo_pag%type;
ie_complementar_w		pls_periodo_pagamento.ie_complementar%type;
ie_data_lanc_unico_w		pls_parametro_pagamento.ie_data_lanc_unico%type;
dt_inicio_comp_w		pls_lote_evento.dt_inicio_comp%type;
dt_fim_comp_w			pls_lote_evento.dt_fim_comp%type;
nr_seq_classificacao_w		pls_prestador.nr_seq_classificacao%type;
nr_seq_regra_w			pls_prestador_crit_receb.nr_sequencia%type;
nr_seq_prestador_regra_w	pls_prestador_crit_receb.nr_seq_prest_receb%type;
nr_seq_prestador_pgto_w		pls_prestador.nr_sequencia%type;
qt_apropriacao_w		integer;
ie_restringe_estab_w		varchar(1);
nr_seq_evento_prox_pgto_w	pls_parametro_pagamento.nr_seq_evento_prox_pgto%type;
ie_aplicar_regra_prest_w	pls_evento.ie_aplicar_regra_prest%type;

C01 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		b.ie_forma_incidencia, 
		CASE WHEN coalesce(b.ie_forma_valor, 'I')='I' THEN  CASE WHEN a.ie_natureza='D' THEN (abs(b.vl_regra)*(-1))  ELSE abs(b.vl_regra) END   ELSE null END , /* Trata se o valor é informado ou conforme Regra de incidência sobre ouro evento - Pasta Regra valor */
 
		b.nr_sequencia, 
		substr(b.ds_observacao,1,2000), 
		b.cd_condicao_pagamento, 
		b.nr_seq_periodo, 
		b.nr_seq_classe_titulo, 
		b.qt_dia_venc, 
		coalesce(a.ie_incidencia_lanc_prog,'N') /* Verifica se deve ser verificado se a regra já gerou movimento ou se a restrição deve ser pelo evento */
, 
		coalesce(b.ie_prestador_matriz,'N'), 
		b.dt_movimento, 
		coalesce(b.ie_titulo_pagar, 'N'), 
		b.cd_pf_titulo_pagar, 
		b.cd_cgc_titulo_pagar, 
		b.nr_seq_trans_fin_baixa, 
		b.nr_seq_trans_fin_contab, 
		coalesce(a.ie_consiste_periodo_pag, 'S'), 
		b.cd_centro_custo, 
		coalesce(a.ie_aplicar_regra_prest, 'S') ie_aplicar_regra_prest 
	from	pls_evento_regra_fixo	b, 
		pls_evento		a 
	where	a.nr_sequencia		= b.nr_seq_evento 
	and	a.ie_situacao		= 'A' 
	and	a.ie_tipo_evento 	= 'F' 
	and	coalesce(b.ie_gerar_apos_tributacao,'N') = 'N' 
	and	coalesce(b.nr_seq_prestador,nr_seq_prestador_w) = nr_seq_prestador_w 
	and	coalesce(b.nr_seq_tipo_prestador,nr_seq_tipo_prestador_w) = nr_seq_tipo_prestador_w 
	and (coalesce(b.ie_situacao_prest,ie_situacao_w) = ie_situacao_w or b.ie_situacao_prest = 'T') 
	and	((ie_restringe_estab_w = 'N') or (a.cd_estabelecimento = cd_estabelecimento_p)) 
	and (exists (SELECT	1 
			from	pls_prestador x 
			where	x.nr_sequencia	= nr_seq_prestador_w 
			and (pls_obter_situacao_coop_prest(x.cd_pessoa_fisica,x.cd_cgc)	= b.nr_seq_sit_coop or coalesce(b.nr_seq_sit_coop::text, '') = '') 
			and	substr(pls_obter_se_cooperado(x.cd_pessoa_fisica,x.cd_cgc),1,1) = 'S') or coalesce(b.ie_cooperado,'N') = 'N') 
	-- Se o forma de incidencia for de lançamento único, deverá respeitar a parametrização do campo ie_data_lanc_unico_w 
	and	(((b.ie_forma_incidencia = 'U') and ( 
			-- Se ie_data_lanc_unico_w for 'M' (Filtrar pelo mês de referência do pagamento) 
			((ie_data_lanc_unico_w = 'M') and (dt_competencia_w = trunc(b.dt_inicio_vigencia,'month')) 
		or 
			-- Se ie_data_lanc_unico_w for 'D' (Filtrar pelas datas de início e fim de competência do lote (diário)) 
			((ie_data_lanc_unico_w = 'D') and (trunc(b.dt_inicio_vigencia,'dd') between coalesce(dt_inicio_comp_w,dt_competencia_w) and coalesce(dt_fim_comp_w,fim_dia(last_day(dt_competencia_w)))))) 
		)) or 
		-- Se o forma de incidencia NÃO for de lançamento único, deverá respeitar data de competência 
		((b.ie_forma_incidencia <> 'U') and (dt_competencia_w between trunc(b.dt_inicio_vigencia,'month') and coalesce(trunc(b.dt_fim_vigencia,'month'),dt_competencia_w))) 
	) 
	-- jtonon - OS 951976 - A restrição abaixo foi removida visto que este tratamento ignorava a configuração do 'ie_data_lanc_unico_w'. 
	-- Ex.: Lote de pagamento referência 10/2015 com início/fim competência 09/15 à 11/15. Lançamento único de 01/09/15. Configuração na gestão de operadora 'Filtrar pelas datas de início e fim de competência do lote (diário)'. 
	-- Até nesta linha do código o sistema estava filtrando corretamente, porém, na linha abaixo o sistema forçava que a data de lançamento único, que neste caso era 01/09/15, fosse da mesma competência do lote de pagamento, assim ignorando as restrições do 'ie_data_lanc_unico_w'. 
	--and	((dt_competencia_w = trunc(b.dt_inicio_vigencia,'month')) or (b.ie_forma_incidencia <> 'U')) 
	and	a.nr_sequencia = coalesce(nr_seq_evento_lote_w,a.nr_sequencia) 
	and	((b.nr_seq_periodo = nr_seq_periodo_pag_w) or (coalesce(b.nr_seq_periodo::text, '') = '') or (coalesce(nr_seq_periodo_pag_w::text, '') = '')) -- tratado para quando for na aba movimentação das ocorrências financeiras não considerar este campo 
	order by 
		a.nr_sequencia, 
		coalesce(b.nr_seq_ordem,0);

C02 CURSOR FOR 
	SELECT	sum(x.vl_vencimento), 
		a.nr_seq_prestador, 
		b.nr_sequencia, 
		a.nr_seq_lote 
	from	pls_pag_prest_venc_valor	x, 
		pls_pag_prest_vencimento	b, 
		pls_pagamento_prestador		a 
	where	b.nr_sequencia		= x.nr_seq_vencimento 
	and	a.nr_sequencia		= b.nr_seq_pag_prestador 
	and	b.ie_proximo_pgto	= 'S' 
	and	x.ie_tipo_valor		= 'PP' 
	and	coalesce(b.nr_seq_evento_movto::text, '') = '' 
	and	coalesce(a.ie_cancelamento::text, '') = '' 
	and	x.nr_seq_evento = coalesce(nr_seq_evento_lote_w, x.nr_seq_evento) 
	group by 
		a.nr_seq_prestador, 
		b.nr_sequencia, 
		a.nr_seq_lote;
	-- OS 448782 - Retirado tratamento para gerar o valor independente do mês pois só irá gerar uma vez 
C03 CURSOR FOR 
	SELECT	nr_sequencia, 
		coalesce(ie_situacao,'A'), 
		coalesce(nr_seq_tipo_prestador,0), 
		nr_seq_classificacao 
	from	pls_prestador;

C04 CURSOR FOR 
	SELECT	sum(x.vl_vencimento), 
		a.nr_seq_prestador, 
		b.nr_sequencia, 
		a.nr_seq_lote, 
		x.nr_seq_evento, 
		x.nr_sequencia 
	from	pls_pag_prest_venc_valor	x, 
		pls_pag_prest_vencimento	b, 
		pls_pagamento_prestador		a 
	where	b.nr_sequencia		= x.nr_seq_vencimento 
	and	a.nr_sequencia		= b.nr_seq_pag_prestador 
	and	b.ie_proximo_pgto	= 'S' 
	and	x.ie_tipo_valor		= 'PP' 
	and	coalesce(x.nr_seq_evento_movto::text, '') = '' 
	and	coalesce(a.ie_cancelamento::text, '') = '' 
	and	x.nr_seq_evento = coalesce(nr_seq_evento_lote_w, x.nr_seq_evento) 
	group by 
		a.nr_seq_prestador, 
		b.nr_sequencia, 
		a.nr_seq_lote, 
		x.nr_seq_evento, 
		x.nr_sequencia;

C05 CURSOR FOR 
	SELECT	b.nr_sequencia 
	from	pls_pag_prest_vencimento	b, 
		pls_pagamento_prestador		a 
	where	a.nr_sequencia		= b.nr_seq_pag_prestador 
	and	b.ie_proximo_pgto	= 'S' 
	and	exists (SELECT	1 
			from	pls_pag_prest_venc_valor	x, 
				pls_evento_movimento		y 
			where	y.nr_sequencia	= x.nr_seq_evento_movto 
			and	b.nr_sequencia	= x.nr_seq_vencimento 
			and	x.ie_tipo_valor	= 'PP') 
	and	coalesce(b.nr_seq_evento_movto::text, '') = '' 
	and	coalesce(a.ie_cancelamento::text, '') = '';


BEGIN 
 
-- Informar se o controle de eventos e ocorrências financeiras deve restringir por estabelecimento 
ie_restringe_estab_w := pls_obter_se_controle_estab('LPM');
 
-- Por ora define o lote como Não complementar 
ie_complementar_w := 'N';
 
select	max(nr_seq_lote_pagamento), 
	max(nr_seq_evento) 
into STRICT	nr_seq_lote_pag_w, 
	nr_seq_evento_lote_w 
from	pls_lote_evento 
where	nr_sequencia	= nr_seq_lote_evento_p;
 
select	max(nr_seq_periodo) 
into STRICT	nr_seq_periodo_pag_w 
from	pls_lote_pagamento a 
where	a.nr_sequencia = nr_seq_lote_pag_w;
 
if (nr_seq_periodo_pag_w IS NOT NULL AND nr_seq_periodo_pag_w::text <> '') then 
	select	coalesce(ie_complementar,'N') 
	into STRICT	ie_complementar_w 
	from	pls_periodo_pagamento 
	where	nr_sequencia	= nr_seq_periodo_pag_w;
end if;
 
-- carrega os parâmetros 
select	coalesce(max(a.ie_data_lanc_unico),'M'), 
	max(a.nr_seq_evento_prox_pgto), 
	coalesce(max(a.ie_evento_orig_prox_pagto),'N'), 
	coalesce(max(a.ie_gerar_evento_prox_pag), 'N') 
into STRICT	ie_data_lanc_unico_w, 
	nr_seq_evento_prox_pgto_w, 
	ie_evento_orig_prox_pagto_w, 
	ie_gerar_evento_prox_pag_w 
from	pls_parametro_pagamento a 
where	a.cd_estabelecimento = cd_estabelecimento_p;
 
 
-- Eventos que não estiverem o ie_aplicar_regra_prest informado, então o padrão deverá ser "S" 
update	pls_evento 
set	ie_aplicar_regra_prest	= 'S' 
where	coalesce(ie_aplicar_regra_prest::text, '') = '';
 
 
if (ie_opcao_p = 'G') then 
 
	delete	FROM pls_evento_movimento  
	where	(nr_seq_regra_fixo_w IS NOT NULL AND nr_seq_regra_fixo_w::text <> '') 
	and	nr_seq_lote	= nr_seq_lote_evento_p;
 
	select	trunc(dt_competencia, 'month'), 
		trunc(dt_inicio_comp,'dd'), 
		trunc(dt_fim_comp,'dd') 
	into STRICT	dt_competencia_w, 
		dt_inicio_comp_w, 
		dt_fim_comp_w 
	from	pls_lote_evento 
	where	nr_sequencia	= nr_seq_lote_evento_p;
	 
	open C03; /* Verifica prestadores ativos */
	loop 
	fetch C03 into 
		nr_seq_prestador_w, 
		ie_situacao_w, 
		nr_seq_tipo_prestador_w, 
		nr_seq_classificacao_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		open C01; /* Busca lançamentos programados conforme regras */
		loop 
		fetch C01 into 
			nr_seq_evento_w, 
			ie_forma_incidencia_w, 
			vl_regra_w, 
			nr_seq_regra_fixo_w, 
			ds_observacao_w, 
			cd_condicao_pagamento_w, 
			nr_seq_periodo_w, 
			nr_seq_classe_tit_rec_w, 
			qt_dia_venc_w, 
			ie_incidencia_lanc_prog_w, 
			ie_prestador_matriz_w, 
			dt_movimento_w, 
			ie_titulo_pagar_w, 
			cd_pf_titulo_pagar_w, 
			cd_cgc_titulo_pagar_w, 
			nr_seq_trans_fin_baixa_w, 
			nr_seq_trans_fin_contab_w, 
			ie_consiste_periodo_pag_w, 
			cd_centro_custo_w, 
			ie_aplicar_regra_prest_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			ie_gerar_w	:= 'S';
 
			if (ie_prestador_matriz_w = 'S') then 
				select	a.nr_seq_prest_princ 
				into STRICT	nr_seq_prest_princ_w 
				from	pls_prestador	a 
				where	a.nr_sequencia	= nr_seq_prestador_w;
 
				if (nr_seq_prest_princ_w IS NOT NULL AND nr_seq_prest_princ_w::text <> '') then 
					nr_seq_prestador_w	:= nr_seq_prest_princ_w;
				end if;
			end if;
 
			/*aaschlote 11/04/2014 OS - 724650 - Caso o lote for complementar, então nem entra na consistência, caso não for de origem de lote de pagamento ou o período do lote não for complementar, consiste a regra*/
 
			if (ie_complementar_w = 'N') then 
				if	((ie_consiste_periodo_pag_w = 'S') or (nr_seq_lote_pag_w IS NOT NULL AND nr_seq_lote_pag_w::text <> '')) then 
					ie_gerar_w := pls_obter_se_evento_inside_per(nr_seq_periodo_pag_w, nr_seq_evento_w, nr_seq_prestador_w, dt_competencia_w, coalesce(dt_movimento_w,trunc(dt_competencia_w,'dd')));
				end if;
			else	-- Edgar 26/05/2014, OS 740405, se for lote complementar, verificar se este evento está cadastrado no mesmo 
				ie_gerar_w := pls_obter_se_entra_pgto_compl(nr_seq_lote_pag_w, nr_seq_evento_w, nr_seq_prestador_w, nr_seq_tipo_prestador_w, nr_seq_classificacao_w);
			end if;
 
			nr_seq_prestador_pgto_w := null;
			nr_seq_prestador_orig_w := nr_seq_prestador_w;
 
			if (ie_aplicar_regra_prest_w = 'S') then 
			 
				SELECT * FROM pls_obter_prest_pgto_prof( 	nr_seq_prestador_w, null, null, null, nm_usuario_p, null, clock_timestamp(), nr_seq_prestador_pgto_w, nr_seq_regra_w) INTO STRICT nr_seq_prestador_pgto_w, nr_seq_regra_w;
 
				if (nr_seq_prestador_pgto_w IS NOT NULL AND nr_seq_prestador_pgto_w::text <> '') then 
 
					nr_seq_prestador_w := nr_seq_prestador_pgto_w;
				end if;
				 
			end if;
 
			if (coalesce( ie_gerar_w, 'N') <> 'N') then 
				if (ie_forma_incidencia_w = 'S') then /* Verifica se já existe uma ocorrência dentro da semana */
 
					-- é feito um IN com o prestador do cursor e o prestador que retornou na regra de conversão pois o lançamento 
					-- pode ter sido feito antes de aplicar a regra ou depois... 
					select	count(1) 
					into STRICT	qt_registro_w 
					from	pls_evento_movimento a 
					where	a.nr_seq_evento		= nr_seq_evento_w 
					and	a.nr_seq_prestador in (nr_seq_prestador_w, nr_seq_prestador_orig_w) 
					and	a.dt_movimento	between(trunc(dt_competencia_w,'dd') - (to_char(dt_competencia_w,'d'))::numeric  + 1) and (trunc(dt_competencia_w,'dd') - (to_char(dt_competencia_w,'d'))::numeric  + 8) 
					and	coalesce(a.ie_cancelamento::text, '') = ''  LIMIT 1;
 
					if (qt_registro_w > 0) then 
						ie_gerar_w	:= 'N';
					end if;
				elsif (ie_forma_incidencia_w = 'M') then /* Verifica se já existe uma ocorrência dentro do mês */
 
					-- é feito um IN com o prestador do cursor e o prestador que retornou na regra de conversão pois o lançamento 
					-- pode ter sido feito antes de aplicar a regra ou depois... 
					select	count(1) 
					into STRICT	qt_registro_w 
					from	pls_evento_movimento a 
					where	a.nr_seq_evento		= nr_seq_evento_w 
					and	a.nr_seq_prestador in (nr_seq_prestador_w, nr_seq_prestador_orig_w) 
					and	a.dt_movimento between trunc(dt_competencia_w,'month') and last_day(dt_competencia_w) 
					and	((ie_incidencia_lanc_prog_w = 'S' and nr_seq_regra_fixo = nr_seq_regra_fixo_w) or (ie_incidencia_lanc_prog_w = 'N')) 
					and	coalesce(a.ie_cancelamento::text, '') = ''  LIMIT 1;
 
					if (qt_registro_w > 0) then 
						ie_gerar_w	:= 'N';
					end if;
				elsif (ie_forma_incidencia_w = 'A') then /* Verifica se já existe uma ocorrência dentro do Ano */
 
					-- é feito um IN com o prestador do cursor e o prestador que retornou na regra de conversão pois o lançamento 
					-- pode ter sido feito antes de aplicar a regra ou depois... 
					select	count(1) 
					into STRICT	qt_registro_w 
					from	pls_evento_movimento a 
					where	a.nr_seq_evento		= nr_seq_evento_w 
					and	a.nr_seq_prestador in (nr_seq_prestador_w, nr_seq_prestador_orig_w) 
					and	a.dt_movimento between trunc(dt_competencia_w,'yy') and (last_day(add_months(trunc(dt_competencia_w,'year'),11))) 
					and	coalesce(a.ie_cancelamento::text, '') = ''  LIMIT 1;
 
					if (qt_registro_w > 0) then 
						ie_gerar_w	:= 'N';
					end if;
				elsif (ie_forma_incidencia_w = 'U') then /* Verifica se já existe uma ocorrência única */
 
					-- é feito um IN com o prestador do cursor e o prestador que retornou na regra de conversão pois o lançamento 
					-- pode ter sido feito antes de aplicar a regra ou depois... 
					select	count(1) 
					into STRICT	qt_registro_w 
					from	pls_evento_movimento a 
					where	a.nr_seq_evento		= nr_seq_evento_w 
					and	a.nr_seq_prestador in (nr_seq_prestador_w, nr_seq_prestador_orig_w) 
					and	a.nr_seq_regra_fixo	= nr_seq_regra_fixo_w 
					and	coalesce(a.ie_cancelamento::text, '') = ''  LIMIT 1;
 
					select 	count(1) 
					into STRICT	qt_excessoes_w 
					from	pls_evento_regra_fixo_exc b, 
						pls_evento_regra_fixo a 
					where	b.nr_seq_regra_fixo 	= a.nr_sequencia 
					and	b.nr_seq_prestador 	= nr_seq_prestador_w 
					and	a.nr_sequencia		= nr_seq_regra_fixo_w  LIMIT 1;
 
					if (qt_registro_w > 0) or (qt_excessoes_w > 0) then 
						ie_gerar_w	:= 'N';
					end if;
				end if;
			end if;
 
			if (ie_gerar_w = 'S') then /* Gerar ocorrências financeira */
 
 
				if (cd_condicao_pagamento_w IS NOT NULL AND cd_condicao_pagamento_w::text <> '') or (qt_dia_venc_w IS NOT NULL AND qt_dia_venc_w::text <> '') then 
					/* Gerar por condiição de pagamento */
 
					CALL pls_gerar_movto_cond_pgto(nr_seq_lote_evento_p, nr_seq_regra_fixo_w, nr_seq_prestador_w, cd_estabelecimento_p, nm_usuario_p);
				else 
					insert into pls_evento_movimento( 
						nr_sequencia, dt_atualizacao, nm_usuario, 
						dt_atualizacao_nrec, nm_usuario_nrec, dt_movimento, 
						nr_seq_evento, nr_seq_lote, nr_seq_prestador, 
						vl_movimento, nr_seq_regra_fixo, ds_observacao, 
						nr_seq_periodo, nr_seq_classe_tit_rec, ie_titulo_pagar, 
						cd_pf_titulo_pagar, cd_cgc_titulo_pagar, nr_seq_trans_fin_baixa, 
						nr_seq_trans_fin_contab, cd_centro_custo, ie_forma_pagto 
					) values ( 
						nextval('pls_evento_movimento_seq'), clock_timestamp(), nm_usuario_p, 
						clock_timestamp(), nm_usuario_p, coalesce(dt_movimento_w,trunc(dt_competencia_w,'dd')), 
						nr_seq_evento_w, nr_seq_lote_evento_p, nr_seq_prestador_w, 
						vl_regra_w, nr_seq_regra_fixo_w, ds_observacao_w, 
						nr_seq_periodo_w, nr_seq_classe_tit_rec_w, ie_titulo_pagar_w, 
						cd_pf_titulo_pagar_w, cd_cgc_titulo_pagar_w, nr_seq_trans_fin_baixa_w, 
						nr_seq_trans_fin_contab_w, cd_centro_custo_w, 'P' 
					) returning nr_sequencia into nr_seq_evento_movto_w;
					 
					/* Obtem a conta contábil comforme regra OPS - Critérios Contábeis item Regra contábil de eventos financeiros (pagamento produção)*/
 
					cd_conta_contabil_w := pls_obter_conta_contab_eve_fin(nr_seq_evento_movto_w, cd_conta_contabil_w);
					 
					update	pls_evento_movimento 
					set	cd_conta_contabil	= cd_conta_contabil_w 
					where	nr_sequencia		= nr_seq_evento_movto_w;
				end if;
			end if;
			-- volta ao prestador original 
			nr_seq_prestador_w := nr_seq_prestador_orig_w;
			end;
		end loop;
		close C01;
		end;
	end loop;
	close C03;
	 
	-- só vai atráz de valores pendentes em lotes de pagamento caso o cliente não utilize lote de apropriação 
	if (ie_gerar_evento_prox_pag_w = 'N') then 
	 
		-- Se o sistema não está configurado para gerar as apropriações com o evento original 
		if (ie_evento_orig_prox_pagto_w = 'N') then 
		 
			-- Define todos os eventos apropriados como o evento vinculado no o evento 
			nr_seq_evento_w := coalesce(nr_seq_evento_prox_pgto_w, nr_seq_evento_w);
			 
			select 	coalesce(max(ie_consiste_periodo_pag),'S') 
			into STRICT 	ie_consiste_periodo_pag_w 
			from	pls_evento 
			where	nr_sequencia = nr_seq_evento_w;
			 
			open C02;
			loop 
			fetch C02 into 
				vl_regra_w, 
				nr_seq_prestador_w, 
				nr_seq_vencimento_w, 
				nr_seq_lote_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				ie_gerar_w	:= 'S';
				 
				select	max(a.nr_seq_classificacao), 
					max(a.nr_seq_tipo_prestador) 
				into STRICT	nr_seq_classificacao_w, 
					nr_seq_tipo_prestador_w 
				from	pls_prestador a 
				where	nr_sequencia	= nr_seq_prestador_w;
 
				if (ie_complementar_w = 'S') then 
					ie_gerar_w := pls_obter_se_entra_pgto_compl(nr_seq_lote_pag_w, nr_seq_evento_w, nr_seq_prestador_w, nr_seq_tipo_prestador_w, nr_seq_classificacao_w);
				else 
					if	((ie_consiste_periodo_pag_w = 'S') or (nr_seq_lote_pag_w IS NOT NULL AND nr_seq_lote_pag_w::text <> '')) then 
						ie_gerar_w := pls_obter_se_evento_inside_per(nr_seq_periodo_pag_w, nr_seq_evento_w, nr_seq_prestador_w, dt_competencia_w, coalesce(dt_movimento_w,trunc(dt_competencia_w,'dd')));
					end if;
				end if;
				 
				if (ie_gerar_w = 'S') then 
					/* Tratamento para que seja informado um evento de próximo pagamento OPS - Gestão de Operadoras pasta Parâmetros da OPS/Pagamento Produção */
 
					if (coalesce(nr_seq_evento_w::text, '') = '') then 
						ds_erro_w	:= 'Não foi cadastrado o evento para próximo pagamento. Verificar na função OPS - Gestão de Operadoras, pasta Parâmetros ' || chr(13) || 
									' da OPS -> Pagamento Produção.';
						CALL wheb_mensagem_pck.exibir_mensagem_abort(191184,'DS_ERRO=' || ds_erro_w);
					end if;
 
					/* Tratar se deve considerar mesmo período do lote de pagamento do vencimento que gerou este movimento OPS - Prestadores pasta Dados Complementares/Dados para pagamento */
 
					select	coalesce(max(a.ie_periodo_aprop_neg),'N') 
					into STRICT	ie_periodo_aprop_neg_w 
					from	pls_prestador_pagto	a 
					where	a.nr_seq_prestador	= nr_seq_prestador_w;
 
					if (ie_periodo_aprop_neg_w = 'S') then 
						select	max(a.nr_seq_periodo) 
						into STRICT	nr_seq_periodo_w 
						from	pls_lote_pagamento	a 
						where	a.nr_sequencia	= nr_seq_lote_w;
					else 
						nr_seq_periodo_w	:= null;
					end if;
 
					nr_seq_prestador_regra_w	:= null;
					nr_seq_prestador_orig_w		:= nr_seq_prestador_w;
					if (vl_regra_w < 0) then 
						SELECT * FROM pls_obter_crit_receb_prest( nr_seq_prestador_w, clock_timestamp(), nm_usuario_p, nr_seq_regra_w, nr_seq_prestador_regra_w) INTO STRICT nr_seq_regra_w, nr_seq_prestador_regra_w;
 
						if (nr_seq_prestador_regra_w IS NOT NULL AND nr_seq_prestador_regra_w::text <> '') then 
							nr_seq_prestador_w	:= nr_seq_prestador_regra_w;
						end if;
					end if;
 
					select	coalesce(sum(qt_evento),0) 
					into STRICT	qt_apropriacao_w 
					from (SELECT	count(1) qt_evento 
						from	pls_evento_movimento		b, 
							pls_lote_evento			x 
						where	x.nr_sequencia			= b.nr_seq_lote 
						and	b.nr_seq_prestador		= nr_seq_prestador_w 
						and	b.nr_seq_evento			= nr_seq_evento_w 
						and	(x.nr_seq_lote_pgto_apropr IS NOT NULL AND x.nr_seq_lote_pgto_apropr::text <> '') 
						and	coalesce(b.nr_seq_lote_pgto::text, '') = '' 
						and	coalesce(b.ie_cancelamento::text, '') = '' 
						
union all
 
						SELECT	count(1) qt_evento 
						from	pls_evento_movimento		b, 
							pls_lote_evento			x 
						where	x.nr_sequencia			= b.nr_seq_lote 
						and	b.nr_seq_prestador		= nr_seq_prestador_orig_w 
						and	b.nr_seq_evento			= nr_seq_evento_w 
						and	(x.nr_seq_lote_pgto_apropr IS NOT NULL AND x.nr_seq_lote_pgto_apropr::text <> '') 
						and	coalesce(b.nr_seq_lote_pgto::text, '') = '' 
						and	coalesce(b.ie_cancelamento::text, '') = '') alias10;
 
					if (qt_apropriacao_w = 0) then 
						insert into pls_evento_movimento( 
							nr_sequencia, dt_atualizacao, nm_usuario, 
							dt_atualizacao_nrec, nm_usuario_nrec, dt_movimento, 
							nr_seq_evento, nr_seq_lote, nr_seq_prestador, 
							vl_movimento, ie_forma_pagto, nr_seq_periodo, 
							ds_observacao 
						) values ( 
							nextval('pls_evento_movimento_seq'), clock_timestamp(), nm_usuario_p, 
							clock_timestamp(), nm_usuario_p, coalesce(dt_movimento_w,trunc(dt_competencia_w,'dd')), 
							nr_seq_evento_w, nr_seq_lote_evento_p, nr_seq_prestador_w, 
							vl_regra_w, 'P', nr_seq_periodo_w, 
							'Evento gerado de pagamento de valor negativo no lote:' || nr_seq_lote_w 
						) returning nr_sequencia into nr_seq_evento_movto_w;
 
						/* Tratamento para não apropriar duas vezes */
 
						update	pls_pag_prest_vencimento 
						set	ie_proximo_pgto		= 'N', 
							nr_seq_evento_movto	= nr_seq_evento_movto_w 
						where	nr_sequencia		= nr_seq_vencimento_w;
					end if;
 
					/* Obtem a conta contábil comforme regra OPS - Critérios Contábeis item Regra contábil de eventos financeiros (pagamento produção)*/
 
					cd_conta_contabil_w := pls_obter_conta_contab_eve_fin(nr_seq_evento_movto_w, cd_conta_contabil_w);
 
					update	pls_evento_movimento 
					set	cd_conta_contabil	= cd_conta_contabil_w 
					where	nr_sequencia		= nr_seq_evento_movto_w;
				end if;
			end loop;
			close C02;
		elsif (ie_evento_orig_prox_pagto_w = 'S') then /* Apropiar valores que estejam setados como tal */
 
			open C04;
			loop 
			fetch C04 into 
				vl_regra_w, 
				nr_seq_prestador_w, 
				nr_seq_vencimento_w, 
				nr_seq_lote_w, 
				nr_seq_evento_w, 
				nr_seq_venc_valor_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin 
				ie_gerar_w	:= 'S';
 
				if (ie_consiste_periodo_pag_w = 'S') or (nr_seq_lote_pag_w IS NOT NULL AND nr_seq_lote_pag_w::text <> '') then 
					ie_gerar_w := pls_obter_se_evento_inside_per(	nr_seq_periodo_pag_w, nr_seq_evento_w, nr_seq_prestador_w, 
											dt_competencia_w, coalesce(dt_movimento_w,trunc(dt_competencia_w,'dd')));
				end if;
 
				select	max(a.nr_seq_classificacao), 
					max(a.nr_seq_tipo_prestador) 
				into STRICT	nr_seq_classificacao_w, 
					nr_seq_tipo_prestador_w 
				from	pls_prestador a 
				where	nr_sequencia	= nr_seq_prestador_w;
 
				if (ie_gerar_w = 'S') and (ie_complementar_w = 'S') then 
					ie_gerar_w := pls_obter_se_entra_pgto_compl(	nr_seq_lote_pag_w, nr_seq_evento_w, nr_seq_prestador_w, 
											nr_seq_tipo_prestador_w, nr_seq_classificacao_w);
				end if;
 
				if (coalesce(ie_gerar_w, 'N') <> 'N') then 
					/* Tratar se deve considerar mesmo período do lote de pagamento do vencimento que gerou este movimento OPS - Prestadores pasta Dados Complementares/Dados para pagamento */
 
					select	coalesce(max(a.ie_periodo_aprop_neg), 'N') 
					into STRICT	ie_periodo_aprop_neg_w 
					from	pls_prestador_pagto	a 
					where	a.nr_seq_prestador	= nr_seq_prestador_w;
 
					if (ie_periodo_aprop_neg_w = 'S') then 
 
						select	max(a.nr_seq_periodo) 
						into STRICT	nr_seq_periodo_w 
						from	pls_lote_pagamento	a 
						where	a.nr_sequencia	= nr_seq_lote_w;
					else 
						nr_seq_periodo_w	:= null;
					end if;
 
					nr_seq_prestador_regra_w	:= null;
					nr_seq_prestador_orig_w		:= nr_seq_prestador_w;
 
					if (vl_regra_w < 0) then 
						SELECT * FROM pls_obter_crit_receb_prest( nr_seq_prestador_w, clock_timestamp(), nm_usuario_p, nr_seq_regra_w, nr_seq_prestador_regra_w) INTO STRICT nr_seq_regra_w, nr_seq_prestador_regra_w;
 
						if (nr_seq_prestador_regra_w IS NOT NULL AND nr_seq_prestador_regra_w::text <> '') then 
							nr_seq_prestador_w	:= nr_seq_prestador_regra_w;
						end if;
					end if;
 
					select	coalesce(sum(qt_evento),0) 
					into STRICT	qt_apropriacao_w 
					from (SELECT	count(1) qt_evento 
						from	pls_evento_movimento	b, 
							pls_lote_evento		x 
						where	x.nr_sequencia		= b.nr_seq_lote 
						and	b.nr_seq_prestador	= nr_seq_prestador_w 
						and	b.nr_seq_evento		= nr_seq_evento_w 
						and	(x.nr_seq_lote_pgto_apropr IS NOT NULL AND x.nr_seq_lote_pgto_apropr::text <> '') 
						and	coalesce(b.nr_seq_lote_pgto::text, '') = '' 
						and	coalesce(b.ie_cancelamento::text, '') = '' 
						
union all
 
						SELECT	count(1) qt_evento 
						from	pls_evento_movimento	b, 
							pls_lote_evento		x 
						where	x.nr_sequencia		= b.nr_seq_lote 
						and	b.nr_seq_prestador	= nr_seq_prestador_orig_w 
						and	b.nr_seq_evento		= nr_seq_evento_w 
						and	(x.nr_seq_lote_pgto_apropr IS NOT NULL AND x.nr_seq_lote_pgto_apropr::text <> '') 
						and	coalesce(b.nr_seq_lote_pgto::text, '') = '' 
						and	coalesce(b.ie_cancelamento::text, '') = '') alias10;
 
					if (qt_apropriacao_w = 0) then 
 
						insert into pls_evento_movimento( 
							nr_sequencia, dt_atualizacao, nm_usuario, 
							dt_atualizacao_nrec, nm_usuario_nrec, dt_movimento, 
							nr_seq_evento, nr_seq_lote, nr_seq_prestador, 
							vl_movimento, ie_forma_pagto, nr_seq_periodo, 
							ds_observacao 
						) values ( 
							nextval('pls_evento_movimento_seq'), clock_timestamp(), nm_usuario_p, 
							clock_timestamp(), nm_usuario_p, coalesce(dt_movimento_w,trunc(dt_competencia_w,'dd')), 
							nr_seq_evento_w, nr_seq_lote_evento_p, nr_seq_prestador_w, 
							vl_regra_w, 'P', nr_seq_periodo_w, 
							'Evento gerado de pagamento de valor negativo no lote:' || nr_seq_lote_w 
						) returning nr_sequencia into nr_seq_evento_movto_w;
 
						/* Obtem a conta contábil comforme regra OPS - Critérios Contábeis item Regra contábil de eventos financeiros (pagamento produção)*/
 
						cd_conta_contabil_w := pls_obter_conta_contab_eve_fin(nr_seq_evento_movto_w, cd_conta_contabil_w);
 
						update	pls_evento_movimento 
						set	cd_conta_contabil	= cd_conta_contabil_w 
						where	nr_sequencia		= nr_seq_evento_movto_w;
 
						update	pls_pag_prest_venc_valor 
						set	nr_seq_evento_movto	= nr_seq_evento_movto_w 
						where	nr_sequencia		= nr_seq_venc_valor_w 
						and	coalesce(nr_seq_evento_movto::text, '') = '';
					end if;
				end if;
				end;
			end loop;
			close C04;
 
			/* Setar como apropriado se todos os valores tiverem gerado movimentação */
 
			open C05;
			loop 
			fetch C05 into 
				nr_seq_vencimento_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin 
				select	count(1), 
					count(a.nr_seq_evento_movto) 
				into STRICT	qt_total_aprop_w, 
					qt_aprop_w 
				from	pls_pag_prest_venc_valor	a 
				where	a.nr_seq_vencimento	= nr_seq_vencimento_w 
				and	a.ie_tipo_valor		= 'PP';
 
				if (qt_total_aprop_w = qt_aprop_w) then 
					update	pls_pag_prest_vencimento 
					set	ie_proximo_pgto	= 'N' 
					where	nr_sequencia	= nr_seq_vencimento_w;
				end if;
				end;
			end loop;
			close C05;
		end if;
	end if;
elsif (ie_opcao_p = 'D') then 
 
	CALL pls_desfazer_lanc_programados(nr_seq_lote_evento_p, null, nm_usuario_p, ie_commit_p);
	 
elsif (ie_opcao_p = 'DC') then 
 
	select	max(b.nr_seq_lote_pgto) 
	into STRICT	nr_seq_lote_pgto_w 
	from	pls_lote_evento a, 
		pls_evento_movimento b 
	where	a.nr_sequencia = b.nr_seq_lote 
	and	a.nr_sequencia	= nr_seq_lote_evento_p 
	and	coalesce(a.nr_seq_franq_pag::text, '') = '' 
	and	coalesce(b.ie_cancelamento::text, '') = '';
 
	if (nr_seq_lote_pgto_w IS NOT NULL AND nr_seq_lote_pgto_w::text <> '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(191185,'NR_SEQ_LOTE_PGTO=' || nr_seq_lote_pgto_w);
	end if;
 
	update	pls_pag_prest_vencimento	a 
	set	a.nr_seq_evento_movto		 = NULL, 
		a.ie_proximo_pgto		= 'S' 
	where	exists (SELECT	1 
			from	pls_evento_movimento	x 
			where	a.nr_seq_evento_movto	= x.nr_sequencia 
			and	x.nr_seq_lote		= nr_seq_lote_evento_p);
 
	update	pls_pag_prest_vencimento	a 
	set	a.nr_seq_evento_movto		 = NULL, 
		a.ie_proximo_pgto		= 'S' 
	where	exists (SELECT	1 
			from	pls_evento_movimento		x, 
				pls_pag_prest_venc_valor	y 
			where	x.nr_sequencia			= y.nr_seq_evento_movto 
			and	a.nr_sequencia			= y.nr_seq_vencimento 
			and	x.nr_seq_lote			= nr_seq_lote_evento_p);
 
	update	pls_pag_prest_venc_valor	a 
	set	a.nr_seq_evento_movto		 = NULL 
	where	exists (SELECT	1 
			from	pls_evento_movimento	x 
			where	a.nr_seq_evento_movto	= x.nr_sequencia 
			and	x.nr_seq_lote		= nr_seq_lote_evento_p);
 
	delete	FROM pls_evento_movimento 
	where	nr_seq_lote	= nr_seq_lote_evento_p;
end if;
 
if (coalesce(ie_commit_p, 'S') = 'S') then 
	commit;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_evento_movto_fixo ( nr_seq_lote_evento_p pls_lote_evento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_opcao_p text, ie_commit_p text) FROM PUBLIC;

