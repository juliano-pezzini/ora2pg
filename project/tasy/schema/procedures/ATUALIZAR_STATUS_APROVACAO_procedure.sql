-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function atualizar_status_aprovacao as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE atualizar_status_aprovacao ( nr_seq_carta_p bigint, ie_status_p text, nr_sequencia_p bigint default 0, nm_usuario_p text default null) AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'CALL atualizar_status_aprovacao_atx ( ' || quote_nullable(nr_seq_carta_p) || ',' || quote_nullable(ie_status_p) || ',' || quote_nullable(nr_sequencia_p) || ',' || quote_nullable(nm_usuario_p) || ' )';
	PERFORM * FROM dblink(v_conn_str, v_query) AS p (ret boolean);

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE atualizar_status_aprovacao_atx ( nr_seq_carta_p bigint, ie_status_p text, nr_sequencia_p bigint default 0, nm_usuario_p text default null) AS $body$
DECLARE
cd_pessoa_usuario_w             		carta_medica.cd_pessoa_fisica%type;
nr_seq_regra_w					wl_regra_item.nr_sequencia%type;
nr_seq_tipo_adm_fat_atd_w			atendimento_paciente.nr_seq_tipo_admissao_fat%type;
nr_seq_episodio_w				atendimento_paciente.nr_seq_episodio%type;
nr_atendimento_w				carta_medica.nr_atendimento%type;
cd_pessoa_fisica_w				carta_medica.cd_pessoa_fisica%type;
nr_seq_carta_mae_w				carta_medica.nr_sequencia%type;
ie_aprovacao_dupla_w   				varchar(2) := 'S';



C02 CURSOR FOR
	SELECT	coalesce(b.qt_tempo_normal, 0) qt_tempo_normal_w,
			coalesce(b.nr_sequencia, 0) nr_sequencia_w
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = 'ML'
								and		x.ie_situacao = 'A')
	and		coalesce(b.ie_tipo_pend_carta,'A') = 'A';

C03 CURSOR FOR
    SELECT  a.nm_usuario_resp nm_usuario
    from    PARTICIPANTE_CARTA_MEDICA a
    where   NR_SEQ_CARTA_MAE = nr_seq_carta_p
	and     a.IE_DEVE_ASSINAR = 'S'
    and     nr_seq_assinatura =   (   SELECT  min(nr_seq_assinatura)
                                    from    PARTICIPANTE_CARTA_MEDICA b
                                    where   b.NR_SEQ_CARTA_MAE = a.NR_SEQ_CARTA
                                    and     b.IE_DEVE_ASSINAR = 'S'
									and		coalesce(b.DT_ASSINATURA::text, '') = '');

C06 CURSOR FOR
	SELECT  b.cd_medico, coalesce(b.ie_aprovacao_dupla, 'S') ie_aprovacao_dupla
	from    MEDICO_CARTA_MEDICA a,
			MEDICO_CARTA_MEDICA_PERMIT b
	where   a.nr_sequencia = b.nr_seq_medico_carta_medica
	and     a.cd_medico = cd_pessoa_usuario_w
	and		b.ie_situacao = 'A'
	and 	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
	and    	(((dt_inicio IS NOT NULL AND dt_inicio::text <> '') and (dt_fim IS NOT NULL AND dt_fim::text <> '') and clock_timestamp() between dt_inicio and dt_fim) or coalesce(dt_inicio::text, '') = '' and coalesce(dt_fim::text, '') = '');
BEGIN
	select	max(nr_atendimento),
			max(cd_pessoa_fisica)
	into STRICT	nr_atendimento_w,
			cd_pessoa_fisica_w
	from	carta_medica
	where	nr_sequencia = nr_seq_carta_p;

	if (nr_seq_carta_p IS NOT NULL AND nr_seq_carta_p::text <> '' AND ie_status_p IS NOT NULL AND ie_status_p::text <> '') then
		update	carta_medica
		set	IE_STATUS_APROVACAO = ie_status_p
		where	nr_seq_carta_mae = nr_seq_carta_p
		and	nr_sequencia <> nr_sequencia_p;

        if  (coalesce((pkg_i18n.get_user_locale()), 'pt_BR') = 'de_AT' 
        and (ie_status_p = 'AP' or ie_status_p = 'RE')) then
            CALL pepo_atual_st_desc_cirurgia(nr_seq_carta_p, ie_status_p, nm_usuario_p);
        end if;
		
        if (ie_status_p = 'RE') then
			select	max(a.nr_seq_regra)
			into STRICT	nr_seq_regra_w
			from	wl_worklist a,
					wl_item b,
					wl_regra_item c
			where	a.nr_seq_carta_mae = nr_seq_carta_p
			and		b.nr_sequencia = a.nr_seq_item
			and		c.nr_sequencia = a.nr_seq_regra
			and		coalesce(a.dt_final_real::text, '') = ''
			and		b.cd_categoria = 'ML'
			and		c.ie_tipo_pend_carta = 'A'
			and		b.ie_situacao = 'A'
			and		c.ie_situacao = 'A';
			CALL wl_gerar_finalizar_tarefa( 	'ML',
										'F',
										null,
										null,
										wheb_usuario_pck.get_nm_usuario,
										null,
										'S',
										null,
										null,
										null,
										null,
										null,
										nr_seq_carta_p,
										null,
										null,
										null,
										nr_seq_regra_w,
										null,
										null,
										null,
										null,
										null,
										null,
										null,
										clock_timestamp(),
										null,
										null,
										null);
			select	max(nr_seq_tipo_admissao_fat),
					max(nr_seq_episodio)
			into STRICT	nr_seq_tipo_adm_fat_atd_w,
					nr_seq_episodio_w
			from	atendimento_paciente
			where	nr_atendimento = nr_atendimento_w;
			for c02_w in C02 loop
				if (c02_w.qt_tempo_normal_w > 0 and obter_se_regra_geracao(nr_seq_regra_w,nr_seq_episodio_w,nr_seq_tipo_adm_fat_atd_w) = 'S') then
					for c03_w in C03 loop
						begin
							cd_pessoa_usuario_w := OBTER_PESSOA_FISICA_USUARIO(c03_w.nm_usuario, 'C');
							for c06_w in C06 loop
								if (c06_w.ie_aprovacao_dupla <> 'S') then
									ie_aprovacao_dupla_w := c06_w.ie_aprovacao_dupla;
								end if;

								CALL wl_gerar_finalizar_tarefa('ML','I',
								nr_atendimento_w,
								cd_pessoa_fisica_w,
								wheb_usuario_pck.get_nm_usuario,(clock_timestamp()+(c02_w.qt_tempo_normal_w/24)),'S',
								null,null,null,null,null,nr_seq_carta_p,null,null,null,nr_seq_regra_w,null,null,null,
								null,null,null,null,clock_timestamp(),nr_seq_episodio_w,null,c06_w.cd_medico);
							end loop;
							if (ie_aprovacao_dupla_w = 'S') then
								CALL wl_gerar_finalizar_tarefa('ML','I',
									nr_atendimento_w,
									cd_pessoa_fisica_w,
									wheb_usuario_pck.get_nm_usuario,(clock_timestamp()+(c02_w.qt_tempo_normal_w/24)),'S',
									null,null,null,null,null,nr_seq_carta_p,null,null,null,nr_seq_regra_w,null,null,null,
									null,null,null,null,clock_timestamp(),nr_seq_episodio_w,null,cd_pessoa_usuario_w);
							end if;
							CALL atualizar_status_aprovacao(nr_seq_carta_mae_w, 'RE', nr_sequencia_p, nm_usuario_p);
						end;
					end loop;
				end if;
			end loop;
		end if;
	end if;
if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
	commit;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_status_aprovacao ( nr_seq_carta_p bigint, ie_status_p text, nr_sequencia_p bigint default 0, nm_usuario_p text default null) FROM PUBLIC; -- REVOKE ALL ON PROCEDURE atualizar_status_aprovacao_atx ( nr_seq_carta_p bigint, ie_status_p text, nr_sequencia_p bigint default 0, nm_usuario_p text default null) FROM PUBLIC;

