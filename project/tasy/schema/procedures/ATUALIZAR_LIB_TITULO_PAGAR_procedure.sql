-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_lib_titulo_pagar ( nr_titulo_p bigint, nm_usuario_p text, ds_resultado_p INOUT text) AS $body$
DECLARE


ie_liberar_w		varchar(1);
ie_att_libs_w		varchar(1);
ds_resultado_w		varchar(1);
cd_estabelecimento_w	smallint;
nr_seq_regra_w		bigint;
nm_usuario_lib_w	varchar(255);
vl_titulo_w		double precision;
ie_nivel_w		bigint;
cd_operacao_nf_w	smallint;
nr_seq_nota_fiscal_w	bigint;
cd_pessoa_fisica_w	varchar(10);
cd_cgc_w		varchar(14);
cd_tipo_pessoa_w	smallint;
vl_nota_fiscal_w	double precision;
dt_emissao_w		timestamp;
cd_perfil_w		integer;
ie_tipo_titulo_w	varchar(2);
nr_seq_classe_w		bigint;
ie_origem_titulo_w	varchar(10);
count_lib_w		bigint;
nr_ordem_compra_w	bigint;
nm_usuario_w				titulo_pagar.nm_usuario%type;
nr_seq_proj_rec_w			titulo_pagar.nr_seq_proj_rec%type;

c01 CURSOR FOR
SELECT	a.nr_sequencia
from	regra_lib_tit_pagar a
where (coalesce(a.ie_ordem_compra, 'N') = 'N' or (nr_ordem_compra_w IS NOT NULL AND nr_ordem_compra_w::text <> ''))
and	cd_estabelecimento	= cd_estabelecimento_w
and	dt_emissao_w	between trunc(coalesce(a.dt_inicio_vigencia,dt_emissao_w)) and fim_dia(coalesce(a.dt_fim_vigencia,dt_emissao_w))
and	coalesce(a.cd_cgc,coalesce(cd_cgc_w,'0')) = coalesce(cd_cgc_w,0)
and	coalesce(a.cd_tipo_pj,coalesce(cd_tipo_pessoa_w,0)) = coalesce(cd_tipo_pessoa_w,0)
and (coalesce(a.ie_tipo_pessoa,'A') = 'A' or (a.ie_tipo_pessoa = 'F' and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '')) or (a.ie_tipo_pessoa = 'J' and (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '')))
and	((coalesce(a.ie_valor_nf,'N') = 'N' and vl_titulo_w between coalesce(a.vl_minimo,vl_titulo_w) and coalesce(a.vl_maximo,vl_titulo_w)) or (a.ie_valor_nf = 'S' and coalesce(vl_nota_fiscal_w,vl_titulo_w) between coalesce(a.vl_minimo,coalesce(vl_nota_fiscal_w,vl_titulo_w)) and coalesce(a.vl_maximo,coalesce(vl_nota_fiscal_w,vl_titulo_w))))
and	coalesce(a.ie_liberar,'N')	= 'N'
and	coalesce(cd_operacao_nf,coalesce(cd_operacao_nf_w,0))		= coalesce(cd_operacao_nf_w,0)
and	coalesce(a.ie_tipo_titulo, coalesce(ie_tipo_titulo_w,'X'))	= coalesce(ie_tipo_titulo_w,'X')
and	coalesce(a.nr_seq_classe, coalesce(nr_seq_classe_w, 0)) 		= coalesce(nr_seq_classe_w, 0)
and	coalesce(a.ie_origem_titulo, coalesce(ie_origem_titulo_w, 0)) 	= coalesce(ie_origem_titulo_w, 0)
and	( (coalesce(a.ie_exige_nota_fiscal,'N') = 'N') or
      ( (coalesce(a.ie_exige_nota_fiscal,'N') = 'S') and (nr_seq_nota_fiscal_w IS NOT NULL AND nr_seq_nota_fiscal_w::text <> '') ) 
	);	


c02 CURSOR FOR
SELECT	a.nm_usuario_lib,
	a.ie_nivel
from	regra_lib_tit_usuario a
where	(a.ie_nivel IS NOT NULL AND a.ie_nivel::text <> '')
and	not exists (SELECT	1
	from	conta_pagar_lib x
	where	coalesce(x.ie_nivel,0)	= coalesce(a.ie_nivel,0)
	and	x.nm_usuario_lib		= a.nm_usuario_lib
	and	x.nr_titulo				= nr_titulo_p)
and	a.nr_seq_regra				= nr_seq_regra_w
and	(a.nm_usuario_lib IS NOT NULL AND a.nm_usuario_lib::text <> '');

c03 CURSOR FOR
SELECT	a.cd_perfil,
	a.ie_nivel
from	regra_lib_tit_perfil a
where	(a.ie_nivel IS NOT NULL AND a.ie_nivel::text <> '')
and	not exists (SELECT	1
	from	conta_pagar_lib x
	where	coalesce(x.ie_nivel,0)	= coalesce(a.ie_nivel,0)
	and	x.cd_perfil				= a.cd_perfil
	and	x.nr_titulo				= nr_titulo_p)
and	(a.cd_perfil IS NOT NULL AND a.cd_perfil::text <> '')
and	a.nr_seq_regra				= nr_seq_regra_w;


BEGIN


/*Excluir os usuarios para liberacao ja gerados para o titulo que ainda nao foram liberados*/

select	count(*)
into STRICT	count_lib_w
from	conta_pagar_lib
where	nr_titulo	= nr_titulo_p
and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

if (count_lib_w = 0) then

	delete	from conta_pagar_lib
	where	nr_titulo	= nr_titulo_p;

	
	select 	max(cd_cgc),
			max(vl_titulo),
			max(cd_estabelecimento),
			max(nm_usuario),
			max(nr_seq_proj_rec),
			max(ie_tipo_titulo),
			max(nr_seq_classe),
			max(ie_origem_titulo),
			max(dt_emissao),
			max(nr_seq_nota_fiscal)
	into STRICT	cd_cgc_w,
			vl_titulo_w,
			cd_estabelecimento_w,
			nm_usuario_w,
			nr_seq_proj_rec_w,
			ie_tipo_titulo_w,
			nr_seq_classe_w,
			ie_origem_titulo_w,
			dt_emissao_w,
			nr_seq_nota_fiscal_w
	from 	titulo_pagar
	where 	nr_titulo = nr_titulo_p;

	SELECT * FROM obter_regra_lib_tit_pagar(nr_seq_nota_fiscal_w, vl_titulo_w, cd_cgc_w, cd_estabelecimento_w, nm_usuario_w, nr_seq_regra_w, ie_liberar_w, ds_resultado_w, dt_emissao_w, nr_seq_proj_rec_w, ie_tipo_titulo_w, nr_seq_classe_w, ie_origem_titulo_w) INTO STRICT nr_seq_regra_w, ie_liberar_w, ds_resultado_w;


	if (nr_seq_nota_fiscal_w IS NOT NULL AND nr_seq_nota_fiscal_w::text <> '') then
		select	max(a.cd_operacao_nf),
			max(a.vl_total_nota),
			max(a.nr_ordem_compra)
		into STRICT	cd_operacao_nf_w,
			vl_nota_fiscal_w,
			nr_ordem_compra_w
		from	nota_fiscal a
		where	a.nr_sequencia	= nr_seq_nota_fiscal_w;
	end if;

		open c02;
		loop
		fetch c02 into
			nm_usuario_lib_w,
			ie_nivel_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */

			insert into conta_pagar_lib(
				dt_atualizacao,
				dt_atualizacao_nrec,
				dt_liberacao,
				ie_nivel,
				nm_usuario,
				nm_usuario_lib,
				nm_usuario_nrec,
				nr_seq_regra_tit_pagar,
				nr_titulo,
				nr_sequencia)
			values (clock_timestamp(),
				clock_timestamp(),
				null,
				ie_nivel_w,
				nm_usuario_p,
				nm_usuario_lib_w,
				nm_usuario_p,
				nr_seq_regra_w,
				nr_titulo_p,
				nextval('conta_pagar_lib_seq'));

		end loop;
		close c02;

		open	c03;
		loop
		fetch	c03 into
			cd_perfil_w,
			ie_nivel_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */

			insert into conta_pagar_lib(
				cd_perfil,
				dt_atualizacao,
				dt_atualizacao_nrec,
				dt_liberacao,
				ie_nivel,
				nm_usuario,
				nm_usuario_nrec,
				nr_seq_regra_tit_pagar,
				nr_titulo,
				nr_sequencia)
			values (cd_perfil_w,
				clock_timestamp(),
				clock_timestamp(),
				null,
				ie_nivel_w,
				nm_usuario_p,
				nm_usuario_p,
				nr_seq_regra_w,
				nr_titulo_p,
				nextval('conta_pagar_lib_seq'));

		end	loop;
		close	c03;

			
			ie_att_libs_w := obter_param_usuario(851, 214, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_att_libs_w);
			ds_resultado_p := null;
			
	if (ds_resultado_w	= 'S') and (ie_liberar_w = 'S') then
		if (ie_att_libs_w) = 'C' then
			ds_resultado_p := 'S';
		else
			update 	titulo_pagar
			set 	dt_liberacao 	= clock_timestamp(),
				nm_usuario_lib 	= nm_usuario_w
			where 	nr_titulo 	= nr_titulo_p;
			commit;
		end if;
	else
		if (ie_att_libs_w) = 'C' then
			ds_resultado_p := 'N';
		else    
			update 	titulo_pagar
			set 	dt_liberacao 	 = NULL,
				nm_usuario_lib 	 = NULL
			where 	nr_titulo 	= nr_titulo_p;
			commit;
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_lib_titulo_pagar ( nr_titulo_p bigint, nm_usuario_p text, ds_resultado_p INOUT text) FROM PUBLIC;

