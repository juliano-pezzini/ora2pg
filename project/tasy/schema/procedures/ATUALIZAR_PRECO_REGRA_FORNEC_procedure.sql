-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_preco_regra_fornec ( nr_cot_compra_p bigint, cd_cgc_fornecedor_p text, nm_usuario_p text) AS $body$
DECLARE

 
nr_sequencia_w			cot_compra_forn_item.nr_sequencia%type;
cd_material_w			material.cd_material%type;
qt_material_w			cot_compra_forn_item.qt_material%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
vl_unitario_material_w		cot_compra_forn_item.vl_unitario_material%type;
nr_item_cot_compra_w		cot_compra_item.nr_item_cot_compra%type;
nr_seq_regra_preco_w		preco_pj.nr_sequencia%type;
vl_total_w			cot_compra_forn_item.vl_unitario_material%type;
cd_tributo_w			tributo.cd_tributo%type;
vl_tributo_w			preco_pj_tributo.vl_tributo%type;
pr_tributo_w			preco_pj_tributo.pr_tributo%type;
ie_trib_regra_preco_pj_w	parametro_compras.ie_trib_regra_preco_pj%type;
qt_registros_w			bigint;

c01 CURSOR FOR 
SELECT	b.nr_sequencia, 
	b.cd_material, 
	b.nr_item_cot_compra, 
	b.qt_material 
from	cot_compra_item a, 
	cot_compra_forn_item b 
where	a.nr_cot_compra		= b.nr_cot_compra 
and	a.nr_item_cot_compra	= b.nr_item_cot_compra 
and	b.nr_cot_compra		= nr_cot_compra_p 
and	b.cd_cgc_fornecedor	= cd_cgc_fornecedor_p 
and	b.vl_unitario_material	= 0 
and	coalesce(a.ie_situacao,'A')	= 'A';

c02 CURSOR FOR 
SELECT	b.cd_tributo, 
	b.vl_tributo, 
	b.pr_tributo 
from	preco_pj_tributo b 
where	b.nr_seq_regra = nr_seq_regra_preco_w 
and	ie_trib_regra_preco_pj_w = 'S';


BEGIN 
 
select	cd_estabelecimento 
into STRICT	cd_estabelecimento_w 
from	cot_compra 
where	nr_cot_compra = nr_cot_compra_p;
 
select	coalesce(max(ie_trib_regra_preco_pj),'N') 
into STRICT	ie_trib_regra_preco_pj_w 
from	parametro_compras 
where	cd_estabelecimento = cd_estabelecimento_w;
 
open	c01;
loop 
fetch	c01 into 
	nr_sequencia_w, 
	cd_material_w, 
	nr_item_cot_compra_w, 
	qt_material_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
	 
	select	coalesce(obter_preco_vigente_mat_forn(cd_cgc_fornecedor_p,cd_material_w,cd_estabelecimento_w),0) 
	into STRICT	vl_unitario_material_w 
	;
	 
	if (vl_unitario_material_w = 0) then 
		 
		select	cd_material 
		into STRICT	cd_material_w 
		from	cot_compra_item 
		where	nr_cot_compra = nr_cot_compra_p 
		and	nr_item_cot_compra = nr_item_cot_compra_w;
		 
		select	coalesce(obter_preco_vigente_mat_forn(cd_cgc_fornecedor_p,cd_material_w,cd_estabelecimento_w),0) 
		into STRICT	vl_unitario_material_w 
		;
	end if;
	 
	select	obter_seq_preco_mat_forn(cd_cgc_fornecedor_p,cd_material_w,cd_estabelecimento_w) 
	into STRICT	nr_seq_regra_preco_w 
	;
	 
	update	cot_compra_forn_item 
	set	vl_unitario_material	= vl_unitario_material_w, 
		nr_seq_preco_pj		= nr_seq_regra_preco_w, 
		nm_usuario		= nm_usuario_p, 
		dt_atualizacao		= clock_timestamp() 
	where	nr_sequencia		= nr_sequencia_w;
	 
	vl_total_w := qt_material_w * coalesce(vl_unitario_material_w,0);
	 
	open C02;
	loop 
	fetch C02 into	 
		cd_tributo_w, 
		vl_tributo_w, 
		pr_tributo_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		 
		if (vl_tributo_w > 0) then 
			pr_tributo_w	:= dividir(vl_tributo_w * 100, vl_total_w);
		else 
			vl_tributo_w	:= dividir((vl_total_w * pr_tributo_w), 100);
		end if;
		 
		select	count(*) 
		into STRICT	qt_registros_w 
		from	cot_compra_forn_item_tr 
		where	nr_seq_cot_item_forn = nr_sequencia_w 
		and	cd_tributo = cd_tributo_w;
		 
		if (qt_registros_w = 0) then 
 
			insert into cot_compra_forn_item_tr( 
				nr_cot_compra, 
				nr_item_cot_compra, 
				cd_cgc_fornecedor, 
				cd_tributo, 
				pr_tributo, 
				vl_tributo, 
				dt_atualizacao, 
				nm_usuario, 
				ds_observacao, 
				nr_sequencia, 
				nr_seq_cot_item_forn, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec) 
			values (	nr_cot_compra_p, 
				nr_item_cot_compra_w, 
				cd_cgc_fornecedor_p, 
				cd_tributo_w, 
				pr_tributo_w, 
				vl_tributo_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				null, 
				nextval('cot_compra_forn_item_tr_seq'), 
				nr_sequencia_w, 
				clock_timestamp(), 
				nm_usuario_p);
		else 
			update	cot_compra_forn_item_tr 
			set	pr_tributo		= pr_tributo_w, 
				vl_tributo		= vl_tributo_w, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_seq_cot_item_forn	= nr_sequencia_w 
			and	cd_tributo		= cd_tributo_w;
		end if;
		 
		end;
	end loop;
	close C02;	
	end;
end loop;
close c01;
 
 
CALL gerar_hist_cotacao_sem_commit( 
	nr_cot_compra_p, 
	Wheb_mensagem_pck.get_Texto(297639), 
	Wheb_mensagem_pck.get_Texto(297641), 
	'S', 
	nm_usuario_p);
 
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_preco_regra_fornec ( nr_cot_compra_p bigint, cd_cgc_fornecedor_p text, nm_usuario_p text) FROM PUBLIC;

