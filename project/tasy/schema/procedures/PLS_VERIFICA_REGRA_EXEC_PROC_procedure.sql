-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_verifica_regra_exec_proc ( cd_processo_sel_p bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Verifica se usuario tem permissão para executar processos de contas médicas
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ x] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Alterações:
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qtd_regra_w		bigint;
nr_valida_proc_w	bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_exec_cta_proc a
	where exists (	SELECT 	1
			from	pls_membro_exec_cta_proc b
			where	nm_usuario_exec = nm_usuario_p
			and	b.nr_seq_regra 	= a.nr_sequencia);

BEGIN
--VERIFICA SE POSSUI REGRA CADASTRADA
select	count(1)
into STRICT	qtd_regra_w
from	pls_regra_exec_cta_proc;

--CASO POSSUA REGRA CADASTRADA, VERIFICA, POR PROCESSO, SE USUARIO TEM PERMISSÃO
if (coalesce(qtd_regra_w,0) > 0) then
	for r_c01_w in C01 loop
		begin
			if (cd_processo_sel_p = 2) then --CONSISTIR
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia = r_c01_w.nr_sequencia
				and	ie_consistir = 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 3) then --VALORIZAÇÃO
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 	= r_c01_w.nr_sequencia
				and	ie_valorizacao 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 4) then --GLOSAS
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 	= r_c01_w.nr_sequencia
				and	ie_glosas 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 5) then --OCORRÊNCIAS ANTIGAS
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c01_w.nr_sequencia
				and	ie_ocorrencia_antiga 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 6) then --OCORRÊNCIAS COMBINADAS
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c01_w.nr_sequencia
				and	ie_ocorrencia_comb 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 7) then --LIBERAÇÃO AUTOMATICA
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c01_w.nr_sequencia
				and	ie_lib_automatica 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 8) then --PAGAMENTOS E COBRANÇAS
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c01_w.nr_sequencia
				and	ie_pagamento_cobranca 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 9) then --GERAÇÃO DE ANÁLISE
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 		= r_c01_w.nr_sequencia
				and	ie_geracao_analise 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 10) then --PÓS-ESTABELECIDO
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia = r_c01_w.nr_sequencia
				and	ie_pos_estab = 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			elsif (cd_processo_sel_p = 11) then --LIBERAÇÃO AUTOMATICA DE ANÁLISE
				select	count(1)
				into STRICT 	nr_valida_proc_w
				from	pls_regra_exec_cta_proc
				where	nr_sequencia 	= r_c01_w.nr_sequencia
				and	ie_lib_analise 	= 'S'
				and	exists (	SELECT 1
						from	pls_membro_exec_cta_proc
						where	nm_usuario_exec = nm_usuario_p);

			end if;
			if (coalesce(nr_valida_proc_w,0) > 0) then
				exit;
			end if;
		end;
	end loop;
	if (coalesce(nr_valida_proc_w,0) = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(355423, 'CD_PROCESSO=' || cd_processo_sel_p);
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_verifica_regra_exec_proc ( cd_processo_sel_p bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

