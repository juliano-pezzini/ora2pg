-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hem_inserir_procedimento_pepo (nr_seq_cirurgia_p bigint, nr_seq_proc_interno_p bigint, nm_usuario_p text, nr_seq_proc_p INOUT bigint) AS $body$
DECLARE

ie_classif_w		varchar(15);
ie_param_sinc_w		varchar(2);
cd_pessoa_fisica_w	varchar(255);
ie_classif_proc_w	varchar(15);
nr_seq_procedimento_w	bigint;
nr_seq_proc_w		bigint;
nr_atendimento_w	bigint;
ie_reg_acesso_w     	bigint;
dt_inicio_real_cir_w	timestamp;


BEGIN
if (coalesce(nr_seq_cirurgia_p,0) > 0 ) then



	ie_param_sinc_w := coalesce(obter_valor_param_usuario(868, 4, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo), 'N');
	-- verifica se o procedimento (interno) existe na regra de procedimentos da hemodinâmica
	select	max(b.nr_seq_proc),
		max(a.ie_classif)
	into STRICT	nr_seq_procedimento_w,
		ie_classif_w
	from	hem_procedimento a,
		hem_proc_interno b
	where	b.nr_seq_proc_interno = nr_seq_proc_interno_p
	and 	a.nr_sequencia = b.nr_seq_proc;

	if (coalesce(nr_seq_proc_interno_p::text, '') = '') then
		select	max(c.nr_seq_proc),
			max(b.ie_classif)
		into STRICT	nr_seq_procedimento_w,
			ie_classif_w
		from	cirurgia a,
			hem_procedimento b,
			hem_proc_interno c
		where	nr_cirurgia = nr_seq_cirurgia_p
		and 	b.nr_Sequencia = c.nr_seq_proc
		and	a.nr_seq_proc_interno = c.nr_seq_proc_interno;
	end if;

	if (coalesce(nr_seq_procedimento_w,0) > 0) then

		/*Verifica se este procedimento já existe para esta cirurgia*/

		select 	max(a.nr_sequencia)
		into STRICT	nr_seq_proc_w
		from 	hem_proc a
		where 	a.nr_seq_cirurgia 	= nr_seq_cirurgia_p
		and	a.nr_seq_procedimento	= nr_seq_procedimento_w
		and 	exists (SELECT	1
				from	cirurgia x,
					hem_procedimento y,
					hem_proc_interno z
				where	x.nr_cirurgia = a.nr_seq_cirurgia
				and 	y.nr_sequencia = z.nr_seq_proc
				and	x.nr_seq_proc_interno = z.nr_seq_proc_interno
				and	z.nr_seq_proc = a.nr_seq_procedimento
				and	PKG_DATE_UTILS.START_OF(coalesce(x.dt_inicio_real,clock_timestamp()),'DAY') = PKG_DATE_UTILS.START_OF(a.dt_procedimento,'DAY')
				and	x.nr_atendimento = a.nr_atendimento
				and	y.ie_classif = a.ie_classif);

		if (coalesce(nr_seq_proc_w,0) = 0) then

			select	nextval('hem_proc_seq')
			into STRICT	nr_seq_proc_w
			;

			insert into hem_proc(
					nr_sequencia,
					cd_estabelecimento,
					nr_procedimento,
					cd_pessoa_fisica,
					dt_atualizacao,
					nm_usuario,
					nr_atendimento,
					dt_procedimento,
					cd_medico_resp,
					ie_classif,
					cd_setor_exec,
					nr_seq_procedimento,
					nr_seq_cirurgia,
					ie_tipo_anestesia,
					dt_entrada,
					ie_primaria
				)(
					SELECT	nr_seq_proc_w,
						a.cd_estabelecimento,
						nr_seq_proc_w,
						a.cd_pessoa_fisica,
						clock_timestamp(),
						nm_usuario_p,
						a.nr_atendimento,
						coalesce(DT_INICIO_REAL,clock_timestamp()),
						coalesce(b.cd_medico_referido,b.cd_medico_resp),
						ie_classif_w,
						wheb_usuario_pck.get_cd_setor_atendimento,
						c.nr_seq_proc,
						nr_seq_cirurgia_p,
						a.cd_tipo_anestesia,
						b.dt_entrada,
						'N'
					from	cirurgia a,
						atendimento_paciente b,
						hem_proc_interno c,
						hem_procedimento d
					where	a.nr_cirurgia		= nr_seq_cirurgia_p
					and	a.nr_atendimento	= b.nr_atendimento
					and c.nr_Seq_proc = d.nr_sequencia
					and	((c.nr_seq_proc_interno	= a.nr_seq_proc_interno) or ( c.nr_seq_proc_interno in (	SELECT	d.nr_seq_proc_interno
										from	prescr_procedimento d
										where	a.nr_prescricao	= d.nr_prescricao)))
					and	c.nr_seq_proc_interno	= coalesce(nr_seq_proc_interno_p,c.nr_seq_proc_interno)
					and	coalesce(a.dt_fim_cirurgia::text, '') = ''
					and	coalesce(d.ie_situacao,'A') = 'A'
					 LIMIT 1);

			 CALL hem_insert_hem_laudo(nr_seq_proc_w, nm_usuario_p);

			 select count(*) into STRICT ie_reg_acesso_w from hem_acesso where nr_seq_cirurgia = nr_seq_cirurgia_p;
			 if (ie_reg_acesso_w > 0) then
				update hem_acesso set
				nr_seq_proc = nr_seq_proc_w
				where nr_seq_cirurgia = nr_seq_cirurgia_p;
			 else
				CALL Inserir_hem_acesso(nr_seq_proc_w, nm_usuario_p, obter_estabelecimento_ativo);
			 end if;

			if (ie_param_sinc_w = 'S') then
				select	cd_pessoa_fisica,
						nr_atendimento,
						hem_obter_classif_proced(nr_seq_procedimento)
				into STRICT	cd_pessoa_fisica_w,
						nr_atendimento_w,
						ie_classif_proc_w
				from	hem_proc
				where	nr_sequencia = nr_seq_proc_w;
				if (ie_classif_proc_w = 'CAT') then
					CALL Hem_sincronizar_manometria('L', nr_atendimento_w, nr_seq_proc_w, nm_usuario_p, cd_pessoa_fisica_w, 0, '');
				elsif (ie_classif_proc_w = 'COD') then
					CALL Hem_sincronizar_manometria('C', nr_atendimento_w, nr_seq_proc_w, nm_usuario_p, cd_pessoa_fisica_w, 0, '');
				end if;
			end if;
		else
			select	coalesce(dt_inicio_real, clock_timestamp())
			into STRICT	dt_inicio_real_cir_w
			from	cirurgia
			where	nr_cirurgia = nr_seq_cirurgia_p;

			update	hem_proc
			set	nr_seq_cirurgia = nr_seq_cirurgia_p,
				dt_procedimento = dt_inicio_real_cir_w,
				dt_atualizacao = clock_timestamp(),
				nm_usuario = nm_usuario_p
			where	nr_sequencia = nr_seq_proc_w;

		end if;
		nr_seq_proc_p := coalesce(nr_seq_proc_w,0);
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hem_inserir_procedimento_pepo (nr_seq_cirurgia_p bigint, nr_seq_proc_interno_p bigint, nm_usuario_p text, nr_seq_proc_p INOUT bigint) FROM PUBLIC;

