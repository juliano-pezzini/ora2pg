-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE executar_taxa_equipamento ( nr_cirurgia_p bigint, nm_usuario_p text ) AS $body$
DECLARE

 
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
dt_prescricao_w		timestamp;
qt_procedimento_w	double precision	:= 0;
nr_prescricao_w		bigint;
nr_sequencia_w		integer;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_estabelecimento_w	smallint;
ie_proced_hor_atual_w	varchar(1);
dt_inicio_real_w	timestamp;
dt_procedimento_w	timestamp;
dt_entrada_unidade_w	timestamp;
cd_setor_atendimento_w	integer;
nr_seq_interno_w	bigint;
nr_doc_convenio_w	varchar(20);
ie_tipo_guia_w		varchar(2);
cd_senha_w		varchar(20);
ie_classificao_w	varchar(1);
cd_tipo_procedimento_w	smallint;
nr_seq_proc_w		bigint;
varie_tipo_lancto_w	varchar(10) := null;
nr_seq_proc_interno_w	bigint;
nr_atendimento_w	bigint;
ie_classificacao_w	varchar(1);
cd_pessoa_fisica_w	varchar(10);
ds_erro_w		varchar(255);
cd_medico_cirurgiao_w	varchar(10);
ie_forma_apresentacao_w		smallint;
dt_termino_w			timestamp;
dt_inicio_procedimento_w	timestamp;
ie_Atual_data_proc_w		varchar(1)	:= 'N';
ie_gerar_partic_w		varchar(1)	:= 'N';
dt_proc_equip_w			timestamp;
qt_taxa_w			double precision;
ie_gestao_cirurgia_w		varchar(1);
cd_procedimento_ww		bigint;
ie_origem_proced_ww		bigint;
dt_inicio_w			timestamp;
dt_fim_w			timestamp;
dt_procedimento_ww		timestamp;
ie_gerar_convenio_w		varchar(1);
cd_convenio_ww			integer := null;
cd_categoria_ww			varchar(10);
ie_doc_convenio_w		varchar(3);
ie_executou_taxas_w		varchar(1);
cd_perfil_w       	integer;
ie_gerar_taxa_partic_w 	varchar(1);
cd_equipamento_w		bigint;

ie_regra_uso_w			varchar(1);
ie_tipo_entrada_w		varchar(255);
nr_atendimento_ww		bigint;
qt_lancamento_w			bigint;
dt_execucao_w			timestamp;
cd_medico_executor_w		varchar(10);
cd_categoria_www		varchar(10);
nr_cirurgia_propaci_w		bigint;
nr_interno_conta_ww		bigint;
cd_setor_proc_w			integer;
ie_acao_excesso_w		varchar(5);
qt_excedida_w			bigint;
cd_convenio_excesso_w		integer;
cd_categoria_excesso_w		varchar(10);
cd_convenio_glosa_w		integer;
cd_categoria_glosa_w		varchar(10);
cd_medico_executor_ww		varchar(10) 	:= null;
ds_texto_aux_w			varchar(255);
cd_motivo_exc_conta_w		parametro_faturamento.cd_motivo_exc_conta%type;
ie_grava_medico_exec_w varchar(1);
cd_medico_retorno_w		varchar(10);
ie_tipo_atendimento_w	smallint;
ie_medico_executor_w  	varchar(1);
cd_cgc_retorno_w		varchar(14);
cd_pessoa_fisica_ww		varchar(10);
nr_seq_classificacao_w	bigint;
cd_setor_prescricao_w	integer;

c01 CURSOR FOR 
	SELECT	nr_seq_proc_interno, 
		qt_taxa, 
		cd_procedimento, 
		ie_origem_proced, 
		dt_inicio, 
		dt_fim, 
		cd_convenio, 
		cd_categoria, 
		cd_equipamento 
	from	equipamento_cirurgia a, 
		taxa_equipamento_cirurgia b 
	where	a.nr_sequencia = b.nr_seq_equi_cir 
	and	a.nr_cirurgia = nr_cirurgia_p 
	and	coalesce(a.ie_situacao,'A') = 'A' 
	and	coalesce(qt_taxa,0) >= 0 
	and	coalesce(a.dt_conta::text, '') = '';
	
	-- Definido alteração com o Daniel, pois as taxas iguais não estavam indo para a conta quando geradas apos lançamentos anteriores 
	/*and not exists (	select	1 
    	     	from	procedimento_paciente w 
        	 	where	nvl(b.nr_seq_proc_interno,0) 	= nvl(w.nr_seq_proc_interno,0) 
          	and		w.nr_cirurgia 					= nr_cirurgia_p 
						and		cd_motivo_exc_conta is null 
						union 
						select	1 
    	     	from	procedimento_paciente w 
        	 	where	nvl(b.cd_procedimento,0) 	= nvl(w.cd_procedimento,0) 
						and		nvl(b.ie_origem_proced,0)	= nvl(w.ie_origem_proced,0) 
          	and		w.nr_cirurgia 		= nr_cirurgia_p 
						and		cd_motivo_exc_conta is null);*/
 
 

BEGIN 
CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p,WHEB_MENSAGEM_PCK.get_texto(299947,null), 'S', null, null);
cd_perfil_w := obter_perfil_ativo;
 
select	nr_atendimento, 
	cd_pessoa_fisica, 
	nr_prescricao, 
	dt_inicio_real, 
	dt_entrada_unidade, 
	cd_medico_cirurgiao, 
	dt_termino 
into STRICT	nr_atendimento_w, 
	cd_pessoa_fisica_w, 
	nr_prescricao_w, 
	dt_inicio_real_w, 
	dt_entrada_unidade_w, 
	cd_medico_cirurgiao_w, 
	dt_termino_w 
from	cirurgia 
where	nr_cirurgia	=	nr_cirurgia_p;	
 
select	coalesce(max(cd_estabelecimento),1) 
into STRICT	cd_estabelecimento_w 
from	atendimento_paciente 
where	nr_atendimento	=	nr_atendimento_w;	
 
ie_gerar_convenio_w := obter_param_usuario(872, 313, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gerar_convenio_w);
ie_grava_medico_exec_w := obter_param_usuario(900, 558, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_grava_medico_exec_w);
 
dt_procedimento_w :=	dt_inicio_real_w;	
if (dt_procedimento_w < dt_entrada_unidade_w) then 
	dt_procedimento_w	:= dt_entrada_unidade_w;
end if;
 
begin 
select	cd_setor_atendimento, 
	nr_seq_interno 
into STRICT	cd_setor_atendimento_w, 
	nr_seq_interno_w 
from	atend_paciente_unidade 
where	dt_entrada_unidade	=	dt_entrada_unidade_w 
and	nr_atendimento		=	nr_atendimento_w;
exception 
when others then 
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(185246);
	--r a i s e _application_error(-20011,'Não foi gerado passagem de setor para esta cirurgia!'); 
end;
CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p,WHEB_MENSAGEM_PCK.get_texto(299948,null), 'S', null, null);
 
OPEN C01;
LOOP 
FETCH C01 into 
	nr_seq_proc_interno_w, 
	qt_taxa_w, 
	cd_procedimento_ww, 
	ie_origem_proced_ww, 
	dt_inicio_w, 
	dt_fim_w, 
	cd_convenio_ww, 
	cd_categoria_ww, 
	cd_equipamento_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
	if (ie_gerar_convenio_w = 'S') then 
		select	max(cd_convenio), 
			max(cd_categoria) 
		into STRICT	cd_convenio_ww, 
			cd_categoria_ww 
		from	cirurgia 
		where	nr_cirurgia	=	nr_cirurgia_p;
	end if;
	CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p, '01 ' || WHEB_MENSAGEM_PCK.get_texto(299950,null) || 'nr_seq_proc_interno_w=' || nr_seq_proc_interno_w || ' cd_procedimento_ww=' || cd_procedimento_ww || ' ie_origem_proced_ww=' || ie_origem_proced_ww || ' qt_taxa_w=' || qt_taxa_w, 'S', null, null);
	dt_inicio_procedimento_w	:= null;
		 
	qt_procedimento_w	:= 0;
 
	SELECT * FROM Obter_Proc_Tab_Interno(nr_seq_proc_interno_w, nr_prescricao_w, nr_atendimento_w, 0, cd_procedimento_w, ie_origem_proced_w, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
 
	if (cd_procedimento_ww > 0) and (ie_origem_proced_ww > 0) then 
		cd_procedimento_w	:= cd_procedimento_ww;
		ie_origem_proced_w	:= ie_origem_proced_ww;
	end if;
	 
	ds_erro_w := Consiste_Paciente_Proc(nr_seq_proc_interno_w, nr_atendimento_w, cd_pessoa_fisica_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w);
 
	CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p, '02 ' || WHEB_MENSAGEM_PCK.get_texto(299950,null) || 'nr_seq_proc_interno_w=' || nr_seq_proc_interno_w || ' cd_procedimento_ww=' || cd_procedimento_ww || ' ie_origem_proced_ww=' || ie_origem_proced_ww || ' qt_taxa_w=' || qt_taxa_w, 'S', null, null);
	 
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then 
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(185247,	'DS_ERRO_W=' || ds_erro_w);
		--r a i s e _application_error(-20011,ds_erro_w); 
	end if;
 
	--Obter_Convenio_Execucao(nr_atendimento_w,dt_procedimento_w,cd_convenio_w,cd_categoria_w,nr_doc_convenio_w,ie_tipo_guia_w,cd_senha_w); 
	 
	if (coalesce(cd_convenio_ww,0) = 0) then 
		SELECT * FROM Obter_Convenio_Execucao(nr_atendimento_w, dt_procedimento_w, cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w) INTO STRICT cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w;
	else 
		cd_convenio_w	:= cd_convenio_ww;
		cd_categoria_w	:= cd_categoria_ww;
		 
		select	max(nr_doc_convenio), 
			max(ie_tipo_guia), 
			max(cd_senha) 
		into STRICT	nr_doc_convenio_w, 
			ie_tipo_guia_w, 
			cd_senha_w 
		from 	Atend_Categoria_convenio 
		where	nr_atendimento	= nr_atendimento_w 
		and	nr_seq_interno	= 
				(	SELECT	max(nr_seq_interno) 
					from	atend_categoria_convenio 
					where	nr_atendimento		= nr_atendimento_w 
					and	dt_inicio_vigencia	<= dt_procedimento_w 
					and	cd_convenio		= coalesce(cd_convenio_w,cd_categoria) 
					and	cd_categoria		= coalesce(cd_categoria_w,cd_categoria));
					 
		select	Obter_Valor_Conv_Estab(cd_convenio, cd_estabelecimento_w, 'IE_DOC_CONVENIO') 
		into STRICT 	ie_doc_convenio_w 
		from 	convenio 
		where	cd_convenio	= cd_convenio_w;
 
		if (ie_doc_convenio_w = 'S') then 
			nr_doc_convenio_w := coalesce(cd_senha_w, nr_doc_convenio_w);
		elsif (ie_doc_convenio_w in ('N','T')) then 
			nr_doc_convenio_w := null;
		end if;
 
		if (ie_doc_convenio_w	<> 'A') then 
			cd_senha_w		:= null;
		end if;
	end if;	
	CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p, '03 ' || WHEB_MENSAGEM_PCK.get_texto(299950,null) || 'nr_seq_proc_interno_w=' || nr_seq_proc_interno_w || ' cd_procedimento_ww=' || cd_procedimento_ww || ' ie_origem_proced_ww=' || ie_origem_proced_ww || ' qt_taxa_w=' || qt_taxa_w, 'S', null, null);
	 
	select	max(ie_classificacao), 
		max(cd_tipo_procedimento), 
		max(ie_forma_apresentacao) 
	into STRICT	ie_classificacao_w, 
		cd_tipo_procedimento_w, 
		ie_forma_apresentacao_w 
	from	procedimento 
	where	cd_procedimento		= cd_procedimento_w 
	and	ie_origem_proced	= ie_origem_proced_w;
 
	if (ie_forma_apresentacao_w in (2,3,10,11,12,14,15,17)) then 
		dt_inicio_procedimento_w	:= null;
		if (dt_inicio_real_w IS NOT NULL AND dt_inicio_real_w::text <> '') then 
			dt_inicio_procedimento_w := dt_inicio_real_w;
		end if;
	end if;
	CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p, '04 ' || WHEB_MENSAGEM_PCK.get_texto(299950,null) || 'nr_seq_proc_interno_w=' || nr_seq_proc_interno_w || ' cd_procedimento_ww=' || cd_procedimento_ww || ' ie_origem_proced_ww=' || ie_origem_proced_ww || ' qt_taxa_w=' || qt_taxa_w, 'S', null, null);
	 
	-- Substituído pelo 180 da função Gestão da Cirurgia OS 178873 
	ie_gestao_cirurgia_w := Obter_Param_Usuario(0, 88, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gestao_cirurgia_w);
	if (ie_gestao_cirurgia_w = 'N') then 
		ie_atual_data_proc_w := Obter_Param_Usuario(901, 122, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_atual_data_proc_w);
	else 
		ie_atual_data_proc_w := Obter_Param_Usuario(900, 180, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_atual_data_proc_w);
	end if;
	ie_gerar_partic_w := obter_param_usuario(900, 109, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gerar_partic_w);
	 
	dt_procedimento_ww	:= dt_procedimento_w;
	if	(dt_inicio_w IS NOT NULL AND dt_inicio_w::text <> '' AND dt_fim_w IS NOT NULL AND dt_fim_w::text <> '') then 
		dt_inicio_procedimento_w	:= dt_inicio_w;
		dt_proc_equip_w			:= dt_fim_w;
		dt_procedimento_ww		:= dt_fim_w;
		dt_termino_w			:= dt_fim_w;
	end if;
	CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p, '05 ' || WHEB_MENSAGEM_PCK.get_texto(299950,null) || 'nr_seq_proc_interno_w=' || nr_seq_proc_interno_w || ' cd_procedimento_ww=' || cd_procedimento_ww || ' ie_origem_proced_ww=' || ie_origem_proced_ww || ' qt_taxa_w=' || qt_taxa_w, 'S', null, null);
	 
	if (dt_termino_w IS NOT NULL AND dt_termino_w::text <> '') then 
		dt_proc_equip_w	:= dt_termino_w;
	 
		if (ie_forma_apresentacao_w in (2,3,10,11,12,14,15,17)) then		 
			select	coalesce(OBTER_QTE_PROCED_CIRURGIA(cd_procedimento_w, ie_origem_proced_w, dt_proc_equip_w, dt_inicio_procedimento_w),0) 
			into STRICT	qt_procedimento_w 
			;
		end if;
		 
	end if;
 
	if (qt_taxa_w IS NOT NULL AND qt_taxa_w::text <> '') then 
		qt_procedimento_w	:= qt_taxa_w;
	end if;
 
	CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p, '06 ' || WHEB_MENSAGEM_PCK.get_texto(299950,null) || 'nr_seq_proc_interno_w=' || nr_seq_proc_interno_w || ' cd_procedimento_ww=' || cd_procedimento_ww || ' ie_origem_proced_ww=' || ie_origem_proced_ww || ' qt_taxa_w=' || qt_taxa_w, 'S', null, null);
	 
	if (coalesce(qt_procedimento_w,0) < 0) then 
		qt_procedimento_w	:= 0;
	end if;
	 
	if (ie_forma_apresentacao_w not in (17)) or (qt_procedimento_w > 0) then 
		 
		select	nextval('procedimento_paciente_seq') 
		into STRICT	nr_seq_proc_w 
		;
		CALL gerar_cirurgia_hist(nr_cirurgia_p,'ETE',nm_usuario_p, '07 ' || WHEB_MENSAGEM_PCK.get_texto(299950,null) || 'nr_seq_proc_interno_w=' || nr_seq_proc_interno_w || ' cd_procedimento_ww=' || cd_procedimento_ww || ' ie_origem_proced_ww=' || ie_origem_proced_ww || ' qt_taxa_w=' || qt_taxa_w, 'S', null, null);
 
		 
		 
		if (coalesce(ie_grava_medico_exec_w,'N') = 'S' ) then 
		 
			select	max(ie_tipo_atendimento), 
					max(nr_seq_classificacao) 
			into STRICT	ie_tipo_atendimento_w, 
					nr_seq_classificacao_w 
			from	atendimento_paciente 
			where	nr_atendimento	=	nr_atendimento_w;	
		 
			select	max(cd_setor_atendimento) 
			into STRICT	cd_setor_prescricao_w 
			from	prescr_medica 
			where	nr_prescricao = nr_prescricao_w;
				 
		 
			SELECT * FROM consiste_medico_executor(cd_estabelecimento_w, cd_convenio_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_atendimento_w, null, nr_seq_proc_interno_w, ie_medico_executor_w, cd_cgc_retorno_w, cd_medico_retorno_w, cd_pessoa_fisica_ww, cd_medico_cirurgiao_w, dt_procedimento_w, nr_seq_classificacao_w, null, null, cd_setor_prescricao_w) INTO STRICT ie_medico_executor_w, cd_cgc_retorno_w, cd_medico_retorno_w, cd_pessoa_fisica_ww;
 
			if (ie_medico_executor_w = 'N') then 
      cd_medico_executor_ww := null;
     elsif (coalesce(cd_medico_retorno_w,0) > 0) then 
				cd_medico_executor_ww := cd_medico_retorno_w;
			else	 
				select	max(cd_medico_executor) 
				into STRICT	cd_medico_executor_ww 
				from	procedimento_paciente 
				where	nr_cirurgia = nr_cirurgia_p 
				and 	nr_prescricao = nr_prescricao_w 
				and		cd_procedimento = (SELECT	max(cd_procedimento_princ) 
										  from		cirurgia 
										  where	nr_cirurgia = nr_cirurgia_p);
			end if;
		else 
			cd_medico_executor_ww := null;
		end if;
	 
		insert into procedimento_paciente( 
			nr_sequencia, 
			cd_procedimento, 
			ie_origem_proced, 
			dt_prescricao, 
			qt_procedimento, 
			cd_pessoa_fisica, 
			cd_convenio, 
			cd_categoria, 
			ie_proc_princ_atend, 
			ie_video, 
			tx_medico, 
			tx_anestesia, 
			tx_procedimento, 
			ie_valor_informado, 
			ie_guia_informada, 
			cd_situacao_glosa, 
			nm_usuario_original, 
			nr_atendimento, 
			cd_setor_atendimento, 
			dt_entrada_unidade, 
			nr_seq_atepacu, 
			cd_senha, 
			ie_auditoria, 
			ie_emite_conta, 
			cd_cgc_prestador, 
			nr_seq_proc_interno, 
			dt_procedimento, 
			dt_atualizacao, 
			nm_usuario, 
			nr_cirurgia, 
			nr_prescricao, 
			nr_sequencia_prescricao, 
			cd_medico_executor, 
			cd_medico_req, 
			dt_inicio_procedimento, 
			nr_doc_convenio, 
			ie_tipo_guia, 
			cd_equipamento) 
		values ( 
			nr_seq_proc_w, 
			cd_procedimento_w, 
			ie_origem_proced_w, 
			dt_prescricao_w, 
			CASE WHEN qt_procedimento_w=0 THEN  1  ELSE qt_procedimento_w END , 
			CASE WHEN ie_origem_proced_w=7 THEN null  ELSE obter_pessoa_fisica_usuario(nm_usuario_p,'C') END , 
			cd_convenio_w, 
			cd_categoria_w,	 
			'N', 
			'N', 
			100, 
			100, 
			100, 
			'N', 
			'N', 
			0, 
			nm_usuario_p, 
			nr_atendimento_w, 
			cd_setor_atendimento_w, 
			dt_entrada_unidade_w, 
			nr_seq_interno_w, 
			cd_senha_w, 
			'N', 
			'N', 
			obter_cgc_estabelecimento(cd_estabelecimento_w), 
			nr_seq_proc_interno_w, 
			dt_procedimento_ww, 
			clock_timestamp(), 
			nm_usuario_p, 
			nr_cirurgia_p, 
			nr_prescricao_w, 
			CASE WHEN nr_sequencia_w=0 THEN null  ELSE nr_sequencia_w END , 
			cd_medico_executor_ww, 
			null, 
 
			dt_inicio_procedimento_w, 
			nr_doc_convenio_w, 
			ie_tipo_guia_w, 
			cd_equipamento_w);
		commit;
		 
		ie_executou_taxas_w := 'S';
 
		/*Inicio*/
 
		ie_regra_uso_w := obter_param_usuario(900, 400, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_regra_uso_w);
 
		IF (ie_regra_uso_w = 'S') THEN 
 
			--ie_tipo_entrada_w := ie_tipo_entrada_w || ',' ||'18'; 
			SELECT	MAX(nr_atendimento), 
				MAX(qt_procedimento), 
				MAX(dt_procedimento), 
				MAX(cd_medico_executor), 
				MAX(cd_categoria), 
				MAX(nr_cirurgia), 
				MAX(nr_interno_conta), 
				MAX(cd_setor_atendimento) 
			INTO STRICT	nr_atendimento_ww, 
				qt_lancamento_w, 
				dt_execucao_w, 
				cd_medico_executor_w, 
				cd_categoria_www, 
				nr_cirurgia_propaci_w, 
				nr_interno_conta_ww, 
				cd_setor_proc_w 
			FROM	procedimento_paciente 
			WHERE	nr_sequencia = nr_seq_proc_w;
 
			SELECT * FROM obter_regra_qtde_proc_exec(nr_atendimento_ww, cd_procedimento_w, ie_origem_proced_w, qt_lancamento_w, dt_execucao_w, cd_medico_executor_w, ie_acao_excesso_w, qt_excedida_w, ds_erro_w, cd_convenio_excesso_w, cd_categoria_excesso_w, nr_seq_proc_interno_w, cd_categoria_www, NULL, 0, nr_cirurgia_propaci_w, NULL, cd_setor_proc_w, NULL) INTO STRICT ie_acao_excesso_w, qt_excedida_w, ds_erro_w, cd_convenio_excesso_w, cd_categoria_excesso_w;
			 
			IF (ie_acao_excesso_w = 'E') THEN 
				IF (qt_excedida_w  > 0) THEN 
 
					--Excluído pela regra de uso da função Cadastro de Convênios 
					ds_texto_aux_w := substr(wheb_mensagem_pck.get_texto(300556),1,255);
					 
					select	max(cd_motivo_exc_conta) 
					into STRICT	cd_motivo_exc_conta_w 
					from	parametro_faturamento 
					where	cd_estabelecimento = cd_estabelecimento_w;
				 
					CALL excluir_matproc_conta(nr_seq_proc_w, nr_interno_conta_ww, coalesce(cd_motivo_exc_conta_w, 12), ds_texto_aux_w, 'P', nm_usuario_p);
 
				END IF;
				--ie_tipo_entrada_w := ie_tipo_entrada_w || ',' ||'19'; 
			ELSIF (ie_acao_excesso_w = 'P') THEN 
				IF (qt_excedida_w  > 0) THEN 
 
					 SELECT * FROM obter_convenio_particular_pf(cd_estabelecimento_w, cd_convenio_w, '', dt_execucao_w, cd_convenio_glosa_w, cd_categoria_glosa_w) INTO STRICT cd_convenio_glosa_w, cd_categoria_glosa_w;
 
					UPDATE	procedimento_paciente 
					SET	nr_interno_conta	 = NULL, 
						cd_convenio		= cd_convenio_glosa_w, 
						cd_categoria		= cd_categoria_glosa_w 
					WHERE	nr_sequencia 		= nr_seq_proc_w;
 
					COMMIT;
 
					CALL atualiza_preco_procedimento(nr_seq_proc_w, cd_convenio_w, nm_usuario_p);
					CALL Ajustar_Conta_Vazia(nr_atendimento_ww, nm_usuario_p);
 
				END IF;
				--ie_tipo_entrada_w := ie_tipo_entrada_w || ',' ||'20'; 
			ELSIF (ie_acao_excesso_w = 'Z') THEN 
				IF (qt_excedida_w  > 0) THEN 
 
					UPDATE	procedimento_paciente 
					SET	vl_anestesista		= 0, 
						vl_auxiliares		= 0, 
						vl_custo_operacional	= 0, 
						vl_materiais		= 0, 
						vl_medico		= 0, 
						vl_procedimento		= 0, 
						ie_valor_informado	= 'S' 
					WHERE	nr_sequencia 		= nr_seq_proc_w;
 
					COMMIT;
 
				END IF;
				--ie_tipo_entrada_w := ie_tipo_entrada_w || ',' ||'21'; 
			ELSIF (ie_acao_excesso_w = 'C') THEN 
 
				IF (qt_excedida_w  > 0) AND 
					(cd_convenio_excesso_w IS NOT NULL AND cd_convenio_excesso_w::text <> '' AND cd_categoria_excesso_w IS NOT NULL AND cd_categoria_excesso_w::text <> '') THEN 
					UPDATE	procedimento_paciente 
					SET	nr_interno_conta	 = NULL, 
						cd_convenio		= cd_convenio_excesso_w, 
						cd_categoria		= cd_categoria_excesso_w 
					WHERE	nr_sequencia 		= nr_sequencia_w;
 
 
					CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_excesso_w, nm_usuario_p);
 
					CALL Ajustar_Conta_Vazia(nr_atendimento_w, nm_usuario_p);
				END IF;
				--ie_tipo_entrada_w := ie_tipo_entrada_w || ',' ||'22'; 
			END IF;
 
		END IF;
		/*Fim*/
 
		 
		if (ie_gerar_partic_w = 'S') then 
		ie_gerar_taxa_partic_w := obter_param_usuario(872, 479, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gerar_taxa_partic_w);
		if (ie_gerar_taxa_partic_w = 'S') or 
		  ((ie_gerar_taxa_partic_w = 'N') and (ie_classificacao_w not in (2,3))) then 
			CALL Gravar_partic_proced(nr_seq_proc_w, nm_usuario_p);
		end if;
		end if;
 
		if (ie_classificacao_w in (1,8)) then 		 
			CALL atualiza_preco_procedimento(nr_seq_proc_w,cd_convenio_w,nm_usuario_p);
		else 
			CALL atualiza_preco_servico(nr_seq_proc_w,nm_usuario_p);
		end if;
 
 
		if (coalesce(varie_tipo_lancto_w,'0') = '0') then 
			CALL Gerar_Lanc_Automatico_mat(nr_atendimento_w,null,132,nm_usuario_p,null,null,null);
		end if;
 
		CALL gerar_autor_regra(nr_atendimento_w,null,nr_seq_proc_w,null,null,nr_seq_proc_interno_w,'EP',nm_usuario_p,null,null,null,null,null,null,'','','');
	end if;
	end;
	END LOOP;
	CLOSE C01;
 
if (ie_executou_taxas_w = 'S') then 
	update 	equipamento_cirurgia 
	set		dt_conta	=	clock_timestamp() 
	where 	nr_cirurgia =	nr_cirurgia_p 
	and	coalesce(dt_conta::text, '') = '';
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE executar_taxa_equipamento ( nr_cirurgia_p bigint, nm_usuario_p text ) FROM PUBLIC;

