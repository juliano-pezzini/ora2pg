-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_receber_espec_proced (nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w			intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w		varchar(15);
reg_integracao_w			gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ds_erro_w			varchar(4000);
ie_erro_w				varchar(1) := 'N';
ie_exception_w			varchar(1) := 'N';
i				integer;
qt_espec_proc_w			bigint;
especialidade_proc_w		especialidade_proc%rowtype;

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/PROCEDURE_SPECIALTY' passing xml_p columns
	ie_action				varchar(40)		path		'IE_ACTION',
	cd_area_procedimento		bigint		path		'CD_PROCEDURE_AREA',
	cd_especialidade			bigint		path		'CD_SPECIALTY',
	cd_especialidade_medica		integer			path		'CD_MEDICAL_SPECIALTY',
	ds_especialidade			varchar(40)		path		'DS_SPECIALTY',
	cd_sistema_ant			varchar(80)		path		'NR_EXTERNAL_DOCUMENT',
	dt_atualizacao			varchar(14)		path		'DT_UPDATE',
	nm_usuario			varchar(15)		path		'NM_USER');

c01_w	c01%rowtype;


BEGIN

/*Atualiza o status da fila para Em processamento*/

update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

commit;

begin

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w			:=	nr_seq_sistema_w;
reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:=	'R';
reg_integracao_w.ie_sistema_externo		:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao		:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao	:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log			:=	0;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	begin
	ie_erro_w				:= 	'N';
	reg_integracao_w.nm_tabela		:=	'ESPECIALIDADE_PROC';
	reg_integracao_w.nm_elemento	:=	'PROCEDURE_SPECIALTY';
	reg_integracao_w.nr_seq_visao	:=	27757; /*HTML5 - Swing - CorAte_F7 - Especialidade*/
	if (coalesce(upper(c01_w.ie_action),'INSERT') <> 'DELETE') then /*INSERT ou UPDATE*/
		if (coalesce(upper(c01_w.ie_action),'INSERT') = 'UPDATE') then

			select 	count(*)
			into STRICT	qt_espec_proc_w
			from 	especialidade_proc
			where 	cd_especialidade = c01_w.cd_especialidade;

			if (qt_espec_proc_w = 0) then
				/*Código da especialidade do procedimento inválido ou inexistente no Tasy para alteração ou exclusão do registro.*/

				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1020266),'INTPDTASY','0004');
				ie_erro_w := 'S';
			end if;
		end if;

		if (ie_erro_w = 'N') then

			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_AREA_PROCEDIMENTO', c01_w.cd_area_procedimento, 'S', especialidade_proc_w.cd_area_procedimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; especialidade_proc_w.cd_area_procedimento := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESPECIALIDADE_MEDICA', c01_w.cd_especialidade_medica, 'S', especialidade_proc_w.cd_especialidade_medica) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; especialidade_proc_w.cd_especialidade_medica := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_ESPECIALIDADE', c01_w.ds_especialidade, 'N', especialidade_proc_w.ds_especialidade) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; especialidade_proc_w.ds_especialidade := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_SISTEMA_ANT', c01_w.cd_sistema_ant, 'N', especialidade_proc_w.cd_sistema_ant) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; especialidade_proc_w.cd_sistema_ant := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c01_w.dt_atualizacao, 'N', especialidade_proc_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; especialidade_proc_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_usuario, 'N', especialidade_proc_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; especialidade_proc_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;

			especialidade_proc_w.nm_usuario_nrec		:= especialidade_proc_w.nm_usuario;
			especialidade_proc_w.dt_atualizacao_nrec	:= clock_timestamp();

			if (reg_integracao_w.qt_reg_log = 0) then

				select	max(ie_origem_proced)
				into STRICT	especialidade_proc_w.ie_origem_proced
				from 	area_procedimento
				where	cd_area_procedimento = especialidade_proc_w.cd_area_procedimento;

				select	max(cd_especialidade)
				into STRICT	especialidade_proc_w.cd_especialidade
				from	especialidade_proc
				where 	cd_especialidade = c01_w.cd_especialidade;

				if (coalesce(especialidade_proc_w.cd_especialidade,0) > 0) then

					especialidade_proc_w.cd_original := especialidade_proc_w.cd_especialidade;

					update	especialidade_proc
					set	row = especialidade_proc_w
					where	cd_especialidade = especialidade_proc_w.cd_especialidade;
				else
					select 	max(cd_especialidade) + 1
					into STRICT	especialidade_proc_w.cd_especialidade
					from 	especialidade_proc;

					especialidade_proc_w.cd_original := especialidade_proc_w.cd_especialidade;

					insert into especialidade_proc values (especialidade_proc_w.*);

					if (nr_seq_regra_w > 0) then
						CALL gerar_conv_meio_externo(null, 'ESPECIALIDADE_PROC', 'CD_ESPECIALIDADE', especialidade_proc_w.cd_especialidade, c01_w.cd_sistema_ant, null, nr_seq_regra_w, 'A', especialidade_proc_w.nm_usuario);
					end if;
				end if;
			end if;
		end if;

	elsif (coalesce(upper(c01_w.ie_action),'INSERT') = 'DELETE') then /*DELETE*/
		select 	count(*)
		into STRICT	qt_espec_proc_w
		from 	especialidade_proc
		where 	cd_especialidade = c01_w.cd_especialidade;

		if (qt_espec_proc_w > 0) then
			delete	FROM especialidade_proc
			where	cd_especialidade = c01_w.cd_especialidade;
		else
			/*Código da especialidade do procedimento inválido ou inexistente no Tasy para alteração ou exclusão do registro.*/

			intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1020266),'INTPDTASY','0004');
			ie_erro_w := 'S';
		end if;

	end if;
	end;
end loop;
close c01;

exception
when others then
	begin
	ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
	rollback;

	update	intpd_fila_transmissao
	set	ie_status 	 	= 'E',
		cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
		ds_log 		= ds_erro_w,
		nr_doc_externo	= c01_w.cd_sistema_ant
	where	nr_sequencia 	= nr_sequencia_p;

	ie_exception_w := 'S';

	end;
end;

if (ie_exception_w = 'N') then

	if	((reg_integracao_w.qt_reg_log > 0) or (coalesce(ie_erro_w,'N') = 'S')) then
		begin
		rollback;

		update	intpd_fila_transmissao
		set	ie_status		= 'E',
			cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
			ds_log 		= ds_erro_w,
			nr_doc_externo	= c01_w.cd_sistema_ant
		where	nr_sequencia 	= nr_sequencia_p;

		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY',reg_integracao_w.intpd_log_receb[i].cd_default_message);
		end loop;
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status		= 'S',
			cd_default_message	= '0000',
			nr_seq_documento	= coalesce(especialidade_proc_w.cd_especialidade, c01_w.cd_especialidade),
			nr_doc_externo	= c01_w.cd_sistema_ant
		where	nr_sequencia	= nr_sequencia_p;
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_receber_espec_proced (nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

