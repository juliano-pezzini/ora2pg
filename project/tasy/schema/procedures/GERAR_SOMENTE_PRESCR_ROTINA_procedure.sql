-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_somente_prescr_rotina ( nr_atendimento_p bigint, cd_pessoa_fisica_p text, dt_primeiro_horario_p text, dt_prescricao_p timestamp, cd_medico_p text, nr_horas_validade_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, nr_nova_prescricao_p INOUT bigint) AS $body$
DECLARE

			 
 
qt_hora_w					bigint;
VarConsisteDataFutura_w		varchar(1);
cd_convenio_w				integer;
nr_prescricao_w				bigint;
ie_origem_inf_w				varchar(1);
dt_primeiro_horario_w		timestamp;
cd_pessoa_fisica_w			varchar(10);
qt_altura_cm_w				real;
qt_peso_w					real;
ie_adep_w					varchar(1);
var_pac_usu_w				varchar(2);
cd_setor_usuario_w			integer;
cd_setor_prescr_w			integer := null;
qt_registro_w				bigint;
cd_estabelecimento_w		bigint;
VarIdentPrescrADEP_w		varchar(15);


BEGIN 
 
cd_estabelecimento_w	:= cd_estabelecimento_p;
 
var_pac_usu_w := Obter_Param_Usuario(924, 42, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, var_pac_usu_w);
VarIdentPrescrADEP_w := obter_param_usuario(924, 246, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, VarIdentPrescrADEP_w);
 
if (var_pac_usu_w = 'U') then 
	begin 
	select	obter_setor_usuario(nm_usuario_p) 
	into STRICT	cd_setor_usuario_w 
	;
 
	select	count(*)  
	into STRICT	qt_registro_w 
	from	setor_atendimento a  
	where	a.cd_setor_atendimento in (	SELECT	b.cd_setor_atendimento   
						from	atend_paciente_unidade b   
						where	b.nr_atendimento	= NR_ATENDIMENTO_P 
						and	b.cd_setor_atendimento	= cd_setor_usuario_w);
	exception 
	when others then 
		qt_registro_w	:= 0;
	end;
end if;
 
if (var_pac_usu_w = 'U') and (NR_ATENDIMENTO_P > 0) and (qt_registro_w > 0) then 
	cd_setor_prescr_w	:= cd_setor_usuario_w;	
elsif (NR_ATENDIMENTO_P > 0) then 
	Select	coalesce(obter_unidade_atendimento(NR_ATENDIMENTO_P,'IA','CS'), obter_unidade_atendimento(NR_ATENDIMENTO_P,'A','CS')) 
	into STRICT	cd_setor_prescr_w	 
	;
end if;
 
if (var_pac_usu_w = 'R') then 
	cd_setor_prescr_w	:= Obter_setor_prescr_regra(obter_perfil_ativo);
end if;
 
select	Campo_Numerico(coalesce(vl_parametro, vl_parametro_padrao)) 
into STRICT	qt_hora_w 
from	funcao_parametro 
where	cd_funcao = 924 
and	nr_sequencia = 22;
 
select	coalesce(vl_parametro, vl_parametro_padrao) 
into STRICT	VarConsisteDataFutura_w 
from	funcao_parametro 
where	cd_funcao = 924 
and	nr_sequencia = 44;
 
if	((nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') or (VarConsisteDataFutura_w = 'S')) and 
	((clock_timestamp() + qt_hora_w / 24) < dt_prescricao_p) then 
	--A data da prescrição não pode ser superior a #@QT_HORAS#@ horas a partir deste momento! 
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(173469, 'QT_HORAS=' || qt_hora_w);
end if;
 
-- Obter_Convênio do Atendimento 
if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then 
	begin 
	select	cd_convenio 
	into STRICT	cd_convenio_w 
	from	atend_categoria_convenio 
	where	nr_atendimento		= nr_atendimento_p 
	and	dt_inicio_vigencia	= 
			(SELECT	max(dt_inicio_vigencia) 
			from	atend_categoria_convenio 
			where	nr_atendimento = nr_atendimento_p);
	exception 
		when others then 
			cd_convenio_w := null;
	end;
end if;
 
-- Obter numero da proxima prescrição 
select	somente_numero(nextval('prescr_medica_seq')) 
into STRICT	nr_prescricao_w
;
 
-- Obter ie_origem_inf se é médico ou não 
select 	coalesce(max('1'),'3') 
into STRICT	ie_origem_inf_w 
from	Medico b, 
	Usuario a 
where 	a.nm_usuario		= nm_usuario_p 
and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica;
 
begin 
dt_primeiro_horario_w	:= to_date(to_char(dt_prescricao_p,'dd/mm/yyyy ') || 
			substr(dt_Primeiro_horario_p,1,5),'dd/mm/yyyy hh24:mi');
exception 
	when others then 
		dt_primeiro_horario_w	:= clock_timestamp();
end;
 
begin 
select	cd_pessoa_fisica 
into STRICT	cd_pessoa_fisica_w 
from	usuario 
where	nm_usuario	= nm_usuario_p;
exception 
	when others then 
		cd_pessoa_fisica_w	:= null;
end;
 
begin 
select	obter_sinal_vital(nr_atendimento_P, obter_desc_expressao(712884) /*'Altura'*/
), 
	obter_sinal_vital(nr_atendimento_P,'Peso') 
into STRICT	qt_altura_cm_w, 
	qt_peso_w
;
exception 
	when others then 
		qt_altura_cm_w	:= null;
		qt_peso_w	:= null;
end;
 
if (cd_setor_prescr_w > 0) then 
	select	coalesce(max(ie_adep),ie_adep_w) 
	into STRICT	ie_adep_w 
	from	setor_atendimento 
	where	cd_setor_atendimento = cd_setor_prescr_w;
end if;
 
 
if (VarIdentPrescrADEP_w = 'NV') or (VarIdentPrescrADEP_w = 'PNV')then 
	ie_adep_w := 'N';
elsif (VarIdentPrescrADEP_w = 'SV') then 
	ie_adep_w := 'S';
end if;
 
insert into prescr_medica( 
	nr_prescricao, 
	cd_pessoa_fisica, 
	nr_atendimento, 
	cd_medico, 
	dt_prescricao, 
	dt_atualizacao, 
	nm_usuario, 
	nr_horas_validade, 
	dt_primeiro_horario, 
	ie_origem_inf, 
	ie_recem_nato, 
	nm_usuario_original, 
	cd_estabelecimento, 
	cd_prescritor, 
	qt_altura_cm, 
	qt_peso, 
	ie_adep, 
	ie_prescr_emergencia, 
	ie_prescricao_alta, 
	cd_setor_atendimento) 
values (nr_prescricao_w, 
	somente_numero(cd_pessoa_fisica_p), 
	nr_atendimento_p, 
	somente_numero(cd_medico_p), 
	dt_prescricao_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	somente_numero(nr_horas_validade_p), 
	dt_primeiro_horario_w, 
	Somente_numero(ie_origem_inf_w), 
	'N', 
	nm_usuario_p, 
	cd_estabelecimento_w, 
	cd_pessoa_fisica_w, 
	qt_altura_cm_w, 
	qt_peso_w, 
	ie_adep_w, 
	'N', 
	'N', 
	cd_setor_prescr_w);
	 
	commit;
nr_nova_prescricao_p	:= nr_prescricao_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_somente_prescr_rotina ( nr_atendimento_p bigint, cd_pessoa_fisica_p text, dt_primeiro_horario_p text, dt_prescricao_p timestamp, cd_medico_p text, nr_horas_validade_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, nr_nova_prescricao_p INOUT bigint) FROM PUBLIC;

