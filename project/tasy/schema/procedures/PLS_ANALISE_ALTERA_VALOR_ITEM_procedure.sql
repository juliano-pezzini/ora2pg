-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_analise_altera_valor_item ( nr_seq_analise_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_proc_partic_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_motivo_glosa_p bigint, ds_observacao_p text, qt_liberada_p pls_conta_proc.qt_procedimento%type, vl_liberado_p pls_conta_proc.vl_liberado%type, vl_liberado_hi_p w_pls_analise_item.vl_liberado_hi%type, vl_liberado_mat_p w_pls_analise_item.vl_liberado_material%type, vl_liberado_co_p w_pls_analise_item.vl_liberado_co%type, vl_lib_taxa_hi_p w_pls_analise_item.vl_lib_taxa_servico%type, vl_lib_taxa_mat_p w_pls_analise_item.vl_lib_taxa_material%type, vl_lib_taxa_co_p w_pls_analise_item.vl_taxa_co%type, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_grupo_atual_p bigint) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Alteração de valores do item da análise 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ X] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ie_tipo_item_w			varchar(3);
ie_valor_base_w			varchar(3);
ie_tipo_liberacao_w		varchar(3);
vl_unitario_w			double precision;
vl_glosa_w			double precision;
vl_saldo_w			double precision;
vl_apresentado_w		double precision;
vl_calculado_w			double precision;
vl_pag_medico_conta_w		double precision;
vl_unitario_apres_w		double precision;
vl_unitario_calc_w		pls_conta_proc.vl_unitario%type;
vl_base_w			double precision;
nr_seq_item_w			bigint;
qt_registro_w			bigint;
nr_seq_conta_w			bigint;
nr_seq_glosa_conta_w		bigint	:= null;
nr_seq_glosa_w			bigint;
nr_seq_conta_glosa_w		bigint;
nr_seq_ocor_benef_w		bigint;
nr_seq_fluxo_w			bigint;
vl_liberado_p_w			double precision;
nr_seq_ocor_inativa_w		bigint;
nr_seq_motivo_inat_w		bigint;
ie_status_w			varchar(1);--Irá indicar o status do fluxo de análise, caso o valor de glosa for 0 o status receberá o valor liberado, caso o contrário o valor glosado 
ie_glosar_faturamento_w		varchar(1)	:= 'N';
ie_glosar_pagamento_w		varchar(1)	:= 'N';
ie_glosar_pagamento_ocor_w	varchar(1)	:= 'N';
ie_glosar_faturamento_ocor_w	varchar(1)	:= 'N';
ie_tipo_glosa_w			varchar(3)	:= null;
vl_liberado_p_ww		varchar(20);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_material_w		bigint;

c01 CURSOR FOR 
	SELECT	a.nr_seq_conta_glosa, 
		a.nr_seq_ocor_benef 
	from	w_pls_analise_glosa_ocor a 
	where	a.nr_seq_analise	= nr_seq_analise_p 
	and	a.nm_usuario		= nm_usuario_p;


BEGIN 
if (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') and 
	((nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') or (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '')) then 
	 
	if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then 
		select	a.nr_seq_conta, 
			a.ie_valor_base, 
			a.vl_procedimento_imp, 
			a.vl_procedimento, 
			a.vl_pag_medico_conta, 
			a.vl_unitario_imp, 
			a.vl_unitario, 
			a.cd_procedimento, 
			a.ie_origem_proced 
		into STRICT	nr_seq_conta_w, 
			ie_valor_base_w, 
			vl_apresentado_w, 
			vl_calculado_w, 
			vl_pag_medico_conta_w, 
			vl_unitario_apres_w, 
			vl_unitario_calc_w, 
			cd_procedimento_w, 
			ie_origem_proced_w 
		from	pls_conta_proc a 
		where	a.nr_sequencia	= nr_seq_conta_proc_p;
		 
		nr_seq_item_w	:= nr_seq_conta_proc_p;
		ie_tipo_item_w	:= 'P';
	elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then 
		select	a.nr_seq_conta, 
			a.ie_valor_base, 
			a.vl_material_imp, 
			a.vl_material, 
			a.vl_unitario_imp, 
			a.vl_unitario, 
			a.nr_seq_material 
		into STRICT	nr_seq_conta_w, 
			ie_valor_base_w, 
			vl_apresentado_w, 
			vl_calculado_w, 
			vl_unitario_apres_w, 
			vl_unitario_calc_w, 
			nr_seq_material_w 
		from	pls_conta_mat a 
		where	a.nr_sequencia	= nr_seq_conta_mat_p;
		 
		nr_seq_item_w	:= nr_seq_conta_mat_p;
		ie_tipo_item_w	:= 'M';
	end if;
	 
	begin 
		if	((qt_liberada_p mod 1) != 0) then 
			if (pls_obter_permite_qtd_gl_frac(cd_procedimento_w,ie_origem_proced_w,nr_seq_material_w) = 'S') then 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(237853);
			end if;
		end if;
	exception 
	when others then 
		null;
	end;
	 
	/* Inativar as glosas e ocorrências do item */
 
	open c01;
	loop 
	fetch c01 into	 
		nr_seq_conta_glosa_w, 
		nr_seq_ocor_benef_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		if (nr_seq_conta_glosa_w IS NOT NULL AND nr_seq_conta_glosa_w::text <> '') then 
			update	pls_conta_glosa 
			set	ie_situacao 		= 'I', 
				ie_forma_inativacao	= CASE WHEN ie_forma_inativacao='S' THEN 'US' WHEN ie_forma_inativacao='US' THEN 'US'  ELSE 'U' END , 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_sequencia	= nr_seq_conta_glosa_w;
		elsif (nr_seq_ocor_benef_w IS NOT NULL AND nr_seq_ocor_benef_w::text <> '') then 
			update	pls_ocorrencia_benef 
			set	ie_situacao		= 'I', 
				ie_forma_inativacao	= CASE WHEN ie_forma_inativacao='S' THEN 'US' WHEN ie_forma_inativacao='US' THEN 'US'  ELSE 'U' END , 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_sequencia	= nr_seq_ocor_benef_w;
			 
			update	pls_ocorrencia_benef 
			set	ie_situacao		= 'I', 
				ie_forma_inativacao	= CASE WHEN ie_forma_inativacao='S' THEN 'US' WHEN ie_forma_inativacao='US' THEN 'US'  ELSE 'U' END , 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_seq_ocor_pag	= nr_seq_ocor_benef_w;
 
			select	a.nr_seq_glosa 
			into STRICT	nr_seq_glosa_w 
			from	pls_ocorrencia_benef a 
			where	a.nr_sequencia	= nr_seq_ocor_benef_w;
			 
			if (coalesce(nr_seq_glosa_w::text, '') = '') then 
				begin 
					select	a.nr_sequencia 
					into STRICT	nr_seq_glosa_w 
					from	pls_conta_glosa a 
					where	a.nr_seq_ocorrencia_benef	= nr_seq_ocor_benef_w;
				exception 
				when others then 
					nr_seq_glosa_w	:= null;
				end;
			end if;
 
			if (nr_seq_glosa_w IS NOT NULL AND nr_seq_glosa_w::text <> '') then 
				update	pls_conta_glosa 
				set	ie_situacao		= 'I', 
					ie_forma_inativacao	= CASE WHEN ie_forma_inativacao='S' THEN 'US' WHEN ie_forma_inativacao='US' THEN 'US'  ELSE 'U' END , 
					nm_usuario		= nm_usuario_p, 
					dt_atualizacao		= clock_timestamp() 
				where	nr_sequencia		= nr_seq_glosa_w;
			end if;
			 
			/*Todas as ocorrências que foram inativas atualizam com o status do fluxo da ocorrência liberado drquadros O.S.585502*/
 
			update	pls_analise_glo_ocor_grupo 
			set	ie_status		= 'L', 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario_analise	= nm_usuario_p, 
				dt_analise		= clock_timestamp() 
			where	nr_seq_ocor_benef	= nr_seq_ocor_benef_w 
			and	nr_seq_grupo		= nr_seq_grupo_atual_p;
		end if;
		end;
	end loop;
	close c01;
	 
	/* Inserir motivo de glosa/ ocorrência */
 
	if (nr_seq_ocorrencia_p IS NOT NULL AND nr_seq_ocorrencia_p::text <> '') or (nr_seq_motivo_glosa_p IS NOT NULL AND nr_seq_motivo_glosa_p::text <> '') then 
		 
		select	max(nr_sequencia) 
		into STRICT	nr_seq_ocor_inativa_w 
		from	pls_ocorrencia_benef 
		where	nr_seq_ocorrencia 	= nr_seq_ocorrencia_p 
		and (nr_seq_conta_proc	= nr_seq_conta_proc_p or 
			 nr_seq_conta_mat	= nr_seq_conta_mat_p) 
		and	ie_situacao      = 'I';
		 
		select	max(nr_sequencia) 
		into STRICT	nr_seq_motivo_inat_w 
		from	pls_conta_glosa	 
		where	nr_seq_motivo_glosa = nr_seq_motivo_glosa_p 
		and (nr_seq_conta_proc	= nr_seq_conta_proc_p or 
			nr_seq_conta_mat	= nr_seq_conta_mat_p) 
		and	ie_situacao      = 'I' 
		and	coalesce(nr_seq_ocorrencia_benef::text, '') = '';
		 
		if	((coalesce(nr_seq_ocor_inativa_w::text, '') = '')	and (nr_seq_ocorrencia_p IS NOT NULL AND nr_seq_ocorrencia_p::text <> ''))	or 
			((coalesce(nr_seq_motivo_inat_w::text, '') = '')		and (nr_seq_motivo_glosa_p IS NOT NULL AND nr_seq_motivo_glosa_p::text <> ''))	then 
			CALL pls_inserir_w_glosa_ocor(	nr_seq_analise_p,nr_seq_ocorrencia_p,nr_seq_motivo_glosa_p, 
							null, nm_usuario_p);
							 
			nr_seq_glosa_conta_w := pls_analise_inserir_glosa_item(nr_seq_analise_p, nr_seq_conta_w, nr_seq_conta_proc_p, nr_seq_conta_mat_p, null, nr_seq_ocorrencia_p, nr_seq_motivo_glosa_p, 'N', cd_estabelecimento_p, nm_usuario_p, 'N', nr_seq_glosa_conta_w);
		else 
					 
			if (nr_seq_ocorrencia_p IS NOT NULL AND nr_seq_ocorrencia_p::text <> '')	then 
				update	pls_ocorrencia_benef 
				set	ie_situacao 			= 'A', 
					ie_forma_inativacao		 = NULL, 
					nm_usuario			= nm_usuario_p, 
					dt_atualizacao			= clock_timestamp() 
				where 	nr_sequencia  		= nr_seq_ocor_inativa_w;
				 
				update	pls_conta_glosa 
				set	ie_situacao			= 'A', 
					ie_forma_inativacao		 = NULL, 
					nm_usuario			= nm_usuario_p, 
					dt_atualizacao			= clock_timestamp() 
				where	nr_seq_ocorrencia_benef		= nr_seq_ocor_inativa_w;
			 
			elsif (nr_seq_motivo_glosa_p IS NOT NULL AND nr_seq_motivo_glosa_p::text <> '')	then 
			 
				update	pls_conta_glosa 
				set	ie_situacao			= 'A', 
					ie_forma_inativacao		 = NULL, 
					nm_usuario			= nm_usuario_p, 
					dt_atualizacao			= clock_timestamp() 
				where	nr_sequencia			= nr_seq_motivo_inat_w;
			end if;	
			 
		end if;
		 
		if (nr_seq_ocorrencia_p IS NOT NULL AND nr_seq_ocorrencia_p::text <> '') and (coalesce(nr_seq_ocor_inativa_w::text, '') = '') then 
			 
			select	max(nr_sequencia) 
			into STRICT	nr_seq_ocor_benef_w 
			from	pls_ocorrencia_benef 
			where	nr_seq_ocorrencia = nr_seq_ocorrencia_p 
			and (nr_seq_conta_proc	= nr_seq_conta_proc_p or 
				 nr_seq_conta_mat	= nr_seq_conta_mat_p) 
			and	ie_situacao = 'A';
			 
			if (nr_seq_ocor_benef_w IS NOT NULL AND nr_seq_ocor_benef_w::text <> '') then 
				insert into pls_analise_glo_ocor_grupo(nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					nm_usuario_nrec, 
					dt_atualizacao_nrec, 
					nr_seq_analise, 
					nr_seq_ocor_benef, 
					nr_seq_grupo, 
					nr_seq_fluxo, 
					ie_fluxo_gerado, 
					nm_usuario_analise, 
					dt_analise, 
					ie_status) 
				values (nextval('pls_analise_glo_ocor_grupo_seq'), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nr_seq_analise_p, 
					nr_seq_ocor_benef_w, 
					nr_seq_grupo_atual_p, 
					null, 
					'S', 
					nm_usuario_p, 
					clock_timestamp(), 
					'L');
			end if;
		end if;
		 
		if (nr_seq_ocorrencia_p IS NOT NULL AND nr_seq_ocorrencia_p::text <> '') then 
		 
			select	coalesce(a.ie_glosar_pagamento,'S'), 
				coalesce(a.ie_glosar_faturamento,'S') 
			into STRICT	ie_glosar_pagamento_ocor_w, 
				ie_glosar_faturamento_ocor_w 
			FROM pls_ocorrencia a
LEFT OUTER JOIN tiss_motivo_glosa b ON (a.nr_seq_motivo_glosa = b.nr_sequencia)
WHERE a.nr_sequencia	= nr_seq_ocorrencia_p;
			 
			if (ie_glosar_pagamento_w = 'N') and (ie_glosar_pagamento_ocor_w = 'S') then 
				ie_glosar_pagamento_w	:= 'S';
			end if;
			 
			if (ie_glosar_faturamento_w = 'N') and (ie_glosar_faturamento_ocor_w = 'S') then 
				ie_glosar_faturamento_w	:= 'S';
			end if;
			 
		end if;
		 
		if (nr_seq_motivo_glosa_p IS NOT NULL AND nr_seq_motivo_glosa_p::text <> '') then 
			ie_glosar_pagamento_w	:= 'S';
		end if;
		 
	end if;
	 
	/* Consistir se possui motivo de glosa ativo */
 
	select	count(1) 
	into STRICT	qt_registro_w 
	from	pls_conta_glosa a 
	where (a.nr_seq_conta_proc	= nr_seq_conta_proc_p or 
		a.nr_seq_conta_mat	= nr_seq_conta_mat_p) 
	and	a.ie_situacao		= 'A';
	 
	if (qt_registro_w = 0) and (vl_apresentado_w > vl_liberado_p) then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(207132);
	end if;
	 
	if (ie_glosar_faturamento_w = 'S') and (ie_glosar_pagamento_w = 'S') then 
		ie_tipo_glosa_w	:= 'A';
	elsif (ie_glosar_faturamento_w = 'S') and (ie_glosar_pagamento_w = 'N') then 
		ie_tipo_glosa_w	:= 'F';
	else 
		ie_tipo_glosa_w	:= 'P';
	end if;
 
	if (ie_glosar_pagamento_w = 'S') or 
		((coalesce(nr_seq_ocorrencia_p::text, '') = '') and (coalesce(nr_seq_motivo_glosa_p::text, '') = ''))then 
		 
		ie_tipo_liberacao_w	:= 'AV';
		 
		if (vl_apresentado_w > 0) then 
			vl_base_w	:= vl_apresentado_w;
		else 
			vl_base_w	:= vl_calculado_w;
		end if;
		 
		begin 
			vl_glosa_w	:= vl_base_w - (vl_liberado_p)::numeric;
			vl_unitario_w	:= dividir(vl_liberado_p, qt_liberada_p);
			 
			if (vl_calculado_w > (vl_liberado_p)::numeric ) then 
				vl_saldo_w	:= abs(vl_glosa_w);
			else 
				vl_saldo_w	:= 0;
			end if;
			vl_liberado_p_w := (vl_liberado_p)::numeric;
		exception 
		when others then 
			begin 
				vl_liberado_p_ww:= REPLACE(vl_liberado_p,'.',',');
				vl_liberado_p_w:= REPLACE(vl_liberado_p_ww,' ','');
				vl_glosa_w	:= vl_base_w - vl_liberado_p_w;
				vl_unitario_w	:= dividir(vl_liberado_p_w, qt_liberada_p);
				 
				if (vl_calculado_w > (vl_liberado_p_w)::numeric ) then 
					vl_saldo_w	:= abs(vl_glosa_w);
				else 
					vl_saldo_w	:= 0;
				end if;
				 
			exception 
			when others then 
				--begin 
				vl_liberado_p_ww:= REPLACE(vl_liberado_p,'.',',');
				vl_liberado_p_ww:= REPLACE(vl_liberado_p_ww,' ','');
				vl_liberado_p_w := substr(vl_liberado_p_ww,1,length(vl_liberado_p_ww)-1);
				vl_glosa_w	:= vl_base_w - vl_liberado_p_w;
				vl_unitario_w	:= dividir(vl_liberado_p_w, qt_liberada_p);
				 
				if (vl_calculado_w > (vl_liberado_p_w)::numeric ) then 
					vl_saldo_w	:= abs(vl_glosa_w);
				else 
					vl_saldo_w	:= 0;
				end if;
			end;
		end;
		 
		vl_liberado_p_w := pls_atualiza_conta_item(nr_seq_item_w, ie_tipo_item_w, nr_seq_motivo_glosa_p, vl_unitario_w, vl_liberado_p_w, vl_glosa_w, vl_saldo_w, null, (qt_liberada_p)::numeric , ds_observacao_p, 'A', cd_estabelecimento_p, nm_usuario_p, 'N', null, 'N', ie_tipo_liberacao_w, 'S', (vl_liberado_hi_p)::numeric , (vl_liberado_mat_p)::numeric , (vl_liberado_co_p)::numeric , (vl_lib_taxa_hi_p)::numeric , (vl_lib_taxa_mat_p)::numeric , (vl_lib_taxa_co_p)::numeric );
		 
		if (vl_glosa_w > 0) then 
			ie_status_w	:= 'G';
		else 
			ie_status_w	:= 'L';
		end if;
		 
	end if;
	nr_seq_fluxo_w := pls_gravar_fluxo_analise_item(	nr_seq_analise_p, nr_seq_conta_w, nr_seq_conta_proc_p, nr_seq_conta_mat_p, null, null, nr_seq_grupo_atual_p, ie_status_w, /* Conforme a descrição do campo ie_status */
 
						null, ds_observacao_p, 'N', 'N', nm_usuario_p, 'N', ie_tipo_glosa_w, '7', nr_seq_fluxo_w);
						 
	commit;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_altera_valor_item ( nr_seq_analise_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_proc_partic_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_motivo_glosa_p bigint, ds_observacao_p text, qt_liberada_p pls_conta_proc.qt_procedimento%type, vl_liberado_p pls_conta_proc.vl_liberado%type, vl_liberado_hi_p w_pls_analise_item.vl_liberado_hi%type, vl_liberado_mat_p w_pls_analise_item.vl_liberado_material%type, vl_liberado_co_p w_pls_analise_item.vl_liberado_co%type, vl_lib_taxa_hi_p w_pls_analise_item.vl_lib_taxa_servico%type, vl_lib_taxa_mat_p w_pls_analise_item.vl_lib_taxa_material%type, vl_lib_taxa_co_p w_pls_analise_item.vl_taxa_co%type, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_grupo_atual_p bigint) FROM PUBLIC;

