-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_estornar_alta_medica ( nr_atendimento_p bigint, ie_Alta_Estorno_p text, cd_motivo_alta_p bigint, dt_alta_p timestamp, ds_observacao_p text, nm_usuario_p text, ie_gera_alta_rn_p text default 'S', cd_funcao_p bigint default null) AS $body$
DECLARE



ie_atualiza_apos_alta_w		varchar(2);
qt_proc_w			bigint;
qt_mat_w			bigint;
ie_gerar_alta_atend_rn_w	varchar(1);
cd_estabelecimento_w		bigint;
nr_atend_rn_w			bigint;
ie_atualiza_FimC_LibMed_w	varchar(3);
ie_tipo_orientacao_alta_w	varchar(3);
dt_ini_w			timestamp;
dt_fim_w			timestamp;
cd_medico_evolucao_w		varchar(10);
ie_tipo_evol_w			varchar(3);
ie_evol_clinica_w		varchar(3);
ie_ajuste_lote_w		varchar(3);
nr_seq_evento_w			bigint;
cd_pessoa_fisica_w		varchar(10);
qt_idade_w			bigint;
nr_seq_atepacu_ww	bigint;
nr_seq_unidade_w	bigint;
ie_susp_prescricoes_alta_w		varchar(1);
nr_seq_regra_w			wl_regra_item.nr_sequencia%type;
qt_existe_w					bigint;
cd_setor_atendimento_w	atend_paciente_unidade.cd_setor_atendimento%type;
cd_unidade_basica_w		atend_paciente_unidade.cd_unidade_basica%type;
cd_unidade_compl_w		atend_paciente_unidade.cd_unidade_compl%type;
ie_inativa_item_w		varchar(1);
cd_evolucao_w  bigint;
ie_gerar_clinical_notes_w varchar(1) := 'N';

C01 CURSOR FOR
	SELECT	nr_atendimento
	from	atendimento_paciente
	where	nr_atendimento_mae = nr_atendimento_p
	and	coalesce(dt_alta::text, '') = ''
	and	ie_gerar_alta_atend_rn_w in ('S','Q');
	
C02 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento	= cd_estabelecimento_w
	and	((cd_motivo_alta = cd_motivo_alta_p) or (coalesce(cd_motivo_alta::text, '') = ''))
	and	ie_evento_disp = 'AM'
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)	
	and	coalesce(ie_situacao,'A') = 'A'
	and          coalesce(ie_Alta_Estorno_p,'A') = 'A';

C03 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_regra,
			c.cd_categoria cd_categoria
	from	wl_regra_item a,
			wl_regra_worklist b,
			wl_item c
	where	a.nr_seq_regra = b.nr_sequencia
	and		b.nr_seq_item = c.nr_sequencia
	and		coalesce(c.ie_situacao,'A') = 'A'
	and		coalesce(a.ie_situacao,'A') = 'A'
	and		a.ie_encerrar_alta = 'S';

BEGIN
qt_idade_w	:= coalesce(obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A'),0);

cd_estabelecimento_w		:= wheb_usuario_pck.get_cd_estabelecimento;

ie_atualiza_apos_alta_w		:= obter_valor_param_usuario(67, 204, Obter_perfil_ativo, nm_usuario_p, 0);
ie_atualiza_FimC_LibMed_w	:= Obter_Valor_Param_Usuario(935, 106, Obter_Perfil_Ativo, nm_usuario_p, 0);
ie_tipo_orientacao_alta_w	:= Obter_Valor_Param_Usuario(281, 18, Obter_Perfil_Ativo, nm_usuario_p, 0);
ie_evol_clinica_w		:= Obter_Valor_Param_Usuario(281, 870, Obter_Perfil_Ativo, nm_usuario_p, 0);
ie_ajuste_lote_w		:= Obter_Valor_Param_Usuario(3111, 271, Obter_Perfil_Ativo, nm_usuario_p, 0);
ie_susp_prescricoes_alta_w := Obter_param_Usuario(3111, 162, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_susp_prescricoes_alta_w);
ie_gerar_clinical_notes_w := obter_param_usuario(281, 1644, Obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_gerar_clinical_notes_w);

select 	max(ie_gerar_alta_atend_rn)
into STRICT	ie_gerar_alta_atend_rn_w
from	parametro_atendimento
where	cd_estabelecimento = cd_estabelecimento_w;

if (ie_Alta_Estorno_p = 'A') then

	update	atendimento_paciente
	set	dt_alta_medico		= dt_alta_p,
		cd_motivo_alta_medica	= cd_motivo_alta_p,
		ds_obs_alta_medic	= substr(ds_observacao_p,1,255),
		nm_usuario_alta_medica	= nm_usuario_p,
		cd_funcao_alta_medica	= cd_funcao_p	
	where	nr_atendimento		= nr_atendimento_p;
	
	if (coalesce(ie_ajuste_lote_w,'N') = 'S') then
		CALL gerar_ajustes_ap_lote('A',nr_atendimento_p,nm_usuario_p);
	end if;
	
	CALL executar_evento_agenda_atend(nr_atendimento_p,'GAM',obter_estab_atend(nr_atendimento_p),nm_usuario_p);
	
	if (ie_atualiza_apos_alta_w = 'S') then
	
		select	count(*)
		into STRICT	qt_proc_w
		from 	procedimento_paciente 	x,
			conta_paciente		y
		where 	x.nr_interno_conta = y.nr_interno_conta
		and 	y.nr_atendimento   = nr_atendimento_p
		and 	x.dt_conta > dt_alta_p;

		select	count(*)
		into STRICT	qt_mat_w
		from 	material_atend_paciente x,
			conta_paciente		y
		where 	x.nr_interno_conta = y.nr_interno_conta
		and 	y.nr_atendimento   = nr_atendimento_p
		and 	x.dt_conta > dt_alta_p;
		
		if	((qt_proc_w + qt_mat_w) = 0) then

			update	conta_paciente a
			set	a.dt_periodo_final = dt_alta_p
			where 	a.nr_atendimento = nr_atendimento_p
			and 	a.ie_status_acerto = 1;

		end if;

	end if;
	CALL Suspender_prescr_lib_medic_alt(nr_atendimento_p, nm_usuario_p);
	
	if (ie_atualiza_FimC_LibMed_w = 'S') then
		select	max(dt_atend_medico),
			max(dt_fim_consulta)
		into STRICT	dt_ini_w,
			dt_fim_w
		from	atendimento_paciente
		where	nr_atendimento		= nr_atendimento_p;
		if (not(coalesce(dt_ini_w::text, '') = '')) and (coalesce(dt_fim_w::text, '') = '') then
			CALL Atualizar_datas_pa(nr_atendimento_p,'FC',nm_usuario_p);
		end if;

		select	max(dt_lib_medico)
		into STRICT	dt_ini_w
		from	atendimento_paciente
		where	nr_atendimento		= nr_atendimento_p;
		if (coalesce(dt_ini_w::text, '') = '') then
			CALL Atualizar_datas_pa(nr_atendimento_p,'LM',nm_usuario_p);
		end if;
	end if;
	
	if ((trim(both ds_observacao_p) IS NOT NULL AND (trim(both ds_observacao_p))::text <> '')) and (Obter_Valor_Param_Usuario(281, 826, Obter_Perfil_Ativo, nm_usuario_p, 0) = 'S') then
			
			insert into atendimento_alta(	nr_sequencia,
							nr_atendimento,
							ie_tipo_orientacao,
							dt_atualizacao,
							nm_usuario,
							ds_orientacao,
							ie_desfecho,
							cd_especialidade,
							cd_motivo_alta,
							cd_medico_dest,
							ie_medico_ciente,
							dt_desfecho,
							cd_setor_atendimento,
							dt_liberacao,
							cd_processo_alta,
							qt_caracteres,
							ie_situacao,
							dt_inativacao,
							nm_usuario_inativacao,
							ds_justificativa,
							nr_seq_pepo,
							cd_perfil_ativo,
							nr_seq_assinatura,
							nr_cirurgia,
							dt_registro)
			values (nextval('atendimento_alta_seq'),
				nr_atendimento_p,
				ie_tipo_orientacao_alta_w,
				clock_timestamp(),
				nm_usuario_p,
				ds_observacao_p,
				'A',
				null,
				null,
				null,
				'N',
				clock_timestamp(),
				coalesce(obter_setor_atendimento(nr_atendimento_p),wheb_usuario_pck.get_cd_setor_atendimento),
				clock_timestamp(),
				null,
				length(ds_observacao_p),
				'A',
				null,
				null,
				null,
				null,
				obter_perfil_ativo,
				null,
				null,
				clock_timestamp());
	end if;
		
	if ((trim(both ds_observacao_p) IS NOT NULL AND (trim(both ds_observacao_p))::text <> '')) and (Obter_Valor_Param_Usuario(281, 860, Obter_Perfil_Ativo, nm_usuario_p, 0) = 'S') then
		
		select	max(ie_tipo_evolucao),
			max(cd_pessoa_fisica)
		into STRICT	ie_tipo_evol_w,
			cd_medico_evolucao_w
		from	usuario
		where	nm_usuario = nm_usuario_p;
		
		Insert into evolucao_paciente(	cd_evolucao,
						dt_evolucao,
						ie_tipo_evolucao,
						cd_pessoa_fisica,
						dt_atualizacao,
						nm_usuario,
						nr_atendimento,
						ds_evolucao,
						cd_medico,
						dt_liberacao,
						ie_evolucao_clinica,
						cd_setor_atendimento,
						cd_especialidade,
						cd_medico_parecer,
						ie_recem_nato,
						ie_situacao)
					values (nextval('evolucao_paciente_seq'),
						clock_timestamp(),
						ie_tipo_evol_w,
						obter_pessoa_atendimento(nr_atendimento_p,'C'),
						clock_timestamp(),
						nm_usuario_p,
						nr_atendimento_p,
						substr(ds_observacao_p,1,255),
						cd_medico_evolucao_w,
						clock_timestamp(),
						ie_evol_clinica_w,
						obter_setor_atendimento(nr_atendimento_p),
						null,
						null,
						'N',
						'A');
	end if;

	select 	coalesce(max(ie_inativa_item), 'S')
	into STRICT	ie_inativa_item_w
	from 	motivo_alta
	where 	cd_motivo_alta = cd_motivo_alta_p;
	
	if (ie_susp_prescricoes_alta_w = 'S') and (dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') and (ie_inativa_item_w = 'S') and (cpoe_counter_gerar_alta(nr_atendimento_p) > 0) then
			CALL cpoe_atualizar_dt_fim_alta_j(nr_atendimento_p, dt_alta_p, nm_usuario_p);
	elsif (dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') and (cpoe_counter_gerar_alta(nr_atendimento_p) > 0) and (ie_inativa_item_w = 'S') then
			CALL cpoe_atualizar_ie_baixado_alta(nm_usuario_p,nr_atendimento_p, dt_alta_p);
	end if;	
	
	nr_seq_atepacu_ww	:= Obter_Atepacu_paciente(nr_atendimento_p, 'A');

	select	max(a.nr_seq_interno)
	into STRICT	nr_seq_unidade_w
	from	unidade_atendimento a,
			atend_paciente_unidade b
	where	a.cd_setor_atendimento = b.cd_setor_atendimento
	and		a.cd_unidade_basica = b.cd_unidade_basica
	and		a.cd_unidade_compl = b.cd_unidade_compl
	and		b.nr_seq_interno = nr_seq_atepacu_ww;

	if (coalesce(nr_seq_unidade_w,0) > 0) then				
		CALL gerar_higienizacao_leito_unid(clock_timestamp(),nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento,'AM',nr_seq_unidade_w,null);
	end if;	
	
	for c03_w in C03 loop
		begin
		update	wl_worklist
		set		dt_final_real = clock_timestamp(),
				ie_encerrada_alta = 'S'
		where	nr_atendimento = nr_atendimento_p
		and		nr_seq_regra = c03_w.nr_seq_regra
		and		coalesce(dt_final_real::text, '') = '';
		
		if (c03_w.cd_categoria = 'MT') then
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					ie_encerrada_alta = 'S'
			where	cd_pessoa_fisica = obter_pessoa_atendimento(nr_atendimento_p,'C')
			and		nr_seq_regra = c03_w.nr_seq_regra
			and		coalesce(dt_final_real::text, '') = '';
		end if;
		end;
	end loop;
	
else
	update	atendimento_paciente
	set	dt_alta_medico		 = NULL,
		cd_motivo_alta_medica	 = NULL,
		ds_obs_alta_medic	= substr(ds_observacao_p,1,255),
		nm_usuario_alta_medica	 = NULL,
		cd_funcao_alta_medica	 = NULL
	where	nr_atendimento		= nr_atendimento_p;
	
	select	count(1)
	into STRICT	qt_existe_w
	from	wl_worklist a,
			wl_item b
	where	a.nr_atendimento = nr_atendimento_p
	and		a.nr_seq_item = b.nr_sequencia
	and		coalesce(b.ie_situacao,'A') = 'A'
	and		b.cd_categoria <> 'MT';
	
	if (qt_existe_w > 0) then
		update	wl_worklist
		set		dt_final_real  = NULL,
				ie_encerrada_alta  = NULL
		where	nr_atendimento = nr_atendimento_p
		and		ie_encerrada_alta = 'S';
	end if;
	
	select	coalesce(max(a.nr_sequencia),0)
	into STRICT	nr_seq_regra_w
	from	wl_regra_item a,
			wl_regra_worklist b,
			wl_item c
	where	a.nr_seq_regra = b.nr_sequencia
	and		b.nr_seq_item = c.nr_sequencia
	and		coalesce(c.ie_situacao,'A') = 'A'
	and		coalesce(a.ie_situacao,'A') = 'A'
	and		a.ie_encerrar_alta = 'S'
	and		c.cd_categoria = 'MT';
		
	if (nr_seq_regra_w > 0) then
		update	wl_worklist
		set		dt_final_real  = NULL,
				ie_encerrada_alta  = NULL
		where	cd_pessoa_fisica = obter_pessoa_atendimento(nr_atendimento_p,'C')
		and		nr_seq_regra = nr_seq_regra_w
		and		ie_encerrada_alta = 'S';
	end if;
	
end if;

if (ie_gerar_alta_atend_rn_w = 'S') or
   (ie_gerar_alta_atend_rn_w = 'Q' AND ie_gera_alta_rn_p = 'S') then
open C01;
loop
fetch C01 into	
	nr_atend_rn_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	CALL Gerar_Estornar_Alta_Medica(	nr_atend_rn_w,
					ie_Alta_Estorno_p,
					cd_motivo_alta_p,
					dt_alta_p,
					substr(ds_observacao_p,1,255),
					nm_usuario_p,
					'N',
					cd_funcao_p);
	end;
end loop;
close C01;
end if;

select	max(obter_pessoa_atendimento(nr_atendimento_p,'C'))
into STRICT	cd_pessoa_fisica_w
;

open C02;
loop
fetch C02 into	
	nr_seq_evento_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,null,wheb_usuario_pck.get_nm_usuario,null);
	end;
end loop;
close C02;

if (ie_alta_estorno_p <> 'A') then
	CALL cpoe_estornar_dt_fim_alta(nr_atendimento_p, nm_usuario_p);
end if;

if (ie_alta_estorno_p ='E')then

   select max(coalesce(cd_evolucao,0))
   into STRICT cd_evolucao_w
   from atend_previsao_alta
   where  nr_atendimento = nr_atendimento_p;

if (ie_gerar_clinical_notes_w = 'S' and coalesce(cd_evolucao_w ,0) > 0)then
        begin
            update atend_previsao_alta
            set dt_inativacao=clock_timestamp(),
            nm_usuario_inativacao=nm_usuario_p,
            ie_situacao='I'
            where cd_evolucao=cd_evolucao_w;

            delete from clinical_note_soap_data
			where cd_evolucao=cd_evolucao_w
            and ie_med_rec_type ='MED_DSCHG_REQ'
			and ie_stage = 1 and ie_soap_type = 'P';

			CALL clinical_notes_pck.soap_data_after_delete(cd_evolucao_w);
        end;
	end if;
    end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_estornar_alta_medica ( nr_atendimento_p bigint, ie_Alta_Estorno_p text, cd_motivo_alta_p bigint, dt_alta_p timestamp, ds_observacao_p text, nm_usuario_p text, ie_gera_alta_rn_p text default 'S', cd_funcao_p bigint default null) FROM PUBLIC;

