-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_caixa_tit_receb (nr_documento_p bigint, nr_docto_compl_p bigint, ie_origem_info_p text, ds_erro_p INOUT text) AS $body$
DECLARE


/* -------- Origem da Informação -------- */


/* -- Identifica de onde vem a informação que será gerada no fluxo de caixa -- 
Para títulos a receber serão utilizadas as seguintes origens: 
 TR - Título a receber
 TRB - Baixa do título a receber
 TRT - Tributos a pagar (gerados pelo título a receber)
 */
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
cd_moeda_empresa_w		moeda.cd_moeda%type;
dt_referencia_w			timestamp;
cd_conta_financ_w		conta_financeira.cd_conta_financ%type;
cd_conta_financ_cre_w		conta_financeira.cd_conta_financ%type;
ie_fim_semana_passado_w		parametro_fluxo_caixa.ie_fim_semana_passado%type;
ie_adiant_receb_w		parametro_fluxo_caixa.ie_adiant_receb%type;
ie_tit_rec_canc_w		parametro_fluxo_caixa.ie_tit_rec_canc%type;
ie_tit_pagar_transf_w		parametro_fluxo_caixa.ie_tit_pagar_transf%type;
ie_movto_bco_pend_w		parametro_fluxo_caixa.ie_movto_bco_pend%type;
ie_data_tit_adiant_rec_w	parametro_fluxo_caixa.ie_data_tit_adiant_rec%type;
ie_trans_fin_conta_w		parametro_fluxo_caixa.ie_trans_fin_conta%type;
ie_titulo_caixa_w		parametro_fluxo_caixa.ie_titulo_caixa%type;
ie_dt_credito_banco_cre_w	parametro_fluxo_caixa.ie_dt_credito_banco_cre%type;
ie_tit_rec_fluxo_w		parametro_fluxo_caixa.ie_tit_rec_fluxo%type;
ie_fim_semana_w			parametro_fluxo_caixa.ie_tratar_fim_semana%type;
ds_erro_w			varchar(4000);
vl_fluxo_w			fluxo_caixa_docto.vl_fluxo%type;
vl_titulo_estrang_w  double precision := 0;
cd_moeda_titulo_w  moeda.cd_moeda%type;

/* Fluxo realizado - Baixa do título */

c01 CURSOR FOR
	SELECT	ie_integracao,
		dt_baixa,
		cd_conta_financ,
		sum(vl_titulo) vl_titulo,
		sum(vl_receb_estrang) vl_titulo_estrang,
		cd_moeda,
		0 cd_convenio,
		0 vl_juros,
		0 vl_multa,
		0 vl_desconto,
		0 vl_rec_maior,
		0 vl_outros_acrescimos,
		0 vl_despesa_bancaria,
		0 cd_conta_financ_jcr,
		0 cd_conta_financ_mcr,
		0 cd_conta_financ_dcr,
		0 cd_conta_financ_vlm,
		0 cd_conta_financ_dbcr,
		0 cd_conta_financ_glosa,
		0 vl_glosa,
		ie_origem_titulo,
		nr_seq_classe nr_seq_classe_tit_rec,
		ie_tipo_tit_rec,
		nr_titulo,
		nr_seq_baixa,
		cd_estabelecimento,
		cd_estab_financeiro,
		cd_empresa,
		nr_seq_caixa,
		nr_seq_conta_banco,
		ds_observacao,
		vl_cotacao_baixa
	from	(SELECT	'CR' ie_integracao,
			dt_baixa,
			coalesce(cd_conta_financ,coalesce(obter_conta_transacao(CASE WHEN ie_trans_fin_conta_w='M' THEN nr_seq_trans_financ  ELSE nr_seq_trans_fin END ),cd_conta_financ_cre_w)) cd_conta_financ,
			(dividir_sem_round(
				coalesce(
					CASE WHEN ie_tit_rec_canc_w='N' THEN vl_classificacao  ELSE CASE WHEN ie_situacao='3' THEN vl_original  ELSE vl_classificacao END  END ,
					vl_titulo_alteracao),
				vl_titulo_alteracao) *
			(vl_recebido + vl_titulo)) vl_titulo,
			(dividir_sem_round(
				coalesce(
					CASE WHEN ie_tit_rec_canc_w='N' THEN vl_classificacao  ELSE CASE WHEN ie_situacao='3' THEN vl_original  ELSE vl_classificacao END  END ,
					vl_titulo_alteracao),
				vl_titulo_alteracao) *
			vl_recebido_estrang) vl_receb_estrang,
			coalesce(cd_moeda,cd_moeda_empresa_w) cd_moeda,
			ie_origem_titulo,
			nr_seq_classe,
			ie_tipo_tit_rec,
			nr_titulo,
			nr_sequencia nr_seq_baixa,
			cd_estabelecimento,
			cd_estab_financeiro,
			cd_empresa,
			nr_seq_caixa,
			nr_seq_conta_banco,
			ds_observacao,
			vl_cotacao_baixa
		from (select	pkg_date_utils.start_of(CASE WHEN ie_dt_credito_banco_cre_w='S' THEN coalesce(obter_dt_credito_banco_cre(a.nr_titulo,a.nr_sequencia),CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END )  ELSE CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END  END ,'DD',0) dt_baixa,
				obter_conta_financ_tit_rec(b.nr_titulo,a.nr_sequencia,c.cd_conta_financ) cd_conta_financ,
				f.nr_seq_trans_financ,
				a.nr_seq_trans_fin,
				c.vl_classificacao,
				b.ie_situacao,
				c.vl_original,
				/* Adicionado o decode para não chamar a function quando não houver vl_recurso para a baixa, pois a function retornaria o vl_recebido, evitando a execução da consulta sem necessidade. Problema de performance. */

				CASE WHEN coalesce(a.vl_recurso,0)=0 THEN a.vl_recebido  ELSE obter_vl_recurso_baixa(b.nr_titulo,a.nr_sequencia,a.vl_recebido,pkg_date_utils.start_of(CASE WHEN ie_dt_credito_banco_cre_w='S' THEN coalesce(obter_dt_credito_banco_cre(a.nr_titulo,a.nr_sequencia),CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END )  ELSE CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END  END ,'DD',0)) END  vl_recebido,
				a.vl_recebido_estrang,
				(obter_dados_titulo_receber(b.nr_titulo,'V'))::numeric  vl_titulo_alteracao,
				CASE WHEN obter_conta_financ_regra_fc(k.cd_empresa,'DCR',b.cd_cgc,coalesce(b.cd_convenio_conta,obter_convenio_tit_rec(b.nr_titulo)),pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento) IS NULL THEN 0  ELSE a.vl_descontos END  + coalesce(a.vl_cambial_ativo,0) vl_titulo,
				coalesce(a.cd_moeda, cd_moeda_empresa_w) cd_moeda,
				b.ie_origem_titulo,
				b.nr_seq_classe,
				b.ie_tipo_titulo ie_tipo_tit_rec,
				a.nr_titulo,
				a.nr_sequencia,
				b.cd_estabelecimento,
				coalesce(b.cd_estab_financeiro,k.cd_estab_financeiro) cd_estab_financeiro,
				k.cd_empresa,
				f.nr_seq_caixa,
				coalesce(a.nr_seq_conta_banco,e.nr_seq_conta_banco) nr_seq_conta_banco,
				b.ds_observacao_titulo ds_observacao,
				a.VL_COTACAO vl_cotacao_baixa
			FROM estabelecimento k, tipo_recebimento d, titulo_receber b, titulo_receber_liq a
LEFT OUTER JOIN titulo_receber_classif c ON (a.nr_titulo = c.nr_titulo)
LEFT OUTER JOIN movto_trans_financ f ON (a.nr_seq_movto_trans_fin = f.nr_sequencia)
LEFT OUTER JOIN adiantamento e ON (a.nr_adiantamento = e.nr_adiantamento)
WHERE a.nr_titulo			= b.nr_titulo and b.cd_estabelecimento		= k.cd_estabelecimento and a.cd_tipo_recebimento		= d.cd_tipo_recebimento    and d.ie_fluxo_passado		= 'S' and (b.ie_situacao <> '3' or ie_tit_rec_canc_w = 'S') and b.ie_situacao			<> '5' and a.nr_titulo	= nr_documento_p and a.nr_sequencia	= nr_docto_compl_p and (ie_movto_bco_pend_w in ('N','A','TP') or
				not exists (select	1
				from	movto_banco_pend_baixa x
				where	x.nr_titulo	= a.nr_titulo
				and	x.nr_seq_baixa	= a.nr_sequencia)) and not exists (select	1
				from	movto_trans_financ x
				where ((x.nr_seq_movto_cartao IS NOT NULL AND x.nr_seq_movto_cartao::text <> '') or (x.nr_seq_cheque IS NOT NULL AND x.nr_seq_cheque::text <> ''))
				and	coalesce(x.nr_seq_titulo_receber::text, '') = ''
				and	x.nr_sequencia		= a.nr_seq_movto_trans_fin) and (ie_adiant_receb_w in ('A','TR') or coalesce(a.nr_adiantamento::text, '') = '') /* Adicionado a condição para não chamar a function quando não houver vl_recurso para a baixa, pois a function retornaria "0", evitando a execução da consulta sem necessidade. Problema de performance. */

  and (coalesce(a.nr_seq_retorno::text, '') = ''
				or (coalesce(a.vl_recurso,0) <> 0 
				and obter_vl_recurso_baixa(b.nr_titulo,a.nr_sequencia,0,pkg_date_utils.start_of(CASE WHEN ie_dt_credito_banco_cre_w='S' THEN coalesce(obter_dt_credito_banco_cre(a.nr_titulo,a.nr_sequencia),CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END )  ELSE CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END  END ,'DD',0)) > 0)) and coalesce(a.ie_lib_caixa, 'S')	= 'S' and (coalesce(ie_titulo_caixa_w,'S') = 'S' or
				not exists (select	1
				from	caixa y,
					movto_trans_financ x
				where	x.vl_transacao	<> 0
				and	coalesce(x.nr_seq_titulo_receber::text, '') = ''
				and	coalesce(y.ie_movto_fluxo,'S') = 'S'
				and	x.nr_seq_caixa		= y.nr_sequencia
				and	x.nr_seq_caixa_rec	= a.nr_seq_caixa_rec)) ) alias64
		
union all

		select	'CR' ie_integracao,
			dt_baixa,
			cd_conta_financ,
			vl_titulo,
			vl_receb_estrang,
			coalesce(cd_moeda,cd_moeda_empresa_w) cd_moeda,
			ie_origem_titulo,
			nr_seq_classe,
			ie_tipo_tit_rec,
			nr_titulo,
			nr_sequencia nr_seq_baixa,
			cd_estabelecimento,
			cd_estab_financeiro,
			cd_empresa,
			nr_seq_caixa,
			nr_seq_conta_banco,
			ds_observacao,
			vl_cotacao_baixa
		from	(select	pkg_date_utils.start_of(CASE WHEN ie_dt_credito_banco_cre_w='S' THEN coalesce(obter_dt_credito_banco_cre(a.nr_titulo,a.nr_sequencia),CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END )  ELSE CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END  END ,'DD',0) dt_baixa,
				obter_conta_financ_tit_rec(b.nr_titulo,a.nr_sequencia,coalesce(c.cd_conta_financ,coalesce(Obter_conta_transacao(CASE WHEN ie_trans_fin_conta_w='C' THEN f.nr_seq_trans_financ  ELSE a.nr_seq_trans_fin END ),cd_conta_financ_cre_w))) cd_conta_financ,
				dividir_sem_round(
					coalesce(c.vl_original,(obter_valor_tit_transf(b.nr_titulo, a.dt_recebimento, 'CR'))::numeric ),
					(obter_valor_tit_transf(b.nr_titulo, a.dt_recebimento, 'CR'))::numeric ) *
					/* Adicionado o decode para não chamar a function quando não houver vl_recurso para a baixa, pois a function retornaria o vl_recebido, evitando a execução da consulta sem necessidade. Problema de performance. */

				(CASE WHEN coalesce(a.vl_recurso,0)=0 THEN a.vl_recebido  ELSE obter_vl_recurso_baixa(b.nr_titulo,a.nr_sequencia,a.vl_recebido,pkg_date_utils.start_of(CASE WHEN ie_dt_credito_banco_cre_w='S' THEN coalesce(obter_dt_credito_banco_cre(a.nr_titulo,a.nr_sequencia),CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END )  ELSE CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END  END ,'DD',0)) END  + CASE WHEN obter_conta_financ_regra_fc(k.cd_empresa,'DCR',b.cd_cgc,coalesce(b.cd_convenio_conta,obter_convenio_tit_rec(b.nr_titulo)),pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento) IS NULL THEN 0  ELSE a.vl_descontos END ) + coalesce(a.vl_cambial_ativo,0)  vl_titulo,
				dividir_sem_round(
					coalesce(c.vl_original,(obter_valor_tit_transf(b.nr_titulo, a.dt_recebimento, 'CR'))::numeric ),
					(obter_valor_tit_transf(b.nr_titulo, a.dt_recebimento, 'CR'))::numeric ) * a.vl_recebido_estrang vl_receb_estrang,
				coalesce(a.cd_moeda, cd_moeda_empresa_w) cd_moeda,
				b.ie_origem_titulo,
				b.nr_seq_classe,
				b.ie_tipo_titulo ie_tipo_tit_rec,
				a.nr_titulo,
				a.nr_sequencia,
				b.cd_estabelecimento,
				coalesce(b.cd_estab_financeiro,k.cd_estab_financeiro) cd_estab_financeiro,
				k.cd_empresa,
				f.nr_seq_caixa,
				coalesce(a.nr_seq_conta_banco,e.nr_seq_conta_banco) nr_seq_conta_banco,
				b.ds_observacao_titulo ds_observacao,
				a.VL_COTACAO vl_cotacao_baixa
			FROM estabelecimento k, tipo_recebimento d, titulo_receber b, titulo_receber_liq a
LEFT OUTER JOIN titulo_receber_classif c ON (a.nr_titulo = c.nr_titulo)
LEFT OUTER JOIN movto_trans_financ f ON (a.nr_seq_movto_trans_fin = f.nr_sequencia)
LEFT OUTER JOIN adiantamento e ON (a.nr_adiantamento = e.nr_adiantamento)
WHERE b.cd_estabelecimento		= k.cd_estabelecimento and b.ie_situacao			= '5' and a.nr_titulo			= b.nr_titulo and a.nr_titulo			= nr_documento_p and a.nr_sequencia			= nr_docto_compl_p  and d.ie_fluxo_passado		= 'S' and a.cd_tipo_recebimento		= d.cd_tipo_recebimento and (ie_movto_bco_pend_w in ('N','A','TP') or
				not exists (select	1
				from	movto_banco_pend_baixa x
				where	x.nr_titulo	= a.nr_titulo
				and	x.nr_seq_baixa	= a.nr_sequencia)) and (ie_adiant_receb_w in ('A','TR') or coalesce(a.nr_adiantamento::text, '') = '') and not exists (select	1
				from	movto_trans_financ x
				where ((x.nr_seq_movto_cartao IS NOT NULL AND x.nr_seq_movto_cartao::text <> '') or (x.nr_seq_cheque IS NOT NULL AND x.nr_seq_cheque::text <> ''))
				and	coalesce(x.nr_seq_titulo_receber::text, '') = ''
				and	x.nr_sequencia		= a.nr_seq_movto_trans_fin) /* Adicionado a condição para não chamar a function quando não houver vl_recurso para a baixa, pois a function retornaria "0", evitando a execução da consulta sem necessidade. Problema de performance. */

  and (coalesce(a.nr_seq_retorno::text, '') = '' 
				or (coalesce(a.vl_recurso,0) <> 0 
				and obter_vl_recurso_baixa(b.nr_titulo,a.nr_sequencia,0,pkg_date_utils.start_of(CASE WHEN ie_dt_credito_banco_cre_w='S' THEN coalesce(obter_dt_credito_banco_cre(a.nr_titulo,a.nr_sequencia),CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END )  ELSE CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END  END ,'DD',0)) > 0)) and coalesce(a.ie_lib_caixa, 'S')	= 'S' and ie_tit_pagar_transf_w		= 'S' and (coalesce(ie_titulo_caixa_w,'S') = 'S' or
				not exists (select	1
				from	caixa y,
					movto_trans_financ x
				where	x.vl_transacao	<> 0
				and	coalesce(x.nr_seq_titulo_receber::text, '') = ''
				and	coalesce(y.ie_movto_fluxo,'S') = 'S'
				and	x.nr_seq_caixa		= y.nr_sequencia
				and	x.nr_seq_caixa_rec	= a.nr_seq_caixa_rec)) ) alias130
		) alias131
	group by	ie_integracao,
		dt_baixa,
		cd_conta_financ,
		cd_moeda,
		ie_origem_titulo,
		nr_seq_classe,
		ie_tipo_tit_rec,
		nr_titulo,
		nr_seq_baixa,
		cd_estabelecimento,
		cd_estab_financeiro,
		cd_empresa,
		nr_seq_caixa,
		nr_seq_conta_banco,
		ds_observacao,
		vl_cotacao_baixa
	
union all

	select	'CR' ie_integracao,
		pkg_date_utils.start_of(CASE WHEN ie_dt_credito_banco_cre_w='S' THEN coalesce(obter_dt_credito_banco_cre(a.nr_titulo,a.nr_sequencia),CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END )  ELSE CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END  END ,'DD',0) dt_baixa,
		0 cd_conta_financ,
		0 vl_titulo,
		0 vl_titulo_estrang,
		coalesce(a.cd_moeda,cd_moeda_empresa_w) cd_moeda,
		0 cd_convenio,
		coalesce(sum(dividir_sem_round(coalesce(c.vl_classificacao, (obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ),
				(obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ) * a.vl_juros),0) vl_juros,
		coalesce(sum(dividir_sem_round(coalesce(c.vl_classificacao, (obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ),
				(obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ) * a.vl_multa),0) vl_multa,
		coalesce(sum(dividir_sem_round(coalesce(c.vl_classificacao, (obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ),
				(obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ) * a.vl_descontos),0) vl_desconto,
		coalesce(sum(dividir_sem_round(coalesce(c.vl_classificacao, (obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ),
				(obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ) * a.vl_rec_maior),0) vl_rec_maior,
		0 vl_outros_acrescimos,
		coalesce(sum(dividir_sem_round(coalesce(c.vl_classificacao, (obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ),
				(obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ) * a.vl_despesa_bancaria),0) vl_despesa_bancaria,
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'JCR', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0) cd_conta_financ_jcr,
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'MCR', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0) cd_conta_financ_mcr,
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'DCR', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0) cd_conta_financ_dcr,
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'VLM', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0) cd_conta_financ_vlm,
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'DBCR', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0) cd_conta_financ_dbcr,
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'GLO', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0) cd_conta_financ_glosa,
		coalesce(sum(dividir_sem_round(coalesce(c.vl_classificacao, (obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ),
				(obter_dados_titulo_receber(b.nr_titulo, 'V'))::numeric ) * a.vl_glosa),0) vl_glosa,
		b.ie_origem_titulo ie_origem_titulo,
		b.nr_seq_classe nr_seq_classe_tit_rec,
		b.ie_tipo_titulo ie_tipo_tit_rec,
		a.nr_titulo,
		a.nr_sequencia,
		b.cd_estabelecimento,
		coalesce(b.cd_estab_financeiro,k.cd_estab_financeiro) cd_estab_financeiro,
		k.cd_empresa,
		f.nr_seq_caixa,
		coalesce(a.nr_seq_conta_banco,e.nr_seq_conta_banco) nr_seq_conta_banco,
		b.ds_observacao_titulo ds_observacao,
		a.VL_COTACAO vl_cotacao_baixa
	FROM estabelecimento k, tipo_recebimento d, titulo_receber b, titulo_receber_liq a
LEFT OUTER JOIN adiantamento e ON (a.nr_adiantamento = e.nr_adiantamento)
LEFT OUTER JOIN titulo_receber_classif c ON (a.nr_titulo = c.nr_titulo)
LEFT OUTER JOIN movto_trans_financ f ON (a.nr_seq_movto_trans_fin = f.nr_sequencia)
WHERE a.nr_titulo		= b.nr_titulo  and b.cd_estabelecimento	= k.cd_estabelecimento  and a.nr_titulo		= nr_documento_p and a.nr_sequencia		= nr_docto_compl_p and coalesce(a.ie_lib_caixa,'S')	= 'S' and not exists (select	1
		from	movto_trans_financ x
		where ((x.nr_seq_movto_cartao IS NOT NULL AND x.nr_seq_movto_cartao::text <> '') or (x.nr_seq_cheque IS NOT NULL AND x.nr_seq_cheque::text <> ''))
		and	coalesce(x.nr_seq_titulo_receber::text, '') = ''
		and	x.nr_sequencia	= a.nr_seq_movto_trans_fin) and coalesce(a.nr_seq_retorno::text, '') = '' and a.cd_tipo_recebimento	= d.cd_tipo_recebimento and d.ie_fluxo_passado	= 'S' and b.ie_situacao		<> '3' and (ie_adiant_receb_w in ('A','TR') or coalesce(a.nr_adiantamento::text, '') = '') and (ie_movto_bco_pend_w in ('N','A','TP') 
		or not exists (select	1
				from	movto_banco_pend_baixa x
				where	x.nr_titulo = a.nr_titulo
				and	x.nr_seq_baixa = a.nr_sequencia)) and (coalesce(ie_titulo_caixa_w,'S') = 'S' 
		or not exists (select	1
				from	caixa y,
					movto_trans_financ x
				where	x.vl_transacao	<> 0
				and	coalesce(x.nr_seq_titulo_receber::text, '') = ''
				and	coalesce(y.ie_movto_fluxo,'S') = 'S'
				and	x.nr_seq_caixa		= y.nr_sequencia
				and	x.nr_seq_caixa_rec	= a.nr_seq_caixa_rec)) group by
		pkg_date_utils.start_of(CASE WHEN ie_dt_credito_banco_cre_w='S' THEN coalesce(obter_dt_credito_banco_cre(a.nr_titulo,a.nr_sequencia),CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END )  ELSE CASE WHEN ie_data_tit_adiant_rec_w='S' THEN coalesce(e.dt_adiantamento,a.dt_recebimento)  ELSE a.dt_recebimento END  END ,'DD',0),
		coalesce(a.cd_moeda,cd_moeda_empresa_w),
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'JCR', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0),
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'MCR', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0),
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'DCR', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0),
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'VLM', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0),
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'DBCR', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0),
		coalesce(obter_conta_financ_regra_fc(k.cd_empresa, 'GLO', b.cd_cgc,coalesce(b.cd_convenio_conta, obter_convenio_tit_rec(b.nr_titulo)),
					pkg_date_utils.start_of(a.dt_recebimento,'DD',0),b.cd_estabelecimento),0),
		b.ie_origem_titulo,
		b.nr_seq_classe,
		b.ie_tipo_titulo,
		a.nr_titulo,
		a.nr_sequencia,
		b.cd_estabelecimento,
		coalesce(b.cd_estab_financeiro,k.cd_estab_financeiro),
		k.cd_empresa,
		f.nr_seq_caixa,
		coalesce(a.nr_seq_conta_banco,e.nr_seq_conta_banco),
		b.ds_observacao_titulo,
		a.VL_COTACAO;

vet01		c01%rowtype;

/* Fluxo realizado - Tributos a pagar do título a receber */

c02 CURSOR FOR
	SELECT	'CP' ie_integracao,
		pkg_date_utils.start_of(b.dt_emissao,'DD',0) dt_emissao,
		c.cd_conta_financ cd_conta_financ,
		sum(a.vl_tributo) vl_tributo,
		coalesce(b.cd_moeda, cd_moeda_empresa_w) cd_moeda,
		b.ie_origem_titulo ie_origem_titulo,
		b.nr_seq_classe nr_seq_classe_tit_rec,
		b.ie_tipo_titulo ie_tipo_tit_rec,
		b.nr_titulo nr_titulo,
		b.cd_estabelecimento cd_estabelecimento,
		coalesce(b.cd_estab_financeiro,k.cd_estab_financeiro) cd_estab_financeiro,
		k.cd_empresa cd_empresa,
		b.nr_seq_conta_banco nr_seq_conta_banco
	from	tributo c,
		titulo_receber_trib a,
		titulo_receber b,
		estabelecimento k
	where	c.cd_tributo		= a.cd_tributo
	and	a.nr_titulo		= b.nr_titulo
	and	b.cd_estabelecimento	= k.cd_estabelecimento
	and	b.ie_situacao		<> '3'
	and	(c.cd_conta_financ IS NOT NULL AND c.cd_conta_financ::text <> '')
	and	a.ie_origem_tributo	= 'D'
	and	b.nr_titulo		= nr_documento_p
	and	coalesce(b.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w    --Projeto Multimoeda - Só traz registro para moeda nacional
	group by	pkg_date_utils.start_of(b.dt_emissao,'DD',0),
		c.cd_conta_financ,
		coalesce(b.cd_moeda, cd_moeda_empresa_w),
		b.ie_origem_titulo,
		b.nr_seq_classe,
		b.ie_tipo_titulo,
		b.nr_titulo,
		b.cd_estabelecimento,
		coalesce(b.cd_estab_financeiro,k.cd_estab_financeiro),
		k.cd_empresa,
		b.nr_seq_conta_banco;
		
vet02		c02%rowtype;

/* Fluxo a realizar/previsto */

c03 CURSOR FOR
	SELECT	'CR' ie_integracao,
		dt_vencimento,
		cd_conta_financ,
		CASE WHEN 	ie_tit_rec_fluxo_w='T' THEN			CASE WHEN coalesce(vl_classificacao::text, '') = '' THEN vl_saldo_titulo - vl_recurso  ELSE vl_classificacao * dividir_sem_round(vl_saldo_titulo - vl_recurso, vl_bruto) END  WHEN 	ie_tit_rec_fluxo_w='L' THEN 			CASE WHEN coalesce(vl_classificacao::text, '') = '' THEN  PERFORM dividir_sem_round(vl_saldo_titulo - vl_recurso, vl_bruto) * vl_liquido  ELSE (dividir_sem_round(vl_classificacao, vl_titulo) * vl_liquido) *					dividir_sem_round(vl_saldo_titulo - vl_recurso, vl_bruto) END 			 END  vl_titulo,
		cd_moeda,
		cd_centro_custo,
		ie_origem_titulo,
		nr_seq_classe_tit_rec,
		ie_tipo_tit_rec,
		nr_titulo,
		cd_estabelecimento,
		cd_estab_financeiro,
		cd_empresa,
		nr_seq_conta_banco,
		vl_titulo_estrang
	from (SELECT	OBTER_DT_VENC_TIT_REC(a.cd_cgc, OBTER_VENC_TITULO(null, a.nr_titulo), 'N', c.cd_banco, a.cd_pessoa_fisica) dt_vencimento,
			coalesce(b.cd_conta_financ, cd_conta_financ_cre_w) cd_conta_financ,
			b.vl_classificacao,
			a.vl_saldo_titulo,
			a.vl_titulo,
			(obter_dados_titulo_receber(a.nr_titulo,'V'))::numeric  vl_bruto,
			(obter_dados_titulo_receber(a.nr_titulo,'VLL'))::numeric  vl_liquido,
			a.cd_moeda,
			b.cd_centro_custo,
			a.ie_origem_titulo,
			a.nr_seq_classe nr_seq_classe_tit_rec,
			a.ie_tipo_titulo ie_tipo_tit_rec,
			obter_vl_recurso_titulo(a.nr_titulo) vl_recurso,
			a.nr_titulo nr_titulo,
			a.cd_estabelecimento cd_estabelecimento,
			coalesce(a.cd_estab_financeiro,d.cd_estab_financeiro) cd_estab_financeiro,
			d.cd_empresa cd_empresa,
			a.nr_seq_conta_banco nr_seq_conta_banco,
			a.vl_titulo_estrang vl_titulo_estrang
		FROM estabelecimento d, titulo_receber a
LEFT OUTER JOIN titulo_receber_classif b ON (a.nr_titulo = b.nr_titulo)
LEFT OUTER JOIN banco_estabelecimento c ON (a.nr_seq_conta_banco = c.nr_sequencia)
WHERE a.cd_estabelecimento	= d.cd_estabelecimento and a.nr_titulo		= nr_documento_p and a.vl_saldo_titulo	> 0 and a.ie_situacao		= '1' ) alias16
	
union all

	/* Glosas a recuperar */

	select	'CR' ie_integracao,
		dt_vencimento,
		cd_conta_financ,
		vl_recurso,
		cd_moeda,
		null cd_centro_custo,
		ie_origem_titulo,
		nr_seq_classe_tit_rec,
		ie_tipo_tit_rec,
		nr_titulo,
		cd_estabelecimento,
		cd_estab_financeiro,
		cd_empresa,
		nr_seq_conta_banco,
		vl_titulo_estrang
	from	(select	OBTER_DT_VENC_TIT_REC(a.cd_cgc, OBTER_VENC_TITULO(null, a.nr_titulo), 'N', c.cd_banco, a.cd_pessoa_fisica) dt_vencimento,
			d.cd_conta_financ,
			a.cd_moeda,
			a.ie_origem_titulo,
			a.nr_seq_classe nr_seq_classe_tit_rec,
			a.ie_tipo_titulo ie_tipo_tit_rec,
			obter_vl_recurso_titulo(a.nr_titulo) vl_recurso,
			a.nr_titulo nr_titulo,
			a.cd_estabelecimento cd_estabelecimento,
			coalesce(a.cd_estab_financeiro,e.cd_estab_financeiro) cd_estab_financeiro,
			e.cd_empresa cd_empresa,
			a.nr_seq_conta_banco nr_seq_conta_banco,
			a.vl_titulo_estrang vl_titulo_estrang
		FROM estabelecimento e, transacao_financeira d, titulo_receber_liq b, titulo_receber a
LEFT OUTER JOIN banco_estabelecimento c ON (a.nr_seq_conta_banco = c.nr_sequencia)
WHERE (d.cd_conta_financ IS NOT NULL AND d.cd_conta_financ::text <> '') and b.nr_seq_trans_fin	= d.nr_sequencia and a.cd_estabelecimento	= e.cd_estabelecimento and a.nr_titulo		= b.nr_titulo and a.nr_titulo		= nr_documento_p and b.nr_sequencia = (select max(x.nr_sequencia)
					from	titulo_receber_liq x 
					where	x.nr_titulo	= a.nr_titulo
					and	not exists (select	1
						from	titulo_receber_liq w
						where	w.nr_seq_liq_origem	= x.nr_sequencia
						and	w.nr_titulo		= x.nr_titulo)
					and	coalesce(x.nr_seq_liq_origem::text, '') = ''
					and	coalesce(x.vl_recurso,0) <> 0)  and a.vl_saldo_titulo	> 0 and a.ie_situacao		= '1' ) alias27
	where	coalesce(vl_recurso,0)	<> 0;

vet03		c03%rowtype;

c04 CURSOR FOR
	SELECT coalesce(vl_recebido_estrang,0) vl_titulo_estrang,
	coalesce(VL_RECEBIDO,0) VL_BAIXA,
	cd_moeda cd_moeda,
	nr_titulo nr_titulo
	from titulo_receber_liq
	where nr_titulo = nr_documento_p;
vet04		c04%rowtype;


BEGIN
	/* Busca o estabelecimento do título para buscar os parâmetros do fluxo. */

	begin
		select	cd_estabelecimento,
			obter_moeda_padrao_empresa(cd_estabelecimento,'E')
		into STRICT	cd_estabelecimento_w,
			cd_moeda_empresa_w
		from	titulo_receber
		where	nr_titulo = nr_documento_p;
	exception when no_data_found then
		/* Título a receber não encontrado ou sem estabelecimento informado.*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(856346);
	end;
	
	/* Busca os parâmetros do fluxo de caixa necessários para esta informação. */

	begin
		select	coalesce(max(cd_conta_financ_cre),1),
			coalesce(max(ie_fim_semana_passado),'N'),
			coalesce(max(ie_adiant_receb),'A'),
			coalesce(max(ie_tit_rec_canc), 'N'),
			coalesce(max(ie_tit_pagar_transf),'S'),
			coalesce(max(ie_movto_bco_pend),'N'),
			coalesce(max(ie_data_tit_adiant_rec),'N'),
			coalesce(max(ie_trans_fin_conta),'M'),
			coalesce(max(ie_titulo_caixa),'S'),
			coalesce(max(ie_dt_credito_banco_cre), 'N'),
			coalesce(max(ie_tit_rec_fluxo), 'T'),
			coalesce(max(ie_tratar_fim_semana),'N')
		into STRICT 	cd_conta_financ_cre_w,
			ie_fim_semana_passado_w,
			ie_adiant_receb_w,
			ie_tit_rec_canc_w,
			ie_tit_pagar_transf_w,
			ie_movto_bco_pend_w,
			ie_data_tit_adiant_rec_w,
			ie_trans_fin_conta_w,
			ie_titulo_caixa_w,
			ie_dt_credito_banco_cre_w,
			ie_tit_rec_fluxo_w,
			ie_fim_semana_w
		from	parametro_fluxo_caixa
		where	cd_estabelecimento	= cd_estabelecimento_w;
	exception when no_data_found then
		/* Parâmetros do fluxo de caixa não cadastrados! */

		CALL wheb_mensagem_pck.exibir_mensagem_abort(197611);
	end;
	
			open c04;
			loop
			fetch c04 into
				vet04;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				begin
				
				SELECT CD_MOEDA
				INTO STRICT cd_moeda_titulo_w
				FROM TITULO_RECEBER
				WHERE NR_TITULO = nr_documento_p;				
						
				if (cd_moeda_empresa_w = vet04.cd_moeda) then
					cd_moeda_titulo_w := cd_moeda_titulo_w;
				else
					cd_moeda_titulo_w := vet04.cd_moeda;
				end if;		
				
				if (vet04.vl_titulo_estrang = 0) then
					vl_titulo_estrang_w := vl_titulo_estrang_w + (vet04.VL_BAIXA / coalesce(OBTER_COTACAO_MOEDA_TITULO(cd_moeda_titulo_w, vet04.NR_TITULO, 'CR'),1));
				else
					vl_titulo_estrang_w := vl_titulo_estrang_w + vet04.vl_titulo_estrang;
				end if;			
			end;
			end loop;
			close c04;	
				
	
	/* Inicia a geração das informações das baixas dos títulos. */

	if (ie_origem_info_p = 'TRB' and (nr_documento_p IS NOT NULL AND nr_documento_p::text <> '') and (nr_docto_compl_p IS NOT NULL AND nr_docto_compl_p::text <> '')) then
		begin
			/* Remove os registros da baixa que está sendo processada para incluir novamente */

			CALL remove_docto_fluxo_caixa(nr_documento_p,nr_docto_compl_p,ie_origem_info_p,null,'S');
			
			open c01;
			loop
			fetch c01 into
				vet01;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin
					
					dt_referencia_w := vet01.dt_baixa;
					
					if (ie_fim_semana_passado_w = 'S') then
						if (pkg_date_utils.start_of(vet01.dt_baixa,'MONTH',0) <>
							pkg_date_utils.start_of(obter_proximo_dia_util(vet01.cd_estabelecimento, vet01.dt_baixa),'MONTH',0)) then
							dt_referencia_w := obter_dia_anterior_util(vet01.cd_estabelecimento, vet01.dt_baixa);
						else
							dt_referencia_w	:= obter_proximo_dia_util(vet01.cd_estabelecimento, vet01.dt_baixa);
						end if;
					end if;
					
					cd_conta_financ_w := vet01.cd_conta_financ;
					
					if (vet01.cd_conta_financ = 0) and (vet01.vl_titulo <> 0) then

						cd_conta_financ_w := obter_conta_financeira(	'E', vet01.cd_estabelecimento, 0, 0, 0, 0, vet01.cd_convenio, null, null, cd_conta_financ_w, null, null, null, null, null, null, null, null, vet01.ie_origem_titulo, null, vet01.nr_seq_classe_tit_rec, null, null, null, null, null, null, vet01.ie_tipo_tit_rec, vet01.cd_moeda);
					end if;
					
					
					/* Projeto Multimoeda - Os valores de multa, juros, desconto, recebimento a maior, despesa bancária e glosa só devem ser gravados em moeda nacional,
							portanto as chamadas abaixo só ocorrerão quando o fluxo for gerado em moeda nacional. */
					if (vet01.cd_conta_financ_mcr > 0) and (vet01.vl_multa <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then
						
						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_mcr,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									vet01.vl_multa);
					end if;

					if (vet01.cd_conta_financ_jcr > 0) and (vet01.vl_juros <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_jcr,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									vet01.vl_juros);
					end if;

					if (vet01.cd_conta_financ_dcr > 0) and (vet01.vl_desconto <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_dcr,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									vet01.vl_desconto);
					end if;

					if (vet01.cd_conta_financ_vlm > 0) and (vet01.vl_rec_maior <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_vlm,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									vet01.vl_rec_maior);
					end if;

					if (vet01.cd_conta_financ_dbcr > 0) and (vet01.vl_despesa_bancaria <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_dbcr,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									vet01.vl_despesa_bancaria);
					end if;

					if (vet01.cd_conta_financ_glosa > 0) and (vet01.vl_glosa <> 0)
						and (coalesce(vet01.cd_moeda,cd_moeda_empresa_w) = cd_moeda_empresa_w) then

						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet01.cd_conta_financ_glosa,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									vet01.vl_glosa);
					end if;
					
					if (cd_conta_financ_w <> 0) then
					
					SELECT CD_MOEDA
					INTO STRICT cd_moeda_titulo_w
					FROM TITULO_RECEBER
					WHERE NR_TITULO = vet01.nr_titulo;

						if (cd_moeda_empresa_w = vet01.cd_moeda) then
							cd_moeda_titulo_w := cd_moeda_titulo_w;
						else
							cd_moeda_titulo_w := vet01.cd_moeda;
						end if;					
						
						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									cd_conta_financ_w,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									vet01.cd_moeda,
									vet01.ds_observacao,
									'P',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_conta_banco,
									vet01.nr_seq_caixa,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_titulo,
									vet01.nr_seq_baixa,
									vet01.vl_titulo,
									null,
									coalesce(vet01.vl_titulo_estrang, vet01.vl_titulo / coalesce(OBTER_COTACAO_MOEDA_TITULO(cd_moeda_titulo_w, vet01.nr_titulo, 'CR' ),1)),
									vet01.vl_cotacao_baixa);

					end if;
				exception when others then
					ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
				end;
			end loop;
			close c01;
		exception when others then
			ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
		end;
	end if;
	
	/* Inicia a geração das informações dos tributos a pagar do título a receber */

	if (ie_origem_info_p = 'TRT' and (nr_documento_p IS NOT NULL AND nr_documento_p::text <> '')) then
		begin
			/* Remove os registros do título que está sendo processado para incluir novamente */

			CALL remove_docto_fluxo_caixa(nr_documento_p,nr_docto_compl_p,ie_origem_info_p,null,'S');
			
			open c02;
			loop
			fetch c02 into
				vet02;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
					dt_referencia_w := vet02.dt_emissao;
					
					if (ie_fim_semana_passado_w = 'S') then
						if (pkg_date_utils.start_of(vet02.dt_emissao,'MONTH',0) <>
							pkg_date_utils.start_of(obter_proximo_dia_util(vet02.cd_estabelecimento, vet02.dt_emissao),'MONTH',0)) then
							dt_referencia_w := obter_dia_anterior_util(vet02.cd_estabelecimento, vet02.dt_emissao);
						else
							dt_referencia_w	:= obter_proximo_dia_util(vet02.cd_estabelecimento, vet02.dt_emissao);
						end if;
					end if;
					
					if (vet02.cd_conta_financ <> 0) then
						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									vet02.cd_conta_financ,
									vet02.cd_empresa,
									vet02.cd_estabelecimento,
									vet02.cd_estab_financeiro,
									vet02.cd_moeda,
									null,
									'P',
									vet02.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet02.nr_seq_conta_banco,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet02.nr_titulo,
									null,
									vet02.vl_tributo);
					end if;
				exception when others then
					ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
				end;
			end loop;
			close c02;
		exception when others then
			ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
		end;
	end if;
	
	/* Inicia a geração das informações dos títulos a receber em aberto. */

	if (ie_origem_info_p = 'TR' and (nr_documento_p IS NOT NULL AND nr_documento_p::text <> '')) then
		begin
			/* Remove os registros do título que está sendo processado para incluir novamente */

			CALL remove_docto_fluxo_caixa(nr_documento_p,nr_docto_compl_p,ie_origem_info_p,null,'S');
				
			open c03;
			loop
			fetch c03 into
				vet03;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				begin
					dt_referencia_w := vet03.dt_vencimento;
					
					if (ie_fim_semana_w = 'S') then
						if (pkg_date_utils.start_of(vet03.dt_vencimento,'MONTH',0) <>
							pkg_date_utils.start_of(obter_proximo_dia_util(vet03.cd_estabelecimento, vet03.dt_vencimento),'MONTH',0)) then
							dt_referencia_w := obter_dia_anterior_util(vet03.cd_estabelecimento, vet03.dt_vencimento);
						else
							dt_referencia_w	:= obter_proximo_dia_util(vet03.cd_estabelecimento, vet03.dt_vencimento);
						end if;
					end if;
					
					cd_conta_financ_w := vet03.cd_conta_financ;
					
					if (vet03.cd_conta_financ = 0) and (vet03.vl_titulo <> 0) then

						cd_conta_financ_w := obter_conta_financeira(	'E', vet03.cd_estabelecimento, 0, 0, 0, 0, 0, null, vet03.cd_centro_custo, cd_conta_financ_w, null, null, null, null, null, null, null, null, vet03.ie_origem_titulo, null, vet03.nr_seq_classe_tit_rec, null, null, null, null, null, null, vet03.ie_tipo_tit_rec, vet03.cd_moeda);
					end if;
					
					if (cd_conta_financ_w <> 0) then
						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									cd_conta_financ_w,
									vet03.cd_empresa,
									vet03.cd_estabelecimento,
									vet03.cd_estab_financeiro,
									vet03.cd_moeda,
									null,
									'R',
									vet03.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									vet03.nr_seq_conta_banco,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet03.nr_titulo,
									null,
									vet03.vl_titulo,
									coalesce(vet03.vl_titulo_estrang,0),
									coalesce(vet03.vl_titulo_estrang - vl_titulo_estrang_w,0));
					end if;
				exception when others then
					ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
				end;
			end loop;
			close c02;
		exception when others then
			ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
		end;
	end if;
	commit;
	
	ds_erro_p := ds_erro_w;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_caixa_tit_receb (nr_documento_p bigint, nr_docto_compl_p bigint, ie_origem_info_p text, ds_erro_p INOUT text) FROM PUBLIC;

