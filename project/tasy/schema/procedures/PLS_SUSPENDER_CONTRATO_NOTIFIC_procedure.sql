-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_suspender_contrato_notific ( nr_seq_notific_pagador_p bigint, nr_seq_motivo_p bigint, ds_observacao_p text, nr_seq_lote_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Suspender o atendimento do pagador notificado
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
-------------------------------------------------------------------------------------------------------------------
Referências:
	OPS - Controle de notificações de atraso
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_tit_liquidado_w		varchar(3);
ie_commit_w			varchar(1);
ie_final			varchar(1);
nr_seq_pagador_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_segurado_w		bigint;
qt_liquidados_w			bigint;
nr_seq_lote_w			bigint;
nr_seq_regra_susp_w		bigint;
qt_titulos_w			bigint;
nr_seq_mensalidade_w		pls_mensalidade.nr_sequencia%type;
ie_suspensao_atend_w     	varchar(1);
ds_nr_processo_w		varchar(255);
ie_resc_sem_confirm_receb_w	pls_notificacao_regra.ie_exige_confirmacao_receb%type;

C01 CURSOR FOR
	SELECT	distinct
		a.nr_seq_contrato,
		b.nr_seq_pagador,
		b.nr_seq_mensalidade
	from	pls_notificacao_item	a,
		titulo_receber		b,
		pls_notificacao_pagador	c
	where	a.nr_titulo			= b.nr_titulo
	and	c.nr_seq_pagador		= b.nr_seq_pagador
	and	c.nr_sequencia			= a.nr_seq_notific_pagador
	and	a.nr_seq_notific_pagador	= nr_seq_notific_pagador_p
	and	a.ie_suspender_contrato		= 'S'
	and	coalesce(c.ie_suspensao,'S') = 'S'
	and	((c.dt_recebimento_notif IS NOT NULL AND c.dt_recebimento_notif::text <> '') or (ie_resc_sem_confirm_receb_w = 'S'));


BEGIN

if (coalesce(nr_seq_lote_p::text, '') = '') then
	select	max(a.nr_seq_lote),
		max(a.nr_seq_regra_susp)
	into STRICT	nr_seq_lote_w,
		nr_seq_regra_susp_w
	from	pls_notificacao_pagador	a
	where	a.nr_sequencia	= nr_seq_notific_pagador_p;

	ie_commit_w	:= 'S';
else
	select	max(a.nr_seq_regra_susp)
	into STRICT	nr_seq_regra_susp_w
	from	pls_notificacao_pagador	a
	where	a.nr_sequencia	= nr_seq_notific_pagador_p;

	nr_seq_lote_w	:= nr_seq_lote_p;

	ie_commit_w	:= 'N';
end if;

select	coalesce(max(a.ie_exige_confirmacao_receb),'N')
into STRICT	ie_resc_sem_confirm_receb_w
from	pls_notificacao_regra a,
	pls_notificacao_lote b
where	a.nr_sequencia	= b.nr_seq_regra
and	b.nr_sequencia	= nr_seq_lote_w;

select	coalesce(max(a.nr_sequencia),0)
into STRICT	nr_seq_regra_susp_w
from	pls_notificacao_pagador	d,
	pls_regra_suspensao	a,
	pls_notificacao_regra	b,
	pls_notificacao_lote	c
where	a.nr_seq_regra_geracao	= b.nr_sequencia
and	b.nr_sequencia		= c.nr_seq_regra
and	c.nr_sequencia		= d.nr_seq_lote
and	d.nr_sequencia		= nr_seq_notific_pagador_p
and	trunc(clock_timestamp(),'dd') between trunc(coalesce(a.dt_inicio_vigencia,clock_timestamp()),'dd') and trunc(coalesce(a.dt_fim_vigencia,clock_timestamp()),'dd');

select	count(*)
into STRICT	qt_liquidados_w
from	pls_notificacao_item	a,
	titulo_receber		c
where	a.nr_titulo		= c.nr_titulo
and	a.nr_seq_notific_pagador = nr_seq_notific_pagador_p
and	(c.dt_liquidacao IS NOT NULL AND c.dt_liquidacao::text <> '')
and	c.ie_situacao	<> '6'; /* liquidado por perdas */
select	coalesce(max(a.ie_tit_liquidado),'UT')
into STRICT	ie_tit_liquidado_w
from	pls_regra_suspensao	a
where	a.nr_sequencia	= nr_seq_regra_susp_w;

if (ie_tit_liquidado_w = 'UT') then
	if (qt_liquidados_w > 0) then
		if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
			goto final;
		else
			CALL wheb_mensagem_pck.exibir_mensagem_abort(177262);
		end if;
	end if;
else
	select	count(*)
	into STRICT	qt_liquidados_w
	from	pls_notificacao_item	a,
		titulo_receber		c
	where	a.nr_titulo		= c.nr_titulo
	and	a.nr_seq_notific_pagador = nr_seq_notific_pagador_p;

	if (qt_titulos_w = qt_liquidados_w) then
		if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
			goto final;
		else
			CALL wheb_mensagem_pck.exibir_mensagem_abort(177263);
		end if;
	end if;
end if;

open C01;
loop
fetch C01 into
	nr_seq_contrato_w,
	nr_seq_pagador_w,
	nr_seq_mensalidade_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	begin
	ie_suspensao_atend_w 	:= pls_obter_processo_jud_notif(nr_seq_lote_w, nr_seq_pagador_w, nr_seq_mensalidade_w, 'PSA');
	exception
	when others then
		ie_suspensao_atend_w := 'N';
	end;

	if (ie_suspensao_atend_w  = 'N') then
		ds_nr_processo_w := pls_obter_processo_jud_notif(nr_seq_lote_w, nr_seq_pagador_w, nr_seq_mensalidade_w, 'NRP');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(337228,'NR_PROCESSO_P=' ||ds_nr_processo_w);
	end if;

	CALL pls_atualizar_susp_atend(null,
				nr_seq_notific_pagador_p,
				'S',
				nr_seq_motivo_p,
				ds_observacao_p,
				nm_usuario_p,
				'N',
				'N',
				null);

	update	pls_contrato_pagador a
	set	dt_suspensao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_pagador_w
	and	coalesce(dt_suspensao::text, '') = '';
	end;
end loop;
close C01;

update	pls_notificacao_pagador
set	dt_suspensao		= clock_timestamp(),
	ie_status_ant		= ie_status,
	ie_status		= 'P',
	nm_usuario_suspensao	= nm_usuario_p
where	nr_sequencia		= nr_seq_notific_pagador_p;

if (coalesce(nr_seq_lote_p::text, '') = '') then
	CALL pls_atualizar_valor_notific(nr_seq_lote_w);
end if;

<<final>>

ie_final	:= null;

--commit; Tem que ter commit só na procedure externa
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_suspender_contrato_notific ( nr_seq_notific_pagador_p bigint, nr_seq_motivo_p bigint, ds_observacao_p text, nr_seq_lote_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

