-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_contas_protocolo ( nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, qt_conta_p INOUT bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type ) AS $body$
DECLARE


ie_origem_filtro_w		varchar(1);
ie_origem_protocolo_w	pls_protocolo_conta.ie_origem_protocolo%type;
nr_seq_log_exec_w		pls_cta_log_exec.nr_sequencia%type;
nr_seq_via_acesso_w		pls_regra_via_acesso.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
			ie_status
	from	pls_conta
	where	nr_seq_protocolo = nr_seq_protocolo_p
	and 	ie_status not in ('C','F');
BEGIN

--Como o consistir contas do protocolo fica habilitado mesmo após fazer a consistência, então chamo o desfazer consistir apenas se realmente precisar
for r_c01_w in C01 loop
	if ( r_c01_w.ie_status <> 'U') then
		CALL pls_desfazer_consistir_conta( r_c01_w.nr_sequencia, cd_estabelecimento_p, nm_usuario_p);
	end if;
end loop;

select 	max(ie_origem_protocolo)
into STRICT	ie_origem_protocolo_w
from	pls_protocolo_conta
where	nr_sequencia	= nr_seq_protocolo_p;

select	max(nr_sequencia)
into STRICT	nr_seq_via_acesso_w
from	pls_regra_via_acesso;

-- alimenta o campo nr_seq_conta_princ das contas que estão no protocolo
CALL pls_insere_conta_princ( null, null, null, nr_seq_protocolo_p);

-- cria os registros necessários na tabela mat/proc regra
CALL pls_filtro_regra_preco_cta_pck.cria_registro_regra(	'P', null, nr_seq_protocolo_p,
							null, null, null,
							null, null, cd_estabelecimento_p,
							nm_usuario_p);


CALL pls_grava_log_execucao_temp('Início processamento autogerado protocolo ' || nr_seq_protocolo_p, ' Consistências de conta do protocolo', nm_usuario_p);
CALL pls_gerencia_autogerado_pck.pls_define_se_autogerado(	null, nr_seq_protocolo_p, null,
							null, nm_usuario_p, cd_estabelecimento_p);
CALL pls_grava_log_execucao_temp('Fim processamento autogerado protocolo ' || nr_seq_protocolo_p, ' Consistências de conta do protocolo', nm_usuario_p);

if (pls_util_cta_pck.pls_usa_rn_qtde_exec_regra = 'S') then

	CALL pls_grava_log_execucao_temp('Início quantidade execução regras nova protocolo ' || nr_seq_protocolo_p, ' Consistência de contas do protocolo', nm_usuario_p);
	nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	null, nr_seq_protocolo_p, null, null, null, null, null, null, '14,', null, nm_usuario_p, cd_estabelecimento_p, null, nr_seq_log_exec_w);
	CALL pls_grava_log_execucao_temp('Fim quantidade execução regras nova protocolo ' || nr_seq_protocolo_p, ' Consistência de contas do protocolo', nm_usuario_p);
end if;

if (coalesce(nr_seq_via_acesso_w::text, '') = '') then

	CALL pls_grava_log_execucao_temp('Início via de acesso', 'valorizacao', nm_usuario_p);

	CALL pls_util_cta_pck.pls_gerencia_via_acesso( 	null, nr_seq_protocolo_p, null,
							null, null,null,
							null,nm_usuario_p, cd_estabelecimento_p );
	commit;

	CALL pls_grava_log_execucao_temp('Fim via de acesso', 'valorizacao', nm_usuario_p);
end if;

--primeira parte da consistência da conta médica
CALL pls_grava_log_execucao_temp('Início da leitura das contas do protocolo', ' Consistência de contas do protocolo', nm_usuario_p);

qt_conta_p := 0;
for r_c01_w in C01 loop
	CALL pls_consistir_conta(r_c01_w.nr_sequencia, cd_estabelecimento_p, nm_usuario_p, 'S', 'S', null, null,'N','P');
	qt_conta_p := qt_conta_p + 1;
end loop;

CALL pls_grava_log_execucao_temp('Fim leitura das contas geradas para o protocolo', ' Consistência de contas do protocolo', nm_usuario_p);
--geração dos valores
if ( ie_origem_protocolo_w	= 'A') then
	ie_origem_filtro_w	:= 'I';
else
	ie_origem_filtro_w	:= 'N';
end if;


for r_c01_w in C01 loop
	--Regra de quantidade de execuçaõ por simultâneo e concorrente
	CALL pls_qtde_execucao_pck.pls_gerencia_qtde_execucao(r_c01_w.nr_sequencia, null, null,
					         null, null,nm_usuario_p,
							cd_estabelecimento_p);
end loop;

--regra de valorização diferenciada
CALL pls_cta_gerar_val_dif(	null, nr_seq_protocolo_p, null,
			null, null, cd_estabelecimento_p,
			nm_usuario_p, null);

CALL pls_cp_cta_gerar_combinada(	ie_origem_filtro_w, null, nr_seq_protocolo_p,
				null, null, null,
				null, null, null,
				cd_estabelecimento_p, nm_usuario_p);


for r_c01_w in C01 loop

	CALL pls_grava_log_execucao_temp('Início pls_recalcular_conta  conta' || r_c01_w.nr_sequencia,  ' Consistência de contas do protocolo', nm_usuario_p);

	CALL pls_recalcular_conta( r_c01_w.nr_sequencia, nm_usuario_p,'C','N','N',null,null);
	CALL pls_grava_log_execucao_temp('Fim pls_recalcular_conta  conta' ||r_c01_w.nr_sequencia,  ' Consistência de contas do protocolo', nm_usuario_p);

end loop;


for r_c01_w in C01 loop
	CALL pls_consistir_conta(r_c01_w.nr_sequencia, cd_estabelecimento_p, nm_usuario_p, 'S', 'S', null, null,'N','Q');
end loop;

--Geração das ocorrências combinadas
CALL pls_grava_log_execucao_temp('Início geração da ocorrência combinada ', '  Consistência de contas do protocolo', nm_usuario_p);
--ocorrencia combinadda
CALL pls_oc_cta_gerar_combinada(	'CC', 'A', null, nr_seq_protocolo_p, null, null, null, null, null, null, null,
				null, null, null, cd_estabelecimento_p, nm_usuario_p);
commit;

CALL pls_grava_log_execucao_temp('Fim geração da ocorrência combinada ', ' Consistência de contas do protocolo', nm_usuario_p);

for r_c01_w in C01 loop
	CALL pls_grava_log_execucao_temp('Início pls_consistir_conta conta part2 ' || r_c01_w.nr_sequencia, 'Consistência de contas do protocolo', nm_usuario_p);
	CALL pls_consistir_conta(r_c01_w.nr_sequencia, cd_estabelecimento_p, nm_usuario_p, 'S', 'S', null, null,'N','U');
	CALL pls_grava_log_execucao_temp('Fim pls_consistir_conta conta part2' || r_c01_w.nr_sequencia, 'Consistência de contas do protocolo', nm_usuario_p);
end loop;

CALL pls_gerar_valores_protocolo(nr_seq_protocolo_p, nm_usuario_p);
	/* Alterar status */

CALL pls_altera_status_protocolo(nr_seq_protocolo_p, 'L', 'N', cd_estabelecimento_p, nm_usuario_p);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_contas_protocolo ( nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, qt_conta_p INOUT bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type ) FROM PUBLIC;

