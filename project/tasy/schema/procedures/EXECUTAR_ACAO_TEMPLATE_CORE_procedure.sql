-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE executar_acao_template_core ( ie_acao_p text, nm_usuario_p ehr_registro.nm_usuario%type default null,        --se usuario for passado em branco, usara a package para obter nome de usuario
 ds_justificativa_p ehr_registro.ds_justificativa%type default null,  --justificativa para inativacao
 nr_atendimento_p ehr_registro.nr_atendimento%type default null, cd_pessoa_fisica_p ehr_registro.cd_paciente%type default null, nr_sequencia_template_p ehr_registro.nr_seq_templ%type default null,      --sequencia do template no cadastro (configuracao) do mesmo
 nr_ehr_reg_p INOUT ehr_registro.nr_sequencia%type DEFAULT NULL,                   --registro EHR_REGISTRO do template apos o preenchimento
 nr_ehr_reg_templ_p INOUT ehr_reg_template.nr_sequencia%type DEFAULT NULL,               --registro EHR_REG_TEMPLATE do template apos o preenchimento
 ds_response_p INOUT text                                          --resultado para param 'inactivated' e 'released'
  DEFAULT NULL) AS $body$
DECLARE


nm_usuario_w                    ehr_registro.nm_usuario%type;
cd_profissional_w               ehr_registro.cd_profissional%type;

ds_parametros_w	varchar(2000);
ds_sep_bv_w	varchar(10);

  tabela RECORD;

BEGIN
  ds_parametros_w	:= '';
  ds_sep_bv_w	:= obter_separador_bv;

  if (coalesce(nm_usuario_p::text, '') = '' or nm_usuario_p = '') then
    select obter_usuario_ativo
    into STRICT nm_usuario_w 
;
  else
    nm_usuario_w := nm_usuario_p;
  end if;

  if (coalesce(nr_ehr_reg_p::text, '') = '' and ((nr_ehr_reg_templ_p IS NOT NULL AND nr_ehr_reg_templ_p::text <> '') and nr_ehr_reg_templ_p <> 0)) then
    begin
      select nr_seq_reg
      into STRICT nr_ehr_reg_p
      from ehr_reg_template 
      where nr_sequencia = nr_ehr_reg_templ_p;
    exception when others then
      nr_ehr_reg_p := null;
    end;
  elsif(((nr_ehr_reg_p IS NOT NULL AND nr_ehr_reg_p::text <> '') and nr_ehr_reg_p <> 0) and coalesce(nr_ehr_reg_templ_p::text, '') = '') then
    begin
      select nr_sequencia
      into STRICT nr_ehr_reg_templ_p
      from ehr_reg_template
      where nr_seq_reg = nr_ehr_reg_p;
    exception when others then
      nr_ehr_reg_templ_p := null;
    end;
  end if;

  if (ie_acao_p = 'L' and (nr_ehr_reg_p IS NOT NULL AND nr_ehr_reg_p::text <> '')) then
    CALL liberar_informacao('EHR_REGISTRO', 'NR_SEQUENCIA', nr_ehr_reg_p, nm_usuario_w);
  elsif (ie_acao_p = 'I' and (nr_ehr_reg_p IS NOT NULL AND nr_ehr_reg_p::text <> '')) then
    CALL inativar_informacao('EHR_REGISTRO', 'NR_SEQUENCIA', nr_ehr_reg_p, ds_justificativa_p, nm_usuario_w);

    for tabela in (
                  SELECT
                          distinct nm_table,
                          'update ' || CASE WHEN nm_table='PEDIDO_EXAME_EXTERNO_ITEM' THEN  'PEDIDO_EXAME_EXTERNO'  ELSE nm_table END  || 
                          ' set dt_inativacao = sysdate, nm_usuario_inativacao = :nm_usuario_w, ds_justificativa = :ds_justificativa_p where nr_seq_formulario = :nr_ehr_reg_p' sql_update
                  from linked_data 
                  where nr_sequencia in (
                    SELECT  b.nr_seq_linked_data 
                      from  ehr_template_conteudo b
                      where b.nr_seq_template = (
                            select a.nr_seq_template 
                            from ehr_reg_template a
                            where a.nr_sequencia = nr_ehr_reg_templ_p 
                       LIMIT 1) and (b.nr_seq_linked_data IS NOT NULL AND b.nr_seq_linked_data::text <> '')
                    
                    
union all

                    
                    select xx.nr_seq_linked_data
                    from ehr_template_conteudo xx, (
                        select  b.nr_seq_template_cluster 
                          from  ehr_template_conteudo b
                          where b.nr_seq_template = (
                                select a.nr_seq_template 
                                from ehr_reg_template a
                                where a.nr_sequencia = nr_ehr_reg_templ_p 
                           LIMIT 1) and (b.nr_seq_template_cluster IS NOT NULL AND b.nr_seq_template_cluster::text <> '')
                    ) ww
                    where xx.nr_seq_template = ww.nr_seq_template_cluster
                  )
    ) loop
          ds_parametros_w	:= 'nm_usuario_w=' || nm_usuario_w || ds_sep_bv_w
                          || 'nr_ehr_reg_p=' || nr_ehr_reg_p || ds_sep_bv_w
                          || 'ds_justificativa_p=' || ds_justificativa_p || ds_sep_bv_w;

          CALL exec_sql_dinamico_bv('', tabela.sql_update, ds_parametros_w);
    end loop;

    nr_ehr_reg_p := null;
    nr_ehr_reg_templ_p := null;
  end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE executar_acao_template_core ( ie_acao_p text, nm_usuario_p ehr_registro.nm_usuario%type default null, ds_justificativa_p ehr_registro.ds_justificativa%type default null, nr_atendimento_p ehr_registro.nr_atendimento%type default null, cd_pessoa_fisica_p ehr_registro.cd_paciente%type default null, nr_sequencia_template_p ehr_registro.nr_seq_templ%type default null, nr_ehr_reg_p INOUT ehr_registro.nr_sequencia%type DEFAULT NULL, nr_ehr_reg_templ_p INOUT ehr_reg_template.nr_sequencia%type DEFAULT NULL, ds_response_p INOUT text DEFAULT NULL) FROM PUBLIC;

