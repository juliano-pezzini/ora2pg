-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_resumo_movto_estoque ( dt_mesano_referencia_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



ie_ctb_online_w 		ctb_param_lote_consumo.ie_ctb_online%type;
nr_sequencia_w			bigint;
cd_operacao_estoque_w		integer;
cd_local_estoque_w		integer;
cd_local_destino_w		integer;
cd_centro_custo_w		integer;
cd_conta_contabil_w		varchar(20);
cd_material_w			integer;
qt_estoque_w			double precision;
qt_consumo_w			double precision;
vl_estoque_w			double precision;
ie_consignado_w			varchar(1);
ds_erro_w			varchar(255);
cd_fornecedor_w			varchar(14);
ie_valorizacao_consig_w		varchar(15);
ie_curva_abc_local_w		varchar(1);
ie_curva_abc_ccusto_w		varchar(1);
ie_resumo_movto_estoque_dia_w	varchar(1);
cd_estabelecimento_w		smallint;
ie_atualiza_estoque_w		varchar(1);
dt_mesano_referencia_w		timestamp;

C00 CURSOR FOR
SELECT	cd_estabelecimento
from	estabelecimento
where	cd_estabelecimento = cd_estabelecimento_p

union all

SELECT	a.cd_estabelecimento
from	estabelecimento a
where	a.ie_situacao = 'A'
and	cd_estabelecimento_p = 0
and	exists (select 1
		from	parametro_estoque x
		where	x.cd_estabelecimento = a.cd_estabelecimento
		and	x.ie_situacao = 'A');

c01 CURSOR FOR
SELECT	a.cd_operacao_estoque,
	cd_local_estoque,
	cd_local_estoque_destino,
	cd_centro_custo,
	cd_conta_contabil,
	cd_material_estoque,
	cd_fornecedor,
	sum(qt_estoque),
	sum(coalesce(vl_estoque,0)),
	sum(CASE WHEN b.ie_consumo='A' THEN qt_estoque WHEN b.ie_consumo='D' THEN (qt_estoque * -1)  ELSE 0 END )
from 	movimento_estoque_v1 a,
	operacao_estoque b
where	a.cd_operacao_estoque	= b.cd_operacao_estoque
and	(a.dt_processo IS NOT NULL AND a.dt_processo::text <> '')
and	(a.cd_material_estoque IS NOT NULL AND a.cd_material_estoque::text <> '')
and	a.dt_mesano_referencia	= dt_mesano_referencia_w
and	a.cd_estabelecimento	= cd_estabelecimento_w
group by
	a.cd_operacao_estoque,
	cd_local_estoque,
	cd_local_estoque_destino,
	cd_centro_custo,
	cd_conta_contabil,
	cd_material_estoque,
	cd_fornecedor;


BEGIN
dt_mesano_referencia_w	:=	PKG_DATE_UTILS.start_of(dt_mesano_referencia_p,'month',0);

open C00;
loop
fetch C00 into
	cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on C00 */
	begin
	select	coalesce(max(ie_valorizacao_consig), 'U'),
		coalesce(max(ie_curva_abc_local), 'N'),
		coalesce(max(ie_curva_abc_ccusto), 'N'),
		coalesce(max(ie_resumo_movto_estoque_dia),'N')
	into STRICT	ie_valorizacao_consig_w,
		ie_curva_abc_local_w,
		ie_curva_abc_ccusto_w,
		ie_resumo_movto_estoque_dia_w
	from 	parametro_estoque
	where	cd_estabelecimento	= cd_estabelecimento_w;

	delete	FROM resumo_movto_estoque
	where	dt_mesano_referencia	= dt_mesano_referencia_w
	and	cd_estabelecimento	= cd_estabelecimento_w;
	commit;

	OPEN C01;
	LOOP
	FETCH C01 into
		cd_operacao_estoque_w,
		cd_local_estoque_w,
		cd_local_destino_w,
		cd_centro_custo_w,
		cd_conta_contabil_w,
		cd_material_w,
		cd_fornecedor_w,
		qt_estoque_w,
		vl_estoque_w,
		qt_consumo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		if (cd_fornecedor_w IS NOT NULL AND cd_fornecedor_w::text <> '') then
			select	max(cd_cgc)
			into STRICT	cd_fornecedor_w
			from	pessoa_juridica
			where	cd_cgc		= cd_fornecedor_w;
		end if;

		select	coalesce(max(ie_consignado),0),
			coalesce(max(ie_atualiza_estoque),'S')
		into STRICT	ie_consignado_w,
			ie_atualiza_estoque_w
		from 	operacao_estoque
		where	cd_operacao_estoque = cd_operacao_estoque_w;

		if	((ie_atualiza_estoque_w = 'S') or (ie_consignado_w in (2,3,4,5,6,7))) then
			begin
			select	nextval('resumo_movto_estoque_seq')
			into STRICT	nr_sequencia_w
			;

			if (ie_consignado_w = '0') then
				ie_consignado_w		:= 'N';
			else
				ie_consignado_w		:= 'S';
			end if;

			begin
			Insert into resumo_movto_estoque(
				nr_sequencia,		dt_mesano_referencia,
				cd_estabelecimento,	cd_local_estoque,
				cd_material,		cd_operacao_estoque,
				dt_atualizacao,		nm_usuario,
				cd_centro_custo,	cd_conta_contabil,
				cd_local_destino,	qt_estoque,
				vl_estoque,		ie_consignado,
				vl_consignado,		cd_fornecedor,
				qt_consumo)
			Values (	nr_sequencia_w,		dt_mesano_referencia_w,
				cd_estabelecimento_w,	cd_local_estoque_w,
				cd_material_w,		cd_operacao_estoque_w,
				clock_timestamp(),		nm_usuario_p,
				cd_centro_custo_w,	cd_conta_contabil_w,
				cd_local_destino_w,	qt_estoque_w,
				vl_estoque_w,		ie_consignado_w,
				0,			cd_fornecedor_w,
				qt_consumo_w);
			exception when unique_violation then
				update	resumo_movto_estoque
				set	dt_atualizacao 	= clock_timestamp(),
					nm_usuario = nm_usuario_p,
					qt_estoque= qt_estoque_w,
					vl_estoque = vl_estoque_w,
					vl_consignado = 0,
					qt_consumo = qt_consumo_w
				where	dt_mesano_referencia = dt_mesano_referencia_w
				and	cd_estabelecimento = cd_estabelecimento_w
				and	cd_local_estoque = cd_local_estoque_w
				and	cd_material = cd_material_w
				and	cd_operacao_estoque = cd_operacao_estoque_w
				and	cd_centro_custo = cd_centro_custo_w
				and	cd_local_destino = cd_local_destino_w
				and	cd_fornecedor = cd_fornecedor_w
				and	ie_consignado = ie_consignado_w
				and	cd_conta_contabil = cd_conta_contabil_w;
			end;
			end;
		end if;
		end;
	END LOOP;
	close C01;
	commit;

	if (PKG_DATE_UTILS.start_of(clock_timestamp(),'month',0) > dt_mesano_referencia_w) then
		begin
		CALL gerar_curva_abc(cd_estabelecimento_w, dt_mesano_referencia_p, nm_usuario_p);

		if (ie_curva_abc_local_w = 'S') then
			CALL gerar_curva_abc_local(cd_estabelecimento_w, dt_mesano_referencia_p, nm_usuario_p);
		end if;

		if (ie_curva_abc_ccusto_w = 'S') then
			CALL gerar_curva_abc_ccusto(cd_estabelecimento_w, dt_mesano_referencia_p, nm_usuario_p);
		end if;

		end;
	end if;
	if (PKG_DATE_UTILS.start_of(clock_timestamp(),'dd',0) = PKG_DATE_UTILS.start_of(clock_timestamp(),'month',0)) then
		CALL Virada_saldo(PKG_DATE_UTILS.ADD_MONTH(clock_timestamp(),-1,0), cd_estabelecimento_w, nm_usuario_p);
	end if;
	commit;

	begin
	CALL gerar_ressuprimento_material(cd_estabelecimento_w, null, null, 0, 0, null,'N');
	exception
	when others then
		ds_erro_w	:= SQLERRM(SQLSTATE);
		insert into log_val_estoque(
				cd_log,
				ds_log,
				dt_atualizacao,
				nm_usuario,
				cd_estabelecimento)
			values (	4,
				ds_erro_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_estabelecimento_p);
	end;
	commit;

	if (ie_valorizacao_consig_w = 'U') then
		CALL apurar_custo_consumo_consig(dt_mesano_referencia_w, cd_estabelecimento_w, nm_usuario_p);
	end if;

	if (ie_resumo_movto_estoque_dia_w = 'S') then
		CALL gerar_resumo_movto_estoque_dia(dt_mesano_referencia_p, cd_estabelecimento_w, nm_usuario_p);
	end if;
	
	begin
	
	/* Evento Disparo da Contabilização Lote Consumo		*/

	ie_ctb_online_w := ctb_online_pck.get_modo_lote( 3, cd_estabelecimento_w, obter_empresa_estab(cd_estabelecimento_w));
	if ( ie_ctb_online_w = 'S' ) then		
		CALL ctb_contab_onl_consumo_estoque( nm_usuario_p,
						cd_estabelecimento_w,
						dt_mesano_referencia_w);
	end if;

	/* Evento Disparo da Contabilização Lote Produção		*/
			
	ie_ctb_online_w := ctb_online_pck.get_modo_lote( 25, cd_estabelecimento_w, obter_empresa_estab(cd_estabelecimento_w));
	if ( ie_ctb_online_w = 'S' ) then		
		CALL ctb_contab_onl_lote_producao(	dt_mesano_referencia_w,
						cd_estabelecimento_w,
						nm_usuario_p);
	end if;
	
	/* Evento Disparo da Contabilização Lote Consignado Pendente	*/
			
	ie_ctb_online_w := ctb_online_pck.get_modo_lote( 26, cd_estabelecimento_w, obter_empresa_estab(cd_estabelecimento_w));
	if ( ie_ctb_online_w = 'S' ) then		
		CALL CTB_CONTAB_ONL_CONSIGNADO(	cd_estabelecimento_w,dt_mesano_referencia_w, nm_usuario_p);			
	end if;
	exception when others then
		ie_ctb_online_w	:= 'N';
	end;
	
	end;
end loop;
close C00;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_resumo_movto_estoque ( dt_mesano_referencia_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

