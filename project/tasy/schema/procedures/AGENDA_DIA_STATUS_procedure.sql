-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE agenda_dia_status ( cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_Inicial_p timestamp, dt_final_p timestamp, cd_turno_p text, nm_usuario_p text, ie_Status_p INOUT text, cd_departamento_medico_p bigint default null, cd_convenio_p bigint default null, ie_classif_agenda_p text default null, ds_lista_total_livre_p INOUT text DEFAULT NULL) AS $body$
DECLARE


/*

							>>>>>>>>>>>>>>>>>ATEN??O<<<<<<<<<<<<<<<<<<<<

CUIDAR AO ALTERAR ESSA ROTINA, A MESMA APLICA AS RESTRI??ES PARA A VISUALIZA??O MENSAL DE AGENDAS, NAS FUN??ES:
	- AGENDA DE CONSULTAS;
	- AGENDA DE SERVI?OS;
	- AGENDA DE EXAMES;
	- GEST?O DA AGENDA CIR?RGICA;
	
CASO TIVER D?VIDAS NA ALTERA??O, FALAR COM OS RESPONS?VEIS DO GRUPO "AGENDAS", N?O DOCUMENTAR O OBJETO SEM A VALIDA??O DO CLIENTE.

*/
					
					
					

ie_Status_w			varchar(4000);
ie_Status_dia_w			varchar(10);
dt_atual_w			timestamp;
cd_tipo_agenda_w		bigint;
ie_feriado_w			varchar(10);
ie_agenda_feriado_w		varchar(10);
ie_gerar_hor_feriado_w		varchar(10);
ie_dia_feriado_w		varchar(10);
ie_dia_semana_w			varchar(10);
qt_horario_w			bigint;
qt_horario_livre_w		bigint;
qt_regra_horario_w		bigint;
qt_horario_bloqueado_w		bigint;
ds_horarios_w			varchar(255);
ie_bloqueio_w			varchar(10);
ie_gravar_w			varchar(10) := 'N';
ie_sobra_horario_w		varchar(10) := 'S';
ds_retorno_w			varchar(4000) := '';
qt_bloqueio_w			bigint;
qt_horario_ocupado_w		bigint;
ie_gerar_hor_livre_w		varchar(1);
ie_agenda_valida_w		varchar(1) := 'N';
ie_existe_hor_gerado_w		bigint;
qt_dias_fut_w			bigint := 0;
cd_pessoa_usuario_w		varchar(10);
ie_cons_se_leg_dia_nao_lib_w 	varchar(1);
ie_cons_se_leg_dia_nao_lib_ww 	varchar(1);
cd_turno_w			varchar(1);
ie_cons_leg_bloq_fim_sem_w	varchar(1);
nr_minuto_intervalo_w		bigint;
nr_seq_turno_w			bigint;
qt_hor_bloq_per_w		bigint;
qt_total_hor_bloq_per_w		bigint;
ds_erro_w			varchar(255);
qt_bloqueio_sem_horario_w	bigint;
qt_reg_agenda_bloqueio_dia_w	bigint;
qt_dia_inicial_w		bigint;
qt_dia_final_w			bigint;
qt_dia_filtro_ini_w		bigint;
qt_dia_filtro_fim_w		bigint;
ie_dia_sem_w			varchar(10);
hr_inicio_agenda_w		timestamp;		
hr_final_agenda_w		timestamp;
ie_turno_valido_w		varchar(1) 	:= 'N';
ie_gerar_hor_passado_w		varchar(1)	:= 'S';
ie_todos_dias_regra_w		varchar(1)	:= 'N';
nr_seq_esp_w			bigint	:= 0;
ie_horario_adicional_w 		varchar(01) 	:= 'S';
ie_manter_hist_horarios_w	varchar(1) 	:= 'N';
qt_bloqueado_manual_w		bigint;
cd_departamento_medico_w 	integer := null;
ds_lista_total_livre_w		varchar(4000);

--Obter qtd. de bloqueios gerados, caso os hor?rios do dia n?o estiverem gerados(utilizado em casos de bloqueios espec?ficos, com hr. inicial e hr. final)
C01 CURSOR FOR
	SELECT	MIN(coalesce(c.qt_bloqueio,0)) qt_bloqueio
	FROM agenda d
LEFT OUTER JOIN (
			SELECT	coalesce(((((coalesce(a.hr_final_bloqueio, TO_DATE('31/12/1899 '||'23:59:59', 'dd/mm/yyyy hh24:mi:ss')) - coalesce(a.hr_inicio_bloqueio, TO_DATE('31/12/1899 '||'00:00:00', 'dd/mm/yyyy hh24:mi:ss'))) * 1440) / nr_minuto_intervalo_w)), 0) qt_bloqueio,
					b.cd_agenda
			FROM	agenda_bloqueio a,
							agenda b
			WHERE	a.cd_agenda = b.cd_agenda
			AND		(((a.ie_dia_semana = 9) AND (ie_dia_sem_w NOT IN (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)))
			OR		(a.ie_dia_semana <> 9 AND ie_dia_sem_w = a.ie_dia_semana)
			OR (coalesce(a.ie_dia_semana::text, '') = ''))
			AND		dt_atual_w	BETWEEN TRUNC(a.dt_inicial) AND fim_dia(TRUNC(a.dt_final))
			AND		coalesce(Obter_Se_Feriado(cd_estabelecimento_p, dt_atual_w),0) = 0
			AND 	((coalesce(cd_departamento_medico_w::text, '') = '' AND b.cd_agenda = cd_agenda_p) OR (b.cd_departamento_medico = cd_departamento_medico_w))) c ON (d.cd_agenda = c.cd_agenda)
WHERE ((coalesce(cd_departamento_medico_w::text, '') = '' AND d.cd_agenda = cd_agenda_p) OR (d.cd_departamento_medico = cd_departamento_medico_w));

C02 CURSOR FOR
	SELECT 	to_date(to_char(dt_atual_w, 'dd/mm/yyyy')||' '||to_char(a.hr_inicial, 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'),
			to_date(to_char(dt_atual_w, 'dd/mm/yyyy')||' '||to_char(a.hr_final, 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
	from   	agenda_horario a,
			agenda b
	where  	a.cd_agenda = b.cd_agenda
	AND		((coalesce(cd_departamento_medico_w::text, '') = '' AND a.cd_agenda = cd_agenda_p) OR (b.cd_departamento_medico = cd_departamento_medico_w))

	and    	((a.dt_dia_semana = ie_dia_sem_w) or (a.dt_dia_semana = 9 and ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)) or (a.dt_dia_semana in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)))
	--and    	((dt_dia_semana is null) or (dt_dia_semana = ie_dia_sem_w) or (dt_dia_semana = 9 and ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)))
	and		dt_atual_w between a.dt_inicio_vigencia and a.dt_final_vigencia;
	

BEGIN

ie_cons_se_leg_dia_nao_lib_w := Obter_Param_Usuario(821, 420, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cons_se_leg_dia_nao_lib_w);
ie_cons_se_leg_dia_nao_lib_ww := Obter_Param_Usuario(820, 374, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cons_se_leg_dia_nao_lib_ww);
ie_cons_leg_bloq_fim_sem_w := Obter_Param_Usuario(820, 406, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cons_leg_bloq_fim_sem_w);
ie_gerar_hor_passado_w := Obter_Param_Usuario(866, 133, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_hor_passado_w);
ie_todos_dias_regra_w := Obter_Param_Usuario(866, 120, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_todos_dias_regra_w);

if (wheb_usuario_pck.get_cd_funcao = 821) then
	ie_cons_leg_bloq_fim_sem_w := Obter_Param_Usuario(821, 483, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cons_leg_bloq_fim_sem_w);
end if;

IF	((Dt_final_p - dt_inicial_p) > 255) THEN
	CALL wheb_mensagem_pck.exibir_mensagem_abort(200597);
END IF;

if (coalesce(cd_turno_p::text, '') = '') then
	cd_turno_w := '2';
else
	cd_turno_w := cd_turno_p;
end if;

SELECT	CASE WHEN COUNT(*)=0 THEN 'N'  ELSE 'S' END
INTO STRICT	ie_agenda_valida_w
FROM	agenda
WHERE	cd_agenda = cd_agenda_p;

qt_dia_inicial_w	:= 2;
qt_dia_final_w		:= 6;
qt_dia_filtro_ini_w	:= 7;
qt_dia_filtro_fim_w	:= 1;

IF (ie_agenda_valida_w = 'S') THEN
	BEGIN
	SELECT (MAX(Obter_Valor_Param_Usuario(820, 118, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)))
	INTO STRICT	ie_gerar_hor_livre_w
	;

	SELECT	cd_tipo_agenda,
		ie_feriado
	INTO STRICT	cd_tipo_agenda_w,
		ie_feriado_w
	FROM 	agenda
	WHERE cd_agenda 	= cd_agenda_p;
	
	if	((cd_tipo_agenda_w = 3) or (cd_tipo_agenda_w = 4)) and (ie_cons_se_leg_dia_nao_lib_w = 'S')then
		select	substr(max(nr_dias_fut_agendamento),1,9)
		into STRICT	qt_dias_fut_w
		from	agenda
		where	cd_agenda = cd_agenda_p;
		
		if (coalesce(qt_dias_fut_w::text, '') = '') and (ie_cons_se_leg_dia_nao_lib_w = 'S')then
			SELECT	substr(MAX(Obter_Valor_Param_Usuario(821, 5, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),1,9)
			INTO STRICT	qt_dias_fut_w
			;
			--substr(obter_param_usuario(821, 5, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_dias_fut_w),1,10);
		end if;
		
		select	max(cd_pessoa_fisica)
		into STRICT	cd_pessoa_usuario_w
		from	usuario
		where	nm_usuario = nm_usuario_p;
		
		if (obter_se_ignorar_dias_fut(cd_pessoa_usuario_w,cd_agenda_p,null) = 'S') then
			qt_dias_fut_w := 0;
		end if;			
	elsif (cd_tipo_agenda_w = 2) and (ie_cons_se_leg_dia_nao_lib_ww = 'S')then
			select	substr(max(nr_dias_fut_agendamento),1,9)
			into STRICT	qt_dias_fut_w
			from	agenda
			where	cd_agenda = cd_agenda_p;
			
			if (coalesce(qt_dias_fut_w::text, '') = '') and (ie_cons_se_leg_dia_nao_lib_ww = 'S')then
				SELECT	substr(MAX(Obter_Valor_Param_Usuario(820, 4, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),1,9)
				INTO STRICT	qt_dias_fut_w
				;			
			end if;
			
	end if;
	
	ie_status_w					:= '';
	dt_atual_w					:= TRUNC(dt_inicial_p, 'dd');
	WHILE(dt_atual_w	<= TRUNC(dt_final_p,'dd')) LOOP
		BEGIN
		ie_status_dia_w			:= 'X';
		qt_bloqueio_w			:= 0;
		
		ie_dia_semana_w	:= obter_cod_dia_semana(dt_atual_w);
		

		SELECT 	coalesce(MAX('S'),'N')
		into STRICT	ie_dia_feriado_w
		from 	feriado
		where 	cd_estabelecimento 	= cd_estabelecimento_p
		and 	dt_feriado		= dt_atual_w;
		
		SELECT	MIN(coalesce(c.qt_bloqueio,0)) qt_bloqueio
		INTO STRICT	qt_bloqueio_w
		FROM agenda d
LEFT OUTER JOIN (
				SELECT	coalesce(((((coalesce(a.hr_final_bloqueio, TO_DATE('31/12/1899 '||'23:59:59', 'dd/mm/yyyy hh24:mi:ss')) - coalesce(a.hr_inicio_bloqueio, TO_DATE('31/12/1899 '||'00:00:00', 'dd/mm/yyyy hh24:mi:ss'))) * 1440) / nr_minuto_intervalo_w)), 0) qt_bloqueio,
					b.cd_agenda
				FROM	agenda_bloqueio a,
								agenda b
				WHERE	a.cd_agenda = b.cd_agenda
				AND 	TRUNC(a.dt_inicial,'dd')	<= trunc(dt_atual_w,'dd')
				AND 	TRUNC(a.dt_final,'dd')	>= trunc(dt_atual_w,'dd')
				AND		((coalesce(a.ie_dia_semana,ie_dia_semana_w) = ie_dia_semana_w) OR
						((a.ie_dia_semana	= 9) AND (ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w) or
						(ie_cons_leg_bloq_fim_sem_w = 'S' AND ie_dia_semana_w BETWEEN qt_dia_filtro_ini_w AND qt_dia_filtro_fim_w)))
				AND 	((coalesce(cd_departamento_medico_w::text, '') = '' AND b.cd_agenda = cd_agenda_p) OR (b.cd_departamento_medico = cd_departamento_medico_w))) c ON (d.cd_agenda = c.cd_agenda)
WHERE ((coalesce(cd_departamento_medico_w::text, '') = '' AND d.cd_agenda = cd_agenda_p) OR (d.cd_departamento_medico = cd_departamento_medico_w));
		

		/*SELECT 	COUNT(*)
		INTO	qt_bloqueio_w
		FROM	agenda_bloqueio
		WHERE	cd_agenda	= cd_agenda_p
		AND 	TRUNC(dt_inicial,'dd')	<= trunc(dt_atual_w,'dd')
		AND 	TRUNC(dt_final,'dd')	>= trunc(dt_atual_w,'dd')
		AND		((nvl(ie_dia_semana,ie_dia_semana_w) = ie_dia_semana_w) OR
				((ie_dia_semana	= 9) AND (ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w) or
				((ie_cons_leg_bloq_fim_sem_w = 'S') and (ie_dia_semana_w BETWEEN qt_dia_filtro_ini_w AND qt_dia_filtro_fim_w))));*/
		
		qt_horario_w			:= 0;
		qt_horario_livre_w		:= 0;
		qt_total_hor_bloq_per_w	:= 0;
		ie_turno_valido_w := 'N';
		
		/*AGENDA DE CONSULTAS / SERVI?OS*/

		IF (cd_tipo_agenda_w > 2) THEN		
			if (cd_tipo_agenda_w = 5) then
				begin
					
				/*AGENDA DE SERVI?OS*/

				SELECT	/*+ index (a AGECONS_UK) */						SUM(CASE WHEN ie_status_agenda='L' THEN 0  ELSE 1 END ),
						SUM(CASE WHEN ie_status_agenda='L' THEN 1  ELSE CASE WHEN ie_status_agenda='LF' THEN 1  ELSE 0 END  END ),
						SUM(CASE WHEN ie_status_agenda='B' THEN 1  ELSE 0 END ),
						SUM(CASE WHEN coalesce(coalesce(cd_pessoa_fisica, CASE WHEN ie_status_agenda='B' THEN  null  ELSE nm_paciente END )::text, '') = '' THEN 0  ELSE 1 END )
				INTO STRICT	qt_horario_w,
						qt_horario_livre_w,
						qt_horario_bloqueado_w,
						qt_horario_ocupado_w
				FROM 	agenda_consulta
				WHERE 	cd_agenda		= cd_agenda_p
				and		((cd_turno		= cd_turno_w) or (cd_turno_w = '2'))
				AND		dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
				AND		ie_status_agenda	<> 'C'
				AND		ie_status_agenda	<> 'II';
				
				--Validar para os casos em que a agenda n?o gerar hor?rios passados, dever? ser mantido o hist?rico de agendamento do que j? est? gravado na tabela AGENDA_CONSULTA
				if (qt_horario_w > 0) or (qt_horario_livre_w > 0) or (qt_horario_bloqueado_w > 0) or (qt_horario_ocupado_w > 0) then
					ie_manter_hist_horarios_w	:= 'S';
				else
					ie_manter_hist_horarios_w	:= 'N';				
				end if;
				
				qt_horario_w			:= null;
				qt_horario_livre_w		:= null;
				qt_horario_bloqueado_w	:= null;
				qt_horario_ocupado_w	:= null;
				
				select	'S'
				into STRICT	ie_turno_valido_w
				from	(	SELECT	1
							FROM 	agenda_Turno a
							WHERE 	cd_agenda	= cd_agenda_p
							AND 	ie_dia_semana	= ie_dia_Semana_w
							AND to_date(to_char(hr_inicial, 'HH24:MI:SS'), 'HH24:MI:SS') < to_date(to_char(hr_final, 'HH24:MI:SS'), 'HH24:MI:SS')
							AND		((coalesce(dt_inicio_vigencia::text, '') = '') OR (trunc(dt_inicio_vigencia) <= TRUNC(dt_atual_w)))
							AND		((coalesce(dt_final_vigencia::text, '') = '') OR (trunc(dt_final_vigencia) >= TRUNC(dt_atual_w)))
							--AND	(ie_feriado_w 	<> 'S')
							AND		((ie_dia_feriado_w = 'S' AND ie_feriado_w = 'S') or (ie_dia_feriado_w = 'N'))
							AND		obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_atual_w) = 'S'
							AND (TO_DATE(TO_CHAR(dt_atual_w,'dd/mm/yyyy') || ' ' ||TO_CHAR(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi:ss') > clock_timestamp() and (ie_gerar_hor_passado_w = 'N')
									or (ie_gerar_hor_passado_w = 'S') or (ie_manter_hist_horarios_w = 'S'))
							and		((Obter_Semana_Dia_Agecons(dt_atual_w,ie_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0))
							
UNION

							SELECT	1
							FROM 	agenda_Turno
							WHERE 	cd_agenda     	= cd_agenda_p
							AND 	ie_dia_semana	= 9
							AND to_date(to_char(hr_inicial, 'HH24:MI:SS'), 'HH24:MI:SS') < to_date(to_char(hr_final, 'HH24:MI:SS'), 'HH24:MI:SS')
							AND		((coalesce(dt_inicio_vigencia::text, '') = '') OR (trunc(dt_inicio_vigencia) <= TRUNC(dt_atual_w)))
							AND		((coalesce(dt_final_vigencia::text, '') = '') OR (trunc(dt_final_vigencia) >= TRUNC(dt_atual_w)))
							AND		ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w
							--AND	(ie_feriado_w 	<> 'S')
							AND		((ie_dia_feriado_w = 'S' AND ie_feriado_w = 'S') or (ie_dia_feriado_w = 'N'))
							AND		obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_atual_w) = 'S'
							and		((Obter_Semana_Dia_Agecons(dt_atual_w,ie_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0))
							AND (TO_DATE(TO_CHAR(dt_atual_w,'dd/mm/yyyy') || ' ' ||TO_CHAR(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi:ss') > clock_timestamp() and (ie_gerar_hor_passado_w = 'N') 
									or (ie_gerar_hor_passado_w = 'S') or (ie_manter_hist_horarios_w = 'S'))
							AND	NOT EXISTS	(SELECT	1
											FROM 	agenda_Turno
											WHERE 	cd_agenda			= cd_agenda_p
											AND 	ie_dia_semana		= ie_dia_Semana_w
											and		ie_todos_dias_regra_w 	= 'N'
											AND		((coalesce(dt_inicio_vigencia::text, '') = '') OR (trunc(dt_inicio_vigencia) <= TRUNC(dt_atual_w)))
											AND		((coalesce(dt_final_vigencia::text, '') = '') OR (trunc(dt_final_vigencia) >= TRUNC(dt_atual_w)))
											and		((ie_dia_semana	= ie_dia_Semana_w) or ((ie_dia_semana = 9) and ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w))
											)
						) alias85 LIMIT 1;				
				exception
				when others then
					ie_turno_valido_w := 'N';
				end;
			else
				
				select		coalesce(max(nr_sequencia),0),
							coalesce(max(ie_horario_adicional), 'N')
				into STRICT		nr_seq_esp_w,
							ie_horario_adicional_w
				from		agenda_turno_esp
				where		cd_agenda	= cd_agenda_p
				and                     ((coalesce(ie_classif_agenda_p::text, '') = '') or (coalesce(ie_classif_agenda, ie_classif_agenda_p) = ie_classif_agenda_p))
				and			((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (7,1))) or (coalesce(ie_dia_semana::text, '') = ''))
				and			obter_se_turno_esp_agecons_vig(dt_agenda,dt_agenda_fim,dt_atual_w) = 'S';					
				
				begin
						
					select 'S'
					into STRICT	ie_turno_valido_w
					from	(	SELECT 	1
								from 	agenda_Turno_Esp a
								where 	cd_agenda     	= cd_agenda_p
								and		((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))) or (coalesce(ie_dia_semana::text, '') = ''))
								and		((obter_se_feriado(cd_estabelecimento_p, dt_atual_w) = 0) or (obter_se_agenda_feriado(cd_agenda_p) = 'S'))
								--and	dt_agenda		= trunc(dt_atual_w,'dd')
								and		obter_se_turno_esp_agecons_vig(dt_agenda,dt_agenda_fim,dt_atual_w) = 'S'
								--and 	hr_inicial 		< hr_final
								and		to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss')
								and		nr_minuto_intervalo	> 0
								and		nr_seq_esp_w		> 0
								and                     ((coalesce(ie_classif_agenda_p::text, '') = '') or (coalesce(ie_classif_agenda, ie_classif_agenda_p) = ie_classif_agenda_p))
								
union

								SELECT 	1
								from 	agenda_Turno a
								where 	cd_agenda     		= cd_agenda_p
								and		((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
								--and 	hr_inicial 			< hr_final
								and		to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss')
								and		((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_atual_w)))
								and		((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_atual_w)))
								and		coalesce(nr_minuto_intervalo,0) > 0
								and		((((ie_feriado_w <> 'S') and (coalesce(ie_feriado,'X') <> 'F')) or (coalesce(ie_feriado,obter_se_agenda_feriado(cd_agenda_p)) = 'S')) or ((ie_feriado = 'F' AND ie_feriado_w = 'S') or (ie_feriado = 'N' AND ie_dia_feriado_w <> 'S')))
								and (nr_seq_esp_w = 0 or ie_horario_adicional_w = 'S')
								and		obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_atual_w) = 'S'
								and		((Obter_Semana_Dia_Agecons(dt_atual_w,ie_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0))
								and                     ((coalesce(ie_classif_agenda_p::text, '') = '') or (coalesce(ie_classif_agenda, ie_classif_agenda_p) = ie_classif_agenda_p))
								and                     ((coalesce(cd_convenio_p::text, '') = '') or (coalesce(cd_convenio_padrao, cd_convenio_p) = cd_convenio_p))
							) alias72 LIMIT 1;					
				exception
				when others then
					ie_turno_valido_w := 'N';
				end;
			end if;
			
		/*AGENDA DE EXAMES*/

		else
			
			select	coalesce(max(nr_sequencia),0),
					coalesce(max(ie_horario_adicional),'N')
			into STRICT	nr_seq_esp_w,
					ie_horario_adicional_w
			from	agenda_horario_esp
			where	cd_agenda	= cd_agenda_p
			and		dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w);		
			
			begin
			select 'S'
			into STRICT	ie_turno_valido_w	
			from	(	SELECT 	1
						from 	agenda_Horario a
						where 	cd_agenda     	= cd_agenda_p
						and		((dt_dia_semana = ie_dia_semana_w) or ((dt_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
						and		((nr_seq_esp_w 	= 0) or (ie_horario_adicional_w = 'S'))
						and		((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_atual_w)))
						and		((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_atual_w)))
						and		to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss')
						and		coalesce(nr_minuto_intervalo,0) > 0
						--AND		(((ie_dia_feriado_w = 'S') and ((ie_feriado_w = 'S') or (obter_se_agenda_feriado(cd_agenda_p) = 'S'))) or (ie_dia_feriado_w = 'N'))
						and		((((ie_feriado_w <> 'S') and (coalesce(ie_feriado,'X') <> 'F')) or (coalesce(ie_feriado,obter_se_agenda_feriado(cd_agenda_p)) = 'S')) or
									((ie_feriado = 'F' AND ie_feriado_w = 'S') or 
									(ie_feriado = 'N' AND ie_dia_feriado_w <> 'S')))
						--and	((ie_feriado_w <> 'S') or (obter_se_agenda_feriado(cd_agenda_p) = 'S'))
						and (obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_atual_w) = 'S')
						and 	((Obter_Semana_Dia_Agecons(dt_atual_w,dt_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0))
						and (obter_se_gerar_turno_semana(dt_inicio_vigencia,'Q',dt_atual_w) = 'S' OR ie_dia_semana <> 9 OR pkg_i18n.get_user_locale <> 'de_AT')
						
union

						SELECT 	1
						from 	agenda_Horario_esp a
						where 	dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
						and 	hr_inicial < hr_final
						and		coalesce(nr_minuto_intervalo,0) > 0
						and 	cd_agenda	= cd_agenda_p
					) alias49 LIMIT 1;
			exception
			when others then
				ie_turno_valido_w := 'N';
			end;
			
		end if;	

		
		
		-->> MANTER ESTE IF PARA FINS DE LOG PARA DEBUGAR A ROTINA
		/*if	(to_char(dt_atual_w,'dd/mm/yyyy') = '27/05/2015') then
			R a i s e_application_error(-20011,ie_turno_valido_w || ' - ' || cd_agenda_p || ' - ' || ie_dia_Semana_w || ' - ' || to_char(dt_atual_w,'dd/mm/yyyy') || ' - ' ||
									ie_feriado_w || ' - ' || ie_gerar_hor_passado_w || ' - ' || qt_bloqueio_w);
		end if;*/
		
		if (ie_dia_feriado_w = 'N') and (coalesce(ie_turno_valido_w,'N') = 'N') and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)) 
			and (qt_bloqueio_w = 0)then
			
			ie_status_dia_w	:= 'N';
			
		else
		
			IF (cd_tipo_agenda_w > 2) THEN
				BEGIN

				/*AGENDA DE CONSULTAS*/

				SELECT	/*+ index (a AGECONS_UK) */						SUM(CASE WHEN ie_status_agenda='L' THEN 0  ELSE 1 END ),
						SUM(CASE WHEN ie_status_agenda='L' THEN 1  ELSE CASE WHEN ie_status_agenda='LF' THEN 1  ELSE 0 END  END ),
						SUM(CASE WHEN ie_status_agenda='B' THEN 1  ELSE 0 END ),
						SUM(CASE WHEN coalesce(coalesce(cd_pessoa_fisica, CASE WHEN ie_status_agenda='B' THEN  null  ELSE nm_paciente END )::text, '') = '' THEN CASE WHEN ie_status_agenda='B' THEN  0  ELSE CASE WHEN ie_status_agenda='R' THEN  1  ELSE 0 END  END   ELSE 1 END ),
						SUM(CASE WHEN coalesce(ie_bloqueado_manual, 'N')='N' THEN  0  ELSE 1 END )
				INTO STRICT	qt_horario_w,
						qt_horario_livre_w,
						qt_horario_bloqueado_w,
						qt_horario_ocupado_w,
						qt_bloqueado_manual_w
				FROM 	agenda_consulta
				WHERE 	cd_agenda		= cd_agenda_p
				and	((cd_turno		= cd_turno_w) or (cd_turno_w = '2'))
				AND	dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
				AND	ie_status_agenda	<> 'C'
				and ie_status_agenda	<> 'II'
				and	((coalesce(ie_classif_agenda_p::text, '') = '') or (coalesce(ie_classif_agenda, ie_classif_agenda_p) = ie_classif_agenda_p))
				and	((coalesce(cd_convenio_p::text, '') = '') or (coalesce(cd_convenio, cd_convenio_p) = cd_convenio_p));		
				
				if (qt_bloqueio_w = 0 AND qt_bloqueado_manual_w = 0) then
					qt_horario_bloqueado_w := 0;
				end if;
				
				SELECT 	COUNT(*)
					INTO STRICT	qt_regra_horario_w
					FROM	agenda_Turno
					WHERE 	cd_agenda     	= cd_agenda_p
					AND		((ie_dia_semana	= ie_dia_semana_w) OR
							(ie_dia_semana	= 9 AND ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w))
					and obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,trunc(dt_atual_w)) = 'S'																		
					AND 	coalesce(dt_final_vigencia,dt_atual_w) >= dt_atual_w
					AND 	coalesce(dt_inicio_vigencia,dt_atual_w) <= dt_atual_w;
				
				IF	(((coalesce(qt_horario_livre_w,0) = 0) and (cd_tipo_agenda_w = 5)) or
					(qt_regra_horario_w = 0 AND cd_tipo_agenda_w = 5)) THEN
					BEGIN
					CALL Gerar_Horario_Agenda_Servico(
						cd_estabelecimento_p,
						cd_agenda_p,
						dt_atual_w,
						nm_usuario_p);
										
					SELECT	/*+ index (a AGECONS_UK) */							SUM(CASE WHEN ie_status_agenda='L' THEN 0  ELSE 1 END ),
							SUM(CASE WHEN ie_status_agenda='L' THEN 1  ELSE CASE WHEN ie_status_agenda='LF' THEN 1  ELSE 0 END  END ),
							SUM(CASE WHEN ie_status_agenda='B' THEN 1  ELSE 0 END ),
							SUM(CASE WHEN coalesce(coalesce(cd_pessoa_fisica, CASE WHEN ie_status_agenda='B' THEN  null  ELSE nm_paciente END )::text, '') = '' THEN 0  ELSE 1 END )
					INTO STRICT	qt_horario_w,
							qt_horario_livre_w,
							qt_horario_bloqueado_w,
							qt_horario_ocupado_w
					FROM 	agenda_consulta
					WHERE 	cd_agenda		= cd_agenda_p				
					AND	dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
					AND	ie_status_agenda	<> 'C';
												
					END;
				END IF;				
				
				IF	(((dt_atual_w >= TRUNC(clock_timestamp(), 'dd')) and (coalesce(qt_horario_livre_w,0) = 0)) or (qt_regra_horario_w = 0)) and (cd_tipo_agenda_w <> 5) THEN
					BEGIN

					ds_retorno_w := Horario_Livre_Consulta(
						cd_estabelecimento_p, cd_agenda_p, 'N', dt_atual_w, obter_desc_expressao(314533), ie_gravar_w, ie_sobra_horario_w, 'N', 0, ds_retorno_w);
					qt_horario_livre_w	:= coalesce(length(REGEXP_REPLACE(ds_retorno_w, '[^:]', '')), 0);
					END;
				END IF;
				
				
				
				/* Bruno */

				select	count(*)
				into STRICT	ie_existe_hor_gerado_w
				from 	agenda_consulta where cd_agenda = cd_agenda_p
				and	((cd_turno		= cd_turno_w) or (cd_turno_w = '2'))
				and	dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
				and	ie_status_agenda in ('L','LF');
				
				if (ie_existe_hor_gerado_w <> 0) then
					SELECT	/*+ index (a AGECONS_UK) */						SUM(CASE WHEN ie_status_agenda='L' THEN 1  ELSE CASE WHEN ie_status_agenda='LF' THEN 1  ELSE 0 END  END )
					INTO STRICT	qt_horario_livre_w
					FROM	agenda_consulta
					WHERE	cd_agenda		= cd_agenda_p
					and	((cd_turno		= cd_turno_w) or (cd_turno_w = '2'))
					AND	dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
					AND	ie_status_agenda	<> 'C'
					AND	((ie_classif_agenda NOT IN (	SELECT cd_classificacao
										FROM   agenda_classif
										WHERE  ie_nao_considera_mensal = 'S'))
					OR (coalesce(ie_classif_agenda::text, '') = ''	))
				and	((coalesce(ie_classif_agenda_p::text, '') = '') or (coalesce(ie_classif_agenda, ie_classif_agenda_p) = ie_classif_agenda_p))
				and	((coalesce(cd_convenio_p::text, '') = '') or (coalesce(cd_convenio, cd_convenio_p) = cd_convenio_p));				
				end if;			
				
				/*if	(to_char(dt_atual_w,'dd/mm/yyyy') = '27/05/2015') then
					R a i s e_application_error(-20011,ie_turno_valido_w || ' - ' || cd_agenda_p || ' - ' || ie_dia_Semana_w || ' - ' || to_char(dt_atual_w,'dd/mm/yyyy') || ' - ' ||
									ie_feriado_w || ' - ' || ie_gerar_hor_passado_w || ' - ' || qt_bloqueio_w || ' - ' || qt_horario_livre_w|| ' - ' || qt_horario_bloqueado_w);
				end if;*/
				
				--O qt_horario_w s? ? atualizado se os hor?rios livres estiverem gerados para o dia, caso contr?rio, atualiza o mesmo com base no bloqueio da agenda, se existir...
				if (coalesce(qt_horario_w,0) = 0) or (coalesce(qt_horario_bloqueado_w,0) = 0)then
					begin
					
					ie_dia_sem_w	:= obter_cod_dia_semana(dt_atual_w);
					
					--Busca seq. do turno atual(caso exista mais de 1)
					select	max(coalesce(nr_sequencia,0))
					into STRICT	nr_seq_turno_w
					from	agenda_turno
					where	coalesce(dt_inicio_vigencia, dt_atual_w) <= trunc(dt_atual_w)
					and		coalesce(dt_final_vigencia, dt_atual_w) >= trunc(dt_atual_w)
					and		nr_minuto_intervalo > 0
					and obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,trunc(dt_atual_w)) = 'S'																		
					and		((ie_dia_semana = ie_dia_sem_w) or ((ie_dia_semana = 9) and (ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
					and		cd_agenda = cd_agenda_p;					
									
					--Se possuir turno, busca os minutos de intervalo dos hor?rios
					if (nr_seq_turno_w > 0)then
						
						select	max(coalesce(a.nr_minuto_intervalo,0))
						into STRICT	nr_minuto_intervalo_w
						from	agenda_turno a							
						where  	a.cd_agenda     	= cd_agenda_p				
						and		a.nr_sequencia		= nr_seq_turno_w
						and		(((a.ie_dia_semana = 9) and (ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)))
						or		(a.ie_dia_semana <> 9 AND ie_dia_sem_w = a.ie_dia_semana))					
						and obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,trunc(dt_atual_w)) = 'S'																			
						and		coalesce(Obter_Se_Feriado(cd_estabelecimento_p, dt_atual_w),0) = 0;				
						
						if (nr_minuto_intervalo_w > 0) then
							open C01;
							loop
							fetch C01 into	
								qt_hor_bloq_per_w;
							EXIT WHEN NOT FOUND; /* apply on C01 */
								begin
								qt_total_hor_bloq_per_w		:= qt_hor_bloq_per_w		+ qt_total_hor_bloq_per_w;							
								end;
							end loop;
							close C01;
							
						end if;
						
					end if;		
					if (coalesce(qt_total_hor_bloq_per_w,0) > 0)then
						qt_horario_w 			:= qt_total_hor_bloq_per_w;
					end if;
					
					if (coalesce(qt_total_hor_bloq_per_w,0) > 0)then
						qt_horario_bloqueado_w := qt_total_hor_bloq_per_w;

					end if;
					
					exception
					when others then
						qt_horario_w := 0;
					end;			
				end if;						
				END;
			ELSE
				BEGIN
				/*AGENDA DE EXAMES*/

				--SELECT	/*+ INDEX(A AGEPACI_UK) */
				/*		SUM(DECODE(ie_status_agenda,'L',0,1)),
						SUM(DECODE(ie_status_agenda,'L',1,DECODE(ie_status_agenda, 'LF',1,0))),
						SUM(DECODE(ie_status_agenda,'B',1,0)),
						SUM(DECODE(nvl(cd_pessoa_fisica, decode(ie_status_agenda, 'B', null, nm_paciente)),NULL,decode(ie_status_agenda, 'B', 0, 1),1))
				INTO	qt_horario_w,
						qt_horario_livre_w,
						qt_horario_bloqueado_w,
						qt_horario_ocupado_w
				FROM	agenda_Paciente
				WHERE	cd_agenda				= cd_agenda_p
				AND		TRUNC(dt_agenda,'dd')	= dt_atual_w
				AND		ie_status_agenda		<> 'C';		*/
				SELECT	/*+ INDEX(A AGEPACI_UK) */						SUM(SUM(CASE WHEN ie_status_agenda='L' THEN 0  ELSE 1 END )) qt_horario_w,
						SUM(SUM(CASE WHEN ie_status_agenda='L' THEN 1  ELSE CASE WHEN ie_status_agenda='LF' THEN 1  ELSE 0 END  END )) qt_horario_livre_w,
						MIN(SUM(CASE WHEN a.ie_status_agenda='B' THEN 1  ELSE 0 END )) qt_horario_bloqueado_w,
						SUM(SUM(CASE WHEN coalesce(coalesce(a.cd_pessoa_fisica, CASE WHEN ie_status_agenda='B' THEN  NULL  ELSE nm_paciente END )::text, '') = '' THEN CASE WHEN ie_status_agenda='B' THEN  0  ELSE 1 END   ELSE 1 END )) qt_horario_ocupado_w
				INTO STRICT	qt_horario_w,
						qt_horario_livre_w,
						qt_horario_bloqueado_w,
						qt_horario_ocupado_w
				FROM	agenda_Paciente a,
						agenda b
				WHERE	a.cd_agenda = b.cd_agenda
				AND		dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
				AND		a.ie_status_agenda		<> 'C'
				AND		((coalesce(cd_departamento_medico_w::text, '') = '' AND a.cd_agenda = cd_agenda_p) OR (b.cd_departamento_medico = cd_departamento_medico_w))
				GROUP BY a.cd_agenda;
								
				IF	((dt_atual_w >= clock_timestamp()) AND (coalesce(qt_horario_livre_w,0) = 0)) OR
					((ie_gerar_hor_livre_w	= 'S') AND (dt_atual_w <= clock_timestamp()) AND (coalesce(qt_horario_livre_w,0) > 0)) THEN
					BEGIN
					ds_horarios_w
								 := Obter_Horarios_Livres( cd_estabelecimento_p, cd_agenda_p, dt_atual_w, dt_atual_w, 0, NULL, NULL, NULL, 'Tasy', 'N', ds_horarios_w
								);
				
					qt_horario_livre_w	:= LENGTH(ds_horarios_w);
					
					END;
				END IF;				
				
				select	count(*)
				into STRICT	ie_existe_hor_gerado_w
				from 	agenda_paciente 
				where 	cd_agenda = cd_agenda_p
				and		dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
				and		ie_status_agenda in ('L','LF');			
				qt_bloqueio_sem_horario_w := 0;								
				
				if (cd_tipo_agenda_w = 2 and ie_existe_hor_gerado_w = 0)then
					CALL Gerar_Horario_Agenda_Exame(cd_estabelecimento_p, cd_agenda_p, dt_atual_w, nm_usuario_p);
				end if;
				
				if (ie_existe_hor_gerado_w <> 0) then
					SELECT	/*+ INDEX(A AGEPACI_UK) */							SUM(CASE WHEN ie_status_agenda='L' THEN 1  ELSE CASE WHEN ie_status_agenda='LF' THEN 1  ELSE 0 END  END )
					INTO STRICT	qt_horario_livre_w
					FROM	agenda_Paciente
					WHERE	cd_agenda		= cd_agenda_p
					AND		dt_agenda between trunc(dt_atual_w) and fim_dia(dt_atual_w)
					AND		ie_status_agenda	<> 'C'
					AND		((nr_seq_classif_agenda NOT IN (	SELECT	nr_sequencia
																FROM   	agenda_paciente_classif
																WHERE  	ie_agenda_mensal = 'S'))
					OR (coalesce(nr_seq_classif_agenda::text, '') = ''	));								
					
				else
					SELECT	MIN(coalesce(c.qt_bloqueio,0)) qt_bloqueio
					into STRICT	qt_bloqueio_sem_horario_w
					FROM agenda d
LEFT OUTER JOIN (
							SELECT	count(*) qt_bloqueio,
									b.cd_agenda
							FROM	agenda_bloqueio a,
									agenda b
							WHERE	a.cd_agenda = b.cd_agenda
							and     dt_atual_w between dt_inicial and dt_final
							AND		((coalesce(a.ie_dia_semana,ie_dia_semana_w) = ie_dia_semana_w) OR
									((a.ie_dia_semana	= 9) AND (ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w) or
									(ie_cons_leg_bloq_fim_sem_w = 'S' AND ie_dia_semana_w BETWEEN qt_dia_filtro_ini_w AND qt_dia_filtro_fim_w)))
							AND 	((coalesce(cd_departamento_medico_w::text, '') = '' AND b.cd_agenda = cd_agenda_p) OR (b.cd_departamento_medico = cd_departamento_medico_w))
							group by b.cd_agenda) c ON (d.cd_agenda = c.cd_agenda)
WHERE ((coalesce(cd_departamento_medico_w::text, '') = '' AND d.cd_agenda = cd_agenda_p) OR (d.cd_departamento_medico = cd_departamento_medico_w));
					

					/*select  count(*)
					into	qt_bloqueio_sem_horario_w
					from    agenda_bloqueio 
					where   cd_agenda     = cd_agenda_p
					and     dt_atual_w between dt_inicial and dt_final
					AND		((nvl(ie_dia_semana,ie_dia_semana_w) = ie_dia_semana_w) OR
							((ie_dia_semana	= 9) AND (ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w) or
							((ie_cons_leg_bloq_fim_sem_w = 'S') and (ie_dia_semana_w BETWEEN qt_dia_filtro_ini_w AND qt_dia_filtro_fim_w))));*/
					
					if (qt_bloqueio_sem_horario_w > 0) then
									
					
						ie_dia_sem_w	:= obter_cod_dia_semana(dt_atual_w);
						
						open C02;
						loop
						fetch C02 into	
							hr_inicio_agenda_w,
							hr_final_agenda_w;
						EXIT WHEN NOT FOUND; /* apply on C02 */
							begin
							if (hr_inicio_agenda_w IS NOT NULL AND hr_inicio_agenda_w::text <> '')
								and (hr_final_agenda_w IS NOT NULL AND hr_final_agenda_w::text <> '')
								and (qt_bloqueio_sem_horario_w > 0) then
									
									select	count(*)
									into STRICT	qt_bloqueio_sem_horario_w
									from    agenda_bloqueio b,
										agenda_horario h
									where   b.cd_agenda    = h.cd_agenda
									and	b.cd_agenda    = cd_agenda_p
									and     dt_atual_w between b.dt_inicial and b.dt_final
									--Caso n?o possua dia da semana informado nos bloqueios valida pela data nos horarios cadastrados.
									and	(((coalesce(b.ie_dia_semana::text, '') = '') and (h.dt_dia_semana = ie_dia_sem_w or (h.dt_dia_semana = 9 and ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
									--Caso possua dia da semana informado faz a valida??o;
										or ((b.ie_dia_semana = ie_dia_sem_w) or (b.ie_dia_semana = 9 and ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
									and	((coalesce(b.hr_inicio_bloqueio::text, '') = '' and coalesce(b.hr_final_bloqueio::text, '') = '')
										or (coalesce(b.hr_inicio_bloqueio::text, '') = '' and to_date(to_char(dt_atual_w, 'dd/mm/yyyy')||' '||to_char(b.hr_final_bloqueio, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >= hr_final_agenda_w)
										or (coalesce(b.hr_final_bloqueio::text, '') = '' and to_date(to_char(dt_atual_w, 'dd/mm/yyyy')||' '||to_char(b.hr_inicio_bloqueio, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <= hr_inicio_agenda_w)
										or (to_date(to_char(dt_atual_w, 'dd/mm/yyyy')||' '||to_char(b.hr_inicio_bloqueio, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <= hr_inicio_agenda_w 
										and to_date(to_char(dt_atual_w, 'dd/mm/yyyy')||' '||to_char(b.hr_final_bloqueio, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >= hr_final_agenda_w))
									and	coalesce(Obter_Se_Feriado(cd_estabelecimento_p, dt_atual_w),0) = 0;
														
							end if;
							end;
						end loop;
						close C02;
					end if;
				end if;			

				
							
				--O qt_horario_w s? ? atualizado se os hor?rios livres estiverem gerados para o dia, caso contr?rio, atualiza o mesmo com base no bloqueio da agenda, se existir...			
				if (coalesce(qt_horario_w,0) = 0) or (coalesce(qt_horario_bloqueado_w,0) = 0)then
					begin				
					ie_dia_sem_w	:= obter_cod_dia_semana(dt_atual_w);
				
					
					--Busca seq. do turno atual(caso exista mais de 1)
					select	max(coalesce(nr_sequencia,0))
					into STRICT	nr_seq_turno_w
					from	agenda_horario
					where	to_char(clock_timestamp(),'hh24:mi:ss') between to_char(hr_inicial,'hh24:mi:ss') and to_char(hr_final,'hh24:mi:ss')
					and		trunc(coalesce(dt_inicio_vigencia, dt_atual_w)) <= trunc(dt_atual_w)
					and		trunc(coalesce(dt_final_vigencia, dt_atual_w)) >= trunc(dt_atual_w)
					and		nr_minuto_intervalo > 0
					and		((dt_dia_semana = ie_dia_sem_w) or ((dt_dia_semana = 9) and (ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
					and		cd_agenda = cd_agenda_p;														
					
					--Se possuir turno, busca os minutos de intervalo dos hor?rios
					if (nr_seq_turno_w > 0)then
						
						select	max(coalesce(a.nr_minuto_intervalo,0))
						into STRICT	nr_minuto_intervalo_w
						from	agenda_horario a							
						where  	a.cd_agenda     	= cd_agenda_p				
						and		a.nr_sequencia		= nr_seq_turno_w
						and		(((a.dt_dia_semana = 9) and (ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)))
						or		(a.dt_dia_semana <> 9 AND ie_dia_sem_w = a.dt_dia_semana))					
						and		coalesce(Obter_Se_Feriado(cd_estabelecimento_p, dt_atual_w),0) = 0;																	
						
						if (nr_minuto_intervalo_w > 0)then
							open C01;
							loop
							fetch C01 into	
								qt_hor_bloq_per_w;
							EXIT WHEN NOT FOUND; /* apply on C01 */
								begin
								qt_total_hor_bloq_per_w		:= qt_hor_bloq_per_w		+ qt_total_hor_bloq_per_w;							
								end;
							end loop;
							close C01;
							
						end if;					
					
					end if;		
					if (coalesce(qt_total_hor_bloq_per_w,0) > 0)then
						qt_horario_w 			:= qt_total_hor_bloq_per_w;
					end if;
					
					if (coalesce(qt_total_hor_bloq_per_w,0) > 0)then
						qt_horario_bloqueado_w := qt_total_hor_bloq_per_w;

					end if;						
				
					exception
					when others then
						qt_horario_w := 0;
					end;			
				end if;				
				END;
			END IF;
		
		/* Status por Dia
			L - Existem Livres
			F - Feriado
			B - Bloqueado
			N - N?o tem Agenda Dia
			X - Todos hor?rios Livres
			T - Todos Horarios Lotados
			D - Sabados e Domingos
			R - N?o liberado

		*/
		
		
			--Apenas fazer o if abaixo se a fun??o aberta for a "Agenda de Exames" e se o dia possuir hor?rios gerados/turno cadastrado
			if (ie_cons_leg_bloq_fim_sem_w = 'S') and (wheb_usuario_pck.get_cd_funcao = 820) and (ie_existe_hor_gerado_w > 0)then
				BEGIN			
				/*SELECT 	COUNT(*)
				INTO	qt_bloqueio_w
				FROM	agenda_bloqueio
				WHERE	1 = 1 --cd_agenda	= cd_agenda_p
				and	nm_usuario_p <> 'mhgieland' or (nm_usuario_p = 'mhgieland' and cd_departamento_medico = cd_departamento_medico_w)
				AND 	TRUNC(dt_inicial,'dd')	<= dt_atual_w
				AND 	TRUNC(dt_final,'dd')	>= dt_atual_w
				AND		((nvl(ie_dia_semana,ie_dia_semana_w) = ie_dia_semana_w) OR
						(((ie_dia_semana	= 9) AND (ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w)) or
						((ie_cons_leg_bloq_fim_sem_w = 'S') and (ie_dia_semana_w BETWEEN qt_dia_filtro_ini_w AND qt_dia_filtro_fim_w))));*/
				SELECT	MIN(coalesce(c.qt_bloqueio,0)) qt_bloqueio
				INTO STRICT	qt_bloqueio_w
				FROM agenda d
LEFT OUTER JOIN (
						SELECT	COUNT(*) qt_bloqueio,
								b.cd_agenda
						FROM	agenda_bloqueio a,
								agenda b
						WHERE	a.cd_agenda = b.cd_agenda
						AND 	TRUNC(a.dt_inicial,'dd')	<= dt_atual_w
						AND 	TRUNC(a.dt_final,'dd')	>= dt_atual_w
						AND		((coalesce(a.ie_dia_semana,ie_dia_semana_w) = ie_dia_semana_w) OR
								((a.ie_dia_semana	= 9 AND ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w) or
								(ie_cons_leg_bloq_fim_sem_w = 'S' AND ie_dia_semana_w BETWEEN qt_dia_filtro_ini_w AND qt_dia_filtro_fim_w)))
						AND 	((coalesce(cd_departamento_medico_w::text, '') = '' AND b.cd_agenda = cd_agenda_p) OR (b.cd_departamento_medico = cd_departamento_medico_w))
						group by b.cd_agenda) c ON (d.cd_agenda = c.cd_agenda)
WHERE ((coalesce(cd_departamento_medico_w::text, '') = '' AND d.cd_agenda = cd_agenda_p) OR (d.cd_departamento_medico = cd_departamento_medico_w));
				EXCEPTION
					WHEN OTHERS THEN
						ie_bloqueio_w := 'N';
				END;
				
				IF (qt_bloqueio_w > 0) THEN
					ie_status_dia_w	:= 'B';
				END IF;						
				
			end if;	
			
			ie_dia_sem_w	:= obter_cod_dia_semana(dt_atual_w);


			if (cd_tipo_agenda_w in (1,2))then
				select	max(coalesce(nr_sequencia,0))
				into STRICT	nr_seq_turno_w
				from	agenda_horario
				where	trunc(coalesce(dt_inicio_vigencia, dt_atual_w)) <= trunc(dt_atual_w)
				and		trunc(coalesce(dt_final_vigencia, dt_atual_w)) >= trunc(dt_atual_w)
				and		nr_minuto_intervalo > 0
				and		((dt_dia_semana = ie_dia_sem_w) or ((dt_dia_semana = 9) and (ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
				and		cd_agenda = cd_agenda_p;			
			else
				select	max(coalesce(nr_sequencia,0))
				into STRICT	nr_seq_turno_w
				from	agenda_turno
				where	trunc(coalesce(dt_inicio_vigencia, dt_atual_w)) <= trunc(dt_atual_w)
				and		trunc(coalesce(dt_final_vigencia, dt_atual_w)) >= trunc(dt_atual_w)
				and		nr_minuto_intervalo > 0
				and obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,trunc(dt_atual_w)) = 'S'																			
				and		((ie_dia_semana = ie_dia_sem_w) or ((ie_dia_semana = 9) and (ie_dia_sem_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
				and		cd_agenda = cd_agenda_p;
			end if;

			--Validar se existe permiss?o de agendaento nos feriados
			if (ie_dia_feriado_w = 'S')then
				begin
				select	max(coalesce(ie_feriado,'N'))
				into STRICT	ie_agenda_feriado_w
				from	agenda
				where	cd_agenda = cd_agenda_p;

				--Busca seq. do turno atual(caso exista mais de 1)				
				if (nr_seq_turno_w > 0)then
					if (cd_tipo_agenda_w = 5) then
						ie_gerar_hor_feriado_w	:= ie_agenda_feriado_w;
					elsif (cd_tipo_agenda_w in (1,2))then
						select	max(ie_feriado)
						into STRICT	ie_gerar_hor_feriado_w
						from	agenda_horario
						where	nr_sequencia = nr_seq_turno_w;
					else
						select	max(ie_feriado)
						into STRICT	ie_gerar_hor_feriado_w
						from	agenda_turno
						where	nr_sequencia = nr_seq_turno_w;
					end if;			
				end if;			
				
				exception
				when others then
					ds_erro_w := substr(sqlerrm,1,255);
				end;
			end if;		
			
			-->> MANTER ESTE IF PARA FINS DE LOG PARA DEBUGAR A ROTINA
			/*if	(to_char(dt_atual_w,'dd/mm/yyyy') = '27/05/2015') then
				R a i s e_application_error(-20011,dt_atual_w||' - '||nr_seq_turno_w || ' - ' || nvl(qt_bloqueio_sem_horario_w,0) || ' - ' || NVL(qt_horario_bloqueado_w, 0) || ' - ' || NVL(qt_horario_livre_w,0)
										|| ' - ' || ie_dia_semana_w || ' - ' || qt_dia_filtro_ini_w || ' - ' || qt_dia_filtro_fim_w || ' - ' || NVL(qt_horario_ocupado_w,0)
										|| ' - ' || NVL(qt_horario_w,0) || ' - ' || ie_dia_feriado_w || ' - ' || qt_bloqueio_w);
			end if;*/
						
				
			/*Somente aplicar a cor de feriado se:
			O dia for um feriado efetivamente;
			A agenda n?o tenha permiss?o para agendar nos feriados(check-box da configura??o da agenda) ou o turno da agenda n?o esteja configurado para gerar hor?rio nos feriados*/
			IF (ie_dia_feriado_w = 'S') then
				/*((ie_agenda_feriado_w = 'S') or
				(ie_gerar_hor_feriado_w <> 'N'))THEN*/
				ie_status_dia_w	:= 'F';
			elsif	((((coalesce(qt_bloqueio_sem_horario_w,0) > 0) or (coalesce(qt_horario_bloqueado_w, 0) > 0) AND (coalesce(qt_horario_livre_w,0) = 0)) and (ie_dia_semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)) and (coalesce(qt_horario_ocupado_w,0) = 0)) or
					((coalesce(qt_horario_w,0) > 0) AND (coalesce(qt_horario_livre_w,0) = 0) AND (coalesce(qt_horario_ocupado_w,0) = 0) AND (coalesce(qt_horario_bloqueado_w, 0) > 0) and (coalesce(ie_dia_feriado_w, 'N') <> 'S'))) THEN	
				ie_status_dia_w	:= 'B';



				
			elsif (qt_dias_fut_w > 0) and (dt_atual_w > trunc(clock_timestamp() + qt_dias_fut_w)) and (nr_seq_turno_w IS NOT NULL AND nr_seq_turno_w::text <> '')then
				ie_status_dia_w	:= 'R';		
			ELSIF (coalesce(qt_horario_w,0) > 0) and (coalesce(ie_dia_feriado_w, 'N') <> 'S') and
					((coalesce(qt_horario_ocupado_w,0) > 0) or (coalesce(qt_horario_bloqueado_w, 0) > 0)) THEN			
					IF (coalesce(qt_horario_livre_w,0) > 0) THEN
						ie_status_dia_w	:= 'L';
					ELSE
						ie_status_dia_w	:= 'T';
					END IF;			
			ELSIF (coalesce(qt_horario_livre_w,0) > 0) and (coalesce(ie_dia_feriado_w, 'N') <> 'S')THEN

				ie_status_dia_w	:= 'X';
			elsif	(((ie_dia_semana_w in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)) and ((qt_bloqueio_w > 0) or (coalesce(qt_bloqueio_sem_horario_w,0) > 0)) and (ie_cons_leg_bloq_fim_sem_w = 'S') and (coalesce(qt_horario_ocupado_w,0) = 0))) then		
				ie_status_dia_w	:= 'B';
			ELSIF (ie_dia_semana_w = qt_dia_filtro_fim_w) OR (ie_dia_semana_w = qt_dia_filtro_ini_w) and (ie_cons_leg_bloq_fim_sem_w = 'N')THEN				
				ie_status_dia_w	:= 'D';					
			ELSE
				BEGIN	
				
				if (cd_tipo_agenda_w in (1,2))then
					SELECT 	COUNT(*)
					INTO STRICT	qt_regra_horario_w
					FROM	agenda_horario
					WHERE 	cd_agenda     	= cd_agenda_p
					AND		((dt_dia_semana	= ie_dia_semana_w) OR
							(dt_dia_semana	= 9 AND ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w))
					AND 	coalesce(dt_inicio_vigencia,dt_atual_w) >= dt_atual_w
					AND 	coalesce(dt_final_vigencia,dt_atual_w) <= dt_atual_w;							
				elsif (cd_tipo_agenda_w in (3,4,5))then
					SELECT 	COUNT(*)
					INTO STRICT	qt_regra_horario_w
					FROM	agenda_Turno
					WHERE 	cd_agenda     	= cd_agenda_p
					AND		((ie_dia_semana	= ie_dia_semana_w) OR
							(ie_dia_semana	= 9 AND ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w))
					and obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,trunc(dt_atual_w)) = 'S'																		
					AND 	coalesce(dt_final_vigencia,dt_atual_w) >= dt_atual_w
					AND 	coalesce(dt_inicio_vigencia,dt_atual_w) <= dt_atual_w;							
				end if;						
				
				if (qt_regra_horario_w > 0)then
					BEGIN			


					SELECT	MIN(coalesce(c.qt_bloqueio,0)) qt_bloqueio
					INTO STRICT	qt_bloqueio_w
					FROM agenda d
LEFT OUTER JOIN (	SELECT 	COUNT(*) qt_bloqueio,
										b.cd_agenda
								FROM	agenda_bloqueio a,
										agenda b
								WHERE	a.cd_agenda = b.cd_agenda
								AND 	TRUNC(a.dt_inicial,'dd')	<= TRUNC(dt_atual_w,'dd')
								AND 	TRUNC(a.dt_final,'dd')	>= TRUNC(dt_atual_w,'dd')
								AND		((coalesce(a.ie_dia_semana,ie_dia_semana_w) = ie_dia_semana_w) OR
										((a.ie_dia_semana	= 9) AND (ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w) OR (ie_cons_leg_bloq_fim_sem_w = 'S')))
								AND 	((coalesce(cd_departamento_medico_w::text, '') = '' AND b.cd_agenda = cd_agenda_p) OR (b.cd_departamento_medico = cd_departamento_medico_w))
								group by b.cd_agenda) c ON (d.cd_agenda = c.cd_agenda)
WHERE ((coalesce(cd_departamento_medico_w::text, '') = '' AND d.cd_agenda = cd_agenda_p) OR (d.cd_departamento_medico = cd_departamento_medico_w));
					
					/*SELECT 	COUNT(*)
					INTO	qt_bloqueio_w
					FROM	agenda_bloqueio
					WHERE	cd_agenda	= cd_agenda_p
					AND 	TRUNC(dt_inicial,'dd')	<= trunc(dt_atual_w,'dd')
					AND 	TRUNC(dt_final,'dd')	>= trunc(dt_atual_w,'dd')
					AND		((nvl(ie_dia_semana,ie_dia_semana_w) = ie_dia_semana_w) OR
							((ie_dia_semana	= 9) AND (ie_dia_semana_w BETWEEN qt_dia_inicial_w AND qt_dia_final_w) or
							(ie_cons_leg_bloq_fim_sem_w = 'S')));*/
					EXCEPTION
						WHEN OTHERS THEN
							ie_bloqueio_w := 'N';
					END;


					IF (qt_bloqueio_w > 0) THEN
						ie_status_dia_w	:= 'B';
					END IF;										
				end if;							
				IF	((qt_regra_horario_w = 0) OR
					((coalesce(qt_horario_livre_w,0) = 0) AND (coalesce(qt_horario_w,0) = 0)) and (ie_status_dia_w <> 'B')) and (ie_dia_feriado_w = 'N') then
					ie_status_dia_w	:= 'N';
				END IF;	
						
				END;							
			END IF;	

		end if;
		
		-->> MANTER ESTE IF PARA FINS DE LOG PARA DEBUGAR A ROTINA
		/*if	(to_char(dt_atual_w,'dd/mm/yyyy') = '29/04/2015') then
			R a i s e_application_error(-20011,ie_status_dia_w);
		end if;*/
		ie_status_w		:= ie_status_w || ie_status_dia_w;
		ds_lista_total_livre_w 	:= ds_lista_total_livre_w || coalesce(qt_horario_livre_w, 0) || ',';
		dt_atual_w		:= dt_atual_w + 1;
		END;
	END LOOP;
	END;
ELSE
	BEGIN
	ie_status_w 	:= '';
	dt_atual_w 	:= TRUNC(dt_inicial_p,'dd');

	WHILE(dt_atual_w <= TRUNC(dt_final_p,'dd')) LOOP
		BEGIN
		ie_status_w	:= ie_status_w || 'N';
		dt_atual_w	:= dt_atual_w + 1;
		END;
	END LOOP;
	END;
END IF;

ie_status_p := ie_status_w;
ds_lista_total_livre_p := substr(ds_lista_total_livre_w,1,length(ds_lista_total_livre_w)-1);
if (ds_lista_total_livre_w <> '') then
	ds_lista_total_livre_p := substr(ds_lista_total_livre_w,1,length(ds_lista_total_livre_w)-1);
end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE agenda_dia_status ( cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_Inicial_p timestamp, dt_final_p timestamp, cd_turno_p text, nm_usuario_p text, ie_Status_p INOUT text, cd_departamento_medico_p bigint default null, cd_convenio_p bigint default null, ie_classif_agenda_p text default null, ds_lista_total_livre_p INOUT text DEFAULT NULL) FROM PUBLIC;

