-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_receber_broker ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE



_ora2pg_r RECORD;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w		varchar(15);
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ds_erro_w			varchar(4000);
ie_erro_w 			varchar(1) := 'N';
ie_exception_w			varchar(1) := 'N';
i				integer;
convenio_broker_w		convenio_broker%rowtype;
qt_broker_w			bigint;

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/BROKER' passing xml_p columns
	ie_action		varchar(40)	path		'IE_ACTION',
	cd_broker		bigint	path		'CD_BROKER',
	cd_insurance		varchar(40)	path		'CD_INSURANCE',
	dt_update		varchar(14)	path		'DT_UPDATE',
	ie_situation		varchar(1)	path		'IE_SITUATION',
	nm_broker		varchar(255)	path		'NM_BROKER',
	nm_user			varchar(15)	path		'NM_USER',
	nr_external_document	varchar(80)	path		'NR_EXTERNAL_DOCUMENT');

c01_w	c01%rowtype;


BEGIN



update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

commit;

begin
select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:=	'R';
reg_integracao_w.ie_sistema_externo		:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao			:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log			:=	0;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	begin
	ie_erro_w				:= 	'N';
	reg_integracao_w.nm_tabela		:=	'CONVENIO_BROKER';
	reg_integracao_w.nm_elemento		:=	'BROKER';

	c01_w.ie_action := coalesce(upper(c01_w.ie_action),'INSERT');

	if (c01_w.ie_action = 'DELETE') then

		if (coalesce(c01_w.cd_broker::text, '') = '') then

			intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1010175),'INTPDTASY','0004');
			ie_erro_w := 'S';
		else
			begin
			delete
			from convenio_broker
			where nr_sequencia = c01_w.cd_broker;

			exception
				when others then
					rollback;

					update convenio_broker
					set ie_situacao = 'I'
					where nr_sequencia = c01_w.cd_broker;
			end;
			convenio_broker_w.nr_sequencia := null;

		end if;
	else -- INSERT or UPDATE
		if (coalesce(upper(c01_w.ie_action),'INSERT') = 'UPDATE') then

			select 	count(*)
			into STRICT	qt_broker_w
			from 	convenio_broker
			where 	nr_sequencia = c01_w.cd_broker;

			if (qt_broker_w = 0) then
				/*Código do broker inválido ou inexistente no Tasy para exclusão ou alteração do registro.*/

				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1010175),'INTPDTASY','0004');
				ie_erro_w := 'S';
			end if;
		end if;

		if (ie_erro_w = 'N') then

			begin
			/*'Busca o registro atual do Tasy pela PK'
			Esse tratamento foi necessário porque quando é update, o sistema externo só envia as informações alteradas e o restante dos campos eles mandam vazio. Então temos que buscar a informação que já está gravada na tabela.*/
			select	*
			into STRICT	convenio_broker_w
			from	convenio_broker
			where 	nr_sequencia = c01_w.cd_broker  LIMIT 1;
			exception
			when others then
				null;
			end;

			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CONVENIO', c01_w.cd_insurance, 'S', convenio_broker_w.cd_convenio) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; convenio_broker_w.cd_convenio := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c01_w.dt_update, 'N', convenio_broker_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; convenio_broker_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_SITUACAO', c01_w.ie_situation, 'N', convenio_broker_w.ie_situacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; convenio_broker_w.ie_situacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_BROKER', c01_w.nm_broker, 'N', convenio_broker_w.nm_broker) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; convenio_broker_w.nm_broker := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_user, 'N', convenio_broker_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; convenio_broker_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_DOC_EXTERNO', c01_w.nr_external_document, 'N', convenio_broker_w.nr_doc_externo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; convenio_broker_w.nr_doc_externo := _ora2pg_r.ds_valor_retorno_p;
			convenio_broker_w.nm_usuario_nrec	:= convenio_broker_w.nm_usuario;
			convenio_broker_w.dt_atualizacao_nrec	:= clock_timestamp();

			if (reg_integracao_w.qt_reg_log = 0) then

				select	max(nr_sequencia)
				into STRICT	convenio_broker_w.nr_sequencia
				from	convenio_broker
				where 	nr_sequencia = c01_w.cd_broker;

				if (coalesce(convenio_broker_w.nr_sequencia,0) > 0) then

					update	convenio_broker
					set	row = convenio_broker_w
					where	nr_sequencia = convenio_broker_w.nr_sequencia;

				else
					select nextval('convenio_broker_seq')
					into STRICT convenio_broker_w.nr_sequencia
					;

					insert into convenio_broker values (convenio_broker_w.*);

					/*'Registra a conversão que poderá ser utilizada em outros pontos de integração e para somente atualizar (update) num recebimento futuro do mesmo registro.'*/

					if (nr_seq_regra_w > 0) then
						CALL gerar_conv_meio_externo(null, 'CONVENIO_BROKER', 'NR_SEQUENCIA', convenio_broker_w.nr_sequencia, c01_w.nr_external_document, null, nr_seq_regra_w, 'A', convenio_broker_w.nm_usuario);
					end if;
				end if;
			end if;
		end if;
	end if;
	end;
end loop;
close c01;

exception
when others then
	begin
	ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
	rollback;

	update	intpd_fila_transmissao
	set	ie_status = 'E',
		cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
		ds_log = ds_erro_w,
		nr_doc_externo = c01_w.nr_external_document
	where	nr_sequencia = nr_sequencia_p;

	ie_exception_w := 'S';

	end;
end;

if (ie_exception_w = 'N') then

	if	((reg_integracao_w.qt_reg_log > 0) or (ie_erro_w = 'S')) then
		begin
		rollback;

		update	intpd_fila_transmissao
		set	ie_status = 'E',
			cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
			ds_log = ds_erro_w,
			nr_doc_externo = c01_w.nr_external_document
		where	nr_sequencia = nr_sequencia_p;

		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY',reg_integracao_w.intpd_log_receb[i].cd_default_message);
		end loop;
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status = 'S',
			cd_default_message = '0000',
			nr_seq_documento = coalesce(convenio_broker_w.nr_sequencia,c01_w.cd_broker),
			nr_doc_externo 	 = c01_w.nr_external_document
		where	nr_sequencia = nr_sequencia_p;
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_receber_broker ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

