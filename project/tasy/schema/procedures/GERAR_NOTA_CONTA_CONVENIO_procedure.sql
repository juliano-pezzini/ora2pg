-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nota_conta_convenio ( nr_seq_protocolo_p protocolo_convenio.nr_seq_protocolo%type, cd_convenio_p convenio.cd_convenio%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

 
nr_conta_inicial_w	conta_convenio_atual.nr_conta_inicial%type;
nr_final_conta_w	conta_convenio_atual.nr_final_conta%type;
nr_conta_atual_w	conta_convenio_atual.nr_conta_atual%type;
nr_conta_novo_w		conta_convenio_atual.nr_conta_atual%type;
nr_nota_w		conta_convenio_atual.nr_conta_atual%type;
qt_conta_w		bigint := 0;
qt_nota_prot_w		bigint := 0;
nr_interno_conta_w	conta_paciente.nr_interno_conta%type;
nr_nota_conta_w		protocolo_conv_nota_conta.nr_nota_conta%type;
nr_nota_inicial_w	protocolo_conv_nota_conta.nr_nota_conta%type := 0;
dt_mesano_referencia_w	protocolo_convenio.dt_mesano_referencia%type;

C01 CURSOR FOR 
	SELECT	nr_interno_conta 
	from	conta_paciente 
	where	nr_seq_protocolo = nr_seq_protocolo_p 
	and	coalesce(ie_cancelamento::text, '') = '' 
	order by nr_interno_conta;

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w	vetor;

BEGIN 
 
select	dt_mesano_referencia 
into STRICT	dt_mesano_referencia_w 
from	protocolo_convenio 
where	nr_seq_protocolo = nr_seq_protocolo_p  LIMIT 1;
 
begin 
select	count(distinct nr_interno_conta) 
into STRICT	qt_conta_w 
from	conta_paciente 
where	nr_seq_protocolo = nr_seq_protocolo_p;
exception 
when others then 
	qt_conta_w := 0;
end;
 
begin 
select	count(nr_nota_conta) 
into STRICT	qt_nota_prot_w 
from	protocolo_conv_nota_conta 
where	nr_seq_protocolo = nr_seq_protocolo_p;
exception 
when others then 
	qt_nota_prot_w := 0;
end;
 
CALL gerar_conta_convenio_atual(cd_convenio_p,dt_mesano_referencia_w,nm_usuario_p);
 
begin 
select	coalesce(nr_conta_inicial,1), 
	coalesce(nr_final_conta,0), 
	coalesce(nr_conta_atual,coalesce(nr_conta_inicial,1)) 
into STRICT	nr_conta_inicial_w, 
	nr_final_conta_w, 
	nr_conta_atual_w 
from	conta_convenio_atual 
where	cd_convenio = cd_convenio_p 
and	ie_situacao = 'A' 
and	trunc(dt_competencia,'month') = trunc(dt_mesano_referencia_w,'month')  
for update LIMIT 1;
exception 
when others then 
	commit;
	nr_conta_inicial_w	:= 1;
	nr_final_conta_w	:= 0;
	nr_conta_atual_w	:= null;
end;
 
if (coalesce(nr_conta_atual_w,0) > 0) and (qt_conta_w > 0) and (qt_nota_prot_w = 0) then 
	begin 
 
	nr_nota_w := nr_conta_atual_w;
 
	if	((nr_conta_atual_w + qt_conta_w) > nr_final_conta_w) then 
		begin 
		nr_conta_novo_w := nr_conta_inicial_w + ((nr_conta_atual_w + qt_conta_w) - nr_final_conta_w);
		end;
	else 
		nr_conta_novo_w := (nr_conta_atual_w + qt_conta_w);
	end if;
 
	update	conta_convenio_atual 
	set	nr_conta_atual 	= nr_conta_novo_w + 1, 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where 	cd_convenio = cd_convenio_p 
	and	trunc(dt_competencia,'month') = trunc(dt_mesano_referencia_w,'month');
	 
	update	protocolo_convenio 
	set 	nr_seq_doc_convenio = nr_conta_atual_w + 1, 
		dt_atualizacao	= clock_timestamp(), 
		nm_usuario 	= nm_usuario_p 
	where 	nr_seq_protocolo = nr_seq_protocolo_p;
	 
	commit;
	 
	open c01;
	loop 
	fetch c01 bulk collect into s_array limit 100000;
		vetor_c01_w(i) := s_array;
		i := i + 1;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	end loop;
	close c01;
 
	for i in 1..vetor_c01_w.count loop 
		begin 
		s_array := vetor_c01_w(i);
		for z in 1..s_array.count loop 
			begin 
 
			nr_interno_conta_w := s_array[z].nr_interno_conta;
 
			nr_nota_w := nr_nota_w + 1;
 
			if (nr_nota_w > nr_final_conta_w) then 
				nr_nota_w := nr_conta_inicial_w;
			end if;
 
			update 	conta_paciente 
			set 	nr_conta_convenio = nr_nota_w, 
				nm_usuario	= nm_usuario_p, 
				dt_atualizacao	= clock_timestamp() 
			where 	nr_interno_conta = nr_interno_conta_w;
 
			insert into protocolo_conv_nota_conta( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo, 
				nr_interno_conta, 
				nr_nota_conta) 
			values (	nextval('protocolo_conv_nota_conta_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_p, 
				nr_interno_conta_w, 
				nr_nota_w);
 
			end;
		end loop;
		end;
	end loop;
 
	end;
elsif (coalesce(nr_conta_atual_w,0) > 0) and (qt_conta_w > 0) and (qt_nota_prot_w > 0) then 
	begin 
 
	if (qt_nota_prot_w < qt_conta_w) then 
		qt_conta_w := qt_conta_w - qt_nota_prot_w;
	else 
		qt_conta_w := 0;
	end if;
 
	if	((nr_conta_atual_w + qt_conta_w) > nr_final_conta_w) then 
		begin 
		nr_conta_novo_w := nr_conta_inicial_w + ((nr_conta_atual_w + qt_conta_w) - nr_final_conta_w);
		end;
	else 
		nr_conta_novo_w := (nr_conta_atual_w + qt_conta_w);
	end if;
 
	update	conta_convenio_atual 
	set	nr_conta_atual 	= nr_conta_novo_w + 1, 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where 	cd_convenio 	= cd_convenio_p 
	and	nr_conta_atual 	< nr_conta_novo_w 
	and	trunc(dt_competencia,'month') = trunc(dt_mesano_referencia_w,'month');
 
	update	protocolo_conv_nota_conta a 
	set 	a.nr_interno_conta  = NULL 
	where	a.nr_seq_protocolo = nr_seq_protocolo_p 
	and	not exists (	SELECT	1 
				from	conta_paciente x 
				where	x.nr_interno_conta = a.nr_interno_conta 
				and	x.nr_seq_protocolo = a.nr_seq_protocolo);
 
	commit;
 
	begin 
	select	coalesce(max(nr_nota_conta),0) 
	into STRICT	nr_nota_conta_w 
	from	protocolo_conv_nota_conta 
	where	nr_seq_protocolo = nr_seq_protocolo_p;
	exception 
	when others then 
		nr_nota_conta_w := 0;
	end;
 
	open c01;
	loop 
	fetch c01 bulk collect into s_array limit 100000;
		vetor_c01_w(i) := s_array;
		i := i + 1;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	end loop;
	close c01;
 
	for i in 1..vetor_c01_w.count loop 
		begin 
		s_array := vetor_c01_w(i);
		for z in 1..s_array.count loop 
			begin 
 
			nr_interno_conta_w := s_array[z].nr_interno_conta;
 
			begin 
			select	coalesce(nr_nota_conta,0) 
			into STRICT	nr_nota_w 
			from	protocolo_conv_nota_conta 
			where	nr_seq_protocolo = nr_seq_protocolo_p 
			and	nr_interno_conta = nr_interno_conta_w  LIMIT 1;
			exception 
			when others then 
				nr_nota_w := 0;
			end;
 
			if (nr_nota_w = 0) then 
				begin 
 
				begin 
				select	coalesce(min(nr_nota_conta),0) 
				into STRICT	nr_nota_w 
				from	protocolo_conv_nota_conta 
				where	nr_seq_protocolo = nr_seq_protocolo_p 
				and	coalesce(nr_interno_conta::text, '') = '';
				exception 
				when others then 
					nr_nota_w := 0;
				end;
 
				if (nr_nota_w > 0) then 
					begin 
 
					update 	protocolo_conv_nota_conta 
					set 	nr_interno_conta = nr_interno_conta_w, 
						nm_usuario	= nm_usuario_p, 
						dt_atualizacao	= clock_timestamp() 
					where 	nr_nota_conta 	= nr_nota_w 
					and	nr_seq_protocolo = nr_seq_protocolo_p;
 
					end;
				else 
					begin 
 
					if (nr_nota_w = 0) then 
						nr_nota_w := nr_nota_conta_w;
					else 
						nr_nota_w := nr_nota_inicial_w;
					end if;
 
					nr_nota_w := nr_nota_w + 1;
 
					if (nr_nota_w > nr_final_conta_w) then 
						nr_nota_w := nr_conta_inicial_w;
					end if;
 
					nr_nota_inicial_w := nr_nota_w;
 
					insert into protocolo_conv_nota_conta( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo, 
						nr_interno_conta, 
						nr_nota_conta) 
					values (	nextval('protocolo_conv_nota_conta_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_p, 
						nr_interno_conta_w, 
						nr_nota_w);
 
					end;
				end if;
 
				end;
			end if;
 
			update 	conta_paciente 
			set 	nr_conta_convenio = nr_nota_w, 
				nm_usuario	= nm_usuario_p, 
				dt_atualizacao	= clock_timestamp() 
			where 	nr_interno_conta = nr_interno_conta_w;
 
			end;
		end loop;
		end;
	end loop;
 
	update	protocolo_convenio 
	set 	nr_seq_doc_convenio = nr_conta_atual_w + 1, 
		dt_atualizacao	= clock_timestamp(), 
		nm_usuario 	= nm_usuario_p 
	where 	nr_seq_protocolo = nr_seq_protocolo_p;
 
	end;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nota_conta_convenio ( nr_seq_protocolo_p protocolo_convenio.nr_seq_protocolo%type, cd_convenio_p convenio.cd_convenio%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

