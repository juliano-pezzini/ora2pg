-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_hist_prog ( nr_seq_solicit_clien_p bigint, ie_solicit_cliente_p text, ie_tipo_atividade_p bigint, dt_programacao_p timestamp, ds_retorno_p INOUT text, nm_usuario_p text) AS $body$
DECLARE


ie_programacao_w		varchar(1);
ds_retorno_w			varchar(255)	:= '';
ie_programa_existente_w		varchar(1);
qt_visitas_programas_w		bigint;
nr_seq_canal_venda_w		bigint;


BEGIN

ie_programa_existente_w	:= coalesce(obter_valor_param_usuario(1237, 26, Obter_Perfil_Ativo, nm_usuario_p, 0), 'S');
if (coalesce(dt_programacao_p::text, '') = '') then
	select	ie_programacao
	into STRICT	ie_programacao_w
	from	pls_tipo_atividade
	where	nr_sequencia	= ie_tipo_atividade_p;

	if (ie_programacao_w	= 'S') then
		ds_retorno_w	:= 'O tipo de histórico informado é exclusivo para a programação de eventos. Verifique!';
	end if;
elsif (dt_programacao_p IS NOT NULL AND dt_programacao_p::text <> '') then
	select	ie_programacao
	into STRICT	ie_programacao_w
	from	pls_tipo_atividade
	where	nr_sequencia	= ie_tipo_atividade_p;

	if (ie_programacao_w	= 'N') then
		ds_retorno_w	:= 'O tipo de histórico informado não é de programação. Verifique!';
	end if;
end if;

if (ie_programa_existente_w	= 'N') and (ie_programacao_w		= 'S') and (coalesce(ds_retorno_w::text, '') = '') then
	if (ie_solicit_cliente_p = 'C') then
		select	count(*)
		into STRICT	qt_visitas_programas_w
		from	pls_comercial_historico	b,
			pls_tipo_atividade	a
		where	b.ie_tipo_atividade	= a.nr_sequencia
		and	b.nr_seq_cliente	= nr_seq_solicit_clien_p
		and	a.ie_programacao	= 'S'
		and	a.ie_situacao		= 'A'
		and	coalesce(b.dt_realizacao::text, '') = ''
		and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '');

		if (qt_visitas_programas_w	> 0) then
			ds_retorno_w	:= 'O cliente já possui uma visita programada não realizada. Verifique!';
		end if;
	elsif (ie_solicit_cliente_p = 'S') then
		select	count(*)
		into STRICT	qt_visitas_programas_w
		from	pls_solicitacao_historico	b,
			pls_tipo_atividade		a
		where	b.ie_tipo_atividade	= a.nr_sequencia
		and	b.nr_seq_solicitacao	= nr_seq_solicit_clien_p
		and	a.ie_programacao	= 'S'
		and	a.ie_situacao		= 'A'
		and	coalesce(b.dt_realizacao::text, '') = ''
		and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
		and	coalesce(b.dt_cancelamento_programacao::text, '') = '';

		if (qt_visitas_programas_w	> 0) then
			ds_retorno_w	:= 'O solicitante já possui uma visita programada não realizada. Verifique!';
		end if;
	end if;
end if;

if (ie_programacao_w	= 'S') and (coalesce(ds_retorno_w::text, '') = '') then
	/*aaschlote 09/03/2011 - OS - 294467*/

	if (ie_solicit_cliente_p = 'C') then
		select	max(nr_seq_vendedor_canal)
		into STRICT	nr_seq_canal_venda_w
		from	pls_solicitacao_vendedor
		where	nr_seq_cliente	= nr_seq_solicit_clien_p
		and	coalesce(dt_fim_vigencia::text, '') = '';
	elsif (ie_solicit_cliente_p = 'S') then
		select	max(nr_seq_vendedor_canal)
		into STRICT	nr_seq_canal_venda_w
		from	pls_solicitacao_vendedor
		where	nr_seq_solicitacao	= nr_seq_solicit_clien_p
		and	coalesce(dt_fim_vigencia::text, '') = '';
	end if;

	if (nr_seq_canal_venda_w IS NOT NULL AND nr_seq_canal_venda_w::text <> '') then
		ds_retorno_w := pls_consistir_program_canal(nr_seq_canal_venda_w, dt_programacao_p, ie_solicit_cliente_p, ds_retorno_w);
	end if;
end if;

ds_retorno_p	:= ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_hist_prog ( nr_seq_solicit_clien_p bigint, ie_solicit_cliente_p text, ie_tipo_atividade_p bigint, dt_programacao_p timestamp, ds_retorno_p INOUT text, nm_usuario_p text) FROM PUBLIC;

