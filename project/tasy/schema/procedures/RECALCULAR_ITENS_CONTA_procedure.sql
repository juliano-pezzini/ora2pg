-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE recalcular_itens_conta ( nr_interno_conta_P bigint, NM_USUARIO_P text) AS $body$
DECLARE

				
				  
/* Essa Rotina nao pode ter COMMIT */
			
			
DT_ATUALIZACAO_W    	timestamp		:= clock_timestamp();
ie_classificacao_w      smallint	:= 0;
cd_item_w	      	integer	:= 0;
cd_convenio_w	      	bigint	:= 0;
cd_categoria_w		varchar(10);
vl_item_w	      	double precision	:= 0;
vl_material_w	      	double precision	:= 0;
vl_final_w	      	double precision	:= 0;
qt_item_w	      	double precision	:= 0;
ie_erro_w	      	varchar(1) 	:= 'N';
nr_sequencia_w	      	bigint	:= 0;
ie_tipo_convenio_w      smallint	:= 0;
ie_status_acerto_w	smallint;
nr_atendimento_w	bigint	:= 0;
qt_reg_procedimento_w	bigint	:= 0;
qt_reg_material_w	bigint	:= 0;
ie_tipo_atendimento_w   smallint;
qt_pacote_w		bigint	:= 0;
ie_cancelamento_w	varchar(1);
dt_hora_inicial_w	timestamp;
dt_hora_final_w		timestamp;
nr_seq_recalculo_w	bigint;
nr_seq_protocolo_w	bigint;
cd_cep_w		varchar(15);
cd_municipio_ibge_w	varchar(6);
ds_endereco_w		varchar(100);
nr_aih_w		bigint;
nr_seq_aih_w		bigint;
qt_proc_unif_w		bigint	:= 0;
cd_estabelecimento_w	smallint;
ie_recalcular_fora_pacote_w	varchar(1);
nr_seq_proc_interno_w	bigint;
cd_procedimento_tuss_w	bigint;
cd_proc_tuss_exame_w	bigint;
nr_seq_exame_w		bigint;

ie_repasse_proc_conv_w	varchar(255);
ie_repasse_mat_conv_w	varchar(255);
ie_repasse_w		varchar(255);

ie_calculo_taxa_regra_w		varchar(01)	:= 'C';
nr_seq_regra_preco_w		bigint;
nr_seq_material_w	bigint;
cd_edicao_amb_w		integer;

C00 CURSOR FOR
      SELECT  a.nr_sequencia
        from  procedimento_paciente a
        where a.nr_interno_conta   = nr_interno_conta_p
	   and	a.tx_procedimento <> 100
	   and	a.ie_valor_informado = 'N'	
	   and a.ie_origem_proced = 2
	  order by a.nr_sequencia;

C01 CURSOR FOR
      SELECT  	a.nr_sequencia,
		coalesce(a.cd_convenio,x.cd_convenio_parametro),
		coalesce(a.cd_categoria, x.cd_categoria_parametro),		
              	b.ie_classificacao,
		a.nr_seq_proc_interno,
		a.nr_seq_exame,
		a.nr_seq_material,
		substr(obter_somente_numero(a.cd_edicao_amb),1,6)
        from  	procedimento_paciente a,
			procedimento b,
			conta_paciente x
        where 	a.cd_procedimento  = b.cd_procedimento
          and 	a.ie_origem_proced = b.ie_origem_proced
          and 	x.nr_interno_conta = a.nr_interno_conta
	  and	x.nr_interno_conta = nr_interno_conta_p
	  and 	coalesce(a.nr_seq_proc_pacote::text, '') = ''
	  order by a.nr_sequencia;

C02 CURSOR FOR
      SELECT	nr_sequencia	
        from  	material_atend_paciente
        where 	nr_interno_conta  = nr_interno_conta_p
	and 	coalesce(nr_seq_proc_pacote::text, '') = ''
	  order by  nr_sequencia;

C03 CURSOR FOR
	SELECT	cd_item,
		sum(qt_item),
		sum(vl_item)
	from	conta_paciente_v
	where	nr_interno_conta  = nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	ie_proc_mat = 2
	and	qt_item <> 0
	and (ie_tipo_convenio_w <> 3)
	group by cd_item;


BEGIN
dt_hora_inicial_w		:= clock_timestamp();

/* Recalculo de procedimentos e servicos */

begin
select	b.ie_tipo_convenio,
	a.ie_status_acerto,
	c.nr_atendimento,
	c.ie_tipo_atendimento,
	coalesce(a.ie_cancelamento,'X'),
	coalesce(a.cd_estabelecimento, c.cd_estabelecimento)
into STRICT	ie_tipo_convenio_w,
	ie_status_acerto_w,
	nr_atendimento_w,
	ie_tipo_atendimento_w,
	ie_cancelamento_w,
	cd_estabelecimento_w
from	conta_paciente a,
	atendimento_paciente c,
	convenio b
where	coalesce(a.cd_convenio_calculo,a.cd_convenio_parametro) 	= b.cd_convenio
and	a.nr_interno_conta	= nr_interno_conta_p
and	a.nr_atendimento	= c.nr_atendimento;
exception
	when others then
	ie_tipo_convenio_w := 0;
end;

ie_recalcular_fora_pacote_w	:= obter_valor_param_usuario(67, 290, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);

/* Verificar se conta possue pacote */

qt_pacote_w := 0;
begin
select	count(*)
into STRICT	qt_pacote_w
from	procedimento_paciente
where	nr_interno_conta 	= nr_interno_conta_p
and	nr_sequencia = nr_seq_proc_pacote;
exception
	when others then
	qt_pacote_w := 0;
end;

/* Verificar se a conta e do SUS Unificado */

select	count(*)
into STRICT	qt_proc_unif_w
from	procedimento_paciente
where	nr_interno_conta	= nr_interno_conta_p
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	ie_origem_proced	= 7;

CALL gerar_taxa_procedimento(nr_atendimento_w, nr_interno_conta_p, nm_usuario_p);

if	((ie_recalcular_fora_pacote_w = 'S') or (qt_pacote_w = 0)) then
	begin
	OPEN 	C01;
	LOOP
   	FETCH C01 into
		nr_sequencia_w,
		cd_convenio_w,	
		cd_categoria_w,
		ie_classificacao_w,
		nr_seq_proc_interno_w,
		nr_seq_exame_w,
		nr_seq_material_w,
		cd_edicao_amb_w;
    	if 	C01%FOUND then
	       	if (ie_classificacao_w = 1) then
			begin
			cd_procedimento_tuss_w:= 0;
			CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w,	nm_usuario_p);
			if (coalesce(nr_seq_proc_interno_w, 0) > 0) then
				begin
				select	max(cd_procedimento_tuss)
				into STRICT	cd_procedimento_tuss_w
				from	proc_interno
				where	nr_sequencia = nr_seq_proc_interno_w;
				end;
			end if;
			if (coalesce(nr_seq_exame_w, 0) > 0) then
				cd_procedimento_tuss_w := Define_proc_TUSS_exame(nr_seq_exame_w,cd_convenio_w,cd_categoria_w,nr_seq_material_w, cd_edicao_amb_w);
			end if;
			if (coalesce(cd_procedimento_tuss_w, 0) > 0) then
				begin
				update	procedimento_paciente
				set	cd_procedimento_tuss = cd_procedimento_tuss_w
				where	nr_sequencia = nr_sequencia_w;
				--and	nvl(cd_procedimento_tuss, 0) = 0;
				end;
			end if;
			end;
		else
		/*Criado IF abaixo para a OS 198413, pois o cliente lanca um procedimento AMB, em uma conta de um convenio do tipo SUS,
		neste caso a Atualiza_Preco_Procedimento zera o valor do procedimento*/
			if (ie_tipo_convenio_w = 3) then
				CALL Atualiza_Preco_Servico(nr_sequencia_w, nm_usuario_p);
			else
				CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w,	nm_usuario_p); --OS 194651 - Heckmann 10/02/2010 troquei o Atualiza_preco_Servico por este
			end if;
	       	end if;
    	else
		exit;
    	end if;
	END LOOP;
	CLOSE C01;
	end;
end if;

/* Recalculo de materiais e medicamentos */

if	((ie_recalcular_fora_pacote_w = 'S') or (qt_pacote_w = 0)) then
	begin
	OPEN 	C02;
	LOOP
	FETCH C02 into
		nr_sequencia_w;
    	if 	C02%FOUND then
		CALL Atualiza_Preco_Material(nr_sequencia_w,nm_usuario_p);
    	else
		exit;
    	end if;
	END LOOP;
	CLOSE C02;
	end;
end if;

/* Ajuste dos valores */

if (qt_pacote_w = 0) then
	begin
	OPEN 	C03;
	LOOP
   	FETCH C03 	into
             	cd_item_w,
             	qt_item_w,
             	vl_item_w;
    	if 	C03%FOUND then
		begin	
	 	ie_erro_w 		:= 'N';
		if (qt_item_w = 0)  and (vl_item_w <> 0) then
				begin
				select vl_material,
					 nr_sequencia
				into STRICT	 vl_material_w,
					 nr_sequencia_w
				from	 material_atend_paciente
				where	 nr_interno_conta 	= nr_interno_conta_p
				and	 cd_material	= cd_item_w
				and	 qt_material <> 0
				and	 dt_atendimento =
					 (SELECT max(a.dt_atendimento)
						from 	material_atend_paciente a
						where	a.nr_interno_conta = nr_interno_conta_p
						and	a.cd_material	= cd_item_w
						and	a.qt_material <> 0);
				exception
					when others then
					ie_erro_w 		:= 'S';
				end;
		end if;
		if (qt_item_w = 0)   and (vl_item_w <> 0)  and (ie_erro_w = 'N') then
			begin
			if (vl_item_w < 0) then
				begin
				if	vl_material_w < 0 then
					vl_final_w := vl_material_w - vl_item_w;
				else	
					vl_final_w := vl_material_w + vl_item_w;
				end if;
				end;
			else
				begin
				if	vl_material_w > 0 then
					vl_final_w := vl_material_w - vl_item_w;
				else	
					vl_final_w := vl_material_w + vl_item_w;
				end if;
				end;
			end if;
			update	material_atend_paciente
			set		vl_material = vl_final_w
			where		nr_sequencia		= nr_sequencia_w;
			exception
				when others then
				ie_erro_w 		:= 'S';
			if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
				commit;
			end if;
			end;
		end if;
		end;
    	else
		exit;
    	end if;
	END LOOP;
	CLOSE C03;
	end;
end if;


/* Deletar contas sem procedimentos e materiais */

begin
select 	count(*)
into STRICT	qt_reg_procedimento_w		
from	procedimento_paciente
where	nr_interno_conta		= nr_interno_conta_p;
exception
	when others then
	qt_reg_procedimento_w := 0;
end;

begin
select 	count(*)
into STRICT	qt_reg_material_w		
from	material_atend_paciente
where	nr_interno_conta		= nr_interno_conta_p;
exception
	when others then
	qt_reg_material_w := 0;
end;

if (qt_reg_material_w + qt_reg_procedimento_w) = 0 then
	begin
	delete from conta_paciente
	where	nr_interno_conta = nr_interno_conta_p
	and	((Obter_Tipo_Convenio(cd_convenio_parametro) <> 3) or (obter_se_contido_char(ds_observacao, wheb_mensagem_pck.get_texto(802583)) = 'N'));
	exception
		when others then
			qt_reg_procedimento_w	:= 0;
	end;
end if;

/* Gravar conta paciente recalculo */

dt_hora_final_w	:= clock_timestamp();
if (qt_reg_material_w + qt_reg_procedimento_w) > 0 then
	begin
	select	nextval('conta_paciente_recalculo_seq')
	into STRICT	nr_seq_recalculo_w
	;

	select	max(nr_seq_protocolo)
	into STRICT	nr_seq_protocolo_w
	from	conta_paciente
	where	nr_interno_conta	= nr_interno_conta_p;

	insert	into conta_paciente_recalculo(
 		nr_sequencia,
 		nr_interno_conta,       
 		dt_hora_inicial,       
 		dt_hora_final,          
 		dt_atualizacao,         
 		nm_usuario,             
 		nr_seq_protocolo)
	values (nr_seq_recalculo_w,
		nr_interno_conta_p,
		dt_hora_inicial_w,
		dt_hora_final_w,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_protocolo_w);
	end;
end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE recalcular_itens_conta ( nr_interno_conta_P bigint, NM_USUARIO_P text) FROM PUBLIC;

