-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consist_contas_comp ( dt_mes_competencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


dt_mes_competencia_w		timestamp;
dt_atualizacao_copartic_w	timestamp;
dt_lote_copartic_w		timestamp;
dt_atualizacao_pos_estab_w	timestamp;
dt_lote_pos_estab_w		timestamp;
qt_reg_resumo_w			bigint;
qt_reg_copartic_contab_w	bigint;
qt_reg_pos_estab_contab_w	bigint;
qt_reg_fatura_w			bigint;
qt_reg_pos_estab_taxa_w		bigint;
vl_total_lib_conta_w		pls_conta.vl_total%type;
vl_total_glosa_conta_w		pls_conta.vl_glosa%type;
vl_total_liberado_res_w		pls_conta.vl_total%type;
vl_total_glosa_res_w		pls_conta.vl_glosa%type;
vl_total_copartic_contab_w	pls_mensalidade_segurado.vl_coparticipacao%type;
vl_total_copartic_mens_w	pls_mensalidade_segurado.vl_coparticipacao%type;
vl_total_pos_estab_contab_w	pls_conta_pos_estabelecido.vl_beneficiario%type;
vl_admin_pos_estab_contab_w	pls_conta_pos_estabelecido.vl_administracao%type;
vl_total_faturado_w		pls_fatura_conta.vl_faturado%type;
vl_total_faturado_ndc_w		pls_fatura_conta.vl_faturado_ndc%type;
vl_total_taxa_contab_w		pls_conta_pos_taxa_contab.vl_taxa%type;
ie_recalculo_w			varchar(1);

/* Utilizado o  domínio: 7980 - PLS - Inconsistências da Conta Médica */

c_contas CURSOR FOR
	SELECT	c.nr_sequencia nr_seq_conta,
		c.vl_total,
		c.vl_glosa,
		c.vl_cobrado,
		p.ie_tipo_protocolo,
		c.ie_status,
		p.ie_forma_pagamento
	from	pls_protocolo_conta p,
		pls_conta c
	where	p.nr_sequencia = c.nr_seq_protocolo
	and	p.ie_situacao not in ('I','A','RE')
	and	trunc(p.dt_mes_competencia,'month')	= dt_mes_competencia_w;

c_contas_w c_contas%rowtype;

c_itens CURSOR FOR
	SELECT	'P' ie_cursor,
		p.nr_sequencia nr_seq_conta_proc,
		null nr_seq_conta_mat,
		p.vl_provisao,
		p.vl_glosa,
		p.vl_liberado
	from	pls_conta_proc p
	where	p.nr_seq_conta 		= c_contas_w.nr_seq_conta
	
union all

	SELECT	'M' ie_cursor,
		null nr_seq_conta_proc,
		m.nr_sequencia nr_seq_conta_mat,
		m.vl_provisao,
		m.vl_glosa,
		m.vl_liberado
	from	pls_conta_mat m
	where	m.nr_seq_conta 		= c_contas_w.nr_seq_conta;

c_itens_w c_itens%rowtype;

c_resumo CURSOR FOR
	SELECT	r.nr_sequencia,
		r.nr_seq_conta_proc,
		r.nr_seq_conta_mat
	from	pls_conta_medica_resumo r
	where	r.nr_seq_conta = c_contas_w.nr_seq_conta
	and	exists (SELECT	p.nr_seq_conta
			from	pls_conta_proc p
			where	p.nr_sequencia	= r.nr_seq_conta_proc
			and	p.nr_seq_conta	<> r.nr_seq_conta
			
union all

			select	m.nr_seq_conta
			from	pls_conta_mat m
			where	m.nr_sequencia	= r.nr_seq_conta_mat
			and	m.nr_seq_conta	<> r.nr_seq_conta);

c_resumo_w c_resumo%rowtype;

c_recalculo CURSOR FOR
	SELECT	i.nr_seq_conta_resumo,
		i.nr_seq_procedimento,
		i.nr_seq_material
	from	pls_item_recalculo 	i,
		pls_conta_recalculo	c
	where	c.nr_sequencia		= i.nr_seq_conta
	and 	c.nr_seq_conta 		= c_contas_w.nr_seq_conta
	and	i.nr_seq_procedimento	= c_itens_w.nr_seq_conta_proc
	and	exists (	SELECT	1
			from	pls_conta_medica_resumo r
			where	r.nr_seq_conta		= c_contas_w.nr_seq_conta
			and	r.nr_seq_conta_proc	= c_itens_w.nr_seq_conta_proc
			and	r.nr_sequencia		<> coalesce(i.nr_seq_conta_resumo,0))
	
union all

	select	i.nr_seq_conta_resumo,
		i.nr_seq_procedimento,
		i.nr_seq_material
	from	pls_item_recalculo 	i,
		pls_conta_recalculo	c
	where	c.nr_sequencia		= i.nr_seq_conta
	and 	c.nr_seq_conta 		= c_contas_w.nr_seq_conta
	and	i.nr_seq_material	= c_itens_w.nr_seq_conta_mat
	and	exists (	select	1
			from	pls_conta_medica_resumo r
			where	r.nr_seq_conta		= c_contas_w.nr_seq_conta
			and	r.nr_seq_conta_mat	= c_itens_w.nr_seq_conta_mat
			and	r.nr_sequencia		<> coalesce(i.nr_seq_conta_resumo,0));

c_recalculo_w c_recalculo%rowtype;

c_copartic CURSOR FOR
	SELECT	c.nr_sequencia,
		c.nr_seq_mensalidade_seg,
		c.ie_status_coparticipacao,
		c.vl_coparticipacao
	from	pls_conta_coparticipacao	c
	where	c.nr_seq_conta_proc	= c_itens_w.nr_seq_conta_proc
	
union

	SELECT	c.nr_sequencia,
		c.nr_seq_mensalidade_seg,
		c.ie_status_coparticipacao,
		c.vl_coparticipacao
	from	pls_conta_coparticipacao	c
	where	c.nr_seq_conta_mat	= c_itens_w.nr_seq_conta_mat;

c_copartic_w c_copartic%rowtype;

c_copartic_contab CURSOR FOR
	SELECT  c.nr_sequencia,
		c.nr_seq_conta_resumo,
		c.dt_atualizacao_nrec,
		c.dt_atualizacao
	from    pls_conta_copartic_contab c
	where   c.nr_seq_conta_copartic = c_copartic_w.nr_sequencia;

c_copartic_contab_w c_copartic_contab%rowtype;

c_pos_estab CURSOR FOR
	SELECT	e.nr_sequencia,
		e.nr_seq_mensalidade_seg,
		e.ie_status_faturamento,
		e.vl_beneficiario,
		e.nr_seq_lote_fat
	from	pls_conta_pos_estabelecido e
	where	e.nr_seq_conta_proc	= c_itens_w.nr_seq_conta_proc
	and	coalesce(e.ie_situacao,'A')	= 'A'
	
union

	SELECT	e.nr_sequencia,
		e.nr_seq_mensalidade_seg,
		e.ie_status_faturamento,
		e.vl_beneficiario,
		e.nr_seq_lote_fat
	from	pls_conta_pos_estabelecido e
	where	e.nr_seq_conta_mat	= c_itens_w.nr_seq_conta_mat
	and	coalesce(e.ie_situacao,'A')	= 'A';

c_pos_estab_w c_pos_estab%rowtype;

c_pos_estab_contab CURSOR FOR
	SELECT	e.nr_sequencia,
		e.nr_seq_conta_resumo,
		e.vl_provisao,
		e.nr_seq_lote_fat,
		e.dt_atualizacao_nrec,
		e.dt_atualizacao,
		e.nr_lote_contabil
	from	pls_conta_pos_estab_contab e
	where	e.nr_seq_conta_pos	= c_pos_estab_w.nr_sequencia;

c_pos_estab_contab_w c_pos_estab_contab%rowtype;

c_pos_estab_taxa CURSOR FOR
	SELECT	t.nr_sequencia,
		t.vl_taxa_manutencao
	from	pls_conta_pos_estab_taxa t
	where	t.nr_seq_conta_pos_estab = c_pos_estab_w.nr_sequencia;

c_pos_estab_taxa_w c_pos_estab_taxa%rowtype;

c_pos_taxa_contab CURSOR FOR
	SELECT  nr_seq_conta_resumo
	from    pls_conta_pos_taxa_contab c
	where   c.nr_seq_pos_estab_taxa = c_pos_estab_taxa_w.nr_sequencia;

c_pos_taxa_contab_w c_pos_taxa_contab%rowtype;


BEGIN

dt_mes_competencia_w	:= trunc(dt_mes_competencia_p,'month');

select	coalesce(max('S'),'N')
into STRICT	ie_recalculo_w
from	pls_lote_recalculo l,
	pls_regra_lote_recalculo r
where	r.nr_sequencia	= l.nr_seq_regra
and	r.ie_tipo_regra	= 1
and	trunc(l.dt_mes_competencia,'month')	= dt_mes_competencia_w;

delete	from pls_consist_conta
where	trunc(dt_mes_competencia,'month')	= dt_mes_competencia_w;

select  max(a.dt_fim_atualizacao)
into STRICT	dt_atualizacao_copartic_w
from    pls_atualizacao_contabil a
where   a.cd_tipo_lote_contabil = 42
and     trunc(a.dt_mes_competencia,'month')	= dt_mes_competencia_w;

select	max(a.dt_geracao_lote)
into STRICT	dt_lote_copartic_w
from	lote_contabil a
where	a.cd_tipo_lote_contabil = 42
and	trunc(a.dt_referencia,'month')		= dt_mes_competencia_w;

select  max(a.dt_fim_atualizacao)
into STRICT	dt_atualizacao_pos_estab_w
from    pls_atualizacao_contabil a
where   a.cd_tipo_lote_contabil = 44
and     trunc(a.dt_mes_competencia,'month')	= dt_mes_competencia_w;

commit;

open c_contas;
loop
fetch c_contas into
	c_contas_w;
EXIT WHEN NOT FOUND; /* apply on c_contas */
	begin
	-- 1. Contas médicas
	if (coalesce(c_contas_w.ie_tipo_protocolo,'X') <> 'R') then
		-- 1.1 Soma do valor liberado e valor da glosa é diferente do valor apresentado
		if (c_contas_w.vl_total + c_contas_w.vl_glosa <> c_contas_w.vl_cobrado) then
			CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
							1,
							c_contas_w.ie_tipo_protocolo,
							c_contas_w.nr_seq_conta,
							null,
							null,
							null,
							null,
							null,
							null,
							null,
							nm_usuario_p,
							cd_estabelecimento_p);
		end if;

		-- 1.3 Valor liberado está inferior ao valor apresentado e não possui registro de valor de glosa
		if (c_contas_w.vl_total < c_contas_w.vl_cobrado) and (coalesce(c_contas_w.vl_glosa,0) = 0) then
			CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
							3,
							c_contas_w.ie_tipo_protocolo,
							c_contas_w.nr_seq_conta,
							null,
							null,
							null,
							null,
							null,
							null,
							null,
							nm_usuario_p,
							cd_estabelecimento_p);
		end if;
	end if;

	if (coalesce(c_contas_w.ie_tipo_protocolo,'X') = 'C') then

		select	count(*)
		into STRICT	qt_reg_resumo_w
		from	pls_conta_medica_resumo r
		where	r.nr_seq_conta = c_contas_w.nr_seq_conta
		and	exists (SELECT	p.nr_seq_conta
				from	pls_conta_proc p
				where	p.nr_sequencia	= r.nr_seq_conta_proc
				and	p.nr_seq_conta	<> r.nr_seq_conta
				
union all

				SELECT	m.nr_seq_conta
				from	pls_conta_mat m
				where	m.nr_sequencia	= r.nr_seq_conta_mat
				and	m.nr_seq_conta	<> r.nr_seq_conta);

		-- 1.9 Número da conta médica no resumo do pagamento diferente da conta médica no procedimento
		if (qt_reg_resumo_w > 0) then
			open c_resumo;
			loop
			fetch c_resumo into
				c_resumo_w;
			EXIT WHEN NOT FOUND; /* apply on c_resumo */
				begin
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								9,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_resumo_w.nr_seq_conta_proc,
								c_resumo_w.nr_seq_conta_mat,
								c_resumo_w.nr_sequencia,
								null,
								null,
								null,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
				end;
			end loop;
			close c_resumo;
		end if;
	end if;

	vl_total_lib_conta_w	:= 0;
	vl_total_glosa_conta_w	:= 0;

	open c_itens;
	loop
	fetch c_itens into
		c_itens_w;
	EXIT WHEN NOT FOUND; /* apply on c_itens */
		begin

		if (coalesce(c_contas_w.ie_tipo_protocolo,'X') <> 'R') then
			-- 1.2 Valor de provisão não está informado
			if (coalesce(c_itens_w.vl_provisao,0) = 0) then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								2,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								null,
								null,
								null,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			-- 1.4 Não tem valor de provisão (sem valor apresentado, sem valor calculado), mas tem valor de glosa
			if (coalesce(c_itens_w.vl_provisao,0) = 0) and (coalesce(c_itens_w.vl_glosa,0) <> 0) then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								4,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								null,
								null,
								null,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;
		end if;

		select	sum(x.vl_liberado) vl_total_liberado,
			sum(x.vl_glosa) vl_total_glosa
		into STRICT	vl_total_liberado_res_w,
			vl_total_glosa_res_w
		from	(SELECT	r.vl_liberado,
				r.vl_glosa
			from	pls_conta_medica_resumo r
			where	r.nr_seq_conta 		= c_contas_w.nr_seq_conta
			and	r.nr_seq_conta_proc 	= c_itens_w.nr_seq_conta_proc
			and	c_contas_w.ie_tipo_protocolo	= 'C'
			and	((r.ie_situacao = 'A') or (coalesce(r.ie_situacao::text, '') = ''))
			
union all

			SELECT	r.vl_liberado,
				r.vl_glosa
			from	pls_conta_medica_resumo r
			where	r.nr_seq_conta 		= c_contas_w.nr_seq_conta
			and	r.nr_seq_conta_mat 	= c_itens_w.nr_seq_conta_mat
			and	c_contas_w.ie_tipo_protocolo	= 'C'
			and	((r.ie_situacao = 'A') or (coalesce(r.ie_situacao::text, '') = ''))) x;

		vl_total_lib_conta_w	:= vl_total_lib_conta_w + coalesce(vl_total_liberado_res_w,0);
		vl_total_glosa_conta_w	:= vl_total_glosa_conta_w + coalesce(vl_total_glosa_res_w,0);

		-- 1.5 Soma dos valores liberados por prestador pagamento está divergente do valor liberado para o procedimento/material
		if (coalesce(vl_total_liberado_res_w,0) <> coalesce(c_itens_w.vl_liberado,0)) then
			CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
							5,
							c_contas_w.ie_tipo_protocolo,
							c_contas_w.nr_seq_conta,
							c_itens_w.nr_seq_conta_proc,
							c_itens_w.nr_seq_conta_mat,
							null,
							null,
							null,
							null,
							null,
							nm_usuario_p,
							cd_estabelecimento_p);
		end if;

		-- 1.6 Soma dos valores de glosa por prestador pagamento está divergente do valor de glosa para o procedimento/material
		if (coalesce(vl_total_glosa_res_w,0) <> coalesce(c_itens_w.vl_glosa,0)) then
			CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
							6,
							c_contas_w.ie_tipo_protocolo,
							c_contas_w.nr_seq_conta,
							c_itens_w.nr_seq_conta_proc,
							c_itens_w.nr_seq_conta_mat,
							null,
							null,
							null,
							null,
							null,
							nm_usuario_p,
							cd_estabelecimento_p);
		end if;

		-- 10 Sequência da conta médica resumo do recálculo diferente da sequência da conta médica resumo do respectivo item
		if (ie_recalculo_w = 'S') then
			open c_recalculo;
			loop
			fetch c_recalculo into
				c_recalculo_w;
			EXIT WHEN NOT FOUND; /* apply on c_recalculo */
				begin
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								10,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_recalculo_w.nr_seq_procedimento,
								c_recalculo_w.nr_seq_material,
								c_recalculo_w.nr_seq_conta_resumo,
								null,
								null,
								null,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
				end;
			end loop;
			close c_recalculo;
		end if;

		open c_copartic;
		loop
		fetch c_copartic into
			c_copartic_w;
		EXIT WHEN NOT FOUND; /* apply on c_copartic */
			begin

			-- 201 Existe estorno de coparticipação sem registro nas informações contábeis
			if (coalesce(c_copartic_w.vl_coparticipacao,0) < 0) then
				select  count(*)
				into STRICT	qt_reg_copartic_contab_w
				from    pls_conta_copartic_contab c
				where   c.nr_seq_conta_copartic = c_copartic_w.nr_sequencia;

				if (qt_reg_copartic_contab_w = 0) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									201,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									null,
									null,
									null,
									c_copartic_w.nr_sequencia,
									null,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;
			end if;

			-- 202 Existe coparticipação sem Status informado
			if (coalesce(c_copartic_w.ie_status_coparticipacao,'X') = 'X') then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								202,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								null,
								null,
								c_copartic_w.nr_sequencia,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			-- 203 Conta médica está com status "Fechada" porém a coparticipação está com status "Pendente fechamento conta"
			if (coalesce(c_contas_w.ie_status,'X') = 'F') and (coalesce(c_copartic_w.ie_status_coparticipacao,'X') = 'P') then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								203,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								null,
								null,
								c_copartic_w.nr_sequencia,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			--  204 A coparticipação está sem os dados contábeis (não gerou o registro na pasta contábil)
			if (coalesce(c_copartic_w.vl_coparticipacao,0) >= 0) then
				select  count(*)
				into STRICT	qt_reg_copartic_contab_w
				from    pls_conta_copartic_contab c
				where   c.nr_seq_conta_copartic = c_copartic_w.nr_sequencia;

				if (qt_reg_copartic_contab_w = 0) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									204,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									null,
									null,
									null,
									c_copartic_w.nr_sequencia,
									null,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;
			end if;

			-- 205 A conta médica está cancelada mas a coparticipação foi cobrada na mensalidade
			if (coalesce(c_contas_w.ie_status,'X') = 'C') and (coalesce(c_copartic_w.nr_seq_mensalidade_seg,0) <> 0) then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								205,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								null,
								null,
								c_copartic_w.nr_sequencia,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			if (coalesce(c_copartic_w.nr_seq_mensalidade_seg,0) <> 0) then
				select  sum(c.vl_coparticipacao)
				into STRICT	vl_total_copartic_contab_w
				from    pls_conta_copartic_contab c
				where   c.nr_seq_conta_copartic = c_copartic_w.nr_sequencia;

				-- 200 Valor da coparticipação liberado para a mensalidade está diferente do valor de coparticipação contábil
				if (coalesce(vl_total_copartic_contab_w,0) <> coalesce(c_copartic_w.vl_coparticipacao,0)) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									200,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									null,
									null,
									null,
									c_copartic_w.nr_sequencia,
									null,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;

				select	sum(i.vl_item)
				into STRICT	vl_total_copartic_mens_w
				from	pls_mensalidade_seg_item i,
					pls_mensalidade_segurado s,
					pls_mensalidade		c
				where	s.nr_sequencia	= i.nr_seq_mensalidade_seg
				and	c.nr_sequencia	= s.nr_seq_mensalidade
				and	s.nr_sequencia	= c_copartic_w.nr_seq_mensalidade_seg
				and	i.nr_seq_conta  = c_contas_w.nr_seq_conta
				and	i.ie_tipo_item  = '3'
				and	coalesce(c.nr_seq_cancel_rec_mens::text, '') = '';

				-- 206 O valor gerado na mensalidade está diferente do valor contábil
				if (coalesce(vl_total_copartic_contab_w,0) <> coalesce(vl_total_copartic_mens_w,0)) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									206,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									null,
									null,
									null,
									c_copartic_w.nr_sequencia,
									null,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;

			end if;

			-- 208  Coparticipação com status "Coparticipação em discussão" já vinculada em lote de mensalidade
			if (coalesce(c_copartic_w.ie_status_coparticipacao,'X') = 'D') and (coalesce(c_copartic_w.nr_seq_mensalidade_seg,0) <> 0) then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								208,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								null,
								null,
								c_copartic_w.nr_sequencia,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			open c_copartic_contab;
			loop
			fetch c_copartic_contab into
				c_copartic_contab_w;
			EXIT WHEN NOT FOUND; /* apply on c_copartic_contab */
				begin

				select	count(*)
				into STRICT	qt_reg_resumo_w
				from	pls_conta_medica_resumo r
				where	r.nr_seq_conta		= c_contas_w.nr_seq_conta
				and	r.nr_sequencia		= c_copartic_contab_w.nr_seq_conta_resumo
				and	((r.ie_situacao = 'A') or (coalesce(r.ie_situacao::text, '') = ''));

				-- 209 - Sequência do resumo da conta diferente do resumo apresentado na pasta Contábil da coparticipação (vínculo incorreto)
				if (qt_reg_resumo_w = 0) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									209,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									c_copartic_contab_w.nr_seq_conta_resumo,
									null,
									null,
									c_copartic_w.nr_sequencia,
									c_copartic_contab_w.nr_sequencia,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;

				-- 210 - Registro da coparticipação criado após a atualização dos movimentos contábeis
				if (c_copartic_contab_w.dt_atualizacao_nrec > dt_atualizacao_copartic_w) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									210,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									c_copartic_contab_w.nr_seq_conta_resumo,
									null,
									null,
									c_copartic_w.nr_sequencia,
									c_copartic_contab_w.nr_sequencia,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;

				-- 211 - Registro alterado após a atualização dos movimentos contábeis
				if (c_copartic_contab_w.dt_atualizacao > dt_atualizacao_copartic_w) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									211,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									c_copartic_contab_w.nr_seq_conta_resumo,
									null,
									null,
									c_copartic_w.nr_sequencia,
									c_copartic_contab_w.nr_sequencia,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;

				-- 212 - Registro alterado após a geração do lote contábil
				if (c_copartic_contab_w.dt_atualizacao > dt_lote_copartic_w) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									212,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									c_copartic_contab_w.nr_seq_conta_resumo,
									null,
									null,
									c_copartic_w.nr_sequencia,
									c_copartic_contab_w.nr_sequencia,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;

				end;
			end loop;
			close c_copartic_contab;

			end;
		end loop;
		close c_copartic;

		open c_pos_estab;
		loop
		fetch c_pos_estab into
			c_pos_estab_w;
		EXIT WHEN NOT FOUND; /* apply on c_pos_estab */
			begin

			select  sum(e.vl_custo_operacional),
				sum(e.vl_administracao)
			into STRICT	vl_total_pos_estab_contab_w,
				vl_admin_pos_estab_contab_w
			from    pls_conta_pos_estab_contab e
			where   e.nr_seq_conta_pos = c_pos_estab_w.nr_sequencia;

			if (coalesce(c_pos_estab_w.nr_seq_lote_fat,0) <> 0) then
				-- 300 - Valor de pós-estabelecido liberado para faturamento diferente do valor de pós-estabelecido contábil
				if (coalesce(vl_total_pos_estab_contab_w,0) <> coalesce(c_pos_estab_w.vl_beneficiario,0)) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									300,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									null,
									c_pos_estab_w.nr_sequencia,
									null,
									null,
									null,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;
			end if;

			select  count(*)
			into STRICT	qt_reg_pos_estab_contab_w
			from    pls_conta_pos_estab_contab e
			where   e.nr_seq_conta_pos = c_pos_estab_w.nr_sequencia;

			-- 302 - Existe estorno de pós-estabelecido sem registro nas informações contábeis
			if (coalesce(c_pos_estab_w.vl_beneficiario,0) < 0) and (qt_reg_pos_estab_contab_w = 0) then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								302,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								c_pos_estab_w.nr_sequencia,
								null,
								null,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			-- 303 - Existe pós-estabelecido sem status informado
			if (coalesce(c_pos_estab_w.ie_status_faturamento,'X') = 'X') then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								303,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								c_pos_estab_w.nr_sequencia,
								null,
								null,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			-- 304 - Conta médica com status "Fechada" porém com pós-estabelecido com status "Usuário aguardando ação"
			if (coalesce(c_contas_w.ie_status,'X') = 'F') and (coalesce(c_pos_estab_w.ie_status_faturamento,'X') = 'U') then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								304,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								c_pos_estab_w.nr_sequencia,
								null,
								null,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			-- 307 - O pós-estabelecido está sem os dados contábeis (não gerou o registro na pasta contábil)
			if (coalesce(c_pos_estab_w.vl_beneficiario,0) >= 0) and (qt_reg_pos_estab_contab_w = 0) then
				CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
								307,
								c_contas_w.ie_tipo_protocolo,
								c_contas_w.nr_seq_conta,
								c_itens_w.nr_seq_conta_proc,
								c_itens_w.nr_seq_conta_mat,
								null,
								c_pos_estab_w.nr_sequencia,
								null,
								null,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
			end if;

			-- 308 - O valor gerado no lote de faturamento (pós-estabelecido/faturado) está diferente dos valores apresentados na pasta "Contábil"
			if (coalesce(c_pos_estab_w.nr_seq_lote_fat,0) <> 0) then

				select	sum(x.vl_faturado),
					sum(x.vl_faturado_ndc),
					count(*) qt_registros
				into STRICT	vl_total_faturado_w,
					vl_total_faturado_ndc_w,
					qt_reg_fatura_w
				from (SELECT	coalesce(p.vl_faturado,0) vl_faturado,
						coalesce(p.vl_faturado_ndc,0) vl_faturado_ndc
					from	pls_fatura 		f,
						pls_fatura_proc 	p,
						pls_fatura_conta 	c,
						pls_fatura_evento 	d,
						pls_lote_faturamento 	l
					where	c.nr_sequencia 		= p.nr_seq_fatura_conta
					and	d.nr_sequencia 		= c.nr_seq_fatura_evento
					and	f.nr_sequencia 		= d.nr_seq_fatura
					and	l.nr_sequencia 		= f.nr_seq_lote
					and	p.nr_seq_conta_pos_estab = c_pos_estab_w.nr_sequencia
					and	coalesce(f.ie_cancelamento,'X') not in ('C','E')
					
union all

					SELECT	coalesce(m.vl_faturado,0) vl_faturado,
						coalesce(m.vl_faturado_ndc,0) vl_faturado_ndc
					from	pls_fatura 		f,
						pls_fatura_mat 		m,
						pls_fatura_conta 	c,
						pls_fatura_evento 	d,
						pls_lote_faturamento 	l
					where	c.nr_sequencia 		= m.nr_seq_fatura_conta
					and	d.nr_sequencia 		= c.nr_seq_fatura_evento
					and	f.nr_sequencia 		= d.nr_seq_fatura
					and	l.nr_sequencia 		= f.nr_seq_lote
					and 	m.nr_seq_conta_pos_estab = c_pos_estab_w.nr_sequencia
					and	coalesce(f.ie_cancelamento,'X') not in ('C','E')) x;

				if (qt_reg_fatura_w > 0) then
					if	(coalesce(vl_total_pos_estab_contab_w,0) <> (coalesce(vl_total_faturado_w,0) + coalesce(vl_total_faturado_ndc_w,0))) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										308,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										null,
										c_pos_estab_w.nr_sequencia,
										null,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;

					if (coalesce(vl_admin_pos_estab_contab_w,0) <> coalesce(vl_total_faturado_w,0)) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										309,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										null,
										c_pos_estab_w.nr_sequencia,
										null,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;

					if	((coalesce(vl_total_pos_estab_contab_w,0) - coalesce(vl_admin_pos_estab_contab_w,0)) <> coalesce(vl_total_faturado_ndc_w,0)) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										310,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										null,
										c_pos_estab_w.nr_sequencia,
										null,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;
				end if;
			end if;

			if (qt_reg_pos_estab_contab_w > 0) then
				open c_pos_estab_contab;
				loop
				fetch c_pos_estab_contab into
					c_pos_estab_contab_w;
				EXIT WHEN NOT FOUND; /* apply on c_pos_estab_contab */
					begin
					-- 301 - Valor de provisão não informado
					if (coalesce(c_pos_estab_contab_w.vl_provisao,0) = 0) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										301,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										c_pos_estab_contab_w.nr_seq_conta_resumo,
										c_pos_estab_w.nr_sequencia,
										c_pos_estab_contab_w.nr_sequencia,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;

					if (coalesce(c_pos_estab_contab_w.nr_seq_lote_fat,0) <> 0) then
						-- 305 - Pós-estabelecido com status "Cancelado" porém vinculado à lote de faturamento
						if (coalesce(c_pos_estab_w.ie_status_faturamento,'X') = 'C') then
							CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
											305,
											c_contas_w.ie_tipo_protocolo,
											c_contas_w.nr_seq_conta,
											c_itens_w.nr_seq_conta_proc,
											c_itens_w.nr_seq_conta_mat,
											c_pos_estab_contab_w.nr_seq_conta_resumo,
											c_pos_estab_w.nr_sequencia,
											c_pos_estab_contab_w.nr_sequencia,
											null,
											null,
											nm_usuario_p,
											cd_estabelecimento_p);
						end if;

						-- 306 - Pós-estabelecido com status "Não permitido faturamento" porém vinculado à lote de faturamento
						if (coalesce(c_pos_estab_w.ie_status_faturamento,'X') = 'N') then
							CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
											306,
											c_contas_w.ie_tipo_protocolo,
											c_contas_w.nr_seq_conta,
											c_itens_w.nr_seq_conta_proc,
											c_itens_w.nr_seq_conta_mat,
											c_pos_estab_contab_w.nr_seq_conta_resumo,
											c_pos_estab_w.nr_sequencia,
											c_pos_estab_contab_w.nr_sequencia,
											null,
											null,
											nm_usuario_p,
											cd_estabelecimento_p);
						end if;
					end if;

					select	count(*)
					into STRICT	qt_reg_resumo_w
					from	pls_conta_medica_resumo r
					where	r.nr_seq_conta		= c_contas_w.nr_seq_conta
					and	r.nr_sequencia		= c_pos_estab_contab_w.nr_seq_conta_resumo
					and	((r.ie_situacao = 'A') or (coalesce(r.ie_situacao::text, '') = ''));

					-- 311 - Sequência do resumo da conta diferente do resumo apresentado na pasta Contábil do pós-estabelecido (vínculo incorreto)
					if (qt_reg_resumo_w = 0) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										311,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										c_pos_estab_contab_w.nr_seq_conta_resumo,
										c_pos_estab_w.nr_sequencia,
										c_pos_estab_contab_w.nr_sequencia,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;

					-- 312 - Registro criado após a atualização dos movimentos contábeis
					if (c_pos_estab_contab_w.dt_atualizacao_nrec > dt_atualizacao_pos_estab_w) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										312,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										c_pos_estab_contab_w.nr_seq_conta_resumo,
										c_pos_estab_w.nr_sequencia,
										c_pos_estab_contab_w.nr_sequencia,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;

					-- 313 - Registro alterado após a atualização dos movimentos contábeis
					if (c_pos_estab_contab_w.dt_atualizacao > dt_atualizacao_pos_estab_w) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										313,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										c_pos_estab_contab_w.nr_seq_conta_resumo,
										c_pos_estab_w.nr_sequencia,
										c_pos_estab_contab_w.nr_sequencia,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;

					select	max(a.dt_geracao_lote)
					into STRICT	dt_lote_pos_estab_w
					from	lote_contabil a
					where	a.cd_tipo_lote_contabil = 44
					and	a.nr_lote_contabil	= c_pos_estab_contab_w.nr_lote_contabil;

					-- 314 - Registro alterado após a geração do lote contábil
					if (c_pos_estab_contab_w.dt_atualizacao > dt_lote_pos_estab_w) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										314,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										c_pos_estab_contab_w.nr_seq_conta_resumo,
										c_pos_estab_w.nr_sequencia,
										c_pos_estab_contab_w.nr_sequencia,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;

					end;
				end loop;
				close c_pos_estab_contab;
			end if;

			open c_pos_estab_taxa;
			loop
			fetch c_pos_estab_taxa into
				c_pos_estab_taxa_w;
			EXIT WHEN NOT FOUND; /* apply on c_pos_estab_taxa */
				begin
				select  count(*),
					sum(c.vl_taxa)
				into STRICT	qt_reg_pos_estab_taxa_w,
					vl_total_taxa_contab_w
				from    pls_conta_pos_taxa_contab c
				where   c.nr_seq_pos_estab_taxa = c_pos_estab_w.nr_sequencia;

				-- 315 - Taxa de administração sem informações contábeis
				if (qt_reg_pos_estab_taxa_w = 0) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									315,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									null,
									c_pos_estab_w.nr_sequencia,
									null,
									null,
									null,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;

				-- 316 - Valor contábil da taxa de administração diferente do valor da taxa
				if (coalesce(vl_total_taxa_contab_w,0) <> coalesce(c_pos_estab_taxa_w.vl_taxa_manutencao,0)) then
					CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
									316,
									c_contas_w.ie_tipo_protocolo,
									c_contas_w.nr_seq_conta,
									c_itens_w.nr_seq_conta_proc,
									c_itens_w.nr_seq_conta_mat,
									null,
									c_pos_estab_w.nr_sequencia,
									null,
									null,
									null,
									nm_usuario_p,
									cd_estabelecimento_p);
				end if;

				open c_pos_taxa_contab;
				loop
				fetch c_pos_taxa_contab into
					c_pos_taxa_contab_w;
				EXIT WHEN NOT FOUND; /* apply on c_pos_taxa_contab */
					begin
					select	count(*)
					into STRICT	qt_reg_resumo_w
					from	pls_conta_medica_resumo r
					where	r.nr_seq_conta		= c_contas_w.nr_seq_conta
					and	r.nr_sequencia		= c_pos_taxa_contab_w.nr_seq_conta_resumo
					and	((r.ie_situacao = 'A') or (coalesce(r.ie_situacao::text, '') = ''));

					-- 317 - Sequência do resumo da conta diferente do resumo apresentado na pasta Contábil da taxa de administração (vínculo incorreto)
					if (qt_reg_resumo_w = 0) then
						CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
										317,
										c_contas_w.ie_tipo_protocolo,
										c_contas_w.nr_seq_conta,
										c_itens_w.nr_seq_conta_proc,
										c_itens_w.nr_seq_conta_mat,
										c_pos_taxa_contab_w.nr_seq_conta_resumo,
										c_pos_estab_w.nr_sequencia,
										null,
										null,
										null,
										nm_usuario_p,
										cd_estabelecimento_p);
					end if;

					end;
				end loop;
				close c_pos_taxa_contab;

				end;
			end loop;
			close c_pos_estab_taxa;

			end;
		end loop;
		close c_pos_estab;

		end;
	end loop;
	close c_itens;

	-- 1.7 Soma dos valores liberados por prestador pagamento está divergente do valor total da conta
	if (coalesce(vl_total_lib_conta_w,0) <> coalesce(c_contas_w.vl_total,0)) then
		CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
						7,
						c_contas_w.ie_tipo_protocolo,
						c_contas_w.nr_seq_conta,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	-- 1.8 Soma dos valores de glosa por prestador pagamento está divergente do valor de glosas da conta
	if (coalesce(vl_total_glosa_conta_w,0) <> coalesce(c_contas_w.vl_glosa,0)) then
		CALL pls_gravar_inconsist_conta(	dt_mes_competencia_p,
						8,
						c_contas_w.ie_tipo_protocolo,
						c_contas_w.nr_seq_conta,
						null,
						null,
						null,
						null,
						null,
						null,
						null,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	end;
end loop;
close c_contas;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consist_contas_comp ( dt_mes_competencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

