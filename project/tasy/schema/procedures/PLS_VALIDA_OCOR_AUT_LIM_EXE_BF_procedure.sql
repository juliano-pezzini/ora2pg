-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_valida_ocor_aut_lim_exe_bf ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_segurado_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

				
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Procedure utilizada para validar a quantidade limite de execucao por beneficiario, esta rotina e 
	utilizada para geracao de ocorrencia na Autorizacao / Requisicao / Execucao
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_ocor_lim_benef_w		bigint;
nr_seq_prestador_w		bigint;
nr_seq_guia_proc_w		bigint;
nr_seq_req_proc_w		bigint;
nr_seq_exec_item_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_segurado_w		bigint;
ie_preco_w			varchar(255);
ie_regra_w			varchar(255);
ie_gerar_ocorrencia_w		varchar(255);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_gerou_ocor_cabecalho_w	varchar(255);
ie_tipo_ocorrencia_w		varchar(255);
nr_seq_requisicao_w		bigint;
nr_seq_oc_benef_w		bigint;
qt_solicitada_w			pls_guia_plano_proc.qt_solicitada%type;
ie_valida_execucao_w		varchar(1);

C01 CURSOR FOR
	SELECT	nr_seq_ocor_lim_benef,
		ie_valida_execucao
	from	pls_validacao_aut_lim_ben
	where	nr_seq_ocor_aut_combinada	= nr_seq_ocor_combinada_p
	and	ie_situacao			= 'A';
	
C02 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		qt_solicitada
	from	pls_guia_plano_proc
	where	nr_seq_guia		= nr_seq_guia_p;
	
C03 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		qt_solicitado
	from	pls_requisicao_proc
	where	nr_seq_requisicao	= nr_seq_requisicao_p;

C04 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		qt_item
	from	pls_execucao_req_item
	where	nr_seq_execucao		= nr_seq_execucao_p
	and	coalesce(nr_seq_material::text, '') = '';


BEGIN

if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
	begin
		select	nr_seq_prestador,
			nr_seq_segurado
		into STRICT	nr_seq_prestador_w,
			nr_seq_segurado_w
		from	pls_guia_plano
		where	nr_sequencia	= nr_seq_guia_p;
	exception
	when others then
		nr_seq_prestador_w	:= null;
	end;
elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
	begin
		select	nr_seq_prestador,
			nr_seq_segurado
		into STRICT	nr_seq_prestador_w,
			nr_seq_segurado_w
		from	pls_requisicao
		where	nr_sequencia	= nr_seq_requisicao_p;
	exception
	when others then
		nr_seq_prestador_w	:= null;
	end;
elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
	begin
		select	nr_seq_prestador,
			nr_seq_requisicao
		into STRICT	nr_seq_prestador_w,
			nr_seq_requisicao_w
		from	pls_execucao_requisicao
		where	nr_sequencia	= nr_seq_execucao_p;
	exception
	when others then
		nr_seq_prestador_w	:= null;
		nr_seq_requisicao_w	:= null;
	end;
	
	begin
		select	nr_seq_segurado
		into STRICT	nr_seq_segurado_w
		from	pls_requisicao
		where	nr_sequencia	= nr_seq_requisicao_w;
	exception
	when others then
		nr_seq_segurado_w	:= null;
	end;
end if;

begin
	select	nr_seq_plano
	into STRICT	nr_seq_plano_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
exception
when others then
	nr_seq_plano_w	:= null;
end;

begin
	select	ie_preco
	into STRICT	ie_preco_w
	from	pls_plano
	where	nr_sequencia	= nr_seq_plano_w;
exception
when others then
	ie_preco_w	:= null;
end;

open C01;
loop
fetch C01 into	
	nr_seq_ocor_lim_benef_w,
	ie_valida_execucao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
		open C02;
		loop
		fetch C02 into	
			nr_seq_guia_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_solicitada_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			ie_gerar_ocorrencia_w	:= 'S';

			if (ie_utiliza_filtro_p	= 'S') then
				/* Tratamento para filtros */

				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, nr_seq_guia_p, nr_seq_requisicao_p, nr_seq_execucao_p, nr_seq_guia_proc_w, null, null, null, null, cd_procedimento_w, ie_origem_proced_w, null, ie_gerou_ocor_cabecalho_w, null, null, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
								
				if (ie_regra_w	= 'S') then
					ie_gerar_ocorrencia_w	:= 'S';
				elsif (ie_regra_w	in ('E','N')) then
					ie_gerar_ocorrencia_w	:= 'N';
				end if;
			end if;
			
			if (ie_gerar_ocorrencia_w	= 'S') then
				ie_gerar_ocorrencia_w	:= pls_obter_se_limite_exec_benef(	nr_seq_ocor_lim_benef_w, nr_seq_guia_p, nr_seq_requisicao_p,
												nr_seq_execucao_p, nr_seq_segurado_w, cd_procedimento_w,
												ie_origem_proced_w, ie_preco_w, qt_solicitada_w,
												null, null, null,
												null, null);
												
				if (ie_gerar_ocorrencia_w	= 'S') then
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, null, nr_seq_guia_p, null, nr_seq_guia_proc_w, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 1, cd_estabelecimento_p, 'N', null, nr_seq_oc_benef_w, null, null, null, null);
							
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p,
									nr_seq_guia_p, nr_seq_requisicao_p, nr_seq_execucao_p,
									nr_seq_guia_proc_w, null, null,
									null, null, null,
									nm_usuario_p, cd_estabelecimento_p);
				end if;
			end if;
			end;
		end loop;
		close C02;
	elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
		open C03;
		loop
		fetch C03 into	
			nr_seq_req_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_solicitada_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			ie_gerar_ocorrencia_w	:= 'S';

			if (ie_utiliza_filtro_p	= 'S') then
				/* Tratamento para filtros */

				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, nr_seq_guia_p, nr_seq_requisicao_p, nr_seq_execucao_p, null, null, nr_seq_req_proc_w, null, null, cd_procedimento_w, ie_origem_proced_w, null, ie_gerou_ocor_cabecalho_w, null, null, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
								
				if (ie_regra_w	= 'S') then
					ie_gerar_ocorrencia_w	:= 'S';
				elsif (ie_regra_w	in ('E','N')) then
					ie_gerar_ocorrencia_w	:= 'N';
				end if;
			end if;
			
			if (ie_gerar_ocorrencia_w	= 'S') then
				ie_gerar_ocorrencia_w	:= pls_obter_se_limite_exec_benef(	nr_seq_ocor_lim_benef_w, nr_seq_guia_p, nr_seq_requisicao_p,
												nr_seq_execucao_p, nr_seq_segurado_w, cd_procedimento_w,
												ie_origem_proced_w, ie_preco_w, qt_solicitada_w,
												ie_valida_execucao_w, null, null,
												null, null);
												
				if (ie_gerar_ocorrencia_w	= 'S') then
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, nr_seq_requisicao_p, null, null, nr_seq_req_proc_w, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 5, cd_estabelecimento_p, 'N', null, nr_seq_oc_benef_w, null, null, null, null);
							
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p,
									nr_seq_guia_p, nr_seq_requisicao_p, nr_seq_execucao_p,
									null, null, nr_seq_req_proc_w,
									null, null, null,
									nm_usuario_p, cd_estabelecimento_p);
				end if;
			end if;
			end;
		end loop;
		close C03;
	elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
		open C04;
		loop
		fetch C04 into	
			nr_seq_exec_item_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_solicitada_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			ie_gerar_ocorrencia_w	:= 'S';

			if (ie_utiliza_filtro_p	= 'S') then
				/* Tratamento para filtros */

				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, nr_seq_guia_p, nr_seq_requisicao_p, nr_seq_execucao_p, null, null, null, null, nr_seq_exec_item_w, cd_procedimento_w, ie_origem_proced_w, null, ie_gerou_ocor_cabecalho_w, null, null, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
								
				if (ie_regra_w	= 'S') then
					ie_gerar_ocorrencia_w	:= 'S';
				elsif (ie_regra_w	in ('E','N')) then
					ie_gerar_ocorrencia_w	:= 'N';
				end if;
			end if;
			
			if (ie_gerar_ocorrencia_w	= 'S') then
				ie_gerar_ocorrencia_w	:= pls_obter_se_limite_exec_benef(	nr_seq_ocor_lim_benef_w, nr_seq_guia_p, nr_seq_requisicao_p,
												nr_seq_execucao_p, nr_seq_segurado_w, cd_procedimento_w,
												ie_origem_proced_w, ie_preco_w, qt_solicitada_w,
												null, null, null,
												null, null);
												
				if (ie_gerar_ocorrencia_w	= 'S') then
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, null, null, null, nr_seq_exec_item_w, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 10, cd_estabelecimento_p, 'N', nr_seq_execucao_p, nr_seq_oc_benef_w, null, null, null, null);
						
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p,
									nr_seq_guia_p, nr_seq_requisicao_p, nr_seq_execucao_p,
									null, null, null,
									null, nr_seq_exec_item_w, null,
									nm_usuario_p, cd_estabelecimento_p);
				end if;
			end if;
			end;
		end loop;
		close C04;
	end if;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_valida_ocor_aut_lim_exe_bf ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_segurado_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

