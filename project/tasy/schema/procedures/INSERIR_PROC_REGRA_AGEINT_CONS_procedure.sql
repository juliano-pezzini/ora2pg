-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE inserir_proc_regra_ageint_cons ( cd_especialidade_p bigint, nr_seq_ageint_item_p bigint, ie_classif_agenda_p text, cd_convenio_p bigint, cd_categoria_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


  nr_seq_proc_interno_w agenda_regra_proced.nr_seq_proc_interno%type;
  nr_sequencia_w        ageint_exame_adic_item.nr_sequencia%type;
  cd_procedimento_w     ageint_exame_adic_item.cd_procedimento%type;
  ie_origem_proced_w    ageint_exame_adic_item.ie_origem_proced%type;
  qt_proc_gerado_w      bigint;
  qt_procedimento_w     agenda_regra_proced.qt_proced%type;
  ie_gerar_ind_w        agenda_regra_proced.ie_gerar_individual%TYPE;
  counter_w             bigint;

  c01 CURSOR FOR
    SELECT nr_seq_proc_interno,
           qt_proced,
           coalesce(ie_gerar_individual, 'N')
      FROM agenda_regra_proced arp
     WHERE coalesce(cd_agenda::text, '') = ''
       AND coalesce(coalesce(cd_convenio, cd_convenio_p), '0')               = coalesce(cd_convenio_p, '0')
       AND coalesce(coalesce(ie_classif_agenda, ie_classif_agenda_p), 'X')   = coalesce(ie_classif_agenda_p, 'X')
       AND coalesce(coalesce(arp.cd_especialidade, cd_especialidade_p), 0) = coalesce(cd_especialidade_p, 0)
     ORDER BY cd_convenio;


BEGIN

  OPEN c01;
  LOOP
    FETCH c01
      INTO nr_seq_proc_interno_w,
           qt_procedimento_w,
           ie_gerar_ind_w;
    EXIT WHEN NOT FOUND; /* apply on c01 */

    IF (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') THEN
      /* verificar se procedimento já gerado */

      SELECT COUNT(*)
        INTO STRICT qt_proc_gerado_w
        FROM ageint_exame_adic_item aea
       WHERE aea.nr_seq_item = nr_seq_ageint_item_p
         AND nr_seq_proc_interno = nr_seq_proc_interno_w;

      IF (qt_proc_gerado_w = 0) THEN
        /* Código do procedimento e origem */

        SELECT * FROM obter_proc_tab_interno_conv(nr_seq_proc_interno_w, cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, NULL, NULL, cd_procedimento_w, ie_origem_proced_w, NULL, clock_timestamp(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL) INTO STRICT cd_procedimento_w, ie_origem_proced_w;

        IF (ie_gerar_ind_w = 'S') AND (qt_procedimento_w > 1) AND (qt_procedimento_w < 11) THEN

          counter_w := 0;
          WHILE(counter_w < qt_procedimento_w) LOOP

            /* Sequência da tabela ageint_exame_adic_item */

            SELECT nextval('ageint_exame_adic_item_seq') INTO STRICT nr_sequencia_w;

            INSERT INTO ageint_exame_adic_item(nr_sequencia,
               nr_seq_item,
               nr_seq_proc_interno,
               cd_procedimento,
               ie_origem_proced,

               dt_atualizacao,
               nm_usuario,
               dt_atualizacao_nrec,
               nm_usuario_nrec)

            VALUES (nr_sequencia_w,
               nr_seq_ageint_item_p,
               nr_seq_proc_interno_w,
               cd_procedimento_w,
               ie_origem_proced_w,
               clock_timestamp(),
               nm_usuario_p,
               clock_timestamp(),
               nm_usuario_p);

            counter_w := counter_w + 1;
          END LOOP;

        ELSE
            SELECT nextval('ageint_exame_adic_item_seq') INTO STRICT nr_sequencia_w;

            INSERT INTO ageint_exame_adic_item(nr_sequencia,
               nr_seq_item,
               nr_seq_proc_interno,
               cd_procedimento,
               ie_origem_proced,

               dt_atualizacao,
               nm_usuario,
               dt_atualizacao_nrec,
               nm_usuario_nrec)

            VALUES (nr_sequencia_w,
               nr_seq_ageint_item_p,
               nr_seq_proc_interno_w,
               cd_procedimento_w,
               ie_origem_proced_w,
               clock_timestamp(),
               nm_usuario_p,
               clock_timestamp(),
               nm_usuario_p);

        END IF;
      END IF;
    END IF;
  END LOOP;
  CLOSE c01;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE inserir_proc_regra_ageint_cons ( cd_especialidade_p bigint, nr_seq_ageint_item_p bigint, ie_classif_agenda_p text, cd_convenio_p bigint, cd_categoria_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

