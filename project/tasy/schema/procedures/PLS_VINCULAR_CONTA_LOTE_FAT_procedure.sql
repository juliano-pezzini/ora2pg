-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_vincular_conta_lote_fat ( nr_seq_lote_fat_p pls_lote_faturamento.nr_sequencia%type, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_refaturar_p text, ie_origem_vinculo_p text, nr_seq_lote_origem_p pls_lote_faturamento.nr_sequencia%type, nr_seq_conta_sus_p pls_processo_conta.nr_sequencia%type default null) AS $body$
DECLARE


/*	
	ie_origem_vinculo_p
	X	- Comportamento "Padrao", anterior a OS 1355948
	RF	- Origem do refaturamento
*/
	
nr_seq_conta_pos_w		pls_conta_pos_estabelecido.nr_sequencia%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
vl_administracao_w		pls_conta_pos_estabelecido.vl_administracao%type;
vl_beneficiario_w		pls_conta_pos_estabelecido.vl_beneficiario%type;
dt_geracao_lote_w		pls_lote_faturamento.dt_geracao%type;
dt_fechamento_w			pls_lote_faturamento.dt_fechamento%type;
nr_seq_congenere_w		pls_congenere.nr_sequencia%type;
dt_atend_ref_w			pls_conta.dt_atendimento_referencia%type;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
dt_alta_w			pls_conta.dt_alta%type;
cd_guia_ok_w			pls_conta.cd_guia_ok%type;
ie_impedimento_cobranca_w	w_pls_lote_fat_item.ie_impedimento_cobranca%type;
ie_tipo_conta_w			pls_conta.ie_tipo_conta%type;
qt_registro_w			integer;
nr_seq_evento_w			pls_evento.nr_sequencia%type;
dt_item_w			timestamp;
nr_seq_regra_fat_w		pls_lote_faturamento.nr_seq_regra_fat%type;
qt_regra_lib_fat_w		integer;
ie_exige_med_aud_w		pls_regra_lib_fat.ie_exige_med_aud%type;
ie_exige_enf_aud_w		pls_regra_lib_fat.ie_exige_enf_aud%type;
dt_atendimento_w		pls_conta.dt_atendimento%type;
nr_seq_pos_contab_w		pls_conta_pos_estab_contab.nr_sequencia%type;
ie_conta_fechada_w		pls_regra_faturamento.ie_conta_fechada%type;
nr_seq_pls_fatura_w		pls_fatura.nr_sequencia%type;
vl_informado_w			double precision;
ie_tipo_taxa_w			pls_conta_pos_estab_taxa.ie_tipo_taxa%type;
ie_taxa_contrato_pos_w		pls_parametros.ie_taxa_contrato_pos%type;
nr_seq_contrato_w		pls_segurado.nr_seq_contrato%type;
nr_seq_intercambio_w		pls_segurado.nr_seq_intercambio%type;
nr_seq_congenere_seg_w		pls_congenere.nr_sequencia%type;
nr_seq_plano_w			pls_plano.nr_sequencia%type;
nr_seq_plano_seg_w		pls_segurado.nr_seq_plano%type;
tx_administracao_w		pls_conta_pos_estabelecido.tx_administracao%type;
qt_dias_envio_taxa_w		pls_regra_intercambio.qt_dias_envio_taxa%type;
vl_tx_intercambio_cobr_w	double precision	:= 0;
qt_dia_proced_receb_w		integer := 0;
qt_taxa_w			integer := 0;
vl_lib_taxa_servico_w		pls_conta_pos_estabelecido.vl_lib_taxa_servico%type;
vl_lib_taxa_co_w		pls_conta_pos_estabelecido.vl_lib_taxa_co%type;
vl_lib_taxa_material_w		pls_conta_pos_estabelecido.vl_lib_taxa_material%type;
vl_pos_adm_contab_w		pls_conta_pos_estab_contab.vl_administracao%type;
nr_seq_w_pls_lote_fat_w		w_pls_lote_fat_item.nr_sequencia%type;
qt_pos_contab_w			integer := 0;
qt_pos_contab_null_w		integer := 0;
nr_seq_conta_resumo_w		pls_conta_pos_estab_contab.nr_seq_conta_resumo%type;
nr_seq_pos_estab_taxa_w		pls_conta_pos_estab_taxa.nr_sequencia%type;
nr_seq_pos_taxa_contab_w	pls_conta_pos_taxa_contab.nr_sequencia%type;
nr_seq_fatura_conta_w		pls_fatura_conta.nr_sequencia%type;
ds_erro_w			varchar(4000);
ie_origem_vinculo_w		varchar(2);
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type := 'N';
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
ie_origem_protocolo_w		pls_protocolo_conta.ie_origem_protocolo%type;
nr_seq_regra_event_w		pls_regra_fat_evento.nr_seq_regra%type;

ie_tipo_congenere_ops_w		pls_congenere.ie_tipo_congenere%type;
ie_tipo_congenere_w		pls_congenere.ie_tipo_congenere%type;
ie_tipo_congenere_prot_w	pls_congenere.ie_tipo_congenere%type;
ie_tipo_congenere_ref_w		pls_congenere.ie_tipo_congenere%type;
ie_evento_restritivo_w		pls_parametro_faturamento.ie_evento_restritivo%type;
dt_internacao_w			timestamp;
nr_seq_cabecalho_w		pls_conta_pos_cabecalho.nr_sequencia%type;

vl_item_w			pls_segurado_mensalidade.vl_item%type;
vl_procedimento_w		pls_processo_procedimento.vl_procedimento%type;
nr_seq_conta_sus_w		pls_processo_conta.nr_sequencia%type;

qt_conta_pendente_w		integer;
ie_contas_faturar_w		pls_parametro_faturamento.ie_contas_faturar%type;

c00 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_processo_conta		a,
		pls_segurado			b,
		pls_segurado_mensalidade	c
	where	b.nr_sequencia	= a.nr_seq_segurado
	and	a.nr_sequencia  = c.nr_seq_processo_conta
	and	a.nr_sequencia	= nr_seq_conta_sus_p
	and	coalesce(c.nr_seq_lote_fat::text, '') = ''
	and	coalesce(c.nr_seq_evento_fat::text, '') = ''
	and	pls_obter_se_benef_remido(b.nr_sequencia, a.dt_internacao) = 'S'
	and	c.ie_tipo_item	= '39';

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_conta_proc,
		a.nr_seq_conta_mat,
		b.nr_seq_segurado,
		b.nr_sequencia,
		(coalesce(x.vl_lib_taxa_co,0) + coalesce(x.vl_lib_taxa_material,0) + coalesce(x.vl_lib_taxa_servico,0)),
		coalesce(x.vl_custo_operacional,0),
		x.nr_sequencia,
		a.tx_administracao,
		x.vl_lib_taxa_co,
		x.vl_lib_taxa_material,
		x.vl_lib_taxa_servico,
		coalesce(x.vl_administracao,0),
		x.nr_seq_conta_resumo
	from	pls_conta			b,
		pls_conta_pos_estabelecido 	a,
		pls_conta_pos_estab_contab	x
	where	b.nr_sequencia	= a.nr_seq_conta
	and	a.nr_sequencia	= x.nr_seq_conta_pos
	and	b.nr_sequencia	= nr_seq_conta_p
	and	a.vl_beneficiario > 0
	and	a.ie_status_faturamento = 'L'
	and	coalesce(a.nr_seq_lote_fat::text, '') = ''
	and	coalesce(a.nr_seq_evento_fat::text, '') = ''
	and	coalesce(ie_refaturar_p,'N')		= 'N'
	and	coalesce(ie_origem_vinculo_w, 'X')	= 'X'
	and	a.ie_situacao	= 'A'
	
union all

	SELECT	a.nr_sequencia,
		a.nr_seq_conta_proc,
		a.nr_seq_conta_mat,
		b.nr_seq_segurado,
		b.nr_sequencia,
		(coalesce(x.vl_lib_taxa_co,0) + coalesce(x.vl_lib_taxa_material,0) + coalesce(x.vl_lib_taxa_servico,0)),
		coalesce(x.vl_custo_operacional,0),
		x.nr_sequencia,
		a.tx_administracao,
		x.vl_lib_taxa_co,
		x.vl_lib_taxa_material,
		x.vl_lib_taxa_servico,
		coalesce(x.vl_administracao,0),
		x.nr_seq_conta_resumo
	from	pls_conta			b,
		pls_conta_pos_estabelecido 	a,
		pls_conta_pos_estab_contab	x
	where	b.nr_sequencia	= a.nr_seq_conta
	and	a.nr_sequencia	= x.nr_seq_conta_pos
	and	b.nr_sequencia	= nr_seq_conta_p
	and	a.vl_beneficiario > 0
	and	a.ie_status_faturamento = 'L'
	and	coalesce(ie_refaturar_p,'N') = 'S'
	and	coalesce(ie_origem_vinculo_w, 'X')	= 'X'
	and	a.ie_situacao	= 'A'
	
union all

	select	a.nr_sequencia,
		a.nr_seq_conta_proc,
		a.nr_seq_conta_mat,
		b.nr_seq_segurado,
		b.nr_sequencia,
		(coalesce(x.vl_lib_taxa_co,0) + coalesce(x.vl_lib_taxa_material,0) + coalesce(x.vl_lib_taxa_servico,0)),
		coalesce(x.vl_custo_operacional,0),
		x.nr_sequencia,
		a.tx_administracao,
		x.vl_lib_taxa_co,
		x.vl_lib_taxa_material,
		x.vl_lib_taxa_servico,
		coalesce(x.vl_administracao,0),
		x.nr_seq_conta_resumo
	from	pls_conta			b,
		pls_conta_pos_estabelecido 	a,
		pls_conta_pos_estab_contab	x
	where	b.nr_sequencia	= a.nr_seq_conta
	and	a.nr_sequencia	= x.nr_seq_conta_pos
	and	b.nr_sequencia	= nr_seq_conta_p
	and	a.vl_beneficiario > 0
	and	a.ie_status_faturamento = 'L'
	and	coalesce(ie_refaturar_p,'N') = 'S'
	and	a.ie_situacao	= 'A'
	-- Origem o refaturamento, neste caso, deve limitar a busca ao lote fat de origem, para

	-- evitar buscar os itens que possam estar faturados em outro lote (pode acontecer quando o faturamento nao esta parametrizado para tratar atendimento fechado e conta fechada)
	and	coalesce(ie_origem_vinculo_w, 'X')	= 'RF'
	and	a.nr_seq_lote_fat = nr_seq_lote_origem_p;
	
c02 CURSOR FOR
	-- 1 Valor de manutencao = 4 Valor de manutencao || 2 Valor da taxa de administracao = 3 Taxa administrativa
	SELECT	b.vl_taxa,
		CASE WHEN a.ie_tipo_taxa='1' THEN '4' WHEN a.ie_tipo_taxa='2' THEN '3' END  ie_tipo_taxa,
		a.nr_sequencia,
		b.nr_sequencia
	from	pls_conta_pos_estab_taxa 	a,
		pls_conta_pos_taxa_contab	b
	where	a.nr_sequencia		= b.nr_seq_pos_estab_taxa
	and	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w
	and	b.nr_seq_conta_resumo	= nr_seq_conta_resumo_w
	and	b.nr_seq_conta		= nr_seq_conta_w
	
union all

	SELECT	b.vl_taxa,
		CASE WHEN a.ie_tipo_taxa='1' THEN '4' WHEN a.ie_tipo_taxa='2' THEN '3' END  ie_tipo_taxa,
		a.nr_sequencia,
		b.nr_sequencia
	from	pls_conta_pos_estab_taxa 	a,
		pls_conta_pos_taxa_contab	b
	where	a.nr_sequencia		= b.nr_seq_pos_estab_taxa
	and	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w
	and	coalesce(b.nr_seq_conta_resumo::text, '') = '';
	
C05 CURSOR FOR
	SELECT	max(c.nr_sequencia) nr_seq_fat_conta_ref
	from	pls_conta		d,
		pls_fatura_conta 	c,
		pls_fatura_evento 	b,
		pls_fatura 		a
	where	a.nr_sequencia		= b.nr_seq_fatura
	and	b.nr_sequencia		= c.nr_seq_fatura_evento
	and	d.nr_sequencia		= c.nr_seq_conta
	and	a.nr_seq_lote		= nr_seq_lote_fat_p
	and	c.nr_seq_conta		= nr_seq_conta_p;
	
C06 CURSOR FOR
	SELECT	max(c.nr_sequencia) nr_seq_fat_conta_ref
	from	pls_conta		d,
		pls_fatura_conta 	c,
		pls_fatura_evento 	b,
		pls_fatura 		a
	where	a.nr_sequencia		= b.nr_seq_fatura
	and	b.nr_sequencia		= c.nr_seq_fatura_evento
	and	d.nr_sequencia		= c.nr_seq_conta
	and	a.nr_seq_lote		= nr_seq_lote_fat_p
	and	c.nr_seq_conta_sus	= nr_seq_conta_sus_p;
	
					
--Se ocorrer algum excecao no processo, precisa desfazer o que ja foi realizado ate tal momento, pois como o commit esta a 

--nivel de contas, muitas contas, proc, mat podem ter sido vinculadas a um novo lote de faturamento e isso precisa ser retornado para

--nao ficar com um lote e faturas canceladas e outro lote com apenas umas poucas contas vinculadas.
procedure pls_desfazer_gerac_lote_refat( nr_seq_lote_fat_p	pls_lote_faturamento.nr_sequencia%type) is

nr_seq_lote_origem_w pls_lote_faturamento.nr_sequencia%type;

c_eventos CURSOR( nr_seq_lote_fat_pc	pls_lote_faturamento.nr_sequencia%type) FOR
	SELECT 	nr_sequencia
	from	pls_fatura_evento
	where	nr_seq_fatura in ( SELECT nr_sequencia
				   from	  pls_fatura
				   where  nr_seq_lote = nr_seq_lote_fat_pc );
				
c_contas CURSOR( nr_seq_fatura_evento_pc pls_fatura_evento.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_fatura_conta
	where	nr_seq_fatura_evento = nr_seq_fatura_evento_pc;
	
	
BEGIN
	select 	max(nr_seq_plano)
	into STRICT	nr_seq_plano_w
	from	pls_conta_pos_cab_v
	where	nr_sequencia = nr_seq_conta_p;

	select	nr_seq_lote_origem
	into STRICT	nr_seq_lote_origem_w
	from	pls_lote_faturamento
	where	nr_sequencia = nr_seq_lote_fat_p;
	
	for	r_c_eventos_w in c_eventos(nr_seq_lote_fat_p) loop
	
		for	r_c_contas_w in c_contas(r_c_eventos_w.nr_sequencia) loop
		
			delete 	from pls_fatura_proc
			where	nr_seq_fatura_conta = r_c_contas_w.nr_sequencia;
			
			delete	from pls_fatura_mat
			where	nr_seq_fatura_conta = r_c_contas_w.nr_sequencia;
		
		end loop;
		
		delete	from pls_fatura_conta
		where	nr_seq_fatura_evento = r_c_eventos_w.nr_sequencia;
	
		delete 	from pls_fatura_evento
		where 	nr_sequencia = r_c_eventos_w.nr_sequencia;
	
	end loop;
	
	--atualiza o lote nas contas de pos estabelecido, voltando ao lote original
	update	pls_conta_pos_estabelecido
	set	nr_seq_lote_fat = nr_seq_lote_origem_w
	where	nr_seq_lote_fat = nr_seq_lote_fat_p;
					
	update	pls_conta_pos_estab_contab
	set	nr_seq_lote_fat = nr_seq_lote_origem_w
	where	nr_seq_lote_fat = nr_seq_lote_fat_p;
	delete from pls_fatura where nr_seq_lote = nr_seq_lote_fat_p;
	
	delete from pls_lote_faturamento where nr_sequencia = nr_seq_lote_fat_p;
	commit;
	
end;
	
begin

select	coalesce(max(ie_novo_pos_estab), 'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false
where	cd_estabelecimento = cd_estabelecimento_p;

select	coalesce(max(ie_evento_restritivo),'N'),
	coalesce(max(ie_contas_faturar), 'PF')
into STRICT	ie_evento_restritivo_w,
	ie_contas_faturar_w
from	pls_parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_p;

if	(((nr_seq_lote_fat_p IS NOT NULL AND nr_seq_lote_fat_p::text <> '') and (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') and (coalesce(nr_seq_conta_sus_p::text, '') = '')) or ((nr_seq_lote_fat_p IS NOT NULL AND nr_seq_lote_fat_p::text <> '') and (coalesce(nr_seq_conta_p::text, '') = '') and (nr_seq_conta_sus_p IS NOT NULL AND nr_seq_conta_sus_p::text <> ''))) then
	if (ie_novo_pos_estab_w = 'S') then
		pls_faturamento_pck.vincular_conta_lote_fat(	nr_seq_lote_fat_p,	nr_seq_evento_p,	nr_seq_conta_p,
								cd_estabelecimento_p,	nm_usuario_p,		ie_refaturar_p,
								ie_origem_vinculo_p,	nr_seq_lote_origem_p);
								
	elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') and (coalesce(nr_seq_conta_sus_p::text, '') = '') then

		begin
			select	count(1)
			into STRICT	qt_registro_w
			from	pls_fatura
			where	(nr_titulo IS NOT NULL AND nr_titulo::text <> '')
			and	nr_seq_lote	= nr_seq_lote_fat_p;
			
			if (qt_registro_w > 0) then
				-- O lote de faturamento ja possui titulos gerados, nao e permitido vincular novas contas.
				CALL wheb_mensagem_pck.exibir_mensagem_abort(862846);
			end if;
		
			-- Adicionado a origem do vinculo, o padrao e "X" - que e o comportamento anterior a OS 1355948
			ie_origem_vinculo_w := coalesce(ie_origem_vinculo_p, 'X');
			begin
				select	a.dt_geracao,
					a.dt_fechamento,
					a.nr_seq_regra_fat
				into STRICT	dt_geracao_lote_w,
					dt_fechamento_w,
					nr_seq_regra_fat_w
				from	pls_lote_faturamento a
				where	nr_sequencia = nr_seq_lote_fat_p;
			exception
			when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(221714,'NR_SEQ_LOTE_FAT_P=' || nr_seq_lote_fat_p);
			end;
			
			begin
				select	coalesce(ie_conta_fechada,'N')
				into STRICT	ie_conta_fechada_w
				from	pls_regra_faturamento
				where	nr_sequencia = nr_seq_regra_fat_w;
			exception
			when others then
				ie_conta_fechada_w := 'N';
			end;
			
			select	count(1)
			into STRICT	qt_regra_lib_fat_w
			from	pls_regra_lib_fat a
			where	a.cd_estabelecimento	= cd_estabelecimento_p;
			
			begin
				select	coalesce(max(ie_taxa_contrato_pos),'F')
				into STRICT	ie_taxa_contrato_pos_w
				from	pls_parametros
				where	cd_estabelecimento	= cd_estabelecimento_p;
			exception
			when others then
				ie_taxa_contrato_pos_w		:= 'F';
			end;
			
			nr_seq_evento_w := nr_seq_evento_p;
			
			if (coalesce(dt_fechamento_w::text, '') = '') then
				delete 	FROM w_pls_lote_fat_item
				where	nr_seq_lote	= nr_seq_lote_fat_p
				and	nm_usuario	= nm_usuario_p;
				
				if (coalesce(dt_geracao_lote_w::text, '') = '') then
					select	count(1)
					into STRICT	qt_registro_w
					from	pls_fatura_conta c,
						pls_fatura_evento b,
						pls_fatura a
					where	a.nr_sequencia	= b.nr_seq_fatura
					and	b.nr_sequencia	= c.nr_seq_fatura_evento
					and	a.nr_seq_lote	= nr_seq_lote_fat_p;

					if (qt_registro_w = 0) then
						dt_geracao_lote_w := clock_timestamp();
					
						update	pls_lote_faturamento
						set	dt_geracao	= dt_geracao_lote_w
						where	nr_sequencia	= nr_seq_lote_fat_p;
					end if;
				end if;
				
				if (dt_geracao_lote_w IS NOT NULL AND dt_geracao_lote_w::text <> '') then
					select	max(nr_seq_cabecalho)
					into STRICT	nr_seq_cabecalho_w
					from	pls_conta_pos_cab_v
					where	nr_sequencia	= nr_seq_conta_p;
				
					select	a.ie_tipo_conta,
						coalesce(b.nr_seq_ops_congenere, b.nr_seq_congenere),
						b.nr_sequencia,
						a.ie_tipo_guia,
						a.dt_alta,
						a.cd_guia_ok,
						coalesce(a.dt_atendimento,a.dt_atendimento_referencia),
						b.nr_seq_contrato,
						b.nr_seq_intercambio,
						--b.nr_seq_plano
						pls_obter_produto_benef(b.nr_sequencia, a.dt_atendimento_referencia),
						c.ie_tipo_protocolo,
						(select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = b.nr_seq_ops_congenere) ie_tipo_congenere_ops,
						(select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = b.nr_seq_congenere) ie_tipo_congenere,
						(select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = c.nr_seq_congenere) ie_tipo_congenere_prot,
						coalesce(a.dt_inicio_faturamento,a.dt_entrada),
						c.ie_origem_protocolo
					into STRICT	ie_tipo_conta_w,
						nr_seq_congenere_w,
						nr_seq_segurado_w,
						ie_tipo_guia_w,
						dt_alta_w,
						cd_guia_ok_w,
						dt_atendimento_w,
						nr_seq_contrato_w,
						nr_seq_intercambio_w,
						nr_seq_plano_seg_w,
						ie_tipo_protocolo_w,
						ie_tipo_congenere_ops_w,
						ie_tipo_congenere_w,
						ie_tipo_congenere_prot_w,
						dt_internacao_w,
						ie_origem_protocolo_w
					from	pls_segurado		b,
						pls_conta_pos_cab_v	a,
						pls_protocolo_conta	c
					where	b.nr_sequencia		= a.nr_seq_segurado
					and	c.nr_sequencia		= a.nr_seq_protocolo
					and	a.nr_seq_cabecalho	= nr_seq_cabecalho_w;

					-- Quando for de INTERNACAO, deve ser utilizada a DATA DE ALTA
					if (ie_conta_fechada_w = 'S') then
						if (cd_guia_ok_w IS NOT NULL AND cd_guia_ok_w::text <> '') then
							select	max(dt_alta)
							into STRICT	dt_alta_w
							from	pls_conta
							where	nr_seq_segurado	= nr_seq_segurado_w
							and	cd_guia_ok	= cd_guia_ok_w
							and	ie_tipo_guia	= '5';
						end if;
					else -- OS 802541 - Manual do PTU - Regra: Para notas de internacao, adotar a data de inicio de faturamento, conforme regra do Envio de Dados da ANS
						if (ie_tipo_guia_w = '5') then
							dt_atendimento_w := coalesce(dt_internacao_w,dt_atendimento_w);
						end if;
					end if;
					
					ie_impedimento_cobranca_w	:= null;
					
					-- levanta o tipo de congenere.

					-- se for reembolso, prioriza o congenere do protocolo
					if (ie_tipo_protocolo_w = 'R') or (ie_origem_protocolo_w = 'G') then
					
						ie_tipo_congenere_ref_w := coalesce(ie_tipo_congenere_prot_w, coalesce(ie_tipo_congenere_w, 'CO'));
						
					else -- senao, prioriza o congenere OPS e depois do segurado
					
						ie_tipo_congenere_ref_w := coalesce(ie_tipo_congenere_ops_w, coalesce(ie_tipo_congenere_w, 'CO'));
					end if;	
					
					-- so valida a data fora de prazo, se nao for congenere de empresa.
					if (ie_tipo_congenere_ref_w = 'CO') then
					
						-- Se a data de atendimento estiver fora do prazo
						if (pls_obter_se_envia_conta( dt_atendimento_w, dt_geracao_lote_w, nr_seq_congenere_w, nr_seq_segurado_w, nr_seq_conta_p) = 'N') then
						
							-- Verifica se a data da alta esta fora do prazo
							if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then
								if (pls_obter_se_envia_conta( dt_alta_w, dt_geracao_lote_w, nr_seq_congenere_w, nr_seq_segurado_w, nr_seq_conta_p) = 'N') then
									ie_impedimento_cobranca_w := 'P';
									CALL pls_inserir_mot_imp_cob_fat( nr_seq_conta_p, nr_seq_lote_fat_p, '1', nm_usuario_p);
								end if;
							else
								-- Caso nao tenha data da alta, a conta esta realmente fora do prazo
								ie_impedimento_cobranca_w := 'P';
								CALL pls_inserir_mot_imp_cob_fat( nr_seq_conta_p, nr_seq_lote_fat_p, '1', nm_usuario_p);
							end if;
						end if;
					end if;
					
					if 	((ie_tipo_protocolo_w != 'R') and (ie_origem_protocolo_w != 'G') and (pls_obter_se_prest_a400(nr_seq_conta_p, cd_estabelecimento_p) = 'N')) then
						CALL pls_inserir_mot_imp_cob_fat( nr_seq_conta_p, nr_seq_lote_fat_p, '2', nm_usuario_p);
						ie_impedimento_cobranca_w	:= 'P';
					end if;
					
					if (qt_regra_lib_fat_w > 0) then			
						SELECT * FROM pls_obter_regra_lib_fat(nr_seq_conta_p, dt_geracao_lote_w, cd_estabelecimento_p, nm_usuario_p, ie_exige_med_aud_w, ie_exige_enf_aud_w) INTO STRICT ie_exige_med_aud_w, ie_exige_enf_aud_w;
						
						if (coalesce(ie_exige_med_aud_w,'N') = 'S') then
							CALL pls_inserir_mot_imp_cob_fat( nr_seq_conta_p, nr_seq_lote_fat_p, '3', nm_usuario_p);
							ie_impedimento_cobranca_w	:= 'P';
						end if;
						
						if (coalesce(ie_exige_enf_aud_w,'N') = 'S') then
							CALL pls_inserir_mot_imp_cob_fat( nr_seq_conta_p, nr_seq_lote_fat_p, '4', nm_usuario_p);
							ie_impedimento_cobranca_w	:= 'P';
						end if;
					end if;	
					
					if (ie_tipo_conta_w = 'IC') then
						CALL ptu_atualiza_valor_proc_mat(nr_seq_conta_p, clock_timestamp(), nm_usuario_p, cd_estabelecimento_p);
					end if;
					
					-- Verificar se a tem pos-estabelecido contabil
					select	count(1)
					into STRICT	qt_pos_contab_w
					from	pls_conta_pos_estabelecido 	p,
						pls_conta_pos_estab_contab	c
					where	p.nr_seq_conta			= nr_seq_conta_p
					and	p.nr_sequencia			= c.nr_seq_conta_pos
					and	p.ie_status_faturamento		= 'L'
					and	coalesce(p.nr_seq_lote_fat::text, '') = ''
					and	p.ie_situacao			= 'A';
					
					-- O select abaixo verifica, quando existe pos-estabelecido contabil, se os campos 'vl_medico', 'vl_custo_operacional_ind' e 'vl_materiais' estao nulos.

					-- Situacao identificada na Unimed Litoral, OS 1343378, onde estes campos estavam nulos, porem, eram contas de junho de 2015 ou anteriores.
					qt_pos_contab_null_w := 0;
					if (qt_pos_contab_w > 0) then
						select	count(1)
						into STRICT	qt_pos_contab_null_w
						from	pls_conta_pos_estabelecido 	p,
							pls_conta_pos_estab_contab	c
						where	p.nr_seq_conta			= nr_seq_conta_p
						and	p.nr_sequencia			= c.nr_seq_conta_pos
						and	p.ie_status_faturamento		= 'L'
						and	coalesce(p.nr_seq_lote_fat::text, '') = ''
						and	p.ie_situacao			= 'A'
						and	coalesce(c.vl_medico::text, '') = ''
						and	coalesce(c.vl_custo_operacional_ind::text, '') = ''
						and	coalesce(c.vl_materiais::text, '') = '';
					end if;
					
					-- Tratamento realizado afim de gerar 'pos_estab_contab' quando nao existir pos-estabelecido contabil ou quando existir, e seus valores estiverem nulos
					if (qt_pos_contab_w = 0) or (qt_pos_contab_null_w > 0) then
						-- Gerar pos-estabelecido contabil
						CALL pls_gerar_contab_val_adic( nr_seq_conta_p, null, null, null, null, null, null, 'P', 'N', nm_usuario_p);
					end if;
					
					-- Data de alta pro calculo da taxa de intercambio
					if (ie_tipo_guia_w != '5') and (cd_guia_ok_w IS NOT NULL AND cd_guia_ok_w::text <> '') then
						select	max(dt_alta)
						into STRICT	dt_alta_w
						from	pls_conta
						where	nr_seq_segurado	= nr_seq_segurado_w
						and	cd_guia_ok	= cd_guia_ok_w
						and	ie_tipo_guia	= '5';
					end if;
					
					open C01;
					loop
					fetch C01 into
						nr_seq_conta_pos_w,
						nr_seq_conta_proc_w,
						nr_seq_conta_mat_w,
						nr_seq_segurado_w,
						nr_seq_conta_w,
						vl_administracao_w,
						vl_beneficiario_w,
						nr_seq_pos_contab_w,
						tx_administracao_w,
						vl_lib_taxa_co_w,
						vl_lib_taxa_material_w,
						vl_lib_taxa_servico_w,
						vl_pos_adm_contab_w,
						nr_seq_conta_resumo_w;
					EXIT WHEN NOT FOUND; /* apply on C01 */
						begin
						
						if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
							select	a.dt_procedimento
							into STRICT	dt_item_w
							from	pls_conta_proc_v a
							where	a.nr_sequencia	= nr_seq_conta_proc_w;
						elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
							select	a.dt_atendimento
							into STRICT	dt_item_w
							from	pls_conta_mat_v a
							where	a.nr_sequencia	= nr_seq_conta_mat_w;
						end if;
						
						if (coalesce(nr_seq_evento_p::text, '') = '') then					
							nr_seq_evento_w := pls_obter_evento_faturamento(	nr_seq_conta_proc_w, nr_seq_conta_mat_w, dt_item_w, nr_seq_evento_w, nr_seq_regra_fat_w, nr_seq_pos_contab_w, nr_seq_conta_pos_w, null);
						end if;
						
						
						-- Valida se o evento selecionado esta compreendido na regra usada no lote, se o evento nao for "restritiva"
						select	coalesce(max(a.nr_seq_regra), 0)
						into STRICT	nr_seq_regra_event_w
						from	pls_regra_fat_evento	a
						where	a.nr_seq_evento = nr_seq_evento_w
						and 	a.nr_seq_regra	= nr_seq_regra_fat_w;
						
						if	((nr_seq_regra_event_w = nr_seq_regra_fat_w) or (ie_evento_restritivo_w = 'S')) then
						
							if (vl_beneficiario_w < vl_administracao_w) then
								vl_administracao_w	:= 0;
								vl_lib_taxa_servico_w	:= 0;
								vl_lib_taxa_co_w	:= 0;
								vl_lib_taxa_material_w	:= 0;
								vl_pos_adm_contab_w	:= 0;
							else
								vl_administracao_w	:= coalesce(vl_lib_taxa_servico_w,0) + coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0);
							end if;
							
							qt_registro_w := 0;
							if (nr_seq_pos_contab_w IS NOT NULL AND nr_seq_pos_contab_w::text <> '') then
								select	count(1)
								into STRICT	qt_registro_w
								from	pls_conta_pos_estab_contab
								where	nr_sequencia	= nr_seq_pos_contab_w;
							end if;
							
							if (coalesce(vl_beneficiario_w,0) > coalesce(vl_administracao_w,0)) and (qt_registro_w <= 1) then
								vl_beneficiario_w := vl_beneficiario_w - vl_administracao_w;
							end if;
							
							begin
								update	pls_conta_pos_estabelecido
								set	nr_seq_lote_fat 	= nr_seq_lote_fat_p,
									nr_seq_evento_fat 	= nr_seq_evento_w,
									nm_usuario		= nm_usuario_p,
									dt_atualizacao		= clock_timestamp()
								where	nr_sequencia 		= nr_seq_conta_pos_w;
							exception
							when others then
								if (coalesce(ie_refaturar_p,'N') = 'S') then
									--Desfazer a geracao do novo lote e tudo que for tabela filha. feito isso pois se tirar o commit a a cada iteracao, existe o risco de ocorrer lock.
									CALL pls_desfazer_gerac_lote_refat(nr_seq_lote_fat_p);
								end if;
								CALL wheb_mensagem_pck.exibir_mensagem_abort(355896,'CONTA='|| nr_seq_conta_p);
							end;
							
							insert into w_pls_lote_fat_item(nr_sequencia,
								nm_usuario,
								dt_atualizacao,
								nr_seq_lote,
								nr_seq_conta_proc,
								nr_seq_conta_mat,
								nr_seq_conta,
								nr_seq_evento,
								ie_evento_lote,
								nr_seq_segurado,
								nr_seq_conta_pos,
								vl_item,
								ie_tipo_cobranca,
								ie_impedimento_cobranca,
								vl_item_ndc,
								ie_origem_item,
								nr_seq_conta_pos_contab)
							values (nextval('w_pls_lote_fat_item_seq'),
								nm_usuario_p,
								clock_timestamp(),
								nr_seq_lote_fat_p,
								nr_seq_conta_proc_w,
								nr_seq_conta_mat_w,
								nr_seq_conta_w,
								nr_seq_evento_w,
								'S',
								nr_seq_segurado_w,
								nr_seq_conta_pos_w,
								vl_administracao_w,
								'2' /* Pos estabelecido por rateio */
,
								ie_impedimento_cobranca_w,
								vl_beneficiario_w,
								'M',
								nr_seq_pos_contab_w) returning nr_sequencia into nr_seq_w_pls_lote_fat_w;
								
							if (ie_taxa_contrato_pos_w = 'F') then
							
								--Necessario atualizar valores de taxa de pos-estabelecido
								select	max(qt_dias_envio_taxa)
								into STRICT	qt_dias_envio_taxa_w
								from	pls_regra_intercambio
								where	pr_taxa	= tx_administracao_w;
							
								if (ie_tipo_guia_w = '5') then
									qt_dia_proced_receb_w := (trunc(clock_timestamp()) - trunc(coalesce(dt_alta_w ,dt_item_w)));
								else
									qt_dia_proced_receb_w := (trunc(clock_timestamp()) - trunc(dt_item_w));
								end if;
							
								if (qt_dia_proced_receb_w > qt_dias_envio_taxa_w) then
									vl_tx_intercambio_cobr_w := 0;
									tx_administracao_w	:= 0;
									vl_lib_taxa_servico_w	:= 0;
									vl_lib_taxa_co_w	:= 0;
									vl_lib_taxa_material_w	:= 0;
									vl_pos_adm_contab_w	:= 0;
								else
									vl_tx_intercambio_cobr_w := vl_administracao_w;
								end if;
								
								update	pls_conta_pos_estabelecido
								set	nr_seq_evento_fat	= nr_seq_evento_w,
									nr_seq_lote_fat		= nr_seq_lote_fat_p,
									dt_atualizacao		= clock_timestamp(),
									nm_usuario		= nm_usuario_p
								where	nr_sequencia		= nr_seq_conta_pos_w;

								if (vl_tx_intercambio_cobr_w = 0) then
									update	pls_conta_pos_estabelecido
									set	vl_beneficiario		= (vl_beneficiario - vl_administracao_w) + vl_tx_intercambio_cobr_w,
										vl_administracao	= vl_tx_intercambio_cobr_w,
										tx_administracao	= tx_administracao_w,
										vl_lib_taxa_servico	= vl_lib_taxa_servico_w,
										vl_lib_taxa_co		= vl_lib_taxa_co_w,
										vl_lib_taxa_material	= vl_lib_taxa_material_w,
										dt_atualizacao		= clock_timestamp(),
										nm_usuario		= nm_usuario_p
									where	nr_sequencia		= nr_seq_conta_pos_w;
								
									update	pls_conta_pos_estab_partic
									set	vl_participante_pos 	= vl_participante_pos - vl_administracao,
										vl_administracao	= vl_tx_intercambio_cobr_w
									where	nr_seq_conta_pos	= nr_seq_conta_pos_w;

									-- OS 686283

									--delete	w_pls_lote_fat_item z

									--where exists(	select	1

									--		from	pls_conta_pos_estab_taxa a

									--		where	a.nr_sequencia = z.nr_seq_pos_estab_taxa

									--		and	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w);


									--delete	pls_conta_pos_estab_taxa 	a

									--where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w;
								end if;

								if (nr_seq_pos_contab_w IS NOT NULL AND nr_seq_pos_contab_w::text <> '') then
									if (vl_tx_intercambio_cobr_w = 0) then
										update	pls_conta_pos_estab_contab
										set	nr_seq_evento_fat	= nr_seq_evento_w,
											nr_seq_lote_fat		= nr_seq_lote_fat_p,
											dt_atualizacao		= clock_timestamp(),
											nm_usuario		= nm_usuario_p,
											vl_custo_operacional 	= coalesce(vl_custo_operacional,0) - coalesce(vl_administracao,0)
										where	nr_sequencia		= nr_seq_pos_contab_w;

										update	pls_conta_pos_estab_contab
										set	vl_administracao	= 0,
											vl_lib_taxa_servico	= 0,
											vl_lib_taxa_co		= 0,
											vl_lib_taxa_material	= 0
										where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
									else
										update	pls_conta_pos_estab_contab
										set	nr_seq_evento_fat	= nr_seq_evento_w,
											nr_seq_lote_fat		= nr_seq_lote_fat_p,
											dt_atualizacao		= clock_timestamp(),
											nm_usuario		= nm_usuario_p
										where	nr_sequencia		= nr_seq_pos_contab_w;
									end if;
								else
									if (vl_tx_intercambio_cobr_w = 0) then
										update	pls_conta_pos_estab_contab
										set	nr_seq_evento_fat	= nr_seq_evento_w,
											nr_seq_lote_fat		= nr_seq_lote_fat_p,
											dt_atualizacao		= clock_timestamp(),
											nm_usuario		= nm_usuario_p,
											vl_custo_operacional 	= coalesce(vl_custo_operacional,0) - coalesce(vl_administracao,0)
										where	nr_seq_conta_pos	= nr_seq_conta_pos_w;

										update	pls_conta_pos_estab_contab
										set	vl_administracao	= 0,
											vl_lib_taxa_servico	= 0,
											vl_lib_taxa_co		= 0,
											vl_lib_taxa_material	= 0
										where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
									else
										update	pls_conta_pos_estab_contab
										set	nr_seq_evento_fat	= nr_seq_evento_w,
											nr_seq_lote_fat		= nr_seq_lote_fat_p,
											dt_atualizacao		= clock_timestamp(),
											nm_usuario		= nm_usuario_p
										where	nr_seq_conta_pos	= nr_seq_conta_pos_w;
									end if;
								end if;
								
								-- Valor do beneficiario tem que ser a soma dos valores detalhados
								update	pls_conta_pos_estabelecido
								set	vl_beneficiario	= coalesce(vl_medico,0) + coalesce(vl_custo_operacional,0) + coalesce(vl_materiais,0) + coalesce(vl_administracao,0)
								where	nr_sequencia	= nr_seq_conta_pos_w;
								
								if (vl_tx_intercambio_cobr_w = 0) then
									if (nr_seq_pos_contab_w IS NOT NULL AND nr_seq_pos_contab_w::text <> '') then
										select	coalesce(vl_medico,0) + coalesce(vl_custo_operacional_ind,0) + coalesce(vl_materiais,0)
										into STRICT	vl_beneficiario_w
										from	pls_conta_pos_estab_contab
										where	nr_sequencia	= nr_seq_pos_contab_w;
									else
										select	coalesce(vl_medico,0) + coalesce(vl_custo_operacional,0) + coalesce(vl_materiais,0)
										into STRICT	vl_beneficiario_w
										from	pls_conta_pos_estabelecido
										where	nr_sequencia	= nr_seq_conta_pos_w;
									end if;
								
									-- Atualiza a taxa do item que vai pro faturamento
									update	w_pls_lote_fat_item
									set	vl_item_ndc	= vl_beneficiario_w,
										vl_item		= 0
									where	nr_sequencia	= nr_seq_w_pls_lote_fat_w;
									
									-- OS 686283

									--delete	w_pls_lote_fat_item z

									--where exists(	select	1

									--		from	pls_conta_pos_estab_taxa a

									--		where	a.nr_sequencia = z.nr_seq_pos_estab_taxa

									--		and	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w);

											
									--delete	pls_conta_pos_estab_taxa 	a

									--where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w;
								end if;
							
								select	count(1)
								into STRICT	qt_taxa_w
								from	pls_conta_pos_estab_taxa 	a
								where	a.nr_seq_conta_pos_estab = nr_seq_conta_pos_w;
								
								if (qt_taxa_w = 0) then
									CALL pls_gerar_taxa_adm_pos_estab( nr_seq_conta_p, nr_seq_contrato_w, nr_seq_intercambio_w, coalesce(nr_seq_plano_w, nr_seq_plano_seg_w), clock_timestamp(), nr_seq_congenere_w, nm_usuario_p, 'N');
								end if;
							
								open C02;
								loop
								fetch C02 into
									vl_informado_w,
									ie_tipo_taxa_w,
									nr_seq_pos_estab_taxa_w,
									nr_seq_pos_taxa_contab_w;
								EXIT WHEN NOT FOUND; /* apply on C02 */
									begin
									select	count(1)
									into STRICT	qt_taxa_w
									from 	w_pls_lote_fat_item
									where	nr_seq_conta_pos	= nr_seq_conta_pos_w
									and	vl_item_ndc		= vl_informado_w
									and	nr_seq_conta		= nr_seq_conta_w
									and	nr_seq_lote		= nr_seq_lote_fat_p
									and	ie_tipo_cobranca	in ('4','3');
									
									if (vl_informado_w > 0) and (qt_taxa_w = 0) then
										insert into w_pls_lote_fat_item(nr_sequencia,
											nm_usuario,
											dt_atualizacao,
											nr_seq_lote,
											nr_seq_conta_proc,
											nr_seq_conta_mat,
											nr_seq_conta,
											nr_seq_evento,
											ie_evento_lote,
											nr_seq_segurado,
											nr_seq_conta_pos,
											vl_item,
											ie_tipo_cobranca,
											ie_impedimento_cobranca,
											vl_item_ndc,
											ie_origem_item,
											nr_seq_conta_pos_contab,
											nr_seq_pos_estab_taxa,
											nr_seq_pos_taxa_contab)
										values (nextval('w_pls_lote_fat_item_seq'),
											nm_usuario_p,
											clock_timestamp(),
											nr_seq_lote_fat_p,
											nr_seq_conta_proc_w,
											nr_seq_conta_mat_w,
											nr_seq_conta_w,
											nr_seq_evento_w,
											'S',
											nr_seq_segurado_w,
											nr_seq_conta_pos_w,
											0,
											ie_tipo_taxa_w, -- 4 Valor de manutencao || 3 Taxa administrativa
											ie_impedimento_cobranca_w,
											vl_informado_w,
											'M',
											nr_seq_pos_contab_w,
											nr_seq_pos_estab_taxa_w,
											nr_seq_pos_taxa_contab_w);
									end if;
									end;
								end loop;
								close C02;
							end if;
							
						end if; -- fim se o evento selecionado for compreendido na regra do lote
						end;
					end loop;
					close C01;
					
					-- COLOCAR A CONTA NO LOTE DE FATURAMENTO
					CALL pls_gerar_faturas_lote( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
					
					-- DIVIDIR FATURAS COM IMPEDIMENTO DE COBRANCA
					CALL pls_dividir_imped_cobr_fat( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
					
					-- CONCEITO FATURA COM CONTA FECHADA, AS CONTAS COM GUIA DE REFERENCIA IGUAIS DEVEM SER SEMPRE FATURADAS JUNTAS.
					if (ie_conta_fechada_w = 'S') then
						select	max(a.nr_sequencia)
						into STRICT	nr_seq_pls_fatura_w
						from	pls_fatura_conta c,
							pls_fatura_evento b,
							pls_fatura a
						where	a.nr_sequencia		= b.nr_seq_fatura
						and	b.nr_sequencia		= c.nr_seq_fatura_evento
						and	coalesce(a.ie_cancelamento::text, '') = ''
						and	a.nr_seq_lote		= nr_seq_lote_fat_p
						and	c.nr_seq_conta		= nr_seq_conta_p;			
						
						if (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') then
							CALL pls_tratar_fat_conta_fechada( nr_seq_lote_fat_p, nr_seq_pls_fatura_w, cd_estabelecimento_p, nm_usuario_p,'S');
						end if;
					end if;
					
					
					-- DIVISAO POR VALOR

					-- Foi movido para esta parte, pois a tratar conta fechada podia em alguns casos passar o limite de valor da fatura.

					-- Para isto e feito a verificacao neste ponto, a pls_dividir_faturas_lote ja tem uma tratativa para sempre manter

					-- todas as contas de um atendimento em uma fatura.

					
					-- -------------------------------------- Dividir as faturas de acordo com a regra de protocolo (importante ser executado antes das demais regras de divisao --------------------------------------
					CALL pls_faturamento_pck.dividir_faturas_prot(nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
					
					CALL pls_dividir_faturas_lote( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
					
					-- -------------------------------------- Dividir as faturas de acordo com o pagodor do beneficiario remido --------------------------------------
					CALL pls_dividir_fat_benef_remido(nr_seq_lote_fat_p,cd_estabelecimento_p,nm_usuario_p, 'M');
					
					-- -------------------------------------- 11 - Dividir as faturas de acordo com a regra divisao de taxa adiministrativa -----------------------------
					CALL pls_dividir_fatura_taxa(nr_seq_lote_fat_p,cd_estabelecimento_p,nm_usuario_p, 'M');
					
					-- ATUALIZAR O VALOR DAS FATURAS
					CALL pls_atualizar_vl_lote_fatura( nr_seq_lote_fat_p, nm_usuario_p,'N','N');
								
					-- LIMPAR EVENTOS E FATURAS VAZIAS
					CALL pls_limpar_faturas_vazias_lote( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
					
					commit;
					
					-- verificar se ficou algum servico no contas pendentes e remover a conta da fatura
					if (coalesce(nr_seq_evento_p::text, '') = '') and (ie_conta_fechada_w = 'S') then
					
						select	count(1)
						into STRICT	qt_conta_pendente_w
						from	pls_contas_pendentes_v
						where	nr_seq_conta	= nr_seq_conta_p;
					
						if (qt_conta_pendente_w > 0) then
						
							for r_c05_w in c05 loop
								CALL pls_remover_conta_fatura(r_c05_w.nr_seq_fat_conta_ref, 'S', cd_estabelecimento_p, nm_usuario_p);
							end loop;
						end if;
					end if;
				end if;
			end if;
		exception
			when others then
			
				-- Se acontecer alguma exception, busca a fatura gerada e desvincula ela do lote
				select	max(c.nr_sequencia)
				into STRICT	nr_seq_fatura_conta_w
				from	pls_fatura_conta	c,
					pls_fatura_evento	b,
					pls_fatura		a
				where	a.nr_sequencia	= b.nr_seq_fatura
				and	b.nr_sequencia	= c.nr_seq_fatura_evento
				and	c.nr_seq_conta	= nr_seq_conta_p
				and	a.nr_seq_lote	= nr_seq_lote_fat_p;
				
				-- LIMPAR EVENTOS E FATURAS VAZIAS
				CALL pls_limpar_faturas_vazias_lote( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
				
				-- Desvincula a conta
				CALL pls_remover_conta_fatura(nr_seq_fatura_conta_w, 'S', cd_estabelecimento_p, nm_usuario_p);
				
				-- pega o erro e exibe 
				ds_erro_w	:= substr(sqlerrm, 0, 4000);
				CALL wheb_mensagem_pck.exibir_mensagem_abort(738498, 'ERRO='|| ds_erro_w);

	end;
	-- Ressarcimento ao SUS
	elsif (coalesce(nr_seq_conta_p::text, '') = '') and (nr_seq_conta_sus_p IS NOT NULL AND nr_seq_conta_sus_p::text <> '') then	

		select	count(1)
		into STRICT	qt_registro_w
		from	pls_fatura
		where	(nr_titulo IS NOT NULL AND nr_titulo::text <> '')
		and	nr_seq_lote	= nr_seq_lote_fat_p;
		
		if (qt_registro_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(862846); -- O lote de faturamento ja possui titulos gerados, nao e permitido vincular novas contas.
		end if;

		begin
			select	a.dt_geracao,
				a.dt_fechamento,
				a.nr_seq_regra_fat
			into STRICT	dt_geracao_lote_w,
				dt_fechamento_w,
				nr_seq_regra_fat_w
			from	pls_lote_faturamento a
			where	nr_sequencia = nr_seq_lote_fat_p;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(221714,'NR_SEQ_LOTE_FAT_P=' || nr_seq_lote_fat_p); -- O lote NR_SEQ_LOTE_FAT_P nao foi encontrado.
		end;

		nr_seq_evento_w := nr_seq_evento_p;
		
		if (coalesce(dt_fechamento_w::text, '') = '') then
			delete 	FROM w_pls_lote_fat_item
			where	nr_seq_lote	= nr_seq_lote_fat_p
			and	nm_usuario	= nm_usuario_p;
			
			if (coalesce(dt_geracao_lote_w::text, '') = '') then
				select	count(1)
				into STRICT	qt_registro_w
				from	pls_fatura_conta c,
					pls_fatura_evento b,
					pls_fatura a
				where	a.nr_sequencia	= b.nr_seq_fatura
				and	b.nr_sequencia	= c.nr_seq_fatura_evento
				and	a.nr_seq_lote	= nr_seq_lote_fat_p;

				if (qt_registro_w = 0) then
					dt_geracao_lote_w := clock_timestamp();
				
					update	pls_lote_faturamento
					set	dt_geracao	= dt_geracao_lote_w
					where	nr_sequencia	= nr_seq_lote_fat_p;
				end if;
			end if;
			
			if (dt_geracao_lote_w IS NOT NULL AND dt_geracao_lote_w::text <> '') then
				select	coalesce(b.nr_seq_ops_congenere, b.nr_seq_congenere),
					b.nr_sequencia,
					'5' ie_tipo_guia,	-- Internacao
					a.dt_alta,
					a.dt_internacao,
					b.nr_seq_contrato,
					b.nr_seq_intercambio,
					pls_obter_produto_benef(b.nr_sequencia, a.dt_alta) nr_seq_plano,
					'S' ie_tipo_procotolo,	-- SUS
					(select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = b.nr_seq_ops_congenere) ie_tipo_congenere_ops,
					(select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = b.nr_seq_congenere) ie_tipo_congenere,
					a.dt_internacao,
					c.vl_item
				into STRICT	nr_seq_congenere_w,
					nr_seq_segurado_w,
					ie_tipo_guia_w,
					dt_alta_w,
					dt_atendimento_w,
					nr_seq_contrato_w,
					nr_seq_intercambio_w,
					nr_seq_plano_seg_w,
					ie_tipo_protocolo_w,
					ie_tipo_congenere_ops_w,
					ie_tipo_congenere_w,
					dt_internacao_w,
					vl_item_w
				from	pls_processo_conta		a,
					pls_segurado			b,
					pls_segurado_mensalidade	c
				where	b.nr_sequencia	= a.nr_seq_segurado
				and	a.nr_sequencia  = c.nr_seq_processo_conta
				and	a.nr_sequencia	= nr_seq_conta_sus_p
				and	pls_obter_se_benef_remido(b.nr_sequencia, a.dt_internacao) = 'S'
				and	c.ie_tipo_item	= '39';
				
				
				if (coalesce(nr_seq_evento_p::text, '') = '') then
					nr_seq_evento_w := pls_obter_evento_faturamento(	null, null, null, nr_seq_evento_w, nr_seq_regra_fat_w, null, null, nr_seq_conta_sus_p);
				end if;

				open C00;
				loop
				fetch C00 into	
					nr_seq_conta_sus_w;
				EXIT WHEN NOT FOUND; /* apply on C00 */
					begin
					
					select	coalesce(max(a.nr_seq_regra), 0)
					into STRICT	nr_seq_regra_event_w
					from	pls_regra_fat_evento	a
					where	a.nr_seq_evento = nr_seq_evento_w
					and 	a.nr_seq_regra	= nr_seq_regra_fat_w;
					
					if	((nr_seq_regra_event_w = nr_seq_regra_fat_w) or (ie_evento_restritivo_w = 'S')) then
					
						update	pls_segurado_mensalidade
						set	nr_seq_evento_fat	= nr_seq_evento_w,
							nr_seq_lote_fat		= nr_seq_lote_fat_p,
							dt_atualizacao		= clock_timestamp(),
							nm_usuario		= nm_usuario_p
						where	nr_seq_processo_conta	= nr_seq_conta_sus_p;
					
						insert into w_pls_lote_fat_item(nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nr_seq_lote,
							nr_seq_conta_proc,
							nr_seq_conta_mat,
							nr_seq_conta,
							nr_seq_evento,
							ie_evento_lote,
							nr_seq_segurado,
							nr_seq_conta_pos,
							vl_item,
							ie_tipo_cobranca,
							ie_impedimento_cobranca,
							vl_item_ndc,
							ie_origem_item,
							nr_seq_conta_pos_contab)
						values (nextval('w_pls_lote_fat_item_seq'),
							nm_usuario_p,
							clock_timestamp(),
							nr_seq_lote_fat_p,
							null,
							null,
							nr_seq_conta_sus_w,
							nr_seq_evento_w,
							'S',
							nr_seq_segurado_w,
							null,
							vl_item_w,
							'5',
							null,
							null,
							'M',
							null);
					end if;
					end;
				end loop;
				close C00;
				
				-- COLOCAR A CONTA NO LOTE DE FATURAMENTO
				CALL pls_gerar_faturas_lote( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
				
				-- DIVIDIR FATURAS COM IMPEDIMENTO DE COBRANCA
				CALL pls_dividir_imped_cobr_fat( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);

				-- DIVISAO POR VALOR
				CALL pls_dividir_faturas_lote( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
				
				-- DIVIDIR AS FATURAS DE ACORDO COM O PAGODOR DO BENEFICIARIO REMIDO
				CALL pls_dividir_fat_benef_remido(nr_seq_lote_fat_p,cd_estabelecimento_p,nm_usuario_p, 'M');
				
				-- ATUALIZAR O VALOR DAS FATURAS
				CALL pls_atualizar_vl_lote_fatura( nr_seq_lote_fat_p, nm_usuario_p,'N','N');
							
				-- LIMPAR EVENTOS E FATURAS VAZIAS
				CALL pls_limpar_faturas_vazias_lote( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);
				
				commit;
				
				-- verificar se ficou algum servico no contas pendentes e remover a conta da fatura
				if (coalesce(nr_seq_evento_p::text, '') = '') and (ie_conta_fechada_w = 'S') then
				
					select	count(1)
					into STRICT	qt_conta_pendente_w
					from	pls_contas_pendentes_v
					where	nr_seq_conta_sus	= nr_seq_conta_sus_p;
				
					if (qt_conta_pendente_w > 0) then
					
						for r_c06_w in c06 loop
							CALL pls_remover_conta_fatura(r_c06_w.nr_seq_fat_conta_ref, 'S', cd_estabelecimento_p, nm_usuario_p);
						end loop;CALL pls_limpar_faturas_vazias_lote( nr_seq_lote_fat_p, cd_estabelecimento_p, nm_usuario_p);	
					end if;
				end if;
			end if;
		end if;
	end if;
	
	-- LOG
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_fatura_conta	c,
		pls_fatura_evento	b,
		pls_fatura		a
	where	a.nr_sequencia	= b.nr_seq_fatura
	and	b.nr_sequencia	= c.nr_seq_fatura_evento 
	and	c.nr_seq_conta	= coalesce(nr_seq_conta_p,nr_seq_conta_sus_p)
	and	a.nr_seq_lote	= nr_seq_lote_fat_p;

if (nr_seq_conta_sus_p IS NOT NULL AND nr_seq_conta_sus_p::text <> '') then
		nr_seq_conta_w	:= nr_seq_conta_sus_p;
	end if;
	-- se tem registro na temporaria, entao loga
	if	((coalesce(ie_refaturar_p,'N') = 'N') and (qt_registro_w > 0)) then
		
		CALL pls_gerar_fatura_log(nr_seq_lote_fat_p,null,nr_seq_conta_w,'PLS_VINCULAR_CONTA_LOTE_FAT','IM','N',nm_usuario_p);
		commit;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_vincular_conta_lote_fat ( nr_seq_lote_fat_p pls_lote_faturamento.nr_sequencia%type, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_refaturar_p text, ie_origem_vinculo_p text, nr_seq_lote_origem_p pls_lote_faturamento.nr_sequencia%type, nr_seq_conta_sus_p pls_processo_conta.nr_sequencia%type default null) FROM PUBLIC;

