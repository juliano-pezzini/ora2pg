-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE analisar_captura_software ( nm_usuario_p text) AS $body$
DECLARE


nr_id_soft_cap_w	bigint;
contador_w		bigint;
qt_licenca_soft_w	bigint;
nr_seq_software_w	bigint;
nr_seq_captura_w	bigint;
nr_seq_captura_det_w	bigint;
id_software_invent_w	bigint;
ds_inconsistencia_w	varchar(255);
nm_software_inv_w	char(100);
nm_estacao_inv_w	varchar(255);
nm_usuario_inv_w	varchar(255);
nm_usuario_licenca_w	varchar(60);
nm_estacao_licenca_w	varchar(60);
dt_validade_w		timestamp;
ie_tipo_licenca_w	varchar(15);
nm_usuario_captura_w	varchar(15);
c010  			integer;
c030  			integer;
retorno_w		integer;
/* Retorna todos os softwares identificados na rede*/

ds_cursor_c02_w	varchar(2000) :=
'	select	 c."nm_software_inventariado",'||
'		c."id_software_inventariado" '||
'	from	"soft_inv_v"@mysql c '||
'	where	(c."nm_software_inventariado" not like ''%Atualização%''  '||
'		and c."nm_software_inventariado" not like ''%Update%'' '||
'		and c."nm_software_inventariado" not like ''%Hotfix%'') '||
'	and	exists (select 1 '||
'		from	"soft_inv_est_v"@mysql a, '||
'			"comp_v"@mysql b '||
'		where	a."id_software_inventariado" = c."id_software_inventariado" '||
--'		AND 	a."id_so" not in (19,20) '||/*Compatibilidade com Windws 7*/
'		and		a."te_node_address" != ''00-05-9A-3C-78-00'' /*MAC ADDRESS Cisco VPN CLIENT*/'||
'		and	a."te_node_address" = b."te_node_address"'||
'		and	b."te_dominio_windows" is not null)';
--	and c."id_software_inventariado" in (363,179,4,159,1110,1353);
/*
Retorna a informação de qual software está instalado em qual estação.
*/
ds_cursor_c03_w	varchar(2000) :=
'	select	distinct upper(b."te_nome_computador") ,'||
'			lower(b."te_dominio_windows") '||
'	from	"soft_inv_est_v"@mysql a,'||
'			"comp_v"@mysql b'||
'	where	a."id_software_inventariado" = :id_software_invent'||
--'	AND 	a."id_so" not in (19,20) '||/*Compatibilidade com Windws 7*/
'	and		a."te_node_address" != ''00-05-9A-3C-78-00'' '||/*MAC ADDRESS Cisco VPN CLIENT*/
'	and		a."te_node_address" = b."te_node_address"'||
'	and		b."te_dominio_windows" is not null'||
'	order by 2';

/*Lista os softwares que necessitam de licenças*/

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_id_soft_cap,
		a.ie_tipo_licenca
	from	software a
	where	(a.nr_id_soft_cap IS NOT NULL AND a.nr_id_soft_cap::text <> '')
	and	a.ie_tipo_licenca != 'L'
	and	exists ( SELECT 1
			from	captura_software_detalhe b
			where	b.nr_seq_capt_software = nr_seq_captura_w
			and	a.nr_id_soft_cap = b.nr_id_soft_cap
			and	b.ie_inconsistente = 'A');


BEGIN

select nextval('captura_software_seq') into STRICT nr_seq_captura_w;

/*Inativa as licenças que expiraram a validade e não são pertétua*/

update	licenca_software
set		ie_situacao = 'I'
where	dt_validade < clock_timestamp()
and		ie_situacao = 'A'
and		coalesce(ie_perpetua,'N') = 'N';

insert into captura_software(
	nr_sequencia,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	dt_captura,
	nm_usuario_solic
) values (
	nr_seq_captura_w,
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p
);

commit;


C010 := DBMS_SQL.OPEN_CURSOR;
DBMS_SQL.PARSE(C010, ds_cursor_c02_w, dbms_sql.Native);
DBMS_SQL.DEFINE_COLUMN(C010, 1, nm_software_inv_w,100);
DBMS_SQL.DEFINE_COLUMN(C010, 2, id_software_invent_w);
/*open C02;
loop
fetch C02 into
	nm_software_inv_w,
	id_software_invent_w;*/
/*exit when C02%notfound;*/

retorno_w := DBMS_SQL.execute(c010);
while( DBMS_SQL.FETCH_ROWS(C010) > 0 ) loop
	begin

	DBMS_SQL.COLUMN_VALUE(C010, 1, nm_software_inv_w);
	DBMS_SQL.COLUMN_VALUE(C010, 2, id_software_invent_w);

	nm_software_inv_w := trim(both nm_software_inv_w);

select nextval('captura_software_detalhe_seq') into STRICT nr_seq_captura_det_w;


	insert into captura_software_detalhe(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_capt_software,
			ie_inconsistente,
			nr_seq_inconsistencia,
			ds_software_cap,
			nr_id_soft_cap
		) values (
			nr_seq_captura_det_w,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_captura_w,
			'A',
			null,
			nm_software_inv_w,
			id_software_invent_w
		);

	C030 := DBMS_SQL.OPEN_CURSOR;
	DBMS_SQL.PARSE(C030, ds_cursor_c03_w, dbms_sql.Native);
	DBMS_SQL.DEFINE_COLUMN(C030, 1, nm_estacao_inv_w,255);
	DBMS_SQL.DEFINE_COLUMN(C030, 2, nm_usuario_inv_w,255);
	DBMS_SQL.BIND_VARIABLE(C030, 'ID_SOFTWARE_INVENT', id_software_invent_w);
	retorno_w := DBMS_SQL.execute(c030);

	while( DBMS_SQL.FETCH_ROWS(C030) > 0 ) loop
		begin

		DBMS_SQL.COLUMN_VALUE(C030, 1, nm_estacao_inv_w);
		DBMS_SQL.COLUMN_VALUE(C030, 2, nm_usuario_inv_w);

		nm_estacao_inv_w := trim(both nm_estacao_inv_w);
		nm_usuario_inv_w := trim(both nm_usuario_inv_w);

		select  max(nm_usuario)
		into STRICT	nm_usuario_captura_w
		from	usuario
		where	lower(nm_usuario) = substr(nm_usuario_inv_w,0,position('@' in nm_usuario_inv_w)-1);

		if (coalesce(nm_usuario_captura_w::text, '') = '') then
			select  max(nm_usuario)
			into STRICT	nm_usuario_captura_w
			from	usuario
			where	lower(DS_LOGIN) = substr(nm_usuario_inv_w,0,position('@' in nm_usuario_inv_w)-1);

			if (coalesce(nm_usuario_captura_w::text, '') = '') then
				nm_usuario_captura_w := substr(nm_usuario_inv_w,0,position('@' in nm_usuario_inv_w)-1);
			end if;
		end if;

		insert into captura_soft_det_espec(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				nr_seq_capt_soft_det,
				nm_usuario_captura,
				nm_estacao_captura,
				ie_inconsistente
			) values (
				nextval('captura_soft_det_espec_seq'),
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_captura_det_w,
				nm_usuario_captura_w,
				nm_estacao_inv_w,
				'A'
			);
		end;
	end loop;
	DBMS_SQL.CLOSE_CURSOR(C030);
	end;
end loop;
DBMS_SQL.CLOSE_CURSOR(C010);

commit;
/*Inicio da análise*/

/*Seta como inconsistênte os softwares não cadastrados no Tasy*/

update	captura_software_detalhe a
set		a.ie_inconsistente = 'S',
		a.nr_seq_inconsistencia = 1
where	1=1
and		a.ie_inconsistente = 'A'
and		a.nr_seq_capt_software = nr_seq_captura_w
and	not exists (SELECT 	1
		    from	software b
		    where	b.nr_id_soft_cap = a.nr_id_soft_cap);
/*Seta como INCONSISTENTE as estações que possuem softwares não cadastrados*/

update	captura_soft_det_espec c
set	c.ie_inconsistente = 'S',
	c.nr_seq_inconsistencia = 1
where	exists (SELECT 1
		from 	captura_software_detalhe b
		where	c.nr_seq_capt_soft_det = b.nr_sequencia
		and	b.ie_inconsistente = 'S'
		and	b.nr_seq_inconsistencia = 1
		and	b.nr_seq_capt_software = nr_seq_captura_w);

/*Seta como OK os softwares livres / updates / drivers*/

update	captura_software_detalhe a
set	a.ie_inconsistente = 'N',
	a.nr_seq_inconsistencia = 4
where	a.ie_inconsistente = 'A'
and	a.nr_seq_capt_software = nr_seq_captura_w
and	exists (SELECT 	1
	        from	software b
		where	b.nr_id_soft_cap = a.nr_id_soft_cap
		and	b.ie_tipo_licenca in ('L','U','D'));
/*Seta como software não autorizado*/

update	captura_software_detalhe a
set	a.ie_inconsistente = 'S',
	a.nr_seq_inconsistencia = 6
where	a.ie_inconsistente = 'A'
and	a.nr_seq_capt_software = nr_seq_captura_w
and	exists (SELECT 	1
	        from	software b
		where	b.nr_id_soft_cap = a.nr_id_soft_cap
		and	b.ie_tipo_licenca = 'B');
update	captura_soft_det_espec c
set	c.ie_inconsistente = 'S',
	c.nr_seq_inconsistencia = 6
where	exists (SELECT 1
		from 	captura_software_detalhe b
		where	c.nr_seq_capt_soft_det = b.nr_sequencia
		and	b.ie_inconsistente = 'S'
		and	b.nr_seq_inconsistencia = 6
		and	b.nr_seq_capt_software = nr_seq_captura_w);


/*Seta como OK as estações que possuem softwares livres*/

update	captura_soft_det_espec c
set	c.ie_inconsistente = 'N',
	c.nr_seq_inconsistencia = 4
where	exists (SELECT 1
		from 	captura_software_detalhe b
		where	c.nr_seq_capt_soft_det = b.nr_sequencia
		and	b.ie_inconsistente = 'N'
		and	b.nr_seq_inconsistencia = 4
		and	b.nr_seq_capt_software = nr_seq_captura_w);
commit;

open C04;
loop
fetch C04 into
	nr_seq_software_w,
	nr_id_soft_cap_w,
	ie_tipo_licenca_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin

	select	count(*)
	into STRICT	contador_w
	from	captura_software_detalhe a,
		captura_soft_det_espec b
	where	a.nr_sequencia = b.nr_seq_capt_soft_det
	and	a.nr_seq_capt_software = nr_seq_captura_w
	and	a.nr_id_soft_cap = nr_id_soft_cap_w;

	select	sum(qt_licenca)
	into STRICT	qt_licenca_soft_w
	from	licenca_software
	where	nr_seq_software = nr_seq_software_w
	and		ie_situacao = 'A';

	if ( contador_w > qt_licenca_soft_w ) and ( ie_tipo_licenca_w != 'L' )then
		update	captura_software_detalhe
		set	ie_inconsistente = 'S',
			nr_seq_inconsistencia = 2
		where	nr_seq_capt_software = nr_seq_captura_w
		and	nr_id_soft_cap = nr_id_soft_cap_w;
	else
		update	captura_software_detalhe
		set	ie_inconsistente = 'N',
			nr_seq_inconsistencia = 3
		where	nr_seq_capt_software = nr_seq_captura_w
		and	nr_id_soft_cap = nr_id_soft_cap_w;
	end if;

	select 	count(*)
	into STRICT	contador_w
	from	software_estacao a
	where	a.nr_seq_software = nr_seq_software_w;



	if ( contador_w > 0 ) then


		/*Gera inconsistência para estação que não devem ter software instalado*/

		update	captura_soft_det_espec a
		set	a.ie_inconsistente = 'S',
			a.nr_seq_inconsistencia = 5
		where	not exists (
			SELECT	1
			from	captura_software_detalhe b,
				software_estacao c
			where	b.nr_id_soft_cap	= nr_id_soft_cap_w
			and	b.nr_seq_capt_software 	= nr_seq_captura_w
			and	c.nr_seq_software 	= nr_seq_software_w
			and	a.nr_seq_capt_soft_det  = b.nr_sequencia
			and	a.nm_estacao_captura 	= c.nm_estacao_licenca)
		and exists (
			SELECT 1
			from	captura_software_detalhe b
			where	b.nr_id_soft_cap	= nr_id_soft_cap_w
			and	b.nr_seq_capt_software 	= nr_seq_captura_w
			and	a.nr_seq_capt_soft_det  = b.nr_sequencia);
		/*Registra OK para as estações que podem ter o software instalado*/

		update	captura_soft_det_espec a
		set	a.ie_inconsistente = 'N',
			a.nr_seq_inconsistencia = 3
		where	exists (
			SELECT	1
			from	captura_software_detalhe b,
				software_estacao c
			where	b.nr_id_soft_cap	= nr_id_soft_cap_w
			and	b.nr_seq_capt_software 	= nr_seq_captura_w
			and	c.nr_seq_software 	= nr_seq_software_w
			and	a.nr_seq_capt_soft_det  = b.nr_sequencia
			and	a.nm_estacao_captura = c.nm_estacao_licenca)
		and exists (
			SELECT 1
			from	captura_software_detalhe b
			where	b.nr_id_soft_cap	= nr_id_soft_cap_w
			and	b.nr_seq_capt_software 	= nr_seq_captura_w
			and	a.nr_seq_capt_soft_det  = b.nr_sequencia);

		select 	count(*)
		into STRICT	contador_w
		from	captura_soft_det_espec a,
			captura_software_detalhe b
		where	a.nr_seq_capt_soft_det  = b.nr_sequencia
		and	b.nr_seq_capt_software 	= nr_seq_captura_w
		and	b.nr_id_soft_cap 	= nr_id_soft_cap_w
		and	a.ie_inconsistente 	= 'S';

		if ( contador_w > 0 )  then
			update 	captura_software_detalhe
			set	ie_inconsistente = 'S',
				nr_seq_inconsistencia = 5
			where	nr_seq_capt_software 	= nr_seq_captura_w
			and	nr_id_soft_cap 		= nr_id_soft_cap_w;
		end if;
	else
		/*Registra que não tem inconsistência quando software não restrito por estação*/

		update	captura_soft_det_espec a
		set	a.ie_inconsistente = 'N',
			a.nr_seq_inconsistencia = 3
		where exists (
			SELECT 1
			from	captura_software_detalhe b
			where	b.nr_id_soft_cap	= nr_id_soft_cap_w
			and	b.nr_seq_capt_software 	= nr_seq_captura_w
			and	a.nr_seq_capt_soft_det  = b.nr_sequencia);
	end if;
	end;
end loop;
close C04;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE analisar_captura_software ( nm_usuario_p text) FROM PUBLIC;

