-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE diops_fin_gerar_intercambio ( nr_seq_operadora_p bigint, nr_seq_transacao_p bigint, nr_seq_periodo_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Gerar as informações de valores referentes as contas de intercâmbio conforme 
as regras e período 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
	PLS_GERAR_DIOPS_FINANCEIRO 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
cd_conta_contabil_w		varchar(20);
ie_intercambio_w		varchar(1);
ie_normal_encerramento_w	varchar(1);
cd_ans_w			varchar(20);
vl_intercambio_w		double precision;
qt_ans_w			bigint;
cd_estabelecimento_w		smallint;
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
cd_empresa_w			empresa.cd_empresa%type;

C01 CURSOR FOR 
	SELECT	b.cd_conta_contabil cd_conta_contabil, 
		a.cd_ans, 
		CASE WHEN trunc(c.dt_referencia, 'month')=trunc(dt_periodo_final_w, 'month') THEN  b.vl_saldo  ELSE 0 END , 
		a.ie_intercambio 
	from	ctb_mes_ref			c, 
		ctb_balancete_v			b, 
		diops_conta_intercambio		a 
	where	a.cd_conta_contabil		= b.cd_conta_contabil 
	and	b.nr_seq_mes_ref		= c.nr_sequencia 
	and	a.nr_seq_transacao		= nr_seq_transacao_p 
	and	b.ie_normal_encerramento	= ie_normal_encerramento_w --'N' 
	and	c.dt_referencia between dt_periodo_inicial_w and dt_periodo_final_w 
	and	exists (	SELECT	1 
		from	empresa z, 
			estabelecimento y, 
			diops_estab_adicional x 
		where	x.cd_estabelecimento = a.cd_estabelecimento 
		and	x.cd_estabelecimento = y.cd_estabelecimento 
		and	y.cd_empresa = z.cd_empresa 
		and	z.cd_empresa = cd_empresa_w 
		
union all
 
		select	1 
		 
		where	a.cd_estabelecimento = cd_estabelecimento_w);
	
C03 CURSOR FOR	 
	SELECT	d.cd_conta_contabil, 
		b.cd_ans, 
		obter_valor_classif_tit_rec(c.nr_titulo, d.nr_sequencia, obter_saldo_titulo_receber(c.nr_titulo, dt_periodo_final_w)) vl_titulo, 
		--c.vl_titulo, 
		f.ie_intercambio 
	from	diops_conta_intercambio	f, 
		titulo_receber_classif	d, 
		titulo_receber		c, 
		pessoa_juridica		b, 
		pls_congenere		a 
	where	a.cd_cgc		= b.cd_cgc 
	and	c.cd_cgc		= b.cd_cgc 
	and	d.nr_titulo		= c.nr_titulo 
	and	f.cd_conta_contabil	= d.cd_conta_contabil 
	and	trunc(c.dt_emissao) between dt_periodo_inicial_w and dt_periodo_final_w 
	and	f.nr_seq_transacao	= nr_seq_transacao_p 
		and	exists (	SELECT	1 
			from	empresa z, 
				estabelecimento y, 
				diops_estab_adicional x 
			where	x.cd_estabelecimento = a.cd_estabelecimento 
			and	x.cd_estabelecimento = y.cd_estabelecimento 
			and	y.cd_empresa = z.cd_empresa 
			and	z.cd_empresa = cd_empresa_w 
			
union all
 
			select	1 
			 
			where	a.cd_estabelecimento = cd_estabelecimento_w) 
	and	((coalesce(c.dt_liquidacao::text, '') = '') or (c.dt_liquidacao > dt_periodo_final_w)) 
	
union all
 
	select	d.cd_conta_contabil, 
		b.cd_ans, 
		obter_valor_classif_tit_pagar(c.nr_titulo, d.nr_sequencia, obter_saldo_titulo_pagar(c.nr_titulo, dt_periodo_final_w)) vl_titulo, 
		--c.vl_titulo, 
		f.ie_intercambio 
	from	diops_conta_intercambio	f, 
		titulo_pagar_classif	d, 
		titulo_pagar		c, 
		pessoa_juridica		b, 
		pls_congenere		a	 
	where	a.cd_cgc		= b.cd_cgc 
	and	c.cd_cgc		= b.cd_cgc 
	and	d.nr_titulo		= c.nr_titulo 
	and	f.cd_conta_contabil	= d.cd_conta_contabil 
	and	trunc(c.dt_emissao) between dt_periodo_inicial_w and dt_periodo_final_w 
	and	f.nr_seq_transacao	= nr_seq_transacao_p 
	and	exists (	select	1 
		from	empresa z, 
			estabelecimento y, 
			diops_estab_adicional x 
		where	x.cd_estabelecimento = a.cd_estabelecimento 
		and	x.cd_estabelecimento = y.cd_estabelecimento 
		and	y.cd_empresa = z.cd_empresa 
		and	z.cd_empresa = cd_empresa_w 
		
union all
 
		select	1 
		 
		where	a.cd_estabelecimento = cd_estabelecimento_w) 
	and	((coalesce(c.dt_liquidacao::text, '') = '') or (c.dt_liquidacao > dt_periodo_final_w));
	
C02 CURSOR FOR 
	SELECT	cd_ans, 
		ie_intercambio, 
		coalesce(sum(vl_saldo),0) 
	from	w_diops_fin_intercambio 
	where	nr_seq_periodo	= nr_seq_periodo_p 
	group by 
		cd_ans, 
		ie_intercambio;
			

BEGIN 
/* Obter o período trimestral do DIOPS */
 
begin 
select	coalesce(a.dt_periodo_inicial, ''), 
	coalesce(a.dt_periodo_final, ''), 
	coalesce(a.ie_normal_encerramento, 'N') 
into STRICT	dt_periodo_inicial_w, 
	dt_periodo_final_w, 
	ie_normal_encerramento_w 
from	diops_periodo	a 
where	a.nr_sequencia	= nr_seq_periodo_p;
exception 
when others then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(174234, 'NR_SEQ_OPERADORA=' || nr_seq_operadora_p || ';' || 
							'NR_SEQ_PERIODO=' || nr_seq_periodo_p);
end;	
 
/* Obter o estabelecimento da operadora */
 
begin 
select	a.cd_estabelecimento 
into STRICT	cd_estabelecimento_w 
from	pls_outorgante	a 
where	a.nr_sequencia	= nr_seq_operadora_p;
exception 
when others then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(183309, 'NR_SEQ_OPERADORA=' || nr_seq_operadora_p);
end;	
 
select	b.cd_empresa 
into STRICT	cd_empresa_w 
from	empresa b, 
	estabelecimento a 
where	b.cd_empresa = a.cd_empresa 
and	a.cd_estabelecimento = cd_estabelecimento_w;
 
select	count(1) 
into STRICT	qt_ans_w 
from	diops_conta_intercambio	a 
where	a.nr_seq_transacao	= nr_seq_transacao_p 
and	a.ie_ans_pj		= 'S';
 
if (qt_ans_w = 0) then 
	open C01;
	loop 
	fetch C01 into	 
		cd_conta_contabil_w, 
		cd_ans_w, 
		vl_intercambio_w, 
		ie_intercambio_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		insert into w_diops_fin_intercambio(nr_sequencia, 
			nr_seq_operadora, 
			nr_seq_transacao, 
			cd_ans, 
			vl_saldo, 
			cd_conta_contabil, 
			nr_seq_periodo, 
			dt_atualizacao, 
			nm_usuario, 
			ie_intercambio) 
		values (nextval('w_diops_fin_intercambio_seq'), 
			nr_seq_operadora_p, 
			nr_seq_transacao_p, 
			cd_ans_w, 
			vl_intercambio_w, 
			cd_conta_contabil_w, 
			nr_seq_periodo_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			ie_intercambio_w);
		end;
	end loop;
	close C01;
else 
	open C03;
	loop 
	fetch C03 into	 
		cd_conta_contabil_w, 
		cd_ans_w, 
		vl_intercambio_w, 
		ie_intercambio_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		insert into w_diops_fin_intercambio(nr_sequencia, 
			nr_seq_operadora, 
			nr_seq_transacao, 
			cd_ans, 
			vl_saldo, 
			cd_conta_contabil, 
			nr_seq_periodo, 
			dt_atualizacao, 
			nm_usuario, 
			ie_intercambio) 
		values (nextval('w_diops_fin_intercambio_seq'), 
			nr_seq_operadora_p, 
			nr_seq_transacao_p, 
			cd_ans_w, 
			vl_intercambio_w, 
			cd_conta_contabil_w, 
			nr_seq_periodo_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			ie_intercambio_w);
		end;
	end loop;
	close C03;
end if;
 
open C02;
loop 
fetch C02 into	 
	cd_ans_w, 
	ie_intercambio_w, 
	vl_intercambio_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin 
	insert into diops_fin_intercambio(nr_sequencia, 
		nr_seq_periodo, 
		cd_estabelecimento, 
		nr_seq_operadora, 
		dt_atualizacao, 
		nm_usuario, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		cd_ans, 
		vl_saldo, 
		ie_intercambio) 
	values (nextval('diops_fin_intercambio_seq'), 
		nr_seq_periodo_p, 
		cd_estabelecimento_w, 
		nr_seq_operadora_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		cd_ans_w, 
		vl_intercambio_w, 
		ie_intercambio_w);
	end;
end loop;
close C02;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE diops_fin_gerar_intercambio ( nr_seq_operadora_p bigint, nr_seq_transacao_p bigint, nr_seq_periodo_p bigint, nm_usuario_p text) FROM PUBLIC;

