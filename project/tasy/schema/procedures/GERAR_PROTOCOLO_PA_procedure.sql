-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_protocolo_pa ( CD_PROTOCOLO_P bigint, NR_SEQ_MEDICACAO_P bigint, NR_ATENDIMENTO_P bigint, IE_PRESCRICAO_P text, IE_EVOLUCAO_P text, IE_RECEITA_P text, IE_DIAGNOSTICO_P text, ie_orientacao_alta_p text, ie_orientacao_geral_p text, ie_atestado_p text, ie_justificativa_p text, IE_ANAMNESE_P text, NM_USUARIO_P text, nr_prescricao_p INOUT bigint, ie_item_inconsistente_p INOUT text, ie_sintoma_p text default null, ie_html_p text default 'N') AS $body$
DECLARE


nr_atendimento_w		bigint;
dt_entrada_w			timestamp;
cd_medico_w				varchar(10);
cd_pessoa_fisica_w		varchar(10);
dt_diagnostico_w		timestamp;
dt_prim_hor_w			varchar(10);
nr_sequencia_w			bigint;
nr_seq_consulta_w		bigint;
nr_controle_w			bigint := 0;
nr_contador_w			bigint := 0;
nr_contador_wW			bigint := 0;
nr_prescricao_w			bigint := 0;
nr_seq_anamnese_w		bigint;
nr_horas_validade_w		bigint;
ds_anamnese_w			text;
cd_evolucao_w			bigint;
cd_tipo_evolucao_w		varchar(3);
VarCalculaValidade_w	varchar(3);
VarEstenderPrescricao_w	varchar(3);
varProfAnamnese_w	varchar(3);
ie_tipo_evolucao_w USUARIO.IE_TIPO_EVOLUCAO%type;
ds_evolucao_w			text;
ie_evolucao_clinica_w	varchar(3);
nr_seq_receita_w		bigint;
ds_consulta_w			varchar(32000);
ie_tipo_receita_w		varchar(15);
cd_pessoa_usuario_w		varchar(15);
qt_reg_w				bigint;
cd_especialidade_medica_w	integer;
qt_peso_w				atendimento_sinal_vital.qt_peso%type;

c01 CURSOR FOR
SELECT	count(*)
from	PROTOCOLO_MEDIC_DIETA a
where	a.cd_protocolo = CD_PROTOCOLO_P
and	a.nr_sequencia = NR_SEQ_MEDICACAO_P  

union

SELECT	count(*)
from	PROTOCOLO_MEDIC_SOLUCAO b
where	b.cd_protocolo = CD_PROTOCOLO_P 
and	b.nr_sequencia = NR_SEQ_MEDICACAO_P  

union

select	count(*)
from	PROTOCOLO_MEDIC_MATERIAL c
where	c.cd_protocolo = CD_PROTOCOLO_P
and	c.nr_sequencia = NR_SEQ_MEDICACAO_P   

union

select	count(*)
from	PROTOCOLO_MEDIC_PROC d
where	d.cd_protocolo = CD_PROTOCOLO_P 
and	d.nr_sequencia = NR_SEQ_MEDICACAO_P 

union
 
select	count(*)
from	PROTOCOLO_MEDIC_REC e
where	e.cd_protocolo = CD_PROTOCOLO_P 
and	e.nr_sequencia = NR_SEQ_MEDICACAO_P;


C02 CURSOR FOR
	SELECT	a.*
	from 	med_tipo_consulta t,
		protocolo_consulta a
	where 	a.cd_protocolo	 	= cd_protocolo_p
	  and	nr_seq_medicacao	= nr_seq_medicacao_p
	  and	a.ie_tipo_consulta	= t.nr_sequencia
	  and	a.ie_tipo_consulta	= 8
	  and	t.ie_utilizacao		= 'T'
	  and	not exists (SELECT 1
		from 	med_consulta b
		where	b.nr_atendimento	= nr_atendimento_p
 		and	b.ie_tipo_consulta	= 8);


c03 CURSOR FOR
		SELECT	nextval('med_receita_seq'),
				ds_consulta,
			ie_tipo_receita
		from 	med_tipo_consulta t,
				protocolo_consulta a
		where 	a.cd_protocolo	 	= cd_protocolo_p
		and		nr_seq_medicacao	= nr_seq_medicacao_p
		and		a.ie_tipo_consulta	= t.nr_sequencia
		and		t.ie_utilizacao		= 'T'
		and		a.ie_tipo_consulta 	= 9;

c04 CURSOR FOR
		SELECT	nextval('atestado_paciente_seq'),
				ds_consulta
		from 	med_tipo_consulta t,
				protocolo_consulta a
		where 	a.cd_protocolo	 	= cd_protocolo_p
		and		nr_seq_medicacao	= nr_seq_medicacao_p
		and		a.ie_tipo_consulta	= t.nr_sequencia
		and		t.ie_utilizacao		= 'T'
		and		a.ie_tipo_consulta 	= 15;

c02_w c02%rowtype;


BEGIN

if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (nr_atendimento_p > 0) then

	select
		cd_medico_resp,
		cd_pessoa_fisica,
		dt_entrada
	into STRICT	cd_medico_w,
		cd_pessoa_fisica_w,
		dt_entrada_w
	from	atendimento_paciente
	where	nr_atendimento	= nr_atendimento_p;


	nr_atendimento_w	:= nr_atendimento_p;
	dt_diagnostico_w	:= clock_timestamp();

	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_usuario_w
	from	usuario	
	where	nm_usuario	= nm_usuario_p;

	if (cd_pessoa_usuario_w IS NOT NULL AND cd_pessoa_usuario_w::text <> '') and (obter_se_medico(cd_pessoa_usuario_w,'M')	= 'S')then
		cd_medico_w	:= cd_pessoa_usuario_w;
	end if;


	if (IE_DIAGNOSTICO_P = 'S') then
		begin
		insert into diagnostico_medico(
			nr_atendimento,
			dt_diagnostico,
			ie_tipo_diagnostico,
			cd_medico,
			dt_atualizacao,
			nm_usuario,
			ds_diagnostico)
		values (
			nr_atendimento_w,
			dt_diagnostico_w,
			2,
			cd_medico_w,
			clock_timestamp(),
			nm_usuario_p,
			null);


		insert into diagnostico_doenca(
				cd_doenca,
				nr_atendimento,
				dt_diagnostico,
				dt_atualizacao,
				nm_usuario,
				ds_diagnostico,
				ie_classificacao_doenca,
				ie_situacao,
				ie_tipo_diagnostico,
				cd_medico)
		SELECT		distinct(cd_doenca_cid),
				nr_atendimento_w,
				dt_diagnostico_w,
				clock_timestamp(),
				nm_usuario_p,
				null,
				'P',
				'A',
				2,
				cd_medico_w
		from	Protocolo_doenca
		where	cd_protocolo		= cd_protocolo_p
		  and	nr_seq_medicacao	= nr_seq_medicacao_p
		  and	not exists (
			SELECT 1
			from	diagnostico_doenca x
			where	x.nr_atendimento	= nr_atendimento_w
			  and	x.dt_diagnostico	= dt_diagnostico_w);
		end;
	end if;



	select	coalesce(max(1),0)
	into STRICT	nr_controle_w
	from 	med_consulta b
	where	b.nr_atendimento	= nr_atendimento_p
	and	b.ie_tipo_consulta	= 8;

	if (nr_controle_w = 0) then
		begin
		delete	from med_consulta
		where	nr_atendimento = nr_atendimento_p;

		select nextval('med_consulta_seq')
		into STRICT	nr_seq_consulta_w
		;


		open C02;
		loop
		fetch C02 into	
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			insert into med_consulta(
				nr_sequencia,
				ie_tipo_consulta,
				nr_seq_cliente,
				dt_atualizacao,
				nm_usuario,
				ds_consulta,
				qt_peso,
				qt_imc,
				qt_altura_cm,
				qt_superf_corporia,
				nr_atendimento,
				qt_pa_diastolica,
				qt_pa_sistolica,
				ie_pressao,
				qt_freq_resp,
				qt_temp)
			values (
				nextval('med_consulta_seq'),
				c02_w.ie_tipo_consulta,
				null,
				clock_timestamp(),
				nm_usuario_p,
				c02_w.ds_consulta,
				0,
				0,
				0,
				0,
				nr_atendimento_p,
				0,
				0,
				'S',
				0,
				0);
				null;
			end;
		end loop;
		close C02;
		end;
	end if;

	/* Inserir Med Receita */

	if (IE_RECEITA_P = 'S') then
		begin

		begin
		open C03;
		loop
		fetch C03 into	
			nr_seq_receita_w,
			ds_consulta_w,
			ie_tipo_receita_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			if ((coalesce(ds_consulta_w,null) IS NOT NULL AND (coalesce(ds_consulta_w,null))::text <> '')) then
				insert into med_receita(
					nr_sequencia,
					dt_atualizacao,
					dt_receita,
					nm_usuario,
					ds_receita,
					nr_atendimento_hosp,
					cd_pessoa_fisica,
					cd_medico,
					ie_situacao,
					ie_tipo_receita)
				values (	nr_seq_receita_w,
					clock_timestamp(),
					clock_timestamp(),
					nm_usuario_p,
					ds_consulta_w,
					nr_atendimento_p,
					cd_pessoa_fisica_w,
					cd_medico_w,
					'A',
					ie_tipo_receita_w);

				CALL substituir_macro_protocolo_pa(nr_seq_receita_w, ds_consulta_w, nr_atendimento_p, nm_usuario_p, 'R');
			end if;
			end;
		end loop;
		close C03;
		exception
			when others then
			null;
		end;



		end;
	end if;



	if (ie_orientacao_geral_p = 'S') then
		begin

		begin
		select	nextval('pep_orientacao_geral_seq'),
			ds_consulta
		into STRICT	nr_sequencia_w,
			ds_consulta_w
		from 	med_tipo_consulta t,
			protocolo_consulta a
		where 	a.cd_protocolo	 	= cd_protocolo_p
		and	nr_seq_medicacao	= nr_seq_medicacao_p
		and	a.ie_tipo_consulta	= t.nr_sequencia
		and	t.ie_utilizacao		= 'T'
		and	a.ie_tipo_consulta 	= 13;
		exception
		when others then
			ds_consulta_w	:= null;
		end;

		if ((coalesce(ds_consulta_w,null) IS NOT NULL AND (coalesce(ds_consulta_w,null))::text <> '')) then
			insert into PEP_ORIENTACAO_GERAL(	nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_atendimento,
								cd_profissional,
								ie_situacao,
								DS_ORIENTACAO_GERAL,
								dt_registro,
								cd_pessoa_fisica)
					values (	nr_sequencia_w,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_atendimento_p,
								cd_medico_w,
								'A',
								ds_consulta_w,
								clock_timestamp(),
								cd_pessoa_fisica_w);

			CALL substituir_macro_protocolo_pa(nr_sequencia_w, ds_consulta_w, nr_atendimento_p, nm_usuario_p, 'OG');
		end if;
		end;
	end if;


	if (ie_atestado_p = 'S') then
		begin
		begin
		open C04;
		loop
		fetch C04 into	
			nr_sequencia_w,
			ds_consulta_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			if ((coalesce(ds_consulta_w,null) IS NOT NULL AND (coalesce(ds_consulta_w,null))::text <> '')) then
				insert into ATESTADO_PACIENTE(	nr_sequencia,
								dt_atestado,
								dt_atualizacao,
								nm_usuario,
								nr_atendimento,
								DS_ATESTADO,
								CD_MEDICO,
								cd_pessoa_fisica,
								ie_situacao)
						values (	nr_sequencia_w,	
								clock_timestamp(),
								clock_timestamp(),
								nm_usuario_p,
								nr_atendimento_p,
								ds_consulta_w,
								cd_medico_w,
								cd_pessoa_fisica_w,
								'A');

				CALL substituir_macro_protocolo_pa(nr_sequencia_w, ds_consulta_w, nr_atendimento_p, nm_usuario_p, 'AT');
			end if;
			end;
		end loop;
		close C04;
		exception
			when others then
			null;
		end;

		end;
	end if;



	if (ie_justificativa_p = 'S') then
		begin

		begin
		select	nextval('paciente_justificativa_seq'),
			ds_consulta
		into STRICT	nr_sequencia_w,
			ds_consulta_w
		from 	med_tipo_consulta t,
			protocolo_consulta a
		where 	a.cd_protocolo	 	= cd_protocolo_p
		and	nr_seq_medicacao	= nr_seq_medicacao_p
		and	a.ie_tipo_consulta	= t.nr_sequencia
		and	t.ie_utilizacao		= 'T'
		and	a.ie_tipo_consulta 	= 16;
		exception
		when others then
			ds_consulta_w	:= null;
		end;

		if ((coalesce(ds_consulta_w,null) IS NOT NULL AND (coalesce(ds_consulta_w,null))::text <> '')) then
			insert into PACIENTE_JUSTIFICATIVA(	nr_sequencia,
								DT_JUSTIFICATIVA,
								dt_atualizacao,
								nm_usuario,
								nr_atendimento,
								DS_JUSTIFICATIVA,
								CD_PROFISSIONAL,
								IE_TIPO_JUSTIFICATIVA,
								ie_situacao,
								cd_pessoa_fisica)
						values (	nr_sequencia_w,	
								clock_timestamp(),
								clock_timestamp(),
								nm_usuario_p,
								nr_atendimento_p,
								ds_consulta_w,
								cd_medico_w,
								1,
								'A',
								OBTER_PESSOA_ATENDIMENTO(nr_atendimento_p, 'C'));


			CALL substituir_macro_protocolo_pa(nr_sequencia_w, ds_consulta_w, nr_atendimento_p, nm_usuario_p, 'JU');
		end if;
		end;
	end if;


	if (ie_orientacao_alta_p = 'S') then
		begin

		begin
		select	nextval('atendimento_alta_seq'),
			ds_consulta
		into STRICT	nr_sequencia_w,
			ds_consulta_w
		from 	med_tipo_consulta t,
			protocolo_consulta a
		where 	a.cd_protocolo	 	= cd_protocolo_p
		and	nr_seq_medicacao	= nr_seq_medicacao_p
		and	a.ie_tipo_consulta	= t.nr_sequencia
		and	t.ie_utilizacao		= 'T'
		and	a.ie_tipo_consulta 	= 14;
		exception
		when others then
			ds_consulta_w	:= null;
		end;

		select	max(cd_pessoa_fisica)
		into STRICT	cd_pessoa_usuario_w
		from	usuario	
		where	nm_usuario	= nm_usuario_p;

		if ((coalesce(ds_consulta_w,null) IS NOT NULL AND (coalesce(ds_consulta_w,null))::text <> '')) then
			insert into ATENDIMENTO_ALTA(	nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							nr_atendimento,
							IE_TIPO_ORIENTACAO,
							IE_MEDICO_CIENTE,
							DS_ORIENTACAO,
							DT_REGISTRO,
							ie_situacao,
							cd_profissional)
					values (	nr_sequencia_w,	
							clock_timestamp(),
							nm_usuario_p,
							nr_atendimento_p,
							'M',
							'S',
							ds_consulta_w,
							clock_timestamp(),
							'A',
							cd_pessoa_usuario_w);

			CALL substituir_macro_protocolo_pa(nr_sequencia_w, ds_consulta_w, nr_atendimento_p, nm_usuario_p, 'OA');
		end if;
		end;
	end if;


	if (IE_EVOLUCAO_P = 'S') then
		begin

		begin
		select	nextval('evolucao_paciente_seq'),
			cd_tipo_evolucao,		
			ds_evolucao,
			ie_evolucao_clinica
		into STRICT	cd_evolucao_w,
			cd_tipo_evolucao_w,
			ds_evolucao_w,
			ie_evolucao_clinica_w
		from	protocolo_evolucao
		where 	cd_protocolo	 	= cd_protocolo_p
		and	nr_seq_medicacao	= nr_seq_medicacao_p;
		exception
		when others then
			ds_evolucao_w	:= null;
		end;

		if (ds_evolucao_w IS NOT NULL AND ds_evolucao_w::text <> '') then

			insert into evolucao_paciente(
				cd_evolucao,
				dt_evolucao,
				ie_tipo_evolucao,
				cd_pessoa_fisica,
				dt_atualizacao,
				nm_usuario,
				nr_atendimento,
				ds_evolucao,
				cd_medico,
				ie_evolucao_clinica,
				ie_recem_nato,
				ie_situacao,
                nm_usuario_nrec,
                dt_atualizacao_nrec)
			values (	cd_evolucao_w,
				clock_timestamp(),
				cd_tipo_evolucao_w,
				cd_pessoa_fisica_w,
				clock_timestamp(),
				nm_usuario_p,
				nr_atendimento_p,
				ds_evolucao_w,
				cd_medico_w,
				ie_evolucao_clinica_w,
				'N',
				'A',
                nm_usuario_p,
                clock_timestamp());

			CALL substituir_macro_protocolo_pa(cd_evolucao_w, ds_evolucao_w, nr_atendimento_p, nm_usuario_p, 'E');
		end if;
		end;
	end if;	

	if (IE_ANAMNESE_P = 'S') then
		begin

		begin
		Select	nextval('anamnese_paciente_seq'),
			ds_consulta
		into STRICT	nr_seq_anamnese_w,
			ds_anamnese_w
		from	protocolo_consulta
		where	cd_protocolo 	 = cd_protocolo_p
		and	nr_seq_medicacao = nr_seq_medicacao_p
		and	ie_tipo_consulta = 8;
		exception
		when others then
			ds_anamnese_w	:= null;
		end;

    varProfAnamnese_w := Obter_Param_Usuario(281, 65, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, varProfAnamnese_w);

    if (varProfAnamnese_w = 'S') then
      select max(ie_tipo_evolucao)
      into STRICT ie_tipo_evolucao_w
      from usuario
      where cd_pessoa_fisica = cd_medico_w;
    else
      select max(ie_tipo_evolucao)
      into STRICT ie_tipo_evolucao_w
      from usuario
      where nm_usuario = NM_USUARIO_P;
    end if;
		if (ds_anamnese_w IS NOT NULL AND ds_anamnese_w::text <> '') then
			select	count(*)
			into STRICT	qt_reg_w
			from	medico
			where	cd_pessoa_fisica = Obter_Pessoa_Fisica_Usuario(nm_usuario_p,'C')
			and	ie_situacao = 'A';

			if (qt_reg_w > 0) then

				select	max(obter_especialidade_medico2(Obter_Pessoa_Fisica_Usuario(nm_usuario_p,'C')))
				into STRICT	cd_especialidade_medica_w
				;

			end if;

			Insert into anamnese_paciente(
				nr_sequencia,
				DT_ANANMESE,
				nr_atendimento,
				dt_atualizacao,
				nm_usuario,
				cd_medico,
				ds_anamnese,
				ie_situacao,
				cd_pessoa_Fisica,
				cd_especialidade_medico,
        ie_tipo_evolucao,
        NM_USUARIO_NREC)
			values (	nr_seq_anamnese_w,
				clock_timestamp(),
				nr_atendimento_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_medico_w,	
				ds_anamnese_w,
				'A',
				cd_pessoa_fisica_w,	
				cd_especialidade_medica_w,
        ie_tipo_evolucao_w,
        NM_USUARIO_P);

			CALL substituir_macro_protocolo_pa(nr_seq_anamnese_w, ds_anamnese_w, nr_atendimento_p, nm_usuario_p, 'A');
		end if;
		end;
	end if;	

	if (IE_PRESCRICAO_P = 'S') then
		begin
		select	min(nr_sequencia)
		into STRICT	nr_sequencia_w
		from	protocolo_medicacao
		where	cd_protocolo	= cd_protocolo_p;

		open c01;
		loop
			fetch c01 into	nr_contador_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
			if (nr_contador_w > 0) then
				nr_contador_ww := 1;
			end if;
		end loop;
		close c01;

		if (nr_contador_ww = 1) then
			VarCalculaValidade_w := Obter_Param_Usuario(924, 98, obter_perfil_ativo, nm_usuario_p, 0, VarCalculaValidade_w);
			VarEstenderPrescricao_w := Obter_Param_Usuario(924, 249, obter_perfil_ativo, nm_usuario_p, 0, VarEstenderPrescricao_w);

			dt_prim_hor_w	:= to_char(clock_timestamp(),'hh24:mi');
			if (VarCalculaValidade_w <> 'N') and (VarCalculaValidade_w <> 'R') then

				select	obter_horas_validade_prescr(to_date('30/12/1899 ' || to_char(clock_timestamp(),'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'),nr_atendimento_p,VarEstenderPrescricao_w,'A',clock_timestamp(), null)
				into STRICT	nr_horas_validade_w
				;
			end if;

			select 	coalesce(max(obter_ultimo_sinal_vital_pf(cd_pessoa_fisica_w,'PESO')),0)
			into STRICT 	qt_peso_w
			;

			nr_prescricao_w := gerar_prescricao_protocolo(cd_pessoa_fisica_w, cd_medico_w, nr_atendimento_p, cd_protocolo_p, nr_seq_medicacao_p, 0, qt_peso_w, coalesce(nr_horas_validade_w,24), nr_prescricao_w, clock_timestamp(), null, dt_prim_hor_w, clock_timestamp(), null, 1, 'S', nm_usuario_p, null, null, 'N', null, null, ie_html_p, 'S');
			
			ie_item_inconsistente_p := cpoe_utils_pck.get_item_inconsistente;
			
		end if;
		end;
	end if;

	if (IE_SINTOMA_P = 'S') then
		begin
		insert into ciap_Atendimento(
							nr_sequencia,
							cd_ciap,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							cd_pessoa_fisica,
							nr_atendimento,
							ie_situacao,
							dt_registro,
							ie_nivel_atencao,
							ds_motivo_consulta_long,
							cd_profissional)
					SELECT nextval('ciap_atendimento_seq'),
							cd_ciap,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							cd_pessoa_fisica_w,
							nr_atendimento_p,
							'A',
							clock_timestamp(),
							wheb_assist_pck.get_nivel_atencao_perfil,
							ds_sintoma,
							cd_pessoa_usuario_w
					from	Protocolo_sintoma
					where	cd_protocolo		= cd_protocolo_p
					  and	nr_seq_medicacao	= nr_seq_medicacao_p;
		end;					
	end if;

	CALL Copiar_sinais_vitais(nr_seq_consulta_w, nr_atendimento_p, nm_usuario_p);

end if;

nr_prescricao_p := nr_prescricao_w;

COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_protocolo_pa ( CD_PROTOCOLO_P bigint, NR_SEQ_MEDICACAO_P bigint, NR_ATENDIMENTO_P bigint, IE_PRESCRICAO_P text, IE_EVOLUCAO_P text, IE_RECEITA_P text, IE_DIAGNOSTICO_P text, ie_orientacao_alta_p text, ie_orientacao_geral_p text, ie_atestado_p text, ie_justificativa_p text, IE_ANAMNESE_P text, NM_USUARIO_P text, nr_prescricao_p INOUT bigint, ie_item_inconsistente_p INOUT text, ie_sintoma_p text default null, ie_html_p text default 'N') FROM PUBLIC;

