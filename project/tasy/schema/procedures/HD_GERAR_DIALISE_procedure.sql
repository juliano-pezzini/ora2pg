-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_gerar_dialise ( dt_dialise_p timestamp, cd_pessoa_fisica_p text, nm_usuario_p text, cd_unid_dialise_p text, cd_estabelecimento_p bigint, nr_atendimento_p bigint, qt_peso_pre_p bigint, ie_tipo_dialise_p text, ds_erro_p INOUT text) AS $body$
DECLARE


nr_dialise_pac_w		bigint;
nr_seq_dialise_w		bigint;
ie_obriga_atendimento_w		varchar(1);
nr_seq_dialise_gerada_w		bigint;
cd_pessoa_fisica_w		varchar(10);
nr_prescricao_emergencia_w	bigint;
nr_prescricao_normal_w		bigint;
nr_prescricao_w			bigint;
qt_dialise_atend_w		bigint;
ie_gerar_atend_w		varchar(1);
qt_dialise_w			bigint;
qt_dialise_atend_pac_w		bigint;

ie_gqa_gerar_proto_assist_w varchar(1);
ie_utiliza_regra_sessoes_w	varchar(1);


BEGIN

/* leitura do parâmetro 31 da gestão de hemodiálise */

ie_obriga_atendimento_w := obter_param_usuario(7009, 31, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_obriga_atendimento_w);
qt_dialise_atend_w := obter_param_usuario(7009, 103, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_dialise_atend_w);
ie_gqa_gerar_proto_assist_w := obter_param_usuario(7009, 280, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gqa_gerar_proto_assist_w);

select 	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_dialise_gerada_w
from	hd_dialise
where	coalesce(dt_fim_dialise::text, '') = ''
and	coalesce(dt_cancelamento::text, '') = ''
and	cd_pessoa_fisica = cd_pessoa_fisica_p;


select 	max(cd_pessoa_fisica)
into STRICT	cd_pessoa_fisica_w
from	atendimento_paciente
where 	nr_atendimento = nr_atendimento_p;

select	nextval('hd_dialise_seq')
into STRICT	nr_seq_dialise_w
;

ie_gerar_atend_w	:= 'S';


qt_dialise_atend_pac_w	:= Obter_dialise_atend(nr_seq_dialise_w,nr_atendimento_p) + 1;

select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
into STRICT	ie_utiliza_regra_sessoes_w
from	hd_regra_sessao
where	ie_situacao = 'A';


if (ie_utiliza_regra_sessoes_w = 'N') then

	if (qt_dialise_atend_w > 0) then

		select	count(*)
		into STRICT	qt_dialise_w
		from	hd_dialise
		where	nr_atendimento = nr_atendimento_p
		and 	coalesce(dt_cancelamento::text, '') = ''
		and	nr_sequencia <= nr_seq_dialise_w;

		if (qt_dialise_w >= qt_dialise_atend_w) then
			ie_gerar_atend_w	:= 'N';
		end if;
	end if;
else
	ie_gerar_atend_w := hd_permite_dialise_sessao(nr_atendimento_p,nr_seq_dialise_w);
end if;	
	

if (ie_gerar_atend_w = 'N') then
	ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(277446,null);
elsif (ie_obriga_atendimento_w = 'S') and (coalesce(nr_atendimento_p::text, '') = '') then
	ds_erro_p	:= wheb_mensagem_pck.get_texto(277449,null);
elsif (nr_seq_dialise_gerada_w > 0) then
	ds_erro_p	:= wheb_mensagem_pck.get_texto(277462,'NR_SEQ_DIALISE_GERADA='|| nr_seq_dialise_gerada_w);
elsif (cd_pessoa_fisica_w <> cd_pessoa_fisica_p) then
	ds_erro_p	:= wheb_mensagem_pck.get_texto(277459,null);
else
	/* pega a próxima sequencia para o paciente */

	select	coalesce(max(nr_seq_paciente),0)+1
	into STRICT	nr_dialise_pac_w
	from 	hd_dialise
	where 	cd_pessoa_fisica	= cd_pessoa_fisica_p;

if (coalesce(cd_unid_dialise_p::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(207618);
end if;
	
	/* insere os dados da diálise */

	insert into hd_dialise(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		cd_pessoa_fisica,
		dt_dialise,
		nr_seq_paciente,
		nr_seq_unid_dialise,
		nr_atendimento,
		NR_DIALISE_ATEND_PAC,
		qt_peso_pre,
		ie_tipo_dialise,
		ie_paciente_agudo
	) values (
		nr_seq_dialise_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		cd_pessoa_fisica_p,
		dt_dialise_p,
		nr_dialise_pac_w,
		cd_unid_dialise_p,
		nr_atendimento_p,
		qt_dialise_atend_pac_w,
		qt_peso_pre_p,
		coalesce(ie_tipo_dialise_p,'N'),
		substr(hd_obter_ie_agudo_pac(cd_pessoa_fisica_p),1,1));

	CALL hd_gerar_assinatura(null, null, nr_seq_dialise_w, null, null, null, null, null, null, 'GH', nm_usuario_p, 'N');
	
	select   max(nr_prescricao)
	into STRICT	 nr_prescricao_emergencia_w
	from	 prescr_medica a
	where	 ie_hemodialise	         = 'E'
	and	 trunc(dt_prescricao)	   = trunc(clock_timestamp())
	and	 cd_pessoa_fisica        = cd_pessoa_fisica_p
	and	 (coalesce(dt_liberacao_medico, dt_liberacao) IS NOT NULL AND (coalesce(dt_liberacao_medico, dt_liberacao))::text <> '')
	and	coalesce(dt_fim_prescricao::text, '') = ''
	and	not exists (SELECT 1 from prescr_mat_hor b where b.nr_prescricao = a.nr_prescricao and (nr_seq_dialise IS NOT NULL AND nr_seq_dialise::text <> ''));
	
	select  max(nr_prescricao)
	into STRICT	nr_prescricao_normal_w
	from	prescr_medica
	where	ie_hemodialise	         = 'S'
	and	cd_pessoa_fisica        = cd_pessoa_fisica_p
	and	(coalesce(dt_liberacao_medico, dt_liberacao) IS NOT NULL AND (coalesce(dt_liberacao_medico, dt_liberacao))::text <> '')
	and	coalesce(dt_fim_prescricao::text, '') = '';

	nr_prescricao_w	:= nr_prescricao_normal_w;
	
	if (nr_prescricao_emergencia_w IS NOT NULL AND nr_prescricao_emergencia_w::text <> '') then
		nr_prescricao_w	:= nr_prescricao_emergencia_w;
	end if;
	
	if (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') then
	
		CALL gerar_prescr_mat_hor_dialise(nr_prescricao_w,nr_seq_dialise_w,OBTER_PERFIL_ATIVO,dt_dialise_p,nm_usuario_p);
	
	end if;

	IF ie_gqa_gerar_proto_assist_w = 'S' THEN
		CALL GQA_GERAR_PROTOCOLO_ASSIST(nr_atendimento_p, 8, nm_usuario_p);
	END IF;

commit;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_gerar_dialise ( dt_dialise_p timestamp, cd_pessoa_fisica_p text, nm_usuario_p text, cd_unid_dialise_p text, cd_estabelecimento_p bigint, nr_atendimento_p bigint, qt_peso_pre_p bigint, ie_tipo_dialise_p text, ds_erro_p INOUT text) FROM PUBLIC;

