-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_acumular_saldo_projeto ( nr_seq_mes_ref_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ds_erro_p INOUT text, nr_seq_proj_rec_p bigint) AS $body$
DECLARE

                
    cd_estabelecimento_w	ctb_saldo.cd_estabelecimento%type;
    cd_conta_contabil_w		ctb_saldo.cd_conta_contabil%type;
    cd_classificacao_w		ctb_saldo.cd_classificacao%type;
    cd_classif_w			conta_contabil_classif.cd_classificacao%type;
    cd_empresa_w			conta_contabil.cd_empresa%type;
    vl_debito_w			    ctb_saldo.vl_debito%type;
    vl_credito_w			ctb_saldo.vl_credito%type;
    vl_movimento_w			ctb_saldo.vl_movimento%type;
    vl_encerramento_w		ctb_saldo.vl_encerramento%type;
    vl_saldo_w			    ctb_saldo.vl_saldo%type;
    nr_sequencia_w			ctb_saldo.nr_sequencia%type;
    qt_vigente_w			bigint;
    k				        integer;
    ie_deb_cre_w			ctb_grupo_conta.ie_debito_credito%type;
    ie_deb_cre_ww			ctb_grupo_conta.ie_debito_credito%type;
    ie_tipo_w				ctb_grupo_conta.ie_tipo%type;
    vl_saldo_ww			    ctb_saldo_projeto.vl_saldo%type;
    vl_saldo_erro_ww		double precision;
    ds_erro_w			    varchar(2000);
    ie_compensacao_w		conta_contabil.ie_compensacao%type;
    dt_referencia_w		    ctb_mes_ref.dt_referencia%type;
    ds_erro_ww			    varchar(600);
    vl_enc_debito_w			ctb_saldo_projeto.vl_enc_debito%type;
    vl_enc_credito_w		ctb_saldo_projeto.vl_enc_credito%type;
    cd_classif_ww			conta_contabil_classif.cd_classificacao%type;
    cd_classif_sup_w		ctb_saldo_projeto.cd_classif_sup%type;
    qt_regra_classif_w		bigint;
    nr_nivel_conta_w		ctb_saldo_projeto.nr_nivel_conta%type;
    ds_consiste_w			varchar(4000);
    vl_eliminacao_w			ctb_saldo.vl_eliminacao%type;
    ie_excecao_interna_w    boolean	:= false;

    C01 CURSOR FOR
    SELECT	
        a.cd_estabelecimento,
        a.cd_classificacao,
        a.cd_classif_sup,
        sum(a.vl_debito),
        sum(a.vl_credito),
        sum(a.vl_movimento),
        sum(a.vl_encerramento),
        coalesce(sum(a.vl_enc_debito),0),
        coalesce(sum(a.vl_enc_credito),0),
        sum(a.vl_saldo),
        c.ie_debito_credito,
        b.ie_tipo,
        coalesce(b.ie_compensacao,'N'),
        coalesce(sum(a.vl_eliminacao),0)
    from	
        ctb_grupo_conta c,
        conta_contabil b,
        ctb_saldo_projeto a
    where	substr(obter_se_conta_vigente2(b.cd_conta_contabil, b.dt_inicio_vigencia, b.dt_fim_vigencia,dt_referencia_w),1,1) = 'S'
    and	a.cd_estabelecimento	= coalesce(cd_estabelecimento_p, a.cd_estabelecimento)
    and	a.cd_conta_contabil	= b.cd_conta_contabil
    and	b.cd_grupo		= c.cd_grupo
    and	K			< 20
    and	a.nr_nivel_conta 	= k
    and	(a.cd_classif_sup IS NOT NULL AND a.cd_classif_sup::text <> '')
    and	a.nr_seq_mes_ref	= nr_seq_mes_ref_p
    and a.nr_seq_proj_rec = nr_seq_proj_rec_p
    group by
        a.cd_estabelecimento,
        a.cd_classificacao,
        a.cd_classif_sup,
        c.ie_debito_credito,
        b.ie_tipo,
        coalesce(ie_compensacao,'N'),
        a.nr_seq_proj_rec;


BEGIN
        begin
            select	
                cd_empresa,
                dt_referencia
            into STRICT	
                cd_empresa_w,
                dt_referencia_w
            from	
                ctb_mes_ref
            where	
                nr_sequencia	= nr_seq_mes_ref_p;
            exception
                when no_data_found then
                    cd_empresa_w := null;
                    dt_referencia_w := null;
                when too_many_rows then
                    cd_empresa_w := null;
                    dt_referencia_w := null;
        end;

    select	coalesce(max(1),0)
    into STRICT	qt_regra_classif_w
    
    where exists (	SELECT	1
            from	conta_contabil_classif);

    delete	from ctb_saldo_projeto
    where	nr_seq_mes_ref	= nr_seq_mes_ref_p
    and	cd_estabelecimento	= coalesce(cd_estabelecimento_p, cd_estabelecimento)
    and nr_seq_proj_rec = nr_seq_proj_rec_p
    and	cd_conta_contabil in (
        SELECT	c.cd_conta_contabil
        from	conta_contabil c
        where	c.ie_tipo	= 'T');

    k				:= 20;
    begin
        while k > 0 loop
            open C01;
            loop
            fetch C01 into
                cd_estabelecimento_w,
                cd_classif_w,
                cd_classificacao_w,
                vl_debito_w,
                vl_credito_w,
                vl_movimento_w,
                vl_encerramento_w,
                vl_enc_debito_w,
                vl_enc_credito_w,
                vl_saldo_w,
                ie_deb_cre_w,
                ie_tipo_w,
                ie_compensacao_w,
                vl_eliminacao_w;
            EXIT WHEN NOT FOUND; /* apply on C01 */
                begin

                cd_conta_contabil_w	:= null;
                qt_vigente_w		:= 0;

                if (qt_regra_classif_w > 0) then

                    select	min(a.cd_conta_contabil)
                    into STRICT	cd_conta_contabil_w
                    from	conta_contabil b,
                        conta_contabil_classif a
                    where	a.cd_conta_contabil	= b.cd_conta_contabil
                    and	b.cd_empresa		= cd_empresa_w
                    and	a.dt_inicio_vigencia   <= dt_referencia_w
                    and	coalesce(a.dt_fim_vigencia, dt_referencia_w) >= dt_referencia_w
                    and	substr(obter_se_conta_vigente2(a.cd_conta_contabil, b.dt_inicio_vigencia, b.dt_fim_vigencia, dt_referencia_w),1,1) = 'S'
                    and	a.cd_classificacao	= cd_classificacao_w;

                    if (cd_conta_contabil_w IS NOT NULL AND cd_conta_contabil_w::text <> '') then
                        qt_vigente_w	:= 1;
                    end if;
                end if;


                if (coalesce(cd_conta_contabil_w,'X') = 'X') then

                    select	count(*)
                    into STRICT	qt_vigente_w
                    from	conta_contabil
                    where 	cd_classificacao	= cd_classificacao_w
                    and	cd_empresa		= cd_empresa_w
                    and (substr(obter_se_conta_vigente2(cd_conta_contabil, dt_inicio_vigencia, dt_fim_vigencia, dt_referencia_w),1,1) = 'S');

                    select	min(cd_conta_contabil)
                    into STRICT	cd_conta_contabil_w
                    from	conta_contabil a
                    where 	cd_classificacao	= cd_classificacao_w
                    and	cd_empresa		= cd_empresa_w
                    and	substr(obter_se_conta_vigente2( a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, dt_referencia_w),1,1) = 'S';


                end if;


                if (qt_vigente_w = 0) then /*Coloquei esta consistencia, nos casos de que a conta nao esta na troca e virou o mes*/
                    ds_erro_w		:= WHEB_MENSAGEM_PCK.get_texto(277963) || cd_classif_w ||  '/' || chr(13) || chr(10) || cd_classificacao_w || WHEB_MENSAGEM_PCK.get_texto(277964);
                    k			:= -1;
                elsif (coalesce(cd_conta_contabil_w::text, '') = '') then
                    ds_erro_w		:= WHEB_MENSAGEM_PCK.get_texto(277965) || cd_classif_w || chr(13) ||
                                WHEB_MENSAGEM_PCK.get_texto(277966) || cd_classificacao_w || chr(13) ||
                                WHEB_MENSAGEM_PCK.get_texto(277967) || dt_referencia_w;
                    k			:= -1;
                else
                    begin

                    if (ie_compensacao_w = 'S') and (k = 2) then
                        vl_debito_w		    := 0;
                        vl_credito_w		:= 0;
                        vl_movimento_w	    := 0;
                        vl_encerramento_w	:= 0;
                        vl_saldo_w		    := 0;
                        vl_enc_debito_w		:= 0;
                        vl_enc_credito_w	:= 0;
                        vl_eliminacao_w		:= 0;
                    end if;

                    select	max(b.ie_debito_credito)
                    into STRICT	ie_deb_cre_ww
                    from	ctb_grupo_conta b,
                        conta_contabil a
                    where	a.cd_conta_contabil	= cd_conta_contabil_w
                    and	a.cd_grupo = b.cd_grupo;
                    select	nextval('ctb_saldo_projeto_seq')
                    into STRICT	nr_sequencia_w
;
                    if (ie_deb_cre_w <> ie_deb_cre_ww) then
                        vl_saldo_w		:= vl_saldo_w * -1;
                        vl_movimento_w	:= vl_movimento_w * -1;
                        vl_encerramento_w	:= vl_encerramento_w * -1;
                    end if;

                    cd_classificacao_w	:= substr(ctb_obter_classif_conta(cd_conta_contabil_w, cd_classificacao_w, dt_referencia_w),1,40);
                    cd_classif_sup_w	:= substr(ctb_obter_classif_conta_sup(cd_classificacao_w, dt_referencia_w, cd_empresa_w),1,40);
                    nr_nivel_conta_w	:= ctb_obter_nivel_classif_conta(cd_classificacao_w);

                    begin
                    insert into ctb_saldo_projeto(
                        nr_sequencia,
                        nr_seq_mes_ref,
                        dt_atualizacao,
                        nm_usuario,
                        cd_estabelecimento,
                        cd_conta_contabil,
                        vl_debito,
                        vl_credito,
                        vl_saldo,
                        vl_movimento,
                        vl_encerramento,
                        vl_enc_debito,
                        vl_enc_credito,
                        cd_classificacao,
                        cd_classif_sup,
                        nr_nivel_conta,
                        vl_eliminacao,
                        nr_seq_proj_rec)
                    values (	nr_sequencia_w,
                        nr_seq_mes_ref_p,
                        clock_timestamp(),
                        nm_usuario_p,
                        cd_estabelecimento_w,
                        cd_conta_contabil_w,
                        vl_debito_w,
                        vl_credito_w,
                        vl_saldo_w,
                        vl_movimento_w,
                        vl_encerramento_w,
                        vl_enc_debito_w,
                        vl_enc_credito_w,
                        cd_classificacao_w,
                        cd_classif_sup_w,
                        nr_nivel_conta_w,
                        vl_eliminacao_w,
                        nr_seq_proj_rec_p);
                    exception when unique_violation then
                            if (ie_tipo_w ='A') then
                                vl_saldo_ww	:= vl_saldo_w;
                            else
                                vl_saldo_ww	:= vl_movimento_w;
                            end if;

                            vl_saldo_ww		:= vl_saldo_w;
                            select	sum(vl_saldo)
                            into STRICT	vl_saldo_erro_ww
                            from	ctb_saldo_projeto
                            where	cd_estabelecimento	= cd_estabelecimento_w
                            and	nr_seq_mes_ref	= nr_seq_mes_ref_p
                            and	cd_conta_contabil	= cd_conta_contabil_w;

                            begin
                            update ctb_saldo_projeto
                            set	vl_debito		    = vl_debito + vl_debito_w,
                                vl_credito 	        = vl_credito + vl_credito_w,
                                vl_movimento	    = vl_movimento + vl_movimento_w,
                                vl_encerramento	    = vl_encerramento + vl_encerramento_w,
                                vl_saldo		    = vl_saldo + vl_saldo_ww,
                                vl_enc_debito	    = vl_enc_debito + vl_enc_debito_w,
                                vl_enc_credito	    = vl_enc_credito + vl_enc_credito_w,
                                cd_classificacao    = cd_classificacao_w,
                                cd_classif_sup	    = cd_classif_sup_w,
                                nr_nivel_conta	    = nr_nivel_conta_w,
                                vl_eliminacao	    = coalesce(vl_eliminacao,0) + vl_eliminacao_w,
                                nr_seq_proj_rec     = nr_seq_proj_rec_p
                            where	cd_estabelecimento	= cd_estabelecimento_w
                            and	nr_seq_mes_ref	= nr_seq_mes_ref_p
                            and	cd_conta_contabil	= cd_conta_contabil_w;
                           exception when no_data_found then
                                ie_excecao_interna_w := true;
                                ds_erro_ww	:= sqlerrm(SQLSTATE);
                                ds_consiste_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(277969) || chr(13) ||
                                WHEB_MENSAGEM_PCK.get_texto(277970) || cd_conta_contabil_w || WHEB_MENSAGEM_PCK.get_texto(277971) || nr_seq_mes_ref_p || chr(13) ||
                                WHEB_MENSAGEM_PCK.get_texto(277972) || vl_saldo_erro_ww || WHEB_MENSAGEM_PCK.get_texto(277973) ||  vl_saldo_ww || chr(13) || ds_erro_ww,1,4000);
                                CALL wheb_mensagem_pck.exibir_mensagem_abort(184609,'DS_ERRO_W=' || ds_consiste_w);
                           end;
                    end;
                    end;
                end if;
                end;
            end loop;
            close C01;
            commit;
            K	:= K - 1;
        end loop;
    exception when others then
        if (ie_excecao_interna_w) then
            CALL wheb_mensagem_pck.exibir_mensagem_abort(184609,'DS_ERRO_W=' || ds_consiste_w);
        else
            ds_erro_ww	:= substr(sqlerrm(SQLSTATE), 1, 600);
            CALL wheb_mensagem_pck.exibir_mensagem_abort(1118983, 'DS_ERRO_W=' || ds_erro_ww);
        end if;
    end;

    ds_erro_p	:= ds_erro_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_acumular_saldo_projeto ( nr_seq_mes_ref_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ds_erro_p INOUT text, nr_seq_proj_rec_p bigint) FROM PUBLIC;

