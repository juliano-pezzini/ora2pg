-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_tx_cirur_porte_tempo ( cd_estabelecimento_p bigint, nr_atendimento_p bigint, nr_cirurgia_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_procedimento_w 	bigint;
ie_origem_proced_w      	bigint;
cd_edicao_base_w		integer:= 0;
cd_edicao_amb_w		integer:= 0;
qt_porte_anest_base_w	smallint:= 0;
qt_porte_anest_w		smallint:= 0;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
dt_procedimento_w	timestamp;
cd_edicao_ajuste_w	integer;
qt_porte_maior_w		smallint:= 0;
nr_seq_maior_porte_w	bigint:= 0;
cd_setor_atendimento_w	bigint;
cd_setor_proc_w		bigint;

cd_taxa_porte_w		bigint;
ie_origem_taxa_porte_w	bigint;
ie_tipo_atendimento_w	smallint;

qt_min_duracao_w		bigint;
dt_final_cirurgia_w		timestamp;
qt_taxa_tempo_w		double precision;
i			bigint:= 0;
nr_sequencia_w		bigint;
nr_seq_proc_w		bigint;
nr_doc_convenio_w       	varchar(20) 	:= '';
nr_seq_atepacu_w		bigint;
dt_entrada_unidade_w	timestamp;
cd_senha_w		varchar(30);
nr_prescricao_w		bigint;
cd_cgc_taxa_w		varchar(14);
ie_medico_taxa_w   	varchar(1);
cd_medico_regra_w    	varchar(10);
cd_profissional_w		varchar(10);
cd_medico_executor_w	varchar(10);
QT_MINUTOS_MIN_w	bigint;
nr_seq_classificacao_w	bigint;
cd_tipo_acomodacao_w	smallint;
qt_porte_conversao_w	bigint;
nr_seq_proc_interno_w	bigint;
qt_tolerancia_w		bigint;
nr_seq_pepo_w 		bigint;
dt_fim_processo_w		timestamp;
dt_inicio_processo_w	timestamp;
nr_sequencia_prescricao_w	integer;
ie_origem_inf_w		varchar(1);
cd_cgc_laboratorio_w	varchar(14);
qt_tx_conta_definitiva_w	bigint;
nr_seq_proc_cirur_w	bigint;
cd_setor_prescricao_w	integer;
qt_lanc_taxa_w			bigint;

C01 CURSOR FOR
	SELECT 	a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(somente_numero(a.cd_edicao_amb),0),
		a.dt_procedimento,
		a.cd_setor_atendimento,
		a.nr_sequencia
	from 	procedimento_paciente 	a,
		procedimento 		b
	where 	nr_atendimento = nr_atendimento_p
	and 	nr_cirurgia = nr_cirurgia_p
	and 	a.cd_procedimento = b.cd_procedimento
	and 	a.ie_origem_proced = b.ie_origem_proced
	and 	b.ie_classificacao = 1
	and 	a.ie_origem_proced = 1 -- Somente AMB
	and 	coalesce(cd_motivo_exc_conta::text, '') = '';

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	procedimento_paciente
	where	nr_atendimento = nr_atendimento_p
	and	nr_cirurgia = nr_cirurgia_p
	and	coalesce(ie_tx_cir_tempo,'N') = 'S';


BEGIN

select 	obter_convenio_atendimento(nr_atendimento_p),
	obter_categoria_atendimento(nr_atendimento_p),
	obter_tipo_atendimento(nr_atendimento_p)
into STRICT	cd_convenio_w,
	cd_categoria_w,
	ie_tipo_atendimento_w
;

select 	coalesce(max(cd_edicao_amb_refer),-1)
into STRICT	cd_edicao_base_w
from 	convenio
where 	cd_convenio = cd_convenio_w;

-- (A)  - Verificar o procedimento de maior porte
open C01;
loop
fetch C01 into
	cd_procedimento_w,
	ie_origem_proced_w,
	cd_edicao_amb_w,
	dt_procedimento_w,
	cd_setor_atendimento_w,
	nr_sequencia_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select 	coalesce(obter_Dados_Preco_Proc(cd_estabelecimento_p, cd_convenio_w, cd_categoria_w,
				cd_edicao_amb_w, cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w, 'P'),0)
	into STRICT	qt_porte_anest_w
	;

	begin
	select 	coalesce(a.qt_porte_anestesico,99)
  	into STRICT	qt_porte_anest_base_w
  	from	preco_amb a
 	where	a.cd_edicao_amb      = cd_edicao_base_w
   	and	a.cd_procedimento    = cd_procedimento_w
  	and coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')	=
			(SELECT max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
			from 	preco_amb b
			where 	b.cd_edicao_amb		= cd_edicao_base_w
			and	b.cd_procedimento	= cd_procedimento_w
			and	coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days') <= dt_procedimento_w);
	exception
	  	when others then

			qt_porte_anest_base_w:= 99;

			select	count(*)
			into STRICT	qt_porte_conversao_w
			from	conv_porte_conversao
			where	cd_convenio = cd_convenio_w;

			if (qt_porte_conversao_w > 0) then

				select	Obter_Conv_Porte_Conversao(cd_convenio_w,nr_cirurgia_p)
				into STRICT	qt_porte_anest_base_w
				;

			end if;

	end;

	if (qt_porte_anest_base_w <> 99) then
		qt_porte_anest_w:= qt_porte_anest_base_w;
	end if;

	if (qt_porte_anest_w >= qt_porte_maior_w) then
		qt_porte_maior_w:= qt_porte_anest_w;
		cd_setor_proc_w:= cd_setor_atendimento_w;
		nr_seq_proc_w:= nr_sequencia_w;
	end if;

	end;
end loop;
close C01;

select	max(coalesce(cd_tipo_acomodacao,0))
into STRICT	cd_tipo_acomodacao_w
from	atend_paciente_unidade
where	nr_seq_interno 	=	(SELECT	max(nr_seq_atepacu)
				from	procedimento_paciente
				where	nr_sequencia = nr_seq_proc_w);

-- (B)  - Buscar a taxa correspondente ao porte
SELECT * FROM define_taxa_porte(cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, qt_porte_maior_w, cd_setor_proc_w, ie_tipo_atendimento_w, cd_taxa_porte_w, ie_origem_taxa_porte_w, cd_tipo_acomodacao_w, nr_seq_proc_interno_w, qt_lanc_taxa_w) INTO STRICT cd_taxa_porte_w, ie_origem_taxa_porte_w, nr_seq_proc_interno_w, qt_lanc_taxa_w;

-- (C)  - Calcular o tempo da cirurgia
select		nr_min_duracao_real,
		coalesce(dt_fim_cirurgia,clock_timestamp()),
		nr_seq_pepo
into STRICT		qt_min_duracao_w,
		dt_final_cirurgia_w,
		nr_seq_pepo_w
from		cirurgia
where		nr_cirurgia	= nr_cirurgia_p;

if (coalesce(nr_seq_pepo_w,0) > 0) then
	select 	max(dt_registro)
	into STRICT	dt_inicio_processo_w
	from   	evento_cirurgia_paciente a,
		evento_cirurgia b
	where  	a.nr_seq_evento = b.nr_sequencia
	and	a.nr_seq_pepo 	= nr_seq_pepo_w
	and	coalesce(b.ie_situacao,'A') = 'A'
	and	coalesce(a.ie_situacao,'A') = 'A'
	and	coalesce(b.ie_inicio_processo_cirurgico,'N') = 'S';

	select 	max(dt_registro)
	into STRICT	dt_fim_processo_w
	from   	evento_cirurgia_paciente a,
		evento_cirurgia b
	where  	a.nr_seq_evento = b.nr_sequencia
	and	a.nr_seq_pepo 	= nr_seq_pepo_w
	and	coalesce(b.ie_situacao,'A') = 'A'
	and	coalesce(a.ie_situacao,'A') = 'A'
	and	coalesce(b.ie_fim_processo_cirurgico,'N') = 'S';

	if (dt_inicio_processo_w IS NOT NULL AND dt_inicio_processo_w::text <> '') and (dt_fim_processo_w IS NOT NULL AND dt_fim_processo_w::text <> '') then
		qt_min_duracao_w 	:= (dt_fim_processo_w - dt_inicio_processo_w) * 1440;
		dt_final_cirurgia_w 	:= dt_fim_processo_w;
	end if;
end if;

-- (D) - Verificar a regra por tipo de atendimento
select 	max(QT_MINUTOS_MIN),
	coalesce(max(qt_tolerancia),0)
into STRICT	QT_MINUTOS_MIN_w,
	qt_tolerancia_w
from 	conv_regra_taxa_tempo
where 	cd_convenio = cd_convenio_w
and 	ie_tipo_atendimento = ie_tipo_atendimento_w
and coalesce(cd_estabelecimento, cd_estabelecimento_p) = coalesce(cd_estabelecimento_p,0);

if (coalesce(QT_MINUTOS_MIN_w,0) > 0) and (qt_min_duracao_w < QT_MINUTOS_MIN_w) then
	qt_min_duracao_w:= QT_MINUTOS_MIN_w;
end if;

-- (E) - Lançar a taxa 'X' vezes com qtde 1 e atualizar o preço a cada lançamento
qt_taxa_tempo_w:= dividir(qt_min_duracao_w - qt_tolerancia_w, 60); --transformar Minutos em Horas
if (mod(qt_taxa_tempo_w,2) > 0) and (qt_taxa_tempo_w <> 1) then
	qt_taxa_tempo_w:= trunc(qt_taxa_tempo_w) + 1;
end if;

begin
select	a.cd_setor_atendimento,
	a.nr_doc_convenio,
	a.nr_prescricao,
	a.cd_senha,
	dt_entrada_unidade,
	nr_seq_atepacu,
	cd_medico_executor,
	nr_seq_classificacao,
	a.nr_sequencia_prescricao
into STRICT	cd_setor_atendimento_w,
	nr_doc_convenio_w,
	nr_prescricao_w,
	cd_senha_w,
	dt_entrada_unidade_w,
	nr_seq_atepacu_w,
	cd_medico_executor_w,
	nr_seq_classificacao_w,
	nr_sequencia_prescricao_w
from	procedimento_paciente a,
	atendimento_paciente b
where 	a.nr_sequencia		= nr_seq_proc_w
and	a.nr_atendimento	= b.nr_atendimento;
exception
	when others then
		nr_seq_proc_w:= 0;
end;

if (nr_seq_proc_w > 0) then

	if (coalesce(nr_prescricao_w,0) > 0) then

		select	max(cd_setor_atendimento)
		into STRICT	cd_setor_prescricao_w
		from	prescr_medica
		where	nr_prescricao = nr_prescricao_w;

		if (coalesce(nr_sequencia_prescricao_w,0) > 0) then
			select	max(ie_origem_inf),
				max(cd_cgc_laboratorio)
			into STRICT	ie_origem_inf_w,
				cd_cgc_laboratorio_w
			from	prescr_procedimento
			where	nr_prescricao = nr_prescricao_w
			and	nr_sequencia = nr_sequencia_prescricao_w;
		end if;

	end if;

	SELECT * FROM consiste_medico_executor(cd_estabelecimento_p, cd_convenio_w, cd_setor_atendimento_w, cd_taxa_porte_w, ie_origem_taxa_porte_w, ie_tipo_atendimento_w, null, null, ie_medico_taxa_w, cd_cgc_taxa_w, cd_medico_regra_w, cd_profissional_w, cd_medico_executor_w, dt_procedimento_w, nr_seq_classificacao_w, ie_origem_inf_w, cd_cgc_laboratorio_w, cd_setor_prescricao_w) INTO STRICT ie_medico_taxa_w, cd_cgc_taxa_w, cd_medico_regra_w, cd_profissional_w;

	select	count(*)
	into STRICT	qt_tx_conta_definitiva_w
	from	procedimento_paciente a,
		conta_paciente b
	where	a.nr_interno_conta = b.nr_interno_conta
	and	a.nr_atendimento = nr_atendimento_p
	and	a.nr_cirurgia = nr_cirurgia_p
	and	b.ie_status_acerto = 2
	and	coalesce(a.ie_tx_cir_tempo,'N') = 'S';

	if (coalesce(qt_tx_conta_definitiva_w,0) = 0) then

		open C02;
		loop
		fetch C02 into
			nr_seq_proc_cirur_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			update	procedimento_paciente
			set	nr_seq_proc_princ  = NULL
			where	nr_atendimento = nr_atendimento_p
			and	nr_seq_proc_princ = nr_seq_proc_cirur_w;

			end;
		end loop;
		close C02;

		delete	from procedimento_paciente
		where	nr_atendimento = nr_atendimento_p
		and	nr_cirurgia = nr_cirurgia_p
		and	coalesce(ie_tx_cir_tempo,'N') = 'S';

	end if;

	i:= 0;
	while	qt_taxa_tempo_w > i loop
		begin

		select 	nextval('procedimento_paciente_seq')
		into STRICT 	nr_sequencia_w
		;

		insert into procedimento_paciente(nr_sequencia,nr_atendimento, dt_entrada_unidade, cd_procedimento, dt_procedimento,
			qt_procedimento, dt_atualizacao, nm_usuario, cd_convenio, cd_categoria,
			vl_procedimento, vl_medico, vl_anestesista, vl_materiais, dt_acerto_conta,
			vl_auxiliares, vl_custo_operacional, tx_medico, tx_anestesia,
			nr_doc_convenio, dt_conta, cd_setor_atendimento, ie_origem_proced,
			tx_procedimento, ie_valor_informado, nr_prescricao, dt_prescricao,
      			nr_cirurgia, cd_medico_executor, cd_medico,cd_procedimento_princ,
			dt_procedimento_princ, nr_seq_proc_princ, cd_cgc_prestador,qt_porte_anestesico,
			nr_seq_atepacu, ie_auditoria, ie_via_acesso, cd_senha, cd_pessoa_fisica, nr_seq_proc_interno,
			ie_tx_cir_tempo)
			values (nr_sequencia_w,nr_atendimento_p, dt_entrada_unidade_w, cd_taxa_porte_w, dt_procedimento_w,
			1, clock_timestamp(), 'Tasy', cd_convenio_w, cd_categoria_w,
			0, 0, 0, 0, null, 0, 0, 0, 0, nr_doc_convenio_w, dt_procedimento_w,
			cd_setor_atendimento_w,ie_origem_taxa_porte_w,100,'N',nr_prescricao_w,
			null, nr_cirurgia_p,null,null, null,null, null,
			coalesce(cd_cgc_taxa_w, obter_cgc_estabelecimento(cd_estabelecimento_p)),null, nr_seq_atepacu_w, 'N', null, cd_senha_w, cd_profissional_w, nr_seq_proc_interno_w,
			'S');

		CALL Atualiza_Preco_Servico(nr_sequencia_w,'Tasy');
		CALL gerar_lancamento_automatico(nr_atendimento_p, null, 34, nm_usuario_p, nr_sequencia_w,  null,null,null,null,null);

		i:= i + 1;
		end;
	end loop;

	end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_tx_cirur_porte_tempo ( cd_estabelecimento_p bigint, nr_atendimento_p bigint, nr_cirurgia_p bigint, nm_usuario_p text) FROM PUBLIC;

