-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_lancar_tx_proc_opm_fat ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_analise_pos_p pls_conta.nr_seq_analise%type, nr_seq_congenere_p pls_congenere.nr_sequencia%type, ie_cobrar_mensalidade_p pls_conta_pos_estabelecido.ie_cobrar_mensalidade%type, ie_origem_valor_pos_p text, ie_preco_plano_p text, nm_usuario_p text, ie_lanc_tx_opm_pct_fechado_p pls_parametro_faturamento.ie_lancar_tx_opm_pac_fechado%type default 'N') AS $body$
DECLARE


ie_tipo_congenere_w     pls_congenere.ie_tipo_congenere%type;
nr_seq_analise_conta_w      pls_conta.nr_seq_analise%type;
vl_material_w       pls_conta_pos_estabelecido.vl_materiais%type;
dt_atendimento_referencia_w   pls_conta.dt_atendimento_referencia%type;
nr_seq_conta_proc_nova_w    pls_conta_proc.nr_sequencia%type;
ie_tipo_guia_w        pls_conta_pos_estabelecido.ie_tipo_guia%type;
ie_tipo_protocolo_w     pls_conta_pos_estabelecido.ie_tipo_protocolo%type;
nr_seq_segurado_w     pls_conta_pos_estabelecido.nr_seq_segurado%type;
ie_tipo_segurado_w      pls_conta_pos_estabelecido.ie_tipo_segurado%type;
dt_mes_competencia_w      pls_conta_pos_estabelecido.dt_mes_competencia%type;
nr_seq_protocolo_w      pls_conta_pos_estabelecido.nr_seq_protocolo%type;
nr_seq_prestador_prot_w     pls_conta_pos_estabelecido.nr_seq_prestador_atend%type;
nr_seq_prestador_exec_w     pls_conta_pos_estabelecido.nr_seq_prestador_exec%type;
ie_tipo_prestador_atend_w   pls_conta_pos_estabelecido.ie_tipo_prestador_atend%type;
ie_tipo_prestador_exec_w    pls_conta_pos_estabelecido.ie_tipo_prestador_exec%type;
vl_beneficiario_w     pls_conta_pos_estabelecido.vl_beneficiario%type;
nr_seq_regra_cooperado_w    pls_conta_proc.nr_seq_regra_cooperado%type;
ie_ato_cooperado_w      pls_conta_proc.ie_ato_cooperado%type;
ie_medico_exec_coope_w      varchar(10);
ie_medico_solic_coope_w     varchar(10);
ie_finaliza_w       varchar(1);
cd_medico_exec_w      pls_conta.cd_medico_executor%type;
cd_medico_solicitante_w     pls_conta.cd_medico_solicitante%type;
nr_seq_prestador_solic_w    pls_conta.nr_seq_prestador_solic_ref%type;
ie_tipo_despesa_w     pls_conta_proc.ie_tipo_despesa%type;
nr_seq_ops_congenere_w      pls_congenere.nr_sequencia%type;
nr_seq_intercambio_w      pls_intercambio.nr_sequencia%type;
vl_lib_taxa_material_w      pls_conta_pos_estabelecido.vl_lib_taxa_material%type;
vl_administracao_w      pls_conta_pos_estabelecido.vl_administracao%type;
tx_administracao_w      pls_conta_pos_estabelecido.tx_administracao%type;
vl_taxa_material_w      pls_conta_pos_estabelecido.vl_taxa_material%type;
ie_origem_conta_w     pls_conta.ie_origem_conta%type;
nr_seq_contrato_w     pls_segurado.nr_seq_contrato%type;
ie_grupo_contrato_w     varchar(1) := 'S';
qt_registro_a520_w      integer;
qt_pos_envio_a520_w     integer;
ie_executa_w        varchar(1) := 'S';
vl_opme_pacote_w	pls_pacote_material.vl_negociado%type;
tx_adm_w			pls_conta_pos_estabelecido.vl_administracao%type;
vl_tx_opme_pacote_w	pls_pacote_material.vl_negociado%type;

C01 CURSOR FOR
  SELECT  nr_seq_conta_proc
  from  pls_conta_pos_estabelecido
  where nr_seq_analise  = nr_seq_analise_pos_p
  and (nr_seq_regra_tx_opme IS NOT NULL AND nr_seq_regra_tx_opme::text <> '');

C02 CURSOR(  ie_tipo_congenere_pc    pls_congenere.ie_tipo_congenere%type,
    dt_atendimento_pc   pls_conta.dt_atendimento_referencia%type,
    nr_seq_cooperativa_pc   pls_congenere.nr_sequencia%type,
    nr_seq_ops_congenere_pc   pls_congenere.nr_sequencia%type,
    nr_seq_intercambio_pc   pls_intercambio.nr_sequencia%type,
    nr_seq_contrato_pc    pls_segurado.nr_seq_contrato%type)FOR
  SELECT  ie_origem_proced,
    cd_procedimento,
    tx_comercializacao,
    nr_sequencia nr_seq_tx_opme,
    coalesce(ie_aplica_tx_adm,'S') ie_aplica_tx_adm,
    nr_seq_grupo_contrato
  from  pls_regra_tx_opme
  where ((ie_tipo_congenere   = ie_tipo_congenere_pc) or (ie_tipo_congenere = 'A'))
  and dt_atendimento_pc   between dt_inicio_vigencia and dt_fim_vigencia_ref
  and ((coalesce(nr_seq_cooperativa::text, '') = '') or (nr_seq_cooperativa   = nr_seq_cooperativa_pc))
  and ((coalesce(nr_seq_ops_congenere::text, '') = '') or (nr_seq_ops_congenere = nr_seq_ops_congenere_pc))
  and ((coalesce(nr_seq_intercambio::text, '') = '') or (nr_seq_intercambio   = nr_seq_intercambio_pc))
  and ((coalesce(nr_seq_contrato::text, '') = '') or (nr_seq_contrato    = nr_seq_contrato_pc))
  order by
    nr_ordem_execucao desc,
    nr_sequencia;
BEGIN
ie_finaliza_w := 'N';

if (ie_origem_valor_pos_p = 'P') then

  select  CASE WHEN count(1)=0 THEN  'S'  ELSE 'N' END
  into STRICT    ie_executa_w
  from  pls_conta_pos_estab_prev
  where   nr_seq_conta = nr_seq_conta_P
  and   (nr_lote_contabil_prov IS NOT NULL AND nr_lote_contabil_prov::text <> '');

end if;
if  (( ie_origem_valor_pos_p not in ('RC','F')) and (ie_executa_w = 'S')) then

  select  max(ie_tipo_congenere)
  into STRICT  ie_tipo_congenere_w
  from  pls_congenere
  where nr_sequencia  = nr_seq_congenere_p;

  select  dt_atendimento,
    ie_tipo_guia,
    ie_tipo_protocolo,
    nr_seq_segurado,
    ie_tipo_segurado,
    dt_mes_competencia,
    nr_seq_protocolo,
    nr_seq_prestador_prot,
    nr_seq_prestador_exec,
    cd_medico_executor,
    cd_medico_solicitante,
    nr_seq_prestador_solic,
    nr_seq_analise,
    ie_origem_conta
  into STRICT  dt_atendimento_referencia_w,
    ie_tipo_guia_w,
    ie_tipo_protocolo_w,
    nr_seq_segurado_w,
    ie_tipo_segurado_w,
    dt_mes_competencia_w,
    nr_seq_protocolo_w,
    nr_seq_prestador_prot_w,
    nr_seq_prestador_exec_w,
    cd_medico_exec_w,
    cd_medico_solicitante_w,
    nr_seq_prestador_solic_w,
    nr_seq_analise_conta_w,
    ie_origem_conta_w
  from  pls_conta_v
  where nr_sequencia  = nr_seq_conta_p;

  select  nr_seq_intercambio,
    nr_seq_ops_congenere,
    nr_seq_contrato
  into STRICT  nr_seq_intercambio_w,
    nr_seq_ops_congenere_w,
    nr_seq_contrato_w
  from  pls_segurado
  where nr_sequencia = nr_seq_segurado_w;

  for r_C02_w in C02(ie_tipo_congenere_w, dt_atendimento_referencia_w, nr_seq_congenere_p, nr_seq_ops_congenere_w, nr_seq_intercambio_w, nr_seq_contrato_w) loop
    ie_grupo_contrato_w   := 'S';

    for r_c01_w in C01 loop
      delete  FROM pls_fatura_proc
      where nr_seq_conta_proc = r_c01_w.nr_seq_conta_proc;

      -- levanta se existe pos de A520, e se o pos de faturamento esta em lote A520
      select  sum(qt_pos_envio_A520),
        sum(qt_pos_fat_proc_A520)
      into STRICT  qt_registro_a520_w,
        qt_pos_envio_a520_w
      from (  SELECT  count(1) qt_pos_envio_A520,
          0 qt_pos_fat_proc_A520
        from  pls_conta_pos_estabelecido  a
        where a.nr_seq_conta_proc   = r_c01_w.nr_seq_conta_proc
        and a.ie_status_faturamento   = 'A'
        
union all

        SELECT  0 qt_pos_envio_A520,
          count(1) qt_pos_fat_proc_A520
        from  pls_conta_pos_estabelecido  a,
          ptu_aviso_proc_item   b
        where b.nr_seq_conta_pos_estab  = a.nr_sequencia
        and a.ie_status_faturamento   != 'A'
        and a.nr_seq_conta_proc   = r_c01_w.nr_seq_conta_proc
        and coalesce(a.nr_seq_proc_rec::text, '') = ''
        and coalesce(a.nr_seq_disc_proc::text, '') = '') alias6;

      -- se existir pos de faturamento em lote A520, e nao existir o respectivo pos para envio A520,
      -- o pos de faturamento sera atualizado para "Envio A520", evitando erro de FK, mantendo o historico
      -- e permitindo a rotina gerar o pos corretamente para pacote.
      if (qt_registro_a520_w = 0) and (qt_pos_envio_a520_w > 0) then

        update  pls_conta_pos_estabelecido
        set ie_status_faturamento = 'A',
          ie_cobrar_mensalidade = 'A'
        where nr_seq_conta_proc = r_c01_w.nr_seq_conta_proc
        and coalesce(nr_seq_proc_rec::text, '') = ''
        and coalesce(nr_seq_disc_proc::text, '') = '';

        -- apaga o contabil do custos, se for para mudar o pos para A520
        -- testa se ja nao esta em um lote contabil
        delete  FROM pls_conta_pos_estab_contab    a
        where a.nr_seq_conta_proc     = r_c01_w.nr_seq_conta_proc
        and coalesce(a.nr_lote_contabil, 0)    = 0
        and coalesce(a.nr_lote_contabil_prov, 0)   = 0
        and coalesce(a.nr_lote_contabil_cancel, 0) = 0
        and coalesce(nr_seq_disc_proc::text, '') = ''
        and coalesce(nr_seq_proc_rec::text, '') = '';

      end if;

      delete  FROM pls_conta_pos_estabelecido
      where nr_seq_conta_proc = r_c01_w.nr_seq_conta_proc
      and ie_status_faturamento != 'A'
      and ie_cobrar_mensalidade != 'A';

      delete  FROM pls_analise_fluxo_ocor
      where   NR_SEQ_FLUXO_ITEM     in (  SELECT  nr_sequencia
                from  pls_analise_fluxo_item
                where nr_seq_conta_proc = r_c01_w.nr_seq_conta_proc);

      delete  FROM pls_analise_fluxo_item
      where nr_seq_conta_proc = r_c01_w.nr_seq_conta_proc;

      delete  FROM pls_ocorrencia_benef
      where nr_seq_conta_proc = r_c01_w.nr_seq_conta_proc;

      delete  FROM pls_hist_analise_conta
      where nr_seq_conta_proc = r_c01_w.nr_seq_conta_proc;

      delete  FROM pls_conta_proc  a
      where a.nr_sequencia    = r_c01_w.nr_seq_conta_proc
      and not exists (  SELECT  1
            from  pls_conta_pos_estabelecido  x
            where x.nr_seq_conta_proc   = a.nr_sequencia
            and x.nr_seq_conta      = a.nr_seq_conta
            and x.ie_status_faturamento   = 'A'
            and x.ie_cobrar_mensalidade   = 'A');


    end loop;

    if (ie_origem_valor_pos_p != 'P') then

      select  sum(coalesce(b.vl_materiais,0)),
        sum(coalesce(b.vl_lib_taxa_material,0)),
        sum(coalesce(b.vl_administracao,0)),
        max(b.tx_administracao),
        sum(coalesce(b.vl_taxa_material,0))
      into STRICT  vl_material_w,
        vl_lib_taxa_material_w,
        vl_administracao_w,
        tx_administracao_w,
        vl_taxa_material_w
      from  pls_conta_pos_estabelecido  b,
        pls_conta_mat_v     a
      where a.nr_seq_analise    = nr_seq_analise_conta_w
      and b.nr_seq_conta_mat    = a.nr_sequencia
      and a.ie_tipo_despesa   = '7'
      and b.ie_status_faturamento   in ('D','L','P','U','M');
	
	if (ie_lanc_tx_opm_pct_fechado_p = 'S') then
  
		select  sum(coalesce(d.vl_negociado,0)),
				max(b.tx_administracao)
		into STRICT  	vl_opme_pacote_w,
				tx_adm_w
		from  	pls_conta_pos_estabelecido  b,
				pls_conta_proc_v      	a,
				pls_pacote_tipo_acomodacao c,
				pls_pacote_material d
		where  	a.nr_seq_analise    = nr_seq_analise_conta_w
		and  	b.nr_seq_conta_proc  	= a.nr_sequencia
		and 	c.nr_sequencia = a.nr_seq_regra_pct_fat
		and 	d.nr_seq_composicao = c.nr_seq_composicao
		and  	a.ie_tipo_despesa    	= '4'
		and 	d.ie_tipo_despesa = '7'
		and  	b.ie_status_faturamento   in ('D','L','P','U')
		and     ((coalesce(d.nr_seq_prestador::text, '') = '') or (d.nr_seq_prestador = a.nr_seq_prestador_exec))
		and     ((coalesce(d.ie_tipo_guia::text, '') = '') or (d.ie_tipo_guia = a.ie_tipo_guia))
		and 	d.ie_situacao = 'A';
		
		tx_administracao_w := coalesce(coalesce(tx_administracao_w, tx_adm_w), 0);
		vl_material_w := coalesce(vl_material_w,0) + coalesce(vl_opme_pacote_w,0);
		
		vl_tx_opme_pacote_w := vl_opme_pacote_w * (tx_administracao_w / 100);
		vl_lib_taxa_material_w := coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_tx_opme_pacote_w,0);
	end if;
		
		
    else

		select  sum(coalesce(b.vl_materiais,0)),
				sum(coalesce(b.vl_lib_taxa_material,0)),
				sum(coalesce(b.vl_administracao,0)),
				max(b.tx_administracao),
				sum(coalesce(b.vl_taxa_material,0))
		into STRICT  	vl_material_w,
				vl_lib_taxa_material_w,
				vl_administracao_w,
				tx_administracao_w,
				vl_taxa_material_w
		from  	pls_conta_pos_estab_prev  b,
				pls_conta_mat_v     a
		where a.nr_seq_analise    = nr_seq_analise_conta_w
		and b.nr_seq_conta_mat    = a.nr_sequencia
		and a.ie_tipo_despesa   = '7'
		and b.ie_status_faturamento   in ('D','L','P','U','M');
	
		if (ie_lanc_tx_opm_pct_fechado_p = 'S') then
			select  sum(coalesce(d.vl_negociado,0)),
					max(b.tx_administracao)
			into STRICT  	vl_opme_pacote_w,
					tx_adm_w
			from  	pls_conta_pos_estab_prev  b,
					pls_conta_proc_v      	a,
					pls_pacote_tipo_acomodacao c,
					pls_pacote_material d
			where  	a.nr_seq_analise    = nr_seq_analise_conta_w
			and  	b.nr_seq_conta_proc  	= a.nr_sequencia
			and 	c.nr_sequencia = a.nr_seq_regra_pct_fat
			and 	d.nr_seq_composicao = c.nr_seq_composicao
			and  	a.ie_tipo_despesa    	= '4'
			and 	d.ie_tipo_despesa = '7'
			and  	b.ie_status_faturamento   in ('D','L','P','U')
			and     ((coalesce(d.nr_seq_prestador::text, '') = '') or (d.nr_seq_prestador = a.nr_seq_prestador_exec))
			and     ((coalesce(d.ie_tipo_guia::text, '') = '') or (d.ie_tipo_guia = a.ie_tipo_guia))
			and 	d.ie_situacao = 'A';
			
			tx_administracao_w := coalesce(coalesce(tx_administracao_w, tx_adm_w), 0);
			vl_material_w := coalesce(vl_material_w,0) + coalesce(vl_opme_pacote_w,0);
			
			vl_tx_opme_pacote_w := vl_opme_pacote_w * (tx_administracao_w / 100);
			vl_lib_taxa_material_w := coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_tx_opme_pacote_w,0);
		end if;

    end if;

    if (coalesce(r_c02_w.nr_seq_grupo_contrato,0) > 0) then
      if  ((coalesce(nr_seq_contrato_w,0)  > 0) or (coalesce(nr_seq_intercambio_w,0) > 0)) then
        ie_grupo_contrato_w := pls_se_grupo_preco_contrato(r_c02_w.nr_seq_grupo_contrato, nr_seq_contrato_w, nr_seq_intercambio_w);
      else
        ie_grupo_contrato_w := 'N';
      end if;
    end if;

    if (vl_material_w > 0) and (ie_grupo_contrato_w = 'S')then
      vl_material_w   := dividir((vl_material_w*r_C02_w.tx_comercializacao),100);
      if (r_C02_w.ie_aplica_tx_adm = 'S') then
        vl_lib_taxa_material_w  := dividir((vl_lib_taxa_material_w*r_C02_w.tx_comercializacao),100);
        vl_taxa_material_w  := dividir((vl_taxa_material_w*r_C02_w.tx_comercializacao),100);
      else
        vl_lib_taxa_material_w  := 0;
        vl_taxa_material_w  := 0;
      end if;

      vl_beneficiario_w := coalesce(vl_material_w,0) + coalesce(vl_lib_taxa_material_w,0);

      insert  into pls_conta_proc(nr_sequencia, dt_atualizacao, nm_usuario,dt_atualizacao_nrec, nm_usuario_nrec,
        nr_seq_conta,cd_procedimento, ie_origem_proced, qt_procedimento,qt_procedimento_imp,
        ie_status,ie_situacao, ie_via_acesso, vl_unitario_imp,
        vl_procedimento_imp, vl_unitario, vl_liberado,vl_medico, vl_anestesista,
        vl_auxiliares,vl_custo_operacional, vl_materiais, vl_procedimento,vl_glosa,
        vl_beneficiario,ie_lanc_manual_pos, ie_apenas_pagamento, dt_procedimento,
        dt_inicio_proc,dt_fim_proc,tx_item)
      values (nextval('pls_conta_proc_seq'), clock_timestamp(), nm_usuario_p,clock_timestamp(), nm_usuario_p,
        nr_seq_conta_p,r_C02_w.cd_procedimento, r_C02_w.ie_origem_proced, 1,1,
        'M','D', 'U',0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,'S', 'N', dt_atendimento_referencia_w,
        dt_atendimento_referencia_w,dt_atendimento_referencia_w,100) returning nr_sequencia into nr_seq_conta_proc_nova_w;

      CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_proc(nr_seq_conta_proc_nova_w, nm_usuario_p);

      ie_medico_exec_coope_w  := pls_obter_se_cooperado_ativo(cd_medico_exec_w,dt_atendimento_referencia_w,null);

      if (ie_medico_exec_coope_w = 'S') then
        ie_medico_exec_coope_w  := 'C';
      end if;

      ie_medico_solic_coope_w := pls_obter_se_cooperado_ativo(cd_medico_solicitante_w,dt_atendimento_referencia_w,null);

      if (ie_medico_solic_coope_w = 'S') then
        ie_medico_solic_coope_w := 'C';
      end if;

      select  max(ie_tipo_despesa)
      into STRICT  ie_tipo_despesa_w
      from  pls_conta_proc
      where nr_sequencia  = nr_seq_conta_proc_nova_w;

      --Define o ato cooperado
      SELECT * FROM pls_obter_tipo_ato_cooperado(  r_C02_w.cd_procedimento, r_C02_w.ie_origem_proced, nr_seq_conta_proc_nova_w, 'P', nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_prot_w, null, ie_medico_solic_coope_w, ie_medico_exec_coope_w, null, 'C', ie_tipo_guia_w, ie_tipo_despesa_w, null, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;

      if (ie_origem_conta_w  = 'A')   and (coalesce(ie_ato_cooperado_w::text, '') = '') then
        ie_ato_cooperado_w := '1';
      end if;

      update  pls_conta_proc
      set nr_seq_regra_cooperado  = nr_seq_regra_cooperado_w,
        ie_ato_cooperado  = ie_ato_cooperado_w
      where nr_sequencia    = nr_seq_conta_proc_nova_w;

      begin
      select  CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END
      into STRICT  ie_tipo_prestador_atend_w
      from  pls_prestador
      where nr_sequencia  = nr_seq_prestador_prot_w;
      exception
      when others then
        ie_tipo_prestador_atend_w := null;
      end;

      begin
      select  CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END
      into STRICT  ie_tipo_prestador_exec_w
      from  pls_prestador
      where nr_sequencia  = nr_seq_prestador_exec_w;
      exception
      when others then
        ie_tipo_prestador_exec_w  := null;
      end;
      if (ie_origem_valor_pos_p = 'P') then

        insert into pls_conta_pos_estab_prev( nr_sequencia, dt_atualizacao, nm_usuario,
          dt_atualizacao_nrec,nm_usuario_nrec, nr_seq_conta,
          vl_beneficiario,nr_seq_conta_proc,ie_calcula_preco_benef,
          ie_preco_plano, ie_cobrar_mensalidade, nr_seq_analise,
          vl_provisao,ie_status_faturamento, qt_item,
          nr_seq_cooperativa,tx_administracao, vl_administracao,
          qt_original, vl_calculado, ie_origem_valor_pos,
          vl_custo_operacional, vl_medico, vl_materiais,
          vl_medico_calc,vl_custo_operacional_calc,vl_materiais_calc,
          vl_liberado_hi_fat,vl_liberado_co_fat, vl_liberado_material_fat,
          vl_glosa_hi_fat,vl_glosa_co_fat,vl_glosa_material_fat,
          vl_glosa_taxa_servico,vl_glosa_taxa_co,vl_glosa_taxa_material,
          vl_lib_taxa_servico, vl_lib_taxa_co,vl_lib_taxa_material,
          vl_taxa_servico,vl_taxa_co,vl_taxa_material,
          dt_item,dt_inicio_item,dt_fim_item,
          ie_situacao, ie_tipo_guia, ie_tipo_protocolo,
          nr_seq_segurado, ie_tipo_segurado,dt_mes_competencia,
          nr_seq_protocolo, nr_seq_prestador_atend, nr_seq_prestador_exec,
          ie_tipo_prestador_atend, ie_tipo_prestador_exec, ie_vl_pag_prestador,
          nr_seq_regra_tx_opme,cd_procedimento,ie_origem_proced)
          values  ( nextval('pls_conta_pos_estab_prev_seq'), clock_timestamp(), nm_usuario_p,
          clock_timestamp(),nm_usuario_p, nr_seq_conta_p,
          coalesce(vl_beneficiario_w,0), nr_seq_conta_proc_nova_w,'N',
          ie_preco_plano_p, ie_cobrar_mensalidade_p, nr_seq_analise_pos_p,
          vl_beneficiario_w,CASE WHEN ie_cobrar_mensalidade_p='A' THEN  'A' WHEN ie_cobrar_mensalidade_p='L'), 1, -- quando o ie_cobrar_mensalidade_p = 'A' entao e aviso de cobranca e nao pode ser liberado          nr_seq_congenere_p THEN  tx_administracao_w WHEN ie_cobrar_mensalidade_p=vl_lib_taxa_material_w THEN           1 WHEN ie_cobrar_mensalidade_p=vl_beneficiario_w THEN  ie_origem_valor_pos_p WHEN ie_cobrar_mensalidade_p=0 THEN vl_material_w WHEN ie_cobrar_mensalidade_p=0 THEN           vl_material_w WHEN ie_cobrar_mensalidade_p=0 THEN 0 WHEN ie_cobrar_mensalidade_p=vl_material_w THEN 0 WHEN ie_cobrar_mensalidade_p=0 THEN           0 WHEN ie_cobrar_mensalidade_p=0 THEN 0 WHEN ie_cobrar_mensalidade_p=0 THEN 0 WHEN ie_cobrar_mensalidade_p=0 THEN           vl_lib_taxa_material_w WHEN ie_cobrar_mensalidade_p=0 THEN 0 WHEN ie_cobrar_mensalidade_p=vl_lib_taxa_material_w THEN 0 WHEN ie_cobrar_mensalidade_p=0 THEN           dt_atendimento_referencia_w WHEN ie_cobrar_mensalidade_p=dt_atendimento_referencia_w THEN dt_atendimento_referencia_w WHEN ie_cobrar_mensalidade_p='A' THEN  ie_tipo_guia_w WHEN ie_cobrar_mensalidade_p=ie_tipo_protocolo_w THEN           nr_seq_segurado_w WHEN ie_cobrar_mensalidade_p=ie_tipo_segurado_w THEN dt_mes_competencia_w WHEN ie_cobrar_mensalidade_p=nr_seq_protocolo_w THEN  nr_seq_prestador_prot_w WHEN ie_cobrar_mensalidade_p=nr_seq_prestador_exec_w THEN           ie_tipo_prestador_atend_w WHEN ie_cobrar_mensalidade_p=ie_tipo_prestador_exec_w THEN  'N' WHEN ie_cobrar_mensalidade_p=r_C02_w.nr_seq_tx_opme THEN r_C02_w.cd_procedimento  ELSE r_C02_w.ie_origem_proced END;

      else
	
          insert into pls_conta_pos_estabelecido( nr_sequencia, dt_atualizacao, nm_usuario,
          dt_atualizacao_nrec,nm_usuario_nrec, nr_seq_conta,
          vl_beneficiario,nr_seq_conta_proc,ie_calcula_preco_benef,
          ie_preco_plano, ie_cobrar_mensalidade, nr_seq_analise,
          vl_provisao,ie_status_faturamento, qt_item,
          nr_seq_cooperativa,tx_administracao, vl_administracao,
          qt_original, vl_calculado, ie_origem_valor_pos,
          vl_custo_operacional, vl_medico, vl_materiais,
          vl_medico_calc,vl_custo_operacional_calc,vl_materiais_calc,
          vl_liberado_hi_fat,vl_liberado_co_fat, vl_liberado_material_fat,
          vl_glosa_hi_fat,vl_glosa_co_fat,vl_glosa_material_fat,
          vl_glosa_taxa_servico,vl_glosa_taxa_co,vl_glosa_taxa_material,
          vl_lib_taxa_servico, vl_lib_taxa_co,vl_lib_taxa_material,
          vl_taxa_servico,vl_taxa_co,vl_taxa_material,
          dt_item,dt_inicio_item,dt_fim_item,
          ie_situacao, ie_tipo_guia, ie_tipo_protocolo,
          nr_seq_segurado, ie_tipo_segurado,dt_mes_competencia,
          nr_seq_protocolo, nr_seq_prestador_atend, nr_seq_prestador_exec,
          ie_tipo_prestador_atend, ie_tipo_prestador_exec, ie_vl_pag_prestador,
          nr_seq_regra_tx_opme,cd_procedimento,ie_origem_proced)
          values  ( nextval('pls_conta_pos_estabelecido_seq'), clock_timestamp(), nm_usuario_p,
          clock_timestamp(),nm_usuario_p, nr_seq_conta_p,
          coalesce(vl_beneficiario_w,0), nr_seq_conta_proc_nova_w,'N',
          ie_preco_plano_p, ie_cobrar_mensalidade_p, nr_seq_analise_pos_p,
          vl_beneficiario_w,CASE WHEN ie_cobrar_mensalidade_p='A' THEN  'A' WHEN ie_cobrar_mensalidade_p='L'), 1, -- quando o ie_cobrar_mensalidade_p = 'A' entao e aviso de cobranca e nao pode ser liberado          nr_seq_congenere_p THEN  tx_administracao_w WHEN ie_cobrar_mensalidade_p=vl_lib_taxa_material_w THEN           1 WHEN ie_cobrar_mensalidade_p=vl_beneficiario_w THEN  ie_origem_valor_pos_p WHEN ie_cobrar_mensalidade_p=0 THEN vl_material_w WHEN ie_cobrar_mensalidade_p=0 THEN           vl_material_w WHEN ie_cobrar_mensalidade_p=0 THEN 0 WHEN ie_cobrar_mensalidade_p=vl_material_w THEN 0 WHEN ie_cobrar_mensalidade_p=0 THEN           0 WHEN ie_cobrar_mensalidade_p=0 THEN 0 WHEN ie_cobrar_mensalidade_p=0 THEN 0 WHEN ie_cobrar_mensalidade_p=0 THEN           vl_lib_taxa_material_w WHEN ie_cobrar_mensalidade_p=0 THEN 0 WHEN ie_cobrar_mensalidade_p=vl_lib_taxa_material_w THEN 0 WHEN ie_cobrar_mensalidade_p=0 THEN           dt_atendimento_referencia_w WHEN ie_cobrar_mensalidade_p=dt_atendimento_referencia_w THEN dt_atendimento_referencia_w WHEN ie_cobrar_mensalidade_p='A' THEN  ie_tipo_guia_w WHEN ie_cobrar_mensalidade_p=ie_tipo_protocolo_w THEN           nr_seq_segurado_w WHEN ie_cobrar_mensalidade_p=ie_tipo_segurado_w THEN dt_mes_competencia_w WHEN ie_cobrar_mensalidade_p=nr_seq_protocolo_w THEN  nr_seq_prestador_prot_w WHEN ie_cobrar_mensalidade_p=nr_seq_prestador_exec_w THEN           ie_tipo_prestador_atend_w WHEN ie_cobrar_mensalidade_p=ie_tipo_prestador_exec_w THEN  'N' WHEN ie_cobrar_mensalidade_p=r_C02_w.nr_seq_tx_opme THEN r_C02_w.cd_procedimento  ELSE r_C02_w.ie_origem_proced END;

      end if;
      ie_finaliza_w := 'S';
    end if;
    if (ie_finaliza_w = 'S') then
      exit;
    end if;
  end loop;

  CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_conta_proc(nr_seq_conta_p, nm_usuario_p);
end if;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_lancar_tx_proc_opm_fat ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_analise_pos_p pls_conta.nr_seq_analise%type, nr_seq_congenere_p pls_congenere.nr_sequencia%type, ie_cobrar_mensalidade_p pls_conta_pos_estabelecido.ie_cobrar_mensalidade%type, ie_origem_valor_pos_p text, ie_preco_plano_p text, nm_usuario_p text, ie_lanc_tx_opm_pct_fechado_p pls_parametro_faturamento.ie_lancar_tx_opm_pac_fechado%type default 'N') FROM PUBLIC;

