-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE san_gerar_reserva_parcial ( nr_seq_reserva_p bigint, nr_lista_reserva_prod_p text, nm_usuario_p text, ie_opcao_p bigint, nr_seq_reserva_nova_p INOUT bigint, ie_gerar_reserva_p text DEFAULT 'S') AS $body$
DECLARE

nr_seq_reserva_w		bigint;
nr_lista_reserva_prod_w		varchar(255);
nr_seq_prod_w			bigint;
nr_controle_loop_w		smallint 	:= 0;
nr_apos_virgula_w		bigint 	:= 0;
ie_status_w			varchar(1);
nr_seq_producao_w		bigint;
nr_seq_transfusao_w		bigint;
qt_itens_transf_w		integer;
qtd_hemocomp_w			integer;
nr_seq_exame_lote_w		bigint;
nr_seq_exame_w			bigint;
dt_realizado_w			timestamp;
vl_resultado_w			double precision;
ds_resultado_w			varchar(255);
cd_setor_atendimento_w		integer;
ds_justificativa_w		varchar(255);
ds_lote_kit_w			varchar(20);
nr_amostra_w			integer;
nr_placa_w			smallint;
nr_densidade_otica_w		double precision;
nr_densidade_otica_desc_w	varchar(20);
nr_cutoff_w			double precision;
nr_cutoff_desc_w		varchar(20);
cd_pf_realizou_w		varchar(20);
qt_valor_cn_w			double precision;
qt_valor_cp_w			double precision;
ds_abs_w			varchar(255);
dt_vencimento_lote_w		timestamp;
nm_usuario_w			varchar(20);
dt_atualizacao_w		timestamp;
nr_seq_exame_lote_ww		bigint;
nr_seq_exame_ww			bigint;
dt_atualizacao_ww		timestamp;
nm_usuario_ww			varchar(15);
dt_realizado_ww			timestamp;
vl_resultado_ww			double precision;
ie_resultado_ww			varchar(3);
ds_resultado_ww			varchar(255);
nr_seq_propaci_ww		bigint;
vl_result1_ww			double precision;
vl_result2_ww			double precision;
dt_liberacao_ww			timestamp;
cd_setor_atendimento_ww		integer;
qt_execucao_ww			bigint;
ds_justificativa_ww		varchar(255);
ds_lote_kit_ww			varchar(20);
nr_placa_ww			smallint;
nr_amostra_ww			integer;
nr_densidade_otica_ww		double precision;
nr_cutoff_ww			double precision;
nr_media_controle_pos_ww	integer;
nr_media_controle_neg_ww	integer;
cd_pf_realizou_ww		varchar(20);
qt_valor_cn_ww			double precision;
qt_valor_cp_ww			double precision;
vl_abs_ww			double precision;
ds_abs_ww			varchar(255);
ie_pend_confirmacao_ww		varchar(1);
dt_conferencia_ww		timestamp;
nm_usuario_conferencia_ww	varchar(15);
dt_conferencia_seg_ww		timestamp;
nm_usuario_conf_seg_ww		varchar(15);
ds_resultado_prim_conf_ww	varchar(255);
ds_resultado_seg_conf_ww	varchar(255);
dt_vencimento_lote_ww		timestamp;
nr_kit_lote_ww			bigint;
nr_densidade_otica_desc_ww	varchar(20);
nr_cutoff_desc_ww		varchar(20);
ie_cancelar_reserva_w		varchar(1);
ie_inseri_reagente_w	varchar(1);
nr_seq_lote_exame_w		bigint;
qt_reagente_w			bigint;
nr_seq_lote_fornecedor_w	bigint;
cd_material_w			bigint;
dt_liberacao_w			timestamp;

C01 CURSOR FOR
	SELECT	b.nr_seq_exame,
		b.dt_realizado,
		b.vl_resultado,
		b.ds_resultado,
		b.cd_setor_atendimento,
		b.ds_justificativa,
		b.ds_lote_kit,
		b.nr_amostra,
		b.nr_placa,
		b.nr_densidade_otica,
		b.nr_densidade_otica_desc,
		b.nr_cutoff,
		b.nr_cutoff_desc,
		b.cd_pf_realizou,
		b.qt_valor_cn,
		b.qt_valor_cp,
		b.ds_abs,
		b.dt_vencimento_lote,
		b.nm_usuario,
		b.dt_atualizacao,
		a.nr_sequencia,
		b.dt_liberacao
	FROM	san_exame_realizado b,
		san_exame_lote a
	WHERE	b.nr_seq_exame_lote	= a.nr_sequencia
	AND	a.nr_seq_reserva	= nr_seq_reserva_p;
C02 CURSOR FOR
	SELECT	b.nr_seq_exame,
		b.dt_atualizacao,
		b.nm_usuario,
		b.dt_realizado,
		b.vl_resultado,
		b.ie_resultado,
		b.ds_resultado,
		b.nr_seq_propaci,
		b.vl_result1,
		b.vl_result2,
		b.dt_liberacao,
		b.cd_setor_atendimento,
		b.qt_execucao,
		b.ds_justificativa,
		b.ds_lote_kit,
		b.nr_placa,
		b.nr_amostra,
		b.nr_densidade_otica,
		b.nr_cutoff,
		b.nr_media_controle_pos,
		b.nr_media_controle_neg,
		b.cd_pf_realizou,
		b.qt_valor_cn,
		b.qt_valor_cp,
		b.vl_abs,
		b.ds_abs,
		b.ie_pend_confirmacao,
		b.dt_conferencia,
		b.nm_usuario_conferencia,
		b.dt_conferencia_seg,
		b.nm_usuario_conf_seg,
		b.ds_resultado_prim_conf,
		b.ds_resultado_seg_conf,
		b.dt_vencimento_lote,
		b.nr_kit_lote,
		b.nr_densidade_otica_desc,
		b.nr_cutoff_desc
	FROM	san_exame_realizado b,
		san_exame_lote a,
		san_reserva_prod x
	WHERE	b.nr_seq_exame_lote	= a.nr_sequencia
	AND	a.nr_seq_res_prod	= x.nr_sequencia
	AND	x.nr_seq_producao	= nr_seq_prod_w
	AND	x.nr_seq_reserva	= nr_seq_reserva_p;

C03 CURSOR FOR
	SELECT	nr_seq_lote_fornec,
			cd_material
	from 	san_exame_reagente_fornec
	where 	nr_seq_exame_lote = nr_seq_lote_exame_w
	and     nr_seq_exame = nr_seq_exame_w
	order by nr_sequencia;


BEGIN
ie_cancelar_reserva_w := obter_param_usuario(450, 447, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cancelar_reserva_w);
ie_inseri_reagente_w := obter_param_usuario(450, 386, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_inseri_reagente_w);

IF (nr_seq_reserva_p IS NOT NULL AND nr_seq_reserva_p::text <> '') THEN
	BEGIN
	IF (ie_gerar_reserva_p = 'S') THEN
		SELECT	nextval('san_reserva_seq')
		INTO STRICT	nr_seq_reserva_w
		;
		INSERT INTO	san_reserva(
				nr_sequencia,
				cd_pessoa_fisica,
				dt_cirurgia,
				dt_atualizacao,
				nm_usuario,
				dt_reserva,
				cd_pf_realizou,
				cd_medico_requisitante,
				cd_medico_cirurgiao,
				cd_convenio,
				nr_atendimento,
				ds_observacao,
				cd_procedimento,
				ie_origem_proced,
				ie_status,
				nr_seq_entidade,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_estabelecimento,
				nr_prescricao,
				nr_seq_agenda,
				dt_coleta_receptor,
				nm_usuario_coleta,
				nr_requisicao,
				nm_solicitante,
				nr_seq_classif,
				nr_seq_reserva_origem)
			SELECT
				nr_seq_reserva_w,
				cd_pessoa_fisica,
				dt_cirurgia,
				clock_timestamp(),
				nm_usuario_p,
				dt_reserva,
				cd_pf_realizou,
				cd_medico_requisitante,
				cd_medico_cirurgiao,
				cd_convenio,
				nr_atendimento,
				ds_observacao,
				cd_procedimento,
				ie_origem_proced,
				'R',
				nr_seq_entidade,
				clock_timestamp(),
				nm_usuario_p,
				cd_estabelecimento,
				nr_prescricao,
				nr_seq_agenda,
				dt_coleta_receptor,
				nm_usuario_coleta,
				nr_requisicao,
				nm_solicitante,
				nr_seq_classif,
				nr_seq_reserva_p
			FROM	san_reserva
			WHERE	nr_sequencia = nr_seq_reserva_p;
		SELECT	nextval('san_exame_lote_seq')
		INTO STRICT	nr_seq_exame_lote_w
		;
		INSERT INTO san_exame_lote(
				nr_sequencia,
				nr_seq_transfusao,
				nr_seq_sangria,
				nr_seq_reserva,
				nr_seq_res_prod,
				nr_seq_producao,
				nr_seq_emprestimo_saida,
				nr_seq_doacao,
				nr_amostra,
				nm_usuario,
				ie_tipagem,
				ie_origem,
				dt_atualizacao,
				ds_observacao,
				cd_pf_realizou)
		SELECT	nr_seq_exame_lote_w,
			nr_seq_transfusao,
			nr_seq_sangria,
			nr_seq_reserva_w,
			nr_seq_res_prod,
			nr_seq_producao,
			nr_seq_emprestimo_saida,
			nr_seq_doacao,
			nr_amostra,
			nm_usuario,
			ie_tipagem,
			ie_origem,
			dt_atualizacao,
			ds_observacao,
			cd_pf_realizou
		FROM	san_exame_lote a
		WHERE	a.nr_seq_reserva = nr_seq_reserva_p;
		OPEN C01;
		LOOP
		FETCH C01 INTO
			nr_seq_exame_w,
			dt_realizado_w,
			vl_resultado_w,
			ds_resultado_w,
			cd_setor_atendimento_w,
			ds_justificativa_w,
			ds_lote_kit_w,
			nr_amostra_w,
			nr_placa_w,
			nr_densidade_otica_w,
			nr_densidade_otica_desc_w,
			nr_cutoff_w,
			nr_cutoff_desc_w,
			cd_pf_realizou_w,
			qt_valor_cn_w,
			qt_valor_cp_w,
			ds_abs_w,
			dt_vencimento_lote_w,
			nm_usuario_w,
			dt_atualizacao_w,
			nr_seq_lote_exame_w,
			dt_liberacao_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			BEGIN
			INSERT INTO san_exame_realizado(
					nr_seq_exame,
					nr_seq_exame_lote,
					dt_realizado,
					vl_resultado,
					ds_resultado,
					cd_setor_atendimento,
					ds_justificativa,
					ds_lote_kit,
					nr_amostra,
					nr_placa,
					nr_densidade_otica,
					nr_densidade_otica_desc,
					nr_cutoff,
					nr_cutoff_desc,
					cd_pf_realizou,
					qt_valor_cn,
					qt_valor_cp,
					ds_abs,
					dt_vencimento_lote,
					nm_usuario,
					dt_atualizacao,
					dt_liberacao
			) VALUES (	nr_seq_exame_w,
					nr_seq_exame_lote_w,
					dt_realizado_w,
					vl_resultado_w,
					ds_resultado_w,
					cd_setor_atendimento_w,
					ds_justificativa_w,
					ds_lote_kit_w,
					nr_amostra_w,
					nr_placa_w,
					nr_densidade_otica_w,
					nr_densidade_otica_desc_w,
					nr_cutoff_w,
					nr_cutoff_desc_w,
					cd_pf_realizou_w,
					qt_valor_cn_w,
					qt_valor_cp_w,
					ds_abs_w,
					dt_vencimento_lote_w,
					nm_usuario_w,
					dt_atualizacao_w,
					dt_liberacao_w);

				if (ie_inseri_reagente_w = 'S') then

					select	count(*)
					into STRICT	qt_reagente_w
					from	san_exame_reagente_fornec
					where	nr_seq_exame_lote = nr_seq_lote_exame_w
					and		nr_seq_exame = nr_seq_exame_w;

					if (qt_reagente_w > 0) then

						open C03;
						loop
						fetch C03 into
							nr_seq_lote_fornecedor_w,
							cd_material_w;
						EXIT WHEN NOT FOUND; /* apply on C03 */
							begin
								CALL Inserir_san_exame_reagente(cd_material_w,nr_seq_lote_fornecedor_w,nr_seq_exame_lote_w,nr_seq_exame_w,nm_usuario_p);
							end;
						end loop;
						close C03;

					end if;
				end if;
			END;
		END LOOP;
		CLOSE C01;
		INSERT	INTO san_reserva_item(
				nr_seq_reserva,
				nr_seq_item,
				nr_seq_derivado,
				qt_solicitada,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_util_hemocomponente,
				qt_vol_hemocomp,
				nr_prescricao,
				nr_seq_prescr,
				ie_suspenso,
				dt_prevista)
		SELECT	nr_seq_reserva_w,
			nr_seq_item,
			nr_seq_derivado,
			qt_solicitada,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			ie_util_hemocomponente,
			qt_vol_hemocomp,
			nr_prescricao,
			nr_seq_prescr,
			ie_suspenso,
			dt_prevista
		FROM	san_reserva_item
		WHERE	nr_seq_reserva = nr_seq_reserva_p;
	END IF;
	IF (nr_lista_reserva_prod_p IS NOT NULL AND nr_lista_reserva_prod_p::text <> '') THEN
		BEGIN
		nr_lista_reserva_prod_w :=  nr_lista_reserva_prod_p;
		WHILE((nr_lista_reserva_prod_w IS NOT NULL AND nr_lista_reserva_prod_w::text <> '') AND nr_controle_loop_w < 1000) LOOP
			BEGIN
			nr_controle_loop_w	:= nr_controle_loop_w + 1;
			nr_apos_virgula_w 	:= position(',' in nr_lista_reserva_prod_w);
			IF (nr_apos_virgula_w > 0) THEN
				BEGIN
				nr_seq_prod_w		:= (SUBSTR(nr_lista_reserva_prod_w, 1, nr_apos_virgula_w -1))::numeric;
				nr_lista_reserva_prod_w	:= SUBSTR( nr_lista_reserva_prod_w, nr_apos_virgula_w +1, LENGTH( nr_lista_reserva_prod_w ));
				IF ( nr_seq_prod_w > 0) THEN
					BEGIN
					IF (ie_opcao_p	= 3) AND (ie_gerar_reserva_p = 'S') THEN
						INSERT 	INTO 	san_reserva_prod(
							nr_sequencia,
							nr_seq_reserva,
							nr_seq_producao,
							ie_status,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_propaci,
							dt_recebimento,
							nr_agrupamento)
						SELECT
							nextval('san_reserva_prod_seq'),
							nr_seq_reserva_w,
							nr_seq_producao,
							'R',
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_propaci,
							dt_recebimento,
							nr_agrupamento
						FROM	san_reserva_prod
						WHERE	nr_sequencia = nr_seq_prod_w;
					END IF;
					IF (ie_opcao_p	= 3) THEN
						SELECT 	MAX(nr_seq_producao)
						INTO STRICT	nr_seq_producao_w
						FROM	san_reserva_prod
						WHERE	nr_sequencia = nr_seq_prod_w;
						SELECT 	coalesce(MAX(nr_seq_transfusao),0)
						INTO STRICT	nr_seq_transfusao_w
						FROM	san_producao
						WHERE	nr_sequencia 		= nr_seq_producao_w;
						UPDATE 	san_producao
						SET	nr_seq_transfusao 	 = NULL
						WHERE	nr_sequencia 		= nr_seq_producao_w;
						IF (nr_seq_transfusao_w > 0) THEN
							SELECT 	COUNT(*)
							INTO STRICT	qt_itens_transf_w
							FROM	san_producao
							WHERE	nr_seq_transfusao 	= nr_seq_transfusao_w;
							IF (qt_itens_transf_w = 0) THEN
								DELETE	FROM san_transfusao
								WHERE	nr_sequencia 	= nr_seq_transfusao_w;
							END IF;
						END IF;
						DELETE
						FROM	san_reserva_prod
						WHERE	nr_sequencia = nr_seq_prod_w;
					END IF;
					IF (ie_opcao_p	= 4) THEN
						UPDATE	san_reserva_prod
						SET	nr_seq_reserva 	= nr_seq_reserva_w
						WHERE	nr_sequencia 	= nr_seq_prod_w;
					END IF;
					/*
					delete
					from	san_reserva_prod
					where	nr_sequencia = nr_seq_prod_w;
					*/
					END;
				END IF;
				END;
			ELSE
				nr_lista_reserva_prod_w := NULL;
			END IF;
			END;
		END LOOP;
		END;
	END IF;
	IF (ie_opcao_p	= 3) THEN
		SELECT  COUNT(*)
		INTO STRICT	qtd_hemocomp_w
		FROM	san_reserva_prod
		WHERE	nr_seq_reserva = nr_seq_reserva_p;
		IF (qtd_hemocomp_w = 0) THEN
			IF (ie_cancelar_reserva_w = 'S') THEN
				UPDATE 	san_reserva
				SET 	ie_status = 'C',
					dt_cancelamento = clock_timestamp(),
					nm_usuario_cancelamento = nm_usuario_p
				WHERE 	nr_sequencia = nr_seq_reserva_p;
			ELSE
				DELETE
				FROM	san_reserva
				WHERE 	nr_sequencia = nr_seq_reserva_p;
			END IF;
		END IF;
	END IF;
	END;
END IF;
nr_seq_reserva_nova_p := nr_seq_reserva_w;
COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE san_gerar_reserva_parcial ( nr_seq_reserva_p bigint, nr_lista_reserva_prod_p text, nm_usuario_p text, ie_opcao_p bigint, nr_seq_reserva_nova_p INOUT bigint, ie_gerar_reserva_p text DEFAULT 'S') FROM PUBLIC;

