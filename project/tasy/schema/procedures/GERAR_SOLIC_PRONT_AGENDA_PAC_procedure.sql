-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_solic_pront_agenda_pac ( cd_pessoa_fisica_p text, nr_seq_agepac_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text) AS $body$
DECLARE


nr_seq_solic_w	bigint;
cd_setor_atendimento_w	bigint;
cd_estabelecimento_w	bigint;
cd_pessoa_solicitante_w	varchar(10);
nr_seq_prontuario_w	bigint;
ds_lista_informacao_w	varchar(255);
cd_estabelecimento_ww	integer;
cd_perfil_w		integer;
cd_motivo_w		bigint := null;
nr_seq_tipo_w bigint;

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	same_prontuario a
	where (cd_pessoa_fisica_p   = ''  or a.cd_pessoa_fisica   = cd_pessoa_fisica_p)
	and     coalesce(a.nr_seq_caixa::text, '') = ''
	and     a.ie_status not in ('2','5','6','10')
	and     a.nr_sequencia not in (	SELECT   b.nr_seq_prontuario
				from     same_solic_pront_envelope b
				where    b.nr_seq_prontuario    = a.nr_sequencia
				and      b.nr_seq_solic         = nr_seq_solic_w)
	--and      	a.dt_periodo_final   is not null
	and      	(a.dt_periodo_inicial IS NOT NULL AND a.dt_periodo_inicial::text <> '');


BEGIN
cd_perfil_w		:=	wheb_usuario_pck.get_cd_perfil;
cd_estabelecimento_ww	:=	wheb_usuario_pck.get_cd_estabelecimento;

If (obter_tipo_agenda(cd_agenda_p) = 1) then
	cd_motivo_w := Obter_Param_Usuario(871, 798, cd_perfil_w, nm_usuario_p, cd_estabelecimento_ww, cd_motivo_w);
end if;


ds_lista_informacao_w	:= '';

/* Obter o setor exclusivo e o estabelecimento da agenda */

select	max(cd_setor_exclusivo),
	max(cd_estabelecimento),
   MAX(nr_seq_tipo)
into STRICT	cd_setor_atendimento_w,
	cd_estabelecimento_w,
   nr_seq_tipo_w
from	agenda
where	cd_agenda		= cd_agenda_p;

if (coalesce(cd_setor_atendimento_w::text, '') = '') then
	select	max(cd_setor_atendimento)
	into STRICT	cd_setor_atendimento_w
	from	usuario
	where	nm_usuario = wheb_usuario_pck.get_nm_usuario;
end if;

/* Obter o numero do atendimento e a pessoa solicitante */

select	substr(Obter_Pessoa_Fisica_Usuario(nm_usuario_p,'C'),1,10)
into STRICT	cd_pessoa_solicitante_w
;

if (cd_setor_atendimento_w > 0) and (cd_estabelecimento_w > 0) then
	begin

	/* Verifica se possui alguma solicitacao existente para o estabelecimento, setor, data */

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_solic_w
	from	same_solic_pront
	where	cd_estabelecimento		= cd_estabelecimento_w
	and	cd_setor_solicitante		= cd_setor_atendimento_w
	and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_prevista)	= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)
	and	cd_pessoa_fisica		= cd_pessoa_fisica_p;

	/*Se nao possuir, cria uma solicitacao */

	if (nr_seq_solic_w = 0) then
		begin

		select	nextval('same_solic_pront_seq')
		into STRICT	nr_seq_solic_w
		;

		insert into same_solic_pront(
			nr_sequencia,
			cd_estabelecimento,
			dt_prevista,
			dt_solicitacao,
			dt_atualizacao,
			nm_usuario,
			ie_status,
			cd_pessoa_fisica,
			cd_pessoa_solicitante,
			ie_tipo_solicitacao,
			ie_urgente,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_setor_solicitante,
			nr_seq_agepac,
			dt_liberacao,
			nr_seq_motivo,
         nr_seq_tipo)
		values (	nr_seq_solic_w,
			cd_estabelecimento_w,
			dt_agenda_p,
			clock_timestamp(),
			clock_timestamp(),
			nm_usuario_p,
			'P',
			cd_pessoa_fisica_p,
			cd_pessoa_solicitante_w,
			'O',
			'N',
			clock_timestamp(),
			nm_usuario_p,
			cd_setor_atendimento_w,
			nr_seq_agepac_p,
			clock_timestamp(),
			CASE WHEN cd_motivo_w=0 THEN null  ELSE cd_motivo_w END ,
         nr_seq_tipo_w );

		open C01;
		loop
		fetch C01 into
			nr_seq_prontuario_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			ds_lista_informacao_w	:= nr_seq_prontuario_w || ',';
			CALL Same_Inserir_Pront_Solic(nr_seq_solic_w, ds_lista_informacao_w, nm_usuario_p);
			end;
		end loop;
		close C01;

		end;
	end if;

	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_solic_pront_agenda_pac ( cd_pessoa_fisica_p text, nr_seq_agepac_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text) FROM PUBLIC;

