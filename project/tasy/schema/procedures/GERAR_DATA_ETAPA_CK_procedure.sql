-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_data_etapa_ck ( dt_tipo_p text, nr_seq_etapa_p text, nm_usuario_p text) AS $body$
DECLARE


/*
CC - DT_CANCELAMENTO
CF - DT_CONFIRMACAO
IN - DT_INICIO_REAL
FN - DT_FIM_ETAPA
*/
nr_prescricao_w			  prescr_procedimento.nr_prescricao%type;
nr_seq_prescr_w			  prescr_procedimento.nr_sequencia%type;
nr_atendimento_w		  atendimento_paciente.nr_atendimento%type;
dt_atualizacao_w    	  checkup_etapa.dt_atualizacao%type := clock_timestamp();
ie_gerar_conta_w		  etapa_checkup.ie_gerar_conta%type;
ie_definir_prof_w		  varchar(10);
cd_pessoa_fisica_w		  checkup_etapa.cd_pessoa_fisica%type;
ie_atualiza_prof_w		  etapa_checkup.ie_atualiza_prof%type;
ie_gerar_conta_cancel_w	  etapa_checkup.ie_gerar_conta_cancelar%type;
ie_exige_prof_finalizar_w etapa_checkup.ie_exige_prof_finalizar%type;

C01 CURSOR FOR
	SELECT	a.nr_prescricao,
			a.nr_sequencia
	from	prescr_procedimento a
	where	a.nr_seq_checkup_etapa	= nr_seq_etapa_p
	and		cd_motivo_baixa = 0
	and		coalesce(dt_suspensao::text, '') = ''
	and		not exists (SELECT	1
							from	procedimento_paciente x
							where	x.nr_atendimento = nr_atendimento_w
							and		x.nr_prescricao	= a.nr_prescricao
							and		x.nr_sequencia_prescricao = a.nr_sequencia
							and		coalesce(x.cd_motivo_exc_conta::text, '') = '');
	
procedure gerar_conta_etapa is
;
BEGIN
	open C01;
	loop
	fetch C01 into
		nr_prescricao_w,
		nr_seq_prescr_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
			CALL gerar_proc_pac_prescricao(nr_prescricao_w,nr_seq_prescr_w,obter_perfil_ativo,obter_funcao_ativa,nm_usuario_p,null,null,null);
		end;
	end loop;
	close C01;
end;
	
begin

ie_definir_prof_w := obter_valor_param_usuario(996, 46, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento);

if (dt_tipo_p IS NOT NULL AND dt_tipo_p::text <> '')	and (nr_seq_etapa_p IS NOT NULL AND nr_seq_etapa_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	
	begin
	
		select	max(b.nr_atendimento)
		into STRICT	nr_atendimento_w
		from	checkup_etapa a,
				checkup b
		where	a.nr_seq_checkup = b.nr_sequencia
		and		a.nr_sequencia = nr_seq_etapa_p;
		
		select max(b.ie_atualiza_prof),
			   max(b.ie_gerar_conta),
			   max(b.ie_gerar_conta_cancelar),
			   max(b.ie_exige_prof_finalizar),
			   max(a.cd_pessoa_fisica)
		into STRICT   ie_atualiza_prof_w,
			   ie_gerar_conta_w,
			   ie_gerar_conta_cancel_w,
			   ie_exige_prof_finalizar_w,
			   cd_pessoa_fisica_w
		from checkup_etapa a,
			 etapa_checkup b
		where a.nr_sequencia = nr_seq_etapa_p
		and	a.nr_seq_etapa = b.nr_sequencia;
		
		CALL valida_responsavel_etapa(nr_seq_etapa_p, nm_usuario_p);
		
		if (upper(dt_tipo_p) = 'CF') then
			
			begin
				
				update checkup_etapa set
					nm_usuario 	    = nm_usuario_p,
					dt_confirmacao 	= dt_atualizacao_w,
					dt_atualizacao  = dt_atualizacao_w,
					nm_usuario_conf = nm_usuario_p
				where nr_sequencia = nr_seq_etapa_p;
					
				if (ie_atualiza_prof_w	= 'S') and (ie_definir_prof_w = 'N') then
					update checkup_etapa
					set    cd_pessoa_fisica = Obter_Dados_Usuario_Opcao(nm_usuario_p,'C'),
						   dt_atualizacao = dt_atualizacao_w,
						   nm_usuario = nm_usuario_p
					where  nr_sequencia = nr_seq_etapa_p;			
				end if;	
				commit;
			end;
		
		elsif (upper(dt_tipo_p) = 'CC') then
			
			begin
				
				update checkup_etapa set
					dt_cancelamento = dt_atualizacao_w,
					nm_usuario_cancel =	nm_usuario_p,
					dt_atualizacao = dt_atualizacao_w,
		            nm_usuario = nm_usuario_p
					where nr_sequencia = nr_seq_etapa_p;
				 commit;
				
				if (ie_gerar_conta_cancel_w = 'S') then
					CALL gerar_conta_etapa();
				end if;
			end;
		
		elsif (upper(dt_tipo_p)	= 'IN') then
			
			begin
				
				CALL valida_etapa_iniciada(nr_seq_etapa_p,nm_usuario_p);
			
				update 	checkup_etapa set
					dt_inicio_real = dt_atualizacao_w,
					dt_atualizacao = dt_atualizacao_w,
		            nm_usuario = nm_usuario_p
					where nr_sequencia = nr_seq_etapa_p;
					
				if (ie_atualiza_prof_w	= 'S') and (ie_definir_prof_w = 'N') then
					update 	checkup_etapa
					set cd_pessoa_fisica = obter_dados_usuario_opcao(nm_usuario_p,'C'),
						dt_atualizacao = dt_atualizacao_w,
		            	nm_usuario = nm_usuario_p
					where nr_sequencia = nr_seq_etapa_p;
				end if;
				commit;
			end;
	
		elsif (upper(dt_tipo_p) = 'FN') then
			
			begin
				
				if (coalesce(cd_pessoa_fisica_w::text, '') = '') and (ie_exige_prof_finalizar_w	= 'S') then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(175953);
				end if;
				
				update checkup_etapa set
		            nm_usuario     = nm_usuario_p,
		            dt_fim_etapa   = dt_atualizacao_w,
		            dt_atualizacao = dt_atualizacao_w
					where nr_sequencia = nr_seq_etapa_p;
				commit;
				
				if (ie_gerar_conta_w = 'S') then
					CALL gerar_conta_etapa();
				end if;
			end;
		end if;
	end;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_data_etapa_ck ( dt_tipo_p text, nr_seq_etapa_p text, nm_usuario_p text) FROM PUBLIC;

