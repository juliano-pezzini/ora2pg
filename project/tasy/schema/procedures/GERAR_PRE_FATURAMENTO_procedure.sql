-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE reg_contas AS (
	nr_interno_conta	bigint,
	ie_status_acerto	smallint,
	ie_status_protocolo	smallint,
	cd_convenio		integer,
	nr_atendimento		bigint,
	cd_estabelecimento	smallint,
	vl_conta		double precision,
	dt_geracao_resumo	timestamp);


CREATE OR REPLACE PROCEDURE gerar_pre_faturamento ( dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


type contas is table of reg_contas index by integer;

ie_modo_lote_w			ctb_param_lote_nf.ie_ctb_online%type;
dt_inicio_w			timestamp;
dt_final_w			timestamp;
dt_atualizacao_w		timestamp	:= clock_timestamp();
dt_referencia_w			timestamp;
qt_reg_sem_conta_w		bigint;
ie_estab_pre_faturamento_w	varchar(1);
ie_atualiza_rel_cc_pre_w	varchar(1);
ie_atualiza_conta_pre_w		varchar(1);
ie_despesa_pre_fatur_w		varchar(1);
cd_estabelecimento_w		integer;
contas_w			contas;
i				integer	:= 0;
qt_registro_w			integer	:= 0;
qt_reg_conta_w			bigint;
vl_conta_w			double precision;
ie_pre_faturamento_w		varchar(1);
ie_gerar_rep_conta_prefat_w	varchar(15);
ie_repasse_proc_w		varchar(15);
ie_atual_pre_fatur_mes_w	varchar(1);
nr_lote_contabil_w		bigint;
nr_seq_log_w			pre_fatur_log.nr_sequencia%type;
ds_erro_w			varchar(255) := null;
ds_module_w			varchar(32);
ds_action_w			varchar(32);
ie_atualiza_job_w		indicador_gestao_envio.ie_atualiza_job%type;
ds_email_envio_w		indicador_gestao_envio.ds_email_envio%type;
ds_email_origem_w		usuario.ds_email%type;
dt_inicial_geracao_w		pre_fatur_log.dt_inicial_geracao%type;
dt_final_geracao_w		pre_fatur_log.dt_final_geracao%type;
ds_mask_timestamp_w		varchar(255) := pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, WHEB_USUARIO_PCK.GET_NM_USUARIO));
ds_mask_shortdate_w		varchar(255) := pkg_date_formaters.localize_mask('shortDate', pkg_date_formaters.getUserLanguageTag(WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, WHEB_USUARIO_PCK.GET_NM_USUARIO));
vl_original_w                   pre_faturamento.vl_original%type;
vl_desc_item_conta_w            pre_faturamento.vl_desc_item_conta%type;
vl_desc_item_deduc_w            pre_faturamento.vl_desc_item_deduc%type;
vl_desc_item_neg_w              pre_faturamento.vl_desc_item_neg%type;
ie_conta_deducao_w              conta_pac_deducao_conv.ie_valor_original%type;
ie_desconto_contabil_w          parametro_faturamento.ie_desconto_contabil%type;
nr_seq_proc_w                   procedimento_paciente.nr_sequencia%type;
nr_seq_mat_w                    material_atend_paciente.nr_sequencia%type;
vl_proc_w                       procedimento_paciente.vl_procedimento%type;
vl_mat_w                        material_atend_paciente.vl_material%type;
qt_proc_w                       procedimento_paciente.qt_procedimento%type;
qt_mat_w                        material_atend_paciente.qt_material%type;
vl_desc_item_conta_orig_w       pre_faturamento.vl_desc_item_conta%type;
vl_original_orig_w	        pre_faturamento.vl_desc_item_deduc%type;
vl_desc_item_deduc_orig_w       pre_faturamento.vl_desc_item_neg%type;
vl_desc_item_neg_orig_w         pre_faturamento.vl_desc_item_neg%type;
nr_interno_conta_cc             conta_paciente.nr_interno_conta%type;
cd_procedimento_c               procedimento_paciente.cd_procedimento%type;
ie_origem_proced_c              procedimento_paciente.ie_origem_proced%type;
nr_seq_proc_interno_c           procedimento_paciente.nr_seq_proc_interno%type;
cd_setor_atendimento_c          procedimento_paciente.cd_setor_atendimento%type;
cd_setor_receita_c              procedimento_paciente.cd_setor_receita%type;
cd_conta_contabil_c             procedimento_paciente.cd_conta_contabil%type;
cd_especialidade_c              procedimento_paciente.cd_especialidade%type;
cd_convenio_c                   procedimento_paciente.cd_convenio%type;
nr_seq_grupo_rec_c              procedimento_paciente.nr_seq_grupo_rec%type;
cd_setor_paciente_c             procedimento_paciente.cd_setor_paciente%type;
cd_estrutura_conta_c            procedimento_paciente.ie_emite_conta%type;
cd_material_c                   material_atend_paciente.cd_material%type;
cd_unidade_medida_c             material_atend_paciente.cd_unidade_medida%type;

c01 CURSOR FOR
SELECT	nr_interno_conta,
	ie_status_acerto,
	cd_convenio_parametro,
	nr_atendimento,
	cd_estabelecimento,
	0 ie_status_protocolo,
	dt_geracao_resumo
from 	conta_paciente
where 	ie_status_acerto = 1
and	coalesce(ie_cancelamento::text, '') = ''
and 	dt_mesano_referencia	>= dt_referencia_w
and 	dt_periodo_inicial	<= dt_final_w
and (cd_estabelecimento	= cd_estabelecimento_w or cd_estabelecimento_w = 0)

union

/* Insere as contas FECHADAS nao canceladas, que NAO estao em PROTOCOLO, do MES de referencia ATUAL. mais as que tem PERIODO inicial
menor que o ultimo dia do mes de referencia*/
SELECT	a.nr_interno_conta,
	a.ie_status_acerto,
	a.cd_convenio_parametro,
	a.nr_atendimento,
	a.cd_estabelecimento,
	0 ie_status_protocolo,
	a.dt_geracao_resumo
from	convenio b,
	conta_paciente a
where	a.ie_status_acerto = 2
and	coalesce(a.ie_cancelamento::text, '') = ''
and	coalesce(a.nr_seq_protocolo::text, '') = ''
and	a.dt_mesano_referencia 	>= dt_referencia_w
and	a.dt_periodo_inicial 	<= dt_final_w
and	a.cd_convenio_parametro	= b.cd_convenio
and (a.cd_estabelecimento	= cd_estabelecimento_w or cd_estabelecimento_w = 0)

UNION

/* Insere as contas FECHADAS nao canceladas, que ESTAO em PROTOCOLO, que o Mes de referencia da conta e um mes FUTURO ao referencia,
 mas as que o PERIODO incial da conta e igual ou menor ao ultimo dia do mes do parametro */
SELECT	a.nr_interno_conta,
	a.ie_status_acerto,
	a.cd_convenio_parametro,
	a.nr_atendimento,
	a.cd_estabelecimento,
	b.ie_status_protocolo,
	a.dt_geracao_resumo
FROM 	protocolo_convenio b,
	conta_paciente a
WHERE 	a.nr_seq_protocolo	= b.nr_seq_protocolo
AND	a.ie_status_acerto	= 2
AND	coalesce(a.ie_cancelamento::text, '') = ''
AND	a.nr_seq_protocolo	> 0
AND	a.dt_mesano_referencia	> dt_final_w
AND	a.dt_periodo_inicial	<= dt_final_w
AND (a.cd_estabelecimento	= cd_estabelecimento_w OR cd_estabelecimento_w = 0);

vet01	C01%ROWTYPE;

c02 CURSOR(
	dt_final_p		timestamp,	--dt_final_w
	dt_referencia_c		timestamp,	--dt_referencia_w
	cd_estabelecimento_c	bigint,	--contas_w(i).cd_estabelecimento
	nr_interno_conta_c	bigint) FOR
SELECT	dt_referencia_w,
	x.cd_convenio,
	dt_atualizacao_w,
	nm_usuario_p,
	b.cd_setor_receita,
	b.cd_setor_atendimento,
	b.cd_especialidade,
	b.cd_conta_contabil,
	b.cd_material,
	b.cd_unidade_medida,
	b.ie_origem_proced,
	b.cd_procedimento,
	b.nr_seq_grupo_rec,
	b.cd_estrutura_conta,
	b.ie_diaria,
	sum(b.qt_resumo) qt_resumo,
	sum(b.vl_medico) vl_medico,
	b.nr_seq_conta_financ,
	sum(b.vl_auxiliares) vl_auxiliares,
	sum(b.vl_custo_operacional) vl_custo_operacional,
	sum(b.vl_anestesista) vl_anestesista,
	sum(b.vl_materiais) vl_materiais,
	sum(b.vl_procedimento) vl_procedimento,
	sum(b.vl_material) vl_material,
	sum(b.vl_medico_fora_conta) vl_medico_fora_conta,
	sum(b.vl_sadt_fora_conta) vl_sadt_fora_conta,
	sum(b.vl_repasse_terceiro) vl_repasse_terceiro,
	sum(b.vl_custo) vl_custo,
	a.nr_interno_conta,
	a.cd_estabelecimento,
	sum(b.vl_repasse_calc) vl_repasse_calc,
	coalesce(b.dt_referencia, a.dt_mesano_referencia) dt_referencia,
	b.nr_seq_proc_interno, /* OS 2033258 - Incluido para salvar novo campo na tabela pre_faturamento */
    b.cd_setor_paciente,
	b.cd_sequencia_parametro
from 	conta_paciente_resumo b,
	conta_paciente a,
	pre_fatur_conta x
where	a.nr_interno_conta		= b.nr_interno_conta
and 	a.nr_interno_conta		= x.nr_interno_conta
and	b.dt_referencia			<= dt_final_p
and	x.dt_referencia			= dt_referencia_c
and	coalesce(b.qt_exclusao_custo,0)	= 0 /* somente itens nao excluidos */
and	a.cd_estabelecimento		= cd_estabelecimento_c
and	x.nr_interno_conta		= nr_interno_conta_c
group by
	dt_referencia_w,
	x.cd_convenio,
	dt_atualizacao_w,
	nm_usuario_p,
	b.cd_setor_receita,
	b.cd_setor_atendimento,
	b.cd_especialidade,
	b.cd_conta_contabil,
	b.cd_material,
	b.cd_unidade_medida,
	b.ie_origem_proced,
	b.cd_procedimento,
	b.nr_seq_grupo_rec,
	b.cd_estrutura_conta,
	b.ie_diaria,
	b.nr_seq_conta_financ,
	a.nr_interno_conta,
	a.cd_estabelecimento,
	coalesce(b.dt_referencia, a.dt_mesano_referencia),
	b.nr_seq_proc_interno,
    b.cd_setor_paciente,
	b.cd_sequencia_parametro;

c02_w		c02%rowtype;

C03 CURSOR FOR
SELECT  nr_sequencia,
        qt_procedimento,
        vl_procedimento                                        
from    procedimento_paciente a
where   a.nr_interno_conta              = nr_interno_conta_cc
and     a.cd_procedimento               = cd_procedimento_c
and     coalesce(a.ie_origem_proced, 0)      = ie_origem_proced_c
and     coalesce(a.nr_seq_proc_interno, 0)   = coalesce(nr_seq_proc_interno_c, 0)
and     coalesce(a.cd_setor_atendimento, 0)  = cd_setor_atendimento_c
and     coalesce(a.cd_setor_receita, 0)      = coalesce(cd_setor_receita_c, 0)
and     coalesce(a.cd_conta_contabil, 0)     = coalesce(cd_conta_contabil_c, 0)
and     coalesce(a.cd_especialidade, 0)      = coalesce(cd_especialidade_c, 0)
and     coalesce(a.cd_convenio, 0)           = coalesce(cd_convenio_c, 0)
and     coalesce(a.nr_seq_grupo_rec, 0)      = coalesce(nr_seq_grupo_rec_c, 0)
and     coalesce(a.cd_setor_paciente, 0)     = coalesce(cd_setor_paciente_c, 0)
and     coalesce(a.ie_emite_conta, 0)        = coalesce(cd_estrutura_conta_c, 0)
and     PKG_DATE_UTILS.start_of(coalesce(dt_conta, dt_procedimento),'month',0) <= dt_referencia_w;

C04 CURSOR FOR
SELECT  nr_sequencia,
        qt_material,
        vl_material
from    material_atend_paciente a
where   a.nr_interno_conta              = nr_interno_conta_cc
and     a.cd_material                   = cd_material_c
and     coalesce(a.cd_setor_atendimento, 0)  = cd_setor_atendimento_c
and     coalesce(a.cd_setor_receita, 0)      = coalesce(cd_setor_receita_c, 0)
and     coalesce(a.cd_conta_contabil, 0)     = coalesce(cd_conta_contabil_c, 0)
and     coalesce(a.cd_especialidade, 0)      = coalesce(cd_especialidade_c, 0)
and     coalesce(a.cd_convenio, 0)           = coalesce(cd_convenio_c, 0)
and     coalesce(a.nr_seq_grupo_rec, 0)      = coalesce(nr_seq_grupo_rec_c, 0)
and     coalesce(a.cd_setor_paciente, 0)     = coalesce(cd_setor_paciente_c, 0)
and     coalesce(a.cd_unidade_medida, 0)     = coalesce(cd_unidade_medida_c, 0)
and     coalesce(a.ie_emite_conta, 0)        = coalesce(cd_estrutura_conta_c, 0)
and     PKG_DATE_UTILS.start_of(coalesce(dt_conta, dt_atendimento),'month',0) <= dt_referencia_w;


BEGIN
	select	max(ds_email_envio), max(ie_atualiza_job)
	into STRICT	ds_email_envio_w, ie_atualiza_job_w
	from	indicador_gestao_envio
	where	ie_pre_faturamento = 'S';

	dbms_application_info.read_module(ds_module_w,ds_action_w);
	CALL gravar_processo_longo('','GERAR_PRE_FATURAMENTO',null);
begin
	SELECT	substr(wheb_mensagem_pck.get_texto(1079658,'DS_PROCEDURE=' || 'GERAR_PRE_FATURAMENTO' || ';DS_PROGRAM=' || program || 	';DS_SID=' || sid || ';DS_SERIAL=' || serial# ||
		';DS_OSUSER=' || osuser || ';DS_MACHINE=' || machine),1,255)
	INTO STRICT	ds_erro_w
	FROM 	v$session
	WHERE	module = 'GERAR_PRE_FATURAMENTO';

	exception
	when others then
		ds_erro_w := '';
	end;

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '')  then
		CALL gravar_processo_longo('','',null);
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(233455,'DS_ERRO_P='||ds_erro_w);
	end if;

	dbms_application_info.set_module('GERAR_PRE_FATURAMENTO', null);
-- Gravacaoo do LOG (Utilizado em relatorio) -- OS 639728
nr_seq_log_w:= 0;
begin
select 	nextval('pre_fatur_log_seq')
into STRICT	nr_seq_log_w
;

dt_inicial_geracao_w := clock_timestamp();

insert 	into pre_fatur_log(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_referencia,
		cd_estabelecimento,
		dt_inicial_geracao,
		dt_final_geracao)
values (nr_seq_log_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		dt_referencia_p,
		cd_estabelecimento_p,
		dt_inicial_geracao_w,
		null);
exception
when others then
	nr_seq_log_w:= 0;
end;

SELECT	coalesce(max(ie_estab_pre_faturamento), 'N'),
	coalesce(max(ie_atualiza_conta_pre), 'N'),
	coalesce(max(ie_gerar_rep_conta_prefat),'N'),
	coalesce(max(ie_repasse_proc),'N'),
	coalesce(max(ie_atual_pre_fatur_mes),'S'),
	coalesce(max(ie_atualiza_rel_cc_pre), 'S'),
	coalesce(max(ie_despesa_pre_fatur), 'N'),
        coalesce(max(ie_desconto_contabil), 'N')
INTO STRICT	ie_estab_pre_faturamento_w,
	ie_atualiza_conta_pre_w,
	ie_gerar_rep_conta_prefat_w,
	ie_repasse_proc_w,
	ie_atual_pre_fatur_mes_w,
	ie_atualiza_rel_cc_pre_w,
	ie_despesa_pre_fatur_w,
        ie_desconto_contabil_w
FROM	parametro_faturamento
WHERE	cd_estabelecimento = cd_estabelecimento_p;

cd_estabelecimento_w		:= 0;
IF (ie_estab_pre_faturamento_w = 'S') THEN
	cd_estabelecimento_w	:= cd_estabelecimento_p;
END IF;


begin
ie_modo_lote_w := ctb_online_pck.get_modo_lote( 8, cd_estabelecimento_p, null);
exception when others then
	ie_modo_lote_w	:= 'N';
end;

/* Data inicial 3 meses anteriores a data atual*/

dt_inicio_w		:= pkg_date_utils.start_of(dt_referencia_p - 90, 'MONTH',0);
dt_final_w		:= pkg_date_utils.end_of(dt_referencia_p, 'MONTH', 0);
dt_referencia_w		:= pkg_date_utils.start_of(dt_referencia_p, 'MONTH',0);

if (coalesce(ie_atual_pre_fatur_mes_w,'S') = 'N') then

	select	coalesce(max(nr_lote_contabil), 0)
	into STRICT	nr_lote_contabil_w
	from 	lote_contabil a
	where	a.cd_estabelecimento 		= cd_estabelecimento_w
	and	pkg_date_utils.start_of(a.dt_referencia,'MONTH',0)	= dt_referencia_w
	and	a.cd_tipo_lote_contabil	= 8
	and	exists (SELECT	1
			from	movimento_contabil z
			where	z.nr_lote_contabil	= a.nr_lote_contabil);

	if (nr_lote_contabil_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(271313,'NR_LOTE_CONTABIL_W='||nr_lote_contabil_w);
	end if;
end if;

delete
from	pre_fatur_tributo a
where	exists (SELECT	1
		from	pre_faturamento b
		where	b.nr_sequencia = a.nr_seq_pre_fatur
		and (b.cd_estabelecimento = cd_estabelecimento_w or cd_estabelecimento_w = 0)
		and	b.dt_referencia = dt_referencia_w)
and	a.dt_referencia = dt_referencia_w;

DELETE	FROM pre_faturamento
WHERE	dt_referencia	= dt_referencia_w
AND (cd_estabelecimento	= cd_estabelecimento_w OR cd_estabelecimento_w = 0);
COMMIT;

DELETE FROM pre_fatur_conta
WHERE 	dt_referencia	= dt_referencia_w
AND (cd_estabelecimento	= cd_estabelecimento_w OR cd_estabelecimento_w = 0);
COMMIT;

/* Inserir as CONTAS que devem ser gravadas na PRE_FATUR_CONTA */

CALL gravar_processo_longo(substr(wheb_mensagem_pck.get_texto(307026),1,255),'GERAR_PRE_FATURAMENTO',0); --Obtendo conta paciente'
OPEN C01;
LOOP
FETCH C01 INTO
	vet01;
EXIT WHEN NOT FOUND; /* apply on C01 */
	BEGIN

	SELECT	coalesce(MAX(ie_pre_faturamento),'S')
	INTO STRICT	ie_pre_faturamento_w
	FROM	convenio_estabelecimento
	WHERE	cd_convenio			= vet01.cd_convenio_parametro
	AND	cd_estabelecimento		= vet01.cd_estabelecimento;

	IF (ie_pre_faturamento_w = 'S') THEN
		BEGIN
		i				:= i + 1;
		contas_w[i].nr_interno_conta	:= vet01.nr_interno_conta;
		contas_w[i].ie_status_acerto	:= vet01.ie_status_acerto;
		contas_w[i].cd_convenio		:= vet01.cd_convenio_parametro;
		contas_w[i].nr_atendimento	:= vet01.nr_atendimento;
		contas_w[i].cd_estabelecimento	:= vet01.cd_estabelecimento;
		contas_w[i].ie_status_protocolo	:= vet01.ie_status_protocolo;
		contas_w[i].dt_geracao_resumo	:= vet01.dt_geracao_resumo;
		END;
	END IF;

	END;
END LOOP;
CLOSE C01;


/*Gravar CONTAS na PRE_FATUR_CONTA */

FOR i IN 1..contas_w.COUNT LOOP
	BEGIN

	-- Verifica se existe registros da conta paciente, para um outro estabelecimento na tabela PRE_FATURAMENTO
	SELECT	COUNT(*)
	INTO STRICT	qt_reg_conta_w
	FROM	pre_faturamento
	WHERE	nr_interno_conta = contas_w[i].nr_interno_conta
	AND	dt_referencia = dt_referencia_w
	AND	cd_estabelecimento <> contas_w[i].cd_estabelecimento;

	IF (qt_reg_conta_w > 0) THEN

		-- Se houver registro, deleta
		DELETE 	FROM pre_faturamento
		WHERE	nr_interno_conta = contas_w[i].nr_interno_conta
		AND	dt_referencia = dt_referencia_w
		AND	cd_estabelecimento <> contas_w[i].cd_estabelecimento;

	END IF;

	-- Verifica se existe registros da conta paciente, para um outro estabelecimento na tabela PRE_FATUR_CONTA
	SELECT	COUNT(*)
	INTO STRICT	qt_reg_conta_w
	FROM	pre_fatur_conta
	WHERE	nr_interno_conta = contas_w[i].nr_interno_conta
	AND	dt_referencia = dt_referencia_w
	AND	cd_estabelecimento <> contas_w[i].cd_estabelecimento;

	IF (qt_reg_conta_w > 0) THEN

		-- Se houver registro, deleta
		DELETE 	FROM pre_fatur_conta
		WHERE	nr_interno_conta = contas_w[i].nr_interno_conta
		AND	dt_referencia = dt_referencia_w
		AND	cd_estabelecimento <> contas_w[i].cd_estabelecimento;

	END IF;

	qt_registro_w	:= qt_registro_w + 1;

	CALL gravar_processo_longo(substr(wheb_mensagem_pck.get_texto(307028),1,255)|| ': ' || contas_w[i].nr_interno_conta,'GERAR_PRE_FATURAMENTO',0);--Gravando conta paciente
	INSERT INTO pre_fatur_conta(
		dt_referencia,
		nr_interno_conta,
		ie_status_acerto,
		dt_atualizacao,
		nm_usuario,
		vl_conta,
		cd_convenio,
		nr_atendimento,
		cd_estabelecimento)
	VALUES (	dt_referencia_w,
		contas_w[i].nr_interno_conta,
		contas_w[i].ie_status_acerto,
		clock_timestamp(),
		nm_usuario_p,
		0,
		contas_w[i].cd_convenio,
		contas_w[i].nr_atendimento,
		contas_w[i].cd_estabelecimento);

	IF (qt_registro_w >= 2000) THEN
		qt_registro_w := 0;
		COMMIT;
	END IF;
	END;
END LOOP;

COMMIT;

/* Verifica as contas paciente que possuem itens sem conta contabil e atualiza estes itens (MATERIAL_ATEND_PACIENTE e PROCEDIMENTO_PACIENTE
grava estas informacoes na W_CONTA_PRE_FATUR*/
IF (ie_atualiza_rel_cc_pre_w = 'S') THEN
    CALL gravar_processo_longo(substr(wheb_mensagem_pck.get_texto(307030),1,255),'ATUALIZAR_CONTA_PRE_FATUR',-1);    --  Atualizando conta contabil conta
    atualizar_conta_pre_fatur(cd_estabelecimento_w, dt_referencia_w, nm_usuario_p);
END IF;


qt_registro_w	:= 0;

/* Gera o resumo das contas*/

FOR i IN 1..contas_w.COUNT LOOP
	BEGIN
	qt_registro_w	:= qt_registro_w + 1;
	CALL gravar_processo_longo( substr(wheb_mensagem_pck.get_texto(307031),1,255)|| ': ' || contas_w[i].nr_interno_conta,'ATUALIZAR_RESUMO_CONTA',-1);--Atualizando resumo conta

	/* Atualizar as contas contabeis da conta paciente */

	if (ie_atualiza_conta_pre_w = 'S') then
		CALL atualizar_conta_contabil_pre(contas_w[i].nr_interno_conta,dt_referencia_w,'S');
	end if;

	if (ie_gerar_rep_conta_prefat_w = 'S') then
		begin
		if (contas_w[i].ie_status_acerto = 1) and (ie_repasse_proc_w = 'C') then
			CALL Recalcular_Conta_Repasse(contas_w[i].nr_interno_conta, null, null, nm_usuario_p);
		elsif (coalesce(contas_w[i].ie_status_acerto,0) = 2) and (coalesce(contas_w[i].ie_status_protocolo,0) = 1) and (ie_repasse_proc_w = 'P') then
			CALL Recalcular_Conta_Repasse(contas_w[i].nr_interno_conta, null, null, nm_usuario_p);
		end if;
		end;
	end if;

	/* Gera o resumo da conta*/

	if	((coalesce(contas_w[i].ie_status_acerto,0) = 1) and (contas_w[i]coalesce(.dt_geracao_resumo::text, '') = '')) then -- Alteracao Fabricio em 04/11/2013 as 17:40 OS 661715
		CALL atualizar_resumo_conta(contas_w[i].nr_interno_conta, 2);
	end if;

	/* Obter valor total da conta*/

	SELECT	coalesce(SUM(coalesce(b.vl_procedimento,0) + coalesce(b.vl_material,0)),0)
	INTO STRICT	vl_conta_w
	FROM	conta_paciente_resumo b
	WHERE	b.nr_interno_conta	= contas_w[i].nr_interno_conta
	AND	b.dt_referencia	<= dt_final_w;

	/*Guarda valor da conta para atualizar depois */

	contas_w[i].vl_conta	:= vl_conta_w;

	IF (qt_registro_w >= 100) THEN
		qt_registro_w	:= 0;
		COMMIT;
	END IF;

	END;
END LOOP;

COMMIT;

qt_registro_w	:= 0;

FOR i IN 1..contas_w.COUNT LOOP
	BEGIN
        vl_desc_item_conta_w    := null;
        vl_original_w           := null;
        vl_desc_item_deduc_w    := null;
        vl_desc_item_neg_w      := null;
	qt_registro_w		:= qt_registro_w + 1;
	dt_atualizacao_w	:= clock_timestamp();
	CALL gravar_processo_longo(substr(wheb_mensagem_pck.get_texto(307033),1,255)|| ': ' || contas_w[i].nr_interno_conta,'GERAR_PRE_FATURAMENTO',-1);--Gravando itens da conta
	for c02_w in c02(dt_final_p		=> dt_final_w,
			dt_referencia_c		=> dt_referencia_w,
			cd_estabelecimento_c	=> contas_w[i].cd_estabelecimento,
			nr_interno_conta_c	=> contas_w[i].nr_interno_conta) loop
		begin

                vl_desc_item_conta_w	:= null;
                vl_original_w		:= null;
                vl_desc_item_deduc_w	:= null;
                vl_desc_item_neg_w	:= null;

                if (ie_desconto_contabil_w = 'S') then
                        select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END 
                        into STRICT	ie_conta_deducao_w
                        from	conta_pac_deducao_conv a
                        where	a.nr_seq_conta_des = contas_w[i].nr_interno_conta;

                        if (ie_conta_deducao_w = 'N') then
                                nr_interno_conta_cc     := contas_w[i].nr_interno_conta;
                                cd_procedimento_c       := c02_w.cd_procedimento;
                                ie_origem_proced_c      := c02_w.ie_origem_proced;
                                nr_seq_proc_interno_c   := c02_w.nr_seq_proc_interno;
                                cd_setor_atendimento_c  := c02_w.cd_setor_atendimento;
                                cd_setor_receita_c      := c02_w.cd_setor_receita;
                                cd_conta_contabil_c     := c02_w.cd_conta_contabil;
                                cd_especialidade_c      := c02_w.cd_especialidade;
                                cd_convenio_c           := c02_w.cd_convenio;
                                nr_seq_grupo_rec_c      := c02_w.nr_seq_grupo_rec;
                                cd_setor_paciente_c     := c02_w.cd_setor_paciente;
                                cd_estrutura_conta_c    := c02_w.cd_estrutura_conta;
                                cd_material_c           := c02_w.cd_material;
                                cd_unidade_medida_c     := c02_w.cd_unidade_medida;

                                OPEN C03;
                                LOOP
                                FETCH C03 INTO
                                        nr_seq_proc_w,
                                        qt_proc_w,
                                        vl_proc_w;
                                EXIT WHEN NOT FOUND; /* apply on C03 */
                                        BEGIN

                                        vl_desc_item_neg_orig_w         := null;

                                        vl_desc_item_conta_orig_w	:= obter_desconto_matproc(nr_seq_proc_w, 'P');
                                        vl_original_orig_w		:= obter_vl_item_conta_original(nr_seq_proc_w, null) * qt_proc_w;
                                        vl_desc_item_deduc_orig_w	:= obter_valor_deducao_item(nr_seq_proc_w, null);

                                        if (vl_original_orig_w IS NOT NULL AND vl_original_orig_w::text <> '') then
                                                vl_desc_item_neg_orig_w	:= vl_original_orig_w - coalesce(vl_proc_w, 0) - coalesce(vl_desc_item_conta_orig_w, 0) - coalesce(vl_desc_item_deduc_orig_w, 0);
                                        end if;

                                        vl_desc_item_conta_w	:= coalesce(vl_desc_item_conta_w,0) + coalesce(vl_desc_item_conta_orig_w,0);
                                        vl_original_w		:= coalesce(vl_original_w,0) + coalesce(vl_original_orig_w,0);
                                        vl_desc_item_deduc_w	:= coalesce(vl_desc_item_deduc_w,0) + coalesce(vl_desc_item_deduc_orig_w,0);
                                        vl_desc_item_neg_w	:= coalesce(vl_desc_item_neg_w,0) + coalesce(vl_desc_item_neg_orig_w,0);

                                        END;
                                END LOOP;
                                CLOSE C03;

                                OPEN C04;
                                LOOP
                                FETCH C04 INTO
                                        nr_seq_mat_w,
                                        qt_mat_w,
                                        vl_mat_w;
                                EXIT WHEN NOT FOUND; /* apply on C04 */
                                        BEGIN

                                        vl_desc_item_neg_orig_w         := null;

                                        vl_desc_item_conta_orig_w	:= obter_desconto_matproc(nr_seq_mat_w, 'M');
                                        vl_original_orig_w		:= obter_vl_item_conta_original(null, nr_seq_mat_w) * qt_mat_w;
                                        vl_desc_item_deduc_orig_w	:= obter_valor_deducao_item(null, nr_seq_mat_w);

                                        if (vl_original_orig_w IS NOT NULL AND vl_original_orig_w::text <> '') then
                                                vl_desc_item_neg_orig_w	:= vl_original_orig_w - coalesce(vl_mat_w, 0) - coalesce(vl_desc_item_conta_orig_w, 0) - coalesce(vl_desc_item_deduc_orig_w, 0);
                                        end if;

                                        vl_desc_item_conta_w	:= coalesce(vl_desc_item_conta_w,0) + coalesce(vl_desc_item_conta_orig_w,0);
                                        vl_original_w		:= coalesce(vl_original_w,0) + coalesce(vl_original_orig_w,0);
                                        vl_desc_item_deduc_w	:= coalesce(vl_desc_item_deduc_w,0) + coalesce(vl_desc_item_deduc_orig_w,0);
                                        vl_desc_item_neg_w	:= coalesce(vl_desc_item_neg_w,0) + coalesce(vl_desc_item_neg_orig_w,0);

                                        END;
                                END LOOP;
                                CLOSE C04;
                        end if;
                end if;

                /* Grava os itens das contas ja gravadas no pre_fatur_conta*/

		INSERT INTO pre_faturamento(
			nr_sequencia,
			dt_referencia,
			cd_convenio,
			dt_atualizacao,
			nm_usuario,
			cd_setor_receita,
			cd_setor_atendimento,
			cd_especialidade,
			cd_conta_contabil,
			cd_material,
			cd_unidade_medida,
			ie_origem_proced,
			cd_procedimento,
			nr_seq_grupo_rec,
			cd_estrutura_conta,
			ie_diaria,
			qt_resumo,
			vl_medico,
			nr_seq_conta_financ,
			cd_conta_desp_pre_fatur,
			vl_auxiliares,
			vl_custo_operacional,
			vl_anestesista,
			vl_materiais,
			vl_procedimento,
			vl_material,
			vl_medico_fora_conta,
			vl_sadt_fora_conta,
			vl_repasse_terceiro,
			vl_custo,
			nr_interno_conta,
			cd_estabelecimento,
			vl_repasse_calc,
			dt_receita,
			nr_seq_proc_interno,
			vl_original,
			vl_desc_item_conta,
			vl_desc_item_deduc,
			vl_desc_item_neg,
			cd_sequencia_parametro)
		values (	nextval('pre_faturamento_seq'),
			c02_w.dt_referencia_w,
			c02_w.cd_convenio,
			c02_w.dt_atualizacao_w,
			c02_w.nm_usuario_p,
			c02_w.cd_setor_receita,
			c02_w.cd_setor_atendimento,
			c02_w.cd_especialidade,
			c02_w.cd_conta_contabil,
			c02_w.cd_material,
			c02_w.cd_unidade_medida,
			c02_w.ie_origem_proced,
			c02_w.cd_procedimento,
			c02_w.nr_seq_grupo_rec,
			c02_w.cd_estrutura_conta,
			c02_w.ie_diaria,
			c02_w.qt_resumo,
			c02_w.vl_medico,
			c02_w.nr_seq_conta_financ,
			CASE WHEN  ie_despesa_pre_fatur_w='S' THEN ctb_obter_conta_mat_proc(										c02_w.cd_estabelecimento,										c02_w.nr_interno_conta,										contas_w[i].nr_atendimento,										c02_w.cd_material,										c02_w.cd_procedimento,										c02_w.ie_origem_proced,										4)  ELSE null END ,
			c02_w.vl_auxiliares,
			c02_w.vl_custo_operacional,
			c02_w.vl_anestesista,
			c02_w.vl_materiais,
			c02_w.vl_procedimento,
			c02_w.vl_material,
			c02_w.vl_medico_fora_conta,
			c02_w.vl_sadt_fora_conta,
			c02_w.vl_repasse_terceiro,
			c02_w.vl_custo,
			c02_w.nr_interno_conta,
			c02_w.cd_estabelecimento,
			c02_w.vl_repasse_calc,
			pkg_date_utils.start_of(c02_w.dt_referencia,'MONTH',0),
			c02_w.nr_seq_proc_interno,
			vl_original_w,
			vl_desc_item_conta_w,
			vl_desc_item_deduc_w,
			vl_desc_item_neg_w,
			c02_w.cd_sequencia_parametro);

		/* Atualiza o valor total da conta */

		update	pre_fatur_conta a
		set 	a.vl_conta		= contas_w[i].vl_conta
		where	a.dt_referencia		= dt_referencia_w
		and	a.cd_estabelecimento	= contas_w[i].cd_estabelecimento
		and	a.nr_interno_conta	= contas_w[i].nr_interno_conta;

		if (qt_registro_w >= 500) then
			qt_registro_w	:= 0;
			commit;
		end if;
		end;
	end loop;
	END;
END LOOP;

if (nr_seq_log_w > 0) then

	dt_final_geracao_w := clock_timestamp();

	update	pre_fatur_log
	set 	dt_final_geracao = dt_final_geracao_w
	where 	nr_sequencia = nr_seq_log_w;

end if;

CALL gerar_pre_fatur_tributo(nm_usuario_p, dt_referencia_w, coalesce(cd_estabelecimento_w,cd_estabelecimento_p));

COMMIT;

CALL gravar_processo_longo(substr(wheb_mensagem_pck.get_texto(307034),1,255),'GERAR_PRE_FATURAMENTO',-1);--Consistindo
/*Consistencia realizada dentro do Tasy(Programa)*/



/* Trata MODO ONLINE */

if (ie_modo_lote_w = 'S')then
	CALL ctb_contab_onl_pre_fatur(	cd_estabelecimento_w,
			dt_referencia_w,
			nm_usuario_p );
end if;

dbms_application_info.set_module(ds_module_w, ds_action_w);

if (ds_email_envio_w IS NOT NULL AND ds_email_envio_w::text <> '') then

	select	max(ds_email)
	into STRICT	ds_email_origem_w
	from	usuario
	where	nm_usuario = nm_usuario_p;

	CALL enviar_email(wheb_mensagem_pck.get_texto(1099097), wheb_mensagem_pck.get_texto(1099098, 'NM_USUARIO=' || nm_usuario_p || ';DT_REFERENCIA=' || to_char(dt_referencia_p, ds_mask_shortdate_w) || ';DT_INICIO_GERACAO=' || to_char(dt_inicial_geracao_w, ds_mask_timestamp_w) || ';DT_FIM_GERACAO=' || to_char(dt_final_geracao_w, ds_mask_timestamp_w)), ds_email_origem_w, ds_email_envio_w, nm_usuario_p, 'M');
end if;

exception
when others then
	dbms_application_info.set_module(ds_module_w, ds_action_w);

	if (ds_email_envio_w IS NOT NULL AND ds_email_envio_w::text <> '') then
		begin

		select	max(ds_email)
		into STRICT	ds_email_origem_w
		from	usuario
		where	nm_usuario = nm_usuario_p;

		CALL enviar_email(wheb_mensagem_pck.get_texto(1099349), wheb_mensagem_pck.get_texto(1099098, 'NM_USUARIO=' || nm_usuario_p || ';DT_REFERENCIA=' || to_char(dt_referencia_p, ds_mask_shortdate_w) || ';DT_INICIO_GERACAO=' || to_char(dt_inicial_geracao_w, ds_mask_timestamp_w) || ';DT_FIM_GERACAO=' || to_char(dt_final_geracao_w, ds_mask_timestamp_w)) || chr(10) || chr(10) || wheb_mensagem_pck.get_texto(233455,'DS_ERRO_P='||SQLERRM), ds_email_origem_w, ds_email_envio_w, nm_usuario_p, 'M');

		exception
		when others then
			null;
		end;

	end if;

	if (coalesce(ie_atualiza_job_w,'N') <> 'S') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(233455,'DS_ERRO_P='||SQLERRM);
	end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_pre_faturamento ( dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

