-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_repasse_gratuidade (nr_titulo_p bigint, vl_glosa_p bigint, nm_usuario_p text, ie_repasse_gratuidade_p text) AS $body$
DECLARE


nr_interno_conta_w 	bigint;
nr_seq_protocolo_w	bigint;
vl_titulo_w		double precision;
nr_seq_repasse_w	bigint;
nr_seq_proc_rep_novo_w	bigint;
nr_seq_mat_rep_novo_w	bigint;


vl_repasse_w		double precision;
pr_glosa_w		double precision;

c01 CURSOR FOR
	SELECT 	a.nr_sequencia,
		b.nr_interno_conta,
		a.vl_repasse
	from 	procedimento_repasse a,
		procedimento_paciente b
	where	b.nr_sequencia = a.nr_seq_procedimento
	and	b.nr_interno_conta = nr_interno_conta_w
	and	a.ie_status in ('A', 'U');

c02 CURSOR FOR
	SELECT 	a.nr_sequencia,
		b.nr_interno_conta,
		a.vl_repasse
	from 	material_repasse a,
		material_atend_paciente b
	where	b.nr_sequencia = a.nr_seq_material
	and	b.nr_interno_conta = nr_interno_conta_w
	and	a.ie_status in ('A', 'U');

c03 CURSOR FOR
	SELECT 	a.nr_sequencia,
		b.nr_interno_conta,
		a.vl_repasse
	from 	conta_paciente c,
		procedimento_repasse a,
		procedimento_paciente b
	where	b.nr_sequencia = a.nr_seq_procedimento
	and 	b.nr_interno_conta = c.nr_interno_conta
	and	c.nr_seq_protocolo = nr_seq_protocolo_w
	and	a.ie_status in ('A', 'U');

c04 CURSOR FOR
	SELECT 	a.nr_sequencia,
		b.nr_interno_conta,
		a.vl_repasse
	from 	conta_paciente c,
		material_repasse a,
		material_atend_paciente b
	where	b.nr_sequencia = a.nr_seq_material
	and 	b.nr_interno_conta = c.nr_interno_conta
	and	c.nr_seq_protocolo = nr_seq_protocolo_w
	and	a.ie_status in ('A', 'U');



BEGIN
select	nr_interno_conta,
	nr_seq_protocolo,
	vl_saldo_titulo
into STRICT	nr_interno_conta_w,
	nr_seq_protocolo_w,
	vl_titulo_w
from 	titulo_receber
where 	nr_titulo = nr_titulo_p;

pr_glosa_w := dividir_sem_round(vl_glosa_p,vl_titulo_w);

if (nr_interno_conta_w IS NOT NULL AND nr_interno_conta_w::text <> '') then

	open C01;
	loop
	fetch C01 into
		nr_seq_repasse_w,
		nr_interno_conta_w,
		vl_repasse_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

		if (vl_titulo_w > vl_glosa_p) then

			update procedimento_repasse
			set 	ie_status 	= CASE WHEN ie_repasse_gratuidade_p='L' THEN 'L'  ELSE 'G' END ,
				vl_liberado	= CASE WHEN ie_repasse_gratuidade_p='L' THEN vl_repasse_w * pr_glosa_w  ELSE 0 END ,
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp(),
				vl_repasse	= vl_repasse_w * pr_glosa_w
			where nr_sequencia = nr_seq_repasse_w;

			desdobrar_procmat_repasse(nr_seq_repasse_w, null, 'A', vl_repasse_w - (vl_repasse_w * pr_glosa_w), nm_usuario_p,
							nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w);

		else
			update procedimento_repasse
			set 	ie_status 	= CASE WHEN ie_repasse_gratuidade_p='L' THEN 'L'  ELSE 'G' END ,
				vl_liberado	= CASE WHEN ie_repasse_gratuidade_p='L' THEN vl_repasse_w * pr_glosa_w  ELSE 0 END ,
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where nr_sequencia = nr_seq_repasse_w;
		end if;
	end loop;
	close C01;

	open C02;
	loop
	fetch C02 into
		nr_seq_repasse_w,
		nr_interno_conta_w,
		vl_repasse_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		if (vl_titulo_w > vl_glosa_p) then
			update 	material_repasse
			set 	ie_status 	= CASE WHEN ie_repasse_gratuidade_p='L' THEN 'L'  ELSE 'G' END ,
				vl_liberado	= CASE WHEN ie_repasse_gratuidade_p='L' THEN vl_repasse_w * pr_glosa_w  ELSE 0 END ,
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp(),
				vl_repasse	= vl_repasse * pr_glosa_w
			where nr_sequencia = nr_seq_repasse_w;

			desdobrar_procmat_repasse(null, nr_seq_repasse_w, 'A', vl_repasse_w - (vl_repasse_w * pr_glosa_w), nm_usuario_p,
							nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w);

		else
			update material_repasse
			set 	ie_status 	= CASE WHEN ie_repasse_gratuidade_p='L' THEN 'L'  ELSE 'G' END ,
				vl_liberado	= CASE WHEN ie_repasse_gratuidade_p='L' THEN vl_repasse_w * pr_glosa_w  ELSE 0 END ,
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where nr_sequencia = nr_seq_repasse_w;
		end if;

	end loop;
	close C02;

elsif (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') then
	open c03;
	loop
	fetch c03 into
		nr_seq_repasse_w,
		nr_interno_conta_w,
		vl_repasse_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */

		if (vl_titulo_w > vl_glosa_p) then

			update procedimento_repasse
			set 	ie_status 	= CASE WHEN ie_repasse_gratuidade_p='L' THEN 'L'  ELSE 'G' END ,
				vl_liberado	= CASE WHEN ie_repasse_gratuidade_p='L' THEN vl_repasse_w * pr_glosa_w  ELSE 0 END ,
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp(),
				vl_repasse	= vl_repasse * pr_glosa_w
			where nr_sequencia = nr_seq_repasse_w;

			desdobrar_procmat_repasse(nr_seq_repasse_w, null, 'A', vl_repasse_w - (vl_repasse_w * pr_glosa_w), nm_usuario_p,
							nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w);

		else
			update procedimento_repasse
			set 	ie_status 	= CASE WHEN ie_repasse_gratuidade_p='L' THEN 'L'  ELSE 'G' END ,
				vl_liberado	= CASE WHEN ie_repasse_gratuidade_p='L' THEN vl_repasse_w * pr_glosa_w  ELSE 0 END ,
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where nr_sequencia = nr_seq_repasse_w;

		end if;
	end loop;
	close c03;

	open c04;
	loop
	fetch c04 into
		nr_seq_repasse_w,
		nr_interno_conta_w,
		vl_repasse_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */

		if (vl_titulo_w > vl_glosa_p) then
			update 	material_repasse
			set 	ie_status 	= CASE WHEN ie_repasse_gratuidade_p='L' THEN 'L'  ELSE 'G' END ,
				vl_liberado	= CASE WHEN ie_repasse_gratuidade_p='L' THEN vl_repasse_w * pr_glosa_w  ELSE 0 END ,
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp(),
				vl_repasse	= vl_repasse - (vl_repasse * pr_glosa_w)
			where nr_sequencia = nr_seq_repasse_w;

			desdobrar_procmat_repasse(null, nr_seq_repasse_w, 'A', vl_repasse_w - (vl_repasse_w * pr_glosa_w), nm_usuario_p,
										nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w);

		else
			update material_repasse
			set 	ie_status 	= CASE WHEN ie_repasse_gratuidade_p='L' THEN 'L'  ELSE 'G' END ,
				vl_liberado	= CASE WHEN ie_repasse_gratuidade_p='L' THEN vl_repasse_w * pr_glosa_w  ELSE 0 END ,
				dt_liberacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where nr_sequencia = nr_seq_repasse_w;
		end if;

	end loop;
	close c04;
end if;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_repasse_gratuidade (nr_titulo_p bigint, vl_glosa_p bigint, nm_usuario_p text, ie_repasse_gratuidade_p text) FROM PUBLIC;

