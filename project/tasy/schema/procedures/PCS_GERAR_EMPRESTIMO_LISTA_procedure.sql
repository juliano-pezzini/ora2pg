-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pcs_gerar_emprestimo_lista ( nr_seq_registro_p bigint, cd_estabelecimento_p bigint, cd_estab_solicitante_p bigint, cd_local_solicitante_p bigint, cd_local_solicitado_p bigint, qt_material_p bigint, dt_retorno_p timestamp, cd_material_p text, nr_emprestimo_p INOUT bigint, nr_emprestimo_saida_p INOUT bigint, nm_usuario_p text) AS $body$
DECLARE


cd_estabelecimento_w				smallint;
cd_local_estoque_w					smallint;
nr_item_oci_w						integer;
cd_material_w						integer;
nr_emprestimo_entrada_w						bigint;
nr_emprestimo_saida_w				bigint;
cd_pessoa_fisica_w					varchar(10);
cd_pj_solicitante_w	varchar(14);
cd_pj_solicitado_w	varchar(14);
qt_material_w				double precision;
nr_sequencia_w				bigint;
vl_unitario_material_w		double precision;
ie_gerou_entrada_w			varchar(1);
ie_gerou_saida_w			varchar(1);

c01 CURSOR FOR
SELECT	distinct c.cd_material
from	material c,
		pcs_reg_analise_itens a
where	c.cd_material = a.cd_material
and		a.nr_Seq_registro =	nr_seq_registro_p
and (a.cd_material 			= coalesce(cd_material_p, a.cd_material))
and (c.ie_situacao			= 'A')
order by c.cd_material;

c02 CURSOR FOR
SELECT	distinct c.cd_material
from	material c,
		pcs_reg_analise_itens a
where	c.cd_material = a.cd_material
and		a.nr_Seq_registro =	nr_seq_registro_p
and (a.cd_material 			= coalesce(cd_material_p, a.cd_material))
and (c.ie_situacao			= 'A')
order by c.cd_material;


BEGIN
/*******Entrada********/

ie_gerou_entrada_w	:= 'N';

if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then
	select	cd_cgc
	into STRICT	cd_pj_solicitado_w
	from	estabelecimento
	where	cd_estabelecimento	= cd_estabelecimento_p;
end if;


open C01;
loop
fetch C01 into
	cd_material_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	if (ie_gerou_entrada_w = 'N') then
		begin
		if (coalesce(nr_emprestimo_p, 0) > 0) then
			nr_emprestimo_entrada_w	:= nr_emprestimo_p;
		end if;

		if (coalesce(nr_emprestimo_p,0) = 0) then

			select	nextval('emprestimo_seq')
			into STRICT	nr_emprestimo_entrada_w
			;

			insert into emprestimo(
				nr_emprestimo,
				cd_estabelecimento,
				cd_local_estoque,
				ie_tipo,
				dt_emprestimo,
				dt_atualizacao,
				nm_usuario,
				cd_pessoa_juridica,
				nr_documento,
				nm_usuario_resp,
				ie_situacao,
				dt_prev_retorno,
				ie_origem,
				nr_emprestimo_ref)
			values (	nr_emprestimo_entrada_w,
				cd_estab_solicitante_p,
				cd_local_solicitante_p,
				'E',
				clock_timestamp(),
				clock_timestamp(),
				nm_usuario_p,
				--cd_pj_solicitante_w,
				cd_pj_solicitado_w,-- Deve ser infomor o cnpj do solicitado(de quem veio)
				nr_seq_registro_p,
				nm_usuario_p,
				'A',
				dt_retorno_p,
				'P',
				nr_emprestimo_entrada_w);

		end if;
		ie_gerou_entrada_w	:= 'S';
		end;
	end if;

	if (qt_material_p > 0) then
		begin

		select	coalesce(max(nr_sequencia),0) +1
		into STRICT	nr_sequencia_w
		from	emprestimo_material
		where	nr_emprestimo = nr_emprestimo_entrada_w;

		insert into emprestimo_material(
			nr_sequencia,
			nr_emprestimo,
			cd_material,
			qt_material,
			dt_atualizacao,
			nm_usuario,
			qt_emprestimo,
			qt_solicitada,
			vl_referencia)
		values (	nr_sequencia_w,
			nr_emprestimo_entrada_w,
			cd_material_w,
			qt_material_p,
			clock_timestamp(),
			nm_usuario_p,
			qt_material_p,
			qt_material_p,
			vl_unitario_material_w);

		update	pcs_reg_analise_itens
		set		nr_emprestimo = nr_emprestimo_entrada_w
		where	nr_Seq_registro = nr_seq_registro_p
		and		cd_material		= cD_material_p;

		end;
	end if;
	end;
end loop;
close C01;

commit;
/***********Saída***********/

ie_gerou_saida_w	:= 'N';

if (cd_estab_solicitante_p IS NOT NULL AND cd_estab_solicitante_p::text <> '') then
	select	cd_cgc
	into STRICT	cd_pj_solicitante_w
	from	estabelecimento
	where	cd_estabelecimento	= cd_estab_solicitante_p;
end if;

open C02;
loop
fetch C02 into
	cd_material_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin

	if (ie_gerou_saida_w = 'N') then
		begin
		if (coalesce(nr_emprestimo_saida_p, 0) > 0) then
			nr_emprestimo_saida_w	:= nr_emprestimo_saida_p;
		end if;

		if (coalesce(nr_emprestimo_saida_p,0) = 0) then

			select	nextval('emprestimo_seq')
			into STRICT	nr_emprestimo_saida_w
			;

			insert into emprestimo(
				nr_emprestimo,
				cd_estabelecimento,
				cd_local_estoque,
				ie_tipo,
				dt_emprestimo,
				dt_atualizacao,
				nm_usuario,
				cd_pessoa_juridica,
				nr_documento,
				nm_usuario_resp,
				ie_situacao,
				dt_prev_retorno,
				nr_emprestimo_ref,
				ie_origem)
			values (	nr_emprestimo_saida_w,
				cd_estabelecimento_p,
				cd_local_solicitado_p,
				'S',
				clock_timestamp(),
				clock_timestamp(),
				nm_usuario_p,
				cd_pj_solicitante_w, --Deve ser do solicitante (Informar para quem está saindo)
				nr_seq_registro_p,
				nm_usuario_p,
				'A',
				dt_retorno_p,
				nr_emprestimo_entrada_w,
				'P');

		end if;
		ie_gerou_saida_w	:= 'S';

		update	emprestimo
		set	nr_emprestimo_ref = nr_emprestimo_saida_w
		where 	nr_emprestimo = nr_emprestimo_entrada_w;

		end;
	end if;

	if (qt_material_p > 0) then
		begin

		select	coalesce(max(nr_sequencia),0) +1
		into STRICT	nr_sequencia_w
		from	emprestimo_material
		where	nr_emprestimo = nr_emprestimo_saida_w;

		insert into emprestimo_material(
			nr_sequencia,
			nr_emprestimo,
			cd_material,
			qt_material,
			dt_atualizacao,
			nm_usuario,
			qt_emprestimo,
			qt_solicitada,
			vl_referencia)
		values (	nr_sequencia_w,
			nr_emprestimo_saida_w,
			cd_material_w,
			qt_material_p,
			clock_timestamp(),
			nm_usuario_p,
			qt_material_p,
			qt_material_p,
			vl_unitario_material_w);


		update	pcs_reg_analise_itens
		set		nr_emprestimo = nr_emprestimo_saida_w
		where	nr_Seq_registro = nr_seq_registro_p
		and		cd_material		= cD_material_p;

		end;
	end if;
	end;
end loop;
close C02;


commit;

nr_emprestimo_p			:= coalesce(nr_emprestimo_entrada_w,0);
nr_emprestimo_saida_p	:= coalesce(nr_emprestimo_saida_w,0);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pcs_gerar_emprestimo_lista ( nr_seq_registro_p bigint, cd_estabelecimento_p bigint, cd_estab_solicitante_p bigint, cd_local_solicitante_p bigint, cd_local_solicitado_p bigint, qt_material_p bigint, dt_retorno_p timestamp, cd_material_p text, nr_emprestimo_p INOUT bigint, nr_emprestimo_saida_p INOUT bigint, nm_usuario_p text) FROM PUBLIC;

