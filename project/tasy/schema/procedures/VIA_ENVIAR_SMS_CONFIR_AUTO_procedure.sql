-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE via_enviar_sms_confir_auto () AS $body$
DECLARE

 
id_sms_w		bigint;
ie_envia_w		varchar(1);
ds_remetente_w		varchar(255);
ds_destinatario_w	varchar(255);
ds_mensagem_w		varchar(255);
nr_seq_viagem_w		bigint;
nm_usuario_w		varchar(15);
nm_pf_w			varchar(255);
ds_erro_w		varchar(2000);
nr_seq_reseva_w		bigint;
ds_esconder_ddi_w	varchar(1);

 
c01 CURSOR FOR 
SELECT	a.nr_sequencia nr_seq_viagem, 
	obter_mensagem_viagem(c.nr_sequencia,'T'), 
	CASE WHEN ds_esconder_ddi_w='S' THEN  obter_dados_pf(a.cd_pessoa_fisica,'TCD')  ELSE obter_dados_pf(a.cd_pessoa_fisica,'TCI') END , 
	obter_nome_pf(a.cd_pessoa_fisica) nm_pf, 
	d.nr_sequencia nr_seq_reserva 
from	via_viagem a, 
	via_transporte b, 
	via_reserva d, 
	via_reserva_transporte c 
where	a.nr_sequencia = b.nr_seq_viagem 
and	b.nr_sequencia = c.nr_seq_transporte 
and	d.nr_sequencia = c.nr_seq_reserva 
and	ie_etapa_viagem = 2 
and	a.dt_saida_prev > clock_timestamp() 
AND	a.dt_saida_prev < clock_timestamp() + interval '7 days' 
and	(d.nr_seq_meio_transp IS NOT NULL AND d.nr_seq_meio_transp::text <> '') 
and	not exists (	SELECT	1 
			from	log_envio_sms x 
			where	x.nr_seq_viagem = a.nr_sequencia 
			and	x.nr_seq_reserva = d.nr_sequencia 
			and	x.ie_tipo_viagem = 'T') 
order by 1, d.dt_saida_prev;

c02 CURSOR FOR 
SELECT	a.nr_sequencia nr_seq_viagem, 
	obter_mensagem_hospedagem(max(d.nr_sequencia)), 
	CASE WHEN ds_esconder_ddi_w='S' THEN  obter_dados_pf(a.cd_pessoa_fisica,'TCD')  ELSE obter_dados_pf(a.cd_pessoa_fisica,'TCI') END , 
	obter_nome_pf(a.cd_pessoa_fisica) nm_pf, 
	d.nr_sequencia nr_seq_reserva 
from	via_viagem a, 
	via_reserva d 
where	a.nr_sequencia = d.nr_seq_viagem 
and	a.ie_etapa_viagem = 2 
and	d.dt_entrada_hotel > clock_timestamp() 
and	d.dt_entrada_hotel < clock_timestamp() + interval '7 days' 
and	(d.nr_seq_hotel IS NOT NULL AND d.nr_seq_hotel::text <> '') 
and	not exists (	SELECT	1 
			from	log_envio_sms x 
			where	x.nr_seq_viagem = a.nr_sequencia 
			and	x.nr_seq_reserva = d.nr_sequencia 
			and	x.ie_tipo_viagem = 'H') 
group by	a.nr_sequencia,	a.cd_pessoa_fisica, d.nr_sequencia 
order by	1;


BEGIN 
ds_esconder_ddi_w := OBTER_VALOR_PARAM_USUARIO(0,214,0,obter_usuario_ativo,obter_estabelecimento_ativo);
 
select	pkg_date_utils.get_WeekDay(clock_timestamp()) 
into STRICT	ie_envia_w
;
 
if (ie_envia_w = '5') then 
	begin 
	nm_usuario_w := 'Job';
	ds_remetente_w := obter_valor_param_usuario(0, 63, obter_perfil_ativo, nm_usuario_w, 1);
 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_viagem_w, 
		ds_mensagem_w, 
		ds_destinatario_w, 
		nm_pf_w, 
		nr_seq_reseva_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		if (ds_destinatario_w = '0') then 
			ds_destinatario_w := '';
		end if;
		 
		if (ds_remetente_w IS NOT NULL AND ds_remetente_w::text <> '') and (ds_destinatario_w IS NOT NULL AND ds_destinatario_w::text <> '') and (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') and (nr_seq_viagem_w IS NOT NULL AND nr_seq_viagem_w::text <> '') and (nm_usuario_w IS NOT NULL AND nm_usuario_w::text <> '') then 
			begin 
			ds_erro_w := '';
			id_sms_w := wheb_sms.enviar_sms(ds_remetente_w, ds_destinatario_w, ds_mensagem_w, nm_usuario_w, id_sms_w);
			insert into log_envio_sms(	nr_sequencia, 
							dt_atualizacao, 
							nm_usuario, 
							dt_envio, 
							nr_telefone, 
							ds_mensagem, 
							nr_seq_viagem, 
							id_sms, 
							ie_tipo_viagem, 
							nr_seq_reserva) 
						values (	nextval('log_envio_sms_seq'), 
							clock_timestamp(), 
							nm_usuario_w, 
							clock_timestamp(), 
							ds_destinatario_w, 
							ds_mensagem_w, 
							nr_seq_viagem_w, 
							id_sms_w, 
							'T', 
							nr_seq_reseva_w);
 
			update	via_viagem 
			set	ie_etapa_viagem = 3 
			where	nr_sequencia = nr_seq_viagem_w;
			 
			exception 
				when others then 
					ds_erro_w	:= SQLERRM(SQLSTATE);
					ds_erro_w	:= ds_erro_w || chr(13) || chr(10) || Wheb_mensagem_pck.get_texto(306066, null) || ' ' || nm_pf_w; -- Nome: 
					CALL enviar_email(Wheb_mensagem_pck.get_texto(306064, null), ds_erro_w, 'support.informatics@philips.com', 'projetos@wheb.com.br', '', 'A');
								--Erro envio SMS 
			end;
		end if;
		end;
	end loop;
	close C01;
	 
	open C02;
	loop 
	fetch C02 into	 
		nr_seq_viagem_w, 
		ds_mensagem_w, 
		ds_destinatario_w, 
		nm_pf_w, 
		nr_seq_reseva_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		if (ds_destinatario_w = '0') then 
			ds_destinatario_w := '';
		end if;
 
		if (ds_remetente_w IS NOT NULL AND ds_remetente_w::text <> '') and (ds_destinatario_w IS NOT NULL AND ds_destinatario_w::text <> '') and (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') and (nr_seq_viagem_w IS NOT NULL AND nr_seq_viagem_w::text <> '') and (nm_usuario_w IS NOT NULL AND nm_usuario_w::text <> '') then 
			begin 
			ds_erro_w := '';
			id_sms_w := wheb_sms.enviar_sms(ds_remetente_w, ds_destinatario_w, ds_mensagem_w, nm_usuario_w, id_sms_w);
			insert into log_envio_sms(	nr_sequencia, 
							dt_atualizacao, 
							nm_usuario, 
							dt_envio, 
							nr_telefone, 
							ds_mensagem, 
							nr_seq_viagem, 
							id_sms, 
							ie_tipo_viagem, 
							nr_seq_reserva) 
						values (	nextval('log_envio_sms_seq'), 
							clock_timestamp(), 
							nm_usuario_w, 
							clock_timestamp(), 
							ds_destinatario_w, 
							ds_mensagem_w, 
							nr_seq_viagem_w, 
							id_sms_w, 
							'H', 
							nr_seq_reseva_w);
			exception 
				when others then 
					ds_erro_w	:= SQLERRM(SQLSTATE);
					ds_erro_w	:= ds_erro_w || chr(13) || chr(10) || Wheb_mensagem_pck.get_texto(306066, null) || ' ' || nm_pf_w; -- Nome: 
					CALL enviar_email(Wheb_mensagem_pck.get_texto(306064, null), ds_erro_w, 'support.informatics@philips.com', 'projetos@wheb.com.br', '', 'A');
								--Erro envio SMS 
			end;
		end if;
		end;
	end loop;
	close C02;
 
	commit;
	end;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE via_enviar_sms_confir_auto () FROM PUBLIC;

