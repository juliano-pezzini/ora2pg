-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_atualiza_valor_proc_mat ( nr_seq_conta_p bigint, dt_prev_envio_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_congenere_w		bigint;
nr_seq_segurado_w		bigint;
vl_procedimento_ptu_w		double precision	:= 0;
vl_co_ptu_w			double precision	:= 0;
vl_material_ptu_w		double precision	:= 0;
vl_taxa_servico_w		double precision	:= 0;
vl_taxa_co_w			double precision	:= 0;
vl_taxa_material_w		double precision	:= 0;
tx_intercambio_w		double precision	:= 0;
qt_dia_proced_receb_w		bigint;
ie_taxa_w			varchar(1);
dt_procedimento_w		timestamp;
dt_atendimento_w		timestamp;
dt_emissao_w			timestamp;
ie_tipo_guia_w			varchar(2);
dt_alta_w			timestamp;
dt_recebimento_fatura_w		ptu_fatura.dt_recebimento_fatura%type;
dt_postagem_fatura_w		ptu_fatura.dt_postagem%type;
nr_seq_grupo_coop_seg_w		pls_segurado.nr_seq_grupo_coop%type;
ie_beneficio_obito_w		pls_plano.ie_seguro_obito%type;
nr_seq_fatura_w			ptu_fatura.nr_sequencia%type;
ie_tipo_intercambio_w		pls_conta_v.ie_tipo_intercambio%type;
ie_tipo_conta_w			pls_conta.ie_tipo_conta%type;
ie_origem_conta_w		pls_conta.ie_origem_conta%type;
nr_seq_intercambio_w		pls_segurado.nr_seq_intercambio%type;
nr_seq_plano_w			pls_plano.nr_sequencia%type;
ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;
ie_pcmso_w			pls_segurado.ie_pcmso%type;
cd_procedimento_w		pls_conta_proc.cd_procedimento%type;
ie_origem_proced_w		pls_conta_proc.ie_origem_proced%type;
nr_seq_material_w		pls_conta_mat.nr_seq_material%type;

dados_conta_valor_w		pls_cta_valorizacao_pck.dados_conta;
dados_conta_proc_valor_w	pls_cta_valorizacao_pck.dados_conta_proc;
dados_conta_mat_valor_w		pls_cta_valorizacao_pck.dados_conta_mat;
dados_beneficiario_valor_w	pls_cta_valorizacao_pck.dados_beneficiario;
dados_fatura_valor_w		pls_cta_valorizacao_pck.dados_fatura;
dados_tx_interc_valor_w		pls_cta_valorizacao_pck.dados_taxa_intercambio;
dados_procedimento_w		pls_cta_valorizacao_pck.dados_procedimento;

C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		dt_procedimento, 
		vl_procedimento_ptu, 
		vl_co_ptu, 
		vl_material_ptu, 
		tx_intercambio, 
		vl_taxa_material, 
		vl_taxa_co, 
		vl_taxa_servico, 
		cd_procedimento, 
		ie_origem_proced 
	from	pls_conta_proc 
	where	nr_seq_conta	= nr_seq_conta_p 
	order by vl_procedimento desc;

C02 CURSOR FOR 
	SELECT	nr_sequencia, 
		dt_atendimento, 
		vl_material_ptu, 
		tx_intercambio, 
		vl_taxa_material, 
		nr_seq_material 
	from	pls_conta_mat 
	where	nr_seq_conta	= nr_seq_conta_p;


BEGIN 
 
if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') and (dt_prev_envio_p IS NOT NULL AND dt_prev_envio_p::text <> '') then 
	begin 
	 
	select	a.nr_seq_segurado, 
		a.nr_seq_congenere, 
		a.dt_atendimento, 
		a.ie_tipo_guia, 
		a.dt_alta, 
		a.ie_tipo_intercambio, 
		a.ie_tipo_conta, 
		a.ie_origem_conta, 
		a.nr_seq_fatura, 
		a.dt_recebimento_fatura, 
		a.dt_postagem_fatura, 
		b.nr_seq_intercambio, 
		b.nr_seq_plano, 
		b.nr_seq_grupo_coop, 
		b.ie_tipo_segurado, 
		b.ie_pcmso 
	into STRICT	nr_seq_segurado_w, 
		nr_seq_congenere_w, 
		dt_emissao_w, 
		ie_tipo_guia_w, 
		dt_alta_w, 
		ie_tipo_intercambio_w, 
		ie_tipo_conta_w, 
		ie_origem_conta_w, 
		nr_seq_fatura_w, 
		dt_recebimento_fatura_w, 
		dt_postagem_fatura_w, 
		nr_seq_intercambio_w, 
		nr_seq_plano_w, 
		nr_seq_grupo_coop_seg_w, 
		ie_tipo_segurado_w, 
		ie_pcmso_w 
	from	pls_conta_v	a, 
		pls_segurado	b 
	where	a.nr_sequencia	= nr_seq_conta_p 
	and	b.nr_sequencia	= a.nr_seq_segurado;
	 
	select	max(a.ie_seguro_obito) 
	into STRICT	ie_beneficio_obito_w 
	from	pls_plano a 
	where	a.nr_sequencia = nr_seq_plano_w;
	 
	dados_conta_valor_w.nr_sequencia 		:= nr_seq_conta_p;
	dados_conta_valor_w.nr_seq_congenere		:= nr_seq_congenere_w;
	dados_conta_valor_w.ie_origem_conta		:= ie_origem_conta_w;
	dados_conta_valor_w.ie_tipo_conta		:= ie_tipo_conta_w;
	dados_conta_valor_w.nr_seq_segurado		:= nr_seq_segurado_w;
	dados_conta_valor_w.ie_tipo_intercambio		:= ie_tipo_intercambio_w;
	dados_conta_valor_w.ie_tipo_guia		:= ie_tipo_guia_w;
	dados_conta_valor_w.dt_alta			:= dt_alta_w;
	dados_conta_valor_w.dt_atendimento		:= dt_emissao_w;
 
	dados_fatura_valor_w.nr_sequencia		:= nr_seq_fatura_w;
	dados_fatura_valor_w.dt_recebimento		:= dt_recebimento_fatura_w;
	dados_fatura_valor_w.dt_postagem		:= dt_postagem_fatura_w;
	 
	dados_beneficiario_valor_w.nr_sequencia		:= nr_seq_segurado_w;
	dados_beneficiario_valor_w.nr_seq_intercambio	:= nr_seq_intercambio_w;
	dados_beneficiario_valor_w.nr_seq_plano		:= nr_seq_plano_w;
	dados_beneficiario_valor_w.nr_seq_grupo_coop	:= nr_seq_grupo_coop_seg_w;
	dados_beneficiario_valor_w.ie_tipo_beneficiario	:= ie_tipo_segurado_w;
	dados_beneficiario_valor_w.ie_beneficio_obito	:= ie_beneficio_obito_w;
	dados_beneficiario_valor_w.ie_pcmso		:= ie_pcmso_w;
	 
	open C01;
	loop 
	fetch C01 into 
		nr_seq_conta_proc_w, 
		dt_procedimento_w, 
		vl_procedimento_ptu_w, 
		vl_co_ptu_w, 
		vl_material_ptu_w, 
		tx_intercambio_w, 
		vl_taxa_material_w, 
		vl_taxa_co_w, 
		vl_taxa_servico_w, 
		cd_procedimento_w, 
		ie_origem_proced_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		if (coalesce(dt_procedimento_w::text, '') = '') then 
			dt_procedimento_w	:= dt_emissao_w;
		end if;
		 
		dados_conta_proc_valor_w.nr_sequencia		:= nr_seq_conta_proc_w;
		dados_conta_proc_valor_w.nr_seq_conta		:= nr_seq_conta_p;
		dados_conta_proc_valor_w.ie_origem_proced	:= ie_origem_proced_w;
		dados_conta_proc_valor_w.cd_procedimento	:= cd_procedimento_w;
		dados_conta_proc_valor_w.dt_procedimento	:= dt_procedimento_w;
		 
		begin 
			select coalesce(a.nr_seq_grupo_rec, '0') 
			into STRICT	dados_procedimento_w.nr_seq_grupo_rec 
			from  procedimento a 
			where  a.cd_procedimento    = cd_procedimento_w 
			and   a.ie_origem_proced   = ie_origem_proced_w;
		exception 
			when others then 
			dados_procedimento_w.nr_seq_grupo_rec := '0';
		end;
		 
		vl_procedimento_ptu_w	:= coalesce(vl_procedimento_ptu_w,0);
		vl_co_ptu_w		:= coalesce(vl_co_ptu_w,0);
		vl_material_ptu_w	:= coalesce(vl_material_ptu_w,0);
		tx_intercambio_w	:= coalesce(tx_intercambio_w,0);
		 
		vl_procedimento_ptu_w	:= vl_procedimento_ptu_w - coalesce(vl_taxa_servico_w,0);
		vl_co_ptu_w		:= vl_co_ptu_w - coalesce(vl_taxa_co_w,0);
		vl_material_ptu_w	:= vl_material_ptu_w - coalesce(vl_taxa_material_w,0);
 
		-- Obter a taxa de intercâmbio. 
		dados_tx_interc_valor_w	:= pls_cta_valorizacao_pck.obter_taxa_intercambio( 
							dados_conta_valor_w, dados_conta_proc_valor_w, null, 
							dados_fatura_valor_w, dados_beneficiario_valor_w, dados_procedimento_w, cd_estabelecimento_p);
										 
		tx_intercambio_w := dados_tx_interc_valor_w.pr_taxa;
		 
		if (coalesce(tx_intercambio_w,0) <> 0) then 
			vl_taxa_servico_w	:= dividir((vl_procedimento_ptu_w 	* tx_intercambio_w),100);
			vl_taxa_co_w		:= dividir((vl_co_ptu_w			* tx_intercambio_w),100);
			vl_taxa_material_w	:= dividir((vl_material_ptu_w 		* tx_intercambio_w),100);
			update	pls_conta_proc 
			set	tx_intercambio			= tx_intercambio_w, 
				vl_taxa_material		= vl_taxa_material_w, 
				vl_taxa_co			= vl_taxa_co_w, 
				vl_taxa_servico			= vl_taxa_servico_w 
			where	nr_sequencia			= nr_seq_conta_proc_w;
		end if;
		end;
	end loop;
	close C01;
	commit;
	 
	open C02;
	loop 
	fetch C02 into 
		nr_seq_conta_mat_w, 
		dt_atendimento_w, 
		vl_material_ptu_w, 
		tx_intercambio_w, 
		vl_taxa_material_w, 
		nr_seq_material_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		 
		dados_conta_mat_valor_w.nr_sequencia		:= nr_seq_conta_mat_w;
		dados_conta_mat_valor_w.nr_seq_conta		:= nr_seq_conta_p;
		dados_conta_mat_valor_w.nr_seq_material		:= nr_seq_material_w;
		dados_conta_mat_valor_w.dt_atendimento		:= dt_atendimento_w;
		 
		if (coalesce(dt_atendimento_w::text, '') = '') then 
			dt_atendimento_w	:= dt_emissao_w;
		end if;
		 
		vl_material_ptu_w	:= coalesce(vl_material_ptu_w,0);
		tx_intercambio_w	:= coalesce(tx_intercambio_w,0);
		 
		vl_material_ptu_w	:= vl_material_ptu_w - coalesce(vl_taxa_material_w,0);
		 
		-- Obter a taxa de intercâmbio. 
		dados_tx_interc_valor_w	:= pls_cta_valorizacao_pck.obter_taxa_intercambio( 
							dados_conta_valor_w, null, dados_conta_mat_valor_w, 
							dados_fatura_valor_w, dados_beneficiario_valor_w, null, cd_estabelecimento_p);
										 
		tx_intercambio_w := dados_tx_interc_valor_w.pr_taxa;
		 
		if (coalesce(tx_intercambio_w,0) <> 0) then 
			vl_taxa_material_w	:= dividir((vl_material_ptu_w		* tx_intercambio_w),100);
			 
			update	pls_conta_mat 
			set	vl_taxa_material	= vl_taxa_material_w, 
				tx_intercambio		= tx_intercambio_w 
			where	nr_sequencia		= nr_seq_conta_mat_w;
			end if;
		end;
	end loop;
	close C02;
	commit;
	CALL pls_gerar_valor_pos_estab(nr_seq_conta_p, nm_usuario_p,'P',null,null,'C');
	commit;
	end;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_atualiza_valor_proc_mat ( nr_seq_conta_p bigint, dt_prev_envio_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

