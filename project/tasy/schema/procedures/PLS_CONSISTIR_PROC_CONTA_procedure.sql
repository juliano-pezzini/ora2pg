-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_proc_conta ( nr_seq_processo_p pls_processo.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

 
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
qt_procedimento_inexistente_w	integer;

C01 CURSOR(nr_seq_processo_cp	pls_processo.nr_sequencia%type) FOR 
SELECT	nr_sequencia, 
	nr_seq_segurado 
from	pls_processo_conta 
where	nr_seq_processo		= nr_seq_processo_cp;

BEGIN 
 
select	max(cd_estabelecimento) 
into STRICT	cd_estabelecimento_w 
from	pls_processo 
where	nr_sequencia	= nr_seq_processo_p;
 
for r_c01_w in c01(nr_seq_processo_p) loop 
 
	CALL pls_valorizar_proc_conta(r_c01_w.nr_sequencia, cd_estabelecimento_w, nm_usuario_p);
 
	delete	from pls_proc_conta_inconsist 
	where	nr_seq_proc_conta	= r_c01_w.nr_sequencia;
 
	if (coalesce(r_c01_w.nr_seq_segurado::text, '') = '') then 
		CALL pls_gravar_inconsist_processo(r_c01_w.nr_sequencia, 2, 'Selecionar o beneficiário da conta ou impugnar a mesma', nm_usuario_p);
	end if;
	 
	-- replica os procedimentos que não existiam no momento da importação, mas que foram cadastrados 
	begin 
		update	pls_processo_procedimento pp 
		set	pp.cd_procedimento = pp.cd_procedimento_imp, 
			pp.ie_origem_proced = (SELECT max(ie_origem_proced) from	procedimento p where  p.cd_procedimento = pp.cd_procedimento) 
		where	coalesce(pp.cd_procedimento::text, '') = '' 
		and	pp.nr_seq_conta = r_c01_w.nr_sequencia 
		and	pp.cd_procedimento_imp in (select p.cd_procedimento from	procedimento p);
	exception 
		when no_data_found then null;
	end;
	 
	-- verifica se todos os procedimentos para a conta já existem 
	select count(1) 
	into STRICT qt_procedimento_inexistente_w 
	from pls_processo_conta pc, 
		pls_processo_procedimento pp 
	where	pc.nr_sequencia = pp.nr_seq_conta 
	and	pc.nr_sequencia = r_c01_w.nr_sequencia 
	and	coalesce(pp.cd_procedimento::text, '') = '';
	 
	if (qt_procedimento_inexistente_w <> 0) then 
		CALL pls_gravar_inconsist_processo(r_c01_w.nr_sequencia, 3, 'Cadastrar o procedimento', nm_usuario_p);
	end if;
 
end loop;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_proc_conta ( nr_seq_processo_p pls_processo.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

