-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_desc_prest_contest ( nr_seq_lote_pagamento_p bigint, nm_usuario_p text, cd_estabelecimento_p text, nr_seq_lote_evento_p INOUT bigint) AS $body$
DECLARE


dt_inicio_comp_w		timestamp;
dt_fim_comp_w			timestamp;
dt_mes_competencia_w		timestamp;
nr_seq_lote_evento_w		pls_lote_evento.nr_sequencia%type;
ds_erro_w			varchar(4000);
qt_vago_w			bigint;
ie_lote_gerado_w		varchar(1);
qt_evento_movto_w		integer;
nr_seq_evento_movimento_w	pls_evento_movimento.nr_sequencia%type;

nr_seq_periodo_pag_w		pls_periodo_pagamento.nr_sequencia%type;
ie_complementar_w		pls_periodo_pagamento.ie_complementar%type;
ie_consiste_periodo_pag_w	pls_evento.ie_consiste_periodo_pag%type;
ie_gerar_w			varchar(1);

c01 CURSOR FOR
	SELECT	b.nr_sequencia,
		b.nr_seq_prestador,
		b.nr_seq_evento,
		b.dt_movimento,
		a.nr_seq_lote_contest,
		b.nr_seq_lote_disc,
		b.vl_movimento,
		b.ds_observacao,
		b.nr_seq_disc_proc,
		b.nr_seq_disc_mat,
		max(coalesce((	SELECT	max(x.ie_consiste_periodo_pag)
				from	pls_evento	x
				where	x.nr_sequencia	= b.nr_seq_evento), 'N')) ie_consiste_periodo_pag,
		c.nr_seq_tipo_prestador,
		c.nr_seq_classificacao
	from	pls_discussao_evento_movto	b,
		pls_lote_discussao		a,
		pls_prestador			c
	where	a.nr_sequencia			= b.nr_seq_lote_disc
	and	c.nr_sequencia			= b.nr_seq_prestador
	and	b.dt_movimento between dt_inicio_comp_w and dt_fim_comp_w
	and	coalesce(b.nr_seq_evento_movto::text, '') = ''
	and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
	-- Não incluir registros válidos ja utilizados no pagamento novo
	and	not exists (	select	1
				from	pls_pp_item_lote	x
				where	x.nr_seq_prestador	= b.nr_seq_prestador
				and	x.nr_seq_disc_evento	= b.nr_sequencia
				and	x.ie_cancelado		= 'N')
	group by b.nr_sequencia,
		b.nr_seq_prestador,
		b.nr_seq_evento,
		b.dt_movimento,
		a.nr_seq_lote_contest,
		b.nr_seq_lote_disc,
		b.vl_movimento,
		b.ds_observacao,
		b.nr_seq_disc_proc,
		b.nr_seq_disc_mat,
		c.nr_seq_tipo_prestador,
		c.nr_seq_classificacao;

BEGIN
-- Garante que foi passado lote de pagamento para esta procedure
if (nr_seq_lote_pagamento_p IS NOT NULL AND nr_seq_lote_pagamento_p::text <> '') then

	-- Levanta algumas informações para avaliar se gera o movimento
	select	max(nr_seq_periodo)
	into STRICT	nr_seq_periodo_pag_w
	from	pls_lote_pagamento a
	where	a.nr_sequencia = nr_seq_lote_pagamento_p;

	if (nr_seq_periodo_pag_w IS NOT NULL AND nr_seq_periodo_pag_w::text <> '') then
		select	coalesce(ie_complementar,'N')
		into STRICT	ie_complementar_w
		from	pls_periodo_pagamento
		where	nr_sequencia	= nr_seq_periodo_pag_w;
	end if;


	-- Busca alguns dados referente a competência do lote de pagamento
	select	trunc(coalesce(dt_inicio_comp,dt_mes_competencia)),
		fim_dia(coalesce(dt_fim_comp,last_day(dt_mes_competencia))),
		dt_mes_competencia
	into STRICT	dt_inicio_comp_w,	-- Utiliza o dt_inicio_comp se informado, caso contrário utiliza o primeiro dia da competência do lote
		dt_fim_comp_w,		-- Utiliza o dt_fim_comp se informado, caso contrário utiliza o último dia da competência do lote
		dt_mes_competencia_w
	from	pls_lote_pagamento
	where	nr_sequencia = nr_seq_lote_pagamento_p;

	-- Define a variável com um status que não foi gerado lote de evento por este processo
	ie_lote_gerado_w := 'N';

	-- Varre todos os acatos de desconto de prestador que ainda não foram vinculados a evento movimento
	for r_C01_w in C01 loop


		-- Verifica se no loop anterior o sistema já gerou um lote de evento por esta mesma rotina
		if (ie_lote_gerado_w = 'N') then
			-- Se não encontrou lote de evento sem data de liberação para o respectivo lote de pagamento, gero um lote de evento movimento
			if (coalesce(nr_seq_lote_evento_p::text, '') = '') then
				-- Gera um lote de evento movimento
				insert into pls_lote_evento(nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					ie_origem,
					dt_inicio_comp,
					dt_fim_comp,
					nr_seq_lote_pagamento,
					dt_liberacao,
					dt_competencia,
					cd_estabelecimento)
				values (nextval('pls_lote_evento_seq'),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					'A',
					dt_inicio_comp_w,
					dt_fim_comp_w,
					nr_seq_lote_pagamento_p,
					clock_timestamp(),
					dt_mes_competencia_w,
					cd_estabelecimento_p) returning nr_sequencia into nr_seq_lote_evento_w;

				-- Define a variável como lote de evento gerado por este processo
				ie_lote_gerado_w := 'S';

				-- Rotina contábil
				begin
					qt_vago_w := ctb_pls_atualizar_prod_eve_in(nr_seq_lote_evento_w, null, null, nm_usuario_p, cd_estabelecimento_p, qt_vago_w);
				exception
				when others then
					ds_erro_w := '';
				end;
			else
				nr_seq_lote_evento_w := nr_seq_lote_evento_p;
			end if;
		end if;

		-- inicia com 'S', sendo este o valor "Padrao"
		ie_gerar_w := 'S';

		-- Verifica a consistencia do lote (se marcado)
		if (ie_complementar_w = 'N') then
			if	((r_C01_w.ie_consiste_periodo_pag = 'S') or (nr_seq_lote_pagamento_p IS NOT NULL AND nr_seq_lote_pagamento_p::text <> '')) then

				ie_gerar_w := pls_obter_se_evento_inside_per(nr_seq_periodo_pag_w, r_C01_w.nr_seq_evento, r_C01_w.nr_seq_prestador, dt_mes_competencia_w, coalesce(r_C01_w.dt_movimento,trunc(dt_mes_competencia_w,'dd')));
			end if;
		else	-- Edgar 26/05/2014, OS 740405, se for lote complementar, verificar se este evento está cadastrado no mesmo
			ie_gerar_w := pls_obter_se_entra_pgto_compl(nr_seq_lote_pagamento_p, r_C01_w.nr_seq_evento, r_C01_w.nr_seq_prestador, r_C01_w.nr_seq_tipo_prestador, r_C01_w.nr_seq_classificacao);

		end if;


		if (ie_gerar_w = 'S') then

			insert into pls_evento_movimento(
				nr_sequencia, 				nr_seq_lote,	 		nr_seq_prestador,
				nr_seq_evento, 				dt_movimento, 			dt_atualizacao,
				dt_atualizacao_nrec,			nm_usuario, 			nm_usuario_nrec,
				nr_seq_lote_contest,			nr_seq_lote_disc,		vl_movimento,
				ds_observacao,				nr_seq_disc_proc,		nr_seq_disc_mat,
				nr_seq_lote_pgto)
			values (nextval('pls_evento_movimento_seq'), 	nr_seq_lote_evento_w, 		r_c01_w.nr_seq_prestador,
				r_c01_w.nr_seq_evento, 			r_c01_w.dt_movimento, 		clock_timestamp(),
				clock_timestamp(),				nm_usuario_p,			nm_usuario_p,
				r_c01_w.nr_seq_lote_contest, 		r_c01_w.nr_seq_lote_disc,	pls_util_pck.obter_valor_negativo(r_c01_w.vl_movimento),
				r_c01_w.ds_observacao,			r_c01_w.nr_seq_disc_proc,	r_c01_w.nr_seq_disc_mat,
				nr_seq_lote_pagamento_p) returning nr_sequencia into nr_seq_evento_movimento_w;

			update	pls_discussao_evento_movto
			set	nr_seq_evento_movto = nr_seq_evento_movimento_w
			where	nr_sequencia = r_c01_w.nr_sequencia;

		end if;
	end loop;

	-- Se o lote de movimento foi gerado por esta rotina e o mesmo não foi utilizado o sitema o deleta
	if (ie_lote_gerado_w = 'S') then
		select	count(1)
		into STRICT	qt_evento_movto_w
		from	pls_evento_movimento
		where	nr_seq_lote = nr_seq_lote_evento_w
		and	coalesce(ie_cancelamento::text, '') = '';

		if (qt_evento_movto_w = 0) then
			delete	FROM pls_lote_evento
			where	nr_sequencia = nr_seq_lote_evento_w;

			nr_seq_lote_evento_w := null;
			ie_lote_gerado_w := 'N';
		end if;
	end if;

	nr_seq_lote_evento_p := nr_seq_lote_evento_w;
end if;

/*Não pode ter commit*/

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_desc_prest_contest ( nr_seq_lote_pagamento_p bigint, nm_usuario_p text, cd_estabelecimento_p text, nr_seq_lote_evento_p INOUT bigint) FROM PUBLIC;

