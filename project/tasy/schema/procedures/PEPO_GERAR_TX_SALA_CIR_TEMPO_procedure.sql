-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pepo_gerar_tx_sala_cir_tempo ( nr_seq_pepo_p bigint, nm_usuario_p text) AS $body$
DECLARE


qt_cirurgias_w		bigint;
ie_porte_w		varchar(1);
ie_porte_ant_w		varchar(1);
qt_min_duracao_real_w	bigint;
qt_porte_anest_w	smallint;
qt_porte_anest_ant_w	smallint;
cd_proc_surgical_w	bigint;
ie_origem_surgical_w	bigint;

cd_estabelecimento_w	cirurgia.cd_estabelecimento%type;
cd_estab_ant_w		cirurgia.cd_estabelecimento%type;
nr_atendimento_w	cirurgia.nr_atendimento%type;
nr_cirurgia_w		cirurgia.nr_cirurgia%type;
nr_cirurgia_ant_w	cirurgia.nr_cirurgia%type;
cd_setor_atendimento_w	cirurgia.cd_setor_atendimento%type;
cd_setor_ant_w		cirurgia.cd_setor_atendimento%type;
dt_entrada_unidade_w	cirurgia.dt_entrada_unidade%type;
dt_entrada_ant_w	cirurgia.dt_entrada_unidade%type;
cd_tipo_anestesia_w	cirurgia.cd_tipo_anestesia%type;
cd_tipo_anest_ant_w	cirurgia.cd_tipo_anestesia%type;
dt_fim_cirurgia_w	cirurgia.dt_fim_cirurgia%type;
dt_fim_cirurgia_ant_w	cirurgia.dt_fim_cirurgia%type;
dt_inicio_real_w	cirurgia.dt_inicio_real%type;
dt_inicio_real_ant_w	cirurgia.dt_inicio_real%type;

nr_seq_atepacu_w	atend_paciente_unidade.nr_seq_interno%type;
nr_seq_atepacu_ant_w	atend_paciente_unidade.nr_seq_interno%type;

nr_min_final_max_w	convenio_regra_taxa_cir.nr_min_final%type;
nr_min_excesso_w	convenio_regra_taxa_cir.nr_min_excesso%type;

qt_procedimento_w	procedimento_paciente.qt_procedimento%type;
qt_proc_alternativo_w	procedimento_paciente.qt_procedimento%type;
cd_procedimento_w	procedimento_paciente.cd_procedimento%type;
ie_origem_proced_w	procedimento_paciente.ie_origem_proced%type;
cd_proc_int_w		procedimento_paciente.cd_procedimento%type;
ie_origem_proc_int_w	procedimento_paciente.ie_origem_proced%type;
nr_sequencia_w		procedimento_paciente.nr_sequencia%type;

cd_convenio_w		atend_categoria_convenio.cd_convenio%type;
cd_categoria_w		atend_categoria_convenio.cd_categoria%type;
cd_plano_convenio_w	atend_categoria_convenio.cd_plano_convenio%type;
cd_tipo_acomodacao_w	atend_categoria_convenio.cd_tipo_acomodacao%type;

ie_tipo_atendimento_w	atendimento_paciente.ie_tipo_atendimento%type;
nr_seq_classificacao_w	atendimento_paciente.nr_seq_classificacao%type;
ie_certificate_type_w	procedimento.ie_proced_type%type;

C01 CURSOR FOR
	SELECT	a.nr_cirurgia,
		a.nr_atendimento,
		a.cd_estabelecimento,
		a.cd_setor_atendimento,
		a.dt_entrada_unidade,
		a.cd_tipo_anestesia,
		coalesce(a.dt_inicio_real,clock_timestamp()) dt_inicio_real,
		coalesce(a.dt_fim_cirurgia,clock_timestamp()) dt_fim_cirurgia,
		a.nr_min_duracao_real,
		obter_porte_anestesico_cir(a.nr_cirurgia) qt_porte_anest,
		obter_regra_porte_cirurgia(a.nr_cirurgia) ie_porte,
		a.cd_procedimento_princ,
		a.ie_origem_proced
	from	cirurgia a
	where	a.nr_seq_pepo = nr_seq_pepo_p
	order by	qt_porte_anest,
		a.nr_cirurgia;

-- Taxa de procedimento maior porte (Dentro do prazo)
C02 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(a.qt_procedimento,1) qt_procedimento,
		a.nr_sequencia,
		coalesce(a.ie_porte,'0') ie_porte,
		coalesce(a.cd_tipo_anestesia,'0') cd_tipo_anestesia,
		coalesce(a.cd_estabelecimento,0) cd_estabelecimento,
		a.nr_seq_proc_interno
	from	convenio_regra_taxa_cir a
	where	a.cd_convenio = cd_convenio_w
	and	qt_min_duracao_real_w between a.nr_min_inicial and a.nr_min_final
	and ((coalesce(nr_seq_classificacao::text, '') = '') or (nr_seq_classificacao = nr_seq_classificacao_w))
	and	((coalesce(a.ie_certificate_type::text, '') = '') or (a.ie_certificate_type = ie_certificate_type_w))
	and	coalesce(a.cd_tipo_anestesia,coalesce(cd_tipo_anestesia_w,'0')) = coalesce(cd_tipo_anestesia_w,'0')
	and     coalesce(a.ie_porte,coalesce(ie_porte_w,'0')) = coalesce(ie_porte_w,'0')
	and	coalesce(a.cd_estabelecimento, coalesce(cd_estabelecimento_w,0)) = coalesce(cd_estabelecimento_w,0)
	and	coalesce(dt_inicio_real_w, clock_timestamp()) between coalesce(dt_inicio_vigencia, coalesce(dt_inicio_real_w, clock_timestamp())) and
			trunc(coalesce(dt_final_vigencia, coalesce(dt_inicio_real_w, clock_timestamp()))) + 86399/86400
	and	((coalesce(qt_porte_anest_w::text, '') = '') or (qt_porte_anest_w between coalesce(a.qt_porte_inicial, qt_porte_anest_w) and
							coalesce(a.qt_porte_final, qt_porte_anest_w)))
	and	a.ie_situacao = 'A';
	
-- Taxa de procedimento complementar (Dentro do prazo, apenas para mais de uma cirurgia)
C03 CURSOR FOR
	SELECT	a.cd_proc_alternativo,
		a.ie_orig_proced_alt,
		coalesce(a.qt_procedimento,1) qt_procedimento,
		a.nr_sequencia,
		coalesce(a.ie_porte,'0') ie_porte,
		coalesce(a.cd_tipo_anestesia,'0') cd_tipo_anestesia,
		coalesce(a.cd_estabelecimento,0) cd_estabelecimento,
		a.nr_seq_proc_int_alt
	from	convenio_regra_taxa_cir a
	where	a.cd_convenio = cd_convenio_w
	and	qt_min_duracao_real_w between a.nr_min_inicial and a.nr_min_final
	and ((coalesce(nr_seq_classificacao::text, '') = '') or (nr_seq_classificacao = nr_seq_classificacao_w))
	and	((coalesce(a.ie_certificate_type::text, '') = '') or (a.ie_certificate_type = ie_certificate_type_w))
	and	coalesce(a.cd_tipo_anestesia,coalesce(cd_tipo_anest_ant_w,'0')) = coalesce(cd_tipo_anest_ant_w,'0')
	and     coalesce(a.ie_porte,coalesce(ie_porte_ant_w,'0')) = coalesce(ie_porte_ant_w,'0')
	and	coalesce(a.cd_estabelecimento, coalesce(cd_estab_ant_w,0)) = coalesce(cd_estab_ant_w,0)
	and	coalesce(dt_inicio_real_ant_w, clock_timestamp()) between coalesce(dt_inicio_vigencia, coalesce(dt_inicio_real_ant_w, clock_timestamp())) and
			trunc(coalesce(dt_final_vigencia, coalesce(dt_inicio_real_ant_w, clock_timestamp()))) + 86399/86400
	and	((coalesce(qt_porte_anest_ant_w::text, '') = '') or (qt_porte_anest_ant_w between coalesce(a.qt_porte_inicial, qt_porte_anest_ant_w) and
							coalesce(a.qt_porte_final, qt_porte_anest_ant_w)))
	and	a.ie_situacao = 'A';
	
-- Taxa de procedimento de maior porte e complementar (Fora do prazo)
C04 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(a.qt_procedimento,1) qt_procedimento,
		a.nr_sequencia,
		coalesce(a.ie_porte,'0') ie_porte,
		coalesce(a.cd_tipo_anestesia,'0') cd_tipo_anestesia,
		coalesce(a.cd_estabelecimento,0) cd_estabelecimento,
		a.nr_seq_proc_interno,
		a.cd_proc_alternativo,
		a.ie_orig_proced_alt,
		a.nr_seq_proc_int_alt
	from	convenio_regra_taxa_cir a
	where	a.cd_convenio = cd_convenio_w
	and	qt_min_duracao_real_w > a.nr_min_final
	and ((coalesce(nr_seq_classificacao::text, '') = '') or (nr_seq_classificacao = nr_seq_classificacao_w))
	and	((coalesce(a.ie_certificate_type::text, '') = '') or (a.ie_certificate_type = ie_certificate_type_w))
	and	coalesce(a.cd_tipo_anestesia,coalesce(cd_tipo_anestesia_w,'0')) = coalesce(cd_tipo_anestesia_w,'0')
	and     coalesce(a.ie_porte,coalesce(ie_porte_w,'0')) = coalesce(ie_porte_w,'0')
	and	coalesce(a.cd_estabelecimento, coalesce(cd_estabelecimento_w,0)) = coalesce(cd_estabelecimento_w,0)
	and	coalesce(dt_inicio_real_w, clock_timestamp()) between coalesce(dt_inicio_vigencia, coalesce(dt_inicio_real_w, clock_timestamp())) and
			trunc(coalesce(dt_final_vigencia, coalesce(dt_inicio_real_w, clock_timestamp()))) + 86399/86400
	and	((coalesce(qt_porte_anest_w::text, '') = '') or (qt_porte_anest_w between coalesce(a.qt_porte_inicial, qt_porte_anest_w) and
							coalesce(a.qt_porte_final, qt_porte_anest_w)))
	and	a.nr_sequencia = (	SELECT	max(x.nr_sequencia)
					from	convenio_regra_taxa_cir x
					where	x.cd_convenio = cd_convenio_w
					and	qt_min_duracao_real_w > x.nr_min_final
					and	coalesce(x.cd_tipo_anestesia,coalesce(cd_tipo_anestesia_w,'0')) = coalesce(cd_tipo_anestesia_w,'0')
					and     coalesce(x.ie_porte,coalesce(ie_porte_w,'0')) = coalesce(ie_porte_w,'0')
					and	coalesce(x.cd_estabelecimento, coalesce(cd_estabelecimento_w,0)) = coalesce(cd_estabelecimento_w,0)
					and	coalesce(dt_inicio_real_w, clock_timestamp()) between coalesce(dt_inicio_vigencia, coalesce(dt_inicio_real_w, clock_timestamp())) and
							trunc(coalesce(dt_final_vigencia, coalesce(dt_inicio_real_w, clock_timestamp()))) + 86399/86400
					and	((coalesce(qt_porte_anest_w::text, '') = '') or (qt_porte_anest_w between coalesce(x.qt_porte_inicial, qt_porte_anest_w) and
											coalesce(x.qt_porte_final, qt_porte_anest_w)))
				)
	and	a.ie_situacao = 'A';
			
BEGIN

if (coalesce(nr_seq_pepo_p,0) > 0) then

	select	count(*)
	into STRICT	qt_cirurgias_w
	from	cirurgia
	where	nr_seq_pepo = nr_seq_pepo_p;
	
	if (qt_cirurgias_w = 1) then
	
		for r1 in c01 loop
		
			nr_cirurgia_w		:= r1.nr_cirurgia;
			nr_atendimento_w	:= r1.nr_atendimento;
			cd_estabelecimento_w	:= r1.cd_estabelecimento;
			cd_setor_atendimento_w	:= r1.cd_setor_atendimento;
			dt_entrada_unidade_w	:= r1.dt_entrada_unidade;
			cd_tipo_anestesia_w	:= r1.cd_tipo_anestesia;
			dt_inicio_real_w	:= r1.dt_inicio_real;
			dt_fim_cirurgia_w	:= r1.dt_fim_cirurgia;
			qt_min_duracao_real_w	:= r1.nr_min_duracao_real;
			qt_porte_anest_w	:= r1.qt_porte_anest;
			ie_porte_w		:= r1.ie_porte;
			cd_proc_surgical_w 	:= r1.cd_procedimento_princ;
			ie_origem_surgical_w 	:= r1.ie_origem_proced;
		
		end loop;
		
	elsif (qt_cirurgias_w > 1) then
	
		select	max(nr_atendimento)
		into STRICT	nr_atendimento_w
		from	pepo_cirurgia
		where	nr_sequencia = nr_seq_pepo_p;
	
		qt_min_duracao_real_w	:= 0;
	
		for r1 in c01 loop
		
			qt_min_duracao_real_w	:= qt_min_duracao_real_w + r1.nr_min_duracao_real;
			
			qt_porte_anest_ant_w	:= qt_porte_anest_w;
			nr_cirurgia_ant_w	:= nr_cirurgia_w;
			cd_estab_ant_w		:= cd_estabelecimento_w;
			dt_fim_cirurgia_ant_w	:= dt_fim_cirurgia_w;
			dt_inicio_real_ant_w	:= dt_inicio_real_w;
			ie_porte_ant_w		:= ie_porte_w;
			cd_tipo_anest_ant_w	:= cd_tipo_anestesia_w;
			cd_setor_ant_w		:= cd_setor_atendimento_w;
			dt_entrada_ant_w	:= dt_entrada_unidade_w;
			
			qt_porte_anest_w	:= r1.qt_porte_anest;
			nr_cirurgia_w		:= r1.nr_cirurgia;
			cd_estabelecimento_w	:= r1.cd_estabelecimento;
			dt_fim_cirurgia_w	:= coalesce(r1.dt_fim_cirurgia,clock_timestamp());
			dt_inicio_real_w	:= coalesce(r1.dt_inicio_real, clock_timestamp());
			ie_porte_w		:= r1.ie_porte;
			cd_tipo_anestesia_w	:= r1.cd_tipo_anestesia;
			cd_setor_atendimento_w	:= r1.cd_setor_atendimento;
			dt_entrada_unidade_w	:= r1.dt_entrada_unidade;
			cd_proc_surgical_w 	:= r1.cd_procedimento_princ;
			ie_origem_surgical_w 	:= r1.ie_origem_proced;
		
		end loop;
		
		if (dt_entrada_ant_w IS NOT NULL AND dt_entrada_ant_w::text <> '') then
			select 	coalesce(max(nr_seq_interno),0)
			into STRICT	nr_seq_atepacu_ant_w
			from 	atend_paciente_unidade
			where 	nr_atendimento = nr_atendimento_w
			and 	dt_entrada_unidade = dt_entrada_ant_w;
		end if;
		
	end if;
	
	select 	coalesce(max(nr_seq_interno),0)
	into STRICT	nr_seq_atepacu_w
	from 	atend_paciente_unidade
	where 	nr_atendimento = nr_atendimento_w
	and 	dt_entrada_unidade = dt_entrada_unidade_w;
	
	cd_convenio_w	:= obter_convenio_atendimento(nr_atendimento_w);
	
	select	max(obter_categoria_atendimento(nr_atendimento)),
		max(obter_plano_atendimento(nr_atendimento,'C')),
		max(obter_tipo_acomod_atend(nr_atendimento,'C')),
		max(ie_tipo_atendimento),
		max(nr_seq_classificacao)
	into STRICT	cd_categoria_w,
		cd_plano_convenio_w,
		cd_tipo_acomodacao_w,
		ie_tipo_atendimento_w,
		nr_seq_classificacao_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_w;
	
	select	max(ie_proced_type)
	into STRICT	ie_certificate_type_w
	from	procedimento
	where	cd_procedimento = cd_proc_surgical_w
	and	ie_origem_proced = ie_origem_surgical_w;
	
	select	max(nr_min_final),
		max(coalesce(nr_min_excesso,0))
	into STRICT	nr_min_final_max_w,
		nr_min_excesso_w
	from	convenio_regra_taxa_cir
	where	cd_convenio = cd_convenio_w
	and 	((coalesce(nr_seq_classificacao::text, '') = '') or (nr_seq_classificacao = nr_seq_classificacao_w))
	and	((coalesce(ie_certificate_type::text, '') = '') or (ie_certificate_type = ie_certificate_type_w))
	and	coalesce(cd_tipo_anestesia,coalesce(cd_tipo_anestesia_w,'0')) = coalesce(cd_tipo_anestesia_w,'0')
	and     coalesce(ie_porte,coalesce(ie_porte_ant_w,'0')) = coalesce(ie_porte_ant_w,'0')
	and	coalesce(cd_estabelecimento, coalesce(cd_estabelecimento_w,0)) = coalesce(cd_estabelecimento_w,0)
	and	coalesce(dt_inicio_real_w, clock_timestamp()) between coalesce(dt_inicio_vigencia, coalesce(dt_inicio_real_w, clock_timestamp())) and
			trunc(coalesce(dt_final_vigencia, coalesce(dt_inicio_real_w, clock_timestamp()))) + 86399/86400
	and	((coalesce(qt_porte_anest_w::text, '') = '') or (qt_porte_anest_w between coalesce(qt_porte_inicial, qt_porte_anest_w) and
						coalesce(qt_porte_final, qt_porte_anest_w)))
	and	ie_situacao = 'A';

	if (qt_min_duracao_real_w > nr_min_final_max_w) then
		-- Fora período
	
		if (coalesce(nr_min_excesso_w,0) > 0) then
			if (nr_min_excesso_w = 1) then
				qt_proc_alternativo_w:= trunc(dividir((qt_min_duracao_real_w - nr_min_final_max_w), nr_min_excesso_w));
			else
				qt_proc_alternativo_w:= ceil(dividir((qt_min_duracao_real_w - nr_min_final_max_w), nr_min_excesso_w));
			end if;	
		end if;

		for r4 in c04 loop
			cd_procedimento_w	:= null;
			ie_origem_proced_w	:= null;
			cd_proc_int_w		:= null;
			ie_origem_proc_int_w	:= null;
			
			-- Verificar proc interno maior porte.			
			if (coalesce(r4.nr_seq_proc_interno,0) > 0) then
		
				SELECT * FROM Obter_Proc_Tab_Interno_Conv(r4.nr_seq_proc_interno, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_setor_atendimento_w, cd_proc_int_w, ie_origem_proc_int_w, cd_setor_atendimento_w, dt_fim_cirurgia_w, cd_tipo_acomodacao_w, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_proc_int_w, ie_origem_proc_int_w;
					
				if (coalesce(cd_proc_int_w,0) > 0) and (coalesce(ie_origem_proc_int_w,0) > 0) then
					cd_procedimento_w	:= cd_proc_int_w;
					ie_origem_proced_w	:= ie_origem_proc_int_w;
				end if;
			else

				cd_procedimento_w	:= r4.cd_procedimento;
				ie_origem_proced_w	:= r4.ie_origem_proced;
			
			end if;
			
			-- Executar proc maior porte
			if (cd_procedimento_w > 0) and (ie_origem_proced_w > 0) and (r4.nr_sequencia > 0) then
			
				select 	nextval('procedimento_paciente_seq')
				into STRICT 	nr_sequencia_w
				;
				
				insert  into procedimento_paciente(nr_sequencia, nr_atendimento, dt_entrada_unidade, cd_procedimento, dt_procedimento, qt_procedimento, nm_usuario, cd_convenio, cd_categoria, dt_acerto_conta,
					vl_procedimento, vl_medico, vl_anestesista, vl_materiais, vl_auxiliares, vl_custo_operacional, tx_medico, tx_anestesia, nr_cirurgia, nr_doc_convenio,
					cd_setor_atendimento, ie_origem_proced, nr_seq_atepacu,	dt_atualizacao,	dt_conta, nr_seq_regra_taxa_cir, nr_seq_proc_interno, ds_observacao) 
				values (nr_sequencia_w, nr_atendimento_w, dt_entrada_unidade_w, cd_procedimento_w, dt_fim_cirurgia_w, r4.qt_procedimento, nm_usuario_p, cd_convenio_w, cd_categoria_w, null,
					0, 0, 0, 0, 0, 0, 0, 0, nr_cirurgia_w, null, 	
					cd_setor_atendimento_w,	ie_origem_proced_w, nr_seq_atepacu_w, dt_fim_cirurgia_w, dt_fim_cirurgia_w, r4.nr_sequencia, r4.nr_seq_proc_interno, wheb_mensagem_pck.get_texto(297848));
				
				CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				
				CALL gerar_lancamento_automatico(nr_atendimento_w, null, 34, nm_usuario_p, nr_sequencia_w,null,null,null,null,null);
				
			end if;
			
			cd_procedimento_w	:= null;
			ie_origem_proced_w	:= null;
			cd_proc_int_w		:= null;
			ie_origem_proc_int_w	:= null;
			qt_procedimento_w	:= null;
		
			-- Verificar proc interno complementar
			if (coalesce(r4.nr_seq_proc_int_alt,0) > 0) then
		
				SELECT * FROM Obter_Proc_Tab_Interno_Conv(r4.nr_seq_proc_int_alt, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_setor_atendimento_w, cd_proc_int_w, ie_origem_proc_int_w, cd_setor_atendimento_w, dt_fim_cirurgia_w, cd_tipo_acomodacao_w, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_proc_int_w, ie_origem_proc_int_w;
					
				if (coalesce(cd_proc_int_w,0) > 0) and (coalesce(ie_origem_proc_int_w,0) > 0) then
					cd_procedimento_w	:= cd_proc_int_w;
					ie_origem_proced_w	:= ie_origem_proc_int_w;
				end if;
			else

				cd_procedimento_w	:= r4.cd_proc_alternativo;
				ie_origem_proced_w	:= r4.ie_orig_proced_alt;
			
			end if;
			
			-- Executar proc complementar
			if (cd_procedimento_w > 0) and (ie_origem_proced_w > 0) and (r4.nr_sequencia > 0) then
				
				if (coalesce(qt_proc_alternativo_w,0) > 0) then
					qt_procedimento_w	:= qt_proc_alternativo_w;
				else
					qt_procedimento_w	:= coalesce(r4.qt_procedimento,1);
				end if;
			
				select 	nextval('procedimento_paciente_seq')
				into STRICT 	nr_sequencia_w
				;
				
				insert  into procedimento_paciente(nr_sequencia, nr_atendimento, dt_entrada_unidade, cd_procedimento, dt_procedimento, qt_procedimento, nm_usuario, cd_convenio, cd_categoria, dt_acerto_conta,
					vl_procedimento, vl_medico, vl_anestesista, vl_materiais, vl_auxiliares, vl_custo_operacional, tx_medico, tx_anestesia, nr_cirurgia, nr_doc_convenio,
					cd_setor_atendimento, ie_origem_proced, nr_seq_atepacu,	dt_atualizacao,	dt_conta, nr_seq_regra_taxa_cir, nr_seq_proc_interno, ds_observacao) 
				values (nr_sequencia_w, nr_atendimento_w, dt_entrada_unidade_w, cd_procedimento_w, dt_fim_cirurgia_w, qt_procedimento_w, nm_usuario_p, cd_convenio_w, cd_categoria_w, null,
					0, 0, 0, 0, 0, 0, 0, 0, nr_cirurgia_w, null, 	
					cd_setor_atendimento_w,	ie_origem_proced_w, nr_seq_atepacu_w, dt_fim_cirurgia_w, dt_fim_cirurgia_w, r4.nr_sequencia, r4.nr_seq_proc_int_alt, wheb_mensagem_pck.get_texto(297848));
				
				CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				
				CALL gerar_lancamento_automatico(nr_atendimento_w, null, 34, nm_usuario_p, nr_sequencia_w,null,null,null,null,null);
				
			end if;
		
		end loop;
	else		
		-- Dentro período
		
		for r2 in c02 loop
			cd_procedimento_w	:= null;
			ie_origem_proced_w	:= null;
			cd_proc_int_w		:= null;
			ie_origem_proc_int_w	:= null;
			
			-- Verificar proc interno maior porte			
			if (coalesce(r2.nr_seq_proc_interno,0) > 0) then
		
				SELECT * FROM Obter_Proc_Tab_Interno_Conv(r2.nr_seq_proc_interno, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_setor_atendimento_w, cd_proc_int_w, ie_origem_proc_int_w, cd_setor_atendimento_w, dt_fim_cirurgia_w, cd_tipo_acomodacao_w, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_proc_int_w, ie_origem_proc_int_w;
					
				if (coalesce(cd_proc_int_w,0) > 0) and (coalesce(ie_origem_proc_int_w,0) > 0) then
					cd_procedimento_w	:= cd_proc_int_w;
					ie_origem_proced_w	:= ie_origem_proc_int_w;
				end if;
			else

				cd_procedimento_w	:= r2.cd_procedimento;
				ie_origem_proced_w	:= r2.ie_origem_proced;
			
			end if;
			
			-- Executar proc maior porte
			if (cd_procedimento_w > 0) and (ie_origem_proced_w > 0) and (r2.nr_sequencia > 0) then
			
				select 	nextval('procedimento_paciente_seq')
				into STRICT 	nr_sequencia_w
				;
				
				insert  into procedimento_paciente(nr_sequencia, nr_atendimento, dt_entrada_unidade, cd_procedimento, dt_procedimento, qt_procedimento, nm_usuario, cd_convenio, cd_categoria, dt_acerto_conta,
					vl_procedimento, vl_medico, vl_anestesista, vl_materiais, vl_auxiliares, vl_custo_operacional, tx_medico, tx_anestesia, nr_cirurgia, nr_doc_convenio,
					cd_setor_atendimento, ie_origem_proced, nr_seq_atepacu,	dt_atualizacao,	dt_conta, nr_seq_regra_taxa_cir, nr_seq_proc_interno, ds_observacao) 
				values (nr_sequencia_w, nr_atendimento_w, dt_entrada_unidade_w, cd_procedimento_w, dt_fim_cirurgia_w, r2.qt_procedimento, nm_usuario_p, cd_convenio_w, cd_categoria_w, null,
					0, 0, 0, 0, 0, 0, 0, 0, nr_cirurgia_w, null, 	
					cd_setor_atendimento_w,	ie_origem_proced_w, nr_seq_atepacu_w, dt_fim_cirurgia_w, dt_fim_cirurgia_w, r2.nr_sequencia, r2.nr_seq_proc_interno, wheb_mensagem_pck.get_texto(297848));
				
				CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				
				CALL gerar_lancamento_automatico(nr_atendimento_w, null, 34, nm_usuario_p, nr_sequencia_w,null,null,null,null,null);
				
			end if;
		
		end loop;
		
		if (qt_cirurgias_w > 1) then
		
			for r3 in c03 loop
				cd_procedimento_w	:= null;
				ie_origem_proced_w	:= null;
				cd_proc_int_w		:= null;
				ie_origem_proc_int_w	:= null;
				qt_procedimento_w	:= null;
			
				-- Verificar proc interno complementar
				if (coalesce(r3.nr_seq_proc_int_alt,0) > 0) then
			
					SELECT * FROM Obter_Proc_Tab_Interno_Conv(r3.nr_seq_proc_int_alt, cd_estab_ant_w, cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_setor_atendimento_w, cd_proc_int_w, ie_origem_proc_int_w, cd_setor_atendimento_w, dt_fim_cirurgia_w, cd_tipo_acomodacao_w, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_proc_int_w, ie_origem_proc_int_w;
						
					if (coalesce(cd_proc_int_w,0) > 0) and (coalesce(ie_origem_proc_int_w,0) > 0) then
						cd_procedimento_w	:= cd_proc_int_w;
						ie_origem_proced_w	:= ie_origem_proc_int_w;
					end if;
				else

					cd_procedimento_w	:= r3.cd_proc_alternativo;
					ie_origem_proced_w	:= r3.ie_orig_proced_alt;
				
				end if;
				
				-- Executar proc complementar
				if (cd_procedimento_w > 0) and (ie_origem_proced_w > 0) and (r3.nr_sequencia > 0) then
					
					if (coalesce(qt_proc_alternativo_w,0) > 0) then
						qt_procedimento_w	:= qt_proc_alternativo_w;
					else
						qt_procedimento_w	:= coalesce(r3.qt_procedimento,1);
					end if;
				
					select 	nextval('procedimento_paciente_seq')
					into STRICT 	nr_sequencia_w
					;
					
					insert  into procedimento_paciente(nr_sequencia, nr_atendimento, dt_entrada_unidade, cd_procedimento, dt_procedimento, qt_procedimento, nm_usuario, cd_convenio, cd_categoria, dt_acerto_conta,
						vl_procedimento, vl_medico, vl_anestesista, vl_materiais, vl_auxiliares, vl_custo_operacional, tx_medico, tx_anestesia, nr_cirurgia, nr_doc_convenio,
						cd_setor_atendimento, ie_origem_proced, nr_seq_atepacu,	dt_atualizacao,	dt_conta, nr_seq_regra_taxa_cir, nr_seq_proc_interno, ds_observacao) 
					values (nr_sequencia_w, nr_atendimento_w, dt_entrada_unidade_w, cd_procedimento_w, dt_fim_cirurgia_ant_w, qt_procedimento_w, nm_usuario_p, cd_convenio_w, cd_categoria_w, null,
						0, 0, 0, 0, 0, 0, 0, 0, nr_cirurgia_ant_w, null, 	
						cd_setor_atendimento_w,	ie_origem_proced_w, nr_seq_atepacu_w, dt_fim_cirurgia_ant_w, dt_fim_cirurgia_ant_w, r3.nr_sequencia, r3.nr_seq_proc_int_alt, wheb_mensagem_pck.get_texto(297848));
					
					CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
					
					CALL gerar_lancamento_automatico(nr_atendimento_w, null, 34, nm_usuario_p, nr_sequencia_w,null,null,null,null,null);
					
				end if;
			
			end loop;
			
		end if;
		
	end if;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pepo_gerar_tx_sala_cir_tempo ( nr_seq_pepo_p bigint, nm_usuario_p text) FROM PUBLIC;

