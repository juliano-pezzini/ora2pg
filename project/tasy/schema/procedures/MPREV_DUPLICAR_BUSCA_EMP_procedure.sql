-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mprev_duplicar_busca_emp ( nr_seq_busca_emp_p bigint, ie_opcao_p text, ie_liberar_p text, nm_usuario_p text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Gerar os registros de beneficiários a serem copiados na busca empresarial 
ou 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ X] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
IE_OPCAO_P 
	'S' - Selecionar 
		* Gera todos os beneficiários do contrato na tabela w_mprev_selecao_busca_emp 
	'C' - Copiar 
		* Copia para a busca empresarial 
		 
IE_LIBERAR_P 
	'S' - Indica que as copias para a busca empresarial já serão liberadas para a captação 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
dt_atualizacao_w		w_mprev_selecao_busca_emp.dt_atualizacao%type;
nr_seq_segurado_w		w_mprev_selecao_busca_emp.nr_seq_segurado%type;
cd_usuario_plano_w		w_mprev_selecao_busca_emp.cd_usuario_plano%type;
nm_pessoa_fisica_w		w_mprev_selecao_busca_emp.nm_pessoa_fisica%type;
nr_seq_busca_emp_ref_w		w_mprev_selecao_busca_emp.nr_seq_busca_emp_ref%type;
nr_seq_contrato_w		mprev_busca_empresarial.nr_seq_contrato%type;
nr_sequencia_w			mprev_busca_empresarial.nr_sequencia%type;
nr_seq_cap_destino_w		mprev_captacao_destino.nr_sequencia%type;
nr_seq_cap_diagnostico_w	mprev_captacao_diagnostico.nr_sequencia%type;
cd_pessoa_fisica_w		mprev_busca_empresarial.cd_pessoa_fisica%type;
dt_busca_w			mprev_busca_empresarial.dt_busca%type;
ds_observacao_w			mprev_busca_empresarial.ds_observacao%type;
dt_confirmacao_w		mprev_busca_empresarial.dt_confirmacao%type;
ie_origem_w			mprev_busca_empresarial.ie_origem%type;
nr_contrato_w			mprev_busca_empresarial.nr_contrato%type;
nr_seq_captacao_w		mprev_captacao.nr_sequencia%type;
nr_seq_programa_w		mprev_captacao_destino.nr_seq_programa%type;
nr_seq_campanha_w		mprev_captacao_destino.nr_seq_campanha%type;
ie_patologia_fator_risco_w	mprev_captacao_diagnostico.ie_patologia_fator_risco%type;
nr_seq_diagnostico_int_w	mprev_captacao_diagnostico.nr_seq_diagnostico_int%type;
				
c01 CURSOR FOR 
	SELECT 	a.dt_atualizacao, 
		a.nr_sequencia, 
		substr(pls_obter_dados_segurado(a.nr_sequencia, 'C'),1,255) cd_usuario_plano, 
		substr(obter_nome_pf(a.cd_pessoa_fisica),1,100) nm_pessoa_fisica 
	FROM pls_segurado a
LEFT OUTER JOIN mprev_busca_empresarial b ON (a.nr_sequencia = b.nr_seq_segurado)
WHERE a.nr_seq_contrato = nr_seq_contrato_w and coalesce(b.nr_sequencia::text, '') = '' and (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') and (dt_rescisao >= clock_timestamp() or coalesce(dt_rescisao::text, '') = '');	
	 
c02 CURSOR FOR 
	SELECT	a.nr_seq_segurado, 
		a.cd_usuario_plano, 
		b.nr_seq_contrato, 
		b.dt_busca, 
		b.ds_observacao, 
		b.ie_origem, 
		b.nr_contrato 
	from	w_mprev_selecao_busca_emp a, 
		mprev_busca_empresarial b		 
	where	a.nr_seq_busca_emp_ref = b.nr_sequencia 
	and	a.nm_usuario = nm_usuario_p 
	and	coalesce(a.ie_selecionado, 'N') = 'S';
	
c03 CURSOR FOR 
	SELECT	a.nr_seq_programa, 
		a.nr_seq_campanha 
	from	mprev_captacao_destino a, 
		mprev_captacao b 
	where	a.nr_seq_captacao = b.nr_sequencia 
	and	b.nr_seq_busca_emp = nr_seq_busca_emp_p;

c04 CURSOR FOR 
	SELECT	a.ie_patologia_fator_risco, 
		a.nr_seq_diagnostico_int 
	from	mprev_captacao_diagnostico a, 
		mprev_captacao b 
	where	a.nr_seq_captacao = b.nr_sequencia 
	and	b.nr_seq_busca_emp = nr_seq_busca_emp_p;

BEGIN
 
/*Se for opção Selecionar, deve-se abrir um cursor buscando todos os registros da PLS_SEGURADO que possuem 
o mesmo NR_SEQ_CONTRATO da busca empresarial que está sendo copiada (parâmetro)*/
 
 
/* Dentro deste cursor deve-se gravar um registro na tabela w_mprev_selecao_busca_emp para 
cada beneficiário, com o nome e carteirinha e o campo selecionado como 'N' */
 
 
if (ie_opcao_p IS NOT NULL AND ie_opcao_p::text <> '') and (ie_opcao_p = 'S') then 
 
	select 	max(nr_seq_contrato) 
	into STRICT	nr_seq_contrato_w 
	from 	mprev_busca_empresarial 
	where 	nr_sequencia = nr_seq_busca_emp_p;
	 
	if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then 
		 
		delete from w_mprev_selecao_busca_emp 
		where nm_usuario = nm_usuario_p;
		commit;
		 
		open c01;
		loop 
		fetch c01 into 
			dt_atualizacao_w, 
			nr_seq_segurado_w, 
			cd_usuario_plano_w, 
			nm_pessoa_fisica_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin 
		 
				select 	nextval('w_mprev_selecao_busca_emp_seq') 
				into STRICT	nr_sequencia_w 
				;
			 
				insert into w_mprev_selecao_busca_emp( 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					nr_seq_busca_emp_ref, 
					nr_seq_segurado, 
					ie_selecionado, 
					cd_usuario_plano, 
					nm_pessoa_fisica) 
				values (nr_sequencia_w, 
					dt_atualizacao_w, 
					nm_usuario_p, 
					nr_seq_busca_emp_p, 
					nr_seq_segurado_w, 
					'N', 
					coalesce(cd_usuario_plano_w,' '), 
					nm_pessoa_fisica_w);				
					 
			end;
		end loop;
		close c01;
 
	end if;
/* Se a opção for Copiar, deve-se abrir um cursor com todos os registros da tabela w_mprev_selecao_busca_emp 
que estavam selecionados */
 
 
/* Dentro deste cursor deve-se gerar um novo registro de busca empresarial para esse beneficiário do cursor 
copiando as demais informações do registro de busca empresarial que está sendo copiado (inclusive as duas tabelas filhas) */
 
 
/* Aqui ainda deve ser verificado o parâmetro liberar, se o mesmo estiver como 'S' já deve ser ainda dentro deste 
chamada a procedure mprev_confirmar_busca_emp (será necessário incluir um parâmetro na mesma para não realizar commit ) */
 
 
elsif (ie_opcao_p IS NOT NULL AND ie_opcao_p::text <> '') and (ie_opcao_p = 'C') then 
 
	open c02;
	loop 
	fetch c02 into 
		nr_seq_segurado_w, 
		cd_usuario_plano_w, 
		nr_seq_contrato_w, 
		dt_busca_w, 
		ds_observacao_w, 
		ie_origem_w, 
		nr_contrato_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin 
		 
			select	max(cd_pessoa_fisica) 
			into STRICT	cd_pessoa_fisica_w 
			from	pls_segurado 
			where	nr_sequencia = nr_seq_segurado_w;
		 
			select 	nextval('mprev_busca_empresarial_seq') 
			into STRICT	nr_sequencia_w 
			;
			 
			insert into mprev_busca_empresarial( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_contrato, 
				nr_seq_segurado, 
				cd_pessoa_fisica, 
				dt_busca, 
				ds_observacao, 
				ie_origem, 
				nr_contrato) 
			values (nr_sequencia_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_contrato_w, 
				nr_seq_segurado_w, 
				cd_pessoa_fisica_w, 
				dt_busca_w, 
				ds_observacao_w, 
				ie_origem_w, 
				nr_contrato_w);
				 
			CALL mprev_gerar_captacao_emp(nr_sequencia_w, nm_usuario_p);
			 
			SELECT	nr_sequencia 
			into STRICT	nr_seq_captacao_w 
			FROM	mprev_captacao 
			WHERE 	nr_seq_busca_emp = nr_sequencia_w;
				 
			open c03;
			loop 
			fetch c03 into 
				nr_seq_programa_w, 
				nr_seq_campanha_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				begin			 
					select 	nextval('mprev_captacao_destino_seq') 
					into STRICT	nr_seq_cap_destino_w 
					;
			 
					insert into mprev_captacao_destino( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_captacao, 
						nr_seq_programa, 
						nr_seq_campanha) 
					values (nr_seq_cap_destino_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_captacao_w, 
						nr_seq_programa_w, 
						nr_seq_campanha_w 
						);
				end;
			end loop;
			close c03;
 
			open c04;
			loop 
			fetch c04 into 
				ie_patologia_fator_risco_w, 
				nr_seq_diagnostico_int_w;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				begin 
					select 	nextval('mprev_captacao_diagnostico_seq') 
					into STRICT	nr_seq_cap_diagnostico_w 
					;
					 
					insert into mprev_captacao_diagnostico( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_captacao, 
						ie_patologia_fator_risco, 
						nr_seq_diagnostico_int) 
					values (nr_seq_cap_diagnostico_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_captacao_w, 
						ie_patologia_fator_risco_w, 
						nr_seq_diagnostico_int_w);
				end;
			end loop;
			close c04;
					 
				 
			 
			if (ie_liberar_p IS NOT NULL AND ie_liberar_p::text <> '') and (ie_liberar_p = 'S') then 
				CALL mprev_confirmar_busca_emp(nr_sequencia_w, 'N', nm_usuario_p);
			end if;
		end;
	end loop;
	close c02;
	 
end if;
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_duplicar_busca_emp ( nr_seq_busca_emp_p bigint, ie_opcao_p text, ie_liberar_p text, nm_usuario_p text) FROM PUBLIC;

