-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_23_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_seq_selecao_w	pls_util_cta_pck.t_number_table;
tb_valido_w		pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w		pls_util_cta_pck.t_varchar2_table_4000;

dados_validacao_w	pls_ocor_imp_pck.dados_regra_val_util_item;
dados_conta_proc_w	pls_ocor_imp_pck.dados_conta_proc;
qt_excedido_w		dbms_sql.number_table;
i			integer;
ds_observacao_w		varchar(32000);


dados_ret_val_23_w	pls_ocor_imp_pck.dados_ret_val_23;
dados_conta_mat_w	pls_ocor_imp_pck.dados_conta_mat;
					
-- Informacoes da validacao de situacao inativa do prestador
C01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_validacao,
		a.qt_liberada,
		a.qt_tipo_quantidade,
		a.ie_tipo_qtde,
		a.ie_somar_estrutura,
		a.ie_qt_lib_posterior,
		a.nr_seq_estrutura,
		a.ie_regra_qtde,
		a.ie_tipo_pessoa_qtde,
		a.nr_seq_grau_partic,
		a.ie_mesmo_medico,
		a.ie_mesma_especialidade,
		a.ie_mesmo_cid,
		a.ie_mesma_categoria_cid,
		a.ie_busca_medico_nota_servico,
		a.ie_medico_prestador,
		coalesce(a.ie_grau_participacao, 'N') ie_grau_participacao,
		coalesce(a.ie_campo_dt_validar, 'E') ie_campo_dt_validar,
		coalesce(a.ie_medico_consistencia, 'C') ie_medico_consistencia,
		coalesce(a.ie_guia_diferente, 'N') ie_guia_diferente,
    coalesce(a.ie_mesma_via_acesso,'N') ie_mesma_via_acesso
	from	pls_oc_cta_val_util_item a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc;

-- lista todos os procedimentos que precisam ser validados
c_proc CURSOR(	nr_id_transacao_pc	 pls_oc_cta_selecao_ocor_v.nr_id_transacao%type) FOR
	SELECT	a.nr_sequencia nr_seq_selecao,
		a.nr_seq_conta,
		a.nr_seq_conta_proc,
		c.cd_guia_referencia,
		c.cd_medico_executor,
		c.nr_seq_segurado,
		c.nr_seq_prestador_exec,
		c.cd_procedimento,
		c.ie_origem_proced,
		c.dt_procedimento,
		c.cd_cid_principal_conta,
		c.cd_cat_cid_principal_conta,
		c.nr_seq_cbo_saude,
		c.nr_sequencia,
		c.sg_cons_prof_prest_nota_serv,
		c.nr_cons_prof_prest_nota_serv,
		c.sg_uf_cons_prest_nota_serv,
		c.dt_procedimento_real,
		c.ie_tipo_guia,
    c.ie_via_acesso_conv
	from	pls_oc_cta_selecao_imp		a,
		pls_conta_proc_ocor_imp_v	c
	where	a.nr_id_transacao	= nr_id_transacao_pc
	and	a.ie_valido		= 'S'
	and	c.nr_sequencia		= a.nr_seq_conta_proc
	order by c.dt_procedimento, c.cd_procedimento, c.ie_origem_proced;
	
-- Materiais que foram filtrados na ocorrencia
c_mat CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type) FOR
	SELECT	a.nr_sequencia nr_seq_selecao,
		a.nr_seq_conta,
		a.nr_seq_conta_mat,
		c.cd_guia_referencia,
		c.cd_medico_executor,
		c.nr_seq_segurado,
		c.nr_seq_prestador_exec,
		c.nr_seq_material,
		c.dt_atendimento,
		c.cd_cid_principal_conta,
		c.cd_cat_cid_principal_conta,
		c.nr_seq_cbo_saude,
		c.ie_tipo_guia,
		d.nr_seq_protocolo
	from	pls_oc_cta_selecao_ocor_v	a,
		pls_conta_mat_ocor_imp_v	c,
		pls_conta_imp			d
	where	a.nr_id_transacao	= nr_id_transacao_pc
	and	a.ie_valido		= 'S'
	and	c.nr_sequencia		= a.nr_seq_conta_mat
	and 	a.nr_seq_conta		= d.nr_sequencia
	order by c.dt_atendimento, c.nr_seq_material;	

BEGIN

	-- Deve ter a informacao da regra para que a validacao seja aplicada
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') then
	
	CALL pls_gerencia_upd_obj_pck.atualizar_objetos('tasy', 'PLS_OC_CTA_TRATAR_VAL_23', 'PLS_ESTRUTURA_OCOR_TM');
	
	-- Busca os dados da regra de validacao conforme montado pelo usuario
	for	r_C01_w in C01(nr_seq_combinada_p) loop
	
		-- Alimenta os dados da regra
		dados_validacao_w.nr_sequencia			:= r_C01_w.nr_seq_validacao;
		dados_validacao_w.qt_liberada			:= r_C01_w.qt_liberada;
		dados_validacao_w.qt_tipo_quantidade		:= r_C01_w.qt_tipo_quantidade;
		dados_validacao_w.ie_qt_lib_posterior		:= r_C01_w.ie_qt_lib_posterior;
		dados_validacao_w.ie_somar_estrutura		:= r_C01_w.ie_somar_estrutura;
		dados_validacao_w.nr_seq_estrutura		:= r_C01_w.nr_seq_estrutura;
		dados_validacao_w.nr_seq_grau_partic		:= r_C01_w.nr_seq_grau_partic;
		dados_validacao_w.ie_tipo_qtde			:= r_C01_w.ie_tipo_qtde;
		dados_validacao_w.ie_tipo_pessoa_qtde		:= r_C01_w.ie_tipo_pessoa_qtde;
		dados_validacao_w.ie_regra_qtde			:= r_C01_w.ie_regra_qtde;
		dados_validacao_w.ie_mesmo_medico		:= r_C01_w.ie_mesmo_medico;
		dados_validacao_w.ie_mesma_especialidade	:= r_C01_w.ie_mesma_especialidade;
		dados_validacao_w.ie_mesmo_cid			:= r_C01_w.ie_mesmo_cid;
		dados_validacao_w.ie_mesma_categoria_cid	:= r_C01_w.ie_mesma_categoria_cid;
		dados_validacao_w.ie_busca_medico_nota_servico	:= r_C01_w.ie_busca_medico_nota_servico;
		dados_validacao_w.ie_medico_prestador		:= r_C01_w.ie_medico_prestador;
		dados_validacao_w.ie_grau_participacao		:= r_c01_w.ie_grau_participacao;
		dados_validacao_w.ie_campo_dt_validar		:= r_c01_w.ie_campo_dt_validar;
		dados_validacao_w.ie_medico_consistencia	:= r_c01_w.ie_medico_consistencia;
		dados_validacao_w.ie_guia_diferente			:= r_c01_w.ie_guia_diferente;
    dados_validacao_w.ie_mesma_via_acesso		:= r_c01_w.ie_mesma_via_acesso;
		
		-- Deve ter informacao de quantidade liberada para aplicar a regra
		if (dados_validacao_w.qt_liberada IS NOT NULL AND dados_validacao_w.qt_liberada::text <> '') then
		
			-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
			CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', 'N', nr_id_transacao_p, null, 'N');
			
			-- inicio tratamentos para procedimento
			i := 0;
			qt_excedido_w.delete;
			
			-- Incializar as listas para cada regra.
			SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
			
			-- busca todos os procedimentos que precisam ser validados
			for r_c_proc_w in c_proc(nr_id_transacao_p) loop
				
				-- inicializa os dados
				dados_conta_proc_w.nr_sequencia				:= r_c_proc_w.nr_sequencia;
				dados_conta_proc_w.nr_seq_conta				:= r_c_proc_w.nr_seq_conta;
				dados_conta_proc_w.nr_seq_conta_proc		:= r_c_proc_w.nr_seq_conta_proc;
				dados_conta_proc_w.cd_guia_referencia		:= r_c_proc_w.cd_guia_referencia;
				dados_conta_proc_w.nr_seq_prestador_exec	:= r_c_proc_w.nr_seq_prestador_exec;
				dados_conta_proc_w.nr_seq_segurado			:= r_c_proc_w.nr_seq_segurado;
				dados_conta_proc_w.cd_medico_executor		:= r_c_proc_w.cd_medico_executor;
				dados_conta_proc_w.dt_procedimento			:= r_c_proc_w.dt_procedimento;	
				dados_conta_proc_w.cd_procedimento			:= r_c_proc_w.cd_procedimento;				
				dados_conta_proc_w.ie_origem_proced			:= r_c_proc_w.ie_origem_proced;
				dados_conta_proc_w.cd_cid					:= r_c_proc_w.cd_cid_principal_conta;
				dados_conta_proc_w.cd_cat_cid				:= r_c_proc_w.cd_cat_cid_principal_conta;
				dados_conta_proc_w.nr_seq_cbo_saude				:= r_c_proc_w.nr_seq_cbo_saude;
				dados_conta_proc_w.sg_cons_prof_prest_nota_serv	:= r_c_proc_w.sg_cons_prof_prest_nota_serv;
				dados_conta_proc_w.nr_cons_prof_prest_nota_serv	:= r_c_proc_w.nr_cons_prof_prest_nota_serv;
				dados_conta_proc_w.sg_uf_cons_prest_nota_serv	:= r_c_proc_w.sg_uf_cons_prest_nota_serv;
				dados_conta_proc_w.ie_tipo_guia					:= r_c_proc_w.ie_tipo_guia;
        dados_conta_proc_w.ie_via_acesso            := r_c_proc_w.ie_via_acesso_conv;
					
				--Caso estiver definido na regra que utiliza o campo dt_procedimento_real
				if (r_c01_w.ie_campo_dt_validar = 'E') then
					dados_conta_proc_w.dt_procedimento := r_c_proc_w.dt_procedimento_real;
				end if;
				---ALTERAR	

				-- verifica se deve ser gerada ocorrencia para o item
				dados_ret_val_23_w := pls_oc_cta_val_23_proc_imp(	dados_validacao_w,
											nr_id_transacao_p,
											dados_conta_proc_w);
				
				-- se precisar gerar ocorrencia para o item vira a observacao pronta

				-- caso ela seja nula, significa que o item nao tera ocorrencia
											
				if (dados_ret_val_23_w.ds_observacao IS NOT NULL AND dados_ret_val_23_w.ds_observacao::text <> '') then
					
					-- Alimenta as listas com as informacoes para gravar no banco todas de uma vez
					tb_seq_selecao_w(i)	:= r_c_proc_w.nr_seq_selecao;
					tb_observacao_w(i)	:= substr(dados_ret_val_23_w.ds_observacao, 1, 2000);
					tb_valido_w(i)		:= 'S';
					qt_excedido_w(i)	:= dados_ret_val_23_w.qt_excedido;
					
					-- Quando a quantidade de itens da lista tiver chegado ao maximo definido na PLS_CTA_CONSISTIR_PCK, entao os registros sao levados para o BD 
					if (i = pls_util_cta_pck.qt_registro_transacao_w) then
						
						--Grava as informacoes na tabela de selecao
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ');
						
						-- Zera o indice para recomecar a contagem
						i := 0;
						
						--limpa as variaveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
						qt_excedido_w.delete;
					else
						i := i + 1;
					end if;
				end if;
			end loop;
			
			-- Se no fim do loop ainda tiver sobrado algo nas variaveis table, deve ser enviado ao banco, isto para os casos onde nao atingiu a quantidade de itens para envio definida
			if (tb_seq_selecao_w.count > 0) then
				--Grava as informacoes na tabela de selecao
				CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
										tb_observacao_w, nr_id_transacao_p,
										'SEQ');
			end if;
			
			-- inicio tratamentos para material
			i := 0;
			qt_excedido_w.delete;
			
			--limpa as variaveis
			SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
								
			-- busca todos os materiais que precisam ser validados
			for r_c_mat_w in c_mat(nr_id_transacao_p) loop
				
				-- inicializa os dados
				dados_conta_mat_w.nr_seq_conta			:= r_c_mat_w.nr_seq_conta;
				dados_conta_mat_w.cd_guia_referencia		:= r_c_mat_w.cd_guia_referencia;
				dados_conta_mat_w.nr_seq_prestador_exec		:= r_c_mat_w.nr_seq_prestador_exec;
				dados_conta_mat_w.nr_seq_segurado		:= r_c_mat_w.nr_seq_segurado;
				dados_conta_mat_w.cd_medico_executor		:= r_c_mat_w.cd_medico_executor;
				dados_conta_mat_w.nr_seq_conta_mat		:= r_c_mat_w.nr_seq_conta_mat;
				dados_conta_mat_w.dt_atendimento		:= r_c_mat_w.dt_atendimento;
				dados_conta_mat_w.nr_seq_material		:= r_c_mat_w.nr_seq_material;
				dados_conta_mat_w.cd_cid			:= r_c_mat_w.cd_cid_principal_conta;
				dados_conta_mat_w.cd_cat_cid			:= r_c_mat_w.cd_cat_cid_principal_conta;
				dados_conta_mat_w.nr_seq_cbo_saude		:= r_c_mat_w.nr_seq_cbo_saude;
				dados_conta_mat_w.ie_tipo_guia			:= r_c_mat_w.ie_tipo_guia;
				dados_conta_mat_w.ie_tipo_conta			:= 'A'; --Nao fara diferenca aqui, apenas para nao considerar como intercambio na pls_oc_cta_val_23_mat_imp
				---ALTERAR

				-- verifica se deve ser gerada ocorrencia para o item
				ds_observacao_w := pls_oc_cta_val_23_mat_imp(	dados_validacao_w, nr_id_transacao_p,
										dados_conta_mat_w, r_c_mat_w.nr_seq_protocolo);
				
				-- se precisar gerar ocorrencia para o item vira a observacao pronta

				-- caso ela seja nula, significa que o item nao tera ocorrencia
				if (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '') then
					
					-- Alimenta as listas com as informacoes para gravar no banco todas de uma vez
					tb_seq_selecao_w(i)	:= r_c_mat_w.nr_seq_selecao;
					tb_observacao_w(i)	:= substr(ds_observacao_w, 1, 2000);
					tb_valido_w(i)		:= 'S';
					
					-- Quando a quantidade de itens da lista tiver chegado ao maximo definido na PLS_CTA_CONSISTIR_PCK, entao os registros sao levados para o BD 
					if (i = pls_util_cta_pck.qt_registro_transacao_w) then
						
						--Grava as informacoes na tabela de selecao
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ');
						--limpa as variaveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
						
						-- Zera o indice para recomecar a contagem
						i := 0;
						qt_excedido_w.delete;
					else
						i := i + 1;
					end if;					
				end if;
			end loop;
			
			-- Se no fim do loop ainda tiver sobrado algo nas variaveis table, deve ser enviado ao banco, isto para os casos onde nao atingiu a quantidade de itens para envio definida
			if (tb_seq_selecao_w.count > 0) then
				--Grava as informacoes na tabela de selecao
				CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
										tb_observacao_w, nr_id_transacao_p,
										'SEQ');
			end if;
			
			--- seta os registros que serao validos ou invalidos apos o processamento 
			CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N',
								ie_regra_excecao_p, null,
								nr_id_transacao_p, null);			
		end if;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_23_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

