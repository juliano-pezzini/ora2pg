-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_trev_gerar_element_prod (( nr_sequencia_p bigint, nm_usuario_p text) is nr_seq_elemento_w bigint) RETURNS varchar AS $body$
DECLARE

		ds_retorno_w	varchar(1);
	
BEGIN
		ds_retorno_w := 'N';

		/* Elemento Agua somente gera com processo hidrico 
		   Elemento Glicose somente gera com check da glicose marcado
		   Demais elementos estao liberados */
		if ((ie_tipo_elemento_w = 'A' AND ie_processo_hidrico_w = 'S') or
		    (ie_tipo_elemento_w = 'C' AND ie_glicose_w = 'S') or (ie_tipo_elemento_w not in ('A', 'C'))) then
			ds_retorno_w := 'S';
		end if;

		/* Validacao do tipo de sodio de acordo com o elemento do completar */

		if ((ds_retorno_w = 'S') and
		    (((ie_completar_w in ('A', 'G', 'N')) and (ie_tipo_elemento_w = 'S')) or /* Agua e Glicose deve excluir Sodio Isotncico*/
			 ((ie_completar_w in ('C')) and (ie_tipo_elemento_w = 'N')))) then  /* Cloreto deve excluir Sodio */
			ds_retorno_w := 'N';
		end if;
	
		return ds_retorno_w;
	end;

begin

select	coalesce(max(ie_processo_hidrico),'N'),
		coalesce(max(ie_glicose), 'S'),
		coalesce(max(ie_completar), 'N')
into STRICT	ie_processo_hidrico_w,
		ie_glicose_w,
		ie_completar_w
from	cpoe_trev
where	nr_sequencia = nr_sequencia_p;

/* Caso desmarque a glicose durante a edicao do registro */

if (ie_glicose_w = 'N') then
	delete from cpoe_trev_elem a
	 where a.nr_seq_cpoe_trev = nr_sequencia_p
	   and a.nr_seq_elemento in (SELECT x.nr_sequencia
								   from nut_elemento x
								  where x.ie_tipo_elemento = 'C'
									and x.ie_situacao = 'A'
									and	x.ie_rep_he	= 'S'
									and	(x.cd_unidade_medida IS NOT NULL AND x.cd_unidade_medida::text <> ''));
end if;

for c01_w in C01
loop
	nr_seq_elemento_w := c01_w.nr_sequencia;
	cd_unidade_medida_w := c01_w.cd_unidade_medida;
	ie_tipo_elemento_w := c01_w.ie_tipo_elemento;
	ie_unid_med_w := c01_w.ie_unid_med;
	ie_processo_hidrico_ww	:= ie_processo_hidrico_w;

	if (valida_elemento = 'S') then

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_sequencia_w
		from	cpoe_trev_elem
		where	nr_seq_cpoe_trev	= nr_sequencia_p
		and		nr_seq_elemento	= nr_seq_elemento_w;
		
		if (nr_sequencia_w = 0) then
			begin
			
			if ((ie_completar_w in ('C', 'A', 'N')) and (ie_tipo_elemento_w = 'C') and (ie_glicose_w = 'S')) then
				ie_processo_hidrico_ww := 'S';
			end if;

			ie_unidade_ped_calc_w := null;
			if (ie_tipo_elemento_w not in ('C', 'S')) then /* Glicose e Sodio */
				if (ie_unid_med_w = 'Kg/d') then
					ie_unidade_ped_calc_w := 'R';
				elsif (ie_unid_med_w = 'PC/d') then
					ie_unidade_ped_calc_w := 'C';
				elsif (ie_unid_med_w = 'ml') then
					ie_unidade_ped_calc_w := 'M';
				end if;
			end if;

			select	nextval('cpoe_trev_elem_seq')
			into STRICT	nr_sequencia_w
			;

			insert into cpoe_trev_elem(
				nr_sequencia,
				nr_seq_cpoe_trev,
				nr_seq_elemento,
				dt_atualizacao,
				nm_usuario,
				cd_unidade_medida,
				cd_unidade_med_elem,
				qt_elem_kg_dia,
				qt_diaria,
				qt_volume,
				qt_volume_corrigido,
				qt_volume_etapa,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_unidade_ped_calc)
			values (
				nr_sequencia_w,
				nr_sequencia_p,
				nr_seq_elemento_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_unidade_medida_w,
				cd_unidade_medida_w,
				0,
				0,
				0,
				0,
				0,
				clock_timestamp(),
				nm_usuario_p,
				ie_unidade_ped_calc_w);

			open C02;
			loop
			fetch C02 into
					nr_sequencia_www;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				select	nextval('cpoe_trev_elem_mat_seq')
				into STRICT	nr_sequencia_ww
				;

				insert into cpoe_trev_elem_mat(
					nr_sequencia,
					nr_seq_ele_cpoe,
					dt_atualizacao,
					nm_usuario,
					nr_seq_elem_mat,
					qt_volume,
					qt_vol_cor,
					dt_atualizacao_nrec,
					nm_usuario_nrec)
				values (	nr_sequencia_ww,
					nr_sequencia_w,
					clock_timestamp(),
					nm_usuario_p,
					nr_sequencia_www,
					null,
					null,
					clock_timestamp(),
					nm_usuario_p);
			end loop;
			close C02;
			end;
			
			if (ie_tipo_elemento_w = 'C') then
				CALL cpoe_atualizar_trev_elem_mat(nr_sequencia_w,nm_usuario_p,ie_processo_hidrico_ww);
			end if;
			
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_glicose_w
			from	nut_elemento
			where	ie_tipo_elemento = 'C';
			
			/* Aqui que ta atualizando os valores negativos dos elementos */

			for c04_w in C04
			loop
				nr_seq_padrao_w := c04_w.nr_sequencia;
				qt_dose_padrao_w := c04_w.qt_dose_padrao;

				update	cpoe_trev_elem a
				set		qt_elem_kg_dia		= qt_dose_padrao_w
				where	nr_seq_cpoe_trev	= nr_sequencia_p
				and		nr_seq_elemento		<> nr_seq_glicose_w
				and		nr_seq_elemento		= nr_seq_padrao_w
				and		qt_elem_kg_dia		= 0;
			end loop;
		end if;
	end if;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_trev_gerar_element_prod (( nr_sequencia_p bigint, nm_usuario_p text) is nr_seq_elemento_w bigint) FROM PUBLIC;

