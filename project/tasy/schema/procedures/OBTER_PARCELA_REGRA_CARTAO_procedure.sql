-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_parcela_regra_cartao ( nr_seq_extrato_movto_p bigint, nr_seq_parcela_p bigint, ie_pagto_indevido_p text, ie_cv_repetido_p text, nm_usuario_p text, ie_parcela_p INOUT text, vl_min_indevido_p INOUT bigint, vl_max_indevido_p INOUT bigint, ds_lista_parcela_p INOUT text) AS $body$
DECLARE


/* ie_parcela_w

N	Não
S	Sim

*/
ie_parcela_w		varchar(1)	:= 'N';
ds_retorno_w		varchar(2000);

cd_estabelecimento_w	bigint;
nr_seq_regra_bandeira_w	bigint;
qt_regra_w		bigint	:= 0;
nm_atributo_w		varchar(15);
nr_parcela_w		bigint;
ds_comprovante_w	varchar(100);
nr_seq_bandeira_w	bigint;
nr_seq_grupo_w		bigint;
ie_tipo_arquivo_w	varchar(5);
nr_resumo_w		varchar(255);
dt_parcela_ini_w	timestamp;
dt_parcela_fim_w	timestamp;
nr_autorizacao_w	varchar(40);
vl_min_indevido_w	double precision;
vl_max_indevido_w	double precision;
vl_total_parcela_w	double precision;
vl_parcela_w		double precision;
vl_saldo_concil_fin_w	double precision;
vl_liquido_w		double precision;
vl_comparacao_w		double precision;
ds_comprovante_tasy_w	varchar(100);
qt_parcela_w		bigint;

ds_select_w		varchar(255);
ds_from_w		varchar(255);
ds_where_w		varchar(2000);
ds_parametros_w		varchar(255);

ie_mc_ds_cp_w		varchar(1)	:= 'N';
ie_mc_dt_pc_w		varchar(1)	:= 'N';
ie_mc_ie_tc_w		varchar(1)	:= 'N';
ie_mc_nr_at_w		varchar(1)	:= 'N';
ie_ob_nr_pc_w		varchar(1)	:= 'N';
ie_ob_qt_pc_w		varchar(1)	:= 'N';

vl_parcela_concil_w	double precision	:= 0;
nr_seq_parcela_w	bigint;
ds_lista_parcela_w	varchar(255);

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.vl_min_indevido,
	a.vl_max_indevido
from	bandeira_cartao_cr_regra a
where	((coalesce(nr_seq_bandeira_w::text, '') = '' and a.nr_seq_grupo = nr_seq_grupo_w) or a.nr_seq_bandeira = nr_seq_bandeira_w)
and	coalesce(a.cd_estabelecimento,coalesce(cd_estabelecimento_w,0))	= coalesce(cd_estabelecimento_w,0)
and	clock_timestamp()	between coalesce(a.dt_inicio_vigencia,clock_timestamp()) and coalesce(a.dt_fim_vigencia,clock_timestamp())

union all

select	0 nr_sequencia,
	0 vl_min_indevido,
	0 vl_max_indevido

where	not exists
	(select	1
	from	bandeira_cartao_cr_regra a
	where	((coalesce(nr_seq_bandeira_w::text, '') = '' and a.nr_seq_grupo = nr_seq_grupo_w) or a.nr_seq_bandeira = nr_seq_bandeira_w)
	and	coalesce(a.cd_estabelecimento,coalesce(cd_estabelecimento_w,0))	= coalesce(cd_estabelecimento_w,0)
	and	clock_timestamp()	between coalesce(a.dt_inicio_vigencia,clock_timestamp()) and coalesce(a.dt_fim_vigencia,clock_timestamp()));

c02 CURSOR FOR
SELECT	a.nm_atributo
from	band_cartao_cr_regra_atrib a
where	a.nr_seq_regra_bandeira	= nr_seq_regra_bandeira_w;

c03 CURSOR FOR
/* se tiver regra de atributo para conciliação */

SELECT	coalesce(CASE WHEN ie_tipo_arquivo_w='C' THEN a.vl_parcela  ELSE a.vl_liquido END ,0) vl_parcela,
	b.ds_comprovante,
	a.nr_sequencia
from	bandeira_cartao_cr c,
	movto_cartao_cr b,
	movto_cartao_cr_parcela a
where	coalesce(a.nr_resumo,'0')	= CASE WHEN ie_tipo_arquivo_w='F' THEN nr_resumo_w  ELSE coalesce(a.nr_resumo,'0') END
and	((coalesce(nr_seq_bandeira_w,0) = 0 and c.nr_seq_grupo = nr_seq_grupo_w) or c.nr_sequencia = nr_seq_bandeira_w)
and	b.nr_seq_bandeira	= c.nr_sequencia
and	coalesce(b.dt_cancelamento::text, '') = ''
and	a.nr_seq_movto		= b.nr_sequencia
and	a.vl_saldo_liquido	<> 0
and	coalesce(a.nr_seq_extrato_parcela::text, '') = ''
and	a.nr_sequencia		= coalesce(nr_seq_parcela_p,a.nr_sequencia)
and (ie_mc_ds_cp_w = 'N' or coalesce(ltrim(trim(both b.ds_comprovante),'0'),'X') = coalesce(ltrim(trim(both coalesce(ds_comprovante_w,b.ds_comprovante)),'0'),'X'))
and (ie_mc_dt_pc_w = 'N' or a.dt_parcela between to_date(dt_parcela_ini_w) and to_date(dt_parcela_fim_w))
and (ie_mc_ie_tc_w = 'N' or b.ie_tipo_cartao = CASE WHEN ie_tipo_arquivo_w='F' THEN 'C'  ELSE ie_tipo_arquivo_w END )
and (ie_mc_nr_at_w = 'N' or coalesce(b.nr_autorizacao,'X') = coalesce(nr_autorizacao_w,coalesce(b.nr_autorizacao,'X')))
and (ie_ob_nr_pc_w = 'N' or ((obter_numero_parcela_cartao(a.nr_seq_movto,a.nr_sequencia))::numeric  = nr_parcela_w or coalesce(nr_parcela_w,0) = 0))
and (ie_ob_qt_pc_w = 'N' or replace(substr(obter_qt_parcela_cartao(a.nr_sequencia),1,2),' ',null) = to_char(CASE WHEN nr_parcela_w=0 THEN 1  ELSE nr_parcela_w END ))
and (nr_seq_regra_bandeira_w <> 0 and coalesce(qt_regra_w,0) <> 0)

union

/* se não tiver regra de atributo, concilia da forma tradicional
se o extrato for de um grupo de bandeiras */
select	a.vl_parcela,
	b.ds_comprovante,
	a.nr_sequencia
from	bandeira_cartao_cr c,
	movto_cartao_cr b,
	movto_cartao_cr_parcela a
where	c.nr_seq_grupo			= nr_seq_grupo_w
and	b.nr_seq_bandeira		= c.nr_sequencia
and	coalesce(ltrim(trim(both b.ds_comprovante),'0'),'X') = coalesce(ltrim(trim(both coalesce(ds_comprovante_w,b.ds_comprovante)),'0'),'X')
and	coalesce(b.dt_cancelamento::text, '') = ''
and	b.ie_tipo_cartao		= CASE WHEN ie_tipo_arquivo_w='F' THEN 'C'  ELSE ie_tipo_arquivo_w END 
and	a.nr_seq_movto			= b.nr_sequencia
and ((obter_numero_parcela_cartao(a.nr_seq_movto,a.nr_sequencia))::numeric  = nr_parcela_w or coalesce(nr_parcela_w,0) = 0)
and	coalesce(a.nr_resumo,'0')		= CASE WHEN ie_tipo_arquivo_w='F' THEN nr_resumo_w  ELSE coalesce(a.nr_resumo,'0') END 
and	a.vl_saldo_liquido		<> 0
and	coalesce(a.nr_seq_extrato_parcela::text, '') = ''
and	a.nr_sequencia			= coalesce(nr_seq_parcela_p,a.nr_sequencia)
and (nr_seq_regra_bandeira_w = 0 or coalesce(qt_regra_w,0) = 0)
and (nr_seq_grupo_w IS NOT NULL AND nr_seq_grupo_w::text <> '')

union

/* se não tiver regra de atributo, concilia da forma tradicional
se o extrato for de uma única bandeira */
select	CASE WHEN ie_tipo_arquivo_w='C' THEN a.vl_parcela  ELSE a.vl_liquido END  vl_parcela,
	b.ds_comprovante,
	a.nr_sequencia
from	movto_cartao_cr b,
	movto_cartao_cr_parcela a
where	coalesce(ltrim(trim(both b.ds_comprovante),'0'),'X') = coalesce(ltrim(trim(both coalesce(ds_comprovante_w,b.ds_comprovante)),'0'),'X')
and	replace(substr(obter_qt_parcela_cartao(a.nr_sequencia),1,2),' ',null) = to_char(CASE WHEN nr_parcela_w=0 THEN 1  ELSE nr_parcela_w END )
and	b.nr_seq_bandeira		= nr_seq_bandeira_w
and	coalesce(b.dt_cancelamento::text, '') = ''
and	a.nr_seq_movto			= b.nr_sequencia
and	a.vl_saldo_liquido		<> 0
and	coalesce(a.nr_seq_extrato_parcela::text, '') = ''
and	a.nr_sequencia			= coalesce(nr_seq_parcela_p,a.nr_sequencia)
and (nr_seq_regra_bandeira_w = 0 or coalesce(qt_regra_w,0) = 0)
and (coalesce(nr_seq_grupo_w::text, '') = '');


BEGIN

select	max(b.cd_estabelecimento),
	max(b.nr_seq_grupo),
	max(b.nr_seq_bandeira),
	max(a.ds_comprovante),
	max(a.nr_parcela),
	coalesce(max(c.ie_tipo_arquivo),'C'),
	max(a.nr_resumo),
	trunc(max(a.dt_parcela),'dd'),
	fim_dia(max(a.dt_parcela)),
	max(a.nr_autorizacao),
	max(a.vl_parcela),
	max(a.vl_saldo_concil_fin),
	max(a.vl_liquido)
into STRICT	cd_estabelecimento_w,
	nr_seq_grupo_w,
	nr_seq_bandeira_w,
	ds_comprovante_w,
	nr_parcela_w,
	ie_tipo_arquivo_w,
	nr_resumo_w,
	dt_parcela_ini_w,
	dt_parcela_fim_w,
	nr_autorizacao_w,
	vl_parcela_w,
	vl_saldo_concil_fin_w,
	vl_liquido_w
FROM extrato_cartao_cr b, extrato_cartao_cr_movto a
LEFT OUTER JOIN extrato_cartao_cr_arq c ON (a.nr_seq_extrato_arq = c.nr_sequencia)
WHERE a.nr_seq_extrato	= b.nr_sequencia and a.nr_sequencia		= nr_seq_extrato_movto_p;

if (coalesce(ie_tipo_arquivo_w,'C')	= 'C') then
	vl_comparacao_w	:= vl_parcela_w;
elsif (coalesce(ie_tipo_arquivo_w,'C')	= 'F') then
	vl_comparacao_w	:= vl_saldo_concil_fin_w;
else
	vl_comparacao_w	:= vl_liquido_w;
end if;

open	c01;
loop
fetch	c01 into
	nr_seq_regra_bandeira_w,
	vl_min_indevido_w,
	vl_max_indevido_w;
exit	when(c01%notfound or coalesce(ie_parcela_w,'N') = 'S');

	ie_mc_ds_cp_w		:= 'N';
	ie_mc_dt_pc_w		:= 'N';
	ie_mc_ie_tc_w		:= 'N';
	ie_mc_nr_at_w		:= 'N';
	ie_ob_nr_pc_w		:= 'N';
	ie_ob_qt_pc_w		:= 'N';
	qt_regra_w		:= 0;

	open	c02;
	loop
	fetch	c02 into
		nm_atributo_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */

		qt_regra_w	:= coalesce(qt_regra_w,0) + 1;

		if (nm_atributo_w	= 'MCDSCP') then
			ie_mc_ds_cp_w	:= 'S';
		elsif (nm_atributo_w	= 'MCDTPC') then
			ie_mc_dt_pc_w	:= 'S';
		elsif (nm_atributo_w	= 'MCIETC') then
			ie_mc_ie_tc_w	:= 'S';
		elsif (nm_atributo_w	= 'MCNRAT') then
			ie_mc_nr_at_w	:= 'S';
		elsif (nm_atributo_w	= 'OBNRPC') then
			ie_ob_nr_pc_w	:= 'S';
		elsif (nm_atributo_w	= 'OBQTPC') then
			ie_ob_qt_pc_w	:= 'S';
		end if;

	end	loop;
	close	c02;

	open	c03;
	loop
	fetch	c03 into
		vl_parcela_concil_w,
		ds_comprovante_tasy_w,
		nr_seq_parcela_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */

		vl_total_parcela_w	:= coalesce(vl_total_parcela_w,0) + coalesce(vl_parcela_concil_w,0);
		qt_parcela_w		:= coalesce(qt_parcela_w,0) + 1;
		ie_parcela_w		:= 'S';

		if (coalesce(ds_lista_parcela_w::text, '') = '') then

			ds_lista_parcela_w	:= nr_seq_parcela_w;

		elsif (length(ds_lista_parcela_w || ', ' || nr_seq_parcela_w) <= 255) then

			ds_lista_parcela_w	:= ds_lista_parcela_w || ', ' || nr_seq_parcela_w;

		end if;

	end	loop;
	close	c03;

	/* consistências */

	if (coalesce(ie_parcela_w,'N') = 'S') then

		/* conciliar sempre */

		if (coalesce(ie_cv_repetido_p,'S') = 'S') or (coalesce(ds_comprovante_tasy_w::text, '') = '') then

			qt_parcela_w	:= 1;

		elsif (coalesce(ie_cv_repetido_p,'S') = 'N') then

			select	count(*)
			into STRICT	qt_parcela_w
			from	bandeira_cartao_cr b,
				movto_cartao_cr a
			where (b.nr_seq_grupo = nr_seq_grupo_w or (coalesce(nr_seq_grupo_w::text, '') = '' and a.nr_seq_bandeira = nr_seq_bandeira_w))
			and	a.nr_seq_bandeira	= b.nr_sequencia
			and	obter_saldo_cartao_cr(a.nr_sequencia,null)	<> 0
			and	coalesce(a.dt_cancelamento::text, '') = ''
			and	a.ds_comprovante	= ds_comprovante_tasy_w;

		end if;

		if	/* não conciliar se houverem outras movimentações com mesmo comprovante de venda */
			(coalesce(qt_parcela_w,0) > 1) or
			/* verificar se o valor encaixa-se no intervalo permitido pela regra */

			(((coalesce(nr_seq_parcela_p,0) = 0) and (coalesce(ie_pagto_indevido_p,'N') = 'N') and
			((coalesce(vl_total_parcela_w,0) < (coalesce(vl_comparacao_w,0) + coalesce(vl_min_indevido_w,0))) or
			(coalesce(vl_total_parcela_w,0) > (coalesce(vl_comparacao_w,0) + coalesce(vl_max_indevido_w,0)))))) then

			ie_parcela_w	:= 'N';

		end if;

	end if;

end	loop;
close	c01;

ie_parcela_p		:= coalesce(ie_parcela_w,'N');
vl_min_indevido_p	:= coalesce(vl_min_indevido_w,0);
vl_max_indevido_p	:= coalesce(vl_max_indevido_w,0);
ds_lista_parcela_p	:= ds_lista_parcela_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_parcela_regra_cartao ( nr_seq_extrato_movto_p bigint, nr_seq_parcela_p bigint, ie_pagto_indevido_p text, ie_cv_repetido_p text, nm_usuario_p text, ie_parcela_p INOUT text, vl_min_indevido_p INOUT bigint, vl_max_indevido_p INOUT bigint, ds_lista_parcela_p INOUT text) FROM PUBLIC;

