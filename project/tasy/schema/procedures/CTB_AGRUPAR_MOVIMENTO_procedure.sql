-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_agrupar_movimento ( nr_lote_contabil_p bigint, nm_usuario_p text) AS $body$
DECLARE

		 
cd_tipo_lote_contabil_w	bigint;
dt_atualizacao_w		timestamp;
cd_estabelecimento_w	smallint;
ie_agrupa_w		varchar(01);
qt_regra_agrup_w		integer;

nr_seq_agrup_w		bigint;
nr_seq_atual_w		bigint;
nr_seq_anterior_w		bigint;

ds_ordem_w		varchar(4000);

cd_conta_debito_w		varchar(20);
cd_conta_credito_w	varchar(20);
cd_historico_w		bigint;
dt_movimento_w		timestamp;
vl_movimento_w		double precision;
ds_compl_historico_w	varchar(255);
cd_estab_movto_w		smallint;
nr_seq_movto_corresp_w	bigint;

ie_movto_corresp_w	varchar(1);

cd_conta_debito_ww	varchar(20);
cd_conta_credito_ww	varchar(20);
cd_historico_ww		bigint;
dt_movimento_ww		timestamp;
ds_compl_historico_ww	varchar(255);

nr_seq_movto_cc_w	bigint;

cd_centro_custo_w		integer;
vl_centro_custo_w		double precision;

vl_debito_ant_w		double precision;
vl_credito_ant_w		double precision;

vl_debito_atual_w		double precision;
vl_credito_atual_w		double precision;

dt_fechamento_w		timestamp;

c01 CURSOR FOR 
SELECT	m.nr_sequencia, 
	ctb_define_ordenacao(l.cd_estabelecimento, l.cd_tipo_lote_contabil, coalesce(m.cd_conta_debito, m.cd_conta_credito),  
		m.dt_movimento, null, null, null, 
		null, m.ds_compl_historico, m.vl_movimento, m.nr_seq_agrupamento) ds_ordem, 
	m.cd_conta_debito, 
	m.cd_conta_credito, 
	m.cd_historico, 
	m.dt_movimento, 
	m.vl_movimento, 
	m.ds_compl_historico, 
	m.cd_estabelecimento, 
	m.nr_seq_movto_corresp 
from	ctb_movimento m, 
	lote_contabil l 
where	m.nr_lote_contabil	= nr_lote_contabil_p 
and	m.nr_lote_contabil	= l.nr_lote_contabil 
order by	ctb_define_ordenacao(l.cd_estabelecimento, l.cd_tipo_lote_contabil, coalesce(m.cd_conta_debito, m.cd_conta_credito),  
		m.dt_movimento, null, null, null, 
		null, m.ds_compl_historico, m.vl_movimento, m.nr_seq_agrupamento), 
	m.cd_conta_debito, 
	m.cd_conta_credito, 
	m.dt_movimento, 
	m.cd_historico, 
	m.ds_compl_historico;
	
c02 CURSOR FOR 
SELECT	cd_centro_custo, 
	vl_movimento 
from	ctb_movto_centro_custo 
where	nr_seq_movimento = nr_seq_atual_w;


BEGIN 
 
 
begin 
select	dt_atualizacao_saldo, 
	cd_tipo_lote_contabil, 
	cd_estabelecimento, 
	dt_fechamento 
into STRICT	dt_atualizacao_w, 
	cd_tipo_lote_contabil_w, 
	cd_estabelecimento_w, 
	dt_fechamento_w 
from	lote_contabil a, 
	CTB_MES_REF b 
where	a.nr_Seq_mes_ref = b.nr_sequencia 
and	nr_lote_contabil	= nr_lote_contabil_p;
exception 
when others then 
	--r.aise_application_error(-20011,'Lote contábil não encontrado.'); 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(237762);
end;
 
if (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then 
	--r.aise_application_error(-20011,'O mês contábil está fechado, este processo não pode ser realizado!'); 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(237763);
end if;
	 
select	count(*), 
	coalesce(max(ie_agrupa),'N') 
into STRICT	qt_regra_agrup_w, 
	ie_agrupa_w 
from	ctb_regra_agrup 
where	cd_tipo_lote_contabil = cd_tipo_lote_contabil_w 
and	cd_estabelecimento  = cd_estabelecimento_w 
and	(ie_regra_ordem_01 IS NOT NULL AND ie_regra_ordem_01::text <> '') 
and	(ie_regra_ordem_02 IS NOT NULL AND ie_regra_ordem_02::text <> '') 
and	(ie_regra_ordem_03 IS NOT NULL AND ie_regra_ordem_03::text <> '') 
and	(ie_regra_ordem_04 IS NOT NULL AND ie_regra_ordem_04::text <> '') 
and	(ie_regra_ordem_05 IS NOT NULL AND ie_regra_ordem_05::text <> '');
 
if (ie_agrupa_w = 'S') then 
	begin 
	select	coalesce(sum(CASE WHEN coalesce(cd_conta_debito::text, '') = '' THEN  0  ELSE vl_movimento END ),0), 
		coalesce(sum(CASE WHEN coalesce(cd_conta_credito::text, '') = '' THEN  0  ELSE vl_movimento END ),0) 
	into STRICT	vl_debito_ant_w, 
		vl_credito_ant_w 
	from	ctb_movimento	 
	where	nr_lote_contabil = nr_lote_contabil_p;
	 
	open c01;
	loop 
	fetch c01 into	 
		nr_seq_atual_w, 
		ds_ordem_w, 
		cd_conta_debito_w, 
		cd_conta_credito_w, 
		cd_historico_w, 
		dt_movimento_w, 
		vl_movimento_w, 
		ds_compl_historico_w, 
		cd_estab_movto_w, 
		nr_seq_movto_corresp_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		begin 
		select	'S' 
		into STRICT	ie_movto_corresp_w 
		from	ctb_movimento 
		where	nr_seq_movto_corresp = nr_seq_atual_w  LIMIT 1;
		exception 
		when others then 
			ie_movto_corresp_w := 'N';
		end;
		 
		if (coalesce(nr_seq_movto_corresp_w::text, '') = '') and (ie_movto_corresp_w = 'N') then 
			begin 
			if (dt_movimento_w	= dt_movimento_ww) and (cd_historico_w	= cd_historico_ww) and (coalesce(cd_conta_debito_w, 'X')	= coalesce(cd_conta_debito_ww, 'X')) and (coalesce(cd_conta_credito_w, 'X')	= coalesce(cd_conta_credito_ww, 'X')) and (coalesce(ds_compl_historico_w, 'X') = coalesce(ds_compl_historico_ww, 'X')) then 
				begin 
				update	ctb_movimento 
				set	vl_movimento	= vl_movimento + vl_movimento_w 
				where	nr_sequencia	= nr_seq_agrup_w;
				 
				open c02;
				loop 
				fetch c02 into	 
					cd_centro_custo_w, 
					vl_centro_custo_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					begin 
					select	max(nr_sequencia) 
					into STRICT	nr_seq_movto_cc_w 
					from	ctb_movto_centro_custo 
					where	cd_centro_custo = cd_centro_custo_w 
					and	nr_seq_movimento = nr_seq_agrup_w;
					 
					if (nr_seq_movto_cc_w > 0) then 
						update	ctb_movto_centro_custo 
						set	vl_movimento = vl_movimento + vl_centro_custo_w 
						where	nr_sequencia = nr_seq_movto_cc_w;
					else 
						insert into ctb_movto_centro_custo( 
							nr_sequencia, 
							nr_seq_movimento, 
							cd_centro_custo, 
							dt_atualizacao, 
							nm_usuario, 
							vl_movimento, 
							pr_rateio) 
						values (	nextval('ctb_movto_centro_custo_seq'), 
							nr_seq_agrup_w, 
							cd_centro_custo_w, 
							clock_timestamp(), 
							nm_usuario_p, 
							vl_centro_custo_w, 
							0);
					end if;
					end;
				end loop;
				close c02;
				 
				delete	FROM ctb_movimento 
				where	nr_sequencia = nr_seq_atual_w;
				end;
			else 
				begin 
				nr_seq_agrup_w		:= nr_seq_atual_w;
				nr_seq_anterior_w		:= nr_seq_atual_w;
				cd_conta_debito_ww	:= cd_conta_debito_w;
				cd_conta_credito_ww	:= cd_conta_credito_w;
				dt_movimento_ww		:= dt_movimento_w;
				cd_historico_ww		:= cd_historico_w;
				ds_compl_historico_ww	:= ds_compl_historico_w;
				end;
			end if;
			end;
		end if;
		end;
	end loop;
	close c01;
	 
	select	coalesce(sum(CASE WHEN coalesce(cd_conta_debito::text, '') = '' THEN  0  ELSE vl_movimento END ),0), 
		coalesce(sum(CASE WHEN coalesce(cd_conta_credito::text, '') = '' THEN  0  ELSE vl_movimento END ),0) 
	into STRICT	vl_debito_atual_w, 
		vl_credito_atual_w 
	from	ctb_movimento	 
	where	nr_lote_contabil = nr_lote_contabil_p;
 
	if (vl_debito_atual_w = vl_debito_ant_w) and (vl_credito_atual_w = vl_credito_ant_w) then 
		commit;
	else	 
		begin 
		rollback;
		--r.aise_application_error(-20011,'O agrupamento não foi realizado!'); 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(237764);
		end;
	end if;
	end;
end if;
	 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_agrupar_movimento ( nr_lote_contabil_p bigint, nm_usuario_p text) FROM PUBLIC;

