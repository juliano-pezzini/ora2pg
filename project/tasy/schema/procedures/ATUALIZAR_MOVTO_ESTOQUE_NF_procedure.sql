-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_movto_estoque_nf ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_movimento_estoque_w		bigint;
cd_estabelecimento_w		smallint;
dt_movimento_estoque_w		timestamp;
cd_operacao_estoque_w		smallint;
cd_material_estoque_w		integer;
cd_material_w			integer;
dt_mesano_referencia_w		timestamp;
qt_movimento_w			double precision;
dt_atualizacao_w			timestamp		:= clock_timestamp();
nm_usuario_w			varchar(15);
nr_documento_w			varchar(20);
nr_sequencia_item_docto_w		integer;
nr_sequencia_documento_w	nota_fiscal.nr_sequencia_nf%type;
vl_movimento_w			double precision;
qt_estoque_w			double precision;
qt_estoque_movto_w		double precision;
dt_processo_w			timestamp;

vl_despesa_acessoria_w		double precision;
vl_despesa_acessoria_c01_w		double precision;
vl_seguro_w			double precision;
vl_seguro_c01_w			double precision;
vl_total_item_nf_w		double precision;
vl_total_item_nf_c01_w		double precision;
vl_frete_w			double precision;
vl_frete_c01_w			double precision;
vl_desconto_w			double precision;
vl_desconto_c01_w			double precision;
vl_desconto_rateio_w		double precision;
vl_desconto_rateio_c01_w		double precision;
vl_custo_medio_w			double precision;

vl_despesa_acessoria_ww		double precision;
vl_seguro_ww			double precision;
vl_total_item_nf_ww		double precision;
vl_frete_ww			double precision;
vl_desconto_ww			double precision;
vl_desconto_rateio_ww		double precision;
vl_custo_medio_ww		double precision;

dt_mesano_vigente_w		timestamp;
cd_tributo_w			smallint;
cd_tipo_valor_w			smallint;
vl_tributo_w			double precision;
qt_movto_valor_w			integer;
ie_tipo_nota_w			varchar(2);
qt_existe_w			integer;
ie_valorizar_material_w		varchar(1) := 'N';
ie_valorizar_cm_movimento_w	varchar(1);
cd_local_estoque_w		smallint;

vl_total_nf_w			double precision;
ie_aumenta_diminui_valor_w		varchar(5);

c01 CURSOR FOR
SELECT	b.dt_entrada_saida,
	a.cd_operacao_estoque,
	c.cd_material,
	c.cd_material_estoque,
	c.qt_item_nf,
	clock_timestamp(),
	nm_usuario_p,
	substr(b.nr_nota_fiscal,1,20),
	c.nr_item_nf,
	b.nr_sequencia_nf,
	0,
	c.qt_item_estoque,
	coalesce(c.vl_despesa_acessoria,0),
	coalesce(c.vl_seguro,0),
	coalesce(c.vl_total_item_nf,0),
	coalesce(c.vl_frete,0),
	coalesce(c.vl_desconto,0),
	coalesce(c.vl_desconto_rateio,0),
	CASE WHEN c.qt_item_estoque=0 THEN 0  ELSE coalesce(c.vl_liquido,0) / c.qt_item_estoque END ,
	c.cd_local_estoque
from	operacao_nota a,
	nota_fiscal b ,
	nota_fiscal_item c
where	b.nr_sequencia        = c.nr_sequencia
and	b.cd_operacao_nf   = a.cd_operacao_nf
and	b.nr_sequencia    	= nr_sequencia_p
and	(c.cd_material IS NOT NULL AND c.cd_material::text <> '')
and	(c.cd_local_estoque IS NOT NULL AND c.cd_local_estoque::text <> '');

c02 CURSOR FOR
SELECT	nr_movimento_estoque,
	qt_estoque
from	movimento_estoque
where	nr_seq_tab_orig = nr_sequencia_p
and	nr_sequencia_item_docto = nr_sequencia_item_docto_w
and	ie_origem_documento = 1;

c03 CURSOR FOR
SELECT	a.cd_tributo,
	a.vl_tributo
from	tributo b,
	nota_fiscal_item_trib a
where	a.cd_tributo	= b.cd_tributo
and	a.nr_sequencia	= nr_sequencia_p
and	a.nr_item_nf	= nr_sequencia_item_docto_w;

C04 CURSOR FOR
SELECT	d.cd_tipo_valor,
	d.ie_aumenta_diminui_valor,
	coalesce(c.vl_despesa_acessoria,0),
	coalesce(c.vl_seguro,0),
	coalesce(c.vl_total_item_nf,0),
	coalesce(c.vl_frete,0),
	coalesce(c.vl_desconto,0),
	coalesce(c.vl_desconto_rateio,0),
	CASE WHEN c.qt_item_estoque=0 THEN 0  ELSE coalesce(c.vl_liquido,0) / c.qt_item_estoque END
FROM	tipo_valor d,
	operacao_nota a,
	nota_fiscal b ,
	nota_fiscal_item c
WHERE	b.nr_sequencia        = c.nr_sequencia
AND	b.cd_operacao_nf   = a.cd_operacao_nf
AND	d.cd_material 	= c.cd_material
and	b.ie_situacao	= '1'
and	d.ie_situacao = 'A'
and	(b.dt_atualizacao_estoque IS NOT NULL AND b.dt_atualizacao_estoque::text <> '')
AND	b.nr_seq_nf_ref    	= nr_sequencia_p;


BEGIN

select	cd_estabelecimento,
	dt_entrada_saida
into STRICT	cd_estabelecimento_w,
	dt_mesano_referencia_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

select	obter_se_nota_entrada_saida(nr_sequencia_p)
into STRICT	ie_tipo_nota_w
;

select	coalesce(max(ie_atualiza_cm_calc_nf),'N')
into STRICT	ie_valorizar_cm_movimento_w
from	parametro_estoque
where	cd_estabelecimento = cd_estabelecimento_w;

if (ie_valorizar_cm_movimento_w = 'S') then
	begin
	select	cd_operacao_estoque
	into STRICT	cd_operacao_estoque_w
	from	operacao_nota a,
		nota_fiscal b
	where	b.nr_sequencia    	= nr_sequencia_p
	and	b.cd_operacao_nf     	= a.cd_operacao_nf;
	
	begin
	select	coalesce(CASE WHEN ie_altera_custo='S' THEN 'S'  ELSE 'N' END ,'N')
	into STRICT	ie_valorizar_material_w
	from	operacao_estoque
	where	cd_operacao_estoque = cd_operacao_estoque_w;
	exception
	when others then
		ie_valorizar_material_w := 'N';	
	end;
	end;
end if;

begin
select	dt_mesano_vigente
into STRICT	dt_mesano_vigente_w
from   	parametro_estoque
where  	cd_estabelecimento = cd_estabelecimento_w;
exception
	when others then
		dt_mesano_vigente_w := dt_mesano_referencia_w;
end;

if (dt_mesano_referencia_w <= pkg_date_utils.get_datetime(pkg_date_utils.end_of(dt_mesano_vigente_w, 'MONTH', 0), dt_mesano_vigente_w)) then
	dt_mesano_referencia_w := dt_mesano_vigente_w;
else
	dt_mesano_referencia_w := PKG_DATE_UTILS.START_OF(dt_mesano_referencia_w,'month');
end if;

select	coalesce(sum(c.vl_total_item_nf),0)
into STRICT	vl_total_nf_w
from	operacao_nota a,
	nota_fiscal b ,
	nota_fiscal_item c
where	b.nr_sequencia         = c.nr_sequencia
and	b.cd_operacao_nf     = a.cd_operacao_nf
and	b.nr_sequencia    	= nr_sequencia_p;

open c01;
loop
fetch c01 into
	dt_movimento_estoque_w,
	cd_operacao_estoque_w,
	cd_material_w,
	cd_material_estoque_w,
	qt_movimento_w,
	dt_atualizacao_w,
	nm_usuario_w,
	nr_documento_w,
	nr_sequencia_item_docto_w,
	nr_sequencia_documento_w,
	vl_movimento_w,
	qt_estoque_w,
	vl_despesa_acessoria_c01_w,
	vl_seguro_c01_w,
	vl_total_item_nf_c01_w,
	vl_frete_c01_w,
	vl_desconto_c01_w,
	vl_desconto_rateio_c01_w,
	vl_custo_medio_w,	
	cd_local_estoque_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	open c02;
	loop
	fetch c02 into	
		nr_movimento_estoque_w,
		qt_estoque_movto_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		delete	FROM movimento_estoque_valor
		where	nr_movimento_estoque = nr_movimento_estoque_w;
		
		vl_despesa_acessoria_w	:= vl_despesa_acessoria_c01_w;
		vl_seguro_w		:= vl_seguro_c01_w;
		vl_total_item_nf_w	:= vl_total_item_nf_c01_w;
		vl_frete_w		:= vl_frete_c01_w;
		vl_desconto_w 		:= vl_desconto_c01_w;
		vl_desconto_rateio_w 	:= vl_desconto_rateio_c01_w;
		
		if (qt_estoque_movto_w <> qt_estoque_w) then
			begin
			vl_despesa_acessoria_w	:= dividir(vl_despesa_acessoria_w * qt_estoque_movto_w, qt_estoque_w);
			vl_seguro_w		:= dividir(vl_seguro_w * qt_estoque_movto_w, qt_estoque_w);
			vl_total_item_nf_w	:= dividir(vl_total_item_nf_w * qt_estoque_movto_w, qt_estoque_w);
			vl_frete_w		:= dividir(vl_frete_w * qt_estoque_movto_w, qt_estoque_w);
			vl_desconto_w 		:= dividir(vl_desconto_w * qt_estoque_movto_w, qt_estoque_w);
			vl_desconto_rateio_w 	:= dividir(vl_desconto_rateio_w * qt_estoque_movto_w, qt_estoque_w);
			end;
		end if;
		
		open c04;
		loop
		fetch c04 into
			cd_tipo_valor_w,
			ie_aumenta_diminui_valor_w,
			vl_despesa_acessoria_ww,
			vl_seguro_ww,
			vl_total_item_nf_ww,
			vl_frete_ww,
			vl_desconto_ww,
			vl_desconto_rateio_ww,
			vl_custo_medio_ww;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			begin
						
			vl_despesa_acessoria_ww	:=	dividir(vl_despesa_acessoria_ww * vl_total_item_nf_w, vl_total_nf_w);
			vl_seguro_ww		:=	dividir(vl_seguro_ww * vl_total_item_nf_w, vl_total_nf_w);
			vl_total_item_nf_ww	:=	dividir(vl_total_item_nf_ww * vl_total_item_nf_w, vl_total_nf_w);
			vl_frete_ww		:=	dividir(vl_frete_ww * vl_total_item_nf_w, vl_total_nf_w);
			vl_desconto_ww 		:=	dividir(vl_desconto_ww * vl_total_item_nf_w, vl_total_nf_w);
			vl_desconto_rateio_ww 	:= 	dividir(vl_desconto_rateio_ww * vl_total_item_nf_w, vl_total_nf_w);
			vl_custo_medio_ww	:=	dividir(vl_custo_medio_ww * vl_total_item_nf_w, vl_total_nf_w);

			vl_despesa_acessoria_w	:=	vl_despesa_acessoria_w + vl_despesa_acessoria_ww;
			vl_seguro_w		:=	vl_seguro_w + vl_seguro_ww;
			vl_frete_w		:= 	vl_frete_w + vl_frete_ww;
			vl_desconto_w		:=	vl_desconto_w + vl_desconto_ww;
			vl_desconto_rateio_w	:=	vl_desconto_rateio_w + vl_desconto_rateio_ww;
			
			if (ie_aumenta_diminui_valor_w = 'A') then
				vl_custo_medio_w	:=	vl_custo_medio_w + vl_custo_medio_ww;
			elsif (ie_aumenta_diminui_valor_w = 'D') then
				vl_custo_medio_w	:=	vl_custo_medio_w - vl_custo_medio_ww;
			end if;			
			
			if (vl_total_item_nf_ww <> 0) then
				begin
				update	movimento_estoque_valor
				set	vl_movimento = vl_movimento + vl_total_item_nf_ww
				where	nr_movimento_estoque = nr_movimento_estoque_w
				and	cd_tipo_valor = cd_tipo_valor_w;
				if (NOT FOUND) then
					insert into movimento_estoque_valor(
						nr_movimento_estoque,
						cd_tipo_valor,        
						vl_movimento,        
						dt_atualizacao,        
						nm_usuario)	
					values (	nr_movimento_estoque_w,
						cd_tipo_valor_w,         
						vl_total_item_nf_ww,	           
						dt_atualizacao_w,         
						nm_usuario_p);
				end if;
				end;
			end if;
			
			end;
		end loop;
		close C04;
		
		
		if  vl_total_item_nf_w <> 0 then
			insert into movimento_estoque_valor(
				nr_movimento_estoque,
				cd_tipo_valor,        
				vl_movimento,        
				dt_atualizacao,        
				nm_usuario)	
			values (	nr_movimento_estoque_w,
				1,         
				vl_total_item_nf_w,	           
				dt_atualizacao_w,         
				nm_usuario_p);
		end if;
		
		if  vl_frete_w <> 0 then
			insert into movimento_estoque_valor(
				nr_movimento_estoque,
				cd_tipo_valor,        
				vl_movimento,        
				dt_atualizacao,        
				nm_usuario)	
			values (	nr_movimento_estoque_w,
				2,          
				vl_frete_w,	           
				dt_atualizacao_w,         
				nm_usuario_p);
		end if;
		
		if  vl_seguro_w <> 0 then
			insert into movimento_estoque_valor(
				nr_movimento_estoque,
				cd_tipo_valor,        
				vl_movimento,        
				dt_atualizacao,        
				nm_usuario)	
			values (	nr_movimento_estoque_w,
				3,          
				vl_seguro_w,	           
				dt_atualizacao_w,         
				nm_usuario_p);
		end if;
		
		if  vl_despesa_acessoria_w <> 0 then
			insert into movimento_estoque_valor(
				nr_movimento_estoque,            
				cd_tipo_valor,        
				vl_movimento,        
				dt_atualizacao,        
				nm_usuario)	
			values (	nr_movimento_estoque_w,
				4, 		             
				vl_despesa_acessoria_w,	           
				dt_atualizacao_w,         
				nm_usuario_p);
		end if;
		
		if (vl_desconto_w + vl_desconto_rateio_w <> 0) then
			insert into movimento_estoque_valor(
				nr_movimento_estoque,
				cd_tipo_valor,        
				vl_movimento,        
				dt_atualizacao,        
				nm_usuario)	
			values (	nr_movimento_estoque_w,
				5,          
				vl_desconto_w + vl_desconto_rateio_w,	           
				dt_atualizacao_w,         
				nm_usuario_p);
		end if;
		
		open c03;
		loop
		fetch c03
		into	cd_tributo_w,
			vl_tributo_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			if (qt_estoque_movto_w <> qt_estoque_w) then
				vl_tributo_w	:= dividir(vl_tributo_w * qt_estoque_movto_w, qt_estoque_w);
			end if;
			
			begin
			select	cd_tipo_valor
			into STRICT	cd_tipo_valor_w
			from	tipo_valor
			where	cd_tributo = cd_tributo_w;
			exception
				when others then
					cd_tipo_valor_w := 0;
			end;
			select	count(*)
			into STRICT	qt_movto_valor_w
			from	movimento_estoque_valor
			where	nr_movimento_estoque = nr_movimento_estoque_w
			and	cd_tipo_valor = CASE WHEN cd_tipo_valor_w=0 THEN 6  ELSE cd_tipo_valor_w END;

			if (vl_tributo_w <> 0) and (qt_movto_valor_w = 0) then
				insert into movimento_estoque_valor(
					nr_movimento_estoque,
					cd_tipo_valor,
					vl_movimento,
					dt_atualizacao,
					nm_usuario)
				values (	nr_movimento_estoque_w,
					CASE WHEN cd_tipo_valor_w=0 THEN 6  ELSE cd_tipo_valor_w END ,
					vl_tributo_w,
					dt_atualizacao_w,
					nm_usuario_p);
			end if;
			end;
		end loop;
		close c03;		
		end;
	end loop;
	close c02;
	
	if (ie_tipo_nota_w = 'E') then
		begin	
		update saldo_estoque
		set vl_preco_ult_compra = ((vl_total_item_nf_w - vl_desconto_w) / qt_estoque_w),
			dt_ult_compra	= dt_movimento_estoque_w
		where cd_material = cd_material_estoque_w
		and cd_estabelecimento = cd_estabelecimento_w
		and cd_local_estoque = cd_local_estoque_w
		and dt_mesano_referencia = dt_mesano_referencia_w;
		exception
			when others then
				cd_material_estoque_w := 0;
		end;		
	end if;

	begin
	delete	FROM custo_mensal_material
	where	cd_estabelecimento	= cd_estabelecimento_w
	and	dt_referencia	= dt_mesano_referencia_w
	and	cd_material	= cd_material_estoque_w
	and	ie_tipo_custo	= 'R';
	
	insert into custo_mensal_material(
		cd_estabelecimento,
		dt_referencia, 
		cd_material, 
		ie_tipo_custo, 
		dt_atualizacao, 
		nm_usuario, 
		vl_custo)
	values (cd_estabelecimento_w, 
		dt_mesano_referencia_w, 
		cd_material_estoque_w, 
		'R', 
		clock_timestamp(), 
		nm_usuario_w, 
		vl_custo_medio_w);
	exception
		when others then
			cd_material_estoque_w := 0;
	end;
	
	if (ie_valorizar_material_w = 'S') then
		CALL val_mensal_estoque.val_est_prod_mat(dt_mesano_referencia_w,cd_estabelecimento_w,cd_material_estoque_w,nm_usuario_w);
	end if;	
     	end;
end loop;
close c01;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_movto_estoque_nf ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

