-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_contabiliza_baixa_pro_rata ( nr_lote_contabil_p bigint, ie_tipo_lote_pls_p text, vl_antecipacao_p bigint, dt_movimento_p timestamp, vl_movimento_p bigint, nr_titulo_p bigint, dt_contabil_p timestamp, cd_conta_rec_pls_p text, cd_conta_deb_pls_p text, cd_historico_pls_p bigint, nr_seq_trans_fin_p bigint, cd_pessoa_fisica_p text, cd_cgc_p text, nm_usuario_p text, dt_referencia_pls_mens_p timestamp, ie_compl_hist_p text, ds_conteudo_p text, cd_tipo_lote_contabil_p bigint, nr_seq_baixa_p bigint, nr_seq_liq_cc_p bigint, nr_seq_w_movimento_p INOUT bigint) AS $body$
DECLARE


/*
IE_TIPO_LOTE_P
'B' - Lote da baixa
'P' - Lote pro-rata
'A' - Lote antecipacao*/
ds_compl_historico_w		varchar(2000);
ds_erro_w			varchar(500);
cd_conta_contab_w		varchar(20);
cd_conta_pro_rata_w		varchar(20);
cd_conta_antecip_w		varchar(20);
ie_deb_cred_w			varchar(1);
ie_gerar_w			varchar(1);
vl_movimento_w			double precision;
vl_pro_rata_w			double precision;
cd_historico_pls_w		bigint;
cd_historico_antecip_w		bigint;
cd_historico_pro_rata_w		bigint;
nr_seq_mensalidade_w		bigint;
nr_sequencia_w			bigint;
nr_seq_conta_pls_w		bigint;

C01 CURSOR FOR /* Valores pro-rata */
	SELECT	a.cd_conta_deb_pls,
		a.cd_historico_pls
	from	titulo_rec_liq_cc a
	where	a.nr_titulo	= nr_titulo_p
	and	a.nr_seq_baixa	= nr_seq_baixa_p
	and	(a.vl_pro_rata IS NOT NULL AND a.vl_pro_rata::text <> '')
	and	a.cd_conta_deb_pls	= cd_conta_deb_pls_p
	group by
		a.cd_conta_deb_pls,
		a.cd_historico_pls;


BEGIN

nr_sequencia_w	:= nr_seq_w_movimento_p;

if (nr_lote_contabil_p IS NOT NULL AND nr_lote_contabil_p::text <> '') and
	((cd_conta_rec_pls_p IS NOT NULL AND cd_conta_rec_pls_p::text <> '') or (cd_conta_deb_pls_p IS NOT NULL AND cd_conta_deb_pls_p::text <> '')) then
	ie_gerar_w		:= 'S';
	cd_historico_pls_w	:= cd_historico_pls_p;
	vl_movimento_w		:= vl_movimento_p;

	if (ie_tipo_lote_pls_p = 'B') then /* Se for antecipacao total  deve gerar tudo como antecipacao */
		if (dt_movimento_p < dt_referencia_pls_mens_p) then
			if (coalesce(vl_antecipacao_p::text, '') = '') then
				if (nr_seq_liq_cc_p IS NOT NULL AND nr_seq_liq_cc_p::text <> '') then
					select	cd_conta_antec_pls,
						coalesce(cd_historico_rev_antec,cd_historico_antec_pls)
					into STRICT	cd_conta_antecip_w,
						cd_historico_antecip_w
					from	titulo_rec_liq_cc
					where	nr_titulo	= nr_titulo_p
					and	nr_sequencia	= nr_seq_liq_cc_p;
				end if;

				if (coalesce(cd_conta_antecip_w::text, '') = '') and (coalesce(cd_historico_antecip_w::text, '') = '') then

					select	max(a.cd_conta_rec_pls),
						max(a.cd_historico_pls)
					into STRICT	cd_conta_antecip_w,
						cd_historico_antecip_w
					from	titulo_rec_liq_cc a
					where	nr_titulo	= nr_titulo_p
					and	nr_seq_baixa	= nr_seq_baixa_p
					and	(a.vl_antecipacao_mens IS NOT NULL AND a.vl_antecipacao_mens::text <> '');
				end if;
			else
				cd_conta_antecip_w	:= cd_conta_rec_pls_p;
				cd_historico_antecip_w	:= cd_historico_pls_p;
			end if;

			if (cd_conta_antecip_w IS NOT NULL AND cd_conta_antecip_w::text <> '') and (cd_historico_antecip_w IS NOT NULL AND cd_historico_antecip_w::text <> '') then
				cd_conta_contab_w	:= cd_conta_antecip_w;
				cd_historico_pls_w	:= cd_historico_antecip_w;
				ie_deb_cred_w		:= 'C';
			else
				ie_gerar_w	:= 'N';
			end if;
		else
			if (vl_antecipacao_p IS NOT NULL AND vl_antecipacao_p::text <> '') then
				cd_conta_contab_w	:= cd_conta_rec_pls_p;
				ie_deb_cred_w		:= 'C';
			else
				cd_conta_contab_w	:= cd_conta_deb_pls_p;
				ie_deb_cred_w		:= 'C';
			end if;
		end if;
	elsif (ie_tipo_lote_pls_p = 'P') then /* Se for lote de pro-rata, gerar somente se  a baixa for anterior a referencia da mensalidade e descontar o valor de antecipacao */
		if (dt_movimento_p < dt_referencia_pls_mens_p) then
			select	max(vl_pro_rata),
				max(nr_seq_conta_pls)
			into STRICT	vl_pro_rata_w,
				nr_seq_conta_pls_w
			from	titulo_rec_liq_cc a
			where	a.nr_sequencia	= nr_seq_liq_cc_p;

			if (coalesce(vl_pro_rata_w::text, '') = '') and (coalesce(nr_seq_conta_pls_w::text, '') = '') then
				ie_gerar_w	:= 'N';
			else
				/*if	(vl_pro_rata_w <> 0) then
					vl_movimento_w	:= vl_pro_rata_w * sign(vl_movimento_w);
				end if;*/
				vl_movimento_w	:= vl_pro_rata_w;

				/* Gerar primeiro o débito na conta de antecipação */

				select	max(a.cd_conta_rec_pls),
					max(a.cd_historico_pls)
				into STRICT	cd_conta_antecip_w,
					cd_historico_antecip_w
				from	titulo_rec_liq_cc a
				where	nr_titulo	= nr_titulo_p
				and	nr_seq_baixa	= nr_seq_baixa_p
				and ((a.vl_antecipacao_mens IS NOT NULL AND a.vl_antecipacao_mens::text <> '') or (a.nr_seq_conta_pls IS NOT NULL AND a.nr_seq_conta_pls::text <> ''));

				if (cd_conta_antecip_w IS NOT NULL AND cd_conta_antecip_w::text <> '') and (cd_historico_antecip_w IS NOT NULL AND cd_historico_antecip_w::text <> '') then

					cd_conta_contab_w	:= cd_conta_antecip_w;
					cd_historico_pls_w	:= cd_historico_antecip_w;
					ie_deb_cred_w		:= 'D';
				else
					/* Procurar na mensalidade - Casos onde não há valor de antecipação */

					select	max(nr_seq_mensalidade)
					into STRICT	nr_seq_mensalidade_w
					from	titulo_receber
					where	nr_titulo	 = nr_titulo_p;

					if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then
						select	max(cd_conta_antec_baixa),
							coalesce(max(cd_historico_rev_antec_baixa),max(cd_historico_antec_baixa))
						into STRICT	cd_conta_antecip_w,
							cd_historico_antecip_w
						from	pls_mensalidade_seg_item b,
							pls_mensalidade_segurado a
						where	a.nr_sequencia	= b.nr_seq_mensalidade_seg
						and	a.nr_seq_mensalidade = nr_seq_mensalidade_w;
					end if;

					if (coalesce(cd_conta_antecip_w::text, '') = '') and (coalesce(cd_historico_antecip_w::text, '') = '') then
						ie_gerar_w	:= 'N';
					else
						cd_conta_contab_w	:= cd_conta_antecip_w;
						cd_historico_pls_w	:= cd_historico_antecip_w;
						ie_deb_cred_w		:= 'D';
					end if;
				end if;

				if (ie_gerar_w = 'S') then
					if (ie_compl_hist_p = 'S') then
						select	substr(obter_compl_historico(cd_tipo_lote_contabil_p, cd_Historico_pls_w, ds_conteudo_p),1,255)
						into STRICT	ds_compl_historico_w
						;
					end if;

					nr_sequencia_w	:= nr_sequencia_w + 1;


					begin
					insert 	into w_movimento_contabil(
						nr_lote_contabil, nr_sequencia, cd_conta_contabil,
						ie_debito_credito, cd_historico, dt_movimento,
						vl_movimento, ds_doc_agrupamento, nr_seq_agrupamento,
						cd_centro_custo, ds_compl_historico, nr_seq_trans_fin,
						nr_documento, cd_pessoa_fisica, cd_cgc)
					values (
						nr_lote_contabil_p, nr_sequencia_w, cd_conta_contab_w,
						ie_deb_cred_w, cd_historico_pls_w, dt_contabil_p,
						vl_movimento_w,  null, null,
						null, ds_compl_historico_w, nr_seq_trans_fin_p,
						null, cd_pessoa_fisica_p, cd_cgc_p);
					exception
					when others then
						ds_erro_w	:= sqlerrm(SQLSTATE);

						/* Erro ao inserir movimento contábil
						cta=#@CD_CONTA_CONTABIL#@ titulo=#@NR_TITULO#@ seq=#@NR_SEQUENCIA#@ trans= #@NR_SEQ_TRANS_FIN#@ val=#@VL_MOVIMENTO#@
						#@DS_ERRO#@ */
						CALL wheb_mensagem_pck.exibir_mensagem_abort(267037, 'CD_CONTA_CONTABIL=' || cd_conta_contab_w ||
												';NR_TITULO=' || nr_titulo_p ||
												';NR_SEQUENCIA=' || nr_sequencia_w ||
												';NR_SEQ_TRANS_FIN=' || nr_seq_trans_fin_p ||
												';VL_MOVIMENTO=' || vl_movimento_p ||
												';DS_ERRO=' || ds_erro_w);
					end;
				end if;
				/*Fim  gerar primeiro o débito na conta de antecipação */

				cd_conta_contab_w	:= cd_conta_deb_pls_p;
				ie_deb_cred_w		:= 'C';
			end if;
		else
			ie_gerar_w	:= 'N';
		end if;
	elsif (ie_tipo_lote_pls_p	= 'A') then
		select	max(vl_pro_rata)
		into STRICT	vl_pro_rata_w
		from	titulo_rec_liq_cc a
		where	a.nr_sequencia	= nr_seq_liq_cc_p;

		if (vl_antecipacao_p IS NOT NULL AND vl_antecipacao_p::text <> '') then
			/* Tive que tirar essa parte pois no estorno o valor da antecipação na classificação já é negativo
			vl_movimento_w	:= vl_antecipacao_p * sign(vl_movimento_w);
			*/
			vl_movimento_w	:= vl_antecipacao_p;
			/* Gerar primeiro o crédito da conta pró-rata  ou  mensalidade */

			open c01;
			loop
			fetch c01 into
				cd_conta_pro_rata_w,
				cd_historico_pro_rata_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin
				if (cd_conta_pro_rata_w IS NOT NULL AND cd_conta_pro_rata_w::text <> '') and (cd_historico_pro_rata_w IS NOT NULL AND cd_historico_pro_rata_w::text <> '') then
					cd_conta_contab_w	:= cd_conta_pro_rata_w;
					cd_historico_pls_w	:= cd_historico_pro_rata_w;
					ie_deb_cred_w		:= 'C';
				else
					ie_gerar_w	:= 'N';
				end if;

				if (ie_gerar_w = 'S') then
					if (ie_compl_hist_p = 'S') then
						select	substr(obter_compl_historico(cd_tipo_lote_contabil_p, cd_historico_pls_w, ds_conteudo_p),1,255)
						into STRICT	ds_compl_historico_w
						;
					end if;

					nr_sequencia_w	:= nr_sequencia_w + 1;

					begin
					insert 	into w_movimento_contabil(
						nr_lote_contabil, nr_sequencia, cd_conta_contabil,
						ie_debito_credito, cd_historico, dt_movimento,
						vl_movimento, ds_doc_agrupamento, nr_seq_agrupamento,
						cd_centro_custo, ds_compl_historico, nr_seq_trans_fin,
						nr_documento, cd_pessoa_fisica, cd_cgc)
					values (
						nr_lote_contabil_p, nr_sequencia_w, cd_conta_contab_w,
						ie_deb_cred_w, cd_historico_pls_w, dt_contabil_p,
						vl_movimento_w,  null, null,
						null, ds_compl_historico_w, nr_seq_trans_fin_p,
						null, cd_pessoa_fisica_p, cd_cgc_p);
					exception
					when others then
						ds_erro_w	:= sqlerrm(SQLSTATE);

						/* Erro ao inserir movimento contábil
						cta=#@CD_CONTA_CONTABIL#@ titulo=#@NR_TITULO#@ seq=#@NR_SEQUENCIA#@ trans= #@NR_SEQ_TRANS_FIN#@ val=#@VL_MOVIMENTO#@
						#@DS_ERRO#@ */
						CALL wheb_mensagem_pck.exibir_mensagem_abort(267037, 'CD_CONTA_CONTABIL=' || cd_conta_contab_w ||
												';NR_TITULO=' || nr_titulo_p ||
												';NR_SEQUENCIA=' || nr_sequencia_w ||
												';NR_SEQ_TRANS_FIN=' || nr_seq_trans_fin_p ||
												';VL_MOVIMENTO=' || vl_movimento_p ||
												';DS_ERRO=' || ds_erro_w);
					end;
				end if;
				end;
			end loop;
			close c01;
			/* Fim  Gerar primeiro o crédito da conta pró-rata */

			cd_conta_contab_w	:= cd_conta_rec_pls_p;
			ie_deb_cred_w		:= 'D';
		else
			ie_gerar_w	:= 'N';
		end if;
	else
		ie_gerar_w	:= 'N';
	end if;

	/* Gerar movimento contábil */

	if (ie_compl_hist_p = 'S') then
		select	substr(obter_compl_historico(cd_tipo_lote_contabil_p, cd_Historico_pls_w, ds_conteudo_p),1,255)
		into STRICT	ds_compl_historico_w
		;
	end if;

	if (ie_gerar_w	= 'S') then
		nr_sequencia_w	:= nr_sequencia_w + 1;

		begin
		insert 	into w_movimento_contabil(
			nr_lote_contabil, nr_sequencia, cd_conta_contabil,
			ie_debito_credito, cd_historico, dt_movimento,
			vl_movimento, ds_doc_agrupamento, nr_seq_agrupamento,
			cd_centro_custo, ds_compl_historico, nr_seq_trans_fin,
			nr_documento, cd_pessoa_fisica, cd_cgc)
		values (
			nr_lote_contabil_p, nr_sequencia_w, cd_conta_contab_w,
			ie_deb_cred_w, cd_historico_pls_w, dt_contabil_p,
			vl_movimento_w,  null, null,
			null, ds_compl_historico_w, nr_seq_trans_fin_p,
			null, cd_pessoa_fisica_p, cd_cgc_p);
		exception
		when others then
			ds_erro_w	:= sqlerrm(SQLSTATE);

			/* Erro ao inserir movimento contábil
			cta=#@CD_CONTA_CONTABIL#@ titulo=#@NR_TITULO#@ seq=#@NR_SEQUENCIA#@ trans= #@NR_SEQ_TRANS_FIN#@ val=#@VL_MOVIMENTO#@
			#@DS_ERRO#@ */
			CALL wheb_mensagem_pck.exibir_mensagem_abort(267037, 'CD_CONTA_CONTABIL=' || cd_conta_contab_w ||
									';NR_TITULO=' || nr_titulo_p ||
									';NR_SEQUENCIA=' || nr_sequencia_w ||
									';NR_SEQ_TRANS_FIN=' || nr_seq_trans_fin_p ||
									';VL_MOVIMENTO=' || vl_movimento_p ||
									';DS_ERRO=' || ds_erro_w);
		end;
	end if;
end if;

nr_seq_w_movimento_p	:= nr_sequencia_w;

/* Nao pode commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contabiliza_baixa_pro_rata ( nr_lote_contabil_p bigint, ie_tipo_lote_pls_p text, vl_antecipacao_p bigint, dt_movimento_p timestamp, vl_movimento_p bigint, nr_titulo_p bigint, dt_contabil_p timestamp, cd_conta_rec_pls_p text, cd_conta_deb_pls_p text, cd_historico_pls_p bigint, nr_seq_trans_fin_p bigint, cd_pessoa_fisica_p text, cd_cgc_p text, nm_usuario_p text, dt_referencia_pls_mens_p timestamp, ie_compl_hist_p text, ds_conteudo_p text, cd_tipo_lote_contabil_p bigint, nr_seq_baixa_p bigint, nr_seq_liq_cc_p bigint, nr_seq_w_movimento_p INOUT bigint) FROM PUBLIC;

