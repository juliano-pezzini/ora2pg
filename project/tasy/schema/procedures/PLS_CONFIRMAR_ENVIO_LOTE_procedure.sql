-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_confirmar_envio_lote ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

				
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Rotina utilizada para confirmar o envio do lote pelo prestador, ao confirmar o envio o protocolo
passa para integrado, depois e verificado o parametro para geracao de analise, se estiver marcado
e gerada a analise do lote confirmado.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ x] Tasy (Delphi/Java) [  x] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nm_prestador_w			varchar(255);
ds_hash_w			varchar(255);
nr_protocolo_prestador_w	varchar(20);
nm_usuario_w			varchar(20);
ie_origem_protocolo_w		varchar(10);
ie_analise_conta_w		varchar(10);
ie_tipo_guia_w			varchar(10);
ie_tipo_importacao_w		varchar(2);
vl_parametro_w			varchar(1)	:= 'N';
ie_gravar_quantidade_w		varchar(1)	:= 'N';
vl_apresentado_w		double precision;
nr_seq_protocolo_w		bigint;
nr_seq_transacao_w		pls_protocolo_conta.nr_seq_transacao%type;
nr_seq_prestador_imp_w		bigint;
nr_seq_regra_periodo_w		bigint;
nr_seq_periodo_w		bigint;
qt_contas_protocolo_w		bigint	:= null;
qt_protocolo_rejeitado_w	bigint;
dt_mes_competencia_w		timestamp;
dt_protocolo_w			timestamp;
dt_aceite_w			timestamp;
qt_registros_w			bigint;
nr_seq_conta_w			bigint;
qt_prestador_lib_w		bigint;
qt_regra_lib_analise_w		bigint;
nr_seq_tipo_prestador_w		pls_tipo_prestador.nr_sequencia%type;
nr_seq_prestador_w		pls_protocolo_conta.nr_seq_prestador%type;
cd_cgc_prestador_imp_w		pls_protocolo_conta.cd_cgc_prestador_imp%type;
nr_seq_prestador_imp_aux_w	pls_protocolo_conta.nr_seq_prestador%type;
nr_seq_param_analise_w		pls_param_importacao_conta.nr_sequencia%type;
ie_competencia_w		varchar(1);
ie_agrupamento_lote_w		pls_parametros.ie_agrupamento_lote%type;
nr_seq_lote_w			pls_lote_protocolo_conta.nr_sequencia%type;
nr_seq_lote_old_w		pls_lote_protocolo_conta.nr_sequencia%type;
tb_nr_seq_lote_w		pls_util_cta_pck.t_number_table;
i				integer := 0;
ds_historico_w			pls_prot_conta_hist.ds_historico%type;
ie_agrupar_xml_web_w	pls_param_importacao_conta.ie_agrupar_xml_web%type;
nr_seq_prest_old_w		pls_lote_protocolo_conta.nr_seq_prestador%type;
nr_seq_prest_web_old_w	pls_lote_protocolo_conta.nr_seq_prestador_web%type;
dt_confirmacao_w		pls_lote_protocolo_conta.dt_confirmacao%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_prestador
	from	pls_protocolo_conta
	where	nr_seq_lote_conta	= nr_seq_lote_p
	and	ie_situacao		= 'A';

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conta
	where	nr_seq_protocolo = nr_seq_protocolo_w;
	
C03 CURSOR FOR  --Cursor para realziar a verificacao do parametro de geracao de analise
	SELECT	nr_seq_prestador,
		nr_sequencia
	from	pls_protocolo_conta
	where	nr_seq_lote_conta	= nr_seq_lote_p;
	
BEGIN
select	count(1)
into STRICT	qt_protocolo_rejeitado_w
from	pls_protocolo_conta
where	ie_situacao		= 'RE'
and	nr_seq_lote_conta	= nr_seq_lote_p  LIMIT 1;

if (qt_protocolo_rejeitado_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(203913);
end if;

select	coalesce(max(ie_analise_conta), 'N'),
		max(nr_sequencia),
		coalesce(max(ie_agrupar_xml_web),'N')
into STRICT	ie_analise_conta_w,
		nr_seq_param_analise_w,
		ie_agrupar_xml_web_w
from	pls_param_importacao_conta
where	cd_estabelecimento	= cd_estabelecimento_p;	

if (ie_analise_conta_w = 'S') then
	select	count(1)
	into STRICT	qt_regra_lib_analise_w
	from	pls_regra_analise_imp_cta
	where	nr_seq_param_imp_conta	= nr_seq_param_analise_w
	and	trunc(clock_timestamp()) between trunc(dt_inicio_vigencia) and fim_dia(coalesce(dt_fim_vigencia,clock_timestamp()));
end if;
	
open C01;
loop
fetch C01 into	
	nr_seq_protocolo_w,
	nr_seq_prestador_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	/* Obter dados do protocolo */

	select	pls_obter_prestador_imp(cd_cgc_prestador_imp, nr_cpf_prestador_imp, nr_seq_prestador_imp, '', '', '', 'C', null, dt_protocolo) nr_seq_prestador,
		dt_mes_competencia,
		nr_protocolo_prestador,
		--nvl(pls_obter_valor_protocolo(nr_sequencia,'TC'),0),
		nr_seq_transacao,
		ds_hash,
		ie_tipo_guia,
		ie_origem_protocolo,
		dt_protocolo,
		nm_usuario,
		cd_cgc_prestador_imp
	into STRICT	nr_seq_prestador_imp_w,
		dt_mes_competencia_w,
		nr_protocolo_prestador_w,
		--vl_apresentado_w,
		nr_seq_transacao_w,
		ds_hash_w,
		ie_tipo_guia_w,
		ie_origem_protocolo_w,
		dt_protocolo_w,
		nm_usuario_w,
		cd_cgc_prestador_imp_w
	from	pls_protocolo_conta
	where	nr_sequencia	= nr_seq_protocolo_w;
	
	if (cd_cgc_prestador_imp_w IS NOT NULL AND cd_cgc_prestador_imp_w::text <> '') then
		nr_seq_prestador_imp_aux_w	:= pls_obter_prestador_cgc(	cd_cgc_prestador_imp_w,null, cd_estabelecimento_p);
		
		if (nr_seq_prestador_imp_aux_w IS NOT NULL AND nr_seq_prestador_imp_aux_w::text <> '') then
			nr_seq_prestador_imp_w	:= nr_seq_prestador_imp_aux_w;
		end if;
	end if;

	begin
		select	coalesce(max(a.dt_aceite), clock_timestamp())
		into STRICT	dt_aceite_w
		from	ptu_fatura	a
		where	a.nr_seq_protocolo	= nr_seq_protocolo_w;
	exception
	when others then
		dt_aceite_w	:= clock_timestamp();
	end;
	
	/* Sestari - Validacoes do protocolo vao ser feitas na pls_obter_se_xml_valido  */

	nm_prestador_w	:= substr(pls_obter_dados_prestador(nr_seq_prestador_imp_w, 'N'), 1, 255);

	-- Gilberto - OS 951797 - Independente se veio de WebService ou nao, a dt_recebimento e competencia e atualizado com a data atual

	-- A data de competencia pode ser recalculada mais a frente, conforme regras ja existentes.
	update	pls_protocolo_conta
	set	dt_recebimento 		= clock_timestamp(),
		dt_mes_competencia	= clock_timestamp()	
	where	nr_sequencia		= nr_seq_protocolo_w;
	
	dt_mes_competencia_w := clock_timestamp();
	
	/* Felipe - 10/04/2008 - OS 87447 - Fiz o tratamento conforme solicitacao da OS e alterei o UPDATE do campo DT_MES_COMPETENCIA  de sysdate para a variavel do tratamento*/

	dt_mes_competencia_w	:= pls_obter_dataref_prot_imp(nr_seq_prestador_imp_w, ie_origem_protocolo_w, dt_mes_competencia_w,
						              dt_protocolo_w, clock_timestamp(), dt_aceite_w, 
							      ie_tipo_guia_w, nr_seq_protocolo_w,cd_estabelecimento_p);

	/*Leitura do parametro [10] OPSW - Contas medicas - Ao confirmar a integracao do protocolo, gravar a quantidade de contas no mesmo*/

	ie_gravar_quantidade_w	:= pls_obter_param_padrao_funcao(10, 1249);
	
	if (ie_gravar_quantidade_w = 'S') then
		select 	count(1)
		into STRICT	qt_contas_protocolo_w
		from 	pls_conta
		where	nr_seq_protocolo	= nr_seq_protocolo_w;
	end if;

	SELECT * FROM pls_obter_periodo_pgto(nr_seq_prestador_imp_w, dt_mes_competencia_w, ie_tipo_guia_w, nr_seq_regra_periodo_w, nr_seq_periodo_w) INTO STRICT nr_seq_regra_periodo_w, nr_seq_periodo_w;
	
	ie_competencia_w	:= pls_obter_se_comp_fechada(dt_mes_competencia_w);
		
	if (ie_competencia_w	= 'S') then
		begin
		CALL wheb_mensagem_pck.exibir_mensagem_abort(495129);
		end;
	end if;
		
	update	pls_protocolo_conta
	set	ie_situacao		= 'T',
		dt_integracao		= clock_timestamp(),
		nm_usuario_integracao	= nm_usuario_p,
		dt_mes_competencia	= dt_mes_competencia_w,
		nr_seq_prestador	= nr_seq_prestador_imp_w,
		cd_condicao_pagamento	= pls_obter_dados_prestador(nr_seq_prestador_imp_w,'CP'),
		dt_base_venc		= clock_timestamp(),
		nr_seq_periodo_pgto	= nr_seq_periodo_w,
		qt_contas_informadas    = coalesce(qt_contas_protocolo_w,0)
	where	nr_sequencia		= nr_seq_protocolo_w
	and	cd_estabelecimento	= cd_estabelecimento_p;	
	
	vl_apresentado_w	:= coalesce(pls_obter_valor_protocolo(nr_seq_protocolo_w, 'TC'), 0);
	
	CALL pls_gerar_comunic_conta(1,	
		'Protocolo: ' || to_char(nr_seq_protocolo_w) || chr(13) ||
		'No do protocolo no prestador: ' || nr_protocolo_prestador_w || chr(13) ||
		'Data integracao: ' || to_char(clock_timestamp(),'dd/mm/yyyy hh24:mi:ss') || chr(13) ||
		'Usuario integracao: ' || nm_usuario_p || chr(13) ||
		'Prestador: ' || to_char(nr_seq_prestador_imp_w) || ' - ' || nm_prestador_w || chr(13) ||
		'Valor apresentado: ' || to_char(vl_apresentado_w) || chr(13) ||
		'Transacao TISS: ' || nr_seq_transacao_w || chr(13) ||
		'Hash: ' || ds_hash_w,
		nm_usuario_p,cd_estabelecimento_p);
	if (ie_analise_conta_w = 'S' ) and (coalesce(qt_regra_lib_analise_w,0) = 0) then
		open C02;
		loop
		fetch C02 into	
			nr_seq_conta_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			CALL pls_cta_consistir_pck.gerar_resumo_conta(null, null, null, nr_seq_conta_w, nm_usuario_p, cd_estabelecimento_p);
			end;
		end loop;
		close C02;
		CALL pls_gerar_valores_protocolo(nr_seq_protocolo_w, nm_usuario_p);
	elsif (ie_analise_conta_w = 'S' ) and (coalesce(qt_regra_lib_analise_w,0) > 0) then
	
		select	max(b.nr_sequencia)
		into STRICT	nr_seq_tipo_prestador_w
		from	pls_tipo_prestador b,
			pls_prestador a
		where	a.nr_seq_tipo_prestador	= b.nr_sequencia
		and	a.nr_sequencia		= nr_seq_prestador_w;
		
		select	count(1)
		into STRICT	qt_prestador_lib_w
		from	pls_regra_analise_imp_cta
		where	nr_seq_param_imp_conta	= nr_seq_param_analise_w
		and	((nr_seq_prestador 	= nr_seq_prestador_w) or (nr_seq_tipo_prestador = nr_seq_tipo_prestador_w))
		and	trunc(clock_timestamp()) between trunc(dt_inicio_vigencia) and fim_dia(coalesce(dt_fim_vigencia,clock_timestamp()));
		
		if (qt_prestador_lib_w > 0) then
			open C02;
			loop
			fetch C02 into	
				nr_seq_conta_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				CALL pls_cta_consistir_pck.gerar_resumo_conta(null, null, null, nr_seq_conta_w, nm_usuario_p, cd_estabelecimento_p);
				end;
			end loop;
			close C02;
			CALL pls_gerar_valores_protocolo(nr_seq_protocolo_w, nm_usuario_p);
		end if;
	end if;
	
	end;
end loop;
close C01;

update	pls_lote_protocolo_conta
set	ie_status		= 'E',
	ds_motivo_cancelamento	= ''
where	nr_sequencia		= nr_seq_lote_p;

select	count(1)
into STRICT	qt_registros_w
from	pls_xml_lote
where	nr_seq_lote = nr_seq_lote_p;

if (qt_registros_w = 0) then
	update	pls_lote_protocolo_conta
	set	dt_confirmacao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_lote_p;
end if;

select	coalesce(max(ie_tipo_importacao), 'UP')
into STRICT	ie_tipo_importacao_w
from	pls_protocolo_conta a
where	a.nr_seq_lote_conta	 = nr_seq_lote_p;

commit;

if (ie_analise_conta_w = 'S' ) and (coalesce(qt_regra_lib_analise_w,0) > 0) then
	qt_prestador_lib_w := 0;

	for r_C03_w in C03 loop
		begin	
		
		select	max(b.nr_sequencia)
		into STRICT	nr_seq_tipo_prestador_w
		from	pls_tipo_prestador b,
			pls_prestador a
		where	a.nr_seq_tipo_prestador	= b.nr_sequencia
		and	a.nr_sequencia		= r_C03_w.nr_seq_prestador;
		
		select	count(1)
		into STRICT	qt_prestador_lib_w
		from	pls_regra_analise_imp_cta
		where	nr_seq_param_imp_conta	= nr_seq_param_analise_w
		and	((nr_seq_prestador 	= r_C03_w.nr_seq_prestador) or (nr_seq_tipo_prestador = nr_seq_tipo_prestador_w))
		and	trunc(clock_timestamp()) between trunc(dt_inicio_vigencia) and fim_dia(coalesce(dt_fim_vigencia,clock_timestamp()));
		
		if (coalesce(qt_prestador_lib_w,0) > 0) then
			exit;
		end if;
		end;
	end loop;
elsif (ie_analise_conta_w = 'S' ) and (coalesce(qt_regra_lib_analise_w,0) = 0) then
	qt_prestador_lib_w := 1;
end if;

/*retirado o tratamento para somente enviar para analise caso for via XML, isto se deve devido a outros clientes enviarem diretamente para analise porem usarem o webservice para envio OS 528654 Diogo*/


/* Tratamento para gerar fluxo de analise, somente se o protocolo foi gerado pelo portal do Plano de Saude e se o parametro 'Aguarda liberacao OPS para inicio do fluxo analise' estiver desmarcado */

if ( ie_analise_conta_w in ('N','P')) or (coalesce( qt_prestador_lib_w ,0) = 0) then
	
	for r_C03_w in C03 loop	
		ie_agrupamento_lote_w := pls_obter_regra_ger_lote_cta(r_C03_w.nr_sequencia, cd_estabelecimento_p);
		
		-- Agrupor protocolos por prestador		
		select nr_seq_prestador,	
			nr_seq_prestador_web,
			dt_confirmacao
		into STRICT	nr_seq_prest_old_w,
			nr_seq_prest_web_old_w,
			dt_confirmacao_w
		from	pls_lote_protocolo_conta
		where	nr_sequencia = nr_seq_lote_p;
		
		
		if (ie_agrupamento_lote_w = 'PP') then
		
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_lote_w
			from	pls_lote_protocolo_conta a,
				pls_protocolo_conta b
			where	a.nr_sequencia = b.nr_seq_lote_conta
			and	a.ie_status = 'U'
			and	b.nr_seq_prestador = r_C03_w.nr_seq_prestador
			and	b.nr_sequencia <> r_C03_w.nr_sequencia;
			
			if (coalesce(nr_seq_lote_w::text, '') = '') then
				insert into pls_lote_protocolo_conta(nr_sequencia,
					dt_atualizacao,
					dt_atualizacao_nrec,
					nm_usuario,
					nm_usuario_nrec,
					dt_lote,
					cd_estabelecimento,
					ie_status,
					nr_seq_prestador,
					nr_seq_prestador_web,
					dt_confirmacao)
				values (nextval('pls_lote_protocolo_conta_seq'),
					clock_timestamp(),
					clock_timestamp(),
					nm_usuario_p,
					nm_usuario_p,
					clock_timestamp(),
					cd_estabelecimento_p,
					'U',
					nr_seq_prest_old_w,
					nr_seq_prest_web_old_w,
					dt_confirmacao_w) returning nr_sequencia into nr_seq_lote_w;
			end if;
			
			update	pls_protocolo_conta
			set	nr_seq_lote_conta	= nr_seq_lote_w,
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
			where	nr_sequencia		= r_C03_w.nr_sequencia;
			
			if (nr_seq_lote_w <> nr_seq_lote_old_w) then
				tb_nr_seq_lote_w(i) := nr_seq_lote_w;
				nr_seq_lote_old_w := nr_seq_lote_w;
				i := i + 1;
			end if;
			
			ds_historico_w := 'Vinculado ao lote ' || nr_seq_lote_w;

			insert into pls_prot_conta_hist(nr_sequencia,
				ds_historico,
				dt_atualizacao,
				dt_atualizacao_nrec,
				dt_historico,
				ie_tipo_historico,
				nm_usuario,
				nm_usuario_historico,
				nm_usuario_nrec,
				nr_seq_protocolo)
			values (nextval('pls_prot_conta_hist_seq'),
				ds_historico_w,
				clock_timestamp(),
				clock_timestamp(),
				clock_timestamp(),
				'17',
				nm_usuario_p,
				nm_usuario_p,
				nm_usuario_p,
				r_C03_w.nr_sequencia);
		elsif (ie_agrupamento_lote_w = 'PL') then
				
			insert into pls_lote_protocolo_conta(nr_sequencia,
				dt_atualizacao,
				dt_atualizacao_nrec,
				nm_usuario,
				nm_usuario_nrec,
				dt_lote,
				cd_estabelecimento,
				ie_status,
				nr_seq_prestador,
				nr_seq_prestador_web,
				dt_confirmacao)
			values (nextval('pls_lote_protocolo_conta_seq'),
				clock_timestamp(),
				clock_timestamp(),
				nm_usuario_p,
				nm_usuario_p,
				clock_timestamp(),
				cd_estabelecimento_p,
				'U',
				nr_seq_prest_old_w,
				nr_seq_prest_web_old_w,
				dt_confirmacao_w) returning nr_sequencia into nr_seq_lote_w;
				
			update	pls_protocolo_conta
			set	nr_seq_lote_conta	= nr_seq_lote_w,
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
			where	nr_sequencia		= r_C03_w.nr_sequencia;
			
			ds_historico_w := 'Vinculado ao lote ' || nr_seq_lote_w;
			
			insert into pls_prot_conta_hist(nr_sequencia,
				ds_historico,
				dt_atualizacao,
				dt_atualizacao_nrec,
				dt_historico,
				ie_tipo_historico,
				nm_usuario,
				nm_usuario_historico,
				nm_usuario_nrec,
				nr_seq_protocolo)
			values (nextval('pls_prot_conta_hist_seq'),
				ds_historico_w,
				clock_timestamp(),
				clock_timestamp(),
				clock_timestamp(),
				'17',
				nm_usuario_p,
				nm_usuario_p,
				nm_usuario_p,
				r_C03_w.nr_sequencia);
				
			tb_nr_seq_lote_w(i) := nr_seq_lote_w;
			i := i + 1;
		end if;
	end loop;
	if (ie_analise_conta_w = 'P') then
		if (tb_nr_seq_lote_w.count > 0) then
			for j in tb_nr_seq_lote_w.first .. tb_nr_seq_lote_w.last loop
				insert   into     pls_cta_lt_ger_lote_compl(nr_sequencia,dt_atualizacao,nm_usuario,
					dt_atualizacao_nrec,nm_usuario_nrec,nr_seq_lote_protocolo,
					dt_solicitacao,ie_status)
				values (  nextval('pls_cta_lt_ger_lote_compl_seq'),clock_timestamp(),nm_usuario_p,
					   clock_timestamp(),nm_usuario_p, tb_nr_seq_lote_w(j),
					   clock_timestamp(),'P' );
			end loop;
		else
			insert   into     pls_cta_lt_ger_lote_compl(nr_sequencia,dt_atualizacao,nm_usuario,
				dt_atualizacao_nrec,nm_usuario_nrec,nr_seq_lote_protocolo,
				dt_solicitacao,ie_status)
			values (  nextval('pls_cta_lt_ger_lote_compl_seq'),clock_timestamp(),nm_usuario_p,
				   clock_timestamp(),nm_usuario_p, nr_seq_lote_p,
				   clock_timestamp(),'P' );
		end if;
		
	else
		--Se for WhebService e parametro especifico para agrupamento estiver marcado, entao nao devera gerar automaticamente as analises
		if not (nm_usuario_p = 'WebService' AND ie_agrupar_xml_web_w = 'S') then

			if (tb_nr_seq_lote_w.count > 0) then
				for j in tb_nr_seq_lote_w.first .. tb_nr_seq_lote_w.last loop
					CALL pls_gerar_analise_lote(tb_nr_seq_lote_w(j), 'N', 'N', cd_estabelecimento_p, nm_usuario_p, null, 'S', ie_tipo_importacao_w);
				end loop;
			else
				CALL pls_gerar_analise_lote(nr_seq_lote_p, 'N', 'N', cd_estabelecimento_p, nm_usuario_p, null, 'S', ie_tipo_importacao_w);
			end if;
		end if;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_confirmar_envio_lote ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

