-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_media_estoque_material ( dt_mesano_referencia_p timestamp, dt_referencia_p timestamp, cd_estabelecimento_p bigint, cd_local_estoque_p bigint, cd_material_p bigint, qt_estoque_p INOUT bigint, vl_estoque_p INOUT bigint, vl_estoque_medio_p INOUT bigint, qt_estoque_medio_p INOUT bigint, qt_consumo_p INOUT bigint, vl_consumo_p INOUT bigint) AS $body$
DECLARE



dt_mes_ref_w					timestamp;
dt_processo_w					timestamp;
dt_processo_anterior_w			timestamp;
cd_operacao_estoque_w			smallint;
qt_consumo_movto_w				double precision;
qt_dias_w					integer	:= 0;
qt_movimento_w				double precision;
qt_estoque_medio_w				double precision;
qt_estoque_w					double precision;
qt_estoque_anterior_w			double precision;
ie_consumo_w					varchar(1);
vl_custo_medio_w				double precision;
qt_saldo_acum_w				double precision;
qt_consumo_w					double precision	:= 0;
i						integer	:= 0;

c01 CURSOR FOR
SELECT	pkg_date_utils.start_of(a.dt_processo,'DD',0) dt_processo,
	a.cd_operacao_estoque,
	b.ie_consumo,
	sum(a.qt_consumo),
	coalesce(sum(CASE WHEN a.cd_acao='1' THEN 	CASE WHEN b.ie_entrada_saida='S' THEN (qt_estoque * -1)  ELSE qt_estoque END   ELSE CASE WHEN b.ie_entrada_saida='S' THEN (qt_estoque * -1)  ELSE qt_estoque END  * -1 END ),0) qt_movimento
from	operacao_estoque b,
	movimento_estoque_v a
where	a.cd_operacao_estoque 	= b.cd_operacao_estoque
and	a.cd_material_estoque	= cd_material_p
and	a.cd_local_estoque		= coalesce(cd_local_estoque_p, a.cd_local_estoque)
and	a.dt_mesano_referencia	= dt_mesano_referencia_p
and	pkg_date_utils.start_of(a.dt_processo,'DD',0)	<= pkg_date_utils.start_of(dt_referencia_p,'DD',0)
and	a.cd_estabelecimento		= cd_estabelecimento_p
and	(a.dt_processo IS NOT NULL AND a.dt_processo::text <> '')
group by
	pkg_date_utils.start_of(a.dt_processo,'DD',0),
	a.cd_operacao_estoque,
	b.ie_consumo
order by 1;


BEGIN

dt_mes_ref_w		:= dt_mesano_referencia_p;

select	sum(qt_estoque)
into STRICT	qt_estoque_w
from	saldo_estoque
where	cd_material		= cd_material_p
and	cd_local_estoque	= coalesce(cd_local_estoque_p, cd_local_estoque)
and	dt_mesano_referencia	= PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p, -1, 0)
and	cd_estabelecimento	= cd_estabelecimento_p;

qt_saldo_acum_w	:= 0;

open c01;
loop
fetch c01 into
	dt_processo_w,
	cd_operacao_estoque_w,
	ie_consumo_w,
	qt_consumo_movto_w,
	qt_movimento_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	/* Dias sem movimento */

	if (dt_processo_w > dt_mes_ref_w) then
		if (qt_saldo_acum_w = 0) then
			while(pkg_date_utils.start_of(dt_mes_ref_w,'DD',0) < pkg_date_utils.start_of(dt_processo_w,'DD', 0)) loop
				qt_saldo_acum_w	:= qt_saldo_acum_w + qt_estoque_w;
				dt_mes_ref_w		:= dt_mes_ref_w + 1;
			end loop;
		end if;
	end if;
	qt_consumo_w			:= qt_consumo_w + qt_consumo_movto_w;
	qt_estoque_w			:= qt_estoque_w + qt_movimento_w;

	/* Se dia diferente acumula saldo */

	if	((dt_processo_w <> dt_processo_anterior_w) or (coalesce(dt_processo_anterior_w::text, '') = '')) then
		qt_saldo_acum_w	:= qt_saldo_acum_w	+ qt_estoque_w;
		i		:= i + 1;
	end if;

	dt_processo_anterior_w	:= dt_processo_w;

	end;
end loop;
close c01;

if	((dt_processo_w <> fim_mes(dt_mes_ref_w)) or (coalesce(dt_processo_w::text, '') = '')) then
	if (coalesce(dt_processo_w::text, '') = '') then
		dt_processo_w	:= dt_mesano_referencia_p;
	end if;

	while(pkg_date_utils.start_of(dt_processo_w,'DD',0) <> pkg_date_utils.start_of(fim_mes(dt_mes_ref_w),'DD',0)) loop
		qt_saldo_acum_w	:= qt_saldo_acum_w + qt_estoque_w;
		dt_processo_w	:= dt_processo_w + 1;
	end loop;
end if;

qt_dias_w	:= (pkg_date_utils.extract_field('DAY', dt_referencia_p,0))::numeric;
if (dt_mesano_referencia_p <> pkg_date_utils.start_of(dt_referencia_p,'MONTH',0)) then
	qt_dias_w	:= (pkg_date_utils.extract_field('DAY',pkg_date_utils.end_of(dt_mesano_referencia_p,'MONTH',0),0))::numeric;
end if;

select	obter_custo_medio_material(cd_estabelecimento_p, dt_mesano_referencia_p, cd_material_p)
into STRICT	vl_custo_medio_w
;

qt_consumo_p		:= qt_consumo_w;
qt_estoque_p		:= qt_estoque_w;
vl_estoque_p		:= round((qt_estoque_w * vl_custo_medio_w)::numeric,2);
qt_estoque_medio_p	:= round((dividir(qt_saldo_acum_w, qt_dias_w))::numeric,4);
vl_estoque_medio_p	:= dividir((qt_saldo_acum_w * vl_custo_medio_w), qt_dias_w);
vl_consumo_p		:= qt_consumo_w * vl_custo_medio_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_media_estoque_material ( dt_mesano_referencia_p timestamp, dt_referencia_p timestamp, cd_estabelecimento_p bigint, cd_local_estoque_p bigint, cd_material_p bigint, qt_estoque_p INOUT bigint, vl_estoque_p INOUT bigint, vl_estoque_medio_p INOUT bigint, qt_estoque_medio_p INOUT bigint, qt_consumo_p INOUT bigint, vl_consumo_p INOUT bigint) FROM PUBLIC;

