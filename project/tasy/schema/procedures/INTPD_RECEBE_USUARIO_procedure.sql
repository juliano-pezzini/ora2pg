-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_usuario ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
ds_id_origin_w			intpd_eventos_sistema.ds_id_origin%type;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_projeto_xml_w	intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_regra_conv_w		conversao_meio_externo.nr_seq_regra%type;
ie_sistema_externo_w	varchar(15);
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
usuario_w				usuario%rowtype;
ie_erro_w				varchar(1) := 'N';
usuario_par_del_w		usuario.nm_usuario%type;
usuario_exists_w		usuario.nm_usuario%type;
qt_registros_w			bigint;
ds_erro_w				varchar(2000);
ds_operacao_w			varchar(255);
nr_cpf_w				pessoa_fisica.nr_cpf%type;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;

c01 CURSOR FOR
	SELECT	*
	from	xmltable('/STRUCTURE/USER' passing xml_p columns
		IE_ACTION				varchar(15)	path 'IE_ACTION',
		NM_USUARIO				varchar(15)	path 'NM_USUARIO',
		NM_USUARIO_ORIG			varchar(15)	path 'NM_USUARIO_ORIG',
		DS_USUARIO				varchar(100)	path 'DS_USUARIO',
		QT_DIA_SENHA			integer		path 'QT_DIA_SENHA',
		CD_SETOR_ATENDIMENTO	integer		path 'CD_SETOR_ATENDIMENTO',
		NR_CPF					varchar(11)	path 'NR_CPF',
		IE_FECHAR_TASYMON		varchar(1)		path 'IE_FECHAR_TASYMON',
		IE_MENSAGEM_REC			varchar(1)		path 'IE_MENSAGEM_REC',
		IE_MENSAGEM_ENVIO		varchar(1)		path 'IE_MENSAGEM_ENVIO',
		IE_SITUACAO				varchar(1)		path 'IE_SITUACAO',
		IE_COMUNIC_INTERNA		varchar(1)		path 'IE_COMUNIC_INTERNA',
		IE_LOCALIZAR_MEDICO		varchar(1)		path 'IE_LOCALIZAR_MEDICO',
		NM_USUARIO_ATUAL		varchar(15)	path 'NM_USUARIO_ATUAL',
		DT_ATUALIZACAO			varchar(20)	path 'DT_ATUALIZACAO',
		CD_ESTABELECIMENTO		smallint		path 'CD_ESTABELECIMENTO'
	);
c01_w	c01%rowtype;		
		
BEGIN

select	id_origin
into STRICT	ds_id_origin_w
from	xmltable('/STRUCTURE' passing xml_p
	columns id_origin	varchar2(10) path 'ID_ORIGIN');

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv,
	coalesce(ds_id_origin,ds_id_origin_w)
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_conv_w,
	ds_id_origin_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w				:=	nr_seq_sistema_w;

reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe			:=	'R';
reg_integracao_w.ie_sistema_externo			:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao				:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml			:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:=	nr_seq_regra_conv_w;

open c01;
loop
fetch c01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin	
	ie_erro_w := 'N';

	if (c01_w.ie_action = 'E') then
		begin
			select	coalesce(max(nm_usuario),0)
			into STRICT	usuario_par_del_w
			from	usuario
			where	nm_usuario = c01_w.nm_usuario;

			delete from usuario where nm_usuario = usuario_par_del_w;
			
			commit;
		exception
		when others then
			ie_erro_w := 'S';
			intpd_gravar_log_recebimento(nr_sequencia_p, wheb_mensagem_pck.get_Texto(1027477), c01_w.nm_usuario);				
		end;
	else
		reg_integracao_w.nm_tabela		:=	'USUARIO';
		reg_integracao_w.nm_elemento		:=	'USER';
		reg_integracao_w.nr_seq_visao		:=	29479;
		
		select	count(nm_usuario)
		into STRICT	usuario_exists_w
		from	usuario
		where	nm_usuario = c01_w.NM_USUARIO;
		
		if (usuario_exists_w > 0) then
			select	*
			into STRICT	usuario_w
			from	usuario
			where	nm_usuario = c01_w.NM_USUARIO;
		end if;
		
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.NM_USUARIO, 'S', usuario_w.NM_USUARIO			) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.NM_USUARIO			 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO_ORIG', c01_w.NM_USUARIO_ORIG, 'S', usuario_w.NM_USUARIO_ORIG		) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.NM_USUARIO_ORIG		 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_USUARIO', c01_w.DS_USUARIO, 'S', usuario_w.DS_USUARIO			) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.DS_USUARIO			 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'QT_DIA_SENHA', c01_w.QT_DIA_SENHA, 'S', usuario_w.QT_DIA_SENHA			) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.QT_DIA_SENHA			 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_SETOR_ATENDIMENTO', c01_w.CD_SETOR_ATENDIMENTO, 'S', usuario_w.CD_SETOR_ATENDIMENTO	) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.CD_SETOR_ATENDIMENTO	 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_FECHAR_TASYMON', c01_w.IE_FECHAR_TASYMON, 'S', usuario_w.IE_FECHAR_TASYMON	) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.IE_FECHAR_TASYMON	 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_MENSAGEM_REC', c01_w.IE_MENSAGEM_REC, 'S', usuario_w.IE_MENSAGEM_REC		) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.IE_MENSAGEM_REC		 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_MENSAGEM_ENVIO', c01_w.IE_MENSAGEM_ENVIO, 'S', usuario_w.IE_MENSAGEM_ENVIO	) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.IE_MENSAGEM_ENVIO	 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_SITUACAO', c01_w.IE_SITUACAO, 'S', usuario_w.IE_SITUACAO			) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.IE_SITUACAO			 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_COMUNIC_INTERNA', c01_w.IE_COMUNIC_INTERNA, 'S', usuario_w.IE_COMUNIC_INTERNA	) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.IE_COMUNIC_INTERNA	 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_LOCALIZAR_MEDICO', c01_w.IE_LOCALIZAR_MEDICO, 'S', usuario_w.IE_LOCALIZAR_MEDICO	) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.IE_LOCALIZAR_MEDICO	 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO_ATUAL', c01_w.NM_USUARIO_ATUAL, 'S', usuario_w.NM_USUARIO_ATUAL		) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.NM_USUARIO_ATUAL		 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c01_w.DT_ATUALIZACAO, 'S', usuario_w.DT_ATUALIZACAO		) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.DT_ATUALIZACAO		 := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', c01_w.CD_ESTABELECIMENTO, 'S', usuario_w.CD_ESTABELECIMENTO	) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.CD_ESTABELECIMENTO	 := _ora2pg_r.ds_valor_retorno_p;

		
		usuario_w.dt_atualizacao_nrec := usuario_w.DT_ATUALIZACAO;
		usuario_w.nm_usuario_nrec := usuario_w.NM_USUARIO_ORIG;

		
			
		begin
		
			select max(cd_pessoa_fisica)
			into STRICT cd_pessoa_fisica_w
			from pessoa_fisica
			where nr_cpf like c01_w.NR_CPF;
		
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_PESSOA_FISICA', cd_pessoa_fisica_w, 'S', usuario_w.cd_pessoa_fisica) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; usuario_w.cd_pessoa_fisica := _ora2pg_r.ds_valor_retorno_p;
		
			select	count(nm_usuario)
			into STRICT	usuario_exists_w
			from	usuario
			where	nm_usuario = usuario_w.NM_USUARIO;
			
			if (usuario_exists_w > 0) then
				ds_operacao_w	:= 'UPDATE USUARIO';
				update	usuario
				set	row = usuario_w
				where nm_usuario = usuario_w.NM_USUARIO;
			else
				ds_operacao_w	:= 'INSERT USUARIO';
				
				usuario_w.IE_ANEXAR_ARQUIVO := 'S';
				usuario_w.IE_VERSAO_ANTERIOR := 'N';
				usuario_w.IE_EVENTO_AGENDA := 'N';
				usuario_w.IE_EVENTO_SAC := 'N';
				usuario_w.IE_EVENTO_PROCESSO := 'N';
				usuario_w.IE_EVENTO_PRESCR := 'N';
				usuario_w.IE_EVENTO_PROC_AGENDA := 'N';
				usuario_w.IE_EVENTO_COMUNIC := 'N';
				usuario_w.IE_EVENTO_ALERTA := 'N';
				usuario_w.IE_EVENTO_APROV_COMPRA := 'N';
				usuario_w.IE_EVENTO_EXAME_URG := 'N';
				usuario_w.IE_EVENTO_APROV_DOC := 'N';
				usuario_w.IE_EVENTO_LIB_TELEFONE := 'N';
				usuario_w.IE_MOSTRAR_ANEXO_COMUNIC := 'N';
				usuario_w.IE_EVENTO_ORDEM_SERV := 'N';
				usuario_w.IE_EVENTO_OBJ_INV := 'N';
				usuario_w.IE_EVENTO_RECOLETA := 'N';
				usuario_w.IE_EVENTO_ORDEM_SERV := 'N';
				usuario_w.IE_CAN_VIEW_SENSITIVE_INFO := 'Y';
				usuario_w.IE_CAN_VIEW_PATIENT_INFO := 'Y';
				
				
				insert into usuario values (usuario_w.*);
				
			end if;
			
		exception
		when others then
			ds_erro_w		:= substr(ds_operacao_w || ': ' || sqlerrm(SQLSTATE),1,2000);
			ie_erro_w := 'S';
			intpd_gravar_log_recebimento(nr_sequencia_p, ds_erro_w, c01_w.nm_usuario);
		end;
	end if;
	end;
end loop;
close C01;

if	((reg_integracao_w.qt_reg_log > 0) or (ie_erro_w = 'S')) then
	begin
	rollback;

	update 	intpd_fila_transmissao
	set	ie_status = 'E',
		ie_tipo_erro = 'F'
	where	nr_sequencia = nr_sequencia_p;

	for i in 0..reg_integracao_w.qt_reg_log-1 loop		
		INTPD_GRAVAR_LOG_RECEBIMENTO(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
	end loop;
	end;
else
	update	intpd_fila_transmissao
	set	ie_status = 'S',
		nr_seq_documento = coalesce(usuario_par_del_w, c01_w.NM_USUARIO),
		nr_doc_externo = c01_w.NM_USUARIO
	where	nr_sequencia = nr_sequencia_p;	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_usuario ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

