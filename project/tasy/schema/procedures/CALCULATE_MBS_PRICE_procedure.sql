-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calculate_mbs_price (cd_edicao_p bigint, cd_moeda_p bigint, nm_usuario_p text) AS $body$
DECLARE

nr_item_w mbs_prices.nr_item%type;
cd_benefit_type_w mbs_prices.cd_benefit_type%type;
vl_benefit_75_w mbs_prices.vl_benefit_75%type;
vl_benefit_85_w mbs_prices.vl_benefit_85%type;
vl_benefit_100_w mbs_prices.vl_benefit_100%type;
dt_item_start_w mbs_prices.dt_item_start%type;
dt_item_end_w mbs_prices.dt_item_end%type;
nr_sequencia_w preco_amb.nr_sequencia%type;
price_original mbs_prices.vl_benefit_75%type := 0;
dept_type varchar(1)                        := 'S';
cd_procedimento_w procedimento.cd_procedimento%type;
qt_count_w integer;

c01 CURSOR FOR
SELECT nr_item,
    cd_benefit_type,
    vl_benefit_75,
    vl_benefit_85,
    vl_benefit_100,
    dt_item_start,
    dt_item_end
from mbs_prices
where ie_status = 'A';


BEGIN

open c01;
loop
fetch c01
    into nr_item_w,
      cd_benefit_type_w,
      vl_benefit_75_w,
      vl_benefit_85_w,
      vl_benefit_100_w,
      dt_item_start_w,
      dt_item_end_w;
	  EXIT WHEN NOT FOUND; /* apply on c01 */

	  begin
			case   cd_benefit_type_w
				when      'A' then price_original := vl_benefit_75_w;
				when      'B' then price_original := vl_benefit_85_w;
				when      'C' then
					 if (dept_type      = 'S') then
							price_original := vl_benefit_75_w;
					 else
							price_original := vl_benefit_85_w;
					end if;
				when      'D' then
					if (dept_type      = 'S') then
							price_original := vl_benefit_75_w;
					else
							price_original := vl_benefit_100_w;
					end if;
				when     'E' then price_original := vl_benefit_100_w;
				else  	  price_original := 0;
			end case;

			select coalesce(max(nr_sequencia),0)
			into STRICT nr_sequencia_w
			from preco_amb
			where cd_edicao_amb     = cd_edicao_p
			and cd_procedimento_loc = nr_item_w;
	
			if (nr_sequencia_w     <> 0) then
				update preco_amb
			   set vl_custo_operacional = coalesce(price_original,0),
				   vl_procedimento        = coalesce(price_original,0),
				   cd_moeda               = cd_moeda_p,
				   dt_inicio_vigencia     = dt_item_start_w,
				   dt_final_vigencia      = dt_item_end_w
			   where nr_sequencia       = nr_sequencia_w;
			else
			   select max(cd_procedimento)
			   into STRICT cd_procedimento_w
			   from procedimento
			   where cd_procedimento_loc = nr_item_w
			   and ie_origem_proced      = 20;
			
			  if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
				  select nextval('preco_amb_seq')
				  into STRICT nr_sequencia_w 
				;
				
				  insert into preco_amb(cd_edicao_amb,
							  cd_procedimento,
							  cd_procedimento_loc,
							  vl_procedimento,
							  cd_moeda,
							  dt_atualizacao,
							  nm_usuario,
							  vl_custo_operacional,
							  ie_origem_proced,
							  nr_sequencia,
							  dt_inicio_vigencia,
							  dt_final_vigencia
							)
							values (cd_edicao_p,
							  cd_procedimento_w,
							  nr_item_w,
							  coalesce(price_original,0),
							  cd_moeda_p,
							  clock_timestamp(),
							  nm_usuario_p,
							  coalesce(price_original,0),
							  20,
							  nr_sequencia_w,
							  dt_item_start_w,
							  dt_item_end_w
							);
				end if;
			end if;
		end;
end loop;
close c01;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calculate_mbs_price (cd_edicao_p bigint, cd_moeda_p bigint, nm_usuario_p text) FROM PUBLIC;

