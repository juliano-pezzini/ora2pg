-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_cta_val_tratar_val_1 ( dados_regra_p pls_tipos_cta_val_pck.dados_regra, nr_id_transacao_p pls_rp_cta_selecao.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Aplica a valoridação especial para especialista onde após X execuções será pago um valor diferenciado para o executor do mesmo
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_string_comparacao_w		varchar(3000);
ds_string_comparacao_ant_w	varchar(3000);
qt_cnt_w			integer;
qt_ocorrencia_w		integer;
i			integer;
nr_seq_selecao_num_w	dbms_sql.number_table;
ie_valido_w		dbms_sql.varchar2_table;

-- Regra de validacao do sexo exclusivo do procedimento.
C01 CURSOR(nr_seq_rp_combinada_pc	dados_regra_p.nr_seq_regra%type) FOR
	SELECT	a.nr_sequencia,
		a.qt_ocorrencia
	from	pls_rp_cta_val_1 	a
	where	a.nr_seq_rp_combinada	= nr_seq_rp_combinada_pc
	and	a.ie_situacao		= 'A';

-- Procedimentos que entraram nos filtros e nas validações até então.
C02 CURSOR(	nr_id_transacao_pc	pls_rp_cta_selecao.nr_id_transacao%type) FOR
	SELECT	proc.ie_origem_proced,
		proc.cd_procedimento,
		proc.cd_guia_referencia,
		proc.ie_tipo_despesa,
		proc.nr_seq_segurado,
		proc.dt_procedimento_trunc,
		selec.nr_sequencia nr_seq_selecao,
		(CASE WHEN proc.nr_seq_prestador_exec=proc.nr_seq_prestador_prot THEN  0  ELSE 1 END ) qt_prot
	from 	pls_rp_cta_selecao    selec,
		pls_conta_proc_cta_val_v    proc
	where	selec.nr_id_transacao = nr_id_transacao_pc
	and 	selec.ie_valido = 'S'
	and 	proc.nr_sequencia = selec.nr_seq_conta_proc
	order 	by
		proc.cd_guia_referencia,
		proc.nr_seq_segurado,
		qt_prot,
		proc.ie_origem_proced,
		proc.cd_procedimento,
		proc.ie_tipo_despesa,
		proc.dt_procedimento,
		proc.vl_procedimento_imp;

BEGIN

qt_cnt_w := pls_util_cta_pck.qt_registro_transacao_w;

-- Deve existir a informação da regra e da transação para que seja possível executar a validação
if (dados_regra_p.nr_seq_regra IS NOT NULL AND dados_regra_p.nr_seq_regra::text <> '') and (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '') then
	
	-- percorre a regra
	for	r_C01_w in C01(dados_regra_p.nr_seq_regra) loop
		
		-- Inicializar as listas para cada regra.
		i := 0;
		ie_valido_w.delete;
		nr_seq_selecao_num_w.delete;
		
		-- Atualizar o campo ie_valido_temp para N  na tabela PLS_rp_cta_SELECAO  para todos os registros.
		CALL pls_tipos_cta_val_pck.atualiza_sel_ie_valido_temp(nr_id_transacao_p, null, 'V');
		qt_ocorrencia_w := 0;
		
		-- busca todos os procedimentos filtrados
		for	r_C02_w in C02(nr_id_transacao_p) loop
			
			-- Só é possível executar a validação se obtiver a informação do segurado e do procedimento;
			if (r_C02_w.nr_seq_segurado IS NOT NULL AND r_C02_w.nr_seq_segurado::text <> '') and (r_C02_w.cd_guia_referencia IS NOT NULL AND r_C02_w.cd_guia_referencia::text <> '') then
				
				ds_string_comparacao_w :=	to_char(r_C02_w.ie_origem_proced) ||
								to_char(r_C02_w.cd_procedimento) ||
								r_C02_w.cd_guia_referencia ||
								r_C02_w.ie_tipo_despesa ||
								to_char(r_C02_w.nr_seq_segurado) ||
								to_char(r_C02_w.dt_procedimento_trunc);
				
				-- se o registro anterior for igual ao próximo, acrescenta uma ocorrência
				if (coalesce(ds_string_comparacao_w::text, '') = '' or
					 ds_string_comparacao_w = ds_string_comparacao_ant_w) then
					qt_ocorrencia_w	:= qt_ocorrencia_w + 1;
				-- senão reinicializa a variável com 1 porque se mudou já é uma primeira execução
				else
					qt_ocorrencia_w	:= 1;
				end if;
			
				if (qt_ocorrencia_w >= r_c01_w.qt_ocorrencia) then
					
					ie_valido_w(i)		:= 'S';
					nr_seq_selecao_num_w(i)	:= r_C02_w.nr_seq_selecao;
					
					-- se quantidade de registros for maior ou igual a quantidade de controle do banco, envia os dados para serem atualizados.
					if (i >= qt_cnt_w) then
						CALL pls_tipos_cta_val_pck.gerencia_selecao_validacao(	nr_seq_selecao_num_w,
													ie_valido_w, 
													nm_usuario_p);
						i := 0;
					else
						i := i + 1;
					end if;
				end if;
				
				ds_string_comparacao_ant_w := ds_string_comparacao_w;
			end if;

		end loop; -- C02
		
		CALL pls_tipos_cta_val_pck.gerencia_selecao_validacao(	nr_seq_selecao_num_w, ie_valido_w, nm_usuario_p);
		i := 0;
		ie_valido_w.delete;
		nr_seq_selecao_num_w.delete;
		
		-- Atualiza o campo ie_valido da tabela PLS_RP_CTA_SELECAO para N aonde o ie_valido_temp continuar N
		CALL pls_tipos_cta_val_pck.atualiza_sel_ie_valido(nr_id_transacao_p, null, 'V');
		
	end loop;-- C01
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_val_tratar_val_1 ( dados_regra_p pls_tipos_cta_val_pck.dados_regra, nr_id_transacao_p pls_rp_cta_selecao.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

