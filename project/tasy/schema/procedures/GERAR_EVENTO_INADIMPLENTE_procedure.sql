-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_evento_inadimplente ( nr_atendimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

nr_seq_evento_w		bigint;
qt_reg_w		bigint;
qt_idade_w		bigint;
ie_pendente_w		varchar(1);
ie_restringe_estab_w	varchar(1);
nr_seq_classif_w	bigint;
qt_dias_debito_w	bigint := 0;
	
c01 CURSOR FOR 
	SELECT	qt_dias_debito 
	from	regra_alerta_debito_pac 
	where	dt_inicio_vigencia 				< clock_timestamp() 
	and	coalesce(dt_final_vigencia,clock_timestamp() + interval '1 days')		> clock_timestamp() 
	and	coalesce(cd_pessoa_fisica,cd_pessoa_fisica_p)	= cd_pessoa_fisica_p 
	and	coalesce(nr_seq_classif,nr_seq_classif_w)		= nr_seq_classif_w 
	and	coalesce(cd_estabelecimento,coalesce(cd_estabelecimento_p,0))	= coalesce(cd_estabelecimento_p,0) 
	order	by coalesce(cd_pessoa_fisica,'0'), 
		coalesce(nr_seq_classif,0);	
		 
C02 CURSOR FOR 
	SELECT	nr_seq_evento 
	from	regra_envio_sms a, 
		ev_evento b 
	where	cd_estabelecimento = cd_estabelecimento_p 
	and	ie_evento_disp = 'II' 
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999) 
	and	a.nr_seq_evento = b.nr_sequencia 
	and	upper(b.ds_evento) like upper('%Inadimplente%') 
	and	coalesce(a.ie_situacao,'A') = 'A';		
 

BEGIN 
 
ie_pendente_w := obter_param_usuario(916, 88, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_pendente_w);
ie_restringe_estab_w := obter_param_usuario(-815, 2, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_restringe_estab_w);
 
select	coalesce(max(nr_seq_classif), 0) 
into STRICT	nr_seq_classif_w 
from	pessoa_classif 
where	cd_pessoa_fisica			= cd_pessoa_fisica_p 
and	dt_inicio_vigencia			< clock_timestamp() 
and	coalesce(dt_final_vigencia,clock_timestamp() + interval '1 days')	> clock_timestamp();
 
open c01;
loop 
fetch c01 into 
	qt_dias_debito_w;
EXIT WHEN NOT FOUND; /* apply on c01 */	
end loop;
close c01;
 
begin 
	select	a.cd_pessoa_fisica 
	into STRICT	qt_reg_w 
	from  	valores_pendentes_v a 
	where 	a.cd_pessoa_fisica 	= cd_pessoa_fisica_p 
	and (trunc(clock_timestamp(), 'dd') - trunc(dt_pagamento_previsto, 'dd')) >= qt_dias_debito_w 
	and	((coalesce(ie_pendente_w,'N') = 'N') or (coalesce(ie_pendente_w,'N') = 'S' and trunc(a.dt_pagamento_previsto) < trunc(clock_timestamp()))) 
	and	((coalesce(ie_restringe_estab_w,'N') = 'N') or (coalesce(ie_restringe_estab_w,'N') = 'S' and coalesce(cd_estabelecimento,coalesce(cd_estabelecimento_p,0)) = coalesce(cd_estabelecimento_p,0) or obter_estab_financeiro(a.cd_estabelecimento) = coalesce(cd_estabelecimento_p,0))) 
	and	(a.nr_titulo IS NOT NULL AND a.nr_titulo::text <> '')  LIMIT 1;
exception 
	when 	no_data_found then 
		qt_reg_w := 0;
end;
 
begin 
	qt_idade_w	:= coalesce(obter_idade_pf(cd_pessoa_fisica_p,clock_timestamp(),'A'),0);
exception 
	when 	no_data_found then 
		qt_idade_w := 0;
end;
 
if (qt_reg_w > 0) then 
	open C02;
	loop 
	fetch C02 into	 
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_p,null,nm_usuario_p,null);
		end;
	end loop;
	close C02;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_evento_inadimplente ( nr_atendimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

