-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE aspb_gerar_cob_graf_utl_file ( nr_seq_cobr_escrit_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
dt_solicitacao_w	varchar(4000);
dt_resposta_w		varchar(4000);
ie_primeiro_loop_w	varchar(4000);
ds_servico_w		varchar(4000);
dt_servico_w		varchar(4000);
nm_segurado_w		varchar(4000);
nm_responsavel_w	varchar(4000);
ds_conteudo_w		varchar(150);
ds_bairro_w		varchar(50);
nm_beneficiario_w	varchar(26);
cd_ans_w		varchar(7);
vl_mensalidade_w	double precision;	
vl_coparticipacao_w	double precision;
vl_opc_w		double precision;
nr_seq_segurado_w	bigint;
nr_seq_apres_w		bigint;
nr_titulo_w		bigint;
nr_protocolo_ans_w	bigint;
i 			smallint;
vl_servico_w		timestamp;
dt_contratacao_w	timestamp;

/*UTL File*/
 
arq_texto_w			utl_file.file_type;
ds_erro_w			varchar(255);
ds_local_w			varchar(255);
nm_arquivo_w			varchar(255);
ds_mensagem_w			varchar(255);
				
C01 CURSOR FOR 
	SELECT	a.nr_titulo, 
		rpad(coalesce(substr(obter_endereco_cobr_pf_pj(b.cd_pessoa_fisica,b.cd_cgc,'B'),1,50),' '),50,' '), 
		rpad(coalesce(g.cd_ans,' '),7,' '), 
		f.nr_protocolo_ans, 
		rpad(coalesce(substr(obter_dados_titulo_receber(b.nr_titulo,'N'),1,25),' '),26,' '), 
		sum(CASE WHEN i.ie_tipo_item=3 THEN 0 WHEN i.ie_tipo_item=15 THEN 0  ELSE i.vl_item END ) vl_mens, 
		sum(CASE WHEN i.ie_tipo_item=3 THEN i.vl_item  ELSE 0 END )vl_copart, 
		sum(CASE WHEN i.ie_tipo_item=15 THEN i.vl_item  ELSE 0 END ) vl_opc, 
		coalesce(e.dt_contratacao,clock_timestamp()), 
		e.nr_sequencia 
	from	pls_outorgante			g, 
		pls_plano			f, 
		pls_segurado 			e, 
		pls_mensalidade_seg_item	i, 
		pls_mensalidade_segurado	d, 
		pls_mensalidade			c, 
		titulo_receber			b, 
		titulo_receber_cobr		a 
	where	a.nr_seq_cobranca 		= nr_seq_cobr_escrit_p 
	and	a.nr_titulo 			= b.nr_titulo 
	and	b.nr_seq_mensalidade 		= c.nr_sequencia 
	and	c.nr_sequencia			= d.nr_seq_mensalidade 
	and	d.nr_sequencia			= i.nr_seq_mensalidade_seg 
	and	d.nr_seq_segurado		= e.nr_sequencia 
	and	e.nr_seq_plano			= f.nr_sequencia 
	and	f.nr_seq_outorgante		= g.nr_sequencia 
	group by 	a.nr_titulo, 
			obter_endereco_cobr_pf_pj(b.cd_pessoa_fisica,b.cd_cgc,'B'), 
			g.cd_ans, 
			f.nr_protocolo_ans, 
			substr(obter_dados_titulo_receber(b.nr_titulo,'N'),1,25), 
			e.dt_contratacao, 
			e.nr_sequencia 
	order by 	a.nr_titulo;
	
C02 CURSOR FOR 
	SELECT	rpad(substr(obter_descricao_procedimento(f.cd_procedimento,f.ie_origem_proced),1,10),11,' ') ds_servico, 
		rpad(f.dt_procedimento,9,' ') dt_servico,  
		rpad(pls_obter_dados_segurado(nr_seq_segurado_w,'N'),20,' ') nm_segurado, 
		rpad(pls_obter_dados_prestador(e.nr_seq_prestador_exec,'N'),20,' ') nm_responsavel, 
		lpad(campo_mascara_virgula(h.vl_coparticipacao),8,' ') vl_servico 
	from 	pls_conta_coparticipacao 	h, 
		pls_conta_proc   		f, 
		pls_conta   			e, 
		pls_mensalidade_seg_item 	a, 
		pls_mensalidade_segurado 	b, 
		pls_mensalidade   		c, 
		titulo_receber   		d	 
	where 	a.nr_seq_mensalidade_seg 	= b.nr_sequencia 
	and 	b.nr_seq_mensalidade  	= c.nr_sequencia 
	and 	d.nr_seq_mensalidade  	= c.nr_sequencia 
	and 	a.nr_seq_conta   		= e.nr_sequencia 
	and 	e.nr_sequencia   		= f.nr_seq_conta 
	and 	h.nr_seq_conta_proc  		= f.nr_sequencia 
	and 	d.nr_titulo   		= nr_titulo_w 
	and 	(a.nr_seq_conta IS NOT NULL AND a.nr_seq_conta::text <> '') 
	order by e.nr_sequencia;
	

BEGIN 
nm_arquivo_w	:= to_char(clock_timestamp(),'ddmmyyyy') || to_char(clock_timestamp(),'hh24') || to_char(clock_timestamp(),'mi') || to_char(clock_timestamp(),'ss') || nm_usuario_p || '.rem';
 
SELECT * FROM obter_evento_utl_file(1, null, ds_local_w, ds_erro_w) INTO STRICT ds_local_w, ds_erro_w;
 
begin 
arq_texto_w := utl_file.fopen(ds_local_w,nm_arquivo_w,'W');
exception 
when others then 
	if (SQLSTATE = -29289) then 
		ds_erro_w := 'O acesso ao arquivo foi negado pelo sistema operacional (access_denied).';
	elsif (SQLSTATE = -29298) then 
		ds_erro_w := 'O arquivo foi aberto usando FOPEN_NCHAR, mas efetuaram-se operações de I/O usando funções nonchar comos PUTF ou GET_LINE (charsetmismatch).';
	elsif (SQLSTATE = -29291) then 
		ds_erro_w := 'Não foi possível apagar o arquivo (delete_failed).';
	elsif (SQLSTATE = -29286) then 
		ds_erro_w := 'Erro interno desconhecido no package UTL_FILE (internal_error).';
	elsif (SQLSTATE = -29282) then 
		ds_erro_w := 'O handle do arquivo não existe (invalid_filehandle).';
	elsif (SQLSTATE = -29288) then 
		ds_erro_w := 'O arquivo com o nome especificado não foi encontrado neste local (invalid_filename).';
	elsif (SQLSTATE = -29287) then 
		ds_erro_w := 'O valor de MAX_LINESIZE para FOPEN() é inválido; deveria estar na faixa de 1 a 32767 (invalid_maxlinesize).';
	elsif (SQLSTATE = -29281) then 
		ds_erro_w := 'O parâmetro open_mode na chamda FOPEN é inválido (invalid_mode).';
	elsif (SQLSTATE = -29290) then 
		ds_erro_w := 'O parâmetro ABSOLUTE_OFFSET para a chamada FSEEK() é inválido; deveria ser maior do que 0 e menor do que o número total de bytes do arquivo (invalid_offset).';
	elsif (SQLSTATE = -29283) then 
		ds_erro_w := 'O arquivo não pôde ser aberto ou operado da forma desejada - ou o caminho não foi encontrado (invalid_operation).';
	elsif (SQLSTATE = -29280) then 
		ds_erro_w := 'O caminho especificado não existe ou não está visível ao Oracle (invalid_path).';
	elsif (SQLSTATE = -29284) then 
		ds_erro_w := 'Não é possível efetuar a leitura do arquivo (read_error).';
	elsif (SQLSTATE = -29292) then 
		ds_erro_w := 'Não é possível renomear o arquivo.';
	elsif (SQLSTATE = -29285) then 
		ds_erro_w := 'Não foi possível gravar no arquivo (write_error).';
	else 
		ds_erro_w := 'Erro desconhecido no package UTL_FILE.';
	end if;	
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186768,'DS_ERRO_W=' || ds_erro_w);
end;
 
update	cobranca_escritural 
set	ds_arquivo	= ds_local_w || nm_arquivo_w 
where	nr_sequencia	= nr_seq_cobr_escrit_p;
 
open C01;
loop 
fetch C01 into	 
	nr_titulo_w, 
	ds_bairro_w, 
	cd_ans_w, 
	nr_protocolo_ans_w, 
	nm_beneficiario_w, 
	vl_mensalidade_w, 
	vl_coparticipacao_w, 
	vl_opc_w, 
	dt_contratacao_w, 
	nr_seq_segurado_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	i := 1;
	while(i <= 5) loop 
		if (i = 1) then 
			ds_conteudo_w	:= 	lpad(nr_titulo_w,15,'0') || ds_bairro_w || 'Registro na ANS: ' || cd_ans_w || 'Produto na ANS: ' || nr_protocolo_ans_w;
		elsif (i = 2) then 
			ds_conteudo_w 	:= 	lpad(nr_titulo_w,15,'0') || ds_bairro_w || 'Usuario          Inclusao   Vlr Taxa  Vlr Opc  Vlr Cota';
		elsif (i = 3) then 
			ds_conteudo_w 	:= 	lpad(nr_titulo_w,15,'0') || ds_bairro_w || nm_beneficiario_w || to_char(dt_contratacao_w,'dd/mm/yyyy') || 
						lpad(vl_mensalidade_w,12,' ') || lpad(vl_opc_w,11,' ') || lpad(vl_coparticipacao_w,11,' ');
		elsif (i = 4) then 
			select	to_char(max(b.dt_solicitacao),'dd/mm/yyyy'), 
				to_char(coalesce(max(b.dt_resposta),clock_timestamp()),'dd/mm/yyyy') 
			into STRICT	dt_solicitacao_w, 
				dt_resposta_w 
			from	pls_portab_pessoa	b, 
				pls_segurado		a 
			where	b.nr_sequencia = a.nr_seq_portabilidade 
			and	a.nr_sequencia = nr_seq_segurado_w;
			 
			if (dt_solicitacao_w IS NOT NULL AND dt_solicitacao_w::text <> '') and (dt_resposta_w IS NOT NULL AND dt_resposta_w::text <> '')then 
			ds_conteudo_w	:= lpad(nr_titulo_w,15,'0') || ds_bairro_w || 'PERIODO PARA EXERCER A PORTABILIDADE ' || dt_solicitacao_w || ' A ' || dt_resposta_w;
			end if;
			 
		elsif (i = 5) then 
			ie_primeiro_loop_w := 'S';
			open C02;
			loop 
			fetch C02 into 
				ds_servico_w, 
				dt_servico_w, 
				nm_segurado_w, 
				nm_responsavel_w, 
				vl_servico_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin				 
				if (ie_primeiro_loop_w = 'S') then 
					ds_conteudo_w 		:= lpad(nr_titulo_w,15,'0') || ds_bairro_w || 'Usuario          Inclusao   Vlr Taxa  Vlr Opc  Vlr Cota';
					ie_primeiro_loop_w 	:= 'N';
				end if;
				ds_conteudo_w	:= lpad(nr_titulo_w,15,'0') || ds_bairro_w || ds_servico_w || dt_servico_w || nm_segurado_w || nm_responsavel_w || vl_servico_w;
				end;
			end loop;
			close c02;
		end if;
		 
		nr_seq_apres_w := nr_seq_apres_w + 1;
		 
		utl_file.put_line(arq_texto_w,ds_conteudo_w);
		utl_file.fflush(arq_texto_w);
		 
		insert into w_envio_banco(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			cd_estabelecimento, 
			ds_conteudo, 
			nr_seq_apres, 
			nr_seq_apres_2, 
			nr_titulo) 
		values (nextval('w_envio_banco_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_estabelecimento_p, 
			ds_conteudo_w, 
			nr_seq_apres_w, 
			0, 
			nr_titulo_w);
		 
		i := i + 1;
	end loop;
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE aspb_gerar_cob_graf_utl_file ( nr_seq_cobr_escrit_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

