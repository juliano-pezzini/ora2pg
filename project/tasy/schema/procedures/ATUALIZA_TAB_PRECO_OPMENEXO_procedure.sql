-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualiza_tab_preco_opmenexo ( cd_material_p bigint, dt_vigencia_p timestamp, cd_tab_preco_mat_p bigint, cd_estabelecimento_p bigint, vl_preco_p bigint, cd_cgc_p text, nm_usuario_p text) AS $body$
DECLARE

 
vl_preco_venda_w			double precision:= 0;
dt_vigencia_w			timestamp;
dt_vigencia_ww			timestamp;
qt_existe_w			bigint;
cd_moeda_w			smallint:= 1;
qt_existe_dia_w			bigint;
qt_dias_antes_vig_w		integer;
cd_cgc_w			pessoa_juridica.cd_cgc%TYPE;

c01 CURSOR FOR 
	SELECT	 
		a.vl_preco_venda, 
		a.dt_inicio_vigencia, 
		a.cd_moeda 
	FROM	preco_material a 
	WHERE	a.cd_tab_preco_mat = cd_tab_preco_mat_p 
	AND	a.cd_estabelecimento = cd_estabelecimento_p 
	AND	a.cd_material = cd_material_p 
	AND	coalesce(a.ie_situacao, 'A') = 'A' 
	AND	a.dt_inicio_vigencia <= dt_vigencia_p 
	AND	coalesce(a.ie_preco_venda, 'S') = 'S' 
	ORDER BY 
		a.dt_inicio_vigencia;


BEGIN 
/* 1 - Pegar as informações do preço vigente do item */
 
OPEN C01;
LOOP 
FETCH C01 INTO 
	vl_preco_venda_w, 
	dt_vigencia_w, 
	cd_moeda_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	BEGIN 
	vl_preco_venda_w := vl_preco_venda_w;
	dt_vigencia_w	 := dt_vigencia_w;
	cd_moeda_w	 := cd_moeda_w;
	END;
END LOOP;
CLOSE C01;
 
SELECT	coalesce(MAX(qt_dias_antes_vig),0) 
INTO STRICT	qt_dias_antes_vig_w 
FROM	parametros_opme 
WHERE	cd_estabelecimento = cd_estabelecimento_p 
AND		ie_sistema_integracao = 'P';
 
IF (qt_dias_antes_vig_w <> 0) THEN 
	dt_vigencia_ww := (dt_vigencia_p - qt_dias_antes_vig_w);
END IF;
 
cd_cgc_w := cd_cgc_p;
 
/* 2 - Verificar se o valor que está vindo da integração é maior ou menor que o praticado*/
 
IF (coalesce(vl_preco_p,0) > vl_preco_venda_w) THEN 
 
	/* 2.1 - Se o valor for maior, então verifica-se no mês que vem o valor novo existe o registro no dia 01 do mês*/
 
	SELECT	COUNT(*) 
	INTO STRICT	qt_existe_w 
	FROM	preco_material 
	WHERE	cd_estabelecimento 	= cd_estabelecimento_p 
	AND	cd_tab_preco_mat		= cd_tab_preco_mat_p 
	AND	cd_material				= cd_material_p 
	AND	dt_inicio_vigencia		= TRUNC(coalesce(dt_vigencia_ww, dt_vigencia_p), 'month');
 
	/* 2.2 - Se não tem o registro no primeiro dia daquele mês então cria-se um novo registro*/
 
	IF (qt_existe_w = 0) THEN 
 
		INSERT INTO preco_material( 
			cd_estabelecimento, 
			cd_tab_preco_mat, 
			cd_material, 
			dt_inicio_vigencia, 
			vl_preco_venda, 
			cd_moeda, 
			ie_brasindice, 
			dt_atualizacao, 
			nm_usuario, 
			ie_situacao, 
			ie_preco_venda, 
			ie_integracao, 
			cd_cgc_fornecedor) 
		VALUES ( 
			cd_estabelecimento_p, 
			cd_tab_preco_mat_p, 
			cd_material_p, 
			TRUNC(coalesce(dt_vigencia_ww, dt_vigencia_p),'month'), 
			coalesce(vl_preco_p,0), 
			cd_moeda_w, 
			'N', 
			clock_timestamp(), 
			nm_usuario_p, 
			'A', 
			'S', 
			'P', 
			cd_cgc_w);
		 
 
	ELSIF (qt_existe_w > 0) THEN 
 
		SELECT	COUNT(*) 
		INTO STRICT	qt_existe_dia_w 
		FROM	preco_material 
		WHERE	cd_estabelecimento 			= cd_estabelecimento_p 
		AND	cd_tab_preco_mat 				= cd_tab_preco_mat_p 
		AND	cd_material 					= cd_material_p 
		AND	TRUNC(dt_inicio_vigencia,'dd') 	= TRUNC(coalesce(dt_vigencia_ww, dt_vigencia_p),'dd');
 
		IF (qt_existe_dia_w = 0) THEN 
 
			INSERT INTO preco_material( 
				cd_estabelecimento, 
				cd_tab_preco_mat, 
				cd_material, 
				dt_inicio_vigencia, 
				vl_preco_venda, 
				cd_moeda, 
				ie_brasindice, 
				dt_atualizacao, 
				nm_usuario, 
				ie_situacao, 
				ie_preco_venda, 
				ie_integracao, 
				cd_cgc_fornecedor) 
			VALUES ( 
				cd_estabelecimento_p, 
				cd_tab_preco_mat_p, 
				cd_material_p, 
				TRUNC(coalesce(dt_vigencia_ww, dt_vigencia_p),'dd'), 
				coalesce(vl_preco_p,0), 
				cd_moeda_w, 
				'N', 
				clock_timestamp(), 
				nm_usuario_p, 
				'A', 
				'S', 
				'P', 
				cd_cgc_w);
 
		END IF;
	END IF;
 
ELSE	 
	/* 3 - O valor que está vindo da integração é menor que o praticado.. 
 
	/* 3.1 - Lançar o item na tabela com data que vem da integração, antes verificar se não existe um já*/
 
	SELECT	COUNT(*) 
	INTO STRICT	qt_existe_w 
	FROM	preco_material		 
	WHERE	cd_estabelecimento	= cd_estabelecimento_p 
	AND	cd_tab_preco_mat	= cd_tab_preco_mat_p 
	AND	cd_material		= cd_material_p 
	AND	TRUNC(dt_inicio_vigencia,'dd') = TRUNC(coalesce(dt_vigencia_ww, dt_vigencia_p), 'dd');
 
	/* 3.2 - Se não tem o registro no primeiro dia daquele mês então cria-se um novo registro*/
 
	IF (qt_existe_w = 0) THEN 
 
		INSERT INTO preco_material( 
			cd_estabelecimento, 
			cd_tab_preco_mat, 
			cd_material, 
			dt_inicio_vigencia, 
			vl_preco_venda, 
			cd_moeda, 
			ie_brasindice, 
			dt_atualizacao, 
			nm_usuario, 
			ie_situacao, 
			ie_preco_venda, 
			ie_integracao, 
			cd_cgc_fornecedor) 
		VALUES ( 
			cd_estabelecimento_p, 
			cd_tab_preco_mat_p, 
			cd_material_p, 
			TRUNC(coalesce(dt_vigencia_ww, dt_vigencia_p),'dd'), 
			coalesce(vl_preco_p,0), 
			cd_moeda_w, 
			'N', 
			clock_timestamp(), 
			nm_usuario_p, 
			'A', 
			'N', 
			'P', 
			cd_cgc_w);
		 
	ELSIF (qt_existe_w > 0) THEN	 
		/* 3.3 - Se já tem o registro no dia vem vem a integração então atualiza-se o registro, pois quando isso acontecer, seria um erro segundo conversa com Lilian Sírio/Daniela Z.*/
 
 
		UPDATE 	preco_material 
		SET	vl_preco_venda 			= coalesce(vl_preco_p,0) 
		WHERE	cd_estabelecimento	= cd_estabelecimento_p 
		AND	cd_tab_preco_mat		= cd_tab_preco_mat_p 
		AND	cd_material				= cd_material_p 
		AND	dt_inicio_vigencia   = TRUNC(coalesce(dt_vigencia_ww, dt_vigencia_p), 'dd');
 
	END IF;
 
END IF;
 
COMMIT;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualiza_tab_preco_opmenexo ( cd_material_p bigint, dt_vigencia_p timestamp, cd_tab_preco_mat_p bigint, cd_estabelecimento_p bigint, vl_preco_p bigint, cd_cgc_p text, nm_usuario_p text) FROM PUBLIC;

