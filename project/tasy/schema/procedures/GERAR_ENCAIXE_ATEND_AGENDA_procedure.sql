-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_encaixe_atend_agenda ( dt_agenda_p timestamp, qt_duracao_p bigint, cd_pessoa_fisica_p text, nm_paciente_p text, nr_atendimento_p bigint, cd_medico_p text, nr_seq_proc_interno_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, ie_lado_p text, cd_agenda_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ds_observacao_p text, nm_pessoa_contato_p text, nr_seq_agenda_p INOUT bigint, ie_carater_cirurgia_p text default null, cd_procedencia_p text default null, ds_erro_2_p INOUT text DEFAULT NULL, nr_seq_classif_agenda_p bigint default null, dt_desejada_p timestamp default null) AS $body$
DECLARE


cd_pessoa_fisica_w	varchar(10);
nr_seq_classif_w	bigint;
qt_min_cirugia_w	smallint:= null;
nr_sequencia_W		bigint;
nr_telefone_w		varchar(40);
nr_celular_w		varchar(40);
qt_dias_atend_w		integer;
ie_reserva_leito_w	varchar(3);
cd_tipo_anestesia_w	varchar(2);
qt_idade_paciente_w	smallint;
qt_idade_mes_w          agenda_paciente.qt_idade_mes%TYPE;
ie_agenda_cirurgiao_w	varchar(1);
ds_erro_w		varchar(255);
ds_erro_2_w		varchar(255);
qt_agendas_w		integer;

ds_status_agenda_w	varchar(100);
nm_pessoa_fisica_w	varchar(50);
ds_agenda_w		varchar(50);
hr_inicio_w		varchar(21);
cd_convenio_w		integer;
nm_pessoa_contato_w	varchar(50);
qt_diaria_prev_w	smallint;
ie_gerar_dias_prev_w	varchar(1);
cd_categoria_w		varchar(20);
cd_convenio_ww		integer;
cd_plano_w		varchar(10);
nr_seq_evento_w		bigint;
cd_seq_proc_interno_w	bigint;
ie_sexo_w		varchar(1);
ie_status_agenda_w	varchar(3) := null;
ie_gerar_equip_w	varchar(1);
ie_gerar_cme_w		varchar(1);
ie_gerar_opme_w		varchar(1);
ie_gerar_servico_w	varchar(1);
ie_gerar_caixa_opme_w	varchar(1);
ds_observacao_w		varchar(255);
ds_orientacoes_w 	varchar(4000);
ie_status_autor_w	agenda_paciente.ie_autorizacao%type;

c01 CURSOR FOR	
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento		= cd_estabelecimento_p
	and	ie_evento_disp			= 'GEA'
	and	coalesce(qt_idade_paciente_w,0) between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(ie_sexo,coalesce(ie_sexo_w,'XPTO'))  = coalesce(ie_sexo_w,'XPTO')
	and	coalesce(cd_medico,coalesce(cd_medico_p,'0')) = coalesce(cd_medico_p,'0')
	and (obter_se_convenio_rec_alerta(cd_convenio_w,nr_sequencia) = 'S')
	and (obter_se_proc_rec_alerta(cd_seq_proc_interno_w,nr_sequencia,cd_procedimento_p,ie_origem_proced_p) = 'S')
	and (obter_se_regra_envio(nr_sequencia,nr_atendimento_p) = 'S')
	and	coalesce(nr_seq_classif,coalesce(obter_classificacao_pf(cd_pessoa_fisica_p),0)) = coalesce(obter_classificacao_pf(cd_pessoa_fisica_p),0)
	and (obter_regra_alerta_agenda(nr_sequencia,cd_agenda_p,ie_status_agenda_w) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(cd_pessoa_fisica_p),0)) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';
	

BEGIN

ie_status_autor_w := obter_param_usuario(871, 33, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_status_autor_w);
ie_gerar_equip_w := obter_param_usuario(871, 40, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_equip_w);
ie_gerar_cme_w := obter_param_usuario(871, 200, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_cme_w);
ie_gerar_opme_w := obter_param_usuario(871, 201, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_opme_w);
ie_gerar_servico_w := obter_param_usuario(871, 202, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_servico_w);
ie_gerar_caixa_opme_w := obter_param_usuario(871, 203, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_caixa_opme_w);

if (nr_seq_classif_agenda_p IS NOT NULL AND nr_seq_classif_agenda_p::text <> '') then
	nr_seq_classif_w := nr_seq_classif_agenda_p;
else
	nr_seq_classif_w := Obter_Classif_Encaixe_Agenda(nr_seq_classif_w);
end if;

begin
select	obter_idade(dt_nascimento, clock_timestamp(), 'A'),
		obter_idade_pf(cd_pessoa_fisica, clock_timestamp(), 'MM')
into STRICT	qt_idade_paciente_w,
		qt_idade_mes_w
from	pessoa_fisica
where	cd_pessoa_fisica		=	cd_pessoa_fisica_p;
exception
	when no_data_found then
	qt_idade_paciente_w	:= null;
	qt_idade_mes_w := null;
end;

/* Obter o numero do telefone */

select	obter_compl_pf(cd_pessoa_fisica_p, 1, 'T'),
	substr(nm_pessoa_contato_p,1,50)
into STRICT	nr_telefone_w,
	nm_pessoa_contato_w
;

/*Obter o convenio e a categoria*/

if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
	select 	max(b.cd_categoria),
		max(b.cd_convenio),
		max(b.cd_plano_convenio)
	into STRICT	cd_categoria_w,
		cd_convenio_ww,
		cd_plano_w
	FROM atendimento_paciente a
LEFT OUTER JOIN atend_categoria_convenio b ON (a.nr_atendimento = b.nr_atendimento)
, obter_atecaco_atendimento(a
LEFT OUTER JOIN atend_categoria_convenio b ON (obter_atecaco_atendimento(a.nr_atendimento) = b.nr_seq_interno)
WHERE a.nr_atendimento = nr_atendimento_p;
end if;
/* Obter o numero do celular */

select	obter_dados_pf(cd_pessoa_fisica_p,'TC')
into STRICT	nr_celular_w
;

if (nr_celular_w IS NOT NULL AND nr_celular_w::text <> '') then
	nr_telefone_w := nr_telefone_w || ' ' || nr_celular_w;
end if;

/* Obter os dados do procedimento interno */

if (nr_seq_proc_interno_p IS NOT NULL AND nr_seq_proc_interno_p::text <> '') then
	select	ie_reserva_leito,
		cd_tipo_anestesia,
		QT_DIAS_PREV_INTER
	into STRICT	ie_reserva_leito_w,
		cd_tipo_anestesia_w,
		qt_diaria_prev_w
	from	proc_interno
	where	nr_sequencia	= nr_seq_proc_interno_p;
end if;

/* Obter o valor do parametro [24] da funcao Gestao da Agenda Cirurgica */

ie_agenda_cirurgiao_w := obter_param_usuario(871, 24, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_agenda_cirurgiao_w);
ie_gerar_dias_prev_w := obter_param_usuario(871, 184, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_dias_prev_w);

/* Obter o valor do parametro [25] da funcao Gestao da Agenda Cirurgica */

select	coalesce(max((obter_valor_param_usuario(871,25,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p))::numeric ) , 1)
into STRICT	qt_dias_atend_w
;

select 	count(*)
into STRICT	qt_agendas_w
from 	agenda_paciente
where	cd_agenda	 	= cd_agenda_p
and	dt_agenda		= trunc(dt_agenda_p,'dd')
and	hr_inicio		= trunc(dt_agenda_p,'mi')
and	ie_status_agenda	= CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  'R'  ELSE 'N' END;

if (qt_agendas_w > 0) then

	ds_agenda_w		:= substr(obter_nome_agenda(cd_agenda_p),1,50);
	hr_inicio_w		:= substr(to_char(trunc(dt_agenda_p,'mi'),'dd/mm/yyyy hh24:mi'),1,21);

	select	substr(obter_valor_dominio(83, CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  'R'  ELSE 'N' END ),1,100)
	into STRICT	ds_status_agenda_w
	;

	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(182974,'HR_INICIO_W='||to_char(hr_inicio_w)||';DS_AGENDA_W='||to_char(ds_agenda_w)||';DS_STATUS_AGENDA_W='||to_char(ds_status_agenda_w));

end if;

/* Gerando o novo horario */

select	nextval('agenda_paciente_seq')
into STRICT	nr_sequencia_W
;

nr_seq_agenda_p	:= nr_sequencia_W;

--begin Retirado tfferretti OS 470990
insert into agenda_paciente(
	nr_sequencia,
	cd_agenda,
	cd_pessoa_fisica,
	dt_agenda,
	hr_inicio,
	nr_minuto_duracao,
	nm_usuario,
	cd_convenio,
	cd_categoria,
	dt_atualizacao,
	cd_medico,
	ie_status_agenda,
	nr_seq_classif_agenda,
	dt_agendamento,
	nr_seq_proc_interno,
	ie_equipamento,
	cd_procedimento,
	ie_origem_proced,
	nr_telefone,
	ie_reserva_leito,
	cd_tipo_anestesia,
	ie_lado, 
	nm_paciente,
	nm_usuario_orig,
	qt_idade_paciente,
	qt_idade_mes,
	ds_observacao,
	ie_autorizacao,
	nm_pessoa_contato,
	qt_diaria_prev,
	hr_revisada,
	cd_plano,
	ie_carater_cirurgia,
	cd_procedencia,
	ie_tipo_agendamento
	)
values (
	nr_sequencia_w,
	cd_agenda_p,
	cd_pessoa_fisica_p,
	trunc(dt_agenda_p,'dd'),
	trunc(dt_agenda_p,'mi'),
	qt_duracao_p,
	nm_usuario_p,
	cd_convenio_ww,
	cd_categoria_w,
	clock_timestamp(),
	cd_medico_p,
	CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  'R'  ELSE 'N' END ,
	nr_seq_classif_w,
	clock_timestamp(),
	nr_seq_proc_interno_p,
	'N',
	cd_procedimento_p,
	ie_origem_proced_p,
	nr_telefone_w,
	ie_reserva_leito_w,
	cd_tipo_anestesia_w,
	ie_lado_p,
	CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  nm_paciente_p  ELSE substr(obter_nome_pf(cd_pessoa_fisica_p),1,100) END ,
	nm_usuario_p,
	qt_idade_paciente_w,
	qt_idade_mes_w,
	substr(ds_observacao_p,1,4000),
	coalesce(ie_status_autor_w, 'PA'),
	nm_pessoa_contato_w,
	CASE WHEN ie_gerar_dias_prev_w='S' THEN qt_diaria_prev_w  ELSE null END ,
	trunc(dt_agenda_p,'mi'),
	cd_plano_w,
	ie_carater_cirurgia_p,
	cd_procedencia_p,
	'EA');
--exception

	--when others then

	--WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(183220);

--end;
  if (obtain_user_locale(wheb_usuario_pck.get_nm_usuario) = 'es_CO' and (dt_desejada_p IS NOT NULL AND dt_desejada_p::text <> '')) then
    insert into agenda_paciente_auxiliar(
                nr_sequencia,
                nr_seq_agenda,
                nm_usuario,
                dt_atualizacao,
                dt_desejada_agendamento)
                values (
                nextval('agenda_paciente_auxiliar_seq'),
                nr_sequencia_w,
                wheb_usuario_pck.get_nm_usuario,
                clock_timestamp(),
                dt_desejada_p
    );
  end if;

commit;

if (nr_atendimento_p > 0) then
	CALL gerar_agenda_encaixe_atend(nr_atendimento_p,nr_sequencia_W,'E',nm_usuario_p);
end if;

select	coalesce(max(cd_convenio),0)
into STRICT	cd_convenio_w
from	agenda_paciente
where	nr_sequencia = nr_sequencia_W;

ds_orientacoes_w := gerar_orientacao(nr_seq_proc_interno_p, cd_convenio_w, nm_usuario_p, ds_orientacoes_w);

SELECT * FROM gerar_dados_pre_agenda(	cd_procedimento_p, ie_origem_proced_p, nr_sequencia_W, nr_seq_proc_interno_p, cd_medico_p, cd_pessoa_fisica_p, nm_usuario_p, cd_convenio_w, null, ds_orientacoes_w, cd_estabelecimento_p, ie_gerar_equip_w, ie_gerar_cme_w, ie_gerar_opme_w, ie_gerar_servico_w, ie_gerar_caixa_opme_w, ds_erro_w, ds_erro_2_w) INTO STRICT ds_erro_w, ds_erro_2_w;
ds_erro_2_p		:= substr(ds_erro_2_w,1,255);

--gerar_dados_pre_agenda(cd_procedimento_p, ie_origem_proced_p, nr_sequencia_W, nr_seq_proc_interno_p, cd_medico_p, cd_pessoa_fisica_p, nm_usuario_p, cd_convenio_w, 'Encaixe', cd_estabelecimento_p, 'S', 'S', 'S', 'S', 'S', ds_erro_w,ds_erro_2_w);
if (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') then
	begin
	select	a.nr_seq_proc_interno,
		substr(obter_Sexo_pf(cd_pessoa_fisica,'C'),1,60),
		ie_status_agenda,
		substr(ds_observacao,1,255)
	into STRICT	cd_seq_proc_interno_w,
		ie_sexo_w,
		ie_status_agenda_w,
		ds_observacao_w
	from	agenda_paciente a
	where	nr_sequencia = nr_seq_agenda_p;
	end;
end if;

open c01;
loop
fetch c01 into	
	nr_seq_evento_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin		
	CALL gerar_evento_agenda_trigger(	nr_seq_evento_w,
					nr_atendimento_p,
					cd_pessoa_fisica_p,
					null,
					nm_usuario_p,
					cd_agenda_p,
					dt_agenda_p, 
					cd_medico_p, 
					cd_procedimento_p,
					ie_origem_proced_p, 
					null,
					null,
					null,
					null,
					cd_convenio_w,
					null,
					'N',
					nr_seq_agenda_p,
					null,
					null,
					null,
					null,
					ds_observacao_w);
	end;
end loop;
close c01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_encaixe_atend_agenda ( dt_agenda_p timestamp, qt_duracao_p bigint, cd_pessoa_fisica_p text, nm_paciente_p text, nr_atendimento_p bigint, cd_medico_p text, nr_seq_proc_interno_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, ie_lado_p text, cd_agenda_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ds_observacao_p text, nm_pessoa_contato_p text, nr_seq_agenda_p INOUT bigint, ie_carater_cirurgia_p text default null, cd_procedencia_p text default null, ds_erro_2_p INOUT text DEFAULT NULL, nr_seq_classif_agenda_p bigint default null, dt_desejada_p timestamp default null) FROM PUBLIC;

