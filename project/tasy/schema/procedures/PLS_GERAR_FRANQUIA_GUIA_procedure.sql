-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_franquia_guia ( nr_seq_guia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


_ora2pg_r RECORD;
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Calcular a franquia da autorizacao
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ x ] Tasy (Delphi/Java) [ x ] Portal [  ] Relatorios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atencao:  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/				
				
cd_procedimento_w		bigint;
cd_area_w			bigint;
cd_especialidade_w		bigint;
cd_grupo_w			bigint;
cd_porte_anestesico_w		varchar(10);
cd_edicao_amb_w			integer;
cd_medico_solicitante_w		varchar(10);
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
cd_guia_referencia_w		varchar(20);

dt_solicitacao_w		timestamp;
dt_ult_vigencia_w		timestamp;

ie_origem_w			bigint;
ie_origem_proced_w		bigint;
ie_tipo_despesa_w		varchar(2);
ie_liberado_w			varchar(2);
ie_tipo_guia_w			varchar(4);
ie_preco_informado_w		varchar(1);
ie_estrut_mat_w			varchar(1);
ie_tipo_contratacao_w		varchar(2);
ie_tipo_atend_tiss_w		varchar(2);
ie_autorizacao_espec_w		varchar(10)	:= 'N';
ie_carater_internacao_w		varchar(10);

nr_seq_estrut_mat_w		bigint;
nr_seq_guia_proc_w		bigint;
nr_seq_guia_mat_w		bigint;
nr_seq_material_w		bigint;
nr_seq_franquia_est_w		bigint;
nr_seq_franq_proc_w		bigint;
nr_seq_franq_mat_w		bigint;
nr_seq_regra_franq_w		bigint;
nr_seq_clinica_w		bigint;
nr_aux_regra_w			bigint;
nr_seq_regra_autogerado_w	bigint;
nr_seq_outorgante_w		bigint;
nr_seq_tipo_atendimento_w	bigint;
nr_seq_material_preco_w		bigint;
nr_seq_segurado_w		bigint;
nr_seq_prestador_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_tipo_acomodacao_w	bigint;
nr_seq_classificacao_prest_w	bigint;
nr_seq_categoria_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_regra_w			bigint;
nr_seq_prest_fornec_w		bigint;
qt_autorizacao_espec_w		bigint;
nr_seq_plano_espec_w		bigint;
nr_seq_estrut_regra_w		bigint;
qt_autorizada_w			pls_guia_plano_proc.qt_autorizada%type;
qt_franquias_guia_w		bigint;
qt_registros_w			bigint;
tx_franquia_w			double precision;
vl_maximo_w			double precision	:= 0;
vl_franquia_w			double precision	:= 0;
vl_franquia_ww			double precision	:= 0;
vl_procedimento_w		double precision;
vl_material_w			double precision;
vl_liberado_w			double precision;
vl_franquia_unit_w		double precision;
vl_custo_operacional_w		double precision;
vl_anestesista_w		double precision;
vl_medico_w			double precision;
vl_filme_w			double precision;
vl_auxiliares_w			double precision;
vl_material_simpro_w		double precision;
vl_material_brasindice_w	double precision;
vl_material_tabela_w		double precision;
dt_procedimento_w		timestamp	:= null;
cd_moeda_autogerado_w		smallint;
vl_ch_honorarios_w		cotacao_moeda.vl_cotacao%type;
vl_ch_custo_oper_w		cotacao_moeda.vl_cotacao%type;
vl_ch_custo_filme_w		cotacao_moeda.vl_cotacao%type;
vl_ch_anestesista_w		cotacao_moeda.vl_cotacao%type;
dados_regra_preco_proc_w	pls_cta_valorizacao_pck.dados_regra_preco_proc;
dados_regra_preco_material_w	pls_cta_valorizacao_pck.dados_regra_preco_material;
dados_guia_w				pls_cta_valorizacao_pck.dados_guia;
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_conta.ie_saude_ocupacional%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		coalesce(qt_autorizada,qt_solicitada)
	from	pls_guia_plano_proc
	where	nr_seq_guia	= nr_seq_guia_p;
	
C02 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_material,
		coalesce(qt_autorizada,qt_solicitada)
	from	pls_guia_plano_mat
	where	nr_seq_guia	= nr_seq_guia_p;

C03 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_franquia_est,
		vl_franquia,
		tx_franquia,
		vl_maximo
	from	pls_franquia_regra
	where	dt_solicitacao_w	between(dt_inicio_vigencia) and (coalesce(dt_fim_vigencia, clock_timestamp()))
	and	nr_seq_plano		= nr_seq_plano_w;
	
C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_liberado
	from	pls_franquia_proc	a,
		pls_franquia_estrutura	b
	where	a.nr_seq_franquia_est				= b.nr_sequencia
	and	b.ie_situacao					= 'A'
	and	b.nr_sequencia					= nr_seq_franquia_est_w
	and	coalesce(a.nr_seq_clinica,nr_seq_clinica_w)		= nr_seq_clinica_w
	and	coalesce(a.cd_procedimento, cd_procedimento_w)	= cd_procedimento_w
	and	coalesce(a.ie_origem_proced, ie_origem_proced_w) 	= ie_origem_proced_w
	and	coalesce(a.cd_grupo_proc, cd_grupo_w)		= cd_grupo_w
	and	coalesce(a.cd_especialidade, cd_especialidade_w)	= cd_especialidade_w
	and	coalesce(a.cd_area_procedimento, cd_area_w) 		= cd_area_w
	order by
		a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.cd_procedimento;

C05 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_liberado,
		a.nr_seq_estrut_mat
	from	pls_franquia_mat	a,
		pls_franquia_estrutura	b
	where	a.nr_seq_franquia_est				= b.nr_sequencia
	and	b.ie_situacao					= 'A'
	and	b.nr_sequencia					= nr_seq_franquia_est_w
	and	coalesce(a.ie_tipo_despesa,ie_tipo_despesa_w)	= ie_tipo_despesa_w
	and	coalesce(a.nr_seq_material, nr_seq_material_w) 	= nr_seq_material_w
	order by
		a.nr_seq_estrut_mat,
		a.nr_seq_material;


BEGIN

select	count(1)
into STRICT	qt_franquias_guia_w
from	pls_franquia_guia
where	nr_seq_guia	= nr_seq_guia_p;

if (qt_franquias_guia_w	> 0)  then
	delete	from pls_franquia_guia
	where	nr_seq_guia	= nr_seq_guia_p;
end if;

select	max(a.dt_solicitacao),
	max(a.nr_seq_segurado),
	max(a.cd_medico_solicitante),
	max(a.nr_seq_prestador),
	max(a.nr_seq_plano),
	max(a.nr_seq_tipo_acomodacao),
	max(coalesce(a.nr_seq_clinica, 0)),
	max(a.ie_tipo_guia),
	max(a.ie_tipo_atend_tiss),
	max(a.ie_carater_internacao),
	max(a.ie_tipo_consulta),
	max(a.ie_regime_atendimento),
	max(a.ie_saude_ocupacional)
into STRICT	dt_solicitacao_w,
	nr_seq_segurado_w,
	cd_medico_solicitante_w,
	nr_seq_prestador_w,
	nr_seq_plano_w,
	nr_seq_tipo_acomodacao_w,
	nr_seq_clinica_w,
	ie_tipo_guia_w,
	ie_tipo_atend_tiss_w,
	ie_carater_internacao_w,
	dados_guia_w.ie_tipo_consulta_guia,
	ie_regime_atendimento_w,
	ie_saude_ocupacional_w
from	pls_guia_plano a
where	a.nr_sequencia = nr_seq_guia_p;

/*Obter sequencia da autorizacao  especial*/

select	max(nr_sequencia)
into STRICT	nr_seq_plano_espec_w
from	pls_guia_plano
where	cd_guia	= cd_guia_referencia_w;
/*Obter se existe material especial*/

select	count(1)
into STRICT	qt_autorizacao_espec_w
from	pls_solic_lib_mat_med	a,
	pls_guia_plano		b
where	a.nr_seq_guia	= b.nr_sequencia
and	b.nr_sequencia	= nr_seq_plano_espec_w;

if (qt_autorizacao_espec_w	> 0) then
	ie_autorizacao_espec_w	:= 'S';
end if;

/* Obter dados do plano */

begin
select	ie_tipo_contratacao,
	nr_seq_outorgante
into STRICT	ie_tipo_contratacao_w,
	nr_seq_outorgante_w
from	pls_plano
where	nr_sequencia	= nr_seq_plano_w;
exception
when others then
	ie_tipo_contratacao_w	:= null;
	nr_seq_outorgante_w	:= null;
end;

/* Obter dados do prestador */

begin
select	nr_seq_classificacao
into STRICT	nr_seq_classificacao_prest_w
from	pls_prestador
where	nr_sequencia = nr_seq_prestador_w;
exception
when others then
	nr_seq_classificacao_prest_w := null;
end;

/* Obter a categoria do tipo de acomodacao */

if (nr_seq_tipo_acomodacao_w IS NOT NULL AND nr_seq_tipo_acomodacao_w::text <> '') then
	select	max(nr_seq_categoria)
	into STRICT	nr_seq_categoria_w
	from	pls_regra_categoria
	where	nr_seq_tipo_acomodacao	= nr_seq_tipo_acomodacao_w;
end if;

/*Obter dados segurado*/

begin
select	coalesce(nr_seq_contrato,0),
	pls_obter_conv_cat_segurado(nr_sequencia, 1),
	pls_obter_conv_cat_segurado(nr_sequencia, 2)
into STRICT	nr_seq_contrato_w,
	cd_convenio_w,
	cd_categoria_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_w;
exception
when others then
	nr_seq_contrato_w	:= null;
	cd_convenio_w		:= null;
	cd_categoria_w		:= null;
end;

begin
select	nr_sequencia
into STRICT	nr_seq_tipo_atendimento_w
from	pls_tipo_atendimento
where	somente_numero(cd_tiss)	= ie_tipo_atend_tiss_w;
exception
when others then
	nr_seq_tipo_atendimento_w	:= null;
end;

open C01;
loop
fetch C01 into	
	nr_seq_guia_proc_w,
	cd_procedimento_w,
	ie_origem_w,
	qt_autorizada_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w;
			
	dados_regra_preco_proc_w := pls_define_preco_proc(	cd_estabelecimento_p, nr_seq_prestador_w, nr_seq_categoria_w, dt_solicitacao_w, null, cd_procedimento_w, ie_origem_proced_w, nr_seq_tipo_acomodacao_w, null, nr_seq_clinica_w, nr_seq_plano_w, 'F', nr_seq_contrato_w, 0, nr_seq_guia_proc_w, 'N', cd_convenio_w, cd_categoria_w, ie_tipo_contratacao_w, 0, nr_seq_segurado_w, null, null, nr_seq_classificacao_prest_w, cd_medico_solicitante_w, 'N', null, null, 'A', 'X', null, ie_carater_internacao_w, dt_procedimento_w, null, null, null, dados_guia_w, null, dados_regra_preco_proc_w, null, null, ie_regime_atendimento_w, null, ie_saude_ocupacional_w);
				
	vl_procedimento_w		:= dados_regra_preco_proc_w.vl_procedimento;
	vl_custo_operacional_w		:= dados_regra_preco_proc_w.vl_custo_operacional;
	vl_anestesista_w		:= dados_regra_preco_proc_w.vl_anestesista;
	vl_medico_w			:= dados_regra_preco_proc_w.vl_medico;
	vl_filme_w			:= dados_regra_preco_proc_w.vl_filme;
	vl_auxiliares_w			:= dados_regra_preco_proc_w.vl_auxiliares;
	nr_seq_regra_w			:= dados_regra_preco_proc_w.nr_sequencia;
	cd_edicao_amb_w			:= dados_regra_preco_proc_w.cd_edicao_amb;
	ie_preco_informado_w		:= dados_regra_preco_proc_w.ie_valor_informado;
	cd_porte_anestesico_w		:= dados_regra_preco_proc_w.cd_porte_anestesico;
	nr_aux_regra_w			:= dados_regra_preco_proc_w.nr_auxiliares;
	nr_seq_regra_autogerado_w	:= dados_regra_preco_proc_w.nr_seq_regra_autogerado;
	cd_moeda_autogerado_w		:= dados_regra_preco_proc_w.cd_moeda_autogerado;
	vl_ch_honorarios_w		:= dados_regra_preco_proc_w.vl_ch_honorarios;
	vl_ch_custo_oper_w		:= dados_regra_preco_proc_w.vl_ch_custo_oper;
	vl_ch_custo_filme_w		:= dados_regra_preco_proc_w.vl_ch_custo_filme;
	vl_ch_anestesista_w		:= dados_regra_preco_proc_w.vl_ch_anestesista;
	
	vl_liberado_w	:= (vl_procedimento_w * qt_autorizada_w);
	open C03;
	loop
	fetch C03 into	
		nr_seq_regra_franq_w,
		nr_seq_franquia_est_w,
		vl_franquia_w,
		tx_franquia_w,
		vl_maximo_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		open C04;
		loop
		fetch C04 into	
			nr_seq_franq_proc_w,
			ie_liberado_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			if (coalesce(ie_liberado_w,'N') = 'S') then
				select	count(1)
				into STRICT	qt_registros_w
				from	pls_franquia_guia
				where	nr_seq_guia_proc	= nr_seq_guia_proc_w;
		
				if (qt_registros_w = 0) then				
					vl_franquia_unit_w	:= ((coalesce(vl_procedimento_w,0) * tx_franquia_w) / 100);

					if (vl_franquia_w	> 0) and (coalesce(tx_franquia_w::text, '') = '') and (coalesce(vl_maximo_w::text, '') = '') then
						vl_franquia_w	:= ((vl_franquia_w) * qt_autorizada_w);
					
					elsif (vl_maximo_w	> 0) and (vl_franquia_unit_w > vl_maximo_w) then
						vl_franquia_ww := (vl_maximo_w * qt_autorizada_w);
						vl_franquia_unit_w := vl_maximo_w;
					else
						vl_franquia_ww	:= ((coalesce(vl_liberado_w,0) * tx_franquia_w) / 100);
					end if;

					if (coalesce(vl_franquia_ww,0) > 0) or (coalesce(vl_franquia_w,0)	> 0) then					
						insert	into pls_franquia_guia(nr_sequencia, dt_atualizacao, nm_usuario,
							 nr_seq_franquia, nr_seq_guia, nr_seq_guia_proc,
							 vl_franquia)
						values (nextval('pls_franquia_guia_seq'), clock_timestamp(), nm_usuario_p,
							 nr_seq_regra_franq_w, nr_seq_guia_p, nr_seq_guia_proc_w,
							 coalesce(vl_franquia_w,vl_franquia_ww));
					end if;
				end if;
			end if;
			end;
		end loop;
		close C04;
		end;
	end loop;
	close C03;
	end;
end loop;
close C01;

open C02;
loop
fetch C02 into	
	nr_seq_guia_mat_w,
	nr_seq_material_w,
	qt_autorizada_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	
	begin
	select	nr_seq_prest_fornec
	into STRICT	nr_seq_prest_fornec_w
	from	pls_guia_plano_mat
	where	nr_sequencia	= nr_seq_guia_mat_w;
	exception
	when others then
		nr_seq_prest_fornec_w	:= null;
	end;
	
	begin
	select	ie_tipo_despesa,
		nr_seq_estrut_mat
	into STRICT	ie_tipo_despesa_w,
		nr_seq_estrut_mat_w
	from	pls_material
	where	nr_sequencia	= nr_seq_material_w;
	exception
	when others then
		ie_tipo_despesa_w	:= null;
	end;
	
	SELECT * FROM pls_define_preco_material(	cd_estabelecimento_p, nr_seq_prestador_w, dt_solicitacao_w, nr_seq_material_w, 4, ie_tipo_despesa_w, null, 'F', nr_seq_outorgante_w, nr_seq_segurado_w, null, nr_seq_prest_fornec_w, nr_seq_categoria_w, nr_seq_tipo_acomodacao_w, nr_seq_tipo_atendimento_w, nr_seq_clinica_w, ie_tipo_guia_w, ie_autorizacao_espec_w, nr_seq_plano_espec_w, 'S', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, vl_material_w, dt_ult_vigencia_w, nr_seq_material_preco_w, vl_material_simpro_w, vl_material_brasindice_w, vl_material_tabela_w, dados_regra_preco_material_w, null, ie_regime_atendimento_w, ie_saude_ocupacional_w) INTO STRICT _ora2pg_r;
 vl_material_w := _ora2pg_r.vl_material_p; dt_ult_vigencia_w := _ora2pg_r.dt_ult_vigencia_p; nr_seq_material_preco_w := _ora2pg_r.nr_seq_material_preco_p; vl_material_simpro_w := _ora2pg_r.vl_material_simpro_p; vl_material_brasindice_w := _ora2pg_r.vl_material_brasindice_p; vl_material_tabela_w := _ora2pg_r.vl_material_tabela_p; dados_regra_preco_material_w := _ora2pg_r.dados_regra_preco_material_p;
					
	nr_seq_regra_w	:= dados_regra_preco_material_w.nr_sequencia;
	vl_liberado_w	:= (vl_material_w * qt_autorizada_w);
	open C03;
	loop
	fetch C03 into	
		nr_seq_regra_franq_w,
		nr_seq_franquia_est_w,
		vl_franquia_w,
		tx_franquia_w,
		vl_maximo_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		open C05;
		loop
		fetch C05 into	
			nr_seq_franq_mat_w,
			ie_liberado_w,
			nr_seq_estrut_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin
			ie_estrut_mat_w	:= 'S';
			if (nr_seq_estrut_regra_w IS NOT NULL AND nr_seq_estrut_regra_w::text <> '') then
				if (pls_obter_se_mat_estrutura(nr_seq_material_w, nr_seq_estrut_regra_w) = 'N') then
					ie_estrut_mat_w	:= 'N';
				end if;
			end if;	
			
			if (coalesce(ie_liberado_w,'N') = 'S') and (ie_estrut_mat_w = 'S') then
				select	count(1)
				into STRICT	qt_registros_w
				from	pls_franquia_guia
				where	nr_seq_guia_mat	= nr_seq_guia_mat_w;
				
				if (qt_registros_w = 0) then				
					vl_franquia_unit_w	:= ((coalesce(vl_material_w,0) * tx_franquia_w) / 100);
					
					if (vl_franquia_w	> 0) and (coalesce(tx_franquia_w::text, '') = '') and (coalesce(vl_maximo_w::text, '') = '') then
						vl_franquia_w	:= ((vl_franquia_w) * qt_autorizada_w);
						
					elsif (vl_maximo_w	> 0) and (vl_franquia_unit_w > vl_maximo_w) then
						vl_franquia_ww := (vl_maximo_w * qt_autorizada_w);
						vl_franquia_unit_w := vl_maximo_w;
					else
						vl_franquia_ww	:= ((coalesce(vl_liberado_w,0) * tx_franquia_w) / 100);
					end if;

					if (coalesce(vl_franquia_ww,0) > 0) or (coalesce(vl_franquia_w,0)	> 0) then
						insert	into pls_franquia_guia(nr_sequencia, dt_atualizacao, nm_usuario,
							 nr_seq_franquia, nr_seq_guia, nr_seq_guia_mat,
							 vl_franquia)
						values (nextval('pls_franquia_guia_seq'), clock_timestamp(), nm_usuario_p,
							 nr_seq_regra_franq_w, nr_seq_guia_p, nr_seq_guia_mat_w,
							 coalesce(vl_franquia_w,vl_franquia_ww));
					end if;
				end if;
			end if;
			end;
		end loop;
		close C05;
		end;
	end loop;
	close C03;
	end;
end loop;
close C02;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_franquia_guia ( nr_seq_guia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

