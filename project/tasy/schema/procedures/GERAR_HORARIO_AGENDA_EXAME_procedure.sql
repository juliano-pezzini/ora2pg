-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_horario_agenda_exame (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text) AS $body$
DECLARE


/* variaveis de controle horarios */

ie_tipo_horario_w		varchar(1);
nr_seq_horario_w		bigint;
nr_seq_agenda_w		agenda_paciente.nr_sequencia%type;
hr_horario_w		timestamp;
hr_inicial_dia_w		timestamp;
hr_final_dia_w		timestamp;
hr_inicial_intervalo_w	timestamp;
hr_final_intervalo_w		timestamp;
nr_minuto_duracao_w	bigint;
nr_minuto_orig_w	bigint := 0;
nr_minuto_min_w		bigint := 0;
ie_dia_semana_w		integer;
ie_feriado_w		varchar(1);
nr_seq_especial_w	bigint;
ie_horario_adicional_w	varchar(1);
ie_horario_w		varchar(1);
ie_bloqueio_w		varchar(1) := 'N';
nr_prioridade_w		bigint;

--Transporte Exames
qt_regra_w		bigint;
nr_seq_regra_transp_w	bigint;

/* variaveis de controle sobra horario */

hr_horario_inicial_w		timestamp;
hr_horario_final_w		timestamp;
nr_minuto_horario_w		bigint;
hr_horario_sobra_w		timestamp;
nr_minuto_sobra_w		bigint;
qt_horario_sobra_w		bigint;
cd_medico_exec_sobra_w		varchar(10);
nr_seq_classif_sobra_w		bigint;

/* variaveis de registro */

cd_turno_w		varchar(1);
nr_seq_medico_exec_w	bigint;
cd_medico_w		varchar(10);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
nr_seq_classif_w		bigint;
nr_seq_classif_alter_w		bigint;
nr_seq_sala_w		bigint;
ds_observacao_w		varchar(255);
ds_observacao_adic_w	agenda_horario.ds_observacao_adic%type;
DS_OBS_HOR_ADIC_w		agenda_horario.ds_observacao_adic%type;
cd_medico_executor_w	varchar(10);
ie_medico_executor_w	varchar(01)	:= 'N';
cd_procedencia_w	integer;
qt_agenda_w			smallint;
ie_gerar_hor_agenda_ant_w	varchar(1);
cd_convenio_w		integer;
cd_categoria_w		varchar(10);

ie_gerar_hor_bloq_w	varchar(1)	:= 'N';
ie_excluir_livres_w	varchar(5) 	:= 'N';
ie_autorizacao_w	varchar(5);
ie_tipo_consist_horario_w	varchar(2);
ie_gerar_hor_falta_w	varchar(1);
nr_dias_passados_hor_w	smallint;
cd_estabelecimento_w    agenda.cd_estabelecimento%type;

hr_horario_ant_sobra_w	timestamp;
ds_erro_w		varchar(255);
ie_limpa_obs_especial_w	varchar(1);
ie_gerar_nome_w		varchar(1);

ie_origem_dados_w	varchar(10);

dt_hor_adic_w		timestamp;
nr_min_dur_adic_w	bigint;
nr_seq_transporte_w	bigint;
ie_lado_w		varchar(1);
ie_forma_agendamento_w	smallint;	
ds_obs_bloq_w		varchar(255);
ie_gerar_obs_bloq_w	varchar(1);

qt_gera_horario_w	bigint;
ie_manter_livres_w	varchar(1);
ie_gerar_horario_w	varchar(1) := 'S';
qt_dia_inicial_w				bigint;
qt_dia_final_w					bigint;
qt_dia_filtro_ini_w				bigint;
qt_dia_filtro_fim_w				bigint;
nm_tabela_w				INTEGRIDADE_REFERENCIAL.NM_TABELA%TYPE;
nm_integridade_ref_w	INTEGRIDADE_REFERENCIAL.NM_INTEGRIDADE_REFERENCIAL%TYPE;
ds_contraint_name_w		USER_CONS_COLUMNS.COLUMN_NAME%TYPE;
ds_comando_w			varchar(4000);
ie_Agendamento_w		varchar(1);

ds_dtAgenda_w			varchar(255);
dt_inicio_sobra_w	timestamp;
nr_seq_regra_bloq_w		agenda_bloqueio_geral.nr_sequencia%type;
ie_existe_bloqueio_w		varchar(10) := 'S';
ie_motivo_bloqueio_w		agenda_bloqueio_geral.ie_motivo_bloqueio%type;

ie_liberado_w 	varchar(1) := 'N';
cd_pais_w 		smallint;

/* obter horarios livres */

c01 CURSOR FOR
SELECT	'N' ie_horario,
	nr_sequencia,
	hr_inicial,
	hr_final,
	hr_inicial_intervalo,
	hr_final_intervalo,
	nr_minuto_intervalo,
	nr_seq_medico_exec,
	cd_medico,
	cd_procedimento,
	ie_origem_proced,
	nr_seq_proc_interno,
	nr_seq_classif_agenda,
	nr_seq_sala,
	ds_observacao,
	cd_procedencia,
	cd_convenio,
	cd_categoria,
	coalesce(nr_prioridade,9999) nr_prioridade,
	nr_seq_transporte,
	ie_lado,
	ie_forma_agendamento,
	ds_observacao_adic
from 	agenda_horario
where 	cd_agenda = cd_agenda_p
and	to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss')
and	((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p)))
and	((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p)))
and	nr_minuto_intervalo > 0
and	((dt_dia_semana = ie_dia_semana_w) or ((dt_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w, qt_dia_filtro_fim_w))))
and	((((ie_feriado_w <> 'S') and (coalesce(ie_feriado,'X') <> 'F')) or (coalesce(ie_feriado,obter_se_agenda_feriado(cd_agenda_p)) = 'S')) or (ie_feriado = 'F' AND ie_feriado_w = 'S'))
and	((nr_seq_especial_w = 0) or (ie_horario_adicional_w = 'S'))
and	obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_agenda_p) = 'S'
and	((Obter_Semana_Dia_Agecons(dt_agenda_p,dt_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0))

union

SELECT	'E' ie_horario,
	nr_sequencia,
	hr_inicial,
	hr_final,
	hr_inicial_intervalo,
	hr_final_intervalo,
	nr_minuto_intervalo,
	nr_seq_medico_exec,
	cd_medico,
	coalesce(cd_procedimento,0),
	coalesce(ie_origem_proced,0),
	coalesce(nr_seq_proc_interno,0),
	nr_seq_classif_agenda,
	nr_seq_sala,
	--'' ds_observacao *** Rafael 3/3/8 OS81458 ***
	ds_observacao,
	null,
	null,
	null,
	9999 nr_prioridade,
	null,
	null,
	null,
	null
from	agenda_horario_esp
where 	cd_agenda = cd_agenda_p
and	to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss')
and	nr_minuto_intervalo > 0
and	((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))) or (coalesce(ie_dia_semana::text, '') = ''))
and dt_agenda_p between pkg_date_utils.start_of(dt_agenda,'DAY') and pkg_date_utils.end_of(coalesce(dt_agenda_fim,dt_agenda),'DAY')
order by
	nr_prioridade,1, 2;

/* obter dados sobra horario */

c02 CURSOR FOR
SELECT	to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'),
		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'),
		nr_minuto_intervalo,
		cd_procedencia,
		'1' ie_origem_dados,
		'S' ie_Agendamento,
		hr_inicial_intervalo,
		hr_final_intervalo
from 	agenda_horario
where 	cd_agenda = cd_agenda_p
and		to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss')
and		((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p)))
and		((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p)))
and		nr_minuto_intervalo > 0
and		((dt_dia_semana = ie_dia_semana_w) or ((dt_dia_semana = 9) and ie_dia_semana_w not in (qt_dia_filtro_ini_w, qt_dia_filtro_fim_w)))
and		((((ie_feriado_w <> 'S') and (coalesce(ie_feriado,'X') <> 'F')) or (coalesce(ie_feriado,obter_se_agenda_feriado(cd_agenda_p)) = 'S')) or (ie_feriado = 'F' AND ie_feriado_w = 'S'))
and		((nr_seq_especial_w = 0) or (ie_horario_adicional_w = 'S'))
and		obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_agenda_p) = 'S'

union

SELECT	to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'),
		to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'),
		nr_minuto_intervalo,
		null,
		'2' ie_origem_dados,
		coalesce(ie_agendamento, 'N') ie_agendamento,
		hr_inicial_intervalo,
		hr_final_intervalo
from 	agenda_horario_esp
where 	cd_agenda = cd_agenda_p
and		to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss')
and		nr_minuto_intervalo > 0
and		((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))) or (coalesce(ie_dia_semana::text, '') = ''))
and 	dt_agenda_p between pkg_date_utils.start_of(dt_agenda,'DAY') and pkg_date_utils.end_of(coalesce(dt_agenda_fim,dt_agenda),'DAY')
order by 1,2;

/* obter sobra horario */

c03 CURSOR FOR
SELECT	/*+index(b AGEPACI_UK)*/		b.hr_inicio hr_inicial,
		b.hr_inicio + b.nr_minuto_duracao / 1440 hr_final,
		((b.hr_inicio + b.nr_minuto_duracao / 1440) - b.hr_inicio) * 1440 nr_minuto_horario,
		b.cd_medico_exec,
		b.nr_seq_classif_agenda		
from	agenda a,
		agenda_paciente b
where	a.cd_agenda = b.cd_agenda
and		b.cd_agenda = cd_agenda_p
and		b.dt_agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86399/86400
and		a.ie_gerar_sobra_horario = 'S'
and		b.ie_status_agenda not in ('C','LF')
order by 1,2;
	
C04 CURSOR FOR
	SELECT	dt_horario,
		nr_minuto_duracao
	from	agenda_horario_adicional
	where	cd_agenda		= cd_agenda_p
	and	trunc(dt_horario) 	= trunc(dt_agenda_p)
	order by 1;
	
--Identificar inconsistencias de integridade referencial nos agendamentos com status Livre/Bloqueado(Onde e realizado o delete nos horarios)	
C05 CURSOR FOR
	SELECT	b.nm_tabela,
			b.nm_integridade_referencial	
	from	tabela_sistema a,
			integridade_referencial b	
	where	a.nm_tabela = b.nm_tabela_referencia
	and	a.nm_tabela = 'AGENDA_PACIENTE'
	order by 1;


BEGIN

select  obter_nr_seq_locale(wheb_usuario_pck.get_nm_usuario)
into STRICT    cd_pais_w
;

select  coalesce(max('S'),'N')
into STRICT    ie_liberado_w
from    tab_pais
where   nr_seq_tab_ref = 1033075
and		cd_pais = cd_pais_w;

ds_dtAgenda_w := 'to_date('' ' || to_char(dt_agenda_p, 'dd/mm/yyyy hh24:mi:ss') || ' '', ''dd/mm/yyyy hh24:mi:ss'')';

/*select  decode(count(*),0,'N','S')
into	ie_manter_livres_w
from    parametro_agenda
where	nvl(ie_forma_excluir_exame,'N')       = 'S';*/
select	coalesce(max(ie_gerar_hor_bloq),'N'),
	    max(ie_tipo_consist_horario),
        coalesce(max(nr_dias_passados_hor),0),
		max(cd_estabelecimento)
into STRICT	ie_gerar_hor_bloq_w,
        ie_tipo_consist_horario_w,
        nr_dias_passados_hor_w,
		cd_estabelecimento_w
from	agenda
where	cd_agenda = cd_agenda_p;

begin
select	ie_forma_excluir_exame
into STRICT	ie_manter_livres_w
from	parametro_agenda
where   cd_estabelecimento = cd_estabelecimento_w;
exception
	when others then
	select	coalesce(max(ie_forma_excluir_exame),'N')
	into STRICT	ie_manter_livres_w
	from	parametro_agenda
	where   cd_estabelecimento = cd_estabelecimento_p;
end;

qt_dia_inicial_w	:= 2;
qt_dia_final_w		:= 6;
qt_dia_filtro_ini_w	:= 7;
qt_dia_filtro_fim_w	:= 1;

if (ie_manter_livres_w	in ('S','E')) then
	if (trunc(dt_Agenda_p)	< trunc(clock_timestamp())) then
		qt_gera_horario_w	:= 1;
	else
		begin
		select 	1
		into STRICT 	qt_gera_horario_w
		from 	agenda_controle_horario
		where 	cd_agenda = cd_agenda_p
		and		dt_agenda = trunc(dt_Agenda_p)  LIMIT 1;
		exception
		when others then
			qt_gera_horario_w	:= 0;
		end;			
	end if;
	if (qt_gera_horario_w	> 0) and
		((trunc(dt_Agenda_p)	<= trunc(clock_timestamp())) and (ie_manter_livres_w = 'E')) then
		begin
		
		if (ie_liberado_w = 'N') then
			delete	from	agenda_paciente a
			where	a.cd_agenda = cd_agenda_p
			and		a.hr_inicio < clock_timestamp()
			and		a.dt_Agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
			and		((a.ie_status_agenda = 'L')
			or		((a.ie_status_agenda = 'B')
			and (coalesce(a.dt_bloqueio::text, '') = '')));
		else
			delete	from 	agenda_paciente a
            where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
                                        FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and ap.hr_inicio < clock_timestamp() and ap.dt_Agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) and ((ap.ie_status_agenda = 'L') or ((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
		end if;
		
		exception
		when others then
			
			open C05;
			loop
			fetch C05 into	
				nm_tabela_w,
				nm_integridade_ref_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin
				
				SELECT	MAX(A.COLUMN_NAME)
				into STRICT	ds_contraint_name_w
				FROM	USER_CONS_COLUMNS A	
				WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
				
				if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
					ds_comando_w := ' 	update	' || nm_tabela_w || '
										set		' || ds_contraint_name_w || ' = null
										where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																					from	agenda_paciente a
																					where	a.cd_agenda = ' || cd_agenda_p || '
																					and		a.hr_inicio < sysdate
																					and		a.dt_Agenda between trunc( ' || ds_dtAgenda_w || ',''dd'') and (trunc(' || ds_dtAgenda_w || ',''dd'') + (86399/86400))
																					and		((a.ie_status_agenda = ''L'')
																					or		((a.ie_status_agenda = ''B'')
																					and		(a.dt_bloqueio is null))) ) ';					
					
					CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_EXAME', ds_comando_w);				
					
				end if;				
				
				end;
			end loop;
			close C05;
		
		end;
		
		commit;
	end if;
else
	qt_gera_horario_w	:= 0;
end if;

if (qt_gera_horario_w	= 0) then
	if (ie_manter_livres_w	in ('S','E')) then
		begin
		insert into agenda_controle_horario(nr_sequencia,
						cd_agenda,
						dt_agenda,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec)
				values (nextval('agenda_controle_horario_seq'),
						cd_agenda_p,
						trunc(dt_agenda_p),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p);

		commit;
		exception
		when others then
			qt_gera_horario_w	:= 1;
		end;
	end if;
	if (qt_gera_horario_w	= 0) then
		
		ie_medico_executor_w := Obter_Param_Usuario(820, 62, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_medico_executor_w);

		ie_gerar_hor_agenda_ant_w := Obter_Param_Usuario(820, 81, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_hor_agenda_ant_w);

		ie_autorizacao_w := Obter_Param_Usuario(820, 114, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_autorizacao_w);

		ie_limpa_obs_especial_w := Obter_Param_Usuario(820, 125, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_limpa_obs_especial_w);
	
		ie_gerar_nome_w := Obter_Param_Usuario(820, 162, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_nome_w);

		ie_gerar_hor_falta_w := Obter_Param_Usuario(820, 176, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_hor_falta_w);
		
		ie_excluir_livres_w := obter_param_usuario(820, 113, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_excluir_livres_w);

		
		/* obter dia semana */

		ie_dia_semana_w :=	obter_cod_dia_semana(dt_agenda_p);
		
		
		ie_gerar_obs_bloq_w := obter_param_usuario(820, 220, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_obs_bloq_w);

		/* verificar feriado */

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_feriado_w
		from 	feriado a, 
			agenda b
		where 	a.cd_estabelecimento = b.cd_estabelecimento
		and	a.dt_feriado = dt_agenda_p
		and 	b.cd_agenda = cd_agenda_p;

		/* obter dados horario especial (se existir) */

		select	coalesce(max(nr_sequencia),0),
			coalesce(max(ie_horario_adicional),'N')
		into STRICT	nr_seq_especial_w,
			ie_horario_adicional_w
		from	agenda_horario_esp
		where	cd_agenda = cd_agenda_p
		and	((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))) or (coalesce(ie_dia_semana::text, '') = ''))
		and dt_agenda_p between pkg_date_utils.start_of(dt_agenda,'DAY') and pkg_date_utils.end_of(coalesce(dt_agenda_fim,dt_agenda),'DAY');
		
		/* verificar se possui bloqueio */

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_existe_bloqueio_w
		from 	agenda_bloqueio
		where 	cd_agenda = cd_agenda_p;

		if (ie_manter_livres_w	= 'N') then
			if (ie_tipo_consist_horario_w IS NOT NULL AND ie_tipo_consist_horario_w::text <> '') then
				begin
				if (ie_tipo_consist_horario_w = 'N') then
					begin
					/* manter horarios livres */
					
					
					if (ie_liberado_w = 'N') then
						delete	from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						and	a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
						and	((a.ie_status_agenda = 'L')
						or	((a.ie_status_agenda = 'B')
						and (coalesce(a.dt_bloqueio::text, '') = '')));
					else
						delete	from 	agenda_paciente a
						where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
													FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and ap.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) and ((ap.ie_status_agenda = 'L') or	((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
					end if;
					
					exception
					when others then
						
						open C05;
						loop
						fetch C05 into	
							nm_tabela_w,
							nm_integridade_ref_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							
							SELECT	MAX(A.COLUMN_NAME)
							into STRICT	ds_contraint_name_w
							FROM	USER_CONS_COLUMNS A	
							WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
							
							if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
								ds_comando_w := ' 	update	' || nm_tabela_w || '
													set		' || ds_contraint_name_w || ' = null
													where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																								from	agenda_paciente a
																								where	a.cd_agenda = ' || cd_agenda_p || '
																								and	a.dt_agenda between trunc(' || ds_dtAgenda_w || ',''dd'') and (trunc(' || ds_dtAgenda_w || ',''dd'') + (86399/86400))
																								and	((a.ie_status_agenda = ''L'')
																								or	((a.ie_status_agenda = ''B'')
																								and	(a.dt_bloqueio is null))) ) ';
								
								CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_EXAME', ds_comando_w);				
								
							end if;				
							
							end;
						end loop;
						close C05;						
					
					end;					
					commit;
					
				elsif (ie_tipo_consist_horario_w = 'SP') then	
					begin

					if (ie_liberado_w = 'N') then
						delete	from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						and (trunc(dt_agenda_p) >= trunc(clock_timestamp()) and (a.hr_inicio >= clock_timestamp()))
						and	a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
						and	((a.ie_status_agenda = 'L')
						or	((a.ie_status_agenda = 'B')
						and (coalesce(a.dt_bloqueio::text, '') = '')));
					else
						delete	from 	agenda_paciente a
						where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
													FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and (trunc(dt_agenda_p) >= trunc(clock_timestamp()) and (ap.hr_inicio >= clock_timestamp())) and ap.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) and ((ap.ie_status_agenda = 'L') or	((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
					end if;
					
					exception
					when others then
						
						open C05;
						loop
						fetch C05 into	
							nm_tabela_w,
							nm_integridade_ref_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							
							SELECT	MAX(A.COLUMN_NAME)
							into STRICT	ds_contraint_name_w
							FROM	USER_CONS_COLUMNS A	
							WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
							
							if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
								ds_comando_w := ' 	update	' || nm_tabela_w || '
													set		' || ds_contraint_name_w || ' = null
													where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																								from	agenda_paciente a
																								where	a.cd_agenda = ' || cd_agenda_p || '
																								and	trunc(' || ds_dtAgenda_w || ') > sysdate
																								and	a.dt_agenda between trunc(' || ds_dtAgenda_w || ',''dd'') and (trunc(' || ds_dtAgenda_w || ',''dd'') + (86399/86400))
																								and	((a.ie_status_agenda = ''L'')
																								or	((a.ie_status_agenda = ''B'')
																								and	(a.dt_bloqueio is null))) ) ';
								
								CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_EXAME', ds_comando_w);				
								
							end if;				
							
							end;
						end loop;
						close C05;
					
					end;					
					commit;
				elsif (ie_tipo_consist_horario_w = 'PF') then	
					begin
				
					if (ie_liberado_w = 'N') then
						delete	from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						and	trunc(dt_agenda_p) > clock_timestamp()
						and 	a.dt_agenda between trunc(dt_agenda_p,'dd') and 	trunc(dt_agenda_p,'dd') + (1 - 1/86400)
						and	((a.ie_status_agenda = 'L')
						or	((a.ie_status_agenda = 'B')
						and (coalesce(a.dt_bloqueio::text, '') = '')));
					else
						delete	from 	agenda_paciente a
						where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
													FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and trunc(dt_agenda_p) > clock_timestamp() and ap.dt_agenda between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + (1 - 1/86400) and ((ap.ie_status_agenda = 'L') or	((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
					end if;
					
					exception
					when others then
						
						open C05;
						loop
						fetch C05 into	
							nm_tabela_w,
							nm_integridade_ref_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							
							SELECT	MAX(A.COLUMN_NAME)
							into STRICT	ds_contraint_name_w
							FROM	USER_CONS_COLUMNS A	
							WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
							
							if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
								ds_comando_w := ' 	update	' || nm_tabela_w || '
													set		' || ds_contraint_name_w || ' = null
													where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																								from	agenda_paciente a
																								where	a.cd_agenda = ' || cd_agenda_p || '
																								and	trunc(' || ds_dtAgenda_w || ') > sysdate
																								and 	a.dt_agenda between trunc(' || ds_dtAgenda_w || ',''dd'') and 	trunc(' || ds_dtAgenda_w || ',''dd'') + (1 - 1/86400)
																								and	((a.ie_status_agenda = ''L'')
																								or	((a.ie_status_agenda = ''B'')
																								and	(a.dt_bloqueio is null))) ) ';
								
								CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_EXAME', ds_comando_w);				
								
							end if;				
							
							end;
						end loop;
						close C05;
					
					end;					
					commit;
				end if;
				end;
			else
				begin
				/* manter horarios livres */

				if (ie_excluir_livres_w = 'N') then
					begin
				
					if (ie_liberado_w = 'N') then
						delete	from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						and	a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
						and	((a.ie_status_agenda = 'L')
						or	((a.ie_status_agenda = 'B')
						and (coalesce(a.dt_bloqueio::text, '') = '')));
					else
						delete	from 	agenda_paciente a
						where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
													FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and ap.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) and ((ap.ie_status_agenda = 'L') or	((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
					end if;
					
					exception
					when others then
						
						open C05;
						loop
						fetch C05 into	
							nm_tabela_w,
							nm_integridade_ref_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							
							SELECT	MAX(A.COLUMN_NAME)
							into STRICT	ds_contraint_name_w
							FROM	USER_CONS_COLUMNS A	
							WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
							
							if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
								ds_comando_w := ' 	update	' || nm_tabela_w || '
													set		' || ds_contraint_name_w || ' = null
													where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																								from	agenda_paciente a
																								where	a.cd_agenda = ' || cd_agenda_p || '
																								and	a.dt_agenda between trunc(' || ds_dtAgenda_w || ',''dd'') and (trunc(' || ds_dtAgenda_w || ',''dd'') + (86399/86400))
																								and	((a.ie_status_agenda = ''L'')
																								or	((a.ie_status_agenda = ''B'')
																								and	(a.dt_bloqueio is null))) ) ';
								
								CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_EXAME', ds_comando_w);				
								
							end if;				
							
							end;
						end loop;
						close C05;
					
					end;					
					commit;
				
				elsif (ie_excluir_livres_w = 'SP') then	
					begin

					if (ie_liberado_w = 'N') then
						delete from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p					
						and (trunc(dt_agenda_p) >= trunc(clock_timestamp()) and (a.hr_inicio >= clock_timestamp()))
						and	a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
						and	((a.ie_status_agenda = 'L')
						or	((a.ie_status_agenda = 'B')
						and (coalesce(a.dt_bloqueio::text, '') = '')));
					else
						delete	from 	agenda_paciente a
						where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
													FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and (trunc(dt_agenda_p) >= trunc(clock_timestamp()) and (ap.hr_inicio >= clock_timestamp())) and ap.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) and ((ap.ie_status_agenda = 'L') or	((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
					end if;
					
					exception
					when others then
						
						open C05;
						loop
						fetch C05 into	
							nm_tabela_w,
							nm_integridade_ref_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							
							SELECT	MAX(A.COLUMN_NAME)
							into STRICT	ds_contraint_name_w
							FROM	USER_CONS_COLUMNS A	
							WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
							
							if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
								ds_comando_w := ' 	update	' || nm_tabela_w || '
													set		' || ds_contraint_name_w || ' = null
													where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																								from	agenda_paciente a
																								where	a.cd_agenda = ' || cd_agenda_p || '
																								and	trunc(' || ds_dtAgenda_w || ') > sysdate
																								and	a.dt_agenda between trunc(' || ds_dtAgenda_w || ',''dd'') and (trunc(' || ds_dtAgenda_w || ',''dd'') + (86399/86400))
																								and	((a.ie_status_agenda = ''L'')
																								or	((a.ie_status_agenda = ''B'')
																								and	(a.dt_bloqueio is null))) ) ';
								
								CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_EXAME', ds_comando_w);				
								
							end if;				
							
							end;
						end loop;
						close C05;
					
					end;					
					commit;
				elsif (ie_excluir_livres_w = 'PF') then	
					begin

					if (ie_liberado_w = 'N') then
						delete	from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						and	trunc(dt_agenda_p) > clock_timestamp()
						and 	a.dt_agenda between trunc(dt_agenda_p,'dd') and 	trunc(dt_agenda_p,'dd') + (1 - 1/86400)
						and	((a.ie_status_agenda = 'L')
						or	((a.ie_status_agenda = 'B')
						and (coalesce(a.dt_bloqueio::text, '') = '')));
					else
						delete	from 	agenda_paciente a
						where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
													FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and trunc(dt_agenda_p) > clock_timestamp() and ap.dt_agenda between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + (1 - 1/86400) and ((ap.ie_status_agenda = 'L') or ((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
					end if;
					
					exception
					when others then
						
						open C05;
						loop
						fetch C05 into	
							nm_tabela_w,
							nm_integridade_ref_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							
							SELECT	MAX(A.COLUMN_NAME)
							into STRICT	ds_contraint_name_w
							FROM	USER_CONS_COLUMNS A	
							WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
							
							if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
								ds_comando_w := ' 	update	' || nm_tabela_w || '
													set		' || ds_contraint_name_w || ' = null
													where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																								from	agenda_paciente a
																								where	a.cd_agenda = ' || cd_agenda_p || '
																								and	trunc(' || ds_dtAgenda_w || ') > sysdate
																								and 	a.dt_agenda between trunc(' || ds_dtAgenda_w || ',''dd'') and 	trunc(' || ds_dtAgenda_w || ',''dd'') + (1 - 1/86400)
																								and	((a.ie_status_agenda = ''L'')
																								or	((a.ie_status_agenda = ''B'')
																								and	(a.dt_bloqueio is null))) ) ';
								
								CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_EXAME', ds_comando_w);				
								
							end if;				
							
							end;
						end loop;
						close C05;
					
					end;					
					commit;
				end if;
				end;
			end if;
		else

			begin
			update	procedimento_autorizado
			set	qt_solicitada = 0,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp(),
				nr_seq_agenda   = NULL,
				ds_observacao  = substr(ds_observacao || chr(13) || wheb_mensagem_pck.get_texto(791873),1,1999)
			where	nr_seq_agenda in (SELECT a.nr_sequencia
						from	agenda_paciente a,
							procedimento_autorizado b
						where	a.nr_sequencia = b.nr_seq_agenda
						and	a.cd_agenda = cd_agenda_p
						and	a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
						and	((a.ie_status_agenda = 'L')
						or	((a.ie_status_agenda = 'B')
						and (coalesce(a.dt_bloqueio::text, '') = ''))));
						
			update	autorizacao_convenio
			set	nr_seq_agenda  = NULL,
				nm_usuario    = nm_usuario_p,
				dt_atualizacao = clock_timestamp(),
				ds_observacao = substr(ds_observacao || chr(13) || wheb_mensagem_pck.get_texto(791873),1,1999)
			where	nr_seq_agenda in (SELECT a.nr_sequencia
						from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						and	a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
						and	((a.ie_status_agenda = 'L')
						or	((a.ie_status_agenda = 'B')
						and (coalesce(a.dt_bloqueio::text, '') = ''))));
			
			if (ie_manter_livres_w	in ('N', 'E')) then
				if (ie_liberado_w = 'N') then
					delete	from	agenda_paciente a
					where	a.cd_agenda = cd_agenda_p
					and		a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
					and		((a.ie_status_agenda = 'L')
					or		((a.ie_status_agenda = 'B')
					and (coalesce(a.dt_bloqueio::text, '') = '')));
				else
					delete	from 	agenda_paciente a
					where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
												FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and ap.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) and ((ap.ie_status_agenda = 'L') or	((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
				end if;
			elsif (ie_manter_livres_w	= 'S') then
				if (ie_liberado_w = 'N') then
					delete	from	agenda_paciente a
					where	a.cd_agenda = cd_agenda_p
					and		a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400))
					and		a.hr_inicio > clock_timestamp()
					and		((a.ie_status_agenda = 'L')
					or		((a.ie_status_agenda = 'B')
					and (coalesce(a.dt_bloqueio::text, '') = '')));
				else
					delete	from 	agenda_paciente a
					where   a.nr_sequencia in (	SELECT  ap.nr_sequencia
												FROM agenda_paciente ap
LEFT OUTER JOIN agenda_integrada_item aii ON (ap.nr_sequencia = aii.nr_seq_agenda_exame)
WHERE ap.cd_agenda = cd_agenda_p and ap.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) and ap.hr_inicio > clock_timestamp() and ((ap.ie_status_agenda = 'L') or ((ap.ie_status_agenda = 'B') and (coalesce(ap.dt_bloqueio::text, '') = ''))) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
				end if;
			end if;



			exception
			when others then
				
				open C05;
				loop
				fetch C05 into	
					nm_tabela_w,
					nm_integridade_ref_w;
				EXIT WHEN NOT FOUND; /* apply on C05 */
					begin
					
					SELECT	MAX(A.COLUMN_NAME)
					into STRICT	ds_contraint_name_w
					FROM	USER_CONS_COLUMNS A	
					WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
					
					if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
						ds_comando_w := ' 	update	' || nm_tabela_w || '
											set		' || ds_contraint_name_w || ' = null
											where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																						from	agenda_paciente a
																						where	a.cd_agenda = ' || cd_agenda_p || '
																						and		a.dt_agenda between trunc(' || ds_dtAgenda_w || ',''dd'') and (trunc(' || ds_dtAgenda_w || ',''dd'') + (86399/86400))
																						and		((a.ie_status_agenda = ''L'')
																						or		((a.ie_status_agenda = ''B'')
																						and		(a.dt_bloqueio is null))) ) ';
						
						CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_EXAME', ds_comando_w);				
						
					end if;				
					
					end;
				end loop;
				close C05;
			
			end;			
			commit;
		end if;		

		open C04;
		loop
		fetch C04 into	
			dt_hor_adic_w,
			nr_min_dur_adic_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			
					ie_bloqueio_w := 'N';
			
					select	/*+index(a AGEPACI_UK)*/						CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
					into STRICT	ie_horario_w
					from	agenda_paciente a
					where	a.cd_agenda = cd_agenda_p
					and	a.dt_agenda = trunc(dt_agenda_p,'dd')
					and a.hr_inicio = dt_hor_adic_w
					and	a.ie_status_agenda not in ('C','LF');

					/* consistir horario gerado e ja utilizado x minutos duracao alterado */

					if (ie_horario_w = 'S') then
						select	/*+index(a AGEPACI_UK)*/							CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
						into STRICT	ie_horario_w
						from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						--and	a.dt_agenda = trunc(dt_agenda_p,'dd')
						and	a.hr_inicio < dt_hor_adic_w
						and	a.hr_inicio + a.nr_minuto_duracao / 1440 > dt_hor_adic_w
						and	a.dt_agenda = trunc(dt_hor_adic_w, 'dd')
						and	a.ie_status_agenda not in ('C','LF');
					end if;

					cd_medico_executor_w :=	obter_executor_agenda_exame(nr_seq_medico_exec_w);
					if (coalesce(cd_medico_executor_w::text, '') = '') and (ie_medico_executor_w = 'S') then
						select	max(cd_medico)
						into STRICT	cd_medico_executor_w
						from	agenda_medico
						where	cd_agenda	= cd_agenda_p;
					end if;
					
					/* consistir bloqueio */

					if (ie_existe_bloqueio_w = 'S') then
						SELECT * FROM consistir_bloq_Agenda_obs(cd_agenda_p, dt_hor_adic_w, ie_dia_semana_w, ie_bloqueio_w, ds_obs_bloq_w) INTO STRICT ie_bloqueio_w, ds_obs_bloq_w;
					end if;
					nr_seq_classif_alter_w := (obter_classif_regra_alteracao(2, cd_agenda_p, dt_hor_adic_w, to_char(nr_seq_classif_w)))::numeric;
					if (ie_bloqueio_w = 'N') then
						nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
												cd_agenda_p,
												null,
												nr_seq_classif_alter_w,
												null,
												null,
												nr_seq_proc_interno_w,
												cd_procedimento_w,
												ie_origem_proced_w,
												cd_medico_executor_w, 
												dt_hor_adic_w,
												'S',
												'N');
						if (nr_seq_regra_bloq_w > 0) then
							ie_bloqueio_w := 'S';
						end if;	
					end if;

					if (ie_horario_w = 'S') and
						((ie_bloqueio_w = 'N') or (ie_gerar_hor_bloq_w = 'S')) then
						/* obter sequencia */

						select	nextval('agenda_paciente_seq')
						into STRICT	nr_seq_agenda_w
						;

						/* obter turno horario */

						cd_turno_w := obter_turno_horario_agenda(cd_agenda_p, to_char(dt_hor_adic_w,'hh24:mi:ss'));

						/* validar duracao horario */


						/*
						select	validar_duracao_horario_agenda(cd_agenda_p, hr_horario_w, nr_minuto_duracao_w)
						into	nr_minuto_orig_w
						from	dual;
						*/
			

						/* inserir registros */

						
						if (nr_minuto_orig_w = 0) then
							nr_minuto_min_w := nr_minuto_duracao_w;
						else
							nr_minuto_min_w := nr_minuto_orig_w;
						end if;						
						
						ds_erro_w := consistir_horario_medico_ger(nr_seq_agenda_w, cd_medico_executor_w, nr_minuto_min_w, dt_hor_adic_w, cd_agenda_p, ds_erro_w);
						
						if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') THEN
						
							ie_bloqueio_w	:= 'S';
						
						end if;
						
						/*Bruna em 03/03/2009 OS 130376*/

						select	count(*)
						into STRICT	qt_agenda_w
						from	agenda_paciente
						where	cd_agenda		= cd_agenda_p
						and	dt_agenda		= trunc(dt_agenda_p-1,'dd')
						and	dt_hor_adic_w between hr_inicio and hr_inicio + ((nr_minuto_duracao-1) / 1440)
						and	ie_status_agenda not in ('L','C','B')
						and (ie_gerar_hor_agenda_ant_w = 'S');
					
						if (qt_agenda_w = 0) then
							insert into agenda_paciente(
											nr_sequencia,
											cd_agenda,
											nm_usuario,
											dt_atualizacao,
											dt_agenda,
											hr_inicio,
											nr_minuto_duracao,
											ie_status_agenda,
											ie_equipamento,
											cd_turno,
											ie_anestesia,
											cd_medico_exec,
											cd_medico,
											cd_procedimento,
											ie_origem_proced,
											nr_seq_proc_interno,
											nr_seq_classif_agenda,
											nr_seq_sala,
											ds_observacao,
											nr_seq_esp,
											nr_seq_preferencia,
											cd_procedencia,
											cd_convenio,
											cd_categoria,
											ie_autorizacao,
											nr_seq_horario
											)
										values (
											nr_seq_agenda_w,
											cd_agenda_p,
											nm_usuario_p,
											clock_timestamp(),
											dt_agenda_p,
											dt_hor_adic_w,
											nr_min_dur_adic_w,
											CASE WHEN ie_bloqueio_w='S' THEN  'B'  ELSE 'L' END ,
											'N',
											cd_turno_w,
											'N',
											cd_medico_executor_w,
											cd_medico_w,
											CASE WHEN cd_procedimento_w=0 THEN  null  ELSE cd_procedimento_w END ,
											CASE WHEN ie_origem_proced_w=0 THEN  null  ELSE ie_origem_proced_w END ,
											CASE WHEN nr_seq_proc_interno_w=0 THEN  null  ELSE nr_seq_proc_interno_w END ,
											nr_seq_classif_alter_w,
											nr_seq_sala_w,
											ds_observacao_w,
											CASE WHEN ie_tipo_horario_w='E' THEN nr_seq_horario_w  ELSE null END ,
											obter_pref_horario(hr_horario_w, nr_seq_horario_w,obter_perfil_ativo, null),
											cd_procedencia_w,
											cd_convenio_w,
											cd_categoria_w,
											ie_autorizacao_w,
											CASE WHEN ie_tipo_horario_w='E' THEN null  ELSE nr_seq_horario_w END );					
						end if;
					end if;
			
			
			end;
		end loop;
		close C04;

		/* gerar horarios livres */

		open c01;
		loop
		fetch c01 into	ie_tipo_horario_w,
					nr_seq_horario_w,
					hr_inicial_dia_w,
					hr_final_dia_w,
					hr_inicial_intervalo_w,
					hr_final_intervalo_w,
					nr_minuto_duracao_w,
					nr_seq_medico_exec_w,
					cd_medico_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_proc_interno_w,
					nr_seq_classif_w,
					nr_seq_sala_w,
					ds_observacao_w,
					cd_procedencia_w,
					cd_convenio_w,
					cd_categoria_w,
					nr_prioridade_w,
					nr_seq_transporte_w,
					ie_lado_w,
					ie_forma_agendamento_w,
					ds_observacao_adic_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			ie_gerar_horario_w	:= 'S';			
			
			if (ie_gerar_horario_w = 'S')then/*Tratamento para nao ocorrer o erro ORA-01861: literal does not match format string(o literal nao corresponde a string de formato)*/
				begin
				hr_inicial_dia_w 		:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_dia_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
				hr_final_dia_w	 		:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_dia_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
				if (hr_inicial_intervalo_w IS NOT NULL AND hr_inicial_intervalo_w::text <> '') then
					hr_inicial_intervalo_w 	:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_intervalo_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
				end if;
				if (hr_final_intervalo_w IS NOT NULL AND hr_final_intervalo_w::text <> '') then
					hr_final_intervalo_w 	:=	to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_intervalo_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
				end if;
				exception
				when others then
					ds_erro_w := '';
					
					delete	FROM agenda_controle_horario
					where 	cd_agenda = cd_agenda_p
					and 	dt_agenda = trunc(hr_inicial_dia_w);
				end;				
			end if;
			
			--Bruno - Busca da regra se existe uma regra para o perfil (transporte)
			select	count(*)
			into STRICT	qt_regra_w
			from	regra_valor_padrao_agenda
			where	cd_perfil = obter_perfil_ativo;
			
			if (qt_regra_w > 0) then
				select	max(nr_sequencia)
				into STRICT	nr_seq_regra_transp_w
				from	regra_valor_padrao_agenda
				where	cd_perfil = obter_perfil_ativo;
				
				select 	nr_seq_transporte
				into STRICT	nr_seq_transporte_w
				from	regra_valor_padrao_agenda
				where	nr_sequencia = nr_seq_regra_transp_w;
			end if;
			--
			
			hr_horario_w := hr_inicial_dia_w;
			while(hr_horario_w < hr_final_dia_w) loop
				begin
				
				ie_bloqueio_w := 'N';
				
				if	(((hr_horario_w < hr_inicial_intervalo_w) or (hr_horario_w >= hr_final_intervalo_w)) or
					((coalesce(hr_inicial_intervalo_w::text, '') = '') and (coalesce(hr_final_intervalo_w::text, '') = ''))) and (hr_horario_w > clock_timestamp()) then
					/* consistir horario gerado e ja utilizado */

					
					if (ie_gerar_hor_falta_w = 'S') then
						select	/*+index(a AGEPACI_UK)*/							CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
						into STRICT	ie_horario_w
						from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						--and	a.dt_agenda = trunc(dt_agenda_p,'dd')
						and	a.dt_agenda between trunc(hr_horario_w, 'dd') - nr_dias_passados_hor_w and trunc(hr_horario_w, 'dd') + 83699/86400
						and a.hr_inicio = hr_horario_w
						and	a.ie_status_agenda not in ('C','LF','F','I');
					else
						select	/*+index(a AGEPACI_UK)*/							CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
						into STRICT	ie_horario_w
						from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						--and	a.dt_agenda = trunc(dt_agenda_p,'dd')
						and	a.dt_agenda between trunc(hr_horario_w, 'dd') - nr_dias_passados_hor_w and trunc(hr_horario_w, 'dd') + 83699/86400
						and a.hr_inicio = hr_horario_w
						and	a.ie_status_agenda not in ('C','LF');					
					end if;

					/* consistir horario gerado e ja utilizado x minutos duracao alterado */

					if (ie_horario_w = 'S') then
						
						if (ie_gerar_hor_falta_w = 'S') then
							select	/*+index(a AGEPACI_UK)*/								CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
							into STRICT	ie_horario_w
							from	agenda_paciente a
							where	a.cd_agenda = cd_agenda_p
							--and	a.dt_agenda = trunc(dt_agenda_p,'dd')
							and	a.hr_inicio < hr_horario_w
							and	a.hr_inicio + a.nr_minuto_duracao / 1440 > hr_horario_w
							and a.hr_inicio + a.nr_minuto_duracao / 1440 > hr_horario_w + (1/1440)
							and	a.dt_agenda between trunc(hr_horario_w, 'dd') - nr_dias_passados_hor_w and trunc(hr_horario_w, 'dd') + 83699/86400
							and	a.ie_status_agenda not in ('C','LF','F','I');
						else
							select	/*+index(a AGEPACI_UK)*/								CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
							into STRICT	ie_horario_w
							from	agenda_paciente a
							where	a.cd_agenda = cd_agenda_p
							--and	a.dt_agenda = trunc(dt_agenda_p,'dd')
							and	a.hr_inicio < hr_horario_w
							and	a.hr_inicio + a.nr_minuto_duracao / 1440 > hr_horario_w
							and a.hr_inicio + a.nr_minuto_duracao / 1440 > hr_horario_w + (1/1440)
							and	a.dt_agenda between trunc(hr_horario_w, 'dd') - nr_dias_passados_hor_w and trunc(hr_horario_w, 'dd') + 83699/86400
							and	a.ie_status_agenda not in ('C','LF');
						end if;
						
					elsif (ie_tipo_horario_w = 'E') then			
						CALL gerar_horario_esp_agenda(cd_agenda_p, dt_agenda_p, hr_horario_w, nr_seq_horario_w,nm_usuario_p,cd_estabelecimento_p);
					end if;

					cd_medico_executor_w :=	obter_executor_agenda_exame(nr_seq_medico_exec_w);
									
					if (coalesce(cd_medico_executor_w::text, '') = '') and (ie_medico_executor_w = 'S') then
						select	max(cd_medico)
						into STRICT	cd_medico_executor_w
						from	agenda_medico
						where	cd_agenda	= cd_agenda_p;
					end if;
					
					/* consistir bloqueio */

					if (ie_existe_bloqueio_w = 'S') then
						SELECT * FROM consistir_bloq_Agenda_obs(cd_agenda_p, hr_horario_w, ie_dia_semana_w, ie_bloqueio_w, ds_obs_bloq_w) INTO STRICT ie_bloqueio_w, ds_obs_bloq_w;
					end if;
					nr_seq_classif_alter_w := (obter_classif_regra_alteracao(2, cd_agenda_p, hr_horario_w, to_char(nr_seq_classif_w)))::numeric;
					if (ie_bloqueio_w = 'N') then
						nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
												cd_agenda_p,
												null,
												nr_seq_classif_alter_w,
												null,
												null,
												nr_seq_proc_interno_w,
												cd_procedimento_w,
												ie_origem_proced_w,
												cd_medico_executor_w, 
												hr_horario_w,
												'S',
												'N');
						if (nr_seq_regra_bloq_w > 0) then
							ie_bloqueio_w := 'S';
							
							select max(ie_motivo_bloqueio)
							into STRICT ie_motivo_bloqueio_w
							from agenda_bloqueio_geral
							where nr_sequencia = nr_seq_regra_bloq_w;
							
							select max(ds_expressao)
							into STRICT ds_obs_bloq_w
							from valor_dominio_v
							where cd_dominio = 1007
							and vl_dominio = ie_motivo_bloqueio_w;
							
						end if;	
					end if;
					
					if (ie_horario_w = 'S') and
						((ie_bloqueio_w = 'N') or (ie_gerar_hor_bloq_w = 'S')) then
						begin
						/* obter sequencia */

						select	nextval('agenda_paciente_seq')
						into STRICT	nr_seq_agenda_w
						;
						begin
						/* obter turno horario */

						cd_turno_w := obter_turno_horario_agenda(cd_agenda_p, to_char(hr_horario_w,'hh24:mi:ss'));

						/* validar duracao horario */


						/*
						select	validar_duracao_horario_agenda(cd_agenda_p, hr_horario_w, nr_minuto_duracao_w)
						into	nr_minuto_orig_w
						from	dual;
						*/
			

						/* inserir registros */

						
						if (nr_minuto_orig_w = 0) then
							nr_minuto_min_w := nr_minuto_duracao_w;
						else
							nr_minuto_min_w := nr_minuto_orig_w;
						end if;						

						ds_erro_w := consistir_horario_medico_ger(nr_seq_agenda_w, cd_medico_executor_w, nr_minuto_min_w, hr_horario_w, cd_agenda_p, ds_erro_w);
						
						if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') THEN
						
							ie_bloqueio_w	:= 'S';
						
						end if;
						
						/*Bruna em 03/03/2009 OS 130376*/

						select	count(*)
						into STRICT	qt_agenda_w
						from	agenda_paciente
						where	cd_agenda		= cd_agenda_p
						and	dt_agenda		= trunc(dt_agenda_p-1,'dd')
						and	hr_horario_w between hr_inicio and hr_inicio + ((nr_minuto_duracao-1) / 1440)
						and	ie_status_agenda not in ('L','C','B')
						and (ie_gerar_hor_agenda_ant_w = 'S');
					
						if (qt_agenda_w = 0) then
							if (ie_bloqueio_w <> 'S') and (ie_tipo_horario_w = 'E') and (ie_limpa_obs_especial_w = 'S') then		
								ds_observacao_w := '';
							end if;		

							if (DS_OBSERVACAO_ADIC_w IS NOT NULL AND DS_OBSERVACAO_ADIC_w::text <> '') and
								(((ie_bloqueio_w = 'N') and (ie_gerar_nome_w = 'N') and (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '')) or
								((ie_bloqueio_w = 'S') and (ie_gerar_obs_bloq_w = 'S') and (ds_obs_bloq_w IS NOT NULL AND ds_obs_bloq_w::text <> ''))) then
								DS_OBS_HOR_ADIC_w := chr(10) || DS_OBSERVACAO_ADIC_w;
							else
								DS_OBS_HOR_ADIC_w	:= ds_observacao_adic_w;
							end if;

							insert into agenda_paciente(
											nr_sequencia,
											cd_agenda,
											nm_usuario,
											dt_atualizacao,
											dt_agenda,
											hr_inicio,
											nr_minuto_duracao,
											ie_status_agenda,
											ie_equipamento,
											cd_turno,
											ie_anestesia,
											cd_medico_exec,
											cd_medico,
											cd_procedimento,
											ie_origem_proced,
											nr_seq_proc_interno,
											nr_seq_classif_agenda,
											nr_seq_sala,
											ds_observacao,
											nr_seq_esp,
											nr_seq_preferencia,
											cd_procedencia,
											cd_convenio,
											cd_categoria,
											ie_autorizacao,
											nr_seq_horario,
											nr_seq_transporte,
											nm_paciente,
											ie_lado,
											ie_forma_agendamento
											)
										values (
											nr_seq_agenda_w,
											cd_agenda_p,
											nm_usuario_p,
											clock_timestamp(),
											dt_agenda_p,
											hr_horario_w,
											CASE WHEN nr_minuto_orig_w=0 THEN  nr_minuto_duracao_w  ELSE nr_minuto_orig_w END ,
											CASE WHEN ie_bloqueio_w='S' THEN  'B'  ELSE 'L' END ,
											'N',
											cd_turno_w,
											'N',
											cd_medico_executor_w,
											cd_medico_w,
											CASE WHEN cd_procedimento_w=0 THEN  null  ELSE cd_procedimento_w END ,
											CASE WHEN ie_origem_proced_w=0 THEN  null  ELSE ie_origem_proced_w END ,
											CASE WHEN nr_seq_proc_interno_w=0 THEN  null  ELSE nr_seq_proc_interno_w END ,
											nr_seq_classif_alter_w,
											nr_seq_sala_w,
											CASE WHEN ie_bloqueio_w='N' THEN  CASE WHEN ie_gerar_nome_w='N' THEN substr(ds_observacao_w,1,80)  ELSE null END   ELSE CASE WHEN ie_gerar_obs_bloq_w='S' THEN  ds_obs_bloq_w  ELSE null END  END ||DS_OBS_HOR_ADIC_w,
											CASE WHEN ie_tipo_horario_w='E' THEN nr_seq_horario_w  ELSE null END ,
											obter_pref_horario(hr_horario_w, nr_seq_horario_w,obter_perfil_ativo, null),
											cd_procedencia_w,
											cd_convenio_w,
											cd_categoria_w,
											ie_autorizacao_w,
											CASE WHEN ie_tipo_horario_w='E' THEN null  ELSE nr_seq_horario_w END ,
											nr_seq_transporte_w,
											CASE WHEN ie_gerar_nome_w='S' THEN substr(ds_observacao_w,1,60)  ELSE null END ,
											ie_lado_w,
											ie_forma_agendamento_w
											);
							DS_OBS_HOR_ADIC_w := '';
						end if;
						EXCEPTION
						WHEN unique_violation then null;
						WHEN others then
						  rollback;
						  CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(184695, 'ERRO='||substr(SQLERRM,1,1000));
						END;
						END;
					end if;
				end if;
				/* atualizar horario a ser gerado */

				if	((hr_horario_w + nr_minuto_duracao_w / 1440) >= hr_inicial_intervalo_w) and
					((hr_horario_w + nr_minuto_duracao_w / 1440) < hr_final_intervalo_w) then
					hr_horario_w := hr_final_intervalo_w;
				else
					hr_horario_w := hr_horario_w + nr_minuto_duracao_w / 1440;
				end if;
				end;
			end loop;
			end;
		end loop;
		close c01;

		ds_observacao_w		:= '';

		/* gerar dados sobra horario */

		open c02;
		loop
		fetch c02 into	hr_inicial_dia_w,
					hr_final_dia_w,
					nr_minuto_duracao_w,
					cd_procedencia_w,
					ie_origem_dados_w,
					ie_Agendamento_w,
					hr_inicial_intervalo_w,
					hr_final_intervalo_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			
			ie_gerar_horario_w	:= 'S';
			
			if (ie_gerar_horario_w = 'S')then/*Tratamento para nao ocorrer o erro ORA-01861: literal does not match format string(o literal nao corresponde a string de formato)*/
				begin
					hr_inicial_dia_w 		:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_dia_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
					hr_final_dia_w	 		:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_dia_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
					if (hr_inicial_intervalo_w IS NOT NULL AND hr_inicial_intervalo_w::text <> '') then
						hr_inicial_intervalo_w 	:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_intervalo_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
					end if;
					if (hr_final_intervalo_w IS NOT NULL AND hr_final_intervalo_w::text <> '') then
						hr_final_intervalo_w 	:=	to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_intervalo_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
					end if;
				exception
				when others then
					null;
				end;				
			end if;
			/* gerar sobra horario */

			open c03;
			loop
			fetch c03 into	hr_horario_inicial_w,
					hr_horario_final_w,
					nr_minuto_horario_w,
					cd_medico_exec_sobra_w,
					nr_seq_classif_sobra_w;				
			EXIT WHEN NOT FOUND; /* apply on c03 */
				begin

				ie_bloqueio_w := 'N';				
				
				if (nr_minuto_horario_w = nr_minuto_duracao_w) and (hr_horario_ant_sobra_w IS NOT NULL AND hr_horario_ant_sobra_w::text <> '') and
					((hr_horario_ant_sobra_w + nr_minuto_duracao_w / 1440) < hr_horario_final_w) then
					hr_horario_final_w	:= hr_horario_final_w - ((hr_horario_final_w - hr_horario_ant_sobra_w) * 1440 / 1440);
					nr_minuto_horario_w	:= (hr_horario_final_w - hr_horario_ant_sobra_w) * 1440;
				end if;

				hr_horario_ant_sobra_w	:= hr_horario_final_w;
				if (nr_minuto_horario_w <> nr_minuto_duracao_w) and
					((ie_origem_dados_w = '1' AND hr_inicial_dia_w <= hr_horario_final_w) or
					((ie_origem_dados_w <> '1') and ((hr_inicial_dia_w <= hr_horario_final_w) or ie_Agendamento_w = 'S')))  then
					hr_horario_sobra_w := hr_horario_final_w;
					SELECT	min(b.hr_inicio)
					into STRICT	dt_inicio_sobra_w
					FROM	agenda a,
						agenda_paciente b
					WHERE	a.cd_agenda = b.cd_agenda
					AND	b.cd_agenda = cd_agenda_p
					AND	b.hr_inicio > hr_horario_final_w
					AND	a.ie_gerar_sobra_horario = 'S'
					and	b.dt_agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86399/86400
					AND	b.ie_status_agenda NOT IN ('C','LF');
					
					if (dt_inicio_sobra_w < hr_final_dia_w) then
						nr_minuto_sobra_w := (dt_inicio_sobra_w - hr_horario_final_w) * 1440;
					else
						nr_minuto_sobra_w := (hr_final_dia_w - hr_horario_final_w) * 1440;
					end if;
					
					if (nr_minuto_sobra_w > nr_minuto_duracao_w) then
						nr_minuto_sobra_w := nr_minuto_duracao_w;
					end if;
					
					if	(((hr_horario_sobra_w < hr_inicial_intervalo_w) or (hr_horario_sobra_w >= hr_final_intervalo_w)) or
						((coalesce(hr_inicial_intervalo_w::text, '') = '') and (coalesce(hr_final_intervalo_w::text, '') = ''))) and (hr_horario_sobra_w > clock_timestamp()) and
						((hr_horario_sobra_w < hr_final_dia_w) or (hr_horario_sobra_w + nr_minuto_sobra_w / 1400 <= hr_final_dia_w + nr_minuto_duracao_w / 1440)) and (nr_minuto_sobra_w > 0) then
						
						/* consistir horario gerado e ja utilizado */

						select	/*+index(a AGEPACI_UK)*/							CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
						into STRICT	ie_horario_w
						from	agenda_paciente a
						where	a.cd_agenda = cd_agenda_p
						and	a.dt_agenda = trunc(dt_agenda_p,'dd')
						and a.hr_inicio = hr_horario_sobra_w
						and	a.ie_status_agenda not in ('C','LF');

						/* consistir horario gerado e ja utilizado x minutos duracao alterado */

						if (ie_horario_w = 'S') then
							select	/*+index(a AGEPACI_UK)*/								CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
							into STRICT	ie_horario_w
							from	agenda_paciente a
							where	a.cd_agenda = cd_agenda_p
							--and	a.dt_agenda = trunc(dt_agenda_p,'dd')
							and	a.hr_inicio < hr_horario_sobra_w
							and	a.hr_inicio + a.nr_minuto_duracao / 1440 > hr_horario_sobra_w
							and	a.dt_agenda = trunc(hr_horario_sobra_w, 'dd')
							and	a.ie_status_agenda not in ('C','LF');
						end if;

						/* consistir bloqueio */

						if (ie_existe_bloqueio_w = 'S') then
							SELECT * FROM consistir_bloq_Agenda_obs(cd_agenda_p, hr_horario_sobra_w, ie_dia_semana_w, ie_bloqueio_w, ds_obs_bloq_w) INTO STRICT ie_bloqueio_w, ds_obs_bloq_w;
						end if;
						nr_seq_classif_alter_w := (obter_classif_regra_alteracao(2, cd_agenda_p, hr_horario_sobra_w, to_char(nr_seq_classif_sobra_w)))::numeric;
						if (ie_bloqueio_w = 'N') then
							nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
													cd_agenda_p,
													null,
													nr_seq_classif_alter_w,
													null,
													null,
													null,
													null,
													null,
													cd_medico_exec_sobra_w, 
													hr_horario_sobra_w,
													'S',
													'N');
							if (nr_seq_regra_bloq_w > 0) then
								ie_bloqueio_w := 'S';
							end if;	
						end if;
						if (ie_horario_w = 'S') and
							((ie_bloqueio_w = 'N') or (ie_gerar_hor_bloq_w = 'S')) then
							/* obter sequencia */

							select	nextval('agenda_paciente_seq')
							into STRICT	nr_seq_agenda_w
							;

							/* obter turno horario */

							cd_turno_w := obter_turno_horario_agenda(cd_agenda_p, to_char(hr_horario_sobra_w,'hh24:mi:ss'));

							/* inserir registros */

							insert into agenda_paciente(
											nr_sequencia,
											cd_agenda,
											nm_usuario,
											dt_atualizacao,
											dt_agenda,
											hr_inicio,
											nr_minuto_duracao,
											ie_status_agenda,
											ie_equipamento,
											cd_turno,
											ie_anestesia,
											cd_medico_exec,
											cd_medico,
											nr_seq_classif_agenda,
											nr_seq_sala,
											cd_procedencia,
											nm_paciente,
											ie_autorizacao
											)
										values (
											nr_seq_agenda_w,
											cd_agenda_p,
											nm_usuario_p,
											clock_timestamp(),
											dt_agenda_p,
											hr_horario_sobra_w,
											nr_minuto_sobra_w,
											CASE WHEN ie_bloqueio_w='S' THEN  'B'  ELSE 'L' END ,
											'N',
											cd_turno_w,
											'N',
											cd_medico_exec_sobra_w,
											cd_medico_w,
											nr_seq_classif_alter_w,
											nr_seq_sala_w,
											cd_procedencia_w,
											CASE WHEN ie_gerar_nome_w='S' THEN substr(ds_observacao_w,1,60)  ELSE null END ,
											ie_autorizacao_w
											);
						end if;
					end if;
				end if;				
				end;
			end loop;
			close c03;
			end;
		end loop;
		close c02;
	end if;
end if;
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_horario_agenda_exame (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text) FROM PUBLIC;

