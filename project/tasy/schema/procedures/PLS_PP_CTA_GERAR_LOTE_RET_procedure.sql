-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_pp_cta_gerar_lote_ret ( nr_seq_lote_p pls_pp_lr_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_log_etapa_w	pls_pp_lote_log_etapa.nr_sequencia%type;
ds_stack_w    		varchar(4000);
ds_msg_processo_w	varchar(2000);
nr_seq_lote_w		pls_pp_lote.nr_sequencia%type;


BEGIN

begin
	-- coloca com status em processamento
	CALL pls_pp_lote_retencao_pck.atualiza_dados_trabalho_lote(	nr_seq_lote_p, nm_usuario_p);

	-- Faz o carregamento de parâmetros gerais e armazena em variáveis globais da package pls_pp_lote_retencao_pck
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(391541); -- Lendo parâmetros de configuração
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

	select	max(nr_sequencia)
	into STRICT	nr_seq_lote_w
	from	pls_pp_lote
	where	dt_mes_competencia = pls_pp_lote_retencao_pck.dt_mes_competencia_lote_w;

	CALL pls_pp_lote_pagamento_pck.carrega_parametros(nr_seq_lote_w, cd_estabelecimento_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- Faz algumas verificações quanto a poder realizar a geração do lote
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(391542); -- Validando se o lote pode ser gerado
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.valida_se_pode_gerar_lote(nr_seq_lote_p, cd_estabelecimento_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- alimenta a tabela temporária pls_pp_prestador_tmp com todos os prestadores da base e seus
	-- respectivos dados complementares (matriz, situação cooperado, etc.)
	-- a idéia é utilizar esta tabela em vários processos futuros dentro da geração do lote
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(391545); -- Selecionando os prestadores que poderão fazer parte do lote
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.alimenta_prestadores_tab_temp(pls_pp_lote_retencao_pck.dt_mes_comp_lote_fim_w);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- faz a alimentação da tabela pls_pp_lr_base_trib para todos os tributos de INSS
	-- gera a base que foi utilizada no pagamento de produção médica para todos os impostos de INSS
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(456496); -- Buscando informações dos lotes de pagamentos gerados no período
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.gerar_base_acum_pagamento(nr_seq_lote_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- gera registros de outros locais como cartas, repasse e nota fiscal por exemplo
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(456497); -- Verificando se existem valores de outros processos a serem processados
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.gerar_base_outros_processos(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- agrupa as informações da pls_pp_lr_base_trib por pessoa, tributo, tipo de contratação e tipo de prestador
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(456498); -- Agrupando informações por pessoa
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.alimenta_trib_pessoa(nr_seq_lote_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- recálcula todos os registros para futuramente serem comparados com os dados gerados nos pagamentos
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(456499); -- Processando valores de tributos para o lote
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.calcula_trib_pf_lote(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- faz o vinculo do lote de fechamento com os registros do lote de pagamento, para depois fazer a comparação
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(456537); -- Verificando valores de tributos gerados nos lotes de pagamento e realizando o vínculo
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.gerencia_vinculo_pagamento(nr_seq_lote_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- Verifica se há diferença entre o tributo gerado no pagamento e o tributo cálculado no lote e gera registros caso exista esta diferença
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(456653); -- Gerando valores de diferença dos tributos dos lote.
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.gerar_valores_diferenca(nr_seq_lote_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

	-- Define o lote de pagamento como gerado
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(403679); -- Finalizando geração do lote de pagamento
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p);
	CALL pls_pp_lote_retencao_pck.atualiza_dados_ger_lote_ret(nr_seq_lote_p, 'S', nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'G', nm_usuario_p);

exception
when others then
	-- limpa os dados de pagamento
	-- para gerar novamente só desfazendo a geração do anterior
	CALL pls_pp_lote_retencao_pck.atualiza_dados_ger_lote_ret(nr_seq_lote_p, 'N', nm_usuario_p);

	ds_stack_w := dbms_utility.format_call_stack || pls_util_pck.enter_w ||
		      dbms_utility.format_error_backtrace || pls_util_pck.enter_w ||
		      sqlerrm;
	-- grava log se deu erro
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, nr_seq_lote_p, 'E', ds_msg_processo_w, nr_seq_log_etapa_w, 'G', nm_usuario_p, ds_stack_w);
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_cta_gerar_lote_ret ( nr_seq_lote_p pls_pp_lr_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

