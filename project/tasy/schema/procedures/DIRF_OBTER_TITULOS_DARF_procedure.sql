-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dirf_obter_titulos_darf ( nr_sequencia_p bigint, nr_seq_darf_p bigint, cd_estabelecimento_p bigint, cd_darf_p text) AS $body$
DECLARE

				 
cd_tributo_w		dirf_titulo_pagar.cd_tributo%type;
nr_titulo_original_w	titulo_pagar.nr_titulo%type;
vl_imposto_w		dirf_titulo_pagar.vl_imposto%type;
vl_imposto_aux_w	dirf_titulo_pagar.vl_rendimento%type;
vl_rendimento_w		dirf_titulo_pagar.vl_rendimento%type;
cd_cgc_w		titulo_pagar.cd_cgc%type;
cd_pessoa_fisica_w	titulo_pagar.cd_pessoa_fisica%type;
ie_tipo_data_w		dirf_regra_tributo.ie_tipo_data%type;
ie_nota_fiscal_w	dirf_regra_tributo.ie_nota_fiscal%type;
contador_w		bigint;
qt_registros_w		bigint;
dt_mes_referencia_w	timestamp;
dt_emissao_w		timestamp;
dt_liquidacao_w		timestamp;
dt_vencimento_w		timestamp;
dt_base_titulo_w	timestamp;
dt_emissao_nf_w		timestamp;	
 
--pega os títulos que tiveram imposto 
c_titulo_imposto CURSOR FOR 
	SELECT	a.nr_titulo_original 
	from	titulo_pagar		a, 
		darf_titulo_pagar	b, 
		darf			c 
	where	a.nr_titulo	= b.nr_titulo 
	and	c.nr_sequencia	= b.nr_seq_darf 
	and	(a.nr_titulo_original IS NOT NULL AND a.nr_titulo_original::text <> '') 
	and	c.nr_sequencia	= nr_seq_darf_p 
	group by 
		a.nr_titulo_original 
	order by 
		1;

c_tributo CURSOR FOR 
	SELECT	i.cd_tributo, 
		coalesce(sum(obter_dados_tit_pagar((Obter_Titulo_Imposto(i.nr_sequencia))::numeric ,'V')),0), 
		coalesce(obter_vl_mercadoria_nf_titulo(p.nr_titulo),p.vl_titulo), 
		p.dt_emissao, 
		p.dt_liquidacao, 
		p.dt_vencimento_atual, 
		to_date(obter_dados_nota_fiscal(p.nr_seq_nota_fiscal,9)) 
	from	titulo_pagar_imposto	i, 
		titulo_pagar		p 
	where	p.nr_titulo	= i.nr_titulo 
	and	p.nr_titulo	= nr_titulo_original_w 
	and	(substr(Obter_Titulo_Imposto(i.nr_sequencia),1,10))::numeric 	in (SELECT	b.nr_titulo 
											from	darf_titulo_pagar	b, 
												darf			c 
											where	b.nr_seq_darf = c.nr_sequencia 
											and	c.nr_sequencia = nr_seq_darf_p) 
	and	SUBSTR(coalesce(i.cd_Darf,obter_codigo_darf(i.cd_tributo,p.cd_estabelecimento,p.cd_cgc,p.cd_pessoa_fisica)),1,10) = cd_darf_p 
	group by i.cd_tributo, coalesce(obter_vl_mercadoria_nf_titulo(p.nr_titulo),p.vl_titulo),p.dt_emissao, 
		p.dt_liquidacao, 
		p.dt_vencimento_atual, 
		to_date(obter_dados_nota_fiscal(p.nr_seq_nota_fiscal,9));
	

BEGIN 
select 	trunc(dt_mes_referencia,'yyyy') 
into STRICT	dt_mes_referencia_w 
from 	dirf_lote_mensal 
where	nr_sequencia 	= nr_sequencia_p;
 
open c_titulo_imposto;
loop 
fetch c_titulo_imposto into	 
	nr_titulo_original_w;
EXIT WHEN NOT FOUND; /* apply on c_titulo_imposto */
	begin 
	select	count(*), 
		max(cd_cgc), 
		max(cd_pessoa_fisica) 
	into STRICT	qt_registros_w, 
		cd_cgc_w, 
		cd_pessoa_fisica_w 
	from	titulo_pagar_imposto	i, 
		titulo_pagar		p 
	where	p.nr_titulo	= i.nr_titulo 
	and	p.nr_titulo	= nr_titulo_original_w 
	and	SUBSTR(coalesce(i.cd_Darf,obter_codigo_darf(i.cd_tributo,p.cd_estabelecimento,p.cd_cgc,p.cd_pessoa_fisica)),1,10) = cd_darf_p;
	 
	if (qt_registros_w > 0 ) then	 
		open c_tributo;
		loop 
		fetch c_tributo into	 
			cd_tributo_w, 
			vl_imposto_w, 
			vl_rendimento_w, 
			dt_emissao_w, 
			dt_liquidacao_w, 
			dt_vencimento_w, 
			dt_emissao_nf_w;
		EXIT WHEN NOT FOUND; /* apply on c_tributo */
			begin 
			select 	max(coalesce(ie_nota_fiscal,'N')) 
			into STRICT	ie_nota_fiscal_w 
			from	dirf_regra_tributo	a 
			where	a.cd_tributo		= cd_tributo_w 
			and	((a.cd_estabelecimento = cd_estabelecimento_p) or (coalesce(a.cd_estabelecimento::text, '') = '')) 
			and	a.cd_darf		= cd_darf_p;
			 
			select	max(a.ie_tipo_data) 
			into STRICT	ie_tipo_data_w 
			from	dirf_regra_tributo	a 
			where	a.cd_darf		= cd_darf_p 
			and	((a.cd_estabelecimento = cd_estabelecimento_p) or (coalesce(a.cd_estabelecimento::text, '') = '')) 
			and	a.cd_tributo		= cd_tributo_w;
			 
			if (ie_tipo_data_w in (1,6)) then -- Pega pela data de emissão 
				select	max(p.dt_emissao) 
				into STRICT	dt_base_titulo_w 
				from	titulo_pagar	p 
				where	nr_titulo	= nr_titulo_original_w;
			elsif (ie_tipo_data_w = 2) then -- Pega pela data contábil 
				select	max(p.dt_contabil) 
				into STRICT	dt_base_titulo_w 
				from	titulo_pagar	p 
				where	nr_titulo	= nr_titulo_original_w;
			elsif (ie_tipo_data_w = 3) then -- Pega pela data de liquidação 
				select	max(p.dt_liquidacao) 
				into STRICT	dt_base_titulo_w 
				from	titulo_pagar	p 
				where	nr_titulo	= nr_titulo_original_w;
			elsif (ie_tipo_data_w = 4) then -- Pega pela data contábil 
				select	max(n.dt_emissao) 
				into STRICT	dt_base_titulo_w 
				from	nota_fiscal n, 
					titulo_pagar	p 
				where	p.nr_seq_nota_fiscal = n.nr_sequencia 
				and	p.nr_titulo	= nr_titulo_original_w;
			elsif (ie_tipo_data_w = 5) then -- Pega pela data de vencimento 
				select	max(p.dt_vencimento_atual) 
				into STRICT	dt_base_titulo_w 
				from	titulo_pagar	p 
				where	nr_titulo	= nr_titulo_original_w;
			end if;
			 
			qt_registros_w	:= coalesce(obter_regra_tipo_tit(cd_tributo_w,cd_estabelecimento_p,'SI'),0);
			 
			if (qt_registros_w > 0) then 
				-- Caso o título tenha sido gerado com valor/maior devido a tributos que diminuem ou aumentam o valor da nota 
				select	coalesce(sum(CASE WHEN t.ie_soma_diminui='S' THEN vl_imposto * -1 WHEN t.ie_soma_diminui='D' THEN vl_imposto  ELSE 0 END ),0) 
				into STRICT	vl_imposto_aux_w 
				from	titulo_pagar_imposto	i, 
					tributo			t 
				where	t.cd_tributo	= i.cd_tributo 
				and	i.nr_titulo	= nr_titulo_original_w 
				and	t.ie_soma_diminui <> 'N';
				 
				vl_rendimento_w	:= vl_rendimento_w + vl_imposto_aux_w;
			end if;
			 
			qt_registros_w	:= coalesce(obter_regra_tipo_tit(cd_tributo_w,cd_estabelecimento_p,'BR'),0);
			 
			if (qt_registros_w > 0) then 
				select	coalesce(sum(vl_base_calculo),0) 
				into STRICT	vl_imposto_aux_w 
				from	(SELECT	CASE WHEN abs(i.vl_imposto)=i.vl_imposto THEN  i.vl_base_calculo  ELSE i.vl_base_calculo * (-1) END  vl_base_calculo 
					from	titulo_pagar_imposto	i, 
						tributo			t 
					where	t.cd_tributo	= i.cd_tributo 
					and	i.nr_titulo	= nr_titulo_original_w 
					and	i.cd_tributo	= cd_tributo_w) alias5;
				 
				vl_rendimento_w	:= vl_imposto_aux_w;
			end if;
			 
			select	count(*) 
			into STRICT	qt_registros_w 
			from	dirf_regra_tributo	a 
			where	((a.cd_estabelecimento = cd_estabelecimento_p) or (coalesce(a.cd_estabelecimento::text, '') = '')) 
			and	a.cd_tributo		= cd_tributo_w 
			and	a.cd_darf		= cd_darf_p  LIMIT 1;
			 
			if (qt_registros_w > 0) and (dt_mes_referencia_w = trunc(dt_base_titulo_w,'yyyy')) then 
				select count(*) 
				into STRICT	qt_registros_w 
				from	titulo_pagar a 
				where	a.nr_titulo		= nr_titulo_original_w 
				and	ie_nota_fiscal_w	= 'S' 
				and	(a.nr_seq_nota_fiscal IS NOT NULL AND a.nr_seq_nota_fiscal::text <> '')  LIMIT 1;
				 
				if (qt_registros_w > 0) or (ie_nota_fiscal_w <> 'S') then 
					insert into dirf_titulo_pagar(nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_lote_dirf, 
						nr_titulo, 
						vl_rendimento, 
						vl_imposto, 
						cd_tributo, 
						cd_darf, 
						dt_base_titulo, 
						ie_origem) 
					values (nextval('dirf_titulo_pagar_seq'), 
						clock_timestamp(), 
						'Tasy', 
						clock_timestamp(), 
						'Tasy', 
						nr_sequencia_p, 
						nr_titulo_original_w, 
						vl_rendimento_w, 
						vl_imposto_w, 
						cd_tributo_w, 
						cd_darf_p, 
						dt_base_titulo_w, 
						'S');
						 
					commit;
				 
					contador_w	:= contador_w + 1;
					 
					if (mod(contador_w, 100) = 0) then 
						commit;
					end if;
				end if;
			end if;
			end;
		end loop;
		close c_tributo;
	end if;
	end;
end loop;
close c_titulo_imposto;
 
delete	FROM dirf_titulo_pagar a 
where	a.nr_seq_lote_dirf	= nr_sequencia_p 
and	a.vl_imposto		= 0 
and	exists (SELECT	1 
		from	dirf_titulo_pagar	x 
		where	x.nr_titulo	= a.nr_titulo 
		and	x.vl_imposto > 0);
		 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dirf_obter_titulos_darf ( nr_sequencia_p bigint, nr_seq_darf_p bigint, cd_estabelecimento_p bigint, cd_darf_p text) FROM PUBLIC;

