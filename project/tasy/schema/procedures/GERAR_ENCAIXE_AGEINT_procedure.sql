-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_encaixe_ageint (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p text, qt_duracao_p bigint, cd_pessoa_fisica_p text, cd_convenio_p bigint, cd_categoria_p text, nr_seq_proc_interno_p bigint, nm_usuario_p text, cd_setor_atendimento_p bigint, nr_seq_ageint_item_p bigint, nr_Seq_ageint_p bigint, cd_medico_encaixe_p text, nr_seq_encaixe_p INOUT bigint, nm_usuario_confirm_encaixe_p text default null, dt_confirm_encaixe_p timestamp default null, ie_classif_agenda_p text default null, cd_doenca_cid_p text default null, nr_seq_segurado_p bigint default NULL, ie_confirmacao_aut_p text default null) AS $body$
DECLARE


dt_encaixe_w				timestamp;
ds_consistencia_w			varchar(255);
cd_turno_w				varchar(1);
nr_seq_classif_w			bigint;
ie_forma_convenio_w			varchar(2);
cd_convenio_w				integer;
cd_categoria_w				varchar(10);
dt_validade_w				timestamp;
nr_doc_convenio_w			varchar(20);
cd_tipo_acomodacao_w			smallint;
nr_seq_agenda_w				agenda_paciente.nr_sequencia%type;
ie_proc_agenda_w			varchar(1);
cd_tipo_Agenda_w			bigint;
cd_procedimento_w			bigint;
ie_origem_proced_w			bigint;
qt_horario_livre_w			bigint;
qt_tentativas_w				bigint	:= 0;
ie_tipo_atendimento_w			smallint;
cd_conv_item_w				integer;
cd_categ_item_w				varchar(10);
cd_plano_item_w				varchar(10);
cd_convenio_ww				integer;
cd_categoria_ww				varchar(10);
cd_plano_ww				varchar(10);
nr_seq_proc_int_Assoc_w			bigint;
nr_seq_exames_adic_w			bigint;
ie_gerar_adicionais_w			varchar(1);
cd_proc_assoc_w				bigint;
ie_origem_proc_assoc_w			bigint;
nr_seq_proc_adic_w			bigint;
nr_seq_proc_int_item_adic_w		bigint;
cd_proc_item_Adic_w			bigint;
ie_origem_proc_item_adic_w		bigint;
nr_seq_exame_Adic_w			bigint;
ie_lado_adic_w				varchar(1);
cd_proc_adic_w				bigint;
ie_origem_proc_adic_w			bigint;
ie_lado_w				varchar(1);
ds_obs_encaixe_w			varchar(255) := '';
nr_seq_item_adic_w			bigint;
cd_medico_req_w				medico.cd_pessoa_fisica%type;
cd_procedimento_int_w			agenda_integrada_item.cd_procedimento%type;
ie_origem_proced_item_w			agenda_integrada_item.ie_origem_proced%type;
dt_entrega_w				agenda_integrada_item.dt_entrega_prevista%type;
cd_setor_exclusivo_w			agenda.cd_setor_exclusivo%type;
cd_usuario_convenio_w			agenda_integrada_conv_item.cd_usuario_convenio%type;
dt_validade_carteira_w			agenda_integrada_conv_item.dt_validade_carteira%type;
cd_usuario_convenio_ww			agenda_integrada.cd_usuario_convenio%type;
dt_validade_carteira_ww			agenda_integrada.dt_validade_carteira%type;
cd_procedencia_w			agenda_integrada.cd_procedencia%type;
nr_seq_turno_agecons_w			agenda_turno.nr_sequencia%type;
nr_seq_motivo_agendamento_w		agenda_integrada_item.nr_seq_motivo_agendamento%type;
nr_seq_tipo_classif_pac_w		agenda_integrada.nr_seq_tipo_classif_pac%type;
nm_paciente_w				agenda_integrada.nm_paciente%type;
dt_nascimento_w				agenda_integrada.dt_nascimento%type;
qt_idade_pac_w				agenda_integrada.qt_idade_pac%type;
nr_telefone_w				agenda_integrada.nr_telefone%type;
ie_anestesia_w				agenda_integrada_item.IE_ANESTESIA%type;
ie_inserir_especialidade_w		varchar(1);
cd_especialidade_ageint_w		agenda_integrada_item.cd_especialidade%type;
cd_medico_ww				medico.cd_pessoa_fisica%type;
cd_medico_req_ww			medico.cd_pessoa_fisica%type;

C03 CURSOR FOR
	SELECT	nr_Seq_proc_interno
	from	ageint_exame_associado
	where	nr_seq_ageint_item	= nr_seq_ageint_item_p
	order by 1;

C04 CURSOR FOR
	SELECT	nr_seq_proc_interno,
			ie_lado
	from	ageint_exame_adic_item
	where	nr_seq_item	= nr_seq_ageint_item_p;

C05 CURSOR FOR
	SELECT	nr_Seq_proc_interno,
			nr_sequencia
	from	ageint_itens_adicionais
	where	nr_seq_ageint_item	= nr_seq_ageint_item_p
	and		(nr_Seq_proc_interno IS NOT NULL AND nr_Seq_proc_interno::text <> '')
	--and	nr_seq_regra_lanc is null
	and		coalesce(ie_glosa,'X') <> 'T'
	order by 1;


BEGIN

-- Caso for encaixe sem paciente cadastrado, busca as informacoes do agendamento
if (coalesce(cd_pessoa_fisica_p::text, '') = '') then
	select 	max(NM_PACIENTE),
			max(DT_NASCIMENTO),
			max(QT_IDADE_PAC),
			max(NR_TELEFONE)
	into STRICT 	nm_paciente_w,
			dt_nascimento_w,
			qt_idade_pac_w,
			nr_telefone_w
	from 	agenda_integrada
	where 	nr_sequencia = nr_Seq_ageint_p;
end if;

if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (hr_encaixe_p IS NOT NULL AND hr_encaixe_p::text <> '') and (qt_duracao_p IS NOT NULL AND qt_duracao_p::text <> '') and ((cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') or (nm_paciente_w IS NOT NULL AND nm_paciente_w::text <> '')) and (cd_convenio_p IS NOT NULL AND cd_convenio_p::text <> '') and
	--(cd_medico_p is not null) and

	--(cd_medico_exec_p is not null)
	(nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	
	if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT', 'en_AU')) then
	   select max(cd_medico),
		max(cd_medico_req)
	   into STRICT cd_medico_ww,
	       cd_medico_req_ww
	   from	 agenda_integrada_item
	   where nr_sequencia = nr_seq_ageint_item_p
	   and	 ie_origem_agendamento = 'MS';
	end if;
	
	select 	nr_seq_motivo_agendamento
	into STRICT 	nr_seq_motivo_agendamento_w
	from	agenda_integrada_item
	where 	nr_sequencia = nr_seq_ageint_item_p;
	
	ie_gerar_adicionais_w := obter_param_usuario(869, 160, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_adicionais_w);
	ie_inserir_especialidade_w := obter_param_usuario(869, 445, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_inserir_especialidade_w);
	
	cd_convenio_ww	:= cd_convenio_p;
	cd_categoria_ww	:= cd_categoria_p;
	
	select	max(ie_tipo_atendimento),
			max(cd_plano),
			max(cd_usuario_convenio),
			max(dt_validade_carteira),
			max(cd_procedencia),
			max(nr_seq_tipo_classif_pac)
	into STRICT	ie_tipo_atendimento_w,
			cd_plano_ww,
			cd_usuario_convenio_ww,
			dt_validade_carteira_ww,
			cd_procedencia_w,
			nr_seq_tipo_classif_pac_w
	from	agenda_integrada
	where	nr_sequencia	= nr_Seq_ageint_p;

	select	max(cd_convenio),
			max(cd_categoria),
			max(cd_plano),
			max(cd_usuario_convenio),
			max(dt_validade_carteira)
	into STRICT	cd_conv_item_w,
			cd_categ_item_w,
			cd_plano_item_w,
			cd_usuario_convenio_w,
			dt_validade_carteira_w
	from	agenda_integrada_conv_item
	where	nr_seq_agenda_item	= nr_seq_ageint_item_p;

	if (cd_conv_item_w IS NOT NULL AND cd_conv_item_w::text <> '') then
		cd_convenio_ww			:= cd_conv_item_w;
		cd_categoria_ww			:= cd_categ_item_w;
		cd_plano_ww		    	:= cd_plano_item_w;
		cd_usuario_convenio_ww  := cd_usuario_convenio_w;
		dt_validade_carteira_ww := dt_validade_carteira_w;
	end if;	
	
	SELECT * FROM obter_proc_tab_interno_conv(
				nr_seq_proc_interno_p, cd_estabelecimento_p, cd_convenio_ww, cd_categoria_ww, cd_plano_ww, null, cd_procedimento_w, ie_origem_proced_w, null, dt_agenda_p, null, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
	
	select	max(cd_tipo_Agenda),
			max(cd_setor_exclusivo)
	into STRICT	cd_tipo_Agenda_w,
			cd_setor_exclusivo_w
	from	agenda
	where	cd_Agenda	= cd_agenda_p;
	
	/* obter horario agenda x encaixe */


	--dt_encaixe_w := to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || hr_encaixe_p || ':00','dd/mm/yyyy hh24:mi:ss');	
	dt_encaixe_w	:= dt_agenda_p;

	/* obter turno */

	select	obter_turno_horario_agenda(cd_agenda_p, dt_encaixe_w)
	into STRICT	cd_turno_w
	;
	
	select	max(ds_observacao)
	into STRICT	ds_obs_encaixe_w
	from	ageint_encaixe_usuario
	where	nr_seq_Ageint		= nr_seq_ageint_p;				
	
	select 	max(cd_procedimento),
			max(ie_origem_proced),
			max(cd_especialidade)
	into STRICT	cd_procedimento_int_w,
			ie_origem_proced_item_w,
			cd_especialidade_ageint_w
	from	agenda_integrada_item
	where	nr_sequencia	= nr_seq_ageint_item_p;
	
	if (cd_tipo_agenda_w = 2) then
		/* consistir horario */
		
		select	max(cd_medico_req)
		into STRICT	cd_medico_req_w
		from	agenda_integrada_item
		where	nr_sequencia = nr_seq_ageint_item_p;
		
		select	count(*)
		into STRICT	qt_horario_livre_w
		from	agenda_paciente
		where	cd_agenda	= cd_agenda_p
		and		hr_inicio	= dt_encaixe_w;
				
		while(qt_horario_livre_w > 0 and qt_tentativas_w < 30) loop
			begin
			qt_tentativas_w	:= qt_tentativas_w + 1;
			dt_encaixe_w	:= dt_encaixe_w + 1/86400;
			select	count(*)
			into STRICT	qt_horario_livre_w
			from	agenda_paciente
			where	cd_agenda	= cd_agenda_p
			and		hr_inicio	= dt_encaixe_w;
			end;
		end loop;
		
		select	max(ie_lado),
				max(ie_anestesia)
		into STRICT	ie_lado_w,
				ie_anestesia_w
		from	agenda_integrada_item
		where	nr_sequencia	= nr_seq_ageint_item_p;		
	
		/* obter classificacao */

		nr_seq_classif_w := obter_classif_encaixe_agenda(nr_seq_classif_w);

		/* obter sequencia */

		select	nextval('agenda_paciente_seq')
		into STRICT	nr_seq_agenda_w
		;

		/* gerar encaixe */

		insert into agenda_paciente(
						nr_sequencia,
						cd_agenda,
						dt_agenda,
						hr_inicio,
						nr_minuto_duracao,
						ie_status_agenda,
						cd_pessoa_fisica,
						nm_paciente,
						dt_nascimento_pac,
						qt_idade_paciente,
						nr_telefone,
						cd_convenio,
						cd_medico,
						cd_procedimento,
						ie_origem_proced,
						nr_seq_proc_interno,
						nr_seq_classif_agenda,
						cd_turno,
						ie_equipamento,
						dt_agendamento,
						nm_usuario_orig,
						cd_medico_exec,
						nm_usuario,
						dt_atualizacao,
						ie_encaixe,
						cd_setor_atendimento,
						cd_categoria,
						nm_usuario_confirm_encaixe,
						dt_confirm_encaixe,
						ie_tipo_atendimento,
						cd_plano,
						ie_lado,
						ds_observacao,
						cd_usuario_convenio,
						dt_validade_carteira,
						cd_procedencia,
						nr_seq_motivo_agendamento,
						nr_seq_tipo_classif_pac,
						ie_anestesia,
						cd_doenca_cid,
						cd_medico_req,
						nr_seq_segurado,
						ie_confirmacao_aut,
						dt_confirmacao,
						nm_usuario_confirm)					
					values (
						nr_seq_agenda_w,
						cd_agenda_p,
						trunc(dt_encaixe_w,'dd'),
						dt_encaixe_w,
						qt_duracao_p,
						'N',
						cd_pessoa_fisica_p,
						substr(CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  nm_paciente_w  ELSE obter_nome_pf(cd_pessoa_fisica_p) END , 1,60),
						CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  dt_nascimento_w  ELSE to_date(substr(obter_dados_pf(cd_pessoa_fisica_p,'DN'),1,10),'dd/mm/yyyy') END ,
						substr(CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  qt_idade_pac_w  ELSE obter_dados_pf(cd_pessoa_fisica_p,'I') END ,1,3),
						substr(CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  nr_telefone_w  ELSE obter_fone_pac_agenda(cd_pessoa_fisica_p) END ,1,255),
						cd_convenio_ww, 
						coalesce(cd_medico_ww, cd_medico_req_w),
						cd_procedimento_w,
						ie_origem_proced_w,
						nr_seq_proc_interno_p,
						nr_seq_classif_w,
						cd_turno_w,
						'N',
						clock_timestamp(),
						nm_usuario_p,
						cd_medico_encaixe_p,
						nm_usuario_p,
						clock_timestamp(),
						'S',
						cd_setor_atendimento_p,
						cd_categoria_ww,
						nm_usuario_confirm_encaixe_p,
						dt_confirm_encaixe_p,
						ie_tipo_atendimento_w,
						cd_plano_ww,
						ie_lado_w,
						substr(ds_obs_encaixe_w,1,255),
						cd_usuario_convenio_ww,
						dt_validade_carteira_ww,
						cd_procedencia_w,
						nr_seq_motivo_agendamento_w,
						nr_seq_tipo_classif_pac_w,
						ie_anestesia_w,
						cd_doenca_cid_p,
						cd_medico_req_ww,
						nr_seq_segurado_p,
						ie_confirmacao_aut_p,
					    dt_confirm_encaixe_p,
					    nm_usuario_confirm_encaixe_p);
						
		CALL gerar_agenda_paciente_hist(cd_agenda_p,nr_seq_agenda_w,'A',nm_usuario_p,wheb_mensagem_pck.get_texto(793118), null, null, clock_timestamp(), obter_perfil_ativo);						
						
		CALL Ageint_Gerar_Equip_Agenda(	nr_seq_agenda_w,
									nr_seq_ageint_item_p,
									nm_usuario_p);
		
		open C03;
		loop
		fetch C03 into
			nr_seq_proc_int_assoc_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin

			if (nr_seq_proc_int_assoc_w IS NOT NULL AND nr_seq_proc_int_assoc_w::text <> '') then
				SELECT * FROM obter_proc_tab_interno_conv(
					nr_seq_proc_int_assoc_w, cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, cd_plano_ww, null, cd_proc_assoc_w, ie_origem_proc_assoc_w, null, dt_agenda_p, null, null, null, null, null, null, null, null) INTO STRICT cd_proc_assoc_w, ie_origem_proc_assoc_w;
			end if;

			select	coalesce(max(nr_seq_Agenda),0) + 1
			into STRICT	nr_seq_proc_Adic_w
			from	agenda_paciente_proc
			where	nr_sequencia	= nr_seq_Agenda_w;

			insert into agenda_paciente_proc(nr_sequencia,
				nr_seq_agenda,
				dt_Atualizacao,
				nm_usuario,
				cd_procedimento,
				ie_origem_proced,
				nr_seq_proc_interno,
				nr_seq_agenda_princ,
				ie_lado,
				qt_procedimento)
			values (nr_seq_agenda_w,
				nr_seq_proc_Adic_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_proc_assoc_w,
				ie_origem_proc_assoc_w,
				nr_seq_proc_int_assoc_w,
				nr_seq_agenda_w,
				ie_lado_w,
				1);
			end;
		end loop;
		close C03;

		if (ie_gerar_adicionais_w = 'S') then
			open C05;
			loop
			fetch C05 into
				nr_seq_proc_int_item_adic_w,
				nr_seq_item_adic_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin

				if (nr_seq_proc_int_item_adic_w IS NOT NULL AND nr_seq_proc_int_item_adic_w::text <> '') then
					SELECT * FROM obter_proc_tab_interno_conv(
						nr_seq_proc_int_item_adic_w, cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, cd_plano_ww, null, cd_proc_item_adic_w, ie_origem_proc_item_adic_w, null, dt_agenda_p, null, null, null, null, null, null, null, null) INTO STRICT cd_proc_item_adic_w, ie_origem_proc_item_adic_w;
				end if;

				select	coalesce(max(nr_seq_Agenda),0) + 1
				into STRICT	nr_seq_proc_Adic_w
				from	agenda_paciente_proc
				where	nr_sequencia	= nr_seq_Agenda_w;

				insert into agenda_paciente_proc(nr_sequencia,
					nr_seq_agenda,
					dt_Atualizacao,
					nm_usuario,
					cd_procedimento,
					ie_origem_proced,
					nr_seq_proc_interno,
					nr_seq_agenda_princ,
					ie_lado,
					nr_seq_item_adic_ageint,
					qt_procedimento)
				values (nr_seq_agenda_w,
					nr_seq_proc_Adic_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_proc_item_adic_w,
					ie_origem_proc_item_adic_w,
					nr_seq_proc_int_item_adic_w,
					nr_seq_agenda_w,
					ie_lado_w,
					nr_seq_item_adic_w,
					1);
				end;
			end loop;
			close C05;
		end if;
		
		open C04;
		loop
		fetch C04 into
			nr_seq_exame_adic_w,
			ie_lado_adic_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			if (nr_seq_exame_adic_w IS NOT NULL AND nr_seq_exame_adic_w::text <> '') then
				SELECT * FROM obter_proc_tab_interno_conv(
					nr_seq_exame_adic_w, cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, cd_plano_ww, null, cd_proc_adic_w, ie_origem_proc_adic_w, null, dt_agenda_p, null, null, null, null, null, null, null, null) INTO STRICT cd_proc_adic_w, ie_origem_proc_adic_w;
			end if;

			select	coalesce(max(nr_seq_Agenda),0) + 1
			into STRICT	nr_seq_proc_Adic_w
			from	agenda_paciente_proc
			where	nr_sequencia	= nr_seq_Agenda_w;
			
			select	max(cd_medico_req)
			into STRICT	cd_medico_req_w
			from	agenda_integrada_item
			where	nr_sequencia = nr_seq_ageint_item_p;

			insert into agenda_paciente_proc(nr_sequencia,
				nr_seq_agenda,
				dt_Atualizacao,
				nm_usuario,
				cd_procedimento,
				ie_origem_proced,
				nr_seq_proc_interno,
				nr_seq_agenda_princ,
				ie_lado,
				qt_procedimento,
				cd_medico,
				cd_medico_req)
			values (nr_seq_agenda_w,
				nr_seq_proc_Adic_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_proc_adic_w,
				ie_origem_proc_adic_w,
				nr_seq_exame_adic_w,
				nr_seq_agenda_w,
				ie_lado_adic_w,
				1,
				cd_medico_encaixe_p,
				cd_medico_req_w);
			end;
			-- end;
		end loop;
		close C04;
		
		if (coalesce(cd_pessoa_fisica_p::text, '') = '') then
			CALL ageint_gravar_log_confirm(nr_seq_ageint_p, nr_Seq_Ageint_item_p, nr_seq_agenda_w, 'S', wheb_mensagem_pck.get_texto(793301)||'-'||wheb_mensagem_pck.get_texto(793492)||': '||cd_pessoa_fisica_p||', '||
													       wheb_mensagem_pck.get_texto(793493)||': '||substr(nm_paciente_w, 1,60)||', '||
													       wheb_mensagem_pck.get_texto(793494)||': '||to_char(clock_timestamp(),pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(cd_estabelecimento_p, nm_usuario_p)))||', '||
													       wheb_mensagem_pck.get_texto(793497)||': '||nm_usuario_p, nm_usuario_p);
		else
			CALL ageint_gravar_log_confirm(nr_seq_ageint_p, nr_Seq_Ageint_item_p, nr_seq_agenda_w, 'S', wheb_mensagem_pck.get_texto(793301)||'-'||wheb_mensagem_pck.get_texto(793492)||': '||cd_pessoa_fisica_p||', '||
													       wheb_mensagem_pck.get_texto(793493)||': '||substr(obter_nome_pf(cd_pessoa_fisica_p), 1,60)||', '||
													       wheb_mensagem_pck.get_texto(793494)||': '||to_char(clock_timestamp(),pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(cd_estabelecimento_p, nm_usuario_p)))||', '||
													       wheb_mensagem_pck.get_texto(793497)||': '||nm_usuario_p, nm_usuario_p);														
		end if;
						
		update	ageint_marcacao_usuario
		set		ie_Gerado			= 'S',
				nr_Seq_Agenda		= nr_Seq_Agenda_w
		where	cd_agenda			= cd_agenda_p
		and		hr_agenda			= dt_agenda_p
		and		nm_usuario			= nm_usuario_p
		and		nr_seq_ageint		= nr_seq_Ageint_p
		and		nr_seq_Ageint_item	= nr_Seq_Ageint_item_p
		and		coalesce(ie_encaixe,'N')	= 'S';
		
		/*insert into ageint_marcacao_usuario
			(nr_sequencia,
			nr_seq_ageint,
			nm_usuario,
			nr_seq_agenda,
			ie_gerado,
			nr_minuto_duracao,
			hr_agenda,
			cd_agenda,
			nr_seq_ageint_item)
		values
			(ageint_marcacao_usuario_seq.Nextval,
			nr_seq_Ageint_p,
			nm_usuario_p,
			nr_seq_agenda_w,
			'S',
			qt_duracao_p,
			dt_encaixe_w,
			cd_agenda_p, 
			nr_seq_ageint_item_p);*/
		
		select	obter_dt_entrega_laudo(nr_seq_ageint_p, nr_seq_proc_interno_p, cd_procedimento_int_w, ie_origem_proced_item_w, nm_usuario_p, dt_agenda_p, cd_setor_exclusivo_w, 'DE', nr_seq_agenda_w)
		into STRICT	dt_entrega_w
		;
		
		update	agenda_integrada_item
		set		nr_seq_agenda_exame	= nr_seq_agenda_w,
				dt_entrega_prevista = dt_entrega_w
		where	nr_sequencia		= nr_seq_ageint_item_p;
	else
	
		select	count(*)
		into STRICT	qt_horario_livre_w
		from	agenda_consulta
		where	cd_agenda	= cd_agenda_p
		and		dt_agenda	= dt_encaixe_w;
		
		while(qt_horario_livre_w > 0 and qt_tentativas_w < 30) loop
			begin
			qt_tentativas_w	:= qt_tentativas_w + 1;
			dt_encaixe_w	:= dt_encaixe_w + 1/86400;
			select	count(*)
			into STRICT	qt_horario_livre_w
			from	agenda_consulta
			where	cd_agenda	= cd_agenda_p
			and		dt_agenda	= dt_encaixe_w;
			end;
		end loop;
		
		select	nextval('agenda_consulta_seq')
		into STRICT	nr_seq_agenda_w
		;
		
		/*	obter nr_sequencia do turno da agenda, caso o encaixe esteja dentro de um turno valido*/

		nr_seq_turno_agecons_w := obter_turno_encaixe_agecons(cd_agenda_p,dt_encaixe_w);

		if ie_inserir_especialidade_w = 'N' then
				cd_especialidade_ageint_w := null;
			end if;
			
		begin	-- verificar se esta cadastrado na tabela de medicos
			select cd_pessoa_fisica
			into STRICT cd_medico_req_ww
			from medico
			where cd_pessoa_fisica = coalesce(cd_medico_req_ww, cd_medico_encaixe_p);
		exception
			when no_data_found then
			cd_medico_req_ww := null;
		end;
		
		/* gerar encaixe */

		insert into agenda_consulta(
					nr_sequencia,
					cd_agenda,
					dt_agenda,
					nr_minuto_duracao,
					ie_status_agenda,
					--ie_classif_agenda,
					cd_pessoa_fisica,
					nm_paciente,
					nr_telefone,
					cd_convenio,
					cd_medico,
					cd_procedimento,
					ie_origem_proced,
					nr_seq_proc_interno,
					ds_observacao,
					cd_turno,
					dt_agendamento,
					nm_usuario_origem,
					nm_usuario,
					dt_atualizacao,
					ie_encaixe,
					nm_usuario_confirm_encaixe,
					dt_confirm_encaixe,
					cd_medico_req,
					ie_classif_agenda,
					ie_tipo_atendimento,
					cd_plano,
					cd_categoria,
					cd_usuario_convenio,
					dt_validade_carteira,
					cd_procedencia,
					cd_setor_atendimento,
					nr_seq_turno,
					nr_seq_motivo_agendamento,
					cd_cid,
					cd_especialidade,
					nr_seq_segurado,
					ie_confirmacao_aut,
					dt_confirmacao,
					nm_usuario_confirm,
					dt_nascimento_pac)
				values (
					nr_seq_agenda_w,
					cd_agenda_p,
					dt_encaixe_w,
					qt_duracao_p,
					'N',
					--cd_classificacao_w,
					cd_pessoa_fisica_p,
					substr(CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  nm_paciente_w  ELSE obter_nome_pf(cd_pessoa_fisica_p) END ,1,60),
					substr(CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  nr_telefone_w  ELSE obter_fone_pac_agenda(cd_pessoa_fisica_p) END ,1,255),
					cd_convenio_ww,
					cd_medico_ww, 
					cd_procedimento_w,
					ie_origem_proced_w, 
					nr_seq_proc_interno_p, 
					substr(ds_obs_encaixe_w, 1,255),
					cd_turno_w,
					clock_timestamp(),
					nm_usuario_p,
					nm_usuario_p,
					clock_timestamp(),
					'S',
					nm_usuario_confirm_encaixe_p,
					dt_confirm_encaixe_p,
					cd_medico_req_ww,
					ie_classif_agenda_p,
					ie_tipo_atendimento_w,
					cd_plano_ww,
					cd_categoria_ww,
					cd_usuario_convenio_ww,
					dt_validade_carteira_ww,
					cd_procedencia_w,
					cd_setor_atendimento_p,
					nr_seq_turno_agecons_w,
					nr_seq_motivo_agendamento_w,
					cd_doenca_cid_p,
					cd_especialidade_ageint_w,
					nr_seq_segurado_p,
					ie_confirmacao_aut_p,
					dt_confirm_encaixe_p,
					nm_usuario_confirm_encaixe_p,
					CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  dt_nascimento_w  ELSE to_date(substr(obter_dados_pf(cd_pessoa_fisica_p,'DN'),1,10),'dd/mm/yyyy') END );
		
		if (coalesce(cd_pessoa_fisica_p::text, '') = '') then
			CALL ageint_gravar_log_confirm(nr_seq_ageint_p, nr_Seq_Ageint_item_p, nr_seq_agenda_w, 'S', wheb_mensagem_pck.get_texto(793293)||'/'||wheb_mensagem_pck.get_texto(793292)||'-'||wheb_mensagem_pck.get_texto(793492)||': '||cd_pessoa_fisica_p||', '||
													       wheb_mensagem_pck.get_texto(793493)||': '||substr(nm_paciente_w, 1,60)||', '||
													       wheb_mensagem_pck.get_texto(793494)||': '||to_char(clock_timestamp(),pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(cd_estabelecimento_p, nm_usuario_p)))||', '||
													       wheb_mensagem_pck.get_texto(793497)||': '||nm_usuario_p, nm_usuario_p);																		
		else
			CALL ageint_gravar_log_confirm(nr_seq_ageint_p, nr_Seq_Ageint_item_p, nr_seq_agenda_w, 'S', wheb_mensagem_pck.get_texto(793293)||'/'||wheb_mensagem_pck.get_texto(793292)||'-'||wheb_mensagem_pck.get_texto(793492)||': '||cd_pessoa_fisica_p||', '||
													       wheb_mensagem_pck.get_texto(793493)||': '||substr(obter_nome_pf(cd_pessoa_fisica_p), 1,60)||', '||
													       wheb_mensagem_pck.get_texto(793494)||': '||to_char(clock_timestamp(),pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(cd_estabelecimento_p, nm_usuario_p)))||', '||
													       wheb_mensagem_pck.get_texto(793497)||': '||nm_usuario_p, nm_usuario_p);			
		end if;
		
		CALL gerar_agenda_consulta_hist(cd_agenda_p,nr_seq_agenda_w,'A',nm_usuario_p,wheb_mensagem_pck.get_texto(793118), null, null, clock_timestamp());
		
		/*insert into ageint_marcacao_usuario
			(nr_sequencia,
			nr_seq_ageint,
			nm_usuario,
			nr_seq_agenda,
			ie_gerado,
			nr_minuto_duracao,
			hr_agenda,
			cd_agenda,
			nr_seq_ageint_item)
		values
			(ageint_marcacao_usuario_seq.Nextval,
			nr_seq_Ageint_p,
			nm_usuario_p,
			nr_seq_agenda_w,
			'S',
			qt_duracao_p,
			dt_encaixe_w,
			cd_agenda_p, 
			nr_seq_ageint_item_p);*/
		update	ageint_marcacao_usuario
		set		ie_Gerado			= 'S',
				nr_Seq_Agenda		= nr_Seq_Agenda_w
		where	cd_agenda			= cd_agenda_p
		and		hr_agenda			= dt_agenda_p
		and		nm_usuario			= nm_usuario_p
		and		nr_seq_ageint		= nr_seq_Ageint_p
		and		nr_seq_Ageint_item	= nr_Seq_Ageint_item_p
		and		coalesce(ie_encaixe,'N')	= 'S';
			
		select	obter_dt_entrega_laudo(nr_seq_ageint_p, nr_seq_proc_interno_p, cd_procedimento_int_w, ie_origem_proced_item_w, nm_usuario_p, dt_agenda_p, cd_setor_exclusivo_w, 'DE', nr_seq_agenda_w)
		into STRICT	dt_entrega_w
		;
		
		update	agenda_integrada_item
		set		nr_seq_agenda_cons	= nr_seq_agenda_w,
				ie_classif_agenda	= ie_classif_agenda_p,
				nr_minuto_duracao	= qt_duracao_p,
				dt_entrega_prevista = dt_entrega_w
		where	nr_sequencia		= nr_seq_ageint_item_p;
	end if;

end if;

commit;

nr_seq_encaixe_p := nr_seq_agenda_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_encaixe_ageint (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p text, qt_duracao_p bigint, cd_pessoa_fisica_p text, cd_convenio_p bigint, cd_categoria_p text, nr_seq_proc_interno_p bigint, nm_usuario_p text, cd_setor_atendimento_p bigint, nr_seq_ageint_item_p bigint, nr_Seq_ageint_p bigint, cd_medico_encaixe_p text, nr_seq_encaixe_p INOUT bigint, nm_usuario_confirm_encaixe_p text default null, dt_confirm_encaixe_p timestamp default null, ie_classif_agenda_p text default null, cd_doenca_cid_p text default null, nr_seq_segurado_p bigint default NULL, ie_confirmacao_aut_p text default null) FROM PUBLIC;

