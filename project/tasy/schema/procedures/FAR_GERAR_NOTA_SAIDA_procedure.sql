-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE far_gerar_nota_saida ( nr_seq_venda_p bigint, cd_local_estoque_p bigint, nm_usuario_p text, cd_setor_atendimento_p bigint, nr_sequencia_p INOUT bigint, ds_erro_p INOUT text, ds_erro_item_p INOUT text, ds_erro_nota_p INOUT text) AS $body$
DECLARE


dt_atualizacao_w		timestamp := clock_timestamp();
nr_sequencia_w		bigint;
cd_cgc_ordem_w		varchar(14);
cd_cgc_estab_w		varchar(14);
cd_estab_ordem_w		bigint;
nr_nota_fiscal_w		varchar(255);
nr_sequencia_nf_w		bigint	:= 9;
dt_emissao_w		timestamp;
dt_entrada_saida_w	timestamp;
vl_frete_w		double precision;
qt_itens_nota_w		bigint;
ds_erro_w		varchar(255) := '';
ds_erro_item_w		varchar(255) := '';
ds_erro_nota_w		varchar(255) := '';
cd_operacao_estoque_w	smallint;

cd_operacao_cons_consignado_w	smallint;
cd_operacao_cons_paciente_w	smallint;

vl_descontos_nf_w             	nota_fiscal.vl_descontos%type;
cd_estabelecimento_w		far_venda.cd_estabelecimento%type;
cd_pessoa_fisica_w		far_venda.cd_pessoa_fisica%type;
cd_cgc_w				far_venda.cd_cgc%type; --- ALTERADO
cd_condicao_pagto_w		far_venda.cd_condicao_pagamento%type;

cd_material_w			far_venda_item.cd_material%type;
nr_seq_lote_w			far_venda_item.nr_seq_lote_fornec%type;
qt_material_w			far_venda_item.qt_material%type;
pr_desconto_w			far_venda_item.pr_desconto%type;
vl_desconto_w			far_venda_item.vl_desconto%type;
vl_total_w				far_venda_item.vl_total%type;
vl_total_sem_desc_w		far_venda_item.vl_total%type;
vl_unitario_w			far_venda_item.vl_unitario%type;
nr_seq_item_w			far_venda_item.nr_sequencia%type;
cd_fornecedor_w			far_venda_item.cd_fornecedor%type;
cd_procedimento_w		far_venda_item.cd_procedimento%type;
ie_origem_proced_w		far_venda_item.ie_origem_proced%type;

cd_tributo_w			far_venda_item_trib.cd_tributo%type;
tx_tributo_w			far_venda_item_trib.tx_tributo%type;
vl_base_w			far_venda_item_trib.vl_base%type;
vl_tributo_w			far_venda_item_trib.vl_tributo%type;

cd_serie_nf_w	 		serie_nota_fiscal.cd_serie_nf%type;

cd_serie_nf_far_venda_w		serie_nota_fiscal.cd_serie_nf%type;

cd_operacao_nf_w			parametro_estoque.cd_oper_nf_far_venda%type;

cd_oper_nf_far_venda_w			parametro_estoque.cd_oper_nf_far_venda%type;

cd_nat_oper_nf_w			operacao_nota.cd_natureza_operacao%type;

cd_unidade_medida_compra_w	varchar(30);
ds_material_direto_w		varchar(255);
ds_observacao_item_w		varchar(255);
cd_centro_custo_w			integer;
cd_conta_contabil_w		varchar(20);
pr_desc_financ_w			double precision;
dt_prevista_entrega_w		timestamp;
nr_seq_conta_financeira_w		bigint;
nr_item_nf_w			integer;
cd_unidade_medida_estoque_w	varchar(30);
qt_prevista_entrega_w		double precision;
qt_item_estoque_w			double precision;
qt_conv_compra_estoque_w		double precision;
cd_material_estoque_w		integer;
ie_tipo_conta_w			integer;
cd_centro_conta_w			integer;
qt_nota_w			integer;
ie_indeterminado_w			varchar(2) := 'N';
dt_validade_w			timestamp;
ds_lote_fornec_w			varchar(20);
ds_barra_w			varchar(255);
ie_calcula_nf_w			varchar(01);
ie_consiste_saldo_w		varchar(1);
ie_consignado_operacao_w		varchar(1) := '0';
cd_fornecedor_consig_w		varchar(14);
ie_tipo_saldo_w			varchar(1);
ie_entrada_saida_w			operacao_estoque.ie_entrada_saida%type;
ie_atualiza_estoque_w		operacao_estoque.ie_atualiza_estoque%type;
cd_local_estoque_w		smallint;
cd_local_nf_far_venda_w		parametro_estoque.cd_local_nf_far_venda%type;
cd_tipo_relacao_w		far_venda.cd_tipo_relacao%type;
cd_uso_cfdi_w			far_venda.cd_uso_cfdi%type;
qt_existe_w                     integer;
ie_impeditivo_w			nota_fiscal_consist.ie_forma_consistencia%type;

c00 CURSOR FOR
	SELECT	cd_material,
		nr_seq_lote_fornec,
		qt_material,
		pr_desconto,
		vl_desconto,
		(vl_unitario * qt_material) vl_total_sem_desc, -- ANTES BUSCAVA PELO VALOR TOTAL (VL_TOTAL), ONDE JA ESTA DIMINUIDO O VALOR DO DESCONTO.
		vl_total,
		vl_unitario,
		nr_sequencia,
		cd_fornecedor,
		cd_procedimento,
		ie_origem_proced
	from	far_venda_item
	where	nr_seq_venda = nr_seq_venda_p;

c01 CURSOR FOR
	SELECT	cd_tributo,
		tx_tributo,
		vl_base,
		vl_tributo
	from	far_venda_item_trib
	where	nr_seq_item = nr_seq_item_w;

c03 CURSOR FOR
SELECT	cd_material,
	qt_item_estoque,
	cd_unidade_medida_estoque,
	cd_lote_fabricacao,
	dt_validade,
	cd_conta_contabil,
	cd_material_estoque,
	cd_fornecedor_consig,
	nr_seq_lote_fornec
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_w
and		(cd_material IS NOT NULL AND cd_material::text <> ''); --- ALTERADO -- ESTAVA TRAZENDO PROCEDIMENTO E INSERINDO NA MOVIMENTO_ESTOQUE
BEGIN
dt_emissao_w		:= trunc(dt_atualizacao_w, 'dd');

select	cd_estabelecimento,
	cd_pessoa_fisica,
	cd_condicao_pagamento,
	cd_cgc, --- ALTERADO
	clock_timestamp() dt_venda,
	cd_tipo_relacao,
	cd_uso_cfdi
into STRICT	cd_estabelecimento_w,
	cd_pessoa_fisica_w,
	cd_condicao_pagto_w,
	cd_cgc_w, --- ALTERADO
	dt_entrada_saida_w,
	cd_tipo_relacao_w,
	cd_uso_cfdi_w
from	far_venda
where	nr_sequencia = 	nr_seq_venda_p;

begin
select	cd_oper_nf_far_venda,
	coalesce(cd_local_nf_far_venda, cd_local_estoque_p),
	cd_serie_nf_far_venda,
	cd_operacao_cons_consignado,
	cd_operacao_cons_paciente
into STRICT	cd_operacao_nf_w,
	cd_local_estoque_w,
	cd_serie_nf_w,
	cd_operacao_cons_consignado_w,
	cd_operacao_cons_paciente_w
from	parametro_estoque
where	cd_estabelecimento = cd_estabelecimento_w;
exception
when others then
	/*'Parametros de estoque nao cadastrados corretamente'*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(184571);
end;

begin
select obter_valor_param_usuario(1608, 1, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),
       obter_valor_param_usuario(1608, 5, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),
       obter_valor_param_usuario(1608, 6, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)
into STRICT   cd_oper_nf_far_venda_w,
       cd_local_nf_far_venda_w,
       cd_serie_nf_far_venda_w
;
exception
when others then
	cd_oper_nf_far_venda_w 	:= null;
	cd_local_nf_far_venda_w := null;
	cd_serie_nf_far_venda_w := null;
end;

if (cd_oper_nf_far_venda_w IS NOT NULL AND cd_oper_nf_far_venda_w::text <> '') then
	cd_operacao_nf_w := cd_oper_nf_far_venda_w;
end if;

if (cd_local_nf_far_venda_w IS NOT NULL AND cd_local_nf_far_venda_w::text <> '') then
	cd_local_estoque_w := cd_local_nf_far_venda_w;
end if;

if (cd_serie_nf_far_venda_w IS NOT NULL AND cd_serie_nf_far_venda_w::text <> '') then
	cd_serie_nf_w := cd_serie_nf_far_venda_w;
end if;

if (coalesce(cd_serie_nf_w::text, '') = '') then
	/*'Parametros de estoque nao cadastrados corretamente'*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(184571);
end if;

if (cd_operacao_nf_w IS NOT NULL AND cd_operacao_nf_w::text <> '') then
	begin
	select	cd_natureza_operacao,
		cd_operacao_estoque
	into STRICT	cd_nat_oper_nf_w,
		cd_operacao_estoque_w
	from	operacao_nota
	where	cd_operacao_nf = cd_operacao_nf_w;
	
	if (coalesce(cd_nat_oper_nf_w::text, '') = '') then
		/*'E necessario informar a natureza de operacao da nota.'*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(229592);
	end if;
	end;
else
	CALL wheb_mensagem_pck.exibir_mensagem_abort(348208);
end if;

select	ie_consignado,
	CASE WHEN coalesce(ie_entrada_saida,'S')='S' THEN 'E'  ELSE 'S' END ,
	CASE WHEN coalesce(ie_consignado,'0')='1' THEN  'N' WHEN coalesce(ie_consignado,'0')='8' THEN  'N' WHEN coalesce(ie_consignado,'0')='0' THEN  ie_atualiza_estoque  ELSE 'S' END
into STRICT	ie_consignado_operacao_w,
	ie_entrada_saida_w,
	ie_atualiza_estoque_w
from	operacao_estoque
where	cd_operacao_estoque = cd_operacao_estoque_w;

if (ie_atualiza_estoque_w = 'S') then
	/*'A operacao de estoque vinculada na operacao da nota esta definida para atualizar o estoque, porem a mesma nao pode realizar essa acao.'*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(348214);
end if;

cd_cgc_estab_w		:=	substr(obter_cgc_estabelecimento(cd_estabelecimento_w),1,14);

ie_calcula_nf_w		:=	'N';
ie_consiste_saldo_w	:= 	'N';

select	nextval('nota_fiscal_seq')
into STRICT	nr_sequencia_w
;

begin
select	nr_ultima_nf + 1
into STRICT	nr_nota_fiscal_w
from	serie_nota_fiscal
where	cd_serie_nf = cd_serie_nf_w
and	cd_estabelecimento = cd_estabelecimento_w;
exception
when others then
	nr_nota_fiscal_w	:= '0';
end;

if (coalesce(nr_nota_fiscal_w, '0') = '0') then
	begin
	select	coalesce(max(somente_numero(nr_ultima_nf)), nr_sequencia_w) + 1
	into STRICT	nr_nota_fiscal_w
	from	serie_nota_fiscal
	where	cd_serie_nf 		= cd_serie_nf_w
	and	cd_estabelecimento 	= cd_estabelecimento_w;

	select	count(*)
	into STRICT	qt_nota_w
	from	nota_fiscal
	where	cd_estabelecimento = cd_estabelecimento_w
	and	cd_cgc_emitente = cd_cgc_estab_w
	and	cd_serie_nf = cd_serie_nf_w
	and	nr_nota_fiscal = nr_nota_fiscal_w;

	if (qt_nota_w > 0) then
		select (coalesce(max(somente_numero(nr_nota_fiscal)),'0')+1)
		into STRICT	nr_nota_fiscal_w
		from	nota_fiscal
		where	cd_estabelecimento = cd_estabelecimento_w
		and	cd_cgc_emitente = cd_cgc_estab_w
		and	cd_serie_nf = cd_serie_nf_w;
	end if;
	end;
else
	begin

	select	count(*)
	into STRICT	qt_nota_w
	from	nota_fiscal
	where	cd_estabelecimento = cd_estabelecimento_w
	and	cd_cgc_emitente = cd_cgc_estab_w
	and	cd_serie_nf = cd_serie_nf_w
	and	nr_nota_fiscal = nr_nota_fiscal_w;

	if (qt_nota_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(181246);
	end if;
	end;
end if;

insert into nota_fiscal(
	nr_sequencia,		cd_estabelecimento,
	cd_cgc_emitente,		cd_serie_nf,
	nr_nota_fiscal,		nr_sequencia_nf,
	cd_operacao_nf,		dt_emissao,
	dt_entrada_saida,		ie_acao_nf,
	ie_emissao_nf,		ie_tipo_frete,
	vl_mercadoria,		vl_total_nota,
	qt_peso_bruto,		qt_peso_liquido,
	dt_atualizacao,		nm_usuario,
	cd_condicao_pagamento,	cd_cgc,
	cd_pessoa_fisica,		vl_ipi,
	vl_descontos,		vl_frete,
	vl_seguro,		vl_despesa_acessoria,
	ds_observacao,		cd_natureza_operacao,
	vl_desconto_rateio,		ie_situacao,
	nr_interno_conta,		nr_seq_protocolo,
	ds_obs_desconto_nf,	nr_seq_classif_fiscal,
	ie_tipo_nota,		nr_ordem_compra,
	ie_entregue_bloqueto,	cd_setor_digitacao,
	nr_seq_modelo,		nr_seq_far_venda)
values ( nr_sequencia_w,		cd_estabelecimento_w,
	cd_cgc_estab_w,		cd_serie_nf_w,
	nr_nota_fiscal_w,		nr_sequencia_nf_w,
	cd_operacao_nf_w,		dt_emissao_w,
	dt_entrada_saida_w,	'1',
	'0',			'0',
	0,			0,
	0,			0,
	dt_atualizacao_w,		nm_usuario_p,
	cd_condicao_pagto_w,	cd_cgc_w, --- ALTERADO
	cd_pessoa_fisica_w,	0,
	0,			0,
	0,			0,
	'',			cd_nat_oper_nf_w,
	0,			'1',
	null,			null,
	null,			null,
	'SF',			'',
	'N',			cd_setor_atendimento_p,
	null,			nr_seq_venda_p);

CALL gerar_historico_nota_fiscal(nr_sequencia_w, nm_usuario_p, '17', wheb_mensagem_pck.get_texto(277520));

open c00;
	loop
	fetch c00 into
	cd_material_w,
	nr_seq_lote_w,
	qt_material_w,
	pr_desconto_w,
	vl_desconto_w,
	vl_total_sem_desc_w,
	vl_total_w,
	vl_unitario_w,
	nr_seq_item_w,
	cd_fornecedor_w,
	cd_procedimento_w,
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on c00 */
	begin

	if (nr_seq_lote_w IS NOT NULL AND nr_seq_lote_w::text <> '') then
		select	dt_validade,
			ds_lote_fornec,
			CASE WHEN coalesce(cd_barra_material,'X')='X' THEN  lpad(nr_sequencia || nr_digito_verif,11,0)  ELSE cd_barra_material END  ds_barra
		into STRICT	dt_validade_w,
			ds_lote_fornec_w,
			ds_barra_w
		from 	material_lote_fornec
		where	nr_sequencia = nr_seq_lote_w;

		if (coalesce(dt_validade_w::text, '') = '') then
			ie_indeterminado_w := 'S';
		end if;
	else
		dt_validade_w 		:= '';
		ds_lote_fornec_w	:= '';
		ds_barra_w		:= '';
	end if;

	select	coalesce(max(nr_item_nf), 0) + 1
	into STRICT	nr_item_nf_w
	from	nota_fiscal_item
	where	nr_sequencia = nr_sequencia_w;

	if (coalesce(cd_material_w,0) <> 0) and -------- ALTERADO
		(coalesce(cd_procedimento_w,0) = 0) then
		select	substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UME'),1,30) cd_unidade_medida_estoque,
			qt_conv_compra_estoque,
			cd_material_estoque
		into STRICT	cd_unidade_medida_estoque_w,
			qt_conv_compra_estoque_w,
			cd_material_estoque_w
		from	material
		where	cd_material = cd_material_w;
	end if;

	cd_centro_custo_w	:=	null;
	ie_tipo_conta_w		:= 2;
	
	if (coalesce(cd_procedimento_w,0) <> 0) and (coalesce(ie_origem_proced_w,0) <> 0) then		
		SELECT * FROM define_conta_procedimento(	
			cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_conta_w, null, null, null, null, null, null, null, trunc(dt_atualizacao_w), cd_conta_contabil_w, cd_centro_custo_w, null, 'N') INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
	else
		SELECT * FROM define_conta_material(
			cd_estabelecimento_w, cd_material_w, ie_tipo_conta_w, 0, 0, 0, 0, 0, 0, 0, cd_local_estoque_w, cd_operacao_nf_w, trunc(dt_atualizacao_w), cd_conta_contabil_w, cd_centro_conta_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_conta_w;
	end if;

	nr_seq_conta_financeira_w := obter_conta_financeira(
		ie_entrada_saida_w, cd_estabelecimento_w, cd_material_w, null, null, null, null, cd_cgc_estab_w, cd_centro_custo_w, nr_seq_conta_financeira_w, null, cd_operacao_nf_w, 'PJ', null, null, null, null, null, null, null, null, null, cd_local_estoque_w, '', '', '', '', '', null);

	insert into nota_fiscal_item(
		nr_sequencia,		cd_estabelecimento,
		cd_cgc_emitente,		cd_serie_nf,
		nr_nota_fiscal,		nr_sequencia_nf,
		nr_item_nf,		cd_natureza_operacao,
		qt_item_nf,		vl_unitario_item_nf,
		vl_total_item_nf,		dt_atualizacao,
		nm_usuario,		vl_frete,
		vl_desconto,		vl_despesa_acessoria,
		cd_material,		cd_local_estoque,
		ds_observacao,		ds_complemento,
		cd_unidade_medida_compra,	qt_item_estoque,
		cd_unidade_medida_estoque,	cd_conta_contabil,
		vl_desconto_rateio,		vl_seguro,
		cd_material_estoque,
		nr_ordem_compra,		vl_liquido,
		pr_desconto,		nr_item_oci,
		dt_entrega_ordem,		nr_seq_conta_financ,
		pr_desc_financ,		cd_lote_fabricacao,
		ie_indeterminado,		dt_validade,
		nr_seq_lote_fornec,		cd_fornecedor_consig,
		nr_seq_far_venda_item,	cd_procedimento,		
		ie_origem_proced,
		cd_sequencia_parametro)
	values (	nr_sequencia_w,		cd_estabelecimento_w,
		cd_cgc_estab_w,		cd_serie_nf_w,
		nr_nota_fiscal_w,		nr_sequencia_nf_w,
		nr_item_nf_w,		cd_nat_oper_nf_w,
		qt_material_w,		vl_unitario_w,
		vl_total_sem_desc_w,		dt_atualizacao_w,
		nm_usuario_p, 		coalesce(vl_frete_w,0),
		coalesce(vl_desconto_w,0),	0,
		cd_material_w, 		cd_local_estoque_w,
		'',			ds_material_direto_w,
		cd_unidade_medida_estoque_w,	qt_material_w,
		cd_unidade_medida_estoque_w,	cd_conta_contabil_w,
		0,				0,
		cd_material_estoque_w,
		null,			vl_total_sem_desc_w,
		0,			0,
		dt_atualizacao_w,		CASE WHEN coalesce(nr_seq_conta_financeira_w,0)=0 THEN null  ELSE nr_seq_conta_financeira_w END ,
		0,			ds_lote_fornec_w,
		ie_indeterminado_w,	dt_validade_w,
		nr_seq_lote_w,		cd_fornecedor_w,
		nr_seq_item_w,		cd_procedimento_w,		
		ie_origem_proced_w,
		philips_contabil_pck.get_parametro_conta_contabil);

	-- Atribuir o valor de desconto na NOTA FISCAL
	vl_descontos_nf_w := coalesce(vl_descontos_nf_w,0) + coalesce(vl_desconto_w,0);

	open c01;
	loop
	fetch c01 into
		cd_tributo_w,
		tx_tributo_w,
		vl_base_w,
		vl_tributo_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		insert into nota_fiscal_item_trib(	
			cd_cgc_emitente,	cd_estabelecimento,
			cd_serie_nf,		cd_tributo,
			dt_atualizacao,		dt_conferencia,
			ie_exporta_xml,		ie_rateio,
			ie_tributacao_csosn,	ie_tributacao_cst,
			nm_usuario,		nm_usuario_conf,
			nr_item_nf,		nr_nota_fiscal,
			nr_seq_sit_trib,		nr_sequencia,
			nr_sequencia_nf,		tx_tributo,
			vl_base_adic,		vl_base_calculo,
			vl_base_nao_retido,	vl_reducao_base,
			vl_trib_adic,		vl_trib_nao_retido,
			vl_tributo)
		values (	null,			cd_estabelecimento_w,
			cd_serie_nf_w,		cd_tributo_w,
			dt_atualizacao_w,		null,
			null,			'N',
			null,			null,
			nm_usuario_p,		nm_usuario_p,
			nr_item_nf_w,		nr_nota_fiscal_w,
			null,			nr_sequencia_w,
			nr_sequencia_w,		tx_tributo_w,
			0,			vl_base_w,
			0,			null,
			0,			0,
			vl_tributo_w);
		end;
	end loop;
	close c01;

	if (ds_barra_w IS NOT NULL AND ds_barra_w::text <> '') then
		begin
		update	nota_fiscal_item
		set	cd_barra_material	= ds_barra_w
		where	nr_item_nf 	= nr_item_nf_w
		and	nr_sequencia 	= nr_sequencia_w
		and	(cd_material IS NOT NULL AND cd_material::text <> '')
		and	coalesce(ds_barras::text, '') = '';
		end;
	end if;
	
	CALL far_atualizar_total_item(nr_seq_item_w, nm_usuario_p);
	end;
end loop;
close c00;

--- Atualizar a nota fiscal com o valor de desconto
update	nota_fiscal
set	vl_descontos	= vl_descontos_nf_w
where	nr_sequencia 	= nr_sequencia_w;

select 	count(*)
into STRICT	qt_existe_w
from   	nota_fiscal
where  	nr_sequencia = nr_sequencia_w;

if (qt_existe_w > 0) then

	if (cd_uso_cfdi_w IS NOT NULL AND cd_uso_cfdi_w::text <> '') then

		insert	into fis_uso_cfdi(nr_sequencia,
			nr_seq_nota,
			dt_atualizacao,
			nm_usuario,
			cd_uso_cfdi,
			cd_estabelecimento)
		values (	nextval('fis_uso_cfdi_seq'),
			nr_sequencia_w,
			clock_timestamp(),			
			nm_usuario_p,		
			cd_uso_cfdi_w,
			cd_estabelecimento_w);


	end if;

	if (cd_tipo_relacao_w IS NOT NULL AND cd_tipo_relacao_w::text <> '') then
	
		insert  into fis_tipo_relacao(nr_sequencia,
			nr_seq_nota,
			dt_atualizacao,
			nm_usuario,
			cd_tipo_relacao,
			cd_estabelecimento)
		values (	nextval('fis_tipo_relacao_seq'),
			nr_sequencia_w,
			clock_timestamp(),			
			nm_usuario_p,		
			cd_tipo_relacao_w,
			cd_estabelecimento_w);


	end if;

end if;


select 	count(*)
into STRICT	qt_itens_nota_w
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_w;

if (qt_itens_nota_w = 0) then
	begin
	
	delete  FROM fis_tipo_relacao
	where 	nr_seq_nota = nr_sequencia_w;

	delete  FROM fis_uso_cfdi
	where 	nr_seq_nota = nr_sequencia_w;
	
	delete	FROM nota_fiscal
	where	nr_sequencia = nr_sequencia_w;
	
	nr_sequencia_w	:= 0;
	ds_erro_w	:= wheb_mensagem_pck.get_texto(277522);
	end;
else
	begin
	
	delete 	FROM w_nota_fiscal_consist
	where	nm_usuario = nm_usuario_p;
	
	CALL atualiza_total_nota_fiscal(nr_sequencia_w, nm_usuario_p);
	CALL gerar_vencimento_nota_fiscal(nr_sequencia_w, nm_usuario_p);
	--ratear_valores_nf(nr_sequencia_w, nm_usuario_p);
	SELECT * FROM consistir_nota_fiscal(nr_sequencia_w, nm_usuario_p, ds_erro_item_w, ds_erro_nota_w) INTO STRICT ds_erro_item_w, ds_erro_nota_w;

	select coalesce(max(ie_forma_consistencia),'N')
	into STRICT ie_impeditivo_w
	from nota_fiscal_consist
	where nr_seq_nota = nr_sequencia_w
	and ie_forma_consistencia = 'S';
	
	insert into w_nota_fiscal_consist(
		nr_sequencia,
		ds_titulo,
		ds_log,
		dt_atualizacao,
		nm_usuario)
	SELECT	nextval('w_nota_fiscal_consist_seq'),
		ds_consistencia,
		coalesce(ds_observacao,'-'),
		dt_atualizacao_w,
		nm_usuario_p
	from	nota_fiscal_consist
	where	nr_seq_nota = nr_sequencia_w
	and ie_forma_consistencia = 'S';
	end;
end if;

if (qt_itens_nota_w > 0) and (coalesce(ds_erro_item_w::text, '') = '') and (coalesce(ds_erro_nota_w::text, '') = '') and (coalesce(ds_erro_w::text, '') = '')	and (ie_impeditivo_w = 'N') then
	begin
	CALL atualizar_nota_fiscal(nr_sequencia_w,'I',nm_usuario_p, 3);
	
	open c03;
	loop
	fetch c03 into	
		cd_material_w,
		qt_material_w,
		cd_unidade_medida_estoque_w,
		ds_lote_fornec_w,
		dt_validade_w,
		cd_conta_contabil_w,
		cd_material_estoque_w,
		cd_fornecedor_w,
		nr_seq_lote_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		if (cd_fornecedor_w IS NOT NULL AND cd_fornecedor_w::text <> '') and (substr(obter_se_mat_consignado(cd_material_w),1,1) in ('1','2')) then
			cd_operacao_estoque_w	:=	cd_operacao_cons_consignado_w;
		else		
			cd_operacao_estoque_w	:=	cd_operacao_cons_paciente_w;
		end if;
		
		insert into movimento_estoque(
			nr_movimento_estoque,
			cd_estabelecimento,
			cd_local_estoque,
			dt_movimento_estoque,
			cd_operacao_estoque,
			cd_acao,
			cd_material,
			dt_mesano_referencia,
			qt_movimento,
			dt_atualizacao,
			nm_usuario,
			ie_origem_documento,
			nr_documento,
			cd_unidade_medida_estoque,
			cd_setor_atendimento,
			dt_contabil,
			cd_lote_fabricacao,
			dt_validade,
			qt_estoque,
			cd_unidade_med_mov,
			cd_conta_contabil,
			cd_material_estoque,
			cd_fornecedor,
			nr_seq_tab_orig,
			nr_seq_lote_fornec)
		values (	nextval('movimento_estoque_seq'),
			cd_estabelecimento_w,
			cd_local_estoque_w,
			dt_entrada_saida_w,
			cd_operacao_estoque_w,
			'1',
			cd_material_w,
			trunc(dt_entrada_saida_w,'mm'),
			qt_material_w,
			dt_atualizacao_w,
			nm_usuario_p,
			'1',
			substr(to_char(nr_seq_venda_p),1,15),
			cd_unidade_medida_estoque_w,
			cd_setor_atendimento_p,
			dt_entrada_saida_w,
			ds_lote_fornec_w,
			dt_validade_w,
			qt_material_w,
			cd_unidade_medida_estoque_w,
			cd_conta_contabil_w,
			cd_material_estoque_w,
			cd_fornecedor_w,
			nr_sequencia_w,
			nr_seq_lote_w);	
		end;
	end loop;
	close c03;
	end;
end if;

if	((ie_impeditivo_w = 'S') and (ds_erro_item_w IS NOT NULL AND ds_erro_item_w::text <> '') or (ds_erro_nota_w IS NOT NULL AND ds_erro_nota_w::text <> '')) then
	begin
	
	delete  FROM fis_tipo_relacao
	where 	nr_seq_nota = nr_sequencia_w;

	delete  FROM fis_uso_cfdi
	where 	nr_seq_nota = nr_sequencia_w;
	
	delete	FROM nota_fiscal
	where	nr_sequencia = nr_sequencia_w;

	nr_sequencia_w	:= 0;
	end;
end if;


nr_sequencia_p	:= nr_sequencia_w;
ds_erro_p	:= substr(ds_erro_w,1,255);
ds_erro_item_p	:= substr(ds_erro_item_w,1,255);
ds_erro_nota_p	:= substr(ds_erro_nota_w,1,255);

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE far_gerar_nota_saida ( nr_seq_venda_p bigint, cd_local_estoque_p bigint, nm_usuario_p text, cd_setor_atendimento_p bigint, nr_sequencia_p INOUT bigint, ds_erro_p INOUT text, ds_erro_item_p INOUT text, ds_erro_nota_p INOUT text) FROM PUBLIC;

