-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE rxt_gerar_agenda_equip (nr_seq_equip_p bigint, dt_agenda_p timestamp, ie_recalcular_p text, nm_usuario_p text) AS $body$
DECLARE


ie_dia_semana_w		smallint;
nr_seq_regra_w		bigint;
hr_inicial_dia_w	timestamp;
hr_final_dia_w		timestamp;
hr_inicial_intervalo_w	timestamp := NULL;
hr_final_intervalo_w	timestamp := NULL;
nr_minuto_duracao_w	bigint;
hr_horario_w		timestamp;
ie_horario_w		varchar(1);
ie_bloqueio_w		varchar(1) := 'N';

ie_status_agenda_w  	varchar(1) := 'L';
ds_motivo_bloqueio_w  	varchar(35);

nr_seq_agenda_w		bigint;
ie_tipo_agenda_w	varchar(1);
nr_seq_agenda_del_w	bigint;
dt_agenda_w		timestamp;
ie_dia_trabalho_w	varchar(1);

hr_horario_dia_w	timestamp;
hr_horario_dia_atual_w	timestamp;

dt_inicio_vigencia_w timestamp;
dt_final_vigencia_w timestamp;

/* obter regra horarios equipamento */

c01 CURSOR FOR
SELECT	nr_sequencia,
	pkg_date_utils.Get_DateTime(dt_agenda_p,hr_inicial),
	pkg_date_utils.Get_DateTime(dt_agenda_p,hr_final),
	nr_minuto_duracao,
	ie_tipo_agenda,
	dt_inicio_vigencia,
	dt_final_vigencia
FROM	rxt_equip_regra_agenda
WHERE	nr_seq_equipamento	= nr_seq_equip_p
AND	((dt_dia_semana		= ie_dia_semana_w) OR (dt_dia_semana = 9 AND ie_dia_trabalho_w = 'S'))
AND	TO_CHAR(hr_inicial,'hh24:mi:ss')	< TO_CHAR(hr_final,'hh24:mi:ss')
AND	((coalesce(dt_inicio_vigencia::text, '') = '') 	OR (trunc(dt_inicio_vigencia)	<= dt_agenda_w))
AND	((coalesce(dt_final_vigencia::text, '') = '') 	OR (trunc(dt_final_vigencia)	>= dt_agenda_w))
AND	coalesce(nr_minuto_duracao,0)	> 0
and 	(((ie_feriado = 'N')  and (obter_se_feriado(obter_estabelecimento_ativo, dt_agenda_w) = 0)) or (ie_feriado = 'S'));


c02 CURSOR FOR
	SELECT	nr_sequencia
	FROM	rxt_agenda a
	WHERE	a.nr_seq_equipamento = nr_seq_equip_p
	--AND	TRUNC(a.dt_agenda,'dd') = TRUNC(dt_agenda_p,'dd')
	AND	a.dt_agenda between pkg_date_utils.start_of(dt_agenda_p,'DD', 0) and pkg_date_utils.start_of(coalesce(dt_agenda_p,clock_timestamp()), 'DD', 0) + 86399/86400
	AND	a.ie_status_agenda in ('L','B');


BEGIN
IF (nr_seq_equip_p IS NOT NULL AND nr_seq_equip_p::text <> '') AND (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') AND (ie_recalcular_p IS NOT NULL AND ie_recalcular_p::text <> '') AND (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') THEN

	dt_agenda_w	:= pkg_date_utils.start_of(dt_agenda_p, 'DD', 0);
	
	/* obter dia semana */

	ie_dia_semana_w	:= obter_cod_dia_semana(dt_agenda_p);

	/*obter se dia de trabalho*/

	select CASE WHEN pkg_date_utils.is_business_day(dt_agenda_p)=0 THEN  'N' WHEN pkg_date_utils.is_business_day(dt_agenda_p)=1 THEN  'S' END
	into STRICT ie_dia_trabalho_w
	;
	
	/* excluir horarios livres */

	IF (ie_recalcular_p = 'S') THEN

		OPEN C02;
		LOOP
		FETCH C02 INTO
			nr_seq_agenda_del_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			BEGIN
			DELETE
			FROM	rxt_agenda_fase
			WHERE	NR_SEQ_AGENDA_RXT = nr_seq_agenda_del_w;

      DELETE
      FROM    rxt_campo_aplic
      WHERE   nr_seq_agenda = nr_seq_agenda_del_w;

			DELETE
			FROM	rxt_agenda a
			WHERE	nr_Sequencia = nr_seq_agenda_del_w;

			END;
		END LOOP;
		CLOSE C02;

	END IF;

	/* gerar horarios equipamento */

	OPEN c01;
	LOOP
	FETCH c01 INTO	nr_seq_regra_w,
			hr_inicial_dia_w,
			hr_final_dia_w,
			nr_minuto_duracao_w,
			ie_tipo_agenda_w,
			dt_inicio_vigencia_w,
			dt_final_vigencia_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN

		hr_horario_w := hr_inicial_dia_w;

		WHILE(hr_horario_w < hr_final_dia_w) LOOP
			BEGIN

			IF	((coalesce(dt_inicio_vigencia_w::text, '') = '' or hr_horario_w >= dt_inicio_vigencia_w)
				and (coalesce(dt_final_vigencia_w::text, '') = '' or hr_horario_w + nr_minuto_duracao_w / 1440 <= dt_final_vigencia_w)) THEN
				
				hr_horario_dia_w       := pkg_date_utils.start_of(hr_horario_w,'DD',0);
				hr_horario_dia_atual_w := pkg_date_utils.start_of(coalesce(hr_horario_w,clock_timestamp()),'DD',0);
				
				/* consistir horario ja gerado e/ou ja utilizado */

				SELECT	/*+index(a RXTAGEN_FAST_I)*/					CASE WHEN COUNT(*)=0 THEN 'S'  ELSE 'N' END
				INTO STRICT	ie_horario_w
				FROM	rxt_agenda a
				WHERE	a.nr_seq_equipamento = nr_seq_equip_p
				--AND	TRUNC(a.dt_agenda,'dd') = TRUNC(hr_horario_w,'dd')
				AND	a.dt_agenda between  hr_horario_dia_w and hr_horario_dia_atual_w + 86399/86400
				AND	a.dt_agenda <= hr_horario_w
				AND	a.dt_agenda + a.nr_minuto_duracao / 1440 > hr_horario_w
				AND	((coalesce(a.ie_tipo_agenda, 'T') = ie_tipo_agenda_w) OR (ie_tipo_agenda_w = 'T' AND a.ie_tipo_agenda = 'S'))
				AND	a.ie_status_agenda NOT IN ('C','LF');
				
								
				ie_bloqueio_w := rxt_obter_bloq_horario_equip(nr_seq_equip_p, dt_agenda_p, hr_horario_w);
				
				ds_motivo_bloqueio_w := substr(obter_valor_dominio(1007, rxt_obter_motivo_bloq_equip(nr_seq_equip_p, dt_agenda_p, hr_horario_w) ),1,254);
				
				if ( (ie_bloqueio_w =  'S') or (ie_bloqueio_w = 'G') ) then
					ie_status_agenda_w := 'B';
				else
					ie_status_agenda_w := 'L';
				end if;
								
				IF (ie_horario_w = 'S') AND (ie_bloqueio_w = 'N' or ie_bloqueio_w = 'G') THEN

					/* obter sequence */

					SELECT	nextval('rxt_agenda_seq')
					INTO STRICT	nr_seq_agenda_w
					;

					/* obter turno horario */


					/*
					select	obter_turno_horario_agenda(cd_agenda_p, to_char(hr_horario_w,'hh24:mi:ss'))
					into	cd_turno_w
					from	dual;
					*/


					/* gerar registro horario */

					INSERT INTO rxt_agenda(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						dt_atualizacao,
						nm_usuario,
						nr_seq_equipamento,
						dt_agenda,
						nr_minuto_duracao,
						ie_status_agenda,
						ie_tipo_agenda,
						dt_agendamento,
						nm_usuario_agenda,
						ds_observacao)
					VALUES (
						nr_seq_agenda_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_equip_p,
						hr_horario_w,
						nr_minuto_duracao_w,
						ie_status_agenda_w,
						ie_tipo_agenda_w,
						clock_timestamp(),
						nm_usuario_p,
						ds_motivo_bloqueio_w);

				END IF;

			END IF;

			hr_horario_w := hr_horario_w + nr_minuto_duracao_w / 1440;
			END;
		END LOOP;
		END;

	END LOOP;
	CLOSE c01;

END IF;

/* commit;  - Comentei pois esta procedure e utilizada na procedure RXT_AJUSTAR_AGENDA onde faz-se lock da tabela */

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE rxt_gerar_agenda_equip (nr_seq_equip_p bigint, dt_agenda_p timestamp, ie_recalcular_p text, nm_usuario_p text) FROM PUBLIC;

