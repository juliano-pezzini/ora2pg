-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_analise_status_pgto ( nr_seq_conta_p bigint, nr_seq_mat_p bigint, nr_seq_proc_p bigint, nr_seq_analise_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_proc_partic_p bigint, ie_recursivo_p text,		--S ou N - Se deve ser ser aberta recursão.
 ie_gerar_analise_aud_p text, ie_analise_multipla_p text) AS $body$
DECLARE


/*Esta rotina tem como finalidade o calculo do valor liberado (Segundo regras de qual valor liberar e de calculo de glosas)  a atualização deste valor no valor liberado da w_pls_resumo_conta e na conta
e a atualização do campo IE_PAGAMENTO da w_pls_resumo_conta*/
nr_seq_proc_w				bigint;
nr_seq_mat_w				bigint;
nr_seq_proc_partic_w			bigint;
qt_glosas_negadas_w			bigint;
ie_origem_analise_w			smallint;
vl_glosa_w				double precision;
qt_liberado_w				double precision;
vl_total_liberado_w			double precision;
vl_unitario_lib_w			double precision;
ie_pagamento_w				varchar(1);
ie_pagamento_ww				varchar(1);
vl_saldo_w				double precision;
vl_glosa_qt_w				double precision;
vl_uni_apres_w				double precision;
vl_uni_calc_w				double precision;
nr_seq_regra_valor_w			bigint;
ie_status_ww				varchar(1) := 'G';
vl_calculado_w				double precision;
qt_glosa_w				double precision;
vl_total_apres_w			double precision;
qt_apresentado_w			double precision;
ie_tipo_valor_w				varchar(1);
vl_prestador_w				double precision;
vl_base_w				double precision;
cd_codigo_w				varchar(10);
nr_seq_motivo_glosa_w			bigint;
nr_seq_ocorrencia_w			bigint;
nr_seq_glosa_ref_w			bigint;
nr_seq_ocorrencia_benef_w		bigint;
nr_seq_analise_conta_item_w		bigint;
nr_seq_conta_proc_w			bigint;
qt_proc_partic_w			bigint;
qt_procedimento_w			bigint;
ie_calculo_base_glosa_w			varchar(1);
ie_glosa_especifica_w			varchar(1);
vl_liberado_co_w 			double precision;
vl_liberado_hi_w			double precision;
vl_liberado_material_w			double precision;
nr_seq_item_ref_w			bigint;
vl_glosa_ww				double precision;
vl_total_liberado_ww			double precision;
qt_participantes_w			bigint;
vl_pag_medico_conta_w			double precision;
vl_liberado_partic_w			double precision;

/*campos criados para tratar o total do procedimento*/

vl_total_proc_w				double precision;
vl_total_calc_proc_w			double precision;
vl_calculado_original_w			double precision;
vl_apresentado_item_ref_w		double precision;
vl_total_w				double precision;
vl_total_ref_w				double precision;
vl_diferenca_w				double precision;
nr_seq_conta_w				bigint;
nr_seq_protocolo_w			bigint;
ie_conta_inteira_w			varchar(1)	:= 'N';
ie_analise_multipla_w			varchar(1)	:= 'N';
qt_participante_glosa_w			bigint	:= 0;

vl_liberado_w				double precision;
vl_glosa_co_w				double precision;
vl_glosa_hi_w				double precision;
vl_glosa_material_w			double precision;
qt_liberada_w				double precision;
qt_registro_w				bigint;
nr_seq_ordem_w				bigint;
nr_seq_fluxo_w				bigint;
nr_seq_item_resumo_w			bigint;
ie_valor_base_w				varchar(3);
vl_apresentado_w			double precision;
vl_base_glosa_w				double precision;
qt_ocor_pend_w				bigint;
vl_calculado_co_w			double precision;
vl_calculado_hi_w			double precision;
vl_calculado_mat_w			double precision;
nr_seq_item_w				bigint;
ie_tipo_item_w				varchar(1);
nr_seq_partic_proc_ww			bigint;
vl_total_ww				double precision;
vl_liberado_hi_ww			double precision;
qt_itens_partic_w			bigint;
nr_sequencia				bigint;

qt_itens_w				bigint;
qt_itens_glosados_w			bigint;
qt_itens_parc_w				bigint;
vl_calculado_hi_ww			double precision;
ie_lib_valor_partic_w			varchar(1);
ie_permite_lib_espec_analise_w		varchar(1);
ie_lib_espec_analise_w			varchar(1)	:= 'N';
nr_seq_analise_fluxo_item_w		bigint;
ie_fluxo_com_glosa_w			varchar(1);
ie_tipo_liberacao_w			varchar(1);
vl_glosa_partic_w			double precision;
ie_gerar_analise_audit_w		varchar(1)	:= 'N';
vl_unitario_w				double precision;
qt_liberado_ww				double precision;
vl_calculado_partic_w			double precision;
nr_seq_conta_proc_ww			pls_conta_proc.nr_sequencia%type;
vl_total_partic_w			pls_conta_proc.vl_liberado%type;
vl_total_proc_ww			pls_conta_proc.vl_liberado%type;
tx_prestador_item_w			pls_conta_proc.tx_prestador_item%type;
qt_glosa_item_w				integer;

C01 CURSOR FOR
	SELECT	nr_seq_conta_proc,
		nr_seq_conta_mat,
		nr_seq_partic_proc,
		nr_sequencia
	from	w_pls_resumo_conta
	where	nr_seq_conta 	= nr_seq_conta_p
	and	nr_seq_analise 	= nr_seq_analise_p
	and	ie_status 	<> 'C'
	order by  nr_seq_partic_proc,
		  nr_seq_conta_proc,
		  nr_seq_conta_mat;
	/*Não pode ser alterada a ordem do order by. Quando todas as contas são consistidas os participantes  devem ser liberados anterior ao procedimento para quando o procedimento for liberado obter
	   a liberação dos participantes. A ordem do material é irrelevante.*/
C02 CURSOR FOR
	SELECT	a.nr_seq_partic_proc
	from	w_pls_resumo_conta a
	where	a.nr_seq_analise = nr_seq_analise_p
	and	a.nr_seq_partic_proc in (	SELECT	x.nr_sequencia
						from	pls_proc_participante x
						where	x.nr_seq_conta_proc = nr_seq_proc_p	);

C03 CURSOR FOR
	SELECT	nr_seq_glosa,
		nr_seq_ocorrencia,
		nr_sequencia
	from	pls_analise_conta_item
	where	((nr_seq_conta = nr_seq_conta_w 	 and ((coalesce(nr_seq_conta_proc,0) = 0) and (coalesce(nr_seq_conta_mat,0) = 0) and (coalesce(nr_seq_proc_partic,0) = 0)))
	or	(nr_seq_conta = nr_seq_conta_w 	 	and ((nr_seq_conta_proc = nr_seq_proc_p) or (nr_seq_conta_mat = nr_seq_mat_p) or ((nr_seq_proc_partic = nr_seq_proc_partic_p)
	or (nr_seq_conta_proc = nr_seq_proc_p) 	and (ie_origem_analise_w <> 3)))))
	and	nr_seq_analise = nr_seq_analise_p
	and	coalesce(ie_tipo_glosa,'P') in ('A','P')
	and	ie_status in ('A','I');




BEGIN

nr_seq_conta_w	:= nr_seq_conta_p;

ie_gerar_analise_audit_w	:= ie_gerar_analise_aud_p;
if (coalesce(ie_gerar_analise_audit_w::text, '') = '') then
	ie_gerar_analise_audit_w := pls_obter_conta_item_auditoria(nr_seq_conta_w);
end if;
ie_analise_multipla_w		:= ie_analise_multipla_p;
if (coalesce(ie_analise_multipla_w::text, '') = '') then
	ie_analise_multipla_w := obter_param_usuario(1317, 20, null, nm_usuario_p, cd_estabelecimento_p, ie_analise_multipla_w);
end if;

if (coalesce(nr_seq_mat_p,0) = 0) and (coalesce(nr_seq_proc_p,0) = 0) and (coalesce(nr_seq_proc_partic_p,0) = 0) then

	open C01;
	loop
	fetch C01 into
		nr_seq_proc_w,
		nr_seq_mat_w,
		nr_seq_proc_partic_w,
		nr_sequencia;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if	((coalesce(nr_seq_proc_w,0) > 0) or (coalesce(nr_seq_mat_w,0) > 0) or (coalesce(nr_seq_proc_partic_w,0) > 0)) then
			/* Francisco - 14/06/2012 - Passei a conta como -1 quando for chamar para a conta inteira */

			CALL pls_analise_status_pgto(-1,nr_seq_mat_w, nr_seq_proc_w,
						nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p,
						nr_seq_proc_partic_w, 'N',
						ie_gerar_analise_audit_w, ie_analise_multipla_w);

		end if;
		end;
	end loop;
	close C01;

	CALL pls_analise_status_pgto_pos(	nr_seq_conta_w, null, null,
					nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p );

	CALL pls_analise_status_fat(		nr_seq_conta_w, null, null,
					nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p);

	/* Francisco - 09/08/2012 - Só precisa fazer uma vez por conta, quando está passando por todos os itens */

	if (coalesce(ie_conta_inteira_w,'N') = 'N') then
	  	CALL pls_cta_consistir_pck.gerar_resumo_conta(null, null, null, nr_seq_conta_w, nm_usuario_p, cd_estabelecimento_p);

		CALL pls_fechar_conta(nr_seq_conta_p, 'N','N','N', cd_estabelecimento_p, nm_usuario_p,null,null);

		--pls_gerar_sip_conta(nr_seq_conta_w, nm_usuario_p, cd_estabelecimento_p);
		select	nr_seq_protocolo
		into STRICT	nr_seq_protocolo_w
		from	pls_conta
		where	nr_sequencia	= nr_seq_conta_p;

		CALL pls_altera_status_protocolo(nr_seq_protocolo_w,'L','N',cd_estabelecimento_p,nm_usuario_p);
	end if;
else

	ie_tipo_liberacao_w := null;

	if (coalesce(ie_analise_multipla_w,'N') = 'S') then

		if (coalesce(nr_seq_conta_p,0) = -1) then
			ie_conta_inteira_w	:= 'S';
		end if;

		if (coalesce(nr_seq_conta_w::text, '') = '') or (nr_seq_conta_w = -1) then

			if (coalesce(nr_seq_proc_p,0) > 0) then
				select	max(nr_seq_conta)
				into STRICT	nr_seq_conta_w
				from	pls_conta_proc a
				where	a.nr_sequencia	= nr_seq_proc_p;
			elsif (coalesce(nr_seq_mat_p,0) > 0) then
				select	max(nr_seq_conta)
				into STRICT	nr_seq_conta_w
				from	pls_conta_mat a
				where	a.nr_sequencia	= nr_seq_mat_p;
			elsif (coalesce(nr_seq_proc_partic_p,0) > 0) then
				select	max(a.nr_seq_conta)
				into STRICT	nr_seq_conta_w
				from	pls_conta_proc a,
					pls_proc_participante b
				where	a.nr_sequencia = b.nr_seq_conta_proc
				and	b.nr_sequencia = nr_seq_proc_partic_p;
			end if;
		end if;

		qt_proc_partic_w := 0;
		select	max(ie_glosa_especifica)
		into STRICT	ie_glosa_especifica_w
		from	pls_param_analise_conta
		where	cd_estabelecimento = cd_estabelecimento_p;

		select	max(ie_calculo_base_glosa)
		into STRICT	ie_calculo_base_glosa_w
		from	pls_parametros
		where	cd_estabelecimento = cd_estabelecimento_p;

		select	max(ie_origem_analise)
		into STRICT	ie_origem_analise_w
		from	pls_analise_conta
		where	nr_sequencia = nr_seq_analise_p;

		begin
		select	vl_total_apres,
			vl_calculado,
			qt_apresentado,
			dividir_sem_round(vl_total_apres,qt_apresentado),
			dividir_sem_round(vl_calculado,qt_apresentado),
			ie_valor_base,
			coalesce(nr_seq_item_ref,nr_seq_conta_mat),
			vl_total,
			qt_liberado
		into STRICT	vl_total_apres_w,
			vl_calculado_w,
			qt_apresentado_w,
			vl_uni_apres_w,
			vl_uni_calc_w,
			ie_tipo_valor_w,
			nr_seq_item_ref_w,
			vl_total_w,
			qt_liberado_ww
		from	w_pls_resumo_conta
		where	nr_seq_conta 		= nr_seq_conta_w
		and	(((nr_seq_conta_proc	= nr_seq_proc_p) 	and ((ie_tipo_item = 'P') or (ie_origem_analise_w = 3 and ie_tipo_item = 'R')))
		or	(nr_seq_conta_mat	= nr_seq_mat_p AND ie_tipo_item = 'M')
		or	((nr_seq_partic_proc	= nr_seq_proc_partic_p AND ie_tipo_item = 'R') or (nr_seq_conta_proc = nr_seq_proc_p) and (ie_origem_analise_w <> 3)))
		and	nr_seq_analise 		= nr_seq_analise_p;
		exception
		when others then
				vl_total_apres_w	:= null;
				vl_calculado_w		:= null;
				qt_apresentado_w	:= null;
				vl_uni_apres_w		:= null;
				vl_uni_calc_w		:= null;
		end;

		if (coalesce(nr_seq_proc_p,0) > 0) then
			nr_seq_proc_w := nr_seq_proc_p;
			begin
				select 	sum(vl_total_original)
				into STRICT	vl_total_calc_proc_w
				from	w_pls_resumo_conta
				where	nr_seq_item_ref = nr_seq_item_ref_w
				and	(vl_total_original IS NOT NULL AND vl_total_original::text <> '')
				and	nr_seq_analise	= nr_seq_analise_p;
			exception
			when others then
				vl_total_calc_proc_w := null;
			end;

			begin
				select 	sum(vl_total_original)
				into STRICT	vl_glosa_partic_w
				from	w_pls_resumo_conta
				where	nr_seq_item_ref = nr_seq_item_ref_w
				and	(vl_total_original IS NOT NULL AND vl_total_original::text <> '')
				and	nr_seq_analise	= nr_seq_analise_p
				and	ie_tipo_item	= 'R'
				and	ie_pagamento	= 'G';
			exception
			when others then
				vl_glosa_partic_w	:= 0;
			end;
			vl_calculado_original_w := vl_calculado_w;
			vl_calculado_w := vl_total_calc_proc_w;

			select	vl_medico_original
			into STRICT	vl_pag_medico_conta_w
			from	pls_conta_proc
			where	nr_sequencia = nr_seq_proc_p;

			begin
			select	coalesce(sum(vl_total_apres),0),
				coalesce(sum(vl_total),0)
			into STRICT	vl_apresentado_item_ref_w,
				vl_total_ref_w
			from	w_pls_resumo_conta
			where	nr_seq_conta_proc 	= nr_seq_item_ref_w
			and	nr_seq_analise 		= nr_seq_analise_p;
			exception
			when others then
				vl_apresentado_item_ref_w := 0;
				vl_total_ref_w	:= 0;
			end;
		elsif (coalesce(nr_seq_proc_partic_p,0) > 0) then
			begin
				select 	sum(vl_total_original)
				into STRICT	vl_total_calc_proc_w
				from	w_pls_resumo_conta
				where	nr_seq_item_ref = nr_seq_item_ref_w
				and	(vl_total_original IS NOT NULL AND vl_total_original::text <> '')
				and	nr_seq_analise = nr_seq_analise_p
				and	ie_tipo_item <> 'R';
			exception
			when others then
				vl_total_calc_proc_w := null;
			end;
			vl_calculado_original_w := vl_calculado_w;
			vl_calculado_w 		:= vl_total_calc_proc_w;

			begin
			select	a.nr_sequencia
			into STRICT	nr_seq_proc_w
			from	pls_conta_proc a,
				pls_proc_participante b
			where	a.nr_sequencia = b.nr_seq_conta_proc
			and	b.nr_sequencia = nr_seq_proc_partic_p;
			exception
			when others then
				nr_seq_proc_w := null;
			end;
			begin

			select	coalesce(vl_total_apres,0),
				coalesce(vl_total,0),
				coalesce(vl_calculado,0),
				coalesce(ie_valor_base,2)
			into STRICT	vl_apresentado_item_ref_w,
				vl_total_ref_w,
				vl_calculado_partic_w,
				ie_tipo_valor_w
			from	w_pls_resumo_conta
			where	nr_seq_conta_proc	= nr_seq_item_ref_w
			and	nr_seq_analise 		= nr_seq_analise_p;
			exception
			when others then
				vl_apresentado_item_ref_w := 0;
				vl_total_ref_w	:= 0;
				ie_tipo_valor_w := ie_tipo_valor_w;
			end;
		elsif (nr_seq_mat_p > 0) then

			vl_calculado_original_w := vl_calculado_w;
		end if;

		delete	FROM pls_log_lib_valor_analise
		where	nr_seq_conta_mat 	= nr_seq_mat_p
		or 	nr_seq_conta_proc 	= nr_seq_proc_w;

		/*Obter quantidade de glosas/ocorrências do item/conta pendente de liberação ou negado.*/

		select	count(nr_sequencia)
		into STRICT	qt_glosas_negadas_w
		from	pls_analise_conta_item
		where	nr_seq_conta = nr_seq_conta_w
		and 	(((coalesce(nr_seq_conta_proc,0) = 0) and (coalesce(nr_seq_conta_mat,0) = 0) and (coalesce(nr_seq_proc_partic,0) = 0))
		or	 ((nr_seq_conta_proc = nr_seq_proc_p) or (nr_seq_conta_mat = nr_seq_mat_p) or (nr_seq_proc_partic = nr_seq_proc_partic_p)))
		and	ie_status in ('N','P')
		and	coalesce(ie_tipo_glosa,'P') in ('A','P')
		and	nr_seq_analise = nr_seq_analise_p;

		select	count(nr_sequencia)
		into STRICT	qt_glosa_item_w
		from	pls_analise_conta_item
		where	nr_seq_conta = nr_seq_conta_w
		and 	 ((nr_seq_conta_proc = nr_seq_proc_p) or (nr_seq_conta_mat = nr_seq_mat_p) or (nr_seq_proc_partic = nr_seq_proc_partic_p))
		and	((cd_codigo  in ('1705','1706')) or (ie_situacao = 'A'))
		and	coalesce(ie_tipo_glosa,'P') in ('A','P')
		and	nr_seq_analise = nr_seq_analise_p;

		if (nr_seq_proc_partic_p IS NOT NULL AND nr_seq_proc_partic_p::text <> '') and (qt_glosas_negadas_w = 0) then

			begin
				select	nr_seq_conta_proc
				into STRICT	nr_seq_conta_proc_w
				from	pls_proc_participante
				where	nr_sequencia = nr_seq_proc_partic_p;
			exception
			when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(737692, 'NR_SEQ_PARTIC=' || nr_seq_proc_partic_p);
			end;

			select	count(nr_sequencia)
			into STRICT	qt_glosas_negadas_w
			from	pls_analise_conta_item
			where	nr_seq_conta = nr_seq_conta_w
			and 	nr_seq_conta_proc = nr_seq_conta_proc_w
			and	ie_status in ('N','P')
			and	coalesce(ie_tipo_glosa,'P') in ('A','P')
			and	nr_seq_analise = nr_seq_analise_p;
		end if;

		if (coalesce(qt_glosas_negadas_w,0) > 0) then

			/*No caso de haver no minimo uma glosa/oc negada o item não ira haver valor liberado.*/

			qt_liberado_w		:= 0;
			vl_total_liberado_w	:= 0;
			vl_unitario_lib_w	:= 0;
			ie_pagamento_w		:= 'G';

			/*Diego OS - 392753 - Nos casos onde o valor apresentado for zero e o sistema deve considerar o calculado para valor de glosa. */

			if (coalesce(ie_calculo_base_glosa_w,'N') = 'S') and (coalesce(vl_total_apres_w,0) = 0) then
				vl_glosa_w	:= vl_calculado_w;
			else
				vl_glosa_w	:= vl_total_apres_w;
			end if;


			vl_saldo_w	:= 0;
			vl_base_w	:= vl_glosa_w;
			ie_tipo_valor_w	:= 1;

		else
			/*Obtenção do maior valor e quantidade de glosas entre as respectivas glosas/ocorrências*/

			select	max(qt_glosa),
				max(vl_glosa)
			into STRICT	qt_glosa_w,
				vl_glosa_w
			from	pls_analise_conta_item
			where	nr_seq_conta = nr_seq_conta_w
			and 	((nr_seq_conta_proc = nr_seq_proc_p) or (nr_seq_conta_mat = nr_seq_mat_p) or (nr_seq_proc_partic = nr_seq_proc_partic_p))
			and	nr_seq_analise = nr_seq_analise_p
			and	coalesce(ie_tipo_glosa,'P') in ('A','P')
			and	ie_status = 'L';



			if	((coalesce(qt_glosa_w,0) > 0) or (coalesce(vl_glosa_w,0) > 0)) then

				vl_glosa_qt_w := qt_glosa_w * dividir_sem_round(vl_total_apres_w, qt_apresentado_w); --Obtem o valor de glosa quando o item possui ocorrencia  por quantidade
				if (coalesce(vl_glosa_w,0) >= coalesce(vl_glosa_qt_w,0)) and (coalesce(qt_glosa_w,0) = 0) then
					/*Se estiver glosando valor (valor for o maior valor glosado)*/

					qt_liberado_w 		:= qt_apresentado_w;
					vl_glosa_w		:=  coalesce(vl_glosa_w,0);

					if (coalesce(ie_calculo_base_glosa_w,'N') = 'S') and
						((coalesce(vl_total_apres_w,0) = 0) and (coalesce(vl_apresentado_item_ref_w,0) = 0))then
						vl_total_liberado_w	:= vl_calculado_w - vl_glosa_w;
						vl_base_w		:= vl_calculado_w;
						ie_tipo_valor_w		:= 2;

					else
						if (nr_seq_proc_partic_p IS NOT NULL AND nr_seq_proc_partic_p::text <> '') then
							vl_total_liberado_w	:= vl_calculado_w - vl_glosa_w;
							vl_base_w		:= vl_calculado_w;
							ie_tipo_valor_w		:= 2;
							vl_glosa_w 	:= vl_apresentado_item_ref_w - vl_total_liberado_w;
							if (vl_glosa_w < 0) then
								vl_glosa_w := 0;
							end if;
						elsif (coalesce(vl_total_apres_w,0) > 0) then
							vl_total_liberado_w	:= vl_total_apres_w - vl_glosa_w;
							vl_base_w		:= vl_total_apres_w;
							ie_tipo_valor_w		:= 1;
						else
							vl_total_liberado_w	:= vl_apresentado_item_ref_w - vl_glosa_w;
							vl_base_w		:= vl_apresentado_item_ref_w;
							ie_tipo_valor_w		:= 1;
						end if;
					end if;

					vl_unitario_lib_w	:= dividir_sem_round(vl_total_liberado_w, qt_liberado_w);

				else

					/*Se estiver glosando quantidade (quantidade pelo valor for o maior valor glosado)*/

					qt_liberado_w 		:= qt_apresentado_w - qt_glosa_w;

					/*
					if	(nr_seq_proc_p = 9232581) then
						insert into aed values (ie_calculo_base_glosa_w || ' - ' || vl_total_apres_w || ' - ' || vl_apresentado_item_ref_w);
					end if;
					*/
					if (coalesce(ie_calculo_base_glosa_w,'N') = 'S') and
						((coalesce(vl_total_apres_w,0) = 0) and (coalesce(vl_apresentado_item_ref_w,0) = 0))then

						vl_unitario_lib_w	:= vl_uni_calc_w;
						vl_base_w		:= vl_calculado_w;
						ie_tipo_valor_w		:= 2;
					else
						if (coalesce(vl_total_apres_w,0) = 0) then

							vl_unitario_lib_w	:= vl_uni_calc_w;
							vl_base_w		:= vl_total_apres_w;
							ie_tipo_valor_w		:= 1;
						else

							if (qt_apresentado_w > qt_liberado_w) then

								if (vl_total_apres_w > 0) then

									if (vl_total_apres_w < vl_calculado_w) then

										vl_unitario_lib_w	:= dividir(vl_total_apres_w ,qt_apresentado_w);

										vl_glosa_qt_w := qt_glosa_w * dividir_sem_round(vl_total_apres_w, qt_apresentado_w);

									elsif (vl_calculado_w > 0) then

										vl_unitario_lib_w	:= dividir(vl_calculado_w ,qt_apresentado_w);

										vl_glosa_qt_w := qt_glosa_w * dividir_sem_round(vl_calculado_w, qt_apresentado_w);
									else
										vl_unitario_lib_w	:= dividir(vl_total_apres_w ,qt_apresentado_w);

										vl_glosa_qt_w := qt_glosa_w * dividir_sem_round(vl_total_apres_w, qt_apresentado_w);
									end if;
								else
									if (vl_calculado_w > 0) then

										vl_unitario_lib_w	:= dividir(vl_calculado_w ,qt_apresentado_w);

										vl_glosa_qt_w := qt_glosa_w * dividir_sem_round(vl_calculado_w, qt_apresentado_w);
									else
										vl_unitario_lib_w	:= 0;

										vl_glosa_qt_w		:= vl_total_apres_w;
									end if;
								end if;
							else
								vl_unitario_lib_w	:= dividir(vl_apresentado_item_ref_w,qt_apresentado_w);
							end if;

							vl_base_w		:= vl_apresentado_item_ref_w;
							ie_tipo_valor_w		:= 1;
						end if;

					end if;

					vl_total_liberado_w	:= qt_liberado_w * vl_unitario_lib_w;

					vl_glosa_w 		:= vl_glosa_qt_w;

					if	(coalesce(vl_total_apres_w,0) <> (coalesce(vl_total_liberado_w,0) + coalesce(vl_glosa_w,0))) and (coalesce(vl_glosa_w,0) > 0) then
						vl_glosa_w := coalesce(vl_total_apres_w,0) - coalesce(vl_total_liberado_w,0);
					end if;
				end if;
				ie_pagamento_w				:= 'P';
				vl_saldo_w				:= 0;
			else

				/*Não existe itens negados nem itens parciais, ou seja, esta tudu liberado*/

				/*Neste caso é verificada a regra*/

				ie_pagamento_w		:= 'L';

				if	((coalesce(ie_tipo_valor_w,'1') = '1') or (coalesce(vl_calculado_original_w,0)    = 0) or (qt_glosa_item_w = 0) ) and (coalesce(vl_total_apres_w,0) <> 0) then --Robson OS - 401301 --Aceita valor apresentado, caso o valor calculado Zerado, para que o usuário possa glosar apenas parte do valor.
					--1               Aceita valor apresentado
					qt_liberado_w 		:= qt_apresentado_w;
					vl_unitario_lib_w	:= vl_uni_apres_w;
					vl_total_liberado_w	:= vl_total_apres_w;

					vl_saldo_w		:= 0;
					vl_glosa_w 		:= 0;

					vl_base_w		:= vl_total_apres_w;
					ie_tipo_valor_w		:= 1;
					ie_tipo_liberacao_w	:= 'A';
				elsif	((coalesce(ie_tipo_valor_w,'1') = '1') and (coalesce(vl_calculado_original_w,0)   <> 0)) and
					 ((coalesce(vl_total_apres_w,0) = 0) and (coalesce(vl_apresentado_item_ref_w,0) <> 0))then --Robson OS - 401301 --Aceita valor apresentado, caso o valor calculado Zerado, para que o usuário possa glosar apenas parte do valor.
					--1               Aceita valor apresentado
					qt_liberado_w 		:= qt_apresentado_w;
					vl_unitario_lib_w	:= dividir(vl_apresentado_item_ref_w,qt_apresentado_w);
					vl_total_liberado_w	:= vl_apresentado_item_ref_w;

					vl_saldo_w		:= 0;
					vl_glosa_w 		:= 0;

					vl_base_w		:= vl_apresentado_item_ref_w;
					ie_tipo_valor_w		:= 1;
					ie_tipo_liberacao_w	:= 'A';
				elsif (coalesce(ie_tipo_valor_w,'1') = '2') then
					--2               Aceita valor calculado e glosa o excedente
					qt_liberado_w 		:= qt_apresentado_w;
					vl_unitario_lib_w	:= dividir(vl_calculado_original_w,qt_apresentado_w );
					vl_total_liberado_w	:= vl_calculado_original_w;

					vl_saldo_w		:= greatest(vl_total_liberado_w - vl_total_apres_w, 0);
					vl_glosa_w 		:= 0;

					vl_base_w		:= vl_calculado_original_w;
					ie_tipo_valor_w		:= 2;
					ie_tipo_liberacao_w	:= 'C';
				elsif	((coalesce(ie_tipo_valor_w,'1') = '3') or (coalesce(vl_total_apres_w,0)  = 0))  then
					--3               Aceita valor calculado
					qt_liberado_w 		:= qt_apresentado_w;
					vl_unitario_lib_w	:= dividir((vl_calculado_original_w - coalesce(vl_glosa_partic_w,0)),qt_apresentado_w );
					vl_total_liberado_w	:= vl_calculado_original_w - coalesce(vl_glosa_partic_w,0);

					vl_saldo_w		:= greatest(vl_total_liberado_w - vl_total_apres_w, 0);
					vl_glosa_w 		:= 0;

					vl_base_w		:= vl_calculado_original_w;
					ie_tipo_valor_w		:= 2;
					ie_tipo_liberacao_w	:= 'C';
				elsif (coalesce(ie_tipo_valor_w,'1') = '6') then

					if (coalesce(nr_seq_proc_p,0) > 0) then
						select	coalesce(tx_prestador_item,0)
						into STRICT	tx_prestador_item_w
						from	pls_conta_proc
						where	nr_sequencia = nr_seq_proc_p;
					elsif (coalesce(nr_seq_mat_p,0) > 0) then
						select	coalesce(tx_prestador_item,0)
						into STRICT	tx_prestador_item_w
						from	pls_conta_mat
						where	nr_sequencia = nr_seq_mat_p;
					end if;

					qt_liberado_w := qt_apresentado_w;
					vl_total_liberado_w := vl_total_apres_w + dividir((vl_total_apres_w * tx_prestador_item_w),100);
					vl_unitario_lib_w := dividir(vl_total_liberado_w, qt_apresentado_w);

					vl_saldo_w := 0;
					vl_glosa_w := 0;

					vl_base_w		:= vl_total_apres_w;
					ie_tipo_valor_w		:= 1;
					ie_tipo_liberacao_w	:= 'A';
				else
					qt_liberado_w 		:= 0;
					vl_unitario_lib_w	:= 0;
					vl_total_liberado_w	:= 0;
				end if;

				if (coalesce(vl_total_apres_w,0) > coalesce(vl_total_liberado_w,0)) then
					/*Cusor que ira obter a glosa 1705  e neste lançar o excedente que não será pago.*/

					open C03;
					loop
					fetch C03 into
						nr_seq_glosa_ref_w,
						nr_seq_ocorrencia_benef_w,
						nr_seq_analise_conta_item_w;
					EXIT WHEN NOT FOUND; /* apply on C03 */
						begin
						if (coalesce(nr_seq_glosa_ref_w,0) > 0)  then
							select	max(b.nr_sequencia)
							into STRICT	nr_seq_motivo_glosa_w
							from	pls_conta_glosa a,
								tiss_motivo_glosa b
							where	a.nr_sequencia 		= nr_seq_glosa_ref_w
							and	a.nr_seq_motivo_glosa 	= b.nr_sequencia
							and	b.cd_motivo_glosa 		= '1705';
						elsif (coalesce(nr_seq_ocorrencia_benef_w,0) > 0)  then
							select	max(b.nr_sequencia)
							into STRICT	nr_seq_motivo_glosa_w
							from	pls_ocorrencia_benef	a,
								tiss_motivo_glosa 	b,
								pls_ocorrencia		c
							where	a.nr_sequencia 		= nr_seq_ocorrencia_benef_w
							and	a.nr_seq_ocorrencia	= c.nr_sequencia
							and	c.nr_seq_motivo_glosa 	= b.nr_sequencia
							and	b.cd_motivo_tiss 	= '1705'
							and	coalesce(c.ie_glosa,'N')	= 'S';
						end if;

						if (coalesce(nr_seq_motivo_glosa_w,0) > 0) then
							/*Diego OS - 392753 - Nos casos onde o valor apresentado for zero e o sistema deve considerar o calculado para valor de glosa. */

							if (coalesce(ie_calculo_base_glosa_w,'N') = 'S') and (coalesce(vl_total_apres_w,0) = 0) then
								vl_glosa_w 		:= coalesce(vl_calculado_original_w,0) - coalesce(vl_total_liberado_w,0);
							else
								vl_glosa_w 		:= coalesce(vl_total_apres_w,0) - coalesce(vl_total_liberado_w,0);
							end if;

							update	pls_analise_conta_item
							set	vl_glosa 	= vl_glosa_w,
								qt_glosa 	= 0,
								ie_situacao 	= 'A',
								ie_status	= 'L'
							where 	nr_sequencia 	= nr_seq_analise_conta_item_w;

							ie_pagamento_w := 'P';

							goto Final;
						end if;

						end;
					end loop;
					close C03;

					<<Final>>

					if (C03%ISOPEN) then
						close C03;
					end if;
				end if;
			end if;
		end if;

		CALL pls_gerar_log_lib_item(	nr_seq_proc_w, nr_seq_mat_p, ie_tipo_valor_w,
					nr_seq_regra_valor_w, vl_base_w, vl_glosa_w,
					vl_total_liberado_w, nr_seq_analise_p, cd_estabelecimento_p,
					nm_usuario_p	);

		qt_liberado_w 		:= greatest(qt_liberado_w,0);
		vl_total_liberado_w	:= greatest(vl_total_liberado_w,0);
		vl_unitario_lib_w	:= greatest(vl_unitario_lib_w,0);

		if (coalesce(vl_total_liberado_w,0) = 0) then

			qt_liberado_w 	:= 0;
			ie_pagamento_w 	:= 'G';
		end if;

		/*Atualização destes valores na análise*/

		update	w_pls_resumo_conta
		set	qt_liberado  		= qt_liberado_w,
			vl_total     		= vl_total_liberado_w,
			vl_unitario  		= vl_unitario_lib_w,
			ie_pagamento 		= ie_pagamento_w, --Visto com Paulo - Se o Valor liberado for zero  o icone deve ser de "Glosa", para que fique claro que não será realizado pagamento
			vl_glosa     		= coalesce(vl_glosa_w,0),
			vl_total_original	= coalesce(vl_calculado_original_w,0)
		where	(((nr_seq_item 	= nr_seq_proc_p)		and ((ie_tipo_item = 'P') or (ie_origem_analise_w = 3 and ie_tipo_item = 'R')))
		or	(nr_seq_item 	= nr_seq_mat_p AND ie_tipo_item = 'M')
		or	(nr_seq_partic_proc = nr_seq_proc_partic_p AND ie_tipo_item = 'R'))
		and	nr_seq_analise 	= nr_seq_analise_p;

		if (coalesce(nr_seq_proc_p,0) > 0) or (coalesce(nr_seq_proc_partic_p,0) > 0) then

			/*Diego OS 451702 - No case de haver participantes o ie_pagamento do procedimento depende dos participantes*/

			select	count(nr_sequencia)
			into STRICT	qt_participantes_w
			from	w_pls_resumo_conta
			where	nr_seq_item_ref	  = nr_seq_item_ref_w
			and	ie_tipo_item	  = 'R'
			and	nr_seq_analise 	  = nr_seq_analise_p;

			if (coalesce(qt_participantes_w,0) > 0) then
				/*Somente será considerado o item totalmente liberado caso não exista valor de glosa (no item ou participantes).
				    Somente será considerado o item como glosado se não houver valor liberado.
				    Se nãoo item é considerado parcialmente liberado.*/
				select	max(vl_glosa),
					max(vl_total)
				into STRICT	vl_glosa_ww,
					vl_total_liberado_ww
				from	w_pls_resumo_conta
				where	nr_seq_item_ref = nr_seq_item_ref_w
				and	nr_seq_analise	= nr_seq_analise_p;

				if (coalesce(vl_glosa_ww,0) = 0) and (coalesce(vl_total_liberado_ww,0) > 0) then
					ie_pagamento_ww := 'L';
				elsif (coalesce(vl_total_liberado_ww,0) = 0) then
					ie_pagamento_ww := 'G';
				else
					ie_pagamento_ww := 'P';
				end if;

				update	w_pls_resumo_conta
				set	ie_pagamento 		= ie_pagamento_ww
				where	nr_seq_conta_proc 	= nr_seq_item_ref_w
				and	nr_seq_analise		= nr_seq_analise_p;
			end if;

		end if;

	/*Atualização dos valores na conta e geração do resumo do item*/

		if (coalesce(nr_seq_proc_partic_p,0) > 0) then
			if (vl_total_ref_w > 0) and (vl_total_ref_w <> vl_total_liberado_w ) then
				vl_total_proc_w := dividir((vl_total_ref_w*vl_calculado_original_w),vl_calculado_partic_w);
				if (coalesce(vl_total_proc_w,0) = 0) then
					vl_total_proc_w := vl_total_liberado_w;
				end if;
			elsif (vl_total_liberado_w > 0) then
				vl_total_proc_w := dividir((vl_total_liberado_w*vl_calculado_original_w),vl_calculado_partic_w);
				if (coalesce(vl_total_proc_w,0) = 0) then
					vl_total_proc_w := vl_total_liberado_w;
				end if;
			else
				vl_total_proc_w := vl_total_liberado_w;
			end if;
			vl_unitario_lib_w := dividir(vl_total_proc_w,qt_liberado_w);

			if (coalesce(vl_total_ref_w,0) > 0) then
				vl_diferenca_w := vl_total_proc_w - vl_total_w;
				vl_total_ref_w := vl_total_ref_w + vl_diferenca_w;
				/*update	w_pls_resumo_conta
				set	qt_liberado  		= qt_liberado,
					vl_total     		= vl_total_ref_w,
					vl_unitario  		= dividir(vl_total_ref_w,qt_liberado)
				where	nr_seq_analise 		= nr_seq_analise_p
				and	nr_seq_conta_proc	= nr_seq_item_ref_w;	*/
			end if;

			vl_total_proc_w := pls_atualiza_conta_item(	nr_seq_proc_partic_p, 'R', null, vl_unitario_lib_w, vl_total_proc_w, vl_glosa_w, vl_saldo_w, vl_prestador_w, qt_liberado_w, '', 'A', cd_estabelecimento_p, nm_usuario_p, 'N', 0, ie_conta_inteira_w, ie_tipo_liberacao_w, ie_gerar_analise_audit_w, null, null, null, null, null, null);

			CALL pls_atualizar_prest_pgto(	null, null, nr_seq_proc_partic_p,
							nr_seq_analise_p, 'N', cd_estabelecimento_p,
							nm_usuario_p);

			update	w_pls_resumo_conta
			set	vl_unitario		= coalesce(vl_unitario_lib_w,0),
				vl_total		= coalesce(vl_total_proc_w,0),
				qt_liberado		= coalesce(qt_liberado_w,0),
				vl_liberado_hi		= vl_total_liberado_w
				--ie_status		= 'L'
			where	nr_seq_partic_proc 	= nr_seq_proc_partic_p
			and	nr_seq_analise 		= nr_seq_analise_p;
		elsif (coalesce(nr_seq_proc_p,0) > 0) then
			if (vl_total_liberado_w > 0) then
				vl_total_proc_w := dividir((vl_total_liberado_w*vl_calculado_original_w),vl_calculado_original_w);
				if (coalesce(vl_total_proc_w,0) = 0) then
					vl_total_proc_w := vl_total_liberado_w;
				end if;
			else
				vl_total_proc_w := vl_total_liberado_w;
			end if;

		--	vl_pag_medico_conta_w 	:= dividir((vl_pag_medico_conta_w*vl_total_proc_w),vl_calculado_original_w);
			vl_unitario_lib_w 	:= dividir(vl_total_proc_w,qt_liberado_w);

			if (coalesce(vl_total_ref_w,0) > 0) then
				vl_diferenca_w := vl_total_proc_w - vl_total_w;
				vl_total_ref_w := vl_total_ref_w + vl_diferenca_w;
				/*update	w_pls_resumo_conta
				set	qt_liberado  		= qt_liberado,
					vl_total     		= vl_total_ref_w,
					vl_unitario  		= dividir(vl_total_ref_w,qt_liberado)
				where	nr_seq_analise 		= nr_seq_analise_p
				and	nr_seq_conta_proc	= nr_seq_item_ref_w;	*/
			end if;
		/*
			delete	pls_conta_medica_resumo
			where	nr_seq_item	= nr_seq_proc_w
			and 	ie_proc_mat	= 'P';

			select	max(vl_prestador)
			into	vl_prestador_w
			from	pls_conta_proc
			where	nr_sequencia = nr_seq_proc_w;
	*/
			vl_total_proc_w := pls_atualiza_conta_item(	nr_seq_proc_p, 'P', null, vl_unitario_lib_w, vl_total_proc_w, vl_glosa_w, vl_saldo_w, vl_prestador_w, qt_liberado_w, '', 'A', cd_estabelecimento_p, nm_usuario_p, 'N', 0, ie_conta_inteira_w, ie_tipo_liberacao_w, ie_gerar_analise_audit_w, null, null, null, null, null, null);

			CALL pls_atualizar_prest_pgto(	nr_seq_proc_w, null, null,
							nr_seq_analise_p, 'N', cd_estabelecimento_p,
							nm_usuario_p);

			if (coalesce(ie_glosa_especifica_w,'N') = 'S') then
				SELECT * FROM pls_ajustar_proc_proporcional(	nr_seq_proc_w, 'N', vl_liberado_co_w, vl_liberado_hi_w, vl_liberado_material_w, cd_estabelecimento_p, nm_usuario_p	) INTO STRICT vl_liberado_co_w, vl_liberado_hi_w, vl_liberado_material_w;

				update	w_pls_resumo_conta
				set	vl_liberado_co		= vl_liberado_co_w,
					vl_liberado_hi		= vl_liberado_hi_w,
					vl_liberado_material	= vl_liberado_material_w
				where	((nr_seq_conta_proc = nr_seq_proc_p)	and ((ie_tipo_item = 'P') or (ie_origem_analise_w = 3 and ie_tipo_item = 'R')))
				and	nr_seq_analise = nr_seq_analise_p;

			end if;

			update	w_pls_resumo_conta
			set	vl_unitario		= coalesce(vl_unitario_lib_w,0),
				vl_total		= coalesce(vl_total_proc_w,0),
				qt_liberado		= coalesce(qt_liberado_w,0)
				--ie_status		= 'L'
			where	((nr_seq_conta_proc = nr_seq_proc_p)	and ((ie_tipo_item = 'P') or (ie_origem_analise_w = 3 and ie_tipo_item = 'R')))
			and	nr_seq_analise = nr_seq_analise_p;

		elsif (coalesce(nr_seq_mat_p,0) > 0) then

			CALL pls_delete_conta_medica_resumo(nr_seq_conta_p,null,nr_seq_mat_p,nm_usuario_P);

			vl_total_liberado_w := pls_atualiza_conta_item(	nr_seq_mat_p, 'M', null, vl_unitario_lib_w, vl_total_liberado_w, vl_glosa_w, vl_saldo_w, vl_prestador_w, qt_liberado_w, '', 'A', cd_estabelecimento_p, nm_usuario_p, 'N', 0, ie_conta_inteira_w, ie_tipo_liberacao_w, ie_gerar_analise_audit_w, null, null, null, null, null, null);

			CALL pls_atualizar_prest_pgto(	null, nr_seq_mat_p, null,
							nr_seq_analise_p, 'N', cd_estabelecimento_p,
							nm_usuario_p);

			update	w_pls_resumo_conta
			set	vl_unitario		= coalesce(vl_unitario_lib_w,0),
				vl_total		= coalesce(vl_total_liberado_w,0),
				qt_liberado		= coalesce(qt_liberado_w,0),
				vl_liberado_material	= vl_total_liberado_w
			where	nr_seq_conta_mat 	= nr_seq_mat_p
			and	nr_seq_analise 		= nr_seq_analise_p;
		end if;

		if (coalesce(ie_conta_inteira_w,'N') = 'N') then

			CALL pls_analise_status_pgto_pos(	nr_seq_conta_w, nr_seq_mat_p, nr_seq_proc_w, nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p );

			CALL pls_analise_status_fat(		nr_seq_conta_w, nr_seq_mat_p, nr_seq_proc_w,
							nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p);
		end if;

		open C02;
		loop
		fetch C02 into
			nr_seq_partic_proc_ww;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			CALL pls_analise_status_pgto(	nr_seq_conta_p, null, null,
							nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p,
							nr_seq_partic_proc_ww, 'N', null,
							null	);

			end;
		end loop;
		close C02;

	else /* Se não for análise múltipla */
		if (coalesce(nr_seq_conta_p,0) = -1) then
			ie_conta_inteira_w	:= 'S';
		end if;

		/*
		    Abrir  cursor com os participantes (PLS_PROC_PARTICIPANTE) do item que se esta consistido.
		    Isto é necessário pois o item ira utilizar o valor liberado dos participantes.
		    */
		if (coalesce(ie_recursivo_p,'S') = 'S') then
			open C02;
			loop
			fetch C02 into
				nr_seq_partic_proc_ww;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin

				CALL pls_analise_status_pgto(	nr_seq_conta_p, null, null,
								nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p,
								nr_seq_partic_proc_ww, 'N', null,
								null	);

				end;
			end loop;
			close C02;
		end if;

		begin
		select	ie_calculo_base_glosa
		into STRICT	ie_calculo_base_glosa_w
		from	pls_parametros
		where	cd_estabelecimento = cd_estabelecimento_p;
		exception
			when others then
			ie_calculo_base_glosa_w	:= 'N';
		end;

		if (coalesce(ie_calculo_base_glosa_w::text, '') = '') then
			ie_calculo_base_glosa_w	:= 'N';
		end if;

		if (nr_seq_proc_partic_p > 0) then
			select	count(1)
			into STRICT	qt_ocor_pend_w
			from	pls_analise_conta_item a
			where	a.nr_seq_analise	= nr_seq_analise_p
			and	a.nr_seq_proc_partic 	= nr_seq_proc_partic_p
			and	a.ie_status 		in ('P','N');

			select	max(a.nr_sequencia)
			into STRICT	nr_seq_item_resumo_w
			from	w_pls_resumo_conta a
			where	a.nr_seq_analise 	= nr_seq_analise_p
			and	a.nr_seq_partic_proc 	= nr_seq_proc_partic_p;
		elsif (nr_seq_proc_p > 0) then
			select	count(1)
			into STRICT	qt_ocor_pend_w
			from	pls_analise_conta_item a
			where	a.nr_seq_analise	= nr_seq_analise_p
			and	a.nr_seq_conta_proc 	= nr_seq_proc_p
			and	a.ie_status 		in ('P','N');

			select	max(a.nr_sequencia)
			into STRICT	nr_seq_item_resumo_w
			from	w_pls_resumo_conta a
			where	a.nr_seq_analise 	= nr_seq_analise_p
			and	a.nr_seq_conta_proc 	= nr_seq_proc_p;
		elsif (nr_seq_mat_p > 0) then
			select	count(1)
			into STRICT	qt_ocor_pend_w
			from	pls_analise_conta_item a
			where	a.nr_seq_analise	= nr_seq_analise_p
			and	a.nr_seq_conta_mat 	= nr_seq_mat_p
			and	a.ie_status 		in ('P','N');

			select	max(a.nr_sequencia)
			into STRICT	nr_seq_item_resumo_w
			from	w_pls_resumo_conta a
			where	a.nr_seq_analise 	= nr_seq_analise_p
			and	a.nr_seq_conta_mat 	= nr_seq_mat_p;
		end if;


		if (nr_seq_item_resumo_w IS NOT NULL AND nr_seq_item_resumo_w::text <> '') then

			select	a.ie_valor_base,
				coalesce(a.vl_total_apres,0),
				coalesce(a.vl_calculado,0),
				coalesce(a.qt_apresentado,0),
				coalesce(a.vl_calculado_co,0),
				coalesce(a.vl_calculado_material,0),
				coalesce(a.vl_calculado_hi,0),
				ie_fluxo_com_glosa
			into STRICT	ie_valor_base_w,
				vl_apresentado_w,
				vl_calculado_w,
				qt_apresentado_w,
				vl_calculado_co_w,
				vl_calculado_mat_w,
				vl_calculado_hi_w,
				ie_fluxo_com_glosa_w
			from	w_pls_resumo_conta a
			where	a.nr_sequencia	= nr_seq_item_resumo_w;

			if (ie_valor_base_w = 1) then
				vl_base_w	:= vl_apresentado_w;
			else
				vl_base_w	:= vl_calculado_w;
			end if;

			if (qt_ocor_pend_w = 0) then
				select	count(nr_sequencia)
				into STRICT	qt_registro_w
				from	pls_analise_fluxo_item a
				where	a.nr_seq_analise = nr_seq_analise_p
				and (a.nr_seq_conta_proc = nr_seq_proc_p or
					a.nr_seq_conta_mat = nr_seq_mat_p or
					a.nr_seq_proc_partic = nr_seq_proc_partic_p)  LIMIT 1;

				if (qt_registro_w > 0) then
					/* Ver quem foi o último grupo a fazer a análise do item */

					select	max(a.nr_seq_ordem)
					into STRICT	nr_seq_ordem_w
					from	pls_analise_fluxo_item a
					where	a.nr_seq_analise = nr_seq_analise_p
					and (a.nr_seq_conta_proc = nr_seq_proc_p or
						a.nr_seq_conta_mat = nr_seq_mat_p or
						a.nr_seq_proc_partic = nr_seq_proc_partic_p);

					/* Buscar a última alteração daquele grupo para o item */

					select	max(a.nr_sequencia)
					into STRICT	nr_seq_fluxo_w
					from	pls_analise_fluxo_item a
					where	a.nr_seq_analise = nr_seq_analise_p
					and (a.nr_seq_conta_proc = nr_seq_proc_p or
						a.nr_seq_conta_mat = nr_seq_mat_p or
						a.nr_seq_proc_partic = nr_seq_proc_partic_p)
					and	a.nr_seq_ordem	= nr_seq_ordem_w;

					/* Obter valores e quantidades liberados/glosados */

					select	vl_glosa,
						vl_liberado_hi,
						vl_liberado_co,
						vl_liberado_material,
						vl_total,
						vl_glosa_co,
						vl_glosa_hi,
						vl_glosa_material,
						qt_liberada
					into STRICT	vl_glosa_w,
						vl_liberado_hi_w,
						vl_liberado_co_w,
						vl_liberado_material_w,
						vl_liberado_w,
						vl_glosa_co_w,
						vl_glosa_hi_w,
						vl_glosa_material_w,
						qt_liberada_w
					from	pls_analise_fluxo_item a
					where	a.nr_sequencia	= nr_seq_fluxo_w;

					if (coalesce(vl_glosa_w,0) = 0) and
						((coalesce(vl_liberado_w,0) <> coalesce(vl_apresentado_w,0)) and (coalesce(vl_liberado_w,0) <> coalesce(vl_calculado_w,0))) then
						vl_liberado_w	:= null;
						qt_liberada_w	:= null;
						vl_liberado_co_w := null;
						vl_liberado_material_w := null;
						vl_liberado_hi_w	:= null;

						SELECT * FROM pls_obter_valores_lib_analise(	nr_seq_item_resumo_w, cd_estabelecimento_p, vl_glosa_w, vl_liberado_w, qt_liberada_w, vl_liberado_co_w, vl_liberado_material_w, vl_liberado_hi_w, vl_glosa_co_w, vl_glosa_material_w, vl_glosa_hi_w) INTO STRICT vl_glosa_w, vl_liberado_w, qt_liberada_w, vl_liberado_co_w, vl_liberado_material_w, vl_liberado_hi_w, vl_glosa_co_w, vl_glosa_material_w, vl_glosa_hi_w;
					end if;

				else /* Se o sistema que atualizou a liberação */
					vl_liberado_w	:= null;
					qt_liberada_w	:= null;
					vl_liberado_co_w := null;
					vl_liberado_material_w := null;
					vl_liberado_hi_w	:= null;

					SELECT * FROM pls_obter_valores_lib_analise(	nr_seq_item_resumo_w, cd_estabelecimento_p, vl_glosa_w, vl_liberado_w, qt_liberada_w, vl_liberado_co_w, vl_liberado_material_w, vl_liberado_hi_w, vl_glosa_co_w, vl_glosa_material_w, vl_glosa_hi_w) INTO STRICT vl_glosa_w, vl_liberado_w, qt_liberada_w, vl_liberado_co_w, vl_liberado_material_w, vl_liberado_hi_w, vl_glosa_co_w, vl_glosa_material_w, vl_glosa_hi_w;
				end if;
			else
				vl_glosa_w 		:= vl_apresentado_w;
				vl_liberado_hi_w	:= 0;
				vl_liberado_co_w	:= 0;
				vl_liberado_material_w	:= 0;
				vl_liberado_w		:= 0;
				vl_glosa_co_w		:= 0;
				vl_glosa_hi_w		:= 0;
				vl_glosa_material_w	:= 0;
				qt_liberada_w		:= 0;
			end if;
		else
			vl_glosa_w		:= 0;
			vl_liberado_hi_w	:= 0;
			vl_liberado_co_w	:= 0;
			vl_liberado_material_w	:= 0;
			vl_liberado_w		:= 0;
			vl_glosa_co_w		:= 0;
			vl_glosa_hi_w		:= 0;
			vl_glosa_material_w	:= 0;
			qt_liberada_w		:= 0;
			vl_base_w		:= 0;
		end if;

		if (nr_seq_item_resumo_w IS NOT NULL AND nr_seq_item_resumo_w::text <> '') then

			if (vl_liberado_w > 0) and (vl_liberado_w < vl_base_w) then
				ie_pagamento_w	:= 'P';
			elsif (vl_liberado_w > 0) and (vl_liberado_w >= vl_base_w) then
				ie_pagamento_w	:= 'L';
			else
				ie_pagamento_w	:= 'G';
			end if;

			if (ie_pagamento_w	= 'L') then

				begin
				select	coalesce(ie_permite_lib_espec_analise,'N')
				into STRICT	ie_permite_lib_espec_analise_w
				from	pls_param_analise_conta
				where	cd_estabelecimento = cd_estabelecimento_p;
				exception
				when others then
					ie_permite_lib_espec_analise_w := 'N';
				end;

				if (ie_permite_lib_espec_analise_w = 'S') then

					select	max(x.nr_sequencia)
					into STRICT	nr_seq_analise_fluxo_item_w
					from	pls_analise_fluxo_item x
					where	((x.nr_seq_conta_proc	= nr_seq_proc_p) or (x.nr_seq_conta_mat	= nr_seq_mat_p) or (x.nr_seq_proc_partic	= nr_seq_proc_partic_p))
					and	x.ie_pagamento in ('P', 'G');

					if (coalesce(nr_seq_analise_fluxo_item_w,0) > 0) then
						ie_lib_espec_analise_w := 'S';
					end if;
				end if;

			end if;

			if (coalesce(ie_lib_espec_analise_w,'N') = 'S') and (ie_fluxo_com_glosa_w <> 'L') then

				vl_glosa_w		:= 0;
				vl_liberado_hi_w	:= 0;
				vl_liberado_co_w	:= 0;
				vl_liberado_material_w	:= 0;
				vl_liberado_w		:= 0;
				vl_glosa_co_w		:= 0;
				vl_glosa_hi_w		:= 0;
				vl_glosa_material_w	:= 0;
				qt_liberada_w		:= 0;
				ie_pagamento_w		:= 'G';
				ie_fluxo_com_glosa_w	:= 'P';

			end if;

			vl_glosa_w		:= coalesce(vl_glosa_w,0);
			vl_liberado_hi_w	:= coalesce(vl_liberado_hi_w,0);
			vl_liberado_co_w	:= coalesce(vl_liberado_co_w,0);
			vl_liberado_material_w	:= coalesce(vl_liberado_material_w,0);
			vl_liberado_w		:= coalesce(vl_liberado_w,0);
			vl_glosa_co_w		:= coalesce(vl_glosa_co_w,0);
			vl_glosa_hi_w		:= coalesce(vl_glosa_hi_w,0);
			vl_glosa_material_w	:= coalesce(vl_glosa_material_w,0);
			qt_liberada_w		:= coalesce(qt_liberada_w,0);
			vl_unitario_w		:= dividir_sem_round(vl_liberado_w,qt_liberada_w);

			update	w_pls_resumo_conta a
			set	vl_glosa 		= vl_glosa_w,
				vl_liberado_hi 		= vl_liberado_hi_w,
				vl_liberado_co		= vl_liberado_co_w,
				vl_liberado_material 	= vl_liberado_material_w,
				vl_total 		= vl_liberado_w,
				vl_glosa_co 		= vl_glosa_co_w,
				vl_glosa_hi 		= vl_glosa_hi_w,
				vl_glosa_material 	= vl_glosa_material_w,
				qt_liberado 		= qt_liberada_w,
				vl_unitario 		= vl_unitario_w,
				ie_pagamento 		= ie_pagamento_w,
				ie_fluxo_com_glosa	= ie_fluxo_com_glosa_w
			where	a.nr_seq_analise	= nr_seq_analise_p
			and	a.nr_sequencia		= nr_seq_item_resumo_w;

			if (coalesce(nr_seq_proc_p,0) > 0) then

				select	count(a.nr_sequencia)
				into STRICT	qt_itens_partic_w
				from	w_pls_resumo_conta a,
					pls_proc_participante b
				where	b.nr_sequencia		= a.nr_seq_partic_proc
				and	a.nr_seq_analise 	= nr_seq_analise_p
				and	b.nr_seq_conta_proc  	= nr_seq_proc_p
				and	a.ie_tipo_despesa	= 1;

				/*Se houver participante filho*/

				if (qt_itens_partic_w > 0) then

					select	coalesce(sum(vl_total),0),
						coalesce(sum(vl_liberado_hi),0),
						coalesce(sum(vl_calculado_hi),0)
					into STRICT	vl_total_ww,
						vl_liberado_hi_ww,
						vl_calculado_hi_ww
					from	w_pls_resumo_conta a
					where	a.nr_Seq_analise = nr_seq_analise_p
					and	a.nr_seq_partic_proc in (	SELECT	x.nr_sequencia
										from	pls_proc_participante x
										where	x.nr_seq_conta_proc = nr_seq_proc_p	);

					if (qt_ocor_pend_w > 0) then
						vl_total_ww := 0;
					end if;

					vl_liberado_w		:= coalesce(vl_total_ww,0) + coalesce(vl_liberado_co_w,0) + coalesce(vl_liberado_material_w,0);
					vl_glosa_w		:= coalesce(vl_base_w,0) - coalesce(vl_liberado_w,0);

					begin
					select	coalesce(qt_apresentado,0)
					into STRICT	qt_apresentado_w
					from	w_pls_resumo_conta a
					where	a.nr_seq_analise	= nr_seq_analise_p
					and	a.nr_seq_conta_proc  	= nr_seq_proc_p;
					exception
					when others then
						qt_apresentado_w := 0;
					end;

					if (vl_liberado_w > 0) and (vl_liberado_w < vl_base_w) then
						ie_pagamento_w	:= 'P';
						qt_liberada_w	:= qt_apresentado_w;
					elsif (vl_liberado_w > 0) and (vl_liberado_w >= vl_base_w) then
						ie_pagamento_w	:= 'L';
						qt_liberada_w	:= qt_apresentado_w;
					else
						ie_pagamento_w	:= 'G';
						qt_liberada_w	:= 0;
					end if;

					update	w_pls_resumo_conta a
					set	vl_liberado_hi		= vl_total_ww,
						ie_pagamento		= ie_pagamento_w,
						qt_liberado		= qt_liberada_w
					where	a.nr_seq_analise	= nr_seq_analise_p
					and	a.nr_seq_conta_proc  	= nr_seq_proc_p;

					if (vl_total_ww = 0) then
						update	w_pls_resumo_conta a
						set	vl_total		= vl_total_ww,
							vl_glosa 		= vl_base_w,
							ie_pagamento 		= 'G',
							vl_liberado_hi 		= 0,
							qt_liberado 		= 0,
							vl_unitario 		= 0,
							vl_liberado_material	= 0
						where	a.nr_seq_partic_proc in (	SELECT	x.nr_sequencia
											from	pls_proc_participante x
											where	x.nr_seq_conta_proc = nr_seq_proc_p	);
					end if;
				end if;

			elsif (coalesce(nr_seq_proc_partic_p,0) > 0) and (coalesce(ie_recursivo_p,'S') = 'S') then

				select	max(nr_seq_conta_proc)
				into STRICT	nr_seq_proc_w
				from	pls_proc_participante
				where	nr_sequencia = nr_seq_proc_partic_p;

				if (coalesce(nr_seq_proc_w,0) > 0) then
					CALL pls_analise_status_pgto(nr_seq_conta_w, null, nr_seq_proc_w,
								nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p,
								null, 'N', null,
								null);
				end if;

			end if;

			if (nr_seq_proc_p > 0) then
				ie_tipo_item_w	:= 'P';
				nr_seq_item_w	:= nr_seq_proc_p;
				CALL pls_atualizar_prest_pgto(	nr_seq_proc_p, null, null,
							nr_seq_analise_p, 'N', cd_estabelecimento_p,
							nm_usuario_p);
			elsif (nr_seq_mat_p > 0) then
				ie_tipo_item_w	:= 'M';
				nr_seq_item_w	:= nr_seq_mat_p;
				CALL pls_atualizar_prest_pgto(	null, nr_seq_mat_p, null,
							nr_seq_analise_p, 'N', cd_estabelecimento_p,
							nm_usuario_p);
			elsif (nr_seq_proc_partic_p > 0) then
				ie_tipo_item_w	:= 'R';
				nr_seq_item_w	:= nr_seq_proc_partic_p;
				CALL pls_atualizar_prest_pgto(	null, null, nr_seq_proc_partic_p,
							nr_seq_analise_p, 'N', cd_estabelecimento_p,
							nm_usuario_p);
			end if;

			vl_saldo_w	:= greatest(vl_liberado_w - vl_apresentado_w,0);

			vl_liberado_w := pls_atualiza_conta_item(nr_seq_item_w, ie_tipo_item_w, null, dividir_sem_round(vl_liberado_w,qt_liberada_w), vl_liberado_w, greatest(vl_glosa_w,0), vl_saldo_w, vl_liberado_w, qt_liberada_w, '', 'A', cd_estabelecimento_p, nm_usuario_p, 'N', 0, ie_conta_inteira_w, ie_tipo_liberacao_w, ie_gerar_analise_audit_w, null, null, null, null, null, null);
		end if;

	end if;

	if (coalesce(nr_seq_proc_partic_p,0) <> 0) then
		select	nr_seq_conta_proc
		into STRICT	nr_seq_conta_proc_ww
		from	pls_proc_participante
		where	nr_sequencia = nr_seq_proc_partic_p;

		select	coalesce(sum(vl_total),0)
		into STRICT	vl_total_partic_w
		from	w_pls_resumo_conta
		where	nr_seq_partic_proc = nr_seq_proc_partic_p;

		select	coalesce(sum(vl_total),0)
		into STRICT	vl_total_proc_ww
		from	w_pls_resumo_conta
		where	nr_seq_conta_proc = nr_seq_conta_proc_ww;

		if (vl_total_proc_ww = 0) and (vl_total_partic_w > 0) then
			update	w_pls_resumo_conta
			set	vl_total = vl_total_proc_w,
				vl_unitario = vl_total_proc_w / qt_apresentado
			where	nr_seq_conta_proc = nr_seq_conta_proc_ww
			and	coalesce(nr_seq_partic_proc::text, '') = '';
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_status_pgto ( nr_seq_conta_p bigint, nr_seq_mat_p bigint, nr_seq_proc_p bigint, nr_seq_analise_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_proc_partic_p bigint, ie_recursivo_p text, ie_gerar_analise_aud_p text, ie_analise_multipla_p text) FROM PUBLIC;

