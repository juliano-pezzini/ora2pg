-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proc_laudo_repasse ( dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) AS $body$
DECLARE


cd_edicao_amb_w			bigint;
cd_regra_w			bigint;
ie_pagto_w			regra_repasse_terceiro.ie_pagto%type;

procedimentos CURSOR(dt_inicial_w timestamp, dt_final_w timestamp) FOR
         SELECT	p.nr_sequencia,
		b.cd_medico_resp,
		c.cd_convenio_parametro,
		c.cd_categoria_parametro,
		b.ie_tipo_atendimento,
		b.dt_entrada,
		c.cd_estabelecimento,
		p.nr_interno_conta
	from    	laudo_paciente l,
		procedimento_paciente p,
                  conta_paciente c,
                  atendimento_paciente b
	where   	l.nr_sequencia             = p.nr_laudo
         and      p.nr_interno_conta         = c.nr_interno_conta
         and      p.nr_atendimento	         = b.nr_atendimento
	and	(p.nr_laudo IS NOT NULL AND p.nr_laudo::text <> '')
	and  	(l.dt_liberacao IS NOT NULL AND l.dt_liberacao::text <> '')
	and 	p.VL_PROCEDIMENTO 	> 0 
	and      not exists(	SELECT 	* from procedimento_repasse r 
				where 	r.nr_seq_procedimento = p.nr_sequencia
				and	(r.nr_laudo IS NOT NULL AND r.nr_laudo::text <> '')
				and 	((coalesce(r.ie_bloq_laudo_liberado,'N') = 'S') or (r.nr_laudo IS NOT NULL AND r.nr_laudo::text <> '')))
	and		not exists (	select	1
					from	proc_criterio_repasse y,
							procedimento_repasse x
					where	x.nr_seq_procedimento = p.nr_sequencia
					and		x.nr_seq_criterio = y.nr_sequencia 
					and		coalesce(y.IE_LIB_LAUDO_PROC,'N') = 'N')				
         and      l.dt_liberacao BETWEEN dt_inicial_w and coalesce(dt_final_w,clock_timestamp() + interval '1 days')
         order by p.nr_sequencia desc;

BEGIN

for	r_procedimentos in procedimentos(dt_inicial_p, dt_final_p) loop

	begin
	cd_edicao_amb_w	:= obter_edicao(r_procedimentos.cd_estabelecimento, r_procedimentos.cd_convenio_parametro, r_procedimentos.cd_categoria_parametro, r_procedimentos.dt_entrada, null);
	exception
	when others then

		select	max(cd_edicao_amb)
		into STRICT	cd_edicao_amb_w
		from	convenio_amb
		where	cd_estabelecimento	= r_procedimentos.cd_estabelecimento
		and	cd_convenio		= r_procedimentos.cd_convenio_parametro
		and	cd_categoria		= r_procedimentos.cd_categoria_parametro
		and (coalesce(ie_situacao,'A')	= 'A')
		and	dt_inicio_vigencia	=
			(SELECT	max(dt_inicio_vigencia)
			from	convenio_amb a
			where	a.cd_estabelecimento  = r_procedimentos.cd_estabelecimento
			and	a.cd_convenio         = r_procedimentos.cd_convenio_parametro
			and	a.cd_categoria        = r_procedimentos.cd_categoria_parametro
			and (coalesce(a.ie_situacao,'A')= 'A')
			and	a.dt_inicio_vigencia <=  r_procedimentos.dt_entrada);
	end;
			
		CALL gerar_procedimento_repasse(	r_procedimentos.nr_sequencia,
						r_procedimentos.cd_estabelecimento,
						r_procedimentos.cd_medico_resp,
						nm_usuario_p,
						cd_edicao_amb_w,
						r_procedimentos.cd_convenio_parametro,
						r_procedimentos.ie_tipo_atendimento,
						null,
						null,
						null);
						
		select	max(a.cd_regra)
		into STRICT	cd_regra_w
		from	procedimento_repasse a
		where	a.nr_seq_procedimento	= r_procedimentos.nr_sequencia;
		
		begin
		select	a.ie_pagto
		into STRICT	ie_pagto_w
		from	regra_repasse_terceiro a
		where	a.cd_regra	= cd_regra_w  LIMIT 1;
		exception
		when others then
			ie_pagto_w	:= null;
		end;	
		
		if (ie_pagto_w	= 'F') then
			update	procedimento_repasse
			set	vl_liberado	= vl_repasse,
				dt_liberacao	= clock_timestamp(),
				nm_usuario_lib	= nm_usuario_p,
				ie_status	= 'S',
				ie_bloq_laudo_liberado = 'S'
			where	nr_seq_procedimento	= r_procedimentos.nr_sequencia;			
		else
			update	procedimento_repasse
			set	ie_bloq_laudo_liberado 	= 'S'
			where	nr_seq_procedimento	= r_procedimentos.nr_sequencia;
		end if;
		
		if (r_procedimentos.nr_interno_conta IS NOT NULL AND r_procedimentos.nr_interno_conta::text <> '') then
			CALL gerar_procmat_repasse_nf(r_procedimentos.nr_interno_conta, nm_usuario_p, 'S');
		end if;
	
end loop;		
commit;		
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proc_laudo_repasse ( dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) FROM PUBLIC;

