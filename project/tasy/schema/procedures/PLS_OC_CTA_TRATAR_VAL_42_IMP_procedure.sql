-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_42_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
qt_caracter_atrib_w				integer;
ie_gera_ocorrencia_w				pls_oc_cta_selecao_ocor_v.ie_valido%type;
nr_indice_w					integer;
tb_seq_selecao_w				pls_util_cta_pck.t_number_table;
tb_valido_w					pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w					pls_util_cta_pck.t_varchar2_table_4000;

C01 CURSOR(	nr_seq_oc_cta_comb_pc		pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	regocor.nr_seq_regra_atrib,
		regatrib.ie_atributo,
		regatrib.qt_minimo_caracter,
		regatrib.ie_obrigatorio,
		regatrib.ie_qtd_parto,
		regatrib.dt_inicio_vigencia_ref,
		regatrib.dt_fim_vigencia_ref
	from	pls_oc_cta_val_regra_atrib 	regocor,
		pls_ocorrencia_conta_atrib 	regatrib
	where	regocor.nr_seq_oc_cta_comb 	= nr_seq_oc_cta_comb_pc
	and	regatrib.nr_sequencia		= regocor.nr_seq_regra_atrib;

--Validação principal das contas selecionadas
C02 CURSOR(	nr_id_transacao_pc						pls_oc_cta_selecao_imp.nr_id_transacao%type,
		dt_inicio_vigencia_ref_pc					pls_ocorrencia_conta_atrib.dt_inicio_vigencia_ref%type,
		dt_fim_vigencia_ref_pc						pls_ocorrencia_conta_atrib.dt_fim_vigencia_ref%type) FOR
	SELECT	conta.nr_sequencia						nr_sequencia,
		conta.dt_fim_faturamento					dt_fim_faturamento,
		conta.dt_inicio_faturamento					dt_inicio_faturamento,
		(	SELECT	count(1)
			from	pls_decl_conta_obito_imp obito
			where	obito.nr_seq_conta	= conta.nr_sequencia)	qt_nasc_mortos_conv,
		(	select	count(1)
			from	pls_decl_conta_vivo_imp vivo
			where	vivo.nr_seq_conta	= conta.nr_sequencia)	qt_nasc_vivos_conv,
		(	select	count(1)
			from	pls_diagnostico_conta_imp diag
			where	nr_seq_conta		= conta.nr_sequencia)	qt_diagnostico_conv,
		conta.cd_usuario_plano_conv					cd_usuario_plano_conv,
		conta.ds_indicacao_clinica					ds_indicacao_clinica,
		conta.cd_guia_operadora_conv 					cd_guia_solic_conv,
		coalesce(conta.nr_cons_prof_solic_conv,conta.nr_cons_prof_exec_conv)	nr_crm_profissional,
		conta.cd_senha							cd_senha,
		conta.cd_profissional_exec_conv					cd_profissional_exec_conv,
		conta.ds_observacao						ds_observacao,
		conta.ie_tipo_internacao_conv 					nr_seq_clinica_conv,
		conta.nr_seq_tipo_atend_conv					nr_seq_tipo_atend_conv,
		conta.ie_carater_atendimento_conv      				ie_carater_internacao_conv,
		conta.ie_regime_internacao					ie_regime_internacao,
		conta.ie_tipo_consulta						ie_tipo_consulta,
		conta.cd_guia_ok_conv						cd_guia_ok_conv,
		conta.cd_guia_prestador						cd_guia_prestador,
		conta.nr_seq_guia_conv						nr_seq_guia_conv,
		conta.nr_seq_segurado_conv					nr_seq_segurado_conv,
		conta.ie_tipo_faturamento					ie_tipo_faturamento,
		conta.cd_cnes_prest_exec					cd_cnes_prest_exec,
		conta.ie_recem_nascido						ie_recem_nascido,
		conta.nr_seq_motivo_encerramento
	from	pls_conta_imp	conta
	where	conta.dt_atendimento_conv between dt_inicio_vigencia_ref_pc and dt_fim_vigencia_ref_pc
	and	exists (	select 	1
			from	pls_oc_cta_selecao_imp	a
			where	a.nr_id_transacao 	= nr_id_transacao_pc
			and  	a.ie_valido 		= 'S'
			and  	a.nr_seq_conta 		= conta.nr_sequencia);

--Validação 8,9
C03 CURSOR(	nr_seq_conta_pc			pls_conta_imp.nr_sequencia%type) FOR
	SELECT	cd_doenca_obito,
		nr_declaracao
	from	pls_decl_conta_obito_imp
	where	nr_seq_conta			= nr_seq_conta_pc;

--Validação 11
C04 CURSOR(	nr_seq_conta_pc			pls_conta_imp.nr_sequencia%type) FOR
	SELECT	nr_declaracao
	from	pls_decl_conta_vivo_imp
	where	nr_seq_conta			= nr_seq_conta_pc;

--Validação 13, 14
C05 CURSOR(	nr_seq_conta_pc			pls_conta_imp.nr_sequencia%type) FOR
	SELECT	dt_inicio,
		dt_fim
	from	pls_conta_proc_imp
	where	nr_seq_conta			= nr_seq_conta_pc;

--Validação 18
C06 CURSOR(	nr_seq_guia_pc			pls_conta_imp.nr_seq_guia_conv%type) FOR
	SELECT	req.cd_matricula_estipulante
	from	pls_execucao_requisicao		exec,
		pls_requisicao			req
	where	exec.nr_seq_guia 		= nr_seq_guia_pc
	and	req.nr_sequencia		= exec.nr_seq_requisicao;

--Validação 19
C07 CURSOR(	nr_seq_segurado_pc		pls_conta_imp.nr_seq_segurado_conv%type) FOR
	SELECT	cd_matricula_estipulante
	from	pls_segurado
	where	nr_sequencia			= nr_seq_segurado_pc;

--Diagnóstico da conta
C08 CURSOR(	nr_seq_conta_pc			pls_conta_imp.nr_sequencia%type) FOR
	SELECT	cd_doenca
	from 	pls_diagnostico_conta_imp
	where 	nr_seq_conta			= nr_seq_conta_pc;
BEGIN
--- Deve exisitr informação da regra para executar a validação
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') and (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '')  then

	-- Varrer as regras de validação dos atributos cadastradas para verificar cada uma delas.
	for	r_C01_w in C01(nr_seq_combinada_p) loop
		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', 'N', nr_id_transacao_p, null);
		--limpa as variáveis
		SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
		nr_indice_w := 0;
		-- Quando for para verificar a regra para quantidade de parto > 0 só deve ser verificado se na conta não existe
		-- quantidade de parto informada. É ignorado os campos de atributo e todos os outros, portanto é executado
		-- este select que traz as contas que estão na tabela de seleção e não tem parto informado, para que seja
		-- gerada ocorrência para as mesmas.
		if ( r_C01_w.ie_qtd_parto = 'S') then
			--Abre cursor principal das contas selecionadas
			for	r_C02_w in C02(nr_id_transacao_p, r_C01_w.dt_inicio_vigencia_ref, r_C01_w.dt_fim_vigencia_ref) loop
				-- Só traz as contas que não tem registro de nascimento e óbito informado.
				if	((r_C02_w.qt_nasc_mortos_conv + r_C02_w.qt_nasc_vivos_conv) = 0) then

					tb_seq_selecao_w(nr_indice_w) := r_C02_w.nr_sequencia;
					tb_valido_w(nr_indice_w)      := 'S';
					tb_observacao_w(nr_indice_w)  := null;
					--Verifica o número de registros armazenados, caso tenha atingido limite grava os mesmos na tablela
					if (nr_indice_w >= pls_util_pck.qt_registro_transacao_w) then
						--Grava o que restar nas variáveis na tabela
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ_CONTA');
						--limpa as variáveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
						nr_indice_w := 0;
					else
						nr_indice_w := nr_indice_w + 1;
					end if;
				end if;
			end loop;
		-- Quando for regra para verificação de atributos então deve ter um atributo válido informado.
		-- caso não tenha nem executa a validação.
		elsif (r_C01_w.ie_atributo IS NOT NULL AND r_C01_w.ie_atributo::text <> '') then
			--Abre cursor principal das contas selecionadas
			for	r_C02_w in C02(nr_id_transacao_p, r_C01_w.dt_inicio_vigencia_ref, r_C01_w.dt_fim_vigencia_ref) loop
				if (r_C01_w.nr_seq_regra_atrib IS NOT NULL AND r_C01_w.nr_seq_regra_atrib::text <> '') then

					ie_gera_ocorrencia_w := 'N';
					tb_observacao_w(nr_indice_w)  := null;

					case(r_C01_w.ie_atributo)
						--Data/hora saída internação
						when 1 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.dt_fim_faturamento::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.dt_fim_faturamento IS NOT NULL AND r_C02_w.dt_fim_faturamento::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.dt_fim_faturamento);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--CID Principal
						when 2 then
							--Caso não exista registro na tabela pls_diagnostico_conta_imp gera a ocorrência
							if (r_C02_w.qt_diagnostico_conv > 0) then
								for	r_C08_w in C08(r_C02_w.nr_sequencia) loop
									--Verifica se atributo é obrigatório
									if (coalesce(r_C08_w.cd_doenca::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
										ie_gera_ocorrencia_w := 'S';
										exit;
									elsif ((r_C08_w.cd_doenca IS NOT NULL AND r_C08_w.cd_doenca::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
										ie_gera_ocorrencia_w := 'S';
										exit;
									end if;

									if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
										-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
										-- a regra for de quantidade mínima.
										qt_caracter_atrib_w := length(r_C08_w.cd_doenca);
										-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
										if (coalesce(qt_caracter_atrib_w::text, '') = '' or
											qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
											ie_gera_ocorrencia_w := 'S';
											exit;
										end if;
									end if;
								end loop;
							else
								if (r_C01_w.ie_obrigatorio = 'S' or (r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '')) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Qtd. nasc mortos
						when 7 then
							--Verifica se atributo é obrigatório
							if (r_C02_w.qt_nasc_mortos_conv = 0 and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif (r_C02_w.qt_nasc_mortos_conv <> 0 and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.qt_nasc_mortos_conv);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--CID 10 Óbito
						when 8 then
							--Caso não exista registro na tabela pls_decl_conta_obito_imp  gera a ocorrência
							if (r_C02_w.qt_nasc_mortos_conv > 0) then
								for	r_C03_w in C03(r_C02_w.nr_sequencia) loop
									--Verifica se atributo é obrigatório
									if (coalesce(r_C03_w.cd_doenca_obito::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
										ie_gera_ocorrencia_w := 'S';
										exit;
									elsif ((r_C03_w.cd_doenca_obito IS NOT NULL AND r_C03_w.cd_doenca_obito::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
										ie_gera_ocorrencia_w := 'S';
										exit;
									end if;

									if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
										-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
										-- a regra for de quantidade mínima.
										qt_caracter_atrib_w := length(r_C03_w.cd_doenca_obito);
										-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
										if (coalesce(qt_caracter_atrib_w::text, '') = '' or
											qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
											ie_gera_ocorrencia_w := 'S';
											exit;
										end if;
									end if;
								end loop;
							else
								if (r_C01_w.ie_obrigatorio = 'S' or (r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '')) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--N° declaração óbito
						when 9 then
							--Caso não exista registro na tabela pls_decl_conta_obito_imp  gera a ocorrência
							if (r_C02_w.qt_nasc_mortos_conv > 0) then
								for	r_C03_w in C03(r_C02_w.nr_sequencia) loop
									--Verifica se atributo é obrigatório
									if (coalesce(r_C03_w.nr_declaracao::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
										ie_gera_ocorrencia_w := 'S';
										exit;
									elsif ((r_C03_w.nr_declaracao IS NOT NULL AND r_C03_w.nr_declaracao::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
										ie_gera_ocorrencia_w := 'S';
										exit;
									end if;

									if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
										-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
										-- a regra for de quantidade mínima.
										qt_caracter_atrib_w := length(r_C03_w.nr_declaracao);
										-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
										if (coalesce(qt_caracter_atrib_w::text, '') = '' or
											qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
											ie_gera_ocorrencia_w := 'S';
											exit;
										end if;
									end if;
								end loop;
							else
								if (r_C01_w.ie_obrigatorio = 'S' or (r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '')) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Número da carteira
						when 10 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.cd_usuario_plano_conv::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.cd_usuario_plano_conv IS NOT NULL AND r_C02_w.cd_usuario_plano_conv::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.cd_usuario_plano_conv);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--N° declaração nasc vivo
						when 11 then
							--Caso não exista registro na tabela pls_decl_conta_vivo_imp   gera a ocorrência
							if (r_C02_w.qt_nasc_vivos_conv > 0) then
								for	r_C04_w in C04(r_C02_w.nr_sequencia) loop
									--Verifica se atributo é obrigatório
									if (coalesce(r_C04_w.nr_declaracao::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
										ie_gera_ocorrencia_w := 'S';
										exit;
									elsif ((r_C04_w.nr_declaracao IS NOT NULL AND r_C04_w.nr_declaracao::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
										ie_gera_ocorrencia_w := 'S';
										exit;
									end if;

									if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
										-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
										-- a regra for de quantidade mínima.
										qt_caracter_atrib_w := length(r_C04_w.nr_declaracao);
										-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
										if (coalesce(qt_caracter_atrib_w::text, '') = '' or
											qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
											ie_gera_ocorrencia_w := 'S';
											exit;
										end if;
									end if;
								end loop;
							else
								if (r_C01_w.ie_obrigatorio = 'S' or (r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '')) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Indicação Clínica
						when 12 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.ds_indicacao_clinica::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.ds_indicacao_clinica IS NOT NULL AND r_C02_w.ds_indicacao_clinica::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.ds_indicacao_clinica);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Hora inicial
						when 13 then
							for	r_C05_w in C05(r_C02_w.nr_sequencia) loop
								--Verifica se atributo é obrigatório
								if (coalesce(r_C05_w.dt_inicio::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
									ie_gera_ocorrencia_w := 'S';
									exit;
								elsif ((r_C05_w.dt_inicio IS NOT NULL AND r_C05_w.dt_inicio::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
									ie_gera_ocorrencia_w := 'S';
									exit;
								end if;

								if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
									-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
									-- a regra for de quantidade mínima.
									qt_caracter_atrib_w := length(r_C05_w.dt_inicio);
									-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
									if (coalesce(qt_caracter_atrib_w::text, '') = '' or
										qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
										ie_gera_ocorrencia_w := 'S';
										exit;
									end if;
								end if;
							end loop;
						--Hora final
						when 14 then
							for	r_C05_w in C05(r_C02_w.nr_sequencia) loop
								--Verifica se atributo é obrigatório
								if (coalesce(r_C05_w.dt_fim::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
									ie_gera_ocorrencia_w := 'S';
									exit;
								elsif ((r_C05_w.dt_fim IS NOT NULL AND r_C05_w.dt_fim::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
									ie_gera_ocorrencia_w := 'S';
									exit;
								end if;

								if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
									-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
									-- a regra for de quantidade mínima.
									qt_caracter_atrib_w := length(r_C05_w.dt_fim);
									-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
									if (coalesce(qt_caracter_atrib_w::text, '') = '' or
										qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
										ie_gera_ocorrencia_w := 'S';
										exit;
									end if;
								end if;
							end loop;
						--Data/hora de internação
						when 15 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.dt_inicio_faturamento::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.dt_inicio_faturamento IS NOT NULL AND r_C02_w.dt_inicio_faturamento::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.dt_inicio_faturamento);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--N° Guia referência
						when 16 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.cd_guia_solic_conv::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.cd_guia_solic_conv IS NOT NULL AND r_C02_w.cd_guia_solic_conv::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.cd_guia_solic_conv);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--CRM médico
						when 17 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.nr_crm_profissional::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.nr_crm_profissional IS NOT NULL AND r_C02_w.nr_crm_profissional::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.nr_crm_profissional);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Matrícula do estipulante na requisição
						when 18 then
							for	r_C06_w in C06(r_C02_w.nr_seq_guia_conv) loop
								--Verifica se atributo é obrigatório
								if (coalesce(r_C06_w.cd_matricula_estipulante::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
									ie_gera_ocorrencia_w := 'S';
									exit;
								elsif ((r_C06_w.cd_matricula_estipulante IS NOT NULL AND r_C06_w.cd_matricula_estipulante::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
									ie_gera_ocorrencia_w := 'S';
									exit;
								end if;

								if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
									-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
									-- a regra for de quantidade mínima.
									qt_caracter_atrib_w := length(r_C06_w.cd_matricula_estipulante);
									-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
									if (coalesce(qt_caracter_atrib_w::text, '') = '' or
										qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
										ie_gera_ocorrencia_w := 'S';
										exit;
									end if;
								end if;
							end loop;
						--Matrícula do estipulante no beneficiário
						when 19 then
							for	r_C07_w in C07(r_C02_w.nr_seq_segurado_conv) loop
								--Verifica se atributo é obrigatório
								if (coalesce(r_C07_w.cd_matricula_estipulante::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
									ie_gera_ocorrencia_w := 'S';
									exit;
								elsif ((r_C07_w.cd_matricula_estipulante IS NOT NULL AND r_C07_w.cd_matricula_estipulante::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
									ie_gera_ocorrencia_w := 'S';
									exit;
								end if;

								if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
									-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
									-- a regra for de quantidade mínima.
									qt_caracter_atrib_w := length(r_C07_w.cd_matricula_estipulante);
									-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
									if (coalesce(qt_caracter_atrib_w::text, '') = '' or
										qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
										ie_gera_ocorrencia_w := 'S';
										exit;
									end if;
								end if;
							end loop;
						--Senha de autorização
						when 20 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.cd_senha::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.cd_senha IS NOT NULL AND r_C02_w.cd_senha::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.cd_senha);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Médico executor
						when 21 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.cd_profissional_exec_conv::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.cd_profissional_exec_conv IS NOT NULL AND r_C02_w.cd_profissional_exec_conv::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.cd_profissional_exec_conv);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Observação
						when 23 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.ds_observacao::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.ds_observacao IS NOT NULL AND r_C02_w.ds_observacao::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.ds_observacao);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Tipo internação
						when 24 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.nr_seq_clinica_conv::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								tb_observacao_w(nr_indice_w)  := 'Tipo de internação inválido.';
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.nr_seq_clinica_conv IS NOT NULL AND r_C02_w.nr_seq_clinica_conv::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								tb_observacao_w(nr_indice_w)  := 'Tipo de internação inválido.';
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.nr_seq_clinica_conv);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									tb_observacao_w(nr_indice_w)  := 'Tipo de internação inválido.';
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;

						--Tipo atendimento
						when 25 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.nr_seq_tipo_atend_conv::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Tipo de atendimento inválido.';
							elsif ((r_C02_w.nr_seq_tipo_atend_conv IS NOT NULL AND r_C02_w.nr_seq_tipo_atend_conv::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Tipo de atendimento inválido.';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.nr_seq_tipo_atend_conv);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
									tb_observacao_w(nr_indice_w)  := 'Tipo de atendimento inválido.';
								end if;
							end if;

						--Caráter de internação
						when 26 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.ie_carater_internacao_conv::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Caracter de atendimento inválido.';
							elsif ((r_C02_w.ie_carater_internacao_conv IS NOT NULL AND r_C02_w.ie_carater_internacao_conv::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Caracter de atendimento inválido.';
							end if;


							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.ie_carater_internacao_conv);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
									tb_observacao_w(nr_indice_w)  := 'Caracter de atendimento inválido.';
								end if;
							end if;

							--Se não contemplar as condições de obrigatoriedade e tamanho do campo definidas na regra de atributo,
							-- ainda valida se o valor é  para o tipo de atendimento, para contemplar a glosa 1504.
							if (r_C02_w.ie_carater_internacao_conv not in ('E','U') and ie_gera_ocorrencia_w != 'S') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Caracter de atendimento inválido.';
							end if;

						--Regime de internação
						when 27 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.ie_regime_internacao::text, '') = '' and r_C01_w.ie_obrigatorio = 'S') then
								tb_observacao_w(nr_indice_w)  := 'Regime de internação inválido.';
								ie_gera_ocorrencia_w := 'S';
							elsif ((r_C02_w.ie_regime_internacao IS NOT NULL AND r_C02_w.ie_regime_internacao::text <> '') and r_C01_w.ie_obrigatorio = 'V') then
								tb_observacao_w(nr_indice_w)  := 'Regime de internação inválido.';
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.ie_regime_internacao);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									tb_observacao_w(nr_indice_w)  := 'Regime de internação inválido.';
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;

							--Se não contemplar as condições de obrigatoriedade e tamanho do campo definidas na regra de atributo,
							-- ainda valida se o valor é  para o Regime de internação, para contemplar a glosa 1505
							if (r_C02_w.ie_regime_internacao not in (1, 2, 3) and ie_gera_ocorrencia_w != 'S') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Regime de internação inválido.';
							end if;

						--Tipo consulta
						when 28 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.ie_tipo_consulta::text, '') = '') and (r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Tipo de consulta inválido.';
							elsif (r_C02_w.ie_tipo_consulta IS NOT NULL AND r_C02_w.ie_tipo_consulta::text <> '') and (r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Tipo de consulta inválido.';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.ie_tipo_consulta);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
									tb_observacao_w(nr_indice_w)  := 'Tipo de consulta inválido.';
								end if;
							end if;

							--Se não contemplar as condições de obrigatoriedade e tamanho do campo definidas na regra de atributo,
							-- ainda valida se o valor é  para o tipo de consulta, para contemplar a glosa 1603.
							if (r_C02_w.ie_tipo_consulta not in (1, 2, 3, 4) and ie_gera_ocorrencia_w != 'S') then
								ie_gera_ocorrencia_w := 'S';
								tb_observacao_w(nr_indice_w)  := 'Tipo de consulta inválido.';
							end if;
						--N° Guia
						when 29 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.cd_guia_ok_conv::text, '') = '') and (r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif (r_C02_w.cd_guia_ok_conv IS NOT NULL AND r_C02_w.cd_guia_ok_conv::text <> '') and (r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.cd_guia_ok_conv);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--N° Guia Prestador
						when 30 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.cd_guia_prestador::text, '') = '') and (r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif (r_C02_w.cd_guia_prestador IS NOT NULL AND r_C02_w.cd_guia_prestador::text <> '') and (r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.cd_guia_prestador);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Tipo faturamento
						when 31 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.ie_tipo_faturamento::text, '') = '') and (r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif (r_C02_w.ie_tipo_faturamento IS NOT NULL AND r_C02_w.ie_tipo_faturamento::text <> '') and (r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.ie_tipo_faturamento);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--CNES
						when 32 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.cd_cnes_prest_exec::text, '') = '') and (r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif (r_C02_w.cd_cnes_prest_exec IS NOT NULL AND r_C02_w.cd_cnes_prest_exec::text <> '') and (r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.cd_cnes_prest_exec);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						--Recem nascido
						when 33 then
							--Verifica se atributo é obrigatório
							if (coalesce(r_C02_w.ie_recem_nascido::text, '') = '') and (r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif (r_C02_w.ie_recem_nascido IS NOT NULL AND r_C02_w.ie_recem_nascido::text <> '') and (r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.ie_recem_nascido);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
						when 34 then
							if (coalesce(r_C02_w.nr_seq_motivo_encerramento, 0) = 0) and (r_C01_w.ie_obrigatorio = 'S') then
								ie_gera_ocorrencia_w := 'S';
							elsif (coalesce(r_C02_w.nr_seq_motivo_encerramento, 0) <> 0) and (r_C01_w.ie_obrigatorio = 'V') then
								ie_gera_ocorrencia_w := 'S';
							end if;

							if ((r_C01_w.qt_minimo_caracter IS NOT NULL AND r_C01_w.qt_minimo_caracter::text <> '') and ie_gera_ocorrencia_w != 'S') then
								-- Para evitar o desperdício de processamento, foi colocado para contar os caracteres apenas quando
								-- a regra for de quantidade mínima.
								qt_caracter_atrib_w := length(r_C02_w.nr_seq_motivo_encerramento);
								-- Se a quantidade de caracteres informada no campo for maior ou igual a quantidade definida na regra, não será gerada a ocorrência
								if (coalesce(qt_caracter_atrib_w::text, '') = '' or
									qt_caracter_atrib_w < r_C01_w.qt_minimo_caracter ) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;

						else	null;
					end case;
					-- Caso tenha que gerar ocorrência salva na variável
					if (ie_gera_ocorrencia_w = 'S') then

						tb_seq_selecao_w(nr_indice_w) := r_C02_w.nr_sequencia;
						tb_valido_w(nr_indice_w)      := 'S';

						--Verifica o número de registros armazenados, caso tenha atingido limite grava os mesmos na tablela
						if (nr_indice_w >= pls_util_pck.qt_registro_transacao_w) then
							--Grava o que restar nas variáveis na tabela
							CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
													tb_observacao_w, nr_id_transacao_p,
													'SEQ_CONTA');
							--limpa as variáveis
							SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
							nr_indice_w := 0;
						else
							nr_indice_w := nr_indice_w + 1;
						end if;
					end if;
				end if;
			end loop; --C02
		end if;
	end loop; -- C01
	--Se tiver alguma informaçõa grava na tabela
	CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
							tb_observacao_w, nr_id_transacao_p,
							'SEQ_CONTA');
	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N',
						ie_regra_excecao_p, null,
						nr_id_transacao_p, null);
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_42_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

