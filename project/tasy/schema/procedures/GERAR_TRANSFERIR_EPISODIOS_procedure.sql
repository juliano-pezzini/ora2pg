-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_transferir_episodios ( nr_episodio_origem_p text, nr_episodio_destino_p bigint, ie_acao_p text, dt_acerto_episodio_p timestamp, ie_transf_sucesso_p INOUT text ) AS $body$
DECLARE


	/*  
		ie_acao_p:
		R - Generate the transfer occurrences.
		T - Perform the transfer.
		L - Clear the generated occurrences.
        	D - Delete the origin cases.
	*/
	/*
		nr_count_episodio_w:
		Zero - Abort proccess.
		One or many - Perform the transference between cases.
	*/
    nr_tipo_atend_origem_w           atendimento_paciente.ie_tipo_atendimento%TYPE;
    nr_episodio_destino_w            episodio_paciente.nr_sequencia%TYPE := nr_episodio_destino_p;
    nr_seq_tipo_episodio_origem_w    tipo_episodio.ie_tipo%TYPE;
    nr_seq_tipo_episodio_destino_w   tipo_episodio.ie_tipo%TYPE;
    nr_episodio_valido_origem_w      varchar(1);
    nr_episodio_valido_destino_w     varchar(1);
    cd_estabelecimento_w             episodio_paciente.cd_estabelecimento%TYPE := wheb_usuario_pck.get_cd_estabelecimento;
    cd_estab_origem_w                episodio_paciente.cd_estabelecimento%TYPE;
    cd_estab_destino_w               episodio_paciente.cd_estabelecimento%TYPE;
    nm_usuario_w                     episodio_paciente.nm_usuario%TYPE := wheb_usuario_pck.get_nm_usuario;
    dt_acerto_episodio_w             episodio_paciente.dt_atualizacao%TYPE := dt_acerto_episodio_p;
    dt_fim_episodio_origem_w         episodio_paciente.dt_fim_episodio%TYPE;
    dt_fim_episodio_destino_w        episodio_paciente.dt_fim_episodio%TYPE;
    ie_transfere_w                   ocorrencia_transf_episodio.ie_transfere%TYPE := 'S';
    ds_motivo_transf_w               ocorrencia_transf_episodio.ds_motivo_transf%TYPE;
    ds_comando_w                     varchar(2000);
    ds_comando_ww                    varchar(2000);
    qt_reg_w                         double precision := 0;
    varsql                           varchar(1) := chr(39);
    ie_acao_w                        varchar(1) := ie_acao_p;
    regx_separador_w                 varchar(5) := '[^;]+';
    regx_nr_w                        bigint := 1;
    nr_count_episodio_w              bigint := 0;
    nr_process_episodio_w            varchar(1) := 'N';
    ie_exclui_episodio_origem_w      varchar(1) := 'N';

    c01 CURSOR FOR
    SELECT
        a.nm_tabela,
        b.nm_atributo
    FROM
        integridade_atributo      b,
        integridade_referencial   a
    WHERE
        a.nm_tabela = b.nm_tabela
        AND a.nm_integridade_referencial = b.nm_integridade_referencial
        AND a.nm_tabela_referencia = 'EPISODIO_PACIENTE'
        AND b.nm_atributo = 'NR_SEQ_EPISODIO';

    c02 CURSOR(
               nm_tabela_ww text
    ) FOR
    SELECT
        trigger_name
    FROM
        user_triggers
    WHERE
        table_name = upper(nm_tabela_ww);

    c03 CURSOR FOR
    SELECT
        nm_tabela,
        nm_atributo,
        nr_episodio_origem,
        nr_episodio_destino,
        qt_registros
    FROM
        ocorrencia_transf_episodio
    WHERE
        qt_registros > 0
        AND nm_usuario = nm_usuario_w
        AND dt_atualizacao = dt_acerto_episodio_w
        AND ie_transfere = 'S'
    ORDER BY
        nr_sequencia;WITH RECURSIVE cte AS (


    c04 CURSOR(
               regx_string_w      text,
               regx_separador_w   text,
               regx_nr_w          bigint
    ) IS
    WITH data AS (
        SELECT
            regx_string_w nr_episodio_origem

        WHERE
            length(regx_string_w) > 1
    )
    SELECT
        trim(both regexp_substr(nr_episodio_origem, regx_separador_w, regx_nr_w, 1)) nr_episodio_origem
    FROM
        data
    (regexp_substr(nr_episodio_origem, regx_separador_w, regx_nr_w, level) IS NOT NULL AND (regexp_substr(nr_episodio_origem, regx_separador_w, regx_nr_w, level))::text <> '')  UNION ALL


    c04 CURSOR(
               regx_string_w      text,
               regx_separador_w   text,
               regx_nr_w          bigint
    ) IS
    WITH data AS (
        SELECT
            regx_string_w nr_episodio_origem
        
        WHERE
            length(regx_string_w) > 1
    )
    SELECT
        trim(both regexp_substr(nr_episodio_origem, regx_separador_w, regx_nr_w, (c.level+1))) nr_episodio_origem
    FROM
        data
    (regexp_substr(nr_episodio_origem, regx_separador_w, regx_nr_w, level) IS NOT NULL AND (regexp_substr(nr_episodio_origem, regx_separador_w, regx_nr_w, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
;

    c05 CURSOR(
               nr_seq_episodio_p    episodio_paciente.nr_sequencia%TYPE
    ) FOR
    SELECT 
        nr_atendimento 
    FROM 
        atendimento_paciente
    WHERE 
        nr_seq_episodio = nr_seq_episodio_p;

    PROCEDURE limpa_transf_episodio(

                                    nm_usuario_clear_p   text,
                                    dt_transf_cases_p    timestamp,
                                    ie_todos_p           text
    ) IS
;
BEGIN
        IF ( ie_todos_p = 'S' ) THEN
            DELETE FROM ocorrencia_transf_episodio
            WHERE
                nm_usuario = nm_usuario_clear_p
                AND dt_atualizacao = dt_transf_cases_p;

        ELSE
            DELETE FROM ocorrencia_transf_episodio
            WHERE
                nm_usuario = nm_usuario_clear_p
                AND dt_atualizacao = dt_transf_cases_p
                AND ie_transfere = 'S';

        END IF;

        COMMIT;
    END;

BEGIN
    IF ( (nr_episodio_origem_p IS NOT NULL AND nr_episodio_origem_p::text <> '') AND (nr_episodio_destino_p IS NOT NULL AND nr_episodio_destino_p::text <> '') AND (dt_acerto_episodio_p IS NOT NULL AND dt_acerto_episodio_p::text <> '') ) THEN
        ie_transf_sucesso_p := 'S';
        IF ( coalesce(ie_acao_w, 'L') = 'L' ) THEN
            limpa_transf_episodio(nm_usuario_w, dt_acerto_episodio_w, 'S');
        END IF;

        IF ( ie_acao_w = 'R' ) THEN
            FOR x IN c04(nr_episodio_origem_p, regx_separador_w, regx_nr_w) LOOP nr_count_episodio_w := c04%rowcount;
            END LOOP;

            IF ( nr_count_episodio_w < 1 ) THEN
                CALL wheb_mensagem_pck.exibir_mensagem_abort(1180147);
            ELSE
                nr_process_episodio_w := 'S';
            END IF;

        END IF;

        IF ( ie_acao_w = 'R' ) AND ( nr_process_episodio_w = 'S' ) THEN
            limpa_transf_episodio(nm_usuario_w, dt_acerto_episodio_w, 'S');
            FOR r_c04_w IN c04(nr_episodio_origem_p, regx_separador_w, regx_nr_w) LOOP BEGIN

                IF (nr_episodio_destino_w IS NOT NULL AND nr_episodio_destino_w::text <> '') THEN

                    nr_seq_tipo_episodio_origem_w := obter_tipo_episodio(r_c04_w.nr_episodio_origem);
                    nr_seq_tipo_episodio_destino_w := obter_tipo_episodio(nr_episodio_destino_w);

                    nr_episodio_valido_origem_w := obter_se_case_valido_transf(r_c04_w.nr_episodio_origem);
                    nr_episodio_valido_destino_w := obter_se_case_valido_transf(nr_episodio_destino_w);

                    SELECT
                        MAX(dt_fim_episodio)
                    INTO STRICT dt_fim_episodio_origem_w
                    FROM
                        episodio_paciente
                    WHERE
                        nr_sequencia = r_c04_w.nr_episodio_origem
                        AND (dt_fim_episodio IS NOT NULL AND dt_fim_episodio::text <> '');

                    SELECT
                        MAX(dt_fim_episodio)
                    INTO STRICT dt_fim_episodio_destino_w
                    FROM
                        episodio_paciente
                    WHERE
                        nr_sequencia = nr_episodio_destino_w
                        AND (dt_fim_episodio IS NOT NULL AND dt_fim_episodio::text <> '');

                    IF ( ie_transfere_w = 'S' ) AND ( r_c04_w.nr_episodio_origem = nr_episodio_destino_w ) THEN
                        ie_transfere_w := 'N';
                        ds_motivo_transf_w := obter_desc_expressao(1060154);
                        ie_transf_sucesso_p := 'N';
                    END IF;

                    IF ( ie_transfere_w = 'S' ) AND ( (dt_fim_episodio_origem_w IS NOT NULL AND dt_fim_episodio_origem_w::text <> '') OR (dt_fim_episodio_destino_w IS NOT NULL AND dt_fim_episodio_destino_w::text <> '') )
                    THEN
                        ie_transfere_w := 'N';
                        ds_motivo_transf_w := obter_desc_expressao(1059797);
                        ie_transf_sucesso_p := 'N';
                    END IF;

                    IF ( ie_transfere_w = 'S' ) AND ( nr_seq_tipo_episodio_origem_w = '1' OR nr_seq_tipo_episodio_destino_w = '1' ) THEN
                        ie_transfere_w := 'N';
                        ds_motivo_transf_w := obter_desc_expressao(1059791);
                        ie_transf_sucesso_p := 'N';
                    END IF;

                    IF ( ie_transfere_w = 'S' ) AND ( nr_episodio_valido_origem_w = 'N' OR nr_episodio_valido_destino_w = 'N' ) THEN
                        ie_transfere_w := 'N';
                        ds_motivo_transf_w := obter_desc_expressao(1060543);
                        ie_transf_sucesso_p := 'N';
                    END IF;

                    IF ( ie_transfere_w = 'S' ) AND ( obter_param_funcao_html5(48, 9) = 'S' ) AND ( cd_estab_origem_w <> cd_estabelecimento_w
                    OR cd_estab_destino_w <> cd_estabelecimento_w ) THEN
                        ie_transfere_w := 'N';
                        ds_motivo_transf_w := obter_desc_expressao(1059851);
                        ie_transf_sucesso_p := 'N';
                    END IF;

                    IF ( ie_transfere_w = 'S' ) THEN
                        FOR r_c05_w IN c05(r_c04_w.nr_episodio_origem) LOOP BEGIN
                            nr_tipo_atend_origem_w :=  obter_tipo_atendimento(r_c05_w.nr_atendimento);

                            IF ( nr_tipo_atend_origem_w = 1 ) THEN
                                ie_transfere_w := 'N';
                                ds_motivo_transf_w := obter_desc_expressao(1060539);
                                ie_transf_sucesso_p := 'N';

                                EXIT;
                            END IF;
                        END;
                        END LOOP;
                    END IF;

                    IF ( ie_transfere_w = 'N' ) THEN
                        CALL gravar_ocorrencias_transf_epis(r_c04_w.nr_episodio_origem, nr_episodio_destino_w, NULL, NULL, nm_usuario_w,
                                                       cd_estabelecimento_w, qt_reg_w, dt_acerto_episodio_w, ie_transfere_w, ds_motivo_transf_w
                                                       );

                        ie_transfere_w := 'S';
                        ds_motivo_transf_w := '';
                    ELSE
                        FOR r_c01_w IN c01 LOOP
                            BEGIN
                                ds_comando_w := 'select count(*) from '
                                                || r_c01_w.nm_tabela
                                                || ' where '
                                                || r_c01_w.nm_atributo
                                                || ' = '
                                                || varsql
                                                || r_c04_w.nr_episodio_origem
                                                || varsql;

                                qt_reg_w := obter_valor_dinamico(ds_comando_w, qt_reg_w);
                                IF ( qt_reg_w > 0 ) THEN
                                    CALL gravar_ocorrencias_transf_epis(r_c04_w.nr_episodio_origem, nr_episodio_destino_w, r_c01_w.nm_tabela
                                    , r_c01_w.nm_atributo, nm_usuario_w,
                                                                   cd_estabelecimento_w, qt_reg_w, dt_acerto_episodio_w, ie_transfere_w
                                                                   , ds_motivo_transf_w);

                                    ds_motivo_transf_w := '';
                                END IF;

                            END;
                        END LOOP;
                    END IF;

                END IF;

            END;
            END LOOP;

        END IF;

        IF ( ie_acao_w = 'T' ) THEN
            FOR r_c03_w IN c03 LOOP BEGIN
                IF (r_c03_w.nm_tabela IS NOT NULL AND r_c03_w.nm_tabela::text <> '') AND (r_c03_w.nm_atributo IS NOT NULL AND r_c03_w.nm_atributo::text <> '') AND ( coalesce(r_c03_w.qt_registros, 0) >
                0 ) AND (r_c03_w.nr_episodio_origem IS NOT NULL AND r_c03_w.nr_episodio_origem::text <> '') AND (r_c03_w.nr_episodio_destino IS NOT NULL AND r_c03_w.nr_episodio_destino::text <> '') THEN
                    CALL wheb_usuario_pck.set_ie_executar_trigger('N');
                    FOR r_c02_w IN c02(r_c03_w.nm_tabela) LOOP
                        CALL exec_sql_dinamico('Tasy', ' alter trigger '
                                                  || r_c02_w.trigger_name
                                                  || ' disable ');
                        COMMIT;
                    END LOOP;

                    ds_comando_ww := ( 'update '
                                       || r_c03_w.nm_tabela
                                       || ' set '
                                       || r_c03_w.nm_atributo
                                       || ' = '
                                       || r_c03_w.nr_episodio_destino
                                       || ' where '
                                       || r_c03_w.nm_atributo
                                       || ' = '
                                       || upper(r_c03_w.nr_episodio_origem) );

                    CALL exec_sql_dinamico('ETRANSERCASES', ds_comando_ww);
                    COMMIT;
                    FOR r_c02_w IN c02(r_c03_w.nm_tabela) LOOP CALL exec_sql_dinamico('Tasy', ' alter trigger '
                                                                                         || r_c02_w.trigger_name
                                                                                         || ' enable ');
                    END LOOP;

                    CALL wheb_usuario_pck.set_ie_executar_trigger('S');
                END IF;

            END;
            END LOOP;

            limpa_transf_episodio(nm_usuario_w, dt_acerto_episodio_w, 'N');
        END IF;

        IF ( ie_acao_w = 'D' ) THEN
            FOR r_c04_w IN c04(nr_episodio_origem_p, regx_separador_w, regx_nr_w) LOOP BEGIN
                SELECT
                    CASE WHEN COUNT(*)=0 THEN  'S'  ELSE 'N' END
                INTO STRICT ie_exclui_episodio_origem_w
                FROM
                    ocorrencia_transf_episodio
                WHERE
                    nr_episodio_origem = r_c04_w.nr_episodio_origem
                    AND nm_usuario = nm_usuario_w
                    AND dt_atualizacao = dt_acerto_episodio_p
                    AND ie_transfere = 'N';

                IF ( ie_exclui_episodio_origem_w = 'S' ) THEN
                    BEGIN
                        DELETE FROM episodio_paciente
                        WHERE
                            nr_sequencia = r_c04_w.nr_episodio_origem;

                        CALL gravar_log_exclusao('EPISODIO_PACIENTE', nm_usuario_w, 'NR_SEQUENCIA='
                                                                               || r_c04_w.nr_episodio_origem
                                                                               || '; DT_ACERTO='
                                                                               || to_char(dt_acerto_episodio_p, 'dd/mm/yyyy hh24:mi:ss'
                                                                               || ';'), 'N');

                        COMMIT;
                    EXCEPTION
                        WHEN OTHERS THEN
                            CALL gravar_log_exclusao('EPISODIO_PACIENTE', nm_usuario_w, wheb_mensagem_pck.get_texto(941356, 'NM_TABELA='
                                                                                                                       || 'EPISODIO_PACIENTE'
                                                                                                                       || ';NM_CHAVE='
                                                                                                                       || 'NR_SEQUENCIA'
                                                                                                                       || ';DS_VALOR='
                                                                                                                       || r_c04_w
                                                                                                                       .nr_episodio_origem
                                                                                                                       || ';DS_ERRO='
                                                                                                                       || SQLSTATE
                                                                                                                       || ' - '
                                                                                                                       || substr(
                                                                                                                       sqlerrm, 1
                                                                                                                       , 200)), 'N'
                                                                                                                       );

                            COMMIT;
                    END;

                END IF;

            END;
            END LOOP;
			
			limpa_transf_episodio(nm_usuario_w, dt_acerto_episodio_w, 'S');
        END IF;

    END IF;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_transferir_episodios ( nr_episodio_origem_p text, nr_episodio_destino_p bigint, ie_acao_p text, dt_acerto_episodio_p timestamp, ie_transf_sucesso_p INOUT text ) FROM PUBLIC;

