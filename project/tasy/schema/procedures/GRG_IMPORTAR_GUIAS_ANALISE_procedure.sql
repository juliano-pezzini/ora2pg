-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE grg_importar_guias_analise (nr_seq_lote_hist_p bigint, nm_usuario_p text) AS $body$
DECLARE

				
nr_interno_conta_w	bigint;
cd_autorizacao_w	varchar(255);
cd_convenio_w		bigint;
nr_seq_guia_w		bigint;
nr_seq_propaci_w	bigint;
nr_seq_matpaci_w	bigint;
vl_pago_w		double precision;
vl_glosa_w		double precision;
qt_item_w		double precision;
vl_saldo_w		double precision;
cd_motivo_glosa_w 		varchar(10);
cd_motivo_glosa_insert_w	convenio_retorno_movto.cd_motivo%type;
cd_motivo_tiss_insert_w		convenio_retorno_movto.cd_motivo_glosa_tiss%type;
ie_acao_glosa_w			varchar(10);
ds_complemento_w		lote_audit_hist_imp.ds_complemento%type;
cd_resposta_glosa_w		lote_audit_hist_item.cd_resposta%type;
count_w				integer;
ie_motivo_glosa_convenio_w	varchar(1) := 'N';
nr_seq_w			lote_audit_hist_item.nr_sequencia%type;
vl_amenor_w			lote_audit_hist_item.vl_amenor%type;

				
c01 CURSOR FOR
SELECT	a.nr_interno_conta,
	trim(both substr(a.nr_doc_convenio,1,20))
from	lote_audit_hist_imp a,
	conta_paciente b
where	a.nr_interno_conta	= b.nr_interno_conta
and	b.cd_convenio_parametro	= cd_convenio_w
and	a.nr_seq_lote_audit	= nr_seq_lote_hist_p
and	(a.nr_interno_conta IS NOT NULL AND a.nr_interno_conta::text <> '')
and	(a.nr_doc_convenio IS NOT NULL AND a.nr_doc_convenio::text <> '')
group by a.nr_interno_conta,
	a.nr_doc_convenio;

c02 CURSOR FOR	
SELECT	nr_seq_propaci,
	nr_seq_matpaci,
	coalesce(sum(vl_pago),0),
	coalesce(sum(vl_glosa),0),
	coalesce(sum(qt_item),0),
	cd_motivo_glosa_imp,
	ie_acao_glosa_imp,
	ds_complemento
from	lote_audit_hist_imp
where	nr_seq_guia		= nr_seq_guia_w
and	nr_seq_lote_audit	= nr_seq_lote_hist_p
and ((nr_seq_propaci IS NOT NULL AND nr_seq_propaci::text <> '') or (nr_seq_matpaci IS NOT NULL AND nr_seq_matpaci::text <> ''))
group by nr_seq_propaci,
	nr_seq_matpaci,
	cd_motivo_glosa_imp,
	ie_acao_glosa_imp,
	ds_complemento;	
				

BEGIN

select	max(a.cd_convenio)	
into STRICT	cd_convenio_w	
from	lote_auditoria a,
	lote_audit_hist b
where	a.nr_sequencia	= b.nr_seq_lote_audit
and	b.nr_sequencia	= nr_seq_lote_hist_p;

select	count(1)
into STRICT	count_w
from	convenio_motivo_glosa
where	cd_convenio = cd_convenio_w;

if (count_w > 0)  then
	ie_motivo_glosa_convenio_w := 'S';
end if;

open C01;
loop
fetch C01 into	
	nr_interno_conta_w,
	cd_autorizacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	vl_saldo_w	:= (obter_saldo_conpaci(nr_interno_conta_w,cd_autorizacao_w))::numeric;
	
	--if	(vl_saldo_w > 0) then
	
	select	nextval('lote_audit_hist_guia_seq')
	into STRICT	nr_seq_guia_w
	;

	insert into lote_audit_hist_guia(cd_autorizacao,
		dt_atualizacao,
		nm_usuario,
		nr_interno_conta,
		nr_seq_lote_hist,
		nr_sequencia,
		vl_saldo_guia)
	values (cd_autorizacao_w,
		clock_timestamp(),
		nm_usuario_p,
		nr_interno_conta_w,
		nr_seq_lote_hist_p,
		nr_seq_guia_w,
		vl_saldo_w);
		
	update	lote_audit_hist_imp
	set	nr_seq_guia		= nr_seq_guia_w
	where	nr_interno_conta	= nr_interno_conta_w
	and	nr_doc_convenio		= cd_autorizacao_w;	

	open C02;
	loop
	fetch C02 into	
		nr_seq_propaci_w,
		nr_seq_matpaci_w,
		vl_pago_w,
		vl_glosa_w,
		qt_item_w,
		cd_motivo_glosa_w,
		ie_acao_glosa_w,
		ds_complemento_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
		begin
			if (ie_motivo_glosa_convenio_w = 'S') then
				select	x.cd_motivo_glosa,
					y.cd_motivo_tiss,
					z.cd_resposta
				into STRICT	cd_motivo_glosa_insert_w,
					cd_motivo_tiss_insert_w,
					cd_resposta_glosa_w
				FROM convenio_motivo_glosa x
LEFT OUTER JOIN tiss_motivo_glosa y ON (x.cd_motivo_glosa = y.cd_motivo_glosa)
LEFT OUTER JOIN motivo_glosa z ON (x.cd_motivo_glosa = z.cd_motivo_glosa)
WHERE x.cd_glosa_convenio 	= cd_motivo_glosa_w and x.cd_convenio 		= cd_convenio_w;
			else
				select	z.cd_motivo_glosa,
					y.cd_motivo_tiss,
					z.cd_resposta
				into STRICT	cd_motivo_glosa_insert_w,
					cd_motivo_tiss_insert_w,
					cd_resposta_glosa_w
				FROM motivo_glosa z
LEFT OUTER JOIN tiss_motivo_glosa y ON (z.cd_motivo_glosa = y.cd_motivo_glosa)
WHERE z.cd_motivo_glosa 	= cd_motivo_glosa_w;			
			end if;
		exception
		when others then
			cd_motivo_glosa_insert_w := null;
			cd_motivo_tiss_insert_w	:= null;
			cd_resposta_glosa_w := null;
		end;		
		
		insert into lote_audit_hist_item(dt_atualizacao,
			dt_atualizacao_nrec,
			dt_historico,
			nm_usuario,
			nm_usuario_nrec,
			nr_seq_guia,				
			nr_seq_lote,
			nr_seq_matpaci,
			nr_seq_propaci,
			nr_sequencia,
			qt_item,
			vl_adicional,
			vl_amenor,
			vl_glosa,
			vl_glosa_informada,
			vl_pago,
			vl_saldo,
			vl_saldo_amenor,
			cd_motivo_glosa,
			cd_motivo_glosa_tiss,
			cd_resposta,
			ie_acao_glosa,
			ds_observacao)
		values (clock_timestamp(),
			clock_timestamp(),
			clock_timestamp(),
			nm_usuario_p,
			nm_usuario_p,
			nr_seq_guia_w,
			nr_seq_lote_hist_p,
			nr_seq_matpaci_w,
			nr_seq_propaci_w,
			nextval('lote_audit_hist_item_seq'),
			qt_item_w,
			0, -- vl_adicional
			0, --vl_amenor
			0, --vl_glosa
			vl_glosa_w,
			vl_pago_w,
			vl_glosa_w, --vl_saldo
			vl_glosa_w, --vl_saldo_amenor
			cd_motivo_glosa_insert_w,
			cd_motivo_tiss_insert_w,
			cd_resposta_glosa_w,
			ie_acao_glosa_w,
			ds_complemento_w)
		returning nr_sequencia into nr_seq_w;
		
		vl_amenor_w 	:= (obter_dados_lote_audit_item(nr_seq_w,'VO'))::numeric  - vl_glosa_w - vl_pago_w;

		if (ie_acao_glosa_w = 'P') then

			update	lote_audit_hist_item
			set 	vl_amenor =  vl_amenor_w,
				vl_glosa = vl_glosa_w
			where	nr_sequencia = nr_seq_w;
			
		elsif (ie_acao_glosa_w = 'R') then
			
			update	lote_audit_hist_item
			set 	vl_amenor =  vl_amenor_w,
				vl_glosa_informada = vl_amenor_w,
				vl_glosa = 0
			where	nr_sequencia = nr_seq_w;
			
		elsif (ie_acao_glosa_w = 'A') then
			
			update	lote_audit_hist_item
			set 	vl_amenor =  0,
				vl_glosa = vl_glosa_w
			where	nr_sequencia = nr_seq_w;	
			
		end if;
			
		end;
	end loop;
	close C02;		
	
	/*else
		
		update	lote_audit_hist_imp
		set	ds_inconsistencia	= 'Guia n√£o possui saldo!'
		where	nr_interno_conta	= nr_interno_conta_w
		and	nr_doc_convenio		= cd_autorizacao_w;		
	
	end if;	*/
	
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE grg_importar_guias_analise (nr_seq_lote_hist_p bigint, nm_usuario_p text) FROM PUBLIC;

