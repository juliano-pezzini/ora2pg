-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE alterar_status_agenda_regra (( cd_estabelecimento_p bigint, ie_fonte_p text default 'J' ) is TYPE cur_typ REFCURSOR) RETURNS varchar AS $body$
DECLARE

	query_str 		varchar(4000);
	sql_where 		varchar(1000);
	cd_agenda_w		agenda.cd_agenda%type;
	cd_setor_exclusivo_w	agenda.cd_setor_exclusivo%type;
	nr_seq_agrupamento_w	agenda.nr_seq_agrupamento%type;
	ie_aplicacao_regra_w	agenda_alterar_status.IE_APLICACAO_REGRA%type;
	
	
BEGIN
	cd_agenda_w := coalesce( cd_agenda_p , 0);
	cd_setor_exclusivo_w := coalesce( cd_setor_exclusivo_p , 0);
	nr_seq_agrupamento_w := coalesce( nr_seq_agrupamento_p , 0);
	ie_aplicacao_regra_w := coalesce( ie_aplicacao_regra_p,'P');
	
	if cd_agenda_w = 0 then
		sql_where := ' and :cd_agenda_regra_w = 0 ';
	else
		sql_where := ' and a.cd_agenda = :cd_agenda_regra_w ';
	end if;
	
	if cd_setor_exclusivo_w = 0 then
		sql_where := sql_where || ' and :cd_setor_agenda_w = 0 ';
	else
		sql_where := sql_where || ' and a.cd_setor_exclusivo = :cd_setor_agenda_w ';
	end if;
	
	if nr_seq_agrupamento_w = 0 then
		sql_where := sql_where || ' and :nr_seq_agrupamento_w = 0 ';
	else
		sql_where := sql_where || ' and a.nr_seq_agrupamento <> :nr_seq_agrupamento_w ';
	end if;
	
	if ie_aplicacao_regra_w = 'P' then
		sql_where := sql_where || ' and	b.dt_agenda	< :dt_agenda_retro_w ';
	else
		sql_where := sql_where || ' and	b.dt_agenda	>= b.dt_agendamento and nvl(:dt_agenda_retro_w,sysdate) is not null';
	end if;

	query_str := 'select	b.nr_sequencia, ' ||
			'	substr(obter_valor_dominio(83, b.ie_status_agenda),1,50), ' ||
			'	b.nr_seq_rp_mod_item, ' ||
			'	b.dt_agenda, ' ||
			'	b.cd_pessoa_fisica, ' ||
			'	b.nr_seq_rp_item_ind, ' ||
			'	b.dt_agendamento ' ||
			'from	agenda a, ' ||
			'	agenda_consulta b ' ||
			'where	a.cd_agenda		= b.cd_agenda ' ||
			'and	b.ie_status_agenda	= :ie_status_agenda_atual_w ' ||
			'and	b.dt_agenda		> :dt_inicial_w ' ||
			'and	a.cd_tipo_agenda 	= :cd_tipo_agenda_w ' ||
			'and	a.cd_estabelecimento	= :cd_estabelecimento_p ' ||
			'and	b.nm_usuario_acesso is null ' || sql_where;


			
	return query_str;
	END;	
	
function retorna_validacao_dia(qt_horas_ret_calc_p number,
							ie_forma_cons_periodo_pp varchar2,
							ie_descons_fim_sem_p varchar2,
							dt_agenda_retro_p date,
							ht_inicio_p date,
							dt_agendamento_p date,
							ie_considerar_dia_int_p varchar2,
							ie_aplicacao_regra_p varchar2) return varchar2 is
							
calc_tempo_agenda_w number(10,2);
permite_alteracao_w varchar2(1);							
dt_ini_calc_w date;
qt_horas_ret_calc_w number(10);
		

BEGIN

if (qt_horas_ret_calc_p < 0) then
	qt_horas_ret_calc_w := qt_horas_ret_calc_p * (-1);
else
	qt_horas_ret_calc_w := qt_horas_ret_calc_p;
end if;		
		
		
calc_tempo_agenda_w := (ht_inicio_p - dt_agendamento_p);

	if (ie_aplicacao_regra_p = 'F') then
		if (ie_forma_cons_periodo_pp = 'M') then
			dt_ini_calc_w := trunc(ht_inicio_p - (qt_horas_ret_calc_p / 1440));	
			if ((qt_horas_ret_calc_w > calc_tempo_agenda_w * 1440 and ie_descons_fim_sem_p = 'N') or (trunc(dt_agendamento_p) = dt_ini_calc_w and ie_considerar_dia_int_p = 'S' and ie_descons_fim_sem_p = 'N') or (ie_descons_fim_sem_p = 'S' and trunc(dt_agenda_retro_p) = trunc(ht_inicio_p) and ie_considerar_dia_int_p = 'S') or (ie_descons_fim_sem_p = 'S' and dt_agenda_retro_p >= ht_inicio_p and ie_considerar_dia_int_p = 'N')
				) then
					permite_alteracao_w := 'S';		
			else
				permite_alteracao_w := 'N';
			end if;
		else	
			dt_ini_calc_w := trunc(ht_inicio_p - (qt_horas_ret_calc_p / 24));	
			
			if ((qt_horas_ret_calc_w > calc_tempo_agenda_w * 24 and ie_descons_fim_sem_p = 'N') or (trunc(dt_agendamento_p) = dt_ini_calc_w and ie_considerar_dia_int_p = 'S' and ie_descons_fim_sem_p = 'N') or (ie_descons_fim_sem_p = 'S' and trunc(dt_agenda_retro_p) = trunc(ht_inicio_p) and ie_considerar_dia_int_p = 'S') or (ie_descons_fim_sem_p = 'S' and dt_agenda_retro_p >= ht_inicio_p and ie_considerar_dia_int_p = 'N')
				) then		
					permite_alteracao_w := 'S';
			else
				permite_alteracao_w := 'N';
			end if;	
		end if;		
	else
		permite_alteracao_w := 'S';
	end if;
	
	return permite_alteracao_w;	
END;	

begin

if (coalesce(wheb_usuario_pck.get_cd_estabelecimento::text, '') = '' and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '')) then
	CALL wheb_usuario_pck.set_cd_estabelecimento(cd_estabelecimento_p);
end if;

ie_consiste_concorrencia_w	:= OBTER_PARAMETRO_AGENDA(cd_estabelecimento_p, 'IE_CONSISTE_ALT_STATUS', 'N');
ie_gerar_alerta_falta_w := Obter_Param_Usuario(821, 363, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, cd_estabelecimento_p, ie_gerar_alerta_falta_w);
ie_recalcula_sessao_atual_w := Obter_Param_Usuario(866, 244, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, cd_estabelecimento_p, ie_recalcula_sessao_atual_w);
ie_permitir_proc_reg_agend_w := Obter_Param_Usuario(869, 411, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, cd_estabelecimento_p, ie_permitir_proc_reg_agend_w);

if (ie_consiste_concorrencia_w	= 'S') then
	open C05;
	loop
	fetch C05 into	
		nr_seq_sem_dt_fim_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		
		update	agenda_log_alt_status
		set	dt_final	= clock_timestamp()
		where	nr_Sequencia	= nr_seq_sem_dt_fim_w;		
		
		end;
	end loop;
	
	commit;
	
	close C05;
	
	select	nextval('agenda_log_alt_status_seq')
	into STRICT	nr_seq_log_w
	;

	insert into agenda_log_alt_status(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_inicio)
	values (nr_seq_log_w,
			clock_timestamp(),
			'Tasy',
			clock_timestamp(),
			'Tasy',
			clock_timestamp());
			
	commit;

	select	count(*)
	into STRICT	qt_em_aberto_w
	from	agenda_log_alt_status
	where	coalesce(dt_final::text, '') = ''
	and	nr_sequencia	< nr_seq_log_w;
end if;

if (qt_em_aberto_w	= 0) or (ie_consiste_concorrencia_w	= 'N') then
	open C01;
	loop
	fetch C01 into	
		qt_horas_retro_w,
		cd_tipo_agenda_w,
		ie_status_agenda_atual_w,
		ie_novo_status_w,
		cd_setor_agenda_w,
		cd_agenda_regra_w,
		ie_forma_cons_periodo_w,
		nr_seq_regra_w,
		nr_seq_agrupamento_w,
		dt_inicial_w,
		ie_aplicacao_regra_w,
		ie_descons_fim_sem_w,
		ie_considerar_dia_int_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		if (qt_horas_retro_w < 0) then
			qt_horas_ret_calc_w := qt_horas_retro_w * (-1);
		else
			qt_horas_ret_calc_w := qt_horas_retro_w;
		end if;
		
		if (coalesce(ie_aplicacao_regra_w,'P') = 'F' and qt_horas_retro_w > 0) then
			qt_horas_retro_w := qt_horas_retro_w * (-1);
		end if;
		
		ds_status_Agenda_novo_w	:= substr(obter_valor_dominio(83, ie_novo_status_w),1,50);
		if (ie_forma_cons_periodo_w = 'H') then
			dt_agenda_retro_w	:= (clock_timestamp() - (qt_horas_retro_w/24));
		elsif (ie_forma_cons_periodo_w = 'M') then
			dt_agenda_retro_w	:= (clock_timestamp() - (qt_horas_retro_w/1440));
		end if;
		
		if (ie_descons_fim_sem_w = 'S' and pkg_date_utils.get_weekday(dt_agenda_retro_w) in (1,7) ) then
			select NEXT_DAY(dt_agenda_retro_w, 2)
			into STRICT dt_agenda_retro_w
			;
		end if;
		
		if (cd_tipo_Agenda_w in (1,2)) then

			open C02;
			loop
			fetch C02 into	
				nr_seq_agenda_w,
				ds_status_Agenda_w,
				cd_agenda_w,
				cd_pessoa_fisica_w,
				dt_agendamento_w,
				hr_inicio_ww;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				
				permite_alterar_w := retorna_validacao_dia(qt_horas_ret_calc_w,
													ie_forma_cons_periodo_w,
													ie_descons_fim_sem_w,
													dt_agenda_retro_w,
													hr_inicio_ww,
													dt_agendamento_w,
													ie_considerar_dia_int_w,
													coalesce(ie_aplicacao_regra_w,'P'));

				if (permite_alterar_w = 'S') then
				
					select	max(hr_inicio)
					into STRICT	hr_inicio_w
					from	agenda_paciente
					where	nr_sequencia = nr_seq_agenda_w;

					select	max(hr_inicio)
					into STRICT	hr_cancel_w
					from	agenda_paciente
					where	cd_agenda = cd_agenda_w
					and	to_date(to_char(hr_inicio,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss') = to_date(to_char(hr_inicio_w,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss')
					and	ie_status_agenda = ie_novo_status_w;

					select 	max(nr_seq_ageint),
							max(nr_seq_ageint_item)
					into STRICT 	nr_seq_ageint_w, 
							nr_seq_ageint_item_w
					from 	ageint_marcacao_usuario
					where 	nr_seq_agenda = nr_seq_agenda_w;

					if (ie_permitir_proc_reg_agend_w = 'S' AND ie_novo_status_w = 'C') then
						if (coalesce(nr_seq_ageint_w,0) > 0) then
							update agenda_integrada
							set	nr_seq_status = 3,
								dt_fim_Agendamento	= clock_timestamp(),
								nm_usuario = 'Tasy',
								dt_atualizacao = clock_timestamp()
							where nr_sequencia = nr_seq_ageint_w;
						
							CALL ageint_ger_list_esp_agend_html(nr_seq_ageint_w, nr_seq_ageint_item_w, 'Tasy');
						end if;
					end if;

					if (hr_cancel_w IS NOT NULL AND hr_cancel_w::text <> '') then
						update	agenda_paciente
						set	ie_status_Agenda	= ie_novo_status_w,
							ds_observacao		= substr(substr(ds_observacao,1,1500) || chr(13) || Wheb_mensagem_pck.get_texto(307799, 'DS_STATUS_AGENDA_W='||ds_status_agenda_w||';DS_STATUS_AGENDA_NOVO_W='||ds_status_agenda_novo_w),1,1500), 
																									/*'Status alterado automaticamente de ' || ds_status_agenda_w || ' para ' || ds_status_agenda_novo_w,1,1500),*/

							hr_inicio 		= hr_cancel_w + (1 / 86400),
							nm_usuario = 'TASY'
						where	nr_sequencia	= nr_seq_agenda_w;
						commit;
					else
						update	agenda_paciente
						set	ie_status_Agenda	= ie_novo_status_w,
							ds_observacao		= substr(substr(ds_observacao,1,1500) || chr(13) || Wheb_mensagem_pck.get_texto(307799, 'DS_STATUS_AGENDA_W='||ds_status_agenda_w||';DS_STATUS_AGENDA_NOVO_W='||ds_status_agenda_novo_w),1,1500),
																									/*'Status alterado automaticamente de ' || ds_status_agenda_w || ' para ' || ds_status_agenda_novo_w,1,1500)*/

							nm_usuario = 'TASY'
						where	nr_sequencia	= nr_seq_agenda_w;
						commit;
					end if;
					
					open C04;
					loop
					fetch C04 into	
						cd_perfil_w,
						ds_titulo_w,
						ds_mensagem_w,
						qt_dias_regra_w;
					EXIT WHEN NOT FOUND; /* apply on C04 */
						begin
						
						if	((dt_agenda_w	>= trunc(clock_timestamp() - qt_dias_regra_w)) or (qt_dias_regra_w = 0)) then
						
							ie_gerar_comunic_w := 'N';
							
							select	substr(max(obter_nome_medico_combo_agcons(b.cd_estabelecimento,b.cd_agenda,b.cd_tipo_agenda,coalesce(b.ie_ordenacao,'S'))),1,255)
							into STRICT	ds_agenda_w
							from	agenda_consulta a,
								agenda b
							where	a.cd_agenda = b.cd_agenda
							and	a.nr_sequencia = nr_seq_agenda_w;
							
							ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w, '@agenda', ds_agenda_w),1,6000);
							ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w, '@horario', to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi')),1,6000);
							ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w, '@paciente', substr(obter_nome_pf(cd_pessoa_fisica_w),1,255)),1,6000);
							
							insert into comunic_interna(
									dt_comunicado,
									ds_titulo,
									ds_comunicado,
									nm_usuario,
									dt_atualizacao,
									ie_geral,
									nm_usuario_destino,
									ds_perfil_adicional,
									nr_sequencia,
									ie_gerencial,
									dt_liberacao,
									cd_estab_destino
								) values (
									clock_timestamp(),
									ds_titulo_w,
									ds_mensagem_w,
									'Tasy',
									clock_timestamp(),
									'N',
									'',
									cd_perfil_w||', ',
									nextval('comunic_interna_seq'),
									'N',
									clock_timestamp(),
									cd_estabelecimento_p);
						end if;
						end;
					end loop;
					close C04;
				end if;
				end;
			end loop;
			close C02;
			
		elsif (cd_tipo_Agenda_w in (3,4,5)) then

			ds_query_w := obter_query_c03(cd_agenda_regra_w, cd_setor_agenda_w, nr_seq_agrupamento_w,ie_aplicacao_regra_w);

			open c03 for EXECUTE ds_query_w using ie_status_agenda_atual_w, dt_inicial_w, cd_tipo_agenda_w,
				cd_estabelecimento_p, cd_agenda_regra_w, cd_setor_agenda_w, nr_seq_agrupamento_w,dt_agenda_retro_w;
			loop
			fetch C03 into	
				nr_seq_agenda_w,
				ds_status_Agenda_w,
				nr_seq_rp_mod_item_w,
				dt_agenda_w,
				cd_pessoa_fisica_w,
				nr_seq_rp_item_ind_w,
				dt_agendamento_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				
				permite_alterar_w := retorna_validacao_dia(qt_horas_ret_calc_w,
													ie_forma_cons_periodo_w,
													ie_descons_fim_sem_w,
													dt_agenda_retro_w,
													dt_agenda_w,
													dt_agendamento_w,
													ie_considerar_dia_int_w,
													coalesce(ie_aplicacao_regra_w,'P'));
													
				RAISE NOTICE 'qt_horas_ret_calc_w=%;ie_forma_cons_periodo_w=%;ie_descons_fim_sem_w=%;dt_agenda_retro_w=%;dt_agenda_w=%;dt_agendamento_w=%;ie_considerar_dia_int_w=%;ie_aplicacao_regra_w=%;permite_alterar_w=%;.', qt_horas_ret_calc_w, ie_forma_cons_periodo_w, ie_descons_fim_sem_w, dt_agenda_retro_w, dt_agenda_w, dt_agendamento_w, ie_considerar_dia_int_w, ie_aplicacao_regra_w, permite_alterar_w;

				if (permite_alterar_w = 'S') then
				
					begin
					select 	max(nr_seq_ageint),
							max(nr_seq_ageint_item)
					into STRICT 	nr_seq_ageint_w, 
							nr_seq_ageint_item_w
					from 	ageint_marcacao_usuario
					where 	nr_seq_agenda = nr_seq_agenda_w;
			
					if (ie_permitir_proc_reg_agend_w = 'S' AND ie_novo_status_w = 'C') then
						if (coalesce(nr_seq_ageint_w,0) > 0) then
							update agenda_integrada
							set nr_seq_status = 3,
								dt_fim_Agendamento	= clock_timestamp(),
								nm_usuario = 'Tasy',
								dt_atualizacao = clock_timestamp()
							where nr_sequencia = nr_seq_ageint_w;
						
							CALL ageint_ger_list_esp_agend_html(nr_seq_ageint_w, nr_seq_ageint_item_w, 'Tasy');
						end if;
					end if;

					update	agenda_consulta
					set	ie_status_Agenda	= ie_novo_status_w,
						ds_observacao		= substr(ds_observacao || chr(13) || Wheb_mensagem_pck.get_texto(307799, 'DS_STATUS_AGENDA_W='||ds_status_agenda_w||';DS_STATUS_AGENDA_NOVO_W='||ds_status_agenda_novo_w),1,1400),
																				/*'Status alterado automaticamente de ' || ds_status_agenda_w || ' para ' ||	ds_status_agenda_novo_w,1,4000)*/

						nm_usuario = 'TASY'
					where	nr_sequencia	= nr_seq_agenda_w;
									
					commit;
					
					if (ie_novo_status_w in ('F','FJ','I')) then
						select	max(dt_agenda),
							max(nr_minuto_duracao),
							coalesce(max(ie_status_agenda),ie_novo_status_w),
							max(cd_pessoa_fisica),
							coalesce(max(ie_agenda_web),'N'),
							max(cd_agenda),
							max(cd_procedimento),
							max(qt_total_secao),
							max(nr_controle_secao),
							max(nm_paciente)
						into STRICT	dt_agenda_w,
							nr_minuto_w,
							ie_status_w,
							cd_pf_w,
							ie_agenda_web_w,
							cd_agenda_w,
							cd_procedimento_w,
							qt_total_secao_w,
							nr_controle_secao_w,
							nm_paciente_w
						from	agenda_consulta
						where	nr_sequencia = nr_seq_agenda_w;

						select	coalesce(max((to_char(dt_agenda,'ss'))::numeric ),0)+1
						into STRICT	qt_hor_falta_w
						from	agenda_consulta
						where	cd_agenda = cd_agenda_w
						and		to_date(to_char(dt_agenda,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss') = to_date(to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss');

						if (cd_tipo_agenda_w	= 5) then
							--INICIO - Recalcular as sessoes geradas para o agendamento, caso seja registrado a falta para o agendamento atual, ficando assim a ultima sessao pendente para agendamento manual
							if (ie_recalcula_sessao_atual_w in ('S','A','C'))then
								open C06;
								loop
								fetch C06 into
								nr_seq_agenda_w,
								nr_secao_atual_w;
								EXIT WHEN NOT FOUND; /* apply on C06 */
								begin
									if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') and (nr_secao_atual_w > 1)then
										begin

										update	agenda_consulta
										set		nr_secao	= nr_secao_atual_w - 1
										where	nr_sequencia	= nr_seq_agenda_w;
															
										exception
										when others then
											ds_erro_w := '';
											if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
										end;					
									end if;
								end;
								end loop;
								close C06;

							  -- ultima sessao e agendada automaticamente para o proximo dia com agenda disponivel.
								if (ie_recalcula_sessao_atual_w in ('A','C'))then
									if (nr_controle_secao_w IS NOT NULL AND nr_controle_secao_w::text <> '')  then

										select	max(dt_agenda),
											max(nr_sequencia),
											max(ie_sessao_diariamente),
											max(ie_sessao_final_semana),
											max(qt_sessao_intervalo),
											max(ds_sessao_dias_semana),
											max(ie_sessao_copiar_proced),
											max(ie_sessao_copiar_proced_adic)
										into STRICT	dt_agenda_prox_w,
												nr_seq_agenda_w,
												ie_diario_w,
												ie_final_semana_w,
												qt_intervalo_w,
												ds_dias_w,
												ie_copiar_proced_w,
												ie_copiar_proced_adic_w
										from	agenda_consulta
										where	nr_controle_secao = nr_controle_secao_w						
										and	ie_status_agenda <> 'C';	
										
										nr_secao_atual_w := coalesce(nr_secao_atual_w, qt_total_secao_w);

										select 	ie_classif_agenda
										into STRICT	ie_classif_agenda_w
										from 	agenda_consulta
										where 	nr_sequencia = nr_seq_agenda_w;
										
										if (ie_recalcula_sessao_atual_w = 'C') then
											-- obter a proxima data apos a ultima secao
											dt_agenda_prox_w := obter_dados_secao_per_agenda_2( nr_seq_agenda_w, ie_diario_w, ie_final_semana_w, 'D', replace(ds_dias_w,' ','') );
										end if;

										dt_agenda_prox_ww := dt_agenda_prox_w;
										dt_agenda_aux_w := dt_agenda_prox_w;

										while dt_agenda_prox_ww = dt_agenda_aux_w
										loop
											dt_agenda_prox_w := dt_agenda_prox_w + 1;
											CALL Gerar_Horario_Agenda_Servico(cd_estabelecimento_p, cd_agenda_w, dt_agenda_prox_w, wheb_usuario_pck.get_nm_usuario);

											select	min(dt_agenda)	
											into STRICT	dt_agenda_prox_ww
											from	agenda_consulta a,
											  agenda b
											where	a.cd_agenda		= b.cd_agenda
											and	b.cd_tipo_agenda	= 5
											and	b.ie_situacao		= 'A'
											and	b.cd_estabelecimento	= cd_estabelecimento_p
											and	a.ie_status_agenda	= 'L'
											and	a.dt_agenda		> trunc(dt_agenda_prox_w)
											and	a.cd_agenda 		= cd_agenda_w
											and 	a.ie_classif_agenda	= ie_classif_agenda_w;

										end loop;

										update 	agenda_consulta
										set	 	dt_provavel_term = dt_agenda_prox_w
										where	 nr_controle_secao = nr_controle_secao_w
										and	 ((cd_pessoa_fisica = cd_pf_w) or (nm_paciente = nm_paciente_w))
										and	 ((cd_procedimento  = cd_procedimento_w) or (coalesce(cd_procedimento_w::text, '') = ''));

										if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
										
										if (ie_recalcula_sessao_atual_w = 'A') then
											SELECT * FROM gerar_agenda_con_semana_per(nr_seq_agenda_w, trunc(dt_agenda_prox_ww), wheb_usuario_pck.get_nm_usuario, 'S', 'S', null, '1,2,3,4,5,6,7,', 'S', 'S', ds_erro_w, cd_estabelecimento_p, qt_total_secao_w, nr_secao_atual_w, 'S', ds_insert_w) INTO STRICT ds_erro_w, ds_insert_w;
										elsif (ie_recalcula_sessao_atual_w = 'C') then
											SELECT * FROM gerar_agenda_con_semana_per(nr_seq_agenda_w, PKG_DATE_UTILS.start_of(dt_agenda_prox_ww, 'dd', 0) -1, wheb_usuario_pck.get_nm_usuario, coalesce(ie_diario_w,'S'), coalesce(ie_final_semana_w,'S'), qt_intervalo_w, coalesce(ds_dias_w,'1,2,3,4,5,6,7,'), coalesce(ie_copiar_proced_w,'S'), coalesce(ie_copiar_proced_adic_w,'S'), ds_erro_w, cd_estabelecimento_p, qt_total_secao_w, nr_secao_atual_w, 'S', ds_insert_w) INTO STRICT ds_erro_w, ds_insert_w;
										end if;
									end if;
								end if;
							end if;
						end if;
					end if;
						
					if	((ie_novo_status_w = 'F') or (ie_novo_status_w = 'I')) and (ie_gerar_alerta_falta_w = 'S') and (cd_tipo_agenda_w = 3) and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
						
						select	max(substr(obter_nome_pf(c.cd_pessoa_fisica),1,255))
						into STRICT	nm_medico_w
						from	agenda a,
								agenda_consulta b,
								pessoa_fisica c
						where	a.cd_agenda = b.cd_agenda
						and		a.cd_pessoa_fisica = c.cd_pessoa_fisica
						and		b.nr_sequencia = nr_seq_agenda_w;
						
						ds_mensagem_w	:= Wheb_mensagem_pck.get_texto(307819, 'NM_MEDICO_W='||nm_medico_w); --'Paciente faltou! Medico: '|| nm_medico_w;
						
						select	nextval('alerta_paciente_seq')
						into STRICT	nr_seq_alerta_w
						;
						
						insert into alerta_paciente(
									nr_sequencia,
									cd_estabelecimento,     
									cd_pessoa_fisica,       
									dt_alerta,              
									dt_atualizacao,         
									nm_usuario,             
									ds_alerta,              
									ie_situacao,            
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									cd_funcao)
						values ( 	
									nr_seq_alerta_w,
									cd_estabelecimento_p,
									cd_pessoa_fisica_w,
									dt_agenda_w,
									clock_timestamp(),
									wheb_usuario_pck.get_nm_usuario,
									substr(ds_mensagem_w,1,2000),
									'A',
									clock_timestamp(),
									wheb_usuario_pck.get_nm_usuario,
									821
						);
						
					end if;
					
					exception
					when others then
						nr_seq_agenda_w	:= nr_seq_agenda_w;	
					end;
					
					if	((nr_seq_rp_mod_item_w IS NOT NULL AND nr_seq_rp_mod_item_w::text <> '') or (nr_seq_rp_item_ind_w IS NOT NULL AND nr_seq_rp_item_ind_w::text <> '')) and
						((ie_novo_status_w = 'I') or (ie_novo_status_w = 'F')) and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
						begin
						CALL Rp_Gerar_Controle_Falta(cd_pessoa_fisica_w, dt_agenda_w, nr_seq_rp_mod_item_w, nr_seq_rp_item_ind_w,'Tasy');
						CALL Rp_Consistir_Falta_Agend(nr_seq_rp_mod_item_w, nr_seq_rp_item_ind_w, 'Tasy', cd_estabelecimento_p,nr_seq_agenda_w);
						end;
					end if;
								
					open C04;
					loop
					fetch C04 into	
						cd_perfil_w,
						ds_titulo_w,
						ds_mensagem_w,
						qt_dias_regra_w;
					EXIT WHEN NOT FOUND; /* apply on C04 */
						begin
						if	((dt_agenda_w	>= trunc(clock_timestamp() - qt_dias_regra_w)) or (qt_dias_regra_w = 0)) then
							ie_gerar_comunic_w	:= 'N';
											
							select	substr(max(obter_nome_medico_combo_agcons(b.cd_estabelecimento,b.cd_agenda,b.cd_tipo_agenda,coalesce(b.ie_ordenacao,'S'))),1,255)
							into STRICT	ds_agenda_w
							from	agenda_consulta a,
								agenda b
							where	a.cd_agenda = b.cd_agenda
							and	a.nr_sequencia = nr_seq_agenda_w;
							
							ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w, '@agenda', ds_agenda_w),1,6000);
							ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w, '@horario', to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi')),1,6000);
							ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w, '@paciente', substr(obter_nome_pf(cd_pessoa_fisica_w),1,255)),1,6000);
							
							insert into comunic_interna(
									dt_comunicado,
									ds_titulo,
									ds_comunicado,
									nm_usuario,
									dt_atualizacao,
									ie_geral,
									nm_usuario_destino,
									ds_perfil_adicional,
									nr_sequencia,
									ie_gerencial,
									dt_liberacao,
									cd_estab_destino
								) values (
									clock_timestamp(),
									ds_titulo_w,
									ds_mensagem_w,
									'Tasy',
									clock_timestamp(),
									'N',
									'',
									cd_perfil_w||', ',
									nextval('comunic_interna_seq'),
									'N',
									clock_timestamp(),
									cd_estabelecimento_p);
						end if;
						end;
					end loop;
					close C04;
				end if;
				end;
			end loop;
			close C03;
			
		end if;
		end;
	end loop;
	
	close C01;
end if;
if (ie_consiste_concorrencia_w	= 'S') then
	/*
	NaO ALTERAR ESSE UPDATE!!
	PODE CAUSAR PROBLEMAS DE PERFORMANCE NA AGENDA DE EXAMES / GESTaO DA AGENDA CIRURGiCA	
	*/
	
	update	agenda_log_alt_status
	set		dt_final		= clock_timestamp()
	where	nr_Sequencia	= nr_seq_log_w;
	commit;	
	
end if;

commit;

CALL QT_ALTERAR_STATUS_AGENDA_REGRA(cd_estabelecimento_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE alterar_status_agenda_regra (( cd_estabelecimento_p bigint, ie_fonte_p text default 'J' ) is TYPE cur_typ REFCURSOR) FROM PUBLIC;

