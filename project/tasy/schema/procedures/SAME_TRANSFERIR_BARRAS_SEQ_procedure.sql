-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE same_transferir_barras_seq ( cd_pessoa_origem_p text, cd_pessoa_destino_p text, cd_setor_origem_p bigint, cd_setor_destino_p bigint, dt_recebimento_p timestamp, cd_pessoa_receb_p bigint, ds_observacao_p text, dt_periodo_inicial_p timestamp, dt_periodo_final_p timestamp, ds_prontuario_p text, nm_usuario_p text, ie_digitalizado_p text, nr_seq_tipo_p bigint DEFAULT NULL) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Transferir por barras
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_atendimento_w		bigint;
cd_pessoa_fisica_w		varchar(10);
nr_atendimento_ant_w		bigint;
cd_pessoa_fisica_ant_w		varchar(10);
nr_seq_transf_w			bigint;
ds_prontuario_w			varchar(4000);
ie_contador_w			bigint	:= 0;
tam_lista_w			bigint;
ie_pos_virgula_w		smallint;
nr_seq_pront_w			bigint;
cd_estab_origem_w		setor_atendimento.cd_estabelecimento%type;
cd_estab_destino_w		setor_atendimento.cd_estabelecimento%type;
cd_estabelecimento_w	setor_atendimento.cd_estabelecimento%type;


BEGIN
ds_prontuario_w		:= ds_prontuario_p;
nr_atendimento_ant_w	:= 0;

while	(ds_prontuario_w IS NOT NULL AND ds_prontuario_w::text <> '') and ie_contador_w < 1000 loop
	begin
	tam_lista_w		:= length(ds_prontuario_w);
	ie_pos_virgula_w	:= position(',' in ds_prontuario_w);

	if (ie_pos_virgula_w <> 0) then
		nr_seq_pront_w	:= substr(ds_prontuario_w,1,(ie_pos_virgula_w - 1));
		ds_prontuario_w	:= substr(ds_prontuario_w,(ie_pos_virgula_w + 1),tam_lista_w);
	else
		nr_seq_pront_w	:= substr(ds_prontuario_w,1,tam_lista_w);
		ds_prontuario_w	:= null;
	end if;

	select	max(nr_atendimento),
		max(cd_pessoa_fisica)
	into STRICT	nr_atendimento_w,
		cd_pessoa_fisica_w
	from	same_prontuario
	where	nr_sequencia = nr_seq_pront_w;

	if (cd_setor_destino_p IS NOT NULL AND cd_setor_destino_p::text <> '') and (cd_setor_origem_p IS NOT NULL AND cd_setor_origem_p::text <> '') then
		cd_estab_origem_w := obter_estabelecimento_setor(cd_setor_origem_p);
		cd_estab_destino_w := obter_estabelecimento_setor(cd_setor_destino_p);
		
		if (cd_estab_origem_w <> cd_estab_destino_w) then
			cd_estabelecimento_w := cd_estab_destino_w;
		end if;
	end if;

	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
		if (coalesce(nr_atendimento_w,0) <> coalesce(nr_atendimento_ant_w,0)) or (coalesce(cd_pessoa_fisica_w,'X') <> coalesce(cd_pessoa_fisica_ant_w,'X')) then
			select	nextval('transf_prontuario_seq')
			into STRICT	nr_seq_transf_w
			;

			insert into transf_prontuario(	nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_pessoa_origem,
					cd_pessoa_destino,
					cd_setor_origem,
					cd_setor_destino,
					dt_envio,
					dt_recebimento,
					nr_prontuario,
					nr_atendimento,
					cd_pessoa_fisica,
					cd_pessoa_receb,
					ds_observacao,
					dt_periodo_inicial,
					dt_periodo_final,
					cd_estabelecimento,
					ie_digitalizado,
					NR_SEQ_TIPO)
			values (	nr_seq_transf_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_pessoa_origem_p,
					cd_pessoa_destino_p,
					cd_setor_origem_p,
					cd_setor_destino_p,
					clock_timestamp(),
					null,
					obter_prontuario_paciente(CD_PESSOA_FISICA_w),
					nr_atendimento_w,
					cd_pessoa_fisica_w,
					cd_pessoa_receb_p,
					ds_observacao_p,
					dt_periodo_inicial_p,
					dt_periodo_final_p,
					coalesce(cd_estabelecimento_w, wheb_usuario_pck.get_cd_estabelecimento),
					ie_digitalizado_p,
					nr_seq_tipo_p);

			nr_atendimento_ant_w	:= coalesce(nr_atendimento_w,0);
			cd_pessoa_fisica_ant_w	:= cd_pessoa_fisica_w;
		end if;

		insert into transf_prontuario_envelope(	nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_transf,
				nr_seq_prontuario)
		values (	nextval('transf_prontuario_envelope_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_transf_w,
				nr_seq_pront_w);


		insert into same_prontuario_hist(	nr_sequencia,
				nr_seq_same,
				dt_atualizacao,
				nm_usuario,
				nr_seq_operacao,
				dt_historico,
				nr_seq_caixa,
				nr_seq_local,
				cd_pessoa_fisica,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_setor_solicitante)
		values (	nextval('same_prontuario_hist_seq'),
				nr_seq_pront_w,
				clock_timestamp(),
				nm_usuario_p,
				24,
				clock_timestamp(),
				null,
				null,
				cd_pessoa_destino_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_setor_destino_p);
	end if;
	end;
	ie_contador_w	:= ie_contador_w + 1;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE same_transferir_barras_seq ( cd_pessoa_origem_p text, cd_pessoa_destino_p text, cd_setor_origem_p bigint, cd_setor_destino_p bigint, dt_recebimento_p timestamp, cd_pessoa_receb_p bigint, ds_observacao_p text, dt_periodo_inicial_p timestamp, dt_periodo_final_p timestamp, ds_prontuario_p text, nm_usuario_p text, ie_digitalizado_p text, nr_seq_tipo_p bigint DEFAULT NULL) FROM PUBLIC;

