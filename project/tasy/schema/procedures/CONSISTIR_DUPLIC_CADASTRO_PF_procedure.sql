-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_duplic_cadastro_pf ( cd_pessoa_fisica_p text, nm_pessoa_fisica_p text, dt_nascimento_p timestamp, nm_mae_p text, nr_identidade_p text, ds_duplicidade_p INOUT text) AS $body$
DECLARE

 
/* váriaveis do paciente */
 
nm_pessoa_param_w	varchar(60);
dt_nasc_param_w		timestamp;
nm_mae_param_w		varchar(60);

/* váriaveis do paciente duplicidade */
 
ie_ordem_duplic_w	smallint;
cd_pessoa_duplic_w	varchar(10);
nm_pessoa_duplic_w	varchar(60);
nr_pront_duplic_w	bigint;

/* mensagem de retorno */
 
ds_consistencia_w	varchar(255);
ds_duplicidade_w	varchar(255);

ie_somente_nome_w	varchar(255);

c01 CURSOR FOR 
	SELECT	1, /* consistir nome do paciente */
 
		max(a.cd_pessoa_fisica) 
	from	pessoa_fisica a 
	where	a.cd_pessoa_fisica	<> cd_pessoa_fisica_p 
	and	a.nm_pessoa_pesquisa	= nm_pessoa_param_w 
	and	coalesce(nr_identidade_p,'0')	= '0' 
	and (coalesce(ie_somente_nome_w,'N') = 'N') 
	and	coalesce(a.ie_status_usuario_event,'A') <> 'I' -- OS 407039 
	group by	1 
	
union
 
	SELECT	2, /* consistir nome do paciente x data de nascimento */
 
		max(a.cd_pessoa_fisica) 
	from	pessoa_fisica a 
	where	a.cd_pessoa_fisica	<> cd_pessoa_fisica_p 
	and	a.nm_pessoa_pesquisa	= nm_pessoa_param_w 
	and	a.dt_nascimento		= dt_nasc_param_w 
	and	coalesce(nr_identidade_p,'0')	= '0' 
	and	coalesce(a.ie_status_usuario_event,'A') <> 'I' 
	group by	2 
	
union
 
	select	3, /* consistir nome do paciente x nome da mãe */
 
		max(a.cd_pessoa_fisica) 
	from	compl_pessoa_fisica b, 
		pessoa_fisica a 
	where	b.ie_tipo_complemento	= 5 
	and	b.cd_pessoa_fisica	= a.cd_pessoa_fisica 
	and	a.cd_pessoa_fisica	<> cd_pessoa_fisica_p 
	and	a.nm_pessoa_pesquisa	= nm_pessoa_param_w 
	and	b.nm_contato_pesquisa	= nm_mae_param_w 
	and	coalesce(a.ie_status_usuario_event,'A') <> 'I' 
	group by	3 
	
union
 
	select	4, /* consistir nome, data de nascimento e número da identidade */
 
		max(a.cd_pessoa_fisica) 
	from	pessoa_fisica a 
	where	a.cd_pessoa_fisica	<> cd_pessoa_fisica_p 
	and	upper(a.nm_pessoa_fisica)	= upper(nm_pessoa_fisica_p) 
	and	a.dt_nascimento		= dt_nasc_param_w 
	and	a.nr_identidade		= nr_identidade_p 
	and	coalesce(a.ie_status_usuario_event,'A') <> 'I' 
	group by 4 
	order by	1,2;


BEGIN 
 
ds_duplicidade_p := '';
ds_duplicidade_w := '';
 
ie_somente_nome_w := obter_param_usuario(5, 162, Obter_perfil_Ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_somente_nome_w);
 
if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then 
	 
	nm_pessoa_param_w	:= substr(padronizar_nome(nm_pessoa_fisica_p),1,60);
	dt_nasc_param_w		:= dt_nascimento_p;
	nm_mae_param_w		:= substr(padronizar_nome(nm_mae_p),1,60);
	 
	open c01;
	loop 
	fetch c01 into	 
		ie_ordem_duplic_w, 
		cd_pessoa_duplic_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		/* obter dados do paciente duplicidade */
 
		select	max(SUBSTR(OBTER_NOME_PF(a.cd_pessoa_fisica), 0, 60)), 
			max(a.nr_prontuario) 
		into STRICT	nm_pessoa_duplic_w, 
			nr_pront_duplic_w 
		from	pessoa_fisica a 
		where	a.cd_pessoa_fisica	= cd_pessoa_duplic_w;
 
		/* identificar consistência */
 
		if (ie_ordem_duplic_w = 1) then 
			-- 'Nome: '		|| nm_pessoa_duplic_w || ' Cód.: '|| cd_pessoa_duplic_w || ' Prontuário: ' || nr_pront_duplic_w; 
			ds_consistencia_w	:= Wheb_mensagem_pck.get_texto(306499, 'NM_PESSOA_DUPLIC_W='||nm_pessoa_duplic_w||';CD_PESSOA_DUPLIC_W='||cd_pessoa_duplic_w||';NR_PRONT_DUPLIC_W='||nr_pront_duplic_w);
		elsif (ie_ordem_duplic_w = 2) then 
		  -- 'Nome e data nasc: ' || nm_pessoa_duplic_w || ' Cód.: '|| cd_pessoa_duplic_w || ' Prontuário: ' || nr_pront_duplic_w; 
			ds_consistencia_w	:= Wheb_mensagem_pck.get_texto(306505, 'NM_PESSOA_DUPLIC_W='||nm_pessoa_duplic_w||';CD_PESSOA_DUPLIC_W='||cd_pessoa_duplic_w||';NR_PRONT_DUPLIC_W='||nr_pront_duplic_w);
		elsif (ie_ordem_duplic_w = 3) then 
			-- 'Nome e nome mãe: '	|| nm_pessoa_duplic_w || ' Cód.: '|| cd_pessoa_duplic_w || ' Prontuário: ' || nr_pront_duplic_w; 
			ds_consistencia_w	:= Wheb_mensagem_pck.get_texto(306507, 'NM_PESSOA_DUPLIC_W='||nm_pessoa_duplic_w||';CD_PESSOA_DUPLIC_W='||cd_pessoa_duplic_w||';NR_PRONT_DUPLIC_W='||nr_pront_duplic_w);
		elsif (ie_ordem_duplic_w = 4) then 
		  -- 'Nome, data nasc. e identidade: ' || nm_pessoa_duplic_w || 'Cód.: '|| cd_pessoa_duplic_w || ' Prontuário: ' || nr_pront_duplic_w; 
			ds_consistencia_w	:= Wheb_mensagem_pck.get_texto(306509, 'NM_PESSOA_DUPLIC_W='||nm_pessoa_duplic_w||';CD_PESSOA_DUPLIC_W='||cd_pessoa_duplic_w||';NR_PRONT_DUPLIC_W='||nr_pront_duplic_w);
		end if;
 
		/* montar mensagem retorno */
 
		if	((coalesce(length(ds_duplicidade_w),0) + coalesce(length(ds_consistencia_w),0)) < 250) then 
			ds_duplicidade_w	:= ds_duplicidade_w	|| ds_consistencia_w	|| CHR(13)||CHR(10);
		end if;
		end;
	end loop;
	close c01;
 
	if (coalesce(length(ds_duplicidade_w),0) > 0) then 
		ds_duplicidade_p	:= ds_duplicidade_w;
	end if;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_duplic_cadastro_pf ( cd_pessoa_fisica_p text, nm_pessoa_fisica_p text, dt_nascimento_p timestamp, nm_mae_p text, nr_identidade_p text, ds_duplicidade_p INOUT text) FROM PUBLIC;

