-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_inconsistencia_benef ( nr_seq_intercambio_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


		
nr_seq_empresa_w		bigint;		
cd_dependencia_w		smallint;
cd_familia_w			integer;
cd_local_atendimento_w		smallint;
cd_lotacao_w			varchar(8);
cd_plano_intercambio_w		varchar(3);
cd_plano_origem_w		varchar(6);
cd_titular_plano_w		varchar(13);
cd_unimed_w			varchar(4);
cd_usuario_plano_w		varchar(14);
ds_lotacao_w			varchar(30);
dt_exclusao_w			timestamp;
dt_fim_repasse_w		timestamp;
dt_inclusao_w			timestamp;
dt_inclusao_plano_dest_w 	timestamp;
dt_nascimento_w			timestamp;
dt_repasse_w			timestamp;
dt_validade_carteira_w		timestamp;
ie_estado_civil_w		varchar(1);
ie_recem_nascido_w		varchar(1);
ie_repasse_w			varchar(1);
ie_tipo_repasse_contr_w		varchar(1);
ie_sexo_w			varchar(1);
nm_benef_abreviado_w		varchar(25);
nm_beneficiario_w		varchar(120);
nr_matricula_w			numeric(20);
nr_rg_w				varchar(15);
nr_seq_segurado_w		bigint;
nr_vigencia_origem_w		smallint;
sg_uf_rg_w			varchar(2);
cd_unimed_origem_w		smallint;
cd_unimed_destino_w		smallint;
nr_seq_benef_w			bigint;
qt_inconsistentes_w		bigint;
qt_planos_w			bigint;
cd_tipo_cobertura_w		varchar(3);
qt_coberturas_w			bigint;
qt_carencia_w			bigint;
qt_inco_carencia_w		bigint;
ie_tipo_pessoa_w		smallint;
cd_cgc_cpf_w			varchar(14);
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(14);
nr_seq_intercambio_atual_w	bigint;
cd_empresa_w			bigint;
nr_seq_titular_w		bigint;
nr_seq_congenere_w		bigint;
ie_natureza_w			varchar(2);
ie_abrangencia_w		varchar(2);
ie_tipo_registro_w		varchar(2);
qt_regra_grupo_operad_w		bigint;
qt_registros_w			bigint;
nr_seq_parentesco_w		bigint;
nr_seq_grupo_intercambio_w	bigint;
dt_contrato_w			timestamp;
nr_seq_plano_w			bigint;
ie_acomodacao_w			varchar(10);
ie_regulamentacao_w		varchar(10);
qt_idade_w			bigint;
nr_seq_tabela_inter_w		bigint;
ie_grau_parentesco_w		varchar(10);
ie_tipo_parentesco_w		varchar(10);
nr_seq_preco_w			bigint;
nr_seq_benef_encontrado_w	bigint;
nm_mae_benef_w			varchar(70);
nr_pis_pasep_w			varchar(11);
nr_idade_benef_w		smallint;
nr_versao_transacao_w		smallint;
dt_comp_risco_w			timestamp;
qt_segurados_w			bigint;
ds_endereco_w			ptu_beneficiario_compl.ds_endereco%type;
cd_cep_w			ptu_beneficiario_compl.cd_cep%type;
nm_municipio_w			ptu_beneficiario_compl.nm_municipio%type;
sg_uf_w				ptu_beneficiario_compl.sg_uf%type;
nr_endereco_w			ptu_beneficiario_compl.nr_endereco%type;
qt_benef_comp_w			bigint;
ie_tipo_contrato_w		ptu_intercambio.ie_tipo_contrato%type;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	ptu_intercambio_empresa
	where	nr_seq_intercambio	= nr_seq_intercambio_p;

C02 CURSOR FOR
	SELECT	a.cd_dependencia,
		a.cd_familia,
		a.cd_local_atendimento,
		a.cd_lotacao,
		a.cd_plano_intercambio,
		a.cd_plano_origem,
		a.cd_titular_plano,
		a.cd_unimed,
		coalesce(a.cd_usuario_plano,0),
		a.ds_lotacao,
		a.dt_exclusao,
		a.dt_fim_repasse,
		a.dt_inclusao,
		a.dt_inclusao_plano_dest,
		a.dt_nascimento,
		a.dt_repasse,
		a.dt_validade_carteira,
		a.ie_estado_civil,
		a.ie_recem_nascido,
		a.ie_repasse,
		a.ie_sexo,
		a.nm_benef_abreviado,
		a.nm_beneficiario,
		a.nr_matricula,
		a.nr_rg,
		a.nr_seq_segurado,
		a.nr_vigencia_origem,
		a.sg_uf_rg,
		a.nr_sequencia,
		a.ie_tipo_registro,
		a.nr_seq_plano,
		a.nr_seq_benef_encontrado,
		substr(a.nm_mae_benef,1,70),
		a.nr_pis_pasep,
		(SELECT	count(1)
		from	ptu_beneficiario_compl x
		where	a.nr_sequencia = x.nr_seq_beneficiario) qt_benef_comp
	from	ptu_intercambio_benef a
	where	a.nr_seq_empresa = nr_seq_empresa_w;
	
C03 CURSOR FOR
	SELECT	cd_tipo_cobertura
	from	ptu_beneficiario_carencia
	where	nr_seq_beneficiario	= nr_seq_benef_w;
	
C05 CURSOR FOR
	SELECT	b.nr_sequencia
	from	pls_regra_grupo_inter	b,
		pls_regra_benef_grupo	a
	where	a.nr_seq_regra		= b.nr_sequencia
	and	b.ie_situacao		= 'A'
	and	((a.nr_seq_cooperativa	= nr_seq_congenere_w and (a.nr_seq_cooperativa IS NOT NULL AND a.nr_seq_cooperativa::text <> '')) or (coalesce(a.nr_seq_cooperativa::text, '') = ''))
	and	coalesce(nr_seq_congenere::text, '') = ''
	and	((a.cd_cgc_empresa	= cd_cgc_w and (a.cd_cgc_empresa IS NOT NULL AND a.cd_cgc_empresa::text <> '')) or (coalesce(a.cd_cgc_empresa::text, '') = ''))
	and	((a.ie_tipo_repasse	= ie_repasse_w and (a.ie_tipo_repasse IS NOT NULL AND a.ie_tipo_repasse::text <> '')) or (coalesce(a.ie_tipo_repasse::text, '') = ''))
	and	((a.cd_operadora_empresa = cd_empresa_w and (a.cd_operadora_empresa IS NOT NULL AND a.cd_operadora_empresa::text <> '')) or (coalesce(a.cd_operadora_empresa::text, '') = ''))
	order by coalesce(a.nr_seq_cooperativa,0),
		coalesce(a.nr_seq_congenere,0),
		coalesce(a.ie_tipo_repasse,0),
		coalesce(a.cd_cgc_empresa,0),
		coalesce(a.cd_operadora_empresa,0);
		
C06 CURSOR FOR
	SELECT	nr_sequencia
	from	ptu_tabela_inter_preco
	where	nr_seq_tabela	= nr_seq_tabela_inter_w
	and	qt_idade_w	>= qt_idade_inicial
	and	qt_idade_w	<= qt_idade_final
	and	coalesce(ie_grau_titularidade,ie_grau_parentesco_w)	= ie_grau_parentesco_w;
		

BEGIN

select	cd_unimed_origem,
	cd_unimed_destino,
	nr_versao_transacao,
	ie_tipo_contrato
into STRICT	cd_unimed_origem_w,
	cd_unimed_destino_w,
	nr_versao_transacao_w,
	ie_tipo_contrato_w
from	ptu_intercambio
where	nr_sequencia	= nr_seq_intercambio_p;

select	max(nr_sequencia)
into STRICT	nr_seq_congenere_w
from	pls_congenere
where	(cd_cooperativa)::numeric  = (cd_unimed_origem_w)::numeric;

open C01;
loop
fetch C01 into	
	nr_seq_empresa_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	select	ie_tipo_pessoa,
		substr(cd_cgc_cpf,1,14),
		cd_empresa_origem,
		dt_inclusao
	into STRICT	ie_tipo_pessoa_w,
		cd_cgc_cpf_w,
		cd_empresa_w,
		dt_contrato_w
	from	ptu_intercambio_empresa
	where	nr_sequencia	= nr_seq_empresa_w;
	
	select	max(ie_repasse)
	into STRICT	ie_tipo_repasse_contr_w
	from	ptu_intercambio_benef
	where	nr_seq_empresa	= nr_seq_empresa_w;
	
	if (ie_tipo_pessoa_w = 2) then
		cd_cgc_cpf_w	:= substr(cd_cgc_cpf_w,1,11);
		select	max(cd_pessoa_fisica)
		into STRICT	cd_pessoa_fisica_w
		from	pessoa_fisica
		where	nr_cpf	= cd_cgc_cpf_w;
	elsif (ie_tipo_pessoa_w = 1) then
		select	max(cd_cgc)
		into STRICT	cd_cgc_w
		from	pessoa_juridica
		where	cd_cgc	= cd_cgc_cpf_w;
	end if;

	if (ie_tipo_pessoa_w = 1) then
		select	max(nr_sequencia)
		into STRICT	nr_seq_intercambio_atual_w
		from	pls_intercambio
		where	cd_cgc			= cd_cgc_w
		and	cd_operadora_empresa	= cd_empresa_w
		and	nr_seq_congenere	= nr_seq_congenere_w
		and	ie_tipo_repasse		= ie_tipo_repasse_contr_w;
	elsif (ie_tipo_pessoa_w = 2) then
		select	max(nr_sequencia)
		into STRICT	nr_seq_intercambio_atual_w
		from	pls_intercambio
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	cd_operadora_empresa	= cd_empresa_w
		and	nr_seq_congenere	= nr_seq_congenere_w
		and	ie_tipo_repasse		= ie_tipo_repasse_contr_w;
	end if;
	
	open C02;
	loop
	fetch C02 into	
		cd_dependencia_w,
		cd_familia_w,
		cd_local_atendimento_w,
		cd_lotacao_w,
		cd_plano_intercambio_w,
		cd_plano_origem_w,
		cd_titular_plano_w,
		cd_unimed_w,
		cd_usuario_plano_w,
		ds_lotacao_w,
		dt_exclusao_w,
		dt_fim_repasse_w,
		dt_inclusao_w,
		dt_inclusao_plano_dest_w,
		dt_nascimento_w,
		dt_repasse_w,
		dt_validade_carteira_w,
		ie_estado_civil_w,
		ie_recem_nascido_w,
		ie_repasse_w,
		ie_sexo_w,
		nm_benef_abreviado_w,
		nm_beneficiario_w,
		nr_matricula_w,
		nr_rg_w,
		nr_seq_segurado_w,
		nr_vigencia_origem_w,
		sg_uf_rg_w,
		nr_seq_benef_w,
		ie_tipo_registro_w,
		nr_seq_plano_w,
		nr_seq_benef_encontrado_w,
		nm_mae_benef_w,
		nr_pis_pasep_w,
		qt_benef_comp_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
		
	delete	FROM ptu_intercambio_consist
	where	nr_seq_inter_benef	= nr_seq_benef_w;	

	if (ie_tipo_contrato_w <> 'F') then -- Se for fundação não deve realizar consistências
		ie_acomodacao_w	:= '';
		
		if (qt_benef_comp_w > 0) then
			select	ds_endereco,
				cd_cep,
				nm_municipio,
				sg_uf,
				nr_endereco
			into STRICT	ds_endereco_w,
				cd_cep_w,
				nm_municipio_w,
				sg_uf_w,
				nr_endereco_w
			from	ptu_beneficiario_compl
			where	nr_seq_beneficiario = nr_seq_benef_w;
			
			if (pls_obter_status_inconsist(3212) = 'A') then
				if (coalesce(ds_endereco_w::text, '') = '') then
					CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,3212,'Não foi informado o endereço no complemento do beneficiário.',cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
				end if;
				
				if (coalesce(cd_cep_w::text, '') = '') then
					CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,3212,'Não foi informado o CEP no complemento do beneficiário.',cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
				end if;
				
				if (coalesce(nm_municipio_w::text, '') = '') then
					CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,3212,'Não foi informado o município no complemento do beneficiário.',cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
				end if;
				
				if (coalesce(sg_uf_w::text, '') = '') then
					CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,3212,'Não foi informado o código da unidade federativa no complemento do beneficiário.',cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
				end if;
				
				if (coalesce(nr_endereco_w::text, '') = '') then
					CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,3212,'Não foi informado o número do endereço do beneficiário.',cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
				end if;
			end if;
		end if;
		
		if	((coalesce(nr_seq_plano_w::text, '') = '') and (pls_obter_status_inconsist(3209) = 'A')) then
			CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,3209,'Plano de intercâmbio do código '|| cd_plano_intercambio_w ||' não existente na operadora',cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
		else
			select	CASE WHEN ie_acomodacao='I' THEN 'A' WHEN ie_acomodacao='C' THEN 'E'  ELSE 'N' END ,
				ie_regulamentacao,
				IE_TIPO_CONTRATACAO
			into STRICT	ie_acomodacao_w,
				ie_regulamentacao_w,
				ie_natureza_w
			from	pls_plano
			where	nr_sequencia	= nr_seq_plano_w;
		end if;
		
		-- PTU 5.0
		if (nr_versao_transacao_w = 11) then
			begin
			select	(obter_idade(dt_nascimento_w,clock_timestamp(),'A'))::numeric
			into STRICT	nr_idade_benef_w
			;
			exception
			when others then
				nr_idade_benef_w := null;
			end;
		
			if	((nr_idade_benef_w < 18) and (coalesce(trim(both nr_pis_pasep_w),0) = 0) and (coalesce(trim(both nm_mae_benef_w)::text, '') = '') and (pls_obter_status_inconsist(3212) = 'A')) then
				CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,3212,'Obrigatório nome da mãe ou PIS/PASEP para menores de 18 (titulares e dependentes)',
								cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
			end if;
		end if;
		
		if (pls_obter_status_inconsist(3212) = 'A' and ie_tipo_registro_w = 'R' ) then
			if (cd_titular_plano_w IS NOT NULL AND cd_titular_plano_w::text <> '') then 	

				select	count(1)
				into STRICT	qt_segurados_w				
				from	pls_segurado a,
					pls_segurado_carteira b
				where	b.nr_seq_segurado = a.nr_sequencia
				and	b.cd_usuario_plano = trim(both lpad(cd_unimed_w,4,'0')||cd_titular_plano_w)
				and ((dt_rescisao IS NOT NULL AND dt_rescisao::text <> '') and dt_rescisao < clock_timestamp())
				and 	not exists (	SELECT	1
							from	pls_segurado_repasse x
							where	x.nr_seq_segurado = a.nr_sequencia
							and	(x.dt_repasse IS NOT NULL AND x.dt_repasse::text <> '')
							and	(( (x.dt_fim_repasse IS NOT NULL AND x.dt_fim_repasse::text <> '') and x.dt_fim_repasse >= clock_timestamp() ) or (coalesce(dt_fim_repasse::text, '') = '')) )
				and	not exists (	select	1
							from	ptu_intercambio_benef x
							where	x.nr_seq_empresa = nr_seq_empresa_w
							and	x.cd_usuario_plano = cd_titular_plano_w );			
				if (qt_segurados_w > 0 ) then
					CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,3212,'Titular do beneficiário inativo',
								cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
				end if;

			end if;
		end if;
		
		open C03;
		loop
		fetch C03 into	
			cd_tipo_cobertura_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			
			select	count(1)
			into STRICT	qt_coberturas_w
			from	pls_tipo_carencia
			where	ie_tipo_operacao	= 'I'
			and	cd_ptu	= cd_tipo_cobertura_w  LIMIT 1;
			
			if	((qt_coberturas_w = 0) and (pls_obter_status_inconsist(8000) = 'A')) then
				CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8000,'Carência:  ' || cd_tipo_cobertura_w || '-> '||substr(ptu_obter_dados_cobertura(cd_tipo_cobertura_w,'DS'),1,255) ,cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
			end if;	
			
			select	count(*)
			into STRICT	qt_carencia_w
			from	ptu_beneficiario_carencia
			where	nr_seq_beneficiario	= nr_seq_benef_w
			and	cd_tipo_cobertura	= cd_tipo_cobertura_w;
			
			if	((qt_carencia_w	> 1) and (pls_obter_status_inconsist(8001) = 'A')) then
				CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8001,'Carência:  ' || cd_tipo_cobertura_w ,cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
			end if;	
			
			end;
		end loop;
		close C03;
		
		/*Busca o contrato do beneficiário conforme o beneficiário encontrado*/

		if (coalesce(nr_seq_intercambio_atual_w::text, '') = '') and (nr_seq_benef_encontrado_w IS NOT NULL AND nr_seq_benef_encontrado_w::text <> '') then
			select	max(nr_seq_intercambio)
			into STRICT	nr_seq_intercambio_atual_w
			from	pls_segurado
			where	nr_sequencia	= nr_seq_benef_encontrado_w;
		end if;
		
		if (cd_dependencia_w <> 0) then
			/*Verificar primeiro o titular está no arquivo*/

			begin
			select	max(b.nr_sequencia)
			into STRICT	nr_seq_titular_w
			from	ptu_intercambio_benef b
			where	b.cd_familia 			= cd_familia_w
			and	b.cd_unimed			= cd_unimed_w
			and	b.nr_seq_empresa		= nr_seq_empresa_w
			and	b.cd_dependencia = 0  LIMIT 1;
			exception
			when others then
				nr_seq_titular_w	:= null;
			end;
			
			/*Verificar no contrato de intercâmbio se o titular do beneficiário está incluido*/

			if (coalesce(nr_seq_titular_w::text, '') = '') then
				begin
				select	max(b.nr_sequencia)
				into STRICT	nr_seq_titular_w
				from	pls_segurado		b,
					pls_segurado_carteira	a
				where	a.nr_seq_segurado	= b.nr_sequencia
				and	b.nr_seq_intercambio	= nr_seq_intercambio_atual_w
				and	a.nr_cartao_intercambio	= '0'||cd_unimed_w||cd_titular_plano_w;
				exception
				when others then
					nr_seq_titular_w	:= null;
				end;
				
				if (coalesce(nr_seq_titular_w::text, '') = '') then
					begin
					select	max(b.nr_sequencia)
					into STRICT	nr_seq_titular_w
					from	pls_segurado		b,
						pls_segurado_carteira	a
					where	a.nr_seq_segurado	= b.nr_sequencia
					and	b.nr_seq_intercambio	= nr_seq_intercambio_atual_w
					and	a.cd_usuario_plano	= '0'||cd_unimed_w||cd_titular_plano_w;
					exception
					when others then
						nr_seq_titular_w	:= null;
					end;
				end if;
			end if;	

			/*Dentro dessa condição apenas entra benefciários depedentes, nessa restrição verificar se achou o titular do dependente, caso não achar coloca na variavel que não é para inserir o beneficiário*/

			if	((coalesce(nr_seq_titular_w::text, '') = '') and (pls_obter_status_inconsist(8003) = 'A')) then
				CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8003,'Não encontrado o titular do beneficiário' ,cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
			end if;	
				
			select	count(1)
			into STRICT	qt_registros_w
			from	grau_parentesco
			where	cd_ptu	= cd_dependencia_w;
			
			nr_seq_parentesco_w	:= null;
			
			/*Caso houver mais q 2 cadastro de parentesco do código do PTU, então busca da regra de conversão*/

			if (qt_registros_w > 1) then
				nr_seq_parentesco_w	:= ptu_conversao_obter_parentesco(cd_dependencia_w,ie_sexo_w);
			end if;
			
			if (coalesce(nr_seq_parentesco_w::text, '') = '') then
				begin		
				select	max(nr_sequencia)
				into STRICT	nr_seq_parentesco_w
				from	grau_parentesco
				where	cd_ptu	= cd_dependencia_w;
				exception
				when others then
					nr_seq_parentesco_w	:= null;
				end;
			end if;
			
			if (nr_seq_parentesco_w IS NOT NULL AND nr_seq_parentesco_w::text <> '') then
				if	((ptu_obter_se_paren_incosistent(nr_seq_empresa_w,cd_familia_w,nr_seq_parentesco_w) = 'S') and (pls_obter_status_inconsist(8007) = 'A')) then
					CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8007,'Verificar a regra de consistência de parentesco na função OPS - Cadastros de Regras' ,cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
				end if;	
			end if;
		end if;	
		
		if (ie_tipo_registro_w = 'I') then
			if	((trunc(dt_fim_repasse_w, 'dd') <= trunc(clock_timestamp(),'dd')) and (pls_obter_status_inconsist(8005) = 'A')) then
				CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8005,'Beneficiário não encontrado na base porém possui exclusão' ,cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
			end if;	
			
			nr_seq_grupo_intercambio_w	:= null;
			
			open C05;
			loop
			fetch C05 into	
				nr_seq_grupo_intercambio_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
			end loop;
			close C05;
			
			if	((coalesce(nr_seq_grupo_intercambio_w::text, '') = '') and (pls_obter_status_inconsist(8006) = 'A')) then
				CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8006,'Verificar as regras do grupo intercâmbio para empresa e operadora do beneficiário' ,cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
			end if;	
			
			if (ie_repasse_w = 'P') then
				select	max(nr_seq_tabela_interc)
				into STRICT	nr_seq_tabela_inter_w
				from	pls_regra_tabela_interc
				where	cd_estabelecimento	= cd_estabelecimento_p
				and	((ie_tipo_contratacao	= ie_natureza_w and (ie_tipo_contratacao IS NOT NULL AND ie_tipo_contratacao::text <> '')) or (coalesce(ie_tipo_contratacao::text, '') = ''))
				and	((ie_tipo_data		= 'E' and dt_contrato_w between coalesce(dt_referencia_inicial,dt_contrato_w) and coalesce(dt_referencia_final,dt_contrato_w)) or (ie_tipo_data		= 'N'))
				and	((ie_acomodacao		= ie_acomodacao_w) or (ie_acomodacao = 'T'))
				and	((ie_regulamentacao	= ie_regulamentacao_w and (ie_regulamentacao IS NOT NULL AND ie_regulamentacao::text <> '')) or (coalesce(ie_regulamentacao::text, '') = ''))
				and	((nr_seq_grupo_intercambio = nr_seq_grupo_intercambio_w) or (coalesce(nr_seq_grupo_intercambio::text, '') = ''));
				
				if	((coalesce(nr_seq_tabela_inter_w::text, '') = '') and (pls_obter_status_inconsist(8008) = 'A')) then
					CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8008,'Verificar as regras de tabelas de preços de intercâmbio' ,cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
				else
					qt_idade_w	:= trunc(months_between(clock_timestamp(), trunc(dt_nascimento_w,'month')) / 12);
					
					if (nr_seq_parentesco_w IS NOT NULL AND nr_seq_parentesco_w::text <> '') then
						if (coalesce(ie_tipo_parentesco_w::text, '') = '') then
							select	max(ie_tipo_parentesco)
							into STRICT	ie_tipo_parentesco_w
							from	grau_parentesco
							where	nr_sequencia	= nr_seq_parentesco_w;
						end if;
						
						if (ie_tipo_parentesco_w = '1') then
							ie_grau_parentesco_w	:= 'DL';
						elsif (ie_tipo_parentesco_w = '2') then	
							ie_grau_parentesco_w	:= 'DA';
						end if;
					else
						ie_grau_parentesco_w	:= 'T';
					end if;
					
					nr_seq_preco_w	:= null;
					
					open C06;
					loop
					fetch C06 into	
						nr_seq_preco_w;
					EXIT WHEN NOT FOUND; /* apply on C06 */
					end loop;
					close C06;
					
					if	((coalesce(nr_seq_preco_w::text, '') = '') and (pls_obter_status_inconsist(8009) = 'A')) then
						CALL ptu_inserir_inconsistencia(nr_seq_intercambio_p,nr_seq_benef_w,8009,'Verificar a cadastro da tabela de preço de intercâmbio' ,cd_estabelecimento_p, null, null, null, null, null, null, nm_usuario_p);
					end if;			
				end if;
			end if;
		end if;	
	end if;

	select	count(*)
	into STRICT	qt_inconsistentes_w
	from	ptu_intercambio_consist
	where	nr_seq_inter_benef	= nr_seq_benef_w;
	
	if (qt_inconsistentes_w = 0) then
		update	ptu_intercambio_benef
		set	ie_status	= 'A',
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_benef_w
		and	ie_status	not in ('C','N');
	elsif (qt_inconsistentes_w > 0) then	
		update	ptu_intercambio_benef
		set	ie_status	= 'S',
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_benef_w
		and	ie_status	not in ('C','N');
	end if;
	
	end;
	end loop;
	close C02;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_inconsistencia_benef ( nr_seq_intercambio_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

