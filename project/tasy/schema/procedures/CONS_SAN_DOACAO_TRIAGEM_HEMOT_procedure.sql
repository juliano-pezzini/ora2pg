-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cons_san_doacao_triagem_hemot ( ie_abaixo_peso_doacao_p text, pr_hematocrito_p bigint, qt_hemoglobina_p bigint, cd_pessoa_fisica_p text, qt_pa_sistolica_p bigint, qt_freq_cardiaca_p bigint, qt_pa_diastolica_p bigint, qt_bpm_pulso_p bigint, qt_temperatura_p bigint, qt_volume_p bigint, ie_sinal_vital_p text, cd_estabelecimento_p bigint, nm_usuario_p text, ds_atributo_focus_p INOUT text, ds_mens_hemat_p INOUT text, ds_msg_peso_p INOUT text, ds_perg_pa_sistolica_p INOUT text, ds_perg_freq_cardiaca_p INOUT text, ds_perg_pa_diastolica_p INOUT text, ds_perg_bpm_pulso_p INOUT text, ds_perg_temperatura_p INOUT text, ds_perg_volume_p INOUT text, ds_erro_p INOUT text, qt_dias_inaptidao_p INOUT bigint) AS $body$
DECLARE


qt_peso_minimo_doacao_w		integer;
ie_consistir_peso_paciente_w	varchar(1);
ds_mensagem_w			varchar(255);
ie_inconsistencia_w		varchar(1);
ds_mensagem_continuar_w		varchar(255);
qt_dias_inaptidao_w		san_regra_sinal_vital.qt_dias_inapto%type := 0;
qt_dias_inapto_hemat_w		san_parametro.qt_dias_inapto_hemat_f%type := 0;
qt_dias_inapto_hemog_w		san_parametro.qt_dias_inapto_hemog_f%type := 0;


BEGIN

if (ie_abaixo_peso_doacao_p = 'S') then
	begin
	/* Hemoterapia - Parametro [145] - Peso minimo para a doacao */

	qt_peso_minimo_doacao_w := obter_param_usuario(450, 145, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_peso_minimo_doacao_w);
	
	/* Hemoterapia - Parametro [146] - Permite a doacao de paciente com peso inferior ao minimo */

	ie_consistir_peso_paciente_w := obter_param_usuario(450, 146, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consistir_peso_paciente_w);

	if (ie_consistir_peso_paciente_w = 'N') then
		ds_erro_p	:= obter_texto_dic_objeto(75501, wheb_usuario_pck.get_nr_seq_idioma, 'PESO_MINIMO_DOACAO=' || qt_peso_minimo_doacao_w);
	elsif (ie_consistir_peso_paciente_w = 'A') then
		ds_msg_peso_p	:= obter_texto_dic_objeto(75501, wheb_usuario_pck.get_nr_seq_idioma, 'PESO_MINIMO_DOACAO=' || qt_peso_minimo_doacao_w);
	end if;
	end;
end if;

if (coalesce(ds_erro_p::text, '') = '') then
	begin
	SELECT * FROM consistir_hematocritos_hemot(
		pr_hematocrito_p, cd_pessoa_fisica_p, cd_estabelecimento_p, nm_usuario_p, ds_atributo_focus_p, ds_mens_hemat_p, ds_erro_p, qt_dias_inapto_hemat_w) INTO STRICT ds_atributo_focus_p, ds_mens_hemat_p, ds_erro_p, qt_dias_inapto_hemat_w;
		
	if (coalesce(qt_dias_inapto_hemat_w, 0) > coalesce(qt_dias_inaptidao_p, 0)) then
		qt_dias_inaptidao_p := qt_dias_inapto_hemat_w;
	end if;
			
	end;
end if;

if (coalesce(ds_erro_p::text, '') = '' and coalesce(ds_mens_hemat_p::text, '') = '') then
	begin
	SELECT * FROM consistir_hemoglobina_hemot(
		qt_hemoglobina_p, cd_pessoa_fisica_p, cd_estabelecimento_p, nm_usuario_p, ds_atributo_focus_p, ds_mens_hemat_p, ds_erro_p, qt_dias_inapto_hemog_w) INTO STRICT ds_atributo_focus_p, ds_mens_hemat_p, ds_erro_p, qt_dias_inapto_hemog_w;
		
	if (coalesce(qt_dias_inapto_hemog_w, 0) > coalesce(qt_dias_inaptidao_p, 0)) then
		qt_dias_inaptidao_p := qt_dias_inapto_hemog_w;
	end if;
	
	end;
end if;

if (coalesce(ds_erro_p::text, '') = '') then
	begin
	ds_mensagem_continuar_w	:= obter_texto_tasy(76064, wheb_usuario_pck.get_nr_seq_idioma);

	if (qt_pa_sistolica_p IS NOT NULL AND qt_pa_sistolica_p::text <> '') and (coalesce(ie_sinal_vital_p::text, '') = '' or ie_sinal_vital_p = 'PS') then
		begin
		SELECT * FROM san_consiste_sinal_vital(
			'PS', qt_pa_sistolica_p, ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w) INTO STRICT ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w;

		if (ie_inconsistencia_w = 'S') then
			ds_perg_pa_sistolica_p	:= ds_mensagem_w || ds_mensagem_continuar_w;			
			
			if (coalesce(qt_dias_inaptidao_w, 0) > coalesce(qt_dias_inaptidao_p, 0)) then
				qt_dias_inaptidao_p := qt_dias_inaptidao_w;
			end if;
			
		end if;
		end;
	end if;

	if (qt_freq_cardiaca_p IS NOT NULL AND qt_freq_cardiaca_p::text <> '') and (coalesce(ie_sinal_vital_p::text, '') = '' or ie_sinal_vital_p = 'F') then
		begin
		SELECT * FROM san_consiste_sinal_vital(
			'F', qt_freq_cardiaca_p, ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w) INTO STRICT ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w;

		if (ie_inconsistencia_w = 'S') then
			ds_perg_freq_cardiaca_p	:= ds_mensagem_w || ds_mensagem_continuar_w;
			
			if (coalesce(qt_dias_inaptidao_w, 0) > coalesce(qt_dias_inaptidao_p, 0)) then
				qt_dias_inaptidao_p := qt_dias_inaptidao_w;
			end if;
			
		end if;
		end;
	end if;

	if (qt_pa_diastolica_p IS NOT NULL AND qt_pa_diastolica_p::text <> '') and (coalesce(ie_sinal_vital_p::text, '') = '' or ie_sinal_vital_p = 'PD') then
		begin
		SELECT * FROM san_consiste_sinal_vital(
			'PD', qt_pa_diastolica_p, ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w) INTO STRICT ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w;

		if (ie_inconsistencia_w = 'S') then
			ds_perg_pa_diastolica_p	:= ds_mensagem_w || ds_mensagem_continuar_w;
			
			if (coalesce(qt_dias_inaptidao_w, 0) > coalesce(qt_dias_inaptidao_p, 0)) then
				qt_dias_inaptidao_p := qt_dias_inaptidao_w;
			end if;
			
		end if;
		end;
	end if;

	if (qt_bpm_pulso_p IS NOT NULL AND qt_bpm_pulso_p::text <> '') and (coalesce(ie_sinal_vital_p::text, '') = '' or ie_sinal_vital_p = 'P') then
		begin
		SELECT * FROM san_consiste_sinal_vital(
			'P', qt_bpm_pulso_p, ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w) INTO STRICT ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w;

		if (ie_inconsistencia_w = 'S') then
			ds_perg_bpm_pulso_p	:= ds_mensagem_w || ds_mensagem_continuar_w;
			
			if (coalesce(qt_dias_inaptidao_w, 0) > coalesce(qt_dias_inaptidao_p, 0)) then
				qt_dias_inaptidao_p := qt_dias_inaptidao_w;
			end if;
			
		end if;
		end;
	end if;

	if (qt_temperatura_p IS NOT NULL AND qt_temperatura_p::text <> '') and (coalesce(ie_sinal_vital_p::text, '') = '' or ie_sinal_vital_p = 'T') then
		begin
		SELECT * FROM san_consiste_sinal_vital(
			'T', qt_temperatura_p, ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w) INTO STRICT ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w;

		if (ie_inconsistencia_w = 'S') then
			ds_perg_temperatura_p	:= ds_mensagem_w || ds_mensagem_continuar_w;
			
			if (coalesce(qt_dias_inaptidao_w, 0) > coalesce(qt_dias_inaptidao_p, 0)) then
				qt_dias_inaptidao_p := qt_dias_inaptidao_w;
			end if;
			
		end if;
		end;
	end if;
	
	if (qt_volume_p IS NOT NULL AND qt_volume_p::text <> '') and (coalesce(ie_sinal_vital_p::text, '') = '' or ie_sinal_vital_p = 'V') then

		SELECT * FROM san_consiste_sinal_vital(
			'V', qt_volume_p, ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w) INTO STRICT ds_mensagem_w, ie_inconsistencia_w, qt_dias_inaptidao_w;

		if (ie_inconsistencia_w = 'S') then
			ds_perg_volume_p	:= ds_mensagem_w || ds_mensagem_continuar_w;
			
			if (coalesce(qt_dias_inaptidao_w, 0) > coalesce(qt_dias_inaptidao_p, 0)) then
				qt_dias_inaptidao_p := qt_dias_inaptidao_w;
			end if;
			
		end if;

	end if;
	
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cons_san_doacao_triagem_hemot ( ie_abaixo_peso_doacao_p text, pr_hematocrito_p bigint, qt_hemoglobina_p bigint, cd_pessoa_fisica_p text, qt_pa_sistolica_p bigint, qt_freq_cardiaca_p bigint, qt_pa_diastolica_p bigint, qt_bpm_pulso_p bigint, qt_temperatura_p bigint, qt_volume_p bigint, ie_sinal_vital_p text, cd_estabelecimento_p bigint, nm_usuario_p text, ds_atributo_focus_p INOUT text, ds_mens_hemat_p INOUT text, ds_msg_peso_p INOUT text, ds_perg_pa_sistolica_p INOUT text, ds_perg_freq_cardiaca_p INOUT text, ds_perg_pa_diastolica_p INOUT text, ds_perg_bpm_pulso_p INOUT text, ds_perg_temperatura_p INOUT text, ds_perg_volume_p INOUT text, ds_erro_p INOUT text, qt_dias_inaptidao_p INOUT bigint) FROM PUBLIC;

