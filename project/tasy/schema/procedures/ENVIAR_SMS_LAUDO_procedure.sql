-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE enviar_sms_laudo ( ds_remetente_p text, ds_destinatario_p text, ds_mensagem_p text, nr_sequencia_p bigint, nm_usuario_p text ) AS $body$
DECLARE


    nr_sequencia_w         bigint;
    id_sms_w               bigint;
    qt_laudos_compl_w      bigint;
    nr_seq_laudo_compl_w   bigint;
    ie_status_envio_sms    boolean := false;
    ie_sms_w               varchar(2);

  destinatarios RECORD;

BEGIN

    IF (ds_remetente_p IS NOT NULL AND ds_remetente_p::text <> '') AND (ds_destinatario_p IS NOT NULL AND ds_destinatario_p::text <> '') AND (ds_mensagem_p IS NOT NULL AND ds_mensagem_p::text <> '') AND (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '')

    THEN
        FOR destinatarios IN (
            SELECT
                ds_phonenumber
            FROM (WITH RECURSIVE cte AS (

                    SELECT 
                      REGEXP_SUBSTR(ds_destinatario_p,'[^,]+', 1, LEVEL) AS ds_phonenumber
                     
                    (REGEXP_SUBSTR(ds_destinatario_p, '[^,]+', 1, LEVEL) IS NOT NULL AND (REGEXP_SUBSTR(ds_destinatario_p, '[^,]+', 1, LEVEL))::text <> '')
                  UNION ALL

                    SELECT 
                      REGEXP_SUBSTR(ds_destinatario_p,'[^,]+', 1, LEVEL) AS ds_phonenumber
                     
                    (REGEXP_SUBSTR(ds_destinatario_p, '[^,]+', 1, LEVEL) IS NOT NULL AND (REGEXP_SUBSTR(ds_destinatario_p, '[^,]+', 1, LEVEL))::text <> '')
                 JOIN cte c ON ()

) SELECT * FROM cte;
) alias9
            WHERE
                (ds_phonenumber IS NOT NULL AND ds_phonenumber::text <> '')
        ) LOOP
             
            /* enviar sms */

            id_sms_w := wheb_sms.enviar_sms(ds_remetente_p, destinatarios.ds_phonenumber, ds_mensagem_p, nm_usuario_p, id_sms_w);

            /* gravar log */

            SELECT
                nextval('log_envio_sms_seq')
            INTO STRICT
                nr_sequencia_w
;

            INSERT INTO log_envio_sms(
                nr_sequencia,
                dt_atualizacao_nrec,
                dt_atualizacao,
                nm_usuario,
                dt_envio,
                nr_telefone,
                ds_mensagem,
                nr_seq_laudo,
                id_sms
            ) VALUES (
                nr_sequencia_w,
                clock_timestamp(),
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                destinatarios.ds_phonenumber,
                ds_mensagem_p,
                nr_sequencia_p,
                id_sms_w
            );

            IF ( id_sms_w = 0 ) THEN
                ie_status_envio_sms := true;
            END IF;
        END LOOP;
    END IF;

    IF ( ie_status_envio_sms = true ) THEN
        ie_sms_w := 'S';
    ELSE
        ie_sms_w := 'N';
    END IF;

  /* insere ou edita atrib IE_SMS na tabela LAUDO_PACIENTE_COMPL */

    SELECT
        COUNT(1)
    INTO STRICT
        qt_laudos_compl_w
    FROM
        laudo_paciente_compl
    WHERE
        nr_seq_laudo = nr_sequencia_p;

    IF ( qt_laudos_compl_w > 0 ) THEN
        UPDATE laudo_paciente_compl
            SET
                ie_sms = ie_sms_w
        WHERE
            nr_seq_laudo = nr_sequencia_p;

    ELSE
        SELECT
            nextval('laudo_paciente_compl_seq')
        INTO STRICT
            nr_seq_laudo_compl_w
;

        INSERT INTO laudo_paciente_compl(
            nr_sequencia,
            nr_seq_laudo,
            dt_atualizacao,
            nm_usuario_envelopamento,
            nm_usuario,
            ie_sms
        ) VALUES (
            nr_seq_laudo_compl_w,
            nr_sequencia_p,
            clock_timestamp(),
            nm_usuario_p,
            nm_usuario_p,
            ie_sms_w
        );

    END IF;

    COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enviar_sms_laudo ( ds_remetente_p text, ds_destinatario_p text, ds_mensagem_p text, nr_sequencia_p bigint, nm_usuario_p text ) FROM PUBLIC;

