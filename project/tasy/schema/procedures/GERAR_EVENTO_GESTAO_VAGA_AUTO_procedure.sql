-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function gerar_evento_gestao_vaga_auto as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE gerar_evento_gestao_vaga_auto ( cd_pessoa_fisica_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_gv_p bigint, nm_paciente_p text, ie_evento_p text, ie_status_p text default null, gestao_vaga_r_p gestao_vaga default null) AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'CALL gerar_evento_gestao_vaga_auto_atx ( ' || quote_nullable(cd_pessoa_fisica_p) || ',' || quote_nullable(nm_usuario_p) || ',' || quote_nullable(cd_estabelecimento_p) || ',' || quote_nullable(nr_seq_gv_p) || ',' || quote_nullable(nm_paciente_p) || ',' || quote_nullable(ie_evento_p) || ',' || quote_nullable(ie_status_p) || ',' || quote_nullable(gestao_vaga_r_p) || ' )';
	PERFORM * FROM dblink(v_conn_str, v_query) AS p (ret boolean);

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE gerar_evento_gestao_vaga_auto_atx ( cd_pessoa_fisica_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_gv_p bigint, nm_paciente_p text, ie_evento_p text, ie_status_p text default null, gestao_vaga_r_p gestao_vaga default null) AS $body$
DECLARE


nr_seq_evento_w		bigint;
qt_idade_w		bigint;
cd_convenio_gv_w	bigint;
qt_regra_gv_w		bigint;
ie_permite_w		varchar(1) := 'N';

ie_status_w 		varchar(15);
ie_tipo_vaga_w		varchar(15);
ie_solicitacao_w	varchar(15);
cd_setor_atual_w	bigint;
cd_tipo_acomod_desej_w	bigint;
cd_setor_desejado_w	bigint;
nr_seq_status_pac_w	bigint;
nr_sequencia_w		bigint;
nr_atendimento_w	bigint;c01 CURSOR FOR
	SELECT	nr_seq_evento,
		nr_sequencia
	from	regra_envio_sms
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	ie_evento_disp		= ie_evento_p
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and (obter_se_convenio_rec_alerta(cd_convenio_gv_w, nr_sequencia) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(cd_pessoa_fisica_p),0)) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';


BEGIN

select	gestao_vaga_r_p.cd_convenio,
	gestao_vaga_r_p.ie_tipo_vaga,
	gestao_vaga_r_p.ie_status,
	gestao_vaga_r_p.ie_solicitacao,
	gestao_vaga_r_p.cd_setor_atual,
	gestao_vaga_r_p.cd_setor_desejado,
	gestao_vaga_r_p.cd_tipo_acomod_desej,
	gestao_vaga_r_p.nr_seq_status_pac,
	gestao_vaga_r_p.nr_atendimento
into STRICT	cd_convenio_gv_w,
	ie_tipo_vaga_w,
	ie_status_w,
	ie_solicitacao_w,
	cd_setor_atual_w,
	cd_setor_desejado_w,
	cd_tipo_acomod_desej_w,
	nr_seq_status_pac_w,
	nr_atendimento_w
;

if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') OR (nm_paciente_p IS NOT NULL AND nm_paciente_p::text <> '') then
	qt_idade_w	:= coalesce(obter_idade_pf(cd_pessoa_fisica_p,clock_timestamp(),'A'),0);

	open c01;
	loop
	fetch c01 into
		nr_seq_evento_w,
		nr_sequencia_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		select	count(*)
		into STRICT	qt_regra_gv_w
		from	regra_envio_sms_gv
		where	nr_seq_regra = nr_sequencia_w;



		if (qt_regra_gv_w = 0) and (ie_tipo_vaga_w = 'C') then

			CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_w,cd_pessoa_fisica_p,null,nm_usuario_p,null,null,null,null,null,null,nr_seq_gv_p);

		elsif (qt_regra_gv_w > 0) then



			select 	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_permite_w
			from	regra_envio_sms_gv
			where	ie_situacao = 'A'
			and	coalesce(ie_status, coalesce(ie_status_p, ie_status_w)) 			= coalesce(ie_status_p, ie_status_w) --ok
			and	coalesce(ie_solicitacao, coalesce(ie_solicitacao_w,'XpTo'))		= coalesce(ie_solicitacao_w,'XpTo') --ok
			and	coalesce(cd_setor_atual, coalesce(cd_setor_atual_w,-1))			= coalesce(cd_setor_atual_w,-1) --se tiver atendimento Obter_Atepacu_paciente(nr_atendimento_w, 'IA')
			and	coalesce(cd_tipo_acomod_desej, coalesce(cd_tipo_acomod_desej_w,-1))	= coalesce(cd_tipo_acomod_desej_w,-1)  --agenda_paciente.cd_tipo_acomodacao
			and	coalesce(cd_setor_desejado, coalesce(cd_setor_desejado_w,-1))		= coalesce(cd_setor_desejado_w,-1)  -- não é gerado na gerar_vaga_agenda_cirurgica
			and	coalesce(ie_tipo_vaga, coalesce(ie_tipo_vaga_w,'XpTo'))			= coalesce(ie_tipo_vaga_w,'XpTo')  --ok
			and	coalesce(nr_seq_status_pac, coalesce(nr_seq_status_pac_w,-1))		= coalesce(nr_seq_status_pac_w,-1)
			and	nr_seq_regra 						= nr_sequencia_w;

			if (ie_permite_w = 'S') then

				CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_w,cd_pessoa_fisica_p,null,nm_usuario_p,null,null,null,null,null,null,nr_seq_gv_p);

			end if;
		end if;

		end;
	end loop;
	close c01;
end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_evento_gestao_vaga_auto ( cd_pessoa_fisica_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_gv_p bigint, nm_paciente_p text, ie_evento_p text, ie_status_p text default null, gestao_vaga_r_p gestao_vaga default null) FROM PUBLIC; -- REVOKE ALL ON PROCEDURE gerar_evento_gestao_vaga_auto_atx ( cd_pessoa_fisica_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_gv_p bigint, nm_paciente_p text, ie_evento_p text, ie_status_p text default null, gestao_vaga_r_p gestao_vaga default null) FROM PUBLIC;

