-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proced_paciente_pendente (nr_prescricao_p bigint, nr_seq_proced_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_funcao_p bigint, cd_categoria_p text, ie_tipo_atend_tiss_p text, nr_seq_procpaci_p INOUT bigint) AS $body$
DECLARE


nr_seq_propaci_w      bigint  := 0;
dt_fim_conta_w        timestamp;
ie_atualiza_senha_autor_w  varchar(01);
cd_senha_w          varchar(20);
nr_atendimento_w      bigint;
cd_procedimento_w      bigint;
ie_origem_proced_w      bigint;
ie_adm_adep_w        varchar(1);/* Rafael em 26/05/2008 OS93477 */
nr_seq_prescr_w        integer;
nr_seq_interno_w      bigint;
nr_seq_status_pato_w    bigint;
nr_seq_exame_w        bigint;
qt_existe_w          bigint;
cd_estabelecimento_w    smallint;
nr_seq_agenda_w        agenda_consulta.nr_sequencia%type;
cd_tipo_agenda_w      bigint;
cd_agenda_w          bigint;
qt_exames_pendentes_exec_w  bigint;
ie_status_pendente_w    varchar(1); --Inserido para a correcao da OS381674
ie_tipo_agenda_w      varchar(1);
ie_exec_evt_agendamento_w varchar(1);

C01 CURSOR FOR
  SELECT  nr_sequencia
  from  prescr_procedimento
  where  NR_SEQ_PROC_PRINC = nr_seq_interno_w
  and  coalesce(dt_cancelamento::text, '') = '';

c02 CURSOR FOR
  SELECT  coalesce(nr_sequencia,0)
  from  procedimento_paciente
  where  nr_prescricao    = nr_prescricao_p
  and  nr_sequencia_prescricao  = nr_seq_proced_p
  order by 1 desc; -- Nao alterar essa ordenacao  (Fabricio OS 176888)
BEGIN

ie_status_pendente_w  := coalesce(obter_valor_param_usuario(942, 63, cd_perfil_p, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');
ie_exec_evt_agendamento_w  := coalesce(obter_valor_param_usuario(942, 409, cd_perfil_p, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');

select  max(b.dt_fim_conta),
    max(b.nr_atendimento)
into STRICT  dt_fim_conta_w,
    nr_atendimento_w
from  atendimento_paciente b,
    prescr_medica a
where  a.nr_atendimento  = b.nr_atendimento
and   a.nr_prescricao    = nr_prescricao_p;

IF (CD_FUNCAO_P  = 942) THEN
  ie_adm_adep_w := obter_param_usuario(942, 78, cd_perfil_p, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_adm_adep_w);
end if;

select  count(*)
into STRICT  qt_existe_w
from  procedimento_paciente a,
  prescr_procedimento b
where  a.nr_prescricao      = nr_prescricao_p
and  a.nr_sequencia_prescricao  = nr_seq_proced_p
and  a.nr_prescricao     = b.nr_prescricao
and  a.nr_sequencia_prescricao   = b.nr_sequencia
and  coalesce(b.dt_cancelamento::text, '') = ''
and  b.ie_status_execucao     < '20';

CALL gravar_log_tasy(10011, 'Gerar_Proced_Paciente_Pendente ln ' || $$plsql_line
					|| ' - nr_prescricao_p: ' || nr_prescricao_p
					|| ' nr_atendimento_w: ' || nr_atendimento_w
					|| ' nr_seq_proced_p: ' || nr_seq_proced_p
                    || ' qt_existe_w: ' || qt_existe_w
					|| ' ie_status_pendente_w: ' || ie_status_pendente_w
					, nm_usuario_p);

if (qt_existe_w = 0) or (ie_status_pendente_w = 'S') then
  begin
  if (dt_fim_conta_w IS NOT NULL AND dt_fim_conta_w::text <> '') then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(179693);
  end if;
  CALL gerar_proc_pac_prescricao(nr_prescricao_p,
    nr_seq_proced_p,
    cd_perfil_p, cd_funcao_p,
    nm_usuario_p, cd_categoria_p, ie_tipo_atend_tiss_p,null);
  end;
else
  begin

  select  coalesce(max(nr_seq_exame),0)
  into STRICT  nr_seq_exame_w
  from  prescr_procedimento
  where  nr_prescricao = nr_prescricao_p
  and  nr_sequencia  = nr_seq_proced_p;

  CALL atualiza_status_proced_exec(nr_seq_proced_p,
                  nr_prescricao_p,
            nr_seq_exame_w,
            nm_usuario_p);

  CALL gerar_laudo_padrao(nr_atendimento_w, nr_prescricao_p, nr_seq_proced_p, nm_usuario_p);

  end;
end if;

select   max(nr_sequencia)
into STRICT  nr_seq_status_pato_w
from  proced_patologia_status
where  ie_status_patologia = 'ET'
and    ie_situacao = 'A';

CALL gravar_log_tasy(10011, 'Gerar_Proced_Paciente_Pendente ln ' || $$plsql_line
					|| ' - nr_prescricao_p: ' || nr_prescricao_p
					|| ' nr_atendimento_w: ' || nr_atendimento_w
					|| ' nr_seq_proced_p: ' || nr_seq_proced_p
                    || ' nr_seq_status_pato_w: ' || nr_seq_status_pato_w
					|| ' cd_funcao_p: ' || cd_funcao_p
					, nm_usuario_p);

--Bruno 05/05/2010
if (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (nr_seq_proced_p IS NOT NULL AND nr_seq_proced_p::text <> '') then
  if (nr_seq_status_pato_w IS NOT NULL AND nr_seq_status_pato_w::text <> '') then
    update   prescr_procedimento
    set  nr_seq_status_pato = nr_seq_status_pato_w
    where  nr_prescricao = nr_prescricao_p
    and  nr_sequencia = nr_seq_proced_p;
  end if;
end if;

select  max(nr_seq_interno)
into STRICT  nr_seq_interno_w
from  prescr_procedimento
where  nr_prescricao = nr_prescricao_p
and  nr_sequencia = nr_seq_proced_p;

open C01;
loop
fetch C01 into
  nr_seq_prescr_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
  begin

  select  count(*)
  into STRICT  qt_existe_w
  from  procedimento_paciente a,
    prescr_procedimento b
  where  a.nr_prescricao      = nr_prescricao_p
  and  a.nr_sequencia_prescricao  = nr_seq_prescr_w
  and  a.nr_prescricao     = b.nr_prescricao
  and  a.nr_sequencia_prescricao   = b.nr_sequencia
  and  b.ie_status_execucao     < '20';

  if (qt_existe_w = 0) then
    begin

    if (dt_fim_conta_w IS NOT NULL AND dt_fim_conta_w::text <> '') then
      CALL wheb_mensagem_pck.exibir_mensagem_abort(179693);
    end if;
    CALL gerar_proc_pac_prescricao(nr_prescricao_p,
      nr_seq_prescr_w,
      cd_perfil_p, cd_funcao_p,
      nm_usuario_p, cd_categoria_p, ie_tipo_atend_tiss_p,null);
    end;
  else
    begin

    select  coalesce(max(nr_seq_exame),0)
    into STRICT  nr_seq_exame_w
    from  prescr_procedimento
    where  nr_prescricao = nr_prescricao_p
    and  nr_sequencia  = nr_seq_prescr_w;

    CALL atualiza_status_proced_exec(nr_seq_prescr_w,
              nr_prescricao_p,
              nr_seq_exame_w,
              nm_usuario_p);
    end;
  end if;

  if (cd_funcao_p  = 942) then

    if (coalesce(ie_adm_adep_w,'N') = 'S') then
      CALL ge_executar_adep(nr_prescricao_p, nr_seq_prescr_w, nm_usuario_p);
    end if;

  end if;

  end;
end loop;
close C01;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

open C02;
loop
fetch C02 into
  nr_seq_propaci_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
  begin
  nr_seq_propaci_w:= nr_seq_propaci_w;
  end;
end loop;
close C02;

select  coalesce(max(cd_procedimento),0),
  coalesce(max(ie_origem_proced),0)
into STRICT  cd_procedimento_w,
  ie_origem_proced_w
from  procedimento_paciente
where  nr_sequencia = nr_seq_propaci_w;

if (nr_seq_propaci_w > 0) then
  update  PROCED_PACIENTE_FILME
  set  nr_seq_proc  = nr_seq_propaci_w
  where  nr_prescricao  = nr_prescricao_p
  and  nr_seq_prescr  = nr_seq_proced_p;
end if;

if (cd_funcao_p  = 942) then
  begin

  ie_atualiza_senha_autor_w := obter_param_usuario(942, 69, cd_perfil_p, nm_usuario_p, 0, ie_atualiza_senha_autor_w);

  if (ie_atualiza_senha_autor_w = 'S') then

    select  Obter_senha_autoriz_proced(nr_prescricao_p,
        nr_atendimento_w,
        cd_procedimento_w,
        ie_origem_proced_w)
    into STRICT  cd_senha_w
;

    update  procedimento_paciente
    set  cd_senha  = cd_senha_w
    where  nr_sequencia  = nr_seq_propaci_w;

  end if;

  if (coalesce(ie_adm_adep_w,'N') = 'S') then
    CALL ge_executar_adep(nr_prescricao_p, nr_seq_proced_p, nm_usuario_p);
  end if;

  end;
end if;


if (ie_exec_evt_agendamento_w = 'S') then
	--Consulta
	ie_tipo_agenda_w  := 'C';
	select  coalesce(max(a.nr_seq_agenda_cons), max(b.nr_seq_agecons)),
	        max(b.cd_estabelecimento)
	into STRICT  	nr_seq_agenda_w,
			cd_estabelecimento_w
	from  	prescr_procedimento a,
			prescr_medica b
	where 	a.nr_prescricao = b.nr_prescricao
	and 	b.nr_prescricao = nr_prescricao_p
	and 	a.nr_sequencia = nr_seq_proced_p;
	
	if (coalesce(nr_seq_agenda_w::text, '') = '') then
		--Exame
		ie_tipo_agenda_w  := 'E';
		select  coalesce(max(a.nr_seq_agenda), max(b.nr_seq_agenda)),
				max(b.cd_estabelecimento)
		into STRICT  	nr_seq_agenda_w,
				cd_estabelecimento_w
		from  	prescr_procedimento a,
				prescr_medica b
		where 	a.nr_prescricao = b.nr_prescricao
		and 	b.nr_prescricao = nr_prescricao_p
		and 	a.nr_sequencia = nr_seq_proced_p;
	end if;

	if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then
		--Somente executar evento caso todos os procedimentos estiverem executados(para casos em que ha mais de 1 exame lancado)
		select  count(*)
		into STRICT  	qt_exames_pendentes_exec_w
		from  	prescr_procedimento a,
				prescr_medica b
		where  	a.nr_prescricao = b.nr_prescricao
		and   	((a.nr_seq_agenda = nr_seq_agenda_w or a.nr_seq_agenda_cons = nr_seq_agenda_w)
		or (b.nr_seq_agenda = nr_seq_agenda_w  or  b.nr_seq_agecons = nr_seq_agenda_w))
		and    	a.ie_status_execucao   < '20'
		and    	coalesce(a.dt_cancelamento::text, '') = '';

		if (qt_exames_pendentes_exec_w = 0) then
			CALL executar_evento_agenda('EPG',ie_tipo_agenda_w,nr_seq_agenda_w,cd_estabelecimento_w,nm_usuario_p,null,null);
		end if;
	end if;
	
else
	select  max(nr_seq_agenda),
	  max(cd_estabelecimento)
	into STRICT  nr_seq_agenda_w,
	  cd_estabelecimento_w
	from  prescr_medica
	where  nr_prescricao = nr_prescricao_p;



	if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then

	  select  coalesce(max(cd_agenda),0)
	  into STRICT  cd_agenda_w
	  from  agenda_paciente
	  where  nr_sequencia = nr_seq_agenda_w;

	  if (cd_agenda_w > 0)then
		--Exame
		CALL executar_evento_agenda('EPG','E',nr_seq_agenda_w,cd_estabelecimento_w,nm_usuario_p,null,null);
	  else
		select  coalesce(max(cd_agenda),0)
		into STRICT  cd_agenda_w
		from  agenda_consulta
		where  nr_sequencia = nr_seq_agenda_w;

		if (cd_agenda_w > 0)then
		  --Consulta
		  CALL executar_evento_agenda('EPG','C',nr_seq_agenda_w,cd_estabelecimento_w,nm_usuario_p,null,null);
		end if;
	  end if;
	elsif (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '')then
	  --Consulta
	  select  max(nr_sequencia)
	  into STRICT  nr_seq_agenda_w
	  from  agenda_consulta
	  where  nr_atendimento = nr_atendimento_w;

	  --Exame
	  if (coalesce(nr_seq_agenda_w::text, '') = '') then
		ie_tipo_agenda_w  := 'E';
		select  max(a.nr_sequencia)
		into STRICT  nr_seq_agenda_w
		from  agenda_paciente a,
			agenda b
		where  a.cd_agenda =   b.cd_agenda
		and    b.cd_tipo_agenda = 2
		and    a.nr_atendimento = nr_atendimento_w;
	  else
		ie_tipo_agenda_w  := 'C';
	  end if;
	  --Somente executar evento caso todos os procedimentos estiverem executados(para casos em que ha mais de 1 exame lancado)
	  select  count(*)
	  into STRICT  qt_exames_pendentes_exec_w
	  from  prescr_procedimento a,
		prescr_medica b
	  where  a.nr_prescricao     = b.nr_prescricao
	  and  b.nr_atendimento     = nr_atendimento_w
	  and  a.ie_status_execucao   < '20'
	  and  coalesce(a.dt_cancelamento::text, '') = '';
	  
	  if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') and (qt_exames_pendentes_exec_w = 0)then
		CALL executar_evento_agenda('EPG',ie_tipo_agenda_w,nr_seq_agenda_w,cd_estabelecimento_w,nm_usuario_p,null,null);
	  end if;

	end if;
end if;

nr_seq_procpaci_p  := nr_seq_propaci_w;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proced_paciente_pendente (nr_prescricao_p bigint, nr_seq_proced_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_funcao_p bigint, cd_categoria_p text, ie_tipo_atend_tiss_p text, nr_seq_procpaci_p INOUT bigint) FROM PUBLIC;

