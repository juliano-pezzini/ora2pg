-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proced_paciente_mmed (nr_prescricao_p bigint, nr_seq_proced_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_funcao_p bigint, cd_categoria_p text, ie_tipo_atend_tiss_p text, nr_seq_procpaci_p INOUT bigint) AS $body$
DECLARE

/*Procedure criada a partir da Gerar_Proced_Paciente_Pendente para a integração Multimed, foram removidos os commit pois a integração chama através de trigger*/

nr_seq_propaci_w		bigint	:= 0;
dt_fim_conta_w			timestamp;
ie_atualiza_senha_autor_w	varchar(01);
cd_senha_w			varchar(20);
nr_atendimento_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_adm_adep_w			varchar(1);/* Rafael em 26/05/2008 OS93477 */
nr_seq_prescr_w			integer;
nr_seq_interno_w		bigint;
nr_seq_status_pato_w		bigint;
nr_seq_exame_w			bigint;
qt_existe_w			bigint;
cd_estabelecimento_w		smallint;
nr_seq_agenda_w			bigint;
ie_status_pendente_w		varchar(1); --Inserido para a correção da OS381674
C01 CURSOR FOR
	SELECT	nr_sequencia
	FROM	prescr_procedimento
	WHERE	NR_SEQ_PROC_PRINC = nr_seq_interno_w
	AND	coalesce(dt_cancelamento::text, '') = '';

c02 CURSOR FOR
	SELECT	coalesce(nr_sequencia,0)
	FROM	procedimento_paciente
	WHERE	nr_prescricao		= nr_prescricao_p
	AND	nr_sequencia_prescricao	= nr_seq_proced_p
	ORDER BY 1 DESC; -- Não alterar essa ordenação  (Fabrício OS 176888)
BEGIN


CALL gravar_log_cdi(55413,	'GPPM01'||nr_prescricao_p||'-'||
			nr_seq_proced_p||'-'||
			nm_usuario_p,'tasy');

ie_status_pendente_w	:= coalesce(obter_valor_param_usuario(942, 63, cd_perfil_p, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');

SELECT	MAX(b.dt_fim_conta),
	MAX(b.nr_atendimento)
INTO STRICT	dt_fim_conta_w,
	nr_atendimento_w
FROM	atendimento_paciente b,
	prescr_medica a
WHERE	a.nr_atendimento	= b.nr_atendimento
AND 	a.nr_prescricao		= nr_prescricao_p;

IF (dt_fim_conta_w IS NOT NULL AND dt_fim_conta_w::text <> '') THEN
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179693);

END IF;

IF (cd_funcao_p	= 942) THEN
	ie_adm_adep_w := obter_param_usuario(942, 78, cd_perfil_p, nm_usuario_p, 0, ie_adm_adep_w);
END IF;


SELECT	COUNT(*)
INTO STRICT	qt_existe_w
FROM	procedimento_paciente a,
	prescr_procedimento b
WHERE	a.nr_prescricao			= nr_prescricao_p
AND	a.nr_sequencia_prescricao	= nr_seq_proced_p
AND	a.nr_prescricao 		= b.nr_prescricao
AND	a.nr_sequencia_prescricao 	= b.nr_sequencia
AND	coalesce(b.dt_cancelamento::text, '') = ''
AND	b.ie_status_execucao 		< 20;


CALL gravar_log_cdi(55413,	'GPPM02'||nr_prescricao_p||'-'||
			nr_seq_proced_p||'-'||
			nm_usuario_p||'-'||
			qt_existe_w||'-'||
			ie_status_pendente_w ,'tasy');

IF (qt_existe_w = 0) OR (ie_status_pendente_w = 'S') THEN
	BEGIN
	CALL gerar_proc_pac_prescricao(nr_prescricao_p,
		nr_seq_proced_p,
		cd_perfil_p, cd_funcao_p,
		nm_usuario_p, cd_categoria_p, ie_tipo_atend_tiss_p,NULL);
	END;
ELSE
	BEGIN

	SELECT	coalesce(MAX(nr_seq_exame),0)
	INTO STRICT	nr_seq_exame_w
	FROM	prescr_procedimento
	WHERE	nr_prescricao = nr_prescricao_p
	AND	nr_sequencia  = nr_seq_proced_p;

	CALL atualiza_status_proced_exec(nr_seq_proced_p,
			            nr_prescricao_p,
				    nr_seq_exame_w,
				    nm_usuario_p);

	END;
END IF;

SELECT 	MAX(nr_sequencia)
INTO STRICT	nr_seq_status_pato_w
FROM	PROCED_PATOLOGIA_STATUS
WHERE	IE_STATUS_PATOLOGIA = 'ET';

--Bruno 05/05/2010
IF (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') AND (nr_seq_proced_p IS NOT NULL AND nr_seq_proced_p::text <> '') THEN
	IF (nr_seq_status_pato_w IS NOT NULL AND nr_seq_status_pato_w::text <> '') THEN
		UPDATE 	prescr_procedimento
		SET	nr_seq_status_pato = nr_seq_status_pato_w
		WHERE	nr_prescricao = nr_prescricao_p
		AND	nr_sequencia = nr_seq_proced_p;
	END IF;
END IF;

SELECT	MAX(nr_seq_interno)
INTO STRICT	nr_seq_interno_w
FROM	prescr_procedimento
WHERE	nr_prescricao = nr_prescricao_p
AND	nr_sequencia = nr_seq_proced_p;

OPEN C01;
LOOP
FETCH C01 INTO
	nr_seq_prescr_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	BEGIN


	SELECT	COUNT(*)
	INTO STRICT	qt_existe_w
	FROM	procedimento_paciente a,
		prescr_procedimento b
	WHERE	a.nr_prescricao			= nr_prescricao_p
	AND	a.nr_sequencia_prescricao	= nr_seq_proced_p
	AND	a.nr_prescricao 		= b.nr_prescricao
	AND	a.nr_sequencia_prescricao 	= b.nr_sequencia
	AND	b.ie_status_execucao 		< 20;

	IF (qt_existe_w = 0) THEN
		BEGIN

		CALL gerar_proc_pac_prescricao(nr_prescricao_p,
			nr_seq_prescr_w,
			cd_perfil_p, cd_funcao_p,
			nm_usuario_p, cd_categoria_p, ie_tipo_atend_tiss_p,NULL);
		END;
	ELSE
		BEGIN

		SELECT	coalesce(MAX(nr_seq_exame),0)
		INTO STRICT	nr_seq_exame_w
		FROM	prescr_procedimento
		WHERE	nr_prescricao = nr_prescricao_p
		AND	nr_sequencia  = nr_seq_proced_p;

			CALL atualiza_status_proced_exec(nr_seq_proced_p,
						    nr_prescricao_p,
						    nr_seq_exame_w,
						    nm_usuario_p);
		END;
	END IF;

	IF (cd_funcao_p	= 942) THEN

		IF (coalesce(ie_adm_adep_w,'N') = 'S') THEN
			CALL ge_executar_adep(nr_prescricao_p, nr_seq_prescr_w, nm_usuario_p);
		END IF;

	END IF;

	END;
END LOOP;
CLOSE C01;

--commit;
/*select	nvl(max(nr_sequencia),0),
	nvl(max(cd_procedimento),0),
	nvl(max(ie_origem_proced),0)
into	nr_seq_propaci_w,
	cd_procedimento_w,
	ie_origem_proced_w
from	procedimento_paciente
where	nr_prescricao		= nr_prescricao_p
and	nr_sequencia_prescricao	= nr_seq_proced_p;*/
OPEN C02;
LOOP
FETCH C02 INTO
	nr_seq_propaci_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	BEGIN
	nr_seq_propaci_w:= nr_seq_propaci_w;
	END;
END LOOP;
CLOSE C02;

SELECT	coalesce(MAX(cd_procedimento),0),
	coalesce(MAX(ie_origem_proced),0)
INTO STRICT	cd_procedimento_w,
	ie_origem_proced_w
FROM	procedimento_paciente
WHERE	nr_sequencia = nr_seq_propaci_w;

IF (nr_seq_propaci_w > 0) THEN
	UPDATE	PROCED_PACIENTE_FILME
	SET	nr_seq_proc	= nr_seq_propaci_w
	WHERE	nr_prescricao	= nr_prescricao_p
	AND	nr_seq_prescr	= nr_seq_proced_p;
END IF;

IF (cd_funcao_p	= 942) THEN
	BEGIN

	ie_atualiza_senha_autor_w := obter_param_usuario(942, 69, cd_perfil_p, nm_usuario_p, 0, ie_atualiza_senha_autor_w);

	IF (ie_atualiza_senha_autor_w = 'S') THEN

		SELECT	Obter_senha_autoriz_proced(nr_prescricao_p,
				nr_atendimento_w,
				cd_procedimento_w,
				ie_origem_proced_w)
		INTO STRICT	cd_senha_w
		;

		UPDATE	procedimento_paciente
		SET	cd_senha	= cd_senha_w
		WHERE	nr_sequencia	= nr_seq_propaci_w;

	END IF;

	IF (coalesce(ie_adm_adep_w,'N') = 'S') THEN
		CALL ge_executar_adep(nr_prescricao_p, nr_seq_proced_p, nm_usuario_p);
	END IF;

	END;
END IF;

SELECT	MAX(nr_seq_agenda),
	MAX(cd_estabelecimento)
INTO STRICT	nr_seq_agenda_w,
	cd_estabelecimento_w
FROM	prescr_medica
WHERE	nr_prescricao = nr_prescricao_p;

IF (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') THEN
	CALL executar_evento_agenda('EPG','E',nr_seq_agenda_w,cd_estabelecimento_w,nm_usuario_p,NULL,NULL);
END IF;

nr_seq_procpaci_p	:= nr_seq_propaci_w;

--commit;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proced_paciente_mmed (nr_prescricao_p bigint, nr_seq_proced_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_funcao_p bigint, cd_categoria_p text, ie_tipo_atend_tiss_p text, nr_seq_procpaci_p INOUT bigint) FROM PUBLIC;

