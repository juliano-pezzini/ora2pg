-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE vinc_atendimento_agenda_eup ( nr_seq_agenda_p bigint, nr_atendimento_p bigint, cd_pessoa_atendimento_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_cirurgia_w		bigint;
ie_atendimento_w	varchar(15);
cd_pessoa_fisica_w	varchar(20);
nr_sequencia_autor_w	bigint;
nr_doc_convenio_w	varchar(20);
cd_senha_w		varchar(20);
nr_seq_interno_w	bigint;

cd_agenda_w		bigint;
hr_inicio_w		timestamp;
cd_medico_w		varchar(10);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
dt_cancelamento_w	timestamp;
nr_seq_evento_w		bigint;
ie_gera_hist_vinc_w	varchar(1);
ds_historico_w		varchar(4000);
nm_paciente_w		varchar(240);
nr_atendimento_w	bigint;
dt_agenda_w		varchar(30);
nr_seq_proc_interno_w	bigint;
ds_observacao_w		varchar(255);
ie_autoriza_autor_inter_w varchar(1);
qt_dia_autorizado_w	autorizacao_convenio.qt_dia_autorizado%type;
dt_fim_vigencia_w	timestamp;
nr_seq_estagio_w	estagio_autorizacao.nr_sequencia%type;
nr_seq_autor_int_w	autorizacao_convenio.nr_sequencia%type;
C01 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_p
	and	Obter_seq_servico_agenda(nr_seq_agenda_p,nr_seq_proc_servico) = 'S'
	and	obter_se_regra_envio(a.nr_sequencia,nr_atendimento_p) = 'S'
	and	a.ie_evento_disp	= 'VAAG'
	and	coalesce(a.ie_situacao,'A') = 'A';


BEGIN

select	coalesce(nr_cirurgia,0)
into STRICT	nr_cirurgia_w
from	agenda_paciente
where	nr_sequencia	=	nr_seq_agenda_p;

ie_atendimento_w := obter_param_usuario(871, 84, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_atendimento_w);
ie_gera_hist_vinc_w := obter_param_usuario(916, 502, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gera_hist_vinc_w);
ie_autoriza_autor_inter_w := obter_param_usuario(916, 1122, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_autoriza_autor_inter_w);


if (ie_gera_hist_vinc_w = 'S') then
	select	substr(CASE WHEN coalesce(max(cd_pessoa_fisica)::text, '') = '' THEN max(nm_paciente)  ELSE obter_nome_pf(max(cd_pessoa_fisica)) END ,1,240),
		to_char(max(dt_agenda),'dd/mm/yyyy') || ' ' || to_char(max(hr_inicio),'hh24:mi:ss'),
		max(cd_procedimento),
		max(ie_origem_proced),
		max(nr_seq_proc_interno)
	into STRICT	nm_paciente_w,
		dt_agenda_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_proc_interno_w
	from	agenda_paciente
	where	nr_sequencia	= nr_seq_agenda_p;
end if;

update	agenda_paciente
set	nr_atendimento			=	nr_atendimento_p,
	cd_pessoa_fisica		=	cd_pessoa_atendimento_p,
	dt_atualizacao			=	clock_timestamp(),
	nm_usuario			=	nm_usuario_p,
	dt_vinculacao_atendimento 	= 	clock_timestamp(),
	ie_status_agenda		= 	CASE WHEN cd_pessoa_fisica = NULL THEN 'N'  ELSE ie_status_agenda END
where	nr_sequencia			=	nr_seq_agenda_p;

if (ie_gera_hist_vinc_w = 'S') then
	ds_historico_w:= Wheb_mensagem_pck.get_texto(306075,'NM_PACIENTE=' || nm_paciente_w || ';'||
														'NM_PACIENTE_ATENDIMENTO=' || obter_nome_pf(cd_pessoa_atendimento_p) || ';' ||
														'NR_ATENDIMENTO=' || nr_atendimento_p || ';' ||
														'DT_AGENDA=' || dt_agenda_w || ';' ||
														'PROCEDIMENTO=' || substr(obter_exame_agenda(cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w),1,240));
	CALL grava_historico_agenda_cir(nr_seq_agenda_p,ds_historico_w,Obter_Pessoa_Fisica_Usuario(nm_usuario_p,'C'),null,null,null,null,nm_usuario_p);
end if;

update	prescr_medica
set	nr_atendimento	=	nr_atendimento_p,
	cd_pessoa_fisica=	cd_pessoa_atendimento_p,
	nm_usuario	=	nm_usuario_p,
	dt_atualizacao	=	clock_timestamp()
where	nr_seq_agenda	=	nr_seq_agenda_p;

update	autorizacao_convenio
set	nr_atendimento   =	nr_atendimento_p
where	nr_seq_agenda    =	nr_seq_agenda_p
and	coalesce(nr_atendimento::text, '') = '';


/* Francisco - OS 115283 - 23/01/2009 - Mudar guia/senha do atendimento se j√° foi autorizado */

select	max(a.nr_sequencia)
into STRICT	nr_sequencia_autor_w
from	estagio_autorizacao b,
	autorizacao_convenio a
where	a.nr_seq_estagio	= b.nr_sequencia
and	b.ie_interno		= '10'
and	a.nr_seq_agenda		= nr_seq_agenda_p;

if (nr_sequencia_autor_w IS NOT NULL AND nr_sequencia_autor_w::text <> '') then
	select	max(cd_senha),
		max(cd_autorizacao)
	into STRICT	cd_senha_w,
		nr_doc_convenio_w
	from	autorizacao_convenio
	where	nr_sequencia	= nr_sequencia_autor_w;

	select	max(nr_seq_interno)
	into STRICT	nr_seq_interno_w
	from	atend_categoria_convenio
	where	nr_atendimento					= nr_atendimento_p
	and	obter_atecaco_atendimento(nr_atendimento)	= nr_seq_interno;

	if (nr_seq_interno_w IS NOT NULL AND nr_seq_interno_w::text <> '') then

		update	atend_categoria_convenio
		set	nr_doc_convenio	=	coalesce(nr_doc_convenio,nr_doc_convenio_w),
			cd_senha	=	coalesce(cd_senha,cd_senha_w)
		where	nr_atendimento	= 	nr_atendimento_p
		and	nr_seq_interno	=	nr_seq_interno_w;
	end if;
end if;
/* Fim 23/01/2009 */

commit;

if (nr_cirurgia_w > 0) then
	update	cirurgia
	set	cd_pessoa_fisica	=	cd_pessoa_atendimento_p,
		nr_atendimento		=	CASE WHEN ie_atendimento_w='S' THEN coalesce(nr_atendimento,nr_atendimento_p)  ELSE nr_atendimento END ,
		nm_usuario		=	nm_usuario_p,
		dt_atualizacao		=	clock_timestamp()
	where	nr_cirurgia		=	nr_cirurgia_w;
	commit;
end if;


if (coalesce(ie_autoriza_autor_inter_w,'N') = 'S') then

	begin
		select	a.cd_autorizacao,
			a.cd_senha,
			a.qt_dia_autorizado,
			a.dt_fim_vigencia,
			a.nr_seq_estagio
		into STRICT	nr_doc_convenio_w,
			cd_senha_w,
			qt_dia_autorizado_w,
			dt_fim_vigencia_w,
			nr_seq_estagio_w
		from	autorizacao_convenio a,
			estagio_autorizacao b
		where	a.nr_seq_estagio 	= b.nr_sequencia
		and	a.ie_tipo_autorizacao 	= '5'
		and	a.nr_seq_agenda		= nr_seq_agenda_p
		and	b.ie_interno		= '10'
		and	a.nr_atendimento	= nr_atendimento_p  LIMIT 1;
	exception
	when others then
		nr_doc_convenio_w 	:= null;
		cd_senha_w	  	:= null;
		qt_dia_autorizado_w 	:= null;
		dt_fim_vigencia_w	:= null;
		nr_seq_estagio_w	:= null;
	end;

	if (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') or (cd_senha_w IS NOT NULL AND cd_senha_w::text <> '') or (qt_dia_autorizado_w IS NOT NULL AND qt_dia_autorizado_w::text <> '') or (dt_fim_vigencia_w IS NOT NULL AND dt_fim_vigencia_w::text <> '') or (nr_seq_estagio_w IS NOT NULL AND nr_seq_estagio_w::text <> '') then


		select	max(x.nr_sequencia)
		into STRICT	nr_seq_autor_int_w
		from	autorizacao_convenio x,
			estagio_autorizacao y
		where	x.nr_atendimento	= nr_atendimento_p
		and	x.ie_tipo_autorizacao   = '1'
		and	y.nr_sequencia 		= x.nr_seq_estagio
		and	y.ie_interno <> '10';

		if (nr_seq_autor_int_w IS NOT NULL AND nr_seq_autor_int_w::text <> '') then


			update	autorizacao_convenio a
			set	a.cd_autorizacao 	= coalesce(nr_doc_convenio_w,a.cd_autorizacao),
				a.cd_senha	 	= coalesce(cd_senha_w,a.cd_senha),
				a.qt_dia_autorizado 	= coalesce(qt_dia_autorizado_w,a.qt_dia_autorizado),
				a.dt_fim_vigencia	= coalesce(dt_fim_vigencia_w,a.dt_fim_vigencia),
				a.dt_atualizacao	= clock_timestamp(),
				a.nm_usuario		= nm_usuario_p
				--a.nr_seq_estagio	= nvl(nr_seq_estagio_w,a.nr_seq_estagio)
			where	a.nr_sequencia		= nr_seq_autor_int_w;

			CALL atualizar_autorizacao_convenio(nr_seq_autor_int_w, nm_usuario_p, nr_seq_estagio_w, 'N', 'N','S');

		end if;

	end if;

end if;

open C01;
loop
fetch C01 into
	nr_seq_evento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	max(cd_agenda),
		max(hr_inicio),
		max(cd_medico),
		max(cd_procedimento),
		max(ie_origem_proced),
		max(dt_cancelamento),
		substr(max(ds_observacao),1,255)
	into STRICT	cd_agenda_w,
		hr_inicio_w,
		cd_medico_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		dt_cancelamento_w,
		ds_observacao_w
	from	agenda_paciente
	where	nr_sequencia = nr_seq_agenda_p;

	CALL gerar_evento_agenda_trigger(	nr_seq_evento_w,
					nr_atendimento_p,
					cd_pessoa_atendimento_p,
					null,
					nm_usuario_p,
					cd_agenda_w,
					hr_inicio_w,
					cd_medico_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					dt_cancelamento_w,
					null,
					NULL,
					NULL,
					null,
					null,
					'N',
					nr_seq_agenda_p,
					null,
					null,
					null,
					null,
					ds_observacao_w);
	end;

end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE vinc_atendimento_agenda_eup ( nr_seq_agenda_p bigint, nr_atendimento_p bigint, cd_pessoa_atendimento_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

