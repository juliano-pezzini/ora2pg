-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sip_calcular_nr_expostos ( nr_seq_lote_sip_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_expostos_periodo_w		integer;
ie_tipo_plano_w			varchar(3);
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
ie_ind_familiar_w		varchar(1)	:= 'S';
ie_coletivo_sem_patro_w		varchar(1)	:= 'S';
ie_coletivo_com_patro_w		varchar(1)	:= 'S';
ie_expostos_w			varchar(1);
ie_eventos_w			varchar(1);
ie_total_despesa_w		varchar(1);
ie_coparticipacao_w		varchar(1);
ie_seguros_w			varchar(1);
qt_segurado_if_w		integer	:= 0;
qt_segurado_if_ww		integer	:= 0;
qt_segurado_csp_w		integer	:= 0;
qt_segurado_csp_ww		integer	:= 0;
qt_segurado_ccp_w		integer	:= 0;
qt_segurado_ccp_ww		integer	:= 0;
cd_estrutura_sip_w		varchar(40);
ds_estrutura_sip_w		varchar(80);
dt_fim_carencia_w		timestamp;
qt_dias_expostos_w		bigint;
qt_expostos_seg_w		bigint;
qt_expostos_if_w		integer;
qt_expostos_csp_w		integer;
qt_expostos_ccp_w		integer;
qt_expostos_total_if_w		integer;
qt_expostos_total_csp_w		integer;
qt_expostos_total_ccp_w		integer;
nr_seq_estrut_sip_w		bigint;
qt_estrutura_w			integer	:= 0;

/* Buscar as regras de procedimento do SIP */

C01 CURSOR FOR
	SELECT	coalesce(cd_estrutura,'0'),
		coalesce(ds_estrutura,''),
		coalesce(ie_expostos,'S'),
		coalesce(ie_eventos,'S'),
		coalesce(ie_total_despesa,'S'),
		coalesce(ie_coparticipacao,'S'),
		coalesce(ie_seguros,'S'),
		nr_sequencia
	from	sip_estrutura_proc
	where	ie_situacao	= 'A'
	order by cd_estrutura;

/* Para cada estrutura SIP buscar o fim da carência e o tipo do plano do segurado que consta na regra de carência */

C02 CURSOR FOR
	SELECT	dt_fim_carencia,
		a.ie_tipo_plano
	from	pls_carencia_sip_segurado	b,
		pls_segurado			a
	where	a.nr_sequencia	= b.nr_seq_segurado
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	a.dt_ultima_carencia > dt_periodo_inicial_w
	and	b.dt_fim_carencia between dt_periodo_inicial_w and dt_periodo_final_w
	and	coalesce(a.dt_rescisao::text, '') = ''
	and	b.cd_estrutura	= cd_estrutura_sip_w;


BEGIN

begin
select	dt_periodo_inicial,
	coalesce(dt_periodo_final, clock_timestamp()),
	ie_ind_familiar,
	ie_coletivo_sem_patroci,
	ie_coletivo_com_patroci
into STRICT	dt_periodo_inicial_w,
	dt_periodo_final_w,
	ie_ind_familiar_w,
	ie_coletivo_sem_patro_w,
	ie_coletivo_com_patro_w
from	pls_lote_sip
where	nr_sequencia	= nr_seq_lote_sip_p;
exception
	when others then
	ie_ind_familiar_w	:= 'N';
	ie_coletivo_sem_patro_w	:= 'N';
	ie_coletivo_com_patro_w	:= 'N';
	CALL wheb_mensagem_pck.exibir_mensagem_abort(wheb_mensagem_pck.get_texto(303961,'NR_SEQ_LOTE_SIP='||nr_seq_lote_sip_p));
end;

nr_expostos_periodo_w	:= trunc(dt_periodo_final_w - dt_periodo_inicial_w);

/* Obter a quantidade de beneficiários IF que não possuem mais carências */

select	count(*)
into STRICT	qt_segurado_if_w
from	pls_segurado
where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
and	((dt_ultima_carencia	< dt_periodo_inicial_w) or (coalesce(dt_ultima_carencia::text, '') = ''))
and	coalesce(dt_rescisao::text, '') = ''
and	ie_tipo_plano	= 'IF';

/* Obter a quantidade de beneficiários CSP que não possuem mais carências */

select	count(*)
into STRICT	qt_segurado_csp_w
from	pls_segurado
where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
and	((dt_ultima_carencia	< dt_periodo_inicial_w) or (coalesce(dt_ultima_carencia::text, '') = ''))
and	coalesce(dt_rescisao::text, '') = ''
and	ie_tipo_plano	= 'CSP';

/* Obter a quantidade de beneficiários CCP que não possuem mais carências */

select	count(*)
into STRICT	qt_segurado_ccp_w
from	pls_segurado
where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
and	((dt_ultima_carencia	< dt_periodo_inicial_w) or (coalesce(dt_ultima_carencia::text, '') = ''))
and	coalesce(dt_rescisao::text, '') = ''
and	ie_tipo_plano	= 'CCP';

/*delete from logxxxxx_tasy where cd_log = 20081;*/

/* Buscar as estruturas de procedimento do SIP */

open C01;
loop
fetch C01 into
	cd_estrutura_sip_w,
	ds_estrutura_sip_w,
	ie_expostos_w,
	ie_eventos_w,
	ie_total_despesa_w,
	ie_coparticipacao_w,
	ie_seguros_w,
	nr_seq_estrut_sip_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	qt_expostos_ccp_w	:= 0;
	qt_expostos_csp_w	:= 0;
	qt_expostos_if_w	:= 0;

	/* Obter a quantidade de beneficiários que possuem a última carência maior que o período do SIP. Verificar se para a determinada estrutura possui carência */

	select	count(*)
	into STRICT	qt_segurado_if_ww
	from	pls_segurado
	where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	dt_ultima_carencia > dt_periodo_inicial_w
	and	coalesce(dt_rescisao::text, '') = ''
	and	ie_tipo_plano	= 'IF'
	and	nr_sequencia not in (SELECT nr_seq_segurado from pls_carencia_sip_segurado where cd_estrutura = cd_estrutura_sip_w);

	select	count(*)
	into STRICT	qt_segurado_csp_ww
	from	pls_segurado
	where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	dt_ultima_carencia > dt_periodo_inicial_w
	and	coalesce(dt_rescisao::text, '') = ''
	and	ie_tipo_plano	= 'CSP'
	and	nr_sequencia not in (SELECT nr_seq_segurado from pls_carencia_sip_segurado where cd_estrutura = cd_estrutura_sip_w);

	select	count(*)
	into STRICT	qt_segurado_ccp_ww
	from	pls_segurado
	where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	dt_ultima_carencia > dt_periodo_inicial_w
	and	coalesce(dt_rescisao::text, '') = ''
	and	ie_tipo_plano	= 'CCP'
	and	nr_sequencia not in (SELECT nr_seq_segurado from pls_carencia_sip_segurado where cd_estrutura = cd_estrutura_sip_w);

	open C02;
	loop
	fetch C02 into
		dt_fim_carencia_w,
		ie_tipo_plano_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		qt_dias_expostos_w	:= dt_periodo_final_w - dt_fim_carencia_w;
		qt_expostos_seg_w	:= dividir(qt_dias_expostos_w, nr_expostos_periodo_w);

		if (ie_tipo_plano_w	= 'CCP') then
			qt_expostos_ccp_w	:= qt_expostos_ccp_w + qt_expostos_seg_w;
		elsif (ie_tipo_plano_w	= 'CSP') then
			qt_expostos_csp_w	:= qt_expostos_csp_w + qt_expostos_seg_w;
		elsif (ie_tipo_plano_w	= 'IF') then
			qt_expostos_if_w	:= qt_expostos_if_w + qt_expostos_seg_w;
		end if;
		end;
	end loop;
	close C02;

	qt_expostos_total_if_w	:= qt_segurado_if_w + qt_segurado_if_ww + qt_expostos_if_w;
	qt_expostos_total_csp_w	:= qt_segurado_csp_w + qt_segurado_csp_ww + qt_expostos_csp_w;
	qt_expostos_total_ccp_w	:= qt_segurado_ccp_w + qt_segurado_ccp_ww + qt_expostos_ccp_w;

	select	count(*)
	into STRICT	qt_estrutura_w
	from	sip_procedimento
	where	nr_seq_estrutura	= nr_seq_estrut_sip_w;

	if (qt_estrutura_w	= 0) and (cd_estrutura_sip_w not in ('1.02.1','1.03.1','1.04')) then
		qt_expostos_total_if_w	:= 0;
		qt_expostos_total_csp_w	:= 0;
		qt_expostos_total_ccp_w	:= 0;
	end if;

	CALL sip_gravar_item_despesa(null, null, null,
				cd_estrutura_sip_w, qt_expostos_total_if_w, 0,
				0, 0, 0,
				nr_seq_lote_sip_p, 'IF', ds_estrutura_sip_w,
				null, ie_expostos_w, ie_eventos_w,
				ie_total_despesa_w, ie_coparticipacao_w, ie_seguros_w,
				0, '', nm_usuario_p,
				0, 0, 0);

	CALL sip_gravar_item_despesa(null, null, null,
				cd_estrutura_sip_w, qt_expostos_total_csp_w, 0,
				0, 0, 0,
				nr_seq_lote_sip_p, 'CSP', ds_estrutura_sip_w,
				null, ie_expostos_w, ie_eventos_w,
				ie_total_despesa_w, ie_coparticipacao_w, ie_seguros_w,
				0, '', nm_usuario_p,
				0, 0, 0);

	CALL sip_gravar_item_despesa(null, null, null,
				cd_estrutura_sip_w, qt_expostos_total_ccp_w, 0,
				0, 0, 0,
				nr_seq_lote_sip_p, 'CCP', ds_estrutura_sip_w,
				null, ie_expostos_w, ie_eventos_w,
				ie_total_despesa_w, ie_coparticipacao_w, ie_seguros_w,
				0, '', nm_usuario_p,
				0, 0, 0);

	/*insert into logxxxxxx_tasy
		(dt_atualizacao,
		nm_usuario,
		cd_log,
		ds_log)
	values (sysdate,
		nm_usuario_p,
		20081,
		ie_tipo_plano_w);*/
	commit;
	end;
end loop;
close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sip_calcular_nr_expostos ( nr_seq_lote_sip_p bigint, nm_usuario_p text) FROM PUBLIC;

