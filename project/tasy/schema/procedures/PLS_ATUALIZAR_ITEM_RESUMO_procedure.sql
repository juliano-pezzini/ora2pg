-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_item_resumo ( nr_seq_item_p bigint, ie_proc_mat_p text, nm_usuario_p text, ie_conta_inteira_p text) AS $body$
DECLARE

				
ie_tipo_w			varchar(1);
vl_liberado_w			double precision;
nr_seq_proc_w			bigint;
nr_seq_proc_partic_w		bigint;
nr_seq_conta_w			bigint;
ie_tipo_liberacao_w		varchar(2);
vl_tx_coleta_w			double precision;
nr_seq_prest_pgto_coleta_w	bigint;
nr_seq_proc_ref_w		bigint;
nr_seq_prestador_exec_w		bigint;
nm_prestador_pgto_w		varchar(255);
ie_origem_conta_w		pls_conta.ie_origem_conta%type;	
ie_status_mat_w			pls_conta_mat.ie_status%type;
vl_apresentado_resum_w		pls_conta_medica_resumo.vl_apresentado%type;
vl_apresentado_dif_w		pls_conta_medica_resumo.vl_apresentado%type;
qt_proc_w				integer;
dt_mes_competencia_w		pls_protocolo_conta.dt_mes_competencia%type;
ds_tipo_lote_contabil_w		tipo_lote_contabil.ds_tipo_lote_contabil%type;
vl_lib_proc_w				pls_conta_proc.vl_liberado%type;
vl_liberado_item_w			pls_conta_proc.vl_liberado%type;
vl_glosa_Item_w				pls_conta_proc.vl_glosa%type;
vl_calculado_item_w			pls_conta_proc.vl_procedimento%type;
ie_prop_glosa_tot_resumo_w	pls_parametros.ie_prop_glosa_tot_resumo%type := 'N';
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
				
C01 CURSOR FOR
	SELECT	'P' ie_tipo_item,
		a.vl_prestador,
		a.nr_sequencia nr_seq_proc,
		null nr_seq_proc_partic,
		a.ie_tipo_liberacao,
		a.nr_seq_prest_pgto_coleta,
		a.vl_exame_coleta,
		a.nr_seq_proc_ref,
		a.vl_liberado vl_lib_proc
	from	pls_conta_proc	a
	where	a.nr_sequencia	= nr_seq_item_p
	and	a.ie_status 	not in ('M', 'D')
	
union all

	SELECT	'C' ie_tipo_item,
		a.vl_pag_medico_conta,
		a.nr_sequencia nr_seq_proc,
		null nr_seq_proc_partic,
		a.ie_tipo_liberacao,
		null,
		0,
		0,
		a.vl_liberado vl_lib_proc
	from	pls_conta_proc	a
	where	a.nr_sequencia		= nr_seq_item_p
	and	not exists (select 1 from pls_proc_participante x where x.nr_seq_conta_proc = a.nr_sequencia)
	and	a.vl_pag_medico_conta 	> 0
	and	a.ie_status 		not in ('M', 'D')
	and	a.vl_liberado		> 0
	and	((a.ie_glosa = 'N') 	or (coalesce(a.ie_glosa::text, '') = ''))
	
union all
	
	select	'R' ie_tipo_item,
		p.vl_participante,
		a.nr_sequencia nr_seq_proc,
		p.nr_sequencia nr_seq_proc_partic,
		a.ie_tipo_liberacao,
		null,
		0,
		a.nr_seq_proc_ref,
		a.vl_liberado vl_lib_proc
	from	pls_conta_proc		a,
		pls_proc_participante	p
	where	a.nr_sequencia		= nr_seq_item_p
	and	p.nr_seq_conta_proc	= a.nr_sequencia
	and	p.vl_participante 	> 0
	and	a.ie_status 		not in ('M', 'D')
	and	p.ie_status <> 'C'
	and	a.vl_liberado		> 0
	
union all

	select	'R' ie_tipo_item,
		p.vl_participante,
		a.nr_sequencia nr_seq_proc,
		p.nr_sequencia nr_seq_proc_partic,
		a.ie_tipo_liberacao,
		null,
		0,
		a.nr_seq_proc_ref,
		a.vl_liberado vl_lib_proc
	from	pls_conta_proc		a,
		pls_proc_participante	p
	where	a.nr_sequencia		= nr_seq_item_p
	and	p.nr_seq_conta_proc	= a.nr_sequencia
	and	a.ie_status 		not in ('M', 'D')
	and	p.ie_status <> 'C'
	and	a.vl_liberado		= 0
	and p.vl_glosa > 0
	and ie_prop_glosa_tot_resumo_w = 'S';
	
cs_resumo_proc_apres CURSOR(nr_seq_conta_proc_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	a.nr_seq_conta,
		a.nr_sequencia,
		a.vl_procedimento_imp,
		a.vl_liberado
	from	pls_conta_proc	a
	where	a.nr_sequencia		= nr_seq_conta_proc_pc;
	
procedure atualiza_val_simul_item_glosa(	nr_seq_conta_proc_p	pls_conta_proc.nr_sequencia%type,
											nr_seq_conta_p		pls_conta.nr_sequencia%type,
											vl_glosa_p			pls_conta_proc.vl_glosa%type) is

pr_proporcao_w			double precision;
vl_glosa_acumulado_w	pls_conta_medica_resumo.vl_glosa%type := 0;
vl_glosa_w				pls_conta_medica_resumo.vl_glosa%type := 0;
nr_iteracao_w			integer := 0;
											
C01 CURSOR FOR
	SELECT	nr_sequencia,
			vl_liberado,
			nr_seq_prestador_pgto,
			( 	SELECT sum( vl_liberado)
				from 	pls_conta_medica_resumo 
				where 	nr_seq_conta = nr_seq_conta_p 
				and 	nr_seq_conta_proc =  nr_seq_conta_proc_p) vl_lib_item,
			  count(1) over () total_registros
	from	pls_conta_medica_resumo
	where	nr_seq_conta = nr_seq_conta_p
	and 	nr_seq_conta_proc = nr_seq_conta_proc_p;

BEGIN

	for r_c01_w in C01 loop
	
		nr_iteracao_w := nr_iteracao_w + 1;
	
		pr_proporcao_w := dividir( r_c01_w.vl_liberado, r_c01_w.vl_lib_item);
		vl_glosa_w := (vl_glosa_p * pr_proporcao_w);
		vl_glosa_acumulado_w := vl_glosa_acumulado_w + vl_glosa_w;

		if ( nr_iteracao_w = r_c01_w.total_registros) then
		
			vl_glosa_w := vl_glosa_w + (vl_glosa_p - vl_glosa_acumulado_w);
		
		end if;
	
		update 	pls_conta_medica_resumo
		set		vl_glosa =  vl_glosa_w,--r_c01_w.vl_liberado,
				vl_liberado = 0,
				vl_lib_original = 0,
				vl_hm = 0,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
		where 	nr_seq_conta = nr_seq_conta_p
		and 	nr_sequencia = r_c01_w.nr_sequencia;
	
	end loop;

end;

begin

cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;

if (cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '') then
	select 	coalesce(ie_prop_glosa_tot_resumo, 'N')
	into STRICT	ie_prop_glosa_tot_resumo_w
	from 	pls_parametros
	where 	cd_estabelecimento = cd_estabelecimento_w;
end if;

if (ie_proc_mat_p	= 'M') then
	
	select	max(a.nr_seq_conta),
		max(b.ie_origem_conta),
		max(a.ie_status),
		max(c.dt_mes_competencia)
	into STRICT	nr_seq_conta_w,
		ie_origem_conta_w,
		ie_status_mat_w,
		dt_mes_competencia_w
	from	pls_conta_mat a,
		pls_conta b,
		pls_protocolo_conta c
	where	a.nr_sequencia	= nr_seq_item_p
	and	a.nr_seq_conta 	= b.nr_sequencia
	and	c.nr_sequencia	= b.nr_seq_protocolo;
	
	if (ie_origem_conta_w <> 'A') then
		CALL pls_delete_conta_medica_resumo(nr_seq_conta_w,null,nr_seq_item_p,nm_usuario_P);
		
		if (ie_status_mat_w	not in ('D','M')) then
			begin
			CALL pls_inserir_conta_resumo_item(	null, null, nr_seq_item_p,
							'M', 0, nm_usuario_p, 'pls_atualizar_item_resumo');
			end;
		end if;
		
	end if;
else

	select	max(nr_seq_conta),
		max(nr_seq_prestador_exec),
		max(dt_mes_competencia),
		max(ie_origem_conta),
		max(vl_glosa),
		max(vl_liberado),
		max(vl_procedimento)
	into STRICT	nr_seq_conta_w,
		nr_seq_prestador_exec_w,
		dt_mes_competencia_w,
		ie_origem_conta_w,
		vl_glosa_item_w,
		vl_liberado_item_w,
		vl_calculado_item_w
	from	pls_conta_proc_v
	where	nr_sequencia	= nr_seq_item_p;

	CALL pls_delete_conta_medica_resumo(nr_seq_conta_w,nr_seq_item_p,null,nm_usuario_P);
	
	open C01;
	loop
	fetch C01 into	
		ie_tipo_w,
		vl_liberado_w,
		nr_seq_proc_w,
		nr_seq_proc_partic_w,
		ie_tipo_liberacao_w,
		nr_seq_prest_pgto_coleta_w,
		vl_tx_coleta_w,
		nr_seq_proc_ref_w,
		vl_lib_proc_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin	
		
		--Nao considera os a500
		if (ie_origem_conta_w <> 'A') then
			/*Se for item diferente de prestador
			    Ou ja existir taxa de coleta para o procedimento na conta*/
		
			if (vl_tx_coleta_w < 0) then
				vl_tx_coleta_w	:= 0;
			end if;
			
			/*Atualizar a referencia do procedimento*/

			if (coalesce(nr_seq_proc_ref_w,0)	<> 0) then
				vl_tx_coleta_w	:= 0;
			end if;
		
			if	((vl_tx_coleta_w <> 0) or (coalesce(nr_seq_prest_pgto_coleta_w,0)	= 0)) then
				
				--Necessario dar uma tratativa diferenciada para item totalmente glosado, para que o recurso de glosa possa ser realizado adequadamente para 

				--casos onde geraria multiplos prest pagamento para um item ou pagamento para o partcipante e nao executor da conta, alem de proporcionalizar

				--vl glosa no resumo, visando gerar um pagamento proporcional adequado, posteriormente no recurso de glosa.
				if (  vl_glosa_item_w > 0 and vl_liberado_item_w = 0 and vl_calculado_item_w > 0 and ie_prop_glosa_tot_resumo_w = 'S') then
				
					CALL pls_inserir_res_item_simulacao(	nr_seq_proc_w, nr_seq_proc_partic_w, null,
								ie_tipo_w, 0, nm_usuario_p, ''	);	
				else
					CALL pls_inserir_conta_resumo_item(	nr_seq_proc_w, nr_seq_proc_partic_w, null,
								ie_tipo_w, 0, nm_usuario_p, ''	);
				end if;
					
			end if;			
			
			/* Gerar o pagamento do prestador executor do exame de coleta 
			OPS - Prestadores / Prestadores / Exames de coleta */
			if (coalesce(nr_seq_prest_pgto_coleta_w,0) > 0) then
				
				
				--Necessario dar uma tratativa diferenciada para item totalmente glosado, para que o recurso de glosa possa ser realizado adequadamente para 

				--casos onde geraria multiplos prest pagamento para um item ou pagamento para o partcipante e nao executor da conta, alem de proporcionalizar

				--vl glosa no resumo, visando gerar um pagamento proporcional adequado, posteriormente no recurso de glosa.
				if (  vl_glosa_item_w > 0 and vl_liberado_item_w = 0 and vl_calculado_item_w > 0 and ie_prop_glosa_tot_resumo_w = 'S') then
					
					CALL pls_inserir_res_item_simulacao(	nr_seq_proc_w, nr_seq_proc_partic_w, null,
								ie_tipo_w, 0, nm_usuario_p, ''	);
				else
					/* Inserir o pagamento do prestador da regra */
		
					CALL pls_inserir_conta_resumo_item(	nr_seq_proc_w, nr_seq_proc_partic_w, null,
									ie_tipo_w, nr_seq_prest_pgto_coleta_w, nm_usuario_p, 
									''	);					
				end if;
								
				nm_prestador_pgto_w:= substr(pls_obter_dados_prestador(nr_seq_prest_pgto_coleta_w,'N'),1,255);
				/* Atualizar o pagamento da coleta do prestador executor da conta */

				update	pls_conta_medica_resumo
				set	vl_liberado		= vl_liberado_w - vl_tx_coleta_w,
					vl_lib_original		= vl_liberado_w - vl_tx_coleta_w,
					ds_tipo_item		= 'Prestador',
					nr_seq_prestador_pgto	= nr_seq_prest_pgto_coleta_w,
					nm_prestador_pgto	= nm_prestador_pgto_w,
					vl_co_pag		= vl_liberado_w - vl_tx_coleta_w,
					vl_hm			= 0,
					vl_materiais_pag	= 0
				where	nr_seq_conta		= nr_seq_conta_w
				and	coalesce(nr_seq_exame_coleta,0) = 0
				and	nr_seq_conta_proc	= nr_seq_proc_w
				and	ie_situacao = 'A';
				
				if (vl_tx_coleta_w	<> 0) then
					nm_prestador_pgto_w:= substr(pls_obter_dados_prestador(nr_seq_prestador_exec_w,'N'),1,255);
					update	pls_conta_medica_resumo
					set	vl_liberado		= vl_tx_coleta_w,
						vl_lib_original		= vl_tx_coleta_w,
						ds_tipo_item		= 'Prestador (Taxa de Coleta)',
						qt_item			= 1,
						nr_seq_prestador_pgto	= nr_seq_prestador_exec_w,
						nm_prestador_pgto	= nm_prestador_pgto_w,
						vl_hm			= 0,
						vl_materiais_pag	= 0,
						vl_co_pag		= vl_tx_coleta_w
					where	nr_seq_conta		= nr_seq_conta_w
					and	coalesce(nr_seq_exame_coleta,0) > 0				
					and	nr_seq_conta_proc	= nr_seq_proc_w
					and	ie_situacao = 'A';
				end if;
				
			end if;		
		end if;
		end;
	end loop;
	close C01;
	
	for rw_cs_resumo_apres_w in cs_resumo_proc_apres(nr_seq_item_p) loop
	
		update	pls_conta_medica_resumo
		set	vl_apresentado 	 	= dividir_sem_round((vl_lib_original * rw_cs_resumo_apres_w.vl_procedimento_imp), rw_cs_resumo_apres_w.vl_liberado)
		where	nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta
		and	nr_seq_conta_proc	= rw_cs_resumo_apres_w.nr_sequencia
		and	ie_tipo_item		!= 'I'
		and	ie_situacao		= 'A';

		select	sum(vl_apresentado)
		into STRICT	vl_apresentado_resum_w
		from	pls_conta_medica_resumo
		where	nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta
		and	nr_seq_conta_proc	= rw_cs_resumo_apres_w.nr_sequencia
		and	ie_tipo_item		!= 'I'
		and	ie_situacao		= 'A';
		--Diferenca entre a soma dos valores apresentados dos registros na pls_conta_medica_resumo do procedimento em questao, em relacao ao valor apresentado para o procedimento.
		vl_apresentado_dif_w := rw_cs_resumo_apres_w.vl_procedimento_imp - vl_apresentado_resum_w;

		--Na divisao do valor apresentado, pode ocorrer uma divergencia de valor entre a soma dos registros e o total apresentado do item,

		--entao aqui e feito um ajuste e o ajuste apenas ocorre em um unico item cujo valor apresentado ja seja maior que o valor de ajuste(evita ficar negativo, no caso de ajuste com valor negativo)
		if (vl_apresentado_dif_w <> 0) then
			update	pls_conta_medica_resumo
			set	vl_apresentado = vl_apresentado + vl_apresentado_dif_w
			where	nr_sequencia   =  (	SELECT	max(nr_sequencia)
							from 	pls_conta_medica_resumo
							where	nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta
							and	nr_seq_conta_proc	= rw_cs_resumo_apres_w.nr_sequencia
						--	and	vl_apresentado 		> vl_apresentado_dif_w
							and	ie_tipo_item		!= 'I'
							and	ie_situacao		= 'A')
			and   nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta;
		end if;
		commit;
		
	end loop;
	
	for rw_cs_resumo_apres_w in cs_resumo_proc_apres(nr_seq_item_p) loop
	
		select 	count(1)
		into STRICT	qt_proc_w
		from	pls_conta_medica_resumo
		where	nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta
		and		nr_seq_conta_proc	= rw_cs_resumo_apres_w.nr_sequencia
		and		ie_tipo_item		!= 'I'
		and		ie_situacao			= 'A';
		
		if (qt_proc_w	> 1) then
			update	pls_conta_medica_resumo
			set		vl_apres_ind		= dividir_sem_round((vl_lib_original * rw_cs_resumo_apres_w.vl_procedimento_imp), rw_cs_resumo_apres_w.vl_liberado)
			where	nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta
			and		nr_seq_conta_proc	= rw_cs_resumo_apres_w.nr_sequencia
			and		ie_tipo_item		!= 'I'
			and		ie_situacao			= 'A';

			select	sum(vl_apres_ind)
			into STRICT	vl_apresentado_resum_w
			from	pls_conta_medica_resumo
			where	nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta
			and		nr_seq_conta_proc	= rw_cs_resumo_apres_w.nr_sequencia
			and		ie_tipo_item		!= 'I'
			and		ie_situacao			= 'A';
		
			--Diferenca entre a soma dos valores apresentados dos registros na pls_conta_medica_resumo do procedimento em questao, em relacao ao valor apresentado para o procedimento.
			vl_apresentado_dif_w := rw_cs_resumo_apres_w.vl_procedimento_imp - vl_apresentado_resum_w;

			--Na divisao do valor apresentado, pode ocorrer uma divergencia de valor entre a soma dos registros e o total apresentado do item,

			--entao aqui e feito um ajuste e o ajuste apenas ocorre em um unico item cujo valor apresentado ja seja maior que o valor de ajuste(evita ficar negativo, no caso de ajuste com valor negativo)
			if (vl_apresentado_dif_w <> 0) then
				update	pls_conta_medica_resumo
				set		vl_apres_ind = vl_apresentado + vl_apresentado_dif_w
				where	nr_sequencia   =  (	SELECT	max(nr_sequencia)
											from 	pls_conta_medica_resumo
											where	nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta
											and		nr_seq_conta_proc	= rw_cs_resumo_apres_w.nr_sequencia
											and		ie_tipo_item		!= 'I'
											and		ie_situacao			= 'A')
				and   nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta;
			end if;
		else
			update	pls_conta_medica_resumo
			set		vl_apres_ind	 	= rw_cs_resumo_apres_w.vl_procedimento_imp
			where	nr_seq_conta		= rw_cs_resumo_apres_w.nr_seq_conta
			and		nr_seq_conta_proc	= rw_cs_resumo_apres_w.nr_sequencia
			and		ie_tipo_item		!= 'I'
			and		ie_situacao			= 'A';
		end if;
		
		commit;
		
	end loop;
	end if;

	--Se for procedimento e o item foi totalmente glosado, precisa atualizar valores de glosas proporcionais e zerar valor liberado, ja que nesse caso, chama a 

	--pls_inserir_res_item_sumulacao fazendo simulacao como se valor estivesse liberado, para definir o pretador de pagamento corretamente.
	if ( ie_proc_mat_p = 'P' and vl_glosa_item_w > 0 and vl_liberado_item_w = 0 and ie_prop_glosa_tot_resumo_w = 'S') then
		atualiza_val_simul_item_glosa(nr_seq_item_p, nr_seq_conta_w, vl_glosa_item_w);
	end if;
	
ds_tipo_lote_contabil_w := pls_atualizar_contab_val_adic(dt_mes_competencia_w, nm_usuario_p, ds_tipo_lote_contabil_w, null, nr_seq_conta_w);

if (coalesce(ie_conta_inteira_p,'N') = 'N') then
	CALL pls_cta_consistir_pck.gerar_resumo_conta(null, null, null, nr_seq_conta_w, nm_usuario_p, null);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_item_resumo ( nr_seq_item_p bigint, ie_proc_mat_p text, nm_usuario_p text, ie_conta_inteira_p text) FROM PUBLIC;

