-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_elegibibilidade ( nr_seq_protocolo_p bigint, nr_seq_conta_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_seq_conta_w			bigint;
nr_seq_prestador_w		bigint;
dt_entrada_imp_w		timestamp;
nr_seq_prestador_imp_w		varchar(20);
nr_seq_segurado_w		bigint;
cd_usuario_plano_imp_w		varchar(30);
cd_usuario_plano_imp_ww		varchar(30);
cd_usuario_plano_w		varchar(30);
dt_inclusao_operadora_w		timestamp;
dt_limite_utilizacao_w		timestamp;
cd_cgc_prestador_imp_w		varchar(14);
nr_seq_outorgante_w		bigint;
cd_ans_imp_w			varchar(20);
cd_usuario_plano_atual_w	varchar(30);
qt_registros_w			bigint;
cd_cpf_prestador_imp_w		varchar(11);
cd_estabelecimento_w		smallint;
cd_estabelecimento_ww		smallint;
nr_seq_prestador_exec_imp_w	varchar(20);
cd_cpf_executor_imp_w		varchar(11);
cd_cgc_executor_imp_w		varchar(14);
ie_tipo_guia_w			varchar(2);
ie_gerar_usuario_eventual_w	varchar(1);
nr_seq_plano_usu_eventual_w	bigint;
cd_pessoa_fisica_w		bigint;
nm_congenere_w			varchar(255);
nm_segurado_imp_w		varchar(255);
nr_seq_congenere_w		bigint;
ie_gerar_usuario_even_coop_w	varchar(1);
cd_cooperativa_w		numeric(20);
cd_operadora_empresa_w		bigint;
ie_tipo_segurado_w		varchar(2);
qt_mascara_emissor_w		bigint;
qt_tamanho_carteira_w		bigint;
ie_carterinha_valida_w		varchar(1) := 'N';
ie_guia_w			varchar(1) := 'N';
cd_guia_pesquisa_w		varchar(20);
cd_guia_ok_w			pls_conta.cd_guia_ok%type;

cd_usuario_plano_num_w              pls_segurado_carteira.cd_usuario_plano%type;
ie_forma_val_cart_benef_w	pls_web_param_geral.ie_forma_val_cart_benef%type  := Null;

c01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_prestador_imp,
		upper(cd_usuario_plano_imp),
		cd_cgc_prestador_imp,
		cd_cpf_prestador_imp,
		dt_entrada_imp,
		cd_ans_imp,
		nr_seq_prestador_exec_imp,
		cd_cgc_executor_imp,
		cd_cpf_executor_imp,
		ie_tipo_guia,
		pls_converte_cd_guia_pesquisa(cd_guia_imp),
		cd_guia_ok,
		ie_tipo_segurado
	from	pls_conta
	where	nr_seq_protocolo = nr_seq_protocolo_p;
	

BEGIN

select	cd_estabelecimento
into STRICT	cd_estabelecimento_ww
from	pls_protocolo_conta
where	nr_sequencia = nr_seq_protocolo_p;

open c01;
loop
fetch c01 into	
	nr_seq_conta_w,
	nr_seq_prestador_imp_w,
	cd_usuario_plano_imp_w,
	cd_cgc_prestador_imp_w,
	cd_cpf_prestador_imp_w,
	dt_entrada_imp_w,
	cd_ans_imp_w,
	nr_seq_prestador_exec_imp_w,
	cd_cgc_executor_imp_w,
	cd_cpf_executor_imp_w,	
	ie_tipo_guia_w,
	cd_guia_pesquisa_w,
	cd_guia_ok_w,
	ie_tipo_segurado_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	ie_guia_w	:= 'N';
	cd_estabelecimento_w	:= null;
	begin
		select	cd_estabelecimento,
			nr_sequencia
		into STRICT	cd_estabelecimento_w,
			nr_seq_outorgante_w
		from	pls_outorgante
		where	cd_ans = cd_ans_imp_w
		and	cd_estabelecimento	= cd_estabelecimento_ww;
	exception
	when others then
		cd_estabelecimento_w	:= null;
		nr_seq_outorgante_w	:= 0;
	end;
	
	if (coalesce(cd_estabelecimento_w::text, '') = '') then
		select	coalesce(max(nr_sequencia),0)	
		into STRICT	nr_seq_outorgante_w
		from	pls_outorgante
		where	cd_ans = cd_ans_imp_w;

		select	coalesce(max(cd_estabelecimento), cd_estabelecimento_ww)
		into STRICT	cd_estabelecimento_w
		from	pls_outorgante
		where	nr_sequencia	= nr_seq_outorgante_w;
	end if;

	if (nr_seq_outorgante_w = 0) then
		CALL pls_gravar_conta_glosa('9901',nr_seq_conta_w, null,
					null, 'N', 'Operadora invalida', 
					nm_usuario_p, 'A', 'IA', 
					nr_seq_prestador_w, cd_estabelecimento_w, '', null);
	else
		update	pls_protocolo_conta
		set	nr_seq_outorgante	= nr_seq_outorgante_w,
			cd_estabelecimento	= cd_estabelecimento_w
		where	nr_sequencia		= nr_seq_protocolo_p;
	end if;
		
	/* Verificado que na guia de internacao nao possui prestador solicitante somente prestador executor */

	if (ie_tipo_guia_w = '5') then
		nr_seq_prestador_w	:= pls_obter_prestador_imp(cd_cgc_executor_imp_w, cd_cpf_executor_imp_w, nr_seq_prestador_exec_imp_w, '', '', '');
	else
		nr_seq_prestador_w	:= pls_obter_prestador_imp(cd_cgc_prestador_imp_w, cd_cpf_prestador_imp_w, nr_seq_prestador_imp_w, '', '', '');	
	end if;	
		
    select max(coalesce(ie_forma_val_cart_benef, '1'))
      into STRICT ie_forma_val_cart_benef_w
      from pls_web_param_geral
     where cd_estabelecimento	=	cd_estabelecimento_p;

	if (ie_forma_val_cart_benef_w = '1') then	
		cd_usuario_plano_imp_ww	:= elimina_caracteres_especiais(cd_usuario_plano_imp_w);
		cd_usuario_plano_imp_ww	:= somente_numero_char(cd_usuario_plano_imp_ww);
	else
		cd_usuario_plano_imp_ww := cd_usuario_plano_imp_w;
	end if;
		
	--Busca pelo segurado atraves do cd_guia_pesquisa
	select	max(a.nr_seq_segurado)
	into STRICT	nr_seq_segurado_w
	from	pls_guia_plano a,
		pls_segurado_carteira b
	where	a.cd_guia_pesquisa	= cd_guia_pesquisa_w
	and	b.nr_seq_segurado	= a.nr_seq_segurado
	and	b.nr_cartao_intercambio = cd_usuario_plano_imp_ww
	and	a.ie_status		= '1';
		
	if (coalesce(nr_seq_segurado_w::text, '') = '') then
		select	max(a.nr_seq_segurado)
		into STRICT	nr_seq_segurado_w
		from	pls_guia_plano a,
			pls_segurado_carteira b
		where	a.cd_guia_pesquisa	= cd_guia_pesquisa_w
		and	b.nr_seq_segurado	= a.nr_seq_segurado
		and	b.cd_usuario_plano	= cd_usuario_plano_imp_ww
		and	a.ie_status		= '1';		
	end if;
	
	--Ainda nao achou o segurado, busca pela guia principal
	if (coalesce(nr_seq_segurado_w::text, '') = '') then
		select	max(a.nr_seq_segurado)
		into STRICT	nr_seq_segurado_w
		from	pls_guia_plano a,
			pls_segurado_carteira b
		where	a.cd_guia_pesquisa	= cd_guia_ok_w
		and	b.nr_seq_segurado	= a.nr_seq_segurado
		and	b.nr_cartao_intercambio = cd_usuario_plano_imp_ww
		and	a.ie_status		= '1';
			
		if (coalesce(nr_seq_segurado_w::text, '') = '') then
			select	max(a.nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_guia_plano a,
				pls_segurado_carteira b
			where	a.cd_guia_pesquisa	= cd_guia_ok_w
			and	b.nr_seq_segurado	= a.nr_seq_segurado
			and	b.cd_usuario_plano	= cd_usuario_plano_imp_ww
			and	a.ie_status		= '1';
		end if;
	end if;
	
	if (coalesce(nr_seq_segurado_w::text, '') = '') then
		--Busca pelo segurado atraves do cd_guia_pesquisa
		select	max(a.nr_seq_segurado)
		into STRICT	nr_seq_segurado_w
		from	pls_guia_plano a,
			pls_segurado_carteira b
		where	a.cd_guia_pesquisa	= cd_guia_pesquisa_w
		and	b.nr_seq_segurado	= a.nr_seq_segurado
		and	b.nr_cartao_intercambio = cd_usuario_plano_imp_ww;
			
		if (coalesce(nr_seq_segurado_w::text, '') = '') then
			select	max(a.nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_guia_plano a,
				pls_segurado_carteira b
			where	a.cd_guia_pesquisa	= cd_guia_pesquisa_w
			and	b.nr_seq_segurado	= a.nr_seq_segurado
			and	b.cd_usuario_plano	= cd_usuario_plano_imp_ww;
		end if;
		
		--Ainda nao achou o segurado, busca pela guia principal
		if (coalesce(nr_seq_segurado_w::text, '') = '') then
			select	max(a.nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_guia_plano a,
				pls_segurado_carteira b
			where	a.cd_guia_pesquisa	= cd_guia_ok_w
			and	b.nr_seq_segurado	= a.nr_seq_segurado
			and	b.nr_cartao_intercambio = cd_usuario_plano_imp_ww;
				
			if (coalesce(nr_seq_segurado_w::text, '') = '') then
				select	max(a.nr_seq_segurado)
				into STRICT	nr_seq_segurado_w
				from	pls_guia_plano a,
					pls_segurado_carteira b
				where	a.cd_guia_pesquisa	= cd_guia_ok_w
				and	b.nr_seq_segurado	= a.nr_seq_segurado
				and	b.cd_usuario_plano	= cd_usuario_plano_imp_ww;
			end if;
		end if;
	end if;
	
	--Em ultimos casos, retorna a maior sequencia de segurado com nr_cartao_itercambio descrito
	if (coalesce(nr_seq_segurado_w::text, '') = '') then
		select 	max(nr_seq_segurado)
		into STRICT	nr_seq_segurado_w
		from   	pls_segurado_carteira
		where  	nr_cartao_intercambio = cd_usuario_plano_imp_ww;
		
		if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
			select	max(a.ie_tipo_segurado)
			into STRICT	ie_tipo_segurado_w
			from	pls_segurado a
			where	a.nr_sequencia	= nr_seq_segurado_w;		
		end if;
	else
		ie_guia_w	:= 'S';
	end if;
	
	if (ie_tipo_segurado_w <> 'T') or (coalesce(nr_seq_segurado_w::text, '') = '') then
		select	coalesce(max(nr_seq_segurado),0)
		into STRICT	nr_seq_segurado_w
		from	pls_segurado_carteira
		where	cd_usuario_plano	= cd_usuario_plano_imp_ww;
	end if;
	
	if (nr_seq_segurado_w = 0) then
		select	coalesce(max(a.nr_seq_segurado),0)
		into STRICT	nr_seq_segurado_w
		from	pls_segurado_cart_ant a
		where	a.cd_usuario_ant	= cd_usuario_plano_imp_ww
		and	a.cd_usuario_ant <>	(SELECT	b.cd_usuario_plano
						from	pls_segurado_carteira b
						where	b.nr_seq_segurado	= a.nr_seq_segurado);
						
		if (nr_seq_segurado_w = 0) then		
			/*OS 527192 Verifica se a carteirinha enviada pertence a um usuario de a100 Diogo*/

			select	coalesce(max(a.nr_seq_segurado),0)
			into STRICT	nr_seq_segurado_w
			from	pls_segurado_carteira a
			where	a.nr_cartao_intercambio	= cd_usuario_plano_imp_ww;
			
			if (nr_seq_segurado_w = 0) then
				/*Diego OS 280609 - Alteracao realizada para que seja possivel obter o numero da congenere do benef 
							independentemente se for a carteirinha antiga ou a nova*/
				cd_usuario_plano_num_w := regexp_replace(cd_usuario_plano_imp_ww, '[^0-9]', '');
				begin
					if (length(cd_usuario_plano_num_w) = 17) then
						cd_cooperativa_w	:= (substr(cd_usuario_plano_num_w,1,4))::numeric;
					else
						cd_cooperativa_w	:= (substr(cd_usuario_plano_num_w,1,3))::numeric;				
					end if;
				exception
				when others then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(239308,';CD_USUARIO_IMP=' ||cd_usuario_plano_num_w);
				end;
				
				begin
				select	nr_sequencia
				into STRICT	nr_seq_congenere_w
				from	pls_congenere
				where	(cd_cooperativa)::numeric  = cd_cooperativa_w;
				exception
				when others then
					nr_seq_congenere_w := null;
				end;

				/*Verificar o parametro quanto a criacao de usuario eventual*/

				begin
				select	coalesce(ie_gerar_usuario_eventual,'N')
				into STRICT	ie_gerar_usuario_eventual_w
				from	pls_parametros
				where	cd_estabelecimento = cd_estabelecimento_w;
				exception
				when others then
					ie_gerar_usuario_eventual_w	:= 'N';
				end;
				
				/* Francisco - 18/01/2011 - OS 281911 - Verificar para cada cooperativa se deve ou nao gerar */


				/*Alterado para NVL(N) por que caso nao existir congenere nao deve gerar o eventual*/

				select	coalesce(max(a.ie_gerar_usuario_eventual),'N')
				into STRICT	ie_gerar_usuario_even_coop_w
				from	pls_congenere a
				where	a.nr_sequencia	= nr_seq_congenere_w;
				
				/*Se for necessario cria-se o usuario eventual*/

				if (ie_gerar_usuario_eventual_w = 'S') and (ie_gerar_usuario_even_coop_w = 'S') then
					
					select	max(cd_usuario_plano)
					into STRICT	cd_usuario_plano_w
					from	pls_segurado_carteira
					where	cd_usuario_plano = cd_usuario_plano_imp_ww;

					if (coalesce(cd_usuario_plano_imp_ww,'X') = 'X') then
							CALL pls_gravar_conta_glosa('1001', nr_seq_conta_w, null,
										null, 'N', 'Beneficiario nao encontrado na base ',
										nm_usuario_p,'A','IA',
										nr_seq_prestador_w, cd_estabelecimento_w, '', null);
					elsif (coalesce(nr_seq_segurado_w,0) > 0) then
						select	max(ie_tipo_segurado)
						into STRICT	ie_tipo_segurado_w
						from	pls_segurado
						where	nr_sequencia	= nr_seq_segurado_w;
						
						/* Somente para beneficiarios eventuais */

						if (coalesce(ie_tipo_segurado_w,'B') in ('I','H')) then
							qt_tamanho_carteira_w	:= length(cd_usuario_plano_w);
							qt_mascara_emissor_w	:= length(elimina_caracteres_especiais(pls_obter_mascara_cartao_benef(null,'O',cd_estabelecimento_w)));
							
							if (qt_tamanho_carteira_w <> coalesce(qt_mascara_emissor_w,qt_tamanho_carteira_w)) then
								CALL pls_gravar_conta_glosa('1001', nr_seq_conta_w, null,
											null, 'N', 'Quantidade de digitos da carteira fora do padrao. Qt. importada= ' || qt_tamanho_carteira_w || '. Qt. mascara= ' || qt_mascara_emissor_w || '.',
											nm_usuario_p,'A','IA',
											nr_seq_prestador_w, cd_estabelecimento_w, '', null);
							else
								ie_carterinha_valida_w	:= 'S';
							end if;
						end if;
					else
						qt_tamanho_carteira_w	:= length(cd_usuario_plano_imp_ww);
						qt_mascara_emissor_w	:= length(elimina_caracteres_especiais(pls_obter_mascara_cartao_benef(null,'O',cd_estabelecimento_w)));
						
						if (qt_tamanho_carteira_w <> coalesce(qt_mascara_emissor_w,qt_tamanho_carteira_w)) then
							CALL pls_gravar_conta_glosa('1001', nr_seq_conta_w, null,
										null, 'N', 'Quantidade de digitos da carteira fora do padrao. Qt. importada= ' || qt_tamanho_carteira_w || '. Qt. mascara= ' || qt_mascara_emissor_w || '.',
										nm_usuario_p,'A','IA',
										nr_seq_prestador_w, cd_estabelecimento_w, '', null);
						else
							ie_carterinha_valida_w	:= 'S';
						end if;
					end if;

					/*Diego OS 299659 - Validar o ultimo digito da carteiria do benef com o informado no xml*/
	
					if (pls_calcula_digito_carteira(substr(cd_usuario_plano_imp_w, 1, length(cd_usuario_plano_imp_w) -1)) <>  substr(cd_usuario_plano_imp_w, length(cd_usuario_plano_imp_w), 1)) then
						ie_carterinha_valida_w	:= 'N';
						CALL pls_gravar_conta_glosa('1001',nr_seq_conta_w, null,
									null, 'N', 'O digito verificador da carteira do beneficiario nao consiste com o digito calculado.' ,
									nm_usuario_p, 'A', 'IA',
									nr_seq_prestador_w, cd_estabelecimento_w, '', null);
					end if;
				
					if (ie_carterinha_valida_w	= 'S')	then		
					/*Diego OS 320247 - 03/06/11 - Caso o digito verificador da carteira seja invalida nao e gerado o usuario eventual*/

						select 	nextval('pessoa_fisica_seq')
						into STRICT	cd_pessoa_fisica_w
						;
					
						select	nm_segurado_imp
						into STRICT	nm_segurado_imp_w
						from	pls_conta
						where	nr_sequencia = nr_seq_conta_w;
						
						if (nm_segurado_imp_w IS NOT NULL AND nm_segurado_imp_w::text <> '') then
							insert into pessoa_fisica(cd_pessoa_fisica, nm_usuario, dt_atualizacao,
								 nm_pessoa_fisica, ie_tipo_pessoa)
							values (cd_pessoa_fisica_w, nm_usuario_p, clock_timestamp(),
								 nm_segurado_imp_w, 2);
								
							/*aaschlote 30/06/2012 OS 464957*/

							begin
							cd_operadora_empresa_w	:= pls_obter_nome_empresa_cart(cd_usuario_plano_imp_w,'E',cd_estabelecimento_w);
							exception
							when others then
								cd_operadora_empresa_w	:= null;
							end;
							
							select	nextval('pls_segurado_seq')
							into STRICT	nr_seq_segurado_w
							;
							
							insert into pls_segurado(nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
								 nm_usuario, nm_usuario_nrec, cd_pessoa_fisica,
								 dt_inclusao_operadora, nr_seq_plano, ie_tipo_segurado,
								 ie_situacao_atend, nr_seq_congenere,cd_estabelecimento,
								 ie_local_cadastro,cd_operadora_empresa,ie_pcmso,
								 dt_liberacao)
							values (nr_seq_segurado_w, clock_timestamp(), clock_timestamp(),
								 nm_usuario_p, nm_usuario_p, cd_pessoa_fisica_w,
								 clock_timestamp(), nr_seq_plano_usu_eventual_w, 'I',
								 'A', nr_seq_congenere_w,cd_estabelecimento_w,
								 2,cd_operadora_empresa_w,'N',
								clock_timestamp());
							
							insert into pls_segurado_carteira(nr_sequencia, cd_usuario_plano, dt_inicio_vigencia,
								 ie_situacao, nr_seq_segurado, dt_atualizacao, dt_atualizacao_nrec,
								 nm_usuario, nm_usuario_nrec,cd_estabelecimento)
							values (nextval('pls_segurado_carteira_seq'), cd_usuario_plano_imp_w, clock_timestamp(),
								 'D', nr_seq_segurado_w, clock_timestamp(), clock_timestamp(),
								 nm_usuario_p, nm_usuario_p,cd_estabelecimento_w);--aaschlote 08/11/2011 - 304090			
									
							nr_seq_plano_usu_eventual_w	:= pls_obter_produto_eventual(nr_seq_segurado_w);
							/*aaschlote 30/06/2012 OS 464957*/

							CALL pls_gerar_ops_congenere_benef(nr_seq_segurado_w,cd_usuario_plano_imp_w,cd_estabelecimento_w,nm_usuario_p,'N');
						end if;
						
						if (coalesce(nr_seq_plano_usu_eventual_w,0) > 0) and (nm_segurado_imp_w IS NOT NULL AND nm_segurado_imp_w::text <> '') then
							update	pls_segurado
							set	nr_seq_plano	= nr_seq_plano_usu_eventual_w
							where	nr_sequencia	= nr_seq_segurado_w;
						else
							CALL pls_gravar_conta_glosa('1024',nr_seq_conta_w, null,
								null, 'N', 'Nao existe regra na funcao OPS - Cooperativa Medica / Regras / Definicao de produto para usuario eventual!',
								nm_usuario_p, 'A', 'IA',
								nr_seq_prestador_w, cd_estabelecimento_w, '', null);
						end if;
					end if;
				else					
					CALL pls_gravar_conta_glosa('1001',nr_seq_conta_w, null,
								null, 'N', 'Carteira nao cadastrada na base.' ,
								nm_usuario_p, 'A', 'IA', 
								nr_seq_prestador_w, cd_estabelecimento_w, '', null);			
				end if;
			end if;
		else
			cd_usuario_plano_imp_ww := elimina_caracteres_especiais(cd_usuario_plano_imp_w);
			
			select	count(1)
			into STRICT	qt_registros_w
			from	atend_categoria_convenio
			where	cd_usuario_convenio = cd_usuario_plano_imp_ww;
			
			if (qt_registros_w > 0) then
				select	cd_usuario_plano
				into STRICT	cd_usuario_plano_atual_w
				from	pls_segurado_carteira
				where	nr_seq_segurado = nr_seq_segurado_w;
				
				begin
				update	atend_categoria_convenio	a
				set	a.cd_usuario_convenio = cd_usuario_plano_atual_w
				where	elimina_caracteres_especiais(a.cd_usuario_convenio) = elimina_caracteres_especiais(cd_usuario_plano_imp_ww)
				and	exists (SELECT	b.cd_categoria
						from 	categoria_convenio	b
						where 	b.ie_situacao = 'A'
						and	a.cd_convenio	= b.cd_convenio
						and	a.cd_categoria	= b.cd_categoria);
				exception
				when others then
					cd_usuario_plano_atual_w	:= cd_usuario_plano_atual_w;
				end;
			end if;
		end if;
	end if;
	
	if (nr_seq_segurado_w > 0) then
		update	pls_conta
		set	nr_seq_segurado		= nr_seq_segurado_w,
			cd_estabelecimento	= cd_estabelecimento_w
		where	nr_sequencia		= nr_seq_conta_w;

		select	dt_inclusao_operadora,
			coalesce(dt_limite_utilizacao, clock_timestamp())
		into STRICT	dt_inclusao_operadora_w,
			dt_limite_utilizacao_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;
	end if;
	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_elegibibilidade ( nr_seq_protocolo_p bigint, nr_seq_conta_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

