-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_w_benef_movto_mensal ( dt_ano_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


dt_mes_w			timestamp;
dt_mes_final_w			timestamp;
nr_seq_segurado_w		bigint;
dt_fim_mes_atual_w		timestamp;
dt_rescisao_w			timestamp;
nr_seq_w_pls_benef_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_historico_w		bigint;
ds_observacao_w			varchar(255);
nr_seq_plano_atual_w		bigint;
ie_possui_mensalidade_w		varchar(1);
dt_mes_atual_w			timestamp;
nr_seq_reg_ant_w		bigint;
nr_seq_plano_ant_w		bigint;
ie_alterou_plano_w		varchar(2);
qt_idade_w			bigint;
dt_contratacao_w		timestamp;
dt_nascimento_w			timestamp;
dt_mes_aux_w			timestamp;
qt_registros_w			bigint;
dt_ultimo_hist_inativo_w	timestamp;
dt_ultimo_hist_reativacao_w	timestamp;
ie_tipo_historico_w		varchar(10);

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		trunc(a.dt_rescisao,'month'),
		a.nr_seq_plano,
		trunc(a.dt_contratacao,'month'),
		b.dt_nascimento
	from	pessoa_fisica	b,
		pls_segurado 	a
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	not exists (	SELECT	1
				from	w_pls_benef_movto_mensal x
				where	a.nr_sequencia	= x.nr_seq_segurado
				and	x.dt_referencia	= dt_mes_w)
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	coalesce(a.dt_cancelamento::text, '') = ''
	and	a.dt_contratacao	<= dt_fim_mes_atual_w;/*Alterei para data de contratacao, para buscar os beneficiarios ate sua data de contratacao e nao pela liberacao*/
C02 CURSOR FOR
	SELECT	a.nr_seq_plano
	from	pls_mensalidade_segurado a,
		pls_mensalidade b
	where	a.nr_seq_mensalidade	= b.nr_sequencia
	and	a.nr_seq_segurado	= nr_seq_segurado_w
	and	a.dt_mesano_referencia	= dt_mes_w
	and	coalesce(b.ie_cancelamento::text, '') = '';
	
C03 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_segurado_historico
	where	nr_seq_segurado	= nr_seq_segurado_w
	and	ie_tipo_historico = '4'
	and	dt_historico	<= dt_mes_final_w
	order by nr_sequencia desc;
	

BEGIN

dt_mes_w	:= dt_ano_p;
dt_mes_final_w	:= add_months(dt_ano_p,11);
dt_mes_atual_w	:= trunc(clock_timestamp(),'month');

if (dt_mes_final_w >= clock_timestamp()) then
	dt_mes_final_w := dt_mes_atual_w;
end if;

while(dt_mes_w <= dt_mes_final_w) loop
	begin
	dt_fim_mes_atual_w	:= last_day(dt_mes_w);
	dt_mes_aux_w		:= trunc(dt_mes_w,'Month');
	
	open C01;
	loop
	fetch C01 into	
		nr_seq_segurado_w,
		dt_rescisao_w,
		nr_seq_plano_w,
		dt_contratacao_w,
		dt_nascimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		ie_possui_mensalidade_w	:= 'N';
		ie_alterou_plano_w	:= 'N';
		
		if	((dt_rescisao_w > dt_mes_w) or (coalesce(dt_rescisao_w::text, '') = '')) and (dt_contratacao_w <= dt_fim_mes_atual_w) then
			
			/*Verifica se no mes o beneficiario possui um historico com rescisao ou migracao*/

			select	count(1)
			into STRICT	qt_registros_w
			from	pls_segurado_historico
			where	nr_seq_segurado	= nr_seq_segurado_w
			and	trunc(coalesce(dt_ocorrencia_sib,dt_historico),'month') = dt_mes_aux_w
			and	ie_tipo_historico in ('1','5')  LIMIT 1;
			
			/*Caso houver, entao verifica se no mes ele esta ativo ou inativo*/

			if (qt_registros_w > 0) then
				select	max(z.ie_tipo_historico)
				into STRICT	ie_tipo_historico_w
				from (	SELECT	max(x.nr_sequencia) nr_seq_historico,
							trunc(coalesce(x.dt_ocorrencia_sib,x.dt_historico),'month') dt_ocorrencia_sib,
							x.nr_seq_segurado
						from   pls_segurado_historico x
						where  x.ie_tipo_historico in ('1','2','5')
						group by x.nr_seq_segurado, trunc(coalesce(x.dt_ocorrencia_sib,x.dt_historico),'month')) b,
						pls_segurado_historico z
				where	z.nr_sequencia = b.nr_seq_historico
				and	b.nr_seq_segurado	= nr_seq_segurado_w
				and	trunc(coalesce(z.dt_ocorrencia_sib,z.dt_historico),'month') = dt_mes_aux_w;
				
				if (ie_tipo_historico_w <> '2') then
					goto final;
				end if;
			end if;
			
			/*Verifica a ultima data de inativacao*/

			select	max(dt_ocorrencia_sib)
			into STRICT	dt_ultimo_hist_inativo_w
			from	pls_segurado_historico
			where	nr_seq_segurado	= nr_seq_segurado_w
			and	trunc(coalesce(dt_ocorrencia_sib,dt_historico),'month') <= dt_mes_aux_w
			and	ie_tipo_historico in ('1','5');
			
			if (dt_ultimo_hist_inativo_w IS NOT NULL AND dt_ultimo_hist_inativo_w::text <> '') then
			
				/*Verifica a ultima data de reativacao*/

				select	max(dt_ocorrencia_sib)
				into STRICT	dt_ultimo_hist_reativacao_w
				from	pls_segurado_historico
				where	nr_seq_segurado	= nr_seq_segurado_w
				and	trunc(coalesce(dt_ocorrencia_sib,dt_historico),'month') <= dt_mes_aux_w
				and	ie_tipo_historico = '2';
				
				/*Caso possuir a data de reativalcao maior que a data de rescisao, entao o beneficiario esta inativo*/

				if	((dt_ultimo_hist_inativo_w > dt_ultimo_hist_reativacao_w) or (coalesce(dt_ultimo_hist_reativacao_w::text, '') = '')) then
					goto final;
				end if;
			end if;
			
			select 	count(1)
			into STRICT	qt_registros_w
			from	pls_segurado_alt_plano
			where	nr_seq_segurado	= nr_seq_segurado_w
			and	ie_situacao = 'A'
			and	trunc(dt_alteracao,'Month') 	= dt_mes_aux_w  LIMIT 1;
			
			if (qt_registros_w = 0) then
				nr_seq_plano_atual_w	:= nr_seq_plano_w;
			else
				open C02;
				loop
				fetch C02 into	
					nr_seq_plano_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					ie_possui_mensalidade_w	:= 'S';
					nr_seq_plano_atual_w	:= nr_seq_plano_w;
					end;
				end loop;
				close C02;
				
				if (ie_possui_mensalidade_w = 'N') then
					begin
					open C03;
					loop
					fetch C03 into	
						nr_seq_historico_w;
					EXIT WHEN NOT FOUND; /* apply on C03 */
					end loop;
					close C03;
					
					if (coalesce(nr_seq_historico_w,0) > 0) then
						select	replace(ds_observacao,'Alterado produto de: ','')
						into STRICT	ds_observacao_w
						from	pls_segurado_historico
						where	nr_sequencia	= nr_seq_historico_w;

						nr_seq_plano_atual_w	:=	substr(ds_observacao_w,1,position(' ' in ds_observacao_w) -1);
					else	
						nr_seq_plano_atual_w	:= nr_seq_plano_w;
					end if;
					exception
					when others then
						nr_seq_plano_atual_w	:= nr_seq_plano_w;
					end;
				end if;
			end if;
			
			select	max(nr_seq_plano)
			into STRICT	nr_seq_plano_ant_w
			from	w_pls_benef_movto_mensal
			where	nr_seq_segurado	= nr_seq_segurado_w
			and	dt_referencia	= add_months(dt_mes_w,-1)  LIMIT 1;
			
			if (coalesce(nr_seq_plano_ant_w,0) > 0) then
				if (nr_seq_plano_ant_w <> nr_seq_plano_atual_w) then
					ie_alterou_plano_w	:= 'S';
				end if;
			end if;
			
			select	nextval('w_pls_benef_movto_mensal_seq')
			into STRICT	nr_seq_w_pls_benef_w
			;
			
			qt_idade_w	:= trunc(months_between(dt_fim_mes_atual_w, trunc(dt_nascimento_w,'month')) / 12);
		
			insert into w_pls_benef_movto_mensal(	nr_sequencia, dt_referencia, cd_estabelecimento, nr_seq_segurado, dt_atualizacao,
								nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_plano, ie_alterou_plano,qt_idade)
							values (	nr_seq_w_pls_benef_w, dt_mes_w, cd_estabelecimento_p, nr_seq_segurado_w, clock_timestamp(),
								nm_usuario_p, clock_timestamp(), nm_usuario_p, nr_seq_plano_atual_w, ie_alterou_plano_w,qt_idade_w);
		end if;
		
		if (mod(c01%rowCount,1000) = 0) then
			commit;
		end if;
		
		<<final>>
		ie_possui_mensalidade_w	:= 'N';
		
		end;
	end loop;
	close C01;
	
	dt_mes_w	:= add_months(dt_mes_w,1);
	end;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_w_benef_movto_mensal ( dt_ano_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

