-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_faturamento ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ds_mensagem_p INOUT text, ie_tipo_erro_p INOUT text) AS $body$
DECLARE


ds_mensagem_w			varchar(255);
ie_inconsist_w			varchar(1);
ie_mes_fechado_w		varchar(1) := 'N';
qt_lote_fat_w			integer;
dt_geracao_w			timestamp;
dt_mesano_competencia_w		timestamp;
ie_aplica_arredondamento_w	pls_lote_faturamento.ie_aplicar_arredondamento%type;
ie_tipo_lote_w			pls_lote_faturamento.ie_tipo_lote%type;
dt_inicio_geracao_w		timestamp;
dt_fim_geracao_w		timestamp;
qt_registro_w			integer;
ds_erro_w			varchar(4000);
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type := 'N';
ie_exception_w			varchar(1);



BEGIN
select	coalesce(max(ie_novo_pos_estab),'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false;

ie_exception_w := 'N';

if (ie_novo_pos_estab_w = 'S') then

	begin
	CALL pls_faturamento_pck.gerar_lote_faturamento(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	exception
		when others then
		
			-- Mensagem ja deve vir tratada da rotina
			ds_erro_w	:= substr(sqlerrm, 0, 4000);
			ds_mensagem_p	:= ds_erro_w;			
			CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
	end;
else
	select	count(1)
	into STRICT	qt_registro_w
	from 	user_constraints
	where 	constraint_name = 'PLSCOVB_PLSLOFA_FK'
	and	status = 'DISABLED';

	if (qt_registro_w > 0) then
		-- A integridade entre o lote de faturamento e o item de contas medicas esta desabilitada, verifique com o suporte. (PLSCOVB_PLSLOFA_FK)
		CALL wheb_mensagem_pck.exibir_mensagem_abort(817971);
	end if;
	
	
	CALL gravar_processo_longo('Gerando lote de faturamento' ,'PLS_GERAR_LOTE_FATURAMENTO', 0);

	-- Limpar registros com sujeira
	CALL pls_desfazer_lote_faturamento( nr_seq_lote_p, nm_usuario_p);
	
	
	CALL pls_gerar_fatura_log( nr_seq_lote_p, null, null, 'PLS_GERAR_LOTE_FATURAMENTO', 'GL', 'S', nm_usuario_p);

	dt_geracao_w		:= trunc(clock_timestamp(),'dd');
	dt_inicio_geracao_w	:= clock_timestamp();	

	-- -------------------------------------- 1 - Verificar se existe competencia para o mes do lote.  --------------------------------------
	select	count(1),
		max(trunc(a.dt_mesano_referencia,'month'))
	into STRICT	qt_lote_fat_w,
		dt_mesano_competencia_w
	from	pls_lote_faturamento a
	where	a.nr_sequencia = nr_seq_lote_p
	and	exists (SELECT	1
			from	pls_competencia b
			where	trunc(b.dt_mes_competencia,'month') = trunc(a.dt_mesano_referencia,'month'))  LIMIT 1;


	select	coalesce(max(ie_tipo_lote), 'C')
	into STRICT	ie_tipo_lote_w
	from	pls_lote_faturamento
	where	nr_sequencia = nr_seq_lote_p;

	if (qt_lote_fat_w > 0) then
		begin
			select	'S'
			into STRICT	ie_mes_fechado_w
			from	pls_competencia b
			where	trunc(b.dt_mes_competencia,'month') = dt_mesano_competencia_w
			and	(b.dt_fechamento IS NOT NULL AND b.dt_fechamento::text <> '')  LIMIT 1;
		exception
			when no_data_found then
			ie_mes_fechado_w := 'N';
		end;
	end if;

	select	coalesce(ie_aplicar_arredondamento, 'N') ie_aplicar_arredondamento
	into STRICT	ie_aplica_arredondamento_w
	from	pls_lote_faturamento a
	where	a.nr_sequencia = nr_seq_lote_p;	

	if (qt_lote_fat_w > 0) and (ie_mes_fechado_w = 'N') then
		begin
			
			-- IMPORTANTE SER EXECUTADA ANTES DA GERACAO
			CALL pls_faturamento_pck.verifica_lote_sem_session(cd_estabelecimento_p);
			
			-- Marca o inicio do processo
			CALL pls_faturamento_pck.inicializa_geracao_lote(nr_seq_lote_p, nm_usuario_p);

			-- -------------------------------------- 2 - Classificar em quais eventos vai entrar cada proc/mat.  -------------------------------------- */
			CALL pls_obter_eventos_lote_fat(nr_seq_lote_p,cd_estabelecimento_p,dt_geracao_w,nm_usuario_p);

			-- -------------------------------------- 3 - Verificar a existencia de contas que entram no lote (pelas datas) porem nao incidiram em nenhum evento.
			-- Se tiver alguma na lista, nem chega a gerar o lote.  Certificar se algum proc/mat nao ficou classificado com um evento que nao entra nesta regra de faturamento.
			-- (A conta pode estar em duas faturas separadas, porem nao em dois lotes separados). Gerar inconsistencia e nao deixar fechar. --------------------------------------
			ie_inconsist_w := pls_consistir_lote_fat(nr_seq_lote_p, dt_geracao_w, nm_usuario_p, ie_inconsist_w, ie_tipo_lote_w);

			-- -------------------------------------- 4 - Gerar o lote para que entre todos os itens dos eventos da regra de faturamento.
			-- Deve ser verificado pelo campo do Evento, se o evento deve ou nao quebrar em nova fatura (uma fatura para cada evento). --------------------------------------
			CALL pls_gerar_faturas_lote(nr_seq_lote_p,cd_estabelecimento_p,nm_usuario_p);

			-- -------------------------------------- 5 - Chamar rotina de atualizacao de valores do lote.  --------------------------------------
			CALL pls_atualizar_vl_lote_fatura(nr_seq_lote_p,nm_usuario_p, 'N', 'S');

			-- -------------------------------------- 6 - Dividir as faturas de acordo com a forma de impedimento de cobranca (OPS - Faturamento -> Cadastros -> Regra faturamento -> Forma de impedimento de cobranca)--------------------------------------
			CALL pls_dividir_imped_cobr_fat(nr_seq_lote_p,cd_estabelecimento_p,nm_usuario_p);
			
			-- -------------------------------------- 7 - Dividir as faturas de acordo com a regra de protocolo (importante ser executado antes das demais regras de divisao --------------------------------------
			CALL pls_faturamento_pck.dividir_faturas_prot(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);

			-- -------------------------------------- 8 - Dividir as faturas de acordo com a regra de divisao de empresa --------------------------------------
			CALL pls_dividir_faturas_empresas(nr_seq_lote_p,cd_estabelecimento_p,nm_usuario_p);

			-- -------------------------------------- 9 - Dividir as faturas de acordo com o prestador. --------------------------------------
			CALL pls_dividir_faturas_prest(nr_seq_lote_p,cd_estabelecimento_p,nm_usuario_p);
			
			-- -------------------------------------- 10 - Dividir as faturas de acordo com o pagodor do beneficiario remido. --------------------------------------
			CALL pls_dividir_fat_benef_remido(nr_seq_lote_p,cd_estabelecimento_p,nm_usuario_p, 'A');
			
			-- -------------------------------------- 11 - Dividir as faturas de acordo com a regra divisao de taxa adiministrativa -----------------------------
			CALL pls_dividir_fatura_taxa(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p, 'A');
	
			-- -------------------------------------- 12 - Conceito fatura com conta fechada, as contas com guia de referencia iguais devem ser sempre faturadas juntas. -----------------------------
			-- atualmente nao existe uma definicao sobre o comportamento da conta fechada e o lote de aviso, entao a conta fechada so e aplicada quando o lote NAO for de aviso.
			if (ie_tipo_lote_w != 'A') then

				CALL pls_tratar_fat_conta_fechada( nr_seq_lote_p, null, cd_estabelecimento_p, nm_usuario_p);
			end if;

			-- LOG
			CALL pls_gerar_fatura_log(nr_seq_lote_p,null,null,'Antes PLS_DIVIDIR_FATURAS_LOTE','VA','N',nm_usuario_p);

			-- -------------------------------------- 13 - Dividir as faturas de acordo com a regra de valor maximo e quantidade de contas maxima. --------------------------------------
			CALL pls_dividir_faturas_lote(nr_seq_lote_p,cd_estabelecimento_p,nm_usuario_p);

			-- LOG
			CALL pls_gerar_fatura_log(nr_seq_lote_p,null,null,'Depois PLS_DIVIDIR_FATURAS_LOTE','VA','N',nm_usuario_p);

			-- -------------------------------------- 14 - Limpar faturas e eventos que nao possuem mais registros, devido as rotinas de divisao de fatura --------------------------------------
			CALL pls_limpar_faturas_vazias_lote(nr_seq_lote_p,cd_estabelecimento_p,nm_usuario_p);

			if (ie_aplica_arredondamento_w = 'S') then
				--Ajuste do valor das taxas nos eventos
				CALL pls_ajustar_tx_admin_lote(nr_seq_lote_p, nm_usuario_p);
				commit;
			end if;
			
			-- ajustar arredondamento de taxa administrativa
			CALL pls_ajuste_vl_taxa_div_fat(nr_seq_lote_p,cd_estabelecimento_p,nm_usuario_p, 'A');

			dt_fim_geracao_w	:= clock_timestamp();
			
			-- SEMPRE SER A ULTIMA ROTINA, TEM QUE ATUALIZAR OS VALORES
			CALL pls_atualizar_vl_lote_fatura(nr_seq_lote_p,nm_usuario_p, 'N', 'S');
				
			update	pls_fatura a
			set	a.ie_impedimento_cobranca = 'P'
			where	a.nr_seq_lote = nr_seq_lote_p
			and	exists (	SELECT	b.nr_seq_fatura
					from	pls_fatura_motivo_imp_cob b
					where	a.nr_sequencia	= b.nr_seq_fatura);

			update	pls_lote_faturamento
			set	dt_geracao 		= clock_timestamp(),
				nm_usuario_ger_lote	= nm_usuario_p,
				nm_id_sid		 = NULL,
				nm_id_serial		 = NULL,
				ie_status		= 3, -- Finalizado
				dt_fim_ger_lote		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
			where	nr_sequencia		= nr_seq_lote_p;
			
			-- Insere o tempo de geracao do lote no historico
			update	pls_fatura_log
			set	ds_log		= ds_log||' - Tempo de geracao: '||pls_obter_dif_data_horario(dt_inicio_geracao_w,dt_fim_geracao_w)
			where	nr_sequencia	= (	SELECT	max(nr_sequencia)
							from 	pls_fatura_log
							where 	ie_opcao = 'GL'
							and 	nr_seq_lote = nr_seq_lote_p	);
			commit;
		exception
			when others then
			begin
				CALL pls_desfazer_lote_faturamento(nr_seq_lote_p, nm_usuario_p);
				
				ds_mensagem_w	:= obter_desc_expressao(496286);
				ds_mensagem_p	:= ds_mensagem_w;			
				ds_erro_w	:= substr(sqlerrm||dbms_utility.format_error_backtrace, 0, 4000);
				
				ie_exception_w  := 'S';
				
				CALL wheb_mensagem_pck.exibir_mensagem_abort(737118, 'ERRO='|| ds_erro_w);
			end;
		end;
	end if;

	if (qt_lote_fat_w = 0) then
		ds_mensagem_w	:= 	'Lote nao gerado, pois nao existe competencia para o mes deste lote.' || chr(13) ||
					'Favor verificar a regra de competencia, em OPS - Gestao de Operadoras -> Competencias -> Mes competencia.';
	elsif (coalesce(ie_mes_fechado_w, 'N') = 'S') then
		ds_mensagem_w	:= 	'Lote nao gerado, pois a competencia para o mes deste lote esta fechada.' || chr(13) ||
					'Favor verificar a regra de competencia, em OPS - Gestao de Operadoras -> Competencias -> Mes competencia.';
	elsif (coalesce(ie_inconsist_w,'N') = 'S') then
		ds_mensagem_w	:= 	'Lote gerado com inconsistencia(s), o mesmo nao podera ser fechado.' || chr(13) ||
					'Parametro [10] - Permite fechar lotes de faturamento que possuam inconsistencias.';
		ie_tipo_erro_p	:=	'1';
	elsif (coalesce(ie_exception_w,'N') = 'N') then		
		ds_mensagem_w	:=	'Lote gerado com sucesso.';
	end if;
end if;

ds_mensagem_p	:= ds_mensagem_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_faturamento ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ds_mensagem_p INOUT text, ie_tipo_erro_p INOUT text) FROM PUBLIC;

