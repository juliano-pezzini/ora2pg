-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pfcs_exame_lab_qt_result ( nr_seq_indicator_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


   qt_total_above_rule_w		bigint := 0;
   qt_total_below_rule_w		bigint := 0;
   ie_over_threshold_w		    varchar(1) := 'N';
   pfcs_panel_detail_seq_w		pfcs_panel_detail.nr_sequencia%type;
   nr_seq_panel_w			    pfcs_panel.nr_sequencia%type;
   nr_seq_operational_level_w   pfcs_operational_level.nr_sequencia%type;

c_detail_rapid_test CURSOR FOR
   SELECT substr(dominio_pck.obter_valor_dominio(3966,a.ie_exame_pac),1,50) nm_exame,
      '' nr_seq_exame,
      b.cd_pessoa_fisica cd_paciente,
      obter_nome_pf(b.cd_pessoa_fisica) nm_paciente,
      a.dt_liberacao dt_aprovacao,
      '' ie_status_exame,
      a.NM_USUARIO_LIBERACAO nm_usuario_aprovacao,
      b.nr_atendimento,
      '' nr_prescricao,
      '' dt_prescricao,
      '' dt_liberacao_prescr,
      b.cd_medico_resp,
      obter_nome_pf(b.cd_medico_resp) nm_medico,
      'S' ie_teste_rapido,
      obter_dif_data(a.dt_liberacao, clock_timestamp(), 'S') ie_tempo_apos_confirmacao,
      a.dt_liberacao dt_liberacao,
      UPPER(a.ds_resultado) ds_resultado,
      obter_dados_pf(a.cd_pessoa_fisica,'DN') dt_birthdate,
      obter_dados_pf(a.cd_pessoa_fisica,'SE') sexo,
	  substr(Obter_Dados_Atendimento(b.nr_atendimento,'PSET'),1,255) ds_setor_paciente,
      substr(Obter_Dados_Atendimento(b.nr_atendimento,'LEI'),1,255) ds_leito,
        pfcs_get_age_range(to_date(obter_dados_pf(a.cd_pessoa_fisica,'DN'),'DD/MM/YYYY')) ds_age_range
   FROM paciente_exame a,
     atendimento_paciente b
   WHERE a.ie_exame_pac = 'COVID-19'
      AND (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
      AND coalesce(a.dt_inativacao::text, '') = ''
      AND (a.ds_resultado IS NOT NULL AND a.ds_resultado::text <> '')
      AND a.cd_pessoa_fisica = b.cd_pessoa_fisica
	  and a.nr_sequencia = (SELECT max(t.nr_sequencia) from paciente_exame t where a.cd_pessoa_fisica = t.cd_pessoa_fisica  and  t.ie_exame_pac = 'COVID-19' )
      AND	b.nr_atendimento	= (
         SELECT MAX(x.nr_atendimento)
            FROM	atendimento_paciente x
            WHERE	x.cd_pessoa_fisica	= a.cd_pessoa_fisica
                AND  x.cd_estabelecimento = b.cd_estabelecimento
                AND  a.dt_liberacao between x.dt_entrada and coalesce(x.dt_alta, clock_timestamp()))
      AND b.cd_estabelecimento = cd_estabelecimento_p;

c_detail_full_test CURSOR FOR
   SELECT obter_desc_exame_lab(c.nr_seq_exame,null,null,null) nm_exame,
      c.nr_seq_exame nr_seq_exame,
      b.cd_pessoa_fisica cd_paciente,
      obter_nome_pf(b.cd_pessoa_fisica) nm_paciente,
      e.dt_aprovacao dt_aprovacao,
      c.ie_status_atend ds_status_exame,
      e.nm_usuario_aprovacao,
      b.nr_atendimento,
      b.nr_prescricao nr_prescricao,
      b.dt_prescricao,
      b.dt_liberacao dt_liberacao_prescr,
      b.cd_medico cd_medico_resp,
      obter_nome_pf(b.cd_medico) nm_medico,
      'N' ie_teste_rapido,
      UPPER(e.ds_resultado) ds_resultado,
      obter_dif_data(e.dt_aprovacao, clock_timestamp(), 'S') ie_tempo_apos_confirmacao,
      obter_dados_pf(a.cd_pessoa_fisica,'DN') dt_birthdate,
      obter_dados_pf(a.cd_pessoa_fisica,'SE') sexo,
	  substr(Obter_Dados_Atendimento(b.nr_atendimento,'PSET'),1,255) ds_setor_paciente,
      substr(Obter_Dados_Atendimento(b.nr_atendimento,'LEI'),1,255) ds_leito,
        pfcs_get_age_range(to_date(obter_dados_pf(a.cd_pessoa_fisica,'DN'),'DD/MM/YYYY')) ds_age_range
    FROM  pessoa_fisica a,
      prescr_medica b,
      prescr_procedimento c,
      exame_lab_resultado d,
      exame_lab_result_item e,
      equipamento_lab f,
      lab_exame_equip g
    WHERE a.cd_pessoa_fisica = b.cd_pessoa_fisica
      AND b.nr_prescricao = c.nr_prescricao
      AND c.nr_sequencia = e.nr_seq_prescr
      AND b.nr_prescricao = d.nr_prescricao
      AND d.nr_seq_resultado = e.nr_seq_resultado
      AND f.cd_equipamento = g.cd_equipamento
      AND UPPER(f.ds_sigla) = 'COVID19'
      AND g.nr_seq_exame = c.nr_seq_exame
      AND (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
      AND c.ie_status_atend >= 35
      and b.cd_estabelecimento = cd_estabelecimento_p
      and b.dt_prescricao > to_date('01/01/2020','dd/mm/yyyy')
	  AND (F.DS_SIGLA IS NOT NULL AND F.DS_SIGLA::text <> '')
	  AND (C.NR_SEQ_EXAME IS NOT NULL AND C.NR_SEQ_EXAME::text <> '')
      AND (C.CD_MATERIAL_EXAME IS NOT NULL AND C.CD_MATERIAL_EXAME::text <> '')
      AND coalesce(C.IE_SUSPENSO,'N') = 'N';
BEGIN
   --qt_total_above_rule_w := pfcs_obter_qt_total_result( 'COVID-19', 'COVID19', 'pos', cd_estabelecimento_p);
   --qt_total_below_rule_w := pfcs_obter_qt_total_result( 'COVID-19', 'COVID19', 'neg', cd_estabelecimento_p);
nr_seq_operational_level_w := pfcs_get_structure_level(
    cd_establishment_p => cd_estabelecimento_p,
    ie_level_p => 'O',
    ie_info_p => 'C');


FOR c_detail_rapid_test_w IN c_detail_rapid_test LOOP
   BEGIN
      SELECT	nextval('pfcs_panel_detail_seq')
      INTO STRICT	pfcs_panel_detail_seq_w
;

      IF (substr(c_detail_rapid_test_w.ds_resultado,1,7) = substr(upper(obter_desc_expressao(296109)),1,7)) THEN
         ie_over_threshold_w := 'S';
		 qt_total_above_rule_w := qt_total_above_rule_w+1;
      ELSE
         ie_over_threshold_w := 'N';
		 qt_total_below_rule_w := qt_total_below_rule_w+1;
      END IF;

      INSERT INTO pfcs_panel_detail(
         nr_sequencia,
         nm_usuario,
         dt_atualizacao,
         nm_usuario_nrec,
         dt_atualizacao_nrec,
         ie_situation,
         nr_seq_indicator,
         nr_seq_operational_level)
      VALUES (
         pfcs_panel_detail_seq_w,
         nm_usuario_p,
         clock_timestamp(),
         nm_usuario_p,
         clock_timestamp(),
         'T',
         nr_seq_indicator_p,
         nr_seq_operational_level_w);

      INSERT INTO pfcs_detail_patient(
         nr_sequencia,
         nm_usuario,
         dt_atualizacao,
         nm_usuario_nrec,
         dt_atualizacao_nrec,
         nr_seq_detail,
         id_patient,
         nm_patient,
         ds_gender,
         ds_classification,
         dt_birthdate,
         ds_age_range,
		 DS_CURRENT_LOCATION,
		DS_BED_ASSIGNED,
		nr_encounter,
         ie_over_threshold)
      VALUES (
         nextval('pfcs_detail_patient_seq'),
         nm_usuario_p,
         clock_timestamp(),
         nm_usuario_p,
         clock_timestamp(),
         pfcs_panel_detail_seq_w,
         c_detail_rapid_test_w.cd_paciente,
         c_detail_rapid_test_w.nm_paciente,
         c_detail_rapid_test_w.sexo,
         c_detail_rapid_test_w.ie_teste_rapido,
         to_date(c_detail_rapid_test_w.dt_birthdate, 'DD/MM/YYYY'),
         c_detail_rapid_test_w.ds_age_range,
		 c_detail_rapid_test_w.ds_setor_paciente,
		 c_detail_rapid_test_w.ds_leito,
		 c_detail_rapid_test_w.nr_atendimento,
         ie_over_threshold_w);

      INSERT INTO pfcs_detail_exam_lab(
         nr_sequencia,
         dt_atualizacao,
         nm_usuario,
         dt_atualizacao_nrec,
         nm_usuario_nrec,
         nr_seq_exame,
         nm_exam,
         ie_status_atend,
         dt_approval,
         nm_user_approval,
         nr_request,
         dt_request,
         dt_release_request,
         ds_result,
         ie_fast_result_check,
         nr_seq_detail)
      VALUES (
         nextval('pfcs_detail_exam_lab_seq'),
         clock_timestamp(),
         nm_usuario_p,
         clock_timestamp(),
         nm_usuario_p,
         c_detail_rapid_test_w.nr_seq_exame,
         c_detail_rapid_test_w.nm_exame,
         c_detail_rapid_test_w.ie_status_exame,
         c_detail_rapid_test_w.dt_aprovacao,
         c_detail_rapid_test_w.nm_usuario_aprovacao,
         c_detail_rapid_test_w.nr_prescricao,
         c_detail_rapid_test_w.dt_prescricao,
         c_detail_rapid_test_w.dt_liberacao_prescr,
         c_detail_rapid_test_w.ds_resultado,
         c_detail_rapid_test_w.ie_teste_rapido,
         pfcs_panel_detail_seq_w);
    COMMIT;

	END;
END LOOP;

FOR c_detail_full_test_w IN c_detail_full_test LOOP
   BEGIN
      SELECT	nextval('pfcs_panel_detail_seq')
      INTO STRICT	pfcs_panel_detail_seq_w
;

      IF (substr(c_detail_full_test_w.ds_resultado,1,7) = substr(upper(obter_desc_expressao(296109)),1,7)) THEN
         ie_over_threshold_w := 'S';
		 qt_total_above_rule_w := qt_total_above_rule_w+1;
      ELSE
         ie_over_threshold_w := 'N';
		 qt_total_below_rule_w := qt_total_below_rule_w+1;
      END IF;

      INSERT INTO pfcs_panel_detail(
         nr_sequencia,
         nm_usuario,
         dt_atualizacao,
         nm_usuario_nrec,
         dt_atualizacao_nrec,
         ie_situation,
         nr_seq_indicator,
         nr_seq_operational_level)
      VALUES (
         pfcs_panel_detail_seq_w,
         nm_usuario_p,
         clock_timestamp(),
         nm_usuario_p,
         clock_timestamp(),
         'T',
         nr_seq_indicator_p,
         nr_seq_operational_level_w);

      INSERT INTO pfcs_detail_patient(
         nr_sequencia,
         nm_usuario,
         dt_atualizacao,
         nm_usuario_nrec,
         dt_atualizacao_nrec,
         nr_seq_detail,
         id_patient,
         nm_patient,
         ds_gender,
         ds_classification,
         dt_birthdate,
         ds_age_range,
		 DS_CURRENT_LOCATION,
		 DS_BED_ASSIGNED,
		 nr_encounter,
         ie_over_threshold)
      VALUES (
         nextval('pfcs_detail_patient_seq'),
         nm_usuario_p,
         clock_timestamp(),
         nm_usuario_p,
         clock_timestamp(),
         pfcs_panel_detail_seq_w,
         c_detail_full_test_w.cd_paciente,
         c_detail_full_test_w.nm_paciente,
         c_detail_full_test_w.sexo,
         c_detail_full_test_w.ie_teste_rapido,
         to_date(c_detail_full_test_w.dt_birthdate, 'DD/MM/YYYY'),
         c_detail_full_test_w.ds_age_range,
		 c_detail_full_test_w.ds_setor_paciente,
		 c_detail_full_test_w.ds_leito,
		 c_detail_full_test_w.nr_atendimento,
         ie_over_threshold_w);

      INSERT INTO pfcs_detail_exam_lab(
         nr_sequencia,
         dt_atualizacao,
         nm_usuario,
         dt_atualizacao_nrec,
         nm_usuario_nrec,
         nr_seq_exame,
         nm_exam,
         ie_status_atend,
         dt_approval,
         nm_user_approval,
         nr_request,
         dt_request,
         dt_release_request,
         ds_result,
         ie_fast_result_check,
		 nr_seq_detail)
      VALUES (
         nextval('pfcs_detail_exam_lab_seq'),
         clock_timestamp(),
         nm_usuario_p,
         clock_timestamp(),
         nm_usuario_p,
         c_detail_full_test_w.nr_seq_exame,
         c_detail_full_test_w.nm_exame,
         c_detail_full_test_w.ds_status_exame,
         c_detail_full_test_w.dt_aprovacao,
         c_detail_full_test_w.nm_usuario_aprovacao,
         c_detail_full_test_w.nr_prescricao,
         c_detail_full_test_w.dt_prescricao,
         c_detail_full_test_w.dt_liberacao_prescr,
         c_detail_full_test_w.ds_resultado,
         c_detail_full_test_w.ie_teste_rapido,
		 pfcs_panel_detail_seq_w
         );
        COMMIT;
	END;
END LOOP;


 := pfcs_pck.pfcs_generate_results(
		vl_indicator_p => qt_total_above_rule_w, vl_indicator_aux_p => qt_total_below_rule_w, nr_seq_indicator_p => nr_seq_indicator_p, nr_seq_operational_level_p => nr_seq_operational_level_w, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => nr_seq_panel_w);

CALL pfcs_pck.pfcs_update_detail(
		nr_seq_indicator_p => nr_seq_indicator_p,
		nr_seq_panel_p => nr_seq_panel_w,
		nr_seq_operational_level_p => nr_seq_operational_level_w,
		nm_usuario_p => nm_usuario_p);

CALL pfcs_pck.pfcs_activate_records(
		nr_seq_indicator_p => nr_seq_indicator_p,
		nr_seq_operational_level_p => nr_seq_operational_level_w,
		nm_usuario_p => nm_usuario_p);


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_exame_lab_qt_result ( nr_seq_indicator_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

