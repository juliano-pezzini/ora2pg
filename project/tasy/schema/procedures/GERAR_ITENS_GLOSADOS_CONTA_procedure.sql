-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_itens_glosados_conta ( nr_interno_conta_p bigint, nr_seq_ret_item_p bigint, nm_usuario_p text, ie_gerar_glosa_p text) AS $body$
DECLARE


-- variáveis em ordem alfabética
count_w				bigint;
cd_material_w			bigint;
cd_material_convenio_w		varchar(255);
cd_medico_participante_w		varchar(255);
cd_medico_executor_w		varchar(255);
cd_procedimento_convenio_w	varchar(255);
cd_procedimento_w		bigint;
cd_setor_atendimento_w		bigint;
ie_emite_conta_w			varchar(255);
ie_origem_proced_w		bigint;
nr_seq_material_w			bigint;
nr_seq_partic_w			bigint;
nr_seq_procedimento_w		bigint;
qt_material_w			double precision;
vl_glosa_w			double precision;
qt_procedimento_w			double precision;
vl_material_w			double precision;
vl_pago_digitado_w			double precision;
vl_procedimento_w			double precision;
vl_saldo_mat_w			double precision;
vl_saldo_proc_w			double precision;
vl_unitario_w			double precision;
qt_glosado_w			bigint;
qt_registros_w			bigint;
qt_glosar_w			double precision;
qt_glosa_w			bigint;
ie_filtrar_itens_guia_w		varchar(255);
nr_doc_convenio_w		varchar(255);
cd_estabelecimento_w		bigint;
ie_valor_medico_partic_w		varchar(10) := 'N';
ie_geracao_itens_conta_w		varchar(1) := 'S';
ie_geracao_pacotes_w		varchar(2);
ie_gerar_item_w			varchar(1) := 'S';
ie_participante_w		varchar(1) := 'S';
nr_seq_proc_pacote_w		procedimento_paciente.nr_seq_proc_pacote%type;
nr_seq_orig_audit_w		material_Atend_paciente.nr_seq_orig_audit%type;
qt_mat_audit_w			material_Atend_paciente.qt_material%type;
qt_saldo_mat_w			material_Atend_paciente.qt_material%type;
vl_cobrado_w			material_Atend_paciente.vl_material%type;

qt_glosar_est_w			material_Atend_paciente.qt_material%type;
vl_cobrado_est_w		material_Atend_paciente.vl_material%type;

ie_gerar_custo_operacional_w varchar(1) := 'S';
ie_custo_operacional_w varchar(1) := 'N';

c01 CURSOR FOR
SELECT	a.cd_procedimento,
	a.ie_origem_proced,
	a.cd_procedimento_convenio,
	a.nr_sequencia,
	null,
	a.ie_emite_conta,
	a.vl_procedimento,
	a.qt_procedimento,
	a.cd_medico_executor,
	CASE WHEN ie_gerar_glosa_p='S' THEN obter_glosa_item_procmat(a.nr_sequencia, null, 3, null)  ELSE 0 END ,
	a.nr_seq_proc_pacote,
  'N'
from	procedimento_paciente a
where	not exists (SELECT	1
	from	convenio_retorno_glosa x
	where	x.nr_seq_propaci	= a.nr_sequencia
	and	x.nr_seq_ret_item	= nr_seq_ret_item_p)
and	a.nr_interno_conta	= nr_interno_conta_p
and	a.cd_procedimento	= cd_procedimento_w
and 	not exists (select	1
			from 	procedimento_participante x
			where	x.nr_sequencia	= a.nr_sequencia)
and	((coalesce(a.nr_doc_convenio,Wheb_mensagem_pck.get_Texto(306761))  = coalesce(nr_doc_convenio_w, Wheb_mensagem_pck.get_Texto(306761))) or ie_filtrar_itens_guia_w = 'N')

union

select	a.cd_procedimento,
	a.ie_origem_proced,
	a.cd_procedimento_convenio,
	a.nr_sequencia,
	null,
	a.ie_emite_conta,
	CASE WHEN ie_valor_medico_partic_w='S' THEN a.vl_medico  ELSE a.vl_procedimento END ,
	a.qt_procedimento,
	a.cd_medico_executor,
	CASE WHEN ie_gerar_glosa_p='S' THEN obter_glosa_item_procmat(a.nr_sequencia, null, 3, null)  ELSE 0 END ,
	a.nr_seq_proc_pacote,
  'N'
from	procedimento_paciente a
where	not exists (select	1
	from	convenio_retorno_glosa x
	where	x.nr_seq_propaci	= a.nr_sequencia
	and	x.nr_seq_ret_item	= nr_seq_ret_item_p
  and coalesce(x.ie_custo_operacional,'N') = 'N'
  and coalesce(x.nr_seq_partic,'0') = '0' )
and	a.nr_interno_conta	= nr_interno_conta_p
and	a.cd_procedimento	= cd_procedimento_w
and 	exists (select	1
		from 	procedimento_participante x
		where	x.nr_sequencia	= a.nr_sequencia)
and	((coalesce(a.nr_doc_convenio,Wheb_mensagem_pck.get_Texto(306761))  = coalesce(nr_doc_convenio_w, Wheb_mensagem_pck.get_Texto(306761))) or ie_filtrar_itens_guia_w = 'N')

union

select	a.cd_procedimento,
	a.ie_origem_proced,
	a.cd_procedimento_convenio,
	a.nr_sequencia,
	null,
	a.ie_emite_conta,
	a.vl_custo_operacional,
	a.qt_procedimento,
	a.cd_medico_executor,
	CASE WHEN ie_gerar_glosa_p='S' THEN obter_glosa_item_procmat(a.nr_sequencia, null, 3, null)  ELSE 0 END ,
	a.nr_seq_proc_pacote,
  'S'
from	procedimento_paciente a
where	not exists (select	1
	from	convenio_retorno_glosa x
	where	x.nr_seq_propaci	= a.nr_sequencia
	and	x.nr_seq_ret_item	= nr_seq_ret_item_p
  and x.ie_custo_operacional = 'S')
and	a.nr_interno_conta	= nr_interno_conta_p
and	a.cd_procedimento	= cd_procedimento_w
and ie_gerar_custo_operacional_w = 'S'
and ie_valor_medico_partic_w = 'S'
and a.vl_custo_operacional > 0.0
and 	exists (select	1
		from 	procedimento_participante x
		where	x.nr_sequencia	= a.nr_sequencia)
and	((coalesce(a.nr_doc_convenio,Wheb_mensagem_pck.get_Texto(306761))  = coalesce(nr_doc_convenio_w, Wheb_mensagem_pck.get_Texto(306761))) or ie_filtrar_itens_guia_w = 'N')

union

select	a.cd_procedimento,
	a.ie_origem_proced,
	a.cd_procedimento_convenio,
	a.nr_sequencia,
	b.nr_seq_partic,
	a.ie_emite_conta,
	b.vl_participante,
	a.qt_procedimento,
	b.cd_pessoa_fisica,
	CASE WHEN ie_gerar_glosa_p='S' THEN obter_glosa_item_procmat(a.nr_sequencia, null, 3, b.nr_seq_partic)  ELSE 0 END ,
	a.nr_seq_proc_pacote,
  'N'
from	procedimento_participante b,
	procedimento_paciente a
where	not exists (select	1
	from	convenio_retorno_glosa x
	where	x.nr_seq_propaci	= a.nr_sequencia
	and	x.nr_seq_ret_item	= nr_seq_ret_item_p)
and	a.nr_sequencia	= b.nr_sequencia
and	a.nr_interno_conta	= nr_interno_conta_p
and	a.cd_procedimento	= cd_procedimento_w
and	((coalesce(a.nr_doc_convenio,Wheb_mensagem_pck.get_Texto(306761))  = coalesce(nr_doc_convenio_w, Wheb_mensagem_pck.get_Texto(306761))) or ie_filtrar_itens_guia_w = 'N')
order by 5 desc, 4;

C02 CURSOR FOR
SELECT	b.cd_material,
	b.cd_material_convenio,
	b.nr_sequencia,
	b.ie_emite_conta,
	b.vl_material,
	b.vl_unitario,
	b.qt_material,
	CASE WHEN ie_geracao_itens_conta_w='T' THEN		CASE WHEN ie_gerar_glosa_p='S' THEN obter_saldo_conpaci_item(null,b.nr_sequencia)  ELSE 0 END   ELSE CASE WHEN ie_gerar_glosa_p='S' THEN obter_glosa_item_procmat(b.nr_sequencia, null, 3, null)  ELSE 0 END  END ,
	b.nr_seq_proc_pacote
from	material_atend_paciente b
where	not exists (SELECT	1
	from	convenio_retorno_glosa x
	where	x.nr_seq_matpaci	= b.nr_sequencia
	and	x.nr_seq_ret_item	= nr_seq_ret_item_p)
and	b.nr_interno_conta 		= nr_interno_conta_p
and	b.cd_material			= cd_material_w
and	qt_material			> 0
and	((coalesce(b.nr_doc_convenio,Wheb_mensagem_pck.get_Texto(306761))  = coalesce(nr_doc_convenio_w, Wheb_mensagem_pck.get_Texto(306761))) or ie_filtrar_itens_guia_w = 'N')
and 	b.cd_setor_atendimento  = coalesce(cd_setor_atendimento_w, b.cd_setor_atendimento)
and	(((ie_geracao_pacotes_w = 'PF') and (coalesce(nr_seq_proc_pacote::text, '') = '')) or (ie_geracao_pacotes_w <> 'PF'))
and	qt_glosar_w > 0;

c03 CURSOR FOR
SELECT	distinct b.cd_material, b.cd_setor_atendimento
from	material_atend_paciente b
where	b.nr_interno_conta = nr_interno_conta_p
order by	1;

C04 CURSOR FOR
SELECT	distinct
	b.cd_procedimento, 
	b.cd_setor_atendimento,
	b.cd_medico_executor
from	procedimento_paciente b
where	b.nr_interno_conta = nr_interno_conta_p
order 	by 1;


BEGIN

begin
dbms_application_info.SET_ACTION('GERAR_ITENS_GLOSADOS_CONTA');


select	max(cd_autorizacao),
	max(cd_estabelecimento)
into STRICT	nr_doc_convenio_w,
	cd_estabelecimento_w
from	convenio_retorno_item a,
	convenio_retorno b
where	a.nr_seq_retorno	= b.nr_sequencia
and	a.nr_sequencia	= nr_seq_ret_item_p;

ie_filtrar_itens_guia_w := obter_param_usuario(27, 104, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_filtrar_itens_guia_w);
ie_valor_medico_partic_w := obter_param_usuario(27, 233, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_valor_medico_partic_w);
ie_geracao_itens_conta_w := obter_param_usuario(27, 292, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_geracao_itens_conta_w);
ie_geracao_pacotes_w := obter_param_usuario(27, 293, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_geracao_pacotes_w);
ie_gerar_custo_operacional_w := obter_param_usuario(27, 236, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_custo_operacional_w);

open C04;
loop
fetch C04 into
	cd_procedimento_w,
	cd_setor_atendimento_w,
	cd_medico_executor_w; --incluido pois nao pode agrupar procedimentos de medicos executores diferentes
EXIT WHEN NOT FOUND; /* apply on C04 */

	qt_glosado_w	:= 0;
	vl_cobrado_w 	:= null;

	--se pelo menos um dos procedimentos tiver participante, nao agrupo esse codigo.
	select	max(CASE WHEN coalesce(obter_participantes_proc(b.nr_sequencia)::text, '') = '' THEN 'N'  ELSE 'S' END )
	into STRICT	ie_participante_w
	from	procedimento_paciente b
	where	b.nr_interno_conta 		= nr_interno_conta_p
	and	b.cd_procedimento		= cd_procedimento_w
	and 	b.cd_setor_atendimento 		= coalesce(cd_setor_atendimento_w, b.cd_setor_atendimento)
	and	coalesce(b.cd_medico_executor, 'X')	= coalesce(cd_medico_executor_w,'X');
	
	--verificando se existe agrupamento do procedimento dentro da conta.
	select	sum(b.qt_procedimento),
		sum(vl_procedimento),
		count(*)
	into STRICT	qt_glosar_w,
		vl_cobrado_w,
		qt_registros_w
	from	procedimento_paciente b
	where	b.nr_interno_conta 		= nr_interno_conta_p	
    and	b.cd_procedimento		= cd_procedimento_w
	and	(((ie_geracao_pacotes_w = 'PF') and ( (coalesce(nr_seq_proc_pacote::text, '') = '') or (nr_seq_proc_pacote = nr_sequencia) )) or (ie_geracao_pacotes_w <> 'PF'))
	and 	b.cd_setor_atendimento 		= coalesce(cd_setor_atendimento_w, b.cd_setor_atendimento)
	and	coalesce(b.cd_medico_executor, 'X')	= coalesce(cd_medico_executor_w,'X');
	
	-- se tiver registro de participante nao pode agrupar os procedimentos
	if (ie_participante_w = 'S') or (qt_registros_w = 1) then
		vl_cobrado_w 	:= null;
	end if;

	open C01;
	loop
	fetch C01 into
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_procedimento_convenio_w,
		nr_seq_procedimento_w,
		nr_seq_partic_w,
		ie_emite_conta_w,
		vl_procedimento_w,
		qt_procedimento_w,
		cd_medico_participante_w,
		vl_saldo_proc_w,
		nr_seq_proc_pacote_w,
    ie_custo_operacional_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		ie_gerar_item_w 	:= 'S';
		vl_pago_digitado_w	:= null;
		
		if (ie_geracao_itens_conta_w = 'S') and
			((coalesce(vl_procedimento_w,0) <= 0) or (coalesce(qt_procedimento_w,0) <= 0))then
			ie_gerar_item_w := 'N';
		end if;
		
		if (ie_gerar_item_w = 'S') then
		
			--PI - Gera tudo
			if (coalesce(ie_geracao_pacotes_w::text, '') = '') and --Default somente procedimentos pacotes e os demais
				(coalesce(nr_seq_proc_pacote_w, nr_seq_procedimento_w) <> nr_seq_procedimento_w)  then
				ie_gerar_item_w := 'N';
			elsif (ie_geracao_pacotes_w = 'PP') and --Somente os procedimentos pacote
				(nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') and (coalesce(nr_seq_proc_pacote_w,nr_seq_procedimento_w) <> nr_seq_procedimento_w) then
				ie_gerar_item_w := 'N';
			elsif (ie_geracao_pacotes_w = 'IF') and (nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') then --Somente fora do pacote
				ie_gerar_item_w := 'N';
			elsif (ie_geracao_pacotes_w = 'PF') then
				ie_gerar_item_w := 'N';
				if ((coalesce(nr_seq_proc_pacote_w::text, '') = '') --fora do pacote
				or (nr_seq_proc_pacote_w = nr_seq_procedimento_w)) then --gatilho
					ie_gerar_item_w := 'S';
				end if;
			elsif (ie_geracao_pacotes_w = 'IP') and (nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') and (coalesce(nr_seq_proc_pacote_w,nr_seq_procedimento_w) = nr_seq_procedimento_w) then --Gerar somente os itens do pacote
				ie_gerar_item_w := 'N';	
			end if;
		end if;
		
        if (ie_custo_operacional_w = 'S') then
        	ie_gerar_item_w := 'S';		
        end if;

		if (ie_gerar_item_w = 'S') and
			((qt_glosado_w < qt_glosar_w) or (nr_seq_partic_w IS NOT NULL AND nr_seq_partic_w::text <> '') or (ie_custo_operacional_w = 'S')) and (vl_procedimento_w > 0.00) then
			
			qt_glosa_w := qt_glosar_w;
			
			if (nr_seq_partic_w IS NOT NULL AND nr_seq_partic_w::text <> '') then
				select	coalesce(sum(vl_glosa),0)
				into STRICT	vl_glosa_w
				from	convenio_retorno_glosa a,
					motivo_glosa b
				where	a.cd_motivo_glosa	= b.cd_motivo_glosa
				and	coalesce(a.ie_acao_glosa,b.ie_acao_glosa) <> 'R'
				and	nr_seq_partic	= nr_seq_partic_w
				and	nr_seq_propaci	= nr_seq_procedimento_w;

				select	count(*)
				into STRICT	count_w
				from	convenio_retorno_glosa a,
					motivo_glosa b
				where	a.cd_motivo_glosa	= b.cd_motivo_glosa
				and	coalesce(a.ie_acao_glosa,b.ie_acao_glosa) <> 'R'
				and	nr_seq_partic	= nr_seq_partic_w
				and	nr_seq_propaci	= nr_seq_procedimento_w;
			else
				select	coalesce(sum(vl_glosa),0)
				into STRICT	vl_glosa_w
				from	convenio_retorno_glosa a,
					motivo_glosa b
				where	a.cd_motivo_glosa	= b.cd_motivo_glosa
				and	coalesce(a.ie_acao_glosa,b.ie_acao_glosa) <> 'R'
				and	nr_seq_propaci	= nr_seq_procedimento_w;

				select	count(*)
				into STRICT	count_w
				from	convenio_retorno_glosa a,
					motivo_glosa b
				where	a.cd_motivo_glosa	= b.cd_motivo_glosa
				and	coalesce(a.ie_acao_glosa,b.ie_acao_glosa) <> 'R'
				and	nr_seq_propaci	= nr_seq_procedimento_w;

			end if;

			if (vl_glosa_w > 0) then
				vl_pago_digitado_w	:= vl_procedimento_w - vl_glosa_w;
			end if;

			if (count_w = 0) and (coalesce(ie_gerar_glosa_p,'N') = 'S') then
				vl_saldo_proc_w	:= vl_procedimento_w;
			end if;
			
			--se for o proc principal e tiver participante, considerar os valores auxiliares
			if (coalesce(nr_seq_partic_w::text, '') = '')
			and ((obter_participantes_proc(nr_seq_procedimento_w) IS NOT NULL AND (obter_participantes_proc(nr_seq_procedimento_w))::text <> '')) 
			and (ie_valor_medico_partic_w = 'N') then 
				select	vl_procedimento_w +
					coalesce(vl_custo_operacional,0) +
					coalesce(vl_materiais,0) +
					coalesce(vl_auxiliares,0) +
					coalesce(vl_anestesista,0)
				into STRICT	vl_procedimento_w
				from	procedimento_paciente
				where	nr_sequencia = nr_seq_procedimento_w;
			end if;
			
			-- se agrupou e tem participante, entao joga a quantidade do proprio procedimento
			if (qt_registros_w > 1) and (ie_participante_w = 'S') then
				qt_glosa_w := qt_procedimento_w;
			end if;
			
			insert into convenio_retorno_glosa(
				nr_sequencia,
				nr_seq_ret_item,
				vl_glosa,
				dt_atualizacao,
				nm_usuario,
				cd_procedimento,
				ie_origem_proced,
				ie_atualizacao,
				cd_item_convenio,
				qt_glosa,
				cd_setor_atendimento,
				nr_seq_propaci,
				nr_seq_partic,
				ie_emite_conta,
				vl_cobrado,
				qt_cobrada,
				cd_pessoa_fisica,
				vl_pago_digitado,
                ie_custo_operacional)
			values (	nextval('convenio_retorno_glosa_seq'),
				nr_seq_ret_item_p,
				coalesce(vl_saldo_proc_w, 0),
				clock_timestamp(),
				nm_usuario_p,
				cd_procedimento_w,
				ie_origem_proced_w,
				'N',
				cd_procedimento_convenio_w,
				CASE WHEN ie_gerar_glosa_p='S' THEN qt_procedimento_w  ELSE 0 END ,
				cd_setor_atendimento_w,
				nr_seq_procedimento_w,
				nr_seq_partic_w,
				ie_emite_conta_w,
				CASE WHEN coalesce(nr_seq_partic_w,0)=0 THEN  coalesce(vl_cobrado_w, vl_procedimento_w)  ELSE vl_procedimento_w END ,
				qt_glosa_w,
				cd_medico_participante_w,
				vl_pago_digitado_w,
                ie_custo_operacional_w);

			-- so vai contabilizar os procedimentos principais, ja que entra aqui do mesmo jeito pela restricao da linha 256
			if (coalesce(nr_seq_partic_w::text, '') = '' and ie_custo_operacional_w = 'N') then
				qt_glosado_w	:= qt_glosado_w + qt_glosa_w;
			end if;
			
		end if;

		end loop;
	close C01;

end loop;
close C04;	

open C03;
loop
fetch C03 into
	cd_material_w,
	cd_setor_atendimento_w;
EXIT WHEN NOT FOUND; /* apply on C03 */

	select	sum(b.qt_material),
		sum(vl_material)
	into STRICT	qt_glosar_w,
		vl_cobrado_w
	from	material_atend_paciente b
	where	b.nr_interno_conta 		= nr_interno_conta_p
	and	b.cd_material			= cd_material_w
	and 	b.cd_setor_atendimento  = coalesce(cd_setor_atendimento_w, b.cd_setor_atendimento)
	and	(((ie_geracao_pacotes_w = 'PF') and (coalesce(nr_seq_proc_pacote::text, '') = '')) or (ie_geracao_pacotes_w <> 'PF'));

	select	sum(b.vl_material),
		sum(b.qt_material)
	into STRICT	vl_cobrado_est_w,
		qt_glosar_est_w
	from	material_atend_paciente b
	where	not exists (SELECT	1
		from	convenio_retorno_glosa x
		where	x.nr_seq_matpaci	= b.nr_sequencia
		and	x.nr_seq_ret_item	= nr_seq_ret_item_p)
	and	b.nr_interno_conta 		= nr_interno_conta_p
	and	b.cd_material			= cd_material_w
	and 	b.cd_setor_atendimento  = coalesce(cd_setor_atendimento_w, b.cd_setor_atendimento)
	and	b.qt_material			< 0
	and	(((ie_geracao_pacotes_w = 'PF') and (coalesce(nr_seq_proc_pacote::text, '') = '')) or (ie_geracao_pacotes_w <> 'PF'));
	
	qt_glosado_w	:= 0;

	open C02;
	loop
	fetch C02 into
		cd_material_w,
		cd_material_convenio_w,
		nr_seq_material_w,
		ie_emite_conta_w,
		vl_material_w,
		vl_unitario_w,
		qt_material_w,
		vl_saldo_mat_w,
		nr_seq_proc_pacote_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		ie_gerar_item_w := 'S';
		
		if (ie_geracao_itens_conta_w = 'S') and
			((coalesce(vl_material_w,0) <= 0) or (coalesce(qt_material_w,0) <= 0)) then
			ie_gerar_item_w := 'N';
		end if;
			
		if (ie_gerar_item_w = 'S') then
			--PI - Gera tudo
			if (coalesce(ie_geracao_pacotes_w::text, '') = '') and --Default como já funcionava antes da alteração
				(nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '')then
				ie_gerar_item_w := 'N';
			elsif (ie_geracao_pacotes_w = 'PP') and --Somente os procedimentos pacote
				(nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '')  then
				ie_gerar_item_w := 'N';
			elsif (ie_geracao_pacotes_w = 'IF') and (nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') then --Somente fora do pacote
				ie_gerar_item_w := 'N';
			elsif (ie_geracao_pacotes_w = 'PF') then
				ie_gerar_item_w := 'N';
				if (coalesce(nr_seq_proc_pacote_w::text, '') = '') then --fora do pacote
					ie_gerar_item_w := 'S';
				end if;
			--IP - gera somente os itens do pacote, então gera normal já que é para material.
				
			end if;
		end if;
		
		if (ie_gerar_item_w = 'S') and (ie_geracao_itens_conta_w = 'S') and (qt_glosado_w 	< qt_glosar_w) and (vl_material_w	> 0.00) then --lhalves OS269309 em 10/12/2010
			
			qt_glosa_w := qt_glosar_w;
			

			select	coalesce(sum(vl_glosa),0)
			into STRICT	vl_glosa_w
			from	convenio_retorno_glosa
			where	nr_seq_matpaci	= nr_seq_material_w;

			if (vl_glosa_w > 0) then
				--vl_pago_digitado_w	:= vl_material_w  - vl_glosa_w;
				vl_pago_digitado_w	:= (vl_material_w + vl_cobrado_est_w) - vl_glosa_w;
			end if;

			select	count(*)
			into STRICT	count_w
			from	convenio_retorno_glosa
			where	nr_seq_matpaci	= nr_seq_material_w;

			if (count_w = 0) and (coalesce(ie_gerar_glosa_p,'N') = 'S') then
				vl_saldo_mat_w	:= vl_material_w;
			end if;
			
			insert into convenio_retorno_glosa(
				nr_sequencia,
				nr_seq_ret_item,
				vl_glosa,
				dt_atualizacao,
				nm_usuario,
				cd_material,
				ie_atualizacao,
				qt_glosa,
				cd_setor_atendimento,
				cd_item_convenio,
				nr_seq_matpaci,
				ie_emite_conta,
				vl_cobrado,
				qt_cobrada,
				vl_pago_digitado)
			values (	nextval('convenio_retorno_glosa_seq'),
				nr_seq_ret_item_p,
				coalesce(vl_saldo_mat_w,0),
				clock_timestamp(),
				nm_usuario_p,
				cd_material_w,
				'N',
				CASE WHEN ie_gerar_glosa_p='S' THEN qt_glosa_w  ELSE 0 END ,
				cd_setor_atendimento_w,
				cd_material_convenio_w,
				nr_seq_material_w,
				ie_emite_conta_w,
				vl_cobrado_w,
				--vl_material_w,
				qt_glosa_w,
				vl_pago_digitado_w);

			qt_glosado_w	:= qt_glosado_w + qt_glosa_w;
			
		elsif (ie_gerar_item_w = 'S') and (ie_geracao_itens_conta_w = 'T') and
			((ie_geracao_pacotes_w = 'PF' AND qt_glosado_w < qt_glosar_w) or (ie_geracao_pacotes_w <> 'PF')) then
		
			insert into convenio_retorno_glosa(
				nr_sequencia,
				nr_seq_ret_item,
				vl_glosa,
				dt_atualizacao,
				nm_usuario,
				cd_material,
				ie_atualizacao,
				qt_glosa,
				cd_setor_atendimento,
				cd_item_convenio,
				nr_seq_matpaci,
				ie_emite_conta,
				vl_cobrado,
				qt_cobrada,
				vl_pago_digitado)
			values (	nextval('convenio_retorno_glosa_seq'),
				nr_seq_ret_item_p,
				coalesce(vl_saldo_mat_w,0),
				clock_timestamp(),
				nm_usuario_p,
				cd_material_w,
				'N',
				CASE WHEN ie_gerar_glosa_p='S' THEN qt_material_w  ELSE 0 END ,
				cd_setor_atendimento_w,
				cd_material_convenio_w,
				nr_seq_material_w,
				ie_emite_conta_w,
				vl_material_w,
				qt_material_w,
				vl_pago_digitado_w);
				
			qt_glosado_w	:= qt_glosado_w + qt_material_w;
		end if;			

	end loop;
	close C02;

end loop;
close c03;

dbms_application_info.SET_ACTION('');

exception
	when others then
	dbms_application_info.SET_ACTION('');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(182241,'SQL_ERRM='||sqlerrm);
end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_itens_glosados_conta ( nr_interno_conta_p bigint, nr_seq_ret_item_p bigint, nm_usuario_p text, ie_gerar_glosa_p text) FROM PUBLIC;

