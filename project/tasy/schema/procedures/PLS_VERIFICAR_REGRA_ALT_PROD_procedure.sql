-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_verificar_regra_alt_prod ( nr_seq_segurado_p bigint, nr_seq_produto_novo_p bigint, nr_seq_solicitacao_p bigint, ds_mensagem_p INOUT text) AS $body$
DECLARE



nr_seq_produto_atual_w		pls_regra_carencia_web.nr_seq_produto_ant%type;
nr_seq_categoria_atual_w	pls_regra_carencia_web.nr_seq_categoria_ant%type;
nr_seq_tipo_acomod_atual_w	pls_regra_carencia_web.nr_seq_tipo_acomod_ant%type;
nr_seq_categoria_novo_w		pls_regra_carencia_web.nr_seq_categoria_atual%type;
nr_seq_tipo_acomod_novo_w	pls_regra_carencia_web.nr_seq_tipo_acomod_atual%type;
ie_inf_abrangencia_w		pls_regra_carencia_web.ie_inf_abrangencia%type;
ie_inf_carencia_w		pls_regra_carencia_web.ie_inf_carencia%type;
nr_seq_produto_ant_regra	pls_regra_carencia_web.nr_seq_produto_ant%type;
nr_seq_produto_atual_regra	pls_regra_carencia_web.nr_seq_produto_atual%type;
ie_abran_plano_atual_w		pls_plano.ie_abrangencia%type;
ie_abran_plano_novo_w		pls_plano.ie_abrangencia%type;
ds_mensagem_abrangencia_w	varchar(75);
ds_mensagem_carencia_w		varchar(75);
ie_existe_cat_atual_w		varchar(1);
ie_existe_cat_novo_w		varchar(1);
ie_existe_aco_atual_w		varchar(1);
ie_existe_aco_novo_w		varchar(1);
ie_entra_regra_w		varchar(1) := 'N';
ie_mudanca_carencia_w		varchar(1);
ie_nova_abrangencia_w		varchar(1) := 'N';
ie_nova_carencia_w		varchar(1) := 'N';
ds_observacao_carencia_w	varchar(4000) :='';
ds_observacao_abrangencia_w	varchar(100) :='';

--Verifica se as regras de alteração do produto se enquadram na solicitação de alteração
c01 CURSOR FOR
	SELECT	ie_inf_abrangencia,
		ie_inf_carencia,
		nr_seq_categoria_ant,
		nr_seq_categoria_atual,
		nr_seq_tipo_acomod_ant,
		nr_seq_tipo_acomod_atual,
		nr_seq_produto_ant,
		nr_seq_produto_atual
	from	pls_regra_carencia_web;


BEGIN

--busca plano atual do beneficiário
select	max(nr_seq_plano)
into STRICT	nr_seq_produto_atual_w
from	pls_segurado
where	nr_sequencia = nr_seq_segurado_p;

if (nr_seq_produto_atual_w <> nr_seq_produto_novo_p) then

	open c01;
	loop
	fetch c01 into
		ie_inf_abrangencia_w,
		ie_inf_carencia_w,
		nr_seq_categoria_atual_w,
		nr_seq_categoria_novo_w,
		nr_seq_tipo_acomod_atual_w,
		nr_seq_tipo_acomod_novo_w,
		nr_seq_produto_ant_regra,
		nr_seq_produto_atual_regra;
	EXIT WHEN NOT FOUND; /* apply on c01 */

	ie_existe_cat_atual_w := 'N';
	ie_existe_cat_novo_w  := 'N';
	ie_existe_aco_atual_w := 'N';
	ie_existe_aco_novo_w  := 'N';
	ie_entra_regra_w      := 'S';


	if ((ie_inf_abrangencia_w IS NOT NULL AND ie_inf_abrangencia_w::text <> '') or (ie_inf_carencia_w IS NOT NULL AND ie_inf_carencia_w::text <> '')) then

		--verifica se a regra se encaixa com produto anterior
		if ((nr_seq_produto_ant_regra IS NOT NULL AND nr_seq_produto_ant_regra::text <> '') and ie_entra_regra_w = 'S') then
			if (nr_seq_produto_ant_regra = nr_seq_produto_atual_w )then
				ie_entra_regra_w := 'S';
			else
				ie_entra_regra_w := 'N';
			end if;
		end if;

		--verifica se a regra se encaixa com produto atual
		if ((nr_seq_produto_atual_regra IS NOT NULL AND nr_seq_produto_atual_regra::text <> '') and ie_entra_regra_w = 'S') then
			if (nr_seq_produto_atual_regra = nr_seq_produto_novo_p )then
				ie_entra_regra_w := 'S';
			else
				ie_entra_regra_w := 'N';
			end if;
		end if;


		-- verifica se existe alguma categoria do produto anterior que se encaixa na regra
		if ((nr_seq_categoria_atual_w IS NOT NULL AND nr_seq_categoria_atual_w::text <> '') and ie_entra_regra_w = 'S') then

			select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END  ie_existe_categoria
			into STRICT	ie_existe_cat_atual_w
			from	pls_plano_acomodacao
			where	nr_seq_plano = nr_seq_produto_atual_w
			and	nr_seq_categoria = nr_seq_categoria_atual_w;

			if (ie_existe_cat_atual_w = 'S')then
				ie_entra_regra_w := 'S';
			else
				ie_entra_regra_w := 'N';
			end if;

		end if;

		-- verifica se existe alguma categoria do produto anterior que se encaixa na regra
		if ((nr_seq_categoria_novo_w IS NOT NULL AND nr_seq_categoria_novo_w::text <> '') and ie_entra_regra_w = 'S') then

			select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END  ie_existe_categoria
			into STRICT	ie_existe_cat_novo_w
			from	pls_plano_acomodacao
			where	nr_seq_plano = nr_seq_produto_novo_p
			and	nr_seq_categoria = nr_seq_categoria_novo_w;

			if (ie_existe_cat_novo_w = 'S')then
				ie_entra_regra_w := 'S';
			else
				ie_entra_regra_w := 'N';
			end if;

		end if;

		--verificar se existe alguma acomodação anterior que se enquadra na regra
		if ((nr_seq_tipo_acomod_atual_w IS NOT NULL AND nr_seq_tipo_acomod_atual_w::text <> '') and ie_entra_regra_w = 'S') then
			select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END  ie_existe_acomodacao
			into STRICT	ie_existe_aco_atual_w
			from	pls_plano_acomodacao
			where	nr_seq_plano = nr_seq_produto_atual_w
			and	nr_seq_tipo_acomodacao = nr_seq_tipo_acomod_atual_w;

			if (ie_existe_aco_atual_w = 'S') then
				ie_entra_regra_w := 'S';
			else
				ie_entra_regra_w := 'N';
			end if;
		end if;

		--verificar se existe alguma acomodação atual que se enquadra na regra
		if ((nr_seq_tipo_acomod_novo_w IS NOT NULL AND nr_seq_tipo_acomod_novo_w::text <> '') and ie_entra_regra_w = 'S') then

			select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END  ie_existe_acomodacao
			into STRICT	ie_existe_aco_novo_w
			from	pls_plano_acomodacao
			where	nr_seq_plano = nr_seq_produto_novo_p
			and	nr_seq_tipo_acomodacao = nr_seq_tipo_acomod_novo_w;

			if (ie_existe_aco_novo_w = 'S')then
				ie_entra_regra_w := 'S';
			else
				ie_entra_regra_w := 'N';
			end if;
		end if;

		--Caso a alteração se enquadre na regra
		if (ie_entra_regra_w = 'S') then

			if (ie_inf_abrangencia_w = 'S') then

				--verifica se ocorreu mudança de abrangência
				select	ie_abrangencia
				into STRICT	ie_abran_plano_atual_w
				from	pls_plano
				where	nr_sequencia = nr_seq_produto_atual_w;

				select	ie_abrangencia
				into STRICT	ie_abran_plano_novo_w
				from	pls_plano
				where	nr_sequencia = nr_seq_produto_novo_p;

				if (ie_abran_plano_atual_w <> ie_abran_plano_novo_w) then
					ds_mensagem_abrangencia_w := wheb_mensagem_pck.get_texto(460146, null); --Alteração deste produto resultará na mudança de abrangência do plano.
					ds_observacao_abrangencia_w := wheb_mensagem_pck.get_texto(495118,'DS_ABRANG_P='||obter_valor_dominio(1667,ie_abran_plano_atual_w)||';DS_ABRANG_NOVO_P='||obter_valor_dominio(1667,ie_abran_plano_novo_w))||chr(13);
					ie_nova_abrangencia_w := 'S';
				end if;

			end if;
			if (ie_inf_carencia_w = 'S') then
				--verifica se ocorreu mudança de carência
				ie_mudanca_carencia_w := pls_mudanca_carencia(nr_seq_produto_atual_w,nr_seq_produto_novo_p,'MC');
				if (ie_mudanca_carencia_w='S') then
					ds_mensagem_carencia_w := wheb_mensagem_pck.get_texto(460148, null); 	--Alteração deste produto resultará na mudança de carência do plano.
					ds_observacao_carencia_w := pls_mudanca_carencia(nr_seq_produto_atual_w,nr_seq_produto_novo_p,'MD');
					ie_nova_carencia_w := 'S';
				end if;
			end if;
		end if;

	end if;

	end loop;
	close c01;

end if;
ds_observacao_carencia_w :=  ds_observacao_carencia_w||ds_observacao_abrangencia_w;
update	pls_segurado_solic_alt
set	ie_nova_abrangencia	= ie_nova_abrangencia_w ,
	ie_nova_carencia	= ie_nova_carencia_w,
	ds_observacao_carencia	= ds_observacao_carencia_w
where	nr_sequencia = nr_seq_solicitacao_p;

ds_mensagem_p := ds_mensagem_abrangencia_w ||';'||ds_mensagem_carencia_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_verificar_regra_alt_prod ( nr_seq_segurado_p bigint, nr_seq_produto_novo_p bigint, nr_seq_solicitacao_p bigint, ds_mensagem_p INOUT text) FROM PUBLIC;

