-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE do_arrival_for_appointment (cd_agenda_p bigint, nr_sequencia_p bigint, cd_pessoa_fisica_p text default null, nr_atendimento_p bigint default null) AS $body$
DECLARE

  cd_tipo_agenda_w      bigint;
  nr_seq_lista_ret_w    varchar(10);
  nr_atend_lista_ret_w  varchar(10);
  nr_sequencia_ret_w    varchar(10);
  nr_atendimento_ret_w  varchar(10);
  ds_perg_desvincular_w varchar(10);
  qtd_linhas_w          bigint;
  nr_seq_fila_w			bigint;
  nr_senha_w			varchar(10);
  nr_seq_senha_w		bigint;
  ie_senha_prioritaria_w varchar(10);
  ie_sistema_externo_w  varchar(10);
  ie_tipo_agenda_w      varchar(2);
  nr_seq_agenda_w       agenda_paciente.nr_sequencia%type;
  param32_w             varchar(10);
  nr_seq_fila_nova_w     paciente_senha_fila.nr_seq_fila_senha%TYPE;
  nr_seq_fila_atual_w    paciente_senha_fila.nr_seq_fila_senha%TYPE;
  cd_senha_w             paciente_senha_fila.cd_senha_gerada%TYPE;
  dt_hora_w              timestamp;
  ds_erro_w              varchar(100);


BEGIN
  cd_tipo_agenda_w := obter_tipo_agenda(cd_agenda_p);
  param32_w := obter_param_usuario_logado(970,32);

  -- CONSULTATION SCHEDULE
  IF cd_tipo_agenda_w = 3 THEN
    CALL alterar_status_agecons(
      cd_agenda_p,
      nr_sequencia_p,
      'A',
      '',
      '',
      'N',
      wheb_usuario_pck.get_nm_usuario,
      0
    );
	
   IF (param32_w = 'S') THEN
      nr_seq_fila_w := obter_fila_agenda_turno(cd_agenda_p);
	  ie_senha_prioritaria_w := 'N';
	  SELECT * FROM gerar_senha_paciente(nr_seq_fila_w, obter_estabelecimento_ativo, wheb_usuario_pck.get_nm_usuario, ie_senha_prioritaria_w, nr_senha_w, nr_seq_senha_w, cd_pessoa_fisica_p, nr_atendimento_p, ie_sistema_externo_w) INTO STRICT nr_senha_w, nr_seq_senha_w;

	  -- Japan Specific change -- to allocate the waiting number into the Waiting line screen   
		select  max(nr_seq_fila_senha),
				max(coalesce(nr_seq_fila_senha,nr_seq_fila_senha_origem)),
				max(cd_senha_gerada),
				max(clock_timestamp())                                               
		into STRICT    nr_seq_fila_nova_w,
				nr_seq_fila_atual_w,
				cd_senha_w,
				dt_hora_w
		from    paciente_senha_fila
		where   nr_sequencia    =   nr_seq_senha_w;
		
		ds_erro_w := alocar_senha_fila( nr_seq_fila_nova_w, nr_seq_fila_atual_w, cd_senha_w, nr_seq_senha_w, dt_hora_w, ds_erro_w);
	
	  IF (nr_seq_senha_w > 0) THEN
         nr_seq_agenda_w := nr_sequencia_p;
         ie_tipo_agenda_w := 'S';
         CALL vincular_senha_agendamento(nr_seq_senha_w, nr_seq_agenda_w, ie_tipo_agenda_w);
      END IF;
   END IF;	

  -- SERVICE SCHEDULE
  ELSIF cd_tipo_agenda_w = 5 THEN
    SELECT * FROM alterar_status_agenda_ageserv(
      'A', null, null, null, nr_sequencia_p || '', null, null, null, 'N', nr_seq_lista_ret_w, nr_atend_lista_ret_w, nr_sequencia_ret_w, nr_atendimento_ret_w, ds_perg_desvincular_w, qtd_linhas_w, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento
    ) INTO STRICT nr_seq_lista_ret_w, nr_atend_lista_ret_w, nr_sequencia_ret_w, nr_atendimento_ret_w, ds_perg_desvincular_w, qtd_linhas_w;

   IF (param32_w = 'S') THEN
      nr_seq_fila_w := obter_fila_agenda_turno(cd_agenda_p);
	  ie_senha_prioritaria_w := 'N';
	  SELECT * FROM gerar_senha_paciente(nr_seq_fila_w, obter_estabelecimento_ativo, wheb_usuario_pck.get_nm_usuario, ie_senha_prioritaria_w, nr_senha_w, nr_seq_senha_w, cd_pessoa_fisica_p, nr_atendimento_p, ie_sistema_externo_w) INTO STRICT nr_senha_w, nr_seq_senha_w;
      IF (nr_seq_senha_w > 0) THEN
         nr_seq_agenda_w := nr_sequencia_p;
         ie_tipo_agenda_w := 'S';
         CALL vincular_senha_agendamento(nr_seq_senha_w, nr_seq_agenda_w, ie_tipo_agenda_w);
      END IF;
   END IF;	

  -- EXAM SCHEDULE
  ELSIF cd_tipo_agenda_w = 2 THEN
    CALL alterar_status_agenda(
      cd_agenda_p,
      nr_sequencia_p,
      'A',
      '',
      '',
      'N',
      wheb_usuario_pck.get_nm_usuario
    );

  IF (param32_w = 'S') THEN
      nr_seq_fila_w := obter_fila_agenda_horario(cd_agenda_p);
	  ie_senha_prioritaria_w := 'N';
	  SELECT * FROM gerar_senha_paciente(nr_seq_fila_w, obter_estabelecimento_ativo, wheb_usuario_pck.get_nm_usuario, ie_senha_prioritaria_w, nr_senha_w, nr_seq_senha_w, cd_pessoa_fisica_p, nr_atendimento_p, ie_sistema_externo_w) INTO STRICT nr_senha_w, nr_seq_senha_w;
      IF (nr_seq_senha_w > 0) THEN
         nr_seq_agenda_w := nr_sequencia_p;
         ie_tipo_agenda_w := 'E';
         CALL vincular_senha_agendamento(nr_seq_senha_w, nr_seq_agenda_w, ie_tipo_agenda_w);
      END IF;
   END IF;
  END IF;

  IF coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S' THEN
    COMMIT;
  END IF;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE do_arrival_for_appointment (cd_agenda_p bigint, nr_sequencia_p bigint, cd_pessoa_fisica_p text default null, nr_atendimento_p bigint default null) FROM PUBLIC;

