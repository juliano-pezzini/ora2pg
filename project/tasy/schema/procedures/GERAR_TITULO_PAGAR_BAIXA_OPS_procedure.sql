-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_titulo_pagar_baixa_ops ( nr_titulo_p bigint, nr_seq_baixa_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
	Verificar na ESTORNAR_TIT_PAGAR_BAIXA ao criar campo na TITULO_PAGAR_BAIXA_OPS
	
	IE_ORIGEM_TITULO_W
		Dominio 500
		
	IE_ORIGEM
		Dominio 6930
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
vl_baixa_w			titulo_pagar_baixa.vl_baixa%type;
vl_titulo_w			titulo_pagar.vl_titulo%type;
cd_conta_contabil_w		titulo_pagar_baixa_ops.cd_conta_contabil%type;
cd_historico_w			titulo_pagar_baixa_ops.cd_historico%type;
ie_debito_credito_w		titulo_pagar_baixa_ops.ie_debito_credito%type;
vl_movimento_w			titulo_pagar_baixa_ops.vl_movimento%type;
vl_movimento_ww			titulo_pagar_baixa_ops.vl_movimento%type;
nr_documento_w			titulo_pagar_baixa_ops.nr_titulo%type;
nr_seq_doc_compl_w		titulo_pagar_baixa_ops.nr_seq_baixa%type;
nr_doc_analitico_w		titulo_pagar_baixa_ops.nr_Sequencia%type;
vl_movimento_novo_w		titulo_pagar_baixa_ops.vl_movimento%type;
vl_pagamento_w			pls_pagamento_prestador.vl_pagamento%type;
ie_origem_titulo_w		titulo_pagar.ie_origem_titulo%type;
vl_movimento_total_w		titulo_pagar_baixa_ops.vl_movimento%type;
vl_movimento_prod_w		titulo_pagar_baixa_ops.vl_movimento%type;
nr_seq_baixa_ops_w		titulo_pagar_baixa_ops.nr_sequencia%type;
vl_imposto_w			titulo_pagar_imposto.vl_imposto%type;
nr_seq_pagamento_item_w		pls_evento_movimento.nr_seq_pagamento_item%type;
nr_seq_pag_item_w		pls_conta_medica_resumo.nr_seq_pag_item%type;
vl_total_imposto_w		titulo_pagar_imposto.vl_imposto%type;
nr_seq_pp_ev_valor_w		pls_pp_prest_evento_valor.nr_sequencia%type;
qt_prest_pgto_w			bigint;
dt_lote_w			timestamp;

nr_seq_baixa_maior_valor_w	titulo_pagar_baixa_ops.nr_sequencia%type;

nr_seq_pls_pag_prest_w		titulo_pagar.nr_seq_pls_pag_prest%type;
nr_seq_lote_pgto_w		pls_lote_pagamento.nr_sequencia%type;
nr_seq_pp_lote_w		pls_pp_lote.nr_sequencia%type;
nr_seq_prestador_pgto_w		pls_prestador.nr_sequencia%type;
vl_itens_total_w		pls_pagamento_item.vl_item%type;

cd_conta_nova_w			conta_contabil.cd_conta_contabil%type;
cd_classif_conta_w		conta_contabil.cd_classificacao%type;
cd_classif_conta_nova_w		conta_contabil.cd_classificacao%type;
ie_situacao_w			conta_contabil.ie_situacao%type;
dt_baixa_w			timestamp;
ie_vigente_w			varchar(1);
ie_preco_w			pls_plano.ie_preco%type;

vl_total_conta_w		pls_conta.vl_total%type;
nm_atributo_w			varchar(40);
vl_liberado_w			pls_conta_proc.vl_liberado%type;
vl_apresentado_w		pls_conta_proc.vl_procedimento_imp%type;

-- Cursor alterado, pois o mesmo acessava os movimentos atraves do 'nr_seq_evento', 'nr_seq_lote_pgto' e 'nr_seq_prestador', passamos a acessar os movimentos pelos itens do pagamento, visto que ha integridade entre eles.

-- Esta alteracao se fez necessario visto que quando cadastrado um lote de evento manual, e ha regra de criterio de pagamento no prestador, onde o pagamento do prestador cadastrado neste lote manual deve ser pago a um outro

-- prestador, na movimentacao fica o registro do prestador 'A' e no lote de pagamento o prestador e o 'B', assim a ligacao nao pode ser realizada atraves de prestador, e sim atraves da ligacao do item com o movimento.
c_eventos_financ CURSOR FOR
	SELECT	e.cd_conta_credito,
		e.cd_historico,
		e.nr_seq_pagamento_item,
		coalesce(abs(sum(e.vl_movimento)),0) * CASE WHEN coalesce(f.ie_natureza, 'P')='D' THEN -1  ELSE 1 END
	from	pls_evento			f,
		pls_evento_movimento		e,
		titulo_pagar			d,
		pls_pag_prest_vencimento	c,
		pls_pagamento_item		b,
		pls_pagamento_prestador		a
	where	a.nr_sequencia			= b.nr_seq_pagamento
	and	a.nr_sequencia			= c.nr_seq_pag_prestador
	and	d.nr_titulo			= c.nr_titulo
	and	d.nr_titulo			= nr_titulo_p
	and	b.nr_sequencia			= e.nr_seq_pagamento_item
	and	f.nr_sequencia			= e.nr_seq_evento
	group by e.cd_conta_credito,
		e.cd_historico,
		e.nr_seq_pagamento_item,
		f.ie_natureza
	
union all

	SELECT	i.cd_conta_credito,
		i.cd_historico,
		null,
		coalesce(sum(i.vl_liquido),0)
	from	pls_pp_lote		l,
		pls_pp_prestador	p,
		pls_pp_item_lote	i,
		pls_evento		e
	where	l.nr_sequencia		= p.nr_seq_lote
	and	l.nr_sequencia		= i.nr_seq_lote
	and	p.nr_seq_prestador	= i.nr_seq_prestador
	and	e.nr_sequencia		= i.nr_seq_evento
	and	i.ie_tipo_item		not in ('1','8')
	and	p.nr_titulo_pagar	= nr_titulo_p
	group by i.cd_conta_credito,
		i.cd_historico;
		
c_itens_producao CURSOR FOR
	SELECT	cd_conta_contabil,
		cd_historico,
		nr_seq_pag_item,
		nr_seq_pp_ev_valor,
		ie_preco,
		sum(vl_liberado)
	from	(
		-- Pegar informacao do material pela CONTA_MEDICA_RESUMO restringindo pelo pagamento ANTIGO
		SELECT	coalesce(k.cd_conta_cred,k.cd_conta_prov_cred) cd_conta_contabil,
			k.cd_historico,
			k.nr_seq_pag_item,
			null nr_seq_pp_ev_valor,	
			p.ie_preco,
			coalesce(sum(k.vl_liberado),0) vl_liberado
		from	pls_conta_medica_resumo	k,
			pls_conta_mat		w,
			pls_conta		c,
			pls_segurado		s,
			pls_plano		p
		where	w.nr_sequencia		= k.nr_seq_conta_mat
		and	c.nr_sequencia		= w.nr_seq_conta
		and	s.nr_sequencia		= c.nr_seq_segurado
		and	p.nr_sequencia		= s.nr_seq_plano
		and	k.ie_situacao		= 'A'
		and	qt_prest_pgto_w 	> 0
		and	k.nr_seq_lote_pgto	= nr_seq_lote_pgto_w
		and	k.nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
		group by
			coalesce(k.cd_conta_cred,k.cd_conta_prov_cred),
			k.cd_historico,
			k.nr_seq_pag_item,
			k.nr_seq_pp_evento,
			k.nr_seq_prestador_pgto,
			k.nr_seq_pp_lote,
			p.ie_preco
		
union all

		-- Pegar informacao do material pela CONTA_MEDICA_RESUMO restringindo pelo pagamento NOVO
		select	coalesce(k.cd_conta_cred,k.cd_conta_prov_cred) cd_conta_contabil,
			k.cd_historico,
			null nr_seq_pag_item,
			(select	max(v.nr_sequencia)
			from	pls_pp_prest_evento_valor	v
			where	v.nr_seq_evento		= k.nr_seq_pp_evento
			and	v.nr_seq_prestador	= k.nr_seq_prestador_pgto
			and	v.nr_seq_lote		= k.nr_seq_pp_lote) nr_seq_pp_ev_valor,	
			p.ie_preco,
			coalesce(sum(k.vl_liberado),0) vl_liberado
		from	pls_conta_medica_resumo	k,
			pls_conta_mat		w,
			pls_conta		c,
			pls_segurado		s,
			pls_plano		p
		where	w.nr_sequencia		= k.nr_seq_conta_mat
		and	c.nr_sequencia		= w.nr_seq_conta
		and	s.nr_sequencia		= c.nr_seq_segurado
		and	p.nr_sequencia		= s.nr_seq_plano		
		and	k.ie_situacao		= 'A'
		and	qt_prest_pgto_w 	> 0
		and	k.nr_seq_pp_lote	= nr_seq_pp_lote_w
		and	k.nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
		group by
			coalesce(k.cd_conta_cred,k.cd_conta_prov_cred),
			k.cd_historico,
			k.nr_seq_pag_item,
			k.nr_seq_pp_evento,
			k.nr_seq_prestador_pgto,
			k.nr_seq_pp_lote,
			p.ie_preco
		
union all

		-- Pegar informacao do procedimento pela CONTA_MEDICA_RESUMO restringindo pelo pagamento ANTIGO
		select	coalesce(k.cd_conta_cred,k.cd_conta_prov_cred),
			k.cd_historico,
			k.nr_seq_pag_item,
			null nr_seq_pp_ev_valor,
			p.ie_preco,
			coalesce(sum(k.vl_liberado),0) vl_liberado
		from	pls_conta_medica_resumo	k,
			pls_conta_proc		w,
			pls_conta		c,
			pls_segurado		s,
			pls_plano		p
		where	w.nr_sequencia		= k.nr_seq_conta_proc
		and	c.nr_sequencia		= w.nr_seq_conta
		and	s.nr_sequencia		= c.nr_seq_segurado
		and	p.nr_sequencia		= s.nr_seq_plano		
		and	k.ie_situacao		= 'A'
		and	qt_prest_pgto_w 	> 0
		and	k.nr_seq_lote_pgto	= nr_seq_lote_pgto_w
		and	k.nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
		group by
			coalesce(k.cd_conta_cred,k.cd_conta_prov_cred),
			k.cd_historico,
			k.nr_seq_pag_item,
			k.nr_seq_pp_evento,
			k.nr_seq_prestador_pgto,
			k.nr_seq_pp_lote,
			p.ie_preco
		
union all

		-- Pegar informacao do procedimento pela CONTA_MEDICA_RESUMO restringindo pelo pagamento NOVO
		select	coalesce(k.cd_conta_cred,k.cd_conta_prov_cred),
			k.cd_historico,
			null nr_seq_pag_item,
			(select	max(v.nr_sequencia)
			from	pls_pp_prest_evento_valor	v
			where	v.nr_seq_evento		= k.nr_seq_pp_evento
			and	v.nr_seq_prestador	= k.nr_seq_prestador_pgto
			and	v.nr_seq_lote		= k.nr_seq_pp_lote) nr_seq_pp_ev_valor,
			p.ie_preco,
			coalesce(sum(k.vl_liberado),0) vl_liberado
		from	pls_conta_medica_resumo	k,
			pls_conta_proc		w,
			pls_conta		c,
			pls_segurado		s,
			pls_plano		p
		where	w.nr_sequencia		= k.nr_seq_conta_proc
		and	c.nr_sequencia		= w.nr_seq_conta
		and	s.nr_sequencia		= c.nr_seq_segurado
		and	p.nr_sequencia		= s.nr_seq_plano		
		and	k.ie_situacao		= 'A'
		and	qt_prest_pgto_w 	> 0
		and	k.nr_seq_pp_lote	= nr_seq_pp_lote_w
		and	k.nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
		group by
			coalesce(k.cd_conta_cred,k.cd_conta_prov_cred),
			k.cd_historico,
			k.nr_seq_pag_item,
			k.nr_seq_pp_evento,
			k.nr_seq_prestador_pgto,
			k.nr_seq_pp_lote,
			p.ie_preco
		/* Normal */

		
union all

		-- Pegar informacao do material pela MATERIAL restringindo pelo pagamento ANTIGO
		select	coalesce(w.cd_conta_cred, w.cd_conta_provisao_cred),
			w.cd_historico,
			null nr_seq_pag_item,
			null nr_seq_pp_prest_valor,
			p.ie_preco,
			coalesce(sum(w.vl_liberado),0) vl_liberado
		from	pls_conta_medica_resumo	k,
			pls_conta_mat		w,
			pls_conta		c,
			pls_segurado		s,
			pls_plano		p
		where	w.nr_sequencia		= k.nr_seq_conta_mat
		and	c.nr_sequencia		= w.nr_seq_conta
		and	s.nr_sequencia		= c.nr_seq_segurado
		and	p.nr_sequencia		= s.nr_seq_plano		
		and	k.ie_situacao		= 'A'
		and	qt_prest_pgto_w 	= 0
		and	k.nr_seq_lote_pgto	= nr_seq_lote_pgto_w
		and	k.nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
		group by
			coalesce(w.cd_conta_cred, w.cd_conta_provisao_cred),
			w.cd_historico,
			p.ie_preco
		
union all

		-- Pegar informacao do material pela MATERIAL restringindo pelo pagamento NOVO
		select	coalesce(w.cd_conta_cred, w.cd_conta_provisao_cred),
			w.cd_historico,
			null nr_seq_pag_item,
			null nr_seq_pp_prest_valor,
			p.ie_preco,
			coalesce(sum(w.vl_liberado),0) vl_liberado
		from	pls_conta_medica_resumo	k,
			pls_conta_mat		w,
			pls_conta		c,
			pls_segurado		s,
			pls_plano		p
		where	w.nr_sequencia		= k.nr_seq_conta_mat
		and	c.nr_sequencia		= w.nr_seq_conta
		and	s.nr_sequencia		= c.nr_seq_segurado
		and	p.nr_sequencia		= s.nr_seq_plano		
		and	k.ie_situacao		= 'A'
		and	qt_prest_pgto_w 	= 0
		and	k.nr_seq_pp_lote	= nr_seq_pp_lote_w
		and	k.nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
		group by
			coalesce(w.cd_conta_cred, w.cd_conta_provisao_cred),
			w.cd_historico,
			p.ie_preco			
		
union all

		-- Pegar informacao do procedimento pelo PROCEDIMENTO restringindo pelo pagamento ANTIGO
		select	coalesce(w.cd_conta_cred, w.cd_conta_provisao_cred),
			w.cd_historico,
			null nr_seq_pag_item,
			null nr_seq_pp_prest_valor,
			p.ie_preco,
			coalesce(sum(w.vl_liberado),0) vl_liberado
		from	pls_conta_medica_resumo	k,
			pls_conta_proc		w,
			pls_conta		c,
			pls_segurado		s,
			pls_plano		p
		where	w.nr_sequencia	= k.nr_seq_conta_proc
		and	c.nr_sequencia		= w.nr_seq_conta
		and	s.nr_sequencia		= c.nr_seq_segurado
		and	p.nr_sequencia		= s.nr_seq_plano		
		and	k.ie_situacao	= 'A'
		and	qt_prest_pgto_w = 0
		and	k.nr_seq_lote_pgto	= nr_seq_lote_pgto_w
		and	k.nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
		group by
			coalesce(w.cd_conta_cred, w.cd_conta_provisao_cred),
			w.cd_historico,
			p.ie_preco
		
union all

		-- Pegar informacao do procedimento pelo PROCEDIMENTO restringindo pelo pagamento NOVO
		select	coalesce(w.cd_conta_cred, w.cd_conta_provisao_cred),
			w.cd_historico,
			null nr_seq_pag_item,
			null nr_seq_pp_prest_valor,
			p.ie_preco,
			coalesce(sum(w.vl_liberado),0) vl_liberado
		from	pls_conta_medica_resumo	k,
			pls_conta_proc		w,
			pls_conta		c,
			pls_segurado		s,
			pls_plano		p
		where	w.nr_sequencia		= k.nr_seq_conta_proc
		and	c.nr_sequencia		= w.nr_seq_conta
		and	s.nr_sequencia		= c.nr_seq_segurado
		and	p.nr_sequencia		= s.nr_seq_plano		
		and	k.ie_situacao		= 'A'
		and	qt_prest_pgto_w 	= 0
		and	k.nr_seq_pp_lote	= nr_seq_pp_lote_w
		and	k.nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w
		group by
			coalesce(w.cd_conta_cred, w.cd_conta_provisao_cred),
			w.cd_historico,
			p.ie_preco) alias37
	group by cd_conta_contabil,
		cd_historico,
		nr_seq_pag_item,
		nr_seq_pp_ev_valor,
		ie_preco;
		
c_itens_recurso CURSOR FOR
	SELECT	coalesce(r.cd_conta_cred_pag,r.cd_conta_deb),
		r.cd_historico,
		i.nr_sequencia nr_seq_pag_item,
		null nr_seq_pp_ev_valor,
		n.ie_preco,
		sum(r.vl_liberado)
	from	titulo_pagar 			t,
		pls_pag_prest_vencimento	v,
		pls_pagamento_prestador 	p,
		pls_lote_pagamento 		l,
		pls_conta_rec_resumo_item 	r,
		pls_rec_glosa_conta     	g,
		pls_conta			c,
		pls_segurado			s,
		pls_plano			n,
		pls_pagamento_item		i
	where	t.nr_titulo 		= v.nr_titulo
	and	v.nr_seq_pag_prestador 	= p.nr_sequencia
	and	p.nr_seq_lote 		= l.nr_sequencia
	and	l.nr_sequencia 		= r.nr_seq_lote_pgto
	and	r.nr_seq_pag_item 	= i.nr_sequencia
	and	p.nr_sequencia		= i.nr_seq_pagamento
	and	g.nr_sequencia		= r.nr_seq_conta_rec
	and	c.nr_sequencia		= g.nr_seq_conta
	and	s.nr_sequencia		= c.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and	t.nr_titulo 		= nr_titulo_p
	group by coalesce(r.cd_conta_cred_pag,r.cd_conta_deb),
		r.cd_historico,
		i.nr_sequencia,
		n.ie_preco
	
union all

	SELECT	coalesce(r.cd_conta_cred_pag,r.cd_conta_deb),
		r.cd_historico,
		null nr_seq_pag_item,
		v.nr_sequencia nr_seq_pp_ev_valor,
		n.ie_preco,
		sum(r.vl_liberado)
	from	pls_pp_lote			l,
		pls_pp_prestador		p,
		pls_pp_prest_evento_valor	v,
		pls_conta_rec_resumo_item 	r,
		pls_rec_glosa_conta     	g,
		pls_conta			c,
		pls_segurado			s,
		pls_plano			n
	where	l.nr_sequencia		= r.nr_seq_pp_lote
	and	p.nr_seq_prestador	= r.nr_seq_prestador_pgto
	and	l.nr_sequencia		= p.nr_seq_lote
	and	l.nr_sequencia		= v.nr_seq_lote
	and	v.nr_seq_evento		= r.nr_seq_pp_evento
	and	v.nr_seq_prestador	= p.nr_seq_prestador
	and	g.nr_sequencia		= r.nr_seq_conta_rec
	and	c.nr_sequencia		= g.nr_seq_conta
	and	s.nr_sequencia		= c.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and	p.nr_titulo_pagar	= nr_titulo_p
	group by coalesce(r.cd_conta_cred_pag,r.cd_conta_deb),
		r.cd_historico,
		v.nr_sequencia,
		n.ie_preco;
		
c_itens_intercambio CURSOR FOR		
	SELECT	coalesce(w.cd_conta_cred,w.cd_conta_cred_tx_inter_glosa),
		w.cd_historico,
		coalesce(sum(w.vl_liberado),0) vl_liberado,
		sum(coalesce(w.vl_liberado, 0) + coalesce(w.vl_glosa, 0)) vl_apresentado
	from	pls_conta_mat	w,
		pls_conta	a,
		ptu_fatura	b,
		titulo_pagar	t
	where	a.nr_sequencia	= w.nr_seq_conta
	and	b.nr_sequencia	= a.nr_seq_fatura
	and	t.nr_titulo	= b.nr_titulo
	and	t.nr_titulo	= nr_titulo_p
	group by
		coalesce(w.cd_conta_cred,w.cd_conta_cred_tx_inter_glosa),
		w.cd_historico
	
union all

	SELECT	coalesce(w.cd_conta_cred,w.cd_conta_cred_tx_inter_glosa),
		w.cd_historico,
		coalesce(sum(w.vl_liberado),0) vl_liberado,
		sum(coalesce(w.vl_liberado, 0) + coalesce(w.vl_glosa, 0)) vl_apresentado
	from	pls_conta_mat	w,
		pls_conta	a,
		ptu_fatura	b,
		titulo_pagar	t
	where	a.nr_sequencia	= w.nr_seq_conta
	and	b.nr_sequencia	= a.nr_seq_fatura
	and	t.nr_titulo	= b.nr_titulo_ndc
	and	t.nr_titulo	= nr_titulo_p
	group by
		coalesce(w.cd_conta_cred,w.cd_conta_cred_tx_inter_glosa),
		w.cd_historico
	
union all

	select	coalesce(w.cd_conta_cred,w.cd_conta_cred_tx_inter_glosa),
		w.cd_historico,
		coalesce(sum(w.vl_liberado),0) vl_liberado,
		sum(coalesce(w.vl_liberado, 0) + coalesce(w.vl_glosa, 0)) vl_apresentado
	from	pls_conta_proc	w,
		pls_conta	a,
		ptu_fatura	b,
		titulo_pagar	t
	where	a.nr_sequencia	= w.nr_seq_conta
	and	b.nr_sequencia	= a.nr_seq_fatura
	and	t.nr_titulo	= b.nr_titulo
	and	t.nr_titulo	= nr_titulo_p
	group by
		coalesce(w.cd_conta_cred,w.cd_conta_cred_tx_inter_glosa),
		w.cd_historico
	
union all

	select	coalesce(w.cd_conta_cred,w.cd_conta_cred_tx_inter_glosa),
		w.cd_historico,
		coalesce(sum(w.vl_liberado),0) vl_liberado,
		sum(coalesce(w.vl_liberado, 0) + coalesce(w.vl_glosa, 0)) vl_apresentado
	from	pls_conta_proc	w,
		pls_conta	a,
		ptu_fatura	b,
		titulo_pagar	t
	where	a.nr_sequencia	= w.nr_seq_conta
	and	b.nr_sequencia	= a.nr_seq_fatura
	and	t.nr_titulo	= b.nr_titulo_ndc
	and	t.nr_titulo	= nr_titulo_p
	group by
		coalesce(w.cd_conta_cred,w.cd_conta_cred_tx_inter_glosa),
		w.cd_historico;
		
c_itens_reembolso CURSOR FOR
	SELECT	a.cd_conta_cred,
		a.cd_historico,
		n.ie_preco,
		coalesce(sum(a.vl_liberado),0) vl_liberado
	from	pls_conta_proc		a,
		pls_conta		b,
		pls_protocolo_conta	c,
		titulo_pagar		t,
		pls_segurado		s,
		pls_plano		n
	where	c.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_sequencia		= t.nr_seq_reembolso
	and	s.nr_sequencia		= b.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and	c.ie_tipo_protocolo	= 'R'
	and	t.nr_titulo	= nr_titulo_p
	group by
		a.cd_conta_cred,
		a.cd_historico,
		n.ie_preco
	
union all

	SELECT	a.cd_conta_cred,
		a.cd_historico,
		n.ie_preco,
		coalesce(sum(a.vl_liberado),0) vl_liberado
	from	pls_conta_mat		a,
		pls_conta		b,
		pls_protocolo_conta	c,
		titulo_pagar		t,
		pls_segurado		s,
		pls_plano		n
	where	c.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_sequencia		= t.nr_seq_reembolso
	and	s.nr_sequencia		= b.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and	c.ie_tipo_protocolo	= 'R'
	and	t.nr_titulo	= nr_titulo_p
	group by
		a.cd_conta_cred,
		a.cd_historico,
		n.ie_preco
	
union all

	select	a.cd_conta_cred,	
		a.cd_historico,
		n.ie_preco,
		coalesce(sum(a.vl_liberado),0) vl_liberado
	from	pls_conta_proc		a,
		pls_conta		b,
		pls_protocolo_conta	c,
		titulo_pagar		t,
    		titulo_pagar    	u,
		pls_segurado		s,
		pls_plano		n
	where	c.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_sequencia		= u.nr_seq_reembolso
	and	s.nr_sequencia		= b.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
 	and	t.nr_titulo		= nr_titulo_p
  	and 	t.nr_titulo 		= u.nr_titulo_dest
	and	c.ie_tipo_protocolo	= 'R'
	group by
		a.cd_conta_cred,
		a.cd_historico,
		n.ie_preco
    	
union all

	select	a.cd_conta_cred,
		a.cd_historico,
		n.ie_preco,
		coalesce(sum(a.vl_liberado),0) vl_liberado
	from	pls_conta_mat		a,
		pls_conta		b,
		pls_protocolo_conta	c,
		titulo_pagar		t,
    		titulo_pagar    	u,
		pls_segurado		s,
		pls_plano		n
	where	c.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_sequencia		= u.nr_seq_reembolso
	and	s.nr_sequencia		= b.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and	t.nr_titulo		= nr_titulo_p
  	and 	t.nr_titulo 		= u.nr_titulo_dest
	and	c.ie_tipo_protocolo	= 'R'
	group by
		a.cd_conta_cred,
		a.cd_historico,
		n.ie_preco;
		
c_itens_coparticipacao CURSOR FOR
	SELECT	coalesce(l.cd_conta_deb, l.cd_conta_deb_provisao) cd_conta_contabil,
		coalesce(l.cd_historico, l.cd_historico_provisao) cd_historico,
		n.ie_preco,
		coalesce(sum(l.vl_coparticipacao),0) vl_movimento
	from	pls_conta_coparticipacao	k,
		pls_conta_copartic_contab	l,
		pls_conta_proc			a,
		pls_conta			b,
		pls_protocolo_conta		c,
		titulo_pagar			t,
		pls_segurado			s,
		pls_plano			n
	where	c.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_sequencia		= t.nr_seq_reembolso
	and	a.nr_sequencia		= k.nr_seq_conta_proc
	and	k.nr_sequencia		= l.nr_seq_conta_copartic
	and	s.nr_sequencia		= b.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and	c.ie_tipo_protocolo	= 'R'
	and	t.nr_titulo		= nr_titulo_p
	group by
		coalesce(l.cd_conta_deb, l.cd_conta_deb_provisao),
		coalesce(l.cd_historico, l.cd_historico_provisao),
		n.ie_preco
	
union all

	SELECT	coalesce(l.cd_conta_deb, l.cd_conta_deb_provisao) cd_conta_contabil,
		coalesce(l.cd_historico, l.cd_historico_provisao) cd_historico,
		n.ie_preco,
		coalesce(sum(l.vl_coparticipacao),0) vl_movimento
	from	pls_conta_coparticipacao	k,
		pls_conta_copartic_contab	l,
		pls_conta_mat			a,
		pls_conta			b,
		pls_protocolo_conta		c,
		titulo_pagar			t,
		pls_segurado			s,
		pls_plano			n
	where	c.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_sequencia		= t.nr_seq_reembolso
	and	a.nr_sequencia		= k.nr_seq_conta_mat
	and	k.nr_sequencia		= l.nr_seq_conta_copartic
	and	s.nr_sequencia		= b.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and	c.ie_tipo_protocolo	= 'R'
	and	t.nr_titulo		= nr_titulo_p
	group by
		coalesce(l.cd_conta_deb, l.cd_conta_deb_provisao),
		coalesce(l.cd_historico, l.cd_historico_provisao),
		n.ie_preco
	
union all

	select	coalesce(l.cd_conta_deb, l.cd_conta_deb_provisao) cd_conta_contabil,
		coalesce(l.cd_historico, l.cd_historico_provisao) cd_historico,
		n.ie_preco,
		coalesce(sum(l.vl_coparticipacao),0) vl_movimento
	from	pls_conta_coparticipacao	k,
		pls_conta_copartic_contab	l,
		pls_conta_proc			a,
		pls_conta			b,
		pls_protocolo_conta		c,
		titulo_pagar			u,
		titulo_pagar			t,
		pls_segurado			s,
		pls_plano			n
	where	c.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_sequencia		= u.nr_seq_reembolso
	and	a.nr_sequencia		= k.nr_seq_conta_proc
	and	k.nr_sequencia		= l.nr_seq_conta_copartic
	and	s.nr_sequencia		= b.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and 	t.nr_titulo 		= u.nr_titulo_dest
	and	c.ie_tipo_protocolo	= 'R'
	and	t.nr_titulo		= nr_titulo_p
	group by
		coalesce(l.cd_conta_deb, l.cd_conta_deb_provisao),
		coalesce(l.cd_historico, l.cd_historico_provisao),
		n.ie_preco
	
union all

	select	coalesce(l.cd_conta_deb, l.cd_conta_deb_provisao) cd_conta_contabil,
		coalesce(l.cd_historico, l.cd_historico_provisao) cd_historico,
		n.ie_preco,
		coalesce(sum(l.vl_coparticipacao),0) vl_movimento
	from	pls_conta_coparticipacao	k,
		pls_conta_copartic_contab	l,
		pls_conta_mat			a,
		pls_conta			b,
		pls_protocolo_conta		c,
		titulo_pagar			u,
		titulo_pagar			t,
		pls_segurado			s,
		pls_plano			n
	where	c.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_sequencia		= u.nr_seq_reembolso
	and	a.nr_sequencia		= k.nr_seq_conta_mat
	and	k.nr_sequencia		= l.nr_seq_conta_copartic
	and	s.nr_sequencia		= b.nr_seq_segurado
	and	n.nr_sequencia		= s.nr_seq_plano
	and 	t.nr_titulo 		= u.nr_titulo_dest
	and	c.ie_tipo_protocolo	= 'R'
	and	t.nr_titulo		= nr_titulo_p
	group by
		coalesce(l.cd_conta_deb, l.cd_conta_deb_provisao),
		coalesce(l.cd_historico, l.cd_historico_provisao),
		n.ie_preco;
		

c_desdobramento CURSOR FOR
	SELECT	f.cd_conta_contabil,
		null cd_historico,
		sum(f.vl_titulo) vl_movimento
	from	titulo_pagar		t,
		titulo_pagar_classif	f
	where	t.nr_titulo		= f.nr_titulo
	and	t.nr_titulo		= nr_titulo_p
	and	(t.nr_titulo_original IS NOT NULL AND t.nr_titulo_original::text <> '')
	and	t.nr_total_parcelas 	> 1
	and	t.ie_origem_titulo	= '20'
	group by f.cd_conta_contabil;


BEGIN

delete	from titulo_pagar_baixa_ops
where	nr_seq_baixa	= nr_seq_baixa_p
and	nr_titulo	= nr_titulo_p;

select	a.vl_baixa,
	a.dt_baixa
into STRICT	vl_baixa_w,
	dt_baixa_w
from	titulo_pagar_baixa	a
where	a.nr_sequencia	= nr_seq_baixa_p
and	a.nr_titulo	= nr_titulo_p;

select	a.vl_titulo,
	a.ie_origem_titulo,
	a.nr_seq_pls_pag_prest
into STRICT	vl_titulo_w,
	ie_origem_titulo_w,
	nr_seq_pls_pag_prest_w
from	titulo_pagar	a
where	a.nr_titulo	= nr_titulo_p;

if (nr_seq_pls_pag_prest_w IS NOT NULL AND nr_seq_pls_pag_prest_w::text <> '') and (ie_origem_titulo_w = '20') then -- Pagamento antigo
	select	max(p.nr_seq_lote),
		max(p.nr_seq_prestador)
	into STRICT	nr_seq_lote_pgto_w,
		nr_seq_prestador_pgto_w
	from	pls_pagamento_prestador p
	where	p.nr_sequencia	= nr_seq_pls_pag_prest_w;
	
elsif (coalesce(nr_seq_pls_pag_prest_w::text, '') = '') and (ie_origem_titulo_w = '25') then -- Pagamento novo
	select	max(p.nr_seq_lote),
		max(p.nr_seq_prestador)
	into STRICT	nr_seq_pp_lote_w,
		nr_seq_prestador_pgto_w
	from	pls_pp_prestador p
	where	p.nr_titulo_pagar = nr_titulo_p;
end if;
	
select	coalesce(sum(a.vl_imposto),0)
into STRICT	vl_total_imposto_w
from	titulo_pagar_imposto a
where	a.nr_titulo = nr_titulo_p
and	a.ie_pago_prev = 'V';

/* Obtem informacoes para identificar se a baixa e integral. Necessario para diferenciar o campo a ser considerado no cursor de intercambio */

select 	sum(vl_total)
into STRICT	vl_total_conta_w
from (SELECT	sum(a.vl_total) vl_total
	from	pls_conta a,
		titulo_pagar b,
		ptu_fatura c
	where	b.nr_titulo = c.nr_titulo
	and	c.nr_sequencia = a.nr_seq_fatura
	and	b.nr_titulo = nr_titulo_p
	
union all

	SELECT 	sum(a.vl_total) vl_total
	from	pls_conta a,
		titulo_pagar b,
		ptu_fatura c
	where	b.nr_titulo = c.nr_titulo_ndc
	and	c.nr_sequencia = a.nr_seq_fatura
	and	b.nr_titulo = nr_titulo_p) alias3;

/* Se o valor da baixa for igual ao valor total liberado da conta medica, utiliza o vl_liberado*/

if (coalesce(vl_total_conta_w, 0) = coalesce(vl_titulo_w, 0)) then
	nm_atributo_w := 'VL_LIBERADO';
else
	nm_atributo_w := 'VL_APRESENTADO';
end if;


/*select	nvl(sum(a.vl_imposto),0)
into	vl_imposto_w
from	tributo b,
	titulo_pagar_imposto a
where	a.nr_titulo		= nr_titulo_p
and	a.cd_tributo		= b.cd_tributo
and	a.ie_pago_prev		= 'V'
and	nvl(b.ie_saldo_tit_pagar,'S')	= 'S';*/
vl_movimento_total_w	:= 0;
nr_seq_baixa_ops_w	:= null;
vl_imposto_w		:= 0;

if (ie_origem_titulo_w in ('20','25')) then
	open c_eventos_financ;
	loop
	fetch c_eventos_financ into
		cd_conta_contabil_w,
		cd_historico_w,
		nr_seq_pagamento_item_w,
		vl_movimento_w;
	EXIT WHEN NOT FOUND; /* apply on c_eventos_financ */
		begin
		--if	(cd_conta_contabil_w is not null) and

		--	(cd_historico_w is not null) then
		
			if (coalesce(nr_seq_pagamento_item_w,0) <> 0) then
				select  sum(b.vl_evento)
				into STRICT	vl_imposto_w	
				from    pls_pagamento_item a,
					pls_pag_item_trib b,
					pls_pag_prest_venc_trib c
				where   a.nr_sequencia = b.nr_seq_pagamento
				and     c.nr_sequencia = b.nr_seq_venc_trib
				and	a.nr_sequencia = nr_seq_pagamento_item_w;
			end if;

			vl_movimento_w	:= dividir_sem_round((vl_movimento_w - coalesce(vl_imposto_w,0)) * vl_baixa_w, vl_titulo_w - vl_total_imposto_w);
			
			select	max(obter_se_conta_vigente2(a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, dt_baixa_w)),
				max(ctb_obter_classif_conta(a.cd_conta_contabil, a.cd_classificacao, dt_baixa_w)),
				max(a.ie_situacao)
			into STRICT	ie_vigente_w,
				cd_classif_conta_w,
				ie_situacao_w
			from	conta_contabil a
			where	cd_conta_contabil = cd_conta_contabil_w;
			
			cd_classif_conta_nova_w := '';
			cd_conta_nova_w := '';
			
			if 	((ie_vigente_w = 'N' or ie_situacao_w = 'I') and
				((substr(cd_classif_conta_w,1,11) = '2.1.1.1.1.9') or (substr(cd_classif_conta_w,1,11) = '2.1.1.1.2.9')) and (length(cd_classif_conta_w) >= 13)) then			
				
				vl_movimento_novo_w	:= dividir(vl_movimento_w,2);
				vl_movimento_w		:= vl_movimento_w - vl_movimento_novo_w;				
				
				cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '1.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
				cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
				
				if (coalesce(cd_conta_nova_w,'X') <> 'X') then
					cd_conta_contabil_w := cd_conta_nova_w;
				end if;
				
				select	nextval('titulo_pagar_baixa_ops_seq')
				into STRICT	nr_seq_baixa_ops_w
				;
				
				insert into titulo_pagar_baixa_ops(nr_sequencia,
					nr_titulo,
					nr_seq_baixa,
					cd_conta_contabil,
					ie_debito_credito,
					cd_historico,
					nr_lote_contabil,
					vl_movimento,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ie_origem)
				values (nr_seq_baixa_ops_w,
					nr_titulo_p,
					nr_seq_baixa_p,
					cd_conta_contabil_w,
					'D',
					cd_historico_w,
					0,
					CASE WHEN coalesce(vl_movimento_novo_w::text, '') = '' THEN 0  ELSE vl_movimento_novo_w END ,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					'E');
				
				vl_movimento_total_w	:= vl_movimento_total_w + vl_movimento_novo_w;
				
				cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '2.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
				cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);

				if (coalesce(cd_conta_nova_w,'X') <> 'X') then
					cd_conta_contabil_w := cd_conta_nova_w;
				end if;
				
			end if;
			
			select	nextval('titulo_pagar_baixa_ops_seq')
			into STRICT	nr_seq_baixa_ops_w
			;
			
			insert into titulo_pagar_baixa_ops(nr_sequencia,
				nr_titulo,
				nr_seq_baixa,
				cd_conta_contabil,
				ie_debito_credito,
				cd_historico,
				nr_lote_contabil,
				vl_movimento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_origem)
			values (nr_seq_baixa_ops_w,
				nr_titulo_p,
				nr_seq_baixa_p,
				cd_conta_contabil_w,
				'D',
				cd_historico_w,
				0,
				CASE WHEN coalesce(vl_movimento_w::text, '') = '' THEN 0  ELSE vl_movimento_w END ,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				'E');
				
			vl_movimento_total_w	:= vl_movimento_total_w + vl_movimento_w;
		--end if;
		end;
	end loop;
	close c_eventos_financ;
	
	select	pkg_date_utils.start_of(max(dt_mes_competencia), 'MONTH', 0)
	into STRICT	dt_lote_w
	from (SELECT	s.dt_mes_competencia
		from	pls_lote_pagamento	s,
			titulo_pagar		a,
			pls_pagamento_prestador	b
		where	s.nr_sequencia	= b.nr_seq_lote
		and	a.nr_titulo	= nr_titulo_p
		and	b.nr_sequencia	= a.nr_seq_pls_pag_prest
		
union all

		SELECT	l.dt_mes_competencia
		from	pls_pp_lote		l,
			pls_pp_prestador	p
		where	l.nr_sequencia		= p.nr_seq_lote
		and	p.nr_titulo_pagar	= nr_titulo_p) alias2;
	
	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto
	into STRICT	qt_prest_pgto_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'PM'
	and	dt_lote_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_lote_w);
	
	open c_itens_producao;
	loop
	fetch c_itens_producao into	
		cd_conta_contabil_w,
		cd_historico_w,
		nr_seq_pag_item_w,
		nr_seq_pp_ev_valor_w,
		ie_preco_w,
		vl_movimento_w;
	EXIT WHEN NOT FOUND; /* apply on c_itens_producao */
		begin
		--if	(cd_conta_contabil_w is not null) and

		--	(cd_historico_w is not null) then
			if (coalesce(nr_seq_pag_item_w,0) <> 0) then
				select  sum(b.vl_evento)
				into STRICT	vl_imposto_w	
				from    pls_pagamento_item a,
					pls_pag_item_trib b,
					pls_pag_prest_venc_trib c
				where   a.nr_sequencia = b.nr_seq_pagamento
				and     c.nr_sequencia = b.nr_seq_venc_trib
				and	a.nr_sequencia = nr_seq_pag_item_w;

			elsif (coalesce(nr_seq_pp_ev_valor_w,0) <> 0) then
				select	sum(a.vl_tributo)
				into STRICT	vl_imposto_w
				from	pls_pp_prest_evento_valor	a
				where	a.nr_sequencia	= nr_seq_pp_ev_valor_w;
			end if;
			
			select	sum(a.vl_item)
			into STRICT	vl_itens_total_w
			from	pls_pagamento_item a,
				pls_pagamento_prestador b,
				pls_evento c
			where	a.nr_seq_pagamento = b.nr_sequencia
			and	a.nr_seq_evento = c.nr_sequencia
			and	b.nr_seq_prestador = nr_seq_prestador_pgto_w
			and	b.nr_seq_lote = nr_seq_lote_pgto_w
			and	c.ie_tipo_evento = 'P';	
					
			vl_imposto_w := dividir_sem_round(vl_imposto_w * vl_movimento_w, vl_itens_total_w);
			
			vl_movimento_w	:= dividir_sem_round((vl_movimento_w - coalesce(vl_imposto_w,0)) * vl_baixa_w, vl_titulo_w - vl_total_imposto_w);

			select	max(obter_se_conta_vigente2(a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, dt_baixa_w)),
				max(ctb_obter_classif_conta(a.cd_conta_contabil, a.cd_classificacao, dt_baixa_w)),
				max(a.ie_situacao)
			into STRICT	ie_vigente_w,
				cd_classif_conta_w,
				ie_situacao_w
			from	conta_contabil a
			where	cd_conta_contabil = cd_conta_contabil_w;
			
			cd_classif_conta_nova_w := '';
			cd_conta_nova_w := '';
			
			if 	((ie_vigente_w = 'N' or ie_situacao_w = 'I') and
				((substr(cd_classif_conta_w,1,11) = '2.1.1.1.1.9') or (substr(cd_classif_conta_w,1,11) = '2.1.1.1.2.9')) and (length(cd_classif_conta_w) >= 13)) then			
				
				if (ie_preco_w = '1') then
					cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '1.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
					cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
				elsif ((ie_preco_w = '2') or (ie_preco_w = '3')) then
					cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '2.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
					cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
				end if;

				if (coalesce(cd_conta_nova_w,'X') <> 'X') then
					cd_conta_contabil_w := cd_conta_nova_w;
				end if;
				
			end if;
			
			select	nextval('titulo_pagar_baixa_ops_seq')
			into STRICT	nr_seq_baixa_ops_w
			;
			
			insert into titulo_pagar_baixa_ops(nr_sequencia,
				nr_titulo,
				nr_seq_baixa,
				cd_conta_contabil,
				ie_debito_credito,
				cd_historico,
				nr_lote_contabil,
				vl_movimento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_origem)
			values (nr_seq_baixa_ops_w,
				nr_titulo_p,
				nr_seq_baixa_p,
				cd_conta_contabil_w,
				'D',
				cd_historico_w,
				0,
				CASE WHEN coalesce(vl_movimento_w::text, '') = '' THEN 0  ELSE vl_movimento_w END ,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				'P');
				
			vl_movimento_total_w	:= vl_movimento_total_w + vl_movimento_w;
		--end if;
		end;
	end loop;
	close c_itens_producao;
	
	open c_itens_recurso;
	loop
	fetch c_itens_recurso into
		cd_conta_contabil_w,
		cd_historico_w,
		nr_seq_pag_item_w,
		nr_seq_pp_ev_valor_w,
		ie_preco_w,
		vl_movimento_w;
	EXIT WHEN NOT FOUND; /* apply on c_itens_recurso */
		begin
		if (coalesce(nr_seq_pag_item_w,0) <> 0) then
			select  coalesce(sum(c.vl_imposto),0)
			into STRICT	vl_imposto_w	
			from    pls_pagamento_item a,
				pls_pag_item_trib b,
				pls_pag_prest_venc_trib c
			where   a.nr_sequencia = b.nr_seq_pagamento
			and     c.nr_sequencia = b.nr_seq_venc_trib
			and	a.nr_sequencia = nr_seq_pag_item_w;

		elsif (coalesce(nr_seq_pp_ev_valor_w,0) <> 0) then
			select	sum(a.vl_tributo)
			into STRICT	vl_imposto_w
			from	pls_pp_prest_evento_valor	a
			where	a.nr_sequencia	= nr_seq_pp_ev_valor_w;
		end if;
		
		vl_movimento_w	:= dividir_sem_round((vl_movimento_w - coalesce(vl_imposto_w,0)) * vl_baixa_w, vl_titulo_w - vl_total_imposto_w);

		select	max(obter_se_conta_vigente2(a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, dt_baixa_w)),
			max(ctb_obter_classif_conta(a.cd_conta_contabil, a.cd_classificacao, dt_baixa_w)),
			max(a.ie_situacao)
		into STRICT	ie_vigente_w,
			cd_classif_conta_w,
			ie_situacao_w
		from	conta_contabil a
		where	cd_conta_contabil = cd_conta_contabil_w;
		
		cd_classif_conta_nova_w := '';
		cd_conta_nova_w := '';
		
		if	((ie_vigente_w = 'N' or ie_situacao_w = 'I') and
			((substr(cd_classif_conta_w,1,11) = '2.1.1.1.1.9') or (substr(cd_classif_conta_w,1,11) = '2.1.1.1.2.9')) and (length(cd_classif_conta_w) >= 13)) then
			
			if (ie_preco_w = '1') then
				cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '1.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
				cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
			elsif ((ie_preco_w = '2') or (ie_preco_w = '3')) then
				cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '2.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
				cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
			end if;

			if (coalesce(cd_conta_nova_w,'X') <> 'X') then
				cd_conta_contabil_w := cd_conta_nova_w;
			end if;
			
		end if;
	
		select	nextval('titulo_pagar_baixa_ops_seq')
		into STRICT	nr_seq_baixa_ops_w
		;
		
		insert into titulo_pagar_baixa_ops(nr_sequencia,
			nr_titulo,
			nr_seq_baixa,
			cd_conta_contabil,
			ie_debito_credito,
			cd_historico,
			nr_lote_contabil,
			vl_movimento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			ie_origem)
		values (nr_seq_baixa_ops_w,
			nr_titulo_p,
			nr_seq_baixa_p,
			cd_conta_contabil_w,
			'D',
			cd_historico_w,
			0,
			CASE WHEN coalesce(vl_movimento_w::text, '') = '' THEN 0  ELSE vl_movimento_w END ,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			'P');
			
		vl_movimento_total_w	:= vl_movimento_total_w + vl_movimento_w;
		
		end;
	end loop;
	close c_itens_recurso;
	
elsif (ie_origem_titulo_w = '16') then
	open c_itens_intercambio;
	loop
	fetch c_itens_intercambio into	
		cd_conta_contabil_w,
		cd_historico_w,
		vl_liberado_w,
		vl_apresentado_w;
	EXIT WHEN NOT FOUND; /* apply on c_itens_intercambio */
		begin
		
		--if	(cd_conta_contabil_w is not null) and

		--	(cd_historico_w is not null) then


		/* Utiliza o atributo correspondente, de acordo com o o que foi retornado na comparacao do vl_baixa com o vl_Total da conta */

		if (nm_atributo_w = 'VL_APRESENTADO') then
			vl_movimento_w	:= vl_baixa_w * dividir_sem_round(vl_apresentado_w,vl_titulo_w);
		elsif (nm_atributo_w = 'VL_LIBERADO') then
			vl_movimento_w	:= vl_baixa_w * dividir_sem_round(vl_liberado_w,vl_titulo_w);
		end if;
	
		select	nextval('titulo_pagar_baixa_ops_seq')
		into STRICT	nr_seq_baixa_ops_w
		;
		
		insert into titulo_pagar_baixa_ops(nr_sequencia,
			nr_titulo,
			nr_seq_baixa,
			cd_conta_contabil,
			ie_debito_credito,
			cd_historico,
			nr_lote_contabil,
			vl_movimento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			ie_origem)
		values (nr_seq_baixa_ops_w,
			nr_titulo_p,
			nr_seq_baixa_p,
			cd_conta_contabil_w,
			'D',
			cd_historico_w,
			0,
			CASE WHEN coalesce(vl_movimento_w::text, '') = '' THEN 0  ELSE vl_movimento_w END ,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			'I');
			
		vl_movimento_total_w	:= vl_movimento_total_w + vl_movimento_w;
		--end if;
		end;
	end loop;
	close c_itens_intercambio;
elsif (ie_origem_titulo_w in ('6','21')) then
	open c_itens_reembolso;
	loop
	fetch c_itens_reembolso into	
		cd_conta_contabil_w,
		cd_historico_w,
		ie_preco_w,
		vl_movimento_w;
	EXIT WHEN NOT FOUND; /* apply on c_itens_reembolso */
		begin
		--if	(cd_conta_contabil_w is not null) and

		--	(cd_historico_w is not null) then
			vl_movimento_w	:= vl_baixa_w * dividir_sem_round(vl_movimento_w,vl_titulo_w - coalesce(vl_imposto_w,0));
			
			select	max(obter_se_conta_vigente2(a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, dt_baixa_w)),
				max(ctb_obter_classif_conta(a.cd_conta_contabil, a.cd_classificacao, dt_baixa_w)),
				max(a.ie_situacao)
			into STRICT	ie_vigente_w,
				cd_classif_conta_w,
				ie_situacao_w
			from	conta_contabil a
			where	cd_conta_contabil = cd_conta_contabil_w;
			
			cd_classif_conta_nova_w := '';
			cd_conta_nova_w := '';
			
			if 	((ie_vigente_w = 'N' or ie_situacao_w = 'I') and
				((substr(cd_classif_conta_w,1,11) = '2.1.1.1.1.9') or (substr(cd_classif_conta_w,1,11) = '2.1.1.1.2.9')) and (length(cd_classif_conta_w) >= 13)) then			
				
				if (ie_preco_w = '1') then
					cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '1.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
					cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
				elsif ((ie_preco_w = '2') or (ie_preco_w = '3')) then
					cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '2.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
					cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
				end if;

				if (coalesce(cd_conta_nova_w,'X') <> 'X') then
					cd_conta_contabil_w := cd_conta_nova_w;
				end if;
				
			end if;
						
			select	nextval('titulo_pagar_baixa_ops_seq')
			into STRICT	nr_seq_baixa_ops_w
			;
			
			insert into titulo_pagar_baixa_ops(nr_sequencia,
				nr_titulo,
				nr_seq_baixa,
				cd_conta_contabil,
				ie_debito_credito,
				cd_historico,
				nr_lote_contabil,
				vl_movimento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_origem)
			values (nr_seq_baixa_ops_w,
				nr_titulo_p,
				nr_seq_baixa_p,
				cd_conta_contabil_w,
				'D',
				cd_historico_w,
				0,
				CASE WHEN coalesce(vl_movimento_w::text, '') = '' THEN 0  ELSE vl_movimento_w END ,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				'R');
				
			vl_movimento_total_w	:= vl_movimento_total_w + vl_movimento_w;
		--end if;
		end;
	end loop;
	close c_itens_reembolso;
	
	open c_itens_coparticipacao;
	loop
	fetch c_itens_coparticipacao into	
		cd_conta_contabil_w,
		cd_historico_w,
		ie_preco_w,
		vl_movimento_w;
	EXIT WHEN NOT FOUND; /* apply on c_itens_coparticipacao */
		begin
		--if	(cd_conta_contabil_w is not null) and

		--	(cd_historico_w is not null) then
			vl_movimento_w	:= vl_baixa_w * dividir_sem_round(vl_movimento_w,vl_titulo_w - coalesce(vl_imposto_w,0));
			
			select	max(obter_se_conta_vigente2(a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, dt_baixa_w)),
				max(ctb_obter_classif_conta(a.cd_conta_contabil, a.cd_classificacao, dt_baixa_w)),
				max(a.ie_situacao)
			into STRICT	ie_vigente_w,
				cd_classif_conta_w,
				ie_situacao_w
			from	conta_contabil a
			where	cd_conta_contabil = cd_conta_contabil_w;
			
			cd_classif_conta_nova_w := '';
			cd_conta_nova_w := '';
			
			if 	((ie_vigente_w = 'N' or ie_situacao_w = 'I') and
				((substr(cd_classif_conta_w,1,11) = '2.1.1.1.1.9') or (substr(cd_classif_conta_w,1,11) = '2.1.1.1.2.9')) and (length(cd_classif_conta_w) >= 13)) then			
				
				if (ie_preco_w = '1') then
					cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '1.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
					cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
				elsif ((ie_preco_w = '2') or (ie_preco_w = '3')) then
					cd_classif_conta_nova_w := substr(cd_classif_conta_w,1,10) || '2.' || substr(cd_classif_conta_w,13,length(cd_classif_conta_w));
					cd_conta_nova_w := ctb_obter_conta_classif(cd_classif_conta_nova_w, dt_baixa_w, cd_estabelecimento_p);
				end if;

				if (coalesce(cd_conta_nova_w,'X') <> 'X') then
					cd_conta_contabil_w := cd_conta_nova_w;
				end if;
				
			end if;

			/* Os valores de coparticipacao devem ser negativos na classif do titulo, pois a classificacao positiva eh gerada com o valor da coparticipacao somado*/

			vl_movimento_w := vl_movimento_w * -1;
			
			select	nextval('titulo_pagar_baixa_ops_seq')
			into STRICT	nr_seq_baixa_ops_w
			;
			
			insert into titulo_pagar_baixa_ops(nr_sequencia,
				nr_titulo,
				nr_seq_baixa,
				cd_conta_contabil,
				ie_debito_credito,
				cd_historico,
				nr_lote_contabil,
				vl_movimento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_origem)
			values (nr_seq_baixa_ops_w,
				nr_titulo_p,
				nr_seq_baixa_p,
				cd_conta_contabil_w,
				'C',
				cd_historico_w,
				0,
				CASE WHEN coalesce(vl_movimento_w::text, '') = '' THEN 0  ELSE vl_movimento_w END ,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				'C');
				
			vl_movimento_total_w	:= vl_movimento_total_w + vl_movimento_w;
		--end if;
		end;
	end loop;
	close c_itens_coparticipacao;
end if;

open c_desdobramento;
loop
fetch c_desdobramento into	
	cd_conta_contabil_w,
	cd_historico_w,
	vl_movimento_w;
EXIT WHEN NOT FOUND; /* apply on c_desdobramento */
	begin
	select	max(r.cd_historico)
	into STRICT	cd_historico_w
	from	trans_financ_contab	r,
		transacao_financeira	f,
		titulo_pagar_baixa	b
	where	f.nr_sequencia	= r.nr_seq_trans_financ
	and	f.nr_sequencia	= b.nr_seq_trans_fin
	and	b.nr_titulo	= nr_titulo_p
	and	b.nr_sequencia	= nr_seq_baixa_p
	and	r.ie_debito_credito = 'D'
	and	r.nm_atributo = 'VL_PAGAMENTO_OPS';
	
	vl_movimento_w	:= vl_baixa_w * dividir_sem_round(vl_movimento_w,vl_titulo_w);
		
	if (coalesce(cd_historico_w,0) <> 0) then			
		insert into titulo_pagar_baixa_ops(nr_sequencia,
			nr_titulo,
			nr_seq_baixa,
			cd_conta_contabil,
			ie_debito_credito,
			cd_historico,
			nr_lote_contabil,
			vl_movimento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			ie_origem)
		values (nextval('titulo_pagar_baixa_ops_seq'),
			nr_titulo_p,
			nr_seq_baixa_p,
			cd_conta_contabil_w,
			'D',
			cd_historico_w,
			0,
			coalesce(vl_movimento_w,0),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			'P');
			
		vl_movimento_total_w	:= vl_movimento_total_w + vl_movimento_w;	
	end if;
	end;
end loop;
close c_desdobramento;

select	sum(vl_movimento)
into STRICT	vl_movimento_prod_w
from	titulo_pagar_baixa_ops
where	nr_titulo = nr_titulo_p
and	nr_seq_baixa = nr_seq_baixa_p
and	ie_origem	= 'P';

/*Ratear o valor do imposto*/

if (vl_baixa_w <> vl_movimento_total_w) and (coalesce(vl_movimento_prod_w,0) > 0) then
	update	titulo_pagar_baixa_ops
	set	vl_movimento	= vl_movimento + (((vl_baixa_w - vl_movimento_total_w)*vl_movimento)/vl_movimento_prod_w)
	where	nr_titulo = nr_titulo_p
	and	nr_seq_baixa = nr_seq_baixa_p
	and	ie_origem	= 'P';
end if;

select	sum(vl_movimento)
into STRICT	vl_movimento_total_w
from	titulo_pagar_baixa_ops
where	nr_titulo = nr_titulo_p
and	nr_seq_baixa = nr_seq_baixa_p;

/* Arredondamento */

if (vl_baixa_w <> vl_movimento_total_w) then

	select	max(nr_sequencia)
	into STRICT	nr_seq_baixa_maior_valor_w
	from	titulo_pagar_baixa_ops
	where	vl_movimento = (SELECT	max(vl_movimento)
				from 	titulo_pagar_baixa_ops
				where	nr_titulo	= nr_titulo_p
				and	nr_seq_baixa 	= nr_seq_baixa_p)
	and	nr_titulo	= nr_titulo_p
	and	nr_seq_baixa 	= nr_seq_baixa_p;


	update	titulo_pagar_baixa_ops
	set	vl_movimento	= vl_movimento + (vl_baixa_w - vl_movimento_total_w)
	where	nr_sequencia	= nr_seq_baixa_maior_valor_w;
end if;

if (coalesce(nr_seq_baixa_ops_w, 0) <> 0) then
	select	vl_movimento,
		nr_titulo,
		nr_seq_baixa,
		nr_sequencia
	into STRICT	vl_movimento_ww,
		nr_documento_w,
		nr_seq_doc_compl_w,
		nr_doc_analitico_w
	from	titulo_pagar_baixa_ops
	where	nr_sequencia = nr_seq_baixa_ops_w;

	update	ctb_documento a
	set	a.vl_movimento 		= vl_movimento_ww
	where	a.nr_documento 		= nr_documento_w
	and	a.nr_seq_doc_compl 	= nr_seq_doc_compl_w
	and	a.nr_doc_analitico	= nr_doc_analitico_w
	and	a.nm_tabela		= 'TITULO_PAGAR_BAIXA_OPS'
	and	a.cd_tipo_lote_contabil = 36;
end if;
CALL pls_gerar_classif_ops_tit_pg(nr_titulo_p, nr_seq_baixa_p, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_titulo_pagar_baixa_ops ( nr_titulo_p bigint, nr_seq_baixa_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

