-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_dados_guia_imp ( nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_guia_plano_imp_p pls_guia_plano_imp.nr_sequencia%type, nr_seq_guia_plano_p INOUT pls_guia_plano.nr_sequencia%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Consistir dados referente a guia, esta consistências são informações que 
são obrigatórias na Guia e se não existir irá bloquear o recebimento da mesmo
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ x ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qt_benef_valido_w		smallint;
qt_medico_w			smallint;
qt_glosa_w			integer;
qt_procedimento_w		integer;
ie_regra_integracao_aut_w	varchar(1) := 'N';
cd_usuario_plano_imp_w      	pls_guia_plano_imp.cd_usuario_plano%type;
nr_seq_prestador_solic_w	pls_prestador.nr_sequencia%type;
nr_seq_prestador_exec_w		pls_prestador.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_guia_plano_w		pls_guia_plano.nr_sequencia%type;
nr_guia_auditoria_w		pls_auditoria.nr_sequencia%type;
cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
cd_cgc_prest_solic_w		pls_guia_plano_imp.cd_cgc_prest_solic%type;
cd_cpf_prest_solic_w		pls_guia_plano_imp.cd_cpf_prest_solic%type;
cd_prestador_solic_w		pls_guia_plano_imp.cd_prestador_solic%type;
cd_medico_solic_w		pessoa_fisica.cd_pessoa_fisica%type;
nm_profissional_solic_w		pls_guia_plano_imp.nm_profissional_solic%type;
dt_solicitacao_w		pls_guia_plano_imp.dt_solicitacao%type;
nr_seq_cbo_saude_w		cbo_saude.nr_sequencia%type;
cd_cbo_saude_w			pls_guia_plano_imp.cd_cbo_saude%type;
cd_versao_w			pls_guia_plano_imp.cd_versao%type;
ie_valida_zero_w		varchar(1) := 1;
ie_funcao_w			varchar(1) := '1';
nm_beneficiario_w		pls_guia_plano_imp.nm_beneficiario%type;
nr_seq_uni_exec_w		pls_congenere.nr_sequencia%type;
cd_unimed_exec_w		pls_congenere.cd_cooperativa%type;
cd_unimed_benef_w		varchar(4);
ie_existe_w			varchar(1);
ie_consultar_benef_w		pls_param_intercambio_scs.ie_consultar_benef%type;
ie_tipo_prest_w			varchar(2);

C01 CURSOR( 	nr_seq_guia_plano_imp_pc	pls_guia_plano_imp.nr_sequencia%type) FOR

	SELECT	nr_sequencia,
		cd_tabela,
		cd_procedimento,
		ds_procedimento
	from	pls_guia_plano_proc_imp
	where	nr_seq_guia_plano_imp = nr_seq_guia_plano_imp_p;


C02 CURSOR( nr_seq_guia_plano_imp_pc	pls_guia_plano_imp.nr_sequencia%type ) FOR
	SELECT	b.nr_sequencia,
		b.cd_tabela,
		b.cd_material,
		b.ds_material,
		(SELECT	max(a.nr_sequencia)
		from	pls_material a
		where	a.cd_material_ops = b.cd_material) nr_seq_material
	from	pls_guia_plano_mat_imp b
	where	b.nr_seq_guia_plano_imp = nr_seq_guia_plano_imp_p;

BEGIN

select	cd_usuario_plano,
	pls_obter_dados_medico_imp(nr_conselho_prof_solic, pls_obter_sg_uf_tiss(cd_uf_conselho_prof_solic), cd_conselho_prof_solic, 'CP', 'G') cd_medico_solic,
	pls_obter_prestador_imp(cd_cgc_prest_solic, cd_cpf_prest_solic, cd_prestador_solic, '', '', '', 'G') nr_seq_prest_solic,
	pls_obter_prestador_imp('', '', cd_prestador_exec, '', '', '', 'G') nr_seq_prest_exec,
	pls_obter_dados_segurado_imp(cd_usuario_plano, 'SS', 'G') nr_seq_segurado,
	cd_cgc_prest_solic,
	cd_cpf_prest_solic,
	cd_prestador_solic,
	nm_profissional_solic,
	dt_solicitacao,
	(select	max(nr_sequencia)
	from	cbo_saude a
	where	a.cd_cbo	=  cd_cbo_saude
	and	((a.ie_situacao = 'A') or (coalesce(a.ie_situacao::text, '') = ''))) nr_seq_cbo,
	cd_cbo_saude,
	cd_versao,
	nm_beneficiario
into STRICT	cd_usuario_plano_imp_w,
	cd_medico_solic_w,
	nr_seq_prestador_solic_w,
	nr_seq_prestador_exec_w,
	nr_seq_segurado_w,
	cd_cgc_prest_solic_w,
	cd_cpf_prest_solic_w,
	cd_prestador_solic_w,
	nm_profissional_solic_w,
	dt_solicitacao_w,
	nr_seq_cbo_saude_w,
	cd_cbo_saude_w,
	cd_versao_w,
	nm_beneficiario_w
from	pls_guia_plano_imp
where	nr_sequencia = nr_seq_guia_plano_imp_p;

--OS 1680444 - Retirado tratativa devido a criação de nova ocorrência combinada.

--Valida se a versão do TISS enviada no arquivo é a mesma utilizada pela operadora

/*if	( cd_versao_w <> pls_obter_versao_tiss ) then
	pls_gravar_glosa_guia_imp('5028', ' Versão TISS enviada o arquivo ' || cd_versao_w|| ' Guia não foi gerada', nr_seq_guia_plano_imp_p, null, null, nm_usuario_p, cd_estabelecimento_p);
end if;*/


--Valida se existe beneficiário na base, se não existir já gera a glosa e bloqueia a importação
if ( coalesce(nr_seq_segurado_w::text, '') = '' ) then	

	begin
		select	coalesce(ie_consultar_benef,'N')
		into STRICT	ie_consultar_benef_w
		from	pls_param_intercambio_scs
		where	ie_situacao = 'A';
	exception
	when others then
		ie_consultar_benef_w := 'N';
	end;

	if (ie_consultar_benef_w = 'S') then
		cd_unimed_exec_w	:= pls_obter_unimed_estab(cd_estabelecimento_p);
		cd_unimed_benef_w	:= substr(lpad(cd_usuario_plano_imp_w,17,'0'),1,4);

		if ((lpad(cd_unimed_exec_w,4,'0'))::numeric  <> (lpad(cd_unimed_benef_w,4,'0'))::numeric ) then
			nr_seq_segurado_w := ptu_env_pck.ptu_verifica_benef_tiss(cd_usuario_plano_imp_w, nm_beneficiario_w, nm_usuario_p, nr_seq_segurado_w);
		end if;
	end if;

	if (coalesce(nr_seq_segurado_w::text, '') = '' ) then
		CALL pls_gravar_glosa_guia_imp('1001', 'Carteira importada: ' || cd_usuario_plano_imp_w|| ' Guia não foi gerada', nr_seq_guia_plano_imp_p, null, null, nm_usuario_p, cd_estabelecimento_p);
	end if;
end if;

select	count(1)
into STRICT	qt_benef_valido_w
from	pls_segurado		b,
	pls_segurado_carteira	a
where	a.nr_seq_segurado	= b.nr_sequencia
and	a.nr_seq_segurado	= nr_seq_segurado_w
and	b.ie_tipo_segurado	<> 'P'
and (coalesce(a.dt_validade_carteira::text, '') = '' or a.dt_validade_carteira >= clock_timestamp())
and	a.dt_inicio_vigencia <= clock_timestamp();

--Verificar a data de validade da carteira do beneficiário
if ( qt_benef_valido_w = 0 ) then
	CALL pls_gravar_glosa_guia_imp('1017', 'Carteira importada: ' || cd_usuario_plano_imp_w|| ' Guia não foi gerada', nr_seq_guia_plano_imp_p, null, null, nm_usuario_p, cd_estabelecimento_p);

end if;

--Verificar se o prestador existe na base se não existir já gera a glosa e bloqueia a importação
if ( coalesce(nr_seq_prestador_solic_w::text, '') = '' and coalesce(nr_seq_prestador_exec_w::text, '') = '' ) then
	CALL pls_gravar_glosa_guia_imp('1203', 'Cód prestador: ' ||cd_cgc_prest_solic_w||cd_cpf_prest_solic_w||cd_prestador_solic_w||' Guia não foi gerada', nr_seq_guia_plano_imp_p, null,null,  nm_usuario_p,cd_estabelecimento_p);
end if;

--Valida o CBO do médico se o mesmo foi informado e se existe na Base
if ( coalesce(nr_seq_cbo_saude_w::text, '') = '' ) then
	CALL pls_gravar_glosa_guia_imp('1213', 'CBO não informado ou inválido. Médico: ' || nm_profissional_solic_w ||' CBO: '||cd_cbo_saude_w||' Guia não foi gerada', nr_seq_guia_plano_imp_p, null,null, nm_usuario_p, cd_estabelecimento_p);
end if;


begin
	select	CASE WHEN coalesce(cd_cgc::text, '') = '' THEN  'PF'  ELSE 'PJ' END
	into STRICT	ie_tipo_prest_w
	from	pls_prestador
	where	nr_sequencia	= nr_seq_prestador_solic_w;
exception
when others then
	ie_tipo_prest_w := null;
end;

if (ie_tipo_prest_w = 'PJ')  then
	select	count(1)
	into STRICT	qt_medico_w
	from	pls_prestador_medico
	where	nr_seq_prestador 	= nr_seq_prestador_solic_w
	and		cd_medico		= cd_medico_solic_w
	and		ie_situacao		= 'A'
	and		trunc(coalesce(dt_solicitacao_w,clock_timestamp()),'dd') between trunc(coalesce(dt_inclusao,coalesce(dt_solicitacao_w,clock_timestamp())),'dd') and  fim_dia(coalesce(dt_exclusao,coalesce(dt_solicitacao_w,clock_timestamp())));
elsif (ie_tipo_prest_w = 'PF')  then
	qt_medico_w := 1;
end if;


--Verifica se o médico esta vinculado ao prestador
if (qt_medico_w = 0) then
	ie_regra_integracao_aut_w := pls_obter_se_regra_integ_aut(nr_seq_prestador_solic_w,'1210',nm_usuario_p);
	if (ie_regra_integracao_aut_w = 'N') then
		CALL pls_gravar_glosa_guia_imp('1210', 'Cód prestador: ' || nr_seq_prestador_solic_w || ' / Solic.: ' || nm_profissional_solic_w ||' Guia não foi gerada', nr_seq_guia_plano_imp_p, null,null, nm_usuario_p, cd_estabelecimento_p);
	end if;
end if;

--Consiste os procedimentos
for C01_w in C01( nr_seq_guia_plano_imp_p ) loop
	begin
		--Retorna o código do procedimento e a origem já convertidos
		SELECT * FROM pls_gerar_dados_guia_proc_imp( C01_w.cd_procedimento, C01_w.cd_tabela, null, cd_estabelecimento_p, cd_procedimento_w, ie_origem_proced_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w;

		select	count(1)
		into STRICT	qt_procedimento_w
		from	procedimento
		where	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w;

		if ( qt_procedimento_w = 0 ) then
			CALL pls_gravar_glosa_guia_imp('1801', ' Cód procedimento: ' || C01_w.cd_procedimento || ' - ' || C01_w.ds_procedimento ||' Guia não foi gerada', nr_seq_guia_plano_imp_p, C01_w.nr_sequencia, null, nm_usuario_p, cd_estabelecimento_p);
		end if;
	end;
end loop;

--Consiste os materiais
for C02_w in C02( nr_seq_guia_plano_imp_p ) loop
	begin
		if ( coalesce(C02_w.nr_seq_material::text, '') = ''	) then
			CALL pls_gravar_glosa_guia_imp('2001', ' Cód material: ' || C02_w.cd_material || ' - ' || C02_w.ds_material ||' Guia não foi gerada', nr_seq_guia_plano_imp_p, null, C02_w.nr_sequencia, nm_usuario_p, cd_estabelecimento_p);
		end if;
	end;
end loop;


select	count(1)
into STRICT	qt_glosa_w
from	pls_guia_plano_glosa_imp
where	nr_seq_guia_plano_imp = nr_seq_guia_plano_imp_p;

--Se os dados da importação não geraram glosa o sistema gera a guia e aplica as consistências padrão
if ( qt_glosa_w = 0 ) then

	--Obter qual o processo utilizado pela Operadora  1 - Autorização ou 2 - Requisição

	--Por padrão o valor é 1 - Autorização
	ie_funcao_w := pls_obter_param_atend_geral('FA');

	if ( ie_funcao_w = '1' ) then
		nr_seq_guia_plano_w := pls_exec_processo_guia_imp(nm_usuario_p, cd_estabelecimento_p, nr_seq_guia_plano_imp_p, nr_seq_guia_plano_w);
	elsif ( ie_funcao_w = '2' ) then
		nr_seq_guia_plano_w := pls_exec_processo_req_imp(nm_usuario_p, cd_estabelecimento_p, nr_seq_guia_plano_imp_p, nr_seq_guia_plano_w);
	end if;

else
	--Atualizar o status da guia IMP para 2 - Rejeitado
	update	pls_guia_plano_imp
	set	ie_status 	= 2
	where	nr_sequencia	= nr_seq_guia_plano_imp_p;

end if;

nr_seq_guia_plano_p := nr_seq_guia_plano_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_dados_guia_imp ( nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_guia_plano_imp_p pls_guia_plano_imp.nr_sequencia%type, nr_seq_guia_plano_p INOUT pls_guia_plano.nr_sequencia%type) FROM PUBLIC;

