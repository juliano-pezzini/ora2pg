-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_gerar_conta_rubrica ( nr_seq_rubrica_p bigint, ds_origem_p text, ie_origem_valor_p text, cd_registro_sped_p text, ie_operacao_p text default null, dt_referencia_p timestamp default null, nm_usuario_p text DEFAULT NULL, nr_seq_model_relat_p bigint default null) AS $body$
DECLARE


type v_ctb_modelo_rubrica_restricao is table of ctb_modelo_rubrica_rest%rowtype index by integer;
ctb_modelo_rubrica_restricao_w  v_ctb_modelo_rubrica_restricao;

type v_contas_analiticas is table of conta_contabil.cd_conta_contabil%type index by integer;
v_contas_analiticas_w v_contas_analiticas;

type v_contas_titulos is table of v_contas_analiticas index by conta_contabil.cd_conta_contabil%type;
v_contas_titulos_w v_contas_titulos;

nr_seq_rubrica_restricao_w		ctb_modelo_rubrica_rest.nr_sequencia%type;
ds_comando_w			varchar(4000);
ds_conta_w			varchar(4000);
ds_divisor_w			varchar(4000);
ds_dividendo_w			varchar(4000);
cd_conta_w			varchar(40);
cd_centro_w			varchar(40);
ie_pos_mais_w			integer;
ie_pos_menos_w			integer;
ie_pos_mult_w			integer;
ie_pos_div_w			integer;
ie_pos_w			integer;
ie_pos_cc_w			integer;
ie_pos_tipo_cc_w		integer;
ie_sinal_w			varchar(01)	:= '+';
ie_tipo_conta_w			varchar(01);
ie_tipo_custo_w			varchar(40);
ie_tipo_w			varchar(01);
ie_opcao_w			varchar(15);
cd_classif_w			varchar(40);
dt_referencia_w			timestamp;
ie_pos_estab_w			integer;
cd_estab_w			integer;
qt_registro_w			bigint;
cd_classificacao_w		varchar(40);
cd_empresa_w			bigint;
ie_atualizar_w			varchar(10);
nr_seq_rubrica_w		ctb_modelo_rubrica_conta.nr_seq_rubrica%type;
ds_oper_estab_w			ctb_modelo_relat.ds_oper_estab%type;
ds_oper_centro_custo_w		ctb_modelo_relat.ds_oper_centro_custo%type;
ds_oper_tipo_centro_w		ctb_modelo_relat.ds_oper_tipo_centro%type;
ie_is_ifrs_w            varchar(10);

/* opcoes
	'S'	- saldo da conta no mes (tira o encerramento)
	'SC'	- saldo da conta no mes
	'M'	- movimento da conta no mes
	'MA'	- movimento da conta ate o mes
	'MD'	- movimento das contas (somente debitos)
	'MC'	- movimento das contas (somente creditos)
	'MAD'	- movimento ano ate o mes (somente debitos)
	'MAC'	- movimento ano ate o mes (somente creditos)
*/
c01 CURSOR FOR
SELECT	a.cd_conta_contabil
from	conta_contabil a
where	a.cd_empresa	= cd_empresa_w
and	a.ie_situacao	= 'A'
and	a.ie_tipo	= 'A'
and	substr(CTB_Obter_Se_Conta_Classif_Sup(a.cd_conta_contabil, cd_classificacao_w),1,1) = 'S'
and	substr(obter_se_conta_vigente2(cd_conta_contabil,dt_inicio_vigencia, dt_fim_vigencia, dt_referencia_p),1,1) = 'S'
and	not exists (	select	1
			from	ctb_modelo_rubrica_conta y
			where	y.cd_conta_contabil	= a.cd_conta_contabil
			and	y.nr_seq_rubrica	= nr_seq_rubrica_p);

vet01	c01%RowType;

BEGIN

select coalesce(max('S'), 'N')
into STRICT ie_is_ifrs_w

where ie_origem_valor_p in ('IM', 'IMA', 'IMAC', 'IMAD', 'IMASE', 'IMC', 'IMCSE', 'IMD', 'IS', 'ISC');

if (ie_is_ifrs_w = 'N') then

    ds_conta_w			:= ds_origem_p;
    ds_conta_w			:= replace(ds_conta_w,' ',null);
    ie_opcao_w			:= coalesce(ie_origem_valor_p,'S');

    ie_atualizar_w			:= 'S';

        delete from ctb_modelo_rubrica_conta
        where	nr_seq_rubrica	= nr_seq_rubrica_p;

        delete from ctb_modelo_rubrica_rest
        where	nr_seq_rubrica	= nr_seq_rubrica_p;

    begin
    cd_empresa_w	:= obter_empresa_estab(wheb_usuario_pck.get_cd_estabelecimento);
    exception when others then
        select	min(cd_empresa)
        into STRICT	cd_empresa_w
        from	conta_contabil;
    end;

    if (coalesce(cd_empresa_w,0) = 0) then
        select	min(cd_empresa)
        into STRICT	cd_empresa_w
        from	conta_contabil;
    end if;

    begin
    select 	coalesce(trim(both a.ds_oper_estab),'@'),
        coalesce(trim(both a.ds_oper_centro_custo),'#'),
        coalesce(trim(both a.ds_oper_tipo_centro),'T')
    into STRICT 	ds_oper_estab_w,
        ds_oper_centro_custo_w,
        ds_oper_tipo_centro_w
    from	ctb_modelo_relat a
    where 	a.nr_sequencia = nr_seq_model_relat_p;
    exception
      when no_data_found then
        ds_oper_estab_w := '@';
        ds_oper_centro_custo_w := '#';
        ds_oper_tipo_centro_w := 'T';
      when too_many_rows then
        ds_oper_estab_w := '@';
        ds_oper_centro_custo_w := '#';
        ds_oper_tipo_centro_w := 'T';
      when others then
        ds_oper_estab_w := '@';
        ds_oper_centro_custo_w := '#';
        ds_oper_tipo_centro_w := 'T';
    end;

    if (position('-' in ds_conta_w) = 1) then
        ds_conta_w := substr(ds_conta_w, 2);
    end if;

    while(length(ds_conta_w) > 0)  loop
        cd_conta_w		:= null;
        ie_pos_mais_w 		:= position('+' in ds_conta_w);
        ie_pos_menos_w 		:= position('-' in ds_conta_w);
        ie_pos_mult_w 		:= position('*' in ds_conta_w);
        ie_pos_div_w 		:= position('/' in ds_conta_w);

        if (ie_pos_mais_w = 0) and (ie_pos_menos_w = 0) and (ie_pos_div_w = 0) then
            ie_pos_w	:= 0;
        elsif (ie_pos_menos_w > 0) and ((ie_pos_menos_w < ie_pos_mais_w) or (ie_pos_mais_w = 0)) then
            ie_pos_w	:= ie_pos_menos_w;
        elsif (ie_pos_mais_w > 0) and ((ie_pos_mais_w < ie_pos_mult_w) or (ie_pos_mult_w = 0)) then
            ie_pos_w	:= ie_pos_mais_w;
        elsif (ie_pos_mult_w > 0) and ((ie_pos_mult_w < ie_pos_div_w) or (ie_pos_div_w = 0)) then
            ie_pos_w	:= ie_pos_mult_w;
        else
            ie_pos_w	:= ie_pos_div_w;
        end if;

        if (ie_pos_w > 0) then
            cd_conta_w	:= substr(ds_conta_w,1, ie_pos_w - 1);
            ds_conta_w	:= substr(ds_conta_w, ie_pos_w, 4000);

            if (ie_pos_w = 1) then
                cd_conta_w	:= 0;
                ds_conta_w	:= substr('0 ' || ds_conta_w,1,4000);
            end if;
        else
            cd_conta_w	:= ds_conta_w;
            ds_conta_w	:= null;
        end if;

        /*se possui restricao por estabelecimento*/

        ie_pos_estab_w 	:= position(ds_oper_estab_w in cd_conta_w);
        if (ie_pos_estab_w > 0) then
            cd_estab_w	:= substr(cd_conta_w, 1, ie_pos_estab_w - 1);
            cd_conta_w	:= substr(cd_conta_w, ie_pos_estab_w + LENGTH(ds_oper_estab_w), 20);
        end if;

        /*se possui restricao por centro de custo*/

        cd_centro_w		:= null;
        ie_pos_cc_w 		:= position(ds_oper_centro_custo_w in cd_conta_w);
        if (ie_pos_cc_w > 0) then
            cd_centro_w	:= substr(cd_conta_w, ie_pos_cc_w + LENGTH(ds_oper_centro_custo_w), 20);
            cd_conta_w	:= substr(cd_conta_w, 1, ie_pos_cc_w - 1);
        end if;

        /*se possui restricao por tipo de custo*/

        ie_tipo_custo_w		:= null;
        ie_pos_tipo_cc_w		:= position(ds_oper_tipo_centro_w in cd_conta_w);
        if (ie_pos_tipo_cc_w > 0) then

            ie_tipo_custo_w	:= substr(cd_conta_w, ie_pos_tipo_cc_w + LENGTH(ds_oper_tipo_centro_w), 20);
            cd_conta_w	:= substr(cd_conta_w, 1, ie_pos_tipo_cc_w - 1);
        end if;

        select	max(b.ie_tipo),
            max(a.ie_tipo)
        into STRICT	ie_tipo_conta_w,
            ie_tipo_w
        from	ctb_grupo_conta b,
            conta_contabil a
        where	a.cd_grupo		= b.cd_grupo
        and	a.cd_conta_contabil	= cd_conta_w;

        select	max(cd_conta_contabil)
        into STRICT	cd_conta_w
        from	conta_contabil
        where	cd_conta_contabil	= cd_conta_w;

        if (cd_conta_w IS NOT NULL AND cd_conta_w::text <> '') then
            begin
            
            select	count(nr_sequencia)
            into STRICT	qt_registro_w
            from	ctb_modelo_rubrica_conta
            where	nr_seq_rubrica		= nr_seq_rubrica_p
            and	cd_conta_contabil	= cd_conta_w;

            if (ie_tipo_w = 'A') then
                begin
                
                if (qt_registro_w = 0) then
                    insert into ctb_modelo_rubrica_conta(
                        nr_sequencia,
                        nm_usuario,
                        dt_atualizacao,
                        nm_usuario_nrec,
                        dt_atualizacao_nrec,
                        nr_seq_rubrica,
                        cd_conta_contabil)
                    values (	nextval('ctb_modelo_rubrica_conta_seq'),
                        nm_usuario_p,
                        clock_timestamp(),
                        nm_usuario_p,
                        clock_timestamp(),
                        nr_seq_rubrica_p,
                        cd_conta_w);

    
                    if (cd_registro_sped_p <> 'X')and (cd_registro_sped_p = 'J100')then
                        update	conta_contabil
                        set	ie_ecd_reg_bp = 'S',
                            nm_usuario			= nm_usuario_p,
                            dt_atualizacao		= clock_timestamp()
                        where	cd_conta_contabil	= cd_conta_w;
                    end if;

                    if (cd_registro_sped_p <> 'X')and (cd_registro_sped_p = 'J150')then
                        update	conta_contabil
                        set	ie_ecd_reg_dre = 'S',
                            nm_usuario			= nm_usuario_p,
                            dt_atualizacao		= clock_timestamp()
                        where	cd_conta_contabil	= cd_conta_w;
                    end if;
                end if;

		begin
                select	1
                into STRICT	qt_registro_w
                
                where	exists (
                    SELECT	1
                    from	ctb_modelo_rubrica_rest
                    where	nr_seq_rubrica		= nr_seq_rubrica_p
                    and	cd_conta_contabil	= cd_conta_w
                    and	coalesce(cd_estabelecimento,0) = coalesce(cd_estab_w,0)
                    and	coalesce(cd_classificacao,'X') = coalesce(cd_centro_w,'X')
                    and	coalesce(ie_tipo_custo,'X') = coalesce(ie_tipo_custo_w,'X')
                );
                exception
                when no_data_found then
                    qt_registro_w := 0;
                end;

                if (qt_registro_w = 0) then
                    select	nextval('ctb_modelo_rubrica_rest_seq')
                    into STRICT	nr_seq_rubrica_restricao_w
;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count+1].nr_sequencia := nr_seq_rubrica_restricao_w;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].ie_sinal := ie_sinal_w;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].cd_estabelecimento := cd_estab_w;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].cd_classificacao := cd_centro_w;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].ie_tipo_custo := ie_tipo_custo_w;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].nr_seq_rubrica := nr_seq_rubrica_p;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].cd_conta_contabil := cd_conta_w;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].nm_usuario_nrec := nm_usuario_p;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].dt_atualizacao_nrec := clock_timestamp();
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].nm_usuario := nm_usuario_p;
                    ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].dt_atualizacao := clock_timestamp();
                end if;

                end;
            elsif (ie_tipo_w = 'T') then
                begin

                if (ie_operacao_p = 'ECD') and (dt_referencia_p IS NOT NULL AND dt_referencia_p::text <> '') then
                    
                    cd_classificacao_w	:= substr(ctb_obter_classif_conta(cd_conta_w,null,dt_referencia_p),1,40);
                    v_contas_analiticas_w.delete;

                    open C01;
                    loop
                    fetch C01 into	
                        vet01;
                    EXIT WHEN NOT FOUND; /* apply on C01 */
                        begin
                        -- Grava as contas analiticas para usar nas restricoes
                        v_contas_analiticas_w(v_contas_analiticas_w.count+1) := vet01.cd_conta_contabil;

                        insert into ctb_modelo_rubrica_conta(
                            nr_sequencia,
                            nm_usuario,
                            dt_atualizacao,
                            nm_usuario_nrec,
                            dt_atualizacao_nrec,
                            nr_seq_rubrica,
                            cd_conta_contabil)
                        values (	nextval('ctb_modelo_rubrica_conta_seq'),
                            nm_usuario_p,
                            clock_timestamp(),
                            nm_usuario_p,
                            clock_timestamp(),
                            nr_seq_rubrica_p,
                            vet01.cd_conta_contabil);

                        if (cd_registro_sped_p <> 'X')and (cd_registro_sped_p = 'J100')then
                            update	conta_contabil
                            set		ie_ecd_reg_bp = 'S',
                                    nm_usuario	= nm_usuario_p,
                                    dt_atualizacao	= clock_timestamp()
                            where	cd_conta_contabil	= vet01.cd_conta_contabil;
                        end if;

                        if (cd_registro_sped_p <> 'X')and (cd_registro_sped_p = 'J150')then
                            update	conta_contabil
                            set		ie_ecd_reg_dre = 'S',
                                    nm_usuario	= nm_usuario_p,
                                    dt_atualizacao	= clock_timestamp()
                            where	cd_conta_contabil	= vet01.cd_conta_contabil;
                        end if;					
                        end;
                    end loop;
                    close C01;

                    if (v_contas_titulos_w.exists(cd_conta_w) = false) then
                        v_contas_titulos_w(cd_conta_w) := v_contas_analiticas_w;
                    end if;

                    if (v_contas_titulos_w[cd_conta_w].count > 0) then
                        for i in v_contas_titulos_w[cd_conta_w].first..v_contas_titulos_w[cd_conta_w].last loop
                            select  nextval('ctb_modelo_rubrica_rest_seq')
                            into STRICT  nr_seq_rubrica_restricao_w
;

                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count+1].nr_sequencia := nr_seq_rubrica_restricao_w;
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].ie_sinal := ie_sinal_w;
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].cd_estabelecimento := cd_estab_w;
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].cd_classificacao := cd_centro_w;
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].ie_tipo_custo := ie_tipo_custo_w;
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].nr_seq_rubrica := nr_seq_rubrica_p;
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].cd_conta_contabil := v_contas_titulos_w(cd_conta_w)(i);
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].nm_usuario_nrec := nm_usuario_p;
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].dt_atualizacao_nrec := clock_timestamp();
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].nm_usuario := nm_usuario_p;
                            ctb_modelo_rubrica_restricao_w[ctb_modelo_rubrica_restricao_w.count].dt_atualizacao := clock_timestamp();
                        end loop;
                    end if;
                else

                    if (qt_registro_w = 0) then
                    
                        insert into ctb_modelo_rubrica_conta(
                            nr_sequencia,
                            nm_usuario,
                            dt_atualizacao,
                            nm_usuario_nrec,
                            dt_atualizacao_nrec,
                            nr_seq_rubrica,
                            cd_conta_contabil)
                        values (	nextval('ctb_modelo_rubrica_conta_seq'),
                            nm_usuario_p,
                            clock_timestamp(),
                            nm_usuario_p,
                            clock_timestamp(),
                            nr_seq_rubrica_p,
                            cd_conta_w);
                    end if;	

                end if;

                end;
            end if;
            end;
        end if;

        if (ds_conta_w IS NOT NULL AND ds_conta_w::text <> '') and (substr(ds_conta_w,1,1) in ('+','-','*','/')) then
            ie_sinal_w			:= substr(ds_conta_w,1,1);
            ds_conta_w			:= substr(ds_conta_w,2,4000);
        end if;

        if (ctb_modelo_rubrica_restricao_w.count >= 1000) then
            forall i in ctb_modelo_rubrica_restricao_w.first .. ctb_modelo_rubrica_restricao_w.last
                insert into ctb_modelo_rubrica_rest values ctb_modelo_rubrica_restricao_w(i);

            ctb_modelo_rubrica_restricao_w.delete;
        end if;

    end loop;

    if (ctb_modelo_rubrica_restricao_w.count > 0) then
        forall i in ctb_modelo_rubrica_restricao_w.first .. ctb_modelo_rubrica_restricao_w.last
            insert into ctb_modelo_rubrica_rest values ctb_modelo_rubrica_restricao_w(i);

        ctb_modelo_rubrica_restricao_w.delete;
    end if;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_gerar_conta_rubrica ( nr_seq_rubrica_p bigint, ds_origem_p text, ie_origem_valor_p text, cd_registro_sped_p text, ie_operacao_p text default null, dt_referencia_p timestamp default null, nm_usuario_p text DEFAULT NULL, nr_seq_model_relat_p bigint default null) FROM PUBLIC;

