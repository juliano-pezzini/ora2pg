-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_desconto_conta_contab ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


vl_original_w                   pre_faturamento.vl_original%type;
vl_desc_item_conta_w            pre_faturamento.vl_desc_item_conta%type;
vl_desc_item_deduc_w            pre_faturamento.vl_desc_item_deduc%type;
vl_desc_item_neg_w              pre_faturamento.vl_desc_item_neg%type;
ie_conta_deducao_w              conta_pac_deducao_conv.ie_valor_original%type;
i				integer;
nr_sequencia_w                  proc_pac_desc_contab.nr_seq_propaci%type;
vl_procedimento_w	        proc_pac_desc_contab.vl_procedimento%type;
vl_material_w	                mat_atend_pac_desc_contab.vl_material%type;

c01 CURSOR FOR
SELECT  nr_sequencia,
        vl_procedimento,
        qt_procedimento
from    procedimento_paciente
where   nr_interno_conta        = nr_interno_conta_p;

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
type vetor is table of fetch_array index by integer;
vetor_c01_w			vetor;

c02 CURSOR FOR
SELECT  nr_sequencia,
        vl_material,
        qt_material
from    material_atend_paciente
where   nr_interno_conta        = nr_interno_conta_p;

type 		fetch_array02 is table of c02%rowtype;
s_array02 	fetch_array02;
type vetor02 is table of fetch_array02 index by integer;
vetor_c02_w			vetor02;
BEGIN

i       := 0;

open c01;
loop
fetch c01 bulk collect into s_array limit 100000;
	begin
                i       := i + 1;
                vetor_c01_w(i)         := s_array;
	end;
        EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

FOR i IN 1..vetor_c01_w.COUNT LOOP
        s_array         := vetor_c01_w(i);
        for z in 1..s_array.count loop
        begin
                nr_sequencia_w          := s_array[z].nr_sequencia;
                vl_procedimento_w       := s_array[z].vl_procedimento;
                vl_desc_item_conta_w    := obter_desconto_matproc(nr_sequencia_w, 'P');
                vl_original_w           := obter_vl_item_conta_original(nr_sequencia_w, null) * s_array[z].qt_procedimento;
                vl_desc_item_deduc_w    := obter_valor_deducao_item(nr_sequencia_w, null);
                if (vl_original_w IS NOT NULL AND vl_original_w::text <> '') then
                        vl_desc_item_neg_w 	:= vl_original_w - coalesce(vl_procedimento_w, 0) - coalesce(vl_desc_item_conta_w, 0) - coalesce(vl_desc_item_deduc_w, 0);
                end if;

                insert into proc_pac_desc_contab(
                        dt_atualizacao,
                        dt_atualizacao_nrec,
                        nm_usuario,
                        nm_usuario_nrec,
                        nr_atendimento,
                        nr_interno_conta,
                        nr_seq_propaci,
                        nr_sequencia,
                        vl_desc_item_conta,
                        vl_desc_item_deduc,
                        vl_desc_item_neg,
                        vl_original,
                        vl_procedimento)
                values (
                        clock_timestamp(),
                        clock_timestamp(),
                        nm_usuario_p,
                        nm_usuario_p,
                        nr_atendimento_p,
                        nr_interno_conta_p,
                        nr_sequencia_w,
                        nextval('proc_pac_desc_contab_seq'),
                        vl_desc_item_conta_w,
                        vl_desc_item_deduc_w,
                        vl_desc_item_neg_w,
                        vl_original_w,
                        vl_procedimento_w);
                commit;
                end;
        end loop;
end loop;

i       := 0;

open c02;
loop
fetch c02 bulk collect into s_array02 limit 100000;
	begin
                i       := i + 1;
                vetor_c02_w(i)         := s_array02;
	end;
        EXIT WHEN NOT FOUND; /* apply on c02 */
end loop;
close c02;

FOR i IN 1..vetor_c02_w.COUNT LOOP
        s_array02         := vetor_c02_w(i);
        for z in 1..s_array02.count loop
        begin
                nr_sequencia_w              := s_array02[z].nr_sequencia;
                vl_material_w               := s_array02[z].vl_material;
                vl_desc_item_conta_w        := obter_desconto_matproc(nr_sequencia_w, 'M');
                vl_original_w               := obter_vl_item_conta_original(null, nr_sequencia_w) * s_array02[z].qt_material;
                vl_desc_item_deduc_w        := obter_valor_deducao_item(null, nr_sequencia_w);
                if (vl_original_w IS NOT NULL AND vl_original_w::text <> '') then
                        vl_desc_item_neg_w  := vl_original_w - coalesce(vl_material_w, 0) - coalesce(vl_desc_item_conta_w, 0) - coalesce(vl_desc_item_deduc_w, 0);
                end if;

                insert into mat_atend_pac_desc_contab(
                        dt_atualizacao,
                        dt_atualizacao_nrec,
                        nm_usuario,
                        nm_usuario_nrec,
                        nr_atendimento,
                        nr_interno_conta,
                        nr_seq_matpaci,
                        nr_sequencia,
                        vl_desc_item_conta,
                        vl_desc_item_deduc,
                        vl_desc_item_neg,
                        vl_original,
                        vl_material)
                values (
                        clock_timestamp(),
                        clock_timestamp(),
                        nm_usuario_p,
                        nm_usuario_p,
                        nr_atendimento_p,
                        nr_interno_conta_p,
                        nr_sequencia_w,
                        nextval('mat_atend_pac_desc_contab_seq'),
                        vl_desc_item_conta_w,
                        vl_desc_item_deduc_w,
                        vl_desc_item_neg_w,
                        vl_original_w,
                        vl_material_w);
                commit;
                end;
        end loop;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_desconto_conta_contab ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

