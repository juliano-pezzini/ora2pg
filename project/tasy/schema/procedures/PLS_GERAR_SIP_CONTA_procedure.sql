-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_sip_conta ( nr_seq_conta_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_seq_segurado_w		bigint;
nr_seq_protocolo_w		bigint;
nr_seq_prestador_exec_w		bigint;
qt_beneficiario_w		bigint;
ie_sexo_w			varchar(10);
cd_doenca_cid_w			varchar(10);
sg_uf_sip_w			varchar(10)	:= 'NC';
ie_internado_w			varchar(1);
ie_segmentacao_w		varchar(10);
nr_seq_proc_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_item_assistencial_w	bigint;
ie_tipo_guia_w			varchar(2);
nr_seq_cbo_saude_w		bigint;
nr_seq_tipo_atendimento_w	bigint;
nr_seq_clinica_w		bigint;
ie_regime_internacao_w		varchar(10);
ie_tipo_contratacao_w		varchar(10);
cd_item_sip_w			varchar(10);
cd_classificacao_w		varchar(20);
dt_mes_competencia_w		timestamp;
qt_idade_w			smallint;
nr_seq_mat_w			bigint;
nr_seq_material_w		bigint;
ie_parto_normal_w		varchar(1);
qt_nasc_vivos_w			bigint;
ie_nasc_vivos_w			varchar(1)	:= 'S';
qt_evento_w			double precision;
nr_seq_conta_w			bigint;
vl_despesa_w			double precision;
nr_seq_item_assis_w		bigint;
qt_nascido_vivo_w		bigint;
nr_seq_prot_referencia_w	bigint;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_liberado,0)
	from	pls_conta_proc	a
	where	a.nr_seq_conta	= nr_seq_conta_p;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_material,
		coalesce(a.qt_material_imp,0),
		coalesce(a.vl_liberado,0)
	from	pls_conta_mat	a
	where	a.nr_seq_conta	= nr_seq_conta_p;


BEGIN
/* Obter dados da conta */

select	nr_sequencia,
	nr_seq_segurado,
	coalesce(ie_parto_normal,'N')
into STRICT	nr_seq_conta_w,
	nr_seq_segurado_w,
	ie_parto_normal_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_p;

/* Coloquei no select abaixo para tratar a exceção específica para este caso */

begin
select	(coalesce(qt_nasc_vivos_termo,'0'))::numeric  + (coalesce(QT_NASC_VIVOS_PREMATUROS,'0'))::numeric
into STRICT	qt_nasc_vivos_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_p;
exception
when others then
	qt_nasc_vivos_w	:= 0;
end;

if (qt_nasc_vivos_w	= 0) then
	ie_nasc_vivos_w		:= 'N';
end if;

/* Buscar dados da conta do beneficiários da OPS e que sejam contas principais (guia referência nula ou igual a guia principal*/

begin
select	a.nr_seq_segurado,
	a.nr_seq_protocolo,
	a.nr_seq_prestador_exec,
	a.ie_tipo_guia,
	a.nr_seq_cbo_saude,
	a.nr_seq_tipo_atendimento,
	a.nr_seq_clinica,
	a.ie_regime_internacao,
	b.ie_tipo_contratacao,
	b.ie_segmentacao
into STRICT	nr_seq_segurado_w,
	nr_seq_protocolo_w,
	nr_seq_prestador_exec_w,
	ie_tipo_guia_w,
	nr_seq_cbo_saude_w,
	nr_seq_tipo_atendimento_w,
	nr_seq_clinica_w,
	ie_regime_internacao_w,
	ie_tipo_contratacao_w,
	ie_segmentacao_w
from	pls_plano	b,
	pls_conta	a
where	a.nr_sequencia	= nr_seq_conta_p
and	a.nr_seq_plano	= b.nr_sequencia
and	coalesce(a.ie_tipo_segurado,'B')	= 'B';
exception
when others then
	nr_seq_segurado_w	:= null;
end;
if (coalesce(nr_seq_segurado_w,0) <> 0) then
	/* Obter data do protocolo */

	begin
	select	dt_mes_competencia,
		nr_seq_prot_referencia
	into STRICT	dt_mes_competencia_w,
		nr_seq_prot_referencia_w
	from	pls_protocolo_conta
	where	nr_sequencia	= nr_seq_protocolo_w;
	exception
	when others then
		dt_mes_competencia_w		:= null;
		nr_seq_prot_referencia_w	:= null;
	end;

	/* Obter a quantidade de beneficiário */

	select	count(*)
	into STRICT	qt_beneficiario_w
	from	pls_segurado
	where	ie_tipo_segurado 	= 'B'
	and	cd_estabelecimento	= cd_estabelecimento_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	coalesce(dt_rescisao::text, '') = '';

	qt_idade_w	:= pls_obter_idade_segurado(nr_seq_segurado_w, clock_timestamp(), 'A');
	begin
	select	coalesce(ie_sexo,'I')
	into STRICT	ie_sexo_w
	from	pls_segurado	a,
		pessoa_fisica	b
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	a.nr_sequencia		= nr_seq_segurado_w;
	exception
	when others then
		ie_sexo_w := '';
	end;

	/* Obter o CID principal da conta */

	select	max(cd_doenca)
	into STRICT	cd_doenca_cid_w
	from	pls_diagnostico_conta
	where	nr_seq_conta		= nr_seq_conta_p
	and	ie_classificacao	= 'P';

	if (qt_beneficiario_w	> 49999) then
		/* Obter a UF do prestador executor */

		select	coalesce(max(sg_uf_sip),'NC')
		into STRICT	sg_uf_sip_w
		from	pls_prestador
		where	nr_sequencia	= nr_seq_prestador_exec_w;
	end if;

	ie_internado_w	:= pls_obter_se_internado(nr_seq_conta_p, '');
	if	((ie_segmentacao_w in ('1','8')) or
		((ie_segmentacao_w in ('5','6','7','11','12')) and (ie_internado_w = 'N'))) then
		ie_segmentacao_w	:= 1;
	/*	ERRO ANS: Erro ao processar elemento segmentacao. Trimestre de reconhecimento 01/01/2010, forma de contratação individual familiar.
	Operadoras com cobertura hospitalar E obstetrica deverão enviar as informações sobre os itens hospitalares no quadro hospitalarObstetricia.
	Felipe - 29/10/2010 - Coloquei para receber 3 nesse caso também para ser possível enviar o arquivo para o Itamed
	*/
	elsif	((ie_segmentacao_w in ('3','10')) or
		((ie_segmentacao_w in ('7','12')) and (ie_internado_w = 'S'))) then
		ie_segmentacao_w	:= 3;
	elsif	((ie_segmentacao_w in ('2','9')) or
		((ie_segmentacao_w in ('5','6','11')) and (ie_internado_w = 'S'))) then
		ie_segmentacao_w	:= 2;
	elsif (ie_segmentacao_w = '4') then
		ie_segmentacao_w	:= 4;
	end if;
	open C01;
	loop
	fetch C01 into
		nr_seq_proc_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		qt_evento_w,
		vl_despesa_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (nr_seq_prot_referencia_w IS NOT NULL AND nr_seq_prot_referencia_w::text <> '') then
			begin
			select	nr_seq_item_sip,
				cd_item_sip,
				cd_classificacao_sip,
				ie_tipo_contratacao,
				ie_segmentacao_sip,
				sg_uf_sip,
				dt_item_sip
			into STRICT	nr_seq_item_assistencial_w,
				cd_item_sip_w,
				cd_classificacao_w,
				ie_tipo_contratacao_w,
				ie_segmentacao_w,
				sg_uf_sip_w,
				dt_mes_competencia_w
			from	pls_conta_proc	a,
				pls_conta	b
			where	a.nr_seq_conta		= b.nr_sequencia
			and	b.nr_seq_segurado	= nr_seq_segurado_w
			and	a.cd_procedimento	= cd_procedimento_w
			and	a.ie_origem_proced	= ie_origem_proced_w
			and	b.nr_seq_protocolo	= nr_seq_prot_referencia_w;
			exception
			when others then
				nr_seq_item_assistencial_w	:= null;
			end;
		end if;

		if (coalesce(nr_seq_item_assistencial_w::text, '') = '') then
			nr_seq_item_assistencial_w	:= sip_obter_item_assistencial(cd_procedimento_w, ie_origem_proced_w, ie_tipo_guia_w,
									nr_seq_cbo_saude_w, nr_seq_tipo_atendimento_w, nr_seq_clinica_w,
									qt_idade_w, cd_doenca_cid_w, ie_regime_internacao_w,
									'', ie_sexo_w, ie_parto_normal_w, ie_nasc_vivos_w);
		end if;


		begin
		select	cd_item,
			cd_classificacao
		into STRICT	cd_item_sip_w,
			cd_classificacao_w
		from	sip_item_assistencial
		where	nr_sequencia	= nr_seq_item_assistencial_w;
		exception
		when others then
			cd_item_sip_w		:= '';
			cd_classificacao_w	:= '';
		end;

		select	count(*)
		into STRICT	qt_nascido_vivo_w
		from	sip_item_assist_regra
		where	nr_seq_item_assist		= nr_seq_item_assistencial_w
		and	coalesce(ie_nascido_vivo,'N')	= 'S';

		if (qt_nascido_vivo_w	<> 0) then
			qt_evento_w	:= qt_nasc_vivos_w;
		end if;

		select	max(nr_sequencia)
		into STRICT	nr_seq_item_assis_w
		from	sip_mov_item_assistencial
		where	nr_seq_proc	= nr_seq_proc_w
		and	nr_seq_item_sip	= nr_seq_item_assistencial_w;

		if (coalesce(nr_seq_item_assis_w,0)	= 0) then
			insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
				qt_beneficiario, vl_despesa, nr_seq_conta,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
				nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
				sg_uf, cd_item_sip, cd_classificacao_sip,
				dt_item_sip)
			values (nextval('sip_mov_item_assistencial_seq'), cd_estabelecimento_p, qt_evento_w,
				1, vl_despesa_w, nr_seq_conta_w,
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, nr_seq_proc_w, null,
				nr_seq_item_assistencial_w, ie_tipo_contratacao_w, ie_segmentacao_w,
				sg_uf_sip_w, cd_item_sip_w, cd_classificacao_w,
				dt_mes_competencia_w);
		else
			update	sip_mov_item_assistencial
			set	qt_evento		= qt_evento_w,
				qt_beneficiario		= 1,
				vl_despesa		= vl_despesa_w,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				nr_seq_item_sip		= nr_seq_item_assistencial_w,
				ie_tipo_contratacao	= ie_tipo_contratacao_w,
				ie_segmentacao		= ie_segmentacao_w,
				sg_uf			= sg_uf_sip_w,
				cd_item_sip		= cd_item_sip_w,
				cd_classificacao_sip	= cd_classificacao_w,
				dt_item_sip		= dt_mes_competencia_w
			where	nr_sequencia		= nr_seq_item_assis_w;
		end if;

		update	pls_conta_proc
		set	nr_seq_item_sip		= nr_seq_item_assistencial_w,
			cd_item_sip		= cd_item_sip_w,
			cd_classificacao_sip	= cd_classificacao_w,
			ie_tipo_contratacao	= ie_tipo_contratacao_w,
			ie_segmentacao_sip	= ie_segmentacao_w,
			sg_uf_sip		= sg_uf_sip_w,
			dt_item_sip		= dt_mes_competencia_w
		where	nr_sequencia		= nr_seq_proc_w;
		end;
	end loop;
	close C01;

	open C02;
	loop
	fetch C02 into
		nr_seq_mat_w,
		nr_seq_material_w,
		qt_evento_w,
		vl_despesa_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		if (nr_seq_prot_referencia_w IS NOT NULL AND nr_seq_prot_referencia_w::text <> '') then
			begin
			select	nr_seq_item_sip,
				cd_item_sip,
				cd_classificacao_sip,
				ie_tipo_contratacao,
				ie_segmentacao_sip,
				sg_uf_sip,
				dt_item_sip
			into STRICT	nr_seq_item_assistencial_w,
				cd_item_sip_w,
				cd_classificacao_w,
				ie_tipo_contratacao_w,
				ie_segmentacao_w,
				sg_uf_sip_w,
				dt_mes_competencia_w
			from	pls_conta_mat	a,
				pls_conta	b
			where	a.nr_seq_conta		= b.nr_sequencia
			and	b.nr_seq_segurado	= nr_seq_segurado_w
			and	a.nr_seq_material	= nr_seq_material_w
			and	b.nr_seq_protocolo	= nr_seq_prot_referencia_w;
			exception
			when others then
				nr_seq_item_assistencial_w	:= null;
			end;

		end if;

		if (coalesce(nr_seq_item_assistencial_w::text, '') = '') then
		nr_seq_item_assistencial_w	:= sip_obter_item_assistencial(null, null, ie_tipo_guia_w,
									nr_seq_cbo_saude_w, nr_seq_tipo_atendimento_w, nr_seq_clinica_w,
									qt_idade_w, cd_doenca_cid_w, ie_regime_internacao_w,
									nr_seq_mat_w, ie_sexo_w, ie_parto_normal_w, ie_nasc_vivos_w);
		end if;

		begin
		select	cd_item,
			cd_classificacao
		into STRICT	cd_item_sip_w,
			cd_classificacao_w
		from	sip_item_assistencial
		where	nr_sequencia	= nr_seq_item_assistencial_w;
		exception
		when others then
			cd_item_sip_w		:= '';
			cd_classificacao_w	:= '';
		end;

		select	count(*)
		into STRICT	qt_nascido_vivo_w
		from	sip_item_assist_regra
		where	nr_seq_item_assist		= nr_seq_item_assistencial_w
		and	coalesce(ie_nascido_vivo,'N')	= 'S';

		if (qt_nascido_vivo_w	<> 0) then
			qt_evento_w	:= qt_nasc_vivos_w;
		end if;

		select	max(nr_sequencia)
		into STRICT	nr_seq_item_assis_w
		from	sip_mov_item_assistencial
		where	nr_seq_mat	= nr_seq_mat_w
		and	nr_seq_item_sip	= nr_seq_item_assistencial_w;

		if (coalesce(nr_seq_item_assis_w,0)	= 0) then
			insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
				qt_beneficiario, vl_despesa, nr_seq_conta,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
				nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
				sg_uf, cd_item_sip, cd_classificacao_sip,
				dt_item_sip)
			values (nextval('sip_mov_item_assistencial_seq'), cd_estabelecimento_p, qt_evento_w,
				1, vl_despesa_w, nr_seq_conta_w,
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, null, nr_seq_mat_w,
				nr_seq_item_assistencial_w, ie_tipo_contratacao_w, ie_segmentacao_w,
				sg_uf_sip_w, cd_item_sip_w, cd_classificacao_w,
				dt_mes_competencia_w);
		else
			update	sip_mov_item_assistencial
			set	qt_evento		= qt_evento_w,
				qt_beneficiario		= 1,
				vl_despesa		= vl_despesa_w,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				nr_seq_item_sip		= nr_seq_item_assistencial_w,
				ie_tipo_contratacao	= ie_tipo_contratacao_w,
				ie_segmentacao		= ie_segmentacao_w,
				sg_uf			= sg_uf_sip_w,
				cd_item_sip		= cd_item_sip_w,
				cd_classificacao_sip	= cd_classificacao_w,
				dt_item_sip		= dt_mes_competencia_w
			where	nr_sequencia		= nr_seq_item_assis_w;
		end if;

		update	pls_conta_mat
		set	nr_seq_item_sip		= nr_seq_item_assistencial_w,
			cd_item_sip		= cd_item_sip_w,
			cd_classificacao_sip	= cd_classificacao_w,
			ie_tipo_contratacao	= ie_tipo_contratacao_w,
			ie_segmentacao_sip	= ie_segmentacao_w,
			sg_uf_sip		= sg_uf_sip_w,
			dt_item_sip		= dt_mes_competencia_w
		where	nr_sequencia		= nr_seq_mat_w;
		end;
	end loop;
	close C02;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_sip_conta ( nr_seq_conta_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

