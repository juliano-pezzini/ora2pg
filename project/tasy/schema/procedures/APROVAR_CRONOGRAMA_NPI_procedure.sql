-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE aprovar_cronograma_npi ( nr_seq_cronograma_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_projeto_w		bigint;
nr_seq_cliente_w		bigint;
cd_estabelecimento_w	smallint;
cd_funcao_w		integer;
nm_usuario_exec_w	varchar(15);
cd_coordenador_w		varchar(10);
nr_seq_grupo_des_w	bigint;
nr_seq_proj_cron_etp_w	bigint;
ds_etapa_w		varchar(4000);
ds_atividade_w		varchar(255);
nr_sequencia_w		bigint;
dt_inicio_prev_w		timestamp;
dt_fim_prev_w		timestamp;
qt_hora_prev_w		double precision;
qt_horas_total_w		double precision;
qt_horas_rec_w		double precision;
qt_horas_ratiada_w		double precision;
qt_min_ratiada_w		bigint;
qt_partic_etapa_w		integer;
qt_registro_w		bigint;
nr_seq_fase_processo_w	bigint;
nr_seq_cron_sup_w	bigint;
cd_programador_w		varchar(10);
nr_seq_processo_etapa_w	bigint;
nr_seq_area_processo_w	bigint;
nr_seq_estagio_w		man_ordem_servico.nr_seq_estagio%type;
ds_objetivo_w		varchar(80);
nr_seq_etapa_npi_w	bigint;

C01 CURSOR FOR
	SELECT	e.nr_sequencia,
		coalesce(e.ds_etapa,e.ds_atividade) ds_etapa,
		e.ds_atividade,
		coalesce(e.dt_inicio_prev,clock_timestamp()),
		coalesce(e.dt_fim_prev,clock_timestamp()),
		coalesce(e.qt_hora_prev,0),
		nr_seq_processo_etapa,
		nr_seq_etapa_npi
	from	proj_cron_etapa e
	where	e.nr_seq_cronograma = nr_seq_cronograma_p
	and	not exists (	SELECT	1
				from	proj_cron_etapa x
				where	x.nr_seq_superior = e.nr_sequencia)
	and	coalesce(e.ie_gera_os,'S') = 'S';

C02 CURSOR FOR
	SELECT	distinct u.nm_usuario
	from	proj_cron_etapa_equipe e,
		usuario u
	where	u.cd_pessoa_fisica = e.cd_programador
	and	e.nr_seq_etapa_cron = nr_seq_proj_cron_etp_w;

C03 CURSOR FOR
	SELECT	max(e.nr_sequencia)
	from	proj_cronograma e,
		prp_processo_fase p,
		prp_fase_processo f
	where	p.nr_Sequencia = e.nr_seq_processo_fase
	and	f.nr_sequencia = p.nr_seq_fase_processo
	and	f.nr_sequencia in (4,5,6)
	and	e.nr_seq_proj = nr_seq_projeto_w;

BEGIN

select	max(nr_seq_proj)
into STRICT	nr_seq_projeto_w
from	proj_cronograma
where	nr_sequencia = nr_seq_cronograma_p;

select 	count(*)
into STRICT	qt_registro_w
from 	proj_cronograma
where	nr_seq_proj = nr_seq_projeto_w
and	nr_sequencia < nr_seq_cronograma_p
and 	ie_classificacao = 'N'
and 	ie_situacao = 'A'
and	coalesce(dt_aprovacao::text, '') = '';

if (qt_registro_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(268053);
end if;

--verifica se existem etapas sem datas previstas
select	count(b.nr_sequencia)
into STRICT	qt_registro_w
from	proj_cronograma a,
	proj_cron_etapa b
where	a.nr_sequencia = b.nr_seq_cronograma
and	a.nr_sequencia = nr_seq_cronograma_p
and (coalesce(b.dt_inicio_prev::text, '') = '' or coalesce(b.dt_fim_prev::text, '') = '')  LIMIT 1;

if (qt_registro_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(284513);
end if;

-- Verifica se o cronograma tem inicio inferior a  data atual
select 	count(*)
into STRICT	qt_registro_w
from 	proj_cronograma
where	nr_sequencia = nr_seq_cronograma_p
and	trunc(dt_inicio) < trunc(clock_timestamp());

if (qt_registro_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(310826);
end if;

update	proj_cronograma
set	nm_usuario_aprov = nm_usuario_p,
	dt_aprovacao = clock_timestamp()
where	nr_sequencia = nr_seq_cronograma_p;

select	p.nr_seq_cliente,
	p.cd_estabelecimento,
	p.cd_funcao,
	p.cd_coordenador,
	p.nr_seq_grupo_des
into STRICT	nr_seq_cliente_w,
	cd_estabelecimento_w,
	cd_funcao_w,
	cd_coordenador_w,
	nr_seq_grupo_des_w
from 	proj_projeto p
Where 	nr_sequencia = nr_seq_projeto_w;

open C01;
loop
fetch C01 into
	nr_seq_proj_cron_etp_w,
	ds_etapa_w,
	ds_atividade_w,
	dt_inicio_prev_w,
	dt_fim_prev_w,
	qt_hora_prev_w,
	nr_seq_processo_etapa_w,
	nr_seq_etapa_npi_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	nextval('man_ordem_servico_seq')
	into STRICT	nr_sequencia_w
	;

	select	max(e.cd_programador)
	into STRICT	cd_programador_w
	from	proj_cron_etapa_equipe e
	where	e.nr_seq_etapa_cron = nr_seq_proj_cron_etp_w;

	select	max(nr_seq_area_processo)
	into STRICT	nr_seq_area_processo_w
	from	prp_fase_processo_etapa
	where	nr_seq_etapa_processo = nr_seq_etapa_npi_w;

	select 	max(a.ds_objetivo)
	into STRICT 	ds_objetivo_w
	from	prp_etapa_processo a,
		prp_processo_etapa b,
		proj_cron_etapa c
	where	a.nr_sequencia = b.nr_seq_etapa_processo
	and	b.nr_sequencia = c.nr_seq_processo_etapa
	and	b.nr_sequencia = nr_seq_processo_etapa_w
	and 	c.nr_sequencia = nr_seq_cronograma_p;

	if (ds_objetivo_w <> '') then
		ds_objetivo_w := 'Objetivo: ' || ds_objetivo_w;
	end if;

	if (nr_seq_area_processo_w = 3) then --Desenvolvimento / Tecnologia
		nr_seq_estagio_w := 1881;
	elsif (nr_seq_area_processo_w = 4) then --Verificação e Validação
		nr_seq_estagio_w := 1962;
	elsif (nr_seq_area_processo_w = 7) then --Qualidade
		nr_seq_estagio_w := 1963;
	else
		nr_seq_estagio_w := 1964;
	end if;


	insert	into man_ordem_servico(
		nr_sequencia,
		nr_seq_localizacao,
		nr_seq_equipamento,
		cd_pessoa_solicitante,
		dt_ordem_servico,
		ie_prioridade,
		ie_parado,
		ds_dano_breve,
		dt_atualizacao,
		nm_usuario,
		dt_inicio_desejado,
		dt_conclusao_desejada,
		ds_dano,
		dt_inicio_previsto,
		dt_fim_previsto,
		dt_inicio_real,
		dt_fim_real,
		ie_tipo_ordem,
		ie_status_ordem,
		nr_grupo_planej,
		nr_grupo_trabalho,
		nr_seq_tipo_solucao,
		ds_solucao,
		nm_usuario_exec,
		qt_contador,
		nr_seq_planej,
		nr_seq_tipo_contador,
		nr_seq_estagio,
		cd_projeto,
		nr_seq_etapa_proj,
		dt_reabertura,
		cd_funcao,
		nm_tabela,
		ie_classificacao,
		nr_seq_origem,
		nr_seq_projeto,
		ie_grau_satisfacao,
		nr_seq_indicador,
		nr_seq_causa_dano,
		ie_forma_receb,
		nr_seq_cliente,
		nr_seq_grupo_des,
		nr_seq_grupo_sup,
		nr_seq_superior,
		ie_eficacia,
		dt_prev_eficacia,
		cd_pf_eficacia,
		nr_seq_nao_conform,
		nr_seq_complex,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_obriga_news,
		nr_seq_meta_pe,
		nr_seq_classif,
		nr_seq_nivel_valor,
		nm_usuario_lib_news,
		dt_libera_news,
		dt_envio_wheb,
		ds_contato_solicitante,
		ie_prioridade_desen,
		ie_prioridade_sup,
		nr_seq_proj_cron_etapa,
		ie_exclusiva,
		ie_origem_os)
	values (	nr_sequencia_w,					-- nr_sequencia,
		1272,						-- nr_seq_localizacao, (Philips Clinical Informatics - BNU)
		1395,						-- nr_seq_equipamento, (Philips Clinical Informatics - BNU)
		coalesce(cd_programador_w, cd_coordenador_w),				-- cd_pessoa_solicitante,
		clock_timestamp(),					-- dt_ordem_servico,
		'M',	         				-- ie_prioridade,
		'N',						-- ie_parado,
		substr('PRP/NPI: ' ||nr_seq_projeto_w|| ' - ' || ds_atividade_w,1,80), -- ds_dano_breve,
		clock_timestamp(),					-- dt_atualizacao,
		nm_usuario_p,					-- nm_usuario,
		dt_inicio_prev_w,				-- dt_inicio_desejado,
		dt_fim_prev_w,					-- dt_conclusao_desejada,
		substr(ds_etapa_w || chr(13) || ds_objetivo_w,1,4080),	-- ds_dano,
		dt_inicio_prev_w,				-- dt_inicio_previsto,
		dt_fim_prev_w,					-- dt_fim_previsto,
		null,						-- dt_inicio_real,
		null,						-- dt_fim_real,
		'1',						-- ie_tipo_ordem,
		'1',						-- ie_status_ordem,
		'1',						-- nr_grupo_planej,
		'1',						-- nr_grupo_trabalho,
		null,						-- nr_seq_tipo_solucao,
		null,						-- ds_solucao,
		null,				 		-- nm_usuario_exec,
		null,						-- qt_contador,
		null,						-- nr_seq_planej,
		null,						-- nr_seq_tipo_contador,
		nr_seq_estagio_w,			-- nr_seq_estagio,(PRP - Aguardando Etapa)
		null,						-- cd_projeto,
		null,						-- nr_seq_etapa_proj,
		null,						-- dt_reabertura,
		cd_funcao_w,					-- cd_funcao,
		null,						-- nm_tabela,
		'S',						-- ie_classificacao,
		null,						-- nr_seq_origem,
		null,						-- nr_seq_projeto,
		'N',						-- ie_grau_satisfacao,
		null,						-- nr_seq_indicador,
		null,						-- nr_seq_causa_dano,
		'U',						-- ie_forma_receb,
		null,						-- nr_seq_cliente,
		nr_seq_grupo_des_w,				-- nr_seq_grupo_des,
		null,						-- nr_seq_grupo_sup,
		null,						-- nr_seq_superior,
		null,						-- ie_eficacia,
		null,						-- dt_prev_eficacia,
		null,						-- cd_pf_eficacia,
		null,						-- nr_seq_nao_conform,
		null, 						-- nr_seq_complex (Não se Aplica),
		null,						-- dt_atualizacao_nrec,
		nm_usuario_p,					-- nm_usuario_nrec,
		'N',						-- ie_obriga_news,
		null,						-- nr_seq_meta_pe,
		66,						-- nr_seq_classif (Etapa de processo,)
		1,						-- nr_seq_nivel_valor (Agrega Muito valor o Tasy)
		null,						-- nm_usuario_lib_news,
		null,						-- dt_libera_news,
		null,						-- dt_envio_wheb,
		null,						-- ds_contato_solicitante,
		null,						-- ie_prioridade_desen,
		null,						-- ie_prioridade_sup
		nr_seq_proj_cron_etp_w,				-- nr_seq_proj_cron_etapa
		'P',						-- ie_exclusiva
		'8');						-- ie_origem_os
		insert 	into proj_ordem_servico(nr_sequencia,
			nr_seq_proj,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_ordem,
			nr_seq_cron_etapa,
			dt_acordo_projeto,
			dt_proposta_cliente,
			nr_seq_setor_cli,
			ie_virada,
			ie_origem_ordem)
		Values (nextval('proj_ordem_servico_seq'),
			nr_seq_projeto_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_sequencia_w,
			null,
			null,
			null,
			null,
			null,
			'P');

		open C02;
		loop
		fetch C02 into
			nm_usuario_exec_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			select	count(*)
			into STRICT	qt_partic_etapa_w
			from	proj_cron_etapa_equipe e,
				usuario u
			where	u.cd_pessoa_fisica = e.cd_programador
			and	e.nr_seq_etapa_cron = nr_seq_proj_cron_etp_w;

			insert	into man_ordem_servico_exec(dt_atualizacao,
					nm_usuario,
					nm_usuario_exec,
					nr_seq_ordem,
					nr_sequencia,
					qt_min_prev)
				values (clock_timestamp(),
					nm_usuario_p,
					nm_usuario_exec_w,
					nr_sequencia_w,
					nextval('man_ordem_servico_exec_seq'),
					dividir((qt_hora_prev_w*60),qt_partic_etapa_w));

			end;
		end loop;
		close C02;

		qt_horas_rec_w     := qt_hora_prev_w;
		qt_horas_ratiada_w := qt_horas_rec_w;

		for i in 1..ceil(dividir(qt_horas_rec_w,(qt_partic_etapa_w*8))) loop
			begin

			if (qt_horas_ratiada_w > (qt_partic_etapa_w*8)) then
				qt_horas_ratiada_w:= (qt_horas_ratiada_w-(qt_partic_etapa_w*8));
				qt_min_ratiada_w:= (qt_partic_etapa_w*480);
			else
				qt_min_ratiada_w:= (substr(to_char(qt_horas_ratiada_w,'000.00'),1,4)*60) + substr(to_char(qt_horas_ratiada_w,'000.00'),6,7);
			end if;

			dt_inicio_prev_w:= dt_inicio_prev_w+1;
			while(Obter_Se_Dia_Util(dt_inicio_prev_w,cd_estabelecimento_w) = 'N') loop
				begin
				dt_inicio_prev_w:=dt_inicio_prev_w+1;
				end;
			end loop;

			open C02;
			loop
			fetch C02 into
				nm_usuario_exec_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin

				insert into man_ordem_ativ_prev(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					nr_seq_ordem_serv,
					dt_prevista,
					qt_min_prev,
					nm_usuario_prev,
					ie_prioridade_desen,
					nr_seq_ativ_exec)
				values (nextval('man_ordem_ativ_prev_seq'),
					clock_timestamp(),
					nm_usuario_p,
					nr_sequencia_w,
					trunc(dt_inicio_prev_w),
					trunc(dividir(qt_min_ratiada_w,qt_partic_etapa_w)),
					nm_usuario_exec_w,
					10,
					10);

				end;
			end loop;
			close C02;

			end;
		end loop;
	end;
end loop;
close C01;

commit;

if (nr_seq_projeto_w > 0) and (nr_seq_cronograma_p > 0) then

	select	min(c.dt_inicio_prev),
		max(c.dt_fim_prev)
	into STRICT	dt_inicio_prev_w,
		dt_fim_prev_w
	from	proj_cron_etapa c,
		proj_cronograma b,
		prp_processo_fase a
	where	b.nr_sequencia = c.nr_seq_cronograma
	and	a.nr_sequencia = b.nr_seq_processo_fase
	and	b.nr_sequencia = nr_seq_cronograma_p;

	update	prp_processo_fase
	set	dt_inicio_prev_atual = dt_inicio_prev_w,
		dt_fim_prev_atual = dt_fim_prev_w
	where	nr_sequencia = (	SELECT	a.nr_sequencia
					from	prp_processo_fase a,
						proj_cronograma b
					where	a.nr_sequencia = b.nr_seq_processo_fase
					and	b.nr_sequencia = nr_seq_cronograma_p);

	select	min(c.dt_inicio_prev),
		max(c.dt_fim_prev)
	into STRICT	dt_inicio_prev_w,
		dt_fim_prev_w
	from	proj_cron_etapa c,
		proj_cronograma b,
		prp_processo_fase a
	where	b.nr_sequencia = c.nr_seq_cronograma
	and	a.nr_sequencia = b.nr_seq_processo_fase
	and	b.nr_Seq_proj = nr_seq_projeto_w;

	update	prp_processo
	set	dt_inicio_processo = dt_inicio_prev_w,
		dt_fim_previsto_atual = dt_fim_prev_w
	where	nr_seq_projeto = nr_seq_projeto_w;



	select	max(f.nr_sequencia)
	into STRICT	nr_seq_fase_processo_w
	from	proj_cronograma e,
		prp_processo_fase p,
		prp_fase_processo f
	where	p.nr_Sequencia = e.nr_seq_processo_fase
	and	f.nr_sequencia = p.nr_seq_fase_processo
	and	e.nr_seq_proj = nr_seq_projeto_w;

	if (nr_seq_fase_processo_w = 3) then
		open C03;
		loop
		fetch C03 into
			nr_seq_cron_sup_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			CALL aprovar_cronograma_npi(nr_seq_cron_sup_w,nm_usuario_p);
			end;
		end loop;
		close C03;
	end if;

	commit;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE aprovar_cronograma_npi ( nr_seq_cronograma_p bigint, nm_usuario_p text) FROM PUBLIC;

