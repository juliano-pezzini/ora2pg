-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_regra_valor_conta ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, ie_origem_regra_p text, nm_usuario_p text) AS $body$
DECLARE

				
/* ie_tipo_item_p
	P - Procedimento
	M - Material
*/
nr_seq_item_w			bigint;
vl_apresentado_w			double precision	:= 0;
vl_calculado_w			double precision	:= 0;
vl_total_calculado_w		double precision	:= 0;
vl_liberado_w			double precision	:= 0;
vl_glosa_w			double precision	:= 0;
vl_total_procedimento_w		double precision	:= 0;
nr_seq_regra_w			bigint;
nr_seq_regra_ww			bigint;
ie_apresentado_menor_w		varchar(1);
ie_tipo_conta_w			varchar(10);
ie_tipo_valor_w			bigint;
ie_tipo_valor_ww			bigint;
ie_regra_liberacao_w		bigint;
ie_tipo_despesa_proc_w		varchar(5);
ie_tipo_despesa_mat_w		varchar(5);
nr_seq_protocolo_w		bigint;
nr_seq_prestador_w		bigint;
cd_estabelecimento_w		bigint;
ie_autorizado_w			varchar(1);
vl_medico_w			double precision;
vl_anestesista_w			double precision;
vl_auxiliares_w			double precision;
vl_custo_operacional_w		double precision;
vl_materiais_w			double precision;
ie_origem_conta_w			varchar(10);
nr_seq_prestador_exec_w		bigint;
cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
ie_tipo_despesa_w			varchar(2);
ie_tipo_guia_w			varchar(2);
nr_seq_grupo_rec_w		bigint;
nr_seq_material_w			bigint;
nr_seq_estrut_mat_w		bigint;
qt_glosa_inter_taxa_w		bigint;
ie_gerar_glosa_valor_zerado_w	varchar(10);
nr_seq_estrut_regra_w		bigint;
nr_seq_mat_regra_w		bigint;
ie_estrut_mat_w			varchar(1);
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
vl_pag_medico_conta_w		double precision;
nr_seq_regra_qtde_exec_w		bigint;
vl_participante_w			double precision;
nr_seq_tipo_prestador_w		bigint;
nr_seq_proc_partic_w		bigint;
vl_calculado_partic_w		double precision;
vl_liberado_partic_w		double precision;
ie_participante_w			varchar(1):= 'N';
nr_seq_conta_w			bigint;
qt_prestador_partic_w		bigint;
vl_tolerancia_1705_w		double precision;
vl_tolerancia_1706_w		double precision;
ie_valor_apres_zerado_w		varchar(1);
nr_seq_pacote_w			pls_pacote.nr_sequencia%type;
ie_evento_w			varchar(10) := 'CC';
nr_seq_regra_tx_inter_w		pls_conta_proc.nr_seq_regra_tx_inter%type;
vl_taxa_co_imp_w          		pls_conta_proc.vl_taxa_co_imp%type	:= 0;
vl_taxa_material_imp_w		pls_conta_proc.vl_taxa_material_imp%type:= 0;
vl_taxa_servico_imp_w     		pls_conta_proc.vl_taxa_servico_imp%type	:= 0;
cd_estabelecimento_logado_w	estabelecimento.cd_estabelecimento%type;
cd_estab_regra_w			estabelecimento.cd_estabelecimento%type;
ie_restringe_estab_w		varchar(1):= 'N';
vl_unitario_apresentado_w		pls_conta_proc.vl_unitario_imp%type	:= 0;
tx_prestador_item_w		pls_conta_proc.tx_prestador_item%type := 0;
vl_liberado_regra_w			pls_conta_proc.vl_liberado_regra%type := 0;
ie_ocorrencia_w			pls_controle_estab.ie_ocorrencia%type := 'N';
/* 
	IE_TIPO_VALOR - 3819
	IE_REGRA_LIBERACAO - 3818	
*/
ie_tipo_item_w			varchar(1):= '';	

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		coalesce(a.vl_procedimento_imp,0),
		coalesce(a.vl_procedimento,0),
		coalesce(a.vl_medico,0),
		coalesce(a.vl_anestesista,0),
		coalesce(a.vl_auxiliares,0),
		coalesce(a.vl_custo_operacional,0),
		coalesce(a.vl_materiais,0),
		coalesce(a.vl_total_procedimento,0),
		a.ie_tipo_despesa,
		a.cd_procedimento,
		a.ie_origem_proced,
		b.nr_seq_prestador_exec,
		a.ie_tipo_despesa,
		a.nr_sequencia,
		coalesce(a.vl_pag_medico_conta,0),
		a.nr_seq_regra_qtde_exec,
		a.nr_seq_pacote,
		a.nr_seq_regra_tx_inter,
		a.vl_taxa_co_imp,
		a.vl_taxa_material_imp,
		a.vl_taxa_servico_imp,
		a.vl_unitario_imp,
		coalesce(a.tx_prestador_item, 0)
	from	pls_conta_proc a,
		pls_conta b
	where	b.nr_sequencia	= a.nr_seq_conta
	and	b.nr_sequencia	= nr_seq_conta_p
	and	a.ie_status in ('A', 'C', 'L', 'P', 'S', 'U');
	
C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_material,
		coalesce(a.vl_material_imp,0),
		coalesce(a.vl_material,0),
		a.ie_tipo_despesa,
		a.ie_autorizado,
		b.nr_seq_prestador_exec,
		a.nr_sequencia,
		a.nr_seq_pacote,
		a.nr_seq_regra_tx_inter,
		a.vl_taxa_material_imp,
		a.vl_unitario_imp,
		coalesce(a.tx_prestador_item,0) --se vier nulo retorna 100, pois a tx_adm nao gerar alteracao no valor
	from	pls_conta_mat	a,
		pls_conta	b
	where	a.nr_seq_conta	= b.nr_sequencia
	and	b.nr_sequencia	= nr_seq_conta_p
	and	a.ie_status in ('A', 'C', 'L', 'P', 'S', 'U');

C03 CURSOR FOR
	SELECT	nr_sequencia,
		ie_tipo_valor,
		ie_regra_liberacao,
		nr_seq_estrutura_mat,
		nr_seq_material,
		ie_valor_apres_zerado,
		cd_estabelecimento
	from	pls_regra_valor_conta
	where	ie_situacao = 'A'
	and	(
		((ie_tipo_conta = 'A') or (ie_tipo_conta = ie_tipo_conta_w))
		or (ie_tipo_conta = 'IC' AND ie_tipo_conta_w = 'C')
		or (ie_tipo_conta = 'IP' AND ie_tipo_conta_w = 'I') 
		or ((ie_tipo_conta = 'I') and (ie_tipo_conta_w in ('C','I')))
		)	
	and	(((((nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') or (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '')) and	
		((coalesce(ie_tipo_despesa_proc::text, '') = '') or (ie_tipo_despesa_proc  = ie_tipo_despesa_proc_w)) and	
		((coalesce(cd_procedimento::text, '') = '') or (cd_procedimento 	 = cd_procedimento_w and ie_origem_proced = ie_origem_proced_w)) and
		((coalesce(nr_seq_grupo_servico::text, '') = '') or (pls_se_grupo_preco_servico(nr_seq_grupo_servico, cd_procedimento_w, ie_origem_proced_w) = 'S')) and (coalesce(ie_tipo_despesa_mat::text, '') = '') and (coalesce(nr_seq_material::text, '') = '') and (coalesce(nr_seq_grupo_material::text, '') = ''))) or

		(((nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') or (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') or (nr_seq_estrut_mat_w IS NOT NULL AND nr_seq_estrut_mat_w::text <> '')) and
		((coalesce(ie_tipo_despesa_mat::text, '') = '') or (ie_tipo_despesa_mat = ie_tipo_despesa_mat_w)) and
		((coalesce(nr_seq_grupo_material::text, '') = '') or (pls_se_grupo_preco_material(nr_seq_grupo_material, nr_seq_material_w) = 'S'))	and (coalesce(cd_procedimento::text, '') = '') and (coalesce(nr_seq_grupo_servico::text, '') = '') and (coalesce(ie_tipo_despesa_proc::text, '') = '')))
	and	((coalesce(nr_seq_prestador_exec::text, '') = '')	or (nr_seq_prestador_exec = nr_seq_prestador_exec_w ))
	and	((coalesce(ie_origem_conta::text, '') = '') 	or (ie_origem_conta 	= coalesce(ie_origem_conta_w, ie_origem_conta)))
	and	((coalesce(vl_apresentado_max::text, '') = '')	or (vl_apresentado_max 	>= vl_apresentado_w) or (vl_apresentado_max = 0))
	and	((coalesce(vl_uni_apres_max::text, '') = '')	or (vl_uni_apres_max	>= vl_unitario_apresentado_w) or (vl_uni_apres_max = 0))
	and	((coalesce(ie_tipo_guia::text, '') = '')	or (ie_tipo_guia	= ie_tipo_guia_w))
	and	((coalesce(ie_participante::text, '') = '')	or (ie_participante 	= 'A') or (ie_participante = ie_participante_w))
	and	((coalesce(nr_seq_grupo_rec::text, '') = '')	or (nr_seq_grupo_rec 	= nr_seq_grupo_rec_w))
	and	((coalesce(nr_Seq_tipo_prestador::text, '') = '')	or (nr_seq_tipo_prestador = coalesce( nr_seq_tipo_prestador_w,0))) 
	and	((coalesce(ie_valida_periodo_taxa_inter::text, '') = '')or (ie_valida_periodo_taxa_inter = 'N')or (ie_valida_periodo_taxa_inter = 'S' and coalesce(nr_seq_regra_tx_inter_w::text, '') = ''))
	and	((coalesce(nr_seq_grupo_prestador::text, '') = '') or (	exists (	SELECT	1 
										from	table(pls_grupos_pck.obter_prestadores_grupo(nr_seq_grupo_prestador)) x 
										where	x.nr_seq_prestador = nr_seq_prestador_exec_w )))
	order by
		coalesce(ie_valida_periodo_taxa_inter,'A'),
		coalesce(nr_seq_grupo_rec,0),
		coalesce(ie_tipo_guia,0),
		coalesce(cd_procedimento,0),
		coalesce(nr_seq_grupo_servico,0),
		coalesce(nr_seq_prestador_exec,0),
		coalesce(ie_tipo_despesa_proc,'A'),
		coalesce(ie_tipo_despesa_mat,'A'),
		coalesce(ie_participante,'A'),
		coalesce(ie_tipo_conta,'A'),	
		coalesce(ie_origem_conta,'A'),
		coalesce(nr_Seq_tipo_prestador,0),
		coalesce(nr_seq_estrutura_mat,0),
		coalesce(nr_seq_material,0),		
		coalesce(vl_apresentado_max,0),
		coalesce(vl_uni_apres_max,0) desc,
		coalesce(nr_seq_grupo_prestador, 0);	


BEGIN
ie_ocorrencia_w := pls_obter_se_controle_estab('GO');
cd_estabelecimento_logado_w := wheb_usuario_pck.get_cd_estabelecimento;

select  coalesce(max(ie_cad_conta_medica), 'N')
into STRICT	ie_restringe_estab_w
from	pls_controle_estab;

/* Obter dados da conta */

select	coalesce(ie_tipo_conta,'O'),
	nr_seq_protocolo,
	ie_origem_conta,
	ie_tipo_guia,
	nr_seq_prestador_exec
into STRICT	ie_tipo_conta_w,
	nr_seq_protocolo_w,
	ie_origem_conta_w,
	ie_tipo_guia_w,
	nr_seq_prestador_exec_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_p;

if (ie_tipo_conta_w = 'I') then
	ie_evento_w		:= 'I5';
end if;

if (coalesce(nr_seq_prestador_exec_w,0) > 0) then			
	select	max(nr_seq_tipo_prestador)
	into STRICT	nr_seq_tipo_prestador_w
	from 	pls_prestador
	where 	nr_sequencia = nr_seq_prestador_exec_w;			
end if;

/* Obter dados do protocolo */

select 	nr_seq_prestador,
	cd_estabelecimento
into STRICT	nr_seq_prestador_w,
	cd_estabelecimento_w
from	pls_protocolo_conta
where	nr_sequencia	= nr_seq_protocolo_w;

if (coalesce(cd_estabelecimento_logado_w::text, '') = '') then
	cd_estabelecimento_logado_w := cd_estabelecimento_w;
end if;

begin
	select	coalesce(ie_gerar_glosa_valor_zerado,'S')
	into STRICT	ie_gerar_glosa_valor_zerado_w
	from	pls_parametros
	where	cd_estabelecimento	= cd_estabelecimento_w;
exception
when others then
	ie_gerar_glosa_valor_zerado_w:= 'S';
end;

/*Obtem  regra de valor somente do procedimento*/

if (coalesce(nr_seq_conta_proc_p,0) > 0) then
	ie_tipo_item_w	:= 'P';

	select	a.nr_sequencia,
		coalesce(a.vl_procedimento_imp,0),
		coalesce(a.vl_procedimento,0),
		coalesce(a.vl_medico,0),
		coalesce(a.vl_anestesista,0),
		coalesce(a.vl_auxiliares,0),
		coalesce(a.vl_custo_operacional,0),
		coalesce(a.vl_materiais,0),
		coalesce(a.vl_total_procedimento,0),
		coalesce(a.vl_pag_medico_conta,0),
		a.ie_tipo_despesa,
		a.cd_procedimento,
		a.ie_origem_proced,
		b.nr_seq_prestador_exec,
		a.ie_tipo_despesa,
		a.nr_seq_regra_qtde_exec,
		b.nr_sequencia,
		a.nr_seq_pacote,
		a.nr_seq_regra_tx_inter,
		a.vl_taxa_co_imp,
		a.vl_taxa_material_imp,
		a.vl_taxa_servico_imp,
		a.vl_unitario_imp,
		coalesce(a.tx_prestador_item, 0)
	into STRICT	nr_seq_item_w,
		vl_apresentado_w,
		vl_calculado_w,
		vl_medico_w,
		vl_anestesista_w,
		vl_auxiliares_w,
		vl_custo_operacional_w,
		vl_materiais_w,
		vl_total_procedimento_w,
		vl_pag_medico_conta_w,
		ie_tipo_despesa_proc_w,		
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_prestador_exec_w,
		ie_tipo_despesa_w,
		nr_seq_regra_qtde_exec_w,
		nr_seq_conta_w,
		nr_seq_pacote_w,
		nr_seq_regra_tx_inter_w,
		vl_taxa_co_imp_w,
		vl_taxa_material_imp_w,
		vl_taxa_servico_imp_w,
		vl_unitario_apresentado_w,
		tx_prestador_item_w
	from	pls_conta_proc a,
		pls_conta b
	where	b.nr_sequencia	= a.nr_seq_conta
	and	a.nr_sequencia	= nr_Seq_conta_proc_p;
	
	begin
		if (ie_ocorrencia_w = 'N') then
			select	a.vl_tolerancia_glosa
			into STRICT	vl_tolerancia_1705_w
			from	pls_regra_lanc_glosa a,
				tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and	a.ie_situacao	= 'A'
			and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tipo_despesa_w))
			and	b.cd_motivo_tiss = '1705';
		else
			select	a.vl_tolerancia_glosa
			into STRICT	vl_tolerancia_1705_w
			from	pls_regra_lanc_glosa a,
				tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and	a.ie_situacao	= 'A'
			and	b.cd_motivo_tiss = '1705'
			and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tipo_despesa_w))
			and	a.cd_estabelecimento = cd_estabelecimento_w;
		end if;
	exception
	when others then
		vl_tolerancia_1705_w	:= 0;
	end;
	
	begin
		if (ie_ocorrencia_w = 'N') then
			select	max(a.vl_tolerancia_glosa)
			into STRICT	vl_tolerancia_1706_w
			from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and		a.ie_situacao	= 'A'
			and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tipo_despesa_w))
			and		b.cd_motivo_tiss = '1706';
		else
			select	max(a.vl_tolerancia_glosa)
			into STRICT	vl_tolerancia_1706_w
			from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and		a.ie_situacao	= 'A'
			and		b.cd_motivo_tiss = '1706'
			and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tipo_despesa_w))
			and		a.cd_estabelecimento = cd_estabelecimento_w;
		end if;
	exception
	when others then
		vl_tolerancia_1706_w	:= 0;
	end;
	
	ie_participante_w := pls_obter_se_conta_partic(nr_seq_conta_w, nm_usuario_p);	
	
	if (coalesce(nr_seq_prestador_exec_w,0) > 0) then		
			
		select	max(nr_seq_tipo_prestador)
		into STRICT	nr_seq_tipo_prestador_w
		from 	pls_prestador
		where 	nr_sequencia	= nr_seq_prestador_exec_w;		
	
	end if;
	
	nr_seq_regra_w := 0;	/*Diego 26/05/2011 - OS 323656 - Limpar a variavel*/
	select	max(nr_seq_grupo_rec)
	into STRICT	nr_seq_grupo_rec_w
	from	procedimento
	where	cd_procedimento		= cd_procedimento_w
	and	ie_origem_proced	= ie_origem_proced_w;
	

	if (ie_tipo_despesa_w = '4') then
		vl_total_calculado_w	:= vl_calculado_w;
	else	
		vl_total_calculado_w	:= vl_medico_w + vl_anestesista_w + vl_auxiliares_w + vl_custo_operacional_w + vl_materiais_w;			
	end if;
	
	/*Se for um item da composicao de um pacote e o valor
	calculado estiver zero busca o valor negociado drquadros 648545*/
		
	if (nr_seq_pacote_w IS NOT NULL AND nr_seq_pacote_w::text <> '')	and (vl_calculado_w = 0)		then
		select 	max(coalesce(b.vl_negociado,0))
		into STRICT	vl_calculado_w
		from	pls_pacote_composicao	a,	
			pls_pacote_procedimento	b
		where	b.nr_seq_composicao	= a.nr_sequencia
		and	b.cd_procedimento	= cd_procedimento_w
		and	b.ie_origem_proced	= ie_origem_proced_w
		and	a.nr_seq_pacote		= nr_seq_pacote_w;
	end if;
	
	open C03;
	loop
	fetch C03 into	
		nr_seq_regra_ww,
		ie_tipo_valor_ww,
		ie_regra_liberacao_w,
		nr_seq_estrut_regra_w,
		nr_seq_mat_regra_w,
		ie_valor_apres_zerado_w,
		cd_estab_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */		
		begin
			if	((ie_restringe_estab_w = 'N') or (ie_restringe_estab_w = 'S') and ( cd_estabelecimento_logado_w = cd_estab_regra_w))then
		
				/* Valor apresentado menor do que valor Calculado */

				if	(((coalesce(nr_seq_estrut_regra_w,0) > 0 ) or (coalesce(nr_seq_mat_regra_w,0) > 0)) and (coalesce(nr_seq_conta_proc_p,0) > 0)) then
					nr_seq_estrut_regra_w 	:= 0;
					nr_seq_mat_regra_w 	:= 0;
				elsif (coalesce(nr_seq_conta_proc_p,0) > 0) then
					if (ie_regra_liberacao_w = 4) and (vl_apresentado_w < vl_calculado_w) and
						((coalesce(vl_apresentado_w,0) > 0) or (ie_valor_apres_zerado_w = 'S'))then
						nr_seq_regra_w	:= nr_seq_regra_ww;
						ie_tipo_valor_w	:= ie_tipo_valor_ww;
					elsif (ie_regra_liberacao_w = 1) and (vl_apresentado_w < vl_calculado_w) and
						((coalesce(vl_apresentado_w,0) > 0) or (ie_valor_apres_zerado_w = 'S'))then
						nr_seq_regra_w	:= nr_seq_regra_ww;
						ie_tipo_valor_w	:= ie_tipo_valor_ww;
					/* Valor Calculado menor do que o valor Apresentado */

					elsif (ie_regra_liberacao_w = 2) and (vl_calculado_w < vl_apresentado_w) and (coalesce(vl_calculado_w,0) > 0) then
						nr_seq_regra_w	:= nr_seq_regra_ww;
						ie_tipo_valor_w	:= ie_tipo_valor_ww;
					/*Valor calculado zerado*/

					elsif (ie_regra_liberacao_w = 3) and (coalesce(vl_calculado_w,0) = 0) and
						((coalesce(vl_apresentado_w,0) > 0) 	or (ie_valor_apres_zerado_w = 'S'))then	
						nr_seq_regra_w	:= nr_seq_regra_ww;
						ie_tipo_valor_w	:= ie_tipo_valor_ww;
					end if;
				end if;
			end if;
		end;
	end loop;
	close C03;
	
	if (nr_seq_regra_w	> 0) then	
		/* Aceita valor apresentado */

		if (ie_tipo_valor_w = 1) then
			vl_liberado_w		:= vl_apresentado_w;
			vl_glosa_w		:= 0;
			vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
		/* Aceita valor calculado e glosa o excedente */

		elsif (ie_tipo_valor_w = 2) then
			vl_liberado_w	:= vl_calculado_w;
			vl_glosa_w	:= vl_apresentado_w - vl_total_calculado_w;
			
			if (vl_glosa_w < 0) then
				vl_glosa_w	:= 0;
			end if;
		/* Aceita valor calculado */

		elsif (ie_tipo_valor_w = 3) then
			vl_liberado_w	:= vl_calculado_w;
			vl_glosa_w	:= 0;
		elsif (ie_tipo_valor_w = 4) then
			vl_liberado_w		:= vl_apresentado_w - (coalesce(vl_taxa_material_imp_w,0) + coalesce(vl_taxa_co_imp_w,0)+coalesce(vl_taxa_servico_imp_w,0));
			vl_glosa_w		:= 0;
			vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);

		--	Valor apresentado + taxa ate o limite calculado(Calculado + tx_adm)
		elsif (ie_tipo_valor_w = 5) then
			
			--Calcula o valor da tx_adm sobre o apresentado
			vl_liberado_regra_w     := dividir((vl_apresentado_w * tx_prestador_item_w),100);
			--Se o apresentado + taxa for igual ou menor que o calculado, entao esse sera o valor liberado
			if (vl_apresentado_w + vl_liberado_regra_w <= vl_calculado_w) then
				
				vl_liberado_w		:= vl_apresentado_w + vl_liberado_regra_w;
				vl_glosa_w		:= 0;
			else
				--Como o apres + tx_adm superou o calculado, entao liberado o calculado
				vl_liberado_w		:= vl_calculado_w;
								
				--Nesse caso, e preciso verificar se deve ser gerado valor de glosa
				if (vl_liberado_w < vl_apresentado_w) then
					vl_glosa_w := vl_apresentado_w - vl_liberado_w;
				else
					vl_glosa_w		:= 0;
				end if;
				
			end if;
			vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
			
		elsif (ie_tipo_valor_w = 6) then
			vl_liberado_regra_w	:= dividir((vl_apresentado_w * tx_prestador_item_w),100);
			vl_liberado_w		:= vl_apresentado_w + vl_liberado_regra_w;
			vl_glosa_w		:= 0;
			vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
		end if;	

		if (coalesce(nr_seq_regra_qtde_exec_w,0) > 0) then
			update	pls_conta_proc
			set	vl_glosa		= CASE WHEN ie_status='L' THEN vl_glosa  ELSE vl_glosa_w END ,
				nr_seq_regra_valor	= nr_seq_regra_w,
				vl_liberado_regra	= vl_liberado_w,
				vl_prestador		= vl_liberado_w,
				ie_valor_base		= ie_tipo_valor_w,
				vl_pag_medico_conta	= vl_pag_medico_conta_w
			where	nr_sequencia		= nr_seq_item_w;
		else
			update	pls_conta_proc
			set	vl_glosa		= CASE WHEN ie_status='L' THEN vl_glosa  ELSE vl_glosa_w END ,
				nr_seq_regra_valor	= nr_seq_regra_w,
				vl_liberado_regra	= vl_liberado_w,
				vl_prestador		= vl_liberado_w,
				ie_valor_base		= ie_tipo_valor_w,
				vl_pag_medico_conta	= vl_pag_medico_conta_w
			where	nr_sequencia		= nr_seq_item_w;
		end if;
	else
		/*CASO NAO ACHE REGRA ENTAO  SETA NULO PARA A REGRA DE LIBERACAO DE VALORES DA CONTA DO ITEM*/

		if (vl_apresentado_w = vl_calculado_w) and (vl_apresentado_w > 0) then
			ie_tipo_valor_w := 1;
		else
			ie_tipo_valor_w := null;
		end if;
		
		update	pls_conta_proc
		set	nr_seq_regra_valor 	 = NULL,
			vl_liberado_regra	= 0,
			ie_valor_base		= ie_tipo_valor_w
		where	nr_sequencia 		= nr_Seq_conta_proc_p;
	end if;
	
	nr_seq_conta_proc_w	:= nr_seq_conta_proc_p;

	select	count(1)
	into STRICT 	qt_prestador_partic_w
	from	pls_proc_participante
	where 	nr_seq_conta_proc	= nr_seq_conta_proc_p
	and 	(nr_seq_prestador IS NOT NULL AND nr_seq_prestador::text <> '')
	and	coalesce(ie_status,'U')	= 'C';
	
	/* Felipe - 14/10/2011 - Litoral - Gerar a glosa em relacao ao valor total do procedimento */

	if	(coalesce(vl_apresentado_w,0) > (coalesce(vl_calculado_w,0) + coalesce(vl_tolerancia_1705_w,0))) and
		(((ie_gerar_glosa_valor_zerado_w = 'N') and (coalesce(vl_calculado_w,0) > 0)) or (ie_gerar_glosa_valor_zerado_w = 'S')) then
		CALL pls_gravar_conta_glosa('1705',null,nr_seq_item_w,
					null,'N','', 
					nm_usuario_p,'A',ie_evento_w,
					nr_seq_prestador_w, cd_estabelecimento_w, '', null);
	elsif	(coalesce(vl_apresentado_w,0) < (coalesce(vl_calculado_w,0) - coalesce(vl_tolerancia_1706_w,0))) and (coalesce(vl_apresentado_w,0) > 0) then
		CALL pls_gravar_conta_glosa('1706',null,nr_seq_item_w,
					null,'N','',
					nm_usuario_p,'A',ie_evento_w,
					nr_seq_prestador_w, cd_estabelecimento_w, '', null);
	end if;
	

elsif (coalesce(nr_Seq_conta_mat_p,0) > 0) then
	ie_tipo_item_w	:= 'M';

	select	a.nr_sequencia,
		a.nr_seq_material,
		coalesce(a.vl_material_imp,0),
		coalesce(a.vl_material,0),
		a.ie_tipo_despesa,
		a.ie_autorizado,
		b.nr_seq_prestador_exec,
		b.nr_sequencia,
		a.nr_seq_pacote,
		a.nr_seq_regra_tx_inter,
		a.vl_taxa_material_imp,
		a.vl_unitario_imp,
		coalesce(a.tx_prestador_item,0)
	into STRICT	nr_seq_item_w,
		nr_seq_material_w,
		vl_apresentado_w,
		vl_calculado_w,
		ie_tipo_despesa_mat_w,
		ie_autorizado_w,
		nr_seq_prestador_exec_w,
		nr_seq_conta_w,
		nr_seq_pacote_w,
		nr_seq_regra_tx_inter_w,
		vl_taxa_material_imp_w,
		vl_unitario_apresentado_w,
		tx_prestador_item_w
	from	pls_conta_mat	a,
		pls_conta	b
	where	a.nr_seq_conta	= b.nr_sequencia
	and	a.nr_sequencia	= nr_seq_conta_mat_p;
	
	begin
		if (ie_ocorrencia_w = 'N') then
			select	a.vl_tolerancia_glosa
			into STRICT	vl_tolerancia_1705_w
			from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and		a.ie_situacao	= 'A'
			and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w))
			and		b.cd_motivo_tiss = '1705';
		else
			select	a.vl_tolerancia_glosa
			into STRICT	vl_tolerancia_1705_w
			from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and		a.ie_situacao	= 'A'
			and		b.cd_motivo_tiss = '1705'
			and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w))
			and		a.cd_estabelecimento = cd_estabelecimento_w;
		end if;
	exception
	when others then
		vl_tolerancia_1705_w	:= 0;
	end;
	
	begin
		if (ie_ocorrencia_w = 'N') then
			select	max(a.vl_tolerancia_glosa)
			into STRICT	vl_tolerancia_1706_w
			from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and		a.ie_situacao	= 'A'
			and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w))
			and		b.cd_motivo_tiss = '1706';
		else
			select	max(a.vl_tolerancia_glosa)
			into STRICT	vl_tolerancia_1706_w
			from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and		a.ie_situacao	= 'A'
			and		b.cd_motivo_tiss = '1706'
			and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w))
			and		a.cd_estabelecimento = cd_estabelecimento_w;
		end if;
	exception
	when others then
		vl_tolerancia_1706_w	:= 0;
	end;
	
	ie_participante_w := pls_obter_se_conta_partic(nr_seq_conta_w, nm_usuario_p);
	
	nr_seq_regra_w 		:= 0;	

	ie_tipo_despesa_proc_w	:= null;
	cd_procedimento_w	:= null;
	ie_origem_proced_w	:= null;
	
	select	max(nr_seq_estrut_mat)
	into STRICT	nr_seq_estrut_mat_w
	from	pls_material
	where	nr_sequencia	= nr_seq_material_w;
	
	if (coalesce(nr_seq_prestador_exec_w,0) > 0) then		
		
		select	max(nr_seq_tipo_prestador)
		into STRICT	nr_seq_tipo_prestador_w
		from 	pls_prestador
		where 	nr_sequencia	= nr_seq_prestador_exec_w;		
	
	end if;
	

	if (nr_seq_pacote_w IS NOT NULL AND nr_seq_pacote_w::text <> '')	and (vl_calculado_w = 0)		then
		select 	max(coalesce(b.vl_negociado,0))
		into STRICT	vl_calculado_w
		from	pls_pacote_composicao	a,
			pls_pacote_material	b
		where	b.nr_seq_composicao	= a.nr_sequencia
		and	b.nr_seq_material	= nr_seq_material_w
		and	a.nr_seq_pacote		= nr_seq_pacote_w;
	end if;	
	
	open C03;
	loop
	fetch C03 into	
		nr_seq_regra_ww,
		ie_tipo_valor_ww,
		ie_regra_liberacao_w,
		nr_seq_estrut_regra_w,
		nr_seq_mat_regra_w,
		ie_valor_apres_zerado_w,
		cd_estab_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */	
		begin
			if	((ie_restringe_estab_w = 'N') or (ie_restringe_estab_w = 'S') and ( cd_estabelecimento_logado_w = cd_estab_regra_w))then
				
				ie_estrut_mat_w		:= 'S';
			
				if (nr_seq_estrut_regra_w IS NOT NULL AND nr_seq_estrut_regra_w::text <> '') then
					ie_estrut_mat_w	:= pls_obter_se_mat_estrutura(nr_seq_material_w, nr_seq_estrut_regra_w);
				elsif (nr_seq_mat_regra_w IS NOT NULL AND nr_seq_mat_regra_w::text <> '') then
					if (nr_seq_material_w = nr_seq_mat_regra_w) then
						ie_estrut_mat_w		:= 'S';
					else
						ie_estrut_mat_w		:= 'N';
					end if;
				end if;
				
				if (ie_estrut_mat_w = 'S') then								
					/* Valor apresentado menor do que valor Calculado */

					if (ie_regra_liberacao_w = 4) and (vl_apresentado_w < vl_calculado_w) and
						((coalesce(vl_apresentado_w,0) > 0) or (ie_valor_apres_zerado_w = 'S'))then
						nr_seq_regra_w	:= nr_seq_regra_ww;
						ie_tipo_valor_w	:= ie_tipo_valor_ww;
					elsif (ie_regra_liberacao_w = 1) and (vl_apresentado_w < vl_calculado_w) and
						((coalesce(vl_apresentado_w,0) > 0) or (ie_valor_apres_zerado_w = 'S' ))then
						nr_seq_regra_w	:= nr_seq_regra_ww;
						ie_tipo_valor_w	:= ie_tipo_valor_ww;
					/* Valor Calculado menor do que o valor Apresentado */

					elsif (ie_regra_liberacao_w = 2) and (vl_calculado_w < vl_apresentado_w) and (coalesce(vl_calculado_w,0) > 0) then
						nr_seq_regra_w	:= nr_seq_regra_ww;
						ie_tipo_valor_w	:= ie_tipo_valor_ww;
					/*Valor calculado zerado*/

					elsif (ie_regra_liberacao_w = 3) and (coalesce(vl_calculado_w,0) = 0)and
						((coalesce(vl_apresentado_w,0) > 0) or (ie_valor_apres_zerado_w = 'S')) then	
						nr_seq_regra_w	:= nr_seq_regra_ww;
						ie_tipo_valor_w	:= ie_tipo_valor_ww;	
					end if;
				end if;	
			end if;
		end;
	end loop;
	close C03;
	
	if (nr_seq_regra_w	> 0) then
		/* Aceita valor apresentado */

		if (ie_tipo_valor_w = 1) then
			vl_liberado_w	:= vl_apresentado_w;
			vl_glosa_w	:= 0;
		/* Aceita valor calculado e glosa o excedente */

		elsif (ie_tipo_valor_w = 2) then
			vl_liberado_w	:= vl_calculado_w;
			vl_glosa_w	:= vl_apresentado_w - vl_calculado_w;
		/* Aceita valor calculado */

		elsif (ie_tipo_valor_w = 3) then
			vl_liberado_w	:= vl_calculado_w;
			vl_glosa_w	:= 0;
		elsif (ie_tipo_valor_w = 4) then
			vl_liberado_w		:= vl_apresentado_w - coalesce(vl_taxa_material_imp_w,0);
			vl_glosa_w		:= 0;
			vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
		
		--Valor apresentado + taxa ate o limite calculado(Calculado + tx_adm)
		elsif (ie_tipo_valor_w = 5) then
			
			--Calcula o valor da tx_adm sobre o apresentado
			vl_liberado_regra_w     := dividir((vl_apresentado_w * tx_prestador_item_w),100);
			--Se o apresentado + taxa for igual ou menor que o calculado, entao esse sera o valor liberado
			if (vl_apresentado_w + vl_liberado_regra_w <= vl_calculado_w) then
				
				vl_liberado_w		:= vl_apresentado_w + vl_liberado_regra_w;
				vl_glosa_w		:= 0;
			else
				--Como o apres + tx_adm superou o calculado, entao liberado o calculado
				vl_liberado_w		:= vl_calculado_w;
				
				--Nesse caso, e preciso verificar se deve ser gerado valor de glosa
				if (vl_liberado_w < vl_apresentado_w) then
					vl_glosa_w := vl_apresentado_w - vl_liberado_w;
				else
					vl_glosa_w		:= 0;
				end if;
				
			end if;
			vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
			
		elsif (ie_tipo_valor_w = 6) then
			vl_liberado_regra_w	:= dividir((vl_apresentado_w * tx_prestador_item_w),100);
			vl_liberado_w		:= vl_apresentado_w + vl_liberado_regra_w;
			vl_glosa_w		:= 0;
			vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
		end if;
		
		update	pls_conta_mat
		set	vl_glosa		= CASE WHEN ie_status='L' THEN vl_glosa  ELSE vl_glosa_w END ,
			nr_seq_regra_valor	= nr_seq_regra_w,
			vl_liberado_regra	= vl_liberado_w,
			ie_valor_base		= ie_tipo_valor_w
		where	nr_sequencia		= nr_seq_item_w;		
	else
		/*CASO NAO ACHE REGRA ENTAO  SETA NULO PARA A REGRA DE LIBERACAO DE VALORES DA CONTA DO ITEM*/

		update	pls_conta_mat
		set	nr_seq_regra_valor 	 = NULL,
			ie_valor_base		 = NULL,
			vl_liberado_regra	= 0
		where	nr_Sequencia 		= nr_Seq_conta_mat_p;
	end if;	

	if	(coalesce(vl_apresentado_w,0) > (coalesce(vl_calculado_w,0) + coalesce(vl_tolerancia_1705_w,0))) and
		(((ie_gerar_glosa_valor_zerado_w = 'N') and (coalesce(vl_calculado_w,0) > 0)) or (ie_gerar_glosa_valor_zerado_w = 'S'))  then
		CALL pls_gravar_conta_glosa('1705',null,null,
					nr_seq_item_w,'N','',
					nm_usuario_p,'A',ie_evento_w,
					nr_seq_prestador_w, cd_estabelecimento_w, '', null);
	elsif	(coalesce(vl_apresentado_w,0) < (coalesce(vl_calculado_w,0) - coalesce(vl_tolerancia_1706_w,0)))  and (coalesce(vl_apresentado_w,0) > 0) then			
		CALL pls_gravar_conta_glosa('1706',null,null,
					nr_seq_item_w,'N','',
					nm_usuario_p,'A',ie_evento_w,
					nr_seq_prestador_w, cd_estabelecimento_w, '', null);
	end if;

elsif (coalesce(nr_seq_conta_p,0) > 0)	then
	ie_tipo_item_w		:= 'P';
	ie_participante_w	:= pls_obter_se_conta_partic(nr_seq_conta_p, nm_usuario_p);
	
	open C01;
	loop -- procedimentos da conta
	fetch C01 into	
		nr_seq_item_w,
		vl_apresentado_w,
		vl_calculado_w,
		vl_medico_w,
		vl_anestesista_w,
		vl_auxiliares_w,
		vl_custo_operacional_w,
		vl_materiais_w,
		vl_total_procedimento_w,
		ie_tipo_despesa_proc_w,	
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_prestador_exec_w,
		ie_tipo_despesa_w,
		nr_seq_conta_proc_w,
		vl_pag_medico_conta_w,
		nr_seq_regra_qtde_exec_w,
		nr_seq_pacote_w,
		nr_seq_regra_tx_inter_w,
		vl_taxa_co_imp_w,
		vl_taxa_material_imp_w,
		vl_taxa_servico_imp_w,
		vl_unitario_apresentado_w,
		tx_prestador_item_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin	

		begin
			if (ie_ocorrencia_w = 'N') then
				select	a.vl_tolerancia_glosa
				into STRICT	vl_tolerancia_1705_w
				from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
				where	a.nr_seq_motivo_glosa = b.nr_sequencia
				and	a.ie_situacao	= 'A'
				and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tipo_despesa_proc_w))
				and	b.cd_motivo_tiss = '1705';
			else
				select	a.vl_tolerancia_glosa
				into STRICT	vl_tolerancia_1705_w
				from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
				where	a.nr_seq_motivo_glosa = b.nr_sequencia
				and	a.ie_situacao	= 'A'
				and	b.cd_motivo_tiss = '1705'
				and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tipo_despesa_proc_w))
				and	a.cd_estabelecimento = cd_estabelecimento_w;
			end if;
		exception
		when others then
			vl_tolerancia_1705_w	:= 0;
		end;
		
		begin
			if (ie_ocorrencia_w = 'N') then
				select	max(a.vl_tolerancia_glosa)
				into STRICT	vl_tolerancia_1706_w
				from	pls_regra_lanc_glosa a,
						tiss_motivo_glosa b
				where	a.nr_seq_motivo_glosa = b.nr_sequencia
				and		a.ie_situacao	= 'A'
				and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tipo_despesa_proc_w))
				and		b.cd_motivo_tiss = '1706';
			else
				select	max(a.vl_tolerancia_glosa)
				into STRICT	vl_tolerancia_1706_w
				from	pls_regra_lanc_glosa a,
						tiss_motivo_glosa b
				where	a.nr_seq_motivo_glosa = b.nr_sequencia
				and		a.ie_situacao	= 'A'
				and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tipo_despesa_proc_w))
				and		b.cd_motivo_tiss = '1706'
				and		a.cd_estabelecimento = cd_estabelecimento_w;
			end if;
		exception
		when others then
			vl_tolerancia_1706_w	:= 0;
		end;
		
		select	coalesce(max(vl_total_procedimento), 0)
		into STRICT	vl_total_procedimento_w
		from 	pls_conta_proc
		where 	nr_sequencia	= nr_seq_conta_proc_w;

		nr_seq_regra_w := 0;	
		
		
		if (nr_seq_pacote_w IS NOT NULL AND nr_seq_pacote_w::text <> '')	and (vl_calculado_w = 0)		then
			select 	max(coalesce(b.vl_negociado,0))
			into STRICT	vl_calculado_w
			from	pls_pacote_composicao	a,	
				pls_pacote_procedimento	b
			where	b.nr_seq_composicao	= a.nr_sequencia
			and	b.cd_procedimento	= cd_procedimento_w
			and	b.ie_origem_proced	= ie_origem_proced_w
			and	a.nr_seq_pacote		= nr_seq_pacote_w;
		end if;

		select	max(nr_seq_grupo_rec)
		into STRICT	nr_seq_grupo_rec_w
		from	procedimento
		where	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w;
		
		
		if (ie_tipo_despesa_w = '4') then
			vl_total_calculado_w	:= vl_calculado_w;
		else	
			vl_total_calculado_w	:= vl_medico_w + vl_anestesista_w + vl_auxiliares_w + vl_custo_operacional_w + vl_materiais_w;			
		end if;
		
		vl_total_calculado_w	:= vl_calculado_w;				
		
		open C03;
		loop
		fetch C03 into	
			nr_seq_regra_ww,
			ie_tipo_valor_ww,
			ie_regra_liberacao_w,
			nr_seq_estrut_regra_w,
			nr_seq_mat_regra_w,
			ie_valor_apres_zerado_w,
			cd_estab_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */		
			begin	
				if	((ie_restringe_estab_w = 'N') or (ie_restringe_estab_w = 'S') and ( cd_estabelecimento_logado_w = cd_estab_regra_w))then
					if 	(((coalesce(nr_seq_estrut_regra_w,0) > 0 ) or (coalesce(nr_seq_mat_regra_w,0) > 0)) and (coalesce(nr_seq_conta_proc_w,0) > 0)) then
						nr_seq_estrut_regra_w 	:= 0;
						nr_seq_mat_regra_w	:= 0;
					elsif (coalesce(nr_seq_conta_proc_w,0) > 0) then
						/* Valor apresentado menor do que valor Calculado */

						if (ie_regra_liberacao_w	= 1) and (vl_apresentado_w < vl_calculado_w) and
							((coalesce(vl_apresentado_w,0) > 0) or (ie_valor_apres_zerado_w = 'S'))then
							nr_seq_regra_w	:= nr_seq_regra_ww;
							ie_tipo_valor_w	:= ie_tipo_valor_ww;
						/* Valor Calculado menor do que o valor Apresentado */

						elsif (ie_regra_liberacao_w	= 2) and (vl_calculado_w < vl_apresentado_w) and (coalesce(vl_calculado_w,0) > 0) then
							nr_seq_regra_w	:= nr_seq_regra_ww;
							ie_tipo_valor_w	:= ie_tipo_valor_ww;
						/*Valor calculado zerado*/

						elsif (ie_regra_liberacao_w	= 3) and (coalesce(vl_calculado_w,0)	= 0) and
							((coalesce(vl_apresentado_w,0) > 0) or (ie_valor_apres_zerado_w = 'S'))then	
							nr_seq_regra_w	:= nr_seq_regra_ww;
							ie_tipo_valor_w	:= ie_tipo_valor_ww;
						end if;
					end if;
				end if;
			end;
		end loop;
		close C03;		
		
		if (nr_seq_regra_w	> 0) then
			/* Aceita valor apresentado */

			if (ie_tipo_valor_w = 1) then
				vl_liberado_w		:= vl_apresentado_w;
				vl_glosa_w		:= 0;
				vl_pag_medico_conta_w	:=dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
			/* Aceita valor calculado e glosa o excedente */

			elsif (ie_tipo_valor_w = 2) then
				vl_liberado_w	:= vl_calculado_w;
				vl_glosa_w	:= vl_apresentado_w - vl_total_calculado_w;
				
				if (vl_glosa_w < 0) then
					vl_glosa_w	:= 0;
				end if;
			/* Aceita valor calculado */

			elsif (ie_tipo_valor_w = 3) then
				vl_liberado_w	:= vl_calculado_w;
				vl_glosa_w	:= 0;
			elsif (ie_tipo_valor_w = 4) then
				vl_liberado_w		:= vl_apresentado_w - (coalesce(vl_taxa_material_imp_w,0) + coalesce(vl_taxa_co_imp_w,0)+coalesce(vl_taxa_servico_imp_w,0));
				vl_glosa_w		:= 0;
				vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
			
			--Valor apresentado + taxa ate o limite calculado(Calculado + tx_adm)
			elsif (ie_tipo_valor_w = 5) then
				
				--Calcula o valor da tx_adm sobre o apresentado
				vl_liberado_regra_w     := dividir((vl_apresentado_w * tx_prestador_item_w),100);
				

				--Se o apresentado + taxa for igual ou menor que o calculado, entao esse sera o valor liberado
				if (vl_apresentado_w + vl_liberado_regra_w <= vl_calculado_w) then
					
					vl_liberado_w		:= vl_apresentado_w + vl_liberado_regra_w;
					vl_glosa_w		:= 0;
				else
					--Como o apres + tx_adm superou o calculado, entao liberado o calculado
					vl_liberado_w		:= vl_calculado_w;
					
					--Nesse caso, e preciso verificar se deve ser gerado valor de glosa
					if (vl_liberado_w < vl_apresentado_w) then
						vl_glosa_w := vl_apresentado_w - vl_liberado_w;
					else
						vl_glosa_w		:= 0;
					end if;
					
				end if;
				vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
				
			elsif (ie_tipo_valor_w = 6) then
				vl_liberado_regra_w	:= dividir((vl_apresentado_w * tx_prestador_item_w),100);
				vl_liberado_w		:= vl_apresentado_w + vl_liberado_regra_w;
				vl_glosa_w		:= 0;
				vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
			end if;
			
			if (coalesce(nr_seq_regra_qtde_exec_w,0) > 0) then
				update	pls_conta_proc
				set	vl_glosa		= CASE WHEN ie_status='L' THEN vl_glosa  ELSE vl_glosa_w END ,
					nr_seq_regra_valor	= nr_seq_regra_w,
					vl_liberado_regra	= vl_liberado_w,
					vl_prestador		= vl_liberado_w,
					ie_valor_base		= ie_tipo_valor_w,
					vl_pag_medico_conta	= vl_pag_medico_conta_w
				where	nr_sequencia		= nr_seq_item_w;
			else
				update	pls_conta_proc
				set	vl_glosa		= CASE WHEN ie_status='L' THEN vl_glosa  ELSE vl_glosa_w END ,
					nr_seq_regra_valor	= nr_seq_regra_w,
					vl_liberado_regra	= vl_liberado_w,
					vl_prestador		= vl_liberado_w,
					ie_valor_base		= ie_tipo_valor_w,
					vl_pag_medico_conta	= vl_pag_medico_conta_w
				where	nr_sequencia		= nr_seq_item_w;
			end if;	
		else
			/*CASO NAO ACHE REGRA ENTAO  SETA NULO PARA A REGRA DE LIBERACAO DE VALORES DA CONTA DO ITEM*/

			if (vl_apresentado_w = vl_calculado_w) and (vl_apresentado_w > 0) then
				ie_tipo_valor_w := 1;
			else
				ie_tipo_valor_w := null;
			end if;
			
			update	pls_conta_proc
			set	nr_seq_regra_valor 	 = NULL,
				ie_valor_base		= ie_tipo_valor_w,
				vl_liberado_regra	= 0
			where	nr_Sequencia 		= nr_seq_item_w;			
		end if;

		nr_seq_conta_proc_w := nr_seq_item_w;

		select	count(1)
		into STRICT 	qt_prestador_partic_w
		from	pls_proc_participante
		where 	nr_seq_conta_proc	= nr_seq_item_w
		and 	(nr_seq_prestador IS NOT NULL AND nr_seq_prestador::text <> '')
		and	coalesce(ie_status,'U')	= 'C';
			
		/*e necessario um prestador na tabela do participante para valor o if com null*/
	
		if	(coalesce(vl_apresentado_w,0) > (coalesce(vl_calculado_w,0) + coalesce(vl_tolerancia_1705_w,0))) and
			(((ie_gerar_glosa_valor_zerado_w = 'N') and (coalesce(vl_calculado_w,0) > 0)) or (ie_gerar_glosa_valor_zerado_w = 'S'))then
			CALL pls_gravar_conta_glosa('1705',null,nr_seq_item_w,
						null,'N','',
						nm_usuario_p,'A',ie_evento_w,
						nr_seq_prestador_w, cd_estabelecimento_w, '', null);
		elsif	(coalesce(vl_apresentado_w,0) < (coalesce(vl_calculado_w,0) - coalesce(vl_tolerancia_1706_w,0))) and (coalesce(vl_apresentado_w,0) > 0) then
			
			CALL pls_gravar_conta_glosa('1706',null,nr_seq_item_w,
						null,'N','',
						nm_usuario_p,'A',ie_evento_w,
						nr_seq_prestador_w, cd_estabelecimento_w, '', null);
		end if;
		end;
	end loop;
	close C01;
	
	ie_tipo_item_w	:= 'M'; --seta para verificacao do material
	
	if (coalesce(nr_seq_conta_proc_p,0) = 0) and (coalesce(nr_seq_conta_mat_p,0) = 0) then
		open C02;
		loop
		fetch C02 into	
			nr_seq_item_w,
			nr_seq_material_w,
			vl_apresentado_w,
			vl_calculado_w,
			ie_tipo_despesa_mat_w,
			ie_autorizado_w,
			nr_seq_prestador_exec_w,
			nr_seq_conta_mat_w,
			nr_seq_pacote_w,
			nr_seq_regra_tx_inter_w,
			vl_taxa_material_imp_w,
			vl_unitario_apresentado_w,
			tx_prestador_item_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin		
			select	coalesce(max(vl_material),0)
			into STRICT	vl_calculado_w
			from 	pls_conta_mat
			where 	nr_sequencia	= nr_seq_conta_mat_w;
			
			begin
				if (ie_ocorrencia_w = 'N') then
					select	a.vl_tolerancia_glosa
					into STRICT	vl_tolerancia_1705_w
					from	pls_regra_lanc_glosa a,
							tiss_motivo_glosa b
					where	a.nr_seq_motivo_glosa = b.nr_sequencia
					and		a.ie_situacao	= 'A'
					and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w))
					and		b.cd_motivo_tiss = '1705';
				else
					select	a.vl_tolerancia_glosa
					into STRICT	vl_tolerancia_1705_w
					from	pls_regra_lanc_glosa a,
							tiss_motivo_glosa b
					where	a.nr_seq_motivo_glosa = b.nr_sequencia
					and		a.ie_situacao	= 'A'
					and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w))
					and		b.cd_motivo_tiss = '1705'
					and		a.cd_estabelecimento = cd_estabelecimento_w;
				end if;
			exception
			when others then
				vl_tolerancia_1705_w	:= 0;
			end;
			
			begin
				if (ie_ocorrencia_w = 'N') then
					select	max(a.vl_tolerancia_glosa)
					into STRICT	vl_tolerancia_1706_w
					from	pls_regra_lanc_glosa a,
						tiss_motivo_glosa b
					where	a.nr_seq_motivo_glosa = b.nr_sequencia
					and	a.ie_situacao	= 'A'
					and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w))
					and	b.cd_motivo_tiss = '1706';
				else
					select	max(a.vl_tolerancia_glosa)
					into STRICT	vl_tolerancia_1706_w
					from	pls_regra_lanc_glosa a,
						tiss_motivo_glosa b
					where	a.nr_seq_motivo_glosa = b.nr_sequencia
					and	a.ie_situacao	= 'A'
					and	b.cd_motivo_tiss = '1706'
					and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tipo_despesa_mat_w))
					and	a.cd_estabelecimento = cd_estabelecimento_w;
				end if;
			exception
			when others then
				vl_tolerancia_1706_w	:= 0;
			end;
			
			nr_seq_regra_w := 0;	
			
			ie_tipo_despesa_proc_w	:= null;
			cd_procedimento_w	:= null;
			ie_origem_proced_w 	:= null;
			nr_seq_grupo_rec_w	:= null;
			
			select	max(nr_seq_estrut_mat)
			into STRICT	nr_seq_estrut_mat_w
			from	pls_material
			where	nr_sequencia	= nr_seq_material_w;
			
			
			if (nr_seq_pacote_w IS NOT NULL AND nr_seq_pacote_w::text <> '')	and (vl_calculado_w = 0)		then
				select 	max(coalesce(b.vl_negociado,0))
				into STRICT	vl_calculado_w
				from	pls_pacote_composicao	a,
					pls_pacote_material	b
				where	b.nr_seq_composicao	= a.nr_sequencia
				and	b.nr_seq_material	= nr_seq_material_w
				and	a.nr_seq_pacote		= nr_seq_pacote_w;
			end if;

			open C03;
			loop
			fetch C03 into	
				nr_seq_regra_ww,
				ie_tipo_valor_ww,
				ie_regra_liberacao_w,
				nr_seq_estrut_regra_w,
				nr_seq_mat_regra_w,
				ie_valor_apres_zerado_w,
				cd_estab_regra_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */	
				begin
					if	((ie_restringe_estab_w = 'N') or (ie_restringe_estab_w = 'S') and ( cd_estabelecimento_logado_w = cd_estab_regra_w))then
						ie_estrut_mat_w		:= 'S';
						
						if (nr_seq_estrut_regra_w IS NOT NULL AND nr_seq_estrut_regra_w::text <> '') then
							ie_estrut_mat_w	:= pls_obter_se_mat_estrutura(nr_seq_material_w, nr_seq_estrut_regra_w);
						elsif (nr_seq_mat_regra_w IS NOT NULL AND nr_seq_mat_regra_w::text <> '') then
							if (nr_seq_material_w = nr_seq_mat_regra_w) then
								ie_estrut_mat_w		:= 'S';
							else
								ie_estrut_mat_w		:= 'N';
							end if;
						end if;

						if (ie_estrut_mat_w = 'S') then			
							/* Valor apresentado menor do que valor Calculado */

							if (ie_regra_liberacao_w	= 1) and (vl_apresentado_w < vl_calculado_w) and
								((coalesce(vl_apresentado_w,0) > 0) OR (ie_valor_apres_zerado_w = 'S'))then
								nr_seq_regra_w	:= nr_seq_regra_ww;
								ie_tipo_valor_w	:= ie_tipo_valor_ww;
							/* Valor Calculado menor do que o valor Apresentado */

							elsif (ie_regra_liberacao_w	= 2) and (vl_calculado_w < vl_apresentado_w) and (coalesce(vl_calculado_w,0) > 0) then
								nr_seq_regra_w	:= nr_seq_regra_ww;
								ie_tipo_valor_w	:= ie_tipo_valor_ww;
							/*Valor calculado zerado*/

							elsif (ie_regra_liberacao_w	= 3) and (coalesce(vl_calculado_w,0)	= 0) and
								((coalesce(vl_apresentado_w,0) > 0) or (ie_valor_apres_zerado_w = 'S'))then	
								nr_seq_regra_w	:= nr_seq_regra_ww;
								ie_tipo_valor_w	:= ie_tipo_valor_ww;					
							end if;
						end if;
					end if;
				end;
			end loop;
			close C03;
			
			if (nr_seq_regra_w	> 0) then
				
				/* Aceita valor apresentado */

				if (ie_tipo_valor_w	= 1) then
					vl_liberado_w	:= vl_apresentado_w;
					vl_glosa_w	:= 0;
				/* Aceita valor calculado e glosa o excedente */

				elsif (ie_tipo_valor_w	= 2) then
					vl_liberado_w	:= vl_calculado_w;
					vl_glosa_w	:= vl_apresentado_w - vl_calculado_w;
				/* Aceita valor calculado */

				elsif (ie_tipo_valor_w	= 3) then
					vl_liberado_w	:= vl_calculado_w;
					vl_glosa_w	:= 0;
				elsif (ie_tipo_valor_w = 4) then
					vl_liberado_w		:= vl_apresentado_w -coalesce(vl_taxa_material_imp_w,0);
					vl_glosa_w		:= 0;
					vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w*vl_liberado_w),vl_calculado_w);
				--Valor apresentado + taxa ate o limite calculado(Calculado + tx_adm)
				elsif (ie_tipo_valor_w = 5) then
					
					--Calcula o valor da tx_adm sobre o apresentado
					vl_liberado_regra_w     := dividir((vl_apresentado_w * tx_prestador_item_w),100);
					--Se o apresentado + taxa for igual ou menor que o calculado, entao esse sera o valor liberado
					
					if ( vl_apresentado_w + vl_liberado_regra_w <= vl_calculado_w) then
						
						vl_liberado_w		:= vl_apresentado_w + vl_liberado_regra_w;
						vl_glosa_w		:= 0;
					else
						--Como o apres + tx_adm superou o calculado, entao liberado o calculado
						vl_liberado_w		:= vl_calculado_w;
						
						--Nesse caso, e preciso verificar se deve ser gerado valor de glosa
						if (vl_liberado_w < vl_apresentado_w) then
							vl_glosa_w := vl_apresentado_w - vl_liberado_w;
						else
							vl_glosa_w		:= 0;
						end if;
						
					end if;
					vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w * vl_liberado_w),vl_calculado_w);
					
				elsif (ie_tipo_valor_w = 6) then
					vl_liberado_regra_w	:= dividir((vl_apresentado_w * tx_prestador_item_w),100);
					vl_liberado_w		:= vl_apresentado_w + vl_liberado_regra_w;
					vl_glosa_w		:= 0;
					vl_pag_medico_conta_w	:= dividir((vl_pag_medico_conta_w * vl_liberado_w),vl_calculado_w);
				end if;
				
				update	pls_conta_mat
				set	vl_glosa		= CASE WHEN ie_status='L' THEN vl_glosa  ELSE vl_glosa_w END ,
					nr_seq_regra_valor	= nr_seq_regra_w,
					vl_liberado_regra	= vl_liberado_w,
					ie_valor_base		= ie_tipo_valor_w
				where	nr_sequencia		= nr_seq_item_w;
			else
				/*CASO NAO ACHE REGRA ENTAO  SETA NULO PARA A REGRA DE LIBERACAO DE VALORES DA CONTA DO ITEM*/

				update	pls_conta_mat
				set	nr_seq_regra_valor 	 = NULL,
					ie_valor_base		 = NULL,
					vl_liberado_regra	= 0
				where	nr_Sequencia 		= nr_seq_item_w;
			end if;	
			
		
			if	(coalesce(vl_apresentado_w,0) > (coalesce(vl_calculado_w,0) + coalesce(vl_tolerancia_1705_w,0))) and
				(((ie_gerar_glosa_valor_zerado_w = 'N') and (coalesce(vl_calculado_w,0) > 0)) or (ie_gerar_glosa_valor_zerado_w = 'S'))  then
			
				/* Francisco - 530159 - Tive que tratar o nvl no IE_ORIGEM_REGRA_P */

				CALL pls_gravar_conta_glosa('1705',null,null,
							nr_seq_item_w,'N','',
							nm_usuario_p,'A',ie_evento_w,
							nr_seq_prestador_w, cd_estabelecimento_w, '', null);
			elsif	(coalesce(vl_apresentado_w,0) < (coalesce(vl_calculado_w,0) - coalesce(vl_tolerancia_1706_w,0))) and (coalesce(vl_calculado_w,0)>0)  and (coalesce(vl_apresentado_w,0) > 0) then			
				CALL pls_gravar_conta_glosa('1706',null,null,
							nr_seq_item_w,'N','',
							nm_usuario_p,'A',ie_evento_w,
							nr_seq_prestador_w, cd_estabelecimento_w, '', null);
			end if;
			end;
		end loop;
		close C02;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_regra_valor_conta ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, ie_origem_regra_p text, nm_usuario_p text) FROM PUBLIC;

