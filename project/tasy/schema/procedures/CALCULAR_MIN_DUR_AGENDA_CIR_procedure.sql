-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_min_dur_agenda_cir (cd_estabelecimento_p bigint, nr_seq_agenda_p bigint, cd_perfil_p bigint, nm_usuario_p text, ie_ajustar_min_p INOUT text, ds_ajustar_min_p INOUT text) AS $body$
DECLARE


/* variaveis */

cd_agenda_w		bigint;
dt_agenda_w		timestamp;
cd_medico_exec_w		varchar(10);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
nr_minuto_duracao_w	bigint;
hr_inicio_w		timestamp;
hr_prox_agenda_w	timestamp;

ie_ajustar_min_w		varchar(1) 	:= 'N';
ds_ajustar_min_w		varchar(255)	:= null;
qt_min_proc_w		bigint 	:= 0;
qt_min_agenda_w		bigint 	:= 0;

ie_param_sobreposicao_w	varchar(1);
ie_sobreposicao_w	varchar(1);
cd_pessoa_fisica_w	varchar(10);
cd_medico_proc_adic_w	varchar(10);
ie_atualiza_tempo_agenda_w		varchar(1);
ie_atualiza_tempo_proc_w		varchar(1);
ie_atual_maior_tempo_proc_w		varchar(1);
ie_modo_sobreposicao_w	varchar(1);
cd_estab_agenda_w	smallint;
ie_estab_agenda_w	varchar(1) := 'S';
ds_lista_status_w varchar(255)	:= null;

expressao1_w	varchar(255) := substr(obter_desc_expressao_idioma(773926, null, wheb_usuario_pck.get_nr_seq_idioma),1,255);
expressao2_w	varchar(255) := substr(obter_desc_expressao_idioma(773939, null, wheb_usuario_pck.get_nr_seq_idioma),1,255);
expressao3_w	varchar(255) := substr(obter_desc_expressao_idioma(773940, null, wheb_usuario_pck.get_nr_seq_idioma),1,255);
 		
/* obter exame agenda */

c01 CURSOR FOR
SELECT	cd_agenda,
	hr_inicio,
	cd_medico,
	cd_procedimento,
	ie_origem_proced,
	nr_seq_proc_interno,
	nr_minuto_duracao,
	cd_pessoa_fisica
	cd_pessoa_fisica
from	agenda_paciente
where	nr_sequencia = nr_seq_agenda_p
and	(nr_seq_proc_interno IS NOT NULL AND nr_seq_proc_interno::text <> '');

/* obter exames adicionais */

c02 CURSOR FOR
SELECT	cd_medico,
	nr_seq_proc_interno,
	qt_min_proc
from	agenda_paciente_proc
where	nr_sequencia = nr_seq_agenda_p;


BEGIN

ie_atualiza_tempo_agenda_w := obter_param_usuario(871, 162, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_atualiza_tempo_agenda_w);
ie_atualiza_tempo_proc_w := obter_param_usuario(871, 163, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_atualiza_tempo_proc_w); 	
ie_atual_maior_tempo_proc_w := obter_param_usuario(871, 642, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_atual_maior_tempo_proc_w);
ie_estab_agenda_w := obter_param_usuario(871, 774, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_estab_agenda_w);
if (wheb_usuario_pck.get_cd_funcao = 871) then /*so ira buscar o parametro se estiver na funcao Gestao da Agenda cirurgica*/
	ds_lista_status_w := Obter_Param_Usuario(871, 820, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ds_lista_status_w);	
end if;
	
if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') then
	
	begin
		select    coalesce(a.ie_modo_sobreposicao,'R'),
			  coalesce(a.cd_estabelecimento, 0)
		into STRICT    ie_modo_sobreposicao_w,
			cd_estab_agenda_w
		from    agenda a,
			agenda_paciente b
		where    a.cd_agenda     = b.cd_agenda
		and    b.nr_sequencia     = nr_seq_agenda_p;
		exception WHEN no_data_found then
		    ie_modo_sobreposicao_w := 'R';
		    cd_estab_agenda_w := 0;
    	end;	

	/* obter parametros */

	select	obter_parametro_agenda(cd_estabelecimento_p, 'IE_CONSISTE_DURACAO', 'N')
	into STRICT	ie_param_sobreposicao_w
	;	

	
	
	/* obter duracao exame agenda */

	open c01;
	loop
	fetch c01 into	cd_agenda_w,
			dt_agenda_w,
			cd_medico_exec_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_proc_interno_w,
			nr_minuto_duracao_w,
			cd_pessoa_fisica_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		if (ie_atualiza_tempo_agenda_w in ('S','Q')) then		

			select	obter_tempo_total_proced(nr_seq_proc_interno_w,cd_medico_exec_w,CASE WHEN ie_estab_agenda_w='S' THEN cd_estab_agenda_w  ELSE 0 END )
			into STRICT	qt_min_proc_w
			;
			
			qt_min_agenda_w	:= qt_min_agenda_w + qt_min_proc_w;
			
		end if;
			
		end;
	end loop;
	close c01;
	
	/* obter duracao exames adicionais */

	if (ie_atualiza_tempo_proc_w = 'S') then
		open c02;
		loop
		fetch c02 into	cd_medico_proc_adic_w,
				nr_seq_proc_interno_w,
				qt_min_proc_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			if (coalesce(qt_min_proc_w,0) = 0) then
				if (ie_estab_agenda_w = 'S') then
					qt_min_proc_w := obter_tempo_total_proced(nr_seq_proc_interno_w,cd_medico_exec_w,cd_estab_agenda_w);
				else
					qt_min_proc_w := obter_tempo_total_proced(nr_seq_proc_interno_w,cd_medico_exec_w,0);
				end if;
			end if;
			
			if (ie_atual_maior_tempo_proc_w = 'S') then
				if (qt_min_proc_w > qt_min_agenda_w) then
					 qt_min_agenda_w := qt_min_proc_w;
				end if;
			else
				qt_min_agenda_w	:= qt_min_agenda_w + qt_min_proc_w;
			end if;
			
			
			end;
		end loop;
		close c02;
	end if;
	
	/* ajustar duracao agenda */

	
	if (qt_min_agenda_w > nr_minuto_duracao_w) then
	
		/* verificar sobreposicao */

		select	obter_se_sobreposicao_horario(cd_agenda_w, dt_agenda_w, qt_min_agenda_w)
		into STRICT	ie_sobreposicao_w
		;
		
		if (ie_modo_sobreposicao_w = 'R') and
			((ie_param_sobreposicao_w = 'N') or (ie_sobreposicao_w = 'N')) then
			
			ie_ajustar_min_w 		:= 'S';	
			ds_ajustar_min_w		:= null;
		
			update	agenda_paciente
			set	nr_minuto_duracao	= qt_min_agenda_w
			where	nr_sequencia		= nr_seq_agenda_p;		
			commit;
			
		elsif	(ie_modo_sobreposicao_w = 'R' AND ie_param_sobreposicao_w = 'A') and (ie_sobreposicao_w = 'S') then
		
			ie_ajustar_min_w 		:= 'S';	
			ds_ajustar_min_w		:= expressao1_w;
		
			update	agenda_paciente
			set	nr_minuto_duracao	= qt_min_agenda_w
			where	nr_sequencia	= nr_seq_agenda_p;		
			commit;
			
		elsif	(ie_modo_sobreposicao_w = 'R' AND ie_param_sobreposicao_w = 'I') and (ie_sobreposicao_w = 'S') then
		
			ie_ajustar_min_w 		:= 'N';	
			ds_ajustar_min_w		:= substr(expressao2_w || chr(10) || expressao3_w,1,255);
		elsif (ie_modo_sobreposicao_w = 'D') and (ie_sobreposicao_w = 'S') then
			select	cd_agenda,
				hr_inicio
			into STRICT	cd_agenda_w,
				hr_inicio_w	
			from	agenda_paciente
			where	nr_sequencia = nr_seq_agenda_p;
			
			if (coalesce(ds_lista_status_w,'XPTO') = 'XPTO') then
				select	min(hr_inicio)
				into STRICT	hr_prox_agenda_w
				from	agenda_paciente
				where	cd_agenda = cd_agenda_w
				and		dt_agenda = trunc(hr_inicio_w,'dd')
				and		hr_inicio > hr_inicio_w
				and		ie_status_agenda not in ('C','L','II');
			else
				select	min(hr_inicio)
				into STRICT	hr_prox_agenda_w
				from	agenda_paciente
				where	cd_agenda = cd_agenda_w
				and		dt_agenda = trunc(hr_inicio_w,'dd')
				and		hr_inicio > hr_inicio_w
				and 	obter_se_contido_char(ie_status_agenda,ds_lista_status_w || ',L') = 'N';
			end if;	
			
			update	agenda_paciente
			set	nr_minuto_duracao = Obter_Min_Entre_Datas(hr_inicio_w,hr_prox_agenda_w,null)
			where	nr_sequencia	  = nr_seq_agenda_p;
			commit;
			
		end if;
		
	end if;

end if;

ie_ajustar_min_p := ie_ajustar_min_w;
ds_ajustar_min_p := ds_ajustar_min_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_min_dur_agenda_cir (cd_estabelecimento_p bigint, nr_seq_agenda_p bigint, cd_perfil_p bigint, nm_usuario_p text, ie_ajustar_min_p INOUT text, ds_ajustar_min_p INOUT text) FROM PUBLIC;

