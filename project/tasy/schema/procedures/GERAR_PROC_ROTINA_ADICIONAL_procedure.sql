-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proc_rotina_adicional ( nr_seq_agenda_p bigint, nr_seq_grupo_item_p bigint, qt_procedimento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_lado_p text default null, nr_mipres_p controle_mipres_agenda.nr_prescr_mipres%type default null, dt_validade_mipres_p controle_mipres_agenda.dt_validity%type default null) AS $body$
DECLARE


cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_exame_w		bigint;
nr_seq_proc_interno_w	bigint;
cd_material_exame_w	varchar(20);
cd_estabelecimento_w	smallint;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_setor_atendimento_w	bigint;
ie_tipo_atendimento_w	smallint;
cd_tipo_convenio_w	smallint;
cd_procedimento_agenda_w	bigint;
ds_erro_w		varchar(255);
nr_seq_proc_interno_aux_w	bigint;
cd_plano_w		varchar(10);
cd_tipo_acomodacao_w	smallint;
nr_seq_agenda_proc_adic_w bigint;


ie_regra_glosa_conv_w	varchar(1);
ie_glosa_w			varchar(1);
ie_regra_w			integer;
ie_edicao_w                  	varchar(1);
ie_pacote_w			varchar(1);
cd_edicao_ajuste_w      	bigint;
qt_item_edicao_w         	bigint;
nr_seq_regra_w			bigint;
ds_irrelevante_w		varchar(255);
cd_paciente_w			varchar(10);
pr_glosa_w				double precision;
vl_glosa_w				double precision;
ie_dependente_w			varchar(1);
cd_tipo_agenda_w		agenda.cd_tipo_agenda%type;

C01 CURSOR FOR
	SELECT	cd_procedimento,
			ie_origem_proced,
			nr_seq_exame,
			nr_seq_proc_interno
	FROM	agenda_grupo_item_adic
	WHERE	nr_seq_item_grupo = nr_seq_grupo_item_p;



BEGIN

ie_regra_glosa_conv_w := Obter_Param_Usuario(866, 168, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, ie_regra_glosa_conv_w);

SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_exame,
		nr_seq_proc_interno,
		cd_material_exame
INTO STRICT	cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_exame_w,
		nr_seq_proc_interno_w,
		cd_material_exame_w
FROM	agenda_cons_grupo_item
WHERE	nr_sequencia = nr_seq_grupo_item_p;


SELECT	MAX(cd_procedimento)
INTO STRICT	cd_procedimento_agenda_w
FROM	agenda_consulta
WHERE	nr_sequencia	= nr_seq_agenda_p;

--obter dados do agendamento
SELECT	max(a.cd_estabelecimento),
		max(b.cd_convenio),
		max(b.cd_categoria),
		max(b.cd_setor_atendimento),
		max(obter_tipo_atendimento(b.nr_atendimento)),
		max(obter_tipo_convenio(b.cd_convenio)),
		max(b.cd_plano),
		max(b.cd_tipo_acomodacao),
		max(b.cd_pessoa_fisica),
		max(a.cd_tipo_agenda)
INTO STRICT	cd_estabelecimento_w,
		cd_convenio_w,
		cd_categoria_w,
		cd_setor_atendimento_w,
		ie_tipo_atendimento_w,
		cd_tipo_convenio_w,
		cd_plano_w,
		cd_tipo_acomodacao_w,
		cd_paciente_w,
		cd_tipo_agenda_w
FROM	agenda_consulta b,
		agenda a
WHERE	a.cd_agenda = b.cd_agenda
AND		b.nr_sequencia = nr_seq_agenda_p
AND		a.ie_situacao = 'A';

IF (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') AND
	((coalesce(cd_procedimento_w::text, '') = '') OR (coalesce(ie_origem_proced_w::text, '') = '')) THEN

	SELECT * FROM Obter_Proc_Tab_Interno_Conv(	nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, NULL, clock_timestamp(), cd_tipo_acomodacao_w, NULL, NULL, NULL, NULL, NULL, NULL, NULL) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
END IF;

IF (coalesce(cd_procedimento_agenda_w::text, '') = '') AND (obter_funcao_ativa = 281) THEN
	UPDATE	agenda_consulta
	SET		cd_procedimento	= cd_procedimento_w,
			ie_origem_proced	= ie_origem_proced_w,
			nr_seq_proc_interno	= nr_seq_proc_interno_w
	WHERE	nr_sequencia	= nr_seq_agenda_p;
ELSIF	(cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '' AND ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') OR (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '')THEN



		IF (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '')THEN
			SELECT * FROM Obter_exame_lab_convenio(	nr_seq_exame_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_estabelecimento_w, cd_tipo_convenio_w, nr_seq_proc_interno_w, cd_material_exame_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w) INTO STRICT cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w;

		END IF;

		ie_dependente_w := obter_se_existe_dependente(nr_seq_agenda_p, nr_seq_exame_w, cd_procedimento_w, ie_origem_proced_w);

		if (ie_dependente_w = 'S') then
			ds_erro_w := 'S';
		end if;

		IF (coalesce(ds_erro_w::text, '') = '') THEN

			SELECT  nextval('agenda_consulta_proc_seq')
			INTO STRICT 	nr_seq_Agenda_proc_adic_w
			;

			if (ie_regra_glosa_conv_w = 'S') and (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') and (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then

				SELECT * FROM ageint_consiste_plano_conv(
							null, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, clock_timestamp(), 1, coalesce(ie_tipo_atendimento_w,0), cd_plano_w, null, ds_erro_w, 0, null, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_w, cd_categoria_w, cd_estabelecimento_p, null, null, ie_glosa_w, cd_edicao_ajuste_w, null, ds_irrelevante_w, ds_irrelevante_w, cd_paciente_w, null, pr_glosa_w, vl_glosa_w) INTO STRICT ds_erro_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, cd_edicao_ajuste_w, ds_irrelevante_w, ds_irrelevante_w, pr_glosa_w, vl_glosa_w;

				ie_edicao_w	:= ageint_obter_se_proc_conv(cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, clock_timestamp(),
							cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, coalesce(ie_tipo_Atendimento_w,0));
				ie_pacote_w	:= obter_se_pacote_convenio(cd_procedimento_w, ie_origem_proced_w, cd_convenio_w, cd_estabelecimento_p);

				
				if (ie_edicao_w 			= 'N') and (coalesce(cd_edicao_ajuste_w,0) 	= 0) and (ie_pacote_w			= 'N') then
					ie_glosa_w        := 'T';
				end if;

				
				if (ie_edicao_w 			= 'N') and (coalesce(cd_edicao_ajuste_w,0) 	> 0) and (ie_pacote_w			= 'N') then

					
					select   count(*)
					into STRICT     qt_item_edicao_w
					from     preco_amb
					where    cd_edicao_amb = cd_edicao_ajuste_w
					and      cd_procedimento = cd_procedimento_w
					and      ie_origem_proced = ie_origem_proced_w;

					if (qt_item_edicao_w = 0) then
							ie_glosa_w :=    'G';
					end if;
				end if;
			end if;
			
			INSERT INTO agenda_consulta_proc(
						nr_sequencia,
						nr_seq_agenda,
						cd_procedimento,
						ie_origem_proced,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_proc_interno,
						ie_executar_proc,
						nr_seq_exame,
						qt_procedimento,
						cd_material_exame,
						ie_glosa,
						ie_regra,
						nr_seq_regra)
						VALUES (
						nr_seq_Agenda_proc_adic_w,
						nr_seq_agenda_p,
						cd_procedimento_w,
						ie_origem_proced_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_proc_interno_w,
						'S',
						nr_seq_exame_w,
						qt_procedimento_p,
						cd_material_exame_w,
						ie_glosa_w,
						ie_regra_w,
						nr_seq_regra_w);
			COMMIT;

			if (nr_mipres_p IS NOT NULL AND nr_mipres_p::text <> '' AND dt_validade_mipres_p IS NOT NULL AND dt_validade_mipres_p::text <> '') then
				CALL insert_controle_mipres_age(nr_seq_agenda_p, nr_seq_Agenda_proc_adic_w, nr_mipres_p, dt_validade_mipres_p, null, null, nm_usuario_p);
			end if;

			CALL gerar_autor_regra(NULL, NULL, NULL, NULL, NULL, NULL, 'AS',
			nm_usuario_p, null, nr_seq_proc_interno_w, 
			NULL, nr_seq_agenda_p, NULL, nr_seq_agenda_proc_adic_w, '', '','');
		END IF;


		OPEN C01;
		LOOP
		FETCH C01 INTO
			cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_exame_w,
			nr_seq_proc_interno_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			BEGIN
			ds_erro_w := null;
			IF ((cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') OR
				(nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') OR
				(nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '')) THEN
						
				IF (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') AND
					((coalesce(cd_procedimento_w::text, '') = '') OR (coalesce(ie_origem_proced_w::text, '') = '')) THEN

					SELECT * FROM Obter_Proc_Tab_Interno_Conv(	nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, NULL, clock_timestamp(), cd_tipo_acomodacao_w, NULL, NULL, NULL, NULL, NULL, NULL, NULL) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
				ELSIF (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') THEN

					SELECT * FROM Obter_exame_lab_convenio(nr_seq_exame_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_estabelecimento_w, cd_tipo_convenio_w, nr_seq_proc_interno_w, cd_material_exame_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w) INTO STRICT cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w;

				END IF;

				ie_dependente_w := obter_se_existe_dependente(nr_seq_agenda_p, nr_seq_exame_w, cd_procedimento_w, ie_origem_proced_w);

				if (ie_dependente_w = 'S') then
					ds_erro_w := 'S';
				end if;

				IF (coalesce(ds_erro_w::text, '') = '') THEN				

					SELECT  nextval('agenda_consulta_proc_seq')
					INTO STRICT nr_seq_Agenda_proc_adic_w
					;

					INSERT INTO agenda_consulta_proc(
						nr_sequencia,
						nr_seq_agenda,
						cd_procedimento,
						ie_origem_proced,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_proc_interno,
						ie_executar_proc,
						nr_seq_exame,
						qt_procedimento)
						VALUES (
						nr_seq_Agenda_proc_adic_w,
						nr_seq_agenda_p,
						cd_procedimento_w,
						ie_origem_proced_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_proc_interno_w,
						'S',
						nr_seq_exame_w,
						qt_procedimento_p);

					COMMIT;

					if (nr_mipres_p IS NOT NULL AND nr_mipres_p::text <> '' AND dt_validade_mipres_p IS NOT NULL AND dt_validade_mipres_p::text <> '') then
						CALL insert_controle_mipres_age(nr_seq_agenda_p, nr_seq_Agenda_proc_adic_w, nr_mipres_p, dt_validade_mipres_p, null, null, nm_usuario_p);
					end if;

					CALL gerar_autor_regra(NULL, NULL, NULL, NULL, NULL, NULL, 'AS',
					nm_usuario_p, null, nr_seq_proc_interno_w, NULL, 
					nr_seq_agenda_p, NULL, nr_seq_agenda_proc_adic_w, '', '','');
				END IF;
			END IF;			
			END;

		END LOOP;
		CLOSE C01;

END IF;

CALL gerar_dependente_proc_adic( cd_tipo_agenda_w, nm_usuario_p, nr_seq_agenda_p );

COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proc_rotina_adicional ( nr_seq_agenda_p bigint, nr_seq_grupo_item_p bigint, qt_procedimento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_lado_p text default null, nr_mipres_p controle_mipres_agenda.nr_prescr_mipres%type default null, dt_validade_mipres_p controle_mipres_agenda.dt_validity%type default null) FROM PUBLIC;

