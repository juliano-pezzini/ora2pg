-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sip_gerar_item_assistencial ( nr_seq_lote_sip_p bigint, nm_usuario_p text) AS $body$
DECLARE



/*

ESTA PROCEDURE ESTÁ INATIVA!! NÃO DEVE SER UTILIZADA!!!

Para a geração dos dados do SIP deve ser utilizada a procedure da Package PLS_SIP_PCK.GERAR_SIP( nr_seq_lote_sip);

*/
cd_classificacao_w		varchar(20);
cd_classificacao_sip_w		varchar(20);
ie_tipo_contratacao_w		varchar(10);
sg_uf_sip_w			varchar(2);
ie_evento_w			varchar(1);
ie_benef_carencia_w		varchar(1);
ie_despesa_w			varchar(1);
ie_conta_w			varchar(1);
ie_ambulatorial_w		varchar(1);
ie_hospitalar_w			varchar(1);
ie_hospitalar_obs_w		varchar(1);
ie_odontologico_w		varchar(1);
cd_classif_sip_substr_w		varchar(1);
qt_evento_w			double precision;
qt_evento_ww			double precision;
vl_despesa_w			double precision;
vl_despesa_ww			double precision;
vl_despesa_mat_w		double precision;
nr_seq_item_sip_w		bigint;
qt_beneficiario_w		bigint;
nr_seq_apres_w			bigint;
nr_seq_superior_w		bigint;
qt_sip_lote_item_w		bigint;
nr_sip_lote_item_assis_w	bigint;
nr_seq_superior_ww		bigint;
nr_seq_sip_item_w		bigint;
qt_lote_item_assist_w		bigint;
qt_beneficiario_ww		bigint;
qt_beneficiario_mat_w		bigint;
nr_seq_item_assis_w		bigint;
qt_evento_mat_w			double precision;
qt_registro_w			integer	:= 0;
ie_segmentacao_sip_w		smallint;
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
dt_ocorrencia_w			timestamp;
dt_periodo_final_fim_dia_w	timestamp;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		ie_evento,
		ie_benef_carencia,
		ie_despesa,
		nr_seq_apres,
		cd_classificacao,
		nr_seq_superior
	from	sip_item_assistencial;

C02 CURSOR FOR
	SELECT	coalesce(sum(qt_evento),0),
		coalesce(sum(1),0),
		coalesce(sum(vl_despesa),0),
		ie_tipo_contratacao,
		ie_segmentacao,
		sg_uf,
		trunc(dt_ocorrencia,'month')
	from	sip_mov_item_assistencial
	where	trunc(dt_item_sip) <= dt_periodo_final_fim_dia_w
	and (nr_seq_item_sip	= nr_seq_item_sip_w)
	and	coalesce(nr_seq_lote_sip,nr_seq_lote_sip_p)	= nr_seq_lote_sip_p
	group by
		trunc(dt_ocorrencia,'month'),
		ie_tipo_contratacao,
		ie_segmentacao,
		sg_uf;
/*Somar as estruturas filhas do SIP*/

C03 CURSOR FOR
	SELECT	nr_seq_superior,
		ie_tipo_contratacao,
		ie_segmentacao_sip,
		sg_uf,
		trunc(dt_ocorrencia,'month')
	from	sip_lote_item_assistencial
	where	nr_seq_lote	= nr_seq_lote_sip_p
	and	(nr_seq_superior IS NOT NULL AND nr_seq_superior::text <> '')
	group by
		nr_seq_superior,
		ie_tipo_contratacao,
		ie_segmentacao_sip,
		sg_uf,
		trunc(dt_ocorrencia,'month')
	order by coalesce(nr_seq_superior,0)	desc;

C04 CURSOR FOR
	SELECT	sg_uf,
		dt_ocorrencia
	from	sip_lote_item_assistencial
	where	nr_seq_lote	= nr_seq_lote_sip_p
	group by
		sg_uf,
		dt_ocorrencia;

/*Gerar as estruturas que não havia regra dentro da mesma segmentação*/

C05 CURSOR FOR
	SELECT	a.nr_sequencia,
		b.ie_segmentacao_sip,
		c.ie_tipo_contratacao,
		a.ie_evento,
		a.ie_benef_carencia,
		a.ie_despesa,
		a.nr_seq_apres,
		a.cd_classificacao,
		a.nr_seq_superior,
		a.ie_ambulatorial,
		a.ie_hospitalar,
		a.ie_hospitalar_obs,
		a.ie_odontologico
	from	sip_item_assistencial	a,
		(SELECT	vl_dominio	ie_segmentacao_sip
		from	valor_dominio
		where	cd_dominio	= 3543)	b,
		(select	vl_dominio	ie_tipo_contratacao
		from	valor_dominio
		where	cd_dominio	= 1666) c
	order by coalesce(nr_seq_superior,0) desc;

C06 CURSOR FOR
	SELECT	nr_seq_superior,
		ie_tipo_contratacao,
		ie_segmentacao_sip,
		sg_uf,
		trunc(dt_ocorrencia,'month')
	from	sip_lote_item_assistencial
	where	nr_seq_lote	= nr_seq_lote_sip_p
	and	(nr_seq_superior IS NOT NULL AND nr_seq_superior::text <> '')
	and	cd_classificacao_sip	= 'EY'
	group by
		nr_seq_superior,
		ie_tipo_contratacao,
		ie_segmentacao_sip,
		sg_uf,
		trunc(dt_ocorrencia,'month')
	order by coalesce(nr_seq_superior,0)	desc;

C07 CURSOR FOR
	SELECT	substr(cd_classificacao_sip,1,1) cd_classif_sip_substr
	into STRICT	qt_lote_item_assist_w
	from	sip_lote_item_assistencial
	where	nr_seq_lote		= nr_seq_lote_sip_p
	and	ie_tipo_contratacao	= ie_tipo_contratacao_w
	and	nr_seq_item_sip		= nr_seq_sip_item_w
	and	ie_segmentacao_sip	= ie_segmentacao_sip_w
	and	sg_uf			= sg_uf_sip_w
	and	dt_ocorrencia		= dt_periodo_inicial_w;


BEGIN
delete	FROM sip_lote_item_assistencial
where	nr_seq_lote	= nr_seq_lote_sip_p;

/*delete	logxxxx_tasy
where	cd_log	= 12310;*/
begin
select	dt_periodo_inicial,
	coalesce(dt_periodo_final,clock_timestamp())
into STRICT	dt_periodo_inicial_w,
	dt_periodo_final_w
from	pls_lote_sip
where	nr_sequencia	= nr_seq_lote_sip_p;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(187901,'NR_SEQ_LOTE_SIP_P='||nr_seq_lote_sip_p);
end;

dt_periodo_final_fim_dia_w	:= fim_dia(dt_periodo_final_w);

open C01;
loop
fetch C01 into
	nr_seq_item_sip_w,
	ie_evento_w,
	ie_benef_carencia_w,
	ie_despesa_w,
	nr_seq_apres_w,
	cd_classificacao_w,
	nr_seq_superior_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	count(*)
	into STRICT	qt_registro_w
	from	sip_item_assistencial;

	/*insert into logxxxxx_tasy(dt_atualizacao,nm_usuario,cd_log,ds_log)
	values(sysdate,nm_usuario_p,12310,cd_classificacao_w||'-'||nr_seq_item_sip_w||'('||qt_registro_w||')');*/
	open C02;
	loop
	fetch C02 into
		qt_evento_w,
		qt_beneficiario_w,
		vl_despesa_w,
		ie_tipo_contratacao_w,
		ie_segmentacao_sip_w,
		sg_uf_sip_w,
		dt_ocorrencia_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		begin
		select	max(nr_sequencia)
		into STRICT	nr_seq_item_assis_w
		from	sip_lote_item_assistencial
		where	nr_seq_lote		= nr_seq_lote_sip_p
		and	nr_seq_item_sip		= nr_seq_item_sip_w
		and	ie_tipo_contratacao	= ie_tipo_contratacao_w
		and	ie_segmentacao_sip	= ie_segmentacao_sip_w
		and	sg_uf			= sg_uf_sip_w
		and	dt_ocorrencia		= dt_periodo_inicial_w;
		exception
		when others then
			nr_seq_item_assis_w	:= 0;
		end;

		if (coalesce(nr_seq_item_assis_w,0) = 0) then

			insert into sip_lote_item_assistencial(nr_sequencia,nr_seq_lote,sg_uf,
				qt_evento,qt_beneficiario,vl_despesa,
				dt_atualizacao,nm_usuario,nr_seq_item_sip,
				ie_evento,ie_benef_carencia,ie_despesa,
				nr_seq_apres,ie_tipo_contratacao,ie_segmentacao_sip,
				cd_classificacao_sip,nr_seq_superior, dt_ocorrencia)
			values (nextval('sip_lote_item_assistencial_seq'),nr_seq_lote_sip_p,sg_uf_sip_w,--sg_uf_sip_w
				qt_evento_w,0,vl_despesa_w,
				clock_timestamp(),nm_usuario_p,nr_seq_item_sip_w,
				ie_evento_w,ie_benef_carencia_w,ie_despesa_w,
				nr_seq_apres_w,ie_tipo_contratacao_w,ie_segmentacao_sip_w,
				cd_classificacao_w,nr_seq_superior_w, dt_periodo_inicial_w);

		elsif (coalesce(nr_seq_item_assis_w,0)<>0)then

			update	sip_lote_item_assistencial
			set	qt_beneficiario		= 0,
				qt_evento		= qt_evento + qt_evento_w,
				vl_despesa		= vl_despesa + vl_despesa_w
			where	nr_sequencia		= nr_seq_item_assis_w
			and	ie_tipo_contratacao	= ie_tipo_contratacao_w
			and	ie_segmentacao_sip	= ie_segmentacao_sip_w
			and	sg_uf			= sg_uf_sip_w
			and	nr_seq_lote		= nr_seq_lote_sip_p;

		end if;
		end;
	end loop;
	close C02;
	end;
end loop;
close C01;

open C04;
loop
fetch C04 into
	sg_uf_sip_w,
	dt_ocorrencia_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin
	open C05;
	loop
	fetch C05 into
		nr_seq_sip_item_w,
		ie_segmentacao_sip_w,
		ie_tipo_contratacao_w,
		ie_evento_w,
		ie_benef_carencia_w,
		ie_despesa_w,
		nr_seq_apres_w,
		cd_classificacao_w,
		nr_seq_superior_w,
		ie_ambulatorial_w,
		ie_hospitalar_w,
		ie_hospitalar_obs_w,
		ie_odontologico_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		/*para ver se não existe nos item com os dado sie_tipo_contratacao,nr_seq_item_sip e ie_segmentacao_sip no lote e que se já da mesma classificação*/

		qt_lote_item_assist_w	:= 0;

		open C07;
		loop
		fetch C07 into
			cd_classif_sip_substr_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin
			if (cd_classif_sip_substr_w = substr(cd_classificacao_w,1,1)) then
				qt_lote_item_assist_w	:= 1;
				exit;
			end if;
			end;
		end loop;
		close C07;

		if (qt_lote_item_assist_w = 0)then
			if (ie_segmentacao_sip_w = 1)and (ie_ambulatorial_w = 'S')then
				select	count(1)
				into STRICT	qt_lote_item_assist_w
				from	sip_lote_item_assistencial
				where	nr_seq_lote		= nr_seq_lote_sip_p
				and	ie_tipo_contratacao	= ie_tipo_contratacao_w
				and	nr_seq_item_sip		<> nr_seq_sip_item_w
				and	ie_segmentacao_sip	= ie_segmentacao_sip_w
				and	substr(cd_classificacao_sip,1,1)	= substr(cd_classificacao_w,1,1)
				and	sg_uf			= sg_uf_sip_w
				and	vl_despesa > 0  LIMIT 1;
				/*para ver se existe e moutras classificação nos item com os dado s ie_tipo_contratacao, nr_seq_item_sip e ie_segmentacao_sip no lote e que se já da mesma classificação*/

				if (qt_lote_item_assist_w > 0)then
					insert into sip_lote_item_assistencial(nr_sequencia,nr_seq_lote,sg_uf,
						qt_evento,qt_beneficiario,vl_despesa,
						dt_atualizacao,nm_usuario,nr_seq_item_sip,
						ie_evento,ie_benef_carencia,ie_despesa,
						nr_seq_apres,ie_tipo_contratacao,ie_segmentacao_sip,
						cd_classificacao_sip,nr_seq_superior, dt_ocorrencia)
					values (nextval('sip_lote_item_assistencial_seq'),nr_seq_lote_sip_p,sg_uf_sip_w,
						0,0,0,
						clock_timestamp(),nm_usuario_p,nr_seq_sip_item_w,
						ie_evento_w,ie_benef_carencia_w,ie_despesa_w,
						nr_seq_apres_w,ie_tipo_contratacao_w,ie_segmentacao_sip_w,
						cd_classificacao_w,nr_seq_superior_w, dt_periodo_inicial_w);
				end if;
			elsif (ie_segmentacao_sip_w = 2)and (ie_hospitalar_w = 'S')then
				select	count(1)
				into STRICT	qt_lote_item_assist_w
				from	sip_lote_item_assistencial
				where	nr_seq_lote		= nr_seq_lote_sip_p
				and	ie_tipo_contratacao	= ie_tipo_contratacao_w
				and	nr_seq_item_sip		<> nr_seq_sip_item_w
				and	ie_segmentacao_sip	= ie_segmentacao_sip_w
				and	dt_ocorrencia		= dt_periodo_inicial_w
				and	substr(cd_classificacao_sip,1,1)	= substr(cd_classificacao_w,1,1)
				and	sg_uf			= sg_uf_sip_w
				and	vl_despesa	> 0  LIMIT 1;

				if (qt_lote_item_assist_w > 0)then
					insert into sip_lote_item_assistencial(nr_sequencia,nr_seq_lote,sg_uf,
						qt_evento,qt_beneficiario,vl_despesa,
						dt_atualizacao,nm_usuario,nr_seq_item_sip,
						ie_evento,ie_benef_carencia,ie_despesa,
						nr_seq_apres,ie_tipo_contratacao,ie_segmentacao_sip,
						cd_classificacao_sip,nr_seq_superior, dt_ocorrencia)
					values (nextval('sip_lote_item_assistencial_seq'),nr_seq_lote_sip_p,sg_uf_sip_w,
						0,0,0,
						clock_timestamp(),nm_usuario_p,nr_seq_sip_item_w,
						ie_evento_w,ie_benef_carencia_w,ie_despesa_w,
						nr_seq_apres_w,ie_tipo_contratacao_w, ie_segmentacao_sip_w,
						cd_classificacao_w,nr_seq_superior_w, dt_periodo_inicial_w);
				end if;
			elsif (ie_segmentacao_sip_w = 3)and (ie_hospitalar_obs_w = 'S')then
				select	count(1)
				into STRICT	qt_lote_item_assist_w
				from	sip_lote_item_assistencial
				where	nr_seq_lote		= nr_seq_lote_sip_p
				and	ie_tipo_contratacao	= ie_tipo_contratacao_w
				and	nr_seq_item_sip		<> nr_seq_sip_item_w
				and	ie_segmentacao_sip	= ie_segmentacao_sip_w
				and	dt_ocorrencia		= dt_periodo_inicial_w
				and	substr(cd_classificacao_sip,1,1)	= substr(cd_classificacao_w,1,1)
				and	sg_uf			= sg_uf_sip_w
				and	vl_despesa	> 0  LIMIT 1;

				if (qt_lote_item_assist_w	> 0)then
					insert into sip_lote_item_assistencial(nr_sequencia,nr_seq_lote,sg_uf,
						qt_evento,qt_beneficiario,vl_despesa,
						dt_atualizacao,nm_usuario,nr_seq_item_sip,
						ie_evento,ie_benef_carencia,ie_despesa,
						nr_seq_apres,ie_tipo_contratacao,ie_segmentacao_sip,
						cd_classificacao_sip,nr_seq_superior, dt_ocorrencia)
					values (nextval('sip_lote_item_assistencial_seq'),nr_seq_lote_sip_p,sg_uf_sip_w,
						0,0,0,
						clock_timestamp(),nm_usuario_p,nr_seq_sip_item_w,
						ie_evento_w,ie_benef_carencia_w,ie_despesa_w,
						nr_seq_apres_w,ie_tipo_contratacao_w,ie_segmentacao_sip_w,
						cd_classificacao_w,nr_seq_superior_w, dt_periodo_inicial_w);
				end if;
			elsif (ie_segmentacao_sip_w = 4)and (ie_odontologico_w = 'S')then
				select	count(1)
				into STRICT	qt_lote_item_assist_w
				from	sip_lote_item_assistencial
				where	nr_seq_lote		= nr_seq_lote_sip_p
				and	ie_tipo_contratacao	= ie_tipo_contratacao_w
				and	nr_seq_item_sip		<> nr_seq_sip_item_w
				and	ie_segmentacao_sip	= ie_segmentacao_sip_w
				and	dt_ocorrencia		= dt_periodo_inicial_w
				and	substr(cd_classificacao_sip,1,1)	= substr(cd_classificacao_w,1,1)
				and	sg_uf			= sg_uf_sip_w
				and	vl_despesa	> 0  LIMIT 1;

				if (qt_lote_item_assist_w > 0)then
					insert into sip_lote_item_assistencial(nr_sequencia,nr_seq_lote,sg_uf,
						qt_evento,qt_beneficiario,vl_despesa,
						dt_atualizacao,nm_usuario,nr_seq_item_sip,
						ie_evento,ie_benef_carencia,ie_despesa,
						nr_seq_apres,ie_tipo_contratacao,ie_segmentacao_sip,
						cd_classificacao_sip,nr_seq_superior, dt_ocorrencia)
					values (nextval('sip_lote_item_assistencial_seq'),nr_seq_lote_sip_p,sg_uf_sip_w,
						0,0,0,
						clock_timestamp(),nm_usuario_p,nr_seq_sip_item_w,
						ie_evento_w,ie_benef_carencia_w,ie_despesa_w,
						nr_seq_apres_w,ie_tipo_contratacao_w,ie_segmentacao_sip_w,
						cd_classificacao_w,nr_seq_superior_w, dt_periodo_inicial_w);
				end if;
			end if;
		end if;
		end;
	end loop;
	close C05;
	end;
end loop;
close C04;

open C03;
loop
fetch C03 into
	nr_seq_superior_w,
	ie_tipo_contratacao_w,
	ie_segmentacao_sip_w,
	sg_uf_sip_w,
	dt_ocorrencia_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	select	coalesce(sum(qt_evento),0),
		coalesce(sum(qt_beneficiario),0),
		coalesce(sum(vl_despesa),0)
	into STRICT	qt_evento_w,
		qt_beneficiario_w,
		vl_despesa_w
	from	sip_lote_item_assistencial
	where	nr_seq_lote		= nr_seq_lote_sip_p
	and	nr_seq_superior		= nr_seq_superior_w
	and	ie_tipo_contratacao	= ie_tipo_contratacao_w
	and	ie_segmentacao_sip	= ie_segmentacao_sip_w
	and	sg_uf			= sg_uf_sip_w
	and	trunc(dt_ocorrencia,'month') = dt_periodo_inicial_w;

	update	sip_lote_item_assistencial
	set	qt_evento		= coalesce(qt_evento,0)+qt_evento_w,
		qt_beneficiario		= 0,
		vl_despesa		= coalesce(vl_despesa,0)+vl_despesa_w
	where	nr_seq_lote		= nr_seq_lote_sip_p
	and	nr_seq_item_sip		= nr_seq_superior_w
	and	ie_tipo_contratacao	= ie_tipo_contratacao_w
	and	ie_segmentacao_sip	= ie_segmentacao_sip_w
	and	sg_uf			= sg_uf_sip_w
	and	trunc(dt_ocorrencia,'month') = dt_periodo_inicial_w;

	commit;
	end;
end loop;
close C03;

open C06;
loop
fetch C06 into
	nr_seq_superior_w,
	ie_tipo_contratacao_w,
	ie_segmentacao_sip_w,
	sg_uf_sip_w,
	dt_ocorrencia_w;
EXIT WHEN NOT FOUND; /* apply on C06 */
	begin
	select	coalesce(sum(qt_evento),0),
		coalesce(sum(qt_beneficiario),0),
		coalesce(sum(vl_despesa),0)
	into STRICT	qt_evento_w,
		qt_beneficiario_w,
		vl_despesa_w
	from	sip_lote_item_assistencial
	where	nr_seq_lote		= nr_seq_lote_sip_p
	and	nr_seq_superior		= nr_seq_superior_w
	and	ie_tipo_contratacao	= ie_tipo_contratacao_w
	and	ie_segmentacao_sip	= ie_segmentacao_sip_w
	and	sg_uf			= sg_uf_sip_w
	and	cd_classificacao_sip	= 'EY'
	and	trunc(dt_ocorrencia,'month') = dt_periodo_inicial_w;

	update	sip_lote_item_assistencial
	set	qt_evento		= qt_evento_w,
		qt_beneficiario		= 0,
		vl_despesa		= vl_despesa_w
	where	nr_seq_lote		= nr_seq_lote_sip_p
	and	nr_seq_item_sip		= nr_seq_superior_w
	and	ie_tipo_contratacao	= ie_tipo_contratacao_w
	and	ie_segmentacao_sip	= ie_segmentacao_sip_w
	and	sg_uf			= sg_uf_sip_w
	and     cd_classificacao_sip    = 'E'
	and	trunc(dt_ocorrencia,'month') = dt_periodo_inicial_w;

	update	sip_lote_item_assistencial
	set	qt_evento		= qt_evento_w,
		qt_beneficiario	 	= 0,
		vl_despesa 		= vl_despesa_w
	where	nr_seq_lote		= nr_seq_lote_sip_p
	and	nr_seq_superior		= nr_seq_superior_w
	and	ie_tipo_contratacao	= ie_tipo_contratacao_w
	and	ie_segmentacao_sip	= ie_segmentacao_sip_w
	and	sg_uf			= sg_uf_sip_w
	and     cd_classificacao_sip    = 'EX'
	and	trunc(dt_ocorrencia,'month') = dt_periodo_inicial_w;



	commit;
	end;
end loop;
close C06;

CALL sip_gerar_benef_fora_carencia(nr_seq_lote_sip_p,nm_usuario_p);

update	sip_mov_item_assistencial
set	nr_seq_lote_sip		= nr_seq_lote_sip_p
where	trunc(dt_item_sip) <= dt_periodo_final_fim_dia_w
and	coalesce(nr_seq_lote_sip::text, '') = '';

update	pls_lote_sip
set 	dt_geracao_lote	= clock_timestamp()
where	nr_sequencia	= nr_seq_lote_sip_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sip_gerar_item_assistencial ( nr_seq_lote_sip_p bigint, nm_usuario_p text) FROM PUBLIC;

