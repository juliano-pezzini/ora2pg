-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_ajustar_perm_competencia ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_verifica_data_alta_w		varchar(2) 	:= 'N';
dt_entrada_w			timestamp;
dt_alta_w				timestamp;
dt_final_w			timestamp;
dt_parametro_w			timestamp;
dt_procedimento_w			timestamp;
qt_diarias_w			bigint	:= 0;
qt_longa_perm_w			bigint	:= 0;
qt_perm_compet_w			bigint	:= 0;
qt_dif_perm_w			bigint	:= 0;
cd_estab_usuario_w		integer 	:= 0;
nr_sequencia_w			bigint;
cd_convenio_w			integer;
cd_procedimento_real_w		bigint;
ie_origem_proc_real_w		bigint;
cd_procedimento_w		bigint;
qt_permanencia_w			bigint;
qt_meses_w			bigint;
qt_proced_w			bigint;
i 				bigint;
ie_delete_w			varchar(15) := 'N';
qt_diarias_uti_w		bigint;
dt_competencia_w		timestamp := null;

c01 CURSOR FOR
	SELECT 	cd_procedimento
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	coalesce(cd_motivo_Exc_conta::text, '') = ''
	and	Sus_Obter_TipoReg_Proc(cd_procedimento,ie_origem_proced,'C',13) = 3
	order by obter_qt_dia_internacao_sus(cd_procedimento, ie_origem_proced);


BEGIN

begin
cd_estab_usuario_w := coalesce(wheb_usuario_pck.get_cd_estabelecimento,0);
exception
when others then
	cd_estab_usuario_w := 0;
end;

ie_verifica_data_alta_w := obter_valor_param_usuario(1123,113,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w);

/* Obter dados da AIH */

begin
select	cd_procedimento_real,
	ie_origem_proc_real,
	dt_inicial
into STRICT	cd_procedimento_real_w,
	ie_origem_proc_real_w,
	dt_competencia_w
from	sus_aih_unif
where	nr_atendimento		= nr_atendimento_p
and	nr_interno_conta	= nr_interno_conta_p;
exception
	when others then
	select	coalesce(max(cd_procedimento_solic),0),
		coalesce(max(ie_origem_proced),0),
		coalesce(max(dt_emissao),null)
	into STRICT	cd_procedimento_real_w,
		ie_origem_proc_real_w,
		dt_competencia_w	
	from	sus_laudo_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	nr_atendimento		= nr_atendimento_p
	and	ie_classificacao 	= 1
	and	ie_tipo_laudo_sus 	= 0;
end;
	/*Nos casos de Cirurgia Mltipla, Politraumatizado, Tratamento da AIDS, Procedimentos Seqenciais de
	Coluna em Ortopedia e/ou Neurocirurgia e Cirurgia Plstica Corretiva ps Gastroplastia, para fins de clculo de
	permanncia deve-se utilizar como parmetro a mdia de permanncia do procedimento de maior nmero de dias, entre
	os registrados no SISAIH01, na tela Procedimentos Realizados.*/
if (Sus_Validar_Regra(nr_seq_regra_p => 11,cd_procedimento_p => cd_procedimento_real_w,ie_origem_proced_p => ie_origem_proc_real_w,dt_competencia_p => dt_competencia_w) >0) then
	open C01;
	loop
	fetch C01 into	
		cd_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	end loop;
	close C01;
	
	if (coalesce(cd_procedimento_w,0)	<> 0) then
		cd_procedimento_real_w		:= cd_procedimento_w;
	end if;
end if;

/* Obter dados do procedimento */

begin
select	obter_qt_dia_internacao_sus(cd_procedimento, ie_origem_proced)
into STRICT	qt_permanencia_w
from	sus_procedimento
where	cd_procedimento		= cd_procedimento_real_w
and	ie_origem_proced	= ie_origem_proc_real_w;
exception
	when others then
	qt_permanencia_w := 0;
end;

begin
select	coalesce(a.dt_inicial,b.dt_entrada),
	a.dt_final,
	coalesce(b.dt_alta,clock_timestamp())
into STRICT	dt_entrada_w,
	dt_final_w,
	dt_alta_w
from	atendimento_paciente	b,
	sus_aih_unif		a
where	a.nr_atendimento	= nr_atendimento_p
and	a.nr_interno_conta	= nr_interno_conta_p
and	a.nr_atendimento	= b.nr_atendimento;
exception
	when others then
	begin
	Select	dt_entrada,
		coalesce(dt_alta,clock_timestamp())
	into STRICT	dt_entrada_w,
		dt_alta_w
	from 	atendimento_paciente
	where	nr_atendimento	= nr_atendimento_p;
	end;
end;

if (dt_final_w IS NOT NULL AND dt_final_w::text <> '') then
	if (ie_verifica_data_alta_w = 'S') and (dt_final_w <= dt_alta_w) then
		dt_alta_w := dt_final_w;
	elsif (ie_verifica_data_alta_w = 'N') then	
		dt_alta_w := dt_final_w;
	end if;	
end if;

qt_diarias_w		:= (establishment_timezone_utils.startofday(dt_alta_w) - establishment_timezone_utils.startofday(dt_entrada_w));

select	qt_procedimento,
	dt_procedimento,
	cd_convenio
into STRICT	qt_longa_perm_w,
	dt_procedimento_w,
	cd_convenio_w
from	procedimento_paciente
where	nr_sequencia = nr_sequencia_p;

begin
select	coalesce(sum(qt_procedimento),0)
into STRICT	qt_diarias_uti_w
from	procedimento_paciente
where 	nr_atendimento		= nr_atendimento_p
and	nr_interno_conta	= nr_interno_conta_p
and	ie_origem_Proced	= 7
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	((sus_validar_regra(7, cd_procedimento, ie_origem_proced, dt_procedimento) > 0) or (sus_validar_regra(13, cd_procedimento, ie_origem_proced, dt_procedimento) > 0));
exception
when others then
	qt_diarias_uti_w := 0;
end;

begin
if (qt_diarias_w > 0) then
	begin	
	dt_parametro_w 		:=  dt_entrada_w + qt_diarias_w;
	if (establishment_timezone_utils.startofmonth(dt_parametro_w) <> establishment_timezone_utils.startofmonth(dt_procedimento_w)) then
		begin
		qt_permanencia_w	:= (qt_permanencia_w * 2);
		qt_perm_compet_w	:= obter_dias_entre_datas((dt_entrada_w + qt_permanencia_w + qt_diarias_uti_w),last_day(dt_procedimento_w));
		end;
	end if;
	end;
end if;
end;

if (coalesce(qt_perm_compet_w,0) > 0) then
	qt_dif_perm_w := coalesce(qt_longa_perm_w,0) - coalesce(qt_perm_compet_w,0);	
else	
	qt_dif_perm_w := coalesce(qt_longa_perm_w,0);
end if;

if (qt_dif_perm_w = 0) and (coalesce(qt_longa_perm_w,0) > 0) and (coalesce(qt_perm_compet_w,0) > 0) then
	begin
	
	update	procedimento_paciente
	set 	dt_procedimento = dt_entrada_w
	where	nr_sequencia 	= nr_sequencia_p;
	
	end;
elsif (qt_dif_perm_w	> 0) then
	begin	
	
	qt_meses_w := ceil(qt_dif_perm_w/30);
	
	if (qt_meses_w > 1) then
		begin
		
		if (qt_perm_compet_w > 0) then
			begin
			update	procedimento_paciente
			set 	qt_procedimento = qt_perm_compet_w
			where	nr_sequencia 	= nr_sequencia_p;

			CALL Atualiza_Preco_Procedimento(nr_sequencia_p, cd_convenio_w, nm_usuario_p);
			end;
		else
			ie_delete_w	:= 'S';
		end if;
		
		for i in 1..qt_meses_w loop
			begin
			
			if (qt_dif_perm_w > 30) then
				begin
				qt_proced_w := ceil(last_day(add_months(dt_entrada_w,i)) - establishment_timezone_utils.startofmonth(add_months(dt_entrada_w,i)));
				qt_dif_perm_w := qt_dif_perm_w - qt_proced_w;
				end;
			else
				qt_proced_w := qt_dif_perm_w;
			end if;
			
			if (qt_proced_w > 0) then
				begin
				
				select	nextval('procedimento_paciente_seq')
				into STRICT	nr_sequencia_w
				;	
			
				insert into procedimento_paciente(	nr_atendimento,
					dt_entrada_unidade,
					cd_procedimento,
					dt_procedimento,
					qt_procedimento,
					dt_atualizacao,
					nm_usuario,
					cd_convenio,
					cd_categoria,
					dt_prescricao,
					cd_setor_atendimento,
					ie_origem_proced,
					vl_procedimento,
					vl_medico,
					vl_anestesista,
					vl_materiais,
					nr_aih,
					tx_procedimento,
					ie_valor_informado,
					nr_sequencia,
					dt_inicio_procedimento,
					ie_classif_sus,
					cd_cgc_prestador,
					nr_interno_conta,
					nr_seq_atepacu,
					nr_seq_aih,
					ds_observacao,
					cd_medico_executor)
				SELECT	nr_atendimento,
					dt_entrada_unidade,
					cd_procedimento,
					establishment_timezone_utils.startofmonth(add_months(dt_entrada_w,i)),
					qt_proced_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_convenio,
					cd_categoria,
					dt_entrada_unidade,
					cd_setor_atendimento,
					ie_origem_proced,
					vl_procedimento,
					vl_medico,
					vl_anestesista,
					vl_materiais,
					nr_aih,
					tx_procedimento,
					ie_valor_informado,
					nr_sequencia_w,
					establishment_timezone_utils.startOfMonth(dt_parametro_w),
					ie_classif_sus,
					cd_cgc_prestador,
					nr_interno_conta,
					nr_seq_atepacu,
					nr_seq_aih,
					wheb_mensagem_pck.get_texto(299404),--'Ajuste de permanencia por competencia',
					cd_medico_executor
				from	procedimento_paciente
				where	nr_sequencia = nr_sequencia_p;		
		
				CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
				end;
			end if;
			
			
			end;
		end loop;
		
		if (ie_delete_w = 'S') then
			begin
			delete	from procedimento_paciente
			where	nr_sequencia 	= nr_sequencia_p;			
			end;
		end if;
		
		end;
	else
		begin
		
		if (qt_perm_compet_w > 0) then
			begin
			
			update	procedimento_paciente
			set 	qt_procedimento = qt_perm_compet_w
			where	nr_sequencia 	= nr_sequencia_p;
		
			select	nextval('procedimento_paciente_seq')
			into STRICT	nr_sequencia_w
			;	
		
			insert into procedimento_paciente(	nr_atendimento,
				dt_entrada_unidade,
				cd_procedimento,
				dt_procedimento,
				qt_procedimento,
				dt_atualizacao,
				nm_usuario,
				cd_convenio,
				cd_categoria,
				dt_prescricao,
				cd_setor_atendimento,
				ie_origem_proced,
				vl_procedimento,
				vl_medico,
				vl_anestesista,
				vl_materiais,
				nr_aih,
				tx_procedimento,
				ie_valor_informado,
				nr_sequencia,
				dt_inicio_procedimento,
				ie_classif_sus,
				cd_cgc_prestador,
				nr_interno_conta,
				nr_seq_atepacu,
				nr_seq_aih,
				ds_observacao,
				cd_medico_executor)
			SELECT	nr_atendimento,
				dt_entrada_unidade,
				cd_procedimento,
				establishment_timezone_utils.startOfMonth(dt_parametro_w),
				qt_dif_perm_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_convenio,
				cd_categoria,
				dt_entrada_unidade,
				cd_setor_atendimento,
				ie_origem_proced,
				vl_procedimento,
				vl_medico,
				vl_anestesista,
				vl_materiais,
				nr_aih,
				tx_procedimento,
				ie_valor_informado,
				nr_sequencia_w,
				establishment_timezone_utils.startOfMonth(dt_parametro_w),
				ie_classif_sus,
				cd_cgc_prestador,
				nr_interno_conta,
				nr_seq_atepacu,
				nr_seq_aih,
				wheb_mensagem_pck.get_texto(299404),--'Ajuste de permanencia por competencia',
				cd_medico_executor
			from	procedimento_paciente
			where	nr_sequencia = nr_sequencia_p;		
	
			CALL Atualiza_Preco_Procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
			CALL Atualiza_Preco_Procedimento(nr_sequencia_p, cd_convenio_w, nm_usuario_p);
			end;
		else	
			begin
			
			update	procedimento_paciente
			set 	qt_procedimento = qt_dif_perm_w,
				dt_procedimento = establishment_timezone_utils.startOfMonth(dt_parametro_w),
				ds_observacao 	= wheb_mensagem_pck.get_texto(299404) --'Ajuste de permanrncia por competencia'
			where	nr_sequencia 	= nr_sequencia_p;			
			
			CALL Atualiza_Preco_Procedimento(nr_sequencia_p, cd_convenio_w, nm_usuario_p);
			end;
		end if;
		
		end;
	end if;
		
	end;
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_ajustar_perm_competencia ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

