-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_consistir_prestadores ( nr_seq_movimento_p ptu_prestador.nr_seq_movimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------


Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_cgc_cpf_w			ptu_prestador.cd_cgc_cpf%type;
cd_prestador_w			ptu_prestador.cd_prestador%type;
dt_exclusao_w			ptu_prestador.dt_exclusao%type;
dt_inclusao_w			ptu_prestador.dt_inclusao%type;
dt_inicio_contrato_w		ptu_prestador.dt_inicio_contrato%type;
dt_inicio_servico_w		ptu_prestador.dt_inicio_servico%type;
ie_acidente_trabalho_w		ptu_prestador.ie_acidente_trabalho%type;
ie_categoria_dif_w		ptu_prestador.ie_categoria_dif%type;
ie_guia_medico_w		ptu_prestador.ie_guia_medico%type;
ie_perfil_assistencial_w	ptu_prestador.ie_perfil_assistencial%type;
ie_tabela_propria_w		ptu_prestador.ie_tabela_propria%type;
ie_tipo_classif_estab_w		ptu_prestador.ie_tipo_classif_estab%type;
ie_tipo_contratualizacao_w	ptu_prestador.ie_tipo_contratualizacao%type;
ie_tipo_disponibilidade_w	ptu_prestador.ie_tipo_disponibilidade%type;
ie_tipo_prestador_w		ptu_prestador.ie_tipo_prestador%type;
ie_tipo_produto_w		ptu_prestador.ie_tipo_produto%type;
ie_tipo_rede_min_w		ptu_prestador.ie_tipo_rede_min%type;
ie_tipo_vinculo_w		ptu_prestador.ie_tipo_vinculo%type;
ie_urgencia_emerg_w		ptu_prestador.ie_urgencia_emerg%type;
nm_diretor_tecnico_w		ptu_prestador.nm_diretor_tecnico%type;
nm_fantasia_w			ptu_prestador.nm_fantasia%type;
nm_prestador_w			ptu_prestador.nm_prestador%type;
nr_cons_diretor_tecnico_w	ptu_prestador.nr_cons_diretor_tecnico%type;
nr_crm_w			ptu_prestador.nr_crm%type;
nr_insc_estadual_w		ptu_prestador.nr_insc_estadual%type;
ds_inscricao_estadual_w		ptu_prestador.ds_inscricao_estadual%type;
nr_registro_ans_w		ptu_prestador.nr_registro_ans%type;
nr_seq_conselho_w		ptu_prestador.nr_seq_conselho%type;
nr_seq_movimento_w		ptu_prestador.nr_seq_movimento%type;
nr_seq_prestador_w		ptu_prestador.nr_seq_prestador%type;
nr_sequencia_w			ptu_prestador.nr_sequencia%type;
sg_uf_cons_diretor_tecnico_w	valor_dominio.vl_dominio%type;
uf_crm_w			ptu_prestador.uf_crm%type;

qt_espec_prest_w		integer := 0;
qt_inconsist_w			integer;
qt_impede_geracao_w		integer;
qt_endereco_w			integer;
qt_grupo_serv_w			integer;
qt_rede_ref_w			integer;
ie_possui_grupo_inativo_w	integer;
qt_grupo_versao_w		integer;
qt_item_regra_w			integer;
ie_consiste_w			varchar(2) := 'S';
ie_impede_geracao_arquivo_w	varchar(2);
ie_gera_w			varchar(2);
cd_item_w			varchar(255);
cd_item_ant_w			varchar(255);

ie_tipo_endereco_w		ptu_prestador_endereco.ie_tipo_endereco%type;
ds_endereco_w			ptu_prestador_endereco.ds_endereco%type;
cd_municipio_ibge_w		ptu_prestador_endereco.cd_municipio_ibge%type;
cd_cep_w			ptu_prestador_endereco.cd_cep%type;
nr_telefone_w			ptu_prestador_endereco.nr_telefone%type;
cd_cnes_w			ptu_prestador_endereco.cd_cnes%type;
nr_endereco_w			ptu_prestador_endereco.nr_endereco%type;
ds_complemento_w		ptu_prestador_endereco.ds_complemento%type;
ds_bairro_w			ptu_prestador_endereco.ds_bairro%type;
nr_ddd_w			ptu_prestador_endereco.nr_ddd%type;
nr_leitos_totais_w		ptu_prestador_endereco.nr_leitos_totais%type;
nr_seq_endereco_w		ptu_prestador_endereco.nr_sequencia%type;
ds_sg_conselho_w		conselho_profissional.sg_conselho%type;
nr_seq_tipo_prestador_w		pls_prestador.nr_seq_tipo_prestador%type;
	
C01 CURSOR FOR
	SELECT	cd_cgc_cpf,
		cd_prestador,
		dt_exclusao,
		dt_inclusao,
		dt_inicio_contrato,
		dt_inicio_servico,
		ie_acidente_trabalho,
		ie_categoria_dif,
		ie_guia_medico,
		ie_perfil_assistencial,
		ie_tabela_propria,
		ie_tipo_classif_estab,
		ie_tipo_contratualizacao,
		ie_tipo_disponibilidade,
		ie_tipo_prestador,
		ie_tipo_produto,
		ie_tipo_rede_min,
		ie_tipo_vinculo,
		ie_urgencia_emerg,
		nm_diretor_tecnico,
		nm_fantasia,
		nm_prestador,
		nr_cons_diretor_tecnico,
		nr_crm,
		nr_insc_estadual,
		nr_registro_ans,
		nr_seq_conselho,
		nr_seq_movimento,
		nr_seq_prestador,
		nr_sequencia,
		sg_uf_cons_diretor_tecnico,
		uf_crm,
		ds_inscricao_estadual
	from	ptu_prestador
	where	nr_seq_movimento	= nr_seq_movimento_p;
	
C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_tipo_endereco,
		a.ds_endereco,
		a.cd_municipio_ibge,
		a.cd_cep,
		a.nr_telefone,
		a.cd_cnes,
		a.nr_endereco,
		a.ds_complemento,
		a.ds_bairro,
		a.nr_ddd,
		a.nr_leitos_totais
	from	ptu_prestador_endereco a
	where	a.nr_seq_prestador	= nr_sequencia_w;
	
C03 CURSOR FOR
	SELECT	cd_grupo_servico
	from	pls_prestador_grupo_serv
	where	nr_seq_prestador	= nr_seq_prestador_w
	order by
		cd_grupo_servico;

C04 CURSOR FOR
	SELECT	cd_rede
	from	pls_prestador_rede_ref
	where	nr_seq_prestador	= nr_seq_prestador_w
	order by
		cd_rede;


BEGIN
open C01;
loop
fetch C01 into	
	cd_cgc_cpf_w,
	cd_prestador_w,
	dt_exclusao_w,
	dt_inclusao_w,
	dt_inicio_contrato_w,
	dt_inicio_servico_w,
	ie_acidente_trabalho_w,
	ie_categoria_dif_w,
	ie_guia_medico_w,
	ie_perfil_assistencial_w,
	ie_tabela_propria_w,
	ie_tipo_classif_estab_w,
	ie_tipo_contratualizacao_w,
	ie_tipo_disponibilidade_w,
	ie_tipo_prestador_w,
	ie_tipo_produto_w,
	ie_tipo_rede_min_w,
	ie_tipo_vinculo_w,
	ie_urgencia_emerg_w,
	nm_diretor_tecnico_w,
	nm_fantasia_w,
	nm_prestador_w,
	nr_cons_diretor_tecnico_w,
	nr_crm_w,
	nr_insc_estadual_w,
	nr_registro_ans_w,
	nr_seq_conselho_w,
	nr_seq_movimento_w,
	nr_seq_prestador_w,
	nr_sequencia_w,
	sg_uf_cons_diretor_tecnico_w,
	uf_crm_w,
	ds_inscricao_estadual_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	max(nr_seq_tipo_prestador)
	into STRICT	nr_seq_tipo_prestador_w
	from	pls_prestador
	where	nr_sequencia	= nr_seq_prestador_w;
	
	delete	from ptu_prestador_inconsist
	where	nr_seq_ptu_prestador	= nr_sequencia_w;
	
	/*------------------------------------ Consistencias do Prestador ----------------------------------------*/

	
	if (coalesce(cd_prestador_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(53, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 53, nm_usuario_p);
		end if;
	end if;
	
	/* Tipo de Prestador */

	if (coalesce(ie_tipo_prestador_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(1, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 1, nm_usuario_p);
		end if;
	end if;
	
	/* CPF/CGC */

	if (coalesce(cd_cgc_cpf_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(42, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w,'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 42, nm_usuario_p);
		end if;
	end if;
	
	/* Inscricao Estadual */

	if (coalesce(nr_insc_estadual_w::text, '') = '') and (ie_tipo_prestador_w not in (1, 5))then
		ie_consiste_w := ptu_obter_se_consiste_prest(2, nr_seq_tipo_prestador_w, coalesce(ds_inscricao_estadual_w, nr_insc_estadual_w), ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 2 ,nm_usuario_p);
		end if;
	end if;
	
	/* Conselho Regional de Medicina  (CRM) */

	if (ie_tipo_prestador_w = 1) and (coalesce(nr_crm_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(3, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 3, nm_usuario_p);
		end if;
	end if;
	
	/* UF CRM */

	if (ie_tipo_prestador_w = 1) and (coalesce(uf_crm_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(4, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 4, nm_usuario_p);
		end if;
	end if;	
	
	/* Nome Prestador */

	if (coalesce(nm_prestador_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(5, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 5, nm_usuario_p);
		end if;
	end if;
	
	/* Nome Fantasia */

	if (ie_tipo_prestador_w not in (1, 5)) and (coalesce(nm_fantasia_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(6, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 6, nm_usuario_p);
		end if;
	end if;
	
	/* Tipo de vinculo do prestador */

	if (coalesce(ie_tipo_vinculo_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(7, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w,'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w,7,nm_usuario_p);
		end if;
	end if;	
	
	/* Data inclusao */

	if (coalesce(dt_inclusao_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(9, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w,'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w,9,nm_usuario_p);
		end if;
	end if;
	

	/* Tipo Contratualizacao */

	if (coalesce(ie_tipo_contratualizacao_w::text, '') = '') and (ie_tipo_vinculo_w = 3) then
		ie_consiste_w := ptu_obter_se_consiste_prest(10, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 10, nm_usuario_p);
		end if;
	end if;
	
	/* Tipo de Classificacao do Estabelecimento */

	if	((ie_tipo_classif_estab_w = 1) and (ie_tipo_prestador_w not in (2,10))) or
		((coalesce(ie_tipo_classif_estab_w, 2) = 2) and (ie_tipo_prestador_w not in (3 ,4, 6, 10, 11, 12))) or
		((ie_tipo_classif_estab_w = 3) and (ie_tipo_prestador_w not in (1 ,3, 4, 5, 6, 7, 8, 10, 11, 12))) then
		ie_consiste_w := ptu_obter_se_consiste_prest(11, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 11, nm_usuario_p);
		end if;
	end if;
		
	/* Alto custo  (S,N)  */

	if (coalesce(ie_categoria_dif_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(12, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 12, nm_usuario_p);
		end if;
	end if;
	
	/* Acidente de Trabalho  (S, N)  */

	if (coalesce(ie_acidente_trabalho_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(13, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 13, nm_usuario_p);
		end if;
	end if;
	

	/* Urgencia /Emergencia  (S, N) */

	if	((ie_tipo_prestador_w = 2) and (coalesce(ie_urgencia_emerg_w::text, '') = '')) or
		((ie_tipo_prestador_w in (1, 3, 5, 6, 7, 8)) and (ie_urgencia_emerg_w <> 'N'))	then
		ie_consiste_w := ptu_obter_se_consiste_prest(14, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 14, nm_usuario_p);
		end if;
	end if;
	

	/* Data inicio servico */

	if (coalesce(dt_inicio_servico_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(15, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 15, nm_usuario_p);
		end if;
	end if;
	
	/* Data inicio Contrato */

	if (coalesce(dt_inicio_contrato_w::text, '') = '') and (ie_tipo_vinculo_w = 3) then
		ie_consiste_w := ptu_obter_se_consiste_prest(16, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 16, nm_usuario_p);
		end if;
		
	elsif	((ie_tipo_classif_estab_w in (1, 2)) and (trunc(dt_inicio_contrato_w, 'dd') <= to_date('07/07/2003'))) then
		ie_consiste_w := ptu_obter_se_consiste_prest(43, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 43, nm_usuario_p);
		end if;
		
	elsif	((ie_tipo_classif_estab_w = 3) and (trunc(dt_inicio_contrato_w, 'dd') <= to_date('01/12/2003'))) then
		ie_consiste_w := ptu_obter_se_consiste_prest(43, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 43, nm_usuario_p);
		end if;
	end if;
	
	/* ANS */

	if (coalesce(nr_registro_ans_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(17, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 17, nm_usuario_p);
		end if;
	end if;
	
	/* Nome diretor tecnico */

	if (ie_tipo_prestador_w not in (1, 5)) and (coalesce(nm_diretor_tecnico_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(18, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 18, nm_usuario_p);
		end if;
	end if;
	
	/* Tipo Disponibilidade Servico */

	if (coalesce(ie_tipo_disponibilidade_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(19, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 19, nm_usuario_p);
		end if;
	end if;
	
	/* Tabela propria  (S, N)  */

	if (ie_tipo_prestador_w = 2) and (coalesce(ie_tabela_propria_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(20, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 20, nm_usuario_p);
		end if;
	end if;
		
	/* Perfil Assistencial */

	if (ie_tipo_prestador_w = 2) and (coalesce(ie_perfil_assistencial_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(21, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 21, nm_usuario_p);
		end if;
	end if;
	
	/* Tipo de Produto */

	if (coalesce(ie_tipo_produto_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(22, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 22, nm_usuario_p);
		end if;
	end if;
	
	/* Publicacao Guia Medico  (S, N)  */

	if (coalesce(ie_guia_medico_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(23, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 23, nm_usuario_p);
		end if;
	end if;
	
	/* Sigla Conselho Diretor */

	if (1=2 /* VERIFICAR */
) then
		ie_consiste_w := ptu_obter_se_consiste_prest(24, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 24, nm_usuario_p);
		end if;
	end if;
	
	/* Numero Conselho Diretor Tecnico */

	if (ie_tipo_prestador_w not in (1, 5)) and (coalesce(nr_cons_diretor_tecnico_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(25, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 25, nm_usuario_p);
		end if;
	end if;
	
	/* UF Conselho Diretor Tecnico */

	if (ie_tipo_prestador_w not in (1, 5)) and (coalesce(sg_uf_cons_diretor_tecnico_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(26, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 26, nm_usuario_p);
		end if;
	end if;
	
	/* Tipo de Rede */

	if (coalesce(ie_tipo_rede_min_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(27, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 27, nm_usuario_p);
		end if;
	end if;
	
	/*------------------------------------ Consistencias de especialidades  ----------------------------------------*/

	
	if (ie_tipo_prestador_w = 1) then		
		select	count(1)
		into STRICT	qt_espec_prest_w
		from	ptu_prestador
		where	nr_sequencia	= nr_sequencia_w
		and (cd_espec_1	> 0
		or	cd_atua_1	> 0
		or	cd_espec_2	> 0
		or	cd_atua_2	> 0);
		
		
		if (qt_espec_prest_w = 0) then
			ie_consiste_w := ptu_obter_se_consiste_prest(8, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 8, nm_usuario_p);
			end if;
		end if;
	end if;
	
	/*------------------------------------ Consistencias de endereco ----------------------------------------*/

	select	count(1)
	into STRICT	qt_endereco_w
	from	ptu_prestador_endereco a
	where	nr_seq_prestador	= nr_sequencia_w  LIMIT 1;
	
	if (qt_endereco_w = 0) then
		ie_consiste_w := ptu_obter_se_consiste_prest(44, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 44, nm_usuario_p);
		end if;
	end if;
	
	open C02;
	loop
	fetch C02 into
		nr_seq_endereco_w,
		ie_tipo_endereco_w,
		ds_endereco_w,
		cd_municipio_ibge_w,
		cd_cep_w,
		nr_telefone_w,
		cd_cnes_w,
		nr_endereco_w,
		ds_complemento_w,
		ds_bairro_w,
		nr_ddd_w,
		nr_leitos_totais_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		/* Municipio IBGE */

		if (coalesce(cd_municipio_ibge_w::text, '') = '') then
			ie_consiste_w := ptu_obter_se_consiste_prest(45, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 45, nm_usuario_p);
			end if;
		end if;
		
		/* Bairro */

		if (coalesce(ds_bairro_w::text, '') = '') then
			ie_consiste_w := ptu_obter_se_consiste_prest(46, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 46, nm_usuario_p);
			end if;
		end if;
		
		/* CEP */

		if (coalesce(cd_cep_w::text, '') = '') then
			ie_consiste_w := ptu_obter_se_consiste_prest(47, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 47, nm_usuario_p);
			end if;
		end if;
		
		/* DDD */

		if (coalesce(nr_ddd_w::text, '') = '') then
			ie_consiste_w := ptu_obter_se_consiste_prest(48, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 48, nm_usuario_p);
			end if;
		end if;
		
		/* Telefone*/

		if (coalesce(nr_telefone_w::text, '') = '') then
			ie_consiste_w := ptu_obter_se_consiste_prest(49, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 49, nm_usuario_p);
			end if;
		end if;
		
		/* CNES */

		if (coalesce(cd_cnes_w::text, '') = '') then
			ie_consiste_w := ptu_obter_se_consiste_prest(50, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 50, nm_usuario_p);
			end if;
		end if;
		
		/* Leitos */

		if (ie_tipo_prestador_w = 2) and (coalesce(dt_exclusao_w::text, '') = '') and (coalesce(nr_leitos_totais_w::text, '') = '') then
			ie_consiste_w := ptu_obter_se_consiste_prest(51, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 51, nm_usuario_p);
			end if;
		end if;
		
		/*------------------------------------ Consistencias de grupo de servico ----------------------------------------*/

	
		select	count(1)
		into STRICT	qt_grupo_serv_w
		from	ptu_prestador_grupo_serv a
		where	a.nr_seq_endereco	= nr_seq_endereco_w  LIMIT 1;
		
		if (qt_grupo_serv_w = 0) then
			ie_consiste_w := ptu_obter_se_consiste_prest(52, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 52, nm_usuario_p);
			end if;
		end if;
		
		/* ------------------------------------------- Rede referenciada -------------------------------------------------- */

		select	count(1)
		into STRICT	qt_rede_ref_w
		from	ptu_prestador_rede_ref a
		where	a.nr_seq_prestador	= nr_sequencia_w  LIMIT 1;
		
		if (qt_rede_ref_w = 0) then
			ie_consiste_w := ptu_obter_se_consiste_prest(54, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 54, nm_usuario_p);
			end if;
		end if;
		
		/* Possui grupo de servico inativo*/

		select 	count(1)
		into STRICT	qt_grupo_versao_w
		from	ptu_versao_tabela
		where	1 = 1   LIMIT 1;
		
		if (qt_grupo_versao_w = 0) then
			select	count(1)
			into STRICT	ie_possui_grupo_inativo_w
			from	ptu_prestador_grupo_serv 	b,
				ptu_grupo_servico 		a
			where	a.ie_situacao 		<> 'A'
			and	b.cd_grupo_servico	= a.cd_grupo_servico
			and	b.nr_seq_endereco	= nr_seq_endereco_w  LIMIT 1;
		else
			select	count(1)
			into STRICT	ie_possui_grupo_inativo_w
			from	ptu_versao_cadastro		d,
				ptu_versao_tabela		c,
				ptu_prestador_grupo_serv 	b,
				ptu_grupo_servico 		a
			where	c.ie_situacao 		<> 'A'
			and	d.nr_sequencia		= c.nr_seq_versao
			and	c.nr_seq_grupo_servico  = b.cd_grupo_servico
			and	b.cd_grupo_servico	= a.cd_grupo_servico
			and	b.nr_seq_endereco	= nr_seq_endereco_w
			and	coalesce(d.dt_fim_vigencia, clock_timestamp() + interval '1 days') >= clock_timestamp()
			and	d.dt_inicio_vigencia 	<= clock_timestamp()  LIMIT 1;
			
			select	count(1)
			into STRICT	qt_item_regra_w
			from	ptu_versao_cadastro		d,
				ptu_versao_tabela		c,
				ptu_prestador_grupo_serv 	b,
				ptu_grupo_servico 		a
			where	d.nr_sequencia		= c.nr_seq_versao
			and	c.nr_seq_grupo_servico  = b.cd_grupo_servico
			and	b.cd_grupo_servico	= a.cd_grupo_servico
			and	b.nr_seq_endereco	= nr_seq_endereco_w
			and	coalesce(d.dt_fim_vigencia, clock_timestamp() + interval '1 days') >= clock_timestamp()
			and	d.dt_inicio_vigencia 	<= clock_timestamp()  LIMIT 1;
		end if;
		
		if (ie_possui_grupo_inativo_w > 0) or (qt_item_regra_w = 0) then
			
			ie_consiste_w := ptu_obter_se_consiste_prest(57, nr_seq_tipo_prestador_w, null, ie_consiste_w);
			
			if (coalesce(ie_consiste_w, 'S') = 'S') then
				CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 57, nm_usuario_p);
			end if;
		end if;
		/* Fim - Possui grupo de servico inativo*/
	
		end;
	end loop;
	close C02;

	/*Se o prestador estiver medico e nao tiver CRM,  ou se tiver CRM e nao estiver como medico*/

	begin
	select	max(substr(obter_dados_medico(a.cd_pessoa_fisica, 'SGCRM'), 1, 10))
	into STRICT	ds_sg_conselho_w
	from	pls_prestador	a,
		ptu_prestador	b
	where	b.nr_seq_prestador	= a.nr_sequencia
	and	(a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '')
	and	b.nr_sequencia		= nr_sequencia_w;
	exception
	when others then
		ds_sg_conselho_w	:= null;
	end;
	
	if	(ds_sg_conselho_w <> 'CRM' AND ie_tipo_prestador_w = 1) or
		(ds_sg_conselho_w = 'CRM' AND ie_tipo_prestador_w <> 1) then
		ie_consiste_w := ptu_obter_se_consiste_prest(55, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 55, nm_usuario_p);
		end if;
	end if;

	/* Fim consistencia codigo 55*/


		
	/* Tipo classificacao PTU vazio*/

	if (coalesce(ie_tipo_classif_estab_w::text, '') = '') then
		ie_consiste_w := ptu_obter_se_consiste_prest(58, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 58, nm_usuario_p);
		end if;
	end if;
	
	ie_gera_w	:= 'N';
	cd_item_ant_w	:= null;
	
	open C03;
	loop
	fetch C03 into	
		cd_item_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		if (ie_gera_w = 'N') then
			if (cd_item_ant_w = cd_item_w) then
				ie_gera_w	:= 'S';
			end if;
		end if;
		
		cd_item_ant_w	:= cd_item_w;
		end;
	end loop;
	close C03;

	if (ie_gera_w = 'S') then
		ie_consiste_w := ptu_obter_se_consiste_prest(59, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 59, nm_usuario_p);
		end if;
	end if;
	
	ie_gera_w	:= 'N';
	cd_item_ant_w	:= null;
	
	open C04;
	loop
	fetch C04 into	
		cd_item_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		if (ie_gera_w = 'N') then
			if (cd_item_ant_w = cd_item_w) then
				ie_gera_w	:= 'S';
			end if;
		end if;
		
		cd_item_ant_w	:= cd_item_w;
		end;
	end loop;
	close C04;

	if (ie_gera_w = 'S') then
		ie_consiste_w := ptu_obter_se_consiste_prest(60, nr_seq_tipo_prestador_w, null, ie_consiste_w);
		
		if (coalesce(ie_consiste_w, 'S') = 'S') then
			CALL ptu_gravar_inconsist_prestador(nr_sequencia_w, 60, nm_usuario_p);
		end if;
	end if;

	/* Grava o tipo de consistencia */
	
	select	count(1)
	into STRICT	qt_inconsist_w
	from	ptu_prestador_inconsist
	where	nr_seq_ptu_prestador	= nr_sequencia_w  LIMIT 1;
	
	ie_impede_geracao_arquivo_w	:= 'C';
	
	if (qt_inconsist_w > 0) then
		ie_impede_geracao_arquivo_w	:= 'IE';
		select	count(1)
		into STRICT	qt_impede_geracao_w
		from	ptu_prestador_inconsist		b,
			ptu_inconsistencia_prest	a
		where	a.cd_inconsistencia		= b.cd_inconsistencia
		and	b.nr_seq_ptu_prestador		= nr_sequencia_w
		and	ie_impede_geracao_arquivo	= 'S'  LIMIT 1;
		
		if (qt_impede_geracao_w > 0) then
			ie_impede_geracao_arquivo_w	:= 'IN';
		end if;
	end if;
	
	update	ptu_prestador
	set	ie_consistente	= ie_impede_geracao_arquivo_w
	where	nr_Sequencia	= nr_sequencia_w;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_consistir_prestadores ( nr_seq_movimento_p ptu_prestador.nr_seq_movimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

