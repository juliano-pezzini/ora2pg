-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_processo_aprov_nf ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE



cd_estabelecimento_w			smallint;					
cd_perfil_ativo_w			bigint;					
nr_seq_aprovacao_w			bigint;
cd_material_w				integer;
nr_item_nf_w				bigint;
cd_centro_custo_w			bigint;
cd_local_estoque_w			bigint;
cd_setor_digitacao_w			bigint;
nr_seq_proj_rec_w			bigint;
cd_processo_aprov_w			bigint;
dt_liberacao_w				timestamp;
nr_sequencia_w				bigint;
ie_responsavel_w			varchar(1);
cd_cargo_w				bigint;
nm_usuario_regra_w			varchar(15);
cd_responsavel_w			varchar(10);
nr_items_sem_aprov_w			bigint;
cd_conta_contabil_w			varchar(20);
cd_pessoa_fisica_w			varchar(10);
cd_cgc_emitente_w			varchar(14);
nr_nivel_aprovacao_w			bigint;
nr_nivel_aprovacao_w2			bigint;
ie_aprovacao_nivel_w			varchar(1);
dt_emissao_w				timestamp;

ie_tipo_processo_w 			varchar(2);
nr_contrato_w 				nota_fiscal.nr_contrato%type;
nr_ordem_compra_w 			nota_fiscal.nr_ordem_compra%type;
vl_minimo_w				processo_aprov_resp.vl_minimo%type;
vl_maximo_w				processo_aprov_resp.vl_maximo%type;
qt_minimo_aprovador_w			processo_aprov_resp.qt_minimo_aprovador%type;
qt_itens_regra_w			processo_aprov_resp.qt_itens_regra%type;
qt_intervalo_regra_w			processo_aprov_resp.qt_intervalo_regra%type;

c01 CURSOR FOR
SELECT	b.nr_seq_aprovacao,
	b.cd_material,
	b.nr_item_nf,
	b.cd_centro_custo,
	b.cd_local_estoque,
	b.nr_seq_proj_rec,
	a.cd_setor_digitacao,
	a.cd_cgc_emitente,
	a.cd_pessoa_fisica,
	b.cd_conta_contabil,
	a.nr_contrato,
	a.nr_ordem_compra
from 	nota_fiscal a,
	nota_fiscal_item b,
	estrutura_material_v e
where	a.nr_sequencia = b.nr_sequencia
and	b.cd_material = e.cd_material
and 	coalesce(a.dt_aprovacao::text, '') = ''
and	a.nr_sequencia = nr_sequencia_p
order by e.cd_grupo_material,
	e.cd_subgrupo_material,
	e.cd_classe_material,
	e.cd_material;
	
c02 CURSOR FOR
SELECT	nr_sequencia,
	ie_responsavel,
	cd_cargo,
	nm_usuario_regra,
	nr_nivel_aprovacao,
	vl_minimo,
	vl_maximo,
	qt_minimo_aprovador,
	qt_itens_regra,
	qt_intervalo_regra
from	processo_aprov_resp
where	cd_processo_aprov		= cd_processo_aprov_w
and (coalesce(ie_nota_fiscal,'N') = 'S' or coalesce(ie_nota_fiscal_contrato,'N') = 'S')
order by	nr_sequencia;

c03 CURSOR FOR
SELECT	distinct nr_seq_aprovacao
from	nota_fiscal_item
where	nr_Sequencia = nr_sequencia_p
and	(nr_seq_aprovacao IS NOT NULL AND nr_seq_aprovacao::text <> '');


BEGIN


select	cd_estabelecimento,
	obter_perfil_ativo,
	dt_emissao
into STRICT	cd_estabelecimento_w,
	cd_perfil_ativo_w,
	dt_emissao_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

open C01;
loop
fetch C01 into	
	nr_seq_aprovacao_w,
	cd_material_w,
	nr_item_nf_w,
	cd_centro_custo_w,
	cd_local_estoque_w,
	nr_seq_proj_rec_w,
	cd_setor_digitacao_w,
	cd_cgc_emitente_w,
	cd_pessoa_fisica_w,
	cd_conta_contabil_w,
	nr_contrato_w,
	nr_ordem_compra_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	if (coalesce(nr_contrato_w,0) = 0) and (coalesce(nr_ordem_compra_w,0) = 0) then
		ie_tipo_processo_w := 'N';
	elsif (nr_contrato_w IS NOT NULL AND nr_contrato_w::text <> '') and (coalesce(nr_ordem_compra_w,0) = 0)  then
		ie_tipo_processo_w := 'NC';
	end if;


	
	if (coalesce(nr_seq_aprovacao_w::text, '') = '') then
			
		if (coalesce(cd_centro_custo_w::text, '') = '') then
			select	coalesce(max(cd_centro_custo),null)
			into STRICT	cd_centro_custo_w
			from	local_estoque
			where	cd_estabelecimento	= cd_estabelecimento_w
			and	cd_local_estoque	= cd_local_estoque_w;
			
		end if;

		if (cd_cgc_emitente_w IS NOT NULL AND cd_cgc_emitente_w::text <> '') then
			cd_pessoa_fisica_w	:= null;
		end if;

		cd_processo_aprov_w := obter_processo_aprovacao(
			cd_material_w, cd_centro_custo_w, cd_setor_digitacao_w, cd_local_estoque_w, null,  -- cd_local_estoque_destino_p - Usado somente na requisicao
			null,  -- cd_operacao_estoque_p       - Usado somente na requisicao
			cd_conta_contabil_w, cd_cgc_emitente_w, cd_pessoa_fisica_w, ie_tipo_processo_w,  -- ie_tipo_processo_p
			'N', cd_estabelecimento_w, cd_perfil_ativo_w, nr_seq_proj_rec_w, nr_sequencia_p, cd_processo_aprov_w);
			
		if (cd_processo_aprov_w IS NOT NULL AND cd_processo_aprov_w::text <> '') then
		
			select	coalesce(max(b.nr_sequencia),0)
			into STRICT 	nr_seq_aprovacao_w
			from 	processo_aprov_compra a,
				processo_compra b
			where 	b.nr_sequencia = a.nr_sequencia
			and 	b.cd_processo_aprov = cd_processo_aprov_w
			and 	a.nr_documento = nr_sequencia_p
			and 	a.cd_estabelecimento = cd_estabelecimento_w
			and	a.ie_tipo = 'N';
			
			if (nr_seq_aprovacao_w = 0) then
				begin
				
				select	nextval('processo_compra_seq')
				into STRICT	nr_seq_aprovacao_w
				;

				insert into processo_compra(
					nr_sequencia,
					cd_processo_aprov, 
					dt_atualizacao, 
					nm_usuario) 
				values (	nr_seq_aprovacao_w, 
					cd_processo_aprov_w, 
					clock_timestamp(), 
					nm_usuario_p);
					
				dt_liberacao_w			:= clock_timestamp();
				
				open c02;
				loop
				fetch c02 into
					nr_sequencia_w,
					ie_responsavel_w,
					cd_cargo_w,
					nm_usuario_regra_w,
					nr_nivel_aprovacao_w,
					vl_minimo_w,
					vl_maximo_w,
					qt_minimo_aprovador_w,
					qt_itens_regra_w,
					qt_intervalo_regra_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					begin
				
					cd_responsavel_w	:= '';
				
					if (ie_responsavel_w = 'R') then					
						if (coalesce(cd_centro_custo_w::text, '') = '') then						
							select	coalesce(max(cd_centro_custo),null)
							into STRICT	cd_centro_custo_w
							from	local_estoque
							where	cd_estabelecimento	= cd_estabelecimento_w
							and	cd_local_estoque	= cd_local_estoque_w;
						end if;
					
						select	coalesce(max(b.cd_cargo),null)
						into STRICT	cd_cargo_w
						from	cargo a,
							cargo_centro_custo b
						where	b.cd_centro_custo	= cd_centro_custo_w
						and	b.cd_cargo	= a.cd_cargo
						and	a.ie_situacao	= 'A';	
					end if;
				
					if (ie_responsavel_w <> 'F') then
						
						if (nr_nivel_aprovacao_w IS NOT NULL AND nr_nivel_aprovacao_w::text <> '')
							and (coalesce(dt_liberacao_w::text, '') = '') then
							
							select	obter_se_proc_por_nivel(nr_seq_aprovacao_w, cd_estabelecimento_w)
							into STRICT	ie_aprovacao_nivel_w
							;
							
							if (ie_aprovacao_nivel_w = 'S') and (nr_nivel_aprovacao_w2 = nr_nivel_aprovacao_w) then
								dt_liberacao_w	:= clock_timestamp();
							else
								dt_liberacao_w	:= null;
							end if;
						end if;
						
						insert into processo_aprov_compra(
							nr_sequencia,
							nr_seq_proc_aprov,
							dt_atualizacao,
							nm_usuario,
							nm_usuario_nrec,
							cd_pessoa_fisica,
							cd_cargo,
							dt_liberacao,
							dt_definicao,
							ie_aprov_reprov,
							cd_estabelecimento,
							ie_urgente,
							nr_documento,
							ie_tipo,
							dt_documento,
							nr_nivel_aprovacao,
							cd_processo_aprov,
							ie_responsavel,
							vl_minimo,
							vl_maximo,
							qt_minimo_aprovador,
							nm_usuario_regra,
							qt_itens_regra,
							qt_intervalo_regra)
						values (	nr_seq_aprovacao_w,
							nr_sequencia_w,
							clock_timestamp(),
							nm_usuario_p,
							nm_usuario_p,
							cd_responsavel_w,
							cd_cargo_w,
							dt_liberacao_w,
							CASE WHEN coalesce(cd_cargo_w::text, '') = '' THEN  clock_timestamp()  ELSE null END ,
							'P',
							cd_estabelecimento_w,
							'N',
							nr_sequencia_p,
							'N',
							dt_emissao_w,
							nr_nivel_aprovacao_w,
							cd_processo_aprov_w,
							ie_responsavel_w,
							vl_minimo_w,
							vl_maximo_w,
							qt_minimo_aprovador_w,
							nm_usuario_regra_w,
							qt_itens_regra_w,
							qt_intervalo_regra_w);
						
						if (cd_cargo_w IS NOT NULL AND cd_cargo_w::text <> '') then
							dt_liberacao_w	:= null;
						end if;
				
					elsif (ie_responsavel_w = 'F') then
				
						select	obter_pessoa_fisica_usuario(nm_usuario_regra_w,'C')
						into STRICT	cd_responsavel_w
						;
				
						if (coalesce(cd_responsavel_w::text, '') = '') then
							/*'O usuario aprovador ' || NM_USUARIO_REGRA_W || 'nao possui nenhuma pessoa fisica vinculada. Favor ajustar o cadastro deste usuario');*/

							CALL wheb_mensagem_pck.exibir_mensagem_abort(191563,'NM_USUARIO_REGRA_W=' ||NM_USUARIO_REGRA_W);
						end if;
						
						if (nr_nivel_aprovacao_w IS NOT NULL AND nr_nivel_aprovacao_w::text <> '')
							and (coalesce(dt_liberacao_w::text, '') = '') then
							
							select	obter_se_proc_por_nivel(nr_seq_aprovacao_w, cd_estabelecimento_w)
							into STRICT	ie_aprovacao_nivel_w
							;
							
							if (ie_aprovacao_nivel_w = 'S') and (nr_nivel_aprovacao_w2 = nr_nivel_aprovacao_w) then
								dt_liberacao_w	:= clock_timestamp();
							else
								dt_liberacao_w	:= null;
							end if;
						end if;
				
						insert into processo_aprov_compra(
							nr_sequencia,
							nr_seq_proc_aprov,
							dt_atualizacao,
							nm_usuario,
							nm_usuario_nrec,
							cd_pessoa_fisica,
							cd_cargo,
							dt_liberacao,
							dt_definicao,
							ie_aprov_reprov,
							cd_estabelecimento,
							ie_urgente,
							nr_documento,
							ie_tipo,
							dt_documento,
							nr_nivel_aprovacao,
							cd_processo_aprov,
							ie_responsavel,
							vl_minimo,
							vl_maximo,
							qt_minimo_aprovador,
							nm_usuario_regra,
							qt_itens_regra,
							qt_intervalo_regra)
						values (	nr_seq_aprovacao_w,
							nr_sequencia_w,
							clock_timestamp(),
							nm_usuario_p,
							nm_usuario_p,
							cd_responsavel_w,
							null,
							dt_liberacao_w,
							null,
							'P',
							cd_estabelecimento_w,
							'N',
							nr_sequencia_p,
							'N',
							dt_emissao_w,
							nr_nivel_aprovacao_w,
							cd_processo_aprov_w,
							ie_responsavel_w,
							vl_minimo_w,
							vl_maximo_w,
							qt_minimo_aprovador_w,
							nm_usuario_regra_w,
							qt_itens_regra_w,
							qt_intervalo_regra_w);
					
						if (cd_responsavel_w IS NOT NULL AND cd_responsavel_w::text <> '') then
							dt_liberacao_w	:= null;
						end if;

					end if;
					end;
				end loop;
				close c02;
				end;
			end if;
			
			update	nota_fiscal
			set	dt_liberacao		= clock_timestamp(),
				nm_usuario_lib		= nm_usuario_p
			where	nr_Sequencia		= nr_sequencia_p;
				
			update	nota_fiscal_item
			set	nr_seq_aprovacao	= nr_seq_aprovacao_w
			where	nr_sequencia	= nr_Sequencia_p
			and	nr_item_nf	= nr_item_nf_w;

		end if;
	end if;	
	end;
end loop;
close C01;

select	count(*)
into STRICT	nr_items_sem_aprov_w
from	nota_fiscal_item
where	coalesce(dt_aprovacao::text, '') = ''
and	nr_Sequencia = nr_sequencia_p;

if (nr_items_sem_aprov_w = 0) then
	update	nota_fiscal
	set	dt_aprovacao	= clock_timestamp(),
		nm_usuario_aprov	= nm_usuario_p
	where	nr_sequencia = nr_sequencia_p;
end if;
	
open c03;
loop
fetch c03 into
	nr_seq_aprovacao_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	CALL aprovacao_automatica_req(nr_seq_aprovacao_w, nm_usuario_p);
end loop;
close c03;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_processo_aprov_nf ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

