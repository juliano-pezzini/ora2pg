-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE copiar_dados_turno_agserv (cd_estabelecimento_p bigint, cd_agenda_p bigint, ie_dia_semana_p bigint, nr_seq_turno_p bigint, nm_usuario_p text, ie_copia_convenios_turno_p text default 'N', ie_copia_profissionais_turno_p text default 'N', ie_copia_classif_liberadas_p text default 'N') AS $body$
DECLARE


/* variaveis do turno */

nr_seq_turno_w		bigint;
nr_seq_turno_copia_w	bigint;
qt_total_turno_w		smallint;
ie_dia_semana_w		smallint;
hr_inicial_w		timestamp;
hr_final_w		timestamp;
nr_minuto_intervalo_w	bigint;
ie_encaixe_w		varchar(1);
ie_frequencia_w		varchar(15);
dt_inicio_vigencia_w	timestamp;
dt_final_vigencia_w		timestamp;
qt_idade_min_w		bigint;
qt_idade_max_w		bigint;
cd_conv_padrao_w		integer;
cd_categoria_padrao_w	varchar(10);
ds_observacao_w		varchar(255);

/* variaveis da classificacao do turno */

nr_seq_classif_w		bigint;
cd_classificacao_w		varchar(5);
cd_medico_solic_w		varchar(10);
cd_procedimento_w	bigint;
nr_seq_proc_interno_w	bigint;
ie_origem_proced_w	bigint;
cd_setor_coleta_w		integer;
cd_setor_entrega_w	integer;
nr_seq_exame_w		bigint;
ie_forma_agendamento_w	smallint;
ie_tipo_atendimento_w	smallint;
ie_carater_inter_sus_w	varchar(2);
cd_setor_atendimento_w	integer;
qt_classif_w		bigint;
cd_medico_w		varchar(10);
nr_seq_apres_w		bigint;
ie_gera_feriado_w		varchar(1);


/* dados do turno */

c01 CURSOR FOR
SELECT	nr_sequencia,
	ie_dia_semana,
	qt_total_turno,
	hr_inicial,
	hr_final,
	nr_minuto_intervalo,
	ie_encaixe,
	ie_frequencia,
	dt_inicio_vigencia,
	dt_final_vigencia,
	qt_idade_min,
	qt_idade_max,
	cd_convenio_padrao,
	cd_categoria_padrao,
	ds_observacao
from	agenda_turno
where	nr_sequencia	= nr_seq_turno_p;

/* dados da classificacao do turno */

c02 CURSOR FOR
SELECT	cd_classificacao,
	cd_medico_solic,
	cd_procedimento,
	nr_seq_proc_interno,
	ie_origem_proced,
	cd_setor_coleta,
	cd_setor_entrega,
	nr_seq_exame,
	ie_forma_agendamento,
	ie_tipo_atendimento,
	ie_carater_inter_sus,
	cd_setor_atendimento,
	qt_classif,
	cd_medico,
	nr_seq_apres,
	ie_gera_feriado
from	agenda_turno_classif
where	nr_seq_turno	= nr_seq_turno_copia_w;



BEGIN
	/* inserir dados do turno */

	if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') then
		open c01;
		loop
		fetch c01 into	nr_seq_turno_copia_w,
				ie_dia_semana_w,
				qt_total_turno_w,
				hr_inicial_w,
				hr_final_w,
				nr_minuto_intervalo_w,
				ie_encaixe_w,
				ie_frequencia_w,
				dt_inicio_vigencia_w,
				dt_final_vigencia_w,
				qt_idade_min_w,
				qt_idade_max_w,
				cd_conv_padrao_w,
				cd_categoria_padrao_w,
				ds_observacao_w;
				EXIT WHEN NOT FOUND; /* apply on c01 */

			begin
			select	nextval('agenda_turno_seq')
			into STRICT	nr_seq_turno_w
			;

			insert into agenda_turno(
						cd_agenda,
						ie_dia_semana,
						qt_total_turno,
						hr_inicial,
						hr_final,
						nr_minuto_intervalo,
						nm_usuario,
						dt_atualizacao,
						ie_encaixe,
						nr_sequencia,
						ie_frequencia,
						dt_inicio_vigencia,
						dt_final_vigencia,
						qt_idade_min,
						qt_idade_max,
						cd_convenio_padrao,
						cd_categoria_padrao,
						ds_observacao
						)
					values (cd_agenda_p,
						coalesce(ie_dia_semana_p,ie_dia_semana_w),
						qt_total_turno_w,
						hr_inicial_w,
						hr_final_w,
						nr_minuto_intervalo_w,
						nm_usuario_p,
						clock_timestamp(),
						'S',
						nr_seq_turno_w,
						ie_frequencia_w,
						dt_inicio_vigencia_w,
						dt_final_vigencia_w,
						qt_idade_min_w,
						qt_idade_max_w,
						cd_conv_padrao_w,
						cd_categoria_padrao_w,
						ds_observacao_w
						);


			/* inserir dados da classificacao do turno */

			if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') then
				open c02;
				loop
				fetch c02 into	cd_classificacao_w,
						cd_medico_solic_w,
						cd_procedimento_w,
						nr_seq_proc_interno_w,
						ie_origem_proced_w,
						cd_setor_coleta_w,
						cd_setor_entrega_w,
						nr_seq_exame_w,
						ie_forma_agendamento_w,
						ie_tipo_atendimento_w,
						ie_carater_inter_sus_w,
						cd_setor_atendimento_w,
						qt_classif_w,
						cd_medico_w,
						nr_seq_apres_w,
						ie_gera_feriado_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */

					begin
					select	nextval('agenda_turno_classif_seq')
					into STRICT	nr_seq_classif_w
					;
					
					insert into agenda_turno_classif(
									nr_sequencia,
									nr_seq_turno,
									cd_classificacao,
									dt_atualizacao,
									nm_usuario,
									qt_classif,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									cd_medico,
									cd_medico_solic,
									nr_seq_proc_interno,
									cd_setor_coleta,
									cd_setor_entrega,
									ie_forma_agendamento,
									ie_tipo_atendimento,
									ie_carater_inter_sus,
									cd_setor_atendimento,
									nr_seq_apres,
									nr_seq_exame,
									ie_gera_feriado,
									cd_procedimento,
									ie_origem_proced
									)
								values (
									nr_seq_classif_w,
									nr_seq_turno_w,
									cd_classificacao_w,
									clock_timestamp(),
									nm_usuario_p,
									qt_classif_w,
									clock_timestamp(),
									nm_usuario_p,
									cd_medico_w,
									cd_medico_solic_w,
									nr_seq_proc_interno_w,
									cd_setor_coleta_w,
									cd_setor_entrega_w,
									ie_forma_agendamento_w,
									ie_tipo_atendimento_w,
									ie_carater_inter_sus_w,
									cd_setor_atendimento_w,
									nr_seq_apres_w,
									nr_seq_exame_w,
									ie_gera_feriado_w,
									cd_procedimento_w,
									ie_origem_proced_w
									);
					end;
				end loop;
				close c02;
			end if;

			if (ie_copia_convenios_turno_p = 'S') then

				insert into agenda_turno_conv(cd_agenda,
						cd_convenio,
						dt_atualizacao,
						dt_atualizacao_nrec,
						hr_inicial,
						ie_atende_convenio,
						ie_tipo_convenio,
						nm_usuario,
						nm_usuario_nrec,
						nr_sequencia,
						nr_seq_turno,
						pr_permissao,
						qt_permissao)
				(SELECT	cd_agenda_p,
						cd_convenio,
						clock_timestamp(),
						clock_timestamp(),
						hr_inicial,
						ie_atende_convenio,
						ie_tipo_convenio,
						nm_usuario_p,
						nm_usuario_p,
						nextval('agenda_turno_conv_seq'),
						nr_seq_turno_w,
						pr_permissao,
						qt_permissao
				from	agenda_turno_conv
				where	nr_seq_turno = nr_seq_turno_p);

			end if;

			if (ie_copia_profissionais_turno_p = 'S') then

				insert into agenda_turno_prof(cd_pessoa_fisica,
						dt_atualizacao,
						dt_atualizacao_nrec,
						ie_solicita_retorno,
						ie_tipo_profissional,
						nm_usuario,
						nm_usuario_nrec,
						nr_seq_ordem,
						nr_seq_turno,
						nr_sequencia)
				(SELECT	cd_pessoa_fisica,
						clock_timestamp(),
						clock_timestamp(),
						ie_solicita_retorno,
						ie_tipo_profissional,
						nm_usuario_p,
						nm_usuario_p,
						nr_seq_ordem,
						nr_seq_turno_w,
						nextval('agenda_turno_prof_seq')
				from	agenda_turno_prof
				where	nr_seq_turno = nr_seq_turno_p);

			end if;

			if (ie_copia_classif_liberadas_p = 'S') then

				insert into agenda_turno_classif_lib(dt_atualizacao,
						dt_atualizacao_nrec,
						ie_classif_agenda,
						nm_usuario,
						nm_usuario_nrec,
						nr_seq_turno,
						nr_sequencia)
				(SELECT	clock_timestamp(),
						clock_timestamp(),
						ie_classif_agenda,
						nm_usuario_p,
						nm_usuario_p,
						nr_seq_turno_w,
						nextval('agenda_turno_classif_lib_seq')
				from	agenda_turno_classif_lib
				where	nr_seq_turno = nr_seq_turno_p);

			end if;

		end;
	end loop;
	close c01;
	end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE copiar_dados_turno_agserv (cd_estabelecimento_p bigint, cd_agenda_p bigint, ie_dia_semana_p bigint, nr_seq_turno_p bigint, nm_usuario_p text, ie_copia_convenios_turno_p text default 'N', ie_copia_profissionais_turno_p text default 'N', ie_copia_classif_liberadas_p text default 'N') FROM PUBLIC;

