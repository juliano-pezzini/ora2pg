-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_sinais_vitais_gestacao ( cd_pessoa_fisica_p text default null, nr_atendimento_p bigint default null, ie_opcao_p text DEFAULT NULL, qt_pa_sistolica_p INOUT bigint DEFAULT NULL, qt_pa_diastolica_p INOUT bigint DEFAULT NULL, qt_pam_p INOUT bigint DEFAULT NULL, qt_freq_cardiaca_p INOUT bigint DEFAULT NULL, qt_freq_resp_p INOUT bigint DEFAULT NULL, qt_temp_p INOUT bigint DEFAULT NULL, qt_saturacao_o2_p INOUT bigint DEFAULT NULL, qt_bcf_p INOUT bigint DEFAULT NULL, cd_escala_dor_p INOUT text DEFAULT NULL, qt_escala_dor_p INOUT bigint DEFAULT NULL, nr_seq_topografia_dor_p INOUT bigint  DEFAULT NULL) AS $body$
DECLARE

				 
/*				Opção 
Verificar campos para a da pasta Evolução			EV 
Verificar campos para a da pasta Triagem efermagem	TE 
*/
 
				 
qt_pa_sistolica_w		bigint;
qt_pa_diastolica_w		bigint;
qt_pam_w				bigint;
qt_freq_cardiaca_w		bigint;
qt_freq_resp_w			bigint;
qt_temp_w				double precision;
qt_saturacao_o2_w		bigint;
qt_bcf_w				bigint;
nr_atendimento_w 		bigint;
cd_pessoa_fisica_w  	varchar(10);
qt_reg_w				bigint;
cd_escala_dor_w			varchar(10);
qt_escala_dor_w			double precision;
nr_seq_topografia_dor_w bigint;
	

BEGIN 
begin 
	 
if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then 
 
	select max(coalesce(nr_atendimento_mae,nr_atendimento_p)) 
	into STRICT	nr_atendimento_w 
	from	atendimento_paciente 
	where	nr_atendimento = nr_atendimento_p;
  
  
  cd_pessoa_fisica_w  := obter_pessoa_atendimento(nr_atendimento_w,'C');
  
 
	if ( ie_opcao_p = 'EV' ) or ( ie_opcao_p = 'TE') then 
		 
 
		select	max(a.qt_pa_sistolica), 
				max(a.qt_pa_diastolica), 
				max(a.qt_pam), 
				max(a.qt_freq_cardiaca), 
				max(a.qt_freq_resp), 
				max(a.qt_temp), 
				max(a.qt_saturacao_o2), 
				max(a.qt_bcf), 
				max(a.cd_escala_dor), 
				max(a.qt_escala_dor), 
				max(a.nr_seq_topografia_dor), 
				count(*) 
		into STRICT	qt_pa_sistolica_w, 
				qt_pa_diastolica_w, 
				qt_pam_w, 
				qt_freq_cardiaca_w, 
				qt_freq_resp_w, 
				qt_temp_w, 
				qt_saturacao_o2_w, 
				qt_bcf_w, 
				cd_escala_dor_w, 
				qt_escala_dor_w, 
				nr_seq_topografia_dor_w, 
				qt_reg_w 
		from	atendimento_sinal_vital a 
		where  a.nr_atendimento = nr_atendimento_w 
		and 	a.nr_sequencia = (	SELECT	max(b.nr_sequencia) 
									from 	atendimento_sinal_vital b, 
											atendimento_paciente c 
									where  (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '') 
									and   coalesce(b.dt_inativacao::text, '') = '' 
									and   b.dt_liberacao >= (clock_timestamp() - interval '308 days') 
									and   b.nr_atendimento = c.nr_atendimento 
									and   c.cd_pessoa_fisica = cd_pessoa_fisica_w);
				 
		if ( ie_opcao_p = 'EV' ) and ( qt_reg_w = 0 ) then 
		 
		 
				select	max(a.qt_pa_sistolica), 
						max(a.qt_pa_diastolica), 
						max(a.qt_pam), 
						max(a.qt_freq_cardiaca), 
						max(a.qt_freq_resp), 
						max(a.qt_temp), 
						max(a.qt_saturacao_o2), 
						max(a.qt_bcf), 
						max(a.cd_escala_dor), 
						max(a.qt_escala_dor), 
						max(a.nr_seq_topografia_dor), 
						count(*) 
				into STRICT	qt_pa_sistolica_w, 
						qt_pa_diastolica_w, 
						qt_pam_w, 
						qt_freq_cardiaca_w, 
						qt_freq_resp_w, 
						qt_temp_w, 
						qt_saturacao_o2_w, 
						qt_bcf_w, 
						cd_escala_dor_w, 
						qt_escala_dor_w, 
						nr_seq_topografia_dor_w, 
						qt_reg_w						 
				from	enf_tri_obstetrica a 
				where  a.nr_sequencia = (	SELECT 	max(b.nr_sequencia) 
											from 	enf_tri_obstetrica b, 
													atendimento_paciente c 
											where  (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '') 
											and   coalesce(b.dt_inativacao::text, '') = '' 
											and   b.dt_liberacao >= (clock_timestamp() - interval '308 days') 
											and   b.nr_atendimento = c.nr_atendimento 
											and   c.cd_pessoa_fisica = cd_pessoa_fisica_w);		
		 
		end if;
		 
		if (qt_reg_w > 0) then 
		 
			qt_pa_sistolica_p 			:= qt_pa_sistolica_w;
			qt_pa_diastolica_p 			:= qt_pa_diastolica_w;
			qt_pam_p					:= qt_pam_w;
			qt_freq_cardiaca_p 			:= qt_freq_cardiaca_w;
			qt_freq_resp_p 				:= qt_freq_resp_w;
			qt_temp_p 					:= qt_temp_w;
			qt_saturacao_o2_p 			:= qt_saturacao_o2_w;
			qt_bcf_p 					:= qt_bcf_w;
			 
			if (cd_escala_dor_w = 'CV') or (cd_escala_dor_w = 'NV' ) then 
				 
				cd_escala_dor_p 			:= cd_escala_dor_w;
				qt_escala_dor_p 			:= qt_escala_dor_w;
				nr_seq_topografia_dor_p 	:= nr_seq_topografia_dor_w;
 
			end if;		
				 
		end if;
 
	end if;
	  
 
end if;
 
exception 
	when others then 
	null;
end;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_sinais_vitais_gestacao ( cd_pessoa_fisica_p text default null, nr_atendimento_p bigint default null, ie_opcao_p text DEFAULT NULL, qt_pa_sistolica_p INOUT bigint DEFAULT NULL, qt_pa_diastolica_p INOUT bigint DEFAULT NULL, qt_pam_p INOUT bigint DEFAULT NULL, qt_freq_cardiaca_p INOUT bigint DEFAULT NULL, qt_freq_resp_p INOUT bigint DEFAULT NULL, qt_temp_p INOUT bigint DEFAULT NULL, qt_saturacao_o2_p INOUT bigint DEFAULT NULL, qt_bcf_p INOUT bigint DEFAULT NULL, cd_escala_dor_p INOUT text DEFAULT NULL, qt_escala_dor_p INOUT bigint DEFAULT NULL, nr_seq_topografia_dor_p INOUT bigint  DEFAULT NULL) FROM PUBLIC;

