-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE verificar_limite_litro_npt ( nr_sequencia_p nut_pac.nr_sequencia%type, nr_seq_nut_pac_elem_mat_p nut_pac_elem_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_nut_pac_elemento_w		nut_pac_elemento.nr_sequencia%type;
qt_conversao_ml_w				nut_elem_material.qt_conversao_ml%type;
ie_tipo_elemento_w				nut_elemento.ie_tipo_elemento%type;
qt_diaria_w						nut_pac_elemento.qt_diaria%type;
qt_protocolo_w					nut_pac_elemento.qt_protocolo%type;
qt_limite_litro_w				nut_elemento.qt_limite_litro%type;
qt_elem_kg_dia_w				nut_pac_elemento.qt_elem_kg_dia%type;
qt_peso_w						nut_pac.qt_peso%type;
qt_kcal_w						nut_pac_elemento.qt_kcal%type;
pr_conc_glic_solucao_w			nut_pac.pr_conc_glic_solucao%type;
pr_conc_lipidio_solucao_w		nut_pac.pr_conc_lipidio_solucao%type;
pr_conc_proteina_solucao_w		nut_pac.pr_conc_proteina_solucao%type;
qt_kcal_carboidrato_w			nut_pac.qt_kcal_carboidrato%type;
qt_kcal_lipidio_w				nut_pac.qt_kcal_lipidio%type;
qt_kcal_proteina_w				nut_pac.qt_kcal_proteina%type;
qt_grama_nitrogenio_w			nut_pac.qt_grama_nitrogenio%type;
qt_vel_inf_glicose_w			nut_pac.qt_vel_inf_glicose%type;
qt_fase_npt_w					nut_pac.qt_fase_npt%type;
cd_unidade_medida_elem_w		nut_pac_elemento.cd_unidade_medida%type;
cd_unidade_medida_mat_w			nut_pac_elem_mat.cd_unidade_medida%type;
qt_dose_w						nut_pac_elem_mat.qt_dose%type;
qt_kcal_total_w					nut_pac.qt_kcal_total%type;
pr_lipidio_w					nut_pac.pr_lipidio%type;
pr_proteina_w 					nut_pac.pr_proteina%type;
pr_carboidrato_w 				nut_pac.pr_carboidrato%type;
qt_kcal_kg_w					nut_pac.qt_kcal_kg%type;
qt_kcal_nao_proteico_w			nut_pac.qt_kcal_nao_proteico%type;
qt_kcal_proteico_w				nut_pac.qt_kcal_proteico%type;
qt_rel_cal_nit_w				nut_pac.qt_rel_cal_nit%type;
qt_grama_proteina_kg_dia_w		nut_pac.qt_grama_proteina_kg_dia%type;
qt_vol_1_fase_w					nut_pac_elem_mat.qt_vol_1_fase%type;
qt_vol_2_fase_w					nut_pac_elem_mat.qt_vol_2_fase%type;
qt_vol_3_fase_w					nut_pac_elem_mat.qt_vol_3_fase%type;
qt_vol_4_fase_w					nut_pac_elem_mat.qt_vol_4_fase%type;
qt_hora_inf_w					nut_pac.qt_hora_inf%type;
qt_volume_w						nut_pac_elem_mat.qt_volume%type;
qt_volume_diario_w				nut_pac.qt_volume_diario%type;
qt_formula_lipidio_w			double precision;
qt_formula_carboidrato_w		double precision;
qt_formula_proteina_w			double precision := 4;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
		a.cd_unidade_medida,
		d.cd_unidade_medida,
		c.qt_conversao_ml,
		b.ie_tipo_elemento,
		b.qt_limite_litro
from	nut_pac_elem_mat d,
		nut_elem_material c,
		nut_elemento b,
		nut_pac_elemento a
where	a.nr_seq_nut_pac		= d.nr_seq_nut_pac
and		a.nr_seq_elemento		= b.nr_sequencia
and		b.nr_sequencia			= c.nr_seq_elemento
and		c.cd_material			= d.cd_material
and		a.nr_seq_nut_pac		= nr_sequencia_p
and		d.nr_sequencia			= nr_seq_nut_pac_elem_mat_p
and		coalesce(c.ie_tipo,'NPT')	= 'NPT'
and		coalesce(b.qt_limite_litro,0) < coalesce(a.qt_diaria,0)
and		coalesce(b.qt_limite_litro,0) > 0
and		coalesce(c.ie_situacao,'A') = 'A'
and		coalesce(b.ie_limite_concentracao,'N') = 'S';


BEGIN

CALL Wheb_assist_pck.set_informacoes_usuario(wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, nm_usuario_p);
qt_formula_lipidio_w				:= (Wheb_assist_pck.obterParametroFuncao(924,1034))::numeric;
qt_formula_carboidrato_w			:= (Wheb_assist_pck.obterParametroFuncao(924,1035))::numeric;

select	max(pr_conc_glic_solucao),
		max(pr_conc_lipidio_solucao),
		max(pr_conc_proteina_solucao),
		max(qt_kcal_carboidrato),
		max(qt_kcal_lipidio),
		max(qt_kcal_proteina),
		max(qt_peso),
		max(qt_grama_nitrogenio),
		max(qt_vel_inf_glicose),
		max(qt_fase_npt),
		max(qt_hora_inf)
into STRICT	pr_conc_glic_solucao_w,
		pr_conc_lipidio_solucao_w,
		pr_conc_proteina_solucao_w,
		qt_kcal_carboidrato_w,
		qt_kcal_lipidio_w,
		qt_kcal_proteina_w,
		qt_peso_w,
		qt_grama_nitrogenio_w,
		qt_vel_inf_glicose_w,
		qt_fase_npt_w,
		qt_hora_inf_w
from	nut_pac
where	nr_sequencia = nr_sequencia_p;

open c01;
loop
fetch c01 into	nr_seq_nut_pac_elemento_w,
				cd_unidade_medida_elem_w,
				cd_unidade_medida_mat_w,
				qt_conversao_ml_w,
				ie_tipo_elemento_w,
				qt_limite_litro_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	qt_diaria_w 		:= qt_limite_litro_w;
	qt_elem_kg_dia_w	:= dividir_sem_round(qt_diaria_w,qt_peso_w);
	qt_kcal_w 			:= 0;

	if (ie_tipo_elemento_w = 'C') then
		pr_conc_glic_solucao_w := qt_diaria_w;
		qt_kcal_w := qt_diaria_w * qt_formula_carboidrato_w;
		qt_kcal_carboidrato_w := qt_kcal_w;
		qt_vel_inf_glicose_w := dividir_sem_round(qt_elem_kg_dia_w,1.44);
	elsif (ie_tipo_elemento_w = 'L') then
		pr_conc_lipidio_solucao_w := qt_diaria_w;
		qt_kcal_w := qt_diaria_w * qt_formula_lipidio_w;
		qt_kcal_lipidio_w := qt_kcal_w;
	elsif (ie_tipo_elemento_w = 'P') then
		pr_conc_proteina_solucao_w := qt_diaria_w;
		qt_kcal_w := qt_diaria_w * qt_formula_proteina_w;
		qt_kcal_proteina_w := qt_kcal_w;
	end if;

	if (cd_unidade_medida_elem_w = cd_unidade_medida_mat_w) then
		qt_dose_w 	:= qt_diaria_w;
		qt_volume_w := qt_diaria_w;
	else
		qt_dose_w 	:= qt_diaria_w * qt_conversao_ml_w;
		qt_volume_w	:= qt_diaria_w * qt_conversao_ml_w;
	end if;

	qt_kcal_total_w 			:= (qt_kcal_proteina_w + qt_kcal_carboidrato_w + qt_kcal_lipidio_w);
	pr_lipidio_w 				:= round((dividir_sem_round((qt_kcal_lipidio_w * 100),qt_kcal_total_w))::numeric,1);
	pr_proteina_w 				:= round((dividir_sem_round((qt_kcal_proteina_w * 100),qt_kcal_total_w))::numeric,1);
	pr_carboidrato_w 			:= (100 - (pr_lipidio_w + pr_proteina_w));
	qt_kcal_kg_w				:= dividir_sem_round(qt_kcal_total_w , qt_peso_w);
	qt_kcal_proteico_w			:= qt_kcal_proteina_w;
	qt_kcal_nao_proteico_w		:= (qt_kcal_carboidrato_w + qt_kcal_lipidio_w);
	qt_grama_nitrogenio_w		:= (pr_conc_proteina_solucao_w * 0.16);
	qt_rel_cal_nit_w			:= dividir_sem_round(qt_kcal_nao_proteico_w,round((qt_grama_nitrogenio_w)::numeric,1));
	qt_grama_proteina_kg_dia_w	:= dividir_sem_round(pr_conc_proteina_solucao_w,qt_peso_w);
	qt_vol_1_fase_w 			:= dividir_sem_round(qt_volume_w,qt_fase_npt_w);

	if (qt_fase_npt_w > 3) then
		qt_vol_2_fase_w := qt_vol_1_fase_w;
		qt_vol_3_fase_w := qt_vol_1_fase_w;
		qt_vol_4_fase_w := qt_vol_1_fase_w;
	elsif (qt_fase_npt_w > 2) then
		qt_vol_2_fase_w := qt_vol_1_fase_w;
		qt_vol_3_fase_w := qt_vol_1_fase_w;
	elsif (qt_fase_npt_w > 1) then
		qt_vol_2_fase_w := qt_vol_1_fase_w;
	end if;

	update	nut_pac_elem_mat
	set		qt_vol_1_fase	= coalesce(qt_vol_1_fase_w,0),
			qt_vol_2_fase	= coalesce(qt_vol_2_fase_w,0),
			qt_vol_3_fase	= coalesce(qt_vol_3_fase_w,0),
			qt_vol_4_fase	= coalesce(qt_vol_4_fase_w,0),
			qt_volume		= coalesce(qt_volume_w,0),
			qt_dose			= coalesce(qt_dose_w,0)
	where	nr_sequencia 	= nr_seq_nut_pac_elem_mat_p
	and		nr_seq_nut_pac 	= nr_sequencia_p;

	update	nut_pac_elemento
	set		qt_kcal 		= coalesce(qt_kcal_w,0),
			qt_elem_kg_dia	= coalesce(qt_elem_kg_dia_w,0),
			qt_diaria		= coalesce(qt_diaria_w,0)
	where	nr_sequencia 	= nr_seq_nut_pac_elemento_w;

	select	round((sum(a.qt_volume))::numeric,2)
	into STRICT	qt_volume_diario_w
	from	nut_pac_elem_mat a,
			nut_elem_material b,
			nut_pac_elemento c,
			nut_elemento d
	where	a.cd_material 		= b.cd_material
	and		a.nr_seq_nut_pac 	= c.nr_seq_nut_pac
	and		b.nr_seq_elemento 	= c.nr_seq_elemento
	and		b.nr_seq_elemento 	= d.nr_sequencia
	and		c.nr_seq_elemento 	= d.nr_sequencia
	and		coalesce(d.ie_somar_volume,'S') = 'S'
	and		a.nr_seq_nut_pac 	= nr_sequencia_p;

	update	nut_pac
	set		qt_kcal_total				= coalesce(qt_kcal_total_w,0),
			pr_carboidrato 				= coalesce(pr_carboidrato_w,0),
			pr_lipidio 					= coalesce(pr_lipidio_w,0),
			pr_proteina 				= coalesce(pr_proteina_w,0),
			qt_kcal_kg 					= coalesce(qt_kcal_kg_w,0),
			qt_kcal_proteico 			= coalesce(qt_kcal_proteico_w,0),
			qt_kcal_nao_proteico 		= coalesce(qt_kcal_nao_proteico_w,0),
			qt_rel_cal_nit 				= coalesce(qt_rel_cal_nit_w,0),
			pr_conc_proteina_solucao 	= coalesce(pr_conc_proteina_solucao_w,0),
			pr_conc_glic_solucao 		= coalesce(pr_conc_glic_solucao_w,0),
			pr_conc_lipidio_solucao 	= coalesce(pr_conc_lipidio_solucao_w,0),
			qt_kcal_proteina			= coalesce(qt_kcal_proteina_w,0),
			qt_kcal_carboidrato			= coalesce(qt_kcal_carboidrato_w,0),
			qt_kcal_lipidio				= coalesce(qt_kcal_lipidio_w,0),
			qt_vel_inf_glicose			= coalesce(qt_vel_inf_glicose_w,0),
			qt_volume_diario			= coalesce(qt_volume_diario_w,0),
			qt_volume_princ				= coalesce(qt_volume_diario_w,0),
			qt_grama_proteina_kg_dia	= coalesce(qt_grama_proteina_kg_dia_w,0),
			qt_gotejo_npt				= coalesce(round((dividir_sem_round(qt_volume_diario_w,qt_hora_inf_w))::numeric,0),0),
			qt_grama_nitrogenio			= coalesce(qt_grama_nitrogenio_w,0)
	where 	nr_sequencia				= nr_sequencia_p;

	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE verificar_limite_litro_npt ( nr_sequencia_p nut_pac.nr_sequencia%type, nr_seq_nut_pac_elem_mat_p nut_pac_elem_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

