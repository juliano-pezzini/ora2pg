-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_apropriar_juros_multa_mens ( nr_titulo_p bigint, nr_seq_baixa_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_commit_p text, ie_acao_p text default 'I') AS $body$
DECLARE


ie_juros_multa_mens_w		varchar(2);
ie_juros_multa_venc_orig_w	parametro_contas_receber.ie_juros_multa_venc_orig%type;
ie_aprop_jm_orig_w		varchar(1);
vl_juros_calc_w			double precision;
vl_multa_calc_w			double precision;
vl_juros_w			double precision;
vl_multa_w			double precision;
vl_recebido_w			double precision;
vl_juros_apropriar_w		double precision;
vl_multa_apropriar_w		double precision;
vl_apropriado_juros_w		double precision;
vl_apropriado_multa_w		double precision;
vl_estorno_juros_w		double precision	:= 0;
vl_estorno_multa_w		double precision	:= 0;
vl_preco_pre_segurado_w		double precision;
vl_total_preco_pre_w		double precision;
vl_item_w			double precision;
vl_inserido_w			double precision;
vl_juros_liq_w			double precision;
vl_multa_liq_w			double precision;
nr_seq_mensalidade_w		bigint;
nr_seq_pagador_w		bigint;
nr_seq_segurado_w		bigint;
ie_segurado_w			bigint	:= 0;
qt_segurado_mens_w		bigint;
dt_liquidacao_w			timestamp;
dt_vencimento_w			timestamp;
dt_pagamento_previsto_w		timestamp;
dt_recebimento_w		timestamp;
dt_referencia_w			timestamp;
cd_pessoa_fisica_w		varchar(10);
ie_apropriar_juro_multa_mens_w	tipo_recebimento.ie_apropriar_juro_multa_mens%type;
ie_somar_aprop_w		varchar(1);
vl_apropriado_multa_ww		double precision;
vl_juros_total_w		double precision;
vl_multa_diferenca_w		double precision;
ie_data_juros_multa_w		varchar(50);
ds_vencimento_w			varchar(255);
ie_benef_resc_w 		varchar(1);
qt_segurado_mens_ww		bigint;
vl_correcao_monetaria_w		titulo_receber_liq.vl_correcao_monetaria%type;	

c01 CURSOR FOR
	SELECT	nr_seq_segurado
	from	pls_mensalidade_segurado
	where	nr_seq_mensalidade = nr_seq_mensalidade_w
	and	qt_segurado_mens_ww = 0
	
union

	SELECT	nr_seq_segurado
	from	pls_mensalidade_segurado a,
		pls_segurado b
	where	a.nr_seq_mensalidade = nr_seq_mensalidade_w
	and	b.nr_sequencia = a.nr_seq_segurado
	and	coalesce(b.dt_rescisao::text, '') = ''
	and	qt_segurado_mens_ww > 0;
	

BEGIN

ie_somar_aprop_w := 'S';

if (nr_titulo_p IS NOT NULL AND nr_titulo_p::text <> '') and (nr_seq_baixa_p IS NOT NULL AND nr_seq_baixa_p::text <> '') and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then
	/* Verificar parâmetro */

	select	coalesce(max(a.ie_juros_multa_mens),'N'),
		coalesce(max(a.ie_aprop_jm_orig),'N')
	into STRICT	ie_juros_multa_mens_w,
		ie_aprop_jm_orig_w
	from	pls_parametros_cr	a
	where	a.cd_estabelecimento	= cd_estabelecimento_p;

	if (ie_juros_multa_mens_w = 'PF') then
		select	cd_pessoa_fisica
		into STRICT	cd_pessoa_fisica_w
		from	titulo_receber
		where	nr_titulo	= nr_titulo_p;
		
		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			ie_juros_multa_mens_w	:= 'S';
		end if;
	end if;

	if (ie_juros_multa_mens_w = 'S') then
		select	a.nr_seq_mensalidade,
			a.dt_pagamento_previsto,
			a.dt_vencimento,
			a.dt_liquidacao,
			b.dt_recebimento,
			b.vl_recebido,
			coalesce(b.vl_juros,0),
			coalesce(b.vl_multa,0),
			a.vl_saldo_juros,
			a.vl_saldo_multa,
			coalesce(c.ie_apropriar_juro_multa_mens,'N'),
			coalesce(a.ie_data_juros_multa,'DT_VENCIMENTO')
		into STRICT	nr_seq_mensalidade_w,
			dt_pagamento_previsto_w,
			dt_vencimento_w,
			dt_liquidacao_w,
			dt_recebimento_w,
			vl_recebido_w,
			vl_juros_w,
			vl_multa_w,
			vl_juros_calc_w,
			vl_multa_calc_w,
			ie_apropriar_juro_multa_mens_w,
			ie_data_juros_multa_w
		from	tipo_recebimento	c,
			titulo_receber_liq	b,
			titulo_receber		a
		where	a.nr_titulo	= b.nr_titulo
		and	c.cd_tipo_recebimento	= b.cd_tipo_recebimento
		and	a.nr_titulo	= nr_titulo_p
		and	b.nr_sequencia	= nr_seq_baixa_p;

		if (ie_apropriar_juro_multa_mens_w = 'S') and (vl_recebido_w <> 0) then
			select	coalesce(max(ie_juros_multa_venc_orig),'N')
			into STRICT	ie_juros_multa_venc_orig_w
			from	parametro_contas_receber
			where	cd_estabelecimento	= cd_estabelecimento_p;
			
			if (ie_aprop_jm_orig_w = 'N') then
				if (ie_juros_multa_venc_orig_w = 'N') then
					dt_vencimento_w	:= dt_pagamento_previsto_w;
				elsif (ie_juros_multa_venc_orig_w = 'U') then
					if (ie_data_juros_multa_w = 'DT_PAGAMENTO_PREVISTO') then
						dt_vencimento_w	:= dt_pagamento_previsto_w;
					end if;
				end if;
			end if;

			if (dt_vencimento_w < dt_recebimento_w) then
				vl_juros_calc_w := calc_juros_baixa_proporcional(nr_titulo_p, nr_seq_baixa_p, vl_juros_calc_w);
				
				select	coalesce(sum(a.vl_multa),0)
				into STRICT	vl_multa_liq_w
				from	titulo_receber_liq a
				where	a.nr_titulo	= nr_titulo_p;
				
				select	coalesce(sum(a.vl_item),0)
				into STRICT	vl_apropriado_multa_ww
				from	pls_segurado_mensalidade a
				where	a.nr_titulo		= nr_titulo_p
				and	a.ie_tipo_item		= 24
				and	a.ie_situacao		= 'A';
				
				vl_multa_calc_w := pls_obter_juros_multa_aprop(nr_titulo_p, dt_recebimento_w, 'M');
				
				if	((vl_multa_liq_w+vl_apropriado_multa_ww) >= vl_multa_calc_w) then
					vl_multa_calc_w := 0;
				elsif	((vl_multa_liq_w+vl_apropriado_multa_ww) > 0) then
					vl_multa_calc_w := vl_multa_calc_w - (vl_multa_liq_w+vl_apropriado_multa_ww);
				end if;
			end if;

			if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') and
				((vl_juros_calc_w <> 0) or (vl_multa_calc_w <> 0)) then

				select	a.nr_seq_pagador
				into STRICT	nr_seq_pagador_w
				from	pls_mensalidade	a
				where	a.nr_sequencia	= nr_seq_mensalidade_w;

				/* Obter próximo mês de referência do pagador */

				select	add_months(coalesce(max(a.dt_referencia), dt_vencimento_w),1)
				into STRICT	dt_referencia_w
				from	pls_mensalidade	a
				where	a.nr_seq_pagador	= nr_seq_pagador_w;
				
				if (trunc(dt_referencia_w, 'mm') <= trunc(clock_timestamp(), 'mm')) then
					dt_referencia_w	:= trunc(add_months(clock_timestamp() ,1), 'mm');
				end if;

				/* Verificar se a baixa possui valor de juros e multa  e  se já
				foi lançado valor de juros e multa nas programações, neste caso precisa estornar */
				select	coalesce(sum(a.vl_item), 0)
				into STRICT	vl_apropriado_juros_w
				from	pls_segurado_mensalidade a
				
				where	a.nr_titulo		= nr_titulo_p
				and	a.ie_tipo_item		= 23
				and	a.ie_situacao		= 'A';

				select	coalesce(sum(a.vl_item), 0)
				into STRICT	vl_apropriado_multa_w
				from	pls_segurado_mensalidade a
				
				where	a.nr_titulo		= nr_titulo_p
				and	a.ie_tipo_item		= 24
				and	a.ie_situacao		= 'A';

				/* Verificar se é baixa negativa, estorno */

				if (vl_recebido_w < 0) then
					vl_juros_w	:= vl_juros_w * -1;
					vl_multa_w	:= vl_multa_w * -1;
				end if;

				/* Verificar se a data de baixa é superior a data de liquidacação */

				if (dt_recebimento_w > fim_dia(obter_proximo_dia_util(cd_estabelecimento_p, dt_vencimento_w))) then --Lepinski - Se o vencimento for em feriado, pode pagar no próximo dia útil sem pagar juros e multa
					/*Se for estorno da baixa considera apenas o valor apropriado*/

					if (ie_acao_p = 'E') then
						vl_juros_apropriar_w	:= vl_apropriado_juros_w * -1;
						vl_multa_apropriar_w	:= vl_apropriado_multa_w * -1;
					else
						vl_multa_apropriar_w	:= vl_multa_calc_w;
						vl_juros_apropriar_w	:= vl_juros_calc_w;
					end if;

					select	count(1)
					into STRICT	qt_segurado_mens_w
					from	pls_mensalidade_segurado a,
						pls_segurado b
					where	a.nr_seq_mensalidade = nr_seq_mensalidade_w
					and	b.nr_sequencia	= a.nr_seq_segurado
					and	coalesce(b.dt_rescisao::text, '') = '';
					
					select	sum(b.vl_preco_atual)
					into STRICT	vl_total_preco_pre_w
					from	pls_mensalidade_segurado a,
						pls_segurado_preco b,
						pls_segurado c
					where	c.nr_sequencia	= a.nr_seq_segurado
					and	a.nr_seq_mensalidade = nr_seq_mensalidade_w
					and	b.nr_sequencia	= a.nr_seq_segurado_preco
					and	coalesce(c.dt_rescisao::text, '') = '';
					
					ie_benef_resc_w := 'N';
					
					qt_segurado_mens_ww := qt_segurado_mens_w;
					
					if (qt_segurado_mens_ww = 0) then
						select	count(1)
						into STRICT	qt_segurado_mens_w
						from	pls_mensalidade_segurado
						where	nr_seq_mensalidade = nr_seq_mensalidade_w;
						
						select	sum(b.vl_preco_atual)
						into STRICT	vl_total_preco_pre_w
						from	pls_mensalidade_segurado a,
							pls_segurado_preco b
						where	a.nr_seq_mensalidade = nr_seq_mensalidade_w
						and	b.nr_sequencia	= a.nr_seq_segurado_preco;
						
						ie_benef_resc_w := 'S';
					end if;

					if (vl_juros_apropriar_w <> 0) then
						ie_segurado_w	:= 0;
						vl_inserido_w	:= 0;
						open C01;
						loop
						fetch C01 into
							nr_seq_segurado_w;
						EXIT WHEN NOT FOUND; /* apply on C01 */
							begin
							ie_segurado_w	:= ie_segurado_w + 1;
							
							if (ie_benef_resc_w = 'N') then
								select	max(b.vl_preco_atual)
								into STRICT	vl_preco_pre_segurado_w
								from	pls_mensalidade_segurado a,
									pls_segurado_preco b,
									pls_segurado c
								where	c.nr_sequencia	= a.nr_seq_segurado
								and	a.nr_seq_mensalidade = nr_seq_mensalidade_w
								and	b.nr_sequencia	= a.nr_seq_segurado_preco
								and	a.nr_seq_segurado = nr_seq_segurado_w
								and	coalesce(c.dt_rescisao::text, '') = '';
							elsif (ie_benef_resc_w = 'S') then
								select	max(b.vl_preco_atual)
								into STRICT	vl_preco_pre_segurado_w
								from	pls_mensalidade_segurado a,
									pls_segurado_preco b
								where	a.nr_seq_mensalidade = nr_seq_mensalidade_w
								and	b.nr_sequencia	= a.nr_seq_segurado_preco
								and	a.nr_seq_segurado = nr_seq_segurado_w;
							end if;

							if (coalesce(vl_total_preco_pre_w,0) > 0) then
								vl_item_w	:= ((coalesce(vl_preco_pre_segurado_w,0)/coalesce(vl_total_preco_pre_w,0)) * vl_juros_apropriar_w);
							else /* Se não existir valor pré-estabelecido, divide em partes iguais para os beneficiários */
								vl_item_w	:= ((1/qt_segurado_mens_w) * vl_juros_apropriar_w);
							end if;

							if (ie_segurado_w	= qt_segurado_mens_w) then
								vl_item_w	:= vl_juros_apropriar_w - coalesce(vl_inserido_w,0);
							end if;

							insert into pls_segurado_mensalidade(nr_sequencia,
								nm_usuario,
								dt_atualizacao,
								nm_usuario_nrec,
								dt_atualizacao_nrec,
								cd_estabelecimento,
								nr_seq_pagador,
								ie_situacao,
								dt_referencia,
								vl_item,
								ie_tipo_item,
								tx_desconto,
								nr_titulo,
								nr_seq_baixa,
								nr_seq_segurado,
								ie_tipo_lanc)
							values (nextval('pls_segurado_mensalidade_seq'),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								cd_estabelecimento_p,
								nr_seq_pagador_w,
								'A',
								dt_referencia_w,
								vl_item_w,
								23,
								0,
								nr_titulo_p,
								nr_seq_baixa_p,
								nr_seq_segurado_w,
								'P');

							vl_inserido_w	:= coalesce(vl_inserido_w,0) + vl_item_w;
							end;
						end loop;
						close C01;
					end if;

					if (vl_multa_apropriar_w <> 0) then
						ie_segurado_w	:= 0;
						vl_inserido_w	:= 0;
						open C01;
						loop
						fetch C01 into
							nr_seq_segurado_w;
						EXIT WHEN NOT FOUND; /* apply on C01 */
							begin
							ie_segurado_w	:= ie_segurado_w + 1;

							if (ie_benef_resc_w = 'N') then
								select	max(b.vl_preco_atual)
								into STRICT	vl_preco_pre_segurado_w
								from	pls_mensalidade_segurado a,
									pls_segurado_preco b,
									pls_segurado c
								where	c.nr_sequencia	= a.nr_seq_segurado
								and	a.nr_seq_mensalidade = nr_seq_mensalidade_w
								and	b.nr_sequencia	= a.nr_seq_segurado_preco
								and	a.nr_seq_segurado = nr_seq_segurado_w
								and	coalesce(c.dt_rescisao::text, '') = '';
							elsif (ie_benef_resc_w = 'S') then
								select	max(b.vl_preco_atual)
								into STRICT	vl_preco_pre_segurado_w
								from	pls_mensalidade_segurado a,
									pls_segurado_preco b
								where	a.nr_seq_mensalidade = nr_seq_mensalidade_w
								and	b.nr_sequencia	= a.nr_seq_segurado_preco
								and	a.nr_seq_segurado = nr_seq_segurado_w;
							end if;

							if (coalesce(vl_total_preco_pre_w,0) > 0) then
								vl_item_w	:= ((coalesce(vl_preco_pre_segurado_w,0)/coalesce(vl_total_preco_pre_w,0)) * vl_multa_apropriar_w);
							else /* Se não existir valor pré-estabelecido, divide em partes iguais para os beneficiários */
								vl_item_w	:= ((1/qt_segurado_mens_w) * vl_multa_apropriar_w);
							end if;

							if (ie_segurado_w = qt_segurado_mens_w) then
								vl_item_w	:= vl_multa_apropriar_w - coalesce(vl_inserido_w,0);
							end if;

							insert into pls_segurado_mensalidade(nr_sequencia,
								nm_usuario,
								dt_atualizacao,
								nm_usuario_nrec,
								dt_atualizacao_nrec,
								cd_estabelecimento,
								nr_seq_pagador,
								ie_situacao,
								dt_referencia,
								vl_item,
								ie_tipo_item,
								tx_desconto,
								nr_titulo,
								nr_seq_baixa,
								nr_seq_segurado,
								ie_tipo_lanc)
							values (nextval('pls_segurado_mensalidade_seq'),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								cd_estabelecimento_p,
								nr_seq_pagador_w,
								'A',
								dt_referencia_w,
								vl_item_w,
								24,
								0,
								nr_titulo_p,
								nr_seq_baixa_p,
								nr_seq_segurado_w,
								'P');

							vl_inserido_w	:= coalesce(vl_inserido_w, 0) + vl_item_w;
							end;
						end loop;
						close C01;
					end if;

					/* Atualizar saldo do título para atualizar juros e multa */

					CALL atualizar_saldo_tit_rec(nr_titulo_p, nm_usuario_p);
				end if;
			end if;
		end if;
	end if;
	
	/*Buscar valor de correcao gerado na baixa do titulo, somente gera se o título for de mensalidade, e na mensalidade tenha o indice de correcao*/

	select	max(a.vl_correcao_monetaria),
		max(a.dt_recebimento)
	into STRICT	vl_correcao_monetaria_w,
		dt_recebimento_w
	from	titulo_receber_liq a
	where	a.nr_titulo 	= nr_titulo_p
	and	a.nr_sequencia 	= nr_seq_baixa_p;

	if (coalesce(vl_correcao_monetaria_w,0) <> 0) then
		/*Garantir que entrou nos IFs acima e tem esses dados nas variáveis de mensalidade e pagador para gerar o lançamento programado*/

		if (coalesce(nr_seq_mensalidade_w::text, '') = '') then
			select	max(a.nr_seq_mensalidade)
			into STRICT	nr_seq_mensalidade_w
			from	titulo_receber a
			where	a.nr_titulo = nr_titulo_p;
		end if;
		
		if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then
		
			if (coalesce(nr_seq_pagador_w::text, '') = '') then
				select	max(a.nr_seq_pagador)
				into STRICT	nr_seq_pagador_w
				from	pls_mensalidade	a
				where	a.nr_sequencia	= nr_seq_mensalidade_w;
			end if;
		
			/* Obter próximo mês de referência do pagador */

			select	add_months(coalesce(max(a.dt_referencia), dt_vencimento_w),1)
			into STRICT	dt_referencia_w
			from	pls_mensalidade	a
			where	a.nr_seq_pagador	= nr_seq_pagador_w;
				
			if (trunc(dt_referencia_w, 'mm') <= trunc(clock_timestamp(), 'mm')) then
				dt_referencia_w	:= trunc(add_months(clock_timestamp() ,1), 'mm');
			end if;
			
			if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
				CALL pls_gerar_vl_correc_monetaria( nr_seq_pagador_w,
								nr_titulo_p,
								nr_seq_baixa_p,
								vl_correcao_monetaria_w,
								coalesce(dt_referencia_w,dt_recebimento_w),
								'N', -- Não para Commit, o commit vai ocorrer no fim dessa proc
								nm_usuario_p,
								cd_estabelecimento_p );
			end if;		
		end if;
	end if;	
end if;

if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_apropriar_juros_multa_mens ( nr_titulo_p bigint, nr_seq_baixa_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_commit_p text, ie_acao_p text default 'I') FROM PUBLIC;

