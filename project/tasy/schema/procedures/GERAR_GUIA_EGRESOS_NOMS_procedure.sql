-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_guia_egresos_noms ( dt_inicial_p timestamp, dt_final_p timestamp, ie_sobreescrever_p text) AS $body$
DECLARE


record_w 				NOM_EGRESO%ROWTYPE;
nr_sequencia_w			NOM_EGRESO.nr_sequencia%type;
			
c_consulta_dados CURSOR FOR
	SELECT 	a.nr_atendimento FOLIO,
			a.dt_alta EGRESO,
			a.dt_entrada INGRE,
			(to_date(a.dt_alta, 'dd/mm/yyyy') - to_date(a.dt_entrada, 'dd/mm/yyyy')) + 1 DIAS_ESTA,
			a.ie_tipo_serv_mx tipserv,
			/*Los días de estancia son la resta de la fecha de ingreso a la de egreso, con las
				siguientes excepciones; cuando el paciente ingresa y egresa el mismo día en un tipo
				de servicio normal, se genera 1 día de estancia. Cuando el paciente ingresa y egresa
				el mismo día en un tipo de servicio de corta estancia no se generan días de estancia
				por lo que se asigna 0.*/
			case
				when(e.ie_sexo = 'F' and (obter_idade(e.dt_nascimento, clock_timestamp(), 'A') between 10 and 54))
				then obter_horas_atend_unidade(a.nr_atendimento,12)
			end as SA_LABOR,
			case
				when(e.ie_sexo = 'F' and (obter_idade(e.dt_nascimento, clock_timestamp(), 'A') between 10 and 54))
				then obter_horas_atend_unidade(a.nr_atendimento,13)
			end as SA_EXPUL,
			case
				when(e.ie_sexo = 'F' and (obter_idade(e.dt_nascimento, clock_timestamp(), 'A') between 10 and 54))
				then obter_horas_atend_unidade(a.nr_atendimento,14)
			end as SA_RECUP,
			case
				when(e.ie_sexo = 'F' and (obter_idade(e.dt_nascimento, clock_timestamp(), 'A') between 10 and 54))
				then obter_horas_atend_unidade(a.nr_atendimento,15)
			end as SA_INTEN,
			case
				when(e.ie_sexo = 'F' and (obter_idade(e.dt_nascimento, clock_timestamp(), 'A') between 10 and 54))
				then obter_horas_atend_unidade(a.nr_atendimento,16)
			end as SA_INTERM,
			a.cd_procedencia PROCED,
			a.dt_alta DT_ALTA,
			to_char(a.nr_seq_tipo_acidente) TRAUMAT,
			obter_dados_cat_lugar_acc(a.cd_lugar_acc,'CD_LUGAR_ACC') LUGAR,
			coalesce(obter_medico_alta(a.nr_atendimento),obter_dados_pf(a.cd_medico_resp, 'CPR')) CEDULARESP,
			obter_nome_medico(a.cd_medico_resp, 'N') NM_MEDICO,
			obter_convenio_atend_mx(a.nr_atendimento, 1) DERHAB,
			obter_cid_atend_pre(a.nr_atendimento) DIAG_INI,
			a.cd_motivo_alta MOTIVO_ALTA,
			Obter_Dados_Atendimento(a.nr_atendimento,'CGC_PROC') CLUESPROCED,
			Obter_Dados_Atendimento(a.nr_atendimento,'CGC_TRANS') CLUESREFERIDO,
			a.cd_serv_entrada_mx CD_SERV_ENTRADA_MX,
			a.cd_serv_sec_mx CD_SERV_SEC_MX,
			a.cd_serv_ter_mx CD_SERV_TER_MX,
			a.cd_serv_alta_mx CD_SERV_ALTA_MX,
			a.cd_estabelecimento CD_ESTABELECIMENTO,
			a.cd_pessoa_fisica CD_PESSOA_FISICA,
			m.cd_externo MOTEGRE
	from 	atendimento_paciente a,
			pessoa_fisica e,		
			motivo_alta m
	where 	(a.dt_alta IS NOT NULL AND a.dt_alta::text <> '')
	and		a.dt_alta between pkg_date_utils.start_of(DT_INICIAL_P,'MONTH') and pkg_date_utils.end_of(DT_FINAL_P,'MONTH')
	and 	m.cd_motivo_alta = a.cd_motivo_alta
	and 	e.cd_pessoa_fisica = a.cd_pessoa_fisica
	and		a.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento
	and		coalesce(m.ie_situacao, 'A') = 'A'
	and		coalesce(m.ie_obito, 'N') = 'N'
	and		coalesce(m.ie_cancelado, 'N') = 'N'
	and		coalesce(m.ie_gera_alta_rn, 'N') = 'N'
	and 	(m.cd_externo IS NOT NULL AND m.cd_externo::text <> '') /*Verificar com Robson*/
	and		not exists (
				SELECT 1
				from	nom_egreso x
				where 	x.nr_atendimento = a.nr_atendimento);
	
c_consulta_dados_w c_consulta_dados%ROWTYPE;

c_dados_pessoa CURSOR FOR
	SELECT 	y.nr_sequencia nr_seq_person_name,
			obter_clave_idade_nom(d.dt_nascimento,clock_timestamp(),'CLAVE') CVEEDAD,
			obter_clave_idade_nom(d.dt_nascimento,clock_timestamp(),'EDAD') EDAD,
			CASE WHEN d.ie_sexo='M' THEN  '1' WHEN d.ie_sexo='F' THEN  '2'  ELSE '9' END  SEXO,
			coalesce(trunc(d.qt_altura_cm),999) TALLA, 
			SUBSTR(d.nr_spss,1,10) SPSS, 
			substr(d.nr_spss,9,2) SPSS_DV,
			d.nr_prontuario EXPEDIENTE, 
			d.cd_curp CURP, 
			CASE WHEN obter_se_indigina(d.nr_seq_cor_pele)='S' THEN 1 WHEN obter_se_indigina(d.nr_seq_cor_pele)='N' THEN 2  ELSE 3 END  INDIGENA, 
			CASE WHEN coalesce(d.nr_seq_lingua_indigena::text, '') = '' THEN '3'  ELSE '1' END  HABLA_LENGUA, 
			obter_dados_cat_lingua_indig(d.nr_seq_lingua_indigena,'CD_LINGUA_INDIGENA') LENGUA_INDIGENA, 
			CASE WHEN d.ie_fluencia_portugues='F' THEN 1 WHEN d.ie_fluencia_portugues='R' THEN 1  ELSE (CASE WHEN (d.ie_fluencia_portugues IS NOT NULL AND d.ie_fluencia_portugues::text <> '') THEN 2 ELSE 3 END) END  HABLA_ESP,
			obter_idade(d.dt_nascimento, clock_timestamp(), 'M') IDADE_MES,
			coalesce(substr(trunc(d.qt_peso),1,3),999) PESO
	FROM person_name y, pessoa_fisica d 
WHERE d.cd_pessoa_fisica = c_consulta_dados_w.cd_pessoa_fisica AND y.nr_sequencia = d.nr_seq_person_name;
	
c_dados_pessoa_w c_dados_pessoa%ROWTYPE;

c_consulta_estabelecimento CURSOR FOR
	SELECT 	obter_dados_cat_clues(c.cd_internacional,'CD_ESTADO')	 CEDOCVE,
			obter_dados_cat_clues(c.cd_internacional,'CD_JURISDICAO') CJURCVE,
			obter_dados_cat_clues(c.cd_internacional,'CD_MUNICIPIO') CMPOCVE,
			obter_dados_cat_clues(c.cd_internacional,'CD_LOCALIDADE') CLOCCVE,
			obter_dados_cat_clues(c.cd_internacional,'IE_TIPO_UNIDADE') CTUNCVE,
			SUBSTR(coalesce(obter_dados_cat_clues(c.cd_internacional,'CD_CLUES'),c.cd_cgc),1,11) CLUES
	FROM 	estabelecimento b,
			pessoa_juridica c
	WHERE 	b.cd_estabelecimento = c_consulta_dados_w.CD_ESTABELECIMENTO
	AND 	b.cd_cgc = c.cd_cgc;

c_consulta_estabelecimento_w c_consulta_estabelecimento%ROWTYPE;

c_compl_mexico CURSOR FOR
	SELECT 	to_char(cm.ie_tipo_uni_psiq) TUHPSIQ,
			to_char(cm.ie_serv_psiq_cont) SERVHC,
			to_char(cm.ie_serv_psiq_par) SERVHP
	from 	complemento_mexico cm
	where 	cm.nr_atendimento = c_consulta_dados_w.FOLIO;

c_compl_mexico_w c_compl_mexico%ROWTYPE;

c_dados_endereco CURSOR FOR
	SELECT 	coalesce(get_info_end_endereco(h.nr_seq_pessoa_endereco,'ESTADO_PROVINCI','C'), obter_dados_cat_localidade(h.nr_seq_localizacao_mx,'CD_EFE')) ENTIDAD,
			coalesce(get_info_end_endereco(h.nr_seq_pessoa_endereco,'MUNICIPIO','C'), obter_dados_cat_localidade(h.nr_seq_localizacao_mx,'CD_CAT_MUNICIPIO')) MUNIC, 
			coalesce(get_info_end_endereco(h.nr_seq_pessoa_endereco,'LOCALIDADE_AREA','C'), obter_dados_cat_localidade(h.nr_seq_localizacao_mx,'CD_CAT_LOCALIDADE')) LOC,
			h.nr_seq_pessoa_endereco
	FROM	compl_pessoa_fisica h
	WHERE 	h.cd_pessoa_fisica = c_consulta_dados_w.cd_pessoa_fisica
	AND		h.ie_tipo_complemento = 1;

c_dados_endereco_w c_dados_endereco%ROWTYPE;

c_dados_diagnostico CURSOR FOR
	SELECT	distinct a.cd_doenca cd_doenca,
			a.ie_classificacao_doenca ie_classificacao_doenca,
			a.dt_diagnostico
	from   	diagnostico_doenca a
	where  	a.nr_atendimento = c_consulta_dados_w.FOLIO
	and 	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and 	coalesce(a.dt_inativacao::text, '') = ''
	and 	not exists (
				SELECT 1
				from diagnostico_doenca x
				where	x.nr_seq_interno <> a.nr_seq_interno
				and	x.dt_diagnostico > a.dt_diagnostico
				and	(x.dt_liberacao IS NOT NULL AND x.dt_liberacao::text <> '')
				and 	coalesce(x.dt_inativacao::text, '') = ''
				and	x.cd_doenca = a.cd_doenca
				and	x.nr_atendimento = a.nr_atendimento
				and	x.ie_classificacao_doenca = a.ie_classificacao_doenca)
	order by a.ie_classificacao_doenca, a.dt_diagnostico desc LIMIT 6;

c_dados_diagnostico_w c_dados_diagnostico%ROWTYPE;

c_dados_procedimentos CURSOR FOR
	SELECT 	distinct
			a.cd_sistema_ant PROMED,
			y.cd_tipo_anestesia ANEST,
			'1' quirof,
			trunc(nr_min_duracao_real/60,0) QH,
			mod(nr_min_duracao_real,60) QM,
			z.ds_codigo_prof CEDULACIRUJANO
	from   	cirurgia y,
			pessoa_fisica z, 
			procedimento a
	where  	y.cd_medico_cirurgiao = z.cd_pessoa_fisica
	and    	y.nr_atendimento = c_consulta_dados_w.FOLIO
	and    	y.cd_procedimento_princ = a.cd_procedimento
	AND    	y.ie_origem_proced = a.ie_origem_proced
	and		(a.cd_sistema_ant IS NOT NULL AND a.cd_sistema_ant::text <> '')
	and		(y.dt_inicio_real IS NOT NULL AND y.dt_inicio_real::text <> '');

c_dados_procedimentos_w c_dados_procedimentos%ROWTYPE;

c_dados_def CURSOR FOR
	SELECT 	distinct
			CASE WHEN(SELECT count(1) from declaracao_obito x where x.nr_atendimento = d.nr_atendimento)=0 THEN 2  ELSE 1 END  MP,
			d.nr_declaracao CERTIF,
			d.cd_cid_direta CAUSAIA,
			d.cd_cid_adic_1 CAUSAIB,
			d.cd_cid_adic_2 CAUSAIC,
			d.cd_cid_adic_3 CAUSAID,
			d.cd_cid_adic_4 CAUSAIIA,
			d.cd_cid_basica CAUSAIIB       
	from   	DECLARACAO_OBITO d
	where  	d.nr_atendimento = c_consulta_dados_w.FOLIO
	and		(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '')
	and		coalesce(d.dt_inativacao::text, '') = '';

c_dados_def_w c_dados_def%ROWTYPE;

c_dados_obstet CURSOR FOR
	SELECT 	c.qt_gestacoes GESTAS,
			(c.qt_parto_normal + c.qt_parto_cesario) PARTOS,
			c.qt_abortos ABORTOS,
			CASE WHEN(SELECT count(1) from nascimento p where p.nr_atendimento = c_consulta_dados_w.FOLIO)='0' THEN '2'  ELSE '1' END  HAYPROD,
			CASE WHEN(select count(1) from nascimento n where n.nr_atendimento = c_consulta_dados_w.FOLIO and (n.nr_dfm IS NOT NULL AND n.nr_dfm::text <> ''))='0' THEN '2'  ELSE '1' END  TIPATEN,
			coalesce(c.QT_SEM_IG_CRONOLOGICA, c.QT_SEM_IG_ECOGRAFICA) GESTAC,
			CASE WHEN c.QT_FETO=1 THEN 1  ELSE 2 END  PRODUCTO,
			c.ie_parto_normal,
			c.ie_parto_forceps,
			c.ie_parto_cesaria,
			(select max(h.ds_metodos_contrac) from historico_saude_mulher h where h.cd_pessoa_fisica = c_consulta_dados_w.cd_pessoa_fisica) PLANFAM,
			CASE WHEN c.ie_local_nascimento='01' THEN '1' WHEN c.ie_local_nascimento='02' THEN '1' WHEN c.ie_local_nascimento='99' THEN '9'  ELSE '2' END  NACIOEN
	from   	parto c
	where  	c.nr_atendimento = c_consulta_dados_w.FOLIO;

c_dados_obstet_w c_dados_obstet%ROWTYPE;

c_dados_produto CURSOR FOR
	SELECT	d.nr_sequencia NUMPRODUCTO,
			substr(coalesce(trunc(qt_peso),'9999'),1,4) PESOPROD,
			CASE WHEN d.ie_sexo='M' THEN '1' WHEN d.ie_sexo='F' THEN '2'  ELSE '9' END  SEXPROD,
			CASE WHEN D.IE_SITUACAO_RN='01' THEN '1' WHEN D.IE_SITUACAO_RN='02' THEN '2' WHEN D.IE_SITUACAO_RN='03' THEN '2' WHEN D.IE_SITUACAO_RN='04' THEN '3' WHEN D.IE_SITUACAO_RN='05' THEN '2' WHEN D.IE_SITUACAO_RN='06' THEN '3'  ELSE '9' END  CONDEGRE,
			d.nr_dnv CERTIFICADO,
			d.nr_dfm,
			d.nr_dnv,
			(d.qt_apgar_quinto_min)::numeric  NAVIAPAG,
			CASE WHEN d.ie_massag_cardiaca='S' THEN '1'  ELSE '2' END  NAVIREAN,
			Obter_Data_RN_Setor(d.nr_atend_rn) NAVICUNE
	from   	nascimento d
	where  	d.nr_atendimento = c_consulta_dados_w.FOLIO;
	
c_dados_produto_w c_dados_produto%ROWTYPE;

c_dadosCausa CURSOR(ie_causa text) FOR
	SELECT 	max(CASE WHEN f.ie_unidade_tempo='D' THEN 3 WHEN f.ie_unidade_tempo='M' THEN 5 WHEN f.ie_unidade_tempo='A' THEN '6' END ) unid_tempo,
			max(f.qt_tempo) qt_tempo
	from   	diagnostico_doenca f
	where  	upper(trim(both f.cd_doenca)) = upper(trim(both ie_causa))
	and    	f.nr_atendimento = c_consulta_dados_w.FOLIO;

c_dadosCausa_w c_dadosCausa%ROWTYPE;

c_dadosSinalVital CURSOR FOR
	SELECT	asv.qt_peso PESO
	into STRICT	record_w.QT_PESO_KG
	from	atendimento_sinal_vital asv
	where 	asv.nr_sequencia = (SELECT max(nr_sequencia) from atendimento_sinal_vital where nr_atendimento = c_consulta_dados_w.FOLIO)
	and		(asv.qt_peso IS NOT NULL AND asv.qt_peso::text <> '')
	and		asv.qt_peso > 0;

c_dadosSinalVital_w c_dadosSinalVital%ROWTYPE;


BEGIN
if (dt_inicial_p IS NOT NULL AND dt_inicial_p::text <> '') and (dt_final_p IS NOT NULL AND dt_final_p::text <> '') then
	begin
	if (ie_sobreescrever_p = 'S') then
		delete from nom_egreso where dt_alta between pkg_date_utils.start_of(DT_INICIAL_P,'MONTH') and pkg_date_utils.end_of(DT_FINAL_P,'MONTH');
		commit;
	end if;
	open c_consulta_dados;
	loop
	fetch c_consulta_dados into
		c_consulta_dados_w;
	EXIT WHEN NOT FOUND; /* apply on c_consulta_dados */
		begin
		open c_dados_pessoa;
		loop
		fetch c_dados_pessoa into
			c_dados_pessoa_w;
		EXIT WHEN NOT FOUND; /* apply on c_dados_pessoa */	
			begin
							
			select 	nextval('nom_egreso_seq')
			into STRICT	nr_sequencia_w
			;
			
			record_w.NR_SEQUENCIA					:= nr_sequencia_w;
			record_w.NM_USUARIO 			 		:= wheb_usuario_pck.get_nm_usuario;
			record_w.DT_ATUALIZACAO 		 		:= clock_timestamp();
			record_w.NM_USUARIO_NREC 		 		:= wheb_usuario_pck.get_nm_usuario;
			record_w.DT_ATUALIZACAO_NREC 	 		:= clock_timestamp();
			record_w.NR_ATENDIMENTO					:= c_consulta_dados_w.FOLIO;
			record_w.NM_MEDICO_CIRURGIAO	 		:= c_consulta_dados_w.NM_MEDICO;	
			record_w.NR_FOLIO						:= c_consulta_dados_w.FOLIO;
			record_w.DT_ALTA	 					:= c_consulta_dados_w.EGRESO;
			record_w.DT_ENTRADA	 					:= c_consulta_dados_w.INGRE;
			record_w.QT_DIAS_ESTADIA	 			:= c_consulta_dados_w.DIAS_ESTA;
			record_w.IE_TIPO_SERV_MX	 			:= c_consulta_dados_w.TIPSERV;
			record_w.QT_HORAS_LABORATORIO	 		:= c_consulta_dados_w.SA_LABOR;
			record_w.QT_HORAS_EXPULSAO	 			:= c_consulta_dados_w.SA_EXPUL;
			record_w.QT_HORAS_RECUPERACAO	 		:= c_consulta_dados_w.SA_RECUP;
			record_w.QT_HORAS_TERAP_INTENSIVA	 	:= c_consulta_dados_w.SA_INTEN;
			record_w.QT_HORAS_TERAP_INTERMEDIARIA	:= c_consulta_dados_w.SA_INTERM;
			record_w.CD_PROCEDENCIA	 				:= c_consulta_dados_w.PROCED;
			record_w.CD_CIE10_AFEC_INICIAL			:= c_consulta_dados_w.DIAG_INI;
			record_w.DS_CODIGO_PROF					:= c_consulta_dados_w.CEDULARESP;
			record_w.NR_SEQ_TIPO_ACIDENTE			:= c_consulta_dados_w.TRAUMAT;
			record_w.CD_LUGAR_ACC					:= c_consulta_dados_w.LUGAR;
			record_w.CD_DERECHOHABIENCIA	 		:= c_consulta_dados_w.DERHAB;					
			record_w.CD_MOTIVO_ALTA					:= c_consulta_dados_w.MOTEGRE;					
			record_w.NR_SEQ_PERSON_NAME  			:= c_dados_pessoa_w.NR_SEQ_PERSON_NAME;
			record_w.IE_TIPO_IDADE	 				:= c_dados_pessoa_w.CVEEDAD;
			record_w.QT_IDADE	 					:= c_dados_pessoa_w.EDAD;
			record_w.IE_SEXO	 					:= c_dados_pessoa_w.SEXO;
			record_w.QT_ALTURA_CM	 				:= c_dados_pessoa_w.TALLA;
			record_w.CD_CURP	 					:= c_dados_pessoa_w.CURP;
			record_w.IE_INDIGINA	 				:= c_dados_pessoa_w.INDIGENA;
			record_w.IE_FALA_LINGUA_INDIGENA	 	:= c_dados_pessoa_w.HABLA_LENGUA;
			record_w.CD_LINGUA_INDIGENA	 			:= c_dados_pessoa_w.LENGUA_INDIGENA;
			record_w.IE_FALA_ESPANHOL				:= c_dados_pessoa_w.HABLA_ESP;
			record_w.NR_PRONTUARIO	 				:= c_dados_pessoa_w.EXPEDIENTE;
			
			
			select	NR_SEQ_CATALOGO
			into STRICT	record_w.NR_SEQ_CATALOGO_UN_MED
			from	CONFIG_NOM
			where	cd_estabelecimento = c_consulta_dados_w.cd_estabelecimento;
			
			if (trim(both c_consulta_dados_w.DERHAB) = '8') then
				record_w.NR_SPSS	 					:= c_dados_pessoa_w.SPSS;
				record_w.NR_SPSS_DV	 					:= c_dados_pessoa_w.SPSS_DV;
			elsif (trim(both c_consulta_dados_w.DERHAB) = 'G') then
				record_w.NR_SPSS	 					:= c_dados_pessoa_w.SPSS;
				record_w.NR_SPSS_DV	 					:= null;
			else
				record_w.NR_SPSS	 					:= '9999999999';
				record_w.NR_SPSS_DV	 					:= '99';
				--En los casos en los que el usuario no cuente con el número de afiliación, estos serán asignados con números 9.
			end if;
			
			if (c_consulta_dados_w.CLUESPROCED IS NOT NULL AND c_consulta_dados_w.CLUESPROCED::text <> '') then
				select	obter_dados_cat_clues(pj.cd_internacional,'CD_CLUES')
				into STRICT	record_w.CD_CLUES_ESTAB_PROCED
				from	pessoa_juridica pj
				where	pj.cd_cgc = c_consulta_dados_w.CLUESPROCED;
			end if;
		
			if (c_consulta_dados_w.CLUESREFERIDO IS NOT NULL AND c_consulta_dados_w.CLUESREFERIDO::text <> '') then
				select	obter_dados_cat_clues(pjt.cd_internacional,'CD_CLUES')
				into STRICT	record_w.CD_CLUES_ESTAB_REFERIDO
				from	pessoa_juridica pjt
				where	pjt.cd_cgc = c_consulta_dados_w.CLUESREFERIDO;
			end if;
			
			select	CASE WHEN max(h.ds_metodos_contrac)='1' THEN  'Z301'  ELSE Obter_cid_atend_def(c_consulta_dados_w.FOLIO) END ,
					CASE WHEN max(h.ds_metodos_contrac)='1' THEN  'Z301'  ELSE obter_cid_atendimento(c_consulta_dados_w.FOLIO,'S') END
			into STRICT	record_w.CD_CIE10_AFEC_PRINCIPAL,
					record_w.CD_CIE10_CAUSA_EXTERNA
			from	historico_saude_mulher h
			where	h.cd_pessoa_fisica = c_consulta_dados_w.CD_PESSOA_FISICA;
			
			select	CASE WHEN count(dd.cd_doenca)='0' THEN '1'  ELSE '2' END
			into STRICT	record_w.IE_PRIMEIRA_SUBSEQUENTE
			from 	diagnostico_doenca dd, 
					atendimento_paciente u 
			where 	dd.dt_diagnostico 
			between clock_timestamp() - interval '365 days' and clock_timestamp() 
			and 	dd.nr_atendimento = u.nr_atendimento 
			and 	u.nr_atendimento <> c_consulta_dados_w.FOLIO 
			and 	u.cd_pessoa_fisica = c_consulta_dados_w.CD_PESSOA_FISICA 
			and 	dd.cd_doenca = obter_cid_atendimento(c_consulta_dados_w.FOLIO, 'P');

			select	CASE WHEN count(1)='0' THEN '2'  ELSE '1' END
			into STRICT	record_w.IE_INFECAO_INTRA_HOSP
			FROM 	atendimento_precaucao ap
			where 	ap.nr_atendimento = c_consulta_dados_w.FOLIO 
			and 	(ap.dt_liberacao IS NOT NULL AND ap.dt_liberacao::text <> '');
			
			if (c_consulta_dados_w.CD_SERV_ENTRADA_MX IS NOT NULL AND c_consulta_dados_w.CD_SERV_ENTRADA_MX::text <> '') then
				select 	to_char(x.cd_servico)
				into STRICT 	record_w.cd_serv_entrada_mx
				from 	cat_servicos x 
				where 	x.nr_sequencia = c_consulta_dados_w.CD_SERV_ENTRADA_MX;
			end if;
	
			if (c_consulta_dados_w.CD_SERV_SEC_MX IS NOT NULL AND c_consulta_dados_w.CD_SERV_SEC_MX::text <> '') then
				select 	to_char(x.cd_servico)
				into STRICT 	record_w.CD_SERV_SEC_MX
				from 	cat_servicos x 
				where 	x.nr_sequencia = c_consulta_dados_w.CD_SERV_SEC_MX;
			end if;
			
			if (c_consulta_dados_w.CD_SERV_TER_MX IS NOT NULL AND c_consulta_dados_w.CD_SERV_TER_MX::text <> '') then
				select 	to_char(x.cd_servico)
				into STRICT 	record_w.CD_SERV_TER_MX
				from 	cat_servicos x 
				where 	x.nr_sequencia = c_consulta_dados_w.CD_SERV_TER_MX;
			end if;
			
			if (c_consulta_dados_w.CD_SERV_ALTA_MX IS NOT NULL AND c_consulta_dados_w.CD_SERV_ALTA_MX::text <> '') then
				select 	to_char(x.cd_servico)
				into STRICT 	record_w.CD_SERV_ALTA_MX
				from 	cat_servicos x 
				where 	x.nr_sequencia = c_consulta_dados_w.CD_SERV_ALTA_MX;
			end if;
			
			begin
			open c_consulta_estabelecimento;
			loop
			fetch c_consulta_estabelecimento into
				c_consulta_estabelecimento_w;
			EXIT WHEN NOT FOUND; /* apply on c_consulta_estabelecimento */
				record_w.CD_ESTADO_UNID_MEDICA	 		:= c_consulta_estabelecimento_w.CEDOCVE;
				record_w.CD_JURISDICAO_UNID_MEDICA	 	:= c_consulta_estabelecimento_w.CJURCVE;
				record_w.CD_MUNICIPIO_UNID_MEDICA	 	:= c_consulta_estabelecimento_w.CMPOCVE;
				record_w.CD_LOCALIDADE_UNID_MEDICA	 	:= c_consulta_estabelecimento_w.CLOCCVE;
				record_w.CD_TIPO_UNID_MEDICA	 		:= c_consulta_estabelecimento_w.CTUNCVE;
				record_w.CD_CLUES_ESTAB_SAUDE	 		:= c_consulta_estabelecimento_w.CLUES;
			end loop;
			close c_consulta_estabelecimento;				
			end;
			
			begin
			open c_compl_mexico;
			loop
			fetch c_compl_mexico into
				c_compl_mexico_w;
			EXIT WHEN NOT FOUND; /* apply on c_compl_mexico */
				record_w.IE_TIPO_UNI_PSIQ	 			:= c_compl_mexico_w.TUHPSIQ;
				record_w.IE_SERV_PSIQ_CONT	 			:= c_compl_mexico_w.SERVHC;
				record_w.IE_SERV_PSIQ_PAR	 			:= c_compl_mexico_w.SERVHP;
			end loop;
			close c_compl_mexico;
			end;
			
			begin
			record_w.QT_PESO_KG	 		:= c_dados_pessoa_w.PESO;
			open c_dadosSinalVital;
			loop
			fetch c_dadosSinalVital into
				c_dadosSinalVital_w;
			EXIT WHEN NOT FOUND; /* apply on c_dadosSinalVital */
			begin
				record_w.QT_PESO_KG	 		:= c_dadosSinalVital_w.PESO;
			exception
			when others then
				record_w.QT_PESO_KG	 := null;
			end;
			end loop;
			close c_dadossinalvital;
			end;
			
			begin
			open c_dados_endereco;
			loop
			fetch c_dados_endereco into
				c_dados_endereco_w;
			EXIT WHEN NOT FOUND; /* apply on c_dados_endereco */
				record_w.CD_ESTADO_RES_HAB	 			:= c_dados_endereco_w.ENTIDAD;
				record_w.CD_MUNICIPIO_RES_HAB	 		:= c_dados_endereco_w.MUNIC;
				record_w.CD_LOCALIDADE_RES_HAB	 		:= c_dados_endereco_w.LOC;
				
				if (c_dados_endereco_w.nr_seq_pessoa_endereco > 0) then
					begin													
					select	max(b.nr_seq_catalogo)
					into STRICT	record_w.NR_SEQ_CATALOGO_RES_HAB
					from	end_endereco b,
						pessoa_endereco_item a
					where	b.nr_sequencia = a.nr_seq_end_endereco
					and	a.nr_seq_pessoa_endereco = c_dados_endereco_w.nr_seq_pessoa_endereco;
					end;
				end if;		
				
			end loop;
			close c_dados_endereco;
			end;

			--AFECCIONES
			begin
			open c_dados_diagnostico;
			loop
			fetch c_dados_diagnostico into
				c_dados_diagnostico_w;
			EXIT WHEN NOT FOUND; /* apply on c_dados_diagnostico */
				record_w.CD_CIE10_AFEC_COMORBIDADE		:= c_dados_diagnostico_w.CD_DOENCA;
				record_w.NR_AFEC_COMORBIDADE			:= '1';
			end loop;
			close c_dados_diagnostico;
			end;
			------------

			
			--PROCEDIMIENTOS
			begin
			open c_dados_procedimentos;
			loop
			fetch c_dados_procedimentos into
				c_dados_procedimentos_w;
			EXIT WHEN NOT FOUND; /* apply on c_dados_procedimentos */
				record_w.CD_SISTEMA_ANT_PROC			:= c_dados_procedimentos_w.PROMED;
				record_w.CD_TIPO_ANESTESIA				:= c_dados_procedimentos_w.ANEST;
				record_w.IE_SALA_CIRURGIA				:= c_dados_procedimentos_w.QUIROF;
				record_w.NR_HORA_DURACAO_REAL			:= c_dados_procedimentos_w.QH;
				record_w.NR_MIN_DURACAO_REAL			:= c_dados_procedimentos_w.QM;
				record_w.DS_CODIGO_PROF_CIRUR			:= c_dados_procedimentos_w.CEDULACIRUJANO;
			end loop;
			close c_dados_procedimentos;
			end;
			----------------

			
			--DEFUNC
			begin
			open c_dados_def;
			loop
			fetch c_dados_def into
				c_dados_def_w;
			EXIT WHEN NOT FOUND; /* apply on c_dados_def */
				record_w.IE_ENVIO_MINISTERIO_PUBLICO	:= c_dados_def_w.MP;
				record_w.NR_DECLARACAO_OBITO			:= c_dados_def_w.CERTIF;
				record_w.CD_CIE10_CAUSA_1				:= c_dados_def_w.CAUSAIA;
				record_w.CD_CIE10_CAUSA_2				:= c_dados_def_w.CAUSAIB;
				record_w.CD_CIE10_CAUSA_3				:= c_dados_def_w.CAUSAIC;
				record_w.CD_CIE10_CAUSA_4				:= c_dados_def_w.CAUSAID;
				record_w.CD_CIE10_CAUSA_5				:= c_dados_def_w.CAUSAIIA;
				record_w.CD_CIE10_CAUSA_BASICA			:= c_dados_def_w.CAUSAIIB;			
				if (c_dados_def_w.CAUSAIA IS NOT NULL AND c_dados_def_w.CAUSAIA::text <> '') then
					open c_dadosCausa(c_dados_def_w.CAUSAIA);
					loop
					fetch c_dadosCausa into
						c_dadosCausa_w;
					EXIT WHEN NOT FOUND; /* apply on c_dadosCausa */
					begin
						record_w.IE_UNID_TEMPO_CAUSA_1			:= c_dadosCausa_w.UNID_TEMPO;
						record_w.QT_TEMPO_CAUSA_1				:= c_dadosCausa_w.QT_TEMPO;
					end;
					end loop;
					close c_dadosCausa;
				end if;
				if (c_dados_def_w.CAUSAIB IS NOT NULL AND c_dados_def_w.CAUSAIB::text <> '') then
					open c_dadosCausa(c_dados_def_w.CAUSAIB);
					loop
					fetch c_dadosCausa into
						c_dadosCausa_w;
					EXIT WHEN NOT FOUND; /* apply on c_dadosCausa */
					begin
						record_w.IE_UNID_TEMPO_CAUSA_2			:= c_dadosCausa_w.UNID_TEMPO;
						record_w.QT_TEMPO_CAUSA_2				:= c_dadosCausa_w.QT_TEMPO;
					end;
					end loop;
					close c_dadosCausa;
				end if;
				if (c_dados_def_w.CAUSAIC IS NOT NULL AND c_dados_def_w.CAUSAIC::text <> '') then
					open c_dadosCausa(c_dados_def_w.CAUSAIC);
					loop
					fetch c_dadosCausa into
						c_dadosCausa_w;
					EXIT WHEN NOT FOUND; /* apply on c_dadosCausa */
					begin
						record_w.IE_UNID_TEMPO_CAUSA_3			:= c_dadosCausa_w.UNID_TEMPO;
						record_w.QT_TEMPO_CAUSA_3				:= c_dadosCausa_w.QT_TEMPO;
					end;
					end loop;
					close c_dadosCausa;
				end if;
				if (c_dados_def_w.CAUSAID IS NOT NULL AND c_dados_def_w.CAUSAID::text <> '') then
					open c_dadosCausa(c_dados_def_w.CAUSAID);
					loop
					fetch c_dadosCausa into
						c_dadosCausa_w;
					EXIT WHEN NOT FOUND; /* apply on c_dadosCausa */
					begin
						record_w.IE_UNID_TEMPO_CAUSA_4			:= c_dadosCausa_w.UNID_TEMPO;
						record_w.QT_TEMPO_CAUSA_4				:= c_dadosCausa_w.QT_TEMPO;
					end;
					end loop;
					close c_dadosCausa;
				end if;
				if (c_dados_def_w.CAUSAIIA IS NOT NULL AND c_dados_def_w.CAUSAIIA::text <> '') then
					open c_dadosCausa(c_dados_def_w.CAUSAIIA);
					loop
					fetch c_dadosCausa into
						c_dadosCausa_w;
					EXIT WHEN NOT FOUND; /* apply on c_dadosCausa */
					begin
						record_w.IE_UNID_TEMPO_CAUSA_5			:= c_dadosCausa_w.UNID_TEMPO;
						record_w.QT_TEMPO_CAUSA_5				:= c_dadosCausa_w.QT_TEMPO;
					end;
					end loop;
					close c_dadosCausa;
				end if;
				if (c_dados_def_w.CAUSAIIB IS NOT NULL AND c_dados_def_w.CAUSAIIB::text <> '') then
					open c_dadosCausa(c_dados_def_w.CAUSAIIB);
					loop
					fetch c_dadosCausa into
						c_dadosCausa_w;
					EXIT WHEN NOT FOUND; /* apply on c_dadosCausa */
					begin
						record_w.IE_UNID_TEMPO_CAUSA_6			:= c_dadosCausa_w.UNID_TEMPO;
						record_w.QT_TEMPO_CAUSA_6				:= c_dadosCausa_w.QT_TEMPO;
					end;
					end loop;
					close c_dadosCausa;
				end if;
			end loop;
			close c_dados_def;
			end;
			----------------------------------------------------------------------------------

			
			--OBSTET
			record_w.IE_NASCIMENTO_HOSP				:= '9';
			record_w.IE_TIPO_NASCIMENTO				:= '2';
			begin
			open c_dados_obstet;
			loop
			fetch c_dados_obstet into
				c_dados_obstet_w;
			EXIT WHEN NOT FOUND; /* apply on c_dados_obstet */
				record_w.QT_GESTACOES					:= c_dados_obstet_w.GESTAS;
				record_w.QT_PARTOS					:= c_dados_obstet_w.PARTOS;
				record_w.QT_ABORTOS					:= c_dados_obstet_w.ABORTOS;
				record_w.IE_POSSUI_NASCIMENTOS				:= c_dados_obstet_w.HAYPROD;
				record_w.IE_TIPO_ATEND_OBSTETRICA			:= c_dados_obstet_w.TIPATEN;
				record_w.QT_SEMANAS_GESTACAO				:= c_dados_obstet_w.GESTAC;
				record_w.QT_FETO					:= c_dados_obstet_w.PRODUCTO;
				record_w.DS_METODOS_CONTRAC				:= c_dados_obstet_w.PLANFAM;
				if (c_dados_pessoa_w.IDADE_MES < 3) then
					record_w.IE_NASCIMENTO_HOSP				:= c_dados_obstet_w.NACIOEN;
				else
					record_w.IE_NASCIMENTO_HOSP				:= '9';
				end if;
				if (length(c_dados_obstet_w.IE_PARTO_NORMAL) = '0') then
					record_w.IE_TIPO_NASCIMENTO				:= '2';
				elsif (length(c_dados_obstet_w.IE_PARTO_FORCEPS) = '0') then
					record_w.IE_TIPO_NASCIMENTO				:= '1';
				elsif (length(c_dados_obstet_w.IE_PARTO_CESARIA) = '0') then
					record_w.IE_TIPO_NASCIMENTO				:= '3';
				else
					record_w.IE_TIPO_NASCIMENTO				:= '2';
				end if;
			end loop;
			close c_dados_obstet;
			end;
			-------------

			
			--PRODUCTOS
			record_w.CD_COND_NASCTO_PROD			:= '9';
			begin
			open c_dados_produto;
			loop
			fetch c_dados_produto into
				c_dados_produto_w;
			EXIT WHEN NOT FOUND; /* apply on c_dados_produto */
				record_w.NR_SEQ_NASCIMENTO				:= c_dados_produto_w.NUMPRODUCTO;
				record_w.QT_PESO_PROD					:= c_dados_produto_w.PESOPROD;
				record_w.IE_SEXO_PROD					:= c_dados_produto_w.SEXPROD;
			
				if (c_dados_produto_w.NR_DNV IS NOT NULL AND c_dados_produto_w.NR_DNV::text <> '') then
					record_w.CD_COND_NASCTO_PROD			:= '2';
				elsif (c_dados_produto_w.NR_DFM IS NOT NULL AND c_dados_produto_w.NR_DFM::text <> '') then
					record_w.CD_COND_NASCTO_PROD			:= '1';
				else
					record_w.CD_COND_NASCTO_PROD			:= '9';
				end if;
				
				record_w.NR_DNV						:= c_dados_produto_w.CERTIFICADO;
				record_w.IE_SITUACAO_RN					:= c_dados_produto_w.CONDEGRE;
				record_w.QT_APGAR_QUINTO_MIN				:= c_dados_produto_w.NAVIAPAG;
				record_w.IE_MASSAG_CARDIACA				:= c_dados_produto_w.NAVIREAN;
				record_w.QT_ESTADIA_NASC_VIVO				:= c_dados_produto_w.NAVICUNE;
				
			end loop;
			close c_dados_produto;
			end;
			
			insert into nom_egreso values (record_w.*);		
		end;			
		end loop;
		close c_dados_pessoa;			
		end;
	end loop;
	close c_consulta_dados;
	end;
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_guia_egresos_noms ( dt_inicial_p timestamp, dt_final_p timestamp, ie_sobreescrever_p text) FROM PUBLIC;

