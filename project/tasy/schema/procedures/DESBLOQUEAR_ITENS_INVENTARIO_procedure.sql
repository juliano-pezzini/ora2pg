-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE desbloquear_itens_inventario ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_material_w		bigint;
cd_material_w			integer;
cd_local_estoque_w		integer;
dt_mesano_referencia_w	timestamp;
dt_mesano_vigente_w		timestamp;
cd_fornecedor_w			varchar(14);
cd_fornecedor_inventario_w	varchar(14);
ie_consignado_w			varchar(1);
dt_atualizacao_saldo_w	timestamp;
dt_aprovacao_w			timestamp;


qt_existe_bloqueio_w	bigint;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.cd_material,
	a.cd_fornecedor,
    b.cd_fornecedor cd_fornecedor_inventario,
	b.cd_local_estoque,
	b.ie_consignado,
	b.dt_atualizacao_saldo,
	b.dt_aprovacao
from	inventario_material a,
	inventario b
where	b.nr_sequencia = a.nr_seq_inventario
and	nr_seq_inventario = nr_sequencia_p;


BEGIN

select	max(dt_mesano_vigente)
into STRICT	dt_mesano_vigente_w
from 	parametro_estoque
where	cd_estabelecimento	= cd_estabelecimento_p;

OPEN C01;
LOOP
FETCH C01 into
	nr_seq_material_w,
	cd_material_w,
	cd_fornecedor_w,
    cd_fornecedor_inventario_w,
	cd_local_estoque_w,
	ie_consignado_w,
	dt_atualizacao_saldo_w,
	dt_aprovacao_w;			
EXIT WHEN NOT FOUND; /* apply on C01 */
	BEGIN
	
	if	((dt_atualizacao_saldo_w IS NOT NULL AND dt_atualizacao_saldo_w::text <> '') or (dt_aprovacao_w IS NOT NULL AND dt_aprovacao_w::text <> '')) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(235097);	
	end if;
		
	if (ie_consignado_w = 'N') then
		begin
		select	/*+ index (s salesto_i2) */			coalesce(max(s.dt_mesano_referencia), PKG_DATE_UTILS.start_of(clock_timestamp(), 'month', 0))
		into STRICT	dt_mesano_referencia_w
		from 	saldo_estoque s
		where	s.ie_bloqueio_inventario	= 'S'
		and	s.cd_estabelecimento	= cd_estabelecimento_p
		and 	s.cd_material		= cd_material_w
		and	s.cd_local_estoque		= cd_local_estoque_w
		and 	s.dt_mesano_referencia	>= dt_mesano_vigente_w;

		update	saldo_estoque
		set	ie_bloqueio_inventario	= 'N'
		where	cd_estabelecimento		= cd_estabelecimento_p
		and	cd_local_estoque		= cd_local_estoque_w
		and	cd_material		= cd_material_w
		and	dt_mesano_referencia	<= dt_mesano_referencia_w;
		end;
	else
		begin
		select	/*+ index (s salesto_i2) */			coalesce(max(s.dt_mesano_referencia), PKG_DATE_UTILS.start_of(clock_timestamp(), 'month', 0))
		into STRICT	dt_mesano_referencia_w
		from 	fornecedor_mat_consignado s
		where	s.ie_bloqueio_inventario	= 'S'
		and	s.cd_estabelecimento	= cd_estabelecimento_p
		and 	s.cd_material		= cd_material_w
		and	s.cd_local_estoque		= cd_local_estoque_w
		and	s.cd_fornecedor		= cd_fornecedor_w
		and 	s.dt_mesano_referencia	>= dt_mesano_vigente_w;

        if (cd_fornecedor_inventario_w IS NOT NULL AND cd_fornecedor_inventario_w::text <> '') then
            update	fornecedor_mat_consignado
            set	ie_bloqueio_inventario	= 'N'
            where	cd_estabelecimento		= cd_estabelecimento_p
            and	cd_local_estoque		= cd_local_estoque_w
            and	cd_fornecedor		= cd_fornecedor_w
            and	cd_material		= cd_material_w
            and	dt_mesano_referencia	<= dt_mesano_referencia_w;
        else
            update	fornecedor_mat_consignado
            set	ie_bloqueio_inventario	= 'N'
            where	cd_estabelecimento		= cd_estabelecimento_p
            and	cd_local_estoque		= cd_local_estoque_w
            and	cd_material		= cd_material_w
            and	dt_mesano_referencia	<= dt_mesano_referencia_w;
        end if;
		end;
	end if;

	update	inventario_material
	set	qt_saldo	 = NULL,
		qt_estoque	 = NULL,
		qt_inventario	 = NULL,
		qt_diferenca	 = NULL,
		qt_contagem	 = NULL,
		qt_recontagem	 = NULL,
		qt_seg_recontagem	 = NULL,
		qt_terc_recontagem	 = NULL,
		dt_atualizacao	= clock_timestamp(),
		ie_status_inventario  = NULL,
		ie_contagem_atual 	 = NULL,
		nm_usuario	= nm_usuario_p
	where	nr_sequencia	= nr_seq_material_w;

	select	count(*)
	into STRICT	qt_existe_bloqueio_w
	from	inventario_bloqueio
	where	nr_seq_inventario = nr_sequencia_p;

	if (qt_existe_bloqueio_w > 0) then
		delete	FROM inventario_bloqueio
		where	nr_seq_inventario = nr_sequencia_p;
	end if;

	update	inventario_material_lote
	set	qt_saldo	 = NULL,
		qt_inventario	 = NULL,
		qt_diferenca	 = NULL,
		qt_contagem	 = NULL,
		qt_recontagem	 = NULL,
		qt_seg_recontagem	 = NULL,
		qt_terc_recontagem	 = NULL,
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_seq_item	= nr_seq_material_w;
	END;
END LOOP;
close c01;

update	inventario
set	dt_bloqueio  = NULL,
	nm_usuario_bloqueio = nm_usuario_p,
	dt_atualizacao = clock_timestamp(),
	nm_usuario = nm_usuario_p,
	ie_contagem_atual = 1
where	nr_sequencia = nr_sequencia_p;

/* Grava informacao de desbloqueio para log */

CALL gravar_inventario_arq(nr_sequencia_p,
	wheb_mensagem_pck.get_Texto(311001), /*'Log de desbloqueio do inventario',*/
	wheb_mensagem_pck.get_Texto(311002, 'NM_USUARIO_P='|| NM_USUARIO_P), /*'Inventario desbloqueado pelo usuario ' || nm_usuario_p,*/
	'R',
	nm_usuario_p);
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE desbloquear_itens_inventario ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

