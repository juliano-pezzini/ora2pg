-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_realizar_manutencao_preco ( nr_seq_preco_p bigint, tx_acrescimo_p bigint, tx_desconto_p bigint, ie_criar_lote_log_p text, nr_seq_motivo_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text) AS $body$
DECLARE


vl_preco_atual_w		double precision;
vl_minimo_w			double precision;
vl_inicial_novo_w		double precision;
vl_adaptacao_w			double precision;
vl_adaptacao_ww			double precision;
ds_erro_w			varchar(255);

nr_seq_tabela_w			bigint;
nr_seq_lote_log_w		bigint;
qt_idade_inicial_w		bigint;
qt_idade_final_w		bigint;
nr_seq_plano_w			bigint;
tx_adaptacao_w			double precision;


BEGIN

select	vl_preco_atual,
	vl_minimo,
	nr_seq_tabela,
	qt_idade_inicial,
	qt_idade_final,
	vl_adaptacao
into STRICT	vl_preco_atual_w,
	vl_minimo_w,
	nr_seq_tabela_w,
	qt_idade_inicial_w,
	qt_idade_final_w,
	vl_adaptacao_ww
from	pls_plano_preco
where	nr_sequencia	= nr_seq_preco_p;

select	max(nr_seq_plano)
into STRICT	nr_seq_plano_w
from	pls_tabela_preco
where	nr_sequencia	= nr_seq_tabela_w;

select	max(tx_adaptacao)
into STRICT	tx_adaptacao_w
from	pls_regra_adaptacao_plano
where	cd_estabelecimento	= cd_estabelecimento_p
and	clock_timestamp() between dt_inicio_vigencia and fim_dia(coalesce(dt_fim_vigencia,clock_timestamp()))
and	((coalesce(nr_seq_grupo_produto::text, '') = '') or (nr_seq_grupo_produto IS NOT NULL AND nr_seq_grupo_produto::text <> '') and (pls_se_grupo_preco_produto(nr_seq_grupo_produto,nr_seq_plano_w)) = 'S');

if (coalesce(tx_adaptacao_w::text, '') = '') then
	tx_adaptacao_w	:= 0;
end if;

if (coalesce(vl_adaptacao_ww,0) = 0) then
	tx_adaptacao_w	:= 0;
end if;

if (coalesce(tx_acrescimo_p,0) <> 0) then	/* Acréscimo */
	vl_inicial_novo_w	:= vl_preco_atual_w + round(((vl_preco_atual_w * tx_acrescimo_p) / 100),2);
	vl_adaptacao_w		:= dividir((vl_inicial_novo_w * tx_adaptacao_w), 100);
	end if;

if (coalesce(tx_desconto_p,0) <> 0) then	/* Desconto */
	vl_inicial_novo_w	:= vl_preco_atual_w - round(((vl_preco_atual_w * tx_desconto_p) / 100),2);
	vl_adaptacao_w		:= dividir((vl_inicial_novo_w * tx_adaptacao_w), 100);

	if (vl_inicial_novo_w < vl_minimo_w) then
		ds_erro_w	:= wheb_mensagem_pck.get_texto(280554);
		vl_inicial_novo_w	:= vl_minimo_w;
	end if;
end if;

if (coalesce(vl_inicial_novo_w,0) <> 0) then
	update	pls_plano_preco
	set	vl_preco_inicial	= vl_inicial_novo_w,
		vl_preco_atual		= vl_inicial_novo_w,
		ie_manutencao_preco	= CASE WHEN coalesce(ie_manutencao_preco,'N')='N' THEN 'S' WHEN coalesce(ie_manutencao_preco,'N')='S' THEN 'S' END ,
		vl_adaptacao		= vl_adaptacao_w
	where	nr_sequencia		= nr_seq_preco_p;

	CALL pls_calcular_manut_tab_preco(nr_seq_tabela_w,nr_seq_preco_p,cd_estabelecimento_p,nm_usuario_p);
end if;

/*Gravar log de alteração da tabela de preço */

if (vl_preco_atual_w IS NOT NULL AND vl_preco_atual_w::text <> '') and (vl_inicial_novo_w IS NOT NULL AND vl_inicial_novo_w::text <> '') then
	if (ie_criar_lote_log_p = 'S') then
		select	nextval('pls_manutencao_tabela_log_seq')
		into STRICT	nr_seq_lote_log_w
		;

		insert	into	pls_manutencao_tabela_log(nr_sequencia, nr_seq_tabela, cd_estabelecimento,
			dt_log, nm_usuario_log, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,nr_seq_motivo)
		values (nr_seq_lote_log_w, nr_seq_tabela_w, cd_estabelecimento_p,
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,nr_seq_motivo_p);
	end if;

	select	max(nr_sequencia)
	into STRICT	nr_seq_lote_log_w
	from	pls_manutencao_tabela_log
	where	trunc(dt_log,'dd')	= trunc(clock_timestamp(),'dd')
	and	nm_usuario_log		= nm_usuario_p;

	if (coalesce(nr_seq_lote_log_w,0) <> 0) then
		insert	into	pls_manutencao_preco_log(nr_sequencia, nr_seq_log, cd_estabelecimento,
			qt_idade_inicial, qt_idade_final, vl_preco_inicial,
			vl_preco_final, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, tx_acrescimo,
			tx_desconto)
		values (nextval('pls_manutencao_preco_log_seq'), nr_seq_lote_log_w, cd_estabelecimento_p,
			qt_idade_inicial_w, qt_idade_final_w, vl_preco_atual_w,
			vl_inicial_novo_w, clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, tx_acrescimo_p,
			tx_desconto_p);
	end if;
end if;

ds_erro_p	:= ds_erro_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_realizar_manutencao_preco ( nr_seq_preco_p bigint, tx_acrescimo_p bigint, tx_desconto_p bigint, ie_criar_lote_log_p text, nr_seq_motivo_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text) FROM PUBLIC;

