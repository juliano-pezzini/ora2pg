-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_valor_ajust_ress_sus (nr_seq_competencia_p bigint) AS $body$
DECLARE


type contas_ajuste is table of pls_processo_contas_comp.nr_seq_conta%type index by varchar(15);
contas_ajuste_w contas_ajuste;

dt_competencia_w		pls_processo_competencia.dt_competencia%type;
dt_competencia_inicial_w	pls_processo_competencia.dt_competencia%type;
pr_historico_w 			pls_processo_competencia.pr_historico%type;
pr_historico_ant_w		pls_processo_competencia.pr_historico%type;
vl_diferenca_percentual_hist_w	pls_processo_competencia.pr_historico%type;
nr_seq_competencia_w		pls_processo_competencia.nr_sequencia%type;
vl_ajuste_w			pls_processo_contas_comp.vl_ajuste%type;
cd_conta_cred_ajuste_w		pls_processo_contas_comp.cd_conta_cred_ajuste%type;
cd_classif_cred_ajuste_w	pls_processo_contas_comp.cd_classif_cred_ajuste%type;
cd_conta_deb_ajuste_w		pls_processo_contas_comp.cd_conta_deb_ajuste%type;
cd_classif_deb_ajuste_w		pls_processo_contas_comp.cd_classif_deb_ajuste%type;
nr_seq_esquema_ajuste_w		pls_processo_contas_comp.nr_seq_esquema_ajuste%type;
cd_historico_ajuste_w		pls_processo_contas_comp.cd_historico_ajuste%type;
cd_conta_cred_prov_w		pls_processo_contas_comp.cd_conta_cred_prov%type;
cd_classif_cred_prov_w		pls_processo_contas_comp.cd_classif_cred_prov%type;
cd_conta_deb_prov_w		pls_processo_contas_comp.cd_conta_deb_prov%type;
cd_classif_deb_prov_w		pls_processo_contas_comp.cd_classif_deb_prov%type;
nr_seq_esquema_prov_w		pls_processo_contas_comp.nr_seq_esquema_prov%type;
cd_historico_prov_w		pls_processo_contas_comp.cd_historico_prov%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
nm_usuario_w			usuario.nm_usuario%type;

/* Obtém as competências existentes no período entre a primeira competência, e a competência para a qual está sendo aplicado o % histórico*/

c_competencias CURSOR FOR
SELECT	nr_sequencia
from	pls_processo_competencia a
where	a.dt_competencia between dt_competencia_inicial_w and dt_competencia_w
and	nr_sequencia <> nr_seq_competencia_p
order by dt_competencia desc;

vet_competencias c_competencias%rowtype;

/* Obtém as contas da competência*/

c_contas CURSOR FOR
SELECT	a.*,
	pls_conta_processo_obter_valor(a.nr_seq_conta) vl_conta
from	pls_processo_contas_comp a
where	a.nr_seq_competencia = vet_competencias.nr_sequencia
and	ie_tipo_movimentacao = 'P';

vet_contas c_contas%rowtype;


BEGIN

/* Obtém o mês da competência passada por parâmetro */

select	pkg_date_utils.start_of(dt_competencia,'MONTH',0),
	pr_historico
into STRICT	dt_competencia_w,
	pr_historico_w
from	pls_processo_competencia
where	nr_Sequencia = nr_seq_competencia_p;

/* Obtém o percentual histórico para o último mês anterior ao mês da competência passada por parâmetro */

begin
select	pr_historico
into STRICT	pr_historico_ant_w
from	pls_processo_competencia
where	dt_competencia = 	(	SELECT	max(dt_competencia)
					from	pls_processo_competencia
					where	pkg_date_utils.start_of(dt_competencia, 'MONTH') < pkg_date_utils.start_of(dt_competencia_w, 'MONTH'));
exception when no_data_found then
	pr_historico_ant_w := null;
end;

nm_usuario_w		:= wheb_usuario_pck.get_nm_usuario;
cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;

/* Só haverá valor de ajuste se houve alteração no percentual histórico */

if (pr_historico_w <> pr_historico_ant_w and
	 (pr_historico_ant_w IS NOT NULL AND pr_historico_ant_w::text <> '')) then
	
	/* Obtém o mês da competência do primeiro mês para o qual existe registro */

	select	pkg_date_utils.start_of(min(dt_competencia),'MONTH',0)
	into STRICT	dt_competencia_inicial_w
	from 	pls_processo_competencia;

	open c_competencias;
	loop
	fetch c_competencias into
		vet_competencias;
	EXIT WHEN NOT FOUND; /* apply on c_competencias */
		begin

		open c_contas;
		loop
		fetch c_contas into
			vet_contas;
		EXIT WHEN NOT FOUND; /* apply on c_contas */
			begin
			if (not contas_ajuste_w.exists(vet_contas.nr_seq_conta)) then
				contas_ajuste_w(vet_contas.nr_seq_conta) := vet_contas.nr_seq_conta;
				
				/* Obtém informações da última competência anterior à competência onde foi chamada a opção de mouse, que possua a conta que está sendo verificada
				   Essa informação será utilizada para obter as contas contábeis*/
				begin
				select	nr_sequencia
				into STRICT	nr_seq_competencia_w
				from	pls_processo_competencia
				where	dt_competencia = (	SELECT	max(dt_competencia)
								from 	pls_processo_competencia b
								where	exists (select 1
										from 	pls_processo_contas_comp x
										where	x.nr_seq_competencia = b.nr_sequencia
										and	x.nr_seq_conta = vet_contas.nr_seq_conta
										and	x.nr_seq_competencia <> nr_seq_competencia_p
										and	x.ie_tipo_movimentacao = 'P')
								and	pkg_date_utils.start_of(b.dt_competencia, 'MONTH') < pkg_date_utils.start_of(dt_competencia_w, 'MONTH'));
				exception when no_data_found then
					nr_seq_competencia_w := 0;
				end;

				/* Obtém as informações contábeis para a conta que esta sendo gerado o ajuste */

				if (nr_seq_competencia_w <> 0) then
					begin
					select 	cd_conta_cred_ajuste, cd_classif_cred_ajuste,
						cd_conta_deb_ajuste, cd_classif_deb_ajuste,
						nr_seq_esquema_ajuste, cd_historico_ajuste,
						cd_conta_cred_prov, cd_classif_cred_prov,
						cd_conta_deb_prov, cd_classif_deb_prov,
						nr_seq_esquema_prov, cd_historico_prov
					into STRICT	cd_conta_cred_ajuste_w, cd_classif_cred_ajuste_w,
						cd_conta_deb_ajuste_w, cd_classif_deb_ajuste_w,
						nr_seq_esquema_ajuste_w, cd_historico_ajuste_w,
						cd_conta_cred_prov_w, cd_classif_cred_prov_w,
						cd_conta_deb_prov_w, cd_classif_deb_prov_w,
						nr_seq_esquema_prov_w, cd_historico_prov_w
					from	pls_processo_contas_comp
					where	nr_seq_competencia = nr_seq_competencia_w
					and	nr_seq_conta = vet_contas.nr_seq_conta
					and	ie_tipo_movimentacao = 'P'  LIMIT 1;
					exception when no_data_found then
						cd_conta_cred_ajuste_w 		:= null;
						cd_classif_cred_ajuste_w	:= null;
						cd_conta_deb_ajuste_w		:= null;
						cd_classif_deb_ajuste_w		:= null;
						nr_seq_esquema_ajuste_w		:= null;
						cd_historico_ajuste_w		:= null;
						cd_conta_cred_prov_w		:= null;
						cd_classif_cred_prov_w		:= null;
						cd_conta_deb_prov_w		:= null;
						cd_classif_deb_prov_w		:= null;
						nr_seq_esquema_prov_w		:= null;
						cd_historico_prov_w		:= null;
					end;
				end if;

				/* Diferença entre o valor de ajuste da competência que está sendo atualizada, e da ultima competência que possui registro da conta*/

				vl_diferenca_percentual_hist_w := pr_historico_w - pr_historico_ant_w;

				/* Valor do ajuste = Valor da conta * diferença do percentual histórico / 100*/

				vl_ajuste_w := dividir(vet_contas.vl_conta * vl_diferenca_percentual_hist_w, 100);

				/* Se já existir um registro para a conta na competência, altera o valor de provisão para 0, e atualiza o valor do ajuste.
				   Se não houver registro, insere um novo registro*/
				merge into pls_processo_contas_comp d
				using(SELECT	vet_contas.nr_seq_conta nr_seq_conta,
						nr_seq_competencia_p nr_seq_competencia
					) e
				on (d.nr_seq_conta = e.nr_seq_conta and d.nr_seq_competencia = e.nr_seq_competencia and d.ie_tipo_movimentacao = 'P')
				when matched then update set d.vl_provisao = 0, d.vl_ajuste = vl_ajuste_w
				when not matched then insert(
					nr_sequencia,
					nm_usuario,
					nm_usuario_nrec,
					dt_atualizacao,
					dt_atualizacao_nrec,
					cd_estabelecimento,
					vl_ajuste,
					vl_deferido,
					vl_provisao,
					vl_ressarcir,
					ie_tipo_movimentacao,
					cd_conta_cred_ajuste, cd_classif_cred_ajuste,
					cd_conta_deb_ajuste, cd_classif_deb_ajuste,
					nr_seq_esquema_ajuste, cd_historico_ajuste,
					cd_conta_cred_prov, cd_classif_cred_prov,
					cd_conta_deb_prov, cd_classif_deb_prov,
					nr_seq_esquema_prov, cd_historico_prov,
					nr_seq_competencia,
					nr_seq_conta) 
				values (nextval('pls_processo_contas_comp_seq'),
					nm_usuario_w,
					nm_usuario_w,
					clock_timestamp(),
					clock_timestamp(),
					cd_estabelecimento_w,
					vl_ajuste_w,
					0,
					0,
					0,
					'P',
					cd_conta_cred_ajuste_w, cd_classif_cred_ajuste_w,
					cd_conta_deb_ajuste_w, cd_classif_deb_ajuste_w,
					nr_seq_esquema_ajuste_w, cd_historico_ajuste_w,
					cd_conta_cred_prov_w, cd_classif_cred_prov_w,
					cd_conta_deb_prov_w, cd_classif_deb_prov_w,
					nr_seq_esquema_prov_w, cd_historico_prov_w,
					nr_seq_competencia_p,
					vet_contas.nr_seq_conta);
			end if;
					
			end;
		end loop;
		close c_contas;
		end;
	end loop;
	close c_competencias;
else
	/* Se não houver diferença no valor do percentual histórico, zera o valor do ajuste */

	update 	pls_processo_contas_comp
	set	vl_ajuste = 0
	where	nr_seq_competencia = nr_seq_competencia_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_valor_ajust_ress_sus (nr_seq_competencia_p bigint) FROM PUBLIC;

