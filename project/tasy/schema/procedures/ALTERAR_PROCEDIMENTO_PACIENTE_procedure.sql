-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE alterar_procedimento_paciente (nr_sequencia_p bigint, cd_procedimento_p bigint, nr_seq_proc_interno_p bigint, nr_seq_exame_p bigint, ie_origem_proced_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_sequencia_prescricao_w	procedimento_paciente.nr_sequencia_prescricao%type;
nr_prescricao_w			procedimento_paciente.nr_prescricao%type;
ie_regra_exclusao_w		varchar(10);
nr_atendimento_w		procedimento_paciente.nr_atendimento%type;
nr_interno_conta_w		procedimento_paciente.nr_interno_conta%type;
varpermite_setor_exlusivo	varchar(1);
cd_setor_atendimento_w		procedimento_paciente.cd_setor_atendimento%type;
ie_setor_exclusivo_w		bigint;
varseqexamelab_w		varchar(1);
cd_procedimento_tuss_w		bigint;
ie_origem_proc_tuss_w		bigint;
varpermitealterarprocprescr_w	varchar(1);
ie_tipo_proced_w		varchar(1) := 'N';
ie_permite_atualizar_w		varchar(1) := 'S';
nr_laudo_w			procedimento_paciente.nr_laudo%type;

cd_proc_antigo_w		bigint;
ie_origem_proc_antigo_w		bigint;
nr_porte_anestesico_antigo_w	bigint;
nr_porte_anestesico_atual_w	bigint;
cd_procedimento_porte_w		bigint;
ie_origem_proced_porte_w	bigint;
dt_entrada_unidade_w		procedimento_paciente.dt_entrada_unidade%type;
dt_procedimento_w		procedimento_paciente.dt_procedimento%type;
cd_convenio_w			procedimento_paciente.cd_convenio%type;
cd_categoria_w			procedimento_paciente.cd_categoria%type;
ie_tipo_atendimento_w		integer;
ie_regra_taxa_sala_porte_w	varchar(1):= 'N';	

cd_tipo_acomodacao_w		smallint;

ie_setor_exlusivo_bpa_w		varchar(1):= 'N';
ie_setor_exlusivo_aih_w		varchar(1):= 'S';
ie_setor_exlusivo_apac_w	varchar(1):= 'S';
ds_parametro_w			varchar(15) := '4';
nr_seq_proc_interno_w		bigint;
cd_plano_w			varchar(10);
cd_tipo_acomod_conv_w		smallint;
nr_seq_material_w		procedimento_paciente.nr_seq_material%type;

nr_seq_proc_interno_ant_w	bigint;
nr_seq_exame_ant_w		bigint;
cd_edicao_amb_w			integer;

cd_estabelecimento_w		smallint;
nr_seq_estagio_cancel_w		bigint;
nr_sequencia_autor_w		bigint;
nr_seq_proc_int_autor_w		bigint := null;
qt_reg_w			bigint := 0;
ie_atualizar_valor_proc_w	varchar(1);

ie_valor_informado_ant_w   	procedimento_paciente.ie_valor_informado%type := 'N';
nr_seq_ajuste_proc_ant_w	procedimento_paciente.nr_seq_ajuste_proc%type := 0;
cd_situacao_glosa_ant_w		procedimento_paciente.cd_situacao_glosa%type  := 0;
cd_motivo_exclusao_w		parametro_faturamento.cd_motivo_exc_conta%type:= 0;
ie_valor_inf_alt_proc_w		parametro_faturamento.ie_valor_inf_alt_proc%type:= 0;
qt_procedimento_w		procedimento_paciente.qt_procedimento%type;
vl_procedimento_w		procedimento_paciente.vl_procedimento%type;
ie_valor_informado_w		procedimento_paciente.ie_valor_informado%type := 'N';
ds_erro_w			varchar(2000);
cd_plano_convenio_w		atendimento_paciente_v.cd_plano_convenio%type;
nr_seq_atepacu_w		atendimento_paciente_v.nr_seq_atepacu%type;
cd_medico_resp_w		atendimento_paciente_v.cd_medico_resp%type;


c01 CURSOR FOR
	SELECT 	cd_taxa_cirurgia,
			ie_origem_proced,
			nr_seq_proc_interno
	 from 	convenio_taxa_cirurgia
	 where 	cd_convenio = cd_convenio_w
	 and 	cd_categoria = cd_categoria_w
	 and 	coalesce(cd_setor_atendimento, coalesce(cd_setor_atendimento_w,0)) 	= coalesce(cd_setor_atendimento_w,0)
	 and 	coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_w,0)) 	= coalesce(ie_tipo_atendimento_w,0)
	 and 	nr_porte_anestesico 				= nr_porte_anestesico_antigo_w
	 and 	coalesce(cd_tipo_acomodacao, coalesce(cd_tipo_acomodacao_w,0)) 	= coalesce(cd_tipo_acomodacao_w,0)
	 order by	coalesce(cd_setor_atendimento,0),
		coalesce(ie_tipo_atendimento,0),
		coalesce(cd_tipo_acomodacao,0);


BEGIN

select 	coalesce(max(cd_procedimento),0),
	coalesce(max(ie_origem_proced),0),
	coalesce(max(nr_seq_proc_interno),0),
	coalesce(max(nr_seq_exame),0),
	coalesce(max(ie_valor_informado),'N'),
	coalesce(max(nr_seq_ajuste_proc),0),
	coalesce(max(cd_situacao_glosa),0)
into STRICT	cd_proc_antigo_w,
	ie_origem_proc_antigo_w,
	nr_seq_proc_interno_ant_w,
	nr_seq_exame_ant_w,
	ie_valor_informado_ant_w,
	nr_seq_ajuste_proc_ant_w,
	cd_situacao_glosa_ant_w
from 	procedimento_paciente
where	nr_sequencia = nr_sequencia_p;

-- Log do Antes
CALL gravar_log_tasy( 657,	'0: ALTERAR_PROCEDIMENTO_PACIENTE  '||
			' nr_sequencia_p		= ' 	||nr_sequencia_p	 	||
			' cd_procedimento_p	= '	 	||cd_proc_antigo_w		||
			' nr_seq_proc_interno_p	= '	 	||nr_seq_proc_interno_ant_w 	||
			' nr_seq_exame_p		= '	||nr_seq_exame_ant_w	 	||
			' ie_origem_proced_p	= '		||ie_origem_proc_antigo_w,  nm_usuario_p );

-- Log do Depois			
CALL gravar_log_tasy( 657,	'1: ALTERAR_PROCEDIMENTO_PACIENTE  '||
			' nr_sequencia_p		= ' 	 ||nr_sequencia_p	 ||
			' cd_procedimento_p	= '	 ||cd_procedimento_p	 	||
			' nr_seq_proc_interno_p	= '	 ||nr_seq_proc_interno_p 	||
			' nr_seq_exame_p		= '	 ||nr_seq_exame_p	 ||
			' ie_origem_proced_p	= '	 ||ie_origem_proced_p,
			nm_usuario_p );

ie_regra_exclusao_w		:= obter_valor_param_usuario(67,309,obter_perfil_ativo,nm_usuario_p,0);
ie_regra_taxa_sala_porte_w		:= obter_valor_param_usuario(67,432,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
varpermite_setor_exlusivo		:= obter_valor_param_usuario(67,4,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
varpermitealterarprocprescr_w		:= obter_valor_param_usuario(67,413,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
-- A Wheb Nao recomenda a Utilizacao desse parametro
varseqexamelab_w			:= obter_valor_param_usuario(67,368,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);

ie_setor_exlusivo_aih_w		:= obter_valor_param_usuario(1123,23,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
ie_setor_exlusivo_apac_w		:= obter_valor_param_usuario(1124,13,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
ie_setor_exlusivo_bpa_w		:= obter_valor_param_usuario(1125,15,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);

CALL gravar_log_tasy(657,	'2: ALTERAR_PROCEDIMENTO_PACIENTE  '	 ||
			' ie_regra_exclusao_w		= ' 	 ||ie_regra_exclusao_w	 	||
			' ie_regra_taxa_sala_porte_w		= '	 ||ie_regra_taxa_sala_porte_w	||
			' varPermite_Setor_Exlusivo		= '	 ||varpermite_setor_exlusivo 	||
			' varPermiteAlterarProcPrescr_w	= '	 ||varpermitealterarprocprescr_w||
			' varSeqExameLab_w		= '	 ||varseqexamelab_w||
			' ie_Setor_Exlusivo_bpa_w		= '	 ||ie_setor_exlusivo_bpa_w||
			' ie_setor_exlusivo_aih_w		= '	||ie_setor_exlusivo_aih_w||
			' ie_setor_exlusivo_apac_w		= '	||ie_setor_exlusivo_apac_w||
			' obter_perfil_ativo			= '	||obter_perfil_ativo,
			nm_usuario_p);

if (obter_funcao_ativa = 1123) then
	ds_parametro_w := '23';
elsif (obter_funcao_ativa = 1124) then
	ds_parametro_w := '13';
elsif (obter_funcao_ativa = 1125) then
	ds_parametro_w := '15';	
else
	ds_parametro_w := '4';	
end if;


if 	(((varpermite_setor_exlusivo = 'N') and
	not(obter_funcao_ativa in (1123,1124,1125))) or
	(obter_funcao_ativa = 1125 AND ie_setor_exlusivo_bpa_w = 'N') or
	(obter_funcao_ativa = 1124 AND ie_setor_exlusivo_apac_w = 'N') or
	(obter_funcao_ativa = 1123 AND ie_setor_exlusivo_aih_w = 'N')) then

	select 	cd_setor_atendimento
	into STRICT	cd_setor_atendimento_w
	from 	procedimento_paciente
	where 	nr_sequencia = nr_sequencia_p;

	ie_setor_exclusivo_w:= verifica_setor_exclusivo(cd_procedimento_p, ie_origem_proced_p, cd_setor_atendimento_w, nr_seq_proc_interno_p, nm_usuario_p);

	if (ie_setor_exclusivo_w = 0) then
		-- O usuario nao esta autorizado a executar este procedimento/setor do paciente. Parametro[#@DS_PARAMETRO#@]
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(193556,'DS_PARAMETRO='||ds_parametro_w);
	end if;
end if;

select	nr_sequencia_prescricao,
	nr_prescricao,
	nr_atendimento,
	nr_interno_conta,
	nr_laudo,
	dt_entrada_unidade,
	cd_setor_atendimento,
	cd_convenio,
	cd_categoria,
	dt_procedimento,
	nr_seq_material,
	substr(obter_somente_numero(cd_edicao_amb),1,6),
	qt_procedimento
into STRICT	nr_sequencia_prescricao_w,
	nr_prescricao_w,
	nr_atendimento_w,
	nr_interno_conta_w,
	nr_laudo_w,
	dt_entrada_unidade_w,
	cd_setor_atendimento_w,
	cd_convenio_w,
	cd_categoria_w,
	dt_procedimento_w,
	nr_seq_material_w,
	cd_edicao_amb_w,
	qt_procedimento_w
from 	procedimento_paciente
where	nr_sequencia = nr_sequencia_p;

select	max(cd_motivo_exc_conta)
into STRICT	cd_motivo_exclusao_w
from	parametro_faturamento
where	cd_estabelecimento	= wheb_usuario_pck.get_cd_estabelecimento;	

select	count(1)
into STRICT	qt_reg_w
from	procedimento
where	cd_procedimento = cd_procedimento_p
and	ie_origem_proced = ie_origem_proced_p  LIMIT 1;

if (qt_reg_w > 0) then
	begin
	
	select	max(ie_valor_inf_alt_proc)
	into STRICT	ie_valor_inf_alt_proc_w
	from	parametro_faturamento
	where	cd_estabelecimento	= wheb_usuario_pck.get_cd_estabelecimento;

	if	((coalesce(ie_valor_inf_alt_proc_w,'N') = 'S') or
		 ((nr_seq_ajuste_proc_ant_w > 0) and cd_situacao_glosa_ant_w in (8,10,23))) then
		ie_atualizar_valor_proc_w := 'S';
	end if;
	
	select	nr_seq_atepacu,
		cd_plano_convenio,
		cd_medico_resp,
		cd_estabelecimento
	into STRICT	nr_seq_atepacu_w,
		cd_plano_convenio_w,
		cd_medico_resp_w,
		cd_estabelecimento_w
	from 	atendimento_paciente_v
	where	nr_atendimento = nr_atendimento_w;
	
	SELECT * FROM tratar_retorno_regra_uso_proc(	nr_atendimento_w, cd_procedimento_p, ie_origem_proced_p, cd_setor_atendimento_w, cd_estabelecimento_w, cd_plano_convenio_w, dt_procedimento_w, cd_medico_resp_w, nr_seq_atepacu_w, cd_motivo_exclusao_w, nm_usuario_p, cd_categoria_w, cd_convenio_w, nr_interno_conta_w, qt_procedimento_w, ds_erro_w, ie_valor_informado_w, vl_procedimento_w, nr_sequencia_p) INTO STRICT cd_categoria_w, cd_convenio_w, nr_interno_conta_w, qt_procedimento_w, ds_erro_w, ie_valor_informado_w, vl_procedimento_w;
	
	update	procedimento_paciente
	set 	cd_procedimento = cd_procedimento_p,
		qt_procedimento	= qt_procedimento_w,
		ie_origem_proced = ie_origem_proced_p,
		cd_procedimento_convenio = CASE WHEN cd_procedimento_convenio = NULL THEN  null  ELSE cd_procedimento_p END ,
		nr_seq_proc_interno = CASE WHEN nr_seq_proc_interno_p=0 THEN null  ELSE nr_seq_proc_interno_p END ,
		nm_usuario = nm_usuario_p,
		nr_seq_exame	= CASE WHEN coalesce(varseqexamelab_w,'N')='N' THEN  null  ELSE nr_seq_exame END ,
		dt_atualizacao = clock_timestamp(),
		cd_procedimento_tuss  = NULL,
		ie_valor_informado = CASE WHEN coalesce(ie_atualizar_valor_proc_w,'N')='S' THEN 'N'  ELSE ie_valor_informado END  -- se mudar para N = garantir que este item tenha preco atualizado
	where	nr_sequencia = nr_sequencia_p;
	
	end;
else
	Wheb_mensagem_pck.exibir_mensagem_abort(988425,'CD_PROCED_P=' || cd_procedimento_p || ';IE_ORIG_P='|| ie_origem_proced_p );
	--Nao foi localizado um registro do procedimento #@CD_PROCED_P#@ com a origem #@IE_ORIG_P#@ na tabela de procedimentos!
end if;

if (coalesce(nr_seq_proc_interno_p,0) > 0) then

	select 	coalesce(max(cd_procedimento_tuss),0),
		coalesce(max(ie_origem_proc_tuss),0)
	into STRICT	cd_procedimento_tuss_w,
		ie_origem_proc_tuss_w
	from 	proc_interno
	where 	nr_sequencia = nr_seq_proc_interno_p;

	if (ie_origem_proc_tuss_w = 8) then
		update	procedimento_paciente
		set 	cd_procedimento_tuss = cd_procedimento_tuss_w
		where	nr_sequencia = nr_sequencia_p;
	end if;

end if;

if (coalesce(nr_seq_exame_p,0) > 0) then

	cd_procedimento_tuss_w := define_proc_tuss_exame(nr_seq_exame_p,cd_convenio_w, cd_categoria_w,nr_seq_material_w, cd_edicao_amb_w);

	if (coalesce(cd_procedimento_tuss_w, 0) > 0) then
		update	procedimento_paciente
		set 	cd_procedimento_tuss = cd_procedimento_tuss_w
		where	nr_sequencia = nr_sequencia_p;
	end if;
	
	update	procedimento_paciente
	set	nr_seq_exame = nr_seq_exame_p
	where	nr_sequencia = nr_sequencia_p;

end if;

if (varpermitealterarprocprescr_w = 'S') then

	select	coalesce(max('S'),'N')
	into STRICT	ie_tipo_proced_w
	from	procedimento_paciente
	where	nr_sequencia = nr_sequencia_p
	and	obter_tipo_procedimento(cd_procedimento, ie_origem_proced, 'C') =
		obter_tipo_procedimento(cd_procedimento_p, ie_origem_proced_p, 'C');

	if (ie_tipo_proced_w = 'S') and (coalesce(nr_laudo_w::text, '') = '') then
		ie_permite_atualizar_w	:= 'N';
	end if;

end if;

CALL gravar_log_tasy(657,	'3: ALTERAR_PROCEDIMENTO_PACIENTE '	 ||
			' ie_tipo_proced_w		= ' 	 ||ie_tipo_proced_w ||
		   	' nr_laudo_w		= '	 	 ||nr_laudo_w	||
			' ie_permite_atualizar_w	= '	 ||ie_permite_atualizar_w 	||
			' nr_sequencia_prescricao_w	= '	 ||nr_sequencia_prescricao_w||
			' nr_prescricao_w		= '	 ||nr_prescricao_w,
			nm_usuario_p );

if (nr_sequencia_prescricao_w IS NOT NULL AND nr_sequencia_prescricao_w::text <> '') and (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') and (ie_permite_atualizar_w = 'S') then
	update	prescr_procedimento
	set	cd_procedimento = cd_procedimento_p,
		ie_origem_proced = ie_origem_proced_p,
		nr_seq_proc_interno = CASE WHEN nr_seq_proc_interno_p=0 THEN null  ELSE nr_seq_proc_interno_p END ,
		nm_usuario = nm_usuario_p,
		dt_atualizacao = clock_timestamp(),
		nr_seq_exame	= CASE WHEN coalesce(varseqexamelab_w,'N')='N' THEN  null  ELSE nr_seq_exame END
	where	nr_sequencia = nr_sequencia_prescricao_w
	and	nr_prescricao = nr_prescricao_w;
	
	Update		prescr_proc_hor
	set		cd_procedimento = cd_procedimento_p,
			ie_origem_proced = ie_origem_proced_p
	where		nr_prescricao = nr_prescricao_w
	and		nr_seq_procedimento = nr_sequencia_prescricao_w;	

	--## INICIO - cancelar autorizacao do procedimento antigo, pois sera gerada uma autorizacao para o novo procedimento ##
	select 	cd_estabelecimento
	into STRICT 	cd_estabelecimento_w
	from 	prescr_medica
	where 	nr_prescricao = nr_prescricao_w;
	
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_estagio_cancel_w
	from	estagio_autorizacao
	where	ie_situacao	= 'A'
	and	ie_interno	= '70'
	and	OBTER_EMPRESA_ESTAB(cd_estabelecimento_w) = cd_empresa;

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_sequencia_autor_w
	from	autorizacao_convenio
	where	nr_prescricao		= nr_prescricao_w;
		
	  if (nr_sequencia_autor_w > 0 ) and (nr_seq_estagio_cancel_w > 0) then
			CALL atualizar_autorizacao_convenio(nr_sequencia_autor_w,nm_usuario_p,nr_seq_estagio_cancel_w,'N','N','S');
	end if;	
	--## FIM - cancelar autorizacao do procedimento antigo, pois sera gerada uma autorizacao para o novo procedimento ##
end if;

if (ie_regra_exclusao_w	= 'S') then
	CALL excluir_item_conta_rla(nr_sequencia_p,wheb_usuario_pck.get_cd_estabelecimento,nm_usuario_p);
	CALL gerar_lancamento_automatico(nr_atendimento_w,null,34,nm_usuario_p,nr_sequencia_p,null,null,null,null,nr_interno_conta_w);
end if;

if (nr_seq_proc_interno_p > 0) then
	nr_seq_proc_int_autor_w := nr_seq_proc_interno_p;
end if;	

CALL gerar_autor_regra(nr_atendimento_w, --nr_atendimento_p
		null, --nr_seq_material_p
		nr_sequencia_p, --nr_seq_proced_p
		null, --nr_prescricao_p
		null, --nr_seq_mat_prescr_p
		null, --nr_seq_proc_prescr_p
		'EP', --ie_evento_p
		nm_usuario_p, --nm_usuario_p
		null, --nr_seq_agenda_p
		nr_seq_proc_int_autor_w, --nr_seq_proc_interno_p
		null, --nr_seq_gestao_p
		null, --nr_seq_agenda_consulta_p
		null, --nr_seq_agenda_pac_opme_p
		null); --nr_seq_agenda_proc_adic_p
if (coalesce(ie_regra_taxa_sala_porte_w,'N') = 'S') then

	/* Busca o porte do procedimento antigo */

	select 	somente_numero(obter_dados_preco_proc(wheb_usuario_pck.get_cd_estabelecimento,
					cd_convenio,
					cd_categoria,
					cd_edicao_amb,
					cd_proc_antigo_w,
					ie_origem_proc_antigo_w,
					dt_conta,
					'P'))
	into STRICT	nr_porte_anestesico_antigo_w
	from 	procedimento_paciente
	where 	nr_sequencia = nr_sequencia_p;

	/* Busca o porte do procedimento atual */

	select 	somente_numero(obter_dados_preco_proc(wheb_usuario_pck.get_cd_estabelecimento,
					cd_convenio,
					cd_categoria,
					cd_edicao_amb,
					cd_procedimento,
					ie_origem_proced,
					dt_conta,
					'P'))
	into STRICT	nr_porte_anestesico_atual_w
	from 	procedimento_paciente
	where 	nr_sequencia = nr_sequencia_p;

	select 	max(ie_tipo_atendimento)
	into STRICT	ie_tipo_atendimento_w
	from 	atendimento_paciente
	where 	nr_atendimento = nr_atendimento_w;
	
	select	max(cd_plano_convenio),
		max(cd_tipo_acomodacao)
	into STRICT	cd_plano_w,
		cd_tipo_acomod_conv_w
	from	atend_categoria_convenio
	where	nr_atendimento = nr_atendimento_w
	and	nr_seq_interno = obter_atecaco_atendimento(nr_atendimento);

	if (coalesce(nr_porte_anestesico_antigo_w,0) <> coalesce(nr_porte_anestesico_atual_w,0)) then

		select	max(coalesce(cd_tipo_acomodacao,0))
		into STRICT	cd_tipo_acomodacao_w
		from	atend_paciente_unidade
		where	nr_seq_interno 	=	(SELECT	max(nr_seq_atepacu)
						from	procedimento_paciente
						where	nr_sequencia = nr_sequencia_p);

		open c01;
		loop
		fetch c01 into
			cd_procedimento_porte_w,
			ie_origem_proced_porte_w,
			nr_seq_proc_interno_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			cd_procedimento_porte_w	:= cd_procedimento_porte_w;
			ie_origem_proced_porte_w:= ie_origem_proced_porte_w;
			
			if (coalesce(nr_seq_proc_interno_w,0) > 0) then
			SELECT * FROM obter_proc_tab_interno_conv(	nr_seq_proc_interno_w, wheb_usuario_pck.get_cd_estabelecimento, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_porte_w, ie_origem_proced_porte_w, null, clock_timestamp(), cd_tipo_acomod_conv_w, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_porte_w, ie_origem_proced_porte_w;
			end if;	
			
			
			end;
		end loop;
		close c01;

		 delete from procedimento_paciente
		 where nr_interno_conta = nr_interno_conta_w
		 and cd_procedimento = cd_procedimento_porte_w
		 and ie_origem_proced = ie_origem_proced_porte_w;

	 	CALL gerar_taxa_sala_porte(nr_atendimento_w, dt_entrada_unidade_w, dt_procedimento_w, cd_procedimento_p, nr_sequencia_p, nm_usuario_p);

	end if;
end if;

/*SE ESTE ITEM ALTERADO POSSUIR GLOSA, TENTA EXCLUIR SUA COPARTICIPACAO LANCADA NA CONTA DE GLOSA*/

if (nr_seq_ajuste_proc_ant_w > 0)	and
	cd_situacao_glosa_ant_w in (8,10,23) then
	
	if (coalesce(cd_motivo_exclusao_w,0) > 0) then		
		update	procedimento_paciente	a
		set	a.cd_motivo_exc_conta	= (cd_motivo_exclusao_w)::numeric ,
			a.nr_interno_conta	 = NULL,
			a.ds_observacao 	= substr(a.ds_observacao||' '||wheb_mensagem_pck.get_texto(1048483,'ITEM='||nr_sequencia_p),1,255) -- Alteracao do procedimento principal (Sequencia : #@ITEM#@)
		where	a.nr_seq_proc_princ	= nr_sequencia_p
		and	a.qt_procedimento = 0
		and	exists (	SELECT	1
					from	conta_paciente b
					where	a.nr_interno_conta	= b.nr_interno_conta
					and	b.ie_status_acerto	= 1);
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE alterar_procedimento_paciente (nr_sequencia_p bigint, cd_procedimento_p bigint, nr_seq_proc_interno_p bigint, nr_seq_exame_p bigint, ie_origem_proced_p bigint, nm_usuario_p text) FROM PUBLIC;

