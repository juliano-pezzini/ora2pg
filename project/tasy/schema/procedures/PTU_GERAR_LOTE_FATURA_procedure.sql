-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_lote_fatura ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
cd_cgc_fin_w			varchar(14);				
cd_cooperativa_w		varchar(10);
cd_unimed_origem_w		varchar(10);
ie_sem_camara_comp_w		varchar(10);
ie_gerar_fatura_w		varchar(10);
ie_filha_w			varchar(10);
cd_cooperativa_ant_w		varchar(10);
ie_forma_pagamento_w		varchar(3)	:= null;
ie_estrutura_cong_w		varchar(1)	:= 'N';
vl_total_fatura_w		double precision;
nr_seq_fatura_w			bigint;
nr_seq_conta_w			bigint;
nr_seq_resumo_conta_w		bigint;
nr_seq_camara_w			bigint;
qt_camara_w			bigint;
nr_seq_periodo_pgto_w		bigint;
nr_seq_evento_w			bigint;
qt_periodo_w			bigint;
nr_seq_congenere_lote_w		bigint	:= null;
nr_seq_congenere_w		bigint;
nr_seq_cong_resp_financ_w	bigint;
qt_dia_a500_w			bigint;
qt_cobrancas_w			bigint;
dt_inicio_w			timestamp;
dt_fim_w			timestamp;
dt_prev_envio_w			timestamp;
dt_vencimento_w			timestamp;
dt_emissao_w			timestamp;

C01 CURSOR FOR 
	SELECT	a.nr_seq_conta, 
		a.cd_cooperativa_pgto, 
		a.nr_sequencia, 
		a.nr_seq_evento 
	from	pls_conta_medica_resumo	a 
	where	coalesce(a.nr_seq_fatura::text, '') = '' 
	and	a.ie_tipo_item	= 'I' 
	and	((ie_forma_pagamento_w = 'P' AND a.ie_status_protocolo = '3') or 
		(ie_forma_pagamento_w = 'C' AND a.ie_status = 'F')) 
	and	a.dt_competencia between inicio_dia(dt_inicio_w) and fim_dia(dt_fim_w) 
	and	((a.ie_situacao != 'I') or (coalesce(a.ie_situacao::text, '') = ''));
	
C02 CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	ptu_fatura	a 
	where	a.nr_seq_lote	= nr_seq_lote_p 
	and	coalesce(a.dt_vencimento_fatura::text, '') = '';
	
C03 CURSOR FOR 
	SELECT	nr_sequencia 
	from	ptu_fatura 
	where	nr_seq_lote	= nr_seq_lote_p;


BEGIN 
begin 
select	max(ie_forma_pagamento) 
into STRICT	ie_forma_pagamento_w 
from	pls_parametro_pagamento 
where	cd_estabelecimento	= cd_estabelecimento_p;
exception 
when others then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(194991);
end;
 
/* Obter dados do lote da fatura */
 
select	dt_inicio, 
	fim_dia(dt_fim), 
	nr_seq_camara, 
	coalesce(ie_sem_camara_comp,'N'), 
	nr_seq_periodo_pgto, 
	ie_estrutura_cong, 
	nr_seq_congenere, 
	coalesce(dt_previsao_envio,clock_timestamp()), 
	dt_vencimento, 
	dt_emissao 
into STRICT	dt_inicio_w, 
	dt_fim_w, 
	nr_seq_camara_w, 
	ie_sem_camara_comp_w, 
	nr_seq_periodo_pgto_w, 
	ie_estrutura_cong_w, 
	nr_seq_congenere_lote_w, 
	dt_prev_envio_w, 
	dt_vencimento_w, 
	dt_emissao_w 
from	ptu_lote_fatura_envio 
where	nr_sequencia	= nr_seq_lote_p;
 
cd_unimed_origem_w	:= pls_obter_unimed_estab(cd_estabelecimento_p); /* Obter a Unimed do estabelecimento */
 
open C01;
loop 
fetch C01 into	 
	nr_seq_conta_w, 
	cd_cooperativa_w, 
	nr_seq_resumo_conta_w, 
	nr_seq_evento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	ie_gerar_fatura_w	:= 'S';
	qt_periodo_w		:= 1;
	ie_filha_w		:= 'S';
 
	if (nr_seq_periodo_pgto_w IS NOT NULL AND nr_seq_periodo_pgto_w::text <> '') then /*Caso o lote tenha periodo definido*/
 
		select	count(1) 
		into STRICT	qt_periodo_w 
		from	pls_evento_regra 
		where	nr_seq_evento	= nr_seq_evento_w 
		and	nr_seq_periodo	= nr_seq_periodo_pgto_w  LIMIT 1;
	end if;
 
	if (nr_seq_camara_w IS NOT NULL AND nr_seq_camara_w::text <> '') then /*Caso tenha camara definido*/
 
		select	count(1) 
		into STRICT	qt_camara_w 
		from	pls_congenere_camara	x, 
			pls_congenere		c 
		where	x.nr_seq_congenere	= c.nr_sequencia 
		and	x.nr_seq_camara		= nr_seq_camara_w 
		and	trunc(clock_timestamp(),'dd')	<= fim_dia(x.dt_fim_vigencia) 
		and	c.cd_cooperativa	= cd_cooperativa_w  LIMIT 1;
		 
		if (qt_camara_w	= 0) then 
			ie_gerar_fatura_w	:= 'N';
		end if;
	end if;
 
	if (ie_sem_camara_comp_w	= 'S') then /*Caso sejá para as cooperativa sem camaras*/
 
		select	count(1) 
		into STRICT	qt_camara_w 
		from	pls_congenere_camara	x, 
			pls_congenere		c 
		where	x.nr_seq_congenere	= c.nr_sequencia 
		and	trunc(clock_timestamp(),'dd')	<= fim_dia(x.dt_fim_vigencia) 
		and	c.cd_cooperativa	= cd_cooperativa_w  LIMIT 1;
		 
		if (qt_camara_w	<> 0) then 
			ie_gerar_fatura_w	:= 'N';
		end if;
	end if;	
	 
	select	max(a.nr_sequencia) /* Obter qual o nr_seq_congenere pelo codigo da unimed */
 
	into STRICT	nr_seq_congenere_w 
	from	pls_congenere a 
	where	a.cd_cooperativa = cd_cooperativa_w 
	and (coalesce(a.dt_exclusao::text, '') = '' or a.dt_exclusao > dt_prev_envio_w);
 
	if (coalesce(nr_seq_congenere_w::text, '') = '') then 
		select	max(a.nr_sequencia) 
		into STRICT	nr_seq_congenere_w 
		from	pls_congenere a 
		where	somente_numero(a.cd_cooperativa) = somente_numero(cd_cooperativa_w) 
		and (coalesce(a.dt_exclusao::text, '') = '' or a.dt_exclusao > dt_prev_envio_w);
	end if;
 
	if (coalesce(cd_cooperativa_ant_w,'X') <> coalesce(cd_cooperativa_w,'X')) and (nr_seq_congenere_lote_w IS NOT NULL AND nr_seq_congenere_lote_w::text <> '') then 
		if (nr_seq_congenere_lote_w <> nr_seq_congenere_w) then 
			if (ie_estrutura_cong_w = 'S') then 
				ie_filha_w	:= pls_obter_se_unimed_superior(nr_seq_congenere_w, nr_seq_congenere_lote_w);
			else 
				ie_filha_w	:= 'N';
			end if;
		end if;
	end if;
	 
	if (ie_gerar_fatura_w	= 'S') and (qt_periodo_w		<> 0) and (ie_filha_w		= 'S') then 
		/*Verificar se já existe fatura no lote para a unimed*/
 
		select	max(nr_sequencia) 
		into STRICT	nr_seq_fatura_w 
		from	ptu_fatura 
		where	cd_unimed_destino	= cd_cooperativa_w 
		and	nr_seq_lote		= nr_seq_lote_p;
 
		if (coalesce(nr_seq_fatura_w::text, '') = '') then 
			cd_cgc_fin_w	:= pls_obter_coop_pag_resp_fin(nr_seq_congenere_w,clock_timestamp());
			 
			if (cd_cgc_fin_w IS NOT NULL AND cd_cgc_fin_w::text <> '') then 
				select	max(nr_sequencia) 
				into STRICT	nr_seq_cong_resp_financ_w 
				from	pls_congenere 
				where	cd_cgc = cd_cgc_fin_w;
			end if;
			 
			select	nextval('ptu_fatura_seq') 
			into STRICT	nr_seq_fatura_w 
			;
			 
			insert into ptu_fatura(nr_sequencia, cd_estabelecimento, cd_unimed_destino, 
				cd_unimed_origem, dt_geracao, nr_competencia, 
				nr_fatura, dt_atualizacao, nm_usuario, 
				dt_atualizacao_nrec, nm_usuario_nrec, dt_emissao_fatura, 
				vl_total_fatura, nr_versao_transacao, ie_tipo_fatura, 
				ie_operacao, nr_seq_lote, dt_vencimento_fatura, 
				nr_seq_cong_resp_financ, ie_doc_fisica_conferida) 
			values (nr_seq_fatura_w, cd_estabelecimento_p, cd_cooperativa_w, 
				cd_unimed_origem_w, trunc(clock_timestamp(),'dd'), (to_char(clock_timestamp(),'yymm'))::numeric , 
				null, clock_timestamp(), nm_usuario_p, 
				clock_timestamp(), nm_usuario_p, trunc(coalesce(dt_emissao_w,clock_timestamp()),'dd'), 
				0, 16, 1, 
				'E', nr_seq_lote_p, dt_vencimento_w, 
				nr_seq_cong_resp_financ_w, 'N');
				 
			CALL ptu_atualizar_status_fat_envio(nr_seq_fatura_w, 1, nm_usuario_p);
		end if;
 
		update	pls_conta_medica_resumo 
		set	nr_seq_fatura	= nr_seq_fatura_w 
		where	nr_sequencia	= nr_seq_resumo_conta_w 
		and	nr_seq_conta	= nr_seq_conta_w 
		and	ie_situacao = 'A';
		 
		select	coalesce(sum(a.vl_liberado),0) 
		into STRICT	vl_total_fatura_w 
		from	pls_conta_medica_resumo a 
		where	a.nr_seq_fatura	= nr_seq_fatura_w 
		and	a.ie_situacao = 'A';
		 
		update	ptu_fatura 
		set	vl_total	= vl_total_fatura_w 
		where	nr_sequencia	= nr_seq_fatura_w;
	end if;
	 
	cd_cooperativa_ant_w	:= cd_cooperativa_w;
	end;
end loop;
close C01;
 
update	ptu_lote_fatura_envio 
set	dt_geracao_lote	= clock_timestamp(), 
	nm_usuario	= nm_usuario_p, 
	dt_Atualizacao	= clock_timestamp() 
where	nr_sequencia	= nr_seq_lote_p;
 
CALL ptu_gerar_fatura(nr_seq_lote_p,nm_usuario_p);
 
CALL ptu_desdobrar_fatura_lote(nr_seq_lote_p, cd_estabelecimento_p,nm_usuario_p);
 
open C02;
loop 
fetch C02 into	 
	nr_seq_fatura_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin 
	SELECT * FROM ptu_obter_venc_fatura(	nr_seq_fatura_w, cd_estabelecimento_p, nm_usuario_p, dt_vencimento_w, qt_dia_a500_w) INTO STRICT dt_vencimento_w, qt_dia_a500_w;
	 
	update	ptu_fatura 
	set	dt_vencimento_fatura	= dt_vencimento_w 
	where	nr_sequencia		= nr_seq_fatura_w;
	end;
end loop;
close C02;
 
open C03;
loop 
fetch C03 into	 
	nr_seq_fatura_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin 
	select	count(1) 
	into STRICT	qt_cobrancas_w 
	from	ptu_nota_cobranca 
	where	nr_seq_fatura		= nr_seq_fatura_w 
	and	ie_necessita_doc_fisico	= 'S'  LIMIT 1;
	 
	if (qt_cobrancas_w > 0) then 
		update 	ptu_fatura 
		set	ie_necessita_doc_fisico	= 'S' 
		where	nr_sequencia	= nr_seq_fatura_w;
	else 
		update 	ptu_fatura 
		set	ie_necessita_doc_fisico	= 'N' 
		where	nr_sequencia	= nr_seq_fatura_w;
	end if;
	end;
end loop;
close C03;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_lote_fatura ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

