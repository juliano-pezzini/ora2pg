-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE import_expressao_idioma_arr (nr_seq_p strarray, import_id_p w_expression_import_stg.import_id%type) AS $body$
DECLARE


    curs_all_rec CURSOR FOR
        SELECT cd_expressao,
               ds_expressao_new,
               ds_locale_new,
               ds_idioma,
               clock_timestamp(),
               nm_usuario,
               error_code,
               nr_sequencia,
               ds_revisao_new
          from w_expression_import_stg
         where import_id = import_id_p
           and error_code in ('I', 'U');

    cur_all_rec     curs_all_rec%rowtype;
    invalid_param_e exception;
    v_sequencia     bigint;
  r RECORD;

BEGIN
    CALL log_expression_import_stg(import_id_p, null, null, 'Idioma importing started', null, null);
    if (coalesce(import_id_p::text, '') = '') then
        RAISE EXCEPTION 'invalid_param_e' USING ERRCODE = '50007';
    end if;
    if (nr_seq_p.count > 0) then
        forall i in nr_seq_p.first .. nr_seq_p.last
            update w_expression_import_stg
               set error_code = 'N'
             where import_id = import_id_p
               and nr_sequencia = (nr_seq_p(i))::numeric;

        commit;
    end if;

    open curs_all_rec;
    loop
        fetch curs_all_rec
            into cur_all_rec;
        EXIT WHEN NOT FOUND; /* apply on curs_all_rec */
        begin
            if (cur_all_rec.error_code = 'I') then

                for r in (SELECT cd_expressao,
                                 ds_expressao_new,
                                 ds_locale_new,
                                 ds_idioma,
                                 nm_usuario
                            from w_expression_import_stg
                           where nr_sequencia = cur_all_rec.nr_sequencia
                             and (ds_locale_new IS NOT NULL AND ds_locale_new::text <> '')) loop
                
                    $if $$tasy_local_dict=true $then
                    v_sequencia := get_remote_sequence('SEQ:DIC_EXPRESSAO_IDIOMA_SEQ');
                    $else
                    select nextval('dic_expressao_idioma_seq') into STRICT v_sequencia;
                    $end

                    insert into dic_expressao_idioma(nr_sequencia, cd_expressao, ds_expressao, ds_locale, ds_idioma, dt_atualizacao, nm_usuario)
                    values (v_sequencia, r.cd_expressao, r.ds_expressao_new, r.ds_locale_new, r.ds_idioma, clock_timestamp(), r.nm_usuario);
                end loop;

            elsif (cur_all_rec.error_code = 'U') then
                if (cur_all_rec.ds_expressao_new IS NOT NULL AND cur_all_rec.ds_expressao_new::text <> '') then
                    update dic_expressao_idioma
                       set ds_expressao       = cur_all_rec.ds_expressao_new,
                           dt_atualizacao     = clock_timestamp(),
                           nm_usuario         = cur_all_rec.nm_usuario,
                           nm_usuario_txt     = cur_all_rec.nm_usuario,
                           dt_atualizacao_txt = clock_timestamp()
                     where cd_expressao = cur_all_rec.cd_expressao
                       and ds_idioma = cur_all_rec.ds_idioma
                       and ds_locale = cur_all_rec.ds_locale_new;
                end if;

                if (cur_all_rec.ds_revisao_new IS NOT NULL AND cur_all_rec.ds_revisao_new::text <> '') then
                    update dic_expressao
                       set ds_revisao = cur_all_rec.ds_revisao_new
                     where cd_expressao = cur_all_rec.cd_expressao;

                end if;

            end if;
        exception
            when no_data_found then
                CALL log_expression_import_stg(import_id_p,
                                          cur_all_rec.cd_expressao,
                                          cur_all_rec.nm_usuario,
                                          'Idioma importing stuck',
                                          SQLSTATE,
                                          sqlerrm);
            when others then
                CALL log_expression_import_stg(import_id_p,
                                          cur_all_rec.cd_expressao,
                                          cur_all_rec.nm_usuario,
                                          'Idioma importing stuck',
                                          SQLSTATE,
                                          sqlerrm);
        end;

    end loop;

    CALL log_expression_import_stg(import_id_p, null, null, 'Idioma importing successfull', null, null);
    close curs_all_rec;
    CALL delete_import_stag(import_id_p);
    commit;
exception
    when SQLSTATE '50007' then
        CALL log_expression_import_stg(import_id_p, null, null, 'Idioma importing stopped', null, '1073415');
    when others then
        CALL log_expression_import_stg(import_id_p, null, null, 'Idioma importing stopped', SQLSTATE, sqlerrm);
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE import_expressao_idioma_arr (nr_seq_p strarray, import_id_p w_expression_import_stg.import_id%type) FROM PUBLIC;

