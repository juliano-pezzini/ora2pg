-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ajustar_lote_hist_item_conta2 (nr_seq_lote_guia_p bigint, ie_commit_p text, nm_usuario_p text) AS $body$
DECLARE


/* Esta procedure é utilizada para cancelar os itens estornados com os seus respectivos positivos */

/*

A mesma foi reformulada à partir da AJUSTAR_LOTE_HIST_ITEM_CONTA que não estava considerando os valores de devolução.
Sendo que se havia reajuste de preço, o sistema gerava diferença.

Testes no Sírio (Base de Simulação)

Lote	Conta
116116	2658885
116115	2545062
116109	2563247

*/
cd_material_w		integer;
qt_item_negativo_w	double precision;
nr_seq_lote_item_w	bigint;
qt_item_positivo_w	double precision;
vl_material_negativo_w	double precision;
vl_item_positivo_w	double precision;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
ie_itens_sem_saldo_w	varchar(1);
cd_estabelecimento_w	smallint;
nr_seq_item_w		bigint;
nr_seq_item_ww		bigint;
ie_entrou_w		varchar(1);

/* Itens negativos da conta (Estornos)  - MATERIAIS*/

c01 CURSOR FOR
SELECT	b.cd_material,
	null cd_procedimento,
	null ie_origem_proced,
	CASE WHEN a.qt_item - abs(a.qt_item)=0 THEN a.qt_item * -1  ELSE a.qt_item END  qt_item,
	a.vl_saldo,
	b.nr_sequencia
from	material_atend_paciente b,
	lote_audit_hist_item a
where	a.nr_seq_guia		= nr_seq_lote_guia_p
and (a.qt_item < 0 or a.vl_glosa_informada < 0)
and	a.nr_seq_matpaci	= b.nr_sequencia
order by b.cd_material, b.nr_sequencia;

/* itens positivos, correspondentes ao item negativo selecionado no c01  - MATERIAIS*/

c02 CURSOR FOR
SELECT	a.nr_sequencia,
	a.qt_item,
	a.vl_saldo,
	b.nr_sequencia
from	material_atend_paciente b,
	lote_audit_hist_item a
where	a.nr_seq_guia		= nr_seq_lote_guia_p
and	a.qt_item		> 0
and	a.vl_glosa_informada	>= 0
and 	dividir(a.vl_saldo,a.qt_item) >= abs(dividir(vl_material_negativo_w,qt_item_negativo_w))
and 	b.nr_sequencia < nr_seq_item_ww
and	a.nr_seq_matpaci	= b.nr_sequencia
and	b.cd_material		= cd_material_w
order by b.nr_sequencia desc;

/* Válvula de escape de inércia - MATERIAIS 'ADJUSTMENT COLUMN'
--Se a devolução ocorreu antes do lançamento positivo
-- Aconteceu no item 128599 da conta 2563247 na base de simulação Sirio Libanês.*/
cursor c03 is
select	a.nr_sequencia,
	a.qt_item,
	a.vl_saldo,
	b.nr_sequencia
from	material_atend_paciente b,
	lote_audit_hist_item a
where	a.nr_seq_guia		= nr_seq_lote_guia_p
and	a.qt_item		> 0
and	a.vl_glosa_informada	>= 0
and 	dividir(a.vl_saldo,a.qt_item) >= abs(dividir(vl_material_negativo_w,qt_item_negativo_w))
and 	b.nr_sequencia > nr_seq_item_ww
and	a.nr_seq_matpaci	= b.nr_sequencia
and	b.cd_material		= cd_material_w
order by b.nr_sequencia desc;


/* PROCEDIMENTOS*/

c04 CURSOR FOR
SELECT	b.cd_procedimento,
	b.ie_origem_proced,
	sum(CASE WHEN a.qt_item - abs(a.qt_item)=0 THEN a.qt_item * -1  ELSE a.qt_item END ) qt_item,
	coalesce(sum(CASE WHEN ie_itens_sem_saldo_w='S' THEN a.vl_saldo  ELSE (obter_saldo_conpaci_item(b.nr_sequencia,null))::numeric  END ),0) vl_saldo
from	procedimento_paciente b,
	lote_audit_hist_item a
where	a.nr_seq_guia		= nr_seq_lote_guia_p
and (a.qt_item < 0 or a.vl_glosa_informada < 0)
and	a.nr_seq_propaci	= b.nr_sequencia
group by	b.cd_procedimento,
	b.ie_origem_proced;

/* PROCEDIMENTOS*/

c05 CURSOR FOR
SELECT	a.nr_sequencia,
	a.qt_item,
	CASE WHEN ie_itens_sem_saldo_w='S' THEN a.vl_saldo  ELSE coalesce((obter_saldo_conpaci_item(b.nr_sequencia,null))::numeric ,0) END  vl_saldo
from	procedimento_paciente b,
	lote_audit_hist_item a
where	coalesce(a.ie_ajustado,'N')	= 'N'
and	a.nr_seq_guia		= nr_seq_lote_guia_p
and	a.qt_item		> 0
and	a.vl_glosa_informada	>= 0
and	a.nr_seq_propaci	= b.nr_sequencia
and	b.cd_procedimento	= cd_procedimento_w
and	b.ie_origem_proced	= ie_origem_proced_w
order by	qt_item;



BEGIN

select	max(c.cd_estabelecimento)
into STRICT	cd_estabelecimento_w
from	lote_auditoria c,
	lote_audit_hist b,
	lote_audit_hist_guia a
where	b.nr_seq_lote_audit	= c.nr_sequencia
and	a.nr_seq_lote_hist	= b.nr_sequencia
and	a.nr_sequencia		= nr_seq_lote_guia_p;

ie_itens_sem_saldo_w := obter_param_usuario(69, 28, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_itens_sem_saldo_w);

ie_entrou_w:= 'N';

open c01;
loop
fetch c01 into
	cd_material_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	qt_item_negativo_w,
	vl_material_negativo_w,
	nr_seq_item_ww;
EXIT WHEN NOT FOUND; /* apply on c01 */

	while(qt_item_negativo_w	< 0) loop
		ie_entrou_w:= 'N';
		open c02;
		loop
		fetch c02 into
			nr_seq_lote_item_w,
			qt_item_positivo_w,
			vl_item_positivo_w,
			nr_seq_item_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			ie_entrou_w:= 'S';
		end loop;
		close c02;

		if (ie_entrou_w = 'N') then --Se a devolução ocorreu antes do lançamento positivo
						-- Aconteceu no item 128599 da conta 2563247 na base de simulação
			open c03;
			loop
			fetch c03 into
				nr_seq_lote_item_w,
				qt_item_positivo_w,
				vl_item_positivo_w,
				nr_seq_item_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
			end loop;
			close c03;

		end if;


		if (qt_item_positivo_w	> abs(qt_item_negativo_w)) then	/* se tiver mais positivo do que negativo, apenas deduz do total */
			update	lote_audit_hist_item
			set	qt_item			= qt_item + qt_item_negativo_w,
				vl_saldo		= vl_saldo + vl_material_negativo_w,
				vl_glosa_informada	= vl_glosa_informada + vl_material_negativo_w
			where	nr_sequencia		= nr_seq_lote_item_w;

			qt_item_negativo_w	:= 0;


		elsif (qt_item_positivo_w	= abs(qt_item_negativo_w)) then	/* se a qtd de positivos e negativos for igual, elimina o item */
			delete	from lote_audit_hist_item
			where	nr_sequencia	= nr_seq_lote_item_w;

			qt_item_negativo_w	:= 0;

		/* tiver menos positivo do que negativo, elimina o positivo e deduz sua qtd da qtd negativa, depois passa para o próximo item positivo */

		elsif (qt_item_positivo_w	< abs(qt_item_negativo_w)) then
			delete	from lote_audit_hist_item
			where	nr_sequencia	= nr_seq_lote_item_w;


			qt_item_negativo_w	:= qt_item_negativo_w + qt_item_positivo_w;
			vl_material_negativo_w	:= vl_material_negativo_w + vl_item_positivo_w;


		/* se a quantidade total de itens negativos supera a quantidade total de itens positivos, é necessário sair do loop */

		elsif (coalesce(qt_item_positivo_w::text, '') = '') then
			qt_item_negativo_w	:= 0;
		end if;

	end loop;

	if (coalesce(ie_commit_p,'S') = 'S') then
		commit;
	end if;

	if (coalesce(cd_material_w,0) <> 0) then

		update	lote_audit_hist_item a
		set	ie_ajustado	= 'S'
		where	a.nr_seq_guia		= nr_seq_lote_guia_p
		and	a.qt_item		> 0
		and 	a.nr_seq_matpaci = nr_seq_item_w
		and	exists (SELECT	1
			from	material_atend_paciente x
			where	x.cd_material	= cd_material_w
			and	x.nr_sequencia	= a.nr_seq_matpaci);

	else

		update	lote_audit_hist_item a
		set	ie_ajustado	= 'S'
		where	coalesce(a.ie_ajustado,'N')	= 'N'
		and	a.nr_seq_guia		= nr_seq_lote_guia_p
		and	a.qt_item		> 0
		and	exists (SELECT	1
			from	procedimento_paciente x
			where	x.ie_origem_proced	= ie_origem_proced_w
			and	x.cd_procedimento	= cd_procedimento_w
			and	x.nr_sequencia		= a.nr_seq_propaci);

	end if;

	/* elimina os itens negativos */

	delete	from lote_audit_hist_item a
	where	a.nr_seq_guia	= nr_seq_lote_guia_p
	and (a.qt_item < 0 or a.vl_glosa_informada < 0)
	and	(((cd_material_w IS NOT NULL AND cd_material_w::text <> '') and
		  a.nr_seq_matpaci = nr_seq_item_ww and (	SELECT	max(x.cd_material)
								from	material_atend_paciente x
								where	x.nr_sequencia	= a.nr_seq_matpaci) = cd_material_w) or ((cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (	select	max(x.cd_procedimento)
							from	procedimento_paciente x
							where	x.nr_sequencia	= a.nr_seq_propaci) = cd_procedimento_w
						and (	select	max(x.ie_origem_proced)
							from	procedimento_paciente x
							where	x.nr_sequencia	= a.nr_seq_propaci) = ie_origem_proced_w));

	if (coalesce(ie_commit_p,'S') = 'S') then
		commit;
	end if;

end loop;
close c01;


/* PROCEDIMENTOS */

open c04;
loop
fetch c04 into
	cd_procedimento_w,
	ie_origem_proced_w,
	qt_item_negativo_w,
	vl_material_negativo_w;
EXIT WHEN NOT FOUND; /* apply on c04 */

	while(qt_item_negativo_w	< 0) loop

		open c05;
		loop
		fetch c05 into
			nr_seq_lote_item_w,
			qt_item_positivo_w,
			vl_item_positivo_w;
		EXIT WHEN NOT FOUND; /* apply on c05 */
		end loop;
		close c05;

		if (qt_item_positivo_w	> abs(qt_item_negativo_w)) then	/* se tiver mais positivo do que negativo, apenas deduz do total */
			update	lote_audit_hist_item
			set	qt_item			= qt_item + qt_item_negativo_w,
				vl_saldo		= vl_saldo + vl_material_negativo_w,
				vl_glosa_informada	= vl_glosa_informada + vl_material_negativo_w,
				ie_ajustado		= 'S'
			where	nr_sequencia		= nr_seq_lote_item_w;

			qt_item_negativo_w	:= 0;
		elsif (qt_item_positivo_w	= abs(qt_item_negativo_w)) then	/* se a qtd de positivos e negativos for igual, elimina o item */
			delete	from lote_audit_hist_item
			where	nr_sequencia	= nr_seq_lote_item_w;

			qt_item_negativo_w	:= 0;
		/* tiver menos positivo do que negativo, elimina o positivo e deduz sua qtd da qtd negativa, depois passa para o próximo item positivo */

		elsif (qt_item_positivo_w	< abs(qt_item_negativo_w)) then
			delete	from lote_audit_hist_item
			where	nr_sequencia	= nr_seq_lote_item_w;

			qt_item_negativo_w	:= qt_item_negativo_w + qt_item_positivo_w;
			vl_material_negativo_w	:= vl_material_negativo_w + vl_item_positivo_w;
		/* se a quantidade total de itens negativos supera a quantidade total de itens positivos, é necessário sair do loop */

		elsif (coalesce(qt_item_positivo_w::text, '') = '') then
			qt_item_negativo_w	:= 0;
		end if;

	end loop;


	update	lote_audit_hist_item a
	set	ie_ajustado	= 'S'
	where	coalesce(a.ie_ajustado,'N')	= 'N'
	and	a.nr_seq_guia		= nr_seq_lote_guia_p
	and	a.qt_item		> 0
	and	exists (SELECT	1
		from	procedimento_paciente x
		where	x.ie_origem_proced	= ie_origem_proced_w
		and	x.cd_procedimento	= cd_procedimento_w
		and	x.nr_sequencia		= a.nr_seq_propaci);


	/* elimina os itens negativos */

	delete	from lote_audit_hist_item a
	where	a.nr_seq_guia	= nr_seq_lote_guia_p
	and (a.qt_item < 0 or a.vl_glosa_informada < 0)
	and ((cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (	SELECT	max(x.cd_procedimento)
							from	procedimento_paciente x
							where	x.nr_sequencia	= a.nr_seq_propaci) = cd_procedimento_w
						and (	select	max(x.ie_origem_proced)
							from	procedimento_paciente x
							where	x.nr_sequencia	= a.nr_seq_propaci) = ie_origem_proced_w);

end loop;
close c04;

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ajustar_lote_hist_item_conta2 (nr_seq_lote_guia_p bigint, ie_commit_p text, nm_usuario_p text) FROM PUBLIC;

