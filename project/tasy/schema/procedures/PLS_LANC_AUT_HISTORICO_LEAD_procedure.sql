-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_lanc_aut_historico_lead ( nr_seq_lead_p bigint, ie_origem_solicitacao_p text, nr_acao_origem_p text, dt_vencimento_contrato_p timestamp, nm_usuario_p text) AS $body$
DECLARE


nr_seq_regra_w			pls_regra_lanc_automatico.nr_sequencia%type;
nr_seq_regra_item_w		pls_regra_lanc_aut_item.nr_sequencia%type;
ie_tipo_atividade_w		pls_regra_lanc_aut_item.ie_tipo_atividade%type;
ds_historico_w			pls_regra_lanc_aut_item.ds_historico%type;
qt_dias_venc_contrato_w		bigint;
dt_programacao_w		timestamp;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_lanc_automatico
	where	ie_evento = '16'
	and (nr_acao_origem = nr_acao_origem_p or coalesce(nr_acao_origem::text, '') = '')
	and (ie_origem_solicitacao = ie_origem_solicitacao_p or coalesce(ie_origem_solicitacao::text, '') = '')
	order by coalesce(nr_acao_origem, ' '),
		coalesce(ie_origem_solicitacao, ' ');

BEGIN

--Buscar regra
nr_seq_regra_w	:= null;
for r_c01_w in C01 loop
	begin
	nr_seq_regra_w	:= r_c01_w.nr_sequencia;
	end;
end loop;

if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_regra_item_w
	from	pls_regra_lanc_aut_item
	where	nr_seq_regra	= nr_seq_regra_w
	and	clock_timestamp() between coalesce(dt_inicio_vigencia,clock_timestamp()) and coalesce(dt_fim_vigencia,clock_timestamp());

	if (nr_seq_regra_item_w IS NOT NULL AND nr_seq_regra_item_w::text <> '') then
		select	ie_tipo_atividade,
			ds_historico,
			coalesce(qt_dias_venc_contrato,0)
		into STRICT	ie_tipo_atividade_w,
			ds_historico_w,
			qt_dias_venc_contrato_w
		from	pls_regra_lanc_aut_item
		where	nr_sequencia	= nr_seq_regra_item_w;

		if (qt_dias_venc_contrato_w > 0) then
			dt_programacao_w	:= dt_vencimento_contrato_p - qt_dias_venc_contrato_w;

			if (dt_programacao_w < clock_timestamp()) then
				dt_programacao_w	:= clock_timestamp();
			end if;
		else
			dt_programacao_w	:= clock_timestamp();
		end if;

		insert	into	pls_solicitacao_historico(	nr_sequencia, nr_seq_solicitacao, ie_tipo_atividade,
					dt_historico, nm_usuario_historico, dt_atualizacao,
					nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
					ds_historico, dt_liberacao, nm_usuario_liberacao,
					dt_programacao)
			values (	nextval('pls_solicitacao_historico_seq'), nr_seq_lead_p, ie_tipo_atividade_w,
					 clock_timestamp(), nm_usuario_p, clock_timestamp(),
					nm_usuario_p, clock_timestamp(), nm_usuario_p,
					ds_historico_w, clock_timestamp(), nm_usuario_p,
					dt_programacao_w);
		end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_lanc_aut_historico_lead ( nr_seq_lead_p bigint, ie_origem_solicitacao_p text, nr_acao_origem_p text, dt_vencimento_contrato_p timestamp, nm_usuario_p text) FROM PUBLIC;

