-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_nota_fiscal ( nr_sequencia_p bigint, nm_usuario_p text, ds_erro_item_p INOUT text, ds_erro_nota_p INOUT text, ie_commit_p text default 'S', ie_devolucao_integracao_p text default 'N') AS $body$
DECLARE


dt_mesano_vigente_w			timestamp;
dt_entrada_saida_w			timestamp;
qt_vencimento_w				integer;
vl_total_nota_w				double precision  := 0;
vl_total_nota_ww				double precision  := 0;
vl_mercadoria_w				double precision  := 0;
vl_despesa_acessoria_w			double precision  := 0;
vl_seguro_w				double precision  := 0;
vl_frete_w				double precision  := 0;
vl_ipi_w					double precision  := 0;
vl_descontos_w				double precision  := 0;
vl_parcelas_w				double precision  := 0;
vl_tributos_w				double precision  := 0;
vl_imposto_w				double precision  := 0;
vl_subst_trib_w				double precision  := 0;
ie_forma_pagamento_w			smallint;
ie_consignado_w				varchar(01);
ie_exige_anexo_w				varchar(01);
nr_item_nf_w				integer;
cd_operacao_nf_w				smallint;
ds_erro_item_w				varchar(4000);
ds_erro_aux_w				varchar(4000);
vl_total_item_w				double precision	:= 0;
vl_tributos_venc_w				double precision	:= 0;
ie_consig_w				boolean;
ie_entrada_saida_w				varchar(01);
ie_operacao_fiscal_w			varchar(01);
cd_natureza_operacao_w			smallint;
qt_erro_w					integer;
qt_item_w				integer;
qt_existe_w				bigint;
qt_existe_anexo_w				bigint;
cd_estabelecimento_w			smallint;
cd_cgc_emitente_w			varchar(14);
cd_cgc_w				varchar(14);
cd_serie_nf_w				nota_fiscal.cd_serie_nf%type;
nr_nota_fiscal_w				varchar(255);
nr_ordem_compra_w			bigint;
vl_total_ordem_w				double precision;
vl_total_ordem_ww				double precision;
cd_fornec_ordem_w			varchar(14);
cd_pessoa_ordem_w			varchar(10);
cd_pessoa_fisica_w			varchar(10);
ie_nota_entrada_saida_w 			varchar(1);
vl_contabil_conta_w			double precision;
ie_conta_dif_nf_w				varchar(1);
ie_consiste_cpf_w				varchar(1);
nr_cpf_w					varchar(11);
ie_forma_vinc_nota_consig_w		varchar(1);
cd_oper_nota_ent_vinc_consig_w		smallint;
cd_oper_nota_fat_vinc_consig_w		smallint;
qt_item_sem_vinc_consig_w			integer;
ie_obriga_w				varchar(10);
ie_bloqueia_mesmo_numero_w		varchar(01);
ie_bloqueia_mesmo_nr_serie_w		varchar(01);
ie_permite_nf_sem_inspecao_w		varchar(01);
ie_exige_inspecao_receb_w			varchar(01);
ie_venc_menor_emissao_w			varchar(01);
ie_permite_serie_inexistente_w		varchar(1);
qt_dias_vencimento_w			bigint;
ie_diferenca_venc_w			varchar(1);
ie_nf_oc_vencimento_w			varchar(1);
qt_venc_nf_w				bigint;
ie_gera_venc_usuario_w			varchar(1);
ie_permite_sem_rateio_w			varchar(1);
ie_permite_sem_projeto_w			varchar(1);
ie_consiste_venc_ent_saida_w 		varchar(1);
cd_condicao_pagamento_w			bigint;
ie_consiste_vencto_nota_w			varchar(1);
ie_tipo_ordem_w				varchar(15);
cd_cond_pagto_w				bigint;
nr_seq_regra_trib_w			bigint;
ds_tributo_w				varchar(255);
ie_consistir_trib_w				varchar(1);
cont_w					bigint;
qt_dif_nf_oc_permitida_w			double precision;
qt_diferenca_w				double precision;
ie_emissao_maior_aprov_w			varchar(1);
dt_emissao_w				timestamp;
dt_aprovacao_w				timestamp;
cd_empresa_w				bigint := null;
cd_tipo_servico_w				varchar(100);
ie_exige_tipo_servico_w			varchar(1);
ie_data_es_menor_w			varchar(1);
ie_consiste_fornec_sem_conta_w		varchar(1);
cd_conta_contabil_w			varchar(20);
ie_mes_ant_mat_nao_estoque_w		varchar(1);
qt_itens_nf_estoque_w			bigint;
ie_venc_menor_data_atual_w			varchar(1);
qt_vencimento_calculo_w			bigint;
ie_consiste_lote_cont_fech_w		varchar(1) := 'S';
ie_data_contab_nf_w			varchar(15);
dt_referencia_cont_w			timestamp;
dt_referencia_cont_ww			varchar(25);
vl_documento_ref_moeda_w			double precision;
vl_despesa_doc_w				double precision  := 0;
nr_cot_compra_w				bigint;
nr_ordem_compra_ww			bigint;
ie_exige_transportadora_w			varchar(1);
nr_seq_transf_cme_w			bigint;
ie_tipo_frete_w				varchar(1);
ie_consiste_venc_alterado_w			varchar(1);
ie_venc_alterado_w			varchar(1);
ie_consiste_itens_negativos_w		varchar(1);
qt_itens_negativos_w			bigint;
ie_pessoa_fisica_w				varchar(10);
ie_exige_ordem_compra_w			varchar(15);
ie_consiste_doc_venc_w			varchar(1);
ie_possui_doc_venc_w			varchar(1);
ie_exige_oc_param_w			varchar(15);
vl_icms_st_w				double precision;
ie_exige_aval_w				varchar(1);
qt_aval_nota_w				smallint;
cd_perfil_w				bigint;
vl_liquido_abater_w				double precision;
qt_venc_menor_w				bigint;
qt_venc_menor_igual_w			bigint;
nr_seq_modelo_w				bigint;
nr_danfe_w				varchar(60);
ie_exige_danfe_w				varchar(1);
ie_consiste_uf_fornec_w			varchar(1);
ie_tipo_natureza_w				varchar(15);
sg_estado_w				varchar(15);
ie_nf_eletronica_w				varchar(1);
ie_nf_eletronica_op_w			operacao_nota.ie_nf_eletronica%type;
ie_exige_danfe_nfe_w			varchar(1);
ie_exige_aval_dinamica_w			varchar(1);
ie_param_412_w				varchar(1);
qt_parcelas_w				bigint;
qt_vencimentos_w				bigint;
ds_erro_trib_oper_w			varchar(255);
ie_calcula_classif_w			varchar(15);
nr_seq_classificacao_w			nota_fiscal.nr_seq_classificacao%type;
vl_conv_moeda_w				nota_fiscal.vl_conv_moeda%type;
ie_classe_tp_usuario_w			varchar(15);
ie_status_avaliacao_fornec_w		varchar(15);
qt_adiant_receb_w			bigint;
ie_exige_tit_receber_w			operacao_nota.ie_exige_tit_receber%type;
ie_exige_tit_pagar_w			operacao_nota.ie_exige_tit_pagar%type;
vl_adiant_receb_w			adiantamento.vl_adiantamento%type;
qt_existe_tit_pagar_w			bigint;
qt_existe_tit_rec_w				bigint;
ie_consiste_forma_pagto_w			varchar(15);
nr_seq_forma_pagto_w			bigint;
ie_conferir_venc_w				varchar(1);
ie_brasileiro_w				varchar(1);
ie_consiste_valor_frete_w		varchar(15);
ie_consiste_estab_w			varchar(1);
vl_tributos_item_w			double precision;
qt_dias_cal_entrada_saida_w		bigint;
vl_adiantamento_w				double precision;
ie_consiste_saldo_proj_w		varchar(1) := 'S';
nr_seq_proj_rec_w			projeto_recurso.nr_sequencia%type;
vl_comprometido_proj_rec_w		nota_fiscal_item.vl_unitario_item_nf%type;
vl_total_nf_w				nota_fiscal_item.vl_unitario_item_nf%type;
vl_saldo_projeto_w			projeto_recurso.vl_inicio_projeto%type;
cd_tributo_w				tributo.cd_tributo%type;
dt_vencimento_w				titulo_pagar.dt_vencimento_original%type;
ie_gerar_titulo_pagar_w			tributo.ie_gerar_titulo_pagar%type;

nr_contrato_w                       	bigint;
vl_total_contrato_w                      double precision;
vl_total_notas_w                        double precision;

vl_total_tit_pagar_liq_w	titulo_pagar.vl_titulo%type;
vl_inicio_projeto_w		projeto_recurso.vl_inicio_projeto%type;
vl_comprometido_w		projeto_recurso_saldo.vl_comprometido%type;
nr_seq_sub_proj_rec_w		projeto_recurso.nr_sequencia%type;
ie_param_25_w 				varchar(1) := 'N';
ie_considera_vl_compr_saldo_w		varchar(1) := 'N';

nr_item_oci_des_w		nota_fiscal_item.nr_item_oci%type;
nr_ordem_compra_desc_w		nota_fiscal_item.nr_ordem_compra%type;
vl_desconsiderar_ordem_w	projeto_recurso_saldo.vl_comprometido%type;
qt_item_nf_desc_w		nota_fiscal_item.qt_item_nf%type;
qt_material_ordem_desc_w	solic_compra_item.qt_material%type;
ie_ctb_online_w				ctb_param_lote_nf.ie_ctb_online%type;
qtd_cfdi_w                      bigint;
qt_tipo_relacao_w               bigint;
nr_seq_protocolo_w              nota_fiscal.nr_seq_protocolo%type;
nr_interno_conta_w              nota_fiscal.nr_interno_conta%type;
ie_tipo_nota_w					nota_fiscal.ie_tipo_nota%type;
ds_erro_w		varchar(1000);
ds_msg_vinculo_w varchar(2000);
qt_imp_nota_w		bigint;
vl_descontos_condicional_w nota_fiscal.vl_descontos_condicional%type;
dt_emissao_ww	nota_fiscal.dt_emissao%type;
ie_param_72_w bigint;
ie_nf_eletronica_uso_cfdi_w varchar(1);
ds_erro_cons_trib_imp_w		varchar(4000);

consist_clasif			boolean := false;

c01 CURSOR FOR
	SELECT	nr_item_nf
	from	nota_fiscal_item
	where	nr_sequencia	= nr_sequencia_p;

c02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	tributo_conta_pagar a
	where (coalesce(cd_estabelecimento, cd_estabelecimento_w)	= cd_estabelecimento_w)
	and	cd_empresa				= cd_empresa_w
	and	coalesce(cd_pessoa_fisica_w,'0')			= coalesce(a.cd_pessoa_fisica,coalesce(cd_pessoa_fisica_w,'0'))
	and	coalesce(cd_cgc_w,'0')				= coalesce(a.cd_pessoa_juridica,coalesce(cd_cgc_w,'0'))
	and	coalesce(cd_cond_pagto_w,'0')			= coalesce(a.cd_cond_pagto,coalesce(cd_cond_pagto_w,'0'))
	and	coalesce(cd_tipo_servico_w, '0')			= coalesce(a.cd_tipo_servico, coalesce(cd_tipo_servico_w,'0'))
	and	clock_timestamp() between coalesce(a.dt_inicio_vigencia, to_date('01/01/1500','dd/mm/yyyy')) and fim_dia(coalesce(a.dt_fim_vigencia, to_date('01/01/2999','dd/mm/yyyy')))
	and (SELECT max(x.ie_situacao) from tributo x where x.cd_tributo = a.cd_tributo) = 'A';

c03 CURSOR FOR
	SELECT	distinct
		nr_ordem_compra
	from	nota_fiscal_item
	where	nr_sequencia	= nr_sequencia_p
	and	(nr_ordem_compra IS NOT NULL AND nr_ordem_compra::text <> '');

c04 CURSOR FOR
	SELECT	distinct
		nr_cot_compra
	from	ordem_compra_item
	where	nr_ordem_compra	= nr_ordem_compra_ww
	and	(nr_cot_compra IS NOT NULL AND nr_cot_compra::text <> '');

c06 CURSOR FOR
	SELECT	a.cd_tributo
	from	tributo a,
		nota_fiscal_trib b
	where	a.cd_tributo 	= b.cd_tributo
	and	a.ie_venc_nf 	= 'E'
	and	b.nr_sequencia 	= nr_sequencia_p;WITH RECURSIVE cte AS (


c_incons_vinculo_nf CURSOR FOR
    SELECT regexp_substr(ds_msg_vinculo_w,'[^;]+', 1, level) msg

    (regexp_substr(ds_msg_vinculo_w, '[^;]+', 1, level) IS NOT NULL AND (regexp_substr(ds_msg_vinculo_w, '[^;]+', 1, level))::text <> '')   UNION ALL


c_incons_vinculo_nf CURSOR FOR
    SELECT regexp_substr(ds_msg_vinculo_w,'[^;]+', 1, level) msg
    
    (regexp_substr(ds_msg_vinculo_w, '[^;]+', 1, level) IS NOT NULL AND (regexp_substr(ds_msg_vinculo_w, '[^;]+', 1, level))::text <> '')  JOIN cte c ON ()

) SELECT * FROM cte;
;

BEGIN
select	count(*)
into STRICT	qt_venc_nf_w
from	nota_fiscal_venc a
where	a.nr_sequencia	= nr_sequencia_p;

select	cd_estabelecimento,
	cd_cgc_emitente,
	cd_cgc,
	coalesce(cd_pessoa_fisica,'0'),
	cd_serie_nf,
	nr_nota_fiscal,
	coalesce(nr_ordem_compra,0),
	cd_condicao_pagamento,
	nr_seq_modelo,
	nr_danfe,
	ie_nf_eletronica,
	nr_seq_classificacao,
	nr_seq_forma_pagto,
	nr_contrato,
	coalesce(nr_seq_protocolo,0),
	coalesce(nr_interno_conta,0),
	ie_tipo_nota,
	trunc(dt_emissao)
into STRICT	cd_estabelecimento_w,
	cd_cgc_emitente_w,
	cd_cgc_w,
	cd_pessoa_fisica_w,
	cd_serie_nf_w,
	nr_nota_fiscal_w,
	nr_ordem_compra_w,
	cd_cond_pagto_w,
	nr_seq_modelo_w,
	nr_danfe_w,
	ie_nf_eletronica_w,
	nr_seq_classificacao_w,
	nr_seq_forma_pagto_w,
	nr_contrato_w,
	nr_seq_protocolo_w,
	nr_interno_conta_w,
	ie_tipo_nota_w,
	dt_emissao_ww
from	nota_fiscal
where	nr_sequencia	= nr_sequencia_p;

select	max(cd_empresa)
into STRICT	cd_empresa_w
from	estabelecimento
where	cd_estabelecimento		= cd_estabelecimento_w;

select	obter_se_nota_entrada_saida(nr_sequencia_p)
into STRICT	ie_nota_entrada_saida_w
;

select	coalesce(max(ie_consist_nat_nf_uf_forn),'N')
into STRICT	ie_consiste_uf_fornec_w
from	parametro_compras
where	cd_estabelecimento	= cd_estabelecimento_w;

if (nr_ordem_compra_w > 0) then
	select 	ie_frete
	into STRICT	ie_tipo_frete_w
	from 	ordem_compra
	where 	nr_ordem_compra	= nr_ordem_compra_w;
end if;

cd_perfil_w	:= Obter_perfil_ativo;

select	substr(coalesce(obter_valor_param_usuario(40, 13, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'S'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 52, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 102, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 107, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'S'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 120, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 121, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	coalesce(obter_valor_param_usuario(40, 129, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),0),
	substr(coalesce(obter_valor_param_usuario(40, 131, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 130, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 138, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'S'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 139, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'S'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 113, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	(obter_valor_param_usuario(40, 166, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w))::numeric ,
	substr(coalesce(obter_valor_param_usuario(40, 175, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 183, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 216, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 239, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 254, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 264, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 272, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 295, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 312, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 317, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 321, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 336, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 396, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 412, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 420, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 426, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,15),
	substr(coalesce(obter_valor_param_usuario(40, 428, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 437, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 440, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_se_brasileiro(cd_pessoa_fisica_w),'S'),1,1),
	coalesce((obter_valor_param_usuario(40, 472, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w))::numeric ,0),
	substr(coalesce(obter_valor_param_usuario(40, 478, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	coalesce((obter_valor_param_usuario(40, 72, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w))::numeric ,90),
	substr(coalesce(obter_valor_param_usuario(40, 505, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1)
into STRICT	ie_exige_oc_param_w,
	ie_consiste_cpf_w,
	ie_bloqueia_mesmo_nr_serie_w,
	ie_permite_nf_sem_inspecao_w,
	ie_venc_menor_emissao_w,
	ie_permite_serie_inexistente_w,
	qt_dias_vencimento_w,
	ie_nf_oc_vencimento_w,
	ie_gera_venc_usuario_w,
	ie_permite_sem_rateio_w,
	ie_permite_sem_projeto_w,
	ie_consiste_venc_ent_saida_w,
	qt_dif_nf_oc_permitida_w,
	ie_emissao_maior_aprov_w,
	ie_bloqueia_mesmo_numero_w,
	ie_data_es_menor_w,
	ie_consiste_fornec_sem_conta_w,
	ie_mes_ant_mat_nao_estoque_w,
	ie_venc_menor_data_atual_w,
	ie_consiste_lote_cont_fech_w,
	ie_exige_transportadora_w,
	ie_consiste_venc_alterado_w,
	ie_consiste_itens_negativos_w,
	ie_consiste_doc_venc_w,
	ie_exige_aval_w,
	ie_exige_danfe_nfe_w,
	ie_param_412_w,
	ie_calcula_classif_w,
	ie_consiste_forma_pagto_w,
	ie_conferir_venc_w,
	ie_status_avaliacao_fornec_w,
	ie_consiste_valor_frete_w,
	ie_brasileiro_w,
	qt_dias_cal_entrada_saida_w,
	ie_consiste_saldo_proj_w,
	ie_param_72_w,
	ie_nf_eletronica_uso_cfdi_w
;

select 	coalesce(max(cd_pessoa_fisica),'X')
into STRICT 	ie_pessoa_fisica_w
from 	nota_fiscal
where 	(cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> '')
and	nr_sequencia = nr_sequencia_p;



if ((coalesce(philips_param_pck.get_cd_pais, 1) = 2) and (coalesce(Obter_Se_Nota_Entrada_Saida(nr_sequencia_p),'E') = 'S')
	and ((nr_seq_protocolo_w > 0) or (nr_interno_conta_w > 0))) then

	select count(*)
	into STRICT   qt_tipo_relacao_w
	from   fis_tipo_relacao
	where  nr_seq_nota = nr_sequencia_p;

	if (qt_tipo_relacao_w = 0) then

		CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(875174),
		'S','N',
		wheb_mensagem_pck.get_texto(296181),
		nm_usuario_p,'S');


	end if;

end if;

if (nr_contrato_w IS NOT NULL AND nr_contrato_w::text <> '') then

select coalesce(vl_total_contrato,0)
into STRICT   vl_total_contrato_w
from   contrato
where  nr_sequencia =  nr_contrato_w;

select coalesce(sum(vl_total_nota),0)
into STRICT   vl_total_notas_w
from   nota_fiscal
where  nr_contrato = nr_contrato_w;

	if (vl_total_contrato_w > 0 AND vl_total_notas_w > vl_total_contrato_w) then

		CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(444961),
		'N','N',
		wheb_mensagem_pck.get_texto(445017),
		nm_usuario_p,'S');

	end if;
end if;


if (coalesce(nr_seq_forma_pagto_w::text, '') = '') and
	((ie_consiste_forma_pagto_w = 'E' AND ie_nota_entrada_saida_w = 'E') or
	 (ie_consiste_forma_pagto_w = 'S' AND ie_nota_entrada_saida_w = 'S') or (ie_consiste_forma_pagto_w = 'T')) then

	ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300471) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300472),
		'S','N',
		wheb_mensagem_pck.get_texto(300473),
		nm_usuario_p,'S');
end if;

if (ie_conferir_venc_w = 'S') then

	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal_venc
	where	nr_sequencia = nr_sequencia_p
	and	coalesce(ie_conferido,'N') = 'N'  LIMIT 1;

	if (qt_existe_w > 0) then

		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300474) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300475),
			'S','N',
			wheb_mensagem_pck.get_texto(300476),
			nm_usuario_p,'S');
	end if;
end if;

if (ie_exige_aval_w <> 'N') and (ie_nota_entrada_saida_w = 'E') then
	begin
	if (ie_exige_aval_w = 'D') then
		select	coalesce(ie_exige_aval_dinamica,'N')
		into STRICT	ie_exige_aval_dinamica_w
		from 	operacao_nota c,
			nota_fiscal a
		where	a.cd_operacao_nf = c.cd_operacao_nf
		and	a.nr_sequencia = nr_sequencia_p;
	end if;

	if (ie_exige_aval_w = 'S') or (ie_exige_aval_w = 'D' and ie_exige_aval_dinamica_w = 'S') or (ie_exige_aval_w = 'O' and nr_ordem_compra_w > 0) then
		begin
		select	count(*)
		into STRICT	qt_aval_nota_w
		from	avf_resultado
		where 	nr_seq_nota = nr_sequencia_p
		and	((ie_status_avaliacao_fornec_w = 'R') or
			(ie_status_avaliacao_fornec_w = 'L' AND dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') or
			(ie_status_avaliacao_fornec_w = 'A' AND dt_aprovacao IS NOT NULL AND dt_aprovacao::text <> ''));

		if (qt_aval_nota_w = 0) then
			begin
			ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300477) || chr(13) || chr(10),1,255);
			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300478),
				'S','N',
				wheb_mensagem_pck.get_texto(300479),
				nm_usuario_p,'S');
			end;
		end if;
		end;
	end if;
	end;
end if;

if (ie_consiste_fornec_sem_conta_w = 'S') and (ie_nota_entrada_saida_w = 'E') and (ie_pessoa_fisica_w = 'X')then

	select	coalesce(max(cd_conta_contabil),'0')
	into STRICT	cd_conta_contabil_w
	from	pessoa_juridica
	where	cd_cgc = cd_cgc_emitente_w;

	if (cd_conta_contabil_w = '0') then

		select	coalesce(max(cd_conta_contabil),'0')
		into STRICT	cd_conta_contabil_w
		from	pessoa_jur_conta_cont
		where	cd_cgc = cd_cgc_emitente_w;

		if (cd_conta_contabil_w = '0') then
			ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300480) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300481),
				'S','N',
				wheb_mensagem_pck.get_texto(300482),
				nm_usuario_p,'S');

		end if;
	end if;
end if;

if (nr_seq_modelo_w > 0) then

	select	coalesce(ie_exige_danfe,'N')
	into STRICT	ie_exige_danfe_w
	from	modelo_nota_fiscal
	where	nr_sequencia = nr_seq_modelo_w;

	if (ie_exige_danfe_w = 'S') and (coalesce(nr_danfe_w::text, '') = '') then

		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300483) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300483),
				'S','N',
				wheb_mensagem_pck.get_texto(300484),
				nm_usuario_p,'S');

	end if;
end if;

if (ie_consiste_doc_venc_w = 'S') and (ie_nota_entrada_saida_w = 'E') and (ie_pessoa_fisica_w = 'X') then

	select	obter_se_existe_doc_venc_NF(cd_cgc_emitente_w, nr_sequencia_p)
	into STRICT	ie_possui_doc_venc_w
	;

	if (ie_possui_doc_venc_w = 'S') then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300485) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300486),
				'S','N',
				wheb_mensagem_pck.get_texto(300487),
				nm_usuario_p,'S');
	end if;
end if;


if (ie_consiste_fornec_sem_conta_w = 'S') and (ie_nota_entrada_saida_w = 'E') and (ie_pessoa_fisica_w <> 'X')then

	select	coalesce(max(cd_conta_contabil),'0')
	into STRICT	cd_conta_contabil_w
	from	pessoa_fisica_conta_ctb
	where	cd_pessoa_fisica = ie_pessoa_fisica_w;

	if (cd_conta_contabil_w = '0') then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300480) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300481),
				'S','N',
				wheb_mensagem_pck.get_texto(300482),
				nm_usuario_p,'S');

	end if;
end if;


if (ie_exige_transportadora_w = 'S') and (ie_nota_entrada_saida_w = 'E') and (ie_tipo_frete_w = 'F')then
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal_transportadora
	where	nr_seq_nota = nr_sequencia_p;


	if (qt_existe_w = 0) then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300489) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300490),
			'S','N',
			wheb_mensagem_pck.get_texto(300492),
			nm_usuario_p,'S');

	end if;
end if;

qt_existe_w:= 0;

if (ie_nota_entrada_saida_w = 'E') and (cd_pessoa_fisica_w <> '0') then
	begin
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal
	where	ie_situacao = 1
	and	(dt_atualizacao_estoque IS NOT NULL AND dt_atualizacao_estoque::text <> '')
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	cd_cgc_emitente	= cd_cgc_emitente_w
	and	cd_cgc		= cd_cgc_w
	and	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	cd_serie_nf	= cd_serie_nf_w
	and	nr_nota_fiscal	= nr_nota_fiscal_w;
	end;
else
	begin
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal
	where	ie_situacao = 1
	and	(dt_atualizacao_estoque IS NOT NULL AND dt_atualizacao_estoque::text <> '')
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	cd_cgc_emitente	= cd_cgc_emitente_w
	and	cd_cgc		= cd_cgc_w
	and	cd_serie_nf	= cd_serie_nf_w
	and	nr_nota_fiscal	= nr_nota_fiscal_w;
	end;
end if;

ie_consiste_estab_w	:= substr(coalesce(obter_valor_param_usuario(40, 277, Obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'S'),1,1);

select	trunc(dt_emissao, 'dd')
into STRICT	dt_emissao_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

if (ie_bloqueia_mesmo_nr_serie_w = 'S') and (qt_existe_w > 0) then
	begin
	ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(159135) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(159135),
		'S','N',
		wheb_mensagem_pck.get_texto(300494),
		nm_usuario_p,'S');

	end;
elsif (ie_bloqueia_mesmo_numero_w = 'S') then
	begin
	
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal
	where	ie_situacao = 1
	and	(dt_atualizacao_estoque IS NOT NULL AND dt_atualizacao_estoque::text <> '')
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	cd_cgc_emitente	= cd_cgc_emitente_w
	and	cd_cgc		= cd_cgc_w
	and	nr_nota_fiscal	= nr_nota_fiscal_w;
	
	if (qt_existe_w > 0) then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(159113) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(159113),
			'S','N',
			wheb_mensagem_pck.get_texto(300496),
			nm_usuario_p,'S');
	end if;
	end;
elsif (ie_bloqueia_mesmo_nr_serie_w = 'P') then
	begin
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal
	where (ie_consiste_estab_w = 'N' or cd_estabelecimento = cd_estabelecimento_w)
	and	trunc(dt_emissao,'yyyy') = trunc(dt_emissao_w,'yyyy')
	and	cd_cgc_emitente = cd_cgc_emitente_w
	and	cd_serie_nf = cd_serie_nf_w
	and	nr_nota_fiscal = nr_nota_fiscal_w
	and	ie_situacao = '1'
	and	nr_sequencia <> nr_sequencia_p
	and	(dt_atualizacao_estoque IS NOT NULL AND dt_atualizacao_estoque::text <> '');
	if (qt_existe_w > 0) then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(159135) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(159135),
			'S','N',
			wheb_mensagem_pck.get_texto(300494),
			nm_usuario_p,'S');
	end if;
	end;
elsif (ie_bloqueia_mesmo_numero_w = 'P') then
	begin
	select count(*)
	into STRICT qt_existe_w
	from nota_fiscal
	where (ie_consiste_estab_w = 'N' or cd_estabelecimento = cd_estabelecimento_w)
	and trunc(dt_emissao,'yyyy') = trunc(dt_emissao_w,'yyyy')
	and cd_cgc_emitente = cd_cgc_emitente_w
	and nr_nota_fiscal = nr_nota_fiscal_w
	and ie_situacao = '1'
	and nr_sequencia <> nr_sequencia_p
	and (dt_atualizacao_estoque IS NOT NULL AND dt_atualizacao_estoque::text <> '');
	if (qt_existe_w > 0) then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(159113) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(159113),
			'S','N',
			wheb_mensagem_pck.get_texto(300496),
			nm_usuario_p,'S');
	end if;
	end;
end if;

if (ie_permite_serie_inexistente_w = 'N') and (coalesce(obter_se_nota_entrada_saida(nr_sequencia_p),'N') = 'S') then
	select	count(*)
	into STRICT	qt_existe_w
	from	serie_nota_fiscal
	where	ie_situacao = 'A'
	and	cd_serie_nf = cd_serie_nf_w;

	if (qt_existe_w =0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180067);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300497),
			'S','N',
			wheb_mensagem_pck.get_texto(300498),
			nm_usuario_p,'S');

	end if;
end if;

select	sum(coalesce(vl_liquido,0))
into STRICT	vl_total_item_w
from 	nota_fiscal_item
where 	nr_sequencia	= nr_sequencia_p;

begin
select	dt_mesano_vigente,
	ie_data_contab_nf
into STRICT	dt_mesano_vigente_w,
	ie_data_contab_nf_w
from	parametro_estoque
where	cd_estabelecimento = cd_estabelecimento_w;
exception when no_data_found then
	ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300499) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300499),
		'S','N',
		wheb_mensagem_pck.get_texto(300500),
		nm_usuario_p,'S');
end;

begin
select	a.vl_total_nota,
	a.vl_mercadoria,
	a.vl_despesa_acessoria,
	obter_valor_icmsst_nf(a.nr_sequencia) vl_icms_st,
	a.vl_seguro,
	a.vl_frete,
	a.vl_ipi,
	a.vl_descontos,
	a.vl_descontos_condicional,
	a.dt_entrada_saida,
	a.cd_operacao_nf,
	b.ie_forma_pagamento,
	a.cd_natureza_operacao,
	c.ie_operacao_fiscal,
	a.cd_tipo_servico,
	coalesce(c.ie_exige_tipo_servico, 'N'),
	coalesce(c.ie_exige_anexo,'N'),
	coalesce(ie_exige_ordem_compra,'S'),
	coalesce(c.ie_exige_tit_receber, 'N'),
	coalesce(c.ie_exige_tit_pagar,'N'),
	coalesce(c.ie_nf_eletronica,'N'),
	a.vl_conv_moeda
into STRICT	vl_total_nota_w,
	vl_mercadoria_w,
	vl_despesa_acessoria_w,
	vl_icms_st_w,
	vl_seguro_w,
	vl_frete_w,
	vl_ipi_w,
	vl_descontos_w,
	vl_descontos_condicional_w,
	dt_entrada_saida_w,
	cd_operacao_nf_w,
	ie_forma_pagamento_w,
	cd_natureza_operacao_w,
	ie_operacao_fiscal_w,
	cd_tipo_servico_w,
	ie_exige_tipo_servico_w,
	ie_exige_anexo_w,
	ie_exige_ordem_compra_w,
	ie_exige_tit_receber_w,
	ie_exige_tit_pagar_w,
	ie_nf_eletronica_op_w,
	vl_conv_moeda_w
from 	operacao_nota c,
	condicao_pagamento b,
	nota_fiscal a
where	a.cd_condicao_pagamento	= b.cd_condicao_pagamento
and	a.cd_operacao_nf		= c.cd_operacao_nf
and	a.nr_sequencia 		= nr_sequencia_p;
exception
	when others then
		ds_erro_nota_p 	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300501) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300501),
			'S','N',
			wheb_mensagem_pck.get_texto(300502),
			nm_usuario_p,'S');

end;

select	coalesce(max(ie_tipo_natureza),'X')
into STRICT	ie_tipo_natureza_w
from	natureza_operacao
where	cd_natureza_operacao = coalesce(cd_natureza_operacao_w,0);

if (ie_consiste_uf_fornec_w = 'S') and (cd_pessoa_fisica_w = '0') and (ie_tipo_natureza_w in ('D','F')) and
	((ie_nota_entrada_saida_w = 'E' AND cd_cgc_emitente_w IS NOT NULL AND cd_cgc_emitente_w::text <> '') or
	(ie_nota_entrada_saida_w = 'S' AND cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '')) then
	begin

	select	coalesce(sg_estado,'X')
	into STRICT	sg_estado_w
	from	pessoa_juridica a
	where	(ie_nota_entrada_saida_w = 'E' AND a.cd_cgc = cd_cgc_emitente_w)
	or	(ie_nota_entrada_saida_w = 'S' AND a.cd_cgc = cd_cgc_w);

	if (sg_estado_w <> 'X') then
		begin

		select	count(*)
		into STRICT	qt_existe_w
		from	pessoa_juridica a,
			estabelecimento_v b
		where	a.cd_cgc = b.cd_cgc
		and	b.cd_estabelecimento = cd_estabelecimento_w
		and	((ie_tipo_natureza_w = 'D' AND a.sg_estado = sg_estado_w) or
			(ie_tipo_natureza_w = 'F' AND a.sg_estado <> sg_estado_w));

		if (qt_existe_w = 0) then
			begin

			ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300503) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300504),
				'S','N',
				wheb_mensagem_pck.get_texto(300505),
				nm_usuario_p,'S');

			end;
		end if;

		end;
	end if;

	end;
end if;

if (coalesce(vl_frete_w,0) = 0) and
	((ie_consiste_valor_frete_w = 'E' AND ie_nota_entrada_saida_w = 'E') or
	 (ie_consiste_valor_frete_w = 'S' AND ie_nota_entrada_saida_w = 'S') or (ie_consiste_valor_frete_w = 'T')) then

	ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300506) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300507),
		'S','N',
		wheb_mensagem_pck.get_texto(300508),
		nm_usuario_p,'S');
end if;

if ((coalesce(philips_param_pck.get_cd_pais, 1) = 2) and (coalesce(Obter_Se_Nota_Entrada_Saida(nr_sequencia_p),'E') = 'S')) then

	select count(*)
	into STRICT   qtd_cfdi_w
	from   fis_uso_cfdi
	where  nr_seq_nota = nr_sequencia_p;
	
	if (qtd_cfdi_w = 0 and (ie_nf_eletronica_uso_cfdi_w = 'N' or (ie_nf_eletronica_uso_cfdi_w = 'S' and ie_nf_eletronica_op_w != 'N'))) then

		CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(874242),
		'S','N',
		wheb_mensagem_pck.get_texto(296181),
		nm_usuario_p,'S');
	end if;

end if;

open C03;
loop
fetch C03 into
	nr_ordem_compra_ww;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin

	open C04;
	loop
	fetch C04 into
		nr_cot_compra_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin

		select	coalesce(sum(vl_documento_ref_moeda),0)
		into STRICT	vl_documento_ref_moeda_w
		from	cot_doc_importacao
		where	nr_cot_compra = nr_cot_compra_w
		and	coalesce(obter_dados_tit_pagar(nr_titulo_pagar,'S'),'X') <> 'C';

		vl_despesa_doc_w := vl_despesa_doc_w + vl_documento_ref_moeda_w;

		end;
	end loop;
	close C04;

	end;
end loop;
close C03;

if (coalesce(cd_natureza_operacao_w,0) > 0) then
	select	coalesce(max(ie_entrada_saida),'N')
	into STRICT	ie_entrada_saida_w
	from	natureza_operacao
	where	cd_natureza_operacao	= cd_natureza_operacao_w;

	if (ie_entrada_saida_w <> ie_operacao_fiscal_w) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300509) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300509),
			'S','N',
			wheb_mensagem_pck.get_texto(300510),
			nm_usuario_p,'S');

	end if;
end if;

if (ie_entrada_saida_w = 'E') and (trunc(clock_timestamp() - ie_param_72_w) > dt_emissao_ww) then

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(145585,'DT_EMISSAO='||ie_param_72_w),
		'S','N',
		wheb_mensagem_pck.get_texto(145585,'DT_EMISSAO='||ie_param_72_w),
		nm_usuario_p,'S');

end if;

if	(((ie_nf_eletronica_w = 'S') or (ie_nf_eletronica_op_w in ('S','V'))) and (ie_operacao_fiscal_w = 'E') and (coalesce(nr_danfe_w::text, '') = '') and (ie_exige_danfe_nfe_w = 'S')) then
	begin

	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300509) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300511),
		'S','N',
		wheb_mensagem_pck.get_texto(300512),
		nm_usuario_p,'S');

	end;
end if;

if (coalesce(ie_exige_tipo_servico_w, 'N') = 'S') and (coalesce(cd_tipo_servico_w, '0') = '0') then
	ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300513) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(	nr_sequencia_p,
					wheb_mensagem_pck.get_texto(300513),
					'S',
					'N',
					wheb_mensagem_pck.get_texto(300513),
					nm_usuario_p,
					'S');
end if;

/*No cadastro 'Operacao da Nota' campo 'Exige anexo na Nota fiscal no momento de calcular a nota fiscal'*/

if (ie_exige_anexo_w = 'S') then
	begin
	select	count(*)
	into STRICT	qt_existe_anexo_w
	from	nota_fiscal_anexo
	where	nr_seq_nota	= nr_sequencia_p;

	if (qt_existe_anexo_w = 0) then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300503) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(	nr_sequencia_p,
						wheb_mensagem_pck.get_texto(300517),
						'S',
						'N',
						wheb_mensagem_pck.get_texto(300520),
						nm_usuario_p,
						'S');
	end if;
	end;
end if;

/*No cadastro 'Operacao da Nota' campo 'Exige titulo a pagar'*/

if (ie_exige_tit_pagar_w = 'S') then
	select	count(1)
	into STRICT	qt_existe_tit_pagar_w
	from	titulo_pagar	a
	where	a.nr_seq_nota_fiscal	= nr_sequencia_p  LIMIT 1;

	if (qt_existe_tit_pagar_w = 0) then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300521) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(	nr_sequencia_p,
						wheb_mensagem_pck.get_texto(300521),
						'S',
						'N',
						wheb_mensagem_pck.get_texto(300524),
						nm_usuario_p,
						'S');
	end if;
end if;

/*No cadastro 'Operacao da Nota' campo 'Exige titulo a receber'*/

if (ie_exige_tit_receber_w = 'S') then
	select	count(1)
	into STRICT	qt_existe_tit_rec_w
	from	titulo_receber	a
	where	a.nr_seq_nf_saida	= nr_sequencia_p  LIMIT 1;

	if (qt_existe_tit_rec_w = 0) then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300526) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(	nr_sequencia_p,
						wheb_mensagem_pck.get_texto(300526),
						'S',
						'N',
						wheb_mensagem_pck.get_texto(300527),
						nm_usuario_p,
						'S');
	end if;
end if;

/*  Consistir o parametro 113 da funcao nota Fiscal   */

select	cd_condicao_pagamento
into STRICT	cd_condicao_pagamento_w
from	nota_fiscal
where	nr_sequencia	= nr_sequencia_p;

select	ie_consiste_vencto_nota
into STRICT	ie_consiste_vencto_nota_w
from	condicao_pagamento
where	cd_condicao_pagamento	= cd_condicao_pagamento_w;

if (ie_emissao_maior_aprov_w = 'N') and (nr_ordem_compra_w > 0) then

	select	trunc(dt_aprovacao,'dd')
	into STRICT	dt_aprovacao_w
	from	ordem_compra
	where	nr_ordem_compra = nr_ordem_compra_w;

	if (dt_emissao_w < dt_aprovacao_w) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300528) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300530),
			'S','N',
			wheb_mensagem_pck.get_texto(300532),
			nm_usuario_p,'S');

	end if;
end if;




if (ie_consiste_venc_ent_saida_w in ('S','D')) then
	begin

	select	count(*)
	into STRICT	qt_venc_menor_w
	from	nota_fiscal b,
		nota_fiscal_venc a
	where	a.nr_sequencia = b.nr_sequencia
	and	a.nr_sequencia = nr_sequencia_p
	and	a.dt_vencimento < TRUNC(b.dt_entrada_saida,'dd');

	if (ie_consiste_venc_ent_saida_w = 'S') or
		(ie_consiste_venc_ent_saida_w = 'D' AND ie_consiste_vencto_nota_w = 'S') then
		begin

		if (qt_venc_menor_w > 0) then
			ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300533) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300534),
				'S','N',
				wheb_mensagem_pck.get_texto(300536),
				nm_usuario_p,'S');
		end if;

		end;
	end if;

	end;
elsif (ie_consiste_venc_ent_saida_w in ('C','R')) then
	begin

	select	count(*)
	into STRICT	qt_venc_menor_igual_w
	from	nota_fiscal b,
		nota_fiscal_venc a
	where	a.nr_sequencia = b.nr_sequencia
	and	a.nr_sequencia = nr_sequencia_p
	and	trunc(a.dt_vencimento) <= TRUNC(b.dt_entrada_saida,'dd');

	if (ie_consiste_venc_ent_saida_w = 'C') or
		(ie_consiste_venc_ent_saida_w = 'R' AND ie_consiste_vencto_nota_w = 'S') then
		begin

		if (qt_venc_menor_igual_w > 0) then
			ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300533) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300534),
				'S','N',
				wheb_mensagem_pck.get_texto(300536),
				nm_usuario_p,'S');
		end if;

		end;
	end if;

	end;
end if;

/* Consistir se ha data de vencimento inferior a data que a nota sera calculada (data atual) */

if (ie_venc_menor_data_atual_w = 'S') then
	begin

	select	count(*)
	into STRICT	qt_vencimento_calculo_w
	from	nota_fiscal_venc a
	where	a.nr_sequencia = nr_sequencia_p
	and	a.dt_vencimento < TRUNC(clock_timestamp(),'dd');

	if (qt_vencimento_calculo_w > 0) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300537) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300537),
			'S','N',
			wheb_mensagem_pck.get_texto(300536),
			nm_usuario_p,'S');
	end if;

	end;
end if;

select	count(*)
into STRICT	qt_existe_w
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p
and	coalesce(nr_seq_inspecao::text, '') = '';

if (ie_permite_nf_sem_inspecao_w = 'D') and (ie_entrada_saida_w = 'E') and (qt_existe_w > 0) then
	select	coalesce(ie_exige_inspecao_receb,'S')
	into STRICT	ie_exige_inspecao_receb_w
	from	operacao_nota
	where	cd_operacao_nf = cd_operacao_nf_w;

	if (ie_exige_inspecao_receb_w = 'S') then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300539) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300539),
			'S','N',
			wheb_mensagem_pck.get_texto(300541),
			nm_usuario_p,'S');
	end if;
end if;

select	coalesce(max(b.ie_consignado),'0')
into STRICT	ie_consignado_w
from	operacao_estoque b,
	operacao_nota a
where	a.cd_operacao_estoque	= b.cd_operacao_estoque
and	a.cd_operacao_nf 	= cd_operacao_nf_w;

ie_consig_w		:= (ie_consignado_w in (1,2,3,5,8)) and (vl_total_item_w = 0);

select	coalesce(sum(coalesce(vl_vencimento,0)),0)
into STRICT	vl_parcelas_w
from	nota_fiscal_venc
where	nr_sequencia = nr_sequencia_p;

select	coalesce(sum(coalesce(vl_vinculado,0)),0)
into STRICT	vl_adiantamento_w
from	nota_fiscal_adiant_pago
where	nr_sequencia_nf = nr_sequencia_p;

/* Consiste Data Vencimento < Data Emissao */

if (ie_venc_menor_emissao_w = 'N') then
	select	count(*)
	into STRICT	qt_vencimento_w
	from	nota_fiscal b,
		nota_fiscal_venc a
	where	a.nr_sequencia = b.nr_sequencia
	and	a.nr_sequencia = nr_sequencia_p
	and	trunc(a.dt_vencimento, 'dd') < trunc(b.dt_emissao, 'dd');
	if (qt_vencimento_w > 0) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300542) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300542),
			'S','N',
			wheb_mensagem_pck.get_texto(300543),
			nm_usuario_p,'S');
	end if;
end if;


select	count(*)
into STRICT	qt_existe_w
from	operacao_nota_trib
where	cd_operacao_nf = cd_operacao_nf_w;

if (qt_existe_w > 0) then
	ds_erro_trib_oper_w := consiste_tributo_operacao_nf(nr_sequencia_p, cd_operacao_nf_w, nm_usuario_p, ds_erro_trib_oper_w);

	if (coalesce(ds_erro_trib_oper_w,'X') <> 'X') then
		ds_erro_nota_p := substr(ds_erro_nota_p || ds_erro_trib_oper_w || chr(13) || chr(10),1,255);
	end if;
end if;


select	count(*)
into STRICT	qt_existe_w
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p
and	(nr_ordem_compra IS NOT NULL AND nr_ordem_compra::text <> '');

if (coalesce(nr_ordem_compra_w,0) > 0) then
	select	coalesce(max(ie_tipo_ordem),'N')
	into STRICT	ie_tipo_ordem_w
	from	ordem_compra
	where	nr_ordem_compra = nr_ordem_compra_w;
end if;

if (qt_dif_nf_oc_permitida_w IS NOT NULL AND qt_dif_nf_oc_permitida_w::text <> '') and (qt_existe_w > 0) then

	if (ie_tipo_ordem_w <> 'T') then

		select	obter_vl_itens_ordem_nota(nr_sequencia_p)
		into STRICT	vl_total_ordem_w
		;

		vl_total_nota_ww := coalesce(vl_total_nota_w,0);
		qt_diferenca_w	:= coalesce(vl_total_nota_ww,0) - coalesce(vl_total_ordem_w,0);

		if (qt_diferenca_w > qt_dif_nf_oc_permitida_w) then
			if (vl_conv_moeda_w IS NOT NULL AND vl_conv_moeda_w::text <> '') and (vl_conv_moeda_w > 0) then
				vl_total_ordem_ww := vl_total_ordem_w * vl_conv_moeda_w;
				qt_diferenca_w	:= coalesce(vl_total_nota_ww,0) - coalesce(vl_total_ordem_ww,0);
			end if;
		end if;

		if (qt_diferenca_w > qt_dif_nf_oc_permitida_w) then
			ds_erro_nota_p := substr(ds_erro_nota_p ||
				wheb_mensagem_pck.get_texto(300544,'QT_DIFERENCA='||campo_mascara(qt_diferenca_w,4)) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300545,'QT_DIFERENCA='||campo_mascara(qt_diferenca_w,4)),
				'S','N',
				wheb_mensagem_pck.get_texto(300546),
				nm_usuario_p,'S');
		end if;
	end if;
end if;

if (ie_exige_oc_param_w = 'P') and (ie_exige_ordem_compra_w = 'S') then

	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal_item
	where	nr_sequencia = nr_sequencia_p
	and	coalesce(nr_ordem_compra::text, '') = '';

	if (qt_existe_w > 0) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300548) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300548),
			'S','N',
			wheb_mensagem_pck.get_texto(300549),
			nm_usuario_p,'S');

	end if;
end if;

if (ie_exige_oc_param_w = 'P') and (ie_exige_ordem_compra_w = 'P') then

	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal_item
	where	nr_sequencia = nr_sequencia_p
	and	coalesce(nr_ordem_compra::text, '') = ''
	and	obter_se_material_padronizado(cd_estabelecimento_w, cd_material) = 'S';

	if (qt_existe_w > 0) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300550) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300550),
			'S','N',
			wheb_mensagem_pck.get_texto(300549),
			nm_usuario_p,'S');
	end if;
end if;

/* Consiste Data Vencimento menor que x Dias. Depende parametro[129]*/

if (coalesce(qt_dias_vencimento_w, 0) > 0) then
	select	count(*)
	into STRICT	qt_vencimento_w
	from	nota_fiscal_venc
	where	nr_sequencia	= nr_sequencia_p
	and	trunc(dt_vencimento, 'dd') < trunc(obter_dia_util_periodo(cd_estabelecimento_w, clock_timestamp(), qt_dias_vencimento_w),'dd');

	if	((qt_vencimento_w > 0) and (coalesce(ie_devolucao_integracao_p, 'N') = 'N')) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300553,'QT_DIAS_VENCIMENTO='||qt_dias_vencimento_w) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300554,'QT_DIAS_VENCIMENTO='||qt_dias_vencimento_w),
			'S','N',
			wheb_mensagem_pck.get_texto(300555),
			nm_usuario_p,'S');

	end if;
end if;

/*  Consiste se existe vencimento na NF quando parametro 131 setado para 'S'*/

if (coalesce(ie_gera_venc_usuario_w,'N') = 'S') and (coalesce(qt_venc_nf_w,0) = 0) and (coalesce(ie_devolucao_integracao_p, 'N') = 'S') 	then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300557) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300557),
		'S','N',
		wheb_mensagem_pck.get_texto(300558),
		nm_usuario_p,'S');
end if;

SELECT	COUNT(*)
into STRICT	qt_itens_nf_estoque_w
FROM	nota_fiscal a,
	nota_fiscal_item b,
	material c
WHERE	a.nr_sequencia = b.nr_sequencia
AND	b.cd_material = c.cd_material
and	c.ie_tipo_material <> 4
AND	a.nr_sequencia = nr_sequencia_p;

/* Consiste Data Vigente */

if (dt_entrada_saida_w < dt_mesano_vigente_w) and
	((ie_mes_ant_mat_nao_estoque_w = 'N') or (qt_itens_nf_estoque_w > 0)) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(145633) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(145633),
		'S','N',
		wheb_mensagem_pck.get_texto(145633),
		nm_usuario_p,'S');
end if;

/* Consiste Data Saida > Atual */

if (trunc(dt_entrada_saida_w,'dd') > trunc(clock_timestamp(),'dd')) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300561) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300561),
		'S','N',
		wheb_mensagem_pck.get_texto(300561),
		nm_usuario_p,'S');

end if;
/* Consiste Data Saida e menor que a data atual */

if (ie_data_es_menor_w = 'N') and (trunc(dt_entrada_saida_w,'dd') < trunc(clock_timestamp() - coalesce(qt_dias_cal_entrada_saida_w,0),'dd')) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_Texto(300562, 'QT_DIAS_W='||coalesce(qt_dias_cal_entrada_saida_w,0)),1,255); /*A data de entrada/saida nao pode ser menor que #@QT_DIAS_W#@ dia(s). Verifique os parametros [216] e [472].*/
	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300563,'QT_DIAS_W='||coalesce(qt_dias_cal_entrada_saida_w,0)), /*A data de entrada/saida nao pode ser menor que #@QT_DIAS_W#@ dia(s).*/
		'S','N',
		wheb_mensagem_pck.get_texto(300564), /*Verifique os parametros [216] e [472].*/
		nm_usuario_p,'S');
end if;

if (ie_consiste_lote_cont_fech_w = 'S') then

	select	CASE WHEN ie_data_contab_nf_w='ES' THEN 	dt_entrada_saida WHEN ie_data_contab_nf_w='ATU' THEN 	dt_atualizacao WHEN ie_data_contab_nf_w='EST' THEN 	clock_timestamp() WHEN ie_data_contab_nf_w='OPE' THEN 	CASE WHEN obter_regra_contab_nf_operacao(nr_sequencia)='ES' THEN 	dt_entrada_saida WHEN obter_regra_contab_nf_operacao(nr_sequencia)='ATU' THEN 	dt_atualizacao WHEN obter_regra_contab_nf_operacao(nr_sequencia)='EST' THEN 	clock_timestamp()  ELSE dt_emissao END   ELSE dt_emissao END
	into STRICT	dt_referencia_cont_w
	from	nota_fiscal
	where	nr_sequencia = nr_sequencia_p;

	if (dt_referencia_cont_w IS NOT NULL AND dt_referencia_cont_w::text <> '') then

		if (dt_referencia_cont_w = trunc(dt_referencia_cont_w)) then /*significa que nao tem hora*/
			dt_referencia_cont_w := to_date(to_char(dt_referencia_cont_w, 'dd/mm/yyyy') || ' 00:00:01','dd/mm/yyyy hh24:mi:ss');
		end if;

		select	count(*)
		into STRICT	qt_existe_w
		from	lote_contabil a
		where	((a.cd_tipo_lote_contabil = 2 AND ie_nota_entrada_saida_w = 'E') or
			(a.cd_tipo_lote_contabil = 51 AND ie_nota_entrada_saida_w = 'S'))
		and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '')
		and	a.cd_estabelecimento = cd_estabelecimento_w
		and	exists (	SELECT	1
				from	movimento_contabil y
				where	y.nr_lote_contabil	= a.nr_lote_contabil) /*Matheus OS 402111*/
		and exists (
			SELECT	1
			from	lote_contabil_parametro x
			where	a.nr_lote_contabil = x.nr_lote_contabil
			and	to_date(to_char(dt_referencia_cont_w,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') between(select	y.dt_parametro
				from	lote_contabil_parametro y
				where	y.nr_lote_contabil	= x.nr_lote_contabil
				and	y.nr_seq_parametro	= 1) and (select	y.dt_parametro
				from	lote_contabil_parametro y
				where	y.nr_lote_contabil	= x.nr_lote_contabil
				and	y.nr_seq_parametro	= 2));

		if (qt_existe_w > 0) then
			ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300567) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300567),
				'S','N',
				wheb_mensagem_pck.get_texto(300568),
				nm_usuario_p,'S');

		end if;
	end if;
end if;

/* Consiste se existe CPF na PF Parametro 52 */


/* Matheus OS 49619 em 05/02/2007 */

if (ie_brasileiro_w = 'S') and --aqui
	(ie_consiste_cpf_w = 'S') and (cd_pessoa_fisica_w <> '0') then
	select	coalesce(max(nr_cpf),'X')
	into STRICT	nr_cpf_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_w;

	if (nr_cpf_w = 'X') then
		ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300570) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300570),
			'S','N',
			wheb_mensagem_pck.get_texto(300572),
			nm_usuario_p,'S');
	end if;
end if;

/* Consiste Parcelas */

if (ie_forma_pagamento_w <> 1) and (vl_parcelas_w = 0) and (not ie_consig_w) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300557) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300557),
		'S','N',
		wheb_mensagem_pck.get_texto(300573),
		nm_usuario_p,'S');
end if;

select	coalesce(sum(a.vl_liquido),0)
into STRICT	vl_liquido_abater_w
from	nota_fiscal_item a,
	natureza_operacao b
where	a.cd_natureza_operacao = b.cd_natureza_operacao
and	a.nr_sequencia = nr_sequencia_p
and	(((b.ie_entrada_saida = 'E') and (coalesce(b.ie_integra_contas_pagar,'S') = 'N')) or
	 ((b.ie_entrada_saida = 'S') and (coalesce(b.ie_integra_contas_receber,'S') = 'N')));

if (coalesce(vl_parcelas_w, 0) > 0) and
	((vl_parcelas_w) <> (vl_total_nota_w - vl_liquido_abater_w)) and
	((vl_parcelas_w + vl_adiantamento_w) <> (vl_total_nota_w - vl_liquido_abater_w)) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300574) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300574),
		'S','N',
		wheb_mensagem_pck.get_texto(300575),
		nm_usuario_p,'S');
end if;

/* Consiste IPI */

select	coalesce(sum(coalesce(a.vl_tributo,0)),0)
into STRICT	vl_imposto_w
from	nota_fiscal_trib a,
	tributo t
where	a.cd_tributo 	= t.cd_tributo
and	t.ie_tipo_tributo 	= 'IPI'
and	a.nr_sequencia	= nr_sequencia_p;

if (vl_imposto_w <> vl_ipi_w) and
	((coalesce(vl_imposto_w,0) > 0) and (coalesce(vl_ipi_w,0) > 0)) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300576) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300576),
		'S','N',
		wheb_mensagem_pck.get_texto(300578),
		nm_usuario_p,'S');
end if;

/* Consiste IPI dos Itens */

select	coalesce(sum(coalesce(a.vl_tributo,0)),0)
into STRICT	vl_imposto_w
from	nota_fiscal_item_trib a,
	tributo t
where	a.cd_tributo 	= t.cd_tributo
and	t.ie_tipo_tributo 	= 'IPI'
and	a.nr_sequencia	= nr_sequencia_p;

if (vl_imposto_w <> vl_ipi_w) and
	((coalesce(vl_imposto_w,0) > 0) and (coalesce(vl_ipi_w,0) > 0)) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300579) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300579),
		'S','N',
		wheb_mensagem_pck.get_texto(300581),
		nm_usuario_p,'S');

end if;

/* Soma substituicao tributaria */

select	coalesce(sum(coalesce(b.vl_tributo,0)),0)
into STRICT	vl_subst_trib_w
from	tributo a,
	nota_fiscal_item_trib b
where	b.cd_tributo	= a.cd_tributo
and	b.nr_sequencia	= nr_sequencia_p
and	a.ie_tipo_tributo 	= 'STI';

/* Consiste se tem itens */

Select	count(*)
into STRICT	qt_item_w
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p;
if (qt_item_w = 0) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300583) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300583),
		'S','N',
		wheb_mensagem_pck.get_texto(300584),
		nm_usuario_p,'S');
end if;


/* Consiste Tributos */

select	coalesce(sum(CASE WHEN coalesce(b.ie_retencao,a.ie_soma_diminui)='D' THEN (coalesce(b.vl_tributo,0) * - 1) WHEN coalesce(b.ie_retencao,a.ie_soma_diminui)='S' THEN  coalesce(b.vl_tributo,0)  ELSE 0 END ), 0)
into STRICT	vl_tributos_w
from	tributo a,
	nota_fiscal_trib b
where	a.cd_tributo	= b.cd_tributo
and	b.nr_sequencia 	= nr_sequencia_p;

select	coalesce(sum(CASE WHEN a.ie_soma_diminui='D' THEN (coalesce(b.vl_tributo,0) * - 1) WHEN a.ie_soma_diminui='S' THEN  coalesce(b.vl_tributo,0)  ELSE 0 END ), 0)
into STRICT	vl_tributos_venc_w
from	tributo a,
	nota_fiscal_venc_trib b
where	a.cd_tributo	= b.cd_tributo
and	b.nr_sequencia 	= nr_sequencia_p;

if (ie_tipo_nota_w in ('SD','SE','SF','ST')) then

	select	coalesce(sum(CASE WHEN coalesce(obter_operacao_tributo(b.nr_seq_regra_trib, a.cd_tributo), a.ie_soma_diminui)='D' THEN (coalesce(b.vl_tributo,0) * - 1) WHEN coalesce(obter_operacao_tributo(b.nr_seq_regra_trib, a.cd_tributo), a.ie_soma_diminui)='S' THEN  coalesce(b.vl_tributo,0)  ELSE 0 END ),0)
	into STRICT	vl_tributos_item_w
	from	tributo a,
		nota_fiscal_item_trib b
	where	a.cd_tributo		= b.cd_tributo
	and	b.nr_sequencia 		= nr_sequencia_p
	and	a.ie_tipo_tributo not in ('IPI','ICMSST')
	and	b.ie_rateio = 'N';

else

	select	coalesce(sum(CASE WHEN a.ie_soma_diminui='D' THEN (coalesce(b.vl_tributo,0) * - 1) WHEN a.ie_soma_diminui='S' THEN  coalesce(b.vl_tributo,0)  ELSE 0 END ),0)
	into STRICT	vl_tributos_item_w
	from	tributo a,
		nota_fiscal_item_trib b
	where	a.cd_tributo		= b.cd_tributo
	and	b.nr_sequencia 		= nr_sequencia_p
	and	a.ie_tipo_tributo not in ('IPI','ICMSST')
	and	b.ie_rateio = 'N';

end if;

if (vl_mercadoria_w = 0) and (not ie_consig_w) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300585) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300585),
		'S','N',
		wheb_mensagem_pck.get_texto(300587),
		nm_usuario_p,'S');
end if;

if (vl_total_nota_w = 0) and (not ie_consig_w) then
	if	(vl_mercadoria_w <> ((vl_tributos_w + vl_tributos_venc_w) * -1)) then	/* Edgar 25/01/2010, OS 188297, tratar tributo no valor da NF*/
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300589) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300589),
			'S','N',
			wheb_mensagem_pck.get_texto(300590),
			nm_usuario_p,'S');
	end if;
end if;

/* ahoffelder - OS 192921 - 02/02/2010 - percorrer as regras e verificar se o tributo existe na NF */

select	coalesce(max(a.ie_consistir_trib),'N')
into STRICT	ie_consistir_trib_w
from	operacao_nota a
where	a.cd_operacao_nf	= cd_operacao_nf_w;

if (coalesce(ie_consistir_trib_w,'N') = 'S') then
	open C02;
	loop
	fetch C02
		into	nr_seq_regra_trib_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */

		select	count(*)
		into STRICT	cont_w
		from	nota_fiscal_trib a,
			tributo_conta_pagar b
		where	b.nr_sequencia	= nr_seq_regra_trib_w
		and	b.cd_tributo	= a.cd_tributo
		and	a.nr_sequencia	= nr_sequencia_p
		and	a.vl_base_calculo	between b.vl_minimo and b.vl_teto_base_calculo
		and	a.vl_tributo	> b.vl_minimo_tributo;

		if (coalesce(cont_w,0) = 0) then
			select	substr(obter_desc_tributo(a.cd_tributo),1,255)
			into STRICT	ds_tributo_w
			from	tributo_conta_pagar a
			where	a.nr_sequencia	= nr_seq_regra_trib_w;

			CALL wheb_mensagem_pck.exibir_mensagem_abort(180068,'DS_TRIBUTO_W='||ds_tributo_w);
		end if;
	end loop;
	close C02;
end if;

/*Consiste Mais de uma conta contabil para fornecedor*/

if (coalesce(cd_pessoa_fisica_w::text, '') = '') then

	select	substr(coalesce(obter_dados_pf_pj_estab(cd_estabelecimento_w, null, cd_cgc_w, 'ECD'),'N'),1,1)
	into STRICT	ie_conta_dif_nf_w
	;

	if	((ie_conta_dif_nf_w = 'S') or /*Todas as NF*/
		(ie_conta_dif_nf_w = 'E' AND ie_entrada_saida_w = 'E') or /*Somente as NF Entrada*/
		(ie_conta_dif_nf_w = 'A' AND ie_entrada_saida_w = 'S')) then /*Somente as NF Saida*/
		select	coalesce(sum(vl_contabil),0)
		into STRICT	vl_contabil_conta_w
		from	nota_fiscal_conta
		where	nr_seq_nf = nr_sequencia_p;

		if (vl_total_nota_w <> vl_contabil_conta_w) then
			ds_erro_nota_p := substr(ds_erro_nota_p ||
				wheb_mensagem_pck.get_texto(300592,'VL_TOTAL_NOTA='||vl_total_nota_w||';VL_CONTABIL_CONTA='||vl_contabil_conta_w) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300592,'VL_TOTAL_NOTA='||vl_total_nota_w||';VL_CONTABIL_CONTA='||vl_contabil_conta_w),
				'S','N',
				wheb_mensagem_pck.get_texto(300592,'VL_TOTAL_NOTA='||vl_total_nota_w||';VL_CONTABIL_CONTA='||vl_contabil_conta_w),
				nm_usuario_p,'S');
		end if;
	end if;
end if;
/*CONSISTE SE EXISTE ITENS SEM RATEIO*/

if (ie_permite_sem_rateio_w = 'N') then
	begin
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal_item a
	where	a.nr_sequencia		= nr_sequencia_p
	and		obter_se_nota_entrada_saida(nr_sequencia_p) = 'E'
	and not exists (
		SELECT	1
		from	nota_fiscal_item_rateio b
		where	b.nr_seq_nota	= a.nr_sequencia
		and	b.nr_item_nf	= a.nr_item_nf);

	if (qt_existe_w > 0) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300594) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300596),
			'S','N',
			wheb_mensagem_pck.get_texto(300598),
			nm_usuario_p,'S');
	end if;
	end;
end if;


/* Consiste itens sem projeto de recurso*/

if (ie_permite_sem_projeto_w = 'N') then
	begin
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal_item a
	where	a.nr_sequencia		= nr_sequencia_p
	and		obter_se_nota_entrada_saida(nr_sequencia_p) = 'E'
	and		coalesce(a.nr_seq_proj_rec::text, '') = '';

	if (qt_existe_w > 0) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300601) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300602),
			'S','N',
			wheb_mensagem_pck.get_texto(300603),
			nm_usuario_p,'S');

	end if;
	end;
end if;



if	(vl_total_item_w <> (vl_mercadoria_w - coalesce(vl_subst_trib_w,0))) then
	ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300604) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300604),
		'S','N',
		wheb_mensagem_pck.get_texto(300605),
		nm_usuario_p,'S');
end if;

if (not ie_consig_w) and
	((coalesce(vl_total_nota_w,0) -
	(coalesce(vl_mercadoria_w,0) + /* - nvl(vl_subst_trib_w,0) + Alterado por Anderson em 15/07/2009 - OS129827 -
					Alterada a proc. q atualiza o total da nota entao nao precisa mais diminuir o vl_sit_trib pois ja

esta somado no total da nota*/
	coalesce(vl_despesa_acessoria_w,0) +
	coalesce(vl_despesa_doc_w,0) +
	coalesce(vl_seguro_w,0) +
	coalesce(vl_frete_w,0) +
	coalesce(vl_icms_st_w,0) +
	coalesce(vl_ipi_w,0) -
	coalesce(vl_descontos_w,0) -
	coalesce(vl_descontos_condicional_w,0) +
	coalesce(vl_tributos_w,0) +
	coalesce(vl_tributos_item_w,0) +
	coalesce(vl_tributos_venc_w,0))) <> 0)and (philips_param_pck.get_cd_pais <> 2)then --OS 1122706, foi retirado a pedido do consultor Everton, pois o mesmo ja havia feito esta documentacao interna (comentou a procedure internamente sem esta restricao), pois de acordo com ele, nao sera utilizada no mexico.
	ds_erro_nota_p := substr(ds_erro_nota_p ||wheb_mensagem_pck.get_texto(300606) || chr(13) || chr(10),1,255);

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(300606),
		'S','N',
		wheb_mensagem_pck.get_texto(300606),
		nm_usuario_p,'S');

end if;

ds_erro_aux_w		:= '';
if (nr_ordem_compra_w > 0) then
	begin
	select	coalesce(max(cd_cgc_fornecedor),'0'),
		coalesce(max(cd_pessoa_fisica),'0')
	into STRICT	cd_fornec_ordem_w,
		cd_pessoa_ordem_w
	from	ordem_compra
	where	nr_ordem_compra = nr_ordem_compra_w;
	if	((((coalesce(cd_cgc_w,'0') <> '0') and (coalesce(cd_cgc_w,0) <> cd_fornec_ordem_w)) and ((coalesce(cd_pessoa_fisica_w::text, '') = '') or (coalesce(cd_cgc_w::text, '') = ''))) or
		(cd_pessoa_fisica_w <> '0' AND cd_pessoa_fisica_w <> cd_pessoa_ordem_w)) and (ie_tipo_ordem_w not in ('T','S')) then
		ds_erro_aux_w	:= substr(ds_erro_aux_w || '-' || 'N -' || wheb_mensagem_pck.get_texto(300607) || chr(13) || chr(10),1,4000);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300607),
			'N','N',
			wheb_mensagem_pck.get_texto(300607),
			nm_usuario_p,'S');
	end if;
	end;
end if;

/*Consiste se existem vencimentos postergados ou antecipados pelo sistema nesta nota fiscal.*/

if (ie_consiste_venc_alterado_w = 'S') then
	begin
	select 	obter_se_nf_venc_alt_sistema(nr_sequencia_p)
	into STRICT	ie_venc_alterado_w
	;

	if (ie_venc_alterado_w = 'S') then
		begin
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300608) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300608),
			'N','N',
			wheb_mensagem_pck.get_texto(300608),
			nm_usuario_p,'S');
		end;
	end if;
	end;
end if;


/* Consiste se o valor de algum item esta negativo. */

select 	count(*)
	into STRICT	qt_itens_negativos_w
	from 	nota_fiscal_item
	where 	nr_sequencia = nr_sequencia_p
	and	vl_unitario_item_nf < 0;

if (coalesce(ie_consiste_itens_negativos_w,'S') = 'N') and (qt_itens_negativos_w > 0)	then
	begin

	CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300609),
			'S','N',
			wheb_mensagem_pck.get_texto(300610),
			nm_usuario_p,'S');
	ds_erro_nota_p	:= substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300610) || chr(13) || chr(10),1,255);		
	end;
end if;

/* Consiste Vencimentos da Nota com os da Ordem. Parametro 131*/

if (coalesce(ie_nf_oc_vencimento_w,'N') <> 'N')	then
	select obter_diferenca_vencimento(nr_sequencia_p) ie_diferenca_venc
	into STRICT ie_diferenca_venc_w
	;
	if (ie_diferenca_venc_w = 'S') then
		begin
		if (ie_nf_oc_vencimento_w = 'S') then
			ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300611) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300611),
				'S','N',
				wheb_mensagem_pck.get_texto(300611),
				nm_usuario_p,'S');

		elsif (ie_nf_oc_vencimento_w = 'A') then
			ds_erro_aux_w	:= substr(ds_erro_aux_w || '-' || 'N -' || wheb_mensagem_pck.get_texto(300611) || chr(13) || chr(10),1,255);

			CALL gravar_nota_fiscal_consist(
				nr_sequencia_p,
				wheb_mensagem_pck.get_texto(300611),
				'N','N',
				wheb_mensagem_pck.get_texto(300611),
				nm_usuario_p,'S');


		end if;
		end;
	end if;
end if;

select	count(*)
into STRICT	qt_existe_w
from	inspecao_registro
where	nr_seq_nf = nr_sequencia_p
and	ie_origem = 'NF'
and	coalesce(dt_liberacao::text, '') = '';

if (qt_existe_w > 0) then

	CALL gravar_nota_fiscal_consist(
		nr_sequencia_p,
		wheb_mensagem_pck.get_texto(328091), /*O registro de inspecao gerado a partir dessa nota ainda nao foi liberado.*/
		'S','N',
		wheb_mensagem_pck.get_texto(328092), /*E necessario primeiramente liberar o registro de inspecao gerado a partir dessa nota fiscal, para que a mesma possa ser calculada.*/
		nm_usuario_p,'S');

end if;

if (ie_param_412_w = 'S') and (ie_forma_pagamento_w <> 10) then

	select	count(*)
	into STRICT	qt_parcelas_w
	from	parcela
	where	cd_condicao_pagamento = cd_condicao_pagamento_w;

	select	count(*)
	into STRICT	qt_vencimentos_w
	from	nota_fiscal_venc
	where	nr_sequencia = nr_Sequencia_p
	and	coalesce(ie_origem,'N') = 'N';

	if (qt_vencimentos_w <> qt_parcelas_w) then
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300612) || chr(13) || chr(10),1,255);

		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300612),
			'S','N',
			wheb_mensagem_pck.get_texto(300613,'QT_VENCIMENTOS='||qt_vencimentos_w||';=QT_PARCELAS='||qt_parcelas_w),
			nm_usuario_p,'S');
	end if;

end if;

if (nr_seq_classificacao_w IS NOT NULL AND nr_seq_classificacao_w::text <> '') then
	select	OBTER_SE_CLASSE_TP_USUARIO(nr_seq_classificacao_w,nm_usuario_p,null)
	into STRICT	ie_classe_tp_usuario_w
	;

	if (ie_classe_tp_usuario_w = 'N') then
		--Voce nao tem permissao para calcular uma nota fiscal com essa classificacao.
		CALL wheb_mensagem_pck.exibir_mensagem_abort(251096);
	end if;
end if;

if (ie_calcula_classif_w	<> 'N') and (coalesce(nr_seq_classificacao_w::text, '') = '') then
	if (ie_calcula_classif_w	= 'T') then
		consist_clasif := true;
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300617) || chr(13) || chr(10),1,255);
	elsif (ie_calcula_classif_w	= 'E') and (ie_entrada_saida_w	= 'E') then
		consist_clasif := true;
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300617) || chr(13) || chr(10),1,255);
	elsif (ie_calcula_classif_w	= 'S') and (ie_entrada_saida_w	= 'S') then
		consist_clasif := true;
		ds_erro_nota_p := substr(ds_erro_nota_p || wheb_mensagem_pck.get_texto(300617) || chr(13) || chr(10),1,255);
	end if;
	if (consist_clasif) then
		CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			wheb_mensagem_pck.get_texto(300618),
			'S','N',
			wheb_mensagem_pck.get_texto(300620),
			nm_usuario_p,'S');
	end if;
end if;

/* consistir vinculo nf - Apenas Mexico */

if pkg_i18n.get_estab_locale = 'es_MX' then

	select	count(*)
	into STRICT	qt_imp_nota_w
	from	nf_imp_nota;

	if (qt_imp_nota_w > 0)and (ie_entrada_saida_w = 'E') then

		ds_msg_vinculo_w := mx_cfdi_vincular_nf(null, nr_sequencia_p, 'N', 'N', ds_msg_vinculo_w, 'S');

		if (ds_msg_vinculo_w IS NOT NULL AND ds_msg_vinculo_w::text <> '') then

			ds_erro_nota_p	:= substr(ds_erro_nota_p || ds_msg_vinculo_w || chr(13) || chr(10),1,255);

			for reg_c_incons_vinc_nf in c_incons_vinculo_nf loop

			CALL gravar_nota_fiscal_consist(
			nr_sequencia_p,
			'CFDI - '||reg_c_incons_vinc_nf.msg,
			'N','N',
			'CFDI - '|| get_expression(877582, 'es-MX') ||': '|| reg_c_incons_vinc_nf.msg,
			nm_usuario_p,'S');

			end loop;

		end if;
	end if;
	
	select	count(*)
	into STRICT 	qt_adiant_receb_w
	from	nota_fiscal_adiant_receb
	where	nr_seq_nota = nr_sequencia_p;
	
	if (qt_adiant_receb_w > 0) then

		select	coalesce(sum(a.vl_adiant_saldo),0)
		into STRICT	vl_adiant_receb_w
		from	nota_fiscal_adiant_receb a,
			adiantamento b
		where 	a.nr_seq_nota = nr_sequencia_p
		and   	a.nr_seq_adiantamento = b.nr_adiantamento;
		
		if (vl_adiant_receb_w > vl_total_nota_w) then
			
			CALL gravar_nota_fiscal_consist(
					nr_sequencia_p,
					wheb_mensagem_pck.get_texto(166981),
					'S','N',
					wheb_mensagem_pck.get_texto(166981),
					nm_usuario_p,'S');
			
		end if;

	end if;

end if;

-- Consistencia de tributo de nota fiscal importada
DS_ERRO_P => ds_erro_cons_trib_imp_w := consistir_trib_nf_imp(NR_SEQ_NOTA_P => nr_sequencia_p, NM_USUARIO_P => nm_usuario_p, DS_ERRO_P => ds_erro_cons_trib_imp_w);

if (ds_erro_cons_trib_imp_w IS NOT NULL AND ds_erro_cons_trib_imp_w::text <> '') then
	ds_erro_nota_p	:= substr(ds_erro_nota_p || ds_erro_cons_trib_imp_w || chr(13) || chr(10),1,255);
end if;

select	coalesce(max(nr_seq_transf_cme),0)
into STRICT	nr_seq_transf_cme_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

open C01;
loop
fetch C01
into	nr_item_nf_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (nr_seq_transf_cme_w > 0) then
		ds_erro_item_w := cm_consistir_item_nf(	nr_sequencia_p, nr_item_nf_w, nm_usuario_p, ds_erro_item_w);
	else
		ds_erro_item_w := consistir_item_nota_fiscal(	nr_sequencia_p, nr_item_nf_w, nm_usuario_p, ds_erro_item_w);
	end if;

	if	((coalesce(ds_erro_aux_w::text, '') = '') or (length(ds_erro_aux_w) < 3500)) and (ds_erro_item_w IS NOT NULL AND ds_erro_item_w::text <> '') then
		ds_erro_aux_w	:= substr(ds_erro_aux_w || ds_erro_item_w || chr(13) || chr(10),1,4000);
	end if;
	end;
end loop;
close C01;

CALL projeto_recurso_pck.consistir_nf_proj_rec(nr_sequencia_p, nm_usuario_p, cd_estabelecimento_w, 'L', ie_commit_p);

CALL gerenciamento_contrato_pck.consistir_nf_contrato(nr_sequencia_p,nm_usuario_p);

open C06;
loop
fetch C06 into
	cd_tributo_w;
EXIT WHEN NOT FOUND; /* apply on C06 */
	begin

		begin

			select	coalesce(max(ie_gerar_titulo_pagar), 'N')
			into STRICT	ie_gerar_titulo_pagar_w
			from	tributo
			where	cd_tributo = cd_tributo_w;

			if ((ie_gerar_titulo_pagar_w in ('S','F')) or (philips_param_pck.get_cd_pais = 2)) then

				dt_vencimento_w := to_date(obter_venc_tributo(nr_sequencia_p, cd_tributo_w), 'dd/mm/rrrr');


				if (coalesce(trunc(dt_vencimento_w), trunc(clock_timestamp())) < trunc(clock_timestamp())) then

					CALL gravar_nota_fiscal_consist(
						nr_sequencia_p,
						wheb_mensagem_pck.get_texto(455344), --Atencao! A data de vencimento do tributo e menor que a data atual.
						'N','N',
						wheb_mensagem_pck.get_texto(455345), --Um ou mais tributos existentes na nota fiscal possuem data de vencimento ja vencida.
						nm_usuario_p,'S');
				end if;

			end if;

		exception when others then
			ds_erro_w := substr(sqlerrm(SQLSTATE),1,1000);
			CALL gravar_log_tasy(6789,wheb_mensagem_pck.get_texto(794206,'DS_ERRO_W='||ds_erro_w), 'Tasy');

		end;

	end;
end loop;
close C06;



if (ds_erro_aux_w IS NOT NULL AND ds_erro_aux_w::text <> '') then
	ds_erro_item_p	:= substr(ds_erro_aux_w,1,255);
end if;

ie_ctb_online_w := ctb_online_pck.get_modo_lote(2, cd_estabelecimento_w, cd_empresa_w);

if (ie_ctb_online_w = 'S') then
	begin
	CALL ctb_contab_onl_lote_nf_pck.ctb_consistir_contab_nf(	nr_sequencia_p,
							cd_estabelecimento_w,
							'S',
							nm_usuario_p);
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_nota_fiscal ( nr_sequencia_p bigint, nm_usuario_p text, ds_erro_item_p INOUT text, ds_erro_nota_p INOUT text, ie_commit_p text default 'S', ie_devolucao_integracao_p text default 'N') FROM PUBLIC;

