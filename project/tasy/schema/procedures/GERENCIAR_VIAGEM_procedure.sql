-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerenciar_viagem (nr_sequencia_p bigint, nm_usuario_p text, ie_acao_p text, ds_retorno_p INOUT text, ie_commit_p text default 'S') AS $body$
DECLARE



/* ie_acao
C  = Confirmar a viagem
A  = Autorizar a viagem
LR = Liberar relat despesas viagem
AR = Aprovar relat despesas viagem
F  = Finalizar a viagem
ER = Elaboração Relatório
EV = Em viagem
DL = Desfazer liberação Relatório
DA = Desfazer aprovação Relatório
DC = Desfazer confirmação da viagem
DT = Desfazer autorização da viagem
DE = Desfazer "Em Viagem"
DER = Desfazer "Elab. Relatório"
ECV = Estorna Cancelamento de Viagem
*/
qt_relat_sem_aprov	integer:= 0;
qt_relat_viagem		integer:= 0;
ds_retorno_w		varchar(255);
nr_sequencia_w		bigint;
dt_confirmacao_w	timestamp;
dt_autorizacao_w	timestamp;
ie_etapa_viagem_w	varchar(2);
nr_seq_viagem_w		bigint;
qt_destino_w		bigint := 1;
ie_verifica_proj_w	varchar(1);


BEGIN

ds_retorno_w:= '';

ie_verifica_proj_w := obter_valor_param_usuario(7002, 27, obter_perfil_ativo, nm_usuario_p, 1);

if (ie_verifica_proj_w = 'N') then

	if (ie_acao_p = 'LR') or (ie_acao_p = 'DL') or (ie_acao_p = 'DA') or (ie_acao_p = 'AR') then

		select	max(nr_seq_viagem)
		into STRICT	nr_seq_viagem_w
		from	via_relat_desp
		where	nr_sequencia	   = nr_sequencia_p;
	else

		nr_seq_viagem_w := nr_sequencia_p;

	end if;

	select	count(*)
	into STRICT	qt_destino_w
	from	via_destino
	where	nr_seq_viagem = nr_seq_viagem_w;

end if;

if (qt_destino_w > 0) then

	if (ie_acao_p = 'C') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_viagem
			set	dt_confirmacao	   = clock_timestamp(),
				nm_usuario_confir = nm_usuario_p,
				ie_etapa_viagem	   = '1',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	 = nr_sequencia_p;

		end if;

	elsif (ie_acao_p = 'A') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_viagem
			set	dt_autorizacao	 = clock_timestamp(),
				nm_usuario_autor = nm_usuario_p,
				ie_etapa_viagem	   = '2',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	 = nr_sequencia_p;

		end if;


	elsif (ie_acao_p = 'LR') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_relat_desp
			set	dt_liberacao	   = clock_timestamp(),
				nm_usuario_libera  = nm_usuario_p,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

			select	max(nr_seq_viagem)
			into STRICT	nr_seq_viagem_w
			from	via_relat_desp
			where	nr_sequencia	   = nr_sequencia_p;

			update	via_viagem
			set	ie_etapa_viagem	   = '8',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	 = nr_seq_viagem_w;


		end if;

	elsif (ie_acao_p = 'AR') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_relat_desp
			set	dt_aprovacao	   = clock_timestamp(),
				nm_usuario_aprov   = nm_usuario_p,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

			select 	nr_seq_viagem
			into STRICT	nr_sequencia_w
			from 	via_relat_desp
			where 	nr_sequencia = nr_sequencia_p;

			select	count(*)
			into STRICT	qt_relat_sem_aprov
			from 	via_relat_desp
			where	nr_seq_viagem = nr_sequencia_w
			and 	coalesce(dt_aprovacao::text, '') = '';

			select	coalesce(max(b.ie_etapa_viagem),'0')
			into STRICT	ie_etapa_viagem_w
			from 	via_relat_desp 	a,
				via_viagem 	b
			where 	a.nr_seq_viagem = b.nr_sequencia
			and 	a.nr_sequencia  = nr_sequencia_p;

			if (qt_relat_sem_aprov = 0) and (somente_numero(ie_etapa_viagem_w) > 2) then

				update	via_viagem
				set 	ie_etapa_viagem = '5',
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where 	nr_sequencia = nr_sequencia_w;
			end if;

		end if;

	elsif (ie_acao_p = 'F') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			begin
			select 	count(*)
			into STRICT	qt_relat_sem_aprov
			from 	via_relat_desp
			where 	coalesce(dt_aprovacao::text, '') = ''
			and 	nr_seq_viagem = nr_sequencia_p;
			exception
				when others then
					qt_relat_sem_aprov:= 0;
			end;

			if (qt_relat_sem_aprov = 0) then

				update	via_viagem
				set	ie_etapa_viagem		= '6',
					dt_fim_viagem		= clock_timestamp(),
					nm_usuario_fim_viagem	= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia		= nr_sequencia_p;

			else

				ds_retorno_w:=  Wheb_mensagem_pck.get_texto(798619);

			end if;

		end if;

	elsif (ie_acao_p = 'ER') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			begin
			select 	count(*)
			into STRICT	qt_relat_viagem
			from 	via_relat_desp
			where 	nr_seq_viagem = nr_sequencia_p
			and 	coalesce(dt_aprovacao::text, '') = '';
			exception
				when others then
					qt_relat_viagem:= 0;
			end;

			if (qt_relat_viagem > 0) then

				update	via_viagem
				set	ie_etapa_viagem	   = '4',
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	   = nr_sequencia_p;

			end if;

		end if;

	elsif (ie_acao_p = 'EV') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_viagem
			set	ie_etapa_viagem	   = '3',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

		end if;

	elsif (ie_acao_p = 'DL') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_relat_desp
			set	dt_liberacao	    = NULL,
				nm_usuario_libera   = NULL,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

			select	max(nr_seq_viagem)
			into STRICT	nr_seq_viagem_w
			from	via_relat_desp
			where	nr_sequencia	   = nr_sequencia_p;

			update	via_viagem
			set	ie_etapa_viagem	   = '4',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	 = nr_seq_viagem_w;

		end if;

	elsif (ie_acao_p = 'DA') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_relat_desp
			set	dt_aprovacao	    = NULL,
				nm_usuario_aprov   = NULL,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp(),
				dt_liberacao	 = NULL,
				nm_usuario_libera  = NULL
			where	nr_sequencia	   = nr_sequencia_p;

			select 	nr_seq_viagem
			into STRICT	nr_sequencia_w
			from 	via_relat_desp
			where 	nr_sequencia = nr_sequencia_p;

			select	coalesce(max(b.ie_etapa_viagem),'0')
			into STRICT	ie_etapa_viagem_w
			from 	via_relat_desp 	a,
				via_viagem 	b
			where 	a.nr_seq_viagem = b.nr_sequencia
			and 	a.nr_sequencia  = nr_sequencia_p;

			if (somente_numero(ie_etapa_viagem_w) > 2) then

				update	via_viagem
				set	ie_etapa_viagem = '4',
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia = nr_sequencia_w;

			end if;

		end if;

	elsif (ie_acao_p = 'DC') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_viagem
			set	dt_confirmacao	    = NULL,
				nm_usuario_confir   = NULL,
				ie_etapa_viagem = '0',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

		end if;

	elsif (ie_acao_p = 'DT') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_viagem
			set	dt_autorizacao	    = NULL,
				nm_usuario_autor    = NULL,
				ie_etapa_viagem = '1',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

		end if;

	elsif (ie_acao_p = 'DE') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_viagem
			set	ie_etapa_viagem = '2',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

		end if;

	elsif (ie_acao_p = 'DER') then

		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_viagem
			set	ie_etapa_viagem = '3',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

		end if;

	elsif (ie_acao_p = 'DFV') then
		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			update	via_viagem
			set	ie_etapa_viagem = '5',
				nm_usuario	= nm_usuario_p,
				dt_fim_viagem	 = NULL,
				nm_usuario_fim_viagem  = NULL,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	   = nr_sequencia_p;

		end if;

	elsif (ie_acao_p = 'ECV') then
		if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

			select	dt_autorizacao,
				dt_confirmacao
			into STRICT	dt_autorizacao_w,
				dt_confirmacao_w
			from 	via_viagem
			where	nr_sequencia	= nr_sequencia_p;

			if (dt_autorizacao_w IS NOT NULL AND dt_autorizacao_w::text <> '') then

				update	via_viagem
				set	ie_etapa_viagem 	= '2',
					nm_usuario		= nm_usuario_p,
					nr_seq_motivo_cancel 	 = NULL,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia		= nr_sequencia_p;

			elsif (dt_confirmacao_w IS NOT NULL AND dt_confirmacao_w::text <> '') then

				update	via_viagem
				set	ie_etapa_viagem 	= '1',
					nm_usuario		= nm_usuario_p,
					nr_seq_motivo_cancel 	 = NULL,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia		= nr_sequencia_p;

			else
				update	via_viagem
				set	ie_etapa_viagem 	= '0',
					nm_usuario		= nm_usuario_p,
					nr_seq_motivo_cancel 	 = NULL,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia		= nr_sequencia_p;

			end if;

		end if;

	end if;

else
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(330286);
end if;

ds_retorno_p:= ds_retorno_w;

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerenciar_viagem (nr_sequencia_p bigint, nm_usuario_p text, ie_acao_p text, ds_retorno_p INOUT text, ie_commit_p text default 'S') FROM PUBLIC;

