-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nota_credito_ret_hist (nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_acao_p text) AS $body$
DECLARE

			 
/* ie_acao_p 
I - Inclusão 
E - Estorno 
*/
 
 
nr_seq_nota_credito_w	bigint;
vl_nota_credito_w	double precision;
nr_seq_motivo_w		bigint;
cd_tipo_taxa_juro_w	bigint;	
cd_tipo_taxa_multa_w	bigint;
cd_moeda_w		smallint;
cd_estabelecimento_nc_w	bigint;
cd_cgc_solic_nc_w	varchar(14);
cd_pf_solic_nc_w	varchar(10);
cd_cgc_nc_w		varchar(14);
cd_pessoa_fisica_nc_w	varchar(10);
nr_titulo_w		bigint;
nr_seq_tit_liq_w	bigint;
nr_seq_trans_financ_w	bigint;
nr_sequencia_nc_w	bigint;
qt_titulo_w		bigint;

c01 CURSOR FOR 
SELECT	sum(a.vl_historico), 
	d.nr_titulo 
from	convenio_retorno_item d, 
	hist_audit_conta_paciente c, 
	conta_paciente_retorno b, 
	conta_paciente_ret_hist a 
where	a.nr_seq_conpaci_ret	= b.nr_sequencia 
and	a.nr_seq_hist_audit	= c.nr_sequencia 
and	a.nr_seq_ret_item	= d.nr_sequencia 
and	c.ie_acao		= 9 --Nota de Crédito 
and	a.nr_seq_lote_audit	= nr_seq_lote_p 
group by d.nr_titulo;

c02 CURSOR FOR 
SELECT	a.nr_sequencia 
from	nota_credito a 
where	a.nr_seq_lote_adit_tit_rec = nr_seq_lote_p;


BEGIN 
 
select	max(nr_seq_tf_nota_credito) 
into STRICT	nr_seq_trans_financ_w 
from	parametro_contas_receber 
where	cd_estabelecimento	= cd_estabelecimento_p;
 
 
 
open C01;
loop 
fetch C01 into 
	vl_nota_credito_w, 
	nr_titulo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
 
	if (ie_acao_p = 'I') then 
	 
		if (vl_nota_credito_w > 0) and (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then 
		 
			select	max(cd_cgc), 
				max(cd_pessoa_fisica) 
			into STRICT	cd_cgc_nc_w, 
				cd_pessoa_fisica_nc_w 
			from	titulo_receber 
			where	nr_titulo	= nr_titulo_w;
 
			begin 
			nr_seq_motivo_w := obter_param_usuario(9051, 4, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, nr_seq_motivo_w);
			exception 
			when others then 
				--rai.se_application_error(-20011, 'O motivo de inclusão informado no parâmetro 4 da função "Controle de Notas de Crédito (a pagar)" não é válido!'); 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(201059);
			end;
			 
			select	max(cd_tipo_taxa_juro), 
				max(cd_tipo_taxa_multa), 
				max(cd_moeda_padrao) 
			into STRICT	cd_tipo_taxa_juro_w, 
				cd_tipo_taxa_multa_w, 
				cd_moeda_w 
			from	parametros_contas_pagar 
			where	cd_estabelecimento	= cd_estabelecimento_p;
 
			select	nextval('nota_credito_seq') 
			into STRICT	nr_seq_nota_credito_w 
			;
 
			cd_estabelecimento_nc_w	:= coalesce((obter_estab_cr(cd_estabelecimento_p,'S'))::numeric ,cd_estabelecimento_p);
 
			insert	into nota_credito(cd_cgc, 
				cd_pessoa_fisica, 
				cd_estabelecimento, 
				cd_moeda, 
				cd_tipo_taxa_juro, 
				cd_tipo_taxa_multa, 
				dt_atualizacao, 
				dt_nota_credito, 
				dt_vencimento, 
				nm_usuario, 
				nr_seq_lote_audit_hist, 
				nr_seq_trans_fin_contab, 
				nr_sequencia, 
				vl_nota_credito, 
				vl_saldo, 
				ie_origem, 
				nr_seq_motivo, 
				ie_situacao, 
				nr_seq_lote_adit_tit_rec) 
			values (cd_cgc_nc_w, 
				cd_pessoa_fisica_nc_w, 
				cd_estabelecimento_nc_w, 
				cd_moeda_w, 
				cd_tipo_taxa_juro_w, 
				cd_tipo_taxa_multa_w, 
				clock_timestamp(), 
				clock_timestamp(), 
				trunc(clock_timestamp(),'dd') + 30, 
				nm_usuario_p, 
				null, 
				nr_seq_trans_financ_w, 
				nr_seq_nota_credito_w, 
				vl_nota_credito_w, 
				vl_nota_credito_w, 
				'C', 
				nr_seq_motivo_w, 
				'A', 
				nr_seq_lote_p);
 
			select	max(a.cd_cgc_solic_nc), 
				max(a.cd_pf_solic_nc) 
			into STRICT	cd_cgc_solic_nc_w, 
				cd_pf_solic_nc_w 
			from	parametros_contas_pagar a 
			where	a.cd_estabelecimento	= cd_estabelecimento_p;
 
			if (cd_cgc_solic_nc_w IS NOT NULL AND cd_cgc_solic_nc_w::text <> '') or (cd_pf_solic_nc_w IS NOT NULL AND cd_pf_solic_nc_w::text <> '') then 
				insert	into nota_credito_solic(cd_cgc, 
					cd_pessoa_fisica, 
					dt_atualizacao, 
					nm_usuario, 
					nr_seq_nota_credito, 
					nr_sequencia) 
				values (cd_cgc_solic_nc_w, 
					cd_pf_solic_nc_w, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_nota_credito_w, 
					nextval('nota_credito_solic_seq'));
			end if;	
			 
			select	max(nr_sequencia) 
			into STRICT	nr_seq_tit_liq_w 
			from	titulo_receber_liq 
			where	nr_titulo	= nr_titulo_w 
			and	vl_nota_credito	> 0;
			 
			if (nr_seq_tit_liq_w IS NOT NULL AND nr_seq_tit_liq_w::text <> '') then			 
			 
				insert	into titulo_receber_nc(dt_atualizacao, 
					nm_usuario, 
					nr_seq_nota_credito, 
					nr_sequencia, 
					nr_titulo_rec, 
					vl_nota_credito) 
				values (clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_nota_credito_w, 
					nextval('titulo_receber_nc_seq'), 
					nr_titulo_w, 
					vl_nota_credito_w);
					 
				CALL GERAR_BAIXA_NOTA_CREDITO(nr_seq_tit_liq_w, null, null, nr_titulo_w, nm_usuario_p, 'B');
			end if;
 
		end if;
	 
	elsif (ie_acao_p = 'E') then 
	 
		open C02;
		loop 
		fetch C02 into	 
			nr_sequencia_nc_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin		 
			 
			select	count(*) 
			into STRICT	qt_titulo_w 
			from	titulo_pagar a 
			where	a.nr_seq_nota_credito	= nr_sequencia_nc_w;
 
			if (qt_titulo_w	> 0) then 
				CALL desvincular_titulo_pagar_nc(nr_sequencia_nc_w, null, 'S', nm_usuario_p);
			end if;
 
			delete	from nota_credito_classif a 
			where	a.nr_seq_nota_credito	= nr_sequencia_nc_w;
 
			delete	from nota_credito_solic a 
			where	a.nr_seq_nota_credito	= nr_sequencia_nc_w;
 
			delete	from nota_credito_baixa a 
			where	a.nr_seq_nota_credito	= nr_sequencia_nc_w;
			 
			delete 	from titulo_receber_nc a 
			where	a.nr_seq_nota_credito	= nr_sequencia_nc_w;
 
			delete	from nota_credito a 
			where	a.nr_sequencia		= nr_sequencia_nc_w;			
			 
			end;
		end loop;
		close C02;
	 
	end if;
	 
end loop;
close C01;	
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nota_credito_ret_hist (nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_acao_p text) FROM PUBLIC;

