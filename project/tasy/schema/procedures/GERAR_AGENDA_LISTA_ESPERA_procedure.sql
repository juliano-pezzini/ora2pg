-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_agenda_lista_espera ( cd_tipo_agenda_p bigint, cd_agenda_p bigint, nr_seq_agenda_p bigint, nr_seq_lista_p bigint, ie_lista_p text, nm_usuario_p text, ie_multi_schedule_p text default 'N', nr_minuto_duracao_p bigint default null, ds_erro_p INOUT text DEFAULT NULL, NR_SEQ_AGENDA_NEW_P INOUT bigint DEFAULT NULL) AS $body$
DECLARE


cd_pessoa_lista_w			varchar(10);
nm_pessoa_lista_w			varchar(60);
nr_telefone_w			varchar(255);
nm_pessoa_contato_w		varchar(50);
cd_convenio_lista_w		integer;
cd_categ_lista_w			varchar(10);
ds_observacao_w			varchar(2000);
ie_livre_w				varchar(1);
ie_agenda_w			varchar(1) := 'N';
nr_seq_agecons_w			bigint;
nr_seq_agenda_w			agenda_paciente.nr_sequencia%type;
dt_novo_agendamento_w		timestamp;
ie_classif_agenda_w		varchar(5);
dt_chegada_w			timestamp;
cd_medico_w			varchar(10);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w		bigint;
cd_proced_agenda_w		bigint;
ie_origem_agenda_w		bigint;
nr_seq_proc_int_agenda_w	bigint;
ie_forma_agendamento_w		smallint;
cd_setor_atendimento_w		integer;
cd_medico_exec_w			varchar(10);
ie_lado_w			varchar(1);
cd_empresa_ref_w			bigint;
nr_doc_convenio_w		varchar(20);
cd_plano_w			varchar(10);
dt_validade_carteira_w		timestamp;
cd_usuario_convenio_w		varchar(30);
cd_procedencia_w			integer;
qt_peso_w			real;
qt_altura_cm_w			real;
dt_nascimento_pac_w		timestamp;
qt_idade_paciente_w		smallint;
qt_idade_mes_w          agenda_paciente.qt_idade_mes%TYPE;
nr_seq_classif_agenda_w		bigint;
nr_seq_indicacao_w		bigint;
nr_Seq_proc_interno_exame_w	bigint;
cd_proc_exame_w			bigint;
ie_origem_proc_exame_w		bigint;
cd_estabelecimento_w		integer;
cd_medico_req_w			varchar(10);
cd_complemento_w		varchar(30);
qt_procedimento_w		integer;
ie_canc_agenda_origem_exame_w	varchar(1);
ie_canc_agenda_origem_cons_w	varchar(1);
dt_agenda_w			timestamp;
cd_tipo_acomodacao_w	smallint;
dt_prevista_internacao_w timestamp;
ie_cancelar_w			varchar(1);
ie_carrega_inf_ag_lista_esp_w	varchar(1);
cd_cid_w			varchar(10);
ie_autorizacao_w	varchar(3);
cd_senha_w			varchar(20);	
ie_forma_setor_w	varchar(1);
ie_obter_med_req_w	varchar(1);
cd_setor_atend_ult_w	setor_atendimento.cd_setor_atendimento%type;
cd_medico_req_ult_w	varchar(10);
qt_anexo_lista_espera_w bigint;
cd_especialidade_w integer;
ie_consistencia_convenio_w	varchar(255)	:= '';
ie_agenda_convenio_w		varchar(1)	:= 'S';
ie_setor_clas_lista_esp_w		parametro_agenda.ie_setor_classif_lista_espera%type;
eh_medico_w	varchar(1);
nr_Seq_segurado_w 			agenda_lista_espera.nr_Seq_segurado%type;
cd_tipo_anestesia_w			agenda_lista_espera.cd_tipo_anestesia%type;
nr_seq_tipo_classif_pac_w	agenda_lista_espera.nr_seq_tipo_classif_pac%type;
ie_status_inicial_w			varchar(10);
ie_status_agenda_w			varchar(10);
nr_atendimento_w		agenda_lista_espera.nr_atendimento%type;
ds_dado_clinico_w	varchar(255):='';
ie_gerar_pre_agenda_w   varchar(10);
ie_origem_proced_agenda_pac_w		bigint;
ds_erro_w			varchar(255);
ds_erro_2_w			varchar(255);
nr_seq_agenint_item_w		agenda_integrada_item.nr_sequencia%type;
nr_seq_ageint_w			agenda_integrada.nr_sequencia%type;
cd_medico_regra_bloq_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_seq_regra_bloq_w		agenda_bloqueio_geral.nr_sequencia%type;
nr_seq_proc_interno_age_w	proc_interno.nr_sequencia%type;
cd_procedimento_age_w		procedimento.cd_procedimento%type;
ie_origem_proced_age_w		procedimento.ie_origem_proced%type;
ds_cirurgia_w			agenda_paciente.ds_cirurgia%type;
ie_anestesia_w			agenda_paciente.ie_anestesia%type;
ie_possui_registro_age_w	varchar(1) := 'S';
cd_departamento_medico_exec_w	bigint;
ie_transf_recalculo_w		varchar(1) := 'N';
ie_agenda_ocupada_w		varchar(1) := 'N';
nr_minuto_duracao_w		agenda_paciente.nr_minuto_duracao%type;
nr_minuto_duracao_ww		agenda_paciente.nr_minuto_duracao%type;
nr_minuto_duracao_www		agenda_paciente.nr_minuto_duracao%type;
nr_sequencia_age_w		agenda_paciente.nr_sequencia%type;
dt_agenda_ww			timestamp;
hr_inicio_w				timestamp;
ds_erro_ww				varchar(2000);
nr_seconds_w			integer;
nr_seq_agenda_new_w		agenda_paciente.nr_sequencia%type;
nr_seq_agenda_recur_w	agenda_paciente.nr_sequencia%type;
ie_posicao_w			agenda_lista_espera.ie_posicao%type;
nr_seq_agenda_aux_w     agenda_paciente_auxiliar.nr_sequencia%type;
nr_seq_proc_cpoe_p      agenda_paciente_auxiliar.nr_seq_cpoe_procedimento%type;
cd_medico_wait_w        EQUIPE_LISTA_ESPERA.CD_PROFISSIONAL%type;
cd_anesthist_wait_w     EQUIPE_LISTA_ESPERA.CD_PROFISSIONAL%type;

expressao1_w	varchar(255) := obter_desc_expressao_idioma(774038, null, wheb_usuario_pck.get_nr_seq_idioma);--Transferido para o dia
expressao2_w	varchar(255) := obter_desc_expressao_idioma(774039, null, wheb_usuario_pck.get_nr_seq_idioma);--conforme lista de espera
BEGIN
ds_erro_p:= null;
if (cd_tipo_agenda_p IS NOT NULL AND cd_tipo_agenda_p::text <> '') and (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (nr_seq_lista_p IS NOT NULL AND nr_seq_lista_p::text <> '') and (ie_lista_p IS NOT NULL AND ie_lista_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	
	if (cd_tipo_agenda_p in (1,2)) then
		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_possui_registro_age_w
		from 	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;
		
		select    max(coalesce(ie_transf_recalculo,'N'))
		into STRICT	  ie_transf_recalculo_w
		from      parametro_agenda
		where  	  cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;
		
		select	coalesce(max('S'),'N'),
			max(dt_agenda),
			max(hr_inicio),
			max(nr_minuto_duracao)
		into STRICT	ie_agenda_ocupada_w,
			dt_agenda_ww,
			hr_inicio_w,
			nr_minuto_duracao_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p
		and	ie_status_agenda <> 'L'
		and 	(cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> '');
		
		if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT', 'ja_JP')) and (cd_tipo_agenda_p = 1) then
			select coalesce(nr_minuto_duracao,0)
			into STRICT   nr_minuto_duracao_www
			from   agenda_lista_espera
			where  nr_sequencia = nr_seq_lista_p;
		end if;
		
       if (ie_transf_recalculo_w = 'S') and (ie_agenda_ocupada_w = 'S') and (cd_tipo_agenda_p = 1) then
		
		   nr_minuto_duracao_ww :=  coalesce(nr_minuto_duracao_www, nr_minuto_duracao_w);
		
		   CALL atualizar_agendas_seguintes_wl(nr_seq_agenda_p, nr_minuto_duracao_ww, nm_usuario_p);
		
		   CALL wheb_usuario_pck.set_ie_executar_trigger('N');

		   select nextval('agenda_paciente_seq')
		   into STRICT nr_sequencia_age_w
		;
		
			if (hr_inicio_w IS NOT NULL AND hr_inicio_w::text <> '') then
				nr_seconds_w := pkg_date_utils.extract_field('SECOND', hr_inicio_w);
					
				if (nr_seconds_w < 58) then
					hr_inicio_w := hr_inicio_w + (1/86400);
				else
					hr_inicio_w := hr_inicio_w - (1/86400);
				end if;
		    end if;

		   insert into agenda_paciente(cd_agenda,
			dt_agenda,
			hr_inicio,
			nr_minuto_duracao,
			nm_usuario,
			dt_atualizacao,
			ie_status_agenda,
			ie_ortese_protese,
			ie_cdi,
			ie_uti,
			ie_banco_sangue,
			ie_serv_especial,
			nr_sequencia,
			ie_anestesia,
			ie_equipamento,
			ie_autorizacao,
			ie_video,
			ie_uc,
			ie_lado,
			ie_biopsia,
			ie_congelacao,
			ie_pre_internacao,
			ie_reserva_leito,
			nm_usuario_orig)
		  values (cd_agenda_p,
			dt_agenda_ww,
			hr_inicio_w,
			nr_minuto_duracao_ww,
			nm_usuario_p,
			clock_timestamp(),
			'L', 'N', 'N', 'N', 'N', 'N',
			nr_sequencia_age_w,
			'N','N',
			'N',
			'N',
			'N',
			'N',
			'N',
			'N',
			'N',
			'N',
			nm_usuario_p);

             SELECT
                MAX(nr_sequencia)
            INTO STRICT nr_seq_agenda_aux_w
            FROM
                agenda_paciente_auxiliar apa
            WHERE
                apa.nr_seq_agenda = nr_sequencia_age_w;

             SELECT
                    max(nr_seq_cpoe_procedimento)
                INTO STRICT nr_seq_proc_cpoe_p
                FROM
                    agenda_lista_espera
                WHERE
                    nr_sequencia = nr_seq_lista_p;
             IF ( coalesce(nr_seq_agenda_aux_w, 0) > 0 and (nr_seq_proc_cpoe_p IS NOT NULL AND nr_seq_proc_cpoe_p::text <> '')) THEN
                    UPDATE agenda_paciente_auxiliar
                    SET
                        nr_seq_cpoe_procedimento = nr_seq_proc_cpoe_p
                    WHERE
                        nr_sequencia = nr_seq_agenda_aux_w;
            ELSE
                INSERT INTO agenda_paciente_auxiliar(
                    nr_sequencia,
                    dt_atualizacao,
                    nm_usuario,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    nr_seq_cpoe_procedimento,
                    nr_seq_agenda
                ) VALUES (
                    nextval('agenda_paciente_auxiliar_seq'),
                    clock_timestamp(),
                    nm_usuario_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    nr_seq_proc_cpoe_p,
                    nr_sequencia_age_w
                );
            END IF;

		    commit;
		
		    if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
				CALL wheb_usuario_pck.set_ie_executar_trigger('S');
		    end if;

		    SELECT * FROM gerar_agenda_lista_espera(cd_tipo_agenda_p, cd_agenda_p, nr_sequencia_age_w, nr_seq_lista_p, ie_lista_p, nm_usuario_p, ie_multi_schedule_p, nr_minuto_duracao_p, ds_erro_ww, nr_seq_agenda_recur_w) INTO STRICT ds_erro_ww, nr_seq_agenda_recur_w;
			
			nr_seq_agenda_new_p := nr_seq_agenda_recur_w;
		    return;
		end if;
		
	elsif (cd_tipo_agenda_p in (3,4,5)) then
		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_possui_registro_age_w
		from	agenda_consulta
		where	nr_sequencia = nr_seq_agenda_p;
		
	end if;
	
	if (coalesce(ie_possui_registro_age_w, 'S') = 'N') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(1045786);
	end if;
	
	/* obter dados lista espera */

	select 	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	agenda
	where 	cd_agenda = cd_agenda_p;
	
	ie_canc_agenda_origem_exame_w	:= Obter_Valor_Param_Usuario(820, 174, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
	ie_canc_agenda_origem_cons_w	:= Obter_Valor_Param_Usuario(821, 182, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
	ie_carrega_inf_ag_lista_esp_w	:= Obter_Valor_Param_Usuario(866, 230, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
	
	ie_forma_setor_w := obter_param_usuario(821, 114, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_forma_setor_w);
	ie_obter_med_req_w := obter_param_usuario(821, 251, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_obter_med_req_w);
	ie_status_inicial_w := obter_param_usuario(871, 78, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_status_inicial_w);
	ie_gerar_pre_agenda_w := obter_param_usuario(871, 833, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_pre_agenda_w);

	select	coalesce(max(ie_setor_classif_lista_espera),'N')
	into STRICT	ie_setor_clas_lista_esp_w
	from	parametro_agenda
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	ds_dado_clinico_w := cpoe_obter_ds_dado_clinico(nr_seq_lista_p);
	
	select	max(cd_pessoa_fisica),
			max(coalesce(substr(obter_nome_pf(cd_pessoa_fisica),1,60), nm_pessoa_lista)) nm_pessoa_lista,
			max(nr_telefone),
			max(nm_pessoa_contato),
			max(cd_convenio),
			max(cd_categoria),
			max(ds_observacao),
			max(coalesce(nr_seq_agecons,0)),
			max(coalesce(nr_seq_agenda,0)),
			max(ie_classif_agenda),
			max(dt_chegada),
			max(ie_forma_agendamento),
			max(cd_setor_atendimento),
			max(cd_medico_exec),
			max(ie_lado),
			max(cd_empresa_ref),
			max(nr_doc_convenio),
			max(cd_plano),
			max(dt_validade_carteira),
			max(cd_usuario_convenio),
			max(cd_procedencia),
			max(qt_peso),
			max(qt_altura_cm),
			max(obter_data_nascto_pf(cd_pessoa_fisica)),
			max(obter_idade_pf(cd_pessoa_fisica, clock_timestamp(), 'A')),
			max(obter_idade_pf(cd_pessoa_fisica, clock_timestamp(), 'MM')),
			max(nr_seq_classif_agenda),
			max(nr_seq_indicacao),
			max(nr_Seq_proc_interno),
			max(cd_medico),
			max(cd_procedimento),
			max(ie_origem_proced),
			max(nr_seq_proc_interno),
			max(cd_complemento),
			max(qt_procedimento),
			max(dt_prevista_internacao),
			max(cd_cid),
			max(ie_autorizacao),
			max(cd_senha),
			max(cd_especialidade),
			max(nr_Seq_segurado),
			max(cd_tipo_anestesia),
			max(nr_seq_tipo_classif_pac),
			max(nr_atendimento),
			max(ds_cirurgia),
			max(ie_anestesia),
			max(cd_departamento_medico_exec),
			max(ie_posicao)
	into STRICT	cd_pessoa_lista_w,
			nm_pessoa_lista_w,
			nr_telefone_w,
			nm_pessoa_contato_w,
			cd_convenio_lista_w,
			cd_categ_lista_w,
			ds_observacao_w,
			nr_seq_agecons_w,
			nr_seq_agenda_w,
			ie_classif_agenda_w,
			dt_chegada_w,
			ie_forma_agendamento_w,
			cd_setor_atendimento_w,
			cd_medico_exec_w,
			ie_lado_w,
			cd_empresa_ref_w,
			nr_doc_convenio_w,
			cd_plano_w,
			dt_validade_carteira_w,
			cd_usuario_convenio_w,
			cd_procedencia_w,
			qt_peso_w,
			qt_altura_cm_w,
			dt_nascimento_pac_w,
			qt_idade_paciente_w,
			qt_idade_mes_w,
			nr_seq_classif_agenda_w,
			nr_seq_indicacao_w,
			nr_Seq_proc_interno_exame_w,
			cd_medico_req_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_proc_interno_w,
			cd_complemento_w,
			qt_procedimento_w,
			dt_prevista_internacao_w,
			cd_cid_w,
			ie_autorizacao_w,
			cd_senha_w,
			cd_especialidade_w,
			nr_Seq_segurado_w,
			cd_tipo_anestesia_w,
			nr_seq_tipo_classif_pac_w,
			nr_atendimento_w,
			ds_cirurgia_w,
			ie_anestesia_w,
			cd_departamento_medico_exec_w,
			ie_posicao_w
	from	agenda_lista_espera
	where	nr_sequencia = nr_seq_lista_p;
	
	if (coalesce(ie_classif_agenda_w::text, '') = '') and (cd_tipo_agenda_p in (3,4,5)) then
		select	ie_classif_agenda
		into STRICT	ie_classif_agenda_w
		from	agenda_consulta
		where	nr_sequencia	= nr_seq_agenda_p;
	end if;
	
	if (cd_tipo_agenda_p in (3,4,5)) then
		select	max(dt_agenda)
		into STRICT	dt_agenda_w
		from	agenda_consulta
		where	nr_sequencia = nr_seq_agenda_p;
		if (cd_tipo_agenda_p in (3,4)) then
			if (ie_forma_setor_w = 'U') then
				cd_setor_atend_ult_w := obter_ultimo_setor_agenda(cd_pessoa_lista_w, cd_setor_atend_ult_w);
			end if;

			if (ie_obter_med_req_w = 'U') then
				cd_medico_req_ult_w	:= Agecons_Obter_Med_Req(cd_pessoa_lista_w, dt_agenda_w);
			end if;
		end if;
	end if;

	if (cd_tipo_agenda_p in (1,2)) then
		select 	max(hr_inicio)
		into STRICT	dt_novo_agendamento_w
		from 	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;

		select 	max(cd_medico)
		into STRICT	cd_medico_w
		from 	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_w;		
	end if;
	if (cd_tipo_agenda_p in (2,3,4,5)) then
		if (cd_tipo_agenda_p = 2) then
			cd_medico_regra_bloq_w := null;
			if (eh_medico_w = 'S') then
				cd_medico_regra_bloq_w := cd_medico_exec_w;
			end if;
			select 	max(nr_seq_proc_interno),
				max(cd_procedimento),
				max(ie_origem_proced)
			into STRICT	nr_seq_proc_interno_age_w,
				cd_procedimento_age_w,
				ie_origem_proced_age_w
			from	agenda_paciente
			where	nr_sequencia = nr_seq_agenda_p;
			
		elsif (cd_tipo_agenda_p in (3,4)) then
			cd_medico_regra_bloq_w := cd_medico_w;
		else
			select 	coalesce(cd_medico_exec_w,max(cd_medico)),
				max(nr_seq_proc_interno),
				max(cd_procedimento),
				max(ie_origem_proced)
			into STRICT	cd_medico_regra_bloq_w,
				nr_seq_proc_interno_age_w,
				cd_procedimento_age_w,
				ie_origem_proced_age_w
			from 	agenda_consulta
			where 	nr_sequencia = nr_seq_agenda_p;
		end if;
		
		nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(obter_estabelecimento_ativo,
						cd_agenda_p,
						ie_classif_agenda_w,
						nr_seq_classif_agenda_w,
						cd_especialidade_w,
						cd_setor_atendimento_w,
						coalesce(nr_seq_proc_interno_w,nr_seq_proc_interno_age_w),
						coalesce(cd_procedimento_w,cd_procedimento_age_w),
						coalesce(ie_origem_proced_w,ie_origem_proced_age_w),
						cd_medico_regra_bloq_w,
						coalesce(dt_agenda_w,dt_novo_agendamento_w),
						'N',
						'N');
		if (coalesce(nr_seq_regra_bloq_w,0) > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(obter_mensagem_bloq_geral_age(nr_seq_regra_bloq_w));
		end if;
	end if;

	if (cd_tipo_agenda_p in (3,4,5)) then 	/* agenda consulta */

		/* verificar horario livre */

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_livre_w
		from	agenda_consulta
		where	cd_agenda = cd_agenda_p
		and	nr_sequencia = nr_seq_agenda_p
		and	ie_status_agenda in ('L','LF');
				
		/* gerar agenda */

		if (ie_livre_w = 'S') and
			((cd_pessoa_lista_w IS NOT NULL AND cd_pessoa_lista_w::text <> '') or (nm_pessoa_lista_w IS NOT NULL AND nm_pessoa_lista_w::text <> '')) then
			begin
			
			if (consiste_agenda_sexo(cd_pessoa_lista_w,  cd_agenda_p) = 'N') then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(268471);			
			end if;
						
			SELECT * FROM consistir_classif_agecon(
				cd_estabelecimento_w, cd_pessoa_lista_w, dt_agenda_w, cd_agenda_p, cd_convenio_lista_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, ie_classif_agenda_w, nr_seq_agenda_p, ie_consistencia_convenio_w, ie_agenda_convenio_w) INTO STRICT ie_consistencia_convenio_w, ie_agenda_convenio_w
			;
			
			if (ie_agenda_convenio_w = 'N') then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(ie_consistencia_convenio_w);
			end if;
			-- Fim da Regra de consistancia de classificacao da agenda	
			
			update agenda_consulta
			set	ie_status_agenda	= 'N',
				dt_agendamento		= clock_timestamp(),
				nm_usuario_origem	= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario			= nm_usuario_p,
				cd_pessoa_fisica	= cd_pessoa_lista_w,
				nm_paciente			= nm_pessoa_lista_w,
				nr_telefone			= substr(nr_telefone_w,1,80),
				nm_pessoa_contato	= nm_pessoa_contato_w,
				cd_convenio			= cd_convenio_lista_w,
				cd_categoria		= cd_categ_lista_w,
				cd_plano 			= cd_plano_w,
				ds_observacao		= ds_observacao_w,
				ie_classif_agenda	= CASE WHEN ie_setor_clas_lista_esp_w='N' THEN ie_classif_agenda_w  ELSE ie_classif_agenda END ,
				cd_setor_atendimento	= CASE WHEN cd_tipo_agenda_p=5 THEN cd_setor_atendimento_w  ELSE CASE WHEN ie_setor_clas_lista_esp_w='N' THEN coalesce(cd_setor_atend_ult_w,cd_setor_atendimento_w)  ELSE cd_setor_atendimento END  END ,
				CD_MEDICO			= CASE WHEN cd_tipo_agenda_p=5 THEN coalesce(cd_medico_exec_w,cd_medico)  ELSE cd_medico_w END ,
				cd_procedimento		= coalesce(cd_procedimento_w,cd_procedimento),
				ie_origem_proced	= CASE WHEN coalesce(cd_procedimento_w,cd_procedimento) = NULL THEN  null  ELSE coalesce(ie_origem_proced_w,ie_origem_proced) END ,
				nr_seq_proc_interno	= coalesce(nr_seq_proc_interno_w,nr_seq_proc_interno),
				dt_nascimento_pac 	= dt_nascimento_pac_w,
				qt_idade_pac 		= qt_idade_paciente_w,
				cd_complemento 		= cd_complemento_w,
				qt_procedimento 	= qt_procedimento_w,
				dt_validade_carteira = dt_validade_carteira_w,
				nr_doc_convenio 	= nr_doc_convenio_w,
				cd_usuario_convenio	= cd_usuario_convenio_w,
				nr_seq_lista_espera	= nr_seq_lista_p,
				cd_cid				= cd_cid_w,
				ie_autorizacao		= ie_autorizacao_w,
				cd_senha			= cd_senha_w,
				cd_procedencia		= cd_procedencia_w,
				cd_especialidade    = cd_especialidade_w				
			where	nr_sequencia	= nr_seq_agenda_p;	
			
			nr_seq_agenda_new_w := nr_seq_agenda_p;

			if (cd_tipo_agenda_p = 5) then
				update	agenda_consulta
				set	cd_medico_solic = cd_medico_req_w
				where	nr_sequencia	= nr_seq_agenda_p;
			else
				update	agenda_consulta
				set	cd_medico_req 	= coalesce(cd_medico_req_ult_w,cd_medico_req_w)
				where	nr_sequencia	= nr_seq_agenda_p;
			end if;

			ie_agenda_w := 'S';

			--Tratar copia das informacoes originais do agendamento ao gerar agendamento a partir da lista de espera			
			if (ie_carrega_inf_ag_lista_esp_w = 'S') and (cd_tipo_agenda_p = 5)then
				begin
				CALL AgServ_Obter_Dados_Espera(cd_pessoa_lista_w, cd_estabelecimento_w, nr_seq_agecons_w, nr_seq_agenda_p, nm_usuario_p);
				end;			
			end if;
			
		exception
		when others then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||sqlerrm);
		end;
		else
			-- O horario selecionado nao existe mais ou ja encontra-se ocupado no momento, favor verificar!
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(191868);
		end if;

	elsif (cd_tipo_agenda_p in (1,2)) then /* agenda exame / Agenda Cirurgica */
				
		select	max(cd_medico),
			max(cd_procedimento),
			max(ie_origem_proced),
			max(nr_Seq_proc_interno),
			max(dt_agenda),
			max(cd_tipo_acomodacao)
		into STRICT	cd_medico_w,
			cd_proced_agenda_w,
			ie_origem_agenda_w,
			nr_seq_proc_int_agenda_w,
			dt_agenda_w,
			cd_tipo_acomodacao_w
		from	agenda_paciente
		where	nr_Sequencia	= nr_Seq_agenda_w;

		if (nr_Seq_proc_interno_exame_w IS NOT NULL AND nr_Seq_proc_interno_exame_w::text <> '') then

			SELECT * FROM Obter_Proc_Tab_Inter_Agenda(nr_Seq_proc_interno_exame_w, 0, cd_convenio_lista_w, null, cd_plano_w, cd_estabelecimento_w, dt_agenda_w, cd_tipo_acomodacao_w, null, null, null, null, null, null, null, cd_proc_exame_w, ie_origem_proc_exame_w) INTO STRICT cd_proc_exame_w, ie_origem_proc_exame_w;

		end if;

		/* verificar horario livre */

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_livre_w
		from	agenda_paciente
		where	cd_agenda = cd_agenda_p
		and	nr_sequencia = nr_seq_agenda_p
		and	ie_status_agenda = 'L';

		ie_status_agenda_w := null;
		if (cd_tipo_agenda_p = 1) then
			ie_status_agenda_w := ie_status_inicial_w;
		end if;	

		/* gerar agenda */

		if (ie_livre_w = 'S') and
			((cd_pessoa_lista_w IS NOT NULL AND cd_pessoa_lista_w::text <> '') or (nm_pessoa_lista_w IS NOT NULL AND nm_pessoa_lista_w::text <> '')) then
			begin
			 select CASE WHEN coalesce(cd_proc_exame_w,coalesce(cd_proced_agenda_w,cd_procedimento_w)) IS NULL THEN  null  ELSE coalesce(ie_origem_proc_exame_w,coalesce(ie_origem_agenda_w,ie_origem_proced_w)) END
			 into STRICT ie_origem_proced_agenda_pac_w
			;
	
			select	coalesce(max('S'),'N')
			into STRICT	eh_medico_w
			from	medico
			where	cd_pessoa_fisica = cd_medico_exec_w;

			BEGIN
				SELECT cd_profissional
				INTO STRICT cd_medico_wait_w
				FROM (  SELECT ele.cd_profissional
					FROM agenda_lista_espera   ale
					INNER JOIN equipe_lista_espera   ele ON ele.nr_seq_lista_espera = ale.nr_sequencia
					WHERE ale.nr_sequencia = nr_seq_lista_p
					AND cd_funcao IN (
					  SELECT fm.cd_funcao
					  FROM funcao_medico fm
					  WHERE fm.ie_medico = 'S'
					  AND fm.ie_cirurgiao = 'S'
					  )
					ORDER BY ele.nr_sequencia DESC
					  ) alias1 LIMIT 1;
			EXCEPTION WHEN no_data_found THEN
				cd_medico_wait_w := null;
			END;

			BEGIN
				SELECT cd_profissional
				INTO STRICT cd_anesthist_wait_w
				FROM (  SELECT ele.cd_profissional
				  FROM agenda_lista_espera   ale
				  INNER JOIN equipe_lista_espera   ele ON ele.nr_seq_lista_espera = ale.nr_sequencia
				  WHERE ale.nr_sequencia = nr_seq_lista_p
				  AND cd_funcao IN (
				  SELECT fm.cd_funcao
					FROM funcao_medico fm
					WHERE fm.ie_medico = 'S'
					  AND fm.ie_anestesista = 'S'
				  )
				  ORDER BY ele.nr_sequencia DESC
				) alias1 LIMIT 1;
			EXCEPTION WHEN no_data_found THEN
				cd_anesthist_wait_w := null;
			END;
			
			if (coalesce(cd_medico_wait_w::text, '') = '') then
				BEGIN
					SELECT cd_profissional
					INTO STRICT cd_medico_wait_w
					FROM (  SELECT aleprof.cd_profissional
						FROM agenda_lista_espera   ale
						INNER JOIN AGENDA_LISTA_ESPERA_PROF   aleprof ON aleprof.NR_SEQ_LISTA = ale.nr_sequencia
						WHERE ale.nr_sequencia = nr_seq_lista_p
						AND cd_funcao IN (
						  SELECT fm.cd_funcao
						  FROM funcao_medico fm
						  WHERE fm.ie_medico = 'S'
						  AND fm.ie_cirurgiao = 'S'
						  )
						ORDER BY aleprof.nr_sequencia DESC
						  ) alias3 LIMIT 1;
				EXCEPTION WHEN no_data_found THEN
					cd_medico_wait_w := null;
				END;
			end if;
			
			if (coalesce(cd_anesthist_wait_w::text, '') = '') then
				BEGIN
					SELECT cd_profissional
					INTO STRICT cd_anesthist_wait_w
					FROM (  SELECT aleprof.cd_profissional
						FROM agenda_lista_espera   ale
						INNER JOIN AGENDA_LISTA_ESPERA_PROF   aleprof ON aleprof.NR_SEQ_LISTA = ale.nr_sequencia
						WHERE ale.nr_sequencia = nr_seq_lista_p
						AND cd_funcao IN (
						  SELECT fm.cd_funcao
						  FROM funcao_medico fm
						  WHERE fm.ie_medico = 'S'
						  AND fm.ie_anestesista = 'S'
						  )
						ORDER BY aleprof.nr_sequencia DESC
						  ) alias3 LIMIT 1;
				EXCEPTION WHEN no_data_found THEN
					cd_anesthist_wait_w := null;
				END;
			end if;

			update agenda_paciente
			set	ie_status_agenda	= CASE WHEN dt_chegada_w = NULL THEN  CASE WHEN ie_status_agenda_w = NULL THEN 'N'  ELSE ie_status_agenda_w END   ELSE 'A' END ,
				dt_agendamento	= clock_timestamp(),
				nm_usuario_orig	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				cd_pessoa_fisica	= cd_pessoa_lista_w,
				nm_paciente	= nm_pessoa_lista_w,
				nr_telefone	= substr(nr_telefone_w,1,80),
				nm_pessoa_contato	= nm_pessoa_contato_w,
				cd_convenio		= cd_convenio_lista_w,
				cd_categoria		= cd_categ_lista_w,
				ds_observacao		= ds_observacao_w,
				dt_chegada		= dt_chegada_w,
				cd_medico = COALESCE(cd_medico_wait_w,cd_medico_req_w, cd_medico_w, cd_medico_exec_w),
        			cd_anestesista  = cd_anesthist_wait_w,
				cd_procedimento		= coalesce(cd_proc_exame_w,coalesce(cd_proced_agenda_w,cd_procedimento_w)),
				ie_origem_proced	= ie_origem_proced_agenda_pac_w,
				nr_Seq_proc_interno	= coalesce(nr_Seq_proc_interno_exame_w,coalesce(nr_seq_proc_int_agenda_w,nr_Seq_proc_interno_w)),
				ie_forma_agendamento = ie_forma_agendamento_w,
				cd_setor_atendimento = cd_setor_atendimento_w,
				cd_medico_exec 		 = CASE WHEN eh_medico_w='S' THEN cd_medico_exec_w  ELSE null END ,
				ie_lado =	ie_lado_w,
				cd_empresa_ref = cd_empresa_ref_w,
				nr_doc_convenio = nr_doc_convenio_w,
				cd_plano = cd_plano_w,
				dt_validade_carteira = dt_validade_carteira_w,
				cd_usuario_convenio = cd_usuario_convenio_w,
				cd_procedencia = cd_procedencia_w,
				qt_peso = qt_peso_w,
				qt_altura_cm = qt_altura_cm_w,
				dt_nascimento_pac = dt_nascimento_pac_w,
				qt_idade_paciente = qt_idade_paciente_w,
				qt_idade_mes      = qt_idade_mes_w,
				nr_seq_classif_agenda = nr_seq_classif_agenda_w,
				nr_seq_indicacao = nr_seq_indicacao_w,
				nr_seq_lista	= nr_seq_lista_p,
				dt_chegada_prev			= dt_prevista_internacao_w,
				cd_doenca_cid			= cd_cid_w,
				ie_autorizacao = ie_autorizacao_w,
				nr_Seq_segurado		= nr_Seq_segurado_w,
				cd_tipo_anestesia	= cd_tipo_anestesia_w,
				nr_seq_tipo_classif_pac = nr_seq_tipo_classif_pac_w,
				nr_atendimento          = nr_atendimento_w,
				ds_cirurgia		= ds_cirurgia_w,
				ie_anestesia		= ie_anestesia_w,
				nr_minuto_duracao	= CASE WHEN ie_transf_recalculo_w='S' THEN  CASE WHEN coalesce(nr_minuto_duracao_www, 0)=0 THEN  nr_minuto_duracao  ELSE nr_minuto_duracao_www END   ELSE nr_minuto_duracao END
			where	nr_sequencia		= nr_seq_agenda_p;

            SELECT
                MAX(nr_sequencia)
            INTO STRICT nr_seq_agenda_aux_w
            FROM
                agenda_paciente_auxiliar apa
            WHERE
                apa.nr_seq_agenda = nr_seq_agenda_p;

             SELECT
                    max(nr_seq_cpoe_procedimento)
                INTO STRICT nr_seq_proc_cpoe_p
                FROM
                    agenda_lista_espera
                WHERE
                    nr_sequencia = nr_seq_lista_p;
            IF ( coalesce(nr_seq_agenda_aux_w, 0) > 0 and (nr_seq_proc_cpoe_p IS NOT NULL AND nr_seq_proc_cpoe_p::text <> '')) THEN
                    UPDATE agenda_paciente_auxiliar
                    SET
                        nr_seq_cpoe_procedimento = nr_seq_proc_cpoe_p
                    WHERE
                        nr_sequencia = nr_seq_agenda_aux_w;
            ELSE
                INSERT INTO agenda_paciente_auxiliar(
                    nr_sequencia,
                    dt_atualizacao,
                    nm_usuario,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    nr_seq_cpoe_procedimento,
                    nr_seq_agenda
                ) VALUES (
                    nextval('agenda_paciente_auxiliar_seq'),
                    clock_timestamp(),
                    nm_usuario_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    nr_seq_proc_cpoe_p,
                    nr_seq_agenda_p
                );

            END IF;
			commit;

			nr_seq_agenda_new_w := nr_seq_agenda_p;
			
			if (nr_minuto_duracao_www IS NOT NULL AND nr_minuto_duracao_www::text <> '') and (ie_transf_recalculo_w = 'S') and (cd_tipo_agenda_p = 1) then
			    CALL atualizar_age_seguintes_wl2(nr_seq_agenda_p, nr_minuto_duracao_www, nm_usuario_p);
			end if;
			
			if (coalesce(cd_departamento_medico_exec_w, 0) > 0 or (ie_posicao_w IS NOT NULL AND ie_posicao_w::text <> ''))then
				CALL Gravar_Depto_Setor_Agenda_Cir(nr_seq_agenda_p, cd_departamento_medico_exec_w, cd_setor_atendimento_w, nm_usuario_p, ie_posicao_w, null);
			end if;

			begin
			
			select count(*)
			into STRICT   qt_anexo_lista_espera_w
			from   anexo_agenda
			where  nr_seq_lista_espera = nr_seq_lista_p;
			
			if (qt_anexo_lista_espera_w > 0) then
				UPDATE anexo_agenda
				SET    NR_SEQ_AGENDA 	    = nr_seq_agenda_p
				WHERE  nr_seq_lista_espera  = nr_seq_lista_p;		
			end if;
			
			exception
				when others then
				null;
			end;
			
			CALL cpoe_vincular_agenda(nr_seq_lista_p, nr_seq_agenda_p);
			if (cd_tipo_agenda_p = 1) then
				if (ie_gerar_pre_agenda_w = 'S') then
					SELECT * FROM gerar_dados_pre_agenda(coalesce(cd_proc_exame_w,coalesce(cd_proced_agenda_w,cd_procedimento_w)), ie_origem_proced_agenda_pac_w, nr_seq_agenda_p, coalesce(nr_Seq_proc_interno_exame_w,coalesce(nr_seq_proc_int_agenda_w,nr_Seq_proc_interno_w)), coalesce(cd_medico_req_w,coalesce(cd_medico_w,cd_medico_exec_w)), cd_pessoa_lista_w, nm_usuario_p, cd_convenio_lista_w, null, '', cd_estabelecimento_w, 'S', 'S', 'S', 'S', 'S', ds_erro_w, ds_erro_2_w) INTO STRICT ds_erro_w, ds_erro_2_w;
					if (ds_erro_2_w IS NOT NULL AND ds_erro_2_w::text <> '') then
						ds_erro_p:= substr(ds_erro_2_w,1,255);
					end if;
				end if;
				
				CALL transf_proc_waiting_list(nr_seq_agenda_p, nr_seq_lista_p, 'W');
				CALL transf_equip_waiting_list(nr_seq_agenda_p, nr_seq_lista_p, 'W');
				CALL transf_prof_waiting_list(nr_seq_agenda_p, nr_seq_lista_p, 'W');
			end if;
			
			ie_agenda_w := 'S';
			end;
		else
			-- O horario selecionado nao existe mais ou ja encontra-se ocupado no momento, favor verificar!
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(191868);
		end if;
	end if;

	/* atualizar lista espera */

	if (ie_lista_p = 'S') and (ie_agenda_w = 'S') then
		update	agenda_lista_espera
		set	ie_status_espera	= 'E'
		where	nr_sequencia		= nr_seq_lista_p;
		
		ie_cancelar_w := 'N';
		
		if (cd_tipo_agenda_p in (3,4)) and ((ie_canc_agenda_origem_cons_w	= 'C') or (ie_canc_agenda_origem_cons_w = 'S')) then
			ie_cancelar_w	:= 'S';
		elsif (cd_tipo_agenda_p = 5) and ((ie_canc_agenda_origem_cons_w	= 'R') or (ie_canc_agenda_origem_cons_w = 'S')) then
			ie_cancelar_w	:= 'S';
		end if;
		if (cd_tipo_agenda_p in (3,4,5)) and (nr_seq_agecons_w <> 0) and (ie_cancelar_w = 'S') then
			select 	max(dt_agenda)
			into STRICT	dt_novo_agendamento_w
			from 	agenda_consulta
			where	nr_sequencia = nr_seq_agenda_p;

			update	agenda_consulta
			set	ie_status_agenda = 'C',				
				DS_MOTIVO_COPIA_TRANS = expressao1_w || ' ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_novo_agendamento_w, 'short', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone) || ' ' || expressao2_w || ' (' || to_char(nr_seq_lista_p) || ')'
			where 	nr_sequencia = nr_seq_agecons_w
			and	ie_status_agenda <> 'E';

		elsif (cd_tipo_agenda_p in (1,2)) and (nr_seq_agenda_w <> 0) and (ie_canc_agenda_origem_exame_w	= 'S') then
			select 	max(hr_inicio)
			into STRICT	dt_novo_agendamento_w
			from 	agenda_paciente
			where	nr_sequencia = nr_seq_agenda_p;

			update	agenda_paciente
			set	ie_status_agenda = 'C',
				DS_MOTIVO_COPIA_TRANS = expressao1_w || ' ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_novo_agendamento_w, 'short', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone) || ' ' || expressao2_w || ' (' || to_char(nr_seq_lista_p) || ')'
			where 	nr_sequencia = nr_seq_agenda_w
			and	ie_status_agenda <> 'E';
		end if;
	end if;

  if (ie_multi_schedule_p = 'S') then
    SELECT * FROM Inserir_AgeInt_DailyCalendar(
      CD_AGENDA_P, NR_SEQ_AGENDA_P, nr_seq_ageint_w, CD_TIPO_AGENDA_P, dt_agenda_w, cd_pessoa_lista_w, cd_convenio_lista_w, OBTER_ESTABELECIMENTO_ATIVO, NM_USUARIO_P, cd_medico_req_w, cd_especialidade_w, cd_procedimento_w, nr_seq_proc_interno_w, nr_minuto_duracao_p, ds_dado_clinico_w, nr_seq_agenint_item_w, cd_medico_req_w, ds_observacao_w, nm_pessoa_lista_w, nr_telefone_w, null, null, ds_erro_p) INTO STRICT nr_seq_ageint_w, nr_seq_agenint_item_w, ds_erro_p;
  end if;

end if;

commit;

nr_seq_agenda_new_p := nr_seq_agenda_new_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_agenda_lista_espera ( cd_tipo_agenda_p bigint, cd_agenda_p bigint, nr_seq_agenda_p bigint, nr_seq_lista_p bigint, ie_lista_p text, nm_usuario_p text, ie_multi_schedule_p text default 'N', nr_minuto_duracao_p bigint default null, ds_erro_p INOUT text DEFAULT NULL, NR_SEQ_AGENDA_NEW_P INOUT bigint DEFAULT NULL) FROM PUBLIC;

