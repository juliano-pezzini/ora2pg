-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE list_varchar AS (list_varchar varchar(2000)[100]);


CREATE OR REPLACE PROCEDURE gel_gerar_malote ( ds_lista_p text, nm_usuario_p text, nr_seq_local_p text, ds_observacao_p text, cd_funcao_p bigint default 9047, ds_observacao_env_p text default null) AS $body$
DECLARE


ds_lista_w			varchar(1000);
tam_lista_w			bigint;
ie_pos_virgula_w		smallint;
nr_Seq_envelope_w		bigint;
nr_seq_malote_w			bigint;
nr_seq_malote_item_w		bigint;
nr_seq_laudo_w			bigint;
nr_seq_result_lab_w		bigint;
dt_checagem_w			timestamp;
ie_confere_malote_w		varchar(2);
cd_funcao_w          bigint;
observ_envelope			list_varchar := list_varchar();
ds_observacao_lista_w		varchar(4000);
ds_observacao_envel_w		varchar(2000);
nr_conta_iteracao		smallint;

C01 CURSOR FOR
SELECT	nr_seq_laudo,
	nr_seq_result_lab
from	envelope_laudo_item
where	nr_seq_envelope = nr_seq_envelope_w;


BEGIN

nr_conta_iteracao := 1;
ds_observacao_lista_w := ds_observacao_env_p;
while(ds_observacao_lista_w IS NOT NULL AND ds_observacao_lista_w::text <> '') loop
    begin
	tam_lista_w		:= length(ds_observacao_lista_w);
	ie_pos_virgula_w		:= position('|' in ds_observacao_lista_w);
    if (ie_pos_virgula_w <> 0) then
		ds_observacao_envel_w	:= substr(ds_observacao_lista_w,1,(ie_pos_virgula_w - 1));
		ds_observacao_lista_w		:= substr(ds_observacao_lista_w,(ie_pos_virgula_w + 1),tam_lista_w);
		observ_envelope.extend;
		observ_envelope(observ_envelope.count) := ds_observacao_envel_w;
	end if;
    end;
end loop;

tam_lista_w := null;
ie_pos_virgula_w := null;
ds_observacao_envel_w := null;

cd_funcao_w := coalesce(obter_funcao_ativa,9047);

if (cd_funcao_w = 9047) then
	ie_confere_malote_w	:=	coalesce(obter_valor_param_usuario(9047, 30, Obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');
else
	ie_confere_malote_w	:=	'N';
	
end if;

select	nextval('malote_envelope_laudo_seq')
into STRICT	nr_Seq_malote_w
;

insert	into malote_envelope_laudo(	
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_status_malote,
		ds_observacao
		)
	values (	
		nr_seq_malote_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		10,
		ds_observacao_p
		);

ds_lista_w := ds_lista_p;

-- IMPORTANT: In order to get the observation for each envelope, the values and positions on the 

-- ds_lista_p and ds_observacao_env_p parameters must be related.

-- Example: ds_lista_p = "EnvelopeId1,EnvelopeId2,EnvelopeId3", ds_observacao_env_p = "CommentId1|CommentId2|CommentId3"
while(ds_lista_w IS NOT NULL AND ds_lista_w::text <> '')  loop
	begin
	tam_lista_w		:= length(ds_lista_w);
	ie_pos_virgula_w		:= position(',' in ds_lista_w);

	if (ie_pos_virgula_w <> 0) then
		nr_seq_envelope_w	:= (substr(ds_lista_w,1,(ie_pos_virgula_w - 1)))::numeric;
		ds_lista_w		:= substr(ds_lista_w,(ie_pos_virgula_w + 1),tam_lista_w);
	end if;

	select	max(dt_checagem)
	into STRICT	dt_checagem_w
	from	envelope_laudo
	where	nr_sequencia = nr_seq_envelope_w;

	if ((dt_checagem_w IS NOT NULL AND dt_checagem_w::text <> '') or cd_funcao_w <> 9047) then

		select	nextval('malote_envelope_item_seq')
		into STRICT	nr_Seq_malote_item_w
		;

		if (observ_envelope.count > 0) then
			ds_observacao_envel_w := observ_envelope(nr_conta_iteracao);
		else
			ds_observacao_envel_w := NULL;
		end if;

		insert into malote_envelope_item( 	nr_Sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_malote,
						nr_seq_envelope,
                        ds_observacao_geracao)
				values (nr_seq_malote_item_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_malote_w,
					nr_seq_envelope_w,
					ds_observacao_envel_w);

		update	envelope_laudo
		set	nr_seq_status_envelope = 20,
			nm_usuario = nm_usuario_p,
			dt_atualizacao = clock_timestamp()
		where	nr_sequencia = nr_seq_envelope_w;
	
		/**/

		
		if (cd_funcao_w = 9047) then
			update  malote_envelope_item
			set	dt_saida_entrega 		= clock_timestamp(),
				nm_usuario_saida_entrega 	= nm_usuario_p,
				dt_atualizacao 			= clock_timestamp(),
				nm_usuario 			= nm_usuario_p
			where	nr_seq_envelope 		= nr_seq_envelope_w;

			update	envelope_laudo
			set	dt_saida_entrega 		= clock_timestamp(),
				nm_usuario_saida_entrega 	= nm_usuario_p,
				dt_atualizacao 			= clock_timestamp(),
				nm_usuario = 			nm_usuario_p
			where	nr_sequencia = nr_seq_envelope_w;
			
			update	malote_envelope_laudo
			set	nr_seq_status_malote 		= 40,
				dt_saida_entrega 		= clock_timestamp(),
				nm_usuario_saida_entrega 	= nm_usuario_p,
				nr_seq_local_entrega		= nr_seq_local_p,
				nm_usuario		     	= nm_usuario_p,
				dt_atualizacao		 	= clock_timestamp()
			where	nr_sequencia			= nr_seq_malote_w;
		end if;		
		/**/

	end if;

	open C01;
	loop
	fetch C01 into
		nr_seq_laudo_w,
		nr_seq_result_lab_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		CALL gel_gravar_historico_envelope(nr_seq_laudo_w, nr_seq_result_lab_w, nr_seq_envelope_w, nr_seq_malote_w, 'MG', nm_usuario_p);
		CALL gel_gravar_historico_envelope(nr_seq_laudo_w, nr_seq_result_lab_w, nr_seq_envelope_w, nr_seq_malote_w, 'DSE', nm_usuario_p);
		end;
	end loop;
	close C01;

	end;
	nr_conta_iteracao := nr_conta_iteracao + 1;
	end loop;

if (ie_confere_malote_w	= 'S') then
	begin
	CALL gel_confirmar_receb_malote(nr_Seq_malote_w,nm_usuario_p);
	end;
end if;	
	
commit;

begin
	CALL envia_sms_email_laudo(null,nr_Seq_malote_w,nm_usuario_p);
	commit;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(sqlerrm);
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gel_gerar_malote ( ds_lista_p text, nm_usuario_p text, nr_seq_local_p text, ds_observacao_p text, cd_funcao_p bigint default 9047, ds_observacao_env_p text default null) FROM PUBLIC;

