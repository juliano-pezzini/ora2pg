-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_95_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
i				integer;
ie_gera_ocorrencia_w		varchar(1);
cd_doenca_w			pls_diagnost_conta_obito.cd_doenca%type;
nr_declaracao_obito_w		pls_diagnost_conta_obito.nr_declaracao_obito%type;
ds_observacao_w			varchar(255);
nr_declaracao_obito_alt_w	pls_diagnost_conta_obito.nr_declaracao_obito%type;

tb_seq_selecao_w		pls_util_cta_pck.t_number_table;
tb_valido_w			pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w			pls_util_cta_pck.t_varchar2_table_4000;

-- Informações da regra
C01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	coalesce(a.ie_declaracao_obito, 'N') ie_declaracao_obito,
		coalesce(a.ie_cid_obito, 'N') ie_cid_obito,
		coalesce(a.ie_diag_obito, 'N') ie_diag_obito,
		ds_carac_valido
	from	pls_oc_cta_val_dados_obito	a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc; -- tem que verificar pelo menos o CID OU declaração de obito
-- carrega as contas que contemplarem a regra de glosa e possuam algum tipo de obito
C02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	conta.nr_sequencia nr_seq_conta,
		(SELECT	max(d.ie_obito)
		from	pls_motivo_saida d
		where	d.nr_sequencia = conta.nr_seq_motivo_encerramento) ie_obito,
		(select count(1)
		from	pls_decl_conta_obito_imp c
		where	c.nr_seq_conta = conta.nr_sequencia) cont_diagnost_conta_obito
	from	pls_conta_imp		conta,
		pls_oc_cta_selecao_imp	sel
	where	conta.nr_sequencia	= sel.nr_seq_conta
	and	sel.nr_id_transacao	= nr_id_transacao_pc
	and	sel.ie_valido 		= 'S';
BEGIN

-- somente executa se tem regra
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '')  then

	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_ocor_imp_pck.atualiza_campo_auxiliar(	'V',
							'N',
							nr_id_transacao_p,
							null);

	i := 0;



	-- carrega a regra
	for	r_C01_w in C01( nr_seq_combinada_p) loop

		--limpa as variáveis
		SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;

		-- valida as contas (o cursor já filtra as contas que possuem algum registro na pasta Óbito)
		for	r_C02_w in C02(nr_id_transacao_p) loop

			nr_declaracao_obito_w := null;

			if (r_C02_w.cont_diagnost_conta_obito > 0) then

				select	cd_doenca_obito,
					nr_declaracao
				into STRICT	cd_doenca_w,
					nr_declaracao_obito_w
				from	pls_decl_conta_obito_imp
				where	nr_seq_conta = r_C02_w.nr_seq_conta;

			end if;

			ie_gera_ocorrencia_w := 'N';
			tb_observacao_w(i) := null;
			ds_observacao_w := null;

			if (r_C01_w.ds_carac_valido IS NOT NULL AND r_C01_w.ds_carac_valido::text <> '') then
				if (nr_declaracao_obito_w IS NOT NULL AND nr_declaracao_obito_w::text <> '') then
					nr_declaracao_obito_alt_w := regexp_replace(nr_declaracao_obito_w, '[^'||r_c01_w.ds_carac_valido ||']', '');

					if	((nr_declaracao_obito_alt_w <> nr_declaracao_obito_w) or (coalesce(nr_declaracao_obito_alt_w::text, '') = '')) then
						ds_observacao_w	:= 'Declaração de óbito com caracteres inválidos.';
					end if;
				end if;
			end if;

			-- Duas condições aqui, a primeira vai avaliar o que foi informado na regra, as combinações de DO e CID
			--  A Segunda confirma se o motivo de saida é diferente de obito
			if	((-- Valida se necessário APENAS o D.O.
				 ((r_C01_w.ie_declaracao_obito = 'S') and (nr_declaracao_obito_w IS NOT NULL AND nr_declaracao_obito_w::text <> '') and (r_C01_w.ie_cid_obito = 'N')) or
				 -- OU valida se necessário APENAS CID
				 ((r_C01_w.ie_cid_obito = 'S') and (cd_doenca_w IS NOT NULL AND cd_doenca_w::text <> '') and (r_C01_w.ie_declaracao_obito = 'N')) or
				 -- OU se for necessário validar D.O E CID
				 ((r_C01_w.ie_declaracao_obito = 'S') and (nr_declaracao_obito_w IS NOT NULL AND nr_declaracao_obito_w::text <> '') and (r_C01_w.ie_cid_obito = 'S') and (cd_doenca_w IS NOT NULL AND cd_doenca_w::text <> '')) or
				 -- OU se não for necessario nem D.O. E nem CID, tabém valida o motivo de saida
				 (r_C01_w.ie_declaracao_obito = 'N' AND r_C01_w.ie_cid_obito = 'N')) and
				-- Segunda parte, tem que te possuir o motivo de saida de internação diferente de Óbito
				(r_C02_w.ie_obito <> 'S')) or
				(((r_C01_w.ie_diag_obito = 'S') and (r_C02_w.cont_diagnost_conta_obito <= 0) and (r_C02_w.ie_obito = 'S'))) or (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '') then

				if (coalesce(ds_observacao_w::text, '') = '') then
					--O motivo de saida não é utilizado para óbito
					ds_observacao_w:= wheb_mensagem_pck.get_texto(791597);
				end if;

				tb_seq_selecao_w(i) := r_C02_w.nr_seq_conta;
				tb_observacao_w(i) := ds_observacao_w;
				tb_valido_w(i) := 'S';
				ie_gera_ocorrencia_w := 'S';
			end if;

			if (ie_gera_ocorrencia_w = 'S') then

				if ( i >= pls_util_pck.qt_registro_transacao_w) then

					--Grava as informações na tabela de seleção
					CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
											tb_valido_w,
											tb_observacao_w,
											nr_id_transacao_p,
											'SEQ');
					--limpa as variáveis
					SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
					i := 0;
				else
					i := i + 1;
				end if;
			end if;
		end loop; -- C02
		if (i > 0) then
			begin
			--Grava as informações na tabela de seleção
			CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
									tb_valido_w,
									tb_observacao_w,
									nr_id_transacao_p,
									'SEQ');
			end;
		end if;

		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_ocor_imp_pck.atualiza_campo_valido('V',
							'N',
							ie_regra_excecao_p,
							null,
							nr_id_transacao_p,
							null);

	end loop; -- C01
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_95_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

