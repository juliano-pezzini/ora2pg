-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_evento_gerint (( nm_usuario_p text, cd_estabelecimento_p bigint, id_evento_p bigint, nr_atendimento_p bigint, ie_leito_extra_p text default null, dt_alta_p timestamp default null, ds_motivo_alta_p text default null, ds_justif_transferencia_p text default null, nr_seq_solic_internacao_p bigint default null, nr_seq_leito_p bigint default null, ds_ident_leito_p text default null, nr_seq_classif_p bigint default null, ie_status_unidade_p text default null, nr_cpf_paciente_p text default null, nr_cartao_sus_p text default null, cd_cid_p text default null, cd_evolucao_p bigint default null) is seq_gerint_evento_w GERINT_EVENTO_INTEGRACAO.nr_sequencia%type) RETURNS boolean AS $body$
BEGIN
	
	select	count(*)	
	into STRICT	qt_registros_w
	from	GERINT_EVENTO_INT_DADOS
	where	NR_SEQ_EVENTO = seq_gerint_evento_w;

	return(qt_registros_w > 0);
	
	end;
begin

/*
	id_evento_p :
	1	- Servico de bloqueio de leito;
	2	- Servico de desbloqueio de leito;
	3	- Servico de internacao;
	4	- Servico de internacao em um leito extra;
	5	- Servico de liberacao de internacao;
	6	- Servico de transferencia do leito da internacao;
	7	- Servico de reversao da internacao;
	8	- Servico de reversao da alta/obito;
	9	- Servico de solicitacao de Internacao;
	10	- Servico de nova evolucao do paciente;
	11  - Servico de permita de leito; 									Evento nao sera implementado pois nao possui processo no Tasy
	12	- Servico de consulta da situacao das Solicitacoes;
	13 	- Servico de identificacao do paciente;
	14 	- Servico de reinternacao da solicitacao;
	15 	- Servico de consulta das solicitacoes de um executante;
	16 	- Servico de solicitacao de transferencia de paciente internado;
	17 	- Servico de validacao de numero CERIH
	25 	- Servico de ocupacao de leito sem solicitacao previa cadastrada no GERINT
*/
	/*Sempre que possuir valor no parametro nr_seq_leito_p e pq esta sendo disparado os eventos 1 e 2*/

	commit;
	select	coalesce(nr_seq_leito_p,Obter_Unidade_Atendimento(nr_atendimento_p, 'A','NR'))
	into STRICT	nr_seq_interno_w
	;
	
	if (id_evento_p not in (1,2)) then
	
		select	max(nm_leito_integracao),
				obter_conversao_externa_int(null, 'UNIDADE_ATENDIMENTO', 'NR_SEQ_CLASSIF', max(NR_SEQ_CLASSIF), 'GERINT'),
				obter_conversao_externa_int(null, 'UNIDADE_ATENDIMENTO', 'IE_STATUS_UNIDADE', max(IE_STATUS_UNIDADE), 'GERINT'),
				coalesce(max(ie_temporario),'N')
		into STRICT	ds_ident_leito_w,
				ds_cod_tipo_leito_w,
				ds_ident_motivo_bloqueio_w,
				ie_leito_extra_w
		from 	unidade_atendimento
		where 	nr_seq_interno = nr_seq_interno_w;
	else
		ds_ident_leito_w := ds_ident_leito_p;
		ds_cod_tipo_leito_w := obter_conversao_externa_int(null, 'UNIDADE_ATENDIMENTO', 'NR_SEQ_CLASSIF', nr_seq_classif_p, 'GERINT');
		ds_ident_motivo_bloqueio_w := obter_conversao_externa_int(null, 'UNIDADE_ATENDIMENTO', 'IE_STATUS_UNIDADE', ie_status_unidade_p, 'GERINT');
	end if;	
	
	/*Tratamento especifico para o evento de alta, para considerar o ultimo leito integrado com o Gerint.*/

	if (coalesce(ds_ident_leito_w::text, '') = '') and (id_evento_p = 5)then
		SELECT	MAX(ds_ident_leito),
				MAX(ds_cod_tipo_leito)
		into STRICT	ds_ident_leito_w,
				ds_cod_tipo_leito_w
		FROM	gerint_evento_int_dados
		WHERE	nr_seq_evento = (	SELECT MAX(nr_sequencia)
									FROM   gerint_evento_integracao
									WHERE  id_evento IN (3,4,6)
									AND	   ie_situacao = 'S'
									AND	   nr_atendimento = nr_atendimento_p);
	end if;
	if (id_evento_p in (3,4,5,6,8,10,11,13,14,16)) then/* Somente estes eventos possuem o nr_protocolo_solicitacao*/
		select	max(nr_protocolo_solicitacao),
				max(nr_sequencia)
		into STRICT	nr_protocolo_solicitacao_w,
				nr_seq_solic_internacao_w
		from	gerint_solic_internacao
		where	nr_atendimento = nr_atendimento_p;
	elsif (id_evento_p = 7) then
		select	max(nr_protocolo_solicitacao),
				max(nr_seq_solic_inter)
		into STRICT	nr_protocolo_solicitacao_w,
				nr_seq_solic_internacao_w
		from	gerint_evento_integracao
		where	nr_atendimento = nr_atendimento_p
		and 	id_evento IN (3,4);
	end if;		
			
	cd_pessoa_fisica_w 	:= Obter_pessoa_atendimento(nr_atendimento_p, 'C');
	nm_pessoa_fisica_w 	:= Obter_pessoa_atendimento(nr_atendimento_p, 'N');	
	
	select	nextval('gerint_evento_integracao_seq')
	into STRICT	seq_gerint_evento_w
	;	
	
	if	((ds_ident_leito_w IS NOT NULL AND ds_ident_leito_w::text <> '')
	or  ((nr_seq_solic_internacao_p IS NOT NULL AND nr_seq_solic_internacao_p::text <> '')
	and ((id_evento_p = 9) or id_evento_p = 16))
	or	((id_evento_p = 12) or (id_evento_p = 13) or (id_evento_p = 14) or (id_evento_p = 15) or (id_evento_p = 25))) then
	
		if (id_evento_p = 1) then 
			
			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_SEQ_SOLIC_INTER
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_seq_solic_internacao_w
													);
													
			insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
													DS_IDENT_LEITO,
													DS_COD_TIPO_LEITO,
													DS_IDENT_MOTIVO_BLOQUEIO
													)
										values (	seq_gerint_evento_w,
													ds_ident_leito_w,
													ds_cod_tipo_leito_w,
													ds_ident_motivo_bloqueio_w
													);
		
		elsif (id_evento_p = 2) then
		
			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_SEQ_SOLIC_INTER
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_seq_solic_internacao_w
													);
													
			insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
													DS_IDENT_LEITO,
													DS_COD_TIPO_LEITO
													)
										values (	seq_gerint_evento_w,
													ds_ident_leito_w,
													ds_cod_tipo_leito_w
													);																									
		
		elsif (id_evento_p = 3 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then

			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_PROTOCOLO_SOLICITACAO,
													NR_SEQ_SOLIC_INTER,
													NR_ATENDIMENTO
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_protocolo_solicitacao_w,
													nr_seq_solic_internacao_w,
													nr_atendimento_p
													);													
			if	existeDadosEvento() then
				update	GERINT_EVENTO_INT_DADOS
				set 	DS_IDENT_LEITO = ds_ident_leito_w,
						DS_COD_TIPO_LEITO = ds_cod_tipo_leito_w
				where 	NR_SEQ_EVENTO = seq_gerint_evento_w;				
			else 			
				insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
														DS_IDENT_LEITO,
														DS_COD_TIPO_LEITO
														)
											values (	seq_gerint_evento_w,
														ds_ident_leito_w,
														ds_cod_tipo_leito_w
														);
			end if;
		
		elsif (id_evento_p = 4 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then

			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_PROTOCOLO_SOLICITACAO,
													NR_SEQ_SOLIC_INTER,
													NR_ATENDIMENTO
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_protocolo_solicitacao_w,
													nr_seq_solic_internacao_w,
													nr_atendimento_p
													);

			if	existeDadosEvento() then
				update	GERINT_EVENTO_INT_DADOS
				set 	DS_IDENT_LEITO = ds_ident_leito_w,
						DS_COD_TIPO_LEITO = ds_cod_tipo_leito_w
				where 	NR_SEQ_EVENTO = seq_gerint_evento_w;				
			else 			
				insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
														DS_IDENT_LEITO,
														DS_COD_TIPO_LEITO,
														IE_LEITO_EXTRA
														)
											values (	seq_gerint_evento_w,
														ds_ident_leito_w,
														ds_cod_tipo_leito_w,
														ie_leito_extra_p
														);
			end if;

		elsif (id_evento_p = 5 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then
		
			select	coalesce(max(nr_sequencia), 0)
			into STRICT	nr_seq_alta_w
			from	atendimento_alta
			where	nr_atendimento = nr_atendimento_p;

			if (nr_seq_alta_w > 0) then
				nr_seq_rtf_w := converte_rtf_string('	select	ds_orientacao from	atendimento_alta where nr_sequencia = :nr_seq_alta_w', nr_seq_alta_w, nm_usuario_p, nr_seq_rtf_w);

				begin
				select	ds_texto
					into STRICT	var_long
				from	tasy_conversao_rtf
				where	nr_sequencia = nr_seq_rtf_w;
			exception
			when others then
				var_long := null;
			end;

				ds_orientacao_alta_w := var_long;
			end if;
			
			select max(obter_rec_prescricao(
					(select	max(c.nr_sequencia)
							 from	prescr_recomendacao c
							 where	c.nr_prescricao = d.nr_prescricao),
							d.nr_prescricao)) prescr_alta 
			into STRICT	cd_recomendacao_w
			from (	SELECT	max(b.nr_prescricao) nr_prescricao	
					from	prescr_recomendacao b,
							prescr_medica a
					where	a.nr_prescricao = b.nr_prescricao			
					and	a.nr_atendimento = nr_atendimento_p
					and	b.cd_recomendacao in (410, 423)) d;

			if (coalesce(cd_recomendacao_w::text, '') = '') then
			
				select	obter_motivo_alta_atend(nr_atendimento_p)
				into STRICT	cd_recomendacao_w
				;
			
			end if;
					
			select 	max(x.cd_cid_principal)
			into STRICT	cd_doenca_w
			from 	sus_laudo_paciente x
			where	x.nr_seq_interno = (    SELECT	max(a.NR_SEQ_INTERNO)
							from	sus_laudo_paciente a,
								atendimento_paciente b
							where	a.nr_atendimento = b.nr_atendimento
							and	b.cd_pessoa_fisica = cd_pessoa_fisica_w
							and     (a.cd_cid_principal IS NOT NULL AND a.cd_cid_principal::text <> '')
							and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '') );
						
			if (coalesce(cd_doenca_w::text, '') = '') then
				select	max(cd_doenca)
				into STRICT	cd_doenca_w
				from	diagnostico_doenca a
				where	a.nr_atendimento = nr_atendimento_p
				and	ie_classificacao_doenca = 'P'
				and	dt_diagnostico = (	SELECT	max(dt_diagnostico)
								from 	diagnostico_doenca b 
								where 	nr_atendimento = nr_atendimento_p 
								and	ie_classificacao_doenca = 'P' );
			end if;
			
			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_PROTOCOLO_SOLICITACAO,
													NR_SEQ_SOLIC_INTER,
													NR_ATENDIMENTO
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_protocolo_solicitacao_w,
													nr_seq_solic_internacao_w,
													nr_atendimento_p
													);

			insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
													DS_IDENT_LEITO,
													DS_COD_TIPO_LEITO,
													DT_ALTA,
													DS_MOTIVO_ALTA,
													CD_DOENCA,
													DS_ORIENTACAO,
													DS_RECOMENDACAO 													
													)
										values (	seq_gerint_evento_w,
													ds_ident_leito_w,
													ds_cod_tipo_leito_w,
													dt_alta_p,
													ds_motivo_alta_p,
													cd_doenca_w,
													ds_orientacao_alta_w,
													cd_recomendacao_w
													);
				
			/*Precisa ser adicionado na procedure de tratamento do retorno da integracao.*/

			update	GERINT_SOLIC_INTERNACAO
			set		IE_SITUACAO 		= 'L',
					DT_GERACAO_EVENTO	= clock_timestamp(),
					NM_USUARIO 			= nm_usuario_p,
					DT_ATUALIZACAO 		= clock_timestamp()
			where	nr_sequencia 		= nr_seq_solic_internacao_w;
					

		elsif (id_evento_p = 6 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then

			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_PROTOCOLO_SOLICITACAO,
													NR_SEQ_SOLIC_INTER,
													NR_ATENDIMENTO
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_protocolo_solicitacao_w,
													nr_seq_solic_internacao_w,
													nr_atendimento_p
													);

			insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
													DS_IDENT_LEITO,
													DS_COD_TIPO_LEITO,
													DS_JUSTIF_TRANSFERENCIA,
													IE_LEITO_EXTRA
													)
										values (	seq_gerint_evento_w,
													ds_ident_leito_w,
													ds_cod_tipo_leito_w,
													ds_justif_transferencia_p,
													ie_leito_extra_p
													);
		
		elsif (id_evento_p = 7 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then

			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_PROTOCOLO_SOLICITACAO,
													NR_SEQ_SOLIC_INTER,
													NR_ATENDIMENTO
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_protocolo_solicitacao_w,
													nr_seq_solic_internacao_w,
													nr_atendimento_p
													);

			insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
													DS_IDENT_LEITO,
													DS_COD_TIPO_LEITO
													)
										values (	seq_gerint_evento_w,
													ds_ident_leito_w,
													ds_cod_tipo_leito_w
													);
			
		elsif (id_evento_p = 8 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then

			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_PROTOCOLO_SOLICITACAO,
													NR_SEQ_SOLIC_INTER,
													NR_ATENDIMENTO
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_protocolo_solicitacao_w,
													nr_seq_solic_internacao_w,
													nr_atendimento_p
													);

			insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
													DS_IDENT_LEITO,
													DS_COD_TIPO_LEITO,
													IE_LEITO_EXTRA
													)
										values (	seq_gerint_evento_w,
													ds_ident_leito_w,
													ds_cod_tipo_leito_w,
													ie_leito_extra_w
													);
													
			/*Precisa ser adicionado na procedure de tratamento do retorno da integracao.*/

			update	GERINT_SOLIC_INTERNACAO
			set		IE_SITUACAO 		= 'I',
					DT_GERACAO_EVENTO	= clock_timestamp(),
					NM_USUARIO 			= nm_usuario_p,
					DT_ATUALIZACAO 		= clock_timestamp()
			where	nr_sequencia 		= nr_seq_solic_internacao_w;
													
		elsif (id_evento_p = 9) then			
			nr_seq_solic_internacao_w := nr_seq_solic_internacao_p;
			
			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_SEQ_SOLIC_INTER
													)
										SELECT	seq_gerint_evento_w,
												nm_usuario_p,
												nm_pessoa_fisica,
												'N',
												id_evento_p,
												clock_timestamp(),
												clock_timestamp(),
												cd_estabelecimento,
												cd_pessoa_fisica,
												nr_seq_solic_internacao_w
										from	gerint_solic_internacao
										where	nr_sequencia = nr_seq_solic_internacao_p;
			
			insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
													NR_CARTAO_SUS,
													DS_TIPO_INTERNACAO,
													DS_TIPO_PROTOCOLO_ORIGEM,
													NR_PROTOCOLO_ORIGEM,
													DS_TIPO_ACESSO,
													IE_INTERNACAO_PROPRIA,
													DS_TIPO_LEITO,
													CD_CID_PRINCIPAL,
													NR_CPF_PROF_SOLICITANTE,
													DS_SINAIS_SINTOMAS,
													DS_JUSTIFICATIVA_INTERNACAO,
													DS_COR,
													QT_FREQ_CARDIACA,
													QT_FREQ_RESPIRATORIA,
													QT_PRESSAO_ART_MAXIMA,
													QT_PRESSAO_ART_MINIMA,
													QT_TEMPERATURA,
													QT_SATURACAO_O2,
													DS_NIVEL_CONSCIENCIA,
													DS_DEBITO_URINARIO,
													CD_PROCEDIMENTO,
													IE_DIALISE,
													DS_SUPORTE_O2,
													QT_FLUXO,
													QT_FIO2,
													QT_SAT_O2,
													QT_PEEP,
													NR_CPF_PACIENTE,
													DS_CONDICAO,
													NM_PESSOA_FISICA,
													DS_SEXO_PF,
													QT_IDADE_PF,
													DS_ENDERECO_PF,
													DS_MUNICIPIO_RESIDENCIA_PF,
													IE_TIPO_LEITO,
													cd_municipio_ibge
													)
										SELECT	seq_gerint_evento_w,
												nr_cartao_sus,
												obter_conversao_externa_int(null,'GERINT_SOLIC_INTERNACAO','IE_CARATER_INTER_SUS',ie_carater_inter_sus,'GERINT'),
												Gerint_desc_de_para(ie_protocolo_origem),
												nr_protocolo_origem,
												Obter_conversao_externa_int(null,'GERINT_SOLIC_INTERNACAO','NR_SEQ_FORMA_CHEGADA',nr_seq_forma_chegada,'GERINT'),
												ie_internacao_propria,
												obter_conversao_externa_int(null,'GERINT_SOLIC_INTERNACAO','IE_TIPO_LEITO',ie_tipo_leito,'GERINT'),
												cd_cid_principal,
												nr_cpf_medico_req,
												ds_sinal_sintoma,
												ds_condicao_justifica,
												ds_cor,
												qt_freq_cardiaca,
												qt_freq_resp,
												qt_pa_sistolica,
												qt_pa_diastolica,
												qt_temp,
												qt_saturacao_o2,
												obter_conversao_externa_int(null,'GERINT_SOLIC_INTERNACAO','IE_NIVEL_CONSCIENCIA',ie_nivel_consciencia,'GERINT'),
												ds_debito_urinario,
												cd_procedimento,
												ie_dialise,
												obter_conversao_externa_int(null,'GERINT_SOLIC_INTERNACAO','IE_DISP_RESP_ESP',ie_disp_resp_esp,'GERINT'),
												qt_fluxo_insp,
												qt_fio2,
												qt_sat_o2,
												qt_peep,
												CASE WHEN coalesce(nr_cartao_sus::text, '') = '' THEN nr_cpf_paciente  ELSE null END , --nao enviar se possuir CNS
												CASE WHEN coalesce(nr_cartao_sus::text, '') = '' THEN obter_conversao_externa_int(null,'GERINT_SOLIC_INTERNACAO','IE_CONDICAO',ie_condicao,'GERINT')  ELSE null END , --enviar somente se nao possuir CNS
												CASE WHEN ie_condicao='R' THEN nm_pessoa_fisica  ELSE CASE WHEN coalesce(nr_cartao_sus::text, '') = '' THEN CASE WHEN coalesce(nr_cpf_paciente::text, '') = '' THEN nm_pessoa_fisica  ELSE null END   ELSE null END  END , --nao enviar se possuir CNS/CPF
												CASE WHEN coalesce(nr_cartao_sus::text, '') = '' THEN CASE WHEN coalesce(nr_cpf_paciente::text, '') = '' THEN CASE WHEN ie_sexo='F' THEN 'FEMININO' WHEN ie_sexo='M' THEN 'MASCULINO'  ELSE null END   ELSE null END   ELSE null END , --nao enviar se possuir CNS/CPF
												CASE WHEN coalesce(nr_cartao_sus::text, '') = '' THEN CASE WHEN coalesce(nr_cpf_paciente::text, '') = '' THEN qt_idade  ELSE null END   ELSE null END , --nao enviar se possuir CNS/CPF
												CASE WHEN coalesce(nr_cartao_sus::text, '') = '' THEN CASE WHEN coalesce(nr_cpf_paciente::text, '') = '' THEN ds_endereco_pf  ELSE null END   ELSE null END , --nao enviar se possuir CNS/CPF
												CASE WHEN coalesce(nr_cartao_sus::text, '') = '' THEN CASE WHEN coalesce(nr_cpf_paciente::text, '') = '' THEN ds_municipio_pf  ELSE null END   ELSE null END , --nao enviar se possuir CNS/CPF
												ie_tipo_leito,
												cd_municipio_ibge
										from	gerint_solic_internacao
										where	nr_sequencia = nr_seq_solic_internacao_p;											
																				
			update	GERINT_SOLIC_INTERNACAO
			set		IE_SITUACAO	 		= 'O',
					DT_GERACAO_EVENTO	= clock_timestamp(),
					NM_USUARIO 			= nm_usuario_p,
					DT_ATUALIZACAO 		= clock_timestamp()
			where	nr_sequencia 		= nr_seq_solic_internacao_p;
			
		elsif (id_evento_p = 10 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then
		
		
			--Obter valores da tabela ATENDIMENTO_SINAL_VITAL	
			select	max(QT_FREQ_CARDIACA),
					max(QT_FREQ_RESP),
					max(QT_PA_SISTOLICA),
					max(QT_PA_DIASTOLICA),
					max(QT_TEMP),
					max(QT_SATURACAO_O2),
					max(IE_NIVEL_CONSCIENCIA)
			into STRICT	frequencia_cardiaca_w,
					frequencia_respiratoria_w,
					pressao_arterial_maxima_w,
					pressao_arterial_minima_w,
					temperatura_w,
					saturacao_o2_w,
					ie_nivel_consciencia_w
			from	atendimento_sinal_vital
			where	nr_sequencia = (SELECT 	max(nr_sequencia)
									from	atendimento_sinal_vital
									where	nr_atendimento = nr_atendimento_p
									and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
									and		coalesce(dt_inativacao::text, '') = '');
									
			--Obter valores da tabela ATENDIMENTO_MONIT_RESP
			select	max(QT_FLUXO_INSP),
					max(QT_FIO2),
					max(QT_SATURACAO_O2),
					max(QT_PEEP),
					max(IE_DISP_RESP_ESP)
			into STRICT	fluxo_w,
					fiO2_w,
					satO2_w,
					peep_w,
					ie_disp_resp_esp_w
			from	atendimento_monit_resp
			where	nr_sequencia = (SELECT 	max(nr_sequencia)
									from	atendimento_monit_resp
									where	nr_atendimento = nr_atendimento_p
									and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
									and		coalesce(dt_inativacao::text, '') = '');
									
			--Obter valores da tabela PRE_PARTO
			select	max(QT_CONTRACOES),
					max('S'),
					max(QT_BAT_CARDIO_FETAIS),
					max(IE_BOLSA_AMNIOTICA),
					max(DT_BOLSA_AMNIOTICA),
					max(IE_ASPECTO_LIQUIDO),
					max('N')
			into STRICT	qt_dinamica_w,
					ie_toque_nao_realizado_w,
					qt_bcf_w,
					ie_bolsa_integra_w,
					dt_ruptura_w,
					ds_cor_liquido_aminiotico_w,
					ie_grumos_w
			from	pre_parto
			where	nr_atendimento = nr_atendimento_p;
			
			--Obter valores da tabela PARTO
			select	max(ie_ecografia_normal),
					max(ds_anorm_ecografia)
			into STRICT	ie_ecografia_w,
					ds_ecografia_w
			from	parto
			where	nr_atendimento = nr_atendimento_p;
			
			nr_seq_rtf_w := converte_rtf_string('	select	ds_evolucao
									from	evolucao_paciente
									where	cd_evolucao = :nr_sequencia_p', cd_evolucao_p, nm_usuario_p, nr_seq_rtf_w);
			
			begin

			select	ds_texto
			into STRICT	var_long
			from	tasy_conversao_rtf
			where	nr_sequencia = nr_seq_rtf_w;

			exception
			when others then
				var_long := null;
			end;
									
			ds_evolucao_w := substr(var_long,1,3000);
			--Obter valores de function
			sensorio_w			:= obter_conversao_externa_int(null, 'GERINT_SOLIC_INTERNACAO',	'IE_NIVEL_CONSCIENCIA', ie_nivel_consciencia_w, 	'GERINT');
			suporteO2_w			:= obter_conversao_externa_int(null, 'GERINT_SOLIC_INTERNACAO',	'IE_DISP_RESP_ESP', 	ie_disp_resp_esp_w, 		'GERINT');
			debito_urinario_w 	:= 'NAO_AVALIADO';
			
			insert 	into	GERINT_EVENTO_INTEGRACAO(
							NR_SEQUENCIA,
							ID_EVENTO,
							NR_PROTOCOLO_SOLICITACAO,
							DT_ATUALIZACAO,
							NM_USUARIO,
							DT_ATUALIZACAO_NREC,
							NM_USUARIO_NREC,
							CD_PESSOA_FISICA,
							NM_PESSOA_FISICA,
							NR_ATENDIMENTO,
							IE_SITUACAO,
							CD_ESTABELECIMENTO,
							NR_SEQ_SOLIC_INTER)
					values (
							seq_gerint_evento_w,
							'10',
							nr_protocolo_solicitacao_w,
							clock_timestamp(),
							wheb_usuario_pck.get_nm_usuario,
							clock_timestamp(),
							wheb_usuario_pck.get_nm_usuario,
							cd_pessoa_fisica_w,
							obter_nome_pf(cd_pessoa_fisica_w),
							nr_atendimento_p,
							'N',
							wheb_usuario_pck.get_cd_estabelecimento,
							nr_seq_solic_internacao_w);							
			
			insert	into	GERINT_EVENTO_INT_DADOS(
							NR_SEQ_EVENTO,
							NR_PROTOCOLO_ORIGEM,
							DS_EVOLUCAO_CASO,
							QT_FREQ_CARDIACA,
							QT_FREQ_RESPIRATORIA,
							QT_PRESSAO_ART_MAXIMA,
							QT_PRESSAO_ART_MINIMA,
							QT_TEMPERATURA,
							QT_SATURACAO_O2,
							DS_NIVEL_CONSCIENCIA,
							DS_DEBITO_URINARIO,
							DS_SUPORTE_O2,
							QT_FLUXO,
							QT_FIO2,
							QT_SAT_O2,
							QT_PEEP,
							QT_DINAMICA,
							IE_TOQUE_NAO_REALIZADO,
							QT_BCF,
							IE_BOLSA_INTEGRA,
							DT_RUPTURA,
							DS_COR_LIQUIDO_AMINIOTICO,
							IE_GRUMOS,
							IE_ECOGRAFIA,
							DS_ECOGRAFIA,
							IE_DROGAS_VASOATIVAS)
					values (
							seq_gerint_evento_w,
							nr_protocolo_solicitacao_w,
							ds_evolucao_w,
							frequencia_cardiaca_w,
							frequencia_respiratoria_w,
							pressao_arterial_maxima_w,
							pressao_arterial_minima_w,
							temperatura_w,
							saturacao_o2_w,
							sensorio_w,
							debito_urinario_w,
							suporteO2_w,
							fluxo_w,
							fiO2_w,
							satO2_w,
							peep_w,
							qt_dinamica_w,
							ie_toque_nao_realizado_w,
							qt_bcf_w,
							ie_bolsa_integra_w,
							dt_ruptura_w,
							ds_cor_liquido_aminiotico_w,
							ie_grumos_w,
							ie_ecografia_w,
							ds_ecografia_w,
							'N'
					);

				
		
		elsif (id_evento_p = 12) then
			insert  into GERINT_EVENTO_INTEGRACAO(
													NR_SEQUENCIA,
													ID_EVENTO,
													NR_PROTOCOLO_SOLICITACAO,
													DT_ATUALIZACAO,
													NM_USUARIO,
													DT_ATUALIZACAO_NREC,
													NM_USUARIO_NREC,
													CD_PESSOA_FISICA,
													NM_PESSOA_FISICA,
													NR_ATENDIMENTO,
													IE_SITUACAO,
													CD_ESTABELECIMENTO,
													NR_SEQ_SOLIC_INTER)
											values (
													seq_gerint_evento_w,
													'12',
													null,
													clock_timestamp(),
													wheb_usuario_pck.get_nm_usuario,
													clock_timestamp(),
													wheb_usuario_pck.get_nm_usuario,
													null,
													null,
													null,
													'N',
													wheb_usuario_pck.get_cd_estabelecimento,
													null); 																
						
		elsif (id_evento_p = 13 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then
			insert  into GERINT_EVENTO_INTEGRACAO(
													NR_SEQUENCIA,
													ID_EVENTO,
													NR_PROTOCOLO_SOLICITACAO,
													DT_ATUALIZACAO,
													NM_USUARIO,
													DT_ATUALIZACAO_NREC,
													NM_USUARIO_NREC,
													CD_PESSOA_FISICA,
													NM_PESSOA_FISICA,
													NR_ATENDIMENTO,
													IE_SITUACAO,
													CD_ESTABELECIMENTO,
													NR_SEQ_SOLIC_INTER)
											values (
													seq_gerint_evento_w,
													'13',
													nr_protocolo_solicitacao_w,
													clock_timestamp(),
													wheb_usuario_pck.get_nm_usuario,
													clock_timestamp(),
													wheb_usuario_pck.get_nm_usuario,
													cd_pessoa_fisica_w,
													obter_nome_pf(cd_pessoa_fisica_w),
													nr_atendimento_p,
													'N',
													wheb_usuario_pck.get_cd_estabelecimento,
													nr_seq_solic_internacao_w);

			insert into GERINT_EVENTO_INT_DADOS(
													NR_SEQ_EVENTO,
													NR_CARTAO_SUS,
													NR_CPF_PACIENTE) 
											values (
													seq_gerint_evento_w,
													nr_cartao_sus_p,
													nr_cpf_paciente_p
											);
			
		elsif (id_evento_p = 14 AND nr_protocolo_solicitacao_w IS NOT NULL AND nr_protocolo_solicitacao_w::text <> '') then
			insert  into GERINT_EVENTO_INTEGRACAO(
													NR_SEQUENCIA,
													ID_EVENTO,
													NR_PROTOCOLO_SOLICITACAO,
													DT_ATUALIZACAO,
													NM_USUARIO,
													DT_ATUALIZACAO_NREC,
													NM_USUARIO_NREC,
													CD_PESSOA_FISICA,
													NM_PESSOA_FISICA,
													NR_ATENDIMENTO,
													IE_SITUACAO,
													CD_ESTABELECIMENTO,
													NR_SEQ_SOLIC_INTER) 
											values (
													seq_gerint_evento_w,
													'14',
													nr_protocolo_solicitacao_w,
													clock_timestamp(),
													wheb_usuario_pck.get_nm_usuario,
													clock_timestamp(),
													wheb_usuario_pck.get_nm_usuario,
													cd_pessoa_fisica_w,
													obter_nome_pf(cd_pessoa_fisica_w),
													nr_atendimento_p,
													'N',
													wheb_usuario_pck.get_cd_estabelecimento,
													nr_seq_solic_internacao_w);

			insert into GERINT_EVENTO_INT_DADOS(
													NR_SEQ_EVENTO,
													CD_CID_PRINCIPAL) 
											values (
													seq_gerint_evento_w,
													cd_cid_p
											);
			
		elsif (id_evento_p = 15) then
			--verifica se existe algum evento pendente de processamento
			
			Select 	count(*)
			into STRICT	qt_registros_w
			from	GERINT_EVENTO_INTEGRACAO
			where	ID_EVENTO = 15
			and		trunc(DT_ATUALIZACAO_NREC) = trunc(clock_timestamp())
			and		ie_situacao = 'N';
			
			if (qt_registros_w = 0) then
		
				insert  into GERINT_EVENTO_INTEGRACAO(
														NR_SEQUENCIA,
														ID_EVENTO,
														NR_PROTOCOLO_SOLICITACAO,
														DT_ATUALIZACAO,
														NM_USUARIO,
														DT_ATUALIZACAO_NREC,
														NM_USUARIO_NREC,
														CD_PESSOA_FISICA,
														NM_PESSOA_FISICA,
														NR_ATENDIMENTO,
														IE_SITUACAO,
														CD_ESTABELECIMENTO,
														NR_SEQ_SOLIC_INTER)
												values (
														seq_gerint_evento_w,
														'15',
														null,
														clock_timestamp(),
														wheb_usuario_pck.get_nm_usuario,
														clock_timestamp(),
														wheb_usuario_pck.get_nm_usuario,
														null,
														null,
														null,
														'N',
														wheb_usuario_pck.get_cd_estabelecimento,
														null); 	
			end if;
													
		elsif (id_evento_p = 16) then
			--Obter valores da tabela ATENDIMENTO_SINAL_VITAL	
			select	max(QT_FREQ_CARDIACA),
					max(QT_FREQ_RESP),
					max(QT_PA_SISTOLICA),
					max(QT_PA_DIASTOLICA),
					max(QT_TEMP),
					max(QT_SATURACAO_O2),
					max(IE_NIVEL_CONSCIENCIA)
			into STRICT	frequencia_cardiaca_w,
					frequencia_respiratoria_w,
					pressao_arterial_maxima_w,
					pressao_arterial_minima_w,
					temperatura_w,
					saturacao_o2_w,
					ie_nivel_consciencia_w
			from	atendimento_sinal_vital
			where	nr_sequencia = (SELECT 	max(nr_sequencia)
									from	atendimento_sinal_vital
									where	nr_atendimento = nr_atendimento_p
									and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
									and		coalesce(dt_inativacao::text, '') = '');
									
			--Obter valores da tabela ATENDIMENTO_MONIT_RESP
			select	max(QT_FLUXO_INSP),
					max(QT_FIO2),
					max(QT_SATURACAO_O2),
					max(QT_PEEP),
					max(IE_DISP_RESP_ESP)
			into STRICT	fluxo_w,
					fiO2_w,
					satO2_w,
					peep_w,
					ie_disp_resp_esp_w
			from	atendimento_monit_resp
			where	nr_sequencia = (SELECT 	max(nr_sequencia)
									from	atendimento_monit_resp
									where	nr_atendimento = nr_atendimento_p
									and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
									and		coalesce(dt_inativacao::text, '') = '');
									
			--Obter valores de function
			sensorio_w			:= obter_conversao_externa_int(null, 'GERINT_SOLIC_INTERNACAO',	'IE_NIVEL_CONSCIENCIA', ie_nivel_consciencia_w, 	'GERINT');
			suporteO2_w			:= obter_conversao_externa_int(null, 'GERINT_SOLIC_INTERNACAO',	'IE_DISP_RESP_ESP', 	ie_disp_resp_esp_w, 		'GERINT');
			debito_urinario_w 	:= 'NAO_AVALIADO';
			
			insert 	into	GERINT_EVENTO_INTEGRACAO(
							NR_SEQUENCIA,
							ID_EVENTO,
							NR_PROTOCOLO_SOLICITACAO,
							DT_ATUALIZACAO,
							NM_USUARIO,
							DT_ATUALIZACAO_NREC,
							NM_USUARIO_NREC,
							CD_PESSOA_FISICA,
							NM_PESSOA_FISICA,
							NR_ATENDIMENTO,
							IE_SITUACAO,
							CD_ESTABELECIMENTO,
							NR_SEQ_SOLIC_INTER)
					values (
							seq_gerint_evento_w,
							'16',
							nr_protocolo_solicitacao_w,
							clock_timestamp(),
							wheb_usuario_pck.get_nm_usuario,
							clock_timestamp(),
							wheb_usuario_pck.get_nm_usuario,
							cd_pessoa_fisica_w,
							obter_nome_pf(cd_pessoa_fisica_w),
							nr_atendimento_p,
							'N',
							wheb_usuario_pck.get_cd_estabelecimento,
							nr_seq_solic_internacao_w);							
			
			insert	into	GERINT_EVENTO_INT_DADOS(
							NR_SEQ_EVENTO,
							NR_PROTOCOLO_ORIGEM,
							DS_TIPO_LEITO,
							CD_CID_PRINCIPAL,
							DS_SINAIS_SINTOMAS,
							DS_JUSTIFICATIVA_INTERNACAO,
							QT_FREQ_CARDIACA,
							QT_FREQ_RESPIRATORIA,
							QT_PRESSAO_ART_MAXIMA,
							QT_PRESSAO_ART_MINIMA,
							QT_TEMPERATURA,
							QT_SATURACAO_O2,
							DS_NIVEL_CONSCIENCIA,
							DS_DEBITO_URINARIO,
							CD_PROCEDIMENTO,
							IE_DIALISE,
							DS_SUPORTE_O2,
							QT_FLUXO,
							QT_FIO2,
							QT_SAT_O2,
							QT_PEEP)
					SELECT 	seq_gerint_evento_w,
							nr_protocolo_solicitacao_w,
							obter_conversao_externa_int(null,'GERINT_SOLIC_INTERNACAO','IE_TIPO_LEITO',ie_tipo_leito,'GERINT'),
							cd_cid_principal,
							ds_sinal_sintoma,
							ds_condicao_justifica,
							frequencia_cardiaca_w,
							frequencia_respiratoria_w,
							pressao_arterial_maxima_w,
							pressao_arterial_minima_w,
							temperatura_w,
							saturacao_o2_w,
							sensorio_w,
							debito_urinario_w,
							cd_procedimento,
							ie_dialise,
							suporteO2_w,
							fluxo_w,
							fiO2_w,
							satO2_w,
							peep_w
					from	gerint_solic_internacao
					where	nr_sequencia = nr_seq_solic_internacao_p;							
		
		elsif (id_evento_p = 25) then
		
			select max(NR_CPF), max(NR_CARTAO_NAC_SUS), CASE WHEN max(ie_sexo)='F' THEN 'FEMININO' WHEN max(ie_sexo)='M' THEN 'MASCULINO'  ELSE null END
			into STRICT NR_CPF_W, NR_CARTAO_NAC_SUS_W, ie_sexo_w
			from pessoa_fisica
			where cd_pessoa_fisica = cd_pessoa_fisica_w;

			insert into GERINT_EVENTO_INTEGRACAO(	NR_SEQUENCIA,
													NM_USUARIO,
													NM_PESSOA_FISICA,
													IE_SITUACAO,
													ID_EVENTO,
													DT_ATUALIZACAO_NREC,
													DT_ATUALIZACAO,
													CD_ESTABELECIMENTO,
													CD_PESSOA_FISICA,
													NR_PROTOCOLO_SOLICITACAO,
													NR_SEQ_SOLIC_INTER,
													NR_ATENDIMENTO
													)
										values (	seq_gerint_evento_w,
													nm_usuario_p,
													nm_pessoa_fisica_w,
													'N',
													id_evento_p,
													clock_timestamp(),
													clock_timestamp(),
													cd_estabelecimento_p,
													cd_pessoa_fisica_w,
													nr_protocolo_solicitacao_w,
													nr_seq_solic_internacao_w,
													nr_atendimento_p
													);	
													
			insert into GERINT_EVENTO_INT_DADOS(	NR_SEQ_EVENTO,
													NR_CARTAO_SUS, 
													DS_TIPO_INTERNACAO, 
													CD_CID_PRINCIPAL, 
													NR_CPF_PROF_SOLICITANTE, 
													DS_IDENT_LEITO,
													DS_COD_TIPO_LEITO, 
													IE_LEITO_EXTRA,													
													NR_CPF_PACIENTE,
													NM_PESSOA_FISICA,
													DS_SEXO_PF,
													QT_IDADE_PF,
													cd_municipio_ibge
													)
										values (	seq_gerint_evento_w,
													NR_CARTAO_NAC_SUS_W,
													CASE WHEN Obter_Tipo_Atendimento(nr_atendimento_p)=3 THEN 'URGENCIA'  ELSE 'ELETIVA' END ,
													cd_cid_p, 
													nr_cpf_paciente_p, 
													ds_ident_leito_w,
													ds_cod_tipo_leito_w,
													ie_leito_extra_p,
													NR_CPF_W,
													nm_pessoa_fisica_w,
													ie_sexo_w,
													obter_dados_pf(cd_pessoa_fisica_w,'I'), 
													substr(OBTER_DADOS_COMPL_PF(cd_pessoa_fisica_w,'M'),1,6)
												);
		end if;
	end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_evento_gerint (( nm_usuario_p text, cd_estabelecimento_p bigint, id_evento_p bigint, nr_atendimento_p bigint, ie_leito_extra_p text default null, dt_alta_p timestamp default null, ds_motivo_alta_p text default null, ds_justif_transferencia_p text default null, nr_seq_solic_internacao_p bigint default null, nr_seq_leito_p bigint default null, ds_ident_leito_p text default null, nr_seq_classif_p bigint default null, ie_status_unidade_p text default null, nr_cpf_paciente_p text default null, nr_cartao_sus_p text default null, cd_cid_p text default null, cd_evolucao_p bigint default null) is seq_gerint_evento_w GERINT_EVENTO_INTEGRACAO.nr_sequencia%type) FROM PUBLIC;

