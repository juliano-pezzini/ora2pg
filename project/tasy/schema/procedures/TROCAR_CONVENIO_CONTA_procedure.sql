-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE trocar_convenio_conta (nr_interno_conta_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_autorizacao_p text, nm_usuario_p text, ie_altera_valor_p text, ie_altera_atendimento_p text, ie_troca_sus_particular_p text, cd_plano_convenio_p text, dt_validade_carteira_p timestamp, cd_usuario_convenio_p text, ds_motivo_p text, cd_senha_p text, ie_todas_contas_atend_p text, dt_inicial_p timestamp, nr_seq_cobertura_p bigint, cd_tipo_acomodacao_p bigint, cd_empresa_p bigint, nr_seq_categoria_iva_p bigint default null) AS $body$
DECLARE


dt_atualizacao_w	       		 timestamp := clock_timestamp();
qt_categoria_w			integer;
nr_atendimento_w		conta_paciente.nr_atendimento%type;
ie_tipo_conv_origem_w		convenio.ie_tipo_convenio%type;
ie_tipo_conv_dest_w		convenio.ie_tipo_convenio%type;
cont_w				smallint;
qt_reg_w				bigint;
nr_sequencia_w			procedimento_paciente.nr_sequencia%type;
cd_procedimento_w		bigint;
cd_estabelecimento_w		conta_paciente.cd_estabelecimento%type;
dt_procedimento_w		procedimento_paciente.dt_procedimento%type;
nr_seq_proc_interno_w		procedimento_paciente.nr_seq_proc_interno%type;
ie_origem_proced_w		bigint;
ie_tipo_convenio_w			smallint;
nr_prescricao_w			procedimento_paciente.nr_prescricao%type;
cd_convenio_origem_w		conta_paciente.cd_convenio_parametro%type;
cd_categoria_origem_w		conta_paciente.cd_categoria_parametro%type;
ds_motivo_w			varchar(2000);
nr_seq_alerta_w			bigint;
ie_enviar_alerta_w			varchar(1);
ie_enviar_email_w			varchar(1);
ds_email_w			varchar(255);
ds_assunto_w			varchar(255);
ds_email_origem_w			varchar(255);
qt_plano_lib_categ_w		bigint;
cd_plano_w			atend_categoria_convenio.cd_plano_convenio%type;
cd_estab_atend_w		atendimento_paciente.cd_estabelecimento%type;
dt_entrada_w			atendimento_paciente.dt_entrada%type;
nr_interno_conta_w		conta_paciente.nr_interno_conta%type;
nr_interno_conta_ww		conta_paciente.nr_interno_conta%type;
cd_proced_conta_w		procedimento_paciente.cd_procedimento%type;
ie_origem_conta_w		procedimento_paciente.ie_origem_proced%type;
ie_gerar_autor_conv_w		varchar(10) := 'N';
ie_atualiza_doc_part_w		varchar(10) := 'N';
nr_seq_item_w			procedimento_paciente.nr_sequencia%type;
ie_proc_mat_w			varchar(10);
nr_seq_partic_w			procedimento_paciente.nr_sequencia%type;
ie_consiste_regra_lib_setor_w	varchar(1);
ie_atualiza_valor_gestao_w	varchar(1);
cd_empresa_cat_w		atend_categoria_convenio.cd_empresa%type;
nr_seq_classificacao_w		atendimento_paciente.nr_seq_classificacao%type;
ie_clinica_w			atendimento_paciente.ie_clinica%type;
cd_procedencia_w		atendimento_paciente.cd_procedencia%type;
nr_seq_tipo_acidente_w		atendimento_paciente.nr_seq_tipo_acidente%type;
nr_seq_queixa_w			atendimento_paciente.nr_seq_queixa%type;
nr_atendimento_ant_w		atendimento_paciente.nr_atendimento%type;
ie_tipo_convenio_ant_w		atendimento_paciente.ie_tipo_convenio%type;
nr_seq_queixa_ant_w		atendimento_paciente.nr_seq_queixa%type;
cd_pessoa_fisica_w		atendimento_paciente.cd_pessoa_fisica%type;
qt_idade_w			bigint;
ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;
ds_mensagem_w			varchar(255);
ie_bloq_atendimento_w		varchar(1);
cd_medico_w			atendimento_paciente.cd_medico_resp%type;
ie_tipo_alerta_w		bigint;
vl_anterior_w			double precision := 0;
vl_atual_w			double precision := 0;
qt_conta_w			bigint;
ie_altera_item_repasse_w	varchar(1) := 'S';
qt_proc_mat_repasse_w		bigint := 0;

cd_setor_item_w			procedimento_paciente.cd_setor_atendimento%type;
dt_conta_w			procedimento_paciente.dt_conta%type;

c01 CURSOR FOR
	SELECT	nr_sequencia,
		dt_procedimento,
		nr_seq_proc_interno,
		nr_prescricao,
		cd_procedimento,
		ie_origem_proced,
		cd_setor_atendimento,
		dt_conta
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_p;

c02 CURSOR FOR
	SELECT	coalesce(ds_email_envio,obter_compl_pf(cd_pessoa_fisica,2,'M'))
	from	regra_aviso_troca_convenio
	where	ie_situacao 	= 'A';

c03 CURSOR FOR
	SELECT 	nr_interno_conta
	from	conta_paciente
	where	nr_atendimento = nr_atendimento_w
	and	nr_interno_conta <> nr_interno_conta_p
	and	ie_status_acerto = 1;

c04 CURSOR FOR
	SELECT	1 ie_proc_mat,
		nr_sequencia
	from	procedimento_paciente
	where	nr_interno_conta = nr_interno_conta_p
	
union

	SELECT	2,
		nr_sequencia
	from	material_atend_paciente
	where	nr_interno_conta = nr_interno_conta_p;

c05 CURSOR FOR
	SELECT	nr_sequencia
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_ww;


BEGIN

select	count(*)
into STRICT	cont_w
from	atendimento_pacote b,
	procedimento_paciente a
where	a.nr_sequencia	= b.nr_seq_proc_origem
and	a.nr_interno_conta	= nr_interno_conta_p;

if (cont_w > 0) then
	-- Para fazer a troca de convenio desta conta, e necessario desfazer os pacotes da mesma!
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(190114);
end if;

if (coalesce(cd_categoria_p::text, '') = '') then
	-- A categoria nao foi informada
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(190116);
end if;
select	count(*)
into STRICT	qt_categoria_w
from	categoria_convenio
where	cd_convenio	= cd_convenio_p
  and	cd_categoria	= cd_categoria_p;

if (qt_categoria_w = 0) then
	-- A categoria invalida para este convenio
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(190117);
end if;

select	a.nr_atendimento,
	b.ie_tipo_convenio,
	a.cd_estabelecimento,
	a.cd_convenio_parametro,
	a.cd_categoria_parametro
into STRICT	nr_atendimento_w,
	ie_tipo_conv_origem_w,
	cd_estabelecimento_w,
	cd_convenio_origem_w,
	cd_categoria_origem_w
from	convenio b,
	conta_paciente a
where	a.nr_interno_conta	= nr_interno_conta_p
and	b.cd_convenio		= a.cd_convenio_parametro;


ie_gerar_autor_conv_w		:= coalesce(obter_valor_param_usuario(67,551,obter_perfil_ativo,nm_usuario_p,coalesce(cd_estabelecimento_w,0)),'N');
ie_atualiza_doc_part_w 		:= coalesce(obter_valor_param_usuario(67,596,obter_perfil_ativo,nm_usuario_p,coalesce(cd_estabelecimento_w,0)),'N');
ie_consiste_regra_lib_setor_w	:= coalesce(obter_valor_param_usuario(67,603,obter_perfil_ativo,nm_usuario_p,coalesce(cd_estabelecimento_w,0)),'N');
ie_atualiza_valor_gestao_w	:= coalesce(obter_valor_param_usuario(67,621,obter_perfil_ativo,nm_usuario_p,coalesce(cd_estabelecimento_w,0)),'N');
ie_altera_item_repasse_w	:= coalesce(obter_valor_param_usuario(1116,189,obter_perfil_ativo,nm_usuario_p,coalesce(cd_estabelecimento_w,0)),'S');


select	ie_tipo_convenio
into STRICT	ie_tipo_conv_dest_w
from	convenio
where	cd_convenio		= cd_convenio_p;

if (ie_troca_sus_particular_p = 'N') and (ie_tipo_conv_origem_w <> ie_tipo_conv_dest_w) and (ie_tipo_conv_origem_w in (1,3)) and (ie_tipo_conv_dest_w in (1,3)) then
	-- Voce nao tem permissao para trocar um convenio SUS para particular ou vice-versa!
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(190118);
end if;

if (ie_altera_item_repasse_w = 'N') then
	
	begin
	select	coalesce(sum(qt_proc_mat_repasse),0)
	into STRICT	qt_proc_mat_repasse_w
	from (SELECT	1 qt_proc_mat_repasse
		from	procedimento_paciente a,
			procedimento_repasse b
		where	a.nr_interno_conta = nr_interno_conta_p
		and	a.nr_sequencia     = b.nr_seq_procedimento
		
union

		SELECT	2
		from	material_atend_paciente c,
			material_repasse d
		where	c.nr_interno_conta = nr_interno_conta_p
		and	c.nr_sequencia	   = d.nr_seq_material) alias3
	where	1 = 1;
	exception
	when others then
		qt_proc_mat_repasse_w := 0;
	end;
	
	
	if (coalesce(qt_proc_mat_repasse_w,0) > 0) then
		
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(293916, 'NR_INTERNO_CONTA='||nr_interno_conta_p);
		
	end if;
	
end if;


if (ie_consiste_regra_lib_setor_w = 'S') and (ie_altera_atendimento_p = 'S') then

	select	max(cd_empresa)
	into STRICT	cd_empresa_cat_w
	from	atend_categoria_convenio
	where	nr_seq_interno = obter_atecaco_atendimento(nr_atendimento_w);

	select	max(nr_seq_classificacao),
		max(ie_clinica),
		max(cd_procedencia),
		max(nr_seq_tipo_acidente),
		max(nr_seq_queixa),
		max(cd_pessoa_fisica),
		max(ie_tipo_atendimento),
		max(cd_medico_resp)
	into STRICT	nr_seq_classificacao_w,
		ie_clinica_w,
		cd_procedencia_w,
		nr_seq_tipo_acidente_w,
		nr_seq_queixa_w,
		cd_pessoa_fisica_w,
		ie_tipo_atendimento_w,
		cd_medico_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_w;

	select	max(b.nr_atendimento)
	into STRICT	nr_atendimento_ant_w
	from	atendimento_paciente b
	where	nr_atendimento < nr_atendimento_w;
	
	begin
	select	a.ie_tipo_convenio,
			a.nr_seq_queixa
	into STRICT	ie_tipo_convenio_ant_w,
			nr_seq_queixa_ant_w
	from	atendimento_paciente a
	where	a.nr_atendimento = nr_atendimento_ant_w;
	exception
	when others then
		ie_tipo_convenio_ant_w := null;
		nr_seq_queixa_ant_w := null;
	end;

	qt_idade_w := substr(obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'A'), 1, 3);

	SELECT * FROM Obter_Se_Lib_Setor_Conv(
			cd_estabelecimento_w, cd_convenio_p, cd_categoria_p, ie_tipo_atendimento_w, 0, cd_plano_convenio_p, nr_seq_classificacao_w, ds_mensagem_w, ie_bloq_atendimento_w, ie_clinica_w, coalesce(cd_empresa_p, cd_empresa_cat_w), cd_procedencia_w, nr_seq_cobertura_p, nr_seq_tipo_acidente_w, cd_tipo_acomodacao_p, cd_medico_w, qt_idade_w, ie_tipo_convenio_ant_w, nr_seq_queixa_w, nr_seq_queixa_ant_w, clock_timestamp(), cd_pessoa_fisica_w) INTO STRICT ds_mensagem_w, ie_bloq_atendimento_w;

	if (ie_bloq_atendimento_w = 'B') then
		if (coalesce(ds_mensagem_w::text, '') = '') then
			CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(150769);
		else
			--#@DS_MENSAGEM#@
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(175911, 'DS_MENSAGEM='||ds_mensagem_w);
		end if;
	end if;
end if;

vl_anterior_w := coalesce(obter_valor_Conta(nr_interno_conta_p,0),0);

nr_interno_conta_ww := nr_interno_conta_p;

if (dt_inicial_p IS NOT NULL AND dt_inicial_p::text <> '') then
	nr_interno_conta_ww := desdobrar_conta_paciente(nr_interno_conta_p, dt_inicial_p, null, null, null, nm_usuario_p, nr_interno_conta_ww, null);
end if;


if (ie_altera_atendimento_p = 'S') then

	update	atend_categoria_convenio a
	set 	cd_plano_convenio	 = NULL,
		a.nm_usuario	= nm_usuario_p,
		a.dt_atualizacao  	= clock_timestamp()
	where	a.nr_seq_interno =	(SELECT	max(x.nr_seq_interno)
				from	atend_categoria_convenio x
				where	x.nr_atendimento = nr_atendimento_w);

	select 	max(cd_plano_convenio)
	into STRICT	cd_plano_w
	from	atend_categoria_convenio a
	where	a.nr_seq_interno = (	SELECT	max(x.nr_seq_interno)
				from	atend_categoria_convenio x
				where	x.nr_atendimento = nr_atendimento_w);

	select 	coalesce(max(cd_estabelecimento),cd_estabelecimento_w),
		max(dt_entrada)
	into STRICT	cd_estab_atend_w,
		dt_entrada_w
	from 	atendimento_paciente
	where 	nr_atendimento = nr_atendimento_w;


	-- Retirado essa consistencia, pois a mesma esta sendo feita no proprio lookup na funcao. (OS 156134)

	/*select 	count(*)
	into	qt_plano_lib_categ_w
	from 	convenio_plano
	where 	cd_convenio = cd_convenio_p
	and 	ie_situacao = 'A'
	and 	cd_plano = nvl(cd_plano_convenio_p, cd_plano_w)
	and 	Obter_Plano_Lib_Categoria(cd_convenio_p, cd_categoria_p, nvl(cd_plano_convenio_p, cd_plano_w), cd_estab_atend_w, dt_entrada_w) = 'S';

	if	(qt_plano_lib_categ_w = 0) then
	end if;*/
end if;

/*  atualizar a conta do paciente */

begin
	if (coalesce(nr_seq_categoria_iva_p::text, '') = '') then

		update conta_paciente
		set	cd_convenio_parametro	= cd_convenio_p,
			cd_autorizacao			= cd_autorizacao_p,
			cd_categoria_parametro	= cd_categoria_p,
			dt_atualizacao			= dt_atualizacao_w,
			nm_usuario				= nm_usuario_p,
			cd_convenio_calculo		= cd_convenio_p,
			cd_categoria_calculo	= cd_categoria_p
		where nr_interno_conta		= nr_interno_conta_ww;

	else

		update conta_paciente
		set	cd_convenio_parametro	= cd_convenio_p,
			cd_autorizacao			= cd_autorizacao_p,
			cd_categoria_parametro	= cd_categoria_p,
			dt_atualizacao			= dt_atualizacao_w,
			nm_usuario				= nm_usuario_p,
			cd_convenio_calculo		= cd_convenio_p,
			cd_categoria_calculo	= cd_categoria_p,
			nr_seq_categoria_iva	= nr_seq_categoria_iva_p
		where nr_interno_conta		= nr_interno_conta_ww;

	end if;
end;

/*  atualizar os procedimentos */

begin
if (ie_altera_valor_p = 'S') then
	update procedimento_paciente
	set	cd_convenio     	= cd_convenio_p,
	      	cd_categoria    	= cd_categoria_p,
	      	vl_procedimento 	= 0,
      		vl_medico       	= 0,
		vl_anestesista  	= 0,
		vl_materiais    	= 0,
		vl_auxiliares   	= 0,
		vl_custo_operacional 	= 0,
		ie_valor_informado 	= 'N',
		nr_doc_convenio 	= coalesce(cd_autorizacao_p, nr_doc_convenio),
		cd_senha		= coalesce(cd_senha_p,cd_senha)
	where nr_interno_conta  	= nr_interno_conta_ww;
else
	update procedimento_paciente
	set	cd_convenio     	= cd_convenio_p,
	      	cd_categoria    	= cd_categoria_p,
		nr_doc_convenio 	= coalesce(cd_autorizacao_p, nr_doc_convenio),
		cd_senha		= coalesce(cd_senha_p,cd_senha)
	where nr_interno_conta  	= nr_interno_conta_ww;
end if;

if (coalesce(ie_atualiza_doc_part_w,'N') = 'S') and (cd_autorizacao_p IS NOT NULL AND cd_autorizacao_p::text <> '') 		then

	open C05;
	loop
	fetch C05 into
		nr_seq_partic_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		update procedimento_participante
		set	nr_doc_honor_conv 	= coalesce(cd_autorizacao_p, nr_doc_honor_conv)
		where nr_sequencia  	= nr_seq_partic_w;
		end;
	end loop;
	close C05;
end if;

/* Edgar 28/05/2004 - Trocar os procedimentos do laboratorio conforme o convenio */

CALL trocar_convenio_exame_lab(nr_interno_conta_ww, nm_usuario_p);

end;

/*  atualizar os materiais */

begin
if (ie_altera_valor_p = 'S') then
	update material_atend_paciente
	set	cd_convenio	= cd_convenio_p,
	      	cd_categoria	= cd_categoria_p,
		vl_material	= 0,
		vl_unitario	= 0,
		ie_valor_informado	= 'N',
		nr_doc_convenio	= coalesce(cd_autorizacao_p, nr_doc_convenio),
		cd_senha		= coalesce(cd_senha_p,cd_senha)
	where nr_interno_conta	= nr_interno_conta_ww;
else
	update material_atend_paciente
	set	cd_convenio	= cd_convenio_p,
	      	cd_categoria	= cd_categoria_p,
		nr_doc_convenio	= coalesce(cd_autorizacao_p, nr_doc_convenio),
		cd_senha		= coalesce(cd_senha_p,cd_senha)
	where nr_interno_conta  	= nr_interno_conta_ww;
end if;
end;

if (ie_altera_atendimento_p = 'S') then

	select	count(*)
	into STRICT	qt_reg_w
	from	atend_categoria_convenio
	where	nr_atendimento		= nr_atendimento_w
	and	cd_convenio		= cd_convenio_p
	and	cd_categoria	 	= cd_categoria_p;

	if (qt_reg_w = 0) then

		update	atendimento_paciente
		set	ie_tipo_convenio	= obter_tipo_convenio(cd_convenio_p)
		where	nr_atendimento		= nr_atendimento_w;

		update	atend_categoria_convenio a
		set	a.cd_convenio		= cd_convenio_p,
			a.cd_categoria	 	= cd_categoria_p,
			a.nr_doc_convenio	 	= cd_autorizacao_p,
			a.cd_plano_convenio	= coalesce(cd_plano_convenio_p,a.cd_plano_convenio),
			a.cd_usuario_convenio	= coalesce(cd_usuario_convenio_p,a.cd_usuario_convenio),
			a.dt_validade_carteira	= coalesce(dt_validade_carteira_p,a.dt_validade_carteira),
			a.cd_senha		= coalesce(cd_senha_p,a.cd_senha),
			a.nr_seq_cobertura		= coalesce(nr_seq_cobertura_p,a.nr_seq_cobertura),
			a.cd_tipo_acomodacao	= coalesce(cd_tipo_acomodacao_p, a.cd_tipo_acomodacao),
			a.nm_usuario		= nm_usuario_p,
			a.dt_atualizacao	= dt_atualizacao_w,
			a.cd_empresa		= coalesce(cd_empresa_p, a.cd_empresa),
			a.nr_seq_categoria_iva = nr_seq_categoria_iva_p
		where	a.nr_seq_interno	=
			(SELECT	max(x.nr_seq_interno)
			from	atend_categoria_convenio x
			where	x.nr_atendimento = nr_atendimento_w);
	else
		update	atend_categoria_convenio a
		set	a.nr_doc_convenio		= coalesce(cd_autorizacao_p,a.nr_doc_convenio),
			a.cd_plano_convenio	= coalesce(cd_plano_convenio_p,a.cd_plano_convenio),
			a.cd_usuario_convenio	= coalesce(cd_usuario_convenio_p,a.cd_usuario_convenio),
			a.dt_validade_carteira	= coalesce(dt_validade_carteira_p,a.dt_validade_carteira),
			a.cd_senha		= coalesce(cd_senha_p,a.cd_senha),
			a.nr_seq_cobertura		= coalesce(nr_seq_cobertura_p,a.nr_seq_cobertura),
			a.cd_tipo_acomodacao	= coalesce(cd_tipo_acomodacao_p, a.cd_tipo_acomodacao),
			a.nm_usuario		= nm_usuario_p,
			a.dt_atualizacao	= dt_atualizacao_w,
			a.cd_empresa		= coalesce(cd_empresa_p, a.cd_empresa),
			a.nr_seq_categoria_iva = nr_seq_categoria_iva_p
		where	a.nr_seq_interno	= (	SELECT	max(x.nr_seq_interno)
						from	atend_categoria_convenio x
						where	x.nr_atendimento = nr_atendimento_w);
	end if;
end if;

/* atualizar Gestao de Cirurgias e Gestao de Agenda Cirurgica */

if (coalesce(ie_atualiza_valor_gestao_w,'N') = 'S') then

	CALL atualiza_cat_conv_cirurgia(nr_atendimento_w, cd_convenio_p, cd_categoria_p, nm_usuario_p);

	CALL atualiza_cat_conv_agenda(nr_atendimento_w, cd_convenio_p, cd_categoria_p, nm_usuario_p);

end if;

if (ie_altera_valor_p = 'S') then

	open c01;
	loop
	fetch c01 into
		nr_sequencia_w,
		dt_procedimento_w,
		nr_seq_proc_interno_w,
		nr_prescricao_w,
		cd_proced_conta_w,
		ie_origem_conta_w,
		cd_setor_item_w,
		dt_conta_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		/*Geliard OS 329531 - Adicionei o tratamento abaixo para os cliente que utilizam a conversao para SUS no cadastro de procedimentos*/

		if (coalesce(nr_seq_proc_interno_w::text, '') = '') and
			((ie_tipo_conv_origem_w	= 3) 	or (ie_tipo_conv_dest_w	= 3))	then
			begin
			if (ie_tipo_conv_origem_w	<> ie_tipo_conv_dest_w) and (ie_tipo_conv_origem_w 	= 3) then
				SELECT * FROM sus_obter_procedimento_amb(cd_proced_conta_w, ie_origem_conta_w, 2, cd_procedimento_w, ie_origem_proced_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
			else
				SELECT * FROM sus_obter_procedimento_amb(cd_proced_conta_w, ie_origem_conta_w, 1, cd_procedimento_w, ie_origem_proced_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
			end if;

			if (cd_procedimento_w <> 0) then
				update	procedimento_paciente
				set	cd_procedimento		= cd_procedimento_w,
					ie_origem_proced	= ie_origem_proced_w
				where	nr_sequencia		= nr_sequencia_w;
			end if;
			end;
		else
			begin
			SELECT * FROM obter_proc_tab_interno(	nr_seq_proc_interno_w, nr_prescricao_w, nr_atendimento_w, nr_interno_conta_ww, cd_procedimento_w, ie_origem_proced_w, cd_setor_item_w, dt_conta_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w;

			if (cd_procedimento_w <> 0) then

				update	procedimento_paciente
				set	cd_procedimento		= cd_procedimento_w,
					ie_origem_proced		= ie_origem_proced_w
				where	nr_sequencia		= nr_sequencia_w;
			end if;
			end;
		end if;
		end;
	end loop;
	close c01;

end if;

commit;
ds_motivo_w		:= '';
ds_assunto_w		:= '';
ie_enviar_alerta_w	:= coalesce(obter_valor_param_usuario(67,245,obter_perfil_ativo,nm_usuario_p,coalesce(cd_estabelecimento_w,0)),'N');
ie_enviar_email_w	:= coalesce(obter_valor_param_usuario(67,246,obter_perfil_ativo,nm_usuario_p,coalesce(cd_estabelecimento_w,0)),'N');
ie_tipo_alerta_w	:= obter_valor_param_usuario(67,685,obter_perfil_ativo,nm_usuario_p,coalesce(cd_estabelecimento_w,0));

begin
        /*Verifica se ie_tipo_alerta_w e uma sequencia valida de TIPO_ALERTA_ATEND */

        if (coalesce(ie_tipo_alerta_w,0) >0) then
                select 	nr_sequencia
                into STRICT 	ie_tipo_alerta_w
                from   	tipo_alerta_atend
                where  	nr_sequencia = ie_tipo_alerta_w;
        end if;
exception
when others then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(396481);
end;



/*  recalcular a conta do paciente */

CALL recalcular_conta_paciente(nr_interno_conta_ww, nm_usuario_p);

select	count(1)
into STRICT	qt_conta_w
from	conta_paciente
where	nr_interno_conta = nr_interno_conta_ww;

if (qt_conta_w > 0) then
	vl_atual_w := coalesce(obter_valor_Conta(nr_interno_conta_ww,0),0);
end if;


if (ie_enviar_alerta_w	<> 'N') or (ie_enviar_email_w	= 'S') then

	ds_motivo_w 	:= Wheb_mensagem_pck.get_Texto(303724); /*'Alteracao convenio da conta paciente';*/
	if (ie_altera_atendimento_p	= 'S') then
		ds_motivo_w	:= Wheb_mensagem_pck.get_Texto(303725, 'DS_MOTIVO_W='|| DS_MOTIVO_W); /*ds_motivo_w||' e convenio do atendimento';*/
		
	end if;

	ds_motivo_w := ds_motivo_w ||'.';
	ds_assunto_w := Wheb_mensagem_pck.get_Texto(303726); /*'Troca convenio conta.';*/

	--ds_assunto_w	:= ds_assunto_w	||' Pac.: '||substr(obter_pessoa_atendimento(nr_atendimento_w,'N'),1,60);
	ds_assunto_w	:= ds_assunto_w	|| Wheb_mensagem_pck.get_Texto(303728) ||nr_atendimento_w;
	ds_assunto_w	:= ds_assunto_w	|| Wheb_mensagem_pck.get_Texto(303729) ||nr_interno_conta_ww;
	ds_motivo_w 	:= ds_motivo_w 	|| chr(13) || chr(10)	|| Wheb_mensagem_pck.get_Texto(303730) ||nr_interno_conta_ww;
	ds_motivo_w 	:= ds_motivo_w 	|| chr(13) || chr(10) 	|| Wheb_mensagem_pck.get_Texto(303731) ||obter_nome_convenio(cd_convenio_origem_w)
					|| Wheb_mensagem_pck.get_Texto(303732) ||obter_categoria_convenio(cd_convenio_origem_w,cd_categoria_origem_w);
	ds_motivo_w 	:= ds_motivo_w 	|| chr(13)||chr(10)	|| Wheb_mensagem_pck.get_Texto(303733) ||obter_nome_convenio(cd_convenio_p)
					|| Wheb_mensagem_pck.get_Texto(303734)	||obter_categoria_convenio(cd_convenio_p,cd_categoria_p);
	ds_motivo_w	:= ds_motivo_w	||chr(13)||chr(10)
					|| Wheb_mensagem_pck.get_Texto(303735) ||ds_motivo_p;
	ds_motivo_w	:= ds_motivo_w	||chr(13)||chr(10)
					|| Wheb_mensagem_pck.get_Texto(303736) ||  campo_mascara(vl_anterior_w,2);
	ds_motivo_w	:= ds_motivo_w	||chr(13)||chr(10)
					|| Wheb_mensagem_pck.get_Texto(303737) || campo_mascara(vl_atual_w,2);					



	if (ie_enviar_alerta_w	<> 'N') then

		select	nextval('atendimento_alerta_seq')
		into STRICT	nr_seq_alerta_w
		;

		insert into atendimento_alerta(nr_sequencia,
						nr_atendimento,
						dt_alerta,
						dt_atualizacao,
						nm_usuario,
						ds_alerta,
						ie_situacao,
						dt_fim_alerta,
						dt_liberacao,
						nr_seq_tipo_alerta)
				values (	nr_seq_alerta_w,
						nr_atendimento_w,
						clock_timestamp(),
						clock_timestamp(),
						nm_usuario_p,
						substr(ds_motivo_w,1,2000),
						'A',
						null,
						CASE WHEN ie_enviar_alerta_w='L' THEN clock_timestamp()  ELSE null END ,
						ie_tipo_alerta_w);
	end if;

	if (ie_enviar_email_w	= 'S') then
		open c02;
		loop
		fetch c02 into
			ds_email_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			if (ds_email_w IS NOT NULL AND ds_email_w::text <> '') then
				CALL enviar_email(ds_assunto_w,ds_motivo_w,ds_email_origem_w,ds_email_w,nm_usuario_p,'M');
			end if;
			end;
		end loop;
		close c02;
	end if;


end if;

CALL gerar_conta_paciente_guia(nr_interno_conta_ww, 1);
/*  Fabricio em 26/05/2008 OS 93370 */

CALL gerar_conta_auditoria(nr_atendimento_w, nr_interno_conta_ww, nm_usuario_p);
/*Felipe Martini em 23/09/2008 OS109196*/

CALL atualiza_codigo_convenio(nr_interno_conta_ww,null);
/* Fabricio em 25/09/2009  OS 168069 Pro - Evento Alterar convenio da conta*/

CALL gerar_lancamento_automatico(nr_atendimento_w, null, 281, nm_usuario_p, null, null,null, null, null, nr_interno_conta_ww);

if (coalesce(ie_gerar_autor_conv_w,'N') = 'S')	and /*Geliard em 13/07/2011 OS 330064*/
	(coalesce(ie_altera_atendimento_p,'N') = 'S')	then
	begin
	open c04;
	loop
	fetch c04 into
		ie_proc_mat_w,
		nr_seq_item_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		begin
		if (ie_proc_mat_w = 1) then
			begin
			CALL gerar_autor_regra(nr_atendimento_w,null,nr_seq_item_w,null,null,null,'CP',nm_usuario_p,null,null,null,null,null,null,'','','');
			end;
		elsif (ie_proc_mat_w = 2) then
			begin
			CALL gerar_autor_regra(nr_atendimento_w,nr_seq_item_w,null,null,null,null,'CP',nm_usuario_p,null,null,null,null,null,null,'','','');
			end;
		end if;
		end;
	end loop;
	close c04;
	end;
end if;

if (coalesce(ie_todas_contas_atend_p,'N') = 'S') then
open c03;
loop
fetch c03 into
	nr_interno_conta_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	begin
	CALL trocar_convenio_conta(	nr_interno_conta_w,
				cd_convenio_p,
				cd_categoria_p,
				cd_autorizacao_p,
				nm_usuario_p,
				ie_altera_valor_p,
				ie_altera_atendimento_p,
				ie_troca_sus_particular_p,
				cd_plano_convenio_p,
				dt_validade_carteira_p,
				cd_usuario_convenio_p,
				ds_motivo_p,
				cd_senha_p,
				'N',
				dt_inicial_p,
				nr_seq_cobertura_p,
				cd_tipo_acomodacao_p,
				cd_empresa_p);
	end;
end loop;
close c03;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE trocar_convenio_conta (nr_interno_conta_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_autorizacao_p text, nm_usuario_p text, ie_altera_valor_p text, ie_altera_atendimento_p text, ie_troca_sus_particular_p text, cd_plano_convenio_p text, dt_validade_carteira_p timestamp, cd_usuario_convenio_p text, ds_motivo_p text, cd_senha_p text, ie_todas_contas_atend_p text, dt_inicial_p timestamp, nr_seq_cobertura_p bigint, cd_tipo_acomodacao_p bigint, cd_empresa_p bigint, nr_seq_categoria_iva_p bigint default null) FROM PUBLIC;

