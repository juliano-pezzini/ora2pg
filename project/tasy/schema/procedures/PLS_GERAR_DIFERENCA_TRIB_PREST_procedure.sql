-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_diferenca_trib_prest ( nr_seq_trib_prest_p pls_lote_ret_trib_prest.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


vl_soma_base_calculo_w		pls_lote_ret_trib_val_dif.vl_base_calculo%type;
vl_imposto_w			pls_lote_ret_trib_valor.vl_imposto%type;
pr_tributo_w			pls_lote_ret_trib_val_dif.pr_tributo%type;
cd_tributo_w			pls_lote_ret_trib_val_dif.cd_tributo%type;
vl_teto_w			pls_lote_ret_trib_valor.vl_base_adic%type;
nr_seq_lote_ret_trib_valor_w	pls_lote_ret_trib_valor.nr_sequencia%type;
cd_pessoa_fisica_w		pls_lote_ret_trib_prest.cd_pessoa_fisica%type;
cd_cgc_w			pls_lote_ret_trib_prest.cd_cgc%type;
vl_base_calculo_diferenca_w	pls_lote_ret_trib_val_dif.vl_base_calculo%type;
vl_base_calculo_dif_trib_w	pls_lote_ret_trib_val_dif.vl_base_calculo%type;
vl_saldo_estornar_w		pls_lote_ret_trib_valor.vl_saldo_trib%type;
vl_base_producao_w		pls_pag_prest_venc_trib.vl_base_producao%type;
vl_base_calculo_ret_emp_w	pls_lote_ret_trib_val_dif.vl_base_calculo%type;
vl_base_calculo_ret_w		pls_lote_ret_trib_val_dif.vl_base_calculo%type;
dt_referencia_w			pls_lote_retencao_trib.dt_mes_referencia%type;
vl_nao_retido_w			pls_pag_prest_venc_trib.vl_base_producao%type;
vl_nova_base_calculo_w		pls_pag_prest_venc_trib.vl_base_producao%type;
dt_imposto_w			pls_lote_ret_trib_valor.dt_imposto%type;
dt_imposto_venc_w		pls_lote_ret_trib_valor.dt_imposto%type;
qt_trib_ret_w			integer;
nr_seq_lote_ret_trib_val_dif_w	pls_lote_ret_trib_val_dif.nr_sequencia%type;

C01 CURSOR( nr_seq_trib_prest_pc	pls_lote_ret_trib_prest.nr_sequencia%type ) FOR
	SELECT	v.cd_tributo
	from	pls_lote_ret_trib_valor	v,
		tributo			p
	where	p.cd_tributo		= v.cd_tributo
	and	v.nr_seq_trib_prest	= nr_seq_trib_prest_pc
	and	p.ie_tipo_tributo	= 'INSS'
	group by v.cd_tributo;

BEGIN
for r_C01_w in C01( nr_seq_trib_prest_p ) loop

	select	sum(b.vl_base_calculo) vl_base_calculo,
		sum(CASE WHEN b.ie_pago_prev='V' THEN b.vl_imposto  ELSE 0 END ) vl_imposto,
		max(b.pr_tributo) pr_tributo,
		max(b.cd_tributo) cd_tributo,
		max(b.vl_base_adic) vl_base_adic,
		max(b.nr_sequencia) nr_sequencia,
		max(a.cd_pessoa_fisica) cd_pessoa_fisica,
		max(a.cd_cgc) cd_cgc,
		max(c.dt_mes_referencia) dt_referencia,
		sum(CASE WHEN b.ie_pago_prev='R' THEN b.vl_base_calculo  ELSE 0 END ) vl_base_calculo_ret_emp,
		sum(CASE WHEN b.ie_pago_prev='V' THEN b.vl_base_calculo  ELSE 0 END ) vl_base_calculo_ret,
		sum(CASE WHEN b.ie_pago_prev='V' THEN 1  ELSE 0 END ) qt_trib_ret,
		max(b.dt_imposto)
	into STRICT	vl_soma_base_calculo_w,
		vl_imposto_w,
		pr_tributo_w,
		cd_tributo_w,
		vl_teto_w,
		nr_seq_lote_ret_trib_valor_w,
		cd_pessoa_fisica_w,
		cd_cgc_w,
		dt_referencia_w,
		vl_base_calculo_ret_emp_w,
		vl_base_calculo_ret_w,
		qt_trib_ret_w,
		dt_imposto_w
	from	pls_lote_ret_trib_valor	b,
		pls_lote_ret_trib_prest	a,
		pls_lote_retencao_trib	c
	where	a.nr_sequencia		= b.nr_seq_trib_prest
	and	c.nr_sequencia		= a.nr_seq_lote
	and	b.nr_seq_trib_prest	= nr_seq_trib_prest_p
	and	b.cd_tributo		= r_C01_w.cd_tributo;

	select	sum(coalesce(a.vl_base_producao,0)) vl_base_producao,
		max(a.dt_imposto)
	into STRICT	vl_base_producao_w,
		dt_imposto_w
	from	pls_prestador			e,
		pls_lote_pagamento		d,
		pls_pagamento_prestador		c,
		pls_pag_prest_vencimento	b,
		pls_pag_prest_venc_trib		a,
		tributo				z
	where	a.nr_seq_vencimento	= b.nr_sequencia
	and	b.nr_seq_pag_prestador	= c.nr_sequencia
	and	c.nr_seq_lote		= d.nr_sequencia
	and	e.nr_sequencia		= c.nr_seq_prestador
	and	a.cd_tributo		= r_C01_w.cd_tributo
	and	e.cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	z.cd_tributo		= a.cd_tributo
	and	a.ie_pago_prev		= 'V'
	and	(((z.ie_venc_pls_pag_prod IS NOT NULL AND z.ie_venc_pls_pag_prod::text <> '') and (CASE WHEN z.ie_venc_pls_pag_prod='V' THEN b.dt_vencimento  ELSE d.dt_mes_competencia END  between trunc(to_date(dt_referencia_w),'month') and fim_dia(last_day(to_date(dt_referencia_w))))) or
			CASE WHEN z.ie_vencimento='V' THEN b.dt_vencimento WHEN z.ie_vencimento='C' THEN b.dt_vencimento  ELSE d.dt_mes_competencia END  between trunc(to_date(dt_referencia_w),'month') and fim_dia(last_day(to_date(dt_referencia_w))));

	-- Utiliza a maior data entre 'pls_pag_prest_venc_trib.dt_imposto', vinda do vencimento no pagamento e a 'pls_lote_ret_trib_valor.dt_imposto' vinda das cartas que já estão no lote de retenção
	if (coalesce(dt_imposto_venc_w, dt_imposto_w) > dt_imposto_w) then
		dt_imposto_w := dt_imposto_venc_w;
	end if;

	-- Se a soma das bases de cálculo ultrapassarem o teto e o teto é maior que zero
	if (vl_soma_base_calculo_w > vl_teto_w) and (vl_teto_w > 0) then

		-- Calcula um valor Base da Diferença
		vl_base_calculo_diferenca_w 	:= vl_soma_base_calculo_w - vl_teto_w;

		-- Calcula um tributo Base da Diferença
		vl_base_calculo_dif_trib_w	:= (vl_base_calculo_diferenca_w * pr_tributo_w) / 100;

		insert into pls_lote_ret_trib_val_dif(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_trib_prest,
			cd_tributo,
			vl_base_calculo,
			vl_imposto,
			pr_tributo,
			ie_natureza)
		values (nextval('pls_lote_ret_trib_val_dif_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_trib_prest_p,
			cd_tributo_w,
			vl_base_calculo_diferenca_w,
			vl_base_calculo_dif_trib_w,
			pr_tributo_w,
			'D') returning nr_sequencia into nr_seq_lote_ret_trib_val_dif_w;

		select	abs(coalesce(vl_imposto_w,0)),
			abs(coalesce(vl_base_calculo_dif_trib_w,0))
		into STRICT	vl_imposto_w,
			vl_base_calculo_dif_trib_w
		;

		-- OS 1340264 - Alterado o operador lágico de maior (>) para maior ou igual (>=)
		-- Houve a necessidade desta alteração, visto que em situações onde o 'VL_IMPOSTO_W' for igual o 'VL_BASE_CALCULO_DIF_TRIB_W' o sistema deve zerar o saldo do tributo e manter a natureza
		-- Da forma que estava antes quando o 'VL_IMPOSTO_W' era igual o 'VL_BASE_CALCULO_DIF_TRIB_W' o sistema estava alterando a natureza para 'PROVENTO'
		if	((vl_imposto_w = vl_base_calculo_dif_trib_w) or ((vl_base_calculo_dif_trib_w - vl_imposto_w) = 0.01)) then
			update	pls_lote_ret_trib_valor
			set	vl_saldo_trib	= 0
			where	nr_sequencia	= nr_seq_lote_ret_trib_valor_w;

			update	pls_lote_ret_trib_val_dif
			set	vl_imposto = vl_imposto_w
			where	nr_sequencia = nr_seq_lote_ret_trib_val_dif_w;

		elsif (vl_imposto_w > vl_base_calculo_dif_trib_w) then
			update	pls_lote_ret_trib_valor
			set	vl_saldo_trib	= vl_imposto_w - vl_base_calculo_dif_trib_w
			where	nr_sequencia	= nr_seq_lote_ret_trib_valor_w;
		else
			update	pls_lote_ret_trib_valor
			set	vl_saldo_trib	= vl_base_calculo_dif_trib_w - vl_imposto_w
			where	nr_sequencia	= nr_seq_lote_ret_trib_valor_w;

			update	pls_lote_ret_trib_val_dif
			set	ie_natureza = 'P'
			where	nr_sequencia = nr_seq_lote_ret_trib_val_dif_w;
		end if;

	-- Se a soma das bases de cálculo ainda não chegaram no teto busca produções que não foram retidas ainda
	elsif (vl_soma_base_calculo_w < vl_teto_w) and (vl_teto_w > 0) then

		-- Obtem o valor restante que pode ser retida := Toda a produção que poderia ser retida - Toda a base que foi retida
		vl_nao_retido_w		:= (vl_base_producao_w - vl_base_calculo_ret_w);

		-- Soma toda a base retida já com as cartas + o valor restante que poderia ser retido e não foi
		vl_nova_base_calculo_w 	:= vl_soma_base_calculo_w + vl_nao_retido_w;

		-- Verifica se passará do teto se utilizar todo o valor que poderia ser retido e não foi, se passar do teto pega só a diferença, se não utilizará todo o valor
		if (vl_nova_base_calculo_w > vl_teto_w) then
			vl_base_calculo_diferenca_w	:= vl_nao_retido_w - (vl_nova_base_calculo_w - vl_teto_w);
		else
			vl_base_calculo_diferenca_w	:= vl_nao_retido_w;
		end if;

		-- Calcula um tributo Base da Diferença
		vl_base_calculo_dif_trib_w	:= (vl_base_calculo_diferenca_w * pr_tributo_w) / 100;

		if (vl_base_calculo_diferenca_w > 0) then
			insert into pls_lote_ret_trib_val_dif(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_trib_prest,
				cd_tributo,
				vl_base_calculo,
				vl_imposto,
				pr_tributo,
				ie_natureza)
			values (nextval('pls_lote_ret_trib_val_dif_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_trib_prest_p,
				cd_tributo_w,
				vl_base_calculo_diferenca_w,
				vl_base_calculo_dif_trib_w,
				pr_tributo_w,
				'P');

			if (qt_trib_ret_w > 0) then
				update	pls_lote_ret_trib_valor
				set	vl_saldo_trib	= abs(vl_imposto_w + vl_base_calculo_dif_trib_w)
				where	nr_sequencia	= nr_seq_lote_ret_trib_valor_w;
			else
				insert into pls_lote_ret_trib_valor(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_trib_prest,
					cd_tributo,
					dt_imposto,
					vl_base_calculo,
					vl_imposto,
					pr_tributo,
					vl_nao_retido,
					vl_base_nao_retido,
					vl_trib_adic,
					vl_base_adic,
					ie_pago_prev,
					vl_desc_base,
					vl_reducao,
					cd_darf,
					cd_variacao,
					ie_periodicidade,
					nr_seq_trans_reg,
					nr_seq_trans_baixa,
					ie_tipo_contratacao,
					nr_titulo,
					vl_saldo_trib)
				values (nextval('pls_lote_ret_trib_valor_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_trib_prest_p,
					cd_tributo_w,
					dt_imposto_w,
					vl_base_calculo_diferenca_w,
					vl_base_calculo_dif_trib_w,
					pr_tributo_w,
					0,
					0,
					0,
					vl_teto_w,
					'V',
					0,
					0,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					vl_base_calculo_dif_trib_w );
			end if;
		end if;
	end if;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_diferenca_trib_prest ( nr_seq_trib_prest_p pls_lote_ret_trib_prest.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

