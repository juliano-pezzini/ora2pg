-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_evento_precaucao (nr_seq_evento_p bigint, nr_atendimento_p bigint, cd_pessoa_fisica_p text, nr_seq_precaucao_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
ie_forma_ev_w			varchar(15);
ie_pessoa_destino_w		varchar(15);
cd_pf_destino_w			varchar(10);
ds_mensagem_w			varchar(4000);
ds_titulo_w				varchar(100);
cd_pessoa_destino_w		varchar(10);
nm_paciente_w			varchar(60);
ds_unidade_w			varchar(60);
ds_setor_atendimento_w	varchar(60);
dt_registro_w			timestamp;
ds_precaucao_w			varchar(255);
ds_motivo_w				varchar(255);
nm_medico_solic_w		varchar(60);
cd_convenio_w			bigint;
nm_usuario_destino_w	varchar(15);
dt_inicio_w				timestamp;
ds_observacao_w			varchar(2000);
cd_setor_atend_pac_w	integer;
nr_sequencia_w			bigint;
ie_usuario_aceite_w		varchar(1);
cd_setor_atendimento_w	integer;
cd_perfil_w				integer;
qt_corresp_w			integer;
cd_pessoa_regra_w		varchar(10);
ds_topografia_w			varchar(255);
ds_microorganismos_w	varchar(255);
ds_temp_w				varchar(255);
ds_usuario_w			varchar(255);
dt_lib_precaucao_w		timestamp;
ds_email_fixo_w			varchar(100);

C01 CURSOR FOR 
	SELECT	ie_forma_ev, 
		ie_pessoa_destino, 
		cd_pf_destino, 
		coalesce(ie_usuario_aceite,'N'), 
		cd_setor_atendimento, 
		cd_perfil, 
		ds_email_fixo 
	from	ev_evento_regra_dest 
	where	nr_seq_evento	= nr_seq_evento_p 
	and	coalesce(cd_convenio, coalesce(cd_convenio_w,0))	= coalesce(cd_convenio_w,0) 
	and	coalesce(cd_setor_atend_pac, coalesce(cd_setor_atend_pac_w,0))	= coalesce(cd_setor_atend_pac_w,0) 
	order by ie_forma_ev;

C02 CURSOR FOR 
	SELECT	obter_dados_usuario_opcao(a.nm_usuario,'C') 
	from	usuario_setor_v a, 
			usuario b 
	where	a.nm_usuario = b.nm_usuario 
	and		b.ie_situacao = 'A' 
	and		a.cd_setor_atendimento = cd_setor_atendimento_w 
	and		ie_forma_ev_w in (2,3) 
	and		(obter_dados_usuario_opcao(a.nm_usuario,'C') IS NOT NULL AND (obter_dados_usuario_opcao(a.nm_usuario,'C'))::text <> '');

C03 CURSOR FOR 
	SELECT	obter_dados_usuario_opcao(a.nm_usuario,'C'), 
			a.nm_usuario 
	from	usuario_perfil a, 
			usuario b 
	where	a.nm_usuario = b.nm_usuario 
	and		b.ie_situacao = 'A' 
	and		a.cd_perfil = cd_perfil_w 
	and		ie_forma_ev_w in (2,3) 
	and		(obter_dados_usuario_opcao(a.nm_usuario,'C') IS NOT NULL AND (obter_dados_usuario_opcao(a.nm_usuario,'C'))::text <> '');

C10 CURSOR FOR 
	SELECT	substr(obter_desc_microorganismo(cd_microorganismo),1,255) 
	from	ATEND_PRECAUCAO_MICRO 
	where	NR_SEQ_ATEND_PRECAUCAO = nr_seq_precaucao_p;

C11 CURSOR FOR 
	SELECT	substr(obter_desc_topografia(cd_topografia),1,255) 
	from	ATEND_PRECAUCAO_MICRO 
	where	NR_SEQ_ATEND_PRECAUCAO = nr_seq_precaucao_p;


BEGIN 
 
select	ds_titulo, 
	ds_mensagem 
into STRICT	ds_titulo_w, 
	ds_mensagem_w 
from	ev_evento 
where	nr_sequencia	= nr_seq_evento_p;
 
select	substr(obter_nome_pf(cd_pessoa_fisica_p),1,60), 
	substr(obter_unidade_atendimento(nr_atendimento_p,'A','U'),1,60), 
	substr(obter_unidade_atendimento(nr_atendimento_p,'A','S'),1,60), 
	substr(obter_unidade_atendimento(nr_atendimento_p,'A','CS'),1,60) 
into STRICT	nm_paciente_w, 
	ds_unidade_w, 
	ds_setor_atendimento_w, 
	cd_setor_atend_pac_w
;
 
select	coalesce(max(obter_convenio_atendimento(nr_atendimento_p)), 0) 
into STRICT	cd_convenio_w
;
 
select	dt_liberacao, 
	a.dt_registro, 
	b.ds_precaucao, 
	c.ds_motivo, 
	substr(obter_nome_pf(a.cd_medico_solic),1,60), 
	a.dt_inicio, 
	a.ds_observacao, 
	substr(obter_cih_topografia(a.cd_topografia),1,255), 
	substr(obter_cih_microorganismo(cd_microorganismo),1,255) 
into STRICT	dt_lib_precaucao_w, 
	dt_registro_w, 
	ds_precaucao_w, 
	ds_motivo_w, 
	nm_medico_solic_w, 
	dt_inicio_w, 
	ds_observacao_w, 
	ds_topografia_w, 
	ds_microorganismos_w 
FROM cih_precaucao b, atendimento_precaucao a
LEFT OUTER JOIN motivo_isolamento c ON (a.nr_seq_motivo_isol = c.nr_sequencia)
WHERE a.nr_seq_precaucao = b.nr_sequencia  and a.nr_sequencia = nr_seq_precaucao_p;
 
open C10;
loop 
fetch C10 into 
	ds_temp_w;
EXIT WHEN NOT FOUND; /* apply on C10 */
	begin 
	if (ds_microorganismos_w IS NOT NULL AND ds_microorganismos_w::text <> '') then 
		ds_microorganismos_w	:= ds_microorganismos_w||', '||ds_temp_w;
	else 
		ds_microorganismos_w	:= ds_temp_w;
	end if;
	end;
end loop;
close C10;
 
open C11;
loop 
fetch C11 into 
	ds_temp_w;
EXIT WHEN NOT FOUND; /* apply on C11 */
	begin 
	if (ds_topografia_w IS NOT NULL AND ds_topografia_w::text <> '') then 
		ds_topografia_w	:= ds_topografia_w||', '||ds_temp_w;
	else 
		ds_topografia_w	:= ds_temp_w;
	end if;
	end;
end loop;
close C11;
 
select	substr(ds_usuario,1,40) 
into STRICT	ds_usuario_w 
from	usuario 
where	nm_usuario = nm_usuario_p;
 
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@dt_lib_precaucao',PKG_DATE_FORMATERS.TO_VARCHAR(dt_lib_precaucao_w,'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p)),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@atendimento',nr_atendimento_p),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@paciente',nm_paciente_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@quarto',ds_unidade_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@setor',ds_setor_atendimento_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@dt_registro',dt_registro_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@ds_precaucao',ds_precaucao_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@ds_motivo',ds_motivo_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@nm_medico_solic',nm_medico_solic_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@dt_inicio',dt_inicio_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@ds_observacao',ds_observacao_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@ds_topografia',ds_topografia_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@ds_microorganismos',ds_microorganismos_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@nomeusuario',ds_usuario_w),1,4000);
select	nextval('ev_evento_paciente_seq') 
into STRICT	nr_sequencia_w
;
 
insert into ev_evento_paciente( 
	nr_sequencia, 
	nr_seq_evento, 
	dt_atualizacao, 
	nm_usuario, 
	dt_atualizacao_nrec, 
	nm_usuario_nrec, 
	cd_pessoa_fisica, 
	nr_atendimento, 
	ds_titulo, 
	ds_mensagem, 
	ie_status, 
	dt_evento, 
	dt_liberacao, 
	ie_situacao) 
values (	nr_sequencia_w, 
	nr_seq_evento_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	cd_pessoa_fisica_p, 
	nr_atendimento_p, 
	ds_titulo_w, 
	ds_mensagem_w, 
	'G', 
	clock_timestamp(), 
	clock_timestamp(), 
	'A');
 
open C01;
loop 
fetch C01 into 
	ie_forma_ev_w, 
	ie_pessoa_destino_w, 
	cd_pf_destino_w, 
	ie_usuario_aceite_w, 
	cd_setor_atendimento_w, 
	cd_perfil_w, 
	ds_email_fixo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	qt_corresp_w	:= 1;
	cd_pessoa_destino_w	:= null;
	if (ie_pessoa_destino_w = '1') then /* Médico do atendimento */
 
		begin 
		select	max(cd_medico_atendimento) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_p;
		end;
	elsif (ie_pessoa_destino_w = '2') then /*Médico responsável pelo paciente*/
 
		begin 
		select	max(cd_medico_resp) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_p;
		end;
	elsif (ie_pessoa_destino_w = '4') then /*Médico referido*/
 
		begin 
		select	max(cd_medico_referido) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_p;
		end;
	elsif (ie_pessoa_destino_w = '5') or (ie_pessoa_destino_w = '12') then /*Pessoa fixa ou Usuário fixo*/
 
		cd_pessoa_destino_w	:= cd_pf_destino_w;
	elsif (ie_pessoa_destino_w = '22') then /*E-mail fixo*/
 
 
		insert into ev_evento_pac_destino( 
							nr_sequencia, 
							nr_seq_ev_pac, 
							dt_atualizacao, 
							nm_usuario, 
							dt_atualizacao_nrec, 
							nm_usuario_nrec, 
							cd_pessoa_fisica, 
							ie_forma_ev, 
							ie_status, 
							dt_ciencia, 
							dt_evento, 
							ds_email_fixo, 
							ie_pessoa_destino) 
						values ( 
							nextval('ev_evento_pac_destino_seq'), 
							nr_sequencia_w, 
							clock_timestamp(), 
							nm_usuario_p, 
							clock_timestamp(), 
							nm_usuario_p, 
							cd_pf_destino_w, 
							ie_forma_ev_w, 
							'G', 
							null, 
							clock_timestamp(), 
							ds_email_fixo_w, 
							ie_pessoa_destino_w);
 
	end if;
 
	if (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '1') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'MCel' 
		and	ie_tipo_doc		= 'AE';
		end;
	elsif (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '3') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'CI' 
		and	ie_tipo_doc		= 'AE';
		end;
	elsif (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '4') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'Email' 
		and	ie_tipo_doc		= 'AE';
		end;
	end if;
 
	if (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (qt_corresp_w > 0) then 
		begin 
 
		insert into ev_evento_pac_destino( 
			nr_sequencia, 
			nr_seq_ev_pac, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			cd_pessoa_fisica, 
			ie_forma_ev, 
			ie_status, 
			dt_ciencia, 
			ie_pessoa_destino, 
			dt_evento) 
		values (	nextval('ev_evento_pac_destino_seq'), 
			nr_sequencia_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_pessoa_destino_w, 
			ie_forma_ev_w, 
			'G', 
			null, 
			ie_pessoa_destino_w, 
			clock_timestamp());
		end;
	end if;
 
	open C02;
	loop 
	fetch C02 into 
		cd_pessoa_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		if (cd_pessoa_regra_w IS NOT NULL AND cd_pessoa_regra_w::text <> '') then 
			insert into ev_evento_pac_destino( 
				nr_sequencia, 
				nr_seq_ev_pac, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				cd_pessoa_fisica, 
				ie_forma_ev, 
				ie_status, 
				dt_ciencia, 
				ie_pessoa_destino, 
				dt_evento) 
			values (	nextval('ev_evento_pac_destino_seq'), 
				nr_sequencia_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				cd_pessoa_regra_w, 
				ie_forma_ev_w, 
				'G', 
				null, 
				ie_pessoa_destino_w, 
				clock_timestamp());
		end if;
		end;
	end loop;
	close C02;
 
	open C03;
	loop 
	fetch C03 into 
		cd_pessoa_regra_w, 
		nm_usuario_destino_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
 
		if (cd_pessoa_regra_w IS NOT NULL AND cd_pessoa_regra_w::text <> '') then 
 
			insert into ev_evento_pac_destino( 
				nr_sequencia, 
				nr_seq_ev_pac, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				cd_pessoa_fisica, 
				ie_forma_ev, 
				ie_status, 
				dt_ciencia, 
				nm_usuario_DEst, 
				ie_pessoa_destino, 
				dt_evento) 
			values (	nextval('ev_evento_pac_destino_seq'), 
				nr_sequencia_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				cd_pessoa_regra_w, 
				ie_forma_ev_w, 
				'G', 
				null, 
				nm_usuario_Destino_w, 
				ie_pessoa_destino_w, 
				clock_timestamp());
		end if;
		end;
	end loop;
	close C03;
 
	end;
end loop;
close C01;
 
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_evento_precaucao (nr_seq_evento_p bigint, nr_atendimento_p bigint, cd_pessoa_fisica_p text, nr_seq_precaucao_p bigint, nm_usuario_p text) FROM PUBLIC;

