-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


procedure tasy_atualizar_objetos is

C01				integer;
ds_script_criacao_w		clob;
nr_seq_objeto_w			objeto_sistema.nr_sequencia%type;
nm_objeto_w			objeto_sistema.nm_objeto%type;
ie_tipo_objeto_w		objeto_sistema.ie_tipo_objeto%type;
ie_banco_w			objeto_sistema.ie_banco%type;
ie_banco_cliente_w		integer;
dt_versao_w			varchar2(30);
cd_versao_atual_w		aplicacao_tasy.cd_versao_Atual%type;
cd_versao_tasy_versao_w		aplicacao_tasy.cd_versao_Atual%type;
ds_erro_w			varchar2(4000);
nr_aux_w			integer;
qt_executado_w 			integer := 0;
ds_script_aux_w			clob;
qt_registro_w			number(10);
nm_processo_w			constant varchar2(30) := 'TASY_ATUALIZAR_OBJETOS';
type t_script_table		is table of clob;
script_table_w			t_script_table;
qt_total_objetos_w		integer;
ds_script_cursor_w		varchar(2000);
/* Types para armazenar os objetos que tiveram erro ao tentar compilar pela primeira vez. */

type t_script_err_obj		is record (ds_script clob, nm_objeto objeto_sistema.nm_objeto%type, nr_seq_objeto objeto_sistema.nr_sequencia%type);
type t_list_script		is table of t_script_err_obj index by binary_integer;
script_list_w			t_list_script;
err_obj_record_w		t_script_err_obj;
scrip_list_index_w		integer := 0;
ds_insert_log_w			constant varchar2(500) :=	'insert into atualizar_objetos_table (nr_seq_objeto, nm_objeto, ie_tipo_objeto, ds_log, nr_executado, dt_atualizacao, ie_erro, ds_script_criacao) ' ||
								' values(:nr_seq_objeto_w, :nm_objeto_w, :ie_tipo_objeto_w, :ds_log_p, :qt_executado_w, sysdate, :ie_erro_p, :ds_script_criacao_p)';

	


CREATE OR REPLACE PROCEDURE log_atualizacao ( ds_log_p text, ie_erro_p text, ds_script_criacao_p text) AS $body$
BEGIN
		EXECUTE ds_insert_log_w using nr_seq_objeto_w, nm_objeto_w, ie_tipo_objeto_w, ds_log_p, qt_executado_w, ie_erro_p, ds_script_criacao_p;
		commit;
	end;

	function split_script_type(ds_text_p	clob) return;
		qt_index_w			number := 0;
		ds_text_w			clob;
		ds_text_aux_w			clob;
		nr_char_index_w			number;
	begin
		ds_text_w := ds_text_p;
		while(ds_text_w IS NOT NULL AND ds_text_w::text <> '') loop
			qt_index_w := qt_index_w + 1;
			nr_char_index_w := instr(ds_text_w, 'CREATE OR REPLACE', 25, 1);
			if (nr_char_index_w = 0) then
				ds_text_aux_w := ds_text_w;
				ds_text_w := null;
			else
				ds_text_aux_w := substr(ds_text_w, 0, nr_char_index_w);
			end if;

			if ((instr(ds_text_aux_w, 'FORCE AS OBJECT', 1, 1) = 0) and (instr(ds_text_aux_w, 'AS OBJECT', 1, 1) > 0)) then
				ds_text_aux_w := regexp_replace(ds_text_aux_w, 'AS OBJECT','FORCE AS OBJECT',1,1);
			elsif (instr(ds_text_aux_w, 'FORCE IS TABLE', 1, 1) = 0 and (instr(ds_text_aux_w, 'IS TABLE', 1, 1) > 0)) then
				ds_text_aux_w := regexp_replace(ds_text_aux_w, 'IS TABLE','FORCE IS TABLE',1,1);
			end if;

			nr_aux_w := instr(ds_text_aux_w, '/', -1);
			if (nr_aux_w <> 0 ) then
				ds_text_aux_w := substr(ds_text_aux_w, 0, (nr_aux_w - 1));
			end if;

			ds_text_w := substr(ds_text_w, nr_char_index_w);
			t_script_w.extend;
			t_script_w(qt_index_w) := ds_text_aux_w;
		end loop;

		return;
	end;

	/* Retorna 0 se houver algum problema ao obter a versao da base. */

	function get_versao_oracle return;
	begin
		begin
			select	banner
			into STRICT	result_w
			from	v$version LIMIT 1;

			result_w := upper(result_w);
			result_w := trim(both regexp_replace(result_w, 'ORACLE DATABASE', '', 1, 1));
			result_w := substr(result_w, 0, (instr(result_w, ' ', 1, 1) - 1));
			result_w := trim(both regexp_replace(result_w, '[^0-9]', '', 1, 1));
		exception
		when others then
			result_w := 0;
		end;

		return;
	end;

	procedure compilar_objeto(ds_script_p	clob) is
		cursor1		integer;
		retorno_w	integer;
		ds_script_w	clob;
	begin
		ds_script_w := replace(ds_script_p, chr(13) || chr(10), chr(10));

		if (octet_length(ds_script_w) <= 32767) then
			EXECUTE to_char(substr(ds_script_w, 1, 32767));
		else
			cursor1 := dbms_sql.open_cursor;
			dbms_sql.parse(cursor1, ds_script_w, dbms_sql.native);
			retorno_w := dbms_sql.execute(cursor1);
			dbms_sql.close_cursor(cursor1);
		end if;
	end;

	procedure adicionar_lista_erro(ds_script_err_p	clob) is
	begin
		err_obj_record_w.ds_script := ds_script_err_p;
		err_obj_record_w.nm_objeto := nm_objeto_w;
		err_obj_record_w.nr_seq_objeto := nr_seq_objeto_w;

		scrip_list_index_w := scrip_list_index_w + 1;
		script_list_w(scrip_list_index_w) := err_obj_record_w;
	end;

	procedure pre_execucoes is
	begin
		/* Consistência para não executar as procedures da atualização. */

		begin
			SELECT	'A procedure ' || action || ' já está em execução. Sid/Serial : ' || sid || ',' || serial#
			INTO STRICT	ds_erro_w
			FROM 	v$session
			WHERE	audsid <> (SELECT userenv('sessionid') )
			AND	username = (select username from v$session where audsid = (select userenv('sessionid') ))
			AND	((action like 'VALIDA_OBJETOS_SISTEMA%' AND status = 'ACTIVE')
			OR	action like 'TASY_SINCRONIZAR_BASE%'
			OR 	action like 'TASY_AJUSTAR_COLUNAS%'
			OR	action like 'TASY_ALTERAR_COLUNA%'
			OR	action like 'TASY_CRIAR_INDICE%'
			OR	action like 'TASY_CRIAR_INTEGRIDADE%'
			OR	action like 'TASY_CRIAR_ALTERAR_TABELA%'
			OR	action like 'TASY_ATUALIZAR_OBJETOS%');

			CALL gravar_processo_longo('','',null);
			RAISE EXCEPTION '%', ds_erro_w USING ERRCODE = '45011';
		exception
		when others then
			ds_erro_w := '';
		end;
		/* Data da geração da versão da base do cliente. */

		EXECUTE 	'select	to_char(dt_versao, ''dd/mm/yyyy hh24:mi:ss'') ' ||
					' from	tasy_versao.aplicacao_tasy_versao a, ' ||
					' 	aplicacao_tasy b ' ||
					' where	a.cd_versao = b.cd_versao_atual ' ||
					' and	a.cd_aplicacao_tasy = b.cd_aplicacao_tasy ' ||
					' and	a.cd_aplicacao_tasy = ''Tasy'' ' into STRICT dt_versao_w;
		/* Número da versão que se encontra no tasy_versão. */

		EXECUTE	'select	replace(cd_versao_Atual, ''.'','''') ' ||
					' from	tasy_versao.aplicacao_tasy ' ||
					' where	cd_aplicacao_Tasy = ''Tasy'' ' into STRICT cd_versao_tasy_versao_w;
		/* Número da versão da base do cliente. */

		select	replace(cd_versao_Atual, '.','')
		into STRICT	cd_versao_atual_w
		from	aplicacao_tasy
		where	cd_aplicacao_Tasy = 'Tasy';

		/*  Consistência do tasy_versao e usuário principal com versões iguais. */

		if (cd_versao_atual_w = cd_versao_tasy_versao_w) then
			CALL gravar_processo_longo('', '', null);
			RAISE EXCEPTION '%', 'Proibido atualizar para a mesma versão.' USING ERRCODE = '45011';
		end if;
		/* Tratamento quando se retrocede de versão. */

		if (cd_versao_atual_w > cd_versao_tasy_versao_w) then
			CALL gravar_processo_longo('', '', null);
			RAISE EXCEPTION '%', 'Proibido retroceder de versão.' USING ERRCODE = '45011';
		end if;

		select 	count(*)
		into STRICT	qt_registro_w
		from	user_tables
		where	table_name = 'W_ATUALIZAR_OBJETOS';

		if ( qt_registro_w > 0 ) then
		begin
			EXECUTE 'drop table w_atualizar_objetos';
		exception
		when others then
			ds_erro_w := 'Não foi possível excluir a tabela w_atualizar_objetos. ';
			CALL log_atualizacao(ds_erro_w || substr(SQLERRM(SQLSTATE),1,2000), 'S', null);
			RAISE EXCEPTION '%', ds_erro_w USING ERRCODE = '45011';
		end;
		end if;
	end;

begin

CALL gravar_processo_longo('', nm_processo_w, null);

pre_execucoes;

select 	count(*)
into STRICT	qt_registro_w
from	user_tables
where	table_name = 'ATUALIZAR_OBJETOS_TABLE';

if ( qt_registro_w > 0 ) then
	EXECUTE 'truncate table atualizar_objetos_table ';
else
	EXECUTE 'create table atualizar_objetos_table (
			nr_seq_objeto	number(10),
			nm_objeto	varchar2(200),
			ie_tipo_objeto	varchar2(20),
			ds_log		varchar2(4000),
			nr_executado	integer,
			dt_atualizacao	date,
			ie_erro		varchar2(1),
			ds_script_criacao	clob
		) ';
end if;

EXECUTE	'create table w_atualizar_objetos ' ||
			' as ' ||
			'	(select	a.nm_objeto, ' ||
			' 		upper(a.ie_tipo_objeto) as ie_tipo_objeto, ' ||
			' 		a.nr_sequencia, ' ||
			'		to_lob(a.ds_script_criacao) ds_script_criacao ' ||
			' 	from	tasy_versao.objeto_sistema a ' ||
			' 	where	ie_tipo_objeto not in (''Script'', ''Job'',''Baca'') ' ||
			' 	and	a.dt_atualizacao >= to_Date('''||dt_versao_w||''',''dd/mm/yyyy hh24:mi:ss'') ' ||
			' 	and	Gerar_Objeto_Aplicacao(a.ds_aplicacao,  null , a.CD_CNPJ) = ''S'' ' ||
			'	and	a.ds_script_criacao is not null ) ';

EXECUTE	' select	count(*) ' ||
			' from 		w_atualizar_objetos '
			into STRICT qt_total_objetos_w;

ie_banco_cliente_w := get_versao_oracle;

CALL log_atualizacao('Iniciando a atualização dos objetos.' || chr(13) || chr(10) ||
		'Total de objetos a serem atualizados: ' || qt_total_objetos_w || '.' || chr(13) || chr(10) ||
		'Versão Oracle do cliente: ' || ie_banco_cliente_w || '.' || chr(13) || chr(10) ||
		'Versão tasy_versao: ' || cd_versao_tasy_versao_w || '.' || chr(13) || chr(10) ||
		'Versão tasy: ' || cd_versao_atual_w || '.', null, null);

ds_script_cursor_w := 'select	a.nm_objeto,
				upper(a.ie_tipo_objeto),
				a.nr_sequencia,
				trim(regexp_replace(a.ie_banco, ''[^0-9]'', '''', 1, 1)) as ie_banco
			from	tasy_versao.objeto_sistema a
			where	ie_tipo_objeto not in (''Script'', ''Job'',''Baca'')
			and	a.dt_atualizacao >= to_Date(''' || dt_versao_w || ''', ''dd/mm/yyyy hh24:mi:ss'')
			and	Gerar_Objeto_Aplicacao(a.ds_aplicacao,  null , a.CD_CNPJ) = ''S''
			and	upper(a.nm_objeto) <> ''TASY_ATUALIZAR_OBJETOS''
			and	a.ds_script_criacao is not null
			order	by obter_ordem_Objeto(a.ie_tipo_objeto), nm_objeto, ie_banco ';

C01 := dbms_sql.open_cursor;
dbms_sql.parse(C01, ds_script_cursor_w, dbms_sql.native);
dbms_sql.define_column(C01, 1, nm_objeto_w, 100);
dbms_sql.define_column(C01, 2, ie_tipo_objeto_w, 50);
dbms_sql.define_column(C01, 3, nr_seq_objeto_w);
dbms_sql.define_column(C01, 4, ie_banco_w, 50);

qt_registro_w := dbms_sql.execute(C01);

while(dbms_sql.fetch_rows(C01) > 0) loop
begin
	SELECT	trunc((TO_CHAR(CURRENT_TIMESTAMP, 'SSSSSxFF'))::numeric  * 1000)
	into STRICT	qt_registro_w
	;

	dbms_sql.column_value(C01, 1, nm_objeto_w);
	dbms_sql.column_value(C01, 2, ie_tipo_objeto_w);
	dbms_sql.column_value(C01, 3, nr_seq_objeto_w);
	dbms_sql.column_value(C01, 4, ie_banco_w);

	qt_executado_w := qt_executado_w + 1;

	CALL gravar_processo_longo(nm_objeto_w, nm_processo_w ||' - '|| to_char(trunc((qt_executado_w * 100)/(qt_total_objetos_w))) || '%', qt_executado_w);

	begin
		EXECUTE 'select ds_script_criacao from w_atualizar_objetos where nr_sequencia = :nr_obj'
			into STRICT ds_script_criacao_w using nr_seq_objeto_w;
	exception
	when others then
		CALL log_atualizacao('Erro ao obter script: ' || substr(SQLERRM(SQLSTATE),1,2000), 'S', null);
		goto end_loop;
	end;

	if (ds_script_criacao_w IS NOT NULL AND ds_script_criacao_w::text <> '') then
	begin
		ds_script_criacao_w := upper(trim(both ds_script_criacao_w));
		nr_aux_w := instr(ds_script_criacao_w, '/', -1);
		if (nr_aux_w <> 0) then
			ds_script_criacao_w := substr(ds_script_criacao_w, 0, (nr_aux_w - 1));
		end if;

		if (ie_tipo_objeto_w = 'VIEW') then
			ds_script_criacao_w := trim(both ds_script_criacao_w);
			nr_aux_w := instr(ds_script_criacao_w, ';', -1);
			if (nr_aux_w <> 0 ) then
				ds_script_criacao_w := substr(ds_script_criacao_w, 0, (nr_aux_w - 1));
			end if;

			if ((instr(ds_script_criacao_w, 'FORCE VIEW', 1, 1) = 0) and (instr(ds_script_criacao_w, 'VIEW', 1, 1) > 0)) then
				ds_script_criacao_w := regexp_replace(ds_script_criacao_w, 'VIEW','FORCE VIEW',1,1);
			end if;

		elsif (ie_tipo_objeto_w = 'SEQUENCE') then
			ds_script_criacao_w := trim(both ds_script_criacao_w);
			nr_aux_w := instr(ds_script_criacao_w, ';', -1);
			if (nr_aux_w <> 0 ) then
				ds_script_criacao_w := substr(ds_script_criacao_w, 0, (nr_aux_w - 1));
			end if;
		elsif (ie_tipo_objeto_w = 'PACKAGE') then

			/* Compilar header. */

			ds_erro_w := '';
			begin
				nr_aux_w := position('PACKAGE BODY' in ds_script_criacao_w);
				ds_script_aux_w := substr(ds_script_criacao_w, 0, nr_aux_w);
				nr_aux_w := instr(ds_script_aux_w, '/', -1);

				ds_script_aux_w := substr(ds_script_criacao_w, 0, (nr_aux_w - 1));

				if (coalesce(ds_script_aux_w::text, '') = '' or ds_script_aux_w = '') then
					nr_aux_w := position('CREATE OR REPLACE PACKAGE ' || upper(nm_objeto_w) in ds_script_criacao_w);
					ds_script_aux_w := substr(ds_script_criacao_w, 0, nr_aux_w);
					nr_aux_w := instr(ds_script_aux_w, '/', -1);
					ds_script_aux_w := substr(ds_script_criacao_w, 0, (nr_aux_w - 1));
				end if;

				if ((ds_script_aux_w IS NOT NULL AND ds_script_aux_w::text <> '') or ds_script_aux_w <> '') then
					if (instr(ds_script_aux_w, 'PACKAGE', 1, 1) > 0) then
						/* Assina o objeto caso dúvida de compilação do mesmo. */

						ds_script_aux_w := regexp_replace(ds_script_aux_w, 'PACKAGE',' PACKAGE /* COMPILADA VIA PROCEDURE NA VERSÃO '
 || cd_versao_tasy_versao_w || '. */ ',1,1);
					end if;

					compilar_objeto(ds_script_aux_w);
				end if;
			exception
			when others then
				ds_erro_w := 'Erro ao compilar cabeçalho: ' || substr(SQLERRM(SQLSTATE),1,2000);
				CALL log_atualizacao(ds_erro_w, 'S', ds_script_aux_w);
				adicionar_lista_erro(ds_script_aux_w);
			end;

			/* Compilar body. */

			begin
				ds_script_aux_w := substr(ds_script_criacao_w, nr_aux_w + 1, length(ds_script_criacao_w));
				if ((ds_script_aux_w IS NOT NULL AND ds_script_aux_w::text <> '') or ds_script_aux_w <> '') then
					if (instr(ds_script_aux_w, 'PACKAGE BODY', 1, 1) > 0) then
						/* Assina o objeto caso dúvida de compilação do mesmo. */

						ds_script_aux_w := regexp_replace(ds_script_aux_w, 'PACKAGE BODY',' PACKAGE BODY /* COMPILADA VIA PROCEDURE NA VERSÃO '
 || cd_versao_tasy_versao_w || '. */ ',1,1);
					end if;
					compilar_objeto(ds_script_aux_w);
				else
					if (instr(ds_script_criacao_w, 'PACKAGE BODY', 1, 1) > 0) then
						/* Assina o objeto caso dúvida de compilação do mesmo. */

						ds_script_criacao_w := regexp_replace(ds_script_criacao_w, 'PACKAGE BODY',' PACKAGE BODY /* COMPILADA VIA PROCEDURE NA VERSÃO '
 || cd_versao_tasy_versao_w || '. */ ',1,1);
					end if;
					compilar_objeto(ds_script_criacao_w);
				end if;
			exception
			when others then
				ds_erro_w := 'Erro ao compilar corpo: ' || substr(SQLERRM(SQLSTATE),1,2000);

				if ((ds_script_aux_w IS NOT NULL AND ds_script_aux_w::text <> '') or ds_script_aux_w <> '') then
					CALL log_atualizacao(ds_erro_w, 'S', ds_script_aux_w);
					adicionar_lista_erro(ds_script_aux_w);
				else
					CALL log_atualizacao(ds_erro_w, 'S', ds_script_criacao_w);
					adicionar_lista_erro(ds_script_criacao_w);
				end if;
			end;

			if (ds_erro_w = '' or coalesce(ds_erro_w::text, '') = '') then

				SELECT	trunc((TO_CHAR(CURRENT_TIMESTAMP, 'SSSSSxFF'))::numeric  * 1000) - qt_registro_w
				into STRICT	qt_registro_w
				;

				CALL log_atualizacao('Compilado com sucesso - Tempo: ' || qt_registro_w || 'ms', 'N', null);
			end if;

			goto end_loop;
		elsif (ie_tipo_objeto_w = 'TYPE') then

			script_table_w := split_script_type(ds_script_criacao_w);
			ds_erro_w := '';
			/* Dropar type antes da criação para não dar erro de dependência. */

			begin
				EXECUTE 'drop type ' || nm_objeto_w || ' force';
			exception
			when others then
				null;
			end;

			for i in script_table_w.first .. script_table_w.last loop
				begin
					if (instr(script_table_w(i), 'TYPE', 1, 1) > 0) then
						/* Assina o objeto caso dúvida de compilação do mesmo. */

						script_table_w(i) := regexp_replace(script_table_w(i), 'TYPE',' TYPE /* COMPILADA VIA PROCEDURE NA VERSÃO '
 || cd_versao_tasy_versao_w || '. */ ',1,1);
					end if;

					compilar_objeto(script_table_w(i));
				exception
				when others then
					ds_erro_w := 'Erro ao compilar type: ' || substr(SQLERRM(SQLSTATE),1,2000);
					CALL log_atualizacao(ds_erro_w, 'S', script_table_w(i));
					adicionar_lista_erro(script_table_w(i));
				end;
			end loop;

			if ((ds_erro_w = '' or coalesce(ds_erro_w::text, '') = '') and script_table_w.count > 0) then

				SELECT	trunc((TO_CHAR(CURRENT_TIMESTAMP, 'SSSSSxFF'))::numeric  * 1000) - qt_registro_w
				into STRICT	qt_registro_w
				;

				CALL log_atualizacao('Compilado com sucesso - Tempo: ' ||qt_registro_w|| 'ms', 'N', null);
			end if;

			goto end_loop;
		end if;

		/* Assina o objeto caso dúvida de compilação do mesmo. */

		if (ie_tipo_objeto_w = 'VIEW') then
			if (instr(ds_script_criacao_w, 'SELECT ', 1, 1) > 0) then
				ds_script_criacao_w := regexp_replace(ds_script_criacao_w, 'SELECT ',' SELECT /* VIEW COMPILADA VIA PROCEDURE NA VERSÃO '
 || cd_versao_tasy_versao_w || '. */ ',1,1);
			end if;
		elsif (ie_tipo_objeto_w = 'FUNCTION') then
			if (instr(ds_script_criacao_w, 'FUNCTION', 1, 1) > 0) then
				ds_script_criacao_w := regexp_replace(ds_script_criacao_w, 'FUNCTION',' FUNCTION /* COMPILADA VIA PROCEDURE NA VERSÃO '
 || cd_versao_tasy_versao_w || '. */ ',1,1);
			end if;
		elsif (ie_tipo_objeto_w = 'PROCEDURE') then
			if (instr(ds_script_criacao_w, 'PROCEDURE', 1, 1) > 0) then
				ds_script_criacao_w := regexp_replace(ds_script_criacao_w, 'PROCEDURE',' PROCEDURE /* COMPILADA VIA PROCEDURE NA VERSÃO '
 || cd_versao_tasy_versao_w || '. */ ',1,1);
			end if;
		elsif (ie_tipo_objeto_w = 'TRIGGER') then
			if (instr(ds_script_criacao_w, 'TRIGGER', 1, 1) > 0) then
				ds_script_criacao_w := regexp_replace(ds_script_criacao_w, 'TRIGGER',' TRIGGER /* COMPILADA VIA PROCEDURE NA VERSÃO '
 || cd_versao_tasy_versao_w || '. */ ',1,1);
			end if;
		end if;

		compilar_objeto(ds_script_criacao_w);

		SELECT	trunc((TO_CHAR(CURRENT_TIMESTAMP, 'SSSSSxFF'))::numeric  * 1000) - qt_registro_w
		into STRICT	qt_registro_w
		;

		CALL log_atualizacao('Compilado com sucesso - Tempo: ' || qt_registro_w || 'ms', 'N', null);
	end;
	end if;

exception
when others then
	SELECT	trunc((TO_CHAR(CURRENT_TIMESTAMP, 'SSSSSxFF'))::numeric  * 1000) - qt_registro_w
	into STRICT	qt_registro_w
	;

	CALL log_atualizacao('Erro ao compilar: ' || substr(SQLERRM(SQLSTATE),1,2000) || ' - Tempo: ' || qt_registro_w || 'ms', 'S', ds_script_criacao_w);
	adicionar_lista_erro(ds_script_criacao_w);
end;

<<end_loop>>
null;
end loop;
dbms_sql.close_cursor(C01);

EXECUTE 'drop table w_atualizar_objetos';

CALL gravar_processo_longo('', '', null);

end;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE log_atualizacao ( ds_log_p text, ie_erro_p text, ds_script_criacao_p text) FROM PUBLIC;

