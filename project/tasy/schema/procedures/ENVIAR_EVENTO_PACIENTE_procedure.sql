-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE enviar_evento_paciente (ie_sincrono_p text default null) AS $body$
DECLARE


ds_titulo_w		varchar(255);
ds_mensagem_w		varchar(4000);
ie_forma_ev_w		varchar(15);
cd_pessoa_fisica_w	varchar(10);
nr_sequencia_w		bigint;
nr_seq_ev_pac_w		bigint;
nr_telefone_w		varchar(40);
nm_usuario_w		varchar(15);
nr_seq_classif_w		bigint;
qt_pendente_w		bigint;
ds_email_destino_w		varchar(255);
ds_remetente_sms_w	varchar(80);
ds_remetente_email_w	varchar(100);
cd_paciente_w		varchar(10);
nr_atendimento_w		bigint;
nm_usuario_ev_w		varchar(15);
id_sms_w			bigint;
nr_seq_evento_w		bigint;
nr_ddi_celular_w		varchar(5);
nr_celular_w		varchar(255);
nr_celular_fixo_w		varchar(255);
hr_inicial_w		timestamp;
hr_final_w		timestamp;
nm_usuario_destino_w	varchar(15);
ie_possui_regra_w		varchar(1);
cd_status_w		varchar(2);
ie_pessoa_destino_w	varchar(15);
nm_usuario_dest_w	varchar(15);
ie_erro_w		varchar(1);
ds_email_fixo_w		varchar(100);
nm_usuario_envio_w 	varchar(15);
ie_atualizar_evento_w	varchar(1);
nm_usuario_ww	varchar(15);
ie_cons_dest_sms_w	varchar(1);
ie_sms_fone_adicional_w varchar(1);
nr_telefone_celular_w	varchar(15);
nr_ddd_celular_w varchar(5);
nr_ddi_tel_celular_w varchar(5);
ie_perm_sms_email_pf_w varchar(1) := 'S';
ie_perm_sms_email_w varchar(1);
ie_valida_sms_email_pf_w varchar(1);


C01 CURSOR FOR
	SELECT	a.ds_titulo,
		a.ds_mensagem,
		b.ie_forma_ev,
		b.ie_pessoa_destino,
		b.cd_pessoa_fisica,
		b.nr_sequencia,
		b.nr_seq_ev_pac,
		c.ds_remetente_sms,
		c.ds_remetente_email,
		a.cd_pessoa_fisica,
		a.nr_atendimento,
		substr(coalesce(c.nm_usuario_ev,'TASY'),1,15),
		c.nr_sequencia,
		c.hr_inicial,
		c.hr_final,
		substr(b.nm_usuario_dest,1,15),
		b.ds_email_fixo,
		ie_sms_fone_adicional
	FROM	ev_evento c,
		EV_EVENTO_PACIENTE a,
		EV_EVENTO_PAC_DESTINO b
	WHERE	a.nr_sequencia	= b.nr_seq_ev_pac
	AND	a.nr_seq_evento	= c.nr_sequencia
	and	coalesce(c.ie_situacao,'A') 	= 'A'
	AND ( coalesce(b.dt_ciencia::text, '') = ''	 and 	b.ie_status <> 'R')
	AND     ((c.ie_tipo_acao <> 'M') OR (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> ''))
	and 	a.ie_status	= cd_status_w
	and	a.ie_comunic_pendente = 'S'
	AND	b.ie_forma_ev	in (1,3,4,8)
	AND	b.ie_status	= 'G'
	and 	(((c.dt_inicio_envio IS NOT NULL AND c.dt_inicio_envio::text <> '') and trunc(b.dt_atualizacao_nrec) >= trunc(c.dt_inicio_envio))
	or 	coalesce(c.dt_inicio_envio::text, '') = '');

c02 CURSOR FOR
	SELECT	distinct
		trim(both b.nr_ddi_celular),
		trim(both b.nr_celular)
	FROM	ev_evento_regra_dest a,
		ev_evento_regra_celular b
	WHERE	a.nr_sequencia = b.nr_seq_ev_regra_dest
	AND	a.cd_pf_destino = cd_pessoa_fisica_w
	AND	a.ie_forma_ev = '1'
	AND	a.nr_seq_evento = nr_seq_evento_w
	ORDER BY trim(both b.nr_celular);

c03 CURSOR FOR
  SELECT nr_telefone_celular,
         nr_ddd_celular,
         nr_ddi_tel_celular
  from COMPL_PF_TEL_ADIC 
  where cd_pessoa_fisica = cd_pessoa_fisica_w
  and (nr_telefone_celular IS NOT NULL AND nr_telefone_celular::text <> '');


BEGIN
nm_usuario_ww := wheb_usuario_pck.get_nm_usuario;

if (coalesce(nm_usuario_ww::text, '') = '') then
	nm_usuario_ww := 'Job';
end if;

ie_cons_dest_sms_w := obter_valor_param_usuario(0,214,0,nm_usuario_ww,wheb_usuario_pck.get_cd_estabelecimento);
ie_valida_sms_email_pf_w := obter_valor_param_usuario(7032,12,0,nm_usuario_ww,wheb_usuario_pck.get_cd_estabelecimento);

if (ie_sincrono_p = 'S') then
	begin
    	cd_status_w := 'GS';
	end;
else
	begin
    	cd_status_w := 'G';
	end;
end if;

SELECT	MIN(nr_sequencia)
INTO STRICT	nr_seq_classif_w
FROM	comunic_interna_classif
WHERE	ie_tipo	= 'F';

OPEN C01;
LOOP
FETCH C01 INTO
	ds_titulo_w,
	ds_mensagem_w,
	ie_forma_ev_w,
	ie_pessoa_destino_w,
	cd_pessoa_fisica_w,
	nr_sequencia_w,
	nr_seq_ev_pac_w,
	ds_remetente_sms_w,
	ds_remetente_email_w,
	cd_paciente_w,
	nr_atendimento_w,
	nm_usuario_ev_w,
	nr_seq_evento_w,
	hr_inicial_w,
	hr_final_w,
	nm_usuario_destino_w,
	ds_email_fixo_w,
	ie_sms_fone_adicional_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	BEGIN
	ie_possui_regra_w := 'N';
	id_sms_w := null;

	select  MAX(coalesce(ie_perm_sms_email,'S'))
	into STRICT    ie_perm_sms_email_w
	from    pessoa_fisica
	where   cd_pessoa_fisica = cd_pessoa_fisica_w;

	IF (ie_valida_sms_email_pf_w = 'S' AND ie_perm_sms_email_w = 'N' ) THEN
		ie_perm_sms_email_pf_w := 'N';
	END IF;

    
	IF (hr_inicial_w IS NOT NULL AND hr_inicial_w::text <> '') THEN
		BEGIN
		IF (hr_final_w < hr_inicial_w) THEN
			BEGIN
			hr_inicial_w	:= TO_DATE(TO_CHAR(clock_timestamp(),'dd/mm/yyyy') || ' ' || TO_CHAR(hr_inicial_w, 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
			hr_final_w 	:= TO_DATE(TO_CHAR(clock_timestamp(),'dd/mm/yyyy') || ' ' || TO_CHAR(hr_final_w, 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') + 1;
			END;
		ELSE
			BEGIN
			hr_inicial_w	:= TO_DATE(TO_CHAR(clock_timestamp(),'dd/mm/yyyy') || ' ' || TO_CHAR(hr_inicial_w, 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
			hr_final_w 	:= TO_DATE(TO_CHAR(clock_timestamp(),'dd/mm/yyyy') || ' ' || TO_CHAR(hr_final_w, 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
			END;
		END IF;
		END;
	END IF;
	
	IF (coalesce(hr_inicial_w::text, '') = '')	OR
		((hr_inicial_w <= clock_timestamp()) AND (hr_final_w >= clock_timestamp())) THEN
		BEGIN
		IF (ie_forma_ev_w = '1') THEN /*SMS*/
			BEGIN

			ie_atualizar_evento_w := 'N';

			OPEN C02;
			LOOP
			FETCH C02 INTO
				nr_ddi_celular_w,
				nr_celular_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				BEGIN
				IF (ds_remetente_sms_w IS NOT NULL AND ds_remetente_sms_w::text <> '') THEN
					BEGIN
						if (coalesce(ie_cons_dest_sms_w,'S') = 'N') then
							nr_celular_fixo_w := nr_ddi_celular_w || nr_celular_w;
						else
							nr_celular_fixo_w := nr_celular_w;
						end if;

						ie_atualizar_evento_w := 'S';

						IF (ie_perm_sms_email_pf_w = 'S') THEN
							id_sms_w := wheb_sms.enviar_sms(ds_remetente_sms_w, nr_celular_fixo_w, ds_mensagem_w, nm_usuario_ev_w, id_sms_w);
						ELSE
							ds_mensagem_w := 'Function: 7032, Param: 12 = S, pessoa_fisica.ie_pessoa_fisica = N';
						END IF;

						nr_telefone_w	:= nr_celular_fixo_w;
						
						INSERT INTO log_envio_sms(
							nr_sequencia,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							dt_atualizacao,
							nm_usuario,
							dt_envio,
							cd_agenda,
							nr_seq_agenda,
							nr_telefone,
							ds_mensagem,
							nr_atendimento,
							cd_pessoa_fisica,
							id_sms,
							nr_seq_evento,
							cd_pessoa_destino)
						VALUES (
							nextval('log_envio_sms_seq'),
							clock_timestamp(),
							nm_usuario_ev_w,
							clock_timestamp(),
							nm_usuario_ev_w,
							clock_timestamp(),
							NULL,
							NULL,
							nr_telefone_w,
							SUBSTR(ds_mensagem_w,1,2000),
							nr_atendimento_w,
							cd_paciente_w,
							id_sms_w,
							nr_seq_evento_w,
							cd_pessoa_fisica_w);

						ie_possui_regra_w := 'S';
					EXCEPTION
					WHEN OTHERS THEN

						INSERT INTO log_tasy(
							DT_ATUALIZACAO,
							NM_USUARIO,
							CD_LOG,
							DS_LOG)
						VALUES (clock_timestamp(),
							'Job',
							111,
							'R:'||ds_remetente_sms_w||' T:'||nr_celular_fixo_w||' M:'||ds_mensagem_w||' U:'||nm_usuario_ev_w);

						nr_telefone_w := nr_celular_fixo_w;
					END;
				END IF;

				END;
			END LOOP;
			CLOSE C02;

			if (ie_possui_regra_w <> 'S' and ie_sms_fone_adicional_w = 'S' and (ds_remetente_sms_w IS NOT NULL AND ds_remetente_sms_w::text <> '')) then
					OPEN C03;
					loop
					FETCH C03 INTO
					nr_telefone_celular_w,
					nr_ddd_celular_w,
					nr_ddi_tel_celular_w;
					EXIT WHEN NOT FOUND; /* apply on C03 */
					BEGIN
					if (coalesce(ie_cons_dest_sms_w,'S') = 'N') then
							nr_telefone_celular_w := nr_ddi_tel_celular_w || nr_telefone_celular_w;
					end if;

					if (length(nr_telefone_celular_w) < 10) then
						nr_telefone_celular_w := nr_ddi_tel_celular_w || nr_ddd_celular_w || nr_telefone_celular_w;
					end if;

					IF (ie_perm_sms_email_pf_w = 'S' ) THEN
						id_sms_w := wheb_sms.enviar_sms(ds_remetente_sms_w, nr_telefone_celular_w, ds_mensagem_w, nm_usuario_ev_w, id_sms_w);
					ELSE
						ds_mensagem_w := 'Function: 7032, Param: 12 = S, pessoa_fisica.ie_pessoa_fisica = N';
					END IF;

					INSERT INTO log_envio_sms(
							nr_sequencia,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							dt_atualizacao,
							nm_usuario,
							dt_envio,
							cd_agenda,
							nr_seq_agenda,
							nr_telefone,
							ds_mensagem,
							nr_atendimento,
							cd_pessoa_fisica,
							id_sms,
							nr_seq_evento,
							cd_pessoa_destino)
						VALUES (
							nextval('log_envio_sms_seq'),
							clock_timestamp(),
							nm_usuario_ev_w,
							clock_timestamp(),
							nm_usuario_ev_w,
							clock_timestamp(),
							NULL,
							NULL,
							nr_telefone_celular_w,
							SUBSTR(ds_mensagem_w,1,2000),
							nr_atendimento_w,
							cd_paciente_w,
							id_sms_w,
							nr_seq_evento_w,
							cd_pessoa_fisica_w);

					EXCEPTION
					WHEN OTHERS THEN

						INSERT INTO log_tasy(
							DT_ATUALIZACAO,
							NM_USUARIO,
							CD_LOG,
							DS_LOG)
						VALUES (clock_timestamp(),
							'Job',
							111,
							'R:'||ds_remetente_sms_w||' T:'||nr_telefone_celular_w||' M:'||ds_mensagem_w||' U:'||nm_usuario_ev_w);
					END;

					END LOOP;
					CLOSE C03;
			end if;
	
			IF (ie_possui_regra_w <> 'S') THEN
				if (coalesce(ie_cons_dest_sms_w,'S') = 'N') then
					SELECT	MAX(trim(both nr_ddi_celular || nr_telefone_celular))
					INTO STRICT	nr_telefone_w
					FROM	pessoa_fisica
					WHERE	cd_pessoa_fisica	= cd_pessoa_fisica_w;
				else
					SELECT	MAX(trim(both nr_telefone_celular))
					INTO STRICT	nr_telefone_w
					FROM	pessoa_fisica
					WHERE	cd_pessoa_fisica	= cd_pessoa_fisica_w;

					if (length(nr_telefone_w) < 10) then
						SELECT	MAX(trim(both nr_ddi_celular)) || MAX(trim(both nr_ddd_celular))|| MAX(trim(both nr_telefone_celular))
							INTO STRICT	nr_telefone_w
						FROM	pessoa_fisica
						WHERE	cd_pessoa_fisica	= cd_pessoa_fisica_w;
					end if;
				end if;

				IF (ds_remetente_sms_w IS NOT NULL AND ds_remetente_sms_w::text <> '') AND (nr_telefone_w IS NOT NULL AND nr_telefone_w::text <> '') THEN
					BEGIN
						ie_atualizar_evento_w := 'S';
						
						IF (ie_perm_sms_email_pf_w = 'S' ) THEN
							id_sms_w := wheb_sms.enviar_sms(ds_remetente_sms_w, nr_telefone_w, ds_mensagem_w, nm_usuario_ev_w, id_sms_w);
						ELSE
							ds_mensagem_w := 'Function: 7032, Param: 12 = S, pessoa_fisica.ie_pessoa_fisica = N';
						END IF;
						
						INSERT INTO log_envio_sms(
							nr_sequencia,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							dt_atualizacao,
							nm_usuario,
							dt_envio,
							cd_agenda,
							nr_seq_agenda,
							nr_telefone,
							ds_mensagem,
							nr_atendimento,
							cd_pessoa_fisica,
							id_sms,
							nr_seq_evento,
							cd_pessoa_destino)
						VALUES (
							nextval('log_envio_sms_seq'),
							clock_timestamp(),
							nm_usuario_ev_w,
							clock_timestamp(),
							nm_usuario_ev_w,
							clock_timestamp(),
							NULL,
							NULL,
							nr_telefone_w,
							SUBSTR(ds_mensagem_w,1,2000),
							nr_atendimento_w,
							cd_paciente_w,
							id_sms_w,
							nr_seq_evento_w,
							cd_pessoa_fisica_w);
					EXCEPTION
					WHEN OTHERS THEN
						nr_telefone_w	:= nr_telefone_w;
						INSERT INTO log_tasy(
							DT_ATUALIZACAO,
							NM_USUARIO,
							CD_LOG,
							DS_LOG)
						VALUES (clock_timestamp(),
							'Job',
							111,
							'R:'||ds_remetente_sms_w||' T:'||nr_telefone_w||' M:'||substr(ds_mensagem_w,1,255)||' U:'||nm_usuario_ev_w);

					END;
				END IF;

				IF (coalesce(nr_telefone_w::text, '') = '') THEN
					BEGIN
						ie_atualizar_evento_w := 'N';

						UPDATE	ev_evento_pac_destino
						SET	ie_status	= 'R',
							dt_ciencia	= clock_timestamp(),
							id_sms		= id_sms_w
						WHERE	nr_sequencia	= nr_sequencia_w;

						INSERT INTO log_tasy(
							DT_ATUALIZACAO,
							NM_USUARIO,
							CD_LOG,
							DS_LOG)
						VALUES (clock_timestamp(),
							'Job',
							111,
							wheb_mensagem_pck.get_texto(405625) || ' R:'||ds_remetente_sms_w||' T:'||nr_telefone_w||' M:'||substr(ds_mensagem_w,1,255)||' U:'||nm_usuario_ev_w);
					END;
				END IF;
			END IF;


			if (ie_atualizar_evento_w = 'S') then
				UPDATE	ev_evento_pac_destino
				SET	ie_status	= 'E',
					dt_ciencia	= clock_timestamp(),
					id_sms		= id_sms_w
				WHERE	nr_sequencia	= nr_sequencia_w;
			end if;

			END;
		ELSIF (ie_forma_ev_w = '3') THEN /*Comunicacao interna*/
			BEGIN
			SELECT	coalesce(nm_usuario_destino_w,MAX(nm_usuario))
			INTO STRICT	nm_usuario_w
			FROM	usuario
			WHERE	cd_pessoa_fisica = cd_pessoa_fisica_w
			and		coalesce(ie_situacao,'A') = 'A';

			INSERT	INTO comunic_interna(
				dt_comunicado,
				ds_titulo,
				ds_comunicado,
				nm_usuario,
				dt_atualizacao,
				ie_geral,
				nm_usuario_destino,
				ie_gerencial,
				ds_perfil_adicional,
				nr_sequencia,
				nr_seq_classif,
				dt_liberacao,
				nr_seq_ev_pac_dest)
			VALUES (
				clock_timestamp(),
				ds_titulo_w,
				ds_mensagem_w,
				nm_usuario_ev_w,
				clock_timestamp(),
				'N',
				nm_usuario_w,
				'N',
				NULL,
				nextval('comunic_interna_seq'),
				nr_seq_classif_w,
				clock_timestamp(),
				nr_sequencia_w);

			UPDATE	ev_evento_pac_destino
			SET	ie_status	= 'E',
				dt_ciencia	= clock_timestamp()
			WHERE	nr_sequencia	= nr_sequencia_w;

			END;
		ELSIF (ie_forma_ev_w = '4') THEN /*Email*/
			BEGIN

			if (ie_pessoa_destino_w = '12') then
				select	obter_usuario_pf(cd_pessoa_fisica_w)
					into STRICT	nm_usuario_dest_w
				;

				select	obter_dados_usuario_opcao(nm_usuario_dest_w,'E')
				into STRICT	ds_email_destino_w
				;
			elsif (ie_pessoa_destino_w in ('22')) then
				ds_email_destino_w := ds_email_fixo_w;
			else
				SELECT	MAX(obter_compl_pf(cd_pessoa_fisica_w,1,'M'))
				INTO STRICT	ds_email_destino_w
				;
				
				if (coalesce(ds_email_destino_w::text, '') = '') then
					SELECT	MAX(obter_compl_pf(cd_pessoa_fisica_w,2,'M'))
					INTO STRICT	ds_email_destino_w
					;
				end if;
			end if;

			ie_erro_w := 'N';
			IF (ds_email_destino_w IS NOT NULL AND ds_email_destino_w::text <> '') THEN
				BEGIN
					begin
						IF (ie_perm_sms_email_pf_w = 'S' ) THEN            
							CALL Enviar_Email(ds_titulo_w,ds_mensagem_w,ds_remetente_email_w,ds_email_destino_w,nm_usuario_ev_w,'M');
						END IF;					
					exception
					when others then
						ie_erro_w := 'S';
						CALL gravar_log_tasy(98988, wheb_mensagem_pck.get_texto(793180)||'->'||ds_titulo_w||
								       '-'||wheb_mensagem_pck.get_texto(793181)||'->'||ds_remetente_email_w||
								       '-'||wheb_mensagem_pck.get_texto(793182)||'->'||ds_email_destino_w||
								       '-'||wheb_mensagem_pck.get_texto(793183)||'->'||nm_usuario_ev_w||
								       '-'||wheb_mensagem_pck.get_texto(793186)||'->'||sqlerrm, 'Tasy');
					end;
				END;
			END IF;

			if (ie_erro_w = 'S') then

				UPDATE	ev_evento_pac_destino
				SET	ie_status	= 'R',
					dt_ciencia	= clock_timestamp()
				WHERE	nr_sequencia	= nr_sequencia_w;
			else

				UPDATE	ev_evento_pac_destino
				SET	ie_status	= 'E',
					dt_ciencia	= clock_timestamp()
				WHERE	nr_sequencia	= nr_sequencia_w;
			end if;

			END;


		ELSIF (ie_forma_ev_w = '8') THEN /* Glass */
			BEGIN


			if (coalesce(nm_usuario_destino_w::text, '') = '') then
				begin

				select 	obter_usuario_pf(cd_pessoa_fisica_w)
				into STRICT	nm_usuario_envio_w
				;

				end;
			else
				begin
				nm_usuario_envio_w := nm_usuario_destino_w;
				end;
			end if;



			insert into GLASS_QUEUE(
				NR_SEQUENCIA,
				DT_ATUALIZACAO,
				NM_USUARIO,
				DT_ATUALIZACAO_NREC,
				NM_USUARIO_NREC,
				IE_STATUS,
				DS_MENSAGEM,
				DS_TITULO,
				CD_PESSOA_FISICA,
				NM_USUARIO_ENVIO
				)
			values (
				nextval('glass_queue_seq'),
				clock_timestamp(),
				nm_usuario_ev_w,
				clock_timestamp(),
				nm_usuario_ev_w,
				'F',
				ds_mensagem_w,
				ds_titulo_w,
				cd_paciente_w,
				nm_usuario_envio_w
				);


			END;


		END IF;

		SELECT	COUNT(*)
		INTO STRICT	qt_pendente_w
		FROM	ev_evento_pac_destino
		WHERE	nr_seq_ev_pac	= nr_seq_ev_pac_w
		AND	ie_status	<> 'E';

		IF (qt_pendente_w = 0) THEN
			BEGIN
			UPDATE	ev_evento_paciente
			SET	ie_status	= 'E'
			WHERE	nr_sequencia	= nr_seq_ev_pac_w;
			END;
		END IF;

		SELECT	COUNT(*)
		INTO STRICT	qt_pendente_w
		FROM	ev_evento_pac_destino
		WHERE	nr_seq_ev_pac	= nr_seq_ev_pac_w
		AND	ie_forma_ev	in (1,3,4)
		AND	ie_status	<> 'E';

		IF (qt_pendente_w = 0) THEN
			BEGIN
			UPDATE	ev_evento_paciente
			SET	ie_comunic_pendente	= 'N'
			WHERE	nr_sequencia	= nr_seq_ev_pac_w;
			END;
		END IF;
		commit;
		END;
	END IF;
	END;
END LOOP;
CLOSE C01;

--alterar  a forma de envio = 2 
update	ev_evento_paciente a
set	a.ie_comunic_pendente	= 'N'
where not exists (SELECT 1
		from	ev_evento_pac_destino b
		where	b.nr_seq_ev_pac	= a.nr_sequencia
		and	b.ie_forma_ev	in (1,3,4)
		and	b.ie_status	<> 'E')
and	a.ie_comunic_pendente	= 'S';

COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enviar_evento_paciente (ie_sincrono_p text default null) FROM PUBLIC;

