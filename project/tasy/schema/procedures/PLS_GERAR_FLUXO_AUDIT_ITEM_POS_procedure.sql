-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_fluxo_audit_item_pos ( nr_seq_analise_p bigint, nr_seq_conta_pos_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar o fluxo de auditoria para os itens da conta
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: Esta rotina é chamada na PLS_$GERAR_$AUDITORIA_POS para que seja verificado se análise
de pós estabelecido possui fluxo, caso não possua são então fechadas as contas da análise de pós
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_status_w			varchar(255);
ie_origem_conta_w		varchar(1);
ie_auditoria_ww			varchar(1)	:= 'N';
ie_auditoria_w			varchar(1);
nr_seq_ocor_benef_w		bigint;
nr_seq_ocorrencia_w		bigint;
nr_seq_grupo_w			bigint;
qt_registro_w			bigint;
qt_analise_item_w		bigint;
qt_grupo_analise_w		bigint;
cd_estabelecimento_w		smallint;
ie_intercambio_w		varchar(1);
qt_oco_despesa_w		integer;
ie_despesa_w			varchar(1);
nr_seq_conta_w			pls_conta_v.nr_sequencia%type;
nr_seq_grupo_ocor_w		pls_ocorrencia_grupo.nr_sequencia%type;
ie_origem_analise_w		pls_analise_conta.ie_origem_analise%type;
qt_analise_w			integer;
nr_seq_conta_audit_w	pls_auditoria_conta_grupo.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	b.nr_sequencia,
		b.nr_seq_ocorrencia,
		c.ie_origem_conta
	from	pls_ocorrencia_benef			b,
		pls_conta_pos_estabelecido		a,
		pls_conta				c
	where	a.nr_sequencia		= b.nr_seq_conta_pos_estab
	and	c.nr_sequencia		= a.nr_seq_conta
	and	a.nr_seq_analise	= nr_seq_analise_p
	and (a.nr_sequencia	 = nr_seq_conta_pos_p or coalesce(nr_seq_conta_pos_p::text, '') = '')
	and (coalesce(b.ie_lib_manual::text, '') = '' or b.ie_lib_manual = 'N')
	and	((a.ie_situacao	= 'A') or (coalesce(a.ie_situacao::text, '') = ''));

C02 CURSOR FOR
	SELECT	b.nr_seq_grupo
	from	pls_analise_grupo_item b,
		pls_analise_conta_item a
	where	a.nr_sequencia		= b.nr_seq_item_analise
	and	a.nr_seq_analise	= nr_seq_analise_p
	and	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_w
	group by
		a.nr_seq_ocorrencia,
		b.nr_seq_grupo;

C03 CURSOR FOR
	SELECT	a.nr_seq_grupo,
		a.nr_sequencia
	from	pls_ocorrencia_grupo	a
	where	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_w
	and	a.ie_conta_medica	= 'S'
	and	a.ie_situacao		= 'A'
	and	((a.ie_intercambio = 'S') or (a.ie_intercambio = ie_intercambio_w))
	and (a.ie_origem_conta = ie_origem_conta_w or coalesce(a.ie_origem_conta::text, '') = '')
	and	((coalesce(a.ie_tipo_analise::text, '') = '') or (a.ie_tipo_analise = 'A') or (a.ie_tipo_analise = 'C' and ie_origem_analise_w in ('1','3','4','5','6')) or (a.ie_tipo_analise	= 'P' and ie_origem_analise_w in ('2','7')));

C04 CURSOR FOR
	SELECT 	nr_sequencia nr_seq_conta_audit
	from	pls_auditoria_conta_grupo
	where	nr_seq_analise = nr_seq_analise_p
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	order by nr_seq_ordem desc;

BEGIN

select 	count(1)
into STRICT	qt_analise_w
from	pls_analise_conta
where	nr_sequencia	= nr_seq_analise_p;

if (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') and (qt_analise_w > 0) then
	/* Verificar primeiro se tem os registros na tabela antiga */

	select	count(1)
	into STRICT	qt_analise_item_w
	from	pls_analise_conta_item a
	where	a.nr_seq_analise	= nr_seq_analise_p;

	select	CASE WHEN a.ie_origem_analise=3 THEN 'I'  ELSE 'N' END ,
		ie_origem_analise
	into STRICT	ie_intercambio_w,
		ie_origem_analise_w
	from	pls_analise_conta	a
	where	a.nr_sequencia	= nr_seq_analise_p;

	open C01;
	loop
	fetch C01 into
		nr_seq_ocor_benef_w,
		nr_seq_ocorrencia_w,
		ie_origem_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select	coalesce(max(ie_auditoria_conta),'N')
		into STRICT	ie_auditoria_w
		from	pls_ocorrencia
		where	nr_sequencia	= nr_seq_ocorrencia_w;

		if (ie_auditoria_w = 'S') then
			ie_auditoria_ww	:= ie_auditoria_w;
		end if;

		/* Se tiver, copiar para nova */

		if (qt_analise_item_w > 0) then
			open C02;
			loop
			fetch C02 into
				nr_seq_grupo_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				ie_auditoria_ww	:= 'S';

				select	count(1)
				into STRICT	qt_registro_w
				from	pls_analise_glo_ocor_grupo a
				where	a.nr_seq_ocor_benef	= nr_seq_ocor_benef_w
				and	a.nr_seq_grupo		= nr_seq_grupo_w;

				if (qt_registro_w = 0) then
					insert into pls_analise_glo_ocor_grupo(nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						nr_seq_analise,
						nr_seq_ocor_benef,
						nr_seq_grupo,
						ie_status)
					values (nextval('pls_analise_glo_ocor_grupo_seq'),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nr_seq_analise_p,
						nr_seq_ocor_benef_w,
						nr_seq_grupo_w,
						'P');
				end if;
				end;
			end loop;
			close C02;
		end if;

		open C03;
		loop
		fetch C03 into
			nr_seq_grupo_w,
			nr_seq_grupo_ocor_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			ie_despesa_w	:= 'N';

			select	count(1)
			into STRICT	qt_oco_despesa_w
			from	pls_oc_grupo_tipo_desp
			where	nr_seq_ocorrencia_grupo = nr_seq_grupo_ocor_w;

			if (qt_oco_despesa_w = 0) then
				ie_despesa_w	:= 'S';
			end if;

			if (ie_despesa_w = 'N') then
				select	max(pls_obter_se_grupo_tipo_desp(nr_seq_grupo_ocor_w,y.ie_tipo_despesa,'P'))
				into STRICT	ie_despesa_w
				from	pls_conta_proc		y,
					pls_ocorrencia_benef	x
				where	x.nr_seq_conta		= nr_seq_conta_w
				and	y.nr_sequencia		= x.nr_seq_proc
				and	x.nr_seq_ocorrencia	= nr_seq_ocorrencia_w;

				if (coalesce(ie_despesa_w,'N') = 'N') then
					select	max(pls_obter_se_grupo_tipo_desp(nr_seq_grupo_ocor_w,y.ie_tipo_despesa,'M'))
					into STRICT	ie_despesa_w
					from	pls_conta_mat		y,
						pls_ocorrencia_benef	x
					where	x.nr_seq_conta		= nr_seq_conta_w
					and	y.nr_sequencia		= x.nr_seq_mat
					and	x.nr_seq_ocorrencia	= nr_seq_ocorrencia_w;

					if (coalesce(ie_despesa_w::text, '') = '') then
						ie_despesa_w	:= 'N';
					end if;
				end if;
			end if;

			if (coalesce(ie_despesa_w,'S') = 'S') then
				ie_auditoria_ww	:= 'S';

				select	count(1)
				into STRICT	qt_registro_w
				from	pls_analise_glo_ocor_grupo a
				where	a.nr_seq_ocor_benef	= nr_seq_ocor_benef_w
				and	a.nr_seq_grupo		= nr_seq_grupo_w  LIMIT 1;

				if (qt_registro_w = 0) then

					select	count(1)
					into STRICT	qt_grupo_analise_w
					from	pls_auditoria_conta_grupo
					where	nr_seq_analise	= nr_seq_analise_p
					and	nr_seq_grupo	= nr_seq_grupo_w;

					insert into pls_analise_glo_ocor_grupo(nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						nr_seq_analise,
						nr_seq_ocor_benef,
						nr_seq_grupo,
						ie_status)
					values (nextval('pls_analise_glo_ocor_grupo_seq'),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nr_seq_analise_p,
						nr_seq_ocor_benef_w,
						nr_seq_grupo_w,
						'P');
				end if;
			end if;

			end;
		end loop;
		close C03;
		end;
	end loop;
	close C01;

	select	CASE WHEN a.ie_status='S' THEN  CASE WHEN  ie_auditoria_ww='S' THEN  'G' WHEN  ie_auditoria_ww='N' THEN  'S' END   ELSE a.ie_status END
	into STRICT	ie_status_w
	from	pls_analise_conta	a
	where	a.nr_sequencia	= nr_seq_analise_p;

	if ( ie_status_w = 'G' ) then

		for r_c04_w in C04 loop

			CALL pls_desf_final_grupo_analise(null, null, r_c04_w.nr_seq_conta_audit, nm_usuario_p, cd_estabelecimento_w, null);

		end loop;

	end if;

	CALL pls_alterar_status_analise_cta(nr_seq_analise_p, ie_status_w, 'PLS_GERAR_FLUXO_AUDIT_ITEM_POS', nm_usuario_p, cd_estabelecimento_w);

	update	pls_analise_conta
	set	ie_auditoria	= CASE WHEN ie_auditoria='S' THEN  'S' WHEN ie_auditoria='N' THEN  ie_auditoria_ww END
	where	nr_sequencia	= nr_seq_analise_p;
end if;

/* commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_fluxo_audit_item_pos ( nr_seq_analise_p bigint, nr_seq_conta_pos_p bigint, nm_usuario_p text) FROM PUBLIC;

