-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE delete_cons_pepa ( nr_seq_atend_cons_pepa_p bigint, ds_justificativa_p text, nm_usuario_p text) is array_tabelas_w STRARRAY DEFAULT STRARRAY() RETURNS varchar AS $body$
BEGIN
    return chr(39) || str || chr(39);
END;



FUNCTION VERIFY_HAS_ATTR(nm_tabela_p varchar2, nm_atributo_p varchar2) RETURN varchar2 IS
  sql_stmt varchar2( 1000 ) := null;
  count_table number := 0;
BEGIN
  sql_stmt := 'SELECT COUNT(1) FROM tabela_atributo attr1 INNER JOIN  tabela_atributo attr2 ON attr1.nm_tabela = attr2.nm_tabela AND attr2.nm_atributo = '|| TO_STRING(nm_atributo_p) ||' WHERE 1=1 AND attr1.nm_tabela = '|| TO_STRING(nm_tabela_p);

  EXECUTE sql_stmt into STRICT count_table;

  if (count_table > 0) then
      return 'S';
  end if;

  return 'N';
END;



FUNCTION ADD_COMMA(sql_string_p varchar2) RETURN varchar2 IS
  sql_inner varchar2( 1000 ) := null;
BEGIN
  sql_inner := sql_string_p;
  if (count_attr_w > 0) then
    sql_inner := sql_inner || ',';
  end if;
  return sql_inner;
END;



PROCEDURE EXECUTE_ACTION_TABLE(nm_tabela_p varchar2) IS
  custom_delete_w varchar2(1000) := '';
  custom_update_w varchar2(1000) := '';
BEGIN
  custom_update_w := 'UPDATE '||nm_tabela_p||' SET';

  if (VERIFY_HAS_ATTR(nm_tabela_p, 'IE_SITUACAO') = 'S') then
    custom_update_w := custom_update_w || ' IE_SITUACAO = ''I''';
    count_attr_w := count_attr_w + 1;
  end if;

  if (VERIFY_HAS_ATTR(nm_tabela_p, 'DT_INATIVACAO') = 'S') then
    custom_update_w := ADD_COMMA(custom_update_w) || ' DT_INATIVACAO = sysdate';
    count_attr_w := count_attr_w + 1;
  end if;

  if (VERIFY_HAS_ATTR(nm_tabela_p, 'NM_USUARIO_INATIVACAO') = 'S') then
    custom_update_w := ADD_COMMA(custom_update_w) || ' NM_USUARIO_INATIVACAO = '|| TO_STRING(nm_usuario_p);
    count_attr_w := count_attr_w + 1;
  end if;

  if (VERIFY_HAS_ATTR(nm_tabela_p, 'DS_JUSTIFICATIVA') = 'S') then
    custom_update_w := ADD_COMMA(custom_update_w) || ' DS_JUSTIFICATIVA = '|| TO_STRING(ds_justificativa_p);
    count_attr_w := count_attr_w + 1;
  end if;

  if (VERIFY_HAS_ATTR(nm_tabela_p, 'DT_LIBERACAO') = 'S') then
    custom_delete_w := 'DELETE FROM '||nm_tabela_p||' where 1=1 AND DT_LIBERACAO IS NULL AND  NR_SEQ_ATEND_CONS_PEPA = '|| nr_seq_atend_cons_pepa_p;
    custom_update_w := custom_update_w || ' WHERE 1=1 AND DT_LIBERACAO IS NOT NULL AND NR_SEQ_ATEND_CONS_PEPA = '|| nr_seq_atend_cons_pepa_p;

    EXECUTE custom_delete_w;
    EXECUTE custom_update_w;
  end if;
END;


FUNCTION COUNT_REGISTER(nm_table_p varchar2) RETURN number IS
    sql_stmt varchar2( 1000 ) := null;
    count_table number := 0;
BEGIN
    sql_stmt := 'SELECT COUNT(1) FROM '|| nm_table_p ||' WHERE 1=1 AND NR_SEQ_ATEND_CONS_PEPA = '|| nr_seq_atend_cons_pepa_p;

    EXECUTE sql_stmt into STRICT count_table;

    return count_table;
END;



FUNCTION VERIFY_DT_LIB_ATEND RETURN varchar2 IS
  sql_stmt varchar2( 1000 ) := null;
  count_table number := 0;
BEGIN
  sql_stmt := 'SELECT COUNT(1) FROM ATEND_CONSULTA_PEPA WHERE 1=1 AND DT_LIBERACAO IS NOT NULL AND NR_SEQUENCIA = '|| nr_seq_atend_cons_pepa_p;
  EXECUTE sql_stmt into STRICT count_table;
  if (count_table > 0) then
      return 'S';
  end if;

  return 'N';
END;



PROCEDURE EXECUTE_ACTION_PER_TABLE(array_tabelas_p STRARRAY) IS
count_reg_table number := 0;
BEGIN
  for i in 1..array_tabelas_p.count loop
    begin
      if (VERIFY_HAS_ATTR(array_tabelas_p(i), 'NR_SEQ_ATEND_CONS_PEPA') = 'S') then
        count_reg_table := COUNT_REGISTER(array_tabelas_p(i));
        if (count_reg_table > 0) then
          EXECUTE_ACTION_TABLE(array_tabelas_p(i));
          count_register_w := count_register_w +  COUNT_REGISTER(array_tabelas_p(i));
        end if;
      end if;
    end;
  end loop;
END;


begin
open c01;
	loop
	fetch c01 into nr_sequencia_item_w, ds_tipo_item_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
      if (ds_tipo_item_w = 'ITEM_PEPA') then
          open c03(nr_sequencia_item_w);
              loop
                  fetch c03 into nr_node_schematic_pepa_w;
                  EXIT WHEN NOT FOUND; /* apply on c03 */
                      begin
                        EXECUTE_ACTION_PER_TABLE(GET_TABLE_NAMES_BY_NODE_PEPA(nr_node_schematic_pepa_w));
                      end;
              end loop;
          close c03;

      elsif ( ds_tipo_item_w = 'TEMPLATE') then
          open c02(nr_sequencia_item_w);
              loop
              fetch c02 into nr_sequencia_item_w;
              EXIT WHEN NOT FOUND; /* apply on c02 */
                  begin
                      CALL INATIVAR_REGISTRO_TEMPLATE(nr_sequencia_item_w, nm_usuario_p, ds_justificativa_p);
                  end;
              end loop;
          close c02;

          DELETE FROM ehr_registro
          WHERE 1=1
          AND nr_seq_atend_cons_pepa = nr_seq_atend_cons_pepa_p
          AND nr_seq_templ = nr_sequencia_item_w
          AND coalesce(dt_liberacao::text, '') = '';

      end if;
    end;
	end loop;
	close c01;

  if (count_register_w = 0) then
    DELETE FROM W_PEPA_REGRA_INFORMACAO WHERE 1=1 AND NR_SEQ_ATEND_CONS_PEPA = nr_seq_atend_cons_pepa_p;
    DELETE FROM ATEND_CONSULTA_PEPA WHERE 1=1 AND coalesce(DT_LIBERACAO::text, '') = '' AND NR_SEQUENCIA = nr_seq_atend_cons_pepa_p;
  elsif (VERIFY_DT_LIB_ATEND() = 'S') then
    UPDATE ATEND_CONSULTA_PEPA SET ie_situacao = 'I', dt_inativacao = clock_timestamp(), nm_usuario_inativacao = nm_usuario_p, ds_justificativa = ds_justificativa_p WHERE 1=1 AND (DT_LIBERACAO IS NOT NULL AND DT_LIBERACAO::text <> '') AND NR_SEQUENCIA = nr_seq_atend_cons_pepa_p;
  else
    UPDATE ATEND_CONSULTA_PEPA SET ie_situacao = 'I', dt_inativacao = clock_timestamp(), nm_usuario_inativacao = nm_usuario_p, ds_justificativa = ds_justificativa_p, dt_liberacao = clock_timestamp() WHERE 1=1 AND NR_SEQUENCIA = nr_seq_atend_cons_pepa_p;
  end if;

  commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE delete_cons_pepa ( nr_seq_atend_cons_pepa_p bigint, ds_justificativa_p text, nm_usuario_p text) is array_tabelas_w STRARRAY DEFAULT STRARRAY() FROM PUBLIC;

