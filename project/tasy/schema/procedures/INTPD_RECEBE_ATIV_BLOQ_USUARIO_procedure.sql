-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_ativ_bloq_usuario ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


ds_id_origin_w				intpd_eventos_sistema.ds_id_origin%type;
ie_conversao_w				intpd_eventos_sistema.ie_conversao%type;
nr_seq_sistema_w			intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_projeto_xml_w			intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_regra_conv_w			conversao_meio_externo.nr_seq_regra%type;
ie_sistema_externo_w			varchar(15);
reg_integracao_w			gerar_int_padrao.reg_integracao_conv;
ie_erro_w				varchar(1) := 'N';
ds_erro_w				varchar(2000);
ds_operacao_w				varchar(255);

cd_pessoa_fisica_w			pessoa_fisica.cd_pessoa_fisica%type;

c01 CURSOR FOR
	SELECT	*
	from	xmltable('/STRUCTURE/USER' passing xml_p columns
		IE_ACTION		varchar(15)	path 'IE_ACTION',
		CD_PESSOA_FISICA	varchar(15)	path 'CD_PESSOA_FISICA',
		CD_FUNCIONARIO		varchar(15)	path 'CD_FUNCIONARIO');

c01_w	c01%rowtype;

c02 CURSOR FOR
	SELECT	cd_pessoa_fisica
	from	pessoa_fisica
	where	cd_pessoa_fisica = c01_w.cd_pessoa_fisica
	and 	cd_funcionario = c01_w.cd_funcionario;

BEGIN

select	id_origin
into STRICT	ds_id_origin_w
from	xmltable('/STRUCTURE' passing xml_p
	columns id_origin	varchar2(10) path 'ID_ORIGIN');

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv,
	coalesce(ds_id_origin,ds_id_origin_w)
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_conv_w,
	ds_id_origin_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w				:=	nr_seq_sistema_w;

reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:=	'R';
reg_integracao_w.ie_sistema_externo		:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao			:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:=	nr_seq_regra_conv_w;

open c01;
loop
fetch c01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	ie_erro_w := 'N';	
	
	if (c01_w.IE_ACTION = 'A') then
		begin
			reg_integracao_w.nm_tabela		:=	'USUARIO';
			reg_integracao_w.nm_elemento		:=	'USER';

			open c02;
			loop
			fetch c02 into	
				cd_pessoa_fisica_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				ds_operacao_w	:= 'ATIVAR USUARIO';
				update	usuario set
					ie_situacao = 'A',
					dt_atualizacao = clock_timestamp(),
					dt_inativacao  = NULL
				where	cd_pessoa_fisica = cd_pessoa_fisica_w;
				end;
			end loop;
			close c02;
		exception
		when others then
			ie_erro_w := 'S';
			ds_erro_w := substr(ds_operacao_w || ': ' || sqlerrm(SQLSTATE),1,2000);
			intpd_gravar_log_recebimento(nr_sequencia_p, ds_erro_w, 'tasy');
		end;	
	elsif (c01_w.ie_action = 'I') then
		begin
			reg_integracao_w.nm_tabela		:=	'USUARIO';
			reg_integracao_w.nm_elemento		:=	'USER';
			
			open c02;
			loop
			fetch c02 into	
				cd_pessoa_fisica_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				ds_operacao_w	:= 'INATIVAR USUARIO';
				update	usuario set
					ie_situacao = 'I',
					dt_atualizacao = clock_timestamp(),
					dt_inativacao = clock_timestamp()
				where	cd_pessoa_fisica = cd_pessoa_fisica_w;
				end;
			end loop;
			close c02;
		exception
		when others then
			ds_erro_w := substr(ds_operacao_w || ': ' || sqlerrm(SQLSTATE),1,2000);
			ie_erro_w := 'S';
			intpd_gravar_log_recebimento(nr_sequencia_p, ds_erro_w, 'tasy');
		end;
	else 	
		begin
			reg_integracao_w.nm_tabela		:=	'USUARIO';
			reg_integracao_w.nm_elemento		:=	'USER';
			
			open c02;
			loop
			fetch c02 into	
				cd_pessoa_fisica_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				ds_operacao_w	:= 'BLOQUEAR USUARIO';
				update	usuario set
					ie_situacao = 'B',
					dt_atualizacao = clock_timestamp()
				where	cd_pessoa_fisica = cd_pessoa_fisica_w;
				end;
			end loop;
			close c02;
		exception
		when others then
			ds_erro_w := substr(ds_operacao_w || ': ' || sqlerrm(SQLSTATE),1,2000);
			ie_erro_w := 'S';
			intpd_gravar_log_recebimento(nr_sequencia_p, ds_erro_w, 'tasy');
		end;
	end if;
	
	end;
end loop;
close C01;

if	((reg_integracao_w.qt_reg_log > 0) or (ie_erro_w = 'S')) then
	begin
	rollback;

	update 	intpd_fila_transmissao
	set	ie_status = 'E',
		ie_tipo_erro = 'F'
	where	nr_sequencia = nr_sequencia_p;

	for i in 0..reg_integracao_w.qt_reg_log-1 loop
		intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
	end loop;
	end;
else
	update	intpd_fila_transmissao
	set	ie_status = 'S',
		nr_seq_documento = cd_pessoa_fisica_w,
		nr_doc_externo = c01_w.CD_FUNCIONARIO
	where	nr_sequencia = nr_sequencia_p;	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_ativ_bloq_usuario ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

