-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nota_fiscal_integ ( cd_cgc_p text, cd_cgc_emitente_p text, cd_condicao_pagamento_p bigint, cd_estabelecimento_p bigint, cd_natureza_operacao_p bigint, cd_operacao_nf_p bigint, cd_pessoa_fisica_p text, cd_serie_nf_p text, ds_observacao_p text, ie_tipo_nota_p text, nr_documento_externo_p text, nr_nota_fiscal_p text, vl_despesa_acessoria_p bigint, vl_frete_p bigint, vl_seguro_p bigint, nr_sequencia_p bigint, dt_emissao_p timestamp, nr_seq_nota_p INOUT bigint) AS $body$
DECLARE

 
nr_sequencia_w			bigint;
cd_centro_custo_w			integer;
cd_conta_contabil_w		varchar(20);
cd_local_estoque_w		smallint;
cd_lote_fabricacao_w		varchar(20);
cd_material_w			integer;
cd_unidade_medida_compra_w	varchar(30);
ds_observacao_w			varchar(255);
dt_validade_w			timestamp;
nr_item_nf_w			integer;
pr_desconto_w			double precision;
qt_item_nf_w			double precision;
vl_desconto_w			double precision;
vl_unitario_item_nf_w		double precision;
vl_mercadoria_w			double precision;
vl_total_liquido_w			double precision;
vl_total_nota_w			double precision;
vl_total_item_w			double precision;
vl_liquido_w			double precision;
qt_existe_w			varchar(5);
cd_unidade_medida_estoque_w	varchar(30);
qt_conv_compra_estoque_w		double precision;
qt_item_estoque_w			double precision;
nr_sequencia_nf_w			bigint;
ie_de_para_unid_med_w			varchar(15);
ie_de_para_material_w			varchar(15);

c01 CURSOR FOR 
SELECT	cd_centro_custo, 
	cd_conta_contabil, 
	cd_local_estoque, 
	cd_lote_fabricacao, 
	cd_material, 
	cd_unidade_medida_compra, 
	ds_observacao, 
	dt_validade, 
	nr_item_nf, 
	pr_desconto, 
	qt_item_nf, 
	vl_desconto, 
	vl_unitario_item_nf 
from	sup_int_nf_item 
where	nr_sequencia = nr_sequencia_p 
order by	nr_item_nf;


BEGIN 
 
select	nextval('nota_fiscal_seq') 
into STRICT	nr_sequencia_w
;
 
select	obter_ie_de_para_sup_integr('NF','R','UNIDADE_MEDIDA'), 
	obter_ie_de_para_sup_integr('NF','R','MATERIAL') 
into STRICT	ie_de_para_unid_med_w, 
	ie_de_para_material_w
;
 
select	count(*) 
into STRICT	qt_existe_w 
from	serie_nota_fiscal 
where	cd_serie_nf = cd_serie_nf_p 
and	cd_estabelecimento = cd_estabelecimento_p;
 
if (qt_existe_w = 0) then 
	insert into serie_nota_fiscal( 
		cd_serie_nf, 
		ie_situacao, 
		dt_atualizacao, 
		nm_usuario, 
		cd_estabelecimento, 
		ie_numero_nota, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		nr_ultima_nf) 
	values (	cd_serie_nf_p, 
		'A', 
		clock_timestamp(), 
		'INTEGR_TASY', 
		cd_Estabelecimento_p, 
		'M', 
		clock_timestamp(), 
		'INTEGR_TASY', 
		nr_nota_fiscal_p);
end if;
 
select (coalesce(max(nr_sequencia_nf),0)+1) 
into STRICT	nr_sequencia_nf_w 
from	nota_fiscal 
where	cd_estabelecimento = cd_estabelecimento_p 
and	cd_cgc_emitente = cd_cgc_emitente_p 
and	nr_nota_fiscal = nr_nota_fiscal_p 
and	cd_serie_nf = cd_serie_nf_p;
 
insert into nota_fiscal( 
	nr_sequencia, 
	cd_cgc, 
	cd_cgc_emitente, 
	cd_condicao_pagamento, 
	cd_estabelecimento, 
	cd_natureza_operacao, 
	cd_operacao_nf, 
	cd_pessoa_fisica, 
	cd_serie_nf, 
	ds_observacao, 
	ie_tipo_nota, 
	nr_nota_fiscal, 
	vl_despesa_acessoria, 
	vl_frete, 
	vl_seguro, 
	nr_sequencia_nf, 
	dt_emissao, 
	dt_entrada_saida, 
	ie_acao_nf, 
	ie_tipo_frete, 
	vl_mercadoria, 
	vl_total_nota, 
	qt_peso_bruto, 
	qt_peso_liquido, 
	dt_atualizacao, 
	dt_atualizacao_nrec, 
	nm_usuario, 
	nm_usuario_nrec, 
	ie_emissao_nf, 
	ie_situacao) 
values (	nr_sequencia_w, 
	cd_cgc_p, 
	cd_cgc_emitente_p, 
	cd_condicao_pagamento_p, 
	cd_estabelecimento_p, 
	cd_natureza_operacao_p, 
	cd_operacao_nf_p, 
	cd_pessoa_fisica_p, 
	cd_serie_nf_p, 
	ds_observacao_p, 
	ie_tipo_nota_p, 
	nr_nota_fiscal_p, 
	vl_despesa_acessoria_p, 
	vl_frete_p, 
	vl_seguro_p, 
	nr_sequencia_nf_w, 
	dt_emissao_p, 
	clock_timestamp(), 
	1, 
	0, 
	0, 
	0, 
	0, 
	0, 
	clock_timestamp(), 
	clock_timestamp(), 
	'INTEGR_TASY', 
	'INTEGR_TASY', 
	0, 
	'1');
 
open c01;
loop 
fetch c01 into 
	cd_centro_custo_w, 
	cd_conta_contabil_w, 
	cd_local_estoque_w, 
	cd_lote_fabricacao_w, 
	cd_material_w, 
	cd_unidade_medida_compra_w, 
	ds_observacao_w, 
	dt_validade_w, 
	nr_item_nf_w, 
	pr_desconto_w, 
	qt_item_nf_w, 
	vl_desconto_w, 
	vl_unitario_item_nf_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
 
	/*Conversao para material*/
 
	if (ie_de_para_material_w = 'C') then 
		cd_material_w	:= coalesce(Obter_Conversao_interna(null,'MATERIAL','CD_MATERIAL',cd_material_w),cd_material_w);
	elsif (ie_de_para_material_w = 'S') then		 
		cd_material_w	:= coalesce(obter_material_sistema_ant(cd_material_w),cd_material_w);
	end if;
	/*Fim*/
 
 
	vl_total_item_w	:= coalesce(vl_unitario_item_nf_w,0)*coalesce(qt_item_nf_w,0);
	 
	if (coalesce(pr_desconto_w,0) > 0) then 
		vl_desconto_w	:= (pr_desconto_w * vl_total_item_w / 100);
	end if;
	 
	vl_liquido_w	:= (vl_total_item_w - coalesce(vl_desconto_w,0));
 
	select	substr(obter_dados_material_estab(cd_material,cd_estabelecimento_p,'UME'),1,30) cd_unidade_medida_estoque, 
		qt_conv_compra_estoque 
	into STRICT	cd_unidade_medida_estoque_w, 
		qt_conv_compra_estoque_w 
	from	material 
	where	cd_material = cd_material_w;
	 
	qt_item_estoque_w := qt_item_nf_w * qt_conv_compra_estoque_w;	
	 
	/*Conversao para unidade de medida*/
 
	if (ie_de_para_unid_med_w = 'C') then 
		cd_unidade_medida_compra_w	:= coalesce(Obter_Conversao_interna(null,'UNIDADE_MEDIDA','CD_UNIDADE_MEDIDA',cd_unidade_medida_compra_w),cd_unidade_medida_compra_w);
	elsif (ie_de_para_unid_med_w = 'S') then		 
		cd_unidade_medida_compra_w	:= coalesce(obter_unid_med_sist_ant(cd_unidade_medida_compra_w),cd_unidade_medida_compra_w);
	end if;
	/*Fim*/
 
	 
	insert into nota_fiscal_item( 
		cd_centro_custo, 
		cd_conta_contabil, 
		cd_local_estoque, 
		cd_lote_fabricacao, 
		cd_material, 
		cd_unidade_medida_compra, 
		cd_unidade_medida_estoque, 
		qt_item_estoque, 
		ds_observacao, 
		dt_validade, 
		nr_item_nf, 
		nr_sequencia, 
		pr_desconto, 
		qt_item_nf, 
		vl_desconto, 
		vl_unitario_item_nf, 
		cd_estabelecimento, 
		cd_serie_nf, 
		nr_sequencia_nf, 
		cd_natureza_operacao, 
		vl_total_item_nf, 
		vl_frete, 
		vl_despesa_acessoria, 
		vl_desconto_rateio, 
		vl_seguro, 
		vl_liquido, 
		dt_atualizacao, 
		nm_usuario) 
	values (	cd_centro_custo_w, 
		cd_conta_contabil_w, 
		cd_local_estoque_w, 
		cd_lote_fabricacao_w, 
		cd_material_w, 
		cd_unidade_medida_compra_w, 
		cd_unidade_medida_estoque_w, 
		qt_item_estoque_w, 
		ds_observacao_w, 
		dt_validade_w, 
		nr_item_nf_w, 
		nr_sequencia_w, 
		pr_desconto_w, 
		qt_item_nf_w, 
		vl_desconto_w, 
		vl_unitario_item_nf_w, 
		cd_estabelecimento_p, 
		cd_serie_nf_p, 
		1, 
		cd_natureza_operacao_p, 
		vl_total_item_w, 
		0, 0, 0, 0, 
		vl_liquido_w, 
		clock_timestamp(), 
		'INTEGR_TASY');
 
	end;
end loop;
close c01;
 
select	sum(coalesce(vl_total_item_nf,0)), 
	sum(coalesce(vl_liquido,0)) 
into STRICT	vl_mercadoria_w, 
	vl_total_liquido_w 
from	nota_fiscal_item 
where	nr_sequencia = nr_sequencia_w;
 
vl_total_nota_w := (vl_total_liquido_w + coalesce(vl_frete_p,0) + coalesce(vl_seguro_p,0) + coalesce(vl_despesa_acessoria_p,0));
 
update	nota_fiscal 
set	vl_mercadoria = coalesce(vl_mercadoria_w,0), 
	vl_total_nota = coalesce(vl_total_nota_w,0) 
where	nr_sequencia = nr_sequencia_w;
 
nr_seq_nota_p	:= nr_sequencia_w;	
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nota_fiscal_integ ( cd_cgc_p text, cd_cgc_emitente_p text, cd_condicao_pagamento_p bigint, cd_estabelecimento_p bigint, cd_natureza_operacao_p bigint, cd_operacao_nf_p bigint, cd_pessoa_fisica_p text, cd_serie_nf_p text, ds_observacao_p text, ie_tipo_nota_p text, nr_documento_externo_p text, nr_nota_fiscal_p text, vl_despesa_acessoria_p bigint, vl_frete_p bigint, vl_seguro_p bigint, nr_sequencia_p bigint, dt_emissao_p timestamp, nr_seq_nota_p INOUT bigint) FROM PUBLIC;

