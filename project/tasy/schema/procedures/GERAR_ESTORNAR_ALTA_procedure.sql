-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_estornar_alta ( nr_atendimento_p bigint, ie_alta_estorno_p text, cd_processo_alta_p bigint, cd_motivo_alta_p bigint, dt_alta_p timestamp, nm_usuario_p text, ds_erro_p INOUT text, nr_seq_motivo_p bigint, cd_cgc_p text, ds_observacao_p text, cd_cgc_transporte_p text default null, nr_seq_motivo_est_alta_p bigint default null, cd_contract_hosp_p text default null, cd_contract_role_p text default null, cd_contract_type_p bigint default null) AS $body$
DECLARE

/*

********************************                       ATENCAO                       ********************************
toda nova procedure que for adicionada a esta,
deve ser adicionado wheb_usuario_pck.set_ie_commit antes e depois da procedure
Exemplo abaixo:
	wheb_usuario_pck.set_ie_commit('N');
	procedure(params);
	wheb_usuario_pck.set_ie_commit('S');
*/
				
dt_entrada_w			timestamp;
dt_entrada_unidade_w		timestamp;
nr_atendimento_w			bigint;
nr_atend_sem_alta_w		bigint;
nr_seq_interno_w			bigint;
nr_seq_interno_ww			bigint;
cd_estab_destino_w		bigint;
ie_status_unidade_w		varchar(3);
ie_arq_pyxis_w			varchar(3);
ds_erro_w			varchar(255);
cd_tipo_evolucao_w		varchar(3);
ds_tipo_evolucao_w		varchar(4000);
ie_tipo_convenio_w			smallint;
ie_censo_diario_w			varchar(1);
ie_novo_leito_w			varchar(1);
ie_gera_novo_atend_w		varchar(1);
ie_cih_w				smallint;
ie_tipo_atendimento_w		integer;
cont_w				bigint;
nr_seq_transf_w			bigint;
ie_transferencia_w			varchar(1);
cd_motivo_alta_w			bigint;
ie_consiste_cih_w			varchar(10)	:= 'N';
nm_usuario_w			varchar(15);
dt_atualizacao_w			timestamp;
ie_gera_proc_cih_w		varchar(1);
ie_processo_alta_w			varchar(1);/* Rafael em 12/03/2007 OS51338 */
vl_parametro_w			varchar(255);
cd_estabelecimento_w		smallint;
nr_interno_conta_w			bigint;
nr_seq_unidade_w			bigint;
ie_se_cid_w			varchar(10);
ie_fechar_conta_alta_w		varchar(01);
ie_alta_cid_w			varchar(3);
ds_erro_cid_w			varchar(255);
qt_hora_estorno_w			double precision;/* Rafael em 19/10/2007 OS71929 */
qt_hora_alta_w			double precision;/* Rafael em 19/10/2007 OS71929 */
ie_atualiza_apos_alta_w		varchar(1);
ie_permite_alta_obito_w		varchar(5);
ie_fechar_conta_ps_alta_w		varchar(01);/* Fabricio em 14/05/2008 OS90518 */
ie_finalizar_trat_alta_obito_w		varchar(1);
nr_seq_motivo_fim_tratamento_w	bigint;
cd_pessoa_fisica_w		varchar(10);
ie_enviar_comunic_alta_obito_w	varchar(1);
cd_perfil_comunic_alta_obito_w	integer;
nm_paciente_w			varchar(60);
ie_status_atendimento_w		varchar(1);
ie_mantem_status_alta_w		varchar(1);
ie_mantem_status_alta_nova_w	varchar(1);
nr_seq_agenda_w			agenda_consulta.nr_sequencia%type;
ie_status_agenda_w		varchar(2);
cd_tipo_agenda_w			bigint;
ie_tipo_agenda_w			varchar(2);
cd_perfil_desfazer_alta_w		integer;
nr_atendimento_gerado_w		bigint;
ds_mensagem_w			varchar(500);
ie_alta_pertence_aberto_w		varchar(1);
qt_pertence_pendente_w		integer;
ie_lanc_auto_sus_alta_w		varchar(01);
ie_alta_retroativa_w			varchar(01);
ie_saida_visitante_w		varchar(01);
nr_seq_evento_w			bigint;
ie_alta_inconsistente_w		varchar(1)	:= 'N';
qt_processo_pendente_w		bigint;
ie_fecha_conta_ww		varchar(10)	:= 'S';
ie_fecha_conta_w			varchar(10)	:= 'S';
ie_fecha_atendimento_w		varchar(10)	:= 'S';
ie_fecha_atendimento_ww		varchar(10)	:= 'S';
nr_seq_agenda_pac_w		agenda_paciente.nr_sequencia%type;
ie_status_agenda_pac_w		agenda_paciente.ie_status_agenda%type;
cd_tipo_agenda_pac_w		agenda.cd_tipo_agenda%type;
nr_prescricao_w			bigint;
ie_tipo_agenda_pac_w		varchar(2);
ds_erro_conta_w			varchar(4000);
ds_retorno_w			varchar(2000);
ds_retorno_w2			varchar(2000);
ds_retorno_w3			varchar(2000);

nr_seq_dieta_w			bigint;
dt_dieta_w			timestamp;
cd_dieta_w			bigint;
cd_refeicao_w			varchar(3);
qt_minutos_w			double precision;
dt_dieta_exe_w			timestamp;

cd_medico_resp_w			varchar(10);
ie_regra_geracao_w		varchar(1);
qt_itens_alta_w			double precision;
dt_alta_medico_w			timestamp;
dt_alta_tesouraria_w		timestamp;
ie_alta_medica_w			varchar(1);
ie_susp_adep_w			varchar(1);
ie_reverter_adep_w			varchar(1);
ie_diaria_diferencia_w		varchar(1):= 'N';
ie_atualizar_final_pront_w		varchar(1);

ds_sep_bv_w			varchar(100);
cd_classif_setor_w			varchar(2);

ds_param_integ_hl7_w		varchar(4000);
ds_param_integration_w  	varchar(4000);
ie_gerar_alta_atend_rn_w		varchar(1);
ds_erro_filho_w			varchar(255);
ds_erro_pendente_w		varchar(255);
nr_atendimento_filho_w		bigint;
ie_des_alta_atend_fechado_w	varchar(1);
dt_fim_conta_w			timestamp;
ie_nao_desfazer_alta_w		varchar(1);
ie_leito_monit_w			varchar(1);
ie_setor_rothman_w			varchar(1);
qt_idade_w			bigint;

ie_bloq_item_conta_w		varchar(1);
qt_registro_conta_w		bigint;
ie_dt_alta_menor_moviment_w	varchar(1);
ie_encerrar_ficha_alta_w		varchar(1);
ie_finalizar_home_care_w		varchar(1);
ie_retirar_pc_isolamento_w		varchar(1);
qt_reg_w				bigint;
qt_reg_conv_w			bigint;
cd_convenio_w			bigint;
cd_categoria_w			varchar(10);
ie_permite_w			varchar(1);

qt_mov_temp_w			integer;
qt_existe_regra_setor_w		integer;
cd_setor_atendimento_w		integer;
cd_setor_atendimento_ww		integer;
cd_setor_atendimento_www		integer;
cd_setor_atendimento_wwww 	integer;
nr_resultado_w                  		integer;
cd_unidade_basica_w             	atend_paciente_unidade.cd_unidade_basica%type;
cd_unidade_compl_ww             	atend_paciente_unidade.cd_unidade_compl%type;
qt_existe_conta_aberta_w		integer;

cd_convenio_parametro_w		integer;
cd_categoria_parametro_w		varchar(10);
ie_permite_gerar_pacote_w		varchar(1);
ie_gerar_pacote_alta_w		varchar(1);
cd_convenio_atend_w		integer;
cd_categoria_atend_w		varchar(10);

ie_cancelar_autor_alta_w		varchar(1);
qt_autor_w			integer;
nr_sequencia_autor_w		bigint;
nr_seq_estagio_w			bigint;
ie_cancela_ciclo_w			varchar(1);
ie_cancela_nesc_vaga_w		varchar(1);
ie_verifica_precaucoes_pend_w	varchar(1);
ie_susp_prescricoes_alta_w		varchar(1);
ie_proced_pend_w			varchar(1);
ds_setor_proced_w			varchar(255);
cd_setor_atend_w			integer;
nr_atend_rn_mae_w		bigint;
cd_estabelecimento_ww		bigint;
ie_restringe_estab_alta_obt_w	varchar(1);
nr_seq_tipo_alerta_w		bigint;
nr_seq_tipo_alerta_des_w		bigint;
ie_alta_atend_pendente_w		varchar(2);
nr_atendimento_pendente_w		bigint;
qt_regra_dia_horario_w		bigint;
ie_finaliza_gasoterapia_w		varchar(1);
ie_saida_visita_acomp_w		varchar(1);
ie_regra_setor_usuario_w		varchar(1);
ie_cancela_atend_alta_w		varchar(1);
ie_necessita_alta_medica_w		varchar(1);
atualizar_status_w			varchar(1);
ie_atualizar_situacao_w		varchar(1);
ie_encerrar_equip_agend_hc_w	varchar(1);
ds_log_w				varchar(2000);
qt_regra_taxa_repouso_w		bigint;
qt_regra_taxa_uso_w		bigint;

ie_gerar_dt_fim_cons_w		varchar(1);
hr_inicio_consulta_w		varchar(5);
hr_fim_consulta_w			varchar(5);
ie_medico_w			varchar(1);
ie_medico_resp_w			integer;
dt_alta_w				timestamp;
ie_inativar_home_care_w		varchar(1);
ie_integra_aghos_w			varchar(1);
ie_integra_regul_w			varchar(1);
nr_seq_regulacao_w		bigint;
nr_seq_pac_restricao_w		bigint;
cd_motivo_alta_rn_w		bigint;
ie_gera_alta_rn_w			varchar(1);
ie_controla_higienizacao_w		varchar(1) := 'S';
ie_atualiza_data_item_alta_w		varchar(1);
permite_desfazer_alta_w		varchar(5);
ie_possui_laudo_w			varchar(1) := 'S';
ie_consistir_laudo_aih_w		varchar(1);
ie_existe_proc_parto_w		varchar(1);
ie_inf_dnv_dnf_w			varchar(1) := 'S';
ie_consistir_dnv_dnf_w		varchar(1);
ie_possui_hd_trat_w		varchar(1);
nr_seq_motivo_fim_w		bigint;
nr_seq_tratamento_hd_w		bigint;
ie_dt_fim_orient_nutri_w	varchar(1);
ie_enviar_alerta_ativo_w	varchar(1);
ie_permite_alta_fin_nao_lib_w	varchar(3);
ie_inserir_w			varchar(1);
inativar_Alertas_w		varchar(1);
tota_ged_w			bigint;
nr_sequencia_w			bigint;
ie_consiste_cid_canc_w		varchar(1);
ie_atend_cancelado_w		varchar(1) := 'N';
ie_alta_atend_home_care_w	varchar(1);
ie_susp_itens_SAE_w		varchar(2);
cd_setor_desfazer_alta_w	varchar(255);
qt_dias_fim_acomp_precaucao_w	bigint;
ie_setor_diferente_w		varchar(1);
ie_possui_regra_rn_w		varchar(1);
cd_setor_rn_w			smallint;
ie_atendimento_rn_w		varchar(1);
ie_desfazer_alta_w		varchar(2);
ds_comando_w			varchar(2000);
nr_seq_qua_evento_w		motivo_alta.nr_seq_qua_evento%type; --mmmacedo
ds_motivo_alta_w		motivo_alta.ds_motivo_alta%type; ---mmmacedo
ie_evasao_w			motivo_alta.IE_EVASAO%type;
ie_setor_permite_alta_w		setor_atendimento.ie_permite_alta%type;
ie_forma_fechamento_w		parametro_faturamento.ie_forma_fechamento%type;
nr_interno_conta_ww		conta_paciente.nr_interno_conta%type;
ds_erro_www			varchar(2000);
ie_perm_alta_menor_alta_med_w	varchar(1);
ie_perm_alta_sem_tesouraria_w	varchar(1);
ie_consistir_disp_w		varchar(1);

nr_max_interno_conta_w		conta_paciente.nr_interno_conta%type;
ds_senha_w			atend_senha_internet.ds_senha%type;
qt_regra_alta_tx_diaria_w	bigint;
ie_gerar_saida_real_w		varchar(1);

ie_finaliza_precaucao_w		varchar(1);
ie_alta_rn_automatica_w		varchar(1);

ds_mensagem_inf_req_w		varchar(255);
ds_todas_mensagens_inf_req_w	varchar(4000);

nr_seq_pessoa_classif_w		bigint;
ie_perm_geraralta_tesouraria_w  varchar(2);

qt_regras_hdm_w			bigint;
lista_mot_alta_lib_fin_w	varchar(255);
qt_reg_externa_confirmada_w     bigint;
ds_atends_estornar_alta_w	varchar(255);
ds_atend_estornar_alta_w	varchar(255);
ie_tipo_conv_w			smallint;
ds_mensagem_sms_w               regra_sms_alta.ds_mensagem%type;
ie_utiliza_DDD_w 		varchar(1);
ds_remetente_w			varchar(255);
nr_seq_regra_envio_w		bigint;
nr_telefone_w			varchar(15);
qt_retorno_pac_w		bigint;
ie_utilizar_ddi_w 		varchar(1);
ie_AtualizaTISSaoFecharConta_w	varchar(1);
ie_entrou_fecha_contas_w	varchar(1);
cd_unidade_compl_w 			atend_paciente_unidade.cd_unidade_compl%type;
qt_atend_acomp_w		bigint;
ie_inativa_item_w		varchar(1);
nr_seq_atepacu_w       atend_paciente_unidade.nr_sequencia%type;
nr_seq_regra_w			wl_regra_item.nr_sequencia%type;
qt_existe_w			bigint;
nr_idade_w smallint;
nr_seq_atend_w					mprev_atendimento.nr_sequencia%type;
ie_lib_aut_acomp_w	varchar(1);
ie_status_lib_aut_acomp_w varchar(1);
nr_resultado_count_w                  		integer;
ie_gerar_checkout_voice_w varchar(40);
nm_usuario_medico_w varchar(15);
qt_regra_hora_w  bigint;
ie_gerar_adt_a03_w varchar(5);
ie_gerar_adt_a03_evn4_w varchar(2);
ie_setor_athena_w				varchar(1) := 'N';
ie_setor_supply_w				varchar(1) := 'N';
ie_motivo_obito_w		varchar(1);
ds_unidade_compl_ww		varchar(30);
cd_evolucao_w  bigint;
ie_gerar_clinical_notes_w varchar(1) := 'N';
ie_diaria_dia_ant_w             parametro_faturamento.ie_diaria_dia_ant%type;


c01 CURSOR FOR
	SELECT	dt_entrada_unidade,
		nr_seq_interno,
		b.cd_classif_setor
	from 	setor_atendimento b,
		atend_paciente_unidade a
	where	a.nr_atendimento		= nr_atendimento_p
	and	a.cd_setor_atendimento 	= b.cd_setor_atendimento
	order by	CASE WHEN b.cd_classif_setor=3 THEN  1 WHEN b.cd_classif_setor=4 THEN  1 WHEN b.cd_classif_setor=8 THEN  1  ELSE 0 END ,
		a.dt_saida_unidade,
		a.dt_entrada_unidade;

c02 CURSOR FOR
SELECT	nr_interno_conta,
	cd_convenio_parametro,
	cd_categoria_parametro
from	conta_paciente
where	nr_atendimento	= nr_atendimento_p;

c03 CURSOR FOR
SELECT	a.nr_sequencia,
	a.ie_status_agenda,
	b.cd_tipo_agenda,
	CASE WHEN cd_tipo_agenda=3 THEN 'C' WHEN cd_tipo_agenda=5 THEN 'S' END
from	agenda b,
	agenda_consulta a
where	a.cd_agenda		= b.cd_agenda
and	a.nr_atendimento	= nr_atendimento_p;

c04 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	obter_se_convenio_rec_alerta(cd_convenio_atend_w,nr_sequencia) = 'S'
	and	a.ie_evento_disp	= 'AL'
	and	ie_tipo_atendimento_w 	= 1
	and	((cd_motivo_alta = cd_motivo_alta_p) or (coalesce(cd_motivo_alta::text, '') = ''))
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(a.ie_situacao,'A') = 'A';

c05 CURSOR FOR
	SELECT	nr_sequencia,
		obter_data_dieta_mapa(dt_dieta,cd_dieta,cd_refeicao)
	from	mapa_dieta
	where	nr_atendimento = nr_atendimento_p
	order by nr_sequencia;

c06 CURSOR FOR
	SELECT	nr_atendimento
	from	atendimento_paciente
	where	nr_atendimento_mae = nr_atendimento_p
	and	coalesce(dt_alta::text, '') = ''
	and	ie_gerar_alta_atend_rn_w in ('S','Q','H','R','M');

c07 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_status_agenda,
		b.cd_tipo_agenda,
		CASE WHEN cd_tipo_agenda=1 THEN 'CI' WHEN cd_tipo_agenda=2 THEN 'E' END
	from	agenda b,
		agenda_paciente a
	where	a.cd_agenda		= b.cd_agenda
	and	a.ie_status_agenda not in ('C','B','F','I','II')
	and	a.nr_atendimento	= nr_atendimento_p;

c08 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	obter_se_convenio_rec_alerta(cd_convenio_atend_w,nr_sequencia) = 'S'
	and	a.ie_evento_disp	= 'AT'
	and	coalesce(a.ie_situacao,'A') = 'A';

c09 CURSOR FOR
	SELECT	a.nr_sequencia
	from 	estagio_autorizacao b,
		autorizacao_convenio a
	where	a.nr_seq_estagio	= b.nr_sequencia
	and	b.ie_interno		= '1'
	and	a.nr_atendimento	= nr_atendimento_p;

c10 CURSOR FOR
	SELECT	a.nr_prescricao
	from	prescr_medica a
	where	a.nr_atendimento = nr_atendimento_p
	and		coalesce(a.cd_motivo_baixa,0) = 0
	and		(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and		coalesce(a.dt_suspensao::text, '') = ''
	and		a.cd_funcao_origem <> 2314
	and	not exists (SELECT 1 from prescr_material b where a.nr_prescricao = b.nr_prescricao and (b.dt_baixa IS NOT NULL AND b.dt_baixa::text <> ''))
	and	not exists (select 1 from prescr_procedimento c where a.nr_prescricao = c.nr_prescricao and (c.dt_baixa IS NOT NULL AND c.dt_baixa::text <> ''));


c11 CURSOR FOR
	SELECT	nr_atendimento
	from	atendimento_paciente
	where	coalesce(dt_alta::text, '') = ''
	and	coalesce(ie_alta_atend_pendente_w,'N') = 'S'
	and 	cd_pessoa_fisica	=	cd_pessoa_fisica_w;

c12 CURSOR FOR
	SELECT	nr_atendimento
	from	atendimento_paciente
	where	nr_atendimento_mae = nr_atendimento_p
	and	coalesce(dt_alta::text, '') = ''
	and	ie_gerar_alta_atend_rn_w in ('N','R');

C13 CURSOR FOR
	SELECT 	a.nr_sequencia
	from   	paciente_rep_prescricao a,
		rep_restricao b
	where  	b.nr_sequencia  = a.nr_seq_restricao
	and	coalesce(a.dt_inativacao::text, '') = ''
	and	b.ie_termino_alta = 'S'
	and	b.ie_situacao = 'A'
	and	coalesce(a.dt_fim::text, '') = ''
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_w;

c14 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	obter_se_convenio_rec_alerta(cd_convenio_atend_w,nr_sequencia) = 'S'
	and	obter_se_regra_envio(nr_sequencia, nr_atendimento_p) = 'S'
	and	a.ie_evento_disp	= 'DA'
	and	coalesce(a.ie_situacao,'A') = 'A';

c15 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	obter_se_convenio_rec_alerta(cd_convenio_atend_w,nr_sequencia) = 'S'
	and	a.ie_evento_disp	= 'GED'
	and	ie_tipo_atendimento_w 	= 1
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(a.ie_situacao,'A') = 'A';

C16 CURSOR FOR
	SELECT	a.nr_interno_conta
	from	conta_paciente a
	where	a.nr_atendimento = nr_atendimento_p
	and	a.ie_status_acerto = '1';

C17 CURSOR FOR
	SELECT	ds_mensagem
	from	w_pep_regra_informacao
	where	nr_atendimento	= nr_atendimento_p
	and	nm_usuario	= nm_usuario_p
	order by 1;
	
C18 CURSOR FOR
	SELECT 	b.nr_sequencia
	from 	classif_pessoa a, pessoa_classif b
	where 	b.cd_pessoa_fisica = cd_pessoa_fisica_w
	and	a.ie_finalizar_alta = 'S'
	and 	b.nr_seq_classif = a.nr_sequencia;
	
	
C19 CURSOR FOR	
	SELECT 	a.nr_atendimento
	from 	atendimento_paciente a
	where 	a.nr_atendimento <> nr_atendimento_p
	and 	a.cd_pessoa_fisica = cd_pessoa_fisica_w
	and 	coalesce(a.dt_alta::text, '') = '';

C20 CURSOR FOR
	SELECT  a.ds_mensagem,
		a.nr_sequencia
        from    regra_sms_alta a,
                regra_sms_alta_regra b
        where   a.nr_sequencia = b.nr_seq_regra
        and     coalesce(a.ie_situacao,'A') = 'A'
        and     coalesce(b.ie_situacao,'A') = 'A'
        and     coalesce(b.cd_estabelecimento, cd_estabelecimento_ww) = cd_estabelecimento_ww
        and     coalesce(b.cd_setor_atendimento, cd_setor_atendimento_w) = cd_setor_atendimento_w;

C21 CURSOR FOR
SELECT	a.nr_atendimento,
        a.NR_SEQ_INTERNO nr_seq_atepacu
        from	atend_paciente_unidade a,
	              setor_atendimento b
          where	a.nr_atendimento = nr_atendimento_p
          and	a.cd_setor_atendimento = b.cd_setor_atendimento
          and	b.CD_CLASSIF_SETOR = 4
          and	a.ie_passagem_setor = 'N'
          order by  a.dt_entrada_unidade;
		
c22 CURSOR FOR
SELECT	a.nr_atend_acompanhante
		from	episodio_acompanhante a
		where	a.nr_atend_paciente = nr_atendimento_p
		and a.nr_atend_acompanhante in (
					SELECT	b.nr_atendimento
					from	atendimento_paciente b
					where	b.nr_atendimento = a.nr_atend_acompanhante 
					and coalesce(b.dt_alta::text, '') = '');
		
regra_worklist CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_regra,
			c.cd_categoria cd_categoria
	from	wl_regra_item a,
			wl_regra_worklist b,
			wl_item c
	where	a.nr_seq_regra = b.nr_sequencia
	and		b.nr_seq_item = c.nr_sequencia
	and		coalesce(c.ie_situacao,'A') = 'A'
	and		coalesce(a.ie_situacao,'A') = 'A'
	and		a.ie_encerrar_alta_adm = 'S';

BEGIN
ie_gerar_clinical_notes_w := obter_param_usuario(281, 1595, Obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento
, 1), ie_gerar_clinical_notes_w);
/* -------------------------------------------------- a rotina abaixo devera permanecer no inicio do corpo da procedure, pois devera realizar a consistencia das informacoes antes de executar qualquer outra rotina -------------------------------------------------- */

ds_todas_mensagens_inf_req_w := null;
if (ie_alta_estorno_p = 'A') and /* Gerando alta */
	(obter_funcao_ativa not in (3111, 916))then  /*Tratado em fonte pela rotina CONSISTIR_ATEND_INFOR_REQ */
	CALL wheb_usuario_pck.set_ie_commit('N');
	CALL PEP_GERAR_INFORMACAO_REQ(nr_atendimento_p, nm_usuario_p, 'X');
	CALL wheb_usuario_pck.set_ie_commit('S');

	ds_todas_mensagens_inf_req_w := null;
	open C17;
	loop
	fetch C17 into	
		ds_mensagem_inf_req_w;
	EXIT WHEN NOT FOUND; /* apply on C17 */
		begin
		ds_todas_mensagens_inf_req_w	:= substr(ds_todas_mensagens_inf_req_w || chr(13) || chr(10) || ds_mensagem_inf_req_w, 1, 4000);
		end;
	end loop;
	close C17;
end if;

if (ds_todas_mensagens_inf_req_w IS NOT NULL AND ds_todas_mensagens_inf_req_w::text <> '') then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(348189,'DS_MENSAGEM='||ds_todas_mensagens_inf_req_w);
else

--Verifica se pode ser gerado alta no horario (CADASTROS GERAIS: Regra Horario Alta)

--Confere se existe regra
select coalesce(max(1),0)
into STRICT qt_regra_hora_w
from regra_horario_alta a
WHERE (a.ie_tipo_atendimento = (SELECT ie_tipo_atendimento from atendimento_paciente where nr_atendimento = nr_atendimento_p) or coalesce(a.ie_tipo_atendimento::text, '') = '')
and (a.cd_perfil = coalesce(obter_perfil_ativo,a.cd_perfil) or coalesce(a.cd_perfil::text, '') = '');

if (qt_regra_hora_w > 0) then
-- Verifica se o horario se encaixa na regra
	select coalesce(max(1),0)
	into STRICT qt_regra_hora_w
	from regra_horario_alta a
	WHERE OBTER_SE_ENTRE_HORARIO(dt_alta_p,a.hr_inicial,a.hr_final) = 'S'
	and (a.ie_tipo_atendimento = (SELECT ie_tipo_atendimento from atendimento_paciente where nr_atendimento = nr_atendimento_p) or coalesce(a.ie_tipo_atendimento::text, '') = '')
	and (a.cd_perfil = coalesce(obter_perfil_ativo,a.cd_perfil) or coalesce(a.cd_perfil::text, '') = '');

	if (qt_regra_hora_w = 0)then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(1167083);
	end if;	
end if;

/* -------------------------------------------------- a rotina acima devera permanecer no inicio do corpo da procedure, pois devera realizar a consistencia das informacoes antes de executar qualquer outra rotina -------------------------------------------------- */

cd_estabelecimento_ww := wheb_usuario_pck.get_cd_estabelecimento;

ie_proced_pend_w := Obter_param_Usuario(3111, 153, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_proced_pend_w);
/*Se refere ao checkbox "Permite Gerar Alta com exames pendentes para o paciente", que se encontra na funcao estrutura atendimento pasta setores
e na Regra do shift+f11 Aplicacao Principal/Atendimento/Regra procedimentos pendentes para alta*/

--if (ie_proced_pend_w = 'S') then
	begin
		select 	obter_setor_consite_proc(nr_atendimento_p, ie_proced_pend_w)
		into STRICT 	ds_setor_proced_w
		;
	exception
		when	others then
			ds_setor_proced_w := null;
	end;
	if (ds_setor_proced_w IS NOT NULL AND ds_setor_proced_w::text <> '') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(200665,'DS_SETOR_PROCED=' || ds_setor_proced_w);
	end if;
--end if;
ie_censo_diario_w			:= 'S';
ie_gera_novo_atend_w			:= 'N';
ie_entrou_fecha_contas_w		:= 'N';
ds_erro_p				:= '';
ds_sep_bv_w 				:= obter_separador_bv;

select	coalesce(max(ie_bloq_item_conta),'N'),
	coalesce(max(ie_necessita_alta_medica),'S'),
	max(ie_evasao),
	coalesce(max(ie_gerar_saida_real),'N'),
	coalesce(max(ie_inativa_item), 'S')
into STRICT    ie_bloq_item_conta_w,
	ie_necessita_alta_medica_w,
	ie_evasao_w,
	ie_gerar_saida_real_w,
	ie_inativa_item_w
from    motivo_alta
where   cd_motivo_alta = cd_motivo_alta_p;

if (ie_bloq_item_conta_w	= 'S') and (ie_alta_estorno_p = 'A') then

	select	coalesce(max(1),0)
	into STRICT	qt_registro_conta_w
	from	conta_paciente where		nr_atendimento = nr_atendimento_p LIMIT 1;

	if (qt_registro_conta_w = 0) then
		select	coalesce(max(1),0)
		into STRICT	qt_registro_conta_w
		from	material_atend_paciente where		nr_atendimento = nr_atendimento_p
		and 	coalesce(CD_MOTIVO_EXC_CONTA::text, '') = '' LIMIT 1;

		if (qt_registro_conta_w = 0) then
			select	coalesce(max(1),0)
			into STRICT	qt_registro_conta_w
			from	procedimento_paciente where		nr_atendimento = nr_atendimento_p
			and		coalesce(CD_MOTIVO_EXC_CONTA::text, '') = '' LIMIT 1;
		end if;
	end if;

	if (qt_registro_conta_w	> 0) then
		--'Nao e possivel gerar alta para este motivo.Existem contas ou itens lancados'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(200666);
	end if;
end if;

ie_gera_proc_cih_w := Obter_param_Usuario(0, 70, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_gera_proc_cih_w);
ie_mantem_status_alta_nova_w := Obter_param_Usuario(821, 332, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_mantem_status_alta_nova_w);
ie_utiliza_DDD_w := Obter_param_Usuario(821, 324, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_utiliza_DDD_w);
ie_encerrar_equip_agend_hc_w := Obter_param_Usuario(867, 17, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_encerrar_equip_agend_hc_w);
ie_mantem_status_alta_w := Obter_param_Usuario(898, 11, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_mantem_status_alta_w);
ie_gerar_dt_fim_cons_w := Obter_param_Usuario(935, 170, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_gerar_dt_fim_cons_w);
ie_encerrar_ficha_alta_w := Obter_param_Usuario(936, 48, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_encerrar_ficha_alta_w);
ie_consiste_cih_w := Obter_param_Usuario(3111, 23, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_consiste_cih_w);
ie_alta_cid_w := Obter_param_Usuario(3111, 38, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_alta_cid_w);
qt_hora_estorno_w := Obter_param_Usuario(3111, 44, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, qt_hora_estorno_w);
ie_restringe_estab_alta_obt_w := Obter_param_Usuario(3111, 171, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_restringe_estab_alta_obt_w);
ie_permite_alta_obito_w := Obter_param_Usuario(3111, 47, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_permite_alta_obito_w);
ie_consistir_disp_w := Obter_param_usuario(3111, 57, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_consistir_disp_w);
ie_alta_pertence_aberto_w := Obter_param_Usuario(3111, 58, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_alta_pertence_aberto_w);
ie_alta_retroativa_w := Obter_param_Usuario(3111, 63, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_alta_retroativa_w);
ie_saida_visitante_w := Obter_param_Usuario(3111, 64, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_saida_visitante_w);
ie_alta_inconsistente_w := Obter_param_Usuario(3111, 71, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_alta_inconsistente_w);
ie_alta_medica_w := Obter_param_Usuario(3111, 76, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_alta_medica_w);
ie_diaria_diferencia_w := Obter_param_Usuario(3111, 80, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_diaria_diferencia_w);
ie_des_alta_atend_fechado_w := Obter_param_Usuario(3111, 86, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_des_alta_atend_fechado_w);
ie_nao_desfazer_alta_w := Obter_param_Usuario(3111, 88, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_nao_desfazer_alta_w);
ie_dt_alta_menor_moviment_w := Obter_param_Usuario(3111, 115, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_dt_alta_menor_moviment_w);
ie_finalizar_home_care_w := Obter_param_Usuario(3111, 125, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_finalizar_home_care_w);
ie_retirar_pc_isolamento_w := Obter_param_Usuario(3111, 132, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_retirar_pc_isolamento_w);
ie_cancela_ciclo_w := Obter_param_Usuario(3111, 154, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_cancela_ciclo_w);
ie_cancela_nesc_vaga_w := Obter_param_Usuario(3111, 155, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_cancela_nesc_vaga_w);
ie_verifica_precaucoes_pend_w := Obter_param_Usuario(3111, 160, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_verifica_precaucoes_pend_w);
ie_susp_prescricoes_alta_w := Obter_param_Usuario(3111, 162, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_susp_prescricoes_alta_w);
ie_finaliza_gasoterapia_w := Obter_param_Usuario(3111, 174, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_finaliza_gasoterapia_w);
atualizar_status_w := Obter_param_Usuario(3111, 187, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, atualizar_status_w);
ie_atualizar_situacao_w := Obter_param_Usuario(3111, 191, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_atualizar_situacao_w);
ie_reverter_adep_w := Obter_param_Usuario(1113, 206, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_reverter_adep_w);
ie_inativar_home_care_w := Obter_param_Usuario(3111, 221, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_inativar_home_care_w);
ie_consistir_laudo_aih_w := Obter_param_Usuario(3111, 241, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_consistir_laudo_aih_w);
ie_consistir_dnv_dnf_w := Obter_param_Usuario(3111, 242, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_consistir_dnv_dnf_w);
ie_enviar_alerta_ativo_w := Obter_param_Usuario(3111, 250, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_enviar_alerta_ativo_w);
ie_permite_alta_fin_nao_lib_w := Obter_param_Usuario(3111, 254, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_permite_alta_fin_nao_lib_w);
ie_novo_leito_w := Obter_param_Usuario(3111, 262, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_novo_leito_w);
ie_consiste_cid_canc_w := Obter_param_Usuario(3111, 267, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_consiste_cid_canc_w);
ie_alta_atend_home_care_w := Obter_param_Usuario(3111, 268, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_alta_atend_home_care_w);
ie_susp_itens_SAE_w := Obter_param_Usuario(3111, 272, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_susp_itens_SAE_w);
cd_setor_desfazer_alta_w := Obter_param_Usuario(3111, 283, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, cd_setor_desfazer_alta_w);
qt_dias_fim_acomp_precaucao_w := Obter_param_Usuario(3111, 286, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, qt_dias_fim_acomp_precaucao_w);
ie_desfazer_alta_w := obter_param_Usuario(3111, 287, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_desfazer_alta_w);
ie_perm_alta_menor_alta_med_w := obter_param_Usuario(3111, 307, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_perm_alta_menor_alta_med_w);
ie_perm_alta_sem_tesouraria_w := obter_param_Usuario(3111, 310, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_perm_alta_sem_tesouraria_w);

ie_saida_visita_acomp_w := Obter_param_Usuario(8014, 63, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_saida_visita_acomp_w);
permite_desfazer_alta_w := Obter_param_Usuario(3111, 5, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, permite_desfazer_alta_w);

inativar_Alertas_w := Obter_param_Usuario(281, 1311, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, inativar_Alertas_w);

ie_dt_fim_orient_nutri_w := Obter_param_Usuario(1003, 100, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_dt_fim_orient_nutri_w);
ie_perm_geraralta_tesouraria_w := obter_param_Usuario(3111, 138, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_perm_geraralta_tesouraria_w);
lista_mot_alta_lib_fin_w := Obter_param_Usuario(3111, 316, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, lista_mot_alta_lib_fin_w);
ie_lib_aut_acomp_w := obter_param_usuario(3111, 42, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_lib_aut_acomp_w);



ie_integra_aghos_w := obter_dados_param_atend(wheb_usuario_pck.get_cd_estabelecimento, 'AG');

select	coalesce(max(ie_integracao_ativa),'N')
into STRICT	ie_integra_regul_w
from	regulacao_parametro;	

begin

select	dt_entrada,
	ie_tipo_atendimento,
	dt_atualizacao,
	nm_usuario,
	cd_estabelecimento,
	cd_pessoa_fisica,
	substr(obter_nome_pf(cd_pessoa_fisica),1,80),
	ie_status_atendimento,
	cd_medico_resp,
	dt_alta_medico,
	dt_alta_tesouraria,
	ie_tipo_convenio
into STRICT	dt_entrada_w,
	ie_tipo_atendimento_w,
	dt_atualizacao_w,
	nm_usuario_w,
	cd_estabelecimento_w,
	cd_pessoa_fisica_w,
	nm_paciente_w,
	ie_status_atendimento_w,
	cd_medico_resp_w,
	dt_alta_medico_w,
	dt_alta_tesouraria_w,
	ie_tipo_conv_w
from	atendimento_paciente
where	nr_atendimento 		= nr_atendimento_p;
exception
	when others then
		--'O atendimento nao existe, verifique se o mesmo foi informado'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(269048);
end;

nm_usuario_medico_w := obter_usuario_pessoa(cd_medico_resp_w);

if ((cd_motivo_alta_p IS NOT NULL AND cd_motivo_alta_p::text <> '') and (ie_alta_estorno_p = 'A') and (ie_tipo_atendimento_w = 1) and (ie_tipo_conv_w = 3)) then
	if (ie_integra_regul_w = 'S') then
		select	coalesce(max(ie_transferencia),'N')
		into STRICT	ie_transferencia_w
		from	motivo_alta
		where 	cd_motivo_alta = cd_motivo_alta_p;	

		if (ie_transferencia_w = 'S') then
			-- Mensagem de Consistencia primeiro pra verifica ro status do motivo for Trasnferencia, 

			-- se for so deixar se existir regulacao externa com status 6 - RESERVA CONFIRMADA, senao emite mensagem
			select 	coalesce(max(1),0) qde
			into STRICT	qt_reg_externa_confirmada_w
			from	regulacao_atendimento
			where	nr_atendimento	= nr_atendimento_p
			and     nr_regulacao_gerada > 0
			and 	ie_status_reg_gerada = 6;
			
			if (qt_reg_externa_confirmada_w = 0) then
				--  Para motivos de alta de transferencia, com a regulacao ativa, torna-se necessario possuir uma solicitacao de regulacao externa gerada 

				--  com status do tipo 6 - RESERVA CONFIRMADA. Favor verificar na funcao Regulacao de Atendimentos.
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(439770);
			end if;	
		end if;
	end if;
end if;


ie_atualiza_apos_alta_w := Obter_param_Usuario(67, 204, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_atualiza_apos_alta_w);
ie_atualiza_data_item_alta_w := Obter_param_Usuario(67, 616, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_atualiza_data_item_alta_w);
ie_AtualizaTISSaoFecharConta_w := Obter_param_Usuario(67, 206, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_AtualizaTISSaoFecharConta_w);

qt_idade_w	:= coalesce(obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A'),0);

select 	max(ie_gerar_alta_atend_rn),
	coalesce(max(ie_arq_pyxis),'N'),
	coalesce(max(ie_alta_atend_pendente),'N')
into STRICT	ie_gerar_alta_atend_rn_w,
	ie_arq_pyxis_w,
	ie_alta_atend_pendente_w
from	parametro_atendimento
where	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(ie_permite_alta_obito_w, 'S')		= 'N') and (obter_se_motivo_alta_obito(cd_motivo_alta_p)	= 'S') then

	if (ie_restringe_estab_alta_obt_w = 'S') then
		select	max(nr_atendimento)
		into STRICT	nr_atend_sem_alta_w
		from	atendimento_paciente
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	nr_atendimento		<> nr_atendimento_p
		and	cd_estabelecimento	= cd_estabelecimento_ww
		and	coalesce(cd_motivo_alta::text, '') = '';
	else
		select	max(nr_atendimento)
		into STRICT	nr_atend_sem_alta_w
		from	atendimento_paciente
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	nr_atendimento		<> nr_atendimento_p
		and	coalesce(cd_motivo_alta::text, '') = '';
	end if;

	if (nr_atend_sem_alta_w IS NOT NULL AND nr_atend_sem_alta_w::text <> '') then
		/*'O paciente possui mais atendimentos sem alta lancada! ' || chr(10) || chr(13) ||
						'Atendimento: ' || nr_atend_sem_alta_w);*/
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(200668,'NR_ATEND_SEM_ALTA=' || nr_atend_sem_alta_w);
	end if;

end if;

if (ie_dt_alta_menor_moviment_w = 'N') and (ie_alta_estorno_p = 'A') then

	select	max(dt_entrada_unidade)
	into STRICT	dt_entrada_unidade_w
	from	atend_paciente_unidade
	where	nr_atendimento = nr_atendimento_p;

	if (dt_alta_p < dt_entrada_unidade_w) then
		--'A data da alta deve ser superior as datas de movimentacao do paciente! Parametro [115] Movimentacao de Pacientes'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(200669);
	end if;

end if;

select 	coalesce(max(ie_fechar_conta_alta), 'N'),
	coalesce(max(ie_lanc_auto_sus_alta),'N'),
	coalesce(max(ie_gerar_pacote_alta),'N'),
	coalesce(max(ie_cancelar_autor_alta),'N'),
	coalesce(max(ie_fechar_conta_ps_alta),'T'),
	coalesce(max(ie_forma_fechamento),'A'),
        coalesce(max(ie_diaria_dia_ant),'N')
into STRICT	ie_fechar_conta_alta_w,
	ie_lanc_auto_sus_alta_w,
	ie_gerar_pacote_alta_w,
	ie_cancelar_autor_alta_w,
	ie_fechar_conta_ps_alta_w,
	ie_forma_fechamento_w,
        ie_diaria_dia_ant_w
from 	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_w;


dt_entrada_unidade_w		:= dt_entrada_w;

begin

select	max(b.ie_tipo_convenio)
into STRICT	ie_tipo_convenio_w
from	convenio b,
	atend_categoria_convenio a
where	a.cd_convenio	 	= b.cd_convenio
and	a.nr_atendimento 		= nr_atendimento_p;
exception
	when others then
		ie_tipo_convenio_w	:= 3;
end;

/* Incluido campo ie_gera_novo_atend  Bola 08072002 */


/* if	(ie_tipo_convenio_w <> 3) then Bola 08072002 */

	begin
	select	coalesce(ie_censo_diario,'S'),
		coalesce(ie_gera_novo_atend,'N')
	into STRICT	ie_censo_diario_w,
		ie_gera_novo_atend_w
	from	motivo_alta
	where	cd_motivo_alta	= cd_motivo_alta_p;
	exception
		when others then
		ie_censo_diario_w	:= 'S';
	end;
/* end if;  Bola 08072002 */

if (ie_tipo_convenio_w = 3) then
	ie_censo_diario_w := 'S';
else
	if (ie_tipo_atendimento_w = 1) and (ie_consiste_cih_w = 'S') then
		select	coalesce(max(1),0)
		into STRICT	ie_cih_w
		from	procedimento_paciente_cih where		nr_atendimento = nr_atendimento_p LIMIT 1;
		if (ie_cih_w = 0) then
			ds_erro_p	:= wheb_mensagem_pck.get_texto(279169,null);
		end if;
	end if;
end if;

dt_entrada_unidade_w			:= null;

select	coalesce(obter_se_leito_atual_monit(nr_atendimento_p),'N')
into STRICT	ie_leito_monit_w
;

begin
cd_setor_atendimento_w	:= obter_setor_Atendimento(nr_atendimento_p);

exception
	when others then
	null;
end;

select	max(ie_setor_rothman)
into STRICT	ie_setor_rothman_w
from	setor_atendimento
where	cd_setor_atendimento	= cd_setor_atendimento_w;


if (ie_cancela_ciclo_w = 'S') and (obter_se_motivo_alta_obito(cd_motivo_alta_p)	= 'S') then
	CALL wheb_usuario_pck.set_ie_commit('N');
	CALL suspender_ciclos_paciente(cd_pessoa_fisica_w,nm_usuario_p);
	wheb_usuario_pck.set_ie_commit('S');
end if;

open c01;
loop
fetch c01 into
	dt_entrada_unidade_w,
	nr_seq_interno_w,
	cd_classif_setor_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	dt_entrada_unidade_w	:= dt_entrada_unidade_w;
end loop;
close c01;

if (ie_alta_estorno_p = 'A') then /*Gerar alta*/
	begin

	if (ie_consiste_cid_canc_w = 'N') then

		select	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_atend_cancelado_w
		from	atendimento_cancelamento where		nr_atendimento = nr_atendimento_p LIMIT 1;

	end if;

	select	verifica_alta_setor_usu_lib(nm_usuario_p,nr_atendimento_p)
	into STRICT	ie_regra_setor_usuario_w
	;

	select	max(nr_seq_interno)
	into STRICT	nr_seq_unidade_w
	from	unidade_atendimento
	where	nr_atendimento = nr_atendimento_p;

	if (ie_regra_setor_usuario_w = 'N') then
		--'Nao e permitido alta, pois o setor do paciente e diferente do setor do usuario. ' || chr(13) || ' Conforme definido na regra de  liberacao de alta por setor.'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(200670);
	end if;

	if (ie_alta_retroativa_w	= 'N') and
		(dt_alta_p		< (clock_timestamp() - interval '155 seconds')) then
		--'Nao e permitido alta com data retroativa. Parametro [63].
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(200671);
	end if;

	select	max(ds_tipo_evolucao),
		max(cd_tipo_evolucao)
	into STRICT	ds_tipo_evolucao_w,
		cd_tipo_evolucao_w
	from	tipo_evolucao
	where	coalesce(ie_obriga_alta,'N') = 'S';

	if (ds_tipo_evolucao_w IS NOT NULL AND ds_tipo_evolucao_w::text <> '') then
		select	coalesce(max(1),0)
		into STRICT	cont_w
		from	evolucao_paciente
		where	ie_evolucao_clinica	= cd_tipo_evolucao_w
		and	nr_atendimento		= nr_atendimento_p
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

		select	cd_setor_atendimento
		into STRICT	cd_setor_atendimento_www
		from	atend_paciente_unidade
		where	nr_seq_interno = nr_seq_interno_w
		and	nr_atendimento = nr_atendimento_p;

		select 	coalesce(max(1),0)
		into STRICT 	qt_existe_regra_setor_w
		from 	tipo_evolucao_alta_setor
		where 	ie_permite = 'S'
		and	cd_tipo_evolucao = cd_tipo_evolucao_w
		and	cd_setor_atendimento = cd_setor_atendimento_www;

		if (cont_w = 0) and (qt_existe_regra_setor_w = 0) then
			--'Para gerar alta e necessario informar e liberar uma evolucao do tipo : '||ds_tipo_evolucao_w||'
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(200672,'DS_TIPO_EVOLUCAO=' || ds_tipo_evolucao_w);
		end if;
	end if;
	
	if (ie_permite_alta_fin_nao_lib_w	<> 'S') and (substr(obter_se_atend_lib_financeira(nr_atendimento_p),1,2) = 'N') and (obter_se_contido(cd_motivo_alta_p,lista_mot_alta_lib_fin_w) = 'N') then
		ds_erro_p	:= Wheb_mensagem_pck.get_texto(231182,null);		
	end if;

	if (coalesce(cd_motivo_alta_p::text, '') = '') then
		--'E necessario informar o motivo de alta.
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(200673);
	end if;
	wheb_usuario_pck.set_ie_commit('N');
	CALL consistir_regra_alta(cd_motivo_alta_p, cd_pessoa_fisica_w, nm_usuario_p, nr_atendimento_p,cd_processo_alta_p);
	CALL consistir_bloqueio_alta(cd_motivo_alta_p, nr_atendimento_p, nm_usuario_p);
	wheb_usuario_pck.set_ie_commit('S');
	if (obter_funcao_ativa not in (916, 3111)) then
		CALL wheb_usuario_pck.set_ie_commit('N');
		SELECT * FROM consistir_alta_lib_proc(cd_motivo_alta_p, nr_atendimento_p, ds_retorno_w, ds_retorno_w2, ds_retorno_w3) INTO STRICT ds_retorno_w, ds_retorno_w2, ds_retorno_w3;
		wheb_usuario_pck.set_ie_commit('S');
		if (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') and (length(ds_retorno_w) > 1) then -- foi alterado dessa forma, pois estava sendo consistido na hora de documentar o objeto.
			--ds_retorno_w || ds_retorno_w2
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(200674,'DS_RETORNO=' || ds_retorno_w || ';DS_RET_2=' || ds_retorno_w2
									|| ';DS_RET_3=' || ds_retorno_w3);
		end if;
	end if;

	if (ie_consistir_disp_w in ('A','C')) and (obter_se_atendimento_disp(nr_atendimento_p) = 'S') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(291821);
		--Nao e possivel gerar a alta com dispositivos em uso. Parametro [57].
	end if;
	
	select	coalesce(max(ie_cancelar_atendimento),'N')
	into STRICT	ie_cancela_atend_alta_w
	from	motivo_alta
	where	cd_motivo_alta = cd_motivo_alta_p;

	qt_pertence_pendente_w	:= 0;

	if (ie_alta_pertence_aberto_w = 'N') then

		select 	coalesce(max(1),0)
		into STRICT	qt_pertence_pendente_w
		from	pertence_paciente p,
			pertence_paciente_item i
		where	i.nr_seq_pertence_paciente = p.nr_sequencia
		and	p.nr_atendimento = nr_atendimento_p
		and	coalesce(dt_entrega::text, '') = '' and i.ie_situacao != 'I';

	end if;

	/* Dalcastagne em 14/06/2007 OS 59399 */

	if (ie_alta_cid_w = 'D') and
		((ie_atend_cancelado_w = 'S' AND ie_consiste_cid_canc_w = 'N') or (ie_consiste_cid_canc_w = 'S')) then
		CALL wheb_usuario_pck.set_ie_commit('N');
		ds_erro_cid_w := verifica_se_obriga_cid(nr_atendimento_p, cd_motivo_alta_p, ds_erro_cid_w);
		wheb_usuario_pck.set_ie_commit('S');
	end if;

	select	obter_cid_atendimento(nr_atendimento_p,'P')
	into STRICT	ie_se_cid_w
	;

	begin
	select	max(cd_convenio),
		max(cd_categoria)
	into STRICT	cd_convenio_atend_w,
		cd_categoria_atend_w
	from	atend_categoria_convenio
	where	nr_atendimento = nr_atendimento_p;
	exception  when others
		then
		cd_convenio_atend_w 	:=  0;
		cd_categoria_atend_w	:= '0';
	end;

	begin
	ds_log_w := substr(wheb_mensagem_pck.get_texto(307540,	'DS_FUNCAO=' || obter_funcao_ativa || ';' ||
															'DS_PERFIL=' || obter_perfil_ativo || ';' ||
															'NR_ATENDIMENTO_P=' || nr_atendimento_p || ';' ||
															'DS_CALLSTACK=' || dbms_utility.format_call_stack),1,1500);
														/*
															 Funcao ativa : DS_FUNCAO
															 Perfil ativa : DS_PERFIL
															 Atendimento  : NR_ATENDIMENTO_P
															 CallStack: 
															 DS_CALLSTACK
														*/
	insert into log_mov(
		dt_atualizacao,
		nm_usuario,
		cd_log,
		ds_log)
	values (
		clock_timestamp(),
		nm_usuario_p,
		88910,
		ds_log_w);

	exception
		when others then
		ds_log_w	:=	'';
	end;

	if (ie_alta_inconsistente_w	= 'N') then
		open c02;
		loop
		fetch c02 into
			nr_interno_conta_w,
			cd_convenio_parametro_w,
			cd_categoria_parametro_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin

			wheb_usuario_pck.set_ie_commit('N');
			SELECT * FROM consiste_conta_paciente(	nr_interno_conta_w, nr_atendimento_p, ie_fecha_atendimento_ww, ie_fecha_conta_ww, qt_processo_pendente_w, ds_erro_conta_w) INTO STRICT ie_fecha_atendimento_ww, ie_fecha_conta_ww, qt_processo_pendente_w, ds_erro_conta_w;
			wheb_usuario_pck.set_ie_commit('S');

			if (ie_fecha_atendimento_ww	='N') then
				ie_fecha_atendimento_w := ie_fecha_atendimento_ww;
				exit;
			end if;
			if (ie_fecha_conta_ww	='N') then
				ie_fecha_conta_w := ie_fecha_conta_ww;
				exit;
			end if;
			end;
		end loop;
		close c02;
	end if;

	if (ie_consistir_laudo_aih_w = 'S') and (coalesce(obter_tipo_convenio_atend(nr_atendimento_p),0) = 3) and (coalesce(obter_tipo_atendimento(nr_atendimento_p),0) = 1) then

		select 	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_possui_laudo_w
		from	sus_laudo_paciente
		where	nr_atendimento = nr_atendimento_p
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');
	end if;

	if (ie_consistir_dnv_dnf_w = 'S') then

		select 	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_existe_proc_parto_w
		from	procedimento_paciente
		where	obter_tipo_procedimento(cd_procedimento, ie_origem_proced, 'C') = 77
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	nr_atendimento = nr_atendimento_p;

		if (ie_existe_proc_parto_w = 'S') then

			select	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_inf_dnv_dnf_w
			from	nascimento
			where	nr_atendimento = nr_atendimento_p
			and ((nr_dnv IS NOT NULL AND nr_dnv::text <> '') or (nr_dfm IS NOT NULL AND nr_dfm::text <> ''));

		end if;

	end if;

	select	coalesce(max(ie_permite_alta), 'S')
	into STRICT	ie_setor_permite_alta_w
	from	setor_atendimento
	where	cd_setor_atendimento = cd_setor_atendimento_w;

	if (ie_alta_inconsistente_w	= 'N') and
		((ie_atend_cancelado_w = 'S' AND ie_consiste_cid_canc_w = 'N') or (ie_consiste_cid_canc_w = 'S')) and
		((ie_fecha_atendimento_w	= 'N') or (ie_fecha_conta_w	= 'N')) then
		ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(279175,null);
	elsif (ie_alta_cid_w = 'N') and (coalesce(ie_se_cid_w::text, '') = '') and (obter_se_atend_rn(nr_atendimento_p) = 'N') then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(185683,null);
	elsif (ds_erro_cid_w IS NOT NULL AND ds_erro_cid_w::text <> '') and (coalesce(ie_se_cid_w::text, '') = '') then
		ds_erro_p 	:= ds_erro_cid_w;
	elsif (dt_alta_p < dt_entrada_w) then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(279181,null);
	elsif (dt_alta_p < dt_entrada_unidade_w) then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(279182,null);
	elsif (dt_alta_p > clock_timestamp()) and (dt_alta_p > clock_timestamp() + interval '120 days'/86400) then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(356233,null);
	elsif (coalesce(ie_inf_dnv_dnf_w,'X') = 'N') then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(279194,null);
	elsif (coalesce(ie_possui_laudo_w,'X') = 'N') then
		ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(279163,null);
	elsif (qt_pertence_pendente_w > 0) then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(279195,null);
	elsif	(((ie_alta_medica_w = 'N') and (coalesce(dt_alta_medico_w::text, '') = '') and (ie_necessita_alta_medica_w = 'S')) or
			 ((ie_alta_medica_w = 'I') and (coalesce(dt_alta_medico_w::text, '') = '') and (ie_tipo_atendimento_w = 1) and (ie_necessita_alta_medica_w = 'S'))) then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(279196,null);
	elsif (ie_setor_permite_alta_w = 'N') then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(279197,'CD_SETOR_ATENDIMENTO='||substr(obter_nome_setor(cd_setor_atendimento_w), 1, 100));
	end if;


	
	select 	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_atendimento_rn_w
	from 	atendimento_paciente
	where 	nr_atendimento = nr_atendimento_p
	and 	(nr_atendimento_mae IS NOT NULL AND nr_atendimento_mae::text <> '');

	if (ie_atendimento_rn_w = 'S') then
	
		select	max(nr_atendimento_mae)
		into STRICT	nr_atend_rn_mae_w
		from	atendimento_paciente
		where	nr_atendimento = nr_atendimento_p;
		
		if (coalesce(nr_atend_rn_mae_w,0) > 0) then
		
			select  CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END  -- Verificar se a alta do Rn esta sendo gerada automaticamente ou manualmente, pois deve apagar o ds_erro apenas se for de forma automatica.
			into STRICT	ie_alta_rn_automatica_w
			from	atendimento_paciente
			where	nr_atendimento = nr_atend_rn_mae_w
			and	dt_alta >= clock_timestamp() - interval '1 days'/1440;
			
			if (ie_alta_rn_automatica_w = 'S') then

				insert into log_mov(dt_atualizacao,
						nm_usuario,
						ds_log,
						cd_log)
					values (clock_timestamp(),
						nm_usuario_p,
						wheb_mensagem_pck.get_texto(307541, 'NR_ATENDIMENTO_P=' || nr_atendimento_p || ';' || 'DS_ERRO_P=' || ds_erro_p), -- Atendimento: NR_ATENDIMENTO_P Erro: DS_ERRO_P
						99587);
					ds_erro_p	:= ''; --Criado o log pois conforme OS 648128, o atendimento RN precisar ter alta mesmo com erro, log ira guardar a informacao do erro.
			end if;
		end if;
	end if;

	if (coalesce(ds_erro_p::text, '') = '') then
		begin
		if (ie_arq_pyxis_w = 'S') then
			select	coalesce(max(cd_setor_atendimento),0)
			into STRICT	cd_setor_atend_w
			from	atend_paciente_unidade
			where	nr_seq_interno = nr_seq_interno_w
			and	nr_atendimento = nr_atendimento_p;

			if (dis_obter_regra_moviment('A',cd_setor_atend_w,null) = 'S') and (cd_setor_atend_w > 0) then
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL dis_gerar_arq_alta(nr_atendimento_p, dt_alta_p);
				wheb_usuario_pck.set_ie_commit('S');

				insert into dis_log_integracao(
							nr_sequencia,
							cd_estabelecimento,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							ds_historico)
						values (nextval('dis_log_integracao_seq'),
							cd_estabelecimento_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							wheb_mensagem_pck.get_texto(307543)); -- Geracao do arquivo de saida do dispensario 1
			end if;
		end if;

		select	max(cd_setor_atendimento)
		into STRICT	cd_setor_atendimento_ww
		from	atend_paciente_unidade
		where	nr_seq_interno = (
			SELECT Obter_Atepacu_paciente(nr_atendimento_p, 'A')
			)
		and	Obter_Tipo_Unidade_Atend(nr_atendimento, nr_seq_interno, ie_passagem_setor) <> 'S';

		if (coalesce(cd_setor_atendimento_ww::text, '') = '') then
			cd_setor_atendimento_ww := Obter_Setor_AtePacu(Obter_Atepacu_paciente(nr_atendimento_p, 'IA'),0);
		end if;

		select	coalesce(max(1),0)
		into STRICT	qt_reg_w
		from	dis_regra_setor
		where	cd_setor_atendimento = cd_setor_atendimento_ww;
		
		if (qt_reg_w > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL intdisp_gerar_movimento(nr_atendimento_p, 'EPD');
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		select 	coalesce(max(1),0)
		into STRICT 	qt_mov_temp_w
		from	atend_paciente_unidade
		where	nr_atendimento 	= nr_atendimento_p
		and	coalesce(dt_saida_unidade::text, '') = '';

		if (obter_valor_param_usuario(3111,135,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w)='N') and (qt_mov_temp_w >= 2) then
			--'Nao e permitido gerar alta sem registrar saida dos leitos anteriores. 	Parametro [135].
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(200675);
		end if;

		if (ie_perm_alta_menor_alta_med_w = 'N') and (dt_alta_medico_w IS NOT NULL AND dt_alta_medico_w::text <> '') and (dt_alta_medico_w > dt_alta_p) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(286902, 'DT_ALTA_MEDICO='||PKG_DATE_FORMATERS.to_varchar(dt_alta_medico_w, 'timestamp', 8031,PKG_DATE_FORMATERS.getCalendar(cd_estabelecimento_w,nm_usuario_p)));
		end if;
		
		if (ie_perm_alta_sem_tesouraria_w = 'N') and (coalesce(dt_alta_tesouraria_w::text, '') = '') and
			(((ie_perm_geraralta_tesouraria_w = 'S') and ((obter_conta_particular_aberta(nr_atendimento_p) IS NOT NULL AND (obter_conta_particular_aberta(nr_atendimento_p))::text <> ''))) or
			((ie_perm_geraralta_tesouraria_w = 'T') and ((Obter_conta_tesouraria_aberta(nr_atendimento_p) IS NOT NULL AND (Obter_conta_tesouraria_aberta(nr_atendimento_p))::text <> ''))) or
			ie_perm_geraralta_tesouraria_w = 'N') then
			
			--Nao e possivel gerar alta, sem antes gerar a alta tesouraria. Parametro 310 - Movimentacao de Pacientes
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(293963);
		end if;

                if (ie_diaria_dia_ant_w = 'S') then
                        CALL calcular_diaria_atendimento(cd_estabelecimento_w, nr_atendimento_p, dt_entrada_w, dt_alta_p, nm_usuario_p, 'S', 'S', 'D', dt_alta_p);
                end if;
		update 	atendimento_paciente
		set 	dt_alta				= dt_alta_p,
				dt_alta_interno		= dt_alta_p,
				dt_atualizacao		= clock_timestamp(),
				cd_motivo_alta		= cd_motivo_alta_p,
				nm_usuario_alta		= nm_usuario_p,
				nm_usuario			= nm_usuario_p,
				ds_obs_alta			= ds_observacao_p
		where	nr_atendimento 		= nr_atendimento_p;
		
		select 	coalesce(max(1),0)
		into STRICT	nr_resultado_count_w
		from	atendimento_paciente_inf
		where 	nr_atendimento = nr_atendimento_p;
		
		if (nr_resultado_count_w > 0) then
			update 	atendimento_paciente_inf
			set 	cd_contract_hosp	= cd_contract_hosp_p,
					cd_contract_role	= cd_contract_role_p,
					cd_contract_type	= cd_contract_type_p,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario			= nm_usuario_p
			where	nr_atendimento 		= nr_atendimento_p;
		else
			insert into atendimento_paciente_inf(	nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_contract_hosp,
					cd_contract_role,
					cd_contract_type,
					nr_atendimento)
            values (	nextval('atendimento_paciente_inf_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_contract_hosp_p,
					cd_contract_role_p,
					cd_contract_type_p,
					nr_atendimento_p
				);
		end if;
				
		ie_gerar_checkout_voice_w := Obter_param_Usuario(3111, 331, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_gerar_checkout_voice_w);
		
		if  coalesce(ie_gerar_checkout_voice_w, 'A') = 'A' then
			select  coalesce(max(1),0)
			into STRICT    nr_resultado_w
			from    integra_voice_hcs
			where   ie_evento = 'CO'
			and     nr_atendimento = nr_atendimento_p;
			
			select  max(cd_setor_atendimento),
					max(cd_unidade_basica),
					max(cd_unidade_compl)
			into STRICT    cd_setor_atendimento_wwww,
					cd_unidade_basica_w,
					cd_unidade_compl_ww
			from    unidade_atendimento
			where   nr_atendimento = nr_atendimento_p;
			
			if (nr_resultado_w = 0) then
			
				insert into integra_voice_hcs(NR_SEQUENCIA,
					DT_ATUALIZACAO,
					NM_USUARIO,
					DT_ATUALIZACAO_NREC,
					NM_USUARIO_NREC,
					NR_ATENDIMENTO,
					CD_SETOR_ATEND_ANT,
					CD_UNID_BASIC_ANT,
					CD_UNID_COMPL_ANT,
					CD_SETOR_ATENDIMENTO,
					CD_UNIDADE_BASICA,
					CD_UNIDADE_COMPL,
					IE_STATUS_UNIDADE,
					IE_EVENTO,
					DS_MENSAGEM)
				values (
					nextval('integra_voice_hcs_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_atendimento_p,
					null,
					null,
					null,
					cd_setor_atendimento_wwww,
					cd_unidade_basica_w,
					cd_unidade_compl_ww,
					null,
					'CO',
					null);				
			end if;
		end if;
		if	((ie_susp_prescricoes_alta_w = 'S') or
			 ((ie_susp_prescricoes_alta_w = 'O') and (obter_se_motivo_alta_obito(cd_motivo_alta_p) = 'S'))) then
			open c10;
			loop
			fetch c10 into
				nr_prescricao_w;
			EXIT WHEN NOT FOUND; /* apply on c10 */
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL suspender_prescricao(nr_prescricao_w, null, WHEB_MENSAGEM_PCK.get_texto(279202,null), nm_usuario_p, 'S');
				CALL wheb_usuario_pck.set_ie_commit('S');
				insert into log_mov(dt_atualizacao,
									nm_usuario,
									cd_log,
									ds_log
									)
							values (clock_timestamp(),
									nm_usuario_p,
									65584,
									wheb_mensagem_pck.get_texto(307531, 'NR_PRESCRICAO_W=' || nr_prescricao_w) -- Prescricao: NR_PRESCRICAO_W suspensa por nao estar atendida e o parametro [162] estar habilitado
									);
	
			end loop;
			close c10;
			if	((dt_alta_p IS NOT NULL AND dt_alta_p::text <> '')  and (ie_inativa_item_w = 'S' or ie_inativa_item_w = 'E') and (cpoe_counter_gerar_alta(nr_atendimento_p) > 0)) then
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL cpoe_atualizar_dt_fim_alta_j(nr_atendimento_p, dt_alta_p, nm_usuario_p);
				CALL wheb_usuario_pck.set_ie_commit('S');
			end if;			
	
		elsif ((dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') and (ie_inativa_item_w = 'S' or ie_inativa_item_w = 'E') and (cpoe_counter_gerar_alta(nr_atendimento_p) > 0)) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL cpoe_atualizar_ie_baixado_alta(nm_usuario_p,nr_atendimento_p, dt_alta_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;
		
		/*INICIO gerar atendimento previsto HDM*/


		/*Verifica se tem cadastros de regra na HDM - Cadastro Gerais para o tipo de atendimento */

		select	coalesce(max(1),0)
		into STRICT	qt_regras_hdm_w
		from	mprev_atend_previsto_alta a	
		where	a.ie_tipo_atendimento = ie_tipo_atendimento_w;
		/*Se existir regra para o tipo de atendimento vai chamar a procedure mprev_gerar_atend_prev_alta para 
		gerar atendimento previstos para o participante da medicina preventiva conforme as regras cadastradas
		na funcao HDM - Cadastro Gerais para o tipo de atendimento.*/
		if (qt_regras_hdm_w > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL mprev_gerar_atend_prev_alta(nr_atendimento_p, nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;
		/*FIM gerar atendimento previsto HDM*/

		
		ie_finaliza_precaucao_w := obter_param_usuario(281, 1432, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_finaliza_precaucao_w);
	
		if (coalesce(ie_finaliza_precaucao_w,'N') = 'S') then
			update	atendimento_precaucao
			set	dt_termino = clock_timestamp(),
				ds_just_fim_prec = wheb_mensagem_pck.get_texto(307544), -- Alta do paciente
				nm_usuario_fim = nm_usuario_p
			where	nr_atendimento = nr_atendimento_p
			and	coalesce(dt_termino::text, '') = '';
		end if;
				
		/*	alta	*/

		select 	max(ds_senha_internet)
		into STRICT	ds_senha_w
		from	atendimento_paciente
		where	nr_atendimento 	= nr_atendimento_p
		and	exists (SELECT nr_atendimento from ATEND_SENHA_INTERNET where nr_atendimento = nr_atendimento_p);
		
		if 	((ds_senha_w IS NOT NULL AND ds_senha_w::text <> '') or (ds_senha_w  > 0 ))then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_senha_internet(nr_atendimento_p, dt_alta_p, null, null, ds_senha_w, 'GA');
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;

		if (dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') then

         select coalesce(max(1),0)
         into STRICT   tota_ged_w
         from   ged_atendimento
         where  coalesce(ie_situacao,'N') = 'A'
         and    nr_Atendimento = nr_atendimento_p;

         if (tota_ged_w > 0) then
            begin
            open c15;

            loop
            fetch c15 into
               nr_seq_evento_w;
            EXIT WHEN NOT FOUND; /* apply on c15 */
               begin
		wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_evento_paciente_trigger(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,null,nm_usuario_p,null);
		wheb_usuario_pck.set_ie_commit('S');
               end;
            end loop;
            close c15;
            end;

         end if;
      end if;

	if ((coalesce(ie_gerar_pacote_alta_w,'N') = 'S') or
		((coalesce(ie_gerar_pacote_alta_w,'N') = 'P') and (ie_tipo_atendimento_w = 3)) or
		((coalesce(ie_gerar_pacote_alta_w,'N') = 'R') and (Obter_Regra_Pacote_Alta(cd_estabelecimento_w,ie_tipo_atendimento_w) = 'S'))) then
		open c02;
			loop
			fetch c02 into
				nr_interno_conta_w,
				cd_convenio_parametro_w,
				cd_categoria_parametro_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
			begin

			select	coalesce(max(ie_permite_gerar_pacote),'N')
			into STRICT	ie_permite_gerar_pacote_w
			from   	categoria_convenio
			where  	cd_convenio	= cd_convenio_parametro_w
			and    	cd_categoria	= cd_categoria_parametro_w;

			if (coalesce(ie_permite_gerar_pacote_w,'N') = 'S') and (cd_convenio_atend_w  = cd_convenio_parametro_w) and (cd_categoria_atend_w = cd_categoria_parametro_w) then
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL calcular_pacote(nr_atendimento_p,
					nr_interno_conta_w,
					cd_convenio_parametro_w,
					cd_categoria_parametro_w,
					nm_usuario_p,
					'S','S','S','S','N');
				wheb_usuario_pck.set_ie_commit('S');
			end if;
			end;
		end loop;
		close c02;
	end if;

		if (inativar_Alertas_w = 'S' or inativar_Alertas_w = 'A')then
			update 	atendimento_alerta
			set    	ie_situacao = 'I',
					dt_inativacao = clock_timestamp(),
					nm_usuario_inativacao = nm_usuario_p
			where  	nr_atendimento = nr_Atendimento_p;
		end if;

		if (inativar_Alertas_w = 'S') then
			update ALERTA_PACIENTE
			set    	ie_situacao = 'I',
					dt_inativacao = clock_timestamp(),
					nm_usuario_inativacao = nm_usuario_p
			where  cd_pessoa_fisica = cd_pessoa_fisica_w;
		end if;


		if (ie_cancela_nesc_vaga_w = 'S') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL cancelar_neces_vaga_atend(nr_atendimento_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		begin
		
		select 	coalesce(max('S'), 'N')
		into STRICT 	ie_motivo_obito_w
		from 	motivo_alta ma
		where 	coalesce(ma.ie_manter_pac_obito_leito, 'N') = 'S'
		and 	ma.cd_motivo_alta = cd_motivo_alta_p;
		
		if (ie_motivo_obito_w = 'N') then
			update	atend_paciente_unidade
			set 	dt_saida_unidade	= dt_alta_p,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_atendimento 		= nr_atendimento_p
			and	coalesce(dt_saida_unidade::text, '') = '';
		end if;
		end;

		open C13;
		loop
		fetch C13 into
			nr_seq_pac_restricao_w;
		EXIT WHEN NOT FOUND; /* apply on C13 */
			begin

			update	paciente_rep_prescricao
			set	dt_fim = clock_timestamp()
			where	nr_sequencia = nr_seq_pac_restricao_w;

			end;
		end loop;
		close C13;

		/*gerar alerta no atendimento - tvvieira OS 291728*/

		select 	coalesce(max(nr_seq_tipo_alerta),0)
		into STRICT 	nr_seq_tipo_alerta_w
		from 	motivo_alta_alerta
		where	cd_motivo_alta = cd_motivo_alta_p;

		/*Finalizar gasoterapias em aberto - amramos OS 303063*/

		if (ie_finaliza_gasoterapia_w = 'S') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL finaliza_gasoterapia_atend(nr_atendimento_p, nm_usuario_p, dt_alta_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		if (nr_seq_tipo_alerta_w > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL inserir_alerta_atend_alta(nr_atendimento_p,nm_usuario_p,nr_seq_tipo_alerta_w,cd_motivo_alta_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		If (ie_integra_aghos_w = 'S') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL Aghos_alta_solicitacao(nr_atendimento_p, nm_usuario_p, cd_motivo_alta_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		if (ie_finalizar_home_care_w = 'S') then
			update 	paciente_home_care
			set	dt_final		= dt_alta_p
			where 	nr_atendimento_origem	= nr_atendimento_p;
		end if;

		if (ie_inativar_home_care_w = 'S') then
			update 	paciente_home_care
			set	ie_situacao = 'I'
			where 	nr_atendimento_origem	= nr_atendimento_p;
		end if;

		if (ie_alta_atend_home_care_w = 'S') then
			update	paciente_hc_atend
			set	dt_fim_atendimento = dt_alta_p
			where	nr_atendimento = nr_atendimento_p
			and	coalesce(dt_fim_atendimento::text, '') = '';
		end if;

		if (ie_gerar_dt_fim_cons_w = 'S') then
			begin
			select	max(hr_inicio_consulta),
				max(hr_fim_consulta)
			into STRICT	hr_inicio_consulta_w,
				hr_fim_consulta_w
			from	atendimento_ps_v
			where	nr_atendimento = nr_atendimento_p;

			if ((trim(both hr_inicio_consulta_w) IS NOT NULL AND (trim(both hr_inicio_consulta_w))::text <> '')) and (coalesce(trim(both hr_fim_consulta_w)::text, '') = '')  then
				begin
				update	atendimento_paciente
				set	dt_fim_consulta = clock_timestamp()
				where	nr_atendimento = nr_atendimento_p;
				end;
			end if;
			end;
		end if;

		select 	coalesce(max(ie_atualizar_final_pront),'N')
		into STRICT	ie_atualizar_final_pront_w
		from 	parametro_atendimento
		where	cd_estabelecimento	=cd_estabelecimento_w;

		if (ie_atualizar_final_pront_w = 'S') then
			begin
			update	same_prontuario
			set		dt_periodo_inicial = dt_entrada_w,
					dt_periodo_final   = dt_alta_p
			where	nr_atendimento = nr_atendimento_p
			and		coalesce(dt_periodo_inicial::text, '') = ''
			and		coalesce(dt_periodo_final::text, '') = '';
			end;
		end if;

		select	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_possui_hd_trat_w
		from	paciente_tratamento
		where	nr_atend_origem = nr_atendimento_p
		and	coalesce(nr_seq_motivo_fim::text, '') = '';

		if (ie_possui_hd_trat_w = 'S') then
			select	max(nr_seq_motivo_fim_alta)
			into STRICT	nr_seq_motivo_fim_w
			from	hd_parametro
			where	cd_estabelecimento = cd_estabelecimento_w;

			if (nr_seq_motivo_fim_w IS NOT NULL AND nr_seq_motivo_fim_w::text <> '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_tratamento_hd_w
				from	paciente_tratamento
				where	nr_atend_origem = nr_atendimento_p
				and	coalesce(nr_seq_motivo_fim::text, '') = '';

				update	paciente_tratamento
				set	dt_final_tratamento = clock_timestamp(),
					nr_seq_motivo_fim = nr_seq_motivo_fim_w
				where	nr_sequencia = nr_seq_tratamento_hd_w;
			end if;
		end if;

		select	max(cd_motivo_alta_rn),
			coalesce(max(ie_gera_alta_rn), 'N')
		into STRICT	cd_motivo_alta_rn_w,
			ie_gera_alta_rn_w
		from	motivo_alta
		where	cd_motivo_alta = cd_motivo_alta_p;

		open c06;
		loop
		fetch c06 into
			nr_atendimento_filho_w;
		EXIT WHEN NOT FOUND; /* apply on c06 */
			begin
			cd_setor_rn_w	:= substr(obter_setor_atendimento(nr_atendimento_filho_w),1,4);

			if (coalesce(cd_setor_rn_w,0) > 0) and (ie_gerar_alta_atend_rn_w = 'R') then
				ie_possui_regra_rn_w	:= substr(obter_regra_alta_atend_rn(cd_setor_rn_w, wheb_usuario_pck.get_cd_estabelecimento),1,1);
			else
				ie_possui_regra_rn_w	:= 'N';
			end if;

			if	(ie_possui_regra_rn_w = 'N' AND ie_gerar_alta_atend_rn_w = 'R') or
				(ie_gerar_alta_atend_rn_w = 'M' AND ie_gera_alta_rn_w = 'S') or (ie_gerar_alta_atend_rn_w in ('S', 'H')) then
				CALL wheb_usuario_pck.set_ie_commit('N');
				ds_erro_filho_w := gerar_estornar_alta(nr_atendimento_filho_w, 'A', cd_processo_alta_p, coalesce(cd_motivo_alta_rn_w, cd_motivo_alta_p), dt_alta_p, nm_usuario_p, ds_erro_filho_w, nr_seq_motivo_p, cd_cgc_p, ds_observacao_p, cd_cgc_transporte_p, cd_contract_hosp_p, cd_contract_role_p, cd_contract_type_p);
				wheb_usuario_pck.set_ie_commit('S');
				if (ds_erro_filho_w IS NOT NULL AND ds_erro_filho_w::text <> '') then
					ds_erro_p := ds_erro_p || chr(13) || chr(10) ||
								' ' || OBTER_DESC_EXPRESSAO(729088) || ' ' || nr_atendimento_filho_w || ': ' || chr(13) || chr(10) ||			-- 729088: RN Atendimento
								ds_erro_filho_w;
				end if;

			end if;

			end;
		end loop;
		close c06;


		open c11;
		loop
		fetch c11 into
			nr_atendimento_pendente_w;
		EXIT WHEN NOT FOUND; /* apply on c11 */
			begin
			wheb_usuario_pck.set_ie_commit('N');			
			ds_erro_pendente_w := gerar_estornar_alta(nr_atendimento_pendente_w, 'A', cd_processo_alta_p, cd_motivo_alta_p, dt_alta_p, nm_usuario_p, ds_erro_pendente_w, nr_seq_motivo_p, cd_cgc_p, ds_observacao_p, cd_cgc_transporte_p, cd_contract_hosp_p, cd_contract_role_p, cd_contract_type_p);
			wheb_usuario_pck.set_ie_commit('S');
			end;
		end loop;
		close c11;

		open c12;
		loop
		fetch c12 into
			nr_atendimento_filho_w;
		EXIT WHEN NOT FOUND; /* apply on c12 */
			begin
			cd_setor_rn_w	:= substr(obter_setor_atendimento(nr_atendimento_filho_w),1,4);

			if (coalesce(cd_setor_rn_w,0) > 0) and (ie_gerar_alta_atend_rn_w = 'R') then
				ie_possui_regra_rn_w	:= substr(obter_regra_alta_atend_rn(cd_setor_rn_w, wheb_usuario_pck.get_cd_estabelecimento),1,1);
			else
				ie_possui_regra_rn_w	:= 'S';
			end if;

			if (ie_possui_regra_rn_w = 'N') or (ie_gerar_alta_atend_rn_w <> 'R') then
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL gerar_autor_regra(nr_atendimento_filho_w,null,null,null,null,null,'AM',nm_usuario_p,null,null,null,null,null,null,'','','');
				wheb_usuario_pck.set_ie_commit('S');
			end if;
			end;
		end loop;
		close c12;

		begin
		
		wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_etapa_alta_paciente(nr_atendimento_p, null, nm_usuario_p);
		CALL gerar_evento_pendencia_conta(nr_atendimento_p, 'A', cd_estabelecimento_w,  nm_usuario_p,  null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'N');
		wheb_usuario_pck.set_ie_commit('S');
		
		select 	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_regra_geracao_w
		from	regra_geracao_ccih_alta
		where 	cd_estabelecimento = cd_estabelecimento_w
		and (coalesce(ie_tipo_atendimento, ie_tipo_atendimento_w) = ie_tipo_atendimento_w)
		and (coalesce(cd_setor_atendimento,Obter_Setor_Atendimento(nr_atendimento_p)) = Obter_Setor_Atendimento(nr_atendimento_p))
		and	ie_gerar_ficha_alta = 'S';

		select 	coalesce(max(1),0)
		into STRICT	qt_itens_alta_w
		from 	regra_ccih_alta_motivo;

		if (qt_itens_alta_w > 0) then

			select 	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_regra_geracao_w
			from	regra_geracao_ccih_alta a,
				regra_ccih_alta_motivo b
			where 	a.cd_estabelecimento = cd_estabelecimento_w
			and (coalesce(a.ie_tipo_atendimento, ie_tipo_atendimento_w) = ie_tipo_atendimento_w)
			and	a.nr_sequencia = nr_seq_regra_ccih
			and (coalesce(cd_setor_atendimento,Obter_Setor_Atendimento(nr_atendimento_p)) = Obter_Setor_Atendimento(nr_atendimento_p))
			and	ie_gerar_ficha_alta = 'S'
			and	b.cd_motivo_alta = cd_motivo_alta_p;
		end if;


		if (ie_regra_geracao_w = 'S') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL ccih_regra_gerar_ficha_ocorr(nr_atendimento_p,cd_medico_resp_w,cd_estabelecimento_w,'S',Obter_Setor_Atendimento(nr_atendimento_p),nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;
		exception
			when others then
				CALL wheb_usuario_pck.set_ie_commit('S');
				ie_regra_geracao_w := '';
		end;

		if (ie_encerrar_ficha_alta_w = 'S') then

			update	cih_ficha_ocorrencia
			set 	dt_encerramento = clock_timestamp()
			where	nr_atendimento 	= nr_atendimento_p
			and	coalesce(dt_encerramento::text, '') = '';

		end if;

		if (qt_dias_fim_acomp_precaucao_w > 0) then
			update	atendimento_precaucao
			set	dt_fim_acompanhamento = dt_alta_p + qt_dias_fim_acomp_precaucao_w
			where	nr_atendimento = nr_atendimento_p
			and	coalesce(dt_fim_acompanhamento::text, '') = '';
		end if;

		open c04;
		loop
		fetch c04 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			begin

			select	CASE WHEN coalesce(max(1),0)='0' THEN 'N'  ELSE 'S' END
			into STRICT	ie_inserir_w
			from	ev_evento a
			where	a.nr_sequencia = nr_seq_evento_w
			and	ie_situacao = 'A';

			if ((ie_inserir_w = 'S' AND ie_enviar_alerta_ativo_w = 'S') or (ie_enviar_alerta_ativo_w = 'N')) then
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL gerar_evento_paciente_trigger(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,null,nm_usuario_p);
				wheb_usuario_pck.set_ie_commit('S');
			end if;

			end;
		end loop;
		close c04;


		open c08;
		loop
		fetch c08 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c08 */
			begin
			select	coalesce(max(1),0)
			into STRICT	qt_existe_conta_aberta_w
			from	conta_paciente a,
				convenio b
			where	a.cd_convenio_parametro = b.cd_convenio
			and	a.nr_atendimento = nr_atendimento_p
			and	a.ie_status_acerto = 1
			and	b.ie_tipo_convenio = 1;

		if (qt_existe_conta_aberta_w > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_evento_paciente_trigger(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,null,nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;
			end;
		end loop;
		close c08;

		if (coalesce(ie_motivo_obito_w, 'N') = 'N') then

			update	unidade_atendimento
			set 	nr_atendimento	 = NULL,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_atendimento 	= nr_atendimento_p;
		end if;

		select	max(ie_status_unidade)
		into STRICT	ie_status_unidade_w
		from	unidade_atendimento
		where	nr_seq_interno = nr_seq_unidade_w;

		/*OS 328026 - Ativar Leitos inativos */

		if (coalesce(ie_atualizar_situacao_w,'N') = 'S') then
			begin
			wheb_usuario_pck.set_ie_commit('N');
			CALL atualizar_situacao_unidades(nr_seq_unidade_w,nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
			end;
		end if;


		/*OS 202719 - Liberar todas as unidades que estiverem interditadas para o atendimento*/

		update	unidade_atendimento
		set	ie_status_unidade	= coalesce(ie_status_unidade_w,ie_status_unidade)
		where	nr_seq_superior		= nr_seq_unidade_w
		and	coalesce(nr_atendimento::text, '') = '';

		/* Rafael em 12/03/2007 OS51338 */

		select	substr(coalesce(max(obter_se_setor_evento(cd_setor_atendimento)),'S'),1,1)
		into STRICT	ie_processo_alta_w
		from	atend_paciente_unidade
		where	nr_seq_interno = nr_seq_interno_w
		and	nr_atendimento = nr_atendimento_p;

		if (ie_processo_alta_w = 'S') then /* Rafael em 12/03/2007 OS51338 */
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_processo_alta(nr_atendimento_p, cd_processo_alta_p, nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;
		wheb_usuario_pck.set_ie_commit('N');
		CALL ajustar_mapa_dieta(nr_atendimento_p, nm_usuario_p);
		wheb_usuario_pck.set_ie_commit('S');

		select	somente_numero(max(coalesce(obter_valor_param_usuario(1000, 35, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'0')))
		into STRICT	qt_minutos_w
		;

		if (qt_minutos_w > 0) then
			open c05;
			loop
			fetch c05 into
				nr_seq_dieta_w,
				dt_dieta_exe_w;
			EXIT WHEN NOT FOUND; /* apply on c05 */
				begin

				if (dt_dieta_exe_w IS NOT NULL AND dt_dieta_exe_w::text <> '') and
					(dt_dieta_exe_w > (dt_alta_p + (qt_minutos_w/1440))) then

					delete	FROM mapa_dieta
					where	nr_sequencia = nr_seq_dieta_w;
				end if;


				end;
			end loop;
			close c05;
		end if;


		/* Jerusa em 23/10/2008 OS 108028 */

		if (ie_saida_visitante_w = 'S') then
			update	atendimento_visita
			set	dt_saida 	= clock_timestamp(),
				dt_atualizacao	= clock_timestamp(),
				ie_status = 'F',
				nm_usuario_saida = nm_usuario_p,
				nm_usuario	= nm_usuario_p
			where	nr_atendimento	= nr_atendimento_p
			and	coalesce(dt_saida::text, '') = '';
		end if;


		if	((ie_tipo_convenio_w <> 3) or (ie_lanc_auto_sus_alta_w	= 'S')) and (ie_censo_diario_w = 'S') then
			begin
			wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_taxa_servico(36, nr_atendimento_p, 0);
			CALL gerar_lancamento_automatico(
				nr_atendimento_p, null, 36, nm_usuario_p, null,null,null,null,null,null);
			wheb_usuario_pck.set_ie_commit('S');
			end;
		end if;
		wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_alerta_vencimento_conta(nr_atendimento_p,dt_alta_p,nm_usuario_p);
		wheb_usuario_pck.set_ie_commit('S');

		-- OS 142225 - Regra especial para o primeiro dia no caso de alta
		if	((ie_diaria_diferencia_w = 'S') or (ie_diaria_diferencia_w = 'P')) and (trunc(dt_alta_p - dt_entrada_w) = 0) then
			-- Gerar a diaria diferenciada para pacientes com alta no mesmo dia da internacao
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_diaria_dif_alta_dia(dt_entrada_w, dt_alta_p, nr_atendimento_p, nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		/* Elemar em 05/11/07 */

		wheb_usuario_pck.set_ie_commit('N');
		CALL tf_processar_ligacao(cd_estabelecimento_w, 'S', null, nr_atendimento_p, nm_usuario_p);
		wheb_usuario_pck.set_ie_commit('S');

		/* Elemar em 11/03/04 */

		update	conta_paciente
		set	ds_inconsistencia = retirar_inconsistencia(ds_inconsistencia,'1')
		where	nr_atendimento = nr_atendimento_p;

		select	coalesce(max(1),0)
		into STRICT	qt_regra_dia_horario_w
		from	regra_tx_dia_horario;

		if (coalesce(qt_regra_dia_horario_w,0) > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_taxa_dia_horario(nm_usuario_p, nr_atendimento_p, dt_alta_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		select	coalesce(max(1),0)
		into STRICT	qt_regra_taxa_repouso_w
		from	conv_regra_taxa_repouso;

		if (coalesce(qt_regra_taxa_repouso_w,0) > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_regra_taxa_repouso(nr_atendimento_p, dt_alta_p, nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		select	coalesce(max(1),0)
		into STRICT	qt_regra_taxa_uso_w
		from	regra_cobranca_taxa;

		if (coalesce(qt_regra_taxa_uso_w,0) > 0) and (ie_alta_estorno_p = 'A') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_proced_cobranca_taxa(nr_atendimento_p, nm_usuario_p);
			CALL gerar_atend_cobranca_taxa(nr_atendimento_p, 'F', nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;
		
		select	coalesce(max(1),0)
		into STRICT	qt_regra_alta_tx_diaria_w
		from	conv_regra_alta_tx_diaria;
		
		if (coalesce(qt_regra_alta_tx_diaria_w,0) > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_regra_alta_tx_diaria(nr_atendimento_p, dt_alta_p, nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		ie_entrou_fecha_contas_w:= 'N';

		if	((ie_fechar_conta_ps_alta_w = 'N' AND ie_tipo_atendimento_w <> 3) or
			(ie_fechar_conta_ps_alta_w = 'S' AND ie_tipo_atendimento_w <> 1)) or (ie_fechar_conta_ps_alta_w		= 'A')	or
			((ie_fechar_conta_ps_alta_w	= 'R') and (obter_se_finaliza_atend(nr_atendimento_p,cd_motivo_alta_p) = 'S'))	then

			ie_entrou_fecha_contas_w:= 'S';			

			if (coalesce(ie_forma_fechamento_w,'A') = 'A') then
				CALL wheb_usuario_pck.set_ie_commit('N');
				ds_erro_w := finalizar_atendimento(nr_atendimento_p, ie_fechar_conta_alta_w, nm_usuario_p, ds_erro_w);
				wheb_usuario_pck.set_ie_commit('S');
			elsif (coalesce(ie_forma_fechamento_w,'A') = 'C') then
				open C16;
				loop
				fetch C16 into
					nr_interno_conta_ww;
				EXIT WHEN NOT FOUND; /* apply on C16 */
				begin
				wheb_usuario_pck.set_ie_commit('N');
				ds_erro_www := fechar_conta_paciente(nr_interno_conta_ww, nr_atendimento_p, '2', nm_usuario_p, ds_erro_www);
				wheb_usuario_pck.set_ie_commit('S');
				end;
				end loop;
				close C16;
			end if;		
		elsif (ie_fechar_conta_ps_alta_w = 'C') then
			open C16;
			loop
			fetch C16 into
				nr_interno_conta_ww;
			EXIT WHEN NOT FOUND; /* apply on C16 */
			begin
			CALL recalcular_conta_paciente(nr_interno_conta_ww,nm_usuario_p);
			end;
			end loop;
			close C16;
		end if;
		/* Incluido campo ie_gera_novo_atend  Bola 08072002 */

		if (ie_gera_novo_atend_w = 'S') then
			begin
			select	coalesce(max(1),0)
			into STRICT	qt_reg_w
			from	atendimento_paciente
			where	nr_atend_alta	= nr_atendimento_p;
			
			select	coalesce(max(1),0)
			into STRICT	qt_reg_conv_w
			from	motivo_alta_atend_conv
			where	cd_motivo_alta = cd_motivo_alta_p;
			
			if (qt_reg_w	= 0) then
				if (qt_reg_conv_w = 0) then
					CALL wheb_usuario_pck.set_ie_commit('N');
					CALL gerar_alta_administrativa(nr_atendimento_p,nm_usuario_p);
					wheb_usuario_pck.set_ie_commit('S');
				else
					begin
					select	max(obter_convenio_atendimento(nr_atendimento_p)),
							max(substr(obter_categoria_atendimento(nr_atendimento_p),1,10))
					into STRICT	cd_convenio_w,
							cd_categoria_w
					;
					
					select	coalesce(max(1),0)
					into STRICT	qt_reg_conv_w
					from	motivo_alta_atend_conv
					where	cd_motivo_alta = cd_motivo_alta_p
					and		cd_convenio = cd_convenio_w
					and 	coalesce(cd_categoria, cd_categoria_w) = cd_categoria_w;
					
					if (qt_reg_conv_w = 0) then
						CALL wheb_usuario_pck.set_ie_commit('N');
						CALL gerar_alta_administrativa(nr_atendimento_p,nm_usuario_p);
						wheb_usuario_pck.set_ie_commit('S');
					else
						begin
						select	max(coalesce(ie_permite,'N'))
						into STRICT	ie_permite_w
						from	motivo_alta_atend_conv
						where	cd_motivo_alta = cd_motivo_alta_p
						and		cd_convenio = cd_convenio_w
						and 	coalesce(cd_categoria, cd_categoria_w) = cd_categoria_w;
						
						if (ie_permite_w = 'S') then
							CALL wheb_usuario_pck.set_ie_commit('N');
							CALL gerar_alta_administrativa(nr_atendimento_p,nm_usuario_p);
							wheb_usuario_pck.set_ie_commit('S');
						end if;
						end;
					end if;
					end;
				end if;
			end if;
			end;
		end if;

		if (ie_tipo_convenio_w <> 3) and (ie_gera_proc_cih_w = 'S') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_procedimento_cih_atend(nr_atendimento_p, nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		ie_status_lib_aut_acomp_w := obter_param_usuario(3111, 53, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_status_lib_aut_acomp_w);
		
		/*Maico Sandri 05/04/2007 OS53864*/

		if (ie_lib_aut_acomp_w = 'S') then
			begin
			
			select	coalesce(max(1),0)
			into STRICT	qt_atend_acomp_w
			from	atendimento_acompanhante
			where 	coalesce(dt_saida::text, '') = ''
			and	nr_atendimento	= nr_atendimento_p;
			
			if (qt_atend_acomp_w > 0) then
				update	atendimento_acompanhante
				set	dt_saida	= dt_alta_p
				where 	nr_atendimento	= nr_atendimento_p
                and     coalesce(dt_saida::text, '') = '';
			end if;

			if (ie_status_lib_aut_acomp_w ='S' and coalesce(ie_motivo_obito_w, 'N') = 'N') then
				update	unidade_atendimento
				set	ie_status_unidade 	= 'A' ,
					nr_atendimento_acomp 	 = NULL,
					nm_usuario 		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					cd_paciente_reserva  = NULL,
					nm_pac_reserva  = NULL
				where	nr_atendimento_acomp = nr_atendimento_p;
			elsif (ie_status_lib_aut_acomp_w = 'N' and coalesce(ie_motivo_obito_w, 'N') = 'N') then
				update	unidade_atendimento
				set	ie_status_unidade 	= 'H' ,
					nr_atendimento_acomp 	 = NULL,
					nm_usuario 		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					cd_paciente_reserva  = NULL,
					nm_pac_reserva  = NULL
				where	nr_atendimento_acomp = nr_atendimento_p;

				if (coalesce(cd_motivo_alta_p,0) > 0) then

					select 	coalesce(max(ie_controla_higienizacao),'S')
					into STRICT	ie_controla_higienizacao_w
					from	motivo_alta
					where	cd_motivo_alta = cd_motivo_alta_p
					and (cd_perfil = coalesce(obter_perfil_ativo,cd_perfil) or coalesce(cd_perfil::text, '') = '');

				end if;
			elsif (ie_status_lib_aut_acomp_w ='A' and coalesce(ie_motivo_obito_w, 'N') = 'N') then


				update	unidade_atendimento
				set	ie_status_unidade 	= 'G' ,
					nr_atendimento_acomp 	 = NULL,
					nm_usuario 		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					cd_paciente_reserva  = NULL,
					nm_pac_reserva  = NULL
				where	nr_atendimento_acomp = nr_atendimento_p;

			elsif (ie_status_lib_aut_acomp_w ='L' and coalesce(ie_motivo_obito_w, 'N') = 'N') then
				update	unidade_atendimento
				set	ie_status_unidade 	= 'L' ,
					nr_atendimento_acomp 	  = NULL,
					nm_usuario 				 = nm_usuario_p,
					dt_atualizacao			 = clock_timestamp(),
					cd_paciente_reserva  = NULL,
					nm_pac_reserva  = NULL
				where	nr_atendimento_acomp = nr_atendimento_p;
				
				wheb_usuario_pck.set_ie_commit('N');
				CALL bloquear_leitos_livres(cd_setor_atendimento_w,
										 cd_unidade_basica_w,
										 nm_paciente_w,
										 nr_atendimento_p,
										 nm_usuario_p,
										 cd_estabelecimento_w,
										 'D',
										 null);
				wheb_usuario_pck.set_ie_commit('S');
			end if;
			end;
		end if;

		select 	coalesce(max(ie_finalizar_trat_alta_obito),'N'),
			coalesce(max(nr_seq_motivo_fim_tratamento),0),
			coalesce(max(ie_enviar_comunic_alta_obito),'N'),
			coalesce(max(cd_perfil_comunic_alta_obito),0)
		into STRICT	ie_finalizar_trat_alta_obito_w,
			nr_seq_motivo_fim_tratamento_w,
			ie_enviar_comunic_alta_obito_w,
			cd_perfil_comunic_alta_obito_w
		from 	parametro_medico
		where 	cd_estabelecimento = cd_estabelecimento_w;

		if (obter_se_motivo_alta_obito(cd_motivo_alta_p) = 'S') then
			if (ie_finalizar_trat_alta_obito_w = 'S') and (nr_seq_motivo_fim_tratamento_w > 0) then

				update	paciente_tratamento
				set 	dt_final_tratamento = dt_alta_p,
					nr_seq_motivo_fim = nr_seq_motivo_fim_tratamento_w
				where	coalesce(dt_final_tratamento::text, '') = ''
				and	cd_pessoa_fisica = cd_pessoa_fisica_w;
			end if;
			if (ie_enviar_comunic_alta_obito_w = 'S') and (cd_perfil_comunic_alta_obito_w > 0) then
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL gerar_comunic_padrao(clock_timestamp(),
							wheb_mensagem_pck.get_texto(307546), -- Alta Paciente
							wheb_mensagem_pck.get_texto(307547, 'NM_PACIENTE_W=' || nm_paciente_w || ';' ||
																'NR_ATENDIMENTO_P=' || nr_atendimento_p),
							/*
								Paciente NM_PACIENTE_W teve alta por motivo de obito.
								Atendimento:  NR_ATENDIMENTO_P
							*/
							nm_usuario_p,
							'N',
							null,
							'N',
							null,
							cd_perfil_comunic_alta_obito_w || ',',
							cd_estabelecimento_w,
							null,
							clock_timestamp(),
							null,
							null);
				wheb_usuario_pck.set_ie_commit('S');
			end if;
			/* Dalcastagne em 05/08/2008 OS 103342 - Procedure registrar_retirada_disp_atend */

			wheb_usuario_pck.set_ie_commit('N');
			CALL registrar_retirada_disp_atend(nr_atendimento_p, nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;



		open c03;
		loop
		fetch c03 into	nr_seq_agenda_w,
				ie_status_agenda_w,
				cd_tipo_agenda_w,
				ie_tipo_agenda_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
			insert into log_mov(cd_log,
					ds_log,
					dt_atualizacao,
					nm_usuario)
				values (22254,
					wheb_mensagem_pck.get_texto(307549, 'NR_ATENDIMENTO_P=' || nr_atendimento_p || ';' ||
														'IE_STATUS_AGENDA_W=' || ie_status_agenda_w || ';' ||
														'IE_MANTEM_STATUS_ALTA_W=' || ie_mantem_status_alta_w || ';' ||
														'CD_TIPO_AGENDA_W=' || cd_tipo_agenda_w),
					-- Atendimento NR_ATENDIMENTO_P, status agenda IE_STATUS_AGENDA_W, mantem status IE_MANTEM_STATUS_ALTA_W, tipo agenda CD_TIPO_AGENDA_W
					clock_timestamp(),
					nm_usuario_p);
			/*if	(ie_status_agenda_w = 'N') and --> Rafael em 14/4/8 OS89458 */

			if (ie_status_agenda_w not in ('C','B','F','I','II','E','O')) and
				((ie_mantem_status_alta_w = 'S') or (ie_mantem_status_alta_nova_w = 'S')) and (cd_tipo_agenda_w = 3) then
				update	agenda_consulta
				set	ie_status_agenda	= 'A'
				where	nr_sequencia		= nr_seq_agenda_w;
			elsif	((ie_status_agenda_w = 'O') or (dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') or (cd_tipo_agenda_w = 5)) and (ie_status_agenda_w not in ('C','B','E')) then /* Rafael em 11/06/2007 OS 41208 inclui o teste referente aos status 'C' e 'B' */
				if      ((coalesce(atualizar_status_w,'S') = 'S') or
					((coalesce(atualizar_status_w,'I') = 'I') and (ie_tipo_atendimento_w <> '1')))then
					begin
					update	agenda_consulta
					set	ie_status_agenda	= 'E',
						dt_atendido		= clock_timestamp(),
						nm_usuario_atendido	= nm_usuario_p,
						nm_usuario		= nm_usuario_p
					where	nr_sequencia		= nr_seq_agenda_w;
					exception
					when others then
						update	agenda_consulta
						set	dt_agenda = dt_agenda + 1/86400
						where	nr_sequencia = nr_seq_agenda_w;
					end;
				end if;
			end if;

			if (ie_status_agenda_w not in ('C','B','F','I','II')) then
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL executar_evento_agenda_alta('AGT',ie_tipo_agenda_w,nr_seq_agenda_w,cd_estabelecimento_w,nm_usuario_p);
				wheb_usuario_pck.set_ie_commit('S');
			end if;
		end loop;
		close c03;

		open c07;
		loop
		fetch c07 into
			nr_seq_agenda_pac_w,
			ie_status_agenda_pac_w,
			cd_tipo_agenda_pac_w,
			ie_tipo_agenda_pac_w;
		EXIT WHEN NOT FOUND; /* apply on c07 */
			begin
			wheb_usuario_pck.set_ie_commit('N');
			CALL executar_evento_agenda_alta('AGT',ie_tipo_agenda_pac_w,nr_seq_agenda_pac_w,cd_estabelecimento_w,nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
			end;
		end loop;
		close c07;


		select	coalesce(max(1),0)
		into STRICT	qt_reg_w
		from	atend_paciente_unidade a,
				unidade_atendimento b
		where	a.nr_atendimento	= nr_atendimento_p
		and		a.cd_setor_atendimento = b.cd_setor_atendimento
		and		a.CD_UNIDADE_BASICA = b.CD_UNIDADE_BASICA
		and		a.CD_UNIDADE_COMPL =  b.CD_UNIDADE_COMPL
		and		b.IE_LEITO_MONITORADO = 'S';

ie_gerar_adt_a03_w := Obter_param_Usuario(3111, 337, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_gerar_adt_a03_w);
		/* rafaaaaa */

		if ((ie_leito_monit_w = 'S')	or (ie_setor_rothman_w	= 'S') or (qt_reg_w	> 0)) and (coalesce(ie_gerar_adt_a03_w, 'A') = 'A') then

			ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
						'nr_seq_interno=' || nr_seq_interno_w || ds_sep_bv_w||
						'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w;
			wheb_usuario_pck.set_ie_commit('N');
			CALL gravar_agend_integracao(69, ds_param_integ_hl7_w,cd_setor_atendimento_w);
			wheb_usuario_pck.set_ie_commit('S');
			
			CALL call_bifrost_content('patient.discharge.monitor','encounter_json_pck.get_encounter_message_clob('||nr_atendimento_p||')', nm_usuario_p);
			wheb_usuario_pck.set_ie_commit('S');
			
		end if;
		
		/* (Germany) Standard */

		ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
					'nr_seq_interno=' || nr_seq_interno_w || ds_sep_bv_w||
					'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w;

		if (substr(l10nger_integrar_adt_orm(cd_pessoa_fisica_w, nr_atendimento_p, null, null),1,1) = 'S') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gravar_agend_integracao(646, ds_param_integ_hl7_w, cd_setor_atendimento_w);/*Tasy -> Third-party (ADT_A03)*/
			wheb_usuario_pck.set_ie_commit('S');
		end if;

ie_gerar_adt_a03_evn4_w := Obter_param_Usuario(3111, 338, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_gerar_adt_a03_evn4_w);
		if (cd_classif_setor_w in (3,4,5)
		and coalesce(ie_gerar_adt_a03_evn4_w, 'A') = 'A') then
			begin
			ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
						'nr_seq_interno=' || nr_seq_interno_w || ds_sep_bv_w||
						'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w;
			wheb_usuario_pck.set_ie_commit('N');
			CALL gravar_agend_integracao(4, ds_param_integ_hl7_w,cd_setor_atendimento_w);
			wheb_usuario_pck.set_ie_commit('S');
			end;
		end if;

		ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
					'nr_seq_interno=' || nr_seq_interno_w || ds_sep_bv_w||
					'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w;
					
		wheb_usuario_pck.set_ie_commit('N');
		CALL gravar_agend_integracao(424, ds_param_integ_hl7_w,cd_setor_atendimento_w);		
		CALL gravar_agend_integracao(712, ds_param_integ_hl7_w,cd_setor_atendimento_w);		
		CALL gravar_agend_integracao(781, ds_param_integ_hl7_w,cd_setor_atendimento_w); /* Tasy -> SCC (ADT_A03) - Patient discharge */

				
		--Migrated from tasy-interface to PL/SQL Packages.
		CALL call_bifrost_content('patient.discharge','encounter_json_pck.get_encounter_message_clob('||nr_atendimento_p||')', nm_usuario_p);
		wheb_usuario_pck.set_ie_commit('S');

		wheb_usuario_pck.set_ie_commit('N');
		CALL call_interface_file(934, 'carestream_ris_japan_l10n_pck.patient_discharge_info ('|| nr_atendimento_p || ',''3K'' , 1, ''' || nm_usuario_p || ''' , 0, null, ' || cd_estabelecimento_w || ' ,''N'');' , nm_usuario_p);
		wheb_usuario_pck.set_ie_commit('S');

		wheb_usuario_pck.set_ie_commit('N');
		CALL call_interface_file(948, 'tosho_pck.patient_discharge_info ('|| nr_atendimento_p || ',''3K'' , 1, ''' || nm_usuario_p || ''' , 0, null, ' || cd_estabelecimento_w || ', ''N'');' , nm_usuario_p);
		wheb_usuario_pck.set_ie_commit('S');
		
		if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then 		-- Locale Japan Check		
            ds_param_integration_w :=  '{"recordId" : "' || nr_atendimento_p|| '"' || '}';
            CALL execute_bifrost_integration(253,ds_param_integration_w);
        end if;

		if (ie_atualiza_data_item_alta_w = 'S') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL Atualizar_data_alta_items(nr_atendimento_p,dt_alta_p);
			wheb_usuario_pck.set_ie_commit('S');
		end if;

		if (ie_atualiza_apos_alta_w <> 'N') then

			select	coalesce(max(1),0)
			into STRICT	qt_registro_conta_w
			from 	procedimento_paciente 	x,
					conta_paciente		y where		x.nr_interno_conta = y.nr_interno_conta
			and 	y.nr_atendimento   = nr_atendimento_p
			and 	x.dt_conta > dt_alta_p LIMIT 1;

			if (qt_registro_conta_w = 0) then
				select	coalesce(max(1),0)
				into STRICT	qt_registro_conta_w
				from 	material_atend_paciente x,
						conta_paciente		y where		x.nr_interno_conta = y.nr_interno_conta
				and 	y.nr_atendimento   = nr_atendimento_p
				and 	x.dt_conta > dt_alta_p LIMIT 1;

				if (qt_registro_conta_w = 0) then

					if (ie_atualiza_apos_alta_w <> 'U') then
						begin
						update	conta_paciente a
						set		a.dt_periodo_final = dt_alta_p
						where 	a.nr_atendimento = nr_atendimento_p
						and 	((ie_atualiza_apos_alta_w = 'S') or (ie_atualiza_apos_alta_w = 'P' AND a.dt_periodo_final > dt_alta_p))
						and 	a.ie_status_acerto = 1;
						end;
					else
						begin
						
						select	coalesce(max(nr_interno_conta),0)
						into STRICT	nr_max_interno_conta_w
						from	conta_paciente
						where	ie_status_acerto = 1
						and	nr_atendimento = nr_atendimento_p;
						
						update	conta_paciente a
						set	a.dt_periodo_final = dt_alta_p
						where 	a.nr_atendimento = nr_atendimento_p
						and	a.nr_interno_conta = nr_max_interno_conta_w;

						end;
					end if;

				end if;
			end if;
		end if;

		end;

		select	ie_transferencia,
			cd_motivo_alta
		into STRICT	ie_transferencia_w,
			cd_motivo_alta_w
		from	motivo_alta
		where 	cd_motivo_alta = cd_motivo_alta_p;
		if (ie_transferencia_w = 'S') then
			begin
			if (nr_seq_motivo_p > 0) and (cd_cgc_p IS NOT NULL AND cd_cgc_p::text <> '') then
				select 	nextval('atendimento_transf_seq')
				into STRICT	nr_seq_transf_w
				;
				insert into 	atendimento_transf(nr_sequencia,
						nr_atendimento,
						dt_atualizacao,
						nm_usuario,
						cd_cgc,
						cd_cgc_transporte,
						nr_seq_motivo,
						ds_observacao,
						ie_situacao)
				values (nr_seq_transf_w,
						nr_atendimento_p,
	        				clock_timestamp(),
						nm_usuario_p,
						cd_cgc_p,
						cd_cgc_transporte_p,
						CASE WHEN nr_seq_motivo_p=0 THEN null  ELSE nr_seq_motivo_p END ,
						ds_observacao_p,
						'A');
			end if;
			end;
		end if;
	end if;

	open c02;
	loop
	fetch c02 into
		nr_interno_conta_w,
		cd_convenio_parametro_w,
		cd_categoria_parametro_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL tiss_atualizar_conta_paciente(nr_interno_conta_w, null, 'N', cd_estabelecimento_w, nm_usuario_p, null, null);
		CALL wheb_usuario_pck.set_ie_commit('S');

		if (ie_entrou_fecha_contas_w = 'S') and (ie_AtualizaTISSaoFecharConta_w <> 'N') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL tiss_atualizar_prot_conta(null, nr_interno_conta_w, null, null, 'N', null, nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;
		

	end loop;
	close c02;


	/*thlima - OS 254605*/

	if	(((ie_retirar_pc_isolamento_w = 'S') or ((ie_retirar_pc_isolamento_w = 'O') and (obter_se_motivo_alta_obito(cd_motivo_alta_p) = 'S'))) and (coalesce(ds_erro_p::text, '') = '')) then
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_atendimento_precaucao(0,nr_atendimento_p,'T',0,nm_usuario_p,null,null,null,'T');
		CALL gerar_motivo_isolamento(nr_atendimento_p,null,nm_usuario_p,'T',null,null,null);
		CALL wheb_usuario_pck.set_ie_commit('S');
	end if;

	begin
	ds_log_w := substr( ' 2 ' ||wheb_mensagem_pck.get_texto(307540,	'DS_FUNCAO=' || obter_funcao_ativa || ';' ||
																	'DS_PERFIL=' || obter_perfil_ativo || ';' ||
																	'NR_ATENDIMENTO_P=' || nr_atendimento_p || ';' ||
																	'DS_CALLSTACK=' || dbms_utility.format_call_stack),1,1500);
																/*
																	 2 Funcao ativa : DS_FUNCAO
																	 Perfil ativa : DS_PERFIL
																	 Atendimento  : NR_ATENDIMENTO_P
																	 CallStack: 
																	 DS_CALLSTACK
																*/
	insert into log_mov(
		dt_atualizacao,
		nm_usuario,
		cd_log,
		ds_log)
	values (
		clock_timestamp(),
		nm_usuario_p,
		88910,
		ds_log_w);

	exception
		when others then
		ds_log_w	:=	'';
	end;

	/*Fabio e Jonas 06/05/2009 */

	if (coalesce(ds_erro_p::text, '') = '') then
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_ajustes_ap_lote('A', nr_atendimento_p, nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
	else
		begin
		ds_log_w := substr(	WHEB_MENSAGEM_PCK.get_texto(279215,'DS_ERRO='|| ds_erro_p
			||';CD_FUNCAO='	|| obter_funcao_ativa||';CD_ATIVO='
			|| obter_perfil_ativo||';NR_ATENDIMENTO='|| nr_atendimento_p)
			|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,1500);


		insert into log_mov(
			dt_atualizacao,
			nm_usuario,
			cd_log,
			ds_log)
		values (
			clock_timestamp(),
			nm_usuario_p,
			88910,
			ds_log_w);

		exception
			when others then
			ds_log_w	:=	'';
		end;
	end if;
	
	--lhalves OS 846035 em 14/07/2015 - Atualizar dt previsao conta protocolo, conforme a regra Shift + F11 / Regra previsao de entrada da conta em protocolo
	begin
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL ATUALIZAR_PREV_CONTA_PROT(nr_atendimento_p,null, dt_alta_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
	exception
	when others then
		CALL wheb_usuario_pck.set_ie_commit('S');
	end;	

	if (coalesce(ds_erro_p::text, '') = '') then
		ie_susp_adep_w := Obter_param_Usuario(1113, 205, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_ww, ie_susp_adep_w);
		if (coalesce(ie_susp_adep_w,'N') <> 'N') and
			((coalesce(ie_susp_adep_w,'N') <> 'A') or (obter_se_motivo_alta_obito(cd_motivo_alta_p) = 'S')) then --OS161972
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_suspensao_itens_adep(nr_atendimento_p, nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;
	end if;

	if (coalesce(ie_susp_itens_SAE_w,'N') <> 'N') and
		((coalesce(ie_susp_itens_SAE_w,'N') <> 'A') or (obter_se_motivo_alta_obito(cd_motivo_alta_p) = 'S')) then
		begin
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL Gerar_Suspensao_Itens_SAE(nr_atendimento_p, nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		exception when others then
			CALL wheb_usuario_pck.set_ie_commit('S');
		end;
	end if;

	if (ie_cancelar_autor_alta_w = 'S') then --lhalves OS270307 em 2/12/2010
		select	coalesce(max(1),0)
		into STRICT	qt_autor_w
		from	estagio_autorizacao b,
				autorizacao_convenio a where		a.nr_seq_estagio	= b.nr_sequencia
		and		b.ie_interno		= '1'
		and		a.nr_atendimento	= nr_atendimento_p LIMIT 1;

		if (qt_autor_w > 0) then
			select	max(nr_sequencia)
			into STRICT	nr_seq_estagio_w
			from	estagio_autorizacao
			where	ie_interno	= '70'
			and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;

			if (nr_seq_estagio_w IS NOT NULL AND nr_seq_estagio_w::text <> '') then

				open c09;
				loop
				fetch c09 into
					nr_sequencia_autor_w;
				EXIT WHEN NOT FOUND; /* apply on c09 */
					CALL wheb_usuario_pck.set_ie_commit('N');
					CALL atualizar_autorizacao_convenio(nr_sequencia_autor_w,nm_usuario_p,nr_seq_estagio_w,'N','N','S');
					CALL wheb_usuario_pck.set_ie_commit('S');
				end loop;
				close c09;
			end if;
		end if;
	end if;
	CALL wheb_usuario_pck.set_ie_commit('N');
	CALL atual_fim_credenciamento_pf(nr_atendimento_p, cd_pessoa_fisica_w, cd_medico_resp_w, cd_estabelecimento_w, dt_alta_p, 'A', nm_usuario_p);
	CALL wheb_usuario_pck.set_ie_commit('S');

	if (coalesce(ds_erro_p::text, '') = '') then
		begin
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_email_regra_alta(nr_atendimento_p, cd_estabelecimento_w, nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		exception
			when	others then
				CALL wheb_usuario_pck.set_ie_commit('S');
		end;
	end if;


	if	((ie_verifica_precaucoes_pend_w = 'S') and (coalesce(ds_erro_p::text, '') = '')) then
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL verifica_precaucoes_pendentes(nm_usuario_p,nr_atendimento_p,dt_alta_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
	end if;

	if (coalesce(ie_saida_visita_acomp_w,'N')	=	'S')	then
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL Gerar_saida_visita_acomp(nr_atendimento_p,nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
	end if;


	if (ie_evasao_w = 'S') then
		ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ';';
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gravar_agend_integracao(373, ds_param_integ_hl7_w);
		CALL wheb_usuario_pck.set_ie_commit('S');
	end if;
	
	if (ie_alta_estorno_p = 'A') and (cd_motivo_alta_p IS NOT NULL AND cd_motivo_alta_p::text <> '') then
		begin
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL enviar_ci_alta(cd_motivo_alta_p, nm_usuario_p, nr_atendimento_p, dt_alta_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
		end;
	end if;	
	
	if (ie_gerar_saida_real_w = 'S' and coalesce(ds_erro_p::text, '') = '') then
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_saida_real(nm_usuario_p, nr_atendimento_p, dt_alta_p, wheb_mensagem_pck.get_texto(292555, null));
		CALL wheb_usuario_pck.set_ie_commit('S');
	end if;
	
	-- Rotina integracao Swisslog / SupplyPoint / Integracao padrao
	CALL wheb_usuario_pck.set_ie_commit('N');
	CALL swisslog_movimentacao_pac(nr_atendimento_p,0,cd_setor_atendimento_w,2,nm_usuario_p);
	CALL intpd_lote_movimentacao_pac(nr_atendimento_p,0,cd_setor_atendimento_w,2,nm_usuario_p);

	SELECT CASE WHEN coalesce(max(1),0)=0 THEN  'N'  ELSE 'S' END
	INTO STRICT ie_setor_supply_w
	FROM far_setores_integracao
	WHERE nr_seq_empresa_int = 82
	AND cd_setor_atendimento = cd_setor_atendimento_w  LIMIT 1;

	if (ie_setor_supply_w = 'S') then
		CALL supplypoint_mov_pac(nr_atendimento_p,0,cd_setor_atendimento_w,2,nm_usuario_p);
	end if;

	SELECT CASE WHEN coalesce(max(1),0)=0 THEN  'N'  ELSE 'S' END
	INTO STRICT ie_setor_athena_w
	FROM far_setores_integracao
	WHERE nr_seq_empresa_int = 221
	AND cd_setor_atendimento = cd_setor_atendimento_w  LIMIT 1;

	if (ie_setor_athena_w = 'S') then
		  integracao_athena_disp_pck.movimentacao_paciente(nr_atendimento_p,0,cd_setor_atendimento_w,2,nm_usuario_p);
	end if;

	CALL wheb_usuario_pck.set_ie_commit('S');
	end;
	
	update	nut_alerta
	set	dt_fim_vigencia = clock_timestamp()
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	and	(dt_inicio_vigencia IS NOT NULL AND dt_inicio_vigencia::text <> '')
	and	ie_somente_atend = 'S';
	
	open C18;
	loop
	fetch C18 into nr_seq_pessoa_classif_w;
	EXIT WHEN NOT FOUND; /* apply on C18 */
		update 	pessoa_classif
		set 	--IE_SITUACAO = 'I',
			DT_ATUALIZACAO = clock_timestamp(),
			NM_USUARIO = nm_usuario_p,
			DT_FINAL_VIGENCIA =
			dt_alta_p
		where 	nr_sequencia = nr_seq_pessoa_classif_w;
	end loop;
	close C18;

    open C20;
	loop
	fetch C20 into ds_mensagem_sms_w,
			nr_seq_regra_envio_w;
	EXIT WHEN NOT FOUND; /* apply on C20 */
		
		select  coalesce(max(1),0)
		into STRICT 	qt_retorno_pac_w
		from    atend_regra_sms c
		where   c.nr_atendimento = nr_atendimento_p
		and     c.ie_envio_retorno = 'R';
		
		if (qt_retorno_pac_w < 2) then 			
			ie_utilizar_ddi_w := OBTER_VALOR_PARAM_USUARIO(0,214,0,obter_usuario_ativo,obter_estabelecimento_ativo);
			
			select	CASE WHEN ie_utilizar_ddi_w='S' THEN substr(max(obter_dados_pf(cd_pessoa_fisica_w,'TCD')),1,15)  ELSE substr(max(obter_dados_pf(cd_pessoa_fisica_w,'TCI')),1,15) END
			into STRICT	nr_telefone_w
			;
			
			ds_remetente_w := substr(obter_nome_estabelecimento(cd_estabelecimento_ww),1,255);
			ds_mensagem_sms_w	:= substr(replace(ds_mensagem_sms_w, '@paciente', obter_nome_pf(cd_pessoa_fisica_w)),1,140);
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL enviar_sms_atend(ds_remetente_w	,nr_telefone_w, ds_mensagem_sms_w, nr_seq_regra_envio_w, nr_atendimento_p, 'E', nm_usuario_p, 'S');
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;
	end loop;
	close C20;
	
	/* Gerar Alta Acompanhante BDM3 FR6 Austria */
				
    FOR c22_w IN c22 LOOP
		BEGIN
			CALL wheb_usuario_pck.set_ie_commit('N');
			ds_erro_p := gerar_estornar_alta(c22_w.nr_atend_acompanhante, ie_alta_estorno_p, cd_processo_alta_p, cd_motivo_alta_p, dt_alta_p, nm_usuario_p, ds_erro_p, nr_seq_motivo_p, cd_cgc_p, ds_observacao_p, cd_cgc_transporte_p, nr_seq_motivo_est_alta_p, cd_contract_hosp_p, cd_contract_role_p, cd_contract_type_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		END;
	END LOOP;
else/*Desfazer alta*/
	begin
			
	if (permite_desfazer_alta_w = 'N') and (obter_funcao_ativa = 3111)	then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(209564);
	end if;	
	
	if (permite_desfazer_alta_w = 'ST') and (dt_alta_tesouraria_w IS NOT NULL AND dt_alta_tesouraria_w::text <> '') and (obter_funcao_ativa = 3111) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(1055735);
		/*Este atendimento ja possui alta de tesouraria, portanto nao e permitido estornar a alta medica.*/

	end if;


	if (cd_setor_desfazer_alta_w IS NOT NULL AND cd_setor_desfazer_alta_w::text <> '') then

		select	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_setor_diferente_w
		
		where	obter_se_contido(cd_setor_atendimento_w, cd_setor_desfazer_alta_w) = 'S';


		if (coalesce(ie_setor_diferente_w,'S') = 'N') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(243424);
			/*
			Nao e possivel desfazer a alta para este paciente!
			Favor verificar o parametro[283]
			*/
		end if;

	end if;
	
	insert into atend_paciente_auxiliar(
		nr_sequencia,
		dt_atualizacao, 
		nm_usuario, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		nr_seq_motivo_est_alta, 
		nr_atendimento 
	) values (
		nextval('atend_paciente_auxiliar_seq'),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_motivo_est_alta_p,
		nr_atendimento_p);
	
	begin

	select	max(cd_convenio),
		max(cd_categoria)
	into STRICT	cd_convenio_atend_w,
		cd_categoria_atend_w
	from	atend_categoria_convenio
	where	nr_atendimento = nr_atendimento_p;
	exception  when others
		then
		cd_convenio_atend_w 	:=  0;
		cd_categoria_atend_w	:= '0';
	end;

	select 	max(cd_motivo_alta),
		max(dt_fim_conta)
	into STRICT	cd_motivo_alta_w,
		dt_fim_conta_w
	from	atendimento_paciente
	where 	nr_atendimento 	= nr_atendimento_p;

	if (dt_fim_conta_w IS NOT NULL AND dt_fim_conta_w::text <> '') and (ie_des_alta_atend_fechado_w = 'N') then
		--'Nao e permitido desfazer a alta para atedimentos fechados
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(200677);
	end if;

	if (obter_valor_param_usuario(916,663,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_w) = 'N') then
		select	max(nr_atendimento_mae)
		into STRICT	nr_atend_rn_mae_w
		from	atendimento_paciente
		where	nr_atendimento = nr_atendimento_p;

		if (nr_atend_rn_mae_w > 0) then
			--'Nao e permitido desfazer a alta para atedimentos de RN que estejam vinculados com o atendimento da mae! Parametro [663] da EUP'
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(200678);
		end if;
	end if;

	begin
	select 	b.ie_status_unidade,
		b.nr_atendimento
	into STRICT	ie_status_unidade_w,
		nr_atendimento_w
	from  	unidade_atendimento b,
		atend_paciente_unidade a
	where a.nr_atendimento 		= nr_atendimento_p
	and a.nr_seq_interno		= nr_seq_interno_w
	and a.cd_setor_atendimento	= b.cd_setor_atendimento
	and a.cd_unidade_basica		= b.cd_unidade_basica
	and a.cd_unidade_compl		= b.cd_unidade_compl;
	exception
		when others then
			begin
			ie_status_unidade_w	:= 'L';
			nr_atendimento_w		:= 0;
			end;
	end;

	if (ie_status_unidade_w	= 'P') and (nr_atendimento_w <> nr_atendimento_p) and (ie_nao_desfazer_alta_w = 'S') then
		ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(279198,null);
	else
		if (cd_motivo_alta_w IS NOT NULL AND cd_motivo_alta_w::text <> '') then

			select 	coalesce(max(cd_perfil_desfazer_alta),0),
				max(cd_estab_destino)
			into STRICT	cd_perfil_desfazer_alta_w,
				cd_estab_destino_w
			from	motivo_alta
			where 	cd_motivo_alta = cd_motivo_alta_w;

			if (cd_perfil_desfazer_alta_w > 0) then

				select 	max(nr_atendimento)
				into STRICT	nr_atendimento_gerado_w
				from	atendimento_paciente
				where 	nr_atend_alta 	= nr_atendimento_p;

				if (nr_atendimento_gerado_w IS NOT NULL AND nr_atendimento_gerado_w::text <> '') then

					ds_mensagem_w	:= wheb_mensagem_pck.get_texto(307552, 'NR_ATENDIMENTO_GERADO_W=' || nr_atendimento_gerado_w); -- Houve um atendimento gerado apartir da alta. Atendimento: NR_ATENDIMENTO_GERADO_W
				end if;

				insert into comunic_interna(
					dt_comunicado,
					ds_titulo,
					ds_comunicado,
					nm_usuario,
					dt_atualizacao,
					ie_geral,
					nm_usuario_destino,
					ds_perfil_adicional,
					nr_sequencia,
					ie_gerencial,
					dt_liberacao,
					cd_estab_destino
				) values (
					clock_timestamp(),
					wheb_mensagem_pck.get_texto(307554, 'NR_ATENDIMENTO_P=' || nr_atendimento_p), -- Desfeita alta do atendimento: NR_ATENDIMENTO_P
					wheb_mensagem_pck.get_texto(307556, 'NR_ATENDIMENTO_P=' || nr_atendimento_p || ';' ||
														'NM_PACIENTE=' || SUBSTR(obter_dados_atendimento(nr_atendimento_p,'NP'),1,255) || ';' ||
														'DS_SETOR_UNIDADE=' || substr(obter_unidade_atendimento(nr_atendimento_p,'A','SAU'),1,255) || ';' ||
														'DS_MENSAGEM_W=' || ds_mensagem_w),
														/*
															Desfeita alta do atendimento: NR_ATENDIMENTO_P
															Paciente: NM_PACIENTE
															Setor / Unidade: DS_SETOR_UNIDADE
															DS_MENSAGEM_W
														*/
					nm_usuario_p,
					clock_timestamp(),
					'N',
					'',
					cd_perfil_desfazer_alta_w||', ',
					nextval('comunic_interna_seq'),
					'N',
					clock_timestamp(),
					cd_estab_destino_w);
			end if;
		end if;

		/* Rafael em 19/10/2007 OS71929 */

		if (qt_hora_estorno_w > 0) then
			select (clock_timestamp() - dt_alta) * 24
			into STRICT	qt_hora_alta_w
			from	atendimento_paciente
			where	nr_atendimento = nr_atendimento_p;

			if (qt_hora_alta_w > qt_hora_estorno_w) then
				--'O numero maximo de horas permitido para o estorno de altas e de ' ||  to_char(qt_hora_estorno_w) || ' hora(s).' || chr(10) || 'Este atendimento teve alta ha ' || to_char(round(qt_hora_alta_w,1))  || ' hora(s) atras.');
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(200679,'QT_HORA_ESTORNO_P=' || to_char(qt_hora_estorno_w) || ';QT_HORA_ALTA_P=' || to_char(round((qt_hora_alta_w)::numeric,1)));
			end if;
		end if;
		/* Fim Rafael em 19/10/2007 OS71929 */



		/* Ao estonar a alta altera o status do lote novamente  - Jonas 14/05/2009 */

		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_ajustes_ap_lote('E', nr_atendimento_p, nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');

		/* Ivan em 09/04/2008 OS86929 */

		insert into log_mov(dt_atualizacao, nm_usuario, cd_log, ds_log)
		values (clock_timestamp(), nm_usuario_p, 1003, wheb_mensagem_pck.get_texto(307557, 'NR_ATENDIMENTO_P=' || nr_atendimento_p)); -- Inicio do estorno de alta do atendimento: NR_ATENDIMENTO_P
		begin


		ds_log_w := substr(wheb_mensagem_pck.get_texto(307558,	'DS_FUNCAO=' || obter_funcao_ativa || ';' ||
																'DS_CALLSTACK=' || dbms_utility.format_call_stack),1,1500);
					/*
						  Funcao ativa : DS_FUNCAO
						 CallStack: 
						 DS_CALLSTACK
					*/
		insert into log_mov(dt_atualizacao, nm_usuario, cd_log, ds_log)
		values (clock_timestamp(), nm_usuario_p, 55903, ds_log_w);

		exception
			when others then
			ds_log_w	:=	'';
		end;

		begin
			update	solicitacao_tasy_aghos
			set	cd_pessoa_fisica = cd_pessoa_fisica_w,
				ie_situacao = 'I'
			where	nr_atendimento = nr_atendimento_p;
		exception
			when	others then
				null;
		end;

		if (ie_desfazer_alta_w = 'S') and (ie_alta_estorno_p <> 'A') then

			begin
			ds_comando_w := ' begin ' ||
					' Gerar_Estornar_Alta_Medica(:nr_atendimento, ' ||
									' :ie_alta_estorno, ' ||
									' :cd_motivo_alta, ' ||
									' null, ' ||
									' :ds_observacao, ' ||
									' :nm_usuario, ' ||
									' :ie_gera_alta_rn); ' ||
					' end; ';
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL exec_sql_dinamico_bv('',ds_comando_w, 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
									'ie_alta_estorno=' || ie_Alta_Estorno_p || ds_sep_bv_w ||
									'cd_motivo_alta=' || cd_motivo_alta_p || ds_sep_bv_w ||
									'ds_observacao=' || ds_observacao_p || ds_sep_bv_w ||
									'nm_usuario=' || nm_usuario_p || ds_sep_bv_w ||
									'ie_gera_alta_rn=S' || ds_sep_bv_w );
			
			-- Rotina integracao Swisslog / SupplyPoint

			--swisslog_movimentacao_pac(nr_atendimento_p,0,cd_setor_atendimento_w,2,nm_usuario_p);
			CALL supplypoint_mov_pac(nr_atendimento_p,0,cd_setor_atendimento_w,4,nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
			end;

		end if;

		update	atendimento_paciente
		set 	dt_alta			 = NULL,
			cd_motivo_alta		 = NULL,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			nm_usuario_alta		 = NULL,
			ie_fim_conta		= 'A',
			ie_necropsia		 = NULL,
			dt_fim_conta		 = NULL,
			dt_saida_real		 = NULL,
			ds_obs_alta		= ds_observacao_p,
			cd_setor_obito           = NULL,
			nr_submotivo_alta 	 = NULL
		where	nr_atendimento 	= nr_atendimento_p;
		--HCOR ADT A13
		ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
								'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w;
		ds_param_integration_w := '{"PATIENT_ID" : "' || cd_pessoa_fisica_w || '"' ||
			' , "ENCOUNTER_ID" : ' || nr_atendimento_p || '}';
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gravar_agend_integracao(786, ds_param_integ_hl7_w,cd_setor_atendimento_w); /* Tasy -> SCC (ADT_A13) - Patient Cancel  */

		
		--Migrated from tasy-interface to PL/SQL Packages.
		CALL call_bifrost_content('patient.discharge.cancel','encounter_json_pck.get_encounter_message_clob('||nr_atendimento_p||')', nm_usuario_p);	
		CALL wheb_usuario_pck.set_ie_commit('S');

		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL call_interface_file(934, 'carestream_ris_japan_l10n_pck.patient_discharge_info ('|| nr_atendimento_p || ',''3L'' , 3, ''' || nm_usuario_p || ''' , 0, null, ' || cd_estabelecimento_w || ', ''N'');' , nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');

		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL call_interface_file(948, 'carestream_ris_japan_l10n_pck.patient_discharge_info ('|| nr_atendimento_p || ',''3L'' , 3, ''' || nm_usuario_p || ''' , 0, null, ' || cd_estabelecimento_w || ', ''N'');' , nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
		
		if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then 		-- Locale Japan Check		
            ds_param_integration_w :=  '{"recordId" : "' || nr_atendimento_p|| '"' || '}';
            CALL execute_bifrost_integration(253,ds_param_integration_w);
        end if;
		
		/*	desfazer alta	*/

		select 	max(ds_senha_internet)	
		into STRICT	ds_senha_w
		from	atendimento_paciente
		where	nr_atendimento 	= nr_atendimento_p;
		
		if (ds_senha_w IS NOT NULL AND ds_senha_w::text <> '') then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_senha_internet(nr_atendimento_p, null, null, null, ds_senha_w, '');
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;
		
		update	atendimento_transf
		set	ie_situacao = 'I'
		where 	nr_atendimento 	= nr_atendimento_p
		and	ie_situacao = 'A';

		/* Ivan em 09/04/2008 OS86929 */

		insert into log_mov(dt_atualizacao, nm_usuario, cd_log, ds_log)
		values (clock_timestamp(), nm_usuario_p, 1003, wheb_mensagem_pck.get_texto(307559, 	'NR_ATENDIMENTO_P=' || nr_atendimento_p || ';' ||
																					'NR_SEQ_INTERNO_W=' || nr_seq_interno_w));
				-- Processo de estorno da saida do paciente do setor do atendimento: NR_ATENDIMENTO_P, sequencia interna: NR_SEQ_INTERNO_W


/*	Marcus em 26/12/2005 OS  27697 do HSCPG */

		insert into log_mov(dt_atualizacao, nm_usuario, cd_log, ds_log)
		values (clock_timestamp(), nm_usuario_p, 1003, wheb_mensagem_pck.get_texto(307560,	'NR_ATENDIMENTO_P=' || nr_atendimento_p || ';' ||
																					'NM_USUARIO_W=' || nm_usuario_w || ';' ||
																					'DT_ATUALIZACAO_W=' || to_char(dt_atualizacao_w,'dd/mm/yyyy hh24:mi:ss')));
				-- Estorno de alta do atendimento: NR_ATENDIMENTO_P Usuario alta: NM_USUARIO_W Data alta: DT_ATUALIZACAO_W
		
		select 	coalesce(max(nr_seq_tipo_alerta),0)
		into STRICT 	nr_seq_tipo_alerta_des_w
		from 	motivo_alta_alerta
		where	cd_motivo_alta = cd_motivo_alta_w;

		if (nr_seq_tipo_alerta_des_w > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL inativar_alerta_atend_alta(nr_atendimento_p,nm_usuario_p,nr_seq_tipo_alerta_des_w,cd_motivo_alta_w);
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_etapa_desfazer_alta(nr_atendimento_p, nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');


		open c14;
		loop
		fetch c14 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c14 */
			begin
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL gerar_evento_paciente_trigger(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,null,nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');

			end;
		end loop;
		close c14;

		if (ie_status_unidade_w	= 'P') and (nr_atendimento_w <> nr_atendimento_p)	then
			/* Ivan em 09/04/2008 OS86929 */

			insert into log_mov(dt_atualizacao, nm_usuario, cd_log, ds_log)
			values (clock_timestamp(), nm_usuario_p, 1003, WHEB_MENSAGEM_PCK.get_texto(279219,'NR_ATENDIMENTO='||nr_atendimento_p||';NR_SEQ_INTERNO='||nr_seq_interno_w));

			ds_erro_p 	:= WHEB_MENSAGEM_PCK.get_texto(279198,null);
		elsif (nr_seq_interno_w IS NOT NULL AND nr_seq_interno_w::text <> '') then
			begin
			/* Ivan em 09/04/2008 OS86929 */

			insert into log_mov(dt_atualizacao, nm_usuario, cd_log, ds_log)
			values (clock_timestamp(), nm_usuario_p, 1003, WHEB_MENSAGEM_PCK.get_texto(279218,'NR_ATENDIMENTO='||nr_atendimento_p||';NR_SEQ_INTERNO='||nr_seq_interno_w));

			if (ie_novo_leito_w = 'N') then
				update 	atend_paciente_unidade
				set 	dt_saida_unidade	 = NULL,
					dt_atualizacao	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where 	nr_atendimento 	= nr_atendimento_p
				and	nr_seq_interno	= nr_seq_interno_w;
			end if;
			select	CASE WHEN coalesce(max(1),0)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_leito_monit_w
			from	unidade_atendimento a,
				atend_paciente_unidade b
			where	a.cd_setor_atendimento 	= b.cd_setor_atendimento
			and	a.cd_unidade_basica	= b.cd_unidade_basica
			and	a.cd_unidade_compl	= b.cd_unidade_compl
			and	b.nr_seq_interno	= nr_seq_interno_w
			and	a.ie_leito_monitorado 	= 'S';

			if (ie_leito_monit_w = 'S') or (ie_setor_rothman_w = 'S')then

				ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
							'nr_seq_interno=' || nr_seq_interno_w || ds_sep_bv_w||
							'cd_pessoa_fisica='||cd_pessoa_fisica_w ||ds_sep_bv_w;
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL gravar_agend_integracao(20, ds_param_integ_hl7_w,cd_setor_atendimento_w);
				CALL wheb_usuario_pck.set_ie_commit('S');
				
				CALL call_bifrost_content('patient.discharge.cancel.monitor','encounter_json_pck.get_encounter_message_clob('||nr_atendimento_p||')', nm_usuario_p);	
				CALL wheb_usuario_pck.set_ie_commit('S');
				
			end if;
			
			ds_param_integ_hl7_w :=	'cd_pessoa_fisica=' || cd_pessoa_fisica_w 	|| ds_sep_bv_w ||
						'nr_atendimento='   || nr_atendimento_p   	|| ds_sep_bv_w ||
						'nr_seq_interno='   || nr_seq_interno_w		|| ds_sep_bv_w;
					
            if (substr(l10nger_integrar_adt_orm(cd_pessoa_fisica_w, nr_atendimento_w, null, null),1,1) = 'S') then
		CALL wheb_usuario_pck.set_ie_commit('N');
                CALL gravar_agend_integracao(663, ds_param_integ_hl7_w,cd_setor_atendimento_w);
		CALL wheb_usuario_pck.set_ie_commit('S');
            end if;

			if (ie_arq_pyxis_w = 'S') then
				select	cd_setor_atendimento
				into STRICT	cd_setor_atend_w
				from	atend_paciente_unidade
				where	nr_seq_interno = nr_seq_interno_w
				and	nr_atendimento = nr_atendimento_p;

				if (dis_obter_regra_moviment('A',cd_setor_atend_w,null) = 'S') then
					CALL wheb_usuario_pck.set_ie_commit('N');
					CALL dis_gerar_arq_moviment(nr_atendimento_p);
					CALL wheb_usuario_pck.set_ie_commit('S');

					insert into dis_log_integracao(
							nr_sequencia,
							cd_estabelecimento,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							ds_historico)
						values (nextval('dis_log_integracao_seq'),
							cd_estabelecimento_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							WHEB_MENSAGEM_PCK.get_texto(279217,null));
				end if;
			end if;

			begin
			select	b.nr_seq_interno
			into STRICT	nr_seq_unidade_w
			from  	unidade_atendimento b,
				atend_paciente_unidade a
			where 	a.nr_atendimento 	= nr_atendimento_p
			and 	a.nr_seq_interno	= nr_seq_interno_w
			and 	a.cd_setor_atendimento	= b.cd_setor_atendimento
			and 	a.cd_unidade_basica	= b.cd_unidade_basica
			and 	a.cd_unidade_compl	= b.cd_unidade_compl;
			exception
				when others then
				nr_seq_unidade_w := null;
			end;

			if (nr_seq_unidade_w IS NOT NULL AND nr_seq_unidade_w::text <> '') then

				delete	from sl_unid_atend_hist
				where	nr_seq_unid_atend in (	SELECT 	nr_sequencia
								from	sl_unid_atend
								where	nr_seq_unidade	= nr_seq_unidade_w
								and	coalesce(dt_inicio::text, '') = ''								
								and  dt_prevista > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp()));

				delete	from sl_unid_atend
				where	nr_seq_unidade	= nr_seq_unidade_w
				and	coalesce(dt_inicio::text, '') = ''				
				and	dt_prevista > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp());
				end if;
			end;
		end if;
		delete FROM processo_atendimento
		where nr_atendimento 		= nr_atendimento_p;

		/*tbschulz - HL7 leitos monitorados - atualmente utilizado por Dixtal*/

		if (ie_alta_estorno_p = 'A') then
			begin
			if (ie_leito_monit_w = 'S') or (ie_setor_rothman_w = 'S')then
				ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
							'nr_seq_interno=' || nr_seq_interno_w || ds_sep_bv_w;
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL gravar_agend_integracao(69, ds_param_integ_hl7_w,cd_setor_atendimento_w);
				CALL wheb_usuario_pck.set_ie_commit('S');
			end if;
			end;
		end if;

		/* rafaaaaa */

		if (cd_classif_setor_w in (3,4,5)) then
			begin
			if (ie_alta_estorno_p = 'A') then
				begin
				ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_p || ds_sep_bv_w ||
										'nr_seq_interno=' || nr_seq_interno_w || ds_sep_bv_w;
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL gravar_agend_integracao(4, ds_param_integ_hl7_w,cd_setor_atendimento_w);
				CALL wheb_usuario_pck.set_ie_commit('S');
				end;
			end if;
			end;
		end if;
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL atualizar_prev_conta_prot(nr_atendimento_p, null, null);
		CALL cancelar_atend_alta_pa(	nr_atendimento_p,
				null,
				obter_dados_usuario_opcao(nm_usuario_p,'C'),
				ds_observacao_p,
				nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
		if (ie_reverter_adep_w = 'S') then --OS161972
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL reverter_suspensao_adep(nr_atendimento_p, nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;

		/*tbyegmann em 01/03/2012(OS 410842) -> Status dos eventos das agendas(Ao desfazer alta)*/

		open c03;
		loop
		fetch c03 into	nr_seq_agenda_w,
				ie_status_agenda_w,
				cd_tipo_agenda_w,
				ie_tipo_agenda_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
			if (ie_status_agenda_w not in ('C','B','F','I','II')) then
				CALL wheb_usuario_pck.set_ie_commit('N');
				CALL executar_evento_agenda_alta('ADA',ie_tipo_agenda_w,nr_seq_agenda_w,cd_estabelecimento_w,nm_usuario_p);
				CALL wheb_usuario_pck.set_ie_commit('S');
			end if;
		end loop;
		close c03;

		open c07;
		loop
		fetch c07 into
			nr_seq_agenda_pac_w,
			ie_status_agenda_pac_w,
			cd_tipo_agenda_pac_w,
			ie_tipo_agenda_pac_w;
		EXIT WHEN NOT FOUND; /* apply on c07 */
			begin
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL executar_evento_agenda_alta('ADA',ie_tipo_agenda_pac_w,nr_seq_agenda_pac_w,cd_estabelecimento_w,nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
			end;
		end loop;
		close c07;
	end if;
	CALL wheb_usuario_pck.set_ie_commit('N');
	CALL atual_fim_credenciamento_pf(nr_atendimento_p, cd_pessoa_fisica_w, cd_medico_resp_w, cd_estabelecimento_w, dt_alta_p, 'D', nm_usuario_p);
	CALL wheb_usuario_pck.set_ie_commit('S');

	end;

	select	max(cd_setor_atendimento)
	into STRICT	cd_setor_atendimento_ww
	from	atend_paciente_unidade
	where	nr_seq_interno = (
		SELECT Obter_Atepacu_paciente(nr_atendimento_p, 'A')
		)
	and	Obter_Tipo_Unidade_Atend(nr_atendimento, nr_seq_interno, ie_passagem_setor) <> 'S';

	if (coalesce(cd_setor_atendimento_ww::text, '') = '') then
		cd_setor_atendimento_ww := Obter_Setor_AtePacu(Obter_Atepacu_paciente(nr_atendimento_p, 'IA'),0);
	end if;

	select	coalesce(max(1),0)
	into STRICT	qt_reg_w
	from	dis_regra_setor
	where	cd_setor_atendimento = cd_setor_atendimento_ww;

	if (qt_reg_w > 0) then
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL intdisp_gerar_movimento(nr_atendimento_p, 'EPA');
		CALL wheb_usuario_pck.set_ie_commit('S');
	end if;
end if;

if (coalesce(ie_cancela_atend_alta_w,'N') = 'S') and (ie_alta_estorno_p = 'A') and (coalesce(ds_erro_p::text, '') = '') then
	CALL wheb_usuario_pck.set_ie_commit('N');
	CALL cancelar_atendimento_paciente(nr_atendimento_p,nm_usuario_p,null,obter_dados_usuario_opcao(nm_usuario_p,'C'),ds_observacao_p);
	CALL wheb_usuario_pck.set_ie_commit('S');
end if;


if (coalesce(ie_encerrar_equip_agend_hc_w,'N') = 'S') then
	begin
	CALL wheb_usuario_pck.set_ie_commit('N');
	CALL cancelar_agenda_equipamento_hc(nr_atendimento_p,nm_usuario_p,dt_alta_p);
	CALL wheb_usuario_pck.set_ie_commit('S');
	end;
end if;

if (ie_alta_estorno_p = 'A') then
	begin
	CALL wheb_usuario_pck.set_ie_commit('N');
	CALL desvincular_grupo_evol_alta(nr_atendimento_p,nm_usuario_p);
	CALL wheb_usuario_pck.set_ie_commit('S');
	
	
	begin
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL tof_atingimento_meta_finalizar(cd_estabelecimento_ww,'TasyJob',clock_timestamp(),nr_atendimento_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
	
		update tof_meta_atend
		set dt_finalizacao = clock_timestamp()
		where nr_atendimento = nr_atendimento_p
		and coalesce(dt_finalizacao::text, '') = ''
		and (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and coalesce(dt_inativacao::text, '') = '';
	exception
		when	others then
			CALL wheb_usuario_pck.set_ie_commit('S');
	end;
	
	end;
end if;

if (ie_dt_fim_orient_nutri_w = 'S') and (ie_alta_estorno_p = 'A') then
	update	nut_orientacao
	set	dt_final = clock_timestamp()
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	and	coalesce(dt_final::text, '') = '';
end if;

if ((cd_motivo_alta_p IS NOT NULL AND cd_motivo_alta_p::text <> '') and ie_alta_estorno_p = 'A') then
	select	max(nr_seq_qua_evento)
	into STRICT	nr_seq_qua_evento_w
	from	motivo_alta
	where	cd_motivo_alta = cd_motivo_alta_p;

	if (nr_seq_qua_evento_w IS NOT NULL AND nr_seq_qua_evento_w::text <> '') then
		begin
			select	ds_motivo_alta
			into STRICT	ds_motivo_alta_w
			from	motivo_alta
			where	cd_motivo_alta = cd_motivo_alta_p;		
		exception
		when others then
			ds_motivo_alta_w := '';
		end;

		insert	into	qua_evento_paciente(	nr_sequencia,
						cd_estabelecimento,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						dt_atualizacao,
						nm_usuario,
						nm_usuario_origem,
						nr_seq_evento,
						dt_evento,
						ds_evento,
						cd_setor_atendimento,
						dt_cadastro,
						nm_usuario_reg,
						ie_situacao,
						cd_pessoa_fisica,
						nr_atendimento,
						dt_liberacao,
						ie_status,
						ie_origem,
						cd_funcao_ativa)

			values (	nextval('qua_evento_paciente_seq'),
						cd_estabelecimento_ww,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nm_usuario_p,
						nr_seq_qua_evento_w,
						clock_timestamp(),
						WHEB_MENSAGEM_PCK.get_texto(279216,'NM_PACIENTE='||nm_paciente_w||';DT_ATUAL='||clock_timestamp()||';DS_MOTIVO_ALTA='||ds_motivo_alta_w),
						cd_setor_atendimento_w,
						clock_timestamp(),
						nm_usuario_p,
						'A',
						cd_pessoa_fisica_w,
						nr_atendimento_p,
						clock_timestamp(),
						1,
						'U',
						obter_funcao_ativa);

			if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
	end if;

	if (ie_integra_regul_w = 'S') then

		select	max(nr_sequencia)
		into STRICT	nr_seq_regulacao_w
		from	regulacao_atendimento
		where	nr_atendimento	= nr_atendimento_p;
		
		if (coalesce(nr_seq_regulacao_w,0) > 0) then
			CALL wheb_usuario_pck.set_ie_commit('N');
			CALL reg_gerar_alta( nr_seq_regulacao_w, nm_usuario_p);
			CALL wheb_usuario_pck.set_ie_commit('S');
		end if;
	end if;
	
end if;
end if;

if ( (cd_motivo_alta_p IS NOT NULL AND cd_motivo_alta_p::text <> '') and ie_alta_estorno_p = 'A') then
	begin

	if ( obter_se_motivo_alta_obito(cd_motivo_alta_p)	= 'S') then
	
		--  Gerar RES UNIMED - 00760 - Inativacao do RES do beneficiario (00 - Obito)
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_transacao_res(nr_atendimento_p,'00760',nm_usuario_medico_w,null,'','00');
		CALL wheb_usuario_pck.set_ie_commit('S');

	else
	
		--  Gerar RES UNIMED - 00720 - Envio da informacao clinica
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_transacao_res(nr_atendimento_p,'00720',nm_usuario_medico_w,null,'','');
		CALL wheb_usuario_pck.set_ie_commit('S');
			
	end if;
		
	exception
	when others then
		CALL wheb_usuario_pck.set_ie_commit('S');
		ds_motivo_alta_w := '';
	end;
end if;

select	max(cd_unidade_compl)
into STRICT	cd_unidade_compl_w
from	atend_paciente_unidade
where 	nr_atendimento 	= nr_atendimento_p
and		nr_seq_interno	= nr_seq_interno_w;

if (ie_alta_estorno_p = 'A') then /* Gerar alta */
	for rw_w in regra_worklist loop
		update	wl_worklist
		set		dt_final_real = clock_timestamp(),
				ie_encerrada_alta = 'S'
		where	nr_atendimento = nr_atendimento_p
		and		nr_seq_regra = rw_w.nr_seq_regra
		and		coalesce(dt_final_real::text, '') = '';
		
		if (rw_w.cd_categoria = 'MT') then
			update	wl_worklist
			set		dt_final_real = clock_timestamp(),
					ie_encerrada_alta = 'S'
			where	cd_pessoa_fisica = obter_pessoa_atendimento(nr_atendimento_p,'C')
			and		nr_seq_regra = rw_w.nr_seq_regra
			and		coalesce(dt_final_real::text, '') = '';
		end if;

	end loop;
end if;

if (ie_alta_estorno_p = 'E') then /* Estornar alta */
	select	coalesce(max(1),0)
	into STRICT	qt_existe_w
	from	wl_worklist a,
			wl_item b
	where	a.nr_atendimento = nr_atendimento_p
	and		a.nr_seq_item = b.nr_sequencia
	and		coalesce(b.ie_situacao,'A') = 'A'
	and		b.cd_categoria <> 'MT';
	
	if (qt_existe_w > 0) then
		update	wl_worklist
		set		dt_final_real  = NULL,
				ie_encerrada_alta  = NULL
		where	nr_atendimento = nr_atendimento_p
		and		ie_encerrada_alta = 'S';
	end if;
	
	select	coalesce(max(a.nr_sequencia),0)
	into STRICT	nr_seq_regra_w
	from	wl_regra_item a,
			wl_regra_worklist b,
			wl_item c
	where	a.nr_seq_regra = b.nr_sequencia
	and		b.nr_seq_item = c.nr_sequencia
	and		coalesce(c.ie_situacao,'A') = 'A'
	and		coalesce(a.ie_situacao,'A') = 'A'
	and		a.ie_encerrar_alta = 'S'
	and		c.cd_categoria = 'MT';
		
	if (nr_seq_regra_w > 0) then
		update	wl_worklist
		set		dt_final_real  = NULL,
				ie_encerrada_alta  = NULL
		where	cd_pessoa_fisica = obter_pessoa_atendimento(nr_atendimento_p,'C')
		and		nr_seq_regra = nr_seq_regra_w
		and		ie_encerrada_alta = 'S';
	end if;
end if;

CALL wheb_usuario_pck.set_ie_commit('N');
ds_unidade_compl_ww := cd_unidade_basica_w || ' - ' || cd_unidade_compl_ww;
CALL gerar_int_dankia_pck.dankia_gerar_estornar_alta(nr_atendimento_p, cd_setor_atendimento_w, ds_unidade_compl_ww, cd_estabelecimento_ww, ie_alta_estorno_p, nm_usuario_p);
CALL wheb_usuario_pck.set_ie_commit('S');

if (ie_alta_estorno_p = 'A'  and  pkg_i18n.get_user_locale()='en_AU') then
nr_idade_w := Obter_param_Usuario(281, 1542, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, nr_idade_w);
if ( qt_idade_w >= nr_idade_w) then
  for r_C21 in C21 loop
    begin
    CALL GENERATE_ATEND_ANZICS(r_C21.nr_atendimento,r_C21.nr_seq_atepacu,nm_usuario_p);
    exception
      when others then
        null;
    end;
  end loop;
  end if;
end if;

if (ie_alta_estorno_p = 'A')then
	select coalesce(max(a.nr_sequencia),0)
	into STRICT 	nr_seq_atend_w
	from 	mprev_atendimento a,
			mprev_atend_paciente b
	where b.nr_atendimento = nr_atendimento_p
	and 	b.nr_seq_atendimento = a.nr_sequencia;

	if (nr_seq_atend_w <> 0)then
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL mprev_finalizar_atendimento(nr_seq_atend_w, clock_timestamp(), null, nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
	end if;

end if;

if (ie_alta_estorno_p = 'A')then
  begin
    CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gqa_finalizar_prot_alta(nr_atendimento_p, nm_usuario_p);
		CALL wheb_usuario_pck.set_ie_commit('S');
  exception
    when others then
      null;
  end;
end if;

if ( ie_alta_estorno_p = 'A' and ie_gerar_clinical_notes_w = 'S' and (dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') ) then
    begin
        cd_evolucao_w := clinical_notes_pck.gerar_soap(nr_atendimento_p, null, 'DISCHARGE', null, 'P', 1, cd_evolucao_w);
        CALL gerar_atend_pac_inf_evol(nr_atendimento_p, cd_evolucao_w);
    end;
end if;

if (ie_alta_estorno_p = 'E' and ie_gerar_clinical_notes_w = 'S' and coalesce(dt_alta_p::text, '') = '' )then
  begin
   select cd_evolucao
   into STRICT cd_evolucao_w
   from atendimento_paciente_inf
   where nr_atendimento = nr_atendimento_p;

if (coalesce(cd_evolucao_w ,0) > 0) then
	CALL gerar_atend_pac_inf_evol(nr_atendimento_p,null);
	delete from clinical_note_soap_data where cd_evolucao = cd_evolucao_w and ie_med_rec_type ='DISCHARGE' and ie_stage = 1 and ie_soap_type = 'P';
	CALL clinical_notes_pck.soap_data_after_delete(cd_evolucao_w);
	end if;
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_estornar_alta ( nr_atendimento_p bigint, ie_alta_estorno_p text, cd_processo_alta_p bigint, cd_motivo_alta_p bigint, dt_alta_p timestamp, nm_usuario_p text, ds_erro_p INOUT text, nr_seq_motivo_p bigint, cd_cgc_p text, ds_observacao_p text, cd_cgc_transporte_p text default null, nr_seq_motivo_est_alta_p bigint default null, cd_contract_hosp_p text default null, cd_contract_role_p text default null, cd_contract_type_p bigint default null) FROM PUBLIC;

