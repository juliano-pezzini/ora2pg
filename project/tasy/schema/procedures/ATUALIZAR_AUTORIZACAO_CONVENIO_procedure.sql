-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_autorizacao_convenio (nr_sequencia_p bigint, nm_usuario_p text, nr_seq_estagio_p bigint, ie_conta_particular_p text, ie_conta_convenio_p text, ie_commit_p text) AS $body$
DECLARE



/*
ie_interno_w dominio 1378
1	- Necessidade
2	- Aguardando justificativa medico
3	- Justificado pelo medico
5	- Encaminhado
10	- Autorizado
60	- Pendente de cancelamento
70	- Cancelado
90	- Reprovado
*/
ie_tipo_autorizacao_w		varchar(3);
cd_convenio_w			bigint;
cd_conv_agenda_w		bigint;
dt_fim_vigencia_w			timestamp;
dt_inicio_vigencia_w			timestamp;
nr_seq_interno_w			bigint;
dt_envio_w			timestamp;
dt_retorno_w			timestamp;
cd_senha_w			varchar(254);
qt_dia_autorizado_w		integer;
qt_nao_aprovado_w		integer;
ds_estagio_w			varchar(60);
nr_doc_convenio_w		varchar(20);
ie_interno_w			varchar(2);
nr_atendimento_w			bigint;
nr_seq_autorizacao_w		bigint;
nr_seq_agenda_w				autorizacao_convenio.nr_seq_agenda%type;
nr_seq_procedimento_w		bigint;
ds_obs_proc_autor_w		varchar(255):= '';
ie_interno_atual_w		varchar(2);
nr_interno_conta_w			bigint;
cd_categoria_w			varchar(10);
cd_estabelecimento_w		smallint;
cd_convenio_partic_w		integer;
cont_w				bigint:= 0;
nr_interno_conta_partic_w	bigint;
nr_seq_gestao_w			bigint;
nr_prescricao_w			bigint;
nr_seq_proc_prescr_w		bigint;
nr_seq_material_w		bigint;
ds_obs_mat_autor_w		varchar(255) := '';
nr_seq_pac_opme_w		bigint;
nr_seq_pac_opme_autor_w		bigint;
cd_material_w			bigint;
qt_material_w			double precision;
qt_autorizada_mat_w		double precision;
nr_seq_autor_cir_w			bigint;
nr_seq_mat_autor_cir_w		bigint;
nr_seq_proc_autor_w		bigint;
nr_seq_mat_autor_w		bigint;
ie_doc_autorizacao_w		varchar(1)	:= 'N';
qt_autorizacao_aprov_w		integer;
qt_autor_agenda_w			integer;
ie_autor_compl_agenda_w		varchar(1);
ie_atualiza_guia_eup_w		varchar(1);
nr_seq_agenda_consulta_w		autorizacao_convenio.nr_seq_agenda_consulta%type;
ie_atualiza_guia_age_cons_w		varchar(1)	:= 'N';
ie_autor_agenda_w			varchar(10);
cd_procedimento_w		procedimento_autorizado.cd_procedimento%type;
ie_origem_proced_w		bigint;
nr_seq_agenda_proc_w		autorizacao_convenio.nr_seq_agenda_proc%type;
nr_seq_agenda_proc_ww		bigint;
nr_seq_classif_w			bigint;
ie_atualizar_dias_autor_w		varchar(255);
ie_atualiza_autor_vaga_w		varchar(1);
ie_atualiza_qt_autorizada_w		varchar(1) := 'N';
ie_alt_conv_part_prescr_porc_w		varchar(1) := 'N';
ie_alt_conv_part_prescr_mat_w		varchar(1) := 'N';
ie_atualiza_dt_retorno_w		varchar(1) := 'S';
ie_atual_agenda_nn_w			varchar(1) := 'S';
nr_seq_autor_cirurgia_w			bigint;
ie_atualiza_mat_especial_w		varchar(15) := 'N';
ie_atualizar_vigencia_atend_w		varchar(1) := 'N';
ie_atual_fim_vigencia_atend_w		varchar(1) := 'S';
cd_setor_origem_w			integer;
cd_pessoa_fisica_w			varchar(10);
ie_atualiza_guia_prescr_w		varchar(2) := 'N';
ie_desdobrar_itens_conta_w		varchar(15);
nr_prescr_agenda_w			bigint;
cd_proc_agenda_w			bigint;
ie_origem_proc_agenda_w			bigint;
nr_seq_ageint_exame_lab_w		bigint;
nr_seq_age_integ_w			bigint;
ds_log_w				varchar(255) := '';
ds_estagio_ant_w			varchar(60);
nr_seq_estagio_ant_w			bigint;
nr_seq_paciente_setor_w			bigint;
ie_guia_regra_onco_w			varchar(1);
nr_seq_agenda_proc_autor_w		agenda_paciente.nr_sequencia%type;

cd_estabelecimento_autor_w		smallint;

cd_estabelecimento_pck_w		smallint := Wheb_usuario_pck.Get_cd_estabelecimento;

ie_data_autor_prorrog_w			varchar(1);
ie_autor_prorrog_atend_w		varchar(1);
qt_autor_mat_esp_w			integer := 0;
ie_bloqueia_sem_aut_mat_esp_w		varchar(1) := 'N';
nr_seq_mat_partic_w			material_atend_paciente.nr_sequencia%type;
qt_dia_internacao_w			atend_categoria_convenio.qt_dia_internacao%type;
nr_seq_opme_cir_w			agenda_pac_opme.nr_sequencia%type;
/* Francisco - 08/03/07 - Alterei para glosar somente o mesmo
procedimento incluindo a prescricao e sequencia */
ie_executa_triger_w			varchar(1) := wheb_usuario_pck.get_ie_executar_trigger;
ie_atualiza_regra_w			varchar(1) := 'N';
ie_obriga_pacote_w			varchar(1);
qt_count_w				bigint;
ie_atual_se_aprovado_w			varchar(1) := 'N';
ie_aprov_mat_autor_w			varchar(1) := 'S';
ie_atualiza_guia_w 			varchar(1);
ie_atualiza_senha_w 			varchar(1);
ie_autor_qtde_w 			varchar(1);
nr_sequencia_autor_w			bigint;
nr_doc_conv_autor_w			varchar(20);
cd_senha_autor_w			varchar(20);
ie_tipo_atendimento_w			smallint := 0;
nr_seq_propaci_w			bigint;
qt_autorizada_w 			double precision;
ie_origem_w				varchar(1);
cd_senha_atend_w			varchar(20);
nr_doc_convenio_atend_w			varchar(20);
ie_param_688_eup_w varchar(1);

dt_inicio_vig_eup_w			timestamp;
dt_fim_vig_eup_w			timestamp;

nr_doc_atualizar_w 			varchar(20);
cd_senha_atualizar_w 			varchar(20);
qt_dias_atualizar_w			integer;		
dt_inicio_vig_atualizar_w		timestamp;
dt_fim_vig_atualizar_w			timestamp;
ie_guia_senha_w				varchar(1);
nr_secao_w                                   agenda_consulta.nr_secao%type;
nr_seq_agenda_sessao_w                       agenda_consulta.nr_seq_agenda_sessao%type;
reg_integracao_p			gerar_int_padrao.reg_integracao;

ds_modulo_w		varchar(48);
ds_action_old_w		varchar(32) := '';
ds_action_w		varchar(32) := '';

nr_seq_guia_prest_w autorizacao_convenio.cd_autorizacao_prest%type := null;

c01 CURSOR FOR
SELECT	b.nr_sequencia,
	substr(d.ds_observacao,1,255)
from	procedimento_autorizado d,
	procedimento_paciente b,
	conta_paciente a
where	a.nr_atendimento		= nr_atendimento_w
and	a.cd_convenio_parametro	= cd_convenio_w
and	a.nr_interno_conta		= b.nr_interno_conta
and	a.ie_status_acerto		= 1
and	d.nr_sequencia_autor	= nr_sequencia_p
and	b.nr_prescricao		= d.nr_prescricao
and	b.nr_sequencia_prescricao	= d.nr_seq_prescricao
and	ie_conta_particular_p	= 'S'

union all

SELECT	a.nr_sequencia,
	substr(b.ds_observacao,1,255)
from	procedimento_autorizado b,
	procedimento_paciente a,
	conta_paciente c
where	a.nr_seq_proc_autor	= b.nr_sequencia
and	a.nr_interno_conta		= c.nr_interno_conta
and	c.cd_convenio_parametro	= cd_convenio_w
and	c.ie_status_acerto		= 1
and	b.nr_sequencia_autor	= nr_sequencia_p
and	ie_conta_particular_p	= 'S';

c02 CURSOR FOR
SELECT	b.nr_sequencia,
	a.nr_interno_conta
from	procedimento_autorizado d,
	procedimento_paciente b,
	conta_paciente a
where	a.nr_atendimento		= nr_atendimento_w
and	a.cd_convenio_parametro	= cd_convenio_partic_w
and	a.nr_interno_conta		= b.nr_interno_conta
and	a.ie_status_acerto		= 1
and	d.nr_sequencia_autor	= nr_sequencia_p
and	b.nr_prescricao		= d.nr_prescricao
and	b.nr_sequencia_prescricao	= d.nr_seq_prescricao
and	ie_conta_convenio_p	= 'S'

union all

SELECT	a.nr_sequencia,
	a.nr_interno_conta
from	procedimento_autorizado b,
	procedimento_paciente a,
	conta_paciente c
where	a.nr_seq_proc_autor	= b.nr_sequencia
and	a.nr_interno_conta		= c.nr_interno_conta
and	c.cd_convenio_parametro	= cd_convenio_partic_w
and	c.ie_status_acerto		= 1
and	b.nr_sequencia_autor	= nr_sequencia_p
and	ie_conta_convenio_p	= 'S';

c03 CURSOR FOR
SELECT	a.nr_prescricao,
	a.nr_sequencia,
	b.cd_procedimento, /*lhalves OS 220161 01/06/2010*/
	b.ie_origem_proced,
	'P' ie_origem  -- Prescricao 
from	procedimento_autorizado b,
	prescr_procedimento a
where	a.nr_prescricao		= b.nr_prescricao
and	a.nr_sequencia		= b.nr_seq_prescricao
and	b.nr_sequencia_autor	= nr_sequencia_p

union all

SELECT	a.nr_prescricao,
	a.nr_sequencia,
	b.cd_procedimento,
	b.ie_origem_proced,
	'A' ie_origem  -- Atendimento 
from	procedimento_autorizado b,
	prescr_procedimento a
where	a.nr_prescricao		= b.nr_prescricao
and	a.cd_procedimento	= b.cd_procedimento
and	a.ie_origem_proced	= b.ie_origem_proced
and	b.nr_sequencia_autor	= nr_sequencia_p
and (select	count(*)
	from	prescr_procedimento x
	where	x.cd_procedimento	= b.cd_procedimento
	and	x.ie_origem_proced	= b.ie_origem_proced
	and	x.nr_prescricao		= a.nr_prescricao) =1
and (select	count(*)
	from	procedimento_autorizado y
	where	y.cd_procedimento	= b.cd_procedimento
	and	y.ie_origem_proced	= b.ie_origem_proced
	and	y.nr_sequencia_autor	= nr_sequencia_p) =1;

c04 CURSOR FOR
SELECT	b.nr_sequencia,
	substr(d.ds_observacao,1,255)
from	material_autorizado d,
	material_atend_paciente b,
	conta_paciente a
where	a.nr_atendimento		= nr_atendimento_w
and	a.cd_convenio_parametro	= cd_convenio_w
and	a.nr_interno_conta		= b.nr_interno_conta
and	a.ie_status_acerto		= 1
and	b.cd_material		= d.cd_material
and	d.nr_sequencia_autor	= nr_sequencia_p
and	b.nr_prescricao		= d.nr_prescricao
and	b.nr_sequencia_prescricao	= d.nr_seq_prescricao
and	ie_conta_particular_p	= 'S'

union all

SELECT	a.nr_sequencia,
	substr(b.ds_observacao,1,255)
from	material_autorizado b,
	material_atend_paciente a,
	conta_paciente c
where	a.nr_seq_mat_autor	= b.nr_sequencia
and	a.nr_interno_conta		= c.nr_interno_conta
and	c.cd_convenio_parametro	= cd_convenio_w
and	c.ie_status_acerto		= 1
and	b.nr_sequencia_autor	= nr_sequencia_p
and	ie_conta_particular_p	= 'S'
and	not exists (	select	1
			from	material_autorizado d,
				material_atend_paciente b,
				conta_paciente a
			where	a.nr_atendimento		= nr_atendimento_w
			and	a.cd_convenio_parametro	= cd_convenio_w
			and	a.nr_interno_conta		= b.nr_interno_conta
			and	a.ie_status_acerto		= 1
			and	b.cd_material		= d.cd_material
			and	d.nr_sequencia_autor	= nr_sequencia_p
			and	b.nr_prescricao		= d.nr_prescricao
			and	b.nr_sequencia_prescricao	= d.nr_seq_prescricao
			and	ie_conta_particular_p	= 'S');

c05 CURSOR FOR
SELECT	nr_sequencia,
	cd_material,
	qt_material
from	agenda_pac_opme
where	nr_seq_agenda		= nr_seq_agenda_w;

/* Francisco - OS 81099 - 01/02/2008 */

c06 CURSOR FOR
SELECT	nr_sequencia
from	autorizacao_cirurgia
where	nr_seq_agenda		= nr_seq_agenda_w;

/* Francisco - OS 81099 - 01/02/2008 */

c07 CURSOR FOR
SELECT	nr_sequencia,
	cd_material,
	qt_solicitada,
	nr_seq_opme
from	material_autor_cirurgia
where	nr_seq_autorizacao	= nr_seq_autor_cir_w;

/* Francisco - OS 79510 - 06/02/2008 */

c08 CURSOR FOR
SELECT	a.nr_sequencia,
	b.nr_doc_convenio,
	b.cd_senha,
	a.qt_autorizada
from	procedimento_autorizado a,
	procedimento_paciente b
where	nr_sequencia_autor	= nr_sequencia_p
and	a.nr_sequencia		= b.nr_seq_proc_autor;
/*and	a.nr_prescricao		is not null
and	a.nr_seq_prescricao	is not null*/

/*comentado na OS 873531
and	ie_doc_autorizacao_w	= 'S';*/


/* Francisco - OS 79510 - 06/02/2008 */

c09 CURSOR FOR
SELECT	a.nr_sequencia,
	b.nr_doc_convenio,
	b.cd_senha,
	a.qt_autorizada
from	material_autorizado a,
	material_atend_paciente b
where	nr_sequencia_autor	= nr_sequencia_p
and	a.nr_sequencia		= b.nr_seq_mat_autor;
/*and	a.nr_prescricao is not null
and	a.nr_seq_prescricao is not null*/

/*comentado na OS 873531
and	ie_doc_autorizacao_w	= 'S';*/
c10 CURSOR FOR /*Geliard OS 356602 16/09/2011*/
SELECT	a.nr_prescricao,
	a.nr_sequencia,
	b.cd_material
from	material_autorizado b,
	prescr_material a
where	a.nr_prescricao		= b.nr_prescricao
and	a.nr_sequencia		= b.nr_seq_prescricao
and	b.nr_sequencia_autor	= nr_sequencia_p

union all

SELECT	a.nr_prescricao,
	a.nr_sequencia,
	b.cd_material
from	material_autorizado b,
	prescr_material a
where	a.nr_prescricao		= b.nr_prescricao
and	a.cd_material		= b.cd_material
and	b.nr_sequencia_autor	= nr_sequencia_p
and (select	count(*)
	from	prescr_material x
	where	x.cd_material	= b.cd_material
	and	x.nr_prescricao	= a.nr_prescricao) =1
and (select	count(*)
	from	material_autorizado y
	where	y.cd_material		= b.cd_material
	and	y.nr_sequencia_autor	= nr_sequencia_p) =1;
	
c11 CURSOR FOR
SELECT	a.nr_sequencia,
	substr(b.ds_observacao,1,255)
from	material_autorizado b,
	material_atend_paciente a,
	conta_paciente c
where	a.nr_seq_mat_autor	= b.nr_sequencia
and	a.nr_interno_conta	= c.nr_interno_conta
and	c.cd_convenio_parametro	= cd_convenio_w
and	c.ie_status_acerto	= 1
and	b.nr_sequencia_autor	= nr_sequencia_p
and	ie_conta_particular_p	= 'S';

C12 CURSOR FOR
	SELECT	a.nr_sequencia
	from	ageint_exame_lab a,
		procedimento_autorizado b
	where	a.nr_seq_ageint 	= nr_seq_age_integ_w
	and	b.nr_sequencia_autor 	= nr_sequencia_p
	and	a.nr_sequencia		= b.nr_seq_ageint_exame_lab;
	
c13 CURSOR FOR
SELECT	a.nr_sequencia
from	agenda_paciente a,
	procedimento_autorizado b
where	a.nr_sequencia		= b.nr_seq_agenda
and	a.cd_procedimento	= b.cd_procedimento
and	a.ie_origem_proced	= b.ie_origem_proced
and	b.nr_sequencia_autor	= nr_sequencia_p;

c14 CURSOR FOR
SELECT	b.nr_sequencia,
	a.nr_interno_conta
from	material_autorizado d,
	material_atend_paciente b,
	conta_paciente a
where	a.nr_atendimento		= nr_atendimento_w
and	a.cd_convenio_parametro	= cd_convenio_partic_w
and	a.nr_interno_conta		= b.nr_interno_conta
and	a.ie_status_acerto		= 1
and	b.cd_material		= d.cd_material
and	d.nr_sequencia_autor	= nr_sequencia_p
and	b.nr_prescricao		= d.nr_prescricao
and	b.nr_sequencia_prescricao	= d.nr_seq_prescricao
and	ie_conta_convenio_p	= 'S'

union all

SELECT	a.nr_sequencia,
	a.nr_interno_conta
from	material_autorizado b,
	material_atend_paciente a,
	conta_paciente c
where	a.nr_seq_mat_autor	= b.nr_sequencia
and	a.nr_interno_conta		= c.nr_interno_conta
and	c.cd_convenio_parametro	= cd_convenio_partic_w
and	c.ie_status_acerto		= 1
and	b.nr_sequencia_autor	= nr_sequencia_p
and	ie_conta_convenio_p	= 'S';	


c15 CURSOR FOR
SELECT	b.nr_sequencia nr_seq_propaci,
	b.nr_doc_convenio,
	b.cd_senha,
	d.qt_autorizada
from	procedimento_autorizado d,
	procedimento_paciente b,
	conta_paciente a
where	a.nr_atendimento	= nr_atendimento_w
and	a.cd_convenio_parametro	= cd_convenio_w
and	a.nr_interno_conta	= b.nr_interno_conta
and	a.ie_status_acerto	= 1
and	b.cd_procedimento	= d.cd_procedimento
and	b.ie_origem_proced	= d.ie_origem_proced
and     coalesce(b.nr_seq_proc_interno,0) = coalesce(coalesce(d.nr_seq_proc_interno, b.nr_seq_proc_interno),0)
and	d.nr_sequencia_autor	= nr_sequencia_p
and	d.nr_prescricao		= b.nr_prescricao

union

SELECT	b.nr_sequencia nr_seq_propaci,
	b.nr_doc_convenio,
	b.cd_senha,
	d.qt_autorizada
from	procedimento_autorizado d,
	procedimento_paciente b,
	conta_paciente a
where	a.nr_atendimento	= nr_atendimento_w
and	a.cd_convenio_parametro	= cd_convenio_w
and	a.nr_interno_conta	= b.nr_interno_conta
and	a.ie_status_acerto	= 1
and	b.cd_procedimento	= d.cd_procedimento
and     coalesce(b.nr_seq_proc_interno,0) = coalesce(coalesce(d.nr_seq_proc_interno, b.nr_seq_proc_interno),0)
and	b.ie_origem_proced	= d.ie_origem_proced
and	d.nr_sequencia_autor	= nr_sequencia_p
and	coalesce(d.nr_prescricao::text, '') = '';

c16 CURSOR FOR
SELECT   nr_secao,
         nr_sequencia
from     agenda_consulta
where	nr_seq_agenda_sessao = nr_seq_agenda_consulta_w;

c17 CURSOR FOR
SELECT	a.nr_seq_agenda_proc
from	procedimento_autorizado a
where	a.nr_sequencia_autor = nr_sequencia_p
and	(a.nr_seq_agenda_proc IS NOT NULL AND a.nr_seq_agenda_proc::text <> '');
  r RECORD;

BEGIN
DBMS_APPLICATION_INFO.READ_MODULE(ds_modulo_w, ds_action_w);
if (ds_action_w = 'AUTORIZACAO_INTEGRACAO_UPDATE') then
	DBMS_APPLICATION_INFO.SET_ACTION('ATUALIZAR_AUTORIZACAO_CONVENIO_I');
else
	DBMS_APPLICATION_INFO.SET_ACTION('ATUALIZAR_AUTORIZACAO_CONVENIO');
end if;
		
ie_atualiza_qt_autorizada_w	:= coalesce(obter_valor_param_usuario(3004, 17, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');
ie_alt_conv_part_prescr_porc_w	:= coalesce(obter_valor_param_usuario(3004, 123, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');
ie_alt_conv_part_prescr_mat_w	:= coalesce(obter_valor_param_usuario(3004, 124, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');
ie_atualiza_dt_retorno_w	:= coalesce(obter_valor_param_usuario(3004, 155, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'S');
ie_atual_agenda_nn_w		:= coalesce(obter_valor_param_usuario(3004, 157, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'S');
ie_atualiza_mat_especial_w	:= coalesce(obter_valor_param_usuario(3004, 158, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');
ie_desdobrar_itens_conta_w	:= coalesce(obter_valor_param_usuario(3004, 162, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');
ie_guia_regra_onco_w		:= coalesce(obter_valor_param_usuario(3004, 200, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');
ie_bloqueia_sem_aut_mat_esp_w 	:= coalesce(obter_valor_param_usuario(3004, 211, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');
ie_param_688_eup_w := coalesce(obter_valor_param_usuario(916, 688, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');
/*Autorizacao de mat especiais*/

ie_atual_se_aprovado_w 		:= coalesce(obter_valor_param_usuario(3006, 29, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_pck_w),'N');


if (nr_seq_estagio_p IS NOT NULL AND nr_seq_estagio_p::text <> '') and (coalesce(nr_sequencia_p,0) > 0) then -- Francisco OS 37895 Mudei para que fosse alterado para um estagio especifico
	begin
		select	ie_interno,
			ie_autor_agenda,
			nr_seq_classif,
			ds_estagio,
			ie_obriga_pacote
		into STRICT	ie_interno_w,
			ie_autor_agenda_w,
			nr_seq_classif_w,
			ds_estagio_w,
			ie_obriga_pacote_w
		from	estagio_autorizacao
		where	nr_sequencia	= nr_seq_estagio_p
		and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
	exception
	when others then
		select	ie_interno,
			ie_autor_agenda,
			nr_seq_classif,
			ds_estagio,
			ie_obriga_pacote
		into STRICT	ie_interno_w,
			ie_autor_agenda_w,
			nr_seq_classif_w,
			ds_estagio_w,
			ie_obriga_pacote_w
		from	estagio_autorizacao
		where	nr_sequencia	= nr_seq_estagio_p;
	end;

	if (coalesce(ie_interno_w::text, '') = '') then
		DBMS_APPLICATION_INFO.SET_ACTION('');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(179503);/*O estagio utilizado nao possui dominio de estagio cadastrado!*/
	end if;
	
	--lhalves OS 751484 em 02/07/2015
	if (ie_obriga_pacote_w = 'S') then
	
		begin		
		select	count(*)
		into STRICT	qt_count_w
		from	autorizacao_convenio a
		where	a.nr_sequencia		= nr_sequencia_p
		and	coalesce(a.dt_geracao_pacote::text, '') = ''
		and	exists (SELECT	1 --que existam regras de pacote de autorizacao para o convenio
				from	convenio_pacote_autor b,
					convenio_pacote_autor_proc p,
					procedimento_autorizado c
				where	b.cd_convenio		= a.cd_convenio
				and	p.cd_procedimento	= c.cd_procedimento
				and	p.ie_origem_proced	= c.ie_origem_proced
				and	p.nr_seq_pacote		= b.nr_sequencia
				and	c.nr_sequencia_autor	= a.nr_sequencia
				and	b.cd_estabelecimento	= a.cd_estabelecimento
				and	b.ie_situacao		= 'A'
				and	clock_timestamp()			between b.dt_inicio_vigencia and coalesce(b.dt_fim_vigencia,clock_timestamp() + interval '1 days'))  LIMIT 1;
		exception
		when others then
			qt_count_w	:= 0;
		end;
		
		if (qt_count_w > 0) then
			DBMS_APPLICATION_INFO.SET_ACTION('');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(347510);
		end if;	
	end if;

	select	a.ie_tipo_autorizacao,
		a.cd_convenio,
		a.dt_fim_vigencia,
		a.cd_senha,
		a.cd_autorizacao,
		coalesce(a.qt_dia_autorizado,0),
		a.nr_atendimento,
		a.nr_seq_autorizacao,
		a.nr_seq_agenda,
		b.ie_interno,
		(obter_dados_autor_convenio(a.nr_sequencia, 'E'))::numeric ,
		nr_seq_gestao,
		nr_seq_agenda_consulta,
		nr_seq_agenda_proc,
		nr_seq_autor_cirurgia,
		a.dt_inicio_vigencia,
		a.cd_setor_origem,
		cd_pessoa_fisica,
		nr_seq_age_integ,
		a.nr_seq_estagio,
		coalesce(a.cd_estabelecimento,cd_estabelecimento_pck_w),
		nr_seq_paciente_setor,
        cd_autorizacao_prest
	into STRICT	ie_tipo_autorizacao_w,
		cd_convenio_w,
		dt_fim_vigencia_w,
		cd_senha_w,
		nr_doc_convenio_w,
		qt_dia_autorizado_w,
		nr_atendimento_w,
		nr_seq_autorizacao_w,
		nr_seq_agenda_w,
		ie_interno_atual_w,
		cd_estabelecimento_w,
		nr_seq_gestao_w,
		nr_seq_agenda_consulta_w,
		nr_seq_agenda_proc_w,
		nr_seq_autor_cirurgia_w,
		dt_inicio_vigencia_w,
		cd_setor_origem_w,
		cd_pessoa_fisica_w,
		nr_seq_age_integ_w,
		nr_seq_estagio_ant_w,
		cd_estabelecimento_autor_w,
		nr_seq_paciente_setor_w,
        nr_seq_guia_prest_w
	FROM autorizacao_convenio a
LEFT OUTER JOIN estagio_autorizacao b ON (a.nr_seq_estagio = b.nr_sequencia)
WHERE a.nr_sequencia		= nr_sequencia_p;
	
	select max(ie_tipo_atendimento)
	into STRICT ie_tipo_atendimento_w
	from atendimento_paciente
	where nr_atendimento = nr_atendimento_w;
	
	if (ie_bloqueia_sem_aut_mat_esp_w = 'S') and (ie_interno_w = '10') and (ie_atualiza_mat_especial_w = 'N') then
		
		select	count(1)
		into STRICT	qt_autor_mat_esp_w
		from	autorizacao_cirurgia a
		where	coalesce(a.ie_estagio_autor,'1') <> '3'
		and	((a.nr_sequencia 	= nr_seq_autor_cirurgia_w) or (a.nr_seq_autor_conv 	= nr_sequencia_p));
			
		if (qt_autor_mat_esp_w > 0) then
			--Existe autorizacao de material especial pendente de autorizacao. Verifique o parametro[211]
			DBMS_APPLICATION_INFO.SET_ACTION('');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(292102);
		end if;
		
	end if;
	
	select	coalesce(max(ie_autor_compl_agenda),'N'),
		coalesce(max(ie_atualiza_guia_eup),'N'),
		coalesce(max(ie_atualiza_guia_age_cons),'N'),
		coalesce(max(ie_atualizar_dias_autor),'N'),
		coalesce(max(ie_atualiza_autor_vaga),'S'),
		coalesce(max(ie_atualizar_vigencia_atend),'N'),
		coalesce(max(ie_atual_fim_vigencia_atend),'S'),
		coalesce(max(ie_atualiza_guia_prescr),'N'),
		coalesce(max(ie_autor_prorrog_atend),'N')
	into STRICT	ie_autor_compl_agenda_w,
		ie_atualiza_guia_eup_w,
		ie_atualiza_guia_age_cons_w,
		ie_atualizar_dias_autor_w,
		ie_atualiza_autor_vaga_w,
		ie_atualizar_vigencia_atend_w,
		ie_atual_fim_vigencia_atend_w,
		ie_atualiza_guia_prescr_w,
		ie_autor_prorrog_atend_w
	from	parametro_faturamento
	where	cd_estabelecimento	= cd_estabelecimento_w;
	
	
	select	coalesce(max(IE_DATA_AUTOR_PRORROG),'N')
	into STRICT	ie_data_autor_prorrog_w
	from	convenio_estabelecimento
	where	cd_convenio = cd_convenio_w
	and	cd_estabelecimento = cd_estabelecimento_autor_w;
	
	select	coalesce(max(ds_estagio), obter_desc_expressao(328267))
	into STRICT	ds_estagio_ant_w
	from	estagio_autorizacao
	where	nr_Sequencia = nr_seq_estagio_ant_w;

	/* comentado na OS 873531
	select	nvl(max(obter_valor_conv_estab(cd_convenio_w, cd_estabelecimento_w, 'IE_DOC_AUTORIZACAO')),'N')
	into	ie_doc_autorizacao_w
	from	dual;*/
	
	SELECT * FROM obter_regra_senha_guia_conta(	cd_estabelecimento_w, cd_convenio_w, ie_tipo_atendimento_w, ie_doc_autorizacao_w, ie_atualiza_guia_w, ie_atualiza_senha_w, ie_autor_qtde_w) INTO STRICT ie_doc_autorizacao_w, ie_atualiza_guia_w, ie_atualiza_senha_w, ie_autor_qtde_w;

	dt_envio_w		:= null;
	dt_retorno_w		:= null;
	
	ie_atualiza_regra_w := coalesce(obter_se_atualiza_autor_cir(nr_sequencia_p,nr_seq_estagio_p, nr_seq_autor_cirurgia_w,cd_convenio_w, ie_tipo_autorizacao_w, coalesce(cd_estabelecimento_w,cd_estabelecimento_autor_w)),'N');

	/* Francisco - OS 170406 - 05/10/2009 - Tratado para voltar estagio da agenda */

	if (ie_interno_atual_w = '10') and (ie_interno_w <> '10') and (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then

		update	agenda_paciente
		set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'PA'),
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia	= nr_seq_agenda_w;

		
		if (nr_seq_agenda_proc_w IS NOT NULL AND nr_seq_agenda_proc_w::text <> '') then
			update	agenda_paciente_proc
			set	ie_autorizacao	= 'PA',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_agenda_w
			and 	nr_seq_agenda	= nr_seq_agenda_proc_w;
		end if;
	end if;

	if (ie_interno_w = '5') then
		dt_envio_w		:= clock_timestamp();
	end if;
	
	if (coalesce(ie_atualiza_dt_retorno_w,'S') = 'S') then
		begin
		if (ie_interno_w = '10') then
			dt_retorno_w		:= clock_timestamp();
		elsif (ie_interno_w = '90') then
			dt_retorno_w	:= clock_timestamp();
		end if;
		end;
	end if;
	
	if (coalesce(ie_guia_regra_onco_w,'N') = 'S') and (ie_interno_w = '10') and --Se autorizado
		(nr_seq_paciente_setor_w IS NOT NULL AND nr_seq_paciente_setor_w::text <> '') then	
		nr_doc_convenio_w := obter_guia_conv_pac_quimio(nr_seq_paciente_setor_w, nr_doc_convenio_w);	
	end if;

    if (coalesce(nr_seq_guia_prest_w::text, '') = '') then
        nr_seq_guia_prest_w := tiss_obter_guia_prest_autor(cd_convenio_w, cd_estabelecimento_w, ie_tipo_autorizacao_w, nr_atendimento_w, nr_seq_agenda_w, nr_seq_age_integ_w, nr_seq_guia_prest_w);
    end if;

	update	autorizacao_convenio
	set	nr_seq_estagio		= nr_seq_estagio_p,
		dt_envio		= coalesce(dt_envio, dt_envio_w),
		dt_retorno		= coalesce(dt_retorno, dt_retorno_w),
		nm_usuario		= nm_usuario_p,
		dt_atualizacao		= clock_timestamp(),
		nr_seq_classif		= coalesce(nr_seq_classif_w, nr_seq_classif),
		cd_autorizacao		= nr_doc_convenio_w,
        cd_autorizacao_prest = nr_seq_guia_prest_w
	where	nr_sequencia		= nr_sequencia_p;

	--OS 1551390 - integracao radix

	
	--Esse select e para tentar evitar a duplicidade. 
	select	count(*)
	into STRICT	qt_count_w
	from	intpd_fila_transmissao
	where  	nr_seq_documento	= to_char(nr_sequencia_p)
	and     to_char(dt_atualizacao, 'dd/mm/yyyy hh24:mi:ss') = to_char(clock_timestamp(),'dd/mm/yyyy hh24:mi:ss');
	
	--integracao motion - OS 1657743
	if ((qt_count_w = 0) and (ie_autor_agenda_w in ('A','N'))) then
	
		begin
			select  count(1)
			into STRICT	qt_count_w
			from (
				SELECT 	1
				from    autorizacao_convenio a,
					estagio_autorizacao e,
					procedimento_autorizado pa,
					agenda_paciente ap
				where   a.nr_seq_estagio = e.nr_sequencia
				and   	a.nr_sequencia = pa.nr_sequencia_autor
				and   	pa.nr_seq_agenda = ap.nr_sequencia
				and    	a.nr_sequencia = nr_sequencia_p
				and  	to_char(a.dt_atualizacao,'dd/mm/yyyy hh24') = to_char(clock_timestamp(),'dd/mm/yyyy hh24')
				and  	(ap.cd_agendamento_externo IS NOT NULL AND ap.cd_agendamento_externo::text <> '')
				
union

				SELECT  1
				from    autorizacao_convenio a,
					estagio_autorizacao e,
					procedimento_autorizado pa,
					agenda_consulta ac
				where   a.nr_seq_estagio = e.nr_sequencia
				and   	a.nr_sequencia = pa.nr_sequencia_autor
				and   	pa.nr_seq_agenda_consulta = ac.nr_sequencia
				and    	a.nr_sequencia = nr_sequencia_p
				and  	to_char(a.dt_atualizacao,'dd/mm/yyyy hh24') = to_char(clock_timestamp(),'dd/mm/yyyy hh24')
				and  	(ac.cd_agendamento_externo IS NOT NULL AND ac.cd_agendamento_externo::text <> '')
				
union

				select  1
				from    autorizacao_convenio a,
					estagio_autorizacao e,
					agenda_paciente ap
				where   a.nr_seq_estagio = e.nr_sequencia
				and   	a.nr_seq_agenda = ap.nr_sequencia
				and    	a.nr_sequencia = nr_sequencia_p
				and  	to_char(a.dt_atualizacao,'dd/mm/yyyy hh24') = to_char(clock_timestamp(),'dd/mm/yyyy hh24')
				and  	(ap.cd_agendamento_externo IS NOT NULL AND ap.cd_agendamento_externo::text <> '')
				and  	not exists (
					select  1  
					from  	procedimento_autorizado x
					where  	x.nr_Sequencia_autor = a.nr_Sequencia
					and  	x.nr_seq_agenda = ap.nr_sequencia
				)
				
union

				select  1
				from    autorizacao_convenio a,
					estagio_autorizacao e,
					agenda_consulta ac
				where   a.nr_seq_estagio = e.nr_sequencia
				and   	a.nr_seq_agenda_consulta = ac.nr_sequencia
				and    	a.nr_sequencia = nr_sequencia_p
				and  	(ac.cd_agendamento_externo IS NOT NULL AND ac.cd_agendamento_externo::text <> '')
				and  	to_char(a.dt_atualizacao,'dd/mm/yyyy hh24') = to_char(clock_timestamp(),'dd/mm/yyyy hh24')
				and  	not exists (  
					select	1	
					from	procedimento_autorizado x
					where	x.nr_Sequencia_autor = a.nr_Sequencia
					and	x.nr_seq_agenda_consulta = ac.nr_sequencia
				)
			) alias23;	
		exception
		when others then
			qt_count_w := 0;
		end;

		if (qt_count_w > 0) then
			reg_integracao_p := gerar_int_padrao.gravar_integracao('128', nr_sequencia_p, nm_usuario_p, reg_integracao_p);
		end if;
	end if;

	if (ie_interno_w = '1') then

		if (ie_tipo_autorizacao_w = '3') then
			open c03;
			loop
			fetch c03 into
				nr_prescricao_w,
				nr_seq_proc_prescr_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				ie_origem_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				if (ie_origem_w = 'P') then				
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w
					and	nr_sequencia 	= nr_seq_proc_prescr_w;
				else
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w;					
				end if;	
			end loop;
			close c03;
			
			if (coalesce(nr_seq_agenda_w,0) > 0) then

				update	agenda_paciente
				set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_w
				and	((ie_atual_agenda_nn_w = 'S') or
					(ie_atual_agenda_nn_w = 'N' AND ie_autorizacao <> 'NN'));
					
				if (nr_seq_agenda_proc_w IS NOT NULL AND nr_seq_agenda_proc_w::text <> '') then
					update	agenda_paciente_proc
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w
					and 	nr_seq_agenda	= nr_seq_agenda_proc_w;
				end if;
					
				open C13;
				loop
				fetch C13 into	
					nr_seq_agenda_proc_autor_w;
				EXIT WHEN NOT FOUND; /* apply on C13 */
					begin
					
					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
						nr_doc_convenio = coalesce(nr_doc_convenio,nr_doc_convenio_w),
						ds_senha	= coalesce(ds_senha,cd_senha_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()					
					where	nr_sequencia	= nr_seq_agenda_proc_autor_w;					
					
					if (nr_seq_agenda_proc_w IS NOT NULL AND nr_seq_agenda_proc_w::text <> '') then
						update	agenda_paciente_proc
						set	ie_autorizacao	= ie_autor_agenda_w,
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	nr_sequencia	= nr_seq_agenda_w
						and 	nr_seq_agenda	= nr_seq_agenda_proc_w;
					end if;	
					end;
				end loop;
				close C13;
			end if;			
		
		elsif (ie_tipo_autorizacao_w = '4') then --Materiais/Medicamentos
			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then
				/*select	count(*)
				into	qt_autor_agenda_w
				from	autorizacao_convenio
				where	nr_seq_agenda	= nr_seq_agenda_w;*/
				if (coalesce(nr_seq_agenda_w,0) > 0) then
					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w
					and	((ie_atual_agenda_nn_w = 'S') or
						(ie_atual_agenda_nn_w = 'N' AND ie_autorizacao <> 'NN'));
				end if;

				open c05;
				loop
				fetch c05 into
					nr_seq_pac_opme_w,
					cd_material_w,
					qt_material_w;
				EXIT WHEN NOT FOUND; /* apply on c05 */
					select	coalesce(max(qt_autorizada),0),
						coalesce(max(nr_seq_opme),0)
					into STRICT	qt_autorizada_mat_w,
						nr_seq_pac_opme_autor_w
					from	material_autorizado
					where	((nr_seq_opme = nr_seq_pac_opme_w) or (cd_material	= cd_material_w))
					and	nr_sequencia_autor	= nr_sequencia_p;
					
					
					if (ie_atual_se_aprovado_w = 'S') then
						/* Tratamento realizado para nao atualizar o OPME para autorizado
						quando o material nao estiver aprovado na Aut mat esp*/
						select	coalesce(max(a.ie_aprovacao),'N')
						into STRICT	ie_aprov_mat_autor_w
						from	material_autor_cirurgia a,
							autorizacao_cirurgia b
						where	((a.nr_seq_opme 	= nr_seq_pac_opme_w) or (a.cd_material 		= cd_material_w))
						and	b.nr_sequencia		= a.nr_seq_autorizacao
						and	((b.nr_seq_autor_conv 	= nr_sequencia_p) or (b.nr_sequencia	    	= nr_seq_autor_cirurgia_w));
							
					end if;
	

					if (nr_seq_pac_opme_w = nr_seq_pac_opme_autor_w) or (nr_seq_pac_opme_autor_w = 0) then
						begin
						if (qt_autorizada_mat_w >= qt_material_w) then
							update	agenda_pac_opme
							set	ie_autorizado	= 'A',
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= nr_seq_pac_opme_w
							and	coalesce(ie_aprov_mat_autor_w,'S') = 'S'
							and	exists (SELECT	1
								from	material_autorizado x
								where	x.nr_sequencia_autor 	= nr_sequencia_p
								and	((x.nr_seq_opme = nr_seq_pac_opme_w) or (x.cd_material	= cd_material_w)));
						else
							update	agenda_pac_opme
							set	ie_autorizado	= 'P',
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= nr_seq_pac_opme_w
							and	exists (SELECT	1
								from	material_autorizado x
								where	x.nr_sequencia_autor 	= nr_sequencia_p
								and	((x.nr_seq_opme = nr_seq_pac_opme_w) or (x.cd_material	= cd_material_w)));
						end if;
						end;
					end if;

				end loop;
				close c05;
			end if;
		elsif (ie_tipo_autorizacao_w = '5') then --Cirrurgia
			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then
				/*select	count(*)
				into	qt_autor_agenda_w
				from	autorizacao_convenio
				where	nr_seq_agenda	= nr_seq_agenda_w;*/
				if (coalesce(nr_seq_agenda_w,0) > 0) then

					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w
					and	((ie_atual_agenda_nn_w = 'S') or
						(ie_atual_agenda_nn_w = 'N' AND ie_autorizacao <> 'NN'));
				end if;

				open c06;
				loop
				fetch c06 into
					nr_seq_autor_cir_w;
				EXIT WHEN NOT FOUND; /* apply on c06 */
					open c07;
					loop
					fetch c07 into
						nr_seq_mat_autor_cir_w,
						cd_material_w,
						qt_material_w,
						nr_seq_opme_cir_w;
					EXIT WHEN NOT FOUND; /* apply on c07 */
						select	coalesce(max(qt_autorizada),0)
						into STRICT	qt_autorizada_mat_w
						from	autorizacao_convenio b,
							material_autorizado a
						where	a.nr_sequencia_autor	= b.nr_sequencia
						and	cd_material		= cd_material_w
						and	((a.nr_seq_opme		= nr_seq_opme_cir_w) or (coalesce(a.nr_seq_opme::text, '') = ''))
						and	nr_seq_agenda		= nr_seq_agenda_w;

						if (qt_autorizada_mat_w > 0) then
							update	material_autor_cirurgia
							set	ie_aprovacao	= 'S',
								qt_material	= CASE WHEN qt_material=0 THEN qt_autorizada_mat_w  ELSE qt_material END ,
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= nr_seq_mat_autor_cir_w;
						end if;
					end loop;
					close c07;

					qt_nao_aprovado_w := 0;

					select	count(ie_aprovacao)
					into STRICT	qt_nao_aprovado_w
					from	material_autor_cirurgia
					where	nr_seq_autorizacao = nr_seq_autor_cir_w
					and	ie_aprovacao = 'N';

					if (qt_nao_aprovado_w = 0)	then
					
						update	autorizacao_cirurgia
						set	dt_autorizacao	= clock_timestamp(),
							nm_usuario_autorizacao	= nm_usuario_p,
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp()
						where	nr_sequencia	= nr_seq_autor_cir_w
						and	coalesce(ie_atualiza_regra_w,'N') = 'N';
					end if;
				end loop;
				close c06;

				open c05;
				loop
				fetch c05 into
					nr_seq_pac_opme_w,
					cd_material_w,
					qt_material_w;
				EXIT WHEN NOT FOUND; /* apply on c05 */
					select	coalesce(max(qt_autorizada),0),
						coalesce(max(nr_seq_opme),0)
					into STRICT	qt_autorizada_mat_w,
						nr_seq_pac_opme_autor_w
					from	material_autorizado
					where	((nr_seq_opme = nr_seq_pac_opme_w) or (cd_material	= cd_material_w))
					and	nr_sequencia_autor	= nr_sequencia_p;
					
					if (ie_atual_se_aprovado_w = 'S') then
						/* Tratamento realizado para nao atualizar o OPME para autorizado
						quando o material nao estiver aprovado na Aut mat esp*/
						select	coalesce(max(a.ie_aprovacao),'N')
						into STRICT	ie_aprov_mat_autor_w
						from	material_autor_cirurgia a,
							autorizacao_cirurgia b
						where	a.nr_seq_opme 		= nr_seq_pac_opme_w
						and	b.nr_sequencia		= a.nr_seq_autorizacao
						and	a.cd_material 		= cd_material_w
						and	((b.nr_seq_autor_conv 	= nr_sequencia_p) or (b.nr_sequencia	    	= nr_seq_autor_cirurgia_w));
							
					end if;

					if (nr_seq_pac_opme_w = nr_seq_pac_opme_autor_w) or (nr_seq_pac_opme_autor_w = 0) then
						begin
						if (qt_autorizada_mat_w >= qt_material_w) then
							update	agenda_pac_opme
							set	ie_autorizado	= 'A',
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= nr_seq_pac_opme_w
							and	coalesce(ie_aprov_mat_autor_w,'S') = 'S'
							and	exists (SELECT	1
								from	material_autorizado x
								where	x.nr_sequencia_autor 	= nr_sequencia_p
								and	((x.nr_seq_opme = nr_seq_pac_opme_w) or (x.cd_material	= cd_material_w)));
						else
							update	agenda_pac_opme
							set	ie_autorizado	= 'P',
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= nr_seq_pac_opme_w
							and	exists (SELECT	1
								from	material_autorizado x
								where	x.nr_sequencia_autor 	= nr_sequencia_p
								and	((x.nr_seq_opme = nr_seq_pac_opme_w) or (x.cd_material	= cd_material_w)));
						end if;
						end;
					end if;
				end loop;
				close c05;
			end if;
		end if;
	elsif (ie_interno_w = '2') then

		dt_envio_w		:= clock_timestamp();
		if (ie_tipo_autorizacao_w = '3') then

			open c03;
			loop
			fetch c03 into
				nr_prescricao_w,
				nr_seq_proc_prescr_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				ie_origem_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				if (ie_origem_w = 'P') then				
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w
					and	nr_sequencia 	= nr_seq_proc_prescr_w;
				else
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w;					
				end if;
			end loop;
			close c03;
			
			
			if (coalesce(nr_seq_agenda_w,0) > 0) then

				update	agenda_paciente
				set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_w
				and	((ie_atual_agenda_nn_w = 'S') or
					(ie_atual_agenda_nn_w = 'N' AND ie_autorizacao <> 'NN'));
					
				if (nr_seq_agenda_proc_w IS NOT NULL AND nr_seq_agenda_proc_w::text <> '') then
					update	agenda_paciente_proc
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w
					and 	nr_seq_agenda	= nr_seq_agenda_proc_w;
				end if;
					
			end if;
			
		end if;
	elsif (ie_interno_w = '3') then

		dt_envio_w		:= clock_timestamp();
		if (ie_tipo_autorizacao_w = '3') then

			open c03;
			loop
			fetch c03 into
				nr_prescricao_w,
				nr_seq_proc_prescr_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				ie_origem_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				if (ie_origem_w = 'P') then				
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w
					and	nr_sequencia 		= nr_seq_proc_prescr_w;
				else
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w;					
				end if;
			end loop;
			close c03;
			
			
			if (coalesce(nr_seq_agenda_w,0) > 0) then

				update	agenda_paciente
				set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_w
				and	((ie_atual_agenda_nn_w = 'S') or
					(ie_atual_agenda_nn_w = 'N' AND ie_autorizacao <> 'NN'));
			end if;
			
		end if;

	elsif (ie_interno_w = '5') then

		dt_envio_w		:= clock_timestamp();
		if (ie_tipo_autorizacao_w = '3') then

			open c03;
			loop
			fetch c03 into
				nr_prescricao_w,
				nr_seq_proc_prescr_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				ie_origem_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				if (ie_origem_w = 'P') then				
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao		= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w
					and	nr_sequencia 		= nr_seq_proc_prescr_w;
				else
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w;					
				end if;
			end loop;
			close c03;
		end if;

	elsif (ie_interno_w = '10') then

		dt_retorno_w		:= clock_timestamp();

		select	coalesce(max(nr_seq_interno),0),
			max(nr_doc_convenio),
			max(cd_senha),
			coalesce(max(qt_dia_internacao),0),
			max(dt_inicio_vigencia),
			max(dt_final_vigencia)
		into STRICT	nr_seq_interno_w,
			nr_doc_convenio_atend_w,
			cd_senha_atend_w,
			qt_dia_internacao_w,
			dt_inicio_vig_eup_w,
			dt_fim_vig_eup_w
		from	atend_categoria_convenio
		where	nr_atendimento	= nr_atendimento_w
		and	cd_convenio	= cd_convenio_w
		and	dt_inicio_vigencia	=
				(SELECT	max(dt_inicio_vigencia)
				from	atend_categoria_convenio
				where	nr_atendimento	= nr_atendimento_w
				and	cd_convenio	= cd_convenio_w);
				
		if (ie_tipo_autorizacao_w = '2') and 		         /*Tratamento para prorrogacoes*/
			(coalesce(ie_autor_prorrog_atend_w,'S') = 'N') then		/*Se nao cria novo registro, mas apenas atualiza o existente, */

                                                                                 /*tem que somar aos dias ja autorizados, os novos dias que foram autorizados na prorrogacao*/

			qt_dia_autorizado_w	:= qt_dia_internacao_w + qt_dia_autorizado_w;

		end if;		

		/*Atualizar guia na EUP ao autorizar campo ie_atualiza_guia_eup */


		/* (A,S,N)(Sempre,Sempre que nao houver nada informado no campo "Guia",Nao atualizar)*/

		if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (nr_seq_interno_w IS NOT NULL AND nr_seq_interno_w::text <> '') and
			((coalesce(ie_autor_prorrog_atend_w,'S') = 'N') or (ie_tipo_autorizacao_w <> '2')) then				
			
			nr_doc_atualizar_w 		:= null;
			cd_senha_atualizar_w 		:= null;
			qt_dias_atualizar_w		:= null;
			dt_inicio_vig_atualizar_w	:= null;
			dt_fim_vig_atualizar_w		:= null;
			
			if (ie_atualiza_guia_eup_w = 'A') then /* Sempre */
				if (cd_senha_w IS NOT NULL AND cd_senha_w::text <> '') then
					cd_senha_atualizar_w := cd_senha_w;
				end if;
				if (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') then
					nr_doc_atualizar_w := nr_doc_convenio_w;
				end if;
			elsif (ie_atualiza_guia_eup_w = 'S') then /*Sempre que nao houver nada informado no campo "Guia",*/
			
				if	((coalesce(cd_senha_atend_w::text, '') = '') and (cd_senha_w IS NOT NULL AND cd_senha_w::text <> '')) then
					cd_senha_atualizar_w := cd_senha_w;
				end if;
				if	((coalesce(nr_doc_convenio_atend_w::text, '') = '') and (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '')) then
					nr_doc_atualizar_w := nr_doc_convenio_w;
				end if;
			elsif	(ie_atualiza_guia_eup_w = 'I' AND ie_tipo_autorizacao_w = '1') then --Sempre me autorizacoes de internacao
				if	((coalesce(cd_senha_atend_w,'X') <> coalesce(cd_senha_w,'X')) and (cd_senha_w IS NOT NULL AND cd_senha_w::text <> '')) then
					cd_senha_atualizar_w := cd_senha_w;
				end if;
				if	((coalesce(nr_doc_convenio_atend_w,'X') <> coalesce(nr_doc_convenio_w,'X')) and (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '')) then
					nr_doc_atualizar_w := nr_doc_convenio_w;
				end if;
			elsif	((ie_atualiza_guia_eup_w = 'P') and (ie_tipo_autorizacao_w in ('1','2'))) then --Sempre me autorizacoes de internacao e prorrogacao
				if	((coalesce(cd_senha_atend_w,'X') <> coalesce(cd_senha_w,'X')) and (cd_senha_w IS NOT NULL AND cd_senha_w::text <> '')) then
					cd_senha_atualizar_w := cd_senha_w;
				end if;
				if	((coalesce(nr_doc_convenio_atend_w,'X') <> coalesce(nr_doc_convenio_w,'X')) and (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '')) then
					nr_doc_atualizar_w := nr_doc_convenio_w;
				end if;
			end if;
			
			if (nr_doc_atualizar_w IS NOT NULL AND nr_doc_atualizar_w::text <> '') or (cd_senha_atualizar_w IS NOT NULL AND cd_senha_atualizar_w::text <> '')then
				ie_guia_senha_w := 'S';
			end if;
			
			if (ie_atualizar_dias_autor_w = 'S') and
				((coalesce(qt_dia_internacao_w,0) <> coalesce(qt_dia_autorizado_w,0)) and (coalesce(qt_dia_autorizado_w,0) > 0)) then
				qt_dias_atualizar_w := qt_dia_autorizado_w;
			end if;
			
			
			if (ie_atualizar_vigencia_atend_w = 'S') then
				dt_inicio_vig_atualizar_w := dt_inicio_vigencia_w;
			end if;
			
			if (ie_atual_fim_vigencia_atend_w = 'S') and (ie_tipo_autorizacao_w in ('1','2')) and (dt_fim_vigencia_w IS NOT NULL AND dt_fim_vigencia_w::text <> '') and (coalesce(dt_fim_vigencia_w,clock_timestamp()) <> coalesce(dt_fim_vig_eup_w,clock_timestamp())) then
				dt_fim_vig_atualizar_w	:= dt_fim_vigencia_w;
			end if;						
			
			begin	
			update	atend_categoria_convenio a
			set	a.cd_senha		= coalesce(cd_senha_atualizar_w,a.cd_senha),
				a.nr_doc_convenio		= coalesce(nr_doc_atualizar_w,a.nr_doc_convenio),
				a.qt_dia_internacao	= coalesce(qt_dias_atualizar_w,a.qt_dia_internacao),
				dt_inicio_vigencia	= coalesce(dt_inicio_vig_atualizar_w,a.dt_inicio_vigencia),
				a.dt_final_vigencia	= coalesce(dt_fim_vig_atualizar_w,a.dt_final_vigencia),
				a.dt_atualizacao		= clock_timestamp(),
				a.nm_usuario		= nm_usuario_p,
				a.nr_doc_conv_principal 	= CASE WHEN ie_param_688_eup_w='S' THEN   coalesce(nr_doc_atualizar_w,a.nr_doc_convenio) WHEN ie_param_688_eup_w='N' THEN  a.nr_doc_conv_principal END
			where	a.nr_seq_interno		= nr_seq_interno_w
			and	a.nr_atendimento		= nr_atendimento_w
			and	((ie_guia_senha_w		= 'S') or (coalesce(qt_dias_atualizar_w,0) 	>  0) or (dt_inicio_vig_atualizar_w IS NOT NULL AND dt_inicio_vig_atualizar_w::text <> '') or (dt_fim_vig_atualizar_w IS NOT NULL AND dt_fim_vig_atualizar_w::text <> ''));
			exception
			when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1070336);
			end;
			
		end if;

		if (ie_atualiza_guia_age_cons_w = 'S') and (nr_seq_agenda_consulta_w IS NOT NULL AND nr_seq_agenda_consulta_w::text <> '') then

			open c16;
			loop
			fetch c16 into
				nr_secao_w,
				nr_seq_agenda_sessao_w;
			EXIT WHEN NOT FOUND; /* apply on c16 */
				if (coalesce(nr_seq_agenda_sessao_w,0) > 0) then				
					update	agenda_consulta
                                             set	cd_senha		= coalesce(cd_senha,cd_senha_w),
                                                      nr_doc_convenio	= coalesce(nr_doc_convenio,nr_doc_convenio_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
                                             where	nr_sequencia	= nr_seq_agenda_sessao_w;
				end if;
			end loop;
			close c16;
			
			update	agenda_consulta
			set	cd_senha		= coalesce(cd_senha,cd_senha_w),
				nr_doc_convenio	= coalesce(nr_doc_convenio,nr_doc_convenio_w),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_agenda_consulta_w;
			
			update	prescr_procedimento p
			set	ie_autorizacao 	= 'A',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	p.nr_seq_agenda_cons 	= nr_seq_agenda_consulta_w
		        and  	exists (SELECT 1 from procedimento_autorizado a
						where a.nr_sequencia_autor	= nr_sequencia_p
						  and a.nr_seq_agenda_consulta = p.nr_seq_agenda_cons 
						  and a.cd_procedimento = p.cd_procedimento 
						  and a.ie_origem_proced = p.ie_origem_proced);
		end if;

		if (ie_tipo_autorizacao_w = '1') then	-- Internacao
		-- Francisco/Edgar OS 36375 Resolvemos criar um novo registro para ficarem gravadas as alteracoes


			/*if	(nr_seq_interno_w > 0)  then
				update	atend_categoria_convenio
				set	dt_final_vigencia	= dt_fim_vigencia_w,
					dt_atualizacao		= sysdate,
					nm_usuario		= nm_usuario_p,
					cd_senha		= nvl(cd_senha,cd_senha_w),
					qt_dia_internacao	= decode(ie_atualizar_dias_autor_w,'S',qt_dia_autorizado_w,nvl(qt_dia_internacao,qt_dia_autorizado_w)),
					nr_doc_convenio		= nvl(nr_doc_convenio,nr_doc_convenio_w)
				where	nr_seq_interno		= nr_seq_interno_w
				and	nr_atendimento		= nr_atendimento_w;
			end if;*/
			if (coalesce(nr_seq_gestao_w,0) > 0) then

                                    update	gestao_vaga
                                    set 	ie_status 		= 'P',
                                             nm_resp_transf 		= nm_usuario_p,
                                             nm_usuario 		= nm_usuario_p,
                                             dt_atualizacao 		= clock_timestamp(),
					dt_aprovacao		= clock_timestamp()		--SO - 1844925
                                    where 	nr_sequencia 		= nr_seq_gestao_w
				and	ie_atualiza_autor_vaga_w	= 'S';
			end if;

		elsif (ie_tipo_autorizacao_w = '2') then	-- Prorrogacao internacao
			if (nr_seq_interno_w > 0) and (coalesce(ie_autor_prorrog_atend_w,'S') = 'S') then
				begin
				insert into atend_categoria_convenio(nr_atendimento,
					 cd_convenio,
					 cd_categoria,
					 dt_inicio_vigencia,
					 dt_final_vigencia,
					 cd_usuario_convenio,
					 cd_empresa,
					 nr_doc_convenio,
					 cd_tipo_acomodacao,
					 cd_municipio_convenio,
					 cd_convenio_glosa,
					 cd_categoria_glosa,
					 dt_validade_carteira,
					 nr_acompanhante,
					 cd_plano_convenio,
					 cd_dependente,
					 nr_seq_interno,
					 nr_seq_origem,
					 cd_senha,
					 ie_tipo_guia,
					 ds_observacao,
					 qt_dia_internacao,
					 dt_ultimo_pagto,
					 cd_complemento,
					 dt_aceite_dif_acomod,
					 nm_usuario_aceite,
					 ds_observacao_aceite,
					 qt_dieta_acomp,
					 ie_lib_dieta,
					 nm_usuario,
					 dt_atualizacao,
					 nr_seq_cobertura,
					 nr_seq_lib_dieta_conv)
				SELECT	 nr_atendimento,
					 cd_convenio,
					 cd_categoria,
					 CASE WHEN coalesce(ie_data_autor_prorrog_w,'N')='N' THEN coalesce(dt_final_vigencia,clock_timestamp())  ELSE dt_inicio_vigencia_w END ,
					 dt_fim_vigencia_w,
					 cd_usuario_convenio,
					 cd_empresa,
					 coalesce(nr_doc_convenio_w,nr_doc_convenio),
					 cd_tipo_acomodacao,
					 cd_municipio_convenio,
					 cd_convenio_glosa,
					 cd_categoria_glosa,
					 dt_validade_carteira,
					 nr_acompanhante,
					 cd_plano_convenio,
					 cd_dependente,
					 nextval('atend_categoria_convenio_seq'),
					 nr_seq_origem,
					 coalesce(cd_senha_w,cd_senha),
					 ie_tipo_guia,
					 ds_observacao,
					 qt_dia_autorizado_w,
					 dt_ultimo_pagto,
					 cd_complemento,
					 dt_aceite_dif_acomod,
					 nm_usuario_aceite,
					 ds_observacao_aceite,
					 qt_dieta_acomp,
					 ie_lib_dieta,
					 nm_usuario_p,
					 clock_timestamp(),
					 nr_seq_cobertura,
					 nr_seq_lib_dieta_conv
				from	 atend_categoria_convenio
				where	 nr_atendimento	= nr_atendimento_w
				and	 nr_seq_interno = nr_seq_interno_w;
				exception
				when unique_violation then
					null;  /* Retirei este ttmento para deixar autorizar o registro. wheb_mensagem_pck.exibir_mensagem_abort(224000); Ja existe um registro para esta autorizacao no atendimento do paciente!*/
				end;
			end if;

		elsif (ie_tipo_autorizacao_w in ('3', '6')) then	-- Procedimentos/Consultas
			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then --Francisco - OS 41850 - 22/11/06
				select	count(*)
				into STRICT	qt_autor_agenda_w
				from	autorizacao_convenio
				where	nr_seq_agenda	= nr_seq_agenda_w;

				if (qt_autor_agenda_w > 1) and (ie_autor_compl_agenda_w = 'S') then

					select	count(*)
					into STRICT	qt_autorizacao_aprov_w
					from	estagio_autorizacao b,
						autorizacao_convenio a
					where	a.nr_seq_estagio	= b.nr_sequencia
					and	b.ie_interno		= '10'
					and	a.nr_seq_agenda		= nr_seq_agenda_w;

					if (qt_autorizacao_aprov_w + 1 = qt_autor_agenda_w) then
						update	agenda_paciente
						set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
							nr_doc_convenio = coalesce(nr_doc_convenio,nr_doc_convenio_w),
							ds_senha	= coalesce(ds_senha,cd_senha_w),
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	nr_sequencia	= nr_seq_agenda_w;
					end if;
					
					if (nr_seq_agenda_proc_w IS NOT NULL AND nr_seq_agenda_proc_w::text <> '') then
						update	agenda_paciente_proc a
						set	a.ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	a.nr_sequencia	= nr_seq_agenda_w
						and 	a.nr_seq_agenda	= nr_seq_agenda_proc_w
						and	exists (	SELECT	1
								from	procedimento_autorizado x
								where	x.nr_seq_agenda = a.nr_sequencia
								and	x.nr_seq_agenda_proc = a.nr_seq_agenda
								and	x.cd_procedimento   = a.cd_procedimento
								and	x.ie_origem_proced  = a.ie_origem_proced
								and	x.nr_sequencia_autor = nr_sequencia_p);
					end if;
					

				else
					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
						nr_doc_convenio = coalesce(nr_doc_convenio,nr_doc_convenio_w),
						ds_senha	= coalesce(ds_senha,cd_senha_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w;
					
					
					if (nr_seq_agenda_proc_w IS NOT NULL AND nr_seq_agenda_proc_w::text <> '') then
						update	agenda_paciente_proc a
						set	a.ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	a.nr_sequencia	= nr_seq_agenda_w
						and 	a.nr_seq_agenda	= nr_seq_agenda_proc_w
						and	exists (	SELECT	1
								from	procedimento_autorizado x
								where	x.nr_seq_agenda = a.nr_sequencia
								and	x.nr_seq_agenda_proc = a.nr_seq_agenda
								and	x.cd_procedimento   = a.cd_procedimento
								and	x.ie_origem_proced  = a.ie_origem_proced
								and	x.nr_sequencia_autor = nr_sequencia_p);
					end if;
				end if;
				
				open c17;
				loop
				fetch c17 into	
					nr_seq_agenda_proc_ww;
				EXIT WHEN NOT FOUND; /* apply on c17 */

					update	agenda_paciente_proc a
					set	a.ie_autorizacao= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	a.nr_sequencia	= nr_seq_agenda_w
					and 	a.nr_seq_agenda	= nr_seq_agenda_proc_ww
					and	exists (	SELECT	1
							from	procedimento_autorizado x
							where	x.nr_seq_agenda = a.nr_sequencia
							and	x.nr_seq_agenda_proc = a.nr_seq_agenda
							and	x.cd_procedimento   = a.cd_procedimento
							and	x.ie_origem_proced  = a.ie_origem_proced
							and	x.nr_sequencia_autor = nr_sequencia_p);

				end loop;
				close c17;				
				
				select	max(a.nr_prescricao),
					max(b.cd_procedimento),
					max(b.ie_origem_proced)
				into STRICT	nr_prescr_agenda_w,
					cd_proc_agenda_w,
					ie_origem_proc_agenda_w
				from	prescr_medica a,
					agenda_paciente b
				where	a.nr_seq_agenda = b.nr_sequencia
				and	b.nr_sequencia = nr_seq_agenda_w;
				
				if (coalesce(nr_prescr_agenda_w::text, '') = '') and (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
					
					select    max(a.nr_prescricao),
							  max(b.cd_procedimento),
							  max(b.ie_origem_proced)
					into STRICT	nr_prescr_agenda_w,
							cd_proc_agenda_w,
							ie_origem_proc_agenda_w
					from	prescr_medica p,
							agenda_paciente b,
							prescr_procedimento a
					where	p.nr_atendimento   = b.nr_atendimento
					  and	p.nr_prescricao	   = a.nr_prescricao
					  and	b.nr_sequencia     =  nr_seq_agenda_w
					  and	b.nr_atendimento   =  nr_atendimento_w
					  and   a.ie_autorizacao = 'PA'
                      order by coalesce(a.nr_seq_agenda,0);
					
				end if;
				
				
				if (nr_prescr_agenda_w IS NOT NULL AND nr_prescr_agenda_w::text <> '') then
					
					update	prescr_procedimento
					set	ie_autorizacao 	= 'A',
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao 	= nr_prescr_agenda_w
					and     nr_sequencia in (	SELECT 	y.nr_sequencia
									from   	agenda_paciente x,
										prescr_procedimento y,
										procedimento_autorizado z
									where  	x.nr_sequencia = y.nr_seq_agenda
									and    	y.nr_prescricao = nr_prescr_agenda_w
									and	z.nr_seq_agenda = x.nr_sequencia
									and    	z.cd_procedimento = y.cd_procedimento
									and	z.ie_origem_proced = y.ie_origem_proced
									and    	z.nr_sequencia_autor = nr_sequencia_p);
					
				end if;
				
				open C13;
				loop
				fetch C13 into	
					nr_seq_agenda_proc_autor_w;
				EXIT WHEN NOT FOUND; /* apply on C13 */
					begin
					
					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
						nr_doc_convenio = coalesce(nr_doc_convenio,nr_doc_convenio_w),
						ds_senha	= coalesce(ds_senha,cd_senha_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()					
					where	nr_sequencia	= nr_seq_agenda_proc_autor_w;					
					
					end;
				end loop;
				close C13;
				
				
				
			end if;

			/* Francisco - 07/07/2007 - OS 42282
			A rotina abaixo so deve ser executada quando for de reprovado para autorizado */
			if (ie_interno_atual_w = '90') then

				select	coalesce(max(a.nr_interno_conta),0)
				into STRICT	nr_interno_conta_w
				from	conta_paciente a
				where	a.nr_atendimento	= nr_atendimento_w
				and	a.cd_convenio_parametro	= cd_convenio_w
				and	a.cd_estabelecimento	= cd_estabelecimento_w
				and	a.ie_status_acerto	= 1
				and	a.dt_periodo_inicial	= (SELECT	max(x.dt_periodo_inicial)
								   from		conta_paciente x
								   where	x.nr_atendimento	= a.nr_atendimento
								   and		x.cd_estabelecimento	= cd_estabelecimento_w);

				if (nr_interno_conta_w <> 0) then
					SELECT * FROM obter_convenio_particular(cd_estabelecimento_w, cd_convenio_partic_w, cd_categoria_w) INTO STRICT cd_convenio_partic_w, cd_categoria_w;
					open c02;
					loop
					fetch c02 into
						nr_seq_procedimento_w,
						nr_interno_conta_partic_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */

						CALL troca_conta_mat_proc(null,nr_seq_procedimento_w,nr_interno_conta_w,ie_commit_p);

						select	count(*)
						into STRICT	cont_w
						from	valores_atend_paciente_v
						where	nr_interno_conta = nr_interno_conta_partic_w;

						if (cont_w = 0) then
							CALL excluir_conta_paciente(nr_interno_conta_partic_w,nm_usuario_p,ie_commit_p);
						end if;

					end loop;
					close c02;
				end if;
			end if;

			if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '')and
				((nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') or (cd_senha_w IS NOT NULL AND cd_senha_w::text <> ''))then
				begin

				open c15;
				loop
				fetch c15 into
					nr_seq_propaci_w,
					nr_doc_conv_autor_w,
					cd_senha_autor_w,
					qt_autorizada_w;
				EXIT WHEN NOT FOUND; /* apply on c15 */
					if ((ie_doc_autorizacao_w <> 'N') and ((ie_autor_qtde_w = 'N') or (coalesce(qt_autorizada_w,0) > 0))) then
							
						--se tiver autorizacao e ainda nao estiver autorizada deve deixar guia e senha aguardando retorno
						nr_doc_conv_autor_w	:= null;
						cd_senha_autor_w	:= null;

						--se ja foi autorizado, ja insere com guia e senha da autorizacao
						if (ie_atualiza_guia_w	= 'S') then
							nr_doc_conv_autor_w	:= nr_doc_convenio_w;
						end if;
						
						if (ie_atualiza_senha_w	= 'S') then
							cd_senha_autor_w	:= cd_senha_w;
						end if;

						update	procedimento_paciente x
						set	x.cd_senha_autor		= cd_senha_w,
							x.cd_autor_convenio	= nr_doc_convenio_w,
							x.cd_situacao_glosa	= 0,
							x.nr_doc_convenio		= nr_doc_conv_autor_w, /*lhalves OS 544139 em 12/02/2013*/
							x.cd_senha		= cd_senha_autor_w,
							x.nm_usuario		= nm_usuario_p,
							x.dt_atualizacao		= clock_timestamp()							
						where	x.cd_convenio		= cd_convenio_w
						and	x.nr_atendimento		= nr_atendimento_w
						and	x.nr_sequencia		= nr_seq_propaci_w;						
					end if;
				end loop;
				close c15;
				
				end;
			end if;


			open c03;
			loop
			fetch c03 into
				nr_prescricao_w,
				nr_seq_proc_prescr_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				ie_origem_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				if (ie_origem_w = 'P') then			
					update	prescr_procedimento
					set	ie_autorizacao	= 'A',
						cd_senha		= CASE WHEN ie_atualiza_guia_prescr_w='S' THEN cd_senha_w  ELSE cd_senha END ,
						nr_doc_convenio	= CASE WHEN ie_atualiza_guia_prescr_w='S' THEN nr_doc_convenio_w  ELSE nr_doc_convenio END ,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w
					and	nr_sequencia 	= nr_seq_proc_prescr_w;
				else
					update	prescr_procedimento
					set	ie_autorizacao	= 'A',
						cd_senha		= CASE WHEN ie_atualiza_guia_prescr_w='S' THEN cd_senha_w  ELSE cd_senha END ,
						nr_doc_convenio	= CASE WHEN ie_atualiza_guia_prescr_w='S' THEN nr_doc_convenio_w  ELSE nr_doc_convenio END ,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w;					
				end if;
			end loop;
			close c03;

			open c08;
			loop
			fetch c08 into
				nr_seq_proc_autor_w,
				nr_doc_conv_autor_w,
				cd_senha_autor_w,
				qt_autorizada_w;
			EXIT WHEN NOT FOUND; /* apply on c08 */
				if ((ie_doc_autorizacao_w <> 'N') and ((ie_autor_qtde_w = 'N') or (coalesce(qt_autorizada_w,0) > 0))) then
					if (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') or (cd_senha_w IS NOT NULL AND cd_senha_w::text <> '') then
						
						--se tiver autorizacao e ainda nao estiver autorizada deve deixar guia e senha aguardando retorno
						nr_doc_conv_autor_w	:= null;
						cd_senha_autor_w	:= null;

						--se ja foi autorizado, ja insere com guia e senha da autorizacao
						if (ie_atualiza_guia_w	= 'S') then
							nr_doc_conv_autor_w	:= nr_doc_convenio_w;
						end if;
						
						if (ie_atualiza_senha_w	= 'S') then
							cd_senha_autor_w	:= cd_senha_w;
						end if;
					end if;							

					update	procedimento_paciente
					set	nr_doc_convenio		= nr_doc_conv_autor_w,
						cd_senha		= cd_senha_autor_w,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp()
					where	nr_seq_proc_autor	= nr_seq_proc_autor_w;
				end if;
			end loop;
			close c08;

		elsif (ie_tipo_autorizacao_w = '4') then	-- Materiais/Medicamentos
			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then

				/*select	count(*)
				into	qt_autor_agenda_w
				from	autorizacao_convenio
				where	nr_seq_agenda	= nr_seq_agenda_w;*/
				if (coalesce(nr_seq_agenda_w,0) > 0) and (ie_autor_compl_agenda_w = 'S') then

					select	count(*)
					into STRICT	qt_autorizacao_aprov_w
					from	estagio_autorizacao b,
						autorizacao_convenio a
					where	a.nr_seq_estagio	= b.nr_sequencia
					and	b.ie_interno		= '10'
					and	a.nr_seq_agenda		= nr_seq_agenda_w;

					if (qt_autorizacao_aprov_w + 1 = qt_autor_agenda_w) then
						update	agenda_paciente
						set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
							nr_doc_convenio = coalesce(nr_doc_convenio,nr_doc_convenio_w),
							ds_senha	= coalesce(ds_senha,cd_senha_w) ,
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	nr_sequencia	= nr_seq_agenda_w;
					end if;
				else

					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
						nr_doc_convenio = coalesce(nr_doc_convenio,nr_doc_convenio_w),
						ds_senha	= coalesce(ds_senha,cd_senha_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w;
				end if;
				
				for r in (select	nr_seq_opme,
						cd_cgc_fabricante,
						cd_material,
						coalesce(coalesce(qt_autorizada,qt_solicitada),0)qt_solic_autor
					from	material_autorizado
					where	nr_sequencia_autor = nr_sequencia_p) loop
					
					if (ie_atual_se_aprovado_w = 'S') then
						/* Tratamento realizado para nao atualizar o OPME para autorizado
						quando o material nao estiver aprovado na Aut mat esp*/
						select	coalesce(max(a.ie_aprovacao),'N')
						into STRICT	ie_aprov_mat_autor_w
						from	material_autor_cirurgia a,
							autorizacao_cirurgia b
						where	a.cd_material 		= r.cd_material
						and	b.nr_sequencia		= a.nr_seq_autorizacao
						and (coalesce(r.cd_cgc_fabricante::text, '') = '' or	
							exists (SELECT 	1
								from 	material_autor_cir_cot x 
								where 	x.cd_cgc = r.cd_cgc_fabricante
								and	x.nr_sequencia = a.nr_sequencia
								and	x.IE_APROVACAO = 'S'))
						and	((b.nr_seq_autor_conv 	= nr_sequencia_p) or (b.nr_sequencia	    	= nr_seq_autor_cirurgia_w));
							
					end if;
					
					if (r.qt_solic_autor > 0) then
					
						if (r.nr_seq_opme IS NOT NULL AND r.nr_seq_opme::text <> '') then
							
							update	agenda_pac_opme
							set	ie_autorizado	= 'A',
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= r.nr_seq_opme
							and	coalesce(ie_aprov_mat_autor_w,'S') = 'S';
							
						elsif (r.cd_cgc_fabricante IS NOT NULL AND r.cd_cgc_fabricante::text <> '') then
							
							update	agenda_pac_opme
							set	ie_autorizado	= 'A',
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	cd_material	= r.cd_material
							and	cd_cgc		= r.cd_cgc_fabricante
							and	coalesce(ie_aprov_mat_autor_w,'S') = 'S';
							
						else
							update	agenda_pac_opme
							set	ie_autorizado	= 'A',
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= nr_seq_pac_opme_w
							and	coalesce(ie_aprov_mat_autor_w,'S') = 'S';
							
						end if;
					
					end if;
					
				end loop;
			end if;
			
			/*A rotina abaixo so deve ser executada quando for de reprovado para autorizado */

			if (ie_interno_atual_w = '90') then

				select	coalesce(max(a.nr_interno_conta),0)
				into STRICT	nr_interno_conta_w
				from	conta_paciente a
				where	a.nr_atendimento	= nr_atendimento_w
				and	a.cd_convenio_parametro	= cd_convenio_w
				and	a.cd_estabelecimento	= cd_estabelecimento_w
				and	a.ie_status_acerto	= 1
				and	a.dt_periodo_inicial	= (SELECT	max(x.dt_periodo_inicial)
								   from		conta_paciente x
								   where	x.nr_atendimento	= a.nr_atendimento
								   and		x.cd_estabelecimento	= cd_estabelecimento_w);

				if (nr_interno_conta_w <> 0) then
					SELECT * FROM obter_convenio_particular(cd_estabelecimento_w, cd_convenio_partic_w, cd_categoria_w) INTO STRICT cd_convenio_partic_w, cd_categoria_w;
					open c14;
					loop
					fetch c14 into
						nr_seq_mat_partic_w,
						nr_interno_conta_partic_w;
					EXIT WHEN NOT FOUND; /* apply on c14 */

						CALL troca_conta_mat_proc(nr_seq_mat_partic_w,null,nr_interno_conta_w,ie_commit_p);

						select	count(*)
						into STRICT	cont_w
						from	valores_atend_paciente_v
						where	nr_interno_conta = nr_interno_conta_partic_w;

						if (cont_w = 0) then
							CALL excluir_conta_paciente(nr_interno_conta_partic_w,nm_usuario_p,ie_commit_p);
						end if;

					end loop;
					close c14;
				end if;
			end if;

			open c09;
			loop
			fetch c09 into
				nr_seq_mat_autor_w,
				nr_doc_conv_autor_w,
				cd_senha_autor_w,
				qt_autorizada_w;
			EXIT WHEN NOT FOUND; /* apply on c09 */
				if ((ie_doc_autorizacao_w <> 'N') and ((ie_autor_qtde_w = 'N') or (coalesce(qt_autorizada_w,0) > 0))) then
					if (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') or (cd_senha_w IS NOT NULL AND cd_senha_w::text <> '') then
						
						--se tiver autorizacao e ainda nao estiver autorizada deve deixar guia e senha aguardando retorno
						nr_doc_conv_autor_w	:= null;
						cd_senha_autor_w	:= null;

						--se ja foi autorizado, ja insere com guia e senha da autorizacao
						if (ie_atualiza_guia_w	= 'S') then
							nr_doc_conv_autor_w	:= nr_doc_convenio_w;
						end if;
						
						if (ie_atualiza_senha_w	= 'S') then
							cd_senha_autor_w	:= cd_senha_w;
						end if;
					end if;							

					update	material_atend_paciente
					set	nr_doc_convenio		= nr_doc_conv_autor_w,
						cd_senha		= cd_senha_autor_w,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp()
					where	nr_seq_mat_autor	= nr_seq_mat_autor_w;
				end if;
			end loop;
			close c09;

			if (coalesce(ie_atualiza_mat_especial_w,'N') = 'S') then
				
				update  	autorizacao_cirurgia
				set     	dt_autorizacao = clock_timestamp(),
					ie_estagio_autor = 3,
					nm_usuario_autorizacao = nm_usuario_p,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where   	nr_seq_autor_conv  = nr_sequencia_p
				and	coalesce(ie_atualiza_regra_w,'N') = 'N';
				
			end if;

		elsif (ie_tipo_autorizacao_w = '5') then	-- Cirurgia
			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then --Francisco - OS 41850 - 22/11/06
				/* Francisco - OS 55838 - 27/04/07 - Gravar guia na agenda */

				select	count(*)
				into STRICT	qt_autor_agenda_w
				from	autorizacao_convenio
				where	nr_seq_agenda	= nr_seq_agenda_w;

				if (qt_autor_agenda_w > 1) and (ie_autor_compl_agenda_w = 'S') then

					select	count(*)
					into STRICT	qt_autorizacao_aprov_w
					from	estagio_autorizacao b,
						autorizacao_convenio a
					where	a.nr_seq_estagio	= b.nr_sequencia
					and	b.ie_interno		= '10'
					and	a.nr_seq_agenda		= nr_seq_agenda_w;

					if (qt_autorizacao_aprov_w + 1 = qt_autor_agenda_w) then

						update	agenda_paciente
						set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
							nr_doc_convenio 	= coalesce(nr_doc_convenio,nr_doc_convenio_w),
							ds_senha		= coalesce(ds_senha,cd_senha_w) ,
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	nr_sequencia	= nr_seq_agenda_w;
					end if;
				else

					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),'A'),
						nr_doc_convenio 	= coalesce(nr_doc_convenio,nr_doc_convenio_w),
						ds_senha		= coalesce(ds_senha,cd_senha_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w;
					
					
					select    max(a.nr_prescricao),
							  max(b.cd_procedimento),
							  max(b.ie_origem_proced)
					into STRICT	nr_prescr_agenda_w,
							cd_proc_agenda_w,
							ie_origem_proc_agenda_w
					from	prescr_medica p,
							agenda_paciente b,
							prescr_procedimento a
					where	p.nr_atendimento   = b.nr_atendimento
					  and	p.nr_prescricao	   = a.nr_prescricao
					  and	b.nr_sequencia     =  nr_seq_agenda_w
					  and   a.ie_autorizacao = 'PA'
                      order by coalesce(a.nr_seq_agenda,0);
					
					
				if (nr_prescr_agenda_w IS NOT NULL AND nr_prescr_agenda_w::text <> '')and (cd_proc_agenda_w IS NOT NULL AND cd_proc_agenda_w::text <> '')then
					
					update	prescr_procedimento
					set	ie_autorizacao 	= 'A',
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao 	= nr_prescr_agenda_w
					and	cd_procedimento	= cd_proc_agenda_w
					and	ie_origem_proced 	= ie_origem_proc_agenda_w;
					
				end if;
					
				end if;

				open c06;
				loop
				fetch c06 into
					nr_seq_autor_cir_w;
				EXIT WHEN NOT FOUND; /* apply on c06 */
					open c07;
					loop
					fetch c07 into
						nr_seq_mat_autor_cir_w,
						cd_material_w,
						qt_material_w,
						nr_seq_opme_cir_w;
					EXIT WHEN NOT FOUND; /* apply on c07 */
						select	coalesce(max(qt_autorizada),0)
						into STRICT	qt_autorizada_mat_w
						from	autorizacao_convenio b,
							material_autorizado a
						where	a.nr_sequencia_autor	= b.nr_sequencia
						and	cd_material		= cd_material_w
						and	((a.nr_seq_opme		= nr_seq_opme_cir_w) or (coalesce(a.nr_seq_opme::text, '') = ''))
						and	nr_seq_agenda		= nr_seq_agenda_w;

						if (qt_autorizada_mat_w > 0) then
							update	material_autor_cirurgia
							set	ie_aprovacao	= 'S',
								qt_material	= CASE WHEN qt_material=0 THEN qt_autorizada_mat_w  ELSE qt_material END ,
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= nr_seq_mat_autor_cir_w;
						end if;
					end loop;
					close c07;

					qt_nao_aprovado_w := 0;

					select	count(ie_aprovacao)
					into STRICT	qt_nao_aprovado_w
					from	material_autor_cirurgia
					where	nr_seq_autorizacao = nr_seq_autor_cir_w
					and	ie_aprovacao = 'N';

					if (qt_nao_aprovado_w = 0)	then
						
						update	autorizacao_cirurgia
						set	dt_autorizacao	= clock_timestamp(),
							nm_usuario_autorizacao	= nm_usuario_p,
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp()
						where	nr_sequencia	= nr_seq_autor_cir_w
						and	coalesce(ie_atualiza_regra_w,'N') = 'N';

					end if;
				end loop;
				close c06;

				open c05;
				loop
				fetch c05 into
					nr_seq_pac_opme_w,
					cd_material_w,
					qt_material_w;
				EXIT WHEN NOT FOUND; /* apply on c05 */

					select	coalesce(max(qt_autorizada),0),
						coalesce(max(nr_seq_opme),0)
					into STRICT	qt_autorizada_mat_w,
						nr_seq_pac_opme_autor_w
					from	material_autorizado
					where	cd_material	= cd_material_w
					and	((nr_seq_opme	= nr_seq_pac_opme_w)or (coalesce(nr_seq_opme::text, '') = ''))
					and	nr_sequencia_autor	= nr_sequencia_p;

					if (coalesce(ie_atualiza_qt_autorizada_w,'N') = 'S') then
						begin
						select	coalesce(max(qt_solicitada),qt_autorizada_mat_w)
						into STRICT	qt_autorizada_mat_w
						from	material_autorizado
						where	coalesce(qt_autorizada,0)	= 0
						and	cd_material		= cd_material_w
						and	nr_sequencia_autor	= nr_sequencia_p;
						end;
					end if;
					
					if (ie_atual_se_aprovado_w = 'S') then
						/* Tratamento realizado para nao atualizar o OPME para autorizado
						quando o material nao estiver aprovado na Aut mat esp*/
						select	coalesce(max(a.ie_aprovacao),'N')
						into STRICT	ie_aprov_mat_autor_w
						from	material_autor_cirurgia a,
							autorizacao_cirurgia b
						where	((a.nr_seq_opme 	= nr_seq_pac_opme_w) or (a.cd_material 		= cd_material_w))
						and	b.nr_sequencia		= a.nr_seq_autorizacao
						and	((b.nr_seq_autor_conv 	= nr_sequencia_p) or (b.nr_sequencia	    	= nr_seq_autor_cirurgia_w));
							
					end if;
					

					if (qt_autorizada_mat_w > 0) and
						((nr_seq_pac_opme_w = nr_seq_pac_opme_autor_w) or (nr_seq_pac_opme_autor_w = 0)) then

						update	agenda_pac_opme
						set	ie_autorizado	= 'A',
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	nr_sequencia	= nr_seq_pac_opme_w
						and	coalesce(ie_aprov_mat_autor_w,'S') = 'S'
						and	exists (SELECT	1
							from	material_autorizado x
							where	x.nr_sequencia_autor 	= nr_sequencia_p
							and	((x.nr_seq_opme = nr_seq_pac_opme_w) or (x.cd_material	= cd_material_w)));
					end if;
				end loop;
				close c05;

			end if;
			if (coalesce(ie_atualiza_mat_especial_w,'N') = 'S') then

				update  	autorizacao_cirurgia
				set     	dt_autorizacao = clock_timestamp(),
					ie_estagio_autor = 3,
					nm_usuario_autorizacao = nm_usuario_p,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where   	nr_sequencia  = nr_seq_autor_cirurgia_w
				and	coalesce(ie_atualiza_regra_w,'N') = 'N';
				

			end if;
		end if;

	elsif (ie_interno_w = '60') then

		dt_envio_w		:= clock_timestamp();
		if (ie_tipo_autorizacao_w = '3') then

			open c03;
			loop
			fetch c03 into
				nr_prescricao_w,
				nr_seq_proc_prescr_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				ie_origem_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				if (ie_origem_w = 'P') then				
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w
					and	nr_sequencia 	= nr_seq_proc_prescr_w;
				else
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w;					
				end if;
			end loop;
			close c03;
			
			if (coalesce(nr_seq_agenda_w,0) > 0) then

				update	agenda_paciente
				set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_w
				and	((ie_atual_agenda_nn_w = 'S') or
					(ie_atual_agenda_nn_w = 'N' AND ie_autorizacao <> 'NN'));
			end if;
		end if;

	elsif (ie_interno_w = '70') then

		dt_envio_w		:= clock_timestamp();
		if (ie_tipo_autorizacao_w = '3') then

			open c03;
			loop
			fetch c03 into
				nr_prescricao_w,
				nr_seq_proc_prescr_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				ie_origem_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				if (ie_origem_w = 'P') then				
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w
					and	nr_sequencia 	= nr_seq_proc_prescr_w;
				else
					update	prescr_procedimento
					set	ie_autorizacao	= ie_autor_agenda_w,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_prescricao	= nr_prescricao_w
					and	cd_procedimento 	= cd_procedimento_w
					and  	ie_origem_proced 	= ie_origem_proced_w;					
				end if;
			end loop;
			close c03;
			
			if (coalesce(nr_seq_agenda_w,0) > 0) then

				update	agenda_paciente
				set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_w
				and	((ie_atual_agenda_nn_w = 'S') or
					(ie_atual_agenda_nn_w = 'N' AND ie_autorizacao <> 'NN'));
			end if;

		elsif (ie_tipo_autorizacao_w = '4') then	-- Materiais/Medicamentos
			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then

				/*select	count(*)
				into	qt_autor_agenda_w
				from	autorizacao_convenio
				where	nr_seq_agenda	= nr_seq_agenda_w;*/
				if (coalesce(nr_seq_agenda_w,0) > 0) then
					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w;
				end if;

				open c05;
				loop
				fetch c05 into
					nr_seq_pac_opme_w,
					cd_material_w,
					qt_material_w;
				EXIT WHEN NOT FOUND; /* apply on c05 */

					select	coalesce(max(nr_seq_opme),0)
					into STRICT	nr_seq_pac_opme_autor_w
					from	material_autorizado
					where	nr_sequencia_autor 	= nr_sequencia_p
					and	cd_material		= cd_material_w;
					
					
					

					update	agenda_pac_opme
					set	ie_autorizado	= 'N',
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_pac_opme_w
					and	nr_sequencia	= nr_seq_pac_opme_autor_w
					and	exists (SELECT	1
							from	material_autorizado x
							where	x.nr_sequencia_autor 	= nr_sequencia_p
							and	((x.nr_seq_opme = nr_seq_pac_opme_w) or (x.cd_material	= cd_material_w)));

				end loop;
				close c05;
			end if;

			if (coalesce(ie_atualiza_mat_especial_w,'N') = 'S') then
			
				update   autorizacao_cirurgia
				set      dt_cancelamento   = clock_timestamp(),
					ie_estagio_autor  = 6,
					nm_usuario_cancel = nm_usuario_p,
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where    nr_seq_autor_conv = nr_sequencia_p
				and	coalesce(ie_atualiza_regra_w,'N') = 'N';
				
			end if;

		elsif (ie_tipo_autorizacao_w = '5') then	-- Cirurgia
			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then

				/*select	count(*)
				into	qt_autor_agenda_w
				from	autorizacao_convenio
				where	nr_seq_agenda	= nr_seq_agenda_w;*/
				if (coalesce(nr_seq_agenda_w,0) > 0) then

					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w;
				end if;

				open c05;
				loop
				fetch c05 into
					nr_seq_pac_opme_w,
					cd_material_w,
					qt_material_w;
				EXIT WHEN NOT FOUND; /* apply on c05 */

					select	coalesce(max(nr_seq_opme),0)
					into STRICT	nr_seq_pac_opme_autor_w
					from	material_autorizado
					where	nr_sequencia_autor 	= nr_sequencia_p
					and	((nr_seq_opme = nr_seq_pac_opme_w) or (cd_material	= cd_material_w));

					update	agenda_pac_opme
					set	ie_autorizado	= 'N',
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_pac_opme_w
					and	nr_sequencia	= nr_seq_pac_opme_autor_w
					and	exists (SELECT	1
							from	material_autorizado x
							where	x.nr_sequencia_autor 	= nr_sequencia_p
							and	((x.nr_seq_opme = nr_seq_pac_opme_w) or (x.cd_material	= cd_material_w)));

				end loop;
				close c05;
			end if;

			if (coalesce(ie_atualiza_mat_especial_w,'N') = 'S') then

				update  	autorizacao_cirurgia
				set     	dt_cancelamento = clock_timestamp(),
					ie_estagio_autor = 6,
					nm_usuario_cancel = nm_usuario_p,
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where  	nr_sequencia  = nr_seq_autor_cirurgia_w
				and	coalesce(ie_atualiza_regra_w,'N') = 'N';

			end if;
		end if;
		
		update	autorizacao_integracao set
			cd_status_autorizacao 	= 'C', --cancelado
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_sequencia_autor = nr_sequencia_p
		and	coalesce(cd_status_autorizacao,'P') <> 'C';

	elsif (ie_interno_w = '90') then			-- Reprovado
		if (ie_tipo_autorizacao_w = '1') then	-- Internacao
			if (coalesce(nr_seq_gestao_w,0) > 0) then

				update	gestao_vaga
				set 	ie_status = 'N',
					ie_resp_recusa 	= nm_usuario_p,
					nm_usuario 	= nm_usuario_p,
					dt_atualizacao 	= clock_timestamp()
				where 	nr_sequencia 	= nr_seq_gestao_w
				and	ie_atualiza_autor_vaga_w	= 'S';
			end if;
			
			if (coalesce(nr_seq_agenda_w,0) > 0) then

				update	agenda_paciente
				set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_w;
			end if;

		elsif (ie_tipo_autorizacao_w = '3') then	-- Procedimentos
			open c01;
			loop
			fetch c01 into
				nr_seq_procedimento_w,
				ds_obs_proc_autor_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				CALL trocar_convenio_particular(nr_seq_procedimento_w, nm_usuario_p, 'P');

				update	procedimento_paciente
				set	ds_observacao	= substr(ds_observacao || ' - ' || ds_obs_proc_autor_w,1,255),
					cd_situacao_glosa	= 1,
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_procedimento_w;
			end loop;
			close c01;


			open c03;
			loop
			fetch c03 into
				nr_prescricao_w,
				nr_seq_proc_prescr_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				ie_origem_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */

				if (ie_alt_conv_part_prescr_porc_w = 'S') then
					begin

					SELECT * FROM obter_convenio_particular(cd_estabelecimento_w, cd_convenio_partic_w, cd_categoria_w) INTO STRICT cd_convenio_partic_w, cd_categoria_w;

						if (ie_origem_w = 'P') then			
							update	prescr_procedimento
							set	cd_convenio		= cd_convenio_partic_w,
								cd_categoria		= cd_categoria_w,
								ie_autorizacao		= 'L',
								nm_usuario		= nm_usuario_p,
								dt_atualizacao		= clock_timestamp()
							where	nr_prescricao		= nr_prescricao_w
							and	cd_procedimento 		= cd_procedimento_w
							and  	ie_origem_proced 		= ie_origem_proced_w
							and	nr_sequencia 		= nr_seq_proc_prescr_w;
						else
							update	prescr_procedimento
							set	cd_convenio		= cd_convenio_partic_w,
								cd_categoria		= cd_categoria_w,
								ie_autorizacao		= 'L',
								nm_usuario		= nm_usuario_p,
								dt_atualizacao		= clock_timestamp()
							where	nr_prescricao		= nr_prescricao_w
							and	cd_procedimento 		= cd_procedimento_w
							and  	ie_origem_proced 		= ie_origem_proced_w;					
						end if;
					end;
				else
					begin
						if (ie_origem_w = 'P') then
							update	prescr_procedimento
							set	ie_autorizacao		= 'B',
								nm_usuario		= nm_usuario_p,
								dt_atualizacao		= clock_timestamp()
							where	nr_prescricao		= nr_prescricao_w
							and	cd_procedimento 		= cd_procedimento_w
							and 	ie_origem_proced 		= ie_origem_proced_w
							and	nr_sequencia 		= nr_seq_proc_prescr_w;
						else
							update	prescr_procedimento
							set	ie_autorizacao		= 'B',
								nm_usuario		= nm_usuario_p,
								dt_atualizacao		= clock_timestamp()
							where	nr_prescricao		= nr_prescricao_w
							and	cd_procedimento 		= cd_procedimento_w
							and 	ie_origem_proced 		= ie_origem_proced_w;
						end if;
					end;
				end if;
			end loop;
			close c03;
			
			if (coalesce(nr_seq_agenda_w,0) > 0) then

				update	agenda_paciente
				set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_w;
			end if;

		elsif (ie_tipo_autorizacao_w = '4') then
		
			if (coalesce(ie_desdobrar_itens_conta_w,'N') = 'N') then
				open c04;
				loop
				fetch c04 into
					nr_seq_material_w,
					ds_obs_mat_autor_w;
				EXIT WHEN NOT FOUND; /* apply on c04 */
					CALL trocar_convenio_particular(nr_seq_material_w, nm_usuario_p, 'M');

					update	material_atend_paciente
					set	ds_observacao		= substr(ds_observacao || ' - ' || ds_obs_mat_autor_w,1,255),
						cd_situacao_glosa		= 1,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp()
					where	nr_sequencia		= nr_seq_material_w;
				end loop;
				close c04;
			elsif (coalesce(ie_desdobrar_itens_conta_w,'N') = 'S') then
			
				open c11;
				loop
				fetch c11 into
					nr_seq_material_w,
					ds_obs_mat_autor_w;
				EXIT WHEN NOT FOUND; /* apply on c11 */
					CALL trocar_convenio_particular(nr_seq_material_w, nm_usuario_p, 'M');

					update	material_atend_paciente
					set	ds_observacao		= substr(ds_observacao || ' - ' || ds_obs_mat_autor_w,1,255),
						cd_situacao_glosa		= 1,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp()
					where	nr_sequencia		= nr_seq_material_w;
				end loop;
				close c11;
				
			end if;

			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then

				/*select	count(*)
				into	qt_autor_agenda_w
				from	autorizacao_convenio
				where	nr_seq_agenda	= nr_seq_agenda_w;*/
				if (coalesce(nr_seq_agenda_w,0) > 0) then
					update	agenda_paciente
					set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),ie_autor_agenda_w),
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_agenda_w;
				end if;
				
				for r in (SELECT	nr_seq_opme,
						cd_cgc_fabricante,
						cd_material
					from	material_autorizado
					where	nr_sequencia_autor = nr_sequencia_p) loop
					
					if (r.nr_seq_opme IS NOT NULL AND r.nr_seq_opme::text <> '') then
						
						update	agenda_pac_opme
						set	ie_autorizado	= 'N',
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	nr_sequencia	= r.nr_seq_opme;
						
					elsif (r.cd_cgc_fabricante IS NOT NULL AND r.cd_cgc_fabricante::text <> '') then
						
						update	agenda_pac_opme
						set	ie_autorizado	= 'N',
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	cd_material	= r.cd_material
						and	cd_cgc		= r.cd_cgc_fabricante;
					else
						update	agenda_pac_opme
						set	ie_autorizado	= 'N',
							nm_usuario	= nm_usuario_p,
							dt_atualizacao	= clock_timestamp()
						where	cd_material	= r.cd_material
						and	coalesce(cd_cgc::text, '') = '';
						
					end if;
					
					
					
				end loop;
			end if;

			if (ie_alt_conv_part_prescr_mat_w = 'S') then
				begin
				open c10;
				loop
				fetch c10 into
					nr_prescricao_w,
					nr_seq_proc_prescr_w,
					cd_material_w;
				EXIT WHEN NOT FOUND; /* apply on c10 */
					SELECT * FROM obter_convenio_particular(cd_estabelecimento_w, cd_convenio_partic_w, cd_categoria_w) INTO STRICT cd_convenio_partic_w, cd_categoria_w;

					update	prescr_material
					set	cd_convenio		= cd_convenio_partic_w,
						cd_categoria		= cd_categoria_w,
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp()
					where	nr_prescricao		= nr_prescricao_w
					and	cd_material	 	= cd_material_w;
				end loop;
				close c10;
				end;
			end if;

		elsif (ie_tipo_autorizacao_w = '5') then	-- Cirurgia
			if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then

				update	agenda_paciente
				set	ie_autorizacao	= coalesce(obter_estagio_autor_agenda(nr_seq_agenda_w),coalesce(ie_autor_agenda_w,'PA')),
					nr_doc_convenio  = NULL,
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_w;

				open c06;
				loop
				fetch c06 into
					nr_seq_autor_cir_w;
				EXIT WHEN NOT FOUND; /* apply on c06 */
					open c07;
					loop
					fetch c07 into
						nr_seq_mat_autor_cir_w,
						cd_material_w,
						qt_material_w,
						nr_seq_opme_cir_w;
					EXIT WHEN NOT FOUND; /* apply on c07 */
						select	coalesce(max(qt_autorizada),0)
						into STRICT	qt_autorizada_mat_w
						from	autorizacao_convenio b,
							material_autorizado a
						where	a.nr_sequencia_autor	= b.nr_sequencia
						and	cd_material		= cd_material_w
						and	((a.nr_seq_opme		= nr_seq_opme_cir_w) or (coalesce(a.nr_seq_opme::text, '') = ''))
						and	nr_seq_agenda		= nr_seq_agenda_w;

						--if	(qt_autorizada_mat_w >= qt_material_w) then
							update	material_autor_cirurgia
							set	ie_aprovacao	= CASE WHEN qt_solicitada=qt_autorizada_mat_w THEN 'S'  ELSE 'N' END ,
								qt_material	= CASE WHEN qt_material=0 THEN qt_autorizada_mat_w  ELSE qt_material END ,
								nm_usuario	= nm_usuario_p,
								dt_atualizacao	= clock_timestamp()
							where	nr_sequencia	= nr_seq_mat_autor_cir_w;
						--end if;
					end loop;
					close c07;
				end loop;
				close c06;

				open c05;
				loop
				fetch c05 into
					nr_seq_pac_opme_w,
					cd_material_w,
					qt_material_w;
				EXIT WHEN NOT FOUND; /* apply on c05 */

					select	coalesce(max(nr_seq_opme),0)
					into STRICT	nr_seq_pac_opme_autor_w
					from	material_autorizado
					where	nr_sequencia_autor 	= nr_sequencia_p
					and	((nr_seq_opme = nr_seq_pac_opme_w) or (cd_material	= cd_material_w));

					update	agenda_pac_opme
					set	ie_autorizado	= 'N',
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_pac_opme_w
					and	nr_sequencia	= nr_seq_pac_opme_autor_w
					and	exists (SELECT	1
							from	material_autorizado x
							where	x.nr_sequencia_autor 	= nr_sequencia_p
							and	((x.nr_seq_opme = nr_seq_pac_opme_w) or (x.cd_material	= cd_material_w)));
				end loop;
				close c05;
			end if;
		end if;

		dt_retorno_w		:= clock_timestamp();
	end if;

	/*  Francisco - OS 165733 - Francisco - Mudei mais para o inicio da procedure
	Devido a problemas nas triggers de autorizacao cirurgia
	update	autorizacao_convenio
	set	nr_seq_estagio		= nr_seq_estagio_p,
		dt_envio		= nvl(dt_envio, dt_envio_w),
		dt_retorno		= nvl(dt_retorno, dt_retorno_w),
		nm_usuario		= nm_usuario_p,
		dt_atualizacao		= sysdate
	where	nr_sequencia		= nr_sequencia_p; 

	select	ds_estagio
	into	ds_estagio_w
	from	estagio_autorizacao
	where	nr_sequencia	= nr_seq_estagio_p;

	Francisco OS - 28041 - Incluir mudanca de estagio no historico */

	/*lhalves OS 219297 em 24/05/2010 - retirada esta rotina, pois foi implementada na trigger. Incluia historico em duplicidade*/


	/*if (ie_interno_w in (1,2,3,5,10,60,70,90)) and
	   (ie_conta_particular_p <> 'S') and
	   (ie_conta_convenio_p <> 'S') then
		insert into autorizacao_convenio_hist
			(nr_sequencia,
			 dt_atualizacao,
			 nm_usuario,
			 nr_atendimento,
			 nr_seq_autorizacao,
			 ds_historico,
			 nr_sequencia_autor) -- Francisco - 23/10/06 - Inclui a sequencia da autorizacao
		values (autorizacao_convenio_hist_seq.nextval,
			 sysdate,
			 nm_usuario_p,
			 nr_atendimento_w,
			 nr_seq_autorizacao_w,
			 ds_estagio_w,
			 nr_sequencia_p);
	end if;
	*/
	if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then
		CALL Gerar_Evento_Atualizar_Autor(nr_sequencia_p, 'AEAC',nm_usuario_p);
	end if;


	select	max(cd_convenio)
	into STRICT	cd_conv_agenda_w
	from	agenda_paciente
	where	nr_sequencia	= nr_seq_agenda_w;

	-- Edgar 20/04/2010, OS 209300, so atualizar a agenda se for o mesmo convenio
	if (coalesce(cd_conv_agenda_w, 0) = cd_convenio_w) and (ie_tipo_autorizacao_w <> '1') then
		CALL atualizar_autor_conv_agenda(nr_seq_agenda_w, nr_seq_estagio_p,ie_commit_p);
	end if;

	/* Francisco - OS 198372 - 08/04/10 - Gerar comunicacao */

	CALL gerar_comunic_autor_conv(nr_sequencia_p,nm_usuario_p);
	
	CALL wheb_usuario_pck.set_ie_executar_trigger('N');
	
	CALL atualizar_autorizacao_cirurgia(nr_sequencia_p,nr_seq_estagio_p, nr_seq_autor_cirurgia_w,cd_convenio_w, ie_tipo_autorizacao_w, coalesce(cd_estabelecimento_w,cd_estabelecimento_autor_w), nm_usuario_p, ie_commit_p);
	
	CALL wheb_usuario_pck.set_ie_executar_trigger(ie_executa_triger_w);
	
	if (coalesce(nr_seq_age_integ_w,0) > 0) then

	ds_log_w := substr(	' '|| wheb_mensagem_pck.get_texto(455603) ||' : '|| obter_funcao_ativa || chr(13) ||chr(10)||  --455603 Funcao ativa
				' '|| wheb_mensagem_pck.get_texto(455610) ||': '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,254); --455610 Callstack
				
	
	open C12;
	loop
	fetch C12 into	
		nr_seq_ageint_exame_lab_w;
	EXIT WHEN NOT FOUND; /* apply on C12 */
		
	insert into ageint_exame_lab_hist(	
		nr_sequencia,
		dt_atualizacao,         
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_historico,
		ds_historico,
		nr_seq_ageint_lab,
		nm_usuario_hist)
	values (	nextval('ageint_exame_lab_hist_seq'),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		substr(wheb_mensagem_pck.get_texto(301259,'DS_ESTAGIO_ANT_W='||coalesce(ds_estagio_ant_w, wheb_mensagem_pck.get_texto(455836))||';DS_ESTAGIO_W='||ds_estagio_w||';DS_LOG_W='||ds_log_w),1,254),
		--substr('Estagio da autorizacao de ' || nvl(ds_estagio_ant_w,'Sem estagio') || ' para ' || ds_estagio_w || chr(13)||ds_log_w,1,254),
		nr_seq_ageint_exame_lab_w,
		nm_usuario_p);

	end loop;
	close C12;
	
end if;
else
	DBMS_APPLICATION_INFO.SET_ACTION('');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179515);
	/*Estagio de autorizacao nao cadastrado! Verifique o cadastro de estagios da autorizacao.*/

end if;

--if (nvl(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
DBMS_APPLICATION_INFO.SET_ACTION('');
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_autorizacao_convenio (nr_sequencia_p bigint, nm_usuario_p text, nr_seq_estagio_p bigint, ie_conta_particular_p text, ie_conta_convenio_p text, ie_commit_p text) FROM PUBLIC;

