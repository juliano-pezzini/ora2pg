-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_dados_agenda_serv_2 ( cd_pessoa_fisica_p text, cd_agenda_p bigint, dt_agenda_p timestamp, cd_setor_atendimento_p bigint, nr_seq_unidade_p bigint, qt_idade_p bigint, nr_seq_agenda_p bigint, cd_convenio_p bigint, ie_gerar_reserva_p text, cd_medico_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nm_paciente_p text, cd_categoria_p text, ie_tipo_atendimento_p bigint, cd_usuario_convenio_p text, cd_medico_solic_p text, ds_msg_liber_cidade_p INOUT text, ds_msg_idade_agenda_serv_p INOUT text, nr_controle_secao_p INOUT bigint, nr_reserva_p INOUT text, ds_erro_p INOUT text, ds_msg_falta_pac_p INOUT text, ds_msg_usuario_categoria_p INOUT text, ie_regra_bloqueio_p INOUT text) AS $body$
DECLARE

 
ie_tipo_convenio_w		smallint;
ie_perm_bloq_agend_dif_esp_w	varchar(1);
ds_consistencia_w		varchar(2000);
ie_alerta_usuario_categ_w	varchar(1);
ie_usuario_categoria_w		varchar(1);
ds_observacao_categ_w		varchar(255);
ie_clinica_categ_w		smallint;
nr_seq_regra_w 			bigint;

BEGIN
if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then 
	begin 
 
	ds_msg_liber_cidade_p := regra_agenda_liber_cidade( 
		cd_pessoa_fisica_p, cd_agenda_p, ds_msg_liber_cidade_p);
 
	if (ds_msg_liber_cidade_p IS NOT NULL AND ds_msg_liber_cidade_p::text <> '') then 
		ds_msg_liber_cidade_p	:= ds_msg_liber_cidade_p || substr(obter_texto_tasy(47478, wheb_usuario_pck.get_nr_seq_idioma),1,255);
	end if;
 
	ds_msg_idade_agenda_serv_p := consiste_idade_agenda_servico( 
		cd_agenda_p, dt_agenda_p, qt_idade_p, ds_msg_idade_agenda_serv_p, nm_usuario_p);
 
	if (ds_msg_idade_agenda_serv_p IS NOT NULL AND ds_msg_idade_agenda_serv_p::text <> '') then 
		ds_msg_idade_agenda_serv_p	:= ds_msg_idade_agenda_serv_p || substr(obter_texto_tasy(47481, wheb_usuario_pck.get_nr_seq_idioma),1,255);
	end if;
	 
	nr_controle_secao_p := insere_agenda_cons_cont_secao(dt_agenda_p, nr_seq_agenda_p, nm_usuario_p, nr_controle_secao_p);
	/* 
	select	max(obter_controle_secao_agserv(nr_seq_agenda_p)) 
	into	nr_controle_secao_p 
	from	dual;  */
 
 
	select	max(ie_tipo_convenio) 
	into STRICT	ie_tipo_convenio_w 
	from	convenio 
	where	cd_convenio	= cd_convenio_p;
 
	if (ie_tipo_convenio_w = 3) and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then 
		ds_erro_p := verifica_regra_laudo_sus( 
			cd_pessoa_fisica_p, cd_agenda_p, ds_erro_p);
	end if;
 
	if (ie_gerar_reserva_p IS NOT NULL AND ie_gerar_reserva_p::text <> '') and (ie_gerar_reserva_p = 'S') then 
		begin 
		select	substr(ageint_obter_reserva_pac(nr_seq_agenda_p, dt_agenda_p, cd_pessoa_fisica_p, cd_estabelecimento_p, 'S'), 1,20) 
		into STRICT	nr_reserva_p 
		;
		end;
	end if;
 
	if (coalesce(cd_medico_p::text, '') = '') then	 
		begin 
		CALL consistir_regra_medico_ageserv( 
			nr_seq_agenda_p, 
			cd_agenda_p, 
			cd_estabelecimento_p, 
			cd_procedimento_p, 
			ie_origem_proced_p, 
			nr_seq_proc_interno_p, 
			nm_usuario_p);
		end;
	end if;
 
	ie_perm_bloq_agend_dif_esp_w := obter_param_usuario(866, 164, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_perm_bloq_agend_dif_esp_w);
 
	if (ie_perm_bloq_agend_dif_esp_w = 'S') then 
		begin 
 
		ds_consistencia_w := Agserv_verf_agend_lista_espera(	cd_agenda_p, cd_pessoa_fisica_p, nm_paciente_p, dt_agenda_p, ds_consistencia_w);
	 
		if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then 
			begin 
 
			CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||ds_consistencia_w);
 
			end;
		end if;
 
		end;
	end if;
 
	--Tramento parametro [183] 
	ie_perm_bloq_agend_dif_esp_w := obter_param_usuario(866, 183, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_perm_bloq_agend_dif_esp_w);
	if (ie_perm_bloq_agend_dif_esp_w = 'S') then 
		begin 
		ds_msg_falta_pac_p := ageserv_consiste_falta_pac( 
			cd_pessoa_fisica_p, dt_agenda_p, cd_agenda_p, nm_usuario_p, cd_estabelecimento_p, ds_msg_falta_pac_p);
		end;
	end if;
 
	-- Verifica a exisitencia do procedimento 
	if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (consiste_se_proc_existe(cd_procedimento_p) = 'N')then 
		begin 
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(105488);
		end;
	end if;	
	 
	--Tramento parametro [186] 
	ie_perm_bloq_agend_dif_esp_w := obter_param_usuario(866, 186, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_perm_bloq_agend_dif_esp_w);
	if (ie_perm_bloq_agend_dif_esp_w = 'S') then 
		begin 
		ds_consistencia_w := ageserv_consistir_setor_unid( 
			dt_agenda_p, cd_setor_atendimento_p, nr_seq_unidade_p, nr_seq_agenda_p, nm_usuario_p, ds_consistencia_w);
 
		if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then 
			begin 
			CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||ds_consistencia_w);
			end;
		end if;
		end;
	end if;
	 
	CALL Ageserv_Consistir_Medico_Solic(cd_agenda_p, cd_medico_solic_p, nm_usuario_p);
	 
	ds_consistencia_w := Consiste_lib_conv_ageserv(cd_agenda_p, cd_convenio_p, dt_agenda_p, 'S', nr_seq_agenda_p, ds_consistencia_w);
	if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then 
		CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||ds_consistencia_w);
	end if;
	 
	--Tratamento parametro [274] 
	ie_alerta_usuario_categ_w := obter_param_usuario(866, 274, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_alerta_usuario_categ_w);
	if (ie_alerta_usuario_categ_w = 'S') then 
		begin 
		SELECT * FROM consiste_usuario_categoria( 
			cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, ie_tipo_atendimento_p, cd_usuario_convenio_p, ie_usuario_categoria_w, ie_regra_bloqueio_p, ds_observacao_categ_w, ie_clinica_categ_w, nr_seq_regra_w) INTO STRICT ie_usuario_categoria_w, ie_regra_bloqueio_p, ds_observacao_categ_w, nr_seq_regra_w;
 
		if (ie_usuario_categoria_w <> 'S') then 
			begin 
			if (ie_usuario_categoria_w = 'N') then 
				ds_msg_usuario_categoria_p := substr(obter_texto_tasy(294185, wheb_usuario_pck.get_nr_seq_idioma),1,255);
			elsif (ie_usuario_categoria_w = 'C') then 
				ds_msg_usuario_categoria_p := substr(obter_texto_tasy(294186, wheb_usuario_pck.get_nr_seq_idioma),1,255);
			end if;
			end;
		end if;
		end;
	end if;
	end;
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_dados_agenda_serv_2 ( cd_pessoa_fisica_p text, cd_agenda_p bigint, dt_agenda_p timestamp, cd_setor_atendimento_p bigint, nr_seq_unidade_p bigint, qt_idade_p bigint, nr_seq_agenda_p bigint, cd_convenio_p bigint, ie_gerar_reserva_p text, cd_medico_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nm_paciente_p text, cd_categoria_p text, ie_tipo_atendimento_p bigint, cd_usuario_convenio_p text, cd_medico_solic_p text, ds_msg_liber_cidade_p INOUT text, ds_msg_idade_agenda_serv_p INOUT text, nr_controle_secao_p INOUT bigint, nr_reserva_p INOUT text, ds_erro_p INOUT text, ds_msg_falta_pac_p INOUT text, ds_msg_usuario_categoria_p INOUT text, ie_regra_bloqueio_p INOUT text) FROM PUBLIC;

