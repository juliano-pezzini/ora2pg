-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE npt_recalcula_volume_prod ( nr_sequencia_p bigint, qt_valor_p bigint, qt_valor_anterior_p bigint, qt_vct_p bigint, qt_vct_anterior_p bigint, nm_usuario_p text, qt_volume_diario_p INOUT bigint) AS $body$
DECLARE


qt_porcento_w				double precision;
qt_porcento_adic_w			double precision;
qt_volume_produto_w			double precision;
qt_volume_diario_w			double precision;
nr_seq_produto_w			bigint;
qt_diferenca_w				double precision;
qt_diferenca2_w				double precision;
qt_valor_w					double precision;
qt_sem_redistribuicao_w		double precision;
qt_adicional_w				double precision;
qt_adicionais_w				double precision;
qt_kcal_kg_w				double precision;
qt_valor_ww					double precision;
qt_volume_original_w		double precision;
qt_distribuir_nao_distrib_w double precision;
qt_total_restribuir_w		bigint;
qt_vol_recalcular_w			double precision;
qt_protocolo_w				double precision;
qt_prot_prescr_pac_w		double precision;
count_w						bigint;
qt_kcal_total_origem_w		double precision;
ie_recalcular_w				varchar(1) := 'N';
qt_peso_w					double precision;
qt_valor_anterior_w			double precision;
cd_material_aux_w			bigint;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
		a.qt_protocolo
from	nut_pac_elemento d,
		nut_elem_material c,
		nut_elemento b,
		nut_pac_elem_mat a
where	d.nr_seq_nut_pac = a.nr_seq_nut_pac
and		b.nr_sequencia = d.nr_seq_elemento
and		d.nr_seq_elemento = c.nr_seq_elemento
and		a.cd_material	= c.cd_material
and		a.nr_seq_nut_pac	= nr_sequencia_p
and		c.nr_seq_elemento	= b.nr_sequencia
and		coalesce(c.ie_tipo,'NPT')	= 'NPT'
and		coalesce(b.ie_redistribuir,'S') = 'S';

c02 CURSOR FOR
SELECT	a.nr_sequencia,
        round((a.qt_protocolo)::numeric,4),
		b.qt_vol_recalcular
from	nut_pac_elemento d,
		nut_elem_material c,
		nut_elemento b,
		nut_pac_elem_mat a
where	d.nr_seq_nut_pac = a.nr_seq_nut_pac
and		b.nr_sequencia = d.nr_seq_elemento
and		d.nr_seq_elemento = c.nr_seq_elemento
and		a.cd_material	= c.cd_material
and		a.nr_seq_nut_pac	= nr_sequencia_p
and		c.nr_seq_elemento	= b.nr_sequencia
and		coalesce(c.ie_tipo,'NPT')	= 'NPT'
and		coalesce(b.ie_redistribuir,'S') = 'N'
and		(b.qt_vol_recalcular IS NOT NULL AND b.qt_vol_recalcular::text <> '')
and		b.qt_vol_recalcular > qt_valor_w;

c03 CURSOR FOR
SELECT	a.nr_sequencia,
        a.qt_protocolo
from	nut_pac_elemento d,
		nut_elem_material c,
		nut_elemento b,
		nut_pac_elem_mat a
where	d.nr_seq_nut_pac = a.nr_seq_nut_pac
and		b.nr_sequencia = d.nr_seq_elemento
and		d.nr_seq_elemento = c.nr_seq_elemento
and		a.cd_material	= c.cd_material
and		a.nr_seq_nut_pac	= nr_sequencia_p
and		c.nr_seq_elemento	= b.nr_sequencia
and		coalesce(c.ie_tipo,'NPT')	= 'NPT'
and		coalesce(b.ie_redistribuir,'S') = 'N'
and		(b.qt_vol_recalcular IS NOT NULL AND b.qt_vol_recalcular::text <> '')
and		b.qt_vol_recalcular <=  qt_valor_w;

c04 CURSOR FOR
SELECT	distinct a.cd_material,
		coalesce(round((a.qt_protocolo)::numeric,2),0)
from	nut_pac_elem_mat a,
		nut_elem_material b,
		nut_pac_elemento c,
		nut_elemento d
where	a.cd_material 		= b.cd_material
and		a.nr_seq_nut_pac 	= c.nr_seq_nut_pac
and		b.nr_seq_elemento 	= c.nr_seq_elemento
and		b.nr_seq_elemento 	= d.nr_sequencia
and		c.nr_seq_elemento 	= d.nr_sequencia
and		a.nr_seq_nut_pac 	= nr_sequencia_p
and		coalesce(b.ie_tipo,'NPT')	= 'NPT'
and		coalesce(d.ie_redistribuir,'S') = 'S';




BEGIN

qt_valor_w			:= qt_valor_p;
qt_valor_anterior_w := qt_valor_anterior_p;
qt_protocolo_w 		:= 0;
open C04;
loop
fetch C04 into cd_material_aux_w,
			   qt_adicionais_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin
	qt_protocolo_w := qt_protocolo_w + qt_adicionais_w;
	end;
end loop;
close C04;

ie_recalcular_w := 'N';
if (coalesce(qt_vct_p,0) > 0) then

	select	max(qt_kcal_total_origem),
			max(coalesce(qt_peso_ajustado, qt_peso)),
			max(qt_volume_princ)
	into STRICT	qt_kcal_total_origem_w,
			qt_peso_w,
			qt_valor_anterior_w
	from	nut_pac
	where	nr_sequencia = nr_sequencia_p;

	qt_valor_w := (((qt_protocolo_w * qt_vct_p) / qt_kcal_total_origem_w));
	qt_volume_diario_p := qt_valor_w;
	ie_recalcular_w := 'S';

	update	nut_pac
	set		qt_kcal_kg = qt_vct_p /qt_peso_w,
			qt_kcal_total = qt_vct_p,
			ie_alterou_vct = 'S',
			qt_volume_princ = qt_valor_w
	where	nr_sequencia = nr_sequencia_p;

	commit;

end if;

if (qt_valor_anterior_w	> 0) or (ie_recalcular_w = 'S') then

        open C01;
        loop
        fetch C01 into
        	nr_seq_produto_w,
			qt_prot_prescr_pac_w;
        EXIT WHEN NOT FOUND; /* apply on C01 */
        	begin

			qt_adicional_w	:= ((qt_prot_prescr_pac_w * qt_valor_w)/ qt_protocolo_w);

        	update	nut_pac_elem_mat
        	set		qt_volume		= qt_adicional_w,
					qt_dose			= Obter_dose_convertida(cd_material,qt_adicional_w,obter_unid_med_usua('ml'),cd_unidade_medida)
        	where	nr_sequencia	= nr_seq_produto_w;

        	end;
        end loop;
        close C01;
end if;

select	count(*)
into STRICT	count_w
from	nut_elem_material c,
		nut_elemento b,
		nut_pac_elem_mat a
where	a.cd_material	= c.cd_material
and		a.nr_seq_nut_pac	= nr_sequencia_p
and		c.nr_seq_elemento	= b.nr_sequencia
and		coalesce(c.ie_tipo,'NPT')	= 'NPT'
and		(b.qt_vol_recalcular IS NOT NULL AND b.qt_vol_recalcular::text <> '')
and		b.qt_vol_recalcular > qt_valor_w;

if (count_w > 0) then

	open c02;
	loop
	fetch c02 into
		nr_seq_produto_w,
		qt_volume_produto_w,
		qt_vol_recalcular_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		qt_valor_ww		:=	((qt_valor_w / 1000)* qt_volume_produto_w);

		update	nut_pac
		set		ie_alterou_vct = 'N'
		where	nr_sequencia = nr_sequencia_p;

		update	nut_pac_elem_mat
		set		qt_volume	= qt_valor_ww,
				qt_dose			= Obter_dose_convertida(cd_material,qt_valor_ww,obter_unid_med_usua('ml'),cd_unidade_medida)
		where	nr_sequencia	= nr_seq_produto_w;
		end;

	end loop;
	close c02;
else
	open c03;
	loop
	fetch c03 into
		nr_seq_produto_w,
		qt_volume_produto_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin

		update	nut_pac
		set		ie_alterou_vct = 'N'
		where	nr_sequencia = nr_sequencia_p;

		update	nut_pac_elem_mat
		set		qt_volume		= qt_volume_produto_w,
				qt_dose			= Obter_dose_convertida(cd_material,qt_volume_produto_w,obter_unid_med_usua('ml'),cd_unidade_medida)
		where	nr_sequencia	= nr_seq_produto_w;
		end;

	end loop;
	close c03;
end if;

commit;

CALL calcular_nut_pac_adulto(nr_sequencia_p, nm_usuario_p);
if (coalesce(qt_vct_p,0) > 0) then

	qt_kcal_kg_w	:= dividir(qt_vct_p,qt_peso_w);

	update	nut_pac
	set		qt_kcal_kg = qt_kcal_kg_w
	where	nr_sequencia = nr_sequencia_p;

	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE npt_recalcula_volume_prod ( nr_sequencia_p bigint, qt_valor_p bigint, qt_valor_anterior_p bigint, qt_vct_p bigint, qt_vct_anterior_p bigint, nm_usuario_p text, qt_volume_diario_p INOUT bigint) FROM PUBLIC;

