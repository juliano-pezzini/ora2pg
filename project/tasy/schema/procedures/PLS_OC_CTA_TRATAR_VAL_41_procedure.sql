-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_41 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Aplicar a validação referente a data informada no item.
	Esta validação irá verificar situações relacionadas a data do item.
	Atualmente é possível gerar a ocorrência quando:

	ie_data_item = 5 - Data do item diferente da data do atendimento da conta:
		Para verificar se a data informada no item é diferente da data informada na conta.
	ie_data_item = 4 - Data do item maior do que a data atual:
		Para verificar se a data do item é maior do que a data atual, considerando como data atual a data de consistência da conta.
	ie_data_item = 3 - Data do item menor do que a data de referência da conta:
		Para verificar se a data do item é menor que a data de emissão da conta.
	ie_data_item = 6 - Data do item não informada:
		Para verificar se a data do item está informada.
	Também é possível parametrizar se para as comparações serão considerados os horários informados ou apenas as datas.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_horario_w		boolean;
ie_gera_ocor_w		varchar(1);
nr_seq_selecao_w	dbms_sql.number_table;
ds_observacao_w		dbms_sql.varchar2_table;
ie_valido_w		dbms_sql.varchar2_table;
nr_indice_w		integer;
dt_atendimento_imp_w	timestamp;
dt_atendimento_w	timestamp;

-- Dados da regra de validação cadastrada na ocorrência
C01 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
	SELECT	a.ie_data_item,
		a.ie_considera_horario
	from	pls_oc_cta_val_data_item a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

C02 CURSOR(	nr_id_transacao_p	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type) FOR
	SELECT	sel.nr_sequencia			nr_seq_selecao,
		pls_manipulacao_datas_pck.obter_data_mais_hora(a.dt_procedimento_imp, a.dt_inicio_proc_imp) dt_hr_item_imp,
		pls_manipulacao_datas_pck.obter_data_mais_hora(a.dt_procedimento_imp, a.dt_fim_proc_imp) dt_hr_fim_item_imp,
		pls_manipulacao_datas_pck.obter_data_mais_hora(a.dt_procedimento, a.dt_inicio_proc) dt_hr_item,
		pls_manipulacao_datas_pck.obter_data_mais_hora(a.dt_procedimento, a.dt_fim_proc) 	dt_hr_fim_item,
		trunc(a.dt_procedimento_imp, 'dd') dt_item_imp,
		trunc(a.dt_procedimento, 'dd')  	dt_item,
		b.dt_atendimento_imp_referencia  	dt_hr_atendimento_imp,
		b.dt_atendimento_referencia 		dt_hr_atendimento,
		trunc(b.dt_atendimento_imp_referencia,'dd') dt_atendimento_imp,
		trunc(b.dt_atendimento_referencia,'dd') dt_atendimento,
		b.dt_autorizacao  			dt_hr_autorizacao,
		b.dt_autorizacao_imp 			dt_hr_autorizacao_imp,
		trunc(b.dt_autorizacao,'dd') 		dt_autorizacao,
		trunc(b.dt_autorizacao_imp,'dd') 	dt_autorizacao_imp,
		trunc(c.dt_mes_competencia, 'dd')	dt_competencia_protocolo
	from  	pls_selecao_ocor_cta sel,
		pls_conta_proc a,
		pls_conta b,
		pls_protocolo_conta	c
	where  	sel.nr_id_transacao   	= nr_id_transacao_p
	and  	sel.ie_valido     	= 'S'
	and   	a.nr_sequencia     	= sel.nr_seq_conta_proc
	and  	b.nr_sequencia    	= a.nr_seq_conta
	and	c.nr_sequencia		= b.nr_seq_protocolo
	
union all

	SELECT  sel.nr_sequencia 			nr_seq_selecao,
		pls_manipulacao_datas_pck.obter_data_mais_hora(a.dt_atendimento_imp, a.dt_inicio_atend_imp) dt_hr_item_imp,
		pls_manipulacao_datas_pck.obter_data_mais_hora(a.dt_atendimento, a.dt_fim_atend_imp) dt_hr_fim_item_imp,
		pls_manipulacao_datas_pck.obter_data_mais_hora(a.dt_atendimento, a.dt_inicio_atend) dt_hr_item,
		pls_manipulacao_datas_pck.obter_data_mais_hora(a.dt_atendimento, a.dt_fim_atend) 	dt_hr_fim_item,
		trunc(a.dt_atendimento_imp, 'dd')	dt_item_imp,
		trunc(a.dt_atendimento, 'dd') 		dt_item,
		b.dt_atendimento_imp_referencia  	dt_hr_atendimento_imp,
		b.dt_atendimento_referencia 		dt_hr_atendimento,
		trunc(b.dt_atendimento_imp_referencia,'dd') dt_atendimento_imp,
		trunc(b.dt_atendimento_referencia,'dd') dt_atendimento,
		b.dt_autorizacao  			dt_hr_autorizacao,
		b.dt_autorizacao_imp 			dt_hr_autorizacao_imp,
		trunc(b.dt_autorizacao,'dd') 		dt_autorizacao,
		trunc(b.dt_autorizacao_imp,'dd') 	dt_autorizacao_imp,
		trunc(c.dt_mes_competencia, 'dd')	dt_competencia_protocolo
	from  	pls_selecao_ocor_cta sel,
		pls_conta_mat a,
		pls_conta b,
		pls_protocolo_conta	c
	where  	sel.nr_id_transacao   	= nr_id_transacao_p
	and  	sel.ie_valido		= 'S'
	and  	a.nr_sequencia 		= sel.nr_seq_conta_mat
	and  	b.nr_sequencia    	= a.nr_seq_conta
	and	c.nr_sequencia		= b.nr_seq_protocolo;
BEGIN
-- As validações para Data do item menor que a data da internação(1) e
-- Data do item maior que a data de alta(2)  já estão desenvolvidas na validação 6 - Validar item no período de internação
-- e devem ser ignorados e removidos da tela da regra de validação para essa regra aqui
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

	nr_seq_selecao_w.delete;
	ie_valido_w.delete;
	ds_observacao_w.delete;
	nr_indice_w := 0;

	-- Percorre a lista da seleção, criando select conforme restrições definidas na regra
	for	r_C01_w in C01(dados_regra_p.nr_sequencia) loop

		ie_horario_w := (r_C01_w.ie_considera_horario = 'S');

		for	r_C02_w in C02(nr_id_transacao_p) loop

			ie_gera_ocor_w 	:= 'N';

			case(r_C01_w.ie_data_item)

				-- Data do item menor que a data de emissão da conta(Se maior ou igual não gera ocorrência)
				when 3 then
					-- Verificar o evento de geração da ocorrência para verificar de quais campos obter a informação.
					if (dados_regra_p.ie_evento = 'IMP') then

						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item_imp < r_C02_w.dt_hr_atendimento_imp) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item_imp < r_C02_w.dt_atendimento_imp) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					else
						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item < r_C02_w.dt_hr_atendimento) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item < r_C02_w.dt_atendimento) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					end if;

				-- data do item maior que a data atual(Se menor ou igual, não gera ocorrência)
				when 4 then

					-- Verificar o evento de geração da ocorrência para verificar de quais campos obter a informação.
					if (dados_regra_p.ie_evento = 'IMP') then

						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item_imp > clock_timestamp()) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item_imp > trunc(clock_timestamp(), 'dd')) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					else
						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item > clock_timestamp()) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item > trunc(clock_timestamp(), 'dd')) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					end if;

				-- data do item diferente da data de atendimento da conta(se igual, não gera ocorrência)
				when 5 then

					-- Verificar o evento de geração da ocorrência para verificar de quais campos obter a informação.
					if (dados_regra_p.ie_evento = 'IMP') then

						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item_imp <> r_C02_w.dt_hr_atendimento_imp) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item_imp <> r_C02_w.dt_atendimento_imp) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					else
						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item <> r_C02_w.dt_hr_atendimento) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item <> r_C02_w.dt_atendimento) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					end if;

				-- Data do item não informada(Se informada, não gera ocorrência)
				when 6 then

					-- Verificar o evento de geração da ocorrência para verificar de quais campos obter a informação.
					-- Para esta validação não é necessário considerar o horário.
					if (dados_regra_p.ie_evento = 'IMP') then
						if (coalesce(r_C02_w.dt_item_imp::text, '') = '') then
							ie_gera_ocor_w := 'S';
						end if;
					else
						if (coalesce(r_C02_w.dt_item::text, '') = '') then
							ie_gera_ocor_w := 'S';
						end if;
					end if;

				-- Data do item menor que a autorização
				when 7 then

					-- Verificar o evento de geração da ocorrência para verificar de quais campos obter a informação.
					if (dados_regra_p.ie_evento = 'IMP') then

						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item_imp < r_C02_w.dt_hr_autorizacao_imp) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item_imp < r_C02_w.dt_autorizacao_imp) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					else
						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item < r_C02_w.dt_hr_autorizacao) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item < r_C02_w.dt_autorizacao) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					end if;
				-- data do item superior a data de competencia do protocolo
				when 8 then
					if (dados_regra_p.ie_evento = 'IMP') then
						if (r_C02_w.dt_item_imp > r_C02_w.dt_competencia_protocolo) then
							ie_gera_ocor_w := 'S';
						end if;
					else
						if (r_C02_w.dt_item > r_C02_w.dt_competencia_protocolo) then
							ie_gera_ocor_w := 'S';
						end if;
					end if;

				-- Data do item maior que a data de emissão da conta
				when 9 then
					-- Verificar o evento de geração da ocorrência para verificar de quais campos obter a informação.
					if (dados_regra_p.ie_evento = 'IMP') then

						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item_imp > r_C02_w.dt_hr_atendimento_imp) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item_imp > r_C02_w.dt_atendimento_imp) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					else
						-- Verifica se deve considerar horário, se não usa as datas truncadas.
						if (ie_horario_w) then
							if (r_C02_w.dt_hr_item > r_C02_w.dt_hr_atendimento) then
								ie_gera_ocor_w := 'S';
							end if;
						else
							if (r_C02_w.dt_item > r_C02_w.dt_atendimento) then
								ie_gera_ocor_w := 'S';
							end if;
						end if;
					end if;

				-- Hora final do item menor que a hora inicial
				when 10 then
					-- Verificar o evento de geração da ocorrência para verificar de quais campos obter a informação.
					if (dados_regra_p.ie_evento = 'IMP') then
						if (r_C02_w.dt_hr_item_imp > r_C02_w.dt_hr_fim_item_imp) then
							ie_gera_ocor_w := 'S';
						end if;

					else
						if (r_C02_w.dt_hr_item > r_C02_w.dt_hr_fim_item) then
							ie_gera_ocor_w := 'S';
						end if;

					end if;

				else
					null;
			end case;

			if (ie_gera_ocor_w = 'S') then

				nr_seq_selecao_w(nr_indice_w) := r_C02_w.nr_seq_selecao;
				ie_valido_w(nr_indice_w) := 'S';
				ds_observacao_w(nr_indice_w) := null;

				if (nr_indice_w >= pls_util_pck.qt_registro_transacao_w) then

					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao( nr_seq_selecao_w, pls_util_cta_pck.clob_table_vazia_w,
											'SEQ', ds_observacao_w,
											ie_valido_w, nm_usuario_p);
					nr_indice_w := 0;
					nr_seq_selecao_w.delete;
					ie_valido_w.delete;
					ds_observacao_w.delete;
				else
					nr_indice_w := nr_indice_w + 1;
				end if;
			end if;
		end loop; --C02
	end loop; -- C01
	CALL pls_tipos_ocor_pck.gerencia_selecao_validacao( nr_seq_selecao_w, pls_util_cta_pck.clob_table_vazia_w,
							'SEQ', ds_observacao_w,
							ie_valido_w, nm_usuario_p);

	nr_seq_selecao_w.delete;
	ie_valido_w.delete;
	ds_observacao_w.delete;

	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_41 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

