-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_usuario_import_usuario ( nm_usuario_orig_p text, cd_estabelecimento_p bigint, nm_usuario_dest_p text, ds_senha_p text, nm_usuario_p text, ds_login_p text, cd_pessoa_fisica_p text, cd_barras_p text, ds_conta_email_p text, ds_email_p text, nm_usuario_login_p text, ie_copia_grupo_trab_p text default 'N') AS $body$
DECLARE

			
nm_usuario_orig_w			varchar(15);
nm_usuario_orig_perfil_w		varchar(15);
cd_perfil_w			integer;
nm_usuario_param_setor_w		varchar(15);
cd_setor_atendimento_w		integer;
nm_usuario_param_estab_w		varchar(15);
cd_estabelecimento_w		smallint;
nr_seq_interno_w			bigint;
nr_seq_interno_atual_w		bigint;
nr_seq_grupo_trab_w		bigint;
qt_usu_grupo_trab_w		bigint;
ds_senha_hash_w			varchar(64):= '';
ds_tec_w				varchar(15):= '';
ds_senha_email_w			usuario.ds_senha_email%type;
qt_count_locale     integer := 0;
C01 CURSOR FOR
	SELECT	nm_usuario
	from	usuario
	where	nm_usuario = nm_usuario_orig_p;

C02 CURSOR FOR
	SELECT	nm_usuario,
		cd_perfil
	from	usuario_perfil
	where	nm_usuario = nm_usuario_orig_p;
	
C03 CURSOR FOR
	SELECT	nm_usuario_param,
		cd_setor_atendimento
	from	usuario_setor
	where	nm_usuario_param = nm_usuario_orig_p;
	
C04 CURSOR FOR
	SELECT	nm_usuario_param,
		cd_estabelecimento
	from	usuario_estabelecimento
	where	nm_usuario_param = nm_usuario_orig_p;	

C05 CURSOR FOR
	SELECT	nr_seq_interno
	from	funcao_param_usuario
	where	nm_usuario_param = nm_usuario_orig_p
	and 	cd_funcao <> 0
	
union

	SELECT	nr_seq_interno
	from	funcao_param_usuario
	where	nm_usuario_param = nm_usuario_orig_p
	and 	cd_funcao = 0 
	and 	nr_sequencia not in (38,40);
	
C06 CURSOR FOR
	SELECT	nr_seq_grupo_trab
	from	man_grupo_trab_usuario
	where	nm_usuario_param = nm_usuario_orig_p;
	

BEGIN
open C01;
loop
fetch C01 into	
	nm_usuario_orig_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	if (ds_senha_p IS NOT NULL AND ds_senha_p::text <> '') then
		select	replace(replace(dbms_random.string('P',15),chr(39),''),';','')
		into STRICT	ds_tec_w
		;
		
		ds_senha_hash_w	:= obter_sha2(upper(ds_senha_p) || ds_tec_w,256);
	end if;

	begin
	select	wheb_seguranca.decrypt(ds_senha_email)
	into STRICT	ds_senha_email_w
	from	usuario
	where	nm_usuario = nm_usuario_orig_w;
	exception
	when others then
		ds_senha_email_w := null;
	end;

	insert into usuario(nm_usuario,
		ds_usuario, 
		ds_senha,
		cd_pessoa_fisica,
		cd_barras,	
		ie_situacao, 
		dt_atualizacao, 
		nm_usuario_atual, 
		cd_setor_atendimento, 
		dt_alteracao_senha, 
		ds_email, 
		nr_sequencia, 
		cd_estabelecimento, 
		nr_ramal, 
		ie_mensagem_rec, 
		ie_mensagem_envio, 
		qt_dia_senha, 
		ds_conta_email, 
		ie_anexar_arquivo, 
		ds_senha_laudo, 
		ie_comunic_interna, 
		ie_tipo_evolucao, 
		ie_localizar_medico, 
		cd_funcao, 
		ie_versao_anterior, 
		nr_seq_classif, 
		ie_chamar_tasymon, 
		cd_perfil_inicial, 
		ie_evento_agenda, 
		ie_evento_sac, 
		ie_evento_processo, 
		ie_evento_prescr, 
		ie_evento_proc_agenda, 
		ie_evento_comunic, 
		ie_evento_alerta, 
		ie_evento_aprov_compra, 
		ie_evento_exame_urg, 
		ie_evento_aprov_doc, 
		ie_fechar_tasymon, 
		ds_senha_email, 
		ie_evento_lib_telefone, 
		nm_usuario_orig, 
		ie_mostrar_anexo_comunic, 
		ie_evento_ordem_serv, 
		ie_evento_obj_inv, 
		ds_comunic_padrao, 
		ie_evento_recoleta, 
		nr_seq_impressora, 
		ie_atualizar_dic, 
		cd_classif_localizador, 
		nr_seq_perfil, 
		dt_validade_usuario, 
		ie_profissional, 
		qt_acesso_invalido, 
		ie_os_pe_bsc, 
		ds_login, 
		ie_evento_susp_exame, 
		ie_evento_med_cih, 
		ie_evento_solic_pront, 
		ds_hist_padrao, 
		ie_evento_int_agenda_san, 
		ie_evento_vinc_agenda_san, 
		ie_evento_canc_cir_san, 
		ie_evento_canc_agenda_san, 
		ie_evento_enc_agenda_san, 
		ie_evento_transf_agenda_san, 
		ie_evento_alteracao_param, 
		nr_seq_justific_acesso, 
		ie_evento_paciente, 
		ds_texto_email, 
		ie_evento_estrangeiro, 
		ie_evento_alta_partic, 
		ie_evento_alerta_medico, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		ie_receber_copia_email, 
		ie_evento_prev_alta, 
		ie_evento_alta_partic_ext, 
		ie_evento_alta_regra, 
		nr_seq_idioma, 
		nm_usuario_pesquisa, 
		ie_saida_logoff, 
		ds_observacao, 
		ie_evento_os_programar, 
		ie_dieta_prescrita, 
		nr_nivel_aprovacao, 
		ie_evento_agenda_comercial, 
		ie_evento_requisicao_lib, 
		ie_evento_alt_status_san, 
		nr_seq_apres_prof, 
		ie_ocorrencia_retorno, 
		ie_evento_solic_compra, 
		ie_terceiro, 
		ie_alerta_forma_entrega, 
		ie_evento_hemo, 
		ie_evento_sc_urgente, 
		ie_evento_agenda_carater, 
		ie_resp_auditoria, 
		ie_evento_lib_receb_pp,
		dt_inativacao,
		ds_tec,
		ie_can_view_sensitive_info,
		ie_can_view_patient_info,
		ie_can_delete_patient,
		ie_can_auth_patient_deletion)
	(SELECT nm_usuario_dest_p, 
		nm_usuario_login_p, 
		ds_senha_hash_w,
		cd_pessoa_fisica_p,
		cd_barras_p,
		ie_situacao, 
		dt_atualizacao, 
		nm_usuario_p, 
		cd_setor_atendimento,  
		null, 
		ds_email_p, 
		nr_sequencia, 
		cd_estabelecimento_p, 
		nr_ramal, 
		ie_mensagem_rec, 
		ie_mensagem_envio, 
		qt_dia_senha, 
		ds_conta_email_p, 
		ie_anexar_arquivo, 
		ds_senha_laudo, 
		ie_comunic_interna, 
		ie_tipo_evolucao, 
		ie_localizar_medico, 
		cd_funcao, 
		ie_versao_anterior, 
		nr_seq_classif, 
		ie_chamar_tasymon, 
		cd_perfil_inicial, 
		ie_evento_agenda, 
		ie_evento_sac, 
		ie_evento_processo, 
		ie_evento_prescr, 
		ie_evento_proc_agenda, 
		ie_evento_comunic, 
		ie_evento_alerta, 
		ie_evento_aprov_compra, 
		ie_evento_exame_urg, 
		ie_evento_aprov_doc, 
		ie_fechar_tasymon, 
		coalesce(ds_senha_email_w,ds_senha_email),
		ie_evento_lib_telefone, 
		nm_usuario_p, 
		ie_mostrar_anexo_comunic, 
		ie_evento_ordem_serv, 
		ie_evento_obj_inv, 
		ds_comunic_padrao, 
		ie_evento_recoleta, 
		nr_seq_impressora, 
		ie_atualizar_dic, 
		cd_classif_localizador, 
		nr_seq_perfil, 
		dt_validade_usuario, 
		ie_profissional, 
		qt_acesso_invalido, 
		ie_os_pe_bsc,
		ds_login_p, 
		ie_evento_susp_exame, 
		ie_evento_med_cih, 
		ie_evento_solic_pront, 
		ds_hist_padrao, 
		ie_evento_int_agenda_san, 
		ie_evento_vinc_agenda_san, 
		ie_evento_canc_cir_san, 
		ie_evento_canc_agenda_san, 
		ie_evento_enc_agenda_san, 
		ie_evento_transf_agenda_san, 
		ie_evento_alteracao_param, 
		nr_seq_justific_acesso, 
		ie_evento_paciente, 
		ds_texto_email, 
		ie_evento_estrangeiro, 
		ie_evento_alta_partic, 
		ie_evento_alerta_medico, 
		clock_timestamp(), 
		nm_usuario_nrec, 
		ie_receber_copia_email, 
		ie_evento_prev_alta, 
		ie_evento_alta_partic_ext, 
		ie_evento_alta_regra, 
		nr_seq_idioma, 
		nm_usuario_dest_p, 
		ie_saida_logoff, 
		ds_observacao, 
		ie_evento_os_programar, 
		ie_dieta_prescrita, 
		nr_nivel_aprovacao, 
		ie_evento_agenda_comercial, 
		ie_evento_requisicao_lib, 
		ie_evento_alt_status_san, 
		nr_seq_apres_prof, 
		ie_ocorrencia_retorno, 
		ie_evento_solic_compra, 
		ie_terceiro, 
		ie_alerta_forma_entrega, 
		ie_evento_hemo, 
		ie_evento_sc_urgente, 
		ie_evento_agenda_carater, 
		ie_resp_auditoria, 
		ie_evento_lib_receb_pp,
		dt_inativacao,
		ds_tec_w,
		ie_can_view_sensitive_info,
		ie_can_view_patient_info,
		ie_can_delete_patient,
		ie_can_auth_patient_deletion
	from	usuario
	where	nm_usuario = nm_usuario_orig_w);
	
	end;
end loop;
close C01;

open C02;
loop
fetch C02 into	
	nm_usuario_orig_perfil_w,
	cd_perfil_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	
	insert into usuario_perfil(nm_usuario,
		 cd_perfil, 
		 dt_atualizacao, 
		 nm_usuario_atual, 
		 ds_observacao, 
		 nr_seq_apres, 
		 dt_validade)
	(SELECT	 nm_usuario_dest_p, 
		 cd_perfil, 
		 dt_atualizacao, 
		 nm_usuario_p, 
		 wheb_mensagem_pck.get_texto(800328)||' '||nm_usuario_orig_p,  
		 nr_seq_apres, 
		 dt_validade
	from	 usuario_perfil	 
	where	 nm_usuario = nm_usuario_orig_perfil_w
	and	 cd_perfil  = cd_perfil_w);
	
	end;
end loop;
close C02;

open C03;
loop
fetch C03 into	
	nm_usuario_param_setor_w,
	cd_setor_atendimento_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	
	insert into usuario_setor(nm_usuario_param,
		 cd_setor_atendimento, 
		 dt_atualizacao, 
		 nm_usuario)
	(SELECT	 nm_usuario_dest_p, 
		 cd_setor_atendimento, 
		 clock_timestamp(), 
		 nm_usuario_p
	from	 usuario_setor
	where	 nm_usuario_param = nm_usuario_param_setor_w
	and	 cd_setor_atendimento = cd_setor_atendimento_w);	
	
	end;
end loop;
close C03;

open C04;
loop
fetch C04 into	
	nm_usuario_param_estab_w,
	cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin
	
	insert into usuario_estabelecimento(nm_usuario_param,
		 cd_estabelecimento, 
		 dt_atualizacao, 
		 nm_usuario, 
		 dt_atualizacao_nrec, 
		 nm_usuario_nrec, 
		 cd_setor_padrao, 
		 nr_seq_perfil)
	(SELECT	 nm_usuario_dest_p, 
		 cd_estabelecimento, 
		 dt_atualizacao, 
		 nm_usuario, 
		 dt_atualizacao_nrec, 
		 nm_usuario_nrec, 
		 cd_setor_padrao, 
		 nr_seq_perfil
	 from	 usuario_estabelecimento
	 where	 nm_usuario_param = nm_usuario_param_estab_w
	 and	 cd_estabelecimento = cd_estabelecimento_w);	
	
	end;
end loop;
close C04;

open C05;
loop
fetch C05 into	
	nr_seq_interno_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin
	
	select	nextval('funcao_param_usuario_seq')
	into STRICT	nr_seq_interno_atual_w
	;
	
	insert into funcao_param_usuario(nr_seq_interno,
		 cd_funcao,
		 nr_sequencia, 
		 nm_usuario_param, 
		 dt_atualizacao, 
		 nm_usuario, 
		 vl_parametro, 
		 ds_observacao, 
		 cd_estabelecimento)
	(SELECT	 nr_seq_interno_atual_w, 
		 cd_funcao, 
		 nr_sequencia, 
		 nm_usuario_dest_p, 
		 clock_timestamp(), 
		 nm_usuario_p, 
		 vl_parametro, 
		 ds_observacao, 
		 cd_estabelecimento
	 from	 funcao_param_usuario
	 where	 nr_seq_interno = nr_seq_interno_w);		
	
	end;
end loop;
close C05;

if (ie_copia_grupo_trab_p = 'S') then
	open C06;
	loop
	fetch C06 into
		nr_seq_grupo_trab_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin
		
		select	count(*)
		into STRICT	qt_usu_grupo_trab_w
		from	man_grupo_trab_usuario
		where	nr_seq_grupo_trab = nr_seq_grupo_trab_w
		and	nm_usuario_param = nm_usuario_dest_p;
		
		if (qt_usu_grupo_trab_w <> 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(330643); --Este usuario ja existe nos grupos de trabalho que estao sendo atribuidos a ele. Verificar.
		else
			insert into man_grupo_trab_usuario(nr_seq_grupo_trab,
				 nm_usuario_param, 
				 dt_atualizacao, 
				 nm_usuario)
			values (nr_seq_grupo_trab_w,
				 nm_usuario_dest_p,
				 clock_timestamp(),
				 nm_usuario_orig_p);
		end if;
			
		end;
	end loop;
	close C06;
end if;

begin

SELECT COUNT(1) INTO STRICT qt_count_locale FROM USER_LOCALE a WHERE a.NM_USUARIO = nm_usuario_dest_p;
IF qt_count_locale > 0 THEN
    DELETE FROM USER_LOCALE a WHERE a.NM_USUARIO = nm_usuario_dest_p;
END IF;
insert into user_locale(
	nm_user,
	ds_locale,
	ds_calendar,
	ds_language,
	ds_timezone,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	ds_secondary_calendar)
	(SELECT	nm_usuario_dest_p,
		ds_locale,
		ds_calendar,
		ds_language,
		ds_timezone,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		ds_secondary_calendar
	from	user_locale
	where	nm_user = nm_usuario_orig_p  LIMIT 1);
exception
when others then
	null;
end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_usuario_import_usuario ( nm_usuario_orig_p text, cd_estabelecimento_p bigint, nm_usuario_dest_p text, ds_senha_p text, nm_usuario_p text, ds_login_p text, cd_pessoa_fisica_p text, cd_barras_p text, ds_conta_email_p text, ds_email_p text, nm_usuario_login_p text, ie_copia_grupo_trab_p text default 'N') FROM PUBLIC;

