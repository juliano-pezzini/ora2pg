-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_pessoas_rvs ( nm_usuario_p text, nr_seq_lote_siscoserv_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, ie_somente_nota_p text, cd_empresa_p bigint, cd_estab_exclusivo_p bigint) AS $body$
DECLARE

 
qt_insert_w		bigint;
nr_seq_pessoa_rvs_w	siscoserv_rvs.nr_sequencia%type;
dt_inicial_w		timestamp;
dt_final_w		timestamp;
cd_moeda_w		moeda.cd_moeda%type;

/* ************************************************************************************************************* 
                                     ATENDIMENTO DE ESTRANGEIROS 
  Vai pegar todos os atendimentos de pessoas que tenha o complemento residencial (complemento do tipo 1) e neste complemento 
  esteja com o país informado, o no cadastro deste país esteja informado um código diferente de 105 ou variantes com zero na frente 
  Ex: 105 ou 0105 ou 00105 ou XXX105 ou qualquer coisa que possa ser convertida no número 105 
 
  Código do Enquadramento conforme tabela disponibilizada no sítio Siscoserv 
  105 é o código do Brasil nas tabelas do SISCOSERV 
   ************************************************************************************************************* */
 
C01 CURSOR FOR 
	SELECT	a.cd_pessoa_fisica, 
		a.dt_entrada dt_entrada, 
		a.nr_atendimento 
	from	estabelecimento f, 
		pais d, 
		compl_pessoa_fisica c, 
		pessoa_fisica b, 
		atendimento_paciente a 
	where	b.cd_pessoa_fisica = a.cd_pessoa_fisica 
	and	b.cd_pessoa_fisica = c.cd_pessoa_fisica 
	and	c.ie_tipo_complemento = 1 -- Complemento Residencial 
	and	c.nr_seq_pais = d.nr_sequencia 
	and	somente_numero(d.cd_pais_siscoserv) <> 105 
	and	a.dt_entrada between dt_inicial_w and dt_final_w 
	and	f.cd_estabelecimento = a.cd_estabelecimento 
	and	f.cd_empresa = cd_empresa_p 
	and	f.cd_estabelecimento = coalesce(cd_estab_exclusivo_p, f.cd_estabelecimento) 
	and	(((ie_somente_nota_p = 'N') 
		and not exists (	SELECT	1 
				from	conta_paciente y, 
					nota_fiscal x 
				where	x.nr_interno_conta = y.nr_interno_conta)) 
		or exists (	select	1 
				from	pais w, 
					compl_pessoa_fisica z, 
					conta_paciente y, 
					nota_fiscal x 
				where	x.nr_interno_conta = y.nr_interno_conta 
				and	y.nr_atendimento = a.nr_atendimento 
				and	x.cd_pessoa_fisica = z.cd_pessoa_fisica 
				and	(x.dt_atualizacao_estoque IS NOT NULL AND x.dt_atualizacao_estoque::text <> '') 
				and	z.ie_tipo_complemento = 1 -- Complemento residencial 
				and	z.nr_seq_pais = w.nr_sequencia 
				and	somente_numero(w.cd_pais_siscoserv) <> 105 
				) 
		) 
	and	not exists (	select	1 
				from	siscoserv_rvs y 
				where	y.nr_atendimento = a.nr_atendimento);

c01_w		C01%rowtype;


BEGIN 
 
dt_inicial_w		:= trunc(dt_inicial_p,'dd');
dt_final_w		:= fim_dia(dt_final_p);
 
qt_insert_w := 0;
 
/* ********************************  INICIO TRATAMENTO MOEDA  *********************************** */
 
select	max(cd_moeda) 
into STRICT	cd_moeda_w 
from	moeda 
where	cd_moeda_siscoserv = '790';
if (coalesce(cd_moeda_w,0) = 0) then 
	begin 
 
	begin 
	select	cd_moeda 
	into STRICT	cd_moeda_w 
	from (	SELECT	cd_moeda, 
			1 ds_moeda, 
			2 ds_sigla_moeda, 
			CASE WHEN coalesce(cd_moeda_siscoserv::text, '') = '' THEN 2  ELSE 1 END  
		from	moeda 
		where	upper(ds_moeda) = 'REAL' 
		
union
 
		SELECT	cd_moeda, 
			2 ds_moeda, 
			1 ds_sigla_moeda, 
			CASE WHEN coalesce(cd_moeda_siscoserv::text, '') = '' THEN 2  ELSE 1 END  
		from	moeda 
		where	upper(ds_sigla_moeda) = 'R$' 
		
union
 
		select	cd_moeda, 
			3 ds_moeda, 
			3 ds_sigla_moeda, 
			CASE WHEN coalesce(cd_moeda_siscoserv::text, '') = '' THEN 2  ELSE 1 END  
		from	moeda 
		where	upper(ds_moeda) like '%REAL%' 
		order by 
			4, 
			2, 
			3) alias8 LIMIT 1;
	exception 
	when others then 
		cd_moeda_w := null;
	end;
	end;
end if;
/* **********************************  FIM TRATAMENTO MOEDA  ************************************ */
 
 
open C01;
loop 
fetch C01 into 
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
 
	select	nextval('siscoserv_rvs_seq') 
	into STRICT	nr_seq_pessoa_rvs_w 
	;
 
	insert into siscoserv_rvs(nr_sequencia, 
			nm_usuario, 
			nm_usuario_nrec, 
			dt_atualizacao, 
			dt_atualizacao_nrec, 
			nr_seq_lote, 
			cd_pessoa_fisica, 
			dt_referencia, 
			nr_atendimento, 
			cd_moeda) 
	values (	nr_seq_pessoa_rvs_w, 
			nm_usuario_p, 
			nm_usuario_p, 
			clock_timestamp(), 
			clock_timestamp(), 
			nr_seq_lote_siscoserv_p, 
			c01_w.cd_pessoa_fisica, 
			c01_w.dt_entrada, 
			c01_w.nr_atendimento, 
			cd_moeda_w);
 
	CALL fis_gerar_operacao_rvs(nm_usuario_p, nr_seq_pessoa_rvs_w, c01_w.nr_atendimento, ie_somente_nota_p);
 
	qt_insert_w := qt_insert_w + 1;
	if (qt_insert_w > 100) then 
		begin 
		commit;
		qt_insert_w := 0;
		end;
	end if;
 
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_pessoas_rvs ( nm_usuario_p text, nr_seq_lote_siscoserv_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, ie_somente_nota_p text, cd_empresa_p bigint, cd_estab_exclusivo_p bigint) FROM PUBLIC;

