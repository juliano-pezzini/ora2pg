-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_idade_agenda_pac_enc (cd_agenda_p bigint, dt_agenda_p timestamp, qt_idade_p bigint, ds_erro_p INOUT text, nm_usuario_p text, cd_pessoa_fisica_p text default null) AS $body$
DECLARE

 
ie_dia_semana_w		integer;
qt_idade_min_w		bigint;
qt_idade_max_w		bigint;
qt_idade_min_enc_w	bigint;
qt_idade_max_enc_w	bigint;
ds_erro_w		varchar(255)	:= '';
ie_cons_idade_pac_zerada_w		varchar(1)	:= 'N';
ie_cons_idade_pac_zero_ag_w 		agenda.ie_cons_idade_pac_zero_ag%type;
ie_consistir_idade_dt_agenda_w		agenda.ie_cons_idade_pac_zero_ag%type;
qt_idade_w				bigint;
dt_nascimento_w				timestamp;

ie_consiste_idademin_zero_w	varchar(1) := 'N';


BEGIN 
 
ie_consiste_idademin_zero_w := obter_param_usuario(821, 105, Obter_Perfil_Ativo, nm_usuario_p, 0, ie_consiste_idademin_zero_w);
ie_cons_idade_pac_zerada_w := obter_param_usuario(821, 362, Obter_Perfil_Ativo, nm_usuario_p, 0, ie_cons_idade_pac_zerada_w);
 
select 	coalesce(max(ie_cons_idade_pac_zero_ag),'N'), 
	coalesce(max(ie_consistir_idade_dt_agenda),'N') 
into STRICT 	ie_cons_idade_pac_zero_ag_w, 
	ie_consistir_idade_dt_agenda_w 
from	agenda 
where	cd_agenda = cd_agenda_p;
 
select	max(dt_nascimento) 
into STRICT	dt_nascimento_w 
from	pessoa_fisica 
where	cd_pessoa_fisica	= cd_pessoa_fisica_p;
 
if (ie_consistir_idade_dt_agenda_w = 'S') then 
	select	max(trunc(trunc(months_between(dt_agenda_p, dt_nascimento_w)) / 12)) 
	into STRICT	qt_idade_w 
	;
else	 
	qt_idade_w := qt_idade_p;
end if;
 
select	pkg_date_utils.get_WeekDay(dt_agenda_p) 
into STRICT	ie_dia_semana_w
;
 
select	coalesce(max(qt_idade_min),0), 
	coalesce(max(qt_idade_max),0) 
into STRICT	qt_idade_min_w, 
	qt_idade_max_w 
from	agenda_turno 
where	cd_agenda	= cd_agenda_p 
and	((ie_dia_semana	= ie_dia_semana_w) or ((ie_dia_semana = 9) and (PKG_DATE_UTILS.IS_BUSINESS_DAY(dt_agenda_p) = 1))) 
and	to_date('01/01/1899 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <= 
	to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') 
and	to_date('01/01/1899 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >= 
	to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') 
and	((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p))) 
and	((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p)));	
 
 
if	((qt_idade_min_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_w = 0)) and (qt_idade_max_w > 0) and 
	(((qt_idade_w > 0) or 
	(qt_idade_w = 0 AND ie_cons_idade_pac_zerada_w = 'S')) or (ie_cons_idade_pac_zero_ag_w = 'S')) then 
	begin 
 
	if (qt_idade_min_w > qt_idade_w) then 
		ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277649,null);
	end if;		
	 
	if (qt_idade_max_w < qt_idade_w) then 
		ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277651,null);
	end if;		
 
	end;
end if;	
 
if (qt_idade_min_w = 0) and (qt_idade_max_w = 0) then 
	begin 
 
	select	coalesce(max(qt_idade_min),0), 
		coalesce(max(qt_idade_max),0) 
	into STRICT	qt_idade_min_w, 
		qt_idade_max_w 
	from	agenda_turno 
	where	cd_agenda	= cd_agenda_p 
	and	ie_dia_semana	= 9 
	and	dt_agenda_p between dt_inicio_vigencia and dt_final_vigencia + 86399/86400 
	and	to_date('01/01/1899 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <= 
		to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') 
	and	to_date('01/01/1899 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >= 
		to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') 
	and	((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p))) 
	and	((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p)));		
 
	if	((qt_idade_min_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_w = 0)) and (qt_idade_max_w > 0) and 
		(((qt_idade_w > 0) or 
		(qt_idade_w = 0 AND ie_cons_idade_pac_zerada_w = 'S')) or (ie_cons_idade_pac_zero_ag_w = 'S')) then 
		begin 
 
		if (qt_idade_min_w > qt_idade_w) then 
			ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277649,null);
		end if;		
	 
		if (qt_idade_max_w < qt_idade_w) then 
			ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277651,null);
		end if;		
 
		end;
	end if;	
 
	end;
end if;
 
if (qt_idade_min_w = 0) and (qt_idade_max_w = 0) then 
 
	select	coalesce(max(qt_idade_min_encaixe),0), 
		coalesce(max(qt_idade_max_encaixe),0) 
	into STRICT	qt_idade_min_enc_w, 
		qt_idade_max_enc_w 
	from	agenda 
	where	cd_agenda	= cd_agenda_p;
	 
	if	((qt_idade_min_enc_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_enc_w = 0)) and (qt_idade_max_enc_w > 0) and 
		(((qt_idade_w > 0) or 
		(qt_idade_w = 0 AND ie_cons_idade_pac_zerada_w = 'S')) or (ie_cons_idade_pac_zero_ag_w = 'S')) then 
		begin 
 
		if (qt_idade_min_enc_w > qt_idade_w) then 
			ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(279306,null);
		end if;		
		 
		if (qt_idade_max_enc_w < qt_idade_w) then 
			ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(279308,null);
		end if;		
		end;
	end if;
end if;	
	 
ds_erro_p	:= ds_erro_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_idade_agenda_pac_enc (cd_agenda_p bigint, dt_agenda_p timestamp, qt_idade_p bigint, ds_erro_p INOUT text, nm_usuario_p text, cd_pessoa_fisica_p text default null) FROM PUBLIC;

