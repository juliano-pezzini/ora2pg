-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_solic_item_requisicao ( nr_requisicao_p bigint, nr_seq_item_p bigint, nm_usuario_p text, nr_solic_compra_p INOUT bigint) AS $body$
DECLARE


cd_material_w			integer;
qt_material_w			double precision;
cd_estabelecimento_w		smallint;
cd_unidade_medida_w		varchar(30);
cd_local_estoque_w		smallint;
cd_pessoa_solicitante_w		varchar(10);
nr_item_w			integer;
nr_solic_compra_w			bigint;
nr_solic_compra_ww		bigint;
ie_gerou_w			varchar(1);
qt_existe_w			integer;
nr_sequencia_w			integer;
ds_material_w			varchar(255);
ds_observacao_w			varchar(255);
ds_historico_w			varchar(4000);
nr_seq_historico_w			bigint;
length_ds_historico_w		bigint;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.cd_material,
	obter_quantidade_convertida(a.cd_material, a.qt_material_requisitada, cd_unidade_medida, 'UMP') qt_material,
	b.cd_estabelecimento,
	substr(obter_dados_material_estab(a.cd_material,b.cd_estabelecimento,'UMC'),1,255) cd_unidade_medida,
	b.cd_local_estoque,
	a.ds_observacao,
	e.ds_material
from	material e,
	requisicao_material b,
	item_requisicao_material a
where	a.nr_requisicao	= nr_requisicao_p
and	a.cd_material = e.cd_material
and	a.nr_requisicao	= b.nr_requisicao
and (a.nr_sequencia	= nr_seq_item_p or nr_seq_item_p = 0)
and	not exists (	select	1
			from	solic_compra_item x
			where	x.NR_SEQ_ITEM_REQUISICAO = a.nr_sequencia
			and	x.nr_requisicao = a.nr_requisicao
			and	coalesce(x.nr_seq_motivo_cancel::text, '') = '');


BEGIN

ie_gerou_w	:= 'N';

select	cd_pessoa_fisica
into STRICT	cd_pessoa_solicitante_w
from	usuario
where	nm_usuario = nm_usuario_p;

select	coalesce(max(nr_solic_compra),0)
into STRICT	nr_solic_compra_ww
from	solic_compra_item
where	nr_requisicao = nr_requisicao_p
and (NR_SEQ_ITEM_REQUISICAO	= nr_seq_item_p or nr_seq_item_p = 0)
and	coalesce(nr_seq_motivo_cancel::text, '') = '';

if (nr_solic_compra_ww > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(307822,'NR_SOLIC_COMPRA='||nr_solic_compra_ww);
	/*r.aise_application_error(-20011, 'Já existe a solicitação ' || nr_solic_compra_ww || ' gerada para este item da requisição.);*/

end if;

open c01;
loop
fetch c01 into
	nr_sequencia_w,
	cd_material_w,
	qt_material_w,
	cd_estabelecimento_w,
	cd_unidade_medida_w,
	cd_local_estoque_w,
	ds_observacao_w,
	ds_material_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	if (ie_gerou_w = 'N') then
		begin
		if (coalesce(nr_solic_compra_p, 0) > 0) then
			nr_solic_compra_w	:= nr_solic_compra_p;
			select	count(*)
			into STRICT	qt_existe_w
			from	solic_compra
			where	nr_solic_compra = nr_solic_compra_w;
			if (qt_existe_w = 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(180508,'NR_SOLIC_COMPRA='||nr_solic_compra_w);
				/*r.aise_application_error(-20011, 'Não existe a solicitação de compras numero ' || nr_solic_compra_w);*/

			end if;

			select	count(*)
			into STRICT	qt_existe_w
			from	solic_compra
			where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	nr_solic_compra = nr_solic_compra_w;
			if (qt_existe_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(180510,'NR_SOLIC_COMPRA='||nr_solic_compra_w);
				/*r.aise_application_error(-20011, 'A solicitação de compras informada já está liberada. ' || nr_solic_compra_w);*/

			end if;
		end if;

		if (coalesce(nr_solic_compra_p, 0) = 0) then


			select	nextval('solic_compra_seq')
			into STRICT	nr_solic_compra_w
			;

			insert into solic_compra(
				nr_solic_compra,
				cd_estabelecimento,
				dt_solicitacao_compra,
				dt_atualizacao,
				nm_usuario,
				ie_situacao,
				cd_pessoa_solicitante,
				cd_local_estoque,
				ie_aviso_aprov_oc,
				ie_urgente,
				ie_tipo_solicitacao,
				ie_comodato,
				ie_semanal,
				nm_usuario_nrec,
				dt_atualizacao_nrec)
			values ( nr_solic_compra_w,
				cd_estabelecimento_w,
				clock_timestamp(),
				clock_timestamp(),
				nm_usuario_p,
				'A',
				cd_pessoa_solicitante_w,
				cd_local_estoque_w,
				'N',
				'N',
				4,
				'N',
				'N',
				nm_usuario_p,
				clock_timestamp());
		end if;

		ie_gerou_w	:= 'S';
		end;
	end if;

	select	coalesce(max(nr_item_solic_compra),0) + 1
	into STRICT	nr_item_w
	from	solic_compra_item
	where	nr_solic_compra = nr_solic_compra_w;

	insert into solic_compra_item(
		nr_solic_compra,
		nr_item_solic_compra,
		cd_material,
		cd_unidade_medida_compra,
		qt_material,
		dt_atualizacao,
		nm_usuario,
		ie_situacao,
		ie_geracao,
		dt_solic_item,
		ds_observacao,
		qt_conv_compra_est_orig,
		qt_saldo_disp_estoque,
		NR_REQUISICAO,
		NR_SEQ_ITEM_REQUISICAO)
	values (nr_solic_compra_w,
		nr_item_w,
		cd_material_w,
		cd_unidade_medida_w,
		qt_material_w,
		clock_timestamp(),
		nm_usuario_p,
		'A',
		'S',
		trunc(clock_timestamp() + interval '7 days', 'dd'),
		ds_observacao_w,
		obter_dados_material(cd_material_w,'QCE'),
		obter_saldo_disp_estoque(cd_estabelecimento_w, cd_material_w, cd_local_estoque_w, trunc(clock_timestamp(),'mm')),
		nr_requisicao_p,
		nr_sequencia_w);

	insert into solic_compra_item_entrega(
		nr_solic_compra,
		nr_item_solic_compra,
		nr_item_solic_compra_entr,
		qt_entrega_solicitada,
		dt_entrega_solicitada,
		dt_atualizacao,
		nm_usuario)
	values ( nr_solic_compra_w,
		nr_item_w,
		1,
		qt_material_w,
		trunc(clock_timestamp() + interval '7 days', 'dd'),
		clock_timestamp(),
		nm_usuario_p);

	ds_historico_w := substr(ds_historico_w || '['|| nr_sequencia_w || '] - ' || cd_material_w || ' - ' || ds_material_w || chr(13) || chr(10),1,4000);
	end;

end loop;
close c01;

if (ie_gerou_w = 'S') then
	begin
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_historico_w
	from	requisicao_mat_historico
	where	nr_requisicao = nr_requisicao_p
	and	cd_evento = 'SC'
	and	ds_titulo like(Wheb_mensagem_pck.get_Texto(302220, 'NR_SOLIC_COMPRA_W='|| NR_SOLIC_COMPRA_W))	/*Geração de itens solicitação de compras #@NR_SOLIC_COMPRA_W#@*/
	and	dt_historico between(clock_timestamp() - interval '1 days'/24) and clock_timestamp();

	if (nr_seq_historico_w <> 0) then
		select 	coalesce(LENGTH(ds_historico),0)
		into STRICT	length_ds_historico_w
		from	requisicao_mat_historico
		where	nr_sequencia = nr_seq_historico_w;
	else
		length_ds_historico_w := 0;
	end if;

	if (nr_seq_historico_w = 0) or (length_ds_historico_w > 3000) then
		CALL gerar_historico_requisicao(nr_requisicao_p, Wheb_mensagem_pck.get_Texto(302220, 'NR_SOLIC_COMPRA_W='|| NR_SOLIC_COMPRA_W), ds_historico_w, 'SC', nm_usuario_p);
	else
		update	requisicao_mat_historico
		set	ds_historico = substr(ds_historico || ds_historico_w,1,4000)
		where	nr_sequencia = nr_seq_historico_w;
	end if;
	end;
end if;

commit;
nr_solic_compra_p := coalesce(nr_solic_compra_w,0);
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_solic_item_requisicao ( nr_requisicao_p bigint, nr_seq_item_p bigint, nm_usuario_p text, nr_solic_compra_p INOUT bigint) FROM PUBLIC;

