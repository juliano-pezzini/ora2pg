-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE transferir_agenda_pac (nr_seq_origem_p bigint, nr_seq_destino_p bigint, nm_usuario_p text, nr_seq_motivo_p bigint, ds_motivo_p text, nr_seq_motivo_prazo_p bigint, ds_motivo_prazo_p text) AS $body$
DECLARE



dt_agenda_w		timestamp;
hr_inicio_w		timestamp;
cd_agenda_w		bigint;
nr_cirurgia_w		bigint;
ie_ok_w			varchar(01)	:= 'S';
ie_passa_normal_w		varchar(05);
cd_perfil_w		bigint;
ie_excluir_livres_w		varchar(01) 	:= 'N';
cd_estabelecimento_w	bigint;
cd_estabelecimento_ww	bigint;
ds_alteracao_w		varchar(2000);

cd_convenio_w		integer;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
cd_medico_w		varchar(10);
ie_consistencia_w		varchar(255)	:= '';
ie_consist_js_w		varchar(255)	:= '';
ie_agenda_w		varchar(1)	:= 'S';
cd_funcao_w		integer;
cd_agenda_orig_w        	bigint;
hr_inicio_orig_w		timestamp;
cd_pessoa_fisica_w	varchar(10);
nm_paciente_w		varchar(60);
ie_manter_status_w		varchar(1)	:= 'N';
cd_plano_w		varchar(10);
ie_opme_integracao_w	varchar(1);
ds_mensagem_w		varchar(2000);
ds_observacao_origem_w	varchar(2000);
ie_medico_req_transf_w	varchar(1);
cd_medico_req_w			varchar(10);

/* variaveis historico */

atrib_oldvalue_w		varchar(50);
atrib_newvalue_w		varchar(50);
ie_GeraRegraCalcInter_w	varchar(1);

ds_motivo_tranf_w	varchar(255):= null;
ds_motivo_w		varchar(255);
ie_transferir_bs_w	varchar(1);
ie_status_cancelada_w	varchar(3);
ie_status_angenda_w	varchar(3);
ie_status_angenda_ww	agenda_paciente.ie_status_agenda%type;
ie_data_agendamento_w	varchar(1);
ie_limpa_dt_preparo_w	varchar(1);
dt_chegada_prev_w	timestamp;
qt_dias_prev_w		integer;
ie_estagio_autor_transf_w	varchar(2);
ie_modo_reserva_w		varchar(15);
ds_nome_abrev_w			varchar(50);
ds_nome_abrev_ww		varchar(50);
ie_excluir_equip_w		varchar(1);
ie_excluir_cme_w		varchar(1);
ie_cancelar_autor_conv_w	varchar(1);
nr_seq_estagio_cancel_w		bigint;
nr_seq_estagio_necessidade_w	bigint;
nr_sequencia_autor_w		bigint;
ie_reserva_leito_w		varchar(3);
qt_diaria_prev_w		smallint;
ds_erro_w			varchar(2000):=null;
ie_interno_w			varchar(15);
nr_seq_est_autor_transf_w	bigint;
dt_agenda_consiste_w		timestamp;
dt_fim_vigencia_autor_w		timestamp;
cd_retorno_w			bigint;
ie_atualiza_se_data_vig_w	varchar(15) := 'N';
dt_entrada_prevista_w		timestamp;
ie_transf_prescr_apae_w		varchar(1);
cd_setor_exclusivo_atual_w	integer;
cd_setor_exclusivo_anter_w 	integer;
cd_setor_equipamento_w		integer;
cd_equipamento_w			bigint;
VarExcluirPrescTranf		varchar(1);
cd_local_estoque_atual_w	integer;
cd_local_estoque_anter_w 	integer;
qt_autor_canc_w			bigint;
ie_status_agenda_anter_w	varchar(15);
ie_gera_autor_transf_canc_w	varchar(15);
VarGerarReqTransf		varchar(1);
nr_prescricao_w			bigint;
cd_agenda_destino_w		bigint;
ie_desvinc_cir_prescr_w		varchar(1);
dt_agenda_origem_w		timestamp;
ds_estagio_w			varchar(255);
nr_seq_estagio_autor_w		bigint;
ie_status_transf_w		varchar(15);
nr_seq_status_pac_w		bigint := null;
ie_excluir_requisicao_w		varchar(15);
cd_empresa_ref_w		bigint;
cd_setor_atendimento_w		integer;
ds_sep_bv_w					varchar(100);
ds_param_integ_hl7_w		varchar(4000);
ie_copia_atendimento_w		varchar(15);
ie_anestesia_w				varchar(1);
dt_agendamento_w		timestamp;
envio_auto_int_opme_w		opme_envio_automatico.ie_evento%type;
ie_gera_hist_transf_w			varchar(15);
ds_retorno_integracao_w       varchar(4000);
ie_closed_schedule_w		varchar(1);
ie_duplicated_time_w		varchar(1);
nr_seconds_w				integer;

ie_s_w constant agenda_paciente.ie_status_agenda%type := 'S';
ie_n_w constant agenda_paciente.ie_status_agenda%type := 'N';

expressao1_w	varchar(255) := obter_desc_expressao_idioma(774405, null, wheb_usuario_pck.get_nr_seq_idioma);--dados da transferencia
expressao2_w	varchar(255) := obter_desc_expressao_idioma(283242, null, wheb_usuario_pck.get_nr_seq_idioma);--agenda
expressao3_w	varchar(255) := obter_desc_expressao_idioma(291428, null, wheb_usuario_pck.get_nr_seq_idioma);--horario
expressao4_w	varchar(255) := obter_desc_expressao_idioma(283966, null, wheb_usuario_pck.get_nr_seq_idioma);--atualizacao
expressao5_w	varchar(255) := obter_desc_expressao_idioma(314533, null, wheb_usuario_pck.get_nr_seq_idioma);--usuario
expressao6_w	varchar(255) := obter_desc_expressao_idioma(295156, null, wheb_usuario_pck.get_nr_seq_idioma);--paciente
expressao7_w	varchar(255) := obter_desc_expressao_idioma(298824, null, wheb_usuario_pck.get_nr_seq_idioma);--status
expressao8_w	varchar(255) := obter_desc_expressao_idioma(293090, null, wheb_usuario_pck.get_nr_seq_idioma);--medico
expressao9_w	varchar(255) := obter_desc_expressao_idioma(296397, null, wheb_usuario_pck.get_nr_seq_idioma);--proced
expressao10_w	varchar(255) := obter_desc_expressao_idioma(294924, null, wheb_usuario_pck.get_nr_seq_idioma);--origem
expressao11_w	varchar(255) := obter_desc_expressao_idioma(697085, null, wheb_usuario_pck.get_nr_seq_idioma);--interno	
expressao12_w	varchar(255) := obter_desc_expressao_idioma(302532, null, wheb_usuario_pck.get_nr_seq_idioma);--agendamento
expressao13_w	varchar(255) := obter_desc_expressao_idioma(314533, null, wheb_usuario_pck.get_nr_seq_idioma);--usuario
expressao14_w	varchar(255) := obter_desc_expressao_idioma(774414, null, wheb_usuario_pck.get_nr_seq_idioma);--Transf. agenda
expressao15_w	varchar(255) := obter_desc_expressao_idioma(291374, null, wheb_usuario_pck.get_nr_seq_idioma);--Hora
expressao16_w	varchar(255) := obter_desc_expressao_idioma(283242, null, wheb_usuario_pck.get_nr_seq_idioma);--Agenda
expressao17_w	varchar(255) := obter_desc_expressao_idioma(287627, null, wheb_usuario_pck.get_nr_seq_idioma);--Destino	
expressao18_w	varchar(255) := obter_desc_expressao_idioma(293478, null, wheb_usuario_pck.get_nr_seq_idioma);--Motivo
expressao19_w	varchar(255) := obter_desc_expressao_idioma(344235, null, wheb_usuario_pck.get_nr_seq_idioma);--Obs:
expressao20_w	varchar(255) := obter_desc_expressao_idioma(774040, null, wheb_usuario_pck.get_nr_seq_idioma);--Agenda Transferida. Procedimento
expressao21_w	varchar(255) := obter_desc_expressao_idioma(287656, null, wheb_usuario_pck.get_nr_seq_idioma);--Dia
expressao22_w	varchar(255) := obter_desc_expressao_idioma(618483, null, wheb_usuario_pck.get_nr_seq_idioma);--as
expressao23_w	varchar(255) := obter_desc_expressao_idioma(325787, null, wheb_usuario_pck.get_nr_seq_idioma);--para
expressao24_w	varchar(255) := obter_desc_expressao_idioma(774417, null, wheb_usuario_pck.get_nr_seq_idioma);--O Estagio foi alterado para
expressao25_w	varchar(255) := obter_desc_expressao_idioma(774420, null, wheb_usuario_pck.get_nr_seq_idioma);--Agenda transferida para data fora da vigencia da autorizacao.	
expressao26_w	varchar(255) := obter_desc_expressao_idioma(774421, null, wheb_usuario_pck.get_nr_seq_idioma);--Gestao da agenda. Parametro [611]
c01 CURSOR FOR
SELECT	a.nr_sequencia,
	b.ie_interno,
	nr_seq_estagio
from	estagio_autorizacao b,
	autorizacao_convenio a
where	a.nr_seq_agenda		= nr_seq_origem_p
and	a.nr_seq_estagio	= b.nr_sequencia
and	b.ie_interno		<> '70';

c02 CURSOR FOR
SELECT	a.cd_setor_atendimento,
	a.cd_equipamento
from	agenda_pac_equip b,
	equipamento a
where	a.cd_equipamento = b.cd_equipamento
and	b.nr_seq_agenda  = nr_seq_origem_p;


BEGIN

select	coalesce(max(nr_cirurgia),0),
	max(b.cd_estabelecimento),
	max(a.cd_convenio),
	max(a.cd_procedimento),
	max(a.ie_origem_proced),
	max(a.nr_seq_proc_interno),
	max(a.cd_medico),
	max(a.cd_agenda),
	max(a.hr_inicio),
	max(a.cd_pessoa_fisica),
	max(nm_paciente),
	max(a.cd_plano),
	max(a.ie_opme_integracao),
	max(dt_chegada_prev),
	max(a.ie_reserva_leito),
	max(a.qt_diaria_prev),
	substr(max(a.ds_observacao),1,2000),
	max(a.ie_status_agenda),
	max(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_agenda)),
	max(a.cd_medico_req)
into STRICT	nr_cirurgia_w,
	cd_estabelecimento_w,
	cd_convenio_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_proc_interno_w,
	cd_medico_w,
	cd_agenda_orig_w,
	hr_inicio_orig_w,
	cd_pessoa_fisica_w,
	nm_paciente_w,
	cd_plano_w,
	ie_opme_integracao_w,
	dt_chegada_prev_w,
	ie_reserva_leito_w,
	qt_diaria_prev_w,
	ds_observacao_origem_w,
	ie_status_agenda_anter_w,
	dt_agenda_origem_w,
	cd_medico_req_w
from 	agenda b,
	agenda_paciente a
where	a.nr_sequencia	= nr_seq_origem_p
and	a.cd_agenda	= b.cd_agenda;

select 	max(obter_local_estoque_setor(b.cd_setor_exclusivo, cd_estabelecimento_w))
into STRICT	cd_local_estoque_anter_w
from	agenda b,
	agenda_paciente a
where 	a.cd_agenda = b.cd_agenda
and	a.nr_sequencia = nr_seq_origem_p;

select	Obter_funcao_ativa
into STRICT	cd_funcao_w
;

select	obter_perfil_ativo
into STRICT	cd_perfil_w
;

select	coalesce(max(obter_valor_param_usuario(39, 60, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)), 'N')
into STRICT	ie_excluir_livres_w
;

ie_passa_normal_w := Obter_Param_Usuario(39, 77, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_passa_normal_w);
ie_GeraRegraCalcInter_w := Obter_Param_Usuario(871, 239, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_GeraRegraCalcInter_w);
ie_gera_hist_transf_w := Obter_Param_Usuario(871, 242, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gera_hist_transf_w);
ie_transferir_bs_w := Obter_Param_Usuario(871, 307, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_transferir_bs_w);
ie_status_cancelada_w := Obter_Param_Usuario(871, 317, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_status_cancelada_w);
ie_data_agendamento_w := obter_Param_Usuario(871, 331, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_data_agendamento_w);
ie_limpa_dt_preparo_w := obter_Param_Usuario(871, 407, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_limpa_dt_preparo_w);
ie_modo_reserva_w := Obter_Param_Usuario(871, 437, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_modo_reserva_w);
ie_excluir_equip_w := Obter_Param_Usuario(871, 465, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_excluir_equip_w);
ie_excluir_cme_w := Obter_Param_Usuario(871, 466, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_excluir_cme_w);
ie_cancelar_autor_conv_w := obter_param_usuario(871, 469, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_cancelar_autor_conv_w);
nr_seq_est_autor_transf_w := Obter_Param_Usuario(871, 550, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, nr_seq_est_autor_transf_w);
ie_atualiza_se_data_vig_w := Obter_Param_Usuario(871, 611, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_atualiza_se_data_vig_w);
ie_transf_prescr_apae_w := Obter_Param_Usuario(871, 619, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_transf_prescr_apae_w);
VarExcluirPrescTranf := Obter_Param_Usuario(871, 645, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, VarExcluirPrescTranf);
ie_gera_autor_transf_canc_w := Obter_Param_Usuario(871, 665, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gera_autor_transf_canc_w);
VarGerarReqTransf := Obter_Param_Usuario(871, 666, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, VarGerarReqTransf);
ie_desvinc_cir_prescr_w := Obter_Param_Usuario(871, 678, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_desvinc_cir_prescr_w);
ie_copia_atendimento_w := Obter_Param_Usuario(871, 640, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_copia_atendimento_w);
nr_seq_status_pac_w := Obter_Param_Usuario(871, 749, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, nr_seq_status_pac_w);
ie_excluir_requisicao_w := Obter_Param_Usuario(871, 788, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_excluir_requisicao_w);



select	max(ie_estagio_autor_transf)
into STRICT	ie_estagio_autor_transf_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_w;

/* Tratamento para a Gestao da Agenda Cirurgica */

if (cd_funcao_w = 871) then

	ie_manter_status_w := Obter_Param_Usuario(871, 132, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_manter_status_w);
	ie_status_transf_w := Obter_Param_Usuario(871, 745, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_status_transf_w);

	if (coalesce(ie_manter_status_w::text, '') = '') then
		ie_manter_status_w := 'N';
	end if;

	if (ie_manter_status_w	= 'S') then
		ie_passa_normal_w	:= 'N';
	else
		ie_passa_normal_w	:= 'S';
	end if;
end if;

/* Fim Agenda do Cirurgiao */

begin
select	a.dt_agenda,
	a.hr_inicio,
	a.cd_agenda,
	b.cd_estabelecimento,
	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_agenda),
	b.cd_agenda,
	a.cd_empresa_ref,
	coalesce(a.ie_anestesia, 'N')
into STRICT	dt_agenda_w,
	hr_inicio_w,
	cd_agenda_w,
	cd_estabelecimento_ww,
	dt_agenda_consiste_w,
	cd_agenda_destino_w,
	cd_empresa_ref_w,
	ie_anestesia_w
from	agenda_paciente a,
	agenda b
where	a.cd_agenda	= b.cd_agenda
and	a.nr_sequencia	= nr_seq_destino_p;
exception
	when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(178346);
end;

/*consistir_reserva_leito(cd_agenda_w,
			to_date(to_char(dt_agenda_w,'dd/mm/yyyy') ||' '||to_char(hr_inicio_w,'hh24/mi/ss'),'dd/mm/yyyy hh24:mi:ss'),
			ie_reserva_leito_w,
			qt_diaria_prev_w,
			nr_seq_origem_p,
			ds_erro_w);
if	(ds_erro_w is not null) then

end if;*/


/* Oraci em 25/04/2007 OS55606	*/

SELECT * FROM consistir_proc_conv_agenda(cd_estabelecimento_w, cd_pessoa_fisica_w, hr_inicio_w, cd_agenda_W, cd_convenio_w, null, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, cd_medico_w, 'E', cd_plano_w, null, null, null, cd_empresa_ref_w, ie_anestesia_w, null, null) INTO STRICT ie_consistencia_w, ie_agenda_w, cd_retorno_w, ie_consist_js_w;

if (ie_agenda_w = 'N') or (ie_agenda_w = 'H') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(178359, 'DS_INCONSISTENCIA=' || ie_consistencia_w);
end if;


/* Rafael em 03/01/2007 OS46794 */

ds_alteracao_w	:= null;
ds_alteracao_w	:= '<transferir_agenda_pac> '||expressao1_w||' = '||lower(expressao2_w)||': ' || to_char(cd_agenda_w) ||
		   	   ' '||lower(expressao3_w)||': ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(hr_inicio_w,'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.gettimezone) ||
			   ' '||lower(expressao4_w)||': ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(clock_timestamp(),'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.gettimezone) ||
		   	   ' '||expressao5_w||': ' || nm_usuario_p;
insert into agenda_historico_acao(
					nr_sequencia,
					ie_agenda,
					cd_agenda,
					nr_seq_agenda,
					dt_agenda,
					ie_acao,
					dt_acao,
					ds_acao,
					ds_alteracao
					)
					SELECT	nextval('agenda_historico_acao_seq'),
						obter_tipo_agenda(cd_agenda),
						cd_agenda,
						nr_seq_origem_p,
						hr_inicio,
						'T',
						clock_timestamp(),
						' '||lower(expressao6_w)||': '		|| coalesce(cd_pessoa_fisica,nm_paciente)			||
						' '||lower(expressao7_w)||': '		|| ie_status_agenda						||
						' '||lower(expressao8_w)||': '		|| cd_medico							||

						' '||lower(expressao9_w)||': '		|| to_char(cd_procedimento)					||
						' '||lower(expressao10_w)||': '		|| to_char(ie_origem_proced)				||
						' '||lower(expressao11_w)||': '		|| to_char(nr_seq_proc_interno)				||
						' '||lower(expressao12_w)||': '		|| PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_agendamento,'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.gettimezone)	||
						' '||lower(expressao13_w)||': '		|| nm_usuario_orig,
						ds_alteracao_w
					from	agenda_paciente
					where	nr_sequencia = nr_seq_origem_p;
/* Fim alteracao Rafael em 03/01/2007 OS46794 */

if (ie_gera_hist_transf_w = 'S') then
	CALL gerar_agenda_pac_historico(nr_seq_origem_p,nr_seq_destino_p,wheb_usuario_pck.get_cd_setor_atendimento,obter_pf_usuario(nm_usuario_p,'C'),nm_usuario_p,'T',nr_seq_motivo_p,ds_motivo_p);
end if;


insert into agenda_paciente(CD_AGENDA                                ,
	DT_AGENDA                                 ,
	HR_INICIO                                 ,
	NR_MINUTO_DURACAO                         ,
	NM_USUARIO                                ,
	DT_ATUALIZACAO                            ,
	IE_STATUS_AGENDA                          ,
	IE_ORTESE_PROTESE                         ,
	IE_CDI                                    ,
	IE_UTI                                    ,
	IE_BANCO_SANGUE                           ,
	IE_SERV_ESPECIAL                          ,
	NR_SEQUENCIA                              ,
	IE_ANESTESIA                              ,
	IE_EQUIPAMENTO                            ,
	IE_AUTORIZACAO                            ,
	IE_VIDEO                                  ,
	IE_UC                                     ,
	IE_LADO                                   ,
	IE_BIOPSIA                                ,
	IE_CONGELACAO                             ,
	IE_PRE_INTERNACAO                         ,
	IE_RESERVA_LEITO,
	NM_USUARIO_ORIG)
(SELECT	CD_AGENDA                                 ,
	DT_AGENDA                                 ,
	HR_INICIO                                 ,
	NR_MINUTO_DURACAO                         ,
	nm_usuario_p                              ,
	clock_timestamp()                                   ,
	'L', 'N', 'N', 'N', 'N', 'N',
	nextval('agenda_paciente_seq'),
	'N','N',
	'N',
	'N',
	'N',
	'N',
	'N',
	'N',
	'N',
	'N',
	nm_usuario_p	
from	agenda_paciente
where	nr_sequencia	=  nr_seq_origem_p
and	hr_inicio	< clock_timestamp()
and	ie_excluir_livres_w = 'S');

select	max(ie_status_agenda)
into STRICT	ie_status_angenda_w
from	agenda_paciente
where	nr_sequencia		= nr_seq_origem_p;

select 	coalesce(max('S'), 'N')
into STRICT 	ie_closed_schedule_w
from 	regra_agenda_fechada
where 	ie_status_agenda in (ie_status_angenda_w);

ie_status_angenda_ww := ie_status_angenda_w;

if (ie_status_cancelada_w IS NOT NULL AND ie_status_cancelada_w::text <> '') then
	if (ie_status_angenda_w = 'C') then
		ie_status_angenda_w := ie_status_cancelada_w;
	elsif (ie_closed_schedule_w = 'N') then
		-- Incluido esta linha, pois e somente para casos de agendas canceladas para permanecer o status,
		ie_status_angenda_w := null;
	end if;
elsif (ie_closed_schedule_w = 'N') then
	ie_status_angenda_w := null;
end if;


if (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_inicio_orig_w) > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_inicio_w)) then
	begin
	qt_dias_prev_w := 	(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_inicio_orig_w) - ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_inicio_w));
	dt_chegada_prev_w := 	(dt_chegada_prev_w - qt_dias_prev_w);
	end;
elsif (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_inicio_w) > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_inicio_orig_w)) then
	begin
	qt_dias_prev_w := 	(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_inicio_w) - ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_inicio_orig_w));
	dt_chegada_prev_w := 	(dt_chegada_prev_w + qt_dias_prev_w);
	end;
end if;

if (ie_transf_prescr_apae_w = 'S') then
	CALL transf_prescr_apae_agenda(nr_seq_origem_p,nr_seq_destino_p,nm_usuario_p,cd_estabelecimento_w);
end if;	

select 	max(ie_medico_req_transf)
into STRICT 		ie_medico_req_transf_w
from 		parametro_agenda
where 	cd_estabelecimento = cd_estabelecimento_w;

select coalesce(max('S'), 'N')
into STRICT ie_duplicated_time_w
from 	agenda_paciente
where 	hr_inicio = hr_inicio_w
and 	dt_agenda = dt_agenda_w
and 	cd_agenda = cd_agenda_w
and 	ie_status_agenda = CASE WHEN coalesce(ie_status_angenda_ww::text, '') = '' THEN CASE WHEN coalesce(ie_passa_normal_w, ie_n_w)=ie_s_w THEN  ie_status_transf_w  ELSE ie_status_agenda END   ELSE ie_status_angenda_ww END;

if (ie_duplicated_time_w = 'S') then
	nr_seconds_w := pkg_date_utils.extract_field('SECOND', hr_inicio_w);
			
	if (nr_seconds_w < 58) then
		hr_inicio_w := hr_inicio_w + (1/86400);
	else
		hr_inicio_w := hr_inicio_w - (1/86400);
	end if;
end if;

update	agenda_paciente
set	dt_agenda		= dt_agenda_w,
	hr_inicio		= hr_inicio_w,
	dt_chegada_prev		= dt_chegada_prev_w,
	cd_agenda		= cd_agenda_w,
	dt_atualizacao		= clock_timestamp(),
	nm_usuario		= nm_usuario_p,
	ie_status_agenda	= CASE WHEN ie_status_angenda_w = NULL THEN CASE WHEN coalesce(ie_passa_normal_w, 'N')='S' THEN  ie_status_transf_w  ELSE ie_status_agenda END   ELSE ie_status_angenda_w END ,
	nr_seq_motivo_transf	= nr_seq_motivo_p,
	dt_agendamento		= CASE WHEN ie_data_agendamento_w='S' THEN clock_timestamp()  ELSE dt_agendamento END ,
	nr_seq_motivo_prazo	= CASE WHEN nr_seq_motivo_prazo_p=0 THEN null  ELSE nr_seq_motivo_prazo_p END ,
	ds_motivo_prazo		= ds_motivo_prazo_p,
	nm_usuario_copia_trans	= nm_usuario_p,
        dt_copia_trans		= clock_timestamp(),
	nr_seq_status_pac	= CASE WHEN nr_seq_status_pac_w = NULL THEN nr_seq_status_pac  ELSE nr_seq_status_pac_w END ,
	nr_atendimento		= CASE WHEN ie_copia_atendimento_w='S' THEN nr_atendimento  ELSE null END ,
	cd_medico_req		= CASE WHEN ie_medico_req_transf_w='S' THEN  cd_medico_req_w  ELSE null END
where	nr_sequencia		= nr_seq_origem_p;

select	max(dt_agendamento)
into STRICT	dt_agendamento_w
from	agenda_paciente
where	nr_sequencia	= nr_seq_origem_p;

begin
if (cd_estabelecimento_w <> cd_estabelecimento_ww) then
	update	prescr_medica
	set	cd_estabelecimento	= cd_estabelecimento_ww
	where	nr_seq_agenda 		= nr_seq_origem_p
	and	coalesce(nr_atendimento::text, '') = ''
	and	coalesce(ie_tipo_prescr_cirur::text, '') = '';
	
	update	cirurgia
	set	cd_estabelecimento	= cd_estabelecimento_ww
	where	nr_cirurgia		= nr_cirurgia_w
	and	coalesce(nr_atendimento::text, '') = '';
end if;	
exception
	when others then
	ds_param_integ_hl7_w := null;
end;


if (ie_desvinc_cir_prescr_w = 'S') and (ie_status_agenda_anter_w = 'C') then
	
	update agenda_paciente
	set    nr_cirurgia    = NULL
	where  nr_sequencia = nr_seq_origem_p;
	
	update 	prescr_medica
	set    	nr_seq_agenda  = NULL
	where  	nr_seq_agenda = nr_seq_origem_p
	and	coalesce(ie_tipo_prescr_cirur::text, '') = '';
	
	update	cirurgia
	set	nr_seq_agenda  = NULL
	where  	nr_seq_agenda = nr_seq_origem_p;
	
end if;



update	autorizacao_convenio a
set	a.dt_agenda = dt_agenda_w,
	a.cd_estabelecimento = cd_estabelecimento_ww,
	a.dt_entrada_prevista = PKG_DATE_UTILS.get_datetime(dt_agenda_w, coalesce(hr_inicio_w, PKG_DATE_UTILS.GET_TIME('00:00:00'))),
	a.nm_usuario = nm_usuario_p,
	a.dt_atualizacao = clock_timestamp()
where	a.nr_seq_agenda = nr_seq_origem_p;


select 	max(b.cd_setor_exclusivo)
into STRICT	cd_setor_exclusivo_atual_w
from	agenda b,
		agenda_paciente a
where 	a.cd_agenda = b.cd_agenda
and		a.cd_agenda = cd_agenda_w;


if (coalesce(cd_setor_exclusivo_atual_w,0) <> coalesce(cd_setor_exclusivo_anter_w,0)) then
	open c02;
	loop
	fetch c02 into
		cd_setor_equipamento_w,
		cd_equipamento_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		if (cd_setor_equipamento_w IS NOT NULL AND cd_setor_equipamento_w::text <> '') and (coalesce(cd_setor_equipamento_w,0) <> coalesce(cd_setor_exclusivo_atual_w,0)) then
			update	agenda_pac_equip
			set	ie_origem_inf 	= 'E',
				nm_usuario 	= nm_usuario_p,
				dt_atualizacao 	= clock_timestamp()
			where	nr_seq_agenda	= nr_seq_origem_p
			and	cd_equipamento 	= cd_equipamento_w;
		end if;
		end;
	end loop;
	close c02;	
end if;

select 	max(obter_local_estoque_setor(b.cd_setor_exclusivo, cd_estabelecimento_w))
into STRICT	cd_local_estoque_atual_w
from	agenda b
where 	b.cd_agenda = cd_agenda_w;

if (coalesce(cd_local_estoque_atual_w,0) <> coalesce(cd_local_estoque_anter_w,0)) and (VarExcluirPrescTranf = 'S') then
	CALL Excl_Item_prescr_transf_agen(nm_usuario_p, nr_seq_origem_p);
end if;


if (coalesce(cd_local_estoque_atual_w,0) <> coalesce(cd_local_estoque_anter_w,0)) and (VarGerarReqTransf = 'S') then
	select	max(nr_prescricao)
	into STRICT	nr_prescricao_w
	from 	cirurgia
	where 	nr_cirurgia = nr_cirurgia_w;
	if (coalesce(nr_prescricao_w::text, '') = '') then
		select	coalesce(max(nr_prescricao),0)
		into STRICT	nr_prescricao_w
		from	prescr_medica
		where	nr_seq_agenda	=	nr_seq_origem_p
		and	coalesce(ie_tipo_prescr_cirur::text, '') = '';
	end if;
	if (nr_prescricao_w > 0) then
		CALL gerar_requisicao_mat_barras(nr_prescricao_w,nm_usuario_p, cd_estabelecimento_w,cd_local_estoque_anter_w,cd_local_estoque_atual_w);
	end if;	
end if;

if (ie_limpa_dt_preparo_w = 'S') then
	update	agenda_paciente
	set	dt_chegada_prev		 = NULL
	where	nr_sequencia		= nr_seq_origem_p;
end if;

update	cirurgia
set	dt_inicio_prevista	= hr_inicio_w,
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp()
where	nr_cirurgia		= nr_cirurgia_w
and	ie_status_cirurgia	= 1;

if (ie_transferir_bs_w = 'S') then
	update	san_reserva
	set	dt_cirurgia	=	dt_agenda_w
	where	nr_seq_agenda	=	nr_seq_origem_p;
end if;

CALL Gravar_Log_Processo(5550, clock_timestamp(), nm_usuario_p, expressao14_w || ' ' || dt_agenda_w || ' '||expressao15_w||': ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(hr_inicio_w, 'shortTime', establishment_timezone_utils.gettimezone) ||
						' '||expressao16_w||': ' || cd_agenda_w || ' '||expressao5_w||' ' || nm_usuario_p || ' '||expressao17_w||': ' || nr_seq_destino_p);


atrib_oldvalue_w := substr(obter_nome_agenda(cd_agenda_orig_w),1,50);
atrib_newvalue_w := substr(obter_nome_agenda(cd_agenda_w),1,50);

if (nr_seq_motivo_p IS NOT NULL AND nr_seq_motivo_p::text <> '') then
	select	max(ds_motivo)
	into STRICT	ds_motivo_w
	from    agenda_motivo a
	where   nr_sequencia = nr_seq_motivo_p;
	ds_motivo_tranf_w :=  substr(' '||expressao18_w||' = ' || ds_motivo_w ||' - '|| ds_motivo_p,1,255);
end if;

ds_mensagem_w := 	substr(expressao19_w || ' ' || ds_observacao_origem_w || ' - '||expressao20_w||' : ' || substr(obter_descricao_procedimento(cd_procedimento_w, ie_origem_proced_w),1,200) ||
			' '||expressao21_w||': ' || atrib_oldvalue_w || ' '||expressao22_w||' ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(hr_inicio_orig_w,'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.gettimezone) ||
			' '||expressao23_w||' ' || atrib_newvalue_w || ' '||expressao22_w||' ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(hr_inicio_w,'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.gettimezone) || ds_motivo_tranf_w,1,2000);
			

CALL gerar_agenda_paciente_hist(	cd_agenda_w,
				nr_seq_origem_p,
				'T',
				nm_usuario_p,
				ds_mensagem_w,
				cd_pessoa_fisica_w,
				nm_paciente_w,
				hr_inicio_w,
				obter_perfil_ativo,
				null,
				null,
				dt_agendamento_w);

CALL transferir_itens_agenda(nr_seq_destino_p,nr_seq_origem_p,nm_usuario_p);

envio_auto_int_opme_w := obter_envio_auto_int_opme(cd_estabelecimento_w, nr_seq_origem_p, 'AA');

if (ie_opme_integracao_w = 'S') and (envio_auto_int_opme_w = 'S' or envio_auto_int_opme_w = 'P') then
	CALL ajusta_status_agenda_int_opme(nr_seq_origem_p, 8, null, nm_usuario_p);
end if;

if (ie_estagio_autor_transf_w IS NOT NULL AND ie_estagio_autor_transf_w::text <> '') then
	begin
	update	autorizacao_cirurgia
	set	ie_estagio_autor	= ie_estagio_autor_transf_w,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		nm_usuario_lib		= CASE WHEN ie_estagio_autor_transf_w='4' THEN null  ELSE nm_usuario_lib END ,
		dt_liberacao		= CASE WHEN ie_estagio_autor_transf_w='4' THEN null  ELSE dt_liberacao END
	where	nr_seq_agenda		= nr_seq_origem_p;
	end;
end if;

if (coalesce(ie_atualiza_se_data_vig_w,'N') = 'S')then

	select	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(max(dt_fim_vigencia),clock_timestamp())),
		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(max(dt_entrada_prevista),clock_timestamp()))
	into STRICT	dt_fim_vigencia_autor_w,
		dt_entrada_prevista_w
	from	autorizacao_convenio
	where	nr_seq_agenda = nr_seq_origem_p;
	
	if (dt_agenda_consiste_w > dt_fim_vigencia_autor_w)and (dt_agenda_origem_w <> dt_agenda_consiste_w)and (dt_fim_vigencia_autor_w IS NOT NULL AND dt_fim_vigencia_autor_w::text <> '') then
		
		select 	min(x.nr_sequencia)
		into STRICT	nr_seq_estagio_necessidade_w
		from	estagio_autorizacao x
		where	x.ie_interno = '1'
		and	coalesce(x.ie_situacao,'A') = 'A'
		and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = x.cd_empresa;
		
		select	max(ds_estagio)
		into STRICT	ds_estagio_w
		from	estagio_autorizacao
		where	nr_sequencia = nr_seq_estagio_necessidade_w
		and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
		
		open c01;
		loop
		fetch c01 into
			nr_sequencia_autor_w,
			ie_interno_w,
			nr_seq_estagio_autor_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			CALL atualizar_autorizacao_convenio(nr_sequencia_autor_w,nm_usuario_p,nr_seq_estagio_necessidade_w,'N','N','S');
			
			if (ds_estagio_w IS NOT NULL AND ds_estagio_w::text <> '') and (nr_seq_estagio_autor_w <> nr_seq_estagio_necessidade_w)then
				
				insert into autorizacao_convenio_hist(nr_sequencia,
					 dt_atualizacao,
					 nm_usuario,
					 nr_atendimento,
					 nr_seq_autorizacao,
					 ds_historico,
					 nr_sequencia_autor)
				values (nextval('autorizacao_convenio_hist_seq'),
					 clock_timestamp(),
					 nm_usuario_p,
					 null,
					 null,
					 expressao24_w || ' ' || ds_estagio_w || '. ' || expressao25_w || chr(13) || chr(10) ||
					' ' || expressao26_w,

					 nr_sequencia_autor_w);
			end if;
			
			end;
		end loop;
		close c01;
		nr_seq_estagio_necessidade_w := null;
	end if;
end if;

if (coalesce(ie_cancelar_autor_conv_w,'N') = 'S') or (coalesce(ie_cancelar_autor_conv_w,'N') = 'V')then

	if (coalesce(nr_seq_est_autor_transf_w,0) > 0) then
		nr_seq_estagio_necessidade_w := nr_seq_est_autor_transf_w;
	else
		begin
		select	max(nr_sequencia)
		into STRICT	nr_seq_estagio_necessidade_w
		from	estagio_autorizacao
		where	ie_interno		= '70'
		and	ie_situacao	= 'A'
		and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
		end;
	end if;
	
	if (coalesce(nr_seq_estagio_necessidade_w,0) > 0) then
		open c01;
		loop
		fetch c01 into
			nr_sequencia_autor_w,
			ie_interno_w,
			nr_seq_estagio_autor_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			CALL atualizar_autorizacao_convenio(nr_sequencia_autor_w,nm_usuario_p,nr_seq_estagio_necessidade_w,'N','N','S');
			end;
		end loop;
		close c01;
	end if;
	if (coalesce(ie_cancelar_autor_conv_w,'N') = 'V') then
			
		begin
		select	max(dt_fim_vigencia)
		into STRICT	dt_fim_vigencia_autor_w
		from	autorizacao_convenio
		where	nr_seq_agenda = nr_seq_origem_p;
		exception
		when others then
			dt_fim_vigencia_autor_w := null;
		end;
		
		if (dt_fim_vigencia_autor_w IS NOT NULL AND dt_fim_vigencia_autor_w::text <> '') and (coalesce(dt_agenda_consiste_w,clock_timestamp()) > coalesce(dt_fim_vigencia_autor_w,clock_timestamp()))then

			CALL gerar_autor_regra(null, null, null, null, null,	null, 'AP', nm_usuario_p, nr_seq_origem_p, nr_seq_proc_interno_w, null, null, null, null,'','','');
		end if;

	end if;
end if;

delete	from agenda_paciente
where	nr_sequencia	= nr_seq_destino_p;

if (ie_modo_reserva_w = '1') and (cd_estabelecimento_w <> cd_estabelecimento_ww) then
	ds_nome_abrev_ww := upper(obter_abrev_estabelecimento(cd_estabelecimento_ww));
	ds_nome_abrev_w	 := upper(obter_abrev_estabelecimento(cd_estabelecimento_w));

	update	agenda_paciente
	set	nr_reserva 	= substr(replace(nr_reserva,ds_nome_abrev_w,ds_nome_abrev_ww),1,20)
	where	nr_sequencia 	= nr_seq_origem_p
	and	(nr_reserva IS NOT NULL AND nr_reserva::text <> '');
end if;

if (ie_excluir_equip_w = 'S') and (cd_estabelecimento_w <> cd_estabelecimento_ww) then
	update	agenda_pac_equip
	set	ie_origem_inf 	= 'E',
		nm_usuario 	= nm_usuario_p,
		dt_atualizacao 	= clock_timestamp()
	where	nr_seq_agenda	= nr_seq_origem_p;
end if;

if (ie_excluir_cme_w = 'S') and (cd_estabelecimento_w <> cd_estabelecimento_ww) then
	update	agenda_pac_cme
	set	ie_origem_inf 	= 'E',
		nm_usuario 	= nm_usuario_p,
		dt_atualizacao 	= clock_timestamp()
	where	nr_seq_agenda	= nr_seq_origem_p;
end if;

if (nr_seq_destino_p IS NOT NULL AND nr_seq_destino_p::text <> '') then
	CALL executar_evento_agenda('TAM', 'CI', nr_seq_origem_p, cd_estabelecimento_w, nm_usuario_p);
end if;

commit;

if (ie_GeraRegraCalcInter_w = 'S') then
	CALL calcula_data_hora_chegada(nr_seq_origem_p);
end if;

if (ie_status_agenda_anter_w = 'C') and (ie_gera_autor_transf_canc_w = 'S') then
	SELECT	COUNT(*)
	INTO STRICT	qt_autor_canc_w
	FROM	estagio_autorizacao b,
		autorizacao_convenio a
	WHERE	a.nr_seq_agenda		= nr_seq_origem_p
	AND	a.nr_seq_estagio	= b.nr_sequencia
	AND	b.ie_interno		= 70;
	if (qt_autor_canc_w > 0) then
		CALL gerar_autor_regra(null, null, null, null, null,	null, 'AP', nm_usuario_p, nr_seq_origem_p, nr_seq_proc_interno_w, null, null, null, null,'','','');
	end if;	
end if;	

if (ie_excluir_requisicao_w = 'S') then
	delete	from cm_requisicao
	where	nr_seq_agenda = nr_seq_origem_p
	and		coalesce(dt_baixa::text, '') = '';
	
	update	cm_requisicao
	set		nr_atendimento	 = NULL,
			nr_cirurgia		 = NULL,
			nr_seq_agenda	 = NULL
	where	nr_seq_agenda 	= nr_seq_origem_p
	and		(dt_baixa IS NOT NULL AND dt_baixa::text <> '');
end if;

if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
	ds_sep_bv_w := obter_separador_bv;
	
	select	max(cd_setor_atendimento)
	into STRICT	cd_setor_atendimento_w
	from	cirurgia
	where	nr_cirurgia = nr_cirurgia_w;
	
	ds_param_integ_hl7_w := 'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w ||
							'nr_sequencia=' || nr_seq_origem_p || ds_sep_bv_w;
	CALL gravar_agend_integracao(464, ds_param_integ_hl7_w, cd_setor_atendimento_w);
end if;

begin
   select   BIFROST.SEND_INTEGRATION( 'SurgeryRescheduling',
                                      'com.philips.tasy.integration.atepac.surgery.scheduling.SurgerySchedulingRequest',
                                      '{"nrSequencia" : '||nr_seq_origem_p||'}',
                                      wheb_usuario_pck.get_nm_usuario)
   into STRICT     ds_retorno_integracao_w
;
exception
when others then
   ds_retorno_integracao_w := null;
end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE transferir_agenda_pac (nr_seq_origem_p bigint, nr_seq_destino_p bigint, nm_usuario_p text, nr_seq_motivo_p bigint, ds_motivo_p text, nr_seq_motivo_prazo_p bigint, ds_motivo_prazo_p text) FROM PUBLIC;

