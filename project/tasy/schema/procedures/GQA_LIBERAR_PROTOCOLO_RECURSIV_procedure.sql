-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gqa_liberar_protocolo_recursiv ( nr_seq_prot_pac_p gqa_protocolo_etapa_pac.nr_seq_prot_pac%type, nr_seq_etapa_prot_sup_p gqa_protocolo_etapa_pac.nr_seq_etapa_prot_sup%type ) AS $body$
DECLARE


  dt_inicio_w    gqa_protocolo_etapa_pac.dt_prevista_inicio%type;
  dt_fim_w       gqa_protocolo_etapa_pac.dt_prevista_fim%type;

  etapa RECORD;

BEGIN

  if ((nr_seq_prot_pac_p IS NOT NULL AND nr_seq_prot_pac_p::text <> '') and coalesce(nr_seq_etapa_prot_sup_p::text, '') = '') then
    begin 
      for etapa in (
        SELECT nr_sequencia from gqa_protocolo_etapa_pac where nr_seq_prot_pac = nr_seq_prot_pac_p and coalesce(nr_seq_etapa_prot_sup::text, '') = ''
      ) loop
            update gqa_protocolo_etapa_pac set dt_prevista_inicio = clock_timestamp(), dt_prevista_fim = clock_timestamp()
                where nr_sequencia = etapa.nr_sequencia and coalesce(qt_tempo_previsto::text, '') = '';
            update gqa_protocolo_etapa_pac set dt_prevista_inicio = clock_timestamp(), dt_prevista_fim = clock_timestamp() + (qt_tempo_previsto / (24 * 60))
                where nr_sequencia = etapa.nr_sequencia and (qt_tempo_previsto IS NOT NULL AND qt_tempo_previsto::text <> '');

            CALL gqa_liberar_protocolo_recursiv(nr_seq_prot_pac_p, etapa.nr_sequencia);

      end loop;
    end;
  elsif (nr_seq_prot_pac_p IS NOT NULL AND nr_seq_prot_pac_p::text <> '' AND nr_seq_etapa_prot_sup_p IS NOT NULL AND nr_seq_etapa_prot_sup_p::text <> '') then
    begin
      for etapa in (
        select nr_sequencia, nr_seq_etapa_prot_sup from gqa_protocolo_etapa_pac where nr_seq_prot_pac = nr_seq_prot_pac_p and nr_seq_etapa_prot_sup = nr_seq_etapa_prot_sup_p
      ) loop
            select dt_prevista_inicio, dt_prevista_fim into STRICT dt_inicio_w, dt_fim_w from gqa_protocolo_etapa_pac where nr_sequencia = etapa.nr_seq_etapa_prot_sup;

            update gqa_protocolo_etapa_pac set dt_prevista_inicio = dt_fim_w, dt_prevista_fim = dt_fim_w
                where nr_sequencia = etapa.nr_sequencia and coalesce(qt_tempo_previsto::text, '') = '';
            update gqa_protocolo_etapa_pac set dt_prevista_inicio = dt_fim_w, dt_prevista_fim = dt_fim_w + (qt_tempo_previsto / (24 * 60))
                where nr_sequencia = etapa.nr_sequencia and (qt_tempo_previsto IS NOT NULL AND qt_tempo_previsto::text <> '');

            CALL gqa_liberar_protocolo_recursiv(nr_seq_prot_pac_p, etapa.nr_sequencia);

      end loop;
    end;
  end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gqa_liberar_protocolo_recursiv ( nr_seq_prot_pac_p gqa_protocolo_etapa_pac.nr_seq_prot_pac%type, nr_seq_etapa_prot_sup_p gqa_protocolo_etapa_pac.nr_seq_etapa_prot_sup%type ) FROM PUBLIC;

