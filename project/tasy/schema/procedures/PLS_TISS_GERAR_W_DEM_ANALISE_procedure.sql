-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE rc_item AS (nr_seq_apre_w			bigint, 
				dt_proce_w			pls_conta_proc.dt_procedimento%type, 
				dt_entrada_w			pls_conta.dt_entrada%type, 
				dt_alta_w			pls_conta.dt_alta%type, 
				cd_edicao_amb_w			varchar(10), 
				cd_item_w			bigint, 
				ds_item_w			varchar(255), 
				qt_proc_w			double precision, 
				ie_via_aces_w			varchar(10), 
				ie_tecn_util_w			varchar(40), 
				vl_red_acresc_w			double precision, 
				vl_unit_w			pls_conta_proc.vl_unitario%type, 
				vl_proc_w			double precision, 
				nr_seq_conta_w			pls_conta_proc.nr_seq_conta%type, 
				nr_seq_prot_conta_w		pls_protocolo_conta.nr_sequencia%type);


CREATE OR REPLACE PROCEDURE pls_tiss_gerar_w_dem_analise ( nr_seq_lote_p pls_lote_pagamento.nr_sequencia%type, nr_seq_prestador_p pls_conta.nr_seq_prestador_exec%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


type 	tb_item is table of rc_item index by integer;

tb_item_w		tb_item;
dt_entrada_w		pls_conta.dt_entrada%type;
dt_alta_w		pls_conta.dt_alta%type;
cd_edicao_amb_w		varchar(10);
cd_item_w		bigint;
ds_item_w		varchar(255);
qt_procedimento_w	double precision;
ie_via_acesso_w		varchar(10);
ie_tecnica_utilizada_w	varchar(40);
vl_reducao_acrescimo_w	double precision;
vl_unitario_w		pls_conta_proc.vl_unitario%type;
vl_procedimento_w	pls_conta_proc.vl_procedimento%type;
nr_seq_apresentacao_w	bigint;
nr_proc_w		bigint;
nr_med_w		bigint;
nr_seq_prot_conta_w	pls_protocolo_conta.nr_sequencia%type;
nr_seq_conta_proc_w	pls_conta_proc.nr_sequencia%type;
nr_seq_conta_w		pls_conta.nr_sequencia%type;
nr_seq_tiss_guia_w	w_tiss_guia.nr_sequencia%type := null;
cd_guia_prestador_w	pls_conta.nr_seq_prestador_exec%type;
dt_procedimento_w	pls_conta_proc.dt_procedimento%type;
nr_seq_prot_anterior_w	pls_protocolo_conta.nr_sequencia%type;	
qt_pag_guia_w		bigint := 1;
qt_list_med_w		bigint := 0;
sg_conselho_imp_w	varchar(2);
x			pls_conta.nr_sequencia%type;

c01 CURSOR FOR 	--Procedimentos 
	SELECT	a.dt_procedimento, 
		a.dt_inicio_proc, 
		a.dt_fim_proc, 
		substr(a.cd_tipo_tabela_imp ,1,2), 
		substr(a.cd_procedimento,1,10), 
		substr(obter_descricao_procedimento(a.cd_procedimento,a.ie_origem_proced),1,150), 
		a.qt_procedimento, 
		a.ie_via_acesso, 
		a.ie_tecnica_utilizada, 
		a.vl_glosa, 
		a.vl_liberado, 
		a.vl_total_procedimento, 
		a.nr_sequencia, 
		a.nr_seq_conta, 
		a.nr_seq_protocolo 
	from	pls_conta_proc_v 	a 
	where	a.nr_seq_conta in (	SELECT	nr_seq_conta 
					from	pls_conta_medica_resumo 
					where	nr_seq_lote_pgto	= nr_seq_lote_p 
					and	nr_seq_prestador_exec	= nr_seq_prestador_p 
					group	by nr_seq_conta) 
	
union all
 
	select	a.dt_atendimento, 
		a.dt_inicio_atend, 
		a.dt_fim_atend, 
		substr(a.cd_tipo_tabela_imp ,1,2), 
		substr(a.nr_seq_material,1,10), 
		substr(ds_material,1,150), 
		a.qt_material, 
		null, 
		null, 
		a.vl_glosa, 
		a.vl_liberado, 
		vl_material, 
		a.nr_sequencia, 
		a.nr_seq_conta, 
		a.nr_seq_protocolo 
	from	pls_conta_mat_v 	a 
	where	a.nr_seq_conta in (	select	nr_seq_conta 
					from	pls_conta_medica_resumo 
					where	nr_seq_lote_pgto	= nr_seq_lote_p 
					and	nr_seq_prestador_exec	= nr_seq_prestador_p 
					group	by nr_seq_conta) 
	order by nr_seq_protocolo, nr_seq_conta, nr_sequencia;

BEGIN 
 
delete	from w_tiss_proc_paciente 
where	nm_usuario		= nm_usuario_p;
 
delete from w_tiss_guia 
where	nm_usuario		= nm_usuario_p;
 
commit;
 
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then 
 
	nr_seq_apresentacao_w := 1;
	nr_proc_w := 1;
	nr_med_w := 1;
	open c01;
	loop 
	fetch c01 into	--Procedimentos 
			dt_procedimento_w, 
			dt_entrada_w, 
			dt_alta_w, 
			cd_edicao_amb_w, 
			cd_item_w, 
			ds_item_w, 
			qt_procedimento_w, 
			ie_via_acesso_w, 
			ie_tecnica_utilizada_w, 
			vl_reducao_acrescimo_w, 
			vl_unitario_w, 
			vl_procedimento_w, 
			nr_seq_conta_proc_w, 
			nr_seq_conta_w, 
			nr_seq_prot_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */		
		begin	 
			tb_item_w[nr_proc_w].nr_seq_apre_w	:= nr_seq_apresentacao_w;
			tb_item_w[nr_proc_w].dt_proce_w		:= dt_procedimento_w;
			tb_item_w[nr_proc_w].dt_entrada_w	:= dt_entrada_w;
			tb_item_w[nr_proc_w].dt_alta_w		:= dt_alta_w;
			tb_item_w[nr_proc_w].cd_edicao_amb_w	:= cd_edicao_amb_w;
			tb_item_w[nr_proc_w].cd_item_w		:= cd_item_w;
			tb_item_w[nr_proc_w].ds_item_w		:= ds_item_w;
			tb_item_w[nr_proc_w].qt_proc_w		:= qt_procedimento_w;
			tb_item_w[nr_proc_w].ie_via_aces_w	:= ie_via_acesso_w;
			tb_item_w[nr_proc_w].ie_tecn_util_w	:= ie_tecnica_utilizada_w;
			tb_item_w[nr_proc_w].vl_red_acresc_w	:= vl_reducao_acrescimo_w;
			tb_item_w[nr_proc_w].vl_unit_w		:= vl_unitario_w;
			tb_item_w[nr_proc_w].vl_proc_w		:= vl_procedimento_w;
			tb_item_w[nr_proc_w].nr_seq_conta_w	:= nr_seq_conta_w;
			tb_item_w[nr_proc_w].nr_seq_prot_conta_w := nr_seq_prot_conta_w;
			nr_proc_w := nr_proc_w + 1;
		end;
	end loop;
	close c01;
		 
	nr_proc_w := 1;
	nr_seq_prot_anterior_w := -1;
	for i in 1..tb_item_w.count loop 
		begin		 
		 
			if (tb_item_w[i].nr_seq_conta_w <> nr_seq_prot_anterior_w) then 
				qt_pag_guia_w := 1;
				nr_seq_prot_anterior_w	:= tb_item_w[i].nr_seq_conta_w;
				nr_seq_apresentacao_w	:= 1;
			end if;
			 
			if ( qt_pag_guia_w = 1) then 
				qt_list_med_w := qt_list_med_w+1;
				 
				select	nextval('w_tiss_guia_seq') 
				into STRICT	nr_seq_tiss_guia_w 
				;
										 
				insert into w_tiss_guia(nr_sequencia, dt_atualizacao, nm_usuario, 
							nr_seq_conta_guia, nr_seq_protocolo, nr_guia_prestador) 
						values (nr_seq_tiss_guia_w, clock_timestamp(), nm_usuario_p, 
							tb_item_w[i].nr_seq_conta_w, tb_item_w[i].nr_seq_prot_conta_w, 
							nr_seq_prestador_p);	
				 
				nr_proc_w	:= nr_proc_w + 1;
			end if;
						 
			if (nr_seq_apresentacao_w > 17) then 
				nr_seq_apresentacao_w  := 1;
			end if;
			 
			insert into w_tiss_proc_paciente(nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				nr_seq_apresentacao, 
				dt_procedimento, 
				dt_entrada, 
				dt_alta, 
				cd_edicao_amb, 
				cd_procedimento, 
				ds_procedimento, 
				qt_procedimento, 
				ie_via_acesso, 
				ie_tecnica_utilizada, 
				vl_reducao_acrescimo, 
				vl_unitario, 
				vl_procedimento, 
				nr_seq_conta, 
				nr_seq_guia) 
			values (nextval('w_tiss_proc_paciente_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_apresentacao_w, 
				tb_item_w[i].dt_proce_w, 
				tb_item_w[i].dt_entrada_w, 
				tb_item_w[i].dt_alta_w, 
				tb_item_w[i].cd_edicao_amb_w, 
				tb_item_w[i].cd_item_w, 
				tb_item_w[i].ds_item_w, 
				tb_item_w[i].qt_proc_w, 
				tb_item_w[i].ie_via_aces_w, 
				tb_item_w[i].ie_tecn_util_w, 
				tb_item_w[i].vl_red_acresc_w, 
				tb_item_w[i].vl_unit_w, 
				tb_item_w[i].vl_proc_w, 
				nr_seq_tiss_guia_w, 
				1);
								 
			nr_seq_apresentacao_w  := nr_seq_apresentacao_w + 1;			
			if (qt_pag_guia_w = 17) then 
				qt_pag_guia_w := 1;	
			else 
				qt_pag_guia_w := qt_pag_guia_w+1;
			end if;
		end;
	end loop;	
	 
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_tiss_gerar_w_dem_analise ( nr_seq_lote_p pls_lote_pagamento.nr_sequencia%type, nr_seq_prestador_p pls_conta.nr_seq_prestador_exec%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

