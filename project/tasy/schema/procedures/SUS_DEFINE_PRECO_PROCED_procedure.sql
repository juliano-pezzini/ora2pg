-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_define_preco_proced ( dt_procedimento_p timestamp, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_estabelecimento_p bigint, ie_tipo_atendimento_p bigint, vl_sa_p INOUT bigint, vl_sh_p INOUT bigint, vl_sp_p INOUT bigint, vl_sadt_p INOUT bigint, vl_total_hospitalar_p INOUT bigint, vl_total_amb_p INOUT bigint, qt_pontos_ato_p INOUT bigint, vl_honorario_medico_p INOUT bigint, vl_matmed_p INOUT bigint, vl_anestesista_p INOUT bigint, dt_competencia_p INOUT timestamp) AS $body$
DECLARE



vl_sa_w				double precision	:= 0;
vl_sh_w				double precision	:= 0;
vl_sp_w				double precision	:= 0;
vl_sadt_w			double precision	:= 0;
vl_total_hospitalar_w		double precision	:= 0;
vl_total_amb_w			double precision	:= 0;
qt_pontos_ato_w			integer		:= 0;
vl_honorario_medico_w		double precision	:= 0;
vl_matmed_w			double precision	:= 0;
vl_anestesista_w			double precision	:= 0;
dt_competencia_sus_w		timestamp;
dt_competencia_proc_w		timestamp;
ie_tipo_financiamento_w		varchar(4);
qt_registros_w			integer		:= 0;
dt_competencia_aih_w		timestamp;
dt_comp_apac_bpa_w		timestamp;
ie_data_proc_comp_preco_w		varchar(4) 	:= 'N';
cd_municipio_ibge_w		sus_preco_municipio.cd_municipio_ibge%type := 'X';


BEGIN

begin
select	coalesce(max(dt_competencia_sus), clock_timestamp()),
	coalesce(coalesce(max(dt_comp_apac_bpa), max(dt_competencia_sus)),clock_timestamp()),
	coalesce(max(ie_data_proc_comp_preco),'N')
into STRICT	dt_competencia_aih_w,
	dt_comp_apac_bpa_w,
	ie_data_proc_comp_preco_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_p;
exception
	when others then
	dt_competencia_aih_w		:= clock_timestamp();
	dt_comp_apac_bpa_w		:= clock_timestamp();
	ie_data_proc_comp_preco_w		:= 'N';
end;

if (ie_tipo_atendimento_p	<> 1) then
	begin
	dt_competencia_sus_w	:= dt_comp_apac_bpa_w;
	end;
else
	begin
	dt_competencia_sus_w	:= dt_competencia_aih_w;
	end;
end if;

ie_tipo_financiamento_w		:= obter_tipo_financ_proc(cd_procedimento_p, ie_origem_proced_p, 1);

begin
select	coalesce(obter_dados_pf_pj(null,cd_cgc,'CDM'),'X')
into STRICT	cd_municipio_ibge_w
from	estabelecimento
where	cd_estabelecimento = cd_estabelecimento_p;
exception
when others then
	cd_municipio_ibge_w := 'X';
end;

select	count(1)
into STRICT	qt_registros_w
from	sus_preco_municipio
where	cd_procedimento		= cd_procedimento_p
and	ie_origem_proced	= ie_origem_proced_p
and	coalesce(cd_municipio_ibge,cd_municipio_ibge_w) 	= cd_municipio_ibge_w
and	coalesce(cd_estabelecimento,cd_estabelecimento_p)	= cd_estabelecimento_p  LIMIT 1;

if (qt_registros_w	> 0) then
	begin
	SELECT * FROM sus_define_preco_proced_pab(dt_competencia_sus_w, cd_procedimento_p, ie_origem_proced_p, cd_estabelecimento_p, vl_total_amb_w, vl_sh_w, vl_sp_w, vl_total_hospitalar_w) INTO STRICT vl_total_amb_w, vl_sh_w, vl_sp_w, vl_total_hospitalar_w;

	vl_honorario_medico_w	:= vl_sp_w;
	vl_matmed_w		:= vl_sh_w;
	end;
elsif (ie_data_proc_comp_preco_w = 'S') then
	begin

	select	max(pkg_date_utils.get_time(dt_competencia,0,0,0))
	into STRICT	dt_competencia_proc_w
	from 	sus_preco
	where	dt_competencia 		<= dt_procedimento_p
	and	cd_procedimento 	= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p
	and	((ie_aih = 'S' AND ie_tipo_atendimento_p = 1) or
		(ie_apac = 'S' AND ie_tipo_atendimento_p <> 1) or
		(ie_bpa = 'S' AND ie_tipo_atendimento_p <> 1));

	begin
	select	coalesce(vl_sa,0),
		coalesce(vl_sh,0),
		coalesce(vl_sp,0),
		coalesce(vl_sadt,0),
		coalesce(vl_total_hospitalar,0),
		coalesce(vl_total_amb,0),
		coalesce(qt_pontos_ato,0),
		coalesce(vl_honorario_medico,0),
		coalesce(vl_matmed,0),
		coalesce(vl_anestesia,0)
	into STRICT	vl_sa_w,
		vl_sh_w,
		vl_sp_w,
		vl_sadt_w,
		vl_total_hospitalar_w,
		vl_total_amb_w,
		qt_pontos_ato_w,
		vl_honorario_medico_w,
		vl_matmed_w,
		vl_anestesista_w
	from	sus_preco
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced		= ie_origem_proced_p
	and	((ie_aih = 'S' AND ie_tipo_atendimento_p = 1) or
		(ie_apac = 'S' AND ie_tipo_atendimento_p <> 1) or
		(ie_bpa = 'S' AND ie_tipo_atendimento_p <> 1))
	and	pkg_date_utils.get_time(dt_competencia,0,0,0)	= dt_competencia_proc_w;
	exception
		when others then
	        vl_total_hospitalar_w	:= 0;
	end;

	end;
else
	begin
	select	coalesce(vl_sa,0),
		coalesce(vl_sh,0),
		coalesce(vl_sp,0),
		coalesce(vl_sadt,0),
		coalesce(vl_total_hospitalar,0),
		coalesce(vl_total_amb,0),
		coalesce(qt_pontos_ato,0),
		coalesce(vl_honorario_medico,0),
		coalesce(vl_matmed,0),
		coalesce(vl_anestesia,0)
	into STRICT	vl_sa_w,
		vl_sh_w,
		vl_sp_w,
		vl_sadt_w,
		vl_total_hospitalar_w,
		vl_total_amb_w,
		qt_pontos_ato_w,
		vl_honorario_medico_w,
		vl_matmed_w,
		vl_anestesista_w
	from	sus_preco
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced		= ie_origem_proced_p
	and	pkg_date_utils.get_time(dt_competencia,0,0,0)	=  dt_competencia_sus_w;
	exception
	when others then
		 vl_total_hospitalar_w	:= 0;
	end;
end if;

vl_sa_p			:= vl_sa_w;
vl_sh_p			:= vl_sh_w;
vl_sp_p			:= vl_sp_w;
vl_sadt_p			:= vl_sadt_w;
vl_total_hospitalar_p	:= vl_total_hospitalar_w;
vl_total_amb_p		:= vl_total_amb_w;
qt_pontos_ato_p		:= qt_pontos_ato_w;
vl_honorario_medico_p	:= vl_honorario_medico_w;
vl_matmed_p		:= vl_matmed_w;
dt_competencia_p		:= dt_competencia_sus_w;
vl_anestesista_p		:= vl_anestesista_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_define_preco_proced ( dt_procedimento_p timestamp, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_estabelecimento_p bigint, ie_tipo_atendimento_p bigint, vl_sa_p INOUT bigint, vl_sh_p INOUT bigint, vl_sp_p INOUT bigint, vl_sadt_p INOUT bigint, vl_total_hospitalar_p INOUT bigint, vl_total_amb_p INOUT bigint, qt_pontos_ato_p INOUT bigint, vl_honorario_medico_p INOUT bigint, vl_matmed_p INOUT bigint, vl_anestesista_p INOUT bigint, dt_competencia_p INOUT timestamp) FROM PUBLIC;

