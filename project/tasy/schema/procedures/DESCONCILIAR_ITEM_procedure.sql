-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE desconciliar_item (nr_sequencia_p bigint, ie_tipo_concil_p text, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_conciliacao_w	bigint;
ie_compensar_cheque_concil_w	varchar(1)	:= 'N';
cd_estabelecimento_w		smallint;
ie_gerar_movto_cheque_w		varchar(1);
nr_seq_cheque_w			bigint;
dt_movimento_w			timestamp;

c02 CURSOR FOR 
SELECT	a.nr_sequencia 
from	cheque a 
where	(a.dt_compensacao IS NOT NULL AND a.dt_compensacao::text <> '') 
and	exists (SELECT	1 
	from	movto_trans_financ x 
	where	x.nr_seq_cheque_cp	= a.nr_sequencia 
	and	x.nr_sequencia		= nr_sequencia_p 
	and	coalesce(x.nr_seq_concil::text, '') = '') 

union
 
select	a.nr_sequencia 
from	cheque a 
where	(a.dt_compensacao IS NOT NULL AND a.dt_compensacao::text <> '') 
and	exists (select	1 
	from	movto_trans_financ x 
	where	x.nr_documento	= a.nr_cheque 
	and	x.nr_sequencia	= nr_sequencia_p 
	and	(x.nr_seq_concil IS NOT NULL AND x.nr_seq_concil::text <> '') 
	and	coalesce(x.nr_seq_cheque::text, '') = '' 
	and	(x.nr_bordero IS NOT NULL AND x.nr_bordero::text <> '') 
	and	exists (select	1 
		from	cheque_bordero_titulo y 
		where	y.nr_bordero	= x.nr_bordero 
		and	y.nr_cheque	= a.nr_cheque));


BEGIN 
 
ie_gerar_movto_cheque_w := obter_param_usuario(814, 43, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_movto_cheque_w);
 
if (ie_tipo_concil_p = 'M') then 
 
	select	max(a.nr_seq_conciliacao), 
		coalesce(max(c.dt_movimento),max(b.dt_transacao)) 
	into STRICT	nr_seq_conciliacao_w, 
		dt_movimento_w 
	FROM movto_trans_financ b, concil_banc_movto a
LEFT OUTER JOIN banco_extrato_lanc c ON (a.nr_sequencia = c.nr_seq_concil)
WHERE a.nr_sequencia	= b.nr_seq_concil and b.nr_sequencia	= nr_sequencia_p;
 
	 
	select	max(b.cd_estabelecimento) 
	into STRICT	cd_estabelecimento_w 
	from	banco_estabelecimento b, 
		conciliacao_bancaria a 
	where	a.nr_seq_conta	= b.nr_sequencia 
	and	a.nr_sequencia	= nr_seq_conciliacao_w;
 
 
	select	coalesce(max(ie_compensar_cheque_concil),'N') 
	into STRICT	ie_compensar_cheque_concil_w 
	from	parametros_contas_pagar 
	where	cd_estabelecimento	= cd_estabelecimento_w;
 
	update	movto_trans_financ 
	set	nr_seq_concil	 = NULL, 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp(), 
		ie_conciliacao	= 'N' 
	where	nr_sequencia	= nr_sequencia_p;
 
	if (ie_compensar_cheque_concil_w = 'S') then 
 
		if (ie_gerar_movto_cheque_w = 'S') then 
 
				open c02;
				loop 
				fetch c02 into 
					nr_seq_cheque_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					compensar_cheque(nr_seq_cheque_w,coalesce(dt_movimento_w,clock_timestamp()),'E',nm_usuario_p,null);
				end loop;
				close c02;
 
		else 
 
			update	cheque a 
			set	dt_compensacao	 = NULL 
			where	(dt_compensacao IS NOT NULL AND dt_compensacao::text <> '') 
			and	exists (SELECT	1 
					from	movto_trans_financ x 
					where	x.nr_seq_cheque_cp	= a.nr_sequencia 
					and	x.nr_sequencia		= nr_sequencia_p 
					and	coalesce(x.nr_seq_concil::text, '') = '');
 
			/* Desfazer compensação cheque único do borderô */
 
			update	cheque a 
			set	dt_compensacao	= clock_timestamp() 
			where	(dt_compensacao IS NOT NULL AND dt_compensacao::text <> '') 
			and	exists (SELECT	1 
					from	movto_trans_financ x 
					where	x.nr_documento	= a.nr_cheque 
					and	x.nr_sequencia	= nr_sequencia_p 
					and	(x.nr_seq_concil IS NOT NULL AND x.nr_seq_concil::text <> '')	 
					and	coalesce(x.nr_seq_cheque::text, '') = '' 
					and	(x.nr_bordero IS NOT NULL AND x.nr_bordero::text <> '') 
					and	exists (select	1 
							from	cheque_bordero_titulo y 
							where	y.nr_bordero	= x.nr_bordero 
							and	y.nr_cheque	= a.nr_cheque));
 
		end if;	
	end if;
 
	insert	into CONCIL_BANC_PEND_TASY(NR_SEQUENCIA, 
		NR_SEQ_CONCILIACAO, 
		NR_SEQ_MOVTO_TRANS, 
		DT_ATUALIZACAO, 
		NM_USUARIO) 
	values (nextval('concil_banc_pend_tasy_seq'), 
		nr_seq_conciliacao_w, 
		nr_sequencia_p, 
		clock_timestamp(), 
		nm_usuario_p);
else 
 
	select	max(a.nr_seq_conciliacao) 
	into STRICT	nr_seq_conciliacao_w 
	from	concil_banc_movto a, 
		banco_extrato_lanc b 
	where	a.nr_sequencia	= b.nr_seq_concil 
	and	b.nr_sequencia	= nr_sequencia_p;
 
	update	banco_extrato_lanc 
	set	nr_seq_concil	 = NULL, 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp(), 
		ie_conciliacao	= 'N' 
	where	nr_sequencia	= nr_sequencia_p;
 
	insert	into CONCIL_BANC_PEND_BCO(NR_SEQUENCIA, 
		NR_SEQ_CONCILIACAO, 
		DT_ATUALIZACAO, 
		NM_USUARIO, 
		NR_SEQ_LANC_EXTRATO) 
	values (nextval('concil_banc_pend_bco_seq'), 
		NR_SEQ_CONCILIACAO_w, 
		clock_timestamp(), 
		nm_usuario_p, 
		nr_sequencia_p);
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE desconciliar_item (nr_sequencia_p bigint, ie_tipo_concil_p text, nm_usuario_p text) FROM PUBLIC;

