-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_gerar_laudo_lme ( cd_pessoa_fisica_p text, ie_gera_manual_p text, nm_usuario_p text) AS $body$
DECLARE



cd_pessoa_fisica_w		varchar(10);
nm_pessoa_fisica_w		varchar(80);
qt_medic_lme_w			integer;
nr_atendimento_w			bigint;
cd_material_w			bigint;
qt_dose_w			double precision;
cd_cid_principal_w			varchar(10);
cd_cid_secundario_w		varchar(10);
cd_unid_dialise_w			bigint;
cd_estabelecimento_w		smallint;
cd_estab_usuario_w		smallint;
ie_unidade_propria_w		varchar(1);
ie_tipo_laudo_apac_w		smallint;
nr_seq_exame_hemofilia_w		bigint;
nr_seq_exame_inibidor_w		bigint;
cd_tipo_evolucao_w		varchar(3);
nr_laudo_sus_w			smallint;
nr_seq_laudo_sus_w		bigint;
cd_medico_responsavel_w		varchar(10);
qt_peso_w			real;
qt_altura_w			real;
ie_classif_hemofilia_w		varchar(15);
ie_inibidor_w			varchar(15);
ds_complemento_w			varchar(255);
qt_medico_auditor_w		integer;
ds_classif_hemofilia_w		varchar(15);
ds_inibidor_w			varchar(15);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
qt_procedimento_w			integer;
ie_cid_princ_compativel_w		varchar(1);
ie_cid_secun_compativel_w		varchar(1);
ie_gera_laudo_w			varchar(1);
ds_inconsistencia_w		varchar(4000);
ds_enter_w			varchar(20)	:= chr(10)||chr(13);
--nr_ocorrencia_w			number(15,3);
nr_ocorrencia_w			double precision; --lhalves OS 792366 em 02/10/2014 - Alterado por questao de arredondamento
ie_via_aplicacao_w		varchar(5);
ie_cid_procedimento_w		varchar(15) := 'N';

/* Pacientes Renais Cronicos que estao em Hemodialise */

c01 CURSOR FOR
	SELECT	cd_pessoa_fisica,
		substr(obter_nome_pf(cd_pessoa_fisica),1,80)
	from	hd_pac_renal_cronico
	where	substr(hd_obter_se_paciente_ativo(cd_pessoa_fisica),1,1) = 'S'
	and (cd_pessoa_fisica	= cd_pessoa_fisica_p or coalesce(cd_pessoa_fisica_p::text, '') = '')
	order by cd_pessoa_fisica;

/* Medicamentos que necessitam de laudo LME */

c02 CURSOR FOR
	SELECT	cd_material,
		qt_dose,
		cd_cid_principal,
		cd_cid_secundario,
		obter_ocorrencia_intervalo(cd_intervalo, 24, 'O'),
		ie_via_aplicacao
	from	medic_uso_continuo
	where	cd_pessoa_fisica			= cd_pessoa_fisica_w
	and	ie_laudo_lme				= 'S'
	and	dt_inicio				<= clock_timestamp()
	and	obter_se_mostra_medic(nr_sequencia)	= 'S'
	and	coalesce(dt_suspensao::text, '') = ''
	order by cd_material;


BEGIN

begin
cd_estab_usuario_w := wheb_usuario_pck.get_cd_estabelecimento;
exception
when others then
	cd_estab_usuario_w := 0;	
end;
ie_cid_procedimento_w := obter_valor_param_usuario(1124,94,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w);

open c01;
	loop
	fetch c01 into
		cd_pessoa_fisica_w,
		nm_pessoa_fisica_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

	if (ie_gera_manual_p = 'S') then
		ds_inconsistencia_w	:= substr(wheb_mensagem_pck.get_texto(313068,'NM_USUARIO=' || nm_usuario_p) || ds_enter_w,1,4000);
	else
		ds_inconsistencia_w	:= '';
	end if;


	/* Verifica se o paciente possui medicamentos que necessitam de laudo */

	select	count(*)
	into STRICT	qt_medic_lme_w
	from	medic_uso_continuo
	where	cd_pessoa_fisica			= cd_pessoa_fisica_w
	and	ie_laudo_lme				= 'S'
	and	dt_inicio				<= clock_timestamp()
	and	obter_se_mostra_medic(nr_sequencia)	= 'S'
	and	coalesce(dt_suspensao::text, '') = '';

	/* Caso possua medicamentos que necessitam de laudo LME, verifica as outras inconsistencias */

	if (qt_medic_lme_w > 0) then

		/* Obter o unidade de hemodialise do paciente */

		select	campo_numerico(hd_obter_unidade_prc(cd_pessoa_fisica_w,'C'))
		into STRICT	cd_unid_dialise_w
		;

		if (cd_unid_dialise_w > 0) then

			/* Obter estabelecimento da unidade de hemodialise */

			select	cd_estabelecimento,
				ie_propria
			into STRICT	cd_estabelecimento_w,
				ie_unidade_propria_w
			from	hd_unidade_dialise
			where	nr_sequencia	= cd_unid_dialise_w;

			if (ie_unidade_propria_w = 'S') then
				if (cd_estabelecimento_w > 0) then

					/* Verifica se deve gerar o laudo para o paciente */

					select	obter_se_gera_laudo_lme(cd_pessoa_fisica_w, cd_estabelecimento_w)
					into STRICT	ie_gera_laudo_w
					;

					if (ie_gera_laudo_w = 'S') or (ie_gera_manual_p = 'S') then

						/* Obter parametros da hemodialise para geracao do laudo */

						begin
						select	ie_tipo_laudo_apac,
							nr_seq_exame_hemofilia,
							nr_seq_exame_inibidor,
							cd_tipo_evolucao
						into STRICT	ie_tipo_laudo_apac_w,
							nr_seq_exame_hemofilia_w,
							nr_seq_exame_inibidor_w,
							cd_tipo_evolucao_w
						from	hd_parametro
						where	cd_estabelecimento	= cd_estabelecimento_w;
						exception
							when others then
								ie_tipo_laudo_apac_w	:= 0;
						end;

						if (ie_tipo_laudo_apac_w > 0) then

							/* Verifica se o paciente tem atendimento gerado */

							select	coalesce(max(nr_atendimento),0)
							into STRICT	nr_atendimento_w
							from	atendimento_paciente
							where	cd_pessoa_fisica	= cd_pessoa_fisica_w
							and	cd_estabelecimento	= cd_estabelecimento_w
							and	ie_fim_conta		<> 'F'
							and	coalesce(dt_alta::text, '') = '';

							if (nr_atendimento_w > 0) then

								/* Verifica o proximo laudo do SUS para o atendimento */

								select	coalesce(max(nr_laudo_sus),0)+1
								into STRICT	nr_laudo_sus_w
								from	sus_laudo_paciente
								where	nr_atendimento		= nr_atendimento_w;

								/* Pega a sequencia do laudo do SUS */

								select	nextval('sus_laudo_paciente_seq')
								into STRICT	nr_seq_laudo_sus_w
								;

								/* Obter o medico responsavel pelo paciente */

								select	substr(hd_obter_profissional_paciente(cd_pessoa_fisica_w, 'M', 'C'),1,10)
								into STRICT	cd_medico_responsavel_w
								;

								if (cd_medico_responsavel_w IS NOT NULL AND cd_medico_responsavel_w::text <> '') then

									select	count(*)
									into STRICT	qt_medico_auditor_w
									from  	convenio b,
										medico_convenio a
									where	a.cd_convenio		= b.cd_convenio
									and	a.cd_pessoa_fisica	= cd_medico_responsavel_w
									and	b.ie_tipo_convenio	= 3
									and	a.ie_auditor		= 'S';

									if (qt_medico_auditor_w <= 0) then
										ds_inconsistencia_w	:= substr(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313072) || ds_enter_w,1,4000);
										cd_medico_responsavel_w	:= '';
									end if;

								else
									ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313074) || ds_enter_w,1,4000);
								end if;

								/* Obter peso ultima hemodialise */

								begin
								select	TRUNC(campo_numerico(substr(hd_obter_dados_dialise(hd_obter_hemodialise_atual(cd_pessoa_fisica_w,'U'),'PPS'),1,80)),2)
								into STRICT	qt_peso_w
								;
								exception
								when others then
									qt_peso_w	:= -1;
								end;

								if (qt_peso_w <= 0) then
									ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313075) || ds_enter_w,1,4000);
									qt_peso_w		:= null;
								end if;

								/* Obter altura do paciente */

								select	coalesce(qt_altura_cm,0)/100
								into STRICT	qt_altura_w
								from	pessoa_fisica
								where	cd_pessoa_fisica	= cd_pessoa_fisica_w;

								if (qt_altura_w <= 0) then
									ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313077) || ds_enter_w,1,4000);
									qt_altura_w		:= null;
								end if;

								/* Obter Evolucao para Complemento */

								select	substr(hd_obter_evolucao_paciente(cd_pessoa_fisica_w, cd_estabelecimento_w),1,255)
								into STRICT	ds_complemento_w
								;

								if (coalesce(ds_complemento_w::text, '') = '') then
									ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313078) || ds_enter_w,1,4000);
								end if;

								/* Obter Resultado Exame Hemofilia */

								if (nr_seq_exame_hemofilia_w > 0) then

									/* Obter o resultado do exame */

									select	substr(obter_hemofilia_laudo_lme(obter_result_lab_lme(cd_pessoa_fisica_w, nr_seq_exame_hemofilia_w)),1,15)
									into STRICT	ds_classif_hemofilia_w
									;

									if (coalesce(ds_classif_hemofilia_w::text, '') = '') then
										ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313079) || ds_enter_w,1,4000);
									end if;

								else
									ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313082) || ds_enter_w,1,4000);
								end if;

								/* Obter Resultado Exame Inibidor */

								if (nr_seq_exame_inibidor_w > 0) then

									/* Obter o resultado do exame */

									select	substr(obter_inibidor_laudo_lme(obter_result_lab_lme(cd_pessoa_fisica_w, nr_seq_exame_inibidor_w)),1,15)
									into STRICT	ds_inibidor_w
									;

									if (coalesce(ds_inibidor_w::text, '') = '') then
										ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313083) || ds_enter_w,1,4000);
									end if;

								else
									ds_inconsistencia_w	:= substr(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313084) || ds_enter_w,1,4000);
								end if;

								/* Insere o Laudo SUS */

								insert into sus_laudo_paciente(
									nr_seq_interno,
									nr_laudo_sus,
									dt_emissao,
									ie_tipo_laudo_apac,
									cd_medico_responsavel,
									qt_peso,
									qt_altura,
									ie_gestante,
									ie_transplante,
									ie_classif_hemofilia,
									ie_inibidor,
									ds_complemento,
									nr_atendimento,
									dt_atualizacao,
									nm_usuario,
									ie_tipo_laudo_sus,
									ie_classificacao,
									ie_status_processo,
									qt_procedimento_solic,
									ie_urgente,
									ie_tratamento_ant,
									ie_continuidade_trat,
									ie_metastase,
									ie_recidivado,
									ie_diaria_acomp
								) values (
									nr_seq_laudo_sus_w,
									nr_laudo_sus_w,
									clock_timestamp(),
									ie_tipo_laudo_apac_w,
									cd_medico_responsavel_w,
									qt_peso_w,
									qt_altura_w,
									'N',
									'N',
									ds_classif_hemofilia_w,
									ds_inibidor_w,
									ds_complemento_w,
									nr_atendimento_w,
									clock_timestamp(),
									nm_usuario_p,
									0,
									14,
									1,
									1,
									'N',
									'N',
									'N',
									'N',
									'N',
									'N'
								);

								open c02;
									loop
									fetch c02 into
										cd_material_w,
										qt_dose_w,
										cd_cid_principal_w,
										cd_cid_secundario_w,
										nr_ocorrencia_w,
										ie_via_aplicacao_w;
									EXIT WHEN NOT FOUND; /* apply on c02 */

										select	count(*)
										into STRICT	qt_procedimento_w
										from	sus_material_opm
										where	cd_material	= cd_material_w;

										if (qt_procedimento_w = 0) then
											ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313089,'CD_MATERIAL=' || cd_material_w) || ds_enter_w,1,4000);
										elsif (qt_procedimento_w > 1) then
											ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313096,'CD_MATERIAL=' || cd_material_w) || ds_enter_w,1,4000);
										else

											if (nr_ocorrencia_w > 0) then

												/* Calcula Ocorrencias */

												nr_ocorrencia_w	:= nr_ocorrencia_w * 30 * qt_dose_w;

												/* Seleciona o procedimento vinculado ao material */

												select	cd_procedimento,
													7
												into STRICT	cd_procedimento_w,
													ie_origem_proced_w
												from	sus_material_opm
												where	cd_material	= cd_material_w;
												
												if (coalesce(ie_cid_procedimento_w,'N') = 'S') then
													cd_cid_principal_w	:= coalesce(obter_cid_procedimento(cd_procedimento_w,ie_origem_proced_w,'P'),cd_cid_principal_w);
													cd_cid_secundario_w	:= coalesce(obter_cid_procedimento(cd_procedimento_w,ie_origem_proced_w,'S'),cd_cid_secundario_w);
												end if;												

												/* Verifica se o CID principal foi informado */

												if (cd_cid_principal_w IS NOT NULL AND cd_cid_principal_w::text <> '') then

													/* Verifica se os CIDs sao compativeis com os medicamentos */

													select	obter_se_cid_mat_especial(cd_material_w, cd_cid_principal_w, 'P')
													into STRICT	ie_cid_princ_compativel_w
													;

													select	obter_se_cid_mat_especial(cd_material_w, cd_cid_secundario_w, 'S')
													into STRICT	ie_cid_secun_compativel_w
													;

													if (ie_cid_princ_compativel_w = 'S') then
														if (ie_cid_secun_compativel_w = 'S') then
															begin
															
															insert into sus_laudo_medicamento(
																nr_sequencia,
																dt_atualizacao,
																nm_usuario,
																dt_atualizacao_nrec,
																nm_usuario_nrec,
																nr_seq_laudo_sus,
																cd_procedimento,
																ie_origem_proced,
																qt_proced_1_mes,
																qt_proced_2_mes,
																qt_proced_3_mes,
                                qt_proced_4_mes,
																qt_proced_5_mes,
																qt_proced_6_mes,
																cd_cid_principal,
																cd_cid_secundario,
																ie_via_aplicacao
															) values (
																nextval('sus_laudo_medicamento_seq'),
																clock_timestamp(),
																nm_usuario_p,
																clock_timestamp(),
																nm_usuario_p,
																nr_seq_laudo_sus_w,
																cd_procedimento_w,
																ie_origem_proced_w,
																nr_ocorrencia_w,
																nr_ocorrencia_w,
																nr_ocorrencia_w,
                                nr_ocorrencia_w,
																nr_ocorrencia_w,
																nr_ocorrencia_w,
																cd_cid_principal_w,
																cd_cid_secundario_w,
																ie_via_aplicacao_w
															);
															
															exception
															when others then
																ds_inconsistencia_w	:=	SUBSTR(ds_inconsistencia_w ||
																'nr_seq_laudo_sus_w > '		|| nr_seq_laudo_sus_w	|| ' | ' ||
																'cd_procedimento_w > '		|| cd_procedimento_w	|| ' | ' ||
																'ie_origem_proced_w > '		|| ie_origem_proced_w	|| ' | ' ||
																'nr_ocorrencia_w > '		|| nr_ocorrencia_w	|| ' | ' ||
																'nr_ocorrencia_w > '		|| nr_ocorrencia_w	|| ' | ' ||
																'nr_ocorrencia_w > '		|| nr_ocorrencia_w	|| ' | ' ||
																'cd_cid_principal_w > '		|| cd_cid_principal_w	|| ' | ' ||
																'cd_cid_secundario_w > '	|| cd_cid_secundario_w	|| ' | ' ||
																'ie_via_aplicacao_w > '		|| ie_via_aplicacao_w	|| ' | ' ||
																'cd_material_w > '		|| cd_material_w	|| ' | ' ||
																'qt_dose_w > '			|| qt_dose_w		|| ds_enter_w,1,4000);
															end;

														else
															ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313097,'CD_MATERIAL=' || cd_material_w) || ds_enter_w,1,4000);
														end if;
													else
														ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313099,'CD_MATERIAL=' || cd_material_w) || ds_enter_w,1,4000);
													end if;
												else
													ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313101,'CD_MATERIAL=' || cd_material_w) || ds_enter_w,1,4000);
												end if;
											else
												ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313102,'CD_MATERIAL=' || cd_material_w) || ds_enter_w,1,4000);
											end if;
										end if;
									end loop;
								close c02;

							else
								ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313103) || ds_enter_w,1,4000);
							end if;
						else
							ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313104) || ds_enter_w,1,4000);
						end if;
					end if;
				else
					ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313105) || ds_enter_w,1,4000);
				end if;
			else
				ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313106) || ds_enter_w,1,4000);
			end if;
		else
			ds_inconsistencia_w	:= SUBSTR(ds_inconsistencia_w || wheb_mensagem_pck.get_texto(313107) || ds_enter_w,1,4000);
		end if;
	end if;

	/* Caso tenha inconsistencia grava na tabela */

	if (ds_inconsistencia_w IS NOT NULL AND ds_inconsistencia_w::text <> '') then

		insert into sus_pac_sem_laudo(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_pessoa_fisica,
			dt_verificacao,
			ds_inconsistencia
		) values (
			nextval('sus_pac_sem_laudo_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			cd_pessoa_fisica_w,
			clock_timestamp(),
			substr(ds_inconsistencia_w,1,4000)
		);
	end if;

	end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_gerar_laudo_lme ( cd_pessoa_fisica_p text, ie_gera_manual_p text, nm_usuario_p text) FROM PUBLIC;

