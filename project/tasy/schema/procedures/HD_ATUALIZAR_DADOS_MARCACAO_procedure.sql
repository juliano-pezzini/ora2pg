-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_atualizar_dados_marcacao (nr_seq_escala_p bigint, cd_pessoa_fisica_p text, nr_seq_turno_p bigint, ie_dia_semana_p text, ie_acao_p text, nm_usuario_p text, nr_seq_ponto_acesso_p bigint DEFAULT NULL, nr_seq_unid_dialise_p bigint DEFAULT NULL, ds_retorno INOUT text DEFAULT NULL) AS $body$
DECLARE


    ie_exlcui_dia_escala_w varchar(1);
    ie_retorno             varchar(1);
    ie_erro_w              bigint := 0;
    v_exite                bigint;

BEGIN
    ds_retorno := NULL;
    IF (upper(ie_acao_p) = 'I') THEN
        IF (nr_seq_ponto_acesso_p IS NOT NULL AND nr_seq_ponto_acesso_p::text <> '') THEN
            SELECT COUNT(*) * 100
              INTO STRICT ie_erro_w
              FROM (SELECT 1
                      FROM hd_escala_dialise_temp
                     WHERE nr_seq_escala = nr_seq_escala_p
                       AND ie_dia_semana = ie_dia_semana_p
                       AND cd_pessoa_fisica = cd_pessoa_fisica_p
                       AND nr_seq_turno = nr_seq_turno_p
                       AND ie_acao = 'I'

UNION

                    SELECT 1
                      FROM hd_escala_dialise_dia a
                     WHERE a.nr_seq_escala = nr_seq_escala_p
                       AND a.nr_seq_turno = nr_seq_turno_p
                       AND a.ie_dia_semana = ie_dia_semana_p
                       AND coalesce(a.dt_fim_escala_dia::text, '') = ''
                       AND EXISTS (SELECT 1
                              FROM hd_escala_dialise x
                             WHERE x.nr_sequencia = a.nr_seq_escala
                               AND x.cd_pessoa_fisica = cd_pessoa_fisica_p
                               AND coalesce(x.dt_fim::text, '') = '')
                       AND NOT EXISTS (SELECT 1
                              FROM hd_escala_dialise_temp
                             WHERE nr_seq_escala = nr_seq_escala_p
                               AND ie_dia_semana = ie_dia_semana_p
                               AND cd_pessoa_fisica = cd_pessoa_fisica_p
                               AND nr_seq_turno = nr_seq_turno_p
                               AND nr_seq_ponto = a.nr_seq_ponto
                               AND ie_acao = 'D')) alias8;
            IF ie_erro_w > 0 THEN
                ds_retorno :=wheb_mensagem_pck.get_texto(nr_seq_mensagem_p => 1081369);
                --'Já existe um ponto selecionado para este dia, para o paciente ';
            ELSE
                -------- Regra de Qtd de Marcações    
                ie_retorno := hd_obter_se_perm_check(nr_seq_turno_p        => nr_seq_turno_p,
                                                     ie_dia_semana_p       => ie_dia_semana_p,
                                                     nr_seq_unid_p         => nr_seq_unid_dialise_p,
                                                     cd_estabelecimento_p  => wheb_usuario_pck.get_cd_estabelecimento,
                                                     cd_pessoa_fisica_p    => cd_pessoa_fisica_p,
                                                     dt_inicio_p           => NULL,
                                                     dt_fim_p              => NULL,
                                                     nr_seq_ponto_acesso_p => nr_seq_ponto_acesso_p);
                IF ie_retorno = 'N' THEN
                    ie_erro_w  := 1;
                    ds_retorno := wheb_mensagem_pck.get_texto(nr_seq_mensagem_p => 1081370);
                    --'Quantidade Maxima de pontos já selecionados';
                END IF;
            END IF;
        END IF;

    ELSIF (upper(ie_acao_p) = 'D') THEN
        BEGIN
            IF obter_valor_param_usuario(7009, 276, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo) = 'N' THEN
                SELECT hd_obter_se_checa_campo(nr_seq_escala_p,
                                               (ie_dia_semana_p)::numeric ,
                                               nr_seq_turno_p,
                                               nr_seq_ponto_acesso_p)
                  INTO STRICT ie_exlcui_dia_escala_w
;

                IF (ie_exlcui_dia_escala_w = 'S') THEN
                    UPDATE hd_escala_dialise_dia a
                       SET a.dt_fim_escala_dia = clock_timestamp(),
                           a.nr_seq_ponto      = nr_seq_ponto_acesso_p
                     WHERE a.nr_seq_escala = nr_seq_escala_p
                       AND a.nr_seq_turno = nr_seq_turno_p
                       AND a.ie_dia_semana = ie_dia_semana_p
                       AND coalesce(a.dt_fim_escala_dia::text, '') = ''
                       AND (a.nr_seq_ponto = nr_seq_ponto_acesso_p OR coalesce(nr_seq_ponto_acesso_p::text, '') = '')
                       AND EXISTS (SELECT 1
                              FROM hd_escala_dialise x
                             WHERE x.nr_sequencia = a.nr_seq_escala
                               AND x.cd_pessoa_fisica = cd_pessoa_fisica_p
                               AND coalesce(x.dt_fim::text, '') = '');
                END IF;
            END IF;
        END;
    ELSE
        ds_retorno := REPLACE(wheb_mensagem_pck.get_texto(nr_seq_mensagem_p => 1081370),
                              '#@DS_ERRO#@',
                              'Ação não permitida (' || ie_acao_p || ')');
    END IF;

    IF ie_erro_w = 0 THEN
        SELECT COUNT(*)
          INTO STRICT v_exite
          FROM hd_escala_dialise_temp
         WHERE cd_pessoa_fisica = cd_pessoa_fisica_p
           AND nr_seq_turno = nr_seq_turno_p
           AND ie_dia_semana = ie_dia_semana_p
           AND coalesce(nr_seq_escala, 0) = coalesce(nr_seq_escala_p, 0)
           AND nr_seq_ponto = nr_seq_ponto_acesso_p
           AND nr_seq_unid_dialise = nr_seq_unid_dialise_p
           AND ie_acao =CASE WHEN ie_acao_p='D' THEN 'I'  ELSE 'D' END;

        IF v_exite > 0 THEN
            DELETE FROM hd_escala_dialise_temp
             WHERE cd_pessoa_fisica = cd_pessoa_fisica_p
               AND nr_seq_turno = nr_seq_turno_p
               AND ie_dia_semana = ie_dia_semana_p
               AND coalesce(nr_seq_escala, 0) = coalesce(nr_seq_escala_p, 0)
               AND nr_seq_ponto = nr_seq_ponto_acesso_p
               AND nr_seq_unid_dialise = nr_seq_unid_dialise_p
               AND ie_acao = CASE WHEN ie_acao_p='D' THEN 'I'  ELSE 'D' END;
        ELSE
            INSERT INTO hd_escala_dialise_temp(nr_sequencia,
                 dt_atualizacao,
                 nm_usuario,
                 dt_atualizacao_nrec,
                 nm_usuario_nrec,
                 cd_pessoa_fisica,
                 nr_seq_turno,
                 ie_dia_semana,
                 nr_seq_escala,
                 nr_seq_ponto,
                 nr_seq_unid_dialise,
                 ie_acao)
            VALUES (nextval('hd_escala_dialise_temp_seq'),
                 clock_timestamp(),
                 nm_usuario_p,
                 clock_timestamp(),
                 nm_usuario_p,
                 cd_pessoa_fisica_p,
                 nr_seq_turno_p,
                 ie_dia_semana_p,
                 CASE WHEN nr_seq_escala_p=0 THEN  NULL  ELSE nr_seq_escala_p END ,
                 nr_seq_ponto_acesso_p,
                 nr_seq_unid_dialise_p,
                 ie_acao_p);
        END IF;


    END IF;

    COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_atualizar_dados_marcacao (nr_seq_escala_p bigint, cd_pessoa_fisica_p text, nr_seq_turno_p bigint, ie_dia_semana_p text, ie_acao_p text, nm_usuario_p text, nr_seq_ponto_acesso_p bigint DEFAULT NULL, nr_seq_unid_dialise_p bigint DEFAULT NULL, ds_retorno INOUT text DEFAULT NULL) FROM PUBLIC;

