-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE insert_laudo_paciente_loc (NR_ATENDIMENTO_P bigint, NR_PRESCRICAO_P bigint, CD_SETOR_ATENDIMENTO_P bigint, CD_PESSOA_ENTREGA_P text, IE_TIPO_LOCAL_P text, CD_SETOR_registro_P bigint, NR_SEQ_LAUDOS_P text, NM_USUARIO_P text, CD_PESSOA_FISICA_P text, CD_PESSOA_RECEBIDO_P text, DS_SENHA_P text, DS_OBSERVACAO_P text, NM_EXTERNO_P text, IE_GRAVAR_SETOR_P text, DT_RECEBIMENTO_P timestamp, IE_COM_PROTOCOLO_P text) AS $body$
DECLARE

 
ds_possib_w       varchar(6000);
qt_controle_w      bigint;
qt_pos_separador_w bigint;
nr_seq_laudo_w    bigint;

nr_agrupamento_w       bigint;
ie_tipo_atendimento_w    smallint := 0;
cd_estabelecimento_w    smallint;
ie_param_nove_w        varchar(1);
ie_data_retirada_w       varchar(3);
ie_tipo_local_w          varchar(3);
nr_seq_laudo_agrupado_w bigint;
cd_setor_atendimento_w  integer;
dt_retirada_w           timestamp := NULL;
nr_seq_loc_w           integer;

c01 CURSOR FOR 
 SELECT nr_sequencia 
 FROM  laudo_paciente 
 WHERE nr_agrupamento = nr_agrupamento_w 
 AND  nr_sequencia <> nr_seq_laudo_w 
 AND  nr_agrupamento_w > 0;


BEGIN 
 ds_possib_w := nr_seq_laudos_p || ',';
 
 IF (position('('  ds_possib_w) > 0 ) 
 AND (position(')' in ds_possib_w) > 0 ) THEN 
  ds_possib_w := SUBSTR(nr_seq_laudos_p,(position('(' in nr_seq_laudos_p)+1),(position(')' in nr_seq_laudos_p)-2));
 END IF;
 
 qt_controle_w   := 0;
 qt_pos_separador_w := position(',' in ds_possib_w);
 
 IF (qt_pos_separador_w = 0) THEN 
  qt_pos_separador_w := -1;
 END IF;
 
 
 WHILE(qt_pos_separador_w >= 0) 
 AND (qt_controle_w < 1000) LOOP 
 BEGIN 
  IF (qt_pos_separador_w = 0) THEN 
   nr_seq_laudo_w   := (ds_possib_w)::numeric;
   qt_pos_separador_w := -1;
  ELSE 
   nr_seq_laudo_w := (SUBSTR(ds_possib_w,1,qt_pos_separador_w-1))::numeric;
  END IF;
 
 
  IF (nr_atendimento_p <> 0) THEN 
  BEGIN 
   SELECT c.ie_tipo_atendimento, 
       c.cd_estabelecimento 
   INTO STRICT  ie_tipo_atendimento_w, 
       cd_estabelecimento_w 
   FROM  atendimento_paciente c 
   WHERE c.nr_atendimento = nr_atendimento_p;
 
   EXCEPTION 
   WHEN no_data_found THEN 
   BEGIN 
    ie_tipo_atendimento_w := 0;
   END;
  END;
  END IF;
 
  IF (nr_prescricao_p <> 0) AND (ie_tipo_atendimento_w = 0) THEN 
  BEGIN 
   SELECT coalesce(MAX(c.ie_tipo_atendimento),0), 
       coalesce(MAX(c.cd_estabelecimento),0) 
   INTO STRICT  ie_tipo_atendimento_w, 
       cd_estabelecimento_w 
   FROM  prescr_medica b, 
       atendimento_paciente c 
   WHERE c.nr_atendimento = b.nr_atendimento 
   AND  b.nr_prescricao = nr_prescricao_p;
 
   EXCEPTION 
   WHEN no_data_found THEN 
   BEGIN 
    ie_tipo_atendimento_w := 0;
   END;
  END;
  END IF;
 
  SELECT coalesce(obter_valor_param_usuario(994, 9, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N') 
  INTO STRICT ie_param_nove_w 
;
 
  IF ie_param_nove_w = 'N' THEN 
  SELECT MAX(b.ie_tipo_local) 
  INTO STRICT  ie_tipo_local_w 
  FROM  regra_loc_laudo b, 
      prescr_medica a 
  WHERE a.cd_setor_entrega = b.cd_setor_entrega 
  AND (coalesce(b.ie_tipo_atendimento, ie_tipo_atendimento_w) = ie_tipo_atendimento_w 
       OR ie_tipo_atendimento_w = 0) 
  AND  a.nr_prescricao = nr_prescricao_p;
  END IF;
 
  SELECT coalesce(obter_valor_param_usuario(994, 8, obter_perfil_ativo, nm_usuario_p,cd_estabelecimento_w),'N') 
  INTO STRICT  ie_data_retirada_w 
;
 
  IF (coalesce(ie_tipo_local_w::text, '') = '') THEN 
   ie_tipo_local_w := ie_tipo_local_p;
  END IF;
 
  IF (ie_tipo_local_p = '8') 
   OR (ie_gravar_setor_p = 'S') THEN 
   cd_setor_atendimento_w := cd_setor_atendimento_p;
  END IF;
 
  IF (ie_data_retirada_w = 'S') THEN 
   dt_retirada_w := clock_timestamp();
  ELSIF (ie_data_retirada_w = 'N') 
   AND (dt_recebimento_p IS NOT NULL AND dt_recebimento_p::text <> '') THEN 
   dt_retirada_w := dt_recebimento_p;
  END IF;
 
  SELECT coalesce(MAX(nr_seq_loc), 0) + 1 
  INTO STRICT  nr_seq_loc_w 
  FROM  laudo_paciente_loc 
  WHERE nr_sequencia = nr_seq_laudo_w;
 
  INSERT INTO laudo_paciente_loc(nr_sequencia, 
    nr_seq_loc, 
    ie_tipo_local, 
    dt_atualizacao, 
    nm_usuario, 
    cd_setor_atendimento, 
    dt_retirada, 
    cd_pessoa_fISica, 
    ds_observacao, 
    cd_setor_registro, 
    nm_pessoa_fISica, 
    nm_usuario_nrec, 
    cd_pessoa_recebido, 
    ds_senha, 
    dt_atualizacao_nrec, 
    cd_pessoa_entrega, 
    ie_com_protocolo) 
  VALUES (nr_seq_laudo_w, 
    nr_seq_loc_w, 
    ie_tipo_local_w, 
    clock_timestamp(), 
    nm_usuario_p, 
    CASE WHEN cd_setor_atendimento_w=0 THEN  NULL  ELSE cd_setor_atendimento_w END , 
    dt_retirada_w, 
    cd_pessoa_fISica_p, 
    ds_observacao_p, 
    CASE WHEN cd_setor_registro_p=0 THEN  NULL  ELSE cd_setor_registro_p END , 
    SUBSTR(nm_externo_p,1,60), 
    nm_usuario_p, 
    cd_pessoa_recebido_p, 
    ds_senha_p, 
    clock_timestamp(), 
    cd_pessoa_entrega_p, 
    ie_com_protocolo_p);
 
  OPEN c01;
  LOOP 
  FETCH c01 INTO 
   nr_seq_laudo_agrupado_w;
  EXIT WHEN NOT FOUND; /* apply on c01 */
   BEGIN 
    SELECT coalesce(MAX(nr_seq_loc), 0) + 1 
    INTO STRICT  nr_seq_loc_w 
    FROM  laudo_paciente_loc 
    WHERE nr_sequencia = nr_seq_laudo_w;
 
  INSERT INTO laudo_paciente_loc(nr_sequencia, 
    nr_seq_loc, 
    ie_tipo_local, 
    dt_atualizacao, 
    nm_usuario, 
    cd_setor_atendimento, 
    dt_retirada, 
    cd_pessoa_fISica, 
    ds_observacao, 
    cd_setor_registro, 
    nm_pessoa_fISica, 
    nm_usuario_nrec, 
    cd_pessoa_recebido, 
    ds_senha, 
    dt_atualizacao_nrec, 
    cd_pessoa_entrega, 
    ie_com_protocolo) 
  VALUES (nr_seq_laudo_agrupado_w, 
    nr_seq_loc_w, 
    ie_tipo_local_w, 
    clock_timestamp(), 
    nm_usuario_p, 
    CASE WHEN cd_setor_atendimento_w=0 THEN  NULL  ELSE cd_setor_atendimento_w END , 
    dt_retirada_w, 
    cd_pessoa_fISica_p, 
    ds_observacao_p, 
    CASE WHEN cd_setor_registro_p=0 THEN  NULL  ELSE cd_setor_registro_p END , 
    SUBSTR(nm_externo_p,1,60), 
    nm_usuario_p, 
    cd_pessoa_recebido_p, 
    ds_senha_p, 
    clock_timestamp(), 
    cd_pessoa_entrega_p, 
    ie_com_protocolo_p);
 
   CALL atualizar_status_exec_proced(nr_seq_laudo_agrupado_w,nm_usuario_p,'N');
 
  END;
  END loop;
  CLOSE c01;
 
  CALL atualizar_status_exec_proced(nr_seq_laudo_w,nm_usuario_p,'N');
 
  IF (qt_pos_separador_w > 0 ) THEN 
   ds_possib_w    := SUBSTR(ds_possib_w,qt_pos_separador_w+1,length(ds_possib_w));
   qt_pos_separador_w := position(',' in ds_possib_w);
  END IF;
 
  qt_controle_w := qt_controle_w + 1;
 END;
 END LOOP;
 
 COMMIT;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE insert_laudo_paciente_loc (NR_ATENDIMENTO_P bigint, NR_PRESCRICAO_P bigint, CD_SETOR_ATENDIMENTO_P bigint, CD_PESSOA_ENTREGA_P text, IE_TIPO_LOCAL_P text, CD_SETOR_registro_P bigint, NR_SEQ_LAUDOS_P text, NM_USUARIO_P text, CD_PESSOA_FISICA_P text, CD_PESSOA_RECEBIDO_P text, DS_SENHA_P text, DS_OBSERVACAO_P text, NM_EXTERNO_P text, IE_GRAVAR_SETOR_P text, DT_RECEBIMENTO_P timestamp, IE_COM_PROTOCOLO_P text) FROM PUBLIC;

