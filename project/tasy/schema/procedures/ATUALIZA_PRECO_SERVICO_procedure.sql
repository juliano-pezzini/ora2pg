-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualiza_preco_servico (nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE

dt_atualizacao_w          		timestamp := clock_timestamp();
dt_acerto_conta_w         		timestamp;
dt_conta_definitiva_w		timestamp;
dt_conta_w                		timestamp := clock_timestamp();
dt_preco_w                		timestamp := clock_timestamp();
vl_servico_orig_w         		double precision := 0;
vl_servico_w              		double precision := 0;
vl_proced_glosa_w              		double precision := 0;
qt_procedimento_w        		double precision := 0;
cd_estabelecimento_w      		smallint    := 0;
cd_estab_atend_w      		smallint    := 0;
cd_convenio_w             		integer    := 0;
cd_convenio_orig_w         		integer    := 0;
cd_categoria_w            		varchar(10) := '';
cd_categoria_orig_w		varchar(10):= '';
cd_conta_contabil_w        		varchar(20);
cd_centro_custo_w        		bigint    := 0;
ie_origem_proced_w        		bigint    := 0;
dt_entrada_w         			timestamp;
dt_alta_w         	  		timestamp;
dt_altap_w         	  		timestamp;
ie_tipo_atendimento_w     		smallint    := 0;
ie_carater_inter_sus_w		varchar(2);
cd_setor_atendimento_w    		integer  := 0;
qt_autorizada_w           		double precision := 0;
qt_utilizada_w            		double precision := 0;
cd_situacao_glosa_w       		smallint	   := 0;
cd_situacao_glosa_ww       		smallint	   := 0;
ie_glosa_w            			varchar(1);
cd_senha_w                		varchar(20);
cd_autorizacao_w          		varchar(20);
nm_responsavel_w          		varchar(40);
ie_tipo_convenio_w        		smallint    := 0;
ie_valor_informado_w      		varchar(1);
nr_seq_autorizacao_w      		bigint;
nr_interno_conta_w			bigint;
cd_convenio_calculo_w     		integer;
cd_categoria_calculo_w    		varchar(10);
nr_atendimento_w 	  		atendimento_paciente.nr_atendimento%type;
cd_procedimento_w	  	bigint;
dt_procedimento_w	  		timestamp;
nr_doc_convenio_w          		varchar(20);
ie_guia_informada_w        		varchar(01);
ie_classif_convenio_w      		varchar(03);
tx_procedimento_w         		double precision 	:= 100;

tx_adic_medico_w    		double precision	:= 1;
tx_adic_anestesista_w 		double precision	:= 1;
tx_adic_auxiliares_w 		double precision	:= 1;
tx_adic_custo_operacional_w		double precision	:= 1;
tx_adic_materiais_w 		double precision	:= 1;
tx_adic_procedimento_w		double precision	:= 1;
vl_adic_proc_w			double precision		:= 0;
vl_adic_medico_w			double precision		:= 0;
nr_seq_adic_w			bigint;
nr_atend_original_w			atendimento_paciente.nr_atendimento%type := 0;
ie_glosa_zerado_w			varchar(1)	:= 'N';
nr_seq_regra_preco_w		bigint;

nr_lote_contabil_w        		bigint  := 0;
cd_tipo_acomodacao_w      		smallint;
ie_emite_conta_w           		varchar(3);
cd_estrutura_w			integer 	:= 0;
cd_estrutura_honor_w		integer 		:= 0;
tx_retorno_w   			double precision:= 1;
qt_porte_anestesico_w		smallint;
cd_procedimento_princ_w		bigint;
nr_seq_proc_princ_w		bigint;
cd_especialidade_medica_w		integer		:= 0;
ie_clinica_w			integer;
nr_seq_grupo_rec_w	 	bigint;
cd_motivo_exc_conta_w		smallint;
pr_glosa_w			double precision;
vl_glosa_w			double precision;
cd_plano_w			varchar(20);
cd_usuario_convenio_w		varchar(40);
cd_empresa_ref_w			bigint;
ie_sexo_w			varchar(01);
cd_motivo_exc_conta_ww		bigint;
nr_seq_pq_proc_w			bigint;

ie_preco_informado_glosa_w		varchar(01);
vl_negociado_glosa_w		double precision;
cd_pessoa_fisica_w		varchar(10);
ie_video_w			varchar(01);
ie_atend_retorno_w			varchar(01);
ie_calculo_taxa_regra_w		varchar(01) := 'C';
ie_codigo_convenio_w		varchar(03);
qt_dias_internacao_w		bigint;

nr_seq_w				bigint;

cd_proced_calculo_horario_w		bigint;
ie_origem_proced_horario_w		bigint;


cd_regra_honorario_w			varchar(5) := null;
ie_conta_honorario_w			varchar(1);
ie_calcula_honorario_w			varchar(1)		:= 'S';
cd_cgc_honorario_w			varchar(14);
cd_cgc_prestador_w			varchar(14);
cd_pessoa_honorario_w			varchar(10);
cd_medico_executor_w      		varchar(10);
ie_pacote_w				varchar(1)	:= 'A';
nr_seq_criterio_w			bigint;

ie_regra_honorario_servico_w		varchar(01);
ie_autor_particular_w			varchar(1);
nr_seq_autor_gerada_w			bigint;
ie_tipo_convenio_aux_w			smallint;
ie_tipo_convenio_aux2_w			smallint;
cd_convenio_glosa_ww			integer;
cd_categoria_glosa_ww			varchar(10);
nr_seq_ajuste_proc_ww			bigint;
ie_preco_inf_glosa_proc_w		varchar(01);
ie_estabelecimento_conta_w		varchar(01);

ie_doc_autorizacao_w			varchar(2)	:= 'N';
nr_sequencia_autor_w			bigint;
nr_seq_proc_autor_w			bigint;
nr_seq_mat_autor_w			bigint;
nr_doc_conv_autor_w			varchar(20);
cd_senha_autor_w			varchar(20);
ie_autorizado_w				varchar(1);
nr_prescricao_w				bigint;
nr_sequencia_prescricao_w		integer;

cd_proc_referencia_w			bigint;
ie_origem_proc_refer_w			bigint;
qt_proc_ref_w				bigint;
ie_convenio_conta_param_w		varchar(10);
vl_custo_operacional_w			double precision;
nr_seq_conta_origem_w			bigint;
ie_grava_guia_conta_w			varchar(1);
ie_guia_w				varchar(10);
cd_estab_logado_w			smallint;
ie_valor_inf_desconto_w			varchar(01);
ie_valor_inf_pacote_w			varchar(01);

ie_tipo_rounded_w			varchar(1);
ie_regra_arredondamento_tx_w		varchar(1):= 'N';
ie_valor_arredondado_w			varchar(1):= 'N';
ie_responsavel_credito_w		varchar(255);

ie_altera_guia_w			varchar(1):= 'N';
IE_GASTOS_RN_ALTA_w			varchar(1):= 'N';
qt_idade_w				bigint;
ie_regra_pacote_ctb_w			varchar(1)	:= 'N';
nr_seq_proc_pacote_w			bigint;

nr_dias_gastos_rn_w			bigint:= 0;
ie_dias_gastos_rn_w			varchar(1):= 'N';
ie_trat_conta_rn_w			varchar(15);
ie_trat_conta_rn_ww			varchar(15);

ie_ordem_arred_serv_w			varchar(02):= 'MA';
ie_auditoria_w				varchar(1);

cd_classif_setor_rn_w		varchar(2);
cd_classif_setor_w		varchar(2);
ie_classif_gastos_rn_w		varchar(1):= 'S';
nr_seq_proc_interno_w		bigint;

tx_custo_operacional_w		double precision;
tx_medico_w			double precision;

vl_tx_desconto_w		double precision;
vl_tx_adm_w			double precision;
tx_adm_w			double precision;
tx_desconto_w			double precision;
vl_serv_w			double precision;
vl_serv_orig_w			double precision;
tx_ajuste_w			double precision;

ie_regra_tipo_atend_w		varchar(1):= 'A';
ie_status_acerto_w		smallint:= 1;

nr_seq_classif_medico_w		bigint;
cd_setor_paciente_w		integer;
ie_data_adic_hor_w		varchar(1):= 'N';
dt_adic_hor_w			timestamp;
ie_regra_data_preco_w	varchar(1) := 'N';
cd_procedencia_w		integer;

cd_grupo_proc_w			bigint;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
cd_funcao_w			integer;
cd_estab_terceiro_w      	smallint;
qt_reg_estab_terc_w      	bigint;
cd_estab_conta_w	      	smallint  	:= 0;
ie_regra_conta_terc_serv_w	varchar(1)	:= 'N';
ie_verifica_glosa_w		varchar(1)	:= 'N';
ie_data_proc_dias_int_w 	varchar(1)	:= 'N';
ie_doc_executor_w		smallint;
ie_estab_regra_crit_hor_w	varchar(1)	:= 'C';
cd_estab_adic_horario_w		bigint;
ie_regra_rn_item_w		varchar(1);
dt_entrada_original_w		timestamp;
ie_transf_gasto_nr_w		varchar(1);
cd_cbo_w			varchar(06);
ie_tipo_setor_classif_rn_w	varchar(1);
qt_conta_w			bigint;
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
ie_tiss_tipo_guia_w			varchar(5);
ie_entra_conta_w		varchar(20);
ie_repassa_medico_w		varchar(20);
cd_setor_atend_prescr_w    	integer  	:= 0;
nr_seq_cobertura_w		bigint;
nr_seq_classif_atend_w		bigint;
ie_calcular_proc_auditado_w	varchar(1);
ie_altera_auditoria_w		varchar(1);
ie_estab_regra_honorario_w	varchar(1);
cd_estab_honorario_w		smallint;
qt_item_conta_w			bigint;
qt_glosa_perc_w			bigint;
qt_existe_repasse_w		bigint;
cd_dependencia_w		smallint;
ie_gravar_log_w			varchar(1):= 'N';
dt_alta_preco_w			timestamp;
cd_procedimento_tuss_w		bigint;
nr_seq_exame_w			bigint;
nr_seq_ajuste_proc_def_w	bigint;
nr_seq_origem_w			atend_categoria_convenio.nr_seq_origem%type;
cd_tipo_acomod_unid_w		tipo_acomodacao.cd_tipo_acomodacao%type;
nr_seq_atepacu_w		procedimento_paciente.nr_seq_atepacu%type;
ie_item_fora_periodo_w		varchar(1):='N';
ie_atualiza_guia_w 		varchar(1);
ie_atualiza_senha_w 		varchar(1);
ie_autor_qtde_w 		varchar(1);
tx_hora_extra_w			procedimento_paciente.tx_hora_extra%type:=0;
ds_nls_territory_w		varchar(64);
cd_mat_item_ref_w		regra_ajuste_item_ref.cd_material%type;
cd_proc_item_ref_w		regra_ajuste_item_ref.cd_procedimento%type;
ie_origem_proc_item_ref_w	regra_ajuste_item_ref.ie_origem_proced%type;
qt_reg_ajuste_item_ref_w	bigint;
nr_seq_proc_autor_ww		bigint;
nr_cirurgia_w			bigint;
ds_proc_tuss_w			procedimento_paciente.ds_proc_tuss%type;
nr_seq_tuss_item_w		procedimento_paciente.nr_seq_tuss_item%type;
ie_doc_convenio_w		varchar(3);
nr_sequencia_regra_w		regra_conta_terceiro.nr_sequencia%type := 0;
ie_identifica_conta_proc_w varchar(1);
cd_sequencia_parametro_w	parametros_conta_contabil.cd_sequencia_parametro%type;
DS_MAE_W					varchar(10):= '';
DS_NAO_INFORMADO_W			varchar(20):= '';

C01 CURSOR FOR
	SELECT	cd_material,
		cd_procedimento,
		ie_origem_proced
	from	regra_ajuste_item_ref
	where	nr_seq_regra_ajuste_proc = nr_seq_ajuste_proc_ww
	and	ie_situacao = 'A';

ie_complexidade_sus_w		varchar(2);
ie_tipo_financ_sus_w		varchar(4);

BEGIN
/*      obter o registro do servico do paciente a calcular */

begin
select 	cd_convenio,
       	cd_categoria,
       	qt_procedimento,
       	vl_procedimento,
       	coalesce(dt_conta, coalesce(dt_prescricao,dt_procedimento)),
	ie_origem_proced,
       	dt_acerto_conta,
	cd_setor_atendimento,
	coalesce(ie_valor_informado,'N'),
	nr_seq_autorizacao,
	nr_interno_conta,
	nr_atendimento,
	cd_procedimento,
	coalesce(tx_procedimento,100),
	dt_procedimento,
	nr_doc_convenio,
	ie_guia_informada,
	coalesce(nr_lote_contabil,0),
	ie_emite_conta,
	cd_convenio,
	qt_porte_anestesico,
	cd_procedimento_princ,
	nr_seq_proc_princ,
	cd_especialidade,
	cd_motivo_exc_conta,
	nr_seq_pq_proc,
	ie_video,
	cd_medico_executor,
	nr_prescricao,
	nr_sequencia_prescricao,
	cd_senha,
	cd_cgc_prestador,
	cd_categoria,
	nr_seq_conta_origem,
	ie_responsavel_credito,
	nr_seq_proc_pacote,
	ie_auditoria,
	nr_seq_proc_interno,
	cd_setor_paciente,
	coalesce(cd_funcao,0),
	coalesce(cd_situacao_glosa,0),
	ie_doc_executor	,
	ie_trat_conta_rn,
	cd_cbo,
	ie_tiss_tipo_guia,
	nr_seq_exame,
	nr_seq_atepacu
into STRICT
       	cd_convenio_w,
       	cd_categoria_w,
       	qt_procedimento_w,
       	vl_servico_orig_w,
       	dt_conta_w,
	ie_origem_proced_w,
       	dt_acerto_conta_w,
	cd_setor_atendimento_w,
	ie_valor_informado_w,
	nr_seq_autorizacao_w,
	nr_interno_conta_w,
	nr_atendimento_w,
	cd_procedimento_w,
	tx_procedimento_w,
	dt_procedimento_w,
	nr_doc_convenio_w,
	ie_guia_informada_w,
	nr_lote_contabil_w,
	ie_emite_conta_w,
	cd_convenio_orig_w,
	qt_porte_anestesico_w,
	cd_procedimento_princ_w,
	nr_seq_proc_princ_w,
	cd_especialidade_medica_w,
	cd_motivo_exc_conta_w,
	nr_seq_pq_proc_w,
	ie_video_w,
	cd_medico_executor_w,
	nr_prescricao_w,
	nr_sequencia_prescricao_w,
	cd_senha_w,
	cd_cgc_prestador_w,
	cd_categoria_orig_w,
	nr_seq_conta_origem_w,
	ie_responsavel_credito_w,
	nr_seq_proc_pacote_w,
	ie_auditoria_w,
	nr_seq_proc_interno_w,
	cd_setor_paciente_w,
	cd_funcao_w,
	cd_situacao_glosa_ww,
	ie_doc_executor_w,
	ie_trat_conta_rn_ww,
	cd_cbo_w,
	ie_tiss_tipo_guia_w,
	nr_seq_exame_w,
	nr_seq_atepacu_w
from 	procedimento_paciente
where 	nr_sequencia     = nr_sequencia_p;
exception
    	when others then
      	--'Nao encontrado Servico para atualizar'
	CALL wheb_mensagem_pck.exibir_mensagem_abort(183596);
end;

DS_MAE_W           := obter_desc_expressao(962487);
DS_NAO_INFORMADO_W := substr(obter_desc_expressao(778770),1,20);

if (obter_funcao_ativa = 67) and (coalesce(obter_valor_param_usuario(67, 637, obter_perfil_ativo, nm_usuario_p, 0), 'S') = 'N') then
	
	select	count(*)
	into STRICT	qt_existe_repasse_w
	from	procedimento_repasse
	where	nr_seq_procedimento = nr_sequencia_p;
	
	if (qt_existe_repasse_w <> 0) then
		goto final;
	end if;
end if;

begin
select 	a.cd_estabelecimento
into STRICT  	cd_estabelecimento_w
from 	pessoa_fisica b,
	atendimento_paciente a
where 	a.nr_atendimento     	= nr_atendimento_w
and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica;
exception
    	when others then
      	cd_estabelecimento_w := 1;
end;

select	coalesce(max(cd_tipo_acomodacao),0)
into STRICT	cd_tipo_acomod_unid_w
from 	atend_paciente_unidade a
where	a.nr_atendimento = nr_atendimento_w
and	nr_seq_interno = nr_seq_atepacu_w;

begin

select	cd_procedencia
into STRICT	cd_procedencia_w
from 	atendimento_paciente
where 	nr_atendimento 	= nr_atendimento_w;
exception
    	when others then
      	cd_procedencia_w := 0;
end;


begin
select	nr_seq_classif_medico
into STRICT	nr_seq_classif_medico_w
from	atendimento_paciente
where 	nr_atendimento     	= nr_atendimento_w;
exception
    	when others then
	nr_seq_classif_medico_w:=null;
end;

begin
select	cd_estabelecimento
into STRICT	cd_estab_conta_w
from	conta_paciente
where 	nr_interno_conta	= nr_interno_conta_w;
exception
     	when others then
          	cd_estab_conta_w	:= cd_estabelecimento_w;
end;

select 	coalesce(max(IE_GASTOS_RN_ALTA),'N'),
	--	nvl(max(nr_dias_gastos_rn),0),
		coalesce(max(cd_classif_setor_rn),0),
		coalesce(max(ie_data_adic_hor),'N'),
		coalesce(max(ie_regra_rn_item),'S'),
	coalesce(max(ie_tipo_setor_classif_rn),'I')
into STRICT	IE_GASTOS_RN_ALTA_w,
	--	nr_dias_gastos_rn_w,
		cd_classif_setor_rn_w,
		ie_data_adic_hor_w,
		ie_regra_rn_item_w,
	ie_tipo_setor_classif_rn_w
from 	parametro_faturamento
where 	cd_estabelecimento = cd_estabelecimento_w;

ie_transf_gasto_nr_w := coalesce(Obter_valor_param_usuario(67, 500, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');

select 	coalesce(max(nr_dias_gastos_rn),0)
into STRICT	nr_dias_gastos_rn_w
from	convenio_estabelecimento
where	cd_convenio		= cd_convenio_w
and		cd_estabelecimento	= cd_estabelecimento_w;

if (nr_dias_gastos_rn_w = 0 ) then

	select 	coalesce(max(nr_dias_gastos_rn),0)
	into STRICT	nr_dias_gastos_rn_w
	from 	parametro_faturamento
	where 	cd_estabelecimento = cd_estabelecimento_w;

end if;


select 	coalesce(max(cd_classif_setor),0)
into STRICT	cd_classif_setor_w
from 	setor_atendimento
where 	cd_setor_atendimento = cd_setor_atendimento_w;

if (ie_tipo_setor_classif_rn_w = 'P') then
	select 	coalesce(max(cd_classif_setor),0)
	into STRICT	cd_classif_setor_w
	from 	setor_atendimento
	where 	cd_setor_atendimento = cd_setor_paciente_w;
end if;

ie_dias_gastos_rn_w:= 'N';
ie_classif_gastos_rn_w	:= 'S';


select 	max(dt_entrada),
	max(ie_trat_conta_rn)
into STRICT	dt_entrada_w,
	ie_trat_conta_rn_w
from 	atendimento_paciente
where	nr_atendimento = nr_atendimento_w;

if (coalesce(ie_trat_conta_rn_ww::text, '') = '') then
	ie_trat_conta_rn_ww := ie_trat_conta_rn_w;
end if;


if (nr_dias_gastos_rn_w > 0) and (ie_trat_conta_rn_w = DS_MAE_W) and
	((dt_procedimento_w - dt_entrada_w) > nr_dias_gastos_rn_w) then
	ie_dias_gastos_rn_w:= 'S';
end if;

if (cd_classif_setor_rn_w > 0) and (ie_trat_conta_rn_w = DS_MAE_W) then
	ie_classif_gastos_rn_w:= 'N';
	if (cd_classif_setor_rn_w = cd_classif_setor_w) then
		ie_classif_gastos_rn_w:= 'S';
		
	end if;
end if;

ie_status_acerto_w:= 1;
begin
select	coalesce(max(ie_status_acerto),1)
into STRICT	ie_status_acerto_w
from 	conta_paciente
where 	nr_interno_conta = nr_interno_conta_w;
exception
	when others then
	ie_status_acerto_w:= 1;
end;

if (coalesce(ie_regra_rn_item_w,'S') = 'S') then
	begin
	select	CASE WHEN ie_trat_conta_rn=DS_MAE_W THEN  nr_atendimento_mae  ELSE nr_atendimento_w END ,
		CASE WHEN ie_trat_conta_rn=DS_MAE_W THEN  null  ELSE CASE WHEN ie_transf_gasto_nr_w='M' THEN null  ELSE nr_interno_conta_w END  END
	into STRICT	nr_atendimento_w,
		nr_interno_conta_w
	from	atendimento_paciente
	where	nr_atendimento		= nr_atendimento_w
	and 	ie_dias_gastos_rn_w	= 'N'	-- parametro de dias para deixar os gastos no atend do RN
	and 	ie_classif_gastos_rn_w  = 'S'   -- parametro da classificacao do setor do RN 
	and	(ie_trat_conta_rn IS NOT NULL AND ie_trat_conta_rn::text <> '')
	and	CASE WHEN ie_trat_conta_rn=DS_MAE_W THEN  obter_se_atendimento_fechado(nr_atendimento_mae)  ELSE 'N' END  = 'N'
	and 	ie_status_acerto_w	= 1
	and (obter_se_gastos_rn(cd_convenio_w, nr_atendimento_w, ie_trat_conta_rn, nr_seq_atepacu_w) = 'N') -- regra de setor para definicao dos gastos RN (OS  244366)
	and 	((IE_GASTOS_RN_ALTA_w = 'N') or 
		((IE_GASTOS_RN_ALTA_w = 'S') and (ie_trat_conta_rn = DS_MAE_W) and (obter_se_atendimento_alta(nr_atendimento_mae) = 'N')) or
		((IE_GASTOS_RN_ALTA_w = 'D') and (ie_trat_conta_rn = DS_MAE_W) and (dt_procedimento_w <= coalesce(to_date(obter_dados_atendimento(nr_atendimento_mae,'DA'),'dd/mm/yyyy hh24:mi:ss'),dt_procedimento_w + 5))));
	exception
		 when others then
		if (IE_GASTOS_RN_ALTA_w = 'D') and (coalesce(nr_interno_conta_w,0) > 0) and (Obter_atendimento_conta(nr_interno_conta_w) <> nr_atendimento_w) then
			begin
			select	CASE WHEN ie_trat_conta_rn=DS_MAE_W THEN  nr_atendimento_mae  ELSE Obter_atendimento_conta(nr_interno_conta_w) END ,
				CASE WHEN ie_trat_conta_rn=DS_MAE_W THEN  null  ELSE CASE WHEN ie_transf_gasto_nr_w='M' THEN null  ELSE nr_interno_conta_w END  END
			into STRICT	nr_atendimento_w,
				nr_interno_conta_w
			from	atendimento_paciente
			where	nr_atendimento		= Obter_atendimento_conta(nr_interno_conta_w)
			and 	ie_dias_gastos_rn_w	= 'N'	-- parametro de dias para deixar os gastos no atend do RN
			and 	ie_classif_gastos_rn_w  = 'S'   -- parametro da classificacao do setor do RN 
			and	(ie_trat_conta_rn IS NOT NULL AND ie_trat_conta_rn::text <> '')
			and	CASE WHEN ie_trat_conta_rn=DS_MAE_W THEN  obter_se_atendimento_fechado(nr_atendimento_mae)  ELSE 'N' END  = 'N'
			and 	ie_status_acerto_w	= 1
			and (obter_se_gastos_rn(cd_convenio_w, nr_atendimento_w, ie_trat_conta_rn, nr_seq_atepacu_w) = 'N') -- regra de setor para definicao dos gastos RN (OS  244366)
			and 	((IE_GASTOS_RN_ALTA_w = 'N') or 
				((IE_GASTOS_RN_ALTA_w = 'S') and (ie_trat_conta_rn = DS_MAE_W) and (obter_se_atendimento_alta(nr_atendimento_mae) = 'N')) or
				((IE_GASTOS_RN_ALTA_w = 'D') and (ie_trat_conta_rn = DS_MAE_W) and (dt_procedimento_w <= coalesce(to_date(obter_dados_atendimento(nr_atendimento_mae,'DA'),'dd/mm/yyyy hh24:mi:ss'),dt_procedimento_w + 5))));
			exception
			when others then	
				nr_atendimento_w	:= nr_atendimento_w;
				if (ie_transf_gasto_nr_w = 'M') and (ie_status_acerto_w = 1) and (ie_trat_conta_rn_ww IS NOT NULL AND ie_trat_conta_rn_ww::text <> '') then
					nr_interno_conta_w	:= null;
				else			
					nr_interno_conta_w  := nr_interno_conta_w;
				end if;
			end;
		else
			nr_atendimento_w	:= nr_atendimento_w;
			if (ie_transf_gasto_nr_w = 'M') and (ie_status_acerto_w = 1) and (ie_trat_conta_rn_ww IS NOT NULL AND ie_trat_conta_rn_ww::text <> '') then
				nr_interno_conta_w	:= null;
			else			
				nr_interno_conta_w  := nr_interno_conta_w;
			end if;
		end if;
	end;
else
	begin
	select	count(*)
	into STRICT	qt_conta_w
	from	conta_paciente a,
		atendimento_paciente b
	where	a.nr_interno_conta 	= nr_interno_conta_w
	and	a.nr_atendimento	= b.nr_atendimento
	and	a.nr_atendimento	= nr_atendimento_w;
	
	select	CASE WHEN ie_trat_conta_rn_ww=DS_MAE_W THEN  nr_atendimento_mae  ELSE nr_atendimento_w END ,
			CASE WHEN ie_trat_conta_rn_ww=DS_MAE_W THEN  null  ELSE CASE WHEN qt_conta_w=1 THEN  nr_interno_conta_w  ELSE null END  END
	into STRICT	nr_atendimento_w,
			nr_interno_conta_w
	from	atendimento_paciente
	where	nr_atendimento		= nr_atendimento_w
	and	(ie_trat_conta_rn IS NOT NULL AND ie_trat_conta_rn::text <> '')
	and	CASE WHEN ie_trat_conta_rn=DS_MAE_W THEN  obter_se_atendimento_fechado(nr_atendimento_mae)  ELSE 'N' END  = 'N'
	and 	ie_status_acerto_w	= 1;
	exception
	when others then
			nr_atendimento_w	:= nr_atendimento_w;
			nr_interno_conta_w	:= nr_interno_conta_w;
	end;		
end if;


begin
select	campo_numerico(obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'A'))
into STRICT  	qt_idade_w
from 	atendimento_paciente a
where 	a.nr_atendimento  = nr_atendimento_w;
exception
     	when others then
          	qt_idade_w := null;
end;


/*      obter o estabelecimento do atendimento */

begin
select 	a.cd_estabelecimento,
	a.dt_entrada,
	coalesce(a.dt_alta,to_date('01/01/1900 00:00:00','dd/mm/yyyy hh24:mi:ss')),
	coalesce(a.dt_alta,clock_timestamp()),
	a.ie_tipo_atendimento,
	coalesce(a.nr_atend_original,0),
	a.ie_clinica,
	a.ie_carater_inter_sus,
	a.cd_pessoa_fisica,
	b.ie_sexo,
	CASE WHEN coalesce(a.nr_atend_original::text, '') = '' THEN  'N'  ELSE 'S' END  ,
   	trunc(coalesce(a.dt_alta, clock_timestamp()) - a.dt_entrada) qt_dias_internacao,
	a.cd_estabelecimento,
	a.nr_seq_classificacao,
	a.dt_alta
into STRICT  	cd_estabelecimento_w,
	dt_entrada_w,
	dt_alta_w,
	dt_altap_w,
	ie_tipo_atendimento_w,
	nr_atend_original_w,
	ie_clinica_w,
	ie_carater_inter_sus_w,
	cd_pessoa_fisica_w,
	ie_sexo_w,
	ie_atend_retorno_w,
	qt_dias_internacao_w,
	cd_estab_atend_w,
	nr_seq_classif_atend_w,
	dt_alta_preco_w
from 	pessoa_fisica b,
	atendimento_paciente a
where 	a.nr_atendimento     	= nr_atendimento_w
and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica;
exception
    	when others then
      	cd_estabelecimento_w := 1;
end;

select	coalesce(max(ie_data_proc_dias_int),'N')
into STRICT	ie_data_proc_dias_int_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

if (ie_data_proc_dias_int_w = 'S') then
		qt_dias_internacao_w := (dt_procedimento_w - dt_entrada_w);
end if;

select 	wheb_usuario_pck.get_cd_estabelecimento
into STRICT	cd_estab_logado_w
;

select	coalesce(max(ie_estabelecimento_conta), 'A')
into STRICT	ie_estabelecimento_conta_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estab_logado_w;

if (ie_estabelecimento_conta_w = 'L') then
	cd_estabelecimento_w:= cd_estab_logado_w;
end if;

select	coalesce(max(ie_estabelecimento_conta), 'A') ,
	coalesce(max(ie_calculo_taxa_regra), 'C'),
	coalesce(max(ie_regra_honorario_servico), 'N'),
	coalesce(max(ie_preco_inf_glosa_proc), 'N'),
	coalesce(max(ie_convenio_conta_param),'N'),
	coalesce(max(ie_valor_inf_desconto), 'N'),
	coalesce(max(ie_valor_inf_pacote), 'N'),
	coalesce(max(ie_regra_tipo_atend),'A'),
	coalesce(max(ie_regra_conta_terc_serv),'N'),
	coalesce(max(ie_estab_regra_crit_hor),'C'),
	coalesce(max(ie_calcular_proc_auditado),'S'),
	coalesce(max(ie_estab_regra_honorario), 'A')
into STRICT	ie_estabelecimento_conta_w,
	ie_calculo_taxa_regra_w,
	ie_regra_honorario_servico_w,
	ie_preco_inf_glosa_proc_w,
	ie_convenio_conta_param_w,
	ie_valor_inf_desconto_w,
	ie_valor_inf_pacote_w,
	ie_regra_tipo_atend_w,
	ie_regra_conta_terc_serv_w,
	ie_estab_regra_crit_hor_w,
	ie_calcular_proc_auditado_w,
	ie_estab_regra_honorario_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_w;

ie_altera_auditoria_w	:= 'S';

if (ie_calcular_proc_auditado_w = 'N') and (ie_auditoria_w = 'S') then
	ie_altera_auditoria_w	:= 'N';
end if;

if (coalesce(ie_regra_tipo_atend_w,'A') = 'C') then
	begin
	select	coalesce(max(ie_tipo_atend_conta),ie_tipo_atendimento_w)
	into STRICT	ie_tipo_atendimento_w
	from 	conta_paciente
	where 	nr_interno_conta = nr_interno_conta_w;
	exception
		when others then
		ie_tipo_atendimento_w:= ie_tipo_atendimento_w;
	end;
end if;

select	coalesce(max(ie_grava_guia_conta),'N'),
	coalesce(max(ie_considera_regra_data_preco),'N'),
	coalesce(max(ie_verifica_proc_glosa),'N'),
	max(ie_codigo_convenio),
	max(ie_doc_convenio)
into STRICT	ie_grava_guia_conta_w,
	ie_regra_data_preco_w,
	ie_verifica_glosa_w,
	ie_codigo_convenio_w,
	ie_doc_convenio_w
from	convenio_estabelecimento
where	cd_convenio		= cd_convenio_w
and	cd_estabelecimento = cd_estabelecimento_w;


if (nr_interno_conta_w IS NOT NULL AND nr_interno_conta_w::text <> '') and (ie_convenio_conta_param_w	= 'S') then
	
	ie_altera_guia_w:= coalesce(Obter_valor_param_usuario(67, 370, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');
	
	select	coalesce(cd_convenio_calculo,cd_convenio_parametro),
		coalesce(cd_categoria_calculo,cd_categoria_parametro),
		coalesce(CASE WHEN ie_altera_guia_w='S' THEN  null  ELSE cd_autorizacao END ,nr_doc_convenio_w)
	into STRICT	cd_convenio_w,
		cd_categoria_w,
		nr_doc_convenio_w
	from	conta_paciente
	where	nr_interno_conta	= nr_interno_conta_w;
	
	cd_convenio_orig_w		:= cd_convenio_w;
	cd_convenio_calculo_w		:= cd_convenio_w;
	cd_categoria_calculo_w		:= cd_categoria_w;
end if;


if (ie_estabelecimento_conta_w = 'S') then
	begin

	select	max(cd_estabelecimento_base)
	into STRICT	cd_estabelecimento_w
	from	setor_atendimento
	where	cd_setor_atendimento	= cd_setor_atendimento_w;

	end;
end if;


/* obter o tipo de acomodacao do convenio 
substituido por marcus em 3/9/2005
begin
select		nvl(cd_tipo_acomodacao,0),
		cd_empresa,
		cd_plano_convenio,
		cd_usuario_convenio
into		cd_tipo_acomodacao_w	,
		cd_empresa_ref_w,
		cd_plano_w,
		cd_usuario_convenio_w
from		atend_categoria_convenio_v
where		nr_atendimento		= nr_atendimento_w
and		cd_convenio			= cd_convenio_w
and		cd_categoria		= cd_categoria_w;
exception
     		when others then
          	cd_tipo_acomodacao_w := 0;
end;
*/
select	coalesce(obter_dado_atend_cat_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, cd_categoria_w, 'A'), obter_dado_atend_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, 'A')),
	coalesce(obter_dado_atend_cat_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, cd_categoria_w, 'E'), obter_dado_atend_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, 'E')),
	coalesce(obter_dado_atend_cat_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, cd_categoria_w, 'P'), obter_dado_atend_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, 'P')),
	coalesce(obter_dado_atend_cat_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, cd_categoria_w, 'U'), obter_dado_atend_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, 'U')),
	(obter_dados_categ_conv(nr_atendimento_w, 'COB'))::numeric ,
	(obter_dados_categ_conv(nr_atendimento_w, 'DEP'))::numeric ,
	(obter_dados_categ_conv(nr_atendimento_w, 'OC'))::numeric
into STRICT	cd_tipo_acomodacao_w	,
	cd_empresa_ref_w,
	cd_plano_w,
	cd_usuario_convenio_w,
	nr_seq_cobertura_w,
	cd_dependencia_w,
	nr_seq_origem_w
;

select	obter_grupo_receita(cd_estabelecimento_w,
	null,
	cd_procedimento_w,
	ie_origem_proced_w,
	ie_tipo_atendimento_w,
	cd_setor_atendimento_w)
into STRICT	nr_seq_grupo_rec_w
;

begin
select	cd_grupo_proc,
	cd_area_procedimento,
	cd_especialidade
into STRICT	cd_grupo_proc_w,
	cd_area_procedimento_w,
	cd_especialidade_w
from	estrutura_procedimento_v
where	cd_procedimento		= cd_procedimento_w
and	ie_origem_proced	= ie_origem_proced_w;
exception
	when others then
	begin
	cd_grupo_proc_w	:= 0;
	cd_area_procedimento_w	:= 0;
	cd_especialidade_w	:= 0;
	end;
end;


/* rotina nova para gerar conta no estabelecimento do terceiro  - inicio (aaheckler-30/11/10) */

cd_estab_terceiro_w	:= 0;
qt_reg_estab_terc_w	:= 0;

select	count(*)
into STRICT	qt_reg_estab_terc_w
from	regra_conta_terceiro
where	cd_estabelecimento	= cd_estabelecimento_w
and	coalesce(cd_convenio,cd_convenio_w)	= cd_convenio_w
and	coalesce(ie_situacao, 'A')		= 'A';

select	cd_procedencia
into STRICT	cd_procedencia_w
from 	atendimento_paciente
where 	nr_atendimento 	= nr_atendimento_w;

if (qt_reg_estab_terc_w > 0) and (ie_regra_conta_terc_serv_w = 'S') then
	begin
	
	SELECT * FROM obter_estab_regr_conta_terc(
			cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_setor_atendimento_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, cd_procedimento_w, ie_origem_proced_w, 0, 0, 0, 0, cd_plano_w, cd_procedencia_w, cd_medico_executor_w, coalesce(dt_conta_w,dt_procedimento_w), ie_clinica_w, nr_seq_proc_interno_w, cd_estab_terceiro_w, nr_sequencia_regra_w) INTO STRICT cd_estab_terceiro_w, nr_sequencia_regra_w;
			
	if (cd_estab_terceiro_w	<> 0) then
		cd_estabelecimento_w	:= cd_estab_terceiro_w;
	end if;
	
	if (coalesce(cd_estab_terceiro_w,0) <> 0) and (coalesce(cd_estab_terceiro_w,0) <> coalesce(cd_estab_conta_w,0)) and (coalesce(cd_funcao_w,0) = 67) and (ie_status_acerto_w = 1) then
	   nr_interno_conta_w :=  null;	
	end if;
	end;
end if;


/* rotina nova para gerar conta no estabelecimento do terceiro  - final (aaheckler-30/11/10) */

begin
select	coalesce(max(cd_setor_atendimento),0)
into STRICT	cd_setor_atend_prescr_w
from	prescr_medica
where	nr_prescricao = nr_prescricao_w;
exception
when others then
	cd_setor_atend_prescr_w := 0;
end;

/* obter glosa do servico */

SELECT * FROM glosa_procedimento(cd_estabelecimento_w, nr_atendimento_w, dt_procedimento_w, cd_procedimento_w, ie_origem_proced_w, qt_procedimento_w, cd_tipo_acomodacao_w, ie_tipo_atendimento_w, cd_setor_atendimento_w, null, nr_seq_proc_interno_w, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, cd_medico_executor_w, ie_sexo_w, cd_convenio_w, cd_categoria_w, ie_tipo_convenio_w, ie_classif_convenio_w, cd_autorizacao_w, nr_seq_autorizacao_w, qt_autorizada_w, cd_senha_w, nm_responsavel_w, ie_glosa_w, cd_situacao_glosa_w, nr_seq_regra_preco_w, pr_glosa_w, vl_glosa_w, cd_motivo_exc_conta_ww, ie_preco_informado_glosa_w, vl_negociado_glosa_w, ie_autor_particular_w, cd_convenio_glosa_ww, cd_categoria_glosa_ww, nr_seq_ajuste_proc_ww, ie_video_w, null, null, cd_cgc_prestador_w, null, null, nr_seq_cobertura_w, cd_setor_atend_prescr_w, nr_seq_classif_atend_w, nr_seq_grupo_rec_w, cd_dependencia_w, nr_seq_origem_w, nr_seq_classif_medico_w) INTO STRICT cd_convenio_w, cd_categoria_w, ie_tipo_convenio_w, ie_classif_convenio_w, cd_autorizacao_w, nr_seq_autorizacao_w, qt_autorizada_w, cd_senha_w, nm_responsavel_w, ie_glosa_w, cd_situacao_glosa_w, nr_seq_regra_preco_w, pr_glosa_w, vl_glosa_w, cd_motivo_exc_conta_ww, ie_preco_informado_glosa_w, vl_negociado_glosa_w, ie_autor_particular_w, cd_convenio_glosa_ww, cd_categoria_glosa_ww, nr_seq_ajuste_proc_ww;

if (ie_guia_informada_w <> 'S') and
	((nr_doc_convenio_w = '') or (coalesce(nr_doc_convenio_w::text, '') = ''))then
	nr_doc_convenio_w  := cd_autorizacao_w;
end if;
IF (coalesce(ie_status_acerto_w,1) = 1) THEN

	SELECT * FROM Obter_Regra_Senha_Guia_Conta( 	cd_estabelecimento_w, cd_convenio_w, ie_tipo_atendimento_w, ie_doc_autorizacao_w, ie_atualiza_guia_w, ie_atualiza_senha_w, ie_autor_qtde_w) INTO STRICT ie_doc_autorizacao_w, ie_atualiza_guia_w, ie_atualiza_senha_w, ie_autor_qtde_w;

	/* francisco - os 79510 - 06/02/2008 */

	if	((ie_doc_autorizacao_w = 'S') and (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') and (nr_sequencia_prescricao_w IS NOT NULL AND nr_sequencia_prescricao_w::text <> '')) or (ie_doc_autorizacao_w = 'C') then
		SELECT * FROM obter_autor_item_conta(	nr_sequencia_p, null, nr_sequencia_autor_w, nr_seq_proc_autor_w, nr_seq_mat_autor_w, nr_doc_conv_autor_w, cd_senha_autor_w, ie_autorizado_w, ie_autor_qtde_w) INTO STRICT nr_sequencia_autor_w, nr_seq_proc_autor_w, nr_seq_mat_autor_w, nr_doc_conv_autor_w, cd_senha_autor_w, ie_autorizado_w;


		if (nr_sequencia_autor_w IS NOT NULL AND nr_sequencia_autor_w::text <> '') and (nr_seq_proc_autor_w IS NOT NULL AND nr_seq_proc_autor_w::text <> '') then

			update	procedimento_paciente
			set	nr_seq_proc_autor	= nr_seq_proc_autor_w
			where	nr_sequencia		= nr_sequencia_p;

			/* se tiver autorizacao e ainda nao estiver autorizada deve deixar guia e senha aguardando retorno*/

			nr_doc_convenio_w	:= null;
			cd_senha_w		:= null;

			/* se ja foi autorizado, ja insere com guia e senha da autorizacao */

			if (ie_autorizado_w	= 'S') then
				if (ie_atualiza_guia_w	= 'S') then
					nr_doc_convenio_w	:= nr_doc_conv_autor_w;
				end if;
				
				if (ie_atualiza_senha_w	= 'S') then
					cd_senha_w		:= cd_senha_autor_w;
				end if;			
			end if;
		end if;

		/* feito dessa forma para caso o procedimento nem tenha autorizacao, continuar como antes */

		update	procedimento_paciente
		set	nr_doc_convenio		= nr_doc_convenio_w,
			cd_senha		= cd_senha_w
		where	nr_sequencia		= nr_sequencia_p;
	end if;
END IF;

if (ie_estab_regra_honorario_w	= 'C') then
	cd_estab_honorario_w	:= cd_estab_conta_w;
elsif (ie_estab_regra_honorario_w	= 'O') then
	cd_estab_honorario_w	:= cd_estab_atend_w;
else
	cd_estab_honorario_w	:= cd_estabelecimento_w;
end if;

/* obter contas do procedimento Antigo local*/

if	((cd_medico_executor_w IS NOT NULL AND cd_medico_executor_w::text <> '') or (cd_cgc_prestador_w IS NOT NULL AND cd_cgc_prestador_w::text <> '')) and (ie_regra_honorario_servico_w = 'S') then
	SELECT * FROM obter_regra_honorario(cd_estab_honorario_w, cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w, ie_tipo_atendimento_w, cd_setor_atendimento_w, null, null, cd_medico_executor_w, cd_cgc_prestador_w, ie_pacote_w, ie_carater_inter_sus_w, cd_plano_w, cd_regra_honorario_w, ie_conta_honorario_w, ie_calcula_honorario_w, cd_cgc_honorario_w, cd_pessoa_honorario_w, nr_seq_criterio_w, cd_especialidade_medica_w, null, null, ie_clinica_w, cd_empresa_ref_w, nr_seq_classif_medico_w, cd_procedencia_w, ie_doc_executor_w, cd_cbo_w, nr_seq_proc_interno_w, nr_seq_exame_w) INTO STRICT cd_regra_honorario_w, ie_conta_honorario_w, ie_calcula_honorario_w, cd_cgc_honorario_w, cd_pessoa_honorario_w, nr_seq_criterio_w;
end if;


if (cd_estab_atend_w	<> cd_estabelecimento_w) and (ie_estabelecimento_conta_w = 'S') and (ie_status_acerto_w = 1)	then	
	nr_interno_conta_w	:= null;
end if;

if (ie_doc_convenio_w = 'G') and (coalesce(nr_doc_convenio_w, DS_NAO_INFORMADO_W) = DS_NAO_INFORMADO_W) then

	begin
	select	b.nr_doc_convenio
	into STRICT	nr_doc_convenio_w
	from	atendimento_paciente a,
		atend_categoria_convenio b
	where	a.nr_atendimento	= b.nr_atendimento
	and	a.nr_atendimento	= nr_atendimento_w
	and	b.nr_seq_interno	= Obter_Atecaco_Atend_conv(a.nr_atendimento,cd_convenio_w)  LIMIT 1;	
	exception
	when others then
		nr_doc_convenio_w	:= null;
	end;
		
end if;

/*      identificar a conta que o servico deve ser incluido */


/*      identificar a conta que o servico deve ser incluido */

if (coalesce(nr_interno_conta_w::text, '') = '') 			or (cd_convenio_w <> cd_convenio_orig_w)	then
		ie_identifica_conta_proc_w := 'S';
else
	ie_identifica_conta_proc_w := 'N';
end if;

if (ie_identifica_conta_proc_w = 'S')	 then
	begin
	
	ie_item_fora_periodo_w := obter_se_item_fora_periodo(		cd_estabelecimento_w, nr_atendimento_w, cd_convenio_w, cd_categoria_w, nm_usuario_p, dt_procedimento_w, dt_entrada_w, dt_alta_w, nr_doc_convenio_w, cd_setor_atendimento_w, nr_seq_pq_proc_w, ie_item_fora_periodo_w);

	if ie_item_fora_periodo_w = 'N' then

		SELECT * FROM obter_conta_paciente(	cd_estabelecimento_w, nr_atendimento_w, cd_convenio_w, cd_categoria_w, nm_usuario_p, dt_procedimento_w, dt_entrada_w, dt_alta_w, nr_doc_convenio_w, cd_setor_atendimento_w, nr_seq_pq_proc_w, dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w) INTO STRICT dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w;
	end if;
	
	end;
end if;

if (coalesce(cd_convenio_calculo_w::text, '') = '') then
	begin
	select	cd_convenio_calculo,
			cd_categoria_calculo
	into STRICT		cd_convenio_calculo_w,
			cd_categoria_calculo_w
	from 		conta_paciente
	where		nr_interno_conta	= nr_interno_conta_w;
	exception
     			when others then
			begin
			cd_convenio_calculo_w	:= cd_convenio_w;
 			cd_categoria_calculo_w	:= cd_categoria_w;
			end;
	end;
end if;
if	coalesce(cd_convenio_calculo_w::text, '') = '' then
	cd_convenio_calculo_w	:= cd_convenio_w;
end if;

if	coalesce(cd_categoria_calculo_w::text, '') = '' then
	cd_categoria_calculo_w	:= cd_categoria_w;
end if;

begin
select	max(CASE WHEN ie_status_acerto=1 THEN coalesce(dt_conta_definitiva,clock_timestamp())  ELSE coalesce(dt_conta_definitiva,dt_conta_w) END ),
	max(dt_periodo_inicial),
	max(dt_periodo_final)
into STRICT	dt_conta_definitiva_w,
	dt_periodo_inicial_w,
	dt_periodo_final_w
from 	conta_paciente
where 	nr_interno_conta = nr_interno_conta_w;
exception
    	when others then
      	dt_conta_definitiva_w:= dt_conta_w;
	dt_periodo_inicial_w	:= dt_periodo_inicial_w;
	dt_periodo_final_w	:= clock_timestamp();
end;

select	obter_regra_data_preco('P',cd_convenio_calculo_w, dt_entrada_w, dt_conta_w, dt_alta_preco_w, dt_conta_definitiva_w, null, dt_periodo_inicial_w, dt_periodo_final_w)
into STRICT	dt_preco_w
;
/*      obter os valores do servico             */

if (coalesce(nr_seq_regra_preco_w,0) <> 0) then
	begin
	update procedimento_paciente
	set	vl_procedimento = 0
	where	nr_sequencia = nr_sequencia_p;

	vl_servico_w := calcular_valor_proc_regra(nr_seq_regra_preco_w, nr_interno_conta_w, nr_seq_proc_princ_w, nm_usuario_p, cd_setor_atendimento_w, vl_servico_w);
	end;	
else
	CALL Grava_log_preco_pck.set_ie_gravar_log('S');
	SELECT * FROM define_preco_servico(cd_estabelecimento_w, cd_convenio_calculo_w, cd_categoria_calculo_w, dt_preco_w, cd_procedimento_w, cd_setor_atendimento_w, ie_tipo_atendimento_w, cd_tipo_acomodacao_w, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, ie_sexo_w, vl_servico_w, nr_seq_ajuste_proc_def_w, ie_atend_retorno_w, qt_dias_internacao_w, qt_idade_w, nr_seq_proc_interno_w, nr_sequencia_p, cd_cgc_prestador_w, ie_carater_inter_sus_w, nr_seq_cobertura_w, nr_seq_classif_atend_w, cd_dependencia_w, nr_seq_grupo_rec_w, nr_seq_origem_w, nr_seq_classif_medico_w, cd_medico_executor_w) INTO STRICT vl_servico_w, nr_seq_ajuste_proc_def_w;
	CALL Grava_log_preco_pck.set_ie_gravar_log('N');
end if;

if  coalesce(vl_servico_w::text, '') = '' then
    vl_servico_w := 0;
end if;

if (ie_valor_informado_w 	= 'N') 	and (vl_servico_w 		= 0) 		then
	begin
	ie_glosa_zerado_w := obter_parametro_geral(2, ie_glosa_zerado_w);
	if (ie_glosa_zerado_w	= 'S') and (coalesce(ie_glosa_w,'L')	<> 'H') and (coalesce(ie_glosa_w,'L')	<> 'E') and (coalesce(ie_glosa_w,'L')    <> 'W') and (coalesce(ie_glosa_w,'L')	<> '3') then
		begin

		/* ricardo 04/11/2006 - os43964

		obter_convenio_particular(cd_estabelecimento_w, cd_convenio_w,cd_categoria_w); */
		SELECT * FROM obter_convenio_particular_pf(cd_estabelecimento_w, cd_convenio_w, cd_pessoa_fisica_w, dt_procedimento_w, cd_convenio_w, cd_categoria_w) INTO STRICT cd_convenio_w, cd_categoria_w;
		select	obter_regra_data_preco('P',cd_convenio_w, dt_entrada_w, dt_conta_w, dt_alta_preco_w,  dt_conta_definitiva_w, null,dt_periodo_inicial_w, dt_periodo_final_w)
		into STRICT	dt_preco_w
		;
		CALL Grava_log_preco_pck.set_ie_gravar_log('S');
		SELECT * FROM define_preco_servico(
			cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, dt_preco_w, cd_procedimento_w, cd_setor_atendimento_w, ie_tipo_atendimento_w, cd_tipo_acomodacao_w, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, ie_sexo_w, vl_servico_w, nr_seq_ajuste_proc_def_w, ie_atend_retorno_w, qt_dias_internacao_w, qt_idade_w, nr_seq_proc_interno_w, nr_sequencia_p, cd_cgc_prestador_w, ie_carater_inter_sus_w, nr_seq_cobertura_w, nr_seq_classif_atend_w, cd_dependencia_w, nr_seq_grupo_rec_w, nr_seq_origem_w, nr_seq_classif_medico_w, cd_medico_executor_w) INTO STRICT vl_servico_w, nr_seq_ajuste_proc_def_w;
		CALL Grava_log_preco_pck.set_ie_gravar_log('N');
		SELECT * FROM obter_conta_paciente(
			cd_estabelecimento_w, nr_atendimento_w, cd_convenio_w, cd_categoria_w, nm_usuario_p, dt_procedimento_w, dt_entrada_w, dt_alta_w, nr_doc_convenio_w, cd_setor_atendimento_w, nr_seq_pq_proc_w, dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w) INTO STRICT dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w;
		end;
	end if;
	end;
end if;

vl_proced_glosa_w := vl_servico_w;

select 	CASE WHEN ie_data_adic_hor_w='S' THEN  dt_procedimento_w  ELSE dt_conta_w END
into STRICT	dt_adic_hor_w
;

if (ie_regra_data_preco_w = 'S')then
	dt_adic_hor_w := dt_preco_w;
end if;

cd_estab_adic_horario_w :=cd_estabelecimento_w;

if (ie_estab_regra_crit_hor_w = 'A') then
	cd_estab_adic_horario_w :=  cd_estab_atend_w;
end if;

/* tratar adicional de horario */

SELECT * FROM define_adicional_horario(cd_estab_adic_horario_w, cd_procedimento_w, ie_origem_proced_w, cd_convenio_calculo_w, cd_categoria_calculo_w, cd_setor_atendimento_w, ie_tipo_atendimento_w, ie_carater_inter_sus_w, dt_adic_hor_w, null, ie_video_w, dt_conta_w, dt_conta_w, cd_tipo_acomodacao_w, cd_medico_executor_w, cd_plano_w, dt_entrada_w, tx_adic_medico_w, tx_adic_anestesista_w, tx_adic_auxiliares_w, tx_adic_custo_operacional_w, tx_adic_materiais_w, tx_adic_procedimento_w, vl_adic_proc_w, vl_adic_medico_w, cd_proced_calculo_horario_w, ie_origem_proced_horario_w, nr_seq_adic_w, ie_clinica_w, null, nr_seq_proc_interno_w) INTO STRICT tx_adic_medico_w, tx_adic_anestesista_w, tx_adic_auxiliares_w, tx_adic_custo_operacional_w, tx_adic_materiais_w, tx_adic_procedimento_w, vl_adic_proc_w, vl_adic_medico_w, cd_proced_calculo_horario_w, ie_origem_proced_horario_w, nr_seq_adic_w;
	
	
if (coalesce(nr_seq_adic_w,0) > 0) then

	if (OBTER_SE_DISPENSA_ADIC_HOR(nr_sequencia_p) = 'S') then

		tx_adic_medico_w 		:= 1;
		tx_adic_anestesista_w 		:= 1;
		tx_adic_auxiliares_w		:= 1;
		tx_adic_custo_operacional_w	:= 1;
		tx_adic_materiais_w		:= 1;
		tx_adic_procedimento_w		:= 1;
		vl_adic_proc_w			:= 0;
		vl_adic_medico_w		:= 0;
		cd_proced_calculo_horario_w 	:= null;
		ie_origem_proced_horario_w	:= null;
		nr_seq_adic_w 			:= null;
		
	end if;
end if;		
	
if (tx_adic_procedimento_w	> 1) then
	tx_hora_extra_w	:= tx_adic_procedimento_w;
end if;
	
	
	
SELECT 	MAX(coalesce(Grava_log_calculo_pck.get_ie_gravar_log,'N'))
INTO STRICT	ie_gravar_log_w
;

if (coalesce(ie_gravar_log_w,'N') = 'S') then
	
	if (coalesce(nr_seq_adic_w,0) > 0) then
		CALL Gravar_log_calculo_proc(cd_procedimento_w, ie_origem_proced_w, nr_sequencia_p, cd_convenio_w, cd_categoria_w, wheb_mensagem_pck.get_texto(802796,'nr_seq_adic_w=' || nr_seq_adic_w), ie_gravar_log_w);
	else
		CALL Gravar_log_calculo_proc(cd_procedimento_w, ie_origem_proced_w, nr_sequencia_p, cd_convenio_w, cd_categoria_w, wheb_mensagem_pck.get_texto(802794), ie_gravar_log_w);
	end if;
end if;
	
if (coalesce(vl_adic_proc_w::text, '') = '') then
	vl_adic_proc_w	:= 0;
end if;

if (coalesce(nr_seq_adic_w,0) > 0) then
	vl_servico_w := (tx_adic_procedimento_w * (vl_adic_proc_w + vl_servico_w));
end if;

/* tratar retorno do paciente */

if (nr_atend_original_w	> 0) 		and (ie_valor_informado_w	<> 'S') 	then
	begin
	
	select	max(dt_entrada)
	into STRICT	dt_entrada_original_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atend_original_w;
	
	tx_retorno_w := obter_regra_retorno(cd_estabelecimento_w, cd_convenio_calculo_w, cd_categoria_calculo_w, cd_procedimento_w, ie_origem_proced_w, dt_conta_w, ie_tipo_atendimento_w, cd_setor_atendimento_w, null, tx_retorno_w, round(dt_entrada_w - dt_entrada_original_w));
	
	vl_servico_w	:= (vl_servico_w * tx_retorno_w);
	end;
end if;

/* buscar estrutura da conta */

cd_estrutura_w	:= 0;
SELECT * FROM obter_estrut_conta_proc(
			cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, cd_plano_w, '', cd_regra_honorario_w, nr_sequencia_p, cd_setor_atendimento_w, ie_tipo_atendimento_w, cd_estabelecimento_w, cd_especialidade_medica_w, cd_categoria_w, dt_procedimento_w, null, cd_estrutura_w, cd_estrutura_honor_w) INTO STRICT cd_estrutura_w, cd_estrutura_honor_w;
if (cd_estrutura_w	> 0) then
	ie_emite_conta_w	:= cd_estrutura_w;
end if;

SELECT * FROM obter_taxa_qtde_exec(cd_estabelecimento_w, nr_sequencia_p, cd_convenio_w, cd_categoria_w, dt_conta_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, qt_procedimento_w, null, cd_regra_honorario_w, null, tx_procedimento_w, tx_custo_operacional_w, tx_medico_w, tx_medico_w, tx_medico_w) INTO STRICT tx_procedimento_w, tx_custo_operacional_w, tx_medico_w, tx_medico_w, tx_medico_w;

/*      calcular taxa do servico */

vl_servico_w	:= vl_servico_w * tx_procedimento_w/100;


/*      atualiza porte do procedimento principal */

if (nr_seq_proc_princ_w IS NOT NULL AND nr_seq_proc_princ_w::text <> '') then
	begin
	select qt_porte_anestesico,
		 cd_procedimento
	into STRICT	 qt_porte_anestesico_w,
		 cd_procedimento_princ_w
	from	 procedimento_paciente
	where	 nr_sequencia = nr_seq_proc_princ_w;
	exception
    		when others then
      	qt_porte_anestesico_w := qt_porte_anestesico_w;
	end;
end if;	



/* fabricio em 25/06/2008	os 98081 */

select 	coalesce(max(cd_proc_referencia),0),
	coalesce(max(ie_origem_proc_refer),1)
into STRICT	cd_proc_referencia_w,
	ie_origem_proc_refer_w
from 	regra_ajuste_proc
where 	nr_sequencia = nr_seq_ajuste_proc_ww;

select	count(*)
into STRICT	qt_reg_ajuste_item_ref_w
from	regra_ajuste_item_ref
where	nr_seq_regra_ajuste_proc = nr_seq_ajuste_proc_ww;

if (cd_proc_referencia_w > 0) or (qt_reg_ajuste_item_ref_w > 0) then
	
	if (cd_proc_referencia_w > 0) then
		
		if (ie_glosa_w = 'U') then -- Mesma prescricao
			select 	count(*)
			into STRICT	qt_proc_ref_w
			from 	procedimento_paciente
			where 	cd_procedimento = cd_proc_referencia_w
			and 	ie_origem_proced = ie_origem_proc_refer_w
			and 	nr_prescricao = coalesce(nr_prescricao_w,0)
			and 	nr_interno_conta = nr_interno_conta_w
			and 	coalesce(nr_prescricao,0) > 0
			and	nr_sequencia <> nr_sequencia_p
			and 	coalesce(cd_motivo_exc_conta::text, '') = '';
		elsif (ie_glosa_w = '5') then -- Mesmo dia
			select 	count(*)
			into STRICT	qt_proc_ref_w
			from 	procedimento_paciente
			where 	cd_procedimento = cd_proc_referencia_w
			and 	ie_origem_proced = ie_origem_proc_refer_w
			and 	nr_interno_conta = nr_interno_conta_w
            and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento_w)
			and	nr_sequencia <> nr_sequencia_p
			and 	coalesce(cd_motivo_exc_conta::text, '') = '';
		else
			select 	count(*)
			into STRICT	qt_proc_ref_w
			from 	procedimento_paciente
			where 	cd_procedimento = cd_proc_referencia_w
			and 	ie_origem_proced = ie_origem_proc_refer_w
			and 	nr_interno_conta = nr_interno_conta_w
			and	nr_sequencia <> nr_sequencia_p
			and 	coalesce(cd_motivo_exc_conta::text, '') = '';
		end if;
		
	else
	
		qt_proc_ref_w	:= 0;
	
		open C01;
		loop
		fetch C01 into	
			cd_mat_item_ref_w,
			cd_proc_item_ref_w,
			ie_origem_proc_item_ref_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			
			if (qt_proc_ref_w = 0) then
			
				if (ie_glosa_w = 'U') then -- Mesma prescricao
					if (coalesce(cd_mat_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	material_atend_paciente
						where 	cd_material = cd_mat_item_ref_w
						and 	nr_prescricao = coalesce(nr_prescricao_w,0)
						and 	nr_interno_conta = nr_interno_conta_w
						and 	coalesce(nr_prescricao,0) > 0
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					elsif (coalesce(cd_proc_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	procedimento_paciente
						where 	cd_procedimento = cd_proc_item_ref_w
						and 	ie_origem_proced = ie_origem_proc_item_ref_w
						and 	nr_prescricao = coalesce(nr_prescricao_w,0)
						and 	nr_interno_conta = nr_interno_conta_w
						and 	coalesce(nr_prescricao,0) > 0
						and	nr_sequencia <> nr_sequencia_p
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					end if;
				elsif (ie_glosa_w = '5') then -- Mesmo dia
					if (coalesce(cd_mat_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	material_atend_paciente
						where 	cd_material = cd_mat_item_ref_w
						and 	nr_interno_conta = nr_interno_conta_w
       					and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atendimento) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento_w)
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					elsif (coalesce(cd_proc_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	procedimento_paciente
						where 	cd_procedimento = cd_proc_item_ref_w
						and 	ie_origem_proced = ie_origem_proc_item_ref_w
						and 	nr_interno_conta = nr_interno_conta_w
						and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_procedimento_w)
						and	nr_sequencia <> nr_sequencia_p
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					end if;
				else				
					if (coalesce(cd_mat_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	material_atend_paciente
						where 	cd_material = cd_mat_item_ref_w
						and 	nr_interno_conta = nr_interno_conta_w
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					elsif (coalesce(cd_proc_item_ref_w,0) > 0) then
						select 	count(*)
						into STRICT	qt_proc_ref_w
						from 	procedimento_paciente
						where 	cd_procedimento = cd_proc_item_ref_w
						and 	ie_origem_proced = ie_origem_proc_item_ref_w
						and 	nr_interno_conta = nr_interno_conta_w
						and	nr_sequencia <> nr_sequencia_p
						and 	coalesce(cd_motivo_exc_conta::text, '') = '';
					end if;
				end if;
			
			end if;
			
			end;
		end loop;
		close C01;
	
	end if;
	
	if (ie_glosa_w = 'J') then

		if (qt_proc_ref_w = 0) then

			select	max(cd_motivo_exc_conta)
			into STRICT	cd_motivo_exc_conta_w
			from	parametro_faturamento
			where	cd_estabelecimento	= cd_estabelecimento_w;

			nr_seq_conta_origem_w		:= nr_interno_conta_w;
			nr_interno_conta_w		:= null;
			cd_motivo_exc_conta_w		:= cd_motivo_exc_conta_w;

		end if;

	end if;
	
	if (ie_glosa_w = 'N') then

		if (qt_proc_ref_w > 0) then

			select	max(cd_motivo_exc_conta)
			into STRICT	cd_motivo_exc_conta_w
			from	parametro_faturamento
			where	cd_estabelecimento	= cd_estabelecimento_w;

			nr_seq_conta_origem_w		:= nr_interno_conta_w;
			nr_interno_conta_w		:= null;
			cd_motivo_exc_conta_w		:= cd_motivo_exc_conta_w;

		end if;

	end if;
	
	if (ie_glosa_w = '2') then
	
		if (qt_proc_ref_w = 0) then

			select	sum(qt_item_conta)
			into STRICT	qt_item_conta_w
			from (SELECT	count(*) qt_item_conta
				from	procedimento_paciente
				where	nr_interno_conta = nr_interno_conta_w
				
union all

				SELECT	count(*) qt_item_conta
				from	material_atend_paciente
				where	nr_interno_conta = nr_interno_conta_w	) alias5;
			
			if (qt_item_conta_w = 0) then
				begin
					delete	from conta_paciente
					where	nr_interno_conta = nr_interno_conta_w;
				exception
					when others then
					nr_interno_conta_w	:= nr_interno_conta_w;
				end;
			end if;
		
			SELECT * FROM obter_convenio_particular_pf(cd_estabelecimento_w, cd_convenio_w, cd_pessoa_fisica_w, dt_procedimento_w, cd_convenio_w, cd_categoria_w) INTO STRICT cd_convenio_w, cd_categoria_w;
		
			SELECT * FROM obter_conta_paciente(cd_estabelecimento_w, nr_atendimento_w, cd_convenio_w, cd_categoria_w, nm_usuario_p, dt_procedimento_w, dt_entrada_w, dt_alta_w, nr_doc_convenio_w, cd_setor_atendimento_w, nr_seq_pq_proc_w, dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w) INTO STRICT dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w;
		
		end if;
	
	end if;
	
	if (ie_glosa_w = 'U') then -- Mesma prescricao
		if (qt_proc_ref_w > 0) then

			select	max(cd_motivo_exc_conta)
			into STRICT	cd_motivo_exc_conta_w
			from	parametro_faturamento
			where	cd_estabelecimento	= cd_estabelecimento_w;

			nr_seq_conta_origem_w		:= nr_interno_conta_w;
			nr_interno_conta_w		:= null;
			cd_motivo_exc_conta_w		:= cd_motivo_exc_conta_w;

		end if;

	end if;
	
	if (ie_glosa_w = '5') then
		begin
	
		if (qt_proc_ref_w > 0) then
			select	max(cd_motivo_exc_conta)
			into STRICT	cd_motivo_exc_conta_w
			from	parametro_faturamento
			where	cd_estabelecimento	= cd_estabelecimento_w;

			nr_seq_conta_origem_w		:= nr_interno_conta_w;
			nr_interno_conta_w		:= null;
			cd_motivo_exc_conta_w		:= cd_motivo_exc_conta_w;
		end if;
		
		end;
	end if;
	
	if (ie_glosa_w = 'O') then -- Zerar somente se proced referencia em conta
		
		if (qt_proc_ref_w > 0) then		
			vl_servico_w			:= 0;
			vl_servico_orig_w		:= 0;
		end if;
		
	end if;
	
	if (qt_proc_ref_w = 0) and (ie_glosa_w <> 'O') then
		ie_glosa_w:= 'L';
	end if;
end if;


/*      tratar casos em que o convenio nao paga e portanto devem ser zerados */

if (ie_glosa_w = 'Z') then
	select	max(cd_motivo_exc_conta)
	into STRICT	cd_motivo_exc_conta_w
	from parametro_faturamento
	where	cd_estabelecimento	= cd_estabelecimento_w;
	nr_seq_conta_origem_w		:= nr_interno_conta_w;
	nr_interno_conta_w		:= null;
	dt_acerto_conta_w			:= null;
	vl_servico_w			:= 0;
	vl_servico_orig_w			:= 0;
end if;
/*      tratar casos em que o se deseja excluir o servico da conta com os valores calculados */

if (ie_glosa_w = 'E') and
	((cd_situacao_glosa_ww = 0 AND ie_verifica_glosa_w = 'S') or (ie_verifica_glosa_w = 'N')) then
	cd_motivo_exc_conta_w	:= cd_motivo_exc_conta_ww;
	nr_seq_conta_origem_w	:= nr_interno_conta_w;
	nr_interno_conta_w		:= null;		
elsif (ie_glosa_w = 'E') and (cd_situacao_glosa_ww = 8) and (ie_verifica_glosa_w = 'S') then
	cd_situacao_glosa_w := cd_situacao_glosa_ww;
end if;

/* ricardo 29/01/2007 - zerar o item e deixar na propria conta */

if (ie_glosa_w = 'H') then
	vl_servico_orig_w		:= 0;
	ie_valor_informado_w		:= 'S';
end if;

if (ie_valor_informado_w = 'N') and (coalesce(ie_preco_informado_glosa_w,'N')	= 'S') and (coalesce(vl_negociado_glosa_w,0) > 0) and (ie_preco_inf_glosa_proc_w = 'S') and (ie_glosa_w <> 'L') then
	vl_servico_orig_w 	:= vl_negociado_glosa_w * qt_procedimento_w;
end if;
if (ie_glosa_w	= 'F') then
	ie_valor_informado_w	:= 'S';
	CALL Grava_log_preco_pck.set_ie_gravar_log('S');
	define_preco_servico	/* os 112450  fabricio em  13/10/2008, estava jogando nulo o valor do procedimento ao inves de buscar o valor do convenio de origem */
                    	(cd_estabelecimento_w,  cd_convenio_orig_w, cd_categoria_orig_w, dt_preco_w, cd_procedimento_w, cd_setor_atendimento_w,
			ie_tipo_atendimento_w,  cd_tipo_acomodacao_w, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w,
			ie_sexo_w, vl_servico_orig_w, nr_seq_ajuste_proc_def_w, ie_atend_retorno_w, qt_dias_internacao_w, qt_idade_w,nr_seq_proc_interno_w,nr_sequencia_p,cd_cgc_prestador_w,
			ie_carater_inter_sus_w,nr_seq_cobertura_w, nr_seq_classif_atend_w, cd_dependencia_w, nr_seq_grupo_rec_w,nr_seq_origem_w,
			nr_seq_classif_medico_w, cd_medico_executor_w);	
	CALL Grava_log_preco_pck.set_ie_gravar_log('N');
	vl_servico_orig_w	:= vl_servico_orig_w * qt_procedimento_w; /*felipe martini em 12/11/2008 os116714*/
	
end if;
vl_custo_operacional_w	:=0;
if (ie_conta_honorario_w 		in ('T')) and /*felipe martini em 21/10/2008 os113746 */
	(ie_regra_honorario_servico_w	= 'S') then
	vl_custo_operacional_w	:= vl_servico_w;
	
	if ie_valor_informado_w = 'S' then
		vl_custo_operacional_w:=vl_servico_orig_w;
		vl_servico_orig_w:=0;
	end if;
	
	vl_servico_w	:= 0;
end if;

if (ie_grava_guia_conta_w	= 'S') then
	nr_doc_convenio_w	:= null;
	
	if (coalesce(ie_tiss_tipo_guia_w::text, '') = '') then /*lhalves OS342409 em 27/09/2011 */
		select	max(ie_entra_conta),
			max(ie_repassa_medico)
		into STRICT	ie_entra_conta_w,
			ie_repassa_medico_w
		from	regra_honorario
		where	cd_regra	= cd_regra_honorario_w;
	
		ie_tiss_tipo_guia_w	:= tiss_obter_guia_proc(ie_tipo_atendimento_w,
								cd_procedimento_w,
								ie_origem_proced_w,
								ie_entra_conta_w,
								ie_repassa_medico_w,
								null);
	end if;	
	
	SELECT * FROM tiss_obter_guia(	coalesce(ie_tiss_tipo_guia_w,'7'), nr_interno_conta_w, nr_doc_convenio_w, 'N', null, null, ie_responsavel_credito_w, null, null, ie_guia_w, null, null, null, null, null, null, null, dt_procedimento_w, null, null, nr_sequencia_p, null, cd_procedimento_w, ie_origem_proced_w, null) INTO STRICT nr_doc_convenio_w, ie_guia_w;
end if;	

/* ROTINA DE ARREDONDAMENTO, USADO PELO CONVeNIO IPE   --->>    INICIO  <<----- */

ie_valor_arredondado_w:= 'N';
begin
select 	coalesce(max(ie_regra_arredondamento_tx),'N'),
	coalesce(max(ie_ordem_arred_serv),'MA')
into STRICT	ie_regra_arredondamento_tx_w,
	ie_ordem_arred_serv_w
from 	parametro_faturamento
where 	cd_estabelecimento = cd_estabelecimento_W;
exception
	when others then
		ie_regra_arredondamento_tx_w:= 'N';
end;

if (ie_regra_arredondamento_tx_w = 'S') then
	
	select	max(ie_arredondamento)
	into STRICT	ie_tipo_rounded_w
	from	convenio_estabelecimento
	where	cd_convenio	  	= cd_convenio_w
	and	cd_estabelecimento	= cd_estabelecimento_W;
	
	if (ie_tipo_rounded_w = 'R') then
	
		select 	obter_regra_arredondamento(cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_w,
				dt_procedimento_w, 'P', 1)
		into STRICT	ie_tipo_rounded_w
		;
		
	end if;	
	
	if (ie_tipo_rounded_w IS NOT NULL AND ie_tipo_rounded_w::text <> '') and (ie_valor_informado_w = 'N') then
		
		if (coalesce(ie_ordem_arred_serv_w,'MA') = 'MA') then /* Multiplicar pela qtde e depois aplicar o arredondamento */
		
			ie_valor_arredondado_w:= 'S';
			vl_servico_w:= vl_servico_w * qt_procedimento_w;
			vl_servico_w := arredondamento(vl_servico_w, 2, ie_tipo_rounded_w);
			
		elsif (coalesce(ie_ordem_arred_serv_w,'MA') = 'AM') then /* Aplicar o arredondamento  e depois multiplicar pela quantidade */
			
			ie_valor_arredondado_w:= 'S';
			vl_servico_w := arredondamento(vl_servico_w, 2, ie_tipo_rounded_w);
			vl_servico_w:= vl_servico_w * qt_procedimento_w;		
			
		end if;
		
	end if;
	
end if;
/* ROTINA DE ARREDONDAMENTO, USADO PELO CONVeNIO IPE   --->>    FIM  <<----- */

if (ie_glosa_w = '3') and
	(((ie_valor_informado_w = 'S') and (coalesce(vl_servico_orig_w,0) = 0)) or
	 ((ie_valor_arredondado_w = 'S' AND vl_servico_w = 0) or ((ie_valor_arredondado_w = 'N') and ((vl_servico_w * qt_procedimento_w) = 0)))) then
	
	select	sum(qt_item_conta)
	into STRICT	qt_item_conta_w
	from (SELECT	count(*) qt_item_conta
		from	procedimento_paciente
		where	nr_interno_conta = nr_interno_conta_w
		
union all

		SELECT	count(*) qt_item_conta
		from	material_atend_paciente
		where	nr_interno_conta = nr_interno_conta_w	) alias15;
	
	if (qt_item_conta_w = 0) then
		begin
			delete	from conta_paciente
			where	nr_interno_conta = nr_interno_conta_w;
		exception
			when others then
			nr_interno_conta_w	:= nr_interno_conta_w;
		end;
	end if;
	
	cd_convenio_w	:= coalesce(cd_convenio_glosa_ww, cd_convenio_w);
	cd_categoria_w	:= coalesce(cd_categoria_glosa_ww, cd_categoria_w);
	
	SELECT * FROM obter_conta_paciente(cd_estabelecimento_w, nr_atendimento_w, cd_convenio_w, cd_categoria_w, nm_usuario_p, dt_procedimento_w, dt_entrada_w, dt_alta_w, nr_doc_convenio_w, cd_setor_atendimento_w, nr_seq_pq_proc_w, dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w) INTO STRICT dt_acerto_conta_w, nr_interno_conta_w, cd_convenio_calculo_w, cd_categoria_calculo_w;
end if;

/* Obter contas do procedimento Novo local OS 203370*/

begin

select	coalesce(max(ie_tipo_convenio),0),
	max(ie_classif_contabil)
into STRICT	ie_tipo_convenio_aux2_w,
	ie_classif_convenio_w
from	convenio
where	cd_convenio	= cd_convenio_w;

if (coalesce(nr_seq_proc_pacote_w,0) <> 0) then
	ie_regra_pacote_ctb_w	:= 'S';
end if;

if (ie_tipo_convenio_w = 3) and (ie_origem_proced_w <> 7) then

	begin
	/*APAC*/

	ie_complexidade_sus_w	:= substr(sus_obter_dados_apac_conta(nr_interno_conta_w, 'CX','C'),1,2);
	ie_tipo_financ_sus_w	:= substr(sus_obter_dados_apac_conta(nr_interno_conta_w, 'TF','C'),1,4);
	/*AIH*/

	if (coalesce(ie_complexidade_sus_w::text, '') = '') and (coalesce(ie_tipo_financ_sus_w::text, '') = '') then
		
		SELECT * FROM sus_obter_complex_financ_aih(nr_interno_conta_w, ie_complexidade_sus_w, ie_tipo_financ_sus_w) INTO STRICT ie_complexidade_sus_w, ie_tipo_financ_sus_w;
		
		/*ie_complexidade_sus_w	:= substr(sus_obter_complexidade_aih(nr_interno_conta_w),1,2);
		ie_tipo_financ_sus_w	:= substr(sus_obter_tipo_financ_aih(nr_interno_conta_w),1,4); */
		if (coalesce(ie_complexidade_sus_w::text, '') = '') and (coalesce(ie_tipo_financ_sus_w::text, '') = '') then
			
			select	max(ie_complexidade),
				max(ie_tipo_financiamento)
			into STRICT	ie_complexidade_sus_w,
				ie_tipo_financ_sus_w
			from	sus_aih_unif
			where	nr_interno_conta	= nr_interno_conta_w;
			
		end if;
		

	end if;
	/*Demais procedimentos*/

	if (coalesce(ie_complexidade_sus_w::text, '') = '') and (coalesce(ie_tipo_financ_sus_w::text, '') = '') then
			select	ie_complexidade,
				ie_tipo_financiamento
			into STRICT	ie_complexidade_sus_w,
				ie_tipo_financ_sus_w
			from	sus_procedimento
			where	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w  LIMIT 1;
	end if;
	exception when others then
		ie_complexidade_sus_w	:= null;
		ie_tipo_financ_sus_w	:= null;
	end;

end if;

cd_sequencia_parametro_w := null;

SELECT * FROM define_conta_procedimento(cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, 1, ie_clinica_w, cd_setor_atendimento_w, ie_classif_convenio_w, ie_tipo_atendimento_w, ie_tipo_convenio_aux2_w, cd_convenio_w, cd_categoria_w, dt_entrada_w, cd_conta_contabil_w, cd_centro_custo_w, cd_plano_w, ie_regra_pacote_ctb_w, ie_complexidade_sus_w, ie_tipo_financ_sus_w, null, null, null, null, null, nr_seq_proc_interno_w) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
	
cd_sequencia_parametro_w:= philips_contabil_pck.get_parametro_conta_contabil;

end;

qt_glosa_perc_w:= 0;
if (ie_glosa_w = 'W') then
	select 	count(*)
	into STRICT	qt_glosa_perc_w
	from 	procedimento_paciente
	where 	nr_atendimento = nr_atendimento_w
	and 	nr_sequencia   = nr_seq_proc_princ_w
	and 	qt_procedimento_w = 0
	and 	cd_situacao_glosa = 8;
end if;

-- OS 219219
if (ie_glosa_w = 'W') and
	(((ie_valor_informado_w = 'S') and (coalesce(vl_servico_orig_w,0) = 0)) or 
	 ((ie_valor_arredondado_w = 'S' AND vl_servico_w = 0) or ((ie_valor_arredondado_w = 'N') and ((vl_servico_w * qt_procedimento_w) = 0) and (qt_glosa_perc_w = 0)))) then
	cd_motivo_exc_conta_w		:= cd_motivo_exc_conta_ww;
	nr_seq_conta_origem_w		:= nr_interno_conta_w;
	nr_interno_conta_w		:= null;
end if;

--Atualizar os campos vl_tx_desconto e vl_tx_adm  (Campos Informativos)
vl_tx_adm_w	:= null;
vl_tx_desconto_w:= null;
if (coalesce(nr_seq_ajuste_proc_ww,0) > 0) then
	
	begin
	select 	coalesce(tx_adm,0),
		coalesce(tx_desconto,0),
		tx_ajuste
	into STRICT	tx_adm_w,
		tx_desconto_w,
		tx_ajuste_w
	from 	regra_ajuste_proc
	where 	nr_sequencia = nr_seq_ajuste_proc_ww
	and 	ie_situacao = 'A'
	and 	ie_glosa = 'L';
	exception
		when others then
			tx_adm_w	:= 0;
			tx_desconto_w	:= 0;
			tx_ajuste_w	:= 1;
	end;
	
	select 	CASE WHEN ie_valor_informado_w='S' THEN  vl_servico_orig_w  ELSE CASE WHEN ie_valor_arredondado_w='S' THEN  vl_servico_w  ELSE (vl_servico_w * qt_procedimento_w) END  END
	into STRICT	vl_serv_w
	;
	
	if	((tx_adm_w > 0) or (tx_desconto_w > 0)) then
	
		vl_serv_orig_w:= dividir(vl_serv_w,tx_ajuste_w);	
		vl_tx_adm_w	:= vl_serv_orig_w * tx_adm_w / 100;
		vl_tx_desconto_w:= (vl_serv_orig_w + vl_tx_adm_w) * tx_desconto_w / 100;
	end if;	
end if;


/*      atualizar o servico do paciente com os valores */

begin

update procedimento_paciente
set 	vl_procedimento      	= CASE WHEN ie_valor_informado_w='S' THEN  vl_servico_orig_w  ELSE CASE WHEN ie_valor_arredondado_w='S' THEN  vl_servico_w  ELSE (vl_servico_w * qt_procedimento_w) END  END ,
    	vl_custo_operacional 	= (vl_custo_operacional_w *qt_procedimento_w) ,
    	vl_anestesista       	= 0,
    	vl_medico            	= 0,
    	vl_auxiliares        	= 0,
    	vl_materiais         	= 0,
    	dt_conta             	= dt_conta_w,
    	dt_acerto_conta	 	= dt_acerto_conta_w,
    	cd_conta_contabil    	= cd_conta_contabil_w,
	cd_centro_custo_receita	= CASE WHEN cd_centro_custo_w=0 THEN null  ELSE cd_centro_custo_w END ,
	cd_convenio			= cd_convenio_w,
	cd_categoria			= cd_categoria_w,
	cd_situacao_glosa		= cd_situacao_glosa_w,
	ie_valor_informado		= ie_valor_informado_w,
	nr_lote_contabil		= nr_lote_contabil_w,
	nr_doc_convenio		= nr_doc_convenio_w,
	nr_seq_autorizacao		= nr_seq_autorizacao_w,
	nr_interno_conta		= nr_interno_conta_w,
	ie_emite_conta		= ie_emite_conta_w,
	qt_porte_anestesico		= qt_porte_anestesico_w,
 	cd_procedimento_princ	= cd_procedimento_princ_w,
	nr_seq_grupo_rec		= nr_seq_grupo_rec_w,
	cd_motivo_exc_conta		= cd_motivo_exc_conta_w,
	nr_seq_regra_preco		= CASE WHEN coalesce(nr_seq_regra_preco_w, 0)=0 THEN  null  ELSE nr_seq_regra_preco_w END ,
	ie_responsavel_credito		= cd_regra_honorario_w,
	nr_seq_ajuste_proc		= nr_seq_ajuste_proc_ww,
	nr_seq_conta_origem		= nr_seq_conta_origem_w,
	nr_seq_proc_crit_hor		= nr_seq_adic_w,
	tx_procedimento			= coalesce(tx_procedimento_w,100),
	vl_tx_adm			= vl_tx_adm_w,
	vl_tx_desconto			= vl_tx_desconto_w,
	ie_trat_conta_rn    =  ie_trat_conta_rn_ww,
	tx_hora_extra		= tx_hora_extra_w,
	ds_observacao		= CASE WHEN ie_identifica_conta_proc_w='N' THEN  ds_observacao  ELSE CASE WHEN nr_sequencia_regra_w=0 THEN  ds_observacao  ELSE substr(ds_observacao || ' ' || OBTER_DESC_EXPRESSAO(331942) || ': ' || nr_sequencia_regra_w,1,255) END  END ,
	cd_sequencia_parametro = cd_sequencia_parametro_w
where 	nr_sequencia     		= nr_sequencia_p
and	ie_altera_auditoria_w		= 'S';
end;

if (coalesce(nr_seq_proc_interno_w,0) > 0) then
	cd_procedimento_tuss_w:= Define_procedimento_TUSS(cd_estabelecimento_w,  nr_seq_proc_interno_w, cd_convenio_w, cd_categoria_w,
	  						ie_tipo_atendimento_w, dt_procedimento_w, cd_procedimento_w, ie_origem_proced_w, 0,cd_setor_atendimento_w, cd_tipo_acomod_unid_w);
	update 	procedimento_paciente
	set	cd_procedimento_tuss = cd_procedimento_tuss_w
	where 	nr_sequencia = nr_sequencia_p;
	
end if;

if (coalesce(cd_procedimento_tuss_w,0) > 0) then

	SELECT * FROM obter_dados_tuss_serv_item(	cd_procedimento_tuss_w, dt_conta_w, ds_proc_tuss_w, nr_seq_tuss_item_w) INTO STRICT ds_proc_tuss_w, nr_seq_tuss_item_w;
					
	update 	procedimento_paciente
	set	ds_proc_tuss = ds_proc_tuss_w,
		nr_seq_tuss_item = nr_seq_tuss_item_w	
	where 	nr_sequencia = nr_sequencia_p;
	
end if;



/* francisco - os 73310 - 28/11/07 - gerar autorizacao */

if (ie_autor_particular_w = 'S') then
	select	coalesce(max(ie_tipo_convenio),0)
	into STRICT	ie_tipo_convenio_aux_w
	from	convenio
	where	cd_convenio	= cd_convenio_w;

	if (ie_tipo_convenio_aux_w = 1) then
		nr_seq_autor_gerada_w := gerar_autor_particular(nr_atendimento_w, null, nr_sequencia_p, nm_usuario_p, nr_seq_autor_gerada_w);
	end if;
end if;

/*  duplicar procedimento para glosa de percentual */

if (ie_valor_informado_w		= 'N')	and (cd_situacao_glosa_w		= 8)	and (pr_glosa_w 			> 0)	and (pr_glosa_w			< 100)	then
	CALL glosa_proc_percentual(nr_sequencia_p,pr_glosa_w, cd_convenio_glosa_ww, cd_categoria_glosa_ww,vl_proced_glosa_w);
end if;

/*  duplicar procedimento para glosa de valor */

if (ie_valor_informado_w		= 'N')	and (vl_glosa_w 			<> 0) then
	CALL glosa_proc_valor(nr_sequencia_p, vl_glosa_w);
end if;

CALL tiss_atualizar_procedimento(nr_sequencia_p, 'N', nm_usuario_p);

-- edgar 04/10/2007, os 70483
CALL tiss_atualiza_conta_proc(nr_sequencia_p, nm_usuario_p);

if (ie_valor_informado_w		= 'N') and (ie_calculo_taxa_regra_w	= 'L') then
	--calcular_taxa_esp_conta(nr_interno_conta_w, nr_sequencia_p, 1, nm_usuario_p);
	CALL calcular_regra_preco_taxa(nr_interno_conta_w, nr_sequencia_p, 1, nm_usuario_p);
end if;

if (coalesce(ie_codigo_convenio_w::text, '') = '') then
	select	coalesce(max(ie_codigo_convenio), 'X')
	into STRICT	ie_codigo_convenio_w
	from	convenio
	where	cd_convenio	= cd_convenio_w;
end if;

if (ie_codigo_convenio_w	= 'I') and (coalesce(obter_se_atualiza_cod_conv(cd_convenio_w,ie_auditoria_w,cd_estabelecimento_w),'S') = 'S') then
	CALL atualiza_cod_conv_mat_proc(nr_sequencia_p, 1);
end if;

if (ie_valor_informado_w	= 'N') then
	begin	

	delete	from proc_paciente_valor
	where	nr_seq_procedimento	= nr_sequencia_p
	and	ie_tipo_valor		= 99;

	select 	coalesce(max(nr_sequencia), 0) + 1
	into STRICT	nr_seq_w
	from	proc_paciente_valor
	where	nr_seq_procedimento	= nr_sequencia_p;
	
	insert into proc_paciente_valor(nr_seq_procedimento,
		nr_sequencia,
		ie_tipo_valor,
		dt_atualizacao,
		nm_usuario,
		vl_procedimento,
		vl_medico,
		vl_anestesista,
		vl_materiais,
		vl_custo_operacional,
		vl_auxiliares,
		cd_convenio,
		cd_categoria,
		pr_valor)
	values (nr_sequencia_p,
		nr_seq_w,
		99,
		clock_timestamp(),
		nm_usuario_p,
		CASE WHEN ie_valor_arredondado_w='S' THEN  vl_servico_w  ELSE (vl_servico_w * qt_procedimento_w) END ,
		0,
		0,
		0,
		0,
		0,
		cd_convenio_w,
		cd_categoria_w,
		0);
	exception
		when others then
			nr_seq_w	:= nr_seq_w;
	end;

elsif	((ie_valor_inf_desconto_w	= 'S') or (ie_valor_inf_pacote_w		= 'S')) then
	begin

	select 	coalesce(max(nr_sequencia), 0)
	into STRICT	nr_seq_w
	from	proc_paciente_valor
	where	nr_seq_procedimento	= nr_sequencia_p
	and	ie_tipo_valor		= 3;
	
	if (nr_seq_w	= 0) then
		delete	from proc_paciente_valor
		where	nr_seq_procedimento	= nr_sequencia_p
		and	ie_tipo_valor		= 96;

		select 	coalesce(max(nr_sequencia), 0) + 1
		into STRICT	nr_seq_w
		from	proc_paciente_valor
		where	nr_seq_procedimento	= nr_sequencia_p;
	
		insert into proc_paciente_valor(nr_seq_procedimento,
			nr_sequencia,
			ie_tipo_valor,
			dt_atualizacao,
			nm_usuario,
			vl_procedimento,
			vl_medico,
			vl_anestesista,
			vl_materiais,
			vl_custo_operacional,
			vl_auxiliares,
			cd_convenio,
			cd_categoria,
			pr_valor)
		values (nr_sequencia_p,
			nr_seq_w,
			96,
			clock_timestamp(),
			nm_usuario_p,
			vl_servico_orig_w,
			0,
			0,
			0,
			0,
			0,
			cd_convenio_w,
			cd_categoria_w,
			0);
	end if;
	exception
		when others then
			nr_seq_w	:= nr_seq_w;
	end;

end if;

<<final>>

if (qt_existe_repasse_w = 0) then
	/*Foi criado para setar o goto, sem esse if ele da erro de compilacao*/

	qt_existe_repasse_w := 1;
	
end if;

begin
	select	substr(value,1,64)
	into STRICT	ds_nls_territory_w
	from	v$nls_parameters
	where	parameter = 'NLS_TERRITORY';
exception
when others then
	ds_nls_territory_w:=null;	
end;

if	((2 = philips_param_pck.get_cd_pais) or (upper(ds_nls_territory_w) = 'MEXICO') or (15 = philips_param_pck.get_cd_pais) or (upper(ds_nls_territory_w) = 'BOLIVIA')) and -- 2 = Mexico and 15 = Bolivia
	(nr_interno_conta_w IS NOT NULL AND nr_interno_conta_w::text <> '') and (ie_regra_pacote_ctb_w = 'N') then
	CALL gerar_tributo_conta_pac(nr_interno_conta_w, nr_sequencia_p, 'P', nm_usuario_p);
end if;


--Geracao dos valores de rateio por conta contabil
CALL ctb_parametros_cc_rateio_pck.gravar_rateio_proc(nr_sequencia_p, cd_sequencia_parametro_w, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualiza_preco_servico (nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

