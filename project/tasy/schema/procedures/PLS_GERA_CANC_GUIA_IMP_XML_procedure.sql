-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gera_canc_guia_imp_xml ( nr_seq_lote_cancel_p pls_guia_plano_lote_cancel.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p text, nr_seq_p pls_guia_plano_cancel.nr_sequencia%type default null) AS $body$
DECLARE

						
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar o cancelamento da guias conforme solicitado no pedido de cancelamento
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao: Status utilizado no pedido de cancelamento
1 Cancelado com sucesso   2 Nao cancelado  3 Guia inexistente  4 Em processamento
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qt_registros_w			bigint;
ie_estagio_w			varchar(2);

ie_estagio_req_w		pls_requisicao.ie_estagio%type;

ie_status_w			pls_guia_plano_cancel.ie_status%type := '2';
nr_seq_motivo_cancel_w		pls_guia_motivo_cancel.nr_sequencia%type;

ie_tipo_processo_w		pls_guia_plano.ie_tipo_processo%type;

cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
ie_enviar_automatico_w		pls_param_intercambio_scs.ie_enviar_automatico%type;
ds_pedido_cancelamento_w	pls_end_webservice_scs.ds_pedido_cancelamento%type;
ds_ip_proxy_w			pls_end_webservice_scs.ds_ip_proxy%type;
ds_porta_proxy_w		pls_end_webservice_scs.ds_porta_proxy%type;
ds_usuario_proxy_w		pls_end_webservice_scs.ds_usuario_proxy%type;
ds_senha_proxy_w		pls_end_webservice_scs.ds_senha_proxy%type;
ds_senha_certificado_w		pls_end_webservice_scs.ds_senha_certificado%type;
ds_caminho_certificado_w	pls_end_webservice_scs.ds_caminho_certificado%type;
ds_webservice_envio_w		pls_end_webservice_scs.ds_webservice_envio%type;
ds_porta_w			pls_end_webservice_scs.ds_porta%type;

ds_motivo_cancelamento_w	pls_guia_motivo_cancel.ds_motivo_cancelamento%type;
nr_seq_pedido_cancelamento_w	ptu_cancelamento.nr_sequencia%type;

req_w				utl_http.req;
res_w				utl_http.resp;
url_w				varchar(100);
ds_resposta_w			varchar(32647);
ds_parametros_w			varchar(1000);
ds_retorno_w			varchar(255);

nr_seq_projeto_w		xml_projeto.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	a.nr_seq_guia,
		a.nr_seq_requisicao,
		a.nr_sequencia,
		(SELECT	count(1)
		from	pls_conta b
		where	b.nr_seq_guia = a.nr_seq_guia
		and	b.ie_status <> 'C') qt_contas
	from	pls_guia_plano_cancel a
	where	a.nr_seq_lote_cancel = nr_seq_lote_cancel_p
	and	a.ie_status not in ('3', '2')
	
union all

	select	a.nr_seq_guia,
		a.nr_seq_requisicao,
		a.nr_sequencia,
		(select	count(1)
		from	pls_conta b
		where	b.nr_seq_guia = a.nr_seq_guia
		and	b.ie_status <> 'C') qt_contas
	from	pls_guia_plano_cancel a
	where	a.nr_sequencia = nr_seq_p
	and	a.ie_status not in ('3', '2');

BEGIN

begin
	cd_estabelecimento_w	:= ptu_obter_estab_padrao;

	select	coalesce(max(ie_enviar_automatico),'N')
	into STRICT	ie_enviar_automatico_w
	from	pls_param_intercambio_scs
	where	ie_situacao = 'A';
exception
when others then
	ie_enviar_automatico_w	:= 'N';
end;

for cr_01 in C01 loop
	begin
		
	--Por padrao o status sera 2 - Nao cancelado, e aplicado quando nao aplica o cancelamento na guia
	ie_status_w := '2';
	
	--So sera realizado o processo se nao existir conta gerada ou se a mesma ja estiver cancelada
	if ( cr_01.qt_contas = 0 ) then

		if (cr_01.nr_seq_guia IS NOT NULL AND cr_01.nr_seq_guia::text <> '') then
			select	max(ie_estagio)
			into STRICT	ie_estagio_w
			from	pls_guia_plano
			where	nr_sequencia = cr_01.nr_seq_guia;
		end if;
		
		if (cr_01.nr_seq_requisicao IS NOT NULL AND cr_01.nr_seq_requisicao::text <> '') then
			select	max(ie_estagio)
			into STRICT	ie_estagio_req_w
			from	pls_requisicao
			where	nr_sequencia = cr_01.nr_seq_requisicao;
		end if;
		
		-- Verificar qual o motivo de cancelamento padrao do WebService definido na regra de motivo de cancelamento da guia.
		select	max(nr_sequencia)
		into STRICT	nr_seq_motivo_cancel_w
		from	pls_guia_motivo_cancel
		where	ie_situacao		= 'A'
		and	ie_motivo_cancel_xml	= 'S';
		--Se o estagio da guia for diferente de cancelado e aplicada a validacao
		if	(( ie_estagio_w <> '8' AND cr_01.nr_seq_guia IS NOT NULL AND cr_01.nr_seq_guia::text <> '') or
			( ie_estagio_req_w <> 3 AND cr_01.nr_seq_requisicao IS NOT NULL AND cr_01.nr_seq_requisicao::text <> ''))then
		
			--Por padrao o status sera  1 Cancelado com sucesso
			ie_status_w := '1';
			
			if (cr_01.nr_seq_guia IS NOT NULL AND cr_01.nr_seq_guia::text <> '') then
				CALL pls_cancelar_autorizacao(cr_01.nr_seq_guia, nr_seq_motivo_cancel_w, nm_usuario_p, null);

				CALL pls_guia_gravar_historico(cr_01.nr_seq_guia,7, substr(expressao_pck.obter_desc_expressao(1036828)||nm_usuario_p||'.'||chr(13)||'Processo realizado via WebService.',1,4000),
							  '', nm_usuario_p );

				begin
					select	coalesce(ie_tipo_processo, 'X')
					into STRICT	ie_tipo_processo_w
					from	pls_guia_plano
					where	nr_sequencia = cr_01.nr_seq_guia;
				exception
				when others then
					ie_tipo_processo_w := 'X';
				end;
			end if;

			--Se existir requisicao vinculada a guia gerada via WebService o sistema ira cancelar esta requisicao tambem
			if (cr_01.nr_seq_requisicao IS NOT NULL AND cr_01.nr_seq_requisicao::text <> '') then
				CALL pls_cancelar_requisicao( cr_01.nr_seq_requisicao, nr_seq_motivo_cancel_w, expressao_pck.obter_desc_expressao(1036824), nm_usuario_p, cd_estabelecimento_p );

				begin
					select	coalesce(ie_tipo_processo, 'X')
					into STRICT	ie_tipo_processo_w
					from	pls_requisicao
					where	nr_sequencia = cr_01.nr_seq_requisicao;
				exception
				when others then
					ie_tipo_processo_w := 'X';
				end;
			end if;

			if	(ie_enviar_automatico_w = 'S' AND ie_tipo_processo_w = 'I') then
				begin
					select	ds_pedido_cancelamento,
						ds_ip_proxy,
						ds_porta_proxy,
						ds_usuario_proxy,
						ds_senha_proxy,
						ds_senha_certificado,
						ds_caminho_certificado,
						ds_webservice_envio,
						ds_porta
					into STRICT	ds_pedido_cancelamento_w,
						ds_ip_proxy_w,
						ds_porta_proxy_w,
						ds_usuario_proxy_w,
						ds_senha_proxy_w,
						ds_senha_certificado_w,
						ds_caminho_certificado_w,
						ds_webservice_envio_w,
						ds_porta_w
					from	pls_end_webservice_scs
					where	ie_situacao = 'A';

					if (nr_seq_motivo_cancel_w IS NOT NULL AND nr_seq_motivo_cancel_w::text <> '') then
						select	ds_motivo_cancelamento
						into STRICT	ds_motivo_cancelamento_w
						from	pls_guia_motivo_cancel
						where	nr_sequencia = nr_seq_motivo_cancel_w;
					end if;

					if (coalesce(ds_motivo_cancelamento_w::text, '') = '') then
						ds_motivo_cancelamento_w := 'Cancelamento da guia solicitada pelo prestador pelo WebService TISS';
					end if;

					if (ds_porta_w IS NOT NULL AND ds_porta_w::text <> '') then
						nr_seq_pedido_cancelamento_w := ptu_env_pck.ptu_env_00311_v70(	cr_01.nr_seq_guia, cr_01.nr_seq_requisicao, ds_motivo_cancelamento_w, '070', nm_usuario_p, nr_seq_pedido_cancelamento_w);

						if (pls_obter_versao_scs = '090') then
							url_w	:= 'http://' || ds_webservice_envio_w || ':' || ds_porta_w || '/SCS90Server/WScsServletProcessor';
							nr_seq_projeto_w	:= 103270;
						else	
							url_w	:= 'http://' || ds_webservice_envio_w || ':' || ds_porta_w || '/SCS80Server/WScsServletProcessor';
							nr_seq_projeto_w	:= 102923;
						end if;

						utl_http.set_transfer_timeout(30);

						ds_parametros_w	:= 	'xml='				||
									'<nrSequenciaProjeto>'		|| nr_seq_projeto_w		|| '</nrSequenciaProjeto>'||
									'<cdTransacaoWebService>'	|| 9				|| '</cdTransacaoWebService>' ||
									'<nrSequenciaTransacao>'	|| nr_seq_pedido_cancelamento_w	|| '</nrSequenciaTransacao>' ||
									'<nmUsuario>'			|| nm_usuario_p			|| '</nmUsuario>' ||
									'<cdEstabelecimento>'		|| cd_estabelecimento_w		|| '</cdEstabelecimento>' ||
									'<urlWSDLServico>'		|| ds_pedido_cancelamento_w	|| '</urlWSDLServico>' ||
									'<ipProxy>'			|| ds_ip_proxy_w		|| '</ipProxy>' ||
									'<portaProxy>'			|| ds_porta_proxy_w		|| '</portaProxy>' ||
									'<usuarioProxy>'		|| ds_usuario_proxy_w		|| '</usuarioProxy>' ||
									'<senhaProxy>'			|| ds_senha_proxy_w		|| '</senhaProxy>' ||
									'<senhaCertificado>'		|| ds_senha_certificado_w	|| '</senhaCertificado>' ||
									'<caminhoCertificado>'		|| ds_caminho_certificado_w	|| '</caminhoCertificado>';

						req_w           := utl_http.begin_request(url_w , method => 'POST');
						utl_http.set_header(req_w, 'user-agent', 'mozilla/4.0');
						utl_http.set_header(r => req_w, name => 'Content-Type', value => 'application/x-www-form-urlencoded;charset=utf-8');
						utl_http.set_header(r => req_w, name => 'Content-Length', value => length(ds_parametros_w));
						utl_http.write_text(r => req_w, data => ds_parametros_w);

						res_w := utl_http.get_response(req_w);

						utl_http.read_line(res_w, ds_resposta_w);

						utl_http.end_response(res_w);
					end if;
				exception
				when others then
					ds_resposta_w := '';
				end;
			end if;
		end if;
	end if;
	
	--Atualizar status do pedido de cancelamento
	CALL pls_atualiza_status_canc_tiss(cr_01.nr_sequencia, ie_status_w, nm_usuario_p );
		
	end;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gera_canc_guia_imp_xml ( nr_seq_lote_cancel_p pls_guia_plano_lote_cancel.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p text, nr_seq_p pls_guia_plano_cancel.nr_sequencia%type default null) FROM PUBLIC;

