-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_geracao_mensalidade ( nr_seq_lote_p pls_lote_mensalidade.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


dt_mesano_referencia_w		pls_lote_mensalidade.dt_mesano_referencia%type;
dt_contabilizacao_w		pls_lote_mensalidade.dt_contabilizacao%type;
nr_seq_log_w			pls_mens_log_geracao.nr_sequencia%type;
qt_pagadores_lote_w		pls_lote_mensalidade.qt_pagadores_lote%type;
qt_log_erro_w			integer;
ds_processo_w			pls_processo_adic_versao.ds_processo%type	:= null;
dt_inicio_geracao_w		timestamp;
dt_fim_geracao_w		timestamp;
ds_conteudo_w			varchar(4000);
nr_seq_solic_resc_fin_w		pls_solic_rescisao_fin.nr_sequencia%type;


BEGIN
select	max(a.ds_processo)
into STRICT	ds_processo_w
from	pls_processo_adic_versao a
where	a.ie_consiste_mensalidade = 'S'
and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
and	not exists (	SELECT	1
			from	pls_proc_adic_versao_log x
			where	x.nr_seq_proc_adic_versao = a.nr_sequencia
			and	x.ie_processo_executado = 'S');

if (ds_processo_w IS NOT NULL AND ds_processo_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(692306,'DS_PROCESSO='||ds_processo_w);
end if;

select	dt_mesano_referencia,
	dt_contabilizacao,
	dt_inicio_geracao,
	nr_seq_solic_resc_fin
into STRICT	dt_mesano_referencia_w,
	dt_contabilizacao_w,
	dt_inicio_geracao_w,
	nr_seq_solic_resc_fin_w
from	pls_lote_mensalidade
where	nr_sequencia	= nr_seq_lote_p;

if (dt_inicio_geracao_w IS NOT NULL AND dt_inicio_geracao_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(438833, 'nr_seq_lote=' || nr_seq_lote_p);
end if;

dt_inicio_geracao_w	:= clock_timestamp();
update	pls_lote_mensalidade
set	dt_inicio_geracao	= dt_inicio_geracao_w,
	dt_fim_geracao		 = NULL,
	hr_geracao_lote		 = NULL,
	nm_usuario_geracao	= nm_usuario_p
where	nr_sequencia		= nr_seq_lote_p;

CALL pls_gravar_historico_lote_mens(nr_seq_lote_p, 1, null, nm_usuario_p, 'N');
commit;

nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '1', 'I', nm_usuario_p, nr_seq_log_w);
-- Carregar parametros
CALL pls_mensalidade_util_pck.carregar_parametros(cd_estabelecimento_p);

--Ajustar os campos que estao nulos, definindo o valor padrao
CALL pls_mensalidade_util_pck.ajustar_campos_null(cd_estabelecimento_p, nm_usuario_p);

--Carregar as regras padrao da operadora
CALL pls_mensalidade_util_pck.carregar_regras_ops(cd_estabelecimento_p, nm_usuario_p, dt_mesano_referencia_w, nr_seq_lote_p, nr_seq_solic_resc_fin_w);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '1', 'F', nm_usuario_p, nr_seq_log_w);

-- Carregar os pagadores e beneficiarios e inserir na tabela PLS_MENS_BENEF_PAG_TMP
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '2', 'I', nm_usuario_p, nr_seq_log_w);
CALL pls_mens_selecao_benef_pck.selecionar_benef_pagador(nr_seq_lote_p, null, cd_estabelecimento_p, nm_usuario_p);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '2', 'F', nm_usuario_p, nr_seq_log_w);

-- Inserir os pagadores na tabela PLS_MENSALIDADE
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '3', 'I', nm_usuario_p, nr_seq_log_w);
CALL pls_mens_pagador_pck.inserir_mensalidade_pagador(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '3', 'F', nm_usuario_p, nr_seq_log_w);

-- Inserir os beneficiarios na tabela PLS_MENSALIDADE_SEGURADO
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '4', 'I', nm_usuario_p, nr_seq_log_w);
pls_mens_beneficiario_pck.inserir_mensalidade_benef(nr_seq_lote_p, null, cd_estabelecimento_p, nm_usuario_p);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '4', 'F', nm_usuario_p, nr_seq_log_w);

--Faixa etaria
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '5', 'I', nm_usuario_p, nr_seq_log_w);
CALL pls_mens_processo_pck.suspender_reajuste_fx_etaria(nr_seq_lote_p, null, dt_mesano_referencia_w, cd_estabelecimento_p, nm_usuario_p); --Suspender reajuste por faixa etaria ja aplicado
CALL pls_mens_reajustar_fx_etaria(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p); --Gerar reajuste por faixa etaria para os beneficiarios
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '5', 'F', nm_usuario_p, nr_seq_log_w);

-- Gerar os itens de mensalidade para os beneficiarios
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '6', 'I', nm_usuario_p, nr_seq_log_w);
CALL pls_mens_itens_pck.gerar_itens_mensalidade(nr_seq_lote_p, null, cd_estabelecimento_p, nm_usuario_p);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '6', 'F', nm_usuario_p, nr_seq_log_w);

-- Processar as informacoes da mensalidade
CALL pls_mens_processo_pck.processar_mensalidade(nr_seq_lote_p, null, dt_mesano_referencia_w, cd_estabelecimento_p, nm_usuario_p);

-- Atualizar os valores do lote e excluir as mensalidades sem registros
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '95', 'I', nm_usuario_p, nr_seq_log_w);
CALL pls_mens_atualizacao_pck.atualizar_valores_lote(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_p);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '95', 'F', nm_usuario_p, nr_seq_log_w);

--gerar tributos
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '90', 'I', nm_usuario_p, nr_seq_log_w);
CALL pls_mens_processo_pck.processar_tributos(nr_seq_lote_p, null, cd_estabelecimento_p, nm_usuario_p);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '90', 'F', nm_usuario_p, nr_seq_log_w);

-- Gerar mensagens para as mensalidades
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '97', 'I', nm_usuario_p, nr_seq_log_w);
CALL pls_mens_processo_pck.gerar_mensagens_mensalidade(nr_seq_lote_p, null, cd_estabelecimento_p, nm_usuario_p);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '97', 'F', nm_usuario_p, nr_seq_log_w);

--Gerar criticas para o lote
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '99', 'I', nm_usuario_p, nr_seq_log_w);
CALL pls_mens_criticas_pck.criticar_lote(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '99', 'F', nm_usuario_p, nr_seq_log_w);

dt_fim_geracao_w	:= clock_timestamp();

select	qt_pagadores_lote
into STRICT	qt_pagadores_lote_w
from	pls_lote_mensalidade
where	nr_sequencia	= nr_seq_lote_p;

select	count(1)
into STRICT	qt_log_erro_w
from	pls_mensalidade_log
where	nr_seq_lote	= nr_seq_lote_p;

if (qt_pagadores_lote_w > 0) or (qt_log_erro_w > 0) then
	update	pls_lote_mensalidade
	set	ie_status		= '3',
		dt_geracao		= dt_fim_geracao_w,
		dt_fim_geracao		= dt_fim_geracao_w,
		hr_geracao_lote		= pls_obter_dif_data_horario(dt_inicio_geracao_w,dt_fim_geracao_w)
	where	nr_sequencia		= nr_seq_lote_p;
else
	update	pls_lote_mensalidade
	set	dt_inicio_geracao	 = NULL,
		hr_geracao_lote		 = NULL
	where	nr_sequencia		= nr_seq_lote_p;
	
	delete	from pls_mens_log_geracao
	where	nr_seq_lote = nr_seq_lote_p;
end if;

if (pls_mensalidade_util_pck.get_parametro_mens = 'S') then
	ds_conteudo_w := '--------------------------------------------------------------------------------';
	CALL pls_utl_file_pck.escrever(ds_conteudo_w);
	ds_conteudo_w := 'Fim ......: '||to_char(clock_timestamp(), 'dd/mm/yyyy hh24:mi:ss');
	CALL pls_utl_file_pck.escrever(ds_conteudo_w);
	CALL pls_utl_file_pck.fechar_arquivo();
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_geracao_mensalidade ( nr_seq_lote_p pls_lote_mensalidade.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

