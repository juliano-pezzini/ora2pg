-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE recep_gerar_atendimento ( cd_estabelecimento_p text, cd_medico_req_p text, cd_medico_exec_p text, nr_seq_ficha_pre_p bigint, nr_seq_ficha_agenda_p bigint, NR_SEQ_AGENDA_P bigint, cd_pessoa_fisica_p text, nm_usuario_p text, nr_seq_age_proc_p bigint, ie_origem_proced_p bigint, ie_origem_inf_p text, cd_setor_usuario_p bigint, nr_atendimento_p INOUT bigint, ds_erro_p INOUT text) AS $body$
DECLARE


cd_procedencia_w 	integer;			
nr_atendimento_w 	bigint;
cd_convenio_w 		integer;
cd_categoria_w 		varchar(10);
nr_seq_agenda_w 	recep_ficha_pre_agenda.nr_seq_agenda%type;
dt_entrada_w		timestamp;
ds_dados_agenda_w	bigint;
qt_agenda_w        bigint;
nr_seq_age_proc_w 	bigint;
nr_prescricao_w		bigint;
ie_gerou_atendimento_w	varchar(1):= 'N';
ie_gerou_convenio_w 	varchar(1):= 'N';
nr_doc_convenio_w 	varchar(20);
qt_procedimento_w	integer;
cd_procedimento_w	bigint;
nr_seq_interno_w	bigint;
nr_seq_prescr_proc_w 	integer;
qt_convenio_w		smallint;
cd_medico_resp_w	varchar(10);
nr_seq_proc_interno_w	bigint;
cd_senha_w		varchar(20);
cd_plano_convenio_w 	varchar(10);
dt_prescricao_w		timestamp;
dt_primeiro_horario_w	timestamp;
cd_setor_atendimento_w	integer;
ie_convenio_cadastro_w	varchar(1);
ie_existe_w		varchar(1);


BEGIN

select	coalesce(cd_medico_req_p,cd_medico_exec_p)
into STRICT	cd_medico_resp_w
;

select	max(nr_atendimento)
into STRICT	nr_atendimento_w
from	recep_ficha_pre
where	nr_sequencia = nr_seq_ficha_pre_p;

begin
	SELECT 'S'
	INTO STRICT	ie_existe_w
	from	recep_ficha_pre_agenda
	where	nr_sequencia = nr_seq_ficha_agenda_p  LIMIT 1;
exception
when others then
	ie_existe_w := 'N';
end;
		
if (nr_seq_ficha_pre_p IS NOT NULL AND nr_seq_ficha_pre_p::text <> '') and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
begin
	if (coalesce(nr_atendimento_w::text, '') = '') then
		if (nr_seq_ficha_agenda_p IS NOT NULL AND nr_seq_ficha_agenda_p::text <> '') and (ie_existe_w = 'S') then
			select	nr_seq_agenda
			into STRICT	nr_seq_agenda_w
			from	recep_ficha_pre_agenda
			where	nr_sequencia = nr_seq_ficha_agenda_p;
			
			select	cd_procedencia
			into STRICT	cd_procedencia_w
			from	agenda_paciente
			where	nr_sequencia = nr_seq_agenda_w;
		end if;
	
		if (coalesce(cd_procedencia_w::text, '') = '') then
			select	max(CD_PROCEDENCIA)
			into STRICT	cd_procedencia_w
			from	procedencia
			where	cd_estabelecimento = cd_estabelecimento_p;
		end if;
				
		select	nextval('atendimento_paciente_seq')
		into STRICT	nr_atendimento_w
		;
		
		insert into atendimento_paciente(nr_atendimento,
								ie_permite_visita,
								dt_entrada,
								ie_tipo_atendimento,
								cd_procedencia,
								cd_medico_resp,
								cd_pessoa_fisica,
								cd_estabelecimento,
								dt_atualizacao,
								nm_usuario,
								nm_usuario_atend)
							values (nr_atendimento_w,
								'N',
								clock_timestamp(),
								7,
								cd_procedencia_w,
								cd_medico_resp_w,
								cd_pessoa_fisica_p,
								cd_estabelecimento_p,
								clock_timestamp(),
								nm_usuario_p,
								nm_usuario_p);
		
		CALL recep_inserir_atend_ficha_pre(nr_atendimento_w,nr_seq_ficha_pre_p);
					
		commit;
		
		ie_gerou_atendimento_w:= 'S';
	else
		select	max(cd_medico_resp)
		into STRICT	cd_medico_resp_w
		from	atendimento_paciente
		where	nr_atendimento = nr_atendimento_w;
	end if;
	
	nr_atendimento_p:= nr_atendimento_w;
	
	if (nr_seq_ficha_agenda_p IS NOT NULL AND nr_seq_ficha_agenda_p::text <> '') then
	begin  --@@		
		if (ie_existe_w = 'S') then
				
				select	NR_SEQ_AGENDA_P,
					nr_seq_age_proc
				into STRICT	nr_seq_agenda_w,
					nr_seq_age_proc_w
				from	recep_ficha_pre_agenda
				where	nr_sequencia = nr_seq_ficha_agenda_p;

				if (nr_seq_age_proc_w IS NOT NULL AND nr_seq_age_proc_w::text <> '') then
					select	cd_procedimento,
						qt_procedimento,
						nr_seq_proc_interno
					into STRICT	cd_procedimento_w,
						qt_procedimento_w,
						nr_seq_proc_interno_w
					from	agenda_paciente_proc
					where	nr_seq_agenda = nr_seq_age_proc_w
					and	nr_sequencia = nr_seq_age_proc_p;
				elsif (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then
					select	cd_procedimento,
						1,
						nr_seq_proc_interno
					into STRICT	cd_procedimento_w,
						qt_procedimento_w,
						nr_seq_proc_interno_w
					from	agenda_paciente
					where	nr_sequencia = nr_seq_agenda_w;
				end if;
			
			select	cd_convenio,
				cd_categoria,
				nr_doc_convenio,
				ds_senha,
				cd_plano,
				cd_setor_atendimento
			into STRICT	cd_convenio_w,
				cd_categoria_w,
				nr_doc_convenio_w,
				cd_senha_w,
				cd_plano_convenio_w,
				cd_setor_atendimento_w
			from	agenda_paciente
			where	nr_sequencia = nr_seq_agenda_w;
			
			select	nextval('atend_categoria_convenio_seq')
			into STRICT	nr_seq_interno_w
			;
			
			
			select	count(*)
			into STRICT	qt_convenio_w
			from	atend_categoria_convenio
			where	nr_atendimento = nr_atendimento_w
			and		cd_convenio = cd_convenio_w
			and		cd_categoria = cd_categoria_w;
			
			if (qt_convenio_w < 1) then
				
				if (coalesce(cd_categoria_w::text, '') = '') then
					ds_erro_p:= obter_texto_tasy(267735,null);
					return;
				end if;	
				
				select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_convenio_cadastro_w
				from 	pessoa_titular_convenio
				where	cd_pessoa_fisica = cd_pessoa_fisica_p
				and	cd_convenio = cd_convenio_w;
			
				if (ie_convenio_cadastro_w = 'N') then
					ds_erro_p:= obter_texto_tasy(269854,null);
					return;
				end if;
			
				select	dt_entrada
				into STRICT	dt_entrada_w
				from	atendimento_paciente
				where	nr_atendimento = nr_atendimento_w;
			
				insert into atend_categoria_convenio(cd_convenio,
									cd_categoria,
									dt_inicio_vigencia,
									nr_seq_interno,
									nr_atendimento,
									dt_atualizacao,
									nm_usuario,
									nr_doc_convenio,
									cd_senha,
									cd_plano_convenio)
								values (cd_convenio_w,
									cd_categoria_w,
									clock_timestamp(),
									nr_seq_interno_w,
									nr_atendimento_w,
									clock_timestamp(),
									nm_usuario_p,
									nr_doc_convenio_w,
									cd_senha_w,
									cd_plano_convenio_w);
							
									
				SELECT * FROM gerar_pass_conv_agendamento_js(2, nr_seq_agenda_w, 'N', nr_atendimento_w, dt_entrada_w, nm_usuario_p, ds_dados_agenda_w, qt_agenda_w) INTO STRICT ds_dados_agenda_w, qt_agenda_w;
				
			else
				select	max(nr_seq_interno)
				into STRICT	nr_seq_interno_w
				from	atend_categoria_convenio
				where	nr_atendimento = nr_atendimento_w
				and		cd_convenio = cd_convenio_w
				and		cd_categoria = cd_categoria_w;
			end if;
									
									
			commit;
			
			ie_gerou_convenio_w:= 'S';
		
		else
			
			select	MAX(cd_convenio),
				MAX(cd_categoria),
				MAX(nr_doc_convenio),
				MAX(cd_plano)
			into STRICT	cd_convenio_w,
				cd_categoria_w,
				nr_doc_convenio_w,
				cd_plano_convenio_w
			from	ageint_exame_lab_conv_item
			where	nr_seq_lab_item = nr_seq_ficha_agenda_p;
			
			select	nextval('atend_categoria_convenio_seq')
			into STRICT	nr_seq_interno_w
			;
			
			
			select	count(*)
			into STRICT	qt_convenio_w
			from	atend_categoria_convenio
			where	nr_atendimento = nr_atendimento_w
			and		cd_convenio = cd_convenio_w
			and		cd_categoria = cd_categoria_w;
			
			if (qt_convenio_w < 1) then
				
				if (coalesce(cd_categoria_w::text, '') = '') then
					ds_erro_p:= obter_texto_tasy(267735,null);
					return;
				end if;	
				
				select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_convenio_cadastro_w
				from 	pessoa_titular_convenio
				where	cd_pessoa_fisica = cd_pessoa_fisica_p
				and	cd_convenio = cd_convenio_w;
			
				if (ie_convenio_cadastro_w = 'N') then
					ds_erro_p:= obter_texto_tasy(269854,null);
					return;
				end if;
			
				select	dt_entrada
				into STRICT	dt_entrada_w
				from	atendimento_paciente
				where	nr_atendimento = nr_atendimento_w;
			
				insert into atend_categoria_convenio(cd_convenio,
									cd_categoria,
									dt_inicio_vigencia,
									nr_seq_interno,
									nr_atendimento,
									dt_atualizacao,
									nm_usuario,
									nr_doc_convenio,
									cd_senha,
									cd_plano_convenio)
								values (cd_convenio_w,
									cd_categoria_w,
									clock_timestamp(),
									nr_seq_interno_w,
									nr_atendimento_w,
									clock_timestamp(),
									nm_usuario_p,
									nr_doc_convenio_w,
									cd_senha_w,
									cd_plano_convenio_w);
							
									
				SELECT * FROM gerar_pass_conv_agendamento_js(2, nr_seq_agenda_w, 'N', nr_atendimento_w, dt_entrada_w, nm_usuario_p, ds_dados_agenda_w, qt_agenda_w) INTO STRICT ds_dados_agenda_w, qt_agenda_w;
				
			else
				select	max(nr_seq_interno)
				into STRICT	nr_seq_interno_w
				from	atend_categoria_convenio
				where	nr_atendimento = nr_atendimento_w
				and		cd_convenio = cd_convenio_w
				and		cd_categoria = cd_categoria_w;
			end if;
									
									
			commit;
			
			ie_gerou_convenio_w:= 'S';		
		
		end if;	
	end;
	end if;
	
	CALL recep_gerar_prescricao(nm_usuario_p,
						cd_estabelecimento_p,
						nr_atendimento_w,
						nr_seq_ficha_pre_p,
						nr_seq_ficha_agenda_p,
						nr_seq_interno_w,
						cd_pessoa_fisica_p,
						ie_origem_inf_p,
						cd_medico_resp_w,
						cd_setor_usuario_p,
						ie_origem_proced_p,
						nr_seq_age_proc_p);
	
	CALL eup_atualizar_tipo_convenio(nr_atendimento_w, cd_convenio_w);
	
end;	
end if;	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE recep_gerar_atendimento ( cd_estabelecimento_p text, cd_medico_req_p text, cd_medico_exec_p text, nr_seq_ficha_pre_p bigint, nr_seq_ficha_agenda_p bigint, NR_SEQ_AGENDA_P bigint, cd_pessoa_fisica_p text, nm_usuario_p text, nr_seq_age_proc_p bigint, ie_origem_proced_p bigint, ie_origem_inf_p text, cd_setor_usuario_p bigint, nr_atendimento_p INOUT bigint, ds_erro_p INOUT text) FROM PUBLIC;

