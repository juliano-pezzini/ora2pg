-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_abrir_proc_qtde_proc_valor ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
********* SE FOR ALTERAR ALGUMA COISA NESTA ROTINA, FAVOR VERIFICAR A PLS_REGRA_QTD_EXECUCAO_PCK. ELA e UTILIZADA NO NOVO PROCESSO DE CONTAS MeDICAS. **************
******************************************A NOVA ROTINA FOI CRIADA COM BASE NESTA ROTINA (PLS_ABRIR_PROC_QTDE_PROC_VALOR) . ***********************************************
**************************************** HOUVE DUPLICACAO DE CoDIGO PARA MANTERMOS TUDO FUNCIONANDO DURANTE A TRANSICAO ***********************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*/


/*Procedure  criada para abrir as contas quando a regra de quantidade de execucao assim exigir, para que o calculo da valorizacao seja correto incluindo a valorizacao de participantes*/

nr_seq_tipo_prestador_w		bigint;
nr_seq_classificacao_w		bigint;
nr_seq_prestador_exec_w		bigint;
nr_seq_segurado_w		bigint;
dt_conta_w			timestamp;
ie_tipo_partic_prof_w		varchar(10);
ie_tipo_guia_w			varchar(2);
cd_grupo_proc_w			bigint;
ie_nacional_w			pls_congenere.ie_nacional%type;
cd_especialidade_w		bigint;
cd_area_procedimento_w		bigint;
nr_seq_proc_w			bigint;
nr_seq_proc_ww			bigint;
qt_procedimento_ww		double precision;
qt_procedimento_imp_w		double precision	:= 0;
qt_procedimento_regra_w		double precision;
qt_procedimento_regra_ww	double precision	:= 0;
vl_total_procedimento_w		double precision;
vl_proc_unit_w			double precision;
vl_proc_copartic_unit_w		double precision;
vl_medico_unit_w		double precision;
vl_co_unit_w			double precision;
vl_mat_unit_w			double precision;
qt_exec_proc_w			double precision;
nr_seq_proc_up_w		bigint	:= 0;
qt_proc_regra_w			bigint	:= 0;
qt_cursor_w			bigint	:= 0;

cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
qt_procedimento_w		double precision;
vl_procedimento_w		double precision;
vl_proc_copartic_w		double precision;
vl_medico_w			double precision;
vl_pag_medico_conta_w		double precision;
vl_custo_operacional_w		double precision;
vl_materiais_w			double precision;
vl_anestesista_w		double precision;
vl_auxiliares_w			double precision;
vl_proc_unitario_w		double precision;
dt_procedimento_w		timestamp;
ie_tipo_despesa_w		varchar(1);

nr_seq_regra_w			bigint;
nr_seq_regra_ww			bigint;
ie_regra_execucao_w		varchar(1);
ie_regra_execucao_ww		varchar(1);
cd_area_procedimento_regra_w	bigint;
cd_especialidade_regra_w 	bigint;
cd_grupo_proc_regra_w		bigint;
cd_procedimento_regra_w 	bigint;
ie_origem_proced_regra_w	bigint;
cd_area_procedimento_regra_ww	bigint;
cd_especialidade_regra_ww	bigint;
cd_grupo_proc_regra_ww		bigint;
cd_procedimento_regra_ww	bigint;
ie_origem_proced_regra_ww	bigint;
nr_seq_grupo_servico_ww		bigint;
nr_seq_grupo_servico_w		bigint;
qt_participante_w		bigint;
qt_participante_ww		bigint;
qt_participante_proc_w		bigint;
qt_participante_regra_w		bigint;
ie_abrir_execucao_w		varchar(1);
ie_abrir_execucao_ww		varchar(1);
nr_seq_grupo_prestador_w	bigint;
ie_grupo_servico_w		varchar(1);
ie_grupo_prestador_w		varchar(1);

nr_seq_regra_tx_w		bigint;
tx_procedimento_w		double precision;
tx_medico_w			double precision;
tx_custo_operacional_w		double precision;
tx_material_w			double precision;
nr_seq_taxa_item_w		bigint;
qt_exec_max_w			bigint	:= 0;
qt_exec_min_w			bigint	:= 0;
qt_exec_w			double precision;
qt_loop_w			bigint	:= 1;
qt_total_proc_w			bigint	:= 0;
qt_total_proc_ww		bigint	:= 1;
vl_procedimento_ww		double precision;
vl_proc_copartic_ww		double precision;
vl_medico_ww			double precision;
vl_custo_operacional_ww		double precision;
vl_pag_medico_conta_ww		double precision;
vl_total_procedimento_ww	double precision;
vl_materiais_ww			double precision;
nr_seq_conta_proc_w		bigint;
ie_participacao_ww		varchar(10);
ie_participacao_w		varchar(10);
ie_entra_regras_w		varchar(10);
qt_proc_participante_w		bigint;
qt_igual_w			bigint;
ie_termina_cursor_w		varchar(10)	:= 'N';
vl_procedimento_imp_w		double precision;
vl_procedimento_imp_ww		double precision;
vl_total_partic_w		double precision 	:= 0;
vl_total_partic_unit_w		double precision 	:= 0;
vl_anestesista_unit_w		double precision	:= 0;
vl_auxiliares_unit_w		double precision	:= 0;
nr_retorno_w			bigint;
ds_retorno_w			varchar(255);
vl_retorno_w			double precision;
cd_edicao_amb_w			integer;
nr_seq_tipo_acomodacao_w	bigint;
nr_seq_tipo_atendimento_w	bigint;
nr_seq_clinica_w		bigint;
nr_seq_plano_w			bigint;
ie_tipo_contratacao_w		varchar(2);
qt_dias_internacao_w		bigint;
cd_medico_conta_w		varchar(10);
nr_seq_cbo_saude_w		bigint;
ie_carater_internacao_w		varchar(2);
nr_seq_conta_w			bigint;
ie_conta_internacao_w		varchar(1)	:= 'N';
nr_seq_contrato_w		bigint;
nr_seq_categoria_w		bigint;
ie_preco_plano_w		varchar(2);
nr_seq_outorgante_w		bigint;
dt_preco_w			timestamp	:= clock_timestamp();
ie_tecnica_utilizada_w		varchar(1);
cd_convenio_w			integer;
nr_seq_congenere_outorg_w	bigint;
sg_estado_w			pessoa_juridica.sg_estado%type;
nr_seq_congenere_seg_w		bigint;
sg_estado_int_w			pessoa_juridica.sg_estado%type;
ie_tipo_intercambio_w		varchar(10)	:= 'A';
nr_seq_congenere_w		bigint;
cd_categoria_w			varchar(10);
nr_seq_intercambio_w		bigint;
ie_pcmso_w					varchar(1);
ie_tipo_segurado_w			varchar(10);
ie_tipo_acomodacao_w		varchar(2);
ie_tipo_conta_w				varchar(10);
dados_prestador_prot_w		pls_cta_valorizacao_pck.dados_prestador_prot;
nr_seq_protocolo_w			pls_protocolo_conta.nr_sequencia%type;
qt_edicao_amb_w				integer;
dados_regra_preco_proc_w	pls_cta_valorizacao_pck.dados_regra_preco_proc;
nr_seq_rp_combinada_w		pls_conta_proc.nr_seq_rp_combinada%type;
dados_conta_w				pls_cta_valorizacao_pck.dados_conta;
nr_seq_grupo_produto_w		pls_preco_grupo_produto.nr_sequencia%type;
ie_grupo_produto_w			varchar(2);
ie_via_acesso_w				pls_conta_proc.ie_via_acesso%type;
ie_via_acesso_ww			pls_conta_proc.ie_via_acesso%type;
ie_apresentacao_w			pls_protocolo_conta.ie_apresentacao%type;
vl_proc_desdobramento_w		pls_conta_proc.vl_procedimento_imp%type;
qt_centavos_resto_div_proc_w	bigint;
ie_origem_protocolo_w		pls_protocolo_conta.ie_origem_protocolo%type;
ie_considerar_glosados_w	pls_parametros.ie_considerar_glosados%type;
ie_tipo_inter_conta_w		pls_tipo_via_acesso.ie_tipo_intercambio%type;
ie_pertence_intercambio_w	varchar(1);
vl_taxa_servico_imp_w		pls_conta_proc.vl_taxa_servico_imp%type;
vl_taxa_co_imp_w		pls_conta_proc.vl_taxa_co_imp%type;
vl_taxa_material_imp_w		pls_conta_proc.vl_taxa_material_imp%type;
qt_proc_original_w		pls_conta_proc.qt_procedimento_imp%type;	
vl_material_ptu_imp_orig_w	pls_conta_proc.vl_material_ptu_imp%type;
vl_procedimento_ptu_imp_orig_w	pls_conta_proc.vl_procedimento_ptu_imp%type;
vl_co_ptu_imp_orig_w		pls_conta_proc.vl_co_ptu_imp%type;
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_conta.ie_saude_ocupacional%type;

C01 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(sum(a.qt_procedimento_imp),0),
		coalesce(sum(a.vl_procedimento),0),
		coalesce(sum(a.vl_unitario_imp),0),
		coalesce(sum(a.vl_proc_copartic),0),
		coalesce(sum(a.vl_medico),0),
		coalesce(sum(a.vl_pag_medico_conta),0),
		coalesce(sum(a.vl_custo_operacional),0),
		coalesce(sum(a.vl_materiais),0),
		coalesce(sum(a.vl_anestesista),0),
		coalesce(sum(a.vl_auxiliares),0),
		coalesce(sum(coalesce(dividir(a.vl_procedimento, a.qt_procedimento_imp),0)),0) vl_proc_unitario,
		trunc(a.dt_procedimento) dt_procedimento,
		a.ie_tipo_despesa,
		a.nr_sequencia,
		coalesce(sum(a.vl_procedimento_imp),0) vl_proc_imp,
		coalesce(sum(a.vl_total_partic),0),
		max(a.ie_tecnica_utilizada),
		max(a.nr_seq_rp_combinada),
		coalesce(a.ie_via_acesso,'U') ie_via_acesso,
		coalesce(sum(a.vl_taxa_servico_imp),0),
                coalesce(sum(a.vl_taxa_co_imp),0),
		coalesce(sum(a.vl_taxa_material_imp),0),
		coalesce(sum(a.qt_procedimento_imp),0) qt_proc_original,
		coalesce(sum(vl_material_ptu_imp),0)		vl_material_ptu_imp,
		coalesce(sum(vl_procedimento_ptu_imp),0) 	vl_procedimento_ptu_imp,	
		coalesce(sum(vl_co_ptu_imp),0) 		vl_co_ptu_imp		
	from	pls_conta_proc	a
	where	((a.nr_seq_conta		= nr_seq_conta_p) or (a.nr_sequencia = nr_seq_conta_proc_p))
	and	((coalesce(ie_glosa,'N')	<> 'S') or (ie_tipo_conta_w = 'I') or ( ie_considerar_glosados_w = 'S'))
	and	coalesce(ie_regra_qtde_execucao,'N')	= 'N'
	and	ie_status 	!= 'D'
	group by a.cd_procedimento,
		 a.ie_origem_proced,
		 dt_procedimento,
		 a.ie_tipo_despesa,
		 a.nr_sequencia,
		 a.vl_liberado,
		 a.ie_via_acesso
	order by coalesce(a.vl_liberado,0) desc,
		 vl_proc_imp desc,
		 vl_proc_unitario desc,
		 cd_procedimento,
		 ie_origem_proced;

/*retirado a restricao ie_valor informado OS 418620 Diogo */

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_regra_execucao,
		a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_grupo_servico,
		a.nr_seq_grupo_prestador,
		a.ie_participacao,
		a.ie_abrir_execucao,
		a.nr_seq_grupo_produto,
		coalesce(a.ie_tipo_intercambio, 'X') ie_tipo_intercambio
	from	pls_regra_preco_qtde_proc	a
	where	a.ie_situacao		= 'A'
	and	a.cd_estabelecimento	= cd_estabelecimento_p
	and	dt_procedimento_w	between a.dt_inicio_vigencia and fim_dia(coalesce(a.dt_fim_vigencia,dt_procedimento_w))
	and	((coalesce(a.nr_seq_prestador::text, '') = '') 	or (a.nr_seq_prestador 	= nr_seq_prestador_exec_w))
	and	((coalesce(a.cd_procedimento::text, '') = '')	or (a.cd_procedimento	= cd_procedimento_w and a.ie_origem_proced = ie_origem_proced_w))
	and	((coalesce(a.cd_grupo_proc::text, '') = '')	or (a.cd_grupo_proc	= cd_grupo_proc_w))
	and	((coalesce(a.cd_especialidade::text, '') = '')	or (a.cd_especialidade	= cd_especialidade_w))
	and	((coalesce(a.cd_area_procedimento::text, '') = '')	or (a.cd_area_procedimento = cd_area_procedimento_w))
	and	((coalesce(a.nr_seq_tipo_prestador::text, '') = '') or (a.nr_seq_tipo_prestador = nr_seq_tipo_prestador_w))
	and	((a.ie_tipo_guia 	= ie_tipo_guia_w) or (coalesce(a.ie_tipo_guia::text, '') = '' ))
	and	((coalesce(a.cd_edicao_amb::text, '') = '') 	or (a.cd_edicao_amb = cd_edicao_amb_w))
	and	((coalesce(a.ie_tipo_conta::text, '') = '') 	or (a.ie_tipo_conta = 'T') or (a.ie_tipo_conta = ie_tipo_conta_w) or
		(ie_tipo_conta_w = 'C' AND a.ie_tipo_conta = 'O'))
	and	((coalesce(a.nr_seq_grupo_servico::text, '') = '') or (exists (SELECT	1
									from	table(pls_grupos_pck.obter_procs_grupo_servico(a.nr_seq_grupo_servico, ie_origem_proced_w,cd_procedimento_w)) grupo)))
	and	((coalesce(a.nr_seq_grupo_prestador::text, '') = '')      or (	exists (	select	1
										from	table(pls_grupos_pck.obter_prestadores_grupo(a.nr_seq_grupo_prestador)) x
										where	x.nr_seq_prestador = nr_seq_prestador_exec_w )))
	and	((coalesce(a.ie_preco::text, '') = '') or (a.ie_preco = ie_preco_plano_w))
	and	((coalesce(a.ie_via_acesso::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_w))
	and	((coalesce(a.ie_tipo_segurado::text, '') = '') or (a.ie_tipo_segurado = ie_tipo_segurado_w))
	and	((coalesce(a.ie_apresentacao::text, '') = '') or (a.ie_apresentacao = 'T') or (a.ie_apresentacao = ie_apresentacao_w))
	and ( coalesce(a.ie_origem_protocolo::text, '') = '' or a.ie_origem_protocolo = ie_origem_protocolo_w)
	order by coalesce(a.cd_procedimento,0),
		coalesce(a.cd_grupo_proc,0),
		coalesce(a.cd_especialidade,0),
		coalesce(a.cd_area_procedimento,0),
		coalesce(a.nr_seq_prestador,0),
		coalesce(a.nr_seq_tipo_prestador,0),
		coalesce(a.ie_tipo_guia,0),
		coalesce(a.cd_edicao_amb,0),
		coalesce(a.nr_seq_grupo_servico,0),
		coalesce(a.nr_seq_grupo_prestador,0),
		a.ie_tipo_conta,
		coalesce(a.ie_preco,0),
		coalesce(a.ie_tipo_segurado,0),
		coalesce(a.ie_origem_protocolo, ' '); --nvl com espaco para deixar antes do primeiro valor valido do campo que e 'A'
C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_regra_execucao,
		a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_grupo_servico,
		a.nr_seq_grupo_prestador,
		a.ie_participacao,
		a.ie_abrir_execucao,
		a.nr_seq_grupo_produto,
		coalesce(a.ie_tipo_intercambio, 'X') ie_tipo_intercambio
	from	pls_regra_preco_qtde_proc	a
	where	a.ie_situacao		= 'A'
	and	a.cd_estabelecimento	= cd_estabelecimento_p
	and	dt_procedimento_w	between a.dt_inicio_vigencia and fim_dia(coalesce(a.dt_fim_vigencia,dt_procedimento_w))
	and	((coalesce(a.nr_seq_prestador::text, '') = '') 	or (a.nr_seq_prestador 	= nr_seq_prestador_exec_w))
	and	((coalesce(a.cd_procedimento::text, '') = '')	or (a.cd_procedimento	= cd_procedimento_w and a.ie_origem_proced = ie_origem_proced_w))
	and	((coalesce(a.cd_grupo_proc::text, '') = '')	or (a.cd_grupo_proc	= cd_grupo_proc_w))
	and	((coalesce(a.cd_especialidade::text, '') = '')	or (a.cd_especialidade	= cd_especialidade_w))
	and	((coalesce(a.cd_area_procedimento::text, '') = '')	or (a.cd_area_procedimento = cd_area_procedimento_w))
	and	((coalesce(a.nr_seq_tipo_prestador::text, '') = '') or (a.nr_seq_tipo_prestador = nr_seq_tipo_prestador_w))
	and	((a.ie_tipo_guia 	= ie_tipo_guia_w) or (coalesce(a.ie_tipo_guia::text, '') = '' ))
	and	((coalesce(a.cd_edicao_amb::text, '') = '') 	or (a.cd_edicao_amb = cd_edicao_amb_w))
	and	((coalesce(a.ie_tipo_conta::text, '') = '') 	or (a.ie_tipo_conta = 'T') or (a.ie_tipo_conta = ie_tipo_conta_w) or
		(ie_tipo_conta_w = 'C' AND a.ie_tipo_conta = 'O'))
	and	((coalesce(a.nr_seq_grupo_servico::text, '') = '') or (exists (SELECT	1
									from	pls_grupo_servico_tm grupo
									where	grupo.nr_seq_grupo_servico = a.nr_seq_grupo_servico
									and	grupo.ie_origem_proced = ie_origem_proced_w
									and	grupo.cd_procedimento = cd_procedimento_w)))
	and	((coalesce(a.nr_seq_grupo_prestador::text, '') = '')      or (	exists (	select	1
										from	table(pls_grupos_pck.obter_prestadores_grupo(a.nr_seq_grupo_prestador)) x
										where	x.nr_seq_prestador = nr_seq_prestador_exec_w )))
	and	((coalesce(a.ie_preco::text, '') = '') or (a.ie_preco = ie_preco_plano_w))
	and	((coalesce(a.ie_via_acesso::text, '') = '') or (a.ie_via_acesso = ie_via_acesso_w))
	and	((coalesce(a.ie_tipo_segurado::text, '') = '') or (a.ie_tipo_segurado = ie_tipo_segurado_w))
		and	((coalesce(a.ie_apresentacao::text, '') = '') or (a.ie_apresentacao = 'T') or (a.ie_apresentacao = ie_apresentacao_w))
	and ( coalesce(a.ie_origem_protocolo::text, '') = '' or a.ie_origem_protocolo = ie_origem_protocolo_w)
	order by coalesce(a.cd_procedimento,0),
		coalesce(a.cd_grupo_proc,0),
		coalesce(a.cd_especialidade,0),
		coalesce(a.cd_area_procedimento,0),
		coalesce(a.nr_seq_prestador,0),
		coalesce(a.nr_seq_tipo_prestador,0),
		coalesce(a.ie_tipo_guia,0),
		coalesce(a.cd_edicao_amb,0),
		coalesce(a.nr_seq_grupo_servico,0),
		coalesce(a.nr_seq_grupo_prestador,0),
		a.ie_tipo_conta,
		coalesce(a.ie_preco,0),
		coalesce(a.ie_tipo_segurado,0),
		coalesce(a.ie_origem_protocolo, ' ');--nvl com espaco para deixar antes do primeiro valor valido do campo que e 'A'
C03 CURSOR FOR
	SELECT	a.nr_sequencia,
		coalesce(a.tx_procedimento,100),
		coalesce(a.tx_medico,100),
		coalesce(a.tx_custo_operacional,100),
		coalesce(a.tx_material,100),
		nr_seq_taxa_item,
		coalesce(a.qt_exec_max,100),
		coalesce(a.qt_exec_min,0),
		a.ie_via_acesso
	from	pls_regra_preco_tx_proc	a
	where	a.ie_situacao	= 'A'
	and	a.nr_seq_regra	= nr_seq_regra_w
	order by coalesce(a.qt_exec_min,0);
	
procedure calibrar_vl_taxas( 	nr_seq_conta_proc_p		pls_conta_proc.nr_sequencia%type, 
				qt_procedimento_p		pls_conta_proc.qt_procedimento_imp%type,  
				vl_taxa_servico_imp_p		pls_conta_proc.vl_taxa_servico_imp%type,  
				vl_taxa_co_imp_p		pls_conta_proc.vl_taxa_co_imp%type, 
				vl_taxa_material_imp_p 		pls_conta_proc.vl_taxa_material_imp%type, 
				vl_material_ptu_imp_orig_p	pls_conta_proc.vl_material_ptu_imp%type,
				vl_procedimento_ptu_imp_orig_p	pls_conta_proc.vl_procedimento_ptu_imp%type,	
				vl_co_ptu_imp_orig_p		pls_conta_proc.vl_co_ptu_imp%type,
				nr_seq_novo_proc_w		pls_conta_proc.nr_sequencia%type
				) is 

qt_procedimento_w		pls_conta_proc.qt_procedimento_imp%type;
vl_taxa_servico_imp_w		pls_conta_proc.vl_taxa_servico_imp%type;				
vl_taxa_co_imp_w		pls_conta_proc.vl_taxa_co_imp%type;
vl_taxa_material_imp_w 		pls_conta_proc.vl_taxa_material_imp%type;

vl_ajus_taxa_servico_imp_w	pls_conta_proc.vl_taxa_servico_imp%type := 0;				
vl_ajus_taxa_co_imp_w		pls_conta_proc.vl_taxa_co_imp%type := 0;
vl_ajus_taxa_material_imp_w 	pls_conta_proc.vl_taxa_material_imp%type := 0;
vl_ajus_mat_imp_w		pls_conta_proc.vl_taxa_material_imp%type := 0;
vl_ajus_proc_imp_w		pls_conta_proc.vl_taxa_servico_imp%type := 0;
vl_ajus_co_imp_w		pls_conta_proc.vl_taxa_co_imp%type := 0;	

vl_material_ptu_imp_w		pls_conta_proc.vl_material_ptu_imp%type := 0;
vl_procedimento_ptu_imp_w	pls_conta_proc.vl_procedimento_ptu_imp%type := 0;
vl_co_ptu_imp_w			pls_conta_proc.vl_co_ptu_imp%type := 0;
ie_atualizou_distrib_tx_w	varchar(1) := 'N';
		
BEGIN
	
	select 	sum(qt_procedimento_imp) 	qt_procedimento_imp,
		sum(vl_taxa_servico_imp) 	vl_taxa_servico_imp,
		sum(vl_taxa_co_imp) 		vl_taxa_co_imp,
		sum(vl_taxa_material_imp) 	vl_taxa_material_imp,
		sum(vl_material_ptu_imp)	vl_material_ptu_imp,
		sum(vl_procedimento_ptu_imp)	vl_procedimento_ptu_imp,
		sum(vl_co_ptu_imp)	vl_co_ptu_imp
	into STRICT	qt_procedimento_w,	
	        vl_taxa_servico_imp_w,	
	        vl_taxa_co_imp_w,	
	        vl_taxa_material_imp_w,
		vl_material_ptu_imp_w,
		vl_procedimento_ptu_imp_w,
		vl_co_ptu_imp_w
	from (
		SELECT 	qt_procedimento_imp,
			round((coalesce(vl_taxa_servico_imp,0))::numeric,2) vl_taxa_servico_imp,
			round((coalesce(vl_taxa_co_imp,0))::numeric,2) vl_taxa_co_imp,
			round((coalesce(vl_taxa_material_imp,0))::numeric,2) vl_taxa_material_imp,
			round((coalesce(vl_material_ptu_imp,0))::numeric,2) vl_material_ptu_imp,
			round((coalesce(vl_procedimento_ptu_imp,0))::numeric,2) vl_procedimento_ptu_imp,
			round((coalesce(vl_co_ptu_imp,0))::numeric,2) vl_co_ptu_imp
		from	pls_conta_proc
		where 	nr_seq_proc_princ = nr_seq_conta_proc_w
		
union all

		SELECT 	qt_procedimento_imp,
			round((coalesce(vl_taxa_servico_imp,0))::numeric,2),
			round((coalesce(vl_taxa_co_imp,0))::numeric,2),
			round((coalesce(vl_taxa_material_imp,0))::numeric,2),
			round((coalesce(vl_material_ptu_imp,0))::numeric,2) vl_material_ptu_imp,
			round((coalesce(vl_procedimento_ptu_imp,0))::numeric,2) vl_procedimento_ptu_imp,
			round((coalesce(vl_co_ptu_imp,0))::numeric,2) vl_co_ptu_imp
		from	pls_conta_proc
		where 	nr_sequencia = nr_seq_conta_proc_w
	) alias43;
		
	if (qt_procedimento_w = qt_procedimento_p) then
	
		if ( vl_taxa_servico_imp_w != vl_taxa_servico_imp_p) then
		
			vl_ajus_taxa_servico_imp_w := vl_taxa_servico_imp_w - vl_taxa_servico_imp_p;
		
		end if;
		
		if ( vl_taxa_co_imp_w != vl_taxa_co_imp_p) then
		
			vl_ajus_taxa_co_imp_w := vl_taxa_co_imp_w - vl_taxa_co_imp_p;
		
		end if;
		
		if ( vl_taxa_material_imp_w != vl_taxa_material_imp_p) then
		
			vl_ajus_taxa_material_imp_w := vl_taxa_material_imp_w - vl_taxa_material_imp_p;
		
		end if;
			
		--divergencia de arredodamento nas taxas do item ou nos subvalores(filme, co, medico)
		if (vl_ajus_taxa_servico_imp_w != 0 or vl_ajus_taxa_co_imp_w != 0 or vl_ajus_taxa_material_imp_w != 0) then

			update 	pls_conta_proc
			set	vl_taxa_material_imp 	= vl_taxa_material_imp	- vl_ajus_taxa_material_imp_w,
				vl_taxa_co_imp 		= vl_taxa_co_imp - vl_ajus_taxa_co_imp_w,
				vl_taxa_servico_imp 	= vl_taxa_servico_imp - vl_ajus_taxa_servico_imp_w			
			where 	nr_sequencia = nr_seq_conta_proc_p;
			
			ie_atualizou_distrib_tx_w := 'S';
		
		end if;
		
		if ( vl_material_ptu_imp_w != vl_material_ptu_imp_orig_p) then
		
			vl_ajus_mat_imp_w := vl_material_ptu_imp_w - vl_material_ptu_imp_orig_p;
		
		end if;
		
		if ( vl_procedimento_ptu_imp_w != vl_procedimento_ptu_imp_orig_p) then
		
			vl_ajus_proc_imp_w := vl_procedimento_ptu_imp_w - vl_procedimento_ptu_imp_orig_p;
		
		end if;
		
		if ( vl_co_ptu_imp_w != vl_co_ptu_imp_orig_p) then
		
			vl_ajus_co_imp_w := vl_co_ptu_imp_w - vl_co_ptu_imp_orig_p;
		
		end if;
		
		if (vl_ajus_mat_imp_w != 0 or vl_ajus_proc_imp_w != 0 or vl_ajus_co_imp_w != 0) then
			
			
			if ( ie_atualizou_distrib_tx_w = 'S') then
			
				update 	pls_conta_proc
				set	vl_material_ptu_imp	= vl_material_ptu_imp 	  - vl_ajus_mat_imp_w,
					vl_procedimento_ptu_imp = vl_procedimento_ptu_imp - vl_ajus_proc_imp_w,
					vl_co_ptu_imp		= vl_co_ptu_imp 	  - vl_ajus_co_imp_w			
				where 	nr_sequencia = nr_seq_novo_proc_w;
			else
				update 	pls_conta_proc
				set	vl_material_ptu_imp	= vl_material_ptu_imp - vl_ajus_mat_imp_w,
					vl_procedimento_ptu_imp = vl_procedimento_ptu_imp - vl_ajus_proc_imp_w,
					vl_co_ptu_imp		= vl_co_ptu_imp - vl_ajus_co_imp_w			
				where 	nr_sequencia = nr_seq_conta_proc_p;
			end if;
			
		end if;
		
	
	end if;
	
end;
	
begin

select 	max(ie_considerar_glosados)
into STRICT ie_considerar_glosados_w
from	pls_parametros	
where 	cd_estabelecimento = cd_estabelecimento_p;

if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	nr_seq_conta_w	:= nr_seq_conta_p;
elsif (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then
	select	nr_seq_conta
	into STRICT	nr_seq_conta_w
	from	pls_conta_proc
	where	nr_sequencia	= nr_seq_conta_proc_p;
end if;
/* Obter dados da conta */

select	nr_seq_prestador_exec,
	coalesce(dt_atendimento_referencia, coalesce(dt_autorizacao, coalesce(dt_entrada, clock_timestamp()))),
	nr_seq_segurado,
	ie_tipo_partic_prof,
	ie_tipo_guia,
	nr_seq_tipo_acomodacao,
	nr_seq_tipo_atendimento,
	nr_seq_clinica,
	trunc(coalesce(dt_alta, clock_timestamp()) - dt_entrada) qt_dias_internacao,
	cd_medico_executor,
	nr_seq_cbo_saude,
	ie_carater_internacao,
	ie_tipo_acomodacao_ptu,
	coalesce(ie_tipo_conta,'O'),
	nr_seq_protocolo,
	ie_tipo_consulta,
	ie_tipo_segurado,
	pls_obter_dados_conta(nr_sequencia, 'TI1') ie_tipo_intercambio,
	nr_seq_tipo_conta,
	ie_regime_atendimento,
	ie_saude_ocupacional
into STRICT	nr_seq_prestador_exec_w,
	dt_conta_w,
	nr_seq_segurado_w,
	ie_tipo_partic_prof_w,
	ie_tipo_guia_w,
	nr_seq_tipo_acomodacao_w,
	nr_seq_tipo_atendimento_w,
	nr_seq_clinica_w,
	qt_dias_internacao_w,
	cd_medico_conta_w,
	nr_seq_cbo_saude_w,
	ie_carater_internacao_w,
	ie_tipo_acomodacao_w,
	ie_tipo_conta_w,
	nr_seq_protocolo_w,
	dados_conta_w.ie_tipo_consulta,
	ie_tipo_segurado_w,
	ie_tipo_inter_conta_w,
	dados_conta_w.nr_seq_tipo_conta,
	ie_regime_atendimento_w,
	ie_saude_ocupacional_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_w;

ie_conta_internacao_w	:= substr(pls_obter_se_internado(nr_seq_conta_w,'X'),1,1);

select	count(1)
into STRICT	qt_edicao_amb_w
from	pls_regra_preco_qtde_proc
where	(cd_edicao_amb IS NOT NULL AND cd_edicao_amb::text <> '');

select	max(nr_seq_prestador),
		max(ie_apresentacao),
		max(ie_origem_Protocolo)
into STRICT	dados_prestador_prot_w.nr_seq_prestador,
		ie_apresentacao_w,
		ie_origem_protocolo_w
from	pls_protocolo_conta
where	nr_sequencia	= nr_seq_protocolo_w;

if (dados_prestador_prot_w.nr_seq_prestador IS NOT NULL AND dados_prestador_prot_w.nr_seq_prestador::text <> '') then
	select	max(nr_seq_tipo_prestador),
		max(nr_seq_classificacao),
		max(ie_tipo_vinculo),
		max(cd_prestador)
	into STRICT	dados_prestador_prot_w.nr_seq_tipo_prestador,
		dados_prestador_prot_w.nr_seq_classificacao,
		dados_prestador_prot_w.ie_tipo_vinculo,
		dados_prestador_prot_w.cd_prestador
	from	pls_prestador
	where	nr_sequencia	= dados_prestador_prot_w.nr_seq_prestador;
end if;

select	max(nr_seq_tipo_prestador),
	max(nr_seq_classificacao)
into STRICT	nr_seq_tipo_prestador_w,
	nr_seq_classificacao_w
from	pls_prestador
where	nr_sequencia	= nr_seq_prestador_exec_w;

begin
select	coalesce(nr_seq_plano,0),
	coalesce(nr_seq_contrato,0),
	pls_obter_conv_cat_segurado(nr_sequencia, 1),
	pls_obter_conv_cat_segurado(nr_sequencia, 2),
	coalesce(ie_pcmso,'N'),
	nr_seq_intercambio,
	nr_seq_congenere
into STRICT	nr_seq_plano_w,
	nr_seq_contrato_w,
	cd_convenio_w,
	cd_categoria_w,
	ie_pcmso_w,
	nr_seq_intercambio_w,
	nr_seq_congenere_seg_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_w;
exception
	when others then
	nr_seq_plano_w	:= null;
end;
if (nr_seq_tipo_acomodacao_w IS NOT NULL AND nr_seq_tipo_acomodacao_w::text <> '') then
	begin
		select	max(nr_seq_categoria)
		into STRICT	nr_seq_categoria_w
		from	pls_regra_categoria
		where	nr_seq_tipo_acomodacao	= nr_seq_tipo_acomodacao_w;
	exception
	when others then
		nr_seq_categoria_w := null;
	end;
end if;

begin
select	ie_preco,
	nr_seq_outorgante,
	ie_tipo_contratacao
into STRICT	ie_preco_plano_w,
	nr_seq_outorgante_w,
	ie_tipo_contratacao_w
from	pls_plano
where	nr_sequencia	= nr_seq_plano_w;
exception
	when others then
	ie_preco_plano_w	:= '0';
	nr_seq_outorgante_w	:= 0;
end;

select	coalesce(max(b.nr_sequencia),0)
into STRICT	nr_seq_congenere_outorg_w
from	pls_congenere b,
	pls_outorgante a
where	a.cd_cgc_outorgante	= b.cd_cgc
and	a.cd_estabelecimento	= cd_estabelecimento_p;

if (nr_seq_congenere_seg_w IS NOT NULL AND nr_seq_congenere_seg_w::text <> '') and (nr_seq_congenere_seg_w <> nr_seq_congenere_outorg_w) then
	nr_seq_congenere_w	:= nr_seq_congenere_seg_w;
end if;

select	coalesce(max(a.sg_estado),'X'),
	coalesce(max(ie_nacional), 'N')
into STRICT	sg_estado_int_w,
	ie_nacional_w
from	pessoa_juridica	a,
	pls_congenere	b
where	a.cd_cgc	= b.cd_cgc
and	b.nr_sequencia	= nr_seq_congenere_w;

if (ie_nacional_w	= 'S') then
	ie_tipo_intercambio_w := 'N';	-- Nacional
elsif (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
	if (sg_estado_w = sg_estado_int_w) then
		ie_tipo_intercambio_w	:= 'E';
	else
		ie_tipo_intercambio_w	:= 'N';
	end if;
else
	ie_tipo_intercambio_w	:= 'A';
end if;

qt_cursor_w := 0;

open C01;
loop
fetch C01 into
	cd_procedimento_w,
	ie_origem_proced_w,
	qt_procedimento_w,
	vl_procedimento_w,
	vl_proc_unit_w,
	vl_proc_copartic_w,
	vl_medico_w,
	vl_pag_medico_conta_w,
	vl_custo_operacional_w,
	vl_materiais_w,
	vl_anestesista_w,
	vl_auxiliares_w,
	vl_proc_unitario_w,
	dt_procedimento_w,
	ie_tipo_despesa_w,
	nr_seq_conta_proc_w,
	vl_procedimento_imp_w,
	vl_total_partic_w,
	ie_tecnica_utilizada_w,
	nr_seq_rp_combinada_w,
	ie_via_acesso_w,
	vl_taxa_servico_imp_w,
	vl_taxa_co_imp_w,
	vl_taxa_material_imp_w,
	qt_proc_original_w,
	vl_material_ptu_imp_orig_w,
	vl_procedimento_ptu_imp_orig_w,
	vl_co_ptu_imp_orig_w	;
EXIT WHEN NOT FOUND; /* apply on C01 */

		begin
		dt_preco_w	:= pls_obter_data_preco_item(nr_seq_conta_proc_w, 'P');

		ie_termina_cursor_w		:= 'N';
		qt_total_proc_ww		:= 1;
		nr_seq_regra_w			:= 0;
		vl_total_procedimento_w		:= 0;
		qt_procedimento_regra_w		:= 0;
		qt_procedimento_regra_ww	:= 0;

		/* Obter a estrutura do procedimento */

		SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w;

		if (qt_edicao_amb_w > 0) then
			dados_regra_preco_proc_w := pls_define_preco_proc(	cd_estabelecimento_p, nr_seq_prestador_exec_w, nr_seq_categoria_w, dt_preco_w, null, cd_procedimento_w, ie_origem_proced_w, nr_seq_tipo_acomodacao_w, nr_seq_tipo_atendimento_w, nr_seq_clinica_w, nr_seq_plano_w, 'P', nr_seq_contrato_w, 0, nr_seq_conta_proc_w, 'N', cd_convenio_w, cd_categoria_w, ie_tipo_contratacao_w, qt_dias_internacao_w, nr_seq_segurado_w, nr_seq_intercambio_w, '', nr_seq_classificacao_w, cd_medico_conta_w, ie_conta_internacao_w, ie_tecnica_utilizada_w, ie_tipo_guia_w, ie_tipo_intercambio_w, sg_estado_int_w, nr_seq_cbo_saude_w, ie_carater_internacao_w, dt_procedimento_w, ie_tipo_acomodacao_w, nr_seq_rp_combinada_w, dados_prestador_prot_w, null, dados_conta_w, dados_regra_preco_proc_w, null, null, ie_regime_atendimento_w, null, ie_saude_ocupacional_w);

						cd_edicao_amb_w	:= dados_regra_preco_proc_w.cd_edicao_amb;
		end if;

		if (pls_util_cta_pck.usar_novo_agrup = 'S') then

			for r_c04_w in C04() loop
				begin
				ie_grupo_produto_w		:= 'S';
				ie_pertence_intercambio_w	:= 'S';
				
				if (r_c04_w.nr_seq_grupo_produto IS NOT NULL AND r_c04_w.nr_seq_grupo_produto::text <> '') then
					ie_grupo_produto_w := pls_se_grupo_preco_produto(r_c04_w.nr_seq_grupo_produto, nr_seq_plano_w);
				end if;

				if	((r_c04_w.ie_tipo_intercambio = 'X') or (r_c04_w.ie_tipo_intercambio = ie_tipo_inter_conta_w) or
					 ((r_c04_w.ie_tipo_intercambio = 'A') and (ie_tipo_inter_conta_w in ('N', 'E')))) then
					
					ie_pertence_intercambio_w := 'S';
				else
				
					ie_pertence_intercambio_w := 'N';
				end if;
					

					if (ie_grupo_produto_w = 'S') and -- Verifica se o produto pertence ao plano OS 1165825
						(ie_pertence_intercambio_w = 'S') then
						nr_seq_regra_w			:= r_c04_w.nr_sequencia;
						ie_regra_execucao_w		:= r_c04_w.ie_regra_execucao;
						ie_abrir_execucao_w		:= r_c04_w.ie_abrir_execucao;
						cd_area_procedimento_regra_w	:= r_c04_w.cd_area_procedimento;
						cd_especialidade_regra_w	:= r_c04_w.cd_especialidade;
						cd_grupo_proc_regra_w		:= r_c04_w.cd_grupo_proc;
						cd_procedimento_regra_w		:= r_c04_w.cd_procedimento;
						ie_origem_proced_regra_w	:= r_c04_w.ie_origem_proced;
						nr_seq_grupo_servico_w		:= r_c04_w.nr_seq_grupo_servico;
						ie_participacao_w		:= r_c04_w.ie_participacao;
						nr_seq_grupo_prestador_w	:= r_c04_w.nr_seq_grupo_prestador;
					end if;
				end;
			end loop;

		else

			for r_c02_w in C02() loop
				begin
				ie_grupo_produto_w		:= 'S';
				ie_pertence_intercambio_w	:= 'S';
				if (r_c02_w.nr_seq_grupo_produto IS NOT NULL AND r_c02_w.nr_seq_grupo_produto::text <> '') then
					ie_grupo_produto_w := pls_se_grupo_preco_produto(r_c02_w.nr_seq_grupo_produto, nr_seq_plano_w);
				end if;
				
				if	((r_c02_w.ie_tipo_intercambio = 'X') or (r_c02_w.ie_tipo_intercambio = ie_tipo_inter_conta_w) or
					 ((r_c02_w.ie_tipo_intercambio = 'A') and (ie_tipo_inter_conta_w in ('N', 'E')))) then
					
					ie_pertence_intercambio_w := 'S';
				else
				
					ie_pertence_intercambio_w := 'N';
				end if;

					if (ie_grupo_produto_w = 'S') and -- Verifica se o produto pertence ao plano OS 1165825
						(ie_pertence_intercambio_w = 'S') then
						nr_seq_regra_w			:= r_c02_w.nr_sequencia;
						ie_regra_execucao_w		:= r_c02_w.ie_regra_execucao;
						ie_abrir_execucao_w		:= r_c02_w.ie_abrir_execucao;
						cd_area_procedimento_regra_w	:= r_c02_w.cd_area_procedimento;
						cd_especialidade_regra_w	:= r_c02_w.cd_especialidade;
						cd_grupo_proc_regra_w		:= r_c02_w.cd_grupo_proc;
						cd_procedimento_regra_w		:= r_c02_w.cd_procedimento;
						ie_origem_proced_regra_w	:= r_c02_w.ie_origem_proced;
						nr_seq_grupo_servico_w		:= r_c02_w.nr_seq_grupo_servico;
						ie_participacao_w		:= r_c02_w.ie_participacao;
						nr_seq_grupo_prestador_w	:= r_c02_w.nr_seq_grupo_prestador;
					end if;
				end;
			end loop;
		end if;

		if (dt_procedimento_w IS NOT NULL AND dt_procedimento_w::text <> '') then
			dt_conta_w	:= dt_procedimento_w;
		end if;

		qt_participante_w	:= 0;
		ie_entra_regras_w	:= 'S';

		-- Retirado pois o count nao era utilizado em nenhum local. ---aedemuth

		/*if	(nvl(nr_seq_regra_w,0) > 0) then
			if	(ie_regra_execucao_w 	= 'C') then
				select 	nvl(sum(a.qt_procedimento_imp),0)
				into	qt_exec_w
				from	pls_conta_proc	a
				where	a.nr_seq_conta			= nr_seq_conta_w
				and	a.nr_seq_regra_qtde_exec	= nr_seq_regra_w
				and	a.ie_status <> 'D'
				and	((nvl(a.ie_glosa,'N')	<> 'S') or (ie_tipo_conta_w = 'I'));
			elsif	(ie_regra_execucao_w 	= 'D') then
				select	sum(qt_procedimento_imp)
				into	qt_exec_w
				from	pls_conta_proc_v
				where	nr_seq_segurado		= nr_seq_segurado_w
				and	nr_seq_regra_qtde_exec	= nr_seq_regra_w
				and	ie_status		!= 'D'
				and	((ie_glosa = 'N') 	or (ie_tipo_conta	= 'I'))
				and	dt_procedimento between trunc(dt_conta_w, 'dd') and trunc(dt_conta_w, 'dd')  + 86399/86400;

			elsif	(ie_regra_execucao_w 	= 'M') then
				select 	nvl(sum(a.qt_procedimento_imp),0)
				into	qt_exec_w
				from	pls_conta_proc	a,
					pls_conta	b
				where	b.nr_sequencia			= a.nr_seq_conta
				and	b.nr_seq_segurado		= nr_seq_segurado_w
				and	a.nr_seq_regra_qtde_exec	= nr_seq_regra_w
				and	((nvl(a.ie_glosa,'N')	<> 'S') or (b.ie_tipo_conta = 'I'))
				and	a.ie_status <> 'D'
				and	trunc(a.dt_procedimento, 'month') between trunc(dt_conta_w, 'month') and trunc(dt_conta_w, 'month');
			end if;

			Somar o total ja existente com o procedimento atual do cursor
			qt_exec_w	:= qt_exec_w + 1;
		end if;*/
		select	max(nr_sequencia)
		into STRICT	nr_seq_proc_w
		from	pls_conta_proc
		where	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w
		and	nr_seq_conta		= nr_seq_conta_w
		and	coalesce(nr_seq_proc_princ::text, '') = ''
		and	coalesce(nr_seq_regra_qtde_exec::text, '') = ''
		and	((coalesce(ie_glosa,'N')	<> 'S') or (ie_tipo_conta_w = 'I'))
		and	ie_status <> 'D';

		--Essa variavel define o valor unitario com 2 casas decimais com base no valor total enviado dividido pela quantidade e servira de apoio para

		--distribuicao de sobra de valor entre procedimentos abertos. Alguns casos o valot total nao base com a multiplicacao de quantidade por valor unitario

		--devido a restricao de 2 casas decimais.

		--Ex: procedimento A quantidade 9 valor total 4499,76 valor unitario 499,97(Seria 499,97333.... mas devido a 2 casas, perde-se valor ) e qtde X val unit acaba ficando

		--4499,73, entao esses 3 centavos devem ser distribuidos entre os novos procedimentos lancados.
		vl_proc_desdobramento_w := dividir(vl_procedimento_imp_w, qt_procedimento_w);

		--Calcula em centavos a diferenca, para ratear entre os procedimentos lancados.
		qt_centavos_resto_div_proc_w :=  (vl_procedimento_imp_w - (vl_proc_desdobramento_w * qt_procedimento_w)) * 100;

		if (qt_procedimento_w > 1) then
			if (ie_abrir_execucao_w = 'S') then
				qt_procedimento_imp_w := qt_procedimento_w;

				open C03;
				loop
				fetch C03 into
					nr_seq_regra_tx_w,
					tx_procedimento_w,
					tx_medico_w,
					tx_custo_operacional_w,
					tx_material_w,
					nr_seq_taxa_item_w,
					qt_exec_max_w,
					qt_exec_min_w,
					ie_via_acesso_ww;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin
					for i in qt_exec_min_w.. qt_exec_max_w loop
						begin

						if (ie_termina_cursor_w	= 'N') then
							if (qt_exec_max_w IS NOT NULL AND qt_exec_max_w::text <> '') then

								if (qt_procedimento_w 	> 1) then
									nr_seq_proc_w := pls_duplicar_conta_proc(nr_seq_conta_proc_w, nr_seq_regra_w, 1, nm_usuario_p, nr_seq_proc_w);
									qt_procedimento_w := qt_procedimento_w - 1;
									update	pls_conta_proc
									set	qt_procedimento_imp	= qt_procedimento_w,
										vl_procedimento_imp	= (qt_procedimento_w * vl_unitario_imp),
										qt_procedimento		= qt_procedimento_w,
										nr_seq_regra_qtde_exec 	= nr_seq_regra_w,
										ie_regra_qtde_execucao	= 'N',
										vl_liberado		= (qt_procedimento_w * vl_unitario),
										vl_taxa_servico_imp	= dividir_sem_round(vl_taxa_servico_imp,(qt_procedimento_w+1))* qt_procedimento_w,
										vl_taxa_co_imp		= dividir_sem_round(vl_taxa_co_imp,(qt_procedimento_w+1))* qt_procedimento_w,
										vl_taxa_material_imp	= dividir_sem_round(vl_taxa_material_imp,(qt_procedimento_w+1))* qt_procedimento_w,
										vl_material_ptu_imp	= dividir_sem_round(vl_material_ptu_imp,(qt_procedimento_w+1))* qt_procedimento_w,
										vl_procedimento_ptu_imp	= dividir_sem_round(vl_procedimento_ptu_imp,(qt_procedimento_w+1))* qt_procedimento_w,
										vl_co_ptu_imp		= dividir_sem_round(vl_co_ptu_imp,(qt_procedimento_w+1))* qt_procedimento_w,
										ie_via_acesso		= CASE WHEN ie_via_acesso_ww = NULL THEN  ie_via_acesso  ELSE ie_via_acesso_ww END
									where		nr_sequencia		= nr_seq_conta_proc_w
									returning	vl_procedimento_imp into vl_procedimento_imp_ww;


									--Por exemplo Se a diferenca for de 3 centavos, entao quando estiver faltando 3 procedimentos para abrir, joga um centavo para cada um, de modo ao valor

									--total do procedimento origem + os procedimentos lancados baterem com o valor total informado.
									if (qt_procedimento_w <= qt_centavos_resto_div_proc_w) then

										update 	pls_conta_proc
										set 	vl_procedimento_imp = vl_procedimento_imp + 0.01,
												vl_unitario_imp		= vl_unitario_imp + 0.01
										where 	nr_sequencia = nr_seq_proc_w;

									end if;

								end if;
							end if;
						end if;
						end;
					end loop;

					end;
				end loop;
				close C03;
			else
				update	pls_conta_proc
				set	nr_seq_regra_qtde_exec 	= nr_seq_regra_w,
					ie_regra_qtde_execucao	= 'N'
				where	cd_procedimento		= cd_procedimento_w
				and	ie_origem_proced	= ie_origem_proced_w
				and	nr_seq_conta		= nr_seq_conta_w
				and	nr_sequencia		= nr_seq_conta_proc_w;
			end if;

			else
				update	pls_conta_proc
				set	nr_seq_regra_qtde_exec 	= nr_seq_regra_w,
					ie_regra_qtde_execucao	= 'N'
				where	nr_sequencia		= nr_seq_conta_proc_w;
		end if;

		end;
		
		
	--Casos onde um valor impar eh dividido por valor par, pode resultar em uma divisao que posteriormente ira liberar valor a maior no somatorio das taxas.

	--ex: 	 item com qtde 2 e vl_tx_mat = 9,13. abre em dois de 4,565 no vl_tx_mat_imp e isso vira em 4,57 no liberado, totalizando 9,14. Aqui ajusta esse tipo de situacao

	--Tambem pode ter casos onde um subvalor(co, mat ou med) seja impar com qtde total = 2 e ainda casos onde por exemplo o subvalor vl_co e impar

	--porem a taxa de mat seja impar(dependendo da tx intercambio) e nesse caso precisa arredondar corretamente os dois valores(quando ocorre problema de arredondamento

	--tanto na taxa quando em um dos 3 subvalores, necessita incrementar um e decrementar outro)
	calibrar_vl_taxas( nr_seq_conta_proc_w, qt_proc_original_w, coalesce(vl_taxa_servico_imp_w,0) ,
		coalesce(vl_taxa_co_imp_w,0), coalesce(vl_taxa_material_imp_w,0), coalesce(vl_material_ptu_imp_orig_w,0),
		coalesce(vl_procedimento_ptu_imp_orig_w, 0), coalesce(vl_co_ptu_imp_orig_w, 0), nr_seq_proc_w);
	
end loop;
close C01;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_abrir_proc_qtde_proc_valor ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

