-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_faturas_lote ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atencao:

ebcabral - OS 679993  - 11/12/2013 - O vencimento sera obtido no momento da geracao de titulos da fatura.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_camara_w			varchar(255);
ie_fatura_congenere_coop_w	varchar(10) 	:= 'N';
ie_tipo_cobranca_w		varchar(3);
ie_impedimento_cobranca_w	varchar(3);
ie_forma_impedimento_cobr_w	varchar(3);
ie_primeiro_loop_w		varchar(1)	:= 'S';	
ie_origem_w			varchar(1)	:= 'A';
vl_item_w			double precision;
vl_total_proc_w			double precision;
vl_item_ndc_w			double precision;	
nr_seq_congenere_fat_w		bigint;
nr_seq_congenere_ant_w		bigint	:= 0;
nr_seq_fatura_nova_w		bigint;
nr_seq_conta_pos_w		bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_evento_w			bigint;
nr_seq_conta_w			bigint;
nr_seq_fatura_w			bigint;
nr_seq_fatura_evento_w		bigint;
nr_seq_fatura_conta_w		bigint;
nr_seq_segurado_w		bigint;
nr_seq_pagador_w		pls_contrato_pagador.nr_sequencia%type;
nr_seq_congenere_w		bigint;
nr_seq_camara_w			bigint;
qt_dia_a500_w			bigint;
nr_seq_periodo_w		bigint;
nr_seq_regra_w			bigint;
nr_seq_acao_w			bigint;
nr_seq_segurado_ant_w		bigint	:= -99;
nr_seq_ops_congenere_w		bigint;
nr_seq_congenere_pesq_w		bigint;
nr_seq_pls_fatura_w		bigint;
nr_agrupamento_w		integer;
nr_agrupamento_event_w		integer;
qt_motivo_imp_cob_w		integer;
qt_dias_vencimento_w		integer	:= 0;
qt_dias_antes_a500_w		integer	:= 0;
dt_prev_envio_w			timestamp;
dt_vencimento_w			timestamp := null;
dt_primeira_mensalidade_w	timestamp;
dt_mes_competencia_w		timestamp;
cd_guia_referencia_w		varchar(20);
cd_cgc_contrato_w		pessoa_juridica.cd_cgc%type;
cd_pessoa_contrato_w		pessoa_fisica.cd_pessoa_fisica%type;
cd_cgc_operadora_w		pessoa_juridica.cd_cgc%type;
nr_seq_pag_contrato_w		pls_contrato_pagador.nr_sequencia%type;
nr_seq_pag_operadora_w		pls_contrato_pagador.nr_sequencia%type;
nr_seq_cong_w			bigint;
nr_seq_conta_pos_contab_w	w_pls_lote_fat_item.nr_seq_conta_pos_contab%type;
nr_seq_fat_proc_w		pls_fatura_proc.nr_sequencia%type;
nr_seq_fat_mat_w		pls_fatura_mat.nr_sequencia%type;
cd_operadora_empresa_w		pls_segurado.cd_operadora_empresa%type;
ie_gerar_fat_contab_w		pls_parametro_faturamento.ie_gerar_fat_contab%type;
nr_seq_pos_estab_taxa_w		w_pls_lote_fat_item.nr_seq_pos_estab_taxa%type;
nr_seq_pos_taxa_contab_w	w_pls_lote_fat_item.nr_seq_pos_taxa_contab%type;
dt_atendimento_ref_res_w	pls_conta.dt_atendimento_referencia%type;
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
nr_seq_congenere_prot_w		pls_protocolo_conta.nr_seq_congenere%type;
qt_regra_emp_w			integer;
ie_origem_protocolo_w		pls_protocolo_conta.ie_origem_protocolo%type;
dt_atendimento_referencia_w	pls_conta.dt_atendimento_referencia%type;
ie_benef_remido_w		pls_regra_div_fat_benef.ie_benef_remido%type;
ie_conta_w			varchar(2);
ie_tipo_lote_w			pls_lote_faturamento.ie_tipo_lote%type;


C01 CURSOR FOR
	SELECT	a.nr_seq_conta_pos,
		a.nr_seq_conta_proc,
		a.nr_seq_conta_mat,
		a.nr_seq_evento,
		a.nr_seq_segurado,
		a.nr_seq_conta,
		a.ie_tipo_cobranca,
		a.vl_item,
		a.ie_impedimento_cobranca,
		pls_obter_dados_segurado(a.nr_seq_segurado, 'NRCON'),
		a.vl_item_ndc,
		coalesce(a.ie_origem_item, 'A'),
		a.nr_seq_conta_pos_contab,
		nr_seq_pos_estab_taxa,
		nr_seq_pos_taxa_contab,
		-- Data utilizada para verificar o pagador rescindido
		(	SELECT	x.dt_atendimento_referencia
			from	pls_conta	x
			where	x.nr_sequencia	= a.nr_seq_conta) dt_atendimento_ref_res
	from	w_pls_lote_fat_item a
	where	a.nr_seq_lote	= nr_seq_lote_p
	and	a.nm_usuario	= nm_usuario_p
	and	a.ie_evento_lote = 'S'
	and	(a.nr_seq_evento IS NOT NULL AND a.nr_seq_evento::text <> '')
	order by
		a.ie_impedimento_cobranca desc,
		10, --nr_seq_congenere
		a.nr_seq_evento,
		a.nr_seq_conta;
		
C02 CURSOR FOR
	SELECT	a.nr_seq_conta,
		a.ie_impedimento_cobranca
	from	w_pls_lote_fat_item a
	where	a.nr_seq_lote 	= nr_seq_lote_p
	and	a.nm_usuario	= nm_usuario_p
	and	a.ie_evento_lote = 'S'
	and	(a.nr_seq_evento IS NOT NULL AND a.nr_seq_evento::text <> '')
	and	(a.ie_impedimento_cobranca IS NOT NULL AND a.ie_impedimento_cobranca::text <> '')
	and	exists (SELECT	1
			from	pls_fatura_conta x
			where	x.nr_seq_conta = a.nr_seq_conta
			
union

			select	1
			from	pls_fatura_conta x
			where	x.nr_seq_conta_sus = a.nr_seq_conta);
			


BEGIN
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	select	a.dt_prev_envio,
		a.nr_seq_regra_fat,
		a.dt_mesano_referencia,
		a.ie_tipo_lote
	into STRICT	dt_prev_envio_w,
		nr_seq_regra_w,
		dt_mes_competencia_w,
		ie_tipo_lote_w
	from	pls_lote_faturamento a
	where	a.nr_sequencia = nr_seq_lote_p;
	
	select	coalesce(max(ie_gerar_fat_contab),'N')
	into STRICT	ie_gerar_fat_contab_w
	from	pls_parametro_faturamento
	where	cd_estabelecimento	= cd_estabelecimento_p;
	
	select	count(1)
	into STRICT	qt_regra_emp_w
	from	pls_regra_divisao_fat_emp
	where	cd_estabelecimento	= cd_estabelecimento_p;

	open C01;
	loop
	fetch C01 into	
		nr_seq_conta_pos_w,
		nr_seq_conta_proc_w,
		nr_seq_conta_mat_w,
		nr_seq_evento_w,
		nr_seq_segurado_w,
		nr_seq_conta_w,
		ie_tipo_cobranca_w,
		vl_item_w,
		ie_impedimento_cobranca_w,
		nr_seq_congenere_fat_w,
		vl_item_ndc_w,
		ie_origem_w,
		nr_seq_conta_pos_contab_w,
		nr_seq_pos_estab_taxa_w,
		nr_seq_pos_taxa_contab_w,
		dt_atendimento_ref_res_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		if (ie_tipo_cobranca_w <> '5') or (coalesce(ie_tipo_cobranca_w::text, '') = '') then
		
			-- E a data utilizada para verificar se o pagador esta rescindido
			-- Usa-se por base a dt atendimento referencia da conta, e caso ela esteja
			-- null, e feito um tratamento aqui para utilizar o sysdate (tratativa antiga)
			if (coalesce(dt_atendimento_ref_res_w::text, '') = '') then
			
				dt_atendimento_ref_res_w := trunc(clock_timestamp(), 'dd');
			end if;
			
			select	max(coalesce(a.cd_guia_fat,coalesce(a.cd_guia_pos_estab,a.cd_guia_ok))),
				max(c.ie_tipo_protocolo),
				max(c.nr_seq_congenere),
				max(c.ie_origem_protocolo)
			into STRICT	cd_guia_referencia_w,
				ie_tipo_protocolo_w,
				nr_seq_congenere_prot_w,
				ie_origem_protocolo_w
			from	pls_conta a,
				pls_protocolo_conta c
			where	c.nr_sequencia = a.nr_seq_protocolo
			and	a.nr_sequencia = nr_seq_conta_w;
			
			select	dt_vencimento
			into STRICT	dt_vencimento_w
			from	pls_lote_faturamento
			where	nr_sequencia = nr_seq_lote_p;
			
			-- Buscar informacoes da conta
			if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') and
				((coalesce(nr_seq_segurado_w::text, '') = '') or (coalesce(nr_seq_conta_w::text, '') = '')) then
				select	b.nr_seq_segurado,
					b.nr_sequencia
				into STRICT	nr_seq_segurado_w,
					nr_seq_conta_w
				from	pls_conta_pos_cab_v b,
					pls_conta_proc a
				where	a.nr_seq_conta	= b.nr_sequencia
				and	a.nr_sequencia	= nr_seq_conta_proc_w;

			elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') and
				((coalesce(nr_seq_segurado_w::text, '') = '') or (coalesce(nr_seq_conta_w::text, '') = '')) then
				select	b.nr_seq_segurado,
					b.nr_sequencia
				into STRICT	nr_seq_segurado_w,
					nr_seq_conta_w
				from	pls_conta_pos_cab_v b,
					pls_conta_mat a
				where	a.nr_seq_conta	= b.nr_sequencia
				and	a.nr_sequencia	= nr_seq_conta_mat_w;
			end if;
			
			-------------- BUSCAR PAGADOR -------------- O trecho abaixo nao deve ser modificado - WCBERNARDINO - OS 691782
			-- pegar a date de referencia da conta -- JTRINDADE - OS 2033146
			select	max(dt_atendimento_referencia)
			into STRICT	dt_atendimento_referencia_w
			from	pls_conta
			where	nr_sequencia	= nr_seq_conta_w;
			
			-- verificar se o beneficiario e remido
			ie_benef_remido_w	:= pls_obter_se_benef_remido(nr_seq_segurado_w, dt_atendimento_referencia_w);
			
			-- se o beneficiario for remido buscar o pagador do beneficario
			if ( ie_benef_remido_w = 'S') then
				nr_seq_pagador_w	:= pls_obter_pagador_fea(nr_seq_segurado_w, dt_atendimento_referencia_w);
				nr_seq_congenere_pesq_w := pls_obter_congenere_remido(nr_seq_segurado_w, dt_atendimento_referencia_w);
				
			elsif (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') and (nr_seq_segurado_w <> nr_seq_segurado_ant_w) then
				nr_seq_pagador_w	:= null;
				nr_seq_pag_contrato_w	:= null;
				nr_seq_pag_operadora_w	:= null;
				
				select	nr_seq_congenere,
					nr_seq_ops_congenere,
					cd_operadora_empresa
				into STRICT	nr_seq_congenere_w,
					nr_seq_ops_congenere_w,
					cd_operadora_empresa_w
				from	pls_segurado a
				where	a.nr_sequencia	= nr_seq_segurado_w;
				
				if (ie_tipo_protocolo_w = 'R') or (ie_origem_protocolo_w = 'G') then
					nr_seq_congenere_w := coalesce(nr_seq_congenere_prot_w,nr_seq_congenere_w);
					
					if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
						nr_seq_ops_congenere_w := null;
						cd_operadora_empresa_w := null;
					end if;
				end if;
				
				-- Fazer estas validacoes somente se tiver gravado uma congenere de fundacao
				if (nr_seq_ops_congenere_w IS NOT NULL AND nr_seq_ops_congenere_w::text <> '') then
					select	max(ie_fatura_congenere_coop)
					into STRICT	ie_fatura_congenere_coop_w
					from	pls_congenere
					where	cd_estabelecimento	= cd_estabelecimento_p
					and	nr_sequencia		= nr_seq_ops_congenere_w;
					
					-- Verificar se utiliza o pagador da fundacao
					if (coalesce(ie_fatura_congenere_coop_w, 'N') = 'S') then
						select	max(nr_sequencia)
						into STRICT	nr_seq_pagador_w
						from	pls_contrato_pagador
						where	nr_seq_congenere	= nr_seq_ops_congenere_w
						and	coalesce(dt_rescisao::text, '') = '';
					end if;
					
					if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
						nr_seq_congenere_pesq_w	:= nr_seq_ops_congenere_w;
					else
						nr_seq_congenere_pesq_w	:= nr_seq_congenere_w;
					end if;
				else
					nr_seq_congenere_pesq_w	:= nr_seq_congenere_w;
				end if;
				
				-- Busca o pagador do segurado
				if (coalesce(nr_seq_pagador_w::text, '') = '') and (ie_tipo_protocolo_w != 'R') and (ie_origem_protocolo_w != 'G') then
					select	a.nr_seq_pagador
					into STRICT	nr_seq_pag_contrato_w
					from	pls_segurado a
					where	a.nr_sequencia	= nr_seq_segurado_w;
					
					-- Busca a PJ do contrato pagador
					select	max(cd_cgc),
						max(cd_pessoa_fisica)
					into STRICT	cd_cgc_contrato_w,
						cd_pessoa_contrato_w
					from	pls_contrato_pagador
					where	nr_sequencia = nr_seq_pag_contrato_w
					and	coalesce(dt_rescisao, clock_timestamp()) >= dt_atendimento_ref_res_w;
				end if;
				
				-- Busca o pagador da operadora
				if (coalesce(nr_seq_pagador_w::text, '') = '') and (nr_seq_congenere_pesq_w IS NOT NULL AND nr_seq_congenere_pesq_w::text <> '') then
					select	max(a.nr_sequencia)
					into STRICT	nr_seq_pag_operadora_w
					from	pls_contrato_pagador a
					where	a.nr_seq_congenere = nr_seq_congenere_pesq_w
					and	coalesce(a.dt_rescisao, clock_timestamp()) >= dt_atendimento_ref_res_w;
					
					-- Busca a PJ do contrato pagador
					select	max(cd_cgc)
					into STRICT	cd_cgc_operadora_w
					from	pls_contrato_pagador
					where	nr_sequencia = nr_seq_pag_operadora_w;
				end if;
				
				-- Se nao encontrou PJ no contrato pagador, nao rescindido, descarta o pagador encontrado na operadora
				if (coalesce(cd_cgc_operadora_w::text, '') = '') then
					nr_seq_pag_operadora_w := null;
				end if;
				
				-- Se nao encontrou PJ no contrato pagador, nao rescindido, descarta o pagador encontrado no segurado
				if (coalesce(cd_cgc_contrato_w::text, '') = '') and (coalesce(cd_pessoa_contrato_w::text, '') = '') then
					nr_seq_pag_contrato_w := null;			
				end if;
				
				-- Se encontrou contrato vigente no segurado e contrato vigente na operadora
				if (nr_seq_pag_contrato_w IS NOT NULL AND nr_seq_pag_contrato_w::text <> '') and (nr_seq_pag_operadora_w IS NOT NULL AND nr_seq_pag_operadora_w::text <> '') then
					if (cd_cgc_contrato_w = cd_cgc_operadora_w) and ((coalesce(ie_fatura_congenere_coop_w,'N') = 'S') or (coalesce(nr_seq_ops_congenere_w::text, '') = '')) then
						nr_seq_pagador_w := nr_seq_pag_operadora_w;
					else
						nr_seq_pagador_w := nr_seq_pag_contrato_w;
					end if;
				end if;
				
				-- Se ainda nao encontrou pagador, prioriza o pagador do segurado e como segunda opcao utiliza o pagador da operadora
				if (coalesce(nr_seq_pagador_w::text, '') = '') then
					nr_seq_pagador_w := coalesce(nr_seq_pag_contrato_w,nr_seq_pag_operadora_w);
				end if;
				
				-- Verifica se e de camara
				if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') and (nr_seq_congenere_pesq_w IS NOT NULL AND nr_seq_congenere_pesq_w::text <> '') then
					select	max(a.nr_seq_camara)
					into STRICT	nr_seq_camara_w
					from	pls_congenere_camara a
					where	a.nr_seq_congenere	= nr_seq_congenere_pesq_w
					and	clock_timestamp() between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref;
				end if;
			
				-- pegar a date de referencia da conta -- JTRINDADE - OS 2033146
				select	max(dt_atendimento_referencia)
				into STRICT	dt_atendimento_referencia_w
				from	pls_conta
				where	nr_sequencia	= nr_seq_conta_w;
				
				-- verificar se o beneficiario e remido
				ie_benef_remido_w	:= pls_obter_se_benef_remido(nr_seq_segurado_w, dt_atendimento_referencia_w);
				
				-- se o beneficiario for remido buscar o pagador do beneficario
				if ( ie_benef_remido_w = 'S') then
					nr_seq_pagador_w	:= pls_obter_pagador_fea(nr_seq_segurado_w, dt_atendimento_referencia_w);
				end if;

			end if;
			-------------- FINAL DO BUSCAR PAGADOR --------------
			
			-- Se for cooperado o vencimento sera a data da primeira mensalidade 
			if (coalesce(dt_vencimento_w::text, '') = '') and (coalesce(nr_seq_congenere_pesq_w::text, '') = '') then
				select	max(dt_primeira_mensalidade)
				into STRICT	dt_primeira_mensalidade_w
				from	pls_contrato_pagador
				where	nr_sequencia	= nr_seq_pagador_w;
				
				dt_vencimento_w	:= coalesce(dt_primeira_mensalidade_w, clock_timestamp());
			end if;
			
			if (coalesce(dt_vencimento_w::text, '') = '') then
				dt_vencimento_w := clock_timestamp();
			end if;
			
			if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
				select	max(a.nr_agrupamento)
				into STRICT	nr_agrupamento_event_w
				from	pls_regra_fat_evento a
				where	nr_seq_evento	= nr_seq_evento_w
				and	nr_seq_regra	= nr_seq_regra_w
				and	trunc(clock_timestamp(), 'dd') between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia, trunc(clock_timestamp(), 'dd'));
				
				-- Quando for vinculacao manual pode ocorrer do evento nao ser da mesma regra, pois a regra e informada ao lote
				if (ie_origem_w = 'M') and (coalesce(nr_agrupamento_event_w::text, '') = '') then
					nr_agrupamento_event_w := 99999;
				end if;
				
				-- Verifica se ja existe fatura gerada para este pagador
				if (ie_origem_w = 'A') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_w
					from	pls_fatura
					where	nr_seq_pagador		= nr_seq_pagador_w
					and	nr_seq_lote		= nr_seq_lote_p
					and	nr_agrupamento		= coalesce(nr_agrupamento_event_w,nr_agrupamento)
					and (ie_fatura_taxa		<> 'S' or coalesce(ie_fatura_taxa::text, '') = '');
					
					ie_impedimento_cobranca_w := null;
				
				elsif (ie_origem_w = 'M') then
					if (cd_operadora_empresa_w IS NOT NULL AND cd_operadora_empresa_w::text <> '') then
						select	max(a.nr_sequencia)
						into STRICT	nr_seq_fatura_w
						from	pls_segurado		d,
							pls_fatura_conta	c,
							pls_fatura_evento	b,
							pls_fatura		a
						where	a.nr_sequencia 		= b.nr_seq_fatura
						and	b.nr_sequencia 		= c.nr_seq_fatura_evento
						and	d.nr_sequencia		= c.nr_seq_segurado
						and	a.nr_seq_pagador 	= nr_seq_pagador_w
						and	d.cd_operadora_empresa 	= cd_operadora_empresa_w
						and	a.nr_seq_lote  		= nr_seq_lote_p
						and	a.nr_agrupamento	= coalesce(nr_agrupamento_event_w,a.nr_agrupamento)
						and	coalesce(a.ie_impedimento_cobranca,'X') = coalesce(ie_impedimento_cobranca_w,'X')
						and (a.ie_fatura_taxa	<> 'S' or coalesce(a.ie_fatura_taxa::text, '') = '');
					end if;
				
					if (coalesce(nr_seq_fatura_w::text, '') = '') and
						((coalesce(cd_operadora_empresa_w::text, '') = '') or (qt_regra_emp_w = 0)) then
						select	max(nr_sequencia)
						into STRICT	nr_seq_fatura_w
						from	pls_fatura
						where	nr_seq_pagador			= nr_seq_pagador_w
						and	nr_seq_lote			= nr_seq_lote_p
						and	coalesce(ie_impedimento_cobranca,'X')= ie_impedimento_cobranca_w
						and	nr_agrupamento			= coalesce(nr_agrupamento_event_w,nr_agrupamento)
						and (ie_fatura_taxa			<> 'S' or coalesce(ie_fatura_taxa::text, '') = '');
					
						if (coalesce(nr_seq_fatura_w::text, '') = '') then
							if (coalesce(ie_impedimento_cobranca_w::text, '') = '') then
								select	max(nr_sequencia)
								into STRICT	nr_seq_fatura_w
								from	pls_fatura
								where	nr_seq_pagador		= nr_seq_pagador_w
								and	nr_seq_lote		= nr_seq_lote_p
								and	coalesce(ie_impedimento_cobranca::text, '') = ''
								and	nr_agrupamento		= coalesce(nr_agrupamento_event_w,nr_agrupamento)
								and (ie_fatura_taxa		<> 'S' or coalesce(ie_fatura_taxa::text, '') = '');
							else
								select	max(nr_sequencia)
								into STRICT	nr_seq_fatura_w
								from	pls_fatura
								where	nr_seq_pagador		= nr_seq_pagador_w
								and	nr_seq_lote		= nr_seq_lote_p
								and	coalesce(ie_impedimento_cobranca,'X') <> ie_impedimento_cobranca_w
								and	(ie_impedimento_cobranca IS NOT NULL AND ie_impedimento_cobranca::text <> '')
								and	nr_agrupamento		= coalesce(nr_agrupamento_event_w,nr_agrupamento)
								and (ie_fatura_taxa		<> 'S' or coalesce(ie_fatura_taxa::text, '') = '');
							end if;
						end if;
					end if;
				end if;
				
				-- Se ja existe fatura para este pagador, verifica se ja existe evento nesta fatura 
				if (nr_seq_fatura_w IS NOT NULL AND nr_seq_fatura_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_evento_w
					from	pls_fatura_evento
					where	nr_seq_fatura	= nr_seq_fatura_w
					and	nr_seq_evento 	= nr_seq_evento_w;
				else
					nr_seq_fatura_evento_w	:= null;
				end if;

			
				-- Se nao possui fatura nem evento, entao gera uma nova fatura 
				if (coalesce(nr_seq_fatura_w::text, '') = '') and (coalesce(nr_seq_fatura_evento_w::text, '') = '') then			
					select	nextval('pls_fatura_seq')
					into STRICT	nr_seq_fatura_nova_w
					;
					
					insert into pls_fatura(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_pagador,
						nr_seq_lote,
						dt_vencimento,
						nr_seq_congenere,
						vl_fatura,
						nr_agrupamento,
						dt_mes_competencia,
						vl_total_ndc,
						dt_vencimento_ndc,
						nr_fatura,
						ie_impedimento_cobranca,
						ie_remido,
						ie_fatura_taxa,
						ie_tipo_fatura)
					values (nr_seq_fatura_nova_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_pagador_w,
						nr_seq_lote_p,
						dt_vencimento_w,
						nr_seq_congenere_pesq_w,
						0,
						nr_agrupamento_event_w,
						dt_mes_competencia_w,
						0,
						dt_vencimento_w,
						nr_seq_fatura_nova_w,
						ie_impedimento_cobranca_w,
						'N',
						'N',
						ie_tipo_lote_w);
				end if;
				
				if (coalesce(nr_seq_fatura_evento_w::text, '') = '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_evento_w
					from	pls_fatura_evento
					where	nr_seq_fatura	= coalesce(nr_seq_fatura_w, nr_seq_fatura_nova_w)
					and	nr_seq_evento 	= nr_seq_evento_w;
				end if;
				
				-- 	Retirados os tratamento que estavam nesta parte da rotina, pois foi criada a procedure pls_dividir_imped_cobr_fat para dividir as faturas por impedimento de cobranca,
				--	que e chamada na procedure pls_gerar_lote_faturamento.  Sem os tratamentos comentados,  fica mais facil de visualizar esta procedure. - ebcabral - 19/11/2012 - OS 477542
				
				-- Verificar se ja existe registro para este evento conta e segurado 
				select	max(nr_sequencia)
				into STRICT	nr_seq_fatura_conta_w
				from	pls_fatura_conta
				where	nr_seq_conta		= nr_seq_conta_w
				and	nr_seq_segurado		= nr_seq_segurado_w
				and	nr_seq_fatura_evento	= nr_seq_fatura_evento_w;
							
				-- Se nao existe gera o registro
				if (coalesce(nr_seq_fatura_conta_w::text, '') = '') and
					((nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') or (nr_seq_fatura_w IS NOT NULL AND nr_seq_fatura_w::text <> '')) then
					-- Se nao existe este evento para esta fatura, gera o evento 
					if (coalesce(nr_seq_fatura_evento_w::text, '') = '') then
						select	nextval('pls_fatura_evento_seq')
						into STRICT	nr_seq_fatura_evento_w
						;
						
						insert into pls_fatura_evento(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_evento,
							nr_seq_fatura,
							vl_evento)
						values (nr_seq_fatura_evento_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_evento_w,
							coalesce(nr_seq_fatura_w, nr_seq_fatura_nova_w),
							0);
					end if;
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_conta_w
					from	pls_fatura_conta
					where	nr_seq_conta		= nr_seq_conta_w
					and	nr_seq_fatura_evento	= nr_seq_fatura_evento_w;
				
					if (coalesce(nr_seq_fatura_conta_w::text, '') = '') then
						select	nextval('pls_fatura_conta_seq')
						into STRICT	nr_seq_fatura_conta_w
						;
						
						select	max(a.nr_seq_congenere)
						into STRICT	nr_seq_cong_w
						from	pls_segurado	a
						where	a.nr_sequencia	= nr_seq_segurado_w;
						
						insert into pls_fatura_conta(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_conta,
							nr_seq_fatura_evento,
							vl_faturado,
							nr_seq_segurado,
							ie_tipo_cobranca,
							nr_lote_contabil,
							vl_faturado_ndc,
							cd_guia_referencia,
							ie_tipo_vinculacao,
							nr_seq_congenere,
							ie_impedimento_cobranca)
						values (nr_seq_fatura_conta_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_conta_w,
							nr_seq_fatura_evento_w,
							0,
							nr_seq_segurado_w,
							ie_tipo_cobranca_w,
							0,
							0,
							cd_guia_referencia_w,
							ie_origem_w,
							nr_seq_cong_w,
							ie_impedimento_cobranca_w);
					end if;
				end if;
				
				-- Gera os registros de procedimentos e materiais que entram nesta conta 
				if (nr_seq_fatura_conta_w IS NOT NULL AND nr_seq_fatura_conta_w::text <> '') then
					if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then	
						if (ie_gerar_fat_contab_w = 'S') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_fat_proc_w
							from	pls_fatura_proc
							where	nr_seq_conta_pos_estab	= nr_seq_conta_pos_w
							and	nr_seq_fatura_conta	= nr_seq_fatura_conta_w
							and	nr_seq_conta_pos_contab	= nr_seq_conta_pos_contab_w
							and	ie_tipo_cobranca	= ie_tipo_cobranca_w;
						else
							select	max(nr_sequencia)
							into STRICT	nr_seq_fat_proc_w
							from	pls_fatura_proc
							where	nr_seq_conta_pos_estab	= nr_seq_conta_pos_w
							and	nr_seq_fatura_conta	= nr_seq_fatura_conta_w
							and	ie_tipo_cobranca	= ie_tipo_cobranca_w;
						end if;
						
						if (coalesce(nr_seq_fat_proc_w::text, '') = '') then
							insert into pls_fatura_proc(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_conta_proc,
								nr_seq_fatura_conta,
								vl_faturado,
								ie_tipo_cobranca,
								nr_lote_contabil,
								nr_seq_conta_pos_estab,
								vl_faturado_ndc,
								nr_seq_conta_pos_contab,
								nr_seq_pos_estab_taxa,
								nr_seq_pos_taxa_contab)
							values (nextval('pls_fatura_proc_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_conta_proc_w,
								nr_seq_fatura_conta_w,
								vl_item_w,
								ie_tipo_cobranca_w,
								0,
								nr_seq_conta_pos_w,
								vl_item_ndc_w,
								nr_seq_conta_pos_contab_w,
								nr_seq_pos_estab_taxa_w,
								nr_seq_pos_taxa_contab_w);
						else
							update	pls_fatura_proc
							set	vl_faturado	= vl_faturado + vl_item_w,
								vl_faturado_ndc	= vl_faturado_ndc + vl_item_ndc_w
							where	nr_sequencia	= nr_seq_fat_proc_w;
						end if;

					elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
						if (ie_gerar_fat_contab_w = 'S') then
							select	max(nr_sequencia)
							into STRICT	nr_seq_fat_mat_w
							from	pls_fatura_mat
							where	nr_seq_conta_pos_estab	= nr_seq_conta_pos_w
							and	nr_seq_fatura_conta	= nr_seq_fatura_conta_w
							and	nr_seq_conta_pos_contab	= nr_seq_conta_pos_contab_w
							and	ie_tipo_cobranca	= ie_tipo_cobranca_w;
						else
							select	max(nr_sequencia)
							into STRICT	nr_seq_fat_mat_w
							from	pls_fatura_mat
							where	nr_seq_conta_pos_estab	= nr_seq_conta_pos_w
							and	nr_seq_fatura_conta	= nr_seq_fatura_conta_w
							and	ie_tipo_cobranca	= ie_tipo_cobranca_w;
						end if;
					
						if (coalesce(nr_seq_fat_mat_w::text, '') = '') then
							insert into pls_fatura_mat(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_conta_mat,
								nr_seq_fatura_conta,
								vl_faturado,
								nr_lote_contabil,
								ie_tipo_cobranca,
								nr_seq_conta_pos_estab,
								vl_faturado_ndc,
								nr_seq_conta_pos_contab,
								nr_seq_pos_estab_taxa,
								nr_seq_pos_taxa_contab)
							values (nextval('pls_fatura_mat_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_conta_mat_w,
								nr_seq_fatura_conta_w,
								vl_item_w,
								0,
								ie_tipo_cobranca_w,
								nr_seq_conta_pos_w,
								vl_item_ndc_w,
								nr_seq_conta_pos_contab_w,
								nr_seq_pos_estab_taxa_w,
								nr_seq_pos_taxa_contab_w);
						else
							update	pls_fatura_mat
							set	vl_faturado	= vl_faturado + vl_item_w,
								vl_faturado_ndc	= vl_faturado_ndc + vl_item_ndc_w
							where	nr_sequencia	= nr_seq_fat_mat_w;
						end if;
					end if;	
				end if;
				
				nr_seq_pls_fatura_w := coalesce(nr_seq_fatura_w,nr_seq_fatura_nova_w);
			end if; -- Se tem pgador
			
			nr_seq_congenere_ant_w	:= nr_seq_congenere_fat_w;
			nr_seq_segurado_ant_w	:= nr_seq_segurado_w;
			dt_vencimento_w		:= null;
			qt_dias_vencimento_w	:= 0;
			qt_dias_antes_a500_w	:= 0;
			
		-- Ressarcimento ao SUS	
		elsif (ie_tipo_cobranca_w = '5') then
			
			select	dt_vencimento
			into STRICT	dt_vencimento_w
			from	pls_lote_faturamento
			where	nr_sequencia = nr_seq_lote_p;
			
			-------------- BUSCAR PAGADOR --------------
			select	cd_operadora_empresa
			into STRICT	cd_operadora_empresa_w
			from	pls_segurado a
			where	a.nr_sequencia	= nr_seq_segurado_w;
			
			-- pegar a data da internacao
			select	a.dt_internacao
			into STRICT	dt_atendimento_referencia_w
			from	pls_processo_conta		a,
				pls_segurado			b,
				pls_segurado_mensalidade	c
			where	b.nr_sequencia	= a.nr_seq_segurado
			and	a.nr_sequencia  = c.nr_seq_processo_conta
			and	a.nr_sequencia	= nr_seq_conta_w
			and	pls_obter_se_benef_remido(b.nr_sequencia, a.dt_internacao) = 'S'
			and	c.ie_tipo_item	= '39';

			nr_seq_pagador_w	:= pls_obter_pagador_fea(nr_seq_segurado_w, dt_atendimento_referencia_w);
			
			-------------- FINAL DO BUSCAR PAGADOR --------------
			
			if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
				select	max(a.nr_agrupamento)
				into STRICT	nr_agrupamento_event_w
				from	pls_regra_fat_evento a
				where	nr_seq_evento	= nr_seq_evento_w
				and	nr_seq_regra	= nr_seq_regra_w
				and	trunc(clock_timestamp(), 'dd') between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia, trunc(clock_timestamp(), 'dd'));
				
				-- Quando for vinculacao manual pode ocorrer do evento nao ser da mesma regra, pois a regra e informada ao lote
				if (ie_origem_w = 'M') and (coalesce(nr_agrupamento_event_w::text, '') = '') then
					nr_agrupamento_event_w := 99999;
				end if;
				
				-- Verifica se ja existe fatura gerada para este pagador
				if (ie_origem_w = 'A') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_w
					from	pls_fatura
					where	nr_seq_pagador		= nr_seq_pagador_w
					and	nr_seq_lote		= nr_seq_lote_p
					and	nr_agrupamento		= coalesce(nr_agrupamento_event_w,nr_agrupamento);
					
					ie_impedimento_cobranca_w := null;
					
				elsif (ie_origem_w = 'M') then
					if (cd_operadora_empresa_w IS NOT NULL AND cd_operadora_empresa_w::text <> '') then
						select	max(a.nr_sequencia)
						into STRICT	nr_seq_fatura_w
						from	pls_segurado		d,
							pls_fatura_conta	c,
							pls_fatura_evento	b,
							pls_fatura		a
						where	a.nr_sequencia 		= b.nr_seq_fatura
						and	b.nr_sequencia 		= c.nr_seq_fatura_evento
						and	d.nr_sequencia		= c.nr_seq_segurado
						and	a.nr_seq_pagador 	= nr_seq_pagador_w
						and	d.cd_operadora_empresa 	= cd_operadora_empresa_w
						and	a.nr_seq_lote  		= nr_seq_lote_p
						and	a.nr_agrupamento	= coalesce(nr_agrupamento_event_w,a.nr_agrupamento)
						and	coalesce(a.ie_impedimento_cobranca,'X') = coalesce(ie_impedimento_cobranca_w,'X');
					end if;
					
					if (coalesce(nr_seq_fatura_w::text, '') = '') and
						((coalesce(cd_operadora_empresa_w::text, '') = '') or (qt_regra_emp_w = 0)) then
						select	max(nr_sequencia)
						into STRICT	nr_seq_fatura_w
						from	pls_fatura
						where	nr_seq_pagador				= nr_seq_pagador_w
						and	nr_seq_lote				= nr_seq_lote_p
						and	coalesce(ie_impedimento_cobranca,'X')	= ie_impedimento_cobranca_w
						and	nr_agrupamento				= coalesce(nr_agrupamento_event_w, nr_agrupamento);
					
						if (coalesce(nr_seq_fatura_w::text, '') = '') then
							if (coalesce(ie_impedimento_cobranca_w::text, '') = '') then
								select	max(nr_sequencia)
								into STRICT	nr_seq_fatura_w
								from	pls_fatura
								where	nr_seq_pagador		= nr_seq_pagador_w
								and	nr_seq_lote		= nr_seq_lote_p
								and	coalesce(ie_impedimento_cobranca::text, '') = ''
								and	nr_agrupamento		= coalesce(nr_agrupamento_event_w, nr_agrupamento);
							else
								select	max(nr_sequencia)
								into STRICT	nr_seq_fatura_w
								from	pls_fatura
								where	nr_seq_pagador		= nr_seq_pagador_w
								and	nr_seq_lote		= nr_seq_lote_p
								and	coalesce(ie_impedimento_cobranca,'X') <> ie_impedimento_cobranca_w
								and	(ie_impedimento_cobranca IS NOT NULL AND ie_impedimento_cobranca::text <> '')
								and	nr_agrupamento		= coalesce(nr_agrupamento_event_w, nr_agrupamento);
							end if;
						end if;
					end if;
				end if;
				
				-- Se ja existe fatura para este pagador, verifica se ja existe evento nesta fatura 
				if (nr_seq_fatura_w IS NOT NULL AND nr_seq_fatura_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_evento_w
					from	pls_fatura_evento
					where	nr_seq_fatura	= nr_seq_fatura_w
					and	nr_seq_evento 	= nr_seq_evento_w;
				else
					nr_seq_fatura_evento_w	:= null;
				end if;
				
				-- Se nao possui fatura nem evento, entao gera uma nova fatura 
				if (coalesce(nr_seq_fatura_w::text, '') = '') and (coalesce(nr_seq_fatura_evento_w::text, '') = '') then
					
					select	nextval('pls_fatura_seq')
					into STRICT	nr_seq_fatura_nova_w
					;

					insert into pls_fatura(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_pagador,
						nr_seq_lote,
						dt_vencimento,
						nr_seq_congenere,
						vl_fatura,
						nr_agrupamento,
						dt_mes_competencia,
						vl_total_ndc,
						dt_vencimento_ndc,
						nr_fatura,
						ie_impedimento_cobranca,
						ie_remido,
						ie_fatura_taxa,
						ie_tipo_fatura)
					values (nr_seq_fatura_nova_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_pagador_w,
						nr_seq_lote_p,
						dt_vencimento_w,
						null,
						0,
						nr_agrupamento_event_w,
						dt_mes_competencia_w,
						0,
						dt_vencimento_w,
						nr_seq_fatura_nova_w,
						ie_impedimento_cobranca_w,
						'S',
						'N',
						ie_tipo_lote_w);

				end if;
			
				if (coalesce(nr_seq_fatura_evento_w::text, '') = '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_evento_w
					from	pls_fatura_evento
					where	nr_seq_fatura	= coalesce(nr_seq_fatura_w, nr_seq_fatura_nova_w)
					and	nr_seq_evento 	= nr_seq_evento_w;
				end if;
				
				-- Verificar se ja existe registro para este evento conta e segurado 
				select	max(nr_sequencia)
				into STRICT	nr_seq_fatura_conta_w
				from	pls_fatura_conta
				where	nr_seq_conta		= nr_seq_conta_w
				and	nr_seq_segurado		= nr_seq_segurado_w
				and	nr_seq_fatura_evento	= nr_seq_fatura_evento_w;
				
				-- Se nao existe gera o registro
				if (coalesce(nr_seq_fatura_conta_w::text, '') = '') and
					((nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') or (nr_seq_fatura_w IS NOT NULL AND nr_seq_fatura_w::text <> '')) then
					
					-- Se nao existe este evento para esta fatura, gera o evento 
					if (coalesce(nr_seq_fatura_evento_w::text, '') = '') then
					
						select	nextval('pls_fatura_evento_seq')
						into STRICT	nr_seq_fatura_evento_w
						;
						
						insert into pls_fatura_evento(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_evento,
							nr_seq_fatura,
							vl_evento)
						values (nr_seq_fatura_evento_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_evento_w,
							coalesce(nr_seq_fatura_w, nr_seq_fatura_nova_w),
							0);
					end if;
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_conta_w
					from	pls_fatura_conta
					where	nr_seq_conta		= nr_seq_conta_w
					and	nr_seq_fatura_evento	= nr_seq_fatura_evento_w;
				
					-- Se nao existe este conta para esta fatura, gera a conta 
					if (coalesce(nr_seq_fatura_conta_w::text, '') = '') then
					
						select	nextval('pls_fatura_conta_seq')
						into STRICT	nr_seq_fatura_conta_w
						;
						
						select	max(a.nr_seq_congenere)
						into STRICT	nr_seq_cong_w
						from	pls_segurado	a
						where	a.nr_sequencia	= nr_seq_segurado_w;
						
						insert into pls_fatura_conta(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_conta,
							nr_seq_fatura_evento,
							vl_faturado,
							nr_seq_segurado,
							ie_tipo_cobranca,
							nr_lote_contabil,
							vl_faturado_ndc,
							cd_guia_referencia,
							ie_tipo_vinculacao,
							nr_seq_congenere,
							ie_impedimento_cobranca,
							nr_seq_conta_sus)
						values (nr_seq_fatura_conta_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							null,
							nr_seq_fatura_evento_w,
							vl_item_w,
							nr_seq_segurado_w,
							ie_tipo_cobranca_w,
							0,
							0,
							null,
							ie_origem_w,
							nr_seq_cong_w,
							ie_impedimento_cobranca_w,
							nr_seq_conta_w);
					end if;
				end if;
			end if;
		end if;
		end;
	end loop;
	close C01;
	commit;
	
	open C02;
	loop
	fetch C02 into	
		nr_seq_conta_w,
		ie_impedimento_cobranca_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
	
		begin
		select	'1' nr_seq_conta,
			max(nr_seq_fatura)
		into STRICT	ie_conta_w,
			nr_seq_fatura_w
		from	pls_fatura_conta	b,
			pls_fatura_evento	a
		where	a.nr_sequencia 		= b.nr_seq_fatura_evento
		and	b.nr_seq_conta		= nr_seq_conta_w;
		
		if (coalesce(nr_seq_fatura_w::text, '') = '') then
			select	'2' nr_seq_conta_sus,
				max(nr_seq_fatura)
			into STRICT	ie_conta_w,
				nr_seq_fatura_w
			from	pls_fatura_conta	b,
				pls_fatura_evento	a
			where	a.nr_sequencia		= b.nr_seq_fatura_evento
			and	b.nr_seq_conta_sus	= nr_seq_conta_w;
		end if;
		
		select	count(1)
		into STRICT	qt_motivo_imp_cob_w
		from (SELECT	1
			from	pls_fatura_motivo_imp_cob
			where 	(nr_seq_fatura IS NOT NULL AND nr_seq_fatura::text <> '')
			and	nr_seq_conta = nr_seq_conta_w
			
union all

			SELECT	1
			from	pls_fatura_motivo_imp_cob
			where 	(nr_seq_fatura IS NOT NULL AND nr_seq_fatura::text <> '')
			and	nr_seq_conta_sus = nr_seq_conta_w) alias3 LIMIT 1;
		
		if (qt_motivo_imp_cob_w = 0) then
			if (ie_conta_w = '1') then
				update	pls_fatura_motivo_imp_cob
				set	nr_seq_fatura		= nr_seq_fatura_w
				where	nr_seq_conta		= nr_seq_conta_w;
			elsif (ie_conta_w = '2') then
				update	pls_fatura_motivo_imp_cob
				set	nr_seq_fatura		= nr_seq_fatura_w
				where	nr_seq_conta_sus	= nr_seq_conta_w;
			end if;
		end if;
		
		update	pls_fatura
		set	ie_impedimento_cobranca	= ie_impedimento_cobranca_w
		where	nr_sequencia		= nr_seq_fatura_w;
		end;
	end loop;
	close C02;
	commit;
	
	delete	from pls_fatura_motivo_imp_cob
	where	coalesce(nr_seq_fatura::text, '') = '';
	
	CALL pls_atualiza_fat_vl_adic(nr_seq_lote_p,null);
	commit;
end if;

-- Commit na procedure externa
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_faturas_lote ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

