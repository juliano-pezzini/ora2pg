-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE enviar_comunic_sc_pend_lib ( cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* Gerar comunicação interna para solicitação de compra liberada 
mas sem aprovação, com tempo superior ao definido nos parâmetros de compras */
 
 
qt_existe_w			integer;
qt_existe_regra_w		integer;
nr_solic_compra_w		bigint;
ds_destinatario_w		varchar(255);
qt_dia_sc_pend_aprov_w		bigint;

nm_paciente_w			varchar(100);
nm_medico_w			varchar(100);
hr_inicio_w			timestamp;
ds_convenio_w			varchar(100);
ds_categoria_w			varchar(100);
ds_procedimento_w			varchar(255);
nr_seq_regra_w			bigint;
cd_perfil_w			varchar(10);
nr_seq_classif_w			varchar(10);
nm_usuarios_adic_w		varchar(255);
ds_titulo_w			varchar(80);
ds_comunicacao_w			varchar(4000);
ie_ci_lida_w			varchar(1);
nr_seq_comunic_w			bigint;
ds_enter_w			varchar(30) := chr(13) || chr(10);
nr_reserva_w			varchar(20);
ie_carater_cirurgia_w		varchar(80);	
ds_estabelecimento_w		varchar(255);
nr_sequencia_w			bigint;
ie_envio_comunic_w		varchar(1);
cd_perfil_ativo_w			integer;

/*Cursor C02*/
 
cd_material_w			bigint;
qt_material_w			double precision;
cd_cgc_w			varchar(14);
ds_materiais_agenda_w		varchar(2000);

/*Cursor C03*/
 
ds_material_w			varchar(4000);
qt_quantidade_w			double precision;
ds_fornecedor_w			varchar(255);
ds_materiais_sem_codigo_w		varchar(2000);

/* Se tiver setor na regra, envia CI para os setores */
 
ds_setor_adicional_w          	varchar(2000) := '';
/* Campos da regra Usuário da Regra */
cd_setor_regra_usuario_w		integer;
nm_usuario_aprov_w			varchar(255);

c01 CURSOR FOR 
	SELECT	b.nr_sequencia, 
		b.cd_perfil, 
		b.nm_usuarios_adic 
	from	regra_envio_comunic_compra a, 
		regra_envio_comunic_evento b 
	where	a.nr_sequencia = b.nr_seq_regra 
	and	a.cd_funcao = 913 
	and	b.cd_evento = 57 
	and	b.ie_situacao = 'A' 
	and	a.cd_estabelecimento = cd_estabelecimento_p 
	and	substr(obter_se_envia_ci_regra_compra(b.nr_sequencia,0,'X',cd_perfil_ativo_w,nm_usuario_p,null),1,1) = 'S';

c02 CURSOR FOR 
	SELECT	nr_solic_compra 
	from	solic_compra 
	where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') 
	and	coalesce(dt_autorizacao::text, '') = '' 
	and	coalesce(dt_baixa::text, '') = '' 
	and	dt_liberacao < (clock_timestamp() - qt_dia_sc_pend_aprov_w) 
	order by dt_liberacao;

c05 CURSOR FOR 
	SELECT	coalesce(a.cd_setor_atendimento,0) cd_setor_atendimento 
	from	regra_envio_comunic_usu a 
	where	a.nr_seq_evento = nr_seq_regra_w;
	
c06 CURSOR FOR 
SELECT	nm_usuarios_aprov 
from ( 
	SELECT 	substr(obter_usuarios_proc_aprov(a.nr_sequencia, a.nr_seq_proc_aprov),1,255) nm_usuarios_aprov				 
	from 	processo_aprov_compra a, 
		pessoa_fisica b 
	where 	a.cd_pessoa_fisica = b.cd_pessoa_fisica 
	and	a.ie_aprov_reprov = 'P' 
	and 	a.nr_sequencia in (select distinct nr_seq_aprovacao 
		 from solic_compra_item 
		 where nr_solic_compra = nr_solic_compra_w) 
	
union all
 
	select substr(obter_usuarios_proc_aprov(a.nr_sequencia, a.nr_seq_proc_aprov),1,255) nm_usuarios_aprov 
	from 	processo_aprov_compra a, 
		cargo b 
	where 	a.cd_cargo = b.cd_cargo 
	and	a.ie_aprov_reprov = 'P' 
	and 	a.nr_sequencia in ( select distinct nr_seq_aprovacao 
		 from solic_compra_item 
		 where nr_solic_compra = nr_solic_compra_w)) alias6;	
 
	 

BEGIN 
 
begin 
select	obter_perfil_ativo 
into STRICT	cd_perfil_ativo_w
;
exception when others then 
	cd_perfil_ativo_w	:= 0;
end;
 
select	coalesce(max(qt_dia_sc_pend_aprov),0) 
into STRICT	qt_dia_sc_pend_aprov_w 
from	parametro_compras 
where	cd_estabelecimento = cd_estabelecimento_p;
 
select	count(*) 
into STRICT	qt_existe_regra_w 
from	regra_envio_comunic_compra a, 
	regra_envio_comunic_evento b 
where	a.nr_sequencia = b.nr_seq_regra 
and	a.cd_funcao = 913 
and	b.cd_evento = 57 
and	b.ie_situacao = 'A' 
and	a.cd_estabelecimento = cd_estabelecimento_p 
and	substr(obter_se_envia_ci_regra_compra(b.nr_sequencia,0,'X',cd_perfil_ativo_w,nm_usuario_p,null),1,1) = 'S';
 
select	count(*) 
into STRICT	qt_existe_w 
from	solic_compra 
where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') 
and	coalesce(dt_autorizacao::text, '') = '' 
and	coalesce(dt_baixa::text, '') = '' 
and	dt_liberacao < (clock_timestamp() - qt_dia_sc_pend_aprov_w);
 
if (qt_existe_w > 0) and (qt_existe_regra_w > 0) then 
 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_regra_w, 
		cd_perfil_w, 
		nm_usuarios_adic_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		 
		open C05;
		loop 
		fetch C05 into	 
			cd_setor_regra_usuario_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin 
			if (cd_setor_regra_usuario_w <> 0) and (obter_se_contido_char(cd_setor_regra_usuario_w, ds_setor_adicional_w) = 'N') then 
				ds_setor_adicional_w := substr(ds_setor_adicional_w || cd_setor_regra_usuario_w || ',',1,2000);
			end if;
			end;
		end loop;
		close C05;
 
		if (cd_perfil_w IS NOT NULL AND cd_perfil_w::text <> '') then 
			cd_perfil_w := cd_perfil_w ||',';
		end if;
		 
				 
			open C02;
			loop 
			fetch C02 into	 
				nr_solic_compra_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin 
				select substr(obter_select_concatenado_bv('select	obter_desc_material(a.cd_material) 
								  from	solic_compra_item a 
								  where	a.nr_solic_compra = :nr_solic_compra', 
								  'nr_solic_compra= ' || nr_solic_compra_w,ds_enter_w),1,4000) 
				into STRICT ds_material_w							 
				;
				 
				open C06;
				loop 
				fetch C06 into	 
					nm_usuario_aprov_w;
				EXIT WHEN NOT FOUND; /* apply on C06 */
					begin 
					nm_usuario_aprov_w := nm_usuario_aprov_w||nm_usuario_aprov_w||',';
					end;
				end loop;
				close C06;
 
				 
				 
				ds_destinatario_w := obter_usuarios_comunic_compras(nr_solic_compra_w, null, 57, nr_seq_regra_w,'');
				 
				 
				select	max(substr(replace_macro(b.ds_titulo, '@nr_solic_compra', nr_solic_compra_w),1,80)) ds_titulo, 
					max(b.ds_comunicacao) ds_comunicacao 
				into STRICT	ds_titulo_w, 
					ds_comunicacao_w 
				from	regra_envio_comunic_compra a, 
					regra_envio_comunic_evento b 
				where	a.nr_sequencia = b.nr_seq_regra 
				and	b.nr_sequencia = nr_seq_regra_w;
				 
				ds_comunicacao_w := substr(replace_macro(ds_comunicacao_w, '@nr_solic_compra', nr_solic_compra_w),1,4000);
				ds_comunicacao_w := substr(replace_macro(ds_comunicacao_w, '@ds_material',ds_material_w),1,4000);
				ds_comunicacao_w := substr(replace_macro(ds_comunicacao_w, '@nm_usuarios_aprov',nm_usuario_aprov_w),1,4000);
				ds_comunicacao_w := substr(ds_comunicacao_w,1,4000);
 
				select	coalesce(ie_ci_lida,'N') 
				into STRICT	ie_ci_lida_w 
				from 	regra_envio_comunic_evento 
				where 	nr_sequencia = nr_seq_regra_w;
 
				select	obter_classif_comunic('F') 
				into STRICT	nr_seq_classif_w 
				;
				 
				select	nextval('comunic_interna_seq') 
				into STRICT	nr_seq_comunic_w 
				;
				insert	into comunic_interna( 
					nr_sequencia, 
					dt_comunicado, 
					ds_titulo, 
					ds_comunicado, 
					nm_usuario, 
					dt_atualizacao, 
					ie_geral, 
					nm_usuario_destino, 
					ie_gerencial, 
					nr_seq_classif, 
					dt_liberacao, 
					ds_perfil_adicional, 
					ds_setor_adicional) 
				values (	nr_seq_comunic_w, 
					clock_timestamp(), 
					ds_titulo_w, 
					ds_comunicacao_w, 
					nm_usuario_p, 
					clock_timestamp(), 
					'N', 
					ds_destinatario_w, 
					'N', 
					nr_seq_classif_w, 
					clock_timestamp(), 
					cd_perfil_w, 
					ds_setor_adicional_w);
 
				/*Para que a comunicação seja gerada como lida ao próprio usuário */
 
				if (ie_ci_lida_w = 'S') then 
					insert into comunic_interna_lida(nr_sequencia,nm_usuario,dt_atualizacao)values (nr_seq_comunic_w,nm_usuario_p,clock_timestamp());
				end if;
				 
				end;
			end loop;
			close C02;
		end;
	end loop;
	close C01;
 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enviar_comunic_sc_pend_lib ( cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

