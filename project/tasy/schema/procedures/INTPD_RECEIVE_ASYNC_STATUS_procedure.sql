-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_receive_async_status ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w			intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w		varchar(15);
reg_integracao_w			gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ds_erro_w			varchar(4000);
i				integer;
ie_erro_w				varchar(1) := 'N';
qt_registros_w			bigint;
ie_exception_w			varchar(1) := 'N';
intpd_fila_transmissao_w		intpd_fila_transmissao%rowtype;
ie_status_w			varchar(15);

c01 CURSOR FOR
SELECT	*
from	xmltable('STRUCTURE/STATUS' passing xml_p columns
	id_process		varchar(80)	path	'ID_PROCESS',
	ds_status			varchar(80)	path	'DS_STATUS',
	nr_external_document	varchar(80)	path	'NR_EXTERNAL_DOCUMENT',
	messages			xml		path	'MESSAGES');

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT *
from	xmltable('MESSAGES/MESSAGE' passing c01_w.messages columns
	ds_message		varchar(4000)		path	'DS_MESSAGE');

c02_w	c02%rowtype;


BEGIN

update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

commit;

begin
select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:=	'R';
reg_integracao_w.ie_sistema_externo		:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao		:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao	:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log			:=	0;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	ie_erro_w	:= 'N';

	reg_integracao_w.nm_tabela		:=	'INTPD_FILA_TRANSMISSAO';
	reg_integracao_w.nm_elemento	:=	'STATUS';

	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQUENCIA', c01_w.id_process, 'S', intpd_fila_transmissao_w.nr_sequencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; intpd_fila_transmissao_w.nr_sequencia := _ora2pg_r.ds_valor_retorno_p;

	select 	count(*)
	into STRICT	qt_registros_w
	from 	intpd_fila_transmissao
	where 	nr_sequencia = intpd_fila_transmissao_w.nr_sequencia;

	if (qt_registros_w = 0) then
		/*Não foi encontrado o registro #@NR_SEQUENCIA_W#@ na fila de transmissão.*/

		intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1030647),'INTPDTASY','0004');
		ie_erro_w := 'S';
	else

		begin
		if (coalesce(c01_w.ds_status,'false') = 'true')  then
			begin

			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_DOC_EXTERNO', c01_w.nr_external_document, 'N', intpd_fila_transmissao_w.nr_doc_externo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; intpd_fila_transmissao_w.nr_doc_externo := _ora2pg_r.ds_valor_retorno_p;

			if (reg_integracao_w.qt_reg_log = 0) then

				update	intpd_fila_transmissao
				set	ie_status = 'S',
					nr_doc_externo = intpd_fila_transmissao_w.nr_doc_externo,
					ds_log = ''
				where	nr_sequencia = intpd_fila_transmissao_w.nr_sequencia;
				--and	ie_status = 'AEX';
				CALL intpd_update_async_evt_status(intpd_fila_transmissao_w.nr_sequencia, coalesce(c01_w.ds_status,'true'));
			end if;
			end;
		else
			begin
			open c02;
			loop
			fetch c02 into
				c02_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				ds_erro_w := substr(ds_erro_w || c02_w.ds_message || chr(13) || chr(10),1,4000);
				end;
			end loop;
			close c02;

			if (reg_integracao_w.qt_reg_log = 0) then

				update	intpd_fila_transmissao
				set	ie_status = 'E',
					cd_default_message = '0005',
					ds_log = ds_erro_w
				where	nr_sequencia = intpd_fila_transmissao_w.nr_sequencia;
				--and	ie_status = 'AEX';
				select	ie_status
				into STRICT	ie_status_w
				from	intpd_fila_transmissao
				where	nr_sequencia = intpd_fila_transmissao_w.nr_sequencia;

				intpd_gravar_log_recebimento(intpd_fila_transmissao_w.nr_sequencia, ds_erro_w, 'INTPDTASY','0005');
				CALL intpd_update_async_evt_status(intpd_fila_transmissao_w.nr_sequencia, coalesce(c01_w.ds_status,'false'));
			end if;
			end;
		end if;
		end;
	end if;
	end;
end loop;
close c01;
exception
when others then
	begin
	ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
	rollback;
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;

	ie_exception_w := 'S';

	end;
end;

if (ie_exception_w = 'N') then

	if (reg_integracao_w.qt_reg_log > 0) then
		begin
		rollback;

		update	intpd_fila_transmissao
		set	ie_status = 'E',
			cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
			ds_log = ds_erro_w,
			nr_doc_externo	= c01_w.nr_external_document
		where	nr_sequencia 	= nr_sequencia_p;

		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY',reg_integracao_w.intpd_log_receb[i].cd_default_message);
		end loop;
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status = 'S',
			cd_default_message = '0000',
			nr_seq_documento	= c01_w.id_process,
			nr_doc_externo 	= c01_w.nr_external_document
		where	nr_sequencia = nr_sequencia_p;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_receive_async_status ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

