-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_gerar_pac_confirm_gwt ( dt_agenda_inicial_p timestamp, dt_agenda_final_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


ie_somente_integrada_w	varchar(1);
ie_apresentar_cancelados_w	varchar(1);
cd_pessoa_fisica_w	varchar(10);
nm_paciente_w		varchar(60);
dt_agenda_w		timestamp;
nr_Seq_proc_interno_w	bigint;
cd_especialidade_w	integer;
cd_medico_W		varchar(10);
ds_Agendamento_w	varchar(255);
ie_status_agenda_w	varchar(3);
ds_status_agenda_w	varchar(20);
nr_seq_agenda_w		agenda_consulta.nr_sequencia%type;	
ie_tipo_agendamento_w	varchar(15);
cd_agenda_W		bigint;
dt_confirmacao_w	timestamp;
ds_anestesia_w		varchar(10);
dt_chegada_w		timestamp;
ds_autorizacao_w	varchar(240);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
cd_convenio_w		integer;
ie_confirmacao_aut_w	varchar(3);
ie_tipo_w		varchar(3);
ie_obs_informada_w	varchar(10);
nr_seq_status_w		bigint;
ds_observacao_w		varchar(4000);
cd_categoria_w		varchar(10);
cd_plano_w		varchar(10);
cd_profissional_w	varchar(10);
cd_medico_exec_w	varchar(10);
ie_bloqueado_w		varchar(1);
dt_inicio_agendamento_w	timestamp;
ie_em_agenda_w		varchar(1);
nm_usuario_em_agenda_w	varchar(15);
ie_pac_internado_w	varchar(1);
nr_seq_grupo_selec_w	bigint;
nr_seq_ageint_int_w	bigint;
ie_obs_informada_conf_w	varchar(10);

cd_estab_agenda_w	smallint;
			
C01 CURSOR FOR
	SELECT  a.cd_pessoa_fisica,
		a.nm_paciente,
		c.hr_inicio dt_agenda,
		c.nr_seq_proc_interno,
		null, 
		null, 
		substr(Obter_Item_Grid_Ageint(b.nr_seq_proc_interno, b.cd_medico, b.cd_Especialidade, cd_estabelecimento_p, b.nr_seq_item_selec),1,255) ds_agendamento,
		c.ie_status_agenda,
		substr(d.ds_valor_dominio,1,20) ds_status_agenda,
		c.nr_sequencia,
		b.ie_tipo_agendamento,
		c.cd_agenda,
		c.dt_confirmacao,
		CASE WHEN b.ie_anestesia='S' THEN wheb_mensagem_pck.get_texto(306949)  ELSE wheb_mensagem_pck.get_texto(306950) END  ds_anestesia,
		c.hr_inicio - coalesce(substr(Ageint_Obter_Tempo_Chegada(b.nr_seq_proc_interno, b.ie_anestesia),1,100),0)/1440 dt_chegada,
		substr(obter_valor_dominio(1227,c.ie_autorizacao),1,240) ds_autorizacao,
		c.cd_procedimento,
		c.ie_origem_proced,
		c.cd_convenio,
		coalesce(c.ie_confirmacao_aut,'N') ie_confirmacao_aut,
		'E' ie_tipo,
		CASE WHEN coalesce(c.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada,
		a.nr_seq_status,
		substr(c.ds_observacao,1,4000),
		c.cd_categoria,
		c.cd_plano,
		a.cd_profissional,
		c.cd_medico_exec,
		Ageint_obter_se_hor_bloq(c.cd_agenda,c.hr_inicio,c.cd_convenio,c.cd_medico_exec),
		a.dt_inicio_agendamento,
		substr(Obter_se_pessoa_internada(a.cd_pessoa_fisica),1,1),
		b.nr_seq_grupo_selec,
		b.nr_seq_agenda_int,
		CASE WHEN coalesce(e.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada_conf,
		obter_estab_agenda(c.cd_agenda) cd_estab_agenda
	FROM agenda_integrada_item b, agenda_integrada a, agenda_paciente c
LEFT OUTER JOIN ageint_obs_agenda_confirm e ON (c.nr_sequencia = e.nr_seq_agenda)
LEFT OUTER JOIN valor_dominio d ON (c.ie_status_agenda = d.vl_dominio)
WHERE a.nr_sequencia  = b.nr_seq_agenda_int  and (a.nm_paciente IS NOT NULL AND a.nm_paciente::text <> '') and b.nr_seq_agenda_exame   = c.nr_sequencia and c.dt_agenda             between trunc(dt_agenda_inicial_p) and trunc(dt_agenda_final_p) + 86399/86400 and b.ie_tipo_agendamento in ('E','S') and d.cd_dominio            = 83  and not exists (SELECT 1 from ageint_confirm_agendamento x where c.nr_sequencia = x.nr_seq_agenda and x.nm_usuario = nm_usuario_p)
	 
union

	SELECT  a.cd_pessoa_fisica, 
		a.nm_paciente,
		c.dt_agenda dt_agenda,
		c.nr_seq_proc_interno,
		null, 
		null, 
		substr(Obter_Item_Grid_Ageint(b.nr_seq_proc_interno, b.cd_medico, b.cd_Especialidade, cd_estabelecimento_p, b.nr_seq_item_selec),1,255) ds_agendamento,
		c.ie_status_agenda,
		substr(d.ds_valor_dominio,1,20) ds_status_agenda,
		c.nr_sequencia,
		b.ie_tipo_agendamento,
		c.cd_agenda,
		c.dt_confirmacao,
		CASE WHEN b.ie_anestesia='S' THEN wheb_mensagem_pck.get_texto(306949)  ELSE wheb_mensagem_pck.get_texto(306950) END  ds_anestesia,
		c.dt_agenda - coalesce(substr(Ageint_Obter_Tempo_Chegada(b.nr_seq_proc_interno, b.ie_anestesia),1,100),0)/1440 dt_chegada,
		substr(obter_valor_dominio(1227,c.ie_autorizacao),1,240) ds_autorizacao,
		c.cd_procedimento,
		c.ie_origem_proced,
		c.cd_convenio,
		coalesce(c.ie_confirmacao_aut,'N') ie_confirmacao_aut,
		'E' ie_tipo,
		CASE WHEN coalesce(c.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada,
		a.nr_seq_status,
		substr(c.ds_observacao,1,4000),
		c.cd_categoria,
		c.cd_plano,
		a.cd_profissional,
		c.cd_medico,
		Ageint_obter_se_hor_bloq(c.cd_agenda,c.dt_agenda,c.cd_convenio,c.cd_medico),
		a.dt_inicio_agendamento,
		substr(Obter_se_pessoa_internada(a.cd_pessoa_fisica),1,1),
		b.nr_seq_grupo_selec,
		b.nr_seq_agenda_int,
		CASE WHEN coalesce(e.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada_conf,
		obter_estab_agenda(c.cd_agenda) cd_estab_agenda
	FROM agenda_integrada_item b, agenda_integrada a, agenda_consulta c
LEFT OUTER JOIN ageint_obs_agenda_confirm e ON (c.nr_sequencia = e.nr_seq_agenda)
LEFT OUTER JOIN valor_dominio d ON (c.ie_status_agenda = d.vl_dominio)
WHERE a.nr_sequencia  = b.nr_seq_agenda_int  and (a.nm_paciente IS NOT NULL AND a.nm_paciente::text <> '') and b.nr_seq_agenda_cons   = c.nr_sequencia and c.dt_agenda             between trunc(dt_agenda_inicial_p) and trunc(dt_agenda_final_p) + 86399/86400 and b.ie_tipo_agendamento = 'S' and d.cd_dominio            = 83  and not exists (select 1 from ageint_confirm_agendamento x where c.nr_sequencia = x.nr_seq_agenda and x.nm_usuario = nm_usuario_p) order by 2;

C02 CURSOR FOR
	SELECT  a.cd_pessoa_fisica,
		a.nm_paciente,
		c.dt_agenda dt_agenda,
		NULL,
		b.cd_especialidade,
		b.cd_medico, substr(Obter_Item_Grid_Ageint(b.nr_seq_proc_interno, b.cd_medico, b.cd_Especialidade, cd_estabelecimento_p, b.nr_seq_item_selec),1,255) ds_agendamento,
		c.ie_status_agenda,
		substr(d.ds_valor_dominio,1,20) ds_status_agenda,
		c.nr_sequencia,
		b.ie_tipo_agendamento,
		c.cd_agenda,
		c.dt_confirmacao,
		CASE WHEN b.ie_anestesia='S' THEN wheb_mensagem_pck.get_texto(306949)  ELSE wheb_mensagem_pck.get_texto(306950) END  ds_anestesia,
		c.dt_agenda - coalesce(substr(Ageint_Obter_Tempo_Chegada(b.nr_seq_proc_interno, b.ie_anestesia),1,100),0)/1440 dt_chegada,
		substr(obter_valor_dominio(1227,c.ie_autorizacao),1,240) ds_autorizacao,
		c.cd_procedimento,
		c.ie_origem_proced,
		c.cd_convenio,
		coalesce(c.ie_confirmacao_aut,'N') ie_confirmacao_aut,
		'C' ie_tipo,
		CASE WHEN coalesce(c.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada,
		a.nr_seq_status,
		substr(c.ds_observacao,1,4000),
		c.cd_categoria,
		c.cd_plano,
		a.cd_profissional,
		c.cd_medico_req,
		Ageint_obter_se_hor_bloq(c.cd_agenda,c.dt_agenda,c.cd_convenio,c.cd_medico_req),
		a.dt_inicio_agendamento,
		substr(Obter_se_pessoa_internada(a.cd_pessoa_fisica),1,1),
		b.nr_seq_grupo_selec,
		b.nr_seq_agenda_int,
		CASE WHEN coalesce(e.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada_conf,
		obter_estab_agenda(c.cd_agenda) cd_estab_agenda
	FROM agenda_integrada_item b, agenda_integrada a, agenda_consulta c
LEFT OUTER JOIN ageint_obs_agenda_confirm e ON (c.nr_sequencia = e.nr_seq_agenda)
LEFT OUTER JOIN valor_dominio d ON (c.ie_status_agenda = d.vl_dominio)
WHERE a.nr_sequencia  = b.nr_seq_agenda_int  and (a.nm_paciente IS NOT NULL AND a.nm_paciente::text <> '') and b.nr_seq_agenda_cons    = c.nr_sequencia and c.dt_agenda             between trunc(dt_agenda_inicial_p) and trunc(dt_agenda_final_p) + 86399/86400 and b.ie_tipo_agendamento   = 'C' and d.cd_dominio            = 83  and not exists (SELECT 1 from ageint_confirm_agendamento x where c.nr_sequencia = x.nr_seq_agenda and x.nm_usuario = nm_usuario_p) order by 2;
	
C03 CURSOR FOR
	SELECT  c.cd_pessoa_fisica,
		c.nm_paciente,
		c.hr_inicio dt_agenda,
		c.nr_seq_proc_interno,
		null, 
		null, 
		substr(Obter_Item_Grid_Ageint(c.nr_seq_proc_interno, null, null, cd_estabelecimento_p, null),1,255) ds_agendamento,
		c.ie_status_agenda,
		substr(d.ds_valor_dominio,1,20) ds_status_agenda,
		c.nr_sequencia,
		'E' ie_tipo_agendamento,
		c.cd_agenda,
		c.dt_confirmacao,
		CASE WHEN c.ie_anestesia='S' THEN wheb_mensagem_pck.get_texto(306949)  ELSE wheb_mensagem_pck.get_texto(306950) END  ds_anestesia,
		c.hr_inicio - coalesce(substr(Ageint_Obter_Tempo_Chegada(c.nr_seq_proc_interno, c.ie_anestesia),1,100),0)/1440 dt_chegada,
		substr(obter_valor_dominio(1227,c.ie_autorizacao),1,240) ds_autorizacao,
		c.cd_procedimento,
		c.ie_origem_proced,
		c.cd_convenio,
		coalesce(c.ie_confirmacao_aut,'N') ie_confirmacao_aut,
		'E' ie_tipo,
		CASE WHEN coalesce(c.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada,
		null nr_seq_status,
		substr(c.ds_observacao,1,4000),
		c.cd_categoria,
		c.cd_plano,
		null cd_profissional,
		c.cd_medico_exec,
		Ageint_obter_se_hor_bloq(c.cd_agenda,c.hr_inicio,c.cd_convenio,c.cd_medico_exec),
		c.dt_agendamento,
		substr(Obter_se_pessoa_internada(c.cd_pessoa_fisica),1,1),
		null,
		0,
		CASE WHEN coalesce(e.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada_conf,
		a.cd_estabelecimento cd_estab_agenda
	FROM agenda a, agenda_paciente c
LEFT OUTER JOIN ageint_obs_agenda_confirm e ON (c.nr_sequencia = e.nr_seq_agenda)
LEFT OUTER JOIN valor_dominio d ON (c.ie_status_agenda = d.vl_dominio)
WHERE a.cd_agenda = c.cd_agenda  and (c.nm_paciente IS NOT NULL AND c.nm_paciente::text <> '') and c.dt_agenda             between trunc(dt_agenda_inicial_p) and trunc(dt_agenda_final_p) + 86399/86400 and a.cd_tipo_agenda  	= 2 and d.cd_dominio            = 83  and c.ie_status_agenda 	<> 'L' and not exists (SELECT 1 from ageint_confirm_agendamento x where c.nr_sequencia = x.nr_seq_agenda and x.nm_usuario = nm_usuario_p) order by 2;
	
	
C04 CURSOR FOR
	SELECT  c.cd_pessoa_fisica,
		c.nm_paciente,
		c.dt_agenda dt_agenda,
		NULL,
		a.cd_especialidade,
		c.cd_medico_req, 
		substr(Obter_Item_Grid_Ageint(null, c.cd_medico_req, a.cd_Especialidade, cd_estabelecimento_p, null),1,255) ds_agendamento,
		c.ie_status_agenda,
		substr(d.ds_valor_dominio,1,20) ds_status_agenda,
		c.nr_sequencia,
		CASE WHEN a.cd_tipo_agenda=5 THEN 'S'  ELSE 'C' END  ie_tipo_agendamento,
		c.cd_agenda,
		c.dt_confirmacao,
		wheb_mensagem_pck.get_texto(306950) ds_anestesia,
		c.dt_agenda - coalesce(substr(Ageint_Obter_Tempo_Chegada(null, null),1,100),0)/1440 dt_chegada,
		substr(obter_valor_dominio(1227,c.ie_autorizacao),1,240) ds_autorizacao,
		c.cd_procedimento,
		c.ie_origem_proced,
		c.cd_convenio,
		coalesce(c.ie_confirmacao_aut,'N') ie_confirmacao_aut,
		'C' ie_tipo,
		CASE WHEN coalesce(c.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada,
		null nr_seq_status,
		substr(c.ds_observacao,1,4000),
		c.cd_categoria,
		c.cd_plano,
		null cd_profissional,
		c.cd_medico_req,
		Ageint_obter_se_hor_bloq(c.cd_agenda,c.dt_agenda,c.cd_convenio,c.cd_medico_req),
		c.dt_agendamento,
		substr(Obter_se_pessoa_internada(c.cd_pessoa_fisica),1,1),
		null,
		0,
		CASE WHEN coalesce(e.ds_observacao::text, '') = '' THEN wheb_mensagem_pck.get_texto(306950)  ELSE wheb_mensagem_pck.get_texto(306949) END  ie_obs_informada_conf,
		a.cd_estabelecimento cd_estab_agenda
	FROM agenda a, agenda_consulta c
LEFT OUTER JOIN ageint_obs_agenda_confirm e ON (c.nr_sequencia = e.nr_seq_agenda)
LEFT OUTER JOIN valor_dominio d ON (c.ie_status_agenda = d.vl_dominio)
WHERE a.cd_agenda = c.cd_agenda  and (c.nm_paciente IS NOT NULL AND c.nm_paciente::text <> '') and c.dt_agenda             between trunc(dt_agenda_inicial_p) and trunc(dt_agenda_final_p) + 86399/86400 and a.cd_tipo_agenda in (3,4,5) and d.cd_dominio            = 83  and c.ie_status_agenda 	<> 'L' and not exists (SELECT 1 from ageint_confirm_agendamento x where c.nr_sequencia = x.nr_seq_agenda and x.nm_usuario = nm_usuario_p) order by 2;
	
			

BEGIN

ie_somente_integrada_w := Obter_Param_Usuario(869, 184, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_somente_integrada_w);
ie_apresentar_cancelados_w := Obter_Param_Usuario(869, 185, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_apresentar_cancelados_w);

delete	FROM ageint_confirm_agendamento
where	nm_usuario = nm_usuario_p
and	coalesce(ie_em_agenda,'N')	= 'N';


if (ie_somente_integrada_w = 'S') then

	open C01;
	loop
	fetch C01 into	
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_agenda_w,
		nr_Seq_proc_interno_w,
		cd_especialidade_w,
		cd_medico_W,
		ds_Agendamento_w,
		ie_status_agenda_w,
		ds_status_agenda_w,
		nr_seq_agenda_w,
		ie_tipo_agendamento_w,
		cd_agenda_W,
		dt_confirmacao_w,
		ds_anestesia_w,
		dt_chegada_w,
		ds_autorizacao_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_convenio_w,
		ie_confirmacao_aut_w,
		ie_tipo_w,
		ie_obs_informada_w,
		nr_seq_status_w,
		ds_observacao_w,
		cd_categoria_w,
		cd_plano_w,
		cd_profissional_w,
		cd_medico_exec_w,
		ie_bloqueado_w,
		dt_inicio_agendamento_w,
		ie_pac_internado_w,
		nr_seq_grupo_selec_w,
		nr_seq_ageint_int_w,
		ie_obs_informada_conf_w,
		cd_estab_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
				
		select	max(ie_em_agenda),
			max(nm_usuario_em_agenda)
		into STRICT	ie_em_agenda_w,
			nm_usuario_em_agenda_w
		from	ageint_confirm_agendamento
		where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		
		if	((ie_apresentar_cancelados_w = 'S' AND ie_status_agenda_w = 'C') or (ie_status_agenda_w <> 'C')) then
			insert into ageint_confirm_agendamento(cd_pessoa_fisica,
				nm_paciente,
				dt_agenda,
				nr_Seq_proc_interno,
				cd_especialidade,
				cd_medico,
				ds_Agendamento,
				ie_status_agenda,
				ds_status_agenda,
				nr_seq_agenda,
				ie_tipo_agendamento,
				cd_agenda,
				dt_confirmacao,
				ds_anestesia,
				dt_chegada,
				ds_autorizacao,
				cd_procedimento,
				ie_origem_proced,
				cd_convenio,
				ie_confirmacao_aut,
				ie_tipo,
				ie_obs_informada,
				nm_usuario,
				dt_Atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_sequencia,
				nr_seq_status,
				ds_observacao,
				cd_categoria,
				cd_plano,
				cd_profissional,
				cd_medico_exec,
				ie_bloqueado,
				dt_inicio_agendamento,
				ie_em_agenda,
				nm_usuario_em_agenda,
				ie_pac_internado,
				nr_seq_grupo_selec,
				nr_seq_ageint,
				ie_obs_informada_conf,
				cd_estab_agenda)
			values (cd_pessoa_fisica_w,
				nm_paciente_w,
				dt_agenda_w,
				nr_Seq_proc_interno_w,
				cd_especialidade_w,
				cd_medico_W,
				ds_Agendamento_w,
				ie_status_agenda_w,
				ds_status_agenda_w,
				nr_seq_agenda_w,
				ie_tipo_agendamento_w,
				cd_agenda_W,
				dt_confirmacao_w,
				ds_anestesia_w,
				dt_chegada_w,
				ds_autorizacao_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				cd_convenio_w,
				ie_confirmacao_aut_w,
				ie_tipo_w,
				ie_obs_informada_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nextval('ageint_confirm_agendamento_seq'),
				nr_seq_status_w,
				ds_observacao_w,
				cd_categoria_w,
				cd_plano_w,
				cd_profissional_w,
				cd_medico_exec_w,
				ie_bloqueado_w,
				dt_inicio_agendamento_w,
				ie_em_agenda_w,
				nm_usuario_em_agenda_w,
				ie_pac_internado_w,
				nr_seq_grupo_selec_w,
				nr_seq_ageint_int_w,
				ie_obs_informada_conf_W,
				cd_estab_agenda_w);
		end if;
		end;
	end loop;
	close C01;

	open C02;
	loop
	fetch C02 into	
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_agenda_w,
		nr_Seq_proc_interno_w,
		cd_especialidade_w,
		cd_medico_W,
		ds_Agendamento_w,
		ie_status_agenda_w,
		ds_status_agenda_w,
		nr_seq_agenda_w,
		ie_tipo_agendamento_w,
		cd_agenda_W,
		dt_confirmacao_w,
		ds_anestesia_w,
		dt_chegada_w,
		ds_autorizacao_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_convenio_w,
		ie_confirmacao_aut_w,
		ie_tipo_w,
		ie_obs_informada_w,
		nr_seq_status_w,
		ds_observacao_w,
		cd_categoria_w,
		cd_plano_w,
		cd_profissional_w,
		cd_medico_exec_w,
		ie_bloqueado_w,
		dt_inicio_agendamento_w,
		ie_pac_internado_w,
		nr_seq_grupo_selec_w,
		nr_seq_ageint_int_w,
		ie_obs_informada_conf_w,
		cd_estab_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
		select	max(ie_em_agenda),
			max(nm_usuario_em_agenda)
		into STRICT	ie_em_agenda_w,
			nm_usuario_em_agenda_w
		from	ageint_confirm_agendamento
		where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		
		if	((ie_apresentar_cancelados_w = 'S' AND ie_status_agenda_w = 'C') or (ie_status_agenda_w <> 'C')) then
			insert into ageint_confirm_agendamento(cd_pessoa_fisica,
				nm_paciente,
				dt_agenda,
				nr_Seq_proc_interno,
				cd_especialidade,
				cd_medico,
				ds_Agendamento,
				ie_status_agenda,
				ds_status_agenda,
				nr_seq_agenda,
				ie_tipo_agendamento,
				cd_agenda,
				dt_confirmacao,
				ds_anestesia,
				dt_chegada,
				ds_autorizacao,
				cd_procedimento,
				ie_origem_proced,
				cd_convenio,
				ie_confirmacao_aut,
				ie_tipo,
				ie_obs_informada,
				nm_usuario,
				dt_Atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_sequencia,
				nr_seq_status,
				ds_observacao,
				cd_categoria,
				cd_plano,
				cd_profissional,
				cd_medico_exec,
				ie_bloqueado,
				dt_inicio_agendamento,
				ie_em_agenda,
				nm_usuario_em_agenda,
				ie_pac_internado,
				nr_seq_grupo_selec,
				nr_seq_ageint,
				ie_obs_informada_conf,
				cd_estab_agenda)
			values (cd_pessoa_fisica_w,
				nm_paciente_w,
				dt_agenda_w,
				nr_Seq_proc_interno_w,
				cd_especialidade_w,
				cd_medico_W,
				ds_Agendamento_w,
				ie_status_agenda_w,
				ds_status_agenda_w,
				nr_seq_agenda_w,
				ie_tipo_agendamento_w,
				cd_agenda_W,
				dt_confirmacao_w,
				ds_anestesia_w,
				dt_chegada_w,
				ds_autorizacao_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				cd_convenio_w,
				ie_confirmacao_aut_w,
				ie_tipo_w,
				ie_obs_informada_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nextval('ageint_confirm_agendamento_seq'),
				nr_seq_status_w,
				ds_observacao_w,
				cd_categoria_w,
				cd_plano_w,
				cd_profissional_w,
				cd_medico_exec_w,
				ie_bloqueado_w,
				dt_inicio_agendamento_w,
				ie_em_agenda_w,
				nm_usuario_em_agenda_w,
				ie_pac_internado_w,
				nr_seq_grupo_selec_w,
				nr_seq_ageint_int_w,
				ie_obs_informada_conf_w,
				cd_estab_agenda_w);
		end if;
		end;
	end loop;
	close C02;
else
	open C03;
	loop
	fetch C03 into	
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_agenda_w,
		nr_Seq_proc_interno_w,
		cd_especialidade_w,
		cd_medico_W,
		ds_Agendamento_w,
		ie_status_agenda_w,
		ds_status_agenda_w,
		nr_seq_agenda_w,
		ie_tipo_agendamento_w,
		cd_agenda_W,
		dt_confirmacao_w,
		ds_anestesia_w,
		dt_chegada_w,
		ds_autorizacao_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_convenio_w,
		ie_confirmacao_aut_w,
		ie_tipo_w,
		ie_obs_informada_w,
		nr_seq_status_w,
		ds_observacao_w,
		cd_categoria_w,
		cd_plano_w,
		cd_profissional_w,
		cd_medico_exec_w,
		ie_bloqueado_w,
		dt_inicio_agendamento_w,
		ie_pac_internado_w,
		nr_seq_grupo_selec_w,
		nr_seq_ageint_int_w,
		ie_obs_informada_conf_w,
		cd_estab_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		
		select	max(ie_em_agenda),
			max(nm_usuario_em_agenda)
		into STRICT	ie_em_agenda_w,
			nm_usuario_em_agenda_w
		from	ageint_confirm_agendamento
		where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		
		if	((ie_apresentar_cancelados_w = 'S' AND ie_status_agenda_w = 'C') or (ie_status_agenda_w <> 'C')) then
			insert into ageint_confirm_agendamento(cd_pessoa_fisica,
				nm_paciente,
				dt_agenda,
				nr_Seq_proc_interno,
				cd_especialidade,
				cd_medico,
				ds_Agendamento,
				ie_status_agenda,
				ds_status_agenda,
				nr_seq_agenda,
				ie_tipo_agendamento,
				cd_agenda,
				dt_confirmacao,
				ds_anestesia,
				dt_chegada,
				ds_autorizacao,
				cd_procedimento,
				ie_origem_proced,
				cd_convenio,
				ie_confirmacao_aut,
				ie_tipo,
				ie_obs_informada,
				nm_usuario,
				dt_Atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_sequencia,
				nr_seq_status,
				ds_observacao,
				cd_categoria,
				cd_plano,
				cd_profissional,
				cd_medico_exec,
				ie_bloqueado,
				dt_inicio_agendamento,
				ie_em_agenda,
				nm_usuario_em_agenda,
				ie_pac_internado,
				nr_seq_grupo_selec,
				nr_seq_ageint,
				ie_obs_informada_conf,
				cd_estab_agenda)
			values (cd_pessoa_fisica_w,
				nm_paciente_w,
				dt_agenda_w,
				nr_Seq_proc_interno_w,
				cd_especialidade_w,
				cd_medico_W,
				ds_Agendamento_w,
				ie_status_agenda_w,
				ds_status_agenda_w,
				nr_seq_agenda_w,
				ie_tipo_agendamento_w,
				cd_agenda_W,
				dt_confirmacao_w,
				ds_anestesia_w,
				dt_chegada_w,
				ds_autorizacao_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				cd_convenio_w,
				ie_confirmacao_aut_w,
				ie_tipo_w,
				ie_obs_informada_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nextval('ageint_confirm_agendamento_seq'),
				nr_seq_status_w,
				ds_observacao_w,
				cd_categoria_w,
				cd_plano_w,
				cd_profissional_w,
				cd_medico_exec_w,
				ie_bloqueado_w,
				dt_inicio_agendamento_w,
				ie_em_agenda_w,
				nm_usuario_em_agenda_w,
				ie_pac_internado_w,
				nr_seq_grupo_selec_w,
				nr_seq_ageint_int_w,
				ie_obs_informada_conf_w,
				cd_estab_agenda_w);
		end if;
		end;
	end loop;
	close C03;

	open C04;
	loop
	fetch C04 into	
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_agenda_w,
		nr_Seq_proc_interno_w,
		cd_especialidade_w,
		cd_medico_W,
		ds_Agendamento_w,
		ie_status_agenda_w,
		ds_status_agenda_w,
		nr_seq_agenda_w,
		ie_tipo_agendamento_w,
		cd_agenda_W,
		dt_confirmacao_w,
		ds_anestesia_w,
		dt_chegada_w,
		ds_autorizacao_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_convenio_w,
		ie_confirmacao_aut_w,
		ie_tipo_w,
		ie_obs_informada_w,
		nr_seq_status_w,
		ds_observacao_w,
		cd_categoria_w,
		cd_plano_w,
		cd_profissional_w,
		cd_medico_exec_w,
		ie_bloqueado_w,
		dt_inicio_agendamento_w,
		ie_pac_internado_w,
		nr_seq_grupo_selec_w,
		nr_seq_ageint_int_w,
		ie_obs_informada_conf_w,
		cd_estab_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		
		select	max(ie_em_agenda),
			max(nm_usuario_em_agenda)
		into STRICT	ie_em_agenda_w,
			nm_usuario_em_agenda_w
		from	ageint_confirm_agendamento
		where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		
		if	((ie_apresentar_cancelados_w = 'S' AND ie_status_agenda_w = 'C') or (ie_status_agenda_w <> 'C')) then
			insert into ageint_confirm_agendamento(cd_pessoa_fisica,
				nm_paciente,
				dt_agenda,
				nr_Seq_proc_interno,
				cd_especialidade,
				cd_medico,
				ds_Agendamento,
				ie_status_agenda,
				ds_status_agenda,
				nr_seq_agenda,
				ie_tipo_agendamento,
				cd_agenda,
				dt_confirmacao,
				ds_anestesia,
				dt_chegada,
				ds_autorizacao,
				cd_procedimento,
				ie_origem_proced,
				cd_convenio,
				ie_confirmacao_aut,
				ie_tipo,
				ie_obs_informada,
				nm_usuario,
				dt_Atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_sequencia,
				nr_seq_status,
				ds_observacao,
				cd_categoria,
				cd_plano,
				cd_profissional,
				cd_medico_exec,
				ie_bloqueado,
				dt_inicio_agendamento,
				ie_em_agenda,
				nm_usuario_em_agenda,
				ie_pac_internado,
				nr_seq_grupo_selec,
				nr_seq_ageint,
				ie_obs_informada_conf,
				cd_estab_agenda)
			values (cd_pessoa_fisica_w,
				nm_paciente_w,
				dt_agenda_w,
				nr_Seq_proc_interno_w,
				cd_especialidade_w,
				cd_medico_W,
				ds_Agendamento_w,
				ie_status_agenda_w,
				ds_status_agenda_w,
				nr_seq_agenda_w,
				ie_tipo_agendamento_w,
				cd_agenda_W,
				dt_confirmacao_w,
				ds_anestesia_w,
				dt_chegada_w,
				ds_autorizacao_w,
				cd_procedimento_w,
				ie_origem_proced_w,
				cd_convenio_w,
				ie_confirmacao_aut_w,
				ie_tipo_w,
				ie_obs_informada_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nextval('ageint_confirm_agendamento_seq'),
				nr_seq_status_w,
				ds_observacao_w,
				cd_categoria_w,
				cd_plano_w,
				cd_profissional_w,
				cd_medico_exec_w,
				ie_bloqueado_w,
				dt_inicio_agendamento_w,
				ie_em_agenda_w,
				nm_usuario_em_agenda_w,
				ie_pac_internado_w,
				nr_seq_grupo_selec_w,
				nr_seq_ageint_int_w,
				ie_obs_informada_conf_w,
				cd_estab_agenda_w);
		end if;
		end;
	end loop;
	close C04;
end if;
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_gerar_pac_confirm_gwt ( dt_agenda_inicial_p timestamp, dt_agenda_final_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

