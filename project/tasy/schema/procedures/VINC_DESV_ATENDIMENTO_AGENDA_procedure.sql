-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE vinc_desv_atendimento_agenda ( nr_seq_agenda_p bigint, nr_atendimento_p bigint, nm_usuario_p text, ie_opcao_p text) AS $body$
DECLARE


cd_pessoa_fisica_w	varchar(10);
cd_pf_agenda_w       pessoa_fisica.cd_pessoa_fisica%type;
nr_cirurgia_w		bigint;
cd_estabelecimento_w	smallint;
ie_atendimento_w	varchar(15);
ie_prescricao_w		varchar(1);
ie_cirurgia_iniciada_w	varchar(1);
cd_categoria_w		varchar(10);
cd_convenio_w		integer;
ie_atualDadosDaEUP_w	varchar(1);
ie_status_w		varchar(3);
cd_usuario_convenio_w	varchar(30);
ie_estrutura_pepo_w	varchar(1);
nr_seq_classif_atend_w	bigint;
ie_consiste_horario_w	varchar(1);
nm_paciente_w		varchar(100);	
cd_agenda_w		bigint;
ie_status_agenda_w	varchar(15);	
hr_inicio_w		timestamp;
dt_agenda_w		timestamp;
cd_plano_convenio_w	varchar(10);
cd_tipo_acomodacao_w   	smallint;
ie_tipo_atendimento_w	smallint;
cd_procedencia_w	integer;
ie_conv_menor_prio_w	parametro_agenda.ie_conv_menor_prio%type;

nr_doc_convenio_w	varchar(20);
cd_senha_w		varchar(20);
dt_validade_carteira_w	timestamp;
ie_gerar_cirurgia_w	varchar(20);
			


BEGIN

if (nr_atendimento_p > 0) then
	select	coalesce(max(cd_estabelecimento),0)
	into STRICT	cd_estabelecimento_w
	from	atendimento_paciente	
	where	nr_atendimento	=	nr_atendimento_p;
end if;

select	coalesce(nr_cirurgia,0)
into STRICT	nr_cirurgia_w
from	agenda_paciente
where	nr_sequencia	=	nr_seq_agenda_p;

ie_atendimento_w := obter_param_usuario(871, 84, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_atendimento_w);

ie_prescricao_w := obter_param_usuario(871, 210, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_prescricao_w);
ie_atualDadosDaEUP_w := obter_param_usuario(871, 262, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_atualDadosDaEUP_w);
ie_status_w := obter_param_usuario(871, 1, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_status_w);
ie_estrutura_pepo_w := obter_param_usuario(872, 158, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_estrutura_pepo_w);
nr_seq_classif_atend_w := obter_param_usuario(871, 634, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, nr_seq_classif_atend_w);
ie_gerar_cirurgia_w := obter_param_usuario(871, 839, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_cirurgia_w);

if (ie_opcao_p = 'V') then

	if (nr_atendimento_p > 0) then
		select	max(cd_pessoa_fisica),
			max(ie_tipo_atendimento),
			max(cd_procedencia)
		into STRICT	cd_pessoa_fisica_w,
			ie_tipo_atendimento_w,
			cd_procedencia_w
		from	atendimento_paciente
		where	nr_atendimento		=	nr_atendimento_p;
		
		SELECT	coalesce(max(ie_conv_menor_prio), 'N')
		INTO STRICT 	ie_conv_menor_prio_w
		FROM 	parametro_agenda
		WHERE 	cd_estabelecimento = obter_estabelecimento_ativo;
		
		select	coalesce(max(cd_categoria),''),
			coalesce(max(cd_convenio),''),
			coalesce(max(cd_usuario_convenio),''),
			coalesce(max(cd_plano_convenio),''),
			coalesce(max(cd_tipo_acomodacao),''),			
			coalesce(max(nr_doc_convenio),''),
			coalesce(max(cd_senha),''),
			coalesce(max(dt_validade_carteira),'')
		into STRICT	cd_categoria_w,
			cd_convenio_w,
			cd_usuario_convenio_w,
			cd_plano_convenio_w,
			cd_tipo_acomodacao_w,			
			nr_doc_convenio_w,
			cd_senha_w,
			dt_validade_carteira_w
		from 	atend_categoria_convenio
		where	nr_atendimento		=	nr_atendimento_p
				and (ie_conv_menor_prio_w <> 'S'
				OR cd_convenio = obter_convenio_menor_prio(nr_atendimento_p));
	
		select	CASE WHEN max(ie_status_agenda)='R' THEN ie_status_w  ELSE max(ie_status_agenda) END ,
			max(hr_inicio),
			max(dt_agenda),
			max(cd_agenda),
         max(cd_pessoa_fisica)
		into STRICT	ie_status_agenda_w,
			hr_inicio_w,
			dt_agenda_w,
			cd_agenda_w,
         cd_pf_agenda_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;

      if (cd_pf_agenda_w IS NOT NULL AND cd_pf_agenda_w::text <> '') and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (cd_pf_agenda_w <> cd_pessoa_fisica_w) then
         CALL Wheb_mensagem_pck.exibir_mensagem_abort(184543,'ATENDIMENTO='||nr_atendimento_p||';CD_PESSOA_FISICA='||substr(obter_nome_pf(cd_pf_agenda_w),1,100));
      end if;
		
		select	coalesce(max('S'),'N'),
			substr(coalesce(max(nm_paciente),obter_nome_pf(max(cd_pessoa_fisica))),1,100)
		into STRICT	ie_consiste_horario_w,
			nm_paciente_w
		from	agenda_paciente
		where	hr_inicio 		= hr_inicio_w
		and	dt_agenda 		= dt_agenda_w
		and	cd_agenda 		= cd_agenda_w
		and	ie_status_agenda 	= ie_status_agenda_w
		and	nr_sequencia 		<> nr_seq_agenda_p;
		if (ie_consiste_horario_w = 'S') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(191160,	'NM_PACIENTE='||nm_paciente_w||
									';DS_SALA='||substr(obter_desc_agenda(cd_agenda_w),1,100)||
									';DS_HORARIO='||to_char(hr_inicio_w,'dd/mm/yyyy hh24:mi:ss')||
									';DS_STATUS='||substr(obter_valor_dominio(83, ie_status_agenda_w),1,100));
		end if;	

		update	agenda_paciente
		set	nr_atendimento				=	nr_atendimento_p,
			cd_pessoa_fisica			=	cd_pessoa_fisica_w,
			dt_atualizacao				=	clock_timestamp(),	
			nm_usuario				=	nm_usuario_p,
			dt_vinculacao_atendimento 		= 	clock_timestamp(),
			cd_convenio				=	CASE WHEN ie_atualDadosDaEUP_w='S' THEN cd_convenio_w  ELSE cd_convenio END ,
			cd_categoria				=	CASE WHEN ie_atualDadosDaEUP_w='S' THEN cd_categoria_w  ELSE cd_categoria END ,
			cd_usuario_convenio			=	CASE WHEN ie_atualDadosDaEUP_w='S' THEN cd_usuario_convenio_w  ELSE cd_usuario_convenio END ,
			ie_status_agenda			=	CASE WHEN ie_status_agenda='R' THEN ie_status_w  ELSE ie_status_agenda END ,
			cd_plano				= 	CASE WHEN ie_atualDadosDaEUP_w='S' THEN  cd_plano_convenio_w  ELSE cd_plano END ,
			cd_tipo_acomodacao   			= 	CASE WHEN ie_atualDadosDaEUP_w='S' THEN  cd_tipo_acomodacao_w  ELSE cd_tipo_acomodacao END ,
			ie_tipo_atendimento			= 	CASE WHEN ie_atualDadosDaEUP_w='S' THEN  ie_tipo_atendimento_w  ELSE ie_tipo_atendimento END ,
			cd_procedencia  			=	CASE WHEN ie_atualDadosDaEUP_w='S' THEN  cd_procedencia_w  ELSE cd_procedencia END ,			
			nr_doc_convenio  			=	CASE WHEN ie_atualDadosDaEUP_w='S' THEN  coalesce(nr_doc_convenio_w, nr_doc_convenio)  ELSE nr_doc_convenio END ,
			ds_senha   				=	CASE WHEN ie_atualDadosDaEUP_w='S' THEN  coalesce(cd_senha_w, ds_senha)  ELSE ds_senha END ,
			dt_validade_carteira   			=	CASE WHEN ie_atualDadosDaEUP_w='S' THEN  dt_validade_carteira_w  ELSE dt_validade_carteira END
		where	nr_sequencia				=	nr_seq_agenda_p;

		
		update	prescr_medica
		set	nr_atendimento	=	nr_atendimento_p,
			cd_pessoa_fisica=	cd_pessoa_fisica_w,
			nm_usuario	=	nm_usuario_p,
			dt_atualizacao	=	clock_timestamp()
		where	nr_seq_agenda	=	nr_seq_agenda_p;

		update	autorizacao_convenio
		set		nr_atendimento   	=	nr_atendimento_p
		where	nr_seq_agenda    	=	nr_seq_agenda_p
		and		coalesce(nr_atendimento::text, '') = '';

	if (nr_cirurgia_w > 0) then
		update	cirurgia
		set	cd_pessoa_fisica		=	cd_pessoa_fisica_w,
			nr_atendimento		=	CASE WHEN ie_atendimento_w='S' THEN coalesce(nr_atendimento,nr_atendimento_p)  ELSE nr_atendimento END ,
			nm_usuario		=	nm_usuario_p,
			dt_atualizacao		=	clock_timestamp()
		where	nr_cirurgia		=	nr_cirurgia_w;
	elsif (ie_gerar_cirurgia_w	= 'S') then
	
		begin
			CALL GERAR_CIRURGIA_AGENDA_HTML5(nr_seq_agenda_p);
		exception
		when others then
			null;
		end;
		
	end if;

	if (ie_estrutura_pepo_w = 'S') then
		update  pepo_cirurgia 
		set 	nr_atendimento = nr_atendimento_p
		where 	nr_sequencia = (SELECT max(nr_seq_pepo) from cirurgia where nr_cirurgia = nr_cirurgia_w);
	end if;
	
		if (nr_seq_classif_atend_w > 0) and (nr_seq_classif_atend_w IS NOT NULL AND nr_seq_classif_atend_w::text <> '') then
	
			update atendimento_paciente
			set    nr_seq_classificacao = nr_seq_classif_atend_w
			where  nr_atendimento       = nr_atendimento_p;
		end if;
		
	
	
	end if;

else
	update	agenda_paciente
	set	nr_atendimento			 = NULL,
		dt_atualizacao			=	clock_timestamp(),	
		nm_usuario			=	nm_usuario_p,
		dt_vinculacao_atendimento 	 = NULL,
		cd_plano			 = NULL,
		cd_tipo_acomodacao 		 = NULL,
		ie_tipo_atendimento		 = NULL,
		cd_procedencia			 = NULL,
		nr_doc_convenio			 = NULL,
		ds_senha			 = NULL,
		dt_validade_carteira		 = NULL
	where	nr_sequencia	=	nr_seq_agenda_p;
	
	
	if (nr_cirurgia_w > 0) and (ie_atendimento_w = 'S') then
		begin
		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_cirurgia_iniciada_w
		from	cirurgia
		where	nr_cirurgia = nr_cirurgia_w
		and		(dt_inicio_real IS NOT NULL AND dt_inicio_real::text <> '');
		-- Desfaz o inicio da cirurgia 
		if (ie_cirurgia_iniciada_w = 'S') then
			begin
			CALL alterar_dados_cirurgia(nr_cirurgia_w,1);
			end;
		end if;	
		
		update	cirurgia
		set	nr_atendimento		 = NULL,
			nm_usuario		=	nm_usuario_p,
			dt_atualizacao		=	clock_timestamp()
		where	nr_cirurgia		=	nr_cirurgia_w
		and	coalesce(dt_inicio_real::text, '') = '';
		end;
	end if;
	
	if (ie_prescricao_w = 'S') then
		update	prescr_medica
		set	nr_atendimento	 = NULL,
			nm_usuario	=	nm_usuario_p,
			dt_atualizacao	=	clock_timestamp()
		where	nr_seq_agenda	=	nr_seq_agenda_p;
	end if;	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE vinc_desv_atendimento_agenda ( nr_seq_agenda_p bigint, nr_atendimento_p bigint, nm_usuario_p text, ie_opcao_p text) FROM PUBLIC;

