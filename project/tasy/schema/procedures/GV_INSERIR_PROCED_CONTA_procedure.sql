-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gv_inserir_proced_conta (nr_atendimento_p bigint, qt_procedimento_p text, nm_usuario_p text, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint ) AS $body$
DECLARE

 
nr_seq_proc_pac_w 	bigint 	:= 0;
nr_atendimento_w 	bigint 	:= 0;
nr_seq_atepacu_w 	bigint 	:= 0;
nr_seq_proc_interno_w 	bigint 	:= 0;
cd_convenio_w  	bigint 	:= 0;
cd_convenio_regra_w	bigint;
cd_categoria_w		bigint 	:= 0;
cd_pessoa_fisica_w	bigint 	:= 0;
dt_ent_unidade_w	timestamp 		:= clock_timestamp();
cd_local_estoque_w	bigint;
ds_erro_w		varchar(255);
qt_registros_w		bigint;
cd_procedimento_w  	bigint 	:= 0;
ie_origem_proced_w  	smallint 	:= null;
cd_categoria_regra_w	bigint;

C01 CURSOR FOR 
	SELECT	nr_seq_proc_interno, 
		cd_convenio, 
		cd_categoria 
	from	regra_inserir_diaria_gv;


BEGIN 
 
select 	coalesce(count(*),'0') 
into STRICT	qt_registros_w 
from	regra_inserir_diaria_gv;
 
if 	((qt_registros_w > 0) and (nr_atendimento_p <> '0') and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '')) then 
	begin 
		 
	select 	max(obter_convenio_atendimento(a.nr_atendimento)), 
		max(obter_dados_categ_conv(a.nr_atendimento,'CA')), 
		max(a.cd_pessoa_fisica) 
	into STRICT 	cd_convenio_w, 
		cd_categoria_w, 
		cd_pessoa_fisica_w 
	from 	atendimento_paciente a 
	where 	a.nr_atendimento = nr_atendimento_p;
 
	-- NR_SEQ_ATEPACU -- obtem data entrada unidade do atendimento quando setor for igual ao do usuario no momento da dialise 
	select 	max(w.dt_entrada_unidade) 
	into STRICT	dt_ent_unidade_w 
	from  	atend_paciente_unidade w 
	where 	w.nr_atendimento 		= nr_atendimento_p 
	and  	w.cd_setor_atendimento 		= cd_setor_atendimento_p;
 
		BEGIN 
		select	max(a.nr_seq_interno) 
		into STRICT	nr_seq_atepacu_w 
		from 	atend_paciente_unidade a 
		where 	a.cd_setor_atendimento		= cd_setor_atendimento_p 
		and	a.nr_atendimento 		= nr_atendimento_p 
		and	trunc(a.dt_entrada_unidade) 	= trunc(dt_ent_unidade_w);
		EXCEPTION 
		WHEN others then 
			nr_seq_atepacu_w := 0;
		END;
 
	IF coalesce(dt_ent_unidade_w::text, '') = '' then 
		dt_ent_unidade_w := clock_timestamp(); --data entrada unidade, se tiver null eh pq nao teve passagem, atribui sysdate neste caso. 
	END IF;
 
	--Se não possuir passagem naquele setor / atendimento, é preciso gerar passagem, se precisar gerar passagem e não possuir NR_ATENDIMENTO, não será possivel gerar passagem, 
	--neste caso a procedure vai ter q abortar 
 
	IF ((nr_atendimento_p = '0') or (coalesce(nr_atendimento_p::text, '') = '')) then 
		ds_erro_w := wheb_mensagem_pck.get_texto(191446)||chr(13);
		--Para inserir o procedimento automaticamente na conta é necessário existir o número do atendimento 
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(193594,'DS_ERRO=' || ds_erro_w);
	END IF;
 
	--se nao achar passagem setor, gera passagem. 
	IF (coalesce(nr_seq_atepacu_w,0) = 0) then 
		CALL Gerar_Passagem_Setor_Atend(	nr_atendimento_p, 
							cd_setor_atendimento_p, 
							clock_timestamp(),--dt_ent_unidade_w, 
							'S', 
							nm_usuario_p);
	END IF;
 
	select	max(a.nr_seq_interno) 
	into STRICT	nr_seq_atepacu_w 
	from 	atend_paciente_unidade a 
	where 	a.cd_setor_atendimento		= cd_setor_atendimento_p 
	and	a.nr_atendimento 		= nr_atendimento_p 
	and	trunc(a.dt_entrada_unidade) 	= trunc(dt_ent_unidade_w);
 
	select	max(cd_local_estoque) 
	into STRICT	cd_local_estoque_w 
	from	setor_atendimento 
	where	cd_setor_atendimento	= cd_setor_atendimento_p;
 
	OPEN C01;
	LOOP 
	FETCH 	C01 into 
		nr_seq_proc_interno_w, 
		cd_convenio_regra_w, 
		cd_categoria_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	 
		if (cd_convenio_regra_w <> cd_convenio_w) then 
			cd_categoria_w	:= null;
		end if;
	 
		SELECT * FROM obter_proc_tab_interno_conv( 
					nr_seq_proc_interno_w, cd_estabelecimento_p, coalesce(cd_convenio_regra_w,cd_convenio_w), coalesce(cd_categoria_regra_w,cd_categoria_w), null, null, cd_procedimento_w, ie_origem_proced_w, null, clock_timestamp(), null, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
	 
		select 	nextval('procedimento_paciente_seq') 
		into STRICT 	nr_seq_proc_pac_w 
		;
 
		insert into procedimento_paciente( 	nr_sequencia, 
			    nr_atendimento, 
			    dt_entrada_unidade, 
			    cd_procedimento, 
			    dt_procedimento, 
			    qt_procedimento, 
			    dt_atualizacao, 
			    nm_usuario, 
			    cd_setor_atendimento, 
			    ie_origem_proced, 
			    nr_seq_atepacu, 
			    nr_seq_proc_interno, 
				cd_convenio, 
				cd_categoria, 
				cd_pessoa_fisica) 
		values (	nr_seq_proc_pac_w, 
				nr_atendimento_p, 
				dt_ent_unidade_w, 
				cd_procedimento_w, 
				clock_timestamp(), 
				qt_procedimento_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				cd_setor_atendimento_p, 
				ie_origem_proced_w, 
				nr_seq_atepacu_w, 
				nr_seq_proc_interno_w, 
				coalesce(cd_convenio_regra_w,cd_convenio_w), 
				coalesce(cd_categoria_regra_w,cd_categoria_w), 
				cd_pessoa_fisica_w);
 
		ds_erro_w := consiste_exec_procedimento(nr_seq_proc_pac_w, ds_erro_w);
		CALL atualiza_preco_procedimento(nr_seq_proc_pac_w, coalesce(cd_convenio_regra_w,cd_convenio_w), nm_usuario_p);
		CALL gerar_lancamento_automatico(nr_atendimento_p,cd_local_estoque_w,34,nm_usuario_p,nr_seq_proc_pac_w,null,null,null,null,null);
	END LOOP;
	CLOSE C01;
 
	COMMIT;
 
	end;
end if;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gv_inserir_proced_conta (nr_atendimento_p bigint, qt_procedimento_p text, nm_usuario_p text, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint ) FROM PUBLIC;

