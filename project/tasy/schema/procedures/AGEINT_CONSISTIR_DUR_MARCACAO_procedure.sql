-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_consistir_dur_marcacao (hr_marcacao_p timestamp, cd_agenda_p bigint, cd_medico_p text, nm_usuario_p text, nr_min_duracao_p bigint, nr_seq_ageint_item_p bigint, ds_consistencia_p INOUT text) AS $body$
DECLARE

					
nr_minuto_duracao_w		bigint;					
qt_marcado_w			bigint;
qt_bloqueado_w			bigint;
ie_nao_consiste_fim_turno_w	varchar(1);
ie_perm_agendar_bloq_w		varchar(1);
cd_tipo_agenda_w    agenda.cd_tipo_Agenda%type;
ie_sobreposicao_encaixe_w	varchar(1) := 'S';
ie_sobreposicao_w			varchar(1);
qt_minuto_tot_adic_w	    bigint := 0;
nr_duracao_item_w		    bigint;
vl_ie_calc_min_dur_w        varchar(1);
ie_sobreposicao_param_w		varchar(1);
qt_minuto_w                 bigint;
qt_duracao_classif_w		bigint;
ie_utiliza_dur_classif_w	parametro_agenda_integrada.ie_utiliza_dur_classif%type;
qt_minuto_aux_princ_w	    bigint;
ie_hor_por_profissional_w   parametro_agenda_integrada.ie_hor_por_profissional%type;
nr_seq_agenda_w             agenda_consulta.nr_sequencia%type;
cd_pessoa_fisica_w          varchar(10);
cd_convenio_w			    integer;
cd_categoria_w			    varchar(10);
cd_plano_w				    varchar(10);
ie_lado_w                   varchar(1);
ie_lado_adic_w              varchar(1);
nr_seq_proc_interno_w       bigint;
qt_minuto_aux_adic_w        bigint;
nr_seq_exame_adic_w         bigint;
ie_cons_dur_exames_adic_w   varchar(1);
cd_estabelecimento_w        bigint;
ie_classif_agenda_w         varchar(5);
nr_seq_ageint_w             bigint;

/*INICIO - Tratamento para atualizacao correta das duracoes dos exames, com base nas regras de "Tempo Proced", para os exames normais e adicionais dos itens*/

C02 CURSOR FOR
	SELECT nr_seq_proc_interno,
		   ie_lado
	from   ageint_exame_adic_item
	where  nr_seq_item = nr_seq_ageint_item_p;
/*FIM - Tratamento para atualizacao correta das duracoes dos exames, com base nas regras de "Tempo Proced", para os exames normais e adicionais dos itens*/

BEGIN

select	coalesce(max(ie_sobreposicao_encaixe),'S')
into STRICT	ie_sobreposicao_encaixe_w
from	parametro_agenda
where	cd_estabelecimento = obter_estabelecimento_ativo;

select	coalesce(max(a.ie_nao_consiste_fim_turno),'N')
into STRICT	ie_nao_consiste_fim_turno_w
from	proc_interno a,
	agenda_integrada_item b
where	a.nr_sequencia = b.nr_seq_proc_interno
and	b.nr_sequencia = nr_seq_ageint_item_p;

select	count(*)
into STRICT	qt_marcado_w
from	ageint_marcacao_usuario a
where	a.cd_agenda	= cd_agenda_p
and		a.nr_seq_ageint_item	<> nr_seq_ageint_item_p
and		a.hr_agenda between hr_marcacao_p and hr_marcacao_p + (nr_min_duracao_p-1)/1440
and		((ie_sobreposicao_encaixe_w = 'N' and ie_encaixe <> 'S' ) or ie_sobreposicao_encaixe_w = 'S')
and (not exists ( SELECT 1 from agenda_paciente b where a.nr_seq_agenda = b.nr_sequencia and b.ie_Status_agenda = 'C' and a.cd_agenda = b.cd_agenda)
and		not exists ( select 1 from agenda_consulta b where a.nr_seq_agenda = b.nr_sequencia and b.ie_Status_agenda = 'C' and a.cd_agenda = b.cd_agenda));

select	count(*)
into STRICT	qt_bloqueado_w
from	ageint_horarios_usuario
where	cd_agenda		= cd_agenda_p
and	nm_usuario		= nm_usuario_p
and	ie_status_agenda	= 'B'
and	((cd_pessoa_fisica	= cd_medico_p) or (coalesce(cd_medico_p::text, '') = ''))
and	hr_agenda between hr_marcacao_p and hr_marcacao_p + (nr_min_duracao_p-1)/1440;

select  sum(nr_minuto_duracao)
into STRICT	nr_minuto_duracao_w
from	ageint_horarios_usuario a
where	cd_agenda		= cd_agenda_p
and	nm_usuario		= nm_usuario_p
and (cd_pessoa_fisica	= cd_medico_p or coalesce(cd_medico_p::text, '') = '')
and	hr_agenda between hr_marcacao_p and hr_marcacao_p + (nr_min_duracao_p-1)/1440
and (ie_status_agenda = 'L'
or exists (SELECT 1
	from	agenda_integrada_item b,
		agenda_consulta c
	where	b.nr_seq_agenda_cons = c.nr_sequencia
	and	a.nr_seq_agenda = c.nr_sequencia
	and	c.cd_agenda = cd_agenda_p
	and	b.nr_sequencia = nr_seq_ageint_item_p));

--Consistir permissao para agendamentos bloqueados
select	Ageint_Obter_Regra_Perm_Bloq(cd_medico_p, wheb_usuario_pck.get_cd_perfil, wheb_usuario_pck.get_cd_estabelecimento)
into STRICT	ie_perm_agendar_bloq_w
;

select  coalesce(max(cd_tipo_agenda), 0), --criado este tratamento, pois nao deve consistir quantidade para agenda de servicos, pois podemos ter mais de 1 agendamento para o mesmo horario.
		max(cd_estabelecimento)
into STRICT    cd_tipo_agenda_w,
		cd_estabelecimento_w
from    agenda
where   cd_agenda = cd_agenda_p;


if (ie_nao_consiste_fim_turno_w = 'N') and (nr_minuto_duracao_w <> 0) and (nr_minuto_duracao_w < nr_min_duracao_p) then
	--'Nao e possivel efetuar esta marcacao, pois a duracao existente ultrapassa a duracao prevista!'
	ds_consistencia_p	:= substr(obter_desc_expressao(731920),1,255);
end if;

if (qt_marcado_w	> 0) and (cd_tipo_agenda_w <> 5) then
	--'Nao e possivel efetuar esta marcacao, pois a duracao existente ultrapassa a duracao prevista!'
	ds_consistencia_p	:= substr(obter_desc_expressao(731920),1,255);
end if;

if (qt_bloqueado_w > 0) and (ie_perm_agendar_bloq_w = 'N')then
	--'Nao e possivel efetuar esta marcacao, pois existem horarios bloqueados no periodo!'
	ds_consistencia_p	:= substr(obter_desc_expressao(731918),1,255);
end if;

/* rotina retirada da procedure Atualiza_Dados_Marcacao > OS 2123537 */

select max(a.nr_sequencia),
       max(a.cd_pessoa_fisica),
       max(a.cd_convenio),
       max(a.cd_categoria),
       max(a.cd_plano),
	   max(b.nr_seq_proc_interno),
       max(b.nr_minuto_duracao),
	   max(b.ie_lado),
	   max(b.ie_classif_agenda)
into STRICT   nr_seq_ageint_w,
       cd_pessoa_fisica_w,
       cd_convenio_w,
       cd_categoria_w,
       cd_plano_w,
       nr_seq_proc_interno_w,
       nr_duracao_item_w,
	   ie_lado_w,
	   ie_classif_agenda_w
from   agenda_integrada a,
       agenda_integrada_item b
where  a.nr_sequencia = b.nr_seq_agenda_int
and    b.nr_sequencia = nr_seq_ageint_item_p;

if (obter_valor_param_usuario(869, 410, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento) = 'S') then
	select ageint_tempo_ag_coletivo(nr_seq_ageint_w, nr_duracao_item_w) 
	into STRICT   nr_duracao_item_w
	;
end if;

--Consistir duracao dos exames adicionais com base nas regras 'Tempo proced', para atualizacao da duracao do agendamento
select coalesce(max(obter_valor_param_usuario(869, 303, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento)), 'N')
into STRICT   ie_cons_dur_exames_adic_w
;

select coalesce(max(obter_valor_param_usuario(820, 33, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento)), 'N')
into STRICT   vl_ie_calc_min_dur_w
;

select coalesce(max(ie_utiliza_dur_classif),'N'),
       coalesce(max(ie_hor_por_profissional), 'N')
into STRICT   ie_utiliza_dur_classif_w,
       ie_hor_por_profissional_w
from   parametro_agenda_integrada
where  cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

select coalesce(max(ie_consiste_duracao), 'I')
into STRICT   ie_sobreposicao_param_w
from   parametro_agenda
where  cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

if (cd_tipo_agenda_w = 2) then
	--exame
	select coalesce(max(nr_sequencia), 0)
	into STRICT   nr_seq_agenda_w
	from   agenda_paciente
	where  cd_agenda = cd_agenda_p
	and    hr_inicio = hr_marcacao_p;
elsif (cd_tipo_agenda_w = 3) then
	--consulta
	select coalesce(max(nr_sequencia), 0)
	into STRICT   nr_seq_agenda_w
	from   agenda_consulta
	where  cd_agenda = cd_agenda_p
	and    dt_agenda = hr_marcacao_p;
elsif (cd_tipo_agenda_w = 5) and (ie_hor_por_profissional_w = 'S') then
	--servicos
	select coalesce(max(nr_sequencia), 0)
	into STRICT   nr_seq_agenda_w
	from   agenda_consulta
	where  cd_agenda = cd_agenda_p
	and    ie_status_agenda in ('L','B')
	and    dt_agenda = hr_marcacao_p
	and    coalesce(cd_medico, '0') = coalesce(cd_medico_p, '0');
else
	--agenda_consulta
	select coalesce(max(nr_sequencia), 0)
	into STRICT   nr_seq_agenda_w
	from   agenda_consulta
	where cd_agenda = cd_agenda_p
	and   ie_status_agenda in ('L','B')
	and   dt_agenda = hr_marcacao_p;
end if;

if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and (coalesce(nr_duracao_item_w::text, '') = '') then
	qt_minuto_w := Obter_Tempo_Padrao_Ageint(nr_seq_proc_interno_w, null, null, cd_medico_p, cd_agenda_p, cd_pessoa_fisica_w, qt_minuto_w, ie_lado_w, cd_convenio_w, cd_Categoria_w, cd_plano_w, nr_seq_agenda_w, null);
end if;

if (coalesce(ie_classif_agenda_w,'XPTO') <> 'XPTO') then
	select ageint_obter_dur_classif(ie_classif_agenda_w, coalesce(cd_estabelecimento_w, wheb_usuario_pck.get_cd_estabelecimento), cd_medico_p, hr_marcacao_p)
	into STRICT   qt_duracao_classif_w
	;
end if;

/*INICIO - Tratamento para atualizacao correta das duracao dos exames, com base nas regras de "Tempo Proced", para os exames normais e adicionais dos itens*/

if (ie_cons_dur_exames_adic_w = 'S') then
	--Exame adicional
	open C02;
	loop
	fetch C02 into
		nr_seq_exame_adic_w,
		ie_lado_adic_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
		if (nr_seq_exame_adic_w IS NOT NULL AND nr_seq_exame_adic_w::text <> '') then
			qt_minuto_aux_adic_w := Obter_Tempo_Padrao_Ageint(nr_seq_exame_adic_w, null, null, cd_medico_p, cd_agenda_p, cd_pessoa_fisica_w, qt_minuto_aux_adic_w, ie_lado_adic_w, cd_convenio_w, cd_categoria_w, cd_plano_w, nr_seq_agenda_w, null);

			if (qt_minuto_aux_adic_w IS NOT NULL AND qt_minuto_aux_adic_w::text <> '') then
				qt_minuto_tot_adic_w := qt_minuto_aux_adic_w + qt_minuto_tot_adic_w;
			end if;
		end if;
	end;
	end loop;
	close C02;

	--Exame normal
	qt_minuto_aux_princ_w := Obter_Tempo_Padrao_Ageint(nr_seq_proc_interno_w, null, null, cd_medico_p, cd_agenda_p, cd_pessoa_fisica_w, qt_minuto_aux_princ_w, ie_lado_w, cd_convenio_w, cd_categoria_w, cd_plano_w, nr_seq_agenda_w, null);

	if (qt_minuto_aux_princ_w IS NOT NULL AND qt_minuto_aux_princ_w::text <> '') then
		qt_minuto_tot_adic_w := qt_minuto_tot_adic_w + qt_minuto_aux_princ_w;
	end if;
end if;

if (qt_duracao_classif_w > 0 AND cd_tipo_agenda_w = 3 AND ie_utiliza_dur_classif_w = 'S') then
	qt_minuto_tot_adic_w := qt_minuto_tot_adic_w + qt_duracao_classif_w;
end if;

if (coalesce(qt_minuto_tot_adic_w, 0) = 0) or (coalesce(qt_minuto_tot_adic_w::text, '') = '') then
	if (coalesce(qt_minuto_w, 0) > 0) then
		qt_minuto_tot_adic_w  := qt_minuto_w;
	elsif (coalesce(nr_min_duracao_p, 0) > 0) then
		qt_minuto_tot_adic_w  := nr_min_duracao_p;
	elsif (coalesce(nr_duracao_item_w, 0) > 0)then
		qt_minuto_tot_adic_w  := nr_duracao_item_w;
	end if;
end if;
/*FIM - Tratamento para atualizacao correta das duracao dos exames, com base nas regras de "Tempo Proced", para os exames normais e adicionais dos itens*/



/*INICIO - Consistir sobreposicao de horarios na agenda de exames*/

if (ie_sobreposicao_param_w = 'I') and
   ((vl_ie_calc_min_dur_w = 'S') or (obter_funcao_ativa = 869)) then
	if (coalesce(qt_minuto_tot_adic_w, coalesce(nr_duracao_item_w, nr_min_duracao_p)) > 0) then
		ie_sobreposicao_w := obter_se_sobreposicao_horario(
								cd_agenda_p,
								hr_marcacao_p,
								coalesce(qt_minuto_tot_adic_w, coalesce(nr_duracao_item_w, nr_min_duracao_p))
							 );

		if (ie_sobreposicao_w = 'S') then
			/*
			Atencao: o tempo de duracao definido sobrepoe ao horario de inicio do proximo agendamento.
			Nao e permitida a ocorrencia de sobreposicoes, favor verificar.
			*/
			ds_consistencia_p := wheb_mensagem_pck.get_texto(61121);
		end if;
	end if;
end if;
/* rotina retirada da procedure Atualiza_Dados_Marcacao > OS 2123537 */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_consistir_dur_marcacao (hr_marcacao_p timestamp, cd_agenda_p bigint, cd_medico_p text, nm_usuario_p text, nr_min_duracao_p bigint, nr_seq_ageint_item_p bigint, ds_consistencia_p INOUT text) FROM PUBLIC;

