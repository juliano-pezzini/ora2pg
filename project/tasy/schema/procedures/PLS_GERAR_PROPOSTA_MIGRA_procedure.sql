-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_proposta_migra ( nr_seq_solicitacao_p pls_migracao_beneficiario.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_contrato_atual_w		pls_migracao_beneficiario.nr_seq_contrato_atual%type;
nr_seq_contrato_mig_w		pls_migracao_beneficiario.nr_seq_contrato_mig%type;
nr_seq_pagador_w		pls_migracao_beneficiario.nr_seq_pagador%type;
nr_seq_titular_w		pls_migracao_beneficiario.nr_seq_titular%type;
nr_seq_tabela_preco_w		pls_migracao_beneficiario.nr_seq_tabela_preco%type;
nr_seq_canal_venda_w		pls_migracao_beneficiario.nr_seq_canal_venda%type;
nr_seq_vendedor_w		pls_migracao_beneficiario.nr_seq_vendedor%type;
nr_seq_motivo_cancelamento_w	pls_migracao_beneficiario.nr_seq_motivo_cancelamento%type;
nr_seq_causa_rescisao_w		pls_migracao_beneficiario.nr_seq_causa_rescisao%type;
dt_migracao_w			pls_migracao_beneficiario.dt_migracao%type;
dt_limite_utilizacao_w		pls_migracao_beneficiario.dt_limite_utilizacao%type;
nr_seq_motivo_alteracao_w	pls_migracao_beneficiario.nr_seq_motivo_alteracao%type;
nr_seq_plano_w			pls_migracao_beneficiario.nr_seq_plano%type;
nr_seq_segurado_w		pls_migracao_beneficiario.nr_seq_segurado%type;
dt_solicitacao_w		pls_migracao_beneficiario.dt_solicitacao%type;
ie_status_w			pls_migracao_beneficiario.ie_status%type;
nr_seq_proposta_w		pls_proposta_adesao.nr_sequencia%type;
ie_tipo_contratacao_w		pls_plano.ie_tipo_contratacao%type;
ie_regulamentacao_w		pls_plano.ie_regulamentacao%type;
ie_tipo_beneficiario_w		pls_contrato.ie_tipo_beneficiario%type;
cd_cgc_estipulante_w		pls_contrato.cd_cgc_estipulante%type;
cd_pf_estipulante_w		pls_contrato.cd_pf_estipulante%type;
dt_dia_vencimento_w		pls_contrato_pagador_fin.dt_dia_vencimento%type;
cd_condicao_pagamento_w		pls_contrato_pagador_fin.cd_condicao_pagamento%type;
cd_tipo_portador_w		pls_contrato_pagador_fin.cd_tipo_portador%type;
cd_portador_w			pls_contrato_pagador_fin.cd_portador%type;
nr_seq_conta_banco_w		pls_contrato_pagador_fin.nr_seq_conta_banco%type;
ie_mes_vencimento_w		pls_contrato_pagador_fin.ie_mes_vencimento%type;
nr_seq_forma_cobranca_w		pls_contrato_pagador_fin.nr_seq_forma_cobranca%type;
ie_endereco_boleto_w		pls_contrato_pagador.ie_endereco_boleto%type;
cd_pessoa_fisica_w		pls_contrato_pagador.cd_pessoa_fisica%type;
cd_cgc_w			pls_contrato_pagador.cd_cgc%type;
nr_seq_proposta_benef_w		pls_proposta_beneficiario.nr_sequencia%type;
nr_seq_proposta_pagador_w	pls_proposta_pagador.nr_sequencia%type;
nr_contrato_atual_w		pls_contrato.nr_contrato%type;
nr_contrato_mig_w		pls_contrato.nr_contrato%type;
nr_seq_motivo_inclusao_w	pls_parametros.nr_seq_motivo_inclusao%type;

C01 CURSOR FOR
	SELECT	nr_seq_contrato_atual,
		nr_seq_contrato_mig,
		nr_seq_pagador,
		nr_seq_titular,
		nr_seq_tabela_preco,
		nr_seq_canal_venda,
		nr_seq_vendedor,
		nr_seq_motivo_cancelamento,
		nr_seq_causa_rescisao,
		dt_migracao,
		dt_limite_utilizacao,
		nr_seq_motivo_alteracao,
		nr_seq_plano,
		nr_seq_segurado,
		dt_solicitacao,
		ie_status
	from	pls_migracao_beneficiario
	where	nr_sequencia = nr_seq_solicitacao_p
	and	ie_status = 1;

C02 CURSOR FOR
	SELECT	nr_sequencia nr_seq_dependente,
		cd_pessoa_fisica,
		nr_seq_parentesco,
		ie_tipo_parentesco
	from	pls_segurado
	where	nr_seq_titular	= nr_seq_segurado_w
	and	nr_seq_contrato	= nr_seq_contrato_atual_w
	and	((coalesce(dt_rescisao::text, '') = '') or (dt_rescisao > clock_timestamp()))
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	coalesce(dt_cancelamento::text, '') = '';

BEGIN

open C01;
loop
fetch C01 into
	nr_seq_contrato_atual_w,
	nr_seq_contrato_mig_w,
	nr_seq_pagador_w,
	nr_seq_titular_w,
	nr_seq_tabela_preco_w,
	nr_seq_canal_venda_w,
	nr_seq_vendedor_w,
	nr_seq_motivo_cancelamento_w,
	nr_seq_causa_rescisao_w,
	dt_migracao_w,
	dt_limite_utilizacao_w,
	nr_seq_motivo_alteracao_w,
	nr_seq_plano_w,
	nr_seq_segurado_w,
	dt_solicitacao_w,
	ie_status_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	nr_contrato
	into STRICT	nr_contrato_atual_w
	from	pls_contrato
	where	nr_sequencia	= nr_seq_contrato_atual_w;

	select	ie_tipo_beneficiario,
		cd_cgc_estipulante,
		cd_pf_estipulante,
		nr_contrato
	into STRICT	ie_tipo_beneficiario_w,
		cd_cgc_estipulante_w,
		cd_pf_estipulante_w,
		nr_contrato_mig_w
	from	pls_contrato
	where	nr_sequencia	= nr_seq_contrato_mig_w;

	select	max(ie_tipo_contratacao),
		max(ie_regulamentacao)
	into STRICT	ie_tipo_contratacao_w,
		ie_regulamentacao_w
	from	pls_plano
	where	nr_sequencia	= nr_seq_plano_w;

	--Caso não existir vendedor informado, buscar da regra de lançamento automatico do contrato
	if (coalesce(nr_seq_canal_venda_w::text, '') = '') then
		if (coalesce(pls_obter_dados_contrato(nr_seq_contrato_mig_w, 'AR'),'T') in ('A','T')) then
			nr_seq_canal_venda_w	:= pls_obter_regra_lancamento(nr_seq_contrato_mig_w, dt_migracao_w, 'CV');
			nr_seq_vendedor_w	:= pls_obter_regra_lancamento(nr_seq_contrato_mig_w, dt_migracao_w, 'V');
		end if;
	end if;

	insert	into	pls_proposta_adesao(nr_sequencia, ie_tipo_contratacao, cd_estabelecimento,
		ie_tipo_beneficiario, dt_atualizacao, nm_usuario,
		dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_contrato,
		nr_seq_contrato_mig, cd_cgc_estipulante, cd_estipulante,
		dt_inicio_proposta, ie_tipo_processo, ie_status,
		nr_seq_vendedor_canal, nr_seq_vendedor_pf, vl_proposta,
		ie_tipo_proposta)
	values (	nextval('pls_proposta_adesao_seq'), ie_tipo_contratacao_w, cd_estabelecimento_p,
		ie_tipo_beneficiario_w, clock_timestamp(), nm_usuario_p,
		clock_timestamp(), nm_usuario_p, nr_contrato_mig_w,
		nr_contrato_atual_w, cd_cgc_estipulante_w, cd_pf_estipulante_w,
		dt_migracao_w, 'W', 'U', nr_seq_canal_venda_w,
		nr_seq_vendedor_w, 0, 4)
		returning nr_sequencia into nr_seq_proposta_w;

	begin
	select	b.dt_dia_vencimento,
		b.cd_condicao_pagamento,
		a.cd_pessoa_fisica,
		a.cd_cgc,
		b.cd_tipo_portador,
		b.cd_portador,
		b.nr_seq_conta_banco,
		b.ie_mes_vencimento,
		b.nr_seq_forma_cobranca,
		a.ie_endereco_boleto
	into STRICT	dt_dia_vencimento_w,
		cd_condicao_pagamento_w,
		cd_pessoa_fisica_w,
		cd_cgc_w,
		cd_tipo_portador_w,
		cd_portador_w,
		nr_seq_conta_banco_w,
		ie_mes_vencimento_w,
		nr_seq_forma_cobranca_w,
		ie_endereco_boleto_w
	from	pls_contrato_pagador_fin	b,
		pls_contrato_pagador		a
	where	a.nr_sequencia		= nr_seq_pagador_w
	and	b.nr_seq_pagador	= a.nr_sequencia
	and	dt_migracao_w between coalesce(dt_inicio_vigencia, dt_migracao_w) and coalesce(dt_fim_vigencia, dt_migracao_w);
	exception
	when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1082936); --Existe um problema com o cadastro das informações financeiras do pagador
	end;
	
	insert	into	pls_proposta_pagador(	nr_sequencia, nr_seq_proposta, dt_dia_vencimento,
			cd_condicao_pagamento, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, cd_pagador, cd_cgc_pagador,
			nr_seq_forma_cobranca, cd_tipo_portador, cd_portador,
			nr_seq_conta_banco, dt_inicio_vigencia, ie_mes_vencimento,
			ie_endereco_boleto)
		values (	nextval('pls_proposta_pagador_seq'), nr_seq_proposta_w, coalesce(dt_dia_vencimento_w,10),
			cd_condicao_pagamento_w, clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, cd_pessoa_fisica_w, cd_cgc_w,
			nr_seq_forma_cobranca_w, cd_tipo_portador_w, cd_portador_w,
			nr_seq_conta_banco_w, dt_migracao_w, coalesce(ie_mes_vencimento_w,'A'),
			ie_endereco_boleto_w)
			returning nr_sequencia into nr_seq_proposta_pagador_w;

	insert	into	pls_proposta_plano(	nr_sequencia, nr_seq_proposta, nr_seq_plano,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec, nr_seq_tabela, nr_seq_contrato_plano,
			ie_principal, nr_seq_contrato)
		values (	nextval('pls_proposta_plano_seq'), nr_seq_proposta_w, nr_seq_plano_w,
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, nr_seq_tabela_preco_w, nr_seq_plano_w,
			'S', nr_seq_contrato_mig_w);

	select	cd_pessoa_fisica
	into STRICT	cd_pessoa_fisica_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w
	and	nr_seq_contrato	= nr_seq_contrato_atual_w;
	
	select	coalesce(max(nr_seq_motivo_migracao), max(nr_seq_motivo_inclusao))
	into STRICT	nr_seq_motivo_inclusao_w
	from	pls_parametros
	where	cd_estabelecimento	= cd_estabelecimento_p;

	insert	into	pls_proposta_beneficiario(	nr_sequencia, nr_seq_proposta, cd_beneficiario,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec, nr_seq_pagador, nr_seq_plano,
			nr_seq_titular, nr_seq_tabela,  dt_contratacao,
			ie_taxa_inscricao, nr_seq_solic_migracao, nr_seq_beneficiario,
			nr_seq_motivo_inclusao)
	values (		nextval('pls_proposta_beneficiario_seq'), nr_seq_proposta_w, cd_pessoa_fisica_w,
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, nr_seq_proposta_pagador_w, nr_seq_plano_w,
			nr_seq_titular_w, nr_seq_tabela_preco_w,  dt_migracao_w,
			'N', nr_seq_solicitacao_p, nr_seq_segurado_w,
			nr_seq_motivo_inclusao_w)
		returning nr_sequencia into nr_seq_proposta_benef_w;

	insert	into	pls_proposta_benef_anexo(	nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, dt_anexo,
			ds_anexo, nr_seq_tipo_documento, nr_seq_beneficiario)
		(SELECT	nextval('pls_proposta_benef_anexo_seq'), clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			a.ds_anexo, a.nr_seq_tipo_documento, nr_seq_proposta_benef_w
		from	pls_migracao_benef_anexo a
		where	a.nr_seq_migracao = nr_seq_solicitacao_p);

	nr_seq_titular_w := nr_seq_proposta_benef_w;
	-- Migrar dependentes do titular do contrato anterior
	for r_c02_w in C02 loop
		begin
		insert	into	pls_proposta_beneficiario(	nr_sequencia, nr_seq_proposta, cd_beneficiario,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_seq_pagador, nr_seq_plano,
				nr_seq_titular, nr_seq_tabela,  dt_contratacao,
				ie_taxa_inscricao, nr_seq_solic_migracao, nr_seq_beneficiario,
				nr_seq_parentesco, ie_tipo_parentesco, nr_seq_motivo_inclusao)
		values (		nextval('pls_proposta_beneficiario_seq'), nr_seq_proposta_w, r_c02_w.cd_pessoa_fisica,
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, nr_seq_proposta_pagador_w, nr_seq_plano_w,
				nr_seq_titular_w, nr_seq_tabela_preco_w,  dt_migracao_w,
				'N', nr_seq_solicitacao_p, r_c02_w.nr_seq_dependente,
				r_c02_w.nr_seq_parentesco, r_c02_w.ie_tipo_parentesco, nr_seq_motivo_inclusao_w);
		end;
	end loop; --C02
	
	update	pls_migracao_beneficiario
	set	ie_status	= 2,
		nr_seq_proposta	= nr_seq_proposta_w
	where	nr_sequencia	= nr_seq_solicitacao_p;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_proposta_migra ( nr_seq_solicitacao_p pls_migracao_beneficiario.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

