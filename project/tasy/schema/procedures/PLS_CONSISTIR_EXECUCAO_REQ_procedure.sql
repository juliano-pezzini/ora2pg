-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_execucao_req ( nr_seq_exec_lote_p bigint, nr_seq_segurado_p bigint, nr_seq_prestador_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Consistir execucao da requisicao.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ x]    Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_exec_req_item_w		bigint;
ie_tipo_guia_w			varchar(2);
cd_procedimento_w		bigint;
ie_origem_proced_w		integer;
nr_seq_material_w		bigint;
qt_item_w			pls_execucao_req_item.qt_item%type;
cd_medico_requisitante_w	varchar(20);
nr_seq_req_proc_w		bigint;
nr_seq_req_mat_w		bigint;
ie_tipo_processo_w		varchar(2);
nr_seq_requisicao_w		bigint;
nr_seq_execucao_w		bigint;
qt_reg_w			bigint;
qt_exec_item_negada_w		bigint;
nr_seq_regra_w			bigint;
ie_permite_w			varchar(3);
ie_item_inativo_w		varchar(1);
dt_execucao_w			timestamp;
nr_seq_prestador_w		bigint;
ie_tipo_pagador_w		varchar(2);
qt_dias_vencido_w		bigint;
nr_seq_pagador_w		bigint;
ie_cheque_w			varchar(1);
ie_beneficiario_inativo_w	varchar(1) := 'N';
dt_rescisao_w			timestamp;
dt_limite_utilizacao_w		timestamp;
nr_seq_exec_req_item_proc_w	bigint;
nr_seq_exec_req_item_mat_w	bigint;

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_execucao_req_item a
	where	a.nr_seq_segurado	= nr_seq_segurado_p
	and	exists (SELECT 	1
			from 	w_pls_itens_benef_exec w
			where	w.nr_seq_segurado 	= nr_seq_segurado_p
			and	w.nr_seq_prestador	= nr_seq_prestador_p
			and	w.nr_seq_item_exec 	= a.nr_sequencia
			and	w.ie_tipo_consulta 	= 'LE')
	order by a.nr_seq_execucao;


C02 CURSOR FOR
	SELECT	distinct a.nr_seq_execucao
	from	pls_execucao_req_item a
	where	a.nr_seq_segurado	= nr_seq_segurado_p
	and	exists (SELECT 	1
			from 	w_pls_itens_benef_exec w
			where	w.nr_seq_segurado 	= nr_seq_segurado_p
			and	w.nr_seq_prestador	= nr_seq_prestador_p
			and	w.nr_seq_item_exec 	= a.nr_sequencia
			and	w.ie_tipo_consulta 	= 'LE')
	group by a.nr_seq_requisicao,
		 a.nr_seq_execucao;

C03 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_execucao_req_item a,
		pls_execucao_requisicao b
	where	b.nr_sequencia 	   = a.nr_seq_execucao
	and	b.nr_seq_lote_exec = nr_seq_exec_lote_p
	and	a.ie_situacao	<> 'C'
	order by a.nr_seq_execucao;


C04 CURSOR FOR
	SELECT	distinct a.nr_seq_execucao
	from	pls_execucao_req_item a,
		pls_execucao_requisicao b
	where	b.nr_sequencia 	   = a.nr_seq_execucao
	and	b.nr_seq_lote_exec = nr_seq_exec_lote_p
	and	a.ie_situacao	<> 'C'
	group by a.nr_seq_requisicao,
		 a.nr_seq_execucao;


BEGIN

/*Obter dados do segurado */

begin
select	nr_seq_pagador,
	dt_rescisao,
	dt_limite_utilizacao
into STRICT	nr_seq_pagador_w,
	dt_rescisao_w,
	dt_limite_utilizacao_w
from	pls_segurado
where	nr_sequencia = nr_seq_segurado_p;
exception
when others then
	nr_seq_pagador_w	:= 0;
	dt_rescisao_w		:= null;
	dt_limite_utilizacao_w	:= null;
end;

/*Obter dados do pagador */

begin
select	CASE WHEN cd_cgc='' THEN 'PF'  ELSE 'PJ' END
into STRICT	ie_tipo_pagador_w
from	pls_contrato_pagador
where	nr_sequencia = nr_seq_pagador_w;
exception
	when others then
	ie_tipo_pagador_w	:= 'A';
end;


qt_dias_vencido_w	:= pls_obter_dias_inadimplencia(nr_seq_segurado_p);
ie_cheque_w		:= pls_obter_se_cheque_devolucao(nr_seq_segurado_p);

if (dt_limite_utilizacao_w IS NOT NULL AND dt_limite_utilizacao_w::text <> '') then
	dt_limite_utilizacao_w := fim_dia(dt_limite_utilizacao_w);
	
	if (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') and (clock_timestamp() > dt_limite_utilizacao_w) then
		ie_beneficiario_inativo_w := 'S';
	end if;
end if;	


if (nr_seq_exec_lote_p IS NOT NULL AND nr_seq_exec_lote_p::text <> '') then

	open C03;
	loop
	fetch C03 into
		nr_seq_exec_req_item_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		update	pls_execucao_req_item
		set	ie_situacao	= 'S',
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_exec_req_item_w
		and	ie_situacao	<> 'C';

		select	ie_tipo_guia,
			cd_procedimento,
			ie_origem_proced,
			nr_seq_material,
			qt_item,
			cd_medico_requisitante,
			nr_seq_req_proc,
			nr_seq_req_mat,
			ie_tipo_processo,
			nr_seq_requisicao,
			nr_seq_execucao
		into STRICT	ie_tipo_guia_w, 
			cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_material_w,
			qt_item_w,
			cd_medico_requisitante_w,
			nr_seq_req_proc_w,
			nr_seq_req_mat_w,
			ie_tipo_processo_w,
			nr_seq_requisicao_w,
			nr_seq_execucao_w
		from	pls_execucao_req_item
		where	nr_sequencia = nr_seq_exec_req_item_w;

		select	clock_timestamp(),
			nr_seq_prestador
		into STRICT	dt_execucao_w,
			nr_seq_prestador_w
		from	pls_execucao_requisicao
		where	nr_sequencia = nr_seq_execucao_w;

		/*if	(nr_seq_req_proc_w	is not null) then
			select	nvl(ie_cobranca_previa_servico,'N')
			into	ie_cobran_prev_serv_w
			from	pls_requisicao_proc
			where	nr_sequencia	= nr_seq_req_proc_w;
		elsif	(nr_seq_req_mat_w	is not null) then
			select	nvl(ie_cobranca_previa_servico,'N')
			into	ie_cobran_prev_serv_w
			from	pls_requisicao_mat
			where	nr_sequencia	= nr_seq_req_mat_w;
		end if;*/
		if (coalesce(cd_procedimento_w,0) > 0) then
			nr_seq_exec_req_item_proc_w := nr_seq_exec_req_item_w;

			SELECT * FROM pls_consiste_rede_atend(null, null, nr_seq_execucao_w, null, null, null, nr_seq_exec_req_item_w, null, nm_usuario_p, cd_estabelecimento_p, nr_seq_regra_w, ie_permite_w) INTO STRICT nr_seq_regra_w, ie_permite_w;
			ie_item_inativo_w :=	pls_obter_se_proc_inativo(cd_procedimento_w,ie_origem_proced_w,dt_execucao_w);

			if (ie_item_inativo_w = 'N') then
				CALL pls_gravar_execucao_req_glosa('9920',nr_seq_execucao_w,nr_seq_exec_req_item_w,
							null,'Procedimento inativo ou fora de vigencia. (Funcao: Procedimentos)', nm_usuario_p,
							nr_seq_prestador_w,cd_estabelecimento_p,null,
							null);
			end if;
		end if;

		if (coalesce(nr_seq_material_w,0) > 0) then
			nr_seq_exec_req_item_mat_w := nr_seq_exec_req_item_w;
			
			SELECT * FROM pls_consiste_rede_atend(null, null, nr_seq_execucao_w, null, null, null, nr_seq_exec_req_item_w, null, nm_usuario_p, cd_estabelecimento_p, nr_seq_regra_w, ie_permite_w) INTO STRICT nr_seq_regra_w, ie_permite_w;
			ie_item_inativo_w := pls_obter_se_mat_inativo(nr_seq_material_w,dt_execucao_w);
			if (ie_item_inativo_w = 'N') then
				CALL pls_gravar_execucao_req_glosa('9920',nr_seq_execucao_w,null,
							nr_seq_exec_req_item_w,'Material inativo ou fora de vigencia. (Funcao: OPS - Cadastro de materiais)', nm_usuario_p,
							nr_seq_prestador_w,cd_estabelecimento_p,null,
							null);
			end if;
		end if;

		if (ie_beneficiario_inativo_w = 'S') then
			CALL pls_gravar_execucao_req_glosa('1014',nr_seq_execucao_w,nr_seq_exec_req_item_proc_w,
							nr_seq_exec_req_item_mat_w,'Data limite de utilizacao:'||dt_limite_utilizacao_w, nm_usuario_p,
							nr_seq_prestador_w,cd_estabelecimento_p,null,
							null);
		end if;

		CALL pls_consistir_prest_plano(	'CG',
					nr_seq_prestador_w,
					null,
					null,
					null,
					nr_seq_execucao_w,
					nr_seq_exec_req_item_proc_w,
					nr_seq_exec_req_item_mat_w,
					cd_estabelecimento_p,
					nm_usuario_p);
		
		CALL pls_gerar_ocorrencia_exec_req(nr_seq_exec_req_item_w, nr_seq_segurado_p, ie_tipo_guia_w,
			cd_procedimento_w, ie_origem_proced_w, nr_seq_material_w, 
			qt_item_w, cd_medico_requisitante_w, nr_seq_req_proc_w,
			nr_seq_req_mat_w, ie_tipo_processo_w, nr_seq_requisicao_w,
			nr_seq_prestador_p, ie_tipo_pagador_w, nr_seq_pagador_w,
			coalesce(qt_dias_vencido_w,0), dt_execucao_w, cd_estabelecimento_p, nm_usuario_p,ie_cheque_w);

		nr_seq_exec_req_item_proc_w 	:= null;
		nr_seq_exec_req_item_mat_w	:= null;
		end;
	end loop;
	close C03;
	
	open C04;
	loop
	fetch C04 into
		nr_seq_execucao_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		CALL pls_gerar_ocor_aut_combinada(	nr_seq_segurado_p, null, null,
					nr_seq_execucao_w, null, null,
					null, null, null,
					nm_usuario_p, cd_estabelecimento_p);
					
		select	count(1)
		into STRICT	qt_reg_w
		from	pls_execucao_req_item
		where	nr_seq_execucao = nr_seq_execucao_w
		and	ie_situacao	= 'A';

		if (qt_reg_w > 0) then
			CALL pls_gerar_auditoria_execucao(nr_seq_execucao_w,nm_usuario_p, 'A');
		else
			select	count(1)
			into STRICT	qt_reg_w
			from	pls_execucao_req_item
			where	nr_seq_execucao = nr_seq_execucao_w;

			select	count(1)
			into STRICT	qt_exec_item_negada_w
			from	pls_execucao_req_item
			where	nr_seq_execucao = nr_seq_execucao_w
			and	ie_situacao = 'N';

			if (qt_reg_w <= qt_exec_item_negada_w) then
				update	pls_execucao_requisicao
				set	ie_situacao	= 4
				where	nr_sequencia	= nr_seq_execucao_w;
			end if;
		end if;
		end;
	end loop;
	close C04;
else
	open C01;
	loop
	fetch C01 into	
		nr_seq_exec_req_item_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		update	pls_execucao_req_item
		set	ie_situacao	= 'S',
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_exec_req_item_w
		and	ie_situacao	<> 'C';

		select	ie_tipo_guia,
			cd_procedimento,
			ie_origem_proced,
			nr_seq_material,
			qt_item,
			cd_medico_requisitante,
			nr_seq_req_proc,
			nr_seq_req_mat,
			ie_tipo_processo,
			nr_seq_requisicao,
			nr_seq_execucao
		into STRICT	ie_tipo_guia_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_material_w,
			qt_item_w,
			cd_medico_requisitante_w,
			nr_seq_req_proc_w,
			nr_seq_req_mat_w,
			ie_tipo_processo_w,
			nr_seq_requisicao_w,
			nr_seq_execucao_w
		from	pls_execucao_req_item
		where	nr_sequencia = nr_seq_exec_req_item_w;

		select	clock_timestamp(),
			nr_seq_prestador
		into STRICT	dt_execucao_w,
			nr_seq_prestador_w
		from	pls_execucao_requisicao
		where	nr_sequencia = nr_seq_execucao_w;

		/*if	(nr_seq_req_proc_w	is not null) then
			select	nvl(ie_cobranca_previa_servico,'N')
			into	ie_cobran_prev_serv_w
			from	pls_requisicao_proc
			where	nr_sequencia	= nr_seq_req_proc_w;
		elsif	(nr_seq_req_mat_w	is not null) then
			select	nvl(ie_cobranca_previa_servico,'N')
			into	ie_cobran_prev_serv_w
			from	pls_requisicao_mat
			where	nr_sequencia	= nr_seq_req_mat_w;
		end if;*/
		if (coalesce(cd_procedimento_w,0) > 0) then
			nr_seq_exec_req_item_proc_w := nr_seq_exec_req_item_w;

			SELECT * FROM pls_consiste_rede_atend(null, null, nr_seq_execucao_w, null, null, null, nr_seq_exec_req_item_w, null, nm_usuario_p, cd_estabelecimento_p, nr_seq_regra_w, ie_permite_w) INTO STRICT nr_seq_regra_w, ie_permite_w;
			ie_item_inativo_w :=	pls_obter_se_proc_inativo(cd_procedimento_w,ie_origem_proced_w,dt_execucao_w);

			if (ie_item_inativo_w = 'N') then
				CALL pls_gravar_execucao_req_glosa('9920',nr_seq_execucao_w,nr_seq_exec_req_item_w,
							null,'Procedimento inativo ou fora de vigencia. (Funcao: Procedimentos)', nm_usuario_p,
							nr_seq_prestador_w,cd_estabelecimento_p,null,
							null);
			end if;
		end if;
		
		if (coalesce(nr_seq_material_w,0) > 0) then
			nr_seq_exec_req_item_mat_w := nr_seq_exec_req_item_w;

			SELECT * FROM pls_consiste_rede_atend(null, null, nr_seq_execucao_w, null, null, null, nr_seq_exec_req_item_w, null, nm_usuario_p, cd_estabelecimento_p, nr_seq_regra_w, ie_permite_w) INTO STRICT nr_seq_regra_w, ie_permite_w;
			ie_item_inativo_w := pls_obter_se_mat_inativo(nr_seq_material_w,dt_execucao_w);
			if (ie_item_inativo_w = 'N') then
				CALL pls_gravar_execucao_req_glosa('9920',nr_seq_execucao_w,null,
							nr_seq_exec_req_item_w,'Material inativo ou fora de vigencia. (Funcao: OPS - Cadastro de materiais)', nm_usuario_p,
							nr_seq_prestador_w,cd_estabelecimento_p,null,
							null);
			end if;
		end if;

		if (ie_beneficiario_inativo_w = 'S') then
			CALL pls_gravar_execucao_req_glosa('1014',nr_seq_execucao_w,nr_seq_exec_req_item_proc_w,
							nr_seq_exec_req_item_mat_w,'Data limite de utilizacao:'||dt_limite_utilizacao_w, nm_usuario_p,
							nr_seq_prestador_w,cd_estabelecimento_p,null,
							null);
		end if;
		
		CALL pls_consistir_prest_plano(	'CG',
					nr_seq_prestador_w,
					null,
					null,
					null,
					nr_seq_execucao_w,
					nr_seq_exec_req_item_proc_w,
					nr_seq_exec_req_item_mat_w,
					cd_estabelecimento_p,
					nm_usuario_p);

		CALL pls_gerar_ocorrencia_exec_req(nr_seq_exec_req_item_w, nr_seq_segurado_p, ie_tipo_guia_w,
			cd_procedimento_w, ie_origem_proced_w, nr_seq_material_w, 
			qt_item_w, cd_medico_requisitante_w, nr_seq_req_proc_w,
			nr_seq_req_mat_w, ie_tipo_processo_w, nr_seq_requisicao_w,
			nr_seq_prestador_p, ie_tipo_pagador_w, nr_seq_pagador_w,
			coalesce(qt_dias_vencido_w,0), dt_execucao_w, cd_estabelecimento_p, nm_usuario_p,ie_cheque_w);

		nr_seq_exec_req_item_proc_w 	:= null;
		nr_seq_exec_req_item_mat_w	:= null;
		end;
	end loop;
	close C01;

	open C02;
	loop
	fetch C02 into
		nr_seq_execucao_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		select	count(1)
		into STRICT	qt_reg_w
		from	pls_execucao_req_item
		where	nr_seq_execucao = nr_seq_execucao_w
		and	ie_situacao	= 'A';

		if (qt_reg_w > 0) then
			CALL pls_gerar_auditoria_execucao(nr_seq_execucao_w,nm_usuario_p, 'A');
		else
			select	count(1)
			into STRICT	qt_reg_w
			from	pls_execucao_req_item
			where	nr_seq_execucao = nr_seq_execucao_w;

			select	count(1)
			into STRICT	qt_exec_item_negada_w
			from	pls_execucao_req_item
			where	nr_seq_execucao = nr_seq_execucao_w
			and	ie_situacao = 'N';

			if (qt_reg_w <= qt_exec_item_negada_w) then
				update	pls_execucao_requisicao
				set	ie_situacao	= 4
				where	nr_sequencia	= nr_seq_execucao_w;
			end if;
		end if;
		end;
	end loop;
	close C02;	
end if;

commit;

CALL pls_consist_lim_ocorr_exec(	nr_seq_segurado_p, nr_seq_execucao_w, ie_tipo_processo_w,
				cd_estabelecimento_p, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_execucao_req ( nr_seq_exec_lote_p bigint, nr_seq_segurado_p bigint, nr_seq_prestador_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

