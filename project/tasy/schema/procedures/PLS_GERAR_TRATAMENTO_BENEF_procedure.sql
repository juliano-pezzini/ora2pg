-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_tratamento_benef ( nr_seq_requisicao_p bigint, ie_origem_p text, nr_seq_exec_lote_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gera tratamento para beneficiario.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_doenca_w			varchar(10);
ie_preco_w			varchar(5);
ie_tipo_segurado_w		varchar(3);
ie_sexo_w			varchar(2);
ie_tipo_guia_w			varchar(2);
ie_unid_tempo_w			varchar(1);
ie_procedimento_regra_w		varchar(1)	:= 'N';
ie_cid_regra_w			varchar(1)	:= 'N';
cd_procedimento_w		bigint;
cd_area_w                       bigint;
cd_especialidade_w              bigint;
cd_grupo_w                      bigint;
nr_seq_segurado_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_prestador_w		bigint;
nr_seq_tipo_prestador_w		bigint;
nr_seq_tratamento_w		bigint;
nr_seq_regra_tratamento_w	bigint;
qt_reg_w			bigint;
qt_proc_regra_w			bigint;
qt_cid_regra_w			bigint;
nr_seq_req_proc_w		bigint;
cd_especialidade_medica_w	integer;
qt_idade_min_w			integer;
qt_idade_max_w			integer;
qt_idade_w			integer;
ie_origem_proced_w		integer;
qt_tempo_tratamento_w		integer;
dt_requisicao_w			timestamp;

C01 CURSOR FOR
	SELECT	b.nr_sequencia,
		a.nr_sequencia,
		a.cd_especialidade_medica,
		a.qt_idade_benef,
		a.qt_idade_max,
		a.qt_tempo_tratamento
	from	pls_tratamento		b,
		pls_tratamento_regra	a
	where	b.nr_sequencia		= a.nr_seq_tratamento
	and	((nr_seq_tipo_prestador	= nr_seq_tipo_prestador_w and (nr_seq_tipo_prestador IS NOT NULL AND nr_seq_tipo_prestador::text <> '')) or (coalesce(nr_seq_tipo_prestador::text, '') = ''))
	and	((ie_tipo_segurado	= ie_tipo_segurado_w and (ie_tipo_segurado IS NOT NULL AND ie_tipo_segurado::text <> '')) or (coalesce(ie_tipo_segurado::text, '') = ''))
	and	((ie_preco		= ie_preco_w and (ie_preco IS NOT NULL AND ie_preco::text <> '')) or (coalesce(ie_preco::text, '') = ''))
	and	((ie_sexo		= ie_sexo_w and (ie_sexo IS NOT NULL AND ie_sexo::text <> '')) or (coalesce(ie_sexo::text, '') = ''))
	and	((ie_tipo_guia		= ie_tipo_guia_w and (ie_tipo_guia IS NOT NULL AND ie_tipo_guia::text <> '')) or (coalesce(ie_tipo_guia::text, '') = ''))
	and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_requisicao_w) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_inicio_vigencia) and
                                                                       fim_dia(coalesce(a.dt_fim_vigencia, dt_requisicao_w))
	order by
		dt_inicio_vigencia,
		coalesce(nr_seq_tipo_prestador, 0),
		ie_tipo_segurado,
		coalesce(ie_preco, 0),
		ie_sexo;	

C02 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced
	from	pls_requisicao_proc
	where	nr_seq_requisicao = nr_seq_requisicao_p
	and	ie_status in ('P', 'S')
	order by
		nr_sequencia;
	
C03 CURSOR FOR
	SELECT	cd_doenca
	from	pls_requisicao_diagnostico
	where	nr_seq_requisicao = nr_seq_requisicao_p
	order by
		1;

C04 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced
	from	pls_requisicao_proc	a
	where	a.nr_seq_requisicao	= nr_seq_requisicao_p
	and	exists (SELECT 1
			from	pls_execucao_requisicao	b,
				pls_execucao_req_item	c
			where	b.nr_sequencia		= c.nr_seq_execucao
			and	c.nr_seq_req_proc	= a.nr_sequencia
			and	b.nr_seq_lote_exec	= nr_seq_exec_lote_p)
	and	a.ie_status in ('P', 'S')	
	order by
		a.nr_sequencia;


BEGIN
/* Obter dados da requisicao */

begin
select	nr_seq_segurado,
	nr_seq_plano,
	nr_seq_prestador,
	dt_requisicao,
	ie_tipo_guia
into STRICT	nr_seq_segurado_w,
	nr_seq_plano_w,
	nr_seq_prestador_w,
	dt_requisicao_w,
	ie_tipo_guia_w
from	pls_requisicao
where	nr_sequencia	= nr_seq_requisicao_p;	
exception
when others then
	nr_seq_segurado_w	:= 0;
	nr_seq_plano_w		:= 0;
	nr_seq_prestador_w	:= 0;
end;

/* Obter dados do segurado */

begin
select	b.ie_tipo_segurado,
	a.ie_sexo,
	substr(obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'A'), 1, 10)
into STRICT	ie_tipo_segurado_w,
	ie_sexo_w,
	qt_idade_w
from	pls_segurado	b,
	pessoa_fisica	a
where	b.nr_sequencia		= nr_seq_segurado_w 
and	b.cd_pessoa_fisica	= a.cd_pessoa_fisica;
exception
when others then
	ie_tipo_segurado_w	:= '0';
end;

/* Obter dados do produto */

begin
select	ie_preco	
into STRICT	ie_preco_w
from	pls_plano
where	nr_sequencia	= nr_seq_plano_w;
exception
when others then
	ie_preco_w	:= '0';
end;

/* Obter dados do prestador */

begin
select	nr_seq_tipo_prestador
into STRICT	nr_seq_tipo_prestador_w	
from	pls_prestador
where	nr_sequencia	= nr_seq_prestador_w;
exception
when others then
	nr_seq_tipo_prestador_w	:= 0;
end;

open C01;
loop
fetch C01 into	
	nr_seq_tratamento_w,
	nr_seq_regra_tratamento_w,
	cd_especialidade_medica_w,
	qt_idade_min_w,
	qt_idade_max_w,
	qt_tempo_tratamento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	count(1)
	into STRICT	qt_reg_w
	from	pls_tratamento_benef
	where	dt_requisicao_w between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicio_tratamento) and  fim_dia(dt_fim_tratamento)
	and	nr_seq_tratamento	= nr_seq_tratamento_w
	and	nr_seq_segurado		= nr_seq_segurado_w
	and	ie_estagio_tratamento	= 1;
	
	if (qt_reg_w > 0) then
		goto final;
	end if;
	
	if (coalesce(cd_especialidade_medica_w, 0) > 0) then
		select	count(1)
		into STRICT	qt_reg_w
		from	pls_prestador_med_espec	a
		where	a.nr_seq_prestador = nr_seq_prestador_w
		and	a.cd_especialidade = cd_especialidade_medica_w
		and	dt_requisicao_w between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(a.dt_inicio_vigencia, dt_requisicao_w)) and
                                fim_dia(coalesce(a.dt_fim_vigencia, dt_requisicao_w));
		
		if (qt_reg_w = 0) then
			goto final;
		end if;
	end if;
	
	if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w > qt_idade_w) or
		(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w < qt_idade_w) then
		goto final;
	end if;
	
	select	count(1)
	into STRICT	qt_reg_w
	from	pls_tratamento_regra_prest
	where	nr_seq_regra_trat	= nr_seq_regra_tratamento_w;
	
	if (qt_reg_w > 0) then
		select	count(1)
		into STRICT	qt_reg_w
		from	pls_tratamento_regra_prest
		where	nr_seq_regra_trat	= nr_seq_regra_tratamento_w
		and	nr_seq_prestador	= nr_seq_prestador_w;
		
		if (qt_reg_w = 0) then
			goto final;
		end if;
	end if;	

	if (ie_origem_p = 'R') then
		open C02;
		loop
		fetch C02 into	
			cd_procedimento_w,
			ie_origem_proced_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w;

			select	count(1)
			into STRICT	qt_proc_regra_w
			from	pls_tratamento_regra_proc
			where	nr_seq_regra_trat 				= nr_seq_regra_tratamento_w
			and	coalesce(cd_procedimento,cd_procedimento_w)        	= cd_procedimento_w
			and     coalesce(ie_origem_proced,ie_origem_proced_w)      	= ie_origem_proced_w
			and     coalesce(cd_grupo_proc,cd_grupo_w)                 	= cd_grupo_w
			and     coalesce(cd_especialidade, cd_especialidade_w)	= cd_especialidade_w
			and     coalesce(cd_area_procedimento, cd_area_w)          	= cd_area_w;	

			if (qt_proc_regra_w > 0) then
				ie_procedimento_regra_w	:= 'S';
			end if;	
			end;
		end loop;
		close C02;
	elsif (ie_origem_p = 'E') then
		open C04;
		loop
		fetch C04 into	
			cd_procedimento_w,
			ie_origem_proced_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			
			SELECT * FROM pls_obter_estrut_proc(	cd_procedimento_w, ie_origem_proced_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w;

			select	count(1)
			into STRICT	qt_proc_regra_w
			from	pls_tratamento_regra_proc
			where	nr_seq_regra_trat 				= nr_seq_regra_tratamento_w
			and	coalesce(cd_procedimento,cd_procedimento_w)        	= cd_procedimento_w
			and     coalesce(ie_origem_proced,ie_origem_proced_w)      	= ie_origem_proced_w
			and     coalesce(cd_grupo_proc,cd_grupo_w)                 	= cd_grupo_w
			and     coalesce(cd_especialidade, cd_especialidade_w)	= cd_especialidade_w
			and     coalesce(cd_area_procedimento, cd_area_w)          	= cd_area_w;	

			if (qt_proc_regra_w > 0) then
				ie_procedimento_regra_w := 'S';
			end if;	
			end;
		end loop;
		close C04;
	end if;

	if (ie_procedimento_regra_w = 'N') then
		goto final;
	end if;
	
	open C03;
	loop
	fetch C03 into	
		cd_doenca_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		select	count(1)
		into STRICT	qt_cid_regra_w
		from	pls_tratamento_regra_cid
		where	nr_seq_regra_trat	= nr_seq_regra_tratamento_w
		and	cd_doenca_cid		= cd_doenca_w
		and	ie_situacao		= 'A';
		
		if (qt_cid_regra_w > 0) then
			ie_cid_regra_w	:= 'S';
		end if;		
		end;
	end loop;
	close C03;

	if (ie_cid_regra_w = 'N') then
		goto final;
	end if;	
	
	insert into pls_tratamento_benef(nr_sequencia,
		nr_seq_tratamento,
		dt_inicio_tratamento,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_fim_tratamento,
		nr_seq_segurado,
		ie_estagio_tratamento,
		nr_seq_requisicao)
	values (nextval('pls_tratamento_benef_seq'),
		nr_seq_tratamento_w,
		clock_timestamp(),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		fim_dia(clock_timestamp() + qt_tempo_tratamento_w),
		nr_seq_segurado_w,
		1,
		nr_seq_requisicao_p);
	
	<<final>>
	
	ie_procedimento_regra_w := 'N';
	ie_cid_regra_w		:= 'N';
	qt_reg_w		:= 0;
	end;
end loop;
close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_tratamento_benef ( nr_seq_requisicao_p bigint, ie_origem_p text, nr_seq_exec_lote_p bigint, nm_usuario_p text) FROM PUBLIC;

