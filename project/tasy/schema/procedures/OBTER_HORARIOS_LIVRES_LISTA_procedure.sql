-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_horarios_livres_lista ( cd_estabelecimento_p bigint, cd_lista_agenda_p text, dt_agenda_p timestamp, dt_final_p timestamp, qt_minutos_p bigint, hr_inicial_p text, hr_final_p text, ds_restricao_p text, nm_usuario_p text, ie_grava_livre_p text, ds_horarios_p INOUT text, ie_gerar_retroativo_p text default 'N') AS $body$
DECLARE

				
tam_lista_w		bigint;
ie_pos_virgula_w	smallint;
ie_contador_w		bigint	:= 0;				
cd_lista_agenda_w	varchar(1000);
cd_agenda_w		bigint;
ds_horarios_w		varchar(4000);
nr_seq_agenda_w		agenda_paciente.nr_sequencia%type;
ie_horario_passado_w	agenda.ie_horario_passado%type;

c02 REFCURSOR;
nr_cd_list_length	bigint;

c01 CURSOR FOR
	SELECT	cd_agenda,
	        ie_horario_passado
	from	agenda
	where	obter_se_contido(cd_agenda,cd_lista_agenda_p) = 'S';


BEGIN

if (obtain_user_locale(nm_usuario_p) = 'en_AU' and (cd_lista_agenda_p IS NOT NULL AND cd_lista_agenda_p::text <> ''))	then
/*
	This cursor data is used to reset the interrupted schedule creation by same user
*/
	nr_cd_list_length	:= length(trim(both cd_lista_agenda_p));

	open c02 for EXECUTE
        'select	nr_sequencia
        from	agenda_paciente
        where	cd_agenda in (' ||
        (case when substr(trim(both cd_lista_agenda_p), nr_cd_list_length) = ',' then substr(trim(both cd_lista_agenda_p), 0, nr_cd_list_length-1) else trim(both cd_lista_agenda_p) end)
        || ')
	and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(:dt_agenda_p)
        and	ie_status_agenda = ''N''
        and	nvl(cd_pessoa_fisica, 0) = 0
        and	nm_paciente is null'
	using	dt_agenda_p;

	loop
	fetch	c02	into
		nr_seq_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
			CALL liberar_horario_agenda_exame(nr_seq_agenda_w, nm_usuario_p);
		end;
	end loop;
	close c02;
end if;

open c01;
loop
fetch c01 into
	cd_agenda_w,
	ie_horario_passado_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	BEGIN
	
	select CASE WHEN ie_gerar_retroativo_p='S' THEN  ie_gerar_retroativo_p  ELSE coalesce(ie_horario_passado_w, 'N') END
	into STRICT ie_horario_passado_w
	;
	
	ds_horarios_w := obter_horarios_livres_cirurgia(	cd_estabelecimento_p, cd_agenda_w, dt_agenda_p, dt_final_p, qt_minutos_p, hr_inicial_p, hr_final_p, ds_restricao_p, nm_usuario_p, ie_grava_livre_p, ds_horarios_w, ie_horario_passado_w);
	ds_horarios_p	:= ds_horarios_w;
	
	EXCEPTION
	WHEN OTHERS THEN null;  /*Tratamento de exception originado na OS 1329445 para que o processo continue em caso de outro usuario alterar o mesmo agendamento durante a geracao de horarios livres*/
	END;
	
	end;
	end loop;
close c01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_horarios_livres_lista ( cd_estabelecimento_p bigint, cd_lista_agenda_p text, dt_agenda_p timestamp, dt_final_p timestamp, qt_minutos_p bigint, hr_inicial_p text, hr_final_p text, ds_restricao_p text, nm_usuario_p text, ie_grava_livre_p text, ds_horarios_p INOUT text, ie_gerar_retroativo_p text default 'N') FROM PUBLIC;

