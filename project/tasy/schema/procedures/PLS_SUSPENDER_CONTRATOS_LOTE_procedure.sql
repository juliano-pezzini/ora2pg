-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_suspender_contratos_lote ( nr_seq_lote_p bigint, nr_seq_motivo_p bigint, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ds_mensagem_p INOUT text) AS $body$
DECLARE



nr_seq_notific_pagador_w	bigint;
qt_nao_recebidas_w		bigint;
qt_liquidados_w			bigint;
nr_seq_regra_w			bigint;
qt_titulo_regra_w		bigint;
ie_titulos_suspensao_w		varchar(2);
qt_titulo_pagador_w		bigint;
ds_pagador_w			varchar(255);
ds_lista_pagador_w		varchar(4000)	:= null;
ie_regulamentacao_plano_w	varchar(2);
ie_suspensao_atend_w		varchar(1);
nr_seq_pagador_w		pls_notificacao_pagador.nr_seq_pagador%type;
ds_nr_processo_w		varchar(255);
ie_resc_sem_confirm_receb_w	pls_notificacao_regra.ie_exige_confirmacao_receb%type;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_notificacao_pagador x
	where	nr_seq_lote	= nr_seq_lote_p
	and	coalesce(dt_suspensao::text, '') = ''
	and ((dt_recebimento_notif IS NOT NULL AND dt_recebimento_notif::text <> '') or ie_resc_sem_confirm_receb_w = 'S')
	and	coalesce(x.ie_suspensao,'S') = 'S'
	and	not exists (SELECT	1
				from	pls_notificacao_pagador a,
					pls_notificacao_item b,
					pls_mensalidade c,
					titulo_receber d
				where	b.nr_seq_mensalidade	= c.nr_sequencia
				and	d.nr_seq_mensalidade	= c.nr_sequencia
				and	a.nr_sequencia		= b.nr_seq_notific_pagador
				and	a.nr_sequencia		= x.nr_sequencia
				and	(d.dt_liquidacao IS NOT NULL AND d.dt_liquidacao::text <> '')
				and	d.ie_situacao	<> '6');

C02 CURSOR FOR
	SELECT	distinct
		pls_obter_dados_pagador(a.nr_seq_pagador,'N')
	from	pls_notificacao_pagador a,
		pls_notificacao_item b,
		pls_mensalidade c,
		titulo_receber d
	where	b.nr_seq_mensalidade	= c.nr_sequencia
	and	d.nr_seq_mensalidade	= c.nr_sequencia
	and	a.nr_sequencia		= b.nr_seq_notific_pagador
	and	a.nr_seq_lote		= nr_seq_lote_p
	and	(d.dt_liquidacao IS NOT NULL AND d.dt_liquidacao::text <> '')
	and	d.ie_situacao	<> '6';


BEGIN

select	coalesce(max(a.ie_exige_confirmacao_receb),'N')
into STRICT	ie_resc_sem_confirm_receb_w
from	pls_notificacao_regra a,
	pls_notificacao_lote b
where	a.nr_sequencia	= b.nr_seq_regra
and	b.nr_sequencia	= nr_seq_lote_p;

--Realiza a verificação de recebimentos do lote
select	count(*)
into STRICT	qt_nao_recebidas_w
from	pls_notificacao_pagador
where	nr_seq_lote	= nr_seq_lote_p
and	coalesce(dt_suspensao::text, '') = '';

if (qt_nao_recebidas_w = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(180812);
end if;

select	count(*)
into STRICT	qt_nao_recebidas_w
from	pls_notificacao_pagador
where	nr_seq_lote	= nr_seq_lote_p
and	(dt_recebimento_notif IS NOT NULL AND dt_recebimento_notif::text <> '')
and	coalesce(dt_suspensao::text, '') = '';

if (qt_nao_recebidas_w = 0) and (ie_resc_sem_confirm_receb_w = 'N') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(180813);
end if;

/* Realiza a verificação de títulos liquidados no lote que a situação NÃO seja liquidado por perdas */

select	coalesce(max(a.nr_sequencia), 0)
into STRICT	nr_seq_regra_w
from	pls_regra_suspensao a,
	pls_notificacao_regra b,
	pls_notificacao_lote c
where	a.nr_seq_regra_geracao	= b.nr_sequencia
and	b.nr_sequencia		= c.nr_seq_regra
and	c.nr_sequencia		= nr_seq_lote_p
and	trunc(clock_timestamp(),'dd') between trunc(coalesce(a.dt_inicio_vigencia,clock_timestamp()),'dd') and trunc(coalesce(a.dt_fim_vigencia,clock_timestamp()),'dd');

if (nr_seq_regra_w	> 0) then
	select	qt_titulo_aberto,
		ie_titulos_suspensao,
		ie_regulamentacao_plano
	into STRICT	qt_titulo_regra_w,
		ie_titulos_suspensao_w,
		ie_regulamentacao_plano_w
	from	pls_regra_suspensao
	where	nr_sequencia	= nr_seq_regra_w;
end if;

open C01;
loop
fetch C01 into
	nr_seq_notific_pagador_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select max(nr_seq_pagador)
	into STRICT	nr_seq_pagador_w
	from 	pls_notificacao_pagador
	where 	nr_sequencia = nr_seq_notific_pagador_w;

	begin
	ie_suspensao_atend_w 	:= pls_obter_processo_jud_notif(nr_seq_lote_p, nr_seq_pagador_w, null, 'PSA');
	exception
	when others then
		ie_suspensao_atend_w := 'N';
	end;

	if (ie_suspensao_atend_w = 'N') then
		ds_nr_processo_w := pls_obter_processo_jud_notif( nr_seq_lote_p, nr_seq_pagador_w, null, 'NRP');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(337228,'NR_PROCESSO_P=' ||ds_nr_processo_w);
	end if;

	if (qt_titulo_regra_w > 0) then
		if (ie_titulos_suspensao_w	= 'T') then	/* Considera todos os títulos do pagador, independente se está ou não na notificação */
			select	count(*)
			into STRICT	qt_titulo_pagador_w
			from	pls_notificacao_pagador a,
				pls_contrato_pagador b,
				pls_mensalidade c,
				titulo_receber d
			where	a.nr_seq_pagador	= b.nr_sequencia
			and	b.nr_sequencia		= c.nr_seq_pagador
			and	d.nr_seq_mensalidade	= c.nr_sequencia
			and	a.nr_sequencia		= nr_seq_notific_pagador_w
			and	d.ie_situacao		in ('1', '6');
		elsif (ie_titulos_suspensao_w	= 'N') then	/* Considera apenas os títulos que estão na notificação */
			select	count(*)
			into STRICT	qt_titulo_pagador_w
			from	pls_notificacao_pagador a,
				pls_notificacao_item b,
				pls_mensalidade c,
				titulo_receber d
			where	b.nr_seq_mensalidade	= c.nr_sequencia
			and	d.nr_seq_mensalidade	= c.nr_sequencia
			and	a.nr_sequencia		= b.nr_seq_notific_pagador
			and	a.nr_sequencia		= nr_seq_notific_pagador_w
			and	d.ie_situacao		in ('1', '6');
		end if;

		if	(qt_titulo_pagador_w >= qt_titulo_regra_w AND ie_suspensao_atend_w = 'S')then
			CALL pls_suspender_contrato_notific(	nr_seq_notific_pagador_w,
							nr_seq_motivo_p,
							ds_observacao_p,
							nr_seq_lote_p,
							nm_usuario_p,
							cd_estabelecimento_p);
		end if;
	elsif (ie_suspensao_atend_w = 'S') then
		CALL pls_suspender_contrato_notific(	nr_seq_notific_pagador_w,
						nr_seq_motivo_p,
						ds_observacao_p,
						nr_seq_lote_p,
						nm_usuario_p,
						cd_estabelecimento_p);
	end if;

	if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
		update	pls_notificacao_pagador
		set	nr_seq_regra_susp	= nr_seq_regra_w
		where	nr_sequencia		= nr_seq_notific_pagador_w;
	end if;

	end;
end loop;
close C01;

open C02;
loop
fetch C02 into
	ds_pagador_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	if (coalesce(ds_lista_pagador_w::text, '') = '') then
		ds_lista_pagador_w 	:= ds_pagador_w;
	else
		if (length(ds_lista_pagador_w) > 100) then
			ds_lista_pagador_w	:= ds_lista_pagador_w || '...';
			exit;
		else
			ds_lista_pagador_w	:= ds_lista_pagador_w || ds_pagador_w;
		end if;
	end if;
	end;
end loop;
close C02;

if (ds_lista_pagador_w IS NOT NULL AND ds_lista_pagador_w::text <> '') then
	ds_mensagem_p	:= 'O seguintes pagadores não foram suspensos: ' || chr(13) || chr(10) || ds_lista_pagador_w || chr(13) || chr(10) ||
				'Motivo: Há títulos notificados que já foram liquidados. Verifique.';
end if;

update	pls_notificacao_lote
set	dt_suspensao	= clock_timestamp(),
	nm_usuario	= nm_usuario_p,
	dt_atualizacao	= clock_timestamp()
where	nr_sequencia	= nr_seq_lote_p;

CALL pls_atualizar_valor_notific(nr_seq_lote_p);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_suspender_contratos_lote ( nr_seq_lote_p bigint, nr_seq_motivo_p bigint, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ds_mensagem_p INOUT text) FROM PUBLIC;

