-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_titulo_cobran_prev (nr_seq_cobranca_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar o título de cobrança prevista
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_moeda_padrao_w		bigint;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(14);
nr_titulo_w			bigint;
cd_portador_w			bigint;
cd_tipo_portador_w		bigint;
cd_estab_financeiro_w		bigint;

cd_tipo_taxa_juros_w		bigint	:= null;
tx_juros_w			double precision	:= null;
cd_tipo_taxa_multa_w		bigint	:= null;
tx_multa_w			double precision	:= null;
ie_origem_titulo_w		varchar(10)	:= null;
nr_seq_conta_banco_w		bigint	:= null;

nr_seq_trans_fin_baixa_w	bigint;
nr_seq_carteira_cobr_w		bigint;
nr_seq_pagador_w		bigint;
nr_seq_segurado_w		bigint;
nr_parcela_w			integer;
tx_fracao_parcela_w		double precision;
tx_acrescimo_w			double precision;
vl_procedimento_w		double precision;
vl_material_w			double precision;
vl_vencimento_w			double precision;
dt_vencimento_w			timestamp;
ds_vencimentos_w		varchar(255);
vl_cobranca_w			double precision;
cd_condicao_pagamento_w		bigint;
dt_base_venc_w			timestamp	:= trunc(clock_timestamp(),'dd');
qt_vencimentos_w		bigint;

nr_seq_conta_banco_cart_cob_w	banco_carteira_regra.nr_seq_conta_banco%type;
nr_seq_carteira_cart_cob_w	banco_carteira_regra.nr_seq_carteira%type;
tx_juros_cart_cob_w		banco_carteira_regra.tx_juros%type;
tx_multa_cart_cob_w		banco_carteira_regra.tx_multa%type;
cd_convenio_w			pls_regra_convenio.cd_convenio%type;
nr_seq_nf_saida_w		nota_fiscal.nr_sequencia%type;
ds_erro_w			varchar(2000);
nr_seq_classe_w			classe_titulo_receber.nr_sequencia%type;

/* Cursor Vencimentos */

c01 CURSOR FOR
SELECT	nr_parcela,
	tx_fracao_parcela,
	tx_acrescimo
from	condicao_pagamento b,
	parcela a
where	a.cd_condicao_pagamento = b.cd_condicao_pagamento
and	a.cd_condicao_pagamento = cd_condicao_pagamento_w
and	b.ie_forma_pagamento <> 1
and	vl_cobranca_w > 0

union all

/* A vista */

select	1 nr_parcela,
	100,
	0
from	condicao_pagamento
where	cd_condicao_pagamento = cd_condicao_pagamento_w
and	ie_forma_pagamento = 1
and	vl_cobranca_w > 0
order by nr_parcela;


BEGIN

select	a.nr_seq_pagador,
	a.nr_seq_segurado,
	a.cd_pessoa_fisica
into STRICT	nr_seq_pagador_w,
	nr_seq_segurado_w,
	cd_pessoa_fisica_w
from	pls_cobranca_previa_serv a
where	a.nr_sequencia	= nr_seq_cobranca_p;

select	cd_moeda_padrao
into STRICT	cd_moeda_padrao_w
from	parametro_contas_receber
where	cd_estabelecimento	= cd_estabelecimento_p;

if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
	if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
		select	a.cd_pessoa_fisica,
			a.cd_cgc
		into STRICT	cd_pessoa_fisica_w,
			cd_cgc_w
		from	pls_contrato_pagador a
		where	a.nr_sequencia	= nr_seq_pagador_w;
	elsif (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
		select	a.cd_pessoa_fisica
		into STRICT	cd_pessoa_fisica_w
		from	pls_segurado a
		where	a.nr_sequencia	= nr_seq_segurado_w;
	end if;
end if;

cd_convenio_w	:= obter_dados_seg_entrada_unica(nr_seq_segurado_w, 'CV');

select	coalesce(cd_estab_financeiro, cd_estabelecimento)
into STRICT	cd_estab_financeiro_w
from	estabelecimento
where	cd_estabelecimento	= cd_estabelecimento_p;

select	sum(qt_procedimento * vl_procedimento)
into STRICT	vl_procedimento_w
from	pls_cobranca_previa_proc
where	nr_seq_cob_previa	= nr_seq_cobranca_p;

select	sum(qt_material * vl_material)
into STRICT	vl_material_w
from	pls_cobranca_previa_mat
where	nr_seq_cob_previa	= nr_seq_cobranca_p;

vl_cobranca_w	:= coalesce(vl_procedimento_w,0) + coalesce(vl_material_w,0);

-- Necessário chamar a rotina OBTER_CARTEIRA_COBRANCA para buscar a carteira de acordo com o convênio do beneficiário
if (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then
	SELECT * FROM obter_carteira_cobranca(cd_estabelecimento_p, cd_convenio_w, vl_cobranca_w, clock_timestamp(), 	-- parâmetros IN
				nr_seq_conta_banco_cart_cob_w, nr_seq_carteira_cart_cob_w, tx_juros_cart_cob_w, tx_multa_cart_cob_w) INTO STRICT 
				nr_seq_conta_banco_cart_cob_w, nr_seq_carteira_cart_cob_w, tx_juros_cart_cob_w, tx_multa_cart_cob_w; -- parâmetros OUT
end if;

begin
select	cd_tipo_taxa_juro,
	pr_juro_padrao,
	cd_tipo_taxa_multa,
	pr_multa_padrao,
	coalesce(ie_origem_titulo,3),
	nr_seq_conta_banco,
	coalesce(cd_tipo_portador_w,cd_tipo_portador),
	coalesce(cd_portador_w,cd_portador)
into STRICT	cd_tipo_taxa_juros_w,
	tx_juros_w,
	cd_tipo_taxa_multa_w,
	tx_multa_w,
	ie_origem_titulo_w,
	nr_seq_conta_banco_w,
	cd_tipo_portador_w,
	cd_portador_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;
exception
	when no_data_found then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(192642);
end;

if (coalesce(nr_seq_conta_banco_cart_cob_w::text, '') = '') and (coalesce(nr_seq_conta_banco_w::text, '') = '') then
	select	max(nr_seq_conta_banco)
	into STRICT	nr_seq_conta_banco_w
	from	pls_contrato_pagador_fin
	where	nr_seq_pagador = nr_seq_pagador_w;
end if;

select	max(a.cd_condicao_pagamento)
into STRICT	cd_condicao_pagamento_w
from	pls_parametros_cob_previa a
where	a.cd_estabelecimento	= cd_estabelecimento_p;

if (coalesce(cd_condicao_pagamento_w::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(145036);
end if;

SELECT * FROM Calcular_Vencimento(	cd_estabelecimento_p, cd_condicao_pagamento_w, dt_base_venc_w, qt_vencimentos_w, ds_vencimentos_w) INTO STRICT qt_vencimentos_w, ds_vencimentos_w;

select	max(nr_sequencia)
into STRICT	nr_seq_nf_saida_w
from	nota_fiscal
where	nr_seq_cob_previa	= nr_seq_cobranca_p;

select	max(a.nr_sequencia)
into STRICT	nr_seq_classe_w
from	classe_titulo_receber a
where	a.ie_situacao = 'A'
and	exists (	SELECT	1
			from	classe_titulo_receb_regra b
			where	b.nr_seq_classe = a.nr_sequencia
			and	b.ie_origem_titulo = 14);

open c01;
loop
fetch c01 into
	nr_parcela_w,
	tx_fracao_parcela_w,
	tx_acrescimo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	dt_vencimento_w		:= To_Date(substr(ds_vencimentos_w,1,10),'dd/mm/yyyy');
	ds_vencimentos_w	:= substr(ds_vencimentos_w,12, length(ds_vencimentos_w));

	if (coalesce(tx_fracao_parcela_w,0) > 0) then
		vl_vencimento_w	:= ((vl_cobranca_w * tx_fracao_parcela_w) / 100);
	end if;

	if (tx_acrescimo_w <> 0) then
		vl_vencimento_w 	:= vl_vencimento_w + ((vl_vencimento_w * tx_acrescimo_w) / 100);
	end if;

	if (dt_vencimento_w IS NOT NULL AND dt_vencimento_w::text <> '') then

		select	nextval('titulo_seq')
		into STRICT	nr_titulo_w
		;

		begin
			insert into titulo_receber(
				nr_titulo,
				cd_estabelecimento,
				dt_atualizacao,
				nm_usuario,
				dt_emissao,
				dt_vencimento,
				dt_pagamento_previsto,
				vl_titulo,
				vl_saldo_titulo,
				cd_moeda,
				cd_portador,
				cd_tipo_portador,
				ie_situacao,
				ie_tipo_emissao_titulo,
				ie_origem_titulo,
				ie_tipo_titulo,
				ie_tipo_inclusao,
				cd_pessoa_fisica,
				cd_cgc,
				tx_juros,
				cd_tipo_taxa_juro,
				tx_multa,
				cd_tipo_taxa_multa,
				nr_seq_conta_banco,
				cd_estab_financeiro,
				ds_observacao_titulo,
				nr_seq_cob_previa,
				ie_pls,
				nr_seq_trans_fin_contab,
				nr_seq_trans_fin_baixa,
				nm_usuario_orig,
				dt_inclusao,
				vl_saldo_juros,
				vl_saldo_multa,
				tx_desc_antecipacao,
				nr_seq_carteira_cobr,
				nr_seq_nf_saida,
				nr_seq_classe)
			values (nr_titulo_w,
				cd_estabelecimento_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				dt_vencimento_w,
				dt_vencimento_w,
				vl_vencimento_w,
				vl_vencimento_w,
				cd_moeda_padrao_w,
				cd_portador_w,
				cd_tipo_portador_w,
				1,
				1,
				'14' /* OPS - Requisição*/
,
				1,
				'2',
				cd_pessoa_fisica_w,
				cd_cgc_w,
				coalesce(tx_juros_cart_cob_w, tx_juros_w),
				cd_tipo_taxa_juros_w,
				coalesce(tx_multa_cart_cob_w, tx_multa_w),
				cd_tipo_taxa_multa_w,
				coalesce(nr_seq_conta_banco_cart_cob_w, nr_seq_conta_banco_w),
				cd_estab_financeiro_w,
				null,
				nr_seq_cobranca_p,
				'S',
				nr_seq_trans_fin_baixa_w,
				nr_seq_trans_fin_baixa_w,
				nm_usuario_p,
				clock_timestamp(),
				0,
				0,
				0,
				nr_seq_carteira_cart_cob_w,
				nr_seq_nf_saida_w,
				nr_seq_classe_w);

			/* Emite bloquetos */

			CALL gerar_bloqueto_tit_rec(nr_titulo_w, 'OPSRA');
		exception
		when others then
			/* Campos obrigatórios da TITULO_RECEBER que são alimentadas pelas informação das tabelas PLS:
			CD_PORTADOR		-PLS_PARAMETROS / OPS - Gestão de Operadoras > Parâmetros da OPS > Contrato e beneficiáirios  / Portador padrão (CD_PORTADOR) - CD_PORTADOR_W
			CD_TIPO_PORTADOR		-PLS_PARAMETROS / OPS - Gestão de Operadoras > Parâmetros da OPS > Contrato e beneficiáirios  / Tipo de portador padrão (CD_TIPO_PORTADOR) - CD_TIPO_PORTADOR_W
			CD_TIPO_TAXA_JURO	-PLS_PARAMETROS / OPS - Gestão de Operadoras > Parâmetros da OPS > Mensalidades / Tipo de taxa de juros (CD_TIPO_TAXA_JURO) - CD_TIPO_TAXA_JUROS_W
			CD_TIPO_TAXA_MULTA	-PLS_PARAMETROS / OPS - Gestão de Operadoras > Parâmetros da OPS > Mensalidades / Tipo de taxa de multa (CD_TIPO_TAXA_MULTA) - CD_TIPO_TAXA_MULTA_W
			TX_JUROS			-PLS_PARAMETROS / OPS - Gestão de Operadoras > Parâmetros da OPS > Mensalidades / Taxa juros (PR_JURO_PADRAO) - TX_JUROS_W
			TX_MULTA			-PLS_PARAMETROS / OPS - Gestão de Operadoras > Parâmetros da OPS > Mensalidades / Taxa multa (PR_MULTA_PADRAO) - TX_MULTA_W
			*/
			if (coalesce(cd_portador_w::text, '') = '') or (coalesce(cd_tipo_portador_w::text, '') = '') then
				ds_erro_w := ds_erro_w || chr(13) || chr(10) || 'OPS - Gestão de Operadoras > Parâmetros da OPS > Contrato e beneficiários, campos: ';
				if (coalesce(cd_portador_w::text, '') = '') then
					ds_erro_w := ds_erro_w || chr(13) || chr(10) || 'Portador padrão(CD_PORTADOR);';
				end if;

				if (coalesce(cd_tipo_portador_w::text, '') = '') then
					ds_erro_w := ds_erro_w || chr(13) || chr(10) || 'Tipo de portador padrão(CD_TIPO_PORTADOR);';
				end if;
			end if;

			if (coalesce(cd_tipo_taxa_juros_w::text, '') = '') or (coalesce(cd_tipo_taxa_multa_w::text, '') = '') or (coalesce(tx_juros_cart_cob_w::text, '') = '' and coalesce(tx_juros_w::text, '') = '') or (coalesce(tx_multa_cart_cob_w::text, '') = '' and coalesce(tx_multa_w::text, '') = '') then
				ds_erro_w := ds_erro_w || chr(13) || chr(10) || 'OPS - Gestão de Operadoras > Parâmetros da OPS > Mensalidades, campos: ';
				if (coalesce(cd_tipo_taxa_juros_w::text, '') = '') then
					ds_erro_w := ds_erro_w || chr(13) || chr(10) || 'Tipo de taxa de juros (CD_TIPO_TAXA_JURO);';
				end if;

				if (coalesce(cd_tipo_taxa_multa_w::text, '') = '') then
					ds_erro_w := ds_erro_w || chr(13) || chr(10) || 'Tipo de taxa de multa (CD_TIPO_TAXA_MULTA);';
				end if;

				if (coalesce(tx_juros_cart_cob_w::text, '') = '' and coalesce(tx_juros_w::text, '') = '') then
					ds_erro_w := ds_erro_w || chr(13) || chr(10) || 'Taxa juros (PR_JURO_PADRAO);';
				end if;

				if (coalesce(tx_multa_cart_cob_w::text, '') = '' and coalesce(tx_multa_w::text, '') = '') then
					ds_erro_w := ds_erro_w || chr(13) || chr(10) || 'Taxa multa (PR_MULTA_PADRAO);';
				end if;
			end if;

			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort('Não foi possível gerar o título de cobrança prevista, devido a cadastro incompleto em:' || ds_erro_w);
			end if;
		end;
	end if;
	end;
end loop;
close c01;

/* Commit na procedure externa */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_titulo_cobran_prev (nr_seq_cobranca_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

