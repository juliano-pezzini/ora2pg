-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_trib_prest_venc ( nr_seq_vencimento_p pls_pag_prest_vencimento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar os valores de tributos
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_irrelevante_w		varchar(4000);
ds_venc_w			varchar(2000);
ie_tipo_tributacao_w		varchar(255);
ie_pago_prev_w			varchar(255);
ds_emp_retencao_ret_w		varchar(255);
ie_proximo_pgto_eve_w		varchar(255);
ie_agrupado_w			varchar(255);
cd_variacao_w			varchar(50);
ie_periodicidade_w		varchar(50);
ie_cnpj_w			varchar(50);
cd_cnpj_raiz_w			varchar(50);
cd_darf_w			varchar(20);
ie_tipo_tributo_w		varchar(15);
cd_beneficiario_w		varchar(14);
cd_cgc_w			varchar(14);
ie_forma_retencao_inss_ir_w	varchar(10)	:= null;
cd_pessoa_fisica_w		varchar(10);
cd_tributo_pf_w			varchar(10);
cd_pessoa_fisica_pf_w		varchar(10);
cd_darf_nf_w			varchar(10);
ie_tipo_data_w			varchar(5);
ie_seq_calculo_inss_w		varchar(5);
ie_irpf_w			varchar(3);
ie_apuracao_piso_w		varchar(3);
ie_filantropia_w		varchar(3);
ie_tipo_contratacao_w		varchar(2);
ie_saldo_negativo_w		varchar(2);
ie_saldo_negativo_venc_w	varchar(2);
ie_saldo_negativo_prest_w	varchar(2);
ie_saldo_negativo_param_w	varchar(2);
ie_inss_tipo_contrat_w		varchar(1)	:= 'N';
ie_vencimento_w			varchar(1);
ie_acumulativo_w		varchar(1);
ie_restringe_estab_w		varchar(1);
ie_pago_prev_nf_w		varchar(1);
ie_periodicidade_nf_w		varchar(1);
ie_valor_base_trib_nf_w		varchar(1);
ie_recalculou_inss_w		varchar(1) 	:= 'N';
ie_proximo_pgto_w		varchar(1)	:= 'N';
ie_data_tributos_w		varchar(1);
pr_aliquota_w			double precision;
pr_base_calculo_w		double precision;
pr_aliquota_irpf_w		double precision;
vl_inss_w			double precision	:= 0;
vl_base_inss_retido_w		double precision	:= 0;
vl_base_inss_retido_orig_w	double precision	:= 0;
vl_tributo_w			double precision;
vl_base_calculo_w		double precision;
vl_minimo_tributo_w		double precision;
vl_base_retido_outro_w		double precision;
vl_trib_acum_w			double precision;
vl_pago_w			double precision;
vl_base_calculo_paga_w		double precision;
vl_soma_trib_nao_retido_w	double precision;
vl_soma_base_nao_retido_w	double precision;
vl_soma_trib_adic_w		double precision;
vl_soma_base_adic_w		double precision;
vl_minimo_base_w		double precision;
vl_trib_adic_w			double precision;
vl_base_a_reter_w		double precision;
vl_trib_nao_retido_w		double precision;
vl_base_adic_w			double precision;
vl_base_nao_retido_w		double precision;
vl_teto_base_w			double precision;
vl_trib_anterior_w		double precision;
vl_vencimento_w			double precision;
vl_reducao_w			double precision;
vl_desc_dependente_w		double precision;
vl_total_base_w			double precision;
vl_base_pago_adic_base_w	double precision;
vl_base_tributo_pf_w		double precision;
vl_tributo_pf_w			double precision;
vl_tributo_ret_w		double precision;
vl_base_calculo_ret_w		double precision;
vl_evento_w			double precision;
nr_seq_pag_prest_w		double precision;
vl_pagamento_w			double precision;
vl_estornado_base_maior_w	double precision;
vl_saldo_a_maior_w		double precision;
vl_base_restante_w		double precision;
vl_pag_prest_venc_trib_w	double precision;
vl_base_calculo_nf_w		double precision;
vl_tributo_nf_w			double precision;
vl_reducao_base_nf_w		double precision;
vl_trib_nao_retido_nf_w		double precision;
vl_base_nao_retido_nf_w		double precision;
vl_trib_adic_nf_w		double precision;
vl_base_adic_nf_w		double precision;
vl_reducao_nf_w			double precision;
vl_trib_inss_w			double precision;
vl_tributo_irpf_w		double precision;
vl_total_eventos_w		double precision;
vl_itens_w			double precision;
vl_trib_aux_w			double precision	:= 0;
vl_total_desconto_w		double precision;
vl_total_prod_w			double precision;
vl_gerado_w			double precision;
vl_gerado_ret_w			double precision;
vl_desc_base_w			double precision;
vl_base_ret_outro_anterior_w	double precision;
nr_seq_alt_w			bigint;
cd_tributo_w			bigint;
nr_seq_venc_trib_w		bigint;
cd_cond_pagto_w			bigint;
nr_seq_trans_reg_w		bigint;
nr_seq_trans_baixa_w		bigint;
cd_conta_financ_w		bigint;
nr_seq_prestador_w		bigint;
cd_tributo_ret_w		bigint;
nr_seq_regra_trib_w		bigint;
ie_ordem_w			bigint;
nr_seq_classe_w			bigint;
nr_seq_pag_prest_venc_trib_w	bigint;
cd_tributo_nf_w			bigint;
pr_fator_w			double precision;
tx_tributo_nf_w			double precision;
qt_venc_w			integer;
cd_estabelecimento_w		integer;
cd_tipo_baixa_neg_w		integer;
cd_empresa_w			smallint;
ie_sequencia_w			smallint	:= 999;
qt_dependente_w			smallint;
qt_lote_ret_trib_w		integer;
qt_imposto_mes_w		integer;
qt_registro_w			integer;
dt_emissao_w			timestamp;
dt_vencimento_w			timestamp;
dt_venc_titulo_w		timestamp;
dt_tributo_w			timestamp;
dt_ref_tributo_w		timestamp;
dt_competencia_w		timestamp;
dt_calculo_w			timestamp;
ie_trib_saldo_tit_nf_w		parametros_contas_pagar.ie_trib_saldo_tit_nf%type;
ie_venc_pls_pag_prod_w		tributo.ie_venc_pls_pag_prod%type;
nr_seq_pag_item_w		pls_pagamento_item.nr_sequencia%type;
nr_seq_regra_irpf_w		regra_calculo_irpf.nr_sequencia%type;
vl_base_estorno_inss_w		pls_pag_prest_venc_trib.vl_base_calculo%type	:= 0;
nr_seq_tipo_prestador_w		pls_tipo_prestador.nr_sequencia%type;
ie_data_ref_tributo_w		varchar(2);
dt_imposto_w			timestamp;
nr_seq_pessoa_trib_w		pessoa_fisica_trib.nr_sequencia%type;
nr_seq_lote_w			pls_lote_pagamento.nr_sequencia%type;
nr_seq_prest_classif_w		pls_prestador.nr_seq_classificacao%type;
qt_pag_item_trib_w		integer;
vl_evento_rateio_w		double precision;
vl_imposto_rat_w		double precision;
vl_dif_rateio_w			double precision;
nr_seq_pag_item_trib_w		pls_pag_item_trib.nr_sequencia%type;
qt_ir_negativo_w		integer;
vl_imposto_total_w		double precision;
vl_imposto_total_trunc_w	double precision;
vl_base_calculo_tit_w		titulo_pagar_imposto.vl_base_calculo%type;
pr_reducao_base_w		tributo_conta_pagar.pr_reducao_base%type;
vl_diferenca_w			double precision;
vl_saldo_trib_w			double precision;
vl_evento_trib_w		double precision;
vl_evento_origem_w		double precision;

C01 CURSOR FOR
	SELECT	cd_tributo,
		ie_vencimento,
		ie_tipo_tributo,
		ie_apuracao_piso,
		ie_cnpj,
		ie_restringe_estab,
		ie_venc_pls_pag_prod
	from	tributo	a
	where	ie_conta_pagar	= 'S'
	and	ie_situacao	= 'A'
	and	((ie_pf_pj = 'A') or
		(ie_pf_pj = 'PF' AND cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') or
		(ie_pf_pj = 'PJ' AND cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> ''))
	and	((coalesce(ie_tipo_tributacao_w, 'X') <> '0') or (coalesce(ie_super_simples, 'S') = 'S'))
	and	not exists (	SELECT	1
				from	nota_fiscal_trib y,
					nota_fiscal x
				where	x.nr_sequencia = y.nr_sequencia
				and	x.nr_seq_pgto_prest = nr_seq_pag_prest_w
				and	y.cd_tributo = a.cd_tributo
				and	x.ie_situacao = '1')
	order	by CASE WHEN ie_tipo_tributo='INSS' THEN  CASE WHEN cd_retencao='2100' THEN  1  ELSE 2 END   ELSE 3 END;

C02 CURSOR FOR
	SELECT 	b.cd_tributo,
		b.vl_base_calculo,
		b.vl_tributo,
		b.cd_pessoa_fisica,
		b.ie_tipo_data,
		coalesce(b.ie_pago_prev_lote_pag_ops, 'P'),
		b.nr_sequencia,
		a.ie_tipo_tributo,
		coalesce(CASE WHEN a.ie_venc_pls_pag_prod='C' THEN 'C' WHEN a.ie_venc_pls_pag_prod='V' THEN 'V' WHEN coalesce(a.ie_venc_pls_pag_prod::text, '') = '' THEN CASE WHEN a.ie_vencimento='V' THEN 'V' WHEN a.ie_vencimento='C' THEN 'V'  ELSE 'C' END  END ,'C') ie_data_ref_tributo,
		b.vl_base_calculo vl_base_restante
	from	tributo			a,
		pessoa_fisica_trib	b
	where	b.cd_tributo 		= a.cd_tributo
	and	b.cd_pessoa_fisica 	= cd_pessoa_fisica_w
	and	((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(b.cd_estabelecimento::text, '') = ''))
	and	CASE WHEN b.ie_tipo_data='E' THEN  trunc(dt_emissao_w, 'month') WHEN b.ie_tipo_data='V' THEN  dt_venc_titulo_w END  between trunc(b.dt_inicio_vigencia, 'month') and dt_fim_vigencia;

C03 CURSOR FOR
	/* Obter o valor base para o tributo conforme regras */

	SELECT	vl_evento,
		ie_tipo_contratacao,
		ie_ordem,
		nr_seq_pag_item
	from	(
		SELECT	coalesce(sum(a.vl_item),0) + CASE WHEN ie_valor_base_trib_nf_w='S' THEN coalesce(sum(a.vl_glosa),0)  ELSE 0 END  vl_evento,
			null ie_tipo_contratacao,
			9999 ie_ordem,
			CASE WHEN ie_agrupado_w='S' THEN  0  ELSE a.nr_sequencia END  nr_seq_pag_item
		from	pls_evento_tributo	c,
			pls_pagamento_item	a,
			pls_pagamento_prestador	b
		where	a.nr_seq_evento		= c.nr_seq_evento
		and	a.nr_seq_pagamento	= b.nr_sequencia
		and	c.cd_tributo		= cd_tributo_w
		and	coalesce(c.ie_situacao,'N')	= 'A'
		and	b.nr_sequencia		= nr_seq_pag_prest_w
		and	coalesce(a.ie_apropriar_total, 'N')	= 'N'
		and	((pls_obter_se_prestador_grupo(c.nr_seq_grupo_prestador,b.nr_seq_prestador) = 'S') or (coalesce(c.nr_seq_grupo_prestador::text, '') = ''))
		and	((b.nr_seq_prestador = c.nr_seq_prestador) or (coalesce(c.nr_seq_prestador::text, '') = ''))
		and	((c.nr_seq_tipo_prestador = (	select	max(x.nr_seq_tipo_prestador)
							from	pls_prestador	x
							where	x.nr_sequencia	= b.nr_seq_prestador))
			or (coalesce(c.nr_seq_tipo_prestador::text, '') = ''))
		and (ie_tipo_tributo_w <> 'INSS' or ie_inss_tipo_contrat_w = 'N')
		and	dt_competencia_w between coalesce(c.dt_inicio_vigencia, dt_competencia_w - 1) and coalesce(c.dt_fim_vigencia, dt_competencia_w + 1)
		and (coalesce(c.nr_seq_classificacao::text, '') = '' or c.nr_seq_classificacao = nr_seq_prest_classif_w)
		group by CASE WHEN ie_agrupado_w='S' THEN  0  ELSE a.nr_sequencia END
		
union all

		-- BUSCA OS ITENS NAO PROVENIENTES DE CONTAS MEDICAS, OU SEJA, DE EVENTOS FINANCEIROS E QUE SEJAM DE NATUREZA PROVENTO
		select	coalesce(sum(a.vl_item),0) + CASE WHEN ie_valor_base_trib_nf_w='S' THEN  coalesce(sum(a.vl_glosa), 0)  ELSE 0 END  vl_evento,
			a.ie_tipo_contratacao ie_tipo_contratacao, -- PRECISA AGORA BUSCAR NOS EVENTOS FINANCEIROS OS TIPOS DE CONTRATACAO, DEVIDO A IMPORTACAO
			CASE WHEN coalesce(a.ie_tipo_contratacao::text, '') = '' THEN 999 WHEN a.ie_tipo_contratacao='CE' THEN  1 WHEN a.ie_tipo_contratacao='CA' THEN  2 WHEN a.ie_tipo_contratacao='CI' THEN  3 WHEN a.ie_tipo_contratacao='I' THEN  4 END  ie_ordem,
			CASE WHEN ie_agrupado_w='S' THEN  0  ELSE a.nr_sequencia END  nr_seq_pag_item
		from	pls_evento		d,
			pls_evento_tributo	c,
			pls_pagamento_item	a,
			pls_pagamento_prestador	b
		where	a.nr_seq_evento		= c.nr_seq_evento
		and	a.nr_seq_pagamento	= b.nr_sequencia
		and	a.nr_seq_evento		= d.nr_sequencia
		and	d.ie_tipo_evento in ('F','G') -- 'Financeiro' e 'Recurso de glosa'
		-- OS 969150 - 07/11/2015 - O tratamento abaixo foi removido visto que havia R$ 1.500,00 de Contas medicas, R$ 7.000,00 de lancamento de provento e R$ 10.000,00 de lancamento de desconto e a base de INSS foi de R$ 7.000,00, porem nao deveria gerar INSS visto que com estes item a base ficaria negativa

		-- Este desconto de R$ 10.000,00 alem de ser utilizado no terceiro union deste cursor afim de calcular uma proporcao entre os tipos de contratacao tambem deve ser somado a base de calculo e nao apenas utilizado como base para calculo de proporcao, creio que a restricao abaixo foi adicionado pois imaginou-se que este

		-- valor de R$ 10.000,00 ja estava sendo somado no terceiro union deste cursor.

		--and	d.ie_natureza		= 'P' -- PROVENTO
		and	c.cd_tributo		= cd_tributo_w
		and	coalesce(c.ie_situacao,'N')	= 'A'
		and	b.nr_sequencia		= nr_seq_pag_prest_w
		and	coalesce(a.ie_apropriar_total, 'N')	= 'N'
		and	((pls_obter_se_prestador_grupo(c.nr_seq_grupo_prestador,b.nr_seq_prestador) = 'S') or (coalesce(c.nr_seq_grupo_prestador::text, '') = ''))
		and	((b.nr_seq_prestador = c.nr_seq_prestador) or (coalesce(c.nr_seq_prestador::text, '') = ''))
		and	((c.nr_seq_tipo_prestador =	(select	max(x.nr_seq_tipo_prestador)
							from	pls_prestador	x
							where	x.nr_sequencia	= b.nr_seq_prestador))
			or (coalesce(c.nr_seq_tipo_prestador::text, '') = ''))
		and	ie_tipo_tributo_w	= 'INSS'
		and	ie_inss_tipo_contrat_w  = 'S'
		and	dt_competencia_w	between coalesce(c.dt_inicio_vigencia, dt_competencia_w - 1) and coalesce(c.dt_fim_vigencia, dt_competencia_w + 1)
		and (coalesce(c.nr_seq_classificacao::text, '') = '' or c.nr_seq_classificacao = nr_seq_prest_classif_w)
		group by a.ie_tipo_contratacao,
			CASE WHEN ie_agrupado_w='S' THEN  0  ELSE a.nr_sequencia END 
		
union all

		-- NA LINHA ABAIXO E EXECUTADO UM CALCULO DE PROPORCAO. ESSE CALCULO E REALIZADO POIS A CONTRIBUICAO DE CADA ITEM DO PAGAMENTO E DIFERENTE UMA DA OUTRA, E PARA INSS A ALIQUOTA VARIA CONFORME O TIPO DE CONTRATACAO.
		select (vl_total_prod_w - vl_total_desconto_w) * (dividir_sem_round((coalesce(sum(d.vl_liberado),0) + CASE WHEN ie_valor_base_trib_nf_w='S' THEN coalesce(sum(d.vl_glosa),0)  ELSE 0 END ),vl_total_prod_w)),
			d.ie_tipo_contratacao,
			CASE WHEN coalesce(d.ie_tipo_contratacao::text, '') = '' THEN ie_sequencia_w WHEN d.ie_tipo_contratacao='CE' THEN  1 WHEN d.ie_tipo_contratacao='CA' THEN  2 WHEN d.ie_tipo_contratacao='CI' THEN  3 WHEN d.ie_tipo_contratacao='I' THEN  4 END  ie_ordem,
			CASE WHEN ie_agrupado_w='S' THEN  0  ELSE a.nr_sequencia END  nr_seq_pag_item
		FROM pls_evento_tributo c, pls_pagamento_prestador b, pls_pagamento_item a, pls_segurado e
LEFT OUTER JOIN pls_conta_medica_resumo d ON (e.nr_sequencia = d.nr_seq_segurado)
WHERE a.nr_sequencia		= d.nr_seq_pag_item and a.nr_seq_evento		= c.nr_seq_evento  and b.nr_sequencia		= a.nr_seq_pagamento and c.cd_tributo		= cd_tributo_w and coalesce(c.ie_situacao,'N')	= 'A' and b.nr_sequencia		= nr_seq_pag_prest_w and ((pls_obter_se_prestador_grupo(c.nr_seq_grupo_prestador,b.nr_seq_prestador) = 'S') or (coalesce(c.nr_seq_grupo_prestador::text, '') = '')) and ((b.nr_seq_prestador = c.nr_seq_prestador) or (coalesce(c.nr_seq_prestador::text, '') = '')) and ((c.nr_seq_tipo_prestador =	(select	max(x.nr_seq_tipo_prestador)
							from	pls_prestador	x
							where	x.nr_sequencia	= b.nr_seq_prestador)) or (coalesce(c.nr_seq_tipo_prestador::text, '') = '')) and ie_tipo_tributo_w	= 'INSS' and ie_inss_tipo_contrat_w  = 'S' and ((coalesce(d.ie_situacao::text, '') = '') or (d.ie_situacao != 'I')) and dt_competencia_w between coalesce(c.dt_inicio_vigencia, dt_competencia_w - 1) and coalesce(c.dt_fim_vigencia, dt_competencia_w + 1) and (coalesce(c.nr_seq_classificacao::text, '') = '' or c.nr_seq_classificacao = nr_seq_prest_classif_w) group by d.ie_tipo_contratacao,
			CASE WHEN ie_agrupado_w='S' THEN  0  ELSE a.nr_sequencia END )
	where	vl_evento <> 0
	order by ie_ordem;

/* Obter valores retidos de INSS com aliquota a maior para estornar */

C04 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_venc_trib_a_maior,
		a.vl_base_calculo vl_base_calculo_a_maior
	from	pls_lote_pagamento		e,
		pls_prestador			d,
		pls_pagamento_prestador		c,
		pls_pag_prest_vencimento	b,
		pls_pag_prest_venc_trib		a,
		tributo				z
	where	z.cd_tributo			= a.cd_tributo
	and	a.nr_seq_vencimento		= b.nr_sequencia
	and	b.nr_seq_pag_prestador		= c.nr_sequencia
	and	c.nr_seq_prestador		= d.nr_sequencia
	and	e.nr_sequencia			= c.nr_seq_lote
	and	d.cd_pessoa_fisica		= cd_pessoa_fisica_w
	and	z.ie_tipo_tributo		= 'INSS'
	and	ie_data_ref_tributo_w		= 'C' /*Competencia */
	and	e.dt_mes_competencia between trunc(dt_tributo_w,'month') and fim_dia(last_day(dt_tributo_w))
	and	a.pr_tributo > pr_aliquota_w
	and	b.nr_sequencia <> nr_seq_vencimento_p /* nao buscar do mesmo pagamento */
	and	vl_base_restante_w > 0
	and	coalesce(a.nr_seq_trib_estornado::text, '') = ''
	and (SELECT	coalesce(sum(x.vl_base_calculo),0)
		from	pls_pag_prest_venc_trib x
		where	x.nr_seq_trib_estornado	= a.nr_sequencia) < a.vl_base_calculo
	
union all

	select	a.nr_sequencia nr_seq_venc_trib_a_maior,
		a.vl_base_calculo vl_base_calculo_a_maior
	from	pls_lote_pagamento		e,
		pls_prestador			d,
		pls_pagamento_prestador		c,
		pls_pag_prest_vencimento	b,
		pls_pag_prest_venc_trib		a,
		tributo				z
	where	z.cd_tributo			= a.cd_tributo
	and	a.nr_seq_vencimento		= b.nr_sequencia
	and	b.nr_seq_pag_prestador		= c.nr_sequencia
	and	c.nr_seq_prestador		= d.nr_sequencia
	and	e.nr_sequencia			= c.nr_seq_lote
	and	d.cd_pessoa_fisica		= cd_pessoa_fisica_w
	and	z.ie_tipo_tributo		= 'INSS'
	and	ie_data_ref_tributo_w		= 'V' /* Vencimento */
	and	b.dt_vencimento between trunc(dt_tributo_w,'month') and fim_dia(last_day(dt_tributo_w))
	and	a.pr_tributo > pr_aliquota_w
	and	b.nr_sequencia <> nr_seq_vencimento_p /* nao buscar do mesmo pagamento */
	and	vl_base_restante_w > 0
	and	coalesce(a.nr_seq_trib_estornado::text, '') = ''
	and (select	coalesce(sum(x.vl_base_calculo),0)
		from	pls_pag_prest_venc_trib x
		where	x.nr_seq_trib_estornado	= a.nr_sequencia) < a.vl_base_calculo;

C05 CURSOR FOR
	SELECT	b.cd_tributo,
		b.vl_base_calculo,
		b.vl_tributo,
		b.tx_tributo,
		b.vl_reducao_base,
		b.vl_trib_nao_retido,
		b.vl_base_nao_retido,
		b.vl_trib_adic,
		b.vl_base_adic,
		b.vl_reducao,
		b.cd_darf,
		b.ie_pago_prev,
		b.ie_periodicidade
	from	nota_fiscal_trib	b,
		nota_fiscal		a
	where	a.nr_sequencia		= b.nr_sequencia
	and	a.nr_seq_pgto_prest	= nr_seq_pag_prest_w
	and	a.ie_situacao not in ('2','3','9')
	and	not exists (SELECT	1
				from	pls_pagamento_nota	x
				where	x.nr_seq_nota_fiscal	= a.nr_sequencia);

C07 CURSOR FOR
	SELECT	a.vl_base_calculo,
		a.pr_tributo,
		a.nr_sequencia,
		a.vl_imposto,
		b.cd_tributo,
		a.ie_tipo_contratacao
	from	tributo b,
		pls_pag_prest_venc_trib a
	where	a.nr_seq_vencimento	= nr_seq_vencimento_p
	and	a.cd_tributo		= b.cd_tributo
	and	b.ie_tipo_tributo	= 'INSS'
	and	a.ie_pago_prev		= 'V'
	and	ie_inss_tipo_contrat_w	= 'S'
	and	vl_base_inss_retido_w	<> 0
	and	a.vl_base_calculo	> 0
	order 	by a.pr_tributo;

c08 CURSOR(	nr_seq_vencimento_cp		pls_pag_prest_venc_trib.nr_seq_vencimento%type,
		cd_tributo_cp			pls_pag_prest_venc_trib.cd_tributo%type,
		ie_tipo_contratacao_cp		pls_pag_prest_venc_trib.ie_tipo_contratacao%type,
		vl_evento_cp			bigint,
		ie_forma_retencao_inss_ir_cp	pls_parametro_pagamento.ie_forma_retencao_inss_ir%type) FOR
	SELECT	nr_sequencia,
		vl_base_calculo,
		vl_imposto,
		vl_base_producao,
		pr_tributo,
		(vl_evento_cp * vl_imposto) / CASE WHEN vl_base_calculo - vl_base_adic=0 THEN  1  ELSE vl_base_calculo - vl_base_adic END  vl_evento
	from	pls_pag_prest_venc_trib
	where	nr_seq_vencimento = nr_seq_vencimento_cp
	and	cd_tributo = cd_tributo_cp
	and	coalesce(ie_tipo_contratacao, '-1') = coalesce(ie_tipo_contratacao_cp, '-1')
	and	ie_forma_retencao_inss_ir_cp = 'LM'
	and	ie_pago_prev not in ('R')
	and	coalesce(nr_seq_trib_estornado::text, '') = ''
	
union all

	SELECT	nr_sequencia,
		vl_base_calculo,
		vl_imposto,
		vl_base_producao,
		pr_tributo,
		(vl_evento_cp * vl_imposto) / CASE WHEN vl_base_producao=0 THEN  1  ELSE vl_base_producao END  vl_evento
	from	pls_pag_prest_venc_trib
	where	nr_seq_vencimento = nr_seq_vencimento_cp
	and	cd_tributo = cd_tributo_cp
	and	coalesce(ie_tipo_contratacao, '-1') = coalesce(ie_tipo_contratacao_cp, '-1')
	and	ie_forma_retencao_inss_ir_cp in ('SE','ME')
	and	ie_pago_prev not in ('R')
	and	coalesce(nr_seq_trib_estornado::text, '') = '';

c09 CURSOR(	nr_seq_venc_trib_pc		pls_pag_item_trib.nr_seq_venc_trib%type,
		ie_forma_retencao_inss_ir_cp	pls_parametro_pagamento.ie_forma_retencao_inss_ir%type) FOR
	SELECT	b.nr_sequencia nr_seq_pag_item_trib,
		(b.vl_evento_origem * a.vl_imposto) / CASE WHEN a.vl_base_calculo - a.vl_base_adic=0 THEN  1  ELSE a.vl_base_calculo - a.vl_base_adic END  vl_evento
	from	pls_pag_item_trib	b,
		pls_pag_prest_venc_trib	a
	where	a.nr_sequencia		= b.nr_seq_venc_trib
	and	b.nr_seq_venc_trib 	= nr_seq_venc_trib_pc
	and	ie_forma_retencao_inss_ir_cp = 'LM'
	
union all

	SELECT	b.nr_sequencia nr_seq_pag_item_trib,
		(b.vl_evento_origem * a.vl_imposto) / CASE WHEN a.vl_base_producao=0 THEN  1  ELSE a.vl_base_producao END  vl_evento
	from	pls_pag_item_trib	b,
		pls_pag_prest_venc_trib	a
	where	a.nr_sequencia		= b.nr_seq_venc_trib
	and	b.nr_seq_venc_trib 	= nr_seq_venc_trib_pc
	and	ie_forma_retencao_inss_ir_cp in ('SE','ME');
	
c10 CURSOR(	nr_seq_vencimento_cp		pls_pag_prest_venc_trib.nr_seq_vencimento%type ) FOR
	SELECT	nr_sequencia,
		vl_base_producao,
		vl_base_calculo,
		pr_tributo,
		vl_imposto,
		nr_seq_trib_estornado
	from	pls_pag_prest_venc_trib
	where	nr_seq_vencimento = nr_seq_vencimento_cp
	and	(nr_seq_trib_estornado IS NOT NULL AND nr_seq_trib_estornado::text <> '');
	
c11 CURSOR(	nr_seq_trib_estornado_cp		pls_pag_prest_venc_trib.nr_seq_trib_estornado%type ) FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_pagamento,
		a.cd_centro_custo,
		a.cd_classif_cred,
		a.cd_classif_deb,
		a.cd_conta_cred,
		a.cd_conta_deb,
		a.cd_historico,
		a.ie_tipo_contratacao,
		a.nr_lote_contabil,
		a.nr_seq_esquema,
		a.vl_evento,
		(a.vl_evento_origem - (	SELECT	abs(coalesce(sum(x.vl_evento_origem),0))
					from	pls_pag_item_trib x
					where	x.nr_seq_trib_estornado	= a.nr_sequencia)) vl_evento_origem
	from	pls_pag_item_trib	a
	where	a.nr_seq_venc_trib	= nr_seq_trib_estornado_cp
	and (	select	abs(coalesce(sum(x.vl_evento_origem),0))
			from	pls_pag_item_trib x
			where	x.nr_seq_trib_estornado	= a.nr_sequencia) < a.vl_evento_origem
	order by a.nr_sequencia;
	
C99 CURSOR( nr_seq_vencimento_pc	pls_pag_prest_vencimento.nr_sequencia%type) FOR
	SELECT	v.vl_base_calculo,
		v.pr_tributo,
		v.nr_sequencia,
		t.cd_tributo,
		t.ie_tipo_tributo,
		v.vl_imposto
	from	pls_pag_prest_venc_trib v,
		tributo t
	where	v.nr_seq_vencimento	= nr_seq_vencimento_pc
	and	t.cd_tributo		= v.cd_tributo
	and	t.ie_forma_arred_ops	= 'S'
	and	v.vl_base_calculo	> 0
	and	v.pr_tributo		> 0
	and	v.vl_imposto		!= 0
	and	v.ie_pago_prev		!= 'R';
		

BEGIN
select	CASE WHEN count(1)=0 THEN  'N'  ELSE 'S' END
into STRICT	ie_inss_tipo_contrat_w
from	tributo_conta_pagar
where	(ie_tipo_contratacao IS NOT NULL AND ie_tipo_contratacao::text <> '')
and	clock_timestamp() between trunc(dt_inicio_vigencia) and dt_fim_vigencia  LIMIT 1;

select	a.vl_vencimento,
	c.cd_estabelecimento,
	a.dt_vencimento,
	coalesce(c.dt_ref_tributo, c.dt_mes_competencia),
	d.cd_cgc,
	d.cd_pessoa_fisica,
	b.nr_seq_prestador,
	coalesce(c.dt_mes_competencia, a.dt_vencimento),
	obter_cnpj_raiz(d.cd_cgc),
	b.nr_sequencia,
	b.vl_pagamento,
	e.cd_empresa,
	a.ie_proximo_pgto,
	a.ie_saldo_negativo,
	c.dt_mes_competencia,
	d.nr_seq_tipo_prestador,
	c.nr_sequencia,
	d.nr_seq_classificacao
into STRICT	vl_vencimento_w,
	cd_estabelecimento_w,
	dt_venc_titulo_w,
	dt_emissao_w,
	cd_cgc_w,
	cd_pessoa_fisica_w,
	nr_seq_prestador_w,
	dt_tributo_w,
	cd_cnpj_raiz_w,
	nr_seq_pag_prest_w,
	vl_pagamento_w,
	cd_empresa_w,
	ie_proximo_pgto_w,
	ie_saldo_negativo_venc_w,
	dt_competencia_w,
	nr_seq_tipo_prestador_w,
	nr_seq_lote_w,
	nr_seq_prest_classif_w
from	estabelecimento 		e,
	pls_prestador			d,
	pls_periodo_pagamento		p,
	pls_lote_pagamento		c,
	pls_pagamento_prestador		b,
	pls_pag_prest_vencimento	a
where	c.cd_estabelecimento	= e.cd_estabelecimento
and	a.nr_seq_pag_prestador	= b.nr_sequencia
and	b.nr_seq_prestador	= d.nr_sequencia
and	b.nr_seq_lote		= c.nr_sequencia
and	p.nr_sequencia		= c.nr_seq_periodo
and	a.nr_sequencia		= nr_seq_vencimento_p;

select	coalesce(max(ie_saldo_negativo), 'PP'),
	coalesce(max(ie_forma_retencao_inss_ir), 'ME'),
	coalesce(max(ie_seq_calculo_inss), 'O'),
	coalesce(max(ie_data_tributos), 'R')
into STRICT	ie_saldo_negativo_param_w,
	ie_forma_retencao_inss_ir_w,
	ie_seq_calculo_inss_w,
	ie_data_tributos_w
from	pls_parametro_pagamento
where	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_forma_retencao_inss_ir_w = 'LM') then -- Lote de retencao mensal (rio preto)
	select	coalesce(sum(vl_item), 0)
	into STRICT	vl_itens_w
	from	pls_pagamento_item
	where	nr_seq_pagamento	= nr_seq_pag_prest_w
	and	vl_item			> 0;
else	-- Maringa
	select	coalesce(sum(vl_item), 0)
	into STRICT	vl_itens_w
	from	pls_pagamento_item
	where	nr_seq_pagamento	= nr_seq_pag_prest_w;
end if;

select	CASE WHEN ie_data_tributos_w='R' THEN  coalesce(dt_venc_titulo_w,dt_tributo_w)  ELSE clock_timestamp() END
into STRICT	dt_calculo_w
;

select	coalesce(max(ie_saldo_negativo), 'CP')
into STRICT	ie_saldo_negativo_prest_w
from	pls_prestador_pagto
where	nr_seq_prestador	= nr_seq_prestador_w;

if (ie_saldo_negativo_venc_w IS NOT NULL AND ie_saldo_negativo_venc_w::text <> '') and (ie_saldo_negativo_venc_w <> 'CP') then /* Se no vencimento nao estiver como conforme prestador, pega do vencimento */
	ie_saldo_negativo_w	:= ie_saldo_negativo_venc_w;
elsif (ie_saldo_negativo_prest_w = 'CP') then /* Se no prestador nao tratar ou estiver conforme parametro, pega regra geral */
	ie_saldo_negativo_w	:= ie_saldo_negativo_param_w;
else
	ie_saldo_negativo_w	:= ie_saldo_negativo_prest_w;
end if;

select	max(CASE WHEN count(1)=0 THEN  'N'  ELSE 'PP' END )
into STRICT	ie_proximo_pgto_eve_w
from	pls_evento		b,
	pls_pagamento_item 	a
where	b.nr_sequencia 		= a.nr_seq_evento
and	b.ie_natureza		= 'D'
and	((b.ie_saldo_negativo	= 'PP') or (b.ie_saldo_negativo = 'CP' and ie_saldo_negativo_prest_w = 'PP') or (b.ie_saldo_negativo = 'CP' and ie_saldo_negativo_prest_w = 'CP' and ie_saldo_negativo_param_w = 'PP'))
and	a.nr_seq_pagamento 	= nr_seq_pag_prest_w
group by vl_item
having	vl_item < 0;

if (ie_saldo_negativo_w = 'PP') and (ie_proximo_pgto_eve_w = 'PP') then
	ie_proximo_pgto_w	:= 'S';
end if;

select	max(ie_tipo_tributacao)
into STRICT	ie_tipo_tributacao_w
from	pessoa_juridica
where	cd_cgc	= cd_cgc_w;

if (ie_seq_calculo_inss_w = 'O') then
	ie_sequencia_w	:= 999;
else
	ie_sequencia_w	:= 0;
end if;

open C02;
loop
fetch C02 into
	cd_tributo_pf_w,
	vl_base_tributo_pf_w,
	vl_tributo_pf_w,
	cd_pessoa_fisica_pf_w,
	ie_tipo_data_w,
	ie_pago_prev_w,
	nr_seq_pessoa_trib_w,
	ie_tipo_tributo_w,
	ie_data_ref_tributo_w,
	vl_base_restante_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	pr_aliquota_w	:= 0;
	
	if (ie_tipo_data_w = 'E') then
		dt_imposto_w := trunc(dt_emissao_w, 'month');
	else
		dt_imposto_w := trunc(dt_venc_titulo_w, 'month');
	end if;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	tributo				e,
		pls_pag_prest_venc_trib		d,
		pls_pag_prest_vencimento	c,
		pls_pagamento_prestador		b,
		pls_prestador			a
	where	a.nr_sequencia			= b.nr_seq_prestador
	and	c.nr_seq_pag_prestador		= b.nr_sequencia
	and	d.nr_seq_vencimento		= c.nr_sequencia
	and	d.cd_tributo			= e.cd_tributo
	and	e.ie_tipo_tributo		= ie_tipo_tributo_w
	and	a.cd_pessoa_fisica		= cd_pessoa_fisica_pf_w
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	trunc(d.dt_imposto,'month')	= dt_imposto_w
	and	d.ie_pago_prev			= ie_pago_prev_w
	and	b.nr_sequencia <> nr_seq_pag_prest_w  LIMIT 1;
	
	if (qt_registro_w = 0) then
		insert into pls_pag_prest_venc_trib(
			nr_sequencia, cd_tributo, dt_atualizacao,
			dt_atualizacao_nrec, ie_pago_prev, nm_usuario,
			nm_usuario_nrec, dt_imposto, nr_seq_vencimento,
			pr_tributo, vl_base_adic, vl_base_calculo,
			vl_base_nao_retido, vl_imposto, vl_nao_retido,
			vl_trib_adic, vl_base_producao
		) values (
			nextval('pls_pag_prest_venc_trib_seq'), cd_tributo_pf_w, clock_timestamp(),
			clock_timestamp(), ie_pago_prev_w, nm_usuario_p,
			nm_usuario_p, trunc(CASE WHEN ie_tipo_data_w='E' THEN  dt_emissao_w WHEN ie_tipo_data_w='V' THEN  dt_venc_titulo_w END , 'dd'), nr_seq_vencimento_p,
			0, 0, vl_base_tributo_pf_w,
			0, vl_tributo_pf_w, 0,
			0, 0);
			
		update	pessoa_fisica_trib
		set	nr_seq_lote_pgto	= nr_seq_lote_w
		where	nr_sequencia		= nr_seq_pessoa_trib_w;
	end if;
	end;
end loop;
close C02;

/* OS 207298 -  Tratar valores retidos  do prestador */

select	count(1)
into STRICT	qt_imposto_mes_w
from	pls_prestador_tributo
where	nr_seq_prestador		= nr_seq_prestador_w
and	trunc(dt_referencia, 'month')	= trunc(dt_emissao_w, 'month')  LIMIT 1;

if (qt_imposto_mes_w > 0) then
	select	trunc(dt_referencia, 'dd'),
		cd_tributo,
		vl_tributo,
		vl_base_calculo,
		ds_emp_retencao
	into STRICT	dt_ref_tributo_w,
		cd_tributo_ret_w,
		vl_tributo_ret_w,
		vl_base_calculo_ret_w,
		ds_emp_retencao_ret_w
	from	pls_prestador_tributo
	where	nr_seq_prestador		= nr_seq_prestador_w
	and	trunc(dt_referencia,'month')	= trunc(dt_emissao_w, 'month');

	insert into pls_pag_prest_venc_trib(
		nr_sequencia, nr_seq_vencimento, cd_tributo,
		ie_pago_prev, dt_atualizacao, nm_usuario,
		dt_atualizacao_nrec, nm_usuario_nrec, dt_imposto,
		vl_base_calculo, vl_imposto, vl_nao_retido,
		vl_base_nao_retido, vl_trib_adic, vl_base_adic,
		pr_tributo, vl_base_producao
	) values (
		nextval('pls_pag_prest_venc_trib_seq'), nr_seq_vencimento_p, cd_tributo_ret_w,
		'R', clock_timestamp(), nm_usuario_p,
		clock_timestamp(), nm_usuario_p, dt_ref_tributo_w,
		vl_base_calculo_ret_w, 0, 0,
		0, 0, 0,
		0, 0
	);
end if;

vl_trib_acum_w	:= 0;

/* Mudar o pagamento vinculado as notas */

update	nota_fiscal	a
set	nr_seq_pgto_prest	= nr_seq_pag_prest_w
where	coalesce(nr_seq_pgto_prest::text, '') = ''
and	exists (SELECT	1
		from	pls_pagamento_nota x
		where	x.nr_seq_nota_fiscal 	= a.nr_sequencia
		and	x.nr_seq_pagamento	= nr_seq_pag_prest_w);

/* Tratar impostos da nota vinculada - Quando vinculado antes da geracao dos vencimentos */

open C05;
loop
fetch C05 into
	cd_tributo_nf_w,
	vl_base_calculo_nf_w,
	vl_tributo_nf_w,
	tx_tributo_nf_w,
	vl_reducao_base_nf_w,
	vl_trib_nao_retido_nf_w,
	vl_base_nao_retido_nf_w,
	vl_trib_adic_nf_w,
	vl_base_adic_nf_w,
	vl_reducao_nf_w,
	cd_darf_nf_w,
	ie_pago_prev_nf_w,
	ie_periodicidade_nf_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin

	insert into pls_pag_prest_venc_trib(
		nr_sequencia, nr_seq_vencimento, cd_tributo,
		ie_pago_prev, dt_atualizacao, nm_usuario,
		dt_atualizacao_nrec, nm_usuario_nrec, dt_imposto,
		vl_base_calculo, vl_imposto, vl_nao_retido,
		vl_base_nao_retido, vl_trib_adic, vl_base_adic,
		pr_tributo, ie_periodicidade, vl_base_producao
	) values (
		nextval('pls_pag_prest_venc_trib_seq'), nr_seq_vencimento_p, cd_tributo_nf_w,
		coalesce(ie_pago_prev_nf_w,'V'), clock_timestamp(), nm_usuario_p,
		clock_timestamp(), nm_usuario_p, dt_emissao_w,
		vl_base_calculo_nf_w, vl_tributo_nf_w, vl_trib_nao_retido_nf_w,
		vl_base_nao_retido_nf_w, vl_trib_adic_nf_w, vl_base_adic_nf_w,
		tx_tributo_nf_w, ie_periodicidade_nf_w, CASE WHEN ie_forma_retencao_inss_ir_w='LM' THEN  vl_base_nao_retido_nf_w  ELSE vl_base_adic_nf_w END
	);

	vl_trib_acum_w	:= vl_trib_acum_w + vl_tributo_nf_w;
	end;
end loop;
close C05;

open C01;
loop
fetch C01 into
	cd_tributo_w,
	ie_vencimento_w,
	ie_tipo_tributo_w,
	ie_apuracao_piso_w,
	ie_cnpj_w,
	ie_restringe_estab_w,
	ie_venc_pls_pag_prod_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	-- OS 531858 - OBTER SE "CALCULA TRIB VALOR BRUTO PGTO"
	ie_valor_base_trib_nf_w := pls_obter_regra_prest_trib(nr_seq_prestador_w, cd_tributo_w, ie_valor_base_trib_nf_w);

	-- os selects abaixo so precisam ser executados quando for INSS
	if (ie_tipo_tributo_w = 'INSS') then

		-- SOMA VALORES LIBERADOS, PROVENIENTES DE CONTAS MEDICAS. (APENAS EM CASOS ONDE O CURSOR TRAZ TRIBUTO INSS)
		select	coalesce(sum(d.vl_liberado), 0) + CASE WHEN ie_valor_base_trib_nf_w='S' THEN  coalesce(sum(d.vl_glosa), 0)  ELSE 0 END
		into STRICT	vl_total_prod_w
		FROM pls_evento_tributo c, pls_pagamento_prestador b, pls_pagamento_item a, pls_segurado e
LEFT OUTER JOIN pls_conta_medica_resumo d ON (e.nr_sequencia = d.nr_seq_segurado)
WHERE a.nr_sequencia		= d.nr_seq_pag_item and a.nr_seq_evento		= c.nr_seq_evento  and b.nr_sequencia		= a.nr_seq_pagamento and c.cd_tributo		= cd_tributo_w and coalesce(c.ie_situacao,'N')	= 'A' and b.nr_sequencia		= nr_seq_pag_prest_w and coalesce(a.ie_apropriar_total, 'N')	= 'N' and ((pls_obter_se_prestador_grupo(c.nr_seq_grupo_prestador,b.nr_seq_prestador) = 'S') or (coalesce(c.nr_seq_grupo_prestador::text, '') = '')) and ((b.nr_seq_prestador = c.nr_seq_prestador) or (coalesce(c.nr_seq_prestador::text, '') = '')) and ((c.nr_seq_tipo_prestador	=	(SELECT	max(x.nr_seq_tipo_prestador)
								from	pls_prestador  x
								where	x.nr_sequencia  = b.nr_seq_prestador)) or (coalesce(c.nr_seq_tipo_prestador::text, '') = '')) and ie_inss_tipo_contrat_w	= 'S' and dt_competencia_w between coalesce(c.dt_inicio_vigencia, dt_competencia_w - 1) and coalesce(c.dt_fim_vigencia, dt_competencia_w + 1) and (coalesce(c.nr_seq_classificacao::text, '') = '' or c.nr_seq_classificacao = nr_seq_prest_classif_w);

		-- SOMA OS VALORES DOS ITENS NAO PROVENIENTES DE CONTAS MEDICAS, E QUE O CAMPO 'DESCONTAR BASE CALCULO DOS TRIBUTOS POR TIPO DE CONTRATACAO' NO EVENTO ESTEJA MARCADO. APENAS EM CASOS ONDE O CURSOR TRAZ TRIBUTO INSS)
		select	coalesce(sum(a.vl_item), 0) + CASE WHEN ie_valor_base_trib_nf_w='S' THEN  coalesce(sum(a.vl_glosa), 0)  ELSE 0 END
		into STRICT	vl_total_desconto_w
		from	pls_evento		f,
			pls_evento_tributo	c,
			pls_pagamento_item	a,
			pls_pagamento_prestador	b
		where	a.nr_seq_evento		= c.nr_seq_evento
		and	a.nr_seq_pagamento	= b.nr_sequencia
		and	f.nr_sequencia		= c.nr_seq_evento
		and	c.cd_tributo		= cd_tributo_w
		and	coalesce(c.ie_situacao,'N')	= 'A'
		and	f.ie_tipo_evento <> 'P'
		and	b.nr_sequencia		= nr_seq_pag_prest_w
		and	coalesce(a.ie_apropriar_total, 'N')	= 'N'
		and	((pls_obter_se_prestador_grupo(c.nr_seq_grupo_prestador,b.nr_seq_prestador) = 'S') or (coalesce(c.nr_seq_grupo_prestador::text, '') = ''))
		and	((b.nr_seq_prestador = c.nr_seq_prestador) or (coalesce(c.nr_seq_prestador::text, '') = ''))
		and	((c.nr_seq_tipo_prestador	=	(SELECT	max(x.nr_seq_tipo_prestador)
								from	pls_prestador  x
								where	x.nr_sequencia	= b.nr_seq_prestador)) or (coalesce(c.nr_seq_tipo_prestador::text, '') = ''))
		and	ie_inss_tipo_contrat_w	= 'S'
		and	coalesce(f.ie_desc_trib_tipo_contrat, 'N') = 'S'
		and	dt_competencia_w between coalesce(c.dt_inicio_vigencia, dt_competencia_w - 1) and coalesce(c.dt_fim_vigencia, dt_competencia_w + 1)
		and (coalesce(c.nr_seq_classificacao::text, '') = '' or c.nr_seq_classificacao = nr_seq_prest_classif_w);
	end if;

	vl_total_desconto_w := abs(vl_total_desconto_w);
	ie_agrupado_w := 'S';

	open C03;
	loop
	fetch C03 into
		vl_evento_w,
		ie_tipo_contratacao_w,
		ie_ordem_w,
		nr_seq_pag_item_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		vl_base_calculo_w := vl_evento_w + abs(vl_base_estorno_inss_w);

		if (ie_tipo_tributo_w in ('IR','IRPF')) then
			if (ie_proximo_pgto_w = 'S') and (vl_evento_w < 0) then
				vl_base_calculo_w	:= 0;
			end if;

			vl_total_eventos_w	:= vl_base_calculo_w;
		end if;

		pr_aliquota_w	:= 0;

		if (vl_evento_w > 0) then
			SELECT * FROM obter_dados_trib_tit_pagar(	cd_tributo_w, cd_estabelecimento_w, cd_cgc_w, cd_pessoa_fisica_w, cd_beneficiario_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, dt_calculo_w, cd_variacao_w, ie_periodicidade_w, null, null, null, null, ie_tipo_contratacao_w, null, nr_seq_regra_trib_w, null, 0, nr_seq_classe_w, cd_tipo_baixa_neg_w, vl_base_calculo_w, 'S', null, null, nr_seq_tipo_prestador_w, nr_seq_prest_classif_w) INTO STRICT cd_beneficiario_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, cd_variacao_w, ie_periodicidade_w, nr_seq_regra_trib_w, nr_seq_classe_w, cd_tipo_baixa_neg_w;

			select	coalesce(max(pr_base_calculo),0),
				coalesce(max(pr_reducao_base),0)
			into STRICT	pr_base_calculo_w,
				pr_reducao_base_w
			from 	tributo_conta_pagar
			where	nr_sequencia = nr_seq_regra_trib_w;

			if (pr_base_calculo_w <> 0) and (ie_tipo_tributo_w = 'ISS') then	-- Diether 19/06/2012, OS 459634, incluido este tratamento wheb nao recomenda
				vl_base_calculo_w := vl_base_calculo_w * dividir_sem_round((pr_base_calculo_w)::numeric, 100);
			end if;

			if (pr_aliquota_w > 0) then

				if (ie_vencimento_w = 'V') then
					dt_vencimento_w	:= coalesce(dt_venc_titulo_w,clock_timestamp());
				elsif (ie_vencimento_w = 'C') then
					dt_vencimento_w	:= coalesce(dt_venc_titulo_w,coalesce(dt_emissao_w,clock_timestamp()));
				else
					dt_vencimento_w	:= coalesce(dt_emissao_w,clock_timestamp());
				end if;

				if (ie_venc_pls_pag_prod_w IS NOT NULL AND ie_venc_pls_pag_prod_w::text <> '') then
					if (ie_venc_pls_pag_prod_w = 'C') then
						dt_vencimento_w	:= dt_emissao_w;
					else
						dt_vencimento_w	:= dt_venc_titulo_w;
					end if;
				end if;

				if (ie_tipo_tributo_w in ('PISCOFINSCSLL','COFINS','COFINSST','CSLL','PIS','PISST')) then	/* Edgar ,27/05/2013, OS 592607, PIS/COFINS/CSLL nao retem pela competencia, mas sim pelo pagamento, portanto, deve seguir as regras aciam */
					dt_tributo_w	:= dt_venc_titulo_w;
				else
					dt_tributo_w	:= coalesce(dt_vencimento_w,dt_competencia_w);
				end if;

				if (cd_cond_pagto_w IS NOT NULL AND cd_cond_pagto_w::text <> '') then
					SELECT * FROM calcular_vencimento(cd_estabelecimento_w, cd_cond_pagto_w, dt_vencimento_w, qt_venc_w, ds_venc_w) INTO STRICT qt_venc_w, ds_venc_w;
					if (qt_venc_w = 1) then
						dt_vencimento_w	:= to_date(substr(ds_venc_w,1,10),'dd/mm/yyyy');
					end if;
				end if;

				SELECT * FROM pls_pag_prod_obter_val_trib(	ie_apuracao_piso_w, ie_cnpj_w, cd_pessoa_fisica_w, cd_cgc_w, cd_cnpj_raiz_w, ie_restringe_estab_w, cd_empresa_w, cd_tributo_w, dt_tributo_w, vl_soma_trib_nao_retido_w, vl_soma_base_nao_retido_w, vl_soma_trib_adic_w, vl_soma_base_adic_w, vl_trib_anterior_w, vl_total_base_w, vl_reducao_w, cd_estabelecimento_w, nm_usuario_p) INTO STRICT vl_soma_trib_nao_retido_w, vl_soma_base_nao_retido_w, vl_soma_trib_adic_w, vl_soma_base_adic_w, vl_trib_anterior_w, vl_total_base_w, vl_reducao_w;

				select	coalesce(sum(vl_imposto),0),
					coalesce(sum(vl_base_calculo),0)
				into STRICT	vl_pago_w,
					vl_base_calculo_paga_w
				from	pls_pag_prest_venc_trib
				where	nr_seq_vencimento	= nr_seq_vencimento_p
				and	cd_tributo		= cd_tributo_w
				and	ie_pago_prev		= 'P';

				-- OS 959214 - jlsilva inclui novamente o campo vl_base_retido_outro_w que havia sido retirado pois no Marcio Cunha

				-- estava gerando valor de INSS mesmo quando no cadastro da pessoa fisica estava informado que o imposto seria retido em outra empresa
				select	coalesce(sum(CASE WHEN b.nr_sequencia=nr_seq_vencimento_p THEN a.vl_base_calculo  ELSE 0 END ),0),
					coalesce(sum(CASE WHEN b.nr_sequencia=nr_seq_vencimento_p THEN 0  ELSE a.vl_base_calculo END ),0)
				into STRICT	vl_base_retido_outro_w,
					vl_base_ret_outro_anterior_w -- Eduardo e Francisco 27/12/2013, separamos pois a base anterior retida em outra empresa tem que ser tratada separada
				from	tributo				z,
					pls_pag_prest_venc_trib 	a,
					pls_pag_prest_vencimento 	b,
					pls_pagamento_prestador 	c,
					pls_lote_pagamento		d
				where	exists (SELECT	1
						from	pls_prestador x,
							pls_pagamento_prestador y,
							pls_pag_prest_vencimento z
						where	z.nr_sequencia = a.nr_seq_vencimento
						and	z.nr_seq_pag_prestador = y.nr_sequencia
						and	y.nr_seq_prestador = x.nr_sequencia
						and	x.cd_pessoa_fisica = cd_pessoa_fisica_w
						
union all

						SELECT	1
						from	pls_prestador x,
							pls_pagamento_prestador y,
							pls_pag_prest_vencimento z
						where	z.nr_sequencia = a.nr_seq_vencimento
						and	z.nr_seq_pag_prestador = y.nr_sequencia
						and	y.nr_seq_prestador = x.nr_sequencia
						and	x.cd_cgc = cd_cgc_w)
				and	d.nr_sequencia 		= c.nr_seq_lote
				and	c.nr_sequencia		= b.nr_seq_pag_prestador
				and	b.nr_sequencia		= a.nr_seq_vencimento
				and	a.cd_tributo		= z.cd_tributo
				and	z.ie_tipo_tributo	= ie_tipo_tributo_w
				and	trunc(CASE WHEN ie_vencimento_w='R' THEN  d.dt_mes_competencia  ELSE a.dt_imposto END , 'month') = trunc(dt_tributo_w, 'month')
				and	a.ie_pago_prev		= 'R';

				-- jtonon - OS 2031816 - O select abaixo foi adicionado visto que, no modulo 'Titulos a Pagar / Impostos', a acao de menu 'Gerar tributos titulo' busca as 'cartas' cadastradas em 'Cadastro Completo de Pessoas / Tributos', porem, nao alimenta nenhuma flag 'avisando' que a carta ja foi utilizada, assim,

				--		aqui no pagamento precisamos fazer com que estas cartas que entraram em titulos sejam descontadas da variavel 'vl_base_retido_outro_w'
				select	coalesce(sum(dd.vl_base_calculo), 0)
				into STRICT	vl_base_calculo_tit_w
				from	titulo_pagar_imposto	dd,
					titulo_pagar		cc,
					tributo			tt
				where	dd.nr_titulo		= cc.nr_titulo
				and	dd.cd_tributo		= tt.cd_tributo
				and	cc.cd_pessoa_fisica	= cd_pessoa_fisica_w
				and	tt.ie_tipo_tributo	= ie_tipo_tributo_w
				and 	dd.ie_pago_prev <> 'V'
				and	cc.ie_situacao <> 'C'
				and	trunc(dd.dt_imposto, 'month') = trunc(dt_tributo_w, 'month')
				and exists (	SELECT	1
						from	titulo_pagar_imposto	ee,
							tributo			ff
						where	ee.cd_tributo		= ff.cd_tributo
						and	ee.nr_titulo		= cc.nr_titulo
						and	ff.ie_tipo_tributo	= tt.ie_tipo_tributo
						and	ee.ie_pago_prev		= 'V'
						and	ee.vl_base_calculo > 0
						and	trunc(dd.dt_imposto, 'month') = trunc(dt_tributo_w, 'month'));

				if (vl_base_calculo_tit_w <= vl_base_retido_outro_w) then
					vl_base_retido_outro_w	:= vl_base_retido_outro_w - vl_base_calculo_tit_w;
				end if;

				/* Se o valor retido em outra empresa entrou em vencimento anterior,
				o mesmo deve ser somado a base de calculo ja retida (total) */
				if (vl_base_ret_outro_anterior_w > 0) then
					vl_total_base_w	:= vl_total_base_w + vl_base_ret_outro_anterior_w;
				end if;

				-- se for INSS e a forma de retencao de INSS e semanal
				if (ie_tipo_tributo_w = 'INSS') and (ie_forma_retencao_inss_ir_w = 'SE') and
					((vl_total_base_w + vl_base_calculo_w) >= vl_teto_base_w) then

					vl_base_restante_w	:= vl_base_calculo_w;

					-- Identificar conforme cadastro do tributo se e para considerar competencia ou vencimento
					select	coalesce(max(CASE WHEN a.ie_venc_pls_pag_prod='C' THEN 'C' WHEN a.ie_venc_pls_pag_prod='V' THEN 'V' WHEN coalesce(a.ie_venc_pls_pag_prod::text, '') = '' THEN							CASE WHEN a.ie_vencimento='V' THEN 'V' WHEN a.ie_vencimento='C' THEN 'V'  ELSE 'C' END  END ),'C')
					into STRICT	ie_data_ref_tributo_w
					from	tributo a
					where	a.cd_tributo = cd_tributo_w;

					for r_c04_w in c04 loop
						select	coalesce(sum(a.vl_base_calculo), 0)
						into STRICT	vl_estornado_base_maior_w
						from	pls_pag_prest_venc_trib a
						where	a.nr_seq_trib_estornado	= r_c04_w.nr_seq_venc_trib_a_maior;

						vl_saldo_a_maior_w	:= r_c04_w.vl_base_calculo_a_maior + vl_estornado_base_maior_w;

						if (vl_base_restante_w > 0) then
							/* Estornar o que foi retido a maior*/

							if (vl_base_restante_w > vl_saldo_a_maior_w) then
								pr_fator_w	:= dividir_sem_round(vl_saldo_a_maior_w, r_c04_w.vl_base_calculo_a_maior);
							else
								pr_fator_w	:= dividir_sem_round(vl_base_restante_w, r_c04_w.vl_base_calculo_a_maior);
							end if;

							vl_base_restante_w	:= vl_base_restante_w - (r_c04_w.vl_base_calculo_a_maior * pr_fator_w);

							select	nextval('pls_pag_prest_venc_trib_seq')
							into STRICT	nr_seq_pag_prest_venc_trib_w
							;

							insert into pls_pag_prest_venc_trib(	nr_sequencia, 				nr_seq_vencimento, 			cd_tributo,
												dt_atualizacao, 			nm_usuario, 				dt_imposto,
												vl_base_calculo, 			vl_imposto, 				pr_tributo,
												vl_nao_retido, 				vl_base_nao_retido, 			vl_trib_adic,
												vl_base_adic, 				ie_pago_prev, 				vl_reducao,
												vl_desc_base, 				cd_darf, 				dt_atualizacao_nrec,
												nm_usuario_nrec, 			ie_periodicidade, 			cd_variacao,
												nr_seq_trans_reg, 			nr_seq_trans_baixa, 			ie_tipo_contratacao,
												ie_filantropia, 			nr_seq_trib_estornado, 			cd_beneficiario,
												nr_seq_regra, 				vl_base_producao)
											SELECT	nr_seq_pag_prest_venc_trib_w, 		nr_seq_vencimento_p, 			cd_tributo,
												clock_timestamp(), 				nm_usuario_p, 				dt_imposto,
												vl_base_calculo * pr_fator_w * -1, 	vl_imposto * pr_fator_w * -1, 		pr_tributo,
												vl_nao_retido * pr_fator_w * -1, 	vl_base_nao_retido * pr_fator_w * -1, 	vl_trib_adic * pr_fator_w * -1,
												vl_base_adic * pr_fator_w * -1, 	'V', 					vl_reducao * pr_fator_w * -1,
												vl_desc_base * pr_fator_w * -1, 	cd_darf, 				clock_timestamp(),
												nm_usuario_p, 				ie_periodicidade, 			cd_variacao,
												nr_seq_trans_reg, 			nr_seq_trans_baixa, 			ie_tipo_contratacao,
												ie_filantropia, 			r_c04_w.nr_seq_venc_trib_a_maior, 	cd_beneficiario,
												nr_seq_regra_trib_w, 			vl_base_calculo * pr_fator_w * -1
											from	pls_pag_prest_venc_trib
											where	nr_sequencia = r_c04_w.nr_seq_venc_trib_a_maior;

							select	vl_base_calculo * pr_fator_w * -1
							into STRICT	vl_base_estorno_inss_w
							from	pls_pag_prest_venc_trib
							where	nr_sequencia = r_c04_w.nr_seq_venc_trib_a_maior;

							select	coalesce(max(vl_imposto),0)
							into STRICT	vl_pag_prest_venc_trib_w
							from	pls_pag_prest_venc_trib
							where	nr_sequencia	= nr_seq_pag_prest_venc_trib_w;

							vl_trib_acum_w	:= vl_trib_acum_w + vl_pag_prest_venc_trib_w;

							vl_total_base_w := vl_total_base_w + vl_base_estorno_inss_w;
						end if;
					end loop;
				end if;

				ie_irpf_w	:= 'N';

				if (ie_tipo_tributo_w in ('IR', 'IRPF')) and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					ie_irpf_w	:= 'S';

					if (ie_forma_retencao_inss_ir_w <> 'LM') then	-- Calcular Reducao base IRPF e saldo menos INSS
						select	coalesce(qt_dependente,0)
						into STRICT	qt_dependente_w
						from	pessoa_fisica
						where	cd_pessoa_fisica	= cd_pessoa_fisica_w;

						select	coalesce(sum(a.vl_imposto),0)
						into STRICT	vl_inss_w
						from	tributo b,
							pls_pag_prest_venc_trib a
						where	a.cd_tributo		= b.cd_tributo
						and	b.ie_tipo_tributo	= 'INSS'
						and	a.nr_seq_vencimento	= nr_seq_vencimento_p
						and	a.pr_tributo		<> 0
						and	a.ie_pago_prev 		= 'V';
					end if;
					
					if (ie_proximo_pgto_w = 'S') and
						((vl_evento_w < 0) or (vl_base_calculo_w - vl_inss_w) < 0)then
						vl_base_calculo_w	:= 0;
					else
						vl_base_calculo_w := vl_base_calculo_w - vl_inss_w;
					end if;
				end if;

				select	coalesce(sum(vl_base_calculo),0)
				into STRICT	vl_base_pago_adic_base_w
				from	pls_pag_prest_venc_trib
				where	nr_seq_vencimento	= nr_seq_vencimento_p
				and	cd_tributo		= cd_tributo_w
				and	ie_pago_prev		= 'S';

				select	count(1)
				into STRICT	qt_lote_ret_trib_w
				from	pls_lote_ret_trib_valor c,
					pls_lote_ret_trib_prest	b,
					pls_lote_retencao_trib	a
				where	b.nr_sequencia 	= c.nr_seq_trib_prest
				and	a.nr_sequencia 	= b.nr_seq_lote
				and	(c.nr_titulo IS NOT NULL AND c.nr_titulo::text <> '')
				and	trunc(a.dt_mes_referencia, 'month') = trunc(dt_competencia_w, 'month')  LIMIT 1;

				vl_trib_aux_w := 0;

				-- Se a forma de retencao for mensal, deve acumular todos os valores na base de calculo
				if (ie_forma_retencao_inss_ir_w = 'LM') and (ie_tipo_tributo_w <> 'PISCOFINSCSLL') and (qt_lote_ret_trib_w = 0) then
					vl_minimo_base_w	:= 99999999999;
					vl_teto_base_w		:= 99999999999;

					if (ie_tipo_tributo_w in ('IR','IRPF')) then

						select	sum(a.vl_imposto)
						into STRICT	vl_trib_aux_w
						from	pls_pag_prest_venc_trib a
						where	a.cd_tributo		= cd_tributo_w
						and	exists (SELECT	1
								from	pls_prestador x,
									pls_pagamento_prestador y,
									pls_pag_prest_vencimento z
								where	z.nr_sequencia = a.nr_seq_vencimento
								and	z.nr_seq_pag_prestador = y.nr_sequencia
								and	y.nr_seq_prestador = x.nr_sequencia
								and	x.cd_pessoa_fisica = cd_pessoa_fisica_w
								
union all

								SELECT	1
								from	pls_prestador x,
									pls_pagamento_prestador y,
									pls_pag_prest_vencimento z
								where	z.nr_sequencia = a.nr_seq_vencimento
								and	z.nr_seq_pag_prestador = y.nr_sequencia
								and	y.nr_seq_prestador = x.nr_sequencia
								and	x.cd_cgc = cd_cgc_w)
						and	trunc(a.dt_imposto ,'month') = trunc(dt_vencimento_w, 'month');
					end if;

					vl_trib_anterior_w	:= 0;
					ie_acumulativo_w	:= 'S';
				end if;

				-- Realizamos o tratamento abaixo para que as variaveis nao sejam enviadas como 'nulo' para a rotina 'obter_valores_tributo', assim evitando alteracoes diretamente na mesma visto que outros setores a utilizam.

				-- Obs.: Nao implementamos o nvl diretamente na passagem do parametro para a rotina, optamos por variavel recebe nvl(variavel), visto que a rotina contem parametros OUT e estes nao podem conter nvl diretamente na passagem.
				vl_minimo_base_w 		:= coalesce(vl_minimo_base_w,0);
				vl_minimo_tributo_w		:= coalesce(vl_minimo_tributo_w,0);
				vl_soma_trib_nao_retido_w	:= coalesce(vl_soma_trib_nao_retido_w,0);
				vl_soma_trib_adic_w		:= coalesce(vl_soma_trib_adic_w,0);
				vl_soma_base_nao_retido_w	:= coalesce(vl_soma_base_nao_retido_w,0);
				vl_soma_base_adic_w		:= coalesce(vl_soma_base_adic_w,0);
				vl_base_calculo_w		:= coalesce(vl_base_calculo_w,0);
				vl_tributo_w			:= coalesce(vl_tributo_w,0);
				vl_trib_nao_retido_w		:= coalesce(vl_trib_nao_retido_w,0);
				vl_trib_adic_w			:= coalesce(vl_trib_adic_w,0);
				vl_base_nao_retido_w		:= coalesce(vl_base_nao_retido_w,0);
				vl_base_adic_w			:= coalesce(vl_base_adic_w,0);
				vl_teto_base_w			:= coalesce(vl_teto_base_w,0);
				vl_trib_anterior_w		:= coalesce(vl_trib_anterior_w,0);
				vl_total_base_w			:= coalesce(vl_total_base_w,0);
				vl_reducao_w			:= coalesce(vl_reducao_w,0);
				vl_desc_dependente_w		:= coalesce(vl_desc_dependente_w,0);
				vl_base_calculo_paga_w		:= coalesce(vl_base_calculo_paga_w,0);
				vl_base_pago_adic_base_w	:= coalesce(vl_base_pago_adic_base_w,0);
				vl_base_retido_outro_w		:= coalesce(vl_base_retido_outro_w,0);

				-- OS 843196 - jtonon - 29/09/2015 - Ocorreram divergencias de valores na base de calculo quando enviado valores no campo 'vl_base_retido_outro_w'.

				-- Conforme alinhamento com o analista de negocios Ednei zeramos o valor deste campo visto que nao identificamos funcionalidade para o envio do mesmo

				-- retirei o tratamento a cima citado pois verificando na rotina obter_valores_tributo o campo vl_base_retido_outro_w e utilizado para verificar se

				-- o valor nao ira passar o teto do imposto e e o valor que foi pago em outra empresa referente ao imposto.
				SELECT * FROM obter_valores_tributo(	ie_acumulativo_w, pr_aliquota_w, vl_minimo_base_w, vl_minimo_tributo_w, vl_soma_trib_nao_retido_w, vl_soma_trib_adic_w, vl_soma_base_nao_retido_w, vl_soma_base_adic_w, vl_base_calculo_w, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_teto_base_w, vl_trib_anterior_w, ie_irpf_w, vl_total_base_w, vl_reducao_w, vl_desc_dependente_w, qt_dependente_w, vl_base_calculo_paga_w, vl_base_pago_adic_base_w, vl_base_retido_outro_w, obter_outras_reducoes_irpf(cd_pessoa_fisica_w, cd_estabelecimento_w, dt_tributo_w), dt_calculo_w, nr_seq_regra_irpf_w) INTO STRICT pr_aliquota_w, vl_base_calculo_w, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_reducao_w, vl_desc_dependente_w, nr_seq_regra_irpf_w;

				-- DEVIDO AO AJUSTE REALIZADO NA ROTINA 'OBTER_VALORES_TRIBUTO' (AQUI ACIMA) NA OS 1940272, DIA 31/07/2019, PELO WILLIAM KREUCH O TRATAMENTO ABAIXO NAO E MAIS NECESSARIO . . .

				-- jtonon - OS 1095025 - 25/05/2016 - Realizado este tratamento, pois, quando configurada regra de tributo, com valor minimo de tributo, o sistema armazena o valor nao retido no campo VL_NAO_RETIDO e gera no campo VL_TRIB_ADIC do proximo pagamento.

				-- Este tratamento e especifico para Imposto de Renda, pois IR trabalha acumulando a Base de Calculo, ja os demais tributos geram sua base a cada lote

				/*if	(ie_irpf_w = 'S') then
					vl_tributo_w := nvl(vl_tributo_w, 0) - nvl(vl_trib_aux_w, 0) + nvl(vl_trib_adic_w,0);
				else
					vl_tributo_w := nvl(vl_tributo_w, 0) - nvl(vl_trib_aux_w, 0);
				end if;*/

				-- . . . SENDO NECESSARIO APENAS ESTA LINHA
				vl_tributo_w := coalesce(vl_tributo_w, 0) - coalesce(vl_trib_aux_w, 0);

				-- REMOVIDO O TRATAMENTO ABAIXO VISTO QUE O DESCONTO DO 'VL_BASE_RETIDO_OUTRO_W' SOBRE A BASE JA ESTAVA OCORRENDO NA 'OBTER_VALORES_TRIBUTO' LINHA 213

				-- na rotina obter valores tributo e somado no fim da mesma o valor de base de calculo passado de parametro com o valor de base retido em outra empresa

				-- conforme conversa com Ednei, verificamos que esta situacao e uma verdade quando falamos de IR porem para INSS nao, pois para INSS apenas utilizamos

				-- o valor retido em outra empresa para verificar se ja atingiu o teto do tributo e nao para o calculo, sendo assim quando temos valor base retido e for

				-- INSS precisamos tirar este valor da base de calculo.

				/*if	(ie_tipo_tributo_w = 'INSS') and
					(vl_base_retido_outro_w > 0) and
					(vl_base_calculo_w != 0) then

					 vl_base_calculo_w := vl_base_calculo_w - vl_base_retido_outro_w;
				end if;*/
				if	((((vl_tributo_w <> 0) or (coalesce(ie_tipo_contratacao_w, 'S') = 'S'))) or
					((ie_forma_retencao_inss_ir_w in ('LM', 'SE')) and (ie_irpf_w = 'N'))) then

					-- Edgar 27/04/2014, OS 714074, solucao paliativa ate criarmos a consistencia para nao permitir desfazer a geracao dos vencimentos no pagamento de producao medica
					if (vl_tributo_w < 0) and (vl_base_calculo_w > 0) and (ie_tipo_tributo_w in ('IR', 'IRPF')) and (vl_inss_w = 0) then
						vl_base_calculo_w	:= vl_total_eventos_w;
						vl_tributo_w		:= vl_total_eventos_w * (pr_aliquota_w / 100);
						vl_reducao_w		:= 0;
						vl_base_adic_w		:= 0;
					end if;

					if (coalesce(vl_base_calculo_w, 0) > 0) and (coalesce(pr_reducao_base_w, 0) > 0) then
						vl_base_calculo_w	:= (vl_base_calculo_w - ((pr_reducao_base_w / 100) * vl_base_calculo_w));
						vl_tributo_w		:= (vl_tributo_w - ((pr_reducao_base_w / 100) * vl_tributo_w));
					end if;

					insert into pls_pag_prest_venc_trib(
						nr_sequencia, nr_seq_vencimento, cd_tributo,
						dt_atualizacao, nm_usuario, dt_imposto,
						vl_base_calculo, vl_imposto, pr_tributo,
						vl_nao_retido, vl_base_nao_retido, vl_trib_adic,
						vl_base_adic, ie_pago_prev, vl_reducao,
						vl_desc_base, cd_darf, dt_atualizacao_nrec,
						nm_usuario_nrec, ie_periodicidade, cd_variacao,
						nr_seq_trans_reg, nr_seq_trans_baixa, ie_tipo_contratacao,
						ie_filantropia, cd_beneficiario, nr_seq_regra,
						nr_seq_regra_calculo, vl_base_producao
					) values (
						nextval('pls_pag_prest_venc_trib_seq'), nr_seq_vencimento_p, cd_tributo_w,
						clock_timestamp(), nm_usuario_p, dt_vencimento_w,
						vl_base_calculo_w, vl_tributo_w, pr_aliquota_w,
						vl_trib_nao_retido_w, vl_base_nao_retido_w, vl_trib_adic_w,
						vl_base_adic_w, 'V', vl_reducao_w,
						vl_desc_dependente_w, cd_darf_w, clock_timestamp(),
						nm_usuario_p, ie_periodicidade_w, cd_variacao_w,
						nr_seq_trans_reg_w, nr_seq_trans_baixa_w, ie_tipo_contratacao_w,
						ie_filantropia_w, cd_beneficiario_w, nr_seq_regra_trib_w,
						nr_seq_regra_irpf_w, CASE WHEN ie_forma_retencao_inss_ir_w='LM' THEN  vl_base_nao_retido_w  ELSE vl_evento_w END );

					vl_trib_acum_w	:= vl_trib_acum_w + vl_tributo_w;
				end if;
			end if;
		end if; -- Fim evento
		end;
	end loop;
	close C03;

	vl_base_estorno_inss_w	:= 0;
	ie_agrupado_w	:= 'N';

	-- ABRIR OS EVENTOS PARA RATEIO
	vl_imposto_rat_w := 0;
	vl_evento_rateio_w := 0;
	nr_seq_pag_item_trib_w := null;
	open C03;
	loop
	fetch C03 into
		vl_evento_w,
		ie_tipo_contratacao_w,
		ie_ordem_w,
		nr_seq_pag_item_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		-- ABRIR OS TRIBUTOS POR EVENTO

		-- OS 1087757 - jtonon - Adicionamos o parametro 'ie_forma_retencao_inss_ir_w' visto que quando utilizada 'Lote de retencao mensal' o 'vl_base_producao' nao e alimentado para IR no tributo do pagamento
		for r_c08_w in c08(	nr_seq_vencimento_p, cd_tributo_w, ie_tipo_contratacao_w,
					vl_evento_w, ie_forma_retencao_inss_ir_w) loop

			insert into pls_pag_item_trib(
				nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_pagamento,
				nr_seq_venc_trib, vl_evento, ie_tipo_contratacao,
				vl_evento_origem
			) values (
				nextval('pls_pag_item_trib_seq'), clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, nr_seq_pag_item_w,
				r_c08_w.nr_sequencia, r_c08_w.vl_evento, ie_tipo_contratacao_w,
				coalesce(vl_evento_w, r_c08_w.vl_base_producao)
			) returning nr_sequencia into nr_seq_pag_item_trib_w;

			vl_evento_rateio_w := vl_evento_rateio_w + r_c08_w.vl_evento; -- Valor total rateio
			vl_imposto_rat_w := r_c08_w.vl_imposto;
		end loop;
	end loop;
	close C03;

	-- ARREDONDAMENTO RATEIO
	vl_dif_rateio_w := abs(vl_imposto_rat_w - vl_evento_rateio_w);
	if (vl_dif_rateio_w < 0.50) and -- O valor de diferenca pra rateio nao deve passar de 50 centavos
		(vl_imposto_rat_w > 0) and (vl_evento_rateio_w > 0) and (nr_seq_pag_item_trib_w IS NOT NULL AND nr_seq_pag_item_trib_w::text <> '') then
		if (vl_imposto_rat_w != vl_evento_rateio_w) then
			update	pls_pag_item_trib
			set	vl_evento	= vl_evento + (vl_imposto_rat_w - vl_evento_rateio_w)
			where	nr_sequencia	= nr_seq_pag_item_trib_w;
		end if;
	end if;

	if (vl_total_desconto_w = 0) then
		vl_total_desconto_w	:= vl_total_prod_w;
	else
		vl_total_desconto_w	:= abs(vl_total_desconto_w);
	end if;

	if (ie_tipo_tributo_w = 'INSS') then

		vl_total_desconto_w	:= (vl_total_prod_w - vl_total_desconto_w);

		if (vl_total_desconto_w > 0) then

			-- retirado ie_tipo_tributo_w = INSS do select pois o mesmo e verificado no IF acima

			-- feito decode e eliminado o outro select que existia para buscar o mesmo valor
			select	sum(CASE WHEN ie_pago_prev='R' THEN  0  ELSE vl_base_calculo END ),
				sum(CASE WHEN ie_pago_prev='R' THEN  vl_base_calculo  ELSE 0 END ),
				max(nr_sequencia)
			into STRICT	vl_gerado_w,
				vl_gerado_ret_w,
				nr_seq_alt_w
			from	pls_pag_prest_venc_trib
			where	nr_seq_vencimento = nr_seq_vencimento_p;

			if (vl_gerado_w <> vl_total_desconto_w) and (vl_gerado_ret_w > 0) then

				update	pls_pag_prest_venc_trib
				set	vl_base_calculo	= vl_base_calculo - (vl_gerado_w - vl_total_desconto_w)
				where	nr_sequencia	= nr_seq_alt_w;

				select	a.vl_base_calculo
				into STRICT	vl_gerado_w
				from	pls_pag_prest_venc_trib	a
				where	nr_sequencia	= nr_seq_alt_w;

				if (vl_gerado_w < 0) then

					update	pls_pag_prest_venc_trib
					set	vl_base_calculo	= 0,
						vl_imposto	= 0
					where	nr_sequencia	= nr_seq_alt_w;

					update	pls_pag_item_trib
					set	vl_evento		= 0
					where	nr_seq_venc_trib	= nr_seq_alt_w;
				end if;
			end if;
		end if;
	end if;
	end;
end loop;
close C01;

if (ie_inss_tipo_contrat_w = 'S') then

	select	coalesce(sum(c.vl_base_calculo),0),
		coalesce(sum(c.vl_base_calculo),0)
	into STRICT	vl_base_inss_retido_w,
		vl_base_inss_retido_orig_w
	from	tributo 			d,
		pls_pag_prest_venc_trib 	c,
		pls_pag_prest_vencimento 	b,
		pls_lote_pagamento		e,
		pls_pagamento_prestador		a
	where	a.nr_sequencia			= b.nr_seq_pag_prestador
	and	b.nr_sequencia			= c.nr_seq_vencimento
	and	a.nr_seq_prestador		= nr_seq_prestador_w
	and	a.nr_seq_lote			= e.nr_sequencia
	and	b.nr_sequencia			= nr_seq_vencimento_p
	and	c.cd_tributo			= d.cd_tributo
	and	d.ie_tipo_tributo		= 'INSS'
	and	c.ie_pago_prev			= 'R';
else
	vl_base_inss_retido_w := 0;
	vl_base_inss_retido_orig_w := 0;
end if;

-- Edgar 09/08/2012, OS 480670, rotina descontar o INSS retido em outra empresa
vl_base_a_reter_w := null;

if (vl_base_inss_retido_w <> 0) then
	open C07;
	loop
	fetch C07 into
		vl_base_calculo_w,
		pr_aliquota_w,
		nr_seq_venc_trib_w,
		vl_tributo_w,
		cd_tributo_w,
		ie_tipo_contratacao_w;
	EXIT WHEN NOT FOUND; /* apply on C07 */
		begin
		SELECT * FROM obter_dados_trib_tit_pagar(	cd_tributo_w, cd_estabelecimento_w, cd_cgc_w, cd_pessoa_fisica_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, vl_teto_base_w, ds_irrelevante_w, ds_irrelevante_w, dt_tributo_w, ds_irrelevante_w, ds_irrelevante_w, null, null, null, null, ie_tipo_contratacao_w, null, ds_irrelevante_w, null, 0, ds_irrelevante_w, ds_irrelevante_w, vl_base_calculo_w, 'S', null, null, nr_seq_tipo_prestador_w, nr_seq_prest_classif_w) INTO STRICT ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, vl_teto_base_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w, ds_irrelevante_w;

		if (ie_forma_retencao_inss_ir_w = 'LM') and (qt_lote_ret_trib_w = 0) then

			vl_teto_base_w := 99999999999;
		end if;

		if (coalesce(vl_base_a_reter_w::text, '') = '') then

			vl_base_a_reter_w := vl_teto_base_w - vl_base_inss_retido_w;
		end if;

		if (vl_base_a_reter_w < 0) then

			vl_base_calculo_w := 0;
		else
			if (vl_teto_base_w >= vl_base_inss_retido_orig_w) then

				if (vl_base_calculo_w > vl_base_a_reter_w) then

					vl_base_calculo_w	:= vl_base_a_reter_w;
					vl_base_a_reter_w	:= 0;
					vl_base_inss_retido_w	:= 0;	-- carregada esta variavel apenas para fins de sauda do cursor
				elsif (vl_base_calculo_w < vl_base_a_reter_w) then

					vl_base_a_reter_w	:= vl_base_a_reter_w - vl_base_calculo_w;
				end if;
			else
				if (vl_base_inss_retido_w <= vl_base_calculo_w) then

					vl_base_calculo_w	:= vl_base_calculo_w - vl_base_inss_retido_w;
					vl_base_inss_retido_w	:= 0;

					if (vl_base_calculo_w >= vl_teto_base_w) then
						vl_base_calculo_w := 0;
					end if;
				elsif (vl_base_inss_retido_w > vl_base_calculo_w) then
					if (vl_base_inss_retido_w < vl_teto_base_w) then
						vl_base_inss_retido_w := vl_base_inss_retido_w - vl_base_calculo_w;
					end if;

					vl_base_calculo_w := 0;
				end if;
			end if;
		end if;

		if (ie_forma_retencao_inss_ir_w = 'LM') and (qt_lote_ret_trib_w = 0) then

			update	pls_pag_prest_venc_trib
			set	vl_base_calculo		= vl_base_calculo_w,
				vl_base_nao_retido	= vl_base_calculo_w,
				vl_base_producao	= vl_base_calculo_w
			where	nr_sequencia		= nr_seq_venc_trib_w;
		else
			update	pls_pag_prest_venc_trib
			set	vl_base_calculo		= vl_base_calculo_w,
				vl_imposto		= vl_base_calculo_w * dividir_sem_round((pr_aliquota_w)::numeric, 100),
				vl_base_producao	= vl_base_calculo_w
			where	nr_sequencia		= nr_seq_venc_trib_w;

			if (coalesce(vl_base_calculo_w,0) = 0) then

				delete	FROM pls_pag_item_trib
				where	nr_seq_venc_trib = nr_seq_venc_trib_w;
			end if;
		end if;

		ie_recalculou_inss_w	:= 'S';
		vl_trib_acum_w		:= vl_trib_acum_w - (vl_tributo_w -  (vl_base_calculo_w * dividir_sem_round((pr_aliquota_w)::numeric, 100)));
		end;
	end loop;
	close C07;
end if;

-- Edgar 08/11/2014, OS 813814, so recalcular o IRPF se nao for utilizado o lote de retencao mensal,

-- pois qdo e lote de retencao mensal nao calcula o valor do tributo do TNSS, ou seja, deixa o mesmo zerado
if (ie_recalculou_inss_w = 'S')  and (ie_forma_retencao_inss_ir_w <> 'LM') then

	select	max(a.nr_sequencia),
		max(a.cd_tributo),
		coalesce(max(a.vl_desc_base),0),
		coalesce(max(a.vl_base_adic),0)
	into STRICT	nr_seq_venc_trib_w,
		cd_tributo_w,
		vl_desc_base_w,
		vl_base_adic_w
	from	tributo			b,
		pls_pag_prest_venc_trib a
	where	a.nr_seq_vencimento 	= nr_seq_vencimento_p
	and	b.cd_tributo		= a.cd_tributo
	and	b.ie_tipo_tributo	= 'IR';

	if (nr_seq_venc_trib_w IS NOT NULL AND nr_seq_venc_trib_w::text <> '') then

		select	sum(a.vl_imposto)
		into STRICT	vl_trib_inss_w
		from	tributo			b,
			pls_pag_prest_venc_trib a
		where	a.cd_tributo		= b.cd_tributo
		and	a.nr_seq_vencimento 	= nr_seq_vencimento_p
		and	b.ie_tipo_tributo	= 'INSS'
		and	a.pr_tributo		<> 0;

		vl_base_calculo_w := vl_total_eventos_w - vl_trib_inss_w - vl_desc_base_w;

		SELECT * FROM obter_dados_irpf((vl_base_calculo_w + vl_base_adic_w), pr_aliquota_irpf_w, vl_reducao_w, 0, clock_timestamp(), nr_seq_regra_irpf_w) INTO STRICT pr_aliquota_irpf_w, vl_reducao_w, nr_seq_regra_irpf_w;

		-- jtonon - OS 946761 - Removemos o 'VL_IR_ANTERIOR_W' da linha inferior visto que o mesmo trazia valores do mesmo prestador e do mesmo tributo em questao dos pagamentos anteriores, adicionamos o 'VL_TRIB_ANTERIOR_W' visto que este traz alem de pagamentos anteriores valores provenientes de NF, titulos, etc.
		vl_tributo_irpf_w := (((vl_base_calculo_w + vl_base_adic_w) * dividir_sem_round((pr_aliquota_irpf_w)::numeric, 100)) - vl_reducao_w - coalesce(vl_trib_aux_w,0) - vl_trib_anterior_w);

		if (vl_tributo_irpf_w > 0) then
			SELECT * FROM obter_dados_trib_tit_pagar(	cd_tributo_w, cd_estabelecimento_w, cd_cgc_w, cd_pessoa_fisica_w, cd_beneficiario_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, dt_tributo_w, cd_variacao_w, ie_periodicidade_w, null, null, null, null, ie_tipo_contratacao_w, null, nr_seq_regra_trib_w, null, 0, nr_seq_classe_w, cd_tipo_baixa_neg_w, vl_base_calculo_w, 'S', null, null, nr_seq_tipo_prestador_w, nr_seq_prest_classif_w) INTO STRICT cd_beneficiario_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, cd_variacao_w, ie_periodicidade_w, nr_seq_regra_trib_w, nr_seq_classe_w, cd_tipo_baixa_neg_w;
		end if;

		if (vl_tributo_irpf_w < coalesce(vl_minimo_tributo_w, 0)) then
			vl_tributo_irpf_w := 0;
		end if;

		update	pls_pag_prest_venc_trib
		set	vl_base_calculo = vl_base_calculo_w + vl_base_adic_w,
			vl_imposto	= vl_tributo_irpf_w,
			pr_tributo	= pr_aliquota_irpf_w,
			vl_reducao	= vl_reducao_w
		where	nr_sequencia 	= nr_seq_venc_trib_w;

		select	count(1)
		into STRICT	qt_pag_item_trib_w
		from	pls_pag_item_trib
		where	nr_seq_venc_trib = nr_seq_venc_trib_w;

		if (qt_pag_item_trib_w = 1) then
			update	pls_pag_item_trib
			set	vl_evento = vl_tributo_irpf_w
			where	nr_seq_venc_trib = nr_seq_venc_trib_w;
		else
			for r_C09_w in C09( nr_seq_venc_trib_w, ie_forma_retencao_inss_ir_w ) loop
				update	pls_pag_item_trib
				set	vl_evento = r_C09_w.vl_evento
				where	nr_sequencia = r_C09_w.nr_seq_pag_item_trib;
			end loop;
		end if;
	end if;
end if;

begin
select	coalesce(ie_trib_saldo_tit_nf,'N')
into STRICT	ie_trib_saldo_tit_nf_w
from	parametros_contas_pagar
where	cd_estabelecimento	= cd_estabelecimento_w;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(189078);
end;

if (ie_trib_saldo_tit_nf_w = 'S') then
	select	coalesce(sum(a.vl_imposto),0)
	into STRICT	vl_trib_acum_w
	from	tributo b,
		pls_pag_prest_venc_trib a
	where	a.cd_tributo		= b.cd_tributo
	and	a.ie_pago_prev	 	= 'V'
	and	a.nr_seq_vencimento 	= nr_seq_vencimento_p
	and	coalesce(b.ie_saldo_tit_pagar,'S')	= 'S';
else
	-- Edgar 23/01/2014, OS 656420, tratamento para o campo "IE_SOMA_DIMINUI"  do cadastro de tributo
	select	coalesce(sum(CASE WHEN b.ie_soma_diminui='D' THEN  a.vl_imposto WHEN b.ie_soma_diminui='S' THEN  a.vl_imposto * -1  ELSE 0 END ),0)
	into STRICT	vl_trib_acum_w
	from	tributo b,
		pls_pag_prest_venc_trib a
	where	a.cd_tributo		= b.cd_tributo
	and	a.ie_pago_prev	 	= 'V'
	and	a.nr_seq_vencimento 	= nr_seq_vencimento_p;
end if;

update	pls_pag_prest_vencimento
set	vl_liquido	= vl_vencimento - vl_ir - vl_imposto_munic - vl_trib_acum_w
where	nr_sequencia	= nr_seq_vencimento_p;

CALL pls_atualizar_desc_trib_pagto(nr_seq_pag_prest_w, nm_usuario_p);

-- verifica se existe algum IR negativo ainda, se existir sera exibido a mensagem e parado o processamento
select	sum(	case	when(coalesce(a.vl_imposto,0) < 0) then 1
			when(coalesce(a.vl_nao_retido,0) < 0) then 1
			else	0
		end)
into STRICT	qt_ir_negativo_w
from	pls_pag_prest_venc_trib		a,
	pls_pag_prest_vencimento	b,
	pls_pagamento_prestador		c,
	tributo				d
where	b.nr_sequencia			= a.nr_seq_vencimento
and	c.nr_sequencia			= b.nr_seq_pag_prestador
and	d.cd_tributo			= a.cd_tributo
and	d.ie_tipo_tributo		= 'IR'
and	coalesce(c.ie_cancelamento::text, '') = ''
and	b.nr_seq_pag_prestador		= nr_seq_vencimento_p;

if (qt_ir_negativo_w > 0) then
	-- Problemas na geracao do valor de tributo IR. Inserindo valor negativo.
	CALL wheb_mensagem_pck.exibir_mensagem_abort(760285);
end if;

for r_c10_w in c10( nr_seq_vencimento_p ) loop -- 'Tributos de vencimentos' do vencimento atual provenientes de estorno
	vl_saldo_trib_w	:= abs(r_c10_w.vl_base_calculo);
	
	if (vl_saldo_trib_w > 0) then
		for r_c11_w in c11( r_c10_w.nr_seq_trib_estornado ) loop -- 'Resumo contabil tributos' do 'Tributos de vencimentos' de origem do 'Tributos de vencimentos' do vencimento atual provenientes de estorno
		
			if (vl_saldo_trib_w = 0) then -- Se zerou o VL_SALDO_TRIB_W sai fora dos cursores
				vl_evento_origem_w	:= vl_saldo_trib_w;
				
			elsif	((vl_saldo_trib_w - r_c11_w.vl_evento_origem) >= 0) then -- Se o VL_SALDO_TRIB_W e maior ou igual ao VL_EVENTO_ORIGEM e utilizado exatamente os valores da PLS_PAG_ITEM_TRIB
				vl_evento_origem_w	:= r_c11_w.vl_evento_origem;
				vl_saldo_trib_w		:= vl_saldo_trib_w - vl_evento_origem_w;
				vl_evento_w		:= (vl_evento_origem_w / r_c10_w.vl_base_producao) * r_c10_w.vl_imposto;
				
			else -- Se o VL_SALDO_TRIB_W e menor VL_EVENTO_ORIGEM e utilizado somente o VL_SALDO_TRIB_W, assim temos que recalcular o VL_EVENTO_W
				vl_evento_origem_w	:= vl_saldo_trib_w;
				vl_saldo_trib_w		:= 0;
				vl_evento_w		:= (vl_evento_origem_w / r_c10_w.vl_base_producao) * r_c10_w.vl_imposto;
			end if;
			
			if (vl_evento_origem_w > 0) then
				insert into pls_pag_item_trib(	nr_sequencia,			nr_seq_venc_trib,		dt_atualizacao,			dt_atualizacao_nrec,		nm_usuario,
								nm_usuario_nrec,		nr_seq_pagamento,		ie_tipo_contratacao,		vl_evento,			vl_evento_origem,
								nr_seq_trib_estornado)
						values (	nextval('pls_pag_item_trib_seq'),	r_c10_w.nr_sequencia,		clock_timestamp(),			clock_timestamp(),			nm_usuario_p,
								nm_usuario_p,			r_c11_w.nr_seq_pagamento,	r_c11_w.ie_tipo_contratacao,	vl_evento_w * -1,		vl_evento_origem_w * -1,
								r_c11_w.nr_sequencia);
			end if;
		end loop;
	end if;
end loop;

-- Substituir a trigger PLS_PAG_PREST_VENC_TRIB_ATUAL
for r_c99_w in c99( nr_seq_vencimento_p ) loop	

	-- Trunca igual como era feito na trigger PLS_PAG_PREST_VENC_TRIB_ATUAL
	update	pls_pag_prest_venc_trib
	set	vl_imposto	= trunc(dividir_sem_round((r_c99_w.vl_base_calculo * r_c99_w.pr_tributo)::numeric, 100),2)
	where	nr_sequencia	= r_c99_w.nr_sequencia;
	
	vl_diferenca_w	:= r_c99_w.vl_imposto - trunc(dividir_sem_round((r_c99_w.vl_base_calculo * r_c99_w.pr_tributo)::numeric, 100),2);
	if (vl_diferenca_w > 0) then
		update	pls_pag_prest_vencimento
		set	vl_liquido	= vl_liquido + vl_diferenca_w
		where	nr_sequencia	= nr_seq_vencimento_p;
	end if;
	
	-- Tratar o arredondamento para o total
	if (r_c99_w.ie_tipo_tributo in ('INSS')) then
		select	trunc(dividir_sem_round((coalesce(sum(coalesce(a.vl_base_calculo,0)),0) * r_c99_w.pr_tributo)::numeric, 100),2), -- Calcular os tributos do periodo e arredondar, pra ter o total de imposto truncado
			coalesce(sum(coalesce(a.vl_imposto,0)),0) -- Somar todos os impostos que foram truncados individualmente
		into STRICT	vl_imposto_total_trunc_w,
			vl_imposto_total_w
		from	tributo				z,
			pls_pag_prest_venc_trib 	a,
			pls_pag_prest_vencimento 	b,
			pls_pagamento_prestador 	c,
			pls_lote_pagamento		d
		where	d.nr_sequencia 		= c.nr_seq_lote
		and	c.nr_sequencia		= b.nr_seq_pag_prestador
		and	b.nr_sequencia		= a.nr_seq_vencimento
		and	a.cd_tributo		= z.cd_tributo
		and	z.ie_tipo_tributo	= r_c99_w.ie_tipo_tributo
		and	c.nr_seq_prestador	= nr_seq_prestador_w
		and	trunc(CASE WHEN ie_vencimento_w='R' THEN  d.dt_mes_competencia  ELSE a.dt_imposto END , 'month') = trunc(dt_tributo_w, 'month')
		and	a.ie_pago_prev		!= 'R';
		
		if (vl_imposto_total_trunc_w - vl_imposto_total_w between -0.01 and 0.01) then
			update	pls_pag_prest_venc_trib
			set	vl_imposto	= vl_imposto + (vl_imposto_total_trunc_w - vl_imposto_total_w)
			where	nr_sequencia	= r_c99_w.nr_sequencia;
		end if;
	end if;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_trib_prest_venc ( nr_seq_vencimento_p pls_pag_prest_vencimento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

