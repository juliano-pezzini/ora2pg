-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_cobranca_honor ( nr_interno_conta_p bigint, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE

 
cd_convenio_w		integer;	
cd_grupo_proc_w		bigint;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;	
qt_sessao_w		bigint;	
qt_proc_grupo_w		bigint;
qt_proc_lanc_w		bigint;
qt_proc_incons_w	bigint;
nr_sequencia_w		bigint;
nr_atendimento_w	bigint;
nr_seq_item_w		bigint;	
dt_entrada_unidade_w	timestamp;
nr_seq_atepacu_w	bigint;
cd_setor_atendimento_w	bigint;
dt_procedimento_w	timestamp;
cd_categoria_w		varchar(10);
nr_doc_convenio_w	varchar(30);
ie_tipo_guia_w		varchar(3);
cd_senha_w		varchar(30);
cd_cgc_prestador_w	varchar(14);
ie_funcao_medico_w	varchar(10)	:= 0;
cd_medico_executor_w	varchar(10);		
qt_proc_conta_w		bigint;	
				 
C01 CURSOR FOR 
	SELECT	cd_grupo_proc, 
		cd_procedimento, 
		ie_origem_proced, 
		qt_sessao 
	from	conv_regra_cobranca_honor 
	where	cd_convenio = cd_convenio_w	 
	order by cd_grupo_proc;
				

BEGIN 
 
select 	max(cd_convenio_parametro), 
	max(cd_categoria_parametro), 
	max(nr_atendimento) 
into STRICT	cd_convenio_w, 
	cd_categoria_w, 
	nr_atendimento_w 
from 	conta_paciente 
where 	nr_interno_conta = nr_interno_conta_p;
 
open C01;
loop 
fetch C01 into	 
	cd_grupo_proc_w, 
	cd_procedimento_w, 
	ie_origem_proced_w, 
	qt_sessao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	 
	select	coalesce(sum(qt_procedimento),0) 
	into STRICT	qt_proc_grupo_w 
	from	estrutura_procedimento_v b, 
		procedimento_paciente a 
	where	a.cd_procedimento = b.cd_procedimento 
	and	a.ie_origem_proced = b.ie_origem_proced 
	and	b.cd_grupo_proc = cd_grupo_proc_w 
	and	coalesce(a.cd_motivo_exc_conta::text, '') = '' 
	and	a.nr_interno_conta = nr_interno_conta_p;
	 
	qt_proc_lanc_w	:= trunc(dividir(qt_proc_grupo_w,qt_sessao_w));	
	qt_proc_incons_w:= qt_proc_grupo_w - (qt_proc_lanc_w * qt_sessao_w);
	 
	select 	coalesce(sum(qt_procedimento),0) 
	into STRICT	qt_proc_conta_w 
	from 	procedimento_paciente 
	where	nr_interno_conta = nr_interno_conta_p 
	and 	cd_procedimento = cd_procedimento_w 
	and 	ie_origem_proced = ie_origem_proced_w 
	and 	coalesce(cd_motivo_exc_conta::text, '') = '';
	 
	if (qt_proc_grupo_w > 0) then 
	 
		if (qt_proc_incons_w = 0) and (qt_proc_conta_w < qt_proc_lanc_w) then 
		 
			select	nextval('procedimento_paciente_seq') 
			into STRICT	nr_sequencia_w 
			;
			 
			select	max(nr_sequencia) 
			into STRICT	nr_seq_item_w 
			from	estrutura_procedimento_v b, 
				procedimento_paciente a 
			where	a.cd_procedimento = b.cd_procedimento 
			and	a.ie_origem_proced = b.ie_origem_proced 
			and	b.cd_grupo_proc = cd_grupo_proc_w 
			and	coalesce(a.cd_motivo_exc_conta::text, '') = '' 
			and	a.nr_interno_conta = nr_interno_conta_p;
				 
			begin 
			select 	dt_entrada_unidade, 
				nr_seq_atepacu, 
				cd_setor_atendimento, 
				dt_procedimento, 
				nr_doc_convenio, 
				ie_tipo_guia, 
				cd_senha, 
				cd_cgc_prestador, 
				ie_funcao_medico, 
				cd_medico_executor 
			into STRICT	dt_entrada_unidade_w, 
				nr_seq_atepacu_w, 
				cd_setor_atendimento_w, 
				dt_procedimento_w, 
				nr_doc_convenio_w, 
				ie_tipo_guia_w, 
				cd_senha_w, 
				cd_cgc_prestador_w, 
				ie_funcao_medico_w, 
				cd_medico_executor_w 
			from 	procedimento_paciente 
			where 	nr_sequencia = nr_seq_item_w;
			exception 
				when others then 
				nr_atendimento_w	:= 0;
			end;
			 
			insert into procedimento_paciente( 
						nr_sequencia, 
						nr_atendimento,	 
						dt_entrada_unidade,		 
						cd_procedimento, 
						dt_procedimento, 
						cd_convenio, 
						cd_categoria, 
						nr_doc_convenio, 
						ie_tipo_guia, 
						cd_senha, 
						ie_auditoria, 
						ie_emite_conta, 
						cd_cgc_prestador, 
						ie_origem_proced, 
						nr_seq_exame, 
						nr_seq_proc_interno, 
						qt_procedimento, 
						cd_setor_atendimento, 
						nr_seq_atepacu, 
						nr_seq_cor_exec, 
						ie_funcao_medico, 
						vl_procedimento, 
						ie_proc_princ_atend, 
						ie_video, 
						tx_medico, 
						tx_Anestesia, 
						tx_procedimento, 
						ie_valor_informado, 
						ie_guia_informada, 
						cd_situacao_glosa, 
						nm_usuario_original, 
						ds_observacao, 
						dt_atualizacao, 
						nm_usuario, 
						cd_pessoa_fisica, 
						cd_medico_executor, 
						vl_medico, 
						vl_custo_operacional, 
						vl_materiais, 
						nr_interno_conta) 
					values ( 
						nr_sequencia_w, 
						nr_atendimento_w, 
						dt_entrada_unidade_w, 
						cd_procedimento_w, 
						dt_procedimento_w, 
						cd_convenio_w, 
						cd_categoria_w, 
						nr_doc_convenio_w, 
						ie_tipo_guia_w, 
						cd_senha_w, 
						'N', 
						null, 
						cd_cgc_prestador_w, 
						ie_origem_proced_w, 
						null, 
						null,				 
						qt_proc_lanc_w - qt_proc_conta_w, 
						cd_setor_atendimento_w, 
						nr_seq_atepacu_w, 
						null, 
						ie_funcao_medico_w, 
						0, 
						'N', 
						'N', 
						100, 
						100, 
						100, 
						'N', 
						null, 
						0, 
						nm_usuario_p, 
						WHEB_MENSAGEM_PCK.get_texto(280474), 
						clock_timestamp(), 
						nm_usuario_p, 
						null, 
						cd_medico_executor_w, 
						0, 
						0, 
						0, 
						nr_interno_conta_p);
 
			CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
			 
		else	 
			if (qt_proc_incons_w > 0) then 
						 
				ds_erro_p:= 	WHEB_MENSAGEM_PCK.get_texto(280475) || qt_proc_grupo_w || chr(13) || chr(10) || 
						WHEB_MENSAGEM_PCK.get_texto(280476) || qt_sessao_w || chr(13) || chr(10) || 
						WHEB_MENSAGEM_PCK.get_texto(280477) || (qt_sessao_w - qt_proc_grupo_w) || chr(13) || chr(10) || 
						WHEB_MENSAGEM_PCK.get_texto(280478);
						 
			end if;				
		end if;
				 
	end if;		
	 
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_cobranca_honor ( nr_interno_conta_p bigint, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;

