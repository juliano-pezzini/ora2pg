-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_necessidade_vaga_agenda (( dt_agenda_p timestamp, dt_fim_agenda_p timestamp, cd_estabelecimento_p bigint, cd_tipo_agenda_p bigint, ie_status_agenda_p text, cd_agenda_p bigint, nm_usuario_p text, ie_tipo_atendimento_p bigint, ds_erro_p INOUT text) IS  --Leao em 02/12/2008 - OS 119126
 cd_tipo_acomodacao_w smallint) AS $body$
DECLARE

	PERFORM	b.cd_pessoa_fisica,
		b.dt_agenda,
		b.cd_medico,
		b.cd_procedimento,
		b.nr_seq_proc_interno,
		b.ie_origem_proced,
		b.cd_convenio,
		b.cd_categoria,
		b.nr_atendimento,
		b.cd_tipo_acomodacao,
		b.cd_doenca_cid,
		a.cd_estabelecimento,
		b.nr_sequencia,
		b.ie_status_agenda,
		b.cd_plano,
		b.nm_paciente,
		1,
		b.nr_telefone,
		substr(b.ds_observacao,1,255) ds_observacao,
		b.dt_chegada_prev,
		b.ds_senha,
		b.ie_tipo_atendimento,
		qt_diaria_prev,
		substr(b.nr_doc_convenio,1,20),
		hr_inicio,
		b.ie_tipo_atendimento,
		(SELECT c.nr_seq_classif_atend from agenda_paciente_auxiliar c where c.nr_seq_agenda = b.nr_sequencia) NR_SEQ_CLASSIF_ATEND,
		b.cd_procedencia
	from	agenda_paciente b,
		agenda a
	where	a.cd_agenda		= b.cd_agenda
	and	trunc(b.dt_agenda)	between trunc(dt_agenda_p) and trunc(dt_fim_agenda_p)
	and	a.cd_tipo_agenda	= 1
	and	((b.cd_pessoa_fisica IS NOT NULL AND b.cd_pessoa_fisica::text <> '') or (ie_permite_nm_paciente_w = 'S' AND b.nm_paciente IS NOT NULL AND b.nm_paciente::text <> ''))
	and	b.ie_status_agenda	<> 'C'
	and (b.ie_status_agenda	= ie_status_agenda_p or ie_status_agenda_p = '0')
	and (b.ie_tipo_atendimento = ie_tipo_atendimento_p or ie_tipo_atendimento_p = 0) --Leao em 02/12/2008 - OS 119126
	and	((coalesce(cd_agenda_p::text, '') = '') or (a.cd_agenda = cd_agenda_p))
	and	coalesce(a.ie_nao_gerar_gv,'N')	= 'N'
	AND (b.ie_reserva_leito <> 'N' or coalesce(b.ie_reserva_leito::text, '') = '')
	and	((not exists (	select	1	from	unidade_atendimento c
						where	c.nr_atendimento = b.nr_atendimento)) or (ie_internado_w = 'S'))
	and	((ie_restringir_estab_w = 'S' AND a.cd_estabelecimento = cd_estabelecimento_p) or (ie_restringir_estab_w = 'N'));

C02 CURSOR FOR
	SELECT	b.cd_pessoa_fisica,
		b.dt_agenda,
		b.cd_medico,
		b.cd_procedimento,
		b.nr_seq_proc_interno,
		b.ie_origem_proced,
		b.cd_convenio,
		b.cd_categoria,
		b.nr_atendimento,
		b.cd_tipo_acomodacao,
		b.cd_doenca_cid,
		a.cd_estabelecimento,
		b.nr_sequencia,
		b.cd_plano,
		b.nm_paciente,
		2,
		b.nr_telefone,
		substr(b.ds_observacao,1,255) ds_observacao,
		hr_inicio,
		b.ie_tipo_atendimento,
		(SELECT c.nr_seq_classif_atend from agenda_paciente_auxiliar c where c.nr_seq_agenda = b.nr_sequencia) NR_SEQ_CLASSIF_ATEND,
		b.cd_procedencia
	from	agenda_paciente b,
		agenda a
	where	a.cd_agenda		= b.cd_agenda
	and	trunc(b.dt_agenda)	between trunc(dt_agenda_p) and trunc(dt_fim_agenda_p)
	and	a.cd_tipo_agenda	= 2
	and	((b.cd_pessoa_fisica IS NOT NULL AND b.cd_pessoa_fisica::text <> '') or (ie_permite_nm_paciente_w = 'S' AND b.nm_paciente IS NOT NULL AND b.nm_paciente::text <> ''))
	and	b.ie_status_agenda	<> 'C'
	and (b.ie_status_agenda	= ie_status_agenda_p or ie_status_agenda_p = '0')
	and (b.ie_tipo_atendimento = ie_tipo_atendimento_p or ie_tipo_atendimento_p = 0) --Leao em 02/12/2008 - OS 119126
	and	((coalesce(cd_agenda_p::text, '') = '') or (a.cd_agenda = cd_agenda_p))
	and	((b.ie_leito		= 'S') or (ie_considera_todos_w = 'S'))
	AND (b.ie_reserva_leito <> 'N' or coalesce(b.ie_reserva_leito::text, '') = '')
	and	not exists (	select	1	from	unidade_atendimento c
						where	c.nr_atendimento = b.nr_atendimento)
	and	((ie_restringir_estab_w = 'S' AND a.cd_estabelecimento = cd_estabelecimento_p) or (ie_restringir_estab_w = 'N'))
	
union

	select	b.cd_pessoa_fisica,
		b.dt_agenda,
		b.cd_medico,
		b.cd_procedimento,
		b.nr_seq_proc_interno,
		b.ie_origem_proced,
		b.cd_convenio,
		b.cd_categoria,
		b.nr_atendimento,
		b.cd_tipo_acomodacao,
		null,
		a.cd_estabelecimento,
		b.nr_sequencia,
		b.cd_plano,
		b.nm_paciente,
		5,
		b.nr_telefone,
		substr(b.ds_observacao,1,255) ds_observacao,
		b.dt_agenda,
		a.ie_tipo_atendimento,
		null NR_SEQ_CLASSIF_ATEND,
		b.cd_procedencia
	from	agenda_consulta b,
		agenda a
	where	a.cd_agenda		= b.cd_agenda
	and	trunc(b.dt_agenda)	between trunc(dt_agenda_p) and trunc(dt_fim_agenda_p)
	and	a.cd_tipo_agenda	= 5
	and	((b.cd_pessoa_fisica IS NOT NULL AND b.cd_pessoa_fisica::text <> '') or (ie_permite_nm_paciente_w = 'S' AND nm_paciente IS NOT NULL AND nm_paciente::text <> ''))
	and	b.ie_status_agenda	<> 'C'
	and (b.ie_status_agenda	= ie_status_agenda_p or ie_status_agenda_p = '0')
	and (a.ie_tipo_atendimento = ie_tipo_atendimento_p or ie_tipo_atendimento_p = 0) --Leao em 02/12/2008 - OS 119126
	and	((coalesce(cd_agenda_p::text, '') = '') or (a.cd_agenda = cd_agenda_p))
	and	not exists (	select	1	from	unidade_atendimento c
						where	c.nr_atendimento = b.nr_atendimento)
	and	((ie_restringir_estab_w = 'S' AND a.cd_estabelecimento = cd_estabelecimento_p) or (ie_restringir_estab_w = 'N'));
	
	

BEGIN

ds_agendas_incorretas_w := '';

ie_permite_nm_paciente_w := obter_param_usuario(1002, 29, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_permite_nm_paciente_w);
ie_consiste_sem_pf_dup_w := obter_param_usuario(1002, 31, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_sem_pf_dup_w);
ie_internado_w := obter_param_usuario(1002, 38, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_internado_w);
ie_considera_todos_w := obter_param_usuario(1002, 44, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_considera_todos_w);
ie_preencher_clinica_auto_w := obter_param_usuario(1002, 62, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_preencher_clinica_auto_w);
ie_busca_proced_adic_GAC_w := obter_param_usuario(1002, 78, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_busca_proced_adic_GAC_w);
ie_busca_senha_GAC_w := obter_param_usuario(1002, 79, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_busca_senha_GAC_w);
ie_perm_duplicidade_agenda_w := obter_param_usuario(1002, 80, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_perm_duplicidade_agenda_w);
ie_preenche_diaria_GAC_w := obter_param_usuario(1002, 96, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_preenche_diaria_GAC_w);
ie_busca_guia_GAC_w := obter_param_usuario(1002, 97, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_busca_guia_GAC_w);
nr_horas_w := obter_param_usuario(1002, 102, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, nr_horas_w);
ie_restringir_estab_w := obter_param_usuario(1002, 142, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_restringir_estab_w);
ie_espec_medico_w := Obter_Param_Usuario(1002, 153, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_espec_medico_w);
ie_data_agenda_w := Obter_Param_Usuario(1002, 158, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_data_agenda_w);
ie_ver_solic_ambulatorial_w := obter_param_usuario(871, 532, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_ver_solic_ambulatorial_w);

if (cd_tipo_agenda_p = 1) then
	begin
	open C01;
	loop
		fetch C01 into	
			cd_pessoa_fisica_w,
			dt_agenda_w,
			cd_medico_resp_w,
			cd_procedimento_w,
			nr_seq_proc_interno_w,
			ie_origem_proced_w,
			cd_convenio_w,
			cd_categoria_w,
			nr_atendimento_w,
			cd_tipo_acomodacao_w,
			cd_doenca_cid_w,
			cd_estabelecimento_w,
			nr_seq_agenda_w,
			ie_status_agenda_w,
			cd_plano_w,
			nm_paciente_w,
			cd_tipo_agenda_w,
			nr_telefone_w,
			ds_observacao_w,
			dt_chegada_prev_w,
			ds_senha_w,
			ie_tipo_atendimento_w,
			qt_diaria_w,
			nr_doc_convenio_w,
			hr_inicio_w,
			ie_tipo_atend_w,
			nr_seq_classif_atend_w,
			cd_procedencia_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */	
		
		if (coalesce(ie_espec_medico_w,'N') = 'S') then
			cd_especialidade_medica_w := obter_especialidade_medica(nr_seq_agenda_w);
		end if;
	
		nr_seq_gestao_vaga_w  := 0;
		if (ie_consiste_sem_pf_dup_w = 'S') and (coalesce(cd_pessoa_fisica_w::text, '') = '') then
			select 	obter_seq_gestao_vaga_tipo(nr_seq_agenda_w, cd_tipo_agenda_w)
			into STRICT	nr_seq_gestao_vaga_w
			;
		end if;

		
		if 	((ie_consiste_sem_pf_dup_w = 'N') or (nr_seq_gestao_vaga_w  = 0)) then
		
			if (ie_perm_duplicidade_agenda_w = 'S') then
				select	count(*)
				into STRICT	qt_solicitacao_w
				from	gestao_vaga
				where	nr_seq_agenda = nr_seq_agenda_w
				and	ie_status IN ('A','P','R');
			else
				qt_solicitacao_w := 0;
			end if;
		
			-- Ivan em 21/05/2007 OS56547
			select	consistir_solicitacao_vaga(cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p, 0)
			into STRICT	ie_existe_w
			;

			-- Ivan em 26/12/2007 OS77893
			select	consistir_atend_internado(cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p)
			into STRICT	ie_consiste_internado_w
			;
			
			if (coalesce(ie_ver_solic_ambulatorial_w,'N') = 'S') and (ie_tipo_atendimento_w = 8) then
				ie_solicitacao_w := 'A';
			else
				ie_solicitacao_w := 'I';
			
			end if;
						
			if (ie_existe_w = 'N') and (ie_consiste_internado_w = 'S') and (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') and (qt_solicitacao_w = 0) then
				begin
				
				if (cd_categoria_w IS NOT NULL AND cd_categoria_w::text <> '') and (ie_consistiu_acomodacao_w = 'N')then
					begin
					
					select	count(*)
					into STRICT	qt_existe_categoria_w
					from 	categoria_convenio
					where	cd_convenio	= cd_convenio_w
					and	cd_categoria	= cd_categoria_w;
					
					if (qt_existe_categoria_w = 0) then
						begin
						ie_inserir_w	:= 	False;
						ie_consistiu_categoria_w	:= 'S';
						if (coalesce(ds_agendas_incorretas_w::text, '') = '') then
							ds_agendas_incorretas_w := wheb_mensagem_pck.get_texto(281439,null)|| chr(13);
						end if;
						ds_agendas_incorretas_w := substr(ds_agendas_incorretas_w || chr(13)|| WHEB_MENSAGEM_PCK.get_texto(281435,'cd_pessoa_fisica='|| substr(obter_nome_pf(cd_pessoa_fisica_w),1,100)||';dt_agenda='|| to_char(dt_agenda_w, 'dd/mm/yyyy')), 1, 255);
						
						end;
					end if;
					
					end;
				end if;
				
				
				if (cd_tipo_acomodacao_w IS NOT NULL AND cd_tipo_acomodacao_w::text <> '') and (ie_consistiu_categoria_w = 'N') and (ie_inserir_w)	then
				
					begin
					select	count(*)
					into STRICT	qt_existe_acomodacao_w
					from	tipo_acomodacao
					where	cd_tipo_acomodacao = cd_tipo_acomodacao_w;
					
					if (qt_existe_acomodacao_w = 0)	then
						begin
						ie_inserir_w	:= False;
						ie_consistiu_acomodacao_w	:= 'S';
						if (coalesce(ds_agendas_incorretas_w::text, '') = '') then
							ds_agendas_incorretas_w := wheb_mensagem_pck.get_texto(281440,null)|| chr(13);
						end if;
						ds_agendas_incorretas_w := substr(ds_agendas_incorretas_w || chr(13)|| WHEB_MENSAGEM_PCK.get_texto(281435,'cd_pessoa_fisica='|| substr(obter_nome_pf(cd_pessoa_fisica_w),1,100)||';dt_agenda='|| to_char(dt_agenda_w, 'dd/mm/yyyy')), 1, 255);
						end;
					end if;
					
					end;
				end if;

				if (ie_inserir_w) then
				
					select	nextval('gestao_vaga_seq')
					into STRICT	nr_sequencia_w
					;
					
					insert into gestao_vaga(
						nr_sequencia,
						cd_estabelecimento,
						cd_pessoa_fisica,
						dt_atualizacao,
						nm_usuario,
						dt_solicitacao,
						dt_prevista,
						ie_solicitacao,
						cd_convenio,
						cd_categoria,
						ie_status,
						ie_tipo_vaga,
						nr_atendimento,
						cd_tipo_acomod_desej,
						cd_medico,
						ie_clinica,
						cd_procedimento,
						ie_origem_proced,
						cd_cid_principal,
						nr_seq_agenda,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						cd_plano_convenio,
						nm_paciente,
						cd_tipo_agenda,
						nr_telefone,
						ds_observacao,
						cd_senha,
						qt_dia,
						nr_doc_convenio,
						ie_biobanco,
						nr_seq_proc_interno,
						cd_especialidade,
						ie_tipo_atendimento,
						nr_seq_classif_atend,
						cd_procedencia)
					values (
						nr_sequencia_w,
						cd_estabelecimento_w,
						cd_pessoa_fisica_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						CASE WHEN ie_data_agenda_w='S' THEN coalesce(hr_inicio_w,dt_chegada_prev_w)  ELSE CASE WHEN coalesce(nr_horas_w,0)=0 THEN coalesce(dt_chegada_prev_w,dt_agenda_w)  ELSE coalesce(hr_inicio_w,dt_chegada_prev_w) - coalesce(nr_horas_w,0)/24 END  END ,
						ie_solicitacao_w,
						cd_convenio_w,
						cd_categoria_w,
						'A',
						'CG',
						nr_atendimento_w,
						cd_tipo_acomodacao_w,
						cd_medico_resp_w,
						CASE WHEN ie_preencher_clinica_auto_w='S' THEN null  ELSE 2 END ,
						cd_procedimento_w,
						ie_origem_proced_w,
						cd_doenca_cid_w,
						nr_seq_agenda_w,
						nm_usuario_p,
						clock_timestamp(),
						cd_plano_w,
						nm_paciente_w,
						cd_tipo_agenda_w,
						nr_telefone_w,
						ds_observacao_w,
						CASE WHEN ie_busca_senha_GAC_w='S' THEN  ds_senha_w  ELSE '' END ,
						CASE WHEN ie_preenche_diaria_GAC_w='S' THEN  qt_diaria_w  ELSE null END ,
						CASE WHEN ie_busca_guia_GAC_w='S' THEN  nr_doc_convenio_w  ELSE '' END ,
						substr(gv_obter_se_proc_biobanco(nr_seq_agenda_w),1,1),
						nr_seq_proc_interno_w,
						cd_especialidade_medica_w,
						ie_tipo_atend_w,
						nr_seq_classif_atend_w,
						cd_procedencia_w);
					commit;

					SELECT * FROM obter_reg_regulacao_gest_vagas(ie_solicitacao_w, 'CG', ie_espec_valid_w, ie_cid_valid_w) INTO STRICT ie_espec_valid_w, ie_cid_valid_w;

					if ((coalesce(ie_espec_valid_w, 'N') = 'N') or ((coalesce(ie_espec_valid_w, 'N') = 'S') and (coalesce(cd_especialidade_medica_w, 0) > 0)))
						and ((coalesce(ie_cid_valid_w, 'N') = 'N') or ((coalesce(ie_cid_valid_w, 'N') = 'S') and (cd_doenca_cid_w IS NOT NULL AND cd_doenca_cid_w::text <> ''))) then
						ie_consistencia_w := CONSISTIR_REGULACAO(nr_atendimento_w, nr_sequencia_w, 'GESTAO_VAGA', ie_consistencia_w);
					end if;

					If (ie_busca_proced_adic_GAC_w = 'S') and (nr_sequencia_w > 0) then
						insert	into gestao_vaga_proc(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							cd_procedimento,
							ie_origem_proced,
							nr_seq_gestao,
							cd_procedimento_tuss,
							cd_medico,
							nr_seq_proc_interno)
						SELECT	nextval('gestao_vaga_proc_seq'),
							clock_timestamp(),
							nm_usuario_p,
							cd_procedimento,
							ie_origem_proced,
							nr_sequencia_w,
							cd_procedimento_tuss,
							cd_medico,
							nr_seq_proc_interno
						from	agenda_paciente_proc
						where	nr_sequencia = nr_seq_agenda_w;
						commit;
					end if;		
				end if;				
				end;
			end if;
		end if;	
		ie_inserir_w := True;
	end loop;
	close C01;	
	end;	
elsif (cd_tipo_agenda_p in (2,5)) then
	begin

	open C02;
	loop
		fetch C02 into	
			cd_pessoa_fisica_w,
			dt_agenda_w,
			cd_medico_resp_w,
			cd_procedimento_w,
			nr_seq_proc_interno_w,
			ie_origem_proced_w,
			cd_convenio_w,
			cd_categoria_w,
			nr_atendimento_w,
			cd_tipo_acomodacao_w,
			cd_doenca_cid_w,
			cd_estabelecimento_w,
			nr_seq_agenda_w,
			cd_plano_w,
			nm_paciente_w,
			cd_tipo_agenda_w,
			nr_telefone_w,
			ds_observacao_w,
			hr_inicio_w,
			ie_tipo_atend_w,
			nr_seq_classif_atend_w,
			cd_procedencia_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */

		nr_seq_gestao_vaga_w  := 0;
		if (ie_consiste_sem_pf_dup_w = 'S') then
			select 	obter_seq_gestao_vaga_tipo(nr_seq_agenda_w,cd_tipo_agenda_w)
			into STRICT	nr_seq_gestao_vaga_w
			;
		end if;
	
		if ((ie_consiste_sem_pf_dup_w = 'N') or (nr_seq_gestao_vaga_w  = 0))then

			-- Ivan em 21/05/2007 OS56547
			select	consistir_solicitacao_vaga(cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p, 0)
			into STRICT	ie_existe_w
			;

			-- Ivan em 26/12/2007 OS77893
			select	consistir_atend_internado(cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p)
			into STRICT	ie_consiste_internado_w
			;
			
					
			if (ie_existe_w = 'N') and (ie_consiste_internado_w = 'S') and (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then
				begin
				
				
				if (cd_categoria_w IS NOT NULL AND cd_categoria_w::text <> '') and (ie_consistiu_acomodacao_w = 'N') then
					begin
					
					select	count(*)
					into STRICT	qt_existe_categoria_w
					from 	categoria_convenio
					where	cd_convenio	= cd_convenio_w
					and	cd_categoria	= cd_categoria_w;
					
					if (qt_existe_categoria_w = 0) then
						begin
						ie_inserir_w	:= False;
						ie_consistiu_categoria_w	:= 'S';
						if (coalesce(ds_agendas_incorretas_w::text, '') = '') then
							ds_agendas_incorretas_w := wheb_mensagem_pck.get_texto(281439,null)|| chr(13);
						end if;
						ds_agendas_incorretas_w := substr(ds_agendas_incorretas_w || chr(13)|| WHEB_MENSAGEM_PCK.get_texto(281435,'cd_pessoa_fisica='|| substr(obter_nome_pf(cd_pessoa_fisica_w),1,100)||';dt_agenda='|| to_char(dt_agenda_w, 'dd/mm/yyyy')), 1, 255);
						
						end;
					end if;
					
					end;
				end if;
				
				if (cd_tipo_acomodacao_w IS NOT NULL AND cd_tipo_acomodacao_w::text <> '') and (ie_consistiu_categoria_w	=	'N') and (ie_inserir_w)	then
				
					begin
					select	count(*)
					into STRICT	qt_existe_acomodacao_w
					from	tipo_acomodacao
					where	cd_tipo_acomodacao = cd_tipo_acomodacao_w;
					
					if (qt_existe_acomodacao_w = 0)	then
						begin
						ie_inserir_w	:= False;
						ie_consistiu_acomodacao_w	:= 'S';
						if (coalesce(ds_agendas_incorretas_w::text, '') = '') then
							ds_agendas_incorretas_w := wheb_mensagem_pck.get_texto(281440,null)|| chr(13);
						end if;
						ds_agendas_incorretas_w := substr(ds_agendas_incorretas_w || chr(13)|| WHEB_MENSAGEM_PCK.get_texto(281435,'cd_pessoa_fisica='|| substr(obter_nome_pf(cd_pessoa_fisica_w),1,100)||';dt_agenda='|| to_char(dt_agenda_w, 'dd/mm/yyyy')), 1, 255);
						end;
					end if;
					
					end;
				end if;

				if (ie_inserir_w) then
			
					select	nextval('gestao_vaga_seq')
					into STRICT	nr_sequencia_w
					;
					
					insert into gestao_vaga(
						nr_sequencia,
						cd_estabelecimento,
						cd_pessoa_fisica,
						dt_atualizacao,
						nm_usuario,
						dt_solicitacao,
						dt_prevista,
						ie_solicitacao,
						cd_convenio,
						cd_categoria,
						ie_status,
						ie_tipo_vaga,
						nr_atendimento,
						cd_tipo_acomod_desej,
						cd_medico,
						ie_clinica,
						cd_procedimento,
						nr_seq_proc_interno,
						ie_origem_proced,
						cd_cid_principal,
						nr_seq_agenda,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						cd_plano_convenio,
						nm_paciente,
						cd_tipo_agenda,
						nr_telefone,
						ds_observacao,
						ie_tipo_atendimento,
						nr_seq_classif_atend,
						cd_procedencia)
					values (
						nr_sequencia_w,
						cd_estabelecimento_w,
						cd_pessoa_fisica_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						CASE WHEN ie_data_agenda_w='S' THEN hr_inicio_w  ELSE CASE WHEN coalesce(nr_horas_w,0)=0 THEN dt_agenda_w  ELSE hr_inicio_w - coalesce(nr_horas_w,0)/24 END  END ,
						'I',
						cd_convenio_w,
						cd_categoria_w,
						'A',
						'CG',
						nr_atendimento_w,
						cd_tipo_acomodacao_w,
						cd_medico_resp_w,
						CASE WHEN ie_preencher_clinica_auto_w='S' THEN null  ELSE 2 END ,
						cd_procedimento_w,
						nr_seq_proc_interno_w,
						ie_origem_proced_w,
						cd_doenca_cid_w,
						nr_seq_agenda_w,
						nm_usuario_p,
						clock_timestamp(),
						cd_plano_w,
						nm_paciente_w,
						cd_tipo_agenda_w,
						nr_telefone_w,
						ds_observacao_w,
						ie_tipo_atend_w,
						nr_seq_classif_atend_w,
						cd_procedencia_w);
					commit;

					SELECT * FROM obter_reg_regulacao_gest_vagas('I', 'CG', ie_espec_valid_w, ie_cid_valid_w) INTO STRICT ie_espec_valid_w, ie_cid_valid_w;

					if (coalesce(ie_espec_valid_w, 'N') = 'N') and (coalesce(ie_cid_valid_w, 'N') = 'N') then
						ie_consistencia_w := CONSISTIR_REGULACAO(nr_atendimento_w, nr_sequencia_w, 'GESTAO_VAGA', ie_consistencia_w);
					end if;

					if ((coalesce(ie_cid_valid_w, 'N') = 'S') and (cd_doenca_cid_w IS NOT NULL AND cd_doenca_cid_w::text <> '')) then
						ie_consistencia_w := CONSISTIR_REGULACAO(nr_atendimento_w, nr_sequencia_w, 'GESTAO_VAGA', ie_consistencia_w);
					end if;
				
				end if;
				end;
			end if;
		
		end if;
		ie_inserir_w := True;
	end loop;
	close C02;
	end;
end if;

if (ds_agendas_incorretas_w IS NOT NULL AND ds_agendas_incorretas_w::text <> '') then
	ds_erro_p := ds_agendas_incorretas_w;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_necessidade_vaga_agenda (( dt_agenda_p timestamp, dt_fim_agenda_p timestamp, cd_estabelecimento_p bigint, cd_tipo_agenda_p bigint, ie_status_agenda_p text, cd_agenda_p bigint, nm_usuario_p text, ie_tipo_atendimento_p bigint, ds_erro_p INOUT text) IS  cd_tipo_acomodacao_w smallint) FROM PUBLIC;

