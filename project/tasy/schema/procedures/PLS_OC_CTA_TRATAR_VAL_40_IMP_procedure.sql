-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_40_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
nr_indice_w				integer;
count_especialidade_w			integer;
ie_gerar_ocorrencia_w			varchar(1);
tb_seq_selecao_w			pls_util_cta_pck.t_number_table;
tb_valido_w				pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w				pls_util_cta_pck.t_varchar2_table_4000;

-- Informações da validação de não-utilização de item autorizado
C01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	val.nr_seq_proc_espec,
		val.nr_seq_proc_espec_solic,
		(	SELECT	max(exec.cd_espec_medica)
			from	pls_oc_proc_especialidade SELECT
			where	exec.nr_sequencia	= nr_seq_proc_espec)		cd_especialidade_exec,
		(	select	max(solic.cd_espec_medica)
			from	pls_oc_proc_especialidade solic
			where	solic.nr_sequencia	= nr_seq_proc_espec_solic) 	cd_especialidade_solic
	from	pls_oc_cta_val_proc_espec	val
	where	val.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc;

--Executor
C02 CURSOR(	nr_id_transacao_pc			pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	sel.nr_sequencia			nr_seq_selecao,
		null					ds_observacao,
		proc.ie_origem_proced_conv		ie_origem_proced_conv,
		proc.cd_procedimento_conv		cd_procedimento_conv,
		conta.cd_profissional_exec_conv 	cd_prof_med_conv
	from	pls_oc_cta_selecao_imp			sel,
		pls_conta_proc_imp			proc,
		pls_conta_imp 				conta
	where	sel.nr_id_transacao			= nr_id_transacao_pc
	and	sel.ie_valido 				= 'S'
	and	proc.nr_sequencia			= sel.nr_seq_conta_proc
	and	conta.nr_sequencia 			= proc.nr_seq_conta
	and	(conta.cd_profissional_exec_conv IS NOT NULL AND conta.cd_profissional_exec_conv::text <> '')
	and not exists (	SELECT	1
			from 	pls_conta_item_equipe_imp 	part
			where	part.nr_seq_conta_proc 		= proc.nr_sequencia)
	
union all

	select	sel.nr_sequencia			nr_seq_selecao,
		null					des_observacao,
		proc.ie_origem_proced_conv		ie_origem_proced_conv,
		proc.cd_procedimento_conv		cd_procedimento_conv,
		part.cd_profissional_conv		cd_prof_med_conv
	from	pls_oc_cta_selecao_imp			sel,
		pls_conta_proc_imp			proc,
		pls_conta_imp				conta,
		pls_conta_item_equipe_imp		part
	where	sel.nr_id_transacao 			= nr_id_transacao_pc
	and	sel.ie_valido 				= 'S'
	and	proc.nr_sequencia			= sel.nr_seq_conta_proc
	and	part.nr_seq_conta_proc			= proc.nr_sequencia
	and	(part.cd_profissional_conv IS NOT NULL AND part.cd_profissional_conv::text <> '')
	and	conta.nr_sequencia 			= proc.nr_seq_conta;

--Solicitante
C03 CURSOR(	nr_id_transacao_pc			pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	sel.nr_sequencia			nr_seq_selecao,
		null					ds_observacao,
		proc.ie_origem_proced_conv		ie_origem_proced_conv,
		proc.cd_procedimento_conv		cd_procedimento_conv,
		conta.cd_profissional_solic_conv	cd_prof_med_conv
	from	pls_oc_cta_selecao_imp			sel,
		pls_conta_proc_imp			proc,
		pls_conta_imp				conta
	where	sel.nr_id_transacao			= nr_id_transacao_pc
	and	sel.ie_valido				= 'S'
	and	proc.nr_sequencia			= sel.nr_seq_conta_proc
	and	conta.nr_sequencia			= proc.nr_seq_conta
	and	(conta.cd_profissional_solic_conv IS NOT NULL AND conta.cd_profissional_solic_conv::text <> '');
BEGIN
-- Deve existir informação da regra para executar a validação
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') and (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '')  then

	for	r_C01_w in C01(nr_seq_combinada_p) loop
		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', 'N', nr_id_transacao_p, null);
		--limpa as variáveis
		SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
		nr_indice_w	:= 0;
		--Médico Executor
		if (r_C01_w.nr_seq_proc_espec IS NOT NULL AND r_C01_w.nr_seq_proc_espec::text <> '') then
			--Abre cursor com médico executor
			for	r_C02_w in C02(nr_id_transacao_p) loop

				ie_gerar_ocorrencia_w := 'N';
				--Se a especialidade for nula considera que pode ter qualquer especilidade para o médico desde que o procedimento esteja liberado
				if (r_C01_w.cd_especialidade_exec IS NOT NULL AND r_C01_w.cd_especialidade_exec::text <> '') then
					--Verifica se o médico possuí a especialidade
					select	count(1)
					into STRICT	count_especialidade_w
					from	medico_especialidade
					where	cd_pessoa_fisica 	= r_C02_w.cd_prof_med_conv
					and	cd_especialidade 	= r_C01_w.cd_especialidade_exec;
					-- Caso médico não possua especialidade gera ocorrência
					if (count_especialidade_w > 0) then
						--Verifica se procedimento e especialidade estão liberados na regra
						select	count(1)
						into STRICT	count_especialidade_w
						from	table(pls_grupos_pck.obter_especialidade_proc(	r_C01_w.nr_seq_proc_espec,
													r_C02_w.ie_origem_proced_conv,
													r_C02_w.cd_procedimento_conv	)) esp
						where	esp.cd_espec_medica	= r_C01_w.cd_especialidade_exec;
						--Caso não estejam liberados gera ocorrência
						if (count_especialidade_w = 0) then
							ie_gerar_ocorrencia_w := 'S';
						end if;
					else
						ie_gerar_ocorrencia_w := 'S';
					end if;
				else
					--Verifica se o procedimento está liberado na regra
					select	count(1)
					into STRICT	count_especialidade_w
					from	table(pls_grupos_pck.obter_especialidade_proc(	r_C01_w.nr_seq_proc_espec,
												r_C02_w.ie_origem_proced_conv,
												r_C02_w.cd_procedimento_conv	));
					--Se o procedimento não estiver liberado gera ocorrência
					if (count_especialidade_w = 0) then
						ie_gerar_ocorrencia_w := 'S';
					end if;
				end if;

				if (ie_gerar_ocorrencia_w = 'S') then

					tb_seq_selecao_w(nr_indice_w) := r_C02_w.nr_seq_selecao;
					tb_valido_w(nr_indice_w)      := 'S';
					tb_observacao_w(nr_indice_w)  := null;
					--Verifica o número de registros armazenados, caso tenha atingido limite grava os mesmos na tablela
					if (nr_indice_w >= pls_util_pck.qt_registro_transacao_w) then
						--Grava o que restar nas variáveis na tabela
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ');
						--limpa as variáveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
						nr_indice_w := 0;
					else
						nr_indice_w := nr_indice_w + 1;
					end if;
				end if;
			end loop;--C02
		end if;

		--Médico Solicitante
		if (r_C01_w.nr_seq_proc_espec_solic IS NOT NULL AND r_C01_w.nr_seq_proc_espec_solic::text <> '') then
			--Abre cursor médico Solicitante
			for	r_C03_w in C03(nr_id_transacao_p) loop

				ie_gerar_ocorrencia_w := 'N';
				--Se a especialidade for nula considera que pode ter qualquer especilidade para o médico desde que o procedimento esteja liberado
				if (r_C01_w.cd_especialidade_solic IS NOT NULL AND r_C01_w.cd_especialidade_solic::text <> '') then
					--Verifica se o médico possuí a especialidade
					select	count(1)
					into STRICT	count_especialidade_w
					from	medico_especialidade
					where	cd_pessoa_fisica 	= r_C03_w.cd_prof_med_conv
					and	cd_especialidade 	= r_C01_w.cd_especialidade_solic;
					-- Caso médico não possua especialidade gera ocorrência
					if (count_especialidade_w > 0) then
						--Verifica se procedimento e especialidade estão liberados na regra
						select	count(1)
						into STRICT	count_especialidade_w
						from	table(pls_grupos_pck.obter_especialidade_proc(	r_C01_w.nr_seq_proc_espec_solic,
													r_C03_w.ie_origem_proced_conv,
													r_C03_w.cd_procedimento_conv	)) esp
						where	esp.cd_espec_medica	= r_C01_w.cd_especialidade_solic;
						--Caso não estejam liberados gera ocorrência
						if (count_especialidade_w = 0) then
							ie_gerar_ocorrencia_w := 'S';
						end if;
					else
						ie_gerar_ocorrencia_w := 'S';
					end if;
				else
					--Verifica se o procedimento está liberado na regra
					select	count(1)
					into STRICT	count_especialidade_w
					from	table(pls_grupos_pck.obter_especialidade_proc(	r_C01_w.nr_seq_proc_espec_solic,
												r_C03_w.ie_origem_proced_conv,
												r_C03_w.cd_procedimento_conv	));
					--Se o procedimento não estiver liberado gera ocorrência
					if (count_especialidade_w = 0) then
						ie_gerar_ocorrencia_w := 'S';
					end if;
				end if;

				if (ie_gerar_ocorrencia_w = 'S') then

					tb_seq_selecao_w(nr_indice_w) := r_C03_w.nr_seq_selecao;
					tb_valido_w(nr_indice_w)      := 'S';
					tb_observacao_w(nr_indice_w)  := null;
					--Verifica o número de registros armazenados, caso tenha atingido limite grava os mesmos na tablela
					if (nr_indice_w >= pls_util_pck.qt_registro_transacao_w) then
						--Grava o que restar nas variáveis na tabela
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ');
						--limpa as variáveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
						nr_indice_w := 0;
					else
						nr_indice_w := nr_indice_w + 1;
					end if;
				end if;
			end loop;--C03
		end if;
		--Se tiver alguma informaçõa grava na tabela
		CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
								tb_observacao_w, nr_id_transacao_p,
								'SEQ');
		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N',
							ie_regra_excecao_p, null,
							nr_id_transacao_p, null);
	end loop; -- C01
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_40_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

