-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_ageint_lib_usuario (nr_seq_ageint_p bigint, cd_estabelecimento_p bigint, cd_estab_agenda_p bigint, nr_seq_regiao_p bigint, cd_estab_multimed_p bigint, cd_empresa_multimed_p bigint, nm_usuario_p text, ie_transferencia_p text, ds_itens_selec_p text, cd_medico_exec_p text, dt_agenda_p timestamp, cd_regiao_p bigint default null, ie_genero_prof_p text default 'A', ie_limitrofes_p text default 'N') IS cd_paciente_w varchar(10) RETURNS varchar AS $body$
DECLARE

ds_retorno_w  varchar(1) := 'S';

BEGIN
if (nr_seq_regra_p IS NOT NULL AND nr_seq_regra_p::text <> '') and (coalesce(qt_idade_pac_w,0) >= 0) then
	SELECT coalesce(Max(qt_idade_min),0),
		  coalesce(Max(qt_idade_max),999)
	INTO STRICT qt_idade_min_w,
		qt_idade_max_w
	FROM agenda_medico
	WHERE nr_sequencia = nr_seq_regra_p;

	IF (qt_idade_pac_w < qt_idade_min_w) OR (qt_idade_pac_w > qt_idade_max_w) THEN
		ds_retorno_w := 'N';
	END IF;
end if;
RETURN ds_retorno_w;
END;

BEGIN
  qt_feriado_w := obter_se_feriado(cd_estabelecimento_p, dt_agenda_p);
  DS_SIGLA_MED_REF_W := AGEINT_OBTER_SIGLA_MED_REF();
  nr_glosa_part_w := 99;
  SELECT MAX(obter_pf_usuario(nm_usuario_p, 'C')) INTO STRICT cd_pessoa_usuario_w;

  DELETE FROM ageint_consistencia WHERE nr_seq_ageint = nr_seq_ageint_p;

  ie_estab_usuario_w            := coalesce(obter_valor_param_usuario(869,
                                                                 1,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'S');
  ie_setor_usuario_w            := coalesce(obter_valor_param_usuario(869,
                                                                 2,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');
  ie_perfil_usuario_w           := coalesce(obter_valor_param_usuario(869,
                                                                 3,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');
  ie_apres_med_excl_w           := coalesce(obter_valor_param_usuario(869,
                                                                 85,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');
  ie_consiste_regra_lib_w       := coalesce(obter_valor_param_usuario(869,
                                                                 164,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');
  ie_regras_agecons_w           := coalesce(obter_valor_param_usuario(869,
                                                                 174,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');
  ie_consiste_cobert_adic_w     := coalesce(obter_valor_param_usuario(869,
                                                                 177,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');
  ie_perm_transf_exec_w         := coalesce(obter_valor_param_usuario(869,
                                                                 292,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');
  ie_cons_perm_agenda_w         := coalesce(obter_valor_param_usuario(869,
                                                                 374,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');
  ie_valida_conv_lib_estab_ag_w := coalesce(obter_valor_param_usuario(869,
                                                                 388,
                                                                 obter_perfil_ativo,
                                                                 nm_usuario_p,
                                                                 cd_estabelecimento_p),
                                       'N');

  ie_bloq_glosa_part_w := obter_param_usuario(869, 187, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_bloq_glosa_part_w);
  ie_multimed_w := obter_param_usuario(0, 198, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_multimed_w);

  IF (ie_bloq_glosa_part_w = 'N') THEN
    nr_glosa_part_w := 8;
  END IF;

  DELETE FROM ageint_horarios_usuario WHERE nm_usuario = nm_usuario_p;

  DELETE FROM ageint_lib_usuario
   WHERE nr_seq_ageint = nr_seq_ageint_p
     AND nm_usuario = nm_usuario_p;

  COMMIT;

  SELECT COUNT(*)
    INTO STRICT qt_tipo_exame_w
    FROM agenda_integrada_item
   WHERE nr_seq_agenda_int = nr_seq_ageint_p
     AND ie_tipo_agendamento = 'E';

  SELECT COUNT(*)
    INTO STRICT qt_tipo_cons_w
    FROM agenda_integrada_item
   WHERE nr_seq_agenda_int = nr_seq_ageint_p
     AND ie_tipo_agendamento = 'C';

  SELECT COUNT(*)
    INTO STRICT qt_tipo_serv_w
    FROM agenda_integrada_item
   WHERE nr_seq_agenda_int = nr_seq_ageint_p
     AND ie_tipo_agendamento = 'S';

  SELECT MAX(cd_pessoa_fisica),
         COALESCE(max(obter_sexo_pf(cd_pessoa_fisica, 'C')), max(ie_sexo)),
         COALESCE(max(obter_idade_pf(a.cd_pessoa_fisica,clock_timestamp(),'A')),max(obter_idade(a.dt_nascimento, clock_timestamp(), 'A')))
    INTO STRICT cd_paciente_w,
          ie_sexo_paciente_w,
          qt_idade_pac_w
    FROM agenda_integrada a
   WHERE nr_sequencia = nr_seq_ageint_p;

  IF (DS_SIGLA_MED_REF_W IS NOT NULL AND DS_SIGLA_MED_REF_W::text <> '') THEN
	CD_MEDICO_REF_W := obter_dados_pf(cd_paciente_w,'M');
  END IF;

  OPEN c10;
  LOOP
    FETCH c10
      INTO nr_seq_ageint_item_w,
           ie_tipo_agendamento_w,
           nr_seq_proc_interno_w,
           cd_procedimento_w,
           ie_origem_proced_w,
           nr_seq_agenda_cons_w,
           nr_seq_agenda_exame_w,
           cd_especialidade_w,
           nr_seq_area_atuacao_w,
           cd_medico_agecons_w,
           ie_anestesia_w,
           nr_seq_grupo_selec_w,
           nr_seq_agrupamento_w,
           ie_status_agenda_w,
           ie_genero_prof_w,
           nr_seq_agrup_setor_w,
		   ie_rodizio_especialidade_w,
	   nr_seq_topografia_w;
    EXIT WHEN NOT FOUND; /* apply on c10 */
    BEGIN

      IF ((ie_status_agenda_w <> 'E') OR (ie_perm_transf_exec_w = 'S')) OR (ie_transferencia_p = 'N') THEN
        IF (nr_seq_grupo_selec_w IS NOT NULL AND nr_seq_grupo_selec_w::text <> '') THEN
          SELECT MAX(x.nr_seq_area)
            INTO STRICT nr_seq_area_selec_w
            FROM agenda_int_grupo x
           WHERE x.nr_sequencia = nr_seq_grupo_selec_w;
        ELSE
          nr_seq_area_selec_w := NULL;
        END IF;

        IF (ie_consiste_cobert_adic_w = 'S') THEN
          SELECT COUNT(*)
            INTO STRICT qt_item_adic_w
            FROM ageint_exame_adic_item
           WHERE nr_seq_item = nr_seq_ageint_item_w;

          IF (qt_item_adic_w > 0) THEN
            SELECT COUNT(*)
              INTO STRICT qt_item_bloq_w
              FROM ageint_exame_adic_item a
             WHERE a.nr_seq_item = nr_seq_ageint_item_w
               AND ((coalesce(a.ie_regra, 0) IN (1, 2, 5, nr_glosa_part_w)) OR (coalesce(a.ie_glosa, 'X') = 'T'))
               AND NOT EXISTS
             (SELECT 1
                      FROM ageint_exame_adic_item x
                     WHERE a.nr_sequencia = x.nr_seq_origem
                       AND ((coalesce(x.ie_regra, 0) NOT IN (1, 2, 5, nr_glosa_part_w)) OR (coalesce(x.ie_glosa, 'X') <> 'T')));
          END IF;

        END IF;
        IF (qt_item_bloq_w = 0) OR (qt_item_adic_w = 0) THEN

          SELECT cd_convenio,
                 cd_categoria,
                 cd_estabelecimento,
                 cd_plano
            INTO STRICT cd_convenio_w,
                 cd_categoria_w,
                 cd_estabelecimento_w,
                 cd_plano_w
            FROM agenda_integrada
           WHERE nr_sequencia = nr_seq_ageint_p;

          SELECT MAX(cd_convenio),
                 MAX(cd_categoria),
                 MAX(cd_plano)
            INTO STRICT cd_conv_item_w,
                 cd_categ_item_w,
                 cd_plano_item_w
            FROM agenda_integrada_conv_item
           WHERE nr_seq_agenda_item = nr_seq_ageint_item_w;

          IF (cd_conv_item_w IS NOT NULL AND cd_conv_item_w::text <> '') THEN
            cd_convenio_w  := cd_conv_item_w;
            cd_categoria_w := cd_categ_item_w;
            cd_plano_w     := cd_plano_item_w;
          END IF;

          IF (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') THEN
            SELECT substr(a.ds_convenio, 1, 30)
              INTO STRICT ds_convenio_w
              FROM convenio a
             WHERE a.cd_convenio = cd_convenio_w;
          END IF;

          IF (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') AND
             ((coalesce(cd_procedimento_w::text, '') = '') OR (coalesce(ie_origem_proced_w::text, '') = '')) THEN
            SELECT * FROM obter_proc_tab_interno_conv(nr_seq_proc_interno_w, cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, cd_plano_w, NULL, cd_procedimento_w, ie_origem_proced_w, NULL, clock_timestamp(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
          END IF;

          SELECT coalesce(MAX(cd_area_procedimento), 0),
                 coalesce(MAX(cd_especialidade), 0),
                 coalesce(MAX(cd_grupo_proc), 0)
            INTO STRICT cd_area_proced_w,
                 cd_espec_proced_w,
                 cd_grupo_proced_w
            FROM estrutura_procedimento_v
           WHERE cd_procedimento = cd_procedimento_w
             AND ie_origem_proced = ie_origem_proced_w;

          IF (qt_tipo_cons_w > 0) AND (ie_tipo_agendamento_w = 'C') THEN
          
            OPEN c50;
            LOOP

              FETCH c50
                INTO cd_pessoa_fisica_w,
                     cd_agenda_w,
                     cd_estabelecimento_w,
                     cd_setor_exclusivo_w,
                     cd_perfil_exclusivo_w,
                     ie_regra_turno_medico_w;
              EXIT WHEN NOT FOUND; /* apply on c50 */
              BEGIN
			
                ------- Verifica Agenda --------------------
                SELECT CASE WHEN COUNT(1)=0 THEN  'N'  ELSE 'S' END 
                  INTO STRICT ie_bloqueio_quest_w
                  FROM (SELECT 1
                          FROM ageint_resp_quest_item  i,
                               ageint_resp_quest       q,
                               ageint_quest_regra_bloq b,
                               ageint_quest_utilizacao aqu
                         WHERE aqu.nr_sequencia = b.nr_seq_quest_utilizacao
                           AND b.nr_seq_quest_utilizacao = i.nr_seq_quest_utilizacao
                           AND b.nr_seq_estrutura = q.nr_seq_estrutura
                           AND i.nr_seq_resp_quest = q.nr_sequencia
                           AND b.nr_seq_resposta = q.nr_seq_resp
                           AND b.ie_situacao = 'A'
                           AND b.ie_bloquear = 'S'
                           AND NOT EXISTS (SELECT 1
                                  FROM ageint_quest_regra_bl_item x
                                 WHERE b.nr_sequencia = x.nr_seq_regra_bloq
                                   AND x.ie_situacao = 'A')
                           AND q.nr_seq_ageint = nr_seq_ageint_p
                           AND i.nr_seq_item = nr_seq_ageint_item_w
                        
UNION ALL

                        SELECT 1
                          FROM ageint_resp_quest_item     i,
                               ageint_resp_quest          q,
                               ageint_quest_regra_bloq    b,
                               ageint_quest_regra_bl_item c,
                               ageint_quest_utilizacao    aqu
                         WHERE aqu.nr_sequencia = b.nr_seq_quest_utilizacao
                           AND b.nr_seq_quest_utilizacao = i.nr_seq_quest_utilizacao
                           AND b.nr_seq_estrutura = q.nr_seq_estrutura
                           AND i.nr_seq_resp_quest = q.nr_sequencia
                           AND b.nr_seq_resposta = q.nr_seq_resp
                           AND b.nr_sequencia = c.nr_seq_regra_bloq
                           AND b.ie_situacao = 'A'
                           AND b.ie_bloquear = 'S'
                           AND c.ie_situacao = 'A'
                           AND q.nr_seq_ageint = nr_seq_ageint_p
                           AND i.nr_seq_item = nr_seq_ageint_item_w
                           AND c.cd_agenda = cd_agenda_w) alias2;
			
                IF ie_bloqueio_quest_w = 'S' THEN
                  GOTO next_c50;
                END IF;
                -------------------------------------------------------
              
                --INICIO - Obter informacoes macros
                IF (cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '') THEN
                  SELECT substr(obter_nome_medico_combo_agcons(cd_estabelecimento_w,
                                                               cd_agenda_w,
                                                               3,
                                                               'N'),
                                1,
                                60)
                    INTO STRICT ds_agenda_w
;
                END IF;
                --FIM - Obter informacoes macros          
                ie_perm_agenda_w       := 'S';
                ie_bloqueio_estab_w    := 'N';
                ie_conv_lib_estab_ag_w := 'S';

                IF (ie_estab_usuario_w = 'S') THEN
                  IF (cd_estabelecimento_w <> cd_estabelecimento_p) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                ELSIF (((ie_estab_usuario_w = 'C') OR (ie_estab_usuario_w = 'T')) AND (cd_estab_agenda_p IS NOT NULL AND cd_estab_agenda_p::text <> '')) THEN
                  IF (cd_estabelecimento_w <> cd_estab_agenda_p) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                ELSIF (ie_estab_usuario_w = 'N') OR
                      ((ie_estab_usuario_w = 'T') AND (coalesce(cd_estab_agenda_p::text, '') = '')) THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_estab_user_w
                    FROM usuario_estabelecimento_v
                   WHERE nm_usuario_param = nm_usuario_p
                     AND cd_estabelecimento = cd_estabelecimento_w;
                  IF (qt_estab_user_w = 0) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                END IF;
                IF (ie_setor_usuario_w = 'S') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_setor_user_w
                    FROM usuario_setor_v
                   WHERE nm_usuario = nm_usuario_p
                     AND cd_setor_atendimento = cd_setor_exclusivo_w;
                  IF (qt_setor_user_w = 0) AND (cd_setor_exclusivo_w IS NOT NULL AND cd_setor_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                ELSIF (ie_setor_usuario_w = 'N') THEN
                  IF (cd_setor_exclusivo_w IS NOT NULL AND cd_setor_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                END IF;
                IF (ie_perfil_usuario_w = 'S') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_perfil_user_w
                    FROM usuario_perfil
                   WHERE nm_usuario = nm_usuario_p
                     AND cd_perfil = cd_perfil_exclusivo_w;
                  IF (qt_perfil_user_w = 0) AND (cd_perfil_exclusivo_w IS NOT NULL AND cd_perfil_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                ELSIF (ie_perfil_usuario_w = 'N') THEN
                  IF (cd_perfil_exclusivo_w IS NOT NULL AND cd_perfil_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                ELSIF (ie_perfil_usuario_w = 'R') AND (coalesce(cd_agenda_w, 0) > 0) THEN
                  ie_perm_agenda_w := consistir_regra_perfil_agenda(obter_perfil_ativo,
                                                                    cd_agenda_w);
                END IF;

                SELECT COUNT(*)
                  INTO STRICT qt_regra_medico_w
                  FROM agenda_medico
                 WHERE cd_agenda = cd_agenda_w;

                IF (ie_regras_agecons_w = 'S') THEN
                  BEGIN
                    ie_permite_conv_w := ageint_consiste_regra_conv_lib(cd_convenio_w, cd_categoria_w, cd_agenda_w, cd_setor_exclusivo_w, cd_plano_w, cd_paciente_w, nr_seq_grupo_selec_w, ie_permite_conv_w, cd_estabelecimento_p);
                    IF (ie_permite_conv_w IS NOT NULL AND ie_permite_conv_w::text <> '') THEN
                      ie_perm_agenda_w := 'N';
                    END IF;

                  EXCEPTION
                    WHEN OTHERS THEN
                      ie_perm_agenda_w := 'N';
                  END;

                END IF;

                --Consistir as regras de permissao de visualizacao das agendas de consultas, funcao Agenda de Consultas > Configuracao > Permissao
                IF (ie_cons_perm_agenda_w = 'S') AND
                  --(cd_pessoa_fisica_w is not null) and
                   (cd_pessoa_usuario_w IS NOT NULL AND cd_pessoa_usuario_w::text <> '') THEN
                  BEGIN
                    ie_agenda_w := ageint_obter_se_perm_agecons(cd_pessoa_fisica_w,
                                                                cd_pessoa_usuario_w,
                                                                obter_perfil_ativo,
                                                                cd_agenda_w,
                                                                dt_agenda_p,
                                                                nm_usuario_p,
                                                                cd_estabelecimento_p);

                    IF (ie_agenda_w NOT IN ('L', 'T')) THEN
                      ie_perm_agenda_w := 'N';
                    END IF;

                  EXCEPTION
                    WHEN OTHERS THEN
                      ie_perm_agenda_w := 'S';
                  END;
                END IF;

                ie_conv_lib_agenda_w := obter_se_conv_lib_agenda(cd_agenda_w,
                                                                 cd_convenio_w);

                IF (ie_conv_lib_agenda_w = 'N') THEN
                  ie_perm_agenda_w := 'N';
                END IF;

                IF (ie_valida_conv_lib_estab_ag_w = 'S') THEN
                  SELECT CASE WHEN MAX(1)=1 THEN  'S'  ELSE 'C' END 
                    INTO STRICT ie_conv_lib_estab_ag_w
                    FROM convenio_estabelecimento b
                   WHERE b.cd_estabelecimento = cd_estabelecimento_w
                     AND b.cd_convenio = cd_convenio_w;
                END IF;

                if (coalesce(cd_estab_agenda_p::text, '') = '' and (cd_regiao_p IS NOT NULL AND cd_regiao_p::text <> '')) and (ie_perm_agenda_w = 'S') then
                                  
					ie_perm_agenda_w := obter_se_agenda_regiao(cd_agenda_w, cd_regiao_p, null, ie_limitrofes_p);

                end if;

                IF (ie_perm_agenda_w = 'S') AND (coalesce(cd_pessoa_fisica_w::text, '') = '') AND (qt_regra_medico_w > 0) THEN
				   
                  OPEN c30;
                  LOOP
                    FETCH c30
                      INTO cd_pessoa_fisica_w,
                           nr_seq_medico_regra_w,
                           nr_seq_med_w;
                    EXIT WHEN NOT FOUND; /* apply on c30 */
                    BEGIN
                      ie_faixa_etaria_w := obter_se_faixa_etaria(nr_seq_med_w);

                      ie_agenda_lib_w := coalesce(obter_se_agenda_integrada(cd_agenda_w,
                                                                       nr_seq_ageint_p,
                                                                       cd_estabelecimento_w,
                                                                       nr_seq_ageint_item_w,
                                                                       coalesce(cd_pessoa_fisica_w, cd_medico_exec_p),
                                                                       dt_agenda_p),
                                             'I');
                      ie_cancelado_w  := ageint_obter_status_agenda(coalesce(nr_seq_agenda_cons_w,
                                                                        0),
                                                                    coalesce(nr_seq_agenda_exame_w,
                                                                        0));

                      IF (ie_apres_med_excl_w = 'S') THEN
                        ie_regra_med_excl_w := ageint_obter_se_regra_med_ex(cd_pessoa_fisica_w,
                                                                            cd_agenda_w,
                                                                            nr_seq_proc_interno_w,
                                                                            nr_seq_ageint_p,
                                                                            cd_procedimento_w,
                                                                            ie_origem_proced_w);
                      END IF;
                      cd_medico_w := cd_pessoa_fisica_w;
                      IF (ie_tipo_agendamento_w <> 'C') THEN
                        IF (ie_regra_turno_medico_w = 'N') OR (ie_regra_med_excl_w = 'S') THEN
                          ie_prof_lib_w := ageint_obter_se_prof_item(nr_seq_ageint_item_w,
                                                                     cd_pessoa_fisica_w);
                        ELSE
                          SELECT COUNT(*)
                            INTO STRICT qt_medico_selecionado_w
                            FROM agenda_integrada_prof_item
                           WHERE nr_seq_agenda_item = nr_seq_ageint_item_w;

                          IF (qt_medico_selecionado_w = 0) THEN
                            cd_pessoa_fisica_w := NULL;
                            ie_prof_lib_w      := 'S';
                          ELSE
                            SELECT COUNT(*)
                              INTO STRICT qt_medico_selecionado_w
                              FROM agenda_integrada_prof_item
                             WHERE nr_seq_agenda_item = nr_seq_ageint_item_w
                               AND cd_pessoa_fisica = cd_pessoa_fisica_w;
                            IF (qt_medico_selecionado_w = 0) THEN
                              ie_prof_lib_w := 'N';
                            ELSE
                              ie_prof_lib_w := 'S';
                            END IF;
                          END IF;
                        END IF;
                        ie_perm_med_excl_exame_w := ageint_obter_regra_med_exame(cd_pessoa_fisica_w,
                                                                                 cd_agenda_w,
                                                                                 nr_seq_proc_interno_w,
                                                                                 nr_seq_ageint_p,
                                                                                 cd_procedimento_w,
                                                                                 ie_origem_proced_w);
                      ELSE
                        ie_prof_lib_w            := ageint_obter_se_prof_item(nr_seq_ageint_item_w,
                                                                              cd_pessoa_fisica_w);
                        ie_perm_med_excl_exame_w := 'S';
                      END IF;

                      IF (ie_conv_lib_estab_ag_w <> 'S') THEN
                        ie_agenda_lib_w := ie_conv_lib_estab_ag_w;
                      END IF;

                      --if  (ie_agenda_lib_w <> '') then
                      IF ((ie_faixa_etaria_w = 'S') AND (ie_agenda_lib_w = 'S') AND
                         ((ie_prof_lib_w = 'S' AND ie_perm_med_excl_exame_w = 'S') OR
                         (ie_tipo_agendamento_w = 'C' AND ie_prof_lib_w = 'S')) AND (ie_cancelado_w <> 'C')) OR (ie_lib_esp_w = 'S') THEN
                      
                        SELECT COUNT(*)
                          INTO STRICT qt_ageint_lib_w
                          FROM ageint_lib_usuario
                         WHERE cd_agenda = cd_agenda_w
                           AND (cd_pessoa_fisica = cd_pessoa_fisica_w OR (coalesce(cd_pessoa_fisica::text, '') = '' AND coalesce(cd_pessoa_fisica_w::text, '') = ''))
                           AND nr_seq_ageint = nr_seq_ageint_p
                           AND nr_seq_ageint_item = nr_seq_ageint_item_w;

                        IF ((qt_ageint_lib_w = 0) AND ((ie_tipo_agendamento_w = 'C') OR
                           (ie_regra_turno_medico_w = 'S' AND ie_regra_med_excl_w = 'N' AND ie_tipo_agendamento_w = 'E'))) OR
                           (((ie_tipo_agendamento_w = 'E') AND
                           ((ie_regra_turno_medico_w = 'N') OR (ie_regra_med_excl_w = 'S'))) OR (ie_tipo_agendamento_w = 'S')) THEN
                        
                          INSERT INTO ageint_lib_usuario(nr_sequencia,
                             cd_agenda,
                             nr_seq_ageint,
                             dt_atualizacao,
                             nm_usuario,
                             nr_seq_ageint_item,
                             cd_pessoa_fisica,
                             nr_seq_medico_regra,
							 nr_ordem_apres)
                          VALUES (nextval('ageint_lib_usuario_seq'),
                             cd_agenda_w,
                             nr_seq_ageint_p,
                             clock_timestamp(),
                             nm_usuario_p,
                             nr_seq_ageint_item_w,
                             cd_pessoa_fisica_w,
                             nr_seq_medico_regra_w,
							 CASE WHEN cd_pessoa_fisica_w=coalesce(cd_medico_agecons_w,'X') THEN 1 WHEN cd_pessoa_fisica_w=coalesce(CD_MEDICO_REF_W,'X') THEN 2  ELSE 3 END );

                          COMMIT;
                        END IF;
                      ELSIF (ie_agenda_lib_w <> 'S') AND (ie_agenda_lib_w <> 'I') AND (ie_agenda_lib_w <> 'NA') THEN
                        IF (ie_cancelado_w = 'C') THEN
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(307575); -- O item esta cancelado.
                        ELSIF (ie_agenda_lib_w = 'N') AND (ie_prof_lib_w <> 'A') THEN
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(307578,
                                                                           ';DS_AGENDA=' ||
                                                                           ds_agenda_w); -- O item nao esta liberado para a agenda #@DS_AGENDA#@.
                        ELSIF (ie_agenda_lib_w = 'SA') AND (ie_prof_lib_w <> 'A') THEN
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(307583,
                                                                           ';DS_AGENDA=' ||
                                                                           ds_agenda_w); -- Exame adicional do item nao esta liberado para a agenda #@DS_AGENDA#@.
                        ELSIF (ie_agenda_lib_w = 'C') THEN
                          -- O convenio #@DS_CONVENIO#@ nao esta liberado para o estabelecimento da agenda #@DS_AGENDA#@.
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(360511,
                                                                           'DS_CONVENIO=' ||
                                                                           ds_convenio_w ||
                                                                           ';DS_AGENDA=' ||
                                                                           ds_agenda_w);
                        END IF;
                        IF (ie_prof_lib_w = 'A') AND (ie_tipo_agendamento_w = 'E') THEN
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(307585); -- Idade incompativel com regra por medico
                        END IF;

                        BEGIN
                          SELECT 1
                            INTO STRICT qt_consistencia_exame_adic_w
                            FROM ageint_consistencia
                           WHERE nr_seq_ageint = nr_seq_ageint_p
                             AND nr_seq_item = nr_seq_ageint_item_w
                             AND cd_agenda = cd_agenda_w  LIMIT 1;
                          --and  ds_consistencia  = 'Exame adicional do item nao esta liberado para agenda.';
                        EXCEPTION
                          WHEN OTHERS THEN
                            qt_consistencia_exame_adic_w := 0;
                        END;

                        IF (qt_consistencia_exame_adic_w = 0) THEN
                          /*delete  ageint_consistencia
                          where  nr_seq_ageint  = nr_seq_ageint_p 
                          and  nr_seq_item  = nr_seq_Ageint_item_w;*/
                        
                          INSERT INTO ageint_consistencia(nr_sequencia,
                             nr_seq_item,
                             nr_seq_ageint,
                             ds_consistencia,
                             nm_usuario,
                             dt_atualizacao,
                             cd_agenda)
                          VALUES (nextval('ageint_consistencia_seq'),
                             nr_seq_ageint_item_w,
                             nr_seq_ageint_p,
                             ds_consistencia_w,
                             nm_usuario_p,
                             clock_timestamp(),
                             cd_agenda_w);
                        END IF;
                      END IF;
                      --end if;        
                      cd_pessoa_fisica_w := cd_medico_w;
                    END;
                  END LOOP;
                  CLOSE c30;

                ELSIF (ie_perm_agenda_w = 'S') THEN
                  ie_agenda_lib_w := coalesce(obter_se_agenda_integrada(cd_agenda_w,
                                                                   nr_seq_ageint_p,
                                                                   cd_estabelecimento_w,
                                                                   nr_seq_ageint_item_w,
                                                                   coalesce(cd_pessoa_fisica_w, cd_medico_exec_p),
                                                                   dt_agenda_p),
                                         'I');
                  ie_cancelado_w  := ageint_obter_status_agenda(coalesce(nr_seq_agenda_cons_w,
                                                                    0),
                                                                coalesce(nr_seq_agenda_exame_w,
                                                                    0));

                  cd_medico_w := cd_pessoa_fisica_w;
                  IF (ie_tipo_agendamento_w <> 'C') THEN
                    IF (ie_regra_turno_medico_w = 'N') THEN
                      ie_prof_lib_w := ageint_obter_se_prof_item(nr_seq_ageint_item_w,
                                                                 cd_pessoa_fisica_w);
                    ELSE
                      SELECT COUNT(*)
                        INTO STRICT qt_medico_selecionado_w
                        FROM agenda_integrada_prof_item
                       WHERE nr_seq_agenda_item = nr_seq_ageint_item_w;

                      IF (qt_medico_selecionado_w = 0) THEN
                        cd_pessoa_fisica_w := NULL;
                        ie_prof_lib_w      := 'S';
                      ELSE
                        SELECT COUNT(*)
                          INTO STRICT qt_medico_selecionado_w
                          FROM agenda_integrada_prof_item
                         WHERE nr_seq_agenda_item = nr_seq_ageint_item_w
                           AND cd_pessoa_fisica = cd_pessoa_fisica_w;
                        IF (qt_medico_selecionado_w = 0) THEN
                          ie_prof_lib_w := 'N';
                        ELSE
                          ie_prof_lib_w := 'S';
                        END IF;
                      END IF;
                    END IF;
                    ie_perm_med_excl_exame_w := ageint_obter_regra_med_exame(cd_pessoa_fisica_w,
                                                                             cd_agenda_w,
                                                                             nr_seq_proc_interno_w,
                                                                             nr_seq_ageint_p,
                                                                             cd_procedimento_w,
                                                                             ie_origem_proced_w);
                  ELSE
                    ie_prof_lib_w            := ageint_obter_se_prof_item(nr_seq_ageint_item_w,
                                                                          cd_pessoa_fisica_w);
                    ie_perm_med_excl_exame_w := 'S';
                  END IF;

                  IF (ie_conv_lib_estab_ag_w <> 'S') THEN
                    ie_agenda_lib_w := ie_conv_lib_estab_ag_w;
                  END IF;

                  IF (ie_agenda_lib_w = 'S') AND
                     ((ie_prof_lib_w = 'S' AND ie_perm_med_excl_exame_w = 'S') OR (ie_tipo_agendamento_w = 'C') AND (ie_prof_lib_w = 'S')) AND (ie_cancelado_w <> 'C') THEN
                  
                    SELECT COUNT(*)
                      INTO STRICT qt_ageint_lib_w
                      FROM ageint_lib_usuario
                     WHERE cd_agenda = cd_agenda_w
                       AND (cd_pessoa_fisica = cd_pessoa_fisica_w OR (coalesce(cd_pessoa_fisica::text, '') = '' AND coalesce(cd_pessoa_fisica_w::text, '') = ''))
                       AND nr_seq_ageint = nr_seq_ageint_p
                       AND nr_seq_ageint_item = nr_seq_ageint_item_w;

                    IF ((qt_ageint_lib_w = 0) AND
                       ((ie_tipo_agendamento_w = 'C') OR (ie_regra_turno_medico_w = 'S' AND ie_tipo_agendamento_w = 'E'))) OR
                       ((ie_tipo_agendamento_w = 'E' AND ie_regra_turno_medico_w = 'N') OR (ie_tipo_agendamento_w = 'S')) THEN
                    
                      INSERT INTO ageint_lib_usuario(nr_sequencia,
                         cd_agenda,
                         nr_seq_ageint,
                         dt_atualizacao,
                         nm_usuario,
                         nr_seq_ageint_item,
                         cd_pessoa_fisica,
                         nr_seq_medico_regra,
						 nr_ordem_apres)
                      VALUES (nextval('ageint_lib_usuario_seq'),
                         cd_agenda_w,
                         nr_seq_ageint_p,
                         clock_timestamp(),
                         nm_usuario_p,
                         nr_seq_ageint_item_w,
                         cd_pessoa_fisica_w,
                         nr_seq_medico_regra_w,
						 CASE WHEN cd_pessoa_fisica_w=coalesce(cd_medico_agecons_w,'X') THEN 1 WHEN cd_pessoa_fisica_w=coalesce(CD_MEDICO_REF_W,'X') THEN 2  ELSE 3 END );

                      COMMIT;
                    END IF;
                  ELSIF (ie_agenda_lib_w <> 'S') AND (ie_agenda_lib_w <> 'I') AND (ie_agenda_lib_w <> 'NA') THEN
                    IF (ie_cancelado_w = 'C') THEN
                      ds_consistencia_w := wheb_mensagem_pck.get_texto(307575); -- O item esta cancelado.
                    ELSIF (ie_agenda_lib_w = 'N') AND (ie_prof_lib_w <> 'A') THEN
                      ds_consistencia_w := wheb_mensagem_pck.get_texto(307578,
                                                                       ';DS_AGENDA=' ||
                                                                       ds_agenda_w); -- O item nao esta liberado para agenda.
                    ELSIF (ie_agenda_lib_w = 'SA') AND (ie_prof_lib_w <> 'A') THEN
                      ds_consistencia_w := wheb_mensagem_pck.get_texto(307583,
                                                                       ';DS_AGENDA=' ||
                                                                       ds_agenda_w); -- Exame adicional do item nao esta liberado para a agenda #@DS_AGENDA#@.
                    ELSIF (ie_agenda_lib_w = 'C') THEN
                      -- O convenio #@DS_CONVENIO#@ nao esta liberado para o estabelecimento da agenda #@DS_AGENDA#@.
                      ds_consistencia_w := wheb_mensagem_pck.get_texto(360511,
                                                                       'DS_CONVENIO=' ||
                                                                       ds_convenio_w ||
                                                                       ';DS_AGENDA=' ||
                                                                       ds_agenda_w);
                    END IF;
                    IF (ie_prof_lib_w = 'A') AND (ie_tipo_agendamento_w = 'E') THEN
                      ds_consistencia_w := wheb_mensagem_pck.get_texto(307585); -- Idade incompativel com regra por medico
                    END IF;

                    BEGIN
                      SELECT 1
                        INTO STRICT qt_consistencia_exame_adic_w
                        FROM ageint_consistencia
                       WHERE nr_seq_ageint = nr_seq_ageint_p
                         AND nr_seq_item = nr_seq_ageint_item_w
                         AND cd_agenda = cd_agenda_w  LIMIT 1;
                      --and  ds_consistencia  = 'Exame adicional do item nao esta liberado para agenda.';
                    EXCEPTION
                      WHEN OTHERS THEN
                        qt_consistencia_exame_adic_w := 0;
                    END;

                    IF (qt_consistencia_exame_adic_w = 0) THEN
                      /*delete  ageint_consistencia
                      where  nr_seq_ageint  = nr_seq_ageint_p 
                      and  nr_seq_item  = nr_seq_Ageint_item_w;*/
                    
                      INSERT INTO ageint_consistencia(nr_sequencia,
                         nr_seq_item,
                         nr_seq_ageint,
                         ds_consistencia,
                         nm_usuario,
                         dt_atualizacao,
                         cd_agenda)
                      VALUES (nextval('ageint_consistencia_seq'),
                         nr_seq_ageint_item_w,
                         nr_seq_ageint_p,
                         ds_consistencia_w,
                         nm_usuario_p,
                         clock_timestamp(),
                         cd_agenda_w);
                    END IF;
                  END IF;
                  cd_pessoa_fisica_w := cd_medico_w;

                END IF;
              END;
              <<next_c50>>
              NULL;
            END LOOP;
            CLOSE c50;

          END IF;

          IF (qt_tipo_exame_w > 0) AND (ie_tipo_agendamento_w = 'E') THEN
          
            OPEN c20;
            LOOP
              FETCH c20
                INTO cd_agenda_w,
                     cd_estabelecimento_w,
                     cd_setor_exclusivo_w,
                     cd_perfil_exclusivo_w,
                     ie_regra_turno_medico_w;
              EXIT WHEN NOT FOUND; /* apply on c20 */
              BEGIN
                ------- Verifica Agenda --------------------
                SELECT CASE WHEN COUNT(1)=0 THEN  'N'  ELSE 'S' END
                  INTO STRICT ie_bloqueio_quest_w
                  FROM (SELECT 1
                          FROM ageint_resp_quest_item  i,
                               ageint_resp_quest       q,
                               ageint_quest_regra_bloq b,
                               ageint_quest_utilizacao aqu
                         WHERE aqu.nr_sequencia = b.nr_seq_quest_utilizacao
                           AND b.nr_seq_quest_utilizacao = i.nr_seq_quest_utilizacao
                           AND b.nr_seq_estrutura = q.nr_seq_estrutura
                           AND i.nr_seq_resp_quest = q.nr_sequencia
                           AND b.nr_seq_resposta = q.nr_seq_resp
                           AND b.ie_situacao = 'A'
                           AND b.ie_bloquear = 'S'
                           AND NOT EXISTS (SELECT 1
                                  FROM ageint_quest_regra_bl_item x
                                 WHERE b.nr_sequencia = x.nr_seq_regra_bloq
                                   AND x.ie_situacao = 'A')
                           AND q.nr_seq_ageint = nr_seq_ageint_p
                           AND i.nr_seq_item = nr_seq_ageint_item_w
                        
UNION ALL

                        SELECT 1
                          FROM ageint_resp_quest_item     i,
                               ageint_resp_quest          q,
                               ageint_quest_regra_bloq    b,
                               ageint_quest_regra_bl_item c,
                               ageint_quest_utilizacao    aqu
                         WHERE aqu.nr_sequencia = b.nr_seq_quest_utilizacao
                           AND b.nr_seq_quest_utilizacao = i.nr_seq_quest_utilizacao
                           AND b.nr_seq_estrutura = q.nr_seq_estrutura
                           AND i.nr_seq_resp_quest = q.nr_sequencia
                           AND b.nr_seq_resposta = q.nr_seq_resp
                           AND b.nr_sequencia = c.nr_seq_regra_bloq
                           AND b.ie_situacao = 'A'
                           AND b.ie_bloquear = 'S'
                           AND c.ie_situacao = 'A'
                           AND q.nr_seq_ageint = nr_seq_ageint_p
                           AND i.nr_seq_item = nr_seq_ageint_item_w
                           AND c.cd_agenda = cd_agenda_w) alias2;

                IF ie_bloqueio_quest_w = 'S' THEN
                
                  GOTO next_c20;
                END IF;
                -------------------------------------------------------              
              
                --INICIO - Obter informacoes macros
                IF (cd_agenda_w IS NOT NULL AND cd_agenda_w::text <> '') THEN
                  SELECT substr(a.ds_agenda, 1, 60)
                    INTO STRICT ds_agenda_w
                    FROM agenda a
                   WHERE a.cd_agenda = cd_agenda_w;
                END IF;
                --FIM - Obter informacoes macros                    
                ie_perm_agenda_w       := 'S';
                ie_bloqueio_estab_w    := 'N';
                ie_conv_lib_estab_ag_w := 'S';
			
                IF (ie_estab_usuario_w = 'S') THEN
                  IF (cd_estabelecimento_w <> cd_estabelecimento_p) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                ELSIF (((ie_estab_usuario_w = 'C') OR (ie_estab_usuario_w = 'T')) AND (cd_estab_agenda_p IS NOT NULL AND cd_estab_agenda_p::text <> '')) THEN
                  IF (cd_estabelecimento_w <> cd_estab_agenda_p) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                ELSIF (ie_estab_usuario_w = 'N') OR
                      ((ie_estab_usuario_w = 'T') AND (coalesce(cd_estab_agenda_p::text, '') = '')) THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_estab_user_w
                    FROM usuario_estabelecimento_v
                   WHERE nm_usuario_param = nm_usuario_p
                     AND cd_estabelecimento = cd_estabelecimento_w;
                  IF (qt_estab_user_w = 0) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                END IF;
                IF (ie_setor_usuario_w = 'S') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_setor_user_w
                    FROM usuario_setor_v
                   WHERE nm_usuario = nm_usuario_p
                     AND cd_setor_atendimento = cd_setor_exclusivo_w;
                  IF (qt_setor_user_w = 0) AND (cd_setor_exclusivo_w IS NOT NULL AND cd_setor_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                ELSIF (ie_setor_usuario_w = 'N') THEN
                  IF (cd_setor_exclusivo_w IS NOT NULL AND cd_setor_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                END IF;
                IF (ie_perfil_usuario_w = 'S') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_perfil_user_w
                    FROM usuario_perfil
                   WHERE nm_usuario = nm_usuario_p
                     AND cd_perfil = cd_perfil_exclusivo_w;
                  IF (qt_perfil_user_w = 0) AND (cd_perfil_exclusivo_w IS NOT NULL AND cd_perfil_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                ELSIF (ie_perfil_usuario_w = 'N') THEN
                  IF (cd_perfil_exclusivo_w IS NOT NULL AND cd_perfil_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                ELSIF (ie_perfil_usuario_w = 'R') AND (coalesce(cd_agenda_w, 0) > 0) THEN
                  ie_perm_agenda_w := consistir_regra_perfil_agenda(obter_perfil_ativo,
                                                                    cd_agenda_w);
                END IF;
              			
                IF (nr_seq_regiao_p IS NOT NULL AND nr_seq_regiao_p::text <> '') then
					SELECT COUNT(*)
					INTO STRICT qt_regiao_w
					FROM agenda_regiao
					WHERE cd_agenda = cd_agenda_w
					AND nr_seq_regiao = nr_seq_regiao_p;
					IF (qt_regiao_w = 0) THEN
						ie_perm_agenda_w := 'N';
					END IF;					
                END IF;

                IF (ie_multimed_w = 'S') THEN
                  IF (cd_empresa_multimed_p IS NOT NULL AND cd_empresa_multimed_p::text <> '') THEN
                    SELECT COUNT(*)
                      INTO STRICT qt_estabelecimento_w
                      FROM estabelecimento a
                     WHERE a.ie_situacao = 'A'
                       AND ((a.cd_empresa = cd_empresa_multimed_p) OR (coalesce(cd_empresa_multimed_p::text, '') = ''))
                       AND a.cd_estabelecimento = cd_estabelecimento_w;

                    IF (qt_estabelecimento_w = 0) THEN
                      ie_perm_agenda_w := 'N';
                    END IF;
                  END IF;
                END IF;

                SELECT MAX(qt_exames_adic)
                  INTO STRICT qt_exames_adic_perm_w
                  FROM agenda
                 WHERE cd_agenda = cd_agenda_w;

                IF (qt_exames_adic_perm_w IS NOT NULL AND qt_exames_adic_perm_w::text <> '') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_exames_adic_w
                    FROM ageint_exame_adic_item
                   WHERE nr_seq_item = nr_seq_ageint_item_w;

                  IF (qt_exames_adic_w > qt_exames_adic_perm_w) THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                END IF;

                IF (nr_seq_agrup_setor_w IS NOT NULL AND nr_seq_agrup_setor_w::text <> '') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_seq_agrup_setor_w
                    FROM setor_atendimento x,
                         agenda            a
                   WHERE x.cd_setor_atendimento = a.cd_setor_exclusivo
                     AND a.cd_agenda = cd_agenda_w
                     AND x.nr_seq_agrupamento = nr_seq_agrup_setor_w
                     AND x.ie_situacao = 'A'
                     AND (x.nr_seq_agrupamento IS NOT NULL AND x.nr_seq_agrupamento::text <> '');
                  IF (qt_seq_agrup_setor_w = 0) THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                END IF;

                IF (ie_anestesia_w = 'S') THEN
                  SELECT COUNT(*) INTO STRICT qt_regra_anest_w FROM ageint_agenda_turno_anest;

                  IF (qt_regra_anest_w > 0) THEN
                    SELECT COUNT(*)
                      INTO STRICT qt_regra_anest_agenda_w
                      FROM ageint_agenda_turno_anest
                     WHERE cd_agenda = cd_agenda_w;
                    IF (qt_regra_anest_agenda_w = 0) THEN
                      ie_perm_agenda_w := 'N';
                    END IF;
                  END IF;
                END IF;

                ie_lib_esp_w := ageint_obter_se_lib_esp(nr_seq_proc_interno_w,
                                                        nr_seq_ageint_p,
                                                        cd_agenda_w);
				
                IF (ie_bloqueio_estab_w = 'N') AND (ie_lib_esp_w = 'S') THEN
                  ie_perm_agenda_w := 'S';
                END IF;

                IF (nr_seq_agrupamento_w IS NOT NULL AND nr_seq_agrupamento_w::text <> '') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_agrupamento_w
                    FROM agenda
                   WHERE cd_agenda = cd_agenda_w
                     AND nr_seq_agrupamento = nr_seq_agrupamento_w;
                  IF (qt_agrupamento_w = 0) THEN
                    SELECT COUNT(*)
                      INTO STRICT qt_agrupamento_w
                      FROM agenda_agrupamento
                     WHERE cd_agenda = cd_agenda_w
                       AND nr_seq_agrupamento = nr_seq_agrupamento_w;
                    IF (qt_agrupamento_w = 0) THEN
                      ie_perm_agenda_w := 'N';
                    END IF;
                  END IF;
                END IF;

                ie_conv_lib_agenda_w := obter_se_conv_lib_agenda(cd_agenda_w,
                                                                 cd_convenio_w);

                IF (ie_conv_lib_agenda_w = 'N') THEN
                  ie_perm_agenda_w := 'N';
                END IF;

                IF (ie_valida_conv_lib_estab_ag_w = 'S') THEN
                  SELECT CASE WHEN MAX(1)=1 THEN  'S'  ELSE 'C' END 
                    INTO STRICT ie_conv_lib_estab_ag_w
                    FROM convenio_estabelecimento b
                   WHERE b.cd_estabelecimento = cd_estabelecimento_w
                     AND b.cd_convenio = cd_convenio_w;

                  IF (ie_conv_lib_estab_ag_w <> 'S') THEN
                    ie_agenda_lib_w := ie_conv_lib_estab_ag_w;
                  END IF;
                END IF;

                if (coalesce(cd_estab_agenda_p::text, '') = '' and (cd_regiao_p IS NOT NULL AND cd_regiao_p::text <> '')) and (ie_perm_agenda_w = 'S') then
                                  
					ie_perm_agenda_w := obter_se_agenda_regiao(cd_agenda_w, cd_regiao_p, null, ie_limitrofes_p);

                end if;

                IF (ie_perm_agenda_w = 'S') THEN
                
                  OPEN c30;
                  LOOP
                    FETCH c30
                      INTO cd_pessoa_fisica_w,
                           nr_seq_medico_regra_w,
                           nr_seq_med_w;
                    EXIT WHEN NOT FOUND; /* apply on c30 */
                    BEGIN
                      ie_faixa_etaria_w := obter_se_faixa_etaria(nr_seq_med_w);
                      ie_agenda_lib_w := coalesce(obter_se_agenda_integrada(cd_agenda_w,
                                                                       nr_seq_ageint_p,
                                                                       cd_estabelecimento_w,
                                                                       nr_seq_ageint_item_w,
                                                                       coalesce(cd_pessoa_fisica_w, cd_medico_exec_p),
                                                                       dt_agenda_p),
                                             'I');

                      ie_cancelado_w := ageint_obter_status_agenda(coalesce(nr_seq_agenda_cons_w,
                                                                       0),
                                                                   coalesce(nr_seq_agenda_exame_w,
                                                                       0));
                      IF (ie_apres_med_excl_w = 'S') THEN
                        ie_regra_med_excl_w := ageint_obter_se_regra_med_ex(cd_pessoa_fisica_w,
                                                                            cd_agenda_w,
                                                                            nr_seq_proc_interno_w,
                                                                            nr_seq_ageint_p,
                                                                            cd_procedimento_w,
                                                                            ie_origem_proced_w);
                      END IF;
                      cd_medico_w := cd_pessoa_fisica_w;
                      IF (ie_tipo_agendamento_w <> 'C') THEN
                        IF (ie_regra_turno_medico_w = 'N') OR (ie_regra_med_excl_w = 'S') THEN
                          ie_prof_lib_w := ageint_obter_se_prof_item(nr_seq_ageint_item_w,
                                                                     cd_pessoa_fisica_w);
                        ELSE
                          SELECT COUNT(*)
                            INTO STRICT qt_medico_selecionado_w
                            FROM agenda_integrada_prof_item
                           WHERE nr_seq_agenda_item = nr_seq_ageint_item_w;

                          IF (qt_medico_selecionado_w = 0) THEN
                            cd_pessoa_fisica_w := NULL;
                            ie_prof_lib_w      := 'S';
                          ELSE
                            SELECT COUNT(*)
                              INTO STRICT qt_medico_selecionado_w
                              FROM agenda_integrada_prof_item
                             WHERE nr_seq_agenda_item = nr_seq_ageint_item_w
                               AND cd_pessoa_fisica = cd_pessoa_fisica_w;
                            IF (qt_medico_selecionado_w = 0) THEN
                              ie_prof_lib_w := 'N';
                            ELSE
                              ie_prof_lib_w := 'S';
                            END IF;
                          END IF;
                        END IF;
                        ie_perm_med_excl_exame_w := ageint_obter_regra_med_exame(cd_medico_w,
                                                                                 cd_agenda_w,
                                                                                 nr_seq_proc_interno_w,
                                                                                 nr_seq_ageint_p,
                                                                                 cd_procedimento_w,
                                                                                 ie_origem_proced_w);
                      ELSE
                        ie_prof_lib_w            := 'S';
                        ie_perm_med_excl_exame_w := 'S';
                      END IF;

                      IF ((ie_faixa_etaria_w = 'S') AND (ie_agenda_lib_w = 'S') AND
                         ((ie_prof_lib_w = 'S' AND ie_perm_med_excl_exame_w = 'S') OR (ie_tipo_agendamento_w = 'C')) AND (ie_cancelado_w <> 'C')) OR
                         (ie_bloqueio_estab_w = 'N' AND ie_lib_esp_w = 'S') THEN
                      
                        SELECT COUNT(*)
                          INTO STRICT qt_ageint_lib_w
                          FROM ageint_lib_usuario
                         WHERE cd_agenda = cd_agenda_w
                           AND (cd_pessoa_fisica = cd_pessoa_fisica_w OR (coalesce(cd_pessoa_fisica::text, '') = '' AND coalesce(cd_pessoa_fisica_w::text, '') = ''))
                           AND nr_seq_ageint = nr_seq_ageint_p
                           AND nr_seq_ageint_item = nr_seq_ageint_item_w;

                        IF ((qt_ageint_lib_w = 0) AND ((ie_tipo_agendamento_w = 'C') OR
                           (ie_regra_turno_medico_w = 'S' AND ie_regra_med_excl_w = 'N' AND ie_tipo_agendamento_w = 'E'))) OR
                           (((ie_tipo_agendamento_w = 'E') AND
                           ((ie_regra_turno_medico_w = 'N') OR (ie_regra_med_excl_w = 'S'))) OR (ie_tipo_agendamento_w = 'S')) THEN
                        
                          INSERT INTO ageint_lib_usuario(nr_sequencia,
                             cd_agenda,
                             nr_seq_ageint,
                             dt_atualizacao,
                             nm_usuario,
                             nr_seq_ageint_item,
                             cd_pessoa_fisica,
                             nr_seq_medico_regra,
							 nr_ordem_apres)
                          VALUES (nextval('ageint_lib_usuario_seq'),
                             cd_agenda_w,
                             nr_seq_ageint_p,
                             clock_timestamp(),
                             nm_usuario_p,
                             nr_seq_ageint_item_w,
                             cd_pessoa_fisica_w,
                             nr_seq_medico_regra_w,
							 CASE WHEN cd_pessoa_fisica_w=coalesce(cd_medico_agecons_w,'X') THEN  1 WHEN cd_pessoa_fisica_w=coalesce(CD_MEDICO_REF_W,'X') THEN  2  ELSE 3 END );

                          COMMIT;
                        END IF;
                      ELSIF (ie_agenda_lib_w <> 'S') AND (ie_agenda_lib_w <> 'I') AND (ie_agenda_lib_w <> 'NA') THEN
                        IF (ie_cancelado_w = 'C') THEN
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(307575); -- O item esta cancelado.
                        ELSIF (ie_agenda_lib_w = 'N') AND (ie_prof_lib_w <> 'A') THEN
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(307578,
                                                                           ';DS_AGENDA=' ||
                                                                           ds_agenda_w); -- O item nao esta liberado para agenda.
                        ELSIF (ie_agenda_lib_w = 'SA') AND (ie_prof_lib_w <> 'A') THEN
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(307583,
                                                                           ';DS_AGENDA=' ||
                                                                           ds_agenda_w); -- Exame adicional do item nao esta liberado para a agenda #@DS_AGENDA#@.
                        ELSIF (ie_agenda_lib_w = 'C') THEN
                          -- O convenio #@DS_CONVENIO#@ nao esta liberado para o estabelecimento da agenda #@DS_AGENDA#@.
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(360511,
                                                                           'DS_CONVENIO=' ||
                                                                           ds_convenio_w ||
                                                                           ';DS_AGENDA=' ||
                                                                           ds_agenda_w);
                        END IF;
                        IF (ie_prof_lib_w = 'A') AND (ie_tipo_agendamento_w = 'E') THEN
                          ds_consistencia_w := wheb_mensagem_pck.get_texto(307585); -- Idade incompativel com regra por medico
                        END IF;

                        BEGIN
                          SELECT 1
                            INTO STRICT qt_consistencia_exame_adic_w
                            FROM ageint_consistencia
                           WHERE nr_seq_ageint = nr_seq_ageint_p
                             AND nr_seq_item = nr_seq_ageint_item_w
                             AND cd_agenda = cd_agenda_w  LIMIT 1;
                          --and  ds_consistencia  = 'Exame adicional do item nao esta liberado para agenda.';
                        EXCEPTION
                          WHEN OTHERS THEN
                            qt_consistencia_exame_adic_w := 0;
                        END;

                        IF (qt_consistencia_exame_adic_w = 0) THEN
                          /*delete  ageint_consistencia
                          where  nr_seq_ageint  = nr_seq_ageint_p 
                          and  nr_seq_item  = nr_seq_Ageint_item_w;*/
                        
                          INSERT INTO ageint_consistencia(nr_sequencia,
                             nr_seq_item,
                             nr_seq_ageint,
                             ds_consistencia,
                             nm_usuario,
                             dt_atualizacao,
                             cd_agenda)
                          VALUES (nextval('ageint_consistencia_seq'),
                             nr_seq_ageint_item_w,
                             nr_seq_ageint_p,
                             ds_consistencia_w,
                             nm_usuario_p,
                             clock_timestamp(),
                             cd_agenda_w);
                        END IF;
                      END IF;
                      --end if;        
                      cd_pessoa_fisica_w := cd_medico_w;
                    END;
                  END LOOP;
                  CLOSE c30;
                END IF;

              END;
              <<next_c20>>
              NULL;
            END LOOP;
            CLOSE c20;

          END IF;

          IF (qt_tipo_serv_w > 0) AND (ie_tipo_agendamento_w = 'S') THEN
          
            OPEN c40;
            LOOP
              FETCH c40
                INTO cd_agenda_w,
                     cd_estabelecimento_w,
                     cd_setor_exclusivo_w,
                     cd_perfil_exclusivo_w,
                     ie_regra_turno_medico_w;
              EXIT WHEN NOT FOUND; /* apply on c40 */
              BEGIN
                ------- Verifica Agenda --------------------
                SELECT CASE WHEN COUNT(1)=0 THEN  'N'  ELSE 'S' END
                  INTO STRICT ie_bloqueio_quest_w
                  FROM (SELECT 1
                          FROM ageint_resp_quest_item  i,
                               ageint_resp_quest       q,
                               ageint_quest_regra_bloq b,
                               ageint_quest_utilizacao aqu
                         WHERE aqu.nr_sequencia = b.nr_seq_quest_utilizacao
                           AND b.nr_seq_quest_utilizacao = i.nr_seq_quest_utilizacao
                           AND b.nr_seq_estrutura = q.nr_seq_estrutura
                           AND i.nr_seq_resp_quest = q.nr_sequencia
                           AND b.nr_seq_resposta = q.nr_seq_resp
                           AND b.ie_situacao = 'A'
                           AND b.ie_bloquear = 'S'
                           AND NOT EXISTS (SELECT 1
                                  FROM ageint_quest_regra_bl_item x
                                 WHERE b.nr_sequencia = x.nr_seq_regra_bloq
                                   AND x.ie_situacao = 'A')
                           AND q.nr_seq_ageint = nr_seq_ageint_p
                           AND i.nr_seq_item = nr_seq_ageint_item_w
                        
UNION ALL

                        SELECT 1
                          FROM ageint_resp_quest_item     i,
                               ageint_resp_quest          q,
                               ageint_quest_regra_bloq    b,
                               ageint_quest_regra_bl_item c,
                               ageint_quest_utilizacao    aqu
                         WHERE aqu.nr_sequencia = b.nr_seq_quest_utilizacao
                           AND b.nr_seq_quest_utilizacao = i.nr_seq_quest_utilizacao
                           AND b.nr_seq_estrutura = q.nr_seq_estrutura
                           AND i.nr_seq_resp_quest = q.nr_sequencia
                           AND b.nr_seq_resposta = q.nr_seq_resp
                           AND b.nr_sequencia = c.nr_seq_regra_bloq
                           AND b.ie_situacao = 'A'
                           AND b.ie_bloquear = 'S'
                           AND c.ie_situacao = 'A'
                           AND q.nr_seq_ageint = nr_seq_ageint_p
                           AND i.nr_seq_item = nr_seq_ageint_item_w
                           AND c.cd_agenda = cd_agenda_w) alias2;

                IF ie_bloqueio_quest_w = 'S' THEN
                
                  GOTO next_c40;
                END IF;
                -------------------------------------------------------              
              
                --INICIO - Obter informacoes macros
                IF (cd_agenda_w IS NOT NULL AND cd_agenda_w::text <> '') THEN
                  SELECT substr(a.ds_agenda, 1, 60)
                    INTO STRICT ds_agenda_w
                    FROM agenda a
                   WHERE a.cd_agenda = cd_agenda_w;
                END IF;
                --FIM - Obter informacoes macros                    
			
                ie_perm_agenda_w       := 'S';
                ie_bloqueio_estab_w    := 'N';
                ie_conv_lib_estab_ag_w := 'S';

                IF (ie_estab_usuario_w = 'S') THEN
                  IF (cd_estabelecimento_w <> cd_estabelecimento_p) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                ELSIF (((ie_estab_usuario_w = 'C') OR (ie_estab_usuario_w = 'T')) AND (cd_estab_agenda_p IS NOT NULL AND cd_estab_agenda_p::text <> '')) THEN
                  IF (cd_estabelecimento_w <> cd_estab_agenda_p) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                ELSIF (ie_estab_usuario_w = 'N') OR
                      ((ie_estab_usuario_w = 'T') AND (coalesce(cd_estab_agenda_p::text, '') = '')) THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_estab_user_w
                    FROM usuario_estabelecimento_v
                   WHERE nm_usuario_param = nm_usuario_p
                     AND cd_estabelecimento = cd_estabelecimento_w;
                  IF (qt_estab_user_w = 0) THEN
                    ie_perm_agenda_w    := 'N';
                    ie_bloqueio_estab_w := 'S';
                  END IF;
                END IF;
                IF (ie_setor_usuario_w = 'S') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_setor_user_w
                    FROM usuario_setor_v
                   WHERE nm_usuario = nm_usuario_p
                     AND cd_setor_atendimento = cd_setor_exclusivo_w;
                  IF (qt_setor_user_w = 0) AND (cd_setor_exclusivo_w IS NOT NULL AND cd_setor_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                ELSIF (ie_setor_usuario_w = 'N') THEN
                  IF (cd_setor_exclusivo_w IS NOT NULL AND cd_setor_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                END IF;
                IF (ie_perfil_usuario_w = 'S') THEN
                  SELECT COUNT(*)
                    INTO STRICT qt_perfil_user_w
                    FROM usuario_perfil
                   WHERE nm_usuario = nm_usuario_p
                     AND cd_perfil = cd_perfil_exclusivo_w;
                  IF (qt_perfil_user_w = 0) AND (cd_perfil_exclusivo_w IS NOT NULL AND cd_perfil_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                ELSIF (ie_perfil_usuario_w = 'N') THEN
                  IF (cd_perfil_exclusivo_w IS NOT NULL AND cd_perfil_exclusivo_w::text <> '') THEN
                    ie_perm_agenda_w := 'N';
                  END IF;
                ELSIF (ie_perfil_usuario_w = 'R') AND (coalesce(cd_agenda_w, 0) > 0) THEN
                  ie_perm_agenda_w := consistir_regra_perfil_agenda(obter_perfil_ativo,
                                                                    cd_agenda_w);
                END IF;

                ie_conv_lib_agenda_w := obter_se_conv_lib_agenda_serv(cd_agenda_w,
                                                                      cd_convenio_w);

                IF (ie_conv_lib_agenda_w = 'N') THEN
                  ie_perm_agenda_w := 'N';
                END IF;

                IF (ie_valida_conv_lib_estab_ag_w = 'S') THEN
                  SELECT CASE WHEN MAX(1)=1 THEN  'S'  ELSE 'C' END 
                    INTO STRICT ie_conv_lib_estab_ag_w
                    FROM convenio_estabelecimento b
                   WHERE b.cd_estabelecimento = cd_estabelecimento_w
                     AND b.cd_convenio = cd_convenio_w;

                  IF (ie_conv_lib_estab_ag_w <> 'S') THEN
                    ie_agenda_lib_w := ie_conv_lib_estab_ag_w;
                  END IF;
                END IF;

                if (coalesce(cd_estab_agenda_p::text, '') = '' and (cd_regiao_p IS NOT NULL AND cd_regiao_p::text <> '')) and (ie_perm_agenda_w = 'S') then
                                  
					ie_perm_agenda_w := obter_se_agenda_regiao(cd_agenda_w, cd_regiao_p, null, ie_limitrofes_p);

                end if;

                IF (ie_perm_agenda_w = 'S') THEN
                  SELECT coalesce(MAX(ie_hor_por_profissional), 'N')
                    INTO STRICT ie_hor_por_profissional_w
                    FROM parametro_agenda_integrada
                   WHERE cd_estabelecimento = cd_estabelecimento_p;

                  IF (ie_hor_por_profissional_w = 'N') THEN
                    OPEN c30;
                    LOOP
                      FETCH c30
                        INTO cd_pessoa_fisica_w,
                             nr_seq_medico_regra_w,
                             nr_seq_med_w;
                      EXIT WHEN NOT FOUND; /* apply on c30 */
                      BEGIN
                        ie_faixa_etaria_w := obter_se_faixa_etaria(nr_seq_med_w);
                        ie_agenda_lib_w := coalesce(obter_se_agenda_integrada(cd_agenda_w,
                                                                         nr_seq_ageint_p,
                                                                         cd_estabelecimento_w,
                                                                         nr_seq_ageint_item_w,
                                                                         coalesce(cd_pessoa_fisica_w, cd_medico_exec_p),
                                                                         dt_agenda_p),
                                               'I');
                        ie_cancelado_w  := ageint_obter_status_agenda(coalesce(nr_seq_agenda_cons_w, 0),
                                                                      coalesce(nr_seq_agenda_exame_w,0));

                        cd_medico_w := cd_pessoa_fisica_w;
                        IF (ie_tipo_agendamento_w <> 'C') THEN
                          IF (ie_regra_turno_medico_w = 'N') THEN
                            ie_prof_lib_w := ageint_obter_se_prof_item(nr_seq_ageint_item_w,
                                                                       cd_pessoa_fisica_w);
                          ELSE
                            SELECT COUNT(*)
                              INTO STRICT qt_medico_selecionado_w
                              FROM agenda_integrada_prof_item
                             WHERE nr_seq_agenda_item = nr_seq_ageint_item_w;

                            IF (qt_medico_selecionado_w = 0) THEN
                              cd_pessoa_fisica_w := NULL;
                              ie_prof_lib_w      := 'S';
                            ELSE
                              SELECT COUNT(*)
                                INTO STRICT qt_medico_selecionado_w
                                FROM agenda_integrada_prof_item
                               WHERE nr_seq_agenda_item = nr_seq_ageint_item_w
                                 AND cd_pessoa_fisica = cd_pessoa_fisica_w;
                              IF (qt_medico_selecionado_w = 0) THEN
                                ie_prof_lib_w := 'N';
                              ELSE
                                ie_prof_lib_w := 'S';
                              END IF;
                            END IF;
                          END IF;
                          ie_perm_med_excl_exame_w := ageint_obter_regra_med_exame(cd_pessoa_fisica_w,
                                                                                   cd_agenda_w,
                                                                                   nr_seq_proc_interno_w,
                                                                                   nr_seq_ageint_p,
                                                                                   cd_procedimento_w,
                                                                                   ie_origem_proced_w);
                        ELSE
                          ie_prof_lib_w            := 'S';
                          ie_perm_med_excl_exame_w := 'S';
                        END IF;

                        --if  (ie_agenda_lib_w <> '') then
                        IF (ie_faixa_etaria_w = 'S') AND (ie_agenda_lib_w = 'S') AND
                           ((ie_prof_lib_w = 'S' AND ie_perm_med_excl_exame_w = 'S') OR (ie_tipo_agendamento_w = 'C')) AND (ie_cancelado_w <> 'C') THEN
                        
                          SELECT COUNT(*)
                            INTO STRICT qt_ageint_lib_w
                            FROM ageint_lib_usuario
                           WHERE cd_agenda = cd_agenda_w
                             AND (cd_pessoa_fisica = cd_pessoa_fisica_w OR (coalesce(cd_pessoa_fisica::text, '') = '' AND
                                 coalesce(cd_pessoa_fisica_w::text, '') = ''))
                             AND nr_seq_ageint = nr_seq_ageint_p
                             AND nr_seq_ageint_item = nr_seq_ageint_item_w;

                          IF ((qt_ageint_lib_w = 0) AND ((ie_tipo_agendamento_w = 'C') OR
                             (ie_regra_turno_medico_w = 'S' AND ie_tipo_agendamento_w = 'E'))) OR
                             ((ie_tipo_agendamento_w = 'E' AND ie_regra_turno_medico_w = 'N') OR (ie_tipo_agendamento_w = 'S')) THEN
                          
                            INSERT INTO ageint_lib_usuario(nr_sequencia,
                               cd_agenda,
                               nr_seq_ageint,
                               dt_atualizacao,
                               nm_usuario,
                               nr_seq_ageint_item,
                               cd_pessoa_fisica,
                               nr_seq_medico_regra,
							 nr_ordem_apres)
                            VALUES (nextval('ageint_lib_usuario_seq'),
                               cd_agenda_w,
                               nr_seq_ageint_p,
                               clock_timestamp(),
                               nm_usuario_p,
                               nr_seq_ageint_item_w,
                               cd_pessoa_fisica_w,
                               nr_seq_medico_regra_w,
							   CASE WHEN cd_pessoa_fisica_w=coalesce(cd_medico_agecons_w,'X') THEN  1 WHEN cd_pessoa_fisica_w=coalesce(CD_MEDICO_REF_W,'X') THEN  2  ELSE 3 END );

                            COMMIT;
                          END IF;
                        ELSIF (ie_agenda_lib_w <> 'S') AND (ie_agenda_lib_w <> 'I') AND (ie_agenda_lib_w <> 'NA') THEN
                          IF (ie_cancelado_w = 'C') THEN
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(307575); -- O item esta cancelado.
                          ELSIF (ie_agenda_lib_w = 'N') AND (ie_prof_lib_w <> 'A') THEN
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(307578,';DS_AGENDA=' ||ds_agenda_w); -- O item nao esta liberado para agenda.
                          ELSIF (ie_agenda_lib_w = 'SA') AND (ie_prof_lib_w <> 'A') THEN
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(307583,';DS_AGENDA=' ||ds_agenda_w); -- Exame adicional do item nao esta liberado para a agenda #@DS_AGENDA#@.
                          ELSIF (ie_agenda_lib_w = 'C') THEN
                            -- O convenio #@DS_CONVENIO#@ nao esta liberado para o estabelecimento da agenda #@DS_AGENDA#@.
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(360511,'DS_CONVENIO=' ||ds_convenio_w ||';DS_AGENDA=' ||ds_agenda_w);
                          END IF;
                          IF (ie_prof_lib_w = 'A') AND (ie_tipo_agendamento_w = 'E') THEN
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(307585); -- Idade incompativel com regra por medico
                          END IF;

                          BEGIN
                            SELECT 1
                              INTO STRICT qt_consistencia_exame_adic_w
                              FROM ageint_consistencia
                             WHERE nr_seq_ageint = nr_seq_ageint_p
                               AND nr_seq_item = nr_seq_ageint_item_w
                               AND cd_agenda = cd_agenda_w  LIMIT 1;
                            --and  ds_consistencia  = 'Exame adicional do item nao esta liberado para agenda.';
                          EXCEPTION
                            WHEN OTHERS THEN
                              qt_consistencia_exame_adic_w := 0;
                          END;

                          IF (qt_consistencia_exame_adic_w = 0) THEN
                            /*delete  ageint_consistencia
                            where  nr_seq_ageint  = nr_seq_ageint_p 
                            and  nr_seq_item  = nr_seq_Ageint_item_w;*/
                          
                            INSERT INTO ageint_consistencia(nr_sequencia,
                               nr_seq_item,
                               nr_seq_ageint,
                               ds_consistencia,
                               nm_usuario,
                               dt_atualizacao,
                               cd_agenda)
                            VALUES (nextval('ageint_consistencia_seq'),
                               nr_seq_ageint_item_w,
                               nr_seq_ageint_p,
                               ds_consistencia_w,
                               nm_usuario_p,
                               clock_timestamp(),
                               cd_agenda_w);
                          END IF;
                        END IF;
                        --end if;        
                        cd_pessoa_fisica_w := cd_medico_w;
                      END;
                    END LOOP;
                    CLOSE c30;

                  ELSE
                  
                    OPEN c60;
                    LOOP
                      FETCH c60
                        INTO cd_pessoa_fisica_w
                      --,nr_seq_medico_regra_w
;
                      EXIT WHEN NOT FOUND; /* apply on c60 */
                      BEGIN

                        ie_agenda_lib_w := coalesce(obter_se_agenda_integrada(cd_agenda_w,
                                                                         nr_seq_ageint_p,
                                                                         cd_estabelecimento_w,
                                                                         nr_seq_ageint_item_w,
                                                                         coalesce(cd_pessoa_fisica_w, cd_medico_exec_p),
                                                                         dt_agenda_p),
                                               'I');
                        ie_cancelado_w  := ageint_obter_status_agenda(coalesce(nr_seq_agenda_cons_w, 0),
                                                                      coalesce(nr_seq_agenda_exame_w, 0));

                        cd_medico_w := cd_pessoa_fisica_w;
                        IF (ie_tipo_agendamento_w <> 'C') THEN
                          IF (ie_regra_turno_medico_w = 'N') THEN
                            ie_prof_lib_w := ageint_obter_se_prof_item(nr_seq_ageint_item_w, cd_pessoa_fisica_w);
                          ELSE
                            SELECT COUNT(*)
                              INTO STRICT qt_medico_selecionado_w
                              FROM agenda_integrada_prof_item
                             WHERE nr_seq_agenda_item = nr_seq_ageint_item_w;

                            IF (qt_medico_selecionado_w = 0) THEN
                              cd_pessoa_fisica_w := NULL;
                              ie_prof_lib_w      := 'S';
                            ELSE
                              SELECT COUNT(*)
                                INTO STRICT qt_medico_selecionado_w
                                FROM agenda_integrada_prof_item
                               WHERE nr_seq_agenda_item = nr_seq_ageint_item_w
                                 AND cd_pessoa_fisica = cd_pessoa_fisica_w;
                              IF (qt_medico_selecionado_w = 0) THEN
                                ie_prof_lib_w := 'N';
                              ELSE
                                ie_prof_lib_w := 'S';
                              END IF;
                            END IF;
                          END IF;
                          ie_perm_med_excl_exame_w := ageint_obter_regra_med_exame(cd_pessoa_fisica_w,
                                                                                   cd_agenda_w,
                                                                                   nr_seq_proc_interno_w,
                                                                                   nr_seq_ageint_p,
                                                                                   cd_procedimento_w,
                                                                                   ie_origem_proced_w);
                        ELSE
                          ie_prof_lib_w            := 'S';
                          ie_perm_med_excl_exame_w := 'S';
                        END IF;

                        --if  (ie_agenda_lib_w <> '') then
                        IF (ie_agenda_lib_w = 'S') AND
                           ((ie_prof_lib_w = 'S' AND ie_perm_med_excl_exame_w = 'S') OR (ie_tipo_agendamento_w = 'C')) AND (ie_cancelado_w <> 'C') THEN
                        
                          SELECT COUNT(*)
                            INTO STRICT qt_ageint_lib_w
                            FROM ageint_lib_usuario
                           WHERE cd_agenda = cd_agenda_w
                             AND (cd_pessoa_fisica = cd_pessoa_fisica_w OR (coalesce(cd_pessoa_fisica::text, '') = '' AND
                                 coalesce(cd_pessoa_fisica_w::text, '') = ''))
                             AND nr_seq_ageint = nr_seq_ageint_p
                             AND nr_seq_ageint_item = nr_seq_ageint_item_w;

                          IF ((qt_ageint_lib_w = 0) AND ((ie_tipo_agendamento_w = 'C') OR
                             (ie_regra_turno_medico_w = 'S' AND ie_tipo_agendamento_w = 'E'))) OR
                             ((ie_tipo_agendamento_w = 'E' AND ie_regra_turno_medico_w = 'N') OR (ie_tipo_agendamento_w = 'S')) THEN
                          
                            INSERT INTO ageint_lib_usuario(nr_sequencia,
                               cd_agenda,
                               nr_seq_ageint,
                               dt_atualizacao,
                               nm_usuario,
                               nr_seq_ageint_item,
                               cd_pessoa_fisica,
							   nr_ordem_apres
                               --,nr_seq_medico_regra
                               )
                            VALUES (nextval('ageint_lib_usuario_seq'),
                               cd_agenda_w,
                               nr_seq_ageint_p,
                               clock_timestamp(),
                               nm_usuario_p,
                               nr_seq_ageint_item_w,
                               cd_pessoa_fisica_w,
							   CASE WHEN cd_pessoa_fisica_w=coalesce(cd_medico_agecons_w,'X') THEN  1 WHEN cd_pessoa_fisica_w=coalesce(CD_MEDICO_REF_W,'X') THEN  2  ELSE 3 END 
                               --,nr_seq_medico_regra_w
                               );

                            COMMIT;
                          END IF;
                        ELSIF (ie_agenda_lib_w <> 'S') AND (ie_agenda_lib_w <> 'I') AND (ie_agenda_lib_w <> 'NA') THEN
                          IF (ie_cancelado_w = 'C') THEN
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(307575); -- O item esta cancelado.
                          ELSIF (ie_agenda_lib_w = 'N') AND (ie_prof_lib_w <> 'A') THEN
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(307578,';DS_AGENDA=' ||ds_agenda_w); -- O item nao esta liberado para agenda.
                          ELSIF (ie_agenda_lib_w = 'SA') AND (ie_prof_lib_w <> 'A') THEN
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(307583,';DS_AGENDA=' ||ds_agenda_w); -- Exame adicional do item nao esta liberado para a agenda #@DS_AGENDA#@.
                          ELSIF (ie_agenda_lib_w = 'C') THEN
                            -- O convenio #@DS_CONVENIO#@ nao esta liberado para o estabelecimento da agenda #@DS_AGENDA#@.
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(360511,'DS_CONVENIO=' ||ds_convenio_w ||';DS_AGENDA=' ||ds_agenda_w);
                          END IF;
                          IF (ie_prof_lib_w = 'A') AND (ie_tipo_agendamento_w = 'E') THEN
                            ds_consistencia_w := wheb_mensagem_pck.get_texto(307585); -- Idade incompativel com regra por medico
                          END IF;

                          BEGIN
                            SELECT 1
                              INTO STRICT qt_consistencia_exame_adic_w
                              FROM ageint_consistencia
                             WHERE nr_seq_ageint = nr_seq_ageint_p
                               AND nr_seq_item = nr_seq_ageint_item_w
                               AND cd_agenda = cd_agenda_w  LIMIT 1;
                            --and  ds_consistencia  = 'Exame adicional do item nao esta liberado para agenda.';
                          EXCEPTION
                            WHEN OTHERS THEN
                              qt_consistencia_exame_adic_w := 0;
                          END;

                          IF (qt_consistencia_exame_adic_w = 0) THEN
                            /*delete  ageint_consistencia
                            where  nr_seq_ageint  = nr_seq_ageint_p 
                            and  nr_seq_item  = nr_seq_Ageint_item_w;*/
                          
                            INSERT INTO ageint_consistencia(nr_sequencia,
                               nr_seq_item,
                               nr_seq_ageint,
                               ds_consistencia,
                               nm_usuario,
                               dt_atualizacao,
                               cd_agenda)
                            VALUES (nextval('ageint_consistencia_seq'),
                               nr_seq_ageint_item_w,
                               nr_seq_ageint_p,
                               ds_consistencia_w,
                               nm_usuario_p,
                               clock_timestamp(),
                               cd_agenda_w);
                          END IF;
                        END IF;
                        --end if;        
                        cd_pessoa_fisica_w := cd_medico_w;
                      END;
                    END LOOP;
                    CLOSE c60;
                  END IF;
                END IF;
              END;
              <<next_c40>>
              NULL;
            END LOOP;
            CLOSE c40;

          END IF;
        END IF;
      END IF;
    END;
  END LOOP;
  CLOSE c10;

  COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_ageint_lib_usuario (nr_seq_ageint_p bigint, cd_estabelecimento_p bigint, cd_estab_agenda_p bigint, nr_seq_regiao_p bigint, cd_estab_multimed_p bigint, cd_empresa_multimed_p bigint, nm_usuario_p text, ie_transferencia_p text, ds_itens_selec_p text, cd_medico_exec_p text, dt_agenda_p timestamp, cd_regiao_p bigint default null, ie_genero_prof_p text default 'A', ie_limitrofes_p text default 'N') IS cd_paciente_w varchar(10) FROM PUBLIC;

