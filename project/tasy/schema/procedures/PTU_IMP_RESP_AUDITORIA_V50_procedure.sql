-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_imp_resp_auditoria_v50 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_execucao_p INOUT bigint) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Importar resposta auditoria_v40 
 
Rotina utilizada nas transações ptu via scs homologadas com a unimed brasil. 
quando for alterar, favor verificar com o análista responsável para a realização de testes. 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
Performance 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
cd_transacao_w			varchar(5);
ie_tipo_cliente_w		varchar(15);
cd_unimed_executora_w		smallint;
cd_unimed_beneficiario_w	smallint;
nr_seq_origem_w			bigint;
ds_conteudo_w			varchar(4000);
dt_atendimento_ww		varchar(255);
dt_validade_senha_w		timestamp;
ds_observacao_w			varchar(4000);
ie_tipo_tabela_w		varchar(3);
cd_servico_w			integer;
ds_servico_w			varchar(255);
qt_autorizada_w			varchar(8);
qt_autorizada_ww		double precision;
ie_autorizado_w			smallint;
cd_mens_espec_1			smallint;
cd_mens_espec_2			smallint;
cd_mens_espec_3			smallint;
cd_mens_espec_4			smallint;
cd_mens_espec_5			smallint;
ie_status_w			varchar(2);
nr_seq_auditoria_w		bigint;
ie_origem_proced_w		smallint;
nr_seq_import_w			smallint;
nr_seq_transacao_w		bigint;
ie_tipo_transacao_w		varchar(3);
qt_reg_liberado_w		smallint;
qt_reg_liberado_ww		smallint;
qt_reg_negado_w			smallint;
qt_reg_negado_ww		smallint;
qt_registro_w			smallint;
qt_registro_ww			smallint;
nr_seq_procedimento_w		bigint;
nr_seq_material_w		bigint;
ie_tipo_resposta_w		varchar(2);
ie_status_ww			smallint;
nr_seq_pedido_compl_w		bigint;
nr_seq_pedido_aut_w		bigint;
nr_seq_requisicao_w		bigint;
nr_seq_guia_w			bigint;
ie_status_item_w		varchar(255);
ds_estagio_req_w		varchar(255);
nm_usuario_item_w		varchar(255);
dt_atualizacao_item_w		timestamp;
cd_material_ops_w		varchar(255);
cd_procedimento_w		bigint;
cd_servico_conversao_w		bigint;
qt_reg_audit_w			bigint;
ie_tipo_autorizacao_w		varchar(2);
nr_seq_req_proc_w		bigint;
nr_seq_guia_proc_w		bigint;
nr_seq_req_mat_w		bigint;
nr_seq_guia_mat_w		bigint;
nr_seq_ped_aut_compl_serv_w	bigint;
ie_status_analise_w		varchar(255);
nr_seq_regra_ret_orig_w		bigint;
nr_versao_w			varchar(3);
ds_mens_espec_w			varchar(999);
ie_gerar_senha_interna_w	varchar(1);
cd_senha_w			varchar(20);
nr_seq_regra_senha_w		bigint;
ie_resposta_w			varchar(5)	:= 'RA';
qt_reg_generico_w		bigint;
dt_fim_evento_w			pls_atendimento_evento.dt_fim_evento%type;
nr_seq_atend_pls_w		pls_requisicao.nr_seq_atend_pls%type;
nr_seq_evento_atend_w		pls_requisicao.nr_seq_evento_atend%type;
ie_estagio_w			pls_requisicao.ie_estagio%type;
ie_status_guia_w		pls_guia_plano.ie_status%type;
qt_decurso_prazo_w		integer;
ie_controle_estab_w		varchar(2);

c01 CURSOR FOR 
	SELECT	nr_seq_importacao, 
		ds_valores 
	from	w_scs_importacao 
	where	nm_usuario	= nm_usuario_p 
	order by nr_seq_importacao;

CItem CURSOR(	nr_seq_auditoria_pc		pls_auditoria.nr_sequencia%type) FOR 
	SELECT	nr_sequencia, 
		nr_seq_proc_origem, 
		nr_seq_mat_origem 
	from	pls_auditoria_item 
	where	nr_seq_auditoria	= nr_seq_auditoria_pc 
	and	ie_status	= 'P' 
	order by nr_sequencia;

CGuia CURSOR(	nr_seq_guia_pc		pls_guia_plano.nr_sequencia%type) FOR 
	SELECT	nr_sequencia 
	from	pls_auditoria 
	where	nr_seq_guia	= nr_seq_guia_pc 
	and	coalesce(dt_liberacao::text, '') = '';

CReq CURSOR(	nr_seq_requisicao_pc	pls_requisicao.nr_sequencia%type) FOR 
	SELECT	nr_sequencia, 
		ie_status 
	from	pls_auditoria 
	where	nr_seq_requisicao	= nr_seq_requisicao_pc 
	and	coalesce(dt_liberacao::text, '') = '';

BEGIN 
-- Verificar o parâmetro na função OPS - Gestão de Operadoras / Parâmetros OPS / Intercâmbio / Intercâmbio SCS 
begin 
	select	ie_gerar_senha_interna 
	into STRICT	ie_gerar_senha_interna_w 
	from	pls_param_intercambio_scs;
exception 
when others then 
	ie_gerar_senha_interna_w	:= null;
end;
 
begin 
	select	pls_obter_se_controle_estab('RE') 
	into STRICT	ie_controle_estab_w 
	;
exception 
when others then 
	ie_controle_estab_w	:= 'N';
end;
 
open c01;
loop 
fetch c01 into 
	nr_seq_import_w, 
	ds_conteudo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
 
	if (substr(ds_conteudo_w,1,4)	<> 'FIM$') then 
		if (nr_seq_import_w	= 1) then 
			cd_transacao_w			:= substr(ds_conteudo_w,1,5);
			ie_tipo_cliente_w		:= trim(both substr(ds_conteudo_w,6,15));
			cd_unimed_executora_w		:= (coalesce(trim(both substr(ds_conteudo_w,21,4)),0))::numeric;
			cd_unimed_beneficiario_w	:= (coalesce(trim(both substr(ds_conteudo_w,25,4)),0))::numeric;
			nr_seq_execucao_p		:= (coalesce(trim(both substr(ds_conteudo_w,29,10)),0))::numeric;
			nr_seq_origem_w			:= (coalesce(trim(both substr(ds_conteudo_w,39,10)),0))::numeric;
			dt_atendimento_ww		:= trim(both substr(ds_conteudo_w,55,2)||substr(ds_conteudo_w,53,2)||substr(ds_conteudo_w,49,4));
			ie_tipo_autorizacao_w		:= trim(both substr(ds_conteudo_w,57,1));
			nr_versao_w			:= trim(both substr(ds_conteudo_w,58,3));
 
			if (coalesce(dt_atendimento_ww,'X')  <> 'X') then 
				begin 
					dt_validade_senha_w	:= to_date(dt_atendimento_ww,'dd/mm/rrrr');
				exception 
				when others then 
					dt_validade_senha_w	:= clock_timestamp();
				end;
			end if;
 
			begin 
				select	coalesce(nr_seq_pedido_compl,0), 
					coalesce(nr_seq_pedido_aut,0) 
				into STRICT	nr_seq_pedido_compl_w, 
					nr_seq_pedido_aut_w 
				from	ptu_controle_execucao 
				where	nr_sequencia	= nr_seq_execucao_p;
			exception 
			when others then 
				nr_seq_pedido_compl_w	:= 0;
				nr_seq_pedido_aut_w	:= 0;
			end;
 
			if (nr_seq_pedido_compl_w	<> 0) then 
				select	nr_seq_guia, 
					nr_seq_requisicao 
				into STRICT	nr_seq_guia_w, 
					nr_seq_requisicao_w 
				from	ptu_pedido_compl_aut 
				where	nr_sequencia	= nr_seq_pedido_compl_w;
 
				ie_tipo_resposta_w	:= 'PC';
			elsif (nr_seq_pedido_aut_w	<> 0) then 
				select	nr_seq_guia, 
					nr_seq_requisicao 
				into STRICT	nr_seq_guia_w, 
					nr_seq_requisicao_w 
				from	ptu_pedido_autorizacao 
				where	nr_sequencia	= nr_seq_pedido_aut_w;
 
				ie_tipo_resposta_w	:= 'PA';
			elsif (nr_seq_pedido_compl_w	= 0) and (nr_seq_pedido_aut_w	= 0) then 
				if (coalesce(nr_seq_execucao_p::text, '') = '') or (nr_seq_execucao_p = 0) then 
					select	nextval('ptu_controle_execucao_seq') 
					into STRICT	nr_seq_execucao_p 
					;
				end if;
			end if;
 
			select	nextval('ptu_resposta_auditoria_seq') 
			into STRICT	nr_seq_auditoria_w 
			;
 
			if (ie_tipo_cliente_w	= 'UNIMED') then 
				ie_tipo_cliente_w	:= 'U';
			elsif (ie_tipo_cliente_w	= 'PORTAL') then 
				ie_tipo_cliente_w	:= 'P';
			elsif (ie_tipo_cliente_w	= 'PRESTADOR') then 
				ie_tipo_cliente_w	:= 'R';
			end if;
 
 
			insert	into ptu_resposta_auditoria(nr_sequencia, cd_transacao, ie_tipo_cliente, 
				 cd_unimed_executora, cd_unimed_beneficiario, nr_seq_execucao, 
				 nr_seq_origem, dt_atualizacao, nm_usuario, 
				 dt_validade, nr_seq_guia, nr_seq_requisicao, 
				 ds_observacao, ds_arquivo_pedido, ie_tipo_autorizacao, 
				 nm_usuario_nrec, dt_atualizacao_nrec) 
			values (nr_seq_auditoria_w, cd_transacao_w, ie_tipo_cliente_w, 
				 cd_unimed_executora_w, cd_unimed_beneficiario_w, nr_seq_execucao_p, 
				 nr_seq_origem_w, clock_timestamp(), nm_usuario_p, 
				 dt_validade_senha_w, nr_seq_guia_w, nr_seq_requisicao_w, 
				 ' ', ds_arquivo_p, ie_tipo_autorizacao_w, 
				 nm_usuario_p, clock_timestamp());
		elsif (nr_seq_import_w	= 2) then 
			select	trim(both substr(ds_conteudo_w,1,999)) 
			into STRICT	ds_observacao_w 
			;
			 
			if (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '') then 
				update	ptu_resposta_auditoria 
				set	ds_observacao	= ds_observacao_w 
				where	nr_sequencia	= nr_seq_auditoria_w;
			end if;
 
		elsif (nr_seq_import_w	> 2) then 
			ie_tipo_tabela_w	:= substr(ds_conteudo_w,1,1);
			cd_servico_w		:= (coalesce(trim(both substr(ds_conteudo_w,2,8)),0))::numeric;
			ds_servico_w		:= trim(both substr(ds_conteudo_w,10,80));
			qt_autorizada_w		:= coalesce(trim(both substr(ds_conteudo_w,90,8)),0);
			ie_autorizado_w		:= (coalesce(trim(both substr(ds_conteudo_w,98,1)),0))::numeric;
			cd_mens_espec_1		:= (coalesce(trim(both substr(ds_conteudo_w,99,4)),0))::numeric;
			cd_mens_espec_2		:= (coalesce(trim(both substr(ds_conteudo_w,103,4)),0))::numeric;
			cd_mens_espec_3		:= (coalesce(trim(both substr(ds_conteudo_w,107,4)),0))::numeric;
			cd_mens_espec_4		:= (coalesce(trim(both substr(ds_conteudo_w,111,4)),0))::numeric;
			cd_mens_espec_5		:= (coalesce(trim(both substr(ds_conteudo_w,115,4)),0))::numeric;
			ds_mens_espec_w		:= trim(both substr(ds_conteudo_w,119,300));
 
			if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
				nr_seq_transacao_w	:= nr_seq_requisicao_w;
				ie_tipo_transacao_w	:= 'R';
			elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '')then 
				nr_seq_transacao_w 	:= nr_seq_guia_w;
				ie_tipo_transacao_w	:= 'G';
			end if;
 
			if (ie_autorizado_w	= 1) then 
				ie_status_w	:= 'N';
				ie_status_ww	:= 2;
			elsif (ie_autorizado_w	= 2) then 
				ie_status_w	:= 'S';
				ie_status_ww	:= 1;
			end if;
 
			if (ie_status_w 	= 'N') then 
				qt_autorizada_ww	:= 0;
			else 
				begin 
					qt_autorizada_ww	:= (ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w, 'R'))::numeric;
				exception 
				when others then 
					qt_autorizada_ww 	:= (replace(ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w, 'R'),',','.'))::numeric;
				end;
			end if;
 
			select	count(1) 
			into STRICT	qt_reg_generico_w 
			from	pls_regra_generico_ptu 
			where	cd_proc_mat_generico	= cd_servico_w 
			and	ie_situacao		= 'A';
 
			if (ie_tipo_tabela_w	in ('0','1','4')) then 
				if (coalesce(nr_seq_pedido_aut_w,0)	<> 0) then 
					if (qt_reg_generico_w > 0) then 
						begin 
							select	nr_sequencia, 
								nr_seq_req_proc, 
								nr_seq_guia_proc 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_proc_w, 
								nr_seq_guia_proc_w 
							from	ptu_pedido_aut_servico 
							where	nr_seq_pedido					= nr_seq_pedido_aut_w 
							and	ie_tipo_tabela					= ie_tipo_tabela_w 
							and	coalesce(cd_servico_consersao,cd_servico)		= cd_servico_w 
							and	((ds_opme IS NOT NULL AND ds_opme::text <> '') and (trim(both upper(elimina_acentuacao(ds_opme)))	= trim(both upper(ds_servico_w))) 
							or (coalesce(ds_opme::text, '') = '')) 
							and ((nr_seq_req_proc IS NOT NULL AND nr_seq_req_proc::text <> '') or (nr_seq_guia_proc IS NOT NULL AND nr_seq_guia_proc::text <> ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
							ie_resposta_w			:= 'RAI';
							exit;
						end;
					else 
						begin 
							select	nr_sequencia, 
								nr_seq_req_proc, 
								nr_seq_guia_proc 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_proc_w, 
								nr_seq_guia_proc_w 
							from	ptu_pedido_aut_servico 
							where	nr_seq_pedido		= nr_seq_pedido_aut_w 
							and	ie_tipo_tabela		= ie_tipo_tabela_w 
							and	coalesce(cd_servico_consersao,cd_servico)		= cd_servico_w 
							and ((nr_seq_req_proc IS NOT NULL AND nr_seq_req_proc::text <> '') or (nr_seq_guia_proc IS NOT NULL AND nr_seq_guia_proc::text <> ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
							ie_resposta_w			:= 'RAI';
							exit;
						end;
					end if;
					 
				elsif (coalesce(nr_seq_pedido_compl_w,0)	<> 0) then 
					if (qt_reg_generico_w > 0) then 
						begin 
							select	nr_sequencia, 
								nr_seq_req_proc, 
								nr_seq_guia_proc 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_proc_w, 
								nr_seq_guia_proc_w 
							from	ptu_pedido_compl_aut_serv 
							where	nr_seq_pedido					= nr_seq_pedido_compl_w 
							and	ie_tipo_tabela					= ie_tipo_tabela_w 
							and	coalesce(cd_servico_conversao,cd_servico)		= cd_servico_w 
							and	((ds_opme IS NOT NULL AND ds_opme::text <> '') and (trim(both upper(elimina_acentuacao(ds_opme)))	= trim(both upper(ds_servico_w))) 
							or (coalesce(ds_opme::text, '') = '')) 
							and ((nr_seq_req_proc IS NOT NULL AND nr_seq_req_proc::text <> '') or (nr_seq_guia_proc IS NOT NULL AND nr_seq_guia_proc::text <> ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
							ie_resposta_w			:= 'RAI';
							exit;
						end;
					else 
						begin 
							select	nr_sequencia, 
								nr_seq_req_proc, 
								nr_seq_guia_proc 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_proc_w, 
								nr_seq_guia_proc_w 
							from	ptu_pedido_compl_aut_serv 
							where	nr_seq_pedido		= nr_seq_pedido_compl_w 
							and	ie_tipo_tabela		= ie_tipo_tabela_w 
							and	coalesce(cd_servico_conversao,cd_servico)		= cd_servico_w 
							and ((nr_seq_req_proc IS NOT NULL AND nr_seq_req_proc::text <> '') or (nr_seq_guia_proc IS NOT NULL AND nr_seq_guia_proc::text <> ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
							ie_resposta_w			:= 'RAI';
							exit;
						end;
					end if;
				end if;
 
				--cd_servico_conversao_w	:= ptu_obter_servico_conversao(cd_servico_w, nr_seq_pedido_aut_w, nr_seq_ped_aut_compl_serv_w, 'RA'); 
				nr_seq_procedimento_w	:= coalesce(nr_seq_guia_proc_w,nr_seq_req_proc_w);
 
				if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
					select	a.ie_status, 
						obter_valor_dominio(3431, b.ie_estagio), 
						a.nm_usuario, 
						a.dt_atualizacao, 
						a.cd_procedimento 
					into STRICT	ie_status_item_w, 
						ds_estagio_req_w, 
						nm_usuario_item_w, 
						dt_atualizacao_item_w, 
						cd_procedimento_w 
					from	pls_requisicao		b, 
						pls_requisicao_proc	a 
					where	a.nr_sequencia		= nr_seq_req_proc_w 
					and	a.nr_seq_requisicao	= b.nr_sequencia;
 
					if (ie_status_item_w	in ('I','A')) then 
						update	pls_requisicao_proc 
						set	ie_status	= ie_status_w, 
							qt_procedimento	= qt_autorizada_ww, 
							dt_atualizacao	= clock_timestamp(), 
							nm_usuario	= nm_usuario_p 
						where	nr_sequencia	= nr_seq_req_proc_w;
					else 
						CALL pls_requisicao_gravar_hist(	nr_seq_requisicao_w,'L',substr(cd_procedimento_w||' - Status não atualizado com a resposta '|| 
										' de auditoria da operadora de origem, requisição já '|| 
										ds_estagio_req_w||' internamente pelo usuário '||nm_usuario_item_w|| 
										' em '||to_char(dt_atualizacao_item_w,'dd/mm/yyyy hh24:mi:ss'),1,4000),null, 
										nm_usuario_p);
					end if;
				elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then 
					update	pls_guia_plano_proc 
					set	ie_status	= ie_status_w, 
						qt_autorizada	= qt_autorizada_ww, 
						dt_atualizacao	= clock_timestamp(), 
						nm_usuario	= nm_usuario_p 
					where	nr_sequencia	= nr_seq_guia_proc_w;
				end if;
 
				if (cd_mens_espec_1	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_1,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_2	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_2,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_3	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_3,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_4	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_4,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_5	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_5,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
				 
				select	max(ie_origem_proced) 
				into STRICT	ie_origem_proced_w 
				from  procedimento 
				where  cd_procedimento		= cd_servico_w 
				and	ie_origem_proced	in (1,4,5) 
				and	ie_situacao		= 'A';
 
				insert	into ptu_resp_auditoria_servico(nr_sequencia, ie_tipo_tabela, cd_servico, 
					 ie_origem_servico, ds_servico, ie_autorizado, 
					 dt_atualizacao, nm_usuario, qt_autorizado, 
					 nr_seq_auditoria, cd_servico_conversao, nr_seq_guia_proc, 
					 nr_seq_req_proc, nm_usuario_nrec, dt_atualizacao_nrec) 
				values (nextval('ptu_resp_auditoria_servico_seq'), ie_tipo_tabela_w, cd_servico_w, 
					 ie_origem_proced_w, coalesce(ds_servico_w,'Não encontrado'), ie_autorizado_w, 
					 clock_timestamp(), nm_usuario_p, qt_autorizada_ww, 
					 nr_seq_auditoria_w, cd_servico_conversao_w, nr_seq_guia_proc_w, 
					 nr_seq_req_proc_w, nm_usuario_p, clock_timestamp());
			elsif (ie_tipo_tabela_w	in ('2','3')) then 
				if (coalesce(nr_seq_pedido_aut_w,0)	<> 0) then 
					if (qt_reg_generico_w > 0) then 
						begin 
							select	nr_sequencia, 
								nr_seq_req_mat, 
								nr_seq_guia_mat 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_mat_w, 
								nr_seq_guia_mat_w 
							from	ptu_pedido_aut_servico 
							where	nr_seq_pedido					= nr_seq_pedido_aut_w 
							and	ie_tipo_tabela					= ie_tipo_tabela_w 
							and	coalesce(cd_servico_consersao,cd_servico)		= cd_servico_w 
							and	((ds_opme IS NOT NULL AND ds_opme::text <> '') and (trim(both upper(elimina_acentuacao(ds_opme)))	= trim(both upper(ds_servico_w))) 
							or (coalesce(ds_opme::text, '') = '')) 
							and ((nr_seq_req_mat IS NOT NULL AND nr_seq_req_mat::text <> '') or (nr_seq_guia_mat IS NOT NULL AND nr_seq_guia_mat::text <> ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_mat_w		:= null;
							nr_seq_guia_mat_w		:= null;
							ie_resposta_w			:= 'RAI';
							exit;
						end;
					else 
						begin 
							select	nr_sequencia, 
								nr_seq_req_mat, 
								nr_seq_guia_mat 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_mat_w, 
								nr_seq_guia_mat_w 
							from	ptu_pedido_aut_servico 
							where	nr_seq_pedido		= nr_seq_pedido_aut_w 
							and	ie_tipo_tabela		= ie_tipo_tabela_w 
							and	coalesce(cd_servico_consersao,cd_servico)		= cd_servico_w 
							and ((nr_seq_req_mat IS NOT NULL AND nr_seq_req_mat::text <> '') or (nr_seq_guia_mat IS NOT NULL AND nr_seq_guia_mat::text <> ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_mat_w		:= null;
							nr_seq_guia_mat_w		:= null;
							ie_resposta_w			:= 'RAI';
							exit;
						end;
					end if;
 
				elsif (coalesce(nr_seq_pedido_compl_w,0)	<> 0) then 
					if (qt_reg_generico_w > 0) then 
						begin 
							select	nr_sequencia, 
								nr_seq_req_mat, 
								nr_seq_guia_mat 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_mat_w, 
								nr_seq_guia_mat_w 
							from	ptu_pedido_compl_aut_serv 
							where	nr_seq_pedido					= nr_seq_pedido_compl_w 
							and	ie_tipo_tabela					= ie_tipo_tabela_w 
							and	coalesce(cd_servico_conversao,cd_servico)		= cd_servico_w 
							and	((ds_opme IS NOT NULL AND ds_opme::text <> '') and (trim(both upper(elimina_acentuacao(ds_opme)))	= trim(both upper(ds_servico_w))) 
							or (coalesce(ds_opme::text, '') = '')) 
							and ((nr_seq_req_mat IS NOT NULL AND nr_seq_req_mat::text <> '') or (nr_seq_guia_mat IS NOT NULL AND nr_seq_guia_mat::text <> ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_mat_w		:= null;
							nr_seq_guia_mat_w		:= null;
							ie_resposta_w			:= 'RAI';
							exit;
						end;
					else 
						begin 
							select	nr_sequencia, 
								nr_seq_req_mat, 
								nr_seq_guia_mat 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_mat_w, 
								nr_seq_guia_mat_w 
							from	ptu_pedido_compl_aut_serv 
							where	nr_seq_pedido		= nr_seq_pedido_compl_w 
							and	ie_tipo_tabela		= ie_tipo_tabela_w 
							and	coalesce(cd_servico_conversao,cd_servico)		= cd_servico_w 
							and ((nr_seq_req_mat IS NOT NULL AND nr_seq_req_mat::text <> '') or (nr_seq_guia_mat IS NOT NULL AND nr_seq_guia_mat::text <> ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_mat_w		:= null;
							nr_seq_guia_mat_w		:= null;
							ie_resposta_w			:= 'RAI';
							exit;
						end;
					end if;
				end if;
 
				--cd_servico_conversao_w	:= ptu_obter_servico_conversao(cd_servico_w, nr_seq_pedido_aut_w, nr_seq_ped_aut_compl_serv_w, 'RA'); 
				nr_seq_material_w	:= coalesce(nr_seq_guia_mat_w,nr_seq_req_mat_w);
 
				if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
					select	a.ie_status, 
						obter_valor_dominio(3431, b.ie_estagio), 
						a.nm_usuario, 
						a.dt_atualizacao, 
						pls_obter_seq_codigo_material(nr_seq_material,'') 
					into STRICT	ie_status_item_w, 
						ds_estagio_req_w, 
						nm_usuario_item_w, 
						dt_atualizacao_item_w, 
						cd_material_ops_w 
					from	pls_requisicao		b, 
						pls_requisicao_mat	a 
					where	a.nr_sequencia		= nr_seq_req_mat_w 
					and	a.nr_seq_requisicao	= b.nr_sequencia;
 
					if (ie_status_item_w	in ('I','A')) then 
						update	pls_requisicao_mat 
						set	ie_status	= ie_status_w, 
							qt_material	= qt_autorizada_ww, 
							dt_atualizacao	= clock_timestamp(), 
							nm_usuario	= nm_usuario_p 
						where	nr_sequencia	= nr_seq_req_mat_w;
					else 
						CALL pls_requisicao_gravar_hist(	nr_seq_requisicao_w,'L',substr(cd_material_ops_w||' - Status não atualizado com a resposta ' 
										||'de auditoria da operadora de origem, requisição já '|| 
										ds_estagio_req_w||' internamente pelo usuário '||nm_usuario_item_w|| 
										' em '||to_char(dt_atualizacao_item_w,'dd/mm/yyyy hh24:mi:ss'),1,4000),null, 
										nm_usuario_p);
					end if;
				elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then 
					update	pls_guia_plano_mat 
					set	ie_status	= ie_status_w, 
						qt_autorizada	= qt_autorizada_ww, 
						dt_atualizacao	= clock_timestamp(), 
						nm_usuario	= nm_usuario_p 
					where	nr_sequencia	= nr_seq_guia_mat_w;
				end if;
 
				if (cd_mens_espec_1	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_1,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_2	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_2,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_3	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_3,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_4	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_4,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_5	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_5,ds_mens_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				insert	into ptu_resp_auditoria_servico(nr_sequencia, ie_tipo_tabela, cd_servico, 
					 ie_origem_servico, ds_servico, ie_autorizado, 
					 dt_atualizacao, nm_usuario, qt_autorizado, 
					 nr_seq_auditoria, cd_servico_conversao, nr_seq_guia_mat, 
					 nr_seq_req_mat, nm_usuario_nrec, dt_atualizacao_nrec) 
				values (nextval('ptu_resp_auditoria_servico_seq'), ie_tipo_tabela_w, cd_servico_w, 
					 ie_origem_proced_w, coalesce(ds_servico_w,'Não encontrado'), ie_autorizado_w, 
					 clock_timestamp(), nm_usuario_p, qt_autorizada_ww, 
					 nr_seq_auditoria_w, cd_servico_conversao_w, nr_seq_guia_mat_w, 
					 nr_seq_req_mat_w, nm_usuario_p, clock_timestamp());
			end if;
		end if;
	end if;
	end;
end loop;
close c01;
 
-- Verificar se existe a Confirmação de um Decurso de Prazo com o identificador 1 - Conformada. 
-- Caso exista, a confirmação da Resposta de auditoria deve ser enviada como "Situação Inválida" 
select	count(1) 
into STRICT	qt_decurso_prazo_w 
from	ptu_confirmacao 
where	ie_tipo_resposta	= 'DP' 
and	ie_tipo_identificador	= 1 
and	nr_seq_execucao		= nr_seq_execucao_p 
and	cd_unimed_executora	= cd_unimed_executora_w;
 
if (qt_decurso_prazo_w	> 0) then 
	ie_resposta_w	:= 'RAI';
end if;
 
if (ie_resposta_w = 'RA') then 
	if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
		nr_seq_regra_ret_orig_w := pls_verif_reg_retorno_aud_orig(nr_seq_requisicao_w, nm_usuario_p, nr_seq_regra_ret_orig_w);
	end if;
 
	if (ie_tipo_transacao_w	= 'G') then 
		select	count(1) 
		into STRICT	qt_reg_liberado_w 
		from	pls_guia_plano_proc 
		where	nr_seq_guia	= nr_seq_guia_w 
		and	ie_status	= 'S';
 
		select	count(1) 
		into STRICT	qt_reg_liberado_ww 
		from	pls_guia_plano_mat 
		where	nr_seq_guia	= nr_seq_guia_w 
		and	ie_status	= 'S';
 
		qt_registro_w	:= qt_reg_liberado_w + qt_reg_liberado_ww;
 
		select	count(1) 
		into STRICT	qt_reg_negado_w 
		from	pls_guia_plano_proc 
		where	nr_seq_guia	= nr_seq_guia_w 
		and	ie_status	= 'N';
 
		select	count(1) 
		into STRICT	qt_reg_negado_ww 
		from	pls_guia_plano_mat 
		where	nr_seq_guia	= nr_seq_guia_w 
		and	ie_status	= 'N';
		 
		qt_registro_ww	:= qt_reg_negado_w + qt_reg_negado_ww;
		 
		if (coalesce(ie_gerar_senha_interna_w,'S')	= 'S') then 
			if (ie_controle_estab_w	= 'S') then 
				select 	max(nr_sequencia) 
				into STRICT	nr_seq_regra_senha_w 
				from	pls_aut_regra_gera_senha 
				where	dt_inicio_vigencia		<= clock_timestamp() 
				and	coalesce(dt_fim_vigencia,clock_timestamp())	>= clock_timestamp() 
				and (coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento);
			else 
				select 	max(nr_sequencia) 
				into STRICT	nr_seq_regra_senha_w 
				from	pls_aut_regra_gera_senha 
				where	dt_inicio_vigencia		<= clock_timestamp() 
				and	coalesce(dt_fim_vigencia,clock_timestamp())	>= clock_timestamp();
			end if;
				 
			if (nr_seq_regra_senha_w IS NOT NULL AND nr_seq_regra_senha_w::text <> '') then 
				cd_senha_w := pls_gerar_senha_aut_regra(nr_seq_regra_senha_w, nr_seq_guia_w, null, nm_usuario_p, cd_senha_w);
			end if;
		else 
			cd_senha_w	:= null;
		end if;
 
		if (qt_registro_w	> 0) and (qt_registro_ww = 0) then 
			update	pls_guia_plano 
			set	ie_estagio		= 6, 
				ie_status		= 1, 
				dt_autorizacao		= clock_timestamp(), 
				dt_valid_senha_ext	= dt_validade_senha_w, 
				cd_senha_externa	= nr_seq_origem_w, 
				nm_usuario_liberacao	= nm_usuario_p, 
				cd_senha		= cd_senha_w 
			where	nr_sequencia		= nr_seq_guia_w;
		elsif (qt_registro_w	> 0) and (qt_registro_ww > 0) then 
			update	pls_guia_plano 
			set	ie_estagio		= 10, 
				ie_status		= 1, 
				dt_autorizacao		= clock_timestamp(), 
				dt_valid_senha_ext	= dt_validade_senha_w, 
				cd_senha_externa	= nr_seq_origem_w, 
				nm_usuario_liberacao	= nm_usuario_p, 
				cd_senha		= cd_senha_w 
			where	nr_sequencia		= nr_seq_guia_w;
		elsif (qt_registro_w	= 0) and (qt_registro_ww > 0) then 
			update	pls_guia_plano 
			set	ie_estagio		= 4, 
				ie_status		= 3, 
				dt_autorizacao		= clock_timestamp(), 
				nm_usuario_liberacao	= nm_usuario_p 
			where	nr_sequencia		= nr_seq_guia_w;
		end if;
 
		begin 
			select	nr_seq_atend_pls, 
				nr_seq_evento_atend, 
				ie_status 
			into STRICT	nr_seq_atend_pls_w, 
				nr_seq_evento_atend_w, 
				ie_status_guia_w 
			from	pls_guia_plano 
			where	nr_sequencia = nr_seq_requisicao_w;
		exception 
		when others then 
			nr_seq_atend_pls_w := null;
			nr_seq_evento_atend_w := null;
		end;
 
		begin 
			select	dt_fim_evento 
			into STRICT	dt_fim_evento_w 
			from	pls_atendimento_evento 
			where	nr_sequencia = nr_seq_evento_atend_w;
		exception 
		when others then 
			dt_fim_evento_w := null;
		end;
 
		if (ie_status_guia_w <> '2') and (nr_seq_atend_pls_w IS NOT NULL AND nr_seq_atend_pls_w::text <> '') and (dt_fim_evento_w IS NOT NULL AND dt_fim_evento_w::text <> '') then 
			CALL pls_finalizar_atendimento(	nr_seq_atend_pls_w, 
							nr_seq_evento_atend_w, 
							null, 
							null, 
							nm_usuario_p);
		end if;				
 
		for	r_CGuia_w in CGuia(nr_seq_guia_w) loop 
			update	pls_auditoria 
			set	dt_liberacao	= clock_timestamp(), 
				ie_status	= 'F', 
				dt_atualizacao	= clock_timestamp(), 
				nm_usuario	= nm_usuario_p 
			where	nr_sequencia	= r_CGuia_w.nr_sequencia;
 
			update	pls_auditoria_grupo 
			set	dt_liberacao		= clock_timestamp(), 
				ie_status		= 'S', 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	coalesce(dt_liberacao::text, '') = '' 
			and	nr_seq_auditoria	= r_CGuia_w.nr_sequencia;
 
			for	r_CItemGuia_w in CItem(r_CGuia_w.nr_sequencia) loop 
				if (coalesce(r_CItemGuia_w.nr_seq_proc_origem,0) > 0) then 
					select	ie_status, 
						qt_autorizada 
					into STRICT	ie_status_item_w, 
						qt_autorizada_ww 
					from	pls_guia_plano_proc 
					where	nr_sequencia = r_CItemGuia_w.nr_seq_proc_origem;
				elsif (coalesce(r_CItemGuia_w.nr_seq_mat_origem,0) > 0) then 
					select	ie_status, 
						qt_autorizada 
					into STRICT	ie_status_item_w, 
						qt_autorizada_ww 
					from	pls_guia_plano_mat 
					where	nr_sequencia = r_CItemGuia_w.nr_seq_mat_origem;
				else 
					ie_status_item_w := 'S';
				end if;
 
				if (ie_status_item_w in ('S','P')) then 
					ie_status_w := 'S';
				elsif (ie_status_item_w in ('N','G','C')) then 
					ie_status_w := 'N';
				end if;
 
				update	pls_auditoria_item 
				set	ie_status		= CASE WHEN ie_status_w='S' THEN 'A'  ELSE 'N' END , 
					ie_status_solicitacao	= CASE WHEN ie_status_w='S' THEN 'A'  ELSE 'N' END , 
					dt_atualizacao		= clock_timestamp(), 
					qt_ajuste		= qt_autorizada_ww, 
					nm_usuario		= nm_usuario_p 
				where	nr_sequencia 		= r_CItemGuia_w.nr_sequencia;
			end loop;
 
			CALL pls_gerar_alerta_evento(1,r_CGuia_w.nr_sequencia,null,null,nm_usuario_p);
		end loop;
		CALL pls_guia_gravar_historico(nr_seq_guia_w,2,substr('Recebida e processada a resposta de auditoria da Unimed '||cd_unimed_beneficiario_w||' com a mensagem: '||chr(10)||ds_observacao_w,1,4000),'',nm_usuario_p);
	elsif (ie_tipo_transacao_w	= 'R') and (nr_seq_regra_ret_orig_w	= 0) then 
		select	count(1) 
		into STRICT	qt_reg_liberado_w 
		from	pls_requisicao_proc 
		where	nr_seq_requisicao	= nr_seq_requisicao_w 
		and	ie_status	= 'S';
 
		select	count(1) 
		into STRICT	qt_reg_liberado_ww 
		from	pls_requisicao_mat 
		where	nr_seq_requisicao	= nr_seq_requisicao_w 
		and	ie_status	= 'S';
 
		qt_registro_w	:= qt_reg_liberado_w + qt_reg_liberado_ww;
 
		select	count(1) 
		into STRICT	qt_reg_negado_w 
		from	pls_requisicao_proc 
		where	nr_seq_requisicao	= nr_seq_requisicao_w 
		and	ie_status	= 'N';
 
		select	count(1) 
		into STRICT	qt_reg_negado_ww 
		from	pls_requisicao_mat 
		where	nr_seq_requisicao	= nr_seq_requisicao_w 
		and	ie_status	= 'N';
 
		qt_registro_ww	:= qt_reg_negado_w + qt_reg_negado_ww;
 
		if (qt_registro_w > 0) and (qt_registro_ww > 0) then 
			update	pls_requisicao 
			set	ie_estagio		= 6, 
				dt_valid_senha_ext	= dt_validade_senha_w, 
				dt_validade_senha	= dt_validade_senha_w, 
				cd_senha_externa	= nr_seq_origem_w, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= nr_seq_requisicao_w;
		elsif (qt_registro_ww > 0) and (qt_registro_w = 0) then 
			update	pls_requisicao 
			set	ie_estagio		= 7, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= nr_seq_requisicao_w;
		elsif (qt_registro_ww = 0) and (qt_registro_w > 0) then 
			update	pls_requisicao 
			set	ie_estagio		= 2, 
				dt_valid_senha_ext	= dt_validade_senha_w, 
				dt_validade_senha	= dt_validade_senha_w, 
				cd_senha_externa	= nr_seq_origem_w, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= nr_seq_requisicao_w;
		end if;
 
		begin 
			select	nr_seq_atend_pls, 
				nr_seq_evento_atend, 
				ie_estagio 
			into STRICT	nr_seq_atend_pls_w, 
				nr_seq_evento_atend_w, 
				ie_estagio_w 
			from	pls_requisicao 
			where	nr_sequencia = nr_seq_requisicao_w;
		exception 
		when others then 
			nr_seq_atend_pls_w := null;
			nr_seq_evento_atend_w := null;
		end;
 
		begin 
			select	dt_fim_evento 
			into STRICT	dt_fim_evento_w 
			from	pls_atendimento_evento 
			where	nr_sequencia = nr_seq_evento_atend_w;
		exception 
		when others then 
			dt_fim_evento_w := null;
		end;
 
		if (ie_estagio_w in (2,6,7)) and (nr_seq_atend_pls_w IS NOT NULL AND nr_seq_atend_pls_w::text <> '') and (dt_fim_evento_w IS NOT NULL AND dt_fim_evento_w::text <> '') then 
			CALL pls_finalizar_atendimento(	nr_seq_atend_pls_w, 
							nr_seq_evento_atend_w, 
							null, 
							null, 
							nm_usuario_p);
		end if;		
 
		for	r_CReq_w in CReq(nr_seq_requisicao_w) loop 
			update	pls_auditoria 
			set	dt_liberacao		= clock_timestamp(), 
				ie_status		= 'F', 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= r_CReq_w.nr_sequencia;
 
			update	pls_auditoria_grupo 
			set	dt_liberacao		= clock_timestamp(), 
				ie_status		= 'S', 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	coalesce(dt_liberacao::text, '') = '' 
			and	nr_seq_auditoria	= r_CReq_w.nr_sequencia;
			 
			for	r_CItemReq_w in CItem(r_CReq_w.nr_sequencia) loop 
				if (coalesce(r_CItemReq_w.nr_seq_proc_origem,0) > 0) then 
					select	ie_status, 
						qt_procedimento 
					into STRICT	ie_status_item_w, 
						qt_autorizada_ww 
					from	pls_requisicao_proc 
					where	nr_sequencia = r_CItemReq_w.nr_seq_proc_origem;
				elsif (coalesce(r_CItemReq_w.nr_seq_mat_origem,0) > 0) then 
					select	ie_status, 
						qt_material 
					into STRICT	ie_status_item_w, 
						qt_autorizada_ww 
					from	pls_requisicao_mat 
					where	nr_sequencia = r_CItemReq_w.nr_seq_mat_origem;
				else 
					ie_status_item_w := 'S';
				end if;
 
				if (ie_status_item_w in ('S','P')) then 
					ie_status_w := 'S';
				elsif (ie_status_item_w in ('N','G','C')) then 
					ie_status_w := 'N';
				end if;
 
				update	pls_auditoria_item 
				set	ie_status		= CASE WHEN ie_status_w='S' THEN 'A'  ELSE 'N' END , 
					ie_status_solicitacao	= CASE WHEN ie_status_w='S' THEN 'A'  ELSE 'N' END , 
					dt_atualizacao		= clock_timestamp(), 
					qt_ajuste		= qt_autorizada_ww, 
					nm_usuario		= nm_usuario_p 
				where	nr_sequencia 		= r_CItemReq_w.nr_sequencia;
			end loop;
 
			CALL pls_gerar_alerta_evento(1,r_CReq_w.nr_sequencia,null,null,nm_usuario_p);
 
			if (r_CReq_w.ie_status	<> 'A') then 
				if (r_CReq_w.ie_status	= 'AN') then 
					update	pls_notificacao_atend 
					set	dt_fim_solicitacao	= clock_timestamp(), 
						ie_status		= 'NE', 
						dt_atualizacao		= clock_timestamp(), 
						nm_usuario		= nm_usuario_p 
					where	nr_seq_auditoria	= r_CReq_w.nr_sequencia;
				end if;
				CALL pls_requisicao_gravar_hist(nr_seq_requisicao_w,'L',substr('Alterado status para Análise devido recebimento de resposta de auditoria da operadora de origem',1,4000),null,nm_usuario_p);
			end if;
		end loop;
 
		CALL pls_requisicao_gravar_hist(nr_seq_requisicao_w,'L',substr('Recebida e processada a resposta de auditoria da Unimed '||cd_unimed_beneficiario_w||' com a mensagem: '||chr(10)||ds_observacao_w,1,4000),null,nm_usuario_p);
	elsif (ie_tipo_transacao_w	= 'R') and (nr_seq_regra_ret_orig_w	> 0) then 
		update	pls_requisicao 
		set	dt_valid_senha_ext	= dt_validade_senha_w, 
			dt_validade_senha	= dt_validade_senha_w, 
			cd_senha_externa	= nr_seq_origem_w, 
			dt_atualizacao		= clock_timestamp(), 
			nm_usuario		= nm_usuario_p 
		where	nr_sequencia		= nr_seq_requisicao_w;
		 
		CALL pls_requisicao_gravar_hist(nr_seq_requisicao_w,'L',substr('Recebida e processada a resposta de auditoria da Unimed '||cd_unimed_beneficiario_w||' com a mensagem: '||chr(10)||ds_observacao_w,1,4000),null,nm_usuario_p);
	end if;
 
	-- Inserir as glosas das inconsistências PTU, é necessário chamar esta rotina após atualizar o status da requisição e da guia 
	if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
		CALL pls_obter_glosa_incons(nr_seq_requisicao_w, 'R', nm_usuario_p);
		-- Se for uma requisição recebida por webService(TISS) então a guia gerada deve ser atualizada conforme a requisição 
		CALL ptu_atualizar_guia_proc_ws(nr_seq_requisicao_w, nm_usuario_p);
	elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then 
		CALL pls_obter_glosa_incons(nr_seq_guia_w, 'G', nm_usuario_p);
	end if;
 
	CALL ptu_gestao_envio_confirmacao(nr_seq_execucao_p, cd_estabelecimento_p, 'RA', nm_usuario_p);
 
elsif (ie_resposta_w	= 'RAI') then 
	CALL ptu_gestao_envio_confirmacao(nr_seq_execucao_p, cd_estabelecimento_p, 'RAI', nm_usuario_p);
end if;
 
<<final>> 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_imp_resp_auditoria_v50 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_execucao_p INOUT bigint) FROM PUBLIC;

