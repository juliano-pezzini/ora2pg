-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_ocor_aut_inter ( nr_seq_ocor_filtro_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, ie_gerar_ocorrencia_p INOUT text, ie_tipo_ocorrencia_p INOUT text) AS $body$
DECLARE

				
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Rotina utilizada para validar as informacoes do da operadora executora (intercambio) com os filtros definidos na regra
de ocorrencia combinada
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ x] Tasy (Delphi/Java) [  x] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao: Performance
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 

/*
IE_TIPO_OCORRENCIA_W	= C - Gera a ocorrencia para o cabecalho
			= I - Gera ocorrencia para os itens
*/
nr_seq_requisicao_w		bigint;
ie_gerar_ocorrencia_w		varchar(2)	:= 'N';
cd_estabelecimento_w		smallint;
ie_regra_com_itens_w		varchar(1);
nr_seq_uni_exec_w		bigint;
sg_estado_w			pessoa_juridica.sg_estado%type;
sg_estado_operadora_w		pessoa_juridica.sg_estado%type;
ie_tipo_intercambio_w		varchar(1);
ie_tipo_processo_w		varchar(1);
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;	
nr_seq_congenere_w		pls_congenere.nr_sequencia%type;
ie_tipo_intercambio_aut_w	varchar(10);
ie_status_token_w		pls_carteira_leitura_token.ie_status%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		ie_tipo_solicitacao_int,
		ie_tipo_intercambio
	from	pls_ocor_aut_filtro_inter
	where	nr_seq_ocor_aut_filtro	= nr_seq_ocor_filtro_p
	and	ie_situacao		= 'A'
	and (coalesce(nr_seq_uni_exec::text, '') = ''	or nr_seq_uni_exec	= nr_seq_uni_exec_w)
	and (coalesce(nr_seq_congenere::text, '') = '' or nr_seq_congenere	= nr_seq_congenere_w)
	and	((coalesce(sg_estado_operadora::text, '') = '') or (sg_estado_operadora = sg_estado_operadora_w))
	and (coalesce(ie_status_token::text, '') = '' or ie_status_token = ie_status_token_w);
	
BEGIN

if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then	
	select	nr_seq_uni_exec,
		cd_estabelecimento,
		ie_tipo_processo,
		nr_seq_segurado,
		ie_tipo_intercambio
	into STRICT	nr_seq_uni_exec_w,
		cd_estabelecimento_w,
		ie_tipo_processo_w,
		nr_seq_segurado_w,
		ie_tipo_intercambio_aut_w
	from	pls_requisicao
	where	nr_sequencia	= nr_seq_requisicao_p;

	begin
		select	max(ie_status_token)
		into STRICT	ie_status_token_w
		from	ptu_pedido_compl_aut
		where	nr_seq_requisicao = nr_seq_requisicao_p;

		if (coalesce(ie_status_token_w::text, '') = '') then
			select	max(ie_status_token)
			into STRICT	ie_status_token_w
			from	ptu_pedido_autorizacao
			where	nr_seq_requisicao = nr_seq_requisicao_p;
		end if;
	exception
	when others then
		ie_status_token_w := null;
	end;
elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then	
	select	nr_seq_uni_exec,
		cd_estabelecimento,
		ie_tipo_processo,
		nr_seq_segurado,
		ie_tipo_intercambio
	into STRICT	nr_seq_uni_exec_w,
		cd_estabelecimento_w,
		ie_tipo_processo_w,
		nr_seq_segurado_w,
		ie_tipo_intercambio_aut_w
	from	pls_guia_plano
	where	nr_sequencia	= nr_seq_guia_p;

	begin
		select	max(ie_status_token)
		into STRICT	ie_status_token_w
		from	ptu_pedido_compl_aut
		where	nr_seq_guia = nr_seq_guia_p;

		if (coalesce(ie_status_token_w::text, '') = '') then
			select	max(ie_status_token)
			into STRICT	ie_status_token_w
			from	ptu_pedido_autorizacao
			where	nr_seq_guia = nr_seq_guia_p;
		end if;
	exception
	when others then
		ie_status_token_w := null;
	end;
elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
	begin
		select	nr_seq_requisicao
		into STRICT	nr_seq_requisicao_w
		from	pls_execucao_requisicao
		where	nr_sequencia	= nr_seq_execucao_p;
	exception
	when others then
		nr_seq_requisicao_w		:= null;
		nr_seq_uni_exec_w		:= null;
		ie_tipo_intercambio_aut_w	:= null;
	end;

	if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then
		begin
			select	nr_seq_uni_exec,
				cd_estabelecimento,
				ie_tipo_processo,
				nr_seq_segurado,
				ie_tipo_intercambio
			into STRICT	nr_seq_uni_exec_w,
				cd_estabelecimento_w,
				ie_tipo_processo_w,
				nr_seq_segurado_w,
				ie_tipo_intercambio_aut_w
			from	pls_requisicao
			where	nr_sequencia	= nr_seq_requisicao_w;
		exception
		when others then
			nr_seq_uni_exec_w		:= null;
			ie_tipo_intercambio_aut_w	:= null;
		end;

		begin
			select	max(ie_status_token)
			into STRICT	ie_status_token_w
			from	ptu_pedido_compl_aut
			where	nr_seq_requisicao = nr_seq_requisicao_w;

			if (coalesce(ie_status_token_w::text, '') = '') then
				select	max(ie_status_token)
				into STRICT	ie_status_token_w
				from	ptu_pedido_autorizacao
				where	nr_seq_requisicao = nr_seq_requisicao_w;
			end if;
		exception
		when others then
			ie_status_token_w := null;
		end;
	end if;
end if;

select	max(nr_seq_congenere)
into STRICT	nr_seq_congenere_w
from 	pls_segurado
where	nr_sequencia	= nr_seq_segurado_w;

if (coalesce(ie_tipo_processo_w,'X')	= 'I')  or
	((coalesce(nr_seq_uni_exec_w,0) > 0) and (coalesce(nr_seq_guia_p,0) > 0))	then
	if (coalesce(ie_tipo_intercambio_aut_w,'X') = 'I') then
		--Obter a UF da congenere do beneficiario
		begin
			select	sg_estado
			into STRICT	sg_estado_operadora_w
			from	pessoa_juridica
			where	cd_cgc	= (	SELECT	cd_cgc
						from	pls_congenere
						where	nr_sequencia	= nr_seq_congenere_w);
		exception
		when others then
			sg_estado_operadora_w		:= 'X';
		end;
	elsif (coalesce(ie_tipo_intercambio_aut_w,'X') = 'E') or
		((coalesce(nr_seq_uni_exec_w,0) > 0) and (coalesce(nr_seq_guia_p,0) > 0)) then
		-- Obter estado da operadora executora
		begin
			select	sg_estado
			into STRICT	sg_estado_operadora_w
			from	pls_congenere	a,
				pessoa_juridica	b
			where	b.cd_cgc	= a.cd_cgc
			and	a.nr_sequencia	= nr_seq_uni_exec_w;
		exception
		when others then
			sg_estado_operadora_w	:= 'X';
		end;
	end if;	
	-- Obter a UF da operadora  - Tasy
	begin
		select	sg_estado
		into STRICT	sg_estado_w
		from	pessoa_juridica
		where	cd_cgc	= (	SELECT	cd_cgc_outorgante
					from	pls_outorgante
					where	cd_estabelecimento	= cd_estabelecimento_w);
	exception
	when others then
		sg_estado_w	:= 'X';
	end;
	if (coalesce(sg_estado_w,'X')	<> 'X') and (coalesce(sg_estado_operadora_w,'X') <> 'X') then
		if (sg_estado_w	= sg_estado_operadora_w) then
			ie_tipo_intercambio_w	:= 'E';
		else
			ie_tipo_intercambio_w	:= 'N';
		end if;
	else
		ie_tipo_intercambio_w	:= 'A';
	end if;
else
	ie_tipo_intercambio_w	:= 'A';
end if;

for r_C01_w in C01 loop
	
	ie_gerar_ocorrencia_w := 'S';
	
	if (coalesce(r_C01_w.ie_tipo_intercambio,'A') <> 'A') then
		if (r_C01_w.ie_tipo_intercambio = ie_tipo_intercambio_w) then
			ie_gerar_ocorrencia_w := 'S';
		else
			ie_gerar_ocorrencia_w := 'N';
		end if;
	end if;
	
	if (coalesce(r_C01_w.ie_tipo_solicitacao_int,'A') <> 'A') and (ie_gerar_ocorrencia_w = 'S') then
		if (r_C01_w.ie_tipo_solicitacao_int = ie_tipo_intercambio_aut_w) then
			ie_gerar_ocorrencia_w := 'S';
		else
			ie_gerar_ocorrencia_w := 'N';
		end if;
	end if;
	
	if (ie_gerar_ocorrencia_w = 'S') then
		exit;
	end if;
end loop;

if (ie_gerar_ocorrencia_w = 'S') then
	ie_regra_com_itens_w  :=  pls_obter_se_oco_aut_fil_itens(nr_seq_ocor_filtro_p);

	if (ie_regra_com_itens_w = 'S') then
		ie_tipo_ocorrencia_p := 'I';
	else
		ie_tipo_ocorrencia_p := 'C';
	end if;
end if;

ie_gerar_ocorrencia_p	:= ie_gerar_ocorrencia_w;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_ocor_aut_inter ( nr_seq_ocor_filtro_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, ie_gerar_ocorrencia_p INOUT text, ie_tipo_ocorrencia_p INOUT text) FROM PUBLIC;

