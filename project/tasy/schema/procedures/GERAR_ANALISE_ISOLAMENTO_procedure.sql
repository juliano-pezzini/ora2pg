-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_analise_isolamento ( nr_sequencia_p bigint, ie_analise_p bigint, --Confrmado (0) ou Não confirmado (1) 
 ie_modific_p text, --checkbox wDLG 'Modificar' 
 cd_precaucao_p bigint, --precaucao isolamento 
 cd_motivo_p bigint, --motivo isolamento 
 ds_justificativa_p text, -- justificativa isolamento 
 cd_microorganismo_p bigint default 0, --microorganismo 
 cd_topografia_p bigint default 0, nm_usuario_p text DEFAULT NULL, cd_origem_p bigint  -- Origem 
  DEFAULT NULL) AS $body$
DECLARE

					 
nr_sequencia_w		bigint;
dt_atualizacao_w		timestamp;
nm_usuario_w		varchar(255);
nr_seq_precaucao_w	bigint;
nr_atendimento_w		bigint;
dt_inicio_w		timestamp;
dt_termino_w		timestamp;
dt_registro_w		timestamp;
ie_situacao_w		varchar(1);
dt_liberacao_w		timestamp;
dt_inativacao_w		timestamp;
nm_usuario_inativacao_w	varchar(255);
ds_justificativa_w		varchar(255);
cd_medico_solic_w		bigint;
nm_usuario_lib_iso_w	varchar(255);
cd_responsavel_w		bigint;
dt_analise_w		timestamp;
nm_usuario_analise_w	varchar(255);
nr_seq_motivo_isol_w	atendimento_precaucao.nr_seq_motivo_isol%type;
ds_motivo_w		varchar(255);

BEGIN
 
if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then 
 
	select 	nr_atendimento, 
		dt_inicio, 
		coalesce(dt_analise, clock_timestamp()), 
		coalesce(nm_usuario_analise, nm_usuario_p), 
		nr_seq_motivo_isol, 
		substr(obter_motivo_precaucao(nr_sequencia),1,255) 
	into STRICT	nr_atendimento_w, 
		dt_inicio_w, 
		dt_analise_w, 
		nm_usuario_analise_w, 
		nr_seq_motivo_isol_w, 
		ds_motivo_w 
	from	atendimento_precaucao 
	where	nr_sequencia = nr_sequencia_p;
	 
	select nextval('atendimento_precaucao_seq') 
	into STRICT nr_sequencia_w 
	;
 
	if (ie_analise_p = 0) and (ie_modific_p = 'S') then --Confirmado alterando os dados de precaução 
		insert into atendimento_precaucao( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_precaucao, 
						nr_atendimento, 
						dt_inicio, 
						dt_termino, 
						dt_registro, 
						nr_seq_motivo_isol, 
						ie_situacao, 
						dt_liberacao, 						 
						ds_justificativa_analise, 
						dt_final_precaucao, 
						cd_medico_solic, 
						nm_usuario_lib_iso, 
						cd_responsavel, 
						dt_analise, 
						nm_usuario_analise, 
						ie_analise, 
						nr_seq_origem) 
					SELECT 	nr_sequencia_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						cd_precaucao_p, 
						nr_atendimento, 
						dt_inicio_w, 
						dt_termino, 
						clock_timestamp(), 
						cd_motivo_p, 
						ie_situacao, 
						dt_liberacao, 						 
						ds_justificativa_p, 
						dt_final_precaucao, 
						cd_medico_solic, 
						nm_usuario_lib_iso, 
						cd_responsavel, 
						coalesce(dt_analise, clock_timestamp()), 
						coalesce(nm_usuario_analise, nm_usuario_p), 
						'S', 
						cd_origem_p 
					from	atendimento_precaucao 
					where	nr_sequencia = nr_sequencia_p;
						 
		if ( cd_microorganismo_p > 0) and ( cd_topografia_p > 0) then 
									 
			insert into atend_precaucao_micro( 
							nr_sequencia, 
							dt_atualizacao, 
							nm_usuario, 
							dt_atualizacao_nrec, 
							nm_usuario_nrec, 
							nr_seq_atend_precaucao, 
							cd_microorganismo, 
							cd_topografia) 
			values (nextval('atend_precaucao_micro_seq'), 
							clock_timestamp(), 
							nm_usuario_p, 
							clock_timestamp(), 
							nm_usuario_p, 
							nr_sequencia_w, 
							cd_microorganismo_p, 
							cd_topografia_p );			
		end if;
		 
		update	atendimento_precaucao 
		set	dt_inativacao = clock_timestamp(), 
			ie_analise = 'S', 
			dt_analise = dt_analise_w, 
			nm_usuario_analise = nm_usuario_analise_w, 
			nm_usuario_inativacao = nm_usuario_p 
		where	nr_sequencia = nr_sequencia_p;
 
		select 	max(substr(obter_motivo_precaucao(nr_sequencia_w),1,255)) 
		into STRICT	ds_motivo_w 
		;
 
		if (cd_motivo_p IS NOT NULL AND cd_motivo_p::text <> '') then 
			CALL gerar_motivo_isolamento(nr_atendimento_w,cd_motivo_p,nm_usuario_p,'I',ds_motivo_w,null,null,coalesce(dt_inicio_w,clock_timestamp()),null,nr_sequencia_w,nr_sequencia_w);
		end if;			
		 
		CALL gerar_lancamento_automatico(nr_atendimento_w, null, 559, nm_usuario_p, null, null, null, null, null, null);
 
	elsif (ie_analise_p = 0) and (ie_modific_p = 'N') then --Confirmado sem alterar os dados 
		begin 
			update 	atendimento_precaucao 
			set	dt_analise = clock_timestamp(), 
				nm_usuario_analise = nm_usuario_p, 
				dt_atualizacao_nrec = clock_timestamp(), 
				nm_usuario_nrec = nm_usuario_p, 
				ie_analise = 'S', 
				ds_justificativa_analise = ds_justificativa_p 
			where	nr_sequencia = nr_sequencia_p;
 
			if (nr_seq_motivo_isol_w IS NOT NULL AND nr_seq_motivo_isol_w::text <> '') then 
				CALL gerar_motivo_isolamento(nr_atendimento_w,nr_seq_motivo_isol_w,nm_usuario_p,'I',ds_motivo_w,null,null,coalesce(dt_inicio_w,clock_timestamp()),null,nr_sequencia_p,nr_sequencia_p);
			end if;
 
		end;	
	 
	elsif (ie_analise_p = 1) then -- Não confirmado 
		begin 
		 
		CALL gerar_atendimento_precaucao(0,nr_atendimento_w,'T',0,nm_usuario_p,nr_sequencia_p);
		CALL gerar_motivo_isolamento(nr_atendimento_w,null,nm_usuario_p,'T',null,null,null,null,clock_timestamp(),nr_sequencia_p,nr_sequencia_p);
			 
			update	atendimento_paciente 
			set	ie_paciente_isolado = 'N', 
				dt_atualizacao	  = clock_timestamp(), 
				nm_usuario	  = nm_usuario_p 
			where	nr_atendimento   = nr_atendimento_w;
			 
			update	atendimento_precaucao 
			set	dt_analise = clock_timestamp(), 
				nm_usuario_analise = nm_usuario_p,				 
				ds_justificativa_analise = ds_justificativa_p, 
				dt_inativacao = clock_timestamp(), 
				ie_analise = 'N', 
				nm_usuario_inativacao = nm_usuario_p 
			where	nr_sequencia = nr_sequencia_p;
			 
		end;
	end if;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_analise_isolamento ( nr_sequencia_p bigint, ie_analise_p bigint, ie_modific_p text, cd_precaucao_p bigint, cd_motivo_p bigint, ds_justificativa_p text, cd_microorganismo_p bigint default 0, cd_topografia_p bigint default 0, nm_usuario_p text DEFAULT NULL, cd_origem_p bigint  DEFAULT NULL) FROM PUBLIC;

