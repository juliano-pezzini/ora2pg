-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE listArray AS (listArray unidade_atendimento.nr_seq_interno%type[50]);


CREATE OR REPLACE PROCEDURE reverte_transf_mapa ( cd_perfil_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ds_out_p INOUT text, nr_atendimento_p bigint, ie_reverte_alojamento text) AS $body$
DECLARE


nr_seq_interno_de_w		atend_paciente_unidade.nr_seq_interno%type;
nr_seq_interno_para_w		atend_paciente_unidade.nr_seq_interno%type;

nr_atendimento_w		unidade_atendimento.nr_atendimento%type;
cd_setor_atendimento_para_w	unidade_atendimento.cd_setor_atendimento%type;
cd_unidade_basica_para_w	unidade_atendimento.cd_unidade_basica%type;
cd_unidade_compl_para_w		unidade_atendimento.cd_unidade_compl%type;
cd_tipo_acomodacao_para_w	unidade_atendimento.cd_tipo_acomodacao%type;
nr_seq_interno_leito_para_w	unidade_atendimento.nr_seq_interno%type;

cd_setor_atendimento_de_w	unidade_atendimento.cd_setor_atendimento%type;
cd_unidade_basica_de_w		unidade_atendimento.cd_unidade_basica%type;
cd_unidade_compl_de_w		unidade_atendimento.cd_unidade_compl%type;
nr_seq_interno_leito_de_w	unidade_atendimento.nr_seq_interno%type;
nr_acompanhante_w		atendimento_acompanhante.nr_acompanhante%type;
nr_seq_interno_leito_acomp_w	unidade_atendimento.nr_seq_interno%type;

--Params
ie_transf_acomp_w		varchar(1);
ie_consist_sexo_pac_w		varchar(1);
ie_aguardando_hig_transf_w	varchar(1);
ie_considerar_leito_rn_w	varchar(1);
count_w				bigint:= 1;

C01 CURSOR FOR
  SELECT nr_seq_interno from UNIDADE_ATENDIMENTO
  where NR_ATENDIMENTO_ACOMP = coalesce(nr_atendimento_p,nr_atendimento_w);

C02 CURSOR(cd_setor_atendimento_p bigint, cd_unidade_basica_p text) FOR
	SELECT	cd_setor_atendimento,
		cd_unidade_basica,
		cd_unidade_compl,
		nr_seq_interno
	from UNIDADE_ATENDIMENTO
	where	cd_setor_atendimento = cd_setor_atendimento_p
	and	cd_unidade_basica = cd_unidade_basica_p
	and	coalesce(ie_situacao, 'A') = 'A'
	and	ie_status_unidade = 'I';
list listArray := listArray();
BEGIN

ie_transf_acomp_w := obter_Param_Usuario(44, 122, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_transf_acomp_w);
ie_consist_sexo_pac_w := obter_Param_Usuario(44, 220, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_consist_sexo_pac_w);
ie_aguardando_hig_transf_w := obter_Param_Usuario(44, 202, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_aguardando_hig_transf_w);
ie_considerar_leito_rn_w := obter_Param_Usuario(44, 229, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_considerar_leito_rn_w);


if (coalesce(nr_atendimento_p::text, '') = '')then
	select	max(nr_atendimento)
	into STRICT	nr_atendimento_w
	from	atend_paciente_unidade
	where	nr_seq_interno = nr_seq_interno_de_w;
end if;

open C01;
loop
fetch C01 into
	nr_seq_interno_leito_acomp_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	list.extend;
	list(count_w) := nr_seq_interno_leito_acomp_w;
	count_w := count_w+1;
end loop;
close C01;

nr_seq_interno_de_w:= Obter_Atepacu_paciente(coalesce(nr_atendimento_p, nr_atendimento_w), 'A'); -- A = Unidade Atual
nr_seq_interno_para_w:= Obter_Atepacu_paciente(coalesce(nr_atendimento_p, nr_atendimento_w), 'UAA'); -- UAA = Unidade Anterior a atual
select max(cd_setor_atendimento),
    max(cd_unidade_basica),
    max(cd_unidade_compl)
into STRICT cd_setor_atendimento_de_w,
    cd_unidade_basica_de_w,
    cd_unidade_compl_de_w
from	atend_paciente_unidade
where	nr_seq_interno = nr_seq_interno_de_w;

select MAX(NR_SEQ_INTERNO)
into STRICT nr_seq_interno_leito_de_w
from UNIDADE_ATENDIMENTO
where nr_atendimento = nr_atendimento_p
and cd_unidade_basica = cd_unidade_basica_de_w
and cd_unidade_compl = cd_unidade_compl_de_w
and cd_setor_atendimento = cd_setor_atendimento_de_w;

select	max(cd_tipo_acomodacao),
		max(cd_setor_atendimento),
		max(cd_unidade_basica),
		max(cd_unidade_compl)
into STRICT	cd_tipo_acomodacao_para_w,
		cd_setor_atendimento_para_w,
		cd_unidade_basica_para_w,
		cd_unidade_compl_para_w
from	atend_paciente_unidade
where	nr_seq_interno = nr_seq_interno_para_w;

select MAX(NR_SEQ_INTERNO)
into STRICT nr_seq_interno_leito_para_w
from UNIDADE_ATENDIMENTO
where cd_unidade_basica = cd_unidade_basica_para_w
and cd_unidade_compl = cd_unidade_compl_para_w
and cd_setor_atendimento = cd_setor_atendimento_para_w;

SELECT	COUNT(nr_acompanhante)
into STRICT 	nr_acompanhante_w
FROM	atendimento_acompanhante b
WHERE	b.nr_atendimento = coalesce(nr_atendimento_p, nr_atendimento_w);

if ((coalesce(nr_atendimento_p,nr_atendimento_w) IS NOT NULL AND (coalesce(nr_atendimento_p,nr_atendimento_w))::text <> '')) then
	CALL Gerar_Transferencia_Paciente(coalesce(nr_atendimento_p,nr_atendimento_w),
		cd_setor_atendimento_para_w,
		cd_unidade_basica_para_w,
		cd_unidade_compl_para_w,
		cd_tipo_acomodacao_para_w,
		nr_acompanhante_w,
		null,
		null,
		nm_usuario_p,
		clock_timestamp());

    CALL atualizar_seq_transf_solict(null, nr_seq_interno_leito_de_w, 'N');

	if (nr_acompanhante_w > 0) then

		CALL wheb_usuario_pck.set_ie_executar_trigger('N');

		update 	UNIDADE_ATENDIMENTO
		set 	IE_STATUS_UNIDADE = 'L',
			NR_ATENDIMENTO_ACOMP  = NULL,
			CD_PACIENTE_RESERVA  = NULL,
			NM_PAC_RESERVA  = NULL
		where 	NR_ATENDIMENTO_ACOMP = coalesce(nr_atendimento_p,nr_atendimento_w);

		for i in 1 ..list.count  loop
		    CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p,list(i),nm_usuario_p);
		end loop;

		for C02_W in C02(cd_setor_atendimento_de_w, cd_unidade_basica_de_w) loop
			update	unidade_atendimento
			set	ie_status_unidade	= 'L',
				ds_observacao		 = NULL,
				dt_atualizacao		= clock_timestamp(),
				dt_interdicao		 = NULL,
				nm_usuario		= nm_usuario_p,
				cd_motivo_interdicao	 = NULL,
				qt_dias_prev_interd	 = NULL
			where	cd_setor_atendimento	= C02_W.cd_setor_atendimento
			and	cd_unidade_basica	= C02_W.cd_unidade_basica
			and	cd_unidade_compl	= C02_W.cd_unidade_compl;

			CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p,C02_W.nr_seq_interno,nm_usuario_p);
		end loop c03_w;

        if (ie_reverte_alojamento = 'S') then
            update atendimento_acompanhante
            set    ie_alojamento = 'S'
            where  nr_atendimento = coalesce(nr_atendimento_p, nr_atendimento_w)
            and    nr_acompanhante = (SELECT max(nr_acompanhante)
                                      from   atendimento_acompanhante b
                                      where  b.nr_atendimento = coalesce(nr_atendimento_p, nr_atendimento_w)
                                        and  coalesce(b.dt_saida::text, '') = '');
        end if;

	end if;

	if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
        CALL wheb_usuario_pck.set_ie_executar_trigger('S');
    end if;

	CALL gerar_ajustes_ap_lote('M',coalesce(nr_atendimento_p,nr_atendimento_w), nm_usuario_p);



	if (coalesce(obter_consistir_se_mae_rn(coalesce(nr_atendimento_p, nr_atendimento_w)), 0) > 0) then

		CALL gerar_transferencia_rn(coalesce(nr_atendimento_p, nr_atendimento_w),
							cd_setor_atendimento_para_w,
							cd_unidade_basica_para_w,
							cd_unidade_compl_para_w,
							null,
							null,
							nm_usuario_p,
							clock_timestamp());
	end if;

	commit;

	begin
		CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p,nr_seq_interno_leito_de_w,nm_usuario_p);

		if (nr_seq_interno_leito_para_w IS NOT NULL AND nr_seq_interno_leito_para_w::text <> '') then
			CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p,nr_seq_interno_leito_para_w,nm_usuario_p);
		end if;

	exception
	when others then
		null;
	end;



end if;


ds_out_p:= wheb_mensagem_pck.get_texto(802292);



commit;



end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE reverte_transf_mapa ( cd_perfil_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ds_out_p INOUT text, nr_atendimento_p bigint, ie_reverte_alojamento text) FROM PUBLIC;

