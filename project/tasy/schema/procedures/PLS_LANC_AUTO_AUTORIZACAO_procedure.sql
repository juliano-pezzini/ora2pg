-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_lanc_auto_autorizacao ( nr_seq_autorizacao_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint ) AS $body$
DECLARE


cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_material_w		bigint;
nr_seq_regra_w			bigint;
nr_regra_restritiva_w		bigint := 0;
cd_procedimento_item_w		bigint;
ie_origem_proced_item_w		bigint;
nr_seq_material_item_w		bigint;
qt_item_lancamento_w		pls_regra_lanc_aut_item.qt_item_lancamento%type;
ie_restringe_estab_w		varchar(2);
ie_tipo_despesa_w		varchar(2) := null;
qt_proc_regra_w			bigint;
qt_mat_regra_w			bigint;
nr_seq_prestador_w		bigint;
nr_seq_uni_exec_w		bigint;
nr_seq_segurado_w		bigint;
ie_tipo_segurado_w		varchar(2);
nr_seq_plano_w			bigint;
ie_regulamentacao_w		varchar(2);
nr_seq_prest_fornec_w		bigint;
cd_cgc_w			varchar(255);
cd_fornecedor_w			bigint;
nr_seq_material_calc_w		bigint;
dt_preco_w			timestamp;
vl_preco_w			double precision;
nr_seq_tipo_acomodacao_w	bigint;
cd_medico_solicitante_w		varchar(10);
cd_pessoa_fisica_w		varchar(10);
qt_idade_w			integer;
qt_idade_meses_w		integer;
ie_unid_tempo_idade_w		varchar(1);
qt_idade_min_w			integer;
qt_idade_max_w			integer;
cd_especialidade_medica_w	integer;
qt_reg_w			bigint;
ie_tipo_intercambio_w		varchar(1);
sg_estado_w			pessoa_juridica.sg_estado%type;
ie_tipo_processo_w		varchar(1);
ie_origem_inclusao_w		varchar(2) := 'T';
ie_origem_solic_w		varchar(2);
ie_regime_internacao_w			bigint;
nr_seq_guia_plano_w		bigint;
nr_seq_proc_w			bigint;
vl_parametro_w			varchar(10);
nr_seq_congenere_w		pls_segurado.nr_seq_congenere%type;
sg_estado_int_w			pessoa_juridica.sg_estado%type;
ie_nacional_w			pls_congenere.ie_nacional%type;
cd_usuario_plano_w		pls_segurado_carteira.cd_usuario_plano%type;
cd_unimed_benef_w		varchar(4);
nr_seq_uni_benef_w		pls_requisicao.nr_seq_uni_exec%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		qt_idade_min,
		qt_idade_max,
		ie_unid_tempo_idade,
		cd_especialidade_medica
	from	pls_regra_lanc_automatico
	where	ie_situacao	= 'A'
	and	ie_evento	= 4
	and	((coalesce(ie_origem_lancamento::text, '') = '' and ie_origem_inclusao_w = 'T') or ie_origem_lancamento = 'A' or ie_origem_lancamento = ie_origem_inclusao_w)
	and (cd_procedimento = cd_procedimento_w or coalesce(cd_procedimento::text, '') = '')
	and (ie_origem_proced = ie_origem_proced_w or coalesce(ie_origem_proced::text, '') = '')
	and (nr_seq_material = nr_seq_material_w or coalesce(nr_seq_material::text, '') = '')
	and (ie_tipo_despesa = ie_tipo_despesa_w or coalesce(ie_tipo_despesa::text, '') = '')
	and (nr_seq_prestador = nr_seq_prestador_w or coalesce(nr_seq_prestador::text, '') = '')
	and (nr_seq_uni_exec = nr_seq_uni_exec_w or coalesce(nr_seq_uni_exec::text, '') = '')
	and (ie_tipo_segurado = ie_tipo_segurado_w or coalesce(ie_tipo_segurado::text, '') = '')
	and (ie_regulamentacao = ie_regulamentacao_w or coalesce(ie_regulamentacao::text, '') = '')	
	and (nr_seq_tipo_acomodacao = nr_seq_tipo_acomodacao_w or coalesce(nr_seq_tipo_acomodacao::text, '') = '')
	and (cd_medico_solicitante = cd_medico_solicitante_w or coalesce(cd_medico_solicitante::text, '') = '')
	and	((coalesce(ie_regime_internacao::text, '') = '') or (ie_regime_internacao = ie_regime_internacao_w))
	and	((ie_restringe_estab_w	= 'N')
	or	(ie_restringe_estab_w	= 'S' AND cd_estabelecimento = cd_estabelecimento_p))
	and	clock_timestamp() between(coalesce(dt_inicio_vigencia,clock_timestamp())) and (fim_dia(coalesce(dt_fim_vigencia,clock_timestamp())))
	and	((coalesce(ie_tipo_intercambio::text, '') = '' or ie_tipo_intercambio	= 'A') or (ie_tipo_intercambio = ie_tipo_intercambio_w))
	order by coalesce(cd_procedimento,0),
			coalesce(nr_seq_material,0),
			coalesce(ie_tipo_despesa,'0'),
			coalesce(cd_medico_solicitante, '0'),
			coalesce(nr_seq_prestador,0),
			coalesce(nr_seq_uni_exec,0);

C02 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_material,
		nr_seq_prest_fornec,
		qt_item_lancamento
	from	pls_regra_lanc_aut_item
	where	nr_seq_regra	= nr_regra_restritiva_w
	and	ie_situacao	= 'A';


BEGIN

vl_parametro_w := Obter_Param_Usuario(1204, 106, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, vl_parametro_w);

begin
	select	cd_procedimento,
		ie_origem_proced
	into STRICT	cd_procedimento_w,
		ie_origem_proced_w
	from	pls_guia_plano_proc
	where	nr_sequencia	= nr_seq_proc_p;
exception
when others then
	cd_procedimento_w	:= null;
	ie_origem_proced_w	:= null;
end;

begin
	select	nr_seq_material
	into STRICT	nr_seq_material_w
	from	pls_guia_plano_mat
	where	nr_sequencia	= nr_seq_mat_p;

	select 	ie_tipo_despesa
	into STRICT	ie_tipo_despesa_w
	from	pls_material
	where	nr_sequencia = nr_seq_material_w;
exception
when others then
	nr_seq_material_w	:= null;
end;

begin
	select	nr_seq_prestador,
		nr_seq_uni_exec,
		nr_seq_segurado,
		nr_seq_plano,
		nr_seq_tipo_acomodacao,
		cd_medico_solicitante,
		ie_tipo_processo,
		ie_origem_solic,
		ie_regime_internacao,
		pls_obter_dados_segurado(nr_seq_segurado, 'CR')
	into STRICT	nr_seq_prestador_w,
		nr_seq_uni_exec_w,
		nr_seq_segurado_w,
		nr_seq_plano_w,
		nr_seq_tipo_acomodacao_w,
		cd_medico_solicitante_w,
		ie_tipo_processo_w,
		ie_origem_solic_w,
		ie_regime_internacao_w,
		cd_usuario_plano_w
	from	pls_guia_plano
	where	nr_sequencia = nr_seq_autorizacao_p;
exception
when others then
	nr_seq_prestador_w := null;
	nr_seq_uni_exec_w := null;
	cd_usuario_plano_w := null;
end;

if (ie_origem_solic_w = 'P') then
	ie_origem_inclusao_w := 'P';
end if;


begin
	select	ie_tipo_segurado,
		cd_pessoa_fisica,
		nr_seq_congenere
	into STRICT	ie_tipo_segurado_w,
		cd_pessoa_fisica_w,
		nr_seq_congenere_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
exception
when others then
	ie_tipo_segurado_w	:= 'X';
	nr_seq_congenere_w	:= null;
end;

begin
	select	ie_regulamentacao
	into STRICT	ie_regulamentacao_w
	from	pls_plano
	where	nr_sequencia = nr_seq_plano_w;
exception
when others then
	ie_regulamentacao_w	:= null;
end;

begin
	select 	(substr(obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'A'),1,5))::numeric ,
		(substr(obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'M'),1,5))::numeric
	into STRICT	qt_idade_w,
		qt_idade_meses_w
	;
exception
when others then
	qt_idade_w := null;
	qt_idade_meses_w := null;
end;

if (ie_tipo_processo_w = 'I') then	
	/* Obter a UF da operadora  - Tasy*/

	select	coalesce(max(sg_estado),'X')
	into STRICT	sg_estado_w
	from	pessoa_juridica
	where	cd_cgc	= (	SELECT	max(cd_cgc_outorgante)
				from	pls_outorgante
				where	cd_estabelecimento	= coalesce(cd_estabelecimento_p, wheb_usuario_pck.get_cd_estabelecimento));

	/* Obter a UF da operadora do beneficiario*/

	select	coalesce(max(a.sg_estado),'X'),
		coalesce(max(ie_nacional), 'N')
	into STRICT	sg_estado_int_w,
		ie_nacional_w
	from	pessoa_juridica	a,
		pls_congenere	b
	where	a.cd_cgc	= b.cd_cgc
	and	b.nr_sequencia	= nr_seq_congenere_w;
		

	if (ie_nacional_w	= 'S') then
		ie_tipo_intercambio_w := 'N';	-- Nacional
	elsif (sg_estado_w <> 'X') then
		if (sg_estado_int_w <> 'X') then
			if (sg_estado_w	= sg_estado_int_w) then
				ie_tipo_intercambio_w	:= 'E';
			else
				ie_tipo_intercambio_w	:= 'N';
			end if;
		elsif (cd_usuario_plano_w IS NOT NULL AND cd_usuario_plano_w::text <> '') then
					
			cd_unimed_benef_w	:= lpad(substr(cd_usuario_plano_w,1,4),4,'0');
			
			begin
				select	pls_obter_seq_cooperativa(max(b.cd_cooperativa))
				into STRICT	nr_seq_uni_benef_w
				from	pessoa_juridica a,
					pls_congenere	b
				where	b.cd_cgc = a.cd_cgc
				and	length(b.cd_cooperativa) >= 4
				and	b.cd_cooperativa = cd_unimed_benef_w;
			exception
			when others then
				nr_seq_uni_benef_w := nr_seq_uni_exec_w;
			end;
			
			
			if (nr_seq_uni_exec_w IS NOT NULL AND nr_seq_uni_exec_w::text <> '' AND nr_seq_uni_exec_w <> nr_seq_uni_benef_w) then
				ie_tipo_intercambio_w := pls_obter_tipo_intercambio(nr_seq_uni_benef_w, coalesce(cd_estabelecimento_p, wheb_usuario_pck.get_cd_estabelecimento));
			else
				ie_tipo_intercambio_w	:= 'A';
			end if;
		else
			ie_tipo_intercambio_w	:= 'A';
		end if;
	else
		ie_tipo_intercambio_w	:= 'A';
	end if;
end if;

ie_restringe_estab_w	:= pls_obter_se_controle_estab('LA');


open C01;
loop
fetch C01 into	
	nr_seq_regra_w,
	qt_idade_min_w,
	qt_idade_max_w,
	ie_unid_tempo_idade_w,
	cd_especialidade_medica_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	
	/* Verificar se for regra de quantidade de idade minima ou maxima da regra, sendo "A" por ano e "M" por meses*/

	if (coalesce(ie_unid_tempo_idade_w,'A') = 'A') then
		if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w > qt_idade_w) or
			(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w < qt_idade_w) then
			nr_seq_regra_w := 0;
		end if;
	elsif (coalesce(ie_unid_tempo_idade_w,'A') = 'M') then
		if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w > qt_idade_meses_w) or
			(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w < qt_idade_meses_w) then
			nr_seq_regra_w := 0;
		end if;	
	end if;

	if (coalesce(cd_especialidade_medica_w,0) > 0) then
		select	count(1)
		into STRICT	qt_reg_w
		from	medico_especialidade
		where	cd_pessoa_fisica = cd_medico_solicitante_w
		and	cd_especialidade = cd_especialidade_medica_w;

		if (qt_reg_w = 0) then
			nr_seq_regra_w := 0;
		end if;
	end if;

	if ( nr_seq_regra_w	<> 0) then
		nr_regra_restritiva_w := nr_seq_regra_w;
	end if;


	end;
end loop;
close C01;

if (nr_regra_restritiva_w	> 0) then
open C02;
loop
fetch C02 into
	cd_procedimento_item_w,
	ie_origem_proced_item_w,
	nr_seq_material_item_w,
	nr_seq_prest_fornec_w,
	qt_item_lancamento_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	if (cd_procedimento_item_w IS NOT NULL AND cd_procedimento_item_w::text <> '') then
		select	count(1)
		into STRICT	qt_proc_regra_w
		from	pls_guia_plano_proc
		where	cd_procedimento		= cd_procedimento_item_w
		and	ie_origem_proced	= ie_origem_proced_item_w
		and	nr_seq_guia		= nr_seq_autorizacao_p;

		if (qt_proc_regra_w	= 0) then
			select	nextval('pls_guia_plano_proc_seq')
			into STRICT	nr_seq_proc_w
			;

			insert	into pls_guia_plano_proc(nr_sequencia, dt_atualizacao, nm_usuario,
				 dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_guia,
				 cd_procedimento, ie_origem_proced, qt_autorizada,
				 qt_solicitada, ie_status, nr_seq_proc_princ,
				 nr_seq_mat_princ)
			values (nr_seq_proc_w, clock_timestamp(), nm_usuario_p,
				 clock_timestamp(), nm_usuario_p, nr_seq_autorizacao_p,
				 cd_procedimento_item_w, ie_origem_proced_item_w, 0,
				 coalesce(qt_item_lancamento_w,1), 'U', nr_seq_proc_p,
				nr_seq_mat_p);

			if (vl_parametro_w	= 'LR') then
				CALL pls_atualizar_tipo_anexo_item(	null, null, nr_seq_proc_w,
								null, cd_procedimento_item_w, ie_origem_proced_item_w,
								null, nm_usuario_p);
			end if;
			
			if (ie_tipo_processo_w = 'I') then
				CALL pls_gerar_de_para_aut_intercam(	nr_seq_proc_w, '', cd_estabelecimento_p,
								nm_usuario_p);
			end if;
		end if;
	end if;

	if (nr_seq_material_item_w IS NOT NULL AND nr_seq_material_item_w::text <> '') then
		if (nr_seq_prest_fornec_w IS NOT NULL AND nr_seq_prest_fornec_w::text <> '') then
			begin
				select	cd_cgc
				into STRICT	cd_cgc_w
				from	pls_prestador
				where	nr_sequencia = nr_seq_prest_fornec_w;
			exception
			when others then
				cd_cgc_w	:= 'X';
			end;

			if (coalesce(cd_cgc_w,'X')	<> 'X') then
				begin
					select	max(cd_fornecedor)
					into STRICT	cd_fornecedor_w
					from	pls_fornec_mat_fed_sc
					where	cd_cgc		= cd_cgc_w
					and	ie_situacao	= 'A';
				exception
				when others then
					cd_fornecedor_w	:= 0;
				end;

				if (coalesce(cd_fornecedor_w,0)	<> 0) then
					begin
						select	c.vl_preco
						into STRICT	vl_preco_w
						from	pls_fornec_mat_fed_sc	d,
							pls_mat_uni_fed_sc_preco c,
							pls_mat_unimed_fed_sc b,
							pls_material a
						where	b.nr_sequencia 		= c.nr_seq_mat_unimed
						and	a.cd_material_ops 	= b.cd_material
						and	c.cd_fornecedor_fed_sc	= d.cd_fornecedor
						and	c.ie_situacao		= 'A'
						and	d.ie_situacao		= 'A'
						and 	d.cd_fornecedor		= cd_fornecedor_w
						and	a.nr_sequencia		= nr_seq_material_item_w
						and	c.dt_preco		= (	SELECT	max(c.dt_preco)
											from	pls_fornec_mat_fed_sc	d,
												pls_mat_uni_fed_sc_preco c,
												pls_mat_unimed_fed_sc b,
												pls_material a
											where	b.nr_sequencia 		= c.nr_seq_mat_unimed
											and	a.cd_material_ops 	= b.cd_material
											and	c.cd_fornecedor_fed_sc	= d.cd_fornecedor
											and	c.ie_situacao		= 'A'
											and	d.ie_situacao		= 'A'
											and	d.cd_fornecedor		= cd_fornecedor_w
											and	a.nr_sequencia		= nr_seq_material_item_w
											and	c.dt_preco		<= clock_timestamp())
						and	((coalesce(a.dt_limite_utilizacao,a.dt_exclusao)	> clock_timestamp())
						or	((coalesce(a.dt_limite_utilizacao::text, '') = '') and (coalesce(a.dt_exclusao::text, '') = '')))
						group by c.vl_preco;
					exception
					when others then
						vl_preco_w	:= 0;
					end;
				end if;
			end if;
		end if;

		select	nextval('pls_guia_plano_mat_seq')
		into STRICT	nr_seq_guia_plano_w
		;

		insert	into pls_guia_plano_mat(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_guia,
			qt_solicitada, qt_autorizada, ie_status,
			nr_seq_material, nr_seq_mat_princ, nr_seq_prest_fornec,
			vl_material, nr_seq_proc_princ)
		values (nr_seq_guia_plano_w, clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, nr_seq_autorizacao_p,
			coalesce(qt_item_lancamento_w,1), 0, 'U',
			nr_seq_material_item_w, nr_seq_mat_p, nr_seq_prest_fornec_w,
			vl_preco_w, nr_seq_proc_p);

		if (coalesce(nr_seq_prest_fornec_w::text, '') = '') then
			CALL pls_atualiza_valor_mat_aut(nr_seq_guia_plano_w, 'A', nm_usuario_p);
		end if;

		if (vl_parametro_w	= 'LR') then
			CALL pls_atualizar_tipo_anexo_item(	null, null, null,
							nr_seq_guia_plano_w, null, null,
							nr_seq_material_item_w, nm_usuario_p);
		end if;
		
		if (ie_tipo_processo_w = 'I') then
			CALL pls_gerar_de_para_aut_intercam(	'', nr_seq_guia_plano_w, cd_estabelecimento_p,
							nm_usuario_p);
		end if;		
	end if;
	end;	
end loop;
close C02;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_lanc_auto_autorizacao ( nr_seq_autorizacao_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint ) FROM PUBLIC;

