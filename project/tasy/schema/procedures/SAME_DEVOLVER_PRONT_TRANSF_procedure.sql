-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE same_devolver_pront_transf ( ds_prontuario_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
ds_prontuario_w			varchar(2000);	
ie_contador_w			bigint	:= 0;
tam_lista_w			bigint;
ie_pos_virgula_w		smallint;				
nr_seq_pront_w			bigint;
cd_pessoa_fisica_w		varchar(10);
cd_setor_atendimento_w		integer;
nr_seq_solic_w			bigint;
nr_seq_solic_pront_w		bigint;
nr_seq_lote_w			bigint;
nr_atendimento_w		bigint;
qt_volumes_w			bigint;
qt_volumes_arm_w		bigint;
ie_controla_solic_w		varchar(1);
nr_seq_solic_int_w		bigint;
cd_pessoa_pront_w		varchar(10);
ie_status_dev_w			varchar(1);
cd_setor_same_w			bigint;

ds_parametro_w			varchar(10) 	:= obter_valor_param_usuario(941,103,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p);
ie_status_na_devolucao_w	varchar(10) 	:= coalesce(obter_valor_param_usuario(941,82,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'D');
ie_armazena_na_devolucao_w	varchar(10) 	:= coalesce(obter_valor_param_usuario(941,234,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'S');
ie_atualizar_setor_same_w 	varchar(1) 	:= coalesce(Obter_Valor_Param_Usuario(941,249, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p),'N');

c01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	same_solic_pront 
	where	((nr_atendimento = nr_atendimento_w) or ((coalesce(nr_atendimento::text, '') = '') and (cd_pessoa_fisica = cd_pessoa_pront_w))) 
	and	coalesce(dt_devolucao::text, '') = '' 
	and	ie_status in ('E','R') 
	AND	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p));
	
c02 CURSOR FOR 
	SELECT	nr_sequencia 
	from	same_solic_pront 
	where	cd_pessoa_fisica = cd_pessoa_pront_w 
	and	coalesce(dt_devolucao::text, '') = '' 
	and	ie_status in ('E','R') 
	AND	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p));
	

BEGIN 
 
ds_prontuario_w		:= ds_prontuario_p;
 
select	substr(obter_pessoa_fisica_usuario(nm_usuario_p, 'C'),1,10), 
	obter_setor_usuario(nm_usuario_p) 
into STRICT	cd_pessoa_fisica_w, 
	cd_setor_atendimento_w
;
 
select	coalesce(max(obter_valor_param_usuario(941,26, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N') 
into STRICT	ie_controla_solic_w
;
	 
while	(ds_prontuario_w IS NOT NULL AND ds_prontuario_w::text <> '') or ie_contador_w > 200 loop 
	begin 
	tam_lista_w		:= length(ds_prontuario_w);
	ie_pos_virgula_w	:= position(',' in ds_prontuario_w);
 
	if (ie_pos_virgula_w <> 0) then 
		nr_seq_pront_w		:= substr(ds_prontuario_w,1,(ie_pos_virgula_w-1));
		ds_prontuario_w		:= substr(ds_prontuario_w,(ie_pos_virgula_w+1),tam_lista_w);
	end if;
 
	select	max(b.nr_seq_solic), 
		max(b.nr_sequencia), 
		max(a.nr_seq_lote) 
	into STRICT	nr_seq_solic_w, 
		nr_seq_solic_pront_w, 
		nr_seq_lote_w 
	from	same_solic_pront a, 
		same_solic_pront_envelope b 
	where	a.nr_sequencia		= b.nr_seq_solic 
	and	b.nr_seq_prontuario	= nr_seq_pront_w 
	and	a.ie_status		in ('E','R') 
	and	coalesce(b.dt_devolucao::text, '') = '';
	 
	-- Não setar para 'Armazenado' se utiliza o status 'V = Em Devolução', setará para armazenado somente no status 'D = Devolvido' 
	if ((coalesce(nr_seq_pront_w,0) > 0) and ((ie_status_na_devolucao_w <> 'V') or (ie_armazena_na_devolucao_w <> 'N'))) then 
		 
		cd_setor_same_w := obter_setor_same(cd_estabelecimento_p, nr_seq_pront_w);
		 
		update	same_prontuario 
		set	ie_status	= '1', 
			dt_atualizacao	= clock_timestamp(), 
			nm_usuario	= nm_usuario_p, 
			cd_setor_atendimento = CASE WHEN ie_atualizar_setor_same_w='S' THEN cd_setor_same_w  ELSE cd_setor_atendimento END  
		where	nr_sequencia	= nr_seq_pront_w;
	end if;
	 
	update	same_solic_pront_envelope 
	set	dt_devolucao	= clock_timestamp(), 
		cd_pessoa_devol	= cd_pessoa_fisica_w, 
		dt_atualizacao	= clock_timestamp(), 
		nm_usuario	= nm_usuario_p 
	where	nr_sequencia	= nr_seq_solic_pront_w;
		 
	CALL Same_Devolver_Solicitacao( 
		nr_seq_solic_w, 
		nm_usuario_p, 
		cd_estabelecimento_p 
	);
	 
	CALL Same_Devolver_Lote( 
		nr_seq_lote_w, 
		nm_usuario_p 
	);
	 
	CALL Same_Gerar_Historico( 
		nr_seq_pront_w, 
		12, 
		cd_pessoa_fisica_w, 
		cd_setor_atendimento_w, 
		nm_usuario_p				 
	);
	 
	if (ie_controla_solic_w = 'N') then 
	 
		select max(nr_atendimento) 
		into STRICT nr_atendimento_w 
		from same_prontuario 
		where nr_sequencia = nr_seq_pront_w;
		 
		select max(cd_pessoa_fisica) 
		into STRICT cd_pessoa_pront_w 
		from same_prontuario 
		where nr_sequencia = nr_seq_pront_w;
		 
		select	coalesce(max(obter_valor_param_usuario(941, 82, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'D') 
		into STRICT	ie_status_dev_w 
		;
		 
		if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then 
			select count(*) 
			into STRICT qt_volumes_w 
			from same_prontuario 
			where nr_atendimento = nr_atendimento_w;
			 
			select count(*) 
			into STRICT qt_volumes_arm_w 
			from same_prontuario 
			where nr_atendimento = nr_atendimento_w 
			and	ie_status = 1;
			 
			if (qt_volumes_arm_w = qt_volumes_arm_w) then 
				OPEN C01;
				LOOP 
				FETCH C01 into 
					nr_seq_solic_int_w;
				EXIT WHEN NOT FOUND; /* apply on c01 */
 
				begin 
				update	same_solic_pront 
				set		dt_devolucao	= clock_timestamp(), 
						ie_status 		= ie_status_dev_w, 
						dt_atualizacao	= clock_timestamp(), 
						nm_usuario		= nm_usuario_p 
				where	nr_sequencia	= nr_seq_solic_int_w 
				and		coalesce(dt_devolucao::text, '') = '';
				end;
				END LOOP;
				CLOSE C01;
			 
			end if;
		 
		elsif (cd_pessoa_pront_w IS NOT NULL AND cd_pessoa_pront_w::text <> '') then 
		 
			select count(*) 
			into STRICT qt_volumes_w 
			from same_prontuario 
			where cd_pessoa_fisica = cd_pessoa_pront_w;
			 
			select count(*) 
			into STRICT qt_volumes_arm_w 
			from same_prontuario 
			where cd_pessoa_fisica = cd_pessoa_pront_w 
			and	ie_status = 1;
			 
			if (qt_volumes_arm_w = qt_volumes_arm_w) then 
				OPEN C02;
				LOOP 
				FETCH C02 into 
					nr_seq_solic_int_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
 
				begin 
				update	same_solic_pront 
				set		dt_devolucao	= clock_timestamp(), 
						ie_status 		= ie_status_dev_w, 
						dt_atualizacao	= clock_timestamp(), 
						nm_usuario		= nm_usuario_p 
				where	nr_sequencia	= nr_seq_solic_int_w 
				and		coalesce(dt_devolucao::text, '') = '';
				end;
				END LOOP;
				CLOSE C02;
			 
			end if;
			 
		end if;
	 
	end if;
	ie_contador_w	:= ie_contador_w + 1;
 
	end;
end loop;
 
if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE same_devolver_pront_transf ( ds_prontuario_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

