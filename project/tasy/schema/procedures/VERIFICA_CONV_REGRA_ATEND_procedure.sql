-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE verifica_conv_regra_atend ( nr_atendimento_p bigint, cd_estabelecimento_p bigint, ie_tipo_atendimento_p text, ds_retorno_p INOUT text) AS $body$
DECLARE

 
ds_retorno_w		varchar(255);
cd_convenio_w		bigint;
cd_categoria_w		varchar(10);
ie_tipo_atendimento_w	varchar(10);
cd_estabelecimento_w	integer;
cd_pessoa_fisica_w	varchar(10);
dt_entrada_w		timestamp;
qt_atend_w		integer;
qt_regra_w		bigint;
qt_dias_w		bigint;
dt_entrada_passada_w	timestamp;
ie_regra_w		varchar(10);
cd_municipio_ibge_w	varchar(6) := '';
cd_mun_ibge_regra_w	varchar(6);
vl_conta_w		double precision;
vl_regra_w		double precision;
ie_complexidade_sus_w	varchar(15) := '';
ie_complex_regra_w	varchar(15);
ie_clinica_w		integer;
cd_plano_convenio_w	varchar(10);
cd_plano_conv_w		varchar(10);
nr_seq_cobertura_w	bigint;
ds_mensagem_w		varchar(255);
cd_classif_setor_w	varchar(2);
ie_ignorar_estab_w	varchar(1);
c01 CURSOR FOR
SELECT	a.cd_convenio, 
	a.cd_categoria, 
	coalesce(ie_tipo_atendimento_p,b.ie_tipo_atendimento), 
	b.cd_estabelecimento, 
	b.cd_pessoa_fisica, 
	b.dt_entrada, 
	substr(obter_compl_pf(b.cd_pessoa_fisica, 1, 'CDM'),1,6), 
	'', 
	coalesce(b.ie_clinica,0), 
	a.cd_plano_convenio, 
	a.nr_seq_cobertura 
from	atend_categoria_convenio a, 
	atendimento_paciente b 
where	a.nr_atendimento	= b.nr_atendimento 
and	obter_tipo_convenio(a.cd_convenio) <> 3 
and	b.nr_atendimento	= nr_atendimento_p 

union
 
SELECT	a.cd_convenio, 
	a.cd_categoria, 
	coalesce(ie_tipo_atendimento_p,b.ie_tipo_atendimento), 
	b.cd_estabelecimento, 
	b.cd_pessoa_fisica, 
	b.dt_entrada, 
	substr(obter_compl_pf(b.cd_pessoa_fisica, 1, 'CDM'),1,6), 
	sus_obter_complexidade_proced(c.cd_procedimento_solic,c.ie_origem_proced,'C'), 
	coalesce(b.ie_clinica,0), 
	a.cd_plano_convenio, 
	a.nr_seq_cobertura 
from	atend_categoria_convenio a, 
	atendimento_paciente b, 
	sus_laudo_paciente c 
where	a.nr_atendimento	= b.nr_atendimento 
and	b.nr_atendimento	= c.nr_atendimento 
and	c.nr_seq_interno 	= (	select	max(x.nr_seq_interno) 
				from	sus_laudo_paciente x 
				where	x.nr_atendimento = a.nr_atendimento 
				and	x.ie_classificacao = 1) 
and	obter_tipo_convenio(a.cd_convenio) = 3 
and	b.nr_atendimento	= nr_atendimento_p;

c02 CURSOR FOR 
	SELECT	ie_regra, 
		qt_regra, 
		vl_regra, 
		cd_municipio_ibge, 
		ie_complexidade, 
		cd_plano, 
		ds_mensagem, 
		cd_classif_setor, 
		coalesce(ie_ignorar_estab,'N') 
	from	convenio_regra_atend 
	where	cd_convenio		= cd_convenio_w 
	and	ie_tipo_atendimento	= ie_tipo_atendimento_w 
	and (cd_estabelecimento	= cd_estabelecimento_w or (ie_Regra = 'A' and coalesce(ie_ignorar_estab,'N') = 'S')) 
	and	((coalesce(cd_municipio_ibge,cd_municipio_ibge_w)	= cd_municipio_ibge_w) or (coalesce(cd_municipio_ibge_w::text, '') = '')) 
	and	((coalesce(ie_complexidade,ie_complexidade_sus_w) = ie_complexidade_sus_w) or (coalesce(ie_complexidade_sus_w::text, '') = '')) 
	and	((coalesce(ie_clinica,ie_clinica_w) = ie_clinica_w) or (coalesce(ie_clinica_w::text, '') = '')) 
	and	coalesce(cd_plano, coalesce(cd_plano_convenio_w,'0')) = coalesce(cd_plano_convenio_w,'0') 
	and	coalesce(cd_categoria, coalesce(cd_categoria_w,'0')) = coalesce(cd_categoria_w,'0') 
	and	coalesce(cd_pessoa_fisica, coalesce(cd_pessoa_fisica_w,'0')) = coalesce(cd_pessoa_fisica_w,'0') 
	and	coalesce(nr_seq_cobertura, coalesce(nr_seq_cobertura_w,0)) = coalesce(nr_seq_cobertura_w,0) 
	order by 
		cd_municipio_ibge desc;

 

BEGIN 
 
Ds_Retorno_W	:= '';
open c01;
loop 
fetch c01 into 
	cd_convenio_w, 
	cd_categoria_w, 
	ie_tipo_atendimento_w, 
	cd_estabelecimento_w, 
	cd_pessoa_fisica_w, 
	dt_entrada_w, 
	cd_municipio_ibge_w, 
	ie_complexidade_sus_w, 
	ie_clinica_w, 
	cd_plano_convenio_w, 
	nr_seq_cobertura_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin	 
	begin 
	 
	open c02;
	loop 
	fetch c02 into 
		ie_regra_w, 
		qt_regra_w, 
		vl_regra_w, 
		cd_mun_ibge_regra_w, 
		ie_complex_regra_w, 
		cd_plano_conv_w, 
		ds_mensagem_w, 
		cd_classif_setor_w, 
		ie_ignorar_estab_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin 
		if (ie_regra_w = 'D') then 
 
			select	max(a.dt_entrada) 
			into STRICT	dt_entrada_passada_w 
			from	atend_categoria_convenio	b, 
				atendimento_paciente	a 
			where	a.nr_atendimento	= b.nr_atendimento 
			and	b.cd_convenio		= cd_convenio_w 
			and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w 
			and	a.ie_tipo_atendimento	= ie_tipo_atendimento_w 
			and	a.nr_atendimento <> nr_atendimento_p 
			and	coalesce(cd_plano_conv_w, b.cd_plano_convenio) = b.cd_plano_convenio;
 
			qt_dias_w	:= dt_entrada_w - dt_entrada_passada_w;
 
			if (qt_dias_w < qt_regra_w) then 
				ds_retorno_w	:=	substr(obter_texto_tasy(293646, wheb_usuario_pck.get_nr_seq_idioma) || chr(13) || obter_texto_tasy(293648, wheb_usuario_pck.get_nr_seq_idioma),1,255);
							--'O convênio não permite o atendimento em função do tempo!' || chr(13) || 
							--'Verificar os demais atendimentos do paciente no mês e a função Cadastro de convênio/Regras/Atendimento. '; 
			end if;
 
		elsif (ie_regra_w = 'N') then 
 
			select	count(*) + CASE WHEN coalesce(ie_tipo_atendimento_p::text, '') = '' THEN 0  ELSE 1 END  
			into STRICT	qt_atend_w 
			from	atend_categoria_convenio	b, 
				atendimento_paciente	a 
			where	a.nr_atendimento	= b.nr_atendimento 
			and	b.cd_convenio		= cd_convenio_w 
			and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w 
			and	a.ie_tipo_atendimento	= ie_tipo_atendimento_w 
			and	trunc(a.dt_entrada, 'month')	= trunc(dt_entrada_w, 'month') 
			and	coalesce(cd_plano_conv_w, b.cd_plano_convenio) = b.cd_plano_convenio;
 
			if (qt_atend_w > qt_regra_w) then 
				ds_retorno_w	:=	substr(obter_texto_tasy(293646, wheb_usuario_pck.get_nr_seq_idioma) || chr(13) || obter_texto_tasy(293648, wheb_usuario_pck.get_nr_seq_idioma),1,255);
							--'O convênio não permite o atendimento em função do tempo!' || chr(13) || 
							--'Verificar os demais atendimentos do paciente no mês e a função Cadastro de convênio/Regras/Atendimento. '; 
			end if;
 
		elsif (ie_regra_w = 'M') then 
 
			select	count(*) + CASE WHEN coalesce(ie_tipo_atendimento_p::text, '') = '' THEN 0  ELSE 1 END  
			into STRICT	qt_atend_w 
			from	atend_categoria_convenio	b, 
				atendimento_paciente	a 
			where	a.nr_atendimento		= b.nr_atendimento 
			and	b.cd_convenio		= cd_convenio_w 
			and	a.ie_tipo_atendimento	= ie_tipo_atendimento_w 
			and	trunc(a.dt_entrada, 'month')	= trunc(dt_entrada_w, 'month') 
			and	cd_municipio_ibge_w	= cd_mun_ibge_regra_w 
			and	ie_complexidade_sus_w	= ie_complex_regra_w 
			and	coalesce(cd_plano_conv_w, b.cd_plano_convenio) = b.cd_plano_convenio;
 
			if (qt_atend_w > qt_regra_w) then 
				ds_retorno_w	:=	substr(obter_texto_tasy(293649, wheb_usuario_pck.get_nr_seq_idioma) || chr(13) || obter_texto_tasy(293648, wheb_usuario_pck.get_nr_seq_idioma),1,255);
							--'O convênio não permite o atendimento em função da quantidade estabelecida para o município nesse mês !' || chr(13) || 
							--'Verificar os demais atendimentos do paciente no mês e a função Cadastro de convênio/Regras/Atendimento. '; 
			end if;
		elsif (ie_regra_w = 'V') then 
 
			select	sum(c.vl_conta) 
			into STRICT	vl_conta_w 
			from	atend_categoria_convenio	b, 
				atendimento_paciente	a, 
				conta_paciente c 
			where	a.nr_atendimento		= b.nr_atendimento 
			and	a.nr_atendimento		= c.nr_atendimento 
			and	b.cd_convenio		= c.cd_convenio_parametro 
			and	b.cd_convenio		= cd_convenio_w 
			and	a.ie_tipo_atendimento	= ie_tipo_atendimento_w 
			and	trunc(c.dt_mesano_referencia, 'month')	= trunc(dt_entrada_w, 'month') 
			and not exists (SELECT 1 
				from  protocolo_convenio x 
				where  x.nr_seq_protocolo   = c.nr_seq_protocolo 
				and   x.ie_status_protocolo  = 1) 
			and	coalesce(cd_plano_conv_w, b.cd_plano_convenio) = b.cd_plano_convenio;
 
			if (vl_conta_w > vl_regra_w) then 
				ds_retorno_w	:=	substr(obter_texto_tasy(293650, wheb_usuario_pck.get_nr_seq_idioma) || chr(13) || obter_texto_tasy(293648, wheb_usuario_pck.get_nr_seq_idioma),1,255);
							--'O valor estabelecido para as contas deste mês para este convênio foi ultrapassado !' || chr(13) || 
							--'Verificar os demais atendimentos do paciente no mês e a função Cadastro de convênio/Regras/Atendimento. '; 
			end if;
		elsif (ie_regra_w = 'G') then 
 
			select	count(*) 
			into STRICT	qt_atend_w 
			from	atend_categoria_convenio b, 
				atendimento_paciente	a 
			where	a.nr_atendimento		= b.nr_atendimento 
			and	b.cd_convenio			= cd_convenio_w 
			and	a.ie_tipo_atendimento		= ie_tipo_atendimento_w 
			and	a.ie_clinica			= ie_clinica_w 
			and	trunc(a.dt_entrada, 'month')	= trunc(dt_entrada_w, 'month') 
			and	coalesce(a.nr_atend_original::text, '') = '' 
			and	coalesce(cd_plano_conv_w, b.cd_plano_convenio) = b.cd_plano_convenio;
 
			if (qt_atend_w > qt_regra_w) then 
				ds_retorno_w	:=	substr(obter_texto_tasy(293646, wheb_usuario_pck.get_nr_seq_idioma) || chr(13) || obter_texto_tasy(293651, wheb_usuario_pck.get_nr_seq_idioma),1,255);
							--'O convênio não permite o atendimento em função do tempo!' || chr(13) || 
							--'Verificar a quantidade de atendimentos permitidos no mês para o convênio na função Cadastro de convênio/Regras/Atendimento. '; 
			end if;
		elsif (ie_regra_w = 'A') then 
			 
			 
			select 	count(*) 
			into STRICT	qt_atend_w 
			from	unidade_atendimento a, 
				atend_categoria_convenio b, 
				atendimento_paciente c 
			where	a.nr_atendimento = b.nr_atendimento 
			and	a.nr_atendimento = c.nr_atendimento 
			and	b.nr_seq_interno = Obter_Atecaco_atendimento(a.nr_atendimento)			 
			and	b.cd_convenio	 = cd_convenio_w 
			and	b.cd_categoria	 = cd_categoria_w 
			and (cd_estabelecimento	= cd_estabelecimento_w or coalesce(ie_ignorar_estab_w,'N') = 'S') 
			and	c.ie_tipo_atendimento		= ie_tipo_atendimento_w 
			and (obter_classif_setor(a.cd_setor_atendimento) = cd_classif_setor_w or coalesce(cd_classif_setor_w::text, '') = '') 
			and (c.ie_clinica			= ie_clinica_w or coalesce(ie_clinica_w::text, '') = '' or coalesce(ie_clinica_w,0) = 0) 
			and (coalesce(cd_plano_conv_w, b.cd_plano_convenio) = b.cd_plano_convenio or coalesce(cd_plano_conv_w::text, '') = '') 
			and	trunc(a.dt_entrada_unidade, 'month') between trunc(clock_timestamp() - interval '365 days', 'month') and trunc(clock_timestamp(), 'month');
			 
			if (qt_atend_w >= qt_regra_w) then 
				if (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then 
					ds_retorno_w	:=	substr(ds_mensagem_w,1,255);
				else 
					ds_retorno_w	:=	substr(obter_texto_tasy(439893, wheb_usuario_pck.get_nr_seq_idioma),1,255);
							--'Excedeu a quantidade de convênio permitidos em 1 ano para o convênio!' || chr(13) || 
							--'Verificar a quantidade de convênios permitidos no mês na função Cadastro de convênio/Regras/Atendimento. '; 
				end if;			
			end if;
		elsif (ie_regra_w = 'C') then 
			 
			select 	count(*) 
			into STRICT	qt_atend_w 
			from	unidade_atendimento a, 
				atend_categoria_convenio b, 
				atendimento_paciente c 
			where	a.nr_atendimento = b.nr_atendimento 
			and	a.nr_atendimento = c.nr_atendimento 
			and	b.nr_seq_interno = Obter_Atecaco_atendimento(a.nr_atendimento)			 
			and	b.cd_convenio	 = cd_convenio_w			 
			and	c.ie_tipo_atendimento		= ie_tipo_atendimento_w 
			and (obter_classif_setor(a.cd_setor_atendimento) = cd_classif_setor_w or coalesce(cd_classif_setor_w::text, '') = '') 
			and (c.ie_clinica			= ie_clinica_w or coalesce(ie_clinica_w::text, '') = '' or coalesce(ie_clinica_w,0) = 0) 
			and (coalesce(cd_plano_conv_w, b.cd_plano_convenio) = b.cd_plano_convenio or coalesce(cd_plano_conv_w::text, '') = '') 
			and	trunc(a.dt_entrada_unidade, 'month')	= trunc(dt_entrada_w, 'month');
			 
			if (qt_atend_w > qt_regra_w) then 
				if (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then 
					ds_retorno_w	:=	substr(ds_mensagem_w,1,255);
				else 
					ds_retorno_w	:=	substr(obter_texto_tasy(322293, wheb_usuario_pck.get_nr_seq_idioma),1,255);
							--'Excedeu a quantidade de convênio permitidos no mês para o convênio!' || chr(13) || 
							--'Verificar a quantidade de convênios permitidos no mês na função Cadastro de convênio/Regras/Atendimento. '; 
				end if;			
			end if;
		end if;
		 
		end;
	end loop;
	close c02;
	exception 
		when others then 
			ds_retorno_w	:= ds_retorno_w;
	end;
	end;
end loop;
close c01;
 
ds_retorno_p	:= ds_retorno_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE verifica_conv_regra_atend ( nr_atendimento_p bigint, cd_estabelecimento_p bigint, ie_tipo_atendimento_p text, ds_retorno_p INOUT text) FROM PUBLIC;

