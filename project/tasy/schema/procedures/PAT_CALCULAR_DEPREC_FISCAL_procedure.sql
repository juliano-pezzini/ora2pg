-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pat_calcular_deprec_fiscal ( cd_estabelecimento_p bigint, dt_referencia_p timestamp, nr_seq_bem_p bigint, vl_deprec_mes_p INOUT bigint, vl_deprec_acum_p INOUT bigint, vl_fiscal_p INOUT bigint, vl_base_deprec_p bigint, tx_ajuste_p INOUT bigint) AS $body$
DECLARE


dt_dia_baixa_w				smallint;
dt_dia_inicio_w				smallint;
dt_historico_w				timestamp;
dt_inicio_deprec_w			timestamp;
ie_depreciado_w				varchar(01);
ie_primeiro_mes_w			varchar(01);
qt_dia_baixa_w				smallint;
qt_dia_normal_w				smallint;
qt_dias_w				bigint;
qt_percentual_w				double precision;
tx_depreciacao_w			double precision;
vl_baixa_bem_w				double precision;
vl_baixa_deprec_w			double precision;
vl_base_baixa_w				double precision;
vl_base_deprec_ant_w			double precision;
vl_base_deprec_w			double precision;
vl_deprec_acum_ant_w			double precision;
vl_deprec_acum_w			double precision;
vl_deprec_ano_w				double precision;
vl_depr_baixa_w				double precision;
vl_deprec_bem_ant_w			double precision;
vl_deprec_bem_w				double precision;
vl_depr_normal_w			double precision;
vl_fiscal_w				double precision;
vl_original_w				double precision;

nr_seq_indice_w				tipo_indice_reajuste.nr_sequencia%Type;
tx_ajuste_w				indice_reajuste_valor.tx_ajuste%Type;
tx_indice_aquisicao_w			pat_valor_bem.tx_indice_aquisicao%Type;


BEGIN

tx_depreciacao_w	:= coalesce(obter_taxa_deprec_fiscal_bem(nr_seq_bem_p, dt_referencia_p),0);

if (tx_depreciacao_w <> 0) then
	begin

	select	max(coalesce(a.dt_inicio_deprec, a.dt_inicio_uso)),
		coalesce(max(a.vl_original),0)
	into STRICT	dt_inicio_deprec_w,
		vl_original_w
	from	pat_bem a
	where	a.nr_sequencia	= nr_seq_bem_p;

	/* Valores de depreciações anteriores */

	select	coalesce(max(round((vl_deprec_acum_fis)::numeric,2)),0),
		CASE WHEN coalesce(count(*),0)=0 THEN 'S'  ELSE 'N' END ,
		CASE WHEN min(round((coalesce(vl_fiscal, vl_contabil))::numeric,2))=0 THEN 'S'  ELSE 'N' END 	/*Considerar se depreciado pelo vl fiscal, pois se o contábil zerar deve continuar depreciando o fiscal até 0*/
	into STRICT	vl_deprec_acum_ant_w,
		ie_primeiro_mes_w,
		ie_depreciado_w
	from	pat_valor_bem
	where	nr_seq_bem = nr_seq_bem_p;

	select	/*nvl(max(round(vl_base_deprec,2)),vl_original_w), - Alterado conforme OS 676407*/
		coalesce(max(round((vl_original_w)::numeric,2)),vl_original_w),
		coalesce(max(vl_deprec_mes),0)
	into STRICT	vl_base_deprec_ant_w,
		vl_deprec_bem_ant_w
	from	pat_valor_bem
	where	nr_seq_bem = nr_seq_bem_p
	and	PKG_DATE_UTILS.start_of(dt_valor, 'MONTH', 0) = PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.ADD_MONTH(dt_referencia_p,-1, 0), 'MONTH', 0);

	/* Valor base para depreciação é o valor base do mês anterior ou o valor original do bem se ainda não tiver depreciação */

	vl_base_deprec_w	:= (vl_base_deprec_ant_w);

	/*Matheus 24/11/2010 - Controle onde o mês de aquisição é diferente do mês de uso, e teve mes anterior zerado.*/

	if (ie_primeiro_mes_w = 'N') and (vl_deprec_bem_ant_w = 0) and (PKG_DATE_UTILS.start_of(dt_inicio_deprec_w, 'MONTH', 0) = PKG_DATE_UTILS.start_of(dt_referencia_p, 'MONTH', 0)) then
		ie_primeiro_mes_w	:= 'S';
	end if;

	/* Se a Depreciação acumulada é menor ou igual ao valor base para depreciação, entra na rotina de cálculo  */

	if (vl_deprec_acum_ant_w <= vl_base_deprec_w) then
		begin
		vl_deprec_ano_w		:= (vl_base_deprec_w * tx_depreciacao_w) / 100;
		vl_deprec_bem_w		:= 0;
		vl_baixa_bem_w		:= 0;
		vl_baixa_deprec_w	:= 0;

		/* Verifica dados de baixa e venda do Imobilizado */

		select	coalesce(max(a.qt_percentual),0),
			coalesce(max(a.dt_historico),null)
		into STRICT	qt_percentual_w,
			dt_historico_w
		from	pat_historico_bem a,
			pat_tipo_historico b
		where	a.nr_seq_bem	= nr_seq_bem_p
		and	a.nr_seq_tipo	= b.nr_sequencia
		and	b.ie_valor	in ('B','V')
		and	PKG_DATE_UTILS.start_of(a.dt_historico, 'MONTH', 0) = PKG_DATE_UTILS.start_of(dt_referencia_p, 'MONTH', 0)
		order by a.dt_historico asc;

		/* Rotina calculos das baixas/vendas */

		if (qt_percentual_w <> 0) then
			begin
			dt_dia_inicio_w	:= 0;
			dt_dia_baixa_w	:= PKG_DATE_UTILS.extract_field('DAY', dt_historico_w);

			if (ie_primeiro_mes_w = 'S') then
				dt_dia_inicio_w	:= PKG_DATE_UTILS.extract_field('DAY', dt_inicio_deprec_w);
			end if;

			qt_dia_normal_w	:= dt_dia_baixa_w - dt_dia_inicio_w;
			qt_dia_baixa_w	:= 0;
			if (qt_percentual_w <> 100) then
				qt_dia_baixa_w	:= 30 - dt_dia_baixa_w;
			end if;

			vl_baixa_bem_w	:= ((vl_base_deprec_ant_w * qt_percentual_w) / 100);
			vl_depr_normal_w	:= round(((vl_deprec_ano_w / 12) / 30) * qt_dia_normal_w,4);

			/* tratar valores muito pequenos de depreciação - baixa */

			if (round((vl_depr_normal_w)::numeric,4) <> 0) and (round((vl_depr_normal_w)::numeric,2) < 0.01) then
				vl_depr_normal_w	:= vl_deprec_bem_ant_w;
			end if;

			if (ie_depreciado_w = 'S') then
				vl_depr_normal_w:= 0;
			end if;

			vl_base_baixa_w	:= (((vl_base_deprec_w - vl_baixa_bem_w) * tx_depreciacao_w) / 100);
			vl_depr_baixa_w	:= (((vl_base_baixa_w) / 12) / 30) * qt_dia_baixa_w;
			vl_baixa_deprec_w 	:= ((vl_deprec_acum_ant_w + vl_depr_normal_w) * qt_percentual_w) / 100;
			vl_deprec_bem_w	:= vl_depr_normal_w + vl_depr_baixa_w;
			vl_base_deprec_w 	:= (vl_base_deprec_w - vl_baixa_bem_w);
			end;
		end if;

		/* INICIO CALCULO DA DEPRECIAÇÃO */

		/* Calcula a depreciacao se ainda não foi totalmente depreciado e ja esta em uso */

		if (vl_deprec_bem_w = 0) and (ie_depreciado_w = 'N') and (dt_inicio_deprec_w <= dt_referencia_p) then
			begin
			if (ie_primeiro_mes_w = 'S') then /* Se primeiro cálculo */
				begin
				qt_dias_w	:= (PKG_DATE_UTILS.start_of(dt_referencia_p,'DD', 0) - PKG_DATE_UTILS.start_of(dt_inicio_deprec_w,'DD', 0));
				vl_deprec_bem_w	:= vl_deprec_bem_w + ((vl_deprec_ano_w / 12) / 30) * qt_dias_w;
				end;
			else
				vl_deprec_bem_w	:= vl_deprec_bem_w + (vl_deprec_ano_w / 12);
			end if;

			end;
		end if;

		vl_deprec_acum_w		:= ((vl_deprec_acum_ant_w + vl_deprec_bem_w) - vl_baixa_deprec_w);

		if (vl_deprec_acum_w > vl_base_deprec_w) then
			begin
			vl_deprec_acum_w	:= vl_base_deprec_w;
			vl_deprec_bem_w		:= vl_base_deprec_w - vl_deprec_acum_ant_w;
			vl_fiscal_w		:= 0;
			end;
		else
			vl_fiscal_w		:= (vl_base_deprec_w - vl_deprec_acum_w);
		end if;
		end;
	end if;
	end;

vl_deprec_mes_p		:= coalesce(vl_deprec_bem_w,0);
vl_deprec_acum_p		:= coalesce(vl_deprec_acum_w, 0);
vl_fiscal_p		:= coalesce(vl_fiscal_w, 0);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pat_calcular_deprec_fiscal ( cd_estabelecimento_p bigint, dt_referencia_p timestamp, nr_seq_bem_p bigint, vl_deprec_mes_p INOUT bigint, vl_deprec_acum_p INOUT bigint, vl_fiscal_p INOUT bigint, vl_base_deprec_p bigint, tx_ajuste_p INOUT bigint) FROM PUBLIC;

