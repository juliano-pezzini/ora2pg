-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE wsuite_create_person_login ( nr_seq_inclusao_pf_p wsuite_solic_inclusao_pf.nr_sequencia%type, cd_pessoa_fisica_p pessoa_fisica.cd_pessoa_fisica%type, nm_usuario_p usuario.nm_usuario%type, ds_retorno_p INOUT text) AS $body$
DECLARE

				
qt_pessoa_fisica_w 	integer := 0;
cd_pessoa_fisica_w	pessoa_fisica.cd_pessoa_fisica%type;
ds_expressao_w	varchar(255);
id_subject_w		wsuite_usuario.id_subject%type;
id_role_w			varchar(255);

C01 CURSOR FOR
	SELECT	nm_pessoa_fisica, dt_nascimento, nr_cpf,
		ds_email, ds_endereco, ds_bairro,
		nr_telefone_celular, nr_ddd_celular, nr_ddi_celular,
		nr_identidade, cd_rfc, nr_passaporte,
		nr_seq_person_name, ie_sexo, cd_nacionalidade,
		sg_departamento, nr_digito_verif
	from	wsuite_solic_inclusao_pf a
	where	a.nr_sequencia = nr_seq_inclusao_pf_p;


BEGIN
--Register generated by person inclusion request, done via Web Suite portal, inclusion code: 
ds_expressao_w := obter_desc_expressao(757798, null);


If ( cd_pessoa_fisica_p is  null ) then

	for C01_w in C01 loop
		
		if (C01_w.cd_rfc IS NOT NULL AND C01_w.cd_rfc::text <> '') then
			select	count(1)
			into STRICT	qt_pessoa_fisica_w
			from	pessoa_fisica
			where	cd_rfc = C01_w.cd_rfc;			
		elsif ( (C01_w.nr_cpf IS NOT NULL AND C01_w.nr_cpf::text <> '') or (C01_w.nr_passaporte IS NOT NULL AND C01_w.nr_passaporte::text <> '')  ) then
			if (C01_w.nr_cpf IS NOT NULL AND C01_w.nr_cpf::text <> '') then
				select	count(1)
				into STRICT	qt_pessoa_fisica_w
				from	pessoa_fisica
				where	nr_cpf = C01_w.nr_cpf;
			else
				select	count(1)
				into STRICT	qt_pessoa_fisica_w
				from	pessoa_fisica
				where	nr_passaporte = C01_w.nr_passaporte;
			end if;
		end if;
		
		if ( qt_pessoa_fisica_w = 0 ) then
		
			insert into pessoa_fisica(cd_pessoa_fisica, ie_tipo_pessoa, nm_pessoa_fisica,
				dt_atualizacao, nm_usuario, dt_nascimento,
				nr_cpf, nr_identidade, nr_telefone_celular,
				dt_atualizacao_nrec, nm_usuario_nrec, ds_observacao,
				nr_ddd_celular, nr_ddi_celular, nr_seq_person_name,
				ie_sexo, cd_rfc, nr_passaporte, 
				cd_nacionalidade )
			values (	nextval('pessoa_fisica_seq'), 2, C01_w.nm_pessoa_fisica,
				clock_timestamp(), nm_usuario_p, C01_w.dt_nascimento,
				C01_w.nr_cpf, C01_w.nr_identidade, C01_w.nr_telefone_celular, 
				clock_timestamp(), nm_usuario_p,	ds_expressao_w || nr_seq_inclusao_pf_p, 
				C01_w.nr_ddd_celular, C01_w.nr_ddi_celular, C01_w.nr_seq_person_name,
				C01_w.ie_sexo, C01_w.cd_rfc, C01_w.nr_passaporte,
				C01_w.cd_nacionalidade) returning cd_pessoa_fisica into cd_pessoa_fisica_w;

			
			if (C01_w.ds_email IS NOT NULL AND C01_w.ds_email::text <> '' AND cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
				insert into compl_pessoa_fisica(cd_pessoa_fisica, nr_sequencia, ie_tipo_complemento,
					dt_atualizacao, nm_usuario, ds_endereco,
					cd_cep, nr_endereco, ds_complemento,
					ds_bairro, sg_estado, nr_telefone,
					ds_observacao, ds_email, dt_atualizacao_nrec,
					nm_usuario_nrec)
				values (	cd_pessoa_fisica_w, 1, 1,
					clock_timestamp(), nm_usuario_p, C01_w.ds_endereco,
					null, null, null,
					C01_w.ds_bairro, null, null,
					ds_expressao_w|| nr_seq_inclusao_pf_p, C01_w.ds_email, clock_timestamp(),
					nm_usuario_p);
			end if;		
			
			--This validation is used by Bolivia
			if ( (C01_w.sg_departamento IS NOT NULL AND C01_w.sg_departamento::text <> '') and (C01_w.nr_digito_verif IS NOT NULL AND C01_w.nr_digito_verif::text <> '') and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') ) then
				insert into pessoa_fisica_aux(nr_sequencia, dt_atualizacao_nrec, dt_atualizacao,
					nm_usuario_nrec, nm_usuario, cd_pessoa_fisica,
					sg_departamento,nr_digito_verif)
				values (nextval('pessoa_fisica_aux_seq'), clock_timestamp(), clock_timestamp(),
					nm_usuario_p, nm_usuario_p, cd_pessoa_fisica_w,
					C01_w.sg_departamento, C01_w.nr_digito_verif);				
			end if;
			
			
		else
			--The user's registration is duplicate. Please check with the institution.
			ds_retorno_p := 'MSG#'||obter_desc_expressao(757041, null);	
			
		end if;	
		
	end loop;
end if;

if ( (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') or (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') ) then

	select	max(id_subject)
	into STRICT		id_subject_w
	from		wsuite_usuario
	where	nr_seq_inclusao_pf = nr_seq_inclusao_pf_p;
	
	update	wsuite_usuario
	set		cd_pessoa_fisica = coalesce(cd_pessoa_fisica_w, cd_pessoa_fisica_p),
			dt_atualizacao 	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
	where	nr_seq_inclusao_pf = nr_seq_inclusao_pf_p;
	
	update	wsuite_solic_inclusao_pf
	set		cd_pessoa_fisica = coalesce(cd_pessoa_fisica_w, cd_pessoa_fisica_p),
			dt_atualizacao 	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			ie_status		= CASE WHEN ie_origem_solicitacao=2 THEN 1  ELSE 2 END 
	where	nr_sequencia 	= nr_seq_inclusao_pf_p;	
	
	--Link person with user
	if (id_subject_w IS NOT NULL AND id_subject_w::text <> '') then
		
		select	max(id)
		into STRICT 		id_role_w
		from 	role
		where 	nm_role = 'linkedUser';

		update 	subject_role 
		set 		id_role  	= id_role_w
		where 	id_subject	= id_subject_w;
		
		commit;
	end if;
			
	
	ds_retorno_p := 'COD#'|| coalesce(cd_pessoa_fisica_w, cd_pessoa_fisica_p);
end if;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE wsuite_create_person_login ( nr_seq_inclusao_pf_p wsuite_solic_inclusao_pf.nr_sequencia%type, cd_pessoa_fisica_p pessoa_fisica.cd_pessoa_fisica%type, nm_usuario_p usuario.nm_usuario%type, ds_retorno_p INOUT text) FROM PUBLIC;

