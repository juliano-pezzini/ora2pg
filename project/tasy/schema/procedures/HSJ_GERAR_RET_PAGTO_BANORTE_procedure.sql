-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hsj_gerar_ret_pagto_banorte (nr_seq_banco_escrit_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_estabelecimento_w        banco_escritural.cd_estabelecimento%type;
nr_seq_trans_escrit_w       banco_escritural.nr_seq_trans_financ%type;
nr_seq_conta_banco_w        banco_escritural.nr_seq_conta_banco%type;
nr_seq_banco_escrit_w       banco_escritural.nr_sequencia%type;
cd_tipo_baixa_w             parametros_contas_pagar.cd_tipo_baixa_padrao%type;
ie_movto_bco_pag_escrit_w   parametros_contas_pagar.ie_movto_bco_pag_escrit%type;
nr_sequencia_w              titulo_pagar_baixa.nr_sequencia%type;
vl_pagamento_w              titulo_pagar_baixa.vl_baixa%type;
nr_fornecedor_w             titulo_pagar.cd_cgc%type;
nr_titulo_w                 titulo_pagar.nr_titulo%type;
ds_seq_banco_escrit_w       varchar(30);
ie_tipo_pessoa_w            varchar(30);
qt_titulo_w                 integer;
cd_retorno_w                integer;
dt_pagamento_w              timestamp;

c01 CURSOR FOR
SELECT	substr(ds_conteudo,1,2) cd_operacao,
	substr(ds_conteudo,56,14) ds_vl_pagamento,
	substr(ds_conteudo,70,10) ds_referencia,
	substr(ds_conteudo,80,30) ds_descricao,
	substr(ds_conteudo,110,8) ds_dt_pagamento,
	substr(ds_conteudo,118,2) ds_cd_resultado,
	substr(ds_conteudo,120,58) ds_resultado,
	substr(ds_conteudo,178,8) ds_dt_aplicacao,
	substr(ds_conteudo,186,30) ds_id_rastreio,
	substr(ds_conteudo,216,9) ds_nr_movto,
	substr(ds_conteudo,225,60) ds_fornecedor
from	w_interf_retorno_itau
where	nr_seq_banco_escrit		= nr_seq_banco_escrit_p
order	by nr_sequencia;

c02 CURSOR FOR
SELECT a.nr_titulo nr_titulo,
  a.vl_escritural vl_escritural
from titulo_pagar_escrit a,
  titulo_pagar b
where a.nr_titulo = b.nr_titulo
and ((b.cd_pessoa_fisica = nr_fornecedor_w and ie_tipo_pessoa_w = 'PF') or (b.cd_cgc = nr_fornecedor_w  and ie_tipo_pessoa_w = 'PJ'))
and a.nr_seq_escrit = nr_seq_banco_escrit_w;

BEGIN

  begin

    select	a.cd_estabelecimento,
      a.nr_seq_conta_banco,
      a.nr_seq_trans_financ
    into STRICT	cd_estabelecimento_w,
      nr_seq_conta_banco_w,
      nr_seq_trans_escrit_w
    from	banco_escritural a
    where	a.nr_sequencia	= nr_seq_banco_escrit_p;

    select	coalesce(max(cd_tipo_baixa_padrao),1),
        coalesce(max(ie_movto_bco_pag_escrit),'T')
    into STRICT	cd_tipo_baixa_w,
        ie_movto_bco_pag_escrit_w
    from	parametros_contas_pagar
    where	cd_estabelecimento	= cd_estabelecimento_w;

  exception
    when no_data_found then
      /* Cadastro do retorno de pagamento escritural nao encontrado! Verifica os cadastros financeiros. */

      CALL wheb_mensagem_pck.exibir_mensagem_abort(198870);
    when too_many_rows then raise;
  end;

  <<reg_segmentos_w>>
  for reg_segmentos_w in c01
  loop
  
    begin
  
      if (reg_segmentos_w.ds_dt_pagamento	= '00000000') or (reg_segmentos_w.ds_dt_pagamento	= '99999999') then
        dt_pagamento_w	:= clock_timestamp();
      else
        dt_pagamento_w	:= to_date(reg_segmentos_w.ds_dt_pagamento, 'ddmmyyyy');
      end if;

      vl_pagamento_w := dividir_sem_round(((reg_segmentos_w.ds_vl_pagamento)::numeric )::numeric, 100);		
      cd_retorno_w := (reg_segmentos_w.ds_cd_resultado)::numeric;

      if (ie_movto_bco_pag_escrit_w = 'F') then

        nr_fornecedor_w := to_char(substr(reg_segmentos_w.ds_descricao, 1, position(':' in reg_segmentos_w.ds_descricao)-1));
        ie_tipo_pessoa_w := to_char(substr(reg_segmentos_w.ds_descricao, position(':' in reg_segmentos_w.ds_descricao)+1));
        ie_tipo_pessoa_w := to_char(substr(ie_tipo_pessoa_w, 1, position(';' in ie_tipo_pessoa_w)-1));
        ds_seq_banco_escrit_w := to_char(substr(reg_segmentos_w.ds_descricao, position(';' in reg_segmentos_w.ds_descricao)+1));
        nr_seq_banco_escrit_w := (substr(ds_seq_banco_escrit_w, 1, position('|' in ds_seq_banco_escrit_w)-1))::numeric;

        <<reg_titulos_w>>
        for reg_titulos_w in c02
        loop
  
          select 
            case when exists (select nr_titulo from titulo_pagar_escrit where nr_titulo = reg_titulos_w.nr_titulo and nr_seq_escrit = nr_seq_banco_escrit_p) 
              then 1 else 0 
            end
          into STRICT qt_titulo_w;

          if (qt_titulo_w	= 0) then
      
            CALL gerar_titulo_escritural(reg_titulos_w.nr_titulo,nr_seq_banco_escrit_p,nm_usuario_p);

          end if;

          if ( cd_retorno_w = 3 ) then
            update	titulo_pagar_escrit
            set	ds_erro			= reg_segmentos_w.ds_resultado
            where	nr_seq_escrit		= nr_seq_banco_escrit_p
            and	nr_titulo		= reg_titulos_w.nr_titulo;
          else

            update	titulo_pagar_escrit
            set	ds_erro			= reg_segmentos_w.ds_cd_resultado
            where	nr_seq_escrit		= nr_seq_banco_escrit_p
            and	nr_titulo		= reg_titulos_w.nr_titulo;

          end if;
        end loop reg_titulos_w;

      else  
        
        nr_titulo_w		:= (reg_segmentos_w.ds_referencia)::numeric;
  
        select 
          case when exists (select nr_titulo from titulo_pagar_escrit where nr_titulo = nr_titulo_w and nr_seq_escrit = nr_seq_banco_escrit_p) 
            then 1 else 0 
          end
        into STRICT qt_titulo_w;

        if (qt_titulo_w	= 0) then
    
          CALL gerar_titulo_escritural(nr_titulo_w,nr_seq_banco_escrit_p,nm_usuario_p);

        end if;

        if ( cd_retorno_w = 3 ) then
          update	titulo_pagar_escrit
          set	ds_erro			= reg_segmentos_w.ds_resultado
          where	nr_seq_escrit		= nr_seq_banco_escrit_p
          and	nr_titulo		= nr_titulo_w;
        else

          if (ie_movto_bco_pag_escrit_w = 'T') then
    
            CALL baixa_titulo_pagar(cd_estabelecimento_w,
                cd_tipo_baixa_w,
                nr_titulo_w,
                vl_pagamento_w,
                nm_usuario_p,
                nr_seq_trans_escrit_w,
                null,
                nr_seq_banco_escrit_p,
                dt_pagamento_w,
                nr_seq_conta_banco_w);

            select	max(nr_sequencia)
            into STRICT	nr_sequencia_w
            from	titulo_pagar_baixa
            where	nr_titulo	= nr_titulo_w;

            CALL gerar_movto_tit_baixa(
                nr_titulo_w,
                nr_sequencia_w,
                'P',
                nm_usuario_p,
                'N');
    
            CALL atualizar_saldo_tit_pagar(nr_titulo_w, nm_usuario_p);

          end if;

          update	titulo_pagar_escrit
          set	ds_erro			= reg_segmentos_w.ds_cd_resultado
          where	nr_seq_escrit		= nr_seq_banco_escrit_p
          and	nr_titulo		= nr_titulo_w;

        end if;

      end if;

      exception
      when others then
        rollback;
        delete	from w_interf_retorno_itau
        where	nr_seq_banco_escrit	= nr_seq_banco_escrit_p;
        commit;
        CALL wheb_mensagem_pck.exibir_mensagem_abort(nr_seq_mensagem_p => 198871, vl_macros_p => 'SQL_ERRM=' || sqlerrm ||
                    ';nr_fornecedor_w=' || nr_fornecedor_w ||
                    ';nr_titulo_w=' || nr_titulo_w ||
                    ';ds_descricao=' || reg_segmentos_w.ds_descricao ||
                    ';DS_DT_PAGAMENTO=' || reg_segmentos_w.ds_dt_pagamento ||
                    ';DS_VL_PAGAMENTO=' || reg_segmentos_w.ds_vl_pagamento ||
                    ';DS_CD_RESULTADO=' || reg_segmentos_w.ds_cd_resultado);
      end;

    end loop reg_segmentos_w;

  if (ie_movto_bco_pag_escrit_w = 'T') then

    update	banco_escritural
    set	dt_baixa	= clock_timestamp(),
    nm_usuario	= nm_usuario_p,
    dt_atualizacao	= clock_timestamp()
    where	nr_sequencia	= nr_seq_banco_escrit_p;

  else

    CALL GERAR_MOVTO_TRANS_BCO(nr_seq_banco_escrit_p,
        dt_pagamento_w, 
        cd_estabelecimento_w,
        nm_usuario_p,
        'I');

    update	banco_escritural
    set	dt_baixa	= dt_pagamento_w,
    nm_usuario	= nm_usuario_p,
    dt_atualizacao	= clock_timestamp()
    where	nr_sequencia	= nr_seq_banco_escrit_p;

  end if;

  delete	from w_interf_retorno_itau
  where	nr_seq_banco_escrit	= nr_seq_banco_escrit_p;

  commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hsj_gerar_ret_pagto_banorte (nr_seq_banco_escrit_p bigint, nm_usuario_p text) FROM PUBLIC;

