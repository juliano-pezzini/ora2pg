-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE validate_access_rules ( nm_usuario_p text, cd_pf_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint, cd_setor_usuario_p bigint, nr_atendimento_p bigint, cd_pf_paciente_p text, dt_logon_p timestamp, nr_seq_privacy_rule_p INOUT bigint, nr_seq_rec_access_encounter_p INOUT bigint, nr_seq_rec_access_med_record_p INOUT bigint, ie_access_p INOUT text, ie_type_release_access_p INOUT text, ds_msg_permission_p INOUT text, ie_require_justify_p INOUT text, ie_require_reason_p INOUT text, ie_require_second_user_p INOUT text, ie_permission_p INOUT text, ie_release_access_encounter_p INOUT text, ie_release_access_med_record_p INOUT text, ds_privacy_rule_name_p INOUT text, ie_add_log_message_p INOUT text, nr_episodio_p text default null) AS $body$
DECLARE


nr_result_rule_w			privacy_rule.nr_sequencia%type	:= 0;
ds_rule_w					privacy_rule.ds_rule%type;
ie_add_log_message_w		privacy_rule.ie_add_log_message%type := 'N';
cd_medico_resp_w			atendimento_paciente.cd_medico_resp%type;
ie_default_action_w			privacy_establishment.ie_default_action%type;
ie_physician_allowed_w		privacy_establishment.ie_physician_allowed%type;
ie_team_allowed_w			privacy_establishment.ie_team_allowed%type;
nr_seq_privacy_w			privacy_establishment.nr_seq_privacy%type;
nr_seq_privacy_version_w	privacy_establishment.nr_seq_privacy_version%type;
ie_allowed_nurse_w			privacy_establishment.ie_nurse_allowed%type;
ie_scheduling_allowed_w		privacy_establishment.ie_scheduling_allowed%type;
ie_surgery_allowed_w		privacy_establishment.ie_surgery_allowed%type;
ie_opinion_allowed_w		privacy_establishment.ie_opinion_allowed%type;
ie_release_access_w			privacy_property.ds_value%type;
ie_type_access_w			privacy_property.ds_value%type;
cd_exp_message_w			privacy_property.ds_value%type;
ie_possui_privacy_estab_w	varchar(1);
ie_usuario_part_equip_w 	varchar(1);
ds_locale_w					varchar(10);
qt_result_w					bigint;
cd_enf_resp_w				atend_enfermagem_resp.CD_PESSOA_FISICA%type;

c01 CURSOR FOR
SELECT	distinct e.nr_sequencia
from 	privacy_estab_team a,
	privacy_rule e
where 	a.ie_situacao = 'A' --Active
and 	a.cd_estabelecimento = cd_estabelecimento_p
and 	exists (SELECT 	1
		from 	pf_equipe b
		where 	b.nr_sequencia = a.nr_seq_team
		and 	((b.cd_pessoa_fisica = cd_pf_usuario_p)
		or 	(exists (select 	1
			from 	pf_equipe_partic c
			where 	c.nr_seq_equipe = b.nr_sequencia
			and 	c.cd_pessoa_fisica = cd_pf_usuario_p
			and 	((a.nr_seq_team_position = c.nr_seq_cargo_equipe)
			or coalesce(a.nr_seq_team_position::text, '') = '')))))
and 	a.nr_seq_privacy_rule = e.nr_sequencia
and 	e.ie_situacao = 'A' --Active
and 	((coalesce(e.dt_vality_end::text, '') = '' and clock_timestamp() >= e.dt_vality_start)
		or ((e.dt_vality_end IS NOT NULL AND e.dt_vality_end::text <> '') and (clock_timestamp() between e.dt_vality_start and e.dt_vality_end)));

c02 CURSOR FOR
SELECT 	c.nr_seq_privacy_rule
from 	grupo_usuario a,
	usuario_grupo b,
	privacy_estab_usergroup c,
	privacy_rule d
where 	a.ie_situacao = 'A' --Active
and 	b.nr_seq_grupo = a.nr_sequencia
and 	b.nm_usuario_grupo = nm_usuario_p
and 	b.ie_situacao = 'A' --Active
and 	a.nr_sequencia = c.nr_seq_grupo_usuario
and 	c.ie_situacao = 'A' --Active
and 	c.cd_estabelecimento = cd_estabelecimento_p
and 	c.nr_seq_privacy_rule = d.nr_sequencia
and 	d.ie_situacao = 'A' --Active
and 	((coalesce(d.dt_vality_end::text, '') = '' and clock_timestamp() >= d.dt_vality_start)
		or ((d.dt_vality_end IS NOT NULL AND d.dt_vality_end::text <> '') and (clock_timestamp() between d.dt_vality_start and d.dt_vality_end)));


BEGIN

--FR 34
select 	max(a.nr_sequencia)
into STRICT 	nr_result_rule_w
from 	pep_autor_acesso_atend a,
		atendimento_paciente b
where 	a.nr_Atendimento = nr_atendimento_p
and 	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
and 	a.ie_situacao = 'A' --Active
and 	a.cd_pessoa_fisica = cd_pf_usuario_p
and 	((clock_timestamp() between a.dt_inicio and coalesce(a.dt_fim,clock_timestamp()))
		or (coalesce(a.dt_inicio::text, '') = '' and coalesce(a.dt_fim::text, '') = ''))
and 	b.nr_atendimento = a.nr_atendimento
and 	coalesce(b.dt_alta::text, '') = ''
and 	coalesce(b.dt_fim_conta::text, '') = '';

if (nr_result_rule_w > 0) then
	begin
	ie_access_p	:= 'Y'; --Yes
	ie_permission_p	:= 'RW'; --Read and write
	nr_seq_rec_access_encounter_p := nr_result_rule_w;
	ie_type_release_access_p := 'RE'; --Liberacao de acesso ao atendimento;
	end;
else
	begin

	--FR 35
	select 	max(a.nr_sequencia)
	into STRICT	nr_result_rule_w
	from 	pep_autor_acesso a
	where 	a.cd_paciente = cd_pf_paciente_p
	and 	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and 	a.ie_situacao = 'A' --Active
	and 	a.cd_pessoa_fisica = cd_pf_usuario_p
	and 	((clock_timestamp() between a.dt_inicio and a.dt_fim)
		or (coalesce(a.dt_inicio::text, '') = ''	and coalesce(a.dt_fim::text, '') = ''));

	if (nr_result_rule_w > 0) then
		begin
		ie_access_p := 'Y'; --Yes
		ie_permission_p := 'RW'; --Read and write
		nr_seq_rec_access_med_record_p := nr_result_rule_w;
		ie_type_release_access_p := 'RM'; --Liberacao de acesso ao prontuario
		end;
	else
		begin
		--ES038
		open c02;
		loop
		fetch c02 into
			nr_result_rule_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			nr_seq_privacy_rule_p := nr_result_rule_w;
			ie_type_release_access_p := 'GR'; --Regra de acesso por grupo de usuarios
			SELECT * FROM validate_business_rule(
				nr_seq_privacy_rule_p, nr_atendimento_p, cd_setor_usuario_p, cd_pf_paciente_p, nm_usuario_p, dt_logon_p, ie_access_p, ie_require_justify_p, ie_require_reason_p, ie_require_second_user_p, ie_permission_p, ie_release_access_encounter_p, ie_release_access_med_record_p, ds_msg_permission_p, nr_episodio_p) INTO STRICT ie_access_p, ie_require_justify_p, ie_require_reason_p, ie_require_second_user_p, ie_permission_p, ie_release_access_encounter_p, ie_release_access_med_record_p, ds_msg_permission_p;
			if (ie_access_p = 'Y') then --Yes
				GOTO final;
			end if;
		end loop;

		if (ie_access_p = 'N') then --No
			begin
			GOTO final;
			end;
		end if;

		--FR36
		open c01;
		loop
		fetch 	c01 into
			nr_result_rule_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			nr_seq_privacy_rule_p := nr_result_rule_w;
			ie_type_release_access_p := 'TR'; --Regra de privacidade por equipe
			SELECT * FROM validate_business_rule(	nr_seq_privacy_rule_p, nr_atendimento_p, cd_setor_usuario_p, cd_pf_paciente_p, nm_usuario_p, dt_logon_p, ie_access_p, ie_require_justify_p, ie_require_reason_p, ie_require_second_user_p, ie_permission_p, ie_release_access_encounter_p, ie_release_access_med_record_p, ds_msg_permission_p, nr_episodio_p) INTO STRICT ie_access_p, ie_require_justify_p, ie_require_reason_p, ie_require_second_user_p, ie_permission_p, ie_release_access_encounter_p, ie_release_access_med_record_p, ds_msg_permission_p;
			if (ie_access_p = 'Y') then --Yes
				begin
				GOTO final;
				end;
			end if;
		end loop;

		if (ie_access_p = 'N') then --No
			begin
			GOTO final;
			end;
		end if;

		--FR37
		select 	max(b.nr_sequencia)
		into STRICT   	nr_result_rule_w
		from 	privacy_estab_profile a,
				privacy_rule b
		where 	a.ie_situacao = 'A' --Active
		and		a.cd_estabelecimento = cd_estabelecimento_p
		and 	cd_perfil = cd_perfil_p
		and 	b.nr_sequencia = a.nr_seq_privacy_rule
		and 	b.ie_situacao = 'A' --Active
		and 	((coalesce(b.dt_vality_end::text, '') = '' and clock_timestamp() >= b.dt_vality_start)
				or ((b.dt_vality_end IS NOT NULL AND b.dt_vality_end::text <> '') and (clock_timestamp() between b.dt_vality_start and b.dt_vality_end)));

		if (nr_result_rule_w IS NOT NULL AND nr_result_rule_w::text <> '') then
			begin
			nr_seq_privacy_rule_p := nr_result_rule_w;
			ie_type_release_access_p := 'PR'; --Regra de privacidade por perfil
			SELECT * FROM validate_business_rule(	nr_seq_privacy_rule_p, nr_atendimento_p, cd_setor_usuario_p, cd_pf_paciente_p, nm_usuario_p, dt_logon_p, ie_access_p, ie_require_justify_p, ie_require_reason_p, ie_require_second_user_p, ie_permission_p, ie_release_access_encounter_p, ie_release_access_med_record_p, ds_msg_permission_p, nr_episodio_p) INTO STRICT ie_access_p, ie_require_justify_p, ie_require_reason_p, ie_require_second_user_p, ie_permission_p, ie_release_access_encounter_p, ie_release_access_med_record_p, ds_msg_permission_p;
			GOTO final;
			end;
		end if;

		--FR38
		select 	MAX(b.nr_Sequencia)
		into STRICT   	nr_result_rule_w
		from 	privacy_estab_department a,
			privacy_rule b
		where 	a.ie_situacao = 'A' --Active
		and 	a.cd_estabelecimento = cd_estabelecimento_p
		and 	a.cd_setor_atendimento = cd_setor_usuario_p
		and 	b.nr_sequencia = a.nr_seq_privacy_rule
		and 	b.ie_situacao = 'A' --Active
		and 	((coalesce(b.dt_vality_end::text, '') = '' and clock_timestamp() >= b.dt_vality_start)
				or ((b.dt_vality_end IS NOT NULL AND b.dt_vality_end::text <> '') and (clock_timestamp() between b.dt_vality_start and b.dt_vality_end)));

		if (nr_result_rule_w IS NOT NULL AND nr_result_rule_w::text <> '') then
			begin
			nr_seq_privacy_rule_p := nr_result_rule_w;
			ie_type_release_access_p := 'DR'; --Regra de privacidade por setor
			SELECT * FROM validate_business_rule(	
				nr_seq_privacy_rule_p, nr_atendimento_p, cd_setor_usuario_p, cd_pf_paciente_p, nm_usuario_p, dt_logon_p, ie_access_p, ie_require_justify_p, ie_require_reason_p, ie_require_second_user_p, ie_permission_p, ie_release_access_encounter_p, ie_release_access_med_record_p, ds_msg_permission_p, nr_episodio_p) INTO STRICT ie_access_p, ie_require_justify_p, ie_require_reason_p, ie_require_second_user_p, ie_permission_p, ie_release_access_encounter_p, ie_release_access_med_record_p, ds_msg_permission_p;
			GOTO final;
			end;
		end if;

		--FR39
		select 	max(ie_default_action),
				max(ie_physician_allowed),
				max(ie_team_allowed),
				max(ie_nurse_allowed),
				max(nr_seq_privacy),
				max(nr_seq_privacy_version),
				CASE WHEN count(nr_sequencia)=0 THEN  'N'  ELSE 'Y' END ,
				max(ie_scheduling_allowed),
				max(ie_surgery_allowed),
				max(ie_opinion_allowed)
		into STRICT	ie_default_action_w,
				ie_physician_allowed_w,
				ie_team_allowed_w,
				ie_allowed_nurse_w,
				nr_seq_privacy_w,
				nr_seq_privacy_version_w,
				ie_possui_privacy_estab_w,
				ie_scheduling_allowed_w,
				ie_surgery_allowed_w,
				ie_opinion_allowed_w
		from 	privacy_establishment
		where 	cd_estabelecimento = cd_estabelecimento_p;

		if (ie_possui_privacy_estab_w = 'N') then --No
			begin
			
			select	coalesce(get_establishment_locale(cd_estabelecimento_p),'pt_BR')
			into STRICT	ds_locale_w
			;

			if (ds_locale_w = 'pt_BR') then
				begin
				ie_access_p	:= 'Y'; --Yes
				ie_permission_p	:= 'RW'; --Read and write
				ie_type_release_access_p := 'E'; --Regra padrao do estabelecimento
				GOTO final;
				end;
			else
				begin
				ie_access_p := 'N'; --No
				ie_type_release_access_p := 'E'; --Regra padrao do estabelecimento
				ds_msg_permission_p := obter_texto_tasy(831987, null);
				GOTO final;
				end;
			end if;
			end;
		else
			begin
			--FR46
			select  max(cd_medico_resp)
			into STRICT	cd_medico_resp_w
			from 	atendimento_paciente
			where 	nr_atendimento = nr_atendimento_p;

			if (cd_medico_resp_w IS NOT NULL AND cd_medico_resp_w::text <> '') and (cd_medico_resp_w = cd_pf_usuario_p) and (ie_physician_allowed_w = 'Y') then --Yes
				begin
				ie_access_p := 'Y'; --Yes
				ie_permission_p := 'RW'; --Read and write
				ie_type_release_access_p := 'RP'; --Liberacao de acesso para o medico responsavel
				GOTO final;
				end;
			end if;
			
			if (ie_opinion_allowed_w = 'Y') then
				begin
				select	count(*)
				into STRICT	qt_result_w
				from	parecer_medico_req a
				where	a.nr_atendimento = nr_atendimento_p
				and		a.ie_situacao = 'A'
				and		a.cd_pessoa_parecer = cd_pf_usuario_p
				and 	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
				and 	coalesce(a.dt_inativacao::text, '') = ''
				and		(a.cd_pessoa_parecer IS NOT NULL AND a.cd_pessoa_parecer::text <> '')
				and 	not exists (
						SELECT 1
						from parecer_medico b
						where b.nr_parecer = a.nr_parecer
						and (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
						and b.ie_situacao = 'A'
						and coalesce(b.dt_inativacao::text, '') = ''
						and b.ie_status = 'F');

				if (qt_result_w > 0) then
					begin
					ie_access_p := 'Y'; --Yes
					ie_permission_p := 'RW'; --Read and write
					ie_type_release_access_p := 'E'; --Regra padrao do estabelecimento
					GOTO final;
					end;
				end if;
				end;
			end if;

			--FR47
			if (ie_team_allowed_w = 'Y') and --Yes
				(cd_medico_resp_w IS NOT NULL AND cd_medico_resp_w::text <> '') then
				begin
				select 	CASE WHEN coalesce(max(a.nr_sequencia)::text, '') = '' THEN  'N'  ELSE 'Y' END
				into STRICT	ie_usuario_part_equip_w
				from 	pf_equipe a,
						pf_equipe_partic b
				where 	a.cd_pessoa_fisica = cd_medico_resp_w
				and		b.nr_seq_equipe = a.nr_sequencia
				and 	b.cd_pessoa_fisica = cd_pf_usuario_p;

				if (ie_usuario_part_equip_w = 'Y') then --Yes
					begin
					ie_access_p := 'Y'; --Yes
					ie_permission_p := 'RW'; --Read and write
					ie_type_release_access_p := 'RT'; --Liberacao de acesso para a equipe do madico responsavel
					GOTO final;
					end;
				end if;
				end;
			end if;

			select 	Obter_enfermeiro_resp(nr_atendimento_p,'C')
			into STRICT	cd_enf_resp_w
			;

			--FR48
			if (ie_allowed_nurse_w = 'Y') and --Yes
				(cd_enf_resp_w IS NOT NULL AND cd_enf_resp_w::text <> '') and (cd_pf_usuario_p = cd_enf_resp_w) then
				begin
				ie_access_p := 'Y'; --Yes
				ie_permission_p := 'RW'; --Read and write
				ie_type_release_access_p := 'RN'; --Liberacao de acesso para a enfermeira responsavel
				GOTO final;
				end;
			end if;

			--FR49
			if (ie_scheduling_allowed_w = 'Y') and --Yes
				(obter_se_pac_agenda_acesso_pep(nr_atendimento_p, cd_pf_usuario_p, nm_usuario_p, cd_estabelecimento_p) = 'S') then
				begin
				ie_access_p := 'Y'; --Yes
				ie_permission_p := 'RW'; --Read and write
				ie_type_release_access_p := 'SA'; --Liberacao de acesso por agendamento
				GOTO final;
				end;
			end if;

			--FR50
			if (ie_surgery_allowed_w = 'Y') and --Yes
				(obter_se_pac_cirur_acesso_pep(nr_atendimento_p, cd_pf_usuario_p, nm_usuario_p, cd_estabelecimento_p) = 'S') then
				begin
				ie_access_p := 'Y'; --Yes
				ie_permission_p := 'RW'; --Read and write
				ie_type_release_access_p := 'SY'; --Liberacao de acesso por cirurgia agendada
				GOTO final;
				end;
			end if;
			
			--Continue FR39
			if (ie_default_action_w = 'R') then --Releases everything
				begin
				ie_access_p := 'Y'; --Yes
				ie_permission_p := 'RW'; --Read and write
				ie_type_release_access_p := 'E'; --Regra padrao do estabelecimento
				GOTO final;
				end;
			elsif (ie_default_action_w = 'B') then --Blocks everything
				begin
				ie_access_p := 'N'; --No
				ie_type_release_access_p := 'E'; --Regra padrao do estabelecimento
				GOTO final;
				end;
			elsif (coalesce(ie_default_action_w::text, '') = '') then
				begin
				if (nr_seq_privacy_w IS NOT NULL AND nr_seq_privacy_w::text <> '') then
					begin
					if (nr_seq_privacy_version_w IS NOT NULL AND nr_seq_privacy_version_w::text <> '') then
						begin
						select 	distinct max(b.ds_value) release_access,
							max(c.ds_value) type_access,
							max(d.ds_value) cd_exp_message
						into STRICT 	ie_release_access_w,
							ie_type_access_w,
							cd_exp_message_w
						from 	privacy_property a
							left join privacy_property b on b.nr_seq_privacy_version = a.nr_seq_privacy_version
						and 	upper(b.ds_key) = 'RELEASE_ACCESS'
							left join privacy_property c on c.nr_seq_privacy_version = a.nr_seq_privacy_version
						and 	upper(c.DS_KEY) = 'TYPE_ACCESS'
							left join privacy_property d on d.nr_seq_privacy_version = a.nr_seq_privacy_version
						and 	upper(d.DS_KEY) = 'CD_EXP_CONFIG'
						where 	a.nr_seq_privacy_version = nr_seq_privacy_version_w;

						ie_access_p := ie_release_access_w;
						ie_permission_p := ie_type_access_w;
						ds_msg_permission_p := obter_desc_expressao_idioma(cd_exp_message_w, null, wheb_usuario_pck.get_nr_seq_idioma);
						ie_type_release_access_p := 'E'; --Regra padrao do estabelecimento
						GOTO final;
						end;
					else
						begin
						ie_access_p := 'N'; --No
						ie_type_release_access_p := 'E'; --Regra padrao do estabelecimento
						ds_msg_permission_p := obter_texto_tasy(831987, null);
						GOTO final;
						end;
					end if;
					end;
				else
					begin
					ie_access_p := 'N'; --No
					ie_type_release_access_p := 'E'; --Regra padrao do estabelecimento
					ds_msg_permission_p := obter_texto_tasy(831987, null);
					GOTO final;
					end;
				end if;
				end;
			end if;
			end;
		end if;
		end;
	end if;
	end;
end if;

<<final>>
ie_access_p := ie_access_p;

if (nr_seq_privacy_rule_p IS NOT NULL AND nr_seq_privacy_rule_p::text <> '') and (nr_seq_privacy_rule_p > 0)then
	begin
	select	max(ds_rule),
			max(ie_add_log_message)
	into STRICT	ds_rule_w,
			ie_add_log_message_w
	from 	privacy_rule
	where 	nr_sequencia = nr_seq_privacy_rule_p;

	ds_privacy_rule_name_p := ds_rule_w;
	ie_add_log_message_p := ie_add_log_message_w;
	end;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE validate_access_rules ( nm_usuario_p text, cd_pf_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint, cd_setor_usuario_p bigint, nr_atendimento_p bigint, cd_pf_paciente_p text, dt_logon_p timestamp, nr_seq_privacy_rule_p INOUT bigint, nr_seq_rec_access_encounter_p INOUT bigint, nr_seq_rec_access_med_record_p INOUT bigint, ie_access_p INOUT text, ie_type_release_access_p INOUT text, ds_msg_permission_p INOUT text, ie_require_justify_p INOUT text, ie_require_reason_p INOUT text, ie_require_second_user_p INOUT text, ie_permission_p INOUT text, ie_release_access_encounter_p INOUT text, ie_release_access_med_record_p INOUT text, ds_privacy_rule_name_p INOUT text, ie_add_log_message_p INOUT text, nr_episodio_p text default null) FROM PUBLIC;

