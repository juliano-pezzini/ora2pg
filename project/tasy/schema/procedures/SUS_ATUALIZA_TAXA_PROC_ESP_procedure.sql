-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_atualiza_taxa_proc_esp ( nr_interno_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE

			
cd_procedimento_real_w		sus_aih_unif.cd_procedimento_real%type;
ie_origem_proc_real_w		sus_aih_unif.ie_origem_proc_real%type;
cd_procedimento_w		procedimento_paciente.cd_procedimento%type;
cd_procedimento_ant_w		procedimento_paciente.cd_procedimento%type := 0;
ie_origem_proced_w		procedimento_paciente.ie_origem_proced%type;
vl_matmed_w			double precision;
nr_seq_cursor_w			integer	:= 0;
tx_procedimento_w			procedimento_paciente.tx_procedimento%type;
tx_proc_ler_w			double precision;
nr_sequencia_w			procedimento_paciente.nr_sequencia%type;
ie_ordem_w			integer;
nr_seq_ordem_w			bigint;
nr_seq_ordem_princ_w		bigint;
nr_seq_interno_w			sus_laudo_paciente.nr_seq_interno%type;
ie_vincular_laudos_aih_w		varchar(15)	:= 'N';
cd_estab_usuario_w		conta_paciente.cd_estabelecimento%type;

C01 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		a.tx_procedimento,
		a.nr_sequencia,
		b.vl_matmed,
		Sus_Ordenar_Proc_Aih(a.nr_sequencia) ie_ordem,
		Sus_obter_seq_ordem( a.nr_sequencia) nr_seq_ordem,
		Sus_obter_seq_ordem_princ(a.nr_sequencia) nr_seq_ordem_princ
	from	sus_valor_proc_paciente	b,
		procedimento_paciente	a
	where	a.nr_interno_conta	= nr_interno_conta_p
	and	a.nr_sequencia		= b.nr_sequencia
	and	Sus_Obter_TipoReg_Proc(a.cd_procedimento, a.ie_origem_proced, 'C', 2) = 3
	and	sus_validar_regra(11, cd_procedimento, ie_origem_proced, dt_procedimento) = 0
	order by ie_ordem, nr_seq_ordem, nr_seq_ordem_princ, a.cd_procedimento desc;
	

BEGIN

begin
cd_estab_usuario_w := coalesce(wheb_usuario_pck.get_cd_estabelecimento,0);
exception
when others then
	cd_estab_usuario_w := 0;
end;

ie_vincular_laudos_aih_w 	:= coalesce(obter_valor_param_usuario(1123,180,obter_perfil_ativo, nm_usuario_p, cd_estab_usuario_w),'N');
nr_seq_cursor_w	:= 0;

begin
select	coalesce(cd_procedimento_real,0),
		coalesce(ie_origem_proc_real,0)
into STRICT	cd_procedimento_real_w,
	ie_origem_proc_real_w
from	sus_aih_unif
where	nr_interno_conta	= nr_interno_conta_p
and	((sus_validar_regra(11, cd_procedimento_real, ie_origem_proc_real,dt_inicial) > 0) or (cd_procedimento_real = 0415020050));
exception
	when others then
	cd_procedimento_real_w	:= 0;
	ie_origem_proc_real_w	:= 0;
end;

if (ie_vincular_laudos_aih_w 	= 'S') and (cd_procedimento_real_w	= 0) then
	begin
	
	select	coalesce(max(nr_seq_interno),0)
	into STRICT	nr_seq_interno_w
	from	sus_laudo_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	ie_classificacao	= 1
	and	ie_tipo_laudo_sus	= 1;		
	
	if (nr_seq_interno_w = 0) then
		begin
		select	coalesce(max(nr_seq_interno),0)
		into STRICT	nr_seq_interno_w
		from	sus_laudo_paciente
		where	nr_interno_conta	= nr_interno_conta_p
		and	ie_classificacao	= 1
		and	ie_tipo_laudo_sus	= 0;		
		end;
	end if;
	
	begin
	select	cd_procedimento_solic,
		ie_origem_proced
	into STRICT	cd_procedimento_real_w,
		ie_origem_proc_real_w
	from	sus_laudo_paciente
	where	nr_seq_interno = nr_seq_interno_w;	
	exception
	when others then
		cd_procedimento_real_w	:= 0;
		ie_origem_proc_real_w	:= 0;
	end;
	
	end;
end if;

if (cd_procedimento_real_w > 0) then
	open C01;
	loop
	fetch C01 into	
		cd_procedimento_w,
		ie_origem_proced_w,
		tx_proc_ler_w,
		nr_sequencia_w,
		vl_matmed_w,
		ie_ordem_w,
		nr_seq_ordem_w,
		nr_seq_ordem_princ_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
				
		if	((coalesce(cd_procedimento_ant_w,0) = 0) or (coalesce(cd_procedimento_ant_w,0) <> cd_procedimento_w)) then -- Não alterar a sequência para o mesmo código de procedimento
			nr_seq_cursor_w	:= nr_seq_cursor_w + 1;
		end if;
		
		/* TRATAMENTO CIRURGICO EM POLITRAUMATIZADOS */

		if (cd_procedimento_real_w	= 0415030013) then
			if (nr_seq_cursor_w = 1) then
				tx_procedimento_w := 100;
			elsif (nr_seq_cursor_w = 2) then
				tx_procedimento_w := 100;
			elsif (nr_seq_cursor_w = 3) then
				tx_procedimento_w := 75;
			elsif (nr_seq_cursor_w = 4) then
				tx_procedimento_w := 75;
			elsif (nr_seq_cursor_w = 5) then
				tx_procedimento_w := 50;
			end if;
		end if;
		
		/* TRATAMENTO C/ CIRURGIAS MULTIPLAS 
		PROCEDIMENTOS SEQUENCIAIS DE CIRURGIA PLASTICA REPARADORA POS-CIRURGIA BARIATRICA 
		*/
		if (cd_procedimento_real_w	in (0415010012, 0415020018)) then
			if (nr_seq_cursor_w = 1) then
				tx_procedimento_w := 100;
			elsif (nr_seq_cursor_w = 2) then
				tx_procedimento_w := 75;
			elsif (nr_seq_cursor_w = 3) then
				tx_procedimento_w := 75;
			elsif (nr_seq_cursor_w = 4) then
				tx_procedimento_w := 60;
			elsif (nr_seq_cursor_w = 5) then
				tx_procedimento_w := 50;
			end if;
		end if;
		
		/*OUTROS PROCEDIMENTOS COM CIRURGIAS SEQUENCIAIS 
		PROCEDIMENTOS SEQUENCIAIS EM NEUROCIRURGIA E/OU ORTOPEDIA  - Segundo manual do SUS publicado em junho de  de 2009*/
		
		if (cd_procedimento_real_w	in (0415020034,0415020026)) then
			if (nr_seq_cursor_w = 1) then
				tx_procedimento_w := 100;
			elsif (nr_seq_cursor_w = 2) then
				tx_procedimento_w := 75;
			elsif (nr_seq_cursor_w = 3) then
				tx_procedimento_w := 50;
			end if;
		end if;
		
		/* TRATAMENTO DE AFECCOES ASSOCIADAS AO HIV/AIDS */

		if (cd_procedimento_real_w	= 0303180013) then
			if (nr_seq_cursor_w = 1) then
				tx_procedimento_w := 100;
			elsif (nr_seq_cursor_w = 2) then
				tx_procedimento_w := 100;
			elsif (nr_seq_cursor_w = 3) then
				tx_procedimento_w := 75;
			elsif (nr_seq_cursor_w = 4) then
				tx_procedimento_w := 75;
			end if;
		end if;
		/* PROCEDIMENTOS SEQUENCIAIS EM ONCOLOGIA
		PROCEDIMENTOS SEQUENCIAIS EM ORTOPEDIA 
		PROCEDIMENTOS SEQUENCIAIS EM NEUROCIRURGIA*/
		if (cd_procedimento_real_w	in (0415020050,0415020069,0415020077)) then
			if (nr_seq_cursor_w = 1) then
				tx_procedimento_w := 100;
			elsif (nr_seq_cursor_w = 2) then
				tx_procedimento_w := 75;
			elsif (nr_seq_cursor_w = 3) then
				tx_procedimento_w := 50;
			elsif (nr_seq_cursor_w = 4) then
				tx_procedimento_w := 50;
			elsif (nr_seq_cursor_w = 5) then
				tx_procedimento_w := 50;
			end if;
		end if;

		
		if (coalesce(tx_procedimento_w,0) <> coalesce(tx_proc_ler_w,0)) then
			
			update	procedimento_paciente
			set	tx_procedimento	= tx_procedimento_w
			where	nr_sequencia	= nr_sequencia_w;
		end if;
		
		cd_procedimento_ant_w := cd_procedimento_w;
		
		end;
	end loop;
	close C01;
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_atualiza_taxa_proc_esp ( nr_interno_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

