-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_consistir_lote_ifrs ( nr_lote_contabil_p ctb_movimento.nr_lote_contabil%type, ds_erro_p INOUT text, nm_usuario_p ctb_movimento.nm_usuario%type) AS $body$
DECLARE


ds_exception_w                  varchar(4000);
ds_erro_w                       varchar(2000);
ds_erro_movto_w                 varchar(255);
ds_log_lote_w                   varchar(2000);
vl_total_debito_w               ctb_movimento.vl_movimento%type := 0;
vl_total_credito_w              ctb_movimento.vl_movimento%type := 0;
ie_encerramento_w               lote_contabil.ie_encerramento%type;
cd_empresa_w                    ctb_mes_ref.cd_empresa%type;
cd_estabelecimento_w            ctb_movimento.cd_estabelecimento%type;
ie_centro_custo_inativo_w       varchar(1);
ie_movto_valor_zerado_w         varchar(1);
ie_movto_valor_negativo_w       varchar(1);
ie_movto_centro_estab_w         varchar(1);
ie_consistir_data_movto_w       varchar(1);
ie_consiste_movto_pendente_w    varchar(1);
ie_consiste_revisao_w           tipo_lote_contabil.ie_consiste_revisao%type;
dt_referencia_w                 ctb_movimento.dt_movimento%type;
cd_tipo_lote_contabil_w         tipo_lote_contabil.cd_tipo_lote_contabil%type;
ds_inconsistencia_w             ctb_movimento.ds_consistencia%type;
ds_nova_linha_w                 varchar(10);


BEGIN
begin

CALL philips_contabil_pck.set_ie_consistindo_lote('S');

update  lote_contabil
set     dt_consistencia  = NULL
where   nr_lote_contabil = nr_lote_contabil_p;

update  ctb_movto_ifrs
set     ds_inconsistencia  = NULL,
        ie_validacao  = NULL
where   nr_lote_contabil = nr_lote_contabil_p
and     (ds_inconsistencia IS NOT NULL AND ds_inconsistencia::text <> '');

/* Dados do lote contabil*/

begin
        select  coalesce(b.ie_encerramento, 'N'),
                b.cd_estabelecimento,
                coalesce(a.ie_consiste_revisao, 'S'),
                a.cd_tipo_lote_contabil
        into STRICT    ie_encerramento_w,
                cd_estabelecimento_w,
                ie_consiste_revisao_w,
                cd_tipo_lote_contabil_w
        from    tipo_lote_contabil a,
                lote_contabil b
        where   b.cd_tipo_lote_contabil = a.cd_tipo_lote_contabil
        and     b.nr_lote_contabil = nr_lote_contabil_p;
        exception
        when no_data_found then
                ie_encerramento_w := null;
                cd_estabelecimento_w := null;
                ie_consiste_revisao_w := null;
                cd_tipo_lote_contabil_w := null;
        when too_many_rows then
                ie_encerramento_w := null;
                cd_estabelecimento_w := null;
                ie_consiste_revisao_w := null;
                cd_tipo_lote_contabil_w := null;
        when others then
                ie_encerramento_w := null;
                cd_estabelecimento_w := null;
                ie_consiste_revisao_w := null;
                cd_tipo_lote_contabil_w := null;
end;

/* dados da empresa e data de referencia */

begin
        select  b.cd_empresa,
                b.dt_referencia
        into STRICT    cd_empresa_w,
                dt_referencia_w
        from    ctb_mes_ref b,
                lote_contabil a
        where   a.nr_lote_contabil = nr_lote_contabil_p
        and     a.nr_seq_mes_ref = b.nr_sequencia;
        exception
        when no_data_found then
                cd_empresa_w := null;
                dt_referencia_w := null;
        when too_many_rows then
                cd_empresa_w := null;
                dt_referencia_w := null;
        when others then
                cd_empresa_w := null;
                dt_referencia_w := null;
end;

/* Parametro de consistencia*/

ie_centro_custo_inativo_w       := coalesce(obter_valor_param_usuario(923, 43, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'S');
ie_movto_valor_zerado_w         := coalesce(obter_valor_param_usuario(923, 49, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'S');
ie_movto_valor_negativo_w       := coalesce(obter_valor_param_usuario(923, 51, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'N');
ie_movto_centro_estab_w         := coalesce(obter_valor_param_usuario(923, 68, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'S');
ie_consistir_data_movto_w       := coalesce(obter_valor_param_usuario(923, 70, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'N');
ie_consiste_movto_pendente_w    := coalesce(obter_valor_param_usuario(923, 84, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

/* validacao valor de credito e debito */
select  coalesce(sum(vl_movimento), 0)
into STRICT    vl_total_debito_w
from    ctb_movto_ifrs
where   nr_lote_contabil = nr_lote_contabil_p
and     (nr_seq_conta_debito IS NOT NULL AND nr_seq_conta_debito::text <> '');

select  coalesce(sum(vl_movimento), 0)
into STRICT    vl_total_credito_w
from    ctb_movto_ifrs
where   nr_lote_contabil = nr_lote_contabil_p
and     (nr_seq_conta_credito IS NOT NULL AND nr_seq_conta_credito::text <> '');

ds_nova_linha_w := chr(13) || chr(10);
if (vl_total_debito_w <> vl_total_credito_w)   then
    ds_erro_w := wheb_mensagem_pck.get_texto(280940) || ds_nova_linha_w ||
                 wheb_mensagem_pck.get_texto(280941) || ' ' || vl_total_debito_w  || ds_nova_linha_w ||
                 wheb_mensagem_pck.get_texto(280942) || ' ' || vl_total_credito_w || ds_nova_linha_w;
end if;

/* Movimento contabil com valor zerado */

if (ie_movto_valor_zerado_w = 'S') then
    update  ctb_movto_ifrs
    set     ds_inconsistencia   = wheb_mensagem_pck.get_texto(280943),
            ie_validacao        = '1'
    where   nr_lote_contabil    = nr_lote_contabil_p
    and     vl_movimento        = 0;
end if;

/* Movimento contabil com valor negativo */

if (ie_movto_valor_negativo_w = 'S') then
    ds_inconsistencia_w := wheb_mensagem_pck.get_texto(280944);

    update  ctb_movto_ifrs a
    set     a.ds_inconsistencia = ds_inconsistencia_w,
            a.ie_validacao = '2'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     a.vl_movimento < 0;

    update  ctb_movto_ifrs a
    set     a.ds_inconsistencia = ds_inconsistencia_w,
            a.ie_validacao = '2'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and exists (
        SELECT  1
        from    ctb_movto_ifrs_cc b
        where   b.nr_seq_movto_ifrs = a.nr_sequencia
        and     a.nr_lote_contabil  = nr_lote_contabil_p
        and     b.vl_movimento < 0);
end if;

/* Lancamento sem a apropriacao por centro de resultado. 
Esta conta contabil exige informacao do centro de custo.*/
update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280945),
        a.ie_validacao = '3'
where   a.nr_lote_contabil = nr_lote_contabil_p
and     ie_encerramento_w = 'N'
and not exists (
    SELECT  1
    from    ctb_movto_ifrs_cc b
    where   a.nr_sequencia = b.nr_seq_movto_ifrs)
and exists (
    SELECT  1
    from    conta_contabil b,
            conta_contabil_ifrs c
    where   c.cd_conta_contabil = b.cd_conta_contabil
    and     a.nr_seq_conta_debito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'
    and     b.ie_centro_custo = 'S'

union all

    select  1
    from    conta_contabil b,
            conta_contabil_ifrs c
    where   c.cd_conta_contabil = b.cd_conta_contabil
    and     a.nr_seq_conta_credito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'
    and     b.ie_centro_custo = 'S');

/* Lancamento com a apropriacao indevida por centro de resultado. 
Esta conta contabil nao requer informacao do centro de custo. */
update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280946),
        a.ie_validacao = '4'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    ctb_movto_ifrs_cc b
    where   a.nr_sequencia = b.nr_seq_movto_ifrs)
and not exists (
    SELECT  1
    from    conta_contabil b,
            conta_contabil_ifrs c
    where   c.cd_conta_contabil = b.cd_conta_contabil
    and     a.nr_seq_conta_debito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'
    and     b.ie_centro_custo in ('S', 'O')

union all

    select  1
    from    conta_contabil b,
            conta_contabil_ifrs c
    where   c.cd_conta_contabil = b.cd_conta_contabil
    and     a.nr_seq_conta_credito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'
    and     b.ie_centro_custo in ('S', 'O'));

/* Lancamento com valor diferente da somatoria dos centros de custo. */

ds_inconsistencia_w := wheb_mensagem_pck.get_texto(280947);
merge into ctb_movto_ifrs x
using(
    SELECT  a.nr_sequencia nr,
            sum(b.vl_movimento) vl
    from    ctb_movto_ifrs a,
            ctb_movto_ifrs_cc b
    where   a.nr_sequencia  = b.nr_seq_movto_ifrs
    and     a.nr_lote_contabil = nr_lote_contabil_p
    group by a.nr_sequencia
    having  count(*) > 0
    ) y
on (x.nr_sequencia = y.nr and x.vl_movimento <> y.vl)
when matched then
update
set x.ds_inconsistencia = ds_inconsistencia_w,
    x.ie_validacao        = '5';

/* Existe diferenca de debito e credito no dia deste movimento. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280970),
        a.ie_validacao = '6'
where   a.nr_lote_contabil = nr_lote_contabil_p
and     trunc(a.dt_movimento) in (
    SELECT  trunc(b.dt_movimento)
    from    ctb_movto_ifrs b
    where   b.nr_lote_contabil = nr_lote_contabil_p
    having(sum(CASE WHEN coalesce(b.nr_seq_conta_debito::text, '') = '' THEN  0  ELSE b.vl_movimento END ) <> sum(CASE WHEN coalesce(b.nr_seq_conta_credito::text, '') = '' THEN  0  ELSE b.vl_movimento END ))
    group by trunc(b.dt_movimento));

/* O mes do movimento e diferente da data de referencia */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280972),
        a.ie_validacao = '7'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    ctb_mes_ref b
    where   a.nr_seq_mes_ref = b.nr_sequencia
    and     trunc(a.dt_movimento, 'MONTH') <> trunc(b.dt_referencia, 'MONTH'));

/* Dia do movimento e maior que o dia do lote */

if (ie_consistir_data_movto_w = 'S') then
    update  ctb_movto_ifrs a
    set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280973),
            a.ie_validacao = '8'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and exists (
        SELECT  1
        from    lote_contabil x
        where   x.nr_lote_contabil = a.nr_lote_contabil
        and     pkg_date_utils.start_of(x.dt_referencia, 'DD', 0) < pkg_date_utils.start_of(a.dt_movimento, 'DD', 0));
end if;

/* A conta contabil e do tipo totalizadora */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280983),
        a.ie_validacao = '9'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    ctb_plano_conta_ifrs b
    where   a.nr_seq_conta_credito = b.nr_sequencia
    and     b.ie_tipo = 'T'

union

    SELECT  1
    from    ctb_plano_conta_ifrs b
    where   a.nr_seq_conta_debito = b.nr_sequencia
    and     b.ie_tipo = 'T');

/* A conta contabil e de outro estabelecimento */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280984),
        a.ie_validacao = '10'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    conta_contabil_estab b,
            conta_contabil_ifrs c
    where   b.cd_conta_contabil = c.cd_conta_contabil
    and     a.nr_seq_conta_debito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'

union all

    SELECT  1
    from    conta_contabil_estab b,
            conta_contabil_ifrs c
    where   b.cd_conta_contabil = c.cd_conta_contabil
    and     a.nr_seq_conta_credito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S')
and not exists (
    select  1
    from    conta_contabil_estab b,
            conta_contabil_ifrs c
    where   b.cd_conta_contabil = c.cd_conta_contabil
    and     a.nr_seq_conta_debito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'
    and     b.cd_estabelecimento = a.cd_estabelecimento
    
union all

    select  1
    from    conta_contabil_estab b,
            conta_contabil_ifrs c
    where   b.cd_conta_contabil = c.cd_conta_contabil
    and     a.nr_seq_conta_credito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'
    and     b.cd_estabelecimento = a.cd_estabelecimento);

/* O vinculo da conta IFRS esta inativo. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(1216536),
        a.ie_validacao = '34'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    conta_contabil_ifrs c
    where   a.nr_seq_conta_debito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'N'
    and     c.ie_situacao <> 'A'

union

    SELECT  1
    from    conta_contabil_ifrs c
    where   a.nr_seq_conta_credito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'N'
    and     c.ie_situacao <> 'A');

/* Falta informar o grupo no cadastro da conta. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280986),
        a.ie_validacao = '12'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    conta_contabil b,
            conta_contabil_ifrs c
    where   c.cd_conta_contabil = b.cd_conta_contabil
    and     a.nr_seq_conta_credito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'
    and     coalesce(b.cd_grupo::text, '') = ''

union

    SELECT  1
    from    conta_contabil b,
            conta_contabil_ifrs c
    where   c.cd_conta_contabil = b.cd_conta_contabil
    and     a.nr_seq_conta_debito = c.nr_seq_conta_ifrs
    and     obter_se_periodo_vigente(c.dt_inicio_vigencia, c.dt_fim_vigencia, clock_timestamp()) = 'S'
    and     coalesce(b.cd_grupo::text, '') = '');

/* A conta contabil e de outra empresa. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280987),
        a.ie_validacao = '13'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    ctb_plano_conta_ifrs b
    where   a.nr_seq_conta_credito = b.nr_sequencia
    and     b.cd_empresa <> cd_empresa_w

union

    SELECT  1
    from    ctb_plano_conta_ifrs b
    where   a.nr_seq_conta_debito = b.nr_sequencia
    and     b.cd_empresa <> cd_empresa_w);

/* Este historico e de outra empresa. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280988),
        a.ie_validacao = '14'
where   a.nr_lote_contabil = nr_lote_contabil_p
and not exists (
    SELECT  1
    from    historico_padrao_empresa_v b
    where   a.cd_historico = b.cd_historico
    and     b.cd_empresa = cd_empresa_w);

/* Este historico esta inativo. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280989),
        a.ie_validacao = '15'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    historico_padrao b
    where   a.cd_historico = b.cd_historico
    and     coalesce(b.ie_situacao, 'I') <> 'A');

/* Movimento com centro de resultado totalizador */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280991),
        a.ie_validacao = '16'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    centro_custo c,
            ctb_movto_ifrs_cc b
    where   b.nr_seq_movto_ifrs = a.nr_sequencia
    and     b.cd_centro_custo = c.cd_centro_custo
    and     c.ie_tipo = 'T');

/* Movimento com centro de resultado inativo. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280992),
        a.ie_validacao = '17'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists(
    SELECT  1
    from    centro_custo c,
            ctb_movto_ifrs_cc b
    where   b.nr_seq_movto_ifrs = a.nr_sequencia
    and     b.cd_centro_custo = c.cd_centro_custo
    and     c.ie_situacao <> 'A'
    and     ie_centro_custo_inativo_w = 'S'
    and     (((c.dt_fim_contabil IS NOT NULL AND c.dt_fim_contabil::text <> '')
    and     c.dt_fim_contabil <= a.dt_movimento)
    or      coalesce(c.dt_fim_contabil::text, '') = ''));

/* Movimento com centro de resultado de estabelecimento diferente. */

if (ie_movto_centro_estab_w = 'S') then
    update  ctb_movto_ifrs a
    set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(280993),
            a.ie_validacao = '18'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and exists (
        SELECT  1
        from    centro_custo c,
                ctb_movto_ifrs_cc b
        where   b.nr_seq_movto_ifrs = a.nr_sequencia
        and     b.cd_centro_custo = c.cd_centro_custo
        and     c.cd_estabelecimento <> cd_estabelecimento_w);
end if;

/* Centro de custo nao permitido, pertence a outra empresa. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(351249),
        a.ie_validacao = '22'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    estabelecimento b,
            centro_custo c,
            ctb_movto_ifrs_cc d,
            empresa e
    where   d.nr_seq_movto_ifrs = a.nr_sequencia
    and     c.cd_estabelecimento = b.cd_estabelecimento
    and     b.cd_empresa = e.cd_empresa
    and     d.cd_centro_custo = c.cd_centro_custo
    and     e.cd_empresa <> cd_empresa_w);

/* Estabelecimento do movimento inativo. */

update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(1076393),
        a.ie_validacao = '26'
where   nr_lote_contabil = nr_lote_contabil_p
and exists (
    SELECT  1
    from    estabelecimento b
    where   a.cd_estabelecimento = b.cd_estabelecimento
    and     coalesce(b.ie_situacao, 'A') = 'I');

-- A conta do movimento contabil IFRS esta fora da data de vigencia
update  ctb_movto_ifrs a
set     a.ds_inconsistencia = wheb_mensagem_pck.get_texto(1214462),
        a.ie_validacao = '33'
where   a.nr_lote_contabil = nr_lote_contabil_p
and exists (
        SELECT 1
        from    conta_contabil_ifrs c,
                ctb_plano_conta_ifrs p
        where a.nr_seq_conta_debito = c.nr_seq_conta_ifrs
        and p.nr_sequencia = c.nr_seq_conta_ifrs
        and obter_se_periodo_vigente(p.dt_inicio_vigencia, p.dt_fim_vigencia, dt_referencia_w) = 'N'

union all

        SELECT 1
        from    conta_contabil_ifrs c,
                ctb_plano_conta_ifrs p
        where a.nr_seq_conta_credito = c.nr_seq_conta_ifrs
        and p.nr_sequencia = c.nr_seq_conta_ifrs
        and obter_se_periodo_vigente(p.dt_inicio_vigencia, p.dt_fim_vigencia, dt_referencia_w) = 'N');

select  coalesce(max(ds_inconsistencia), 'X')
into STRICT    ds_erro_movto_w
from    ctb_movto_ifrs
where   nr_lote_contabil = nr_lote_contabil_p;

if (ds_erro_movto_w <> 'X') then
    ds_erro_w := substr(ds_erro_movto_w, 1, 255);
end if;

if (coalesce(ds_erro_w::text, '') = '') then
    update  lote_contabil
    set     dt_consistencia = clock_timestamp(),
            vl_debito = vl_total_debito_w,
            vl_credito = vl_total_credito_w
    where   nr_lote_contabil = nr_lote_contabil_p;

    ds_log_lote_w := substr(wheb_mensagem_pck.get_texto(280997) || campo_mascara_virgula(vl_total_debito_w) || wheb_mensagem_pck.get_texto(280995) || campo_mascara_virgula(vl_total_credito_w), 1, 2000);
else
    ds_log_lote_w := substr(wheb_mensagem_pck.get_texto(280996) || campo_mascara_virgula(vl_total_debito_w) || wheb_mensagem_pck.get_texto(280995) || campo_mascara_virgula(vl_total_credito_w), 1, 2000);
end if;

CALL ctb_gravar_log_lote(nr_lote_contabil_p, 4, ds_log_lote_w, nm_usuario_p);
CALL philips_contabil_pck.set_ie_consistindo_lote('N');

exception
    when program_error then
        CALL philips_contabil_pck.set_ie_consistindo_lote('N');
        ds_exception_w := substr(sqlerrm, 1, 1000);
        CALL wheb_mensagem_pck.exibir_mensagem_abort(448772, 'DS_ERRO=' || ds_exception_w);
    when others then
        CALL philips_contabil_pck.set_ie_consistindo_lote('N');
        ds_exception_w := substr(sqlerrm, 1, 1000);
        CALL wheb_mensagem_pck.exibir_mensagem_abort(448772, 'DS_ERRO=' || ds_exception_w);
end;

ds_erro_p := substr(ds_erro_w, 1, 255);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_consistir_lote_ifrs ( nr_lote_contabil_p ctb_movimento.nr_lote_contabil%type, ds_erro_p INOUT text, nm_usuario_p ctb_movimento.nm_usuario%type) FROM PUBLIC;

