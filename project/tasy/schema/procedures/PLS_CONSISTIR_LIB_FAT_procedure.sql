-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_lib_fat (nr_seq_lib_fat_p pls_lib_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

 
ie_status_w		pls_lib_fat_conta.ie_status%type;
vl_total_benef_w	pls_conta_pos_estabelecido.vl_beneficiario%type;
qt_registros_w		integer := 0;
				
c01 CURSOR(	nr_seq_lib_fat_w	pls_lib_faturamento.nr_sequencia%type) FOR 
	SELECT	x.nr_sequencia, 
		x.nr_seq_conta, 
		a.cd_guia, 
		a.nr_seq_protocolo, 
		a.ie_tipo_guia, 
		p.dt_protocolo 
	from	pls_protocolo_conta p, 
		pls_conta a, 
		pls_lib_fat_conta x 
	where	a.nr_sequencia		= x.nr_seq_conta 
	and	p.nr_sequencia		= a.nr_seq_protocolo 
	and	x.nr_seq_lib_fat 	= nr_seq_lib_fat_w;
	
c02 CURSOR(	nr_seq_lib_fat_conta_w	pls_lib_fat_conta.nr_sequencia%type) FOR 
	SELECT	s.nr_sequencia, 
		s.vl_beneficiario, 
		s.vl_administracao, 
		s.vl_medico, 
		s.vl_custo_operacional, 
		s.vl_materiais, 
		s.vl_lib_taxa_servico, 
		s.vl_lib_taxa_co, 
		s.vl_lib_taxa_material 
	from	pls_conta_pos_estabelecido s, 
		pls_lib_fat_conta_pos x 
	where	s.nr_sequencia		= x.nr_seq_conta_pos_estab 
	and	x.nr_seq_lib_fat_conta	= nr_seq_lib_fat_conta_w;

 
BEGIN 
delete	FROM pls_lib_fat_conta_incons 
where	nr_seq_lib_fat_conta in (SELECT	nr_sequencia 
				from	pls_lib_fat_conta 
				where	nr_seq_lib_fat = nr_seq_lib_fat_p);
 
for r_c01_w in c01( nr_seq_lib_fat_p ) loop 
	ie_status_w := 'LS';
 
	if (coalesce(r_c01_w.cd_guia::text, '') = '') then -- Não foi localizada a guia da conta 
		CALL pls_inserir_incons_lib_fat( r_c01_w.nr_sequencia, 1, 'Conta médica: '||r_c01_w.nr_seq_conta, nm_usuario_p, 'N');
		ie_status_w := 'I';
	end if;
	 
	if (coalesce(r_c01_w.dt_protocolo::text, '') = '') then -- Não foi localizada a data do protocolo 
		CALL pls_inserir_incons_lib_fat( r_c01_w.nr_sequencia, 2, 'Protocolo: '||r_c01_w.nr_seq_protocolo, nm_usuario_p, 'N');
		ie_status_w := 'I';
	end if;
	 
	if (coalesce(r_c01_w.ie_tipo_guia::text, '') = '') then -- Não foi localizada o tipo de guia da conta 
		CALL pls_inserir_incons_lib_fat( r_c01_w.nr_sequencia, 6, 'Conta médica: '||r_c01_w.nr_seq_conta, nm_usuario_p, 'N');
		ie_status_w := 'I';
	end if;
	 
	if (r_c01_w.cd_guia IS NOT NULL AND r_c01_w.cd_guia::text <> '') then 
		select	count(1) 
		into STRICT	qt_registros_w 
		from	pls_lib_fat_conta x, 
			pls_conta a 
		where	a.nr_sequencia	= x.nr_seq_conta 
		and	a.nr_sequencia	= r_c01_w.nr_seq_conta 
		and	x.nr_seq_lib_fat 	= nr_seq_lib_fat_p 
		and	a.cd_guia 	in (SELECT	k.cd_guia 
						from	pls_lib_fat_conta y, 
							pls_conta k 
						where	k.nr_sequencia		= y.nr_seq_conta 
						and	y.nr_seq_lib_fat 	= nr_seq_lib_fat_p 
						and	y.nr_seq_conta		<> x.nr_seq_conta);
						 
		if (qt_registros_w > 0) then -- Existem contas com a mesma Guia 
			CALL pls_inserir_incons_lib_fat( r_c01_w.nr_sequencia, 9, 'Conta médica: '||r_c01_w.nr_seq_conta, nm_usuario_p, 'N');
			ie_status_w := 'I';
		end if;
	end if;
	 
	for r_c02_w in c02( r_c01_w.nr_sequencia ) loop 
		qt_registros_w	:= 0;
	 
		vl_total_benef_w := 	coalesce(r_c02_w.vl_medico,0) + coalesce(r_c02_w.vl_custo_operacional,0) + coalesce(r_c02_w.vl_materiais,0) + 
					coalesce(r_c02_w.vl_lib_taxa_servico,0) + coalesce(r_c02_w.vl_lib_taxa_co,0) + coalesce(r_c02_w.vl_lib_taxa_material,0);
	 
		if (r_c02_w.vl_beneficiario < 0) then -- Item com valor beneficiário negativo 
			CALL pls_inserir_incons_lib_fat( 	r_c01_w.nr_sequencia, 3, 
							'Conta médica: '||r_c01_w.nr_seq_conta||chr(10)|| 
							'Conta pós-estabelecido: '||r_c02_w.nr_sequencia, 
							nm_usuario_p, 'N');
			ie_status_w := 'I';
		end if;
		 
		if (r_c02_w.vl_beneficiario = 0) and (r_c02_w.vl_administracao = 0) then -- Item com valor da taxa de intercâmbio e valor beneficiário zerados 
			CALL pls_inserir_incons_lib_fat( 	r_c01_w.nr_sequencia, 4, 
							'Conta médica: '||r_c01_w.nr_seq_conta||chr(10)|| 
							'Conta pós-estabelecido: '||r_c02_w.nr_sequencia, 
							nm_usuario_p, 'N');
			ie_status_w := 'I';
		end if;
		 
		if (r_c02_w.vl_administracao < 0) then -- Item com valor de taxa de intercâmbio negativo 
			CALL pls_inserir_incons_lib_fat( 	r_c01_w.nr_sequencia, 5, 
							'Conta médica: '||r_c01_w.nr_seq_conta||chr(10)|| 
							'Conta pós-estabelecido: '||r_c02_w.nr_sequencia, 
							nm_usuario_p, 'N');
			ie_status_w := 'I';
		end if;	
		 
		if (r_c02_w.vl_beneficiario <> vl_total_benef_w) then -- A soma dos valores das taxas liberadas e os valores do item está diferente do valor do beneficiário 
			CALL pls_inserir_incons_lib_fat( 	r_c01_w.nr_sequencia, 7, 
							'Conta médica: '||r_c01_w.nr_seq_conta||chr(10)|| 
							'Conta pós-estabelecido: '||r_c02_w.nr_sequencia, 
							nm_usuario_p, 'N');
			ie_status_w := 'I';
		end if;	
		 
		select	count(1) 
		into STRICT	qt_registros_w 
		from	pls_conta_pos_estab_partic 
		where	nr_seq_conta_pos = r_c02_w.nr_sequencia 
		and (vl_participante_pos < 0 or vl_administracao < 0);
		 
		if (qt_registros_w > 0) then -- Item com participante com valor negativo 
			CALL pls_inserir_incons_lib_fat( 	r_c01_w.nr_sequencia, 8, 
							'Conta médica: '||r_c01_w.nr_seq_conta||chr(10)|| 
							'Conta pós-estabelecido: '||r_c02_w.nr_sequencia, 
							nm_usuario_p, 'N');
			ie_status_w := 'I';
		end if;
	end loop;
 
	update	pls_lib_fat_conta 
	set	ie_status	= ie_status_w, 
		nm_usuario	= nm_usuario_p 
	where	nr_sequencia	= r_c01_w.nr_sequencia 
	and	ie_status	not in ('BU','LU');
end loop;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_lib_fat (nr_seq_lib_fat_p pls_lib_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

