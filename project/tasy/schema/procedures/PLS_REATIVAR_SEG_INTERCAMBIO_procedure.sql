-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_reativar_seg_intercambio ( nr_seq_segurado_p bigint, dt_reativacao_p timestamp, ds_observacao_p text, ie_origem_reativacao_p text, ie_commit_p text, ie_dependente_p text, ie_tipo_compartilhamento_p ptu_intercambio_benef.ie_tipo_compartilhamento%type, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

			
/*ie_origem_reativacao_p
C - Contrato
B - Beneficiário
*/
qt_dias_valid_cart_w		integer;
dt_validade_w			timestamp;
nr_seq_titular_w		bigint;
dt_rescisao_titular_w		timestamp;
qt_registros_w			bigint;
nr_seq_intercambio_w		bigint;
nr_seq_segurado_depen_w		bigint;
dt_suspensao_seg_w		timestamp;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
ds_historico_w			pls_segurado_historico.ds_historico%type;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_segurado
	where	nr_seq_titular		= nr_seq_segurado_p
	and	(dt_rescisao IS NOT NULL AND dt_rescisao::text <> '');
	
C02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_segurado		a,
		pls_tabela_preco	b
	where	a.nr_seq_tabela		= b.nr_sequencia
	and	coalesce(b.ie_preco_vidas_contrato,'N')	= 'S'
	and	a.nr_seq_intercambio	= nr_seq_intercambio_w;
	

BEGIN

select	nr_seq_titular,
	nr_seq_intercambio,
	CASE WHEN coalesce(dt_rescisao::text, '') = '' THEN  'Reativação: ' || dt_reativacao_p  ELSE 'Realizada a reativação do beneficiário para ' || dt_reativacao_p || ' - Data de rescisão anterior: ' || dt_rescisao END
into STRICT	nr_seq_titular_w,
	nr_seq_intercambio_w,
	ds_historico_w
from	pls_segurado
where	nr_sequencia		= nr_seq_segurado_p;

if (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then
	select	dt_rescisao
	into STRICT	dt_rescisao_titular_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_titular_w;
	
	if (dt_rescisao_titular_w IS NOT NULL AND dt_rescisao_titular_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(227066,'NM_BENEFICIARIO='||substr(pls_obter_dados_segurado(nr_seq_segurado_p,'N'),1,255));
	end if;
end if;	

dt_suspensao_seg_w := pls_obter_dt_suspensao_seg(nr_seq_segurado_p);

update	pls_segurado
set	dt_rescisao			 = NULL,
	dt_limite_utilizacao		 = NULL,
	nm_usuario			= nm_usuario_p,
	dt_atualizacao			= clock_timestamp(),
	dt_reativacao			= dt_reativacao_p,
	nr_seq_motivo_cancelamento	 = NULL,
	dt_cancelamento			 = NULL,
	ie_tipo_rescisao		= '',
	ie_situacao_atend		= CASE WHEN dt_suspensao_seg_w = NULL THEN CASE WHEN dt_liberacao = NULL THEN 'I'  ELSE 'A' END   ELSE 'S' END ,
	ie_tipo_segurado		= CASE WHEN ie_tipo_compartilhamento_p=2 THEN  'H'  ELSE ie_tipo_segurado END ,
	dt_alteracao_tipo_segurado	= CASE WHEN ie_tipo_segurado=CASE WHEN ie_tipo_compartilhamento_p=2 THEN  'H'  ELSE ie_tipo_segurado END  THEN  dt_alteracao_tipo_segurado  ELSE trunc(clock_timestamp(),'dd') END
where	nr_sequencia			= nr_seq_segurado_p;		

/*Gerar renovação da carteira*/

CALL pls_gerar_renovacao_cart_inter(nr_seq_intercambio_w,nr_seq_segurado_p,'R',nm_usuario_p);

/* Gerar histórico */

CALL pls_gerar_segurado_historico(
	nr_seq_segurado_p, '2', clock_timestamp(),
	ds_historico_w, ds_observacao_p, null,
	dt_reativacao_p, null, null, 
	dt_reativacao_p, null, null, 
	null, null, null, 
	null, nm_usuario_p, 'N');
	
if (ie_dependente_p = 'S') then
	open C01;
	loop
	fetch C01 into	
		nr_seq_segurado_depen_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		dt_suspensao_seg_w := pls_obter_dt_suspensao_seg(nr_seq_segurado_p);
		update	pls_segurado
		set	dt_rescisao			 = NULL,
			dt_limite_utilizacao		 = NULL,
			nm_usuario			= nm_usuario_p,
			dt_atualizacao			= clock_timestamp(),
			dt_reativacao			= dt_reativacao_p,
			nr_seq_motivo_cancelamento	 = NULL,
			dt_cancelamento			 = NULL,
			ie_tipo_rescisao		= '',
			ie_situacao_atend		= CASE WHEN dt_suspensao_seg_w = NULL THEN CASE WHEN dt_liberacao = NULL THEN 'I'  ELSE 'A' END   ELSE 'S' END
		where	nr_sequencia			= nr_seq_segurado_depen_w;		
		
		/*Gerar renovação da carteira*/

		CALL pls_gerar_renovacao_cart_inter(nr_seq_intercambio_w,nr_seq_segurado_depen_w,'R',nm_usuario_p);

		/* Gerar histórico */

		CALL pls_gerar_segurado_historico(
			nr_seq_segurado_depen_w, '2', clock_timestamp(),
			'Reativação', ds_observacao_p, null,
			dt_reativacao_p, null, null, 
			dt_reativacao_p, null, null, 
			null, null, null, 
			null, nm_usuario_p, 'N');
		
		end;
	end loop;
	close C01;
end if;

if (nr_seq_intercambio_w IS NOT NULL AND nr_seq_intercambio_w::text <> '') and (ie_origem_reativacao_p = 'B') then
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_intercambio
	where	nr_sequencia	= nr_seq_intercambio_w
	and	(dt_exclusao IS NOT NULL AND dt_exclusao::text <> '');
	
	if (qt_registros_w > 0) then
		update	pls_intercambio
		set	dt_exclusao		 = NULL,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			dt_reativacao		= dt_reativacao_p
		where	nr_sequencia		= nr_seq_intercambio_w;
		
		insert into pls_contrato_historico(	nr_sequencia,
					cd_estabelecimento,
					nr_seq_intercambio,
					dt_historico,
					ie_tipo_historico,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ds_historico)
				values (	nextval('pls_contrato_historico_seq'),
					cd_estabelecimento_p,
					nr_seq_intercambio_w,
					dt_reativacao_p,
					'2',
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					'Reativação do contrato ao reativar o beneficiário');
	end if;
end if;

if (nr_seq_intercambio_w IS NOT NULL AND nr_seq_intercambio_w::text <> '') then
	open C02;
	loop
	fetch C02 into	
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		CALL pls_recalc_preco_benef_inter(nr_seq_segurado_w,'Q','S',dt_reativacao_p,'N',nm_usuario_p,cd_estabelecimento_p);
		end;
	end loop;
	close C02;
end if;

if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_reativar_seg_intercambio ( nr_seq_segurado_p bigint, dt_reativacao_p timestamp, ds_observacao_p text, ie_origem_reativacao_p text, ie_commit_p text, ie_dependente_p text, ie_tipo_compartilhamento_p ptu_intercambio_benef.ie_tipo_compartilhamento%type, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

