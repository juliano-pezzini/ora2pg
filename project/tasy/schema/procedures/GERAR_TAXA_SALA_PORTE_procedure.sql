-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_taxa_sala_porte (nr_atendimento_p bigint, dt_entrada_unidade_p timestamp, dt_procedimento_p timestamp, cd_procedimento_p bigint, nr_seq_propaci_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_atualizacao_w        	timestamp 		:= clock_timestamp();
ie_erro_w			varchar(1)	:= 'N';
ie_taxa_exame_w			varchar(1)	:= 'S';
ie_taxa_porte_w			varchar(1)	:= 'S';
qt_procedimento_w		numeric(9,3)	:= 0;
cd_setor_atendimento_w  	numeric(5,0)	:= 0;
cd_convenio_w           	numeric(5,0)  	:= 0;
cd_categoria_w			varchar(10) 	:= '';
nr_doc_convenio_w       	varchar(20) 	:= '';
nr_cirurgia_w			bigint     	:= 0;
cd_estabelecimento_w    	numeric(4,0)  	:= 0;
ie_origem_proced_w   		bigint     	:= 0;
cd_taxa_exame_w         	bigint     	:= 0;
ie_maior_porte_w       		varchar(1)	:= 'S';
cd_taxa_porte_w         	bigint;
cd_edicao_amb_w         	integer     	:= 0;
cd_edicao_proc_w		integer	:= 0;
qt_porte_anestesico_w   	smallint     	:= 0;
cd_taxa_maior_w         	bigint    	:= 0;
nr_prescricao_w         	bigint;
dt_prescricao_w         	timestamp;
nr_cirurgia_org_w       	bigint;
cd_medico_executor_w    	varchar(10);
cd_medico_w    			varchar(10);
nr_sequencia_w       		bigint     	:= 0;
tx_procedimento_w		double precision	:= 0;
ie_criterio_taxa_w		smallint	:= 0;
ie_classificacao_w		varchar(1);
nr_sequencia_org_w      	bigint     	:= 0;
vl_procedimento_w      		double precision   	:= 0;
vl_medico_w			double precision   	:= 0;
vl_anestesista_w      		double precision   	:= 0;
vl_materiais_w      		double precision   	:= 0;
vl_auxiliares_w      		double precision   	:= 0;
vl_custo_operacional_w  	double precision   	:= 0;
ie_tipo_atendimento_w   	smallint     	:= 0;
ie_origem_taxa_w   		bigint     	:= 0;
ie_medico_taxa_w   		varchar(1);
cd_cgc_taxa_w			varchar(14);
cd_medico_taxa_w    		varchar(10);
nr_seq_atepacu_w		bigint;
qt_taxa_w			bigint;
ie_auditoria_w			varchar(1);
ie_calc_porte_w			varchar(1);
ie_calc_porte_estab_w		varchar(1);
cd_medico_regra_w		varchar(10);
ie_origem_proced_edicao_w	bigint;
ie_regra_porte_w		varchar(01);	
nr_seq_exame_w			bigint;
ie_via_acesso_w			varchar(1);
vl_paramvia_acesso_w		varchar(1);
tx_proc_viacesso_w		double precision	:= 100;
cd_senha_w			varchar(20);
ie_tipo_regra_w			varchar(20);
cd_profissional_w		varchar(10);
nr_seq_ajuste_proc_w		bigint;
qt_dependentes_w		bigint;
qt_registros_w			bigint	:= 0;
nr_seq_classificacao_w		bigint;
varPorteAnestZeroCbhpm_w	varchar(1);
cd_tipo_acomodacao_w		smallint;
nr_seq_proc_interno_w		bigint;
nr_seq_proc_interno_ww		bigint;
ie_forma_apresentacao_w		bigint;
dt_inicio_real_w		timestamp;
dt_termino_w			timestamp;
ie_cons_forma_reg_qtd_w		varchar(1):='N';
ie_data_vig_cbhpm_w		varchar(1);
nr_seq_pepo_w			bigint;
dt_inicio_processo_w		timestamp;
dt_fim_processo_w		timestamp;
nr_sequencia_prescricao_w	integer;
ie_origem_inf_w			varchar(1);
ie_atualizar_regra_uso_porte_w	varchar(1);
cd_cgc_laboratorio_w		varchar(14);

ds_erro_ww			varchar(255) := '';
qt_mat_dependente_w		bigint;
cd_setor_prescricao_w		integer;
qt_lanc_taxa_w			bigint;
ie_gera_taxa_porte_w	varchar(1) := 'S';


BEGIN

cd_taxa_porte_w := null;
select	coalesce(max(nr_seq_interno),0)
into STRICT	nr_seq_atepacu_w
from	atend_paciente_unidade
where	nr_atendimento 		= nr_atendimento_p
and	dt_entrada_unidade	= dt_entrada_unidade_p;

/* felipe 16/02/2007 - os49408 */

select	coalesce(obter_valor_param_usuario(67, 149, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N'),
	coalesce(obter_valor_param_usuario(67, 449, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N'),
	coalesce(obter_valor_param_usuario(900, 361, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N')
into STRICT	vl_paramvia_acesso_w,
	varPorteAnestZeroCbhpm_w,
	ie_cons_forma_reg_qtd_w
;

ie_gera_taxa_porte_w := obter_param_usuario(872, 536, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gera_taxa_porte_w);

/* selecionar dados do procedimento */

begin
select	a.qt_procedimento,
	a.cd_setor_atendimento,
	a.cd_convenio,
	a.cd_categoria,
	CASE WHEN coalesce(obter_se_grava_guia(b.cd_estabelecimento,a.cd_convenio),'S')='S' THEN a.nr_doc_convenio  ELSE null END ,
	coalesce(a.nr_cirurgia,0),
	b.cd_estabelecimento,
	a.ie_origem_proced,
	a.nr_prescricao,
	a.dt_prescricao,
	a.nr_cirurgia,
	a.cd_medico_executor,
	a.cd_medico,
	a.nr_sequencia,
	b.ie_tipo_atendimento,
	a.qt_porte_anestesico,
	a.ie_auditoria,
	a.nr_seq_exame,
	CASE WHEN vl_paramvia_acesso_w='S' THEN a.ie_via_acesso  ELSE '' END ,
	a.cd_senha,
	nr_seq_ajuste_proc,
	b.nr_seq_classificacao,
	a.nr_seq_proc_interno,
	a.nr_sequencia_prescricao
into STRICT	qt_procedimento_w,
	cd_setor_atendimento_w,
	cd_convenio_w,
	cd_categoria_w,
	nr_doc_convenio_w,
	nr_cirurgia_w,
	cd_estabelecimento_w,
	ie_origem_proced_w,
	nr_prescricao_w,
	dt_prescricao_w,
	nr_cirurgia_org_w,
	cd_medico_executor_w,
	cd_medico_w,
	nr_sequencia_org_w,
	ie_tipo_atendimento_w,
	qt_porte_anestesico_w,
	ie_auditoria_w,
	nr_seq_exame_w,
	ie_via_acesso_w,
	cd_senha_w,
	nr_seq_ajuste_proc_w,
	nr_seq_classificacao_w,
	nr_seq_proc_interno_w,
	nr_sequencia_prescricao_w
from	procedimento_paciente a,
	atendimento_paciente b
where 	a.nr_sequencia		= nr_seq_propaci_p

/*
ricardo 01/02/2005 - retirei as linhas abaixo e substitui pela linha acima nr_seq_propaci
and	a.nr_atendimento	= nr_atendimento_p
and	a.dt_entrada_unidade 	= dt_entrada_unidade_p
and	a.dt_procedimento	= dt_procedimento_p
and	a.cd_procedimento	= cd_procedimento_p*/
and	a.nr_atendimento	= b.nr_atendimento;

exception
	when others then
      ie_erro_w := 'S';
end;

select	coalesce(max(ie_regra_uso_tx_sala),'N')
into STRICT	ie_atualizar_regra_uso_porte_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(nr_prescricao_w,0) > 0) then

	select	max(cd_setor_atendimento)
	into STRICT	cd_setor_prescricao_w
	from	prescr_medica
	where	nr_prescricao = nr_prescricao_w;

	if (coalesce(nr_sequencia_prescricao_w,0) > 0) then
		select	max(ie_origem_inf),
			max(cd_cgc_laboratorio)
		into STRICT	ie_origem_inf_w,
			cd_cgc_laboratorio_w
		from	prescr_procedimento
		where	nr_prescricao = nr_prescricao_w
		and	nr_sequencia = nr_sequencia_prescricao_w;
	end if;
	
end if;


begin
select 	count(*)
into STRICT	qt_dependentes_w
from 	procedimento_paciente a
where 	a.nr_seq_proc_princ = nr_sequencia_org_w
and 	exists (SELECT 	1
		from 	atendimento_pacote x 
		where 	x.nr_atendimento = nr_atendimento_p
		and 	x.nr_seq_proc_origem = a.nr_sequencia);
exception
	when others then
		qt_dependentes_w:= 0;
end;

if (qt_dependentes_w > 0) then
	ie_erro_w:= 'S';
end if;

if (vl_paramvia_acesso_w	= 'S') and (ie_via_acesso_w IS NOT NULL AND ie_via_acesso_w::text <> '') then
	tx_proc_viacesso_w	:= obter_tx_proc_via_acesso(ie_via_acesso_w);
end if;

/* verificar se deve gerar taxa de exame para o procedimento */

if (ie_erro_w = 'N') then
	begin
	select	a.cd_taxa_exame,
		a.tx_procedimento,
		a.ie_criterio_taxa,
		b.ie_classificacao,
		a.ie_origem_taxa
  	into STRICT 	cd_taxa_exame_w,
		tx_procedimento_w,
		ie_criterio_taxa_w,
		ie_classificacao_w,
		ie_origem_taxa_w
  	from 	convenio_taxa_exame a,
		procedimento b
	where	a.cd_taxa_exame		= b.cd_procedimento
	and	a.ie_origem_proced	= b.ie_origem_proced
 	and 	a.cd_estabelecimento 	= cd_estabelecimento_w
   	and 	a.cd_convenio        	= cd_convenio_w
   	and 	a.cd_categoria       	= cd_categoria_w
   	and 	coalesce(a.cd_procedimento,cd_procedimento_p) = cd_procedimento_p
	and 	coalesce(a.nr_seq_proc_interno, coalesce(nr_seq_proc_interno_w,0)) = coalesce(nr_seq_proc_interno_w,0)
	and	a.ie_evento_calculo	= 1
	and	coalesce(a.ie_situacao, 'A') = 'A';
	exception
     		when others then
          		ie_taxa_exame_w := 'N';
	end;
			
end if;

select	count(*)
into STRICT	qt_registros_w
from	procedimento_paciente
where	nr_seq_proc_princ	= nr_seq_propaci_p
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	cd_procedimento		= cd_taxa_exame_w;

if (ie_erro_w = 'N') 	and (ie_taxa_exame_w = 'S') and (qt_registros_w 	= 0) then
	begin
	if (coalesce(ie_via_acesso_w::text, '') = '') then
		/*os60881 - andre regra da via de acesso*/

		select  obter_regra_via_acesso(cd_taxa_exame_w, ie_origem_taxa_w, cd_estabelecimento_w, cd_convenio_w)
		into STRICT    ie_via_acesso_w
		;
	end if;
	
	SELECT * FROM consiste_medico_executor(cd_estabelecimento_w, cd_convenio_w, cd_setor_atendimento_w, cd_taxa_exame_w, ie_origem_taxa_w, ie_tipo_atendimento_w, nr_seq_exame_w, null, ie_medico_taxa_w, cd_cgc_taxa_w, cd_medico_regra_w, cd_profissional_w, null, dt_procedimento_p, nr_seq_classificacao_w, ie_origem_inf_w, cd_cgc_laboratorio_w, cd_setor_prescricao_w) INTO STRICT ie_medico_taxa_w, cd_cgc_taxa_w, cd_medico_regra_w, cd_profissional_w;

	/* ie_medico_taxa_w dominio 77 n-nao pode ter,o-opcional,x-obrigatorio */

	if (ie_medico_taxa_w = 'X') then
		cd_medico_taxa_w := cd_medico_executor_w;
	elsif (ie_medico_taxa_w = 'F') then
		cd_medico_taxa_w := cd_medico_regra_w;
	else
		cd_medico_taxa_w := null;
	end if;
	
	if (ie_atualizar_regra_uso_porte_w = 'S') then
		select	max(obter_se_uso_qtde_proc(nr_atendimento_p, cd_taxa_exame_w, ie_origem_proced_w,
				coalesce(qt_lanc_taxa_w,qt_procedimento_w), cd_medico_taxa_w, cd_setor_atendimento_w, dt_procedimento_p,
				'3', nr_seq_propaci_p, ie_via_acesso_w, 0, nr_seq_proc_interno_w, cd_categoria_w, '', nr_seq_exame_w))
		into STRICT	ds_erro_ww
		;

		if (ds_erro_ww <> '') or (ds_erro_ww IS NOT NULL AND ds_erro_ww::text <> '') then
			nr_sequencia_w := 0;
			goto final;
		end if;
	end if;

	select 	nextval('procedimento_paciente_seq')
	into STRICT 	nr_sequencia_w
	;	

	insert into procedimento_paciente(nr_sequencia,nr_atendimento, dt_entrada_unidade, cd_procedimento, dt_procedimento, qt_procedimento,
		dt_atualizacao, nm_usuario, cd_convenio, cd_categoria, vl_procedimento, vl_medico,
		vl_anestesista, vl_materiais, dt_acerto_conta, vl_auxiliares, vl_custo_operacional,
		tx_medico, tx_anestesia, nr_doc_convenio, dt_conta, cd_setor_atendimento,
		ie_origem_proced, tx_procedimento, ie_valor_informado, nr_prescricao, dt_prescricao,
		nr_cirurgia, cd_medico_executor, cd_medico, cd_procedimento_princ,
		dt_procedimento_princ, nr_seq_proc_princ,cd_cgc_prestador,qt_porte_anestesico,
		nr_seq_atepacu, ie_auditoria, ie_via_acesso, cd_senha, cd_pessoa_fisica)
	values (nr_sequencia_w,nr_atendimento_p, dt_entrada_unidade_p, cd_taxa_exame_w, dt_procedimento_p,
		coalesce(qt_lanc_taxa_w,qt_procedimento_w), dt_atualizacao_w, 'Tasy', cd_convenio_w, cd_categoria_w, 0, 0, 0, 0,
		null, 0, 0, 0, 0, nr_doc_convenio_w, dt_procedimento_p,
		cd_setor_atendimento_w,ie_origem_proced_w,tx_proc_viacesso_w,'N',nr_prescricao_w,dt_prescricao_w,
		nr_cirurgia_org_w,cd_medico_taxa_w,cd_medico_w,cd_procedimento_p,
		dt_procedimento_p, nr_sequencia_org_w,cd_cgc_taxa_w,qt_porte_anestesico_w, 
		nr_seq_atepacu_w, ie_auditoria_w, ie_via_acesso_w, cd_senha_w, cd_profissional_w);
	if	ie_classificacao_w = '1' then
		CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w,	'Tasy');
	else
		CALL atualiza_preco_servico(nr_sequencia_w, 'Tasy');
	end if;
		
	exception
	when others then
		ie_taxa_exame_w := 'N';
	end;
end if;

/* porte anestesico */


/* obter parametros do porte anestesico */

if (ie_erro_w = 'N') then
	begin
	begin
	select vl_parametro_padrao
  	into STRICT	ie_maior_porte_w
  	from	funcao_parametro
 	where	cd_funcao    = 81
   	and	nr_sequencia = 7;
	exception
		when 	others then
      		ie_maior_porte_w := 'S';
	end;
	
	
	select 	max(ie_calc_porte_estab)
	into STRICT	ie_calc_porte_estab_w
	from 	convenio_estabelecimento
	where 	cd_convenio = cd_convenio_w
	and 	cd_estabelecimento = cd_estabelecimento_w;
	
	begin
	select	coalesce(ie_calc_porte_estab_w, ie_calc_porte),
		CASE WHEN coalesce(coalesce(ie_calc_porte_estab_w, ie_calc_porte)::text, '') = '' THEN ie_maior_porte_w WHEN coalesce(ie_calc_porte_estab_w, ie_calc_porte)='G' THEN ie_maior_porte_w WHEN coalesce(ie_calc_porte_estab_w, ie_calc_porte)='C' THEN 'N' WHEN coalesce(ie_calc_porte_estab_w, ie_calc_porte)='M' THEN 'S' WHEN coalesce(ie_calc_porte_estab_w, ie_calc_porte)='T' THEN 'N'  ELSE ie_maior_porte_w END
	into STRICT	ie_calc_porte_w, 
		ie_maior_porte_w
	from	 convenio
	where	 cd_convenio = cd_convenio_w;
	end;
	end;
end if;

/* elemar - 26/07/2004 - porte especial*/

if (ie_erro_w = 'N') 		and (ie_calc_porte_w in ('E','Z')) 	then
	ie_regra_porte_w := gerar_taxa_sala_cir_esp(nr_sequencia_org_w, 'Tasy', ie_regra_porte_w);
	if (ie_regra_porte_w = 'S') or (ie_calc_porte_w = 'E') then
		goto final;
	end if;
end if;

if (ie_erro_w = 'N') and (ie_calc_porte_w = 'F') then
	ie_regra_porte_w := gerar_taxa_sala_cir_esp_porte(nr_sequencia_org_w, 'Tasy', ie_regra_porte_w);
	if (ie_regra_porte_w = 'S') or (ie_calc_porte_w = 'E') then
		goto final;
	end if;
end if;

if (ie_erro_w = 'N') 		and (ie_calc_porte_w = 'D') and (coalesce(nr_cirurgia_w,0) > 0) and (coalesce(nr_sequencia_org_w,0) > 0)then
	CALL gerar_taxa_sala_grupo_proc(nr_sequencia_org_w,nm_usuario_p);
	goto final; 	
end if;

if (ie_erro_w = 'N') 		and (ie_calc_porte_w = 'B') 	then
	goto final;
end if;

/* obter a edicao do convenio  */



/* ricardo 07/11/2006 - nova function para buscar a edicao do procedimento
if	(ie_erro_w = 'N') then
	begin
	select 	cd_edicao_amb
  	into	cd_edicao_amb_w
  	from	convenio_amb
 	where	cd_estabelecimento  = cd_estabelecimento_w
   	and	cd_convenio         = cd_convenio_w
   	and	cd_categoria        = cd_categoria_w
   	and	nvl(ie_situacao,'A')= 'A'
   	and	dt_inicio_vigencia  =
       		(select max(a.dt_inicio_vigencia)
          		from	convenio_amb a
         		where	a.cd_estabelecimento  	= cd_estabelecimento_w
           		and	a.cd_convenio         	= cd_convenio_w
           		and	a.cd_categoria        	= cd_categoria_w
			and	nvl(ie_situacao,'A')	= 'A'
           		and	a.dt_inicio_vigencia 	<= dt_procedimento_p);
	exception
     		when 	others then
          		ie_taxa_porte_w := 'N';
	end;
end if;

*/
if (ie_erro_w = 'N') then
	begin

	select	obter_edicao(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, dt_procedimento_p, cd_procedimento_p)
	into STRICT	cd_edicao_amb_w
	;
	exception
     		when 	others then
          		ie_taxa_porte_w := 'N';
	end;
end if;

if (coalesce(nr_seq_ajuste_proc_w,0) > 0) then
	select 	coalesce(max(cd_edicao_amb),0)
	into STRICT	cd_edicao_proc_w
	from 	regra_ajuste_proc
	where 	nr_sequencia = nr_seq_ajuste_proc_w;
end if;

if (cd_edicao_proc_w > 0) and (cd_edicao_proc_w <> cd_edicao_amb_w) then
	cd_edicao_amb_w:= cd_edicao_proc_w;
end if;

/* obter o porte anestesico */

if (ie_erro_w = 'N') 	and (ie_taxa_porte_w = 'S') then
	begin
	select 	coalesce(a.qt_porte_anestesico,99)
  	into STRICT	qt_porte_anestesico_w
  	from	preco_amb a
 	where	a.cd_edicao_amb      = cd_edicao_amb_w
   	and	a.cd_procedimento    = cd_procedimento_p
  	and coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')	=
		(SELECT max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
			from preco_amb b
			where b.cd_edicao_amb		= cd_edicao_amb_w
			and	b.cd_procedimento		= cd_procedimento_p
			and	coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')	<= dt_procedimento_p);
	exception
	  	when 	others then
			begin

			select	max(ie_origem_proced)
			into STRICT	ie_origem_proced_edicao_w
			from	edicao_amb
			where	cd_edicao_amb	= cd_edicao_amb_w;


			if (cd_edicao_amb_w = 2004) or (ie_origem_proced_edicao_w = 5) then
				begin
				
				select	coalesce(max(ie_data_vig_cbhpm),'N')
				into STRICT	ie_data_vig_cbhpm_w
				from	parametro_faturamento
				where	cd_estabelecimento = cd_estabelecimento_w;
				
				if (ie_data_vig_cbhpm_w = 'N') then
					select coalesce(max(a.nr_porte_anest),99)
					into STRICT	qt_porte_anestesico_w
					from	cbhpm_preco a
					where	a.cd_procedimento	= cd_procedimento_p
					and coalesce(a.dt_vigencia,clock_timestamp() - interval '3650 days')	=
						(SELECT max(coalesce(b.dt_vigencia,clock_timestamp() - interval '3650 days'))
							from cbhpm_preco b
							where	b.cd_procedimento		= cd_procedimento_p
							and	coalesce(b.dt_vigencia,clock_timestamp() - interval '3650 days')	<= dt_procedimento_p);
				else
					select	obter_dados_preco_proc(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_edicao_amb_w,
							cd_procedimento_p, ie_origem_proced_w, dt_procedimento_p, 'PN')
					into STRICT	qt_porte_anestesico_w
					;
				end if;

				if (nr_cirurgia_w = 0) and (varPorteAnestZeroCbhpm_w = 'N') then
					select	CASE WHEN qt_porte_anestesico_w=0 THEN  99  ELSE qt_porte_anestesico_w END
					into STRICT	qt_porte_anestesico_w
					;
				end if;			

				exception
	  				when 	others then
          					ie_taxa_porte_w := 'N';
				end;
			else
          			ie_taxa_porte_w := 'N';
			end if;
			end;
	end;
end if;

/* obter a taxa para o procedimento */

if (ie_erro_w = 'N') 		and (ie_taxa_porte_w = 'S') 	and (qt_porte_anestesico_w < 99)  	then
	begin
	
	select	max(coalesce(cd_tipo_acomodacao,0))
	into STRICT	cd_tipo_acomodacao_w
	from	atend_paciente_unidade
	where	nr_seq_interno 	=	(SELECT	max(nr_seq_atepacu)
					from	procedimento_paciente
					where	nr_sequencia = nr_seq_propaci_p);
	
	SELECT * FROM define_taxa_porte(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, qt_porte_anestesico_w, cd_setor_atendimento_w, ie_tipo_atendimento_w, cd_taxa_porte_w, ie_origem_proced_w, cd_tipo_acomodacao_w, nr_seq_proc_interno_ww, qt_lanc_taxa_w) INTO STRICT cd_taxa_porte_w, ie_origem_proced_w, nr_seq_proc_interno_ww, qt_lanc_taxa_w;


	end;
end if;

/* exclui lancamentos automaticos gerados pela taxa anterior quando o procedimento e calculado */


/* implementado em 08/10/2003 para hdh que gera taxa de instrumental a partir da taxa de porte */

if (ie_erro_w = 'N') then
	select 	max(x.ie_tipo_regra)
	into STRICT	ie_tipo_regra_w
	from 	convenio_taxa_cirurgia x
	where 	x.cd_estabelecimento  	= cd_estabelecimento_w
	and 	x.cd_convenio         	= cd_convenio_w
	and 	x.cd_categoria        	= cd_categoria_w
	and 	x.nr_porte_anestesico 	= qt_porte_anestesico_w;

	if (ie_tipo_regra_w	= 'C') then
		begin
		delete from procedimento_paciente a
		where a.nr_atendimento		= nr_atendimento_p
		and	a.nr_seq_proc_princ 	in 	-- Substituido o "=" pelo "in" OS 175909 Fabricio em 30/10/2009
		(SELECT x.nr_sequencia from procedimento_paciente x
			where	x.nr_atendimento		= nr_atendimento_p
	  		and	x.cd_procedimento		= cd_taxa_porte_w
	  		and	x.nr_seq_proc_princ		= nr_sequencia_org_w);
		exception
			when others then
			ie_taxa_porte_w := ie_taxa_porte_w;
		end;
	elsif (ie_tipo_regra_w	= 'A') then
		begin
		delete from	procedimento_paciente a
		where		a.nr_atendimento		= nr_atendimento_p
		and	a.nr_seq_proc_princ 	in
			(SELECT a.nr_seq_proc_princ
			from procedimento_paciente a
			where		a.nr_atendimento 		= nr_atendimento_p
			and		((a.cd_procedimento in (select 	x.cd_taxa_cirurgia
	  				from 		convenio_taxa_cirurgia x
 					where 		x.cd_estabelecimento  	= cd_estabelecimento_w
	   				and 		x.cd_convenio         	= cd_convenio_w
   					and 		x.cd_categoria        	= cd_categoria_w
					and		x.ie_tipo_regra		= 'A'
   					and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)) or (a.nr_seq_proc_interno in (select 	x.nr_seq_proc_interno
	  				from 		convenio_taxa_cirurgia x
 					where 		x.cd_estabelecimento  	= cd_estabelecimento_w
	   				and 		x.cd_convenio         	= cd_convenio_w
   					and 		x.cd_categoria        	= cd_categoria_w
					and		x.ie_tipo_regra		= 'A'
   					and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w))))
		and	((a.cd_procedimento in (select 	x.cd_taxa_cirurgia
			from 		convenio_taxa_cirurgia x
			where 		x.cd_estabelecimento  	= cd_estabelecimento_w
			and 		x.cd_convenio         	= cd_convenio_w
			and 		x.cd_categoria        	= cd_categoria_w
			and		x.ie_tipo_regra		= 'A'
			and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)) or (a.nr_seq_proc_interno in (select 	x.nr_seq_proc_interno
			from 		convenio_taxa_cirurgia x
			where 		x.cd_estabelecimento  	= cd_estabelecimento_w
			and 		x.cd_convenio         	= cd_convenio_w
			and 		x.cd_categoria        	= cd_categoria_w
			and		x.ie_tipo_regra		= 'A'
			and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)))
		and	not exists (	select	1
						from	procedimento_paciente x
						where	x.nr_seq_proc_princ = a.nr_sequencia); /*esse not exists foi feito pelo martini*/
		exception
			when others then
			ie_taxa_porte_w := ie_taxa_porte_w;
		end;
	end if;



	/* exclui a taxa anterior quando o procedimento e calculado */

	begin
	delete	from	procedimento_paciente
	where	nr_atendimento		= nr_atendimento_p
	and	cd_procedimento		= cd_taxa_porte_w
	and	nr_seq_proc_princ	= nr_sequencia_org_w;
	exception
		when others then
		ie_taxa_porte_w := ie_taxa_porte_w;
	end;
end if;

/* gravar o porte independente de ser o maior */

if (ie_erro_w = 'N') 		and (cd_taxa_porte_w IS NOT NULL AND cd_taxa_porte_w::text <> '') 	and (ie_maior_porte_w = 'N') 	then
   	begin
	if (coalesce(ie_via_acesso_w::text, '') = '') then
		/*os60881 - andre regra da via de acesso*/

		select  obter_regra_via_acesso(cd_taxa_porte_w, ie_origem_proced_w, cd_estabelecimento_w, cd_convenio_w)
		into STRICT    ie_via_acesso_w
		;
	end if;

	SELECT * FROM consiste_medico_executor(
				cd_estabelecimento_w, cd_convenio_w, cd_setor_atendimento_w, cd_taxa_porte_w, ie_origem_proced_w, ie_tipo_atendimento_w, nr_seq_exame_w, null, ie_medico_taxa_w, cd_cgc_taxa_w, cd_medico_regra_w, cd_profissional_w, null, dt_procedimento_p, nr_seq_classificacao_w, ie_origem_inf_w, cd_cgc_laboratorio_w, cd_setor_prescricao_w) INTO STRICT ie_medico_taxa_w, cd_cgc_taxa_w, cd_medico_regra_w, cd_profissional_w;
				
	if (ie_medico_taxa_w = 'X') then
		cd_medico_taxa_w := cd_medico_executor_w;
	elsif (ie_medico_taxa_w = 'F') then
		cd_medico_taxa_w := cd_medico_regra_w;
	else
		cd_medico_taxa_w := null;
	end if;
	
	if (ie_cons_forma_reg_qtd_w = 'S') and (coalesce(nr_cirurgia_org_w,0) > 0) and (Obter_funcao_ativa in (900, 872)) then
		
		select	max(ie_forma_apresentacao)
		into STRICT	ie_forma_apresentacao_w
		from	procedimento
		where	cd_procedimento		= cd_taxa_porte_w
		and	ie_origem_proced	= ie_origem_proced_w;
		
		select	max(dt_inicio_real),
			max(dt_termino),
			max(nr_seq_pepo)
		into STRICT	dt_inicio_real_w,
			dt_termino_w,
			nr_seq_pepo_w
		from	cirurgia
		where	nr_cirurgia = nr_cirurgia_org_w;
		
		if (coalesce(nr_seq_pepo_w,0) > 0) then
			select 	max(dt_registro)
			into STRICT	dt_inicio_processo_w
			from   	evento_cirurgia_paciente a,
				evento_cirurgia b
			where  	a.nr_seq_evento = b.nr_sequencia
			and	a.nr_seq_pepo 	= nr_seq_pepo_w
			and	coalesce(b.ie_situacao,'A') = 'A'
			and	coalesce(a.ie_situacao,'A') = 'A'
			and	coalesce(b.ie_inicio_processo_cirurgico,'N') = 'S';

			select 	max(dt_registro)
			into STRICT	dt_fim_processo_w
			from   	evento_cirurgia_paciente a,
				evento_cirurgia b
			where  	a.nr_seq_evento = b.nr_sequencia
			and	a.nr_seq_pepo 	= nr_seq_pepo_w
			and	coalesce(b.ie_situacao,'A') = 'A'
			and	coalesce(a.ie_situacao,'A') = 'A'
			and	coalesce(b.ie_fim_processo_cirurgico,'N') = 'S';
			
			if (dt_inicio_processo_w IS NOT NULL AND dt_inicio_processo_w::text <> '') and (dt_fim_processo_w IS NOT NULL AND dt_fim_processo_w::text <> '') then
				dt_inicio_real_w := dt_inicio_processo_w;
				dt_termino_w	 := dt_fim_processo_w;
			end if;	
		end if;	
		
		if (coalesce(ie_gera_taxa_porte_w, 'S') = 'N') then
			select 	max(dt_registro)
			into STRICT	dt_fim_processo_w
			from   	evento_cirurgia_paciente a,
					evento_cirurgia b
			where  	a.nr_seq_evento = b.nr_sequencia
			and (a.nr_seq_pepo 	= nr_seq_pepo_w
			or nr_cirurgia = nr_cirurgia_org_w)
			and	coalesce(b.ie_situacao,'A') = 'A'
			and	coalesce(a.ie_situacao,'A') = 'A'
			and	coalesce(b.IE_FIM_TAXA_SALA_PORTE,'N') = 'S';
				
			if (dt_fim_processo_w IS NOT NULL AND dt_fim_processo_w::text <> '') then
				dt_termino_w := dt_fim_processo_w;
				
				select 	max(dt_registro)
				into STRICT	dt_inicio_processo_w
				from   	evento_cirurgia_paciente a,
						evento_cirurgia b
				where  	a.nr_seq_evento = b.nr_sequencia
				and (a.nr_seq_pepo 	= nr_seq_pepo_w
				or nr_cirurgia = nr_cirurgia_org_w)
				and	coalesce(b.ie_situacao,'A') = 'A'
				and	coalesce(a.ie_situacao,'A') = 'A'
				and	coalesce(b.IE_INICIA_TAXA_SALA_PORTE,'N') = 'S';
				
				if (dt_inicio_processo_w IS NOT NULL AND dt_inicio_processo_w::text <> '') then
					dt_inicio_real_w := dt_inicio_processo_w;
				end if;	
			end if;	
		end if;	
		
		if (ie_forma_apresentacao_w in (2,3,10,11,12,13)) then		
			select	coalesce(OBTER_QTE_PROCED_CIRURGIA(cd_taxa_porte_w, ie_origem_proced_w, dt_termino_w, dt_inicio_real_w),0)
			into STRICT	qt_procedimento_w
			;
		end if;
	end if;
	
	if (ie_atualizar_regra_uso_porte_w = 'S') then

		select	max(obter_se_uso_qtde_proc(nr_atendimento_p, cd_taxa_porte_w, ie_origem_proced_w,
				coalesce(qt_lanc_taxa_w,qt_procedimento_w), cd_medico_taxa_w, cd_setor_atendimento_w, dt_procedimento_p,
				'3', nr_seq_propaci_p, ie_via_acesso_w, 0, nr_seq_proc_interno_w, cd_categoria_w, '', nr_seq_exame_w))
		into STRICT	ds_erro_ww
		;

		if (ds_erro_ww <> '') or (ds_erro_ww IS NOT NULL AND ds_erro_ww::text <> '') then
			nr_sequencia_w := 0;
			goto final;
		end if;
	end if;

	select 	nextval('procedimento_paciente_seq')
	into STRICT 	nr_sequencia_w
     	;
	begin

	insert into procedimento_paciente(nr_sequencia,nr_atendimento, dt_entrada_unidade, cd_procedimento, dt_procedimento, qt_procedimento,
	dt_atualizacao, nm_usuario, cd_convenio, cd_categoria, vl_procedimento, vl_medico,
	vl_anestesista, vl_materiais, dt_acerto_conta, vl_auxiliares, vl_custo_operacional,
	tx_medico, tx_anestesia, nr_doc_convenio, dt_conta, cd_setor_atendimento,
	ie_origem_proced, tx_procedimento, ie_valor_informado, nr_prescricao, dt_prescricao,
	nr_cirurgia, cd_medico_executor, cd_medico, cd_procedimento_princ,
	dt_procedimento_princ, nr_seq_proc_princ,cd_cgc_prestador,qt_porte_anestesico, nr_seq_atepacu, ie_auditoria,
	ie_via_acesso, cd_senha, cd_pessoa_fisica,nr_seq_proc_interno)
	values (nr_sequencia_w,nr_atendimento_p, dt_entrada_unidade_p, cd_taxa_porte_w, dt_procedimento_p,
	coalesce(qt_lanc_taxa_w,qt_procedimento_w), dt_atualizacao_w, 'Tasy', cd_convenio_w, cd_categoria_w, 0, 0, 0, 0,
	null, 0, 0, 0, 0, nr_doc_convenio_w, dt_procedimento_p,
	cd_setor_atendimento_w,ie_origem_proced_w,tx_proc_viacesso_w,'N',nr_prescricao_w,dt_prescricao_w,
	nr_cirurgia_org_w,cd_medico_taxa_w,cd_medico_w,cd_procedimento_p,
	dt_procedimento_p, nr_sequencia_org_w,cd_cgc_taxa_w,qt_porte_anestesico_w, nr_seq_atepacu_w , ie_auditoria_w,
	ie_via_acesso_w, cd_senha_w, cd_profissional_w, nr_seq_proc_interno_ww);
	CALL atualiza_preco_servico(nr_sequencia_w,'Tasy');
	exception
		when others then
      		ie_taxa_porte_w := 'N';
	end;	

	
	if (ie_taxa_porte_w <> 'N') then
	
	begin
	insert into hist_taxa_sala_cirurgica(
		dt_atualizacao,
		dt_atualizacao_nrec,     
		nm_usuario,              
		nm_usuario_nrec,         
		nr_atendimento,         
		nr_cirurgia,             
		nr_seq_proc_taxa,        
		nr_seq_propac_cir,       
		nr_sequencia,            
		qt_porte_anest)
	values (
		clock_timestamp(),
		clock_timestamp(),
		nm_usuario_p,
		nm_usuario_p,
		nr_atendimento_p,
		nr_cirurgia_w,
		nr_sequencia_w,
		nr_seq_propaci_p,
		nextval('hist_taxa_sala_cirurgica_seq'),
		qt_porte_anestesico_w);
		exception
		when others then
			null;
		end;
		
		
		CALL gerar_lancamento_automatico(
				nr_atendimento_p,
				null,
				34,
				'Tasy',
				nr_sequencia_w,
				null,
				null,null,null,null);
	end if;

	end;
end if;

/* gravar o maior porte */

if (ie_erro_w = 'N') 		and (ie_taxa_porte_w = 'S') 	and (cd_taxa_porte_w IS NOT NULL AND cd_taxa_porte_w::text <> '') and (ie_maior_porte_w = 'S') 	then
   	begin

	/* excluir os menores portes */


	/* exclui lancamentos automaticos gerados pela taxa anterior quando o procedimento e calculado */


	/* implementado em 08/10/2003 para hdh que gera taxa de instrumental a partir da taxa de porte */

	begin
	delete from	procedimento_paciente x
	where x.nr_atendimento		= nr_atendimento_p
	and	x.nr_seq_proc_princ 	=
		(SELECT a.nr_sequencia from procedimento_paciente a
		where		a.nr_atendimento 		= nr_atendimento_p
		and		a.dt_entrada_unidade	= dt_entrada_unidade_p
		and		a.nr_cirurgia		= nr_cirurgia_w
		and		((a.cd_procedimento in (select 	x.cd_taxa_cirurgia
  				from 		convenio_taxa_cirurgia x
 				where 		x.cd_estabelecimento  	= cd_estabelecimento_w
   				and 		x.cd_convenio         	= cd_convenio_w
   				and 		x.cd_categoria        	= cd_categoria_w
				and		x.ie_tipo_regra		= 'C'
   				and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)) or (a.nr_seq_proc_interno in (select 	coalesce(x.nr_Seq_proc_interno,0)
  				from 		convenio_taxa_cirurgia x
 				where 		x.cd_estabelecimento  	= cd_estabelecimento_w
   				and 		x.cd_convenio         	= cd_convenio_w
   				and 		x.cd_categoria        	= cd_categoria_w
				and			x.ie_tipo_regra		= 'C'
   				and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)))
		and exists (select 	w.nr_interno_conta
				from		conta_paciente w
				where		w.nr_interno_conta	= a.nr_interno_conta
				and		w.ie_status_acerto	= 1));
	exception
     		when 	others then
          		ie_taxa_porte_w := ie_taxa_porte_w;
	end;

	begin
	delete from	procedimento_paciente x
	where x.nr_atendimento		= nr_atendimento_p
	and	x.nr_seq_proc_princ 	in
		(SELECT a.nr_sequencia from procedimento_paciente a
		where		a.nr_atendimento 		= nr_atendimento_p
		and		a.dt_entrada_unidade	= dt_entrada_unidade_p
		and		((a.cd_procedimento in (select 	x.cd_taxa_cirurgia
  				from 		convenio_taxa_cirurgia x
 				where 		x.cd_estabelecimento  	= cd_estabelecimento_w
   				and 		x.cd_convenio         	= cd_convenio_w
   				and 		x.cd_categoria        	= cd_categoria_w
				and		x.ie_tipo_regra		= 'A'
   				and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)) or (a.nr_Seq_proc_interno in (select 	coalesce(x.nr_Seq_proc_interno,0)
  				from 		convenio_taxa_cirurgia x
 				where 		x.cd_estabelecimento  	= cd_estabelecimento_w
   				and 		x.cd_convenio         	= cd_convenio_w
   				and 		x.cd_categoria        	= cd_categoria_w
				and		x.ie_tipo_regra		= 'A'
   				and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)))
		and exists (select 	w.nr_interno_conta
				from		conta_paciente w
				where		w.nr_interno_conta	= a.nr_interno_conta
				and		w.ie_status_acerto	= 1));
	exception
     		when 	others then
          		ie_taxa_porte_w := ie_taxa_porte_w;
	end;


	/* excluir os menores portes */

	begin
	select 	count(*)
	into STRICT	qt_mat_dependente_w
	from  	material_atend_paciente q
	where	q.nr_atendimento 	= nr_atendimento_p
	and	q.dt_entrada_unidade	= dt_entrada_unidade_p
	and 	q.nr_seq_regra_lanc > 0
	and 	q.nr_seq_proc_princ in (
					SELECT 		a.nr_sequencia
					from 		procedimento_paciente a
					where		a.nr_atendimento 		= nr_atendimento_p
					and		a.dt_entrada_unidade	= dt_entrada_unidade_p
					and		a.nr_cirurgia		= nr_cirurgia_w
					and		((a.cd_procedimento in (SELECT x.cd_taxa_cirurgia
									from 	convenio_taxa_cirurgia x
									where 	x.cd_estabelecimento  	= cd_estabelecimento_w
									and 	x.cd_convenio         	= cd_convenio_w
									and 	x.cd_categoria        	= cd_categoria_w
									and	x.ie_tipo_regra		= 'C'
									and 	x.nr_porte_anestesico 	<= qt_porte_anestesico_w)) or (a.nr_seq_proc_interno in (select coalesce(x.nr_Seq_proc_interno,0)
									from 	convenio_taxa_cirurgia x
									where 	x.cd_estabelecimento  	= cd_estabelecimento_w
									and 	x.cd_convenio         	= cd_convenio_w
									and 	x.cd_categoria        	= cd_categoria_w
									and	x.ie_tipo_regra		= 'C'
									and 	x.nr_porte_anestesico 	<= qt_porte_anestesico_w))) 
					and 	exists (select w.nr_interno_conta
							from	conta_paciente w
							where	w.nr_interno_conta	= a.nr_interno_conta
							and	w.ie_status_acerto	= 1))
	and 	exists (select s.nr_interno_conta
							from	conta_paciente s
							where	s.nr_interno_conta	= q.nr_interno_conta
							and	s.ie_status_acerto	= 1);
							
	if (qt_mat_dependente_w > 0) then
		delete
		from  	material_atend_paciente q
		where	q.nr_atendimento 	= nr_atendimento_p
		and	q.dt_entrada_unidade	= dt_entrada_unidade_p
		and 	q.nr_seq_regra_lanc > 0
		and 	q.nr_seq_proc_princ in (
						SELECT 		a.nr_sequencia
						from 		procedimento_paciente a
						where		a.nr_atendimento 		= nr_atendimento_p
						and		a.dt_entrada_unidade	= dt_entrada_unidade_p
						and		a.nr_cirurgia		= nr_cirurgia_w
						and		((a.cd_procedimento in (SELECT x.cd_taxa_cirurgia
										from 	convenio_taxa_cirurgia x
										where 	x.cd_estabelecimento  	= cd_estabelecimento_w
										and 	x.cd_convenio         	= cd_convenio_w
										and 	x.cd_categoria        	= cd_categoria_w
										and	x.ie_tipo_regra		= 'C'
										and 	x.nr_porte_anestesico 	<= qt_porte_anestesico_w)) or (a.nr_seq_proc_interno in (select coalesce(x.nr_Seq_proc_interno,0)
										from 	convenio_taxa_cirurgia x
										where 	x.cd_estabelecimento  	= cd_estabelecimento_w
										and 	x.cd_convenio         	= cd_convenio_w
										and 	x.cd_categoria        	= cd_categoria_w
										and	x.ie_tipo_regra		= 'C'
										and 	x.nr_porte_anestesico 	<= qt_porte_anestesico_w))) 
						and 	exists (select w.nr_interno_conta
								from	conta_paciente w
								where	w.nr_interno_conta	= a.nr_interno_conta
								and	w.ie_status_acerto	= 1))
		and 	exists (select s.nr_interno_conta
								from	conta_paciente s
								where	s.nr_interno_conta	= q.nr_interno_conta
								and	s.ie_status_acerto	= 1);
	end if;
	exception
		when others then
		ie_taxa_porte_w := ie_taxa_porte_w;
	end;
	
	begin
	delete from procedimento_paciente a
	where		a.nr_atendimento 		= nr_atendimento_p
	and		a.dt_entrada_unidade	= dt_entrada_unidade_p
	and		a.nr_cirurgia		= nr_cirurgia_w
	and		((a.cd_procedimento in (SELECT 	x.cd_taxa_cirurgia
  			from 		convenio_taxa_cirurgia x
 			where 		x.cd_estabelecimento  	= cd_estabelecimento_w
   			and 		x.cd_convenio         	= cd_convenio_w
   			and 		x.cd_categoria        	= cd_categoria_w
			and		x.ie_tipo_regra		= 'C'
   			and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)) or (a.nr_seq_proc_interno in (select 	coalesce(x.nr_Seq_proc_interno,0)
  			from 		convenio_taxa_cirurgia x
 			where 		x.cd_estabelecimento  	= cd_estabelecimento_w
   			and 		x.cd_convenio         	= cd_convenio_w
   			and 		x.cd_categoria        	= cd_categoria_w
			and		x.ie_tipo_regra		= 'C'
   			and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)))
	and exists (select 	w.nr_interno_conta
			from		conta_paciente w
			where		w.nr_interno_conta	= a.nr_interno_conta
			and		w.ie_status_acerto	= 1);
	exception
     		when 	others then
          		ie_taxa_porte_w := ie_taxa_porte_w;
	end;

	begin
	delete from procedimento_paciente a
	where		a.nr_atendimento 		= nr_atendimento_p
	and		a.dt_entrada_unidade	= dt_entrada_unidade_p
	and		((a.cd_procedimento in (SELECT 	x.cd_taxa_cirurgia
  			from 		convenio_taxa_cirurgia x
 			where 		x.cd_estabelecimento  	= cd_estabelecimento_w
   			and 		x.cd_convenio         	= cd_convenio_w
   			and 		x.cd_categoria        	= cd_categoria_w
			and		x.ie_tipo_regra		= 'A'
   			and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)) or (a.nr_Seq_proc_interno in (select 	coalesce(x.nr_Seq_proc_interno,0)
  			from 		convenio_taxa_cirurgia x
 			where 		x.cd_estabelecimento  	= cd_estabelecimento_w
   			and 		x.cd_convenio         	= cd_convenio_w
   			and 		x.cd_categoria        	= cd_categoria_w
			and		x.ie_tipo_regra		= 'A'
   			and 		x.nr_porte_anestesico 	<= qt_porte_anestesico_w)))
	and exists (select 	w.nr_interno_conta
			from		conta_paciente w
			where		w.nr_interno_conta	= a.nr_interno_conta
			and		w.ie_status_acerto	= 1);
	exception
     		when 	others then
          		ie_taxa_porte_w := ie_taxa_porte_w;
	end;
	end;
end if;

if (ie_erro_w = 'N') 		and (ie_taxa_porte_w = 'S') 	and (cd_taxa_porte_w IS NOT NULL AND cd_taxa_porte_w::text <> '') and (ie_maior_porte_w = 'S') 	then
   	begin
	if (coalesce(ie_via_acesso_w::text, '') = '') then
		/*os60881 - andre regra da via de acesso*/

		select  obter_regra_via_acesso(cd_taxa_porte_w, ie_origem_proced_w, cd_estabelecimento_w, cd_convenio_w)
		into STRICT    ie_via_acesso_w
		;
	end if;

	select 	a.cd_procedimento
	into STRICT		cd_taxa_maior_w
	from 		procedimento_paciente a
	where		a.nr_atendimento 		= nr_atendimento_p
	and		a.dt_entrada_unidade	= dt_entrada_unidade_p
	and 		(a.nr_interno_conta IS NOT NULL AND a.nr_interno_conta::text <> '')
	and		a.nr_cirurgia		= nr_cirurgia_w
	and		((a.cd_procedimento in (SELECT cd_taxa_cirurgia
  			from 		convenio_taxa_cirurgia
 			where 	cd_estabelecimento  = cd_estabelecimento_w
   			and 		cd_convenio         = cd_convenio_w
   			and 		cd_categoria        = cd_categoria_w
   			and 		nr_porte_anestesico > qt_porte_anestesico_w)) or (a.nr_seq_proc_interno in (select coalesce(nr_seq_proc_interno,0)
  			from 		convenio_taxa_cirurgia
 			where 	cd_estabelecimento  = cd_estabelecimento_w
   			and 		cd_convenio         = cd_convenio_w
   			and 		cd_categoria        = cd_categoria_w
   			and 		nr_porte_anestesico > qt_porte_anestesico_w)));
	exception
     		when 	others then
   			begin
			
			if (ie_atualizar_regra_uso_porte_w = 'S') then
			
				select	max(obter_se_uso_qtde_proc(nr_atendimento_p, cd_taxa_porte_w, ie_origem_proced_w,
						coalesce(qt_lanc_taxa_w,qt_procedimento_w), cd_medico_taxa_w, cd_setor_atendimento_w, dt_procedimento_p,
						'3', nr_seq_propaci_p, ie_via_acesso_w, 0, nr_seq_proc_interno_w, cd_categoria_w, '', nr_seq_exame_w))
				into STRICT	ds_erro_ww
				;

				if (ds_erro_ww <> '') or (ds_erro_ww IS NOT NULL AND ds_erro_ww::text <> '') then
					nr_sequencia_w := 0;
					goto final;
				end if;
			end if;
			
	    		select 	nextval('procedimento_paciente_seq')
			into STRICT 		nr_sequencia_w
     			;

			SELECT * FROM consiste_medico_executor(cd_estabelecimento_w, cd_convenio_w, cd_setor_atendimento_w, cd_taxa_porte_w, ie_origem_proced_w, ie_tipo_atendimento_w, nr_seq_exame_w, null, ie_medico_taxa_w, cd_cgc_taxa_w, cd_medico_regra_w, cd_profissional_w, null, dt_procedimento_p, nr_seq_classificacao_w, ie_origem_inf_w, cd_cgc_laboratorio_w, cd_setor_prescricao_w) INTO STRICT ie_medico_taxa_w, cd_cgc_taxa_w, cd_medico_regra_w, cd_profissional_w;

			if (ie_medico_taxa_w = 'X') then
				cd_medico_taxa_w := cd_medico_executor_w;
			elsif (ie_medico_taxa_w = 'F') then
				cd_medico_taxa_w := cd_medico_regra_w;
			else
				cd_medico_taxa_w := null;
			end if;
			
			if (ie_cons_forma_reg_qtd_w = 'S') and (coalesce(nr_cirurgia_org_w,0) > 0) and (Obter_funcao_ativa in (900, 872)) then
				
				select	max(ie_forma_apresentacao)
				into STRICT	ie_forma_apresentacao_w
				from	procedimento
				where	cd_procedimento		= cd_taxa_porte_w
				and	ie_origem_proced	= ie_origem_proced_w;
				
				select	max(dt_inicio_real),
					max(dt_termino),
					max(nr_seq_pepo)
				into STRICT	dt_inicio_real_w,
					dt_termino_w,
					nr_seq_pepo_w
				from	cirurgia
				where	nr_cirurgia = nr_cirurgia_org_w;
				
				if (coalesce(nr_seq_pepo_w,0) > 0) then
					select 	max(dt_registro)
					into STRICT	dt_inicio_processo_w
					from   	evento_cirurgia_paciente a,
						evento_cirurgia b
					where  	a.nr_seq_evento = b.nr_sequencia
					and	a.nr_seq_pepo 	= nr_seq_pepo_w
					and	coalesce(b.ie_situacao,'A') = 'A'
					and	coalesce(a.ie_situacao,'A') = 'A'
					and	coalesce(b.ie_inicio_processo_cirurgico,'N') = 'S';

					select 	max(dt_registro)
					into STRICT	dt_fim_processo_w
					from   	evento_cirurgia_paciente a,
						evento_cirurgia b
					where  	a.nr_seq_evento = b.nr_sequencia
					and	a.nr_seq_pepo 	= nr_seq_pepo_w
					and	coalesce(b.ie_situacao,'A') = 'A'
					and	coalesce(a.ie_situacao,'A') = 'A'
					and	coalesce(b.ie_fim_processo_cirurgico,'N') = 'S';
					
					if (dt_inicio_processo_w IS NOT NULL AND dt_inicio_processo_w::text <> '') and (dt_fim_processo_w IS NOT NULL AND dt_fim_processo_w::text <> '') then
						dt_inicio_real_w := dt_inicio_processo_w;
						dt_termino_w	 := dt_fim_processo_w;
					end if;	
				end if;	
				
				if (coalesce(ie_gera_taxa_porte_w, 'S') = 'N') then
					select 	max(dt_registro)
					into STRICT	dt_fim_processo_w
					from   	evento_cirurgia_paciente a,
							evento_cirurgia b
					where  	a.nr_seq_evento = b.nr_sequencia
					and (a.nr_seq_pepo 	= nr_seq_pepo_w
					or nr_cirurgia = nr_cirurgia_org_w)
					and	coalesce(b.ie_situacao,'A') = 'A'
					and	coalesce(a.ie_situacao,'A') = 'A'
					and	coalesce(b.IE_FIM_TAXA_SALA_PORTE,'N') = 'S';
						
					if (dt_fim_processo_w IS NOT NULL AND dt_fim_processo_w::text <> '') then
						dt_termino_w := dt_fim_processo_w;
						
						select 	max(dt_registro)
						into STRICT	dt_inicio_processo_w
						from   	evento_cirurgia_paciente a,
								evento_cirurgia b
						where  	a.nr_seq_evento = b.nr_sequencia
						and (a.nr_seq_pepo 	= nr_seq_pepo_w
						or nr_cirurgia = nr_cirurgia_org_w)
						and	coalesce(b.ie_situacao,'A') = 'A'
						and	coalesce(a.ie_situacao,'A') = 'A'
						and	coalesce(b.IE_INICIA_TAXA_SALA_PORTE,'N') = 'S';
						
						if (dt_inicio_processo_w IS NOT NULL AND dt_inicio_processo_w::text <> '') then
							dt_inicio_real_w := dt_inicio_processo_w;
						end if;	
					end if;	
				end if;	
				
				if (ie_forma_apresentacao_w in (2,3,10,11,12,13)) then		
					select	coalesce(OBTER_QTE_PROCED_CIRURGIA(cd_taxa_porte_w, ie_origem_proced_w, dt_termino_w, dt_inicio_real_w),0)
					into STRICT	qt_procedimento_w
					;
				end if;
			end if;
			
			begin

			insert into procedimento_paciente(nr_sequencia,nr_atendimento, dt_entrada_unidade, cd_procedimento, dt_procedimento,
				qt_procedimento, dt_atualizacao, nm_usuario, cd_convenio, cd_categoria,
				vl_procedimento, vl_medico, vl_anestesista, vl_materiais, dt_acerto_conta,
				vl_auxiliares, vl_custo_operacional, tx_medico, tx_anestesia,
				nr_doc_convenio, dt_conta, cd_setor_atendimento, ie_origem_proced,
				tx_procedimento, ie_valor_informado, nr_prescricao, dt_prescricao,
				nr_cirurgia, cd_medico_executor, cd_medico,cd_procedimento_princ,
				dt_procedimento_princ, nr_seq_proc_princ,
				cd_cgc_prestador,qt_porte_anestesico, nr_seq_atepacu, ie_auditoria, ie_via_acesso, cd_senha,
				cd_pessoa_fisica, nr_seq_proc_interno)
			values (nr_sequencia_w,nr_atendimento_p, dt_entrada_unidade_p, cd_taxa_porte_w, dt_procedimento_p,
				coalesce(qt_lanc_taxa_w,qt_procedimento_w), dt_atualizacao_w, 'Tasy', cd_convenio_w, cd_categoria_w,
				0, 0, 0, 0, null, 0, 0, 0, 0, nr_doc_convenio_w, dt_procedimento_p,
				cd_setor_atendimento_w,ie_origem_proced_w,tx_proc_viacesso_w,'N',nr_prescricao_w,
				dt_prescricao_w, nr_cirurgia_org_w,cd_medico_taxa_w,cd_medico_w,
				cd_procedimento_p,dt_procedimento_p, nr_sequencia_org_w,
				cd_cgc_taxa_w,qt_porte_anestesico_w, nr_seq_atepacu_w, ie_auditoria_w, ie_via_acesso_w, cd_senha_w,
				cd_profissional_w, nr_seq_proc_interno_ww);
				CALL atualiza_preco_servico(nr_sequencia_w,'Tasy');
			exception
				when others then
      				ie_taxa_porte_w := 'N';
			end;
			if (ie_taxa_porte_w <> 'N') then
				CALL gerar_lancamento_automatico(
						nr_atendimento_p,
						null,
						34,
						'Tasy',
						nr_sequencia_w,
						null,
						null,null,null,null);
			end if;
			end;
	end;
end if;

<<final>>

if (nr_sequencia_w	> 0) then
	CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_taxa_sala_porte (nr_atendimento_p bigint, dt_entrada_unidade_p timestamp, dt_procedimento_p timestamp, cd_procedimento_p bigint, nr_seq_propaci_p bigint, nm_usuario_p text) FROM PUBLIC;

