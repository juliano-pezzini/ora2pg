-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_valida_ocor_aut_exec_solic ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_requisicao_p bigint, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Validar a regra  executor guia X solicitante requisicao para as ocorrencias combinadas
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  x]  Objetos do dicionario [ ] Tasy (Delphi/Java) [   ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 

ie_gerar_ocorrencia_w		varchar(2);
ie_tipo_ocorrencia_w		varchar(2);
ie_regra_w			varchar(2);
qt_tipo_quantidade_w		pls_validacao_aut_exec_sol.qt_tipo_quantidade%type;	
ie_tipo_qtde_w			pls_validacao_aut_exec_sol.ie_tipo_qtde%type;
dt_ref_final_w			timestamp;
dt_ref_inicial_w		timestamp;
nr_seq_req_item_w		bigint;
cd_procedimento_w		pls_requisicao_proc.cd_procedimento%type;
ie_origem_proced_w		pls_requisicao_proc.ie_origem_proced%type;
qt_solicitada_w			pls_requisicao_proc.qt_solicitado%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_material_w		pls_material.nr_sequencia%type;
nr_seq_oc_benef_w		bigint;
cd_medico_solicitante_w		pessoa_fisica.cd_pessoa_fisica%type;
dt_requisicao_w			pls_requisicao.dt_requisicao%type;
qt_filtro_ocor_w		bigint;
ie_restricao_itens_w		varchar(2);

C01 CURSOR FOR
	SELECT	qt_tipo_quantidade,
		ie_tipo_qtde
	from	pls_validacao_aut_exec_sol
	where	nr_seq_ocor_aut_combinada	= nr_seq_ocor_combinada_p
	and	ie_situacao			= 'A';

C02 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		qt_solicitado
	from	pls_requisicao_proc
	where	nr_seq_requisicao	= nr_seq_requisicao_p;

C03 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_material,
		qt_solicitado
	from	pls_requisicao_mat
	where	nr_seq_requisicao	= nr_seq_requisicao_p;

	

BEGIN

if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
	begin
		select	cd_medico_solicitante,
			dt_requisicao,
			nr_seq_prestador,
			nr_seq_segurado
		into STRICT	cd_medico_solicitante_w,
			dt_requisicao_w,
			nr_seq_prestador_w,
			nr_seq_segurado_w
		from	pls_requisicao
		where	nr_sequencia	= nr_seq_requisicao_p;
	exception
	when others then
		cd_medico_solicitante_w	:= null;
		dt_requisicao_w		:= null;
	end;
	
	open C01;
	loop
	fetch C01 into	
		qt_tipo_quantidade_w,
		ie_tipo_qtde_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin		
		dt_ref_inicial_w	:= dt_requisicao_w;	
		
		if (ie_tipo_qtde_w	= 'D') then				   	
			dt_ref_final_w		:= establishment_timezone_utils.startofday(dt_ref_inicial_w);
			dt_ref_inicial_w	:= establishment_timezone_utils.startofday(dt_ref_inicial_w - (qt_tipo_quantidade_w - 1));
		elsif (ie_tipo_qtde_w	= 'M') then			
			dt_ref_final_w		:= establishment_timezone_utils.startofday(dt_ref_inicial_w);				
			dt_ref_inicial_w	:= (add_months(dt_ref_inicial_w, - qt_tipo_quantidade_w) + 1);
		elsif (ie_tipo_qtde_w	= 'A') then			
			dt_ref_final_w		:= establishment_timezone_utils.startofday(dt_ref_inicial_w);
			dt_ref_inicial_w	:= (add_months(dt_ref_inicial_w, - qt_tipo_quantidade_w * 12) + 1); 		
		elsif (ie_tipo_qtde_w = 'H') then
			dt_ref_final_w		:= dt_ref_inicial_w;
			dt_ref_inicial_w	:= dt_ref_final_w - (qt_tipo_quantidade_w/24);
		end if;
		
		open C02;
		loop
		fetch C02 into	
			nr_seq_req_item_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_solicitada_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			ie_gerar_ocorrencia_w	:= 'S';			
			ie_restricao_itens_w	:= ie_utiliza_filtro_p;
			
			if (ie_utiliza_filtro_p	= 'S') then
				/* Tratamento para filtros */

				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, null, nr_seq_requisicao_p, null, null, null, nr_seq_req_item_w, null, null, cd_procedimento_w, ie_origem_proced_w, null, null, nr_seq_prestador_w, nr_seq_ocorrencia_p, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
								
				if (ie_regra_w	= 'S') then
					ie_gerar_ocorrencia_w	:= 'S';
				elsif (ie_regra_w	in ('E','N')) then
					ie_gerar_ocorrencia_w	:= 'N';
				end if;							
			end if;
						
			if (ie_gerar_ocorrencia_w	= 'S') then
				select	count(1)
				into STRICT	qt_filtro_ocor_w
				from	pls_ocor_aut_filtro
				where	nr_seq_ocor_aut_combinada = nr_seq_ocor_combinada_p
				and	ie_situacao	= 'A'
				and	ie_excecao	<> 'S';
				
				if (qt_filtro_ocor_w = 0) then
					ie_restricao_itens_w	:= 'N';
				end if;
				
				ie_gerar_ocorrencia_w	:= pls_obter_aut_exec_solic_ocor(dt_ref_inicial_w, dt_ref_final_w,
											cd_medico_solicitante_w, cd_estabelecimento_p, nr_seq_requisicao_p, 
											ie_tipo_qtde_w, nr_seq_segurado_w, ie_restricao_itens_w,
											cd_procedimento_w, ie_origem_proced_w, null);	
											
				if (ie_gerar_ocorrencia_w	= 'S') then
					
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_w, nr_seq_ocorrencia_p, nr_seq_requisicao_p, null, null, nr_seq_req_item_w, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 5, cd_estabelecimento_p, 'N', null, nr_seq_oc_benef_w, null, null, null, null);
							
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p,
									null, nr_seq_requisicao_p, null,
									null, null, nr_seq_req_item_w,
									null, null, null,
									nm_usuario_p, cd_estabelecimento_p);
				end if;
			end if;
			end;
		end loop;
		close C02;
		open C03;
		loop
		fetch C03 into	
			nr_seq_req_item_w,
			nr_seq_material_w,
			qt_solicitada_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			ie_gerar_ocorrencia_w	:= 'S';
			ie_restricao_itens_w	:= ie_utiliza_filtro_p;
			
			if (ie_utiliza_filtro_p	= 'S') then
				/* Tratamento para filtros */

				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, null, nr_seq_requisicao_p, null, null, null, null, nr_seq_req_item_w, null, null, null, nr_seq_material_w, null, nr_seq_prestador_w, nr_seq_ocorrencia_p, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
								
				if (ie_regra_w	= 'S') then
					ie_gerar_ocorrencia_w	:= 'S';
				elsif (ie_regra_w	in ('E','N')) then
					ie_gerar_ocorrencia_w	:= 'N';
				end if;
			end if;
			
			if (ie_gerar_ocorrencia_w	= 'S') then
				select	count(1)
				into STRICT	qt_filtro_ocor_w
				from	pls_ocor_aut_filtro
				where	nr_seq_ocor_aut_combinada = nr_seq_ocor_combinada_p
				and	ie_situacao	= 'A'
				and	ie_excecao	<> 'S';
				
				if (qt_filtro_ocor_w = 0) then
					ie_restricao_itens_w	:= 'N';
				end if;
						
				ie_gerar_ocorrencia_w	:= pls_obter_aut_exec_solic_ocor(dt_ref_inicial_w, dt_ref_final_w,
											cd_medico_solicitante_w, cd_estabelecimento_p,nr_seq_requisicao_p, 
											ie_tipo_qtde_w, nr_seq_segurado_w, ie_restricao_itens_w,
											null, null, nr_seq_material_w);	
										
				if (ie_gerar_ocorrencia_w	= 'S') then
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_w, nr_seq_ocorrencia_p, nr_seq_requisicao_p, null, null, null, nr_seq_req_item_w, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 6, cd_estabelecimento_p, 'N', null, nr_seq_oc_benef_w, null, null, null, null);
								
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p,
									null, nr_seq_requisicao_p, null,
									null, nr_seq_req_item_w, null,
									null, null, null,
									nm_usuario_p, cd_estabelecimento_p);
				end if;
			end if;
			end;		
		end loop;
		close C03;
		end;
	end loop;
	close C01;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_valida_ocor_aut_exec_solic ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_requisicao_p bigint, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

