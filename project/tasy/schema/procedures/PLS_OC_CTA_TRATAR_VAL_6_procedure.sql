-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_6 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Aplicar a validação de item dentro ou fora do período de internação
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_index_sel_w		integer;
ds_obs_w		pls_oc_cta_selecao_ocor_v.ds_observacao%type;
tb_seq_selecao_w	dbms_sql.number_table;	
tb_observacao_w		dbms_sql.varchar2_table;
tb_valido_w		dbms_sql.varchar2_table;
ie_gera_ocor_w		varchar(1);
dt_fim_item_w		pls_conta_proc.dt_fim_proc%type;
dt_fim_item_imp_w	pls_conta_proc.dt_fim_proc%type;

-- Informações da validação de período de internação com relação ao item
C02 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
SELECT	a.nr_sequencia	nr_seq_validacao,
	a.ie_item_periodo_internacao,
	a.ie_utiliza_tipo_data,
	a.ie_tratamento_horario,
	coalesce(a.ie_conta_vinc_internacao, 'N') ie_conta_vinc_internacao
from	pls_oc_cta_val_item_inter a
where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

C03 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type) FOR
	SELECT	sel.nr_sequencia,
		'P' ie_tipo_item,
		proc.dt_inicio_proc_sem_format		dt_inicio_item_sem_format,
		proc.dt_inicio_proc_imp_sem_format	dt_inicio_item_sem_format_imp,	
		proc.dt_inicio_proc 		dt_inicio_item,
		proc.dt_fim_proc 		dt_fim_item,
		proc.dt_procedimento_imp_trunc 	dt_item_imp_trunc,
		proc.dt_procedimento_trunc  	dt_item_trunc,
		proc.dt_inicio_proc_imp 	dt_inicio_item_imp,
		proc.dt_fim_proc_imp 		dt_fim_item_imp,
		conta.dt_entrada,
		conta.dt_alta,
		trunc(conta.dt_alta,'dd') 	dt_alta_trunc,
		trunc(conta.dt_alta_imp,'dd') 	dt_alta_imp_trunc,
		conta.dt_entrada_ref, 
		conta.dt_alta_ref,
		trunc(conta.dt_alta_ref,'dd')	dt_alta_ref_trunc,
		conta.dt_alta_imp,
		conta.dt_entrada_imp,
		conta.cd_guia_ref,
		conta.dt_inicio_faturamento,
		conta.dt_inicio_faturamento_imp,
		conta.dt_fim_faturamento_imp,
		conta.dt_fim_faturamento,
		trunc(conta.dt_fim_faturamento,'dd') 	dt_fim_fat_trunc,
		trunc(conta.dt_fim_faturamento_imp,'dd') dt_fim_fat_imp_trunc,
		conta.ie_tipo_guia,
		conta.dt_entrada_ref_trunc,
		conta.dt_entrada_imp_trunc,
		conta.dt_entrada_trunc,
		conta.dt_inicio_fat_trunc,
		conta.dt_inicio_fat_imp_trunc,
		conta.nr_sequencia nr_seq_conta,
		conta.ie_internado,
		conta.ie_vinc_internado ie_vinc_internacao,
		(SELECT count(1) 
		 from 	pls_conta c
		 where	c.cd_guia = conta.cd_guia_ref
		 and	c.nr_seq_segurado = conta.nr_seq_segurado) qt_conta_ref
	from	pls_oc_cta_selecao_ocor_v sel,
		pls_conta_proc_ocor_v proc,
		pls_conta_ocor_v conta
	where	sel.nr_id_transacao 	= nr_id_transacao_pc
	and	sel.ie_valido 		= 'S'
	and	proc.nr_sequencia  	= sel.nr_seq_conta_proc
	and	conta.nr_sequencia 	= proc.nr_seq_conta 
	
union all
 
	select	sel.nr_sequencia, 
		'M' ie_tipo_item, 
		mat.dt_inicio_atend		dt_inicio_item_sem_format,
		mat.dt_inicio_atend_imp		dt_inicio_item_sem_format_imp,
		mat.dt_inicio_atend_mat 	dt_inicio_item,
		mat.dt_fim_atend_mat		dt_fim_item,
		mat.dt_atendimento_imp_trunc	dt_item_imp_trunc,
		mat.dt_atendimento_trunc 	dt_item_trunc,
		mat.dt_inicio_atend_mat_imp	dt_inicio_item_imp,
		mat.dt_fim_atend_mat_imp	dt_fim_item_imp,
		conta.dt_entrada,
		conta.dt_alta,
		trunc(conta.dt_alta,'dd') 	dt_alta_trunc,
		trunc(conta.dt_alta_imp,'dd') 	dt_alta_imp_trunc,
		conta.dt_entrada_ref,
		conta.dt_alta_ref,
		trunc(conta.dt_alta_ref,'dd')	dt_alta_ref_trunc,
		conta.dt_alta_imp,
		conta.dt_entrada_imp,
		conta.cd_guia_ref,
		conta.dt_inicio_faturamento,
		conta.dt_inicio_faturamento_imp,
		conta.dt_fim_faturamento_imp,
		conta.dt_fim_faturamento,
		trunc(conta.dt_fim_faturamento,'dd') 	dt_fim_fat_trunc,
		trunc(conta.dt_fim_faturamento_imp,'dd') dt_fim_fat_imp_trunc,
		conta.ie_tipo_guia,
		conta.dt_entrada_ref_trunc,
		conta.dt_entrada_imp_trunc,
		conta.dt_entrada_trunc,
		conta.dt_inicio_fat_trunc,
		conta.dt_inicio_fat_imp_trunc,
		conta.nr_sequencia nr_seq_conta,
		conta.ie_internado,
		conta.ie_vinc_internado ie_vinc_internacao,
		(select count(1) 
		 from 	pls_conta c
		 where	c.cd_guia = conta.cd_guia_ref
		 and	c.nr_seq_segurado = conta.nr_seq_segurado) qt_conta_ref
	from	pls_oc_cta_selecao_ocor_v sel, 
		pls_conta_mat_ocor_v mat,
		pls_conta_ocor_v conta
	where	sel.nr_id_transacao = nr_id_transacao_pc
	and	sel.ie_valido = 'S' 
	and	mat.nr_sequencia   = sel.nr_seq_conta_mat
	and 	conta.nr_sequencia = mat.nr_seq_conta;

BEGIN
-- Deve existir informação da regra para aplicar a validação
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then
	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

	tb_seq_selecao_w.delete;
	tb_observacao_w.delete;
	tb_valido_w.delete;
	nr_index_sel_w := 0;
	
	for	r_C02_w in C02(dados_regra_p.nr_sequencia) loop
		
		for	r_C03_w in C03(nr_id_transacao_p) loop
			
			if	((r_C03_w.ie_internado = 'S') or (r_c02_w.ie_conta_vinc_internacao = 'S' and r_c03_w.ie_vinc_internacao = 'I'))then
				
				ie_gera_ocor_w := 'N';
				-- Verificar o tipo de validacao sleecionada

				-- Se for para buscar os itens dentro do periodo de internação
				
				dt_fim_item_w := r_C03_w.dt_fim_item;
				dt_fim_item_imp_w := r_C03_w.dt_fim_item_imp;
				
				-- Realizado um tratamento para caso não for informado a hora final de execução do item

				-- atribuir a mesma hora de início evitando assim que a validação posterior

				-- acrescente um dia a data fim, fazendo com que gere a ocorrência em uma internação de um dia
				if (dt_fim_item_w = trunc(dt_fim_item_w)) then
					dt_fim_item_w := r_C03_w.dt_inicio_item;
				end if;
				
				-- Realizado um tratamento para caso o item tenha hora fim menor que a hora inicio

				-- atribuir um dia a mais na hora fim, entendendo que o procedimento tenho finalizado

				-- no dia seguinte.
				if (dt_fim_item_w < r_C03_w.dt_inicio_item) then
					dt_fim_item_w := dt_fim_item_w + 1;
				end if;
				
				if (dt_fim_item_imp_w < r_C03_w.dt_inicio_item_imp) then
					dt_fim_item_imp_w := dt_fim_item_imp_w + 1;
				end if;
				
				if (r_C02_w.ie_item_periodo_internacao = 'DP') then
				
					ds_obs_w := 'O item foi executado dentro do período em que o beneficiário ficou internado';
					--Utilizar datas da conta selecionada
					if (coalesce(r_C02_w.ie_utiliza_tipo_data::text, '') = '' or r_C02_w.ie_utiliza_tipo_data = 'S') then
						--Se for evento de importação, considera campos imp
						if (dados_regra_p.ie_evento = 'IMP') then
							--Guia de honorário individual(Quando a validação da data inicio e fim item for sobre a mesma conta e o tipo guia for honorario individual, então, a 

							--validação deve ser feita considerando os campos d_inicio e dt_fim faturamento da guia de honorario)

							--Não é necessário fazer validação de horário pois os campos dt_inicio e dt_fim_faturamento não possuem horário
							if (r_C03_w.ie_tipo_guia = 6) then
							
								if (r_C03_w.ie_tipo_item = 'P') then
									--Inicio do proc/mat maior que data de inicio de internação

									--e data fim do procedimento antes da data da alta da internação(ou caso ainda não tenha a data da alta)
									if	((r_C03_w.dt_item_imp_trunc >= r_C03_w.dt_inicio_fat_imp_trunc) and (coalesce(r_C03_w.dt_fim_fat_imp_trunc::text, '') = '' or r_C03_w.dt_item_imp_trunc <= r_C03_w.dt_fim_fat_imp_trunc)) then

										ie_gera_ocor_w := 'S';
									end if;
								end if;
							else
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or 
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format_imp::text, '') = '')) then
									 --Inicio do proc/mat maior que data de inicio de internação

									--e data fim do procedimento antes da data da alta da internação(ou caso ainda não tenha a data da alta)										
									if	((r_C03_w.dt_item_imp_trunc >= r_C03_w.dt_entrada_imp_trunc) and (coalesce(r_C03_w.dt_alta_imp_trunc::text, '') = '' or r_C03_w.dt_item_imp_trunc <= r_C03_w.dt_alta_imp_trunc)) then
									
										ie_gera_ocor_w := 'S';
									end if;
								else
									--Inicio do proc/mat maior que data de inicio de internação

									--e data fim do procedimento antes da data da alta da internação(ou caso ainda não tenha a data da alta)
									if	((r_C03_w.dt_inicio_item_imp > r_C03_w.dt_entrada_imp) and (coalesce(r_C03_w.dt_alta_imp::text, '') = '' or dt_fim_item_imp_w < r_C03_w.dt_alta_imp)) then
									
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							end if;
						else
							--Guia de honorário individual(Quando a validação da data inicio e fim item for sobre a mesma conta e o tipo guia for honorario individual, então, a 

							--validação deve ser feita considerando os campos d_inicio e dt_fim faturamento da guia de honorario)

							--Não é necessário fazer validação de horário pois os campos dt_inicio e dt_fim_faturamento não possuem horário
							if (r_C03_w.ie_tipo_guia = 6) then

								if (r_C03_w.ie_tipo_item = 'P') then
										
									if	((r_C03_w.dt_item_trunc >= r_C03_w.dt_inicio_fat_trunc) and (coalesce(r_C03_w.dt_fim_fat_trunc::text, '') = '' or r_C03_w.dt_item_trunc <= r_C03_w.dt_fim_fat_trunc)) then
									
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							else
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format::text, '') = '')) then
									
									if	((r_C03_w.dt_item_trunc >= r_C03_w.dt_entrada_trunc) and (coalesce(r_C03_w.dt_alta_trunc::text, '') = '' or r_C03_w.dt_item_trunc <= r_C03_w.dt_alta_trunc))then

										ie_gera_ocor_w := 'S';
									end if;
								else
									if	((r_C03_w.dt_inicio_item > r_C03_w.dt_entrada) and (coalesce(r_C03_w.dt_alta::text, '') = '' or dt_fim_item_w < r_C03_w.dt_alta))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							end if;
						end if;
					--Utilizar datas da conta principal
					elsif (r_C02_w.ie_utiliza_tipo_data = 'I') then
						--Para garantir que existem informações de data de conta de referência e também exista a conta

						--referenciada pela guia referência da conta em questão
						if	(r_C03_w.cd_guia_ref IS NOT NULL AND r_C03_w.cd_guia_ref::text <> '' AND r_C03_w.qt_conta_ref > 0) then
						
							if (dados_regra_p.ie_evento = 'IMP') then
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format_imp::text, '') = '')) then
									--Considera a data de entrada e alta da conta principal
									if	((r_C03_w.dt_item_imp_trunc >= r_C03_w.dt_entrada_imp_trunc) and (coalesce(r_C03_w.dt_alta_imp_trunc::text, '') = '' or r_C03_w.dt_item_imp_trunc <= r_C03_w.dt_alta_imp_trunc))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								else
									--Considera a data de entrada e alta da conta principal
									if	((r_C03_w.dt_inicio_item_imp > r_C03_w.dt_entrada_imp) and (coalesce(r_C03_w.dt_alta_imp::text, '') = '' or dt_fim_item_imp_w < r_C03_w.dt_alta_imp))then
										
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							else
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format::text, '') = '')) then
										
									if	((r_C03_w.dt_item_trunc >= r_C03_w.dt_entrada_ref_trunc) and (coalesce(r_C03_w.dt_alta_ref_trunc::text, '') = '' or r_C03_w.dt_item_trunc <= r_C03_w.dt_alta_ref_trunc))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								else
									if	((r_C03_w.dt_inicio_item > r_C03_w.dt_entrada_ref) and (coalesce(r_C03_w.dt_alta_ref::text, '') = '' or dt_fim_item_w < r_C03_w.dt_alta_ref))then
										
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							end if;
						--Se não tiver a informação de guia referência, então quer dizer que 

						--Já esta na conta principal, então verifica os campos dt_entrada e dt_alta
						else
							if (dados_regra_p.ie_evento = 'IMP') then
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format_imp::text, '') = '')) then
									
									if	((r_C03_w.dt_item_imp_trunc >= r_C03_w.dt_entrada_imp_trunc) and (coalesce(r_C03_w.dt_alta_imp_trunc::text, '') = '' or r_C03_w.dt_item_imp_trunc <= r_C03_w.dt_alta_imp_trunc)) then
									
										ie_gera_ocor_w := 'S';
									end if;
								else
									--Inicio do proc/mat mario que data de inicio de internação

									--e data fim do procedimento antes da data da alta da internação(ou caso ainda não tenha a data da alta)
									if	((r_C03_w.dt_inicio_item_imp > r_C03_w.dt_entrada_imp) and (coalesce(r_C03_w.dt_alta_imp::text, '') = '' or dt_fim_item_imp_w < r_C03_w.dt_alta_imp)) then
									
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							else
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format::text, '') = '')) then
									
									if	((r_C03_w.dt_item_trunc >= r_C03_w.dt_entrada_trunc) and (coalesce(r_C03_w.dt_alta_trunc::text, '') = '' or r_C03_w.dt_item_trunc <= r_C03_w.dt_alta_trunc))then
									
										ie_gera_ocor_w := 'S';
									end if;
								else
									if	((r_C03_w.dt_inicio_item > r_C03_w.dt_entrada)and (coalesce(r_C03_w.dt_alta::text, '') = '' or dt_fim_item_w < r_C03_w.dt_alta))then
									
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							end if;
						end if;
					end if;
				-- Se for para buscar os itens fora do periodo de internacao 
				elsif (r_C02_w.ie_item_periodo_internacao = 'FP') then
				
					ds_obs_w := 'O item foi executado fora do período em que o beneficiário ficou internado';
					--Utilizar datas da conta selecionada
					if (coalesce(r_C02_w.ie_utiliza_tipo_data::text, '') = '' or r_C02_w.ie_utiliza_tipo_data = 'S') then
					
						if (dados_regra_p.ie_evento = 'IMP') then
							--Guia de honorário individual(Quando a validação da data inicio e fim item for sobre a mesma conta e o tipo guia for honorario individual, então, a 

							--validação deve ser feita considerando os campos d_inicio e dt_fim faturamento da guia de honorario)

							--Não é necessário fazer validação de horário pois os campos dt_inicio e dt_fim_faturamento não possuem horário
							if (r_C03_w.ie_tipo_guia = 6) then
							
								if (r_C03_w.ie_tipo_item = 'P') then

									if	((r_C03_w.dt_item_imp_trunc < r_C03_w.dt_inicio_fat_imp_trunc) or ((r_C03_w.dt_fim_fat_imp_trunc IS NOT NULL AND r_C03_w.dt_fim_fat_imp_trunc::text <> '') and r_C03_w.dt_item_imp_trunc > r_C03_w.dt_fim_fat_imp_trunc)) then
									
										ie_gera_ocor_w := 'S';
									end if;	
								end if;
							else
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format_imp::text, '') = '')) then
								
									if	((r_C03_w.dt_item_imp_trunc < r_C03_w.dt_entrada_imp_trunc) or ((r_C03_w.dt_alta_imp_trunc IS NOT NULL AND r_C03_w.dt_alta_imp_trunc::text <> '') and r_C03_w.dt_item_imp_trunc > r_C03_w.dt_alta_imp_trunc))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								else
									if	(((r_C03_w.dt_inicio_item_imp < r_C03_w.dt_entrada_imp) or (r_C03_w.dt_inicio_item_imp > r_C03_w.dt_alta_imp)) or ((r_C03_w.dt_alta_imp IS NOT NULL AND r_C03_w.dt_alta_imp::text <> '') and dt_fim_item_imp_w > r_C03_w.dt_alta_imp))then
										
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							end if;
						else
							if (r_C03_w.ie_tipo_guia = 6) then
							
								if (r_C03_w.ie_tipo_item = 'P') then
										
									if	((r_C03_w.dt_item_trunc < r_C03_w.dt_inicio_fat_trunc) or ((r_C03_w.dt_fim_fat_trunc IS NOT NULL AND r_C03_w.dt_fim_fat_trunc::text <> '') and r_C03_w.dt_item_trunc > r_C03_w.dt_fim_fat_trunc)) then
									
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							else
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format::text, '') = '')) then
									
									if	((r_C03_w.dt_item_trunc < r_C03_w.dt_entrada_trunc) or ((r_C03_w.dt_alta_trunc IS NOT NULL AND r_C03_w.dt_alta_trunc::text <> '') and r_C03_w.dt_item_trunc > r_C03_w.dt_alta_trunc))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								else
									if	(((r_C03_w.dt_inicio_item < r_C03_w.dt_entrada) or (r_C03_w.dt_inicio_item > r_C03_w.dt_alta)) or ((r_C03_w.dt_alta IS NOT NULL AND r_C03_w.dt_alta::text <> '') and dt_fim_item_w > r_C03_w.dt_alta))then
										
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							end if;
						end if;
					--Utilizar datas da conta principal(caso for já for a conta principal, então não precisa buscar as datas da conta referência, 

					--utiliza o dt_entrada e dt_alta)
					elsif (r_C02_w.ie_utiliza_tipo_data = 'I') then
						--Para garantir que existem informações de data de conta de referência e também exista a conta

						--referenciada pela guia referência da conta em questão
						if	(r_C03_w.cd_guia_ref IS NOT NULL AND r_C03_w.cd_guia_ref::text <> '' AND r_C03_w.qt_conta_ref > 0) then
												
							if (dados_regra_p.ie_evento = 'IMP') then
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format_imp::text, '') = '')) then
									
									if	((r_C03_w.dt_item_imp_trunc < r_C03_w.dt_entrada_ref_trunc) or ((r_C03_w.dt_alta_ref_trunc IS NOT NULL AND r_C03_w.dt_alta_ref_trunc::text <> '') and r_C03_w.dt_item_imp_trunc > r_C03_w.dt_alta_ref_trunc))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								else
									if	(((r_C03_w.dt_inicio_item_imp < r_C03_w.dt_entrada_ref) or (r_C03_w.dt_inicio_item_imp > r_C03_w.dt_alta_ref)) or ((r_C03_w.dt_alta_ref IS NOT NULL AND r_C03_w.dt_alta_ref::text <> '') and r_C03_w.dt_inicio_item_imp > r_C03_w.dt_alta_ref))then
										
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							else
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format::text, '') = '')) then
									
									if	((r_C03_w.dt_item_trunc < r_C03_w.dt_entrada_ref_trunc) or ((r_C03_w.dt_alta_ref_trunc IS NOT NULL AND r_C03_w.dt_alta_ref_trunc::text <> '') and r_C03_w.dt_item_trunc > r_C03_w.dt_alta_ref_trunc))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								else
									if	(((r_C03_w.dt_inicio_item < r_C03_w.dt_entrada_ref) or (r_C03_w.dt_inicio_item > r_C03_w.dt_alta_ref)) or ((r_C03_w.dt_alta_ref IS NOT NULL AND r_C03_w.dt_alta_ref::text <> '') and dt_fim_item_w > r_C03_w.dt_alta_ref))then
										
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							end if;
						else
							if (dados_regra_p.ie_evento = 'IMP') then
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format_imp::text, '') = '')) then
									
									if	((r_C03_w.dt_item_imp_trunc < r_C03_w.dt_entrada_imp_trunc) or ((r_C03_w.dt_alta_imp_trunc IS NOT NULL AND r_C03_w.dt_alta_imp_trunc::text <> '') and r_C03_w.dt_item_imp_trunc > r_C03_w.dt_alta_imp_trunc))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								else
									if	(((r_C03_w.dt_inicio_item_imp < r_C03_w.dt_entrada_imp) or (r_C03_w.dt_inicio_item_imp > r_C03_w.dt_alta_imp)) or ((r_C03_w.dt_alta_imp IS NOT NULL AND r_C03_w.dt_alta_imp::text <> '') and dt_fim_item_imp_w > r_C03_w.dt_alta_imp))then
										
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							else
								--Valida o tipo de tratamento de horário, se não considerar horario ou não considerar horário quando item não possuir horario, então

								--pega horarios inicias de conta truncados.
								if	((r_C02_w.ie_tratamento_horario = 'D') or
									((r_C02_w.ie_tratamento_horario = 'H') and coalesce(r_C03_w.dt_inicio_item_sem_format::text, '') = '')) then
									
									if	((r_C03_w.dt_item_trunc < r_C03_w.dt_entrada_trunc) or ((r_C03_w.dt_alta_trunc IS NOT NULL AND r_C03_w.dt_alta_trunc::text <> '') and r_C03_w.dt_item_trunc > r_C03_w.dt_alta_trunc))then
										 
										ie_gera_ocor_w := 'S';
									end if;
								else
									if	(((r_C03_w.dt_inicio_item < coalesce(r_C03_w.dt_entrada_ref,r_C03_w.dt_entrada)) or (r_C03_w.dt_inicio_item > coalesce(r_C03_w.dt_alta_ref,r_C03_w.dt_alta))) or ((coalesce(r_C03_w.dt_alta_ref,r_C03_w.dt_alta) IS NOT NULL AND (coalesce(r_C03_w.dt_alta_ref,r_C03_w.dt_alta))::text <> '') and dt_fim_item_w > coalesce(r_C03_w.dt_alta_ref,r_C03_w.dt_alta)))then
										
										ie_gera_ocor_w := 'S';
									end if;
								end if;
							end if;
						end if;
					end if;
				end if;	
				
				if (ie_gera_ocor_w = 'S') then
				
					tb_seq_selecao_w(nr_index_sel_w) := r_C03_w.nr_sequencia;
					tb_observacao_w(nr_index_sel_w) := ds_obs_w;
					tb_valido_w(nr_index_sel_w) :=	'S';	
				
					if (nr_index_sel_w >= pls_cta_consistir_pck.qt_registro_transacao_w ) then
						
						CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
												'SEQ', tb_observacao_w,
												tb_valido_w, nm_usuario_p);
						tb_seq_selecao_w.delete;
						tb_observacao_w.delete;
						tb_valido_w.delete;
						nr_index_sel_w		:= 0;
					else
						nr_index_sel_w := nr_index_sel_w + 1;	
					end if;	
				end if;		
			end if;
		end loop; --C03
	end loop; -- C02
	
	CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
							'SEQ', tb_observacao_w,
							tb_valido_w, nm_usuario_p);
	tb_seq_selecao_w.delete;
	tb_observacao_w.delete;
	tb_valido_w.delete;
	
	-- seta os registros que serão válidos ou inválidos após o processamento 
	CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_6 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

