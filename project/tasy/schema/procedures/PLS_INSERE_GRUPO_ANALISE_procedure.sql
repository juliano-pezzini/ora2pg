-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_insere_grupo_analise ( nr_seq_auditoria_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_tipo_inclusao_grupo_w		pls_param_analise_aut.ie_tipo_inclusao_grupo%type;
ie_inserir_grupo_item_w			pls_param_analise_aut.ie_inserir_grupo_item%type;

qt_grupos_w				bigint;
qt_grupos_sem_auditar_w			integer;

nr_sequencia_auditoria_atual_w		bigint;
nr_seq_ordem_atual_w			pls_auditoria_grupo.nr_seq_ordem%type;
nr_seq_grupo_novo_w			pls_auditoria_grupo.nr_sequencia%type;
nr_seq_ordem_w				bigint;

C01 CURSOR(nr_seq_ocorrencia_pc bigint, nr_seq_guia_pc bigint, nr_seq_requisicao_pc bigint ) FOR
	SELECT	nr_seq_grupo,
		nr_seq_fluxo
	from	pls_ocorrencia_grupo
	where	nr_seq_ocorrencia	= nr_seq_ocorrencia_pc
	and	(((nr_seq_guia_pc IS NOT NULL AND nr_seq_guia_pc::text <> '')	and (coalesce(ie_autorizacao::text, '') = ''	or ie_autorizacao	= 'S'))
	or ((nr_seq_requisicao_pc IS NOT NULL AND nr_seq_requisicao_pc::text <> '')	and (coalesce(ie_requisicao::text, '') = ''	or ie_requisicao	= 'S')))
	and	ie_situacao		= 'A'
	order by nr_seq_fluxo;

BEGIN

begin
	select	coalesce(ie_tipo_inclusao_grupo,'IF'),
		coalesce(ie_inserir_grupo_item, 'N')
	into STRICT	ie_tipo_inclusao_grupo_w,
		ie_inserir_grupo_item_w
	from	pls_param_analise_aut
	where	cd_estabelecimento	= cd_estabelecimento_p;
exception
when others then
	ie_tipo_inclusao_grupo_w	:= 'IF';
	ie_inserir_grupo_item_w := 'N';
end;

for r_C01_w in C01(nr_seq_ocorrencia_p, nr_seq_guia_p, nr_seq_requisicao_p) loop
	begin
	if ( ie_tipo_inclusao_grupo_w = 'IN') then --Incluir grupo de análise conforme seu nível no fluxo
		if ( ie_inserir_grupo_item_w = 'S' ) then
			select	count(1)
			into STRICT	qt_grupos_w
			from	pls_auditoria_grupo
			where	nr_seq_grupo		= r_C01_w.nr_seq_grupo
			and	nr_seq_auditoria	= nr_seq_auditoria_p
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

			select	count(1)
			into STRICT	qt_grupos_sem_auditar_w
			from	pls_auditoria_grupo
			where	nr_seq_grupo		= r_C01_w.nr_seq_grupo
			and	nr_seq_auditoria	= nr_seq_auditoria_p
			and	coalesce(dt_liberacao::text, '') = '';

			if ( qt_grupos_w	> 0) and ( qt_grupos_sem_auditar_w = 0) then

				select	pls_obter_grupo_analise_atual(nr_seq_auditoria_p) -- Retorna  a sequencia da tabela  pls_auditoria_grupo
				into STRICT	nr_sequencia_auditoria_atual_w
				;

				select	nr_seq_ordem
				into STRICT	nr_seq_ordem_atual_w
				from	pls_auditoria_grupo
				where	nr_sequencia = nr_sequencia_auditoria_atual_w;

				select	nextval('pls_auditoria_grupo_seq')
				into STRICT	nr_seq_grupo_novo_w
				;

				if ( nr_seq_ordem_atual_w >= r_C01_w.nr_seq_fluxo ) then
					nr_seq_ordem_w := pls_obter_prox_fluxo_analise( nr_seq_auditoria_p, r_C01_w.nr_seq_fluxo ); -- Retorna o próximo fluxo disponível dos grupos de auditores.
					insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
						 ie_manual, ie_status, nr_seq_auditoria,
						 nr_seq_grupo, nr_seq_ordem)
					values (nr_seq_grupo_novo_w, nm_usuario_p, clock_timestamp(),
						 'N', 'U', nr_seq_auditoria_p,
						 r_C01_w.nr_seq_grupo, nr_seq_ordem_w );

					CALL pls_reorganiza_ordem_grupo_aud( nr_seq_ordem_atual_w,
									nr_seq_grupo_novo_w,
									nr_seq_auditoria_p,
									nm_usuario_p );
				else
					insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
						 ie_manual, ie_status, nr_seq_auditoria,
						 nr_seq_grupo, nr_seq_ordem)
					values (nr_seq_grupo_novo_w, nm_usuario_p, clock_timestamp(),
						 'N', 'U', nr_seq_auditoria_p,
						 r_C01_w.nr_seq_grupo, r_C01_w.nr_seq_fluxo );

					CALL pls_reorganiza_ordem_grupo_aud( nr_seq_ordem_atual_w,
									nr_seq_grupo_novo_w,
									nr_seq_auditoria_p,
									nm_usuario_p );
				end if;
			else
				select	pls_obter_grupo_analise_atual( nr_seq_auditoria_p ) -- Retorna  a sequencia da tabela  pls_auditoria_grupo
				into STRICT	nr_sequencia_auditoria_atual_w
				;

				select	nr_seq_ordem
				into STRICT	nr_seq_ordem_atual_w
				from	pls_auditoria_grupo
				where	nr_sequencia = nr_sequencia_auditoria_atual_w;

				select	nextval('pls_auditoria_grupo_seq')
				into STRICT	nr_seq_grupo_novo_w
				;

				if ( nr_seq_ordem_atual_w >= r_C01_w.nr_seq_fluxo ) then
					nr_seq_ordem_w := pls_obter_prox_fluxo_analise( nr_seq_auditoria_p, r_C01_w.nr_seq_fluxo ); -- Retorna o próximo fluxo disponível dos grupos de auditores.
					insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
						 ie_manual, ie_status, nr_seq_auditoria,
						 nr_seq_grupo, nr_seq_ordem)
					values (nr_seq_grupo_novo_w, nm_usuario_p, clock_timestamp(),
						 'N', 'U', nr_seq_auditoria_p,
						 r_C01_w.nr_seq_grupo, nr_seq_ordem_w );

					CALL pls_reorganiza_ordem_grupo_aud( nr_seq_ordem_atual_w,
									nr_seq_grupo_novo_w,
									nr_seq_auditoria_p,
									nm_usuario_p );
				else	-- Valida se já contem o grupo adicionado
					select	count(1)
					into STRICT	qt_grupos_w
					from	pls_auditoria_grupo
					where	nr_seq_grupo		= r_C01_w.nr_seq_grupo
					and	nr_seq_auditoria	= nr_seq_auditoria_p;

					if (qt_grupos_w	= 0) then
						insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
							 ie_manual, ie_status, nr_seq_auditoria,
							 nr_seq_grupo, nr_seq_ordem)
						values (nr_seq_grupo_novo_w, nm_usuario_p, clock_timestamp(),
							 'N', 'U', nr_seq_auditoria_p,
							 r_C01_w.nr_seq_grupo, r_C01_w.nr_seq_fluxo );

						CALL pls_reorganiza_ordem_grupo_aud( nr_seq_ordem_atual_w,
										nr_seq_grupo_novo_w,
										nr_seq_auditoria_p,
										nm_usuario_p );
					end if;
				end if;
			end if;
		else
			select	pls_obter_grupo_analise_atual(nr_seq_auditoria_p) -- Retorna  a sequencia da tabela  pls_auditoria_grupo
			into STRICT	nr_sequencia_auditoria_atual_w
			;

			select	nr_seq_ordem
			into STRICT	nr_seq_ordem_atual_w
			from	pls_auditoria_grupo
			where	nr_sequencia = nr_sequencia_auditoria_atual_w;

			select	nextval('pls_auditoria_grupo_seq')
			into STRICT	nr_seq_grupo_novo_w
			;

			if ( nr_seq_ordem_atual_w >= r_C01_w.nr_seq_fluxo ) then
				nr_seq_ordem_w := pls_obter_prox_fluxo_analise(nr_seq_auditoria_p, r_C01_w.nr_seq_fluxo ); -- Retorna o próximo fluxo disponível dos grupos de auditores.
				insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
					 ie_manual, ie_status, nr_seq_auditoria,
					 nr_seq_grupo, nr_seq_ordem)
				values (nr_seq_grupo_novo_w, nm_usuario_p, clock_timestamp(),
					 'N', 'U', nr_seq_auditoria_p,
					 r_C01_w.nr_seq_grupo, nr_seq_ordem_w);

				CALL pls_reorganiza_ordem_grupo_aud( nr_seq_ordem_atual_w,
								nr_seq_grupo_novo_w,
								nr_seq_auditoria_p,
								nm_usuario_p );
			else	-- Valida se já contem o grupo adicionado
				select	count(1)
				into STRICT	qt_grupos_w
				from	pls_auditoria_grupo
				where	nr_seq_grupo		= r_C01_w.nr_seq_grupo
				and	nr_seq_auditoria	= nr_seq_auditoria_p;

				if (qt_grupos_w	= 0) then
					insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
						 ie_manual, ie_status, nr_seq_auditoria,
						 nr_seq_grupo, nr_seq_ordem)
					values (nr_seq_grupo_novo_w, nm_usuario_p, clock_timestamp(),
						 'N', 'U', nr_seq_auditoria_p,
						 r_C01_w.nr_seq_grupo, r_C01_w.nr_seq_fluxo );

					CALL pls_reorganiza_ordem_grupo_aud( nr_seq_ordem_atual_w,
									nr_seq_grupo_novo_w,
									nr_seq_auditoria_p,
									nm_usuario_p );
				end if;
			end if;
		end if;

	elsif (ie_tipo_inclusao_grupo_w = 'IF') then --Incluir grupo de análise no final do fluxo
		if ( ie_inserir_grupo_item_w = 'S' ) then
			select	count(1)
			into STRICT	qt_grupos_w
			from	pls_auditoria_grupo
			where	nr_seq_grupo		= r_C01_w.nr_seq_grupo
			and	nr_seq_auditoria	= nr_seq_auditoria_p
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

			select	count(1)
			into STRICT	qt_grupos_sem_auditar_w
			from	pls_auditoria_grupo
			where	nr_seq_grupo		= r_C01_w.nr_seq_grupo
			and	nr_seq_auditoria	= nr_seq_auditoria_p
			and	coalesce(dt_liberacao::text, '') = '';

			if (qt_grupos_w	> 0) and (qt_grupos_sem_auditar_w = 0) then

				select	max(nr_seq_ordem) + 1
				into STRICT	nr_seq_ordem_w
				from	pls_auditoria_grupo
				where	nr_seq_auditoria	= nr_seq_auditoria_p;

				insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
					 ie_manual, ie_status, nr_seq_auditoria,
					 nr_seq_grupo, nr_seq_ordem)
				values (nextval('pls_auditoria_grupo_seq'), nm_usuario_p, clock_timestamp(),
					 'N', 'U', nr_seq_auditoria_p,
					 r_C01_w.nr_seq_grupo, nr_seq_ordem_w);
			else
				select	count(1)
				into STRICT	qt_grupos_w
				from	pls_auditoria_grupo
				where	nr_seq_grupo		= r_C01_w.nr_seq_grupo
				and	nr_seq_auditoria	= nr_seq_auditoria_p;

				if (qt_grupos_w	= 0) then

					select	max(nr_seq_ordem) + 1
					into STRICT	nr_seq_ordem_w
					from	pls_auditoria_grupo
					where	nr_seq_auditoria	= nr_seq_auditoria_p;

					insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
						 ie_manual, ie_status, nr_seq_auditoria,
						 nr_seq_grupo, nr_seq_ordem)
					values (nextval('pls_auditoria_grupo_seq'), nm_usuario_p, clock_timestamp(),
						 'N', 'U', nr_seq_auditoria_p,
						 r_C01_w.nr_seq_grupo, nr_seq_ordem_w);

				end if;
			end if;
		else
			select	count(1)
			into STRICT	qt_grupos_w
			from	pls_auditoria_grupo
			where	nr_seq_grupo		= r_C01_w.nr_seq_grupo
			and	nr_seq_auditoria	= nr_seq_auditoria_p;

			if (qt_grupos_w	= 0) then

				select	max(nr_seq_ordem) + 1
				into STRICT	nr_seq_ordem_w
				from	pls_auditoria_grupo
				where	nr_seq_auditoria	= nr_seq_auditoria_p;

				insert	into pls_auditoria_grupo(nr_sequencia, nm_usuario, dt_atualizacao,
					 ie_manual, ie_status, nr_seq_auditoria,
					 nr_seq_grupo, nr_seq_ordem)
				values (nextval('pls_auditoria_grupo_seq'), nm_usuario_p, clock_timestamp(),
					 'N', 'U', nr_seq_auditoria_p,
					 r_C01_w.nr_seq_grupo, nr_seq_ordem_w);

			end if;
		end if;
	end if;
	end;
end loop;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_insere_grupo_analise ( nr_seq_auditoria_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

