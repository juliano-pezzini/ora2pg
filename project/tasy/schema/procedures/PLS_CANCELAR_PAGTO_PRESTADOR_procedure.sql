-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_cancelar_pagto_prestador ( nr_seq_pag_prestador_p bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, dt_cancelamento_p timestamp, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_nota_fiscal_w		varchar(255);
ie_tipo_valor_w			varchar(255);
ie_proximo_pgto_w		varchar(255);
vl_pagamento_w			pls_lote_pagamento.vl_lote%type;
nr_lote_contabil_w		bigint;
nr_seq_nota_fiscal_w		bigint;
nr_seq_pag_item_w		bigint;
nr_seq_pag_venc_w		bigint;
nr_seq_pag_venc_trib_w		bigint;
nr_seq_lote_w			bigint;
nr_seq_pag_prestador_w		bigint;
nr_seq_pag_prest_venc_w		bigint;
nr_seq_prestador_w		bigint;
nr_seq_item_resumo_w		bigint;
nr_seq_conta_w			bigint;
nr_titulo_w			bigint;
nr_titulo_rec_w			bigint;
nr_seq_pag_venc_valor_w		bigint;
ie_baixar_tit_rec_w		pls_parametro_pagamento.ie_baixar_tit_rec%type;
ie_baixar_tit_pagar_w		pls_parametro_pagamento.ie_baixar_tit_pagar%type;
nr_sequencia_w			pls_conta_medica_resumo.nr_sequencia%type;
nr_seq_pag_item_novo_w		pls_pagamento_item.nr_sequencia%type;
nr_seq_pag_prest_venc_trib_n_w	pls_pag_prest_venc_trib.nr_sequencia%type;
nr_seq_evento_w			pls_pagamento_item.nr_seq_evento%type;
nr_seq_pagamento_item_novo_w	pls_pagamento_item.nr_sequencia%type;
nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
ie_cancelamento_w		pls_pagamento_prestador.ie_cancelamento%type;
qt_conta_pos_estab_contab_w	integer;

C01 CURSOR FOR
	SELECT	b.nr_lote_contabil,
		b.nr_sequencia
	from	nota_fiscal		b,
		pls_pagamento_nota	a
	where	a.nr_seq_nota_fiscal	= b.nr_sequencia
	and	a.nr_seq_pagamento	= nr_seq_pag_prestador_p;
	
C02 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_evento
	from	pls_pagamento_item
	where	nr_seq_pagamento = nr_seq_pag_prestador_p;
	
C03 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_pag_prest_vencimento
	where	nr_seq_pag_prestador = nr_seq_pag_prestador_p;
	
C04 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_pag_prest_venc_trib
	where	nr_seq_vencimento = nr_seq_pag_venc_w;
	
C05 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_conta,
		a.nr_seq_protocolo
	from	pls_conta_medica_resumo	a
	where	a.nr_seq_lote_pgto	= nr_seq_lote_w
	and	a.nr_seq_prestador_pgto	= nr_seq_prestador_w
	and	a.nr_seq_pag_item	= nr_seq_pag_item_w
	and	((a.ie_situacao != 'I') or (coalesce(a.ie_situacao::text, '') = ''));
	
C06 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_pag_prest_venc_valor
	where	nr_seq_vencimento = nr_seq_pag_venc_w;
	
C07 CURSOR(	nr_seq_lote_pc 		pls_conta_rec_resumo_item.nr_seq_lote_pgto%type,
		nr_seq_pag_item_pc	pls_conta_rec_resumo_item.nr_seq_pag_item%type) FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_conta
	from	pls_conta_rec_resumo_item a
	where	a.nr_seq_lote_pgto	= nr_seq_lote_pc
	and	a.nr_seq_pag_item	= nr_seq_pag_item_pc
	and (a.ie_situacao != 'I' or coalesce(a.ie_situacao::text, '') = '');
	
C08 CURSOR(	nr_seq_pagamento_pc		pls_pag_item_trib.nr_seq_pagamento%type,
		nr_seq_venc_trib_pc		pls_pag_item_trib.nr_seq_venc_trib%type) FOR
	SELECT	nr_sequencia
	from	pls_pag_item_trib
	where	nr_seq_pagamento = nr_seq_pagamento_pc
	and	nr_seq_venc_trib = nr_seq_venc_trib_pc;
	
C09 CURSOR(	nr_seq_pag_venc_pc		pls_pag_prest_vencimento.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_pag_venc_trib_prev
	where	nr_seq_vencimento = nr_seq_pag_venc_pc;
	
BEGIN
dbms_application_info.SET_ACTION('PLS_CANCELAR_PAGTO_PRESTADOR');

select	max(nr_seq_lote),
	max(nr_seq_prestador),
	max(ie_cancelamento)
into STRICT	nr_seq_lote_w,
	nr_seq_prestador_w,
	ie_cancelamento_w
from	pls_pagamento_prestador
where	nr_sequencia = nr_seq_pag_prestador_p;

-- Somente cancelar se nao estiver cancelado/estornado
if (coalesce(ie_cancelamento_w::text, '') = '') then
	-- INICIO Estornar as baixas dos titulos vinculados
	select	coalesce(max(ie_baixar_tit_rec), 'N'),
		coalesce(max(ie_baixar_tit_pagar), 'N')
	into STRICT	ie_baixar_tit_rec_w,
		ie_baixar_tit_pagar_w
	from	pls_parametro_pagamento
	where	cd_estabelecimento = cd_estabelecimento_p;

	if (ie_baixar_tit_rec_w = 'S') then
		pls_baixar_tit_rec_lote_pag(nr_seq_lote_w, nr_seq_pag_prestador_p, 'A', nm_usuario_p);
	end if;

	if (ie_baixar_tit_pagar_w = 'S') then
		CALL pls_baixar_tit_pagar_lote_pag(nr_seq_lote_w, nr_seq_pag_prestador_p, 'A', nm_usuario_p);
	end if;
	-- FIM Estorno sas baixas dos titulos vinculados
	CALL pls_cancelar_tit_pgto_prest(nr_seq_pag_prestador_p, 'N', dt_cancelamento_p, nm_usuario_p);

	select	max(nr_nota_fiscal)
	into STRICT	nr_nota_fiscal_w
	from	pls_pagamento_prestador
	where	nr_sequencia = nr_seq_pag_prestador_p;

	if (nr_nota_fiscal_w IS NOT NULL AND nr_nota_fiscal_w::text <> '') then
		select	max(nr_lote_contabil),
			max(nr_sequencia)
		into STRICT	nr_lote_contabil_w,
			nr_seq_nota_fiscal_w
		from	nota_fiscal
		where	nr_nota_fiscal		= nr_nota_fiscal_w
		and	nr_seq_pgto_prest	= nr_seq_pag_prestador_p;
		
		if (nr_seq_nota_fiscal_w IS NOT NULL AND nr_seq_nota_fiscal_w::text <> '') then
			if (nr_lote_contabil_w IS NOT NULL AND nr_lote_contabil_w::text <> '') and (nr_lote_contabil_w <> 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(186670);
			else
				CALL Estornar_nota_fiscal(nr_seq_nota_fiscal_w, nm_usuario_p);
				
				update	nota_fiscal
				set	nr_seq_pgto_prest	 = NULL
				where	nr_seq_pgto_prest	= nr_seq_pag_prestador_p;
				
				update	pls_pagamento_prestador
				set	nr_nota_fiscal	 = NULL
				where	nr_sequencia	= nr_seq_pag_prestador_p;
			end if;
		end if;
	else
		open C01;
		loop
		fetch C01 into
			nr_lote_contabil_w,
			nr_seq_nota_fiscal_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (nr_lote_contabil_w IS NOT NULL AND nr_lote_contabil_w::text <> '') and (nr_lote_contabil_w <> 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(186670);
			else
				CALL Estornar_nota_fiscal(nr_seq_nota_fiscal_w, nm_usuario_p);
				
				update	nota_fiscal
				set	nr_seq_pgto_prest	 = NULL
				where	nr_seq_pgto_prest	= nr_seq_pag_prestador_p;
				
				update	pls_pagamento_prestador
				set	nr_nota_fiscal	 = NULL
				where	nr_sequencia	= nr_seq_pag_prestador_p;
			end if;
			end;
		end loop;
		close c01;
	end if;

	select	nextval('pls_pagamento_prestador_seq')
	into STRICT	nr_seq_pag_prestador_w
	;

	insert into pls_pagamento_prestador(
		nr_sequencia,			nm_usuario,		dt_atualizacao,		nm_usuario_nrec,		dt_atualizacao_nrec,
		nr_seq_prestador,		nr_seq_lote,		vl_pagamento,		nr_seq_conta_banco,		ie_cancelamento)
	(SELECT	nr_seq_pag_prestador_w,		nm_usuario_p,		clock_timestamp(),		nm_usuario_p,			clock_timestamp(),
		nr_seq_prestador,		nr_seq_lote,		vl_pagamento * -1,	nr_seq_conta_banco,		'E'
	from	pls_pagamento_prestador
	where	nr_sequencia = nr_seq_pag_prestador_p);

	update	pls_pagamento_prestador
	set	ie_cancelamento	= 'C'
	where	nr_sequencia	= nr_seq_pag_prestador_p;

	-- jtonon - OS 1202311 - O sistema deletava os eventos movimentos ao cancelar um pagamento, alteramos para definir o evento movimento como cancelado e mais abaixo geramos os eventos movimentos de estorno
	update	pls_evento_movimento
	set	ie_cancelamento		= 'C',
		nr_tit_pagar_vinculado	 = NULL,
		nr_tit_rec_vinculado	 = NULL
	where	nr_seq_lote_pgto	= nr_seq_lote_w
	and	nr_seq_prestador	= nr_seq_prestador_w;

	-- Desvincula os eventos movimentos que foram cancelados, la nos eventos de descontos provenientes de acato nas contestacoes
	update	pls_discussao_evento_movto a
	set	a.nr_seq_evento_movto  = NULL
	where exists (	SELECT	1
			from	pls_evento_movimento b
			where	b.nr_sequencia = a.nr_seq_evento_movto
			and	b.nr_seq_lote_pgto = nr_seq_lote_w
			and	b.nr_seq_prestador = nr_seq_prestador_w);
			
	open C02;
	loop
	fetch C02 into
		nr_seq_pag_item_w,
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
		update	pls_pagamento_item
		set	nr_tit_pagar_origem	 = NULL,
			nr_tit_receber_origem	 = NULL
		where	nr_sequencia = nr_seq_pag_item_w;
		
		select	nextval('pls_pagamento_item_seq')
		into STRICT	nr_seq_pag_item_novo_w
		;
		
		insert into pls_pagamento_item(
			nr_sequencia,			nm_usuario,			dt_atualizacao,		nm_usuario_nrec,	dt_atualizacao_nrec,
			nr_seq_pagamento,		nr_adiant_pago_origem,		nr_seq_evento,		nr_tit_pagar_origem,	nr_tit_receber_origem,
			ie_tipo_contratacao,		vl_item,			vl_glosa)
		(SELECT	nr_seq_pag_item_novo_w,		nm_usuario_p,			clock_timestamp(),		nm_usuario_p,		clock_timestamp(),
			nr_seq_pag_prestador_w,		nr_adiant_pago_origem,		nr_seq_evento,		nr_tit_pagar_origem,	nr_tit_receber_origem,
			ie_tipo_contratacao,		vl_item * -1,			vl_glosa * -1
		from	pls_pagamento_item
		where	nr_sequencia = nr_seq_pag_item_w);
		
		-- jtonon - OS 1202311 - O sistema deletava os eventos movimentos ao cancelar um pagamento, alteramos para definir o evento movimento como cancelado e neste momento geramos os eventos movimentos de estorno
		insert into pls_evento_movimento(	
			cd_centro_custo,		cd_cgc_titulo_pagar,		cd_classif_cred,	cd_classif_deb,			cd_conta_contabil,
			cd_conta_credito,		cd_conta_debito,		cd_historico,		cd_pf_titulo_pagar,		ds_observacao,
			dt_atualizacao,			dt_atualizacao_nrec,		dt_mes_comp_lote,	dt_movimento,			dt_venc_titulo,
			ie_cancelamento,		ie_forma_pagto,			ie_tipo_contratacao,	ie_titulo_pagar,		nm_usuario,
			nm_usuario_nrec,		nr_adiant_pago,			nr_lote_contabil,	nr_repasse_terceiro,		nr_seq_classe_tit_rec,
			nr_seq_conta_ajuste,		nr_seq_disc_mat,		nr_seq_disc_proc,	nr_seq_esquema,			nr_seq_evento,
			nr_seq_lote,			nr_seq_lote_contest,		nr_seq_lote_disc,	nr_seq_lote_pgto,		nr_seq_lote_pgto_orig,
			nr_seq_pagamento_item,		nr_seq_periodo,			nr_seq_prestador,	nr_seq_prest_plant_item,	nr_seq_regra_fixo,
			nr_seq_trans_fin_baixa,		nr_seq_trans_fin_contab,	nr_tit_pagar_vinculado,	nr_tit_rec_vinculado,		nr_titulo_pagar,
			nr_titulo_receber,		vl_desc_trib,			vl_movimento,		vl_movto_original,		nr_sequencia)
		(SELECT	cd_centro_custo,		cd_cgc_titulo_pagar,		cd_classif_cred,	cd_classif_deb,			cd_conta_contabil,
			cd_conta_credito,		cd_conta_debito,		cd_historico,		cd_pf_titulo_pagar,		ds_observacao,
			dt_atualizacao,			dt_atualizacao_nrec,		dt_mes_comp_lote,	dt_movimento,			dt_venc_titulo,
			'E',				ie_forma_pagto,			ie_tipo_contratacao,	ie_titulo_pagar,		nm_usuario,
			nm_usuario_nrec,		nr_adiant_pago,			nr_lote_contabil,	nr_repasse_terceiro,		nr_seq_classe_tit_rec,
			nr_seq_conta_ajuste,		nr_seq_disc_mat,		nr_seq_disc_proc,	nr_seq_esquema,			nr_seq_evento,
			nr_seq_lote,			nr_seq_lote_contest,		nr_seq_lote_disc,	nr_seq_lote_pgto,		nr_seq_lote_pgto_orig,
			nr_seq_pag_item_novo_w,		nr_seq_periodo,			nr_seq_prestador,	nr_seq_prest_plant_item,	nr_seq_regra_fixo,
			nr_seq_trans_fin_baixa,		nr_seq_trans_fin_contab,	nr_tit_pagar_vinculado,	nr_tit_rec_vinculado,		nr_titulo_pagar,
			nr_titulo_receber,		vl_desc_trib * (-1),		vl_movimento * (-1),	vl_movto_original * (-1), 	nextval('pls_evento_movimento_seq')
		from	pls_evento_movimento
		where	nr_seq_pagamento_item = nr_seq_pag_item_w);
		
		open C05;
		loop
		fetch C05 into
			nr_seq_item_resumo_w,
			nr_seq_conta_w,
			nr_seq_protocolo_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			insert into pls_pag_prest_item_resumo(
				dt_atualizacao,			nm_usuario,		dt_atualizacao_nrec,		nm_usuario_nrec,	nr_sequencia,
				nr_seq_resumo_conta,		nr_seq_item_pagamento,	nr_seq_conta)
			values (clock_timestamp(),			nm_usuario_p,		clock_timestamp(),			nm_usuario_p,		nextval('pls_pag_prest_item_resumo_seq'),
				nr_seq_item_resumo_w,		nr_seq_pag_item_w,	nr_seq_conta_w);
				
			update	pls_conta_medica_resumo
			set	ie_situacao	= 'I'
			where	nr_seq_conta	= nr_seq_conta_w
			and	nr_sequencia	= nr_seq_item_resumo_w;
			
			
			--Caso o status do protocolo estava como pago, e preciso voltar para liberado devido a esse cancelamento para esse prestador. 

			--No novo registro de resumo gerado tambem  fara o mesmo
			update 	pls_protocolo_conta
			set	ie_status = CASE WHEN ie_status =6 THEN  3  ELSE ie_status END
			where	nr_sequencia = nr_seq_protocolo_w;
			
			nr_sequencia_w := pls_obter_seq_cmed_resumo(nr_seq_conta_w);
			
			insert into pls_conta_medica_resumo(
				nr_seq_conta,			nr_sequencia,			nr_seq_item,			dt_atualizacao,			nm_usuario,
				cd_procedimento,		ie_origem_proced,		nr_seq_material,		qt_item,			nr_seq_prestador_pgto,
				cd_pessoa_fisica,		nr_seq_competencia,		vl_medico,			vl_anestesista,			vl_auxiliares,
				vl_custo_operacional,		vl_materiais,			vl_calculado,			vl_apresentado,			vl_liberado,
				vl_beneficiario,		nr_seq_lote_pgto,		nr_seq_evento,			nr_seq_producao,		nr_seq_segurado,
				cd_guia,			nr_seq_prestador_atend,		nr_seq_participante,		nr_seq_grau_partic,		vl_glosa,
				vl_unitario,			vl_unitario_calculado,		cd_guia_referencia,		dt_competencia,			ie_status,
				ie_tipo_guia,			ds_item,			nm_prestador_pgto,		ie_tipo_item,			ds_tipo_item,
				nr_seq_prestador_exec,		nm_prestador_exec,		nr_seq_tipo_atendimento,	ie_origem_conta,		ie_tipo_despesa,
				nr_seq_pag_item,		ie_tipo_contratacao,		nr_seq_regra_valor,		pr_liberado,			nr_seq_prest_venc_trib,
				nr_seq_protocolo,		ie_proc_mat,			ie_status_protocolo,		nr_seq_periodo_pgto,		vl_taxa_adm,
				nr_seq_exame_coleta,		nr_seq_honorario_crit,		vl_taxa_adm_co,			vl_taxa_adm_mat,		pr_taxa_adm_co,
				pr_taxa_adm_mat,		nr_seq_prot_referencia,		nr_seq_grupo_ans,		nr_seq_fatura,			cd_cooperativa_pgto,
				cd_guia_prestador,		dt_item,			dt_competencia_pgto,		nr_protocolo_prestador,		vl_lib_original,
				nr_seq_regra_pgto,		ie_contador,			ds_log,				nr_seq_serv_pre_pgto,		vl_provisorio,
				ie_tipo_data_pagamento,		nr_seq_conta_mat,		nr_seq_conta_proc,		nr_seq_conta_proc_partic,	ie_situacao,
				nr_seq_esquema,			cd_conta_deb,			cd_conta_cred,			cd_classif_deb,			cd_classif_cred,
				cd_historico,			cd_conta_glosa_cred,		cd_conta_glosa_deb,		cd_historico_glosa,		cd_classif_glosa_cred,
				cd_classif_glosa_deb,		nr_seq_esquema_glosa,		vl_hm,				vl_co_pag,			vl_materiais_pag,
				vl_taxa_adm_pag,		nr_lote_contab_pag,		nr_lote_contabil_pag,		nr_lote_contabil_rev,		nr_seq_mvto_pag_cred,
				nr_seq_mvto_pag_deb,		nr_seq_mvto_rev_cred,		nr_seq_mvto_rev_deb,		ie_ato_cooperado,		nr_seq_regra_cooperado,
				cd_classif_prov_cred,		cd_classif_prov_deb,		cd_conta_prov_cred,		cd_conta_prov_deb,		cd_historico_prov,
				nr_lote_contabil_prov,		nr_seq_esquema_prov,		cd_historico_vl_ajuste)
			(SELECT	nr_seq_conta_w,			nr_sequencia_w,			nr_seq_item,			clock_timestamp(),			nm_usuario_p,
				cd_procedimento,		ie_origem_proced,		nr_seq_material,		qt_item * -1,			nr_seq_prestador_pgto,
				cd_pessoa_fisica,		nr_seq_competencia,		vl_medico * -1,			vl_anestesista * -1,		vl_auxiliares * -1,
				vl_custo_operacional * -1,	vl_materiais * -1,		vl_calculado * -1,		vl_apresentado * -1,		vl_liberado * -1,
				vl_beneficiario * -1,		nr_seq_lote_pgto,		nr_seq_evento,			nr_seq_producao,		nr_seq_segurado,
				cd_guia,			nr_seq_prestador_atend,		nr_seq_participante,		nr_seq_grau_partic,		vl_glosa * -1,
				vl_unitario,			vl_unitario_calculado,		cd_guia_referencia,		dt_competencia,			ie_status,
				ie_tipo_guia,			ds_item,			nm_prestador_pgto,		ie_tipo_item,			ds_tipo_item,
				nr_seq_prestador_exec,		nm_prestador_exec,		nr_seq_tipo_atendimento,	ie_origem_conta,		ie_tipo_despesa,
				nr_seq_pag_item_novo_w,		ie_tipo_contratacao,		nr_seq_regra_valor,		pr_liberado,			nr_seq_prest_venc_trib,
				nr_seq_protocolo,		ie_proc_mat,			ie_status_protocolo,		nr_seq_periodo_pgto,		vl_taxa_adm * -1,
				nr_seq_exame_coleta,		nr_seq_honorario_crit,		vl_taxa_adm_co * -1,		vl_taxa_adm_mat * -1,		pr_taxa_adm_co,
				pr_taxa_adm_mat,		nr_seq_prot_referencia,		nr_seq_grupo_ans,		nr_seq_fatura,			cd_cooperativa_pgto,
				cd_guia_prestador,		dt_item,			dt_competencia_pgto,		nr_protocolo_prestador,		vl_lib_original * -1,
				nr_seq_regra_pgto,		ie_contador,			ds_log,				nr_seq_serv_pre_pgto,		vl_provisorio * -1,
				ie_tipo_data_pagamento,		nr_seq_conta_mat,		nr_seq_conta_proc,		nr_seq_conta_proc_partic,	'I',
				nr_seq_esquema,			cd_conta_deb,			cd_conta_cred,			cd_classif_deb,			cd_classif_cred,
				cd_historico,			cd_conta_glosa_cred,		cd_conta_glosa_deb,		cd_historico_glosa,		cd_classif_glosa_cred,
				cd_classif_glosa_deb,		nr_seq_esquema_glosa,		vl_hm * -1,			vl_co_pag * -1,			vl_materiais_pag * -1,
				vl_taxa_adm_pag * -1,		0,				0,				0,				null,
				null,				null,				null,				ie_ato_cooperado,		nr_seq_regra_cooperado,
				cd_classif_prov_cred,		cd_classif_prov_deb,		cd_conta_prov_cred,		cd_conta_prov_deb,		cd_historico_prov,
				0,				nr_seq_esquema_prov,		cd_historico_vl_ajuste
			from	pls_conta_medica_resumo
			where	nr_seq_conta = nr_seq_conta_w
			and	nr_sequencia = nr_seq_item_resumo_w);
			
			
			
			-- Edgar 14/01/2015, OS 835457, gerar novo registro positivo pendente de pagamento
			nr_sequencia_w := pls_obter_seq_cmed_resumo(nr_seq_conta_w);
			insert into pls_conta_medica_resumo(
				nr_seq_conta,			nr_sequencia,			nr_seq_item,					dt_atualizacao,			nm_usuario,
				cd_procedimento,		ie_origem_proced,		nr_seq_material,				qt_item,			nr_seq_prestador_pgto,
				cd_pessoa_fisica,		nr_seq_competencia,		vl_medico,					vl_anestesista,			vl_auxiliares,
				vl_custo_operacional,		vl_materiais,			vl_calculado,					vl_apresentado,			vl_liberado,
				vl_beneficiario,		nr_seq_lote_pgto,		nr_seq_evento,					nr_seq_producao,		nr_seq_segurado,
				cd_guia,			nr_seq_prestador_atend,		nr_seq_participante,				nr_seq_grau_partic,		vl_glosa,
				vl_unitario,			vl_unitario_calculado,		cd_guia_referencia,				dt_competencia,			ie_status,
				ie_tipo_guia,			ds_item,			nm_prestador_pgto,				ie_tipo_item,			ds_tipo_item,
				nr_seq_prestador_exec,		nm_prestador_exec,		nr_seq_tipo_atendimento,			ie_origem_conta,		ie_tipo_despesa,
				nr_seq_pag_item,		ie_tipo_contratacao,		nr_seq_regra_valor,				pr_liberado,			nr_seq_prest_venc_trib,
				nr_seq_protocolo,		ie_proc_mat,			ie_status_protocolo,				nr_seq_periodo_pgto,		vl_taxa_adm,
				nr_seq_exame_coleta,		nr_seq_honorario_crit,		vl_taxa_adm_co,					vl_taxa_adm_mat,		pr_taxa_adm_co,
				pr_taxa_adm_mat,		nr_seq_prot_referencia,		nr_seq_grupo_ans,				nr_seq_fatura,			cd_cooperativa_pgto,
				cd_guia_prestador,		dt_item,			dt_competencia_pgto,				nr_protocolo_prestador,		vl_lib_original,
				nr_seq_regra_pgto,		ie_contador,			ds_log,						nr_seq_serv_pre_pgto,		vl_provisorio,
				ie_tipo_data_pagamento,		nr_seq_conta_mat,		nr_seq_conta_proc,				nr_seq_conta_proc_partic,	ie_situacao,
				nr_seq_esquema,			cd_conta_deb,			cd_conta_cred,					cd_classif_deb,			cd_classif_cred,
				cd_historico,			cd_conta_glosa_cred,		cd_conta_glosa_deb,				cd_historico_glosa,		cd_classif_glosa_cred,
				cd_classif_glosa_deb,		nr_seq_esquema_glosa,		vl_hm,						vl_co_pag,			vl_materiais_pag,
				vl_taxa_adm_pag,		nr_lote_contab_pag,		nr_lote_contabil_pag,				nr_lote_contabil_rev,		nr_seq_mvto_pag_cred,
				nr_seq_mvto_pag_deb,		nr_seq_mvto_rev_cred,		nr_seq_mvto_rev_deb,				ie_ato_cooperado,		nr_seq_regra_cooperado,
				cd_classif_prov_cred,		cd_classif_prov_deb,		cd_conta_prov_cred,				cd_conta_prov_deb,		cd_historico_prov,
				nr_lote_contabil_prov,		nr_seq_esquema_prov,		cd_historico_vl_ajuste)						
			(SELECT	nr_seq_conta_w,			nr_sequencia_w,			nr_seq_item,					clock_timestamp(),			nm_usuario_p,
				cd_procedimento,		ie_origem_proced,		nr_seq_material,				qt_item,			nr_seq_prestador_pgto,
				cd_pessoa_fisica,		nr_seq_competencia,		vl_medico,					vl_anestesista,			vl_auxiliares,
				vl_custo_operacional,		vl_materiais,			vl_calculado,					vl_apresentado,			vl_liberado,
				vl_beneficiario,		null,				nr_seq_evento,					nr_seq_producao,		nr_seq_segurado,
				cd_guia,			nr_seq_prestador_atend,		nr_seq_participante,				nr_seq_grau_partic,		vl_glosa,
				vl_unitario,			vl_unitario_calculado,		cd_guia_referencia,				dt_competencia,			ie_status,
				ie_tipo_guia,			ds_item,			nm_prestador_pgto,				ie_tipo_item,			ds_tipo_item,
				nr_seq_prestador_exec,		nm_prestador_exec,		nr_seq_tipo_atendimento,			ie_origem_conta,		ie_tipo_despesa,
				null,				ie_tipo_contratacao,		nr_seq_regra_valor,				pr_liberado,			null,
				nr_seq_protocolo,		ie_proc_mat,		  CASE WHEN ie_status_protocolo=6 THEN 3  ELSE ie_status_protocolo END , 	nr_seq_periodo_pgto,		vl_taxa_adm,
				nr_seq_exame_coleta,		nr_seq_honorario_crit,		vl_taxa_adm_co,					vl_taxa_adm_mat,		pr_taxa_adm_co,
				pr_taxa_adm_mat,		nr_seq_prot_referencia,		nr_seq_grupo_ans,				nr_seq_fatura,			cd_cooperativa_pgto,
				cd_guia_prestador,		dt_item,			dt_competencia_pgto,				nr_protocolo_prestador,		vl_lib_original,
				nr_seq_regra_pgto,		ie_contador,			ds_log,						nr_seq_serv_pre_pgto,		vl_provisorio,
				ie_tipo_data_pagamento,		nr_seq_conta_mat,		nr_seq_conta_proc,				nr_seq_conta_proc_partic,	'A',
				nr_seq_esquema,			cd_conta_deb,			cd_conta_cred,					cd_classif_deb,			cd_classif_cred,
				cd_historico,			cd_conta_glosa_cred,		cd_conta_glosa_deb,				cd_historico_glosa,		cd_classif_glosa_cred,
				cd_classif_glosa_deb,		nr_seq_esquema_glosa,		vl_hm,						vl_co_pag,			vl_materiais_pag,
				vl_taxa_adm_pag,		0,				0,						0,				null,
				null,				null,				null,						ie_ato_cooperado,		nr_seq_regra_cooperado,
				cd_classif_prov_cred,		cd_classif_prov_deb,		cd_conta_prov_cred,				cd_conta_prov_deb,		cd_historico_prov,
				0,				nr_seq_esquema_prov,		cd_historico_vl_ajuste
			from	pls_conta_medica_resumo
			where	nr_seq_conta = nr_seq_conta_w
			and	nr_sequencia = nr_seq_item_resumo_w);
			
			select	count(1)
			into STRICT	qt_conta_pos_estab_contab_w
			from	pls_conta_pos_estab_contab
			where	nr_seq_conta 		= nr_seq_conta_w
			and	nr_seq_conta_resumo 	= nr_seq_item_resumo_w;
			
			if (qt_conta_pos_estab_contab_w = 1) then
				update	pls_conta_pos_estab_contab
				set	nr_seq_conta_resumo	= nr_sequencia_w
				where	nr_seq_conta 		= nr_seq_conta_w
				and	nr_seq_conta_resumo 	= nr_seq_item_resumo_w;
			end if;
		end loop;
		close C05;
		end;
		
		-- se for do recurso de glosa vai retornar neste cursor e gerar os registros na resumo
		for r_c07_w in C07(	nr_seq_lote_w, nr_seq_pag_item_w) loop
				
			update	pls_conta_rec_resumo_item
			set	ie_situacao = 'I'
			where	nr_seq_conta = r_c07_w.nr_seq_conta
			and	nr_sequencia = r_c07_w.nr_sequencia;
			
			insert into pls_conta_rec_resumo_item(
				cd_classif_cred,		cd_classif_cred_apres,		cd_classif_deb,			cd_classif_deb_apres,		nr_sequencia,
				cd_conta_cred_apres,		cd_conta_deb,			cd_conta_deb_apres,		cd_historico,			cd_historico_apres,
				dt_atualizacao,			dt_atualizacao_nrec,		dt_competencia_pgto,		ie_ato_cooperado,		nm_usuario,
				nm_usuario_nrec,		nr_lote_contabil,		nr_lote_contabil_apres,		nr_seq_conta,			nr_seq_conta_rec,
				nr_seq_esquema,			nr_seq_esquema_apres,		nr_seq_evento,			nr_seq_grupo_ans,		nr_seq_lote_pgto,
				nr_seq_mat_rec,			nr_seq_pag_item,		nr_seq_periodo_pgto,		nr_seq_prestador_exec,		nr_seq_prestador_pgto,
				nr_seq_prest_venc_trib,		nr_seq_proc_partic_rec,		nr_seq_proc_rec,		nr_seq_regra_cooperado,		nr_seq_segurado,
				vl_glosa,			vl_liberado,			ie_situacao,			cd_conta_cred)
			(SELECT	cd_classif_cred,		cd_classif_cred_apres,		cd_classif_deb,			cd_classif_deb_apres,		nextval('pls_conta_rec_resumo_item_seq'),
				cd_conta_cred_apres,		cd_conta_deb,			cd_conta_deb_apres,		cd_historico,			cd_historico_apres,
				clock_timestamp(),			clock_timestamp(),			dt_competencia_pgto,		ie_ato_cooperado,		nm_usuario_p,
				nm_usuario_p,			nr_lote_contabil,		nr_lote_contabil_apres,		nr_seq_conta,			nr_seq_conta_rec,
				nr_seq_esquema,			nr_seq_esquema_apres,		nr_seq_evento,			nr_seq_grupo_ans,		nr_seq_lote_pgto,
				nr_seq_mat_rec,			nr_seq_pag_item_novo_w,		nr_seq_periodo_pgto,		nr_seq_prestador_exec,		nr_seq_prestador_pgto,
				nr_seq_prest_venc_trib,		nr_seq_proc_partic_rec,		nr_seq_proc_rec,		nr_seq_regra_cooperado,		nr_seq_segurado,
				vl_glosa * -1,			vl_liberado * -1,		'I',				cd_conta_cred
			from	pls_conta_rec_resumo_item
			where 	nr_sequencia = r_c07_w.nr_sequencia);
			
			insert into pls_conta_rec_resumo_item(
				cd_classif_cred,		cd_classif_cred_apres,		cd_classif_deb,			cd_classif_deb_apres,		nr_sequencia,
				cd_conta_cred_apres,		cd_conta_deb,			cd_conta_deb_apres,		cd_historico,			cd_historico_apres,
				dt_atualizacao,			dt_atualizacao_nrec,		dt_competencia_pgto,		ie_ato_cooperado,		nm_usuario,
				nm_usuario_nrec,		nr_lote_contabil,		nr_lote_contabil_apres,		nr_seq_conta,			nr_seq_conta_rec,
				nr_seq_esquema,			nr_seq_esquema_apres,		nr_seq_evento,			nr_seq_grupo_ans,		nr_seq_lote_pgto,
				nr_seq_mat_rec,			nr_seq_pag_item,		nr_seq_periodo_pgto,		nr_seq_prestador_exec,		nr_seq_prestador_pgto,
				nr_seq_prest_venc_trib,		nr_seq_proc_partic_rec,		nr_seq_proc_rec,		nr_seq_regra_cooperado,		nr_seq_segurado,
				cd_conta_cred,			vl_glosa,			vl_liberado,			ie_situacao)
			(SELECT	cd_classif_cred,		cd_classif_cred_apres,		cd_classif_deb,			cd_classif_deb_apres,		nextval('pls_conta_rec_resumo_item_seq'),
				cd_conta_cred_apres,		cd_conta_deb,			cd_conta_deb_apres,		cd_historico,			cd_historico_apres,
				clock_timestamp(),			clock_timestamp(),			dt_competencia_pgto,		ie_ato_cooperado,		nm_usuario_p,
				nm_usuario_p,			nr_lote_contabil,		nr_lote_contabil_apres,		nr_seq_conta,			nr_seq_conta_rec,
				nr_seq_esquema,			nr_seq_esquema_apres,		nr_seq_evento,			nr_seq_grupo_ans,		null,
				nr_seq_mat_rec,			null,				nr_seq_periodo_pgto,		nr_seq_prestador_exec,		nr_seq_prestador_pgto,
				nr_seq_prest_venc_trib,		nr_seq_proc_partic_rec,		nr_seq_proc_rec,		nr_seq_regra_cooperado,		nr_seq_segurado,
				cd_conta_cred,			vl_glosa,			vl_liberado,			'A'
			from	pls_conta_rec_resumo_item
			where	nr_sequencia = r_c07_w.nr_sequencia);
		end loop;
	end loop;
	close C02;

	open C03;
	loop
	fetch C03 into
		nr_seq_pag_venc_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		select	nextval('pls_pag_prest_vencimento_seq')
		into STRICT	nr_seq_pag_prest_venc_w
		;
		
		insert into pls_pag_prest_vencimento(
			nr_sequencia,				nm_usuario,			dt_atualizacao,			nm_usuario_nrec,		dt_atualizacao_nrec,
			nr_seq_pag_prestador,			vl_liquido,			vl_vencimento,			nr_nota_fiscal,			nr_seq_evento_movto,
			vl_imposto_munic,			vl_ir,				dt_vencimento,			dt_venc_original,		ie_proximo_pgto,
			vl_glosa)			
		(SELECT	nr_seq_pag_prest_venc_w,		nm_usuario_p,			clock_timestamp(),			nm_usuario_p,			clock_timestamp(),
			nr_seq_pag_prestador_w,			vl_liquido * -1,		vl_vencimento * -1,		nr_nota_fiscal,			nr_seq_evento_movto,
			vl_imposto_munic,			vl_ir,				dt_vencimento,			dt_venc_original,		CASE WHEN coalesce(nr_seq_evento_movto::text, '') = '' THEN  ie_proximo_pgto  ELSE 'S' END ,
			vl_glosa * -1
		from	pls_pag_prest_vencimento
		where	nr_sequencia = nr_seq_pag_venc_w);
		
		select	max(ie_proximo_pgto)
		into STRICT	ie_proximo_pgto_w
		from	pls_pag_prest_vencimento
		where	nr_sequencia	= nr_seq_pag_venc_w;
		
		open C04;
		loop
		fetch C04 into
			nr_seq_pag_venc_trib_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			
			select	nextval('pls_pag_prest_venc_trib_seq')
			into STRICT	nr_seq_pag_prest_venc_trib_n_w
			;
			
			insert into pls_pag_prest_venc_trib(
				nm_usuario,			dt_atualizacao,			nm_usuario_nrec,		dt_atualizacao_nrec,		nr_sequencia,
				nr_seq_vencimento,		pr_tributo,			vl_nao_retido,			vl_base_nao_retido,		vl_trib_adic,
				vl_base_adic,			ie_pago_prev,			vl_desc_base,			vl_reducao,			cd_darf,
				nr_seq_trans_reg,		cd_variacao,			ie_periodicidade,		nr_seq_trans_baixa,		cd_tributo,
				dt_imposto,			vl_base_calculo,		vl_imposto,			ie_tipo_contratacao,		nr_seq_lote_trib_prest,
				nr_seq_trib_estornado,		ie_filantropia,			cd_beneficiario,		vl_base_producao)
			(SELECT	nm_usuario_p,			clock_timestamp(),			nm_usuario_p,			clock_timestamp(), 			nr_seq_pag_prest_venc_trib_n_w,
				nr_seq_pag_prest_venc_w,	pr_tributo,			vl_nao_retido * -1,		vl_base_nao_retido * -1,	vl_trib_adic * -1,
				vl_base_adic * -1,		ie_pago_prev,			vl_desc_base * -1,		vl_reducao * -1,		cd_darf,
				nr_seq_trans_reg,		cd_variacao,			ie_periodicidade,		nr_seq_trans_baixa,		cd_tributo,
				dt_imposto,			vl_base_calculo * -1,		vl_imposto * -1,		ie_tipo_contratacao,		nr_seq_lote_trib_prest,
				nr_seq_trib_estornado,		ie_filantropia,			cd_beneficiario,		vl_base_producao * -1
			from	pls_pag_prest_venc_trib
			where	nr_sequencia = nr_seq_pag_venc_trib_w);
			
			for r_C02_w in C02 loop
				for r_C08_w in C08(r_C02_w.nr_sequencia, nr_seq_pag_venc_trib_w) loop
					select	max(nr_sequencia)
					into STRICT	nr_seq_pagamento_item_novo_w
					from	pls_pagamento_item
					where	nr_seq_pagamento = nr_seq_pag_prestador_w
					and	nr_seq_evento = r_C02_w.nr_seq_evento;
					
					insert into pls_pag_item_trib(
						cd_classif_cred,	cd_classif_deb,		cd_conta_cred,			cd_conta_deb,		cd_historico,
						dt_atualizacao,		dt_atualizacao_nrec,	ie_tipo_contratacao,		nm_usuario,		nr_seq_venc_trib,
						nr_lote_contabil,	nr_seq_esquema,		nr_seq_pagamento,		nm_usuario_nrec,	nr_sequencia,
						vl_evento,		vl_evento_origem)
					(SELECT	cd_classif_cred,	cd_classif_deb,		cd_conta_cred,			cd_conta_deb,		cd_historico,
						dt_atualizacao,		dt_atualizacao_nrec,	ie_tipo_contratacao,		nm_usuario,		nr_seq_pag_prest_venc_trib_n_w,
						nr_lote_contabil,	nr_seq_esquema,		nr_seq_pagamento_item_novo_w,	nm_usuario_nrec,	nextval('pls_pag_item_trib_seq'),
						vl_evento * (-1),	vl_evento_origem * (-1)
					from	pls_pag_item_trib
					where	nr_sequencia = r_C08_w.nr_sequencia);
				end loop;
			end loop;
			
			end;
		end loop;
		close C04;
		
		open C06;
		loop
		fetch C06 into
			nr_seq_pag_venc_valor_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin
			insert into pls_pag_prest_venc_valor(
				dt_atualizacao,			nm_usuario,			dt_atualizacao_nrec,			nm_usuario_nrec,	nr_sequencia,
				ie_tipo_valor,			nr_seq_evento,			nr_seq_vencimento,			vl_vencimento)
			(SELECT	clock_timestamp(),			nm_usuario,			clock_timestamp(),				nm_usuario,		nextval('pls_pag_prest_venc_valor_seq'),
				ie_tipo_valor,			nr_seq_evento,			nr_seq_pag_prest_venc_w,		vl_vencimento * -1
			from	pls_pag_prest_venc_valor
			where	nr_sequencia = nr_seq_pag_venc_valor_w);
			
			select	ie_tipo_valor
			into STRICT	ie_tipo_valor_w
			from	pls_pag_prest_venc_valor
			where	nr_sequencia = nr_seq_pag_venc_valor_w;
			
			if (ie_tipo_valor_w = 'PP') and (ie_proximo_pgto_w = 'N') then
				update	pls_pag_prest_vencimento
				set	ie_proximo_pgto	= 'S'
				where	nr_sequencia	= nr_seq_pag_prest_venc_w;
			end if;
			end;
		end loop;
		close C06;
		
		for r_C09_w in C09( nr_seq_pag_venc_w ) loop
			insert into pls_pag_venc_trib_prev(
				cd_tributo,			dt_atualizacao,			dt_atualizacao_nrec,			dt_imposto,		nr_sequencia,
				nm_usuario_nrec,		nm_usuario,			nr_seq_vencimento,			pr_tributo,		vl_base_adic,
				vl_base_calculo,		vl_base_nao_retido,		vl_desc_base,				vl_imposto,		vl_nao_retido,
				vl_reducao,			vl_trib_adic)
			(SELECT	cd_tributo,			dt_atualizacao,			dt_atualizacao_nrec,			dt_imposto,		nextval('pls_pag_venc_trib_prev_seq'),
				nm_usuario_nrec,		nm_usuario,			nr_seq_pag_prest_venc_w,		pr_tributo,		vl_base_adic * (-1),
				vl_base_calculo * (-1),		vl_base_nao_retido * (-1),	vl_desc_base * (-1),			vl_imposto * (-1),	vl_nao_retido * (-1),
				vl_reducao * (-1),		vl_trib_adic * (-1)
			from	pls_pag_venc_trib_prev
			where	nr_sequencia = r_c09_w.nr_sequencia);
		end loop;
		
		select	max(nr_titulo),
			max(nr_titulo_receber)
		into STRICT	nr_titulo_w,
			nr_titulo_rec_w
		from	pls_pag_prest_vencimento
		where	nr_sequencia = nr_seq_pag_venc_w;
		
		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
			CALL cancelar_titulo_pagar(nr_titulo_w, nm_usuario_p, coalesce(dt_cancelamento_p, clock_timestamp()));
			
			update	titulo_pagar
			set	nr_seq_pls_pag_prest	 = NULL,
				nr_seq_pls_venc_trib	 = NULL,
				ds_observacao_titulo	= 	('Este titulo havia sido gerado pelo lote de pagamento ' ||
								nr_seq_lote_w || ' e o prestador ' || nr_seq_prestador_w || '.')
			where	nr_titulo		= nr_titulo_w;
			
			update 	pls_pag_prest_vencimento
			set	nr_titulo 		 = NULL
			where	nr_seq_pag_prestador 	= nr_seq_pag_venc_w
			and	nr_titulo		= nr_titulo_w;
		elsif (nr_titulo_rec_w IS NOT NULL AND nr_titulo_rec_w::text <> '') then
			CALL cancelar_titulo_receber(nr_titulo_rec_w, nm_usuario_p, 'N',clock_timestamp());
			
			update	titulo_receber
			set	ds_observacao_titulo = ('Este titulo havia sido gerado pelo lote de pagamento ' || nr_seq_lote_w || ' e o prestador ' || nr_seq_prestador_w || '.')
			where	nr_titulo = nr_titulo_rec_w;
			
			update 	pls_pag_prest_vencimento
			set	nr_titulo_receber	 = NULL
			where	nr_seq_pag_prestador 	= nr_seq_pag_venc_w
			and	nr_titulo_receber	= nr_titulo_rec_w;
		end if;
		end;
	end loop;
	close C03;

	update	pls_rec_glosa_proc
	set	nr_seq_pag_prest	 = NULL,
		nr_seq_lote_pgto	 = NULL
	where	nr_seq_pag_prest	= nr_seq_pag_prestador_p;

	update	pls_rec_glosa_mat
	set	nr_seq_pag_prest	 = NULL,
		nr_seq_lote_pgto	 = NULL
	where	nr_seq_pag_prest	= nr_seq_pag_prestador_p;

	update	pls_pag_prest_vencimento x
	set	x.nr_seq_evento_movto	 = NULL
	where	x.nr_seq_evento_movto	in (	SELECT	a.nr_sequencia
						from	pls_evento_movimento	a
						where	a.nr_seq_lote_pgto	= nr_seq_lote_w
						and	a.nr_seq_prestador	= nr_seq_prestador_w);
						
	update	pls_pagamento_prestador
	set	dt_cancelamento = coalesce(dt_cancelamento_p, clock_timestamp()),
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	nr_sequencia 	= nr_seq_pag_prestador_p;

	-- era feito um update no valor bruto do lote levando como base os valores da tabela PLS_PAGAMENTO_PRESTADOR.VL_PAGAMENTO

	-- porem este campo foi alterado para apos gerar os vencimento apresentar o valor liquido, por isso retire este update e

	-- passo a usar a function que retorna os valores dos evento de provento menos os de desconto, valor bruto antes dos impostos
	vl_pagamento_w := pls_obter_dados_lote_pagamento(nr_seq_lote_w, 'VLB');  --retirado o to_number, pois o mesmo estava  retirando a virgular, e assim em tela com a mascara do dicionario era considerado o valor todo para depois aplicar a mascara o valor ficava errado;
	update	pls_lote_pagamento
	set	vl_lote 	= vl_pagamento_w,
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_lote_w;

	dbms_application_info.SET_ACTION('');

	commit;

	select	coalesce(max(ie_concil_contab), 'N')
	into STRICT	ie_concil_contab_w
	from 	pls_visible_false;

	if (ie_concil_contab_w = 'S') then
		begin

		delete	FROM ctb_documento	b
		where	b.cd_tipo_lote_contabil = 41
		and	exists ( SELECT	1
				from 	pls_conta_medica_resumo 	a,
					pls_lote_pagamento		b,
					pls_pagamento_prestador		c
				where	a.nr_seq_lote_pgto 	= b.nr_sequencia
				and	c.nr_seq_lote		= b.nr_sequencia	
				and	b.nr_documento 		= a.nr_sequencia
				and	a.nr_seq_prestador_pgto = c.nr_seq_prestador
				and	b.nr_sequencia		= nr_seq_lote_w
				and	c.nr_sequencia		= nr_seq_pag_prestador_p);
		commit;

		delete	FROM ctb_documento	b
		where	b.cd_tipo_lote_contabil = 41
		and	exists ( SELECT	1
				from 	pls_pag_prest_venc_trib		a,
					pls_lote_pagamento		b,
					pls_pagamento_prestador		c,
					pls_pag_prest_vencimento	d
				where	b.nr_sequencia = c.nr_seq_lote
				and	d.nr_sequencia = a.nr_seq_vencimento
				and	c.nr_sequencia = d.nr_seq_pag_prestador
				and	b.nr_sequencia = nr_seq_lote_w
				and	c.nr_sequencia = nr_seq_pag_prestador_p);
		commit;

		delete	FROM ctb_documento	b
		where	b.cd_tipo_lote_contabil = 41
		and	exists ( SELECT	1
				from 	pls_evento_movimento	a,
					pls_lote_evento		b,
					pls_lote_pagamento 	c
				where	b.nr_sequencia		= a.nr_seq_lote
				and	c.nr_sequencia		= a.nr_seq_lote_pgto
				and	c.nr_sequencia		= nr_seq_lote_w
				and	c.nr_sequencia		= nr_seq_pag_prestador_p);
				
		commit;

		end;
	end if;
end if;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cancelar_pagto_prestador ( nr_seq_pag_prestador_p bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, dt_cancelamento_p timestamp, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

