-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dmed_mensal_reembolso ( nr_seq_dmed_p bigint, dt_referencia_p timestamp, cd_estabelecimento_p bigint, ie_cpf_p text, ie_idade_p text, ie_estrangeiro_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
	no DTOP quando o dependente é o pagador e possui sequencia de titular,
	o responsável deve ser o titular
	como é feito desta forma da dmed_mensal_dependente_titular,
	aqui precisa ser feito desta forma tbm, porque o RDTOP precisa estar
	associado ao DTOP, se aqui pegar um responsável diferente não vai ficar
	associado ao registros DTOP
-------------------------------------------------------------------------------------------------------------------
Referências:
	DMED_MENSAL_TITULAR_PLANO
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
vl_total_w			double precision;
nr_seq_titular_w			bigint;
nr_titulo_w			bigint;
cd_pessoa_fisica_benef_w		varchar(15);
cd_pessoa_fisica_pagador_w		varchar(15);
cd_pessoa_jur_prest_serv_w		varchar(15);
cd_pessoa_fisica_responsavel_w	varchar(15);
cd_pessoa_fis_prest_serv_w		varchar(15);
cd_pessoa_fisica_titular_w		varchar(15);
dt_ano_calendario_w		varchar(5);
dt_liquidacao_w			timestamp;
cd_cgc_w			varchar(14);
cd_cpf_w				varchar(20);
contador_w			bigint;
qt_registros_w			bigint;
qt_registros_ww			bigint;
ie_cpf_w				varchar(2)	:= ie_cpf_p;
nr_cpf_w				varchar(11);
idade_w				bigint;
dt_nascimento_w			timestamp;
dt_ref_inicial_w			timestamp;
dt_ref_final_w			timestamp;
ie_considerar_ca_pj_w		dmed_regra_geral.ie_considerar_ca_pj%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
ie_tipo_contratacao_w		pls_plano.ie_tipo_contratacao%type;
ie_permite_contrato_w		boolean;
nr_seq_contrato_w		pls_contrato_pagador.nr_seq_contrato%type;
qt_cgc_administradora_w		bigint;

c01 CURSOR FOR
	--titulares
	SELECT	b.nr_sequencia,
		p.nr_titulo,
		b.vl_total,
		p.dt_liquidacao,
		a.cd_pessoa_fisica cd_pessoa_fisica_benef,
		f.cd_pessoa_fisica cd_pessoa_fisica_pagador, --pagador das mensalidades, do titulos a receber
		a.cd_pessoa_fisica cd_pessoa_fisica_titular,
		b.cd_cgc cd_pessoa_jur_prest_serv,
		b.cd_pessoa_fisica cd_pessoa_fis_prest_serv,
		a.nr_seq_titular,
		a.nr_sequencia nr_seq_segurado,
		f.nr_seq_contrato
	FROM pls_plano t, titulo_pagar p, pls_protocolo_conta d, pls_conta b, pls_segurado a
LEFT OUTER JOIN pls_contrato_pagador f ON (a.nr_seq_pagador = f.nr_sequencia)
WHERE d.nr_sequencia 		= p.nr_seq_reembolso and a.nr_sequencia		= d.nr_seq_segurado and d.nr_sequencia		= b.nr_seq_protocolo and t.nr_sequencia		= a.nr_seq_plano  and d.ie_tipo_protocolo	= 'R' and coalesce(a.nr_seq_titular::text, '') = '' and b.vl_total > 0 and p.ie_situacao <> 'C' --and	((t.ie_tipo_contratacao = 'I') or (t.ie_tipo_contratacao in('CE','CA') and f.cd_pessoa_fisica is not null))
  and p.dt_liquidacao between dt_ref_inicial_w and dt_ref_final_w and ((a.cd_estabelecimento = coalesce(cd_estabelecimento_p ,a.cd_estabelecimento))
	or   	((coalesce(a.cd_estabelecimento::text, '') = '') and (coalesce(cd_estabelecimento_p::text, '') = '')))
	
union

	--dependentes
	SELECT	b.nr_sequencia,
		p.nr_titulo,
		b.vl_total,
		p.dt_liquidacao,
		a.cd_pessoa_fisica cd_pessoa_fisica_benef,
		f.cd_pessoa_fisica cd_pessoa_fisica_pagador,
		(select	s.cd_pessoa_fisica
		from	pls_segurado	s
		where	s.nr_sequencia	= a.nr_seq_titular)
		 cd_pessoa_fisica_titular,
		b.cd_cgc cd_pessoa_jur_prest_serv,
		b.cd_pessoa_fisica cd_pessoa_fis_prest_serv,
		a.nr_seq_titular,
		a.nr_sequencia nr_seq_segurado,
		f.nr_seq_contrato
	FROM pls_plano t, titulo_pagar p, pls_protocolo_conta d, pls_conta b, pls_segurado a
LEFT OUTER JOIN pls_contrato_pagador f ON (a.nr_seq_pagador = f.nr_sequencia)
WHERE d.nr_sequencia 		= p.nr_seq_reembolso and a.nr_sequencia		= d.nr_seq_segurado  and d.nr_sequencia		= b.nr_seq_protocolo and t.nr_sequencia		= a.nr_seq_plano and d.ie_tipo_protocolo	= 'R' and (a.nr_seq_titular IS NOT NULL AND a.nr_seq_titular::text <> '') and b.vl_total > 0 and p.ie_situacao <> 'C' --and	(t.ie_tipo_contratacao in ('I','CA','CE') and f.cd_pessoa_fisica is not null)
  and p.dt_liquidacao between dt_ref_inicial_w and dt_ref_final_w and ((a.cd_estabelecimento = coalesce(cd_estabelecimento_p ,a.cd_estabelecimento))
	or   	((coalesce(a.cd_estabelecimento::text, '') = '') and (coalesce(cd_estabelecimento_p::text, '') = ''))) order by
		3,
		1,
		2;

type 		fetch_array is table of C01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_movimentacao_w	vetor;

BEGIN
dt_ref_inicial_w	:= trunc(dt_referencia_p, 'mm');
dt_ref_final_w		:= fim_dia(fim_mes(dt_referencia_p));

select 	coalesce(max(nr_idade),16)
into STRICT 	idade_w
from 	dmed_regra_geral;

select 	coalesce(max(ie_considerar_ca_pj), 'N')
into STRICT	ie_considerar_ca_pj_w
from	dmed_regra_geral;

open C01;
loop
fetch C01 bulk collect into s_array limit 1000;
	vetor_movimentacao_w(i)	:= s_array;
	i			:= i + 1;
EXIT WHEN NOT FOUND; /* apply on C01 */
end loop;
close C01;

for i in 1..vetor_movimentacao_w.count loop
	begin
	s_array := vetor_movimentacao_w(i);
	for z in 1..s_array.count loop
		nr_titulo_w			:= s_array[z].nr_titulo;
		vl_total_w			:= s_array[z].vl_total;
		dt_liquidacao_w			:= s_array[z].dt_liquidacao;
		cd_pessoa_fisica_benef_w	:= s_array[z].cd_pessoa_fisica_benef;
		cd_pessoa_fisica_pagador_w	:= s_array[z].cd_pessoa_fisica_pagador;
		cd_pessoa_fisica_titular_w	:= s_array[z].cd_pessoa_fisica_titular;
		cd_pessoa_jur_prest_serv_w	:= s_array[z].cd_pessoa_jur_prest_serv;
		cd_pessoa_fis_prest_serv_w	:= s_array[z].cd_pessoa_fis_prest_serv;
		nr_seq_titular_w		:= s_array[z].nr_seq_titular;
		nr_seq_segurado_w		:= s_array[z].nr_seq_segurado;
		nr_seq_contrato_w		:= s_array[z].nr_seq_contrato;

		begin

		select	coalesce(max(b.ie_tipo_contratacao), 'CE')
		into STRICT	ie_tipo_contratacao_w
		from	pls_plano b
		where	b.nr_sequencia = pls_obter_produto_benef(nr_seq_segurado_w,dt_liquidacao_w);

		if ie_considerar_ca_pj_w = 'S' then
			ie_permite_contrato_w := ((ie_tipo_contratacao_w in ('I','CA')) or (ie_tipo_contratacao_w in ('CE') and (cd_pessoa_fisica_pagador_w IS NOT NULL AND cd_pessoa_fisica_pagador_w::text <> '')));

			if (ie_tipo_contratacao_w = 'CA') then
				begin

				qt_cgc_administradora_w := 0;

				select	count(1)
				into STRICT	qt_cgc_administradora_w
				from	pls_contrato a
				where	a.nr_sequencia = nr_seq_contrato_w
				and 	(a.cd_cgc_administradora IS NOT NULL AND a.cd_cgc_administradora::text <> '');
				exception
				when others then
					qt_cgc_administradora_w:= 0;
				end;

				if (qt_cgc_administradora_w > 0) then
					ie_permite_contrato_w := false;
				end if;

			end if;
		else
			ie_permite_contrato_w := ((ie_tipo_contratacao_w in ('I')) or (ie_tipo_contratacao_w in ('CE','CA') and (cd_pessoa_fisica_pagador_w IS NOT NULL AND cd_pessoa_fisica_pagador_w::text <> '')));
		end if;

		if (ie_permite_contrato_w) then

			cd_pessoa_fisica_responsavel_w	:= coalesce(cd_pessoa_fisica_pagador_w, cd_pessoa_fisica_titular_w);

			begin
			select	nr_cpf,
				dt_nascimento
			into STRICT	nr_cpf_w,
				dt_nascimento_w
			from	pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_responsavel_w;
			exception when others then
				nr_cpf_w := '';
				dt_nascimento_w := null;
			end;

			if	((ie_cpf_w = 'CC' AND nr_cpf_w IS NOT NULL AND nr_cpf_w::text <> '') or
				((ie_cpf_w = 'SC') and (coalesce(nr_cpf_w::text, '') = '')) or (ie_cpf_w = 'AM')) then
				insert into dmed_titulos_mensal(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_dmed_mensal,
					nr_documento,
					ie_tipo_documento,
					cd_pessoa_titular,
					cd_pessoa_beneficiario,
					cd_cgc,
					cd_pf_prestador,
					vl_pago,
					dt_liquidacao,
					ie_prestadora_ops)
				values (nextval('dmed_titulos_mensal_seq'),
					clock_timestamp(),
					'Tasy4',
					clock_timestamp(),
					'Tasy4',
					nr_seq_dmed_p,
					nr_titulo_w,
					'RE',
					cd_pessoa_fisica_responsavel_w,
					cd_pessoa_fisica_benef_w,
					cd_pessoa_jur_prest_serv_w,
					cd_pessoa_fis_prest_serv_w,
					vl_total_w,
					dt_liquidacao_w,
					'O');

				contador_w	:= contador_w + 1;

				if (contador_w mod 100 = 0) then
					commit;
				end if;

			end if;
		end if;
		end;
	end loop;
	end;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dmed_mensal_reembolso ( nr_seq_dmed_p bigint, dt_referencia_p timestamp, cd_estabelecimento_p bigint, ie_cpf_p text, ie_idade_p text, ie_estrangeiro_p text) FROM PUBLIC;

