-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE transf_acomp_paciente_leitos ( nr_atendimento_p bigint, cd_setor_paciente_p bigint, cd_unid_bas_pac_p text, cd_unid_comp_pac_p text, nm_usuario_p text, ie_consiste_sexo_p text default 'N', ie_considera_ctrl_visita_p text default 'N', nr_seq_interno_para_acomp_p bigint default null) AS $body$
DECLARE


cd_setor_acomp_w		bigint;
cd_unid_bas_acom_w		varchar(10);
cd_unid_comp_acom_w		varchar(10);
cd_unid_comp_acom_ww		varchar(10);
cd_paciente_reserva_w		bigint;
nm_pac_reserva_w		varchar(40);
nr_agrupamento_acom_w		integer;
nr_agrupamento_acom_ww		integer;
dt_acompanhante_w		atendimento_acompanhante.dt_acompanhante%type;
cd_unidade_basica_acom_ww	varchar(10);
nr_seq_interno_w		unidade_atendimento.nr_seq_interno%type;
nr_seq_interno_ww		unidade_atendimento.nr_seq_interno%type;
nr_seq_interno_ultimo_w 	unidade_atendimento.nr_seq_interno%type;
cd_tipo_acomodacao_w		atend_paciente_unidade.cd_tipo_acomodacao%type;



c01 CURSOR FOR
	SELECT	cd_unidade_basica,
		cd_unidade_compl,
		cd_setor_atendimento,
		cd_paciente_reserva cd_pessoa_acompanhante,
		substr(nm_paciente_reserva,1,40) nm_pac_reserva,
		null dt_acompanhante
	from	w_unid_atend_temp t
	where	t.ie_status_unidade = 'M'
	and 	t.nr_atendimento_acomp = nr_atendimento_p;
	
c02 CURSOR FOR
	SELECT	nr_seq_interno
	from    unidade_atendimento
	where	cd_setor_atendimento = cd_setor_paciente_p
	and	cd_unidade_basica = cd_unid_bas_pac_p
	
union all

	SELECT   nr_seq_interno
	from     unidade_atendimento
	where    cd_setor_atendimento = cd_setor_paciente_p
	and      cd_unidade_basica = cd_unid_bas_acom_w;
	

BEGIN
select 	a.nr_agrupamento
into STRICT	nr_agrupamento_acom_w
from	unidade_atendimento a
where	a.cd_unidade_basica	= cd_unid_bas_pac_p
and 	a.cd_unidade_compl	= cd_unid_comp_pac_p
and	a.cd_setor_atendimento	= cd_setor_paciente_p;


if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (cd_setor_paciente_p IS NOT NULL AND cd_setor_paciente_p::text <> '') and (cd_unid_bas_pac_p IS NOT NULL AND cd_unid_bas_pac_p::text <> '') and
	((cd_unid_comp_pac_p IS NOT NULL AND cd_unid_comp_pac_p::text <> '') or (nr_agrupamento_acom_w IS NOT NULL AND nr_agrupamento_acom_w::text <> '')) then


	if (Obter_se_leito_livre_acomp(nr_atendimento_p, cd_unid_bas_pac_p, cd_unid_comp_pac_p, cd_setor_paciente_p) = 'N') then
		/*Não é possível transferir o paciente pois não há vaga(s) '+chr(13) +chr(10)+
						' na mesma unidade básica para o(s) acompanhante(s)! #@#@');*/
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(261610);
	end if;


	open C01;
	loop
	fetch C01 into
		cd_unid_bas_acom_w,
		cd_unid_comp_acom_w,
		cd_setor_acomp_w,
		cd_paciente_reserva_w,
		nm_pac_reserva_w,
		dt_acompanhante_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		if (cd_setor_acomp_w IS NOT NULL AND cd_setor_acomp_w::text <> '') then

			select   max(nr_seq_interno)
			into STRICT	 nr_seq_interno_ww
			from	 unidade_atendimento
			where    cd_unidade_basica	= cd_unid_bas_acom_w
			and      cd_unidade_compl	= cd_unid_comp_acom_w
			and	 cd_setor_atendimento	= cd_setor_acomp_w;

            if (nr_seq_interno_ww IS NOT NULL AND nr_seq_interno_ww::text <> '') then
                if (nr_seq_interno_para_acomp_p IS NOT NULL AND nr_seq_interno_para_acomp_p::text <> '') then
                  nr_seq_interno_ww := nr_seq_interno_para_acomp_p;
                end if;
			    panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(wheb_usuario_pck.get_cd_estabelecimento, nr_seq_interno_ww, nm_usuario_p);
	    end if;
		elsif (nr_seq_interno_para_acomp_p IS NOT NULL AND nr_seq_interno_para_acomp_p::text <> '') then
            CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(wheb_usuario_pck.get_cd_estabelecimento, nr_seq_interno_para_acomp_p, nm_usuario_p);
        end if;

        if (coalesce(nr_seq_interno_para_acomp_p::text, '') = '') then
            Select	max(cd_unidade_compl)
            into STRICT	cd_unid_comp_acom_ww
            from	unidade_atendimento
            where   cd_unidade_basica	 = cd_unid_bas_pac_p
            and     cd_unidade_compl	 <> cd_unid_comp_pac_p
            and	    cd_setor_atendimento = cd_setor_paciente_p
            and	    ie_status_unidade in ('L');
        else
            begin
                Select	cd_unidade_compl
               into STRICT	cd_unid_comp_acom_ww
               from	unidade_atendimento
               where   nr_seq_interno = nr_seq_interno_para_acomp_p;
            exception
                when others then
                    cd_unid_comp_acom_ww := null;
            end;

        end if;

		if (coalesce(cd_unid_comp_acom_ww::text, '') = '') then

			select	max(cd_unidade_basica)
			into STRICT	cd_unidade_basica_acom_ww
			from 	unidade_atendimento
			where	cd_unidade_basica	<> cd_unid_bas_pac_p
			and	nr_agrupamento	= nr_agrupamento_acom_w
			and	cd_setor_atendimento	= cd_setor_paciente_p
			and 	ie_status_unidade IN ('L');

			if (cd_unidade_basica_acom_ww IS NOT NULL AND cd_unidade_basica_acom_ww::text <> '') and (nr_agrupamento_acom_w IS NOT NULL AND nr_agrupamento_acom_w::text <> '') then

                if (ie_consiste_sexo_p = 'S') and (obter_se_leito_sexo_acomp(cd_setor_paciente_p, cd_unid_bas_pac_p, cd_unidade_basica_acom_ww, nr_atendimento_p, dt_acompanhante_w, cd_paciente_reserva_w) = 'N') then
                    CALL Wheb_mensagem_pck.exibir_mensagem_abort(obter_desc_expressao(880002));
                end if;

				update	unidade_atendimento
				set	ie_status_unidade	=  'M',
					nr_atendimento_Acomp	= nr_atendimento_p,
					cd_paciente_reserva	= cd_paciente_reserva_w,
					nm_pac_reserva		= nm_pac_reserva_w,
					nm_usuario_reserva	= Nm_Usuario_p,
					nm_usuario		= Nm_Usuario_p,
					dt_atualizacao		= clock_timestamp(),
					ie_bloqueio_transf	= 'N'
				where   cd_unidade_basica	= cd_unidade_basica_acom_ww
				--and     cd_unidade_compl	= cd_unid_comp_acom_ww
				and	cd_setor_atendimento	= cd_setor_paciente_p;

			else

				/*'Sem unidade complementares livres! '||chr(13)
								||'Setor: '||cd_setor_paciente_p||chr(13)
								||'Unidade Basica: '||cd_unid_bas_pac_p||chr(13)
								||'Atendimento Pac: '||nr_atendimento_p);*/
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(261611,	'SETOR='||to_char(cd_setor_paciente_p) || ';' ||
																'UNIDADE=' || cd_unid_bas_pac_p  || ';' ||
																'ATENDIMENTO= '|| to_char(nr_atendimento_p));
			end if;
		end if;

		if (cd_unid_comp_acom_ww IS NOT NULL AND cd_unid_comp_acom_ww::text <> '') then
			if (ie_consiste_sexo_p = 'S') and (obter_se_leito_sexo_acomp(cd_setor_paciente_p, cd_unid_bas_pac_p, cd_unid_comp_acom_ww, nr_atendimento_p, dt_acompanhante_w, cd_paciente_reserva_w) = 'N') then
				  CALL Wheb_mensagem_pck.exibir_mensagem_abort(obter_desc_expressao(880002));
            end if;
		
		/* Rotina para verificar se o aacompanhante vem da lista de espera para definir uma data de saida  quando ele sair da lista de espera*/

		nr_seq_interno_ultimo_w := obter_atepacu_paciente(nr_atendimento_p, 'UAA'); -- UAA = Unidade Anterior a atual
		
		if ((nr_seq_interno_ultimo_w IS NOT NULL AND nr_seq_interno_ultimo_w::text <> '') and nr_seq_interno_ultimo_w <> 0) then
		  select coalesce(cd_tipo_acomodacao, 99999)
		  into STRICT  cd_tipo_acomodacao_w
		  from	atend_paciente_unidade
		  where	nr_seq_interno = nr_seq_interno_ultimo_w;

		  if (obter_se_sem_acomodacao(cd_tipo_acomodacao_w) = 'S') then
			update	atendimento_acompanhante
			set	dt_saida	  = clock_timestamp()
			where	nr_atendimento	  = nr_atendimento_p
			and (cd_pessoa_fisica = cd_paciente_reserva_w or nm_acompanhante = nm_pac_reserva_w)
			and	coalesce(dt_saida::text, '') = '';
		  end if;
		end if;
		/*  Fim da rotina */

		
                update	unidade_atendimento
                set	ie_status_unidade	= 'M',
                    nr_atendimento_Acomp	= nr_atendimento_p,
                    cd_paciente_reserva		= cd_paciente_reserva_w,
                    nm_pac_reserva		= nm_pac_reserva_w,
                    nm_usuario_reserva		= Nm_Usuario_p,
                    nm_usuario			= Nm_Usuario_p,
                    dt_atualizacao		= clock_timestamp(),
		    ie_bloqueio_transf		= 'N'
                where   cd_unidade_basica	= cd_unid_bas_pac_p
                and     cd_unidade_compl	= cd_unid_comp_acom_ww
                and	cd_setor_atendimento	= cd_setor_paciente_p;

		end if;

		open C02;
		loop
		fetch C02 into
			nr_seq_interno_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(wheb_usuario_pck.get_cd_estabelecimento, nr_seq_interno_w, nm_usuario_p);
		end loop;
		close C02;

	end loop;
	close C01;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE transf_acomp_paciente_leitos ( nr_atendimento_p bigint, cd_setor_paciente_p bigint, cd_unid_bas_pac_p text, cd_unid_comp_pac_p text, nm_usuario_p text, ie_consiste_sexo_p text default 'N', ie_considera_ctrl_visita_p text default 'N', nr_seq_interno_para_acomp_p bigint default null) FROM PUBLIC;

