-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_atendimento_rn ( nr_atendimento_p bigint, nm_usuario_p text, nr_seq_nascimento_p bigint, cd_setor_atendimento_p bigint, cd_acomodacao_p bigint, cd_unidade_basica_p text, cd_unidade_compl_p text, ie_html_p text default null, nr_atend_rn_p INOUT bigint DEFAULT NULL) AS $body$
DECLARE


cd_pessoa_fisica_w		varchar(10);
cd_pessoa_rn_w			varchar(10);
cd_pf_rn_w			varchar(10);
nr_atend_rn_w			bigint;
nr_seq_interno_w		bigint;
ie_gerar_ci_w			varchar(01)	:= 'N';
cd_setor_usuario_w		bigint;
cd_estabelecimento_w		bigint;
nr_sequencia_w			bigint;
ie_sexo_w			varchar(01);
is_name_feature_w		varchar(1);
nr_seq_nasc_w			bigint;
dt_nascimento_rn_w		timestamp;
ie_sexo_rn_w			varchar(1);
nr_cor_pele_rn_w		bigint;
qt_altura_rn_w			smallint;
qt_peso_nasc_w			smallint;
qt_peso_sala_parto_w bigint;
qt_peso_nasc_pf_w    bigint;
qt_peso_pf_w			real;
nr_seq_unid_rn_w		bigint;
ie_setor_w			bigint;
cd_setor_passagem_w		bigint;
cd_setor_rn_w			integer;
cd_unidade_bas_rn_w		varchar(10);
cd_unidade_comp_rn_w		varchar(10);
cd_acomod_rn_w			smallint;
qt_max_acomp_rn_w		smallint;
cd_nacionalidade_w		varchar(8);
qt_atendimentos_mae_w		smallint;
qt_atendimentos_mae_ww		smallint;
ds_rn_w				varchar(80);
qt_nasc_vivos_w			smallint;
cd_perfil_w			integer;
nm_usuario_original_w		varchar(15);
ie_medico_rn_w			varchar(2);
cd_medico_resp_w		varchar(10);
ie_compl_mae_w			varchar(1);
nr_seq_compl_w			smallint;
nr_seq_perfil_pep_w		varchar(10);
cid_rn_w			varchar(10);
ie_clinica_rn_w			integer;
dt_final_vigencia_w		timestamp;
ie_tipo_atend_rn_w		integer;
nr_seq_classif_rn_w		smallint;
ie_gera_lancto_auto_rn_w	varchar(1);
cd_setor_paciente_w		bigint;
qt_idade_w			bigint;
nr_seq_evento_w			bigint;
dt_liberacao_w			timestamp;
nr_seq_atepacu_w		bigint;
cd_setor_atendimento_w		bigint;
cd_unidade_basica_w		varchar(20);
cd_unidade_compl_w		varchar(20);
cd_convenio_w			bigint;
ie_trat_conta_rn_w		varchar(10);
ie_gerar_passagem_setor_w	varchar(1);
ie_classif_doenca_rn_w		varchar(1);
ie_pront_pf_w				varchar(1);
nr_prontuario_w				bigint;
qt_reg_w					bigint;
ie_numeracao_rn_w			varchar(1);
cd_municipio_ibge_w			varchar(10);
nr_ddd_celular_w			varchar(10);
nr_telefone_celular_w		varchar(40);
NR_SEQ_CLASSIF_W		bigint;
IE_DATA_NASCIMENTO_w	varchar(40);
ie_recen_nascido_w		varchar(2);	
cd_procedencia_rn_w		integer;
nr_seq_person_name_w	bigint;
nr_seq_person_name_ww	pessoa_fisica.nr_seq_person_name%type;
ds_given_name_w			person_name.ds_given_name%type;
ds_name_surename_w		varchar(256);
ie_import_pagador_w	varchar(1);
ie_rn_vigencia_null_w	varchar(1);
IE_STATUS_CPF_W varchar(1);
nr_seq_justificativa_taxa_rn_w	pessoa_taxa_justificativa.nr_sequencia%type;
pessoa_fisica_taxa_w		pessoa_fisica_taxa%rowtype;

C01 CURSOR FOR
	SELECT	nr_seq_evento
	from 	regra_envio_sms
	where	cd_estabelecimento = cd_estabelecimento_w
	and	ie_evento_disp 	=	'GARN'
	and	qt_idade_w between coalesce(qt_idade_min,-1)	and coalesce(qt_idade_max,9999)
	and	((coalesce(nr_seq_classif,nr_seq_classif_w) = nr_seq_classif_w) or (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(cd_pessoa_fisica_w),0)) = 'S'))	
	and	coalesce(cd_setor_atendimento,cd_setor_paciente_w) = cd_setor_paciente_w
	and	coalesce(ie_situacao,'A') = 'A';
	
C02 CURSOR FOR
	SELECT	cd_pessoa_fisica,
			cd_cgc, 
			nr_seq_grau_parentesco, 
			ds_acordo, 
			ds_condicao
	from	ATENDIMENTO_PAGADOR
	where	nr_atendimento = nr_atendimento_p
	order by nr_sequencia;

BEGIN

select	coalesce(max(nr_atend_rn),0)
into STRICT	nr_atend_rn_w
from	nascimento
where	nr_sequencia	= nr_seq_nascimento_p
and	nr_atendimento	= nr_atendimento_p;

select 	coalesce(max(ie_numeracao_rn),'R'),
		max(IE_DATA_NASCIMENTO)
into STRICT	ie_numeracao_rn_w,
		IE_DATA_NASCIMENTO_w
from	parametro_medico
where	cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

if (nr_atend_rn_w = 0) then
	begin
	ie_medico_rn_w := obter_param_usuario(281, 377, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_medico_rn_w);
	nr_seq_perfil_pep_w := obter_param_usuario(5, 67, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, nr_seq_perfil_pep_w);
	cd_setor_passagem_w := obter_param_usuario(3111, 98, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, cd_setor_passagem_w);
	ie_gerar_passagem_setor_w := obter_param_usuario(281, 1020, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_passagem_setor_w);
	ie_pront_pf_w := obter_param_usuario(5, 138, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_pront_pf_w);
	ie_import_pagador_w := obter_param_usuario(916, 1196, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_import_pagador_w);
	ie_rn_vigencia_null_w := obter_param_usuario(916, 1204, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_rn_vigencia_null_w);

	/* verifica se deve enviar comunicacao interna */

	select	coalesce(max(obter_valor_param_usuario(916, 122, obter_perfil_ativo, nm_usuario_p, 0)), 'N'),
		coalesce(max(obter_valor_param_usuario(916, 505, obter_perfil_ativo, nm_usuario_p, 0)), 'N')
	into STRICT	ie_gerar_ci_w,
		ie_gera_lancto_auto_rn_w
	;

	/* pega o setor do usuario */

	select	coalesce(max(cd_setor_atendimento),0)
	into STRICT	cd_setor_usuario_w
	from 	usuario
	where	nm_usuario	= nm_usuario_p;

	/* verifica dados da mae */

	select	coalesce(max(a.cd_pessoa_fisica), '0'),
			max(b.ie_sexo),
			max(Obter_se_recem_nasc(a.nr_atendimento)),
			max(nr_seq_person_name),
      max(b.cd_estabelecimento)
	into STRICT	cd_pessoa_fisica_w,
			ie_sexo_w,
			ie_recen_nascido_w,
			nr_seq_person_name_ww,
      cd_estabelecimento_w
	from	pessoa_fisica b,
			atendimento_paciente a
	where	nr_atendimento		= nr_atendimento_p
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica;
	
	if (nr_seq_person_name_ww IS NOT NULL AND nr_seq_person_name_ww::text <> '') then
        
        if (coalesce((pkg_i18n.get_user_locale), 'pt_BR') = 'es_MX') then

            select  ds_given_name,
                    substr(DS_FAMILY_NAME||' '||DS_COMPONENT_NAME_1,1,256)
            into STRICT	ds_given_name_w,
                    ds_name_surename_w
            from    person_name
            where   nr_sequencia = nr_seq_person_name_ww
            and     ds_type = 'main';

        end if;

        if (coalesce((pkg_i18n.get_user_locale), 'pt_BR') = 'es_BO') then

            select  ds_given_name,
                    substr(DS_COMPONENT_NAME_1 || ' ' || DS_FAMILY_NAME,1,256)
            into STRICT	ds_given_name_w,
                    ds_name_surename_w
            from    person_name
            where   nr_sequencia = nr_seq_person_name_ww
            and     ds_type = 'main';

        end if;

	end if;
	
	/* pega a nacionalidade brasileira para os recem-nascidos */

	select	max(cd_nacionalidade)
	into STRICT	cd_nacionalidade_w
	from 	nacionalidade
	where	ie_brasileiro = 'S'
	and	coalesce(ie_situacao,'A') = 'A';

	if (ie_sexo_w <> 'F') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(Wheb_mensagem_pck.get_texto(308476)/*'O paciente nao e do sexo feminino! Por favor verifique o cadastro.*/
);
	end if;

	/* verifica sequencia do nascimento */

	if (coalesce(nr_seq_nascimento_p, 0) = 0) then
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_nasc_w
		from	nascimento
		where	nr_atendimento		= nr_atendimento_p
		and	coalesce(nr_atend_rn::text, '') = '';
	else
		nr_seq_nasc_w	:= nr_seq_nascimento_p;
	end if;

	/* nao deixa inserir se nao tiver registro de nascimento */

	if (nr_seq_nasc_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(Wheb_mensagem_pck.get_texto(308477)/*'Este atendimento nao possui registro de nascimento informado no item Nascimentos da funcao Prontuario Eletronico de Paciente.*/
);
	end if;
	
	/* Verificar se esta sendo gerado um atendiment de recem nascido para um paciente co m  menos de 28 dias  */
	
	
	if (ie_recen_nascido_w = 'S') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(Wheb_mensagem_pck.get_texto(445264)/*'O paciente possui menos de 28 dias de nascimento. Verifique o cadastro de pessoa fisica.*/
);
	end if;
	

	if (coalesce(cd_setor_atendimento_p,0) = 0) or (coalesce(cd_acomodacao_p,-1) = -1) or (cd_unidade_basica_p = '') then

		
		
		nr_seq_atepacu_w	:= Obter_Atepacu_paciente(nr_atendimento_p, 'A');
		nr_seq_unid_rn_w	:= 0;
		select	max(cd_setor_atendimento),
			max(cd_unidade_basica),
			max(cd_unidade_compl)
		into STRICT	cd_setor_atendimento_w,
			cd_unidade_basica_w,
			cd_unidade_compl_w
		from	atend_paciente_unidade
		where	NR_SEQ_INTERNO	= nr_seq_atepacu_w;
		
		
		if (cd_unidade_basica_w IS NOT NULL AND cd_unidade_basica_w::text <> '') and (cd_unidade_compl_w IS NOT NULL AND cd_unidade_compl_w::text <> '') then
			begin
			select	coalesce(nr_seq_unidade_rn, 0)
			into STRICT	nr_seq_unid_rn_w
			from	unidade_atendimento
			where	cd_setor_atendimento	= cd_setor_atendimento_w
			and	cd_unidade_basica	= cd_unidade_basica_w
			and	cd_unidade_compl	= cd_unidade_compl_w;
			exception
				when others then
				nr_seq_unid_rn_w	:= 0;
			end;
		end if;
		
		if (nr_seq_unid_rn_w	= 0) then
			begin
			select	coalesce(nr_seq_unidade_rn, 0)
			into STRICT	nr_seq_unid_rn_w
			from	setor_atendimento
			where	cd_setor_atendimento	= cd_setor_atendimento_w;
			exception
				when others then
				nr_seq_unid_rn_w	:= 0;
			end;
		end if;
		if (nr_seq_unid_rn_w = 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort( Wheb_mensagem_pck.get_texto(308478)/*'O setor do paciente nao tem unidade para recem-nascidos informada.*/
);
		end if;

	end if;
	
	if (cd_pessoa_fisica_w <> '0') then
		begin
		/* le dados do recem nascido para complementar o cadastro */

		select	dt_nascimento,
			ie_sexo,
			nr_cor_pele,
			qt_altura,
			coalesce(cd_pessoa_rn,'0'),
			qt_peso,
         qt_peso_sala_parto
		into STRICT	dt_nascimento_rn_w,
			ie_sexo_rn_w,
			nr_cor_pele_rn_w,
			qt_altura_rn_w,
			cd_pf_rn_w,
			qt_peso_nasc_w,
         qt_peso_sala_parto_w
		from	nascimento
		where	nr_atendimento	= nr_atendimento_p
		and	nr_sequencia	= nr_seq_nasc_w;
		
		if (coalesce(qt_peso_nasc_w,0) > 0) then
			qt_peso_pf_w	:= (qt_peso_nasc_w / 1000);
		end if;
      IF (coalesce(qt_peso_sala_parto_w, 0) > 0) THEN
         qt_peso_nasc_pf_w := (qt_peso_sala_parto_w / 1000);
      END IF;		
		if (ie_medico_rn_w = 'S') then
			select	max(cd_pediatra_rn)
			into STRICT	cd_medico_resp_w
			from 	nascimento
			where	nr_atendimento = nr_atendimento_p
			and	nr_sequencia	= nr_seq_nasc_w;
		else
			select	max(cd_medico_resp)
			into STRICT	cd_medico_resp_w
			from 	atendimento_paciente
			where	nr_atendimento = nr_atendimento_p;

		end if;

		if (coalesce(cd_medico_resp_w::text, '') = '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(Wheb_mensagem_pck.get_texto(308479) /*'O medico responsavel pelo atendimento nao foi cadastrado.*/
);
		end if;

		if (cd_pf_rn_w = '0') then
			select	nextval('pessoa_fisica_seq')
			into STRICT	cd_pessoa_rn_w
			;

			select	coalesce(max(qt_nasc_vivos),0)
			into STRICT	qt_nasc_vivos_w
			from	parto
			where	nr_atendimento = nr_atendimento_p;

			select	count(*)
			into STRICT	qt_atendimentos_mae_w
			from	atendimento_paciente
			where	nr_atendimento_mae = nr_atendimento_p;
			
			select	count(*)
			into STRICT	qt_atendimentos_mae_ww
			from	nascimento
			where	nr_atendimento	= nr_atendimento_p;

			ds_rn_w := Wheb_mensagem_pck.get_texto(308831)|| ' '; --'RN de ';
			if (qt_nasc_vivos_w > 1) or (qt_atendimentos_mae_ww > 1)then
					if (ie_numeracao_rn_w = 'R') then
						ds_rn_w := Wheb_mensagem_pck.get_texto(308832) || ' ' /*'RN '*/ || converte_numero_romano(nr_seq_nascimento_p) || ' ' || Wheb_mensagem_pck.get_texto(308483) || ' '; --' de ';
					else
						ds_rn_w := Wheb_mensagem_pck.get_texto(308832) || ' ' /*'RN '*/ || nr_seq_nascimento_p || ' ' || Wheb_mensagem_pck.get_texto(308483) || ' '; --' de ';
					end if;
			end if;
			
			nr_prontuario_w	:= null;
			if (ie_pront_pf_w	= 'S') then
				select	count(*)
				into STRICT	qt_reg_w
				from	pessoa_fisica
				where	nr_prontuario	= cd_pessoa_rn_w;
				
				if (qt_reg_w	= 0) then
					nr_prontuario_w	:= cd_pessoa_rn_w;
				end if;
				
				
			end if;
			
			
			select	max(b.cd_municipio_ibge)
			into STRICT	cd_municipio_ibge_w
			from	estabelecimento a,
					pessoa_juridica b
			where	a.CD_CGC = b.CD_CGC
			and		a.cd_estabelecimento = obter_estabelecimento_ativo;
		
		
		is_name_feature_w := obter_valor_param_Usuario(0, 213, null, null, null);
		
		if (is_name_feature_w <> 'N') then
			begin
			INSERT INTO person_name(
					 nr_sequencia
					,dt_atualizacao
					,nm_usuario
					,dt_atualizacao_nrec
					,nm_usuario_nrec
					,ds_type
					,ds_given_name
					,ds_family_name
					,ds_component_name_1
					,ds_component_name_2
					,ds_component_name_3
					)
				VALUES (
					nextval('person_name_seq')
					,clock_timestamp()
					,nm_usuario_p
					,clock_timestamp()
					,nm_usuario_p
					,'main'
					,case when(ds_given_name_w IS NOT NULL AND ds_given_name_w::text <> '') then substr(ds_rn_w || ds_given_name_w,1,60) else substr(ds_rn_w || (select nm_pessoa_fisica from pessoa_fisica where cd_pessoa_fisica	= cd_pessoa_fisica_w),1,60) end
					--,substr(ds_rn_w || (select nm_pessoa_fisica from pessoa_fisica where cd_pessoa_fisica	= cd_pessoa_fisica_w),1,60)
					,case when(ds_name_surename_w IS NOT NULL AND ds_name_surename_w::text <> '') then ds_name_surename_w else '' end
					,''
					,''
					,''
					) returning nr_sequencia
			INTO STRICT nr_seq_person_name_w;
			end;
		end if;
      	
			insert	into pessoa_fisica(cd_pessoa_fisica,
				ie_tipo_pessoa,
				nm_pessoa_fisica,
				dt_atualizacao,
				nm_usuario,
				dt_nascimento,
				qt_altura_cm,
				qt_peso,
        qt_peso_nasc,
				nr_seq_cor_pele,
				ie_sexo,
				cd_nacionalidade,
				nr_seq_perfil,
				ie_funcionario,
				nr_prontuario,
				ie_estado_civil,
				IE_GRAU_INSTRUCAO,
				CD_MUNICIPIO_IBGE,
				nr_ddd_celular,
				nr_telefone_celular,
				CD_PESSOA_MAE,
				cd_religiao,
        NR_SEQ_PERSON_NAME,
        cd_estabelecimento)
			(SELECT	cd_pessoa_rn_w,
				ie_tipo_pessoa,
				substr(ds_rn_w || nm_pessoa_fisica,1,60),
				clock_timestamp(),
				nm_usuario_p,
				dt_nascimento_rn_w,
				qt_altura_rn_w,
				qt_peso_pf_w,
        qt_peso_nasc_pf_w,
				nr_cor_pele_rn_w,
				ie_sexo_rn_w,
				cd_nacionalidade_w,
				nr_seq_perfil_pep_w,
				'N',
				nr_prontuario_w,
				1,
				11,
				cd_municipio_ibge_w,
				nr_ddd_celular,
				nr_telefone_celular,
				cd_pessoa_fisica,
				cd_religiao,
        nr_seq_person_name_w,
        cd_estabelecimento_w
			from	pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w);

			commit; /*incluido o commit por conta da integracao da agfa no samaritano. pedido elemar.*/
				select	coalesce(max(nr_sequencia),0) + 1
				into STRICT	nr_sequencia_w
				from	compl_pessoa_fisica
				where	cd_pessoa_fisica	= cd_pessoa_rn_w;
				
				
			/* cria o complemento dela */

			insert into compl_pessoa_fisica(
				cd_pessoa_fisica,
				nr_sequencia,
				ie_tipo_complemento,
				nm_usuario,
				dt_atualizacao,
				nm_contato,
				cd_cep,
				ds_endereco,
				nr_endereco,
				ds_complemento,
				ds_bairro,
				ds_municipio,
				cd_municipio_ibge,
				sg_estado,
				nr_seq_pais,
				nr_telefone,
				nr_ramal,
				ds_fax,
				ds_fone_adic,
				ds_observacao,
				nr_ddd_telefone,
				cd_tipo_logradouro,
				ds_compl_end
			) SELECT
				cd_pessoa_rn_w,
				nr_sequencia_w,
				ie_tipo_complemento,
				nm_usuario_p,
				clock_timestamp(),
				nm_contato,
				cd_cep,
				ds_endereco,
				nr_endereco,
				ds_complemento,
				ds_bairro,
				ds_municipio,
				cd_municipio_ibge,
				sg_estado,
				nr_seq_pais,
				nr_telefone,
				nr_ramal,
				ds_fax,
				ds_fone_adic,
				ds_observacao,
				nr_ddd_telefone,
				cd_tipo_logradouro,
				ds_compl_end
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	ie_tipo_complemento	= 1  LIMIT 1;
			
			select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_sequencia_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_rn_w;		
			
			insert into compl_pessoa_fisica(
				cd_pessoa_fisica,
				nr_sequencia,
				ie_tipo_complemento,
				nm_usuario,
				dt_atualizacao,
				cd_cep,
				ds_endereco,
				nr_endereco,
				ds_complemento,
				ds_bairro,
				ds_municipio,
				cd_municipio_ibge,
				sg_estado,
				nr_telefone,
				nr_ramal,
				ds_fax,
				ds_fone_adic,
				ds_observacao,
				nm_contato,
				nr_ddd_telefone,
				cd_tipo_logradouro,
				nr_seq_pais
			) SELECT
				cd_pessoa_rn_w,
				nr_sequencia_w,
				5,
				nm_usuario_p,
				clock_timestamp(),
				cd_cep,
				ds_endereco,
				nr_endereco,
				ds_complemento,
				ds_bairro,
				ds_municipio,
				cd_municipio_ibge,
				sg_estado,
				nr_telefone,
				nr_ramal,
				ds_fax,
				ds_fone_adic,
				ds_observacao,
				obter_nome_pf(cd_pessoa_fisica_w),
				nr_ddd_telefone,
				cd_tipo_logradouro,
				nr_seq_pais
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	ie_tipo_complemento	= 1  LIMIT 1;
			
			
			select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_sequencia_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_rn_w;	
			
			insert into compl_pessoa_fisica(
				cd_pessoa_fisica,
				nr_sequencia,
				ie_tipo_complemento,
				nm_usuario,
				dt_atualizacao,
				cd_cep,
				ds_endereco,
				nr_endereco,
				ds_complemento,
				ds_bairro,
				ds_municipio,
				cd_municipio_ibge,
				sg_estado,
				nr_telefone,
				nr_ramal,
				ds_fax,
				ds_fone_adic,
				ds_observacao,
				nm_contato,
				nr_ddd_telefone,
				cd_tipo_logradouro,
				nr_seq_pais
			) SELECT
				cd_pessoa_rn_w,
				nr_sequencia_w,
				3,
				nm_usuario_p,
				clock_timestamp(),
				cd_cep,
				ds_endereco,
				nr_endereco,
				ds_complemento,
				ds_bairro,
				ds_municipio,
				cd_municipio_ibge,
				sg_estado,
				nr_telefone,
				nr_ramal,
				ds_fax,
				ds_fone_adic,
				ds_observacao,
				obter_nome_pf(cd_pessoa_fisica_w),
				nr_ddd_telefone,
				cd_tipo_logradouro,
				nr_seq_pais
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	ie_tipo_complemento	= 1  LIMIT 1;	

			select coalesce(max('S'),'N')
			into STRICT	ie_compl_mae_w
			from	compl_pessoa_fisica
			where	ie_tipo_complemento = 5
			and	cd_pessoa_fisica = cd_pessoa_rn_w;

			if (ie_compl_mae_w = 'N') then
				select	count(*)
				into STRICT	nr_seq_compl_w
				from	compl_pessoa_fisica
				where	cd_pessoa_fisica	= cd_pessoa_rn_w
				and		ie_tipo_complemento	= 1;

				if (nr_seq_compl_w = 0) then
					nr_seq_compl_w := 1;
				else
					select	max(nr_sequencia)
					into STRICT	nr_seq_compl_w
					from	compl_pessoa_fisica
					where	cd_pessoa_fisica	= cd_pessoa_rn_w
					and		ie_tipo_complemento	= 1;
				end if;

				insert into compl_pessoa_fisica(
							cd_pessoa_fisica,
							nr_sequencia,
							ie_tipo_complemento,
							nm_usuario,
							dt_atualizacao,
							nm_contato
						)  SELECT	cd_pessoa_rn_w,
							nr_seq_compl_w,
							5,
							nm_usuario_p,
							clock_timestamp(),
							obter_nome_pf(cd_pessoa_fisica_w)
							;
			end if;
			
		else
			cd_pessoa_rn_w := cd_pf_rn_w;
		end if;
		
		CALL ATUALIZA_MOTIVO_SEM_CPF_PF(cd_pessoa_rn_w, '1', NM_USUARIO_P);
		
		select	nextval('atendimento_paciente_seq')
		into STRICT	nr_atend_rn_w
		;

		select	max(cd_estabelecimento)
		into STRICT	cd_estabelecimento_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;


		select	max(cd_doenca_rn),
			max(ie_clinica_rn),
			max(ie_tipo_atend_rn),
			max(NR_SEQ_CLASSIF_RN),
			max(ie_classif_doenca_rn),
			max(cd_procedencia_rn)
		into STRICT	cid_rn_w,
			ie_clinica_rn_w,
			ie_tipo_atend_rn_w,
			nr_seq_classif_rn_w,
			ie_classif_doenca_rn_w,
			cd_procedencia_rn_w
		from	parametro_medico
		where	cd_estabelecimento	= cd_estabelecimento_w;
		
		cd_convenio_w	:= obter_convenio_atendimento(nr_atendimento_p);
		
		select	max(ie_trat_conta_rn)
		into STRICT	ie_trat_conta_rn_w
		from	setor_atendimento
		where	cd_setor_atendimento	= cd_setor_atendimento_p;
		
		if (coalesce(ie_trat_conta_rn_w::text, '') = '') then
			select	coalesce(max(ie_trat_conta_rn),Wheb_mensagem_pck.get_texto(308480) /*'Mae'*/
)
			into STRICT	ie_trat_conta_rn_w
			from	convenio_estabelecimento
			where	cd_convenio	= cd_convenio_w
			and	cd_estabelecimento = cd_estabelecimento_w;
		end if;
		
		if (IE_DATA_NASCIMENTO_w	= 'S') then
			dt_nascimento_rn_w	:= clock_timestamp();
		end if;
		
		commit; /*incluido o commit por conta da integracao da agfa no samaritano. pedido elemar.*/
		insert	into atendimento_paciente(nr_atendimento,
			cd_pessoa_fisica,
			cd_estabelecimento,
			cd_procedencia,
			dt_entrada,
			ie_tipo_atendimento,
			dt_atualizacao,
			nm_usuario,
			cd_medico_resp,
			cd_motivo_alta,
			ds_sintoma_paciente,
			ds_observacao,
			dt_alta,
			ie_clinica,
			nm_usuario_atend,
			ie_responsavel,
			dt_fim_conta,
			ie_fim_conta,
			nr_cat,
			ds_causa_externa,
			cd_cgc_seguradora,
			nr_bilhete,
			nr_serie_bilhete,
			ie_carater_inter_sus,
			ie_vinculo_sus,
			ie_tipo_convenio,
			ie_tipo_atend_bpa,
			ie_grupo_atend_bpa,
			cd_medico_atendimento,
			dt_alta_interno,
			nr_seq_unid_atual,
			nr_seq_unid_int,
			nr_atend_original,
			qt_dia_longa_perm,
			dt_inicio_atendimento,
			ie_permite_visita,
			ie_status_atendimento,
			dt_previsto_alta,
			nm_usuario_alta,
			cd_pessoa_responsavel,
			dt_atend_medico,
			dt_fim_consulta,
			dt_medicacao,
			dt_saida_real,
			ie_clinica_alta,
			dt_lib_medico,
			nr_seq_regra_funcao,
			nr_seq_local_pa,
			nr_seq_tipo_acidente,
			dt_ocorrencia,
			ds_pend_autorizacao,
			cd_motivo_alta_medica,
			nr_seq_forma_laudo,
			nr_seq_check_list,
			dt_fim_triagem,
			nr_reserva_leito,
			ie_paciente_isolado,
			ie_permite_visita_rel,
			ds_senha,
			ie_probabilidade_alta,
			nr_seq_forma_chegada,
			nr_seq_indicacao,
			cd_pessoa_indic,
			ds_obs_alta,
			nm_medico_externo,
			nr_gestante_pre_natal,
			dt_alta_medico,
			nr_atendimento_mae,
			ie_trat_conta_rn,
			nr_seq_classificacao)
		(SELECT	nr_atend_rn_w,
			cd_pessoa_rn_w,
			cd_estabelecimento,
			coalesce(cd_procedencia_rn_w,cd_procedencia),
			coalesce(dt_nascimento_rn_w,dt_entrada),
			coalesce(ie_tipo_atend_rn_w,ie_tipo_atendimento),
			clock_timestamp(),
			nm_usuario_p,
			cd_medico_resp_w,
			null,
			ds_sintoma_paciente,
			ds_observacao,
			null,
			coalesce(ie_clinica_rn_w,ie_clinica),
			nm_usuario_atend,
			5,
			dt_fim_conta,
			ie_fim_conta,
			nr_cat,
			ds_causa_externa,
			cd_cgc_seguradora,
			nr_bilhete,
			nr_serie_bilhete,
			ie_carater_inter_sus,
			ie_vinculo_sus,
			ie_tipo_convenio,
			ie_tipo_atend_bpa,
			ie_grupo_atend_bpa,
			cd_medico_atendimento,
			null,
			nr_seq_unid_atual,
			nr_seq_unid_int,
			nr_atend_original,
			qt_dia_longa_perm,
			dt_inicio_atendimento,
			ie_permite_visita,
			ie_status_atendimento,
			null,
			null,
			cd_pessoa_fisica_w,
			dt_atend_medico,
			dt_fim_consulta,
			dt_medicacao,
			dt_saida_real,
			null,
			dt_lib_medico,
			nr_seq_regra_funcao,
			nr_seq_local_pa,
			nr_seq_tipo_acidente,
			dt_ocorrencia,
			ds_pend_autorizacao,
			null,
			nr_seq_forma_laudo,
			nr_seq_check_list,
			dt_fim_triagem,
			nr_reserva_leito,
			'N',
			ie_permite_visita_rel,
			ds_senha,
			null,
			nr_seq_forma_chegada,
			nr_seq_indicacao,
			cd_pessoa_indic,
			null,
			nm_medico_externo,
			nr_gestante_pre_natal,
			null,
			nr_atendimento,
			coalesce(ie_trat_conta_rn_w,Wheb_mensagem_pck.get_texto(308480) /*'Mae'*/
),
			nr_seq_classif_rn_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p);

		begin
		select	*
		into STRICT	pessoa_fisica_taxa_w
		from	pessoa_fisica_taxa
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	nr_atendimento		= nr_atendimento_p  LIMIT 1;
		exception
		when others then
			pessoa_fisica_taxa_w.nr_sequencia := null;
		end;
		
		if (pessoa_fisica_taxa_w.nr_sequencia IS NOT NULL AND pessoa_fisica_taxa_w.nr_sequencia::text <> '') then
		
			select	max(nr_sequencia)
			into STRICT	nr_seq_justificativa_taxa_rn_w
			from	pessoa_taxa_justificativa
			where	coalesce(ie_situacao,'A') 	= 'A'
			and	ie_atendimento_rn	= 'S';
			
			--Se existe uma justifica padrao, entao utiliza esta, caso contrario utiliza os valores do atendimento da Mae
			if (coalesce(nr_seq_justificativa_taxa_rn_w ,0) > 0) then
			
				pessoa_fisica_taxa_w.nr_seq_justificativa 	:= nr_seq_justificativa_taxa_rn_w;
				pessoa_fisica_taxa_w.qt_dias_pagamento		:= null;
				pessoa_fisica_taxa_w.ie_obriga_pag_adicional	:= 'N';
			
			end if;
			
			select	nextval('pessoa_fisica_taxa_seq')
			into STRICT	pessoa_fisica_taxa_w.nr_sequencia
			;
			
			pessoa_fisica_taxa_w.nr_atendimento	:= nr_atend_rn_w;
			pessoa_fisica_taxa_w.cd_pessoa_fisica	:= cd_pessoa_rn_w;
			pessoa_fisica_taxa_w.dt_atualizacao	:= clock_timestamp();
			pessoa_fisica_taxa_w.nm_usuario		:= nm_usuario_p;
			pessoa_fisica_taxa_w.dt_atualizacao_nrec := clock_timestamp();
			pessoa_fisica_taxa_w.nm_usuario_nrec	:= nm_usuario_p;			
			
			insert into pessoa_fisica_taxa values (pessoa_fisica_taxa_w.*);
		end if;		
		
		IF (cd_setor_passagem_w <> 0)THEN
			select	count(*)
			into STRICT	ie_setor_w
			from	atend_paciente_unidade
			where	nr_atendimento		= nr_atendimento_p
			and	cd_setor_atendimento	= cd_setor_passagem_w;

			IF (ie_setor_w = 0) THEN
				CALL gerar_passagem_setor_atend(nr_atendimento_p, cd_setor_passagem_w, clock_timestamp(), 'N', nm_usuario_p);
			END IF;
		END IF;
		
		if (ie_import_pagador_w = 'S') then
			for c02_r in C02
			loop
				insert into ATENDIMENTO_PAGADOR(
					nr_sequencia,
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					cd_pessoa_fisica, 
					cd_cgc, 
					nr_atendimento, 
					nr_seq_grau_parentesco, 
					ds_acordo, 
					ds_condicao
				) values (
					nextval('atendimento_pagador_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					c02_r.cd_pessoa_fisica,
					c02_r.cd_cgc,
					nr_atend_rn_w,
					c02_r.nr_seq_grau_parentesco,
					c02_r.ds_acordo,
					c02_r.ds_condicao
				);
			end loop;
		end if;
		
		update nascimento set nr_atend_rn = nr_atend_rn_w
		where	nr_atendimento	= nr_atendimento_p	and	nr_sequencia	= nr_seq_nasc_w;
		
		select	max(dt_final_vigencia)
		into STRICT	dt_final_vigencia_w
		from	atendimento_paciente_v
		where	nr_atendimento	= nr_atendimento_p;
		

		if (dt_final_vigencia_w IS NOT NULL AND dt_final_vigencia_w::text <> '') and (coalesce(dt_nascimento_rn_w, clock_timestamp())	> dt_final_vigencia_w) then
			dt_final_vigencia_w	:= coalesce(dt_nascimento_rn_w, clock_timestamp());
		end if;
		
		if (ie_rn_vigencia_null_w = 'S') then
			dt_final_vigencia_w := null;
		end if;
		
		insert	into atend_categoria_convenio(nr_seq_interno,
			nr_atendimento,
			cd_convenio,
			cd_categoria,
			dt_inicio_vigencia,
			dt_final_vigencia,
			dt_atualizacao,
			cd_usuario_convenio,
			cd_empresa,
			nm_usuario,
			nr_doc_convenio,
			cd_tipo_acomodacao,
			cd_municipio_convenio,
			cd_convenio_glosa,
			cd_categoria_glosa,
			dt_validade_carteira,
			nr_acompanhante,
			cd_plano_convenio,
			cd_dependente,
			nr_seq_origem,
			cd_senha,
			ie_tipo_guia,
			ds_observacao,
			qt_dia_internacao,
			dt_ultimo_pagto,
			cd_complemento,
			dt_aceite_dif_acomod,
			nm_usuario_aceite,
			ds_observacao_aceite,
			qt_dieta_acomp,
			ie_lib_dieta,
			nr_prioridade)
		(SELECT	nextval('atend_categoria_convenio_seq'),
			nr_atend_rn_w,
			cd_convenio,
			cd_categoria,
			coalesce(dt_nascimento_rn_w, clock_timestamp()),
			dt_final_vigencia_w,
			dt_atualizacao,
			cd_usuario_convenio,
			cd_empresa,
			nm_usuario,
			nr_doc_convenio,
			cd_tipo_acomodacao,
			cd_municipio_convenio,
			cd_convenio_glosa,
			cd_categoria_glosa,
			dt_validade_carteira,
			nr_acompanhante,
			cd_plano_convenio,
			cd_dependente,
			nr_seq_origem,
			cd_senha,
			ie_tipo_guia,
			ds_observacao,
			qt_dia_internacao,
			dt_ultimo_pagto,
			cd_complemento,
			dt_aceite_dif_acomod,
			nm_usuario_aceite,
			ds_observacao_aceite,
			qt_dieta_acomp,
			ie_lib_dieta,
			nr_prioridade
		from	atend_categoria_convenio
		where	nr_atendimento	= nr_atendimento_p
		and	nr_seq_interno = (select max(nr_seq_interno) from atend_categoria_convenio where nr_atendimento = nr_atendimento_p));

		if (nr_seq_unid_rn_w > 0) then
			select	cd_setor_atendimento,
				cd_unidade_basica,
				cd_unidade_compl,
				cd_tipo_acomodacao,
				qt_max_acomp
			into STRICT	cd_setor_rn_w,
				cd_unidade_bas_rn_w,
				cd_unidade_comp_rn_w,
				cd_acomod_rn_w,
				qt_max_acomp_rn_w
			from	unidade_atendimento
			where	nr_seq_interno	= nr_seq_unid_rn_w;
		else
			cd_setor_rn_w		:=	cd_setor_atendimento_p;
			cd_unidade_bas_rn_w	:=	cd_unidade_basica_p;
			cd_unidade_comp_rn_w	:=	cd_unidade_compl_p;
			cd_acomod_rn_w		:=	cd_acomodacao_p;

			select 	qt_max_acomp
			into STRICT	qt_max_acomp_rn_w
			from	unidade_atendimento
			where	cd_unidade_compl = cd_unidade_compl_p
			and	cd_unidade_basica = cd_unidade_basica_p
			and	cd_setor_atendimento = cd_setor_atendimento_p;
		end if;
		
		if (ie_gerar_passagem_setor_w = 'S') then
			insert into atend_paciente_unidade(
				nr_atendimento,
				nr_sequencia,
				nr_seq_interno,
				cd_setor_atendimento,
				cd_unidade_basica,
				cd_unidade_compl,
				dt_entrada_unidade,
				dt_atualizacao,
				nm_usuario,
				cd_tipo_acomodacao,
				nm_usuario_original,
				dt_saida_interno,
				ie_passagem_setor,
				nr_acompanhante,
				ie_calcular_dif_diaria)
			values (
				nr_atend_rn_w,
				1,
				nextval('atend_paciente_unidade_seq'),
				cd_setor_rn_w,
				cd_unidade_bas_rn_w,
				cd_unidade_comp_rn_w,
				coalesce(dt_nascimento_rn_w,clock_timestamp()),
				clock_timestamp(),
				nm_usuario_p,
				cd_acomod_rn_w,
				nm_usuario_p,
				to_date('30/12/2999','dd/mm/yyyy'),
				'N',
				qt_max_acomp_rn_w,
				'S');
		end if;
		
		end;
		
		commit;

		if (coalesce(ie_gera_lancto_auto_rn_w,'N') = 'S') and (coalesce(nr_atend_rn_w,0) > 0) then
			CALL gerar_lancamento_automatico(nr_atend_rn_w, null, 26, nm_usuario_p, null,null,null,null,null,null);		
		end if;

		
		if (cid_rn_w IS NOT NULL AND cid_rn_w::text <> '') then
			CALL Gerar_diagnostico_Atend(nr_atend_rn_w,
						cid_rn_w,
						cd_medico_resp_w,
						nm_usuario_p,
						2,
						IE_CLASSIF_DOENCA_RN_w);
		end if;

	end if;

	nr_atend_rn_p			:= nr_atend_rn_w;

	if (nr_atend_rn_w IS NOT NULL AND nr_atend_rn_w::text <> '') and (ie_gerar_ci_w = 'S') and (cd_setor_usuario_w > 0) then
		begin

		select	nextval('comunic_interna_seq')
		into STRICT	nr_sequencia_w
		;

		insert	into comunic_interna(	dt_comunicado,
						ds_titulo,
						ds_comunicado,
						nm_usuario,
						dt_atualizacao,
						ie_geral,
						nm_usuario_destino,
						cd_perfil,
						nr_sequencia,
						ie_gerencial,
						nr_seq_classif,
						ds_perfil_adicional,
						cd_setor_destino,
						cd_estab_destino,
						ds_setor_adicional,
						dt_liberacao,
						ds_grupo)
				values (
						clock_timestamp(),
						Wheb_mensagem_pck.get_texto(308481),/*'Geracao de atendimento de RN',*/
						Wheb_mensagem_pck.get_texto(308482, 'NR_ATEND_RN_W='||nr_atend_rn_w||';NR_ATENDIMENTO_P='||nr_atendimento_p), /*'Atendimento de RN ( ' || nr_atend_rn_w || ' ) gerado para o atendimento ' || nr_atendimento_p,*/
						nm_usuario_p,
						clock_timestamp(),
						'N',
						null,
						null,
						nr_sequencia_w,
						'N',
						null,
						null,
						null,
						cd_estabelecimento_w,
						cd_setor_usuario_w || ',',
						clock_timestamp(),
						null);
		end;
	end if;
	
	if (coalesce(nr_atend_rn_w,0) > 0)  then
		begin
		CALL GQA_Gerar_Protocolo_assist(nr_atend_rn_w,'3',nm_usuario_p);
		exception
		when others then
			null;
		end;
	end if;
	
	nr_seq_classif_w  := obter_classificacao_pf(cd_pessoa_fisica_w);
	qt_idade_w	:= coalesce(obter_idade_pf(cd_pessoa_rn_w,clock_timestamp(),'A'),0);
	cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
	begin
	cd_setor_paciente_w	:= obter_setor_atendimento(nr_atendimento_p);
	exception
		when others then
		null;
	end;
	open C01;
		loop
		fetch C01 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_rn_w,null,nm_usuario_p);
			end;
		end loop;
	close C01;
	end;

	CALL gerar_pedido_parecer_RN(cd_medico_resp_w,nr_atendimento_p,nm_usuario_p);
else
	nr_atend_rn_p	:= nr_atend_rn_w;
end if;

if (coalesce(ie_html_p, 'N') = 'S') and (nr_atend_rn_p > 0) and (nr_seq_nascimento_p > 0) then
	update	nascimento
	set	      nr_atend_rn       = nr_atend_rn_p
	where	nr_sequencia      = nr_seq_nascimento_p
	and       nr_atendimento  = nr_atendimento_p;

   update   ESCALA_CAPURRO
   set      nr_atend_rn       = nr_atend_rn_p
   where    nr_atendimento    = nr_atendimento_p
   and      nr_seq_nascimento = nr_seq_nascimento_p;

   update   ESCALA_CAPURRO_NEURO
   set      nr_atend_rn       = nr_atend_rn_p
   where    nr_atendimento    = nr_atendimento_p
   and      nr_seq_nascimento = nr_seq_nascimento_p;

   update   ESCALA_SILVERMAN
   set      nr_atend_rn       = nr_atend_rn_p
   where    nr_atendimento    = nr_atendimento_p
   and      nr_seq_nascimento = nr_seq_nascimento_p;

   update   ESCALA_APGAR
   set      nr_atend_rn       = nr_atend_rn_p
   where    nr_atendimento    = nr_atendimento_p
   and      nr_seq_nascimento = nr_seq_nascimento_p;

	commit;
end if;

  if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '' AND nr_seq_nascimento_p IS NOT NULL AND nr_seq_nascimento_p::text <> '') then
      CALL INSERIR_PACIENTE_VACINA_RN(null, nr_atendimento_p, nr_seq_nascimento_p, null, null, null, nm_usuario_p, 'ST');
      commit;
  end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_atendimento_rn ( nr_atendimento_p bigint, nm_usuario_p text, nr_seq_nascimento_p bigint, cd_setor_atendimento_p bigint, cd_acomodacao_p bigint, cd_unidade_basica_p text, cd_unidade_compl_p text, ie_html_p text default null, nr_atend_rn_p INOUT bigint DEFAULT NULL) FROM PUBLIC;

