-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_obter_se_dados_autor (nr_seq_ageint_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_glosa_part_w			bigint;
ie_bloq_glosa_part_w 		varchar(1);


nr_seq_ageint_item_w	bigint;
nr_seq_proc_interno_w	bigint;
nr_doc_convenio_w	varchar(20);
ds_senha_w		varchar(20);
dt_solic_exame_w	timestamp;
ie_autor_recep_w	varchar(1);
ie_pac_possui_autor_w	varchar(1);
ds_cirurgia_w		varchar(500);
dt_validade_senha_w	timestamp;

cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_plano_w		varchar(10);
cd_usuario_convenio_w	varchar(30);
cd_medico_w		varchar(10);

ie_guia_w		varchar(1);
ie_senha_w		varchar(1);
ie_indicacao_clinica_w	varchar(1);
ie_carteirinha_w	varchar(1);
ie_validade_senha_w	varchar(1);
ie_medico_w		varchar(1);
ie_plano_w		varchar(1);

ds_campos_w		varchar(255) := '';
ds_ageint_w		varchar(255) := '';
ds_ageint_item_w	varchar(255) := '';

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_proc_interno,
		nr_doc_convenio,
		ds_senha,
		dt_solic_exame,
		coalesce(ie_autor_recep,'N'),
		coalesce(ie_pac_possui_autor,'N'),
		ds_cirurgia,
		dt_validade_senha
	from	agenda_integrada_item
	where	nr_seq_agenda_int = nr_seq_ageint_p
	and	(ie_autorizacao IS NOT NULL AND ie_autorizacao::text <> '')
	and	coalesce(ie_regra,0) not in (1,2,5,nr_glosa_part_w)
	and	coalesce(ie_glosa,'X') <> 'T'
	and	((ie_autorizacao = 'PAP') or (ie_autorizacao = 'PAH'));



BEGIN

delete	FROM w_inconsistencia_ageint
where	nr_seq_ageint = nr_seq_ageint_p;

ie_bloq_glosa_part_w := obter_param_usuario(869, 187, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_bloq_glosa_part_w);

nr_glosa_part_w	:= 99;

if (ie_bloq_glosa_part_w = 'N') then
	nr_glosa_part_w := 8;
end if;


select	max(cd_convenio),
	max(cd_categoria),
	max(cd_plano),
	max(cd_usuario_convenio),
	max(cd_medico_solicitante)
into STRICT	cd_convenio_w,
	cd_categoria_w,
	cd_plano_w,
	cd_usuario_convenio_w,
	cd_medico_w
from	agenda_integrada
where	nr_sequencia = nr_seq_ageint_p;

select	coalesce(max(ie_guia),'N'),
	coalesce(max(ie_senha),'N'),
	coalesce(max(ie_indicacao_clinica),'N'),
	coalesce(max(ie_carteirinha),'N'),
	coalesce(max(ie_validade_senha),'N'),
	coalesce(max(ie_medico),'N'),
	coalesce(max(ie_plano),'N')
into STRICT	ie_guia_w,
	ie_senha_w,
	ie_indicacao_clinica_w,
	ie_carteirinha_w,
	ie_validade_senha_w,
	ie_medico_w,
	ie_plano_w
from	ageint_regra_dados_autor
where	cd_convenio = cd_convenio_w;


open C01;
loop
fetch C01 into
	nr_seq_ageint_item_w,
	nr_seq_proc_interno_w,
	nr_doc_convenio_w,
	ds_senha_w,
	dt_solic_exame_w,
	ie_autor_recep_w,
	ie_pac_possui_autor_w,
	ds_cirurgia_w,
	dt_validade_senha_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (ie_pac_possui_autor_w = 'S') then
		if (ie_guia_w	= 'S' and coalesce(nr_doc_convenio_w::text, '') = '') then
			insert into w_inconsistencia_ageint(nr_seq_ageint,
							    nr_seq_ageint_item,
							    ds_inconsistencia)
						values (nr_seq_ageint_p,
							    nr_seq_ageint_item_w,
							    wheb_mensagem_pck.get_texto(791341));
		end if;

		if (ie_senha_w	= 'S' and coalesce(nr_doc_convenio_w::text, '') = '') then
			insert into w_inconsistencia_ageint(nr_seq_ageint,
							    nr_seq_ageint_item,
							    ds_inconsistencia)
						values (nr_seq_ageint_p,
							    nr_seq_ageint_item_w,
							    wheb_mensagem_pck.get_texto(791342));
		end if;
	end if;

	if (ie_indicacao_clinica_w	= 'S' and coalesce(ds_cirurgia_w::text, '') = '') then
		insert into w_inconsistencia_ageint(nr_seq_ageint,
						    nr_seq_ageint_item,
						    ds_inconsistencia)
					values (nr_seq_ageint_p,
						    nr_seq_ageint_item_w,
						    wheb_mensagem_pck.get_texto(791343));
	end if;

	if (ie_carteirinha_w	= 'S' and coalesce(cd_usuario_convenio_w::text, '') = '') then
		insert into w_inconsistencia_ageint(nr_seq_ageint,
						    nr_seq_ageint_item,
						    ds_inconsistencia)
					values (nr_seq_ageint_p,
						    nr_seq_ageint_item_w,
						    wheb_mensagem_pck.get_texto(791344));
	end if;

	if (ie_validade_senha_w	= 'S' and coalesce(dt_validade_senha_w::text, '') = '') then
		insert into w_inconsistencia_ageint(nr_seq_ageint,
						    nr_seq_ageint_item,
						    ds_inconsistencia)
					values (nr_seq_ageint_p,
						    nr_seq_ageint_item_w,
						    wheb_mensagem_pck.get_texto(791345));
	end if;

	if (ie_medico_w	= 'S' and coalesce(cd_medico_w::text, '') = '') then
		insert into w_inconsistencia_ageint(nr_seq_ageint,
						    nr_seq_ageint_item,
						    ds_inconsistencia)
					values (nr_seq_ageint_p,
						    nr_seq_ageint_item_w,
						    wheb_mensagem_pck.get_texto(791346));
	end if;

	if (ie_plano_w	= 'S' and coalesce(cd_plano_w::text, '') = '') then
		insert into w_inconsistencia_ageint(nr_seq_ageint,
						    nr_seq_ageint_item,
						    ds_inconsistencia)
					values (nr_seq_ageint_p,
						    nr_seq_ageint_item_w,
						    wheb_mensagem_pck.get_texto(791347));
	end if;

	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_obter_se_dados_autor (nr_seq_ageint_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

