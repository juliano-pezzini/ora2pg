-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_horario_agenda_servico (cd_estabelecimento_p bigint, cd_agenda_p agenda.cd_agenda%type, dt_agenda_p agenda_consulta.dt_agenda%type, nm_usuario_p agenda_consulta.nm_usuario%type, nr_sequencia_origem_p agenda_consulta.nr_sequencia%type DEFAULT NULL) AS $body$
DECLARE



ie_dia_semana_w			smallint;
ie_feriado_w			varchar(001)	:= 'N';
ie_feriado_exame_w		varchar(001)	:= 'N';
ie_permite_feriado_w		varchar(001);
HR_QUEBRA_TURNO_W		varchar(05);
qt_min_QUEBRA_TURNO_W		varchar(05);
qt_min_minimo_w			integer;
ds_horario_w			varchar(255);
hr_inicial_w			timestamp;
hr_final_w			timestamp;
nr_minuto_intervalo_w		agenda_turno.nr_minuto_intervalo%type;
nr_seq_classif_med_w		bigint;
ds_observacao_w			varchar(255);
ie_classif_Agenda_w		varchar(0005);
nr_seq_sala_w			bigint;
cd_convenio_padrao_w		bigint;
cd_categoria_padrao_w		varchar(10);
hr_atual_w			timestamp;
hr_fim_w			timestamp;
qt_existe_agenda_w		smallint;
qt_horario_w			integer    := 0;
qt_bloqueio_w			smallint;
qt_bloqueio_hora_w		smallint;
qt_bloqueio_dia_w		smallint;
qt_bloqueio_dia_hora_w		smallint;
nr_sequencia_w			bigint    := 0;
nr_seq_turno_w			bigint    := 0;
cd_turno_w			varchar(01);
qt_inicio_w			bigint    := 0;
qt_agenda_w			bigint    := 0;
cd_classificacao_alter_regr_w	varchar(05);
cd_classificacao_w		varchar(05);
cd_classificacao_old_w		varchar(05);
qt_classificacao_w		bigint  := 0;
nr_seq_hora_w			bigint  := 0;
cd_medico_w			varchar(10);
cd_medico_old_w			varchar(10);
qt_bloq_classificacao_w		smallint		:= 0;/* Rafael em 26/09/2006 OS41332 */
qt_bloq_classificacao_dia_w	smallint		:= 0;/* Rafael em 26/09/2006 OS41332 */
qt_bloq_classif_dia_hora_w	smallint		:= 0;

qt_agenda_bloq_classif_w	smallint		:= 0;/* Rafael em 26/09/2006 OS41332 */
qt_agenda_bloq_classif_dia_w	smallint	:= 0;/* Rafael em 26/09/2006 OS41332 */
qt_agenda_bloq_classif_diahr_w	smallint	:= 0;

cd_medico_solic_w		varchar(10);
ie_considera_w			varchar(1)	:= 'N';
ie_considerar_original_w	varchar(1)	:= 'N';
ie_todos_dias_regra_w		varchar(1)	:= 'N';
ie_gerar_hor_passado_w		varchar(1)	:= 'S';

qt_agenda_bloq_dia_hora_w	smallint	:= 0;
qt_agenda_bloq_hora_w		smallint	:= 0;
qt_agenda_bloq_w		smallint	:= 0;
qt_agenda_bloq_dia_w		smallint	:= 0;
qt_agenda_classif_w		bigint:= 0;
qt_agenda_classif_hor_w		bigint:= 0;
cd_setor_agenda_w		bigint;
qt_total_turno_w		smallint	:= 0;
qt_total_turno_lido_w		smallint	:= 0;
qt_inicio_agenda_w		bigint;
ie_gerar_hor_bloq_w		varchar(1);
ie_bloqueio_w			varchar(1);
ie_bloqueio_turno_w		varchar(1);
cd_procedimento_w		bigint;
nr_seq_proc_interno_w		bigint;
ie_origem_proced_w		bigint;
ie_consiste_periodo_w		varchar(1);
ie_status_autor_w		varchar(15);

cd_setor_entrega_w		integer;
cd_setor_coleta_w		integer;
cd_setor_atendimento_w		integer;

nr_seq_prof_w			bigint;
nr_seq_ordem_min_w		bigint;
nr_seq_ordem_min_aux_w		bigint;
ie_gerar_prof_hor_w		varchar(1);
ie_gerar_prof_hor_livre_w	varchar(1);
ie_consiste_seq_classif_w	varchar(1) := 'N';
nr_seq_classif_w		bigint;
nr_seq_exame_w			bigint;
ie_forma_agendamento_w		smallint;
nr_seq_apres_w			bigint;
ie_status_w			varchar(10);
ie_status_inicio_w		varchar(10);
ie_gerar_hor_falta_w		varchar(1);
ie_manter_livres_w		varchar(1);
qt_gera_horario_W		bigint;
ie_carater_inter_sus_w		varchar(2);
ie_tipo_atendimento_w		smallint;
nr_seq_transporte_w		bigint;
ie_gerar_nome_w			varchar(1);
qt_dia_inicial_w		bigint;
qt_dia_final_w			bigint;
qt_dia_filtro_ini_w		bigint;
qt_dia_filtro_fim_w		bigint;
ds_erro_w			varchar(1) := 'N';
nm_tabela_w			INTEGRIDADE_REFERENCIAL.NM_TABELA%TYPE;
nm_integridade_ref_w		INTEGRIDADE_REFERENCIAL.NM_INTEGRIDADE_REFERENCIAL%TYPE;
ds_contraint_name_w		USER_CONS_COLUMNS.COLUMN_NAME%TYPE;
ds_comando_w			varchar(4000);
cd_procedencia_w		agenda_consulta.cd_procedencia%type;
cd_estabelecimento_w            agenda.cd_estabelecimento%type;

dt_agenda_trunc_w 		timestamp;
dt_atual_trunc_w		timestamp;
dt_agenda_final_dia_w		timestamp;
nr_seq_regra_bloq_w		agenda_bloqueio_geral.nr_sequencia%type;
nr_delete_turno_w		bigint := 0;
nr_seq_motivo_bloq_w		agenda_consulta.nr_seq_motivo_bloq%type;

ie_executar_proc_w			agenda_consulta_proc.ie_executar_proc%type;
nr_seq_controle_mipres_w	agenda_consulta_proc.nr_seq_controle_mipres%type;
nr_sequencia_mipres_w		agenda_consulta_proc.nr_seq_controle_mipres%type;
nr_sequencia_proc_w			agenda_consulta_proc.nr_sequencia%type;

cursor_proc CURSOR FOR
SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno,
		ie_executar_proc,
		a.nr_seq_controle_mipres
from	agenda_consulta_proc a
where	nr_seq_agenda = nr_sequencia_origem_p
order by nr_seq_agenda;

C01 CURSOR FOR
SELECT	TO_DATE(TO_CHAR(dt_agenda_p,'dd/mm/yyyy') || ' ' ||
	TO_CHAR(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
	TO_DATE(TO_CHAR(dt_agenda_p,'dd/mm/yyyy') || ' ' ||
	TO_CHAR(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
	nr_minuto_intervalo,
	ie_classif_agenda,
	nr_seq_classif_med,
	substr(ds_observacao,1,80),
	nr_seq_sala,
	cd_convenio_padrao,
	cd_categoria_padrao,
	nr_sequencia,
	coalesce(qt_total_turno,0)
FROM 	agenda_Turno a
WHERE 	cd_agenda	= cd_agenda_p
  AND 	ie_dia_semana	= ie_dia_Semana_w
  AND	((coalesce(dt_inicio_vigencia::text, '') = '') OR (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicio_vigencia) <= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)))
  AND	((coalesce(dt_final_vigencia::text, '') = '') OR (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final_vigencia) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)))
  AND	((((ie_feriado_w <> 'S') and (coalesce(ie_feriado,'X') <> 'F')) or (coalesce(ie_feriado, obter_se_agenda_feriado(cd_agenda_p)) = 'S')) or (ie_feriado = 'F' AND ie_feriado_w = 'S'))
  AND	obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_agenda_p) = 'S'
  AND (TO_DATE(TO_CHAR(dt_agenda_p,'dd/mm/yyyy') || ' ' ||TO_CHAR(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi:ss') > clock_timestamp() and (ie_gerar_hor_passado_w = 'N') 
	or (ie_gerar_hor_passado_w = 'S'))
  and	((Obter_Semana_Dia_Agecons(dt_agenda_p,ie_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0))

UNION

SELECT TO_DATE(TO_CHAR(dt_agenda_p,'dd/mm/yyyy') || ' ' ||
	TO_CHAR(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
	TO_DATE(TO_CHAR(dt_agenda_p,'dd/mm/yyyy') || ' ' ||
	TO_CHAR(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
	nr_minuto_intervalo,
	ie_classif_agenda,
	nr_seq_classif_med,
	substr(ds_observacao,1,80),
	nr_seq_sala,
	cd_convenio_padrao,
	cd_categoria_padrao,
	nr_sequencia,
	coalesce(qt_total_turno,0)
FROM 	agenda_Turno
WHERE 	cd_agenda     	= cd_agenda_p
  AND 	ie_dia_semana		= 9  
  AND	((coalesce(dt_inicio_vigencia::text, '') = '') OR (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicio_vigencia) <= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)))
  AND	((coalesce(dt_final_vigencia::text, '') = '') OR (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final_vigencia) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)))
  AND	ie_dia_semana_w BETWEEN qt_dia_inicial_w and qt_dia_final_w
  AND	((((ie_feriado_w <> 'S') and (coalesce(ie_feriado,'X') <> 'F')) or (coalesce(ie_feriado, obter_se_agenda_feriado(cd_agenda_p)) = 'S')) or (ie_feriado = 'F' AND ie_feriado_w = 'S'))
  AND	obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_agenda_p) = 'S'
  and	((Obter_Semana_Dia_Agecons(dt_agenda_p,ie_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0))
  AND (TO_DATE(TO_CHAR(dt_agenda_p,'dd/mm/yyyy') || ' ' ||TO_CHAR(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi:ss') > clock_timestamp() and (ie_gerar_hor_passado_w = 'N') 
	or (ie_gerar_hor_passado_w = 'S'))
    AND	NOT EXISTS	(SELECT	1
					FROM 	agenda_Turno
					WHERE 	cd_agenda				= cd_agenda_p
					AND 	ie_dia_semana			= ie_dia_Semana_w
					and		ie_todos_dias_regra_w 	= 'N'
					AND		((coalesce(dt_inicio_vigencia::text, '') = '') OR (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicio_vigencia) <= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)))
					AND		((coalesce(dt_final_vigencia::text, '') = '') OR (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final_vigencia) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)))
					and		((ie_dia_semana	= ie_dia_Semana_w) or ((ie_dia_semana = 9) and ie_dia_semana_w BETWEEN qt_dia_inicial_w and qt_dia_final_w)))
	
ORDER BY
	1,2,3;

c02 CURSOR FOR
SELECT	cd_classificacao,
		qt_classif,
		coalesce(cd_medico,'0'),
		coalesce(cd_medico_solic,'0'),
		coalesce(cd_procedimento,0),
		coalesce(nr_seq_proc_interno,0),
		coalesce(ie_origem_proced,0),
		coalesce(cd_setor_entrega,0),
		coalesce(cd_setor_coleta,0),
		cd_setor_atendimento,
		nr_sequencia,
		nr_seq_exame,
		ie_forma_agendamento,
		ie_carater_inter_sus,
		ie_tipo_atendimento,
		coalesce(nr_seq_apres,0),
		nr_seq_transporte
FROM	agenda_turno_classif
WHERE	nr_seq_turno	= nr_seq_turno_w
AND	((ie_feriado_exame_w 	<> 'S') OR (coalesce(ie_gera_feriado,'S') = 'S'))
order by 3;

--Identificar inconsistencias de integridade referencial nos agendamentos com status Livre/Bloqueado(Onde e realizado o delete nos horarios)	
C03 CURSOR FOR	
SELECT	b.nm_tabela,
	b.nm_integridade_referencial	
from	tabela_sistema a,
	integridade_referencial b	
where	a.nm_tabela = b.nm_tabela_referencia
and	upper(a.nm_tabela) = upper('AGENDA_CONSULTA')
order by 1;


BEGIN
SELECT	coalesce(MAX(ie_feriado), 'N'),
	    coalesce(MAX(HR_QUEBRA_TURNO), '12'),
	    coalesce(MAX(qt_min_quebra_turno), '00'),
	    MAX(cd_setor_agenda),
	    MAX(ie_gerar_hor_bloq),
	    coalesce(max(ie_gerar_prof_hor),'N'),
	    max(cd_procedencia),
		max(cd_estabelecimento)
INTO STRICT	ie_permite_feriado_w,
	    HR_QUEBRA_TURNO_W,
	    qt_min_QUEBRA_TURNO_W,
	    cd_setor_agenda_w,
	    ie_gerar_hor_bloq_w,
	    ie_gerar_prof_hor_w,
	    cd_procedencia_w,
		cd_estabelecimento_w
FROM	agenda
WHERE	cd_agenda = cd_agenda_p;

begin
select	ie_forma_excluir_servico
into STRICT	ie_manter_livres_w
from	parametro_agenda
where	cd_estabelecimento	= cd_estabelecimento_w;
exception
	when others then
	select	coalesce(max(ie_forma_excluir_servico),'N')
	into STRICT	ie_manter_livres_w
	from	parametro_agenda
	where	cd_estabelecimento	= cd_estabelecimento_p;
end;
/*
select  decode(count(*),0,'N','S')
into	ie_manter_livres_w
from    parametro_agenda
where	nvl(ie_forma_excluir_servico,'N')       = 'S'
and 	cd_estabelecimento = cd_estabelecimento_p;
*/
qt_dia_inicial_w	:= 2;
qt_dia_final_w		:= 6;
qt_dia_filtro_ini_w	:= 7;
qt_dia_filtro_fim_w	:= 1;

/*SO-2220426*/

dt_agenda_trunc_w := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p);
dt_atual_trunc_w  := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp());
dt_agenda_final_dia_w := ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p);

if (ie_manter_livres_w <> 'N') then
	if (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_Agenda_p)	< ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())) then
		qt_gera_horario_w	:= 1;
	else
		begin
		select 	1
		into STRICT 	qt_gera_horario_w
		from 	agenda_controle_horario
		where 	cd_agenda = cd_agenda_p
		and		dt_agenda = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_Agenda_p)  LIMIT 1;
		exception
		when others then
			qt_gera_horario_w	:= 0;
		end;	
	end if;	
	
	if (qt_gera_horario_w	> 0) and
		((dt_agenda_trunc_w	= dt_atual_trunc_w AND ie_manter_livres_w = 'S') or
		 (dt_agenda_trunc_w    < dt_atual_trunc_w AND ie_manter_livres_w = 'E')) then			
		
		begin
		
		delete 	/*+index(a AGECONS_I2)*/ 
		from 	agenda_consulta a
		where 	cd_agenda		= cd_agenda_p
		and 	((ie_status_agenda	= 'L')
		or	((ie_status_agenda	= 'B')
		and 	ie_bloqueado_manual = 'N'))
		and	dt_agenda < dt_atual_trunc_w
		and 	dt_agenda between dt_agenda_trunc_w and dt_agenda_final_dia_w;
		
		exception
		when others then
			
		open C03;
		loop
		fetch C03 into	
			nm_tabela_w,
			nm_integridade_ref_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			
			SELECT	MAX(A.COLUMN_NAME)
			into STRICT	ds_contraint_name_w
			FROM	USER_CONS_COLUMNS A	
			WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
			
			if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
				ds_comando_w := ' 	update	' || nm_tabela_w || '
							set	' || ds_contraint_name_w || ' = null
							where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
													FROM 	agenda_consulta a
													WHERE 	cd_agenda = ' || cd_agenda_p || '
													AND 	((ie_status_agenda = ''L'') 
													or 	((ie_status_agenda = ''B'')
													and	ie_bloqueado_manual = ''N''))
													and	dt_agenda < ' || dt_atual_trunc_w || '
													AND 	dt_agenda between ' || dt_agenda_trunc_w || ' and ' || dt_agenda_final_dia_w;
				
				CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_SERVICO', ds_comando_w);				
				
			end if;				
			
			end;
		end loop;
		close C03;			
		end;

		commit;
	end if;	
else
	qt_gera_horario_w	:= 0;
end if;

if (qt_gera_horario_w	= 0) then
	if (ie_manter_livres_w	<> 'N') then
		begin
		insert into agenda_controle_horario(nr_sequencia,
						cd_agenda,
						dt_agenda,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec)
				values (nextval('agenda_controle_horario_seq'),
						cd_agenda_p,
						ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p);
		commit;
		exception
		when others then
			qt_gera_horario_w	:= 1;
		end;
	end if;
	if (qt_gera_horario_w	= 0) then
		ie_considera_w := Obter_Param_Usuario(866, 38, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_considera_w);
		ie_consiste_periodo_w := Obter_Param_Usuario(866, 90, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_periodo_w);
		ie_considerar_original_w := Obter_Param_Usuario(866, 110, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_considerar_original_w);
		ie_todos_dias_regra_w := Obter_Param_Usuario(866, 120, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_todos_dias_regra_w);
		ie_gerar_hor_passado_w := Obter_Param_Usuario(866, 133, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_hor_passado_w);
		ie_gerar_prof_hor_livre_w := Obter_Param_Usuario(866, 141, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_prof_hor_livre_w);
		ie_consiste_seq_classif_w := Obter_Param_Usuario(866, 157, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_seq_classif_w);
		ie_gerar_hor_falta_w := Obter_Param_Usuario(866, 184, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_hor_falta_w);
		ie_gerar_nome_w := Obter_Param_Usuario(866, 262, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_nome_w);

		if (ie_gerar_hor_falta_w = 'S') then
			ie_status_w		:= 'C,F,I';
			ie_status_inicio_w	:= 'L,C,I,F';
		else
			ie_status_w		:= 'C';
			ie_status_inicio_w	:= 'L,C';
		end if;

		select	coalesce(max(obter_valor_param_usuario(866, 102, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), null)
		into STRICT 	ie_status_autor_w
		;

		ie_dia_semana_w	:= pkg_date_utils.get_weekday(dt_agenda_p);--obter_cod_dia_semana(dt_agenda_p);
		BEGIN
			SELECT CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			INTO STRICT ie_feriado_exame_w
			FROM feriado a, 
				 agenda b
			WHERE a.cd_estabelecimento = b.cd_estabelecimento
			AND   trunc(a.dt_feriado) = trunc(dt_agenda_p)
			AND   b.cd_agenda = cd_agenda_p;
		EXCEPTION
			WHEN OTHERS THEN
				ie_feriado_exame_w := 'N';
		END;

		IF (ie_permite_feriado_w = 'N') THEN
			BEGIN
				SELECT CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
				INTO STRICT ie_feriado_w
				FROM feriado a, 
					 agenda b
				WHERE a.cd_estabelecimento = b.cd_estabelecimento
				AND   trunc(a.dt_feriado) = trunc(dt_agenda_p)
				AND   b.cd_agenda = cd_agenda_p;
			EXCEPTION
				WHEN OTHERS THEN
					ie_feriado_w := 'N';
			END;
		END IF;
		
		/*SO-2220426*/

		if (ie_manter_livres_w	= 'N') then
			begin
			
			DELETE	/*+ INDEX(A AGECONS_UK) */			FROM 	agenda_consulta a
			WHERE 	cd_agenda		= cd_agenda_p
			AND 	ie_status_agenda	IN ('L')
			AND 	dt_agenda BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p) AND ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p);
			
			exception
			when others then
			ds_erro_w := 'N';
			
			open C03;
			loop
			fetch C03 into	
				nm_tabela_w,
				nm_integridade_ref_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				
				SELECT	MAX(A.COLUMN_NAME)
				into STRICT	ds_contraint_name_w
				FROM	USER_CONS_COLUMNS A	
				WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
				
				if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
					ds_comando_w := ' 	update	' || nm_tabela_w || '
								set	' || ds_contraint_name_w || ' = null
								where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
														FROM 	agenda_consulta a
														WHERE 	cd_agenda		= ' || cd_agenda_p || '
														AND 	ie_status_agenda	IN (''L'')
														AND 	dt_agenda BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(' || dt_agenda_p || ',''dd'') AND ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(' || dt_agenda_p || ',''dd'') + (1 - 1/86400) ';
					
					CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_SERVICO', ds_comando_w);				
					
				end if;				
				
				end;
			end loop;
			close C03;			
			commit;
			
			end;
			
			/*SO-2220426*/

			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				begin
			
				DELETE	/*+ INDEX(A AGECONS_UK) */				FROM 	agenda_consulta a
				WHERE 	cd_agenda		= cd_agenda_p
				AND 	ie_status_agenda	IN ('B')
				AND 	dt_agenda BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p) AND ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p)
				AND		IE_BLOQUEADO_MANUAL = 'N';
				
				exception
				when others then
				
				open C03;
				loop
				fetch C03 into	
					nm_tabela_w,
					nm_integridade_ref_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin
					
					SELECT	MAX(A.COLUMN_NAME)
					into STRICT	ds_contraint_name_w
					FROM	USER_CONS_COLUMNS A	
					WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
					
					if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
						ds_comando_w := ' 	update	' || nm_tabela_w || '
											set		' || ds_contraint_name_w || ' = null
											where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																						FROM 	agenda_consulta a
																						WHERE 	cd_agenda		= ' || cd_agenda_p || '
																						AND 	ie_status_agenda	IN (''B'')
																						AND 	dt_agenda BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(' || dt_agenda_p || ') AND ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(' || dt_agenda_p || ')
																						AND		IE_BLOQUEADO_MANUAL = ''N'' ';
						
						CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_SERVICO', ds_comando_w);				
						
					end if;				
					
					end;
				end loop;
				close C03;						
				commit;
				
				end;				
			end if;

			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				begin
				DELETE	/*+ INDEX(A AGECONS_UK) */				FROM 	agenda_consulta a
				WHERE 	cd_agenda		= cd_agenda_p
				AND 	ie_status_agenda	IN ('L')
				and 	dt_agenda BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p) AND ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p)
				AND 	dt_agenda < clock_timestamp();
				
				exception
				when others then
				
				open C03;
				loop
				fetch C03 into	
					nm_tabela_w,
					nm_integridade_ref_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin
					
					SELECT	MAX(A.COLUMN_NAME)
					into STRICT	ds_contraint_name_w
					FROM	USER_CONS_COLUMNS A	
					WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
					
					if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
						ds_comando_w := ' 	update	' || nm_tabela_w || '
											set		' || ds_contraint_name_w || ' = null
											where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																						form	agenda_consulta a
																						WHERE 	cd_agenda		= ' || cd_agenda_p || '
																						AND 	ie_status_agenda	IN (''L'')
																						AND 	dt_agenda < SYSDATE ';
						
						CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_SERVICO', ds_comando_w);				
						
					end if;				
					
					end;
				end loop;
				close C03;				
				commit;		
				
				end;
			end if;						
		else
			begin
			/*SO-2220426*/

			delete 	/*+index(a AGECONS_I2)*/ from agenda_consulta a
			where 	cd_agenda		= cd_agenda_p
			and 	((ie_status_agenda	= 'L')
			or		((ie_status_agenda	= 'B')
			and 	ie_bloqueado_manual = 'N'))
			and 	dt_agenda between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p)
			        	            and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p);
									
			exception
			when others then
			
			open C03;
			loop
			fetch C03 into	
				nm_tabela_w,
				nm_integridade_ref_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				
				SELECT	MAX(A.COLUMN_NAME)
				into STRICT	ds_contraint_name_w
				FROM	USER_CONS_COLUMNS A	
				WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
				
				if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
					ds_comando_w := ' 	update	' || nm_tabela_w || '
										set		' || ds_contraint_name_w || ' = null
										where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
																					where 	cd_agenda		= ' || cd_agenda_p || '
																					and 	((ie_status_agenda	= ''L'')
																					or		((ie_status_agenda	= ''B'')
																					and 	ie_bloqueado_manual = ''N''))
																					and 	dt_agenda between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(' || dt_agenda_p || ')
																					and 	ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p)';
					
					CALL Exec_sql_Dinamico('GERAR_HORARIO_AGENDA_SERVICO', ds_comando_w);				
					
				end if;				
				
				end;
			end loop;
			close C03;									
			commit;
			
			end;
			
		end if;

		qt_min_minimo_w		:= 5;
		ds_horario_w		:= '';
		qt_agenda_w		:= 0;
		qt_agenda_classif_w	:= 0;

		qt_agenda_classif_hor_w	:= 0;

		OPEN C01;
		LOOP
		FETCH C01 INTO
			hr_inicial_w,
			hr_final_w,
			nr_minuto_Intervalo_w,
			ie_classif_agenda_w,
			nr_seq_classif_med_w,
			ds_observacao_w,
			nr_seq_sala_w,
			cd_convenio_padrao_w,
			cd_categoria_padrao_w,
			nr_seq_turno_w,
			qt_total_turno_lido_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		     	BEGIN
			
			IF (hr_inicial_w < hr_final_w) THEN
				
			hr_atual_w		:= hr_inicial_w;
			ie_classif_agenda_w	:= 'N';

		/* inicio da NOVA rotina de bloqueio (Rafael em 25/09/2006 OS41280) */


			/*SO-2220426*/

			SELECT 	COUNT(*),
					coalesce(MAX(qt_agenda_bloq),0)
			INTO STRICT	qt_bloqueio_hora_w,
					qt_agenda_bloq_hora_w
			FROM	agenda_bloqueio
			WHERE	cd_agenda	= cd_agenda_p
			AND		ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(hr_atual_w, HR_INICIO_BLOQUEIO)  <= (hr_atual_w + nr_minuto_Intervalo_w/1441)
			AND		ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(hr_atual_w, HR_final_BLOQUEIO) > hr_atual_w
			AND		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) AND ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final)
			AND		(HR_INICIO_BLOQUEIO IS NOT NULL AND HR_INICIO_BLOQUEIO::text <> '')
			AND		(HR_final_BLOQUEIO IS NOT NULL AND HR_final_BLOQUEIO::text <> '')
			AND		coalesce(ie_dia_semana::text, '') = ''
			AND		coalesce(cd_medico::text, '') = ''
			AND		coalesce(ie_classif_bloqueio::text, '') = '';

			SELECT COUNT(*),
					coalesce(MAX(qt_agenda_bloq),0)
			INTO STRICT	qt_bloqueio_w,
					qt_agenda_bloq_w
			FROM	agenda_bloqueio
			WHERE	cd_agenda	= cd_agenda_p
			AND		dt_inicial	<= (hr_atual_w + nr_minuto_Intervalo_w/1441)
			AND		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w)
			AND		coalesce(HR_INICIO_BLOQUEIO::text, '') = ''
			AND		coalesce(HR_final_BLOQUEIO::text, '') = ''
			AND		coalesce(ie_dia_semana::text, '') = ''
			AND		coalesce(cd_medico::text, '') = ''
			AND		coalesce(ie_classif_bloqueio::text, '') = '';



			BEGIN
			SELECT 	COUNT(*),
					coalesce(MAX(qt_agenda_bloq),0)
			INTO STRICT	qt_bloqueio_dia_w,
					qt_agenda_bloq_dia_w
			FROM	agenda_bloqueio
			WHERE	cd_agenda	= cd_agenda_p
			AND		dt_inicial	<= (hr_atual_w + nr_minuto_Intervalo_w/1441)
			AND		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w)
			--AND		ie_dia_semana	= ie_dia_semana_w
			AND		((ie_dia_semana	= ie_dia_semana_w) OR ((ie_dia_semana	= 9) and ie_dia_semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)) OR (coalesce(ie_dia_semana::text, '') = ''))
			AND		coalesce(HR_INICIO_BLOQUEIO::text, '') = ''
			AND		coalesce(HR_FINAL_BLOQUEIO::text, '') = ''
			AND		coalesce(cd_medico::text, '') = ''
			AND		coalesce(ie_classif_bloqueio::text, '') = '';
			EXCEPTION
				WHEN OTHERS THEN
					qt_bloqueio_dia_w	 := 0;
			END;

			BEGIN
			SELECT 	COUNT(*),
				coalesce(MAX(qt_agenda_bloq),0)
			INTO STRICT	qt_bloqueio_dia_hora_w,
				qt_agenda_bloq_dia_hora_w
			FROM	agenda_bloqueio
			WHERE	cd_agenda	= cd_agenda_p
			AND 	ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w), HR_INICIO_BLOQUEIO) <=	(hr_atual_w + nr_minuto_Intervalo_w/1441)
			AND		ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w), HR_final_BLOQUEIO) > hr_atual_w
			AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) AND ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final)
			--AND	((ie_dia_semana	= ie_dia_semana_w) OR (ie_dia_semana	= 9) OR (ie_dia_semana IS NULL))
			AND		((ie_dia_semana	= ie_dia_semana_w) OR ((ie_dia_semana	= 9) and ie_dia_semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)) OR (coalesce(ie_dia_semana::text, '') = ''))
			AND	(HR_INICIO_BLOQUEIO IS NOT NULL AND HR_INICIO_BLOQUEIO::text <> '')
			AND	(HR_FINAL_BLOQUEIO IS NOT NULL AND HR_FINAL_BLOQUEIO::text <> '')
			AND	coalesce(cd_medico::text, '') = ''
			AND	coalesce(ie_classif_bloqueio::text, '') = '';
			EXCEPTION
				WHEN OTHERS THEN
					qt_bloqueio_dia_hora_w := 0;
			END;
			
		/* final da NOVA rotina de bloqueio (Rafael em 25/09/2006 OS41280) */



		/*
						to_char(qt_bloqueio_hora_w)||'-'||
						to_char(qt_bloqueio_dia_w)||'-'||
						to_char(qt_bloqueio_dia_hora_w)||'-'||
						to_char(cd_agenda_p)||'-'||
						to_char(hr_atual_w,'dd/mm/yyyy hh24:mi:ss')||'-'||
						to_char(nr_minuto_intervalo_w));*/
						
			qt_inicio_w		:= 0;

			IF	(((qt_bloqueio_w = 0) OR (qt_agenda_bloq_w > 0)) AND
				((qt_bloqueio_hora_w = 0) OR (qt_agenda_bloq_hora_w > 0)) AND
				((qt_bloqueio_dia_w = 0) OR (qt_agenda_bloq_dia_w > 0)) AND
				((qt_bloqueio_dia_hora_w = 0) OR (qt_agenda_bloq_dia_hora_w > 0))) OR (ie_gerar_hor_bloq_w = 'S') THEN
				BEGIN
				cd_turno_w		:= 0;

				ie_bloqueio_turno_w	:= 'S';
			

				IF	(((qt_bloqueio_w = 0) OR (qt_agenda_bloq_w > 0)) AND
					((qt_bloqueio_hora_w = 0) OR (qt_agenda_bloq_hora_w > 0)) AND
					((qt_bloqueio_dia_w = 0) OR (qt_agenda_bloq_dia_w > 0)) AND
					((qt_bloqueio_dia_hora_w = 0) OR (qt_agenda_bloq_dia_hora_w > 0))) THEN

					ie_bloqueio_turno_w	:= 'N';

				end if;				

		/*		IF 	((qt_bloqueio_w > 0) AND (qt_agenda_bloq_w = 0)) AND
					((qt_bloqueio_hora_w > 0) AND (qt_agenda_bloq_hora_w = 0)) AND
					((qt_bloqueio_dia_w > 0) AND (qt_agenda_bloq_dia_w = 0)) AND
					((qt_bloqueio_dia_hora_w > 0) AND (qt_agenda_bloq_dia_hora_w = 0)) THEN
					ie_bloqueio_w	:= 'S';
				END IF;*/
				IF ((pkg_date_utils.extract_field('HOUR',hr_atual_w))::numeric  > somente_numero(HR_QUEBRA_TURNO_W)) OR
					(((pkg_date_utils.extract_field('HOUR',hr_atual_w))::numeric  = somente_numero(HR_QUEBRA_TURNO_W)) AND ((pkg_date_utils.extract_field('MINUTE',hr_atual_w))::numeric  >= somente_numero(qt_min_QUEBRA_TURNO_W))) THEN
					cd_turno_w	:= 1;
				END IF;

				SELECT	COUNT(*)
				INTO STRICT	qt_inicio_agenda_w
				FROM	agenda_consulta
				WHERE	cd_agenda	= cd_agenda_p
				AND	dt_agenda	= hr_atual_w
				and	obter_se_contido_char(ie_status_agenda, ie_status_inicio_w) = 'N';

				qt_Total_turno_w	:=	qt_inicio_agenda_w;

				OPEN	c02;
				LOOP
				FETCH	c02 INTO
					cd_classificacao_w,
					qt_classificacao_w,
					cd_medico_w,
					cd_medico_solic_w,
					cd_procedimento_w,
					nr_seq_proc_interno_w,
					ie_origem_proced_w,
					cd_setor_entrega_w,
					cd_setor_coleta_w,
					cd_setor_atendimento_w,
					nr_seq_classif_w,
					nr_seq_exame_w,
					ie_forma_agendamento_w,
					ie_carater_inter_sus_w,
					ie_tipo_atendimento_w,
					nr_seq_apres_w,
					nr_seq_transporte_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					BEGIN
					qt_agenda_classif_hor_w	:= 0;
					IF (cd_classificacao_w <> cd_classificacao_old_w) OR (coalesce(cd_medico_w,'X') <> coalesce(cd_medico_old_w,'X')) THEN
						qt_agenda_classif_w	:= 0;
					END IF;
					
					cd_medico_old_w		:= cd_medico_w;
					
					
					if (ie_considerar_original_w = 'S') then
					
						SELECT	COUNT(*)
						INTO STRICT	qt_inicio_w
						FROM	agenda_consulta
						WHERE	cd_agenda	= cd_agenda_p
						AND		dt_agenda	between hr_atual_w and (hr_atual_w + (59/ (24*60*60)))
						AND		(((((ie_considera_w = 'S') AND (coalesce(ie_classif_agenda_origem,ie_classif_agenda) = cd_classificacao_w)
						AND		(((ds_observacao IS NOT NULL AND ds_observacao::text <> '') AND (ds_observacao <> wheb_mensagem_pck.get_texto(308263) /*Classificacao alterada - Tasy*/
)) OR (coalesce(ds_observacao::text, '') = ''))) OR
								((ie_considera_w = 'N') AND (obter_se_contido_char(ie_status_agenda, ie_status_w) = 'N') AND (coalesce(ie_classif_agenda_origem,ie_classif_agenda) = cd_classificacao_w)
						AND		(((ds_observacao IS NOT NULL AND ds_observacao::text <> '') AND (ds_observacao <> wheb_mensagem_pck.get_texto(308263) /*Classificacao alterada - Tasy*/
)) OR (coalesce(ds_observacao::text, '') = ''))))
						and (ie_consiste_seq_classif_w = 'N')) or
								(ie_consiste_seq_classif_w = 'S' AND nr_seq_classif = nr_seq_classif_w))
						AND		((cd_medico	= cd_medico_w) OR (cd_medico_w = '0'));
						
						IF (ie_consiste_periodo_w = 'S') THEN
							SELECT	COUNT(*)
							INTO STRICT	qt_inicio_w
							FROM	agenda_consulta
							WHERE	cd_agenda	= cd_agenda_p
							AND		dt_agenda	between hr_atual_w and (hr_atual_w + (59/ (24*60*60)))
							AND		(((((ie_considera_w = 'S') AND (coalesce(ie_classif_agenda_origem,ie_classif_agenda) = cd_classificacao_w)
							AND		(((ds_observacao IS NOT NULL AND ds_observacao::text <> '') AND (ds_observacao <> wheb_mensagem_pck.get_texto(308263) /*Classificacao alterada - Tasy*/
)) OR (coalesce(ds_observacao::text, '') = ''))) OR
									((ie_considera_w = 'N') AND (obter_se_contido_char(ie_status_agenda, ie_status_w) = 'N') AND (coalesce(ie_classif_agenda_origem,ie_classif_agenda) = cd_classificacao_w)
							AND		(((ds_observacao IS NOT NULL AND ds_observacao::text <> '') AND (ds_observacao <> wheb_mensagem_pck.get_texto(308263) /*Classificacao alterada - Tasy*/
)) OR (coalesce(ds_observacao::text, '') = ''))))
							and (ie_consiste_seq_classif_w = 'N')) or
									(ie_consiste_seq_classif_w = 'S' AND nr_seq_classif = nr_seq_classif_w))
							AND		((cd_medico	= cd_medico_w) OR (cd_medico_w = '0'));
							
						END IF;
					
					else
						SELECT	COUNT(*)
						INTO STRICT	qt_inicio_w
						FROM	agenda_consulta
						WHERE	cd_agenda	= cd_agenda_p
						AND		dt_agenda	between hr_atual_w and (hr_atual_w + (59/ (24*60*60)))
						AND		(((((ie_considera_w = 'S') AND (ie_classif_agenda = cd_classificacao_w)
						AND		(((ds_observacao IS NOT NULL AND ds_observacao::text <> '') AND (ds_observacao <> wheb_mensagem_pck.get_texto(308263) /*Classificacao alterada - Tasy*/
)) OR (coalesce(ds_observacao::text, '') = ''))) OR
								((ie_considera_w = 'N') AND (obter_se_contido_char(ie_status_agenda, ie_status_w) = 'N') AND (ie_classif_agenda = cd_classificacao_w)
						AND		(((ds_observacao IS NOT NULL AND ds_observacao::text <> '') AND (ds_observacao <> wheb_mensagem_pck.get_texto(308263) /*Classificacao alterada - Tasy*/
)) OR (coalesce(ds_observacao::text, '') = ''))))
						and (ie_consiste_seq_classif_w = 'N')) or
								(ie_consiste_seq_classif_w = 'S' AND nr_seq_classif = nr_seq_classif_w))
						AND		((cd_medico	= cd_medico_w) OR (cd_medico_w = '0'));						
						

						IF (ie_consiste_periodo_w = 'S') THEN
							SELECT	COUNT(*)
							INTO STRICT	qt_inicio_w
							FROM	agenda_consulta
							WHERE	cd_agenda	= cd_agenda_p
							AND		dt_agenda	between hr_atual_w and (hr_atual_w + (59/ (24*60*60)))
							AND		(((((ie_considera_w = 'S') AND (ie_classif_agenda = cd_classificacao_w)
							AND		(((ds_observacao IS NOT NULL AND ds_observacao::text <> '') AND (ds_observacao <> wheb_mensagem_pck.get_texto(308263) /*Classificacao alterada - Tasy*/
)) OR (coalesce(ds_observacao::text, '') = ''))) OR
									((ie_considera_w = 'N') AND (obter_se_contido_char(ie_status_agenda, ie_status_w) = 'N') AND (ie_classif_agenda = cd_classificacao_w)
							AND		(((ds_observacao IS NOT NULL AND ds_observacao::text <> '') AND (ds_observacao <> wheb_mensagem_pck.get_texto(308263) /*Classificacao alterada - Tasy*/
)) OR (coalesce(ds_observacao::text, '') = ''))))
							and (ie_consiste_seq_classif_w = 'N')) or
									(ie_consiste_seq_classif_w = 'S' AND nr_seq_classif = nr_seq_classif_w))
							AND		((cd_medico	= cd_medico_w) OR (cd_medico_w = '0'));							
						END IF;
					
					end if;
					
					if (ie_gerar_prof_hor_w = 'S') then
						select	min(nr_seq_ordem)
						into STRICT	nr_seq_ordem_min_w
						from	agenda_turno_prof
						where	nr_seq_turno	= nr_seq_turno_w;
					end if;
								
					WHILE(qt_inicio_w < qt_classificacao_w) LOOP
						BEGIN
						qt_agenda_w			:= qt_agenda_w		+ 1;
						qt_agenda_classif_w		:= qt_agenda_classif_w	+ 1;
						qt_inicio_w			:= qt_inicio_w		+ 1;
						qt_Total_turno_w		:= qt_Total_turno_w 	+ 1;
						
						qt_agenda_classif_hor_w		:= qt_agenda_classif_hor_w	+ 1;
						nr_seq_motivo_bloq_w		:= null;
						
						/*SO-2220426*/

						if (cd_classificacao_w = cd_classificacao_old_w) then
						      if (ie_gerar_hor_falta_w = 'S') then
							SELECT
							COUNT(*)
							INTO STRICT 	qt_existe_agenda_w
							FROM 	agenda_consulta a
							WHERE 	a.cd_agenda	= cd_agenda_p
							AND   	a.dt_agenda between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) AND ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(hr_atual_w)
							AND  (hr_atual_w between PKG_DATE_UTILS.GET_TIME(a.dt_agenda,  PKG_DATE_UTILS.extract_field('HOUR',a.dt_agenda), PKG_DATE_UTILS.extract_field('MINUTE', a.dt_agenda), 00)
							AND (a.dt_agenda + (a.nr_minuto_duracao - 1) /1440))
							AND 	a.ie_status_agenda 	not in ('C','LF','F','I')
							AND (a.nr_seq_turno <> nr_seq_turno_w OR a.IE_CLASSIF_AGENDA <> cd_classificacao_w) 
							AND nr_seq_turno_w <> nr_delete_turno_w;
						      else
							SELECT
							COUNT(*)
							INTO STRICT 	qt_existe_agenda_w
							FROM 	agenda_consulta a
							WHERE 	a.cd_agenda	= cd_agenda_p
							AND   	a.dt_agenda between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(hr_atual_w)
							AND	(hr_atual_w between	PKG_DATE_UTILS.GET_TIME(a.dt_agenda,  PKG_DATE_UTILS.extract_field('HOUR',a.dt_agenda), PKG_DATE_UTILS.extract_field('MINUTE', a.dt_agenda), 00)
							AND (a.dt_agenda + (a.nr_minuto_duracao - 1) /1440))
							AND 	a.ie_status_agenda 	not in ('C','LF')
							AND (a.nr_seq_turno <> nr_seq_turno_w OR a.IE_CLASSIF_AGENDA <> cd_classificacao_w)
							AND nr_seq_turno_w <> nr_delete_turno_w;
											end if;

						    else
						      qt_existe_agenda_w := 0;
						    end if;
            			
						/* Rafael em 26/09/2006 OS41332
						inclui os testes/tratamentos referentes ao bloqueio por classificacao */

						
						/*SO-2220426*/

						IF (qt_existe_agenda_w = 0) then
							BEGIN

							SELECT 	COUNT(*),
								coalesce(MAX(qt_agenda_bloq),0)
							INTO STRICT	qt_bloq_classificacao_w,
								qt_agenda_bloq_classif_w
							FROM	agenda_bloqueio
							WHERE	cd_agenda	= cd_agenda_p
							AND	dt_inicial	<= (hr_atual_w + nr_minuto_Intervalo_w/1440)
							AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w)
							AND	coalesce(HR_INICIO_BLOQUEIO::text, '') = ''
							AND	coalesce(HR_final_BLOQUEIO::text, '') = ''
							AND	coalesce(ie_dia_semana::text, '') = ''
							AND	coalesce(coalesce(ie_classif_bloqueio,cd_classificacao_w),'X')  = coalesce(cd_classificacao_w,'X')
							AND	coalesce(coalesce(cd_medico,cd_medico_w),'X') = coalesce(cd_medico_w,'X')
							AND 	((ie_classif_bloqueio IS NOT NULL AND ie_classif_bloqueio::text <> '') OR (cd_medico IS NOT NULL AND cd_medico::text <> ''));

							BEGIN
							SELECT 	COUNT(*),
								coalesce(MAX(qt_agenda_bloq),0)
							INTO STRICT	qt_bloq_classificacao_dia_w,
								qt_agenda_bloq_classif_dia_w
							FROM	agenda_bloqueio
							WHERE	cd_agenda	= cd_agenda_p
							AND	dt_inicial	<= (hr_atual_w + nr_minuto_Intervalo_w/1440)
							AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w)
							--AND	((ie_dia_semana	= ie_dia_semana_w) OR (ie_dia_semana = 9))
							AND		((ie_dia_semana	= ie_dia_semana_w) OR ((ie_dia_semana	= 9) and ie_dia_semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)) OR (coalesce(ie_dia_semana::text, '') = ''))
							AND	coalesce(HR_INICIO_BLOQUEIO::text, '') = ''
							AND	coalesce(HR_FINAL_BLOQUEIO::text, '') = ''
							AND	coalesce(coalesce(ie_classif_bloqueio,cd_classificacao_w),'X')  = coalesce(cd_classificacao_w,'X')
							AND	coalesce(coalesce(cd_medico,cd_medico_w),'X') = coalesce(cd_medico_w,'X')
							AND 	((ie_classif_bloqueio IS NOT NULL AND ie_classif_bloqueio::text <> '') OR (cd_medico IS NOT NULL AND cd_medico::text <> ''));
							EXCEPTION
								WHEN OTHERS THEN
									qt_bloqueio_dia_w	 := 0;
							END;


							BEGIN
							SELECT COUNT(*),
								coalesce(MAX(qt_agenda_bloq),0)
							INTO STRICT	qt_bloq_classif_dia_hora_w,
								qt_agenda_bloq_classif_diahr_w
							FROM	agenda_bloqueio
							WHERE	cd_agenda	= cd_agenda_p
							AND 	ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w), HR_INICIO_BLOQUEIO) <=	(hr_atual_w + nr_minuto_Intervalo_w/1440)
							AND	ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w), HR_final_BLOQUEIO) > hr_atual_w
							AND	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(hr_atual_w) BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial) AND ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_final)
							--AND	((ie_dia_semana	= ie_dia_semana_w) OR (ie_dia_semana	= 9) OR (ie_dia_semana IS NULL))
							AND		((ie_dia_semana	= ie_dia_semana_w) OR ((ie_dia_semana	= 9) and ie_dia_semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w)) OR (coalesce(ie_dia_semana::text, '') = ''))
							AND	(HR_INICIO_BLOQUEIO IS NOT NULL AND HR_INICIO_BLOQUEIO::text <> '')
							AND	(HR_FINAL_BLOQUEIO IS NOT NULL AND HR_FINAL_BLOQUEIO::text <> '')
							AND	coalesce(coalesce(ie_classif_bloqueio,cd_classificacao_w),'X')  = coalesce(cd_classificacao_w,'X')
							AND	coalesce(coalesce(cd_medico,cd_medico_w),'X') = coalesce(cd_medico_w,'X')
							AND 	((ie_classif_bloqueio IS NOT NULL AND ie_classif_bloqueio::text <> '') OR (cd_medico IS NOT NULL AND cd_medico::text <> ''));
							EXCEPTION
								WHEN OTHERS THEN
									qt_bloq_classif_dia_hora_w := 0;
							END;
							
							IF	((((qt_bloq_classificacao_w > 0 AND qt_agenda_bloq_classif_w = 0) OR (qt_agenda_bloq_classif_w > 0 AND qt_agenda_bloq_classif_w > qt_agenda_classif_w)) AND
								((qt_bloq_classificacao_dia_w > 0 AND qt_agenda_bloq_classif_dia_w = 0)  OR (qt_agenda_bloq_classif_dia_w > 0 AND qt_agenda_bloq_classif_dia_w > qt_agenda_classif_w)) AND
								((qt_bloq_classif_dia_hora_w > 0 AND qt_agenda_bloq_classif_diahr_w = 0)  OR (qt_agenda_bloq_classif_diahr_w > 0 AND qt_agenda_bloq_classif_diahr_w > qt_agenda_classif_w))) or
								((qt_agenda_bloq_dia_hora_w > 0 AND qt_agenda_bloq_dia_hora_w	>= qt_Total_turno_w) or (qt_bloqueio_dia_hora_w > 0 AND qt_agenda_bloq_dia_hora_w = 0)) or					
								((qt_bloq_classif_dia_hora_w > 0 AND qt_agenda_bloq_classif_diahr_w = 0)  OR (qt_agenda_bloq_classif_diahr_w > 0 AND qt_agenda_bloq_classif_diahr_w >= qt_agenda_classif_hor_w))) or (ie_bloqueio_turno_w = 'S') THEN
								ie_bloqueio_w	:= 'S';
							else
								ie_bloqueio_w	:= 'N';
							END IF;

							cd_classificacao_alter_regr_w := obter_classif_regra_alteracao(5, cd_agenda_p, hr_atual_w, cd_classificacao_w);
							if (ie_bloqueio_w = 'N') then
								nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
														cd_agenda_p,
														cd_classificacao_alter_regr_w,
														null,
														null,
														null,
														nr_seq_proc_interno_w,
														cd_procedimento_w,
														ie_origem_proced_w,
														cd_medico_w, 
														hr_atual_w,
														'S',
														'N');
								if (nr_seq_regra_bloq_w > 0) then
									ie_bloqueio_w := 'S';
									select	max(nr_seq_motivo_bloq_ag)
									into STRICT	nr_seq_motivo_bloq_w
									from	agenda_bloqueio_geral
									where	nr_sequencia = nr_seq_regra_bloq_w;
								end if;	
							end if;
									
							/*insert into tbyegmann (	
													ds_dados)
							values				(
													ie_bloqueio_w||' - '||to_char(hr_atual_w, 'dd/mm/yyyy hh24:mi:ss')||' - '||qt_inicio_w||' - '||qt_classificacao_w);*/
									
							IF	((qt_Total_turno_w <= qt_total_turno_lido_w) OR (qt_total_turno_lido_w = 0)) and
								((qt_bloq_classificacao_w = 0) OR (qt_agenda_bloq_classif_w > 0 AND qt_agenda_bloq_classif_w < qt_agenda_classif_w)) AND
								((qt_bloq_classificacao_dia_w = 0)  OR (qt_agenda_bloq_classif_dia_w > 0 AND qt_agenda_bloq_classif_dia_w < qt_agenda_classif_w)) AND
								((qt_bloq_classif_dia_hora_w = 0)  OR (qt_agenda_bloq_classif_diahr_w > 0 AND qt_agenda_bloq_classif_diahr_w < qt_agenda_classif_w)) AND
								((qt_agenda_bloq_hora_w = 0) OR (qt_agenda_bloq_hora_w < qt_agenda_w)) AND
								((qt_agenda_bloq_w = 0) OR (qt_agenda_bloq_w < qt_agenda_w)) AND
								((qt_agenda_bloq_dia_w = 0) OR (qt_agenda_bloq_dia_w < qt_agenda_w)) AND
								((qt_agenda_bloq_dia_hora_w = 0) OR (qt_agenda_bloq_dia_hora_w < qt_agenda_w)) THEN

								SELECT	coalesce(MAX(nr_seq_hora),0) + 1
								INTO STRICT	nr_seq_hora_w
								FROM	agenda_consulta
								WHERE	cd_agenda	= cd_agenda_p
								AND	dt_agenda	= hr_atual_w;
								
								if (ie_gerar_prof_hor_w = 'S') and (ie_gerar_prof_hor_livre_w = 'S') and (ie_bloqueio_w <> 'S') then
								
									select	max(nr_sequencia)
									into STRICT	nr_seq_prof_w
									from	agenda_turno_prof
									where	nr_seq_turno	= nr_seq_turno_w
									and	nr_seq_ordem 	= nr_seq_ordem_min_w;
									
									select	min(nr_seq_ordem)
									into STRICT	nr_seq_ordem_min_aux_w
									from	agenda_turno_prof
									where	nr_seq_turno	= nr_seq_turno_w
									and	nr_seq_ordem 	> nr_seq_ordem_min_w;
				
									nr_seq_ordem_min_w	:= nr_seq_ordem_min_aux_w;
									
								end if;

								SELECT nextval('agenda_consulta_seq')
								INTO STRICT nr_sequencia_w
								;

								INSERT INTO agenda_Consulta(
											nr_sequencia,
											cd_agenda,
											dt_agenda,
											nr_minuto_duracao,
											ie_status_agenda,
											ie_classif_agenda,
											nr_seq_classif_med,
											dt_atualizacao,
											nm_usuario,
											nm_paciente,
											nr_seq_sala,
											cd_convenio,
											cd_categoria,
											cd_turno,
											nr_seq_hora,
											cd_medico,
											nr_seq_turno,
											cd_medico_solic,
											cd_setor_atendimento,
											ie_bloqueado_manual,
											cd_procedimento,
											nr_seq_proc_interno,
											ie_origem_proced,
											qt_procedimento,
											ie_autorizacao,
											cd_setor_entrega,
											cd_setor_coleta,
											ie_classif_agenda_origem,
											nr_seq_classif,
											nr_seq_exame,
											nr_seq_apres_classif,
											ie_forma_agendamento,
											ie_carater_inter_sus,
											ie_tipo_atendimento,
											nr_seq_transporte,
											ds_observacao,
											cd_procedencia,
											nr_seq_motivo_bloq)
										VALUES (
											nr_sequencia_w,
											cd_agenda_p,
											hr_atual_w,
											nr_minuto_Intervalo_w,
											CASE WHEN ie_bloqueio_w='S' THEN 'B'  ELSE 'L' END ,
											cd_classificacao_alter_regr_w,
											CASE WHEN nr_seq_classif_med_w=0 THEN  NULL  ELSE nr_seq_classif_med_w END ,
											clock_timestamp(),
											nm_usuario_p,
											CASE WHEN ie_gerar_nome_w='S' THEN substr(ds_observacao_w,1,80)  ELSE null END ,
											CASE WHEN nr_seq_sala_w=0 THEN  NULL  ELSE nr_seq_sala_w END ,
											CASE WHEN cd_convenio_padrao_w=0 THEN  NULL  ELSE cd_convenio_padrao_w END ,
											CASE WHEN cd_categoria_padrao_w=0 THEN  NULL  ELSE cd_categoria_padrao_w END ,
											cd_turno_w,
											nr_seq_hora_w,
											CASE WHEN cd_medico_w='0' THEN  NULL  ELSE cd_medico_w END ,
											nr_seq_turno_w,
											CASE WHEN cd_medico_solic_w='0' THEN  NULL  ELSE cd_medico_solic_w END ,
											coalesce(cd_setor_atendimento_w,cd_setor_agenda_w),
											CASE WHEN ie_bloqueio_w='S' THEN 'N'  ELSE NULL END ,
											CASE WHEN cd_procedimento_w=0 THEN  NULL  ELSE cd_procedimento_w END ,
											CASE WHEN nr_seq_proc_interno_w=0 THEN  NULL  ELSE nr_seq_proc_interno_w END ,
											CASE WHEN ie_origem_proced_w=0 THEN  NULL  ELSE ie_origem_proced_w END ,
											CASE WHEN cd_procedimento_w=0 THEN CASE WHEN nr_seq_proc_interno_w=0 THEN NULL  ELSE 1 END   ELSE 1 END ,
											ie_status_autor_w,
											CASE WHEN cd_setor_entrega_w=0 THEN  NULL  ELSE cd_setor_entrega_w END ,
											CASE WHEN cd_setor_coleta_w=0 THEN  NULL  ELSE cd_setor_coleta_w END ,
											cd_classificacao_w,
											nr_seq_classif_w,
											nr_seq_exame_w,
											nr_seq_apres_w,
											ie_forma_agendamento_w,
											ie_carater_inter_sus_w,
											ie_tipo_atendimento_w,
											nr_seq_transporte_w,
											CASE WHEN ie_gerar_nome_w='N' THEN ds_observacao_w  ELSE null END ,
											cd_procedencia_w,
											nr_seq_motivo_bloq_w);
											
								if (nr_seq_prof_w > 0) then
									insert into agenda_consulta_prof(
										nr_sequencia,
										nr_seq_agenda,
										dt_atualizacao,
										nm_usuario,
										dt_atualizacao_nrec,
										nm_usuario_nrec,
										nr_seq_ordem,
										ie_tipo_profissional,
										cd_pessoa_fisica,
										ie_solicita_retorno
									)
									SELECT	nextval('agenda_consulta_prof_seq'),
										nr_sequencia_w,
										clock_timestamp(),
										nm_usuario_p,
										clock_timestamp(),
										nm_usuario_p,
										nr_seq_ordem,
										ie_tipo_profissional,
										cd_pessoa_fisica,
										ie_solicita_retorno
									from	agenda_turno_prof
									where	nr_sequencia	= nr_seq_prof_w;
								end if;

								begin
									select gerenciador_mipres_agenda_pck.get_valid_mipres_agenda(aca.nr_seq_controle_mipres, hr_atual_w)
									  into STRICT nr_seq_controle_mipres_w
									  from agenda_consulta_adic aca
									 where aca.nr_seq_agenda = nr_sequencia_origem_p;
								exception when no_data_found then nr_seq_controle_mipres_w := null;
										  when too_many_rows then nr_seq_controle_mipres_w := null;
										  when data_exception then nr_seq_controle_mipres_w := null;
								end;

								if (coalesce(nr_seq_controle_mipres_w, 0) > 0) then
									insert into agenda_consulta_adic(nr_seq_controle_mipres, nr_seq_agenda, dt_atualizacao, nm_usuario)
									values (nr_seq_controle_mipres_w, nr_sequencia_w, clock_timestamp(), nm_usuario_p);
								end if;

								open cursor_proc;
								loop
								fetch cursor_proc into	cd_procedimento_w,
														ie_origem_proced_w,
														nr_seq_proc_interno_w,
														ie_executar_proc_w,
														nr_seq_controle_mipres_w;
								EXIT WHEN NOT FOUND; /* apply on cursor_proc */
									begin
										nr_sequencia_mipres_w := gerenciador_mipres_agenda_pck.get_valid_mipres_agenda(nr_seq_controle_mipres_w, hr_atual_w);

										if (coalesce(nr_sequencia_mipres_w, 0) > 0) then
											select	nextval('agenda_consulta_proc_seq')
											into STRICT	nr_sequencia_proc_w
											;

											insert into agenda_consulta_proc(
																nr_sequencia,
																nr_seq_agenda,
																cd_procedimento,
																ie_origem_proced,
																nr_seq_proc_interno,
																dt_atualizacao,
																nm_usuario,
																ie_executar_proc,
																nr_seq_controle_mipres
																)
															values (
																nr_sequencia_proc_w,
																nr_sequencia_w,
																cd_procedimento_w,
																ie_origem_proced_w,
																nr_seq_proc_interno_w,
																clock_timestamp(),
																nm_usuario_p,
																ie_executar_proc_w,
																nr_sequencia_mipres_w
																);
										end if;
									end;
								end loop;
								close cursor_proc;

							ELSIF (ie_gerar_hor_bloq_w = 'S') THEN

								SELECT	coalesce(MAX(nr_seq_hora),0) + 1
								INTO STRICT	nr_seq_hora_w
								FROM	agenda_consulta
								WHERE	cd_agenda	= cd_agenda_p
								AND	dt_agenda	= hr_atual_w;

								SELECT nextval('agenda_consulta_seq')
								INTO STRICT nr_sequencia_w
								;

								INSERT INTO agenda_Consulta(
											nr_sequencia,
											cd_agenda,
											dt_agenda,
											nr_minuto_duracao,
											ie_status_agenda,
											ie_classif_agenda,
											nr_seq_classif_med,
											dt_atualizacao,
											nm_usuario,
											nm_paciente,
											nr_seq_sala,
											cd_convenio,
											cd_categoria,
											cd_turno,
											nr_seq_hora,
											cd_medico,
											nr_seq_turno,
											cd_medico_solic,
											cd_setor_atendimento,
											ie_bloqueado_manual,
											cd_procedimento,
											nr_seq_proc_interno,
											ie_origem_proced,
											qt_procedimento,
											ie_autorizacao,
											cd_setor_entrega,
											cd_setor_coleta,
											ie_classif_agenda_origem,
											nr_seq_classif,
											nr_seq_exame,
											nr_seq_apres_classif,
											ie_forma_agendamento,
											ie_carater_inter_sus,
											ie_tipo_atendimento,
											nr_seq_transporte,
											ds_observacao,
											cd_procedencia)
										VALUES (
											nr_sequencia_w,
											cd_agenda_p,
											hr_atual_w,
											nr_minuto_Intervalo_w,
											'B',
											cd_classificacao_alter_regr_w,
											CASE WHEN nr_seq_classif_med_w=0 THEN  NULL  ELSE nr_seq_classif_med_w END ,
											clock_timestamp(),
											nm_usuario_p,
											CASE WHEN ie_gerar_nome_w='S' THEN substr(ds_observacao_w,1,80)  ELSE null END ,
											CASE WHEN nr_seq_sala_w=0 THEN  NULL  ELSE nr_seq_sala_w END ,
											CASE WHEN cd_convenio_padrao_w=0 THEN  NULL  ELSE cd_convenio_padrao_w END ,
											CASE WHEN cd_categoria_padrao_w=0 THEN  NULL  ELSE cd_categoria_padrao_w END ,
											cd_turno_w,
											nr_seq_hora_w,
											CASE WHEN cd_medico_w='0' THEN  NULL  ELSE cd_medico_w END ,
											nr_seq_turno_w,
											CASE WHEN cd_medico_solic_w='0' THEN  NULL  ELSE cd_medico_solic_w END ,
											coalesce(cd_setor_atendimento_w,cd_setor_agenda_w),
											'N',
											CASE WHEN cd_procedimento_w=0 THEN  NULL  ELSE cd_procedimento_w END ,
											CASE WHEN nr_seq_proc_interno_w=0 THEN  NULL  ELSE nr_seq_proc_interno_w END ,
											CASE WHEN ie_origem_proced_w=0 THEN  NULL  ELSE ie_origem_proced_w END ,
											CASE WHEN cd_procedimento_w=0 THEN CASE WHEN nr_seq_proc_interno_w=0 THEN NULL  ELSE 1 END   ELSE 1 END ,
											ie_status_autor_w,
											CASE WHEN cd_setor_entrega_w=0 THEN  NULL  ELSE cd_setor_entrega_w END ,
											CASE WHEN cd_setor_coleta_w=0 THEN  NULL  ELSE cd_setor_coleta_w END ,
											cd_classificacao_w,
											nr_seq_classif_w,
											nr_seq_exame_w,
											nr_seq_apres_w,
											ie_forma_agendamento_w,
											ie_carater_inter_sus_w,
											ie_tipo_atendimento_w,
											nr_seq_transporte_w,
											CASE WHEN ie_gerar_nome_w='N' THEN ds_observacao_w  ELSE null END ,
											cd_procedencia_w);
							END IF;
							END;
						ELSE
							nr_delete_turno_w := nr_seq_turno_w;
						END IF;
						END;
					END LOOP;

					END;
					cd_classificacao_old_w	:= cd_classificacao_w;
				END LOOP;
				CLOSE	c02;

				END;
			END IF;

			END IF;
			
			END;
		END LOOP;
		CLOSE C01;
	end if;
end if;

commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_horario_agenda_servico (cd_estabelecimento_p bigint, cd_agenda_p agenda.cd_agenda%type, dt_agenda_p agenda_consulta.dt_agenda%type, nm_usuario_p agenda_consulta.nm_usuario%type, nr_sequencia_origem_p agenda_consulta.nr_sequencia%type DEFAULT NULL) FROM PUBLIC;

