-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_se_classif_disp_cir ( nr_seq_agenda_p bigint, nr_seq_classif_equip_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_agenda_ant_p bigint, ie_novo_registro_p text) AS $body$
DECLARE


nr_seq_agenda_w				agenda_paciente.nr_sequencia%type;
qt_equipamento_w			bigint;
qt_equip_agenda_w			bigint;
qt_tempo_esterilizacao_w	bigint	:= 0;
qt_equip_man_w				bigint;
qt_tot_equip_w				bigint;
qt_novo_registro_w			integer;
nr_minuto_duracao_w			bigint;
qt_equip_agenda_exec_w		bigint;
qt_tempo_esterelizacao_w	bigint;
ds_classif_equi_w			varchar(80);
ds_agenda_w					varchar(50);
nm_paciente_w				varchar(60);
nm_medico_w					varchar(50);
ie_consiste_w				varchar(15);
ds_mensagem_w				varchar(255);
ds_erro_w					varchar(255);
dt_inicial_w				timestamp;
dt_final_w					timestamp;
dt_agenda_w					timestamp;


BEGIN

ie_consiste_w := Obter_Param_Usuario(871, 81, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_w);
qt_novo_registro_w	:= 0;

if (ie_novo_registro_p = 'S') then
	qt_novo_registro_w := 1;
end if;

select	coalesce(max(qt_tempo_esterelizacao),0)
into STRICT	qt_tempo_esterilizacao_w
from	classif_equipamento
where	nr_sequencia = nr_seq_classif_equip_p;

select	hr_inicio,
	CASE WHEN ie_status_agenda='E' THEN  (hr_inicio + (qt_tempo_esterilizacao_w / 1440) - (1/86400))  ELSE (hr_inicio + ((nr_minuto_duracao + coalesce(qt_tempo_esterilizacao_w,0)) / 1440) - (1/86400)) END
into STRICT	dt_inicial_w,
	dt_final_w
from	agenda_paciente
where	nr_sequencia	= nr_seq_agenda_p;

qt_equip_man_w	:= obter_qt_equip_manutencao(nr_seq_classif_equip_p, null,dt_inicial_w);

if (qt_equip_man_w > 0) then
	ds_mensagem_w	:= wheb_mensagem_pck.get_texto(300690, 'DS_DANO=' || obter_ds_equip_manutencao(nr_seq_classif_equip_p, null,'D',dt_inicial_w) ||
							';DT_INICIO=' || obter_ds_equip_manutencao(nr_seq_classif_equip_p, null,'DI',dt_inicial_w) ||
							';DT_CONCLUSAO=' || obter_ds_equip_manutencao(nr_seq_classif_equip_p, null,'DF',dt_inicial_w));
end if;
				
select	coalesce(sum(qt_equipamento) - qt_equip_man_w, 0),
	count(*)
into STRICT	qt_equipamento_w,
	qt_tot_equip_w
from	equipamento
where	cd_classificacao	= nr_seq_classif_equip_p
and	ie_situacao		= 'A';

/* Obter qtde de agendamentos que foram executadas no periodo - neste so eh contado o tempo de esterilizacao e nao considera mais o tempo de duracao pois o mesmo ja foi realizado */

select	/*+ INDEX(A AGEPACI_UK) */	count(*)
into STRICT	qt_equip_agenda_exec_w
from	agenda c,
	agenda_pac_equip a,
	agenda_paciente b
where	b.nr_sequencia	= a.nr_seq_agenda	
and	((hr_inicio between dt_inicial_w and dt_final_w) or
	(hr_inicio + (qt_tempo_esterilizacao_w / 1440) - (1/86400) between dt_inicial_w and dt_final_w) or
	((hr_inicio < dt_inicial_w) and (hr_inicio + (qt_tempo_esterilizacao_w / 1440) - (1/86400) > dt_final_w)))
and 	b.cd_agenda = c.cd_agenda 
and 	c.cd_tipo_agenda = 1
and	a.nr_seq_classif_equip  = nr_seq_classif_equip_p
and	b.nr_sequencia <> coalesce(nr_seq_agenda_ant_p,0)
and	ie_status_agenda = 'E'
and	ie_origem_inf = 'I'
and	b.nr_sequencia <> nr_seq_agenda_p;

/* Obter qtde de agendamentos que nao foram executados e/ou cancelados no periodo */

select	/*+ INDEX(A AGEPACI_UK) */	count(*)
into STRICT	qt_equip_agenda_w
from	agenda c,
	agenda_pac_equip a,
	agenda_paciente b
where	b.nr_sequencia	= a.nr_seq_agenda	
and	((hr_inicio between dt_inicial_w and dt_final_w) or
	(hr_inicio + ((nr_minuto_duracao + coalesce(qt_tempo_esterilizacao_w,0)) / 1440) - (1/86400) between dt_inicial_w and dt_final_w) or
	((hr_inicio < dt_inicial_w) and (hr_inicio + ((nr_minuto_duracao + coalesce(qt_tempo_esterilizacao_w,0)) / 1440) - (1/86400) > dt_final_w)))
and	a.nr_seq_classif_equip  = nr_seq_classif_equip_p
and	ie_status_agenda not in ('C','E')
and 	b.cd_agenda = c.cd_agenda 
and 	c.cd_tipo_agenda = 1
and	b.nr_sequencia <> coalesce(nr_seq_agenda_ant_p,0)
and	ie_origem_inf = 'I'
and	b.nr_sequencia <> nr_seq_agenda_p;

qt_equip_agenda_w	:= qt_equip_agenda_exec_w + qt_equip_agenda_w + qt_novo_registro_w;

if (qt_equipamento_w < qt_equip_agenda_w) then
	select	/*+ INDEX(A AGEPACI_UK) */		max(nr_seq_agenda)
	into STRICT	nr_seq_agenda_w
	from	(SELECT	coalesce(max(b.nr_sequencia),0) nr_seq_agenda
		from	agenda_pac_equip a,
			agenda_paciente b
		where	b.nr_sequencia	= a.nr_seq_agenda	
		and	((hr_inicio between dt_inicial_w and dt_final_w) or
			(hr_inicio + (qt_tempo_esterilizacao_w / 1440) - (1/86400) between dt_inicial_w and dt_final_w) or
			((hr_inicio < dt_inicial_w) and (hr_inicio + (qt_tempo_esterilizacao_w / 1440) - (1/86400) > dt_final_w)))
		and	a.nr_seq_classif_equip  = nr_seq_classif_equip_p
		and	ie_status_agenda = 'E'
		and	b.nr_sequencia <> coalesce(nr_seq_agenda_ant_p,0)
		and	ie_origem_inf = 'I'		
		and	b.nr_sequencia <> nr_seq_agenda_p
		
union
		
		SELECT	coalesce(max(b.nr_sequencia),0)
		from	agenda_pac_equip a,
			agenda_paciente b
		where	b.nr_sequencia	= a.nr_seq_agenda	
		and	((hr_inicio between dt_inicial_w and dt_final_w) or  
			(hr_inicio + ((nr_minuto_duracao + coalesce(qt_tempo_esterilizacao_w,0)) / 1440) - (1/86400) between dt_inicial_w and dt_final_w) or
			((hr_inicio < dt_inicial_w) and (hr_inicio + ((nr_minuto_duracao + coalesce(qt_tempo_esterilizacao_w,0)) / 1440) - (1/86400) > dt_final_w)))
		and	a.nr_seq_classif_equip  = nr_seq_classif_equip_p
		and	b.nr_sequencia <> coalesce(nr_seq_agenda_ant_p,0)
		and	ie_status_agenda not in ('C','E')
		and	ie_origem_inf = 'I'
		and	b.nr_sequencia <> nr_seq_agenda_p) alias33;	
	
	if (nr_seq_agenda_w > 0) then
		select	max(qt_tempo_esterelizacao)
		into STRICT	qt_tempo_esterelizacao_w
		from	classif_equipamento
		where	nr_sequencia	=	nr_seq_classif_equip_p;
	
		select	substr(obter_desc_classif_equip(nr_seq_classif_equip_p),1,60),
			hr_inicio,
			substr(obter_nome_agenda(cd_agenda),1,50),
			nm_paciente,
			substr(obter_nome_pf(cd_medico),1,50),
			nr_minuto_duracao
		into STRICT	ds_classif_equi_w,
			dt_agenda_w,
			ds_agenda_w,
			nm_paciente_w,
			nm_medico_w,
			nr_minuto_duracao_w
		from	agenda_paciente
		where	nr_sequencia	= nr_seq_agenda_w;		
		
		if (qt_equip_man_w >= qt_tot_equip_w) then
			ds_erro_w	:= wheb_mensagem_pck.get_texto(300694, 'DS_MENSAGEM_W=' || ds_mensagem_w);

			insert into	consistencia_agenda_cir(
									nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									nr_seq_agenda,
									ie_tipo_consistencia,
									ds_consistencia,
									nr_seq_classif_equip,
									nm_paciente)
							values (	nextval('consistencia_agenda_cir_seq'),
									clock_timestamp(),
									nm_usuario_p,
									nr_seq_agenda_p,
									'E',
									ds_erro_w,
									nr_seq_classif_equip_p,
									nm_paciente_w);
			commit;
		else
			ds_erro_w	:= wheb_mensagem_pck.get_texto(300700, 'DT_AGENDA_W=' || to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi') || ' ' || ds_agenda_w ||
								';NM_MEDICO_W=' || nm_medico_w || ';QT_TEMPO=' || to_char(qt_tempo_esterelizacao_w + nr_minuto_duracao_w));

			insert into	consistencia_agenda_cir(
									nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									nr_seq_agenda,
									ie_tipo_consistencia,
									ds_consistencia,
									nr_seq_classif_equip,
									nm_paciente)
							values (	nextval('consistencia_agenda_cir_seq'),
									clock_timestamp(),
									nm_usuario_p,
									nr_seq_agenda_p,
									'E',
									ds_erro_w,
									nr_seq_classif_equip_p,
									nm_paciente_w);
			commit;			
		end if;
				
		if (ie_consiste_w <> 'N') then
			insert into agenda_pac_hist(
				nr_sequencia,
				nr_seq_agenda,          
				ds_historico,           
				dt_atualizacao,         
				nm_usuario,             
				dt_historico,           
				cd_pessoa_fisica,       
				dt_atualizacao_nrec,    
				nm_usuario_nrec)
			values (
				nextval('agenda_pac_hist_seq'),
				nr_seq_agenda_p,
				wheb_mensagem_pck.get_texto(300705, 'DS_ERRO_W=' || ds_erro_w),
				clock_timestamp(),
				'Tasy',
				clock_timestamp(),
				Obter_Dados_Usuario_Opcao(nm_usuario_p,'C'),
				clock_timestamp(),
				'Tasy');
			commit;
		end if;
	elsif (qt_equip_man_w >= qt_tot_equip_w) and (ie_novo_registro_p = 'S') then

		ds_erro_w	:= wheb_mensagem_pck.get_texto(300694, 'DS_MENSAGEM_W=' || ds_mensagem_w);

		insert into	consistencia_agenda_cir(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								nr_seq_agenda,
								ie_tipo_consistencia,
								ds_consistencia,
								nr_seq_classif_equip)
						values (	nextval('consistencia_agenda_cir_seq'),
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_agenda_p,
								'E',
								ds_erro_w,
								nr_seq_classif_equip_p);
		commit;
				
		if (ie_consiste_w <> 'N') then
			insert into agenda_pac_hist(
				nr_sequencia,
				nr_seq_agenda,          
				ds_historico,           
				dt_atualizacao,         
				nm_usuario,             
				dt_historico,           
				cd_pessoa_fisica,       
				dt_atualizacao_nrec,    
				nm_usuario_nrec)
			values (
				nextval('agenda_pac_hist_seq'),
				nr_seq_agenda_p,
				wheb_mensagem_pck.get_texto(300705, 'DS_ERRO_W=' || ds_erro_w),
				clock_timestamp(),
				'Tasy',
				clock_timestamp(),
				Obter_Dados_Usuario_Opcao(nm_usuario_p,'C'),
				clock_timestamp(),
				'Tasy');
			commit;
		end if;
		
	elsif (qt_equipamento_w = 0) then
	
		ds_erro_w	:= wheb_mensagem_pck.get_texto(300708);

		insert into	consistencia_agenda_cir(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								nr_seq_agenda,
								ie_tipo_consistencia,
								ds_consistencia,
								nr_seq_classif_equip)
						values (	nextval('consistencia_agenda_cir_seq'),
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_agenda_p,
								'E',
								ds_erro_w,
								nr_seq_classif_equip_p);
		commit;
				
		if (ie_consiste_w <> 'N') then
			insert into agenda_pac_hist(
				nr_sequencia,
				nr_seq_agenda,          
				ds_historico,           
				dt_atualizacao,         
				nm_usuario,             
				dt_historico,           
				cd_pessoa_fisica,       
				dt_atualizacao_nrec,    
				nm_usuario_nrec)
			values (
				nextval('agenda_pac_hist_seq'),
				nr_seq_agenda_p,
				wheb_mensagem_pck.get_texto(300705, 'DS_ERRO_W=' || ds_erro_w),
				clock_timestamp(),
				'Tasy',
				clock_timestamp(),
				Obter_Dados_Usuario_Opcao(nm_usuario_p,'C'),
				clock_timestamp(),
				'Tasy');
			commit;
		end if;
	
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_se_classif_disp_cir ( nr_seq_agenda_p bigint, nr_seq_classif_equip_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_agenda_ant_p bigint, ie_novo_registro_p text) FROM PUBLIC;

