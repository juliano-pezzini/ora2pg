-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_dieta_prescr ( nr_prescricao_p bigint, ds_lista_dieta_p text, cd_intervalo_p text, qt_parametro_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint, ds_observacao_p text, ie_via_adm_p text, hr_prim_horario_p text) AS $body$
DECLARE

								
								

dt_prescricao_w			timestamp;
dt_inicio_prescr_w		timestamp;
dt_validade_prescr_w	timestamp;
dt_prim_hor_dieta_w		timestamp;
qt_min_intervalo_w 		intervalo_prescricao.qt_min_intervalo%type;

nr_atendimento_w		atendimento_paciente.nr_atendimento%type;

cd_dieta_w				prescr_dieta.cd_dieta%type;
nr_seq_dieta_w			prescr_dieta.nr_sequencia%type;
hr_prim_horario_w		prescr_dieta.hr_prim_horario%type;
nr_dia_util_w			prescr_dieta.nr_dia_util%type;
ie_dose_espec_agora_w	prescr_dieta.ie_dose_espec_agora%type := 'N';
hr_dose_especial_w		prescr_dieta.hr_dose_especial%type;

nr_horas_validade_w		prescr_medica.nr_horas_validade%type;

ds_horarios_w			prescr_dieta.ds_horarios%type;
ds_horarios_ww			ds_horarios_w%type;

cont_w					bigint;
nr_intervalo_w			bigint;
ds_erro_w				varchar(2000);
ds_tempo_w				varchar(50);
cd_funcao_w				integer;

-- Parametros da REP
vl_param_298_w			bigint;
vl_param_1012_w			varchar(1);
ie_permite_dieta_w		varchar(1);
cd_setor_atendimento_w	prescr_medica.cd_setor_atendimento%type;
ie_limpar_prim_hor_w	varchar(1);
cd_intervalo_w			dieta.cd_intervalo%type;


BEGIN
cd_dieta_w 			:= ds_lista_dieta_p;
hr_prim_horario_w 	:= hr_prim_horario_p;
cd_intervalo_w		:= cd_intervalo_p;
	
if (cd_dieta_w IS NOT NULL AND cd_dieta_w::text <> '') then

	select	max(dt_prescricao),
			max(nr_atendimento),
			coalesce(max(cd_funcao_origem),obter_funcao_ativa),
			max(dt_inicio_prescr),
			max(dt_validade_prescr),
			max(nr_horas_validade),
			max(cd_setor_atendimento)	
	into STRICT	dt_prescricao_w,
			nr_atendimento_w,
			cd_funcao_w,
			dt_inicio_prescr_w,
			dt_validade_prescr_w,
			nr_horas_validade_w,
			cd_setor_atendimento_w
	from	prescr_medica
	where	nr_prescricao	= nr_prescricao_p;	

	select 	max(Obter_Se_dieta_valida(cd_dieta_w, cd_estabelecimento_p, dt_prescricao_w))
	into STRICT	ie_permite_dieta_w
	;

	if (ie_permite_dieta_w = 'N') then
		rollback;
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(nr_seq_mensagem_p => 178090, vl_macros_p => 'NM_DIETA=' || substr(obter_nome_dieta(cd_dieta_w),1,80));
	end if;	
	
	if (obter_valor_param_usuario(924,708,cd_perfil_p,nm_usuario_p,cd_estabelecimento_p) = 'S') and (Obter_se_prescr_pac_jejum(nr_prescricao_p) = 'S') then
		-- O paciente esta em jejum Nao e permitido prescrever dietas para o mesmo. Parametro 708.
		CALL Wheb_mensagem_pck.Exibir_mensagem_abort(178043);
	end if;
	
	vl_param_298_w	:= Campo_numerico(obter_valor_param_usuario(924,298,cd_perfil_p,nm_usuario_p,cd_estabelecimento_p));
	
	if (vl_param_298_w > 0) then
		
		vl_param_1012_w := Obter_Param_Usuario(924, 1012, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, vl_param_1012_w);
		
		select	count(*)
		into STRICT	cont_w
		from	prescr_dieta a,
			prescr_medica b
		where	obter_se_prescr_vig_adep(b.dt_inicio_prescr, b.dt_validade_prescr, dt_inicio_prescr_w, dt_validade_prescr_w) = 'S'
		and	a.nr_prescricao		= b.nr_prescricao
		and	coalesce(b.dt_suspensao::text, '') = ''
		and	coalesce(a.dt_suspensao::text, '') = ''
		and	(((obter_datas_prescricao(b.nr_prescricao,'L') IS NOT NULL AND (obter_datas_prescricao(b.nr_prescricao,'L'))::text <> '')) or (b.nr_prescricao	= nr_prescricao_p))
		and	b.nr_atendimento	= nr_atendimento_w
		and	((vl_param_1012_w = 'N') or
			 (vl_param_1012_w = 'S' AND b.nr_prescricao	= nr_prescricao_p));	
		
		if	((cont_w	= vl_param_298_w) or
			 ((cont_w + 1)	> vl_param_298_w)) then
			if (cd_funcao_w	= 950) then
				ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307506)); -- plano
			elsif (vl_param_1012_w	= 'N') then
				ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307505)); -- periodo de prescricoes
			else
				ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307503)); -- prescricao
			end if;	
			-- O numero maximo de dietas por DS_TEMPO e QT_DIETAS
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(nr_seq_mensagem_p => 178044, vl_macros_p => 'DS_TEMPO='|| ds_tempo_w ||';QT_DIETAS=' || vl_param_298_w);			
		end if;		
	end if;
			
	select	coalesce(max(nr_sequencia),0) + 1
	into STRICT	nr_seq_dieta_w
	from	prescr_dieta
	where	nr_prescricao	= nr_prescricao_p;

	select  coalesce(max(a.nr_dia_util),0) + 1
	into STRICT	nr_dia_util_w
	from    prescr_dieta a,
			prescr_medica b
	where   a.nr_prescricao          = b.nr_prescricao
	and     trunc(b.dt_prescricao)   = trunc(dt_prescricao_w - 1)
	and     b.nr_atendimento	 = nr_atendimento_w
	and     a.cd_dieta		 = cd_dieta_w
	and     b.nr_prescricao          <> nr_prescricao_p
	and     coalesce(b.dt_suspensao::text, '') = ''
	and     coalesce(a.dt_suspensao::text, '') = '';
	
	if (coalesce(cd_intervalo_w::text, '') = '') then
		select	max(cd_intervalo)
		into STRICT 	cd_intervalo_w
		from	dieta
		where	cd_dieta = cd_dieta_w;
	end if;
	
	ie_limpar_prim_hor_w	:= obter_se_limpa_prim_hor(cd_intervalo_w, cd_setor_atendimento_w);	
	
	if (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') then
			
		select	max(a.qt_min_intervalo)
		into STRICT	qt_min_intervalo_w
		from	intervalo_prescricao a
		where	coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
		and		a.cd_intervalo = cd_intervalo_w;
		
		hr_prim_horario_w := coalesce(hr_prim_horario_p,  substr(obter_primeiro_horario(cd_intervalo_w,nr_prescricao_p,null,null),1,5));
				
		if (ie_limpar_prim_hor_w = 'S') then
			hr_prim_horario_w	:= '';
			ds_horarios_w		:= '';
		end if;
		
		dt_prim_hor_dieta_w	:= dt_inicio_prescr_w;
		if (hr_prim_horario_w IS NOT NULL AND hr_prim_horario_w::text <> '') then
			dt_prim_hor_dieta_w	:= to_date(to_char(dt_inicio_prescr_w,'dd/mm/yyyy ') || hr_prim_horario_w, 'dd/mm/yyyy hh24:mi');
		end if;
					
		nr_intervalo_w := 0;
		SELECT * FROM Calcular_Horario_Prescricao(	nr_prescricao_p, cd_intervalo_w, dt_inicio_prescr_w, dt_prim_hor_dieta_w, nr_horas_validade_w, null, null, qt_min_intervalo_w, nr_intervalo_w, ds_horarios_w, ds_horarios_ww, 'N', null) INTO STRICT nr_intervalo_w, ds_horarios_w, ds_horarios_ww;
										
						
		if (hr_prim_horario_w IS NOT NULL AND hr_prim_horario_w::text <> '') then				
			ds_horarios_w := substr(ds_horarios_w||ds_horarios_ww,1,2000);
		else	
			ds_horarios_w := '';
		end if;
	end if;
			
	if (coalesce(cd_intervalo_w::text, '') = '') and (hr_prim_horario_w IS NOT NULL AND hr_prim_horario_w::text <> '') then
		ds_horarios_w := hr_prim_horario_w;
	end if;
				
	ie_dose_espec_agora_w := obter_se_marca_hor_esp(nr_atendimento_w,nr_prescricao_p,obter_valor_param_usuario(950,155,cd_perfil_p,nm_usuario_p,cd_estabelecimento_p));
	
	if (ie_dose_espec_agora_w = 'S') then	
		select	to_char(coalesce(max(a.dt_fim + 1/1440),clock_timestamp()),'hh24:mi')
		into STRICT	hr_dose_especial_w
		from	rep_jejum a,
				prescr_medica b
		where	a.nr_prescricao = b.nr_prescricao 
		and		coalesce(b.dt_suspensao::text, '') = '' 
		and		coalesce(a.ie_suspenso,'N') <> 'S'
		and		dt_fim > clock_timestamp()       
		and		b.nr_atendimento	= nr_atendimento_w;
	end if;
	
	begin
		insert into prescr_dieta(
			nr_prescricao,
			nr_sequencia,
			cd_dieta,
			cd_intervalo,
			qt_parametro,
			dt_atualizacao,
			nm_usuario,
			ie_suspenso,
			nr_dia_util,
			ds_horarios,
			ie_dose_espec_agora,
			hr_dose_especial,
			ds_observacao,
			ie_via_aplicacao,
			hr_prim_horario)
		values (	nr_prescricao_p,
			nr_seq_dieta_w,
			cd_dieta_w,
			cd_intervalo_w,
			qt_parametro_p,
			clock_timestamp(),
			nm_usuario_p,
			'N',
			nr_dia_util_w,
			ds_horarios_w,
			ie_dose_espec_agora_w,
			hr_dose_especial_w,
			substr(ds_observacao_p,1,255),
			ie_via_adm_p,
			hr_prim_horario_w);
		
		ds_erro_w := Consistir_prescr_dieta(nr_prescricao_p, nr_seq_dieta_w, cd_estabelecimento_p, cd_perfil_p, nm_usuario_p, ds_erro_w);
		CALL gerar_suplementos_dieta(nr_prescricao_p,nr_seq_dieta_w,nm_usuario_p,cd_perfil_p);

		if (obter_valor_param_usuario(924, 530, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p) = 'S') then
			CALL Gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,nr_seq_dieta_w,cd_perfil_p,'N','','N',nm_usuario_p);
		end if;	
		
	exception
	when others then
		null;
	end;
	
end if;
if (wheb_usuario_pck.get_ie_commit = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_dieta_prescr ( nr_prescricao_p bigint, ds_lista_dieta_p text, cd_intervalo_p text, qt_parametro_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint, ds_observacao_p text, ie_via_adm_p text, hr_prim_horario_p text) FROM PUBLIC;

