-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_parcelas_bndes_fin (nr_seq_contrato_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_contrato_w                   contrato.dt_inicio%type;

ds_formula_w                    contrato_bndes.ds_formula%type;
dt_credito_w                    contrato_bndes.dt_credito%type;
nr_dia_taxa_w                   contrato_bndes.nr_dia_taxa%type;
nr_dia_vencimento_w             contrato_bndes.nr_dia_vencimento%type;
nr_seq_ind_reaj_w               contrato_bndes.nr_seq_ind_reaj%type;
nr_total_meses_w                contrato_bndes.qt_prazo%type;
qt_carencia_w                   contrato_bndes.qt_carencia%type;
qt_parcelas_w                   contrato_bndes.qt_parcelas%type;
qt_periodicidade_amortizacao_w  contrato_bndes.qt_periodicidade_amort%type;
qt_periodicidade_juros_w        contrato_bndes.qt_periodicidade_juros%type;
tx_ajuste_w                     contrato_bndes.tx_ajuste%type;
vl_ajustado_w                   contrato_bndes.vl_ajustado%type;
vl_calculado_w                  contrato_bndes.vl_calculado%type;
vl_principal_w                  contrato_bndes.vl_principal%type;
vl_total_contrato_w	            contrato_bndes.vl_principal%type;

dt_final_w                      emprest_financ_parc.dt_final%type;
dt_inicial_w                    emprest_financ_parc.dt_inicial%type;
dt_vencimento_w                 emprest_financ_parc.dt_vencimento%type;
qt_dup_w                        emprest_financ_parc.qt_dup%type;
qt_dut_w                        emprest_financ_parc.qt_dut%type;
vl_amortizacao_w                emprest_financ_parc.vl_amortizacao%type;
vl_correcao_w                   emprest_financ_parc.vl_correcao%type;
vl_indice_reaj_w                emprest_financ_parc.vl_indice_reaj%type;
vl_juros_index_w                emprest_financ_parc.vl_juros_index%type;
vl_juros_w                      emprest_financ_parc.vl_juros%type;
vl_parcela_w                    emprest_financ_parc.vl_parcela%type;
vl_saldo_dev_index_w            emprest_financ_parc.vl_saldo_dev_index%type;
vl_saldo_dev_w                  emprest_financ_parc.vl_saldo_dev%type;

ie_dias_considerados_w          indice_reajuste_anual_fin.ie_dias_considerados%type;

controla_parcela_w              bigint := 0;
nr_mes_w                        bigint;
nr_parcela_w                    bigint := 0;
qt_parc_exist_w                 bigint;
qt_parc_titulo_w                bigint;

BEGIN

  begin

  select	b.qt_prazo,
    b.vl_principal,
    a.dt_inicio,
    b.qt_carencia,
    b.qt_periodicidade_amort,
    b.qt_periodicidade_juros,
    b.nr_dia_vencimento,
    b.dt_credito,
    b.nr_seq_ind_reaj,
    b.vl_calculado,
    b.vl_ajustado,
    b.vl_principal,
    b.ds_formula,
    b.nr_dia_taxa,
    b.tx_ajuste,
    b.qt_parcelas,
    d.ie_dias_considerados
  into STRICT	nr_total_meses_w,
    vl_total_contrato_w,
    dt_contrato_w,
    qt_carencia_w,
    qt_periodicidade_amortizacao_w,
    qt_periodicidade_juros_w,
    nr_dia_vencimento_w,
    dt_credito_w,
    nr_seq_ind_reaj_w,
    vl_calculado_w,
    vl_ajustado_w,
    vl_principal_w,
    ds_formula_w,
    nr_dia_taxa_w,
    tx_ajuste_w,
    qt_parcelas_w,
    ie_dias_considerados_w
  from	contrato a,
      contrato_bndes b,
      tipo_contrato c,
      indice_reajuste_anual_fin d
  where	a.nr_sequencia = b.nr_seq_contrato
  and	a.nr_seq_tipo_contrato = c.nr_sequencia
  and	a.nr_sequencia = nr_seq_contrato_p
  and d.nr_seq_contrato_bndes = b.nr_sequencia
  and	coalesce(c.ie_emprest_financ,'N') = 'S';

  exception 
    when no_data_found then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(1071784); -- nao existem regras para o contrato. cadastre as regras para gerar as parcelas.
    when too_many_rows then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(366139); -- regras do contrato duplicadas. verifique o cadastro para gerar as parcelas.
  end;

  -- verifica se existem parcelas geradas para o contrato
  select	count(*)
  into STRICT	qt_parc_exist_w
  from	emprest_financ_parc
  where	nr_seq_contrato = nr_seq_contrato_p;

  if (coalesce(qt_parc_exist_w,0) > 0) then
    -- verifica se as parcelas possuem titulo gerado
    select	count(*)
    into STRICT	qt_parc_titulo_w
    from	emprest_financ_parc
    where	nr_seq_contrato = nr_seq_contrato_p
    and	(nr_titulo IS NOT NULL AND nr_titulo::text <> '');

    if (coalesce(qt_parc_titulo_w,0) > 0) then
      CALL wheb_mensagem_pck.exibir_mensagem_abort(366140); -- ja existem parcelas geradas com titulo vinculado. nao e possivel gerar as parcelas.
    else
      delete	from emprest_financ_parc
      where	nr_seq_contrato = nr_seq_contrato_p;
      commit;
    end if;
  end if;

  if (coalesce(nr_total_meses_w,0) <= 0) then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(366146); -- informe a quantidade de parcelas nas regras do contrato.
  end if;

  if (coalesce(vl_total_contrato_w,0) <= 0) then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(366147); -- informe o valor total do contrato nas regras do contrato.
  end if;

  if (coalesce(dt_contrato_w::text, '') = '') then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(366152); -- data de inicio do contrato nao informada.
  end if;

  if (coalesce(nr_total_meses_w,0) > 0) then
    begin
      for i in 1..nr_total_meses_w loop
        begin
          nr_mes_w := i;

          --DATA INICIAL
          if (nr_mes_w = 1) then
            dt_inicial_w := OBTER_PROXIMO_DIA_UTIL(cd_estabelecimento_p, dt_contrato_w);
          else
            dt_inicial_w := OBTER_PROXIMO_DIA_UTIL(cd_estabelecimento_p,(pkg_date_utils.get_date(extract(year from to_date(dt_vencimento_w)), extract(month from to_date(dt_vencimento_w)), (nr_dia_taxa_w)::numeric )));
          end if;

          --DATA DO VENCIMENTO
          dt_vencimento_w := pkg_date_utils.get_date(extract(year from to_date(dt_credito_w)), 1, nr_dia_vencimento_w);
          dt_vencimento_w := add_months(dt_vencimento_w, (extract(month from dt_credito_w)- 1 + i));
          dt_vencimento_w := obter_proximo_dia_util(cd_estabelecimento_p, dt_vencimento_w);

          --DATA FINAL
          dt_final_w := OBTER_PROXIMO_DIA_UTIL(cd_estabelecimento_p,(pkg_date_utils.get_date(to_char(nr_dia_taxa_w), dt_vencimento_w)));

          --VALOR DO INDICE DE REAJUSTE
          vl_indice_reaj_w := coalesce(obter_taxa_ajuste(nr_seq_ind_reaj_w, dt_vencimento_w),0);

          --GERA QT_DUP E QT_DUT
          if (ie_dias_considerados_w = 1) then
            qt_dup_w := obter_dias_uteis_periodo(dt_inicial_w, dt_final_w, cd_estabelecimento_p);
            qt_dut_w := obter_dias_uteis_periodo(dt_inicial_w, dt_final_w, cd_estabelecimento_p);
          else
			qt_dup_w	:=	obter_dias_entre_datas(dt_inicial_w, dt_final_w);
			qt_dut_w	:=	obter_dias_entre_datas(dt_inicial_w, dt_final_w);
          end if;

          --GERA VALOR DA AMORTIZACAO
          if ((i > qt_carencia_w) and mod(i,qt_periodicidade_amortizacao_w) = 0) then
            if (vl_indice_reaj_w != 0) then
              vl_amortizacao_w := vl_principal_w * coalesce(vl_indice_reaj_w, 1);
            else
              vl_amortizacao_w := vl_principal_w;
            end if;
          else
            vl_amortizacao_w := 0;
          end if;

          --GERA NUMERO DA PARCELA
          if (vl_amortizacao_w > 0) or (vl_juros_w > 0) then
             controla_parcela_w := controla_parcela_w + 1;
             nr_parcela_w := controla_parcela_w;
          else
             nr_parcela_w := null;
          end if;

          --GERA SALDO DEVEDOR E SALDO DEVEDOR INDEXADO
          if (nr_parcela_w IS NOT NULL AND nr_parcela_w::text <> '') then
            vl_saldo_dev_index_w := (vl_ajustado_w - (vl_principal_w * (controla_parcela_w)));
            vl_saldo_dev_w := vl_calculado_w - ((vl_calculado_w / (qt_parcelas_w)) * (controla_parcela_w));
          end if;

          --VALOR DA CORRECAO
          vl_correcao_w := (coalesce(vl_principal_w,0) * coalesce(vl_indice_reaj_w,1)) - (coalesce(vl_principal_w,0) * coalesce(tx_ajuste_w,1));
          
          insert into emprest_financ_parc(nr_sequencia,
            nr_seq_contrato,
            nr_mes,
            nr_parcela,
            cd_estabelecimento,
            nr_titulo,
            dt_vencimento,
            vl_amortizacao,
            vl_saldo_corrigido,
            vl_saldo_dev,
            vl_saldo_dev_index,
            nm_usuario,
            dt_atualizacao,
            vl_parcela,
            vl_juros,
            dt_inicial,
            dt_final,
            vl_indice_reaj,
            qt_dup,
            qt_dut,
			vl_correcao)
          values (nextval('emprest_financ_parc_seq'),
            nr_seq_contrato_p,
            nr_mes_w,
            nr_parcela_w,
            cd_estabelecimento_p,
            null,
            dt_vencimento_w,
            coalesce(vl_amortizacao_w,0),
            0,
            coalesce(vl_saldo_dev_w, 0),
            coalesce(vl_saldo_dev_index_w,0),
            nm_usuario_p,
            clock_timestamp(),
            0,
            0,
            dt_inicial_w,
            dt_final_w,
            vl_indice_reaj_w,
            qt_dup_w,
            qt_dut_w,
			vl_correcao_w);

        exception when others then
        --FALHA AO GERAR PARCELAS
        CALL wheb_mensagem_pck.exibir_mensagem_abort(1060202, 'DS_ERRO_W=' || sqlerrm);

        end;
    end loop;
    commit;
    end;
  end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_parcelas_bndes_fin (nr_seq_contrato_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

