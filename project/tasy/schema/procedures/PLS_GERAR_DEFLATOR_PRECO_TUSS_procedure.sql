-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_deflator_preco_tuss ( cd_edicao_amb_p edicao_amb.cd_edicao_amb%type, vl_reajuste_p bigint, dt_vigencia_p timestamp, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

 
tb_cd_moeda_w			pls_util_cta_pck.t_number_table;
tb_cd_porte_cbhpm_w		pls_util_cta_pck.t_varchar2_table_10;
tb_cd_procedimento_w		pls_util_cta_pck.t_number_table;
tb_ie_origem_proced_w		pls_util_cta_pck.t_number_table;
tb_ie_situacao_w		pls_util_cta_pck.t_varchar2_table_10;
tb_nr_auxiliares_amb_w		pls_util_cta_pck.t_number_table;
tb_nr_auxiliares_cbhpm_w	pls_util_cta_pck.t_number_table;
tb_nr_porte_anest_amb_w		pls_util_cta_pck.t_number_table;
tb_nr_porte_anest_cbhpm_w	pls_util_cta_pck.t_number_table;
tb_qt_filme_amb_w		pls_util_cta_pck.t_number_table;
tb_qt_filme_cbhpm_w		pls_util_cta_pck.t_number_table;
tb_qt_incidencia_amb_w		pls_util_cta_pck.t_number_table;
tb_qt_incidencia_cbhpm_w	pls_util_cta_pck.t_number_table;
tb_qt_uco_w			pls_util_cta_pck.t_number_table;
tb_tx_porte_w			pls_util_cta_pck.t_number_table;
tb_vl_anestesista_w		pls_util_cta_pck.t_number_table;
tb_vl_auxiliares_w		pls_util_cta_pck.t_number_table;
tb_vl_custo_operacional_w	pls_util_cta_pck.t_number_table;
tb_vl_filme_w			pls_util_cta_pck.t_number_table;
tb_vl_medico_w			pls_util_cta_pck.t_number_table;
tb_vl_procedimento_w		pls_util_cta_pck.t_number_table;
tb_nr_sequencia_w		pls_util_cta_pck.t_number_table;
						
C01 CURSOR(	cd_edicao_amb_pc	edicao_amb.cd_edicao_amb%type, 
		dt_inicio_vigencia_pc	timestamp, 
		vl_reajuste_pc		bigint) FOR 
	SELECT	cd_moeda, 
		cd_porte_cbhpm, 
		cd_procedimento, 
		ie_origem_proced, 
		ie_situacao, 
		nr_auxiliares_amb, 
		nr_auxiliares_cbhpm, 
		nr_porte_anest_amb, 
		nr_porte_anest_cbhpm, 
		qt_filme_amb, 
		qt_filme_cbhpm, 
		qt_incidencia_amb, 
		qt_incidencia_cbhpm, 
		qt_uco, 
		tx_porte, 
		vl_anestesista - ((vl_anestesista * vl_reajuste_pc) / 100) vl_anestesista, 
		vl_auxiliares - ((vl_auxiliares * vl_reajuste_pc) / 100) vl_auxiliares, 
		vl_custo_operacional - ((vl_custo_operacional * vl_reajuste_pc) / 100) vl_custo_operacional, 
		vl_filme - ((vl_filme * vl_reajuste_pc) / 100) vl_filme, 
		vl_medico - ((vl_medico * vl_reajuste_pc) / 100) vl_medico, 
		vl_procedimento - ((vl_procedimento * vl_reajuste_pc) / 100) vl_procedimento, 
		nr_sequencia 
	from	preco_tuss 
	where	cd_edicao_amb = cd_edicao_amb_pc 
	and	dt_inicio_vigencia <= dt_inicio_vigencia_pc 
	and	coalesce(dt_final_vigencia::text, '') = '';


BEGIN 
 
open C01(	cd_edicao_amb_p, dt_vigencia_p, vl_reajuste_p);
loop 
	fetch C01 bulk collect into 	tb_cd_moeda_w, tb_cd_porte_cbhpm_w, tb_cd_procedimento_w, 
					tb_ie_origem_proced_w, tb_ie_situacao_w, tb_nr_auxiliares_amb_w, 
					tb_nr_auxiliares_cbhpm_w, tb_nr_porte_anest_amb_w, tb_nr_porte_anest_cbhpm_w, 
					tb_qt_filme_amb_w, tb_qt_filme_cbhpm_w, tb_qt_incidencia_amb_w, 
					tb_qt_incidencia_cbhpm_w, tb_qt_uco_w, tb_tx_porte_w, 
					tb_vl_anestesista_w, tb_vl_auxiliares_w, tb_vl_custo_operacional_w, 
					tb_vl_filme_w, tb_vl_medico_w, tb_vl_procedimento_w, 
					tb_nr_sequencia_w 
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_cd_moeda_w.count = 0;
 
	forall i in tb_cd_moeda_w.first..tb_cd_moeda_w.last 
		insert into preco_tuss( 
			cd_moeda, cd_porte_cbhpm, cd_procedimento, 
			dt_inicio_vigencia, ie_origem_proced, ie_situacao, 
			nr_auxiliares_amb, nr_auxiliares_cbhpm, nr_porte_anest_amb, 
			nr_porte_anest_cbhpm, qt_filme_amb, qt_filme_cbhpm, 
			qt_incidencia_amb, qt_incidencia_cbhpm, qt_uco, 
			tx_porte, vl_anestesista, vl_auxiliares, 
			vl_custo_operacional, vl_filme, vl_medico, 
			vl_procedimento, cd_edicao_amb, dt_atualizacao, 
			dt_atualizacao_nrec, nm_usuario, nm_usuario_nrec, 
			nr_sequencia 
		) values ( 
			tb_cd_moeda_w(i), tb_cd_porte_cbhpm_w(i), tb_cd_procedimento_w(i), 
			dt_vigencia_p, tb_ie_origem_proced_w(i), tb_ie_situacao_w(i), 
			tb_nr_auxiliares_amb_w(i), tb_nr_auxiliares_cbhpm_w(i), tb_nr_porte_anest_amb_w(i), 
			tb_nr_porte_anest_cbhpm_w(i), tb_qt_filme_amb_w(i), tb_qt_filme_cbhpm_w(i), 
			tb_qt_incidencia_amb_w(i), tb_qt_incidencia_cbhpm_w(i), tb_qt_uco_w(i), 
			tb_tx_porte_w(i), tb_vl_anestesista_w(i), tb_vl_auxiliares_w(i), 
			tb_vl_custo_operacional_w(i), tb_vl_filme_w(i), tb_vl_medico_w(i), 
			tb_vl_procedimento_w(i), cd_edicao_amb_p, clock_timestamp(), 
			clock_timestamp(), nm_usuario_p, nm_usuario_p, 
			nextval('preco_tuss_seq') 
		);
	commit;
	 
	forall i in tb_nr_sequencia_w.first..tb_nr_sequencia_w.last 
		update	preco_tuss 
		set	dt_final_vigencia = dt_vigencia_p - 1 
		where	nr_sequencia = tb_nr_sequencia_w(i);
	commit;
end loop;
close C01;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_deflator_preco_tuss ( cd_edicao_amb_p edicao_amb.cd_edicao_amb%type, vl_reajuste_p bigint, dt_vigencia_p timestamp, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

