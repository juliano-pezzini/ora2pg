-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE insere_mat_resumo_pac (nr_sequencia_p bigint, nr_atendimento_p bigint, nr_seq_dispositivo_p bigint, nr_prescricao_p bigint) AS $body$
DECLARE


nr_seq_material_w	material_atend_paciente.nr_sequencia%type;
nr_seq_local_estoque_w	material_atend_paciente.cd_local_estoque%type;
cd_setor_atendimento_w	material_atend_paciente.cd_setor_atendimento%type;
qt_dose_w		double precision;
cd_material_w		material_atend_paciente.cd_material%type;
cd_unidade_medida_w	material_atend_paciente.cd_unidade_medida%type;
dt_entrada_unidade_w	material_atend_paciente.dt_entrada_unidade%type;
nr_seq_lote_fornec_w bigint;
qt_dose_w2		double precision;
nr_seq_prod_principal_w bigint;
qt_dose_equivalente_w double precision;
qt_volume_item_w double precision;
qt_volume_total_w double precision;

C01 CURSOR FOR
	SELECT	b.cd_material,
		CASE WHEN coalesce(qt_po::text, '') = '' THEN  round((b.qt_dose)::numeric,3)  ELSE round((round((b.qt_dose)::numeric,3)*c.qt_po)/coalesce(qt_volume_total,1),3) END ,
		CASE WHEN coalesce(qt_po::text, '') = '' THEN b.cd_unidade_medida  ELSE 'g' END ,
		b.nr_seq_prod_princ,
		b.qt_dose,
		c.qt_volume_total
	from	nut_prod_lac_item b,
		nut_prod_principal c
	where	b.nr_sequencia = nr_sequencia_p
	and   	nut_verifica_material_estoque(b.cd_material) = 'S'
	and	c.nr_sequencia = b.nr_seq_prod_princ
	
union

	SELECT	m.cd_material,
		round((a.qt_dose)::numeric,3),
		a.cd_unidade_medida,
		c.nr_seq_prod_princ,
		a.qt_dose,
		d.qt_volume_total
	from	nut_prod_lac_item_adic a,
		prescr_material m,
		nut_prod_lac_item c,
		nut_prod_principal d
	where	a.nr_seq_prod_item = nr_sequencia_p
	and   	nut_verifica_material_estoque(m.cd_material) = 'S'
	and	m.nr_sequencia = a.nr_seq_material
	and	m.nr_prescricao = a.nr_prescricao
	and c.nr_sequencia = a.nr_seq_prod_item
	and d.nr_sequencia = c.nr_seq_prod_princ
	
union

	select	a.cd_material,
		1,
		b.cd_unidade_medida_consumo,
		null,
		null,
		null
	from	dispositivo_succao_mat a,
		material b
	where	a.nr_seq_dispositivo = nr_seq_dispositivo_p
	and   	nut_verifica_material_estoque(a.cd_material) = 'S'
	and	a.cd_material = b.cd_material
	and	a.ie_opcao = 'H'
	and	a.ie_situacao = 'A'
	
union

	select	a.cd_material,
		1,
		b.cd_unidade_medida_consumo,
		null,
		null,
		null
	from	dispositivo_succao_mat a,
		material b
	where	a.nr_seq_dispositivo = nr_seq_dispositivo_p
	and   	nut_verifica_material_estoque(a.cd_material) = 'S'
	and	a.cd_material = b.cd_material
	and	a.ie_opcao = 'P'
	and	a.ie_situacao = 'A'
	and	not exists (select	1
					from	nut_prod_lactario_fat c
					where	c.nr_prescricao = nr_prescricao_p
					and   	nut_verifica_material_estoque(c.cd_material) = 'S'
					and	c.cd_material = a.cd_material);


C02 CURSOR FOR
	SELECT	a.nr_seq_lote_fornec,
				a.qt_material
	from	nut_prod_princ_lote a
	where a.nr_seq_prod_principal = nr_seq_prod_principal_w
		and a.cd_material = cd_material_w;


BEGIN
	select  max(cd_setor_atendimento),
		max(dt_entrada_unidade)
	into STRICT 	cd_setor_atendimento_w,
		dt_entrada_unidade_w
	from 	atend_paciente_unidade
	where 	nr_seq_interno = obter_atepacu_paciente(nr_atendimento_p, 'A');

	open C01;
	loop
	fetch C01 into
		cd_material_w,
		qt_dose_w,
		cd_unidade_medida_w,
		nr_seq_prod_principal_w,
		qt_volume_item_w,
		qt_volume_total_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
			if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
				select 	max(a.nr_seq_local_estoque)
				into STRICT	nr_seq_local_estoque_w
				from 	nut_local_estoque a
				where 	exists ( SELECT 1
						from   nut_local_estoque_mat b
						where  b.nr_seq_local = a.nr_sequencia
						and    b.cd_material = cd_material_w );

				if ((dt_entrada_unidade_w IS NOT NULL AND dt_entrada_unidade_w::text <> '') and (cd_unidade_medida_w IS NOT NULL AND cd_unidade_medida_w::text <> '') and
					   (qt_dose_w IS NOT NULL AND qt_dose_w::text <> '') and (cd_setor_atendimento_w IS NOT NULL AND cd_setor_atendimento_w::text <> '')) then

					if (nr_seq_prod_principal_w IS NOT NULL AND nr_seq_prod_principal_w::text <> '') then

						open C02;
						loop
						fetch C02 into
							nr_seq_lote_fornec_w,
							qt_dose_w2;
						EXIT WHEN NOT FOUND; /* apply on C02 */
							begin

								qt_dose_equivalente_w := round((round((qt_volume_item_w)::numeric,3)*qt_dose_w2)/coalesce(qt_volume_total_w,1),3);

								select 	nextval('material_atend_paciente_seq')
								into STRICT  	nr_seq_material_w
								;

								begin
								insert
								into    material_atend_paciente(
									dt_atendimento,
									nr_sequencia,
									cd_material,
									qt_material,
									cd_unidade_medida ,
									cd_setor_atendimento,
									nr_atendimento,
									nm_usuario,
									dt_atualizacao,
									dt_entrada_unidade,
									cd_acao,
									nr_seq_atepacu,
									cd_convenio,
									cd_categoria,
									cd_local_estoque,
									ie_valor_informado,
									nr_seq_lote_fornec
									) values (
									clock_timestamp(),
									nr_seq_material_w,
									cd_material_w,
									qt_dose_equivalente_w,
									cd_unidade_medida_w,
									cd_setor_atendimento_w,
									nr_atendimento_p,
									wheb_usuario_pck.get_nm_usuario,
									clock_timestamp(),
									dt_entrada_unidade_w,
									'1',
									obter_atepacu_paciente(nr_atendimento_p, 'A'),
									obter_convenio_atendimento(nr_atendimento_p),
									obter_categoria_atendimento(nr_atendimento_p),
									nr_seq_local_estoque_w,
									'N',
									nr_seq_lote_fornec_w
									);

									CALL ATUALIZA_PRECO_MATERIAL(nr_seq_material_w, wheb_usuario_pck.get_nm_usuario);

									if (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') then
										insert into nut_prod_lactario_fat(
											nr_sequencia,
											dt_atualizacao,
											nm_usuario,
											dt_atualizacao_nrec,
											nm_usuario_nrec,
											nr_prescricao,
											cd_material,
											ie_situacao,
											nr_seq_material)
										values (	nextval('nut_prod_lactario_fat_seq'),
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											nr_prescricao_p,
											cd_material_w,
											'A',
											nr_seq_material_w);
									end if;
								exception
								when others then
									 insert into log_nutricao(dt_atualizacao,
									 nm_usuario,
									 cd_log,
									 ds_log)
									 values (
									 clock_timestamp(),
									 wheb_usuario_pck.get_nm_usuario,
									 4524,
									 'qt_dose_equivalente_w'||to_char(qt_dose_equivalente_w));
								end;

								qt_dose_w := qt_dose_w - qt_dose_equivalente_w;

							end;
						end loop;
						close C02;
					end if;

					if (qt_dose_w > 0 ) then

						select 	nextval('material_atend_paciente_seq')
						into STRICT  	nr_seq_material_w
						;

						begin
						insert
						into    material_atend_paciente(
							dt_atendimento,
							nr_sequencia,
							cd_material,
							qt_material,
							cd_unidade_medida ,
							cd_setor_atendimento,
							nr_atendimento,
							nm_usuario,
							dt_atualizacao,
							dt_entrada_unidade,
							cd_acao,
							nr_seq_atepacu,
							cd_convenio,
							cd_categoria,
							cd_local_estoque,
							ie_valor_informado
							) values (
							clock_timestamp(),
							nr_seq_material_w,
							cd_material_w,
							qt_dose_w,
							cd_unidade_medida_w,
							cd_setor_atendimento_w,
							nr_atendimento_p,
							wheb_usuario_pck.get_nm_usuario,
							clock_timestamp(),
							dt_entrada_unidade_w,
							'1',
							obter_atepacu_paciente(nr_atendimento_p, 'A'),
							obter_convenio_atendimento(nr_atendimento_p),
							obter_categoria_atendimento(nr_atendimento_p),
							nr_seq_local_estoque_w,
							'N'
							);

							CALL ATUALIZA_PRECO_MATERIAL(nr_seq_material_w, wheb_usuario_pck.get_nm_usuario);

							if (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') then
								insert into nut_prod_lactario_fat(
									nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									nr_prescricao,
									cd_material,
									ie_situacao,
									nr_seq_material)
								values (	nextval('nut_prod_lactario_fat_seq'),
									clock_timestamp(),
									wheb_usuario_pck.get_nm_usuario,
									clock_timestamp(),
									wheb_usuario_pck.get_nm_usuario,
									nr_prescricao_p,
									cd_material_w,
									'A',
									nr_seq_material_w);
							end if;
						exception
						when others then
							 insert into log_nutricao(dt_atualizacao,
							 nm_usuario,
							 cd_log,
							 ds_log)
							 values (
							 clock_timestamp(),
							 wheb_usuario_pck.get_nm_usuario,
							 4524,
							 'qt_dose_w'||to_char(qt_dose_w));
						end;
					end if;
				end if;
			end if;
		end;
	end loop;
	close C01;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE insere_mat_resumo_pac (nr_sequencia_p bigint, nr_atendimento_p bigint, nr_seq_dispositivo_p bigint, nr_prescricao_p bigint) FROM PUBLIC;

