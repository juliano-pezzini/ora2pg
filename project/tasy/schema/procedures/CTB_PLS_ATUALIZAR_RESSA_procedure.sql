-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_pls_atualizar_ressa ( nr_seq_processo_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_proc_conta_p bigint, nr_seq_competencia_p bigint, nr_seq_conta_competencia_p bigint, qt_movimento_p INOUT bigint, nr_seq_atualizacao_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
	PLS_ATUALIZAR_CONTA_CONTABIL
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_classificacao_item_w		varchar(30);
cd_conta_deferido_w		varchar(20);
ie_tipo_contratacao_w		varchar(15);
ie_segmentacao_w		varchar(3);
ie_tipo_segurado_w		varchar(3);
ie_tipo_beneficiario_w		varchar(3);
ie_preco_w			varchar(2);
ie_regulamentacao_w		varchar(2);
ie_tipo_w			varchar(2);
ie_participacao_w		varchar(1);
cd_historico_w			numeric(20);
qt_movimento_w			bigint;
nr_seq_conta_w			bigint;
nr_seq_regra_w			bigint;
cd_historico_deferido_w		bigint;
nr_seq_contrato_w		bigint;
qt_esquema_ativo_w		bigint;
ie_tipo_movimento_w		integer;
dt_referencia_w			timestamp;
dt_referencia_ww		timestamp;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
ie_esquema_contabil_w		pls_parametro_contabil.ie_esquema_contabil%type;
nr_seq_esquema_w		pls_esquema_contabil.nr_sequencia%type;
cd_historico_padrao_w		pls_esquema_contabil.cd_historico_padrao%type;
ie_codificacao_w		pls_esquema_contabil_seg.ie_codificacao%type;
vl_fixo_w			pls_esquema_contabil_seg.vl_fixo%type;
cd_conta_contabil_w		pls_esquema_contabil_seg.cd_conta_contabil%type;
ie_debito_credito_w		pls_esquema_contabil_seg.ie_debito_credito%type;
ds_mascara_w			pls_esquema_contabil_seg.ds_mascara%type;
cd_classificacao_credito_w	conta_contabil.cd_classificacao_atual%type;
cd_classificacao_debito_w	conta_contabil.cd_classificacao_atual%type;
cd_conta_credito_w		conta_contabil.cd_conta_contabil%type;
cd_conta_debito_w		conta_contabil.cd_conta_contabil%type;


C01 CURSOR FOR
	SELECT	b.nr_sequencia,
		d.ie_tipo_contratacao,
		d.ie_preco,
		d.ie_segmentacao,
		d.ie_regulamentacao,
		d.ie_participacao,
		c.nr_seq_contrato,
		--substr(pls_obter_dados_contrato(c.nr_seq_contrato,'TB'),1,3),
		trunc(a.dt_processo,'month'),
		c.ie_tipo_segurado,
		c.nr_sequencia
	FROM pls_processo a, pls_processo_conta b
LEFT OUTER JOIN pls_segurado c ON (b.nr_seq_segurado = c.nr_sequencia)
LEFT OUTER JOIN pls_plano d ON (c.nr_seq_plano = d.nr_sequencia)
WHERE a.nr_sequencia		= b.nr_seq_processo   and a.nr_sequencia		= nr_seq_processo_p and b.nr_sequencia 		= coalesce(nr_seq_proc_conta_p, b.nr_sequencia);

c_contas CURSOR FOR
	SELECT	d.nr_sequencia nr_seq_conta_comp,
		null nr_seq_processo_conta,
		f.nr_sequencia nr_seq_plano,
		c.nr_seq_contrato,
		c.ie_tipo_segurado,
		trunc(a.dt_processo,'month') dt_referencia,
		f.ie_tipo_contratacao,
		f.ie_preco,
		f.ie_segmentacao,
		f.ie_regulamentacao,
		coalesce(d.vl_provisao, 0) vl_provisao,
		coalesce(d.vl_ajuste, 0) vl_ajuste,
		0 vl_deferido,
		0 vl_ressarcir,
		b.ie_status_pagamento
	FROM pls_processo_competencia e, pls_processo_contas_comp d, pls_processo a, pls_processo_conta b
LEFT OUTER JOIN pls_segurado c ON (b.nr_seq_segurado = c.nr_sequencia)
LEFT OUTER JOIN pls_plano f ON (c.nr_seq_plano = f.nr_sequencia)
WHERE a.nr_sequencia		= b.nr_seq_processo  and d.nr_seq_conta		= b.nr_sequencia and d.nr_seq_competencia	= e.nr_sequencia  and d.ie_tipo_movimentacao	= 'P' and e.nr_sequencia 		= nr_seq_competencia_p and d.nr_sequencia		= coalesce(nr_seq_conta_competencia_p, d.nr_sequencia)
	
union all

	SELECT	null nr_seq_conta_comp,
		b.nr_sequencia nr_seq_processo_conta,
		f.nr_sequencia nr_seq_plano,
		c.nr_seq_contrato,
		c.ie_tipo_segurado,
		trunc(a.dt_processo,'month') dt_referencia,
		f.ie_tipo_contratacao,
		f.ie_preco,
		f.ie_segmentacao,
		f.ie_regulamentacao,
		0 vl_provisao,
		0 vl_ajuste,
		coalesce(b.vl_deferido, 0),
		coalesce(b.vl_ressarcir, 0),
		b.ie_status_pagamento
	FROM pls_processo a, pls_processo_conta b
LEFT OUTER JOIN pls_segurado c ON (b.nr_seq_segurado = c.nr_sequencia)
LEFT OUTER JOIN pls_plano f ON (c.nr_seq_plano = f.nr_sequencia)
WHERE a.nr_sequencia		= b.nr_seq_processo   and a.nr_sequencia 		= nr_seq_processo_p and b.nr_sequencia 		= coalesce(nr_seq_proc_conta_p, b.nr_sequencia);

vet_contas c_contas%rowtype;

c_tipo_movimento CURSOR FOR
SELECT 	28

where	coalesce(vet_contas.nr_seq_conta_comp, 0) <> 0

union all

SELECT	29

where	coalesce(vet_contas.nr_seq_processo_conta, 0) <> 0

union all

select	30

where	coalesce(vet_contas.nr_seq_processo_conta, 0) <> 0

union all

select 31

where	vet_contas.vl_ajuste >= 0
and	coalesce(vet_contas.nr_seq_conta_comp, 0) <> 0

union all

select	32

where	vet_contas.vl_ajuste < 0
and	coalesce(vet_contas.nr_seq_conta_comp, 0) <> 0

union all

select	35

where	coalesce(vet_contas.nr_seq_processo_conta, 0) <> 0;

c_esquema CURSOR FOR
	SELECT	nr_sequencia,
		cd_historico_padrao
	from	pls_esquema_contabil
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	ie_tipo_regra		= 'R'
	and	coalesce(ie_tipo_movimentacao,28) = ie_tipo_movimento_w
	and	vet_contas.dt_referencia between dt_inicio_vigencia and coalesce(dt_fim_vigencia,vet_contas.dt_referencia)
	and	((ie_tipo_segurado = vet_contas.ie_tipo_segurado) or (coalesce(ie_tipo_segurado::text, '') = ''))
	and	((nr_seq_contrato = vet_contas.nr_seq_contrato) or (coalesce(nr_seq_contrato::text, '') = ''))
	and	((ie_status_pagamento = vet_contas.ie_status_pagamento) or (coalesce(ie_status_pagamento::text, '') = ''))
	order by
		coalesce(ie_tipo_segurado,' '),
		coalesce(nr_seq_contrato,0),
		coalesce(ie_status_pagamento, ' '),
		coalesce(dt_inicio_vigencia,clock_timestamp());

c_segmentacao CURSOR FOR
	SELECT	ie_codificacao,
		vl_fixo,
		cd_conta_contabil,
		ie_debito_credito,
		ds_mascara
	from	pls_esquema_contabil_seg
	where	nr_seq_regra_esquema	= nr_seq_esquema_w
	order by
		ie_debito_credito,
		nr_seq_apresentacao;
	

BEGIN

select	coalesce(max(ie_esquema_contabil), 'N')
into STRICT	ie_esquema_contabil_w
from	pls_parametro_contabil
where	cd_estabelecimento = cd_estabelecimento_p;

qt_movimento_w := qt_movimento_p;

qt_esquema_ativo_w := 0;
if (nr_seq_processo_p IS NOT NULL AND nr_seq_processo_p::text <> '') then
	select	a.dt_processo
	into STRICT	dt_referencia_ww
	from	pls_processo a
	where	nr_sequencia = nr_seq_processo_p;

	select	count(1)
	into STRICT	qt_esquema_ativo_w
	from	pls_esquema_contabil
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	ie_tipo_regra		= 'R'
	and	dt_referencia_ww between dt_inicio_vigencia and coalesce(dt_fim_vigencia,dt_referencia_ww);
end if;

/* 
Se o nr_seq_conta_competencia_p ou nr_seq_competencia_p nao for nulo, significa que esta atualizando um item de percentual historico.
Percentual historico so e atualizado por esquema contabil.
*/
if (qt_esquema_ativo_w = 0 and ((nr_seq_conta_competencia_p IS NOT NULL AND nr_seq_conta_competencia_p::text <> '') or (nr_seq_competencia_p IS NOT NULL AND nr_seq_competencia_p::text <> ''))) then
	qt_esquema_ativo_w := 1;
end if;

/* 
	Se nao estiver marcada a checkbox "Utilizar esquema contabil", ou se nao houver esquema contabil ativo, utiliza regras contabeis
*/
if (ie_esquema_contabil_w = 'N' or qt_esquema_ativo_w = 0) then
	open C01;
	loop
	fetch C01 into	
		nr_seq_conta_w,
		ie_tipo_contratacao_w,
		ie_preco_w,
		ie_segmentacao_w,
		ie_regulamentacao_w,
		ie_participacao_w,
		nr_seq_contrato_w,
		--ie_tipo_beneficiario_w,
		dt_referencia_w,
		ie_tipo_segurado_w,
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		begin
		ie_tipo_beneficiario_w	:= substr(pls_obter_dados_contrato(nr_seq_contrato_w, 'TB'), 1, 3);
		exception
		when others then
			ie_tipo_beneficiario_w	:= null;
		end;
		
		if (coalesce(nr_seq_segurado_w, 0) = 0) then
			begin
			
			ie_tipo_segurado_w:= 'D';
			
			end;
		end if;
		
		SELECT * FROM ctb_pls_obter_conta_ressa(	cd_estabelecimento_p, dt_referencia_w, 'C', ie_tipo_contratacao_w, ie_preco_w, ie_segmentacao_w, ie_regulamentacao_w, ie_participacao_w, ie_tipo_beneficiario_w, ie_tipo_segurado_w, nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_deferido_w, cd_conta_deferido_w) INTO STRICT nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_deferido_w, cd_conta_deferido_w;
			
		if ((nr_seq_regra_w)::numeric  > 0) then
			update	pls_processo_conta
			set	cd_conta_cred		= cd_conta_contabil_w,
				nr_seq_regra_ctb_cred	= nr_seq_regra_w,
				cd_historico		= cd_historico_w,
				cd_historico_deferido	= cd_historico_deferido_w,
				cd_conta_deferido_cred	= cd_conta_deferido_w
			where	nr_sequencia		= nr_seq_conta_w;
		end if;
			
		SELECT * FROM ctb_pls_obter_conta_ressa(	cd_estabelecimento_p, dt_referencia_w, 'D', ie_tipo_contratacao_w, ie_preco_w, ie_segmentacao_w, ie_regulamentacao_w, ie_participacao_w, ie_tipo_beneficiario_w, ie_tipo_segurado_w, nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_deferido_w, cd_conta_deferido_w) INTO STRICT nr_seq_regra_w, cd_historico_w, cd_conta_contabil_w, cd_historico_deferido_w, cd_conta_deferido_w;
			
		if ((nr_seq_regra_w)::numeric  > 0) then
			update	pls_processo_conta
			set	cd_conta_deb		= cd_conta_contabil_w,
				nr_seq_regra_ctb_deb	= nr_seq_regra_w,
				cd_historico		= cd_historico_w,
				cd_historico_deferido	= cd_historico_deferido_w,
				cd_conta_deferido_deb	= cd_conta_deferido_w
			where	nr_sequencia		= nr_seq_conta_w;
		end if;
		
		end;
	end loop;
	close C01;
	/* Quando a atualizacao for de um item de percentual historico, deve entrar na atualizacao por esquema mesmo que use regras contabeis.*/

elsif (ie_esquema_contabil_w = 'S' or qt_esquema_ativo_w > 0) then
	open c_contas;
	loop
	fetch c_contas into
		vet_contas;
	EXIT WHEN NOT FOUND; /* apply on c_contas */
		begin
		open c_tipo_movimento;
		loop
		fetch c_tipo_movimento into
			ie_tipo_movimento_w;
		EXIT WHEN NOT FOUND; /* apply on c_tipo_movimento */
			begin
						
			cd_classificacao_credito_w	:= null;
			cd_classificacao_debito_w	:= null;
			nr_seq_esquema_w		:= null;
			cd_historico_padrao_w		:= null;
			cd_conta_credito_w	:= null;
			cd_conta_debito_w	:= null;


			open c_esquema;
			loop
			fetch c_esquema into
				nr_seq_esquema_w,
				cd_historico_padrao_w;
			EXIT WHEN NOT FOUND; /* apply on c_esquema */
			end loop;
			close c_esquema;

			open c_segmentacao;
			loop
			fetch c_segmentacao into	
				ie_codificacao_w,
				vl_fixo_w,
				cd_conta_contabil_w,
				ie_debito_credito_w,
				ds_mascara_w;
			EXIT WHEN NOT FOUND; /* apply on c_segmentacao */
				begin
				cd_classificacao_item_w	:= null;
			
				if (ie_debito_credito_w = 'C') then /* Classificacao CREDITO */
					if (ie_codificacao_w = 'CR') then /* Codigo reduzido */
						select	max(cd_classificacao_atual)
						into STRICT	cd_classificacao_credito_w
						from	conta_contabil
						where	cd_conta_contabil	= cd_conta_contabil_w;
						
						cd_conta_credito_w	:= cd_conta_contabil_w;
					elsif (ie_codificacao_w = 'FX') then /* Fixo */
						cd_classificacao_item_w	:= vl_fixo_w;
					elsif (ie_codificacao_w = 'RC') then /* Tipo de contratacao / Regulamentacao */
						cd_classificacao_item_w := pls_atualizar_codificacao_pck.get_contratacao_regulamentacao(vet_contas.ie_tipo_contratacao,vet_contas.ie_regulamentacao);
					elsif (ie_codificacao_w = 'FP') then /* Formacao de Preco */
						if (vet_contas.ie_preco in ('1','2','3')) then
							cd_classificacao_item_w	:= pls_atualizar_codificacao_pck.get_formacao_preco(vet_contas.ie_preco);
						else
							cd_classificacao_item_w	:= 'FP';
						end if;
					elsif (ie_codificacao_w = 'TC') then /* Tipo de contratacao */
						if (vet_contas.ie_tipo_contratacao in ('I','CE','CA')) then
							cd_classificacao_item_w := pls_atualizar_codificacao_pck.get_tipo_contratacao(vet_contas.ie_tipo_contratacao);
						else
							cd_classificacao_item_w	:= 'TC';
						end if;
					elsif (ie_codificacao_w = 'R') then /* Regulamentacao */
						cd_classificacao_item_w := pls_atualizar_codificacao_pck.get_regulamentacao(vet_contas.ie_regulamentacao);
					elsif (ie_codificacao_w = 'S') then /* Segmentacao */
						cd_classificacao_item_w	:= lpad(vet_contas.ie_segmentacao,2,'0');
					end if;

					if (cd_classificacao_item_w IS NOT NULL AND cd_classificacao_item_w::text <> '') then
						if (ds_mascara_w = '00') then
							cd_classificacao_item_w	:= lpad(cd_classificacao_item_w,2,'0') || '.';
						elsif (ds_mascara_w = '0.0') then
							cd_classificacao_item_w	:= substr(lpad(cd_classificacao_item_w,2,'0'),1,1) ||'.'||substr(lpad(cd_classificacao_item_w,2,'0'),2,1) || '.';
						elsif (ds_mascara_w = '0_') then
							cd_classificacao_item_w	:= cd_classificacao_item_w;
						else
							cd_classificacao_item_w	:= cd_classificacao_item_w || '.';
						end if;
						
						cd_classificacao_credito_w	:= cd_classificacao_credito_w || cd_classificacao_item_w;
					end if;
				elsif (ie_debito_credito_w = 'D') then /* Classificacao DEBITO */
					if (ie_codificacao_w = 'CR') then /* Codigo reduzido */
						select	max(cd_classificacao_atual)
						into STRICT	cd_classificacao_debito_w
						from	conta_contabil
						where	cd_conta_contabil	= cd_conta_contabil_w;
						
						cd_conta_debito_w	:= cd_conta_contabil_w;
					elsif (ie_codificacao_w = 'FX') then /* Fixo */
						cd_classificacao_item_w	:= vl_fixo_w;
					elsif (ie_codificacao_w = 'RC') then /* Tipo de contratacao / Regulamentacao */
						cd_classificacao_item_w := pls_atualizar_codificacao_pck.get_contratacao_regulamentacao(vet_contas.ie_tipo_contratacao,vet_contas.ie_regulamentacao);
					elsif (ie_codificacao_w = 'FP') then /* Formacao de Preco */
						if (vet_contas.ie_preco in ('1','2','3')) then
							cd_classificacao_item_w	:= pls_atualizar_codificacao_pck.get_formacao_preco(vet_contas.ie_preco);
						else
							cd_classificacao_item_w	:= 'FP';
						end if;
					elsif (ie_codificacao_w = 'TC') then /* Tipo de contratacao */
						if (vet_contas.ie_tipo_contratacao in ('I','CE','CA')) then
							cd_classificacao_item_w := pls_atualizar_codificacao_pck.get_tipo_contratacao(vet_contas.ie_tipo_contratacao);
						else
							cd_classificacao_item_w	:= 'TC';
						end if;
					elsif (ie_codificacao_w = 'R') then /* Regulamentacao */
						cd_classificacao_item_w := pls_atualizar_codificacao_pck.get_regulamentacao(vet_contas.ie_regulamentacao);
					elsif (ie_codificacao_w = 'S') then /* Segmentacao */
						cd_classificacao_item_w	:= lpad(vet_contas.ie_segmentacao,2,'0');
					end if;

					if (cd_classificacao_item_w IS NOT NULL AND cd_classificacao_item_w::text <> '') then
						if (ds_mascara_w = '00') then
							cd_classificacao_item_w	:= lpad(cd_classificacao_item_w,2,'0') || '.';
						elsif (ds_mascara_w = '0.0') then
							cd_classificacao_item_w	:= substr(lpad(cd_classificacao_item_w,2,'0'),1,1) ||'.'||substr(lpad(cd_classificacao_item_w,2,'0'),2,1) || '.';
						elsif (ds_mascara_w = '0_') then
							cd_classificacao_item_w	:= cd_classificacao_item_w;
						else
							cd_classificacao_item_w	:= cd_classificacao_item_w || '.';
						end if;
						
						cd_classificacao_debito_w	:= cd_classificacao_debito_w || cd_classificacao_item_w;
					end if;
				end if;
				end;
			end loop;
			close c_segmentacao;

			/* Remover o ultimo ponto da classificacao */

			if (substr(cd_classificacao_credito_w,length(cd_classificacao_credito_w),length(cd_classificacao_credito_w)) = '.') then
				cd_classificacao_credito_w	:= substr(cd_classificacao_credito_w,1,length(cd_classificacao_credito_w)-1);
			end if;
			
			if (substr(cd_classificacao_debito_w,length(cd_classificacao_debito_w),length(cd_classificacao_debito_w)) = '.') then
				cd_classificacao_debito_w	:= substr(cd_classificacao_debito_w,1,length(cd_classificacao_debito_w)-1);
			end if;

			if (coalesce(cd_conta_credito_w::text, '') = '') then
				cd_conta_credito_w	:= ctb_obter_conta_classif(cd_classificacao_credito_w,vet_contas.dt_referencia,cd_estabelecimento_p);
			end if;

			if (coalesce(cd_conta_debito_w::text, '') = '') then
				cd_conta_debito_w	:= ctb_obter_conta_classif(cd_classificacao_debito_w,vet_contas.dt_referencia,cd_estabelecimento_p);
			end if;
			
			if (ie_tipo_movimento_w = 28) then
				ie_tipo_w	:= 'PR';

				update	pls_processo_contas_comp
				set	cd_conta_cred_prov		= cd_conta_credito_w,
					cd_conta_deb_prov		= cd_conta_debito_w,
					nr_seq_esquema_prov		= nr_seq_esquema_w,
					cd_historico_prov		= cd_historico_padrao_w,
					cd_classif_cred_prov		= cd_classificacao_credito_w,
					cd_classif_deb_prov		= cd_classificacao_debito_w
				where	nr_sequencia			= vet_contas.nr_seq_conta_comp;

				qt_movimento_w := qt_movimento_w + 1;
			elsif (ie_tipo_movimento_w = 29) then
				ie_tipo_w	:= 'DF';

				update	pls_processo_conta
				set	cd_conta_deferido_cred		= cd_conta_credito_w,
					cd_conta_deferido_deb		= cd_conta_debito_w,
					nr_seq_esquema_def		= nr_seq_esquema_w,
					cd_historico_deferido		= cd_historico_padrao_w,
					cd_classif_deferido_cred	= cd_classificacao_credito_w,
					cd_classif_deferido_deb		= cd_classificacao_debito_w
				where	nr_sequencia			= vet_contas.nr_seq_processo_conta;

				qt_movimento_w := qt_movimento_w + 1;
			elsif (ie_tipo_movimento_w = 30) then
				ie_tipo_w	:= 'RE';

				update	pls_processo_conta
				set	cd_conta_cred			= cd_conta_credito_w,
					cd_conta_deb			= cd_conta_debito_w,
					nr_seq_esquema_ressarc		= nr_seq_esquema_w,
					cd_historico			= cd_historico_padrao_w,
					cd_classif_cred			= cd_classificacao_credito_w,
					cd_classif_deb			= cd_classificacao_debito_w
				where	nr_sequencia			= vet_contas.nr_seq_processo_conta;

				qt_movimento_w := qt_movimento_w + 1;
			elsif (ie_tipo_movimento_w = 31) then
				ie_tipo_w	:= 'AC';

				update	pls_processo_contas_comp
				set	cd_conta_cred_ajuste		= cd_conta_credito_w,
					cd_conta_deb_ajuste		= cd_conta_debito_w,
					nr_seq_esquema_ajuste		= nr_seq_esquema_w,
					cd_historico_ajuste		= cd_historico_padrao_w,
					cd_classif_cred_ajuste		= cd_classificacao_credito_w,
					cd_classif_deb_ajuste		= cd_classificacao_debito_w
				where	nr_sequencia			= vet_contas.nr_seq_conta_comp;

				qt_movimento_w := qt_movimento_w + 1;
			elsif (ie_tipo_movimento_w = 32) then
				ie_tipo_w	:= 'DC';

				update	pls_processo_contas_comp
				set	cd_conta_cred_ajuste		= cd_conta_credito_w,
					cd_conta_deb_ajuste		= cd_conta_debito_w,
					nr_seq_esquema_ajuste		= nr_seq_esquema_w,
					cd_historico_ajuste		= cd_historico_padrao_w,
					cd_classif_cred_ajuste		= cd_classificacao_credito_w,
					cd_classif_deb_ajuste		= cd_classificacao_debito_w
				where	nr_sequencia			= vet_contas.nr_seq_conta_comp;

				qt_movimento_w := qt_movimento_w + 1;
			elsif (ie_tipo_movimento_w = 35) then
				ie_tipo_w	:= 'PC';

				update	pls_processo_conta
				set	cd_conta_cred_processo		= cd_conta_credito_w,
					cd_conta_deb_processo		= cd_conta_debito_w,
					nr_seq_esquema_processo		= nr_seq_esquema_w,
					cd_historico_processo		= cd_historico_padrao_w,
					cd_classif_cred_processo	= cd_classificacao_credito_w,
					cd_classif_deb_processo		= cd_classificacao_debito_w
				where	nr_sequencia			= vet_contas.nr_seq_processo_conta;

				qt_movimento_w := qt_movimento_w + 1;
			end if;


			if (nr_seq_atualizacao_p IS NOT NULL AND nr_seq_atualizacao_p::text <> '') then
				if (coalesce(nr_seq_esquema_w::text, '') = '') then
					CALL pls_gravar_mov_contabil(nr_seq_atualizacao_p,
								1,
								null,
								null,
								null,
								ie_tipo_w,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								nm_usuario_p,
								nr_seq_esquema_w,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								vet_contas.nr_seq_processo_conta,
								vet_contas.nr_seq_conta_comp);

				elsif	((coalesce(cd_conta_credito_w::text, '') = '') or (coalesce(cd_conta_debito_w::text, '') = '')) then
					CALL pls_gravar_mov_contabil(nr_seq_atualizacao_p,
								2,
								null,
								null,
								null,
								ie_tipo_w,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								nm_usuario_p,
								nr_seq_esquema_w,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								null,
								vet_contas.nr_seq_processo_conta,
								vet_contas.nr_seq_conta_comp);
				end if;
			end if;
			end;
		end loop;
		close c_tipo_movimento;
		end;
	end loop;
	close c_contas;
end if;

qt_movimento_p := qt_movimento_w;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_pls_atualizar_ressa ( nr_seq_processo_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_proc_conta_p bigint, nr_seq_competencia_p bigint, nr_seq_conta_competencia_p bigint, qt_movimento_p INOUT bigint, nr_seq_atualizacao_p bigint) FROM PUBLIC;

