-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE diops_copiar_regras ( nr_seq_trans_orig_p bigint, nr_seq_trans_dest_p bigint, nm_regra_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Copiar as regras financeiras de uma transação para a outra
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
	Conta financeira
	Lucro ou prejuízo
	Solvência
	Idade saldo
	Intercâmbio (Fazer)
-------------------------------------------------------------------------------------------------------------------

Referências:
	OPS - Geração de DIOPS
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_tipo_conta_w				varchar(3);
nr_seq_trans_conta_w			bigint;
nr_seq_regra_w				bigint;
nr_seq_diops_trans_conta_w		bigint;
nr_seq_diops_conta_ans_solv_w		bigint;
nr_seq_idade_saldo_w			bigint;

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	diops_trans_conta	a
	where	a.nr_seq_transacao	= nr_seq_trans_orig_p
	and	a.ie_tipo_conta	 	= ie_tipo_conta_w;
	
C02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	diops_conta_ans_solvencia	a
	where	a.nr_seq_transacao	= nr_seq_trans_orig_p;
	
C03 CURSOR FOR
	SELECT	a.nr_sequencia
	from	diops_idade_saldo	a
	where	a.nr_seq_transacao	= nr_seq_trans_orig_p;


BEGIN
if (nm_regra_p = 'Conta financeira') then
	ie_tipo_conta_w	:= 'F';
	
	open C01;
	loop
	fetch C01 into	
		nr_seq_trans_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select	nextval('diops_trans_conta_seq')
		into STRICT	nr_seq_diops_trans_conta_w
		;
		
		insert into diops_trans_conta(nr_sequencia,
			nm_usuario,
			nm_usuario_nrec,
			dt_atualizacao,
			dt_atualizacao_nrec,
			cd_estabelecimento,
			ds_conta,
			ds_desc_conta,
			ie_acao_conta,
			ie_plano_conta,
			ie_tipo_atividade,
			ie_tipo_conta,
			nr_seq_anterior,
			nr_seq_apresentacao,
			nr_seq_transacao)
		SELECT	nr_seq_diops_trans_conta_w,
			nm_usuario_p,
			nm_usuario_p,
			clock_timestamp(),
			clock_timestamp(),
			cd_estabelecimento_p,
			ds_conta,
			ds_desc_conta,
			ie_acao_conta,
			ie_plano_conta,
			ie_tipo_atividade,
			ie_tipo_conta,
			nr_seq_anterior,
			nr_seq_apresentacao,
			nr_seq_trans_dest_p
		from	diops_trans_conta
		where	nr_sequencia	= nr_seq_trans_conta_w;
		
		insert into diops_trans_conta_financ(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_trans_conta,
			cd_conta_financ,
			ie_acao_conta,
			nr_seq_anterior)
		SELECT	nextval('diops_trans_conta_financ_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_diops_trans_conta_w,
			cd_conta_financ,
			ie_acao_conta,
			nr_seq_anterior
		from	diops_trans_conta_financ
		where	nr_seq_trans_conta	= nr_seq_trans_conta_w;
		end;
	end loop;
	close C01;
elsif (nm_regra_p = 'Lucro ou prejuízo') then
	ie_tipo_conta_w	:= 'LP';
	
	open C01;
	loop
	fetch C01 into	
		nr_seq_trans_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select	nextval('diops_trans_conta_seq')
		into STRICT	nr_seq_diops_trans_conta_w
		;
		
		insert into diops_trans_conta(nr_sequencia,
			nm_usuario,
			nm_usuario_nrec,
			dt_atualizacao,
			dt_atualizacao_nrec,
			cd_estabelecimento,
			ds_conta,
			ds_desc_conta,
			ie_acao_conta,
			ie_plano_conta,
			ie_tipo_atividade,
			ie_tipo_conta,
			nr_seq_anterior,
			nr_seq_apresentacao,
			nr_seq_transacao)
		SELECT	nr_seq_diops_trans_conta_w,
			nm_usuario_p,
			nm_usuario_p,
			clock_timestamp(),
			clock_timestamp(),
			cd_estabelecimento_p,
			ds_conta,
			ds_desc_conta,
			ie_acao_conta,
			ie_plano_conta,
			ie_tipo_atividade,
			ie_tipo_conta,
			nr_seq_anterior,
			nr_seq_apresentacao,
			nr_seq_trans_dest_p
		from	diops_trans_conta
		where	nr_sequencia	= nr_seq_trans_conta_w;
		
		insert into diops_trans_conta_lucprej(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_trans_conta,
			cd_conta_contabil,
			ds_origem_conta,
			nr_seq_anterior,
			ie_origem_valor)
		SELECT	nextval('diops_trans_conta_lucprej_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_diops_trans_conta_w,
			cd_conta_contabil,
			ds_origem_conta,
			nr_seq_anterior,
			ie_origem_valor
		from	diops_trans_conta_lucprej
		where	nr_seq_trans_conta	= nr_seq_trans_conta_w;
		end;
	end loop;
	close C01;
elsif (nm_regra_p = 'Solvência') then
	open C02;
	loop
	fetch C02 into	
		nr_seq_trans_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		select	nextval('diops_conta_ans_solvencia_seq')
		into STRICT	nr_seq_diops_conta_ans_solv_w
		;
		
		insert into diops_conta_ans_solvencia(nr_sequencia,
			cd_solvencia,
			ds_solvencia,
			ie_tipo_solvencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_transacao,
			nr_seq_anterior)
		SELECT	nr_seq_diops_conta_ans_solv_w,
			cd_solvencia,
			ds_solvencia,
			ie_tipo_solvencia,
			clock_timestamp(),
			nm_usuario_p,
			dt_atualizacao_nrec,
			nm_usuario_p,
			nr_seq_trans_dest_p,
			nr_seq_anterior
		from	diops_conta_ans_solvencia
		where	nr_sequencia	= nr_seq_trans_conta_w;
		
		insert into diops_trans_conta_solv(nr_sequencia,
			nr_seq_trans_conta,
			cd_conta_contabil,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_anterior,
			ds_origem_conta)
		SELECT	nextval('diops_trans_conta_solv_seq'),
			nr_seq_diops_conta_ans_solv_w,
			cd_conta_contabil,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_anterior,
			ds_origem_conta
		from	diops_trans_conta_solv
		where	nr_seq_trans_conta	= nr_seq_trans_conta_w;
		end;
	end loop;
	close C02;
elsif (nm_regra_p = 'Idade saldo') then
	open C03;
	loop
	fetch C03 into	
		nr_seq_trans_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		select	nextval('diops_idade_saldo_seq')
		into STRICT	nr_seq_idade_saldo_w
		;
		
		insert into diops_idade_saldo(nr_sequencia,
			ie_idade_saldo_passivo,
			ie_idade_saldo_ativo,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_transacao,
			ie_vencimento_ativo,
			nr_seq_anterior)
		SELECT	nr_seq_idade_saldo_w,
			ie_idade_saldo_passivo,
			ie_idade_saldo_ativo,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_trans_dest_p,
			ie_vencimento_ativo,
			nr_seq_anterior
		from	diops_idade_saldo
		where	nr_sequencia	= nr_seq_trans_conta_w;
		
		insert into diops_conta_idade_saldo(nr_sequencia,
			nr_seq_idade_saldo,
			cd_conta_contabil,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_anterior,
			cd_ans)
		SELECT	nextval('diops_conta_idade_saldo_seq'),
			nr_seq_idade_saldo_w,
			cd_conta_contabil,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_anterior,
			cd_ans
		from	diops_conta_idade_saldo
		where	nr_seq_idade_saldo	= nr_seq_trans_conta_w;
		end;
	end loop;
	close C03;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE diops_copiar_regras ( nr_seq_trans_orig_p bigint, nr_seq_trans_dest_p bigint, nm_regra_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

