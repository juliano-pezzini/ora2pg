-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_recurso_glosa ( nm_usuario_p usuario.nm_usuario%type, ie_acao_p text, nr_seq_prestador_p pls_prestador.nr_sequencia%type default null, nr_seq_protocolo_rec_p pls_rec_glosa_protocolo.nr_sequencia%type default null, nr_seq_prestador_web_p pls_rec_glosa_lote.nr_seq_prestador_web%type default null, ie_tipo_prest_p text default 'PE', cd_estabelecimento_p estabelecimento.cd_estabelecimento%type DEFAULT NULL, nr_seq_protocolo_p INOUT pls_rec_glosa_protocolo.nr_sequencia%type DEFAULT NULL, ds_msg_abort_p INOUT text DEFAULT NULL) AS $body$
DECLARE


/* ie_acao_p
	G = Gerar recurso de glosa
	C = Cancelar gera??o do recurso */
	
nr_seq_conta_w			bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
ie_tipo_inclusao_w		varchar(255);
nr_seq_lote_glosa_w		bigint;
nr_seq_protocolo_glosa_w	bigint;
nr_seq_conta_glosa_w		bigint;
nr_seq_proc_glosa_w		bigint;
nr_seq_mat_glosa_w		bigint;
nr_seq_motivo_glosa_w		bigint;
qt_rec_glosa_tiss_w		bigint;
vl_glosa_conta_w		double precision;
vl_glosa_proc_w			double precision;
vl_glosa_mat_w			double precision;
vl_recursado_w			w_pls_recurso_glosa.vl_recursado%type;
ds_justificativa_w		w_pls_recurso_glosa.ds_justificativa_prest%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
qt_registros_w			integer;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type := wheb_usuario_pck.get_cd_estabelecimento;
ie_processo_analise_recurso_w	pls_parametros_rec_glosa.ie_processo_analise_recurso%type;
ds_msg_abort_w			varchar(255);
cd_guia_w			pls_conta.cd_guia%type;
nr_seq_tipo_conta_w		pls_conta.nr_seq_tipo_conta%type;
ie_cobranca_prevista_proc_w	pls_conta_proc.ie_cobranca_prevista%type;
ie_cobranca_prevista_mat_w	pls_conta_mat.ie_cobranca_prevista%type;
ie_tipo_prest_w			varchar(5) := coalesce(ie_tipo_prest_p,'PE');
nr_seq_proc_rec_w		pls_rec_glosa_proc.nr_sequencia%type;
nr_seq_mat_rec_w		pls_rec_glosa_mat.nr_sequencia%type;
nr_seq_item_tiss_mat_w	pls_rec_glosa_mat.nr_seq_item_tiss%type;
nr_seq_item_tiss_proc_w	pls_rec_glosa_proc.nr_seq_item_tiss%type;
qt_itens_conta_rec_w	integer := 0;
ds_log_call_w			varchar(4000);
ds_log_w				varchar(255);

C00 CURSOR FOR
	SELECT	distinct b.nr_seq_prestador_exec
	from	w_pls_recurso_glosa a,
		pls_conta b
	where	a.nr_seq_conta		= b.nr_sequencia
	and	a.nm_usuario		= nm_usuario_p
	and	coalesce(nr_seq_protocolo_rec_p::text, '') = ''
	
UNION ALL
 /* Tratamento para entrar no cursor nos casos onde houver a inser??o pelo portal Web */
	SELECT	0
	
	where	(nr_seq_protocolo_rec_p IS NOT NULL AND nr_seq_protocolo_rec_p::text <> '');

C01 CURSOR FOR
	SELECT	distinct a.nr_seq_conta
	from	w_pls_recurso_glosa a,
		pls_conta b,
		pls_protocolo_conta p,
		pls_conta_medica_resumo r
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_protocolo	= p.nr_sequencia
	and	r.nr_seq_conta		= b.nr_sequencia
	and	a.nm_usuario		= nm_usuario_p
	and	((ie_tipo_prest_w = 'PA' AND p.nr_seq_prestador = nr_seq_prestador_w)
	or	(ie_tipo_prest_w = 'PG' AND r.nr_seq_prestador_pgto = nr_seq_prestador_w)
	or	(ie_tipo_prest_w = 'PE' AND b.nr_seq_prestador_exec = nr_seq_prestador_w));
		
C02 CURSOR FOR
	SELECT	nr_seq_conta_proc,
		nr_seq_conta_mat,
		ie_tipo_inclusao,
		ds_justificativa_prest,
		vl_recursado,
		(	SELECT 	max(nr_seq_item_tiss)
			from 	pls_conta_mat_regra 
			where 	nr_sequencia = a.nr_seq_conta_mat) nr_seq_item_tiss_mat,
		(	select 	max(nr_seq_item_tiss) 
			from 	pls_conta_proc_regra 
			where 	nr_sequencia = a.nr_seq_conta_proc) nr_seq_item_tiss_proc
	from	w_pls_recurso_glosa a
	where	nm_usuario	= nm_usuario_p
	and	nr_seq_conta	= nr_seq_conta_w
	and ((nr_seq_conta_proc IS NOT NULL AND nr_seq_conta_proc::text <> '') or (nr_seq_conta_mat IS NOT NULL AND nr_seq_conta_mat::text <> ''));

C03 CURSOR FOR
	SELECT	a.nr_seq_motivo_glosa
	from	pls_conta_glosa_ocorrencia_v a
	where	((nr_seq_proc	= nr_seq_conta_proc_w AND nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '')
	or	(nr_seq_mat	= nr_seq_conta_mat_w AND nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> ''))
	and	a.ie_situacao = 'A'
	and	(a.nr_seq_motivo_glosa IS NOT NULL AND a.nr_seq_motivo_glosa::text <> '')
	group by a.nr_seq_motivo_glosa;

C04 CURSOR FOR
	SELECT	a.nr_seq_motivo_glosa
	from	pls_conta_glosa_ocorrencia_v a
	where	coalesce(nr_seq_proc::text, '') = ''
	and	coalesce(nr_seq_mat::text, '') = ''
	and	nr_seq_conta	= nr_seq_conta_w
	and	a.ie_situacao = 'A'
	and	(a.nr_seq_motivo_glosa IS NOT NULL AND a.nr_seq_motivo_glosa::text <> '')
	group by a.nr_seq_motivo_glosa;
	
C05 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_rec_glosa_conta
	where	nr_seq_protocolo = nr_seq_protocolo_glosa_w
	and	ie_status	 != '3';

procedure verifica_qtdes_itens( nr_seq_conta_p	pls_conta.nr_sequencia%type) is

ds_log_call_w	varchar(1500);
ds_log_w 	varchar(4000);

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		coalesce(vl_glosa, 0) vl_glosa,
	       (	SELECT 	sum(coalesce(x.vl_recursado, 0))
			from	pls_rec_glosa_proc x
			where	x.nr_seq_conta_proc = a.nr_sequencia	
			and 	x.ie_status in ('1','2','3')
		) vl_recursado_integrado,
		(	select 	sum(coalesce(x.vl_acatado, 0))
			from	pls_rec_glosa_proc x
			where	x.nr_seq_conta_proc = a.nr_sequencia	
			and 	x.ie_status in ('1','2','3')
		) vl_acatado,
		(
			select	coalesce(sum(y.vl_recursado),0)
			from	pls_rec_glosa_proc_imp y
			where	y.nr_seq_conta_proc = a.nr_sequencia
			and	not exists (	select	1
						from	pls_rec_glosa_proc x
						where	x.nr_seq_conta_proc_imp = y.nr_sequencia)
		) vl_recursado_importacao	
	from	pls_conta_proc a
	where	a.nr_seq_conta = nr_seq_conta_p
	;
	
C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		coalesce(vl_glosa, 0) vl_glosa,
	       (	SELECT 	sum(coalesce(x.vl_recursado, 0))
			from	pls_rec_glosa_mat x
			where	x.nr_seq_conta_mat = a.nr_sequencia	
			and 	x.ie_status in ('1','2','3')
		) vl_recursado_integrado,
		(	select 	sum(coalesce(x.vl_acatado, 0))
			from	pls_rec_glosa_mat x
			where	x.nr_seq_conta_mat = a.nr_sequencia	
			and 	x.ie_status in ('1','2','3')
		) vl_acatado,
		(
			select	coalesce(sum(y.vl_recursado),0)
			from	pls_rec_glosa_mat_imp y
			where	y.nr_seq_material = a.nr_sequencia
			and	not exists (	select	1
						from	pls_rec_glosa_mat x
						where	x.nr_seq_conta_mat_imp = y.nr_sequencia)
		) vl_recursado_importacao	
	from	pls_conta_mat a
	where	a.nr_seq_conta = nr_seq_conta_p;
	
BEGIN
		
	ds_log_call_w := substr(	' Funcao ativa : '|| obter_funcao_ativa || chr(13) ||chr(10)||
							' CallStack: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,1500);
	

	for r_c01_w in C01 loop
	
		ds_log_w := ' vl rec integrado = '||r_c01_w.vl_recursado_integrado||' vl acatado = '||r_c01_w.vl_acatado||
			' vl rec importacao= '||r_c01_w.vl_recursado_importacao||' vl glosa origem = '||r_c01_w.vl_glosa;
		ds_log_w := ds_log_w ||' -> '||ds_log_call_w;
		
		--nr_seq_conta, nr_seq_conta_proc, nr_seq_conta_mat referem-se aos registros da pls_conta, pls_conta_proc e pls_conta_mat
		insert into pls_rec_glosa_item_log(nr_sequencia, nr_seq_conta, nr_seq_conta_proc, nr_seq_conta_mat, ds_log,
			dt_atualizacao, dt_atualizacao_nrec, nm_usuario, nm_Usuario_nrec)
		values ( nextval('pls_rec_glosa_item_log_seq'), nr_seq_conta_p, r_c01_w.nr_sequencia, null, ds_log_w,
			clock_timestamp(), clock_timestamp(), nm_Usuario_p, nm_usuario_p);
	
	end loop;

	for r_c02_w in C02 loop
	
		ds_log_w := ' vl rec integrado = '||r_c02_w.vl_recursado_integrado||' vl acatado = '||r_c02_w.vl_acatado||
		' vl rec importacao= '||r_c02_w.vl_recursado_importacao||' vl glosa origem = '||r_c02_w.vl_glosa;
		ds_log_w := ds_log_w ||' -> '||ds_log_call_w;
	
		--nr_seq_conta, nr_seq_conta_proc, nr_seq_conta_mat referem-se aos registros da pls_conta, pls_conta_proc e pls_conta_mat
		insert into pls_rec_glosa_item_log(nr_sequencia, nr_seq_conta, nr_seq_conta_proc, nr_seq_conta_mat, ds_log,
						dt_atualizacao, dt_atualizacao_nrec, nm_usuario, nm_Usuario_nrec)
		values ( nextval('pls_rec_glosa_item_log_seq'), nr_seq_conta_p, null, r_c02_w.nr_sequencia, ds_log_w,
			clock_timestamp(), clock_timestamp(), nm_usuario_p,nm_usuario_p);
		
	end loop;
	
end;	
	
	
begin

if (ie_acao_p = 'G') then
	select	coalesce(max(ie_processo_analise_recurso),'PRG')
	into STRICT	ie_processo_analise_recurso_w
	from	pls_parametros_rec_glosa
	where	cd_estabelecimento	= cd_estabelecimento_p;

	open C00;
	loop
	fetch C00 into	
		nr_seq_prestador_w;
	EXIT WHEN NOT FOUND; /* apply on C00 */
		begin
		nr_seq_protocolo_glosa_w := nr_seq_protocolo_rec_p;
		
		if (coalesce(nr_seq_protocolo_glosa_w::text, '') = '') then

			insert into pls_rec_glosa_lote(nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
							nm_usuario_nrec, nr_seq_prestador_web, dt_envio_lote, cd_estabelecimento)
						values (nextval('pls_rec_glosa_lote_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(),
							nm_usuario_p, nr_seq_prestador_web_p, null, cd_estabelecimento_p)
						returning nr_sequencia into nr_seq_lote_glosa_w;

			insert into    pls_rec_glosa_protocolo(	nr_sequencia, nr_seq_lote, dt_atualizacao,
								nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
								nr_seq_xml_arquivo, ie_status, ie_situacao, 
								dt_liberacao_pag, nr_seq_prestador, ie_origem_solic,
								dt_apresentacao_lote, dt_competencia_lote, cd_estabelecimento)
							values (	nextval('pls_rec_glosa_protocolo_seq'), nr_seq_lote_glosa_w, clock_timestamp(), 
								nm_usuario_p, clock_timestamp(), nm_usuario_p, 
								null, '2', 'D', 
								null, coalesce(nr_seq_prestador_p,nr_seq_prestador_w), 'M',
								clock_timestamp(), clock_timestamp(), cd_estabelecimento_p)
							returning nr_sequencia into nr_seq_protocolo_glosa_w;
		end if;
		
		if (coalesce(nr_seq_prestador_w,0) = 0) then
			nr_seq_prestador_w	:= nr_seq_prestador_p;
		end if;	
		
		for cr_01 in C01 loop
			begin
			qt_itens_conta_rec_w := 0;
			nr_seq_conta_w := cr_01.nr_seq_conta;

			select	max(nr_sequencia)
			into STRICT	nr_seq_conta_glosa_w
			from	pls_rec_glosa_conta
			where	nr_seq_conta		= nr_seq_conta_w
			and	nr_seq_protocolo	= nr_seq_protocolo_glosa_w;
			
			--  Edgar 06/02/2015, somente gerar uma nova conta se esta n?o estiver dentro deste protocolo
			if (coalesce(nr_seq_conta_glosa_w::text, '') = '') then
				ds_msg_abort_w := null;
				ds_msg_abort_w := pls_consistir_inclusao_recurso(nr_seq_conta_w, nm_usuario_p, nr_seq_protocolo_glosa_w, nr_seq_lote_glosa_w, ds_msg_abort_w);
				
				if (ds_msg_abort_w IS NOT NULL AND ds_msg_abort_w::text <> '') then
					delete from pls_rec_glosa_protocolo where nr_sequencia = nr_seq_protocolo_glosa_w;
					goto Final;
				end if;
				
				select	max(ds_justificativa_prest)
				into STRICT	ds_justificativa_w
				from	w_pls_recurso_glosa
				where	nr_seq_conta = nr_seq_conta_w
				and	ie_tipo_inclusao = 'C';
				
				if (nr_seq_conta_w IS NOT NULL AND nr_seq_conta_w::text <> '') then
					select	coalesce(vl_glosa,0),
						cd_guia,
						nr_seq_tipo_conta
					into STRICT	vl_glosa_conta_w,
						cd_guia_w,
						nr_seq_tipo_conta_w
					from	pls_conta
					where	nr_sequencia = nr_seq_conta_w;
				end if;	
				
				insert into pls_rec_glosa_conta(nr_sequencia, nr_seq_protocolo, nr_seq_conta,
								dt_atualizacao, nm_usuario, dt_atualizacao_nrec, 
								nm_usuario_nrec, nr_seq_conta_imp, ds_justificativa_oper, 
								ie_status, vl_total_recursado, ds_justificativa_prest,
								cd_guia_ref, nr_seq_tipo_conta)
							values (nextval('pls_rec_glosa_conta_seq'), nr_seq_protocolo_glosa_w, nr_seq_conta_w, 
								clock_timestamp(), nm_usuario_p, clock_timestamp(),
								nm_usuario_p, null, null, 
								'1', vl_glosa_conta_w, ds_justificativa_w,  
								cd_guia_w, nr_seq_tipo_conta_w)
							returning nr_sequencia into nr_seq_conta_glosa_w;
			end if;
			
			

			open C02;
			loop
			fetch C02 into	
				nr_seq_conta_proc_w,
				nr_seq_conta_mat_w,
				ie_tipo_inclusao_w,
				ds_justificativa_w,
				vl_recursado_w,
				nr_seq_item_tiss_mat_w,
				nr_seq_item_tiss_proc_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				nr_seq_proc_glosa_w	:= null;
				nr_seq_mat_glosa_w	:= null;
				
				if (ie_tipo_inclusao_w = 'P') then					
					if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
						select	vl_glosa,
							ie_cobranca_prevista
						into STRICT	vl_glosa_proc_w,
							ie_cobranca_prevista_proc_w
						from	pls_conta_proc
						where	nr_sequencia = nr_seq_conta_proc_w;
					end if;
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_proc_rec_w
					from	pls_rec_glosa_proc
					where	nr_seq_conta_rec	= nr_seq_conta_glosa_w
					and	nr_seq_conta_proc	= nr_seq_conta_proc_w;
					
					if (coalesce(nr_seq_proc_rec_w::text, '') = '') then
						if (vl_recursado_w > vl_glosa_proc_w) then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(391790); -- Valor recursado n?o pode ser maior que valor glosado, favor verificar os itens.
							
						elsif (vl_recursado_w <= 0) then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(391792); -- Valor recursado n?o pode ser menor ou igual a zero, favor verificar os itens.
						end if;
						
						insert into pls_rec_glosa_proc(	nr_sequencia, nr_seq_conta_rec, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
										nr_seq_conta_proc, ie_status, nr_seq_pag_prest, nr_seq_evento, nr_seq_lote_pgto, vl_recursado , ds_justificativa_prest,
										vl_acatado, ie_cobranca_prevista, nr_seq_item_tiss )
									values (	nextval('pls_rec_glosa_proc_seq'), nr_seq_conta_glosa_w, clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
										nr_seq_conta_proc_w, '1', null, null, null, coalesce(vl_recursado_w, vl_glosa_proc_w), ds_justificativa_w,
										0, ie_cobranca_prevista_proc_w, nr_seq_item_tiss_proc_w )
									returning nr_sequencia into nr_seq_proc_glosa_w;
					else
						update	pls_rec_glosa_proc
						set	dt_atualizacao = clock_timestamp(),
							nm_usuario = nm_usuario_p,
							vl_recursado = coalesce(vl_recursado_w, vl_glosa_proc_w),
							ds_justificativa_prest = ds_justificativa_w,
							vl_acatado = 0,
							ie_cobranca_prevista = ie_cobranca_prevista_proc_w
						where	nr_sequencia = nr_seq_proc_rec_w;
					end if;
					
				elsif (ie_tipo_inclusao_w = 'M') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_mat_rec_w
					from	pls_rec_glosa_mat
					where	nr_seq_conta_rec	= nr_seq_conta_glosa_w
					and	nr_seq_conta_mat	= nr_seq_conta_mat_w;
				
					if (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
						select	vl_glosa,
							ie_cobranca_prevista
						into STRICT	vl_glosa_mat_w,
							ie_cobranca_prevista_mat_w
						from	pls_conta_mat
						where	nr_sequencia = nr_seq_conta_mat_w;
					end if;
				
					if (coalesce(nr_seq_mat_rec_w::text, '') = '') then
						if (vl_recursado_w > vl_glosa_mat_w) then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(391790); -- Valor recursado n?o pode ser maior que valor glosado, favor verificar os itens.
							
						elsif (vl_recursado_w <= 0) then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(391792); -- Valor recursado n?o pode ser menor ou igual a zero, favor verificar os itens.
						end if;
						
						insert into pls_rec_glosa_mat(	nr_sequencia, nr_seq_conta_rec, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
										nr_seq_conta_mat, ie_status, nr_seq_pag_prest, nr_seq_evento, nr_seq_lote_pgto, vl_recursado, ds_justificativa_prest,
										vl_acatado, ie_cobranca_prevista, nr_seq_item_tiss )
									values (	nextval('pls_rec_glosa_mat_seq'), nr_seq_conta_glosa_w, clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
										nr_seq_conta_mat_w, '1', null, null, null, coalesce(vl_recursado_w, vl_glosa_mat_w), ds_justificativa_w,
										0, ie_cobranca_prevista_mat_w, nr_seq_item_tiss_mat_w )
									returning nr_sequencia into nr_seq_mat_glosa_w;
					else
						update	pls_rec_glosa_mat
						set	dt_atualizacao = clock_timestamp(),
							nm_usuario = nm_usuario_p,
							vl_recursado = coalesce(vl_recursado_w, vl_glosa_proc_w),
							ds_justificativa_prest = ds_justificativa_w,
							vl_acatado = 0,
							ie_cobranca_prevista = ie_cobranca_prevista_proc_w
						where	nr_sequencia = nr_seq_mat_rec_w;
					end if;
				end if;
				
				/* Cursor para a inclus?o de glosas de procedimentos e materiais */

				if	((nr_seq_mat_glosa_w IS NOT NULL AND nr_seq_mat_glosa_w::text <> '') or (nr_seq_proc_glosa_w IS NOT NULL AND nr_seq_proc_glosa_w::text <> '')) then
					open C03;
					loop
					fetch C03 into	
						nr_seq_motivo_glosa_w;
					EXIT WHEN NOT FOUND; /* apply on C03 */
						begin
						
						insert into  pls_rec_glosa_glosas(nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_proc_rec,
										   nr_seq_mat_rec, nr_seq_proc_partic_rec, nr_seq_conta_rec, nr_seq_glosa_imp, nr_seq_motivo_glosa)
									    values (nextval('pls_rec_glosa_glosas_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p, nr_seq_proc_glosa_w,
										   nr_seq_mat_glosa_w, null, null, null, nr_seq_motivo_glosa_w);
						end;
					end loop;
					close C03;
				end if;
				end;
			end loop;
			close C02;						
			
			/* Incluir as glosas de contas */

			open C04;
			loop
			fetch C04 into	
				nr_seq_motivo_glosa_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin				
				insert into pls_rec_glosa_glosas(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
									nm_usuario_nrec, nr_seq_conta_rec, nr_seq_motivo_glosa)
							values (	nextval('pls_rec_glosa_glosas_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(),
									nm_usuario_p, nr_seq_conta_glosa_w, nr_seq_motivo_glosa_w);
				end;
			end loop;
			close C04;

			CALL pls_atualizar_valor_recurso(nr_seq_conta_glosa_w,'C',nm_usuario_p);
			
			--Verifica se j? existe informa??o da conta de recurso no monitoramento.
			select	count(1)
			into STRICT	qt_rec_glosa_tiss_w
			from	pls_monitor_tiss_alt
			where	nr_seq_conta_rec = nr_seq_conta_glosa_w
			and	ie_tipo_evento = 'FR';
			
			--Somente grava as informa??es para o monitoramento caso seja digita??o pelo Tasy
			if (coalesce(qt_rec_glosa_tiss_w,0) = 0) and (coalesce(nr_seq_prestador_web_p::text, '') = '') then
			
				CALL pls_tiss_gravar_log_monitor(	'FR', nr_seq_conta_w, nr_seq_conta_proc_w,
								nr_seq_conta_mat_w, nr_seq_conta_glosa_w, null,
								null, null, null,
								null, null, nm_usuario_p,
								clock_timestamp());
			end if;	
			
			end;
			
			--Se criou conta de recurso sem nenhum item, grava hist?rico
			if (nr_seq_conta_glosa_w IS NOT NULL AND nr_seq_conta_glosa_w::text <> '') then
			
				select count(1)
				into STRICT qt_itens_conta_rec_w
				from (	SELECT 	1
							from 	pls_rec_glosa_proc 
							where 	nr_seq_conta_rec = nr_seq_conta_glosa_w
							
union all

							SELECT 	1 
							from 	pls_rec_glosa_mat 
							where 	nr_seq_conta_rec = nr_seq_conta_glosa_w) alias2;
							
				if (qt_itens_conta_rec_w = 0 ) then
				
					ds_log_w := 'Gerada conta de recurso sem itens - conta recurso = '||nr_seq_conta_glosa_w;
					ds_log_call_w := substr(	' Fun??o ativa : '|| obter_funcao_ativa || chr(13) ||chr(10)||
											' CallStack: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,1500);

					insert	into	pls_hist_rec_glosa( 	nr_sequencia, ds_log, dt_atualizacao,
								nm_usuario, ds_call_stack, nr_seq_protocolo,
								nr_seq_conta_rec, nr_seq_mat_rec, nr_seq_proc_rec,
								nr_seq_mot_lib_glosa)
						values (	nextval('pls_hist_rec_glosa_seq'), ds_log_w, clock_timestamp(), 
								nm_usuario_p, ds_log_call_w, nr_seq_protocolo_glosa_w,
								nr_seq_conta_glosa_w, null, null,
								null);
				
				end if;
			
			end if;
			
			verifica_qtdes_itens( nr_seq_conta_w);
			
		end loop; --fim cursor C01
		
		if (coalesce(nr_seq_protocolo_rec_p::text, '') = '') then
			for r_C05_w in C05 loop			
				CALL pls_inserir_item_pag_rec_glosa(r_C05_w.nr_sequencia,nm_usuario_p);	
			end loop;
		end if;
		
		-- Gerar an?lise do recurso de glosa, OPS - An?lise de Discuss?o da Contesta??o e Recurso de Glosa
		if (ie_processo_analise_recurso_w = 'ARG') then
			CALL pls_gerar_lote_analise_rec( nr_seq_protocolo_glosa_w, null, cd_estabelecimento_p, nm_usuario_p);
		end if;
		
		end;
	end loop;
	close C00;
end if;

delete	from w_pls_recurso_glosa
where	nm_usuario = nm_usuario_p;

<<Final>>
nr_seq_protocolo_p	:= nr_seq_protocolo_glosa_w;
ds_msg_abort_p		:= substr(ds_msg_abort_w, 1, 255);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_recurso_glosa ( nm_usuario_p usuario.nm_usuario%type, ie_acao_p text, nr_seq_prestador_p pls_prestador.nr_sequencia%type default null, nr_seq_protocolo_rec_p pls_rec_glosa_protocolo.nr_sequencia%type default null, nr_seq_prestador_web_p pls_rec_glosa_lote.nr_seq_prestador_web%type default null, ie_tipo_prest_p text default 'PE', cd_estabelecimento_p estabelecimento.cd_estabelecimento%type DEFAULT NULL, nr_seq_protocolo_p INOUT pls_rec_glosa_protocolo.nr_sequencia%type DEFAULT NULL, ds_msg_abort_p INOUT text DEFAULT NULL) FROM PUBLIC;

