-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_retorno_per_protocolo ( nr_seq_retorno_p bigint, ie_liberar_repasse_p text, ie_analisada_p text, nr_convenio_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_periodo_conta_p text, ds_mensagem_p INOUT text, ie_guias_considerar_p text) AS $body$
DECLARE

 
/* cd_estabelecimento_w	number(15); */
 
nr_interno_conta_w		bigint;
cd_autorizacao_w		varchar(255);
vl_guia_w		double precision;
nr_sequencia_w		bigint;
vl_pago_w		double precision;
vl_glosado_w		double precision;
dt_inicial_w		timestamp;
dt_final_w		timestamp;
cd_convenio_retorno_w	bigint;
ie_tipo_convenio_w		bigint;
vl_conta_w		double precision;
nr_titulo_w 		bigint;
vl_titulo_w 		double precision;
vl_saldo_titulo_w		double precision;
qt_itens_retorno_w		integer;
ie_primeiro_item_w		varchar(255);
nr_seq_protocolo_w	bigint;
vl_glosa_grg_w		double precision;
vl_pago_grg_w		double precision;
ie_libera_repasse_w	varchar(5);
ie_contas_canc_estornadas_w	varchar(10);
ie_permitecontasoutroretorno_w	varchar(1);
ie_estab_financ_w		varchar(10);
ds_msg_conta_outro_ret_w	varchar(2000);
ie_data_referencia_protocolo_w	varchar(2);
ie_insere_guia_w		varchar(1) := 'S';

c01 CURSOR FOR 
SELECT	b.nr_interno_conta, 
	b.cd_autorizacao, 
	b.vl_guia, 
	a.vl_conta, 
	obter_tipo_convenio(cd_convenio), 
	c.nr_seq_protocolo, 
	(obter_titulo_conta_guia(a.nr_interno_conta,b.cd_autorizacao,nr_seq_retorno_p,c.nr_seq_protocolo))::numeric  
from	conta_paciente_guia b, 
	protocolo_convenio c, 
	conta_paciente a 
where	a.nr_interno_conta		= b.nr_interno_conta 
and	c.nr_seq_protocolo		= a.nr_seq_protocolo 
and	a.ie_status_acerto		= 2 
and	coalesce(a.ie_cancelamento::text, '') = '' 
and	coalesce(b.dt_convenio::text, '') = '' 
and	a.cd_estabelecimento	= c.cd_estabelecimento 
and	c.cd_convenio		= cd_convenio_retorno_w 
and	coalesce(a.nr_conta_convenio,0)	= CASE WHEN coalesce(nr_convenio_p,0)=0 THEN  coalesce(a.nr_conta_convenio,0)  ELSE nr_convenio_p END  
and	((ie_data_referencia_protocolo_w = 'R' and c.dt_mesano_referencia between coalesce(dt_inicial_w, clock_timestamp() + interval '1 days') and coalesce(dt_final_w, clock_timestamp() - interval '1 days')) 
	or (ie_data_referencia_protocolo_w = 'V' and c.dt_vencimento between coalesce(dt_inicial_w, clock_timestamp() + interval '1 days') and coalesce(dt_final_w, clock_timestamp() - interval '1 days')) 
	or (ie_data_referencia_protocolo_w = 'VT' and trunc(Obter_data_venc_titulo(a.nr_interno_conta,a.nr_seq_protocolo)) between trunc(coalesce(dt_inicial_w, clock_timestamp() + interval '1 days')) and trunc(coalesce(dt_final_w, clock_timestamp() - interval '1 days')))) 
and	((a.cd_estabelecimento	= cd_estabelecimento_p) or ( ie_estab_financ_w	= 'S' and obter_estab_financeiro(a.cd_estabelecimento) = cd_estabelecimento_p)) 
and	'N'			= coalesce(ie_periodo_conta_p,'N') 
and (coalesce(a.ie_cancelamento,'1') not in ('C', 'E') or (coalesce(ie_contas_canc_estornadas_w,'S') = 'S')) 

union
 
SELECT	b.nr_interno_conta, 
	b.cd_autorizacao, 
	b.vl_guia, 
	a.vl_conta, 
	obter_tipo_convenio(a.cd_convenio_parametro), 
	a.nr_seq_protocolo, 
	(obter_titulo_conta_guia(a.nr_interno_conta,b.cd_autorizacao,nr_seq_retorno_p,a.nr_seq_protocolo))::numeric  
from	conta_paciente_guia b, 
	conta_paciente a 
where	a.nr_interno_conta		= b.nr_interno_conta 
and	a.ie_status_acerto		= 2 
and	coalesce(a.ie_cancelamento::text, '') = '' 
and	coalesce(b.dt_convenio::text, '') = '' 
and	a.cd_convenio_parametro	= cd_convenio_retorno_w 
and	coalesce(a.nr_conta_convenio,0)	= CASE WHEN coalesce(nr_convenio_p,0)=0 THEN  coalesce(a.nr_conta_convenio,0)  ELSE nr_convenio_p END  
and	((a.cd_estabelecimento	= cd_estabelecimento_p) or (ie_estab_financ_w	= 'S' and obter_estab_financeiro(a.cd_estabelecimento) = cd_estabelecimento_p)) 
and	a.dt_mesano_referencia	between coalesce(dt_inicial_w, clock_timestamp() + interval '1 days') and coalesce(dt_final_w, clock_timestamp() - interval '1 days') 
and	'S'			= coalesce(ie_periodo_conta_p,'N') 
and (coalesce(a.ie_cancelamento,'-1') not in ('C', 'E') or (coalesce(ie_contas_canc_estornadas_w,'S') = 'S'));


BEGIN 
 
select	dt_inicial, 
	dt_final, 
	cd_convenio 
into STRICT	dt_inicial_w, 
	dt_final_w, 
	cd_convenio_retorno_w 
from	convenio_retorno 
where	nr_sequencia	= nr_seq_retorno_p;
 
ie_contas_canc_estornadas_w := obter_param_usuario(27, 150, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_contas_canc_estornadas_w);
ie_permitecontasoutroretorno_w := obter_param_usuario(27, 100, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_permitecontasoutroretorno_w);
ie_estab_financ_w := obter_param_usuario(27, 277, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_estab_financ_w);
ie_data_referencia_protocolo_w := obter_param_usuario(27, 288, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_data_referencia_protocolo_w);
 
ie_primeiro_item_w		:= 'S';
ds_msg_conta_outro_ret_w	:= null;
 
open c01;
loop 
fetch c01 into 
	nr_interno_conta_w, 
	cd_autorizacao_w, 
	vl_guia_w, 
	vl_conta_w, 
	ie_tipo_convenio_w, 
	nr_seq_protocolo_w, 
	nr_titulo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
 
	if (ie_tipo_convenio_w = 3) and (vl_guia_w < vl_conta_w) then 
		CALL gerar_conta_paciente_guia(nr_interno_conta_w, 2);
		CALL atualizar_resumo_conta(nr_interno_conta_w, 2);
	end if;
 
	select	coalesce(sum(vl_pago),0), 
		coalesce(sum(vl_glosado),0) --bruna os33187 - tratar para nao incluir o valor glosado no momento da inclusão do protocolo 
	into STRICT	vl_pago_w, 
		vl_glosado_w 
	from	convenio_retorno_item b, 
		convenio_retorno a 
	where	a.nr_sequencia		= b.nr_seq_retorno 
	and	a.cd_convenio		= cd_convenio_retorno_w 
	and	a.cd_estabelecimento	= cd_estabelecimento_p 
	and	b.nr_interno_conta		= nr_interno_conta_w 
	and	b.cd_autorizacao		= cd_autorizacao_w;
--	and	a.ie_status_retorno	= 'F'; Comentado Bruna, para consistir em todos os casos 
 
	vl_pago_grg_w	:= coalesce((obter_valor_guia_grg(nr_interno_conta_w, cd_autorizacao_w, 'VP'))::numeric ,0);
	vl_glosa_grg_w	:= coalesce((obter_valor_guia_grg(nr_interno_conta_w, cd_autorizacao_w, 'VG'))::numeric ,0);
 
	select	count(*) 
	into STRICT	qt_itens_retorno_w 
	from	convenio_retorno_item b, 
		convenio_retorno a 
	where	a.nr_sequencia		= b.nr_seq_retorno 
	and	a.cd_convenio		= cd_convenio_retorno_w 
	and	a.cd_estabelecimento	= cd_estabelecimento_p 
	and	b.nr_interno_conta	= nr_interno_conta_w 
	and	b.cd_autorizacao	= cd_autorizacao_w;
	 
	if (coalesce(ie_guias_considerar_p,'0') <> '0') then 
		ie_insere_guia_w	:= 'N';
	end if;
	 
	if (coalesce(ie_guias_considerar_p,'0') = '1') and --Somente guias integrais (Valor Guia = Valor Saldo) 
		(vl_pago_w = 0 and vl_glosado_w = 0 and vl_pago_grg_w = 0 and vl_glosa_grg_w = 0) then --Indica que a guia está integra, ainda não foi paga e nem glosada em outros retornos. 
		ie_insere_guia_w	:= 'S';
	elsif (coalesce(ie_guias_considerar_p,'0') = '2') and --Somente guias recursadas (Valor guia <> Valor Saldo) 
		(vl_pago_w <> 0 or vl_glosado_w <> 0 or vl_pago_grg_w <> 0 or vl_glosa_grg_w <> 0) then 
		ie_insere_guia_w	:= 'S';
	end if;
 
	if (qt_itens_retorno_w = 0) then 
		 
 
		select	coalesce(sum(vl_saldo_titulo),0) 
		into STRICT	vl_saldo_titulo_w 
		from (SELECT coalesce(vl_saldo_titulo,0) vl_saldo_titulo 
			from titulo_receber 
			where (nr_documento IS NOT NULL AND nr_documento::text <> '') 
			 and nr_documento <> nr_interno_conta_w 
			 and nr_interno_conta = nr_interno_conta_w 
			
union
 
			SELECT coalesce(vl_saldo_titulo,0) vl_saldo_titulo 
			from titulo_receber 
			where (nr_interno_conta_w IS NOT NULL AND nr_interno_conta_w::text <> '') 
			 and ((nr_documento = nr_interno_conta_w) or (coalesce(nr_documento::text, '') = '')) 
			 and nr_interno_conta = nr_interno_conta_w 
			
union
 
			select coalesce(vl_saldo_titulo,0) vl_saldo_titulo 
			from titulo_receber 
			where nr_seq_protocolo = nr_seq_protocolo_w 
		 	and coalesce(nr_interno_conta::text, '') = '') alias13;
 
		if (vl_saldo_titulo_w = 0) then 
 
			if (ie_primeiro_item_w = 'S') then 
	 
				--ds_mensagem_p	:= substr('Guias não possuem saldo: ' || cd_autorizacao_w, 1, 255); 
				ds_mensagem_p	:= substr(wheb_mensagem_pck.get_texto(304128, 'CD_AUTORIZACAO=' || cd_autorizacao_w), 1, 255);						
			else 
				ds_mensagem_p	:= substr(ds_mensagem_p || ',' || cd_autorizacao_w, 1, 255);
			end if;
			if (length(ds_mensagem_p) > 125) and (position(chr(13) in ds_mensagem_p) = 0) then 
				ds_mensagem_p	:= ds_mensagem_p || chr(13);
			end if;
			ie_primeiro_item_w := 'N';
		end if;
	end if;
 
 
	/* lhalves, alterada consistência para não abortar, para continuar o processo e apresentar mensagem no final 
	if	(nvl(ie_permitecontasoutroretorno_w,'S') = 'N')	and 
		(obter_conta_outro_retorno(nr_seq_retorno_p,nr_interno_conta_w,cd_autorizacao_w) <> 0) then 
		--Esta conta já está vinculada a outro retorno em aberto. Parâmetro [100] 
		wheb_mensagem_pck.exibir_mensagem_abort(255816); 
	end if;*/
 
	 
	if (coalesce(ie_insere_guia_w,'S') = 'S') then		 
		if (coalesce(ie_permitecontasoutroretorno_w,'S') = 'S') or (obter_conta_outro_retorno(nr_seq_retorno_p,nr_interno_conta_w,cd_autorizacao_w) = 0)then 
		 
			if	((vl_pago_w + vl_glosado_w + vl_glosa_grg_w + vl_pago_grg_w) < vl_guia_w) then 
 
				select	max(a.ie_libera_repasse) 
				into STRICT	ie_libera_repasse_w 
				from	regra_campo_lib_rep a 
				where	a.cd_estabelecimento	= cd_estabelecimento_p 
				and	coalesce(a.cd_convenio,cd_convenio_retorno_w) = cd_convenio_retorno_w 
				and	a.ie_regra	= 1;
			 
				select	nextval('convenio_retorno_item_seq') 
				into STRICT	nr_sequencia_w 
				;
 
				insert into convenio_retorno_item(nr_sequencia, 
					nr_seq_retorno, 
					vl_pago, 
					vl_glosado, 
					dt_atualizacao, 
					nm_usuario, 
					ie_glosa, 
					nr_interno_conta, 
					cd_autorizacao, 
					vl_adicional, 
					vl_amenor, 
					ie_libera_repasse, 
					ie_analisada, 
					nr_titulo) 
				values (	nr_sequencia_w, 
					nr_seq_retorno_p, 
					vl_guia_w - vl_pago_w - vl_glosado_w - vl_glosa_grg_w - vl_pago_grg_w, 
					0, 
					clock_timestamp(), 
					nm_usuario_p, 
					'N', 
					nr_interno_conta_w, 
					cd_autorizacao_w, 
					0, 
					0, 
					coalesce(ie_libera_repasse_w,ie_liberar_repasse_p), 
					ie_analisada_p, 
					nr_titulo_w);
			end if;
		else 
			if (coalesce(length(ds_msg_conta_outro_ret_w),0) < 1800) then 
				--ds_msg_conta_outro_ret_w := ds_msg_conta_outro_ret_w || ' Conta: '||nr_interno_conta_w||' / Guia: '||cd_autorizacao_w||chr(10); 
				ds_msg_conta_outro_ret_w := ds_msg_conta_outro_ret_w || wheb_mensagem_pck.get_texto(304130, 'NR_INTERNO_CONTA=' || nr_interno_conta_w || ';' || 
															  'CD_AUTORIZACAO=' || cd_autorizacao_w) ||chr(10);
			end if;
		end if;
	end if;
end loop;
close c01;
 
if (ds_msg_conta_outro_ret_w IS NOT NULL AND ds_msg_conta_outro_ret_w::text <> '') then 
	--ds_mensagem_p	:= 'As guias abaixo não foram incluídas pois já estão em outro retorno: '||chr(10)||ds_msg_conta_outro_ret_w; 
	ds_mensagem_p	:= wheb_mensagem_pck.get_texto(304129)||chr(10)||ds_msg_conta_outro_ret_w;	
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_retorno_per_protocolo ( nr_seq_retorno_p bigint, ie_liberar_repasse_p text, ie_analisada_p text, nr_convenio_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_periodo_conta_p text, ds_mensagem_p INOUT text, ie_guias_considerar_p text) FROM PUBLIC;

