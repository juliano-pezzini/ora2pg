-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_dados_aih ( nm_campo_p text, nr_aih_p bigint, nr_seq_aih_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_cid_princ_p text, cd_cid_sec_p text, cd_cid_compl_p text, cd_cid_morte_p text, cd_modalidade_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_tipo_consiste_p bigint, ds_erro_p INOUT text, nr_interno_conta_p bigint default 0) AS $body$
DECLARE



/* IE_TIPO_CONSISTE_P
	- 1 Fechamento da conta
	- 2 Saida do campo
*/
ds_detalhe_w		varchar(255)	:= '';
cd_estabelecimento_w	smallint;
ds_erro_w		varchar(255)	:= '';
nr_interno_conta_w		bigint	:= 0;
qt_proc_cid_w		integer	:= 0;
qt_proc_modalidade_w	integer	:= 0;
qt_modalidade_hosp_w	integer	:= 0;
qt_reg_modal_hosp_w	integer	:= 0;
cd_carater_internacao_w	varchar(2);
ie_permanencia_w		varchar(1)	:= 'N';
cd_motivo_cobranca_w	smallint;
nr_gestante_prenatal_w	bigint;
ie_urgencia_w		varchar(1)	:= 'N';
qt_cid_compat_w		bigint	:= 0;
nr_atendimento_w		bigint;
dt_inicial_w		timestamp;
dt_final_w		timestamp;
qt_cid_com_poli_multi_w	bigint;
ie_habilitacao_w		varchar(15)	:= 'N';
ie_sexo_cid_w		varchar(15)	:= 'A';
ie_sexo_pac_w		varchar(15);
qt_proc_regra_11_w		bigint	:= 0;
qt_proc_regra_2_w		bigint	:= 0;
ie_vincular_laudos_aih_w	varchar(1)	:= 'N';
qt_proc_doacao_org_w	bigint;


BEGIN

cd_estabelecimento_w	:= cd_estabelecimento_p;
ie_vincular_laudos_aih_w 	:= coalesce(obter_valor_param_usuario(1123,180,obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');

/* Obter dados da AIH */

if (ie_tipo_consiste_p	= 1) then
	begin
	select	coalesce(nr_interno_conta,0),
		cd_estabelecimento,
		cd_carater_internacao,
		cd_motivo_cobranca,
		nr_gestante_prenatal,
		nr_atendimento,
		dt_inicial,
		dt_final
	into STRICT	nr_interno_conta_w,
		cd_estabelecimento_w,
		cd_carater_internacao_w,
		cd_motivo_cobranca_w,
		nr_gestante_prenatal_w,
		nr_atendimento_w,
		dt_inicial_w,
		dt_final_w
	from	sus_aih_unif
	where	nr_aih		= nr_aih_p
	and	nr_sequencia	= nr_seq_aih_p;	
	exception
	when others then
		nr_interno_conta_w	:= 0;
		cd_estabelecimento_w	:= 0;
		cd_carater_internacao_w := '';
		cd_motivo_cobranca_w	:= null;
		nr_gestante_prenatal_w 	:= null;
		nr_atendimento_w	:= 0;
		dt_inicial_w		:= null;
		dt_final_w		:= null;
	end;
	
	if (ie_vincular_laudos_aih_w = 'S') then
		begin
		
		begin
		select	a.nr_interno_conta,
			a.cd_estabelecimento,
			c.ie_carater_inter_sus,
			b.cd_motivo_cobranca,
			b.nr_gestante_prenatal,
			a.nr_atendimento,
			a.dt_periodo_inicial,
			a.dt_periodo_final
		into STRICT	nr_interno_conta_w,
			cd_estabelecimento_w,
			cd_carater_internacao_w,
			cd_motivo_cobranca_w,
			nr_gestante_prenatal_w,
			nr_atendimento_w,
			dt_inicial_w,
			dt_final_w
		FROM atendimento_paciente c, conta_paciente a
LEFT OUTER JOIN sus_dados_aih_conta b ON (a.nr_interno_conta = b.nr_interno_conta)
WHERE a.nr_atendimento = c.nr_atendimento  and a.nr_interno_conta = nr_interno_conta_p;
		exception
		when others then
			nr_interno_conta_w	:= 0;
			cd_estabelecimento_w	:= 0;
			cd_carater_internacao_w := '';
			cd_motivo_cobranca_w	:= null;
			nr_gestante_prenatal_w 	:= null;
			nr_atendimento_w	:= 0;
			dt_inicial_w		:= null;
			dt_final_w		:= null;
		end;	
		
		end;
	end if;
	
end if;

qt_proc_regra_2_w	:= coalesce(sus_validar_regra(2,cd_procedimento_p,ie_origem_proced_p, dt_inicial_w),0);
qt_proc_regra_11_w	:= coalesce(sus_validar_regra(11, cd_procedimento_p, ie_origem_proced_p, dt_inicial_w),0);
/* Obter dados do procedimento realizado */

begin
select	ie_permanencia,
	ie_urgencia
into STRICT	ie_permanencia_w,
	ie_urgencia_w
from	sus_procedimento
where	cd_procedimento		= cd_procedimento_p
and	ie_origem_proced	= ie_origem_proced_p;
exception
	when others then
	ie_permanencia_w	:= 'N';
	ie_urgencia_w		:= 'N';
end;
/* 15 - Procedimento realizado incompativel com o CID principal da AIH */

if (sus_obter_inco_ativa(15)) then
	begin
	
	select	count(1)
	into STRICT	qt_proc_cid_w
	from	sus_procedimento_cid
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p
	and	cd_doenca_cid		= cd_cid_princ_p  LIMIT 1;
	
	select	count(1)
	into STRICT	qt_cid_compat_w
	from	sus_procedimento_cid
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p  LIMIT 1;
	
	select	count(1)
	into STRICT	qt_cid_com_poli_multi_w
	from	procedimento_paciente a,
		sus_valor_proc_paciente b
	where	a.nr_interno_conta = nr_interno_conta_w
	and	a.nr_sequencia 		= b.nr_sequencia
	and	coalesce(b.cd_registro_proc,sus_obter_tiporeg_proc(a.cd_procedimento, a.ie_origem_proced, 'C', 2)) in (3,4)
	and	a.cd_procedimento <> 802010199
	and	coalesce(sus_validar_regra(4,a.cd_procedimento,a.ie_origem_proced,a.dt_procedimento),0) = 0
	and (exists (SELECT	1
			from	sus_procedimento_cid
			where	cd_procedimento		= a.cd_procedimento
			and	ie_origem_proced	= a.ie_origem_proced
			and	cd_doenca_cid		= cd_cid_princ_p) and
		exists (select	1
			from	sus_procedimento_cid
			where	cd_procedimento		= a.cd_procedimento
			and	ie_origem_proced	= a.ie_origem_proced))  LIMIT 1;
			
	select	count(1)
	into STRICT	qt_proc_doacao_org_w
	from	sus_procedimento
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p
	and	cd_procedimento in (503010014,503010022)  LIMIT 1;

	if 	(((qt_proc_regra_11_w = 0) and (qt_proc_cid_w = 0) and (qt_cid_compat_w > 0)) or
		((qt_proc_regra_11_w > 0) and (qt_proc_doacao_org_w = 0) and (qt_cid_com_poli_multi_w = 0))) then	
		begin
		if (ie_tipo_consiste_p = 1) then
			ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278129)|| cd_cid_princ_p || WHEB_MENSAGEM_PCK.get_texto(278121) || ie_origem_proced_p,1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_w, 15, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		elsif (ie_tipo_consiste_p = 2) and (nm_campo_p	= 'CD_CID_PRINC') and (qt_proc_regra_11_w = 0) then
			ds_erro_w	:= ds_erro_w || '15, ';
		end if;
		end;
	end if;	
	end;
end if;
/* 16 - Procedimento realizado incompativel com a modalidade da AIH */

if (sus_obter_inco_ativa(16)) and (cd_modalidade_p IS NOT NULL AND cd_modalidade_p::text <> '') then

	select	count(1)
	into STRICT	qt_proc_modalidade_w
	from	sus_procedimento_modal
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p
	and	cd_modalidade		= cd_modalidade_p  LIMIT 1;
	
	if (qt_proc_modalidade_w	= 0) then
		if (ie_tipo_consiste_p = 1) then
			ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278130) || cd_modalidade_p || WHEB_MENSAGEM_PCK.get_texto(278121) || ie_origem_proced_p,1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_w, 16, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		elsif (ie_tipo_consiste_p = 2) and (nm_campo_p	= 'CD_MODALIDADE') then
			ds_erro_w	:= ds_erro_w || '16, ';
		end if;
	end if;
end if;
/* 31 - Carater de internacao da AIH diferente de 02 - Urgencia, sendo que o procedimento permite */

if (sus_obter_inco_ativa(31)) and (ie_urgencia_w = 'S') and (cd_carater_internacao_w <> '02') then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278131) || ie_permanencia_w || WHEB_MENSAGEM_PCK.get_texto(278132) || cd_carater_internacao_w ||
					WHEB_MENSAGEM_PCK.get_texto(278121) || ie_origem_proced_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 31, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/* 40 - Motivo de cobranca informado incompativel com o procedimento de psiquiatria  */

if (sus_obter_inco_ativa(40)) and (cd_motivo_cobranca_w in (25)) and (sus_validar_regra(19, cd_procedimento_p, ie_origem_proced_p, dt_inicial_w) > 0) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278133) || cd_motivo_cobranca_w || WHEB_MENSAGEM_PCK.get_texto(278132) || cd_carater_internacao_w ||
					WHEB_MENSAGEM_PCK.get_texto(278121) || ie_origem_proced_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 40, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/* 50 - Motivo de saida de obito e CID causa morte nao informado */

if (sus_obter_inco_ativa(50)) and
	((cd_motivo_cobranca_w in (41,42,43)) and (coalesce(cd_cid_morte_p::text, '') = '')) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278133) || cd_motivo_cobranca_w,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 50, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/* 72 - Procedimento realizado incompativel com a modalidade do Hospital */

if (sus_obter_inco_ativa(72)) and (cd_modalidade_p IS NOT NULL AND cd_modalidade_p::text <> '') then
	begin
	
	select	count(1)
	into STRICT	qt_reg_modal_hosp_w
	from	sus_modalidade_hospital
	where	cd_estabelecimento	= cd_estabelecimento_w  LIMIT 1;

	if (qt_reg_modal_hosp_w 	> 0) then
		begin
		
		select	count(1)
		into STRICT	qt_modalidade_hosp_w
		from	sus_modalidade_hospital
		where	cd_estabelecimento	= cd_estabelecimento_w
		and	cd_modalidade		= cd_modalidade_p  LIMIT 1;
	
		if (qt_modalidade_hosp_w	= 0) then
			begin
			if (ie_tipo_consiste_p = 1) then
				ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278134) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278135) || cd_estabelecimento_w || WHEB_MENSAGEM_PCK.get_texto(278130) || cd_modalidade_p,1,255);
				CALL sus_gravar_inconsistencia(nr_interno_conta_w, 72, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			elsif (ie_tipo_consiste_p = 2) and (nm_campo_p	= 'CD_MODALIDADE') then
				ds_erro_w	:= ds_erro_w || '72, ';
			end if;
			end;
		end if;	
		end;
	end if;
	end;
end if;
/*Procedimento realizado incompativel com a habilitacao do Hospital*/

if (sus_obter_inco_ativa(73)) then
	begin
	
	ie_habilitacao_w := coalesce(sus_consiste_habilitacao_proc(cd_procedimento_p,ie_origem_proced_p,clock_timestamp(),cd_estabelecimento_p),'S');	

	if (ie_habilitacao_w = 'N') then
		if (ie_tipo_consiste_p = 1) then
			ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278134) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278135) || cd_estabelecimento_w,1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_w, 73, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		elsif (ie_tipo_consiste_p = 2) and (nm_campo_p	= 'CD_PROCEDIMENTO_REAL') then
			ds_erro_w	:= ds_erro_w || '73, ';
		end if;
	end if;
	end;
end if;
/*Procedimento realizado incompativel com o CID secundario da AIH*/

if (sus_obter_inco_ativa(137)) and (qt_proc_regra_11_w = 0) and (cd_cid_sec_p IS NOT NULL AND cd_cid_sec_p::text <> '') then
	begin
	
	select	count(1)
	into STRICT	qt_cid_compat_w
	from	sus_procedimento_cid_sec
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p  LIMIT 1;
	
	if (qt_cid_compat_w > 0) then
		begin
		
		select	count(1)
		into STRICT	qt_proc_cid_w
		from	sus_procedimento_cid_sec
		where	cd_procedimento		= cd_procedimento_p
		and	ie_origem_proced	= ie_origem_proced_p
		and	cd_doenca_cid_sec	= cd_cid_sec_p  LIMIT 1;
	
		if (qt_proc_cid_w = 0) then
			begin
			if (ie_tipo_consiste_p = 1) then
				ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278129)|| cd_cid_sec_p || WHEB_MENSAGEM_PCK.get_texto(278121) || ie_origem_proced_p,1,255);
				CALL sus_gravar_inconsistencia(nr_interno_conta_w, 137, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;
			end;
		end if;	
		end;
	end if;	
	end;
end if;
/*CID causa morte nao informado para uma alta de obito*/

if (sus_obter_inco_ativa(153)) and (obter_se_alta_obito(nr_atendimento_w)	= 'S') and (coalesce(cd_cid_morte_p::text, '') = '') and (coalesce(obter_data_alta_atendimento(nr_atendimento_w),clock_timestamp()) between dt_inicial_w and dt_final_w) and (cd_motivo_cobranca_w <> 25) then
	ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278137) ||nr_atendimento_w,1,255);
	if (ie_tipo_consiste_p = 1) then
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 153, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/*De acordo com a protarias GM n.o. 737/01, GM n.o. 1969/01 e SAS n.o 579/2000*/

if (sus_obter_inco_ativa(166)) and (cd_procedimento_p = 802020020) and (substr(cd_cid_princ_p,1,1) in ('S','T')) and
	((substr(cd_cid_sec_p,1,1) not in ('V','W','X','Y')) or (cd_cid_sec_p not in ('D66','D67','D680','D681','D684'))) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278129)|| cd_cid_sec_p || WHEB_MENSAGEM_PCK.get_texto(278121) || ie_origem_proced_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 166, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/*Obrigatorio o CID Secundario quando o CID Principal comecar com a letra "S" ou "T".*/

if (sus_obter_inco_ativa(167)) and (substr(cd_cid_princ_p,1,1) in ('S','T')) and (coalesce(cd_cid_sec_p::text, '') = '') then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278129)|| cd_cid_sec_p || WHEB_MENSAGEM_PCK.get_texto(278121) || ie_origem_proced_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 167, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/*Procedimentos de parto nao permitem Motivo de Saida/Permanencia 11,12,18,19,21,28,32 e 51 */

if (sus_obter_inco_ativa(179)) and (qt_proc_regra_2_w > 0) and (cd_motivo_cobranca_w in (11,12,18,19,21,28,32,51)) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278133) || cd_motivo_cobranca_w,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 179, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	elsif (ie_tipo_consiste_p = 2) and (nm_campo_p	= 'CD_MOTIVO_COBRANCA') then
		ds_erro_w	:= ds_erro_w || '179, ';
	end if;
end if;
/*Motivo de encerramento exclusivo para procedimento de parto.*/

if (sus_obter_inco_ativa(186)) and (qt_proc_regra_2_w = 0) and (cd_motivo_cobranca_w in (61,62,63,64,66,67)) then
	begin
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278133) || cd_motivo_cobranca_w,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 186, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	elsif (ie_tipo_consiste_p = 2) and (nm_campo_p	= 'CD_MOTIVO_COBRANCA') then
		ds_erro_w	:= ds_erro_w || '186, ';
	end if;
	end;
end if;
/* 195 - Motivo de encerramento nao permite CID causa morte*/

if (sus_obter_inco_ativa(195)) and
	((cd_motivo_cobranca_w = 25) and (coalesce(cd_cid_morte_p,'X') <> 'X')) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278133) || cd_motivo_cobranca_w || WHEB_MENSAGEM_PCK.get_texto(278138) || cd_cid_morte_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 195, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/* 200 - CID causa morte informado em um motivo de encerramento diferente de obito*/

if (sus_obter_inco_ativa(200)) and
	((cd_motivo_cobranca_w not in (41,42,43,65,66,67)) and (coalesce(cd_cid_morte_p,'X') <> 'X')) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278119)  || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(278133) || cd_motivo_cobranca_w || WHEB_MENSAGEM_PCK.get_texto(278138) || cd_cid_morte_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 200, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/* 205	 - CID principal da AIH incompativel com o sexo do paciente*/

if (sus_obter_inco_ativa(205)) then
	begin
	select	coalesce(max(a.ie_sexo),'A')
	into STRICT	ie_sexo_cid_w
	from	cid_doenca a
	where	a.cd_doenca = cd_cid_princ_p;
	exception
		when others then
		ie_sexo_cid_w := 'A';
	end;
	
	begin
	select	coalesce(obter_sexo_pf(cd_pessoa_fisica,'C'),'X')
	into STRICT	ie_sexo_pac_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_w;
	exception
		when others then
		ie_sexo_pac_w := 'X';
	end;
	
	if (ie_sexo_cid_w <> 'A') and (ie_sexo_pac_w <> 'X') and (ie_sexo_cid_w <> ie_sexo_pac_w) then		
		if (ie_tipo_consiste_p = 1) then
			ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278139) || cd_cid_princ_p || WHEB_MENSAGEM_PCK.get_texto(278141) || ie_sexo_cid_w || WHEB_MENSAGEM_PCK.get_texto(278142) || ie_sexo_pac_w,1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_w, 205, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end if;
	end if;
end if;
/*237 - Falta a informacao do CID Secundario para a AIH*/

if (sus_obter_inco_ativa(237)) and (cd_carater_internacao_w in ('05','06')) and (coalesce(cd_cid_sec_p,'X') = 'X') then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278144) || nr_aih_p || WHEB_MENSAGEM_PCK.get_texto(278145) || cd_carater_internacao_w || WHEB_MENSAGEM_PCK.get_texto(278147) || cd_cid_sec_p,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 237, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/*251 - CID principal da AIH deve conter 4 digitos*/

if (sus_obter_inco_ativa(251)) and (coalesce(cd_cid_princ_p,'X') <> 'X') and (length(cd_cid_princ_p) < 4) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= substr(WHEB_MENSAGEM_PCK.get_texto(278144) || nr_aih_p || WHEB_MENSAGEM_PCK.get_texto(278148) || cd_cid_princ_p || WHEB_MENSAGEM_PCK.get_texto(278150) || cd_procedimento_p ,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_w, 251, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

ds_erro_p	:= ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_dados_aih ( nm_campo_p text, nr_aih_p bigint, nr_seq_aih_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_cid_princ_p text, cd_cid_sec_p text, cd_cid_compl_p text, cd_cid_morte_p text, cd_modalidade_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_tipo_consiste_p bigint, ds_erro_p INOUT text, nr_interno_conta_p bigint default 0) FROM PUBLIC;

