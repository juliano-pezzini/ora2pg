-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE contabiliza_gratuidade (nr_lote_contabil_p bigint, nm_usuario_p text, ie_exclusao_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


cd_conta_contabil_w             varchar(20);
cd_conta_debito_w               varchar(20);
cd_estabelecimento_w            smallint;
nr_documento_w                  varchar(255);
vl_transacao_w                  double precision;
nr_seq_trans_fin_w              bigint;
nr_seq_agrupamento_w            bigint;
nm_atributo_w                   varchar(50) := 'VL_GRATUIDADE';
dt_contabil_w                   timestamp;
dt_inicial_w                    timestamp;
dt_final_w                      timestamp;
vl_retorno_w                    double precision;
nr_atendimento_w                integer;
nr_sequencia_w                  bigint;
cd_tipo_lote_contabil_w         bigint;
nr_seq_protocolo_w              bigint;
ie_tipo_atendimento_w           integer;
cd_convenio_w                   bigint;
nr_seq_atecaco_w                bigint;
cd_plano_convenio_w             varchar(10);
nr_sequencia_movto_w            bigint;
dt_movimento_w                  timestamp;
ie_conta_convenio_w             varchar(1);
cd_historico_w                  bigint;
ds_compl_historico_w            varchar(255);
cd_centro_custo_debito_w        integer;
cd_setor_atendimento_w          integer;
ie_trans_financeira_w           varchar(1) := 'S';
nr_seq_regra_lote_w             bigint;
ds_conteudo_w                   varchar(4000);
ie_tipo_convenio_w              smallint;
cd_conta_deb_convenio_w         varchar(20);
nm_paciente_w                   varchar(255);
nr_interno_conta_w              conta_paciente.nr_interno_conta%type;
cd_historico_cred_w             ctb_lote_gratuidade_reg.cd_historico_cred%type;
cd_conta_credito_w              varchar(20);
ie_proc_mat_w                   varchar(1);
ie_contab_rec_gratuidade_w      parametro_faturamento.ie_contab_rec_gratuidade%type;
cd_material_w                   material_atend_paciente.cd_material%type;
cd_procedimento_w               procedimento_paciente.cd_procedimento%type;
ie_origem_proced_w              procedimento_paciente.ie_origem_proced%type;
cd_local_estoque_w              material_atend_paciente.cd_local_estoque%type;
ie_classif_contabil_w           convenio.ie_classif_contabil%type;
nr_documento_ww                 movimento_contabil.nr_documento%type;
ie_origem_documento_w           movimento_contabil.ie_origem_documento%type;
ie_regra_w                      varchar(255);
ds_atributos_w                  varchar(4000);
nm_agrupador_w                  varchar(255);
nr_nfe_imp_w                    nota_fiscal.nr_nfe_imp%type;
nr_nfe_nf_prot_w                nota_fiscal.nr_nfe_imp%type;
nr_nf_prot_conta_w              varchar(255);
nm_tabela_w                     w_movimento_contabil.nm_tabela%type;
nr_seq_tab_orig_w               w_movimento_contabil.nr_seq_tab_orig%type;
nr_seq_info_ctb_w               w_movimento_contabil.nr_seq_info%type;
ds_convenio_w                   varchar(255);
nr_seq_proc_interno_w           procedimento_paciente.nr_seq_proc_interno%type;
cd_sequencia_parametro_w        bigint;

/* Cursor para ler Movimento a Ser contabilizado */

c010 CURSOR FOR
        SELECT  /*+ no_index(d PROPAVA_PROPACI_FK_I)*/                a.nr_seq_protocolo,
                c.nr_atendimento,
                b.cd_convenio_parametro cd_convenio,
                c.cd_conta_contabil,
                a.dt_mesano_referencia,
                c.cd_setor_atendimento,
                sum(d.vl_procedimento),
                substr(obter_dados_atendimento(b.nr_atendimento,'NP'),1,255),
                b.nr_interno_conta,
                'P' ie_proc_mat,
                null cd_material,
                c.cd_procedimento cd_procedimento,
                c.ie_origem_proced ie_origem_proced,
                null cd_local_estoque,
                'PROCEDIMENTO_PACIENTE',
                c.cd_procedimento,
                74,
                c.nr_seq_proc_interno
        from    proc_paciente_valor d,
                procedimento_paciente c,
                conta_Paciente b,
                protocolo_convenio a
        where   a.nr_seq_lote_grat      = nr_lote_contabil_p
        and     a.nr_seq_protocolo      = b.nr_seq_protocolo
        and     b.nr_interno_conta      = c.nr_interno_conta
        and     c.nr_sequencia          = d.nr_seq_procedimento
        and     ie_tipo_valor           = 3
        group   by      a.nr_seq_protocolo,
                c.nr_atendimento,
                b.cd_convenio_parametro,
                c.cd_conta_contabil,
                a.dt_mesano_referencia,
                c.cd_setor_atendimento,
                b.nr_atendimento,
                b.nr_interno_conta,
                c.cd_procedimento,
                c.ie_origem_proced,
                c.nr_seq_proc_interno

union

        SELECT  /*+ no_index(d material_atend_paciente)*/                a.nr_seq_protocolo,
                c.nr_atendimento,
                b.cd_convenio_parametro cd_convenio,
                c.cd_conta_contabil,
                a.dt_mesano_referencia,
                c.cd_setor_atendimento,
                sum(d.vl_material),
                substr(obter_dados_atendimento(b.nr_atendimento,'NP'),1,255),
                b.nr_interno_conta,
                'M' ie_proc_mat,
                c.cd_material cd_material,
                null cd_procedimento,
                null ie_origem_proced,
                c.cd_local_estoque cd_local_estoque,
                'MATERIAL_ATEND_PACIENTE',
                c.cd_material,
                74,
                null nr_seq_proc_interno
        from    mat_atend_paciente_valor d,
                material_atend_paciente c,
                Conta_Paciente b,
                Protocolo_convenio a
        where   a.nr_seq_lote_grat      = nr_lote_contabil_p
        and     a.nr_seq_protocolo      = b.nr_seq_protocolo
        and     b.nr_interno_conta      = c.nr_interno_conta
        and     c.nr_sequencia          = d.nr_seq_material
        and     ie_tipo_valor           = 3
        group   by      a.nr_seq_protocolo,
                c.nr_atendimento,
                b.cd_convenio_parametro,
                c.cd_conta_contabil,
                a.dt_mesano_referencia,
                c.cd_setor_atendimento,
                b.nr_atendimento,
                c.cd_material,
                b.nr_interno_conta,
                c.cd_local_estoque;


BEGIN
/*Validacao para impedir a geracao em lotes incorretos */

if (ie_exclusao_p <> 'S') then
        select b.cd_tipo_lote_contabil
        into STRICT cd_tipo_lote_contabil_w
        from lote_contabil b
        where b.nr_lote_contabil = nr_lote_contabil_p;
        if (cd_tipo_lote_contabil_w <> 15) then
                CALL wheb_mensagem_pck.exibir_mensagem_abort(261346);
        end if;
end if;
delete
from    lote_contabil_log
where   nr_lote_contabil = nr_lote_contabil_p
and     cd_log_lote in (9,10);

cd_sequencia_parametro_w := null;
commit;

select  dt_referencia,
        cd_estabelecimento,
        cd_tipo_lote_contabil
into STRICT    dt_contabil_w,
        cd_estabelecimento_w,
        cd_tipo_lote_contabil_w
from    lote_contabil
where   nr_lote_contabil        = nr_lote_contabil_p;

dt_inicial_w    := trunc(dt_contabil_w,'mm');
dt_final_w      := fim_mes(dt_contabil_w);

begin
select  coalesce(ie_contab_rec_gratuidade,'N')
into STRICT    ie_contab_rec_gratuidade_w
from    parametro_faturamento
where   cd_estabelecimento = cd_estabelecimento_w;
exception when others then
        ie_contab_rec_gratuidade_w := 'N';
end;

select  coalesce(max(nr_sequencia),0)
into STRICT    nr_seq_regra_lote_w
from    ctb_lote_gratuidade_reg;

begin
select  nr_seq_trans_fin
into STRICT    nr_seq_trans_fin_w
from    tipo_lote_contabil
where   cd_tipo_lote_contabil   = cd_tipo_lote_contabil_w;
exception when others then
        nr_seq_trans_fin_w      := null;
end;

if (ie_exclusao_p = 'S') then
        delete from movimento_contabil
        where  nr_lote_contabil = nr_lote_contabil_p;

        Update  lote_contabil
        set     vl_credito      = 0,
                vl_debito       = 0
        where   nr_lote_contabil        = nr_lote_contabil_p;

        Update  Protocolo_convenio
        set     nr_seq_lote_grat        = 0
        where   nr_seq_lote_grat        = nr_lote_contabil_p;
else
        delete  FROM w_movimento_contabil
        where   nr_lote_contabil = nr_lote_contabil_p;

        update  Protocolo_convenio
        set     nr_seq_lote_grat        = nr_lote_contabil_p
        where   nr_seq_lote_grat        = 0
        and     cd_estabelecimento      = cd_estabelecimento_w
        and     dt_mesano_referencia between dt_inicial_w and dt_final_w;
        commit;
        nr_sequencia_movto_w    := 0;

        nm_agrupador_w  := coalesce(trim(both obter_agrupador_contabil(15)),'NR_ATENDIMENTO');

        open c010;
        loop
        fetch c010 into
                nr_seq_protocolo_w,
                nr_atendimento_w,
                cd_convenio_w,
                cd_conta_contabil_w,
                dt_movimento_w,
                cd_setor_atendimento_w,
                vl_transacao_w,
                nm_paciente_w,
                nr_interno_conta_w,
                ie_proc_mat_w,
                cd_material_w,
                cd_procedimento_w,
                ie_origem_proced_w,
                cd_local_estoque_w,
                nm_tabela_w,
                nr_seq_tab_orig_w,
                nr_seq_info_ctb_w,
                nr_seq_proc_interno_w;
        EXIT WHEN NOT FOUND; /* apply on c010 */
                nr_nf_prot_conta_w      := '';
                nr_nfe_nf_prot_w        := '';
                nr_nfe_imp_w            := '';

                select  obter_desc_convenio(cd_convenio_w)
                into STRICT    ds_convenio_w
;

                /* Verifica se tem regra de conta para gratuidade */

                if (nr_seq_regra_lote_w > 0) then
                        --Buscar o tipo do convenio
                        select  max(ie_tipo_convenio)
                        into STRICT    ie_tipo_convenio_w
                        from    convenio
                        where   cd_convenio     = cd_convenio_w;

                        SELECT * FROM obter_conta_gratuidade( dt_contabil_w, cd_convenio_w, ie_tipo_convenio_w, cd_setor_atendimento_w, cd_conta_debito_w, ie_trans_financeira_w, cd_historico_w, cd_historico_cred_w) INTO STRICT cd_conta_debito_w, ie_trans_financeira_w, cd_historico_w, cd_historico_cred_w;
                end if;

                nr_documento_w  := wheb_mensagem_pck.get_texto(799469)
                        || ' ' || nr_atendimento_w
                        || ' ' || wheb_mensagem_pck.get_texto(799470)
                        || ' ' || nr_seq_protocolo_w
                        || ' ' || wheb_mensagem_pck.get_texto(799472)
                        || ' ' || nm_paciente_w
                        || ' ' || wheb_mensagem_pck.get_texto(799473)
                        || ' ' || nr_interno_conta_w;

                if (nm_agrupador_w = 'NR_ATENDIMENTO')then
                        nr_seq_agrupamento_w    := nr_atendimento_w;
                elsif (nm_agrupador_w = 'DS_MES_ANO') then
                        nr_seq_agrupamento_w    := somente_numero(to_char(dt_movimento_w,'mmyyyy'));
                end if;

                if (coalesce(nr_seq_agrupamento_w,0) = 0)then
                   nr_seq_agrupamento_w := nr_atendimento_w;
                end if;

                ie_tipo_atendimento_w   := obter_tipo_atendimento(nr_atendimento_w);
                cd_plano_convenio_w     := null;
                nr_seq_atecaco_w        := coalesce(obter_atecaco_atendimento(nr_atendimento_w),0);

                if (nr_seq_atecaco_w <> 0) then
                        select  max(cd_plano_convenio)
                        into STRICT    cd_plano_convenio_w
                        from    atend_categoria_convenio
                        where   nr_atendimento  = nr_atendimento_W
                        and     nr_seq_interno  = nr_seq_atecaco_w;
                end if;

                if (coalesce(nr_seq_protocolo_w,0) <> 0) then
                        nr_nf_prot_conta_w      := substr(Obter_Nota_Conta_Protocolo(nr_seq_protocolo_w,0),1,254);

                        select  max(nr_nfe_imp)
                        into STRICT    nr_nfe_nf_prot_w
                        from    nota_fiscal x
                        where   x.nr_sequencia  =       (SELECT max(nr_sequencia)
                                                         from   nota_fiscal
                                                         where  nr_seq_protocolo        = nr_seq_protocolo_w);
                end if;

                if (coalesce(nr_interno_conta_w,0) <> 0) then
                        select  max(nr_nfe_imp)
                        into STRICT    nr_nfe_imp_w
                        from    nota_fiscal x
                        where   x.nr_sequencia  =       (SELECT max(nr_sequencia)
                                                        from    nota_fiscal
                                                        where   nr_interno_conta = nr_interno_conta_w);
                end if;

                ds_conteudo_w   :=      substr( nr_atendimento_w        || '#@' ||
                                                nr_seq_protocolo_w      || '#@' ||
                                                nm_paciente_w           || '#@' ||
                                                nr_interno_conta_w      || '#@' ||
                                                nr_nfe_imp_w            || '#@' ||
                                                nr_nfe_nf_prot_w        || '#@' ||
                                                nr_nf_prot_conta_w      || '#@' ||
                                                ds_convenio_w,1,4000);

                ds_atributos_w  := null;
                ds_atributos_w  := 'NR_SEQ_PROTOCOLO=' || nr_seq_protocolo_w;

                ctb_obter_doc_movto(    cd_tipo_lote_contabil_w,
                                        nm_atributo_w,
                                        'VR',
                                        dt_contabil_w,
                                        null,
                                        null,
                                        ds_atributos_w,
                                        nm_usuario_p,
                                        ie_regra_w,
                                        nr_documento_ww,
                                        ie_origem_documento_w);

                if (ie_trans_financeira_w = 'S') then
                        cd_conta_contabil_w     := obter_conta_convenio(cd_estabelecimento_w,
                                                                        cd_convenio_w,
                                                                        ie_tipo_atendimento_w,
                                                                        'GR',
                                                                        dt_contabil_w,
                                                                        null,
                                                                        null,
                                                                        cd_plano_convenio_w,
                                                                        null,
                                                                        null,
                                                                        null);
                                nr_sequencia_movto_w := gerar_contab_trans_financ(
                                cd_estabelecimento_w, null, nr_lote_contabil_p, nm_usuario_p, cd_conta_contabil_w, 0, nr_documento_w, nr_seq_agrupamento_w, dt_contabil_w, vl_transacao_w, nr_seq_trans_fin_w, '', nm_atributo_w, Null, Null, 0, '', nr_documento_ww, null, ds_conteudo_w, null, null, null, null, null, null, null, null, null, null, null, null, null, null, nr_sequencia_movto_w, nm_tabela_w, null, null, ie_origem_documento_w, nr_seq_tab_orig_w, null, nr_seq_info_ctb_w);
                else
                        begin
                        -- Buscar o centro de custo
                        select (cd_centro_custo)
                        into STRICT    cd_centro_custo_debito_w
                        from    setor_atendimento
                        where   cd_setor_atendimento    = cd_setor_atendimento_w;
                        exception when others then
                                cd_centro_custo_debito_w        := null;
                        end;

                        begin
                        select  ie_tipo_convenio,
                                ie_classif_contabil
                        into STRICT    ie_tipo_convenio_w,
                                ie_classif_contabil_w
                        from    convenio
                        where   cd_convenio = cd_convenio_w;
                        exception when others then
                                ie_tipo_convenio_w := null;
                                ie_classif_contabil_w := null;
                        end;

                        begin
                        select  ie_tipo_atendimento
                        into STRICT    ie_tipo_atendimento_w
                        from    atendimento_paciente
                        where   nr_atendimento = nr_atendimento_w;
                        exception when others then
                                ie_tipo_atendimento_w := null;
                        end;
                        if (ie_contab_rec_gratuidade_w = 'S') then

                                if (ie_proc_mat_w = 'P') then
                                        SELECT * FROM define_conta_procedimento(      cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, 7, null, cd_setor_atendimento_w, ie_classif_contabil_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, null, dt_movimento_w, cd_conta_credito_w, cd_centro_custo_debito_w, null, 'N', null, null, null, null, null, null, null, nr_seq_proc_interno_w) INTO STRICT cd_conta_credito_w, cd_centro_custo_debito_w;
                                else
                                        SELECT * FROM define_conta_material(  cd_estabelecimento_w, cd_material_w, 7, null, cd_setor_atendimento_w, ie_classif_contabil_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, null, cd_local_estoque_w, null, dt_movimento_w, cd_conta_credito_w, cd_centro_custo_debito_w, null, 'N') INTO STRICT cd_conta_credito_w, cd_centro_custo_debito_w;
                                end if;

                                cd_sequencia_parametro_w := philips_contabil_pck.get_parametro_conta_contabil();
                                cd_conta_contabil_w     := coalesce(cd_conta_credito_w, cd_conta_contabil_w);
                        end if;
                        -- Buscar a sequencia do movimento
                        nr_sequencia_movto_w    := nr_sequencia_movto_w + 1;
                        ds_compl_historico_w    := substr(Obter_Compl_Historico(15, cd_historico_cred_w, ds_conteudo_w),1,255);

                        insert into w_movimento_contabil( --2
                                nr_lote_contabil,
                                nr_sequencia,
                                cd_conta_contabil,
                                ie_debito_credito,
                                cd_historico,
                                dt_movimento,
                                vl_movimento,
                                cd_centro_custo,
                                ds_compl_historico,
                                ds_doc_agrupamento,
                                nr_seq_agrupamento,
                                nr_seq_trans_fin,
                                cd_cgc,
                                cd_pessoa_fisica,
                                nr_documento,
                                ie_transitorio,
                                cd_estabelecimento,
                                ie_origem_documento,
                                nm_tabela,
                                nr_seq_tab_orig,
                                nr_seq_info,
                                cd_sequencia_parametro)
                        values ( nr_lote_contabil_p,
                                nr_sequencia_movto_w,
                                cd_conta_contabil_w,
                                'C',
                                cd_historico_cred_w,
                                dt_contabil_w,
                                vl_transacao_w,
                                cd_centro_custo_debito_w,
                                ds_compl_historico_w,
                                null,
                                nr_seq_agrupamento_w,
                                null,
                                null,
                                null,
                                nr_documento_ww,
                                'N',
                                cd_estabelecimento_w,
                                ie_origem_documento_w,
                                nm_tabela_w,
                                nr_seq_tab_orig_w,
                                nr_seq_info_ctb_w,
                                cd_sequencia_parametro_w);

                        nr_documento_ww         :=      nr_seq_protocolo_w;
                        ie_origem_documento_w   :=      5;
                        nr_sequencia_movto_w    := nr_sequencia_movto_w + 1;
                        ds_compl_historico_w    := substr(Obter_Compl_Historico(15, cd_historico_w, ds_conteudo_w),1,255);

                        insert into w_movimento_contabil(       --3
                                nr_lote_contabil,
                                nr_sequencia,
                                cd_conta_contabil,
                                ie_debito_credito,
                                cd_historico,
                                dt_movimento,
                                vl_movimento,
                                cd_centro_custo,
                                ds_compl_historico,
                                ds_doc_agrupamento,
                                nr_seq_agrupamento,
                                nr_seq_trans_fin,
                                cd_cgc,
                                cd_pessoa_fisica,
                                nr_documento,
                                ie_transitorio,
                                cd_estabelecimento,
                                ie_origem_documento,
                                nm_tabela,
                                nr_seq_tab_orig,
                                nr_seq_info,
                                cd_sequencia_parametro)
                        values ( nr_lote_contabil_p,
                                nr_sequencia_movto_w,
                                cd_conta_debito_w,
                                'D',
                                cd_historico_w,
                                dt_contabil_w,
                                vl_transacao_w,
                                cd_centro_custo_debito_w,
                                ds_compl_historico_w,
                                null,
                                nr_seq_agrupamento_w,
                                null,
                                null,
                                null,
                                nr_documento_ww,
                                'N',
                                cd_estabelecimento_w,
                                ie_origem_documento_w,
                                nm_tabela_w,
                                nr_seq_tab_orig_w,
                                nr_seq_info_ctb_w,
                                cd_sequencia_parametro_w);
                end if;
        end loop;
        close c010;

        CALL agrupa_movimento_contabil(nr_lote_contabil_p, nm_usuario_p);
end if;

if (coalesce(ds_retorno_p::text, '') = '') then
        update  lote_contabil
        set     ie_situacao = 'A',
                dt_geracao_lote = clock_timestamp()
        where   nr_lote_contabil = nr_lote_contabil_p;
        if (ie_exclusao_p = 'S') then
                ds_retorno_p            := wheb_mensagem_pck.get_texto(799475);
                CALL ctb_gravar_log_lote( nr_lote_contabil_p, 2, '', nm_usuario_p);
        else
                ds_retorno_p            := wheb_mensagem_pck.get_texto(799476);
                CALL ctb_gravar_log_lote( nr_lote_contabil_p, 1, '', nm_usuario_p);
        end if;
        commit;
else
        rollback;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE contabiliza_gratuidade (nr_lote_contabil_p bigint, nm_usuario_p text, ie_exclusao_p text, ds_retorno_p INOUT text) FROM PUBLIC;

