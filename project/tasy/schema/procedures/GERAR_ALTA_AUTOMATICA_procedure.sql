-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_alta_automatica () AS $body$
DECLARE

nr_regras_w			integer 	:= 0;
nr_setores_w			smallint	:= 0;
nr_atendimento_w		bigint;
cd_setor_atend_w		integer;
ie_tipo_atend_w			smallint;
cd_motivo_alta_w		smallint;
cd_estabelecimento_w		integer;
qt_minuto_w			bigint;
dt_entrada_w			timestamp;
dt_alta_w			timestamp;
ie_tempo_minimo_w		varchar(1);
ds_erro_w			varchar(2000);
ie_alta_job_apac_w		varchar(1); 		--Ivan em 11/05/2007 OS54352
qt_apac_atend_w			bigint	:= 0;	--Ivan em 11/05/2007 OS54352
cd_estabelecimento_old_w	integer	:= 0;	--Ivan em 11/05/2007 OS54352
nr_Seq_regra_w			bigint;
qt_minuto_atual_w		bigint;
cd_convenio_w			integer;
qt_itens_regra_conv_w		integer;
ie_gerar_conv_w			varchar(1);
cd_medico_resp_w		varchar(10);
cd_processo_alta_w		bigint;
ie_dia_semana_w			bigint;

cd_convenio_parametro_w		integer;
cd_categoria_parametro_w	varchar(10);
ie_permite_gerar_pacote_w	varchar(1);
ie_gerar_pacote_alta_w		varchar(1);
cd_convenio_atend_w		integer;
cd_categoria_atend_w		varchar(10);
nr_interno_conta_w		bigint;
ie_clinica_w			integer;
ie_tipo_atendimento_w		smallint;
ie_considerar_evolucao_w	varchar(1);
dt_filtro_w		timestamp;
cd_especialidade_w		bigint;
ie_tipo_guia_w			varchar(20);

nr_seq_classificacao_w		bigint;
hr_inicio_consulta_w		timestamp;
hr_espera_w			bigint;
ie_tempo_espera_pa_w		varchar(1);
ie_inicio_consulta_pa_w		varchar(1);
ie_substituir_alta_w		varchar(1);
dia_atual_w			varchar(10);
ie_gerar_prim_setor_w		varchar(1);
cd_setor_atend_ww		integer;
ie_somente_sem_alta_w		varchar(1);
dt_x				timestamp;
ie_conta_def_w			varchar(3) := 'S';
ie_conta_definitiva_w		varchar(1);
ie_prescr_ok_w			varchar(1) := 'S';
cd_procedencia_w		integer;
qt_dias_pend_amostra_w		integer;
ie_pend_amostra_w		varchar(1);
ie_saida_real_w			varchar(1);
ie_itens_adep_nao_adm_w		varchar(1);
ie_administrado_adep_w          varchar(1);
ie_consistir_proc_pend_w        varchar(1);
ie_solucao_pendente_w		varchar(1);
ie_solucao_pend_w		varchar(1);
ie_data_estorno_w	varchar(1);
ie_susp_prescricoes_alta_w		varchar(1);
dt_data_estorno_ww	timestamp;
ie_data_alta_medica_w	REGRA_ALTA_AUTOMATICA.ie_data_alta_medica%type;
ie_acc_w		PARAMETRO_ATENDIMENTO.IE_GERAR_ALTA_AUT_PASS_CC%type;
ie_ai_w			PARAMETRO_ATENDIMENTO.IE_GERAR_ALTA_AUT_INT%type;
ie_somente_com_alta_medica_w		regra_alta_automatica.ie_somente_com_alta_medica%type;
dt_alta_medico_w		atendimento_paciente.dt_alta_medico%type;
cd_pessoa_fisica_w	pessoa_fisica.cd_pessoa_fisica%type;
ds_mensagem_sms_w               regra_sms_alta.ds_mensagem%type;
ie_utiliza_DDD_w 		varchar(1);
ds_remetente_w			varchar(255);
nr_seq_regra_envio_w		bigint;
nr_telefone_w			varchar(15);
qt_retorno_pac_w		bigint;
ie_utilizar_ddi_w 		varchar(1);
ds_log_sms_w			   varchar(2000)		:= '';
ds_erro_outros_w			   varchar(255)	:= '';
nr_seq_log_sms_w			   log_envio_sms.nr_sequencia%type;
ie_inativa_item_w		varchar(1);
nm_usuario_w		usuario.nm_usuario%type;
qt_reg_w			bigint;
ds_unidade_compl_w	varchar(30);

cd_unidade_basica_w	atend_paciente_unidade.cd_unidade_basica%type;
cd_unidade_compl_w	atend_paciente_unidade.cd_unidade_compl%type;

c01 CURSOR FOR
	SELECT	a.nr_atendimento,
		a.ie_tipo_atendimento,
		a.dt_entrada,
		a.cd_estabelecimento,
		a.cd_medico_resp,
		coalesce(a.ie_clinica,0),
		a.nr_seq_classificacao,
		a.ie_tipo_atendimento,
		a.dt_atend_medico,
		substr(round((coalesce(a.dt_atend_medico, clock_timestamp()) - a.dt_entrada) * 1440),1,10),
		a.cd_procedencia,
		a.dt_alta_medico,
		a.nm_usuario
	from	atendimento_paciente a
	where	a.dt_alta_interno between(clock_timestamp() + interval '10 days')  and dt_x  -- to_date('30/12/2999', 'dd/mm/yyyy')
	and	not exists
		(	SELECT 1
			from    setor_atendimento y,
					atend_paciente_unidade x
			where   x.cd_setor_atendimento  = y.cd_setor_atendimento
			and		a.nr_atendimento	= x.nr_atendimento
			and		(((ie_acc_w = 'S') AND		
					  (((ie_ai_w = 'S') and (y.cd_classif_setor in ('4','8'))) or
					  ((ie_ai_w = 'N') and (y.cd_classif_setor in ('3','4','8'))))) OR
					 ((ie_acc_w = 'N') AND		
					  (((ie_ai_w = 'S') and (y.cd_classif_setor in ('2','4','8'))) or
					  ((ie_ai_w = 'N') and (y.cd_classif_setor in ('2','3','4','8')))))
					)	
		)
	
union

	SELECT	a.nr_atendimento,
		a.ie_tipo_atendimento,
		a.dt_entrada,
		a.cd_estabelecimento,
		a.cd_medico_resp,
		coalesce(a.ie_clinica,0),
		a.nr_seq_classificacao,
		a.ie_tipo_atendimento,
		a.dt_atend_medico,
		substr(round((coalesce(a.dt_atend_medico, clock_timestamp()) - a.dt_entrada) * 1440),1,10),
		a.cd_procedencia,
		a.dt_alta_medico,
		x.nm_usuario
	FROM	atendimento_paciente a,
		setor_atendimento y,
		atend_paciente_unidade x,
		PARAMETRO_ATENDIMENTO b								
	WHERE	a.dt_alta_interno between(clock_timestamp() + interval '10 days')  and dt_x  -- to_date('30/12/2999', 'dd/mm/yyyy')
	AND   	x.cd_setor_atendimento  = y.cd_setor_atendimento
	AND 	b.cd_estabelecimento = a.cd_estabelecimento
	AND	a.nr_atendimento	= x.nr_atendimento
	AND	x.nr_seq_interno	= OBTER_ATEPACU_PACIENTE(A.NR_ATENDIMENTO, 'A')
	AND 	IE_GERAR_ALTA_AUT_CC = 'S'
	AND     y.cd_classif_setor = '2'
	
union

	select	a.nr_atendimento,
		a.ie_tipo_atendimento,
		a.dt_entrada,
		a.cd_estabelecimento,
		a.cd_medico_resp,
		coalesce(a.ie_clinica,0),
		a.nr_seq_classificacao,
		a.ie_tipo_atendimento,
		a.dt_atend_medico,
		substr(round((coalesce(a.dt_atend_medico, clock_timestamp()) - a.dt_entrada) * 1440),1,10),
		a.cd_procedencia,
		a.dt_alta_medico,
		a.nm_usuario
	from	atendimento_paciente a
	where	a.dt_alta_interno between(clock_timestamp() + interval '10 days')  and dt_x  -- to_date('30/12/2999', 'dd/mm/yyyy')
	and	exists (select 1
		from    setor_atendimento y,
			atend_paciente_unidade x,
			regra_alta_automatica z
		where   x.cd_setor_atendimento  = y.cd_setor_atendimento
		and	a.nr_atendimento	= x.nr_atendimento
		and	z.cd_setor_atendimento	= x.cd_setor_atendimento
		and	(z.cd_setor_atendimento IS NOT NULL AND z.cd_setor_atendimento::text <> '')
		and	ie_gerar_somente_passagem = 'S')
	and	not exists (select 1
		from    setor_atendimento y,
			atend_paciente_unidade x,
			regra_alta_automatica z
		where   x.cd_setor_atendimento  = y.cd_setor_atendimento
		and	a.nr_atendimento	= x.nr_atendimento
		and	(z.cd_setor_atendimento IS NOT NULL AND z.cd_setor_atendimento::text <> '')
		and	z.cd_setor_atendimento	<> x.cd_setor_atendimento
		and	ie_gerar_somente_passagem = 'S')
	
union

	SELECT	a.nr_atendimento,
		a.ie_tipo_atendimento,
		a.dt_entrada,
		a.cd_estabelecimento,
		a.cd_medico_resp,
		coalesce(a.ie_clinica,0),
		a.nr_seq_classificacao,
		a.ie_tipo_atendimento,
		a.dt_atend_medico,
		substr(round((coalesce(a.dt_atend_medico, clock_timestamp()) - a.dt_entrada) * 1440),1,10),
		a.cd_procedencia,
		a.dt_alta_medico,
		x.nm_usuario
	FROM	atendimento_paciente a,
		setor_atendimento y,
		atend_paciente_unidade x,
		PARAMETRO_ATENDIMENTO b								   
	WHERE	a.dt_alta_interno between(clock_timestamp() + interval '10 days')  and dt_x  -- to_date('30/12/2999', 'dd/mm/yyyy')
	AND   	x.cd_setor_atendimento  = y.cd_setor_atendimento
	AND 	b.cd_estabelecimento = a.cd_estabelecimento
	AND	a.nr_atendimento	= x.nr_atendimento
	AND	x.nr_seq_interno	= OBTER_ATEPACU_PACIENTE(A.NR_ATENDIMENTO, 'A')
	AND 	IE_GERAR_ALTA_AUT_SE = 'S'
	AND     y.cd_classif_setor = '5';	

c02 CURSOR FOR
	SELECT	cd_motivo_alta,
		qt_minuto,
		ie_tempo_minimo,
		nr_sequencia,
		coalesce(cd_processo_alta,0),
		coalesce(ie_considerar_evolucao,'N'),
		coalesce(ie_tempo_espera_pa,'N'),
		coalesce(ie_inicio_consulta_pa,'N'),
		coalesce(ie_data_atual,'N'),
		coalesce(ie_somente_sem_alta,'N'),
		coalesce(ie_conta_definitiva,'N'),
		abs(qt_dias_pend_amostra),
		coalesce(ie_pend_amostra,'N'),
		coalesce(ie_saida_real,'N'),
		coalesce(ie_administrado_adep,'N'),
		coalesce(ie_solucao_pendente,'N'),
		coalesce(ie_data_estorno, 'N'),
		coalesce(IE_DATA_ALTA_MEDICA, 'N'),
		coalesce(ie_somente_com_alta_medica, 'N')
	FROM	regra_alta_automatica
	where	(((coalesce(cd_setor_atendimento, cd_setor_atend_w)	 = cd_setor_atend_w) and (coalesce(ie_primeiro_setor,'N') = 'N')) or (coalesce(cd_setor_atendimento, cd_setor_atend_ww)   = cd_setor_atend_ww) and (coalesce(ie_primeiro_setor,'N') = 'S'))
	and	coalesce(ie_clinica,ie_clinica_w)			 = ie_clinica_w
	and	coalesce(ie_tipo_atendimento, ie_tipo_atend_w)	 = ie_tipo_atend_w
	and	coalesce(cd_estabelecimento, cd_estabelecimento_w)	 = cd_estabelecimento_w
	and	coalesce(cd_medico_resp,cd_medico_resp_w)		 = cd_medico_resp_w
	and	((coalesce(cd_especialidade,cd_especialidade_w)	 = cd_especialidade_w) or (coalesce(cd_especialidade::text, '') = ''))
	and	coalesce(cd_convenio,cd_convenio_w)			 = cd_convenio_w
	and	coalesce(cd_procedencia,cd_procedencia_w)		 = cd_procedencia_w
	and 	coalesce(cd_categoria,cd_categoria_atend_w)           = cd_categoria_atend_w
	and	coalesce(ie_dia_semana,ie_dia_semana_w)		 = ie_dia_semana_w
	and     ((coalesce(nr_seq_classificacao,nr_seq_classificacao_w) = nr_seq_classificacao_w) or (coalesce(nr_seq_classificacao::text, '') = ''))
	and	((ie_primeiro_dia_mes = 'S' AND dia_atual_w = '01') or (ie_primeiro_dia_mes = 'N'))
	and	coalesce(ie_tipo_guia, coalesce(ie_tipo_guia_w,'XPTO'))		 = coalesce(ie_tipo_guia_w,'XPTO')	
	order by coalesce(IE_TIPO_ATENDIMENTO,0),
		 coalesce(IE_CLINICA,0),
		 coalesce(CD_SETOR_ATENDIMENTO,0),
		 coalesce(CD_ESPECIALIDADE,0),
		 coalesce(CD_CONVENIO,0),
		 coalesce(CD_CATEGORIA,0),
		 coalesce(IE_TIPO_GUIA,0),
		 coalesce(IE_DIA_SEMANA,0),
		 coalesce(NR_SEQ_CLASSIFICACAO,0),
		 coalesce(CD_PROCEDENCIA,0);
		
C03 CURSOR FOR
	SELECT	nr_interno_conta,
		cd_convenio_parametro,	
	        cd_categoria_parametro	
	from	conta_paciente
	where	nr_atendimento		= nr_atendimento_w
	and 	cd_estabelecimento	= cd_estabelecimento_w
	and 	ie_status_acerto	= 1;
	
C20 CURSOR FOR  -- GERAR_ESTORNAR_ALTA
	SELECT  a.ds_mensagem,
		a.nr_sequencia
        from    regra_sms_alta a,
                regra_sms_alta_regra b
        where   a.nr_sequencia = b.nr_seq_regra
        and     coalesce(a.ie_situacao,'A') = 'A'
        and     coalesce(b.ie_situacao,'A') = 'A'
        and	coalesce(cd_estabelecimento, cd_estabelecimento_w)	 = cd_estabelecimento_w
	and	ie_envio_alta_automatica = 'S';
	

BEGIN

select	to_char(clock_timestamp(),'dd')
into STRICT	dia_atual_w
;

dt_x		:= to_date('30/12/2999','dd/mm/yyyy');
		
select	count(*)
into STRICT	nr_regras_w
from	regra_alta_automatica;
if (nr_regras_w	> 0) then
	begin
	open	c01;
	loop
	fetch	c01 into
		nr_atendimento_w,
		ie_tipo_atend_w,
		dt_entrada_w,
		cd_estabelecimento_w,
		cd_medico_resp_w,		
		ie_clinica_w,
		nr_seq_classificacao_w,
		ie_tipo_atendimento_w,
		hr_inicio_consulta_w,
		hr_espera_w,
		cd_procedencia_w,
		dt_alta_medico_w,
		nm_usuario_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		if (coalesce(philips_param_pck.get_nr_seq_idioma::text, '') = '') then
			CALL philips_param_pck.set_nr_seq_idioma(obter_nr_seq_idioma(nm_usuario_w));
		end if;
		
		ie_acc_w	:= obter_dados_param_atend(cd_estabelecimento_w, 'ACC');
		ie_ai_w		:= obter_dados_param_atend(cd_estabelecimento_w, 'AI');
		
		ie_susp_prescricoes_alta_w := Obter_param_Usuario(3111, 162, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, cd_estabelecimento_w, ie_susp_prescricoes_alta_w);
		
		select	coalesce(max(ie_gerar_pacote_alta),'N')
		into STRICT	ie_gerar_pacote_alta_w
		from 	parametro_faturamento
		where	cd_estabelecimento = cd_estabelecimento_w;
		
		qt_minuto_w		:= 0;
		cd_setor_atend_w	:= 0;
		cd_motivo_alta_w	:= 0;
		if (cd_estabelecimento_old_w <> cd_estabelecimento_w) then --Ivan em 11/05/2007 OS54352
			select	coalesce(max(ie_alta_job_apac), 'S')
			into STRICT	ie_alta_job_apac_w
			from	parametro_atendimento
			where	cd_estabelecimento 	= cd_estabelecimento_w;
			cd_estabelecimento_old_w	:= cd_estabelecimento_w;
		end if;
		
		
		if (ie_alta_job_apac_w	= 'N') then --Ivan em 11/05/2007 OS54352
			select	count(*)
			into STRICT	qt_apac_atend_w
			from	sus_apac_movto	
			where	nr_atendimento = nr_atendimento_w;
		end if;
		
		
		select	coalesce(max(cd_setor_atendimento),0)
		into STRICT	cd_setor_atend_w
		from	atend_paciente_unidade
		where	nr_seq_interno =
			(SELECT obter_atepacu_paciente(nr_atendimento_w, 'A') );
		
		
		select	coalesce(max(cd_setor_atendimento),0)
		into STRICT	cd_setor_atend_ww
		from	atend_paciente_unidade
		where	nr_seq_interno =
			(SELECT obter_atepacu_paciente(nr_atendimento_w, 'P') );
			
		
			
		select	coalesce(max(cd_convenio),0)
		into STRICT	cd_convenio_w
		from	atend_categoria_convenio
		where	nr_seq_interno	=  obter_atecaco_atendimento(nr_atendimento_w);
		
		begin
		select	cd_convenio,
			cd_categoria
		into STRICT	cd_convenio_atend_w,
			cd_categoria_atend_w
		from	atend_categoria_convenio
		where	nr_seq_interno = obter_atecaco_atendimento(nr_atendimento_w);
		exception  when others
			then
			cd_convenio_atend_w 	:=  0;
			cd_categoria_atend_w	:= '0';	
		end;	
		
		if (cd_setor_atend_w > 0) and ((ie_alta_job_apac_w = 'S') or (qt_apac_atend_w = 0)) then
			begin
			ie_dia_semana_w		:= pkg_date_utils.get_WeekDay(clock_timestamp());
			cd_especialidade_w	:= substr(obter_especialidade_medico(cd_medico_resp_w, 'C'),1,10);
			ie_tipo_guia_w		:= substr(obter_tipo_guia_convenio(nr_atendimento_w),1,20);
			
			open	c02;
			loop
			fetch	c02 into
				cd_motivo_alta_w,
				qt_minuto_w,
				ie_tempo_minimo_w,
				nr_Seq_regra_w,
				cd_processo_alta_w,
				ie_considerar_evolucao_w,
				ie_tempo_espera_pa_w,
				ie_inicio_consulta_pa_w,
				ie_substituir_alta_w,
				ie_somente_sem_alta_w,
				ie_conta_definitiva_w,
				qt_dias_pend_amostra_w,
				ie_pend_amostra_w,
				ie_saida_real_w,
				ie_administrado_adep_w,
				ie_solucao_pendente_w,
				ie_data_estorno_w,
				ie_data_alta_medica_w,
				ie_somente_com_alta_medica_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				cd_motivo_alta_w	:= cd_motivo_alta_w;
			end loop;
			close c02;
			
			if ((((coalesce(ie_somente_sem_alta_w,'N') = 'S') and (coalesce(obter_se_atendimento_alta(nr_atendimento_w),'N') = 'N')) or (coalesce(ie_somente_sem_alta_w,'N') = 'N')) and
				 (((coalesce(ie_somente_com_alta_medica_w,'N') = 'S') and (dt_alta_medico_w IS NOT NULL AND dt_alta_medico_w::text <> '')) or (coalesce(ie_somente_com_alta_medica_w,'N') = 'N'))) then
			
				select	obter_convenio_atendimento(nr_atendimento_w)
				into STRICT	cd_convenio_w
				;
				
				
				select 	count(*)
				into STRICT	qt_itens_regra_conv_w
				from	regra_alta_auto_convenio
				where	nr_seq_regra_alta = nr_Seq_regra_w;
				
				ie_gerar_conv_w	:= 'S';
				if (qt_itens_regra_conv_w > 0) then
				
					ie_gerar_conv_w	:= 'N';
					
					select 	count(*)
					into STRICT	qt_itens_regra_conv_w
					from	regra_alta_auto_convenio
					where	nr_seq_regra_alta = nr_Seq_regra_w
					and	cd_convenio = cd_convenio_w;	
					
					if (qt_itens_regra_conv_w > 0) then
						ie_gerar_conv_w	:= 'S';				
					end if;			
				end if;
				
				qt_minuto_atual_w := obter_minutos_alta_regra_proc(nr_Seq_regra_w,nr_atendimento_w);

				if (qt_minuto_atual_w > qt_minuto_w) then
					qt_minuto_w := qt_minuto_atual_w;
				end if;
												
				if (ie_data_estorno_w = 'S' or ie_data_alta_medica_w = 'S') then
					if (ie_considerar_evolucao_w = 'S')then
						 select		coalesce(max(dt_evolucao),coalesce(CASE WHEN ie_data_alta_medica_w='S' THEN obter_ultima_dt_alta(nr_atendimento_w)   ELSE obter_ultima_dt_estorno(nr_atendimento_w) END ,dt_entrada_w))
						 into STRICT		dt_filtro_w
						 from    	evolucao_paciente
						where		nr_atendimento = nr_atendimento_w;
					elsif (ie_considerar_evolucao_w = 'N') then
						select	coalesce(CASE WHEN ie_data_alta_medica_w='S' THEN obter_ultima_dt_alta(nr_atendimento_w)   ELSE obter_ultima_dt_estorno(nr_atendimento_w) END ,dt_entrada_w)
						into STRICT	dt_filtro_w
						;
					end if;				
				else
					if (ie_considerar_evolucao_w = 'S')then
						 select		coalesce(max(dt_evolucao),dt_entrada_w)
						 into STRICT		dt_filtro_w
						 from    	evolucao_paciente
						where		nr_atendimento = nr_atendimento_w;
					elsif (ie_considerar_evolucao_w = 'N') then
							dt_filtro_w := dt_entrada_w;
					end if;				
				end if;
				
				
				if (ie_conta_definitiva_w = 'S') then
					select	max(obter_se_conta_def(nr_atendimento_w))
					into STRICT	ie_conta_def_w	
					;
				else
					ie_conta_def_w	:= 'S';
				end if;
				
				IF (coalesce(ie_pend_amostra_w,'N') = 'S') and (coalesce(qt_dias_pend_amostra_w,0) > 0) then
				
					select	coalesce(max('S'),'N')
					into STRICT	ie_prescr_ok_w
					from	prescr_medica a
					where	nr_atendimento  = nr_atendimento_w
					and (obter_dias_entre_datas(a.dt_prescricao,clock_timestamp())+1 > coalesce(qt_dias_pend_amostra_w,-1) or coalesce(qt_dias_pend_amostra_w,-1) = -1)				
					and	a.dt_prescricao = ( SELECT max(x.dt_prescricao) from prescr_medica x where x.nr_atendimento = nr_atendimento_w);
				
					if (ie_prescr_ok_w = 'S') then
						select	coalesce(max('S'),'N')
						into STRICT	ie_prescr_ok_w
						from	prescr_medica a
						where	nr_atendimento  = nr_atendimento_w
						and (obter_dias_entre_datas(a.dt_prescricao,clock_timestamp())+1 > coalesce(qt_dias_pend_amostra_w,-1) or coalesce(qt_dias_pend_amostra_w,-1) = -1)				
						and	a.dt_prescricao = ( SELECT max(x.dt_prescricao) from prescr_medica x where x.nr_atendimento = nr_atendimento_w)
						and	not exists (	select 1
									from	prescr_procedimento b
									where	a.nr_prescricao = b.nr_prescricao
									and	coalesce(b.ie_pendente_amostra,'N') = 'S');
					else
						ie_prescr_ok_w := 'S';
					end if;
				else
					ie_prescr_ok_w := 'S';
					
				end if;
				
				if (ie_administrado_adep_w = 'S') then
					BEGIN
					    ie_consistir_proc_pend_w := Obter_param_Usuario(3111, 107, obter_perfil_ativo, 'TASY', cd_estabelecimento_w, ie_consistir_proc_pend_w);
				
						SELECT 	'N'
						INTO STRICT    ie_itens_adep_nao_adm_w
						FROM    itens_nao_administrados_v
						WHERE   ((ie_consistir_proc_pend_w = 'S') OR (ie_tipo = 1))
						AND     nr_atendimento = nr_atendimento_w  LIMIT 1;
				    exception
				    when others then
					    ie_itens_adep_nao_adm_w := 'S';
				    end;				
				end if;
				
				if (ie_solucao_pendente_w = 'S') then
					BEGIN
						SELECT	'S'
						INTO STRICT    ie_solucao_pend_w
						FROM	prescr_solucao a, 
							prescr_medica b 
						WHERE	a.nr_prescricao = b.nr_prescricao 
						AND	coalesce(b.dt_suspensao::text, '') = '' 
						AND	coalesce(a.dt_suspensao::text, '') = ''
						AND	b.nr_atendimento = nr_atendimento_w
						and	obter_status_solucao_prescr(1, a.nr_prescricao, a.nr_seq_solucao) IN ('I','R', 'INT','N')  LIMIT 1;
					exception
					when others then
					    ie_solucao_pend_w := 'N';
					end;
				end if;
				
					
				if  (((ie_gerar_conv_w = 'S') and (ie_tempo_espera_pa_w = 'N') and (qt_minuto_w > 0) and
					(((clock_timestamp() - dt_filtro_w) * 1440) > qt_minuto_w)) or
					((ie_considerar_evolucao_w = 'N') and (ie_tempo_espera_pa_w = 'S') and (hr_espera_w > qt_minuto_w) and
					(((ie_inicio_consulta_pa_w = 'S' and 
					  coalesce(hr_inicio_consulta_w::text, '') = '') or (ie_inicio_consulta_pa_w = 'N'))))) AND (ie_conta_def_w = 'S') and (ie_prescr_ok_w = 'S') and
					((ie_administrado_adep_w = 'N') or (ie_administrado_adep_w = 'S' AND ie_itens_adep_nao_adm_w = 'S')) and
					((ie_solucao_pendente_w = 'N') or (ie_solucao_pendente_w = 'S' AND ie_solucao_pend_w = 'N'))
					then
					--begin

					/* Edilson em 05/05/2006 OS 32959 */

				
					
					select	max(CASE WHEN ie_tempo_minimo_w='S' THEN ((dt_entrada_w) + qt_minuto_w/1440)  ELSE null END )
					into STRICT	dt_alta_w
					;
								
					CALL gera_diagnostico_alta_externo(nr_atendimento_w,cd_setor_atend_w, 'TASY');											

					if	(ie_substituir_alta_w = 'S' AND qt_minuto_w = 0) then
						dt_alta_w := clock_timestamp();
					end if;
					
					if (ie_data_estorno_w = 'S') then
						dt_data_estorno_ww := obter_ultima_dt_estorno(nr_atendimento_w);
						
						if (dt_data_estorno_ww IS NOT NULL AND dt_data_estorno_ww::text <> '') then
							select	max(dt_data_estorno_ww + coalesce(qt_minuto_w,0)/1440)
							into STRICT	dt_alta_w
							;
						end if;
						
					end if;
					
					if (ie_data_alta_medica_w = 'S') then
						dt_alta_w := dt_filtro_w + qt_minuto_w/1440;
					end if;
					
					if	((coalesce(ie_gerar_pacote_alta_w,'N') = 'S') or
						((coalesce(ie_gerar_pacote_alta_w,'N') = 'R') and (Obter_Regra_Pacote_Alta(cd_estabelecimento_w,ie_tipo_atendimento_w) = 'S'))) then					
					
						open C03;
						loop
						fetch C03 into	
							nr_interno_conta_w,
							cd_convenio_parametro_w,
							cd_categoria_parametro_w;
						EXIT WHEN NOT FOUND; /* apply on C03 */		
							begin
							select	coalesce(max(ie_permite_gerar_pacote),'N')
							into STRICT	ie_permite_gerar_pacote_w
							from   	categoria_convenio
							where  	cd_convenio	= cd_convenio_parametro_w	
							and    	cd_categoria	= cd_categoria_parametro_w;
																			
							if (coalesce(ie_permite_gerar_pacote_w,'N') = 'S') and (cd_convenio_atend_w  = cd_convenio_parametro_w) and (cd_categoria_atend_w = cd_categoria_parametro_w) then
							
							CALL calcular_pacote(nr_atendimento_w,
									nr_interno_conta_w,
									cd_convenio_parametro_w,
									cd_categoria_parametro_w,
									'Tasy',
									'S','S','S','S','N');
							end if;
							end;
						end loop;
						close c03;
					
					end if;	
					
					CALL saida_setor_servico(nr_atendimento_w,
						cd_setor_atend_w, cd_motivo_alta_w, dt_alta_w , 'TASY');
					
					begin										
					    	open C20;
						loop
						fetch C20 into ds_mensagem_sms_w,
							nr_seq_regra_envio_w;
						EXIT WHEN NOT FOUND; /* apply on C20 */
			
							select  count(*)
							into STRICT 	qt_retorno_pac_w
							from    atend_regra_sms c
							where   c.nr_atendimento = nr_atendimento_w
							and     c.ie_envio_retorno = 'R';
			
							if (qt_retorno_pac_w < 2) then 			
								ie_utilizar_ddi_w := OBTER_VALOR_PARAM_USUARIO(0,214,0,wheb_usuario_pck.get_nm_usuario,cd_estabelecimento_w);
				
								select	CASE WHEN ie_utilizar_ddi_w='S' THEN substr(max(obter_dados_pf(cd_pessoa_fisica_w,'TCD')),1,15)  ELSE substr(max(obter_dados_pf(cd_pessoa_fisica_w,'TCI')),1,15) END
								into STRICT	nr_telefone_w
								;
				
								ds_remetente_w := substr(obter_nome_estabelecimento(cd_estabelecimento_w),1,255);
								ds_mensagem_sms_w	:= substr(replace(ds_mensagem_sms_w, '@paciente', obter_nome_pf(cd_pessoa_fisica_w)),1,140);
				
								CALL enviar_sms_atend(ds_remetente_w	,nr_telefone_w, ds_mensagem_sms_w, nr_seq_regra_envio_w, nr_atendimento_w, 'E', wheb_usuario_pck.get_nm_usuario, 'S');
							end if;
						end loop;
						close C20;
					exception
					when others then
						select	nextval('log_envio_sms_seq')
						into STRICT	nr_seq_log_sms_w
						;
						ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						if (coalesce(nr_telefone_w::text, '') = '') then
							ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
						elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
							ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
						else
							ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
						end if;					
					
						insert into log_envio_sms(
							nr_sequencia,
							dt_atualizacao_nrec,
							nm_usuario_nrec,	
							dt_atualizacao,
							nm_usuario,
							dt_envio, 							
							nr_telefone,
							ds_mensagem,
							id_sms,
							nr_atendimento
							)
						values (
							nr_seq_log_sms_w,
							clock_timestamp(),
							'Tasy',
							clock_timestamp(),
							'Tasy',
							clock_timestamp(),							
							coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
							ds_log_sms_w,
							0,
							nr_atendimento_w);
					end;	
					
					select 	coalesce(max(ie_inativa_item), 'S')
					into STRICT	ie_inativa_item_w
					from 	motivo_alta
					where 	cd_motivo_alta = cd_motivo_alta_w;
					
					if (ie_susp_prescricoes_alta_w = 'S') and (coalesce(cd_motivo_alta_w, 0) > 0) and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (ie_inativa_item_w = 'S') then
						CALL cpoe_atualizar_dt_fim_alta(nr_atendimento_w, dt_alta_w , 'TASY', null, 'S');										
					elsif (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (coalesce(cd_motivo_alta_w, 0) > 0) and (ie_inativa_item_w = 'S') then
						CALL cpoe_atualizar_ie_baixado_alta('TASY', nr_atendimento_w, dt_alta_w);
					end if;
					
					if (cd_processo_alta_w > 0) then
						CALL Gerar_Processo_Alta(nr_atendimento_w, cd_processo_alta_w, 'TASY');
					end if;
					begin
					nr_atendimento_w:= nr_atendimento_w;
					exception when others then
						nr_atendimento_w := nr_atendimento_w;
						ds_erro_w	:= SQLERRM(SQLSTATE);					
						
						insert into log_mov(
							dt_atualizacao,
							nm_usuario,
							cd_log,
							ds_log)
						values (	clock_timestamp(),
							'AltaAutomatica',
							8,
							WHEB_MENSAGEM_PCK.get_texto(305703,
								'NR_ATENDIMENTO_W='|| NR_ATENDIMENTO_W ||
								';CD_SETOR_ATEND_W='|| CD_SETOR_ATEND_W ||
								';CD_MOTIVO_ALTA_W='|| CD_MOTIVO_ALTA_W ||
								';DT_ALTA_W='|| to_char(dt_alta_w,'dd/mm/yyyy hh24:mi:ss') ||
								';DS_ERRO_W='|| DS_ERRO_W)); /*Atend: #@NR_ATENDIMENTO_W#@ Setor: #@CD_SETOR_ATEND_W#@ Motivo: #@CD_MOTIVO_ALTA_W#@ Data: #@DT_ALTA_W#@ #@DS_ERRO_W#@*/
					end;
					
					select 	count(*)
					into STRICT 	nr_setores_w
					from 	atend_paciente_unidade
					where 	nr_atendimento	= nr_atendimento_w
					and 	coalesce(dt_saida_unidade::text, '') = '';
				
					if (ie_saida_real_w = 'S') and (nr_setores_w = 0) then
						CALL gerar_saida_real('AltaAutomatica', nr_atendimento_w, clock_timestamp(), Wheb_mensagem_pck.get_Texto(305705));
														/*'Saida real gerada pela alta automatica'*/
														
					end if;
				end if;
			else
				if ((coalesce(ie_somente_sem_alta_w,'N') = 'S') and (coalesce(obter_se_atendimento_alta(nr_atendimento_w),'N') = 'S')) then
					insert into log_mov(
						dt_atualizacao,
						nm_usuario,
						cd_log,
						ds_log)
					values (	clock_timestamp(),
						'AltaAutomatica',
						8,
						WHEB_MENSAGEM_PCK.get_texto(305708,
						'NR_ATENDIMENTO_W='|| NR_ATENDIMENTO_W ||
						';CD_SETOR_ATEND_W='|| CD_SETOR_ATEND_W ||
						';CD_MOTIVO_ALTA_W='|| CD_MOTIVO_ALTA_W ||
						';DT_ALTA_W='|| to_char(dt_alta_w,'dd/mm/yyyy hh24:mi:ss'))); /*Atend: #@NR_ATENDIMENTO_W#@ Setor: #@CD_SETOR_ATEND_W#@ Motivo: #@CD_MOTIVO_ALTA_W#@ Data: #@DT_ALTA_W#@ Alta nao gerada, pois a regra esta para pegar apenas atendimentos sem data de alta*/
					
				else
					if ((coalesce(ie_somente_com_alta_medica_w,'N') = 'S') and (coalesce(dt_alta_medico_w::text, '') = '')) then
						insert into log_mov(
							dt_atualizacao,
							nm_usuario,
							cd_log,
							ds_log)
						values (	clock_timestamp(),
							'AltaAutomatica',
							8,
							WHEB_MENSAGEM_PCK.get_texto(876613,
							'NR_ATENDIMENTO_W='|| NR_ATENDIMENTO_W ||
							';CD_SETOR_ATEND_W='|| CD_SETOR_ATEND_W ||
							';CD_MOTIVO_ALTA_W='|| CD_MOTIVO_ALTA_W ||
							';DT_ALTA_W='|| to_char(dt_alta_w,'dd/mm/yyyy hh24:mi:ss'))); /*Atend: #@NR_ATENDIMENTO_W#@ Setor: #@CD_SETOR_ATEND_W#@ Motivo: #@CD_MOTIVO_ALTA_W#@ Data: #@DT_ALTA_W#@ Alta nao gerada, pois a regra esta para pegar apenas atendimentos com alta medica.*/
					
					end if;
				end if;
			end if;
			end;
		end if;
		end;

		select	count(*)
		into STRICT	qt_reg_w
		from	dis_regra_setor
		where	cd_setor_atendimento = cd_setor_atend_w;
	
		if (coalesce(obter_se_atendimento_alta(nr_atendimento_w),'N') = 'S') then
		
			if (qt_reg_w > 0) then
				CALL intdisp_gerar_movimento(nr_atendimento_w, 'EPD', null, null, 'S');
			end if;

			select	max(b.cd_unidade_basica),
					max(b.cd_unidade_compl),
					max(b.cd_unidade_basica) || ' - ' || max(b.cd_unidade_compl)
			into STRICT    cd_unidade_basica_w,
					cd_unidade_compl_w,
					ds_unidade_compl_w
			from	atend_paciente_unidade a,
					unidade_atendimento b
			where	a.nr_atendimento	= nr_atendimento_w
            and     a.nr_seq_interno = (SELECT obter_atepacu_paciente(nr_atendimento_w, 'A') )
			and		a.cd_setor_atendimento = b.cd_setor_atendimento
			and		a.CD_UNIDADE_BASICA = b.CD_UNIDADE_BASICA
			and		a.CD_UNIDADE_COMPL =  b.CD_UNIDADE_COMPL;			

			CALL gerar_int_dankia_pck.dankia_gerar_estornar_alta(nr_atendimento_w, cd_setor_atend_w, ds_unidade_compl_w, cd_estabelecimento_w, 'A', 'DANKIA');

		end if;
		
	end loop;
	close 	c01;
	end;
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_alta_automatica () FROM PUBLIC;

