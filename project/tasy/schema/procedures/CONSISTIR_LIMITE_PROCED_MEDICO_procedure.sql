-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_limite_proced_medico ( cd_procedimento_p bigint, nr_seq_proc_interno_p bigint, cd_convenio_p bigint, cd_medico_exec_p text, ie_acao_regra_p INOUT text, ds_erro_p INOUT text, cd_medico_exclusivo_p INOUT text) AS $body$
DECLARE

 
ie_acao_regra_w			varchar(1);
ie_periodo_w			varchar(1);
qt_limite_w			bigint;
cd_medico_exclusivo_w		varchar(10);
qt_proced_w			bigint;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
cd_grupo_proc_w			bigint;
cd_classif_proc_interno_w		bigint;
nr_seq_proc_interno_w		bigint;
cd_procedimento_w		bigint;
cd_convenio_w			bigint;
nm_medico_w			varchar(100);
qt_existe_w			bigint;
qt_regra_w			bigint;


BEGIN 
 
select	count(*) 
into STRICT	qt_existe_w -- 3 
from	regra_limite_proced_medic;
 
if (qt_existe_w > 0) then 
	begin 
	nm_medico_W := substr(obter_nome_medico(cd_medico_exec_p, 'G'),1,100);
 
	select	max(cd_area_procedimento), 
		max(cd_especialidade), 
		max(cd_grupo_proc) 
	into STRICT	cd_area_procedimento_W, 
		cd_especialidade_w, 
		cd_grupo_proc_w 
	from	estrutura_procedimento_v 
	where	cd_procedimento	= cd_procedimento_p;
 
	If (nr_seq_proc_interno_p > 0) then 
		cd_classif_proc_interno_w := Obter_Proc_Interno_Classif(nr_seq_proc_interno_p);
	end if;
 
	/* inserido por causa da OS	591514 */
 
	select	count(*) 
	into STRICT	qt_regra_w		 
	from	regra_limite_proced_medic 
	where	coalesce(cd_area_procedimento, cd_area_procedimento_W)	= cd_area_procedimento_W 
	and	coalesce(cd_especialidade, cd_especialidade_w)		= cd_especialidade_w 
	and	coalesce(cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w 
	and	coalesce(cd_procedimento, cd_procedimento_p)		= cd_procedimento_p 
	and	coalesce(nr_seq_proc_interno, nr_seq_proc_interno_p)		= nr_seq_proc_interno_p 
	and	coalesce(Obter_Proc_Interno_Classif(nr_seq_proc_interno), cd_classif_proc_interno_w)	= coalesce(cd_classif_proc_interno_w, Obter_Proc_Interno_Classif(nr_seq_proc_interno)) 
	and	coalesce(cd_convenio, cd_convenio_p)			= cd_convenio_p 
	and	coalesce(cd_medico_exec, cd_medico_exec_p)		= cd_medico_exec_p;
	 
		if (qt_regra_w > 0) 	then 
			begin 
				select	max(upper(ie_periodo)), 
					max(qt_limite), 
					max(upper(ie_acao_regra)), 
					max(cd_medico_exclusivo), 
					max(cd_area_procedimento), 
					max(cd_especialidade), 
					max(cd_grupo_proc),	 
					max(cd_procedimento), 
					max(nr_seq_proc_interno), 
					max(cd_convenio) 
				into STRICT	ie_periodo_w, 
					qt_limite_w, 
					ie_acao_regra_w, 
					cd_medico_exclusivo_w, 
					cd_area_procedimento_w, 
					cd_especialidade_W, 
					cd_grupo_proc_w, 
					cd_procedimento_w, 
					nr_seq_proc_interno_w, 
					cd_convenio_w 
				from	regra_limite_proced_medic 
				where	coalesce(cd_area_procedimento, cd_area_procedimento_W)	= cd_area_procedimento_W 
				and	coalesce(cd_especialidade, cd_especialidade_w)		= cd_especialidade_w 
				and	coalesce(cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w 
				and	coalesce(cd_procedimento, cd_procedimento_p)		= cd_procedimento_p 
				and	coalesce(nr_seq_proc_interno, nr_seq_proc_interno_p)		= nr_seq_proc_interno_p 
				and	coalesce(Obter_Proc_Interno_Classif(nr_seq_proc_interno), cd_classif_proc_interno_w)	= coalesce(cd_classif_proc_interno_w, Obter_Proc_Interno_Classif(nr_seq_proc_interno)) 
				and	coalesce(cd_convenio, cd_convenio_p)			= cd_convenio_p 
				and	coalesce(cd_medico_exec, cd_medico_exec_p)		= cd_medico_exec_p;
 
				select	count(*) 
				into STRICT	qt_proced_w 
				from	prescr_procedimento a, 
					estrutura_procedimento_v b, 
					prescr_medica c 
				where	trunc(a.dt_baixa,'dd') between obter_limite_regra_proc_medico(clock_timestamp(), ie_periodo_w, 'I') 
				and 	obter_limite_regra_proc_medico(clock_timestamp(), ie_periodo_w, 'F') 
				and	a.cd_procedimento					= b.cd_procedimento 
				and	a.ie_origem_proced					= b.ie_origem_proced 
				and	coalesce(a.cd_procedimento, cd_procedimento_w)		= coalesce(cd_procedimento_w, a.cd_procedimento) 
				and	coalesce(b.cd_grupo_proc, cd_grupo_proc_w)		= coalesce(cd_grupo_proc_w, b.cd_grupo_proc) 
				and	coalesce(b.cd_especialidade, cd_especialidade_w)		= coalesce(cd_especialidade_w, b.cd_especialidade) 
				and	coalesce(b.cd_area_procedimento, cd_area_procedimento_W)	= coalesce(cd_area_procedimento_W, b.cd_area_procedimento) 
				and	coalesce(a.nr_seq_proc_interno, nr_seq_proc_interno_w) 	= coalesce(nr_seq_proc_interno_w, a.nr_seq_proc_interno) 
				and	coalesce(Obter_Proc_Interno_Classif(nr_seq_proc_interno), cd_classif_proc_interno_w)	= coalesce(cd_classif_proc_interno_w, Obter_Proc_Interno_Classif(nr_seq_proc_interno)) 
				and	coalesce(cd_convenio, cd_convenio_w)			= coalesce(cd_convenio_w, cd_convenio) 
				and	coalesce(cd_medico_exec, cd_medico_exec_p)		= cd_medico_exec_p 
				and   coalesce(c.dt_suspensao::text, '') = '' 
				and   (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '');
 
				if (qt_proced_w >= qt_limite_w) then 
					if (ie_acao_regra_w = 'A') then 
						if (ie_periodo_w = 'S') then 
							ds_erro_p := 	wheb_mensagem_pck.get_texto(281804,'DESC_PROCEDIMENTO='||substr(obter_desc_procedimento(cd_procedimento_p, null),1,50) ||';NOME_PF='||substr(obter_nome_pf(cd_medico_exec_p),1,100));
 
							If (cd_medico_exclusivo_w IS NOT NULL AND cd_medico_exclusivo_w::text <> '') then 
								ds_erro_p := ds_erro_p ||wheb_mensagem_pck.get_texto(281808,'NOME_PF='||substr(obter_nome_pf(cd_medico_exclusivo_w),1,20));
							else	 
								ds_erro_p := ds_erro_p || '!';
							end if;
 
							ds_erro_p := ds_erro_p || '! '||wheb_mensagem_pck.get_texto(281796,null);
						else 
							ds_erro_p := 	wheb_mensagem_pck.get_texto(281811,'DESC_PROCEDIMENTO='||substr(obter_desc_procedimento(cd_procedimento_p, null),1,50) ||';NOME_PF='||substr(obter_nome_pf(cd_medico_exec_p),1,100));
 
							If (cd_medico_exclusivo_w IS NOT NULL AND cd_medico_exclusivo_w::text <> '') then 
								ds_erro_p := ds_erro_p ||wheb_mensagem_pck.get_texto(281808,'NOME_PF='||substr(obter_nome_pf(cd_medico_exclusivo_w),1,20));
							else	 
								ds_erro_p := ds_erro_p || '!';
							end if;
 
							ds_erro_p := ds_erro_p || '! '||wheb_mensagem_pck.get_texto(281796,null);
						end if;
					else		 
						ds_erro_p :=	wheb_mensagem_pck.get_texto(281809,'NOME_MEDICO='||substr(obter_nome_medico(cd_medico_exec_p, 'G'),1,20) ||';DESC_PROCEDIMENTO='|| substr(obter_desc_procedimento(cd_procedimento_p, null),1,50));
						If (cd_medico_exclusivo_w IS NOT NULL AND cd_medico_exclusivo_w::text <> '') then 
							ds_erro_p := ds_erro_p || '.';
							ds_erro_p := ds_erro_p ||wheb_mensagem_pck.get_texto(281808,'NOME_PF='||substr(obter_nome_medico(cd_medico_exclusivo_w, 'G'),1,20));
						else	 
							ds_erro_p := ds_erro_p || '!';
						end if;
 
						ds_erro_p := ds_erro_p || '! '||wheb_mensagem_pck.get_texto(281796,null);
					end if;
					cd_medico_exclusivo_p := cd_medico_exclusivo_w;
					ie_acao_regra_p := ie_acao_regra_w;
				end if;
			end;
		end if;
	end;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_limite_proced_medico ( cd_procedimento_p bigint, nr_seq_proc_interno_p bigint, cd_convenio_p bigint, cd_medico_exec_p text, ie_acao_regra_p INOUT text, ds_erro_p INOUT text, cd_medico_exclusivo_p INOUT text) FROM PUBLIC;

