-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE alterar_dados_cirurgia ( nr_cirurgia_p bigint, ie_opcao_p bigint ) AS $body$
DECLARE

				
/*
ie_opcao_p
1 - Desfazer inicio cirurgia
2 - Desfazer final cirurgia
3 - Interromper cirurgia
*/
dt_entrada_unidade_w		timestamp;
nr_atendimento_w			   bigint;
nr_seq_agenda_w			    agenda_paciente.nr_sequencia%type;
cd_estabelecimento_w		integer;
nm_usuario_w			   varchar(15);
dt_inicio_real_w			   timestamp;
dt_termino_w			   timestamp;	
dt_cancelamento_w		   timestamp;
ie_status_w			   varchar(1);
cd_status_cirurgia_w		varchar(10)		:= '';
ie_grava_log_w			   varchar(1);
ie_excluir_classif_w			varchar(1);
ie_altera_interrompida_w 		varchar(2);
ds_sep_bv_w			varchar(100);
ds_param_integ_hl7_w		   varchar(4000);
nr_seq_interno_old_w		   bigint;
nr_seq_interno_w			   bigint;
cd_setor_atendimento_w		integer;
cd_unidade_basica_w		varchar(10);
cd_unidade_compl_w		varchar(10);
ds_log_hist_cir_w			   varchar(2000);
ie_status_desfaz_final_w		varchar(15);
nr_seq_evento_w			   bigint;
dt_liberacao_w			      timestamp;
ie_momento_integracao_w		varchar(15);
qt_agenda_espera_w         		bigint;
nr_seq_evento_inicio_w         bigint;
ie_gerar_evolucao_cirurgia_w varchar(1);
cd_evolucao_w bigint;
c01 CURSOR FOR
         SELECT a.nr_sequencia,
                  a.dt_liberacao
         from  evento_cirurgia_paciente a,
                  evento_cirurgia b
         where a.nr_seq_evento     = b.nr_sequencia
         and ((coalesce(b.ie_inicia_cirurgia,'N') = 'S') or (b.nr_sequencia = nr_seq_evento_inicio_w))
         and coalesce(a.ie_situacao,'A')  = 'A'
         and a.nr_cirurgia             = nr_cirurgia_p;


BEGIN

nm_usuario_w	:= wheb_usuario_pck.get_nm_usuario;

ds_sep_bv_w := obter_separador_bv;

select	dt_entrada_unidade,
	nr_atendimento,
	cd_estabelecimento
into STRICT	dt_entrada_unidade_w,
	nr_atendimento_w,
	cd_estabelecimento_w
from	cirurgia
where	nr_cirurgia	=	nr_cirurgia_p;	

SELECT	coalesce(MAX(ie_momento_integracao),'IF')
INTO STRICT	ie_momento_integracao_w
FROM	parametros_pepo
WHERE	cd_estabelecimento = cd_estabelecimento_w;

ie_grava_log_w := obter_param_usuario(900, 202, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_grava_log_w); --lwilbert - este log sera customizado na OS 569728
ie_gerar_evolucao_cirurgia_w := obter_param_usuario(281, 1627, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_gerar_evolucao_cirurgia_w);
if (ie_opcao_p = 1) then

	cd_status_cirurgia_w := obter_param_usuario(900, 199, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, cd_status_cirurgia_w);
   nr_seq_evento_inicio_w := obter_param_usuario(872, 75, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, nr_seq_evento_inicio_w);

	SELECT		MAX(nr_seq_interno),
			MAX(a.cd_setor_atendimento),
			MAX(cd_unidade_basica),
			MAX(cd_unidade_compl)
	INTO STRICT		nr_seq_interno_old_w,
			cd_setor_atendimento_w,
			cd_unidade_basica_w,
			cd_unidade_compl_w
	FROM		atend_paciente_unidade a,
			cirurgia b
	WHERE		a.nr_atendimento = b.nr_atendimento
	AND		a.dt_entrada_unidade = b.dt_entrada_unidade
	AND		b.nr_cirurgia = nr_cirurgia_p;
	
	update		cirurgia
	set		ie_status_cirurgia	= 1,
			dt_entrada_unidade  = NULL,
			dt_inicio_real   	 = NULL
	where		nr_cirurgia      	= nr_cirurgia_p;
	
	delete  from cir_paciente_atraso
	where 	nr_cirurgia  = nr_cirurgia_p;

	if (dt_entrada_unidade_w IS NOT NULL AND dt_entrada_unidade_w::text <> '') and (nr_atendimento_w > 0) then
		begin
		
		if (ie_momento_integracao_w = 'IF') then
			begin
			ds_param_integ_hl7_w :=	'cd_pessoa_fisica=' || obter_pessoa_atendimento(nr_atendimento_w,'C') || ds_sep_bv_w ||
									'cd_setor_atendimento=' || cd_setor_atendimento_w || ds_sep_bv_w ||
									'cd_unidade_basica=' || cd_unidade_basica_w || ds_sep_bv_w ||
									'cd_unidade_compl=' || cd_unidade_compl_w || ds_sep_bv_w ||
									'cd_estabelecimento=' || cd_estabelecimento_w || ds_sep_bv_w;
			CALL gravar_agend_integracao(21, ds_param_integ_hl7_w, cd_setor_atendimento_w);
			
			exception
			when others then
					null;
			end;
		end if;
		
		begin
			delete	FROM atend_paciente_unidade
			where	nr_atendimento		= nr_atendimento_w
			and	dt_entrada_unidade	= dt_entrada_unidade_w;
		exception
		when others then
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(352990);
		end;

		end;
	end if;
	
	select 	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_agenda_w
	from	agenda_paciente
	where	nr_cirurgia      	= nr_cirurgia_p;
	
	if (cd_status_cirurgia_w IS NOT NULL AND cd_status_cirurgia_w::text <> '') then
		update	agenda_paciente
		set		ie_status_agenda = cd_status_cirurgia_w
		where	nr_sequencia = nr_seq_agenda_w;
	end if;	
	
	open C01;
	loop
	fetch C01 into	
		nr_seq_evento_w,
		dt_liberacao_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then
			update	evento_cirurgia_paciente
			set	dt_inativacao 		= clock_timestamp(),
				nm_usuario_inativacao 	= nm_usuario_w,
				ie_situacao		= 'I'
			where	nr_sequencia 		= nr_seq_evento_w;
		else
			CALL excluir_evento_cirurgia_pac(nr_seq_evento_w);
		end if;
		commit;	
		end;
	end loop;
	close C01;
	
	
	
	commit;
	
	if ((ie_grava_log_w = 'S') and (obter_se_possui_motivo_alt_cir('V','') = 'N')) then
		ds_log_hist_cir_w := substr(	' '|| wheb_mensagem_pck.get_texto(455603) ||' : '|| obter_funcao_ativa || chr(13) ||chr(10)||				--455603 Funcao ativa
					' '|| wheb_mensagem_pck.get_texto(455610) ||': '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,1500);		--455610 CallStack
		CALL gerar_cirurgia_hist(nr_cirurgia_p,'DIC',wheb_usuario_pck.get_nm_usuario,wheb_mensagem_pck.get_texto(455600)); --455600 Desfazer inicio cirurgia
	end if;
	if (ie_gerar_evolucao_cirurgia_w = 'S' and (cd_evolucao_w IS NOT NULL AND cd_evolucao_w::text <> '')) then	
		 delete from clinical_note_soap_data where cd_evolucao = cd_evolucao_w and ie_med_rec_type ='SURGERY' and ie_stage = 1 and ie_soap_type = 'P' and nr_seq_med_item = nr_cirurgia_p;
		 CALL clinical_notes_pck.soap_data_after_delete(cd_evolucao_w);
	end if;	

elsif (ie_opcao_p = 2) then

	cd_status_cirurgia_w := obter_param_usuario(900, 198, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, cd_status_cirurgia_w);
	ie_excluir_classif_w := obter_param_usuario(872, 408, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_excluir_classif_w);
	ie_status_desfaz_final_w := obter_param_usuario(900, 329, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_status_desfaz_final_w);
	
	if (ie_excluir_classif_w = 'S') then
	
		update	cirurgia
		set	dt_termino		 = NULL,
			cd_tipo_cirurgia		 = NULL,
			ie_anat_patol		 = NULL,
			ie_trauma			 = NULL,
			ie_ortese_protese		 = NULL,
			ie_sangue		 = NULL,
			ie_antibiotico		 = NULL,
         nm_usuario_antibiotico  = NULL,
			ds_antibiotico		 = NULL,
			nr_min_duracao_real	 = NULL
		where	nr_cirurgia		= nr_cirurgia_p;
	
	else
		update	cirurgia
		set	dt_termino		 = NULL,
			ie_anat_patol		 = NULL,
			ie_trauma			 = NULL,
			ie_ortese_protese		 = NULL,
			ie_sangue		 = NULL,
			ie_antibiotico		 = NULL,
         nm_usuario_antibiotico  = NULL,
			ds_antibiotico		 = NULL,
			nr_min_duracao_real	 = NULL
		where	nr_cirurgia		= nr_cirurgia_p;
	end if;

	if (dt_entrada_unidade_w IS NOT NULL AND dt_entrada_unidade_w::text <> '') and (nr_atendimento_w > 0) then
		update	atend_paciente_unidade
		set		dt_saida_unidade		 = NULL
		where	nr_atendimento		= nr_atendimento_w
		and	dt_entrada_unidade		= dt_entrada_unidade_w;
		
		if (ie_momento_integracao_w = 'IF') then
			begin
			select	coalesce(max(nr_seq_interno),0),
				max(cd_setor_atendimento)
			into STRICT	nr_seq_interno_w,
				cd_setor_atendimento_w
			from	atend_paciente_unidade
			where	nr_atendimento		= nr_atendimento_w
			and	dt_entrada_unidade	= dt_entrada_unidade_w;
			
			if (nr_seq_interno_w > 0) then
				ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_w || ds_sep_bv_w ||
										'nr_seq_interno=' || nr_seq_interno_w || ds_sep_bv_w||
										'cd_pessoa_fisica=' || obter_pessoa_atendimento(nr_atendimento_w,'C') || ds_sep_bv_w;
				CALL gravar_agend_integracao(20, ds_param_integ_hl7_w, cd_setor_atendimento_w);
			end if;
			
			exception
			when others then
				null;
			end;
		end if;
	end if;

	
	select 	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_agenda_w
	from	agenda_paciente
	where	nr_cirurgia      	= nr_cirurgia_p;
	
	if (nr_seq_agenda_w > 0) then
		CALL executar_evento_agenda('DFC','CI',nr_seq_agenda_w,cd_estabelecimento_w,nm_usuario_w);
	end if;

	if (cd_status_cirurgia_w IS NOT NULL AND cd_status_cirurgia_w::text <> '') then
		update	agenda_paciente
		set		ie_status_agenda = cd_status_cirurgia_w
		where	nr_sequencia = nr_seq_agenda_w;
	end if;
	
	commit;
	
	CALL desfazer_lanc_proc_taxa_cir(nr_cirurgia_p,cd_estabelecimento_w);
	
	if ((ie_grava_log_w = 'S') and (obter_se_possui_motivo_alt_cir('D','') = 'N')) then
		CALL gerar_cirurgia_hist(nr_cirurgia_p,'DFC',wheb_usuario_pck.get_nm_usuario,wheb_mensagem_pck.get_texto(455602)); -- 455602 Desfazer final cirurgia
	end if;
	
	if (ie_status_desfaz_final_w IS NOT NULL AND ie_status_desfaz_final_w::text <> '') then
		CALL gerar_dados_painel_cirurgia(ie_status_desfaz_final_w,nr_seq_agenda_w,'A',wheb_usuario_pck.get_nm_usuario,'N');
	end if;
	if (ie_gerar_evolucao_cirurgia_w = 'S' and (cd_evolucao_w IS NOT NULL AND cd_evolucao_w::text <> '')) then
         delete from clinical_note_soap_data where cd_evolucao = cd_evolucao_w and ie_med_rec_type ='SURGERY' and ie_stage = 1 and ie_soap_type = 'P' and nr_seq_med_item = nr_cirurgia_p;
		 CALL clinical_notes_pck.soap_data_after_delete(cd_evolucao_w);
    end if;
elsif (ie_opcao_p = 3) then

	ie_altera_interrompida_w := obter_param_usuario(900, 426, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_altera_interrompida_w);
	
	update	cirurgia
	set	ie_status_cirurgia	= 4
	where	nr_cirurgia      	   = nr_cirurgia_p;
	
	if (ie_altera_interrompida_w IS NOT NULL AND ie_altera_interrompida_w::text <> '')	then
		update	agenda_paciente
		set	ie_status_agenda	= ie_altera_interrompida_w
		where	nr_cirurgia      	= nr_cirurgia_p;
	end if;

   select   count(*)
   into STRICT     qt_agenda_espera_w
   from     paciente_espera a,
            agenda_paciente b
   where    a.nr_seq_agenda = b.nr_sequencia
   and      b.nr_cirurgia   = nr_cirurgia_p;

   if (coalesce(qt_agenda_espera_w,0) > 0) then
         update   paciente_espera
         set      nr_seq_agenda  = NULL
         where    nr_seq_agenda in (SELECT nr_sequencia
                                    from   agenda_paciente 
                                    where  nr_cirurgia = nr_cirurgia_p);
   end if;

	commit;
	
	--if (ie_grava_log_w = 'S') then

	--	gerar_cirurgia_hist(nr_cirurgia_p,'ITC',wheb_usuario_pck.get_nm_usuario,'Interromper cirurgia');

	--end if;
	
	
elsif (ie_opcao_p = 4) then

	select	max(dt_inicio_real),
		max(dt_termino),
		max(dt_cancelamento)
	into STRICT	dt_inicio_real_w,
		dt_termino_w,
		dt_cancelamento_w
	from	cirurgia
	where	nr_cirurgia      	= nr_cirurgia_p;

	if (dt_cancelamento_w IS NOT NULL AND dt_cancelamento_w::text <> '') then
		ie_status_w	:= 3;
	elsif (dt_inicio_real_w IS NOT NULL AND dt_inicio_real_w::text <> '') then
		ie_status_w	:= 2;
	else
		ie_status_w	:= 1;
	end if;
	
	update	cirurgia
	set	ie_status_cirurgia	= ie_status_w
	where	nr_cirurgia      	= nr_cirurgia_p;

	commit;
	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE alterar_dados_cirurgia ( nr_cirurgia_p bigint, ie_opcao_p bigint ) FROM PUBLIC;

