-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duplicar_fluxo_caixa_orcado ( cd_empresa_p bigint, cd_estabelecimento_p bigint, ie_restringe_estab_p text, dt_referencia_p timestamp, dt_mes_ref_inicial_p timestamp, dt_mes_ref_final_p timestamp, nm_usuario_p text, ie_periodo_p text, ie_diario_p text, pr_variacao_p bigint, dt_referencia_final_p timestamp, ie_classif_caixa_p text) AS $body$
DECLARE


/*--------------------------------------------------------------- ATENCAO ----------------------------------------------------------------*/


/* Cuidado ao realizar alteracoes no fluxo de caixa. Toda e qualquer alteracao realizada em qualquer uma das      						  */


/* procedures do fluxo de caixa deve ser cuidadosamente verificada e realizada no fluxo de caixa em lote.           					  */


/* Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando assim que           					  */


/* existam diferencas entre os fluxos de caixa. Fluxo de caixa em lote parametro 43 = "L"                                                 */


/*----------------------------------- AO ALTERAR O FLUXO DE CAIXA ALTERAR TAMBEM O FLUXO DE CAIXA EM LOTE --------------------------------*/

dt_mes_ref_inicial_w			timestamp;
dt_mes_ref_final_w			timestamp;
ie_periodo_w				varchar(255)	:= ie_periodo_p;
ie_diario_w				varchar(255)	:= ie_diario_p;
CD_ESTABELECIMENTO_w			bigint;
DT_REFERENCIA_w				timestamp;
CD_CONTA_FINANC_w			bigint;
IE_CLASSIF_FLUXO_w			varchar(255);
VL_FLUXO_w				double precision;
IE_ORIGEM_w				varchar(255);
IE_INTEGRACAO_w				varchar(255);
CD_EMPRESA_w				bigint;
DS_OBSERVACAO_w				varchar(4000);
qt_meses_w				bigint;
nr_dia_inicial_w			smallint;
i					smallint	:= 0;
nr_mes_inicial_w			smallint;
nr_mes_final_w				smallint;
cd_moeda_empresa_w			integer;

c01 CURSOR FOR
SELECT	CD_ESTABELECIMENTO,
	DT_REFERENCIA,
	CD_CONTA_FINANC,
	IE_CLASSIF_FLUXO,
	VL_FLUXO,
	IE_ORIGEM,
	IE_INTEGRACAO,
	CD_EMPRESA,
	DS_OBSERVACAO
from	fluxo_caixa
where	cd_empresa		= cd_empresa_p
and (cd_estabelecimento	= cd_estabelecimento_p or ie_restringe_estab_p = 'N')
and	pkg_date_utils.start_of(dt_referencia, 'MONTH',0) = pkg_date_utils.start_of(dt_referencia_p, 'MONTH',0)
and	ie_classif_fluxo	= coalesce(ie_classif_caixa_p,'O') /*lhalves OS306183 em 04/04/2011*/
and	ie_origem		= 'D'
and	ie_periodo		= 'D';


BEGIN

/* Projeto Multimoeda - Busca a moeda padrao da empresa para gravar no fluxo. */

select	obter_moeda_padrao_empresa(cd_estabelecimento_p,'E')
into STRICT	cd_moeda_empresa_w
;

if (ie_periodo_w = 'D') and (coalesce(ie_diario_w,'N') = 'S') then
	dt_mes_ref_inicial_w	:= trunc(dt_mes_ref_inicial_p);
	dt_mes_ref_final_w	:= trunc(dt_mes_ref_final_p);
else
	dt_mes_ref_inicial_w	:= pkg_date_utils.start_of(dt_mes_ref_inicial_p, 'MONTH',0);
	dt_mes_ref_final_w	:= pkg_date_utils.start_of(dt_mes_ref_final_p, 'MONTH',0);
end if;

qt_meses_w		:= abs((pkg_date_utils.extract_field('MONTH', dt_referencia_final_p))::numeric  - (pkg_date_utils.extract_field('MONTH', dt_referencia_p))::numeric ) + 1;
nr_dia_inicial_w	:= (pkg_date_utils.extract_field('DAY', dt_referencia_p))::numeric;
nr_mes_inicial_w	:= (pkg_date_utils.extract_field('MONTH', dt_referencia_p))::numeric;
nr_mes_final_w		:= (pkg_date_utils.extract_field('MONTH', dt_referencia_final_p))::numeric;

if (ie_diario_w = 'N') then

	while(dt_mes_ref_inicial_w <= dt_mes_ref_final_w) loop
		begin

		insert	into fluxo_caixa(
			cd_estabelecimento,
			dt_referencia,
			cd_conta_financ,
			ie_classif_fluxo,
			dt_atualizacao,
			nm_usuario,
			vl_fluxo,
			ie_origem,
			ie_periodo,
			ie_integracao,
			cd_empresa,
			DS_OBSERVACAO,
			cd_moeda)
		SELECT	cd_estabelecimento,
			pkg_date_utils.add_month(dt_referencia, pkg_date_utils.get_diffdate(dt_referencia_p, dt_mes_ref_inicial_w, 'MONTH', 0), 0),
			cd_conta_financ,
			'O',
			clock_timestamp(),
			nm_usuario,
			(sum(vl_fluxo + ((vl_fluxo*coalesce(pr_variacao_p,0)) / 100))) / coalesce(qt_meses_w,0),
			ie_origem,
			ie_periodo,
			ie_integracao,
			cd_empresa,
			DS_OBSERVACAO,
			coalesce(cd_moeda,cd_moeda_empresa_w)
		from	fluxo_caixa
		where	cd_empresa		= cd_empresa_p
		and (cd_estabelecimento	= cd_estabelecimento_p or ie_restringe_estab_p = 'N')
		and	dt_referencia		between trunc(dt_referencia_p) and fim_dia(pkg_date_utils.end_of(dt_referencia_final_p, 'MONTH', 0))
		and	ie_classif_fluxo	= ie_classif_caixa_p
		and	ie_origem		= 'D'
		and	ie_periodo		= coalesce(ie_periodo_p, 'D')
		group by	cd_estabelecimento,
			pkg_date_utils.add_month(dt_referencia, pkg_date_utils.get_diffdate(dt_referencia_p, dt_mes_ref_inicial_w, 'MONTH', 0),0),
			cd_conta_financ,
			ie_classif_fluxo,
			nm_usuario,
			ie_origem,
			ie_periodo,
			ie_integracao,
			cd_empresa,
			DS_OBSERVACAO,
			coalesce(cd_moeda,cd_moeda_empresa_w);

		exception when unique_violation then
			null;
		end;
		dt_mes_ref_inicial_w		:= pkg_date_utils.add_month(dt_mes_ref_inicial_w, 1,0);
	end loop;

elsif (ie_diario_w = 'S') and (ie_periodo_w = 'D') then

	for i in nr_dia_inicial_w..31 loop

		if (dt_mes_ref_inicial_w <= dt_mes_ref_final_w) then
			begin

			insert	into fluxo_caixa(cd_estabelecimento,
				dt_referencia,
				cd_conta_financ,
				ie_classif_fluxo,
				dt_atualizacao,
				nm_usuario,
				vl_fluxo,
				ie_origem,
				ie_periodo,
				ie_integracao,
				cd_empresa,
				DS_OBSERVACAO,
				cd_moeda)
			SELECT	cd_estabelecimento,
				dt_mes_ref_inicial_w,
				cd_conta_financ,
				'O',
				clock_timestamp(),
				nm_usuario,
				(sum(vl_fluxo + ((vl_fluxo*coalesce(pr_variacao_p,0)) / 100))) / coalesce(qt_meses_w,0),
				ie_origem,
				ie_periodo,
				ie_integracao,
				cd_empresa,
				DS_OBSERVACAO,
				coalesce(cd_moeda,cd_moeda_empresa_w)
			from	fluxo_caixa
			where	cd_empresa		= cd_empresa_p
			and (cd_estabelecimento	= cd_estabelecimento_p or ie_restringe_estab_p = 'N')
			and	(pkg_date_utils.extract_field('DAY', dt_referencia))::numeric  = i
			and	(pkg_date_utils.extract_field('MONTH', dt_referencia))::numeric  between nr_mes_inicial_w and nr_mes_final_w
			and	ie_classif_fluxo	= ie_classif_caixa_p
			and	ie_origem		= 'D'
			and	ie_periodo		= 'D'
			group by	cd_estabelecimento,
				cd_conta_financ,
				ie_classif_fluxo,
				clock_timestamp(),
				nm_usuario,
				ie_origem,
				ie_periodo,
				ie_integracao,
				cd_empresa,
				DS_OBSERVACAO,
				coalesce(cd_moeda,cd_moeda_empresa_w);

			exception when unique_violation then
				null;
			end;

			dt_mes_ref_inicial_w		:= dt_mes_ref_inicial_w + 1;

		end if;
	end loop;

elsif (ie_diario_w = 'D') then
	open c01;
	loop
	fetch c01 into
		CD_ESTABELECIMENTO_w,
		DT_REFERENCIA_w,
		CD_CONTA_FINANC_w,
		IE_CLASSIF_FLUXO_w,
		VL_FLUXO_w,
		IE_ORIGEM_w,
		IE_INTEGRACAO_w,
		CD_EMPRESA_w,
		DS_OBSERVACAO_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	end loop;
	close c01;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duplicar_fluxo_caixa_orcado ( cd_empresa_p bigint, cd_estabelecimento_p bigint, ie_restringe_estab_p text, dt_referencia_p timestamp, dt_mes_ref_inicial_p timestamp, dt_mes_ref_final_p timestamp, nm_usuario_p text, ie_periodo_p text, ie_diario_p text, pr_variacao_p bigint, dt_referencia_final_p timestamp, ie_classif_caixa_p text) FROM PUBLIC;

