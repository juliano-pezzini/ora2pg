-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE load_pilc_catalogue () AS $body$
DECLARE

	qt_area_procedimento_w       	bigint;
	qt_especialidade_proc_w      	bigint;
	qt_grupo_proc_w              	bigint;
	qt_procedimento_w            	bigint;
	qt_procedimento_versao_w     	bigint;
	cd_area_procedimento_w       	bigint;
	cd_especialidade_proc_w      	bigint;
	cd_grupo_proc_w              	bigint;
	cd_procedimento_w            	bigint;
	cd_procedimento_versao_w     	bigint;
	cd_area_procedimento_seq_w   	bigint;
	cd_especialidade_proc_seq_w  	bigint;
	cd_grupo_proc_seq_w          	bigint;
	cd_procedimento_seq_w        	bigint;
	cd_procedimento_versao_seq_w 	bigint;
	ds_error_w                   	varchar(4000);
	cd_mapped_item_subgroup_ww   	varchar(5);
	ds_mapped_item_subgroup_ww   	varchar(255);
	cd_procedimento_exist_w      	bigint;
	qt_proc_versao_exist_w       	smallint;
	qt_proc_versao_exist_map_w   	smallint;
	
	c01 CURSOR FOR

	SELECT	*
	FROM	W_PILCLOAD_PROC;
	
	r1	c01%rowtype;

BEGIN

    BEGIN
      CALL gravar_processo_longo('Importing item '||r1.cd_code||' - '||SUBSTR(r1.ds_oec_description,1,255),'INSERT_PROCEDIMENTO',NULL);

      SELECT	COUNT(*)
      INTO STRICT	qt_area_procedimento_w
      FROM	area_procedimento
      WHERE	cd_sistema_ant		= 'PILC'
      AND	ie_origem_proced	= 21;

      IF (qt_area_procedimento_w = 0)	THEN
      
        SELECT	MAX(cd_area_procedimento)+1
        INTO STRICT	cd_area_procedimento_seq_w
        FROM	area_procedimento;
	
        BEGIN
	INSERT
	INTO	area_procedimento(
              cd_area_procedimento,
              cd_original,
              cd_sistema_ant,
              ds_area_procedimento,
              dt_atualizacao,
              dt_atualizacao_nrec,
              ie_origem_proced,
              nm_usuario,
              nm_usuario_nrec
            )
            VALUES (
              cd_area_procedimento_seq_w,
              cd_area_procedimento_seq_w,
              'PILC',
              SUBSTR('PILC GROUP',1,40),
              clock_timestamp(),
              clock_timestamp(),
              21,
              wheb_usuario_pck.get_nm_usuario,
              wheb_usuario_pck.get_nm_usuario
            );
        END;
	
      ELSE

        UPDATE	area_procedimento
        SET	ds_area_procedimento 	= SUBSTR('PILC GROUP',1,40),
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= wheb_usuario_pck.get_nm_usuario
	WHERE 	cd_sistema_ant		= 'PILC'
        AND 	ie_origem_proced    	= 21;
	
      END IF;

    EXCEPTION
    
    WHEN OTHERS THEN
      ds_error_w := ds_error_w || obter_desc_exp_idioma(928065,wheb_usuario_pck.get_nr_seq_idioma,'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || 'PILC GROUP') || chr(10);

    END;

    BEGIN
      SELECT	COUNT(*)
      INTO STRICT 	qt_especialidade_proc_w
      FROM 	especialidade_proc
      WHERE 	cd_sistema_ant 		= 'PILC'
      AND 	ie_origem_proced 		= 21;

      IF (qt_especialidade_proc_w=0) THEN
      
        SELECT	MAX(cd_especialidade)+1
        INTO STRICT 	cd_especialidade_proc_seq_w
        FROM 	especialidade_proc;
	
        SELECT 	cd_area_procedimento
        INTO STRICT 	cd_area_procedimento_w
        FROM 	area_procedimento
        WHERE 	cd_sistema_ant='PILC';
	
        BEGIN
          INSERT
          INTO	especialidade_proc(
              cd_area_procedimento,
              cd_especialidade,
              cd_especialidade_medica,
              cd_original,
              cd_sistema_ant,
              ds_especialidade,
              dt_atualizacao,
              dt_atualizacao_nrec,
              ie_origem_proced,
              nm_usuario,
              nm_usuario_nrec
            )
            VALUES (
              cd_area_procedimento_w,
              cd_especialidade_proc_seq_w,
              NULL,
              cd_especialidade_proc_seq_w,
              'PILC',
              SUBSTR('PILC SPECIALITY',1,240),
              clock_timestamp(),
              clock_timestamp(),
              21,
              wheb_usuario_pck.get_nm_usuario,
              wheb_usuario_pck.get_nm_usuario
            );
        END;
	
      ELSE

        UPDATE 	especialidade_proc
        SET 	ds_especialidade	= SUBSTR('PILC SPECIALITY',1,240),
		dt_atualizacao    	= clock_timestamp(),
		nm_usuario        	= wheb_usuario_pck.get_nm_usuario
        WHERE 	cd_sistema_ant 		= 'PILC'
        AND 	ie_origem_proced	= 21;
	
      END IF;

    EXCEPTION
    
    WHEN OTHERS THEN
      ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,wheb_usuario_pck.get_nr_seq_idioma,'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || 'PILC SPECIALITY') || chr(10);

    END;

    BEGIN
      SELECT 	COUNT(*)
      INTO STRICT 		qt_grupo_proc_w
      FROM 	grupo_proc
      WHERE 	cd_sistema_ant	= 'PILC'
      AND 		ie_origem_proced	= 21;

      IF (qt_grupo_proc_w =0) THEN
      
        SELECT 	MAX(cd_grupo_proc)+1 INTO STRICT cd_grupo_proc_seq_w FROM grupo_proc;
        SELECT 	cd_especialidade
        INTO STRICT 	cd_especialidade_proc_w
        FROM 	especialidade_proc
        WHERE 	cd_sistema_ant	= 'PILC';
	
        BEGIN
	
          INSERT
          INTO grupo_proc(
              cd_especialidade,
              cd_grupo_proc,
              cd_original,
              cd_sistema_ant,
              ds_grupo_proc,
              ds_observacao,
              dt_atualizacao,
              ie_origem_proced,
              ie_situacao,
              nm_usuario
            )
            VALUES (
              cd_especialidade_proc_w,
              cd_grupo_proc_seq_w,
              cd_grupo_proc_seq_w,
              'PILC',
              SUBSTR('PILC GROUP',1,240),
              NULL,
              clock_timestamp(),
              21,
              'A',
              wheb_usuario_pck.get_nm_usuario
            );
        END;
	
      ELSE

        UPDATE 	grupo_proc
        SET 	ds_grupo_proc   	= SUBSTR('PILC GROUP',1,240),
		dt_atualizacao    	= clock_timestamp(),
		nm_usuario        	= wheb_usuario_pck.get_nm_usuario
        WHERE 	cd_sistema_ant	= 'PILC'
        AND 	ie_origem_proced	= 21;
	
      END IF;

    EXCEPTION
    
    WHEN OTHERS THEN
      ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,wheb_usuario_pck.get_nr_seq_idioma,'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || 'PILC GROUP') || chr(10);

    END;

  OPEN	c01;
  LOOP
    FETCH c01 INTO r1;
    EXIT WHEN NOT FOUND; /* apply on c01 */
    BEGIN
      SELECT 	COUNT(*)
      INTO STRICT 	qt_procedimento_w
      FROM 	procedimento
      WHERE 	cd_procedimento_loc	= r1.cd_code
      AND 	ie_origem_proced     	= 21;

      IF (qt_procedimento_w = 0) THEN
      
        SELECT 	nextval('procedimento_seq')
	INTO STRICT 	cd_procedimento_seq_w
	;
	
        SELECT 	cd_grupo_proc
        INTO STRICT 	cd_grupo_proc_w
        FROM 	grupo_proc
        WHERE 	cd_sistema_ant	= 'PILC'
        AND 	ie_origem_proced	= 21;
	
        INSERT
        INTO procedimento(
            cd_procedimento,
            cd_procedimento_loc,
            cd_grupo_proc,
            ds_procedimento,
            ie_situacao,
            ie_sexo_sus,
            qt_idade_minima_sus,
            qt_idade_maxima_sus,
            ie_alta_complexidade,
            ie_ativ_prof_bpa,
            ie_localizador,
            ie_classificacao,
            ie_origem_proced,
            dt_atualizacao,
            nm_usuario,
            ie_gera_associado,
            ie_assoc_adep,
            ie_classif_custo,
            qt_exec_barra,
            ie_cobra_adep,
            ie_ignora_origem,
            ie_exige_autor_sus
          )
          VALUES (
            cd_procedimento_seq_w,
            r1.cd_code,
            cd_grupo_proc_w,
            SUBSTR(r1.ds_oec_description,1,255),
            'A',
            NULL,
            NULL,
            NULL,
            'N',
            'N',
            'S',
            1,
            21,
            clock_timestamp(),
            wheb_usuario_pck.get_nm_usuario,
            'S',
            'S',
            'B',
            1,
            'S',
            'N',
            'N'
          );
	
        INSERT
        INTO procedimento_versao(
            nr_sequencia,
            dt_versao,
            dt_atualizacao,
            nm_usuario,
            dt_atualizacao_nrec,
            nm_usuario_nrec,
            dt_vigencia_inicial,
            dt_vigencia_final,
            cd_procedimento,
            ie_origem_proced,
            cd_versao,
            cd_proc_previous
          )
          VALUES (
            nextval('procedimento_versao_seq'),
            NULL,
            clock_timestamp(),
            wheb_usuario_pck.get_nm_usuario,
            clock_timestamp(),
            wheb_usuario_pck.get_nm_usuario,
            clock_timestamp(),
            clock_timestamp(),
            cd_procedimento_seq_w,
            21,
            NULL,
            r1.cd_code
          );
      ELSE

        SELECT 	COUNT(*)
        INTO STRICT 	qt_proc_versao_exist_w
        FROM 	procedimento_versao
        WHERE 	ie_origem_proced	= 21
        AND 	cd_proc_previous	= r1.cd_code;
	
        IF (qt_proc_versao_exist_w=0 ) THEN
	
          SELECT	cd_procedimento
          INTO STRICT 	cd_procedimento_exist_w
          FROM 	procedimento
          WHERE 	cd_procedimento_loc = r1.cd_code;
	
          INSERT
          INTO procedimento_versao(
              nr_sequencia,
              dt_versao,
              dt_atualizacao,
              nm_usuario,
              dt_atualizacao_nrec,
              nm_usuario_nrec,
              dt_vigencia_inicial,
              dt_vigencia_final,
              cd_procedimento,
              ie_origem_proced,
              cd_versao,
              cd_proc_previous
            )
            VALUES (
              nextval('procedimento_versao_seq'),
              NULL,
              clock_timestamp(),
              wheb_usuario_pck.get_nm_usuario,
              clock_timestamp(),
              wheb_usuario_pck.get_nm_usuario,
              clock_timestamp(),
              clock_timestamp(),
              cd_procedimento_exist_w,
              21,
              NULL,
              r1.cd_code
            );
        ELSE
	
          UPDATE 	procedimento_versao
          SET 	dt_vigencia_inicial 	= clock_timestamp(),
		dt_vigencia_final     	= clock_timestamp()
          WHERE ie_origem_proced  	= 21
          AND 	cd_proc_previous    = r1.cd_code;
	
        END IF;
      END IF;

    EXCEPTION
    
    WHEN OTHERS THEN
      ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,wheb_usuario_pck.get_nr_seq_idioma,'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.cd_code) || chr(10);

    END;

  END LOOP;
  CLOSE c01;
    EXECUTE 'DELETE from W_PILCLOAD_PROC';
  COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE load_pilc_catalogue () FROM PUBLIC;

