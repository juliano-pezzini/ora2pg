-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dl_gerar_tributo_distrib ( nr_seq_distribuicao_p bigint) AS $body$
DECLARE


cd_estabelecimento_w		smallint;
qt_venc_w			integer;
cd_tributo_w			bigint;
qt_dependente_w			bigint;
nr_ccm_w			bigint := null;
cd_cond_pagto_w			bigint;
cd_conta_financ_w		bigint;
nr_seq_trans_reg_w		bigint;
nr_seq_trans_baixa_w		bigint;
vl_distribuicao_w		double precision;
vl_minimo_base_w		double precision;
vl_minimo_tributo_w		double precision;
vl_teto_base_w			double precision;
vl_desc_dependente_w		double precision;
vl_base_calculo_w		double precision;
vl_inss_w			double precision := 0;
vl_tributo_w			double precision;
vl_trib_nao_retido_w		double precision;
vl_trib_adic_w			double precision;
vl_base_adic_w			double precision;
vl_base_nao_retido_w		double precision;
vl_base_retido_outro_w		double precision;
vl_base_calculo_paga_w		double precision;
vl_base_pago_adic_base_w	double precision;
vl_soma_trib_nao_retido_w	double precision;
vl_soma_base_nao_retido_w	double precision;
vl_soma_trib_adic_w		double precision;
vl_soma_base_adic_w		double precision;
vl_trib_anterior_w		double precision;
vl_total_base_w			double precision;
vl_reducao_w			double precision;
pr_aliquota_w			double precision;
vl_trib_acum_w			double precision;
ie_irpf_w			varchar(3);
cd_pessoa_fisica_w		varchar(10);
cd_beneficiario_w		varchar(14);
nm_usuario_w			varchar(15);
cd_darf_w			varchar(20);
cd_variacao_w			varchar(50);
ie_acumulativo_w		varchar(255);
ie_tipo_tributo_w		varchar(255);
ie_apuracao_piso_w		varchar(255);
ie_periodicidade_w		varchar(255);
ds_venc_w			varchar(2000);
dt_vencimento_w			timestamp;
ds_irrelevante_w		varchar(4000);
ie_restringe_estab_w		varchar(1);
nr_seq_classe_w			bigint;
cd_tipo_baixa_neg_w		integer;
cd_empresa_w			smallint;
nr_seq_regra_irpf_w		regra_calculo_irpf.nr_sequencia%type;
	
c01 CURSOR FOR
	SELECT	a.cd_tributo,
		a.ie_tipo_tributo,
		a.ie_apuracao_piso,
		a.ie_restringe_estab
	from	tributo a
	where	a.ie_conta_pagar	= 'S'
	and	a.ie_situacao	= 'A'
	and	((a.ie_pf_pj = 'A') or
		(a.ie_pf_pj = 'PF' AND cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> ''))
	and	coalesce(nr_ccm_w::text, '') = '' or coalesce(a.ie_ccm,'S') = 'S'
	and	coalesce(a.ie_super_simples, 'S') = 'S'
	and	coalesce(cd_estabelecimento, cd_estabelecimento_w) = cd_estabelecimento_w
	order by CASE WHEN a.ie_tipo_tributo='INSS' THEN 1  ELSE 2 END;


BEGIN

select	a.vl_distribuicao,
	b.cd_estabelecimento,
	a.dt_vencimento,
	substr(dl_obter_dados_socio(a.nr_seq_socio, 'PF'),1,10),
	a.nm_usuario,
	c.cd_empresa
into STRICT	vl_distribuicao_w,
	cd_estabelecimento_w,
	dt_vencimento_w,
	cd_pessoa_fisica_w,
	nm_usuario_w,
	cd_empresa_w
FROM dl_distribuicao a, dl_lote_distribuicao b
LEFT OUTER JOIN estabelecimento c ON (b.cd_estabelecimento = c.cd_estabelecimento)
WHERE a.nr_seq_lote	= b.nr_sequencia and a.nr_sequencia	= nr_seq_distribuicao_p;

if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
	select	max(a.nr_ccm)
	into STRICT	nr_ccm_w
	from	pessoa_fisica a
	where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w;
end if;

open C01;
loop
fetch C01 into	
	cd_tributo_w,
	ie_tipo_tributo_w,
	ie_apuracao_piso_w,
	ie_restringe_estab_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	vl_base_calculo_w	:= vl_distribuicao_w;
	pr_aliquota_w		:= 0;
	
	SELECT * FROM obter_dados_trib_tit_pagar(
			cd_tributo_w, cd_estabelecimento_w, null, cd_pessoa_fisica_w, cd_beneficiario_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, dt_vencimento_w, cd_variacao_w, ie_periodicidade_w, 'DL', null, null, null, null, null, ds_irrelevante_w, null, 0, nr_seq_classe_w, cd_tipo_baixa_neg_w, vl_base_calculo_w, 'N', null, '0', null, null) INTO STRICT cd_beneficiario_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, cd_variacao_w, ie_periodicidade_w, ds_irrelevante_w, nr_seq_classe_w, cd_tipo_baixa_neg_w;
	
	if (pr_aliquota_w > 0) then
		
		ie_irpf_w	:= 'N';
		if (ie_tipo_tributo_w = 'IR') then -- Calcular redução base IRPF e saldo menos INSS 
			if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then

				ie_irpf_w	:= 'S';

				select	coalesce(a.qt_dependente,0)
				into STRICT	qt_dependente_w
				from	pessoa_fisica a
				where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w;
					
				select	coalesce(sum(a.vl_tributo),0)
				into STRICT	vl_inss_w
				from	tributo b,
					dl_distribuicao_trib a
				where	a.cd_tributo		= b.cd_tributo
				and	b.ie_tipo_tributo	= 'INSS'
				and	a.nr_seq_distribuicao	= nr_seq_distribuicao_p;

			end if;

			vl_base_calculo_w	:= vl_base_calculo_w - vl_inss_w;
		end if;		
		
		vl_tributo_w	:= vl_base_calculo_w * pr_aliquota_w / 100;
		
		if (coalesce(dt_vencimento_w::text, '') = '') then
			dt_vencimento_w	:= clock_timestamp();
		end if;
		
		if (cd_cond_pagto_w IS NOT NULL AND cd_cond_pagto_w::text <> '') then

			SELECT * FROM calcular_vencimento(cd_estabelecimento_w, cd_cond_pagto_w, dt_vencimento_w, qt_venc_w, ds_venc_w) INTO STRICT qt_venc_w, ds_venc_w;

			if (qt_venc_w = 1) then	
				dt_vencimento_w	:= to_date(substr(ds_venc_w,1,10),'dd/mm/yyyy');
			end if;

		end if;

		select	/*+ USE_CONCAT */ -- Edgar 08/09/2009, OS 160898, coloquei o use_concat para transformar os OR em UNION
			coalesce(sum(vl_soma_trib_nao_retido),0),
			coalesce(sum(vl_soma_base_nao_retido),0),
			coalesce(sum(vl_soma_trib_adic),0),
			coalesce(sum(vl_soma_base_adic),0),
			coalesce(sum(vl_tributo),0),
			coalesce(sum(vl_total_base),0),
			coalesce(sum(vl_reducao),0)
		into STRICT	vl_soma_trib_nao_retido_w,
			vl_soma_base_nao_retido_w,
			vl_soma_trib_adic_w,
			vl_soma_base_adic_w,
			vl_trib_anterior_w,
			vl_total_base_w,
			vl_reducao_w
		from	valores_tributo_v
		where	cd_tributo			= cd_tributo_w
		and (ie_origem_valores		= 'RT'  or ie_apuracao_piso_w = 'S')
		--and	nvl(cd_pessoa_fisica, decode(ie_cnpj_w, 'Estab', cd_cgc, cd_cnpj_raiz))	= nvl(cd_pessoa_fisica_w, decode(ie_cnpj_w, 'Estab', cd_cgc_repasse_w, cd_cnpj_raiz_w))
		and	cd_pessoa_fisica		= cd_pessoa_fisica_w
		and	trunc(dt_tributo, 'month')	= trunc(dt_vencimento_w, 'month')
		and	((ie_restringe_estab_w	= 'N') or (cd_estabelecimento		= cd_estabelecimento_w) or (cd_estab_financeiro	= cd_estabelecimento_w))
		and (ie_apuracao_piso_w		= 'N' or
			ie_apuracao_piso_w		= ie_base_calculo)
		and	ie_baixa_titulo			= 'N'
		and	coalesce(cd_empresa,coalesce(cd_empresa_w,0)) = coalesce(cd_empresa_w,0);

		vl_base_calculo_paga_w		:= 0;
		vl_base_retido_outro_w		:= 0;
		vl_base_pago_adic_base_w	:= 0;
		
		SELECT * FROM obter_valores_tributo(	
			ie_acumulativo_w, pr_aliquota_w, vl_minimo_base_w, vl_minimo_tributo_w, vl_soma_trib_nao_retido_w, vl_soma_trib_adic_w, vl_soma_base_nao_retido_w, vl_soma_base_adic_w, vl_base_calculo_w, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_teto_base_w, vl_trib_anterior_w, ie_irpf_w, vl_total_base_w, vl_reducao_w, vl_desc_dependente_w, qt_dependente_w, vl_base_calculo_paga_w, vl_base_pago_adic_base_w, vl_base_retido_outro_w, obter_outras_reducoes_irpf(cd_pessoa_fisica_w,cd_estabelecimento_w,dt_vencimento_w), clock_timestamp(), nr_seq_regra_irpf_w) INTO STRICT pr_aliquota_w, vl_base_calculo_w, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_reducao_w, vl_desc_dependente_w, nr_seq_regra_irpf_w;
		
		if (vl_tributo_w >= 0) then
			
			insert into dl_distribuicao_trib(	
				nr_sequencia,
				dt_atualizacao,         
				nm_usuario,             
				dt_atualizacao_nrec,    
				nm_usuario_nrec,        
				nr_seq_distribuicao,    
				dt_tributo,             
				cd_tributo,             
				pr_tributo,             
				vl_tributo,             
				vl_base_calculo,        
				vl_nao_retido,          
				vl_base_nao_retido,    
				vl_trib_adic,           
				vl_base_adic,           
				vl_reducao,             
				vl_desc_base,           
				cd_darf,                
				cd_variacao,            
				ie_periodicidade,       
				cd_cgc_beneficiario,    
				cd_conta_financ)
			values (	nextval('dl_distribuicao_trib_seq'),           
				clock_timestamp(),         
				nm_usuario_w,             
				clock_timestamp(),    
				nm_usuario_w,        
				nr_seq_distribuicao_p,    
				dt_vencimento_w,             
				cd_tributo_w,             
				pr_aliquota_w,             
				vl_tributo_w,             
				vl_base_calculo_w,        
				vl_trib_nao_retido_w,          
				vl_base_nao_retido_w,     
				vl_trib_adic_w,           
				vl_base_adic_w,           
				vl_reducao_w,             
				vl_desc_dependente_w,           
				cd_darf_w,                
				cd_variacao_w,            
				ie_periodicidade_w,       
				cd_beneficiario_w,    
				cd_conta_financ_w);
			
			vl_trib_acum_w	:= vl_trib_acum_w + vl_tributo_w;
		end if;
		
	end if;
	
	end;
end loop;
close C01;

update	dl_distribuicao
set	vl_calculado	= coalesce(vl_distribuicao,0) - coalesce(vl_trib_acum_w,0)
where	nr_sequencia	= nr_seq_distribuicao_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dl_gerar_tributo_distrib ( nr_seq_distribuicao_p bigint) FROM PUBLIC;

