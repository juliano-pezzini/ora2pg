-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_fechar_lote_distribuicao ( nr_seq_lote_p bigint, nm_usuario_p text, cd_estabelecimento_p text) AS $body$
DECLARE

 
nm_prestador_pgto_w		varchar(4000);	
cd_medico_executor_novo_w	varchar(4000);				
vl_procedimento_novo_w		double precision;
vl_saldo_w			double precision;
vl_procedimento_imp_w		double precision;
vl_glosa_w			double precision;					
nr_seq_prestador_novo_w		bigint;
nr_seq_conta_proc_w		bigint;	
nr_seq_lote_prest_w		bigint;	
nr_seq_conta_proc_prest_w	bigint;
nr_seq_evento_w			bigint;
nr_seq_prest_plant_item_w	bigint;
nr_seq_lote_evento_w		bigint;
nr_seq_prest_plant_w		bigint;
nr_seq_evento_movto_w		bigint;
nr_seq_prest_rec_w		bigint;
nr_seq_competencia_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_prestador_ocorr_w	bigint;
dt_mes_competencia_w		timestamp;
dt_competencia_pgto_w		timestamp;
qt_item_w			integer;
qt_participante_w		integer;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type;

C01 CURSOR FOR 
	SELECT	a.vl_procedimento_novo, 
		a.nr_seq_prestador_novo, 
		a.nr_seq_conta_proc, 
		a.cd_medico_exec_novo 
	from	pls_conta_proc_plant a 
	where	(a.nr_seq_prestador_novo IS NOT NULL AND a.nr_seq_prestador_novo::text <> '') 
	and	a.nr_seq_lote_plant = nr_seq_lote_p;
	
C02 CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	pls_lote_prest_plant a 
	where	a.nr_seq_lote = nr_seq_lote_p 
	and	exists (SELECT	1 
			from	pls_conta_proc_plant x 
			where	x.nr_seq_prestador_novo = a.nr_seq_prest_plant);
	
C03 CURSOR FOR 
	SELECT	a.nr_seq_conta_proc 
	from	pls_conta_proc_plant a 
	where	coalesce(a.nr_seq_prestador_novo::text, '') = '';	
		 
C04 CURSOR FOR 
	SELECT	a.nr_seq_evento, 
		a.nr_seq_prestador, 
		a.nr_seq_prestador_ocorr 
	from	pls_prestador_plantonista a 
	where	a.nr_seq_prest_rec = nr_seq_prest_rec_w 
	and	dt_mes_competencia_w between a.dt_inicio_vigencia and fim_dia(coalesce(a.dt_fim_vigencia,dt_mes_competencia_w));	
 
C05 CURSOR FOR 
	SELECT	a.vl_saldo_plantonista, 
		a.nr_sequencia, 
		a.nr_seq_prest_plant 
	from	pls_lote_prest_plant a 
	where	a.nr_seq_lote = nr_seq_lote_p 
	and	a.nr_seq_prest_plant = nr_seq_prest_plant_w 
	and not exists (	SELECT	1 
			from	pls_lote_prest_plant a 
			where	a.nr_seq_lote = nr_seq_lote_p 
			and	a.nr_seq_prestador_ocorr = nr_seq_prestador_ocorr_w) 
	
union all
 
	select	a.vl_saldo_plantonista, 
		a.nr_sequencia, 
		a.nr_seq_prestador_ocorr 
	from	pls_lote_prest_plant a 
	where	a.nr_seq_lote = nr_seq_lote_p 
	and	a.nr_seq_prestador_ocorr = nr_seq_prestador_ocorr_w;
	
C06 CURSOR(nr_seq_conta_proc_pc		pls_conta_proc.nr_sequencia%type) FOR 
	SELECT	nr_sequencia 
	from	pls_conta_pos_estabelecido 
	where	nr_seq_conta_proc = nr_seq_conta_proc_pc;
	
C07 CURSOR( nr_seq_conta_proc_pc		pls_conta_proc.nr_sequencia%type) FOR 
	SELECT	nr_sequencia 
	from	pls_conta_pos_proc 
	where	nr_seq_conta_proc = nr_seq_conta_proc_pc;
	
	 
BEGIN 
 
select 	coalesce(max(ie_novo_pos_estab), 'N') 
into STRICT	ie_novo_pos_estab_w 
from	pls_visible_false;
 
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then 
 
	update	pls_lote_plantonista 
	set	dt_fechamento 	= clock_timestamp(), 
		nm_usuario 	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where	nr_sequencia 	= nr_seq_lote_p;
	commit;
 
	select	a.nr_seq_prest_rec, 
		a.nr_seq_competencia, 
		a.dt_competencia_pgto 
	into STRICT	nr_seq_prest_rec_w, 
		nr_seq_competencia_w, 
		dt_competencia_pgto_w 
	from	pls_lote_plantonista a 
	where	a.nr_sequencia = nr_seq_lote_p;
		 
	select	a.dt_mes_competencia 
	into STRICT	dt_mes_competencia_w 
	from	pls_competencia a 
	where	a.nr_sequencia = nr_seq_competencia_w;	
 
	open C01;
	loop 
	fetch C01 into	 
		vl_procedimento_novo_w, 
		nr_seq_prestador_novo_w, 
		nr_seq_conta_proc_w, 
		cd_medico_executor_novo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		nm_prestador_pgto_w := substr(pls_obter_dados_prestador(nr_seq_prestador_novo_w, 'N'),1,255);
		begin 
			select	vl_procedimento_imp 
			into STRICT	vl_procedimento_imp_w 
			from	pls_conta_proc 
			where	nr_sequencia = nr_seq_conta_proc_w;
		exception 
		when others then 
			vl_procedimento_imp_w := 0;
		end;
		 
		if (vl_procedimento_imp_w > vl_procedimento_novo_w ) then 
			vl_glosa_w := vl_procedimento_imp_w - vl_procedimento_novo_w;
		else 
			vl_glosa_w := 0;
		end if;
		 
		select	count(1) 
		into STRICT	qt_item_w 
		from	pls_conta_proc 
		where	nr_sequencia	= nr_seq_conta_proc_w 
		and	((nr_seq_prestador_pgto 	<> nr_seq_prestador_novo_w) or (coalesce(nr_seq_prestador_pgto::text, '') = ''));
		 
		if (qt_item_w	> 0) then 
			update	pls_conta_proc 
			set	nr_seq_prestador_pgto 	= nr_seq_prestador_novo_w, 
				vl_liberado 		= vl_procedimento_novo_w, 
				vl_liberado_hi		= vl_procedimento_novo_w, 
				vl_unitario		= dividir(vl_procedimento_novo_w,qt_procedimento), 
				vl_glosa		= vl_glosa_w, 
				vl_prestador		= vl_procedimento_novo_w, 
				vl_pag_medico_conta	= vl_procedimento_novo_w, 
				nm_usuario		= nm_usuario_p, 
				dt_atualizacao		= clock_timestamp() 
			where	nr_sequencia 		= nr_seq_conta_proc_w 
			and	((nr_seq_prestador_pgto 	<> nr_seq_prestador_novo_w) or (coalesce(nr_seq_prestador_pgto::text, '') = ''));
			 
			select	count(1) 
			into STRICT	qt_participante_w 
			from	pls_proc_participante 
			where	nr_seq_conta_proc	= nr_seq_conta_proc_w 
			and	ie_status		!= 'C';
			 
			if (qt_participante_w	= 1) then 
				update	pls_proc_participante 
				set	nr_seq_prestador_pgto	= nr_seq_prestador_novo_w, 
					vl_participante		= vl_procedimento_novo_w 
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w 
				and	ie_status		!= 'C';
			elsif (qt_participante_w	> 1) then 
				update	pls_proc_participante 
				set	nr_seq_prestador_pgto	= nr_seq_prestador_novo_w, 
					vl_participante		= 0 
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w 
				and	ie_status		!= 'C';
			end if;
			 
			select	max(a.nr_seq_conta) 
			into STRICT	nr_seq_conta_w 
			from	pls_conta_proc a 
			where	a.nr_sequencia = nr_seq_conta_proc_w;
			 
			--Chama a rotina responsável por inserir o registro no pagamento de produção médica, necessário chamar esta rotina devido aos tratamentos inseridos na mesma 
			CALL pls_atualizar_item_resumo(	nr_seq_conta_proc_w, 'P',nm_usuario_p, 
							'N');
 
			if ( ie_novo_pos_estab_w = 'N') then 
				for r_C06_w in C06(nr_seq_conta_proc_w) loop 
					CALL pls_atualiza_reg_contab_item(r_C06_w.nr_sequencia, 'P', 'N', null, cd_estabelecimento_p, nm_usuario_p);
				end loop;
			else 
				for r_C07_w in C07(nr_seq_conta_proc_w) loop 
					CALL pls_atualiza_reg_contab_item(r_C07_w.nr_sequencia, 'P', 'N', 'P', cd_estabelecimento_p, nm_usuario_p);
				end loop;
			end if;
			 
			 
			--necessário para atualizar corretamente o nome de quem irá receber os valores 
			update	pls_conta_medica_resumo 
			set	nm_prestador_pgto 	= nm_prestador_pgto_w, 
				nr_seq_prestador_pgto 	= nr_seq_prestador_novo_w, 
				cd_pessoa_fisica	= coalesce(cd_medico_executor_novo_w,cd_pessoa_fisica), 
				dt_competencia_pgto	= coalesce(dt_competencia_pgto_w, dt_competencia_pgto) 
			where	nr_seq_conta_proc	= nr_seq_conta_proc_w 
			and	nr_seq_conta		= nr_seq_conta_w 
			and	ie_tipo_item		!= 'I' 
			and	ie_situacao 		= 'A';	
		 
		 
			insert into pls_conta_log(nr_sequencia, 
				nr_seq_conta, 
				nr_seq_conta_proc, 
				dt_alteracao, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				dt_atualizacao, 
				nm_usuario, 
				ds_alteracao) 
			values (nextval('pls_conta_log_seq'), 
				nr_seq_conta_w, 
				nr_seq_conta_proc_w, 
				clock_timestamp(), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				'Alterado o prestador de pagamento do procedimento de sequência ' || nr_seq_conta_proc_w || 
				', para o prestador plantonista ' || substr(nm_prestador_pgto_w,1,30));
		 
			 
		end if;
 
		end;
	end loop;
	close C01;	
	 
	open C04;
	loop 
	fetch C04 into	 
		nr_seq_evento_w, 
		nr_seq_prest_plant_w, 
		nr_seq_prestador_ocorr_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin 
		open C05;
		loop 
		fetch C05 into	 
			vl_saldo_w, 
			nr_seq_prest_plant_item_w, 
			nr_seq_prestador_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin 
			if (vl_saldo_w > 0) and (nr_seq_evento_w IS NOT NULL AND nr_seq_evento_w::text <> '') then 
				if (coalesce(nr_seq_lote_evento_w::text, '') = '') then 
					select	max(a.nr_sequencia) 
					into STRICT	nr_seq_lote_evento_w 
					from	pls_lote_evento a 
					where	trunc(a.dt_competencia,'mm') = trunc(dt_mes_competencia_w,'mm') 
					and	coalesce(a.dt_liberacao::text, '') = '';
					 
					update	pls_lote_evento 
					set	dt_liberacao 	= clock_timestamp(), 
						dt_atualizacao	= clock_timestamp(), 
						nm_usuario	= nm_usuario_p 
					where	nr_sequencia 	= nr_seq_lote_evento_w;
				end if;
				 
				if (coalesce(nr_seq_lote_evento_w::text, '') = '') then 
					select	nextval('pls_lote_evento_seq') 
					into STRICT	nr_seq_lote_evento_w 
					;
					 
					insert into pls_lote_evento(nr_sequencia, 
						nm_usuario, 
						dt_atualizacao, 
						nm_usuario_nrec, 
						dt_atualizacao_nrec, 
						ie_origem, 
						dt_liberacao, 
						dt_competencia, 
						cd_estabelecimento, 
						nr_seq_lote_plant) 
					values (nr_seq_lote_evento_w, 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						'A', 
						clock_timestamp(), 
						trunc(dt_mes_competencia_w,'mm'), 
						cd_estabelecimento_p, 
						nr_seq_lote_p);
				end if;
				 
				select	max(a.nr_sequencia) 
				into STRICT	nr_seq_evento_movto_w 
				from	pls_evento_movimento a 
				where	a.nr_seq_prest_plant_item = nr_seq_prest_plant_item_w;
				 
				if (coalesce(nr_seq_evento_movto_w::text, '') = '')	then		 
					select	nextval('pls_evento_movimento_seq') 
					into STRICT	nr_seq_evento_movto_w 
					;
				 
					insert into pls_evento_movimento(nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						dt_movimento, 
						nr_seq_evento, 
						nr_seq_lote, 
						nr_seq_prestador, 
						vl_movimento, 
						nr_seq_prest_plant_item, 
						ie_forma_pagto) 
					values (nr_seq_evento_movto_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						dt_mes_competencia_w, 
						nr_seq_evento_w, 
						nr_seq_lote_evento_w, 
						nr_seq_prestador_w, 
						vl_saldo_w, 
						nr_seq_prest_plant_item_w, 
						'P');
				end if;
			end if;
			end;
		end loop;
		close C05;
		end;
	end loop;
	close C04;
	 
	commit;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_fechar_lote_distribuicao ( nr_seq_lote_p bigint, nm_usuario_p text, cd_estabelecimento_p text) FROM PUBLIC;

