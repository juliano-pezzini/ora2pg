-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_suep_html (nr_seq_suep_p bigint, nr_atendimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text) AS $body$
DECLARE


   dt_inicial_w               timestamp;
   dt_final_w                 timestamp;
   nm_tabela_w                varchar(50);
   ds_escala_w                varchar(255);
   ds_func_escala_suep_w      varchar(255);
   nm_atributo_data_w         varchar(50);
   nm_atributo_inf_w          varchar(255);
   ie_grupo_suep_w            varchar(255);
   ie_sub_grupo_suep_w        varchar(255);
   nr_seq_apres_w             bigint;
   nr_seq_exame_w             bigint;
   ie_result_exame_w          varchar(10);
   ds_informacao_w            varchar(255);
   ds_comando_w               varchar(4000);
   qt_reg_w                   bigint;
   C04                        integer;
   C21                        integer;
   C20                        integer;
   dt_referencia_w            timestamp;
   vl_informacao_w            double precision;
   vl_informacao_func_w       varchar(10);
   pr_informacao_w            double precision;
   retorno_w                  integer;
   retorno_escala_w           integer;
   nr_seq_suep_w              bigint;
   nr_seq_suep_item_w         bigint;
   nr_seq_item_w              bigint;
   qt_resultado_w             double precision;
   pr_resultado_w             double precision;
   ds_resultado_w             varchar(4000);
   cd_estab_usuario_w         smallint;
   nm_pessoa_fisica_w         varchar(60);
   dt_entrada_w               timestamp;
   nr_prontuario_w            bigint;
   ie_tipo_sangue_w           varchar(2);
   ie_fator_rh_w              varchar(1);
   cd_categoria_w             varchar(10);
   cd_setor_atendimento_w     integer;
   cd_unidade_basica_w        varchar(10);
   cd_unidade_compl_w         varchar(10);
   qt_peso_adm_w              double precision;
   qt_dias_internacao_w       bigint;
   qt_dias_po_w               bigint;
   cd_convenio_w              integer;
   cd_pessoa_fisica_w         varchar(10);
   dt_alta_w                  timestamp;
   ds_convenio_w              varchar(255);
   ds_categoria_w             varchar(80);
   nr_atendimento_w           bigint;
   nr_seq_episodio_w          bigint := 0;
   cd_doenca_w                varchar(10);
   ds_doenca_w                varchar(255);
   ds_lista_problemas_w       varchar(4000) := '';
   ie_tipo_atendimento_w      varchar(3) := '-1';
   cd_evolucao_w              bigint;
   dt_diagnostico_w           timestamp;
   ds_unid_med_w              varchar(15);
   ie_origem_glicemia_w       varchar(1);
   nr_seq_glicemia_w          bigint;
   dt_controle_glicemia_w     timestamp;
   qt_hgt_w                   bigint;
   qt_veloc_adm_w             real;
   nr_seq_item_hgt_glic_w     bigint;
   nr_seq_item_veloc_glic_w   bigint;
   nr_seq_prot_glic_w         bigint;
   qt_glicemia_w              bigint;
   nr_seq_item_glic_w         bigint;
   nr_item_pront_w            bigint;
   ie_formato_busca_w         varchar(1);
   qt_dias_busca_w            bigint;
   qt_consultas_busca_w       bigint;
   ds_atendimentos_w          varchar(255);
   ie_restringir_tipo_atend_w varchar(1);
   dt_exame_w                 timestamp;
   ie_tipo_item_w             varchar(5);
   ie_tipo_subitem_w          varchar(5);
   /*Regra Sinais vitais*/

   qt_idade_w      double precision;
   qt_idade_dia_w  double precision;
   cd_escala_dor_w varchar(5);
   cd_perfil_w     bigint;
   qt_minimo_per_w double precision;
   qt_minimo_w     double precision;
   vl_maximo_per_w double precision;
   vl_maximo_w     double precision;
   dt_informacao_w varchar(255);
   ds_tolltip_w    varchar(255);

   ie_valor_fora_faixa_w varchar(1);
   ie_resultado_w        varchar(1);
   nr_seq_inf_w          varchar(5);
   ie_score_flex_w       varchar(5);
   nr_seq_escala_w       bigint;
   nls_language_w        varchar(255);

   ie_origem_sv_w item_suep.ie_origem_sv%type;

   /*Regra Sinais Vitais*/

   ie_sexo_w varchar(1);
   /*Escalas*/

   qt_pont_min_w  integer;
   qt_pont_max_w  integer;
   qt_risco_min_w integer;
   qt_risco_max_w integer;

   C01 CURSOR FOR
      SELECT x.nr_sequencia,
             x.ie_tipo_item,
             x.nr_seq_apres,
             x.nr_seq_exame,
             x.ie_result_exame,
             x.nm_tabela,
             x.ds_func_escala_suep,
             x.nm_atributo_data,
             x.nm_atributo_inf,
             x.ds_informacao,
             x.ds_unid_med,
             x.qt_pont_min,
             x.qt_pont_max,
             x.qt_risco_min,
             x.qt_risco_max,
             x.ie_origem_glicemia,
             x.ie_formato_busca,
             x.qt_dias_busca,
             x.qt_consultas,
             x.ie_restringir_tipo_atend,
             x.nr_seq_inf,
             x.nr_seq_escala,
             x.ie_tipo_subitem,
             x.ie_origem_sv
        from (SELECT d.nr_sequencia,
                     c.ie_tipo_item,
                     d.nr_seq_apres,
                     d.nr_seq_exame,
                     coalesce(d.ie_result_exame, 'R') ie_result_exame,
                     e.nm_tabela,
                     e.ds_func_escala_suep,
                     e.nm_atributo_data,
                     e.nm_atributo_inf,
                     substr(coalesce(
                                coalesce(
                                    coalesce(
                                         coalesce(d.ds_informacao_inst,e.ds_nome_instituicao)
                                         ,obter_desc_expressao(e.cd_exp_inf_suep)),
                                    obter_desc_exame(d.nr_seq_exame)),
                                obter_desc_expressao(f.CD_EXP_CAPTION)),
                            1,
                            255) ds_informacao,
                     obter_desc_expressao(e.cd_exp_unidade_suep) ds_unid_med,
                     f.qt_pont_min,
                     f.qt_pont_max,
                     f.qt_risco_min,
                     f.qt_risco_max,
                     ie_origem_glicemia,
                     coalesce(c.ie_formato_busca, 'A') ie_formato_busca,
                     c.qt_dias_busca,
                     c.qt_consultas,
                     c.ie_restringir_tipo_atend,
                     d.nr_seq_inf,
                     coalesce(d.nr_seq_score_flex, d.nr_seq_score_flex_ii) nr_seq_escala,
                     null ie_tipo_subitem,
                     c.ie_origem_sv
                FROM item_suep c, suep a, informacao_suep d
LEFT OUTER JOIN pep_informacao e ON (d.nr_seq_inf = e.nr_sequencia)
LEFT OUTER JOIN escala_documentacao f ON (e.ie_escala = f.ie_escala)
WHERE c.nr_seq_suep = a.nr_sequencia and d.nr_seq_item = c.nr_sequencia   and a.nr_sequencia = nr_seq_suep_p

union all

              select d.nr_sequencia,
                     c.ie_tipo_item,
                     d.nr_seq_apres,
                     d.nr_seq_exame,
                     coalesce(d.ie_result_exame, 'R') ie_result_exame,
                     e.nm_tabela,
                     e.ds_func_escala_suep,
                     e.nm_atributo_data,
                     e.nm_atributo_inf,
                     substr(coalesce(coalesce(coalesce(coalesce(d.ds_informacao_inst,
                                            e.ds_nome_instituicao),
                                        obter_desc_expressao(e.cd_exp_inf_suep)),
                                    obter_desc_exame(d.nr_seq_exame)),
                                obter_desc_expressao(f.CD_EXP_CAPTION)),
                            1,
                            255) ds_informacao,
                     obter_desc_expressao(e.cd_exp_unidade_suep) ds_unid_med,
                     f.qt_pont_min,
                     f.qt_pont_max,
                     f.qt_risco_min,
                     f.qt_risco_max,
                     d.ie_origem_glicemia,
                     coalesce(s.ie_formato_busca, 'A') ie_formato_busca,
                     s.qt_dias_busca,
                     s.qt_consultas,
                     s.ie_restringir_tipo_atend,
                     d.nr_seq_inf,
                     coalesce(d.nr_seq_score_flex, d.nr_seq_score_flex_ii) nr_seq_escala,
                     s.IE_TIPO_ITEM ie_tipo_subitem,
                     c.ie_origem_sv
                FROM item_suep c, suep a, informacao_suep d
LEFT OUTER JOIN subitem_suep s ON (d.nr_seq_subitem = s.nr_sequencia)
LEFT OUTER JOIN pep_informacao e ON (d.nr_seq_inf = e.nr_sequencia)
LEFT OUTER JOIN escala_documentacao f ON (e.ie_escala = f.ie_escala)
WHERE c.nr_seq_suep = a.nr_sequencia and s.nr_seq_item = c.nr_sequencia    and a.nr_sequencia = nr_seq_suep_p ) x
       order by x.NR_SEQ_APRES;

   c02 CURSOR FOR
      SELECT distinct a.dt_resultado,
                      coalesce(b.qt_resultado, 0),
                      b.pr_resultado,
                      b.ds_resultado
        from exame_lab_result_item b,
             prescr_procedimento   x,
             prescr_medica         d,
             exame_lab_resultado   a
       where a.nr_seq_resultado = b.nr_seq_resultado
         and d.nr_prescricao = a.nr_prescricao
         and d.nr_prescricao = x.nr_prescricao
         and x.nr_sequencia = b.nr_seq_prescr
         and d.nr_atendimento = nr_atendimento_p
         and a.dt_resultado between dt_inicial_w and dt_final_w
         and coalesce(d.dt_suspensao::text, '') = ''
         and b.nr_seq_exame = nr_seq_exame_w
         and (d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '');

   C03 CURSOR FOR
      SELECT x.nr_sequencia,
             x.ie_tipo_item,
             x.ie_formato_busca,
             x.qt_dias_busca,
             x.qt_consultas,
             x.ie_restringir_tipo_atend,
             x.ie_tipo_subitem
        FROM (SELECT d.nr_sequencia,
                     c.ie_tipo_item,
                     coalesce(c.ie_formato_busca, 'A') ie_formato_busca,
                     c.qt_dias_busca,
                     c.qt_consultas,
                     c.ie_restringir_tipo_atend,
                     d.NR_SEQ_APRES,
                     null ie_tipo_subitem
                FROM suep a, item_suep c
LEFT OUTER JOIN informacao_suep d ON (c.nr_sequencia = d.nr_seq_item)
LEFT OUTER JOIN pep_informacao e ON (d.nr_seq_inf = e.nr_sequencia)
WHERE c.nr_seq_suep = a.nr_sequencia   AND ie_tipo_item = ie_tipo_item_w AND a.nr_sequencia = nr_seq_suep_p AND (d.nr_sequencia IS NOT NULL AND d.nr_sequencia::text <> '')
               
union all

              SELECT d.nr_sequencia,
                     c.ie_tipo_item,
                     coalesce(c.ie_formato_busca, 'A') ie_formato_busca,
                     c.qt_dias_busca,
                     c.qt_consultas,
                     c.ie_restringir_tipo_atend,
                     d.NR_SEQ_APRES,
                     s.IE_TIPO_ITEM ie_tipo_subitem
                FROM suep            a,
                     item_suep       c,
                     subitem_suep    s,
                     informacao_suep d,
                     pep_informacao  e
               WHERE c.nr_seq_suep = a.nr_sequencia
                 AND s.nr_seq_item = c.nr_sequencia
                 AND d.nr_seq_subitem = s.nr_sequencia
                 AND d.nr_seq_inf = e.nr_sequencia
                 AND c.ie_tipo_item = ie_tipo_item_w
                 AND a.nr_sequencia = nr_seq_suep_p  LIMIT 1) x
       order by x.NR_SEQ_APRES;

   c05 CURSOR FOR
      SELECT b.qt_minimo, b.vl_maximo
        from sinal_vital_regra b, sinal_vital a
       where 1 = 1
         and a.nr_sequencia = b.nr_seq_sinal
         and ((qt_idade_w between b.qt_idade_min and b.qt_idade_max) or (coalesce(qt_idade_min::text, '') = '' and coalesce(qt_idade_max::text, '') = '') or (qt_idade_dia_w between b.qt_idade_min_dias and
             b.qt_idade_max_dias) or (coalesce(qt_idade_min_dias::text, '') = '' and coalesce(qt_idade_max_dias::text, '') = ''))
         and coalesce(b.cd_setor_Atendimento, cd_setor_Atendimento_w) =
             cd_setor_Atendimento_w
         and (coalesce(b.cd_escala_dor::text, '') = '' or coalesce(cd_escala_dor_w::text, '') = '' or
             b.cd_escala_dor = cd_escala_dor_w)
         and coalesce(b.cd_estabelecimento,
                 Wheb_usuario_pck.get_cd_estabelecimento) =
             wheb_usuario_pck.get_cd_estabelecimento
         and coalesce(b.cd_perfil, cd_perfil_w) = cd_perfil_w
         and nm_atributo = nm_atributo_inf_w
         and (b.vl_maximo IS NOT NULL AND b.vl_maximo::text <> '')
         and (b.qt_minimo IS NOT NULL AND b.qt_minimo::text <> '')
       order by coalesce(b.cd_setor_atendimento, 0),
                coalesce(b.cd_escala_dor, '0') desc,
                coalesce(b.cd_estabelecimento, 0);

   c06 CURSOR FOR
      SELECT nm_tabela,
             nm_atributo_data,
             nm_atributo_inf,
             coalesce(ds_nome_instituicao, ds_informacao) ds_informacao,
             ds_unid_med ds_unid_med
        from pep_informacao
       where ie_suep = 'S'
         and ie_grupo_suep = 'SV'
         and nr_sequencia not in (51, 299, 300, 301)
         and nr_sequencia not in (SELECT d.nr_seq_inf
                from suep b, item_suep c, informacao_suep d
               where c.nr_seq_suep = b.nr_sequencia
                 and d.nr_seq_item = c.nr_sequencia
                 and b.nr_sequencia = nr_seq_suep_p
                 and c.ie_tipo_item = 'SV')
       order by 2;

   C10 CURSOR FOR
      SELECT a.nr_sequencia nr_seq_glicemia
        FROM atend_glicemia a, prescr_medica b
       WHERE a.nr_prescricao = b.nr_prescricao
         AND a.nr_atendimento = b.nr_atendimento
         AND ((coalesce(a.nr_seq_prot_glic::text, '') = '') OR (EXISTS (SELECT 1
                         FROM pep_protocolo_glicemia c
                        WHERE c.nr_sequencia = a.nr_seq_prot_glic
                          AND c.ie_tipo = 'I')))
         AND ((clock_timestamp() BETWEEN b.dt_inicio_prescr AND b.dt_validade_prescr) OR (a.ie_status_glic <> 'P'))
         AND a.ie_status_glic NOT IN ('P')
         and obter_se_reg_lib_atencao(b.cd_pessoa_fisica,
                                      null,
                                      b.ie_nivel_atencao,
                                      b.nm_usuario,
                                      1383) = 'S'
         AND b.nr_atendimento = nr_atendimento_p

UNION

      SELECT a.nr_sequencia nr_seq_glicemia
        FROM atend_glicemia a, prescr_medica b
       WHERE a.nr_prescricao = b.nr_prescricao
         AND a.nr_atendimento = b.nr_atendimento
         AND SUBSTR(obter_se_proc_suspenso(a.nr_prescricao,
                                           a.nr_seq_procedimento),
                    1,
                    1) <> 'S'
         AND ((coalesce(a.nr_seq_prot_glic::text, '') = '') OR (EXISTS (SELECT 1
                         FROM pep_protocolo_glicemia c
                        WHERE c.nr_sequencia = a.nr_seq_prot_glic
                          AND c.ie_tipo = 'I')))
         AND clock_timestamp() BETWEEN b.dt_inicio_prescr AND b.dt_validade_prescr
         AND a.ie_status_glic = 'P'
         and obter_se_reg_lib_atencao(b.cd_pessoa_fisica,
                                      null,
                                      b.ie_nivel_atencao,
                                      b.nm_usuario,
                                      1383) = 'S'
         AND coalesce(b.dt_suspensao::text, '') = ''
         AND b.nr_atendimento = nr_atendimento_p
         AND NOT EXISTS
       (SELECT 1
                FROM atend_glicemia x
               WHERE x.nr_atendimento = a.nr_atendimento
                 AND SUBSTR(obter_se_proc_suspenso(x.nr_prescricao,
                                                   x.nr_seq_procedimento),
                            1,
                            1) <> 'S'
                 AND ((coalesce(x.nr_seq_prot_glic::text, '') = '') OR (EXISTS (SELECT 1
                                 FROM pep_protocolo_glicemia c
                                WHERE c.nr_sequencia = x.nr_seq_prot_glic
                                  AND c.ie_tipo = 'I')))
                 AND x.ie_status_glic NOT IN ('P', 'T')
                 AND x.nr_sequencia <> a.nr_sequencia);

   C11 CURSOR FOR
      SELECT dt_controle, qt_hgt, qt_veloc_adm
        from atendimento_cig
       where nr_atendimento = nr_atendimento_p
         and nr_seq_glicemia = nr_seq_glicemia_w;

   C12 CURSOR FOR
      SELECT a.nr_seq_prot_glic, a.nr_sequencia nr_seq_glicemia
        FROM atend_glicemia a, prescr_medica b, pep_protocolo_glicemia c
       WHERE a.nr_prescricao = b.nr_prescricao
         AND a.nr_atendimento = b.nr_atendimento
         AND c.nr_sequencia = a.nr_seq_prot_glic
         AND c.ie_tipo = 'C'
         AND (a.nr_seq_prot_glic IS NOT NULL AND a.nr_seq_prot_glic::text <> '')
         AND ((clock_timestamp() BETWEEN b.dt_inicio_prescr AND b.dt_validade_prescr) OR (a.ie_status_glic = 'N'))
         AND b.nr_atendimento = nr_atendimento_p;

   C13 CURSOR FOR
      SELECT dt_controle, qt_glicemia
        FROM ATENDIMENTO_GLICEMIA
       WHERE nr_atendimento = nr_atendimento_p
         AND nr_seq_glicemia = nr_seq_glicemia_w
         AND nr_seq_protocolo = nr_seq_prot_glic_w;

   procedure gerar_w_suep is
;
BEGIN

      if (coalesce(nr_atendimento_p, 0) > 0) then
      
         select max(a.cd_pessoa_fisica),
                max(a.dt_entrada),
                max(c.cd_unidade_basica),
                max(c.cd_unidade_compl),
                max(c.cd_setor_atendimento),
                max(b.cd_convenio),
                max(b.cd_categoria),
                max(a.dt_alta),
                max(v.ds_convenio),
                max(t.ds_categoria),
                max(obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'A')),
                max(obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'DIA')),
                max(obter_sexo_pf(a.cd_pessoa_fisica, 'C')),
                max(ie_tipo_atendimento)
           into STRICT cd_pessoa_fisica_w,
                dt_entrada_w,
                cd_unidade_basica_w,
                cd_unidade_compl_w,
                cd_setor_atendimento_w,
                cd_convenio_w,
                cd_categoria_w,
                dt_alta_w,
                ds_convenio_w,
                ds_categoria_w,
                qt_idade_w,
                qt_idade_dia_w,
                ie_sexo_w,
                ie_tipo_atendimento_w
           from convenio                 v,
                categoria_convenio       t,
                atend_paciente_unidade   c,
                atend_categoria_convenio b,
                atendimento_paciente     a
          where a.nr_atendimento = nr_atendimento_p
            and a.nr_atendimento = c.nr_atendimento
            and c.nr_seq_interno =
                obter_atepacu_paciente(a.nr_atendimento, 'A')
            and a.nr_atendimento = b.nr_atendimento
            and b.nr_seq_interno =
                obter_atecaco_atendimento(a.nr_atendimento)
            and b.cd_convenio = v.cd_convenio
            and b.cd_convenio = t.cd_convenio
            and b.cd_categoria = t.cd_categoria;

         qt_dias_internacao_w := trunc(coalesce(trunc(dt_alta_w), trunc(clock_timestamp())) -
                                       dt_entrada_w) + 1;
         qt_dias_po_w         := Obter_Dias_Pos_Operatorio(nr_atendimento_p);
         qt_peso_adm_w        := obter_primeiro_sinal_vital(nr_atendimento_p,
                                                            'Peso');

         select max(nr_seq_episodio)
           into STRICT nr_seq_episodio_w
           from atendimento_paciente
          where nr_atendimento = nr_atendimento_p;

      end if;

      begin
         nm_pessoa_fisica_w := null;
         nr_prontuario_w    := null;
         ie_tipo_sangue_w   := null;
         ie_fator_rh_w      := null;

         select nm_pessoa_fisica, nr_prontuario, ie_tipo_sangue, ie_fator_rh
           into STRICT nm_pessoa_fisica_w,
                nr_prontuario_w,
                ie_tipo_sangue_w,
                ie_fator_rh_w
           from pessoa_fisica
          where cd_pessoa_fisica = cd_pessoa_fisica_p;
      exception when no_data_found then
          null;
      when too_many_rows then
          null;
      end;

      select nextval('w_suep_seq') into STRICT nr_seq_suep_w;

      insert into w_suep(nr_sequencia,
          dt_atualizacao,
          nm_usuario,
          dt_atualizacao_nrec,
          nm_usuario_nrec,
          nr_atendimento,
          dt_entrada,
          nm_pessoa_fisica,
          nr_prontuario,
          ie_tipo_sangue,
          ie_fator_rh,
          cd_unidade_basica,
          cd_unidade_compl,
          cd_setor_atendimento,
          cd_convenio,
          cd_categoria,
          qt_dias_internacao,
          qt_dias_po,
          qt_peso_adm,
          ds_convenio,
          ds_categoria,
          cd_pessoa_fisica)
      values (nr_seq_suep_w,
          clock_timestamp(),
          nm_usuario_p,
          clock_timestamp(),
          nm_usuario_p,
          nr_atendimento_p,
          dt_entrada_w,
          nm_pessoa_fisica_w,
          nr_prontuario_w,
          ie_tipo_sangue_w,
          ie_fator_rh_w,
          cd_unidade_basica_w,
          cd_unidade_compl_w,
          cd_setor_atendimento_w,
          cd_convenio_w,
          cd_categoria_w,
          qt_dias_internacao_w,
          qt_dias_po_w,
          qt_peso_adm_w,
          ds_convenio_w,
          ds_categoria_w,
          cd_pessoa_fisica_p);

   end;

   procedure gerar_w_suep_item(ds_informacao_p    in varchar2,
                               nr_seq_item_p      in number,
                               nr_seq_apres_p     in number,
                               ie_grupo_suep_p    in varchar2,
                               qt_minimo_p        in number ,
                               vl_maximo_p        in number ,
                               ie_subgrupo_suep_p in varchar2) is
   begin
      if (ds_informacao_p IS NOT NULL AND ds_informacao_p::text <> '') then
         select nextval('w_suep_item_seq') into STRICT nr_seq_suep_item_w;

         insert into w_suep_item(nr_sequencia,
             dt_atualizacao,
             nm_usuario,
             dt_atualizacao_nrec,
             nm_usuario_nrec,
             nr_seq_suep,
             nr_seq_inf,
             ds_informacao,
             ds_unid_med,
             nr_seq_apres,
             ie_grupo_suep,
             vl_max_inf_sv,
             vl_min_inf_sv,
             qt_pont_min,
             qt_pont_max,
             qt_risco_min,
             qt_risco_max,
             ie_subgrupo_suep)
         values (nr_seq_suep_item_w,
             clock_timestamp(),
             nm_usuario_p,
             clock_timestamp(),
             nm_usuario_p,
             nr_seq_suep_w,
             nr_seq_item_p,
             ds_informacao_p,
             ds_unid_med_w,
             nr_seq_apres_p,
             ie_grupo_suep_p,
             vl_maximo_p,
             qt_minimo_p,
             qt_pont_min_w,
             qt_pont_max_w,
             qt_risco_min_w,
             qt_risco_max_w,
             ie_subgrupo_suep_p);
      end if;
   end;

   procedure gravar_w_suep_item_data(dt_informacao_p       date,
                                     vl_informacao_p       number,
                                     ds_informacao_p       varchar2 ,
                                     ds_resultado_escala_p varchar2 ,
                                     cd_escala_dor_p       varchar2 ) is
   begin

      if (dt_informacao_p IS NOT NULL AND dt_informacao_p::text <> '') and (vl_informacao_p IS NOT NULL AND vl_informacao_p::text <> '') then
      
         select pkg_date_formaters.getDateLanguageFromTag(pkg_date_formaters.getUserLanguageTag(cd_estab_usuario_w,
                                                                                                nm_usuario_p))
           into STRICT nls_language_w
;

         dt_informacao_w := to_char(dt_informacao_p,
                                    pkg_date_formaters.localize_mask('short',
                                                                     pkg_date_formaters.getUserLanguageTag(cd_estab_usuario_w,
                                                                                                           nm_usuario_p)),
                                    'NLS_DATE_LANGUAGE=''' || nls_language_w || '''');

         ds_tolltip_w := dt_informacao_w || ' - ' || vl_informacao_p;

         insert into w_suep_item_data(nr_sequencia,
             dt_atualizacao,
             nm_usuario,
             dt_atualizacao_nrec,
             nm_usuario_nrec,
             nr_seq_suep_item,
             dt_informacao,
             vl_informacao,
             ds_informacao,
             ds_result_escala,
             ds_tolltip,
             cd_escala_dor)
         values (nextval('w_suep_item_data_seq'),
             clock_timestamp(),
             nm_usuario_p,
             clock_timestamp(),
             nm_usuario_p,
             nr_seq_suep_item_w,
             dt_informacao_p,
             vl_informacao_p,
             ds_informacao_p,
             ds_resultado_escala_p,
             ds_tolltip_w,
             cd_escala_dor_p);

      end if;
   end;

   procedure gravar_informacoes(nm_atributo_data_p         in Varchar2,
                                nm_atributo_inf_p          in varchar2,
                                nm_tabela_p                in varchar2,
                                ds_func_escala_suep_p      in varchar2,
                                dt_inicial_p               in date,
                                dt_final_p                 in date,
                                ie_grupo_suep_p            in varchar2,
                                ie_formato_busca_p         in varchar2,
                                qt_dias_busca_p            in number,
                                qt_consultas_busca_p       in number,
                                ie_restringir_tipo_atend_p in varchar2,
                                ie_score_flex_p            in varchar2 default 'N',
                                nr_seq_escala_p            in number,
                                ie_sub_grupo_suep_p        in Varchar2,
                                ie_origem_sv_p             in varchar2 ) is

      qt_reg_w          number(10);
      ds_comando_w      varchar2(4000);
      dt_inicial_w      date;
      dt_final_w        date;
      ds_atendimentos_w varchar2(4000);
      vl_informacao_w   number(15, 4);
      dt_referencia_w   date;
      cd_escala_dor_w   w_suep_item_data.cd_escala_dor%type;

   begin
      dt_inicial_w := dt_inicial_p;
      dt_final_w   := dt_final_p;

      if (ie_grupo_suep_p = 'SV' or ie_grupo_suep_p = 'ST' or
         ie_grupo_suep_p = 'CG' or ie_sub_grupo_suep_p = 'SV') then
         nr_item_pront_w := 13;
      elsif (ie_grupo_suep_p = 'EI' or ie_grupo_suep_p = 'ES' or
            ie_grupo_suep_p = 'ER' or ie_sub_grupo_suep_p = 'EI') then
         nr_item_pront_w := 374;
      elsif (ie_grupo_suep_p = 'AN') then
         nr_item_pront_w := 41;
      end if;

      ds_comando_w := 'select	     	' || nm_atributo_data_p ||
                      ' dt_referencia ,' || '            	' ||
                      nm_atributo_inf_p || ' ds_informacao ';

      if (ie_grupo_suep_p = 'ST' and
         upper(nm_tabela_p) = 'ATENDIMENTO_SINAL_VITAL') then
         ds_comando_w := ds_comando_w || ',	cd_escala_dor ';
      end if;

      ds_comando_w := ds_comando_w || 'from		' || nm_tabela_p || ' ' ||
                      'where		1 = 1 ' || 'and		' || nm_atributo_inf_p ||
                      ' is not null';

      select count(*)
        into STRICT qt_reg_w
        from tabela_atributo
       where nm_tabela = nm_tabela_p
         and nm_atributo = 'DT_LIBERACAO';

      if (qt_reg_w > 0) then
         ds_comando_w := ds_comando_w || ' and dt_liberacao is not null ';
      end if;

      select count(*)
        into STRICT qt_reg_w
        from tabela_atributo
       where nm_tabela = nm_tabela_p
         and nm_atributo = 'DT_INATIVACAO';

      if (qt_reg_w > 0) then
         ds_comando_w := ds_comando_w || ' and DT_INATIVACAO is null ';
      end if;

      -- Metodo de Busca      
      if (ie_formato_busca_p = 'A' and coalesce(qt_consultas_busca_w::text, '') = '') then
         ds_comando_w := ds_comando_w ||
                         ' and nr_atendimento = :nr_atendimento ';
      elsif (ie_formato_busca_p = 'P' AND nm_tabela_p = 'ATENDIMENTO_SINAL_VITAL') then
         ds_comando_w := ds_comando_w ||
                         ' and cd_paciente = :cd_pessoa_fisica ';
      elsif (ie_formato_busca_p = 'P' AND (ie_grupo_suep_p = 'EI' or ie_grupo_suep_p = 'AN' or
            ie_grupo_suep_p = 'ES' or ie_grupo_suep_p = 'ER' or
            ie_sub_grupo_suep_p = 'EI')) then
         ds_comando_w := ds_comando_w ||
                         ' and nr_atendimento in  (select nr_atendimento from atendimento_paciente where cd_pessoa_fisica = :cd_pessoa_fisica) ';
      elsif ((ie_formato_busca_p = 'C') and coalesce(qt_consultas_busca_w::text, '') = '') then
         ds_comando_w := ds_comando_w ||
                         ' and nr_atendimento in  (select nr_atendimento from atendimento_paciente where cd_pessoa_fisica = :cd_pessoa_fisica and nr_seq_episodio = :nr_seq_episodio) ';
      else
         ds_comando_w := ds_comando_w ||
                         ' and cd_pessoa_fisica = :cd_pessoa_fisica ';
      end if;

      if (not(ie_origem_sv_p = 'A') and (nm_tabela_p = 'ATENDIMENTO_SINAL_VITAL')) then
         if (ie_origem_sv_p = 'M' AND nm_tabela_p = 'ATENDIMENTO_SINAL_VITAL') then
            ds_comando_w := ds_comando_w ||
                            ' and nvl(ie_integracao,''N'') = ''N'' ';
         elsif (ie_origem_sv_p = 'I' AND nm_tabela_p = 'ATENDIMENTO_SINAL_VITAL') then
            ds_comando_w := ds_comando_w ||
                            ' and nvl(ie_integracao,''N'') = ''S'' ';
         end if;
      end if;

      -- Periodo de busca
      if (qt_dias_busca_p IS NOT NULL AND qt_dias_busca_p::text <> '') then
         dt_inicial_w := clock_timestamp() - qt_dias_busca_p;
         ds_comando_w := ds_comando_w || 'and			' || nm_atributo_data_p ||
                         ' between :dt_inicial and :dt_final ';
      elsif (qt_consultas_busca_w IS NOT NULL AND qt_consultas_busca_w::text <> '') then
         ds_atendimentos_w := obter_lista_atend_suep(cd_pessoa_fisica_p,
                                                     ie_tipo_atendimento_w,
                                                     qt_consultas_busca_p,
                                                     ie_formato_busca_p,
                                                     nr_atendimento_p);
         ds_comando_w      := ds_comando_w || ' and nr_atendimento in  (' ||
                              coalesce(ds_atendimentos_w, 0) || ') ';
      end if;

      if (nm_tabela_p = 'ATENDIMENTO_SINAL_VITAL') then
         ds_comando_w := ds_comando_w ||
                         'and	obter_se_reg_lib_atencao(cd_paciente ,null, ie_nivel_atencao, nm_usuario,' ||
                         nr_item_pront_w || ') = ''S''';
      end if;

      if (ie_score_flex_p = 'SF' and (nr_seq_escala_p IS NOT NULL AND nr_seq_escala_p::text <> '')) then
         ds_comando_w := ds_comando_w || ' and nr_seq_escala = ' ||
                         nr_seq_escala_p;
      elsif (ie_score_flex_p = 'SFII' and (nr_seq_escala_p IS NOT NULL AND nr_seq_escala_p::text <> '')) then
         ds_comando_w := ds_comando_w || ' and nr_seq_escala = ' ||
                         nr_seq_escala_p;
      end if;

      ds_comando_w := ds_comando_w || 'order by ' || nm_atributo_data_p;

      C04 := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(C04, ds_comando_w, dbms_sql.Native);

      DBMS_SQL.DEFINE_COLUMN(C04, 1, dt_referencia_w);
      DBMS_SQL.DEFINE_COLUMN(C04, 2, vl_informacao_w);

      if (ie_grupo_suep_p = 'ST' and
         upper(nm_tabela_p) = 'ATENDIMENTO_SINAL_VITAL') then
         DBMS_SQL.DEFINE_COLUMN(C04, 3, cd_escala_dor_w, 5);
      end if;

      if (ie_formato_busca_p = 'A' and coalesce(qt_consultas_busca_w::text, '') = '') then
         DBMS_SQL.BIND_VARIABLE(C04, 'NR_ATENDIMENTO', NR_ATENDIMENTO_P);
      end if;

      if (ie_formato_busca_p = 'P') then
         DBMS_SQL.BIND_VARIABLE(C04,
                                'CD_PESSOA_FISICA',
                                CD_PESSOA_FISICA_P);
      end if;

      if (ie_formato_busca_p = 'C') then
         DBMS_SQL.BIND_VARIABLE(C04,
                                'CD_PESSOA_FISICA',
                                CD_PESSOA_FISICA_P);

         if (coalesce(qt_consultas_busca_w::text, '') = '') then
         
            DBMS_SQL.BIND_VARIABLE(C04,
                                   'NR_SEQ_EPISODIO',
                                   nr_seq_episodio_w);

         end if;
      end if;
	
	  if (ie_formato_busca_p = 'A' and (qt_consultas_busca_w IS NOT NULL AND qt_consultas_busca_w::text <> '')) then
        DBMS_SQL.BIND_VARIABLE(C04,'CD_PESSOA_FISICA',CD_PESSOA_FISICA_P);
      end if;

      if (qt_dias_busca_p IS NOT NULL AND qt_dias_busca_p::text <> '') then
         DBMS_SQL.BIND_VARIABLE(C04, 'DT_INICIAL', dt_inicial_w);
         DBMS_SQL.BIND_VARIABLE(C04, 'DT_FINAL', dt_final_w);
      end if;

      retorno_w := DBMS_SQL.execute(C04);

      while(DBMS_SQL.FETCH_ROWS(C04) > 0) loop
         begin
            DBMS_SQL.COLUMN_VALUE(C04, 1, dt_referencia_w);
            DBMS_SQL.COLUMN_VALUE(C04, 2, vl_informacao_w);

            if (ie_grupo_suep_p = 'ST' and
               upper(nm_tabela_p) = 'ATENDIMENTO_SINAL_VITAL') then
               DBMS_SQL.COLUMN_VALUE(C04, 3, cd_escala_dor_w);
            end if;

            select replace(vl_informacao_w, ',', '.')
              into STRICT vl_informacao_func_w
;

            if (ie_score_flex_p = 'SF') then
               select somente_numero(obter_resultado_escala_eif(nr_sequencia,
                                                                'T'))
                 into STRICT vl_informacao_w
                 from escala_eif
                where nr_sequencia = vl_informacao_w;
            elsif (ie_score_flex_p = 'SFII') then
               select qt_pontos
                 into STRICT vl_informacao_w
                 from escala_eif_ii
                where nr_sequencia = vl_informacao_w;
            end if;

            if (nm_tabela_w = 'GCA_ATENDIMENTO') then
               select QT_PONTUACAO
                 into STRICT vl_informacao_w
                 from GCA_ATENDIMENTO
                where nr_sequencia = vl_informacao_w;
            end if;

            if ((ie_grupo_suep_p = 'EI' or ie_grupo_suep_p = 'ES' or
               ie_grupo_suep_p = 'ER') AND ds_func_escala_suep_p IS NOT NULL AND ds_func_escala_suep_p::text <> '') then
               ds_comando_w := 'select	     	substr(' ||
                               ds_func_escala_suep_p || '(' ||
                               vl_informacao_func_w ||
                               '),1,255) ds_escala ' || 'from		dual';

               C21 := DBMS_SQL.OPEN_CURSOR;
               DBMS_SQL.PARSE(C21, ds_comando_w, dbms_sql.Native);
               DBMS_SQL.DEFINE_COLUMN(C21, 1, ds_escala_w, 200);
               retorno_escala_w := DBMS_SQL.execute(C21);
               while(DBMS_SQL.FETCH_ROWS(C21) > 0) loop
                  begin
                     DBMS_SQL.COLUMN_VALUE(C21, 1, ds_escala_w);
                  end;
               end loop;
               DBMS_SQL.CLOSE_CURSOR(C21);
               gravar_w_suep_item_data(dt_referencia_w,
                                       vl_informacao_w,
                                       null,
                                       ds_escala_w);

            else
               gravar_w_suep_item_data(dt_referencia_w,
                                       vl_informacao_w,
                                       null,
                                       null,
                                       cd_escala_dor_w);
            end if;

         end;
      end loop;
      DBMS_SQL.CLOSE_CURSOR(C04);
      commit;

   end;

begin
   cd_perfil_w        := coalesce(obter_perfil_ativo, 0);
   cd_estab_usuario_w := wheb_usuario_pck.get_cd_estabelecimento;

   ie_valor_fora_faixa_w := obter_param_usuario(2811, 1, obter_perfil_ativo, nm_usuario_p, cd_estab_usuario_w, ie_valor_fora_faixa_w);
   ie_resultado_w := obter_param_usuario(281, 17, obter_perfil_ativo, nm_usuario_p, cd_estab_usuario_w, ie_resultado_w);

   dt_inicial_w := clock_timestamp() - interval '7 days';
   dt_final_w   := clock_timestamp();

   delete from w_suep where dt_atualizacao < clock_timestamp() - interval '12 days' / 24;

   delete from w_suep
    where cd_pessoa_fisica = cd_pessoa_fisica_p
      and nm_usuario = nm_usuario_p;

   gerar_w_suep;

   open C01;
   loop
      fetch C01
         into nr_seq_item_w, ie_grupo_suep_w, nr_seq_apres_w, nr_seq_exame_w, ie_result_exame_w, nm_tabela_w, ds_func_escala_suep_w, nm_atributo_data_w, nm_atributo_inf_w, ds_informacao_w, ds_unid_med_w, qt_pont_min_w, qt_pont_max_w, qt_risco_min_w, qt_risco_max_w, ie_origem_glicemia_w, ie_formato_busca_w, qt_dias_busca_w, qt_consultas_busca_w, ie_restringir_tipo_atend_w, nr_seq_inf_w, nr_seq_escala_w, ie_sub_grupo_suep_w, ie_origem_sv_w;
      EXIT WHEN NOT FOUND; /* apply on C01 */
      begin

         -- Ler os valores de referencia de sinais vitais.
         if ((ie_grupo_suep_w = 'SV' or ie_grupo_suep_w = 'ST') AND nm_atributo_inf_w IS NOT NULL AND nm_atributo_inf_w::text <> '') then
         
            open C05;
            loop
               fetch C05
                  into qt_minimo_per_w, vl_maximo_per_w;
               EXIT WHEN NOT FOUND; /* apply on C05 */
               begin
                  qt_minimo_w := qt_minimo_per_w;
                  vl_maximo_w := vl_maximo_per_w;
               end;
            end loop;
            close C05;

            -- Ler os valores de referencia de exames de laboratorio 
         elsif (ie_grupo_suep_w = 'EX' or
               ie_sub_grupo_suep_w = 'EX' and (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '')) then
         
            select max(qt_minima), max(qt_maxima)
              into STRICT qt_minimo_w, vl_maximo_w
              from (SELECT qt_minima,
                           qt_maxima,
                           qt_percent_min,
                           qt_percent_max
                      from exame_lab_padrao
                     where ((ie_sexo = ie_sexo_w) or (ie_sexo = '0'))
                       and nr_seq_exame = nr_seq_exame_w
                       and qt_idade_w between coalesce(qt_idade_min, 0) and
                           coalesce(qt_idade_max, 99999)
                       and coalesce(ie_situacao, 'A') = 'A'
                     order by coalesce(nr_seq_material, 9999999999),
                              coalesce(nr_seq_metodo, 9999999999),
                              ie_sexo,
                              CASE WHEN ie_periodo='D' THEN  1 WHEN ie_periodo='M' THEN  2  ELSE 3 END ) alias12 LIMIT 1;

         end if;

         --Gravar o item na tabela temporaria e os valores de referencia desse item. Por exemplo: Temperatura (Min: 35; Max: 45).
         if (ie_grupo_suep_w = 'CV' or ie_grupo_suep_w = 'RP' or
            ie_grupo_suep_w = 'DF' or ie_grupo_suep_w = 'HG' or
            ie_grupo_suep_w = 'GI' or ie_grupo_suep_w = 'NL' or
            ie_grupo_suep_w = 'RL' or ie_grupo_suep_w = 'AN' or
            ie_grupo_suep_w = 'EX' or ie_sub_grupo_suep_w = 'EX' or
            ie_grupo_suep_w = 'SV' or ie_grupo_suep_w = 'ST' or
            ie_grupo_suep_w = 'EI' or ie_grupo_suep_w = 'ES' or
            ie_grupo_suep_w = 'ER' or (ie_grupo_suep_w = 'CG' and (nm_tabela_w IS NOT NULL AND nm_tabela_w::text <> ''))) then
         
            gerar_w_suep_item(ds_informacao_w,
                              nr_seq_item_w,
                              nr_seq_apres_w,
                              ie_grupo_suep_w,
                              qt_minimo_w,
                              vl_maximo_w,
                              ie_sub_grupo_suep_w);

         end if;

         qt_minimo_w := null;
         vl_maximo_w := null;

         -- Buscar e gravar os valores referentes a cada item. Por exemplo: Todas as medicoes de temperatura no periodo, para o atendimento.

         --Apenas Sinais vitais, Glicemia (SV) e Escalas e indices
         if (ie_grupo_suep_w = 'SV') or (ie_grupo_suep_w = 'EI') or (ie_sub_grupo_suep_w = 'SV') or (ie_sub_grupo_suep_w = 'EI') or (ie_grupo_suep_w = 'ES') or (ie_grupo_suep_w = 'ER') or (ie_grupo_suep_w = 'AN') or (ie_grupo_suep_w = 'ST') or (ie_grupo_suep_w = 'CG' and (nm_tabela_w IS NOT NULL AND nm_tabela_w::text <> '')) then
            -- ie_grupo_suep_w = 'CV' and ie_tipo_subitem = 'EI' or 'SV'      
            if (nr_seq_inf_w = '346') then
               ie_score_flex_w := 'SF';
            elsif (nr_seq_inf_w = '347') then
               ie_score_flex_w := 'SFII';
            end if;

            gravar_informacoes(nm_atributo_data_w,
                               nm_atributo_inf_w,
                               nm_tabela_w,
                               ds_func_escala_suep_w,
                               dt_inicial_w,
                               dt_final_w,
                               ie_grupo_suep_w,
                               ie_formato_busca_w,
                               qt_dias_busca_w,
                               qt_consultas_busca_w,
                               ie_restringir_tipo_atend_w,
                               ie_score_flex_w,
                               nr_seq_escala_w,
                               ie_sub_grupo_suep_w,
                               ie_origem_sv_w);

            ie_score_flex_w := 'N';

            --Apenas Exames laboratoriais  
         elsif (ie_grupo_suep_w = 'EX') or (ie_sub_grupo_suep_w = 'EX') then
            -- ie_grupo_suep_w = 'CV' and ie_tipo_subitem = 'EX'
            nr_item_pront_w := 2;

            if (ie_resultado_w = 5) then
            
               ds_comando_w := 'select distinct 
                                       a.dt_resultado,
                                       nvl(b.qt_resultado,0),
                                       b.pr_resultado,
                                       b.ds_resultado,
                                       b.nr_seq_resultado
                                  from exame_lab_result_item b,
                                       exame_lab_resultado a
                                 where a.nr_seq_resultado = b.nr_seq_resultado
                                   and a.dt_liberacao     is not null
                                   and b.nr_seq_exame     = :nr_seq_exame';

               if (ie_formato_busca_w = 'A') then
                  ds_comando_w := ds_comando_w ||
                                  ' and a.nr_atendimento = :nr_atendimento ';
               elsif ((ie_formato_busca_w = 'C') and
                     coalesce(qt_consultas_busca_w::text, '') = '') then
                  ds_comando_w := ds_comando_w ||
                                  ' and a.nr_atendimento in  (select nr_atendimento from atendimento_paciente where cd_pessoa_fisica = :cd_pessoa_fisica and nr_seq_episodio = :nr_seq_episodio) ';
               else
                  ds_comando_w := ds_comando_w ||
                                  ' and a.cd_pessoa_fisica = :cd_pessoa_fisica ';
               end if;

               if (qt_dias_busca_w IS NOT NULL AND qt_dias_busca_w::text <> '') then
                  dt_inicial_w := clock_timestamp() - qt_dias_busca_w;
                  ds_comando_w := ds_comando_w ||
                                  'and a.dt_resultado between :dt_inicial and :dt_final ';

               elsif (qt_consultas_busca_w IS NOT NULL AND qt_consultas_busca_w::text <> '') then
                  ds_atendimentos_w := obter_lista_atend_suep(cd_pessoa_fisica_p,
                                                              ie_tipo_atendimento_w,
                                                              qt_consultas_busca_w,
                                                              ie_formato_busca_w,
                                                              nr_atendimento_p);
                  ds_comando_w      := ds_comando_w ||
                                       ' and a.nr_atendimento in  (' ||
                                       coalesce(ds_atendimentos_w, 0) || ') ';
               else
                  ds_comando_w := ds_comando_w ||
                                  'and a.dt_resultado between :dt_inicial and :dt_final ';
               end if;

               ds_comando_w := ds_comando_w ||
                               'and	obter_se_reg_lib_atencao(a.cd_pessoa_fisica ,null, a.ie_nivel_atencao, a.nm_usuario,' ||
                               nr_item_pront_w || ') = ''S''';

               ds_comando_w := ds_comando_w ||
                               'ORDER BY a.dt_resultado, b.nr_seq_resultado';

            else
            
               ds_comando_w := 'select distinct 
                                       a.dt_resultado,
                                       nvl(b.qt_resultado,0),
                                       b.pr_resultado,
                                       b.ds_resultado,
                                       b.nr_seq_resultado
                                  from exame_lab_result_item b,
                                       prescr_procedimento x,
                                       prescr_medica d,
                                       exame_lab_resultado a
                                 where a.nr_seq_resultado = b.nr_seq_resultado
                                   and	d.nr_prescricao   = a.nr_prescricao
                                   and	d.nr_prescricao   = x.nr_prescricao
                                   and	x.nr_sequencia    = b.nr_seq_prescr
                                   and	d.dt_suspensao    is null
                                   and	d.dt_liberacao    is not null
                                   and	b.nr_seq_exame    = :nr_seq_exame';

               if (ie_formato_busca_w = 'A') then
                  ds_comando_w := ds_comando_w ||
                                  ' and d.nr_atendimento = :nr_atendimento ';
               elsif ((ie_formato_busca_w = 'C') and
                     coalesce(qt_consultas_busca_w::text, '') = '') then
                  ds_comando_w := ds_comando_w ||
                                  ' and d.nr_atendimento in  (select nr_atendimento from atendimento_paciente where cd_pessoa_fisica = :cd_pessoa_fisica and nr_seq_episodio = :nr_seq_episodio) ';
               else
                  ds_comando_w := ds_comando_w ||
                                  ' and d.cd_pessoa_fisica = :cd_pessoa_fisica ';
               end if;

               if (qt_dias_busca_w IS NOT NULL AND qt_dias_busca_w::text <> '') then
                  dt_inicial_w := clock_timestamp() - qt_dias_busca_w;
                  ds_comando_w := ds_comando_w ||
                                  'and a.dt_resultado between :dt_inicial and :dt_final ';

               elsif (qt_consultas_busca_w IS NOT NULL AND qt_consultas_busca_w::text <> '') then
                  ds_atendimentos_w := obter_lista_atend_suep(cd_pessoa_fisica_p,
                                                              ie_tipo_atendimento_w,
                                                              qt_consultas_busca_w,
                                                              ie_formato_busca_w,
                                                              nr_atendimento_p);
                  ds_comando_w      := ds_comando_w ||
                                       ' and d.nr_atendimento in  (' ||
                                       coalesce(ds_atendimentos_w, 0) || ') ';
               else
                  ds_comando_w := ds_comando_w ||
                                  'and a.dt_resultado between :dt_inicial and :dt_final ';
               end if;

               ds_comando_w := ds_comando_w ||
                               'and	obter_se_reg_lib_atencao(d.cd_pessoa_fisica ,null, d.ie_nivel_atencao, d.nm_usuario,' ||
                               nr_item_pront_w || ') = ''S''';

               ds_comando_w := ds_comando_w ||
                               'ORDER BY a.dt_resultado, b.nr_seq_resultado';

            end if;

            C04 := DBMS_SQL.OPEN_CURSOR;
            DBMS_SQL.PARSE(C04, ds_comando_w, dbms_sql.Native);

            DBMS_SQL.DEFINE_COLUMN(C04, 1, dt_referencia_w);
            DBMS_SQL.DEFINE_COLUMN(C04, 2, vl_informacao_w);
            DBMS_SQL.DEFINE_COLUMN(C04, 3, pr_informacao_w);
            DBMS_SQL.DEFINE_COLUMN(C04, 4, ds_resultado_w, 255);

            DBMS_SQL.BIND_VARIABLE(C04, 'NR_SEQ_EXAME', nr_seq_exame_w);

            if (ie_formato_busca_w = 'A') then
               DBMS_SQL.BIND_VARIABLE(C04,
                                      'NR_ATENDIMENTO',
                                      NR_ATENDIMENTO_P);
            end if;

            if (ie_formato_busca_w = 'P') then
               DBMS_SQL.BIND_VARIABLE(C04,
                                      'CD_PESSOA_FISICA',
                                      CD_PESSOA_FISICA_P);
            end if;

            if (ie_formato_busca_w = 'C') then
               DBMS_SQL.BIND_VARIABLE(C04,
                                      'CD_PESSOA_FISICA',
                                      CD_PESSOA_FISICA_P);
               if (coalesce(qt_consultas_busca_w::text, '') = '') then

                  DBMS_SQL.BIND_VARIABLE(C04,
                                         'NR_SEQ_EPISODIO',
                                         nr_seq_episodio_w);

               end if;
            end if;

            if ((qt_dias_busca_w IS NOT NULL AND qt_dias_busca_w::text <> '') or coalesce(qt_consultas_busca_w::text, '') = '') then
               DBMS_SQL.BIND_VARIABLE(C04, 'DT_INICIAL', dt_inicial_w);
               DBMS_SQL.BIND_VARIABLE(C04, 'DT_FINAL', dt_final_w);
            end if;

            retorno_w := DBMS_SQL.execute(C04);

            while(DBMS_SQL.FETCH_ROWS(C04) > 0) loop
               begin
                  DBMS_SQL.COLUMN_VALUE(C04, 1, dt_referencia_w);
                  DBMS_SQL.COLUMN_VALUE(C04, 2, vl_informacao_w);
                  DBMS_SQL.COLUMN_VALUE(C04, 3, pr_informacao_w);
                  DBMS_SQL.COLUMN_VALUE(C04, 4, ds_resultado_w);

                  if (ie_result_exame_w = 'P') then
                     vl_informacao_w := pr_informacao_w;
                  elsif (vl_informacao_w = 0) and (obter_se_somente_numero_mx(ds_resultado_w) = 'S') then
                     vl_informacao_w := ds_resultado_w;
                  end if;

                  gravar_w_suep_item_data(dt_referencia_w,
                                          vl_informacao_w,
                                          ds_resultado_w);

               end;
            end loop;

            DBMS_SQL.CLOSE_CURSOR(C04);

         elsif (ie_grupo_suep_w = 'CG') then
         
            if (ie_origem_glicemia_w = 'A') then
            
               open C10;
               loop
                  fetch C10
                     into nr_seq_glicemia_w;
                  EXIT WHEN NOT FOUND; /* apply on C10 */
                  begin

                     select nextval('w_suep_item_seq')
                       into STRICT nr_seq_item_hgt_glic_w
;

                     insert into w_suep_item(nr_sequencia,
                         dt_atualizacao,
                         nm_usuario,
                         dt_atualizacao_nrec,
                         nm_usuario_nrec,
                         nr_seq_suep,
                         nr_seq_inf,
                         ds_informacao,
                         ds_unid_med,
                         nr_seq_apres,
                         ie_grupo_suep)
                     values (nr_seq_item_hgt_glic_w,
                         clock_timestamp(),
                         nm_usuario_p,
                         clock_timestamp(),
                         nm_usuario_p,
                         nr_seq_suep_w,
                         nr_seq_item_w,
                         obter_desc_expressao(290912) || ' - ' ||
                         obter_desc_expressao(302841),
                         obter_desc_expressao(726144),
                         nr_seq_apres_w,
                         ie_grupo_suep_w);

                     select nextval('w_suep_item_seq')
                       into STRICT nr_seq_item_veloc_glic_w
;

                     insert into w_suep_item(nr_sequencia,
                         dt_atualizacao,
                         nm_usuario,
                         dt_atualizacao_nrec,
                         nm_usuario_nrec,
                         nr_seq_suep,
                         nr_seq_inf,
                         ds_informacao,
                         ds_unid_med,
                         nr_seq_apres,
                         ie_grupo_suep)
                     values (nr_seq_item_veloc_glic_w,
                         clock_timestamp(),
                         nm_usuario_p,
                         clock_timestamp(),
                         nm_usuario_p,
                         nr_seq_suep_w,
                         nr_seq_item_w,
                         obter_desc_expressao(301601) || ' - ' ||
                         obter_desc_expressao(302841),
                         obter_desc_expressao(306900),
                         nr_seq_apres_w,
                         ie_grupo_suep_w);

                     open C11;
                     loop
                        fetch C11
                           into dt_controle_glicemia_w, qt_hgt_w, qt_veloc_adm_w;
                        EXIT WHEN NOT FOUND; /* apply on C11 */
                        begin

                           dt_informacao_w := to_char(dt_controle_glicemia_w,
                                                      pkg_date_formaters.localize_mask('short',
                                                                                       pkg_date_formaters.getUserLanguageTag(cd_estab_usuario_w,
                                                                                                                             nm_usuario_p)));

                           ds_tolltip_w := dt_informacao_w || ' - ' ||
                                           qt_hgt_w;

                           insert into w_suep_item_data(nr_sequencia,
                               dt_atualizacao,
                               nm_usuario,
                               dt_atualizacao_nrec,
                               nm_usuario_nrec,
                               nr_seq_suep_item,
                               dt_informacao,
                               vl_informacao,
                               ds_informacao,
                               ds_tolltip)
                           values (nextval('w_suep_item_data_seq'),
                               clock_timestamp(),
                               nm_usuario_p,
                               clock_timestamp(),
                               nm_usuario_p,
                               nr_seq_item_hgt_glic_w,
                               dt_controle_glicemia_w,
                               qt_hgt_w,
                               null,
                               ds_tolltip_w);

                           dt_informacao_w := to_char(dt_controle_glicemia_w,
                                                      pkg_date_formaters.localize_mask('short',
                                                                                       pkg_date_formaters.getUserLanguageTag(cd_estab_usuario_w,
                                                                                                                             nm_usuario_p)));

                           ds_tolltip_w := dt_informacao_w || ' - ' ||
                                           qt_veloc_adm_w;

                           insert into w_suep_item_data(nr_sequencia,
                               dt_atualizacao,
                               nm_usuario,
                               dt_atualizacao_nrec,
                               nm_usuario_nrec,
                               nr_seq_suep_item,
                               dt_informacao,
                               vl_informacao,
                               ds_informacao,
                               ds_tolltip)
                           values (nextval('w_suep_item_data_seq'),
                               clock_timestamp(),
                               nm_usuario_p,
                               clock_timestamp(),
                               nm_usuario_p,
                               nr_seq_item_veloc_glic_w,
                               dt_controle_glicemia_w,
                               qt_veloc_adm_w,
                               null,
                               ds_tolltip_w);

                        end;
                     end loop;
                     close C11;

                  end;
               end loop;
               close C10;

               open C12;
               loop
                  fetch C12
                     into nr_seq_prot_glic_w, nr_seq_glicemia_w;
                  EXIT WHEN NOT FOUND; /* apply on C12 */
                  begin

                     select nextval('w_suep_item_seq')
                       into STRICT nr_seq_item_glic_w
;

                     insert into w_suep_item(nr_sequencia,
                         dt_atualizacao,
                         nm_usuario,
                         dt_atualizacao_nrec,
                         nm_usuario_nrec,
                         nr_seq_suep,
                         nr_seq_inf,
                         ds_informacao,
                         ds_unid_med,
                         nr_seq_apres,
                         ie_grupo_suep)
                     values (nr_seq_item_glic_w,
                         clock_timestamp(),
                         nm_usuario_p,
                         clock_timestamp(),
                         nm_usuario_p,
                         nr_seq_suep_w,
                         nr_seq_item_w,
                         obter_desc_expressao(290912) || ' - ' ||
                         obter_desc_expressao(309201),
                         obter_desc_expressao(726144),
                         nr_seq_apres_w,
                         ie_grupo_suep_w);

                     open C13;
                     loop
                        fetch C13
                           into dt_controle_glicemia_w, qt_glicemia_w;
                        EXIT WHEN NOT FOUND; /* apply on C13 */
                        begin

                           dt_informacao_w := to_char(dt_controle_glicemia_w,
                                                      pkg_date_formaters.localize_mask('short',
                                                                                       pkg_date_formaters.getUserLanguageTag(cd_estab_usuario_w,
                                                                                                                             nm_usuario_p)));

                           ds_tolltip_w := dt_informacao_w || ' - ' ||
                                           qt_glicemia_w;

                           insert into w_suep_item_data(nr_sequencia,
                               dt_atualizacao,
                               nm_usuario,
                               dt_atualizacao_nrec,
                               nm_usuario_nrec,
                               nr_seq_suep_item,
                               dt_informacao,
                               vl_informacao,
                               ds_informacao,
                               ds_tolltip)
                           values (nextval('w_suep_item_data_seq'),
                               clock_timestamp(),
                               nm_usuario_p,
                               clock_timestamp(),
                               nm_usuario_p,
                               nr_seq_item_glic_w,
                               dt_controle_glicemia_w,
                               qt_glicemia_w,
                               null,
                               ds_tolltip_w);

                        end;
                     end loop;
                     close C13;

                  end;
               end loop;
               close C12;

            end if;

         end if;

         commit;
      end;
   end loop;
   close C01;

   if (ie_valor_fora_faixa_w = 'S' or ie_valor_fora_faixa_w = 'V') then

      ie_tipo_item_w  := 'SV';
      nr_item_pront_w := 13;

      open C03;
      loop
         fetch C03
            into nr_seq_item_w, ie_grupo_suep_w, ie_formato_busca_w, qt_dias_busca_w, qt_consultas_busca_w, ie_restringir_tipo_atend_w, ie_tipo_subitem_w;
         EXIT WHEN NOT FOUND; /* apply on C03 */
         begin

            open C06;
            loop
               fetch C06
                  into nm_tabela_w, nm_atributo_data_w, nm_atributo_inf_w, ds_informacao_w, ds_unid_med_w;
               EXIT WHEN NOT FOUND; /* apply on C06 */
               begin

                  open C05;
                  loop
                     fetch C05
                        into qt_minimo_per_w, vl_maximo_per_w;
                     EXIT WHEN NOT FOUND; /* apply on C05 */
                     begin
                        qt_minimo_w := qt_minimo_per_w;
                        vl_maximo_w := vl_maximo_per_w;
                     end;
                  end loop;
                  close C05;

                  ds_comando_w := 'select	     	' || nm_atributo_data_w ||
                                  ' dt_referencia ,' || '            	' ||
                                  nm_atributo_inf_w || ' ds_informacao ' ||
                                  'from		' || nm_tabela_w || ' a ' ||
                                  'where		1 = 1 ' || 'and		' ||
                                  nm_atributo_inf_w || ' is not null ' ||
                                  'and 		a.dt_liberacao is not null ' ||
                                  'and 		a.DT_INATIVACAO is null ';

                  -- Metodo de Busca       
                  if (ie_formato_busca_w = 'A') then
                     ds_comando_w := ds_comando_w ||
                                     ' and nr_atendimento = :nr_atendimento ';
                     ds_comando_w := ds_comando_w ||
                                     ' and a.nr_sequencia = (select max(b.nr_sequencia) from atendimento_sinal_vital b where b.nr_atendimento = a.nr_atendimento and ' ||
                                     nm_atributo_inf_w || ' is not null)';
                  elsif (ie_formato_busca_w = 'P' AND nm_tabela_w = 'ATENDIMENTO_SINAL_VITAL') then
                     ds_comando_w := ds_comando_w ||
                                     ' and cd_paciente = :cd_pessoa_fisica ';
                     ds_comando_w := ds_comando_w ||
                                     ' and a.nr_sequencia = (select max(b.nr_sequencia) from atendimento_sinal_vital b where b.cd_paciente = a.cd_paciente and ' ||
                                     nm_atributo_inf_w || ' is not null)';
                  elsif (ie_formato_busca_w = 'C') then
                     ds_comando_w := ds_comando_w ||
                                     ' and nr_atendimento in  (select nr_atendimento from atendimento_paciente where cd_pessoa_fisica = :cd_pessoa_fisica and nr_seq_episodio = :nr_seq_episodio) ';
                  else
                     ds_comando_w := ds_comando_w ||
                                     ' and cd_pessoa_fisica = :cd_pessoa_fisica ';
                     ds_comando_w := ds_comando_w ||
                                     ' and a.nr_sequencia = (select max(b.nr_sequencia) from ' ||
                                     nm_tabela_w ||
                                     ' b where b.cd_pessoa_fisica = a.cd_pessoa_fisica and ' ||
                                     nm_atributo_inf_w || ' is not null)';
                  end if;

                  ds_comando_w := ds_comando_w || 'order by ' ||
                                  nm_atributo_data_w;

                  C20 := DBMS_SQL.OPEN_CURSOR;
                  DBMS_SQL.PARSE(C20, ds_comando_w, dbms_sql.Native);

                  DBMS_SQL.DEFINE_COLUMN(C20, 1, dt_referencia_w);
                  DBMS_SQL.DEFINE_COLUMN(C20, 2, vl_informacao_w);

                  if (ie_formato_busca_w = 'A') then
                     DBMS_SQL.BIND_VARIABLE(C20,
                                            'NR_ATENDIMENTO',
                                            NR_ATENDIMENTO_P);
                  end if;

                  if (ie_formato_busca_w = 'P') then
                     DBMS_SQL.BIND_VARIABLE(C20,
                                            'CD_PESSOA_FISICA',
                                            CD_PESSOA_FISICA_P);
                  end if;

                  if (ie_formato_busca_w = 'C') then
                     DBMS_SQL.BIND_VARIABLE(C04,
                                            'CD_PESSOA_FISICA',
                                            CD_PESSOA_FISICA_P);
                     DBMS_SQL.BIND_VARIABLE(C04,
                                            'NR_SEQ_EPISODIO',
                                            nr_seq_episodio_w);
                  end if;

                  retorno_w := DBMS_SQL.execute(C20);

                  if (DBMS_SQL.FETCH_ROWS(C20) > 0) then
                     begin
                     
                        DBMS_SQL.COLUMN_VALUE(C20, 1, dt_referencia_w);
                        DBMS_SQL.COLUMN_VALUE(C20, 2, vl_informacao_w);

                        DBMS_SQL.CLOSE_CURSOR(C20);

                        if ((vl_informacao_w > vl_maximo_w) or (vl_informacao_w < qt_minimo_w)) then
                        
                           gerar_w_suep_item(ds_informacao_w,
                                             null,
                                             999,
                                             'SV',
                                             qt_minimo_w,
                                             vl_maximo_w,
                                             ie_sub_grupo_suep_w);

                           gravar_informacoes(nm_atributo_data_w,
                                              nm_atributo_inf_w,
                                              nm_tabela_w,
                                              '',
                                              dt_inicial_w,
                                              dt_final_w,
                                              'SV',
                                              ie_formato_busca_w,
                                              qt_dias_busca_w,
                                              qt_consultas_busca_w,
                                              null,
                                              null,
                                              null,
                                              null);

                        end if;

                     end;
                  end if;
                  qt_minimo_w := null;
                  vl_maximo_w := null;
               end;
            end loop;
            close C06;

         end;
      end loop;
      close C03;

   end if;

   if (ie_valor_fora_faixa_w = 'S' or ie_valor_fora_faixa_w = 'E') then

      ie_tipo_item_w  := 'EX';
      nr_item_pront_w := 2;

      open C03;
      loop
         fetch C03
            into nr_seq_item_w, ie_grupo_suep_w, ie_formato_busca_w, qt_dias_busca_w, qt_consultas_busca_w, ie_restringir_tipo_atend_w, ie_sub_grupo_suep_w;
         EXIT WHEN NOT FOUND; /* apply on C03 */
         begin

            ds_comando_w := 'Select max(h.dt_resultado),
                                    e.nr_seq_exame
                               from exame_lab_result_item e,
                                    prescr_procedimento f,
                                    prescr_medica g,
                                    exame_lab_resultado h
                              where h.nr_seq_resultado = e.nr_seq_resultado
                                and g.nr_prescricao    = h.nr_prescricao
                                and g.nr_prescricao    = f.nr_prescricao
                                and f.nr_sequencia     = e.nr_seq_prescr
                                and g.dt_suspensao     is null
                                and g.dt_liberacao     is not null
                                and suep_obter_se_lab_ref(g.nr_prescricao,f.nr_sequencia,e.nr_seq_exame,e.nr_seq_material,e.ds_resultado,e.qt_resultado,e.pr_resultado) = ''S''
                                and not exists ( select 1
                                                   from suep i, 
                                                        item_suep j, 
                                                        informacao_suep k,                                                        subitem_suep s
                                                  where j.nr_seq_suep   = i.nr_sequencia 
                                                    and s.nr_seq_item   = j.nr_sequencia
                                                    and k.nr_seq_item   = j.nr_sequencia 
                                                    and i.nr_sequencia  = :nr_seq_suep
                                                    and (j.ie_tipo_item = ''EX'' or s.ie_tipo_item = ''EX'')
                                                    and k.nr_seq_exame  = e.nr_seq_exame)';

            if (ie_formato_busca_w = 'A' and coalesce(qt_consultas_busca_w::text, '') = '') then
               ds_comando_w := ds_comando_w ||
                               ' and g.nr_atendimento = :nr_atendimento ';
            elsif ((ie_formato_busca_w = 'C') and
                  coalesce(qt_consultas_busca_w::text, '') = '') then
               ds_comando_w := ds_comando_w ||
                               ' and g.nr_atendimento in  (select nr_atendimento from atendimento_paciente where cd_pessoa_fisica = :cd_pessoa_fisica and nr_seq_episodio = :nr_seq_episodio) ';
            else
               ds_comando_w := ds_comando_w ||
                               ' and g.cd_pessoa_fisica = :cd_pessoa_fisica ';
            end if;

            if (qt_dias_busca_w IS NOT NULL AND qt_dias_busca_w::text <> '') then
               dt_inicial_w := clock_timestamp() - qt_dias_busca_w;
               ds_comando_w := ds_comando_w ||
                               'and h.dt_resultado between :dt_inicial and :dt_final ';

            elsif (qt_consultas_busca_w IS NOT NULL AND qt_consultas_busca_w::text <> '') then
               ds_atendimentos_w := obter_lista_atend_suep(cd_pessoa_fisica_p,
                                                           ie_tipo_atendimento_w,
                                                           qt_consultas_busca_w,
                                                           ie_formato_busca_w,
                                                           nr_atendimento_p);
               ds_comando_w      := ds_comando_w ||
                                    ' and g.nr_atendimento in  (' ||
                                    coalesce(ds_atendimentos_w, 0) || ') ';
            else
               ds_comando_w := ds_comando_w ||
                               'and h.dt_resultado between :dt_inicial and :dt_final ';
            end if;

            ds_comando_w := ds_comando_w || 'GROUP BY e.nr_seq_exame';

            C04 := DBMS_SQL.OPEN_CURSOR;
            DBMS_SQL.PARSE(C04, ds_comando_w, dbms_sql.Native);

            DBMS_SQL.DEFINE_COLUMN(C04, 1, dt_exame_w);
            DBMS_SQL.DEFINE_COLUMN(C04, 2, nr_seq_exame_w);

            if (ie_formato_busca_w = 'A') then
               DBMS_SQL.BIND_VARIABLE(C04,
                                      'NR_ATENDIMENTO',
                                      NR_ATENDIMENTO_P);
            end if;

            if (ie_formato_busca_w = 'P') then
               DBMS_SQL.BIND_VARIABLE(C04,
                                      'CD_PESSOA_FISICA',
                                      CD_PESSOA_FISICA_P);
            end if;

            if (ie_formato_busca_w = 'C') then
               DBMS_SQL.BIND_VARIABLE(C04,
                                      'CD_PESSOA_FISICA',
                                      CD_PESSOA_FISICA_P);
               if (coalesce(qt_consultas_busca_w::text, '') = '') then

                  DBMS_SQL.BIND_VARIABLE(C04,
                                         'NR_SEQ_EPISODIO',
                                         nr_seq_episodio_w);

               end if;
            end if;

            if ((qt_dias_busca_w IS NOT NULL AND qt_dias_busca_w::text <> '') or coalesce(qt_consultas_busca_w::text, '') = '') then
               DBMS_SQL.BIND_VARIABLE(C04, 'DT_INICIAL', dt_inicial_w);
               DBMS_SQL.BIND_VARIABLE(C04, 'DT_FINAL', dt_final_w);
            end if;

            DBMS_SQL.BIND_VARIABLE(C04, 'NR_SEQ_SUEP', NR_SEQ_SUEP_P);

            retorno_w := DBMS_SQL.execute(C04);

            while(DBMS_SQL.FETCH_ROWS(C04) > 0) loop
               begin
                  DBMS_SQL.COLUMN_VALUE(C04, 1, dt_exame_w);
                  DBMS_SQL.COLUMN_VALUE(C04, 2, nr_seq_exame_w);

                  gerar_w_suep_item(obter_desc_exame(nr_seq_exame_w),
                                    nr_seq_item_w,
                                    999,
                                    ie_tipo_item_w,
                                    null,
                                    null,
                                    ie_sub_grupo_suep_w);

                  ds_comando_w := ' select distinct 
                                           a.dt_resultado,
                                           nvl(b.qt_resultado,0),
                                           b.pr_resultado,
                                           b.ds_resultado,
                                           b.nr_seq_resultado
                                      from exame_lab_result_item b,
                                           prescr_procedimento x,
                                           prescr_medica d,
                                           exame_lab_resultado a
                                     where a.nr_seq_resultado = b.nr_seq_resultado
                                       and d.nr_prescricao    = a.nr_prescricao
                                       and d.nr_prescricao    = x.nr_prescricao
                                       and x.nr_sequencia     = b.nr_seq_prescr
                                       and d.dt_suspensao     is null
                                       and b.nr_seq_exame     = :nr_seq_exame
                                       and d.dt_liberacao is not null';

                  if (ie_formato_busca_w = 'A' and
                     coalesce(qt_consultas_busca_w::text, '') = '') then
                     ds_comando_w := ds_comando_w ||
                                     ' and d.nr_atendimento = :nr_atendimento ';
                  elsif ((ie_formato_busca_w = 'C') and
                        coalesce(qt_consultas_busca_w::text, '') = '') then
                     ds_comando_w := ds_comando_w ||
                                     ' and nr_atendimento in  (select nr_atendimento from atendimento_paciente where cd_pessoa_fisica = :cd_pessoa_fisica and nr_seq_episodio = :nr_seq_episodio) ';
                  else
                     ds_comando_w := ds_comando_w ||
                                     ' and d.cd_pessoa_fisica = :cd_pessoa_fisica ';
                  end if;

                  if (qt_dias_busca_w IS NOT NULL AND qt_dias_busca_w::text <> '') then
                     dt_inicial_w := clock_timestamp() - qt_dias_busca_w;
                     ds_comando_w := ds_comando_w ||
                                     'and a.dt_resultado between :dt_inicial and :dt_final ';

                  elsif (qt_consultas_busca_w IS NOT NULL AND qt_consultas_busca_w::text <> '') then
                     ds_atendimentos_w := obter_lista_atend_suep(cd_pessoa_fisica_p,
                                                                 ie_tipo_atendimento_w,
                                                                 qt_consultas_busca_w,
                                                                 ie_formato_busca_w,
                                                                 nr_atendimento_p);
                     ds_comando_w      := ds_comando_w ||
                                          ' and d.nr_atendimento in  (' ||
                                          coalesce(ds_atendimentos_w, 0) || ') ';
                  else
                     ds_comando_w := ds_comando_w ||
                                     'and a.dt_resultado between :dt_inicial and :dt_final ';
                  end if;

                  ds_comando_w := ds_comando_w ||
                                  'and	obter_se_reg_lib_atencao(d.cd_pessoa_fisica ,null, d.ie_nivel_atencao, d.nm_usuario,' ||
                                  nr_item_pront_w || ') = ''S''';

                  ds_comando_w := ds_comando_w ||
                                  'ORDER BY a.dt_resultado, b.nr_seq_resultado';

                  C21 := DBMS_SQL.OPEN_CURSOR;
                  DBMS_SQL.PARSE(C21, ds_comando_w, dbms_sql.Native);

                  DBMS_SQL.DEFINE_COLUMN(C21, 1, dt_referencia_w);
                  DBMS_SQL.DEFINE_COLUMN(C21, 2, vl_informacao_w);
                  DBMS_SQL.DEFINE_COLUMN(C21, 3, pr_informacao_w);
                  DBMS_SQL.DEFINE_COLUMN(C21, 4, ds_resultado_w, 255);

                  DBMS_SQL.BIND_VARIABLE(C21,
                                         'NR_SEQ_EXAME',
                                         nr_seq_exame_w);

                  if (ie_formato_busca_w = 'A') then
                     DBMS_SQL.BIND_VARIABLE(C21,
                                            'NR_ATENDIMENTO',
                                            NR_ATENDIMENTO_P);
                  end if;

                  if (ie_formato_busca_w = 'P') then
                     DBMS_SQL.BIND_VARIABLE(C21,
                                            'CD_PESSOA_FISICA',
                                            CD_PESSOA_FISICA_P);
                  end if;

                  if (ie_formato_busca_w = 'C') then
                     DBMS_SQL.BIND_VARIABLE(C04,
                                            'CD_PESSOA_FISICA',
                                            CD_PESSOA_FISICA_P);
                     if (coalesce(qt_consultas_busca_w::text, '') = '') then

                        DBMS_SQL.BIND_VARIABLE(C04,
                                               'NR_SEQ_EPISODIO',
                                               nr_seq_episodio_w);

                     end if;
                  end if;

                  if ((qt_dias_busca_w IS NOT NULL AND qt_dias_busca_w::text <> '') or
                     coalesce(qt_consultas_busca_w::text, '') = '') then
                     DBMS_SQL.BIND_VARIABLE(C21,
                                            'DT_INICIAL',
                                            dt_inicial_w);
                     DBMS_SQL.BIND_VARIABLE(C21, 'DT_FINAL', dt_final_w);
                  end if;

                  retorno_w := DBMS_SQL.execute(C21);

                  while(DBMS_SQL.FETCH_ROWS(C21) > 0) loop
                     begin
                        DBMS_SQL.COLUMN_VALUE(C21, 1, dt_referencia_w);
                        DBMS_SQL.COLUMN_VALUE(C21, 2, vl_informacao_w);
                        DBMS_SQL.COLUMN_VALUE(C21, 3, pr_informacao_w);
                        DBMS_SQL.COLUMN_VALUE(C21, 4, ds_resultado_w);

                        if (ie_result_exame_w = 'P') then
                           vl_informacao_w := pr_informacao_w;
                        end if;

                        gravar_w_suep_item_data(dt_referencia_w,
                                                vl_informacao_w,
                                                ds_resultado_w);

                     end;
                  end loop;

                  DBMS_SQL.CLOSE_CURSOR(C21);

               end;
            end loop;

            DBMS_SQL.CLOSE_CURSOR(C04);

         end;
      end loop;
      close C03;

   end if;

   delete from w_suep_item a
    where nr_seq_suep = nr_seq_suep_w
	and nm_usuario = nm_usuario_p
      and not exists (SELECT 1
             from w_suep_item_data x
            where x.NR_SEQ_SUEP_ITEM = a.nr_sequencia);

   commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_suep_html (nr_seq_suep_p bigint, nr_atendimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text) FROM PUBLIC;

