-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_liberar_lote_pos_estab ( nr_seq_lote_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Liberar o lote de pós-estabelecido 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ X ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
	OPS - Controle de Coparticipações 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
nr_seq_conta_pos_estab_w	pls_conta_pos_estabelecido.nr_sequencia%type;
nr_seq_conta_co_w		pls_conta_co.nr_sequencia%type;
dt_competencia_mens_w		pls_lote_pos_estabelecido.dt_competencia_mens%type;

C01 CURSOR FOR 
	SELECT	a.nr_seq_conta_pos_estab, 
		null nr_seq_conta_co 
	from	pls_lib_pos_estabelecido a, 
		pls_conta_pos_estabelecido b 
	where	a.nr_seq_conta_pos_estab = b.nr_sequencia 
	and	a.nr_seq_lote		= nr_seq_lote_p 
	and	coalesce(b.ie_cobrar_mensalidade,'P') = 'P' 
	
union all
 
	SELECT	null nr_seq_conta_pos_estab, 
		a.nr_seq_conta_co 
	from	pls_lib_pos_estabelecido a, 
		pls_conta_co b 
	where	a.nr_seq_conta_co	= b.nr_sequencia 
	and	a.nr_seq_lote		= nr_seq_lote_p 
	and	coalesce(b.ie_cobrar_mensalidade,'P') = 'P';


BEGIN 
 
select	max(dt_competencia_mens) 
into STRICT	dt_competencia_mens_w 
from	pls_lote_pos_estabelecido 
where	nr_sequencia	= nr_seq_lote_p;
 
open C01;
loop 
fetch C01 into 
	nr_seq_conta_pos_estab_w, 
	nr_seq_conta_co_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	if (nr_seq_conta_pos_estab_w IS NOT NULL AND nr_seq_conta_pos_estab_w::text <> '') then 
		update	pls_conta_pos_estabelecido 
		set	ie_cobrar_mensalidade	= 'S', 
			dt_competencia_mens	= dt_competencia_mens_w 
		where	nr_sequencia	= nr_seq_conta_pos_estab_w;
	elsif (nr_seq_conta_co_w IS NOT NULL AND nr_seq_conta_co_w::text <> '') then 
		update	pls_conta_co 
		set	ie_cobrar_mensalidade	= 'S', 
			dt_competencia_mens	= dt_competencia_mens_w 
		where	nr_sequencia	= nr_seq_conta_co_w;
	end if;
	end;
end loop;
close C01;
 
CALL pls_gravar_hist_lote_pos_estab(	nr_seq_lote_p, 
				'Liberação do lote', 
				'N', 
				nm_usuario_p, 
				cd_estabelecimento_p);
 
update	pls_lote_pos_estabelecido 
set	dt_liberacao		= clock_timestamp(), 
	nm_usuario_liberacao	= nm_usuario_p, 
	ie_status		= 'D' 
where	nr_sequencia		= nr_seq_lote_p;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_liberar_lote_pos_estab ( nr_seq_lote_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

