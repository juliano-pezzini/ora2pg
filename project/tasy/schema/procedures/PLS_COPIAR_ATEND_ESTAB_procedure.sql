-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_copiar_atend_estab ( cd_estab_origem_p bigint, cd_estab_destino_p bigint, nm_usuario_p text) AS $body$
DECLARE




ie_regra_w			varchar(1);
qt_dia_w			integer;
qt_retorno_w			bigint;
ie_tipo_guia_w			varchar(2);
nr_seq_prestador_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_situacao_w			varchar(1);
ds_motivo_cancelamento_w	varchar(255);
ds_motivo_exclusao_w		varchar(255);
ds_motivo_liberacao_w		varchar(255);
ds_quadro_clinico_w		varchar(255);
ie_tipo_guia_relat_w		integer;
nr_seq_relatorio_w		bigint;
nr_seq_regra_atend_retorno_w	bigint;
nr_seq_guia_motivo_cancel_w	bigint;
nr_seq_motivo_exclusao_w	bigint;
nr_seq_motivo_liberacao_w	bigint;
nr_seq_quadro_clinico_w		bigint;
nr_seq_relat_autorizacao_w	bigint;
qt_registro_w			bigint;
nr_seq_prest_novo_w		bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		ie_regra,
		qt_dia,
		qt_retorno,
		ie_tipo_guia,
		nr_seq_prestador,
		cd_procedimento,
		ie_origem_proced
	from	pls_regra_atend_retorno
	where	cd_estabelecimento = cd_estab_origem_p
	order by nr_sequencia;

C03 CURSOR FOR
	SELECT	nr_sequencia,
		ds_motivo_exclusao,
		ie_situacao
	from	pls_motivo_exclusao
	where	cd_estabelecimento = cd_estab_origem_p
	order by nr_sequencia;

C05 CURSOR FOR
	SELECT	nr_sequencia,
		ds_quadro_clinico
	from	pls_quadro_clinico
	where	cd_estabelecimento = cd_estab_origem_p
	order by nr_sequencia;

C06 CURSOR FOR
	SELECT	nr_sequencia,
		ie_tipo_guia,
		nr_seq_relatorio
	from	pls_relat_autorizacao
	where	cd_estabelecimento = cd_estab_origem_p
	order by nr_sequencia;


BEGIN

open C01;
loop
fetch C01 into
	nr_seq_regra_atend_retorno_w,
	ie_regra_w,
	qt_dia_w,
	qt_retorno_w,
	ie_tipo_guia_w,
	nr_seq_prestador_w,
	cd_procedimento_w,
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	count(*)
	into STRICT	qt_registro_w
	from	pls_regra_atend_retorno
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_regra_atend_retorno_w;

	if (qt_registro_w	= 0) then
		begin
		select	nr_sequencia
		into STRICT	nr_seq_prest_novo_w
		from	pls_prestador
		where	nr_seq_anterior        	= nr_seq_prestador_w
		and	cd_estabelecimento	= cd_estab_destino_p;
		exception
		when others then
			nr_seq_prest_novo_w	:= nr_seq_prestador_w;
		end;

		insert into pls_regra_atend_retorno(nr_sequencia, cd_estabelecimento, ie_regra,
			qt_dia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, qt_retorno,
			ie_tipo_guia, nr_seq_prestador,	cd_procedimento,
			ie_origem_proced, nr_seq_anterior)
		values (nextval('pls_regra_atend_retorno_seq'), cd_estab_destino_p, ie_regra_w,
			qt_dia_w, clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, qt_retorno_w,
			ie_tipo_guia_w, nr_seq_prest_novo_w, cd_procedimento_w,
			ie_origem_proced_w, nr_seq_regra_atend_retorno_w);
	end if;

	end;
end loop;
close C01;

open C03;
loop
fetch C03 into
	nr_seq_motivo_exclusao_w,
	ds_motivo_exclusao_w,
	ie_situacao_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin

	select	count(*)
	into STRICT	qt_registro_w
	from	pls_motivo_exclusao
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_motivo_exclusao_w;

	if (qt_registro_w	= 0) then
		insert into pls_motivo_exclusao(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, ds_motivo_exclusao,
			ie_situacao, cd_estabelecimento, nr_seq_anterior)
		values (nextval('pls_motivo_exclusao_seq'), clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, ds_motivo_exclusao_w,
			ie_situacao_w, cd_estab_destino_p, nr_seq_motivo_exclusao_w);
	end if;

	end;
end loop;
close C03;

open C05;
loop
fetch C05 into
	nr_seq_quadro_clinico_w,
	ds_quadro_clinico_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin

	select	count(*)
	into STRICT	qt_registro_w
	from	pls_quadro_clinico
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_quadro_clinico_w;

	if (qt_registro_w	= 0) then
		insert into pls_quadro_clinico(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, ds_quadro_clinico,
			cd_estabelecimento, nr_seq_anterior)
		values (nextval('pls_quadro_clinico_seq'), clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, ds_quadro_clinico_w,
			cd_estab_destino_p, nr_seq_quadro_clinico_w);
	end if;

	end;
end loop;
close C05;

open C06;
loop
fetch C06 into
	nr_seq_relat_autorizacao_w,
	ie_tipo_guia_relat_w,
	nr_seq_relatorio_w;
EXIT WHEN NOT FOUND; /* apply on C06 */
	begin

	select	count(*)
	into STRICT	qt_registro_w
	from	pls_relat_autorizacao
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_anterior		= nr_seq_relat_autorizacao_w;

	if (qt_registro_w	= 0) then
		insert into pls_relat_autorizacao(nr_sequencia, ie_tipo_guia, nr_seq_relatorio,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec, cd_estabelecimento, nr_seq_anterior)
		values (nextval('pls_relat_autorizacao_seq'), ie_tipo_guia_relat_w, nr_seq_relatorio_w,
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, cd_estab_destino_p, nr_seq_relat_autorizacao_w);
	end if;

	end;
end loop;
close C06;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_copiar_atend_estab ( cd_estab_origem_p bigint, cd_estab_destino_p bigint, nm_usuario_p text) FROM PUBLIC;

