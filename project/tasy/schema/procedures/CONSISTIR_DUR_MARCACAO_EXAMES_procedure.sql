-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_dur_marcacao_exames (hr_marcacao_p timestamp, cd_agenda_p bigint, nm_usuario_p text, nr_min_duracao_p bigint, nr_seq_agenda_p bigint, nr_min_duracao_adic_atual_p bigint, qt_total_proc_adic_atual_p bigint, ds_consistencia_p INOUT text) AS $body$
DECLARE

					
nr_minuto_duracao_w				bigint;					
nr_minuto_duracao_adic_w		bigint;
nr_minuto_duracao_adic_qtd_w	bigint;
nr_minuto_duracao_total_adic_w	bigint;
nr_min_dur_proc_princ_temp_w	bigint;
nr_min_dur_atual_agend_w		bigint;
qt_procedimento_w				double precision;
qt_exames_adic_marc_w			bigint;
qt_total_proc_adic_atual_w		bigint;
qt_min_hor_livre_disp_w			bigint;
dt_agenda_ocup_w				timestamp;
nr_seq_horario_w		agenda_paciente.NR_SEQ_HORARIO%type;
dt_final_w			timestamp;
hr_inicio_w			timestamp;
hr_final_turno_w		timestamp;

/*Exames adicionais*/

C01 CURSOR FOR
	SELECT	coalesce(obter_tempo_duracao_proced(b.cd_agenda, b.cd_medico_exec, coalesce(a.cd_procedimento,0), coalesce(a.ie_origem_proced,0), b.cd_pessoa_fisica, coalesce(a.nr_seq_proc_interno,0), a.ie_lado, b.cd_convenio, b.cd_categoria, b.cd_plano, nr_seq_agenda_p, null), 0),
			coalesce(a.qt_procedimento, 1)
	from	agenda_paciente_proc a,
			agenda_paciente b
	where	a.nr_sequencia	= b.nr_sequencia
	and		b.nr_sequencia 	= nr_seq_agenda_p
	order by coalesce(a.qt_procedimento, 1);
	

BEGIN
--inicio - Inicializacao de variaveis
nr_minuto_duracao_w					:= 0;
nr_minuto_duracao_adic_w			:= 0;
nr_minuto_duracao_adic_qtd_w		:= 0;
nr_minuto_duracao_total_adic_w		:= 0;
qt_exames_adic_marc_w				:= 0;
nr_min_dur_proc_princ_temp_w		:= 0;
nr_min_dur_atual_agend_w			:= 0;
qt_total_proc_adic_atual_w			:= qt_total_proc_adic_atual_p;
--fim - Inicializacao de variaveis
select  coalesce(sum(nr_minuto_duracao), 0)
into STRICT	nr_minuto_duracao_w
from	agenda_paciente
where	cd_agenda			= cd_agenda_p
and		hr_inicio 			between hr_marcacao_p and hr_marcacao_p + (nr_min_duracao_p - 1)/1440
and		((ie_status_agenda 	= 'L') or (nr_sequencia = nr_seq_agenda_p))
and		trunc(hr_inicio) 	= trunc(hr_marcacao_p);

if (nr_minuto_duracao_w < nr_min_duracao_p) then
	ds_consistencia_p	:= wheb_mensagem_pck.get_texto(795416);
else
	ds_consistencia_p	:= '';	
end if;

select	coalesce(count(*), 0)
into STRICT	qt_exames_adic_marc_w
from	agenda_paciente_proc
where	nr_sequencia 	= nr_seq_agenda_p;

if (qt_exames_adic_marc_w >= 1)then --Se existir mais de 1 exame adicional lancado para a respectiva sequencia de agenda
	begin
	open C01;
	loop
	fetch C01 into	
		nr_minuto_duracao_adic_w,
		qt_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin			
		if (qt_procedimento_w > 1)then
			nr_minuto_duracao_adic_qtd_w	:= nr_minuto_duracao_adic_qtd_w + (nr_minuto_duracao_adic_w * qt_procedimento_w);
		else
			nr_minuto_duracao_adic_qtd_w	:= nr_minuto_duracao_adic_qtd_w + nr_minuto_duracao_adic_w;	
		end if;
		
		end;
	end loop;
	close C01;	
	nr_minuto_duracao_total_adic_w		:= nr_minuto_duracao_total_adic_w + nr_minuto_duracao_adic_qtd_w + (nr_min_duracao_adic_atual_p * qt_total_proc_adic_atual_w);
	end;
else --Se existir somente 1 exame adicional lancado, ou se o exame ja lancado sofrer alguma alteracao(proc. interno, quantidade, etc)		
	begin
	
	--Nao deve se multiplicar por 0(zero), para nao zerar a duracao do procedimento atual
	if (qt_total_proc_adic_atual_w = 0)then
		qt_total_proc_adic_atual_w := 1;
	end if;
	
	nr_minuto_duracao_total_adic_w	:= nr_min_duracao_adic_atual_p * qt_total_proc_adic_atual_w;	
	end;
end if;

--Somar as duracoes do exame principal(se existir), com a duracao do novo exame adicional que esta sendo salvo
if (nr_minuto_duracao_total_adic_w > 0) and
	((qt_exames_adic_marc_w > 1) or (nr_min_duracao_adic_atual_p IS NOT NULL AND nr_min_duracao_adic_atual_p::text <> ''))then	
	
	select	CASE WHEN coalesce(nr_min_duracao_p,0)=0 THEN  0  ELSE nr_min_duracao_p END
	into STRICT	nr_min_dur_proc_princ_temp_w
	;
	
	nr_minuto_duracao_total_adic_w	:= nr_minuto_duracao_total_adic_w + nr_min_dur_proc_princ_temp_w;
end if;	

	
if (nr_minuto_duracao_total_adic_w > 0)then	
	--Buscar o primeiro horario que estiver ocupado
	select	min(x.hr_inicio)
	into STRICT	dt_agenda_ocup_w
	from	agenda_paciente x
	where	trunc(x.hr_inicio) 	= trunc(hr_marcacao_p)
	and		x.hr_inicio			> hr_marcacao_p	
	and		ie_status_agenda	not in ('C', 'L', 'B', 'II', 'F', 'I')
	and		cd_agenda			= cd_agenda_p;
	
	--Buscar a duracao em minutos atual do agendamento
	select	coalesce(max(nr_minuto_duracao), 0)
	into STRICT	nr_min_dur_atual_agend_w
	from	agenda_paciente
	where	nr_sequencia = nr_seq_agenda_p;
	
	IF (nr_min_dur_proc_princ_temp_w = 0) THEN
    		nr_minuto_duracao_total_adic_w := nr_minuto_duracao_total_adic_w + nr_min_dur_atual_agend_w;
  	END IF;
	
	--Verificar se existem horarios livres para o lancamento de novos exames, de acordo com a duracao definida no exame adicional
	select  coalesce(count(*),0)
	into STRICT	qt_min_hor_livre_disp_w
	from	agenda_paciente
	where	cd_agenda			= cd_agenda_p	
	and		hr_inicio 			between hr_marcacao_p + (nr_min_dur_atual_agend_w/1440) and coalesce(dt_agenda_ocup_w, hr_marcacao_p + (86399/86400))
	and		ie_status_agenda 	= 'L'
	and		trunc(hr_inicio) 	= trunc(hr_marcacao_p);
	
	/* Nao remover! Para efeito de testes ou debug da rotina
	R a i s e_application_error(-20011,qt_min_hor_livre_disp_w||' - '||nr_min_duracao_adic_atual_p||' - '||to_char(hr_marcacao_p, 'dd/mm/yyyy hh24:mi:ss')||' - '||
	to_char(dt_agenda_ocup_w, 'dd/mm/yyyy hh24:mi:ss')||' - '||nr_min_duracao_p||' - '||nr_min_dur_proc_princ_temp_w||'#@#@');
	*/
	
	select	max(nr_seq_horario),
		max(hr_inicio)
	into STRICT	nr_seq_horario_w,
		hr_inicio_w
	from	agenda_paciente
	where	nr_sequencia = nr_seq_agenda_p;
	
	dt_final_w	:= hr_inicio_w + nr_minuto_duracao_total_adic_w/1440;
	
	select	coalesce(max(to_date(to_char(hr_inicio_w,'dd/mm/yyyy') || ' ' || to_char(hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')),dt_final_w)
	into STRICT	hr_final_turno_w
	from	agenda_horario
	where	nr_sequencia = nr_seq_horario_w;
	
	
	if (qt_min_hor_livre_disp_w = 0) then
		ds_consistencia_p	:= wheb_mensagem_pck.get_Texto(327421);
	else
		ds_consistencia_p	:= '';	
	end if;
	
	if (dt_final_w > hr_final_turno_w)then
		ds_consistencia_p	:= wheb_mensagem_pck.get_Texto(327421);
	end if;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_dur_marcacao_exames (hr_marcacao_p timestamp, cd_agenda_p bigint, nm_usuario_p text, nr_min_duracao_p bigint, nr_seq_agenda_p bigint, nr_min_duracao_adic_atual_p bigint, qt_total_proc_adic_atual_p bigint, ds_consistencia_p INOUT text) FROM PUBLIC;

