-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE inconsistencias_sib AS (nr_seq_lote_inco_sib bigint);


CREATE OR REPLACE PROCEDURE pls_atualiza_info_lote_sib ( nr_seq_lote_sib_p bigint, nm_usuario_p text) AS $body$
DECLARE


qt_tipo1_w			bigint;
qt_tipo2_w			bigint;
qt_tipo6_w			bigint;
qt_tipo7_w			bigint;
qt_tipo8_w			bigint;
qt_registros_inconsistentes_w	bigint;
qt_benef_inco_w			bigint;
ie_inconsistencia_w		varchar(10);

c01 CURSOR FOR
	SELECT	coalesce(ie_inconsistencia,'N') ie_inconsistencia
	from	pls_interf_sib
	where	nr_seq_lote_sib = nr_seq_lote_sib_p
	and	ie_tipo_reg in (1,2,7,8);

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w			vetor;
type vetor1 is table of inconsistencias_sib index by integer;
vetor_w				vetor1;

BEGIN

/* Re-ordenar os segurados */

CALL sib_ordenar_segurados_envio(nr_seq_lote_sib_p,nm_usuario_p);

select	sum(qt_tipo_1), /* Inclusão */
	sum(qt_tipo_2), /* Alteração */
	sum(qt_tipo_6), /* Indicação de inexistência de beneficiário ou de alteração cadastral */
	sum(qt_tipo_7), /* Exclusão */
	sum(qt_tipo_8)  /* Reinclusão */
into STRICT	qt_tipo1_w,
	qt_tipo2_w,
	qt_tipo6_w,
	qt_tipo7_w,
	qt_tipo8_w
from (SELECT	CASE WHEN ie_tipo_reg=1 THEN 1  ELSE 0 END  qt_tipo_1,
		CASE WHEN ie_tipo_reg=2 THEN 1  ELSE 0 END  qt_tipo_2,
		CASE WHEN ie_tipo_reg=6 THEN 1  ELSE 0 END  qt_tipo_6,
		CASE WHEN ie_tipo_reg=7 THEN 1  ELSE 0 END  qt_tipo_7,
		CASE WHEN ie_tipo_reg=8 THEN 1  ELSE 0 END  qt_tipo_8
	from	pls_interf_sib
	where	nr_seq_lote_sib = nr_seq_lote_sib_p) alias5;

open c01;
loop
fetch c01 bulk collect into s_array limit 1000;
	vetor_c01_w(i) := s_array;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

qt_registros_inconsistentes_w	:= 0;

for i in 1..vetor_c01_w.count loop
	s_array := vetor_c01_w(i);
	for z in 1..s_array.count loop
		begin

		ie_inconsistencia_w	:= s_array[z].ie_inconsistencia;

		if (ie_inconsistencia_w = 'S') then
			qt_registros_inconsistentes_w	:= qt_registros_inconsistentes_w + 1;
		end if;

		end;
	end loop;
end loop;

/*Atualizar o trailler do lote*/

update	pls_interf_sib
set	qt_tipo1			= qt_tipo1_w,
	qt_tipo2			= qt_tipo2_w,
	qt_tipo6			= qt_tipo6_w,
	qt_tipo7			= qt_tipo7_w,
	qt_tipo8			= qt_tipo8_w,
	qt_registros_incosistentes	= qt_registros_inconsistentes_w
where	nr_seq_lote_sib			= nr_seq_lote_sib_p
and	ie_tipo_reg			= 9;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualiza_info_lote_sib ( nr_seq_lote_sib_p bigint, nm_usuario_p text) FROM PUBLIC;

