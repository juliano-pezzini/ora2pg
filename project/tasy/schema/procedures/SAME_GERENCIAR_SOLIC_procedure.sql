-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE same_gerenciar_solic ( nr_seq_solic_p bigint, nr_seq_lote_p bigint, nm_usuario_p text, ie_operacao_p text, nr_seq_motivo_cancel_p bigint, ds_observacao_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

				
nr_seq_solic_w				bigint;
cd_pessoa_solicitante_w			varchar(10);
cd_setor_solicitante_w			bigint;
nr_seq_prontuario_w			bigint;
ie_status_w				varchar(5);
ds_local_pront_w			varchar(100);
nr_atendimento_w			bigint;
ds_tipo_w				varchar(40);
dt_devolucao_w				timestamp;
dt_recebimento_w			timestamp;
cd_pessoa_fisica_w			varchar(10);

ie_atual_setor_atend_pront_w		varchar(1);
ie_atualizar_data_devol_w		varchar(1);
qt_dias_devolucao_w			bigint;
qt_itens_pendentes_w			bigint;
ie_lote_entregue_w			varchar(1);
ds_mensagem_w				varchar(350);
ds_enter_w				varchar(10) := chr(13) || chr(10);
		
c01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_pessoa_solicitante,
		cd_setor_solicitante,
		cd_pessoa_fisica
	from	same_solic_pront
	where	coalesce(nr_seq_lote, 0)	= coalesce(coalesce(nr_seq_lote_p, nr_seq_lote), 0)
	and	nr_sequencia		= coalesce(nr_seq_solic_p, nr_sequencia);
	
c02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_atendimento,
		a.ie_status,
		substr(obter_local_prontuario(a.nr_sequencia),1,100),
		substr(obter_valor_dominio(1219, a.ie_tipo),1,40),
		b.dt_devolucao,
		b.dt_recebimento
	from	same_solic_pront_envelope b,
		same_prontuario a
	where	b.nr_seq_solic		= nr_seq_solic_w
	and	a.nr_sequencia		= b.nr_seq_prontuario;
	
c03 CURSOR FOR
	SELECT	a.nr_sequencia
	from	same_prontuario a
	where	((a.nr_atendimento = nr_atendimento_w) or ((coalesce(nr_atendimento_w::text, '') = '') and (cd_pessoa_fisica = cd_pessoa_fisica_w)))
	and	((ie_atual_setor_atend_pront_w = 'S') or (
		(ie_atual_setor_atend_pront_w = 'V') and
		exists (SELECT 1 
			from	same_solic_pront_envelope b 
			where	a.nr_sequencia	= b.nr_seq_prontuario
			and	b.nr_seq_solic	= nr_seq_solic_p)));

BEGIN

qt_dias_devolucao_w 		:= coalesce(Obter_Valor_Param_Usuario(941, 42, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p),0);
ie_atual_setor_atend_pront_w 	:= coalesce(Obter_Valor_Param_Usuario(941, 112, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p),'N');
ie_atualizar_data_devol_w 	:= coalesce(Obter_Valor_Param_Usuario(941, 173, Obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p),'N');

open c01;
loop
fetch c01 into	
	nr_seq_solic_w,
	cd_pessoa_solicitante_w,
	cd_setor_solicitante_w,
	cd_pessoa_Fisica_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	
	if (ie_operacao_p = 'C') then /* Cancelar Solitação */
	
		update	same_solic_pront
		set	ie_status	= 'C',
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			nr_seq_motivo_cancel = nr_seq_motivo_cancel_p,
			ds_obs_cancel	= ds_observacao_p,
			nm_usuario_cancelamento = nm_usuario_p
		where	nr_sequencia	= nr_seq_solic_w
		and	ie_status	= 'P';	
		
		select	count(*)
		into STRICT	qt_itens_pendentes_w
		from	same_solic_pront
		where	nr_seq_lote = nr_seq_lote_p
		and		ie_status	<> 'C';
		
		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_lote_entregue_w
		from	same_solic_pront a
		where	a.nr_seq_lote = nr_seq_lote_p
		and	a.ie_status = 'E'
		and not exists (	SELECT	1
				from	same_solic_pront b
				where	b.nr_seq_lote = nr_seq_lote_p
				and	b.ie_status not in ('C','E'));
		
		if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
			if (qt_itens_pendentes_w = 0) then
				
				update	same_solic_pront_lote
				set	ie_status	= 'C',
					dt_atualizacao	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia	= nr_seq_lote_p
				and	ie_status	= 'P';
				
			elsif (ie_lote_entregue_w = 'S') then
				
				update 	same_solic_pront_lote
				set 	ie_status	= 'E',
					dt_entrega	= clock_timestamp(),
					dt_atualizacao	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia 	= nr_seq_lote_p
				and	ie_status	= 'P';
				
			end if;
		end if;
		
	elsif (ie_operacao_p = 'A') then /* Atender Solicitação */
		update	same_solic_pront
		set	ie_status	= 'E',
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			dt_entrega	= clock_timestamp(),
			nr_seq_motivo_cancel = nr_seq_motivo_cancel_p,
			ds_obs_cancel	= ds_observacao_p,
			dt_devolucao_prevista = CASE WHEN ie_atualizar_data_devol_w='S' THEN clock_timestamp() + qt_dias_devolucao_w  ELSE dt_devolucao_prevista END
		where	nr_sequencia	= nr_seq_solic_w;
		
		if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
			update	same_solic_pront_lote
			set	ie_status	= 'E',
				dt_entrega	= clock_timestamp(),
				dt_atualizacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_sequencia	= nr_seq_lote_p;
		end if;		

		open c02;
		loop
		fetch c02 into	
			nr_seq_prontuario_w,
			nr_atendimento_w,
			ie_status_w,
			ds_local_pront_w,
			ds_tipo_w,
			dt_devolucao_w,
			dt_recebimento_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
									
			if (ie_status_w = '1') and (coalesce(dt_devolucao_w::text, '') = '') and (coalesce(dt_recebimento_w::text, '') = '') then
				update	same_prontuario
				set	ie_status	= '8',
					dt_atualizacao	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia	= nr_seq_prontuario_w;				
				CALL Same_Gerar_Historico(nr_seq_prontuario_w, 11, cd_pessoa_solicitante_w, cd_setor_solicitante_w, nm_usuario_p);
			elsif (coalesce(dt_devolucao_w::text, '') = '') and (coalesce(dt_recebimento_w::text, '') = '') then
				rollback;
				
				ds_mensagem_w := null;
			
				if (nr_seq_prontuario_w IS NOT NULL AND nr_seq_prontuario_w::text <> '') then
					--Prontuário #@NR_SEQ_PRONTUARIO#@ solicitado não encontra-se no SAME.
					ds_mensagem_w := wheb_mensagem_pck.get_Texto(459150,'NR_SEQ_PRONTUARIO='||to_char(nr_seq_prontuario_w));
						
					if (ds_local_pront_w IS NOT NULL AND ds_local_pront_w::text <> '') then
						--Local atual no hospital: #@DS_LOCAL_PRONT#@.
						ds_mensagem_w := ds_mensagem_w||ds_enter_w||wheb_mensagem_pck.get_Texto(459152,'DS_LOCAL_PRONT='||ds_local_pront_w);
					end if;
					
				else
					--Prontuário não encontrado. Verifique o número do prontuário informado e tente novamente.
					ds_mensagem_w := wheb_mensagem_pck.get_Texto(69134,null);
				end if;
				
				CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(ds_mensagem_w);
								
			end if;			
			end;
		end loop;
		close c02;
		
		open c03;
		loop
		fetch c03 into nr_seq_prontuario_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			
			update	same_prontuario
			set	cd_setor_atendimento = cd_setor_solicitante_w
			where	nr_sequencia = nr_seq_prontuario_w;	
			end;
		end loop;
		close c03;
		
	elsif (ie_operacao_p = 'D') then /* Desfazer atendimento solicitação */
		
		update	same_solic_pront
		set	ie_status	= 'P',
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			dt_entrega	 = NULL,
			nr_seq_motivo_cancel = nr_seq_motivo_cancel_p,
			ds_obs_cancel	= ds_observacao_p
		where	nr_sequencia	= nr_seq_solic_w;

		if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
			update	same_solic_pront_lote
			set	ie_status	= 'P',
				dt_entrega	 = NULL,
				dt_atualizacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_sequencia	= nr_seq_lote_p;
		end if;

		open c02;
		loop
		fetch c02 into	
			nr_seq_prontuario_w,
			nr_atendimento_w,
			ie_status_w,
			ds_local_pront_w,
			ds_tipo_w,
			dt_devolucao_w,
			dt_recebimento_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			if (ie_status_w = '8') and (coalesce(dt_devolucao_w::text, '') = '') and (coalesce(dt_recebimento_w::text, '') = '') then
				update	same_prontuario
				set	ie_status	= '1',
					dt_atualizacao	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_sequencia	= nr_seq_prontuario_w;				
				CALL Same_Gerar_Historico(nr_seq_prontuario_w, 18, cd_pessoa_solicitante_w, cd_setor_solicitante_w, nm_usuario_p);
			end if;
			end;
		end loop;
		close c02;
		
	end if;
	
	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE same_gerenciar_solic ( nr_seq_solic_p bigint, nr_seq_lote_p bigint, nm_usuario_p text, ie_operacao_p text, nr_seq_motivo_cancel_p bigint, ds_observacao_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

