-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_proc_conta ( nr_seq_proc_conta_p pls_processo_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text, ie_impug_nova_p text) AS $body$
DECLARE


vl_pendente_w			pls_processo_conta.vl_pendente%type;
vl_ressarcir_w			pls_processo_conta.vl_ressarcir%type;
vl_deferido_w			pls_processo_conta.vl_deferido%type;
ie_status_conta_w		pls_processo_conta.ie_status_conta%type;
ie_tipo_impugnacao_w		pls_processo_conta.ie_tipo_impugnacao%type;
vl_conta_w			double precision;
vl_ressarcir_proc_w		pls_processo_procedimento.vl_procedimento%type;
cont_w				bigint;
qt_defesas_deferidas_w		integer;
qt_defesas_indeferidas_w	integer;
qt_recursos_abertos_w		integer;
qt_impugnacoes_w		integer;
vl_pedidos_w			pls_proc_conta_pedido.vl_pedido%type;
qt_defesas_validas_w		integer;

-- NOVA IMPUGNAÇÃO
ie_tipo_peticao_w		pls_formulario.ie_tipo_peticao%type;
ie_status_impugnacao_w		pls_formulario.ie_status_impugnacao%type;
vl_pedido_nova_w		pls_formulario.vl_pedido%type;
vl_deferido_nova_w		pls_formulario.vl_deferido%type;
vl_ressarcir_nova_w		pls_formulario.vl_ressarcir%type;


BEGIN

select	ie_status_conta,
	coalesce(ie_tipo_impugnacao, 'C'),
	pls_conta_processo_obter_valor(nr_sequencia)
into STRICT	ie_status_conta_w,
	ie_tipo_impugnacao_w,
	vl_conta_w
from	pls_processo_conta
where	nr_sequencia	= nr_seq_proc_conta_p;

if (ie_status_conta_w = 'L') then	-- Acatada
	update	pls_processo_conta
	set	vl_pendente	= 0,
		vl_ressarcir	= vl_conta_w,
		vl_deferido	= 0
	where	nr_sequencia	= nr_seq_proc_conta_p;

elsif (ie_impug_nova_p = 'N') then
	if (ie_tipo_impugnacao_w = 'C') then

		-- verifica quantas defesas validas e deferidas a conta tem, e quantos recursos em aberto
		select	sum(case when a.ie_status = 'D' then 1 else 0 end), -- qt deferidas
			sum(case when a.ie_status = 'I' then 1 else 0 end), -- qt indeferidas
			sum(case when ((a.ie_tipo_defesa = 'R') and (a.ie_status not in ('D', 'I'))) then 1 else 0 end) -- qt recurso aberto
		into STRICT	qt_defesas_deferidas_w,
			qt_defesas_indeferidas_w,
			qt_recursos_abertos_w
		from	pls_impugnacao_defesa	a,
			pls_impugnacao		b
		where	a.nr_seq_impugnacao	= b.nr_sequencia
		and	b.nr_seq_conta		= nr_seq_proc_conta_p
		and	coalesce(a.dt_cancelamento::text, '') = '';

		-- totaliza os pedidos da conta
		select	sum(coalesce(vl_pedido,0))
		into STRICT	vl_pedidos_w
		from	pls_proc_conta_pedido	a
		where	a.nr_seq_proc_conta	= nr_seq_proc_conta_p;

		-- conta quantas impugnacoes a conta possui
		select	count(1)
		into STRICT	qt_impugnacoes_w
		from	pls_impugnacao
		where	nr_seq_conta	= nr_seq_proc_conta_p;

		-- Soma quantas defesas válidas a conta possui
		select	count(1)
		into STRICT	qt_defesas_validas_w
		from	pls_impugnacao_defesa	a,
			pls_impugnacao		b
		where	a.nr_seq_impugnacao	= b.nr_sequencia
		and	b.nr_seq_conta		= nr_seq_proc_conta_p
		and	coalesce(a.dt_cancelamento::text, '') = '';

		--Quando o tipo de impugnação da conta for "conta":
		--	se NÃO possuir nenhuma defesa válida
		--		o valor deferido é zerado
		--		o valor a ressarcir é o total da conta
		--		o valor pendente fica zerado
		if (qt_defesas_validas_w = 0) then
			vl_deferido_w	:= 0;
			vl_ressarcir_w	:= vl_conta_w;
			vl_pendente_w	:= 0;
		--	se possui alguma defesa valida deferida e não possui nenhum recurso pendente
		-- 		o valor deferido recebe a soma dos pedidos da conta
		--		o valor a ressarcir é a subtração entre o valor da conta e valor dos pedidos
		--		o valor pendente fica zerado
		elsif (qt_defesas_deferidas_w > 0) and (qt_recursos_abertos_w = 0)then
			vl_deferido_w	:= vl_pedidos_w;
			vl_ressarcir_w	:= vl_conta_w - vl_pedidos_w;
			vl_pendente_w	:= 0;
		--	se NÃO possui alguma defesa valida deferida, mas possui defesa valida indeferida, e não possui nenhum recurso pendente
		--		o valor deferido é zerado
		--		o valor a ressarcir é o valor total da conta
		--		o valor pendente é zerado
		elsif	(qt_defesas_deferidas_w = 0 AND qt_defesas_indeferidas_w > 0) and (qt_recursos_abertos_w = 0) then
			vl_deferido_w	:= 0;
			vl_ressarcir_w	:= vl_conta_w;
			vl_pendente_w	:= 0;
		--	se POSSUI algum recurso pendente na defesa e alguma impugnacao, ou então não possui nenhuma defesa válida deferida/indeferida
		--		o valor deferido é zerado
		--		o valor a ressarcir é zerado
		--		o valor pendente é a soma dos pedidos
		elsif	(qt_recursos_abertos_w > 0  AND qt_impugnacoes_w > 0) or
		        ((qt_defesas_indeferidas_w = 0) and (qt_defesas_deferidas_w = 0) and (qt_impugnacoes_w > 0))then
			vl_deferido_w	:= 0;
			vl_ressarcir_w	:= 0;
			vl_pendente_w	:= vl_pedidos_w;
		--	se não possuir nenhuma impugnação, defesa, recurso e pedido
		--		o valor deferido é zerado
		--		o valor a ressarcir é zerado
		--		o valor pendente é zerado
		elsif	((qt_defesas_deferidas_w = 0) and (qt_defesas_indeferidas_w = 0) and (qt_recursos_abertos_w = 0) and (vl_pedidos_w = 0) and (qt_impugnacoes_w = 0)) then
			vl_deferido_w	:= 0;
			vl_ressarcir_w	:= 0;
			vl_pendente_w	:= 0;
		end if;

		--corrigo os valores deferido e ressarcir, pois com as alteração precisam ser os valores da ultima impugnação ou recurso )
		select	max(vl_ressarcir),
			max(vl_deferido)
		into STRICT	vl_ressarcir_w,
			vl_deferido_w
		from	pls_impugnacao
		where	nr_sequencia	= 	(	SELECT	max(nr_sequencia)
							from	pls_impugnacao
							where	nr_seq_conta	= nr_seq_proc_conta_p);
	else
		select	coalesce(sum(coalesce(vl_deferido,0)),0),
			coalesce(sum(coalesce(vl_ressarcir,0)),0)
		into STRICT	vl_deferido_w,
			vl_ressarcir_w
		from	pls_impugnacao
		where	nr_seq_conta	= nr_seq_proc_conta_p;

		select	coalesce(sum(coalesce(a.vl_procedimento,0)),0)
		into STRICT	vl_ressarcir_proc_w
		from	pls_processo_procedimento a
		where	a.nr_seq_conta	= nr_seq_proc_conta_p
		and	not exists (SELECT 1 from pls_impugnacao_proc x where x.nr_seq_processo_proc = a.nr_sequencia);

		vl_ressarcir_w	:= vl_ressarcir_w + vl_ressarcir_proc_w;
		vl_pendente_w := vl_conta_w - vl_ressarcir_w - vl_deferido_w;
	end if;

	update	pls_processo_conta
	set	vl_pendente	= vl_pendente_w,
		vl_ressarcir	= vl_ressarcir_w,
		vl_deferido	= vl_deferido_w
	where	nr_sequencia	= nr_seq_proc_conta_p;

elsif (ie_impug_nova_p = 'S') then
	select	max(ie_status_impugnacao),
		max(ie_tipo_peticao),
		max(vl_pedido),
		max(vl_deferido),
		max(vl_ressarcir)
	into STRICT	ie_status_impugnacao_w,
		ie_tipo_peticao_w,
		vl_pedido_nova_w,
		vl_deferido_nova_w,
		vl_ressarcir_nova_w
	from	pls_formulario
	where	nr_sequencia	= 	(SELECT	max(nr_sequencia)
					from	pls_formulario
					where	nr_seq_conta	= nr_seq_proc_conta_p);

	if (vl_ressarcir_nova_w > 0 AND vl_deferido_nova_w > 0) then
		update	pls_formulario
		set		ie_status_impugnacao	= 'P'
		where	nr_sequencia		= (SELECT	max(nr_sequencia)
										from	pls_formulario
										where	nr_seq_conta	= nr_seq_proc_conta_p);

		ie_status_impugnacao_w := 'P';
	end if;

	-- Finalizado com pagamento - Finalizado sem pagamento
	if (ie_status_impugnacao_w in ('F','S','P')) then
		vl_pendente_w	:= 0;
		vl_ressarcir_w	:= vl_ressarcir_nova_w;
		vl_deferido_w	:= vl_deferido_nova_w;
	end if;

	update	pls_processo_conta
	set	vl_pendente	= vl_pendente_w,
		vl_ressarcir	= vl_ressarcir_w,
		vl_deferido	= vl_deferido_w
	where	nr_sequencia	= nr_seq_proc_conta_p;

end if;


if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_proc_conta ( nr_seq_proc_conta_p pls_processo_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text, ie_impug_nova_p text) FROM PUBLIC;

