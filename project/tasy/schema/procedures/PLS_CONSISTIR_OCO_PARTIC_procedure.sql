-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_oco_partic ( ie_medico_cooperado_p text, cd_medico_regra_p text, nr_seq_grau_partic_p bigint, nr_seq_conselho_p bigint, nr_seq_proc_espec_p bigint,		--Proc X Especialidade
 nr_seq_proc_partic_p bigint,		--Procedimento X Grau partic
 ie_consiste_exec_coop_p text, ie_partic_diferente_p text, ie_med_exec_inativo_p text, nr_seq_ocorrencia_p bigint, nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, dt_referencia_p timestamp, ie_tipo_item_p text, cd_espec_medica_p bigint, ie_gerar_ocorrencia_p INOUT text, cd_estabelecimento_p bigint, vl_max_item_p bigint, vl_min_item_p bigint, nm_usuario_p text, ie_complemento_conta_p text, ie_exige_medico_p text, ie_tipo_pessoa_prestador_p text, ie_prestador_inativo_p text, ie_tipo_prestador_p text, cd_prestador_regra_p text, ie_goto_final_ocor_p INOUT text) AS $body$
DECLARE


cd_pessoa_fisica_consist_w	varchar(15);
cd_cgc_consist_w		varchar(14);
cd_medico_executor_w		varchar(10);
ie_prest_medico_w		varchar(2);
ie_oco_grau_partic_w		varchar(2);
ie_situacao_prest_w		varchar(2);
ie_med_partic_w			varchar(1);
ie_situacao_med_w		varchar(1);
ie_existe_medico_w		varchar(1);
cd_prestador_partic_w		varchar(30);
ie_exige_medico_w		varchar(1);
vl_apresentado_w		double precision;
nr_seq_grau_partic_w		bigint;
nr_seq_conselho_w		bigint;
nr_seq_conta_proc_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_participante_w		bigint;
qt_espec_med_w			bigint;
nr_seq_prestador_partic_w	bigint;

C01 CURSOR FOR
	SELECT	'P',
		a.cd_medico,
		a.nr_seq_grau_partic,
		b.nr_sequencia,
		b.cd_procedimento,
		b.ie_origem_proced,
		a.nr_sequencia,
		coalesce(a.vl_digitado_complemento,a.vl_apresentado),
		a.nr_seq_prestador
	from	pls_proc_participante a,
		pls_conta_proc b
	where	a.nr_seq_conta_proc 	= b.nr_sequencia
	and	((b.nr_seq_conta	= nr_seq_conta_p and ie_tipo_item_p = '8') or (b.nr_sequencia = nr_seq_conta_proc_p and ie_tipo_item_p = '3'))
	and	coalesce(a.ie_status,'U') <> 'C'
	
union

	SELECT	'E',
		a.cd_medico_executor,
		a.nr_seq_grau_partic,
		b.nr_sequencia,
		b.cd_procedimento,
		b.ie_origem_proced,
		null,
		null,
		a.nr_seq_prestador_exec
	from	pls_conta a,
		pls_conta_proc b
	where	a.nr_sequencia 		= b.nr_seq_conta
	and	((a.nr_sequencia	= nr_seq_conta_p and ie_tipo_item_p = '8') or (b.nr_sequencia = nr_seq_conta_proc_p and ie_tipo_item_p = '3'))
	and	not exists (	select	1
				from	pls_proc_participante x
				where	b.nr_sequencia = x.nr_seq_conta_proc);
	--and	nvl(a.cd_medico_executor,0) > 0;
BEGIN
ie_gerar_ocorrencia_p := 'N';

open C01;
loop
fetch C01 into
	ie_med_partic_w,
	cd_medico_executor_w,
	nr_seq_grau_partic_w,
	nr_seq_conta_proc_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_participante_w,
	vl_apresentado_w,
	nr_seq_prestador_partic_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (nr_seq_prestador_partic_w IS NOT NULL AND nr_seq_prestador_partic_w::text <> '') then
		begin
		select	cd_cgc,
			cd_pessoa_fisica
		into STRICT	cd_cgc_consist_w,
			cd_pessoa_fisica_consist_w
		from	pls_prestador
		where	nr_sequencia	= nr_seq_prestador_partic_w;
		exception
		when others then
			cd_cgc_consist_w		:= '0';
			cd_pessoa_fisica_consist_w	:= '0';
		end;
	else
		cd_cgc_consist_w		:= '0';
		cd_pessoa_fisica_consist_w	:= '0';
	end if;

	ie_goto_final_ocor_p	:= 'S';

	if (coalesce(ie_medico_cooperado_p, 'A') <> 'A') then
		if (coalesce(ie_medico_cooperado_p, 'A') = 'C') then
			/*Se a regra é de médico cooperado e o mesmo não é a regra não é válida*/

			if (pls_obter_se_cooperado_ativo(cd_medico_executor_w,dt_referencia_p, null) = 'N') then
				goto final;
			end if;
		elsif (coalesce(ie_medico_cooperado_p, 'A') = 'N') then
			/*Se a regra é de médico não cooperado e o mesmo é a regra não é válida*/

			if (pls_obter_se_cooperado_ativo(cd_medico_executor_w,dt_referencia_p, null) = 'S') then
				goto final;
			end if;
		end if;
	end if;

	/*Se for regra de participante especifico*/

	if (coalesce(cd_medico_regra_p,0) > 0) then
		if (cd_medico_regra_p <> cd_medico_executor_w) then
			goto final;
		end if;
	end if;

	/*Se for regra de grau de participação*/

	if (coalesce(nr_seq_grau_partic_p,0) > 0)  then
		if ( nr_seq_grau_partic_p <> nr_seq_grau_partic_w ) or (coalesce(nr_seq_grau_partic_w,0) =0) then
			goto final; --nao gera ocorrencia
		end if;
	end if;

	/*Se for regra de grau de participação*/

	if (coalesce(nr_seq_conselho_p,0) > 0) then
		begin
		select	nr_seq_conselho
		into STRICT	nr_seq_conselho_w
		from	pessoa_fisica
		where	cd_pessoa_fisica	= cd_medico_executor_w;
		exception
		when others then
			nr_seq_conselho_w	:= null;
		end;

		if (nr_seq_conselho_p <> coalesce(nr_seq_conselho_w,0)) then
			goto final;
		end if;
	end if;

	/*Prestador inativo*/

	if (coalesce(ie_prestador_inativo_p,'N') = 'S') then
		if (coalesce(nr_seq_prestador_partic_w,0) > 0) and (coalesce(ie_tipo_prestador_p,'N') = 'E') then
			select	coalesce(max('S'),'N')
			into STRICT	ie_situacao_prest_w
			from	pls_prestador
			where	nr_sequencia			= nr_seq_prestador_partic_w
			and	ie_situacao 			= 'A'
			and	coalesce(dt_referencia_p,clock_timestamp()) >= dt_cadastro
			and	coalesce(dt_referencia_p,clock_timestamp()) < coalesce(dt_exclusao,coalesce(dt_referencia_p+1,clock_timestamp()));

			if (ie_situacao_prest_w = 'S') then
				goto final;
			end if;
		else
			ie_gerar_ocorrencia_p	:= 'I';

			goto final;
		end if;
	end if;

	if (coalesce(ie_med_exec_inativo_p,'N') = 'S') then

		/*Obter se o médico inativo*/

		begin
		select	ie_situacao
		into STRICT	ie_situacao_med_w
		from	medico
		where	cd_pessoa_fisica = cd_medico_executor_w;
		exception
		when others then
			ie_situacao_med_w := 'A';
		end;

		/*Se estiver ativo a regra não é válida*/

		if (ie_situacao_med_w = 'A') then
			goto final;
		end if;

	end if;

	if (coalesce(nr_seq_proc_espec_p,0) > 0) then
		/*Se for caso de procedimento X especialidade e for medico executor é testado todos os procedimentos;
		    Se um deles der negado já gera a ocorrência*/
		if (pls_obter_se_espec_solic_oc(nr_seq_conta_proc_w, nr_seq_proc_espec_p, cd_medico_executor_w) = 'S') then
			goto final;
		end if;
	end if;

	--Procedimento X Grau partic
	if (coalesce(nr_seq_proc_partic_p,0) > 0) then
		ie_oco_grau_partic_w	:= pls_obter_proc_grau_oc_partic(	nr_seq_proc_partic_p,
										nr_seq_grau_partic_w,
										cd_procedimento_w,
										ie_origem_proced_w,
										nr_seq_conta_p,
										nr_seq_conta_proc_w);

		if ( ie_oco_grau_partic_w = 'N') or (coalesce(cd_procedimento_w,0) = 0 )	then
			goto final;
		end if;
	end if;

	/*Verificar pessoa do prestador */

	if (coalesce(ie_tipo_pessoa_prestador_p,'A') <> 'A') then
		if (ie_tipo_pessoa_prestador_p = 'PF') then
			if (coalesce(cd_pessoa_fisica_consist_w,'0') = '0') then
				goto final;
			end if;
		elsif (ie_tipo_pessoa_prestador_p = 'PJ') then
			if (coalesce(cd_cgc_consist_w,'0') = '0') then
				goto final;
			end if;
		end if;

	end if;


	/*Verificar se existe o mesmo participante em grau de participação diferente no procedimento*/

	if (coalesce(ie_partic_diferente_p,'N') = 'S') then
		if (pls_obter_medico_partic_dif_oc(	nr_seq_conta_proc_w,
								cd_medico_executor_w,
								nr_seq_grau_partic_w,
								cd_estabelecimento_p,
								nm_usuario_p) = 'N') then
			goto final;
		end if;

	end if;

	/*Verificar valor do participante*/

	if	((coalesce(vl_max_item_p,-999) <> -999) or (coalesce(vl_min_item_p,-999) <> -999)) then
		if (ie_tipo_item_p = 3) then
			if (coalesce(vl_apresentado_w,0) > vl_min_item_p ) and (vl_min_item_p IS NOT NULL AND vl_min_item_p::text <> '') then
				ie_goto_final_ocor_p	:= 'N';
				goto final;
			end if;

			if (coalesce(vl_apresentado_w,0) < vl_max_item_p) and (vl_max_item_p IS NOT NULL AND vl_max_item_p::text <> '') then
				ie_goto_final_ocor_p	:= 'N';
				goto final;
			end if;
		end if;
	end if;

	/*Consistência para o código do prestador executor do item*/

	if (coalesce(cd_prestador_regra_p,'X') <> 'X')	then
		if (coalesce(ie_tipo_prestador_p,'N') = 'E')	then
			cd_prestador_partic_w	:= substr(pls_obter_cod_prestador(nr_seq_prestador_partic_w, null),1,30);

			if (cd_prestador_regra_p <> cd_prestador_partic_w)	or (coalesce(cd_prestador_partic_w::text, '') = '')	then
				goto final;
			end if;

		else
			goto final;
		end if;

	end if;

	/*Se o médico possui a especiidade passada por parâmetro*/

	if (coalesce(cd_espec_medica_p,0) > 0) then
		select	count(cd_especialidade)
		into STRICT	qt_espec_med_w
		from	medico_especialidade
		where	cd_pessoa_fisica	= cd_medico_executor_w
		and	cd_especialidade	= cd_espec_medica_p  LIMIT 1;

		/*Gera ocorrência somente caso o médico possua a especialidade*/

		if (qt_espec_med_w = 0) then
			goto final;
		end if;
	end if;

	if (coalesce(ie_consiste_exec_coop_p,'N') = 'S') then
		ie_prest_medico_w	:= pls_obter_se_medico_prest(	nr_seq_conta_p,
									nr_seq_conta_proc_p,
									dt_referencia_p);

		if (ie_prest_medico_w = 'S') then
			ie_gerar_ocorrencia_p	:= 'I';
			goto final;
		end if;
	end if;

	ie_gerar_ocorrencia_p	:= 'S';

	if (ie_med_partic_w = 'P') then
		ie_gerar_ocorrencia_p	:= 'P';

		insert into w_pls_ocorrencia_partic(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_participante,
			nr_seq_ocorrencia)
		values (nextval('w_pls_ocorrencia_partic_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_participante_w,
			nr_seq_ocorrencia_p);
	end if;

	<<final>>
	null;

	end;
end loop;
close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_oco_partic ( ie_medico_cooperado_p text, cd_medico_regra_p text, nr_seq_grau_partic_p bigint, nr_seq_conselho_p bigint, nr_seq_proc_espec_p bigint, nr_seq_proc_partic_p bigint, ie_consiste_exec_coop_p text, ie_partic_diferente_p text, ie_med_exec_inativo_p text, nr_seq_ocorrencia_p bigint, nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, dt_referencia_p timestamp, ie_tipo_item_p text, cd_espec_medica_p bigint, ie_gerar_ocorrencia_p INOUT text, cd_estabelecimento_p bigint, vl_max_item_p bigint, vl_min_item_p bigint, nm_usuario_p text, ie_complemento_conta_p text, ie_exige_medico_p text, ie_tipo_pessoa_prestador_p text, ie_prestador_inativo_p text, ie_tipo_prestador_p text, cd_prestador_regra_p text, ie_goto_final_ocor_p INOUT text) FROM PUBLIC;

