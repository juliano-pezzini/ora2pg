-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nut_elemento_paciente ( nr_sequencia_p bigint, nm_usuario_p text, ie_calcular_p text, ie_npt_p text, ds_erro_p INOUT text) AS $body$
DECLARE


ie_tipo_elemento_w		varchar(1);
ie_sexo_w				varchar(1);
nr_seq_elemento_w		bigint;
nr_sequencia_w			bigint;
nr_seq_elem_unid_med_w	bigint;
nr_seq_elem_mat_w		bigint;
qt_lipidio_w			bigint;
qt_proteina_w			bigint;
qt_carboidrato_w		bigint;
qt_kcal_w				bigint;
qt_elemento_w			double precision;
qt_volume_w				double precision;
qt_conv_w				double precision;
pr_lipidio_w			smallint;
pr_proteina_w			smallint;
pr_carboidrato_w		smallint;
qt_peso_w				real;
qt_vol_1_fase_w			double precision;
qt_vol_2_fase_w			double precision;
qt_vol_3_fase_w			double precision;
qt_fase_npt_w			smallint;
qt_altura_cm_w			smallint;
qt_idade_ano_w			smallint;
qt_fator_stress_w		double precision;
qt_fator_ativ_w			double precision;
qt_kcal_kg_w			real;
qt_grama_prot_kg_dia_w	real;
cd_material_w			bigint;
nr_sequencia_www		bigint;
nr_sequencia_ww			bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia,
			ie_tipo_elemento
	from	nut_elemento
	where	ie_situacao	= 'A'
	and		ie_npt_adulto	= 'S'
	order by nr_seq_apresent, ds_elemento;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	nut_elemento_unid_med
	where	nr_seq_elemento = nr_seq_elemento_w
	and		ie_situacao	= 'A'
	order by ie_prioridade desc;

C03 CURSOR FOR
	SELECT	nr_sequencia
	from	nut_elemento_cadastro
	where	nr_seq_elem_unid_med = nr_sequencia_w
	and		ie_situacao	= 'A'
	order by nr_sequencia desc;

C04 CURSOR FOR
	SELECT	b.nr_sequencia,
			b.cd_material
	from	nut_elem_material b,
			nut_elemento a,
			nut_paciente c
	where	a.nr_sequencia	= b.nr_seq_elemento
	and		not exists (	SELECT	1
							from	nut_pac_elem_mat y,
									nut_paciente_elemento x
							where	y.nr_seq_elem_mat = b.nr_sequencia
							and		x.nr_sequencia = y.nr_seq_nut_pac_ele
							and		x.nr_seq_elemento = a.nr_sequencia
							and		x.nr_sequencia = nr_sequencia_w
							and		x.nr_seq_nut_pac = nr_sequencia_p )
	and		coalesce(b.ie_tipo,'NPT') = 'NPT'
	and		b.ie_situacao	= 'A'
	and		b.ie_padrao	= 'S'
	--and		a.ie_tipo_elemento in ('P','L','C')
	and		a.nr_sequencia	= nr_seq_elemento_w
	and		c.nr_sequencia = nr_sequencia_p
	order by b.cd_material;


BEGIN

select	a.pr_proteina,
		a.pr_lipidio,
		a.pr_carboidrato,
		c.ie_sexo,
		a.qt_peso,
		a.qt_altura_cm,
		a.qt_idade_ano,
		coalesce(coalesce(a.qt_fator_ativ,d.qt_fator),1),
		coalesce(coalesce(a.qt_fator_stress, e.qt_fator),1),
		a.qt_fase_npt
into STRICT	pr_proteina_w,
		pr_lipidio_w,
		pr_carboidrato_w,
		ie_sexo_w,
		qt_peso_w,
		qt_altura_cm_w,
		qt_idade_ano_w,
		qt_fator_ativ_w,
		qt_fator_stress_w,
		qt_fase_npt_w
from 	nut_fator_stress e,
		nut_fator_ativ d,
		pessoa_fisica c,
		prescr_medica b,
		nut_paciente a
where	a.nr_sequencia		= nr_sequencia_p
and		a.nr_prescricao		= b.nr_prescricao
and		b.cd_pessoa_fisica	= c.cd_pessoa_fisica
and		a.nr_seq_fator_ativ	= d.nr_sequencia
and		a.nr_seq_fator_stress	= e.nr_sequencia;

if	((pr_proteina_w + pr_lipidio_w + pr_carboidrato_w) <> 100) then
	--A Soma dos percentuais não é igual a 100!
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(181479);
end if;

if (ie_sexo_w = 'F') then
	qt_kcal_w	:= (655.1 + (9.56 * qt_peso_w) + (1.85 * qt_altura_cm_w) - (4.67 * qt_idade_ano_w));
else
	qt_kcal_w	:= (66.47 + (13.75 * qt_peso_w) + (5 * qt_altura_cm_w) - (6.76 * qt_idade_ano_w));
end if;

begin
qt_kcal_w				:= coalesce(qt_kcal_w,0) * qt_fator_Ativ_w * qt_fator_stress_w;
qt_Lipidio_w			:= qt_kcal_w * pr_lipidio_w / 100;
qt_proteina_w			:= qt_kcal_w * pr_proteina_w / 100;
qt_carboidrato_w		:= qt_kcal_w - qt_Lipidio_w - qt_proteina_w;
qt_kcal_kg_w			:= qt_kcal_w / qt_peso_w;
qt_grama_prot_kg_dia_w	:= qt_proteina_w / 4 / qt_peso_w;

update	nut_paciente
set		qt_kcal_total		= qt_kcal_w,
		qt_kcal_prot		= qt_proteina_w,
		qt_kcal_lipidio		= qt_lipidio_w,
		qt_kcal_carboidrato	= qt_carboidrato_w,
		qt_kcal_kg			= qt_kcal_kg_w,
		qt_grama_prot_kg_dia = qt_grama_prot_kg_dia_w
where	nr_sequencia	= nr_sequencia_p;
commit;

if (ie_npt_p = 'S') then

	open C01;
	loop
	fetch C01 into
		nr_seq_elemento_w,
		ie_tipo_elemento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_sequencia_w
		from	nut_paciente_elemento
		where	nr_seq_elemento		= nr_seq_elemento_w
		and		nr_seq_nut_pac		= nr_sequencia_p;

		if (nr_sequencia_w = 0) then
			begin
			select	nextval('nut_paciente_elemento_seq')
			into STRICT	nr_sequencia_w
			;

			qt_volume_w		:= 0;
			qt_elemento_w	:= 0;
			qt_kcal_w		:= null;

			open C02;
			loop
			fetch C02 into	nr_seq_elem_unid_med_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				open C03;
				loop
				fetch C03 into	nr_seq_elem_mat_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
				end loop;
				close C03;
			end loop;
			close C02;

			qt_vol_1_fase_w	:= null;
			qt_vol_2_fase_w	:= null;
			qt_vol_3_fase_w	:= null;

			if (ie_calcular_p = 'S') and (qt_volume_w > 0) then
				if (qt_fase_npt_w = 1) then
					qt_vol_1_fase_w	:= qt_volume_w;
				elsif (qt_fase_npt_w = 2) then
					qt_vol_1_fase_w	:= qt_volume_w / 2;
					qt_vol_2_fase_w := qt_volume_w / 2;
				elsif (qt_fase_npt_w = 3) then
					qt_vol_1_fase_w	:= qt_volume_w / 3;
					qt_vol_2_fase_w := qt_volume_w / 3;
					qt_vol_3_fase_w := qt_volume_w / 3;
				end if;
			end if;

			insert into Nut_Paciente_Elemento(
							nr_sequencia,
							nr_seq_nut_pac,
							nr_seq_elemento,
							dt_atualizacao,
							nm_usuario,
							qt_kcal,
							qt_elemento,
							nr_seq_elem_unid_med,
							qt_volume,
							nr_seq_elem_mat,
							qt_vol_1_fase,
							qt_vol_2_fase,
							qt_vol_3_fase
						) values (
							nr_sequencia_w,
							nr_sequencia_p,
							nr_seq_elemento_w,
							clock_timestamp(),
							nm_usuario_p,
							qt_kcal_w,
							qt_elemento_w,
							nr_seq_elem_unid_med_w,
							qt_volume_w,
							nr_seq_elem_mat_w,
							qt_vol_1_fase_w,
							qt_vol_2_fase_w,
							qt_vol_3_fase_w);
			end;
		end if;

		if (ie_tipo_elemento_w in ('P','L','C')) then
			begin
			if (ie_tipo_elemento_w = 'P') then
				begin
				qt_kcal_w		:= qt_proteina_w;
				qt_elemento_w	:= qt_kcal_w / 4;
				end;
			elsif (ie_tipo_elemento_w = 'L') then
				begin
				qt_kcal_w		:= qt_Lipidio_w;
				qt_elemento_w	:= qt_kcal_w / 11;
				end;
			elsif (ie_tipo_elemento_w = 'C') then
				begin
				qt_kcal_w		:= qt_Carboidrato_w;
				qt_elemento_w	:= qt_kcal_w / 3.4;
				end;
			end if;

			update	nut_paciente_elemento
			set		qt_kcal 	= qt_kcal_w,
					qt_elemento	= qt_elemento_w
			where	nr_sequencia	= nr_sequencia_w;
			end;

		end if;

		commit;

		open c04;
		loop
			fetch c04 into
				nr_sequencia_www,
				cd_material_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */

			insert into nut_pac_elem_mat(
							nr_sequencia,
							nr_seq_nut_pac_ele,
							dt_atualizacao,
							nm_usuario,
							qt_volume,
							qt_vol_1_fase,
							qt_vol_2_fase,
							qt_vol_3_fase,
							qt_vol_4_fase,
							qt_vol_cor,
							nr_seq_elem_mat,
							nr_seq_nut_pac,
							cd_material
						) values (
							nextval('nut_pac_elem_mat_seq'),
							nr_sequencia_w,
							clock_timestamp(),
							nm_usuario_p,
							0,--qt_conversao_ml_w,
							0,
							0,
							0,
							0,
							0,
							nr_sequencia_www,
							null,--nr_sequencia_p,
							cd_material_w);
		end Loop;
		close c04;

		commit;

		CALL Calcular_Nut_Pac_Elemento(nr_sequencia_w, null, ie_calcular_p, nm_usuario_p);
		end;
	end Loop;
	close C01;
end if;

exception when others then
	ds_erro_p	:= wheb_mensagem_pck.get_texto(277518);
end;

commit;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nut_elemento_paciente ( nr_sequencia_p bigint, nm_usuario_p text, ie_calcular_p text, ie_npt_p text, ds_erro_p INOUT text) FROM PUBLIC;

