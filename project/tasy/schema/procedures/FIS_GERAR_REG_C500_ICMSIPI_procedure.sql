-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_c500_icmsipi (nr_seq_controle_p bigint) AS $body$
DECLARE


/*REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELTRICA (CDIGO 06), NOTA FISCAL/CONTA DE FORNECIMENTO D'GUA CANALIZADA (CDIGO 29) E NOTA FISCAL CONSUMO FORNECIMENTO DE GS (CDIGO 28).*/



-- VARIABLES
ie_gerou_dados_bloco_w varchar(1) := 'N';
nr_seq_icmsipi_C500_w	fis_efd_icmsipi_C500.nr_sequencia%type;
cd_cons_w		          fis_efd_icmsipi_C500.cd_cons%type;
vl_serv_nt_w		      fis_efd_icmsipi_C500.vl_serv_nt%type;
vl_bc_icms_w		      fis_efd_icmsipi_C500.vl_bc_icms%type;
vl_icms_w		          fis_efd_icmsipi_C500.vl_icms%type;
vl_bc_icms_st_w		    fis_efd_icmsipi_C500.vl_bc_icms_st%type;
vl_icms_st_w		      fis_efd_icmsipi_C500.vl_icms_st%type;
cd_inf_w		          fis_efd_icmsipi_C500.cd_inf%type;
ie_tipo_ligacao_w	    fis_efd_icmsipi_regra_c500.ie_tipo_ligacao%type;
cd_grupo_tensao_w	    fis_efd_icmsipi_regra_c500.cd_grupo_tensao%type;
nr_seq_modelo_nf_w	  fis_efd_icmsipi_regra_c500.nr_seq_modelo_nf%type;
ie_tipo_data_w		    fis_efd_icmsipi_regra_c500.ie_tipo_data%type;
dt_inicio_apuracao_w	fis_efd_icmsipi_controle.dt_inicio_apuracao%type;
dt_fim_apuracao_w	    fis_efd_icmsipi_controle.dt_fim_apuracao%type;
cd_estabelecimento_w	fis_efd_icmsipi_controle.cd_estabelecimento%type;
nr_cod_0450_w		      fis_efd_icmsipi_controle.nr_cod_0450%type	:= 0;
cd_ver_w				      fis_efd_icmsipi_controle.cd_ver%type;
ds_chv_doc_e_w	 		  fis_efd_icmsipi_c500.ds_chv_doc_e%type        := null;
nr_fin_doc_e_w 			  fis_efd_icmsipi_c500.nr_fin_doc_e%type        := null;
ds_chv_doc_e_ref_w	 	fis_efd_icmsipi_c500.ds_chv_doc_e_ref%type    := null;
cd_ind_dest_w	 		    fis_efd_icmsipi_c500.cd_ind_dest%type         := null;
cd_mun_dest_w	 		    fis_efd_icmsipi_c500.cd_mun_dest%type         := null;
cd_cta_w 				      fis_efd_icmsipi_c500.cd_cta%type              := null;
qt_cursor_w           bigint                                    := 0;
nr_vetor_w            bigint                                    := 0;
nm_usuario_w          usuario.nm_usuario%type;
cd_sit_w				      fis_efd_icmsipi_C500.cd_sit%type;
movement_date_w       nota_fiscal.dt_entrada_saida%type;

c_regras CURSOR FOR
	SELECT	trunc(a.dt_inicio_apuracao),
		trunc(a.dt_fim_apuracao),
		c.nr_seq_modelo_nf,
		c.ie_tipo_data,
		a.cd_estabelecimento,
		coalesce(c.cd_consumo_agua, c.cd_consumo_energia)cd_cons,
		c.ie_tipo_ligacao,
		c.cd_grupo_tensao
	from	fis_efd_icmsipi_controle 	a,
		fis_efd_icmsipi_lote		b,
		fis_efd_icmsipi_regra_c500	c
	where	a.nr_seq_lote	= b.nr_sequencia
	and 	b.nr_sequencia	= c.nr_seq_lote
	and 	a.nr_sequencia 	= nr_seq_controle_p;

/*Cursor que retorna as informaes para o registro c500*/

c_nf_energia CURSOR FOR
	SELECT	'0' cd_ind_oper,
		'1' cd_ind_emit,
		max(CASE WHEN obter_dados_operacao_nota(a.cd_operacao_nf, '6')='E' THEN  coalesce(a.cd_cgc_emitente, a.cd_pessoa_fisica)  ELSE coalesce(cd_cgc,a.cd_pessoa_fisica) END ) cd_part,
		max(lpad(b.cd_modelo_nf, 2, 0)) cd_mod,
		'00' cd_sit,
		max(a.cd_serie_nf) cd_serie,
		null cd_sub,
		max(a.nr_nota_fiscal) nr_doc,
		max(a.dt_emissao) dt_doc,
		max(a.dt_entrada_saida) dt_e_s,
		max(a.vl_total_nota) vl_doc,
		sum(c.vl_desconto) vl_desc,
		max(a.vl_total_nota) vl_forn,
		0 vl_terc,
		max(a.vl_despesa_acessoria) vl_da,
		null cd_inf,
		null vl_pis,
		null vl_cofins,
		max(a.nr_sequencia) nr_seq_nota,
		max(a.ds_observacao) ds_observacao,
		max(a.nr_danfe) nr_danfe,
		max(c.cd_conta_contabil) cd_cta,
    max(a.nr_sequencia_ref) nr_sequencia_ref,
    max(a.ie_tipo_nota) ie_tipo_nota
	FROM nota_fiscal_item c, nota_fiscal a, operacao_nota_modelo d
LEFT OUTER JOIN modelo_nota_fiscal b ON (d.nr_seq_modelo = b.nr_sequencia)
WHERE a.cd_operacao_nf	= d.cd_operacao_nf  and a.nr_sequencia 		= c.nr_Sequencia and (a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '') /*Se a nota for de entrada, no tiver sido enviada, e estiver estornada, a nota nao vai no arquivo */

  and a.ie_situacao not in ('2', '3', '9') and (((ie_tipo_data_w = 1) and (trunc(a.dt_emissao) between dt_inicio_apuracao_w and dt_fim_apuracao_w)) 
		or ((ie_tipo_data_w = 2) and (trunc(a.dt_entrada_saida) between dt_inicio_apuracao_w and dt_fim_apuracao_w))) and b.nr_sequencia		= nr_seq_modelo_nf_w and a.cd_estabelecimento	= cd_estabelecimento_w group by	a.nr_sequencia;

/*Criao do array com o tipo sendo do cursor eespecificado - c_nf_energia*/

type reg_c_nf_energia is table of c_nf_energia%RowType;
vetEnergia reg_c_nf_energia;

/*Criao do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_C500 */

type registro is table of fis_efd_icmsipi_C500%rowtype index by integer;
fis_registros_w registro;

BEGIN

/*Obteo do usurio ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

select 	coalesce(cd_ver, '012')
into STRICT	cd_ver_w
from 	fis_efd_icmsipi_controle
where 	nr_sequencia = nr_seq_controle_p;

open c_regras;
loop
fetch c_regras into	
	dt_inicio_apuracao_w,
	dt_fim_apuracao_w,
	nr_seq_modelo_nf_w,
	ie_tipo_data_w,
	cd_estabelecimento_w,
	cd_cons_w,
	ie_tipo_ligacao_w,
	cd_grupo_tensao_w;
EXIT WHEN NOT FOUND; /* apply on c_regras */
	begin
	
	open c_nf_energia;
	loop
	fetch c_nf_energia bulk collect into vetEnergia limit 1000;
		for i in 1 .. vetEnergia.Count loop
			begin
			
			CALL fis_gerar_reg_C590_icmsipi(	nr_seq_controle_p,
							vetEnergia[i].nr_seq_nota);

			/*Incrementa a variavel para o array*/

			qt_cursor_w:=	qt_cursor_w + 1;

			if (ie_gerou_dados_bloco_w = 'N') then
				ie_gerou_dados_bloco_w := 'S';
			end if;
			
			/*Pega a sequencial e adciona mais 1 para inserir o registro posterior, esse campo serve para nao perder o sequancial do cd_inf*/

			cd_inf_w := null;
			if  vetEnergia[i](.ds_observacao IS NOT NULL AND .ds_observacao::text <> '') then
				nr_cod_0450_w := fis_obter_seq_0450_icmsipi(nr_seq_controle_p, nr_cod_0450_w);
				cd_inf_w := nr_cod_0450_w;
			end if;
			
			begin
			/*Select para buscar os totalizadores do regintro C590*/

			select  CASE WHEN a.vl_tot_red_bc=0 THEN  null  ELSE a.vl_tot_red_bc END  vl_tot_red_bc,
				CASE WHEN a.vl_tot_bc_icms=0 THEN  null  ELSE a.vl_tot_bc_icms END  vl_tot_bc_icms,
				CASE WHEN a.vl_tot_icms=0 THEN  null  ELSE a.vl_tot_icms END  vl_tot_icms,
				CASE WHEN a.vl_tot_bc_icms_st=0 THEN  null  ELSE a.vl_tot_bc_icms_st END  vl_tot_bc_icms_st,
				CASE WHEN a.vl_tot_icms_st=0 THEN  null  ELSE a.vl_tot_icms_st END  vl_tot_icms_st
			into STRICT	vl_serv_nt_w,
				vl_bc_icms_w,
				vl_icms_w,
				vl_bc_icms_st_w,
				vl_icms_st_w
			from (
					SELECT	coalesce(sum(vl_red_bc),0) vl_tot_red_bc,
						coalesce(sum(vl_bc_icms),0) vl_tot_bc_icms,
						coalesce(sum(vl_icms),0) vl_tot_icms,
						coalesce(sum(vl_bc_icms_st),0) vl_tot_bc_icms_st,
						coalesce(sum(vl_icms_st),0) vl_tot_icms_st
					from	fis_efd_icmsipi_C590 a
					where	a.nr_seq_nota = vetEnergia[i].nr_seq_nota
				) a;
			
			exception
			when others then
				vl_serv_nt_w	:= null;
				vl_bc_icms_w	:= null;
				vl_icms_w	:= null;
				vl_bc_icms_st_w	:= null;
				vl_icms_st_w	:= null;
			end;

			/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_C860 */

			select	nextval('fis_efd_icmsipi_c500_seq')
			into STRICT	nr_seq_icmsipi_C500_w
			;
			
			/* Campos a partir do Layout 014. */

			if ((cd_ver_w)::numeric  > 13) then
				ds_chv_doc_e_w := '';
				nr_fin_doc_e_w := '';
				ds_chv_doc_e_ref_w := '';
				cd_ind_dest_w := '';
				cd_mun_dest_w := '';
				cd_cta_w := vetEnergia[i].cd_cta;
				
				if (vetEnergia[i].cd_mod = '66') then
					ds_chv_doc_e_w := vetEnergia[i].nr_danfe;
					nr_fin_doc_e_w := '1';
				end if;
				
			end if;

      cd_sit_w        := vetEnergia[i].cd_sit;
      movement_date_w := vetEnergia[i].dt_e_s;
      SELECT * FROM tax_extemporaneous_icmsipi(vetEnergia[i].dt_doc, vetEnergia[i].nr_sequencia_ref, vetEnergia[i].ie_tipo_nota, movement_date_w, cd_sit_w) INTO STRICT movement_date_w, cd_sit_w;

			/*Inserindo valores no array para realizao do forall posteriormente*/

			fis_registros_w[qt_cursor_w].nr_sequencia         := nr_seq_icmsipi_C500_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao       := clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario           := nm_usuario_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao_nrec  := clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario_nrec      := nm_usuario_w;
			fis_registros_w[qt_cursor_w].cd_reg               := 'C500';
			fis_registros_w[qt_cursor_w].cd_ind_oper          := vetEnergia[i].cd_ind_oper;
			fis_registros_w[qt_cursor_w].cd_ind_emit          := vetEnergia[i].cd_ind_emit;
			fis_registros_w[qt_cursor_w].cd_part              := vetEnergia[i].cd_part;
			fis_registros_w[qt_cursor_w].cd_mod               := vetEnergia[i].cd_mod;
			fis_registros_w[qt_cursor_w].cd_sit               := cd_sit_w;
			fis_registros_w[qt_cursor_w].cd_serie             := substr(vetEnergia[i].cd_serie, 1, 4);
			fis_registros_w[qt_cursor_w].cd_sub               := substr(vetEnergia[i].cd_sub, 1, 9);
			fis_registros_w[qt_cursor_w].cd_cons              := cd_cons_w;
			fis_registros_w[qt_cursor_w].nr_doc               := substr(vetEnergia[i].nr_doc, 1, 9);
			fis_registros_w[qt_cursor_w].dt_doc               := vetEnergia[i].dt_doc;
			fis_registros_w[qt_cursor_w].dt_e_s               := movement_date_w;
			fis_registros_w[qt_cursor_w].vl_doc               := vetEnergia[i].vl_doc;
			fis_registros_w[qt_cursor_w].vl_desc              := vetEnergia[i].vl_desc;
			fis_registros_w[qt_cursor_w].vl_forn              := vetEnergia[i].vl_forn;
			fis_registros_w[qt_cursor_w].vl_serv_nt           := vl_serv_nt_w;
			fis_registros_w[qt_cursor_w].vl_terc              := vetEnergia[i].vl_terc;
			fis_registros_w[qt_cursor_w].vl_da                := vetEnergia[i].vl_da;
			fis_registros_w[qt_cursor_w].vl_bc_icms           := vl_bc_icms_w;
			fis_registros_w[qt_cursor_w].vl_icms              := vl_icms_w;
			fis_registros_w[qt_cursor_w].vl_bc_icms_st        := vl_bc_icms_st_w;
			fis_registros_w[qt_cursor_w].vl_icms_st           := vl_icms_st_w;
			fis_registros_w[qt_cursor_w].cd_inf               := cd_inf_w;
			fis_registros_w[qt_cursor_w].vl_pis               := vetEnergia[i].vl_pis;
			fis_registros_w[qt_cursor_w].vl_cofins            := vetEnergia[i].vl_cofins;
			fis_registros_w[qt_cursor_w].cd_tp_ligacao        := ie_tipo_ligacao_w;
			fis_registros_w[qt_cursor_w].cd_grupo_tensao      := cd_grupo_tensao_w;
			fis_registros_w[qt_cursor_w].nr_seq_controle      := nr_seq_controle_p;
			fis_registros_w[qt_cursor_w].nr_seq_nota     	    := vetEnergia[i].nr_seq_nota;
			fis_registros_w[qt_cursor_w].ds_chv_doc_e    	    := ds_chv_doc_e_w;
			fis_registros_w[qt_cursor_w].nr_fin_doc_e    	    := nr_fin_doc_e_w;
			fis_registros_w[qt_cursor_w].ds_chv_doc_e_ref     := ds_chv_doc_e_ref_w;
			fis_registros_w[qt_cursor_w].cd_ind_dest     	    := cd_ind_dest_w;
			fis_registros_w[qt_cursor_w].cd_mun_dest     	    := cd_mun_dest_w;
			fis_registros_w[qt_cursor_w].cd_cta    			      := cd_cta_w;

			if (nr_vetor_w >= 1000) then
				begin
				/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_C500 */

				forall i in fis_registros_w.first .. fis_registros_w.last
					insert into fis_efd_icmsipi_C500 values fis_registros_w(i);

				nr_vetor_w := 0;
				fis_registros_w.delete;

				commit;

				end;
			end if;

			/*incrementa variavel para realizar o forall quando chegar no valor limite*/

			nr_vetor_w := nr_vetor_w + 1;

			end;
		end loop;
	EXIT WHEN NOT FOUND; /* apply on c_nf_energia */
	end loop;
	close c_nf_energia;
	
	end;
end loop;
close c_regras;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que no entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_C500 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualizao informao no controle de gerao de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update	fis_efd_icmsipi_controle
	set	ie_mov_C = 'S'
	where	nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_c500_icmsipi (nr_seq_controle_p bigint) FROM PUBLIC;

