-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS (nr_seq_etapa		bigint,
		   nr_seq_nova_etapa	bigint,
		   nr_seq_superior		bigint);


CREATE OR REPLACE PROCEDURE gpi_copiar_cronograma ( nr_seq_cronograma_p bigint, nm_usuario_p text, nr_seq_projeto_p bigint) AS $body$
DECLARE


ie_ativ_estrut_w			varchar(15);
ds_objetivo_w			varchar(4000);
dt_inicio_prev_w			timestamp;
dt_fim_prev_w			timestamp;
dt_inicio_real_w			timestamp;
dt_fim_real_w			timestamp;
qt_hora_prev_w			double precision;
qt_hora_real_w			double precision;
pr_etapa_w			double precision;
nr_seq_novo_cronograma_w		bigint;
nr_seq_apres_w			bigint;
nr_seq_estrutura_W		bigint;
nr_seq_etapa_w			bigint;
nr_seq_nova_etapa_w		bigint;
nr_seq_superior_w			bigint;
nm_etapa_w			varchar(255);
nr_seq_tipo_etapa_w		bigint;

type vetor is table of campos index by integer;
etapa_w					vetor;
i					integer	:= 0;
k					integer	:= 0;

/*Etapas - Atividades*/

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nm_etapa,
	a.nr_seq_apres,
	a.nr_seq_superior,
	a.ds_objetivo,
	a.dt_inicio_prev,
	a.dt_fim_prev,
	a.dt_inicio_real,
	a.dt_fim_real,
	a.qt_hora_prev,
	a.qt_hora_real,
	a.pr_etapa,
	a.nr_seq_tipo_etapa
from	gpi_cron_etapa a
where	a.nr_seq_cronograma 	= nr_seq_cronograma_p
order by coalesce(a.nr_seq_superior,0);


BEGIN

select	nextval('gpi_cronograma_seq')
into STRICT	nr_seq_novo_cronograma_w
;

/* Gravar novo Cronograma */

insert into gpi_cronograma(
	nr_sequencia,
	ds_titulo,
	nr_seq_projeto,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	ds_objetivo,
	dt_inicio_prev,
	dt_fim_prev,
	dt_inicio_real,
	dt_fim_real,
	dt_liberacao,
	nm_usuario_lib,
	dt_aprovacao,
	nm_usuario_aprov)
SELECT	nr_seq_novo_cronograma_w,
	substr(wheb_mensagem_pck.get_texto(298631,'DS_TITULO='|| a.ds_titulo),1,80),
	nr_seq_projeto_p,
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p,
	a.ds_objetivo,
	a.dt_inicio_prev,
	a.dt_fim_prev,
	null,
	null,
	null,
	'',
	null,
	''
from	gpi_cronograma a
where	nr_sequencia	= nr_seq_cronograma_p;

/* Gravar todas as atividades no novo cronograma */

open C01;
loop
fetch C01 into
	nr_seq_etapa_w,
	nm_etapa_w,
	nr_seq_apres_w,
	nr_seq_superior_w,
	ds_objetivo_w,
	dt_inicio_prev_w,
	dt_fim_prev_w,
	dt_inicio_real_w,
	dt_fim_real_w,
	qt_hora_prev_w,
	qt_hora_real_w,
	pr_etapa_w,
	nr_seq_tipo_etapa_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	nextval('gpi_cron_etapa_seq')
	into STRICT	nr_seq_nova_etapa_w
	;

	insert into gpi_cron_etapa(
		nr_sequencia,
		nr_seq_cronograma,
		nr_seq_superior,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_apres,
		nm_etapa,
		ds_objetivo,
		dt_inicio_prev,
		dt_fim_prev,
		dt_inicio_real,
		dt_fim_real,
		qt_hora_prev,
		qt_hora_real,
		pr_etapa,
		nr_seq_tipo_etapa)
	values (	nr_seq_nova_etapa_w,
		nr_seq_novo_cronograma_w,
		nr_seq_superior_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_apres_w,
		nm_etapa_w,
		ds_objetivo_w,
		dt_inicio_prev_w,
		dt_fim_prev_w,
		null,
		null,
		qt_hora_prev_w,
		0,
		0,
		nr_seq_tipo_etapa_w);

	i	:= i + 1;
	/* Guarda no vetor para atualizar NR_SEQ_SUPERIOR*/

	etapa_w[i].nr_seq_etapa		:= nr_seq_etapa_w;
	etapa_w[i].nr_seq_nova_etapa	:= nr_seq_nova_etapa_w;
	etapa_w[i].nr_seq_superior	:= nr_seq_superior_w;
	end;
end loop;
close C01;
/*
Busca o registro da etapa superior para saber sua nova sequencia
e atualizar os registros filhos da mesma */
commit;

for i in 1..etapa_w.Count loop
	begin
	if (etapa_w[i](.nr_seq_superior IS NOT NULL AND .nr_seq_superior::text <> '')) then
		for k in 1..etapa_w.Count loop
			begin
			if (etapa_w[i].nr_seq_superior = etapa_w[k].nr_seq_etapa) then
				update	gpi_cron_etapa
				set	nr_seq_superior	= etapa_w[k].nr_seq_nova_etapa
				where	nr_sequencia	= etapa_w[i].nr_seq_nova_etapa;
			end if;
			end;
		end loop;
	end if;
	end;
end loop;
commit;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gpi_copiar_cronograma ( nr_seq_cronograma_p bigint, nm_usuario_p text, nr_seq_projeto_p bigint) FROM PUBLIC;

