-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_restri_transf_agenda_de ( hr_inicio_origem_p timestamp, nr_seq_origem_p bigint, nr_seq_destino_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_prescricao_w			timestamp;
dt_agenda_w			timestamp;
dt_agenda_origem_w		timestamp;
dt_agenda_destino_w		timestamp;
nr_cirurgia_w			bigint;
nr_sequencia_w			bigint;
nr_sequencia_dest_w		bigint;
nr_min_dur_dest_w		bigint;
nr_min_dur_orig_w		bigint;
nr_prescricao_w			bigint;
cd_agenda_w			bigint;
nr_seq_proc_interno_w		bigint;
ie_permite_agendar_w		varchar(1);
ie_transf_difer_data_w		varchar(1);
ie_consiste_material_w		varchar(1);
ie_possui_medicamentos_w	varchar(1);
ie_status_agenda_w		varchar(10);
ie_transf_cirur_w		varchar(15);
ie_transf_prescr_w		varchar(15);
ie_transf_cancel_w		varchar(15);
ie_dentro_vigencia_w 		varchar(1) := 'S';
ie_carater_cirurgia_w		varchar(15);
ie_possui_autorizacao_w		varchar(1);
ie_consiste_guia_w		varchar(15);
ie_consiste_estab_w		varchar(1);
ie_consiste_agenda_executada_w	varchar(1);

procedure inserir_inconsistencia(nm_usuario_p        text,
				 nr_seq_agenda_p     bigint,
				 ds_inconsistencia_p text,
				 ie_tipo_p	     text)is
			
;
BEGIN
	insert into w_agenda_cirurgica_consist( nm_usuario,
					 nr_sequencia,
					 nr_seq_agenda,
					 dt_atualizacao,
					 dt_atualizacao_nrec,
					 nm_usuario_nrec,
					 ds_inconsistencia,
					 ie_tipo)
				values (nm_usuario_p,
					nextval('w_agenda_cirurgica_consist_seq'),
					nr_seq_agenda_p,
					clock_timestamp(),
					clock_timestamp(),
					nm_usuario_p,
					ds_inconsistencia_p,
					ie_tipo_p);
	commit;
	
end;
begin

ie_transf_cirur_w := obter_param_usuario(871, 45, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_transf_cirur_w);
ie_transf_prescr_w := obter_param_usuario(871, 215, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_transf_prescr_w);
ie_transf_cancel_w := obter_param_usuario(871, 249, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_transf_cancel_w);
ie_transf_difer_data_w := obter_param_usuario(871, 323, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_transf_difer_data_w);
ie_consiste_material_w := obter_param_usuario(871, 349, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_consiste_material_w);
ie_consiste_agenda_executada_w := Obter_Param_Usuario(871, 571, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_consiste_agenda_executada_w);
ie_consiste_guia_w := Obter_Param_Usuario(871, 813, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_consiste_guia_w);

select	max(nr_sequencia),
	max(nr_seq_proc_interno),
	coalesce(max(ie_carater_cirurgia),'XXX')
into STRICT	nr_sequencia_w,
	nr_seq_proc_interno_w,
	ie_carater_cirurgia_w
from	agenda_paciente
where	nr_sequencia	=	nr_seq_origem_p
and	hr_inicio	=	hr_inicio_origem_p;

select	max(nr_sequencia),
	max(nr_minuto_duracao),
	max(hr_inicio)
into STRICT	nr_sequencia_dest_w,
	nr_min_dur_dest_w,
	dt_agenda_w
from	agenda_paciente
where	nr_sequencia =	nr_seq_destino_p;	

if (coalesce(nr_sequencia_w,0) = 0) or (coalesce(nr_sequencia_dest_w,0) = 0) then
   CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p,obter_texto_tasy(80859, wheb_usuario_pck.get_nr_seq_idioma), 'A');
   return;
end if;
	
if (ie_consiste_agenda_executada_w = 'N') then 
	select	coalesce(max(ie_status_agenda),'L')
	into STRICT	ie_status_agenda_w
	from	agenda_paciente
	where	nr_sequencia	=	nr_seq_origem_p;	

	if (ie_status_agenda_w = 'E') then
		/*Essa agenda esta executada, nao pode ser transferida! Parametro[571].*/

		CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, wheb_mensagem_pck.get_texto(277709), 'A');
	end if;
end if;	
	

if (ie_transf_cirur_w = 'N') then
	select	coalesce(max(nr_cirurgia),0)
	into STRICT	nr_cirurgia_w
	from	agenda_paciente
	where	nr_sequencia	=	nr_seq_origem_p;

	if (nr_cirurgia_w > 0) then	
		/*Essa agenda possui uma cirurgia vinculada, nao pode ser transferida!*/

		CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(80863, wheb_usuario_pck.get_nr_seq_idioma), 'A');
	end if;
end if;

	

if (ie_consiste_guia_w = 'S') and (ie_carater_cirurgia_w <> 'M') then
	
	select	max('S')
	into STRICT	ie_possui_autorizacao_w
	from	autorizacao_convenio
	where	nr_seq_agenda = nr_sequencia_w;

	if (ie_possui_autorizacao_w = 'S') then
		select	coalesce(max('S'),'N')
		into STRICT	ie_dentro_vigencia_w
		from	autorizacao_convenio a,
				estagio_autorizacao b
		where	a.nr_seq_estagio = b.nr_sequencia
		and	a.nr_seq_agenda = nr_sequencia_w
		--and	dt_agenda_w between dt_inicio_vigencia and nvl(dt_validade_guia, nvl(dt_fim_vigencia, sysdate))
		and	b.ie_interno = '10';
		
		if (ie_dentro_vigencia_w = 'N') then
			CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, wheb_mensagem_pck.get_texto(313341), 'A');
		end if;
	end if;
end if;

if (ie_transf_prescr_w = 'N') then
	select 	coalesce(max(nr_prescricao),0)
	into STRICT	nr_prescricao_w
	from	prescr_medica
	where 	nr_seq_agenda = nr_seq_origem_p;
			
	if (nr_prescricao_w > 0) then
		/*Essa agenda possui uma prescricao vinculada, nao pode ser transferida!*/

		CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(80864, wheb_usuario_pck.get_nr_seq_idioma), 'A');
	end if;
	
elsif (ie_transf_prescr_w = 'SMD') then
	select 	max(dt_prescricao)
	into STRICT	dt_prescricao_w
	from	prescr_medica
	where 	nr_seq_agenda = nr_seq_origem_p;
	
	select	max(dt_agenda)
	into STRICT	dt_agenda_w
	from	agenda_paciente
	where	nr_sequencia = nr_seq_destino_p;
	
	if	((dt_prescricao_w IS NOT NULL AND dt_prescricao_w::text <> '')  and (dt_agenda_w IS NOT NULL AND dt_agenda_w::text <> '') and (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_prescricao_w) <> ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_w))) then
		/*Essa agenda possui uma prescricao vinculada, nao pode ser transferida!*/

		CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(80864, wheb_usuario_pck.get_nr_seq_idioma), 'A');
	end if;
end if;

select	nr_minuto_duracao
into STRICT	nr_min_dur_orig_w
from	agenda_paciente
where	nr_sequencia =	nr_seq_origem_p;	

if (nr_min_dur_orig_w > nr_min_dur_dest_w) then
	begin
	/*O tempo de duracao da agenda de origem e maior que a de destino!*/

	CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(80865, wheb_usuario_pck.get_nr_seq_idioma), 'A');
	end;
end if;

if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
	select	cd_agenda
	into STRICT	cd_agenda_w
	from	agenda_paciente
	where	nr_sequencia = nr_seq_destino_p;
	
	select	coalesce(max('N'),'S')
	into STRICT	ie_permite_agendar_w
	from	proc_interno_agenda
	where	cd_agenda = cd_agenda_w
	and	ie_permite = 'N'
	and	nr_seq_proc_interno = nr_seq_proc_interno_w;
	
	if (ie_permite_agendar_w = 'N') then
		/*Nao e permitido executar este procedimento nesta sala. Favor verificar no cadastro de Exames e Procedimentos Internos, pasta Salas.*/

		CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(80866, wheb_usuario_pck.get_nr_seq_idioma), 'A');
	else
		select 	coalesce(max('S'),'N')
		into STRICT	ie_consiste_estab_w
		from	agenda a
		where	a.cd_agenda = cd_agenda_w
		and (exists (SELECT 	1
				from 	proc_interno_estab b
				where 	a.cd_estabelecimento 	= b.cd_estabelecimento
				and 	b.nr_seq_proc_interno 	= nr_seq_proc_interno_w)
		or   not exists (select 	1
				from 	proc_interno_estab b
				where 	b.nr_seq_proc_interno 	= nr_seq_proc_interno_w));

		if (ie_consiste_estab_w = 'N') then
		    CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(338352, wheb_usuario_pck.get_nr_seq_idioma), 'A');				
		end if;
	end if;			

end if;

if (ie_transf_cancel_w = 'N') then
	select	ie_status_agenda
	into STRICT	ie_status_agenda_w
	from	agenda_paciente
	where	nr_sequencia	=	nr_seq_origem_p;
			
	if (ie_status_agenda_w = 'C') then	
		/*Essa agenda esta cancelada, nao pode ser transferida!*/

		CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(80867, wheb_usuario_pck.get_nr_seq_idioma), 'A');
	end if;
end if;

if (ie_transf_difer_data_w = 'N') then
	select	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda)
	into STRICT	dt_agenda_origem_w	
	from	agenda_paciente
	where	nr_sequencia = nr_seq_origem_p;

	select	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda)	
	into STRICT	dt_agenda_destino_w	
	from	agenda_paciente
	where	nr_sequencia = nr_seq_destino_p;
	
	if (dt_agenda_destino_w <> dt_agenda_origem_w) then
		/*Nao e possivel transferir a agenda para outro dia! Parametro [323].*/

		CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(80868, wheb_usuario_pck.get_nr_seq_idioma), 'A');
	end if;
end if;

if 	((ie_consiste_material_w = 'N') or (ie_consiste_material_w = 'T'))  and (nr_seq_origem_p IS NOT NULL AND nr_seq_origem_p::text <> '') and (nr_seq_origem_p > 0) then
	select	max(nr_cirurgia)
	into STRICT	nr_cirurgia_w
	from 	Agenda_paciente
	where	nr_sequencia 	= nr_seq_origem_p;
end if;

if 	((ie_consiste_material_w = 'N') or (ie_consiste_material_w = 'T'))  and (nr_cirurgia_w > 0) then
	select	max(coalesce('S','N'))
	into STRICT	ie_possui_medicamentos_w
	from 	prescr_material b,
		cirurgia a 
	where 	a.nr_cirurgia	= nr_cirurgia_w
	and 	b.nr_prescricao	= a.nr_prescricao;
	
	if (ie_possui_medicamentos_w = 'S') then 			
	   /*Esta cirurgia possui medicamentos previstos!Parametro [349].*/

	    CALL CALL inserir_inconsistencia(nm_usuario_p, nr_seq_origem_p, obter_texto_tasy(80869, wheb_usuario_pck.get_nr_seq_idioma), 'A');
	end if;
end if;	


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_restri_transf_agenda_de ( hr_inicio_origem_p timestamp, nr_seq_origem_p bigint, nr_seq_destino_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

