-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pfcs_hah_requests ( cd_establishment_p bigint, nm_user_p text) AS $body$
DECLARE


-- Cursors
---- Units
c01_dpt CURSOR FOR
SELECT cd_setor_atendimento cd_unit,
    ds_setor_atendimento ds_unit,
    cd_classif_setor cd_unit_classification
from setor_atendimento
where cd_classif_setor in (PFCS_PCK_CONSTANTS.CD_HAH)
    and ie_situacao = PFCS_PCK_CONSTANTS.IE_ACTIVE
    and ie_ocup_hospitalar <> PFCS_PCK_CONSTANTS.IE_NO
    and cd_estabelecimento_base = cd_establishment_p;

---- Transfer Orders / Delays
c03_td CURSOR(cd_unit_p  bigint, ds_unit_p  text, cd_unit_classification_p  text) FOR
SELECT enc.id_encounter nr_encounter,
    pat.patient_id id_patient,
    pfcs_get_human_name(pat.nr_sequencia, PFCS_PCK_CONSTANTS.DS_PATIENT) nm_patient,
    pfcs_get_human_name(pfcs_get_practitioner_seq(enc.nr_sequencia, PFCS_PCK_CONSTANTS.CD_ATTENDING_PHYSICIAN), PFCS_PCK_CONSTANTS.DS_PRACTITIONER) nm_physician,
    pat.gender ds_gender,
    pat.birthdate dt_birthdate,
    round(months_between(coalesce(pat.deceased_date, clock_timestamp()), pat.birthdate)) qt_patient_age,
    enc.period_start dt_period_start,
    pfcs_get_patient_diagnosis(enc.nr_sequencia) ds_problem,
    coalesce(ser.dt_authored_on, ser.dt_atualizacao) dt_request,
    req.ie_status_unidade cd_bed_status,
    (ds_unit_p || '-' || uni.cd_unidade_basica || '-' || uni.cd_unidade_compl) ds_location,
    pfcs_get_code_status(pat.nr_sequencia, enc.nr_sequencia, PFCS_PCK_CONSTANTS.IE_YES_BR) code_status,
    pfcs_get_special_requests(enc.nr_sequencia, uni.nr_seq_location) ds_special_requests,
    coalesce(pfcs_get_checklist(enc.nr_sequencia, pat.nr_sequencia, PFCS_PCK_CONSTANTS.CD_MPL),' ') ds_care_status,
    coalesce(pfcs_get_checklist(enc.nr_sequencia, pat.nr_sequencia, PFCS_PCK_CONSTANTS.CD_TOOLTIP),' ') ds_checklist,
    pfcs_get_frequent_flyer(enc.nr_sequencia) ie_frequent_flyer,
    pfcs_obs_contributor_pck.get_freqflyer_visits(enc.nr_sequencia) ds_recur_pat_adm_data,
    pfcs_obs_contributor_pck.get_freqflyer_comorbidities(enc.nr_sequencia) ds_recur_pat_comorbd,
    pfcs_obs_contributor_pck.get_freqflyer_visit_reason(enc.nr_sequencia) ds_recur_pat_reasons,
    pfcs_get_edi_score(enc.nr_sequencia) qt_trs,
    pfcs_obs_contributor_pck.get_edi_vital_warnings(enc.nr_sequencia) ds_edi_vitals_warn,
    pfcs_obs_contributor_pck.get_edi_contributors(enc.nr_sequencia) ds_edi_contrb,
    pfcs_get_lace_plus(enc.nr_sequencia, enc.nr_seq_organization) ds_readmission_risk,
    pfcs_obs_contributor_pck.get_laceplus(enc.nr_sequencia) ds_readm_risk_contrb,
    pfcs_pck_los.get_value(enc.nr_sequencia, cd_unit_classification_p) vl_los_remaining,
    sec.ds_setor_atendimento ds_requested_unit
from pfcs_service_request ser,
    pfcs_encounter enc,
    pfcs_patient pat,
    unidade_atendimento uni,
    setor_atendimento sec,
    unidade_atendimento req
where ser.cd_service = PFCS_PCK_CONSTANTS.CD_TRANSFER
    and ser.si_status = PFCS_PCK_CONSTANTS.SI_STATUS_ACTIVE
    and ser.si_intent = PFCS_PCK_CONSTANTS.SI_INTENT_PLAN
    and ser.nr_seq_location <> uni.nr_seq_location
    and ser.nr_seq_location = req.nr_seq_location
    and enc.nr_seq_patient = pat.nr_sequencia
    and ser.nr_seq_encounter = enc.nr_sequencia
    and uni.cd_setor_atendimento = cd_unit_p
    and uni.nr_seq_location = pfcs_get_pat_location(pat.nr_sequencia, enc.nr_sequencia)
    and sec.cd_setor_atendimento = req.cd_setor_atendimento
    and (enc.period_start IS NOT NULL AND enc.period_start::text <> '')
    and coalesce(enc.period_end::text, '') = '';

type cur_department_type  is table of c01_dpt%rowtype      index by integer;
cur_department_w          cur_department_type;

type cur_patient_type     is table of c03_td%rowtype      index by integer;
cur_patient_w             cur_patient_type;

-- Variables
pfcs_panel_detail_seq_w         pfcs_panel_detail.nr_sequencia%type;
pfcs_panel_seq_w                pfcs_panel.nr_sequencia%type;

qt_transfer_orders_w            integer := 0;
qt_delays_w                     integer := 0;
qt_time_transfer_w              integer := 0;
ie_over_threshold_w             pfcs_detail_patient.ie_over_threshold%type;
BEGIN

select max(coalesce(qt_time_transfer,0))
into STRICT qt_time_transfer_w
from pfcs_general_rule;


        open c01_dpt;
        loop
            fetch c01_dpt bulk collect into cur_department_w;
            EXIT WHEN NOT FOUND; /* apply on c01_dpt */
        end loop;
        close c01_dpt;

    for i in 1..cur_department_w.count loop
    qt_transfer_orders_w := 0;
    qt_delays_w := 0;

        open c03_td(cur_department_w[i].cd_unit, cur_department_w[i].ds_unit, cur_department_w[i].cd_unit_classification);
        loop
            fetch c03_td bulk collect into cur_patient_w;
            EXIT WHEN NOT FOUND; /* apply on c03_td */
        end loop;
        close c03_td;
        for i in 1..cur_patient_w.count loop
        qt_transfer_orders_w := qt_transfer_orders_w + 1;

        ie_over_threshold_w := 'N';
        if ( ((clock_timestamp() - cur_patient_w[i].dt_request) * 1440) > qt_time_transfer_w ) then
            qt_delays_w := qt_delays_w + 1;
            ie_over_threshold_w := 'Y';
        end if;

        select  nextval('pfcs_panel_detail_seq')
        into STRICT	pfcs_panel_detail_seq_w
;

        insert into pfcs_panel_detail(
            nr_sequencia,
            nm_usuario,
            dt_atualizacao,
            nm_usuario_nrec,
            dt_atualizacao_nrec,
            ie_situation,
            nr_seq_indicator,
            nr_seq_operational_level)
        values (
            pfcs_panel_detail_seq_w,
            nm_user_p,
            clock_timestamp(),
            nm_user_p,
            clock_timestamp(),
            'T',
            PFCS_PCK_INDICATORS.NR_ICU_TRANSFER_ORDERS,
            cd_establishment_p);

        insert into pfcs_detail_bed(
            nr_sequencia,
            nm_usuario,
            dt_atualizacao,
            nm_usuario_nrec,
            dt_atualizacao_nrec,
            nr_seq_detail,
            ds_location,
            cd_department,
            ds_department,
            cd_status)
        values (
            nextval('pfcs_detail_bed_seq'),
            nm_user_p,
            clock_timestamp(),
            nm_user_p,
            clock_timestamp(),
            pfcs_panel_detail_seq_w,
            cur_patient_w[i].ds_location,
            cur_department_w[i].cd_unit,
            cur_patient_w[i].ds_requested_unit,
            cur_patient_w[i].cd_bed_status);

        insert into pfcs_detail_patient(
            nr_sequencia,
            nm_usuario,
            dt_atualizacao,
            nm_usuario_nrec,
            dt_atualizacao_nrec,
            nr_seq_detail,
            nr_encounter_varchar,
            dt_entrance,
            id_patient,
            nm_patient,
            ds_gender,
            dt_birthdate,
            ds_age_range,
            ds_symptoms,
            dt_request,
            ds_physician,
            ds_special_request,
            ds_dnr_status,
            ds_care_status,
            ds_checklist,
            ie_over_threshold,
            qt_edi_score,
            ie_freq_flyer,
            ds_readmission_risk,
            ds_readm_risk_contrb,
            ds_rec_pat_adm_data,
            ds_rec_pat_comorbd,
            ds_rec_pat_reasons,
            ds_edi_vitals_warn,
            ds_edi_contrb,
            vl_los_remaining)
        values (
            nextval('pfcs_detail_patient_seq'),
            nm_user_p,
            clock_timestamp(),
            nm_user_p,
            clock_timestamp(),
            pfcs_panel_detail_seq_w,
            cur_patient_w[i].nr_encounter,
            cur_patient_w[i].dt_period_start,
            cur_patient_w[i].id_patient,
            cur_patient_w[i].nm_patient,
            cur_patient_w[i].ds_gender,
            cur_patient_w[i].dt_birthdate,
            cur_patient_w[i].qt_patient_age,
            cur_patient_w[i].ds_problem,
            cur_patient_w[i].dt_request,
            cur_patient_w[i].nm_physician,
            cur_patient_w[i].ds_special_requests,
            cur_patient_w[i].code_status,
            cur_patient_w[i].ds_care_status,
            cur_patient_w[i].ds_checklist,
            ie_over_threshold_w,
            cur_patient_w[i].qt_trs,
            cur_patient_w[i].ie_frequent_flyer,
            cur_patient_w[i].ds_readmission_risk,
            cur_patient_w[i].ds_readm_risk_contrb,
            cur_patient_w[i].ds_recur_pat_adm_data,
            cur_patient_w[i].ds_recur_pat_comorbd,
            cur_patient_w[i].ds_recur_pat_reasons,
            cur_patient_w[i].ds_edi_vitals_warn,
            cur_patient_w[i].ds_edi_contrb,
            cur_patient_w[i].vl_los_remaining);
    end loop;

     := pfcs_pck.pfcs_generate_results(
        ds_reference_value_p => cur_department_w[i].ds_unit, cd_reference_value_p => cur_department_w[i].cd_unit, cd_reference_aux_p => cur_department_w[i].cd_unit_classification, vl_indicator_p => qt_transfer_orders_w, nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ICU_TRANSFER_ORDERS, nr_seq_operational_level_p => cd_establishment_p, nm_usuario_p => nm_user_p, nr_seq_panel_p => pfcs_panel_seq_w);

     := pfcs_pck.pfcs_generate_results(
        ds_reference_value_p => cur_department_w[i].ds_unit, cd_reference_value_p => cur_department_w[i].cd_unit, cd_reference_aux_p => cur_department_w[i].cd_unit_classification, vl_indicator_p => qt_delays_w, nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ICU_DELAYS, nr_seq_operational_level_p => cd_establishment_p, nm_usuario_p => nm_user_p, nr_seq_panel_p => pfcs_panel_seq_w);
end loop;

CALL pfcs_pck.pfcs_update_detail(
        nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ICU_TRANSFER_ORDERS,
        nr_seq_panel_p => pfcs_panel_seq_w,
        nr_seq_operational_level_p => cd_establishment_p,
        nm_usuario_p => nm_user_p);
CALL pfcs_pck.pfcs_activate_records(
        nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ICU_TRANSFER_ORDERS,
        nr_seq_operational_level_p => cd_establishment_p,
        nm_usuario_p => nm_user_p);
CALL pfcs_pck.pfcs_activate_records(
        nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ICU_DELAYS,
        nr_seq_operational_level_p => cd_establishment_p,
        nm_usuario_p => nm_user_p);

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_hah_requests ( cd_establishment_p bigint, nm_user_p text) FROM PUBLIC;

