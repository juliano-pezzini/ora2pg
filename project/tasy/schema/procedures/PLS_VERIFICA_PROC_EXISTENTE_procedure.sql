-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_verifica_proc_existente ( nm_usuario_p text, cd_estabelcimento_p bigint, nr_Seq_conta_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, dt_procedimento_p timestamp, dt_hora_inicio_p timestamp, dt_hora_fim_p timestamp, ie_permite_inserir_p INOUT text) AS $body$
DECLARE


qt_procedimento_existente_w	bigint:=0;
qt_diferenca_w			bigint:=0;
qt_existe_w			bigint:=0;
ie_existe_proc_w		varchar(1):= 'N';
ie_permite_inserir_w		varchar(1):= 'S';
dt_procedimento_w		timestamp;
dt_hora_inicio_w		timestamp;
dt_hora_fim_w			timestamp;

--	É TRATADO PARA VERIRICAR SE EXISTE UM PROCEDIMENTO COM O  MESMO CODIGO, MESMA  ORIGEM E MESMA QUANTIDADE.
--	CASO EXISTA UM PROCEDIMENTO COM ESTAS MESMAS CARACTERISTICAS, ENTAO NAO INSERE NA TABELA.
--	NÃO FOI TRATADO PARA QUE O SISTEMA VERIFIQUE SE HÁ PROCEDIMENTOS REPETIDOS NOS FILTROS, PARA LEVAR EM CONSIDERAÇÃO A QUANTIDADE PROC.
--	EX:
--	-FILTRO 1:  SE FOR INFORMADO NO FILTRO UM PROCEDIMENTO 10101012  COM ORIGEM CBHPM COM QTDE IGUAL A 1 ;
--	-FILTRO 2: SE FOR INFORMADO NO FILTRO UM PROCEDIMENTO 10101012  COM ORIGEM CBHPM COM QTDE IGUAL A 1 ;
--	- SE NÃO EXISTIR REGISTRO, IRÁ INSERIR UM REGISTRO SOMENTE DE 10101012.
BEGIN
dt_procedimento_w := trunc(clock_timestamp());
if (dt_procedimento_p IS NOT NULL AND dt_procedimento_p::text <> '') then
	dt_procedimento_w	:= trunc(dt_procedimento_p);
end if;

dt_hora_inicio_w := clock_timestamp();
if (dt_hora_inicio_p IS NOT NULL AND dt_hora_inicio_p::text <> '') then
	dt_hora_inicio_w	:= to_date(dt_hora_inicio_p,'hh24:mi:ss');
end if;

dt_hora_fim_w := clock_timestamp();
if (dt_hora_fim_p IS NOT NULL AND dt_hora_fim_p::text <> '') then
	dt_hora_fim_w		:= to_date(dt_hora_fim_p,'hh24:mi:ss');
end if;

if ( coalesce(cd_procedimento_p,0) > 0) and (coalesce(ie_origem_proced_p,0) > 0 ) then
	select	count(1)
	into STRICT	qt_existe_w
	from 	pls_conta_proc 	a,
		pls_conta 	b
	where	a.nr_seq_conta 		= b.nr_sequencia
	and	b.nr_sequencia 		= nr_Seq_conta_p
	and 	a.cd_procedimento 	= cd_procedimento_p
	and	a.ie_origem_proced 	= ie_origem_proced_p
	and	a.qt_procedimento	= coalesce(qt_procedimento_p,1)
	and	coalesce(trunc(a.dt_procedimento),clock_timestamp())			= dt_procedimento_w
	and	coalesce(to_date(a.dt_inicio_proc,'hh24:mi:ss'),clock_timestamp()) 	= dt_hora_inicio_w
	and	coalesce(to_date(a.dt_fim_proc,'hh24:mi:ss'),clock_timestamp()) 	= dt_hora_fim_w;

	if (qt_existe_w > 0) then
		ie_permite_inserir_w := 'N';
	end if;
end if;

ie_permite_inserir_p	:=  ie_permite_inserir_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_verifica_proc_existente ( nm_usuario_p text, cd_estabelcimento_p bigint, nr_Seq_conta_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, dt_procedimento_p timestamp, dt_hora_inicio_p timestamp, dt_hora_fim_p timestamp, ie_permite_inserir_p INOUT text) FROM PUBLIC;

