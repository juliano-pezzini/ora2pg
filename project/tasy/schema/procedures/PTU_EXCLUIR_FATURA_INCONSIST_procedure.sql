-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_excluir_fatura_inconsist ( nr_seq_fatura_p ptu_fatura.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_protocolo_w		pls_conta.nr_seq_protocolo%type;
cd_estabelecimento_w		pls_conta.cd_estabelecimento%type;
nr_titulo_w			ptu_fatura.nr_titulo%type;
nr_titulo_ndc_w			ptu_fatura.nr_titulo_ndc%type;
nr_fatura_w			ptu_fatura.nr_fatura%type;
nr_nota_credito_debito_w	ptu_fatura.nr_nota_credito_debito%type;
ie_situacao_w			titulo_pagar.ie_situacao%type;

-- LOG
ds_log_w		ptu_fatura_log.ds_log%type; -- 4000
ds_observacao_w		ptu_fatura_log.ds_observacao%type; -- 4000
nm_machine_w		varchar(255);
tb_seq_nota_servico_w	dbms_sql.number_table;
	
-- Abrindo cada cobranca da fatura	
C01 CURSOR(nr_seq_fatura_pc		ptu_fatura.nr_sequencia%type) FOR
        SELECT  nr_sequencia nr_seq_nota_cobr
        from    ptu_nota_cobranca
        where   nr_seq_fatura = nr_seq_fatura_pc;

-- Abrindo cada hospitalar da fatura
C02 CURSOR(nr_seq_cobranca_pc		ptu_nota_cobranca.nr_sequencia%type) FOR
        SELECT  nr_sequencia nr_seq_hospital
        from    ptu_nota_hospitalar
        where   nr_seq_nota_cobr = nr_seq_cobranca_pc;

-- Abrindo cada cobranca da fatura	
C03 CURSOR(nr_seq_fatura_pc		ptu_fatura.nr_sequencia%type) FOR
        SELECT  nr_sequencia nr_seq_nota_cobr_rrs
        from    ptu_nota_cobranca_rrs
        where   nr_seq_fatura = nr_seq_fatura_pc;

-- Abrindo cada nota servico da nota cobranca
c04 CURSOR(nr_seq_nota_cobranca_pc  	ptu_nota_cobranca.nr_sequencia%type) FOR
	SELECT	pns.nr_sequencia
	from	ptu_nota_servico	pns
	where	pns.nr_seq_nota_cobr	= nr_seq_nota_cobranca_pc;

BEGIN
if (nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') then
	-- Obter os titulos gerados para a fatura
	select	max(nr_titulo),
		max(nr_titulo_ndc),
		max(nr_fatura),
		max(nr_nota_credito_debito)
	into STRICT	nr_titulo_w,
		nr_titulo_ndc_w,
		nr_fatura_w,
		nr_nota_credito_debito_w
	from	ptu_fatura
	where	nr_sequencia = nr_seq_fatura_p;
	
	-- Gravar log de titulo vinculado a fatura
	if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') or (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
		-- Maquina do usuario logado
		begin
		select	machine
		into STRICT	nm_machine_w
		from	v$session
		where	audsid = userenv('sessionid');
		exception
			when others then
			nm_machine_w	:= ' ';
		end;
		
		-- Informacoes sobre a fatura / titulo
		ds_log_w :=		'Fatura Excluida com Titulos Vinculados!' || chr(13) ||
					'Seq Fatura: '|| nr_seq_fatura_p || chr(13) ||
					'Doc1: '|| nr_fatura_w || chr(13) ||
					'Doc2: '|| nr_nota_credito_debito_w || chr(13) ||
					'Titulo: '|| nr_titulo_w || chr(13) ||
					'Titulo NDR: '|| nr_titulo_ndc_w;
		
		-- Informacoes sobre usuario logado
		ds_observacao_w :=	'Usuario: '|| nm_usuario_p || chr(13) ||
					'Data: '|| clock_timestamp() || chr(13) ||
					'Maquina: '|| nm_machine_w;				
		
		-- Gravar log
		CALL ptu_gerar_fatura_log( nr_seq_fatura_p, ds_log_w, ds_observacao_w, 'N', nm_usuario_p);
		
		-- Cancelar titulo fatura
		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
			select	max(ie_situacao)
			into STRICT	ie_situacao_w
			from	titulo_pagar
			where	nr_titulo	= nr_titulo_w;
			
			if (ie_situacao_w = 'A') then
				CALL cancelar_titulo_pagar( nr_titulo_w, nm_usuario_p, clock_timestamp());
				
				update	titulo_pagar
				set	ds_observacao_titulo	= substr('Fatura de intercambio inconsistente.' || chr(13) || ds_observacao_titulo,1,4000)
				where	nr_titulo		= nr_titulo_w;
			end if;
		end if;
		
		-- Cancelar titulo fatura NDR
		if (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
			select	max(ie_situacao)
			into STRICT	ie_situacao_w
			from	titulo_pagar
			where	nr_titulo	= nr_titulo_ndc_w;

			if (ie_situacao_w = 'A') then
				CALL cancelar_titulo_pagar( nr_titulo_ndc_w, nm_usuario_p, clock_timestamp());
				
				update	titulo_pagar
				set	ds_observacao_titulo	= substr('Fatura de intercambio inconsistente.' || chr(13) || ds_observacao_titulo,1,4000)
				where	nr_titulo		= nr_titulo_ndc_w;
			end if;
		end if;
	end if;
	
	-- Uma Fatura A500 tera apenas Um protocolo
	select	max(nr_seq_protocolo),
		max(cd_estabelecimento)
	into STRICT	nr_seq_protocolo_w,
		cd_estabelecimento_w
	from	pls_conta
	where	nr_seq_fatura = nr_seq_fatura_p;
	
	-- Excluindo protocolo da fatura
	if (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') and (cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '') then
		CALL pls_excluir_protocolo_imp( nr_seq_protocolo_w, nm_usuario_p, cd_estabelecimento_w);
	end if;	

	-- Excluindo inconsistencia da fatura
	delete	FROM ptu_fatura_consistencia
	where	nr_seq_fatura	= nr_seq_fatura_p;

	-- Excluindo historico da fatura
	delete	FROM ptu_fatura_historico
	where	nr_seq_fatura	= nr_seq_fatura_p;
	
	-- Excluindo Historico de controle de importacao
	delete	FROM ptu_processo_fatura
	where	nr_seq_fatura	= nr_seq_fatura_p;
	
	-- Abrindo cada cobranca da fatura
	for r_C01_w in C01( nr_seq_fatura_p ) loop
	
		-- Excluindo servico equipe da nota servico
		open c04(r_C01_w.nr_seq_nota_cobr);
		loop
			fetch c04 bulk collect into tb_seq_nota_servico_w limit pls_util_pck.qt_registro_transacao_w;
			exit when tb_seq_nota_servico_w.count = 0;
			
			forall i in tb_seq_nota_servico_w.first..tb_seq_nota_servico_w.last
				delete	FROM ptu_nota_servico_equipe
				where	nr_seq_nota_servico	= tb_seq_nota_servico_w(i);
			commit;
			
			-- limpa o vetor
			tb_seq_nota_servico_w.delete;
		end loop;
		
		if (c04%isopen) then

			close c04;
		end if;
		
		-- Excluindo servico da fatura
		delete	FROM ptu_nota_servico
		where	nr_seq_nota_cobr = r_C01_w.nr_seq_nota_cobr;

		-- Excluindo complemento da fatura
		delete	FROM ptu_nota_complemento
		where	nr_seq_nota_cobr = r_C01_w.nr_seq_nota_cobr;

		-- Excluindo nota fiscal imp da fatura
		delete	FROM ptu_nota_fiscal
		where	nr_seq_nota_cobr = r_C01_w.nr_seq_nota_cobr;
		
		-- Excluindo anexo da cobranca
		delete	FROM ptu_nota_cobranca_anexo
		where	nr_seq_nota_cobr = r_C01_w.nr_seq_nota_cobr;

		-- Abrindo cada hospitalar da fatura
		for r_C02_w in C02( r_C01_w.nr_seq_nota_cobr ) loop
			delete	FROM ptu_nota_hosp_compl
			where	nr_seq_nota_hosp = r_C02_w.nr_seq_hospital;
		end loop;
		
		-- Excluindo hospitalar da fatura
		delete	FROM ptu_nota_hospitalar
		where	nr_seq_nota_cobr = r_C01_w.nr_seq_nota_cobr;
	end loop;
	
	-- Abrindo cada cobranca reembolso da fatura
	for r_C03_w in C03( nr_seq_fatura_p ) loop
		delete	FROM ptu_nota_servico_rrs
		where	nr_seq_nota_cobr_rrs	= r_C03_w.nr_seq_nota_cobr_rrs;
	end loop;
	
	-- Excluindo cobranca de reembolso da fatura
	delete	FROM ptu_nota_cobranca_rrs
	where	nr_seq_fatura = nr_seq_fatura_p;
	
	-- Excluindo cobranca da fatura
	delete	FROM ptu_nota_cobranca
	where	nr_seq_fatura = nr_seq_fatura_p;

	-- Excluindo corpo da fatura
	delete	FROM ptu_fatura_corpo
	where 	nr_seq_fatura = nr_seq_fatura_p;
	
	-- Excluindo anexo da fatura
	delete	FROM ptu_fatura_anexo
	where 	nr_seq_fatura = nr_seq_fatura_p;

	-- Excluindo cedetnte da fatura
	delete	FROM ptu_fatura_cedente
	where	nr_seq_fatura = nr_seq_fatura_p;
	
	-- Excluindo boleto da fatura
	delete	FROM ptu_fatura_boleto
	where	nr_seq_fatura = nr_seq_fatura_p;
	
	update 	pls_recebimento_ptu pr
	set	pr.nr_seq_fatura  = NULL,
		pr.ie_status = 'P' -- Pendente
	where	pr.nr_seq_fatura = nr_seq_fatura_p;
	
	-- Excluindo fatura da fatura
	delete	FROM ptu_fatura
	where	nr_sequencia = nr_seq_fatura_p;

	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_excluir_fatura_inconsist ( nr_seq_fatura_p ptu_fatura.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

