-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE integrar_sinais_vitais_resp_bb (nr_seq_resultado_p ATENDIMENTO_MONIT_RESP.nr_sequencia%type, nr_atendimento_p ATENDIMENTO_MONIT_RESP.nr_atendimento%type, dt_monitorizacao_p ATENDIMENTO_MONIT_RESP.dt_monitorizacao%type, qt_fio2_p ATENDIMENTO_MONIT_RESP.qt_fio2%type, qt_peep_p ATENDIMENTO_MONIT_RESP.qt_peep%type, qt_saturacao_o2_p ATENDIMENTO_MONIT_RESP.qt_saturacao_o2%type, qt_fluxo_oxigenio_p ATENDIMENTO_MONIT_RESP.qt_fluxo_oxigenio%type, qt_freq_resp_p ATENDIMENTO_MONIT_RESP.qt_freq_resp%type, qt_vc_prog_p ATENDIMENTO_MONIT_RESP.qt_vc_prog%type) AS $body$
DECLARE


    json_aux_bb philips_json;
    envio_integracao_bb text;
    retorno_integracao_bb text;

    json_respFlowsheetCol_result philips_json_list;
    json_respFlowsheetCell_result philips_json;


BEGIN

    json_aux_bb := philips_json();
    json_aux_bb.put('typeID', 'RESPFS');
    json_aux_bb.put('messageDateTime', TO_CHAR((CURRENT_TIMESTAMP AT TIME ZONE 'UTC'), 'YYYY-MM-DD HH24:MI:SS.SSSSS'));
    json_aux_bb.put('objectID', 'e031add95b244818a4d8c0cf377dfdd0');
    json_aux_bb.put('name', 'Settings');
    json_aux_bb.put('objectIDColumn', 'FC' || LPAD('E' || nr_seq_resultado_p, 30, 0));
    json_aux_bb.put('patientHealthSystemStayID', LPAD(COALESCE(TO_CHAR(nr_atendimento_p), ''), 32, 0));
    json_aux_bb.put('columnDate', COALESCE(TO_CHAR(f_extract_utc_bb(dt_monitorizacao_p), 'YYYY-MM-DD"T"HH24:MI'), ''));
    json_aux_bb.put('columnDateGMTOffset', '0');

    json_respFlowsheetCol_result := philips_json_list();

    IF (qt_fio2_p IS NOT NULL AND qt_fio2_p::text <> '') and (qt_fio2_p > 0) THEN
        json_RespFlowsheetCell_result := philips_json();

        json_RespFlowsheetCell_result.put('objectIDCell', 'C1' || LPAD('E' || nr_seq_resultado_p, 30, 0));
        json_RespFlowsheetCell_result.put('cellLabelID', COALESCE(TO_CHAR('74656a0e73084aca9dbc23389ae8ec6a'), ''));
        json_RespFlowsheetCell_result.put('cellTypeCatID', 'e031add95b244818a4d8c0cf377dfdd0');
        json_RespFlowsheetCell_result.put('cellNumeric', COALESCE(TO_CHAR(qt_fio2_p), ''));
        json_RespFlowsheetCell_result.put('cellText', COALESCE(TO_CHAR(qt_fio2_p), ''));
        json_RespFlowsheetCell_result.put('resultStatusID', '39d8f36dc43045c8b04a0a06f20b6351');

        json_respFlowsheetCol_result.append(json_RespFlowsheetCell_result.to_json_value());

    END IF;

    IF (qt_peep_p IS NOT NULL AND qt_peep_p::text <> '') and (qt_peep_p > 0) THEN
        json_RespFlowsheetCell_result := philips_json();

        json_RespFlowsheetCell_result.put('objectIDCell', 'C2' || LPAD('E' || nr_seq_resultado_p, 30, 0));
        json_RespFlowsheetCell_result.put('cellLabelID', COALESCE(TO_CHAR('033434a10edc4e5c804fd3534495eb56'), ''));
        json_RespFlowsheetCell_result.put('cellTypeCatID', 'e031add95b244818a4d8c0cf377dfdd0');
        json_RespFlowsheetCell_result.put('cellNumeric', COALESCE(TO_CHAR(qt_peep_p), ''));
        json_RespFlowsheetCell_result.put('cellText', COALESCE(TO_CHAR(qt_peep_p), ''));
        json_RespFlowsheetCell_result.put('resultStatusID', '39d8f36dc43045c8b04a0a06f20b6351');

        json_respFlowsheetCol_result.append(json_RespFlowsheetCell_result.to_json_value());

    END IF;

    IF (qt_saturacao_o2_p IS NOT NULL AND qt_saturacao_o2_p::text <> '') and (qt_saturacao_o2_p > 0) THEN
        json_RespFlowsheetCell_result := philips_json();

        json_RespFlowsheetCell_result.put('objectIDCell', 'C3' || LPAD('E' || nr_seq_resultado_p, 30, 0));
        json_RespFlowsheetCell_result.put('cellLabelID', COALESCE(TO_CHAR('90beb6692a004591838e7bc7fac3028f'), ''));
        json_RespFlowsheetCell_result.put('cellTypeCatID', 'e031add95b244818a4d8c0cf377dfdd0');
        json_RespFlowsheetCell_result.put('cellNumeric', COALESCE(TO_CHAR(qt_saturacao_o2_p), ''));
        json_RespFlowsheetCell_result.put('cellText', COALESCE(TO_CHAR(qt_saturacao_o2_p), ''));
        json_RespFlowsheetCell_result.put('resultStatusID', '39d8f36dc43045c8b04a0a06f20b6351');

        json_respFlowsheetCol_result.append(json_RespFlowsheetCell_result.to_json_value());

    END IF;

    IF (qt_fluxo_oxigenio_p IS NOT NULL AND qt_fluxo_oxigenio_p::text <> '') and (qt_fluxo_oxigenio_p > 0) THEN
        json_RespFlowsheetCell_result := philips_json();

        json_RespFlowsheetCell_result.put('objectIDCell', 'C4' || LPAD('E' || nr_seq_resultado_p, 30, 0));
        json_RespFlowsheetCell_result.put('cellLabelID', COALESCE(TO_CHAR('667b94436bd941a8b81e05609223aeba'), ''));
        json_RespFlowsheetCell_result.put('cellTypeCatID', 'e031add95b244818a4d8c0cf377dfdd0');
        json_RespFlowsheetCell_result.put('cellNumeric', COALESCE(TO_CHAR(qt_fluxo_oxigenio_p), ''));
        json_RespFlowsheetCell_result.put('cellText', COALESCE(TO_CHAR(qt_fluxo_oxigenio_p), ''));
        json_RespFlowsheetCell_result.put('resultStatusID', '39d8f36dc43045c8b04a0a06f20b6351');

        json_respFlowsheetCol_result.append(json_RespFlowsheetCell_result.to_json_value());

    END IF;

    IF (qt_freq_resp_p IS NOT NULL AND qt_freq_resp_p::text <> '') and (qt_freq_resp_p > 0) THEN
        json_RespFlowsheetCell_result := philips_json();

        json_RespFlowsheetCell_result.put('objectIDCell', 'C5' || LPAD('E' || nr_seq_resultado_p, 30, 0));
        json_RespFlowsheetCell_result.put('cellLabelID', COALESCE(TO_CHAR('e45ca28fa1d7423fa43cc0319c624104'), ''));
        json_RespFlowsheetCell_result.put('cellTypeCatID', 'e031add95b244818a4d8c0cf377dfdd0');
        json_RespFlowsheetCell_result.put('cellNumeric', COALESCE(TO_CHAR(qt_freq_resp_p), ''));
        json_RespFlowsheetCell_result.put('cellText', COALESCE(TO_CHAR(qt_freq_resp_p), ''));
        json_RespFlowsheetCell_result.put('resultStatusID', '39d8f36dc43045c8b04a0a06f20b6351');

        json_respFlowsheetCol_result.append(json_RespFlowsheetCell_result.to_json_value());

    END IF;

    IF (qt_vc_prog_p IS NOT NULL AND qt_vc_prog_p::text <> '') and (qt_vc_prog_p > 0) THEN
        json_RespFlowsheetCell_result := philips_json();

        json_RespFlowsheetCell_result.put('objectIDCell', 'C6' || LPAD('E' || nr_seq_resultado_p, 30, 0));
        json_RespFlowsheetCell_result.put('cellLabelID', COALESCE(TO_CHAR('eb519365a955470198ce67271d949232'), ''));
        json_RespFlowsheetCell_result.put('cellTypeCatID', 'e031add95b244818a4d8c0cf377dfdd0');
        json_RespFlowsheetCell_result.put('cellNumeric', COALESCE(TO_CHAR(qt_vc_prog_p), ''));
        json_RespFlowsheetCell_result.put('cellText', COALESCE(TO_CHAR(qt_vc_prog_p), ''));
        json_RespFlowsheetCell_result.put('resultStatusID', '39d8f36dc43045c8b04a0a06f20b6351');

        json_respFlowsheetCol_result.append(json_RespFlowsheetCell_result.to_json_value());

    END IF;

    json_aux_bb.put('results', json_respFlowsheetCol_result);

    dbms_lob.createtemporary(envio_integracao_bb, TRUE);
    json_aux_bb.(envio_integracao_bb);

    SELECT BIFROST.SEND_INTEGRATION_CONTENT('Blackboard_Respiratory_Vitals_Aperiodic',envio_integracao_bb,wheb_usuario_pck.get_nm_usuario) into STRICT retorno_integracao_bb;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE integrar_sinais_vitais_resp_bb (nr_seq_resultado_p ATENDIMENTO_MONIT_RESP.nr_sequencia%type, nr_atendimento_p ATENDIMENTO_MONIT_RESP.nr_atendimento%type, dt_monitorizacao_p ATENDIMENTO_MONIT_RESP.dt_monitorizacao%type, qt_fio2_p ATENDIMENTO_MONIT_RESP.qt_fio2%type, qt_peep_p ATENDIMENTO_MONIT_RESP.qt_peep%type, qt_saturacao_o2_p ATENDIMENTO_MONIT_RESP.qt_saturacao_o2%type, qt_fluxo_oxigenio_p ATENDIMENTO_MONIT_RESP.qt_fluxo_oxigenio%type, qt_freq_resp_p ATENDIMENTO_MONIT_RESP.qt_freq_resp%type, qt_vc_prog_p ATENDIMENTO_MONIT_RESP.qt_vc_prog%type) FROM PUBLIC;

