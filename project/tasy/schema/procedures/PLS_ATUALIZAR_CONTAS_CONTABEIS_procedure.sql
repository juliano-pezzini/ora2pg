-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE lote_eventos_c AS (	nr_sequencia		bigint);
CREATE TYPE lotes_pagamentos_c AS (	nr_sequencia		bigint,
					ie_pagamento_novo	varchar(1));
CREATE TYPE contas_pagamento_c AS (	nr_sequencia		bigint);


CREATE OR REPLACE PROCEDURE pls_atualizar_contas_contabeis ( dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, cd_tipo_lote_contabil_p bigint, ie_geracao_p INOUT text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Agrupar a chamada de rotinas que atualizam as informacoes contabeis das
funcionalidades do plano de saude.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atencao:
	CD_TIPO_LOTE_CONTABIL_P
		21 = OPS Receitas - Mensalidades
		22 = OPS Despesas - Contas Medicas
		23 = OPS Despesas - Reembolso
		27 = OPS Despesas - Ressarcimento
		32 = OPS - Provisoes Tecnicas - PPSC
		33 = OPS Despesas - Contas Intercambio
		38 = OPS - Discussao de glosas
		40 = OPS Despesas-Provisao de producao medica
		41 = OPS Desp - Pagamento de producao medica
		42 = OPS - Provisao de coparticipacao
		43 = OPS - Provisao de Faturamento
		44 = OPS - Receitas com Faturamento
		46 = OPS - Cancelamento de Mensalidade
		47 = OPS - Cancelamento de Faturamento
		57 = OPS - Aviso de cobranca
-------------------------------------------------------------------------------------------------------------------
Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
hr_atualizacao_w		varchar(15);
ie_esquema_contabil_w		varchar(1);
ie_pagamento_novo_w		varchar(1);
ie_lote_contabil_gerado_w	varchar(1)	:= 'N';
ie_tipo_movimento_w		varchar(2);
nr_seq_protocolo_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_conta_faturamento_w	bigint;
nr_seq_movimento_w		bigint;
nr_seq_lote_ppsc_w		bigint;
nr_seq_fatura_w			bigint;
qt_segundos_geracao_w		bigint;
qt_horas_att_w			bigint;
qt_minutos_att_w		bigint;
qt_segundos_att_w		bigint;
nr_seq_lote_w			bigint;
qt_lote_gerado_mes_w		bigint;
nr_seq_atualizacao_w		bigint;
qt_conta_proc_w			bigint;
qt_conta_mat_w			bigint;
qt_mov_ppsc_w			bigint;
qt_mov_ppsc_item_w		bigint;
qt_movimento_w			bigint;
qt_fatura_proc_w		bigint;
qt_fatura_mat_w			bigint;
nr_seq_lote_cancel_w		bigint;
nr_seq_lote_evento_w		bigint;
nr_seq_lote_pagamento_w		bigint;
qt_mov_tributos_w		bigint;
qt_mov_evento_w			bigint;
nr_seq_lote_aviso_w		bigint;
nr_vetor_w			bigint	:= 0;
w				bigint	:= 0;
nr_contador_w			bigint      := 0;
qt_mov_mens_prov_w		bigint	:= 0;
qt_mov_mens_rec_w		bigint	:= 0;
dt_referencia_month_w		timestamp;
dt_inicio_atualizacao_w		timestamp;
dt_fim_atualizacao_w		timestamp;
dt_ref_inicial_w		timestamp;
dt_ref_final_w			timestamp;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
nr_seq_lote_disc_w		pls_lote_discussao.nr_sequencia%type;
qt_prest_pgto_w			bigint;
qt_outro_w			bigint;
cd_empresa_w			estabelecimento.cd_empresa%type;
ie_status_prov_pagto_w		pls_parametro_contabil.ie_status_prov_pagto%type;
ie_lote_ajuste_prod_w		pls_parametro_contabil.ie_status_prov_pagto%type;
ie_data_lote_desp_conta_w	pls_parametro_contabil.ie_data_lote_desp_conta%type;
ie_data_lote_prod_med_w		pls_parametro_contabil.ie_data_lote_prod_med%type;
ie_data_rec_faturamento_w	pls_parametro_contabil.ie_data_rec_faturamento%type;
ie_estorno_corresp_pre_w	pls_parametro_contabil.ie_estorno_corresp_pre%type;
ie_lote_taxa_adm_w		pls_parametro_contabil.ie_lote_taxa_adm%type;
nr_seq_arquivo_w		ptu_aviso_arquivo.nr_sequencia%type;
nr_seq_lote_faturamento_w	pls_lote_faturamento.nr_sequencia%type;
nr_seq_ptu_fatura_w		ptu_fatura.nr_sequencia%type;
nr_seq_pos_taxa_contab_w	pls_conta_pos_taxa_contab.nr_sequencia%type;
nr_seq_competencia_w		pls_processo_competencia.nr_sequencia%type;
nr_seq_processo_w		pls_processo.nr_sequencia%type;
nr_seq_mens_seg_w		pls_mensalidade_segurado.nr_sequencia%type;
ie_performance_contab_w		pls_visible_false.ie_performance_contab%type;

c_lote_ppsc CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_ppsc_lote	a
	where	a.dt_lote between dt_ref_inicial_w and dt_ref_final_w;

c_contas_copartic CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_conta		a,
		pls_protocolo_conta	b
	where	a.nr_seq_protocolo	= b.nr_sequencia
	and	coalesce(b.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(b.ie_tipo_protocolo,'C')	in ('C','I','R','F')
	and	b.ie_situacao not in ('I','RE','A')
	and	exists (	SELECT 1
			from	pls_conta_coparticipacao	c,
				pls_conta_copartic_contab	d
			where	c.nr_sequencia	= d.nr_seq_conta_copartic
			and	a.nr_sequencia	= c.nr_seq_conta
			and	d.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w);

c_contas_pag_provisao CURSOR FOR
	SELECT	a.nr_sequencia,
		b.ie_tipo_protocolo
	from	pls_conta		a,
		pls_protocolo_conta	b
	where	a.nr_seq_protocolo	= b.nr_sequencia
	and	b.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(b.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(b.ie_tipo_protocolo,'C') in ('C', 'F')
	and	coalesce(b.nr_lote_contabil_prov,0) = 0
	and	b.ie_situacao not in ('I','RE','A')
	and	not exists (SELECT 1
				from	ptu_fatura		c
				where	c.nr_sequencia	= a.nr_seq_fatura)
	
union

	select	a.nr_sequencia,
		b.ie_tipo_protocolo
	from	pls_conta		a,
		pls_protocolo_conta	b
	where	a.nr_seq_protocolo	= b.nr_sequencia
	and	coalesce(b.ie_tipo_protocolo,'C') in ('C', 'F')
	and	coalesce(b.nr_lote_contabil_prov,0) = 0
	and	coalesce(b.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	b.ie_situacao not in ('I','RE','A')
	and	a.nr_seq_fatura in (select c.nr_sequencia
					from	ptu_fatura		c
					where	c.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w);
					
type 			fetch_array_prov_prod is table of c_contas_pag_provisao%rowtype;
s_array_prov_prod	fetch_array_prov_prod;
j			integer := 1;
type vetor_prov_prod is table of fetch_array_prov_prod index by integer;
vetor_c_prov_prod_w	vetor_prov_prod;

c_contas_intercambio CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_protocolo_conta	a
	where	a.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w
	and	a.ie_status in ('2','3','4','5','6')
	and	a.ie_situacao not in ('I','RE','A')
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(a.ie_tipo_protocolo,'C')	= 'I'
	and	not exists (SELECT 1
				from	pls_conta		b,
					ptu_fatura		c
				where	c.nr_sequencia	= b.nr_seq_fatura
				and	a.nr_sequencia	= b.nr_seq_protocolo)
	
union

	select	a.nr_sequencia
	from	pls_protocolo_conta	a
	where	a.ie_status in ('2','3','4','5','6')
	and	a.ie_situacao not in ('I','RE','A')
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(a.ie_tipo_protocolo,'C')	= 'I'
	and	a.nr_sequencia in (select	b.nr_seq_protocolo
					from	pls_conta		b,
						ptu_fatura		c
					where	c.nr_sequencia	= b.nr_seq_fatura
					and	c.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w);

c_contas_prov_fat CURSOR FOR
	SELECT	b.nr_sequencia
	from	pls_conta		b,
		pls_protocolo_conta	a
	where	a.nr_sequencia		= b.nr_seq_protocolo
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	exists (SELECT	1
			from	pls_conta_pos_estabelecido x,
				pls_conta_pos_estab_contab y
			where	b.nr_sequencia		= x.nr_seq_conta
			and	x.nr_sequencia		= y.nr_seq_conta_pos
			and	y.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w
			and	coalesce(y.nr_lote_contabil_prov,0) = 0)
	
union

	select	b.nr_sequencia
	from	pls_conta 		b,
		pls_protocolo_conta	a
	where	a.nr_sequencia 		= b.nr_seq_protocolo
	and	coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and	exists (select	1
			from	pls_conta_pos_estab_prev	z
			where	b.nr_sequencia		= z.nr_seq_conta
			and	z.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w
			and	coalesce(z.nr_lote_contabil_prov,0) = 0);	/* Trazer quando possuir informacao contabil na competencia mas o protocolo ser de outra */
c_mensalidades CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_lote,
		null nr_seq_mens_seg,
		'DR' ie_tipo_movimento
	from	pls_lote_mensalidade	a
	where	a.dt_mesano_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	
union

	SELECT	a.nr_sequencia nr_seq_lote,
		null nr_seq_mens_seg,
		'DC' ie_tipo_movimento
	from	pls_lote_mensalidade	a
	where	a.dt_contabilizacao between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	
union

	select	null nr_seq_lote,
		s.nr_sequencia nr_seq_mensalidade_seg,
		'P' ie_tipo_movimento
	from	pls_lote_mensalidade		l,
		pls_mensalidade			m,
		pls_mensalidade_segurado	s
	where	l.nr_sequencia	= m.nr_seq_lote
	and	m.nr_sequencia	= s.nr_seq_mensalidade
	and	l.dt_mesano_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	pkg_date_utils.start_of(s.dt_mesano_referencia, 'MONTH', 0) <> pkg_date_utils.start_of(l.dt_mesano_referencia, 'MONTH', 0)
	and	coalesce(l.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	ie_performance_contab_w = 'M'
	
union

	select	null nr_seq_lote,
		s.nr_sequencia nr_seq_mensalidade_seg,
		'P' ie_tipo_movimento
	from	pls_lote_mensalidade		l,
		pls_mensalidade			m,
		pls_mensalidade_segurado	s
	where	l.nr_sequencia	= m.nr_seq_lote
	and	m.nr_sequencia	= s.nr_seq_mensalidade
	and	l.dt_contabilizacao between dt_ref_inicial_w and dt_ref_final_w
	and	pkg_date_utils.start_of(s.dt_mesano_referencia, 'MONTH', 0) <> pkg_date_utils.start_of(l.dt_contabilizacao, 'MONTH', 0)
	and	coalesce(l.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	ie_performance_contab_w = 'M'
	
union all

	select	null nr_seq_lote,
		s.nr_sequencia nr_seq_mensalidade_seg,
		'R' ie_tipo_movimento
	from	pls_lote_mensalidade		l,
		pls_mensalidade			m,
		pls_mensalidade_segurado	s
	where	l.nr_sequencia	= m.nr_seq_lote	
	and	m.nr_sequencia	= s.nr_seq_mensalidade
	and	s.dt_mesano_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(l.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	pkg_date_utils.start_of(s.dt_mesano_referencia, 'MONTH', 0) <> pkg_date_utils.start_of(l.dt_mesano_referencia, 'MONTH', 0)
	and (coalesce(l.dt_contabilizacao::text, '') = ''
	or	pkg_date_utils.start_of(s.dt_mesano_referencia, 'MONTH', 0) <> pkg_date_utils.start_of(l.dt_contabilizacao, 'MONTH', 0))
	and	ie_performance_contab_w = 'M';

c_contas_reembolso CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_protocolo_conta	a
	where	a.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	a.ie_tipo_protocolo	= 'R';

c_contas_ressarcimento CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_processo_comp,
		null nr_seq_processo
	from	pls_processo_competencia	a
	where	a.dt_competencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	
union all

	SELECT	null nr_seq_processo_comp,
		a.nr_sequencia nr_seq_processo
	from	pls_processo	a
	where	a.dt_processo between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;

c_contas_faturamento CURSOR FOR
	SELECT	b.nr_sequencia
	from	pls_fatura		b,
		pls_lote_faturamento	a
	where	b.nr_seq_lote		= a.nr_sequencia
	and	coalesce(b.nr_seq_cancel_fat::text, '') = ''
	and	((b.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w
	and	ie_data_rec_faturamento_w('MC','TI'))
	or (b.dt_emissao between dt_ref_inicial_w and dt_ref_final_w
	and	ie_data_rec_faturamento_w = 'EF'))
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(b.nr_lote_contabil,0) = 0
	and	coalesce(b.ie_cancelamento, 'C') = 'C'
	
union

	SELECT	b.nr_sequencia
	from	pls_fatura		b,
		pls_lote_faturamento	a
	where	b.nr_seq_lote		= a.nr_sequencia
	and	coalesce(b.nr_seq_cancel_fat::text, '') = ''
	and (a.dt_mesano_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	ie_data_rec_faturamento_w = 'MC')
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(b.nr_lote_contabil,0) = 0
	and	coalesce(b.ie_cancelamento, 'C') = 'C'
	
union

	select	b.nr_sequencia
	from	pls_fatura		b,
		pls_lote_faturamento	a
	where	b.nr_seq_lote		= a.nr_sequencia
	and	coalesce(b.nr_seq_cancel_fat::text, '') = ''
	and	b.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(b.nr_lote_contabil,0) = 0
	and	coalesce(b.ie_cancelamento, 'C') = 'E';

c_cancelamento_mensalidade CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_cancel_rec_mens_lote	a
	where	a.dt_referencia between dt_ref_inicial_w and dt_ref_final_w;

c_cancelamento_faturamento CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_cancel_rec_fat_lote	a
	where	a.dt_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;

c_lote_evento CURSOR FOR
	SELECT	nr_sequencia
	from	pls_lote_evento
	where	dt_competencia between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

type vetor_lote_eventos_c is table of lote_eventos_c index by integer;
vetor_lote_eventos_w	vetor_lote_eventos_c;

c_lote_pagamento CURSOR FOR
	SELECT	p.nr_sequencia,
		'N' ie_pagamento_novo
	from	pls_lote_pagamento 	p
	where	(((ie_data_lote_prod_med_w = 'T')
	and	((p.dt_geracao_titulos between dt_ref_inicial_w and dt_ref_final_w)
	or (exists (SELECT	1
				from	pls_periodo_pagamento x
				where	x.nr_sequencia = p.nr_seq_periodo
				and	x.ie_recurso_proprio = 'S')
		and (p.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w))))
	or	(ie_data_lote_prod_med_w = 'C' AND p.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w))
	and	coalesce(p.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(p.nr_lote_contabil,0) = 0
	
union all

	select	p.nr_sequencia,
		'S' ie_pagamento_novo
	from	pls_pp_lote 	p
	where	((ie_data_lote_prod_med_w = 'T' AND p.dt_geracao_titulo between dt_ref_inicial_w and dt_ref_final_w)
	or	(ie_data_lote_prod_med_w = 'C' AND p.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w))
	and	coalesce(p.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;

type vetor_lotes_pagamentos_c is table of lotes_pagamentos_c index by integer;
vetor_lotes_pagamentos_w	vetor_lotes_pagamentos_c;

c_contas_pagamento CURSOR FOR
	SELECT	c.nr_sequencia nr_seq_conta
	from	pls_conta_medica_resumo	r,
		pls_conta		c
	where	c.nr_sequencia		= r.nr_seq_conta
	and	r.nr_seq_lote_pgto 	= nr_seq_lote_pagamento_w
	and	ie_pagamento_novo_w	= 'N'
	and	coalesce(c.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	group by c.nr_sequencia
	
union all

	SELECT	c.nr_sequencia nr_seq_conta
	from	pls_conta_medica_resumo	r,
		pls_conta		c
	where	c.nr_sequencia		= r.nr_seq_conta
	and	r.nr_seq_pp_lote	= nr_seq_lote_pagamento_w
	and	ie_pagamento_novo_w	= 'S'
	and	coalesce(c.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(r.nr_lote_contabil_pag,0) = 0
	group by c.nr_sequencia;

type vetor_contas_pagamento_c is table of contas_pagamento_c index by integer;
vetor_contas_pagamento_w	vetor_contas_pagamento_c;

type 		fetch_array is table of c_contas_pagamento%rowtype;
s_array 	fetch_array;
i		integer	:= 1;
type vetor is table of fetch_array index by integer;
vetor_contas_w	vetor;

c_rec_glosa_prot CURSOR FOR /* Nao e utilizado union all para nao trazer o mesmo protocolo mais de uma vez */
	SELECT	a.nr_sequencia
	from	pls_rec_glosa_protocolo a
	where	a.dt_apresentacao_lote between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p

union

        SELECT  a.nr_sequencia
        from    pls_rec_glosa_protocolo a
        where   a.dt_liberacao_pag between dt_ref_inicial_w and dt_ref_final_w
        and     coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
        
union

        select  a.nr_sequencia
        from    pls_rec_glosa_protocolo a 
        where   coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
        and exists (     select  1
                        from    pls_rec_glosa_conta             b,
                                pls_conta_rec_resumo_item       c, 
                                pls_lote_pagamento              d
                        where   a.nr_sequencia	= b.nr_seq_protocolo
                        and     b.nr_sequencia  = c.nr_seq_conta_rec
                        and     c.nr_seq_lote_pgto =  d.nr_sequencia
                        and     d.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w)
        
union

        select  a.nr_sequencia
        from    pls_rec_glosa_protocolo a 
        where   coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
        and exists (     select  1
                        from    pls_rec_glosa_conta             b,
                                pls_conta_rec_resumo_item       c, 
                                pls_pp_lote              	d
                        where   a.nr_sequencia	= b.nr_seq_protocolo
                        and     b.nr_sequencia  = c.nr_seq_conta_rec
                        and     c.nr_seq_pp_lote =  d.nr_sequencia
                        and     d.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w);

c_rec_glosa_prot_w c_rec_glosa_prot%rowtype;
	
c_rec_glosa_conta CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_rec_glosa_conta a
	where	a.nr_seq_protocolo	= c_rec_glosa_prot_w.nr_sequencia;

c_rec_glosa_conta_w c_rec_glosa_conta%rowtype;
	
c_contas_despesa CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_protocolo_conta	a
	where	dt_referencia_month_w = trunc(CASE WHEN ie_data_lote_desp_conta_w='LI' THEN a.dt_lib_pagamento  ELSE a.dt_mes_competencia END ,'month')
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	coalesce(a.nr_lote_contabil,0)	= 0
	and	coalesce(a.ie_tipo_protocolo,'C')	= 'C';
	
	
c_discussao CURSOR FOR	
	SELECT	a.nr_sequencia
	from	pls_lote_discussao	a,
		pls_lote_contestacao	c
	where 	c.nr_sequencia	= a.nr_seq_lote_contest
	and	a.ie_status	= 'F'
	and	a.dt_fechamento between dt_ref_inicial_w and dt_ref_final_w
	and	coalesce(c.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
	and	exists (SELECT	1
			from	pls_lote_contestacao x
			where	x.nr_sequencia		= a.nr_seq_lote_contest
			and	x.cd_estabelecimento	= cd_estabelecimento_w);
		
c_aviso_cobr CURSOR FOR	
        SELECT	l.nr_sequencia,
		a.nr_sequencia,
		null,
		null
        from	ptu_lote_aviso		l,
		ptu_aviso_arquivo	a
        where	coalesce(l.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and     l.nr_sequencia		= a.nr_seq_lote
        and	((l.ie_tipo_lote	= 'E'
        and	a.dt_competencia between dt_ref_inicial_w and dt_ref_final_w
        and	exists ( SELECT	1
                        from	ptu_aviso_procedimento	b,
                                ptu_aviso_proc_item	i,
                                ptu_aviso_protocolo	p,
                                ptu_aviso_conta		c
                        where	b.nr_seq_aviso_conta	= c.nr_sequencia
                        and	b.nr_sequencia		= i.nr_seq_aviso_procedimento
                        and	a.nr_sequencia		= p.nr_seq_arquivo
                        and	p.nr_sequencia		= c.nr_seq_aviso_protocolo
                        and	coalesce(i.nr_lote_contabil,0) = 0

union all

                        select	1
                        from	ptu_aviso_material	b,
                                ptu_aviso_mat_item	i,
                                ptu_aviso_protocolo	p,
                                ptu_aviso_conta		c
                        where	b.nr_seq_aviso_conta	= c.nr_sequencia
                        and	b.nr_sequencia		= i.nr_seq_aviso_material
                        and	a.nr_sequencia		= p.nr_seq_arquivo
                        and	p.nr_sequencia		= c.nr_seq_aviso_protocolo
                        and	coalesce(i.nr_lote_contabil,0) = 0))
        or (l.ie_tipo_lote		= 'R'
        and	a.dt_transacao between dt_ref_inicial_w and dt_ref_final_w
        and	exists ( select	1
                        from	ptu_aviso_procedimento	b,
                                ptu_aviso_protocolo	p,
                                ptu_aviso_conta		c
                        where	b.nr_seq_aviso_conta	= c.nr_sequencia
                        and	a.nr_sequencia		= p.nr_seq_arquivo
                        and	p.nr_sequencia		= c.nr_seq_aviso_protocolo
                        and	coalesce(b.nr_lote_contabil,0) = 0
                        
union all

                        select	1
                        from	ptu_aviso_material	b,
                                ptu_aviso_protocolo	p,
                                ptu_aviso_conta		c
                        where	b.nr_seq_aviso_conta	= c.nr_sequencia
                        and	a.nr_sequencia		= p.nr_seq_arquivo
                        and	p.nr_sequencia		= c.nr_seq_aviso_protocolo
                        and	coalesce(b.nr_lote_contabil,0) = 0)))
	
union all

	select	null,
		null,
		l.nr_sequencia,
		null
	from	pls_lote_faturamento l
	where	l.dt_mesano_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	exists (select	1
			from	ptu_fatura f,
				pls_fatura h
			where	f.nr_seq_pls_fatura		= h.nr_sequencia
			and	h.nr_seq_lote			= l.nr_sequencia
			and	f.ie_tipo_cobranca_fatura 	= 'A'
			and	f.ie_operacao			= 'E')
	
union all

	select	null,
		null,
		null,
		f.nr_sequencia
	from	ptu_fatura f
	where	f.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w	
	and	f.ie_tipo_cobranca_fatura 	= 'A'
	and	f.ie_operacao			= 'R';


BEGIN
qt_movimento_w		:= 0;
dt_inicio_atualizacao_w	:= clock_timestamp();

select	coalesce(max(ie_performance_contab), 'N')
into STRICT	ie_performance_contab_w
from	pls_visible_false
where	cd_estabelecimento = cd_estabelecimento_p;

select	max(cd_empresa)
into STRICT	cd_empresa_w
from	estabelecimento
where	cd_estabelecimento	= cd_estabelecimento_p;

select	nextval('pls_atualizacao_contabil_seq')
into STRICT	nr_seq_atualizacao_w
;

insert into pls_atualizacao_contabil(nr_sequencia,
	cd_tipo_lote_contabil,
	dt_mes_competencia,
	nm_usuario_atualizacao,
	dt_atualizacao_contas,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	dt_inicio_atualizacao,
	cd_estabelecimento)
values (nr_seq_atualizacao_w,
	cd_tipo_lote_contabil_p,
	dt_referencia_p,
	nm_usuario_p,
	clock_timestamp(),
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p,
	dt_inicio_atualizacao_w,
	cd_estabelecimento_p);

dt_referencia_month_w	:= trunc(dt_referencia_p,'month');

dt_ref_inicial_w	:= dt_referencia_month_w;
dt_ref_final_w		:= fim_dia(fim_mes(dt_referencia_month_w));

/* Consistir se ja existe lote contabil gerado para o mes */

ie_lote_contabil_gerado_w	:= obter_se_lote_contabil_gerado(cd_tipo_lote_contabil_p,dt_referencia_month_w);

if (ie_lote_contabil_gerado_w = 'S') and (cd_tipo_lote_contabil_p not in (22,40,41)) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort( 188714, 'DT_REFERENCIA=' || to_char(dt_referencia_month_w,'mm/yyyy') );	
end if;

cd_estabelecimento_w	:= cd_estabelecimento_p;

begin
select	max(coalesce(ie_esquema_contabil,'N')),
	max(coalesce(ie_data_lote_desp_conta,'CO')),
	max(coalesce(ie_data_lote_prod_med,'C')),
	max(coalesce(ie_estorno_corresp_pre, 'N')),
	max(coalesce(ie_lote_taxa_adm,'R'))
into STRICT	ie_esquema_contabil_w,
	ie_data_lote_desp_conta_w,
	ie_data_lote_prod_med_w,
	ie_estorno_corresp_pre_w,
	ie_lote_taxa_adm_w
from	pls_parametro_contabil
where	cd_estabelecimento	= cd_estabelecimento_w;
exception
when others then
	ie_esquema_contabil_w		:= 'N';
	ie_data_lote_desp_conta_w	:= 'CO';
	ie_data_lote_prod_med_w		:= 'C';
	ie_estorno_corresp_pre_w	:= 'N';
	ie_lote_taxa_adm_w		:= 'R';
end;

CALL pls_atualizar_codificacao_pck.pls_atualizar_codificacao(dt_referencia_month_w);

CALL wheb_usuario_pck.set_ie_atualizacao_contabil('S');

qt_movimento_w	:= 0;
nr_contador_w   := 0;

if (cd_tipo_lote_contabil_p = 22) then /* OPS Despesas - Contas Medicas */
	open c_contas_despesa;
	loop
	fetch c_contas_despesa into
		nr_seq_protocolo_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas_despesa */
		begin
		
		nr_contador_w := nr_contador_w + 1;

		if (ie_esquema_contabil_w = 'S') then
			qt_movimento_w := ctb_pls_atualizar_despesa_in(	nr_seq_protocolo_w, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w, null);
							
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;			
		else
			CALL ctb_pls_atualizar_conta(	nr_seq_protocolo_w,
							nm_usuario_p, 
							cd_estabelecimento_p);
							
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;					
		end if;
						
		end;
	end loop;
	close c_contas_despesa;
	
	nr_contador_w := 0;
	commit;
		
end if;



if (cd_tipo_lote_contabil_p = 40) then /* OPS Despesas-Provisao de producao medica */
	
	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
		sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
	into STRICT	qt_prest_pgto_w,
		qt_outro_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'PP'
	and	cd_estabelecimento = cd_estabelecimento_p
	and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);
	
	select	max(coalesce(ie_status_prov_pagto,'NC')),
		max(coalesce(ie_lote_ajuste_prod,'R'))
	into STRICT	ie_status_prov_pagto_w,
		ie_lote_ajuste_prod_w
	from	pls_parametro_contabil
	where	cd_estabelecimento	= cd_estabelecimento_p;
	
	if (qt_prest_pgto_w > 0) and (qt_outro_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(358873);
	end if;
	
	open c_contas_pag_provisao;
	loop
	fetch c_contas_pag_provisao bulk collect into s_array_prov_prod limit 1000;
		vetor_c_prov_prod_w(j)	:= s_array_prov_prod;
		j			:= j + 1;
	EXIT WHEN NOT FOUND; /* apply on c_contas_pag_provisao */
	end loop;
	close c_contas_pag_provisao;
	
	for i in 1..vetor_c_prov_prod_w.count loop
		s_array_prov_prod := vetor_c_prov_prod_w(i);
		for z in 1..s_array_prov_prod.count loop
			begin
			nr_seq_conta_w		:= s_array_prov_prod[z].nr_sequencia;
			
			nr_contador_w := nr_contador_w + 1;
			if (qt_outro_w > 0 or s_array_prov_prod[z].ie_tipo_protocolo = 'F') then
				qt_movimento_w := ctb_pls_atualizar_prov_prod_in(	nr_seq_conta_w, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
				
				if (mod(nr_contador_w,1000) = 0) then
					commit;
				end if;	
			end if;
			
			if (qt_prest_pgto_w > 0 and s_array_prov_prod[z].ie_tipo_protocolo <> 'F') then
				qt_movimento_w := ctb_pls_atualiza_prov_prod_res( nr_seq_conta_w, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, cd_empresa_w, ie_status_prov_pagto_w, ie_lote_ajuste_prod_w, qt_movimento_w, dt_referencia_p);
								
				if (mod(nr_contador_w,1000) = 0) then
					commit;
				end if;		
				
			end if;
			
			end;
		end loop;
	end loop;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 41) then /* OPS Desp - Pagamento de producao medica */
	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
		sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
	into STRICT	qt_prest_pgto_w,
		qt_outro_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'PM'
	and	cd_estabelecimento = cd_estabelecimento_p
	and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);
		
	if (qt_prest_pgto_w > 0) and (qt_outro_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(358873);
	end if;
	/* Eventos */

	nr_vetor_w	:= 0;
	w		:= 0;
	
	open c_lote_evento;
	loop
	fetch c_lote_evento into
		nr_seq_lote_evento_w;
	EXIT WHEN NOT FOUND; /* apply on c_lote_evento */
		begin
		nr_vetor_w					:= nr_vetor_w + 1;
		vetor_lote_eventos_w[nr_vetor_w].nr_sequencia	:= nr_seq_lote_evento_w;
		end;
	end loop;
	close c_lote_evento;
	
	for w in 1..vetor_lote_eventos_w.count loop
		begin
		
		nr_seq_lote_evento_w	:= vetor_lote_eventos_w[w].nr_sequencia;
		
		nr_contador_w := nr_contador_w + 1;
		
		qt_movimento_w := ctb_pls_atualizar_prod_eve_in(	nr_seq_lote_evento_w, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
						
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;					
		
		end;
	end loop;

	nr_contador_w := 0;
	commit;
	
	/* Lotes de pagamento */

	nr_vetor_w	:= 0;
	w		:= 0;
	
	open c_lote_pagamento;
	loop
	fetch c_lote_pagamento into
		nr_seq_lote_pagamento_w,
		ie_pagamento_novo_w;
	EXIT WHEN NOT FOUND; /* apply on c_lote_pagamento */
		begin
		nr_vetor_w						:= nr_vetor_w + 1;
		vetor_lotes_pagamentos_w[nr_vetor_w].nr_sequencia	:= nr_seq_lote_pagamento_w;
		vetor_lotes_pagamentos_w[nr_vetor_w].ie_pagamento_novo	:= ie_pagamento_novo_w;
		end;
	end loop;
	close c_lote_pagamento;
	
	nr_vetor_w	:= 0;
	w		:= 0;
	
	for w in 1..vetor_lotes_pagamentos_w.count loop
		begin
		nr_seq_lote_pagamento_w	:= vetor_lotes_pagamentos_w[w].nr_sequencia;
		ie_pagamento_novo_w	:= vetor_lotes_pagamentos_w[w].ie_pagamento_novo;
		
		if (ie_pagamento_novo_w = 'S') then
			qt_movimento_w := ctb_pls_atualizar_eventos_pp(	nr_seq_lote_pagamento_w, null, nr_seq_atualizacao_w, cd_estabelecimento_p, nm_usuario_p, qt_movimento_w);
		end if;
		
		/* Contas do lote de pagamento */

		open c_contas_pagamento;
		loop
		fetch c_contas_pagamento bulk collect into s_array limit 1000;
			vetor_contas_w(i)	:= s_array;
			i			:= i + 1;
		EXIT WHEN NOT FOUND; /* apply on c_contas_pagamento */
		end loop;
		close c_contas_pagamento;
		end;
	end loop;
	
	for i in 1..vetor_contas_w.count loop
		begin
		s_array := vetor_contas_w(i);
		for z in 1..s_array.count loop
			begin
			nr_vetor_w						:= nr_vetor_w + 1;
			vetor_contas_pagamento_w[nr_vetor_w].nr_sequencia	:= s_array[z].nr_seq_conta;
			end;
		end loop;
		end;
	end loop;
	
	/* Contas do lote de pagamento */

	w		:= 0;
	
	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
		sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
	into STRICT	qt_prest_pgto_w,
		qt_outro_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'PM'
	and	ie_tipo_movimentacao	!= '13'
	and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);
	
	for w in 1..vetor_contas_pagamento_w.count loop
		begin
		nr_seq_conta_w	:= vetor_contas_pagamento_w[w].nr_sequencia;
		
		nr_contador_w := nr_contador_w + 1;
		
		if (qt_outro_w > 0) then
			qt_movimento_w := ctb_pls_atualizar_prod_med_in(	nr_seq_conta_w, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
			
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;	
			
		end if;
		
		if (qt_prest_pgto_w > 0) then
			qt_movimento_w := ctb_pls_atualizar_prod_med_res(	nr_seq_conta_w, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w, dt_referencia_p);
							
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;		
			
		end if;
		end;
	end loop;
	
	nr_contador_w := 0;
	commit;
	
	/* Tributos do pagamento da producao medica */

	w		:= 0;
	
	for w in 1..vetor_lotes_pagamentos_w.count loop
		begin
		nr_seq_lote_pagamento_w	:= vetor_lotes_pagamentos_w[w].nr_sequencia;
		ie_pagamento_novo_w	:= vetor_lotes_pagamentos_w[w].ie_pagamento_novo;
		
		if (ie_pagamento_novo_w = 'N') then
		
			nr_contador_w := nr_contador_w + 1;
			
			qt_movimento_w := ctb_pls_atualizar_trib_pag_in(	nr_seq_lote_pagamento_w, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
			
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;
		end if;
		
		if (ie_pagamento_novo_w = 'S') then
		
			nr_contador_w := nr_contador_w + 1;
			
			qt_movimento_w := ctb_pls_atualizar_tributo_pp(	nr_seq_lote_pagamento_w, null, nr_seq_atualizacao_w, cd_estabelecimento_p, nm_usuario_p, qt_movimento_w);
			
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;
		end if;
		
		end;
	end loop;
	
	nr_contador_w := 0;
	commit;
	
	open c_rec_glosa_prot;
	loop
	fetch c_rec_glosa_prot into
		c_rec_glosa_prot_w;
	EXIT WHEN NOT FOUND; /* apply on c_rec_glosa_prot */
		begin		
		
		open c_rec_glosa_conta;
		loop
		fetch c_rec_glosa_conta into
			c_rec_glosa_conta_w;
		EXIT WHEN NOT FOUND; /* apply on c_rec_glosa_conta */
			begin		
			
			nr_contador_w := nr_contador_w + 1;
			
			qt_movimento_w := ctb_pls_atualizar_rec_glosa(	c_rec_glosa_conta_w.nr_sequencia, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
			
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;	
			
			end;
		end loop;
		close c_rec_glosa_conta;
		
		end;
	end loop;
	close c_rec_glosa_prot;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 33) then /* OPS Despesas - Contas Intercambio */
	open c_contas_intercambio;
	loop
	fetch c_contas_intercambio into
		nr_seq_protocolo_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas_intercambio */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		qt_movimento_w := ctb_pls_atualizar_desp_interc(	nr_seq_protocolo_w, null, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
						
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;					
						
		end;
	end loop;
	close c_contas_intercambio;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 42) then /* OPS - Provisao de coparticipacao */
	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
		sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
	into STRICT	qt_prest_pgto_w,
		qt_outro_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'PC'
	and	cd_estabelecimento = cd_estabelecimento_p
	and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);
	
	if (qt_prest_pgto_w > 0) and (qt_outro_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(358873);
	end if;
			
	qt_movimento_w	:= 0;

	open c_contas_copartic;
	loop
	fetch c_contas_copartic into
		nr_seq_conta_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas_copartic */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		qt_movimento_w := ctb_pls_atualizar_prov_copart(	nr_seq_conta_w, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
		
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;	
		
		end;
	end loop;
	close c_contas_copartic;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 43) then /* OPS - Provisao de Faturamento */
	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
		sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
	into STRICT	qt_prest_pgto_w,
		qt_outro_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'PF'
	and	cd_estabelecimento = cd_estabelecimento_p
	and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);
	
	if (qt_prest_pgto_w > 0) and (qt_outro_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(358873);
	end if;
		
	open c_contas_prov_fat;
	loop
	fetch c_contas_prov_fat into
		nr_seq_conta_faturamento_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas_prov_fat */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		qt_movimento_w := ctb_pls_atualizar_prov_fat(	nr_seq_conta_faturamento_w, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
		
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;
		
		if (ie_lote_taxa_adm_w = 'P') then		
			
			nr_contador_w := nr_contador_w + 1;

			qt_movimento_w := ctb_pls_atualizar_taxa_adm(	nr_seq_conta_faturamento_w, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
			
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;	
		end if;
		end;
	end loop;
	close c_contas_prov_fat;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 21) then /* OPS Receitas - Mensalidades */
	select	count(1)
	into STRICT	qt_lote_gerado_mes_w
	from	lote_contabil
	where	cd_tipo_lote_contabil	in (21,49,50)
	and	trunc(dt_referencia,'month') = dt_referencia_month_w
	and	cd_estabelecimento = cd_estabelecimento_p
	and	(dt_geracao_lote IS NOT NULL AND dt_geracao_lote::text <> '');
	
	if (qt_lote_gerado_mes_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 188714, 'DT_REFERENCIA=' || to_char(dt_referencia_month_w,'mm/yyyy') );
	end if;
	
	open c_mensalidades;
	loop
	fetch c_mensalidades into
		nr_seq_lote_w,
		nr_seq_mens_seg_w,
		ie_tipo_movimento_w;
	EXIT WHEN NOT FOUND; /* apply on c_mensalidades */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		if (ie_esquema_contabil_w = 'S') then
			qt_movimento_w := ctb_pls_atualizar_receita_in(	nr_seq_lote_w, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, nr_seq_mens_seg_w, ie_tipo_movimento_w, qt_movimento_w);
							
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;			
		else
			if (coalesce(nr_seq_lote_w,0) <> 0) then			
				CALL CTB_PLS_Atualizar_mensal(	nr_seq_lote_w,
								null,
								nm_usuario_p,
								cd_estabelecimento_p);
								
				if (mod(nr_contador_w,1000) = 0) then
					commit;
				end if;
			end if;
		end if;
		
		if (coalesce(nr_seq_lote_w,0) <> 0) then
			ctb_pls_atualizar_imposto_in(	nr_seq_lote_w,
					null,
					nm_usuario_p,
					cd_estabelecimento_p);
					
			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;
		end if;
			
		end;
	end loop;
	close c_mensalidades;
	
	nr_contador_w := 0;
	commit;
	
	/*select	count(1)
	into	qt_mov_mens_prov_w
	from	pls_mensalidade_seg_item	a,
		pls_mensalidade_segurado	b,
		pls_mensalidade			c,
		pls_lote_mensalidade		d
	where	a.nr_seq_mensalidade_seg	= b.nr_sequencia
	and	b.nr_seq_mensalidade		= c.nr_sequencia
	and	c.nr_seq_lote			= d.nr_sequencia
	and	((trunc(d.dt_mesano_referencia,'month') = dt_referencia_month_w)
	or	(trunc(d.dt_contabilizacao,'month') = dt_referencia_month_w))
	and	nvl(d.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	
	if	(ie_performance_contab_w = 'M') then
		select	count(1)
		into	qt_mov_mens_rec_w
		from	pls_mensalidade_seg_item	a,
			pls_mensalidade_segurado	b,
			pls_mensalidade			c,
			pls_lote_mensalidade		d
		where	a.nr_seq_mensalidade_seg	= b.nr_sequencia
		and	b.nr_seq_mensalidade		= c.nr_sequencia
		and	c.nr_seq_lote			= d.nr_sequencia
		and	b.dt_mesano_referencia between dt_ref_inicial_w and dt_ref_final_w
		and	nvl(d.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	end if;
	
	qt_movimento_w	:= qt_mov_mens_prov_w + qt_mov_mens_rec_w;*/
end if;

if (cd_tipo_lote_contabil_p = 23) then /* OPS Despesas - Reembolso */
	open c_contas_reembolso;
	loop
	fetch c_contas_reembolso into
		nr_seq_protocolo_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas_reembolso */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		qt_movimento_w := ctb_pls_atualizar_reembolso_in(	nr_seq_protocolo_w, null, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
		
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;	
		
		end;
	end loop;
	close c_contas_reembolso;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 27) then /* OPS Despesas - Ressarcimento */
	open c_contas_ressarcimento;
	loop
	fetch c_contas_ressarcimento into
		nr_seq_competencia_w,
		nr_seq_processo_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas_ressarcimento */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		qt_movimento_w := ctb_pls_atualizar_ressa(	nr_seq_processo_w, nm_usuario_p, cd_estabelecimento_p, null, nr_seq_competencia_w, null, qt_movimento_w, nr_seq_atualizacao_w);
		
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;	
		
		end;
	end loop;
	close c_contas_ressarcimento;
	
	nr_contador_w := 0;
	commit;
	
end if;
if (cd_tipo_lote_contabil_p = 32) then /* OPS - Provisoes Tecnicas - PPSC */
	select	count(1)
	into STRICT	qt_mov_ppsc_w
	from	pls_ppsc_movimento	a,
		pls_ppsc_lote		b
	where	a.nr_seq_lote	= b.nr_sequencia
	and	trunc(b.dt_lote,'month')	= dt_referencia_month_w
	and	not exists (	SELECT	1
				from	pls_ppsc_movimento_item x
				where	x.nr_seq_movimento	= a.nr_sequencia)
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	
	select	count(1)
	into STRICT	qt_mov_ppsc_item_w
	from	pls_ppsc_movimento_item	c,
		pls_ppsc_movimento	a,
		pls_ppsc_lote		b
	where	c.nr_seq_movimento	= a.nr_sequencia
	and	a.nr_seq_lote		= b.nr_sequencia
	and	trunc(b.dt_lote,'month')	= dt_referencia_month_w
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	
	qt_movimento_w	:= qt_mov_ppsc_w + qt_mov_ppsc_item_w;
	qt_movimento_w	:= qt_movimento_w * 2; -- Movimento normal + reversao
	
	open c_lote_ppsc;
	loop
	fetch c_lote_ppsc into
		nr_seq_lote_ppsc_w;
	EXIT WHEN NOT FOUND; /* apply on c_lote_ppsc */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		CALL ctb_pls_atualizar_ppsc(	nr_seq_lote_ppsc_w,
					null,
					null,
					nr_seq_atualizacao_w,
					nm_usuario_p,
					cd_estabelecimento_p);
					
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;			
		
		end;
	end loop;
	close c_lote_ppsc;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 44) then /* OPS - Receitas com Faturamento */
	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
		sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
	into STRICT	qt_prest_pgto_w,
		qt_outro_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'FA'
	and	cd_estabelecimento = cd_estabelecimento_p
	and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);
	
	if (qt_prest_pgto_w > 0) and (qt_outro_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(358873);
	end if;
	
	select	count(*)
	into STRICT	qt_fatura_proc_w
	from	pls_conta 			a,
		pls_conta_pos_estabelecido 	b,
		pls_conta_pos_estab_contab 	c,
		pls_fatura 			d,
		pls_fatura_proc 		e,
		pls_fatura_conta 		f,
		pls_fatura_evento 		g,
		pls_lote_faturamento 		h,
		pls_plano			i,
		pls_segurado			j
	where	a.nr_sequencia 		= b.nr_seq_conta
	and	b.nr_sequencia 		= c.nr_seq_conta_pos
	and	b.nr_sequencia 		= e.nr_seq_conta_pos_estab
	and	d.nr_sequencia 		= g.nr_seq_fatura
	and	f.nr_sequencia 		= e.nr_seq_fatura_conta
	and	g.nr_sequencia 		= f.nr_seq_fatura_evento
	and	h.nr_sequencia 		= d.nr_seq_lote
	and	i.nr_sequencia 		= a.nr_seq_plano
	and	j.nr_sequencia		= a.nr_seq_segurado
	and	(a.nr_seq_plano IS NOT NULL AND a.nr_seq_plano::text <> '')
	and	coalesce(d.nr_seq_cancel_fat::text, '') = ''
	and	trunc(d.dt_mes_competencia,'month') = dt_referencia_month_w
	and	coalesce(h.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;

	select	count(*)
	into STRICT	qt_fatura_mat_w
	from	pls_conta 			a,
		pls_conta_pos_estabelecido 	b,
		pls_conta_pos_estab_contab 	c,
		pls_fatura 			d,
		pls_fatura_mat 		e,
		pls_fatura_conta 		f,
		pls_fatura_evento 		g,
		pls_lote_faturamento 		h,
		pls_plano			i,
		pls_segurado			j
	where	a.nr_sequencia 		= b.nr_seq_conta
	and	b.nr_sequencia 		= c.nr_seq_conta_pos
	and	b.nr_sequencia 		= e.nr_seq_conta_pos_estab
	and	d.nr_sequencia 		= g.nr_seq_fatura
	and	f.nr_sequencia 		= e.nr_seq_fatura_conta
	and	g.nr_sequencia 		= f.nr_seq_fatura_evento
	and	h.nr_sequencia 		= d.nr_seq_lote
	and	i.nr_sequencia 		= a.nr_seq_plano
	and	j.nr_sequencia		= a.nr_seq_segurado
	and	(a.nr_seq_plano IS NOT NULL AND a.nr_seq_plano::text <> '')
	and	coalesce(d.nr_seq_cancel_fat::text, '') = ''
	and	trunc(d.dt_mes_competencia,'month') = dt_referencia_month_w
	and	coalesce(h.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	
	qt_movimento_w	:= qt_fatura_proc_w + qt_fatura_mat_w;
	
	select	count(*)
	into STRICT	qt_fatura_proc_w
	from	pls_fatura		f,
		pls_fatura_trib		t,
		pls_fatura_item_trib	i,
		pls_fatura_evento	e,
		pls_lote_faturamento	l
	where	f.nr_sequencia	= t.nr_seq_fatura
	and	t.nr_sequencia	= i.nr_seq_fatura_trib
	and	e.nr_seq_fatura = f.nr_sequencia
	and	l.nr_sequencia	= f.nr_seq_lote
	and	trunc(f.dt_mes_competencia,'month') = dt_referencia_month_w
	and	coalesce(l.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	
	qt_movimento_w	:= qt_movimento_w + qt_fatura_proc_w;
	
	select	coalesce(max(a.ie_data_rec_faturamento),'MC')
	into STRICT	ie_data_rec_faturamento_w
	from	pls_parametro_contabil	a
	where	a.cd_estabelecimento	= cd_estabelecimento_w;
	
	open c_contas_faturamento;
	loop
	fetch c_contas_faturamento into
		nr_seq_fatura_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas_faturamento */
	
		nr_contador_w := nr_contador_w + 1;
	
		begin
		CALL ctb_pls_atualizar_faturamento(	nr_seq_fatura_w,	
						null,
						null,
						nr_seq_atualizacao_w,
						nm_usuario_p,
						cd_estabelecimento_p);
						
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;	
		
		CALL pls_atualizar_tributo_fat(	nm_usuario_p,
						cd_estabelecimento_p,
						nr_seq_fatura_w,
						nr_seq_atualizacao_w);
				
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;	
		
		end;
	end loop;
	close c_contas_faturamento;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 46) then /* OPS - Cancelamento de Mensalidade */
	open c_cancelamento_mensalidade;
	loop
	fetch c_cancelamento_mensalidade into
		nr_seq_lote_cancel_w;
	EXIT WHEN NOT FOUND; /* apply on c_cancelamento_mensalidade */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		CALL ctb_pls_atualizar_cancel_mens(	nr_seq_lote_cancel_w,
						null,
						nr_seq_atualizacao_w,
						nm_usuario_p,
						cd_estabelecimento_p);
		
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;	
		
		end;
	end loop;
	close c_cancelamento_mensalidade;
	
	nr_contador_w := 0;
	commit;
	
	select	count(1)
	into STRICT	qt_movimento_w
	from	pls_mensalidade_seg_item	a,
		pls_mensalidade_segurado	b,
		pls_mensalidade			c,
		pls_cancel_rec_mensalidade	d,
		pls_cancel_rec_mens_lote	e,
		pls_lote_mensalidade		l
	where	a.nr_seq_mensalidade_seg	= b.nr_sequencia
	and	b.nr_seq_mensalidade		= c.nr_sequencia
	and	c.nr_seq_cancel_rec_mens	= d.nr_sequencia
	and	d.nr_seq_lote			= e.nr_sequencia
	and	l.nr_sequencia			= c.nr_seq_lote
	and	trunc(e.dt_referencia,'month')	= dt_referencia_month_w
	and	coalesce(l.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
end if;

if (cd_tipo_lote_contabil_p = 47) then /* OPS - Receitas com Faturamento */
	select	count(1)
	into STRICT	qt_fatura_proc_w
	from	pls_fatura_proc		e,
		pls_fatura_conta	d,
		pls_fatura_evento	c,
		pls_fatura		b,
		pls_cancel_rec_fatura	f,
		pls_cancel_rec_fat_lote	g,
		pls_lote_faturamento	l
	where	e.nr_seq_fatura_conta	= d.nr_sequencia
	and	d.nr_seq_fatura_evento	= c.nr_sequencia
	and	c.nr_seq_fatura		= b.nr_sequencia
	and	b.nr_seq_cancel_fat	= f.nr_sequencia
	and	f.nr_seq_lote		= g.nr_sequencia
	and	l.nr_sequencia		= f.nr_seq_lote
	and	trunc(g.dt_referencia,'month') = dt_referencia_month_w
	and	coalesce(l.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	
	select	count(1)
	into STRICT	qt_fatura_mat_w
	from	pls_fatura_mat		e,
		pls_fatura_conta	d,
		pls_fatura_evento	c,
		pls_fatura		b,
		pls_cancel_rec_fatura	f,
		pls_cancel_rec_fat_lote	g,
		pls_lote_faturamento	l
	where	e.nr_seq_fatura_conta	= d.nr_sequencia
	and	d.nr_seq_fatura_evento	= c.nr_sequencia
	and	c.nr_seq_fatura		= b.nr_sequencia
	and	b.nr_seq_cancel_fat	= f.nr_sequencia
	and	f.nr_seq_lote		= g.nr_sequencia
	and	l.nr_sequencia		= f.nr_seq_lote
	and	trunc(g.dt_referencia,'month') = dt_referencia_month_w
	and	coalesce(l.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;
	
	qt_movimento_w	:= qt_fatura_proc_w + qt_fatura_mat_w;
	
	open c_cancelamento_faturamento;
	loop
	fetch c_cancelamento_faturamento into
		nr_seq_lote_cancel_w;
	EXIT WHEN NOT FOUND; /* apply on c_cancelamento_faturamento */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		CALL ctb_pls_atualizar_cancel_fat(	nr_seq_lote_cancel_w,
						null,
						null,
						nr_seq_atualizacao_w,
						nm_usuario_p,
						cd_estabelecimento_p);
						
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;				
		
		end;
	end loop;
	close c_cancelamento_faturamento;
	
	nr_contador_w := 0;
	commit;
	
end if;

if (cd_tipo_lote_contabil_p = 38) then /* OPS - Discussao de glosas */
	CALL wheb_usuario_pck.set_ie_executar_trigger('N');
	
	open c_discussao;
	loop
	fetch c_discussao into
		nr_seq_lote_disc_w;
	EXIT WHEN NOT FOUND; /* apply on c_discussao */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		qt_movimento_w := ctb_pls_atualizar_discussao(	nr_seq_lote_disc_w, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
						
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;				
				
		end;
	end loop;
	close c_discussao;
	
	nr_contador_w := 0;
	commit;
	
	CALL wheb_usuario_pck.set_ie_executar_trigger('S');
end if;

if (cd_tipo_lote_contabil_p = 57) then /* OPS - Aviso de cobranca */
	open c_aviso_cobr;
	loop
	fetch c_aviso_cobr into
		nr_seq_lote_aviso_w,
		nr_seq_arquivo_w,
		nr_seq_lote_faturamento_w,
		nr_seq_ptu_fatura_w;
	EXIT WHEN NOT FOUND; /* apply on c_aviso_cobr */
		begin
		
		nr_contador_w := nr_contador_w + 1;
		
		qt_movimento_w
						 := ctb_pls_atualizar_aviso_cobr(	nr_seq_lote_aviso_w, nr_seq_arquivo_w, null, null, null, null, nr_seq_lote_faturamento_w, nr_seq_ptu_fatura_w, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w
						);
		
		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;
		
		end;
	end loop;
	close c_aviso_cobr;
	
	nr_contador_w := 0;
	commit;
	
end if;

CALL wheb_usuario_pck.set_ie_atualizacao_contabil('N');

dt_fim_atualizacao_w	:= clock_timestamp();

select (dt_fim_atualizacao_w - dt_inicio_atualizacao_w) * 86400
into STRICT	qt_segundos_geracao_w
;

if (qt_segundos_geracao_w <> 0) then
	qt_horas_att_w		:= trunc((qt_segundos_geracao_w / 60) / 60);
	qt_segundos_geracao_w	:= qt_segundos_geracao_w - (qt_horas_att_w * 60 * 60);
	
	qt_minutos_att_w	:= trunc(qt_segundos_geracao_w / 60);
	qt_segundos_geracao_w	:= qt_segundos_geracao_w - (qt_minutos_att_w * 60);
	
	qt_segundos_att_w	:= qt_segundos_geracao_w;
	
	hr_atualizacao_w	:= lpad(qt_horas_att_w,2,'0')||':'||lpad(qt_minutos_att_w,2,'0')||':'||lpad(qt_segundos_att_w,2,'0');
else
	hr_atualizacao_w	:= '00:00:00';
end if;

update	pls_atualizacao_contabil
set	dt_fim_atualizacao	= dt_fim_atualizacao_w,
	hr_atualizacao		= hr_atualizacao_w,
	qt_movimento		= qt_movimento_w
where	nr_sequencia		= nr_seq_atualizacao_w;

ie_geracao_p	:= 'S';

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_contas_contabeis ( dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, cd_tipo_lote_contabil_p bigint, ie_geracao_p INOUT text) FROM PUBLIC;

