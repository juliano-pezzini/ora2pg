-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE horario_livre_consulta ( cd_estabelecimento_p bigint, cd_agenda_p bigint, ie_feriado_p text, dt_agenda_p timestamp, nm_usuario_p text, ie_gravar_p text, ie_sobra_horario_p text, ie_consulta_p text, qt_horarios_p bigint, ds_retorno_p INOUT text) AS $body$
DECLARE


ie_feriado_w		varchar(0001)	:= 'N';
ie_dia_semana_w		smallint;
hr_inicial_w		timestamp;
hr_final_w		timestamp;
hr_fim_w			timestamp;
hr_fim_ww			timestamp;
hr_atual_w		timestamp;
hr_nada_w		timestamp;
hr_inicial_intervalo_w	timestamp;
hr_inicial_intervalo_ww timestamp;
hr_final_intervalo_w	timestamp;
hr_final_intervalo_ww	timestamp;
ie_utiliza_ageweb_w	varchar(1);
ie_ignora_sobreposicao_w varchar(1);
nr_minuto_intervalo_w	bigint;
nr_minuto_int_sobra_w	bigint;
nr_minuto_int_sobra_ww	bigint;
nr_min_dif_sobra_ww		bigint;
ie_classif_Agenda_w	varchar(0005);
ie_classif_Agenda_alter_w	varchar(0005);
qt_existe_agenda_w	smallint;
qt_horario_w		integer    := 0;
nr_sequencia_w		bigint    := 0;
ds_observacao_w		varchar(255);
qt_min_minimo_w		integer;
ds_horario_w		varchar(255);
qt_turno_w		integer;
qt_turno_diario_w		integer;
nr_seq_esp_w		bigint	:= 0;
nr_seq_classif_med_w	bigint;
nr_seq_sala_w		bigint;
cd_convenio_padrao_w	bigint;
cd_categoria_padrao_w	varchar(10);
ie_excluir_livres_novo_w	varchar(02) 	:= 'N';
cd_turno_w		varchar(01)	:= 0;
HR_QUEBRA_TURNO_W		varchar(05);
qt_min_QUEBRA_TURNO_W	varchar(05);
ie_horario_adicional_w 		varchar(01) := 'S';
nr_seq_hora_w			bigint;
ie_bloqueio_w			varchar(1);
ie_turno_w			smallint;
nr_seq_turno_w			bigint;
nr_seq_turno_sobra_w	bigint;
nr_seq_turno_esp_w		bigint;
ie_gerar_nome_w			varchar(1);
cd_setor_agenda_w		bigint;
nr_seq_hor_bloq_w		bigint;
ie_gerar_hor_bloq_w	varchar(1)	:= 'N';
cd_medico_req_w			varchar(10);
nr_seq_motivo_transf_w		bigint;
ie_status_autor_w		varchar(15);
ie_gerar_hor_falta_w		varchar(1);
qt_gerado_w			bigint;
ie_gerar_hor_w			varchar(1);

qt_gera_horario_w	bigint;
ie_manter_livres_w	varchar(1);
ie_util_prof_ag_med_req_w varchar(1);
cd_prof_agenda_w	varchar(10);
ds_erro_w			varchar(255);
qt_dia_inicial_w				bigint;
qt_dia_final_w					bigint;
qt_dia_filtro_ini_w				bigint;
qt_dia_filtro_fim_w				bigint;
cd_tipo_agenda_w		agenda.cd_tipo_agenda%type;
dt_agenda_trunc_w 		timestamp;
dt_agenda_final_dia_w	timestamp;
dt_atual_trunc_w		timestamp;
nr_hr_atual_w				smallint;

nm_tabela_w				INTEGRIDADE_REFERENCIAL.NM_TABELA%TYPE;
nm_integridade_ref_w	INTEGRIDADE_REFERENCIAL.NM_INTEGRIDADE_REFERENCIAL%TYPE;
ds_contraint_name_w		USER_CONS_COLUMNS.COLUMN_NAME%TYPE;
ds_comando_w			varchar(4000);
ds_dtAgenda_w			varchar(255);
nr_seq_regra_bloq_w		agenda_bloqueio_geral.nr_sequencia%type;
cd_estabelecimento_w    agenda.cd_estabelecimento%type;

ie_liberado_w   varchar(1) := 'N';
cd_pais_w 		smallint;

C01 CURSOR FOR
	SELECT 	1 ie_turno,
		0 nr_seq_turno,
		a.nr_sequencia nr_seq_turno_esp,
		PKG_DATE_UTILS.get_datetime(dt_agenda_p,a.hr_inicial),
		PKG_DATE_UTILS.get_datetime(dt_agenda_p,a.hr_final),
		a.nr_minuto_intervalo,
		a.ie_classif_agenda,
		0,
		a.ds_observacao,
		a.nr_seq_sala,
		0 cd_convenio_padrao,
		null cd_categoria_padrao,
		a.cd_medico_req,
		null hr_inicial_intervalo,
		null hr_final_intervalo,
		coalesce(a.ie_utiliza_ageweb,'S'),
		coalesce(a.ie_ignora_sobreposicao, 'N')
	from 	agenda_Turno_Esp a,
		agenda b
	where 	b.cd_agenda     	= cd_agenda_p
	and	a.cd_agenda	= b.cd_agenda
	and		((a.ie_dia_semana = ie_dia_semana_w) or ((a.ie_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))) or (coalesce(a.ie_dia_semana::text, '') = ''))
	and		((obter_se_feriado(b.cd_estabelecimento, dt_agenda_p) = 0) or (obter_se_agenda_feriado(cd_agenda_p) = 'S'))
	  and	obter_se_turno_esp_agecons_vig(a.dt_agenda,a.dt_agenda_fim,dt_agenda_p) = 'S'
	  and PKG_DATE_UTILS.get_datetime(dt_agenda_p,a.hr_inicial) < PKG_DATE_UTILS.get_datetime(dt_agenda_p,a.hr_final)
	  and	a.nr_minuto_intervalo	> 0
	  and	nr_seq_esp_w		> 0
	
union

	SELECT 	2 ie_turno,
		nr_sequencia nr_seq_turno,
		0 nr_seq_turno_esp,
		PKG_DATE_UTILS.get_datetime(dt_agenda_p, hr_inicial),
		PKG_DATE_UTILS.get_datetime(dt_agenda_p, hr_final),
		nr_minuto_intervalo,
		ie_classif_agenda,
		nr_seq_classif_med,
		ds_observacao,
		nr_seq_sala,
		cd_convenio_padrao,
		cd_categoria_padrao,
		cd_medico_req,
		hr_inicial_intervalo,
		hr_final_intervalo,
		coalesce(a.ie_utiliza_ageweb,'S'),
		'N' ie_ignora_sobreposicao
	from 	agenda_Turno a
	where 	cd_agenda     		= cd_agenda_p
	  and	((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))))
	  and 	PKG_DATE_UTILS.get_datetime(dt_agenda_p,hr_inicial) < PKG_DATE_UTILS.get_datetime(dt_agenda_p,hr_final)
	  and	((coalesce(dt_inicio_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(dt_inicio_vigencia,'dd') <= dt_agenda_trunc_w))
	  and	((coalesce(dt_final_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(dt_final_vigencia,'dd') >= dt_agenda_trunc_w))
	  and	coalesce(nr_minuto_intervalo,0) > 0
	  and	((((ie_feriado_w <> 'S') and (coalesce(ie_feriado,'X') <> 'F')) or (coalesce(ie_feriado,obter_se_agenda_feriado(cd_agenda_p)) = 'S')) or (ie_feriado = 'F' AND ie_feriado_w = 'S'))
	  and (nr_seq_esp_w			= 0 or ie_horario_adicional_w = 'S')
	  and	obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_agenda_p) = 'S'
	  and	((Obter_Semana_Dia_Agecons(dt_agenda_p,ie_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0))
	order by 1,3,4;

C02 CURSOR FOR
	SELECT	a.dt_agenda,
			(a.dt_agenda + (a.nr_minuto_duracao / 1440)) dt_final,
			a.nr_seq_turno
	from 	agenda b,
			agenda_consulta a			
	where 	a.cd_agenda	= b.cd_agenda	
	and		a.cd_agenda	= cd_agenda_p
    and   	a.dt_agenda between dt_agenda_trunc_w and dt_agenda_final_dia_w
	and		a.dt_agenda >= clock_timestamp()
	and		ie_sobra_horario_p	= 'S'
	and		b.ie_gerar_sobra_horario = 'S'
	and 	a.ie_status_agenda not in ('C', 'LF')
	order by	1;
	
--Identificar inconsistencias de integridade referencial nos agendamentos com status Livre/Bloqueado(Onde e realizado o delete nos horarios)	
C05 CURSOR FOR
	SELECT	b.nm_tabela,
		b.nm_integridade_referencial	
	from	tabela_sistema a,
		integridade_referencial b	
	where	a.nm_tabela = b.nm_tabela_referencia
	and	a.nm_tabela = 'AGENDA_CONSULTA'
	order by 1;	
	

BEGIN


select  obter_nr_seq_locale(wheb_usuario_pck.get_nm_usuario)
into STRICT    cd_pais_w
;

select  coalesce(max('S'),'N')
into STRICT    ie_liberado_w
from    tab_pais
where   nr_seq_tab_ref = 1033075
and     cd_pais = cd_pais_w;

qt_dia_inicial_w	:= 2;
qt_dia_final_w		:= 6;
qt_dia_filtro_ini_w	:= 7;
qt_dia_filtro_fim_w	:= 1;

dt_agenda_trunc_w := PKG_DATE_UTILS.start_of(dt_agenda_p,'dd');
dt_agenda_final_dia_w := PKG_DATE_UTILS.end_of(dt_agenda_p,'DAY');
dt_atual_trunc_w	:=	PKG_DATE_UTILS.start_of(clock_timestamp(),'dd');
/*
select  decode(count(*),0,'N','S')
into	ie_manter_livres_w
from    parametro_agenda
where	nvl(ie_forma_excluir_consulta,'N')       = 'S'
and 	cd_estabelecimento = cd_estabelecimento_p;
*/
select 	max(cd_tipo_agenda),
	    max(cd_setor_agenda),
		max(cd_estabelecimento)
into STRICT	cd_tipo_agenda_w,
	    cd_setor_agenda_w,
		cd_estabelecimento_w
from 	agenda
where	cd_agenda = cd_agenda_p;

begin
select	ie_forma_excluir_consulta
into STRICT	ie_manter_livres_w
from	parametro_agenda
where	cd_estabelecimento	= cd_estabelecimento_w;
exception
	when others then
	select	coalesce(max(ie_forma_excluir_consulta),'N')
	into STRICT	ie_manter_livres_w
	from	parametro_agenda
	where	cd_estabelecimento	= cd_estabelecimento_p;
end;

if (ie_manter_livres_w = 'S') or (ie_manter_livres_w = 'E') then
	if (dt_agenda_trunc_w	< dt_atual_trunc_w) then
		qt_gera_horario_w	:= 1;
	else
		begin
		select 	1
		into STRICT 	qt_gera_horario_w
		from 	agenda_controle_horario
		where 	cd_agenda = cd_agenda_p
		and	dt_agenda = dt_agenda_trunc_w  LIMIT 1;
		exception
		when others then
			qt_gera_horario_w	:= 0;
		end;			
	end if;
	if (qt_gera_horario_w	> 0) and
		(dt_agenda_trunc_w   <= dt_atual_trunc_w AND ie_manter_livres_w = 'E') then
		begin
		if (ie_liberado_w = 'N') then
            delete	/*+index(a AGECONS_I2)*/            from 	agenda_consulta a
            where 	cd_agenda		= cd_agenda_p
            and 	((ie_status_agenda	= 'L')
            or	((ie_status_agenda	= 'B') and ie_bloqueado_manual = 'N'))
            and	dt_agenda	< clock_timestamp()
            and 	dt_agenda 		between dt_agenda_trunc_w and dt_agenda_final_dia_w;
        else
            delete
			from 	agenda_consulta a
            where   a.nr_sequencia in (   SELECT  ac.nr_sequencia
                                          FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ((ac.ie_status_agenda	= 'L') or ((ac.ie_status_agenda	= 'B') and ac.ie_bloqueado_manual = 'N')) and ac.dt_agenda	< clock_timestamp() and ac.dt_agenda 		between dt_agenda_trunc_w and dt_agenda_final_dia_w and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
		end if;
		exception
		when others then
			
			open C05;
			loop
			fetch C05 into	
				nm_tabela_w,
				nm_integridade_ref_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin
				
				SELECT	MAX(A.COLUMN_NAME)
				into STRICT	ds_contraint_name_w
				FROM	USER_CONS_COLUMNS A	
				WHERE 	upper(A.CONSTRAINT_NAME) = upper(nm_integridade_ref_w);
				
				if (ds_contraint_name_w IS NOT NULL AND ds_contraint_name_w::text <> '') then
					ds_comando_w := ' 	update	' || nm_tabela_w || '
								set	' || ds_contraint_name_w || ' = null
								where	' || ds_contraint_name_w || ' in (	select	a.nr_sequencia
														from	agenda_consulta a
														where	a.cd_agenda = ' || cd_agenda_p || '
														and	a.dt_agenda < sysdate
														and	a.dt_Agenda between ' || dt_agenda_trunc_w ||' and ' || dt_agenda_final_dia_w || '
														and	((a.ie_status_agenda = ''L'')
														or	((a.ie_status_agenda = ''B'')
														and	(a.ie_bloqueado_manual = ''N'')))) ';					
					
					CALL Exec_sql_Dinamico('HORARIO_LIVRE_CONSULTA', ds_comando_w);				
					
				end if;				
				
				end;
			end loop;
			close C05;
		
		end;		
		
		commit;
	end if;
else
	qt_gera_horario_w	:= 0;
end if;

if (qt_gera_horario_w	= 0) and (cd_tipo_agenda_w in (3,4)) then
	if (ie_manter_livres_w	in ('S','E')) and (ie_gravar_p	= 'S') then
		begin
		insert into agenda_controle_horario(nr_sequencia,
						cd_agenda,
						dt_agenda,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec)
				values (nextval('agenda_controle_horario_seq'),
						cd_agenda_p,
						dt_agenda_trunc_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p);
		commit;
		exception
		when others then
		rollback;
			qt_gera_horario_w	:= 1;
		end;
	end if;

	if (qt_gera_horario_w	= 0) then

		select	coalesce(max(ie_gerar_hor_bloq),'N')
		into STRICT	ie_gerar_hor_bloq_w
		from	agenda
		where	cd_agenda	= cd_agenda_p;

        delete
		from 	agenda_consulta_hor_bloq
		where	dt_agenda between dt_agenda_trunc_w and dt_agenda_final_dia_w
		and	cd_agenda = cd_agenda_p;

		commit;

		select	coalesce(max(HR_QUEBRA_TURNO), '12'),
			coalesce(max(qt_min_quebra_turno), '00')
		into STRICT	HR_QUEBRA_TURNO_W,
			qt_min_QUEBRA_TURNO_W
		from	agenda
		where 	cd_agenda	= cd_agenda_p;


		hr_nada_w	:= PKG_DATE_UTILS.start_of(dt_agenda_p,'year');
		
		--PARAMETRO DA AGENDA ANTIGA - REMOVIDO(tbyegmann - 31/10/2014 - OS 809667)

		--obter_param_usuario(898, 35, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p,ie_excluir_livres_w);


		--PARAMETRO DA AGENDA ANTIGA - REMOVIDO(tbyegmann - 31/10/2014 - OS 809667)

		--obter_param_usuario(898, 52, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p,ie_excluir_livres_fut_w);
		
		ie_excluir_livres_novo_w := obter_param_usuario(821, 126, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_excluir_livres_novo_w);		

		ie_gerar_nome_w := obter_param_usuario(821, 44, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_nome_w);

		ie_status_autor_w := obter_param_usuario(821, 156, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_status_autor_w);

		ie_gerar_hor_falta_w := obter_param_usuario(821, 189, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_hor_falta_w);

		/* verificar feriado */

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_feriado_w
		from 	feriado a, 
			agenda b
		where 	a.cd_estabelecimento = b.cd_estabelecimento
		and		trunc(a.dt_feriado) = trunc(dt_agenda_p)
		and 	b.cd_agenda = cd_agenda_p;
		

		if (ie_manter_livres_w	= 'N') then
			if (ie_excluir_livres_novo_w = 'PF') then
				
                if (ie_liberado_w = 'N') then
                    delete 	/*+index(a AGECONS_I2)*/                    from 	agenda_consulta a
                    where 	cd_agenda		= cd_agenda_p
                    and (ie_status_agenda	= 'L')
                    and 	dt_agenda 		> clock_timestamp()
                    and 	dt_agenda 		between dt_agenda_trunc_w
                        and 	dt_agenda_final_dia_w;
                else
                    delete
					from 	agenda_consulta a
                    where 	a.nr_sequencia in (SELECT ac.nr_sequencia
                                              FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ac.ie_status_agenda = 'L' and ac.dt_agenda 		> clock_timestamp() and ac.dt_agenda 		between dt_agenda_trunc_w and dt_agenda_final_dia_w and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
				end if;

				commit;

			elsif (ie_excluir_livres_novo_w = 'SP') and (ie_consulta_p = 'N') then

                if (ie_liberado_w = 'N') then
                    delete 	/*+index(a AGECONS_I2)*/                    from 	agenda_consulta a
                    where 	cd_agenda		= cd_agenda_p
                    and (ie_status_agenda	= 'L')
                    and 	dt_agenda 		> clock_timestamp();
                else
                    delete
					from 	agenda_consulta a
                    where   a.nr_sequencia in (SELECT ac.nr_sequencia
                                              FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ac.ie_status_agenda = 'L' and ac.dt_agenda 		> clock_timestamp() and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
				end if;

				commit;

			ELSIF	((ie_excluir_livres_novo_w = 'N') or (ie_consulta_p = 'S')) then
					

				BEGIN

				IF (dt_atual_trunc_w = dt_agenda_trunc_w) then

                    if (ie_liberado_w = 'N') then
                        delete	/*+index(a AGECONS_I2)*/                        from 	agenda_consulta a
                        where 	cd_agenda		= cd_agenda_p
                        and (ie_status_agenda	= 'L')
                        and 	dt_agenda 		between   clock_timestamp() and dt_agenda_final_dia_w;
                    else
                        delete
						from 	agenda_consulta a
                        where   a.nr_sequencia in (SELECT ac.nr_sequencia
                                                  FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ac.ie_status_agenda = 'L' and ac.dt_agenda 		between   clock_timestamp() and dt_agenda_final_dia_w and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
					end if;

					commit;
				END IF;

				IF (dt_atual_trunc_w < dt_agenda_trunc_w) then
                     if (ie_liberado_w = 'N') then
                        DELETE	/*+index(a AGECONS_I2)*/                        FROM 	AGENDA_CONSULTA A
                        where 	cd_agenda		= cd_agenda_p
                        and (ie_status_agenda	= 'L')
                        and 	dt_agenda 		between dt_agenda_trunc_w
                            and 	dt_agenda_final_dia_w;
                    else
                        delete
						from 	agenda_consulta a
                        where   a.nr_sequencia in (SELECT ac.nr_sequencia
                                                  FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ac.ie_status_agenda = 'L' and ac.dt_agenda 		between dt_agenda_trunc_w and dt_agenda_final_dia_w and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
					end if;

					commit;
				END IF;

				END;
			END IF;
			IF (dt_atual_trunc_w = dt_agenda_trunc_w) then
                if (ie_liberado_w = 'N')then
                    delete	/*+index(a AGECONS_I2)*/                    from 	agenda_consulta a
                    where 	cd_agenda		= cd_agenda_p
                    and (ie_status_agenda	= 'B')
                    and 	ie_bloqueado_manual 	= 'N'
                    and 	dt_agenda 		> clock_timestamp()
                    and 	dt_agenda 		between dt_atual_trunc_w and dt_agenda_final_dia_w;
                else
                    delete
					from 	agenda_consulta a
                    where   a.nr_sequencia in (SELECT ac.nr_sequencia
                                              FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ac.ie_status_agenda	= 'B' and ac.ie_bloqueado_manual 	= 'N' and ac.dt_agenda 		> clock_timestamp() and ac.dt_agenda between dt_atual_trunc_w and dt_agenda_final_dia_w and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
              end if;
						
				commit;

			ELSIF (dt_atual_trunc_w < dt_agenda_trunc_w) then
                if (ie_liberado_w = 'N')then
                    delete	/*+index(a AGECONS_I2)*/                    from 	agenda_consulta a
                    where 	cd_agenda		= cd_agenda_p
                    and (ie_status_agenda	= 'B')
                    and 	ie_bloqueado_manual 	= 'N'
                    and 	dt_agenda 		> clock_timestamp()
                    and 	dt_agenda between dt_agenda_trunc_w and dt_agenda_final_dia_w;
                else
                    delete
					from 	agenda_consulta a
                    where a.nr_sequencia in (SELECT ac.nr_sequencia
                                              FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ac.ie_status_agenda	= 'B' and ac.ie_bloqueado_manual 	= 'N' and ac.dt_agenda 		> clock_timestamp() and ac.dt_agenda between dt_agenda_trunc_w and dt_agenda_final_dia_w and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
				end if;

				commit;
			END IF;

			IF (ie_excluir_livres_novo_w = 'N') then
				BEGIN

               if (ie_liberado_w = 'N')then
                    delete	/*+index(a AGECONS_I2)*/                    from 	agenda_consulta a
                    where 	cd_agenda		= cd_agenda_p
                    and 	ie_status_agenda	= 'L'
                    and 	dt_agenda between dt_agenda_trunc_w	and dt_agenda_final_dia_w;

                    commit;

                    delete  /*+index(a AGECONS_I2)*/                    from 	agenda_consulta a
                    where 	cd_agenda		= cd_agenda_p
                    and 	ie_status_agenda	= 'L'
                    and 	dt_agenda 		< clock_timestamp();

                    commit;
                else
                    delete
					from 	agenda_consulta a
                    where   a.nr_sequencia in ( SELECT  ac.nr_sequencia
                                                FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ac.ie_status_agenda = 'L' and (ac.dt_agenda < clock_timestamp() or ac.dt_agenda between dt_agenda_trunc_w and dt_agenda_final_dia_w) and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS'))
                                               );

                    commit;
                end if;
				
				END;
			END IF;

		elsif ie_manter_livres_w	= 'S' then /* mantem livres de datas passadas*/
			if (ie_gravar_p	= 'S') then
                if (ie_liberado_w = 'N')then
                    delete 	/*+index(a AGECONS_I2)*/                    from 	agenda_consulta a
                    where 	cd_agenda		= cd_agenda_p
                    and 	((ie_status_agenda	= 'L') or ((ie_status_agenda	= 'B') and ie_bloqueado_manual = 'N'))
                    and 	dt_agenda between dt_agenda_trunc_w	and dt_agenda_final_dia_w
                        and	dt_agenda BETWEEN clock_timestamp() AND dt_agenda_final_dia_w;

                    commit;
                else
                    delete
					from 	agenda_consulta a
                    where   a.nr_sequencia in (SELECT ac.nr_sequencia
                                                FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ((ac.ie_status_agenda	= 'L') or ((ac.ie_status_agenda	= 'B') and ac.ie_bloqueado_manual = 'N')) and ac.dt_agenda between dt_agenda_trunc_w and dt_agenda_final_dia_w and ac.dt_agenda BETWEEN clock_timestamp() AND dt_agenda_final_dia_w and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );

                    commit;
                end if;
			end if;

    		else  /* mantem livres e exclui de datas passadas*/
                if (ie_gravar_p	= 'S') then
                    if (ie_liberado_w = 'N')then
                   		delete 	/*+index(a AGECONS_I2)*/                        from 	agenda_consulta a
                        where 	cd_agenda		= cd_agenda_p
                        and 	((ie_status_agenda	= 'L') or ((ie_status_agenda	= 'B') and ie_bloqueado_manual = 'N'))
                        and 	dt_agenda between dt_agenda_trunc_w	and dt_agenda_final_dia_w;
                        commit;
                    else
                        delete
						from 	agenda_consulta a
                        where   a.nr_sequencia in (   SELECT  ac.nr_sequencia
                                                      FROM agenda_consulta ac
LEFT OUTER JOIN agenda_integrada_item aii ON (ac.nr_sequencia = aii.nr_seq_agenda_cons)
WHERE ac.cd_agenda = cd_agenda_p and ((ac.ie_status_agenda	= 'L') or ((ac.ie_status_agenda	= 'B') and ac.ie_bloqueado_manual = 'N')) and ac.dt_agenda between dt_agenda_trunc_w and dt_agenda_final_dia_w and (coalesce(aii.ie_origem_agendamento::text, '') = '' or aii.ie_origem_agendamento not in ('CP','MS')) );
                        commit;
                    end if;
			end if;
		end if;

		IF (nr_sequencia_w = 0) then
			ie_dia_semana_w	:= obter_cod_dia_semana(dt_agenda_p);
			
			
		END IF;
		COMMIT;
		
		select		coalesce(max(nr_sequencia),0),
				coalesce(max(ie_horario_adicional), 'N')
		into STRICT		nr_seq_esp_w,
				ie_horario_adicional_w
		from		agenda_turno_esp
		where		cd_agenda	= cd_agenda_p
		and		((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (qt_dia_filtro_ini_w,qt_dia_filtro_fim_w))) or (coalesce(ie_dia_semana::text, '') = ''))
		and		obter_se_turno_esp_agecons_vig(dt_agenda,dt_agenda_fim,dt_agenda_p) = 'S';
		
		select	max(coalesce(ie_utiliza_prof_horario,'N')),
			max(cd_pessoa_fisica)
		into STRICT	ie_util_prof_ag_med_req_w,
			cd_prof_agenda_w
		from	agenda
		where	cd_agenda = cd_agenda_p;
		
		select  max(cd_pessoa_fisica)
		into STRICT	cd_prof_agenda_w
		from	medico
		where	cd_pessoa_fisica = cd_prof_agenda_w;
	
		qt_min_minimo_w		:= 5;
		ds_horario_w		:= '';
		qt_gerado_w		:= 0;
		OPEN C01;
		LOOP
		FETCH C01 into
			ie_turno_w,
			nr_seq_turno_w,
			nr_seq_turno_esp_w,
			hr_inicial_w,
			hr_final_w,
			nr_minuto_Intervalo_w,
			ie_classif_agenda_w,
			nr_seq_classif_med_w,
			ds_observacao_w,
			nr_seq_sala_w,
			cd_convenio_padrao_w,
			cd_categoria_padrao_w,
			cd_medico_req_w,
			hr_inicial_intervalo_w,
			hr_final_intervalo_w,
			ie_utiliza_ageweb_w,
			ie_ignora_sobreposicao_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		     	BEGIN			
			ie_gerar_hor_w := 'S';
			
			IF (nr_minuto_intervalo_w < qt_min_minimo_w) then
				qt_min_minimo_w	:= nr_minuto_intervalo_w;
			END IF;
			
			if (qt_horarios_p > 0) and (ie_utiliza_ageweb_w = 'N') then
				ie_gerar_hor_w := 'N';
			end if;

			if (ie_gerar_hor_w = 'S')then/*tratamento para nao ocorrer o erro ORA-01861: literal does not match format string(o literal nao corresponde a string de formato)*/
				begin
				hr_atual_w					:= hr_inicial_w;
				hr_inicial_intervalo_w 		:= PKG_DATE_UTILS.get_datetime(dt_agenda_p,hr_inicial_intervalo_w);
				hr_final_intervalo_w 		:= PKG_DATE_UTILS.get_datetime(dt_agenda_p,hr_final_intervalo_w);
				exception
				when others then
					ds_erro_w := '';			
					
					delete	FROM agenda_controle_horario
					where 	cd_agenda = cd_agenda_p
					and 	dt_agenda = PKG_DATE_UTILS.start_of(hr_atual_w,'dd');
				end;			
			end if;	
			WHILE ((hr_atual_w	< hr_final_w) and
			      ((qt_gerado_w < qt_horarios_p) or (qt_gerado_w = 0)) and (ie_gerar_hor_w = 'S')) LOOP
				BEGIN
				hr_fim_w		:= hr_atual_w + (nr_minuto_Intervalo_w - 1) /1440;
				if	(((hr_atual_w < hr_inicial_intervalo_w) or (hr_atual_w >= hr_final_intervalo_w)) or
					((coalesce(hr_inicial_intervalo_w::text, '') = '') and (coalesce(hr_final_intervalo_w::text, '') = ''))) and (hr_atual_w >= clock_timestamp()) then
					BEGIN

					if (ie_ignora_sobreposicao_w = 'S') then
					    if (ie_gerar_hor_falta_w = 'S') then
						    select coalesce(max(1),0)
							  into STRICT qt_existe_agenda_w
							  from agenda_consulta a,
								   agenda_turno_esp b
						     where a.cd_agenda	= cd_agenda_p
							   and a.nr_seq_turno_esp = b.nr_sequencia
							   and a.nr_Seq_turno_esp = nr_seq_turno_esp_w
							   and a.dt_agenda between PKG_DATE_UTILS.start_of(hr_atual_w,'dd') and PKG_DATE_UTILS.end_of(hr_atual_w,'DAY')
							   and (hr_atual_w between PKG_DATE_UTILS.GET_TIME(a.dt_agenda,  PKG_DATE_UTILS.extract_field('HOUR',a.dt_agenda), PKG_DATE_UTILS.extract_field('MINUTE', a.dt_agenda), 00)
							   and (a.dt_agenda + (a.nr_minuto_duracao - 1) /1440))
							   and a.ie_status_agenda 	not in ('C','LF','F','I');
						else
						    select coalesce(max(1),0)
							  into STRICT qt_existe_agenda_w
							  from agenda_consulta a, agenda_turno_esp b
						     where a.cd_agenda = cd_agenda_p
							   and a.nr_seq_turno_esp = b.nr_sequencia
							   and a.nr_Seq_turno_esp = nr_seq_turno_esp_w
							   and a.dt_agenda between PKG_DATE_UTILS.start_of(hr_atual_w,'dd') and PKG_DATE_UTILS.end_of(hr_atual_w,'DAY')
							   and (hr_atual_w between PKG_DATE_UTILS.GET_TIME(a.dt_agenda,  PKG_DATE_UTILS.extract_field('HOUR',a.dt_agenda), PKG_DATE_UTILS.extract_field('MINUTE', a.dt_agenda), 00)
							   and (a.dt_agenda + (a.nr_minuto_duracao - 1) /1440))
							   and a.ie_status_agenda 	not in ('C','LF');
						end if;
					else
						if (ie_gerar_hor_falta_w = 'S') then
							select 	coalesce(max(1),0)
							  into STRICT 	qt_existe_agenda_w
							  from 	agenda_consulta a
							 where 	a.cd_agenda	= cd_agenda_p
							   and  a.dt_agenda between PKG_DATE_UTILS.start_of(hr_atual_w,'dd') and PKG_DATE_UTILS.end_of(hr_atual_w,'DAY')
							   and  (hr_atual_w between PKG_DATE_UTILS.GET_TIME(a.dt_agenda,  PKG_DATE_UTILS.extract_field('HOUR',a.dt_agenda), PKG_DATE_UTILS.extract_field('MINUTE', a.dt_agenda), 00)
							   and  (a.dt_agenda + (a.nr_minuto_duracao - 1) /1440))
							   and 	a.ie_status_agenda 	not in ('C','LF','F','I')
							   and (not exists (SELECT 1
							                      from agenda_turno_esp b
												 where b.nr_sequencia = a.nr_seq_turno_esp
												   and b.cd_agenda = a.cd_agenda
												   and (a.nr_seq_turno_esp IS NOT NULL AND a.nr_seq_turno_esp::text <> '')
												   and coalesce(b.ie_ignora_sobreposicao,'N') =  'S')
								 or coalesce(a.nr_seq_turno_esp::text, '') = '');
						else
							select 	coalesce(max(1),0)
							  into STRICT 	qt_existe_agenda_w
							  from 	agenda_consulta a
							 where 	a.cd_agenda	= cd_agenda_p
							   and  a.dt_agenda between PKG_DATE_UTILS.start_of(hr_atual_w,'dd') and PKG_DATE_UTILS.end_of(hr_atual_w,'DAY')
							   and	(hr_atual_w between	PKG_DATE_UTILS.GET_TIME(a.dt_agenda,  PKG_DATE_UTILS.extract_field('HOUR',a.dt_agenda), PKG_DATE_UTILS.extract_field('MINUTE', a.dt_agenda), 00)
							   and  (a.dt_agenda + (a.nr_minuto_duracao - 1) /1440))
							   and 	a.ie_status_agenda 	not in ('C','LF')
							   and (not exists (SELECT 1
							                      from agenda_turno_esp b
										  		 where b.nr_sequencia = a.nr_seq_turno_esp
												   and b.cd_agenda = a.cd_agenda
												   and (a.nr_seq_turno_esp IS NOT NULL AND a.nr_seq_turno_esp::text <> '')
												   and coalesce(b.ie_ignora_sobreposicao,'N') =  'S')
								 or coalesce(a.nr_seq_turno_esp::text, '') = '');
						end if;
					end if;
					IF (qt_existe_agenda_w = 0) then
						BEGIN

						nr_seq_motivo_transf_w := Obter_motivo_bloqueio_agenda(cd_agenda_p, hr_atual_w, ie_dia_semana_w, nr_seq_motivo_transf_w);
						
						ie_classif_Agenda_alter_w := ie_classif_agenda_w;
						
						if (ie_turno_w = 2) then
							ie_classif_Agenda_alter_w := coalesce(ie_classif_agenda_w,'L');
						end if;

						ie_classif_Agenda_alter_w := obter_classif_regra_alteracao(cd_tipo_agenda_w, cd_agenda_p, hr_atual_w, ie_classif_Agenda_alter_w);
						ie_bloqueio_w := consistir_bloqueio_agenda(cd_agenda_p, hr_atual_w, ie_dia_semana_w, ie_bloqueio_w, ie_classif_Agenda_alter_w);

						if (ie_bloqueio_w = 'N') then
							nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
													cd_agenda_p,
													ie_classif_Agenda_alter_w, 
													null,
													null,
													cd_setor_agenda_w,
													null,
													null,
													null,
													null, -- considerar somente cd_medico
													hr_atual_w,
													'S',
													'N');
							if (nr_seq_regra_bloq_w > 0) then
								ie_bloqueio_w := 'S';
							end if;	
						end if;

						IF (ie_bloqueio_w 		= 'N') or (ie_gerar_hor_bloq_w	= 'S') then

							IF (ie_gravar_p = 'S') then
								BEGIN
								select nextval('agenda_consulta_seq')
								into STRICT nr_sequencia_w
								;
								BEGIN

								cd_turno_w		:= 0;
								
								
								nr_hr_atual_w := PKG_DATE_UTILS.extract_field('HOUR',hr_atual_w);
								
								IF (nr_hr_atual_w > somente_numero(HR_QUEBRA_TURNO_W)) or
									((nr_hr_atual_w = somente_numero(HR_QUEBRA_TURNO_W)) and (PKG_DATE_UTILS.extract_field('MINUTE', hr_atual_w) >= somente_numero(qt_min_QUEBRA_TURNO_W))) then
									cd_turno_w	:= 1;
								END IF;

								/* Rafael em 30/03/2007 OS52801 */

								select	coalesce(max(nr_seq_hora),0)+1
								into STRICT	nr_seq_hora_w
								from	agenda_consulta
								where	cd_agenda = cd_agenda_p
								and	dt_agenda = hr_atual_w;
								

								insert into agenda_Consulta(
									nr_sequencia,
									cd_agenda,
									dt_agenda,
									nr_minuto_duracao,
									ie_status_agenda,
									ie_classif_agenda,
									nr_seq_classif_med,
									dt_atualizacao,
									nm_usuario,
									nm_paciente,
									nr_seq_sala,
									cd_convenio,
									cd_categoria,
									cd_turno,
									nr_seq_hora,
									nr_seq_turno,
									nr_seq_turno_esp,
									nr_seq_preferencia,
									ds_observacao,
									cd_setor_atendimento,
									ie_bloqueado_manual,
									cd_medico_req,
									nr_seq_motivo_transf,
									ie_autorizacao,
									cd_convenio_turno)
								values (
									nr_sequencia_w,
									cd_agenda_p,
									hr_atual_w,
									nr_minuto_Intervalo_w,
									CASE WHEN ie_bloqueio_w='S' THEN 'B'  ELSE 'L' END ,
									ie_classif_Agenda_alter_w,
									CASE WHEN nr_seq_classif_med_w=0 THEN  null  ELSE nr_seq_classif_med_w END ,
									clock_timestamp(),
									nm_usuario_p,
									CASE WHEN ie_gerar_nome_w='S' THEN substr(ds_observacao_w,1,80)  ELSE null END ,
									CASE WHEN nr_seq_sala_w=0 THEN  null  ELSE nr_seq_sala_w END ,
									CASE WHEN cd_convenio_padrao_w=0 THEN  null  ELSE cd_convenio_padrao_w END ,
									CASE WHEN cd_categoria_padrao_w=0 THEN  null  ELSE cd_categoria_padrao_w END ,
									cd_turno_w,
									nr_seq_hora_w,
									nr_seq_turno_w,
									nr_seq_turno_esp_w,
									obter_pref_horario(hr_atual_w, null, obter_perfil_ativo, nr_seq_turno_w),
									CASE WHEN ie_gerar_nome_w='N' THEN substr(ds_observacao_w,1,80)  ELSE null END ,
									cd_setor_agenda_w,
									CASE WHEN ie_bloqueio_w='S' THEN 'N'  ELSE null END ,
									CASE WHEN ie_util_prof_ag_med_req_w='S' THEN  cd_prof_agenda_w  ELSE cd_medico_req_w END ,
									nr_seq_motivo_transf_w,
									ie_status_autor_w,
									CASE WHEN cd_convenio_padrao_w=0 THEN  null  ELSE cd_convenio_padrao_w END );
								EXCEPTION
									WHEN unique_violation then null;
									WHEN others then
									rollback;
									
									delete	FROM agenda_controle_horario
									where 	cd_agenda = cd_agenda_p
									and 	dt_agenda = PKG_DATE_UTILS.start_of(hr_atual_w,'dd');
									
									commit;
									
									CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(184695, 'ERRO='||substr(SQLERRM,1,1000));
								END;
								if (qt_horarios_p > 0) and (ie_bloqueio_w = 'N') then
									qt_gerado_w	:= qt_gerado_w + 1;
								end if;
								END;
							else
								BEGIN
								IF (coalesce(length(ds_horario_w),0) < 250) and (ie_bloqueio_w <> 'S') then
									ds_horario_w	:= ds_horario_w || PKG_DATE_FORMATERS.TO_VARCHAR(hr_atual_w,'HH24:MI', PKG_DATE_FORMATERS.GETCALENDAR(cd_estabelecimento_p,nm_usuario_p)) || ' ';
								END IF;
								END;
							END IF;
						else
							BEGIN
							select	nextval('agenda_consulta_hor_bloq_seq')
							into STRICT 	nr_seq_hor_bloq_w
							;

							insert into agenda_consulta_hor_bloq( nr_sequencia,
											      dt_atualizacao,
											      nm_usuario,
											      dt_atualizacao_nrec,
											      nm_usuario_nrec,
											      cd_agenda,
											      ie_classif_agenda,
											      nr_minuto_duracao,
											      dt_agenda)
										values ( nr_seq_hor_bloq_w,
											      clock_timestamp(),
											      nm_usuario_p,
											      clock_timestamp(),
											      nm_usuario_p,
											      cd_agenda_p,
											      ie_classif_agenda_w,
											      nr_minuto_Intervalo_w,
											      hr_atual_w);
							END;
						END IF;
						END;
					END IF;
					END;
				END IF;
			
				/* atualizar horario a ser gerado */

				if	((hr_atual_w + nr_minuto_intervalo_w / 1440) >= hr_inicial_intervalo_w) and
					((hr_atual_w + nr_minuto_intervalo_w / 1440) < hr_final_intervalo_w) then
					hr_atual_w := hr_final_intervalo_w;
				else
					hr_atual_w := hr_atual_w + nr_minuto_intervalo_w / 1440;
				end if;
				qt_horario_w 	:= qt_horario_w + 1;
		/*		Elemar - 06/01/03 - permitir gerar qualquer qtde de horarios
				if	(qt_horario_w > 51 ) then
					hr_atual_w	:= hr_final_w + 1;
				end if;
		*/
		END;
			END LOOP;
			END;
		END LOOP;
		CLOSE C01;

		hr_fim_w		:= hr_nada_w;
		ds_observacao_w		:= '';
		ie_classif_agenda_w	:= 'L';


		OPEN C02;
		LOOP
		FETCH C02 into
			hr_inicial_w,
			hr_final_w,
			nr_seq_turno_sobra_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */					
			if	((qt_gerado_w < qt_horarios_p) or (qt_gerado_w = 0)) then				
			
				IF (hr_fim_w <> hr_nada_w) and (hr_inicial_w > hr_fim_w) then
					BEGIN
					/* abreiter -> tamanho do campo nr_minuto_intervalo_w estourava em algumas raras situacoes.*/

					nr_minuto_intervalo_w	:= (hr_inicial_w - hr_fim_w) * 1440;
					hr_atual_w				:= hr_fim_w;
					
					--Nao deve gerar novo horario com base no intervalo inicial/final do turno, somente quando alterada a duracao de um horario ja agendado
					select	coalesce(max((hr_final_intervalo - hr_inicial_intervalo) * 1440),0),
							max(PKG_DATE_UTILS.get_datetime(dt_agenda_p,coalesce(hr_final_intervalo, hr_atual_w))),
							max(PKG_DATE_UTILS.get_datetime(dt_agenda_p,coalesce(hr_inicial_intervalo, hr_atual_w)))
					into STRICT	nr_minuto_int_sobra_w,
							hr_final_intervalo_ww,
							hr_inicial_intervalo_ww
					from	agenda_turno
					where	cd_agenda 		= cd_agenda_p
					and		nr_sequencia 	= nr_seq_turno_sobra_w
					and		((coalesce(dt_inicio_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(dt_inicio_vigencia,'dd') <= dt_agenda_trunc_w))
					and		((coalesce(dt_final_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(dt_final_vigencia,'dd') >= dt_agenda_trunc_w))
					and		(hr_inicial_intervalo IS NOT NULL AND hr_inicial_intervalo::text <> '')
					and		(hr_final_intervalo IS NOT NULL AND hr_final_intervalo::text <> '');

					select coalesce(max(ie_classif_agenda), 'L')
					into STRICT   ie_classif_agenda_w
					from   agenda_turno
					where  nr_sequencia = nr_seq_turno_sobra_w;
					
					select	max(coalesce(((hr_final_intervalo_ww - hr_fim_w) * 1440),0))
					into STRICT	nr_minuto_int_sobra_ww
					;					

					IF (nr_minuto_intervalo_w >= qt_min_minimo_w) and (nr_minuto_intervalo_w <> nr_minuto_int_sobra_w) and
						(((hr_atual_w <= hr_inicial_intervalo_ww) or (coalesce(hr_inicial_intervalo_ww::text, '') = '')) or
						((hr_atual_w >= hr_final_intervalo_ww) or (coalesce(hr_final_intervalo_ww::text, '') = '')))then
						BEGIN

						select	count(*)
						into STRICT	qt_turno_w
						from 	agenda_Turno
						where 	cd_agenda     	= cd_agenda_p
						  and 	ie_dia_semana	= ie_dia_Semana_w
						  and	nr_sequencia 	= nr_seq_turno_sobra_w
					  	  and	((coalesce(dt_inicio_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(dt_inicio_vigencia,'dd') <= dt_agenda_trunc_w))
	  					  and	((coalesce(dt_final_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(dt_final_vigencia,'dd') >= dt_agenda_trunc_w))
						  and	hr_atual_w	between
							PKG_DATE_UTILS.get_datetime(dt_agenda_p,hr_inicial)
							and	PKG_DATE_UTILS.get_datetime(dt_agenda_p,hr_final - 1/1440);

						select	count(*)
						into STRICT	qt_turno_diario_w
						from 	agenda_Turno
						where 	cd_agenda     	= cd_agenda_p
						and	nr_sequencia 	= nr_seq_turno_sobra_w
						  and 	ie_dia_semana	= 9
						  and	((coalesce(dt_inicio_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(dt_inicio_vigencia,'dd') <= dt_agenda_trunc_w))
	  					  and	((coalesce(dt_final_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(dt_final_vigencia,'dd') >= dt_agenda_trunc_w))
						  and	hr_atual_w	between
							PKG_DATE_UTILS.get_datetime(dt_agenda_p,hr_inicial)
							and	PKG_DATE_UTILS.get_datetime(dt_agenda_p,hr_final - 1/1440)
						  and	qt_turno_w	= 0;



						IF (ie_gravar_p = 'S') and
							((qt_turno_w > 0) OR (qt_turno_diario_w > 0)) then
							BEGIN
							select nextval('agenda_consulta_seq')
							into STRICT nr_sequencia_w
							;
							BEGIN

							cd_turno_w		:= 0;
							
							nr_hr_atual_w := PKG_DATE_UTILS.extract_field('HOUR',hr_atual_w);
							
							IF (nr_hr_atual_w > somente_numero(HR_QUEBRA_TURNO_W)) or
								((nr_hr_atual_w = somente_numero(HR_QUEBRA_TURNO_W)) and (PKG_DATE_UTILS.extract_field('MINUTE', hr_atual_w) >= somente_numero(qt_min_QUEBRA_TURNO_W))) then
								cd_turno_w	:= 1;
							END IF;

							/* Rafael em 30/03/2007 OS52801 */

							select	coalesce(max(nr_seq_hora),0)+1
							into STRICT	nr_seq_hora_w
							from	agenda_consulta
							where	cd_agenda = cd_agenda_p
							and		dt_agenda = hr_atual_w;
							
							--Considerar apenas caso o horario alterado for o ultimo antes do inicio do intervalo do turno
							select	max(coalesce(((hr_inicial_w - hr_atual_w) * 1440),0))
							into STRICT	nr_min_dif_sobra_ww
							;							
							
							--Consistir caso for alterado a duracao do ultimo horario, antes de comecar o intervalo do turno
							if (nr_minuto_int_sobra_ww > nr_minuto_int_sobra_w) and (nr_min_dif_sobra_ww = nr_minuto_int_sobra_ww)then
								nr_minuto_Intervalo_w	:= 	(hr_inicial_intervalo_ww - hr_fim_w) * 1440;					
							end if;
							ie_classif_Agenda_alter_w := obter_classif_regra_alteracao(cd_tipo_agenda_w, cd_agenda_p, hr_atual_w, ie_classif_agenda_w);
							insert into agenda_Consulta(
								nr_sequencia,
								cd_agenda,
								dt_agenda,
								nr_minuto_duracao,
								ie_status_agenda,
								ie_classif_agenda,
								nr_seq_classif_med,
								dt_atualizacao,
								nm_usuario,
								nm_paciente,
								nr_seq_sala,
								cd_convenio,
								cd_categoria,
								cd_turno,
								nr_seq_hora,
								ds_observacao,
								cd_setor_atendimento,
								ie_autorizacao,
								cd_convenio_turno)
							values (
								nr_sequencia_w,
								cd_agenda_p,
								hr_atual_w,
								nr_minuto_Intervalo_w,
								'L',
								ie_classif_Agenda_alter_w,
								CASE WHEN nr_seq_classif_med_w=0 THEN  null  ELSE nr_seq_classif_med_w END ,
								clock_timestamp(),
								nm_usuario_p,
								CASE WHEN ie_gerar_nome_w='S' THEN substr(ds_observacao_w,1,80)  ELSE null END ,
								CASE WHEN nr_seq_sala_w=0 THEN  null  ELSE nr_seq_sala_w END ,
								CASE WHEN cd_convenio_padrao_w=0 THEN  null  ELSE cd_convenio_padrao_w END ,
								CASE WHEN cd_categoria_padrao_w=0 THEN  null  ELSE cd_categoria_padrao_w END ,
								cd_turno_w,
								nr_seq_hora_w,
								CASE WHEN ie_gerar_nome_w='N' THEN substr(ds_observacao_w,1,80)  ELSE null END ,
								cd_setor_agenda_w,
								ie_status_autor_w,
								CASE WHEN cd_convenio_padrao_w=0 THEN  null  ELSE cd_convenio_padrao_w END );
							EXCEPTION
								WHEN unique_violation then null;
								WHEN others then
								rollback;
								delete	FROM agenda_controle_horario
									where 	cd_agenda = cd_agenda_p
									and 	dt_agenda = PKG_DATE_UTILS.start_of(hr_atual_w,'dd');
								commit;
								CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(184695, 'ERRO='||substr(SQLERRM,1,1000));
							END;
							END;
						END IF;
						END;
					END IF;
					END;
				END IF;
				IF (hr_final_w > hr_fim_w) then
					hr_fim_w	:= hr_final_w;
				END IF;
			end if;
		END LOOP;
		CLOSE C02;
	end if;
end if;

ds_retorno_p	:= ds_horario_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE horario_livre_consulta ( cd_estabelecimento_p bigint, cd_agenda_p bigint, ie_feriado_p text, dt_agenda_p timestamp, nm_usuario_p text, ie_gravar_p text, ie_sobra_horario_p text, ie_consulta_p text, qt_horarios_p bigint, ds_retorno_p INOUT text) FROM PUBLIC;

