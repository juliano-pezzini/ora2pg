-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baca_ajustar_inco_susunif ( nm_usuario_p text) AS $body$
DECLARE



qt_registro_w		bigint;
qt_carateres_w		integer	:= 0;



BEGIN

/* Felipe 08/01/2008 - Ajustar descrição da inco. 22 - Médico executor sem CNS informado */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 22
	and	ds_inconsistencia	= 'Médico executor sem CNS informado';
	if (qt_registro_w > 0) then
		CALL Exec_sql_Dinamico('Felipe',	'update	sus_inconsistencia ' ||
						'set 	ds_inconsistencia = ' || chr(39) ||
						'Executor do procedimento sem CNS informado ' || chr(39) ||
						'where 	cd_inconsistencia = 22');
	end if;
end if;

/* Felipe 22/01/2008 - Ajustar a ação do usuário da inco. 27 - Procedimento realizado não permite permanencia à maior */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	length(coalesce(max(ds_acao_usuario),0))
	into STRICT	qt_carateres_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 27
	and	ds_inconsistencia	= 'Procedimento realizado não permite permanencia à maior';
	if (qt_carateres_w = 55) then
		CALL Exec_sql_Dinamico('Felipe',	'update	sus_inconsistencia ' ||
						'set 	ds_acao_usuario = ' || chr(39) ||
						'Verificar na função Gestão SUS Unificado - GSU (F10), ' ||
						'se o campo (checkbox) "Permanência a maior" está marcado, ' ||
						'caso contrário o SUS não permite a cobrança de longa permanência ' ||
						'para o procedimento realizado da AIH. ' || chr(39) ||
						'where 	cd_inconsistencia = 27');
	end if;
end if;

/* Felipe 27/01/2008 - Criar inconsistência 32 - CPF do profissional solicitante da AIH não informado */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 32;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				32,
				'CPF do profissional solicitante da AIH não informado',
				'Verificar no Cadastro completo de pessoas (F7), pois não há informação do número do CPF do profissional soliciante da AIH.',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS 80619 - Sus_Consiste_Profissional_Aih',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 27/01/2008 - Criar inconsistência 33 - CPF do profissional responsável da AIH não informado */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 33;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				33,
				'CPF do profissional responsável da AIH não informado',
				'Verificar no Cadastro completo de pessoas (F7), pois não há informação do número do CPF do profissional responsável da AIH.',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS 80619 - Sus_Consiste_Profissional_Aih',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 27/01/2008 - Criar inconsistência 34 - Profissional executante do procedimento não informado */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 34;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				34,
				'Profissional executante do procedimento não informado',
				'Não foi informado um médico ou um profissional executante do procedimento, sendo que de acordo com o manual ' ||
				'do SISAIH01 para esse caso é obrigatória essa informação',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS 80619 - Sus_Consiste_Profissional_Aih',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 27/01/2008 - Criar inconsistência 35 - Tipo do logradouro do paciente não informado */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 35;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				35,
				'Tipo do logradouro do paciente não informado',
				'Deve existir a informação do tipo do logradouro do paciente para ser enviada ao SUS. ' ||
				'Verificar no Cadastro completo de pessoas (F7), pasta Paciente, campo Tipo lograduro. ',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS 80619 - Sus_Consiste_Dados_Pf',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 27/01/2008 - Criar inconsistência 36 - Identificação do recebedor do crédito não informada */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 36;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				36,
				'Identificação do recebedor do crédito não informada',
				'Verificar nos procedimentos lançados o campo Apurar Valor. ' ||
				'Deve existir a informação de quem efetivamente receberá o crédito do procedimento',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS 80619 - Sus_Consiste_Proc',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 27/01/2008 - Criar inconsistência 37 - Cadastramento do indicador de equipe SUS não realizado */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 37;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				37,
				'Cadastramento do indicador de equipe SUS não realizado',
				'Verificar os Cadastros Gerais (Shift + F11), Aplicação principal / Cadastros gerais / Função médico. ' ||
				'No campo Indicador equipe SUS, deve ser informado qual o grau de participação perante ao SUS de acordo com a função médico do Tasy. ' ||
				'Deve existir pelo menos uma vinculação para cada grau de participação do SUS, que são: ' || chr(10) ||
				'0 - Não aplicável; ' || chr(10) ||
				'1 - Primeiro cirurgião; ' || chr(10) ||
				'2 - Primeiro auxiliar; ' || chr(10) ||
				'3 - Segundo auxiliar; ' || chr(10) ||
				'4 - Terceiro auxiliar; ' || chr(10) ||
				'5 - Quarto auxiliar; ' || chr(10) ||
				'6 - Anestesista. ',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS 80619 - Sus_Consiste_Conta',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 04/02/2008 - Criar inconsistência 40 - Motivo de cobrança informado incompatível com o procedimento de psiquiatria */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 40;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				40,
				'Motivo de cobrança informado incompatível com o procedimento de psiquiatria',
				'Verificar na pasta AIH, campo "Saída/perm", pois a informação do mesmo é incompatível com o procedimento realizado de psiquiatria.',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS 81061 - Sus_Consiste_Dados_Aih',
				'N',
				'N');
		commit;
	end if;
end if;

/* Felipe 04/02/2008 - Criar inconsistência 41 - Data de competência da APAC difere do protocolo */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 41;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				41,
				'Data de competência da APAC difere do protocolo',
				'Verificar a data de competência da APAC, pois a mesma difere da data de competência do protocolo.',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS81142 - Sus_Consiste_Apac',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 09/02/2008 - Criar inconsistência 50 - Para motivo de saída de óbito é necessário informação do CID causa morte */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 50;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				50,
				'Para motivo de saída de óbito é necessário informação do CID causa morte',
				'Verificar o CID causa morte da AIH, pois o motivo de saída é de óbito, sendo necessário informar o CID causa morte.',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS82065 - Sus_Consiste_Dados_Aih',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 09/02/2008 - Criar inconsistência 51 - Cartão Pré-Natal não informado para procedimento de parto. */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 51;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				51,
				'Cartão Pré-Natal não informado para procedimento de parto.',
				'Informação do campo Nº Pré-Natal é necessário para procedimentos de parto.',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS82065 - Sus_Consiste_Dados_Aih',
				'S',
				'N');
		commit;
	end if;
end if;

/* Felipe 09/02/2008 - Criar inconsistência 52 - Falta informação do participante anestesista para o procedimento */

if (clock_timestamp() < to_date('10/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 52;
	if (qt_registro_w = 0) then
		insert into sus_inconsistencia(	nr_sequencia,
				cd_inconsistencia,
				ds_inconsistencia,
				ds_acao_usuario,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_doc_wheb,
				ie_consiste,
				ie_permite_liberar)
		values (	nextval('sus_inconsistencia_seq'),
				52,
				'Falta informação do participante anestesista para o procedimento',
				'Para os procedimentos que possuem na funcao Gestão SUS Unificado - GSU o campo inclui anestesia checado, ' ||
				'e constam na regra 3, ou seja, que habilitam a tela para informacao de equipe, ' ||
				'é necessário ser informado um participante anestesista(6). ' ||
				'Obs: atualmente o SISAIH não esta criticando por este motivo mas o SIHD está.',
				clock_timestamp(),
				'Felipe',
				clock_timestamp(),
				'Felipe',
				'OS82312 - Sus_Consiste_Proc',
				'S',
				'N');
		commit;
	end if;
end if;

/* André 17/04/2008 - Ajustar descrição da inco. 91 - Nº Pré natal não informado para conta com procedimento de incentivo ao registro civil lançado */

if (clock_timestamp() < to_date('20/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 91
	and	ds_inconsistencia	= 'Nº Pré natal não informado para conta com procedimento de incentivo ao registro civil lançado';
	if (qt_registro_w > 0) then
		CALL Exec_sql_Dinamico('Andre',	'update	sus_inconsistencia ' ||
						'set 	ds_inconsistencia = ' || chr(39) ||
						'Nº Pré natal não informado para conta com código de Incentivo ao Parto Componente I informado ' || chr(39) ||
						'where 	cd_inconsistencia = 91');
	end if;
end if;

/* André 17/04/2008 - Ajustar descrição da inco. 92 - Procedimento de incentivo ao registro civil não lançado na conta para AIH com Nº Pré natal informado */

if (clock_timestamp() < to_date('20/05/2008','dd/mm/yyyy')) then
	select	count(*)
	into STRICT	qt_registro_w
	from	sus_inconsistencia
	where	cd_inconsistencia	= 92
	and	ds_inconsistencia	= 'Procedimento de incentivo ao registro civil não lançado na conta para AIH com Nº Pré natal informado';
	if (qt_registro_w > 0) then
		CALL Exec_sql_Dinamico('Andre',	'update	sus_inconsistencia ' ||
						'set 	ds_inconsistencia = ' || chr(39) ||
						'Procedimento de incentivo ao Parto Componente I não lançado na conta para AIH com Nº Pré natal informado ' || chr(39) ||
						'where 	cd_inconsistencia = 92');
	end if;
end if;
commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baca_ajustar_inco_susunif ( nm_usuario_p text) FROM PUBLIC;

