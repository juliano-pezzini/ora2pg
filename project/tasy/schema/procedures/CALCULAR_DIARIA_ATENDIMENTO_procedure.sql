-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_diaria_atendimento (CD_ESTABELECIMENTO_P bigint, NR_ATENDIMENTO_P bigint, DT_ENTRADA_P timestamp, DT_PARAMETRO_P timestamp, NM_USUARIO_P text, IE_DIFERENCA_DIARIA_P text, IE_DIARIA_ACOMPANHANTE_P text, ie_evento_diaria_p text, DT_ALTA_P timestamp DEFAULT NULL, NR_SEQ_PAT_CAT_NEW_P bigint default 0) AS $body$
DECLARE


ds_erro_w		varchar(4000);
DT_ATUALIZACAO_W        	timestamp 		:= clock_timestamp();

vl_Categoria_w		double precision;
vl_diferenca_w		double precision;
ie_calculo_diferenca_w	varchar(1);


cd_setor_atendimento_ler_w	integer;
dt_entrada_unidade_ler_w	timestamp;
cd_tipo_acomodacao_ler_w	smallint;
dt_saida_unidade_ler_w	timestamp;
qt_tempo_Setor_ler_w	double precision;
cd_tipo_acomod_unid_ler_w	smallint;
cd_classif_setor_ler_w	varchar(02);
cd_procedimento_ler_w	bigint;
ie_origem_proced_ler_w	bigint;
vl_proc_diaria_ler_w	double precision	:= 0;
vl_proc_diaria_w		double precision	:= 0;

cd_classif_setor_w		varchar(02);
cd_setor_atendimento_w  	integer;
dt_entrada_unidade_w    	timestamp;
cd_tipo_acomodacao_w	smallint;
dt_saida_unidade_w	timestamp;
qt_tempo_Setor_w		double precision;

cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_procedimento_dif_w		bigint;
ie_origem_proced_dif_w		bigint;
hr_virada_diaria_w		timestamp;
hr_margem_ant_virdia_w		timestamp;
hr_margem_pos_virdia_w		timestamp;
dt_margem_ant_w			timestamp;
dt_margem_pos_w			timestamp;
dt_virada_w			timestamp;
dt_seguinte_w	        	timestamp;
cd_convenio_partic_w		integer  := 0;
cd_categoria_partic_w		varchar(10) := '';
cd_convenio_w           	integer  := 0;
cd_categoria_w			varchar(10) := '';
nr_doc_convenio_w       	varchar(20) := '';
ie_forma_calculo_diaria_w	varchar(1);
cd_tipo_acomod_conv_w		smallint;
cd_tipo_acomod_unid_w		smallint;
dt_diaria_w			timestamp;
dt_inicio_diaria_w		timestamp;
dt_final_diaria_w		timestamp;

nr_acomp_convenio_w		smallint;
nr_acomp_Setor_w		smallint;
nr_acomp_Unidade_w		smallint;
nr_acomp_Unidade_Ler_w		smallint;
cd_procedimento_acomp_w		bigint;
ie_origem_proced_acomp_w	bigint;
cd_nivel_convenio_w		smallint;
cd_nivel_setor_w		smallint;
ie_calcula_diaria_apos_vig_w	varchar(01) := 'N';
ie_clinica_w			integer;
ie_tipo_atendimento_w		smallint;
ie_carater_internacao_w		varchar(02);
ie_calcula_diaria_w		varchar(1)	:= 'S';

qt_dia_int_w			bigint;
qt_dia_int_unid_w		bigint;
qt_dia_inicio_w			integer;

nr_sequencia_w			bigint;
dt_diaria_proc_w		timestamp;
dt_alta_pac_w			timestamp;

qt_ano_min_acomp_w		smallint;
qt_ano_max_acomp_w		smallint;
qt_anos_paciente_w		smallint;
ie_calcular_dif_diaria_w	varchar(1);
IE_GERAR_DIARIA_FUTURA_w	varchar(1);
nr_seq_classificacao_ww		bigint;

nr_seq_classificacao_w		bigint;
ie_paciente_isolado_w		varchar(1);

ie_gerar_primeiro_dia_w		varchar(1):= 'S';
ie_origem_proc_conv_w		bigint;
ie_tipo_convenio_w		smallint;
nr_seq_proced_int_w		bigint;
nr_seq_proced_int_ler_w		bigint;
nr_seq_proced_int_conv_w	bigint;
cd_procedimento_ww		bigint;
ie_origem_proced_ww		bigint;

nr_seq_interno_w		bigint;
cd_tipo_acomod_diferente_w	bigint;
cd_tipo_acomod_orig_w		bigint;

qt_dispensa_diaria_w		bigint;
qt_virada_diaria_w 		bigint;
qt_margem_ant_virdia_w		bigint;
qt_regra_extra_dia_w		bigint;

cd_setor_atendimento_c20	bigint;
ie_clinica_c20			bigint;
cd_convenio_c20			bigint;
cd_categoria_c20		varchar(10);
cd_plano_w			varchar(10);
cd_pessoa_fisica_w		varchar(10);
qt_idade_w			double precision;
cd_unidade_basica_w		varchar(10);
cd_unidade_compl_w		varchar(10);
cd_unidade_basica_ler_w		varchar(10);
cd_unidade_compl_ler_w		varchar(10);
ie_sexo_w			varchar(1);
nr_seq_motivo_transf_w atend_paciente_unidade.nr_seq_motivo_transf%type;
ie_cobra_dif_diaria_w varchar(1);
ie_passagem_setor_w		atend_paciente_unidade.ie_passagem_setor%type;
dt_unidade_transf_w		atend_paciente_unidade.dt_entrada_unidade%type;
dt_unidade_transf_ler_w		atend_paciente_unidade.dt_entrada_unidade%type;

------ RULE for considering the patient catefory. The field is informed in Patient Registration and also there is a Core Table Setting Patient Category
nr_seq_patient_category_w	patient_category.nr_sequencia%type;
nr_patient_category_log_w	patient_category_log.nr_sequencia%type:=0;
qt_exist_category_log_w		bigint;
qt_exist_rule_w				bigint;
dt_start_category_w			patient_category_log.dt_start_category%type;
qt_days_paid_w				bigint;

------ RULE for considering a group of billing according to accommodation
nr_seq_grupo_rule_w			acc_rule_group.nr_sequencia%type;
qt_existe_rule_w			bigint;

cd_doenca_w					cid_doenca.cd_doenca_cid%type;
cd_proc_principal_w			procedimento.cd_procedimento%type;
ie_origem_proced_rule_w		procedimento.ie_origem_proced%type;

nr_interno_conta_w			conta_paciente.nr_interno_conta%type;

------ RULE for considering billing according to patient category in ICU. This considers only ICU patients. The changes will be applicable to Australia only. Refer to SO1991100 for details.
ie_patient_category_w    	icunsw_daily.ie_patient_category%type;
nr_icu_assessment_count_w 	bigint;

ie_consider_cutoff_hour_w	parametro_faturamento.ie_consider_cutoff_hour%type;
ie_diaria_dia_ant_w             parametro_faturamento.ie_diaria_dia_ant%type;
qt_diaria_entrada_w		bigint;
dt_fim_diaria_entrada_w		atend_paciente_unidade.dt_saida_unidade%type;
dt_parametro_w                  timestamp;
dt_entrada_w                    timestamp;

C10 CURSOR FOR
SELECT	a.cd_setor_atendimento,
	a.dt_entrada_unidade,
	coalesce(a.dt_saida_unidade,to_date('2999','yyyy')),
	a.cd_tipo_acomodacao,
	b.cd_classif_setor,
	coalesce(a.nr_acompanhante,0),
	c.hr_virada_diaria,
	c.cd_procedimento,
	c.ie_origem_proced,
	coalesce(a.ie_calcular_dif_diaria, IE_DIFERENCA_DIARIA_P),
	c.nr_seq_proced_int,
	a.nr_seq_interno,
	a.cd_unidade_basica,
	a.cd_unidade_compl,
	a.nr_seq_motivo_transf,
	substr(obter_tipo_unidade_atend(a.nr_atendimento, a.nr_seq_interno, a.ie_passagem_setor),1,1)
from	tipo_acomodacao c,
	setor_atendimento b,
	atend_paciente_unidade a
where (a.cd_setor_atendimento	= b.cd_setor_atendimento)
and (b.cd_classif_setor in (3,4,8,9))
and (coalesce(a.dt_saida_unidade,to_date('2999','yyyy')) > dt_parametro_p -1)
and	((a.dt_entrada_unidade	<= dt_parametro_p)  or (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_entrada_unidade)<= dt_parametro_p and coalesce(ie_consider_cutoff_hour_w,'N') = 'S'))
and (a.nr_atendimento	= nr_atendimento_p)
and (a.cd_tipo_acomodacao	= c.cd_tipo_acomodacao)
order by 2;

C20 CURSOR FOR   -- As variaveis c20 esta aqui apenas devido ao order by do cursor
SELECT	cd_procedimento,
	ie_origem_proced,
	coalesce(cd_procedimento_acomp, cd_procedimento_acomp_w),
	coalesce(ie_origem_proced_acomp, ie_origem_proced_acomp_w),
	qt_dia_inicio,
	coalesce(nr_seq_classificacao, 0),
	coalesce(ie_gerar_primeiro_dia,'S'),
	nr_seq_proced_int,
	coalesce(cd_setor_atendimento,0),
	coalesce(ie_clinica,0),
	coalesce(cd_convenio,0),
	coalesce(cd_categoria,'0')
from	tipo_acomod_convenio
where	cd_tipo_acomodacao	= cd_tipo_acomodacao_w
and	((coalesce(cd_convenio::text, '') = '') or (cd_convenio	= cd_convenio_w))
and	((coalesce(cd_categoria::text, '') = '') or (cd_categoria = cd_categoria_w))
and	coalesce(cd_plano, coalesce(cd_plano_w,'0')) = coalesce(cd_plano_w,'0')
and	coalesce(ie_clinica, coalesce(ie_clinica_w, 0)) = coalesce(ie_clinica_w, 0)
and	qt_dia_int_w between qt_dia_inicio and qt_dia_fim
and	((coalesce(cd_setor_atendimento::text, '') = '') or (cd_setor_atendimento = cd_setor_atendimento_w))
and	coalesce(cd_unidade_basica, coalesce(cd_unidade_basica_w,'@')) = coalesce(cd_unidade_basica_w,'@')
and	coalesce(cd_unidade_compl, coalesce(cd_unidade_compl_w,'@')) = coalesce(cd_unidade_compl_w,'@')
and	((coalesce(ie_carater_internacao::text, '') = '') or (ie_carater_internacao = ie_carater_internacao_w))
and	((coalesce(nr_seq_classificacao::text, '') = '') or (nr_seq_classificacao = nr_seq_classificacao_w))
and	((coalesce(ie_paciente_isolado,'A') = 'A') or (coalesce(ie_paciente_isolado,'A') = ie_paciente_isolado_w))
and ((coalesce(ie_origem_proc_conv::text, '') = '') or (ie_origem_proc_conv = ie_origem_proc_conv_w))
and ((coalesce(nr_seq_group_rule::text, '') = '') or (nr_seq_group_rule = nr_seq_grupo_rule_w))
and	((coalesce(nr_seq_patient_category::text, '') = '') or (nr_seq_patient_category = nr_seq_patient_category_w))
and	coalesce(qt_idade_w,0) between coalesce(obter_idade_tipo_acomod_conv(nr_sequencia,'MIN'),0) and coalesce(obter_idade_tipo_acomod_conv(nr_sequencia,'MAX'),9999999)
and	coalesce(nr_acomp_convenio_w, 0) between coalesce(nr_acomp_inicial,0) and coalesce(nr_acomp_final, coalesce(nr_acomp_convenio_w, 0))
and	IE_TIPO_DIA_INTERNACAO	= 'E'
and	coalesce(ie_sexo, coalesce(ie_sexo_w, 'I')) = coalesce(ie_sexo_w, 'I')
and ((coalesce(ie_patient_category::text, '') = '') or (ie_patient_category = ie_patient_category_w)) -- changes done for SO1991100
union

SELECT	cd_procedimento,
	ie_origem_proced,
	coalesce(cd_procedimento_acomp, cd_procedimento_acomp_w),
	coalesce(ie_origem_proced_acomp, ie_origem_proced_acomp_w),
	qt_dia_inicio,
	coalesce(nr_seq_classificacao, 0),
	coalesce(ie_gerar_primeiro_dia, 'S'),
	nr_seq_proced_int,
	coalesce(cd_setor_atendimento,0),
	coalesce(ie_clinica,0),
	coalesce(cd_convenio,0),
	coalesce(cd_categoria,'0')
from	tipo_acomod_convenio
where	cd_tipo_acomodacao	= cd_tipo_acomodacao_w
and	((coalesce(cd_convenio::text, '') = '') or (cd_convenio	= cd_convenio_w))
and	((coalesce(cd_categoria::text, '') = '') or (cd_categoria	= cd_categoria_w))
and	coalesce(cd_plano, coalesce(cd_plano_w,'0')) = coalesce(cd_plano_w,'0')
and	coalesce(ie_clinica, coalesce(ie_clinica_w, 0)) = coalesce(ie_clinica_w, 0)
and	qt_dia_int_unid_w between qt_dia_inicio and qt_dia_fim
and	((coalesce(cd_setor_atendimento::text, '') = '') or (cd_setor_atendimento = cd_setor_atendimento_w))
and	coalesce(cd_unidade_basica, coalesce(cd_unidade_basica_w,'@')) = coalesce(cd_unidade_basica_w,'@')
and	coalesce(cd_unidade_compl, coalesce(cd_unidade_compl_w,'@')) = coalesce(cd_unidade_compl_w,'@')
and	((coalesce(ie_carater_internacao::text, '') = '') or (ie_carater_internacao = ie_carater_internacao_w))
and	((coalesce(nr_seq_classificacao::text, '') = '') or (nr_seq_classificacao = nr_seq_classificacao_w))
and	((coalesce(ie_paciente_isolado,'A') = 'A') or (coalesce(ie_paciente_isolado,'A') = ie_paciente_isolado_w))
and ((coalesce(ie_origem_proc_conv::text, '') = '') or (ie_origem_proc_conv = ie_origem_proc_conv_w))
and ((coalesce(nr_seq_group_rule::text, '') = '') or (nr_seq_group_rule = nr_seq_grupo_rule_w))
and	((coalesce(nr_seq_patient_category::text, '') = '') or (nr_seq_patient_category = nr_seq_patient_category_w))
and	coalesce(qt_idade_w,0) between coalesce(obter_idade_tipo_acomod_conv(nr_sequencia,'MIN'),0) and coalesce(obter_idade_tipo_acomod_conv(nr_sequencia,'MAX'),9999999)
and	coalesce(nr_acomp_convenio_w, 0) between coalesce(nr_acomp_inicial,0) and coalesce(nr_acomp_final, coalesce(nr_acomp_convenio_w, 0))
and	IE_TIPO_DIA_INTERNACAO	= 'U'
and	coalesce(ie_sexo, coalesce(ie_sexo_w, 'I')) = coalesce(ie_sexo_w, 'I')
and ((coalesce(ie_patient_category::text, '') = '') or (ie_patient_category = ie_patient_category_w)) -- changes done for SO1991100
order by qt_dia_inicio,
	6, -- nr_seq_classificacao
	9, -- cd_setor
	10, -- ie_clicnica
	11, -- cd_convenio
	12; -- cd_categoria
C30 CURSOR FOR
SELECT	ie_calcula
from	tipo_atend_diaria
where	ie_tipo_atendimento	= ie_tipo_atendimento_w
and	cd_estabelecimento	= cd_estabelecimento_p
and	((coalesce(cd_convenio::text, '') = '') or (cd_convenio = cd_convenio_w))
order by
	cd_convenio desc;


BEGIN

select	count(*)
into STRICT	qt_dispensa_diaria_w
from 	dispensa_diaria_periodo
where	cd_estabelecimento	= cd_estabelecimento_p
and 	coalesce(ie_situacao,'I') = 'A';

select	coalesce(max(ie_clinica),0),
	coalesce(max(IE_CARATER_INTER_SUS),'0'),
	coalesce(max(ie_tipo_atendimento),0),
	coalesce(max(nr_seq_classificacao),0)
into STRICT	ie_clinica_w,
	ie_carater_internacao_w,
	ie_tipo_atendimento_w,
	nr_seq_classificacao_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_p;

select	coalesce(max(ie_diaria_apos_vig),'N'),
	max(qt_ano_min_acomp),
	max(qt_ano_max_acomp),
	coalesce(max(IE_GERAR_DIARIA_FUTURA), 'S'),
	coalesce(max(ie_consider_cutoff_hour),'N'),
        coalesce(max(ie_diaria_dia_ant), 'N')
into STRICT	ie_calcula_diaria_apos_vig_w,
	qt_ano_min_acomp_w,
	qt_ano_max_acomp_w,
	IE_GERAR_DIARIA_FUTURA_w,
	ie_consider_cutoff_hour_w,
        ie_diaria_dia_ant_w
from	parametro_faturamento
where	cd_estabelecimento	= CD_ESTABELECIMENTO_P;

dt_parametro_w  := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_parametro_p);
dt_entrada_w    := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_p);
qt_dia_int_w    := dt_parametro_w - dt_entrada_w;


select	count(*)
into STRICT	qt_exist_rule_w
from	patient_class_category
where	coalesce(ie_situacao,'A') = 'A';

select	coalesce(sum(qt_dias_pagamento),0)
into STRICT	qt_days_paid_w
from	pessoa_fisica_taxa
where	nr_atendimento = nr_atendimento_p;


if (qt_exist_rule_w > 0) then
	begin

	begin
	select	dt_start_category
	into STRICT	dt_start_category_w
	from	patient_category_log
	where	(dt_start_category IS NOT NULL AND dt_start_category::text <> '')
	and		coalesce(dt_end_category::text, '') = ''
	and		nr_atendimento = nr_atendimento_p;
	exception
	when others then
		dt_start_category_w := null;
	end;

	if (dt_start_category_w IS NOT NULL AND dt_start_category_w::text <> '') then
                dt_start_category_w     := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_start_category_w);
		qt_dia_int_w := dt_parametro_w - dt_start_category_w;

		if (qt_dia_int_w < 1) then
			qt_dia_int_w := dt_parametro_w - dt_entrada_w;
		else
		  qt_dia_int_w := dt_start_category_w - dt_entrada_w + qt_dia_int_w;
		end if;
	else
		begin
		  qt_dia_int_w := dt_parametro_w - dt_entrada_w;

		  -- When the patient is transferred from another hospital, the counting of the length of stay must start by the sum of days stayed the another hospital
		  qt_dia_int_w := qt_dia_int_w + qt_days_paid_w;
		end;

	end if;


	end;
end if;

if ( ie_consider_cutoff_hour_w = 'S' ) then
	qt_dia_int_w:= qt_dia_int_w +1;
end if;

if (qt_dia_int_w < 1) then
	qt_dia_int_w := dt_parametro_w - dt_entrada_w;
end if;

/*  Calcular pelo Ultimo Setor(U)/Primeiro(P) ou Maior Tempo(M)  */

ie_forma_calculo_diaria_w   := 'M';

/* Calculo de diarias */

begin
	select	count(*)
	into STRICT	qt_exist_category_log_w
	from	patient_category_log
	where	nr_atendimento = nr_atendimento_p;

	if (qt_exist_category_log_w > 0) then
	begin
		begin
		select	d.cd_convenio,
			d.cd_categoria,
			d.nr_doc_convenio,
			d.cd_tipo_acomodacao,
			coalesce(d.nr_acompanhante,0),
			d.cd_plano_convenio
		into STRICT	cd_convenio_w,
			cd_categoria_w,
			nr_doc_convenio_w,
			cd_tipo_acomod_conv_w,
			nr_acomp_convenio_w,
			cd_plano_w
		from 	convenio c,
			atend_categoria_convenio d
		where d.nr_atendimento	= nr_atendimento_p
		and 	d.cd_convenio		= c.cd_convenio
		and	d.dt_inicio_vigencia	= (
			SELECT max(dt_inicio_vigencia)
			from atend_categoria_convenio b
			where	nr_atendimento= nr_atendimento_p
			and	dt_parametro_p between	CASE WHEN ie_consider_cutoff_hour_w='S' THEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_inicio_vigencia) WHEN ie_consider_cutoff_hour_w='N' THEN b.dt_inicio_vigencia  ELSE b.dt_inicio_vigencia END  and
				CASE WHEN ie_calcula_diaria_apos_vig_w='N' THEN coalesce(b.dt_final_vigencia, to_date('2999','yyyy'))  ELSE clock_timestamp() + interval '30 days' END )
			and 	not exists(
				SELECT x.nr_atendimento
				from procedimento_paciente x
				where x.nr_atendimento  = d.nr_atendimento
				and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
				and	((	x.cd_procedimento in (
						select distinct(cd_procedimento)
						from tipo_acomodacao
						
union

						select distinct(cd_procedimento)
						from tipo_acomod_convenio)
					) or (
						x.nr_seq_proc_interno in (
						select distinct(nr_seq_proced_int)
						from tipo_acomodacao
						
union

						select distinct(nr_seq_proced_int)
						from tipo_acomod_convenio)
					))
				and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(x.dt_procedimento) = dt_parametro_w);
                 
			exception  when no_data_found then
                select	d.cd_convenio,
                d.cd_categoria,
                d.nr_doc_convenio,
                d.cd_tipo_acomodacao,
                coalesce(d.nr_acompanhante,0),
                d.cd_plano_convenio
            into STRICT	cd_convenio_w,
                cd_categoria_w,
                nr_doc_convenio_w,
                cd_tipo_acomod_conv_w,
                nr_acomp_convenio_w,
                cd_plano_w
            from 	convenio c,
                atend_categoria_convenio d
            where d.nr_atendimento	= nr_atendimento_p
            and 	d.cd_convenio		= c.cd_convenio
            and	d.dt_inicio_vigencia	= (
                SELECT max(b.dt_inicio_vigencia)
                from atend_categoria_convenio b
                where	b.nr_atendimento= nr_atendimento_p
                and	dt_parametro_p between	CASE WHEN ie_consider_cutoff_hour_w='S' THEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_inicio_vigencia) WHEN ie_consider_cutoff_hour_w='N' THEN b.dt_inicio_vigencia  ELSE b.dt_inicio_vigencia END  and
                    CASE WHEN ie_calcula_diaria_apos_vig_w='N' THEN coalesce(b.dt_final_vigencia, to_date('2999','yyyy'))  ELSE clock_timestamp() + interval '30 days' END )
                and 	exists(
                    SELECT x.nr_atendimento
                    from procedimento_paciente x
                    where x.nr_atendimento  = d.nr_atendimento
                    and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
                    and	((	x.cd_procedimento in (
                            select distinct(y.cd_procedimento)
                            from tipo_acomodacao y
                            
union

                            select distinct(z.cd_procedimento)
                            from tipo_acomod_convenio z)
                        ) or (
                            x.nr_seq_proc_interno in (
                            select distinct(y.nr_seq_proced_int)
                            from tipo_acomodacao y
                            
union

                            select distinct(z.nr_seq_proced_int)
                            from tipo_acomod_convenio z)
                        ))
                    and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(x.dt_procedimento) = dt_parametro_w);
             end;

		select	min(nr_sequencia)
		into STRICT	nr_patient_category_log_w
		from	patient_category_log
		where	nr_atendimento = nr_atendimento_p
      	and     dt_parametro_w >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_start_category)
        and     dt_parametro_w < ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(dt_end_category,clock_timestamp()));

	  if (nr_patient_category_log_w=0 or coalesce(nr_patient_category_log_w::text, '') = '') then
		select	coalesce(min(nr_sequencia),0)
		into STRICT	nr_patient_category_log_w
		from	patient_category_log
		where	nr_atendimento = nr_atendimento_p
    	and		dt_parametro_w <= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_start_category);
	  end if;
		

			nr_seq_patient_category_w:= nr_seq_pat_cat_new_p;

	end;
	elsif (qt_exist_category_log_w = 0) then
		begin

		select	d.cd_convenio,
			d.cd_categoria,
			d.nr_doc_convenio,
			d.cd_tipo_acomodacao,
			coalesce(d.nr_acompanhante,0),
			d.cd_plano_convenio,
			d.nr_seq_patient_category
		into STRICT	cd_convenio_w,
			cd_categoria_w,
			nr_doc_convenio_w,
			cd_tipo_acomod_conv_w,
			nr_acomp_convenio_w,
			cd_plano_w,
			nr_seq_patient_category_w
		from 	convenio c,
			atend_categoria_convenio d
		where d.nr_atendimento	= nr_atendimento_p
		and 	d.cd_convenio		= c.cd_convenio
		and	d.dt_inicio_vigencia	= (
			SELECT max(dt_inicio_vigencia)
			from atend_categoria_convenio b
			where	nr_atendimento= nr_atendimento_p
			and	dt_parametro_p between	CASE WHEN ie_consider_cutoff_hour_w='S' THEN ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_inicio_vigencia) WHEN ie_consider_cutoff_hour_w='N' THEN b.dt_inicio_vigencia  ELSE b.dt_inicio_vigencia END  and
				CASE WHEN ie_calcula_diaria_apos_vig_w='N' THEN coalesce(b.dt_final_vigencia, to_date('2999','yyyy'))  ELSE clock_timestamp() + interval '30 days' END )
			and 	not exists(
				SELECT x.nr_atendimento
				from procedimento_paciente x
				where x.nr_atendimento  = d.nr_atendimento
				and	coalesce(x.cd_motivo_exc_conta::text, '') = ''
				and	((	x.cd_procedimento in (
						select distinct(cd_procedimento)
						from tipo_acomodacao
						
union

						select distinct(cd_procedimento)
						from tipo_acomod_convenio)
					) or (
						x.nr_seq_proc_interno in (
						select distinct(nr_seq_proced_int)
						from tipo_acomodacao
						
union

						select distinct(nr_seq_proced_int)
						from tipo_acomod_convenio)
					))
				and	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(x.dt_procedimento) = dt_parametro_w);

		end;
	end if;
exception
when others then
	cd_convenio_w		:= 0;
end;

qt_tempo_setor_w		:= 0;
cd_setor_atendimento_w   	:= 0;
nr_acomp_Unidade_w		:= 0;
cd_unidade_basica_w		:= '@';
cd_unidade_compl_w		:= '@';


------ Rule for getting the billing group of accommodation (Shift+F11)
select	count(1)
into STRICT	qt_existe_rule_w
from	acc_rule_group a,
        tipo_acomod_convenio b
where   a.nr_sequencia = b.nr_seq_group_rule;

if (qt_existe_rule_w > 0) then
	begin
	nr_seq_grupo_rule_w := 0;

	select	/*+ index(a conpaci_atepaci_fk_i) */			max(a.nr_interno_conta)
	into STRICT	nr_interno_conta_w
	from	convenio 		c,
			conta_paciente 		a
	where	a.cd_convenio_calculo		= c.cd_convenio
	and		a.nr_atendimento			= nr_atendimento_p
	and		a.cd_estabelecimento		= cd_estabelecimento_p
	and		a.cd_convenio_parametro		= cd_convenio_w
	and		a.cd_categoria_parametro	= cd_categoria_w
	and		a.ie_status_acerto			= 1
	and		coalesce(a.nr_seq_protocolo::text, '') = ''
	and 	dt_parametro_p between	a.dt_periodo_inicial and a.dt_periodo_final;

	select	coalesce(Obter_Proc_Principal(nr_atendimento_p,cd_convenio_w,ie_tipo_atendimento_w,nr_interno_conta_w,'CD'),0) cd_proc_princ,
			coalesce(Obter_Proc_Principal(nr_atendimento_p,cd_convenio_w,ie_tipo_atendimento_w,nr_interno_conta_w,'IO'),0) ie_origem_proced
	into STRICT	cd_proc_principal_w,
			ie_origem_proced_rule_w
	;

	if (cd_proc_principal_w <> 0) then

		nr_seq_grupo_rule_w := obtain_acc_structure_rule(cd_proc_principal_w,ie_origem_proced_rule_w,null,nm_usuario_p);

	else
		select  coalesce(max(a.cd_doenca),'0')
		into STRICT	cd_doenca_w
		from    diagnostico_doenca a
		where   a.nr_atendimento = nr_atendimento_p
		and     a.ie_classificacao_doenca = 'P'
		and     a.dt_liberacao = (SELECT  max(x.dt_liberacao)
								  from    diagnostico_doenca x
								  where   x.nr_atendimento = nr_atendimento_p
								  and     x.ie_classificacao_doenca = 'P'
								  and     (x.dt_liberacao IS NOT NULL AND x.dt_liberacao::text <> '')
								  and     x.ie_situacao = 'A');

		if (cd_doenca_w <> '0') then
			nr_seq_grupo_rule_w := obtain_acc_structure_rule(null,null,cd_doenca_w,nm_usuario_p);
		end if;

	end if;

	end;
end if;


OPEN C30;
LOOP
FETCH C30 into
	ie_calcula_diaria_w;
EXIT WHEN NOT FOUND; /* apply on c30 */
	begin
	if (ie_calcula_diaria_w	= 'N') then
		cd_convenio_w	:= 0;
	end if;
	end;
END LOOP;
CLOSE C30;

if (cd_convenio_w > 0) then
	begin

	select	max(ie_regra)
	into STRICT	ie_forma_calculo_diaria_w
	from	convenio_regra_diaria
	where	cd_convenio		= cd_convenio_w
	and	cd_estabelecimento	= cd_estabelecimento_p;

	if (coalesce(ie_forma_calculo_diaria_w::text, '') = '') then
		select	coalesce(max(ie_regra),'M')
		into STRICT	ie_forma_calculo_diaria_w
		from	convenio_regra_diaria
		where	coalesce(cd_convenio::text, '') = ''
		and	cd_estabelecimento	= cd_estabelecimento_p;
	end if;

	OPEN C10;
	LOOP
	FETCH C10 into
		cd_setor_atendimento_Ler_w,
		dt_entrada_unidade_Ler_w,
		dt_saida_unidade_Ler_w,
		cd_tipo_acomod_unid_ler_w,
		cd_classif_setor_ler_w,
		nr_acomp_Unidade_ler_w,
		hr_virada_diaria_w,
		cd_procedimento_ler_w,
		ie_origem_proced_ler_w,
		ie_calcular_dif_diaria_w,
		nr_seq_proced_int_ler_w,
		nr_seq_interno_w,
		cd_unidade_basica_ler_w,
		cd_unidade_compl_ler_w,
		nr_seq_motivo_transf_w,
		ie_passagem_setor_w;
	EXIT WHEN NOT FOUND; /* apply on c10 */
		begin

		dt_unidade_transf_ler_w	:= null;

		if (ie_passagem_setor_w = 'L') then

			begin
			select	max(dt_entrada_unidade)
			into STRICT	dt_unidade_transf_ler_w
			from	atend_paciente_unidade
			where	nr_atendimento = nr_atendimento_p
			and	cd_setor_atendimento = cd_setor_atendimento_Ler_w
			and	dt_entrada_unidade < dt_entrada_unidade_ler_w
			and	Obter_Tipo_Unidade_Atend(nr_atendimento, nr_seq_interno, ie_passagem_setor) = 'N';
			exception
				when others then
				dt_unidade_transf_ler_w	:= null;
			end;

		end if;

		cd_tipo_acomod_orig_w		:= cd_tipo_acomod_unid_ler_w;
		cd_tipo_acomod_diferente_w	:= 0;

		select 	coalesce(max(ie_cobra_dif_diaria),'S')
		into STRICT 	ie_cobra_dif_diaria_w
		from	motivo_transf_pac
		where	nr_sequencia 		= nr_seq_motivo_transf_w
		and		cd_estabelecimento 	= cd_estabelecimento_p;

		select 	coalesce(max(cd_tipo_acomodacao),0)
		into STRICT	cd_tipo_acomod_diferente_w
		from 	atend_acomod_diaria
		where 	nr_atendimento = NR_ATENDIMENTO_P
		and 	nr_seq_interno = nr_seq_interno_w
		and 	dt_parametro_p > dt_inicio_acomod;

		if (cd_tipo_acomod_diferente_w > 0) then
			begin
			cd_tipo_acomod_unid_ler_w:= cd_tipo_acomod_diferente_w;

			select	c.hr_virada_diaria,
				c.cd_procedimento,
				c.ie_origem_proced,
				c.nr_seq_proced_int
			into STRICT	hr_virada_diaria_w,
				cd_procedimento_ler_w,
				ie_origem_proced_ler_w,
				nr_seq_proced_int_ler_w
			from	tipo_acomodacao c
			where	cd_tipo_acomodacao =  cd_tipo_acomod_diferente_w;
			exception
				when others then
				cd_tipo_acomod_unid_ler_w:= cd_tipo_acomod_orig_w;
			end;
		end if;

		if (coalesce(hr_virada_diaria_w::text, '') = '') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(182937,
					'NR_ATENDIMENTO='||nr_atendimento_p || ';CD_SETOR_ATENDIMENTO='||cd_setor_atendimento_Ler_w || ';CD_TIPO_ACOMODACAO='|| cd_tipo_acomod_unid_ler_w);
			/*'A hora de virada diaria esta nula. Atendimento : ' || nr_atendimento_p ||  ' Setor: ' || cd_setor_atendimento_Ler_w || ' Acomod.: ' || cd_tipo_acomod_unid_ler_w);*/

		end if;

		dt_final_diaria_w	:= PKG_DATE_UTILS.get_DateTime(dt_parametro_p, coalesce(hr_virada_diaria_w,PKG_DATE_UTILS.GET_TIME('00:00:00')));

		dt_inicio_diaria_w	:= dt_final_diaria_w - 1;
		
		if (dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') then
			dt_final_diaria_w	:= dt_alta_p;
		end if;

		if (dt_entrada_unidade_ler_w > dt_inicio_diaria_w) then
			dt_inicio_diaria_w	:= dt_entrada_unidade_ler_w;
		end if;

		if (dt_saida_unidade_ler_w < dt_final_diaria_w) then
			dt_final_diaria_w	:= dt_saida_unidade_ler_w;
		end if;

		if (ie_forma_calculo_diaria_w = 'T') and (PKG_DATE_UTILS.extract_field('DAY', dt_parametro_p) <> PKG_DATE_UTILS.extract_field('DAY', dt_inicio_diaria_w)) then
			dt_inicio_diaria_w := To_Date(To_char(dt_parametro_p,'dd/mm/yyyy') || ' 00:00:00', 'dd/mm/yyyy hh24:mi:ss');
		end if;

		if (qt_dispensa_diaria_w > 0) and (ie_forma_calculo_diaria_w = 'M') and (PKG_DATE_UTILS.extract_field('HOUR', dt_parametro_p) <> PKG_DATE_UTILS.extract_field('HOUR', hr_virada_diaria_w)) then

			hr_virada_diaria_w:= to_date(to_char(dt_parametro_p,'hh24:mi:ss'),'hh24:mi:ss');

			dt_final_diaria_w := PKG_DATE_UTILS.get_DateTime(dt_parametro_p, coalesce(hr_virada_diaria_w,PKG_DATE_UTILS.GET_TIME('00:00:00')));

			dt_inicio_diaria_w	:= dt_final_diaria_w - 1;

		end if;

		qt_tempo_setor_Ler_w 		:= dt_final_diaria_w - dt_inicio_diaria_w;

		if  	((ie_forma_calculo_diaria_w in ('U','P')) or (qt_tempo_setor_Ler_w > qt_tempo_setor_w)) and (ie_forma_calculo_diaria_w <> 'V') then
			begin
			cd_setor_atendimento_w	:= cd_setor_atendimento_Ler_w;
			cd_unidade_basica_w	:= cd_unidade_basica_ler_w;
			cd_unidade_compl_w	:= cd_unidade_compl_ler_w;
			dt_entrada_unidade_w	:= dt_entrada_unidade_Ler_w;
			dt_saida_unidade_w	:= dt_saida_unidade_Ler_w;
			qt_tempo_setor_w	:= qt_tempo_setor_Ler_w;
			cd_tipo_acomod_unid_w	:= cd_tipo_acomod_unid_ler_w;
			cd_classif_setor_w	:= cd_classif_setor_ler_w;
			nr_acomp_Unidade_w	:= nr_acomp_Unidade_ler_w;
			dt_unidade_transf_w	:= dt_unidade_transf_ler_w;
			end;
		end if;



		if (ie_forma_calculo_diaria_w = 'P') then
			exit;
		end if;

		if (ie_forma_calculo_diaria_w = 'V') then
			if (coalesce(cd_procedimento_ler_w,0) = 0) and (coalesce(nr_seq_proced_int_ler_w,0) > 0) then
				SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proced_int_ler_w, CD_ESTABELECIMENTO_P, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_Ler_w, cd_procedimento_ler_w, ie_origem_proced_ler_w, null, dt_parametro_p, cd_tipo_acomod_conv_w, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_procedimento_ler_w, ie_origem_proced_ler_w;
			end if;
			vl_proc_diaria_ler_w	:= Obter_Preco_Procedimento(
								cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, dt_parametro_p, cd_procedimento_ler_w,
								ie_origem_proced_ler_w, cd_tipo_acomod_unid_ler_w, 1, cd_setor_atendimento_Ler_w, null, null,


								null, null, null, null, 'P');
			if (vl_proc_diaria_ler_w	>= vl_proc_diaria_w) then
				begin
				vl_proc_diaria_w	:= vl_proc_diaria_ler_w;
				cd_setor_atendimento_w	:= cd_setor_atendimento_Ler_w;
				cd_unidade_basica_w	:= cd_unidade_basica_ler_w;
				cd_unidade_compl_w	:= cd_unidade_compl_ler_w;
				dt_entrada_unidade_w	:= dt_entrada_unidade_Ler_w;
				dt_saida_unidade_w	:= dt_saida_unidade_Ler_w;
				qt_tempo_setor_w	:= qt_tempo_setor_Ler_w;
				cd_tipo_acomod_unid_w	:= cd_tipo_acomod_unid_ler_w;
				cd_classif_setor_w	:= cd_classif_setor_ler_w;
				nr_acomp_Unidade_w	:= nr_acomp_Unidade_ler_w;
				dt_unidade_transf_w	:= dt_unidade_transf_ler_w;
				end;
			end if;
		end if;

		end;
	END LOOP;
	CLOSE C10;

------- Caso o Setor do Paciente e UTI utiliza este senao do Convenio

------- Caso seja igual Utilizar o do convenio senao o de nivel mais baixo
	if (cd_classif_setor_w = '4') then
		cd_tipo_acomodacao_w		:= cd_tipo_acomod_unid_w;
	elsif (cd_tipo_acomod_unid_w = cd_tipo_acomod_conv_w) then
		cd_tipo_acomodacao_w		:= cd_tipo_acomod_conv_w;
	else
		begin
		begin
		select coalesce(cd_nivel_acomodacao, 0)
		into STRICT cd_nivel_convenio_w
		from tipo_acomodacao
		where cd_tipo_acomodacao = cd_tipo_acomod_conv_w;
		exception
			when others then
				cd_nivel_convenio_w := 0;
		end;
		begin
		select coalesce(cd_nivel_acomodacao, 0)
		into STRICT cd_nivel_setor_w
		from tipo_acomodacao
		where cd_tipo_acomodacao = cd_tipo_acomod_unid_w;
		exception
			when others then
				cd_nivel_setor_w	:= 0;
		end;
		if (cd_nivel_setor_w < cd_nivel_convenio_w) then
			cd_tipo_acomodacao_w		:= cd_tipo_acomod_unid_w;
		else
			cd_tipo_acomodacao_w		:= cd_tipo_acomod_conv_w;
		end if;
		end;
	end if;

------- Obter Tipo de Acomodacao
	if (cd_setor_atendimento_w <> 0) then
		cd_procedimento_w := 0;

		select	max(a.hr_virada_diaria),
      		    	max(a.hr_margem_ant_virdia),
          		max(a.hr_margem_pos_virdia),
			max(a.cd_procedimento),
			max(a.ie_origem_proced),
			max(a.cd_procedimento_acomp),
			max(coalesce(a.ie_origem_proced_acomp,1)),
			max(a.nr_seq_proced_int)
		into STRICT	hr_virada_diaria_w,
			hr_margem_ant_virdia_w,
			hr_margem_pos_virdia_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			cd_procedimento_acomp_w,
			ie_origem_proced_acomp_w,
			nr_seq_proced_int_w
		from	tipo_acomodacao a
		where 	a.cd_tipo_acomodacao 	= cd_tipo_acomodacao_w;

		qt_dia_int_unid_w := dt_parametro_w - ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(dt_unidade_transf_ler_w, dt_entrada_unidade_Ler_w));

		if (coalesce(cd_procedimento_w,0) > 0) then
			nr_seq_proced_int_w	:= null;
		elsif (coalesce(cd_procedimento_w,0) = 0) and (coalesce(nr_seq_proced_int_w,0) > 0) then
			SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proced_int_w, CD_ESTABELECIMENTO_P, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, null, dt_parametro_p, cd_tipo_acomod_conv_w, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
		end if;

		select 	coalesce(max(ie_paciente_isolado),'N'),
			max(cd_pessoa_fisica)
		into STRICT	ie_paciente_isolado_w,
			cd_pessoa_fisica_w
		from 	atendimento_paciente
		where 	nr_atendimento = nr_atendimento_p;

		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			select	coalesce(max(obter_idade(b.dt_nascimento,coalesce(b.dt_obito,clock_timestamp()),'DIA')),0),
				max(ie_sexo)
			into STRICT	qt_idade_w,
				ie_sexo_w
			from	pessoa_fisica b
			where	b.cd_pessoa_fisica = cd_pessoa_fisica_w;
		end if;

		select 	max(ie_tipo_convenio)
		into STRICT	ie_tipo_convenio_w
		from 	convenio
		where 	cd_convenio = cd_convenio_w;

		ie_origem_proc_conv_w:= Obter_Origem_Proced_Cat(CD_ESTABELECIMENTO_P, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, cd_categoria_w);

		ie_gerar_primeiro_dia_w	:= 'S';
		cd_procedimento_ww	:= 0;
		nr_seq_proced_int_conv_w:= 0;

		-- RULE for considering billing according to patient category in ICU. This considers only ICU patients. The changes will be applicable to Australia only. Refer to SO1991100 for details.
		if (cd_classif_setor_w = '4') then
		
			select 	count(*)
			into STRICT    nr_icu_assessment_count_w
			from 	icunsw_daily a,
				icunsw b
			where 	a.nr_seq_icunsw = b.nr_sequencia
			and 	b.nr_atendimento = nr_atendimento_p
			and 	a.ie_situacao = 'A'
			and 	b.ie_situacao = 'A'
			and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
			and     (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '');

			if (nr_icu_assessment_count_w > 0) then
			
				select  max(a.ie_patient_category)
				into STRICT    ie_patient_category_w
				from    icunsw_daily a,
					icunsw b
				where   a.nr_seq_icunsw = b.nr_sequencia
				and     b.nr_atendimento = nr_atendimento_p
				and     a.ie_situacao = 'A'
				and 	b.ie_situacao = 'A'
				and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
				and     (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
				and     a.dt_registration  = (  SELECT	max(x.dt_registration)
								from	icunsw_daily x
								where	x.nr_seq_icunsw = b.nr_sequencia
								and	trunc(x.dt_registration) <= dt_parametro_p
								and	x.ie_situacao = 'A');
			end if;
		end if;

		open C20;
		loop
		fetch C20 into
			cd_procedimento_ww,
			ie_origem_proced_ww,
			cd_procedimento_acomp_w,
			ie_origem_proced_acomp_w,
			qt_dia_inicio_w,
			nr_seq_classificacao_ww,
			ie_gerar_primeiro_dia_w,
			nr_seq_proced_int_conv_w,
			cd_setor_atendimento_c20,	-- As variaveis c20 esta aqui apenas devido ao order by do cursor
			ie_clinica_c20,
			cd_convenio_c20,
			cd_categoria_c20;
		EXIT WHEN NOT FOUND; /* apply on C20 */
			begin
			cd_procedimento_ww		:= cd_procedimento_ww;
			ie_origem_proced_ww		:= ie_origem_proced_ww;
			cd_procedimento_acomp_w		:= cd_procedimento_acomp_w;
			ie_origem_proced_acomp_w	:= ie_origem_proced_acomp_w;
			qt_dia_inicio_w			:= qt_dia_inicio_w;
			nr_seq_classificacao_ww		:= nr_seq_classificacao_ww;
			ie_gerar_primeiro_dia_w		:= ie_gerar_primeiro_dia_w;
			nr_seq_proced_int_conv_w	:= nr_seq_proced_int_conv_w;
			end;
		end loop;
		close C20;

		if (coalesce(cd_procedimento_ww,0) > 0) then
			nr_seq_proced_int_w	:= null;
			cd_procedimento_w	:= cd_procedimento_ww;
			ie_origem_proced_w	:= ie_origem_proced_ww;
		elsif (coalesce(cd_procedimento_ww,0) = 0) and (coalesce(nr_seq_proced_int_conv_w,0) > 0) then
			nr_seq_proced_int_w:= nr_seq_proced_int_conv_w;
			SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proced_int_conv_w, CD_ESTABELECIMENTO_P, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_setor_atendimento_w, cd_procedimento_w, ie_origem_proced_w, null, dt_parametro_p, cd_tipo_acomod_conv_w, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
		end if;

		-- OS 142225 - Regra especial para o primeiro dia no caso de alta
		if (ie_gerar_primeiro_dia_w = 'N') and (dt_parametro_w - dt_entrada_w = 0) then
			cd_procedimento_w:= 0;
		end if;
	end if;






	if (qt_dispensa_diaria_w > 0) then

		if (PKG_DATE_UTILS.extract_field('HOUR', dt_parametro_p) <> PKG_DATE_UTILS.extract_field('HOUR', hr_virada_diaria_w)) then

			qt_virada_diaria_w 	:= (hr_virada_diaria_w - hr_margem_ant_virdia_w) * 86400;
			hr_margem_ant_virdia_w	:= to_date(to_char(dt_parametro_p - qt_virada_diaria_w / 86400, 'hh24:mi:ss'), 'hh24:mi:ss');

			qt_margem_ant_virdia_w	:= (hr_margem_pos_virdia_w - hr_virada_diaria_w) * 86400;
			hr_margem_pos_virdia_w	:= to_date(to_char(dt_parametro_p + qt_margem_ant_virdia_w / 86400, 'hh24:mi:ss'), 'hh24:mi:ss');

			hr_virada_diaria_w	:= to_date(to_char(dt_parametro_p,'hh24:mi:ss'),'hh24:mi:ss');

		end if;

	end if;

------- Tratar Margens (Anterior e Posterior)
	if (cd_procedimento_w <> 0) then
		begin
      	if (dt_entrada_w <>
              ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_unidade_w)) then
			dt_margem_ant_w := PKG_DATE_UTILS.get_DateTime(dt_parametro_p, coalesce(hr_virada_diaria_w,PKG_DATE_UTILS.GET_TIME('00:00:00')));
		else
			dt_margem_ant_w := PKG_DATE_UTILS.get_DateTime(dt_parametro_p, coalesce(hr_margem_ant_virdia_w,PKG_DATE_UTILS.GET_TIME('00:00:00')));
		end if;
		dt_margem_pos_w := PKG_DATE_UTILS.get_DateTime(dt_parametro_p, coalesce(hr_margem_pos_virdia_w,PKG_DATE_UTILS.GET_TIME('00:00:00')));

		dt_virada_w     := PKG_DATE_UTILS.get_DateTime(dt_parametro_p, coalesce(hr_virada_diaria_w,PKG_DATE_UTILS.GET_TIME('00:00:00')));
      	dt_seguinte_w   := dt_virada_w + 1;
		end;
	end if;

------- Calculo da Diaria
	if (cd_procedimento_w <> 0) then
	        if	(dt_entrada_unidade_w < dt_margem_ant_w or ((coalesce(ie_consider_cutoff_hour_w,'N') = 'S') and ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrada_unidade_w) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_margem_ant_w))) then
			--OS 301954 Lancamentos de diarias com data menor que a data de entrada do paciente
			if (dt_virada_w < dt_entrada_unidade_w) then
				dt_diaria_w:= dt_entrada_unidade_w;
			else
				dt_diaria_w:= dt_virada_w;
			end if;
		else
			if (IE_GERAR_DIARIA_FUTURA_w = 'S') then
				dt_diaria_w	:= dt_seguinte_w;
			elsif (coalesce(dt_alta_p::text, '') = '') then
				goto final; /* OS 86487 (Itamar-Pro Cardiaco),  Fabricio em 26/03/08 */
			end if;

		end if;
                if (ie_diaria_dia_ant_w = 'S') then
                        dt_diaria_w     := dt_entrada_unidade_w;
                        if (dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') then
                                if (dt_alta_p < dt_virada_w) or (dt_alta_p < dt_margem_pos_w) then
                                        dt_diaria_w     := dt_virada_w - 1;
                                elsif (dt_entrada_unidade_w < dt_virada_w) then
                                        dt_diaria_w     := dt_virada_w;
                                end if;
                        else
                                dt_diaria_w := dt_diaria_w + (5/1440);

				/*Validacao para nao permitir gerar a diaria com a data de entrada, se o setor de entrada nao calcula diaria*/

				select	count(*),
					max(a.dt_saida_unidade)
				into STRICT	qt_diaria_entrada_w,
					dt_fim_diaria_entrada_w
				from	setor_atendimento b,
					atend_paciente_unidade a
				where	a.cd_setor_atendimento	= b.cd_setor_atendimento
				and	a.nr_atendimento	= nr_atendimento_p
				and	a.dt_entrada_unidade	= dt_entrada_p
				and	b.cd_classif_setor not in (3,4,8,9);
				
				if (trunc(dt_entrada_unidade_w) = trunc(dt_fim_diaria_entrada_w)) and (trunc(dt_entrada_unidade_w) = trunc(dt_virada_w)) and (qt_diaria_entrada_w > 0) then /*Situacao especifica para o caso de o paciente com entrada em setor sem cobranca de diaria, nao cobrar diaria de internacao se antes da virada*/
					goto final;
                                elsif      ((dt_virada_w - 1) > dt_entrada_unidade_w) then
                                        dt_diaria_w     := dt_virada_w - 1;
                                elsif (trunc(dt_entrada_p) <= trunc(dt_entrada_unidade_w)) and (trunc(dt_virada_w - 1) = trunc(dt_entrada_p)) and (qt_diaria_entrada_w = 0) then
                                        dt_diaria_w     := dt_entrada_p + (5/1440);
                                elsif   ((dt_entrada_unidade_w < dt_virada_w) and trunc(dt_entrada_unidade_w) = trunc(dt_virada_w)) then
                                        dt_diaria_w     := dt_virada_w;
                                end if;
                        end if;
                end if;
	end if;

	if (cd_procedimento_w <> 0) then
		begin
     	     	CALL Gravar_Diaria(nr_atendimento_p,
                        dt_entrada_unidade_w,
                        cd_procedimento_w,
			ie_origem_proced_w,
	                dt_diaria_w,
                        cd_convenio_w,
                        cd_categoria_w,
                        nr_doc_convenio_w,
                        null,
			null,
                        NM_USUARIO_P,
                        cd_setor_atendimento_w,
			0,
			1, ie_evento_diaria_p,
			nr_seq_proced_int_w);


		--Diaria extra 1 dia
		if (dt_entrada_w = dt_parametro_w) then

			select 	count(*)
			into STRICT	qt_regra_extra_dia_w
			from 	tipo_acomod_diaria_entrada
			where 	cd_tipo_acomodacao = cd_tipo_acomodacao_w
			and 	ie_situacao = 'A'
			and 	dt_entrada_p between PKG_DATE_UTILS.get_DateTime(dt_entrada_p, coalesce(hora_inicial,PKG_DATE_UTILS.GET_TIME('00:00:00'))) and PKG_DATE_UTILS.get_DateTime(dt_entrada_p, coalesce(hora_final,PKG_DATE_UTILS.GET_TIME('00:00:00')));


			if (qt_regra_extra_dia_w > 0) then
				CALL Gravar_Diaria(nr_atendimento_p,
					dt_entrada_unidade_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					dt_entrada_unidade_w,
					cd_convenio_w,
					cd_categoria_w,
					nr_doc_convenio_w,
					null,
					null,
					NM_USUARIO_P,
					cd_setor_atendimento_w,
					0,
					1, ie_evento_diaria_p || ' ' || OBTER_DESC_EXPRESSAO(304338) || ' ',				-- 'Extra'
					nr_seq_proced_int_w);
			end if;

		end if;

		select	max(dt_alta)
		into STRICT	dt_alta_pac_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;

		if (coalesce(dt_alta_pac_w::text, '') = '') or (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_alta_pac_w) <> ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_diaria_w)) then
			dt_diaria_proc_w		:= dt_diaria_w;
		else
			dt_diaria_proc_w		:= dt_alta_pac_w;
		end if;


		select max(nr_sequencia)
		into STRICT nr_sequencia_w
		from procedimento_paciente
		where nr_atendimento = nr_atendimento_p
		  and dt_entrada_unidade = dt_entrada_unidade_w
		  and cd_procedimento = cd_procedimento_w
		  and dt_procedimento = dt_diaria_proc_w
		  and ie_origem_proced = ie_origem_proced_w
		  and coalesce(cd_motivo_exc_conta::text, '') = ''
		  and cd_setor_atendimento = cd_setor_atendimento_w;

		begin


		CALL Gerar_lancamento_automatico(
				nr_atendimento_p,
				null,
				39,
				nm_usuario_p,
				nr_sequencia_w, null,null,null,null,null);
		exception
			when others then
				ds_erro_w	:= substr(SQLERRM(SQLSTATE),1,4000);
		end;
		end;
	end if;


------- Calculo da Diferenca da Diaria
	if (ie_diferenca_diaria_p = 'S') and (ie_calcular_dif_diaria_w = 'S') and (cd_classif_setor_w = '3') 	and (ie_cobra_dif_diaria_w = 'S') and (cd_tipo_acomod_conv_w <> cd_tipo_acomod_unid_w) then
		begin
		SELECT * FROM Calcular_Diferenca_Diaria(
				cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, cd_plano_w, cd_tipo_acomod_conv_w, cd_tipo_acomod_unid_w, dt_parametro_p, qt_dia_int_w, ie_paciente_isolado_w, cd_procedimento_dif_w, ie_origem_proced_dif_w, vl_Categoria_w, vl_diferenca_w, ie_calculo_diferenca_w) INTO STRICT cd_procedimento_dif_w, ie_origem_proced_dif_w, vl_Categoria_w, vl_diferenca_w, ie_calculo_diferenca_w;

		if (vl_diferenca_w > 0) then
			begin
			SELECT * FROM obter_convenio_particular(cd_estabelecimento_p, cd_convenio_partic_w, cd_categoria_partic_w) INTO STRICT cd_convenio_partic_w, cd_categoria_partic_w;
			if (ie_calculo_diferenca_w = 'V') or (ie_calculo_diferenca_w	= 'P') then
	   			vl_diferenca_w	:= null;
			end if;
   			CALL Gravar_Diaria(nr_atendimento_p,
				dt_entrada_unidade_w,
				cd_procedimento_dif_w,
				ie_origem_proced_dif_w,
				dt_diaria_w,
				cd_convenio_partic_w,
				cd_categoria_partic_w,
				nr_doc_convenio_w,
				null,
				null,
				NM_USUARIO_P,
				cd_setor_atendimento_w,
				vl_diferenca_w,
				1, ie_evento_diaria_p,
				null);
			end;
		end if;
		end;
	end if;



------- Calculo da Diaria do Acompanhante
	if (ie_diaria_acompanhante_p = 'S')  then
		begin

		-- Edgar 29/11/2005, OS 25123 restringir por idade
		begin
		select	OBTER_IDADE_PF(cd_pessoa_fisica, clock_timestamp(), 'A')
		into STRICT	qt_anos_paciente_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;
		exception
			when others then
				qt_anos_paciente_w	:= null;
		end;

		select	coalesce(max(obter_idade(b.dt_nascimento,coalesce(b.dt_obito,clock_timestamp()),'DIA')),0)
		into STRICT	qt_idade_w
		from	pessoa_fisica b
		where	b.cd_pessoa_fisica	= cd_pessoa_fisica_w;

		begin
		select	count(*)
		into STRICT	nr_acomp_Setor_w
		from	atendimento_acompanhante
		where	nr_atendimento	= nr_atendimento_p
		and	dt_acompanhante	between dt_parametro_p -1 and dt_parametro_p;
		exception
			when others then
				nr_acomp_setor_w	:= 0;
		end;

		if (nr_acomp_setor_w < nr_acomp_unidade_w) then
			nr_acomp_setor_w	:= nr_acomp_unidade_w;
		end if;


		if (nr_acomp_setor_w > 0) and (coalesce(qt_anos_paciente_w, coalesce(qt_ano_min_acomp_w,0)) between
			coalesce(qt_ano_min_acomp_w, 0) and coalesce(qt_ano_max_acomp_w,999)) then
			begin

------- Gravar diaria acompanhante que o convenio paga
			if (nr_acomp_convenio_w > 0) then
	   			CALL Gravar_Diaria(nr_atendimento_p,
					dt_entrada_unidade_w,
					cd_procedimento_acomp_w,
					ie_origem_proced_acomp_w,
					dt_diaria_w,
					cd_convenio_w,
					cd_categoria_w,
					nr_doc_convenio_w,
					null,
					null,
					NM_USUARIO_P,
					cd_setor_atendimento_w,
					null,
					nr_acomp_convenio_w,
					ie_evento_diaria_p,
					null);
			end if;

------- Gravar diaria acompanhante que o paciente paga
			if (nr_acomp_setor_w > nr_acomp_convenio_w) then
				begin

				SELECT * FROM obter_convenio_particular(
						cd_estabelecimento_p, cd_convenio_partic_w, cd_categoria_partic_w) INTO STRICT cd_convenio_partic_w, cd_categoria_partic_w;

				begin
				select 	coalesce(b.cd_procedimento_acomp, a.cd_procedimento_acomp),
					coalesce(b.ie_origem_proced_acomp, a.ie_origem_proced_acomp)
				into STRICT	cd_procedimento_acomp_w,
					ie_origem_proced_acomp_w
				FROM tipo_acomodacao a
LEFT OUTER JOIN tipo_acomod_convenio b ON (a.cd_tipo_acomodacao = b.cd_tipo_acomodacao AND cd_convenio_partic_w = b.cd_convenio)
WHERE a.cd_tipo_acomodacao 		= cd_tipo_acomod_unid_w;
				exception
					when others then
						cd_procedimento_acomp_w := 0;
				end;

				if (cd_procedimento_acomp_w > 0) then
					CALL Gravar_Diaria(nr_atendimento_p,
						dt_entrada_unidade_w,
						cd_procedimento_acomp_w,
						ie_origem_proced_acomp_w,
						dt_diaria_w + 1/1440,
						cd_convenio_partic_w,
						cd_categoria_partic_w,
						nr_doc_convenio_w,
						null,
						null,
						NM_USUARIO_P,
						cd_setor_atendimento_w,
						null,
						nr_acomp_setor_w - nr_acomp_convenio_w,
						ie_evento_diaria_p,
						null);
				end if;
				end;
			end if;
			end;
		end if;
		end;
	end if;
	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

	<<final>>
		if (IE_GERAR_DIARIA_FUTURA_w = 'N') and (cd_procedimento_w <> 0) and (dt_entrada_unidade_w >= dt_margem_ant_w) then
			ds_erro_w:= substr(wheb_mensagem_pck.get_texto(303764),1,255);
			if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
		end if;
	END;

end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_diaria_atendimento (CD_ESTABELECIMENTO_P bigint, NR_ATENDIMENTO_P bigint, DT_ENTRADA_P timestamp, DT_PARAMETRO_P timestamp, NM_USUARIO_P text, IE_DIFERENCA_DIARIA_P text, IE_DIARIA_ACOMPANHANTE_P text, ie_evento_diaria_p text, DT_ALTA_P timestamp DEFAULT NULL, NR_SEQ_PAT_CAT_NEW_P bigint default 0) FROM PUBLIC;

