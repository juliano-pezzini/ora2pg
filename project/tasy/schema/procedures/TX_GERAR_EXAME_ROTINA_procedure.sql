-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tx_gerar_exame_rotina ( nm_usuario_p text, cd_pessoa_fisica_p text, ie_forma_geracao_p text) AS $body$
DECLARE


cd_pessoa_fisica_w				varchar(10);
nm_pessoa_fisica_w				varchar(80);
ds_inconsistencia_w				varchar(4000);
ds_prescricao_gerada_w			varchar(4000);
cd_unid_dialise_w				bigint;
ie_unidade_propria_w			varchar(1);
cd_estabelecimento_w			smallint := wheb_usuario_pck.get_cd_estabelecimento;
nr_atendimento_w				bigint;
cd_medico_responsavel_w			varchar(10);
qt_altura_cm_w					real;
qt_peso_w						real;
nr_horas_validade_w				integer;
dt_prescricao_w					timestamp;
cd_setor_atendimento_w			integer;
dt_primeiro_horario_w			timestamp;
ie_tipo_pessoa_w				smallint;
ie_funcao_prescritor_w			varchar(3);
nr_prescricao_w					bigint;
nr_seq_protocolo_w				bigint;
nr_seq_proc_medic_w				bigint;
ie_possui_cad_medico_w			varchar(1);
dt_prim_horario_w				timestamp;
nr_seq_proc_interno_w			bigint;
cd_exame_w						varchar(20);
nr_seq_prescr_w					bigint;
ds_enter_w						varchar(20)	:= chr(10)||chr(13);
cd_perfil_w						integer;
ie_gerar_prescr_sem_atend_w		varchar(1);
ds_erro_w					varchar(2000);

c01 CURSOR FOR /* Pacientes que tem prescricoes a ser geradas */
	SELECT	cd_pessoa_fisica,
		substr(obter_nome_pf(cd_pessoa_fisica),1,80)
	from	tx_pac_prot_exame
	where	trunc(obter_prox_data_ref(ie_forma_solic, nr_dia, nr_mes,''))	= trunc(clock_timestamp())
	and	coalesce(cd_pessoa_fisica_p::text, '') = ''
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	group by cd_pessoa_fisica
	
union

	SELECT	cd_pessoa_fisica,
		substr(obter_nome_pf(cd_pessoa_fisica),1,80)
	from	tx_pac_prot_exame
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	(cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '')
	order by cd_pessoa_fisica;

c02 CURSOR FOR /* Sequencia dos protocolos do paciente que devem ser gerados */
	SELECT	nr_seq_protocolo,
		nr_seq_proc_medic
	from	tx_pac_prot_exame
	where	cd_pessoa_fisica						= cd_pessoa_fisica_w
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	trunc(obter_prox_data_ref(ie_forma_solic, nr_dia, nr_mes,''))	= trunc(clock_timestamp())
	and	coalesce(cd_pessoa_fisica_p::text, '') = ''
	
union all

	SELECT	nr_seq_protocolo,
		nr_seq_proc_medic
	from	tx_pac_prot_exame
	where	cd_pessoa_fisica						= cd_pessoa_fisica_w
	and	((ie_forma_geracao = ie_forma_geracao_p)  or (ie_forma_geracao = 'A'))
	and	(cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '');


BEGIN

open c01;
	loop
	fetch c01 into
		cd_pessoa_fisica_w,
		nm_pessoa_fisica_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

	nr_prescricao_w		:= 0;
	nr_atendimento_w	:= 0;
	ds_inconsistencia_w	:= '';
	ds_prescricao_gerada_w	:= '';
			
			
	/* Obter o medico responsavel pelo paciente */

	select	max(cd_medico_resp)
	into STRICT	cd_medico_responsavel_w
	from	tx_parametros;

	if (cd_medico_responsavel_w IS NOT NULL AND cd_medico_responsavel_w::text <> '') then
	
		select	coalesce(max('S'),'N')
		into STRICT	ie_possui_cad_medico_w
		from	medico
		where	cd_pessoa_fisica	= cd_medico_responsavel_w
		and	ie_situacao		= 'A';

		if (ie_possui_cad_medico_w = 'S') then		

			/* Verifica se o paciente tem atendimento gerado */

			select	coalesce(max(nr_atendimento),0)
			into STRICT	nr_atendimento_w
			from	atendimento_paciente
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	ie_fim_conta		<> 'F'
			and	coalesce(dt_alta::text, '') = '';					
			
			if (nr_atendimento_w > 0) then

				select	coalesce(ie_gerar_prescr_sem_atend,'N')
				into STRICT	ie_gerar_prescr_sem_atend_w
				from	tx_parametros
				where	cd_estabelecimento	= cd_estabelecimento_w;


				dt_prescricao_w		:= clock_timestamp();

				/* Obter Horas de Validade */
	
				select	obter_valor_param_usuario(924, 155, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)
				into STRICT	nr_horas_validade_w
				;

				/* Obter Peso do Paciente */

				select	obter_sinal_vital(nr_atendimento_w,'Peso')
				into STRICT	qt_peso_w
				;
							
				/* Obter Altura do Paciente */

				select	obter_sinal_vital(nr_atendimento_w,obter_desc_expressao(283402)/*'Altura'*/
)
				into STRICT	qt_altura_cm_w
				;
						
				/* Obter Setor do Atendimento */

				select	obter_setor_atendimento(nr_atendimento_w)
				into STRICT	cd_setor_atendimento_w
				;

				/* Obter Primeiro Horario da Prescricao */

				select	obter_prim_horario_prescricao(nr_atendimento_w, cd_setor_atendimento_w,dt_prescricao_w, nm_usuario_p,'R')
				into STRICT	dt_primeiro_horario_w
				;

				/* Obter Tipo da Pessoa Do Usuario */

				select	obter_tipo_pessoa(cd_medico_responsavel_w)
				into STRICT	ie_tipo_pessoa_w
				;
				
				/* Obter Funcao Prescritor */

				select	substr(obter_funcao_usuario_orig(obter_usuario_pessoa(cd_medico_responsavel_w)),1,3)
				into STRICT	ie_funcao_prescritor_w
				;

				/* Gera Numero da Prescricao */

				select	nextval('prescr_medica_seq')
				into STRICT	nr_prescricao_w
				;

				insert into prescr_medica(
					nr_prescricao,
					cd_pessoa_fisica,
					nr_atendimento,
					cd_medico,
					dt_prescricao,
					dt_atualizacao,
					nm_usuario,
					ds_observacao,
					nr_horas_validade,
					dt_primeiro_horario,
					cd_setor_atendimento,
					ie_recem_nato,
					ie_origem_inf,
					nm_usuario_original,
					qt_altura_cm,
					qt_peso,
					cd_estabelecimento,
					cd_prescritor,
					ie_funcao_prescritor,
					ie_prescricao_alta,
					ie_prescr_emergencia,
					ie_adep,
					ie_hemodialise,
					dt_liberacao,
					dt_liberacao_medico
				) values (
					nr_prescricao_w,
					cd_pessoa_fisica_w,
					CASE WHEN ie_gerar_prescr_sem_atend_w='S' THEN null  ELSE nr_atendimento_w END ,
					cd_medico_responsavel_w,
					dt_prescricao_w,
					clock_timestamp(),
					nm_usuario_p,
					'',
					nr_horas_validade_w,
					dt_primeiro_horario_w,
					cd_setor_atendimento_w,
					'N',
					ie_tipo_pessoa_w,
					nm_usuario_p,
					qt_altura_cm_w,
					qt_peso_w,
					cd_estabelecimento_w,
					cd_medico_responsavel_w,
					ie_funcao_prescritor_w,
					'N',
					'N',
					'N',
					'N',
					clock_timestamp(),
					clock_timestamp()
					);

				/* Gerar Exames do Protocolo */

				open c02;
				loop
				fetch c02 into
						nr_seq_protocolo_w,
						nr_seq_proc_medic_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */

						/* Obter Primeiro Horario Prescricao */
								
						select	dt_primeiro_horario
						into STRICT	dt_prim_horario_w
						from	prescr_medica
						where	nr_prescricao		= nr_prescricao_w;

						/* Gerar protocolo de procedimentos */

						CALL copiar_exame_med_protocolo(
							nr_atendimento_w,
							nr_seq_protocolo_w,
							nr_seq_proc_medic_w,
							0,
							nr_horas_validade_w,
							nr_prescricao_w,
							dt_prim_horario_w,
							dt_prescricao_w,
							dt_prescricao_w,
							nm_usuario_p,
							null,
							null,
							null,
							null,
							null
							);
			  						
					end loop;
				close c02;

				update 	prescr_procedimento
				set 	ie_status_atend = 10
				where	nr_prescricao 	= nr_prescricao_w
				and	ie_status_atend = 5;

			else
				ds_inconsistencia_w	:= ds_inconsistencia_w||'->' || obter_desc_expressao(775707) /*Paciente nao possui atendimento aberto.*/
||ds_enter_w;
			end if;
		else
			ds_inconsistencia_w	:= ds_inconsistencia_w||'->'|| obter_desc_expressao(775709) /*Medico responsavel pelo paciente nao esta cadastrado como medico no Tasy.*/
||ds_enter_w;
		end if;
	else
		ds_inconsistencia_w	:= ds_inconsistencia_w|| '-> '|| obter_desc_expressao(775707)/*'-> Paciente nao possui medico responsavel no cadastro dos profissionais.'*/||ds_enter_w;		
	end if;			
	
if (nr_prescricao_w > 0) then
	ds_prescricao_gerada_w	:= ds_prescricao_gerada_w || /*'Prescricao '*/
 obter_desc_expressao(753394)||nr_prescricao_w||obter_desc_expressao(781793)/*' gerada para o(a) paciente: '*/||cd_pessoa_fisica_w||' - '||nm_pessoa_fisica_w||ds_enter_w;
else
	ds_prescricao_gerada_w	:= /*'Inconsistencias ao tentar gerar prescricao para o(a) paciente: '*/
 obter_desc_expressao(775723, 'CD_PESSOA_FISICA='||cd_pessoa_fisica_w|| ';NM_PESSOA_FISICA='||nm_pessoa_fisica_w)||ds_enter_w||ds_inconsistencia_w ||obter_desc_expressao(775725);
end if;

	if (ds_prescricao_gerada_w IS NOT NULL AND ds_prescricao_gerada_w::text <> '') then

		begin
		select	cd_perfil
		into STRICT	cd_perfil_w
		from	tx_parametros;
		exception
			when others then
			cd_perfil_w	:= 0;
		end;
		
		ds_erro_w := Liberar_Prescricao(nr_prescricao_w, nr_atendimento_w, ie_tipo_pessoa_w, cd_perfil_w, nm_usuario_p, 'N', ds_erro_w);

		insert into comunic_interna(
			dt_comunicado,
			ds_titulo,
			ds_comunicado,
			nm_usuario,
			dt_atualizacao,
			ie_geral,
			nm_usuario_destino,
			ds_perfil_adicional,
			nr_sequencia,
			ie_gerencial,
			dt_liberacao,
			cd_estab_destino
		) values (
			clock_timestamp(),
			obter_desc_expressao(775727)/*'Exames de Rotina Paciente '*/
||cd_pessoa_fisica_w||' - '||nm_pessoa_fisica_w,
			ds_prescricao_gerada_w,
			nm_usuario_p,
			clock_timestamp(),
			'N',
			'',
			cd_perfil_w||', ',
			nextval('comunic_interna_seq'),
			'N',
			clock_timestamp(),
			cd_estabelecimento_w
		);

	end if;
	
	end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tx_gerar_exame_rotina ( nm_usuario_p text, cd_pessoa_fisica_p text, ie_forma_geracao_p text) FROM PUBLIC;

