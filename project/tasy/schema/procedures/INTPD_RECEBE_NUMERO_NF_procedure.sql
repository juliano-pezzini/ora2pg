-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_numero_nf ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
nota_fiscal_w		nota_fiscal%rowtype;

ie_conversao_w		intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w	intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w	intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w	varchar(15);
reg_integracao_w	gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w		conversao_meio_externo.nr_seq_regra%type;
ds_erro_w		varchar(4000);
i			integer;
ie_atualizou_w		varchar(1) := 'N';
qt_reg_w		bigint;

/*'Efetua a consulta transformando o elemento XML num tipo de tabela'*/

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/INVOICE' passing xml_p columns
	nr_sequencia		varchar(40)	path	'NR_SEQUENCE',
	nr_nfe_imp		varchar(40)	path	'NR_ELECTRONIC_INVOICE_IMP');

c01_w	c01%rowtype;


BEGIN
/*'Atualiza o status da fila para Em processamento'*/

update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

/*'Realiza o commit para não permite o status de processamento em casa de rollback por existir consistência. Existe tratamento de exceção abaixo para colocar o status de erro em caso de falha'*/

commit;

/*'Início de controle de falha'*/

begin
/*'Busca os dados da regra do registro da fila que está em processamento'*/

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

/*'Alimenta as informações iniciais de controle e consistência de cada atributo do XML'*/

reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:=	'R';
reg_integracao_w.ie_sistema_externo		:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao			:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log			:=	0;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	/*'Alimenta as informações de controle e consistência referente ao Elemento a ser processado no momento. É importante manter dentro do cursor e não fora.'*/

	reg_integracao_w.nm_tabela	:=	'NOTA_FISCAL';
	reg_integracao_w.nm_elemento	:=	'INVOICE';
	reg_integracao_w.nr_seq_visao	:=	null;

	/*'Consiste cada atributo do XML'*/

	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQUENCIA', c01_w.nr_sequencia, 'N', nota_fiscal_w.nr_sequencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; nota_fiscal_w.nr_sequencia := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_NFE_IMP', c01_w.nr_nfe_imp, 'N', nota_fiscal_w.nr_nfe_imp) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; nota_fiscal_w.nr_nfe_imp := _ora2pg_r.ds_valor_retorno_p;

	select	count(*)
	into STRICT	qt_reg_w
	from	nota_fiscal
	where	nr_sequencia = nota_fiscal_w.nr_sequencia;

	if (qt_reg_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort('A nota fiscal '||c01_w.nr_sequencia||' não existe no sistema.');
	end if;

	/*'Efetua a atualização caso não possua consistência '*/

	if (reg_integracao_w.qt_reg_log = 0) then
		begin
			update	nota_fiscal
			set	nr_nfe_imp = nota_fiscal_w.nr_nfe_imp
			where	nr_sequencia = nota_fiscal_w.nr_sequencia;

			update	intpd_fila_transmissao
			set	ie_status = 'S',
				nr_seq_documento = nota_fiscal_w.nr_sequencia
			where	nr_sequencia = nr_sequencia_p;

		exception
		when others then
			reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=	substr(sqlerrm,1,4000);
			reg_integracao_w.qt_reg_log						:=	reg_integracao_w.qt_reg_log + 1;
		end;
	end if;

	end;

end loop;
close c01;
exception
when others then
	begin
	/*'Em caso de qualquer falha o sistema captura a mensagem de erro, efetua o rollback, atualiza o status para Erro e registra a falha ocorrida'*/

	ds_erro_w	:=	substr(sqlerrm,1,4000);
	rollback;
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;
	end;
end;

if (reg_integracao_w.qt_reg_log > 0) then
	begin
	/*'Em caso de qualquer consistência o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistência'*/

	rollback;

	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;

	for i in 0..reg_integracao_w.qt_reg_log-1 loop
		intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
	end loop;
	end;
end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_numero_nf ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

