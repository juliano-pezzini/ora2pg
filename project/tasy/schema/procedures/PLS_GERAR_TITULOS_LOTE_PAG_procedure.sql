-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_titulos_lote_pag ( nr_seq_lote_p bigint, nm_usuario_p text) AS $body$
DECLARE

					
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar os títulos para os vencimentos do lote de pagamento.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
-------------------------------------------------------------------------------------------------------------------

Referências:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_email_prestador_w		varchar(255);
ds_celular_prest_w		varchar(255);
cd_cgc_w			varchar(14);
cd_pessoa_fisica_w		varchar(10);
ie_parametro_w			varchar(1);
vl_movimento_w			double precision;
nr_seq_pag_prest_w		bigint;
qt_sem_fatura_w			bigint;
nr_tit_receber_w		bigint;
nr_tit_pagar_w			bigint;
nr_seq_pag_item_w		bigint;
nr_adiant_pago_w		bigint;
nr_seq_prestador_w		bigint;
cd_estabelecimento_w		bigint;
ie_data_lote_prod_med_w		pls_parametro_contabil.ie_data_lote_prod_med%type;
nr_lote_contabil_w		lote_contabil.nr_lote_contabil%type;
nr_titulo_w			pls_pag_prest_vencimento.nr_titulo%type;
ie_recurso_proprio_w		pls_periodo_pagamento.ie_recurso_proprio%type;
nr_seq_tipo_prest_rec_prop_w	pls_parametro_pagamento.nr_seq_tipo_prest_rec_prop%type;
ie_processo_tit_rec_prop_w	pls_parametro_pagamento.ie_processo_tit_rec_prop%type; -- L = Liquidado	C = Cancelado
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
ie_status_origem_w		lote_contabil.ie_status_origem%type;

C01 CURSOR FOR
	SELECT	distinct c.nr_sequencia,
		c.nr_seq_prestador,
		coalesce(a.ie_recurso_proprio,'N')
	from	pls_pag_prest_vencimento	d,
		pls_pagamento_prestador		c,
		pls_lote_pagamento		b,
		pls_periodo_pagamento		a
	where	a.nr_sequencia			= b.nr_seq_periodo
	and	b.nr_sequencia			= c.nr_seq_lote
	and	c.nr_sequencia			= d.nr_seq_pag_prestador
	and	c.nr_seq_lote			= nr_seq_lote_p
	and	coalesce(c.ie_cancelamento::text, '') = ''
	and	coalesce(d.nr_titulo::text, '') = '';

C02 CURSOR FOR
	SELECT	b.nr_sequencia,
		b.nr_tit_pagar_origem,
		b.nr_tit_receber_origem,
		b.vl_item
	from	pls_pagamento_item	b,
		pls_pagamento_prestador	a
	where	a.nr_sequencia		= b.nr_seq_pagamento
	and	a.nr_seq_lote		= nr_seq_lote_p
	and	coalesce(a.ie_cancelamento::text, '') = ''
	and	((b.nr_tit_pagar_origem IS NOT NULL AND b.nr_tit_pagar_origem::text <> '') or (b.nr_tit_receber_origem IS NOT NULL AND b.nr_tit_receber_origem::text <> ''));
	
C03 CURSOR FOR
	SELECT	b.nr_sequencia,
		b.nr_adiant_pago_origem,
		abs(b.vl_item)
	from	pls_pagamento_item	b,
		pls_pagamento_prestador	a
	where	a.nr_sequencia		= b.nr_seq_pagamento
	and	a.nr_seq_lote		= nr_seq_lote_p
	and	coalesce(a.ie_cancelamento::text, '') = ''
	and	(b.nr_adiant_pago_origem IS NOT NULL AND b.nr_adiant_pago_origem::text <> '');
	
C04 CURSOR FOR
	SELECT	d.nr_sequencia nr_seq_lote_movto,
		d.cd_estabelecimento,
		a.nr_sequencia nr_seq_pag_prest
	from	pls_lote_evento 	d,
		pls_evento_movimento	c,
		pls_pagamento_item	b,
		pls_pagamento_prestador	a
	where	a.nr_sequencia		= b.nr_seq_pagamento
	and	b.nr_sequencia		= c.nr_seq_pagamento_item
	and	d.nr_sequencia		= c.nr_seq_lote
	and	c.nr_seq_lote_pgto 	= nr_seq_lote_p
	and	coalesce(c.nr_titulo_pagar::text, '') = ''
	and	coalesce(c.ie_cancelamento::text, '') = ''
	and	((c.cd_pf_titulo_pagar IS NOT NULL AND c.cd_pf_titulo_pagar::text <> '') or (c.cd_cgc_titulo_pagar IS NOT NULL AND c.cd_cgc_titulo_pagar::text <> ''))
	group by d.nr_sequencia,
		d.cd_estabelecimento,
		a.nr_sequencia;
		
BEGIN

select	sum(qt)
into STRICT	qt_sem_fatura_w
from (SELECT	count(1) qt
	from	pls_pagamento_prestador	a
	where	a.nr_seq_lote		= nr_seq_lote_p
	and	coalesce(a.nr_nota_fiscal::text, '') = ''
	and	not exists (select	1
				from	pls_pagamento_nota	x
				where	a.nr_sequencia		= x.nr_seq_pagamento)
	
union all

	SELECT	count(1)
	from	pls_pagamento_nota	b,
		pls_pagamento_prestador	a
	where	a.nr_sequencia		= b.nr_seq_pagamento
	and	a.nr_seq_lote		= nr_seq_lote_p
	and	coalesce(b.nr_seq_nota_fiscal::text, '') = '') alias6;

begin
	select	cd_estabelecimento
	into STRICT	cd_estabelecimento_w
	from	pls_lote_pagamento
	where	nr_sequencia	= nr_seq_lote_p;
exception
when others then
	cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;
end;

select	max(coalesce(ie_data_lote_prod_med,'C'))
into STRICT	ie_data_lote_prod_med_w
from	pls_parametro_contabil
where	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_data_lote_prod_med_w = 'T') then	
	select	max(coalesce(nr_lote_contabil, 0))
	into STRICT	nr_lote_contabil_w
	from	pls_lote_pagamento
	where	nr_sequencia = nr_seq_lote_p;

	if (nr_lote_contabil_w <> 0) then
		select	coalesce(max(ie_status_origem), 'M')
		into STRICT	ie_status_origem_w
		from	lote_contabil
		where	nr_lote_contabil = nr_lote_contabil_w;
		
		if (ie_status_origem_w <> 'SO') then
			/* Este lote já foi contabilizado. */

			CALL wheb_mensagem_pck.exibir_mensagem_abort(326641);
		end if;
	end if;
end if;

ie_parametro_w	:= coalesce(obter_valor_param_usuario(1282, 1, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'S');

if (coalesce(qt_sem_fatura_w,0) <> 0) and (coalesce(ie_parametro_w, 'S') = 'N') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(233171,'');
end if;

select	max(nr_seq_tipo_prest_rec_prop),
	max(coalesce(ie_processo_tit_rec_prop,'L'))
into STRICT	nr_seq_tipo_prest_rec_prop_w,
	ie_processo_tit_rec_prop_w
from	pls_parametro_pagamento
where	cd_estabelecimento = cd_estabelecimento_w;

open C01;
loop
fetch C01 into	
	nr_seq_pag_prest_w,
	nr_seq_prestador_w,
	ie_recurso_proprio_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	CALL pls_gerar_titulo_venc_lote_pag(	nr_seq_pag_prest_w, nm_usuario_p);
	
	if (ie_recurso_proprio_w = 'S') and (coalesce(nr_seq_tipo_prest_rec_prop_w::text, '') = '') then	
		select	max(b.nr_titulo)
		into STRICT	nr_titulo_w
		from	pls_pag_prest_vencimento	b,
			pls_pagamento_prestador		a,
			pls_prestador			z
		where	z.nr_sequencia			= a.nr_seq_prestador
		and	a.nr_sequencia			= b.nr_seq_pag_prestador
		and	a.nr_sequencia			= nr_seq_pag_prest_w;
		
	elsif (nr_seq_tipo_prest_rec_prop_w IS NOT NULL AND nr_seq_tipo_prest_rec_prop_w::text <> '') then	
		select	max(b.nr_titulo)
		into STRICT	nr_titulo_w
		from	pls_pag_prest_vencimento	b,
			pls_pagamento_prestador		a,
			pls_prestador			z
		where	z.nr_sequencia			= a.nr_seq_prestador
		and	a.nr_sequencia			= b.nr_seq_pag_prestador
		and	a.nr_sequencia			= nr_seq_pag_prest_w
		and	z.nr_seq_tipo_prestador 	= nr_seq_tipo_prest_rec_prop_w;
	end if;
	
	if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
		if (ie_processo_tit_rec_prop_w = 'C') then
			CALL cancelar_titulo_pagar(nr_titulo_w, nm_usuario_p, clock_timestamp());
			
			update	titulo_pagar
			set	ds_observacao_titulo	= 'Título gerado a partir de um lote de pagamento para recurso próprio, cancelado sem pagamento'
			where	nr_titulo		= nr_titulo_w
			and	vl_saldo_titulo		= 0;
			
		elsif (ie_processo_tit_rec_prop_w = 'L') then
			CALL pls_baixar_tit_pag_rec_propr( nr_titulo_w , nr_seq_pag_prest_w , nm_usuario_p );
		end if;
	end if;

	select	cd_estabelecimento,
		cd_cgc,
		cd_pessoa_fisica
	into STRICT	cd_estabelecimento_w,
		cd_cgc_w,
		cd_pessoa_fisica_w
	from	pls_prestador
	where	nr_sequencia	= nr_seq_prestador_w;
	
	ds_celular_prest_w	:= substr(pls_obter_dados_prestador(nr_seq_prestador_w, 'CEL'), 0, 40);
	ds_email_prestador_w	:= substr(obter_dados_pf_pj_estab(cd_estabelecimento_w, cd_pessoa_fisica_w, cd_cgc_w, 'M'), 0, 40);
	
	CALL pls_gerar_alerta_pag_prod_med(	4,
					ds_celular_prest_w,
					ds_email_prestador_w,
					nr_seq_lote_p,
					nr_seq_pag_prest_w,
					null,
					nm_usuario_p);
	end;
end loop;
close C01;

/* Devolver adiantamentos pagos */

open C03;
loop
fetch C03 into	
	nr_seq_pag_item_w,
	nr_adiant_pago_w,
	vl_movimento_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	CALL pls_devolver_adiant_evento(	nr_seq_pag_item_w,
					nr_adiant_pago_w,
					vl_movimento_w,
					nm_usuario_p);
	end;
end loop;
close C03;
/* Fim devolução adiantamentos */



/* Gerar títulos de terceiros para os movimentos que possuem lançamento programado com PF terceiro informado, */

for r_c04_w in C04 loop
	begin
	CALL pls_gerar_tit_terceiros_evento(	r_c04_w.nr_seq_lote_movto,
					r_c04_w.nr_seq_pag_prest, 
					r_c04_w.cd_estabelecimento, 
					nm_usuario_p);
	end;
end loop;

update	pls_lote_pagamento
set	dt_geracao_titulos	= clock_timestamp()
where	nr_sequencia		= nr_seq_lote_p;

select	coalesce(max(ie_concil_contab), 'N')
into STRICT	ie_concil_contab_w
from	pls_visible_false
where	cd_estabelecimento = cd_estabelecimento_w;

if (ie_concil_contab_w = 'S') then
	CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_gerar_tit_pag(nr_seq_lote_p, cd_estabelecimento_w, nm_usuario_p);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_titulos_lote_pag ( nr_seq_lote_p bigint, nm_usuario_p text) FROM PUBLIC;

