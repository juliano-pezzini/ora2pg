-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_gerar_livro_prod_med ( nm_usuario_p text, cd_empresa_p bigint, cd_estabelecimento_p bigint, cd_conta_contabil_p text, dt_inicio_p timestamp, dt_fim_p timestamp, ie_debito_credito_p text) AS $body$
DECLARE


ie_debito_credito_w		varchar(1);
cd_conta_contabil_w		varchar(20);
contador_w 			bigint := 0;
dt_inicio_w			timestamp;
dt_fim_w			timestamp;
dt_emissao_w			timestamp;
dt_vencimento_atual_w		timestamp;
ds_classif_diops_w		varchar(255);
nr_titulo_w			titulo_pagar.nr_titulo%type;
qt_dias_vencido_w		bigint;
vl_provisao_w			double precision;
nr_seq_protocolo_ant_w		bigint;

c01 CURSOR FOR
	SELECT	y.nm_fantasia,
		y.cd_cgc,
		y.ds_tipo_prestador,
		y.cd_guia,
		y.dt_aviso,
		y.nr_seq_cliente,
		y.nm_pessoa_fisica,
		y.dt_mes_competencia,
		y.cd_conta_contabil,
		y.nr_seq_protocolo_conta,
		coalesce(y.vl_provisao,0) vl_provisao
	from(	SELECT (select	j.nm_fantasia
			from	pessoa_juridica	j
			where	d.cd_cgc	= j.cd_cgc
			
union all

			select	j.nm_pessoa_fisica
			from	pessoa_fisica	j
			where	d.cd_pessoa_fisica	= j.cd_pessoa_fisica) nm_fantasia,
			(select	j.cd_cgc
			from	pessoa_juridica	j
			where	d.cd_cgc	= j.cd_cgc
			
union all

			select	j.nr_cpf
			from	pessoa_fisica	j
			where	d.cd_pessoa_fisica	= j.cd_pessoa_fisica) cd_cgc,
			t.ds_tipo_prestador,
			b.cd_guia,
			e.dt_atualizacao_nrec dt_aviso,
			s.nr_sequencia nr_seq_cliente,
			f.nm_pessoa_fisica,
			e.dt_mes_competencia,
			c.cd_conta_provisao_cred cd_conta_contabil,
			e.nr_sequencia nr_seq_protocolo_conta,
			coalesce(c.vl_provisao,0) vl_provisao
		FROM pls_segurado s, pessoa_fisica f, pls_protocolo_conta e, pls_conta_proc c, pls_conta b
LEFT OUTER JOIN pls_prestador d ON (b.nr_seq_prestador = d.nr_sequencia)
LEFT OUTER JOIN pls_tipo_prestador t ON (d.nr_seq_tipo_prestador = t.nr_sequencia)
WHERE b.nr_sequencia		= c.nr_seq_conta and b.nr_seq_protocolo	= e.nr_sequencia   and b.nr_seq_segurado	= s.nr_sequencia and s.cd_pessoa_fisica	= f.cd_pessoa_fisica and (e.nr_lote_contabil_prov IS NOT NULL AND e.nr_lote_contabil_prov::text <> '') and (c.nr_lote_contabil_prov IS NOT NULL AND c.nr_lote_contabil_prov::text <> '') and e.dt_mes_competencia between dt_inicio_p and dt_fim_p and c.cd_conta_provisao_cred = cd_conta_contabil_p
		
union all

		select (select	j.nm_fantasia
			from	pessoa_juridica	j
			where	d.cd_cgc	= j.cd_cgc
			
union all

			select	j.nm_pessoa_fisica
			from	pessoa_fisica	j
			where	d.cd_pessoa_fisica	= j.cd_pessoa_fisica) nm_fantasia,
			(select	j.cd_cgc
			from	pessoa_juridica	j
			where	d.cd_cgc	= j.cd_cgc
			
union all

			select	j.nr_cpf
			from	pessoa_fisica	j
			where	d.cd_pessoa_fisica	= j.cd_pessoa_fisica) cd_cgc,
			t.ds_tipo_prestador,
			b.cd_guia,
			e.dt_atualizacao_nrec dt_aviso,
			s.nr_sequencia nr_seq_cliente,
			f.nm_pessoa_fisica,
			e.dt_mes_competencia,
			c.cd_conta_provisao_cred cd_conta_contabil,
			e.nr_sequencia nr_seq_protocolo_conta,
			coalesce(c.vl_provisao,0) vl_provisao
		FROM pls_segurado s, pessoa_fisica f, pls_protocolo_conta e, pls_conta_mat c, pls_conta b
LEFT OUTER JOIN pls_prestador d ON (b.nr_seq_prestador = d.nr_sequencia)
LEFT OUTER JOIN pls_tipo_prestador t ON (d.nr_seq_tipo_prestador = t.nr_sequencia)
WHERE b.nr_sequencia		= c.nr_seq_conta and b.nr_seq_protocolo	= e.nr_sequencia   and b.nr_seq_segurado	= s.nr_sequencia and s.cd_pessoa_fisica	= f.cd_pessoa_fisica and (e.nr_lote_contabil_prov IS NOT NULL AND e.nr_lote_contabil_prov::text <> '') and (c.nr_lote_contabil_prov IS NOT NULL AND c.nr_lote_contabil_prov::text <> '') and e.dt_mes_competencia between dt_inicio_p and dt_fim_p and c.cd_conta_provisao_cred = cd_conta_contabil_p ) y
	order by y.nr_seq_protocolo_conta;

vet01	c01%ROWTYPE;


BEGIN

ie_debito_credito_w := ie_debito_credito_p;

nr_seq_protocolo_ant_w := 0;
nr_titulo_w := null;

open C01;
loop
fetch C01 into
	vet01;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	if (nr_seq_protocolo_ant_w <> vet01.nr_seq_protocolo_conta)  then

		begin
		select	nr_titulo
		into STRICT	nr_titulo_w
		from	(	SELECT	c.nr_titulo
				from	pls_lote_protocolo_venc	a,
					pls_prot_conta_titulo	b,
					titulo_pagar		c
				where	a.nr_seq_lote	= b.nr_seq_lote
				and	a.nr_titulo	= c.nr_titulo
				and	b.nr_seq_protocolo = vet01.nr_seq_protocolo_conta
				
union

				SELECT	d.nr_titulo nr_titulo
				from	pls_pag_prest_vencimento	a,
					pls_pagamento_prestador		b,
					pls_conta_medica_resumo		c,
					titulo_pagar			d
				where	a.nr_seq_pag_prestador	= b.nr_sequencia
				and	c.nr_seq_prestador_pgto	= b.nr_seq_prestador
				and	b.nr_seq_lote           = c.nr_seq_lote_pgto
				and	((c.ie_situacao		= 'A') or (coalesce(c.ie_situacao::text, '') = ''))
				and	c.nr_seq_protocolo	= vet01.nr_seq_protocolo_conta
				and	a.nr_titulo		= d.nr_titulo
				order by 1) alias5 LIMIT 1;

		exception
			when others then
			nr_titulo_w := null;
		end;

		ds_classif_diops_w := '';

		if (coalesce(nr_titulo_w,0) > 0) then
			select	dt_emissao,
				dt_vencimento_atual
			into STRICT	dt_emissao_w,
				dt_vencimento_atual_w
			from	titulo_pagar
			where	nr_titulo = nr_titulo_w;

			if (dt_vencimento_atual_w > dt_fim_w) then
				ds_classif_diops_w := wheb_mensagem_pck.get_texto(300065);
			else
				qt_dias_vencido_w := trunc(dt_fim_w - dt_vencimento_atual_w);

				if (qt_dias_vencido_w <= 30) then
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300059);
				elsif (qt_dias_vencido_w <= 60) then
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300060);
				elsif (qt_dias_vencido_w <= 90) then
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300061);
				elsif (qt_dias_vencido_w <= 120) then
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300062);
				else
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300064);
				end if;
			end if;
		end if;

		if (vl_provisao_w < 0) then

			if (ie_debito_credito_w = 'D') then
				ie_debito_credito_w := 'C';
			elsif (ie_debito_credito_w = 'C') then
				ie_debito_credito_w := 'D';
			end if;

			vl_provisao_w := abs(vet01.vl_provisao);

		end if;

		nr_seq_protocolo_ant_w := vet01.nr_seq_protocolo_conta;

	end if;

	contador_w := contador_w + 1;

	insert into w_ctb_livro_aux_intercam(
		nm_usuario,
		cd_estabelecimento,
		dt_atualizacao,
		nm_prestador,
		cd_cpf_cnpj,
		ds_tipo_prestador,
		nr_titulo,
		dt_vencimento,
		cd_guia,
		dt_realizacao,
		ds_origem,
		cd_carteira,
		nm_beneficiario,
		vl_evento,
		dt_contabilizacao,
		cd_conta_contabil,
		ie_debito_credito,
		ds_classif_diops)
	values (	nm_usuario_p,
		cd_estabelecimento_p,
		clock_timestamp(),
		vet01.nm_fantasia,
		vet01.cd_cgc,
		vet01.ds_tipo_prestador,
		nr_titulo_w,
		dt_vencimento_atual_w,
		vet01.cd_guia,
		vet01.dt_aviso,
		null,
		vet01.nr_seq_cliente,
		vet01.nm_pessoa_fisica,
		vet01.vl_provisao,
		vet01.dt_mes_competencia,
		vet01.cd_conta_contabil,
		ie_debito_credito_w,
		ds_classif_diops_w);

	if (mod(contador_w,100) = 0) then
		commit;
	end if;

	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_gerar_livro_prod_med ( nm_usuario_p text, cd_empresa_p bigint, cd_estabelecimento_p bigint, cd_conta_contabil_p text, dt_inicio_p timestamp, dt_fim_p timestamp, ie_debito_credito_p text) FROM PUBLIC;

