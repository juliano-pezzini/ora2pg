-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_resumo_itens_adic ( nr_seq_segurado_simul_p bigint, nr_seq_item_p bigint, ie_tipo_item_p text, vl_valor_item_p INOUT bigint) AS $body$
DECLARE


/*
ie_tipo_item_p
S - SCA
B - Bonificação
*/
qt_idade_w			bigint;
nr_seq_tabela_w			bigint;
vl_preco_sca_w			double precision := 0;
ie_tipo_benef_w			varchar(2);
nr_seq_parentesco_w		bigint;
tx_bonificacao_regra_w		double precision := 0;
vl_bonificacao_regra_w		double precision := 0;
vl_bonificacao_ww		double precision := 0;
vl_tot_bonificacao_w		double precision := 0;
vl_segurado_simul_w		double precision := 0;
qt_vidas_titular_w		bigint;
qt_vidas_dependente_legal_w	bigint;
nr_seq_simulacao_w		bigint;
qt_total_vidas_simul_w		bigint;
qt_regras_bonificacao_w		bigint;
nr_seq_regra_simulacao_w	bigint;
nr_seq_desconto_w		bigint;
ie_tipo_segurado_w		varchar(1);
qt_vidas_simul_indiv_w		integer;

C01 CURSOR FOR
	SELECT	coalesce(c.vl_bonificacao,a.vl_bonificacao),
		coalesce(c.tx_bonificacao,a.tx_bonificacao)
	from	pls_bonificacao_regra	a,
		pls_bonificacao		b,
		pls_bonificacao_vinculo	c
	where	a.nr_seq_bonificacao	= b.nr_sequencia
	and	c.nr_seq_bonificacao	= b.nr_sequencia
	and	c.nr_sequencia		= nr_seq_item_p
	and	pls_obter_item_mens(1,a.ie_tipo_item) = 'S'
	and	((qt_idade_w between coalesce(a.qt_idade_inicial,qt_idade_w) and coalesce(a.qt_idade_final,qt_idade_w)) or coalesce(qt_idade_w::text, '') = '')
	and (ie_tipo_benef_w = a.ie_titularidade or a.ie_titularidade = 'A' or coalesce(a.ie_titularidade::text, '') = '')
	and (nr_seq_parentesco_w = a.nr_seq_parentesco or coalesce(a.nr_seq_parentesco::text, '') = '')
	
UNION ALL

	SELECT	coalesce(a.vl_bonificacao,0),
		coalesce(a.tx_bonificacao,0)
	from	pls_bonificacao_vinculo	a,
		pls_bonificacao		b
	where	a.nr_seq_segurado_simul	= nr_seq_segurado_simul_p
	and	a.nr_seq_bonificacao = b.nr_sequencia
	and	b.ie_alteracao_vinculacao = 'S'
	and	not exists (	select	1
				from	pls_bonificacao_regra	x
				where	x.nr_seq_bonificacao 	= b.nr_sequencia);

C02 CURSOR FOR
	SELECT	b.nr_seq_desconto,
		coalesce(b.ie_tipo_segurado,'T')
	from	pls_bonificacao_regra		b,
		pls_bonificacao			c,
		pls_bonificacao_vinculo		d
	where	d.nr_seq_bonificacao	= c.nr_sequencia
	and	c.nr_sequencia		= b.nr_seq_bonificacao
	and	b.ie_tipo_regra		= 'D'
	and	d.nr_sequencia		= nr_seq_item_p;

C03 CURSOR FOR
	SELECT	tx_desconto,
		vl_desconto
	from	pls_preco_regra
	where	nr_seq_regra	= nr_seq_desconto_w
	and	qt_total_vidas_simul_w between coalesce(qt_min_vidas,qt_total_vidas_simul_w) and coalesce(qt_max_vidas,qt_total_vidas_simul_w);


BEGIN

select	qt_idade,
	nr_seq_parentesco,
	ie_tipo_benef,
	vl_mensal_sem_desc,
	nr_seq_simulacao
into STRICT	qt_idade_w,
	nr_seq_parentesco_w,
	ie_tipo_benef_w,
	vl_segurado_simul_w,
	nr_seq_simulacao_w
from	pls_simulpreco_individual
where	nr_sequencia	= nr_seq_segurado_simul_p;

if (ie_tipo_item_p = 'S') then
	select	nr_seq_tabela
	into STRICT	nr_seq_tabela_w
	from	pls_sca_vinculo
	where	nr_sequencia	= nr_seq_item_p;

	select	count(1)
	into STRICT	qt_vidas_simul_indiv_w
	from	pls_simulpreco_individual
	where	nr_seq_simulacao = nr_seq_simulacao_w;

	select	max(vl_preco_atual)
	into STRICT	vl_preco_sca_w
	from	pls_plano_preco
	where	nr_seq_tabela	= nr_seq_tabela_w
	and	qt_idade_w between qt_idade_inicial and qt_idade_final
	and	qt_vidas_simul_indiv_w between coalesce(qt_vidas_inicial,qt_vidas_simul_indiv_w) and coalesce(qt_vidas_final,qt_vidas_simul_indiv_w);

	if (coalesce(vl_preco_sca_w,0) > 0) then
		vl_valor_item_p	:= vl_preco_sca_w;
	end if;
elsif (ie_tipo_item_p = 'B') then
	open C01;
	loop
	fetch C01 into
		vl_bonificacao_regra_w,
		tx_bonificacao_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		vl_bonificacao_ww	:= ((coalesce(tx_bonificacao_regra_w,0) /100) * coalesce(vl_segurado_simul_w,0)) + coalesce(vl_bonificacao_regra_w,0);
		vl_tot_bonificacao_w	:= vl_tot_bonificacao_w + vl_bonificacao_ww*-1;
		end;
	end loop;
	close C01;
	-- Verifica a quantidade de regras para a bonificação
	select	count(1)
	into STRICT	qt_regras_bonificacao_w
	from	pls_bonificacao_regra		b,
		pls_bonificacao			c,
		pls_bonificacao_vinculo		d
	where	d.nr_seq_bonificacao	= c.nr_sequencia
	and	c.nr_sequencia		= b.nr_seq_bonificacao
	and	b.ie_tipo_regra		= 'D'
	and	d.nr_sequencia		= nr_seq_item_p;

	--Se possuir mais que uma regra para a bonificação abre o cursor e traz a regra de maior sequencia
	if (qt_regras_bonificacao_w > 0) then
		open C02;
		loop
		fetch C02 into
			nr_seq_desconto_w,
			ie_tipo_segurado_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
		end loop;
		close C02;

		if (nr_seq_desconto_w IS NOT NULL AND nr_seq_desconto_w::text <> '') then
			--Retorna a quantidade de beneficiários na simulação do beneficiário em questão filtrando pelo tipo de beneficiário em OPS - Bonificação/desconto, Todos ou titulares + dependentes legais
			if (ie_tipo_segurado_w = 'T') then
				select	count(1)
				into STRICT	qt_total_vidas_simul_w
				from	pls_simulpreco_individual
				where	nr_seq_simulacao	= nr_seq_simulacao_w;
			elsif (ie_tipo_segurado_w = 'E') then
				select	count(1)
				into STRICT	qt_vidas_titular_w
				from	pls_simulpreco_individual
				where	nr_seq_simulacao	= nr_seq_simulacao_w
				and	ie_tipo_benef		= 'T';

				select	count(1)
				into STRICT	qt_vidas_dependente_legal_w
				from	pls_simulpreco_individual	a,
					grau_parentesco			b
				where	a.nr_seq_parentesco	= b.nr_sequencia
				and	a.nr_seq_simulacao	= nr_seq_simulacao_w
				and	a.ie_tipo_benef		= 'D'
				and	b.ie_tipo_parentesco	= 1;

				qt_total_vidas_simul_w := qt_vidas_titular_w + qt_vidas_dependente_legal_w;
			end if;

			--Retorna a taxa e valor da bonificação que se encaixa nos critérios da OPS - Bonificação/desconto
			open C03;
			loop
			fetch C03 into
				tx_bonificacao_regra_w,
				vl_bonificacao_regra_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
			end loop;
			close C03;

			vl_bonificacao_ww := ((coalesce(tx_bonificacao_regra_w,0) /100) * coalesce(vl_segurado_simul_w,0)) + coalesce(vl_bonificacao_regra_w,0);

			vl_tot_bonificacao_w := vl_tot_bonificacao_w + vl_bonificacao_ww*-1;
		end if;
	end if;

vl_valor_item_p	:= vl_tot_bonificacao_w;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_resumo_itens_adic ( nr_seq_segurado_simul_p bigint, nr_seq_item_p bigint, ie_tipo_item_p text, vl_valor_item_p INOUT bigint) FROM PUBLIC;

