-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_copiar_lote_contabil ( cd_estabelecimento_p bigint, nr_lote_origem_p bigint, nr_lote_destino_p bigint, dt_movimento_p timestamp, ie_inverter_valor_p text, nm_usuario_p text) AS $body$
DECLARE



qt_consistencia_w		smallint;
cd_tipo_lote_contabil_w		smallint;
nr_seq_movto_w			bigint;
nr_sequencia_w			bigint;
nr_seq_mes_ref_w		bigint;
dt_movimento_w			timestamp;
vl_movimento_w			double precision;
cd_historico_w			bigint;
cd_conta_debito_w		varchar(20);
cd_conta_credito_w		varchar(20);
ds_compl_historico_w		varchar(255);
nr_seq_agrupamento_w		bigint;
ie_revisado_w			varchar(1);
cd_classif_debito_w 		varchar(40);
cd_classif_credito_w		varchar(40);
nr_seq_movimento_w		bigint;
cd_centro_custo_w		integer;
vl_movimento_centro_w		double precision;
pr_rateio_centro_w		double precision;
cd_estabelecimento_w    ctb_movimento.cd_estabelecimento%type;
ds_observacao_w			ctb_movimento.ds_observacao%type;
nr_documento_w			ctb_movimento.nr_documento%type;
ie_origem_documento_w   ctb_movimento.ie_origem_documento%type;
nr_agrup_sequencial_w	ctb_movimento.nr_agrup_sequencial%type;

c01 CURSOR FOR
SELECT	nr_sequencia,
	coalesce(dt_movimento_p, dt_movimento),
	vl_movimento,
	cd_historico,
	CASE WHEN ie_inverter_valor_p='S' THEN  cd_conta_credito  ELSE cd_conta_debito END ,
	CASE WHEN ie_inverter_valor_p='S' THEN  cd_conta_debito  ELSE cd_conta_credito END ,
	ds_compl_historico,
	nr_seq_agrupamento,
	ie_revisado,
	cd_estabelecimento,
	ds_observacao,
	nr_documento,
	ie_origem_documento,
	nr_agrup_sequencial
from	ctb_movimento
where	nr_lote_contabil = nr_lote_origem_p;

c02 CURSOR FOR
SELECT	cd_centro_custo,
	vl_movimento,
	pr_rateio
from	ctb_movto_centro_custo
where	nr_seq_movimento = nr_seq_movto_w;



BEGIN

select	count(*)
into STRICT	qt_consistencia_w
from	lote_contabil
where	nr_lote_contabil	= nr_lote_origem_p
and	cd_estabelecimento	= cd_estabelecimento_p;
if (qt_consistencia_w = 0) then
--	'Este lote não existe neste estabelecimento.
	CALL wheb_mensagem_pck.exibir_mensagem_abort(250868,substr('NR_LOTE_ORIGEM_W=' || nr_lote_origem_p,1,999));

end if;

select	count(*)
into STRICT	qt_consistencia_w
from	lote_contabil
where	nr_lote_contabil	= nr_lote_destino_p
and	cd_estabelecimento	= cd_estabelecimento_p;
if (qt_consistencia_w = 0) then
	--'Lote destino Este lote não existe neste estabelecimento.'
	CALL wheb_mensagem_pck.exibir_mensagem_abort(250872,substr('NR_LOTE_DESTINO_W=' || nr_lote_destino_p,1,999));

end if;

select	cd_tipo_lote_contabil
into STRICT	cd_tipo_lote_contabil_w
from	lote_contabil
where	nr_lote_contabil	= nr_lote_destino_p;
if (cd_tipo_lote_contabil_w <> 12) then
	--'Deve ser um lote de digitação.'
	CALL wheb_mensagem_pck.exibir_mensagem_abort(250873,substr('NR_LOTE_DESTINO_W=' || nr_lote_destino_p,1,999));
end if;

select	count(*)
into STRICT	qt_consistencia_w
from	ctb_movimento
where	nr_lote_contabil	= nr_lote_destino_p;
if (qt_consistencia_w > 0) then
	--'Não pode ser destino da cópia, pois já possui movimento.'
	CALL wheb_mensagem_pck.exibir_mensagem_abort(250874,substr('NR_LOTE_DESTINO_W=' || nr_lote_destino_p,1,999));
end if;


select	nr_seq_mes_ref
into STRICT	nr_seq_mes_ref_w
from	lote_contabil
where	nr_lote_contabil = nr_lote_destino_p;

open C01;
loop
fetch C01 into
	nr_seq_movto_w,
	dt_movimento_w,
	vl_movimento_w,
	cd_historico_w,
	cd_conta_debito_w,
	cd_conta_credito_w,
	ds_compl_historico_w,
	nr_seq_agrupamento_w,
	ie_revisado_w,
	cd_estabelecimento_w,
	ds_observacao_w,
	nr_documento_w,
	ie_origem_documento_w,
	nr_agrup_sequencial_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	nextval('ctb_movimento_seq')
	into STRICT	nr_sequencia_w
	;


	cd_classif_debito_w	:= ctb_obter_classif_conta(cd_conta_debito_w,null,dt_movimento_w);
	cd_classif_credito_w	:= ctb_obter_classif_conta(cd_conta_credito_w, null,dt_movimento_w);

	insert into ctb_movimento(
		nr_sequencia,
		nr_lote_contabil,
		nr_seq_mes_ref,
		dt_movimento,
		vl_movimento,
		dt_atualizacao,
		nm_usuario,
		cd_historico,
		cd_conta_debito,
		cd_conta_credito,
		ds_compl_historico,
		nr_seq_agrupamento,
		ie_revisado,
		cd_classif_debito,
		cd_classif_credito,
		cd_estabelecimento,
		ds_observacao,
		nr_documento,
		ie_origem_documento,
		nr_agrup_sequencial)
	values ( nr_sequencia_w,
		nr_lote_destino_p,
		nr_seq_mes_ref_w,
		dt_movimento_w,
		vl_movimento_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_historico_w,
		cd_conta_debito_w,
		cd_conta_credito_w,
		ds_compl_historico_w,
		nr_seq_agrupamento_w,
		ie_revisado_w,
		cd_classif_debito_w,
		cd_classif_credito_w,
		cd_estabelecimento_w,
		ds_observacao_w,
		nr_documento_w,
		ie_origem_documento_w,
		nr_agrup_sequencial_w);

	open C02;
	loop
	fetch C02 into
		cd_centro_custo_w,
		vl_movimento_centro_w,
		pr_rateio_centro_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		insert into ctb_movto_centro_custo(
			nr_sequencia,
			nr_seq_movimento,
			cd_centro_custo,
			dt_atualizacao,
			nm_usuario,
			vl_movimento,
			pr_rateio)
		values (	nextval('ctb_movto_centro_custo_seq'),
			nr_sequencia_w,
			cd_centro_custo_w,
			clock_timestamp(),
			nm_usuario_p,
			vl_movimento_centro_w,
			pr_rateio_centro_w);

		end;
	end loop;
	close c02;

	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_copiar_lote_contabil ( cd_estabelecimento_p bigint, nr_lote_origem_p bigint, nr_lote_destino_p bigint, dt_movimento_p timestamp, ie_inverter_valor_p text, nm_usuario_p text) FROM PUBLIC;

