-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_alterar_cartao_benef ( nr_seq_segurado_p bigint, dt_validade_p timestamp, dt_inicio_vigencia_p timestamp, dt_fim_vigencia_p timestamp, cd_usuario_plano_p text, ie_gerar_automatico_p text, ie_situacao_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_usuario_plano_w		varchar(30);
cd_carteira_usuario_w		varchar(30);
nr_seq_carteira_w		bigint;
qt_registros_w			bigint;
dt_inclusao_operadora_w		timestamp;
qt_cart_ant_w			integer;
ie_sistema_anterior_w		varchar(1);

/*Utilizada nas funcoes OPS - Gestao de Contratos e OPS - Contratos de Intercambio*/

BEGIN

cd_usuario_plano_w	:= coalesce(cd_usuario_plano_p,'X');

if (dt_validade_p IS NOT NULL AND dt_validade_p::text <> '') then
	if (dt_validade_p <= clock_timestamp()) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 212000, null);
		/* Data de validade deve ser maior que hoje! */

	end if;

	if (dt_inicio_vigencia_p > dt_validade_p) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 212001, null);
		/* Data de validade inferior a data de inicio de vigencia. Verifique! */

	end if;
end if;

select	dt_inclusao_operadora
into STRICT	dt_inclusao_operadora_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_p;

if (dt_inicio_vigencia_p < dt_inclusao_operadora_w) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort( 212002, null);
	/* Inicio de vigencia do cartao deve ser maior que a data de inclusao na operadora! */

end if;

if (dt_fim_vigencia_p > dt_inicio_vigencia_p) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort( 212003, null);
	/* Fim de vigencia do cartao atual e superior a data de inicio de vigencia do novo cartao! */

end if;

if (coalesce(ie_gerar_automatico_p,'N') = 'N') and (cd_usuario_plano_p  = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort( 212004, null);
	/* Informe o novo cartao ou realize a geracao automatica do cartao! */

end if;

update	pls_segurado_carteira
set	dt_validade_carteira	= coalesce(dt_fim_vigencia_p,clock_timestamp()),
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp()
where	nr_seq_segurado		= nr_seq_segurado_p
and	coalesce(dt_validade_carteira::text, '') = '';

if (coalesce(ie_gerar_automatico_p,'N') = 'N') and (cd_usuario_plano_p  <> 'X') then
	select	count(*)
	into STRICT	qt_registros_w
	from	pls_segurado_carteira
	where	cd_usuario_plano	= cd_usuario_plano_p;

	if (qt_registros_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 212005, 'CD_USUARIO_PLANO='||cd_usuario_plano_p );
		/*Cartao de identificacao ja pertence a outro beneficiario. Verifique!' || chr(13) || 'Cartao: ' || cd_usuario_plano_p); */

	end if;
		
	select	count(*)
	into STRICT	qt_cart_ant_w
	from	pls_segurado_cart_ant
	where	nr_seq_segurado	= nr_seq_segurado_p;
		
	if (qt_cart_ant_w = 0) then
		ie_sistema_anterior_w := 'S';
	else
		ie_sistema_anterior_w := 'N';
	end if;
		
	insert into pls_segurado_cart_ant(nr_sequencia, nm_usuario, dt_atualizacao,
		cd_usuario_ant, dt_validade, dt_inicio_vigencia,
		nr_seq_segurado, dt_alteracao, ie_sistema_anterior,
		nm_usuario_solicitacao, dt_solicitacao, ds_observacao,
		dt_desbloqueio, nm_usuario_desbloqueio, ie_tipo_desbloqueio)
	SELECT	nextval('pls_segurado_cart_ant_seq'), nm_usuario_p, clock_timestamp(),
		cd_usuario_plano, dt_validade_carteira, dt_inicio_vigencia,
		nr_seq_segurado, clock_timestamp(), ie_sistema_anterior_w,
		nm_usuario_solicitante, dt_solicitacao, ds_observacao,
		dt_desbloqueio, nm_usuario_desbloqueio, ie_tipo_desbloqueio
	from	pls_segurado_carteira
	where	nr_seq_segurado	= nr_seq_segurado_p;

	delete	from pls_segurado_carteira
	where	nr_seq_segurado = nr_seq_segurado_p;

	insert into pls_segurado_carteira(nr_sequencia, dt_atualizacao, nm_usuario,
		nr_seq_segurado, dt_inicio_vigencia, dt_validade_carteira,
		cd_usuario_plano, ie_situacao, nm_usuario_solicitante,
		dt_solicitacao, ds_observacao, cd_estabelecimento)
	values (nextval('pls_segurado_carteira_seq'), clock_timestamp(), nm_usuario_p,
		nr_seq_segurado_p, dt_inicio_vigencia_p, dt_validade_p,
		cd_usuario_plano_p, coalesce(ie_situacao_p,'P'), nm_usuario_p,
		clock_timestamp(), wheb_mensagem_pck.get_texto(1127388), cd_estabelecimento_p);
elsif (coalesce(ie_gerar_automatico_p,'N') = 'S') then
	CALL pls_gerar_carteira_usuario(nr_seq_segurado_p, null, dt_inicio_vigencia_p, dt_validade_p, ie_situacao_p, 'N',null, nm_usuario_p);
end if;

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_carteira_w
from	pls_segurado_carteira
where	nr_seq_segurado		= nr_seq_segurado_p
and	dt_inicio_vigencia	=
		(SELECT	max(dt_inicio_vigencia)
		from	pls_segurado_carteira
		where	nr_seq_segurado	= nr_seq_segurado_p);

if (nr_seq_carteira_w > 0) then
	if (cd_usuario_plano_w <> 'X') then
		cd_carteira_usuario_w	:= cd_usuario_plano_w;
	else
		select	cd_usuario_plano
		into STRICT	cd_carteira_usuario_w
		from	pls_segurado_carteira
		where	nr_sequencia	= nr_seq_carteira_w;
	end if;
	
	/* Gerar historico */

	CALL pls_gerar_segurado_historico(
		nr_seq_segurado_p, '9', clock_timestamp(),
		'pls_alterar_cartao_benef', wheb_mensagem_pck.get_texto(1127389, 'CD_CARTEIRA_USUARIO='||cd_carteira_usuario_w), null,
		null, null, null, 
		null, null, null, 
		null, null, null, 
		null, nm_usuario_p, 'S');
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_alterar_cartao_benef ( nr_seq_segurado_p bigint, dt_validade_p timestamp, dt_inicio_vigencia_p timestamp, dt_fim_vigencia_p timestamp, cd_usuario_plano_p text, ie_gerar_automatico_p text, ie_situacao_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

