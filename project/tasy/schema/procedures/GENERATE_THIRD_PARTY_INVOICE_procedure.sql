-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE generate_third_party_invoice ( cd_convenio_p convenio.cd_convenio%type, nr_interno_conta_p conta_paciente.nr_interno_conta%type) AS $body$
DECLARE

	
ie_gen_3rd_prt_invoice_w	varchar(1);
nr_sequencia_w				procedimento_paciente.nr_sequencia%type;
vl_medico_w					procedimento_paciente.vl_medico%type;
vl_custo_operacional_w		procedimento_paciente.vl_custo_operacional%type;
cd_procedimento_w			procedimento_paciente.cd_procedimento%type;
ie_origem_proced_w			procedimento_paciente.ie_origem_proced%type;
cd_procedimento_loc_w		procedimento.cd_procedimento_loc%type;
cd_medico_executor_w		procedimento_paciente.cd_medico_executor%type;
cd_llave_w					llave_history.cd_llave%type;
nr_atendimento_w			procedimento_paciente.nr_atendimento%type;
nr_autorizacao_w			autorizacao_numero_hist.nr_autorizacao%type;
cd_nit_w					pessoa_fisica.cd_rfc%type;
third_party_invoice_seq_w	third_party_invoice.nr_sequencia%type;
cd_medico_old_w			procedimento_paciente.cd_medico_executor%type;
cd_medico_new_w			procedimento_paciente.cd_medico_executor%type;
qt_procedimento_w		procedimento_paciente.qt_procedimento%type;

c01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.vl_medico, 
		a.vl_custo_operacional, 
		a.cd_procedimento, 
		a.ie_origem_proced,
		b.cd_procedimento_loc,
		a.cd_medico_executor,
		a.nr_atendimento,
		a.qt_procedimento
	from	procedimento_paciente a,
			procedimento b
	where   a.cd_procedimento = b.cd_procedimento
	and     a.ie_origem_proced = b.ie_origem_proced
	and     a.vl_medico > 0
	and 	a.nr_interno_conta = nr_interno_conta_p
	and	(a.cd_medico_executor IS NOT NULL AND a.cd_medico_executor::text <> '')
	order by a.cd_medico_executor desc;


BEGIN

select  CASE WHEN count(1)=1 THEN  'S'  ELSE 'N' END
into STRICT	ie_gen_3rd_prt_invoice_w
from 	rule_control_code_gen 
where 	cd_convenio = cd_convenio_p
and     ie_situacao = 'A';

if (ie_gen_3rd_prt_invoice_w = 'S') then

	open c01;
	loop
	fetch c01 into
		nr_sequencia_w,
		vl_medico_w, 
		vl_custo_operacional_w, 
		cd_procedimento_w, 
		ie_origem_proced_w,
		cd_procedimento_loc_w,
		cd_medico_executor_w,
		nr_atendimento_w,
		qt_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		select	max(cd_llave)
		into STRICT	cd_llave_w
		from	llave_history
		where	cd_medico = cd_medico_executor_w
		and	clock_timestamp() between dt_inicial and coalesce(dt_fim, clock_timestamp())
		and	ie_situacao = 'A';
		
		if (cd_llave_w IS NOT NULL AND cd_llave_w::text <> '') then
		
			cd_medico_new_w := cd_medico_executor_w;
			
			select 	max(cd_rfc)
			into STRICT	cd_nit_w
			from	pessoa_fisica
			where	cd_pessoa_fisica = cd_medico_executor_w;
			
			select 	max(nr_autorizacao)
			into STRICT	nr_autorizacao_w
			from	autorizacao_numero_hist
			where	cd_medico = cd_medico_executor_w
			and	clock_timestamp() between dt_inicial
			and	coalesce(dt_fim,clock_timestamp())
			and	ie_situacao = 'A';
			
			
			if (coalesce(cd_medico_old_w,'-1') <> cd_medico_new_w) then
			
				cd_medico_old_w := cd_medico_new_w;
				
				select	nextval('third_party_invoice_seq')
				into STRICT	third_party_invoice_seq_w
				;
			
				insert into third_party_invoice(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				nr_interno_conta,
				nr_atendimento,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_chave,
				nr_fatura,       
				dt_emissao,      
				cd_nit,          
				nr_autorizacao,  
				cd_control_code, 
				ie_cancelamento, 
				dt_cancelamento,
				vl_total_nota,
				cd_medico_executor,
				vl_descontos
				) values (
				third_party_invoice_seq_w,
				clock_timestamp(),
				wheb_usuario_pck.get_nm_usuario,
				nr_interno_conta_p,
				nr_atendimento_w,
				clock_timestamp(),
				wheb_usuario_pck.get_nm_usuario,
				cd_llave_w,        
				third_party_invoice_seq_w,       
				clock_timestamp(),      
				cd_nit_w,  
				nr_autorizacao_w,
				null,
				null,
				null,
				null,
				cd_medico_executor_w,
				0);
			end if;
			
				insert into third_party_invoice_item(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,         
				cd_procedimento,         
				cd_procedimento_loc,     
				nr_seq_procedi,          
				ie_origem_proced,        
				vl_medico,               
				vl_custo_operacional,   
				cd_nit,                  
				qt_item_fatura,          
				vl_item_total,           
				vl_desconto,             
				dt_atualizacao_nrec,     
				nm_usuario_nrec,         
				nr_seq_third_party_inv
				) values (
				nextval('third_party_invoice_item_seq'),
				clock_timestamp(),
				wheb_usuario_pck.get_nm_usuario,
				cd_procedimento_w,
				cd_procedimento_loc_w,
				nr_sequencia_w,
				ie_origem_proced_w,
				vl_medico_w,
				vl_custo_operacional_w,
				cd_nit_w,
				qt_procedimento_w,
				vl_medico_w * qt_procedimento_w,
				0,
				clock_timestamp(),
				wheb_usuario_pck.get_nm_usuario,
				third_party_invoice_seq_w);
		end if;
		end;
	end loop;
	close c01;
end if;	
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_third_party_invoice ( cd_convenio_p convenio.cd_convenio%type, nr_interno_conta_p conta_paciente.nr_interno_conta%type) FROM PUBLIC;

