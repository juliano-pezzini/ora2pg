-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tiss_gerar_recurso_glosa_guia (nr_seq_lote_hist_p bigint, nm_usuario_p text, nr_seq_protocolo_p bigint, nr_seq_rec_prot_p bigint, nr_lote_p text default null) AS $body$
DECLARE


nr_interno_conta_w	lote_audit_hist_guia.nr_interno_conta%type;
cd_autorizacao_w	lote_audit_hist_guia.cd_autorizacao%type;
nr_seq_guia_w		lote_audit_hist_guia.nr_sequencia%type;
cd_convenio_w		lote_auditoria.cd_convenio%type;
cd_estabelecimento_w	lote_auditoria.cd_estabelecimento%type;

cd_senha_w		tiss_recurso_glosa_guia.cd_senha%type;
nr_sequencia_w		tiss_recurso_glosa_guia.nr_sequencia%type;

vl_original_w		conta_paciente_guia.vl_guia%type;
vl_reapresentacao_w	lote_audit_hist_item.vl_amenor%type;
nr_seq_motivo_glosa_w	tiss_motivo_glosa.nr_sequencia%type;
ds_justificativa_w	tiss_recurso_glosa_guia.ds_justificativa%type;
nr_guia_prestador_w	tiss_recurso_glosa_guia.nr_guia_origem%type;
ie_motivo_glosa_conv_w	varchar(10);
nr_seq_retorno_w	lote_audit_hist_guia.nr_seq_retorno%type;
qt_glosa_item_w		integer;
nr_guia_operadora_dem_w	tiss_recurso_glosa_guia.nr_guia_origem%type;
nr_guia_prestador_dem_w tiss_recurso_glosa_guia.nr_guia_origem%type;
cd_senha_dem_w		tiss_recurso_glosa_guia.cd_senha%type;
cd_motivo_tiss_w	tiss_recurso_glosa_guia.cd_motivo_tiss%type;
ie_guia_integral_dem_w	tiss_parametros_convenio.ie_guia_integral_dem%type;

c01 CURSOR FOR
SELECT	a.nr_interno_conta,
	a.cd_autorizacao,
	a.nr_sequencia,
	(obter_valor_conpaci_guia(a.nr_interno_conta,a.cd_autorizacao,1))::numeric  vl_original,
	obter_valores_guia_grc(a.nr_seq_lote_hist,a.nr_interno_conta,a.cd_autorizacao,'VA') vl_reapresentacao,
	a.nr_seq_retorno
from	lote_audit_hist_guia a,
	conta_paciente b,
    tiss_conta_guia c,
    tiss_protocolo_guia d
where	a.nr_interno_conta	= b.nr_interno_conta
and	a.nr_seq_lote_hist	    = nr_seq_lote_hist_p
and	b.nr_seq_protocolo	    = nr_seq_protocolo_p
and	exists (SELECT	1 				/*Somente se existem itens que serao reapresentados*/
		from	lote_audit_hist_item x
		where	x.nr_seq_guia	= a.nr_sequencia
		and	x.ie_acao_glosa	in ('P','R')
		and	x.vl_amenor	> 0)--gerar somente itens com valor para recursar
and c.nr_interno_conta  = b.nr_interno_conta
and c.nr_seq_prot_guia  = d.nr_sequencia
and d.nr_protocolo      = nr_lote_p
and a.cd_autorizacao    = c.cd_autorizacao;  -- gerar somente do mesmo lote
c_denial_reason CURSOR FOR
SELECT 	max(dem_glosa.cd_glosa)	cd_glosa
from	tiss_dem_glosa dem_glosa,
	tiss_dem_conta dem_conta,
	tiss_dem_lote dem_lote,
	tiss_dem_fatura dem_fatura,
	tiss_demonstrativo dem,
	tiss_cabecalho cabecalho,
	lote_audit_hist_guia hist_guia
where	dem_glosa.nr_seq_conta		= dem_conta.nr_sequencia		
and	dem_conta.nr_seq_lote		= dem_lote.nr_sequencia
and	dem_lote.nr_seq_fatura		= dem_fatura.nr_sequencia
and	dem_fatura.nr_seq_demonstrativo	= dem.nr_sequencia
and	dem.nr_seq_cabecalho		= cabecalho.nr_sequencia
and	cabecalho.nr_seq_lote_hist	= hist_guia.nr_seq_lote_hist  -- Denial Appeal Management FK
and	dem_conta.nr_interno_conta	= hist_guia.nr_interno_conta
and	hist_guia.nr_sequencia		= nr_seq_guia_w

union all

SELECT 	max(dem_glosa.cd_glosa)	cd_glosa			
from	tiss_dem_glosa dem_glosa,				
	tiss_dem_conta dem_conta,
	tiss_dem_lote dem_lote,
	tiss_dem_fatura dem_fatura,
	tiss_demonstrativo dem,
	tiss_cabecalho cabecalho,
	lote_audit_hist_guia hist_guia
where	dem_glosa.nr_seq_conta		= dem_conta.nr_sequencia		
and	dem_conta.nr_seq_lote		= dem_lote.nr_sequencia
and	dem_lote.nr_seq_fatura		= dem_fatura.nr_sequencia
and	dem_fatura.nr_seq_demonstrativo	= dem.nr_sequencia
and	dem.nr_seq_cabecalho		= cabecalho.nr_sequencia
and	cabecalho.nr_seq_retorno	= hist_guia.nr_seq_retorno  -- Insurance Return FK
and	dem_conta.nr_interno_conta	= hist_guia.nr_interno_conta			
and	hist_guia.nr_sequencia		= nr_seq_guia_w;

BEGIN

select	max(a.cd_convenio),
	max(a.cd_estabelecimento)
into STRICT	cd_convenio_w,
	cd_estabelecimento_w
from	lote_auditoria a,
	lote_audit_hist b
where	b.nr_seq_lote_audit	= a.nr_sequencia
and	b.nr_sequencia		= nr_seq_lote_hist_p;

select	coalesce(param.ie_guia_integral_dem, 'N') ie_guia_integral
into STRICT	ie_guia_integral_dem_w
from	tiss_parametros_convenio param
where	param.cd_convenio	=	cd_convenio_w
and	param.cd_estabelecimento =	cd_estabelecimento_w;

ie_motivo_glosa_conv_w := obter_param_usuario(69, 79, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_motivo_glosa_conv_w);

open C01;
loop
fetch C01 into
	nr_interno_conta_w,
	cd_autorizacao_w,
	nr_seq_guia_w,
	vl_original_w,
	vl_reapresentacao_w,
	nr_seq_retorno_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	nr_seq_motivo_glosa_w	:= null;

	select	nextval('tiss_recurso_glosa_guia_seq')
	into STRICT	nr_sequencia_w
	;

	/*Tratamento para verificar se e a glosa da guia completa ou dos itens*/

	if (vl_original_w = vl_reapresentacao_w) and (coalesce(vl_reapresentacao_w,0) > 0) then

		/*Somente se todos os motivos de glosa dos itens for o mesmo, uma vez que o motivo e unico por guia*/

		if (ie_motivo_glosa_conv_w = 'S') then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_motivo_glosa_w
			from	tiss_motivo_glosa a,
				lote_audit_hist_item b
			where	a.cd_motivo_tiss		= b.cd_motivo_glosa_tiss
			and	b.nr_seq_guia			= nr_seq_guia_w;
		else
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_motivo_glosa_w
			from	tiss_motivo_glosa a,
				lote_audit_hist_item b
			where	a.cd_motivo_glosa		= b.cd_motivo_glosa
			and	b.nr_seq_guia			= nr_seq_guia_w
			and	coalesce(a.cd_convenio,cd_convenio_w)= cd_convenio_w;
		end if;

		select	substr(max(ds_observacao),1,150)
		into STRICT	ds_justificativa_w
		from	lote_audit_hist_item
		where	nr_seq_guia	= nr_seq_guia_w;

		-- Searches for a denial reason in the imported analysis statement, both in Insurance Return and Denial Appeal Management.
		for r_iterator in c_denial_reason loop
			cd_motivo_tiss_w	:= r_iterator.cd_glosa;			
		end loop;

		/*
			ie_guia_integral_dem_w references a checkbox in Insurance, Prices and Rules Record / TISS / Parameters that states that the form denial should only be generated in the XML file
			if there was a form denial in the analysis statement.
			The implementation goes as following:
			1) If the parameter is checked ( equals to 'S' ) and there wasn't a form denial in the analysis (cd_motivo_tiss_w), should generate the form's items to be appealed.
		*/
		if (ie_guia_integral_dem_w = 'S') and (coalesce(cd_motivo_tiss_w::text, '') = '') then
			nr_seq_motivo_glosa_w := null;
		elsif 	(cd_motivo_tiss_w IS NOT NULL AND cd_motivo_tiss_w::text <> '') then
			select 	max(a.nr_sequencia)
			into STRICT 	nr_seq_motivo_glosa_w
			from 	tiss_motivo_glosa a
			where	a.cd_motivo_tiss = cd_motivo_tiss_w;
		else
			/*
				Verifico se no demonstrativo importado para esta conta na GRG, houve a descricao da glosa pelo procedimento.
				Se foi pelo procedimento, entao nao deve gerar o recurso por guia
			*/
			select	count(*)
			into STRICT	qt_glosa_item_w
			from	tiss_dem_glosa a,
				tiss_dem_conta_proc b,
				tiss_dem_conta c,
				tiss_dem_lote d,
				tiss_dem_fatura e,
				tiss_demonstrativo f,
				tiss_cabecalho g,
				lote_audit_hist_guia h
			where	a.nr_seq_conta_proc	= b.nr_sequencia
			and	b.nr_seq_conta		= c.nr_sequencia
			and	c.nr_seq_lote		= d.nr_sequencia
			and	d.nr_seq_fatura		= e.nr_sequencia
			and	e.nr_seq_demonstrativo	= f.nr_sequencia
			and	f.nr_seq_cabecalho	= g.nr_sequencia
			and	g.nr_seq_lote_hist	= h.nr_seq_lote_hist
			and	c.nr_interno_conta	= h.nr_interno_conta
			and	h.nr_sequencia		= nr_seq_guia_w;

			if (qt_glosa_item_w > 0) then
				nr_seq_motivo_glosa_w	:= null;

			elsif (nr_seq_retorno_w IS NOT NULL AND nr_seq_retorno_w::text <> '') then

				/*
					Verifico se no demonstrativo importado para esta conta no retorno, houve a descricao da glosa pelo procedimento.
					Se foi pelo procedimento, entao nao deve gerar o recurso por guia
				*/
				select	count(*)
				into STRICT	qt_glosa_item_w
				from	tiss_dem_glosa a,
					tiss_dem_conta_proc b,
					tiss_dem_conta c,
					tiss_dem_lote d,
					tiss_dem_fatura e,
					tiss_demonstrativo f,
					tiss_cabecalho g
				where	a.nr_seq_conta_proc	= b.nr_sequencia
				and	b.nr_seq_conta		= c.nr_sequencia
				and	c.nr_seq_lote		= d.nr_sequencia
				and	d.nr_seq_fatura		= e.nr_sequencia
				and	e.nr_seq_demonstrativo	= f.nr_sequencia
				and	f.nr_seq_cabecalho	= g.nr_sequencia
				and	g.nr_seq_retorno	= nr_seq_retorno_w
				and	c.nr_interno_conta	= nr_interno_conta_w;

				if (qt_glosa_item_w > 0) then
					nr_seq_motivo_glosa_w	:= null;
				end if;
			end if;

		end if;

	end if;

	--obter guias do demonstrativo de analise de contas
	select	substr(max(c.nr_guia_operadora),1,20),
		substr(max(c.nr_guia_prestador),1,20),
		substr(max(c.cd_senha),1,20)
	into STRICT	nr_guia_operadora_dem_w,
		nr_guia_prestador_dem_w,
		cd_senha_dem_w
	from	tiss_dem_conta c,
		tiss_dem_lote d,
		tiss_dem_fatura e,
		tiss_demonstrativo f,
		tiss_cabecalho g,
		lote_audit_hist_guia h
	where	c.nr_seq_lote		= d.nr_sequencia
	and	d.nr_seq_fatura		= e.nr_sequencia
	and	e.nr_seq_demonstrativo	= f.nr_sequencia
	and	f.nr_seq_cabecalho	= g.nr_sequencia
	and	g.nr_seq_lote_hist	= h.nr_seq_lote_hist
	and	c.nr_interno_conta	= h.nr_interno_conta
	and	h.nr_sequencia		= nr_seq_guia_w;

	if (coalesce(nr_guia_operadora_dem_w::text, '') = '') then

		select	substr(max(c.nr_guia_operadora),1,20),
			substr(max(c.nr_guia_prestador),1,20),
			substr(max(c.cd_senha),1,20)
		into STRICT	nr_guia_operadora_dem_w,
			nr_guia_prestador_dem_w,
			cd_senha_dem_w
		from	tiss_dem_conta c,
			tiss_dem_lote d,
			tiss_dem_fatura e,
			tiss_demonstrativo f,
			tiss_cabecalho g
		where	c.nr_seq_lote		= d.nr_sequencia
		and	d.nr_seq_fatura		= e.nr_sequencia
		and	e.nr_seq_demonstrativo	= f.nr_sequencia
		and	f.nr_seq_cabecalho	= g.nr_sequencia
		and	g.nr_seq_retorno	= nr_seq_retorno_w
		and	c.nr_interno_conta	= nr_interno_conta_w
		and	exists (
			SELECT	1
			from	tiss_dem_conta_proc x,
				lote_audit_hist_item y,
				procedimento_paciente z,
				tiss_conta_proc p,
				tiss_conta_guia g
			where	y.nr_seq_propaci 	= z.nr_sequencia
			and	x.nr_seq_conta 		= c.nr_sequencia
			and	to_char(coalesce(x.cd_procedimento_xml, x.cd_procedimento)) = coalesce(z.cd_procedimento_convenio,to_char(z.cd_procedimento))
			and	y.nr_seq_guia 		= nr_seq_guia_w
			and	z.nr_interno_conta 	= nr_interno_conta_w
			and	p.nr_seq_guia 		= g.nr_sequencia
			and	p.cd_procedimento	= to_char(coalesce(x.cd_procedimento_xml, x.cd_procedimento))
			and	p.nr_interno_conta	= z.nr_interno_conta
			and	trunc(p.dt_procedimento, 'dd') 	= trunc(z.dt_procedimento, 'dd')
			and	g.nr_guia_prestador 		= c.nr_guia_prestador
			
union

			SELECT	1
			from	tiss_dem_conta_proc x,
				lote_audit_hist_item y,
				material_atend_paciente z
			where	y.nr_seq_propaci 	= z.nr_sequencia
			and	x.nr_seq_conta 		= c.nr_sequencia
			and	to_char(coalesce(x.cd_procedimento_xml, x.cd_procedimento)) = coalesce(z.cd_material_convenio, to_char(z.cd_material))
			and	y.nr_seq_guia 		= nr_seq_guia_w
			and	z.nr_interno_conta 	= nr_interno_conta_w
		);

		if (coalesce(nr_guia_operadora_dem_w::text, '') = '') then

			select	substr(max(c.nr_guia_operadora),1,20),
				substr(max(c.nr_guia_prestador),1,20),
				substr(max(c.cd_senha),1,20)
			into STRICT	nr_guia_operadora_dem_w,
				nr_guia_prestador_dem_w,
				cd_senha_dem_w
			from	tiss_dem_conta c,
				tiss_dem_lote d,
				tiss_dem_fatura e,
				tiss_demonstrativo f,
				tiss_cabecalho g
			where	c.nr_seq_lote		= d.nr_sequencia
			and	d.nr_seq_fatura		= e.nr_sequencia
			and	e.nr_seq_demonstrativo	= f.nr_sequencia
			and	f.nr_seq_cabecalho	= g.nr_sequencia
			and	g.nr_seq_retorno	= nr_seq_retorno_w
			and	c.nr_interno_conta	= nr_interno_conta_w
			and	exists (
				SELECT	1
				from	tiss_dem_conta_proc x,
					lote_audit_hist_item y,
					procedimento_paciente z
				where	y.nr_seq_propaci 	= z.nr_sequencia
				and	x.nr_seq_conta 		= c.nr_sequencia
				and	to_char(x.cd_procedimento) = coalesce(z.cd_procedimento_convenio,to_char(z.cd_procedimento))
				and	y.nr_seq_guia 		= nr_seq_guia_w
				and	z.nr_interno_conta 	= nr_interno_conta_w
				
union

				SELECT	1
				from	tiss_dem_conta_proc x,
					lote_audit_hist_item y,
					material_atend_paciente z
				where	y.nr_seq_propaci 	= z.nr_sequencia
				and	x.nr_seq_conta 		= c.nr_sequencia
				and	to_char(x.cd_procedimento) = coalesce(z.cd_material_convenio, to_char(z.cd_material))
				and	y.nr_seq_guia 		= nr_seq_guia_w
				and	z.nr_interno_conta 	= nr_interno_conta_w
			);		

			if (coalesce(nr_guia_operadora_dem_w::text, '') = '') then

				select	substr(max(c.nr_guia_operadora),1,20),
					substr(max(c.nr_guia_prestador),1,20),
					substr(max(c.cd_senha),1,20)
				into STRICT	nr_guia_operadora_dem_w,
					nr_guia_prestador_dem_w,
					cd_senha_dem_w
				from	tiss_dem_conta c,
					tiss_dem_lote d,
					tiss_dem_fatura e,
					tiss_demonstrativo f,
					tiss_cabecalho g
				where	c.nr_seq_lote		= d.nr_sequencia
				and	d.nr_seq_fatura		= e.nr_sequencia
				and	e.nr_seq_demonstrativo	= f.nr_sequencia
				and	f.nr_seq_cabecalho	= g.nr_sequencia
				and	g.nr_seq_retorno	= nr_seq_retorno_w
				and	c.nr_interno_conta	= nr_interno_conta_w;

			end if;		
		end if;		
	end if;		

	if (nr_guia_operadora_dem_w IS NOT NULL AND nr_guia_operadora_dem_w::text <> '') then
		cd_autorizacao_w	:= nr_guia_operadora_dem_w;
		nr_guia_prestador_w	:= nr_guia_prestador_dem_w;
		cd_senha_w		:= cd_senha_dem_w;
	else
		select	max(cd_senha),
			max(nr_guia_prestador)
		into STRICT	cd_senha_w,
			nr_guia_prestador_w
		from	tiss_conta_guia
		where	nr_interno_conta	= nr_interno_conta_w
		and	cd_autorizacao		= cd_autorizacao_w
		and	ie_tiss_tipo_guia	in ('5','4','3');	
	end if;

	insert into TISS_RECURSO_GLOSA_GUIA(nr_sequencia,
		 dt_atualizacao,
		 nm_usuario,
		 dt_atualizacao_nrec,
		 nm_usuario_nrec,
		 nr_seq_lote_hist_guia,
		 nr_seq_rec_prot,
		 nr_interno_conta,
		 cd_autorizacao,
		 nr_guia_origem,
		 cd_senha,
		 nr_seq_motivo_glosa,
		 ds_justificativa,
		 vl_recursado_guia,
		 cd_motivo_tiss)
	values (nr_sequencia_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_guia_w,
		nr_seq_rec_prot_p,
		nr_interno_conta_w,
		cd_autorizacao_w,
		nr_guia_prestador_w,
		cd_senha_w,
		nr_seq_motivo_glosa_w,
		CASE WHEN coalesce(nr_seq_motivo_glosa_w,0)=0 THEN null  ELSE ds_justificativa_w END ,
		CASE WHEN coalesce(nr_seq_motivo_glosa_w,0)=0 THEN null  ELSE vl_reapresentacao_w END ,
		cd_motivo_tiss_w);

	if (coalesce(nr_seq_motivo_glosa_w::text, '') = '') then
		CALL TISS_GERAR_RECURSO_GLOSA_ITEM(nr_seq_guia_w, nm_usuario_p,nr_sequencia_w);
	end if;

	end;
end loop;
close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tiss_gerar_recurso_glosa_guia (nr_seq_lote_hist_p bigint, nm_usuario_p text, nr_seq_protocolo_p bigint, nr_seq_rec_prot_p bigint, nr_lote_p text default null) FROM PUBLIC;

