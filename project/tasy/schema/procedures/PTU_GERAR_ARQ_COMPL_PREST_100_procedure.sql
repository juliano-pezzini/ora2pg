-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_arq_compl_prest_100 (nr_seq_lote_p bigint, cd_interface_p text, nm_usuario_p text) AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar arquivo A450 de acordo com a versao PTU 10.0
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/ 

ds_conteudo_w			varchar(4000);
nm_arquivo_w			varchar(255);
ds_local_w			varchar(255) := null;
ds_erro_w			varchar(255);
arq_texto_w			utl_file.file_type;
nr_seq_registro_w		integer := 0;
ds_arquivo_w			text;
ds_hash_w			ptu_movimento_prestador.ds_hash_a450%type;

--451
cd_unimed_destino_w		varchar(4);
cd_unimed_origem_w		varchar(4);
dt_geracao_w			varchar(8);

--452
cd_rede_w			varchar(4);
nm_comercial_prod_w		varchar(40);
ie_reg_plano_ans_w		varchar(1);
nr_reg_plano_ans_w		varchar(20);
ie_classif_plano_w		varchar(1);
ie_situacao_ans_w		varchar(1);
ie_seg_produto_w		varchar(2);
nm_com_produto_w		varchar(60);
ie_ordem_w			bigint;
ie_acomodacao_w			varchar(2);
ie_abrangencia_w		varchar(2);
tipo_rede_min_w			varchar(2);

-- 453
rede_atend_w			ptu_movimento_exc_plano.rede_atend%type;
nm_produto_w			ptu_movimento_exc_plano.nm_produto%type;
reg_plano_ans_w			ptu_movimento_exc_plano.reg_plano_ans%type;
id_inclu_exclu_w		ptu_movimento_exc_plano.id_inclu_exclu%type;

-- 454
nr_seq_movto_exc_plano_w	ptu_movimento_plan_rede.nr_seq_movto_exc_plano%type;
cd_uni_pre_w			ptu_movimento_plan_rede.cd_uni_pre%type;
cd_cnpj_cpf_w			ptu_movimento_plan_rede.cd_cnpj_cpf%type;
cd_gr_serv_w			ptu_movimento_plan_rede.cd_gr_serv%type;

--459
qt_total_452_w			bigint := 0;

C01 CURSOR FOR
	SELECT	1 ie_ordem,
		rpad(d.cd_rede,4,' '),
		rpad(' ',40, ' '),
		CASE WHEN substr(pls_obter_dados_produto(e.nr_seq_plano,'SCPA'),1,1) IS NULL THEN '1'  ELSE '2' END ,
		rpad(coalesce(substr(elimina_acentuacao(pls_obter_dados_produto(e.nr_seq_plano,'PA')),1,20),' '),20,' '),
		(coalesce(CASE WHEN substr(pls_obter_dados_produto(e.nr_seq_plano,'IC'),1,1)='I' THEN 1 WHEN substr(pls_obter_dados_produto(e.nr_seq_plano,'IC'),1,1)='CE' THEN 2 WHEN substr(pls_obter_dados_produto(e.nr_seq_plano,'IC'),1,1)='CA' THEN null  ELSE null END ,'0'))::numeric ,
		(coalesce(CASE WHEN substr(pls_obter_dados_produto(e.nr_seq_plano,'IS'),1,1)='A' THEN 1 WHEN substr(pls_obter_dados_produto(e.nr_seq_plano,'IS'),1,1)='S' THEN 2 WHEN substr(pls_obter_dados_produto(e.nr_seq_plano,'IS'),1,1)='C' THEN 3 WHEN substr(pls_obter_dados_produto(e.nr_seq_plano,'IS'),1,1)='I' THEN 2 END ,'0'))::numeric ,
		lpad('0',2,'0'),
		rpad(coalesce(substr(elimina_acentuacao(pls_obter_dados_produto(e.nr_seq_plano,'NF')),1,60),' '),60,' '),
		coalesce(CASE WHEN pls_obter_dados_produto(e.nr_seq_plano,'IA')='C' THEN 'A' WHEN pls_obter_dados_produto(e.nr_seq_plano,'IA')='I' THEN 'B' WHEN pls_obter_dados_produto(e.nr_seq_plano,'IA')='N' THEN 'C' END ,' '),
		coalesce(CASE WHEN pls_obter_dados_produto(e.nr_seq_plano,'AG')='N' THEN '1' WHEN pls_obter_dados_produto(e.nr_seq_plano,'AG')='GE' THEN '2' WHEN pls_obter_dados_produto(e.nr_seq_plano,'AG')='E' THEN '3' WHEN pls_obter_dados_produto(e.nr_seq_plano,'AG')='GM' THEN '4' WHEN pls_obter_dados_produto(e.nr_seq_plano,'AG')='M' THEN '5' END ,'0'),
		CASE WHEN substr(d.cd_rede,1,2)='NA' THEN '0'  ELSE coalesce(d.ie_tipo_rede_min,'0') END  ie_tipo_rede_min  -- Regra: Se REDE_ATEND = NAXX (Nacional), preencher com zero
	from	ptu_rede_ref_produto	e,
		ptu_rede_referenciada	d,
		ptu_prestador_rede_ref	c,
		ptu_prestador		b,
		ptu_movimento_prestador	a
	where	a.nr_sequencia		= b.nr_seq_movimento
	and	c.nr_seq_prestador	= b.nr_sequencia
	and	d.cd_rede		= c.cd_rede
	and	e.cd_rede		= d.cd_rede
	and	a.nr_sequencia		= nr_seq_lote_p
	and	not exists (SELECT	1
				from	ptu_movimento_rede_ref	x
				where	x.nr_seq_movimento	= a.nr_sequencia)
	
union all

	select	2 ie_ordem,
		rpad(b.cd_rede,4,' '),
		rpad(' ',40,' '),
		coalesce(b.ie_reg_plano_ans,' '),
		rpad(coalesce(b.nr_reg_plano_ans,' '),20,' '),
		(coalesce(b.ie_classif_plano,'0'))::numeric ,
		(coalesce(b.ie_situacao_ans,'0'))::numeric ,
		lpad(coalesce(b.ie_seg_produto,'0'),2,'0'),
		rpad(coalesce(substr(elimina_acentuacao(b.nm_com_prod),1,60),' '),60,' '),
		coalesce(b.ie_acomodacao,' '),
		coalesce(b.ie_abrangencia,'0'),
		CASE WHEN substr(b.cd_rede,1,2)='NA' THEN '0'  ELSE coalesce(b.tipo_rede_min,'0') END  ie_tipo_rede_min  -- Regra: Se REDE_ATEND = NAXX (Nacional), preencher com zero
	from	ptu_movimento_rede_ref	b,
		ptu_movimento_prestador	a
	where	b.nr_seq_movimento	= a.nr_sequencia
	and	a.nr_sequencia		= nr_seq_lote_p
	order by 1,
		2;
		
C02 CURSOR FOR
	SELECT	rpad(coalesce(rede_atend,' '),4,' '),
		rpad(coalesce(nm_produto,' '),60,' '),
		rpad(coalesce(reg_plano_ans,' '),20,' '),
		coalesce(id_inclu_exclu,' '),
		nr_sequencia
	from	ptu_movimento_exc_plano
	where	nr_seq_movimento	= nr_seq_lote_p;
	
C03 CURSOR FOR
	SELECT	rpad(coalesce(cd_uni_pre,' '),4,' '),
		lpad(coalesce(cd_cnpj_cpf,'0'),15,'0'),
		lpad(coalesce(cd_gr_serv,'0'),3,'0')
	from	ptu_movimento_plan_rede
	where	nr_seq_movto_exc_plano	= nr_seq_movto_exc_plano_w;


BEGIN
select	ptu_obter_nome_exportacao(nr_seq_lote_p,'MCPP')
into STRICT	nm_arquivo_w
;

SELECT * FROM obter_evento_utl_file(4, null, ds_local_w, ds_erro_w) INTO STRICT ds_local_w, ds_erro_w;

if (coalesce(trim(both ds_local_w)::text, '') = '' or (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '')) then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(1076446, 'DS_ERRO=' || ds_erro_w);
end if;

arq_texto_w := utl_file.fopen(ds_local_w,nm_arquivo_w,'W');

-- R451  HEADER (OBRIGAToRIO)
select	lpad(coalesce(cd_unimed_destino,'0'),4,'0'),
	lpad(coalesce(cd_unimed_origem,'0'),4,'0'),
	to_char(coalesce(dt_geracao,clock_timestamp()),'yyyymmdd')
into STRICT	cd_unimed_destino_w,
	cd_unimed_origem_w,
	dt_geracao_w
from	ptu_movimento_prestador
where	nr_sequencia = nr_seq_lote_p;

nr_seq_registro_w := nr_seq_registro_w + 1;

ds_conteudo_w	:=	lpad(nr_seq_registro_w,8,'0') || '451' || cd_unimed_destino_w || cd_unimed_origem_w || dt_geracao_w || '07';
ds_arquivo_w	:=	ds_arquivo_w || ds_conteudo_w;

utl_file.put_line(arq_texto_w,ds_conteudo_w || chr(13));
utl_file.fflush(arq_texto_w);
ds_conteudo_w := null;

-- R452  COMPLEMENTO DE DADOS  GUIA MeDICO (OBRIGAToRIO)
open C01;
loop
fetch C01 into	
	ie_ordem_w,
	cd_rede_w,
	nm_comercial_prod_w,
	ie_reg_plano_ans_w,
	nr_reg_plano_ans_w,
	ie_classif_plano_w,
	ie_situacao_ans_w,
	ie_seg_produto_w,
	nm_com_produto_w,
	ie_acomodacao_w,
	ie_abrangencia_w,
	tipo_rede_min_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	qt_total_452_w := qt_total_452_w + 1;
	nr_seq_registro_w := nr_seq_registro_w + 1;

	ds_conteudo_w	:=	lpad(nr_seq_registro_w,8,'0') || '452' || cd_rede_w || nm_comercial_prod_w || ie_reg_plano_ans_w || nr_reg_plano_ans_w ||
				ie_classif_plano_w || ie_situacao_ans_w || ie_seg_produto_w || nm_com_produto_w || ie_acomodacao_w || ie_abrangencia_w ||
				tipo_rede_min_w;
	ds_arquivo_w	:=	ds_arquivo_w || ds_conteudo_w;

	utl_file.put_line(arq_texto_w,ds_conteudo_w || chr(13));
	utl_file.fflush(arq_texto_w);
	ds_conteudo_w := null;
	end;
end loop;
close C01;

-- R453  EXCEcaO PARA PLANOS (Obrigatorio quando houver excecoes)
open C02;
loop
fetch C02 into	
	rede_atend_w,
	nm_produto_w,
	reg_plano_ans_w,
	id_inclu_exclu_w,
	nr_seq_movto_exc_plano_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	nr_seq_registro_w := nr_seq_registro_w + 1;

	ds_conteudo_w	:=	lpad(nr_seq_registro_w,8,'0') || '453' || rede_atend_w || nm_produto_w || reg_plano_ans_w || id_inclu_exclu_w;
	ds_arquivo_w	:=	ds_arquivo_w || ds_conteudo_w;

	utl_file.put_line(arq_texto_w,ds_conteudo_w || chr(13));
	utl_file.fflush(arq_texto_w);
	ds_conteudo_w := null;
	
	-- R454  INCLUSaO OU EXCLUSaO DE PRESTADORES EM PLANOS OU REDES DE ATENDIMENTOS LOCAIS (Obrigatorio quando informado o R453)
	open C03;
	loop
	fetch C03 into	
		cd_uni_pre_w,
		cd_cnpj_cpf_w,
		cd_gr_serv_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		nr_seq_registro_w := nr_seq_registro_w + 1;

		ds_conteudo_w	:=	lpad(nr_seq_registro_w,8,'0') || '454' || cd_uni_pre_w || cd_cnpj_cpf_w || cd_gr_serv_w;
		ds_arquivo_w	:=	ds_arquivo_w || ds_conteudo_w;

		utl_file.put_line(arq_texto_w,ds_conteudo_w || chr(13));
		utl_file.fflush(arq_texto_w);
		ds_conteudo_w := null;
		end;
	end loop;
	close C03;
	
	end;
end loop;
close C02;

-- R459  TRAILER (OBRIGAToRIO)
nr_seq_registro_w := nr_seq_registro_w + 1;

ds_conteudo_w	:=	lpad(nr_seq_registro_w,8,'0') || '459' || lpad(qt_total_452_w,7,'0');
ds_arquivo_w	:=	ds_arquivo_w || ds_conteudo_w;

utl_file.put_line(arq_texto_w,ds_conteudo_w || chr(13));
utl_file.fflush(arq_texto_w);

-- R998  Hash (OBRIGAToRIO)
nr_seq_registro_w	:=	nr_seq_registro_w + 1;
ds_arquivo_w := pls_hash_ptu_pck.obter_hash_txt(ds_arquivo_w); -- Gerar HASH
ds_conteudo_w		:=	lpad(nr_seq_registro_w,8,'0') || '998' || ds_hash_w;

utl_file.put_line(arq_texto_w,ds_conteudo_w || chr(13));
utl_file.fflush(arq_texto_w);

update	ptu_movimento_prestador
set	ds_hash_a450		= ds_hash_w
where	nr_sequencia		= nr_seq_lote_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_arq_compl_prest_100 (nr_seq_lote_p bigint, cd_interface_p text, nm_usuario_p text) FROM PUBLIC;

