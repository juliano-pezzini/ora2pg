-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS mprev_grupo_turma_partic_upd ON mprev_grupo_turma_partic CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_mprev_grupo_turma_partic_upd() RETURNS trigger AS $BODY$
DECLARE
 
nr_sequencia_w		comunic_interna.nr_sequencia%type;
ds_comunicado_w		comunic_interna.ds_comunicado%type;
nm_turma_w		varchar(255);
ds_titulo_w		varchar(400);
ie_ci_incluir_w		varchar(1);
ie_email_incluir_w		varchar(1);
ie_ci_excluir_w		varchar(1);
ie_email_excluir_w		varchar(1);
usuario_destino_w		varchar(255);
ds_email_destino_w		varchar(255) 	:= null;
ds_email_origem_w		varchar(255) 	:= null;
ie_email_valido_w		varchar(255) 	:= 'N';
 
/* Permite consulta o nome do participante na tabela pessoa_fisica mesmo quando a atualização da tabela mprev_grupo_turma_partic se faz pela trigger pessoa_fisica_atual ao inserir a dt_obito na pessoa_fisica. 
Impede que a tabela pessoa_fisica se torne mutante ao buscar o nome da pessoa fisica do participante*/
 
pragma autonomous_transaction;
BEGIN
  BEGIN 
 
SELECT * FROM hdm_obter_dados_turma(NEW.nr_sequencia, NEW.nr_seq_turma, ie_ci_incluir_w, ie_email_incluir_w, ie_ci_excluir_w, ie_email_excluir_w, usuario_destino_w, ds_email_destino_w) INTO STRICT ie_ci_incluir_w, ie_email_incluir_w, ie_ci_excluir_w, ie_email_excluir_w, usuario_destino_w, ds_email_destino_w;
 
select 	max(a.nm_turma) 
into STRICT 	nm_turma_w 
from 	mprev_grupo_col_turma a 
where 	a.nr_sequencia = NEW.nr_seq_turma;
 
ds_comunicado_w		:=	wheb_mensagem_pck.get_texto(417642, 'NM_PARTICIPANTE='||SUBSTR(mprev_obter_nm_participante(OLD.nr_seq_participante),1,255)||';NM_TURMA='||nm_turma_w);
ds_titulo_w		:= 	wheb_mensagem_pck.get_texto(417640, 'NM_TURMA='||nm_turma_w);
 
if ((ie_ci_excluir_w = 'S') and (NEW.dt_saida is not null) and (OLD.dt_saida is null)) then 
 
	if (usuario_destino_w is not null) then 
	BEGIN 
 
	insert	into comunic_interna(dt_comunicado, 
			ds_titulo, 
			ds_comunicado, 
			nm_usuario, 
			dt_atualizacao, 
			ie_geral, 
			nm_usuario_destino, 
			nr_sequencia, 
			ie_gerencial, 
			dt_liberacao) 
	values (LOCALTIMESTAMP, 
			ds_titulo_w, 
			ds_comunicado_w, 
			wheb_usuario_pck.get_nm_usuario, 
			LOCALTIMESTAMP, 
			'N', 
			usuario_destino_w, 
			nextval('comunic_interna_seq'), 
			'N', 
			LOCALTIMESTAMP);
	exception 
	when others then 
	insert into log_tasy(dt_atualizacao, nm_usuario, cd_log, ds_log) values (LOCALTIMESTAMP, 
			 wheb_usuario_pck.get_nm_usuario, 
			 33, 
			 wheb_mensagem_pck.get_texto(419754, 'NM_TURMA='||nm_turma_w||';NM_PARTICIPANTE='||SUBSTR(mprev_obter_nm_participante(OLD.nr_seq_participante),1,255)));
 
 
	end;
	end if;
end if;
 
if ((ie_email_excluir_w = 'S') and (NEW.dt_saida is not null) and (OLD.dt_saida is null)) then 
 
	if (ds_email_destino_w is not null) then 
 
		select 	substr(obter_dados_usuario_opcao(wheb_usuario_pck.get_nm_usuario, 'E'),1,255) 
		into STRICT 	ds_email_origem_w 
		;
 
		if (ds_email_origem_w is null) then 
 
			select 	substr(obter_compl_pf(obter_dados_usuario_opcao(wheb_usuario_pck.get_nm_usuario, 'C'), 1, 'M'),1,255) 
			into STRICT 	ds_email_origem_w 
			;
 
		end if;
 
		select 	obter_se_email_valido(ds_email_destino_w) 
		into STRICT 	ie_email_valido_w 
		;
 
		if (ie_email_valido_w = 'S') then 
		BEGIN 
			CALL enviar_email(ds_titulo_w, ds_comunicado_w, ds_email_origem_w, ds_email_destino_w, wheb_usuario_pck.get_nm_usuario, 'M');
		exception 
	  when others then 
			insert into log_tasy(dt_atualizacao, nm_usuario, cd_log, ds_log) values (LOCALTIMESTAMP, 
			     		wheb_usuario_pck.get_nm_usuario, 
			     		33, 
			     		wheb_mensagem_pck.get_texto(419745, 'NM_TURMA='||nm_turma_w||';DS_TITULO='||ds_titulo_w||';DS_COMUNICADO='||ds_comunicado_w||';DS_EMAIL_ORIGEM='|| 
								 													ds_email_origem_w||';DS_EMAIL_DESTINO='||ds_email_destino_w));
		end;
		end if;
	end if;
end if;
 
commit;
 
  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_mprev_grupo_turma_partic_upd() FROM PUBLIC;

CREATE TRIGGER mprev_grupo_turma_partic_upd
	AFTER UPDATE ON mprev_grupo_turma_partic FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_mprev_grupo_turma_partic_upd();

