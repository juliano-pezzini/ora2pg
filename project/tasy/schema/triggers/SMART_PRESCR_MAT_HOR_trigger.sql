-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS smart_prescr_mat_hor ON prescr_mat_hor CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_smart_prescr_mat_hor() RETURNS trigger AS $BODY$
declare
	reg_integracao_w			gerar_int_padrao.reg_integracao;
	qt_medicamento_w        	bigint;
    ie_acm_sn_w             	varchar(1);
	ie_primeiro_aprazamento_w   varchar(1);

	pragma autonomous_transaction;
BEGIN
  BEGIN
BEGIN
	select coalesce(max(OBTER_SE_ACM_SN(IE_ACM,IE_SE_NECESSARIO)),'N')
	into STRICT ie_acm_sn_w	
	from prescr_material
	where nr_sequencia = NEW.NR_SEQ_MATERIAL
	and nr_prescricao  = NEW.NR_PRESCRICAO;
	
    select 	coalesce(max('N'),'S')
	into STRICT 	ie_primeiro_aprazamento_w
	from 	prescr_mat_hor
	where 	nr_seq_material = NEW.nr_seq_material
	and 	nr_prescricao = NEW.nr_prescricao
	and 	ie_aprazado = 'S'
	and 	obter_se_medic_cih(cd_material) = 'S';
	
	if 	(((OLD.DT_SUSPENSAO IS NULL AND NEW.DT_SUSPENSAO IS NOT NULL)
	    OR (NEW.DT_HORARIO 	<> OLD.DT_HORARIO)
		AND (TG_OP = 'UPDATE')) 
			OR  
		((coalesce(NEW.IE_APRAZADO,'N') = 'S') 
		and (TG_OP = 'INSERT')))
		and (obter_se_medic_cih(NEW.cd_material) = 'S')
	then 
		BEGIN
			reg_integracao_w.cd_estab_documento := wheb_usuario_pck.get_cd_estabelecimento;
			
			if  (ie_acm_sn_w = 'S' AND ie_primeiro_aprazamento_w = 'S') then
				reg_integracao_w := gerar_int_padrao.gravar_integracao('305', NEW.NR_PRESCRICAO, NEW.nm_usuario, reg_integracao_w, 'NR_PRESCRICAO=' || NEW.NR_PRESCRICAO || ';NR_SEQUENCIA=' || NEW.NR_SEQ_MATERIAL || ';DS_OPERACAO=CREATE');
				commit;
			else
				reg_integracao_w := gerar_int_padrao.gravar_integracao('305', NEW.NR_PRESCRICAO, NEW.nm_usuario, reg_integracao_w, 'NR_PRESCRICAO=' || NEW.NR_PRESCRICAO || ';NR_SEQUENCIA=' || NEW.NR_SEQ_MATERIAL || ';DS_OPERACAO=UPDATE');
				commit;
			end if;
		END;	
	end if;
exception when others then
	null;
end;

  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_smart_prescr_mat_hor() FROM PUBLIC;

CREATE TRIGGER smart_prescr_mat_hor
	AFTER INSERT OR UPDATE ON prescr_mat_hor FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_smart_prescr_mat_hor();

