-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atendimento_alta_insert ON atendimento_alta CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atendimento_alta_insert() RETURNS trigger AS $BODY$
declare
ie_status_pa_w			varchar(15);
ie_executar_agenda_w		varchar(1);
nr_seq_agenda_w			agenda_consulta.nr_sequencia%type;
qt_idade_w			bigint;
nr_seq_evento_desfecho_alta_w	bigint;
cd_pessoa_fisica_w		varchar(10);
nr_seq_evento_desfecho_int_w	bigint;
dt_fim_consulta_w		timestamp;
qt_reg_w	smallint;
ie_liberar_desfecho_w varchar(1);

C01 CURSOR FOR
	SELECT	a.nr_seq_evento
	FROM	regra_envio_sms a
	WHERE	a.cd_estabelecimento	= obter_estabelecimento_ativo
	AND	a.ie_evento_disp	= 'DALT'
	AND	qt_idade_w BETWEEN coalesce(qt_idade_min,0)	AND coalesce(qt_idade_max,9999)
	and	((NEW.cd_motivo_alta = cd_motivo_alta) or (0 = coalesce(cd_motivo_alta,0)))
	and	coalesce(a.ie_situacao,'A') = 'A';
	
C02 CURSOR FOR
	SELECT	a.nr_seq_evento
	FROM	regra_envio_sms a
	WHERE	a.cd_estabelecimento	= obter_estabelecimento_ativo
	AND	a.ie_evento_disp	= 'DINT'
	AND	qt_idade_w BETWEEN coalesce(qt_idade_min,0)	AND coalesce(qt_idade_max,9999)
	and	coalesce(a.ie_situacao,'A') = 'A';
BEGIN
  BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
qt_idade_w	:= coalesce(obter_idade_pf(obter_pessoa_atendimento(NEW.nr_atendimento,'C'),LOCALTIMESTAMP,'A'),0);
cd_pessoa_fisica_w	:= substr(obter_pessoa_atendimento(NEW.nr_atendimento,'C'),1,10);

select coalesce(max(ie_liberar_desfecho),'N')
into STRICT   ie_liberar_desfecho_w
from   parametro_medico
where  cd_estabelecimento = obter_estabelecimento_ativo;

if ((ie_liberar_desfecho_w = 'S') and (NEW.ie_tipo_orientacao = 'P') and (NEW.dt_liberacao is null)) then
	goto Final;
end if;

if (NEW.ie_desfecho <> 'T') and (NEW.ie_tipo_orientacao = 'P') then
	update	atendimento_paciente
	set	dt_lib_medico	= LOCALTIMESTAMP
	where	nr_atendimento	= NEW.nr_atendimento
	and	dt_lib_medico is null;
end if;

if (coalesce(obter_valor_param_usuario(935, 110, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.get_cd_estabelecimento),'N') = 'S')  then


	select 	max(dt_fim_consulta)
	into STRICT	dt_fim_consulta_w
	from	atendimento_paciente
	where	nr_atendimento	= NEW.nr_atendimento;

	if (dt_fim_consulta_w is null) then
	
	update	atendimento_paciente
	set		dt_fim_consulta		= LOCALTIMESTAMP,
			nm_usuario     		= NEW.nm_usuario,
			dt_atualizacao 		= LOCALTIMESTAMP
	where	nr_atendimento		= NEW.nr_atendimento
	and		dt_atend_medico is not null;
	
	end if;

end if;	
	
if (NEW.ie_desfecho = 'I') then

	select 	coalesce(max(ie_status_pa),'NA')
	into STRICT	ie_status_pa_w
	from	atendimento_paciente
	where	nr_atendimento	= NEW.nr_atendimento;
	
	if (ie_status_pa_w not in ('AL','PL')) then
	
		update	atendimento_paciente
		set	ie_status_pa = 'IN'
		where	nr_atendimento	= NEW.nr_atendimento;
		
		CALL gravar_atend_status_pa(NEW.nr_atendimento,'IN',NEW.nm_usuario);


	end if;
	
	BEGIN
	open c02;
	loop
	fetch c02 into
		nr_seq_evento_desfecho_int_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		BEGIN
		CALL gerar_evento_paciente_trigger( nr_seq_evento_desfecho_int_w ,NEW.nr_atendimento,cd_pessoa_fisica_w,null,NEW.nm_usuario,null,NEW.dt_liberacao,null);
		end;
	end loop;
	close c02;
	exception
		when others then
		null;
	end;
	
elsif (NEW.ie_desfecho = 'T') then
	if (coalesce(obter_valor_param_usuario(935, 137, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.get_cd_estabelecimento),'N') = 'S') then

		CALL Atualizar_datas_pa(NEW.nr_atendimento, 'FC', NEW.nm_usuario, 'N');

		insert into atendimento_pac_chamado(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_atendimento,
			dt_inicio_atendimento,
			dt_atend_medico,
			dt_chamada_paciente,
			dt_chamada_reavaliacao,
			dt_reavaliacao_medica,
			dt_chamada_enfermagem,
			ie_status_pa,
			dt_fim_consulta)
		SELECT	nextval('atendimento_pac_chamado_seq'),
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			NEW.nr_atendimento,
			dt_inicio_atendimento,
			dt_atend_medico,
			dt_chamada_paciente,
			dt_chamada_reavaliacao,
			dt_reavaliacao_medica,
			dt_chamada_enfermagem,
			ie_status_pa,
			dt_fim_consulta
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento;
		
		update	atendimento_paciente set
			--dt_inicio_atendimento = null,

			dt_atend_medico  = NULL,
			dt_chamada_paciente  = NULL,
			dt_chamada_reavaliacao  = NULL,
			dt_reavaliacao_medica  = NULL,
			dt_fim_consulta  = NULL,
			--dt_chamada_enfermagem = null,

			ie_status_pa = 'LE' -- Liberacao da Enfermagem

		where	nr_atendimento = NEW.nr_atendimento;
	end if;
	
end if;

/* Rafael em 07/12/06 OS40695 */


select	coalesce(max(obter_valor_param_usuario(935, 15, obter_perfil_ativo, NEW.nm_usuario, 0)),'N')
into STRICT	ie_executar_agenda_w
;

if (ie_executar_agenda_w = 'S') and (NEW.ie_desfecho = 'A') then
	select	coalesce(max(b.nr_sequencia),0)
	into STRICT	nr_seq_agenda_w
	from	agenda_consulta b,
		atendimento_paciente a
	where	b.nr_atendimento = a.nr_atendimento
	and	a.nr_atendimento = NEW.nr_atendimento;

	if (nr_seq_agenda_w > 0) then
		update	agenda_consulta
		set	ie_status_agenda	= 'E'
		where	nr_sequencia		= nr_seq_agenda_w;
	end if;
end if;
BEGIN
if (NEW.ie_desfecho = 'A') then
	open c01;
	loop
	fetch c01 into
		nr_seq_evento_desfecho_alta_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN
		CALL gerar_evento_paciente_trigger(nr_seq_evento_desfecho_alta_w,NEW.nr_atendimento,cd_pessoa_fisica_w,null,NEW.nm_usuario,null,NEW.dt_liberacao,null);
		end;
	end loop;
	close c01;
end if;	

exception
	when others then
	null;
end;
end if;

<<Final>>
qt_reg_w	:= 0;

  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atendimento_alta_insert() FROM PUBLIC;

CREATE TRIGGER atendimento_alta_insert
	AFTER INSERT ON atendimento_alta FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atendimento_alta_insert();

