-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS sup_int_oc_atual ON sup_int_oc CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_sup_int_oc_atual() RETURNS trigger AS $BODY$
declare
pragma autonomous_transaction;

qt_existe_erros_w			bigint;
nr_ordem_compra_w		bigint;
qt_existe_w			bigint;
nr_sequencia_w			bigint;
qt_existe_oc_w			bigint;
nr_ordem_existente_w		bigint;
nr_ano_ordem_w			smallint;
nr_serie_oc_w			smallint;
BEGIN
  BEGIN

select	count(*)
into STRICT	qt_existe_w
from	sup_parametro_integracao
where	cd_estabelecimento = NEW.cd_estabelecimento
and	ie_evento = 'OC'
and	ie_forma = 'R'
and	ie_situacao = 'A';

if (qt_existe_w > 0) and (OLD.dt_liberacao is null) and (NEW.dt_liberacao is not null) and (NEW.ie_forma_integracao = 'R') then
	BEGIN

	nr_ordem_compra_w	:= 0;
	NEW.dt_leitura		:= LOCALTIMESTAMP;

	if (coalesce(NEW.nr_ordem_existente,0) > 0) and (coalesce(NEW.nr_ano_ordem,0) > 0) and (NEW.nr_serie_oc is not null) then

		BEGIN
		select	count(*)
		into STRICT	qt_existe_oc_w
		from	ordem_compra
		where	nr_documento_externo = NEW.nr_ordem_existente || NEW.nr_serie_oc || NEW.nr_ano_ordem;
		exception when others then
			qt_existe_oc_w	:= 0;
		end;

	else
		select	(substr(to_char(NEW.nr_documento_externo),1,length(NEW.nr_documento_externo)-5))::numeric ,
			(substr(to_char(NEW.nr_documento_externo),length(NEW.nr_documento_externo)-4,1))::numeric ,
			(substr(to_char(NEW.nr_documento_externo),length(NEW.nr_documento_externo)-3,4))::numeric
		into STRICT	nr_ordem_existente_w,
			nr_serie_oc_w,
			nr_ano_ordem_w
		;

		BEGIN
		select	count(*)
		into STRICT	qt_existe_oc_w
		from	ordem_compra
		where	(substr(to_char(nr_documento_externo),1,length(to_char(nr_documento_externo))-5))::numeric  = nr_ordem_existente_w
		and  	(substr(to_char(nr_documento_externo),length(to_char(nr_documento_externo))-4,1))::numeric  = nr_serie_oc_w
		and	(substr(to_char(nr_documento_externo),length(nr_documento_externo)-3,4))::numeric  = nr_ano_ordem_w;
		exception when others then
			qt_existe_oc_w	:= 0;
		end;
	end if;

	if (qt_existe_oc_w = 0) then
		BEGIN

		CALL consiste_sup_int_oc(
			NEW.nr_sequencia,
			NEW.cd_estabelecimento,
			NEW.cd_cgc_fornecedor,
			NEW.cd_pessoa_fisica,
			NEW.cd_condicao_pagamento,
			NEW.cd_comprador,
			NEW.cd_moeda,
			NEW.cd_pessoa_solicitante,
			NEW.cd_cgc_transportador,
			NEW.ie_frete,
			NEW.cd_local_entrega,
			NEW.nr_seq_forma_pagto,
			NEW.cd_centro_custo,
			NEW.dt_entrega);

		select	count(*)
		into STRICT	qt_existe_erros_w
		from	sup_int_oc_consist
		where	nr_sequencia = NEW.nr_sequencia;

		if (qt_existe_erros_w = 0) then

			nr_ordem_compra_w := gerar_ordem_compra_integracao(
				NEW.nr_sequencia, WHEB_MENSAGEM_PCK.get_texto(799532), NEW.cd_estabelecimento, NEW.cd_cgc_fornecedor, NEW.cd_condicao_pagamento, NEW.cd_comprador, NEW.cd_moeda, NEW.cd_pessoa_solicitante, NEW.cd_cgc_transportador, NEW.ie_frete, NEW.vl_frete, NEW.pr_desconto, NEW.pr_desc_pgto_antec, NEW.pr_juros_negociado, NEW.ds_pessoa_contato, NEW.ds_observacao, NEW.cd_local_entrega, NEW.dt_entrega, NEW.ie_aviso_chegada, NEW.vl_despesa_acessoria, NEW.nr_seq_subgrupo_compra, NEW.pr_desc_financeiro, NEW.cd_pessoa_fisica, NEW.ie_urgente, NEW.nr_seq_forma_pagto, NEW.nr_documento_externo, NEW.vl_desconto, NEW.cd_centro_custo, nr_ordem_compra_w);

		/* Era aqui antes */

		end if;

		end;
	else
		BEGIN

		nr_ordem_compra_w := atualiza_ordem_compra_integ(
			NEW.nr_sequencia, WHEB_MENSAGEM_PCK.get_texto(799532), NEW.cd_estabelecimento, NEW.cd_cgc_fornecedor, NEW.cd_condicao_pagamento, NEW.cd_comprador, NEW.cd_moeda, NEW.cd_pessoa_solicitante, NEW.cd_cgc_transportador, NEW.ie_frete, NEW.vl_frete, NEW.pr_desconto, NEW.pr_desc_pgto_antec, NEW.pr_juros_negociado, NEW.ds_pessoa_contato, NEW.ds_observacao, NEW.cd_local_entrega, NEW.dt_entrega, NEW.ie_aviso_chegada, NEW.vl_despesa_acessoria, NEW.nr_seq_subgrupo_compra, NEW.pr_desc_financeiro, NEW.cd_pessoa_fisica, NEW.ie_urgente, NEW.nr_seq_forma_pagto, NEW.nr_documento_externo, NEW.vl_desconto, NEW.cd_centro_custo, NEW.nr_seq_motivo_cancel, nr_ordem_compra_w);

		end;
	end if;

	if (nr_ordem_compra_w <> 0) then
		BEGIN
		NEW.dt_confirma_integracao 		:= LOCALTIMESTAMP;
		NEW.nr_ordem_compra			:= nr_ordem_compra_w;

		select	count(*)
		into STRICT	qt_existe_w
		from	sup_parametro_integracao a,
			sup_int_regra_oc b
		where	a.nr_sequencia = b.nr_seq_integracao
		and	a.cd_estabelecimento = NEW.cd_estabelecimento
		and	a.ie_evento = 'OC'
		and	a.ie_forma = 'E'
		and	a.ie_situacao = 'A'
		and	b.ie_situacao = 'A'
		and	coalesce(b.cd_local_entrega,NEW.cd_local_entrega) = NEW.cd_local_entrega
		and	ie_lib_aprov = 'R';

		if (qt_existe_w > 0) then
			BEGIN

			select	count(*)
			into STRICT	qt_existe_w
			from	sup_int_oc
			where	nr_ordem_compra = nr_ordem_compra_w
			and	ie_forma_integracao = 'E';

			if (qt_existe_w = 0) then
				BEGIN

				select	nextval('sup_int_oc_seq')
				into STRICT	nr_sequencia_w
				;

				insert into sup_int_oc(
					nr_sequencia,
					ie_forma_integracao,
					nr_ordem_compra,
					cd_estabelecimento,
					cd_cgc_fornecedor,
					cd_condicao_pagamento,
					cd_comprador,
					dt_ordem_compra,
					cd_moeda,
					cd_pessoa_solicitante,
					cd_cgc_transportador,
					ie_frete,
					vl_frete,
					pr_desconto,
					pr_desc_pgto_antec,
					pr_juros_negociado,
					ds_pessoa_contato,
					ds_observacao,
					cd_local_entrega,
					dt_entrega,
					ie_aviso_chegada,
					vl_despesa_acessoria,
					nr_seq_subgrupo_compra,
					pr_desc_financeiro,
					cd_pessoa_fisica,
					ie_urgente,
					nr_seq_forma_pagto,
					nr_documento_externo,
					vl_desconto,
					cd_centro_custo,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					dt_liberacao) values (
						nr_sequencia_w,
						'E',
						nr_ordem_compra_w,
						NEW.cd_estabelecimento,
						NEW.cd_cgc_fornecedor,
						NEW.cd_condicao_pagamento,
						NEW.cd_comprador,
						NEW.dt_ordem_compra,
						NEW.cd_moeda,
						NEW.cd_pessoa_solicitante,
						NEW.cd_cgc_transportador,
						NEW.ie_frete,
						NEW.vl_frete,
						NEW.pr_desconto,
						NEW.pr_desc_pgto_antec,
						NEW.pr_juros_negociado,
						NEW.ds_pessoa_contato,
						NEW.ds_observacao,
						NEW.cd_local_entrega,
						NEW.dt_entrega,
						NEW.ie_aviso_chegada,
						NEW.vl_despesa_acessoria,
						NEW.nr_seq_subgrupo_compra,
						NEW.pr_desc_financeiro,
						NEW.cd_pessoa_fisica,
						NEW.ie_urgente,
						NEW.nr_seq_forma_pagto,
						NEW.nr_documento_externo,
						NEW.vl_desconto,
						NEW.cd_centro_custo,
						LOCALTIMESTAMP,
						'INTEGRACAO', --Nome de usuario necessário para integração Tasy - Protheus
						LOCALTIMESTAMP,
						'INTEGRACAO', --Nome de usuario necessário para integração Tasy - Protheus
						LOCALTIMESTAMP);

				end;
			else
				BEGIN

				select	max(nr_sequencia)
				into STRICT	nr_sequencia_w
				from	sup_int_oc
				where	nr_ordem_compra = nr_ordem_compra_w;

				end;
			end if;

			CALL envia_sup_int_oc_item(nr_ordem_compra_w,
					nr_sequencia_w,
					NEW.cd_estabelecimento,
					'INTEGRACAO'); --Nome de usuario necessário para integração Tasy - Protheus
			end;
		else
			BEGIN

			if (NEW.ie_forma_integracao = 'R') then
				BEGIN
				CALL envia_sup_int_oc_item(nr_ordem_compra_w,
					NEW.nr_sequencia,
					NEW.cd_estabelecimento,
					'INTEGRACAO'); --Nome de usuario necessário para integração Tasy - Protheus
				end;
			end if;

			end;
		end if;

		end;
	end if;

	end;
end if;

commit;

  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_sup_int_oc_atual() FROM PUBLIC;

CREATE TRIGGER sup_int_oc_atual
	BEFORE UPDATE ON sup_int_oc FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_sup_int_oc_atual();

