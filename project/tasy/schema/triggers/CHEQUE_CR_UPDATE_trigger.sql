-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS cheque_cr_update ON cheque_cr CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_cheque_cr_update() RETURNS trigger AS $BODY$
declare

ie_tipo_devolucao_w		varchar(5);
ie_repasse_cheque_comp_w	varchar(1);

dt_fechamento_w			timestamp	:= null;
nr_recibo_w			bigint;
qt_registro_w			bigint;
ie_pessoa_w		varchar(1);

ie_cheque_deposito_w		varchar(1)	:= 'S';
qt_reg_w			smallint;
ie_lib_rep_tit_cheque_w		varchar(1);
ds_moeda_w			moeda.ds_moeda%type;
cd_moeda_unica_w		banco_estabelecimento.cd_moeda%type;
ds_conta_w			banco_estabelecimento_v.ds_conta%type;
BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

select	coalesce(max(ie_pessoa_cheque_cr),'N')
into STRICT	ie_pessoa_w
from	parametro_contas_receber
where	cd_estabelecimento	= NEW.cd_estabelecimento;

if (ie_pessoa_w = 'S') and (NEW.cd_pessoa_fisica is null and NEW.cd_cgc is null) then
	/* O cheque deve ser de uma pessoa física ou jurídica! */


	CALL wheb_mensagem_pck.exibir_mensagem_abort(223996);
end if;

if (coalesce(NEW.dt_deposito, to_date('01/01/1900','dd/mm/yyyy')) 		<> coalesce(OLD.dt_deposito, to_date('01/01/1900','dd/mm/yyyy'))) or (coalesce(NEW.dt_devolucao_banco, to_date('01/01/1900','dd/mm/yyyy')) 	<> coalesce(OLD.dt_devolucao_banco, to_date('01/01/1900','dd/mm/yyyy'))) or (coalesce(NEW.dt_reapresentacao, to_date('01/01/1900','dd/mm/yyyy')) 	<> coalesce(OLD.dt_reapresentacao, to_date('01/01/1900','dd/mm/yyyy'))) or (coalesce(NEW.dt_seg_devolucao, to_date('01/01/1900','dd/mm/yyyy')) 	<> coalesce(OLD.dt_seg_devolucao, to_date('01/01/1900','dd/mm/yyyy'))) or (coalesce(NEW.dt_seg_reapresentacao, to_date('01/01/1900','dd/mm/yyyy'))	<> coalesce(OLD.dt_seg_reapresentacao, to_date('01/01/1900','dd/mm/yyyy'))) or (coalesce(NEW.dt_terc_devolucao, to_date('01/01/1900','dd/mm/yyyy')) 	<> coalesce(OLD.dt_terc_devolucao, to_date('01/01/1900','dd/mm/yyyy'))) then

	select	coalesce(max(ie_tipo_devolucao),'N')
	into STRICT	ie_tipo_devolucao_w
	from 	motivo_dev_cheque
	where 	nr_sequencia = NEW.nr_seq_motivo_dev;

	if	(NEW.dt_terc_devolucao is not null AND ie_tipo_devolucao_w = 'B') then
		if (NEW.dt_seg_reapresentacao is null) then
			/* O cheque nr_cheque não pode ter terceira devolução, pois não tem terceira reapresentação! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191669,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_seg_devolucao is null) then
			/* O cheque nr_cheque não pode ter terceira devolução, pois não tem segunda devolução! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191670,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_reapresentacao is null) then
			/* O cheque nr_cheque não pode ter terceira devolução, pois não foi reapresentado! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191673,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_devolucao_banco is null) then
			/* O cheque nr_cheque não pode ter terceira devolução, pois não foi devolvido pelo banco! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191674,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_deposito is null) then
			/* O cheque nr_cheque não pode ter terceira devolução, pois não foi depositado! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191675,	'NR_CHEQUE=' || NEW.nr_cheque);
		end if;
	elsif	(NEW.dt_seg_reapresentacao is not null AND ie_tipo_devolucao_w = 'B') then
		if (NEW.dt_seg_devolucao is null) then
			/* O cheque nr_cheque não pode ter terceira reapresentação, pois não tem segunda devolução! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191676,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_reapresentacao is null) then
			/* O cheque nr_cheque não pode ter terceira reapresentação, pois não foi reapresentado! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191677,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_devolucao_banco is null) then
			/* O cheque nr_cheque não pode ter terceira reapresentação, pois não foi devolvido pelo banco! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191678,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_deposito is null) then
			/* O cheque nr_cheque não pode ter terceira reapresentação, pois não foi depositado! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191679,	'NR_CHEQUE=' || NEW.nr_cheque);
		end if;
	elsif (NEW.dt_seg_devolucao is not null) then
		if (NEW.dt_reapresentacao is null) then
			/* O cheque nr_cheque não pode ter segunda devolução, pois não foi reapresentado! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191680,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_devolucao_banco is null) then
			/* O cheque nr_cheque não pode ter segunda devolução, pois não foi devolvido pelo banco! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191681,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_deposito is null) then
			/* O cheque nr_cheque não pode ter segunda devolução, pois não foi depositado! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191682,	'NR_CHEQUE=' || NEW.nr_cheque);
		end if;
	elsif (NEW.dt_reapresentacao is not null) then
		if (NEW.dt_devolucao_banco is null) then
			/* O cheque nr_cheque não pode ser reapresentado, pois não foi devolvido pelo banco! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191683,	'NR_CHEQUE=' || NEW.nr_cheque);
		elsif (NEW.dt_deposito is null) then
			/* O cheque nr_cheque não pode ser reapresentado, pois não foi depositado! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191684,	'NR_CHEQUE=' || NEW.nr_cheque);
		end if;
	elsif (NEW.dt_devolucao_banco is not null) then
		if (NEW.dt_deposito is null) then
			/* O cheque nr_cheque não pode ser devolvido pelo banco, pois não foi depositado! */


			CALL wheb_mensagem_pck.exibir_mensagem_abort(191685,	'NR_CHEQUE=' || NEW.nr_cheque);
		end if;
	end if;

	if (OLD.dt_deposito is null and NEW.dt_deposito is not null) then

		select	coalesce(max(ie_cheque_deposito),'S')
		into STRICT	ie_cheque_deposito_w
		from	parametro_contas_receber
		where	cd_estabelecimento	= NEW.cd_estabelecimento;

		if (ie_cheque_deposito_w = 'S') then
			
			select	count(*)
			into STRICT	qt_registro_w
			from	deposito_cheque
			where	nr_seq_cheque	= NEW.nr_seq_cheque;

			if (qt_registro_w = 0) then
				/* Não é possível colocar a data de depósito no cheque pois o cheque não está em nenhum lote de depósito. */


				CALL wheb_mensagem_pck.exibir_mensagem_abort(191686);
			end if;
		end if;
	end if;
end if;

/* Projeto Davita  - Não deixa gerar movimento contabil após fechamento  da data */


if (OLD.dt_contabil <> NEW.dt_contabil) then
	CALL philips_contabil_pck.valida_se_dia_fechado(OBTER_EMPRESA_ESTAB(NEW.cd_estabelecimento),NEW.dt_contabil);
end if;


select 	coalesce(max(ie_repasse_cheque_comp),'N'),
	coalesce(max(ie_lib_rep_tit_cheque),'N')
into STRICT	ie_repasse_cheque_comp_w,
	ie_lib_rep_tit_cheque_w
from	parametro_faturamento
where	cd_estabelecimento = NEW.cd_estabelecimento;

if 	((OLD.dt_compensacao is null) and (NEW.dt_compensacao is not null) and (ie_repasse_cheque_comp_w = 'S') and
	((NEW.nr_titulo is not null) or (NEW.NR_SEQ_CAIXA_REC is not null))) and (coalesce(ie_lib_rep_tit_cheque_w,'N') = 'N') then
	
	CALL atualizar_repasse_cheque_comp(NEW.nr_titulo,NEW.DT_COMPENSACAO, NEW.vl_cheque, NEW.nm_usuario, NEW.cd_estabelecimento,NEW.NR_SEQ_CAIXA_REC, NEW.nr_seq_cheque);

end if;

if (OLD.nr_seq_caixa_rec is not null) and (OLD.vl_cheque <> NEW.vl_cheque) then

	select	max(dt_fechamento),
		max(nr_recibo)
	into STRICT	dt_fechamento_w,
		nr_recibo_w
	from	caixa_receb
	where	nr_sequencia	= OLD.nr_seq_caixa_rec;

	if (dt_fechamento_w is not null) then
		/* Não é possível alterar esse cheque! O recibo nr_recibo_w já foi fechado! */


		CALL wheb_mensagem_pck.exibir_mensagem_abort(191687,	'NR_RECIBO_W=' || nr_recibo_w);
	end if;
end if;

if (OLD.dt_deposito is null) and (NEW.dt_deposito is not null) then
BEGIN

	select	max(c.cd_moeda),
		max(c.ds_conta)
	into STRICT	cd_moeda_unica_w,
		ds_conta_w
	from	movto_trans_financ b,
		banco_estabelecimento_v c
	where	b.nr_seq_banco = c.nr_sequencia
	and	b.nr_seq_cheque = NEW.nr_seq_cheque;
	
	if ( cd_moeda_unica_w is null) then
		BEGIN
		select	max(e.cd_moeda),
			max(e.ds_conta)
		into STRICT	cd_moeda_unica_w,	
			ds_conta_w
		from	deposito_cheque b,
			deposito c,
			movto_trans_financ d,
			banco_estabelecimento_v e
		where	b.nr_seq_deposito = c.nr_sequencia
		and	c.nr_sequencia = d.nr_seq_deposito
		and	d.nr_seq_banco = e.nr_sequencia
		and	b.nr_seq_cheque = NEW.nr_seq_cheque;
		end;
	end if;	
	
	if (NEW.cd_moeda <> cd_moeda_unica_w ) and (cd_moeda_unica_w is not null)	     then
		BEGIN
		
		select	max(a.ds_moeda)
		into STRICT	ds_moeda_w
		from	moeda a
		where	a.cd_moeda = cd_moeda_unica_w;
						
		/* A conta bancária cd_conta_w permite apenas movimentações em ds_moeda_w!*/


		CALL wheb_mensagem_pck.exibir_mensagem_abort(301078,'CD_CONTA_W='|| ds_conta_w ||';DS_MOEDA_W='||ds_moeda_w);	
		end;
	end if;
end;
end if;

<<Final>>
qt_reg_w	:= 0;

RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_cheque_cr_update() FROM PUBLIC;

CREATE TRIGGER cheque_cr_update
	BEFORE UPDATE ON cheque_cr FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_cheque_cr_update();

