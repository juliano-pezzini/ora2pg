-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS tax_invoice_logs ON nota_fiscal CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_tax_invoice_logs() RETURNS trigger AS $BODY$
declare
  action_data_w   varchar(2000);
  session_data_w  varchar(2000);
  stack_data_w    varchar(4000);
  line_break_w    varchar(10)    := chr(13) || chr(10);
  username_w      varchar(10)    := 'TasyTax';
  log_code_w      smallint       := 5500;

BEGIN
  if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
    action_data_w	:= substr('## Tasy Data - '   || NEW.nr_sequencia  || ' ##'                        || line_break_w ||
                            'Status: '          || NEW.ie_situacao                                   || line_break_w ||
                            'Change_date: '     || NEW.dt_atualizacao                                || line_break_w ||
                            'Establishment: '   || wheb_usuario_pck.get_cd_estabelecimento            || line_break_w ||
                            'Function: ' 	      || wheb_usuario_pck.get_cd_funcao                     || line_break_w ||
                            'Profile: ' 	      || wheb_usuario_pck.get_cd_perfil                     || line_break_w ||
                            'User: ' 	          || wheb_usuario_pck.get_nm_usuario                    || line_break_w ||
                            'Form: ' 	          || wheb_usuario_pck.get_ds_form                       || line_break_w ||
                            'Machine: ' 	      || wheb_usuario_pck.get_nm_maquina                    || line_break_w ||
                            'Season: ' 	        || wheb_usuario_pck.get_nm_estacao                    || line_break_w || 
                            line_break_w, 1, 2000);

    select	substr( '## Session Data - '  || NEW.nr_sequencia || ' ##'                   || line_break_w ||
                    'SID: ' 	            || sid                                          || line_break_w ||
                    'Serial: ' 	          || serial#                                      || line_break_w ||
                    'Time: ' 	            || to_char(logon_time,'dd/mm/yyyy hh24:mi:ss')  || line_break_w ||
                    'Username: ' 	        || username                                     || line_break_w ||
                    'Service_name: '      || service_name                                 || line_break_w ||
                    'Schema_name: '       || schemaname                                   || line_break_w ||
                    'Machine: ' 	        || machine                                      || line_break_w ||
                    'Terminal: ' 	        || terminal                                     || line_break_w ||
                    'Osuser: ' 	          || osuser                                       || line_break_w ||
                    'Program: ' 	        || program                                      || line_break_w ||
                    'Module: ' 	          || module                                       || line_break_w ||
                    line_break_w, 1, 2000)
    into STRICT	session_data_w
    from	v$session
    where	audsid = (SELECT userenv('SESSIONID') );

    insert into log_tasy( nr_sequencia,
                          dt_atualizacao,
                          cd_log,
                          nm_usuario,
                          ds_log
                        ) values (nextval('log_tasy_seq'),	
                                  LOCALTIMESTAMP,
                                  log_code_w,
                                  username_w,
                                  action_data_w || session_data_w
                        );

    stack_data_w	:= substr('## Stack Data - '  || NEW.nr_sequencia || ' ##'         || line_break_w ||
                            'Stack: '           || dbms_utility.format_call_stack     || line_break_w ||
                            line_break_w, 1, 4000);

    insert into log_tasy( nr_sequencia,
                          dt_atualizacao,
                          cd_log,
                          nm_usuario,
                          ds_log
                        ) values (nextval('log_tasy_seq'),	
                                  LOCALTIMESTAMP,
                                  log_code_w,
                                  username_w,
                                  stack_data_w
                        );
  end if;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_tax_invoice_logs() FROM PUBLIC;

CREATE TRIGGER tax_invoice_logs
	BEFORE INSERT OR UPDATE ON nota_fiscal FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_tax_invoice_logs();

