-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS sl_unid_atend_update ON sl_unid_atend CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_sl_unid_atend_update() RETURNS trigger AS $BODY$
declare
ie_status_unidade_w		varchar(3);
ie_status_ant_unidade_w		varchar(3);
ie_higienizar_unidade_w		varchar(1) := 'E';
ie_atualizar_status_ant_w	varchar(1);
nr_seq_evento_lider_w		bigint;
nr_seq_evento_gerencia_w	bigint;
cd_setor_atendimento_w		integer;	
qt_reg_w			smallint;
ie_ignorar_checklist_w		varchar(1);
ie_exige_check_list_aprov_w	varchar(1);
qt_itens_w			smallint;
ie_status_ocup_w		varchar(5);
ie_feriado_w			varchar(1);
qt_regra_feriado_w		bigint;
nr_seq_w			bigint;
ie_log_w			varchar(1);
ds_w				varchar(255);
ds_s_w				varchar(255);
ds_c_w				varchar(255);
ie_dbms_alert_w			varchar(1);
ie_aguardando_higi_manut_w	varchar(1);
cd_unidade_basica_w		varchar(10);
cd_unidade_compl_w		varchar(10);
ie_higienizacao_ocup_w		varchar(1);
ie_livre_ocup_w			varchar(1);
ie_status_fim_w			varchar(1);
ie_atualizar_unidade_livre_w	varchar(1);
ie_permite_inicio_antes_prev_w	varchar(1);
ie_permite_aprov_antes_fim_w	varchar(1);
ie_alterar_livre_job_w	varchar(1);

C01 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= NEW.cd_estabelecimento
	and	a.ie_evento_disp	= 'FSL'
	and	coalesce(a.ie_situacao,'A') = 'A';
	
C02 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= NEW.cd_estabelecimento
	and	a.ie_evento_disp	= 'ASL'
	and	coalesce(a.ie_situacao,'A') = 'A';
	
pragma autonomous_transaction;	

BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

select	max(coalesce(ie_status_unidade,'L')),
	max(coalesce(ie_status_ant_unidade,'L'))
into STRICT	ie_status_unidade_w,
	ie_status_ant_unidade_w
from	unidade_atendimento
where	nr_seq_interno = NEW.nr_seq_unidade;

ie_higienizar_unidade_w := Obter_Param_Usuario(75, 16, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_higienizar_unidade_w);
ie_atualizar_status_ant_w := Obter_Param_Usuario(75, 34, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_atualizar_status_ant_w);
ie_status_ocup_w := Obter_Param_Usuario(75, 37, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_status_ocup_w);
ie_dbms_alert_w := Obter_param_Usuario(75, 63, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_dbms_alert_w);
ie_higienizacao_ocup_w := Obter_param_Usuario(75, 89, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_higienizacao_ocup_w);
ie_livre_ocup_w := Obter_param_Usuario(75, 90, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_livre_ocup_w);
ie_atualizar_unidade_livre_w := Obter_param_Usuario(75, 97, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_atualizar_unidade_livre_w);
ie_permite_inicio_antes_prev_w := Obter_param_Usuario(75, 110, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_permite_inicio_antes_prev_w);
ie_permite_aprov_antes_fim_w := Obter_param_Usuario(75, 111, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_permite_aprov_antes_fim_w);
ie_alterar_livre_job_w := Obter_param_Usuario(75, 112, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_alterar_livre_job_w);

if	((ie_permite_inicio_antes_prev_w = 'N') and (NEW.dt_inicio is not null) and (NEW.dt_inicio < NEW.dt_prevista)) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(728462, 'DS_DATA_MENOR=' || obter_desc_expressao(286737) || 
							';DS_DATA_MAIOR=' || obter_desc_expressao(287126) || 
							';NR_PARAMETRO=110'); -- Data de início não pode ser inferior a Data prevista! Parâmetro [110]. 
end if;

if (NEW.dt_fim is not null) and (NEW.dt_fim < NEW.dt_inicio) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(728452); -- A data fim não pode ser menor que a data início!
end if;

if 	((ie_permite_aprov_antes_fim_w = 'N') and (NEW.dt_aprovacao is not null) and (NEW.dt_aprovacao < NEW.dt_fim)) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(728462, 'DS_DATA_MENOR=' || obter_desc_expressao(286713) || 
							';DS_DATA_MAIOR=' || obter_desc_expressao(286879) || 
							';NR_PARAMETRO=111'); -- Data de aprovação não pode ser inferior a Data fim! Parâmetro [111].
end if;

if	((OLD.dt_inicio is not null) and (coalesce(NEW.dt_inicio,LOCALTIMESTAMP + interval '1 days') <> coalesce(OLD.dt_inicio,LOCALTIMESTAMP + interval '1 days')) and (NEW.dt_fim is not null))  OR
	(NEW.IE_STATUS_SERV = 'EE' AND NEW.dt_fim is not null) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(213231);
end if;


if (NEW.ie_status_serv <> OLD.ie_status_serv) and
	(NEW.ie_status_serv = 'C' and
	((ie_alterar_livre_job_w = 'S') or (ie_alterar_livre_job_w = 'N' and NEW.ie_evento <> 'J'))) then

	update	unidade_atendimento 
	set		ie_status_unidade	= CASE WHEN 	nr_atendimento = NULL THEN 									CASE WHEN ie_status_ocup_w = NULL THEN  CASE WHEN coalesce(cd_paciente_reserva,nm_pac_reserva) = NULL THEN 'L'  ELSE 'R' END    ELSE ie_status_ocup_w END   ELSE ie_status_unidade END ,										
			nm_usuario = NEW.nm_usuario	 	
	where	nr_seq_interno		= NEW.nr_seq_unidade;
	
end if;
if (OLD.dt_fim is null) and (NEW.dt_fim is not null) and (NEW.ie_status_serv <> 'E') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(213232);
end if;

if (ie_status_unidade_w in ('A','H','L','R','S','G','C','E')) then

	if (NEW.dt_inicio is not null) and (OLD.dt_inicio is null) then		
		
		update	unidade_atendimento
		set	dt_inicio_higienizacao	= NEW.dt_inicio,
			dt_higienizacao		 = NULL,
			nm_usuario_fim_higienizacao  = NULL,
			ie_status_unidade	= CASE WHEN ie_status_unidade_w='C' THEN  'E'  ELSE CASE WHEN ie_higienizacao_ocup_w='S' THEN  'H'  ELSE ie_status_unidade END  END ,
			nm_usuario_higienizacao	= NEW.nm_usuario,
			nm_usuario		= NEW.nm_usuario,
			dt_atualizacao		= LOCALTIMESTAMP
		where	nr_seq_interno		= NEW.nr_seq_unidade;
		
	end if;
	
	if (NEW.dt_fim is not null) and (OLD.dt_fim is null) and (ie_higienizar_unidade_w = 'F') then
		
		if (ie_status_unidade_w = 'E') then
			
			select	max(cd_unidade_basica),
				max(cd_unidade_compl),
				max(cd_setor_atendimento)
			into STRICT	cd_unidade_basica_w,
				cd_unidade_compl_w,
				cd_setor_atendimento_w
			from	unidade_atendimento
			where	nr_seq_interno = NEW.nr_seq_unidade;
			
			
			CALL atualizar_leito_manutencao(NEW.nm_usuario, cd_unidade_basica_w, cd_unidade_compl_w, cd_setor_atendimento_w, 'G', 'S');
			
		else
			select	coalesce(max(ie_status_fim),'N')
			into STRICT	ie_status_fim_w
			from	sl_servico
			where 	nr_sequencia = coalesce(NEW.nr_seq_servico_exec, NEW.nr_seq_servico);
			
			if (coalesce(ie_status_fim_w,'N') = 'N') then
				update	unidade_atendimento
				set	dt_higienizacao		= NEW.dt_fim,	 
					ie_status_unidade	= CASE WHEN coalesce(cd_paciente_reserva,nm_pac_reserva) = NULL THEN 'L'  ELSE 'R' END , 
					nm_usuario_higienizacao	= coalesce(nm_usuario_higienizacao,NEW.nm_usuario),
					nm_usuario_fim_higienizacao = NEW.nm_usuario,
					nm_usuario		= NEW.nm_usuario,
					dt_atualizacao		= LOCALTIMESTAMP
				where	nr_seq_interno		= NEW.nr_seq_unidade;
			end if;
		end if;
		
	end if;

	if (NEW.dt_aprovacao is not null) and (OLD.dt_aprovacao is null) and (ie_higienizar_unidade_w = 'A') then
		
		if (ie_atualizar_unidade_livre_w = 'S')	then
		
			update	unidade_atendimento
			set	dt_higienizacao		= NEW.dt_fim,	 
				ie_status_unidade	= CASE WHEN coalesce(cd_paciente_reserva,nm_pac_reserva) = NULL THEN 'L'  ELSE 'R' END , 
				nm_usuario_higienizacao	= NEW.nm_usuario,
				nm_usuario_fim_higienizacao = NEW.nm_usuario,
				nm_usuario		= NEW.nm_usuario,
				dt_atualizacao		= LOCALTIMESTAMP
			where	nr_seq_interno		= NEW.nr_seq_unidade;
		
		elsif (ie_status_unidade_w = 'E') then
		
			select	max(cd_unidade_basica),
				max(cd_unidade_compl),
				max(cd_setor_atendimento)
			into STRICT	cd_unidade_basica_w,
				cd_unidade_compl_w,
				cd_setor_atendimento_w
			from	unidade_atendimento
			where	nr_seq_interno = NEW.nr_seq_unidade;
			
			
			CALL atualizar_leito_manutencao(NEW.nm_usuario, cd_unidade_basica_w, cd_unidade_compl_w, cd_setor_atendimento_w, 'G', 'S');
			
		else
			
			update	unidade_atendimento
			set	dt_higienizacao		= NEW.dt_fim,	 
				ie_status_unidade	= CASE WHEN coalesce(cd_paciente_reserva,nm_pac_reserva) = NULL THEN 'L'  ELSE 'R' END , 
				nm_usuario_higienizacao	= NEW.nm_usuario,
				nm_usuario		= NEW.nm_usuario,
				dt_atualizacao		= LOCALTIMESTAMP
			where	nr_seq_interno		= NEW.nr_seq_unidade;
			
		end if;
	end if;
	
	if (NEW.dt_inicio is null) and (OLD.dt_inicio is not null) and (ie_atualizar_status_ant_w = 'S') then
		
		update	unidade_atendimento
		set	dt_inicio_higienizacao	= NEW.dt_inicio,
			dt_higienizacao		 = NULL,
			nm_usuario_fim_higienizacao  = NULL,
			ie_status_unidade	= CASE WHEN ie_status_ant_unidade_w='P' THEN CASE WHEN nr_atendimento = NULL THEN 'H'  ELSE 'P' END   ELSE ie_status_ant_unidade_w END ,
			nm_usuario_higienizacao	 = NULL,
			nm_usuario		= NEW.nm_usuario,
			dt_atualizacao		= LOCALTIMESTAMP
		where	nr_seq_interno		= NEW.nr_seq_unidade;
		
	end if;
	
	if (NEW.dt_fim is not null) and (OLD.dt_fim is null) then
		BEGIN
		select	cd_setor_atendimento
		into STRICT	cd_setor_atendimento_w
		from	unidade_atendimento
		where	nr_seq_interno = NEW.nr_seq_unidade;
		
		open C01;
		loop
		fetch C01 into	
			nr_seq_evento_lider_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			BEGIN
			CALL gerar_evento_lider_escala(nr_seq_evento_lider_w,null,null,null,NEW.nm_usuario,NEW.dt_fim,cd_setor_atendimento_w,NEW.nr_seq_unidade);
			end;
		end loop;
		close C01;
		end;
	end if;
	
	if (NEW.dt_aprovacao is not null) and (OLD.dt_aprovacao is null) then
		
		select	coalesce(max(ie_ignorar_checklist),'N')
		into STRICT	ie_ignorar_checklist_w
		from	unidade_atendimento
		where	nr_seq_interno = NEW.nr_seq_unidade;
		
		if (ie_ignorar_checklist_w = 'N') then
		
			select 	max(coalesce(ie_exige_check_list_aprov,'N'))
			into STRICT	ie_exige_check_list_aprov_w
			from	sl_servico
			where	nr_sequencia = NEW.nr_seq_servico;
		
			if (ie_exige_check_list_aprov_w = 'S') then
				
				select 	count(*)
				into STRICT	qt_itens_w
				from	sl_check_list_unid
				where	nr_seq_sl_unid = NEW.nr_sequencia;
				
				if (qt_itens_w = 0) then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(213233);
				end if;
			elsif (ie_exige_check_list_aprov_w = 'N') then
				
				select	count(*)
				into STRICT	qt_regra_feriado_w
				from	sl_servico_regra_check
				where	nr_seq_servico = NEW.nr_seq_servico;
				
				select 	count(*)
				into STRICT	qt_itens_w
				from	sl_check_list_unid
				where	nr_seq_sl_unid = NEW.nr_sequencia;
				
				if (qt_regra_feriado_w > 0)  then
					if (obter_se_feriado(NEW.cd_estabelecimento,NEW.dt_inicio) = 0) and (qt_itens_w = 0) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(213234);			
					elsif (obter_se_feriado(NEW.cd_estabelecimento,NEW.dt_inicio) > 0) then
					
						select	max(coalesce(ie_feriado,'N'))
						into STRICT	ie_feriado_w
						from	sl_servico_regra_check
						where	nr_seq_servico = NEW.nr_seq_servico;	
						
						if (ie_feriado_w = 'S') and (qt_itens_w = 0)  then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(213241);					
						end if;
					end if;
				end if;	
			end if;
		end if;
		
		BEGIN
		open c02;
		loop
		fetch C02 into
			nr_seq_evento_gerencia_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			BEGIN
			CALL gerar_evento_gerencia_escala(nr_seq_evento_gerencia_w,null,null,null,NEW.nm_usuario,NEW.nr_seq_unidade);
			end;
		end loop;
		close c02;
		end;
	end if;

if (ie_higienizacao_ocup_w = 'S') and (NEW.ie_status_serv <> OLD.ie_status_serv) and (NEW.ie_status_serv = 'EE') then

	update	unidade_atendimento
	set		ie_status_unidade	= 'H'
	where	nr_seq_interno		= NEW.nr_seq_unidade;
end if;

if (ie_livre_ocup_w = 'S') and (NEW.ie_status_serv <> OLD.ie_status_serv) and (NEW.ie_status_serv = 'A') then

	update	unidade_atendimento
	set		ie_status_unidade	= CASE WHEN coalesce(cd_paciente_reserva,nm_pac_reserva) = NULL THEN 'L'  ELSE 'R' END 
	where	nr_seq_interno		= NEW.nr_seq_unidade;
end if;		

end if;

<<Final>>
If (OLD.ie_prioridade <> NEW.ie_prioridade) then
	SELECT * FROM gravar_log_alteracao(substr(OLD.ie_prioridade,1,1), substr(NEW.ie_prioridade,1,1), NEW.nm_usuario, nr_seq_w, 'IE_PRIORIDADE', ie_log_w, ds_w, 'sl_unid_atend', ds_s_w, ds_c_w) INTO STRICT nr_seq_w, ie_log_w;
End if;
If (OLD.nr_seq_unidade <> NEW.nr_seq_unidade) then
	SELECT * FROM gravar_log_alteracao(substr(OLD.nr_seq_unidade,1,10), substr(NEW.nr_seq_unidade,1,10), NEW.nm_usuario, nr_seq_w, 'NR_SEQ_UNIDADE', ie_log_w, ds_w, 'sl_unid_atend', ds_s_w, ds_c_w) INTO STRICT nr_seq_w, ie_log_w;
End if;
qt_reg_w	:= 0;

If (ie_dbms_alert_w = 'S') then
	CALL Gestao_Serv_leito_alert_signal(coalesce(NEW.nm_usuario,'Tasy'));
End if;

commit;

RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_sl_unid_atend_update() FROM PUBLIC;

CREATE TRIGGER sl_unid_atend_update
	BEFORE UPDATE ON sl_unid_atend FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_sl_unid_atend_update();

