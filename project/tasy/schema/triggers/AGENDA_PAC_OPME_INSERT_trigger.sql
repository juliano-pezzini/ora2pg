-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_pac_opme_insert ON agenda_pac_opme CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_pac_opme_insert() RETURNS trigger AS $BODY$
DECLARE

nr_seq_evento_w			bigint;
qt_idade_w			bigint;
cd_convenio_w			bigint;
cd_medico_w			varchar(15);
cd_pessoa_fisica_w		varchar(15);
ie_sexo_w			varchar(15);
nr_seq_proc_interno_w		bigint;
cd_estabelecimento_w		smallint;
cd_agenda_w			bigint;
hr_inicio_w			timestamp;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
dt_cancelamento_w		timestamp;
cd_motivo_cancel_w		varchar(15);	
nr_atendimento_w		bigint;
ie_status_agenda_w		varchar(3) := null;
nr_cirurgia_w			bigint;
ds_observacao_w			varchar(255);

json_w			philips_json;
json_data_w		text;

c01 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento		= cd_estabelecimento_w
	and	ie_evento_disp			= 'IOPME'
	and	coalesce(qt_idade_w,0) between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(ie_sexo,coalesce(ie_sexo_w,'XPTO'))  = coalesce(ie_sexo_w,'XPTO')
	and	coalesce(cd_medico,coalesce(cd_medico_w,'0')) = coalesce(cd_medico_w,'0')
	and (obter_se_convenio_rec_alerta(cd_convenio_w,nr_sequencia) = 'S')
	and (obter_se_proc_rec_alerta(nr_seq_proc_interno_w,nr_sequencia,cd_procedimento_w,ie_origem_proced_w) = 'S')
	and (obter_se_mat_rec_alerta(NEW.cd_material,nr_sequencia) = 'S')
	and (obter_se_regra_envio(nr_sequencia,nr_atendimento_w) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(cd_pessoa_fisica_w),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,cd_agenda_w,ie_status_agenda_w) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';

BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') and (NEW.nr_seq_agenda is not null) then
	cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;

	select	cd_pessoa_fisica,
		coalesce(obter_idade_pf(cd_pessoa_fisica,LOCALTIMESTAMP,'A'),coalesce(qt_idade_paciente,0)),
		Obter_Sexo_PF(cd_pessoa_fisica,'C'),
		cd_medico,
		cd_convenio,
		nr_seq_proc_interno,
		cd_agenda,
		hr_inicio,
		cd_procedimento,
		ie_origem_proced,
		dt_cancelamento,
		cd_motivo_cancelamento,
		nr_atendimento,
		ie_status_agenda,
		nr_cirurgia,
		substr(ds_observacao,1,255)
	into STRICT	cd_pessoa_fisica_w,
		qt_idade_w,
		ie_sexo_w,
		cd_medico_w,
		cd_convenio_w,
		nr_seq_proc_interno_w,
		cd_agenda_w,
		hr_inicio_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		dt_cancelamento_w,
		cd_motivo_cancel_w,
		nr_atendimento_w,
		ie_status_agenda_w,
		nr_cirurgia_w,
		ds_observacao_w
	from	agenda_paciente
	where	nr_sequencia = NEW.nr_seq_agenda;	

	
	open c01;
	loop
	fetch c01 into
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN
		CALL gerar_evento_agenda_trigger(nr_seq_evento_w,nr_atendimento_w,
									cd_pessoa_fisica_w,
									null,
									NEW.nm_usuario,
									cd_agenda_w,
									hr_inicio_w,
									cd_medico_w,
									cd_procedimento_w,
									ie_origem_proced_w,
									dt_cancelamento_w,
									NEW.cd_material,
									NEW.qt_material,
									NEW.ie_autorizado,
									cd_convenio_w,
									cd_motivo_cancel_w,
									'S',
									NEW.nr_seq_agenda,
									null,
									'',
									'',
									null,
									substr(ds_observacao_w,1,255),
									'',
									null,
									nr_cirurgia_w,
									NEW.cd_cgc);
		end;
	end loop;
	close c01;
end if;

json_w := philips_json();
json_w.put('id', NEW.nr_sequencia);
json_w.put('surgicalSchedule', NEW.nr_seq_agenda);
json_w.put('material', NEW.cd_material);
json_w.put('paymentTerm', NEW.cd_cond_pagto);
json_w.put('supplier', NEW.cd_cgc);
json_w.put('brand', NEW.nr_seq_marca);
json_w.put('materialAmount', NEW.qt_material);
json_w.put('unitValue', NEW.vl_unitario_item);
json_w.put('discountValue', NEW.vl_desconto);
json_w.put('itemStatusSchedule', NEW.ie_origem_inf);
json_w.put('standardItem', NEW.ie_padrao);
json_w.put('authorizationStatus', NEW.ie_autorizado);
json_w.put('integration', NEW.ie_integracao);
json_w.put('generateInsuranceAuthorization', NEW.ie_gerar_autor);
json_w.put('descriptionNotes', NEW.ds_observacao);
json_w.put('lastUpdate', NEW.dt_atualizacao);

dbms_lob.createtemporary(json_data_w, true);
json_w.(json_data_w);

json_data_w := bifrost.send_integration_content('surgicalSchedule.add.request', json_data_w, wheb_usuario_pck.get_nm_usuario);

RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_pac_opme_insert() FROM PUBLIC;

CREATE TRIGGER agenda_pac_opme_insert
	AFTER INSERT ON agenda_pac_opme FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_pac_opme_insert();

