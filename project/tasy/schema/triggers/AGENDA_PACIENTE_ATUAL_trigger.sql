-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_paciente_atual ON agenda_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_paciente_atual() RETURNS trigger AS $BODY$
declare

cd_estabelecimento_w		smallint;
cd_processo_w			bigint;
cd_setor_exclusivo_w		integer;
cd_tipo_agenda_w			bigint;
dt_referencia_w			timestamp;
vl_procedimento_w			double precision := 0;
cd_categoria_w			varchar(10);
cd_turno_w			bigint := 0;
hr_quebra_turno_w			varchar(05);
hr_quebra_turno_not_w		varchar(05);
qt_min_quebra_turno_w		varchar(05);
qt_log_w				bigint;
ds_alteracao_w			varchar(2000);/* Rafael em 02/01/2007 OS46794 */

nm_paciente_w			varchar(60);/* Rafael em 15/05/2007 Agenda Exames Nova */

cd_pessoa_atend_w		varchar(10);
nr_seq_sala_cir_w			bigint;
ds_erro_w			varchar(2000);
ie_tipo_classif_w			varchar(1) := 'N';
dt_nascimento_w			timestamp;
qt_cota_munic_w			integer;
nr_seq_evento_w			bigint;
qt_opme_w			bigint;
ie_atualiza_tipo_atend_w		varchar(1);
ie_cons_idade_paciente_w		varchar(1);
ie_consiste_w			varchar(1):= 'N';
qt_idade_meses_w			integer;
qt_idade_w			bigint;
ie_alterar_status_w			varchar(1);
dt_termino_w			timestamp;
ie_soma_tempo_hig_w		varchar(1);
qt_tempo_autorizacao_w		bigint:=0;
cd_convenio_w			integer;
cd_plano_w			varchar(10);
cd_categoria_ww			varchar(10);
cd_tipo_acomodacao_w		smallint;
cd_pessoa_ageint_w		varchar(10);
nm_pessoa_ageint_w		varchar(60);
cd_edicao_amb_w                 		integer;
vl_m2_filme_w                   		double precision := 0;
ds_nome_abrev_w			varchar(50);
nr_seq_reserva_w			bigint;
ie_modo_reserva_w			varchar(15);
nr_reserva_w			varchar(30);
ie_atualiza_atend_gv_w		varchar(2)	:=	'S';
ie_atual_nome_bloq_w		varchar(1) := 'N';
ie_sexo_w			varchar(15);
ie_autorizacao_w			varchar(3);
ie_atual_autor_troca_conv_ag_w	varchar(15);
ie_consiste_obito_w		varchar(1);
ds_origem_w			varchar(1800);
qt_horas_w 			double precision;
qt_horas_limite_prep_w		double precision;
ds_mensagem_w			varchar(255) := null;
nr_seq_classif_w		bigint;
cd_cid_w			varchar(10);
nr_seq_regra_w			bigint;
cd_funcao_ativa_w		integer;
nm_usuario_w			varchar(15) := wheb_usuario_pck.get_nm_usuario;
qt_avaliacao_agenda_w	bigint:=0;
ie_cobertura_conv_w		varchar(15);
ie_regra_w			integer;
cd_procedimento_w		agenda_paciente.cd_procedimento%type;
ie_origem_proced_w		agenda_paciente.ie_origem_proced%type;
ie_cancelar_fanep_w		parametro_agenda.ie_cancelar_fanep%type;
ie_estornar_fanep_w		parametro_agenda.ie_estornar_fanep%type;
nr_seq_pepo_w			agenda_paciente.nr_seq_pepo%type;
qt_reg_w				bigint;
ie_save_insurance_holder_w 				varchar(1);	
ds_erro_ww		varchar(255);
hr_quebra_turno_not_fim_w	agenda.hr_quebra_turno_not_fim%type;

c01 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	a.ie_evento_disp	= 'CAO'
	and	coalesce(NEW.qt_idade_paciente,0) between coalesce(qt_idade_min,0) and coalesce(qt_idade_max,9999)
	and (obter_se_regra_envio(nr_sequencia,NEW.nr_atendimento) = 'S')
	and	qt_opme_w > 0
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(a.ie_situacao,'A') = 'A';

c02 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	a.ie_evento_disp	= 'CAA'
	and	coalesce(NEW.qt_idade_paciente,0) between coalesce(qt_idade_min,0) and coalesce(qt_idade_max,9999)
	and (obter_se_regra_envio(nr_sequencia,NEW.nr_atendimento) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(a.ie_situacao,'A') = 'A';

c03 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento		= cd_estabelecimento_w
	and	ie_evento_disp			= 'NAG'
	and	coalesce(qt_idade_w,0) between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(ie_sexo,coalesce(ie_sexo_w,'XPTO'))  = coalesce(ie_sexo_w,'XPTO')
	and	coalesce(cd_medico,coalesce(NEW.cd_medico,'0')) = coalesce(NEW.cd_medico,'0')
	and (obter_se_convenio_rec_alerta(NEW.cd_convenio,nr_sequencia) = 'S')
	and (obter_se_proc_rec_alerta(NEW.nr_seq_proc_interno,nr_sequencia,NEW.cd_procedimento,NEW.ie_origem_proced) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';

c04 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento		= cd_estabelecimento_w
	and	ie_evento_disp			= 'ASAC'
	and	coalesce(qt_idade_w,0) between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(ie_sexo,coalesce(ie_sexo_w,'XPTO'))  = coalesce(ie_sexo_w,'XPTO')
	and	coalesce(cd_medico,coalesce(NEW.cd_medico,'0')) = coalesce(NEW.cd_medico,'0')
	and (obter_se_convenio_rec_alerta(NEW.cd_convenio,nr_sequencia) = 'S')
	and (obter_se_proc_rec_alerta(NEW.nr_seq_proc_interno,nr_sequencia,NEW.cd_procedimento,NEW.ie_origem_proced) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';

/* Evento  Agendamento Pac Internado da Agenda de Exames */


c05 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	a.ie_evento_disp	= 'API'
	and	coalesce(NEW.qt_idade_paciente,0) between coalesce(qt_idade_min,0) and coalesce(qt_idade_max,9999)
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';

c06 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento		= cd_estabelecimento_w
	and	ie_evento_disp			= 'ASP'
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';
	
c07 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	a.ie_evento_disp	= 'CAE'
	and	coalesce(NEW.qt_idade_paciente,0) between coalesce(qt_idade_min,0) and coalesce(qt_idade_max,9999)
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';
	
c08 CURSOR FOR	
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento		= cd_estabelecimento_w
	and	ie_evento_disp			= 'ASAAC'
	and	coalesce(qt_idade_w,0) between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(ie_sexo,coalesce(ie_sexo_w,'XPTO'))  = coalesce(ie_sexo_w,'XPTO')
	and	coalesce(cd_medico,coalesce(NEW.cd_medico,'0')) = coalesce(NEW.cd_medico,'0')
	and (obter_se_convenio_rec_alerta(NEW.cd_convenio,nr_sequencia) = 'S')
	and (obter_se_proc_rec_alerta(NEW.nr_seq_proc_interno,nr_sequencia,NEW.cd_procedimento,NEW.ie_origem_proced) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';	
	
C09 CURSOR FOR
	SELECT	nr_sequencia
	from	regra_valor_padrao_agenda
	where	cd_perfil = obter_perfil_ativo
	and	((cd_agenda = NEW.cd_agenda) or (cd_agenda is null))
	and	((cd_estabelecimento = cd_estabelecimento_w) or (cd_estabelecimento is null))
	order by coalesce(cd_estabelecimento,0),
		 coalesce(cd_agenda,0);
		
c10 CURSOR FOR	
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento		= cd_estabelecimento_w
	and	ie_evento_disp			= 'VAAC'
	and	coalesce(qt_idade_w,0) between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(ie_sexo,coalesce(ie_sexo_w,'XPTO'))  = coalesce(ie_sexo_w,'XPTO')
	and	coalesce(cd_medico,coalesce(NEW.cd_medico,'0')) = coalesce(NEW.cd_medico,'0')
	and (obter_se_convenio_rec_alerta(NEW.cd_convenio,nr_sequencia) = 'S')
	and (obter_se_proc_rec_alerta(NEW.nr_seq_proc_interno,nr_sequencia,NEW.cd_procedimento,NEW.ie_origem_proced) = 'S')
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S')
	and (obter_regra_alerta_agenda(nr_sequencia,NEW.cd_agenda,NEW.ie_status_agenda) = 'S')
	and	coalesce(ie_situacao,'A') = 'A';	
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S') then
	
	if (obter_tipo_agenda(NEW.cd_agenda) = 2) and (NEW.dt_agenda <> trunc(NEW.dt_agenda)) then
		NEW.dt_agenda := trunc(NEW.dt_agenda);
	end if;
	
	select	cd_estabelecimento,
		cd_processo,
		cd_setor_exclusivo,
		cd_tipo_agenda,
		coalesce(hr_quebra_turno, '12'),
		coalesce(qt_min_quebra_turno, '00'),
		hr_quebra_turno_not,
		hr_quebra_turno_not_fim
	into STRICT	cd_estabelecimento_w,
		cd_processo_w,
		cd_setor_exclusivo_w,
		cd_tipo_agenda_w,
		hr_quebra_turno_w,
		qt_min_quebra_turno_w,
		hr_quebra_turno_not_w,
		hr_quebra_turno_not_fim_w
	from	agenda
	where	cd_agenda	= NEW.cd_agenda;

	cd_funcao_ativa_w := obter_funcao_ativa;
	ie_atual_nome_bloq_w := obter_param_usuario(820, 200, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_atual_nome_bloq_w);

	if (NEW.ie_status_agenda <> 'L') then
		select	coalesce(max(obter_valor_param_usuario(871, 214, obter_perfil_ativo, NEW.nm_usuario, 0)), 'S')
		into STRICT	ie_atualiza_tipo_atend_w
		;

		ie_cons_idade_paciente_w := obter_param_usuario(871, 232, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_cons_idade_paciente_w);
		ie_soma_tempo_hig_w := obter_param_usuario(871, 362, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_soma_tempo_hig_w);
		if (cd_tipo_agenda_w = 2) then
			ie_modo_reserva_w := obter_param_usuario(869, 102, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_modo_reserva_w);
		else
			ie_modo_reserva_w := obter_param_usuario(871, 437, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_modo_reserva_w);
		end if;
		ie_alterar_status_w := obter_param_usuario(871, 320, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_alterar_status_w);
		ie_atualiza_atend_gv_w := obter_param_usuario(871, 451, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_atualiza_atend_gv_w);
		ie_consiste_obito_w := obter_param_usuario(871, 503, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_consiste_obito_w);
		qt_horas_limite_prep_w := obter_param_usuario(871, 651, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, qt_horas_limite_prep_w);
		
		
	
		if (ie_cons_idade_paciente_w = 'S') and (NEW.cd_agenda > 0) and (NEW.qt_idade_mes is not null) and (coalesce(OLD.qt_idade_mes,0) <> coalesce(NEW.qt_idade_mes,0)) then
			qt_idade_meses_w := coalesce(NEW.qt_idade_mes,0) + (coalesce(NEW.qt_idade_paciente,0) * 12);

			select 	CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
			into STRICT	ie_consiste_w
			from   	agenda
			where  	cd_agenda = NEW.cd_agenda
			and (qt_idade_meses_w between coalesce(qt_idade_min_meses,0) and coalesce(qt_idade_max_meses,9999));

			if (ie_consiste_w = 'S') then
				--Nao e permitido agendar este paciente! Sua idade esta fora do intervalo informado!

				CALL Wheb_mensagem_pck.exibir_mensagem_abort(184504);
			end if;
		end if;
	end if;	

	if ((wheb_usuario_pck.get_cd_funcao = 871) or (wheb_usuario_pck.get_cd_funcao = 869)) and (NEW.ie_status_agenda <> 'L') and (NEW.ie_status_agenda <> 'C') and (NEW.ie_status_agenda <> 'B') and
		 ((coalesce(OLD.cd_pessoa_fisica,'-1') <> coalesce(NEW.cd_pessoa_fisica,'-1')) or (OLD.hr_inicio <> NEW.hr_inicio)) then

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_classif_w
		from	agenda_paciente_classif
		where	ie_tipo_classif	= 'E'
		and	ie_situacao	= 'A';
		
		if (nr_seq_classif_w <> coalesce(NEW.nr_seq_classif_agenda,0)) then
			BEGIN	
			ds_mensagem_w	:= obter_regra_antecencia_agenda(NEW.cd_pessoa_fisica,NEW.hr_inicio);
			exception
				when others then
				ds_mensagem_w := null;
			end;
			if (ds_mensagem_w is not null) then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(186402,'DS_MENSAGEM='||ds_mensagem_w);
			end if;	
		end if;	
	end if;	
	
		
		
	
	if (qt_horas_limite_prep_w > 0) and (NEW.dt_chegada_prev is not null) and (NEW.hr_inicio >= NEW.dt_chegada_prev) and (NEW.ie_status_agenda <> 'C') then
		qt_horas_w := Obter_Hora_Entre_datas(NEW.hr_inicio,NEW.dt_chegada_prev);
		if (qt_horas_w > qt_horas_limite_prep_w) and (cd_funcao_ativa_w = 871) then
			--A data de preparo e inferior a quantidade de dias limite. Parametro [651].

			CALL Wheb_mensagem_pck.exibir_mensagem_abort(184540);
		end if;
	end if;

	NEW.cd_turno	:= 0;--manha

	if ((to_char(NEW.hr_inicio, 'hh24'))::numeric  > somente_numero(hr_quebra_turno_w)) or
		(((to_char(NEW.hr_inicio, 'hh24'))::numeric  = somente_numero(hr_quebra_turno_w)) and ((to_char(NEW.hr_inicio, 'mi'))::numeric  >= somente_numero(qt_min_quebra_turno_w))) then
		cd_turno_w	:= 1;--tarde
	else
		cd_turno_w	:= 0;--manha
	end if;

	if (hr_quebra_turno_not_w is not null) then
		if ((hr_quebra_turno_not_fim_w is null) and ((to_char(NEW.hr_inicio,'hh24'))::numeric  >= somente_numero(hr_quebra_turno_not_w)) and ((to_char(NEW.hr_inicio,'hh24'))::numeric  < 24)) then
			cd_turno_w := 3;--noite

		elsif ((hr_quebra_turno_not_fim_w is not null) and
			(((somente_numero(hr_quebra_turno_not_fim_w) < somente_numero(hr_quebra_turno_not_w)) and
			((((to_char(NEW.hr_inicio,'hh24'))::numeric  >= somente_numero(hr_quebra_turno_not_w)) and ((to_char(NEW.hr_inicio,'hh24'))::numeric  < 24)) or
			(((to_char(NEW.hr_inicio,'hh24'))::numeric  < somente_numero(hr_quebra_turno_not_fim_w)) and ((to_char(NEW.hr_inicio,'hh24'))::numeric  >= 00)))) or
			((somente_numero(hr_quebra_turno_not_fim_w) > somente_numero(hr_quebra_turno_not_w)) and ((to_char(NEW.hr_inicio,'hh24'))::numeric  between somente_numero(hr_quebra_turno_not_w) and somente_numero(hr_quebra_turno_not_fim_w))))) then
			cd_turno_w := 3;--noite
		end if;
	end if;

	if (NEW.cd_turno	<> cd_turno_w) then
		NEW.cd_turno	:= cd_turno_w;
	end if;

   if (NEW.nr_seq_classif_agenda is not null) then
      select	max(coalesce(ie_tipo_classif,'N'))
      into STRICT	ie_tipo_classif_w
      from	agenda_paciente_classif
      where	nr_sequencia = NEW.nr_seq_classif_agenda;
   end if;

	if	(((coalesce(NEW.ie_encaixe,'N') <> coalesce(OLD.ie_encaixe,'N')) and (NEW.ie_encaixe = 'S'))) or
		((coalesce(NEW.nr_seq_classif_agenda,0) <> coalesce(OLD.nr_seq_classif_agenda,0)) and (ie_tipo_classif_w = 'E')) then

		NEW.dt_geracao_encaixe := LOCALTIMESTAMP;

	end if;

	if (NEW.ie_status_agenda <> 'L') then
		select	max(dt_referencia)
		into STRICT	dt_referencia_w
		from	agenda_fechamento
		where	cd_estabelecimento	= cd_estabelecimento_w
		and	ie_tipo_agenda		= cd_tipo_agenda_w
		and	dt_referencia		= trunc(NEW.dt_agenda);


		if (NEW.cd_pessoa_fisica is not null) and (cd_processo_w is not null) and (dt_referencia_w is not null) then
			BEGIN

			CALL gerar_processo_agenda(NEW.nr_sequencia, cd_processo_w,
				cd_setor_exclusivo_w, NEW.nm_usuario);

			end;
		end if;
	end if;	

	-- Edilson em 27/01/2004 Rotina p/ gravar o valor do procedimento na agenda_paciente.

	if (NEW.cd_convenio is not null) and (NEW.cd_procedimento is not null) then
		BEGIN
		-- Marcus disse p/ pegar a menor categoria do convenio.

		select coalesce(min(cd_categoria),0)
		into STRICT   cd_categoria_w
		from   categoria_convenio
		where  cd_convenio = NEW.cd_convenio;
		

		select	obter_preco_procedimento(
				cd_estabelecimento_w,
				NEW.cd_convenio,
				coalesce(NEW.cd_categoria, cd_categoria_w),
				NEW.dt_agenda,
				NEW.cd_procedimento,
				NEW.ie_origem_proced,
				null,
				null,
				null,
				NEW.cd_medico,
				null,
				NEW.cd_usuario_convenio, NEW.cd_plano,null, null,
				'P')
		into STRICT	vl_procedimento_w
		;
		end;
	end if;

	if (NEW.nr_minuto_duracao = 0) and (NEW.ie_status_agenda = 'B') then
		NEW.nr_minuto_duracao	:= OLD.nr_minuto_duracao;
	end if;

	if (OLD.cd_convenio <> NEW.cd_convenio) and (NEW.nr_cirurgia is not null) then
		update	cirurgia
		set	cd_convenio	= NEW.cd_convenio
		where 	nr_cirurgia	= NEW.nr_cirurgia;
	end if;
	
	if (OLD.cd_categoria <> NEW.cd_categoria) and (NEW.nr_cirurgia is not null) then
		update	cirurgia
		set	cd_categoria	= NEW.cd_categoria
		where 	nr_cirurgia	= NEW.nr_cirurgia;
	end if;

	if (OLD.nr_atendimento is null) and (NEW.nr_atendimento is not null) then
		BEGIN

		update	autorizacao_cirurgia
		set	nr_atendimento	= NEW.nr_atendimento
		where 	nr_seq_agenda	= NEW.nr_sequencia
		and	nr_atendimento	is null;

		UPDATE	autorizacao_convenio
		SET		nr_atendimento	= NEW.nr_atendimento,
				nm_usuario 		= NEW.nm_usuario
		WHERE 	nr_seq_agenda	= NEW.nr_sequencia
		AND		nr_atendimento	IS NULL;

		update	san_reserva
		set		nr_atendimento	= NEW.nr_atendimento
		where	nr_seq_agenda = NEW.nr_sequencia;
		
		if (ie_atualiza_atend_gv_w = 'S') then
			BEGIN
			update	gestao_vaga
			set	nr_atendimento	= NEW.nr_atendimento
			where	nr_seq_agenda	= NEW.nr_sequencia
			and	nr_atendimento	is null;
			end;
		end if;
		
		/*lhalves OS 620403 em 09/09/2013 - Vincular as cotacoes geradas pela Autorizacao de Mat Esp com o atendimento*/
		
		BEGIN
		update	cot_compra a
		set	a.nr_atendimento	= NEW.nr_atendimento
		where	a.nr_atendimento	is null
		and	a.nr_seq_autor_cir	in (SELECT	x.nr_sequencia
						from	autorizacao_cirurgia x
						where	x.nr_seq_agenda	= NEW.nr_sequencia);		
		exception
		when others then
			null;			
		end;
		
		
		end;
	end if;
	
	if (OLD.nr_atendimento is not null) and (NEW.nr_atendimento is null) then
		BEGIN

		update	autorizacao_cirurgia
		set	nr_atendimento	= NEW.nr_atendimento
		where 	nr_seq_agenda	= NEW.nr_sequencia
		and	nr_atendimento	is not null;

		UPDATE	autorizacao_convenio
		SET		nr_atendimento	= NEW.nr_atendimento,
				nm_usuario 		= NEW.nm_usuario
		WHERE 	nr_seq_agenda	= NEW.nr_sequencia
		AND		nr_atendimento	IS NOT NULL;

		update	san_reserva
		set		nr_atendimento	= NEW.nr_atendimento
		where	nr_seq_agenda = NEW.nr_sequencia;
		
		if (ie_atualiza_atend_gv_w = 'S') then
			BEGIN
			update	gestao_vaga
			set	nr_atendimento	= NEW.nr_atendimento
			where	nr_seq_agenda	= NEW.nr_sequencia
			and	nr_atendimento	is not null;
			end;
		end if;
		end;
	end if;
	
	if	((OLD.cd_pessoa_fisica is not null AND OLD.cd_pessoa_fisica <> NEW.cd_pessoa_fisica) or
		(OLD.cd_pessoa_fisica is null AND NEW.cd_pessoa_fisica is not null)) then
		
		select  count(*)
		into STRICT    qt_avaliacao_agenda_w
		from    med_avaliacao_paciente
		where   nr_seq_agenda_pac   = NEW.nr_sequencia;
		
		if (qt_avaliacao_agenda_w > 0) then
			update 	med_avaliacao_paciente
			set     cd_pessoa_fisica = NEW.cd_pessoa_fisica
			where	nr_seq_agenda_pac   = NEW.nr_sequencia;
		end if;
		
		update	prescr_medica
		set	cd_pessoa_fisica = NEW.cd_pessoa_fisica
		where	nr_seq_agenda = NEW.nr_sequencia
		and	nr_atendimento is null
		and	dt_liberacao is null;
		
	end if;
	
	
	if (NEW.ie_status_agenda <> 'L') and (coalesce(OLD.cd_medico,'X') <> coalesce(NEW.cd_medico,'X'))	then
		update	autorizacao_convenio
		set	cd_medico_solicitante	= NEW.cd_medico
		where 	nr_seq_agenda		= NEW.nr_sequencia;
	end if;

	NEW.vl_previsto := vl_procedimento_w;

	if (OLD.hr_inicio <> NEW.hr_inicio) then
		NEW.hr_inicio	:= to_date(to_char(NEW.dt_agenda,'dd/mm/yyyy') || ' ' || to_char(NEW.hr_inicio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
	end if;

	/* Rafael em 02/01/2007 OS46794 */


	ds_alteracao_w := null;
	if (OLD.cd_pessoa_fisica is not null) and (OLD.cd_pessoa_fisica <> NEW.cd_pessoa_fisica) then
		ds_alteracao_w :=  ' ' || lower(Wheb_mensagem_pck.get_texto(307610)) || ' '; --' pessoa fisica ';
		select	max(a.cd_pessoa_fisica)
		into STRICT	cd_pessoa_ageint_w
		from	agenda_integrada a,
			agenda_integrada_item b
		where	a.nr_sequencia		= b.nr_seq_agenda_int
		and	b.nr_seq_agenda_exame	= NEW.nr_sequencia;
		if (cd_pessoa_ageint_w is not null) and (NEW.cd_pessoa_fisica <> cd_pessoa_ageint_w) then
			--Esse agendamento esta vinculado a uma agenda integrada, e o paciente da agenda integrada e diferente da pessoa informada.

			--Por favor, entre em contato com o setor de informatica!

			CALL wheb_mensagem_pck.exibir_mensagem_abort(184542);
		end if;
	end if;

	if (OLD.cd_medico is not null) and (OLD.cd_medico <> NEW.cd_medico) then
		ds_alteracao_w := ds_alteracao_w || ' ' || lower(Wheb_mensagem_pck.get_texto(307579)) || ' '; --' medico ';
	end if;

	if (OLD.cd_procedimento is not null) and (OLD.cd_procedimento <> NEW.cd_procedimento) then
		ds_alteracao_w := ds_alteracao_w || ' ' || lower(Wheb_mensagem_pck.get_texto(307580)) || ' '; --' procedimento ';
	end if;
	
	if (OLD.ie_status_agenda is not null) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) then
		ds_alteracao_w := ds_alteracao_w || ' ' || Wheb_mensagem_pck.get_texto(307581) || ' '; --' status ';
	end if;
	
	if (coalesce(OLD.nr_seq_status_pac,-1) <> coalesce(NEW.nr_seq_status_pac,-1)) then
		ds_alteracao_w := ds_alteracao_w || ' ' || lower(Wheb_mensagem_pck.get_texto(307584)) || ' '; --' status do paciente ';
	end if;
		
	if (OLD.cd_agenda is not null) and (ds_alteracao_w is not null) then
		insert into agenda_historico_acao(
							nr_sequencia,
							ie_agenda,
							cd_agenda,
							nr_seq_agenda,
							dt_agenda,
							ie_acao,
							dt_acao,
							ds_acao,
							ds_alteracao,
							ie_status_agenda,
							nr_seq_status_pac
							)
							SELECT	nextval('agenda_historico_acao_seq'),
								obter_tipo_agenda(OLD.cd_agenda),
								OLD.cd_agenda,
								OLD.nr_sequencia,
								OLD.hr_inicio,
								'A',
								LOCALTIMESTAMP,
				' ' || lower(Wheb_mensagem_pck.get_texto(307586)) || ' '  /*' paciente: '*/     || coalesce(OLD.cd_pessoa_fisica,OLD.nm_paciente)		||
				' ' || lower(Wheb_mensagem_pck.get_texto(307587)) || ' '  /*' status: '*/		|| OLD.ie_status_agenda					||
				' ' || lower(Wheb_mensagem_pck.get_texto(307589)) || ' '  /*' medico: '*/		|| OLD.cd_medico						||
				' ' || lower(Wheb_mensagem_pck.get_texto(307590)) || ' '  /*' proced: '*/		|| to_char(OLD.cd_procedimento)				||
				' ' || lower(Wheb_mensagem_pck.get_texto(307591)) || ' '  /*' origem: '*/		|| to_char(OLD.ie_origem_proced)				||
	        	' ' || lower(Wheb_mensagem_pck.get_texto(307592)) || ': ' /*' interno: '*/		|| to_char(OLD.nr_seq_proc_interno)			||
	     	    ' ' || lower(Wheb_mensagem_pck.get_texto(307593)) || ': ' /*' agendamento: '*/	|| PKG_DATE_FORMATERS_TZ.to_varchar(OLD.dt_agendamento,'timestamp',ESTABLISHMENT_TIMEZONE_UTILS.gettimezone)||
				' ' || Wheb_mensagem_pck.get_texto(307594) || ' '		  /*' usuario: '*/		|| OLD.nm_usuario_orig,
			    ' ' || lower(Wheb_mensagem_pck.get_texto(307595)) || ' '  /*' alteracoes: '*/	|| '<' || ds_alteracao_w || '>' 				||
				' ' || lower(Wheb_mensagem_pck.get_texto(307596)) || ' '  /*' paciente: '*/		|| coalesce(NEW.cd_pessoa_fisica,NEW.nm_paciente)		||
				' ' || lower(Wheb_mensagem_pck.get_texto(307587)) || ' '  /*' status: '*/		|| NEW.ie_status_agenda					||
				' ' || lower(Wheb_mensagem_pck.get_texto(307589)) || ' '  /*' medico: '*/		|| NEW.cd_medico						||
				' ' || lower(Wheb_mensagem_pck.get_texto(307590)) || ' '  /*' proced: '*/		|| to_char(NEW.cd_procedimento)				||
				' ' || lower(Wheb_mensagem_pck.get_texto(307591)) || ' '  /*' origem: '*/		|| to_char(NEW.ie_origem_proced)				||
	        	' ' || lower(Wheb_mensagem_pck.get_texto(307592)) || ': ' /*' interno: '*/		|| to_char(NEW.nr_seq_proc_interno)			||
				' ' || lower(Wheb_mensagem_pck.get_texto(307597)) || ': ' /*' atualizacao: '*/	|| PKG_DATE_FORMATERS_TZ.to_varchar(LOCALTIMESTAMP,'timestamp',ESTABLISHMENT_TIMEZONE_UTILS.gettimezone)||
				' ' || Wheb_mensagem_pck.get_texto(307594) || ' '		  /*' usuario: '*/		|| NEW.nm_usuario,
								NEW.ie_status_agenda,
								NEW.nr_seq_status_pac
							;

	end if;
	/* Fim alteracao Rafael em 02/01/2007 OS46794 */



  if (NEW.cd_pessoa_fisica is not null) then
      if (coalesce(NEW.cd_pessoa_fisica,'X') <> coalesce(OLD.cd_pessoa_fisica,'X')) /* Rafael em 15/05/2007 Agenda Exames Nova */

         or (coalesce(NEW.nm_paciente,'X') <> coalesce(OLD.nm_paciente,'X'))   then /* Maxwell em 10/Jun/2019 Verificar alteracao do Nome */

		/* obter nome pf */


		select	 substr(obter_nome_pf(NEW.cd_pessoa_fisica),1,60)
		into STRICT	nm_paciente_w
		from	pessoa_fisica
		where	cd_pessoa_fisica = NEW.cd_pessoa_fisica;
		/* atualizar nome pf */


		NEW.nm_paciente := nm_paciente_w;
	end if;
   end if;

	/* Rafael em 26/06/2007 -> validar atendimento x pessoa fisica */


	if (NEW.nr_atendimento is not null) then

		if (NEW.cd_pessoa_fisica is null) then
			NEW.nr_atendimento	:= null;
		end if;

    if (NEW.nr_atendimento <> coalesce(OLD.nr_atendimento,0)) or (NEW.cd_pessoa_fisica <> coalesce(OLD.cd_pessoa_fisica,'0')) then
      
	  cd_pessoa_atend_w := obter_pessoa_atend_pragma(NEW.nr_atendimento);	
	  
      if (cd_pessoa_atend_w <> NEW.cd_pessoa_fisica) then
        --Atencao, a pessoa fisica do atendimento e a pessoa fisica do agendamento sao incompativeis!'||chr(10)||

        --Por favor, entre em contato com o setor de informatica!' || ' Atend.: ' || :new.nr_atendimento ||

        --Pessoa fisica: ' || :new.cd_pessoa_fisica);

        CALL Wheb_mensagem_pck.exibir_mensagem_abort(184543,'ATENDIMENTO='||NEW.nr_atendimento||';CD_PESSOA_FISICA='||NEW.cd_pessoa_fisica);
      end if;
		end if;
	end if;

	if (NEW.hr_revisada is null) and (NEW.ie_status_agenda = 'L') then
		NEW.hr_revisada := NEW.hr_inicio;
	end if;

	if (NEW.hr_inicio <> OLD.hr_inicio) then
		NEW.hr_revisada := NEW.hr_inicio;
	end if;

	/* OS 87060 - Jerusa
	if	(:new.nr_seq_sala_cir is null) and (:new.ie_status_agenda = 'L') then
		select	nr_seq_sala_cir
		into	nr_seq_sala_cir_w
		from	agenda
		where	cd_agenda	=	:new.cd_agenda;

		if	(nr_seq_sala_cir_w is not null) then
			:new.nr_seq_sala_cir	:= nr_seq_sala_cir_w;
		end if;
	end if;
	*/


	/* Jerusa em 16/06/2008 OS 96572 */


	if	(OLD.ie_status_agenda <> 'E' AND NEW.ie_status_agenda = 'E') then
		ds_erro_w := consiste_exec_agenda(NEW.cd_agenda, NEW.nr_atendimento, NEW.nm_usuario, ds_erro_w);
		if (ds_erro_w is not null) then
			--ds_erro_w

			CALL Wheb_mensagem_pck.exibir_mensagem_abort(184546,'ERRO='||ds_erro_w);
		end if;
	end if;

	if (NEW.ie_status_agenda <> 'L') and (NEW.cd_pessoa_fisica is not null) and (OLD.cd_pessoa_fisica <> NEW.cd_pessoa_fisica) and (NEW.dt_nascimento_pac is null) then
		select	max(dt_nascimento)
		into STRICT	dt_nascimento_w
		from	pessoa_fisica
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica;
		if (dt_nascimento_w is not null) then
			NEW.dt_nascimento_pac	:= dt_nascimento_w;
		end if;
	end if;

	if (NEW.ie_status_agenda <> 'L') then
		select  count(*)
		into STRICT    qt_cota_munic_w
		from    agenda_paciente_cota_munic
		where   nr_seq_agenda   = NEW.nr_sequencia;

		if (qt_cota_munic_w > 0) then
			if (OLD.ie_status_agenda <> 'C') and (NEW.ie_status_agenda = 'C') then
				update  agenda_paciente_cota_munic
				set     ie_situacao     = 'I'
				where   nr_seq_agenda   = NEW.nr_sequencia;
			elsif (OLD.ie_status_agenda = 'C') and (NEW.ie_status_agenda <> 'C') then
				update  agenda_paciente_cota_munic
				set     ie_situacao     = 'A'
				where   nr_seq_agenda   = NEW.nr_sequencia;
			end if;
		end if;
	end if;	

	if (NEW.nr_minuto_duracao > 4320) then
		--Atencao, verifique a duracao da agenda, a mesma nao deve ultrapassar 4320 minutos.

		CALL wheb_mensagem_pck.exibir_mensagem_abort(184547);
	end if;


	BEGIN
	if (NEW.nm_usuario <> 'Tasy') and (NEW.ie_status_agenda <> 'L') and (obter_tipo_agenda(NEW.cd_agenda) = 1) and
		((OLD.cd_pessoa_fisica is null AND NEW.cd_pessoa_fisica is not null) or
		 (OLD.nm_paciente is null AND NEW.nm_paciente is not null)) then
		qt_idade_w := 0;
		ie_sexo_w  := 'X';
		if (NEW.cd_pessoa_fisica is not null) then
			qt_idade_w 	:= coalesce(obter_idade_pf(NEW.cd_pessoa_fisica,LOCALTIMESTAMP,'A'),coalesce(NEW.qt_idade_paciente,0));
			ie_sexo_w	:= obter_sexo_pf(NEW.cd_pessoa_fisica,'C');
		end if;	

		open c03;
		loop
		fetch c03 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			BEGIN

			CALL gerar_evento_agenda_trigger(	nr_seq_evento_w,NEW.nr_atendimento,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,
							NEW.cd_agenda, NEW.hr_inicio, NEW.cd_medico, NEW.cd_procedimento,
							NEW.ie_origem_proced, NEW.dt_cancelamento,null,null,null, NEW.cd_convenio,
							NEW.cd_motivo_cancelamento,'S',null,null,NEW.nm_paciente,NEW.ie_status_agenda,
							null,substr(NEW.ds_observacao,1,255),NEW.nr_reserva,NEW.dt_agendamento);
			end;
		end loop;
		close c03;
	end if;
	exception
		when others then
		null;
	end;
	
	if (NEW.ie_status_agenda <> 'L') and (obter_tipo_agenda(NEW.cd_agenda) = 2) and (OLD.cd_pessoa_fisica is null) and (NEW.cd_pessoa_fisica is not null) and (obter_se_pessoa_internada(NEW.cd_pessoa_fisica) = 'S') then

		open c05;
		loop
		fetch c05 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c05 */
			BEGIN
			CALL gerar_evento_agendamento_int(nr_seq_evento_w,null,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,
				NEW.cd_agenda, NEW.hr_inicio, NEW.cd_medico, NEW.cd_procedimento,
				NEW.ie_origem_proced, substr(NEW.ds_observacao,1,255), 'S');
			end;
		end loop;
		close c05;

	end if;
	
	if (NEW.ie_status_agenda <> 'L') and (obter_tipo_agenda(NEW.cd_agenda) = 1) and (NEW.nr_seq_status_pac is not null) and (OLD.nr_seq_status_pac <> NEW.nr_seq_status_pac) then
		open c06;
		loop
		fetch c06 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c06 */
			BEGIN
			CALL gerar_evento_agendamento_int(nr_seq_evento_w,null,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,
				NEW.cd_agenda, NEW.hr_inicio, NEW.cd_medico, NEW.cd_procedimento,
				NEW.ie_origem_proced, substr(NEW.ds_observacao,1,255), 'S');
			end;
		end loop;
		close c06;
	end if;	

	BEGIN
	if (NEW.ie_status_agenda <> 'L') and (obter_tipo_agenda(NEW.cd_agenda) = 1) and (OLD.ie_status_agenda <> 'C') and (NEW.ie_status_agenda = 'C') then
		select	count(*)
		into STRICT	qt_opme_w
		from	agenda_pac_opme
		where	nr_seq_agenda	= NEW.nr_sequencia;

		open c01;
		loop
		fetch c01 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			BEGIN
			CALL gerar_evento_agenda_trigger(nr_seq_evento_w,NEW.nr_atendimento,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,
							NEW.cd_agenda, NEW.hr_inicio, NEW.cd_medico, NEW.cd_procedimento,
							NEW.ie_origem_proced, NEW.dt_cancelamento,null,null,null, NEW.cd_convenio, NEW.cd_motivo_cancelamento,
							'S',NEW.nr_sequencia,null,null,null,null,substr(NEW.ds_observacao,1,255),NEW.nr_reserva,NEW.dt_agendamento);
			end;
		end loop;
		close c01;
		
		open c02;
		loop
		fetch c02 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			BEGIN
			
			CALL gerar_evento_agenda_trigger(	nr_seq_evento_w,
							NEW.nr_atendimento,
							NEW.cd_pessoa_fisica,
							null,
							NEW.nm_usuario,
							NEW.cd_agenda,
							NEW.hr_inicio, 
							NEW.cd_medico, 
							NEW.cd_procedimento,
							NEW.ie_origem_proced, 
							NEW.dt_cancelamento,
							null,
							null,
							null, 
							NEW.cd_convenio, 
							NEW.cd_motivo_cancelamento, 
							'S',
							null,
							null,
							null,
							null,
							NEW.cd_agenda, 
							substr(NEW.ds_observacao,1,255),
							NEW.nr_reserva,
							NEW.dt_agendamento);
			end;
		end loop;
		close c02;
	end if;
	exception
		when others then
		null;
	end;

	BEGIN
	if (NEW.ie_status_agenda <> 'L') and (obter_tipo_agenda(NEW.cd_agenda) = 2) and (OLD.ie_status_agenda <> 'C') and (NEW.ie_status_agenda = 'C') then
		open c07;
		loop
		fetch c07 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c07 */
			BEGIN
			CALL gerar_evento_agenda_trigger(nr_seq_evento_w,NEW.nr_atendimento,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,
							NEW.cd_agenda, NEW.hr_inicio, NEW.cd_medico, NEW.cd_procedimento,
							NEW.ie_origem_proced, NEW.dt_cancelamento,null,null,null, NEW.cd_convenio, NEW.cd_motivo_cancelamento);
			end;
		end loop;
		close c07;
	end if;
	exception
		when others then
		null;
	end;
	
	BEGIN
	if (NEW.nm_usuario <> 'Tasy') and (NEW.ie_status_agenda <> 'L') and (obter_tipo_agenda(NEW.cd_agenda) = 1) and (OLD.dt_agendamento is not null) and (OLD.ie_status_agenda is not null) and (OLD.ie_status_agenda <> 'L') and (OLD.ie_status_agenda <> NEW.ie_status_agenda) then
		qt_idade_w 	:= coalesce(obter_idade_pf(NEW.cd_pessoa_fisica,LOCALTIMESTAMP,'A'),coalesce(NEW.qt_idade_paciente,0));
		ie_sexo_w	:= obter_sexo_pf(NEW.cd_pessoa_fisica,'C');
		open c04;
		loop
		fetch c04 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			BEGIN
			CALL gerar_evento_agenda_trigger(nr_seq_evento_w,NEW.nr_atendimento,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,
							NEW.cd_agenda, NEW.hr_inicio, NEW.cd_medico, NEW.cd_procedimento,
							NEW.ie_origem_proced, NEW.dt_cancelamento,null,null,null,NEW.cd_convenio,NEW.cd_motivo_cancelamento,
							'S',NEW.nr_sequencia,null,null,null,null,substr(NEW.ds_observacao,1,255),null,null,null);
			end;
		end loop;
		close c04;
	end if;
	exception
		when others then
		null;
	end;
	
	BEGIN
	if (NEW.nm_usuario <> 'Tasy') and (NEW.ie_status_agenda <> 'L') and (obter_tipo_agenda(NEW.cd_agenda) = 1) and (OLD.nr_atendimento is null) and (NEW.nr_atendimento is not null) then
		
		qt_idade_w 	:= coalesce(obter_idade_pf(NEW.cd_pessoa_fisica,LOCALTIMESTAMP,'A'),coalesce(NEW.qt_idade_paciente,0));
		ie_sexo_w	:= obter_sexo_pf(NEW.cd_pessoa_fisica,'C');
		open c10;
		loop
		fetch c10 into
			nr_seq_evento_w;
		EXIT WHEN NOT FOUND; /* apply on c10 */
			BEGIN
			CALL gerar_evento_agenda_trigger(nr_seq_evento_w,NEW.nr_atendimento,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,
							NEW.cd_agenda, NEW.hr_inicio, NEW.cd_medico, NEW.cd_procedimento,
							NEW.ie_origem_proced, NEW.dt_cancelamento,null,null,null,NEW.cd_convenio,NEW.cd_motivo_cancelamento,'S',
							null,null,null,null,null,substr(NEW.ds_observacao,1,255));
			end;
		end loop;
		close c10;
	end if;
	exception
		when others then
		null;
	end;

	if (NEW.ie_status_agenda <> 'L') and (ie_atualiza_tipo_atend_w = 'S') and
		((NEW.qt_diaria_prev is not null AND OLD.qt_diaria_prev is null) or (NEW.qt_diaria_prev <> OLD.qt_diaria_prev)) then

		if (NEW.qt_diaria_prev = 0) then

			NEW.ie_tipo_atendimento := 8;

		else
			NEW.ie_tipo_atendimento := 1;
		end if;
	end if;

	if (not TG_OP = 'INSERT') and (NEW.ie_status_agenda = 'L') then
		BEGIN
		update	prescr_medica
		set	nr_seq_agenda	 = NULL
		where	nr_seq_agenda	= NEW.nr_sequencia;
		exception
			when others then
			null;
		end;
		BEGIN
		update	paciente_espera
		set	nr_seq_agenda	 = NULL
		where	nr_seq_agenda	= NEW.nr_sequencia;
		exception
			when others then
			null;
		end;
	end if;

	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (OLD.ie_status_agenda <> 'L') and (NEW.ie_status_agenda = 'B') and (wheb_usuario_pck.get_cd_funcao <> 869)then
		--Somente podem ser bloqueados horarios livres.

		CALL wheb_mensagem_pck.exibir_mensagem_abort(184548);
	end if;

	if (ie_alterar_status_w = 'N') and (NEW.ie_status_agenda = 'IN') and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (NEW.nr_cirurgia is not null) then

		select	max(dt_termino)
		into STRICT	dt_termino_w
		from	cirurgia
		where	nr_cirurgia	=	NEW.nr_cirurgia;

		if (dt_termino_w is not null) then
			--O status nao pode ser alterado para iniciado pois a cirurgia ja foi finalizada.

			CALL wheb_mensagem_pck.exibir_mensagem_abort(184549);
		end if;
	end if;

	if (ie_soma_tempo_hig_w = 'S') and (cd_tipo_agenda_w = 1) and (OLD.nr_seq_proc_interno is null) and (NEW.nr_seq_proc_interno is not null) then
		NEW.nr_minuto_duracao := NEW.nr_minuto_duracao + obter_tempo_higienizacao(NEW.nr_seq_proc_interno);
	end if;

	if (coalesce(OLD.cd_convenio,0) <> coalesce(NEW.cd_convenio,0)) and (coalesce(NEW.cd_convenio,0) > 0) or (OLD.hr_inicio <> NEW.hr_inicio) then
		NEW.dt_limite_agenda	:= obter_data_autor_convenio(NEW.cd_convenio,NEW.dt_agenda,'S','A','X',NEW.cd_agenda);
	end if;

	if (coalesce(OLD.cd_convenio,0) <> coalesce(NEW.cd_convenio,0)) and (coalesce(NEW.cd_convenio,0) > 0) or (OLD.hr_inicio <> NEW.hr_inicio) then
		NEW.dt_limite_convenio	:= obter_data_autor_convenio(NEW.cd_convenio,NEW.dt_agenda,'S','C','X',NEW.cd_agenda);
	end if;

	if (NEW.ie_status_agenda <> 'L') then
		select	coalesce(max(ie_atual_autor_troca_conv_ag),'N')
		into STRICT	ie_atual_autor_troca_conv_ag_w
		from	parametro_faturamento
		where	cd_estabelecimento	= cd_estabelecimento_w;

		/*lhalves OS302409 em 08/04/2011*/



		if (ie_atual_autor_troca_conv_ag_w = 'S') and (coalesce(OLD.cd_convenio,0) <> coalesce(NEW.cd_convenio,0)) and
			((coalesce(OLD.cd_convenio,0) > 0) and (coalesce(NEW.cd_convenio,0) > 0)) then

			ie_autorizacao_w := atualiza_convenio_autor_agenda(cd_estabelecimento_w, NEW.nm_usuario, NEW.nr_sequencia, NEW.cd_convenio, OLD.cd_convenio, ie_autorizacao_w);

			if (ie_autorizacao_w = 'NN') then
				NEW.ie_autorizacao	:= 'NN';
			end if;

		end if;
	end if;	
	
	if  ((NEW.ie_status_agenda <> 'L') and
	    (((NEW.cd_convenio <> OLD.cd_convenio) or (OLD.cd_convenio is null)) or
	    ((NEW.cd_plano <> OLD.cd_plano) or (OLD.cd_plano is null)) or
	    ((NEW.cd_categoria <> OLD.cd_categoria) or (OLD.cd_categoria is null)) or
	    ((NEW.nr_seq_proc_interno is not null) or (NEW.nr_seq_proc_interno <> OLD.nr_seq_proc_interno)))) then	

		BEGIN
		SELECT * FROM verif_autorizacao_conv_age_pac(	NEW.nr_atendimento, NEW.cd_convenio, NEW.cd_procedimento, NEW.ie_origem_proced, NEW.nr_seq_proc_interno, NEW.ie_tipo_atendimento, NEW.cd_plano, NEW.cd_setor_atendimento, NEW.cd_categoria, cd_estabelecimento_w, NEW.nr_sequencia, NEW.cd_medico, NEW.cd_pessoa_fisica, ie_cobertura_conv_w, ie_regra_w, ds_erro_ww, NEW.cd_tipo_acomodacao, NEW.cd_usuario_convenio, NEW.ie_carater_cirurgia) INTO STRICT ie_cobertura_conv_w, ie_regra_w, ds_erro_ww;
		NEW.ie_cobertura_conv := ie_cobertura_conv_w;
		exception
		when others then
			null;
		end;
	
	elsif (NEW.ie_status_agenda = 'L') then
			NEW.ie_cobertura_conv := null;	
	
	end if;
	

	if (TG_OP = 'INSERT') then
		
		open C09;
		loop
		fetch C09 into	
			nr_seq_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C09 */
			BEGIN
			nr_seq_regra_w := nr_seq_regra_w;
			end;
		end loop;
		close C09;
		
		if (nr_seq_regra_w > 0) then
			select	max(cd_convenio),
				max(cd_categoria),
				max(cd_plano),
				max(cd_tipo_acomodacao),
				max(cd_cid)
			into STRICT	cd_convenio_w,
				cd_categoria_ww,
				cd_plano_w,
				cd_tipo_acomodacao_w,
				cd_cid_w
			from	regra_valor_padrao_agenda
			where	nr_sequencia = nr_seq_regra_w;

			if (cd_convenio_w is not null) then
				NEW.cd_convenio := cd_convenio_w;
			end if;

			if (cd_categoria_ww is not null) then
				NEW.cd_categoria := cd_categoria_ww;
			end if;

			if (cd_plano_w is not null) then
				NEW.cd_plano := cd_plano_w;
			end if;

			if (cd_tipo_acomodacao_w is not null) then
				NEW.cd_tipo_acomodacao := cd_tipo_acomodacao_w;
			end if;
			
			if (cd_cid_w is not null) then
				NEW.cd_doenca_cid		:= cd_cid_w;
			end if;
		end if;
		
		if (cd_tipo_agenda_w = 2) and (ie_atual_nome_bloq_w = 'S') and (NEW.ie_status_agenda = 'B') then
			NEW.nm_paciente := Wheb_mensagem_pck.get_texto(307603); --'Horario bloqueado';
		end if;

	end if;

if (NEW.nr_seq_proc_interno is not null) then

	SELECT * FROM obter_edicao_proc(cd_estabelecimento_w, NEW.cd_convenio, NEW.cd_categoria, LOCALTIMESTAMP, NEW.cd_procedimento, cd_edicao_amb_w, vl_m2_filme_w) INTO STRICT cd_edicao_amb_w, vl_m2_filme_w;

	NEW.cd_procedimento_tuss       :=      define_procedimento_tuss(cd_estabelecimento_w,
								   NEW.nr_seq_proc_interno,
								   NEW.cd_convenio,
								   NEW.cd_categoria,
								   NEW.ie_tipo_atendimento,
								   LOCALTIMESTAMP,
								   NEW.cd_procedimento,
								   NEW.ie_origem_proced,
								   cd_edicao_amb_w,
								   null);
								
elsif (OLD.nr_seq_proc_interno is not null) and (NEW.nr_seq_proc_interno is null) and (OLD.cd_procedimento_tuss is not null) and (OLD.cd_procedimento_tuss = NEW.cd_procedimento_tuss)	then
	
	NEW.cd_procedimento_tuss       :=	null;
	
end if;

if (TG_OP = 'UPDATE') and (NEW.cd_procedimento <> OLD.cd_procedimento) then
	CALL atualiza_pedido_kit_agenda(	NEW.nr_sequencia,
					OLD.cd_procedimento,
					OLD.ie_origem_proced,
					NEW.cd_procedimento,
					NEW.ie_origem_proced,
					NEW.nr_seq_proc_interno,
					NEW.cd_medico,
					NEW.nm_usuario,
					cd_estabelecimento_w,
					NEW.cd_agenda,
               NEW.cd_pessoa_fisica);
end if;

if (NEW.ie_status_agenda <> 'L') and (NEW.ie_status_agenda <> 'C') and (ie_consiste_obito_w = 'S') and (coalesce(OLD.cd_pessoa_fisica,'-1') <> coalesce(NEW.cd_pessoa_fisica,'-1')) and (obter_se_paciente_obito(NEW.cd_pessoa_fisica) <> 'N') and (obter_tipo_agenda(NEW.cd_agenda) = 1) then
	--Esse paciente possui data de obito!

	CALL wheb_mensagem_pck.exibir_mensagem_abort(184550);
end if;



if (TG_OP = 'UPDATE') and (ie_modo_reserva_w = '1') and (NEW.nr_reserva is null) then
	if (OLD.nr_reserva is not null) then
		nr_reserva_w := substr(OLD.nr_reserva,1,20);
		NEW.nr_reserva := nr_reserva_w;
	elsif (cd_tipo_agenda_w = 2) then
		ds_nome_abrev_w := upper(obter_abrev_estabelecimento(cd_estabelecimento_w));
		select	nextval('agenda_reserva_seq')
		into STRICT	nr_seq_reserva_w
		;
		NEW.nr_reserva := substr(ds_nome_abrev_w||'E'||nr_seq_reserva_w,1,20);
	else
		ds_nome_abrev_w := upper(obter_abrev_estabelecimento(cd_estabelecimento_w));
		select	nextval('agenda_reserva_seq')
		into STRICT	nr_seq_reserva_w
		;
		NEW.nr_reserva := substr(ds_nome_abrev_w||'C'||nr_seq_reserva_w,1,20);
	end if;
end if;

if (TG_OP = 'UPDATE') then
	if (NEW.hr_inicio <> OLD.hr_inicio) or (NEW.hr_inicio_origem is null) then
		NEW.hr_inicio_origem := OLD.hr_inicio;
	end if;

	if (NEW.ie_status_agenda = 'L') then
		NEW.hr_inicio_origem := null;
	end if;
end if;	

BEGIN
	if (NEW.qt_idade_paciente is null) and (NEW.dt_nascimento_pac is not null) then
		NEW.qt_idade_paciente 	:= Obter_Idade(NEW.dt_nascimento_pac,LOCALTIMESTAMP,'A');
		NEW.qt_idade_mes 	:= Obter_Idade(NEW.dt_nascimento_pac,LOCALTIMESTAMP,'M');
	end if;
exception
when others then
	null;
end;
	
BEGIN
if (NEW.nm_usuario <> 'Tasy') and (NEW.ie_autorizacao = 'A') and (obter_tipo_agenda(NEW.cd_agenda) = 1) and (OLD.ie_autorizacao <> NEW.ie_autorizacao) then
	qt_idade_w 	:= coalesce(obter_idade_pf(NEW.cd_pessoa_fisica,LOCALTIMESTAMP,'A'),coalesce(NEW.qt_idade_paciente,0));
	ie_sexo_w	:= obter_sexo_pf(NEW.cd_pessoa_fisica,'C');
	open c08;
	loop
	fetch c08 into
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on c08 */
		BEGIN
		CALL gerar_evento_agenda_trigger(	nr_seq_evento_w,NEW.nr_atendimento,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,
						NEW.cd_agenda, NEW.hr_inicio, NEW.cd_medico, NEW.cd_procedimento,
						NEW.ie_origem_proced, NEW.dt_cancelamento,null,null,null,NEW.cd_convenio,
						NEW.cd_motivo_cancelamento,'S',NEW.nr_sequencia,null,null,NEW.ie_status_agenda,null,substr(NEW.ds_observacao,1,255));
		end;
	end loop;
	close c08;
end if;	
exception
	when others then
	null;
end;

	if (NEW.nr_atendimento is not null) then
		CALL gerar_anexo_agenda_atend(NEW.nr_sequencia, NEW.nr_atendimento, cd_tipo_agenda_w, NEW.nm_usuario);
	end if;

end if;

--Added below code for request SO#1996135


ie_save_insurance_holder_w := obter_parametro_agenda(wheb_usuario_pck.get_cd_estabelecimento, 'IE_SAVE_INSURANCE_HOLDER', 'N');

if (ie_save_insurance_holder_w = 'S') and (NEW.cd_pessoa_fisica is not null) and (NEW.cd_convenio is not null) and
	((coalesce(NEW.cd_convenio, 0) <> coalesce(OLD.cd_convenio, 0)) or (coalesce(NEW.cd_pessoa_fisica, '0') <> coalesce(OLD.cd_pessoa_fisica, '0')) or (coalesce(NEW.cd_categoria, 0) <> coalesce(OLD.cd_categoria, 0)) or (coalesce(NEW.cd_usuario_convenio, '0') <> coalesce(OLD.cd_usuario_convenio, '0'))) then
	CALL insere_atualiza_titular_conv(
				NEW.nm_usuario,
				NEW.cd_convenio,
				NEW.cd_categoria,
				NEW.cd_pessoa_fisica,
				NEW.cd_plano,
				null,
				NEW.dt_validade_carteira,
				NEW.dt_validade_carteira,
				null,
				NEW.cd_usuario_convenio,
				null,
				'N',
				'2');
end if;

if (NEW.ie_autorizacao <> 'A') and
	(coalesce(OLD.cd_convenio,-1) <> coalesce(NEW.cd_convenio,-1) or
	((OLD.nr_seq_proc_interno is null) or (OLD.nr_seq_proc_interno <> NEW.nr_seq_proc_interno)) or (OLD.dt_agendamento <> NEW.dt_agendamento) or (OLD.cd_agenda <> NEW.cd_agenda)) then
	CALL verifica_prazo_agendamento(NEW.cd_agenda, NEW.nr_seq_proc_interno, NEW.cd_convenio, NEW.dt_agendamento, NEW.hr_inicio, NEW.ie_carater_cirurgia,NEW.nm_usuario);
end if;

if	((coalesce(OLD.cd_convenio,0) <> coalesce(NEW.cd_convenio,0)) or (coalesce(OLD.cd_categoria,'XPTO') <> coalesce(NEW.cd_categoria,'XPTO')) and (obter_tipo_agenda(NEW.cd_agenda) = 2)) then
	SELECT * FROM Obter_Proc_Tab_Interno_Conv(NEW.nr_seq_proc_interno, wheb_usuario_pck.get_cd_estabelecimento, NEW.cd_convenio, NEW.cd_categoria, NEW.cd_plano, null, cd_procedimento_w, ie_origem_proced_w, null, LOCALTIMESTAMP, null, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
	
	if (cd_procedimento_w is not null) then
		NEW.cd_procedimento := cd_procedimento_w;
	end if;
	
	if (ie_origem_proced_w is not null) then
		NEW.ie_origem_proced := ie_origem_proced_w;
	end if;
	
end if;

if (NEW.cd_pessoa_fisica is not null) and (coalesce(NEW.cd_pessoa_fisica,'X') <> coalesce(OLD.cd_pessoa_fisica,'X')) then /* Rafael em 15/05/2007 Agenda Exames Nova */

	/* obter nome pf */


	select	 substr(obter_nome_pf(NEW.cd_pessoa_fisica),1,60)
	into STRICT	nm_paciente_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = NEW.cd_pessoa_fisica;
	/* atualizar nome pf */


	NEW.nm_paciente := nm_paciente_w;
end if;

if (OLD.ie_status_agenda <> 'C') and (NEW.ie_status_agenda = 'C') and (obter_tipo_agenda(NEW.cd_agenda) = 2) and (NEW.nr_seq_pepo is not null)then
		
   --Parametros do FANEP(Shift + F11)

	select	max(coalesce(ie_cancelar_fanep,'N')),
            max(coalesce(ie_estornar_fanep,'N'))
	into STRICT	   ie_cancelar_fanep_w,
            ie_estornar_fanep_w	
	from	   parametro_agenda
	where 	cd_estabelecimento = cd_estabelecimento_w;

   if (ie_cancelar_fanep_w = 'S') then
		update	pepo_cirurgia
		set	   dt_cancelamento   = LOCALTIMESTAMP,
               dt_atualizacao	   = LOCALTIMESTAMP,
               nm_usuario	      = NEW.nm_usuario
		where    nr_sequencia      = NEW.nr_seq_pepo;
   end if;
	
	else if (OLD.ie_status_agenda = 'C') and (NEW.ie_status_agenda <> 'C') and (obter_tipo_agenda(NEW.cd_agenda) = 2) and (OLD.nr_seq_pepo is not null) then
      
      select	max(coalesce(ie_cancelar_fanep,'N')),
               max(coalesce(ie_estornar_fanep,'N'))
      into STRICT	   ie_cancelar_fanep_w,
               ie_estornar_fanep_w	
      from	   parametro_agenda
      where 	cd_estabelecimento = cd_estabelecimento_w;

      if (ie_estornar_fanep_w = 'S') then
         update	pepo_cirurgia
         set	   dt_cancelamento  = NULL,
                  dt_atualizacao	= LOCALTIMESTAMP,
                  nm_usuario	= NEW.nm_usuario
         where    nr_sequencia = NEW.nr_seq_pepo;
      end if;
	end if;
 end if;

if (OLD.NR_SEQ_LISTA is null and NEW.NR_SEQ_LISTA is not null) then
	SELECT	count(*)
	into STRICT	qt_reg_w
	from	ag_lista_espera_estagio
	where	IE_SITUACAO = 'A'
	and		ie_acao = 'AG';
	
	if (qt_reg_w > 0) then		
		select	count(*)
		into STRICT	qt_reg_w
		from	ag_lista_esp_estagio_ant a,
				agenda_lista_espera b
		where	a.nr_seq_estagio = (SELECT	a.nr_sequencia
									from	ag_lista_espera_estagio a
									where	a.IE_SITUACAO = 'A'
									and		a.ie_acao = 'AG')
		and		a.nr_seq_estagio_ant = b.nr_seq_estagio							
		and		b.nr_sequencia = NEW.NR_SEQ_LISTA;
	
		if (qt_reg_w > 0) then		
			update	AGENDA_LISTA_ESPERA b
			set		b.nr_seq_estagio = (SELECT	nr_sequencia
									  from		ag_lista_espera_estagio a
									  where		a.IE_SITUACAO = 'A'
									  and		a.ie_acao = 'AG')
			where	b.nr_sequencia = NEW.NR_SEQ_LISTA;			
		end if;		
	end if;	
end if;


if  ((cd_tipo_agenda_w  = 1) and -- malcher
     (NEW.cd_medico <> OLD.cd_medico) and (OLD.cd_medico_exec is not null) and (NEW.cd_medico <> OLD.cd_medico_exec)) then
     NEW.cd_medico_exec := NEW.cd_medico;
end if;

if (cd_tipo_agenda_w = 1) and (coalesce(NEW.cd_tipo_acomodacao,0) <> coalesce(OLD.cd_tipo_acomodacao,0)) then
   BEGIN
   UPDATE 	gestao_vaga
	SET 	   cd_tipo_acomod_desej = NEW.cd_tipo_acomodacao,
            nm_usuario 			   = nm_usuario_w
	WHERE	   nr_seq_agenda 	      = NEW.nr_sequencia;
   exception
   when others then
      ds_mensagem_w := null;
   end;
end if;

if (cd_tipo_agenda_w = 2)
  and (OLD.nm_usuario_acesso is not null and NEW.nm_usuario_acesso is not null)
	and (NEW.cd_pessoa_fisica is not null or NEW.nm_paciente is not null)
	and (OLD.ie_status_agenda = 'N') then
		NEW.nm_usuario_acesso := null;
	end if;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_paciente_atual() FROM PUBLIC;

CREATE TRIGGER agenda_paciente_atual
	BEFORE INSERT OR UPDATE ON agenda_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_paciente_atual();

