-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_paciente_after_insert ON agenda_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_paciente_after_insert() RETURNS trigger AS $BODY$
DECLARE

cd_tipo_agenda_w		bigint;
cd_estabelecimento_w		integer;
ie_prontuario_w			varchar(1);
ie_gerar_w			varchar(1);
nr_prontuario_w			bigint;
cd_agenda_exame_w		bigint;
qt_aval_lista_espera		integer;
nr_req_cme_w			bigint;
nr_seq_conj_real_w		bigint;
qt_sur_schedule_rule_w	smallint;
ds_retorno_integracao_w 	varchar(4000);
ds_hist_w		varchar(2000);
cd_funcao_ativa_w	bigint;

c01 CURSOR FOR
	SELECT	cd_agenda_exame
	from	regra_prontuario
	where	cd_estabelecimento						= cd_estabelecimento_w
	and	ie_tipo_regra							= 6;

c02 CURSOR FOR
	SELECT	nr_seq_conj_real
	from	cm_requisicao_item a,
		cm_requisicao_conj b
	where	a.nr_seq_requisicao = nr_req_cme_w
	and	a.nr_sequencia = b.nr_seq_item_req;
	
BEGIN

cd_funcao_ativa_w := obter_funcao_ativa;

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then

	select	max(cd_tipo_agenda),
			max(cd_estabelecimento)
	into STRICT	cd_tipo_agenda_w,
			cd_estabelecimento_w
	from	agenda
	where 	cd_agenda	= NEW.cd_agenda;

	if ((cd_tipo_agenda_w = 1) and (NEW.cd_pessoa_fisica is not null) and (OLD.cd_pessoa_fisica is null)) then
		
		CALL gerar_regra_prontuario_gestao(null, cd_estabelecimento_w, null, NEW.cd_pessoa_fisica, NEW.nm_usuario,NEW.nr_sequencia, null, null, null, null, null, NEW.cd_agenda);
		nr_prontuario_w	:= coalesce(obter_prontuario_pf(cd_estabelecimento_w, NEW.cd_pessoa_fisica),0);
		
		if (nr_prontuario_w = 0) then
			select	obter_valor_param_usuario(0,32,0,NEW.nm_usuario,cd_estabelecimento_w)
			into STRICT	ie_prontuario_w
			;

			if (ie_prontuario_w = 'R') then
				select	count(1)
				into STRICT 	qt_sur_schedule_rule_w
				from	regra_prontuario
				where	cd_estabelecimento 	= cd_estabelecimento_w
				and		ie_tipo_regra 		= 7;
				
				if (qt_sur_schedule_rule_w > 0) then
					nr_prontuario_w := gerar_prontuario_pac(cd_estabelecimento_w, NEW.cd_pessoa_fisica, 'N', NEW.nm_usuario, nr_prontuario_w);
				end if;
			end if;
		end if;
	elsif ((cd_tipo_agenda_w = 2) and (NEW.cd_pessoa_fisica is not null) and (OLD.cd_pessoa_fisica is null)) then
		CALL gerar_regra_prontuario_gestao(null, cd_estabelecimento_w, null, NEW.cd_pessoa_fisica, NEW.nm_usuario,NEW.nr_sequencia, null, null, null, null, null, NEW.cd_agenda);
	
		/* Matheus OS 182242
		select 		nvl(max(nr_prontuario),0)
		into		nr_prontuario_w
		from		Pessoa_fisica
		where		cd_pessoa_fisica	= :new.cd_pessoa_fisica;*/

		
		nr_prontuario_w	:= coalesce(obter_prontuario_pf(cd_estabelecimento_w, NEW.cd_pessoa_fisica),0);
		
		if (nr_prontuario_w = 0) then
		
			SELECT	Obter_Valor_Param_Usuario(0,32,0,NEW.nm_usuario,cd_estabelecimento_w)
			into STRICT	ie_prontuario_w
			;
			
			if (ie_prontuario_w = 'R') then
				ie_gerar_w := 'N';
				OPEN C01;
				LOOP
				FETCH C01 into cd_agenda_exame_w;
				EXIT WHEN NOT FOUND; /* apply on c01 */
					BEGIN
					if (cd_agenda_exame_w is null) or
						(cd_agenda_exame_w is not null AND cd_agenda_exame_w = NEW.cd_agenda) then
						ie_gerar_w 	:= 'S';
						exit;
					end if;
					end;
				END LOOP;
				CLOSE C01;	
			end if;
			if (ie_gerar_w = 'S') then
				/* Matheus OS 182242
				select	prontuario_seq.nextval
				into		nr_prontuario_w
				from		dual;

				update 	pessoa_fisica
				set		nr_prontuario	= nr_prontuario_w
				where		cd_pessoa_fisica	= :new.cd_pessoa_fisica;*/

				nr_prontuario_w := gerar_prontuario_pac(cd_estabelecimento_w, NEW.cd_pessoa_fisica, 'N', NEW.nm_usuario, nr_prontuario_w);
			end if;
		end if;
	end if;
	
	
	if (NEW.nr_seq_lista is not null) then
	
		select count(*)
		into STRICT   qt_aval_lista_espera
		from   aval_pre_anestesica
		where  nr_seq_lista_espera = NEW.nr_seq_lista;
		
		if (qt_aval_lista_espera > 0) then
	
			update  aval_pre_anestesica
			set 	nr_seq_agenda =	NEW.nr_sequencia
			where 	nr_seq_lista_espera = NEW.nr_seq_lista;
		end if;
	end if;

	if (TG_OP = 'UPDATE') and (NEW.nr_cirurgia is not null)	then
		
		select	substr(obter_requisicao_agenda(NEW.nr_sequencia),1,90)
		into STRICT	nr_req_cme_w
		;
		
		if (coalesce(nr_req_cme_w,0) > 0) then
			open c02;
			loop
			fetch c02 into	
				nr_seq_conj_real_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				BEGIN
				update	cm_conjunto_cont
				set	nr_cirurgia = NEW.nr_cirurgia
				where	nr_sequencia = nr_seq_conj_real_w;
				end;
			end loop;
			close c02;
		end if;

    if (cd_tipo_agenda_w = 1) and (NEW.nr_atendimento is not null) and (NEW.ie_status_agenda <> 'C') then
         select   BIFROST.SEND_INTEGRATION( 'SurgerySchedulingUpdate',
          'com.philips.tasy.integration.atepac.surgery.scheduling.SurgerySchedulingRequest',
          '{"nrSequencia" : '||NEW.nr_sequencia||'}',
          wheb_usuario_pck.get_nm_usuario)
          into STRICT     ds_retorno_integracao_w
;
    end if;
	end if;
	
	if (TG_OP = 'INSERT' and (NEW.cd_pessoa_fisica is not null
	or (NEW.nm_paciente is not null and NEW.ie_status_agenda <> 'B'))
		and NEW.cd_agenda is not null
		and cd_tipo_agenda_w = 2
		and NEW.ie_encaixe = 'S') then
		
			ds_hist_w := substr(WHEB_MENSAGEM_PCK.get_texto(1071609, 'ds_funcao='||OBTER_DESC_FUNCAO(obter_funcao_ativa)||' - '||WHEB_MENSAGEM_PCK.get_texto(42957)||';obter_funcao_ativa='||obter_funcao_ativa||';call_stack='||dbms_utility.format_call_stack),1,2000);
		
			CALL gerar_agenda_paciente_hist(NEW.cd_agenda,
									  NEW.nr_sequencia,
									  'AGM',
									  NEW.nm_usuario,
									  ds_hist_w,
									  NEW.cd_pessoa_fisica,
									  NEW.nm_paciente,
									  NEW.hr_inicio,
									  obter_perfil_ativo,
									  null,
									  null,
									  NEW.dt_agendamento);
	end if;
	
end if;

/*desbloquear agendamentos bloqueados para edicao*/


if (coalesce(obter_tipo_agenda(NEW.cd_agenda),1) = 1) then
	CALL bloquear_agenda_edicao(NEW.nr_sequencia, 'T', wheb_usuario_pck.get_nm_usuario);
end if;

RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_paciente_after_insert() FROM PUBLIC;

CREATE TRIGGER agenda_paciente_after_insert
	AFTER INSERT OR UPDATE ON agenda_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_paciente_after_insert();

