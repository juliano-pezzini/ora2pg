-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS sup_int_nf_atual ON sup_int_nf CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_sup_int_nf_atual() RETURNS trigger AS $BODY$
declare
qt_existe_erros_w		bigint;
nr_seq_nota_w		bigint;
qt_existe_w		bigint;
BEGIN 
 
select	count(*) 
into STRICT	qt_existe_w 
from	sup_parametro_integracao 
where	cd_estabelecimento = NEW.cd_estabelecimento 
and	ie_evento = 'NF' 
and	ie_forma = 'R' 
and	ie_situacao = 'A';
 
if (qt_existe_w > 0) and (NEW.ie_tipo_nota in ('EF','EN')) and (OLD.dt_liberacao is null) and (NEW.dt_liberacao is not null) and (OLD.ie_forma_integracao = 'R') then 
	BEGIN 
 
	NEW.dt_leitura	:= LOCALTIMESTAMP;
 
	CALL consiste_sup_int_nf(NEW.nr_sequencia, 
			NEW.cd_cgc, 
			NEW.cd_cgc_emitente, 
			NEW.cd_condicao_pagamento, 
			NEW.cd_estabelecimento, 
			NEW.cd_natureza_operacao, 
			NEW.cd_operacao_nf, 
			NEW.cd_pessoa_fisica, 
			NEW.cd_serie_nf, 
			NEW.ie_tipo_nota);
 
	select	count(*) 
	into STRICT	qt_existe_erros_w 
	from	sup_int_nf_consist 
	where	nr_sequencia = NEW.nr_sequencia;
 
	if (qt_existe_erros_w = 0) then 
		BEGIN 
 
		nr_seq_nota_w := gerar_nota_fiscal_integ( 
			NEW.cd_cgc, NEW.cd_cgc_emitente, NEW.cd_condicao_pagamento, NEW.cd_estabelecimento, NEW.cd_natureza_operacao, NEW.cd_operacao_nf, NEW.cd_pessoa_fisica, NEW.cd_serie_nf, NEW.ds_observacao, NEW.ie_tipo_nota, NEW.nr_documento_externo, NEW.nr_nota_fiscal, NEW.vl_despesa_acessoria, NEW.vl_frete, NEW.vl_seguro, NEW.nr_sequencia, NEW.dt_emissao, nr_seq_nota_w);
 
		if (nr_seq_nota_w is not null) then 
			BEGIN 
 
			NEW.dt_confirma_integracao	:= LOCALTIMESTAMP;
			NEW.nr_seq_nota			:= nr_seq_nota_w;
 
			end;
		end if;
 
		end;
	end if;
 
	end;
end if;			
 
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_sup_int_nf_atual() FROM PUBLIC;

CREATE TRIGGER sup_int_nf_atual
	BEFORE UPDATE ON sup_int_nf FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_sup_int_nf_atual();

