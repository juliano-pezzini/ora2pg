-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atendimento_paciente_in_upd_ar ON atendimento_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atendimento_paciente_in_upd_ar() RETURNS trigger AS $BODY$
declare
	nm_usuario_w varchar(15);
	a_nm_usuario_w varchar(15);
	cd_pessoa_fisica_w ATENDIMENTO_PACIENTE.cd_pessoa_fisica%type;
	nr_atendimento_w ATENDIMENTO_PACIENTE.nr_atendimento%type;
	IE_TIPO_ATENDIMENTO_W ATENDIMENTO_PACIENTE.IE_TIPO_ATENDIMENTO%type;

c01 CURSOR FOR
SELECT distinct obter_usuario_pf(a.cd_prescritor)
from pessoa_fisica c,
     medico b,
     prescr_medica a
where b.cd_pessoa_fisica = c.cd_pessoa_fisica
and a.cd_prescritor  = b.cd_pessoa_fisica
and a.nr_atendimento = NEW.nr_atendimento
and b.ie_situacao = 'A'

union

select distinct obter_usuario_pf(a.cd_medico)
from pessoa_fisica c,
     medico b,
     evolucao_paciente a
where b.cd_pessoa_fisica = c.cd_pessoa_fisica
and a.cd_medico = b.cd_pessoa_fisica
and a.nr_atendimento  = NEW.nr_atendimento
and b.ie_situacao = 'A'

union

select distinct obter_usuario_pf(b.cd_pessoa_fisica)
from pessoa_fisica c,
     medico b
where b.cd_pessoa_fisica = c.cd_pessoa_fisica
and b.cd_pessoa_fisica  = NEW.cd_pessoa_fisica
and b.ie_situacao = 'A'

union

select distinct obter_usuario_pf(b.cd_medico)
from pessoa_fisica c,
     pf_medico_externo b,
     pessoa_fisica m
where b.cd_pessoa_fisica = c.cd_pessoa_fisica
and c.cd_pessoa_fisica = b.cd_pessoa_fisica
and m.cd_pessoa_fisica = b.cd_medico
and b.cd_pessoa_fisica = NEW.cd_pessoa_fisica;
BEGIN
if (GET_USES_DPC() = 'S') then

	nm_usuario_w := obter_usuario_pf(NEW.cd_medico_resp);
	cd_pessoa_fisica_w:= NEW.cd_pessoa_fisica;
	nr_atendimento_w := NEW.nr_atendimento;
	IE_TIPO_ATENDIMENTO_W := NEW.IE_TIPO_ATENDIMENTO;

	if (OLD.IE_TIPO_ATENDIMENTO <> '1' AND IE_TIPO_ATENDIMENTO_W = 1) then
	insert into PEP_ITEM_PENDENTE(
			NR_SEQUENCIA,
			DT_ATUALIZACAO,
			NM_USUARIO,
			DT_ATUALIZACAO_NREC,
			NM_USUARIO_NREC,
			DT_REGISTRO,
			CD_PESSOA_FISICA,
			NR_ATENDIMENTO,
			NR_SEQ_REGISTRO,
			IE_TIPO_PENDENCIA,
			IE_TIPO_REGISTRO,
			DS_ITEM)
	values (nextval('pep_item_pendente_seq'),
			LOCALTIMESTAMP,
			nm_usuario_w,
			LOCALTIMESTAMP,
			nm_usuario_w,
			LOCALTIMESTAMP,
			cd_pessoa_fisica_w ,
			nr_atendimento_w,
			nr_atendimento_w,
			'L',
			'DPC',
			'DPC');

		OPEN C01;
			LOOP
				FETCH C01 into a_nm_usuario_w;
				EXIT WHEN NOT FOUND; /* apply on c01 */
				insert into PEP_ITEM_PENDENTE(
					NR_SEQUENCIA,
					DT_ATUALIZACAO,
					NM_USUARIO,
					DT_ATUALIZACAO_NREC,
					NM_USUARIO_NREC,
					DT_REGISTRO,
					CD_PESSOA_FISICA,
					NR_ATENDIMENTO,
					NR_SEQ_REGISTRO,
					IE_TIPO_PENDENCIA,
					IE_TIPO_REGISTRO,
					DS_ITEM)
				values (nextval('pep_item_pendente_seq'),
					LOCALTIMESTAMP,
					a_nm_usuario_w,
					LOCALTIMESTAMP,
					a_nm_usuario_w,
					LOCALTIMESTAMP,
					cd_pessoa_fisica_w,
					nr_atendimento_w,
					nr_atendimento_w,
					'L',
					'DPC',
					'DPC');
			END LOOP;
		CLOSE C01;	
		
	end if;
end if;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atendimento_paciente_in_upd_ar() FROM PUBLIC;

CREATE TRIGGER atendimento_paciente_in_upd_ar
	AFTER INSERT OR UPDATE ON atendimento_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atendimento_paciente_in_upd_ar();

