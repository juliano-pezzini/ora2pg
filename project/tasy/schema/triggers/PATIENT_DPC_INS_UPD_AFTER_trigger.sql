-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS patient_dpc_ins_upd_after ON patient_dpc CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_patient_dpc_ins_upd_after() RETURNS trigger AS $BODY$
declare
nm_usuario_w varchar(30);
a_nm_usuario_w varchar(30);
nr_atendimento_w ATENDIMENTO_PACIENTE.nr_atendimento%type;
DT_END_W timestamp;
NR_SEQUENCIA_W PATIENT_DPC.NR_SEQUENCIA%type;
NR_SEQ_EDITION_W PATIENT_DPC.NR_SEQ_EDITION%type;


c01 CURSOR FOR
SELECT distinct obter_usuario_pf(a.cd_prescritor)
from pessoa_fisica c, 
     medico b, 
     prescr_medica a
where b.cd_pessoa_fisica = c.cd_pessoa_fisica 
and a.cd_prescritor  = b.cd_pessoa_fisica 
and a.nr_atendimento = NEW.nr_atendimento 
and b.ie_situacao = 'A' 

union
 
SELECT distinct obter_usuario_pf(a.cd_medico) 
from pessoa_fisica c, 
     medico b, 
     evolucao_paciente a 
where b.cd_pessoa_fisica = c.cd_pessoa_fisica 
and a.cd_medico = b.cd_pessoa_fisica 
and a.nr_atendimento  = NEW.nr_atendimento 
and b.ie_situacao = 'A' 

union
 
select distinct obter_usuario_pf(a.cd_medico_referido)
from pessoa_fisica c, 
     medico b, 
     atendimento_paciente a 
where b.cd_pessoa_fisica = c.cd_pessoa_fisica 
and a.cd_medico_referido = b.cd_pessoa_fisica 
and a.nr_atendimento  = NEW.nr_atendimento 
and b.ie_situacao = 'A' 

union
 
select distinct obter_usuario_pf(b.cd_medico) 
from pessoa_fisica c, 
     pf_medico_externo b, 
     pessoa_fisica m
where b.cd_pessoa_fisica = c.cd_pessoa_fisica 
and c.cd_pessoa_fisica = b.cd_pessoa_fisica 
and m.cd_pessoa_fisica = b.cd_medico 
and b.cd_pessoa_fisica = obter_pessoa_atendimento(NEW.nr_atendimento,'C');
BEGIN
if (GET_USES_DPC() = 'S') then

	nr_atendimento_w := NEW.nr_atendimento;
	NR_SEQUENCIA_W := NEW.nr_sequencia;
	NR_SEQ_EDITION_W := NEW.nr_seq_edition;

select  obter_usuario_pf(cd_medico_resp)
into STRICT nm_usuario_w
from atendimento_paciente
where nr_atendimento = nr_atendimento_w;

select coalesce(dt_end,LOCALTIMESTAMP)
into STRICT   dt_end_w
from   dpc_edition
where  nr_sequencia = nr_seq_edition_w;

if((OLD.nr_seq_dpc_score is null) and (NEW.nr_seq_dpc_score is not null)
	and (coalesce(NEW.dt_end_dpc,LOCALTIMESTAMP) > dt_end_w)) then   


insert into PEP_ITEM_PENDENTE(
		NR_SEQUENCIA,
		DT_ATUALIZACAO,
		NM_USUARIO,
		DT_ATUALIZACAO_NREC,
		NM_USUARIO_NREC,
		DT_REGISTRO,
		CD_PESSOA_FISICA,
		NR_ATENDIMENTO,
		NR_SEQ_REGISTRO,
		IE_TIPO_PENDENCIA,
		IE_TIPO_REGISTRO,
		DS_ITEM)
	SELECT	nextval('pep_item_pendente_seq'),
			LOCALTIMESTAMP,
			nm_usuario_w,
			LOCALTIMESTAMP,
			nm_usuario_w,
			DT_END_W,
			obter_pessoa_atendimento(NEW.nr_atendimento,'C'),
			nr_atendimento_w,
			NR_SEQUENCIA_W,
			'L',
			'DPC2',
			obter_desc_expressao(974849)||' '|| to_char(DT_END_W,'YYYY-MM-DD')  as DS_ITEM;
	OPEN C01;
		LOOP
			FETCH C01 into a_nm_usuario_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
            insert into PEP_ITEM_PENDENTE(
				NR_SEQUENCIA,
				DT_ATUALIZACAO,
				NM_USUARIO,
				DT_ATUALIZACAO_NREC,
				NM_USUARIO_NREC,
				DT_REGISTRO,
				CD_PESSOA_FISICA,
				NR_ATENDIMENTO,
				NR_SEQ_REGISTRO,
				IE_TIPO_PENDENCIA,
				IE_TIPO_REGISTRO,
				DS_ITEM)
			SELECT
				nextval('pep_item_pendente_seq'),
				LOCALTIMESTAMP,
				a_nm_usuario_w,
				LOCALTIMESTAMP,
				a_nm_usuario_w,
				DT_END_W,
				obter_pessoa_atendimento(NEW.nr_atendimento,'C'),
				nr_atendimento_w,
				NR_SEQUENCIA_W,
				'L',
				'DPC2',
				obter_desc_expressao(974849)||' '|| to_char(DT_END_W,'YYYY-MM-DD')  as DS_ITEM;
        END LOOP;
   	CLOSE C01;	
end if;

if ((OLD.nr_seq_dpc_score is null) and (NEW.nr_seq_dpc_score is not null) and (NEW.dt_end_dpc <= dt_end_w)) then

	    delete  FROM pep_item_pendente
		where   nr_atendimento  = NEW.nr_atendimento
		and     nr_seq_registro = NEW.nr_sequencia
		and     ie_tipo_registro = 'DPC2';
		
end if;

end if;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_patient_dpc_ins_upd_after() FROM PUBLIC;

CREATE TRIGGER patient_dpc_ins_upd_after
	AFTER INSERT OR UPDATE ON patient_dpc FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_patient_dpc_ins_upd_after();

