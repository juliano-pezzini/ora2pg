-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS proced_autor_bono ON procedimento_autorizado CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_proced_autor_bono() RETURNS trigger AS $BODY$
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;

qt_bonus_w		PROCEDIMENTO_AUTORIZADO.QT_BONUS%type;
cd_convenio_w		CONVENIO.CD_CONVENIO%type;
nr_atendimento_w	ATENDIMENTO_PACIENTE.NR_ATENDIMENTO%type;
qt_proc_w 		PROCEDIMENTO_AUTORIZADO.NR_SEQUENCIA%type;
ie_valida_bono_w	CONVENIO.IE_VALIDA_BONO%type;
dt_aprovacao_w		PROCEDIMENTO_AUTORIZADO.DT_APROVACAO%type;
nr_seq_regra_plano_w	REGRA_CONVENIO_PLANO.NR_SEQUENCIA%type;
qt_w                    PROCEDIMENTO_AUTORIZADO.QT_BONUS_APRES%type;

BEGIN
IF (wheb_usuario_pck.get_ie_executar_trigger = 'S') THEN
        SELECT	coalesce(MAX(a.IE_VALIDA_BONO), 'N')
        INTO STRICT 	ie_valida_bono_w
        FROM 	CONVENIO a,
                AUTORIZACAO_CONVENIO b
        WHERE   a.CD_CONVENIO 	= b.CD_CONVENIO
        AND 	b.NR_SEQUENCIA 	= NEW.NR_SEQUENCIA_AUTOR;

        IF (ie_valida_bono_w = 'S') THEN
                BEGIN
                        SELECT  MAX(b.NR_ATENDIMENTO),
                                MAX(b.CD_CONVENIO),
                                COUNT(a.NR_SEQUENCIA) QT_PROC,
                                MAX(a.DT_APROVACAO)
                        INTO STRICT	nr_atendimento_w,
                                cd_convenio_w,
                                qt_proc_w,
                                dt_aprovacao_w
                        FROM	PROCEDIMENTO_AUTORIZADO a,
                                AUTORIZACAO_CONVENIO b
                        WHERE   a.NR_SEQUENCIA_AUTOR 	= b.NR_SEQUENCIA
                        AND 	b.NR_SEQUENCIA 		= NEW.NR_SEQUENCIA_AUTOR
                        AND 	a.CD_PROCEDIMENTO 	= NEW.CD_PROCEDIMENTO
                        AND (a.NR_SEQ_PROC_INTERNO 	IS NULL OR a.NR_SEQ_PROC_INTERNO = coalesce(NEW.NR_SEQ_PROC_INTERNO, 0))
                        AND (a.IE_ORIGEM_PROCED 	IS NULL OR a.IE_ORIGEM_PROCED = coalesce(NEW.IE_ORIGEM_PROCED, 0));

                        REQUIRED_AMOUNT_PROC_BONUS(
                                nr_atendimento_p 	=> nr_atendimento_w,
                                cd_convenio_p 		=> cd_convenio_w,
                                cd_procedimento_p 	=> NEW.CD_PROCEDIMENTO,
                                ie_origem_proced_p	=> NEW.IE_ORIGEM_PROCED,
                                dt_procedimento_p 	=> dt_aprovacao_w,
                                qt_procedimento_p 	=> (CASE WHEN TG_OP = 'INSERT' THEN qt_proc_w + 1 ELSE qt_proc_w END),
                                nr_seq_regra_p 		=> nr_seq_regra_plano_w,
                                qt_bonus_p 		=> qt_bonus_w
                        );

                        NEW.QT_BONUS 		:= qt_bonus_w;
                        NEW.NR_SEQ_REGRA_PLANO := nr_seq_regra_plano_w;
                END;
                if (TG_OP = 'INSERT' or TG_OP = 'UPDATE') then
                        select sum(qt)
                        into STRICT   qt_w
                        from (
                                SELECT sum(a.qt_bonus_apres) qt
                                from   material_autorizado a
                                where  a.nr_sequencia_autor  = NEW.nr_sequencia_autor

union all

                                SELECT sum(b.qt_bonus_apres) qt
                                from   procedimento_autorizado b
                                where  b.nr_sequencia_autor  = NEW.nr_sequencia_autor
                                and b.nr_sequencia <> NEW.nr_sequencia) alias4;
                        
                                qt_w := qt_w + NEW.qt_bonus_apres;
                                update autorizacao_convenio
                                set    qt_bonus_apres = qt_w
                                where  nr_sequencia = NEW.nr_sequencia_autor;
                                commit;
                        ELSE
                                select  coalesce(max(qt_bonus_apres),0)
                                into STRICT    qt_w
                                from    autorizacao_convenio
                                where  nr_sequencia = OLD.nr_sequencia_autor;
                                qt_w := qt_w - coalesce(OLD.qt_bonus_apres,0);
                                update autorizacao_convenio
                                set    qt_bonus_apres = qt_w
                                where  nr_sequencia = OLD.nr_sequencia_autor;
                                commit;
                end if;
        END IF;
END IF;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_proced_autor_bono() FROM PUBLIC;

CREATE TRIGGER proced_autor_bono
	BEFORE INSERT OR UPDATE OR DELETE ON procedimento_autorizado FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_proced_autor_bono();

