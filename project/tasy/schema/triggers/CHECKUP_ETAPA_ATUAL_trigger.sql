-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS checkup_etapa_atual ON checkup_etapa CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_checkup_etapa_atual() RETURNS trigger AS $BODY$
declare

pragma autonomous_transaction;

qt_max_paciente_w 	bigint;
qt_paciente_etapa_w	bigint;
nr_seq_checkup_w 	bigint;
dt_ini_real_w	timestamp;
dt_fim_etapa_w	timestamp;
dt_cancel_etapa_w	timestamp;
nm_paciente_w	varchar(255);

BEGIN

if	(OLD.dt_inicio_real is null AND NEW.dt_inicio_real is not null) then
	BEGIN
	select	count(*)
	into STRICT	qt_paciente_etapa_w
	from	checkup_etapa a
	where	a.nr_seq_etapa = NEW.nr_seq_etapa
	and	a.dt_inicio_real is not null
	and	trunc(a.dt_prevista) between trunc(LOCALTIMESTAMP) and fim_dia(LOCALTIMESTAMP);

	select 	coalesce(a.qt_maxima_paciente,0)
	into STRICT	qt_max_paciente_w
	from  	etapa_checkup a
	where 	a.nr_sequencia = NEW.nr_seq_etapa;

	select	max(a.nr_seq_checkup),
		max(a.dt_inicio_real),
		max(a.dt_fim_etapa),
		max(a.dt_cancelamento)
	into STRICT	nr_seq_checkup_w,
		dt_ini_real_w,
		dt_fim_etapa_w,
		dt_cancel_etapa_w
	from	checkup_etapa a
	where	a.nr_seq_etapa = NEW.nr_seq_etapa
	and	a.dt_inicio_real is not null
	and	trunc(a.dt_prevista) between trunc(LOCALTIMESTAMP) and fim_dia(LOCALTIMESTAMP);

	if (qt_max_paciente_w > 0) and (qt_paciente_etapa_w >= qt_max_paciente_w) and (nr_seq_checkup_w is not null) and (dt_ini_real_w is not null) and (dt_fim_etapa_w is null) and (dt_cancel_etapa_w is null) then
		BEGIN
		select	max(obter_nome_pf(a.cd_pessoa_fisica))
		into STRICT	nm_paciente_w
		from	checkup a
		where	a.nr_sequencia = nr_seq_checkup_w;
		-- Essa etapa esta sendo ocupada pela pelo paciente '|| nm_paciente_w ||'#@#@'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(264554,'NM_PACIENTE_W=' || NM_PACIENTE_W);
		end;
	end if;
	end;
end if;

RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_checkup_etapa_atual() FROM PUBLIC;

CREATE TRIGGER checkup_etapa_atual
	BEFORE INSERT OR UPDATE ON checkup_etapa FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_checkup_etapa_atual();

