-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS execute_dispensary_sector ON dis_regra_local_setor CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_execute_dispensary_sector() RETURNS trigger AS $BODY$
DECLARE
    SUBTYPE one_char                        IS varchar(1);
    SUBTYPE two_char                        IS varchar(2);
    SUBTYPE five_char                       IS varchar(5);
    SUBTYPE eleven_char                     IS varchar(11);
    SUBTYPE thirteen_char                   IS varchar(13);
    SUBTYPE fourteen_char                   IS varchar(14);
    SUBTYPE eighteen_char                   IS varchar(18);
    SUBTYPE twenty_one_char                 IS varchar(21);
    SUBTYPE twenty_two_char                 IS varchar(22);
    SUBTYPE fourty_char                     IS varchar(40);
    SUBTYPE fourty_tree_char                IS varchar(43);
    SUBTYPE two_hundred_fifty_five_char     IS varchar(255);

establishmentCode_w     DIS_REGRA_SETOR.cd_estabelecimento%TYPE;
sectorCode_w            DIS_REGRA_SETOR.cd_setor_atendimento%TYPE;
ds_setor_atendimento_w  setor_atendimento.ds_setor_atendimento%TYPE;
passage_w               setor_atendimento.IE_PERMITE_PASSAGEM_SETOR%TYPE;
operation_w             CONSTANT two_hundred_fifty_five_char := 'I';
customerCode_w          UNIDADE_ATENDIMENTO.nr_seq_interno%TYPE;
number_w                UNIDADE_ATENDIMENTO.cd_unidade_basica%TYPE;
ie_forma_integracao_w   dis_parametros_int.ie_forma_integracao%TYPE;
qt_leitos_w             integer;
contador_w              integer;

c_nr_integration_code CONSTANT integer := 353;
c_nr_one CONSTANT integer := 1;

char_S_c CONSTANT one_char := 'S';
error_code_generic_c CONSTANT integer := -21975;
error_message_generic_c CONSTANT fourty_tree_char := 'Error executing execute_dispensary_sector.';
forma_integracao_B_c CONSTANT dis_parametros_int.ie_forma_integracao%TYPE := 'B';
forma_integracao_M_c CONSTANT dis_parametros_int.ie_forma_integracao%TYPE := 'M';
json_w evolucao_paciente.ds_evolucao%TYPE;
char_A_c CONSTANT one_char := 'A';
json_comma_c CONSTANT one_char := ',';
json_quotation_mark_c CONSTANT one_char := '"';
json_open_bracket_c CONSTANT one_char := '[';
json_closed_bracket_c CONSTANT one_char := ']';
json_open_brace_c CONSTANT one_char := '{';
json_closed_brace_c CONSTANT one_char := '}';
json_establishmentcode_str_c CONSTANT twenty_one_char := '"establishmentcode":';
json_sectorcode_string_c CONSTANT fourteen_char := '"sectorCode":';
json_sectorname_string_c CONSTANT fourteen_char := '"sectorName":';
json_inventory_string_c CONSTANT twenty_two_char := '"inventoryLocalCode":';
json_passage_string_c CONSTANT eleven_char := '"passage":';
json_operation_string_c CONSTANT thirteen_char := '"operation":';
json_customer_string_c CONSTANT eighteen_char := '"customercode":';
json_number_string_c CONSTANT eleven_char := '"number":';
json_groupname_string_c CONSTANT thirteen_char := '"groupName":';

c01 CURSOR FOR
    SELECT

        b.cd_estabelecimento,
        b.cd_setor_atendimento,
        d.DS_SETOR_ATENDIMENTO,
        d.IE_PERMITE_PASSAGEM_SETOR,
        c.nr_seq_interno,
        c.cd_unidade_basica

    FROM DIS_REGRA_SETOR b
         join UNIDADE_ATENDIMENTO c on c.cd_setor_atendimento = b.cd_setor_atendimento
         join SETOR_ATENDIMENTO d on b.cd_setor_atendimento = d.cd_setor_atendimento
    WHERE b.nr_sequencia  = NEW.nr_seq_dis_regra_setor   
    AND c.ie_situacao = char_A_c;
BEGIN
  BEGIN
  IF (wheb_usuario_pck.get_ie_executar_trigger = char_S_c) THEN

    SELECT count(distinct a.nr_sequencia)
    INTO STRICT ie_forma_integracao_w 
    FROM dis_parametros_int a 
    WHERE ie_forma_integracao IN (forma_integracao_M_c, forma_integracao_B_c);
        IF (ie_forma_integracao_w is not null)

    THEN contador_w  := c_nr_one;
        BEGIN
            <<get_ie_forma_integracao>>
                BEGIN

                    SELECT count(distinct c.nr_seq_interno) quantidade
                    INTO STRICT qt_leitos_w
                    FROM DIS_REGRA_SETOR b
                     join UNIDADE_ATENDIMENTO c on  c.cd_setor_atendimento = b.cd_setor_atendimento  
                     join SETOR_ATENDIMENTO d on b.cd_setor_atendimento = d.cd_setor_atendimento
                    WHERE b.nr_sequencia  = NEW.nr_seq_dis_regra_setor
                    AND c.ie_situacao like forma_integracao_M_c;

                EXCEPTION
                        WHEN no_data_found THEN NULL;
                        WHEN too_many_rows THEN RAISE;
                END;

                json_w := json_open_bracket_c;

    OPEN c01;
    <<CURSOR_OPEN>>
        LOOP
            FETCH c01 INTO

                establishmentCode_w,
                sectorCode_w,
                ds_setor_atendimento_w ,
                passage_w ,
                customerCode_w ,
                number_w;

             EXIT CURSOR_OPEN  WHEN c01%notfound;

            BEGIN

                json_w := json_w || json_open_brace_c ||
                json_establishmentcode_str_c || json_quotation_mark_c || establishmentCode_w || json_quotation_mark_c ||  json_comma_c || 
                json_sectorcode_string_c || json_quotation_mark_c || sectorCode_w || json_quotation_mark_c ||  json_comma_c || 
                json_sectorname_string_c || json_quotation_mark_c || ds_setor_atendimento_w || json_quotation_mark_c ||  json_comma_c ||
                json_inventory_string_c  || json_quotation_mark_c || NEW.cd_local_estoque || json_quotation_mark_c ||  json_comma_c ||
                json_passage_string_c || json_quotation_mark_c || passage_w || json_quotation_mark_c ||  json_comma_c ||
                json_operation_string_c || json_quotation_mark_c || operation_w || json_quotation_mark_c ||  json_comma_c ||
                json_customer_string_c || json_quotation_mark_c || customerCode_w || json_quotation_mark_c ||  json_comma_c ||
                json_number_string_c || json_quotation_mark_c || number_w || json_quotation_mark_c ||  json_comma_c ||
                json_groupname_string_c || json_quotation_mark_c || ds_setor_atendimento_w || json_quotation_mark_c || 
                json_closed_brace_c;
                contador_w  := contador_w  + c_nr_one;

            IF (qt_leitos_w >= contador_w ) THEN
                json_w := json_w || json_comma_c;
           END IF;
         END;
     END LOOP LOOP_JSON;
     close c01;
        json_w := json_w || json_closed_bracket_c;
        EXCEPTION
        WHEN no_data_found THEN
            RAISE EXCEPTION '%', error_message_generic_c USING ERRCODE = error_code_generic_c;
        END
;
            CALL execute_bifrost_integration(c_nr_integration_code, json_w);
      END IF;
    END IF;
  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_execute_dispensary_sector() FROM PUBLIC;

CREATE TRIGGER execute_dispensary_sector
	AFTER INSERT ON dis_regra_local_setor FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_execute_dispensary_sector();

