-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atendimento_precaucao_update ON atendimento_precaucao CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atendimento_precaucao_update() RETURNS trigger AS $BODY$
declare

PRAGMA AUTONOMOUS_TRANSACTION;

ie_inativar_alerta_w		varchar(1);
ie_finalizar_alerta_w		varchar(1);
ie_precaucao_isolamento_w	varchar(1);
ie_evolucao_lib_precaucao_w	varchar(3);
ds_texto_w			varchar(4000);
ds_retorno_new_w	varchar(255)	:= null;
ds_retorno_old_w	varchar(255)	:= null;
BEGIN
  BEGIN

if (OLD.nr_seq_motivo_isol <> NEW.nr_seq_motivo_isol) then

	ds_retorno_new_w := obter_dados_motivo_isolamento(NEW.nr_seq_motivo_isol, 'IM');
	ds_retorno_old_w := obter_dados_motivo_isolamento(OLD.nr_seq_motivo_isol, 'IM');

	if (ds_retorno_new_w <> ds_retorno_old_w) then
		if (ds_retorno_new_w <> 'M') then
			delete from atend_precaucao_micro
			where nr_seq_atend_precaucao = OLD.nr_sequencia;
		else
			NEW.cd_microorganismo := null;
		end if;
	end if;
end if;

ie_inativar_alerta_w := obter_param_usuario(44, 168, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_inativar_alerta_w);
ie_finalizar_alerta_w := obter_param_usuario(281, 1399, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_finalizar_alerta_w);
ie_evolucao_lib_precaucao_w := obter_param_usuario(281, 1443, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_evolucao_lib_precaucao_w);

BEGIN
	if (ie_inativar_alerta_w = 'S') and (NEW.dt_final_precaucao        is not null) and (OLD.dt_final_precaucao is null)then
		
		update    atendimento_alerta
		set       dt_inativacao = NEW.dt_final_precaucao,
			  nm_usuario_inativacao = NEW.nm_usuario,
			  ie_situacao = 'I',
			  ds_justificativa = wheb_mensagem_pck.get_texto(307032, null) -- Liberado paciente do isolamento
		where     nr_seq_precaucao = OLD.nr_sequencia
		and	  ie_situacao = 'A';
		
		update	alerta_paciente
		set	dt_inativacao = NEW.dt_final_precaucao,
			nm_usuario_inativacao = NEW.nm_usuario,
			ie_situacao = 'I',
			ds_justificativa = wheb_mensagem_pck.get_texto(307032, null) -- Liberado paciente do isolamento
		where	nr_seq_precaucao = OLD.nr_sequencia
		and	ie_situacao = 'A';
		

	end if;

	if (NEW.dt_termino is not null) and (OLD.dt_termino  is null) then
		
		if (ie_finalizar_alerta_w = 'S') then
			update	atendimento_alerta
			set	dt_fim_alerta = NEW.dt_termino
			where	nr_seq_precaucao = OLD.nr_sequencia
			and	ie_situacao = 'A';
			
			update	alerta_paciente
			set	dt_fim_alerta = NEW.dt_termino
			where	nr_seq_precaucao = OLD.nr_sequencia
			and	ie_situacao = 'A';		
		elsif (ie_finalizar_alerta_w = 'I') then
			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_precaucao_isolamento_w
			from	cih_precaucao
			where	nr_sequencia = OLD.nr_seq_precaucao
			and	coalesce(ie_isolamento,'N') = 'S';
			
			if (ie_precaucao_isolamento_w = 'S') then
				update	atendimento_alerta
				set	dt_fim_alerta = NEW.dt_termino
				where	nr_seq_precaucao = OLD.nr_sequencia
				and	ie_situacao = 'A';
				
				update	alerta_paciente
				set	dt_fim_alerta = NEW.dt_termino
				where	nr_seq_precaucao = OLD.nr_sequencia
				and	ie_situacao = 'A';			
			end if;
		elsif (ie_finalizar_alerta_w = 'P') then
			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_precaucao_isolamento_w
			from	cih_precaucao
			where	nr_sequencia = OLD.nr_seq_precaucao
			and	coalesce(ie_isolamento,'N') = 'S';
			
			if (ie_precaucao_isolamento_w = 'N') then
				update	atendimento_alerta
				set	dt_fim_alerta = NEW.dt_termino
				where	nr_seq_precaucao = OLD.nr_sequencia
				and	ie_situacao = 'A';
				
				update	alerta_paciente
				set	dt_fim_alerta = NEW.dt_termino
				where	nr_seq_precaucao = OLD.nr_sequencia
				and	ie_situacao = 'A';
			end if;
		end if;
	end if;

	if 	(NEW.dt_inativacao is not null AND OLD.dt_inativacao  is null) then
		BEGIN		
		
		update    atendimento_alerta
		set       dt_inativacao = NEW.dt_final_precaucao,
			  nm_usuario_inativacao = NEW.nm_usuario,
			  ie_situacao = 'I',
			  ds_justificativa = wheb_mensagem_pck.get_texto(307032, null)
		where     nr_seq_precaucao = OLD.nr_sequencia
		and	  ie_situacao = 'A';
		
		update    alerta_paciente
		set       dt_inativacao = NEW.dt_final_precaucao,
			  nm_usuario_inativacao = NEW.nm_usuario,
			  ie_situacao = 'I',
			  ds_justificativa = wheb_mensagem_pck.get_texto(307032, null)
		where     nr_seq_precaucao = OLD.nr_sequencia
		and	  ie_situacao = 'A';

		if (NEW.dt_inicio is not null)	then	   	
			NEW.dt_termino := LOCALTIMESTAMP;
		end if;	

		end;
	end if;

exception
	when others then
	null;
end;
-- É NECESSÁRIO DEIXAR ESTA ROTINA NO FINAL POIS HÁ COMMIT


if (ie_evolucao_lib_precaucao_w is not null) and (NEW.dt_liberacao is not null) and (OLD.dt_liberacao  is null) then
	BEGIN
		
	ds_texto_w := wheb_mensagem_pck.get_texto(307027, null) ||': ' ||  substr(obter_descricao_padrao('CIH_PRECAUCAO','DS_PRECAUCAO',NEW.nr_seq_precaucao),1,255); -- Precaução
	ds_texto_w := ds_texto_w || chr(13) || chr(10) || wheb_mensagem_pck.get_texto(307029, null) || ': ' || substr(obter_descricao_padrao('MOTIVO_ISOLAMENTO','DS_MOTIVO',NEW.nr_seq_motivo_isol),1,255); -- Motivo
	ds_texto_w := ds_texto_w || chr(13) || chr(10) || wheb_mensagem_pck.get_texto(111691, null) || ': ' || NEW.ds_observacao; --  Observação
	
	CALL gerar_evolucao_precaucao(ie_evolucao_lib_precaucao_w, NEW.nr_atendimento, ds_texto_w, NEW.cd_medico_solic, NEW.nm_usuario, NEW.nr_sequencia);
	end;
end if;

commit;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atendimento_precaucao_update() FROM PUBLIC;

CREATE TRIGGER atendimento_precaucao_update
	BEFORE UPDATE ON atendimento_precaucao FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atendimento_precaucao_update();

