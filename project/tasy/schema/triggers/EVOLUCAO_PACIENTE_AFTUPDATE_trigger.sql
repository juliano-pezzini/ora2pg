-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS evolucao_paciente_aftupdate ON evolucao_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_evolucao_paciente_aftupdate() RETURNS trigger AS $BODY$
DECLARE

qt_reg_w				smallint;
qt_idade_w				bigint;
cd_estabelecimento_w	bigint;
nr_seq_evento_w			bigint;
ie_evolucao_clinica_w	varchar(3);
nm_usuario_w			varchar(10);
nr_atendimento_w		bigint;
cd_pessoa_fisica_w		varchar(10);
cd_evolucao_w			bigint;
ie_receipt_symptom_w  varchar(10);
json_data_w text;
ds_param_integration_w  varchar(500);

C01 CURSOR FOR
	SELECT	nr_seq_evento
	from	regra_envio_sms
	where	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_evento_disp = 'IEV'
	and (coalesce(cd_tipo_evolucao,ie_evolucao_clinica_w)	= ie_evolucao_clinica_w)
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)	
	and	coalesce(ie_situacao,'A') = 'A';
BEGIN
  BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

	select	coalesce(max(ie_receipt_symptom),'N')
	into STRICT	ie_receipt_symptom_w
	from	tipo_evolucao
	where	cd_tipo_evolucao = NEW.IE_EVOLUCAO_CLINICA;

if (OLD.dt_inativacao is null) and (NEW.dt_inativacao is not null) then
	BEGIN

	qt_idade_w	:= coalesce(obter_idade_pf(OLD.cd_pessoa_fisica,LOCALTIMESTAMP,'A'),0);
	cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;
	nm_usuario_w:= wheb_usuario_pck.get_nm_usuario;
	ie_evolucao_clinica_w	:= OLD.ie_evolucao_clinica;
	nr_atendimento_w		:= OLD.nr_atendimento;
	cd_pessoa_fisica_w		:= OLD.cd_pessoa_fisica;
	cd_evolucao_w			:= OLD.cd_evolucao;	
	open C01;
	loop
	fetch C01 into	
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		BEGIN		
		CALL gerar_evento_paciente(nr_seq_evento_w,nr_atendimento_w,cd_pessoa_fisica_w,null,wheb_usuario_pck.get_nm_usuario,null);		
		end;
	end loop;
	close C01;

	exception
	when others then
		null;
	end;
end if;

if ((OLD.dt_liberacao is null) and (NEW.dt_liberacao is not null) and (ie_receipt_symptom_w = 'S')) then
 BEGIN
    ds_param_integration_w :=  '{"recordId" : "' || NEW.cd_evolucao|| '"' || '}';
    json_data_w := bifrost.send_integration_content('nais.receipt.symptom', ds_param_integration_w, wheb_usuario_pck.get_nm_usuario);
  end;
end if;

if ((OLD.dt_inativacao is null) and (NEW.dt_inativacao is not null) and (ie_receipt_symptom_w = 'S')) then
 BEGIN
    ds_param_integration_w :=  '{"recordId" : "' || NEW.cd_evolucao|| '"' || '}';
    json_data_w := bifrost.send_integration_content('nais.receipt.symptom', ds_param_integration_w, wheb_usuario_pck.get_nm_usuario);
  end;
 end if;
	
<<Final>>
qt_reg_w	:= 0;

  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_evolucao_paciente_aftupdate() FROM PUBLIC;

CREATE TRIGGER evolucao_paciente_aftupdate
	AFTER UPDATE ON evolucao_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_evolucao_paciente_aftupdate();

