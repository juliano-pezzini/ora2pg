-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS rp_pac_modelo_agend_update ON rp_pac_modelo_agendamento CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_rp_pac_modelo_agend_update() RETURNS trigger AS $BODY$
declare
qt_vagas_restantes_w	bigint;
qt_lista_espera_w	bigint;

BEGIN
if	((NEW.DT_FIM_TRATAMENTO is not null) and
	((OLD.DT_FIM_TRATAMENTO <> NEW.DT_FIM_TRATAMENTO) or (OLD.DT_FIM_TRATAMENTO is null))) or
	((NEW.ie_situacao <> OLD.ie_situacao) and (NEW.ie_situacao = 'I') and (NEW.dt_fim_tratamento is null)) then
	qt_vagas_restantes_w	:= Rp_obter_qtd_vaga_restante(NEW.nr_seq_modelo_agendamento) + 1;
	qt_lista_espera_w	:= rp_obter_lista_espera_modelo(NEW.nr_seq_modelo_agendamento);

	insert into rp_log_movto_modelo(
		NR_SEQUENCIA,
		NR_SEQ_MODELO,
		DT_ATUALIZACAO,
		NM_USUARIO,
		DT_ATUALIZACAO_NREC,
		NM_USUARIO_NREC,
		DT_LOG,
		QT_VAGAS_RESTANTES,
		QT_LISTA_ESPERA        )
	values (	nextval('rp_log_movto_modelo_seq'),
		NEW.nr_seq_modelo_agendamento,
		LOCALTIMESTAMP,
		wheb_usuario_pck.get_nm_usuario,
		LOCALTIMESTAMP,
		wheb_usuario_pck.get_nm_usuario,
		LOCALTIMESTAMP,
		qt_vagas_restantes_w,
		qt_lista_espera_w);



elsif	(NEW.nr_seq_modelo_agendamento <> OLD.nr_seq_modelo_agendamento AND NEW.ie_situacao = 'A') or
	((NEW.ie_situacao <> OLD.ie_situacao) and (NEW.ie_situacao = 'A') and (NEW.dt_fim_tratamento is null))	then
	--rp_insert_log_movto_modelo(:new.nr_seq_modelo_agendamento,wheb_usuario_pck.get_nm_usuario);
	qt_vagas_restantes_w	:= Rp_obter_qtd_vaga_restante(NEW.nr_seq_modelo_agendamento) - 1;
	qt_lista_espera_w	:= rp_obter_lista_espera_modelo(NEW.nr_seq_modelo_agendamento);

	insert into rp_log_movto_modelo(
		NR_SEQUENCIA,
		NR_SEQ_MODELO,
		DT_ATUALIZACAO,
		NM_USUARIO,
		DT_ATUALIZACAO_NREC,
		NM_USUARIO_NREC,
		DT_LOG,
		QT_VAGAS_RESTANTES,
		QT_LISTA_ESPERA        )
	values (	nextval('rp_log_movto_modelo_seq'),
		NEW.nr_seq_modelo_agendamento,
		LOCALTIMESTAMP,
		wheb_usuario_pck.get_nm_usuario,
		LOCALTIMESTAMP,
		wheb_usuario_pck.get_nm_usuario,
		LOCALTIMESTAMP,
		qt_vagas_restantes_w,
		qt_lista_espera_w);
end if;

if	(NEW.nr_seq_modelo_agendamento <> OLD.nr_seq_modelo_agendamento AND NEW.ie_situacao = 'A') then
	--rp_insert_log_movto_modelo(:old.nr_seq_modelo_agendamento,wheb_usuario_pck.get_nm_usuario);
	qt_vagas_restantes_w	:= Rp_obter_qtd_vaga_restante(OLD.nr_seq_modelo_agendamento) + 1;
	qt_lista_espera_w	:= rp_obter_lista_espera_modelo(OLD.nr_seq_modelo_agendamento);

	insert into rp_log_movto_modelo(
		NR_SEQUENCIA,
		NR_SEQ_MODELO,
		DT_ATUALIZACAO,
		NM_USUARIO,
		DT_ATUALIZACAO_NREC,
		NM_USUARIO_NREC,
		DT_LOG,
		QT_VAGAS_RESTANTES,
		QT_LISTA_ESPERA        )
	values (	nextval('rp_log_movto_modelo_seq'),
		OLD.nr_seq_modelo_agendamento,
		LOCALTIMESTAMP,
		wheb_usuario_pck.get_nm_usuario,
		LOCALTIMESTAMP,
		wheb_usuario_pck.get_nm_usuario,
		LOCALTIMESTAMP,
		qt_vagas_restantes_w,
		qt_lista_espera_w);
end if;

RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_rp_pac_modelo_agend_update() FROM PUBLIC;

CREATE TRIGGER rp_pac_modelo_agend_update
	AFTER UPDATE ON rp_pac_modelo_agendamento FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_rp_pac_modelo_agend_update();

