-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS unidade_atendimento_aftupdate ON unidade_atendimento CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_unidade_atendimento_aftupdate() RETURNS trigger AS $BODY$
DECLARE

classif_setor_cross_w 	bigint;
ie_existe_w				varchar(1);
ie_existe_regra_w		varchar(1);
ie_integra_w			varchar(1);
bl_enviou_checkout		boolean := false;
nr_resultado_w			integer;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then

	classif_setor_cross_w := obter_classif_setor_cross(NEW.cd_setor_atendimento);

	if (OLD.IE_STATUS_UNIDADE <> NEW.IE_STATUS_UNIDADE) and (NEW.NR_EXTERNO is not null) and (classif_setor_cross_w > 0) then
		
		if (NEW.IE_STATUS_UNIDADE = 'I') then
			-- Bloqueio

			CALL gravar_integracao_cross(279, 'NR_ATENDIMENTO='|| NEW.nr_atendimento || ';NR_SEQ_INTERNO=' || NEW.NR_SEQ_INTERNO ||  ';CD_ESTABELECIMENTO='|| wheb_usuario_pck.get_cd_estabelecimento || ';');
		else
			IF (OLD.IE_STATUS_UNIDADE = 'I') then
				-- Desbloqueio

				CALL gravar_integracao_cross(285, 'NR_ATENDIMENTO='|| NEW.nr_atendimento || ';NR_SEQ_INTERNO=' || NEW.NR_SEQ_INTERNO || ';CD_ESTABELECIMENTO='|| wheb_usuario_pck.get_cd_estabelecimento || ';');
			end if;
		end if;
	end if;

	if (NEW.ie_status_unidade = 'P') and (NEW.nr_atendimento is not null) then	
			
		select	count(*)
		into STRICT	nr_resultado_w
		from 	integra_voice_hcs
		where	ie_evento = 'CI'
		and 	nr_atendimento = NEW.nr_atendimento;
		
		if (nr_resultado_w = 0) then
			bl_enviou_checkout := true;
			
			insert into integra_voice_hcs(NR_SEQUENCIA,
				DT_ATUALIZACAO,
				NM_USUARIO,
				DT_ATUALIZACAO_NREC,
				NM_USUARIO_NREC,
				NR_ATENDIMENTO,
				CD_SETOR_ATEND_ANT,
				CD_UNID_BASIC_ANT,
				CD_UNID_COMPL_ANT,
				CD_SETOR_ATENDIMENTO,
				CD_UNIDADE_BASICA,
				CD_UNIDADE_COMPL,
				IE_STATUS_UNIDADE,
				IE_EVENTO,
				DS_MENSAGEM)
			values (
				nextval('integra_voice_hcs_seq'),
				LOCALTIMESTAMP,
				NEW.nm_usuario,		
				LOCALTIMESTAMP,	
				NEW.nm_usuario,		
				NEW.nr_atendimento,
				null,
				null,
				null,
				NEW.cd_setor_atendimento,
				NEW.cd_unidade_basica,
				NEW.cd_unidade_compl,
				null,
				'CI',
				null);
		end if;
	end if;

	ie_existe_regra_w := obter_regra_voice_hcs(NEW.ie_status_unidade);

	if (OLD.ie_status_unidade <> NEW.ie_status_unidade) and (not bl_enviou_checkout) and (NEW.nm_usuario <> 'VOICEHCS') then

				BEGIN
					select	coalesce('S','N')
					into STRICT ie_existe_w
					from integra_voice_hcs
					where nr_atendimento = NEW.nr_atendimento
					and cd_setor_atendimento = NEW.cd_setor_atendimento
					and cd_unidade_basica = NEW.cd_unidade_basica
					and cd_unidade_compl = NEW.cd_unidade_compl
					and DT_ATUALIZACAO = LOCALTIMESTAMP;	
				exception
				when others then
				ie_existe_w := 'N';
				end;			
					if (ie_existe_w = 'N') then
					
					if (OLD.ie_status_unidade = 'E') and (NEW.ie_status_unidade <> 'E') and (obter_regra_voice_hcs('LM') = 'S') then
					
						insert into integra_voice_hcs(NR_SEQUENCIA,
							DT_ATUALIZACAO,
							NM_USUARIO,
							DT_ATUALIZACAO_NREC,
							NM_USUARIO_NREC,
							NR_ATENDIMENTO,
							CD_SETOR_ATEND_ANT,
							CD_UNID_BASIC_ANT,
							CD_UNID_COMPL_ANT,
							CD_SETOR_ATENDIMENTO,
							CD_UNIDADE_BASICA,
							CD_UNIDADE_COMPL,
							IE_STATUS_UNIDADE,
							IE_EVENTO,
							DS_MENSAGEM)
						values (
							nextval('integra_voice_hcs_seq'),
							LOCALTIMESTAMP,
							NEW.nm_usuario,		
							LOCALTIMESTAMP,	
							NEW.nm_usuario,		
							NEW.nr_atendimento,
							null,
							null,
							null,
							NEW.cd_setor_atendimento,
							NEW.cd_unidade_basica,
							NEW.cd_unidade_compl,
							'LM',
							'RS',
							null);
						end if;
						
					if (OLD.ie_status_unidade = 'O') and (NEW.ie_status_unidade <> 'O') and (obter_regra_voice_hcs('SO') = 'S')  then		
	
						insert into integra_voice_hcs(NR_SEQUENCIA,
								DT_ATUALIZACAO,
								NM_USUARIO,
								DT_ATUALIZACAO_NREC,
								NM_USUARIO_NREC,
								NR_ATENDIMENTO,
								CD_SETOR_ATEND_ANT,
								CD_UNID_BASIC_ANT,
								CD_UNID_COMPL_ANT,
								CD_SETOR_ATENDIMENTO,
								CD_UNIDADE_BASICA,
								CD_UNIDADE_COMPL,
								IE_STATUS_UNIDADE,
								IE_EVENTO,
								DS_MENSAGEM)
							values (
								nextval('integra_voice_hcs_seq'),
								LOCALTIMESTAMP,
								NEW.nm_usuario,		
								LOCALTIMESTAMP,	
								NEW.nm_usuario,		
								NEW.nr_atendimento,
								null,
								null,
								null,
								NEW.cd_setor_atendimento,
								NEW.cd_unidade_basica,
								NEW.cd_unidade_compl,
								'SO',
								'RS',
								null);
					end if;
						
					if (ie_existe_regra_w = 'S') or (ie_existe_regra_w = 'V' and (NEW.ie_status_unidade in ('E','I', 'C'))) then			
						insert into integra_voice_hcs(NR_SEQUENCIA,
								DT_ATUALIZACAO,
								NM_USUARIO,
								DT_ATUALIZACAO_NREC,
								NM_USUARIO_NREC,
								NR_ATENDIMENTO,
								CD_SETOR_ATEND_ANT,
								CD_UNID_BASIC_ANT,
								CD_UNID_COMPL_ANT,
								CD_SETOR_ATENDIMENTO,
								CD_UNIDADE_BASICA,
								CD_UNIDADE_COMPL,
								IE_STATUS_UNIDADE,
								IE_EVENTO,
								DS_MENSAGEM)
							values (
								nextval('integra_voice_hcs_seq'),
								LOCALTIMESTAMP,
								NEW.nm_usuario,		
								LOCALTIMESTAMP,	
								NEW.nm_usuario,		
								NEW.nr_atendimento,
								null,
								null,
								null,
								NEW.cd_setor_atendimento,
								NEW.cd_unidade_basica,
								NEW.cd_unidade_compl,
								NEW.ie_status_unidade,
								'RS',
								null);
					end if;
		end if;
	end if;
end if;
  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_unidade_atendimento_aftupdate() FROM PUBLIC;

CREATE TRIGGER unidade_atendimento_aftupdate
	AFTER UPDATE ON unidade_atendimento FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_unidade_atendimento_aftupdate();

