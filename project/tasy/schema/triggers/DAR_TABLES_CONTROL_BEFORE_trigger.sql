-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS dar_tables_control_before ON dar_tables_control CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_dar_tables_control_before() RETURNS trigger AS $BODY$
declare
   sql_stmt_w          dar_tables_control.ds_sql%type;
   message_w           dar_consist_sql.ds_consistencia%type;
   message_aux_w       varchar(4000);
   nr_posicao_espaco_w bigint;
   nr_posicao_from_w   bigint;
   nr_posicao_where_w  bigint;
   nr_tamanho_string_w bigint;
   nr_qtd_dahsboard_w  bigint;
   ds_tabela_w         varchar(4000);
   lista_tabela_w      lista_varchar_pck.tabela_varchar;
   ds_sql_1_w          varchar(32767);
   ds_sql_2_w          varchar(32767);
   ds_sql_3_w          varchar(32767);
   ds_sql_4_w          varchar(32767);
   qt_tamanho_sql_w    bigint;
BEGIN
  BEGIN

   if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then

      if TG_OP = 'UPDATE' then
         --Se possuir dependencias, nao pode alterar o ds_sql
		 if NEW.ie_manual <> 'Z' then 
			 select count(a.nr_sequencia)
			   into STRICT nr_qtd_dahsboard_w
			   from dar_dashboard a, dar_app b, dar_app_datamodels c
			  where a.nr_seq_app = b.nr_sequencia
				and c.nr_seq_app = b.nr_sequencia
				and c.nr_seq_table_control = NEW.nr_sequencia;
				
			if (nr_qtd_dahsboard_w > 0 ) then
			  CALL wheb_mensagem_pck.exibir_mensagem_abort(1150676);
			end if;
		 else
			NEW.ie_manual := OLD.ie_manual;
		 end if;
      end if;

      delete from dar_consist_sql
       where nr_seq_tab_controle = NEW.nr_sequencia;

      sql_stmt_w := NEW.ds_sql;

      if (coalesce(NEW.IE_MANUAL, 'N') = 'S') then

         NEW.ie_inconsistencia := 'N';

         -- Tamanho em caracteres do sql gerado
         qt_tamanho_sql_w := coalesce(octet_length(sql_stmt_w), 0);

         -- Primeira parte da string
         ds_sql_1_w := substr(sql_stmt_w, 32767, 1);

         -- Segunda parte da string
         if (qt_tamanho_sql_w > 32767) then
            --
            ds_sql_2_w := substr(sql_stmt_w, 32767, 32768);
         end if;
         -- Terceira parte da string
         if (qt_tamanho_sql_w > 65534) then
            -- 
            ds_sql_3_w := substr(sql_stmt_w, 32767, 65535);
         end if;
         -- Quarta parte da string
         if (qt_tamanho_sql_w > 98302) then
            --
            ds_sql_4_w := substr(sql_stmt_w, 32767, 98303);
         end if;

         -- Bloco de exception
         BEGIN
            -- execucao do script de criacao da tabela
            EXECUTE ds_sql_1_w || ds_sql_2_w || ds_sql_3_w ||
                              ds_sql_4_w;
         exception
            when others then
               -- Sql invalido 
               NEW.ie_inconsistencia := 'S';

               select obter_desc_expressao(1032844)
                 into STRICT message_w
;

               message_aux_w := message_w || '  ';

         end;

         nr_posicao_espaco_w    := position('(' in sql_stmt_w);

         if (nr_posicao_espaco_w = 0) then
            nr_posicao_espaco_w := position(')' in sql_stmt_w);
         end if;

         if (nr_posicao_espaco_w > 0) then
            -- Function ou procedure
         
            NEW.ie_inconsistencia := 'S';

            select obter_desc_expressao(1042220) into STRICT message_w;

            message_aux_w := message_aux_w || message_w || '  ';

         end if;

         nr_posicao_espaco_w := position('*' in sql_stmt_w);
         if (nr_posicao_espaco_w > 0) then
            -- Uso de Asterisco
            NEW.ie_inconsistencia := 'S';

            select obter_desc_expressao(1042224) into STRICT message_w;

            message_aux_w := message_aux_w || message_w || '  ';

         end if;

         select position('FROM' in upper(NEW.ds_sql)),
                position('WHERE' in upper(NEW.ds_sql)),
                length(NEW.ds_sql)
           into STRICT nr_posicao_from_w, nr_posicao_where_w, nr_tamanho_string_w
;

         if (nr_posicao_where_w = 0) then
            select trim(substr(NEW.ds_sql,
                               nr_posicao_from_w + 4,
                               nr_tamanho_string_w - (nr_posicao_from_w)))
              into STRICT ds_tabela_w
;
         else
            select trim(substr(NEW.ds_sql,
                               nr_posicao_from_w + 4,
                               nr_posicao_where_w - (nr_posicao_from_w + 5)))
              into STRICT ds_tabela_w
;
         end if;

         if (position(',' in ds_tabela_w) > 0) then
         
            lista_tabela_w := obter_lista_string2(ds_tabela_w, ',');

            for i in 1 .. lista_tabela_w.last loop
               ds_tabela_w := trim(both replace(trim(both lista_tabela_w(i)),
                                           chr(10),
                                           ' '));
               if (position('_V' in upper(ds_tabela_w)) = 0) then
                  -- Uso de tabela sem acesso por view
                  NEW.ie_inconsistencia := 'S';

                  select obter_desc_expressao(1042222)
                    into STRICT message_w
;

                  message_aux_w := message_aux_w || message_w || '  ';

               end if;
            end loop;
         else
            if (position('_V' in upper(ds_tabela_w)) = 0) then
               -- Uso de tabela sem acesso por view
               NEW.ie_inconsistencia := 'S';

               select obter_desc_expressao(1042222)
                 into STRICT message_w
;

               message_aux_w := message_aux_w || message_w || '  ';
            end if;
         end if;

         if (NEW.ie_inconsistencia = 'S') then
         
            insert into dar_consist_sql(nr_sequencia,
                dt_atualizacao,
                nm_usuario,
                nr_seq_tab_controle,
                ds_consistencia,
                nr_seq_sql)
            values (nextval('dar_consist_sql_seq'),
                LOCALTIMESTAMP,
                wheb_usuario_pck.get_nm_usuario,
                NEW.nr_sequencia,
                message_aux_w,
                NEW.nr_seq_sql);
         end if;
      end if;
   end if;
  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_dar_tables_control_before() FROM PUBLIC;

CREATE TRIGGER dar_tables_control_before
	BEFORE INSERT OR UPDATE ON dar_tables_control FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_dar_tables_control_before();

