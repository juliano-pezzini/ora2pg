-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atendimento_monit_resp_upd_bb ON atendimento_monit_resp CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atendimento_monit_resp_upd_bb() RETURNS trigger AS $BODY$
DECLARE

/* Integracao com o sistema blackboard */

json_aux_bb philips_json;
envio_integracao_bb text;
retorno_integracao_bb text;

bb_valueID varchar(32);

integrar_vent_w varchar(1);
integrar_sv_w varchar(1);

BEGIN

integrar_vent_w := OBTER_SE_INTEGRACAO_ATIVA(964, 245);
integrar_sv_w := OBTER_SE_INTEGRACAO_ATIVA(963, 245);

if (wheb_usuario_pck.get_ie_executar_trigger = 'S')  then

  IF (OLD.DT_LIBERACAO is NULL) AND (NEW.DT_LIBERACAO is not NULL) AND (coalesce(NEW.IE_INTEGRACAO, 'N') <> 'S') THEN

      IF (integrar_vent_w = 'S') THEN

        IF (NEW.IE_RESPIRACAO = 'ESPONT') THEN
            bb_valueID := '41289726de804449a70252cbc820c3c7';

        ELSIF (NEW.IE_RESPIRACAO = 'VMNI') OR (NEW.IE_RESPIRACAO = 'BORB') THEN
            bb_valueID := 'f485c826290e48a6a4c86be64c9f4d47';

        ELSIF (NEW.IE_RESPIRACAO = 'VMI') OR (NEW.IE_RESPIRACAO = 'VMIFB') THEN
            bb_valueID := 'e890895cccd84d569462da49c0cdca35';

        ELSE
            bb_valueID := 'e213c60fd7d74093955adaa6a657ae16';

        END IF;

        json_aux_bb := philips_json();
        json_aux_bb.put('typeID', 'CAREPLAN');
        json_aux_bb.put('messageDateTime', TO_CHAR((CURRENT_TIMESTAMP AT TIME ZONE 'UTC'), 'MM-DD-YYYY HH24:MI:SS.SSSSS'));
        json_aux_bb.put('patientHealthSystemStayID', LPAD(COALESCE(TO_CHAR(NEW.NR_ATENDIMENTO), ''), 32, '0'));
        json_aux_bb.put('historyID', LPAD('F' || NEW.NR_SEQUENCIA, 32, '0'));
        json_aux_bb.put('saveDateTimeUtc', TO_CHAR(f_extract_utc_bb(NEW.DT_MONITORIZACAO), 'MM-DD-YYYY HH:MI:SS'));
        json_aux_bb.put('saveDateTimeUtcOffset', '0');
        json_aux_bb.put('groupTypeID', '1f82689907194030876a9f393eade2d9');
        json_aux_bb.put('groupID', LPAD(COALESCE(TO_CHAR(NEW.NR_SEQUENCIA), ''), 32, '0'));
        json_aux_bb.put('valueID', TO_CHAR(bb_valueID));

        dbms_lob.createtemporary(envio_integracao_bb, TRUE);
        json_aux_bb.(envio_integracao_bb);

        SELECT BIFROST.SEND_INTEGRATION_CONTENT('Blackboard_Patient_Ventilation',envio_integracao_bb, wheb_usuario_pck.get_nm_usuario) into STRICT retorno_integracao_bb;
      END IF;

      IF (integrar_sv_w = 'S') THEN

        IF (NEW.QT_FIO2 is not NULL AND NEW.QT_FIO2 > 0) OR
          (NEW.QT_PEEP is not NULL AND NEW.QT_PEEP > 0) OR 
          (NEW.QT_SATURACAO_O2 is not NULL AND NEW.QT_SATURACAO_O2 > 0) OR 
          (NEW.QT_FLUXO_OXIGENIO is not NULL AND NEW.QT_FLUXO_OXIGENIO > 0) OR 
          (NEW.QT_FREQ_RESP is not NULL AND NEW.QT_FREQ_RESP > 0) OR 
          (NEW.QT_VC_PROG is not NULL AND NEW.QT_VC_PROG > 0) THEN
          
          CALL INTEGRAR_SINAIS_VITAIS_RESP_BB(NEW.NR_SEQUENCIA,
              NEW.NR_ATENDIMENTO,
              NEW.DT_MONITORIZACAO,
              NEW.QT_FIO2,
              NEW.QT_PEEP,
              NEW.QT_SATURACAO_O2,
              NEW.QT_FLUXO_OXIGENIO,
              NEW.QT_FREQ_RESP,
              NEW.QT_VC_PROG);

        END IF;
      END IF;
    END IF;

    IF (integrar_vent_w = 'S') THEN
      IF (OLD.dt_inativacao is NULL) AND (NEW.dt_inativacao is not NULL) AND
          (NEW.QT_FREQ_RESP is not NULL AND NEW.QT_FREQ_RESP > 0) THEN
          json_aux_bb := philips_json();
          json_aux_bb.put('typeID', 'CAREPLAN');
          json_aux_bb.put('messageDateTime', TO_CHAR((CURRENT_TIMESTAMP AT TIME ZONE 'UTC'), 'DD/MM/YYYY HH24:MI:SS'));
          json_aux_bb.put('patientHealthSystemStayID', LPAD(TO_CHAR(NEW.NR_ATENDIMENTO), 32, '0'));
          json_aux_bb.put('historyID', LPAD('F' || TO_CHAR(NEW.NR_SEQUENCIA), 32, '0'));
          json_aux_bb.put('saveDateTimeUtc', TO_CHAR((CURRENT_TIMESTAMP AT TIME ZONE 'UTC'), 'YYYY-MM-DD"T"HH24:MI:SS'));
          json_aux_bb.put('saveDateTimeUtcOffset', '0');
          json_aux_bb.put('clearForReadmit', '');

          dbms_lob.createtemporary(envio_integracao_bb, TRUE);
          json_aux_bb.(envio_integracao_bb);

          SELECT BIFROST.SEND_INTEGRATION_CONTENT('Blackboard_Cancel_Ventilation_Status',envio_integracao_bb, wheb_usuario_pck.get_nm_usuario) into STRICT retorno_integracao_bb;
      END IF;
    END IF;

    IF (integrar_sv_w = 'S') THEN
      IF (OLD.dt_inativacao is NULL) AND (NEW.dt_inativacao is not NULL) AND
          ((NEW.QT_FIO2 is not NULL AND NEW.QT_FIO2 > 0) OR 
          (NEW.QT_PEEP is not NULL AND NEW.QT_PEEP > 0) OR 
          (NEW.QT_SATURACAO_O2 is not NULL AND NEW.QT_SATURACAO_O2 > 0) OR 
          (NEW.QT_FLUXO_OXIGENIO is not NULL AND NEW.QT_FLUXO_OXIGENIO > 0) OR 
          (NEW.QT_FREQ_RESP is not NULL AND NEW.QT_FREQ_RESP > 0) OR 
          (NEW.QT_VC_PROG is not NULL AND NEW.QT_VC_PROG > 0)) THEN
          CALL p_cancelar_flowsheet(NEW.nr_sequencia, NEW.nr_atendimento, 'E');
      END IF;
    END IF;
end if;

RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atendimento_monit_resp_upd_bb() FROM PUBLIC;

CREATE TRIGGER atendimento_monit_resp_upd_bb
	AFTER UPDATE ON atendimento_monit_resp FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atendimento_monit_resp_upd_bb();

