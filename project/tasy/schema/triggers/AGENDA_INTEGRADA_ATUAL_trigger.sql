-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_integrada_atual ON agenda_integrada CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_integrada_atual() RETURNS trigger AS $BODY$
DECLARE

cd_profissional_w		varchar(10);
atrib_oldvalue_w		varchar(255);
atrib_newvalue_w		varchar(255);
qt_itens_cons_w			bigint	:= 0;
qt_itens_exame_w		bigint	:= 0;
cd_agenda_w				bigint;
nr_sequencia_w			bigint;
dt_agenda_w				timestamp;
ds_erro_w				varchar(255);
ie_atualiza_medico_req_w	varchar(1);
nr_seq_ageint_item_w		bigint;
nr_seq_agenda_cons_w		agenda_consulta.nr_sequencia%type;
nr_seq_agenda_exame_w		agenda_paciente.nr_sequencia%type;
nm_pessoa_contato       varchar(50);
ie_status_integrada_w		agenda_integrada_status.ie_status_tasy%type;
ie_atualiza_obs_w		varchar(1);
nm_paciente_w			varchar(60);
ie_save_insurance_holder_w	varchar(1);

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_agenda_cons
	from	agenda_integrada_item
	where	nr_seq_agenda_int = NEW.nr_sequencia
	and	ie_tipo_agendamento = 'S'
	and	cd_medico_req <> NEW.cd_medico_solicitante;

C02 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_agenda_exame
	from	agenda_integrada_item
	where	nr_seq_agenda_int = NEW.nr_sequencia
	and	ie_tipo_agendamento = 'E'
	and	cd_medico_req <> NEW.cd_medico_solicitante;

C03 CURSOR FOR
	SELECT	nr_seq_agenda_cons,
			nr_seq_agenda_exame
	from	agenda_integrada_item
	where	nr_seq_agenda_int = NEW.nr_sequencia
	and	ie_tipo_agendamento in ('S','C','E');
BEGIN
  BEGIN

ie_save_insurance_holder_w := obter_parametro_agenda(wheb_usuario_pck.get_cd_estabelecimento, 'IE_SAVE_INSURANCE_HOLDER', 'N');
if (ie_save_insurance_holder_w = 'S') and (NEW.cd_pessoa_fisica is not null) and (NEW.cd_convenio is not null) and
	((coalesce(NEW.cd_convenio, 0) <> coalesce(OLD.cd_convenio, 0)) or (coalesce(NEW.cd_pessoa_fisica, '0') <> coalesce(OLD.cd_pessoa_fisica, '0')) or (coalesce(NEW.cd_categoria, 0) <> coalesce(OLD.cd_categoria, 0)) or (coalesce(NEW.cd_usuario_convenio, '0') <> coalesce(OLD.cd_usuario_convenio, '0'))) then
	CALL insere_atualiza_titular_conv(
				NEW.nm_usuario,
				NEW.cd_convenio,
				NEW.cd_categoria,
				NEW.cd_pessoa_fisica,
				NEW.cd_plano,
				null,
				NEW.dt_validade_carteira,
				NEW.dt_validade_carteira,
				null,
				NEW.cd_usuario_convenio,
				null,
				'N',
				'2');
  end if;

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then

  if (NEW.cd_pessoa_fisica is not null) then
      if (coalesce(NEW.cd_pessoa_fisica,'X') <> coalesce(OLD.cd_pessoa_fisica,'X')) /* Maxwell em 10/Jun/2019 Verificar alteracao do Nome/Codigo  */

         or (coalesce(NEW.nm_paciente,'X') <> coalesce(OLD.nm_paciente,'X'))   then
         /* obter nome pf */


         select   substr(obter_nome_pf(NEW.cd_pessoa_fisica),1,60)
         into STRICT  nm_paciente_w
         from  pessoa_fisica
         where  cd_pessoa_fisica = NEW.cd_pessoa_fisica;
         /* atualizar nome pf */


         NEW.nm_paciente := nm_paciente_w;
      end if;
   end if;


	ie_atualiza_medico_req_w := Obter_Param_Usuario(869, 81, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_atualiza_medico_req_w);

	select 	coalesce(max(ie_atual_obs_agendas),'N')
	into STRICT	ie_atualiza_obs_w
	from	parametro_agenda_integrada
	where	coalesce(cd_estabelecimento,NEW.cd_estabelecimento) = NEW.cd_estabelecimento;

	if	((OLD.cd_convenio is not null AND OLD.cd_convenio	<> NEW.cd_convenio) or
		(OLD.cd_convenio is null AND NEW.cd_convenio is not null)) or
		((OLD.cd_categoria is not null AND OLD.cd_categoria	<> NEW.cd_categoria) or
		(OLD.cd_categoria is null AND NEW.cd_categoria is not null)) or
		((OLD.cd_plano is not null AND OLD.cd_plano	<> NEW.cd_plano) or
		(OLD.cd_plano is null AND NEW.cd_plano is not null)) or
		((OLD.nr_seq_cobertura is not null AND OLD.nr_seq_cobertura	<> NEW.nr_seq_cobertura) or
		(OLD.nr_seq_cobertura is null AND NEW.nr_seq_cobertura is not null)) or
		((OLD.cd_pessoa_fisica is not null AND OLD.cd_pessoa_fisica	<> NEW.cd_pessoa_fisica) or
		(OLD.cd_pessoa_fisica is null AND NEW.cd_pessoa_fisica is not null)) or (coalesce(OLD.ie_tipo_atendimento,-999) <> coalesce(NEW.ie_tipo_atendimento,-999) )
		then
		CALL Calcular_Valor_Proc_Ageint(
				NEW.nr_sequencia,
				NEW.cd_convenio,
				NEW.cd_categoria,
				NEW.cd_estabelecimento,
				NEW.dt_inicio_agendamento,
				NEW.cd_plano,
				NEW.nm_usuario,
				NEW.cd_usuario_convenio,
				NEW.cd_pessoa_fisica,
				NEW.ie_tipo_atendimento,
				NEW.nr_seq_cobertura);
		CALL Calcular_Valor_Proc_Adic(
				NEW.nr_sequencia,
				NEW.cd_convenio,
				NEW.cd_categoria,
				NEW.cd_estabelecimento,
				NEW.dt_inicio_agendamento,
				NEW.cd_plano,
				NEW.nm_usuario,
				NEW.cd_usuario_convenio,
				NEW.cd_pessoa_fisica,
				NEW.ie_tipo_atendimento,
				NEW.nr_seq_cobertura);
		CALL Calcular_Valor_Proc_Lab_Ageint(
				NEW.nr_sequencia,
				NEW.cd_convenio,
				NEW.cd_categoria,
				NEW.cd_estabelecimento,
				NEW.dt_inicio_agendamento,
				NEW.cd_plano,
				NEW.nm_usuario,
				NEW.cd_usuario_convenio,
				NEW.cd_pessoa_fisica,
				NEW.ie_tipo_atendimento,
				null,
				'S');
		NEW.cd_convenio_ant	:= OLD.cd_convenio;
	end if;

	if (OLD.nr_seq_status <> NEW.nr_seq_status) or (OLD.nr_seq_status is null) then
		insert into ageint_historico(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_ageint,
			dt_inicio_agendamento,
			dt_fim_Agendamento,
			nr_Seq_status,
			nm_usuario_hist,
			dt_Atualizacao_hist)
		values (nextval('ageint_historico_seq'),
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			NEW.nr_sequencia,
			NEW.dt_inicio_agendamento,
			NEW.dt_fim_agendamento,
			NEW.nr_seq_status,
			NEW.nm_usuario,
			LOCALTIMESTAMP);
	end if;

	if (NEW.ds_observacao is not null) and
		((OLD.ds_observacao <> NEW.ds_observacao) or (OLD.ds_observacao is null)) then
		BEGIN
			atrib_oldvalue_w := substr(OLD.ds_observacao,1,255);
			atrib_newvalue_w := substr(NEW.ds_observacao,1,255);

			select	count(*)
			into STRICT	qt_itens_cons_w
			from	agenda_integrada_item
			where	nr_seq_agenda_int	= NEW.nr_sequencia
			and		ie_tipo_agendamento	= 'C';

			select	count(*)
			into STRICT	qt_itens_exame_w
			from	agenda_integrada_item
			where	nr_seq_agenda_int	= NEW.nr_sequencia
			and		ie_tipo_agendamento	= 'E';

			if (qt_itens_cons_w > 0)then

				select	a.cd_agenda,
						a.nr_sequencia,
						a.dt_agenda
				into STRICT	cd_agenda_w,
						nr_sequencia_w,
						dt_agenda_w
				from	agenda_consulta a,
						agenda_integrada_item b
				where	a.nr_sequencia 		= b.nr_seq_agenda_cons
				and		b.nr_seq_agenda_int	= NEW.nr_sequencia;

				CALL gerar_agenda_consulta_hist(cd_agenda_w,nr_sequencia_w,'AO',NEW.nm_usuario, wheb_mensagem_pck.get_texto(791452) || ' ' || atrib_oldvalue_w || ' ' || wheb_mensagem_pck.get_texto(791442) || ' ' || atrib_newvalue_w, OLD.cd_pessoa_fisica, OLD.nm_paciente, dt_agenda_w);
			end if;

			if (qt_itens_exame_w > 0)then

				select	a.cd_agenda,
						a.nr_sequencia,
						a.hr_inicio
				into STRICT	cd_agenda_w,
						nr_sequencia_w,
						dt_agenda_w
				from	agenda_paciente a,
						agenda_integrada_item b
				where	a.nr_sequencia 		= b.nr_seq_agenda_exame
				and		b.nr_seq_agenda_int	= NEW.nr_sequencia;

				CALL gerar_agenda_paciente_hist(cd_agenda_w,nr_sequencia_w,'O',NEW.nm_usuario, wheb_mensagem_pck.get_texto(791452) || ' ' || atrib_oldvalue_w || ' ' || wheb_mensagem_pck.get_texto(791442) || ' ' || atrib_newvalue_w, OLD.cd_pessoa_fisica, OLD.nm_paciente, dt_agenda_w, obter_perfil_ativo);
			end if;


			if (ie_atualiza_obs_w = 'S') then
				open C03;
				loop
				fetch C03 into
					nr_seq_agenda_cons_w,
					nr_seq_agenda_exame_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					BEGIN
						if (nr_seq_agenda_cons_w is not null) then
							update	agenda_consulta
							set		ds_observacao = substr(NEW.ds_observacao,1,2000)
							where	nr_sequencia = nr_seq_agenda_cons_w;
						end if;

						if (nr_seq_agenda_exame_w is not null) then
							update	agenda_paciente
							set		ds_observacao = substr(NEW.ds_observacao,1,4000)
							where	nr_sequencia = nr_seq_agenda_exame_w;
						end if;
					end;
				end loop;
				close C03;
			end if;
		exception
		when others then
			ds_erro_w	:= substr(sqlerrm,1,255);
		end;
		end if;

	select	max(cd_pessoa_fisica)
	into STRICT	cd_profissional_w
	from	usuario
	where	nm_usuario	= NEW.nm_usuario;

	select	coalesce(max(ie_status_tasy),'EA')
	into STRICT	ie_status_integrada_w
	from	agenda_integrada_status
	where	nr_sequencia = NEW.nr_seq_status
	and		ie_situacao = 'A';

	if (cd_profissional_w is not null) and (ie_status_integrada_w <> 'AG')then
		NEW.cd_profissional	:= cd_profissional_w;
	end if;

	if (ie_atualiza_medico_req_w = 'S') and (OLD.cd_medico_solicitante is not null) and (NEW.cd_medico_solicitante is not null) and (OLD.cd_medico_solicitante <> NEW.cd_medico_solicitante) then

		open C01;
		loop
		fetch C01 into
			nr_seq_ageint_item_w,
			nr_seq_agenda_cons_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			BEGIN
			update	agenda_integrada_item
			set	cd_medico_req = NEW.cd_medico_solicitante
			where	nr_sequencia = nr_seq_ageint_item_w;

			if (nr_seq_agenda_cons_w is not null) then
				update	agenda_consulta
				set	cd_medico_req = NEW.cd_medico_solicitante
				where	nr_sequencia = nr_seq_agenda_cons_w;
			end if;
			end;
		end loop;
		close C01;

		open C02;
		loop
		fetch C02 into
			nr_seq_ageint_item_w,
			nr_seq_agenda_exame_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			BEGIN
			update	agenda_integrada_item
			set	cd_medico_req 	= NEW.cd_medico_solicitante
			where	nr_sequencia 	= nr_seq_ageint_item_w;

			if (nr_seq_agenda_exame_w is not null) then
				update	agenda_paciente
				set	cd_medico	= NEW.cd_medico_solicitante
				where	nr_sequencia 	= nr_seq_agenda_exame_w;
			end if;
			end;
		end loop;
		close C02;


	end if;


	if (OLD.nm_contato <> NEW.nm_contato) then

		open C03;
		loop
		fetch C03 into
			nr_seq_agenda_cons_w,
			nr_seq_agenda_exame_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			BEGIN
				if (nr_seq_agenda_cons_w is not null) then
					update	agenda_consulta
					set		nm_pessoa_contato = NEW.nm_contato
					where	nr_sequencia = nr_seq_agenda_cons_w;
				end if;

				if (nr_seq_agenda_exame_w is not null) then
					update	agenda_paciente
					set		nm_pessoa_contato = NEW.nm_contato
					where	nr_sequencia = nr_seq_agenda_exame_w;
				end if;

			end;
		end loop;
		close C03;

	end if;

end if;

  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_integrada_atual() FROM PUBLIC;

CREATE TRIGGER agenda_integrada_atual
	BEFORE INSERT OR UPDATE ON agenda_integrada FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_integrada_atual();

