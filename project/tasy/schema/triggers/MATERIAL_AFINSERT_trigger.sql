-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS material_afinsert ON material CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_material_afinsert() RETURNS trigger AS $BODY$
declare

reg_integracao_p           gerar_int_padrao.reg_integracao;
qt_existe_w                bigint;
cd_grupo_material_w        grupo_material.cd_grupo_material%type;
cd_subgrupo_material_w     subgrupo_material.cd_subgrupo_material%type;
ie_padronizado_w           material_estab.ie_padronizado%type;
ie_material_estoque_w      material_estab.ie_material_estoque%type;
nr_doc_externo_w           material_sistema_externo.cd_codigo%type;
nr_seq_estrut_int_w        parametros_farmacia.nr_seq_estrut_int%type;
ie_swisslog_w              varchar(1);
ds_param_integ_hl7_w       varchar(4000) := null;
cd_estabelecimento_w       estabelecimento.cd_estabelecimento%type;
ds_retorno_integracao_w    varchar(4000);
nm_artefato_w              regra_integracao_material.nm_artefato%type;
ie_integra_w               regra_integracao_material.ie_integra%type;

pragma autonomous_transaction;
BEGIN
  BEGIN

cd_estabelecimento_w := obter_estabelecimento_ativo;

select	coalesce(max(a.cd_grupo_material),0)
into STRICT	cd_grupo_material_w
from	grupo_material a,
	subgrupo_material b,
	classe_material c
where	a.cd_grupo_material = b.cd_grupo_material
and	b.cd_subgrupo_material = c.cd_subgrupo_material
and	c.cd_classe_material = NEW.cd_classe_material;
	
select	count(*)
into STRICT	qt_existe_w
from	sup_parametro_integracao a
where	a.ie_evento = 'CM'
and	a.ie_forma = 'E'
and	a.ie_situacao = 'A';

select	coalesce(max(cd_codigo),'')
into STRICT	nr_doc_externo_w
from	material_sistema_externo
where	cd_material = NEW.cd_material
and	ie_sistema = 'OCO';

if (cd_grupo_material_w > 0) then

	select	count(*)
	into STRICT	qt_existe_w
	from	sup_parametro_integracao a,
		sup_int_regra_material b
	where	a.nr_sequencia = b.nr_seq_integracao
	and	a.ie_evento = 'CM'
	and	a.ie_forma = 'E'
	and	a.ie_situacao = 'A'
	and	b.ie_situacao = 'A'
	and	b.cd_grupo_material = cd_grupo_material_w;
end if;

if (qt_existe_w > 0) and (NEW.nm_usuario <> 'INTEGR_TASY') then /*Para nao enviar ao Sapiens um material que acabou de ser importado do Sapiens*/

	
	CALL envia_sup_int_material(
		NEW.cd_material,
		NEW.ds_material,
		NEW.ds_reduzida,
		NEW.cd_material_generico,
		NEW.cd_material_estoque,
		NEW.cd_material_conta,
		NEW.cd_classe_material,
		NEW.cd_unidade_medida_compra,
		NEW.cd_unidade_medida_estoque,
		NEW.cd_unidade_medida_consumo,
		NEW.cd_unidade_medida_solic,
		NEW.qt_conv_compra_estoque,
		NEW.qt_conv_estoque_consumo,
		NEW.qt_minimo_multiplo_solic,
		NEW.ie_prescricao,
		NEW.ie_preco_compra,
		NEW.ie_inf_ultima_compra,
		NEW.ie_consignado,
		NEW.ie_baixa_estoq_pac,
		NEW.ie_tipo_material,
		NEW.ie_padronizado,
		NEW.ie_situacao,
		NEW.ie_obrig_via_aplicacao,
		NEW.ie_receita,
		NEW.ie_cobra_paciente,
		NEW.ie_disponivel_mercado,
		NEW.ie_material_estoque,
		NEW.ie_via_aplicacao,
		NEW.qt_dia_estoque_minimo,
		NEW.qt_dias_validade,
		NEW.qt_dia_interv_ressup,
		NEW.qt_dia_ressup_forn,
		NEW.nr_seq_localizacao,
		NEW.nr_seq_familia,
		NEW.cd_fabricante,
		NEW.cd_sistema_ant,
		NEW.nm_usuario,
		nr_doc_externo_w,
		NEW.ie_catalogo,
		null);
end if;

-- Rotina para envio de materiais para integracao Swisslog

BEGIN
select	nr_seq_estrut_int
into STRICT	nr_seq_estrut_int_w
from	parametros_farmacia
where	cd_estabelecimento = cd_estabelecimento_w;

select	consistir_se_mat_contr_estrut(nr_seq_estrut_int_w,NEW.cd_material)
into STRICT	ie_swisslog_w
;
exception
when others then
	nr_seq_estrut_int_w := 0;
	ie_swisslog_w := 'N';
end;

if (coalesce(ie_swisslog_w,'N') = 'S') and
	((NEW.cd_material <> OLD.cd_material) or (NEW.ds_material <> OLD.ds_material) or (NEW.ds_reduzida <> OLD.ds_reduzida) or (NEW.cd_unidade_medida_consumo <> OLD.cd_unidade_medida_consumo) or (NEW.qt_conversao_mg <> OLD.qt_conversao_mg) or (NEW.cd_unid_med_concetracao <> OLD.cd_unid_med_concetracao)) then
	
	ds_param_integ_hl7_w := 'cd_material=' || NEW.cd_material || obter_separador_bv;
	CALL swisslog_gerar_integracao(438, ds_param_integ_hl7_w);
	
end if;

/*Quando alterar o material, chama a integracao padrao
Ao cadastrar um novo material, tem a chamada da integracao dentro da material_estab apenas*/

if (TG_OP = 'UPDATE') and (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
	reg_integracao_p.ie_operacao		:=	'A';
	reg_integracao_p.cd_estab_documento	:=	wheb_usuario_pck.get_cd_estabelecimento;
	reg_integracao_p := gerar_int_padrao.gravar_integracao('1', NEW.cd_material, NEW.nm_usuario, reg_integracao_p);	
end if;

commit;

if (wheb_usuario_pck.get_nm_usuario is not null and
    obter_valor_param_usuario(132, 121, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento) = 'S') then
	
	select b.cd_subgrupo_material,
	       c.cd_grupo_material,
	       NEW.ie_padronizado,
	       NEW.ie_material_estoque
	into STRICT   cd_subgrupo_material_w,
	       cd_grupo_material_w,
	       ie_padronizado_w,
	       ie_material_estoque_w
	from   classe_material a,
	       subgrupo_material b,
	       grupo_material c
	where  a.cd_subgrupo_material = b.cd_subgrupo_material
	and    b.cd_grupo_material = c.cd_grupo_material
	and    a.cd_classe_material = NEW.cd_classe_material;
	
	if (TG_OP = 'UPDATE') then
	
		select coalesce(max(b.ie_padronizado), max(a.ie_padronizado), ie_padronizado_w),
		       coalesce(max(b.ie_material_estoque), ie_material_estoque_w)
		into STRICT   ie_padronizado_w,
		       ie_material_estoque_w
		from   material a,
		       material_estab b
		where  a.cd_material = b.cd_material
		and    a.cd_material = NEW.cd_material
		and    b.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;
	
	end if;

    select max(nm_artefato),
           coalesce(max(ie_integra),'N')
    into STRICT nm_artefato_w,
         ie_integra_w
    from regra_integracao_material
    where cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento
    and coalesce(cd_grupo_material, cd_grupo_material_w) = cd_grupo_material_w
    and coalesce(cd_subgrupo_material, cd_subgrupo_material_w) = cd_subgrupo_material_w
    and coalesce(cd_classe_material, NEW.cd_classe_material) = NEW.cd_classe_material
    and coalesce(cd_material, NEW.cd_material) = NEW.cd_material
    and ((coalesce(nr_seq_familia, NEW.nr_seq_familia) = NEW.nr_seq_familia) or (nr_seq_familia is null))
    and ((coalesce(ie_estoque,'T') = 'T') or
        ((coalesce(ie_estoque,'T') = 'S') and (ie_material_estoque_w = 'S')) or
        ((coalesce(ie_estoque,'T') = 'N') and (ie_material_estoque_w = 'N')))
    and ((coalesce(ie_padronizado,'T') = 'T') or
        ((coalesce(ie_padronizado,'T') = 'S') and (ie_padronizado_w = 'S')) or
        ((coalesce(ie_padronizado,'T') = 'N') and (ie_padronizado_w = 'N')))
    order by coalesce(cd_material, 0),
             coalesce(nr_seq_familia,0),
             coalesce(cd_classe_material, 0),
             coalesce(cd_subgrupo_material, 0),
             coalesce(cd_grupo_material, 0);
			
	if (nm_artefato_w is not null and ie_integra_w = 'S') then

        ds_retorno_integracao_w := bifrost.send_integration(nm_event => nm_artefato_w,
                                                            nm_javaclass => 'com.philips.tasy.integration.material.outbound.MaterialCallback',
                                                            ds_arguments => to_char(NEW.cd_material),
                                                            nm_user => wheb_usuario_pck.get_nm_usuario);

	end if;

end if;

if (TG_OP = 'INSERT') then
	nm_artefato_w := 'material.added';
else
	nm_artefato_w := 'material.update';
end if;

ds_retorno_integracao_w := bifrost.send_integration(nm_event => nm_artefato_w,
                                                    nm_javaclass => 'com.philips.tasy.integration.material.outbound.MaterialCallback',
                                                    ds_arguments => to_char(NEW.cd_material),
                                                    nm_user => wheb_usuario_pck.get_nm_usuario);

commit;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_material_afinsert() FROM PUBLIC;

CREATE TRIGGER material_afinsert
	AFTER INSERT OR UPDATE ON material FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_material_afinsert();

