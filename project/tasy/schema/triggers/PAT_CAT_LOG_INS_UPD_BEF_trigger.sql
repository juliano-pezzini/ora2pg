-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pat_cat_log_ins_upd_bef ON patient_category_log CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pat_cat_log_ins_upd_bef() RETURNS trigger AS $BODY$
declare

	dt_entrada_w atendimento_paciente.dt_entrada%type;
	qt_error_w smallint:=0;
	qt_overlap_w smallint:=0;
	ie_dt_alta_w    varchar(1) := 'N';
	dt_alta_w       atendimento_paciente.dt_alta%type;
	dt_updated_w  timestamp;

	pragma autonomous_transaction;

BEGIN

		if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
			qt_error_w:=0;
		else

		select obter_data_entrada(NEW.nr_atendimento)
		into STRICT dt_entrada_w
		;

		select OBTER_SE_ATENDIMENTO_ALTA(NEW.nr_atendimento)
		into STRICT ie_dt_alta_w
		;

		select	CASE WHEN OBTER_SE_ATENDIMENTO_ALTA(NEW.nr_atendimento)='S' THEN  dt_alta WHEN OBTER_SE_ATENDIMENTO_ALTA(NEW.nr_atendimento)='N' THEN  LOCALTIMESTAMP END
		into STRICT	dt_alta_w
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento;

		if ( dt_entrada_w is not null and trunc(dt_entrada_w) > trunc(NEW.dt_start_category)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1214545);
		end if;

		if ( ie_dt_alta_w = 'S' and trunc(coalesce(dt_alta_w,LOCALTIMESTAMP)) < trunc(NEW.dt_end_category)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1214546);
		end if;

		if ( trunc(NEW.dt_start_category) > trunc(NEW.dt_end_category)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(355538);
		end if;

		if ( coalesce(trunc(NEW.dt_start_category),trunc(OLD.dt_start_category)) = coalesce(trunc(NEW.dt_end_category),trunc(OLD.dt_end_category))) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1214555); --Category start and end dates should not be same. Please check.
		end if;
	
		if TG_OP = 'INSERT' then
			select case
			   when exists ( select 1
					  from	patient_category_log
					  where nr_atendimento= NEW.nr_atendimento
					  and trunc(NEW.dt_start_category)  between trunc(dt_start_category) and trunc(dt_end_category)-1
					
					)
			   then 1
			   else 0
			   end
			   into STRICT	qt_overlap_w
			;

			if ( qt_overlap_w = 1 and NEW.dt_end_category is not null) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1214551); --Category start date has an overlap with another record. Please check.
			end if;
			
			select case
			   when exists
					( select 1
					  from	patient_category_log a
					  where a.nr_atendimento= NEW.nr_atendimento
					  and trunc(NEW.dt_start_category) > (select max(trunc(b.dt_end_category))
												from	patient_category_log b
												where b.nr_atendimento= NEW.nr_atendimento)
					)
			   then 1
			   else 0
			   end
			   into STRICT	qt_overlap_w
			;

			if ( qt_overlap_w = 1 ) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1214554); --Category start date has a gap with the previous record. Please check.
			end if;
			
		end if;

		if TG_OP = 'UPDATE' then


			if((trunc(OLD.dt_start_category) < trunc(NEW.dt_start_category)) and (trunc(NEW.dt_start_category)<coalesce(trunc(NEW.dt_end_category),trunc(OLD.dt_end_category)) ) and trunc(OLD.dt_start_category) <> trunc(dt_entrada_w))then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1214554);
			end if;

			if (trunc(NEW.dt_start_category)<>trunc(OLD.dt_start_category)) then

				select case
					   when exists ( select 1
							  from	patient_category_log
							  where nr_atendimento= NEW.nr_atendimento
							  and trunc(NEW.dt_start_category)  between trunc(dt_start_category) and trunc(dt_end_category)
							)
					   then 1
					   else 0
					   end
					   into STRICT	qt_overlap_w
					;

				if ( qt_overlap_w = 1 and trunc(OLD.dt_start_category)<>trunc(dt_entrada_w)) then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(1214551);
				end if;
			end if;

			if (trunc(NEW.dt_end_category)<>trunc(OLD.dt_end_category) and NEW.nm_usuario<>'TASY') then
				dt_updated_w:= NEW.dt_end_category;
				select case
				when exists
					( select 1
					  from	patient_category_log a
					  where a.nr_atendimento= NEW.nr_atendimento
					  and trunc(dt_updated_w)< (select max(trunc(b.dt_start_category))
												from	patient_category_log b
												where b.nr_atendimento= NEW.nr_atendimento)
					)
				then 1
				else 0
				end
				into STRICT	qt_overlap_w
				;

				if (qt_overlap_w = 1 ) then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(1214552);
				 end if;
			end if;
		end if;
	end if;
	
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pat_cat_log_ins_upd_bef() FROM PUBLIC;

CREATE TRIGGER pat_cat_log_ins_upd_bef
	BEFORE INSERT OR UPDATE OF dt_start_category,dt_end_category,nr_seq_patient_category_new,nr_atendimento ON patient_category_log FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pat_cat_log_ins_upd_bef();

