-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS paciente_ocorrencia_atual ON paciente_ocorrencia CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_paciente_ocorrencia_atual() RETURNS trigger AS $BODY$
DECLARE
 
cd_estabelecimento_w	smallint;
nr_seq_evento_w		bigint;
cd_setor_paciente_w	bigint;
qt_idade_w		bigint;
qt_reg_w			smallint;
 
C01 CURSOR FOR 
	SELECT	nr_seq_evento 
	from 	regra_envio_sms 
	where	cd_estabelecimento = cd_estabelecimento_w 
	and	ie_evento_disp 	  =	'LO' 
	and	coalesce(NR_SEQ_TIPO_OCORRENCIA,NEW.NR_SEQ_TIPO_OCORRENCIA) = NEW.NR_SEQ_TIPO_OCORRENCIA 
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999) 
	and	coalesce(cd_setor_atendimento,cd_setor_paciente_w)	= cd_setor_paciente_w 
	and	coalesce(ie_situacao,'A') = 'A';
BEGIN
  BEGIN 
qt_idade_w	:= coalesce(obter_idade_pf(NEW.CD_PESSOA_FISICA,LOCALTIMESTAMP,'A'),0);
 
if (wheb_usuario_pck.get_ie_executar_trigger	= 'N') then 
	goto Final;
end if;
 
if (NEW.nr_seq_tipo_ocorrencia is not null) and (NEW.dt_fim is not null) and (OLD.dt_fim is null or OLD.dt_fim <> NEW.dt_fim) 
	then 
		NEW.nm_usuario_termino := wheb_usuario_pck.get_nm_usuario;
end if;
 
if (coalesce(OLD.DT_REGISTRO,LOCALTIMESTAMP + interval '10 days') <> NEW.DT_REGISTRO) and (NEW.DT_REGISTRO is not null) then 
	NEW.ds_utc		:= obter_data_utc(NEW.DT_REGISTRO, 'HV');	
end if;
 
if (coalesce(OLD.DT_LIBERACAO,LOCALTIMESTAMP + interval '10 days') <> NEW.DT_LIBERACAO) and (NEW.DT_LIBERACAO is not null) then 
	NEW.ds_utc_atualizacao	:= obter_data_utc(NEW.DT_LIBERACAO,'HV');
end if;
 
if (NEW.dt_fim is null) and (OLD.dt_fim is not null)then 
	NEW.nm_usuario_termino := '';
end if;
 
if 	(NEW.dt_liberacao is not null AND OLD.dt_liberacao is null) then 
	BEGIN 
		cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
		BEGIN 
		cd_setor_paciente_w	:= obter_setor_atendimento(NEW.nr_atendimento);
		exception 
			when others then 
			null;
		end;
		open C01;
			loop 
			fetch C01 into 
				nr_seq_evento_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				BEGIN 
				CALL gerar_evento_paciente_trigger(nr_seq_evento_w,NEW.nr_atendimento,NEW.cd_pessoa_fisica,null,NEW.nm_usuario,NEW.ds_comentario,NEW.dt_registro);
				end;
			end loop;
		close C01;
	end;
end if;
 
if (NEW.DT_FIM is not null) and (OLD.DT_FIM is null) then 
	NEW.NM_USUARIO_TERMINO := obter_usuario_ativo;
end if;
<<Final>> 
qt_reg_w	:= 0;
 
  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_paciente_ocorrencia_atual() FROM PUBLIC;

CREATE TRIGGER paciente_ocorrencia_atual
	BEFORE INSERT OR UPDATE ON paciente_ocorrencia FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_paciente_ocorrencia_atual();

