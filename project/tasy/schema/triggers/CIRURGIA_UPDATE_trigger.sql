-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS cirurgia_update ON cirurgia CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_cirurgia_update() RETURNS trigger AS $BODY$
DECLARE

dt_entrada_w			timestamp;
dt_inicio_vigencia_w		timestamp := NULL;
cd_agenda_w			bigint;
dt_agenda_w			timestamp;
hr_inicio_w			timestamp;
hr_atual_w			timestamp;
qt_agenda_w			bigint;
cd_pessoa_prescr_w		varchar(10);
nr_seq_proced_niss_w		bigint;
ie_gera_proc_w			varchar(1);
ie_gera_proc_gest_w		varchar(1);
ie_altera_status_agenda_w		varchar(1);

ie_inicio_proc_w			varchar(15);
ie_fim_proc_w			varchar(15);
dt_inicio_w			timestamp;
dt_fim_w				timestamp;
qt_min_cirurgia_w			double precision;
qt_reg_w				smallint;
cd_pessoa_fisica_w		varchar(10);

ie_consiste_medico_w		varchar(1);
ie_permissao_atend_w		varchar(1);
ie_vigencia_w			varchar(1);
cd_pessoa_agenda_w		varchar(10);
cd_classif_setor_w		bigint;
ie_consiste_setor_centro_cir_w  varchar(1);
ds_origem_w			varchar(1800);
ie_grava_log_w			varchar(1);
ds_log_w			varchar(15);
ie_status_agend_futuro_w	bigint;
ie_perm_alter_proc_princ_w	varchar(1) := 'S';	
ie_durac_real_interromper_w	varchar(1);
cd_edicao_amb_w                 integer;
vl_m2_filme_w                   double precision := 0;
dt_cancelamento_w   	timestamp;
cd_setor_cirurgia_w		cirurgia.cd_setor_atendimento%type;
qt_existe_regra_setor_w	bigint;

expressao1_w	varchar(255) := obter_desc_expressao_idioma(284979, null, wheb_usuario_pck.get_nr_seq_idioma);--Cirurgia
expressao2_w	varchar(255) := obter_desc_expressao_idioma(296208, null, wheb_usuario_pck.get_nr_seq_idioma);--Prescricao
expressao3_w	varchar(255) := obter_desc_expressao_idioma(289496, null, wheb_usuario_pck.get_nr_seq_idioma);--Estabelecimento
expressao4_w	varchar(255) := obter_desc_expressao_idioma(295451, null, wheb_usuario_pck.get_nr_seq_idioma);--Perfil
expressao5_w	varchar(255) := obter_desc_expressao_idioma(290509, null, wheb_usuario_pck.get_nr_seq_idioma);--Funcao
expressao6_w	varchar(255) := obter_desc_expressao_idioma(328225, null, wheb_usuario_pck.get_nr_seq_idioma);--Usuario
expressao7_w	varchar(255) := obter_desc_expressao_idioma(320589, null, wheb_usuario_pck.get_nr_seq_idioma);--Interromper cirurgia
expressao8_w	varchar(255) := obter_desc_expressao_idioma(321297, null, wheb_usuario_pck.get_nr_seq_idioma);--Desfazer interrupcao cirurgia
expressao9_w	varchar(255) := obter_desc_expressao_idioma(496838, null, wheb_usuario_pck.get_nr_seq_idioma);--Desfazer cancelamento cirurgia
expressao10_w	varchar(255) := obter_desc_expressao_idioma(497792, null, wheb_usuario_pck.get_nr_seq_idioma);--Geracao da prescricao na cirurgia
expressao11_w	varchar(255) := obter_desc_expressao_idioma(608541, null, wheb_usuario_pck.get_nr_seq_idioma);--Alteracao da duracao real
expressao12_w	varchar(255) := obter_desc_expressao_idioma(773956, null, wheb_usuario_pck.get_nr_seq_idioma);--Alteracao/Vinculo do atendimento
BEGIN
  BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

ds_origem_w	:=	substr(dbms_utility.format_call_stack,1,1800);
ds_origem_w	:=	substr(ds_origem_w ||chr(13)||chr(10)||
			expressao1_w || ' ' ||NEW.nr_cirurgia||chr(13)||chr(10)||
			expressao2_w || ' ' ||NEW.nr_prescricao||chr(13)||chr(10)||
			expressao3_w || ' ' ||NEW.cd_estabelecimento||chr(13)||chr(10)||
			expressao4_w || ' ' ||obter_perfil_ativo||chr(13)||chr(10)||
			expressao5_w || ' ' ||to_char(wheb_usuario_pck.get_cd_funcao)||chr(13)||chr(10)||
			expressao6_w || ' ' ||NEW.nm_usuario,1,1800);
			

ie_altera_status_agenda_w := obter_param_usuario(871, 103, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_altera_status_agenda_w);
ie_gera_proc_w := obter_param_usuario(901, 112, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_gera_proc_w);
ie_gera_proc_gest_w := obter_param_usuario(900, 11, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_gera_proc_gest_w);

ie_vigencia_w := obter_param_usuario(900, 194, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_vigencia_w);

ie_inicio_proc_w := obter_param_usuario(7022, 4, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_inicio_proc_w);
ie_fim_proc_w := obter_param_usuario(7022, 5, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_fim_proc_w);
ie_consiste_medico_w := obter_param_usuario(900, 193, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_consiste_medico_w);
ie_consiste_setor_centro_cir_w := obter_param_usuario(900, 350, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_consiste_setor_centro_cir_w);
ds_log_w := obter_param_usuario(900, 405, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ds_log_w);
ie_status_agend_futuro_w := obter_param_usuario(10000, 31, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_status_agend_futuro_w);

ie_perm_alter_proc_princ_w := obter_param_usuario(900, 507, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_perm_alter_proc_princ_w);
ie_durac_real_interromper_w := obter_param_usuario(900, 514, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_durac_real_interromper_w);
ie_grava_log_w := obter_param_usuario(900, 202, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_grava_log_w);

if (ie_consiste_medico_w = 'S') then
	select	obter_se_assumir_paciente(NEW.cd_medico_cirurgiao, OLD.cd_estabelecimento)
	into STRICT	ie_permissao_atend_w
	;
		
	if (ie_permissao_atend_w = 'N') then		
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192176); --Medico nao possui autorizacao para assumir o paciente! RICHART
	end if;
end if;
						
if	(ie_inicio_proc_w is not null AND ie_fim_proc_w is not null) then
		
	BEGIN
	select	max(a.dt_registro)
	into STRICT	dt_inicio_w
	from	evento_cirurgia b,
		evento_cirurgia_paciente a
	where	a.nr_seq_evento = b.nr_sequencia
	and	b.ie_etapa_cirurgia = campo_numerico(ie_inicio_proc_w)
	and	a.nr_cirurgia = NEW.nr_cirurgia
	and	coalesce(a.ie_situacao,'A') = 'A';	
	exception
	when others then
		dt_inicio_w := null;
	end;
	
	BEGIN
	select	max(a.dt_registro)
	into STRICT	dt_fim_w
	from	evento_cirurgia b,
			evento_cirurgia_paciente a
	where	a.nr_seq_evento = b.nr_sequencia
	and		b.ie_etapa_cirurgia = campo_numerico(ie_fim_proc_w)
	and		a.nr_cirurgia = NEW.nr_cirurgia;
	exception
	when others then
		dt_fim_w := null;
	end;

	if	(dt_inicio_w is not null AND dt_fim_w is not null) then
		qt_min_cirurgia_w	:= Obter_Minutos_Espera(dt_inicio_w, dt_fim_w);	
	else
		qt_min_cirurgia_w	:= NEW.nr_min_duracao_real;
	end if;
else
	qt_min_cirurgia_w	:= NEW.nr_min_duracao_real;	
end if;

if (NEW.cd_medico_cirurgiao <> OLD.cd_medico_cirurgiao) then
	CALL Consistir_impedimento_pf(NEW.cd_medico_cirurgiao,'CIR',NEW.nm_usuario);
end if;

if	(NEW.cd_medico_anestesista is not null AND OLD.cd_medico_anestesista is null) or (NEW.cd_medico_anestesista <> OLD.cd_medico_anestesista) then
	CALL Consistir_impedimento_pf(NEW.cd_medico_anestesista,'CIR',NEW.nm_usuario);
end if;

/* Ricardo - 13/04/2005 - Incluida a rotina abaixo para nao passar a cirurgia para realizada se nao tiver atendimento */


if (NEW.nr_atendimento is null) and (NEW.ie_status_cirurgia = '2') then
	NEW.ie_status_cirurgia	:= '1';
end if;

if (coalesce(OLD.ie_status_cirurgia,'X') <> 'X') and (NEW.ie_status_cirurgia = 4) then
	if (NEW.dt_interrupcao is null) then
		NEW.dt_interrupcao := LOCALTIMESTAMP;
	end if;	
	if (ie_durac_real_interromper_w = 'S') then
		NEW.nr_min_duracao_real := Obter_Min_Entre_Datas(NEW.dt_inicio_real,NEW.dt_interrupcao,null);	
	end if;	
elsif (OLD.ie_status_cirurgia = 4) and (OLD.ie_status_cirurgia <> NEW.ie_status_cirurgia) then
	NEW.dt_interrupcao 		:= null;
	if (ie_durac_real_interromper_w = 'S') then
		NEW.nr_min_duracao_real 	:= null;
	end if;	
end if;

if (ie_grava_log_w = 'S') then
	if (OLD.dt_interrupcao is null) and (NEW.dt_interrupcao is not null) then
		CALL gerar_cirurgia_hist(NEW.nr_cirurgia,'ITC',wheb_usuario_pck.get_nm_usuario,expressao7_w,'N');
	elsif (OLD.dt_interrupcao is not null) and (NEW.dt_interrupcao is null) then
		CALL gerar_cirurgia_hist(NEW.nr_cirurgia,'DTC',wheb_usuario_pck.get_nm_usuario,expressao8_w,'N');
	end if;
	if (OLD.ie_status_cirurgia = 3) and (NEW.ie_status_cirurgia <> 3) then
		CALL gerar_cirurgia_hist(NEW.nr_cirurgia,'DCC',wheb_usuario_pck.get_nm_usuario,expressao9_w,'N');
	end if;
end if;	

if (NEW.dt_termino is not null) and (NEW.dt_inicio_real is null) then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(192182); -- nao e possivel finalizar a cirurgia sem antes iniciar a mesma! RICHART
end if;	

if (NEW.nr_atendimento is null) and (OLD.dt_inicio_real is null) and (NEW.dt_inicio_real is not null) then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(285968); -- nao e possivel iniciar a cirurgia sem informar o atendimento.
end if;	

if (NEW.nr_atendimento is not null) then
	BEGIN

	if (NEW.nr_prescricao is not null) then
		update prescr_medica
		set 	nr_atendimento = NEW.nr_atendimento
		where 	nr_prescricao = NEW.nr_prescricao;
	end if;

	select	dt_entrada
	into STRICT	dt_entrada_w
	from	atendimento_paciente
	where	nr_atendimento	= NEW.nr_atendimento;

	if (NEW.dt_entrada_unidade <> OLD.dt_entrada_unidade) and (NEW.dt_entrada_unidade is not null) and (NEW.dt_entrada_unidade < dt_entrada_w) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192177); -- A data de entrada da cirurgia nao pode ser menor que a data de entrada do paciente! RICHART
	elsif (NEW.dt_inicio_real <> OLD.dt_inicio_real) and (NEW.dt_inicio_real is not null) and (NEW.dt_inicio_real < NEW.dt_entrada_unidade) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192178); -- A data de inicio real nao pode ser menor que a data de entrada! RICHART
	elsif (NEW.dt_inicio_real <> OLD.dt_inicio_real) and (NEW.dt_inicio_real is not null) and (NEW.dt_inicio_real < dt_entrada_w) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192179); --  A data de inicio da cirurgia nao pode ser menor que a data de entrada do paciente! RICHART
	elsif (NEW.dt_termino <> OLD.dt_termino) and (NEW.dt_termino is not null) and (NEW.dt_termino < dt_entrada_w) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192180); -- A data de termino da cirurgia nao pode ser menor que a data de entrada do paciente! RICHART
	elsif (NEW.dt_termino < NEW.dt_inicio_real) and (NEW.dt_termino is not null) and (NEW.dt_inicio_real is not null) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192181);  -- A data de termino dever ser maior que a inicial! RICHART
	elsif	(OLD.dt_interrupcao is null AND NEW.dt_interrupcao is not null) and (NEW.dt_interrupcao < NEW.dt_entrada_unidade) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(236042);  --A data de interrupcao da cirurgia nao pode ser menor que a data de entrada do paciente!
	elsif	(OLD.dt_interrupcao is null AND NEW.dt_interrupcao is not null) and (NEW.dt_interrupcao < NEW.dt_inicio_real) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(236043);  --A data de interrupcao da cirurgia nao pode ser menor que a data de inicio da cirurgia!
	end if;

	/* os13448 em 15/12/2004 Marcus Inclui o MIN() */


	select	MIN(a.dt_inicio_vigencia)
	into STRICT	dt_inicio_vigencia_w
	from	atend_categoria_convenio a
	where	a.nr_atendimento	= NEW.nr_atendimento
	and	a.nr_seq_interno	=
			(SELECT	max(b.nr_seq_interno)
			from		atend_categoria_convenio b
			where		b.nr_atendimento	= NEW.nr_atendimento);

	if (dt_inicio_vigencia_w is not null) and (ie_vigencia_w = 'S') then
		BEGIN
		if (NEW.dt_entrada_unidade <> OLD.dt_entrada_unidade) and (NEW.dt_entrada_unidade is not null) and (NEW.dt_entrada_unidade < dt_inicio_vigencia_w) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(192184); -- A data de entrada da cirurgia nao pode ser menor que a data de inicio da vigencia! RICHART
		elsif (NEW.dt_inicio_real <> OLD.dt_inicio_real) and (NEW.dt_inicio_real is not null) and (NEW.dt_inicio_real < dt_inicio_vigencia_w) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(192185); -- A data de inicio da cirurgia nao pode ser menor que a data de inicio da vigencia! RICHART
		elsif (NEW.dt_termino <> OLD.dt_termino) and (NEW.dt_termino is not null) and (NEW.dt_termino < dt_inicio_vigencia_w) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(192186); -- A data de termino da cirurgia nao pode ser menor que a data de inicio da vigencia! RICHART
		end if;
		end;
	end if;

	/* Ivan em 25/07/2007 OS63637 */


	if	((OLD.dt_termino is null) or (OLD.dt_termino <> NEW.dt_termino)) and (NEW.dt_termino is not null) and (NEW.dt_termino > NEW.dt_inicio_real) then
		BEGIN

		update	atend_paciente_unidade
		set	dt_saida_unidade	= NEW.dt_termino,
			nm_usuario		= NEW.nm_usuario,
			dt_atualizacao		= LOCALTIMESTAMP
		where 	nr_atendimento		= NEW.nr_atendimento
		and	dt_entrada_unidade	= NEW.dt_entrada_unidade;

		end;
	end if;

	end;
end if;

/* Tirei esta linha: 	(:new.dt_termino_prevista is null) */


/* e adicionei (:new.nr_min_duracao_prev <> :old.nr_min_duracao_prev) no if abaixo. Dalcastagne em 31/08/2009 OS 163672 */


if (NEW.dt_inicio_real is not null) and (NEW.nr_min_duracao_prev is not null) then
	NEW.dt_termino_prevista	:= NEW.dt_inicio_real + (NEW.nr_min_duracao_prev / 1440);
end if;


if (coalesce(NEW.ie_status_cirurgia,'X') <> coalesce(OLD.ie_status_cirurgia,'X')) and
	(ie_altera_status_agenda_w = 'S' AND NEW.ie_status_cirurgia = '2') then
	BEGIN
	
	select	coalesce(max(cd_agenda),0),
		max(dt_agenda),
		max(hr_inicio),
		max(cd_pessoa_fisica)
	into STRICT	cd_agenda_w,
		dt_agenda_w,
		hr_inicio_w,
		cd_pessoa_agenda_w
	from	agenda_paciente
	where	nr_cirurgia		= NEW.nr_cirurgia;
	
	select	count(*)
	into STRICT	qt_agenda_w
	from	agenda_paciente
	where	cd_agenda		= cd_agenda_w	
	and	dt_agenda		= dt_agenda_w
	and	hr_inicio		= hr_inicio_w;

	if (qt_agenda_w = 1) then
		update 	agenda_paciente
		set	ie_status_agenda	= 'E'
		where	nr_cirurgia		= NEW.nr_cirurgia;
	end if;

	end;
end if;

if (NEW.nr_prescricao is not null) then
	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_prescr_w
	from	prescr_medica
	where	nr_prescricao = NEW.nr_prescricao;

	if (NEW.cd_pessoa_fisica <> cd_pessoa_prescr_w) and (NEW.dt_entrada_unidade is not null) and (NEW.cd_pessoa_fisica = OLD.cd_pessoa_fisica) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192187); --A pessoa fisica da cirurgia nao e a mesma da prescricao! Entre em contato com o setor de informatica! RICHART
	end if;
end if;

if (NEW.nr_seq_proc_interno is not null) then

	select	coalesce(max(nr_seq_proced_niss),0)
	into STRICT	nr_seq_proced_niss_w
	from	proc_interno
	where	nr_sequencia	=	NEW.nr_seq_proc_interno;

	if (nr_seq_proced_niss_w > 0) then	
		NEW.nr_seq_proced_niss	:= nr_seq_proced_niss_w;
	end if;

end if;

if	((NEW.nr_seq_proc_interno is not null) or (NEW.nr_seq_proced_niss is not null)) and (NEW.nr_min_duracao_real is not null) and (NEW.cd_tipo_cirurgia is not null) and (NEW.ie_asa_estado_paciente is not null) then
	NEW.qt_ric	:= obter_iric(	NEW.ie_asa_estado_paciente,NEW.cd_tipo_cirurgia,NEW.nr_seq_proc_interno,qt_min_cirurgia_w,
					NEW.nr_seq_proced_niss);
end if;


if (NEW.ie_infeccao is not null) then
	update	cih_cirurgia
	set	ie_infeccao		=	NEW.ie_infeccao
	where	nr_seq_cirurgia_pac	=	NEW.nr_cirurgia;
	
end if;


if	(((ie_gera_proc_w = 'S' ) or (ie_gera_proc_gest_w = 'S')) and (NEW.nr_prescricao is not null) and (NEW.dt_entrada_unidade is not null) and (NEW.nr_atendimento is not null))  then	
	CALL gravar_prescr_proc_cir(NEW.nr_prescricao,NEW.cd_procedimento_princ,NEW.ie_origem_proced,NEW.dt_entrada_unidade,
				NEW.nr_atendimento, NEW.nr_seq_proc_interno, NEW.nm_usuario);
end if;

if (NEW.qt_peso is null) and (NEW.nr_atendimento is not null) and (NEW.dt_termino is null) then
	NEW.qt_peso := obter_sinal_vital(NEW.nr_atendimento,'Peso');
end if;

if (OLD.nr_prescricao <> NEW.nr_prescricao) then
	CALL gerar_cirurgia_hist(NEW.nr_cirurgia,'GP',wheb_usuario_pck.get_nm_usuario,expressao10_w,'N');
end if;	

if (OLD.cd_procedimento_princ <> NEW.cd_procedimento_princ) or (OLD.nr_seq_proc_interno <> NEW.nr_seq_proc_interno) or (OLD.ie_origem_proced <> NEW.ie_origem_proced) then
	insert into log_alter_proc_cirurgia(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_atendimento,
		nr_cirurgia,
		nr_prescricao,
		nr_seq_proc,
		nr_seq_proc_interno,
		cd_procedimento,
		ie_origem_proced)
	values (
		nextval('log_alter_proc_cirurgia_seq'),
		LOCALTIMESTAMP,
		NEW.nm_usuario,
		LOCALTIMESTAMP,
		NEW.nm_usuario,
		NEW.nr_atendimento,
		NEW.nr_cirurgia,
		NEW.nr_prescricao,
		null,
		OLD.nr_seq_proc_interno,
		OLD.cd_procedimento_princ,
		OLD.ie_origem_proced);
end if;

if (NEW.cd_pessoa_fisica is not null) and (cd_pessoa_agenda_w is not null) and (NEW.cd_pessoa_fisica <> cd_pessoa_agenda_w) then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(192188); -- As pessoas da cirurgia e do agendamento sao diferentes. Favor verificar. RICHART
end if;

if (NEW.nr_prescricao is not null) then
	Select	coalesce(max(cd_pessoa_fisica),NEW.cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	prescr_medica
	where	nr_prescricao = NEW.nr_prescricao;

	if (NEW.cd_pessoa_fisica <> cd_pessoa_fisica_w) then		
		CALL wheb_mensagem_pck.exibir_mensagem_abort(192189, 'NR_CIRURGIA_P='||to_char(NEW.nr_cirurgia)); --O paciente da cirurgia ' || to_char(:new.nr_cirurgia) || ' nao e o mesmo da prescricao RICHART
	end if;
end if;

-- OS 299680 - Criado parametro para impedir realizar a alteracao na data de entrada, pois a mesma ira pegar outra movimentacao que nao pertence ao centro cirurgico.

if (ie_consiste_setor_centro_cir_w = 'S') and (NEW.nr_atendimento is not null) and (NEW.dt_entrada_unidade is not null) and (OLD.dt_entrada_unidade <> NEW.dt_entrada_unidade) then
	select	max(obter_classif_setor(cd_setor_atendimento))
	into STRICT	cd_classif_setor_w
	from	atend_paciente_unidade
	where	nr_atendimento	 	 = NEW.nr_atendimento
	and	dt_entrada_unidade	 = NEW.dt_entrada_unidade;
	if (cd_classif_setor_w <> 2) then
		 CALL Wheb_mensagem_pck.exibir_mensagem_abort(192190); --nao e possivel alterar o setor da cirurgia! O setor nao pertence ao centro cirirgico.'||chr(13)|| 'Parametro [350] da funcao Gesteo de cirurgias RICHART
	end if;
end if;	

if 	((ie_perm_alter_proc_princ_w = 'N') and (NEW.dt_termino is not null) and
	((OLD.cd_procedimento_princ <> NEW.cd_procedimento_princ) or (OLD.nr_seq_proc_interno <> NEW.nr_seq_proc_interno) or (OLD.ie_origem_proced <> NEW.ie_origem_proced))) then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(231316); -- nao e possivel alterar o procedimento principal de uma cirurgia finalizada. Parametro [507].
end if;

-- RICHART - Coloquei a rotina abaixo pois na O.S. 419404, o cliente solicitou que fosse alterado o status do atendimento futuro assim que fosse informado a data de fim da cirurgia.


if (coalesce(ie_status_agend_futuro_w,0) > 0) and
	((OLD.dt_fim_cirurgia is null AND NEW.dt_fim_cirurgia is not null) or (OLD.dt_termino is null) and (NEW.dt_termino is not null)) then
	CALL atualiza_status_agend_futuro(NEW.nr_cirurgia, NEW.nm_usuario);		
end if;

if (coalesce(OLD.nr_min_duracao_real,0) <> coalesce(NEW.nr_min_duracao_real,0)) then
	CALL gerar_cirurgia_hist(NEW.nr_cirurgia,'ADR',wheb_usuario_pck.get_nm_usuario,expressao11_w,'N');
end if;	

if (coalesce(OLD.nr_atendimento,0) <> coalesce(NEW.nr_atendimento,0)) then
	CALL gerar_cirurgia_hist(NEW.nr_cirurgia,'VA',wheb_usuario_pck.get_nm_usuario,expressao12_w,'N');
end if;	

if (NEW.nr_seq_proc_interno is not null) then

	SELECT * FROM obter_edicao_proc(	NEW.cd_estabelecimento, NEW.cd_convenio, NEW.cd_categoria, LOCALTIMESTAMP, NEW.cd_procedimento_princ, cd_edicao_amb_w, vl_m2_filme_w) INTO STRICT cd_edicao_amb_w, vl_m2_filme_w;

	NEW.cd_procedimento_tuss       :=      define_procedimento_tuss(NEW.cd_estabelecimento,
								   NEW.nr_seq_proc_interno,
								   NEW.cd_convenio,
								   NEW.cd_categoria,
								   obter_tipo_atendimento(NEW.nr_atendimento),
								   LOCALTIMESTAMP,
								   NEW.cd_procedimento_princ,
								   NEW.ie_origem_proced,
								   cd_edicao_amb_w,
								   null,
								   null);
end if;


--OS 975521 - Nao permitir vincular atendimentos cancelados na cirurgia e no agendamento.

if ((OLD.nr_atendimento is null AND NEW.nr_atendimento is not null) or
	((OLD.nr_atendimento is not null) and (NEW.nr_atendimento is not null) and (OLD.nr_atendimento <> NEW.nr_atendimento))) then
	
	select dt_cancelamento
	into STRICT   dt_cancelamento_w
	from   atendimento_paciente
	where  nr_atendimento = NEW.nr_atendimento;

	if (dt_cancelamento_w is not null) then		
		CALL wheb_mensagem_pck.exibir_mensagem_abort(384733, 'NR_ATENDIMENTO_P='||to_char(NEW.nr_atendimento)); --nao sera possivel vincular o atendimento #@nr_atendimento_p#@! Este atendimento esta cancelado.
	end if;
end if;

CALL gravar_log_tasy(5151, ':old.nr_atendimento='|| OLD.nr_atendimento || ';new.nr_atendimento='|| NEW.nr_atendimento, NEW.nr_cirurgia);

if (OLD.nr_atendimento is null) and (NEW.nr_atendimento is not null) then
	
	BEGIN
	select	1
	into STRICT	qt_existe_regra_setor_w
	from	dis_regra_setor
	where	cd_setor_atendimento = NEW.cd_setor_atendimento  LIMIT 1;
	exception
	when others then
		qt_existe_regra_setor_w := 0;
	end;
	
	CALL gravar_log_tasy(5151, ':old.nr_atendimento='|| OLD.nr_atendimento || ';new.nr_atendimento='|| NEW.nr_atendimento || ';cd_setor_cirurgia_w='|| cd_setor_cirurgia_w ||
		';qt_existe_regra_setor_w='||qt_existe_regra_setor_w , NEW.nr_cirurgia);

	if (qt_existe_regra_setor_w > 0) then
		select	max(dt_entrada)
		into STRICT	dt_entrada_w
		from	atendimento_paciente
		where	nr_atendimento = nr_atendimento;
		
		update	int_disp_movt_pac
		set	nr_atendimento = NEW.nr_atendimento,
			dt_entrada = dt_entrada_w,
			dt_leitura  = NULL
		where	nr_cirurgia = NEW.nr_cirurgia;
	end if;	
end if;


<<Final>>

qt_reg_w	:= 0;


  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_cirurgia_update() FROM PUBLIC;

CREATE TRIGGER cirurgia_update
	BEFORE UPDATE ON cirurgia FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_cirurgia_update();

