-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS prescr_medica_aftinsupd ON prescr_medica CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_prescr_medica_aftinsupd() RETURNS trigger AS $BODY$
declare
nr_seq_forma_laudo_w			bigint;
ie_medico_w						varchar(10);
nm_usuario_prescr_w				varchar(15);
ie_status_w						varchar(1) := 'N';
dt_assinatura_medico_w			timestamp;
BEGIN

if (coalesce(NEW.nr_seq_forma_laudo,0) <> coalesce(OLD.nr_seq_forma_laudo,0)) then
	
	select  nextval('forma_laudo_hist_seq')
	into STRICT	nr_seq_forma_laudo_w
	;
	
	insert into forma_laudo_hist(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_forma_laudo_nova,
					nr_seq_forma_laudo_ant,
					nr_prescricao
					)
				values (nr_seq_forma_laudo_w,
					LOCALTIMESTAMP,
					NEW.nm_usuario,
					LOCALTIMESTAMP,
					NEW.nm_usuario,
					NEW.nr_seq_forma_laudo,
					OLD.nr_seq_forma_laudo,
					NEW.nr_prescricao);					
end if;

if (NEW.cd_prescritor	is not null) and	((wheb_assist_pck.get_cd_certificado is not null) or (wheb_assist_pck.get_gerar_sem_certificado = 'S'))then
	ie_medico_w	:= Obter_se_medico(NEW.cd_prescritor,'M');
	
	CALL wheb_assist_pck.set_nr_seq_projeto_ass(1);
	
	if (not wheb_assist_pck.get_se_gera_assinatura) then
		CALL wheb_assist_pck.set_informacoes_usuario(NEW.cd_estabelecimento,NEW.cd_perfil_ativo,NEW.nm_usuario);
	end if;
	
	if (ie_medico_w	= 'S') then
		nm_usuario_prescr_w	:= coalesce(obter_usuario_pf(NEW.cd_prescritor),NEW.nm_usuario);
		if (NEW.dt_liberacao_medico is null) then
			CALL Gerar_registro_pendente_PEP('REP', NEW.nr_prescricao, NEW.cd_pessoa_fisica, NEW.nr_atendimento, nm_usuario_prescr_w,'L',null,null,null,null,null,null,null,null,null,null,null,null,null,obter_funcao_ativa);
		elsif (NEW.dt_liberacao_medico is not null) and (OLD.dt_liberacao_medico is null) then
		 	CALL Gerar_registro_pendente_PEP('XREP', NEW.nr_prescricao, NEW.cd_pessoa_fisica, NEW.nr_atendimento,NEW.nm_usuario,'L',null,null,null,null,null,null,null,null,null,null,null,null,null,obter_funcao_ativa);
		end if;
		
		dt_assinatura_medico_w := obter_data_assinatura_digital(NEW.nr_seq_assinatura);
	
		if (NEW.dt_liberacao_medico is not null) and (OLD.dt_liberacao_medico is null) and (dt_assinatura_medico_w is null) then
			CALL gerar_registro_pendente_pep(
				cd_tipo_registro_p			=> 'REP',
				nr_sequencia_registro_p		=> NEW.nr_prescricao,
				cd_pessoa_fisica_p			=> NEW.cd_pessoa_fisica,
				nr_atendimento_p			=> NEW.nr_atendimento,
				nm_usuario_p				=> NEW.nm_usuario,
				ie_tipo_pendencia_p			=> 'A',
				cd_funcao_pend_p			=> obter_funcao_ativa
			);
		end if;
		
		if (dt_assinatura_medico_w is not null) or (NEW.dt_liberacao_medico is not null AND not wheb_assist_pck.get_se_gera_assinatura) then
			CALL gerar_registro_pendente_pep(
				cd_tipo_registro_p			=> 'XREP',
				nr_sequencia_registro_p		=> NEW.nr_prescricao,
				cd_pessoa_fisica_p			=> NEW.cd_pessoa_fisica,
				nr_atendimento_p			=> NEW.nr_atendimento,
				nm_usuario_p				=> NEW.nm_usuario,
				ie_tipo_pendencia_p			=> 'A',
				cd_funcao_pend_p			=> obter_funcao_ativa
			);
		end if;
	end if;
	
	if (NEW.dt_liberacao is not null)
	and (OLD.dt_liberacao is null) then
		if (obter_data_assinatura_digital(NEW.nr_seq_assinatura_enf) is null) and
			(((obter_se_usuario_medico(NEW.nm_usuario_lib_enf) = 'N') and (coalesce(NEW.ie_prescr_emergencia,'N') <> 'S')) or (wheb_assist_pck.get_se_gera_assinatura and wheb_assist_pck.get_cd_certificado is not null and wheb_assist_pck.obterParametroFuncao(924,11) = 'S'))then
			CALL Gerar_registro_pendente_PEP('REP',NEW.nr_prescricao, NEW.cd_pessoa_fisica, NEW.nr_atendimento,NEW.nm_usuario, 'A',null,null,null,null,null,null,null,null,null,null,null,null,null,obter_funcao_ativa);
		end if;
	end if;
	
	if (obter_data_assinatura_digital(NEW.nr_seq_assinatura_enf) is not null) or
		(NEW.dt_liberacao is not null AND not wheb_assist_pck.get_se_gera_assinatura) or
		((trunc(NEW.dt_liberacao,'mi') = trunc(NEW.dt_liberacao_medico,'mi')) and (NEW.dt_liberacao is not null) and (NEW.dt_liberacao_medico is not null) and (not wheb_assist_pck.get_se_gera_assinatura)) then
		CALL Gerar_registro_pendente_PEP('XREP',NEW.nr_prescricao, NEW.cd_pessoa_fisica, NEW.nr_atendimento,NEW.nm_usuario, 'A',null,null,null,null,null,null,null,null,null,null,null,null,null,obter_funcao_ativa);
	end if;
end if;

/* Desvincular a prescricao e o atendimento da prevenda, quando suspende */


if (OLD.dt_suspensao is null) and (NEW.dt_suspensao is not null) then
	
	update	pre_venda_item
	set	nr_atendimento  = NULL,
		nr_prescricao  = NULL,
		nr_seq_interno  = NULL
	where	nr_prescricao = NEW.nr_prescricao;
end if;

RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_prescr_medica_aftinsupd() FROM PUBLIC;

CREATE TRIGGER prescr_medica_aftinsupd
	AFTER INSERT OR UPDATE ON prescr_medica FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_prescr_medica_aftinsupd();

