-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS laudo_paciente_imp_trigger ON laudo_paciente_imp CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_laudo_paciente_imp_trigger() RETURNS trigger AS $BODY$
declare
cd_setor_registro		bigint;
nr_laudo_w			bigint;
ds_email_origem_w		varchar(1000);
ds_email_destino_w		varchar(1000);
nm_pessoa_fisica_w		varchar(255);
nm_usuario_envio_email_w	varchar(255);
 
 
C01 CURSOR FOR 
	SELECT b.cd_setor_registro 
	from laudo_paciente a, 
	   laudo_paciente_loc b 
	where a.nr_sequencia = NEW.nr_seq_laudo 
	and  a.nr_sequencia = b.nr_sequencia 
	and  b.dt_retirada is null 
	order by 1;
	 
C02 CURSOR FOR 
	SELECT 	ds_email, 
		nm_usuario_envio_email 
	from  	regra_laudo_loc_email 
	where 	cd_setor_atendimento = cd_setor_registro 
	order by 1;
 
BEGIN 
nm_pessoa_fisica_w := obter_nome_pf(NEW.cd_pessoa_fisica);
 
select 	max(nr_laudo) 
into STRICT	nr_laudo_w 
from 	laudo_paciente 
where 	nr_sequencia = NEW.nr_seq_laudo;
 
 
if (nr_laudo_w is not null) then 
 
	open C01;
	loop 
	fetch C01 into	 
		cd_setor_registro;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		BEGIN 
 
		open C02;
		loop 
		fetch C02 into	 
			ds_email_destino_w, 
			nm_usuario_envio_email_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			BEGIN 
			 
			select 	ds_email 
			into STRICT	ds_email_origem_w 
			from 	usuario 
			where 	nm_usuario like nm_usuario_envio_email_w;
			 
			CALL enviar_email(	wheb_mensagem_pck.get_texto(305917,'NR_LAUDO_W='||nr_laudo_w), --'Nova solicitação para o laudo ' || nr_laudo_w, 
					wheb_mensagem_pck.get_texto(305922,'NR_LAUDO_W='||nr_laudo_w||';NM_PESSOA_FISICA_W='||nm_pessoa_fisica_w), /*'Para o laudo ' || nr_laudo_w || ' do paceinte '|| nm_pessoa_fisica_w || ' foi gerado uma nova solicitação de impressão.',*/ 
					ds_email_origem_w, 
					ds_email_destino_w, 
					nm_usuario_envio_email_w, 
					'M');
			end;
		end loop;
		close C02;
		end;
	end loop;
	close C01;	
	 
	 
 
end if;
 
 
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_laudo_paciente_imp_trigger() FROM PUBLIC;

CREATE TRIGGER laudo_paciente_imp_trigger
	AFTER INSERT ON laudo_paciente_imp FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_laudo_paciente_imp_trigger();

