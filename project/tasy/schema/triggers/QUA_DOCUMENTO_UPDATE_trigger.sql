-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS qua_documento_update ON qua_documento CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_qua_documento_update() RETURNS trigger AS $BODY$
declare
cd_pessoa_fisica_w	varchar(10);
cd_cargo_w		bigint;
ie_permite_aprov_w		varchar(1);
qt_registro_w		integer;
qt_reg_w			smallint;
cd_cargo_pf_aprov_w	bigint;
 
C01 CURSOR FOR 
	SELECT	cd_pessoa_fisica, 
		cd_cargo 
	from	qua_tipo_doc_aprov 
	where	nr_seq_tipo_doc = NEW.nr_seq_tipo;
BEGIN
  BEGIN 
if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then 
	goto Final;
end if;
ie_permite_aprov_w	:= 'N';
 
if (NEW.dt_aprovacao is not null) and (OLD.dt_aprovacao is null) and (NEW.nr_seq_superior is null) then 
	BEGIN 
 
	select	count(*) 
	into STRICT	qt_registro_w 
	from	qua_tipo_doc_aprov a 
	where (a.cd_pessoa_fisica is not null 
		or a.cd_cargo is not null) 
	and not exists (	SELECT	1 
			from	qua_tipo_doc_aprov x 
			where	a.nr_seq_tipo_doc = x.nr_seq_tipo_doc 
			and	x.cd_pessoa_fisica is null 
			and	x.cd_cargo is null) 
	and	a.nr_seq_tipo_doc = NEW.nr_seq_tipo;
	 
	if (qt_registro_w > 0) then 
		BEGIN 
		 
		BEGIN 
		select	cd_cargo 
		into STRICT	cd_cargo_pf_aprov_w 
		from	pessoa_fisica 
		where	cd_pessoa_fisica = NEW.cd_pessoa_aprov;
		exception 
		when others then 
			cd_cargo_pf_aprov_w := null;
		end;
			 
		open C01;
		loop 
		fetch C01 into 
			cd_pessoa_fisica_w, 
			cd_cargo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			BEGIN 
			if (NEW.cd_pessoa_aprov = coalesce(cd_pessoa_fisica_w,'0')) or (cd_cargo_pf_aprov_w = coalesce(cd_cargo_w,'0')) then 
				ie_permite_aprov_w	:= 'S';
			end if;
			end;
		end loop;
		close C01;
		 
		select	count(*) 
		into STRICT	qt_registro_w 
		from	qua_doc_aprov 
		where	nr_seq_doc = NEW.nr_sequencia;
		 
		if (qt_registro_w > 0) then 
			BEGIN 
			if (ie_permite_aprov_w = 'N') then 
				BEGIN 
				select	'S' 
				into STRICT	ie_permite_aprov_w 
				from	qua_doc_aprov a 
				where	a.cd_cargo is not null 
				and	a.dt_aprovacao is not null 
				and	a.nr_seq_doc = NEW.nr_sequencia 
				and	a.cd_cargo = substr(Obter_Dados_Usuario_Opcao(NEW.nm_usuario,'R'),1,10) 
				and exists (	SELECT	1 
						from	qua_tipo_doc_aprov b 
						where	a.cd_cargo = b.cd_cargo 
						and	b.cd_cargo is not null 
						and	b.nr_seq_tipo_doc = NEW.nr_seq_tipo)  LIMIT 1;
				exception 
				when others then 
					ie_permite_aprov_w := 'N';
				end;
			end if;
			 
			if (ie_permite_aprov_w = 'N') then 
				BEGIN 
				select	'S' 
				into STRICT	ie_permite_aprov_w 
				from	qua_doc_aprov a 
				where	a.cd_setor_atendimento is not null 
				and	a.dt_aprovacao is not null 
				and	a.nr_seq_doc 		= NEW.nr_sequencia 
				and	a.cd_setor_atendimento 	= substr(Obter_Dados_Usuario_Opcao(NEW.nm_usuario,'S'),1,10) 
				and exists (	SELECT	1 
						from	qua_tipo_doc_aprov b 
						where	a.cd_cargo = b.cd_cargo 
						and	b.cd_cargo is not null 
						and	b.nr_seq_tipo_doc = NEW.nr_seq_tipo)  LIMIT 1;
				exception 
				when others then 
					ie_permite_aprov_w := 'N';
				end;
			end if;
			end;
		end if;
		 
		if (ie_permite_aprov_w = 'N') then 
			CALL wheb_mensagem_pck.EXIBIR_MENSAGEM_ABORT(188032);
		end if;
		end;
	end if;		
	end;
end if;
 
if (OLD.ie_situacao <> NEW.ie_situacao) then 
	BEGIN 
	if (NEW.ie_situacao = 'I') then 
		NEW.dt_inativacao 		:= LOCALTIMESTAMP;
		NEW.nm_usuario_inativacao	:= NEW.nm_usuario;
		 
		delete from qms_treinamento_cargo 
		where nr_seq_documento = NEW.nr_sequencia;
	else 
		NEW.dt_inativacao 		:= null;
		NEW.nm_usuario_inativacao	:= '';
	end if;
	end;
end if;
 
if (OLD.ie_status <> NEW.ie_status) then 
	BEGIN 
	if (NEW.ie_status = 'T') then 
		BEGIN 
		NEW.dt_solic_treinamento	:= LOCALTIMESTAMP;
		NEW.nm_usuario_solic_trein	:= NEW.nm_usuario;
		end;
	else 
		BEGIN 
		NEW.dt_solic_treinamento	:= null;
		NEW.nm_usuario_solic_trein	:= '';
		end;
	end if;
	end;
end if;
 
<<Final>> 
qt_reg_w	:= 0;
 
  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_qua_documento_update() FROM PUBLIC;

CREATE TRIGGER qua_documento_update
	BEFORE UPDATE ON qua_documento FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_qua_documento_update();

