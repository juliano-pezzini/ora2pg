-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_paciente_update ON agenda_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_paciente_update() RETURNS trigger AS $BODY$
declare

atrib_oldvalue_w		varchar(255);
atrib_newvalue_w		varchar(255);
ie_pf_w				varchar(1) := 'N';
qt_agenda_escala_w		bigint;
ie_permite_cancelamento_w	varchar(1);
ie_alterar_cod_proc_cirurgia_w	varchar(1);
nr_seq_tipo_w			bigint;
ie_autor_agenda_gerada_w	varchar(2);
ie_possui_plano_w    		varchar(1);
ie_gerar_solic_pront_gp_w		varchar(1);
ie_atualiza_medico_w		varchar(1);
cd_pessoa_cirurgia_w		varchar(10);
ie_gerar_solic_pront_w		varchar(1);
cd_tipo_agenda_w			bigint;
ds_historico_w			varchar(2000);
ie_atualiza_hr_agendamento_w	varchar(1);
dt_hr_inicio_antes_w		timestamp;
dt_hr_inicio_depois_w		timestamp;
ie_altera_status_livre_w	varchar(1);
ie_trocar_convenio_autor_w	varchar(1);
ds_log_w			varchar(2000);
nr_prescricao_w			bigint;
nr_seq_agenda_w		    agenda_paciente.nr_sequencia%type;
ie_atualiza_anestesia_w		varchar(1);
ie_existe_autor_w		varchar(15);
ds_origem_w			varchar(2000);
ie_cancelar_se_autorizada_w	varchar(15) := 'S';
ie_restringe_vincular_atend_w	varchar(1);
nr_atendimento_cirurgia_w	bigint;
dt_agenda_w			timestamp;
qt_idade_w			bigint;
ie_permite_w			varchar(1) := 'S';
ie_idade_proc_interno_w		varchar(1);
ie_tipo_atendimento_w		smallint;
ds_log_usuario_orig_w		varchar(2000);
nr_status_atend_futuro_w	varchar(10);
ie_status_agenda_confirmado_w	varchar(3);
nr_seq_fila_espera_w		bigint;
ie_atualiza_fila_espera_w	varchar(1);
ie_funcao_ativa_w			bigint;
cd_perfil_w			integer;
cd_estabelecimento_w		integer;
nm_usuario_w			varchar(15);
ie_atendimento_w		varchar(15);
cd_pessoa_fisica_w		varchar(10);
qt_existe_autor_pf_w		bigint := 0;
nr_seq_pac_senha_fila_w		bigint;
ie_carater_data_atual_w		varchar(10);
dt_cancelamento_w           		timestamp;
count_w						bigint;
atrib_oldvalue_obs_w		varchar(900);
atrib_newvalue_obs_w		varchar(900);
ds_retorno_integracao_w 	varchar(4000);
ie_surgeon_preschedule_w             varchar(10);
ie_perm_alterar_pac_w		varchar(10);
BEGIN
  BEGIN

BEGIN
NEW.dt_atualizacao := LOCALTIMESTAMP;

if (not wheb_usuario_pck.get_nm_usuario is null) then
	NEW.nm_usuario := wheb_usuario_pck.get_nm_usuario;
end if;
exception
when others then
	ds_origem_w := '';
end;

/*
Luciano ajustou a forma de obter os parametros.
*/

cd_perfil_w		:= wheb_usuario_pck.get_cd_perfil;
cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;
nm_usuario_w		:= wheb_usuario_pck.get_nm_usuario;

/*
Luciano ajustou a forma de obter os parametros.
*/

ie_alterar_cod_proc_cirurgia_w := Obter_Param_Usuario(871, 222, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_alterar_cod_proc_cirurgia_w);
nr_seq_tipo_w := Obter_Param_Usuario(871, 245, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, nr_seq_tipo_w);
ie_atualiza_medico_w := Obter_Param_Usuario(871, 293, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_atualiza_medico_w);
ie_atualiza_hr_agendamento_w := Obter_Param_Usuario(871, 353, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_atualiza_hr_agendamento_w);
ie_altera_status_livre_w := Obter_Param_Usuario(871, 364, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_altera_status_livre_w);
ie_trocar_convenio_autor_w := Obter_Param_Usuario(871, 377, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_trocar_convenio_autor_w);
ie_atualiza_anestesia_w := Obter_Param_Usuario(871, 572, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_atualiza_anestesia_w);
ie_cancelar_se_autorizada_w := Obter_Param_Usuario(871, 616, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_cancelar_se_autorizada_w);
ie_restringe_vincular_atend_w := Obter_Param_Usuario(871, 673, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_restringe_vincular_atend_w);
ie_idade_proc_interno_w := Obter_Param_Usuario(871, 682, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_idade_proc_interno_w);
ie_atualiza_fila_espera_w := Obter_Param_Usuario(871, 740, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_atualiza_fila_espera_w);
nr_status_atend_futuro_w := Obter_Param_Usuario(10000, 3, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, nr_status_atend_futuro_w);
ie_status_agenda_confirmado_w := Obter_Param_Usuario(870, 24, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_status_agenda_confirmado_w);
ie_atendimento_w := obter_param_usuario(871, 84, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_atendimento_w);
ie_carater_data_atual_w := obter_param_usuario(871, 785, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_carater_data_atual_w);
ie_perm_alterar_pac_w := obter_param_usuario(820, 128, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_perm_alterar_pac_w);
/*
Luciano ajustou a forma de obter os parametros.
*/


ie_funcao_ativa_w	:= obter_funcao_ativa;

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then

  ds_log_w := substr(	WHEB_MENSAGEM_PCK.get_texto(457149, 'obter_funcao_ativa='||obter_funcao_ativa||';call_stack='||dbms_utility.format_call_stack),1,1500);

	BEGIN
	if (obter_tipo_agenda(NEW.cd_agenda) = 1) and
		(to_char(NEW.dt_agenda,'dd/mm/yyyy hh24:mi:ss') <> (to_char(NEW.dt_agenda,'dd/mm/yyyy') || ' 00:00:00')) then
		NEW.dt_agenda := to_date(to_char(NEW.dt_agenda,'dd/mm/yyyy') || ' 00:00:00','dd/mm/yyyy hh24:mi:ss');
	end if;
	exception
	when others then
		ds_origem_w := '';
	end;

	if (NEW.nr_minuto_duracao > 4320) then
		--Atencao, verifique a duracao da agenda, a mesma nao deve ultrapassar 4320 minutos.

		CALL wheb_mensagem_pck.exibir_mensagem_abort(184547);
	end if;


	select	coalesce(max(ie_gerar_solic_pront_gp), 'N'),
		coalesce(max(ie_gerar_solic_pront), 'N'),
		max(cd_tipo_agenda)
	into STRICT	ie_gerar_solic_pront_gp_w,
		ie_gerar_solic_pront_w,
		cd_tipo_agenda_w
	from	agenda
	where 	cd_agenda = NEW.cd_agenda;

	if (NEW.cd_pessoa_fisica is not null) and (coalesce(NEW.cd_pessoa_fisica,'X') <> coalesce(OLD.cd_pessoa_fisica,'X')) and (NEW.ie_status_agenda <> 'C') and (ie_gerar_solic_pront_gp_w = 'S') then

		CALL Gerar_Solic_Pront_Agenda_pac(NEW.cd_pessoa_fisica, NEW.nr_sequencia,NEW.cd_agenda, NEW.dt_agenda, NEW.nm_usuario);

	end if;

	if (NEW.DT_VALIDADE_CARTEIRA is not null) and (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.DT_VALIDADE_CARTEIRA) < to_date('01/01/1900','dd/mm/yyyy')) then
		NEW.DT_VALIDADE_CARTEIRA := null;
	end if;

	if (NEW.cd_pessoa_fisica is not null) and /*tbschulz OS208173 - gerar solicitacao interna de prontuario (CIP) para agenda de exame*/

		(coalesce(NEW.cd_pessoa_fisica,'X') <> coalesce(OLD.cd_pessoa_fisica,'X')) and (NEW.ie_status_agenda <> 'C') and (ie_gerar_solic_pront_w = 'S') and (cd_tipo_agenda_w = 2) then

		CALL Gerar_Solic_Pront_Agenda(NEW.cd_pessoa_fisica, NEW.nr_sequencia,NEW.cd_agenda, NEW.dt_agenda, NEW.nm_usuario);

	end if;

	if (NEW.cd_plano is not null) then

		select 	coalesce(max('S'),'N')
		into STRICT	ie_possui_plano_w
		from	convenio_plano
		where	cd_convenio = NEW.cd_convenio
		and		cd_plano    = NEW.cd_plano;

		if (ie_possui_plano_w = 'N') then
			NEW.cd_plano := null;
		end if;
	end if;

	if (OLD.cd_convenio is not null) and (NEW.cd_convenio is not null) and (NEW.cd_convenio <> OLD.cd_convenio) then

		if (coalesce(ie_trocar_convenio_autor_w,'N') = 'S') then

			update 	autorizacao_convenio
			set 	cd_convenio 	= NEW.cd_convenio
			where	nr_seq_agenda	= NEW.nr_sequencia;

		elsif (coalesce(ie_trocar_convenio_autor_w,'N') = 'C')  then

			update 	autorizacao_convenio
			set 	nr_seq_estagio 	= (	SELECT	max(nr_sequencia)
							from	estagio_autorizacao
							where 	ie_interno = '70'
							and	coalesce(ie_situacao,'A') = 'A'
							and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa),
				dt_atualizacao	= LOCALTIMESTAMP,
				nm_usuario	= NEW.nm_usuario
			where	nr_seq_agenda	= NEW.nr_sequencia;

		end if;
	end if;

	if (NEW.ie_status_agenda = 'L') and (OLD.ie_status_agenda <> NEW.ie_status_agenda) then
		NEW.DT_AGENDAMENTO 	:= null;
		NEW.NM_USUARIO_ORIG 	:= null;
	end if;

	if (OLD.ie_status_agenda = 'L') and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (NEW.ie_status_agenda not in ('C','B')) and (NEW.DT_AGENDAMENTO is null) then
		NEW.DT_AGENDAMENTO 	:= LOCALTIMESTAMP;
		if (NEW.IE_AGENDA_WEB = 'S') then
			NEW.NM_USUARIO_ORIG 	:= coalesce(NEW.NM_USUARIO_ORIG,NEW.NM_USUARIO);
		else
			NEW.NM_USUARIO_ORIG 	:= NEW.NM_USUARIO;
		end if;
	end if;

	/*Gravar log - agenda_paciente_hist*/


	SELECT 	count(*)
	into STRICT	count_w
	FROM	AGENDA_PACIENTE_HIST
	WHERE	IE_HISTORICO = 'AGM'
	AND		nr_seq_agenda = NEW.nr_sequencia;

	
	if (NEW.cd_pessoa_fisica is not null) and (OLD.cd_pessoa_fisica is null) and (NEW.ie_status_agenda  <> 'C') and (cd_tipo_agenda_w = 2) and (count_w = 0) then

		ds_log_w := WHEB_MENSAGEM_PCK.get_texto(457149, 'obter_funcao_ativa='||obter_funcao_ativa||';call_stack='||dbms_utility.format_call_stack);

		CALL GERAR_AGENDA_PACIENTE_HIST(NEW.cd_agenda,
      NEW.nr_sequencia,
      'AGM',
      NEW.nm_usuario,

      substr(WHEB_MENSAGEM_PCK.get_texto(1071609, 'ds_funcao='||OBTER_DESC_FUNCAO(obter_funcao_ativa)||';obter_funcao_ativa='||obter_funcao_ativa||';call_stack='||dbms_utility.format_call_stack),1,2000),

      NEW.cd_pessoa_fisica,
      NEW.nm_paciente,
      OLD.hr_inicio,
      obter_perfil_ativo,
      null,
      null,
      NEW.dt_agendamento);

	end if;

	if (OLD.cd_pessoa_fisica is not null) and (NEW.cd_pessoa_fisica is not null) and (OLD.cd_pessoa_fisica <> NEW.cd_pessoa_fisica) then -- paciente (pf)

		ie_pf_w := 'S';

		atrib_oldvalue_w := substr(obter_nome_pf(OLD.cd_pessoa_fisica),1,60);
		atrib_newvalue_w := substr(obter_nome_pf(NEW.cd_pessoa_fisica),1,60);

		CALL gerar_agenda_paciente_hist( NEW.cd_agenda,
						NEW.nr_sequencia,
						'P',
						NEW.nm_usuario,

            substr(WHEB_MENSAGEM_PCK.get_texto(457158,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w||';ds_log_w='|| ds_log_w),1,2000),


						OLD.cd_pessoa_fisica,
						atrib_oldvalue_w,
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);

		select	count(*)
		into STRICT	qt_existe_autor_pf_w
		from	autorizacao_convenio
		where	nr_seq_agenda = NEW.nr_sequencia;

		if (coalesce(qt_existe_autor_pf_w,0) > 0) then

			update	autorizacao_convenio a
			set	a.cd_pessoa_fisica 	= NEW.cd_pessoa_fisica,
				a.dt_atualizacao	= LOCALTIMESTAMP,
				a.nm_usuario	 	= NEW.nm_usuario
			where	((a.nr_sequencia in (SELECT x.nr_sequencia_autor
						from	procedimento_autorizado x
						where	x.nr_seq_agenda = NEW.nr_sequencia)) or (a.nr_seq_agenda	= NEW.nr_sequencia));

		end if;

	end if;

	if (NEW.nr_seq_status_pac is not null) and (coalesce(OLD.nr_seq_status_pac,-1) <> coalesce(NEW.nr_seq_status_pac,-1))  then --Status do paciente

    --327119 = nao informado

		select  coalesce(max(ds_status_paciente),obter_desc_expressao(327119))
		into STRICT    atrib_oldvalue_w
		from    status_paciente_agenda
		where   nr_sequencia = OLD.nr_seq_status_pac;

		select  coalesce(max(ds_status_paciente),obter_desc_expressao(327119))
		into STRICT    atrib_newvalue_w
		from    status_paciente_agenda
		where   nr_sequencia = NEW.nr_seq_status_pac;

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'SP',
						NEW.nm_usuario,
            WHEB_MENSAGEM_PCK.get_texto(457162,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;


	if (OLD.cd_anestesista is not null) and (OLD.cd_anestesista <> NEW.cd_anestesista) then

		select	count(*)
		into STRICT	qt_agenda_escala_w
		from	agenda_paciente_escala
		where	cd_anestesista 	= OLD.cd_anestesista
		and	nr_seq_agenda	= NEW.nr_sequencia;

		if (qt_agenda_escala_w > 0) then

			delete	FROM agenda_paciente_escala
			where	cd_anestesista 	= OLD.cd_anestesista
			and	nr_seq_agenda	= NEW.nr_sequencia;

		end if;
	end if;

	if (ie_pf_w <> 'S') and (OLD.nm_paciente is not null) and (NEW.nm_paciente is not null) and (OLD.nm_paciente <> NEW.nm_paciente) then -- paciente (nao pf)

		atrib_oldvalue_w := OLD.nm_paciente;
		atrib_newvalue_w := NEW.nm_paciente;

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'P',
						NEW.nm_usuario,

						WHEB_MENSAGEM_PCK.get_texto(457158,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w||';ds_log_w='|| ds_log_w),

						OLD.cd_pessoa_fisica,
						atrib_oldvalue_w,
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if	((OLD.cd_procedimento is not null) and (NEW.cd_procedimento is not null) and (OLD.cd_procedimento <> NEW.cd_procedimento) and
		((cd_tipo_agenda_w <> 1) or
		 ((cd_tipo_agenda_w = 1) and (obter_se_possui_motivo_alt_cir('P','') = 'N'))))  then -- exame

		atrib_oldvalue_w := substr(obter_exame_agenda(OLD.cd_procedimento, OLD.ie_origem_proced, OLD.nr_seq_proc_interno),1,60);
		atrib_newvalue_w := substr(obter_exame_agenda(NEW.cd_procedimento, NEW.ie_origem_proced, NEW.nr_seq_proc_interno),1,60);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
     			  NEW.nr_sequencia,
						'E',
						NEW.nm_usuario,
            WHEB_MENSAGEM_PCK.get_texto(457163,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w||';ds_log_w='|| ds_log_w),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if	((OLD.cd_medico is not null) and (NEW.cd_medico is not null) and (OLD.cd_medico <> NEW.cd_medico)  and
		((cd_tipo_agenda_w <> 1) or
		((cd_tipo_agenda_w = 1) and (obter_se_possui_motivo_alt_cir('M','') = 'N'))))  then -- requisitante

		atrib_oldvalue_w := substr(obter_nome_medico(OLD.cd_medico,'NC'),1,60);
		atrib_newvalue_w := substr(obter_nome_medico(NEW.cd_medico,'NC'),1,60);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'MR',
						NEW.nm_usuario,

            WHEB_MENSAGEM_PCK.get_texto(457164,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w||';ds_log_w='|| ds_log_w),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.cd_medico_exec is not null) and (NEW.cd_medico_exec is not null) and (OLD.cd_medico_exec <> NEW.cd_medico_exec) then -- executor

		atrib_oldvalue_w := substr(obter_nome_medico(OLD.cd_medico_exec,'NC'),1,60);
		atrib_newvalue_w := substr(obter_nome_medico(NEW.cd_medico_exec,'NC'),1,60);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'ME',
						NEW.nm_usuario,
            WHEB_MENSAGEM_PCK.get_texto(457165,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w||';ds_log_w='|| ds_log_w),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (NEW.ie_status_agenda = 'C') then 	-- cancelamento

		atrib_oldvalue_w := substr(obter_valor_dominio(83,OLD.ie_status_agenda),1,255);
		atrib_newvalue_w := substr(obter_valor_dominio(83,NEW.ie_status_agenda),1,255);

		BEGIN
		select	'S'
		into STRICT	ie_existe_autor_w
		from	autorizacao_convenio
		where	nr_seq_agenda = NEW.nr_sequencia  LIMIT 1;
		exception
		when others then
			ie_existe_autor_w := 'N';
		end;

		if (ie_existe_autor_w = 'S') and (coalesce(ie_cancelar_se_autorizada_w,'S') <> 'E') then
			BEGIN
			if (coalesce(ie_cancelar_se_autorizada_w,'S') = 'S') then

				update	autorizacao_convenio a
				set	a.nr_seq_estagio = (	SELECT max(x.nr_sequencia)
								from	estagio_autorizacao x
								where	x.ie_interno = '70'
								and	coalesce(x.ie_situacao,'A') = 'A'
								and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = x.cd_empresa),
					a.dt_atualizacao = LOCALTIMESTAMP,
					a.nm_usuario	 = NEW.nm_usuario
				where	a.nr_seq_agenda  = NEW.nr_sequencia
				and	a.nr_seq_age_integ is null;

			elsif (coalesce(ie_cancelar_se_autorizada_w,'S') = 'N') then

				update	autorizacao_convenio a
				set	a.nr_seq_estagio = (	SELECT max(x.nr_sequencia)
								from	estagio_autorizacao x
								where	x.ie_interno = '70'
								and	coalesce(x.ie_situacao,'A') = 'A'
								and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = x.cd_empresa),
					a.dt_atualizacao = LOCALTIMESTAMP,
					a.nm_usuario	 = NEW.nm_usuario
				where	a.nr_seq_agenda  = NEW.nr_sequencia
				and	a.nr_seq_age_integ is null
				and	not exists (	select	1
							from	estagio_autorizacao y
							where	y.ie_interno = '10'
							and	a.nr_seq_estagio = y.nr_sequencia
							and	coalesce(y.ie_situacao,'A') = 'A'
							and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = y.cd_empresa);
			end if;

			update	autorizacao_cirurgia
			set	ie_estagio_autor 	= '6',
				nm_usuario		= NEW.nm_usuario,
				dt_atualizacao		= LOCALTIMESTAMP
			where	nr_seq_agenda		= NEW.nr_sequencia
			and	dt_liberacao	is null
			and	dt_autorizacao  is null;


			end;
		end if;

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'SC',
						NEW.nm_usuario,
            --727676 = Status de / 325787 = para / 293478 = Motivo / 327119 = nao informado

						obter_desc_expressao(727676)||' ' || atrib_oldvalue_w || ' '||obter_desc_expressao(325787)||' ' || atrib_newvalue_w ||' ('||
            obter_desc_expressao(293478)||': '||coalesce(obter_dados_motivo_cancel(NEW.cd_motivo_cancelamento,'D'),obter_desc_expressao(327119))||
            ' '||NEW.ds_motivo_status||')'|| chr(13) ||chr(10)||ds_log_w,

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
		CALL atual_horario_esp_agenda(NEW.nr_seq_esp);

		-- inserir protocolo de cancelamento.

		CALL INSERIR_EXCLUIR_PROTOC_CANC(null, NEW.nr_sequencia, 'I', NEW.nm_usuario);
	end if;

	if (OLD.IE_AUTORIZACAO is not null) and (NEW.IE_AUTORIZACAO is not null) and (OLD.IE_AUTORIZACAO <> NEW.IE_AUTORIZACAO) then

		atrib_oldvalue_w := substr(obter_valor_dominio(1227,OLD.IE_AUTORIZACAO),1,255);
		atrib_newvalue_w := substr(obter_valor_dominio(1227,NEW.IE_AUTORIZACAO),1,255);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'SA',
						NEW.nm_usuario,
						WHEB_MENSAGEM_PCK.get_texto(457199,'atrib_oldvalue_w='||atrib_oldvalue_w||';atrib_newvalue_w='||atrib_newvalue_w||';ds_log_w='||ds_log_w),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
		CALL atual_horario_esp_agenda(NEW.nr_seq_esp);
	end if;

	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda = 'C') and (NEW.ie_status_agenda = 'N') then 	-- retorno de cancelamento para normal    -  Almir em 12/08/2008 OS103579

		atrib_oldvalue_w := substr(obter_valor_dominio(83,OLD.ie_status_agenda),1,255);
		atrib_newvalue_w := substr(obter_valor_dominio(83,NEW.ie_status_agenda),1,255);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'SN',
						NEW.nm_usuario,
            WHEB_MENSAGEM_PCK.get_texto(457162,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
		CALL atual_horario_esp_agenda(NEW.nr_seq_esp);

		-- excluir protocolo de cancelamento

		CALL INSERIR_EXCLUIR_PROTOC_CANC(null, NEW.nr_sequencia, 'E', NEW.nm_usuario);
	end if;


	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (NEW.ie_status_agenda = 'B') then -- bloqueio

		atrib_oldvalue_w := substr(obter_valor_dominio(83,OLD.ie_status_agenda),1,255);
		atrib_newvalue_w := substr(obter_valor_dominio(83,NEW.ie_status_agenda),1,255);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'SB',
						NEW.nm_usuario,
            --727676 = status de / 325787 = para / 707599 = motivo / 327119 = Nao informado

						obter_desc_expressao(727676)||' ' || atrib_oldvalue_w || ' '||obter_desc_expressao(325787)||' ' || atrib_newvalue_w ||' ('||obter_desc_expressao(707599)||': '||coalesce(obter_desc_agenda_motivo(NEW.nr_seq_motivo_bloq),obter_desc_expressao(327119))||' '||NEW.ds_motivo_status||')',
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);

	end if;

	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda = 'B') and (NEW.ie_status_agenda = 'L') then -- reverter bloqueio

		atrib_oldvalue_w := substr(obter_valor_dominio(83,OLD.ie_status_agenda),1,255);
		atrib_newvalue_w := substr(obter_valor_dominio(83,NEW.ie_status_agenda),1,255);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'RB',
						NEW.nm_usuario,
            WHEB_MENSAGEM_PCK.get_texto(457162,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (NEW.ie_status_agenda = 'R') then -- reserva

		atrib_oldvalue_w := substr(obter_valor_dominio(83,OLD.ie_status_agenda),1,255);
		atrib_newvalue_w := substr(obter_valor_dominio(83,NEW.ie_status_agenda),1,255);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'R',
						NEW.nm_usuario,
            WHEB_MENSAGEM_PCK.get_texto(457162,'atrib_oldvalue_w='|| atrib_oldvalue_w ||';atrib_newvalue_w='|| atrib_newvalue_w),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.nr_minuto_duracao is not null) and (NEW.nr_minuto_duracao is not null) and (OLD.nr_minuto_duracao <> NEW.nr_minuto_duracao) then -- duracao

		atrib_oldvalue_w := OLD.nr_minuto_duracao;
		atrib_newvalue_w := NEW.nr_minuto_duracao;

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'D',
						NEW.nm_usuario,
            --727684 = duracao de / 325787 = para / 293343 = minutos


            WHEB_MENSAGEM_PCK.get_texto(457202, 'atrib_oldvalue_w='||atrib_oldvalue_w||';atrib_newvalue_w='||atrib_newvalue_w),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (obter_tipo_agenda(NEW.cd_agenda) = 1) and (OLD.ie_status_agenda = 'C') and (OLD.ie_status_agenda <> NEW.ie_status_agenda) then
		NEW.cd_motivo_cancelamento	:= null;
		NEW.dt_cancelamento		:= null;
		NEW.nm_usuario_cancel		:= null;
	end if;

	if (OLD.ds_observacao is not null) and (NEW.ds_observacao is not null) and (OLD.ds_observacao <> NEW.ds_observacao) then

		atrib_oldvalue_obs_w := substr(OLD.ds_observacao,1,900);
		atrib_newvalue_obs_w := substr(NEW.ds_observacao,1,900);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'O',
						NEW.nm_usuario,
						WHEB_MENSAGEM_PCK.get_texto(457203,'atrib_oldvalue_w='||atrib_oldvalue_obs_w||';atrib_newvalue_w='||atrib_newvalue_obs_w),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda <> 'L') and (OLD.hr_inicio <> NEW.hr_inicio) then
		atrib_oldvalue_w := to_char(OLD.dt_agenda,'dd/mm/yyyy') || ' ' || to_char(OLD.hr_inicio,'hh24:mi:ss');
		atrib_newvalue_w := to_char(NEW.dt_agenda,'dd/mm/yyyy') || ' ' || to_char(NEW.hr_inicio,'hh24:mi:ss');

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'AD',
						NEW.nm_usuario,
						WHEB_MENSAGEM_PCK.get_texto(457204,'atrib_oldvalue_w='||atrib_oldvalue_w||';atrib_newvalue_w='||atrib_newvalue_w),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						to_date(atrib_newvalue_w,'dd/mm/yyyy hh24:mi:ss') ,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.cd_convenio is not null) and (NEW.cd_convenio is not null) and (OLD.cd_convenio <> NEW.cd_convenio) then
		atrib_oldvalue_w := substr(Obter_desc_convenio(OLD.cd_convenio),1,255);
		atrib_newvalue_w := substr(Obter_desc_convenio(NEW.cd_convenio),1,255);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'AC',
						NEW.nm_usuario,
						WHEB_MENSAGEM_PCK.get_texto(457207, 'atrib_oldvalue_w='||atrib_oldvalue_w||';atrib_newvalue_w='||atrib_newvalue_w),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;


	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and
		((OLD.ie_status_agenda <> 'N') or (OLD.nm_usuario_acesso is null)) and (OLD.ie_status_agenda <> 'B') and (OLD.ie_status_agenda <> 'R') and (NEW.ie_status_agenda = 'L')  then
		if (OLD.ie_status_agenda = 'N' or OLD.ie_status_agenda = 'M') and (NEW.cd_procedimento is null) and (NEW.nm_paciente is null) then
			NEW.ie_status_agenda := 'L';
		else
			/*'Nao e possivel modificar para livre o status de um agendamento ja marcado anteriormente!' || chr(10) ||
			'Caso, por algum motivo,  este agendamento nao ocorrera mais e voce deseja liberar este horario para que um novo paciente possa ser agendado,'|| chr(10) ||
			'recomenda-se cancelar o mesmo.*/

			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(190235);
		end if;
	end if;

	if (cd_tipo_agenda_w = 1) and (ie_altera_status_livre_w = 'N') and (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (NEW.dt_agendamento is not null) and (NEW.ie_status_agenda = 'L') then
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(190236);
		/*'Nao e possivel modificar para livre o status de um agendamento ja marcado anteriormente!' || chr(10) ||
		'Caso, por algum motivo,  este agendamento nao ocorrera mais e voce deseja liberar este horario para que um novo paciente possa ser agendado,'|| chr(10) ||
		'recomenda-se cancelar o mesmo. Parametro [364]. */

	end if;



	if (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (NEW.ie_status_agenda = 'C') then

		select		max(obter_agenda_regra_permissao(obter_pessoa_fisica_usuario(NEW.nm_usuario,'C'), NEW.cd_agenda, 'C', obter_perfil_Ativo))
		into STRICT		ie_permite_cancelamento_w
		;

		if (ie_permite_cancelamento_w = 'N') then
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(190237);
			--'O usuario nao possui permissao para realizar cancelamentos nesta agenda.

		end if;

	end if;

	if (OLD.nr_atendimento is not null) and (NEW.nr_atendimento is null) then
		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'DA',
						NEW.nm_usuario,
            -- 283863 = Atendimento / 727700 = desvinculado

            substr(WHEB_MENSAGEM_PCK.get_texto(457443, 'nr_atendimento='||NEW.nr_atendimento||';call_stack='||dbms_utility.format_call_stack),1,1900),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.nr_atendimento is null) and (NEW.nr_atendimento is not null) and (NEW.nr_seq_pac_senha_fila is null) then

		select	max(nr_seq_pac_senha_fila)
		into STRICT	nr_seq_pac_senha_fila_w
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento;

		if (nr_seq_pac_senha_fila_w is not null) then
			NEW.nr_seq_pac_senha_fila := nr_seq_pac_senha_fila_w;
		end if;
	end if;

	if (OLD.nr_atendimento is null) and (NEW.nr_atendimento is not null) then
		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'VA',
						NEW.nm_usuario,
						WHEB_MENSAGEM_PCK.get_texto(457217, 'nr_atendimento='||NEW.nr_atendimento||';call_stack='||dbms_utility.format_call_stack),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.nr_cirurgia is not null) and (NEW.nr_cirurgia is null) then
		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'DC',
						NEW.nm_usuario,

						WHEB_MENSAGEM_PCK.get_texto(457397, 'nr_cirurgia='||OLD.nr_cirurgia||';call_stack='||dbms_utility.format_call_stack),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	BEGIN
	if (NEW.nr_cirurgia is not null) and (obter_tipo_agenda(NEW.cd_agenda) = 1) then
		select	max(nr_prescricao)
		into STRICT	nr_prescricao_w
		from	prescr_medica
		where	nr_seq_agenda = NEW.nr_sequencia;

		if (nr_prescricao_w > 0) then
			update	cirurgia
			set	nr_prescricao	= nr_prescricao_w
			where	nr_cirurgia	= NEW.nr_cirurgia
			and	nr_prescricao 	is null;
		end if;
	end if;
	exception
	when others then
		ds_origem_w := '';
	end;

	if (OLD.nr_cirurgia is null) and (NEW.nr_cirurgia is not null) then
		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'VC',
						NEW.nm_usuario,
            -- 284979 = Cirurgia / 330784 = vinculada

						WHEB_MENSAGEM_PCK.get_texto(457398, 'nr_cirurgia='||OLD.nr_cirurgia||';call_stack='||dbms_utility.format_call_stack),

						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if (OLD.CD_CODIFICACAO is not null) and (NEW.CD_CODIFICACAO is not null) and (OLD.CD_CODIFICACAO <> NEW.CD_CODIFICACAO) then


		ds_historico_w	:= 	--'Perfil: '|| OBTER_DESC_PERFIL(obter_perfil_ativo) || chr(13) ||
          --Funcao = 720690

					obter_desc_expressao(720690)||': '|| OBTER_DESC_FUNCAO(obter_funcao_ativa) || chr(13) ||
          --Usuario = 300907

					obter_desc_expressao(300907)||': '|| wheb_usuario_pck.get_nm_usuario || chr(13) ||
					--Status anterior = 298830

          obter_desc_expressao(298830)||': '|| obter_valor_dominio(1915, OLD.CD_CODIFICACAO) || chr(13) ||
					--Status atual = 298834

          obter_desc_expressao(298834)||': '|| obter_valor_dominio(1915, NEW.CD_CODIFICACAO) || chr(13) ||
					--Stack = 298822

         obter_desc_expressao(298822) ||': ' || substr(dbms_utility.format_call_stack,1,1800);
					--'Data: ' || to_char(sysdate,'dd/mm/yyyy hh24:mi:ss');


		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'CD',
						NEW.nm_usuario,
						ds_historico_w,
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);

	end if;


	if (NEW.ie_status_agenda <> 'L') and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (obter_perfil_ativo <> 0) and (obter_funcao_ativa <> 0) and (cd_tipo_agenda_w	<> 2) then

		ds_historico_w	:= 	--'Perfil: '|| OBTER_DESC_PERFIL(obter_perfil_ativo) || chr(13) ||
          --720690 = funcao

					obter_desc_expressao(720690)||': '|| OBTER_DESC_FUNCAO(obter_funcao_ativa) || chr(13) ||
          --300907 = usuario

					obter_desc_expressao(300907)||': '|| wheb_usuario_pck.get_nm_usuario || chr(13) ||
					--298830 = Status anterior

          obter_desc_expressao(298830)||': '|| obter_valor_dominio(83, OLD.ie_status_agenda) || chr(13) ||
					--298834 = Status atual

          obter_desc_expressao(298834)||': '|| obter_valor_dominio(83, NEW.ie_status_agenda) || chr(13) ||
					--298822 = Stack

          obter_desc_expressao(298822)||': ' || substr(dbms_utility.format_call_stack,1,1800);
					--'Data: ' || to_char(sysdate,'dd/mm/yyyy hh24:mi:ss');

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'AS',
						NEW.nm_usuario,
						ds_historico_w,
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

		/* HSL 431327 */


	if (NEW.cd_pessoa_fisica is not null) and (OLD.cd_pessoa_fisica is null) and (OLD.nm_paciente is not null) then

		select	count(*)
		into STRICT	qt_existe_autor_pf_w
		from	autorizacao_convenio
		where	nr_seq_agenda = NEW.nr_sequencia;

		if (coalesce(qt_existe_autor_pf_w,0) > 0) then

			update	autorizacao_convenio
			set	cd_pessoa_fisica = coalesce(cd_pessoa_fisica,NEW.cd_pessoa_fisica),
				dt_agenda	 = coalesce(dt_agenda,dt_agenda_w),
				dt_atualizacao	 = LOCALTIMESTAMP,
				nm_usuario	 = NEW.nm_usuario
			where	nr_seq_agenda	 = NEW.nr_sequencia;

		end if;
	end if;

	if (nr_seq_tipo_w is not null) and (OLD.nr_atendimento is null)  and (NEW.nr_atendimento is not null) and (Obter_Dados_Usuario_Opcao(NEW.nm_usuario,'C') is not null) then

		insert into agenda_pac_hist(
			nr_sequencia,
			nr_seq_agenda,
			ds_historico,
			dt_atualizacao,
			nm_usuario,
			dt_historico,
			cd_pessoa_fisica,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_liberacao,
			cd_setor_atend_usuario,
			ie_prioridade,
			nr_seq_tipo)
		values (
			nextval('agenda_pac_hist_seq'),
			NEW.nr_sequencia,
      -- 490038 = VINCULACAO DE ATENDIMENTO

			 obter_desc_expressao(490038) || chr(13) ||
			-- 295156 = Paciente

      	obter_desc_expressao(295156) ||': ' || obter_nome_pf(NEW.cd_pessoa_fisica) || chr(13) ||
			-- 283863 = Atendimento

      	obter_desc_expressao(283863) ||': ' || to_char(NEW.nr_atendimento) || chr(13) ||
			-- 286532 = Data agenda

      	obter_desc_expressao(286532) ||': ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(NEW.hr_inicio, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone) || chr(13) ||
			-- 720319 = Procedimento

      	obter_desc_expressao(720319) ||': ' || obter_descricao_procedimento(NEW.cd_procedimento, NEW.ie_origem_proced),
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			Obter_Dados_Usuario_Opcao(NEW.nm_usuario,'C'),
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			Obter_Dados_Usuario_Opcao(NEW.nm_usuario,'S'),
			'B',
			nr_seq_tipo_w);
	end if;

	if (ie_alterar_cod_proc_cirurgia_w = 'S') and
		((NEW.nr_seq_proc_interno is not null AND NEW.nr_seq_proc_interno <> OLD.nr_seq_proc_interno) or
		 (NEW.cd_procedimento is not null AND NEW.cd_procedimento <> OLD.cd_procedimento) or
		 (NEW.ie_origem_proced is not null AND NEW.ie_origem_proced <> OLD.ie_origem_proced)) and (NEW.nr_cirurgia is not null) then
		update 	cirurgia
		set	nr_seq_proc_interno 	= NEW.nr_seq_proc_interno,
			cd_procedimento_princ	= NEW.cd_procedimento,
			ie_origem_proced		= NEW.ie_origem_proced
		where	nr_cirurgia 		= NEW.nr_cirurgia;

		BEGIN
			select	max(nr_prescricao)
			into STRICT	nr_prescricao_w
			from	cirurgia
			where 	nr_cirurgia		= NEW.nr_cirurgia;

			update	prescr_procedimento
			set	nr_seq_proc_interno 	= NEW.nr_seq_proc_interno,
				cd_procedimento		= NEW.cd_procedimento,
				ie_origem_proced	= NEW.ie_origem_proced
			where	nr_prescricao		= nr_prescricao_w
			and	coalesce(nr_seq_proc_interno,0) 	= coalesce(OLD.nr_seq_proc_interno,0)
			and	coalesce(cd_procedimento,0)		= coalesce(OLD.cd_procedimento,0)
			and	coalesce(ie_origem_proced,0)		= coalesce(OLD.ie_origem_proced,0);
		exception
		when others then
			nr_prescricao_w := 0;
		end;
	end if;

	if (ie_atualiza_anestesia_w = 'S') and (NEW.nr_cirurgia is not null) and (coalesce(OLD.cd_tipo_anestesia,0) <> coalesce(NEW.cd_tipo_anestesia,0)) then
		update	cirurgia
		set	cd_tipo_anestesia 	= NEW.cd_tipo_anestesia
		where	nr_cirurgia 		= NEW.nr_cirurgia;
	end if;


	if (ie_atualiza_medico_w = 'S') and (NEW.nr_cirurgia is not null) and
		((OLD.cd_medico <> NEW.cd_medico) or (coalesce(OLD.cd_anestesista,0) <> coalesce(NEW.cd_anestesista,0))) then
		update	cirurgia
		set	cd_medico_cirurgiao 	= NEW.cd_medico,
			cd_medico_anestesista 	= NEW.cd_anestesista
		where	nr_cirurgia 		= NEW.nr_cirurgia;
	end if;

	if (OLD.nr_cirurgia is null) and (NEW.nr_cirurgia is not null) and (NEW.cd_pessoa_fisica is not null) then
		select	max(cd_pessoa_fisica)
		into STRICT	cd_pessoa_cirurgia_w
		from	cirurgia
		where	nr_cirurgia	=	NEW.nr_cirurgia;

		if (cd_pessoa_cirurgia_w is not null) and (NEW.cd_pessoa_fisica <> cd_pessoa_cirurgia_w) then
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(190238);
			--'A pessoa da cirurgia e do agendamento nao sao iguais, favor verificar.'

		end if;

	end if;

	if (NEW.ie_status_agenda <> 'C') then
		if (Obter_Se_Perm_PF_Classif(wheb_usuario_pck.get_cd_funcao,NEW.cd_agenda,NEW.cd_pessoa_fisica,LOCALTIMESTAMP)	= 'N') then
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(190239);
			--'Esse paciente possui alguma classificacao nao permitida para essa funcao.

		end if;
	end if;

	dt_hr_inicio_antes_w	:=	OLD.hr_inicio;
	dt_hr_inicio_depois_w	:=	to_date(to_char(NEW.dt_agenda,'dd/mm/yyyy')||' '||to_char(NEW.hr_inicio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');

	if (dt_hr_inicio_antes_w <> dt_hr_inicio_depois_w) and (OLD.nr_cirurgia is not null) and (ie_atualiza_hr_agendamento_w = 'S') then
		update	cirurgia
		set	dt_inicio_prevista = dt_hr_inicio_depois_w
		where	nr_cirurgia	   = NEW.nr_cirurgia;
	end if;


	if (cd_tipo_agenda_w = 2) and (OLD.IE_STATUS_AGENDA <> 'E' ) and (NEW.IE_STATUS_AGENDA = 'E' ) and (NEW.nm_usuario_acesso is not null) then
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(190240);
		--'Nao e possivel executar um agendamento em agenda!'


	end if;

	if (OLD.nr_seq_atend_futuro is not null) and (NEW.nr_seq_atend_futuro is not null) and (NEW.cd_pessoa_fisica is not null) and (OLD.ie_status_agenda = 'PA') and (NEW.ie_status_agenda = ie_status_agenda_confirmado_w) then
		BEGIN

		if (nr_status_atend_futuro_w is not null) then
			update	atend_pac_futuro
			set	nr_seq_status = nr_status_atend_futuro_w
			where	nr_sequencia = NEW.nr_seq_atend_futuro;
		end if;

		exception
		when others then
			nr_status_atend_futuro_w := '';
		end;
	end if;

	if (NEW.ds_observacao is not null) and (coalesce(NEW.ds_observacao,'X') <> coalesce(OLD.ds_observacao,'X')) and (NEW.ie_status_agenda <> 'L') then
		
		atrib_oldvalue_obs_w := substr(OLD.ds_observacao,1,900);
		atrib_newvalue_obs_w := substr(NEW.ds_observacao,1,900);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'AO',
						NEW.nm_usuario,
						WHEB_MENSAGEM_PCK.get_texto(457203,'atrib_oldvalue_w='||atrib_oldvalue_obs_w||';atrib_newvalue_w='||atrib_newvalue_obs_w),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	--Confirmacao do agendamento

	if (NEW.dt_confirmacao is not null) and (NEW.nm_usuario_confirm is not null) then
		atrib_oldvalue_w := substr(obter_valor_dominio(83, OLD.ie_status_agenda),1,255);
		atrib_newvalue_w := substr(NEW.ds_observacao,1,255);

		CALL gerar_agenda_paciente_hist(	NEW.cd_agenda,
						NEW.nr_sequencia,
						'ST',
						NEW.nm_usuario,
            --727726 = Agendamento confirmado em

						OBTER_DESC_EXPRESSAO(727726)||': ' || PKG_DATE_FORMATERS_TZ.TO_VARCHAR(NEW.dt_confirmacao, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone),
						OLD.cd_pessoa_fisica,
						coalesce(OLD.nm_paciente,NEW.nm_paciente),
						OLD.hr_inicio,
						obter_perfil_ativo,
						null,
						null,
						NEW.dt_agendamento);
	end if;

	if  	((OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (NEW.ie_status_agenda <> OLD.ie_status_agenda) and
		(((NEW.ie_status_agenda in ('C','F','I')) or (OLD.ie_status_agenda in ('C','F','I'))) or (NEW.ie_status_agenda = 'L' and OLD.nm_usuario_acesso is null))) or
		((OLD.nr_minuto_duracao is not null) and (NEW.nr_minuto_duracao is not null) and (OLD.nr_minuto_duracao <> NEW.nr_minuto_duracao) and (NEW.ie_status_Agenda <> 'L')) then
		delete FROM agenda_controle_horario
		where 	cd_agenda = NEW.cd_agenda
		and 	dt_agenda = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_agenda);
	end if;

	if (ie_restringe_vincular_atend_w = 'S') and (NEW.nr_atendimento is not null) and (OLD.nr_cirurgia is null) and (NEW.nr_cirurgia is not null) then

		SELECT	coalesce(max(nr_atendimento),0)
		INTO STRICT	nr_atendimento_cirurgia_w
		FROM	cirurgia
		WHERE	nr_cirurgia = NEW.nr_cirurgia;

		if (nr_atendimento_cirurgia_w > 0) and (NEW.nr_atendimento <> nr_atendimento_cirurgia_w) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(193632,'NR_CIRURGIA_W=' || NEW.nr_cirurgia);
		end if;
	end if;

	if (ie_restringe_vincular_atend_w = 'S') and (NEW.nr_cirurgia is not null) and (OLD.nr_atendimento is null) and (NEW.nr_atendimento is not null) then

		SELECT	coalesce(max(nr_atendimento),0)
		INTO STRICT	nr_atendimento_cirurgia_w
		FROM	cirurgia
		WHERE	nr_cirurgia = NEW.nr_cirurgia;

		if (nr_atendimento_cirurgia_w > 0) and (NEW.nr_atendimento <> nr_atendimento_cirurgia_w) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(193614,'NR_ATENDIMENTO_W=' || NEW.nr_atendimento);
		end if;
	end if;

	BEGIN
	if (ie_idade_proc_interno_w = 'S') and (NEW.nr_seq_proc_interno is not null) then
		if (NEW.cd_pessoa_fisica is null) then
			if	((NEW.qt_idade_paciente is not null) or (NEW.qt_idade_mes is not null)) then
				qt_idade_w := (coalesce(NEW.qt_idade_paciente,0) * 12) + coalesce(NEW.qt_idade_mes,0);
			end if;
		else
			qt_idade_w := coalesce(obter_idade_pf(NEW.cd_pessoa_fisica,LOCALTIMESTAMP,'M'),0);
		end if;

		select		coalesce(max('S'),'N')
		into STRICT		ie_permite_w
		from		proc_interno a
		where		a.nr_sequencia = NEW.nr_seq_proc_interno
		and		coalesce(qt_idade_w,0) between coalesce(a.qt_idade_min_meses,0) and coalesce(a.qt_idade_max_meses,9999);
	end if;
	exception
	when others then
		ie_permite_w := 'S';
	end;

	if (OLD.nr_atendimento is null) and (NEW.nr_atendimento is not null) and (NEW.ie_tipo_atendimento is null) and (cd_tipo_agenda_w = 1) then
		BEGIN

		select 	max(ie_tipo_atendimento)
		into STRICT	ie_tipo_atendimento_w
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento;

		NEW.ie_tipo_atendimento := ie_tipo_atendimento_w;

		exception
		when others then
			NEW.ie_tipo_atendimento := null;
		end;
	end if;

	if (ie_permite_w = 'N') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(198006);
	end if;

	BEGIN
	if (obter_tipo_agenda(NEW.cd_agenda) = 1) then
		if (NEW.nr_atendimento is not null or
			OLD.nr_atendimento is not null) then
			if (NEW.nr_atendimento is not null) then
				update	med_avaliacao_paciente
				set	nr_atendimento = NEW.nr_atendimento
				where	nr_seq_agenda_pac = OLD.nr_sequencia;
			elsif (OLD.nr_atendimento is not null) then
				update	med_avaliacao_paciente
				set	nr_atendimento  = NULL
				where	nr_seq_agenda_pac = OLD.nr_sequencia;
			end if;
		elsif (NEW.nr_cirurgia is not null or
			OLD.nr_cirurgia is not null) then
			if (NEW.nr_cirurgia is not null) then
				update	med_avaliacao_paciente
				set	nr_cirurgia = NEW.nr_cirurgia
				where	nr_seq_agenda_pac = OLD.nr_sequencia;
			elsif (OLD.nr_cirurgia is not null) then
				update	med_avaliacao_paciente
				set	nr_cirurgia  = NULL
				where	nr_seq_agenda_pac = OLD.nr_sequencia;
			end if;
		end if;
	end if;
	exception
	when others then
		ds_origem_w	:= '';
	end;

	if (ie_atualiza_fila_espera_w = 'S') and (cd_tipo_agenda_w = 1) and (OLD.nr_atendimento is null) and (NEW.nr_atendimento is not null) then
		BEGIN

			select	max(nr_sequencia)
			into STRICT	nr_seq_fila_espera_w
			from	paciente_espera
			where	nr_seq_agenda = NEW.nr_sequencia;

			if (nr_seq_fila_espera_w is not null) then
				update	paciente_espera
				set	nr_atendimento = NEW.nr_atendimento
				where	nr_sequencia = nr_seq_fila_espera_w;
			end if;

		exception
			when	others then
				null;
		end;
	end if;


	BEGIN
	if (obter_tipo_agenda(NEW.cd_agenda) = 1) and
		(OLD.nr_atendimento is null AND NEW.nr_atendimento is not null) then
		select	cd_pessoa_fisica
		into STRICT	cd_pessoa_fisica_w
		from	atendimento_paciente
		where	nr_atendimento	=	NEW.nr_atendimento;

		update	cirurgia
		set	cd_pessoa_fisica	=	cd_pessoa_fisica_w,
			nr_atendimento		=	CASE WHEN ie_atendimento_w='S' THEN coalesce(nr_atendimento,NEW.nr_atendimento)  ELSE nr_atendimento END ,
			nm_usuario		=	nm_usuario_w,
			dt_atualizacao		=	LOCALTIMESTAMP
		where	nr_cirurgia		=	NEW.nr_cirurgia
		and	nr_atendimento is null;
	end if;
	exception
	when others then
		ds_origem_w	:= '';
	end;

	if (ie_carater_data_atual_w is not null) and (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_agenda) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP))  then
		BEGIN
		NEW.ie_carater_cirurgia := ie_carater_data_atual_w;
		end;
	end if;

	if (OLD.nm_paciente is not null) and (upper(OLD.nm_paciente) <> upper(NEW.nm_paciente)) then

		if (NEW.ds_hist_nome is null) then
			NEW.ds_hist_nome := substr(OLD.nm_paciente,1,255);
		else
			NEW.ds_hist_nome := substr(NEW.nm_paciente || ', ' || OLD.ds_hist_nome,1,255);
		end if;
	end if;


	/*if	(ie_funcao_ativa_w = 820) and
		((:new.nm_paciente is not null) and
		(:old.nm_paciente is not null)) and
		((:new.cd_pessoa_fisica is not null) and
		(:old.cd_pessoa_fisica is not null)) and
		(upper(:new.nm_paciente) <> upper(:old.nm_paciente)) then
		--O nome do paciente e divergente do codigo de pessoa informado, verifique!

		Wheb_mensagem_pck.exibir_mensagem_abort(224171);
	end if;*/


	update san_reserva
	set nr_cirurgia = NEW.nr_cirurgia
	where nr_seq_agenda = NEW.nr_sequencia;

	--OS 975521 - Nao permitir vincular atendimentos cancelados na cirurgia e no agendamento.

	if ((OLD.nr_atendimento is null AND NEW.nr_atendimento is not null) or
		((OLD.nr_atendimento is not null) and (NEW.nr_atendimento is not null) and (OLD.nr_atendimento <> NEW.nr_atendimento))) then

		select dt_cancelamento
		into STRICT   dt_cancelamento_w
		from   atendimento_paciente
		where  nr_atendimento = NEW.nr_atendimento;

		if (dt_cancelamento_w is not null) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(384733, 'NR_ATENDIMENTO_P='||to_char(NEW.nr_atendimento)); --Nao sera possivel vincular o atendimento #@nr_atendimento_p#@! Este atendimento esta cancelado.
		end if;
	end if;

	if ((coalesce(NEW.nr_cirurgia,0) <> coalesce(OLD.nr_cirurgia,0)) and (NEW.nr_cirurgia is not null)) then

		update	cirurgia
		set		nr_seq_agenda = NEW.nr_sequencia
		where	nr_cirurgia   = NEW.nr_cirurgia
		and		nr_seq_agenda is null;

	end if;

   BEGIN
   if (cd_tipo_agenda_w = 1) then
      if coalesce(OLD.nr_atendimento, 0) = 0 and
        coalesce(NEW.nr_atendimento, 0) > 0 then
         select   BIFROST.SEND_INTEGRATION( 'SurgeryScheduling',
                                            'com.philips.tasy.integration.atepac.surgery.scheduling.SurgerySchedulingRequest', 
                                            '{"nrSequencia" : '||NEW.nr_sequencia||'}',
                                            wheb_usuario_pck.get_nm_usuario)
         into STRICT     ds_retorno_integracao_w
;
      elsif (NEW.ie_status_agenda = 'C') then
         select   BIFROST.SEND_INTEGRATION( 'SurgerySchedulingCancellation',
                                            'com.philips.tasy.integration.atepac.surgery.scheduling.SurgerySchedulingRequest',
                                            '{"nrSequencia" : '||NEW.nr_sequencia||'}',
                                            wheb_usuario_pck.get_nm_usuario)
         into STRICT     ds_retorno_integracao_w
;

         select   BIFROST.SEND_INTEGRATION( 'surgery.scheduling.cancellation',
                                            'com.philips.tasy.integration.atepac.surgery.scheduling.inpart.SurgerySchedulingCancellationRequest',
                                            '{"sequence" : '||NEW.nr_sequencia||'}',
                                            'integration')
        into STRICT      ds_retorno_integracao_w
;
		
        select bifrost.send_integration('surgical.schedule.cancellation',
                                        'com.philips.tasy.integration.surgicalschedule.outbound.SurgicalScheduleCancellationCallback',
                                        '{"schedule": ' || NEW.nr_sequencia || ', "reason": ' || NEW.cd_motivo_cancelamento || '}',
                                        wheb_usuario_pck.get_nm_usuario)
        into STRICT ds_retorno_integracao_w
;
		
      end if;
   end if;
   exception
   when others then
      ds_retorno_integracao_w := null;
   end;

	--rranganath/dileep 1894339 - 47.1 - Return the status of the appointment to "pre-schedule" when it's changed on the Surgeon's Schedule function

	ie_surgeon_preschedule_w := obter_param_usuario(870, 71, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_surgeon_preschedule_w);
	
	if (obter_funcao_ativa = 870 and
		ie_surgeon_preschedule_w = 'S')	then
		NEW.ie_status_agenda := 'PA';
	end if;
	--rranganath/dileep 1894339 - 47.1 - Return the status of the appointment to "pre-schedule" when it's changed on the Surgeon's Schedule function


	if (NEW.ie_status_agenda <> 'L') and (obter_tipo_agenda(NEW.cd_agenda) = 2) and (OLD.ie_status_agenda <> 'C') and (NEW.ie_status_agenda = 'C') then
		BEGIN
		delete 	FROM agenda_controle_integra
		where	cd_tipo_agenda 	= 2
		and		nr_seq_agenda	= NEW.nr_sequencia;
		exception
			when others then
			null;
		end;
	end if;
	
	if (ie_funcao_ativa_w = 820) and (ie_perm_alterar_pac_w = 'N') and (OLD.cd_pessoa_fisica is not null) and (OLD.cd_pessoa_fisica <> NEW.cd_pessoa_fisica) then
		
		CALL wheb_mensagem_pck.exibir_mensagem_abort(37732);
			
	end if;
end if;
  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_paciente_update() FROM PUBLIC;

CREATE TRIGGER agenda_paciente_update
	BEFORE UPDATE ON agenda_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_paciente_update();

