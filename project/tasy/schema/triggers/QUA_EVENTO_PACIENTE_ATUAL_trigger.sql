-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS qua_evento_paciente_atual ON qua_evento_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_qua_evento_paciente_atual() RETURNS trigger AS $BODY$
declare
ie_anonimo_w	varchar(1);
qt_reg_w	    bigint;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

if (NEW.cd_pessoa_fisica is null)  then
	NEW.cd_pessoa_fisica	:= obter_pessoa_Atendimento(NEW.nr_Atendimento,'C');
end if;

if (coalesce(OLD.DT_EVENTO,LOCALTIMESTAMP + interval '10 days') <> NEW.DT_EVENTO) and (NEW.DT_EVENTO is not null) then
	NEW.ds_utc		:= obter_data_utc(NEW.DT_EVENTO, 'HV');	
end if;

if (coalesce(OLD.DT_LIBERACAO,LOCALTIMESTAMP + interval '10 days') <> NEW.DT_LIBERACAO) and (NEW.DT_LIBERACAO is not null) then
	NEW.ds_utc_atualizacao	:= obter_data_utc(NEW.DT_LIBERACAO,'HV');
end if;

if (NEW.ie_tipo_evento is null) then
	NEW.ie_tipo_evento:= 'E';
end if;	

if (NEW.ie_tipo_evento in ('E','R')) and (NEW.cd_pessoa_fisica is null) then
	-- Obrigatorio informar a pessoa!

	CALL Wheb_mensagem_pck.exibir_mensagem_abort(264646);
end if;

if (NEW.ie_tipo_evento = 'S') and (NEW.cd_setor_atendimento is null) then
	-- Obrigatorio informar o setor!

	CALL Wheb_mensagem_pck.exibir_mensagem_abort(264647);
end if;

if (NEW.nr_seq_evento is not null) then
	select	count(*)
	into STRICT	qt_reg_w
	from	qua_evento
	where	nr_sequencia = NEW.NR_SEQ_EVENTO
	and	ie_situacao = 'A';
	-- Obrigatorio informar evento ativo!

	if (qt_reg_w = 0) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(405672);
	end if;
end if;

if (NEW.cd_setor_analise is null) then
	BEGIN
	select	cd_setor_analise
	into STRICT	NEW.cd_setor_analise
	from	qua_evento
	where	nr_sequencia	= NEW.nr_seq_evento;
	exception
	when others then
	null;
	end;
end if;

select	max(ie_anonimo)
into STRICT	ie_anonimo_w
from	qua_evento
where	nr_sequencia = NEW.nr_seq_evento;

if (ie_anonimo_w = 'S' and (OLD.dt_liberacao is null and NEW.dt_liberacao is not null)) then
	NEW.nm_usuario := obter_desc_expressao(710876);
	NEW.nm_usuario_nrec := obter_desc_expressao(710876);
	NEW.nm_usuario_origem := obter_desc_expressao(710876);
	NEW.cd_profissional := null;	
end if;

if (OLD.dt_liberacao is null) and (NEW.dt_liberacao is not null) then
	 CALL Enviar_Comunic_Evento_trigger(	NEW.nr_sequencia,
					NEW.nr_seq_evento,
					NEW.ds_evento,
					NEW.cd_pessoa_fisica,
					NEW.nr_atendimento,
					NEW.IE_CLASSIFICACAO,
					NEW.cd_estabelecimento,
					NEW.cd_setor_atendimento,
					NEW.nm_usuario,
					NEW.nr_seq_classif_evento);
end if;

if (NEW.nr_seq_turno is null) then
	NEW.nr_seq_turno := Obter_Turno_evento(NEW.DT_EVENTO,NEW.cd_estabelecimento,'SEQ','EQ');
end if;

if (TG_OP = 'INSERT') and (NEW.cd_funcao_ativa is null) then
	NEW.cd_funcao_ativa := wheb_usuario_pck.get_cd_funcao;
end if;

<<Final>>
qt_reg_w	:= 0;
  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_qua_evento_paciente_atual() FROM PUBLIC;

CREATE TRIGGER qua_evento_paciente_atual
	BEFORE INSERT OR UPDATE ON qua_evento_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_qua_evento_paciente_atual();

