-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS evento_cirurgia_pac_before ON evento_cirurgia_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_evento_cirurgia_pac_before() RETURNS trigger AS $BODY$
declare

qt_reg_w		smallint;
ie_Nao_Consiste_Alta_w	varchar(1):='S';
ie_Permite_Evento_Futuro_w varchar(1):='S';
nr_atendimento_w	bigint;	
qt_min_retroativo_w smallint;
dt_alta_w		timestamp;
nr_prescricao_w		bigint;
nr_prescr_mat_esp_w	bigint;
nr_sequencia_w		bigint;
nr_sequencia_ww		bigint;
nr_seq_proc_w		bigint;
nr_seq_estagio_w	bigint;
ie_gera_mat_autorizacao_w	varchar(1);
ie_evento_painel_w	varchar(15);
nr_seq_agenda_w		agenda_paciente.nr_cirurgia%type;
nr_cirurgia_w		bigint;
ie_inicia_equipamento_w evento_cirurgia.ie_inicia_equipamento%type;
cd_perfil_w             perfil.cd_perfil%type   := wheb_usuario_pck.get_cd_perfil;
nm_usuario_w            usuario.nm_usuario%type := wheb_usuario_pck.get_nm_usuario;
cd_estabelecimento_w    estabelecimento.cd_estabelecimento%type:= wheb_usuario_pck.get_cd_estabelecimento;
nr_seq_evento_eritel_w  bigint;
cd_unidade_basica_w     atend_paciente_unidade.cd_unidade_basica%type;
cd_unidade_compl_w      atend_paciente_unidade.cd_unidade_compl%type;
nr_seq_interno_w        atend_paciente_unidade.nr_seq_interno%type;
cd_setor_atendimento_w  atend_paciente_unidade.cd_setor_atendimento%type;

c02 CURSOR FOR
	SELECT	nr_sequencia
	from	prescr_material
	where	nr_prescricao 	= nr_prescricao_w
	and	qt_material 	> 0;
	
c03 CURSOR FOR
	SELECT	a.nr_prescricao,
		b.nr_sequencia
	from	prescr_medica a,
		prescr_material b
	where	a.nr_prescricao = b.nr_prescricao
	and	a.nr_cirurgia 	= NEW.nr_cirurgia
	and 	coalesce(a.ie_tipo_prescr_cirur,0) <> 2
	and	b.qt_material 	> 0
	order by 1;

c04 CURSOR FOR
	SELECT	nr_cirurgia
	from	cirurgia
	where	nr_seq_pepo = OLD.nr_seq_pepo;
BEGIN
  BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

ie_Nao_Consiste_Alta_w := Obter_Param_Usuario(872, 212, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_Nao_Consiste_Alta_w);
nr_seq_evento_eritel_w := obter_param_usuario(872, 534, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, nr_seq_evento_eritel_w);

select	coalesce(max(qt_min_retroativo),0),
	coalesce(max(ie_gera_mat_autorizacao),'N'),
   coalesce(max(ie_inicia_equipamento),'N')
into STRICT	qt_min_retroativo_w,
	ie_gera_mat_autorizacao_w,
   ie_inicia_equipamento_w
from	evento_cirurgia
where	nr_sequencia = NEW.nr_seq_evento;

if (qt_min_retroativo_w > 0) and
	(NEW.dt_registro < (LOCALTIMESTAMP-(qt_min_retroativo_w/1440))) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(252039);
end if;

if (ie_Nao_Consiste_Alta_w = 'N') then
	select	MAX(b.dt_alta)
	into STRICT	dt_alta_w
	from	cirurgia a,
		atendimento_paciente b
	where	a.nr_atendimento 	= b.nr_atendimento
	and	a.nr_cirurgia 		= NEW.nr_cirurgia;
	if (dt_alta_w is not null) and (NEW.dt_registro > dt_alta_w) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(236857);
		--Raaise_application_error(-20011,'Nao e possivel gerar o evento com data superior a data de alta do paciente! Parametro [212]');

	end if;
end if;	

if (NEW.dt_registro > LOCALTIMESTAMP) then
	ie_Permite_Evento_Futuro_w := Obter_Param_Usuario(872, 416, obter_perfil_ativo, NEW.nm_usuario, 0, ie_Permite_Evento_Futuro_w);
	if (ie_Permite_Evento_Futuro_w = 'N') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(236858);
		--Raaise_application_error(-20011,'Nao e possivel gerar o evento com data superior a data atual! Parametro [416]');

	end if;
end if;

if (OLD.ie_situacao = 'A') and (NEW.ie_situacao = 'I') and (ie_gera_mat_autorizacao_w = 'S') then
	select	max(a.nr_prescricao)
	into STRICT	nr_prescr_mat_esp_w
	from	prescr_medica a
	where	a.nr_cirurgia 	= NEW.nr_cirurgia
	and 	coalesce(a.ie_tipo_prescr_cirur,0) <> 2;
	
	select	max(nr_prescricao)
	into STRICT	nr_prescricao_w
	from	cirurgia
	where	nr_cirurgia = NEW.nr_cirurgia;
	
	
	select	max(nr_sequencia)
	into STRICT	nr_sequencia_w
	from	autorizacao_convenio
	where	nr_prescricao = nr_prescricao_w
	and	ie_tipo_autorizacao = 4;
	
	select	max(nr_sequencia)
	into STRICT	nr_sequencia_ww
	from	autorizacao_convenio
	where	nr_prescricao = nr_prescr_mat_esp_w
	and	ie_tipo_autorizacao = 4;
	
	select	max(nr_sequencia)
	into STRICT	nr_seq_proc_w
	from	autorizacao_convenio
	where	nr_prescricao = nr_prescricao_w
	and	ie_tipo_autorizacao = 3;
	
	
	if (nr_sequencia_w is not null) or (nr_sequencia_ww is not null) or (nr_seq_proc_w is not null) then
		select	max(nr_sequencia)
		into STRICT	nr_seq_estagio_w
		from	estagio_autorizacao
		where	ie_situacao = 'A'
		and	ie_interno  = 70
		and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
		
		if (nr_sequencia_w is not null) then
			CALL atualizar_autorizacao_convenio(nr_sequencia_w, NEW.nm_usuario, nr_seq_estagio_w, 'N', 'N', 'N');
		end if;	
		
		if (nr_sequencia_ww is not null) then
			CALL atualizar_autorizacao_convenio(nr_sequencia_ww, NEW.nm_usuario, nr_seq_estagio_w, 'N', 'N', 'N');
		end if;	
		
		if (nr_seq_proc_w is not null) then
			CALL atualizar_autorizacao_convenio(nr_seq_proc_w, NEW.nm_usuario, nr_seq_estagio_w, 'N', 'N', 'N');
		end if;	
		
	end if;	
end if;

select 	max(ie_evento_painel)
into STRICT	ie_evento_painel_w
from	evento_cirurgia
where	nr_sequencia 	= OLD.nr_seq_evento;

if (OLD.dt_inativacao is null) and (NEW.dt_inativacao is not null) and (ie_evento_painel_w is not null) and (ie_evento_painel_w <> 'E') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_agenda_w
	from	agenda_paciente
	where	nr_cirurgia = OLD.nr_cirurgia;
	
	if (nr_seq_agenda_w is not null) then
		BEGIN
			CALL gerar_dados_painel_cirurgia(ie_evento_painel_w,nr_seq_agenda_w,'IP',OLD.nm_usuario,'N');
		exception
		when others then
			qt_reg_w := 0;
		end;
	end if;
	
	if (OLD.nr_seq_pepo is not null) and (OLD.nr_cirurgia is null) then
		open c04;
		loop
		fetch c04 into	
			nr_cirurgia_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			BEGIN
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_agenda_w
			from	agenda_paciente
			where	nr_cirurgia = nr_cirurgia_w;
			if (nr_seq_agenda_w > 0) then
				BEGIN
					CALL gerar_dados_painel_cirurgia(ie_evento_painel_w,nr_seq_agenda_w,'IP',OLD.nm_usuario,'N');
				exception
				when others then
					qt_reg_w := 0;
				end;
			end if;	
			end;
		end loop;
		close c04;
	end if;
end if;		


if (OLD.ie_situacao = 'A') and (NEW.ie_situacao = 'I') and (OLD.nr_sequencia is not null) then
   delete from  cir_paciente_atraso
   where nr_seq_evento = OLD.nr_sequencia;

   BEGIN
   if (coalesce(nr_seq_evento_eritel_w,0) > 0) and (nr_seq_evento_eritel_w = OLD.nr_seq_evento) then
      if (coalesce(NEW.nr_cirurgia,0) > 0) then
         select   max(a.cd_setor_atendimento),
                  max(a.cd_unidade_basica),
                  max(a.cd_unidade_compl),
                  max(a.nr_seq_interno),
                  max(a.nr_atendimento)
         into STRICT     cd_setor_atendimento_w,
                  cd_unidade_basica_w,
                  cd_unidade_compl_w,
                  nr_seq_interno_w,
                  nr_atendimento_w
         from     atend_paciente_unidade a,
                  cirurgia b
         where    a.NR_ATENDIMENTO     = b.NR_ATENDIMENTO
         and      a.DT_ENTRADA_UNIDADE = b.DT_ENTRADA_UNIDADE
         and      b.nr_cirurgia        = NEW.nr_cirurgia;
      elsif (coalesce(NEW.nr_seq_pepo,0) > 0) then
         select   max(a.cd_setor_atendimento),
                  max(a.cd_unidade_basica),
                  max(a.cd_unidade_compl),
                  max(a.nr_seq_interno),
                  max(a.nr_atendimento)
         into STRICT     cd_setor_atendimento_w,
                  cd_unidade_basica_w,
                  cd_unidade_compl_w,
                  nr_seq_interno_w,
                  nr_atendimento_w
         from     atend_paciente_unidade a,
                  cirurgia b
         where    a.NR_ATENDIMENTO     = b.NR_ATENDIMENTO
         and      a.DT_ENTRADA_UNIDADE = b.DT_ENTRADA_UNIDADE
         and      b.nr_seq_pepo        = NEW.nr_seq_pepo;
      end if;
      if (nr_seq_interno_w is not null) then
         CALL insere_w_integracao_eritel(cd_setor_atendimento_w,cd_unidade_basica_w,cd_unidade_compl_w,nr_atendimento_w,'S',nm_usuario_w,cd_estabelecimento_w);
      end if;
   end if;
   exception
   when others then
      null;
   end;
end if;	

if (ie_inicia_equipamento_w = 'S') then
   if (NEW.dt_inativacao is not null) then
      update   equipamento_cirurgia
      set      dt_inicio       = NULL
      where    ((nr_cirurgia    = NEW.nr_cirurgia AND NEW.nr_cirurgia is not null) or
                (nr_seq_pepo    = NEW.nr_seq_pepo AND NEW.nr_seq_pepo is not null))
      and      dt_inicio         = NEW.dt_registro
      and      dt_liberacao      is null;
   else
      if (OLD.dt_registro is null) then
         update   equipamento_cirurgia
         set      dt_inicio      = NEW.dt_registro
         where    ((nr_cirurgia    = NEW.nr_cirurgia AND NEW.nr_cirurgia is not null) or
                   (nr_seq_pepo    = NEW.nr_seq_pepo AND NEW.nr_seq_pepo is not null))
         and      dt_inicio      is null
         and      dt_liberacao   is null;
      else
         update   equipamento_cirurgia
         set      dt_inicio         = NEW.dt_registro
         where    ((nr_cirurgia    = NEW.nr_cirurgia AND NEW.nr_cirurgia is not null) or
                   (nr_seq_pepo    = NEW.nr_seq_pepo AND NEW.nr_seq_pepo is not null))
         and      dt_inicio         = OLD.dt_registro
         and      dt_liberacao      is null;
      end if;
   end if;
end if;

IF ( NEW.dt_registro IS NOT NULL ) THEN
	NEW.ds_utc := substr(obter_data_utc(NEW.dt_registro, 'HV'), 1, 50);
END IF;

IF ( ( OLD.dt_liberacao IS NULL ) OR ( OLD.dt_liberacao <> NEW.dt_liberacao ) ) AND ( NEW.dt_liberacao IS NOT NULL ) THEN
	NEW.ds_utc_atualizacao := substr(obter_data_utc(NEW.dt_liberacao, 'HV'), 1, 50);
END IF;

NEW.ds_stack := substr(dbms_utility.format_call_stack,1,2000);

<<Final>>
qt_reg_w	:= 0;


  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_evento_cirurgia_pac_before() FROM PUBLIC;

CREATE TRIGGER evento_cirurgia_pac_before
	BEFORE INSERT OR UPDATE ON evento_cirurgia_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_evento_cirurgia_pac_before();

