-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS ctb_movimento_atual ON ctb_movimento CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_ctb_movimento_atual() RETURNS trigger AS $BODY$
declare

nr_seq_conta_ans_cred_w         bigint;
nr_seq_conta_ans_deb_w          bigint;
nr_versao_w                                     bigint;
qtd_reg_w                                       bigint;
cd_empresa_w                    ctb_mes_ref.cd_empresa%type;
cd_tipo_lote_contabil_w         lote_contabil.cd_tipo_lote_contabil%type;
ie_tipo_grupo_conta_deb_w       ctb_grupo_conta.ie_tipo%type;
ie_tipo_grupo_conta_cred_w      ctb_grupo_conta.ie_tipo%type;
BEGIN
  BEGIN
if (coalesce(wheb_usuario_pck.get_ie_executar_trigger, 'S') = 'S') then
        if (philips_contabil_pck.get_ie_consistindo_lote = 'N') then
                if (philips_contabil_pck.get_ie_integrando_lote = 'N') then
                        if (NEW.nr_lote_contabil is not null) and (NEW.nm_usuario <> wheb_mensagem_pck.get_texto(798482)) then
                                update  lote_contabil
                                set     dt_consistencia   = NULL
                                where   nr_lote_contabil = NEW.nr_lote_contabil;
                        end if;
                end if;

                if (NEW.nr_lote_contabil is not null) and
                        ((TG_OP = 'INSERT') or (TG_OP = 'UPDATE')) then

                        if (coalesce(NEW.ie_status_origem, '0') <> 'SO' ) and (coalesce(NEW.cd_conta_credito,'0') = '0') and (coalesce(NEW.cd_conta_debito,'0') = '0') then
                                CALL wheb_mensagem_pck.exibir_mensagem_abort(225337,'CD_CONTA_CREDITO_NOVA=' || NEW.cd_conta_credito || ';CD_CONTA_DEBITO_NOVA=' || NEW.cd_conta_debito || ';CD_CONTA_CREDITO_ANT=' || OLD.cd_conta_credito|| ';CD_CONTA_DEBITO_ANT=' || OLD.cd_conta_debito);
                        end if;

                        select  coalesce(max(nr_sequencia),0)
                        into STRICT    nr_versao_w
                        from    ctb_versao_plano_ans
                        where   NEW.dt_movimento between dt_inicio_vigencia and coalesce(dt_fim_vigencia, LOCALTIMESTAMP);

                        BEGIN
                        select  cd_empresa
                        into STRICT    cd_empresa_w
                        from    ctb_mes_ref
                        where   nr_sequencia = NEW.nr_seq_mes_ref;
                        exception when others then
                                if (NEW.cd_estabelecimento is not null) then
                                        cd_empresa_w    := obter_empresa_estab(NEW.cd_estabelecimento);
                                elsif (coalesce(wheb_usuario_pck.get_cd_estabelecimento,0) != 0) then
                                        cd_empresa_w    := obter_empresa_estab(wheb_usuario_pck.get_cd_estabelecimento);
                                end if;
                        end;

                        CALL PHILIPS_CONTABIL_PCK.valida_se_dia_fechado(cd_empresa_w, NEW.dt_movimento);

                        if (nr_versao_w > 0) then
                                select  count(*)
                                into STRICT    qtd_reg_w
                                from    conta_contabil_ans c,
                                        ctb_plano_ans p
                                where   p.nr_sequencia          = c.nr_seq_conta_ans
                                and     p.nr_seq_versao_plano   = nr_versao_w
                                and     ((c.cd_conta_contabil   = NEW.cd_conta_debito) or (c.cd_conta_contabil    = NEW.cd_conta_credito));

                                if (qtd_reg_w > 0) then
                                        /* pega a sequencia do plano ans para gravar a conta debito*/


                                        select  coalesce(max(c.nr_seq_conta_ans),0)
                                        into STRICT    nr_seq_conta_ans_deb_w
                                        from    conta_contabil_ans c,
                                                        ctb_plano_ans p
                                        where   p.nr_sequencia  = c.nr_seq_conta_ans
                                        and             c.cd_conta_contabil = NEW.cd_conta_debito
                                        and             p.nr_seq_versao_plano   =  nr_versao_w;

                                        if (nr_seq_conta_ans_deb_w <> 0) then
                                                NEW.nr_seq_conta_ans_deb := nr_seq_conta_ans_deb_w;
                                        end if;

                                        /* pega a sequencia do plano ans para gravar a conta credito*/


                                        select  coalesce(max(c.nr_seq_conta_ans),0)
                                        into STRICT    nr_seq_conta_ans_cred_w
                                        from    conta_contabil_ans c,
                                                ctb_plano_ans p
                                        where   p.nr_sequencia = c.nr_seq_conta_ans
                                        and     c.cd_conta_contabil = NEW.cd_conta_credito
                                        and     p.nr_seq_versao_plano = nr_versao_w;

                                        if (nr_seq_conta_ans_cred_w <> 0) then
                                                NEW.nr_seq_conta_ans_cred := nr_seq_conta_ans_cred_w;
                                        end if;
                                end if;
                        end if;
                end if;

                BEGIN
                if (TG_OP = 'DELETE') and (OLD.nr_lote_contabil is not null) and (coalesce(OLD.nr_seq_regra_lanc,0) <> 0)then
                        update  ctb_regra_movto_prog
                        set     vl_saldo = vl_saldo + OLD.vl_movimento
                        where   nr_sequencia = OLD.nr_seq_regra_lanc;
                end if;
                exception when others then
                        null;
                end;

                if (obter_nr_seq_locale(NEW.nm_usuario) = 2) then
                    cd_tipo_lote_contabil_w := ctb_obter_tipo_lote_contabil(coalesce(NEW.nr_lote_contabil,0),'C');
                    ie_tipo_grupo_conta_deb_w := philips_contabil_pck.obter_tipo_grupo_conta(NEW.cd_conta_debito);
                    ie_tipo_grupo_conta_cred_w := philips_contabil_pck.obter_tipo_grupo_conta(NEW.cd_conta_credito);

                    if (cd_tipo_lote_contabil_w = 59) then
                        if (ie_tipo_grupo_conta_deb_w <> 'O')then
                            CALL wheb_mensagem_pck.exibir_mensagem_abort(1214575,'DS_CONTA=' || NEW.cd_conta_debito);
                        elsif (ie_tipo_grupo_conta_cred_w <> 'O') then
                            CALL wheb_mensagem_pck.exibir_mensagem_abort(1214575,'DS_CONTA=' || NEW.cd_conta_credito);
                        end if;
                    else
                        if (ie_tipo_grupo_conta_deb_w = 'O')then
                            CALL wheb_mensagem_pck.exibir_mensagem_abort(1214576,'DS_CONTA=' || NEW.cd_conta_debito);
                        elsif (ie_tipo_grupo_conta_cred_w = 'O') then
                            CALL wheb_mensagem_pck.exibir_mensagem_abort(1214576,'DS_CONTA=' || NEW.cd_conta_credito);
                        end if;
                    end if;
                end if;
        end if;
end if;
  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_ctb_movimento_atual() FROM PUBLIC;

CREATE TRIGGER ctb_movimento_atual
	BEFORE INSERT OR UPDATE OR DELETE ON ctb_movimento FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_ctb_movimento_atual();

