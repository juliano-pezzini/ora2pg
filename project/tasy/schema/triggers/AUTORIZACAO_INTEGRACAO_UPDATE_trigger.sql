-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS autorizacao_integracao_update ON autorizacao_integracao CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_autorizacao_integracao_update() RETURNS trigger AS $BODY$
declare
		
				     
				     

tamanho_lista 		bigint := 0;
cd_item			varchar(255);

ds_lista		varchar(2000);
qt_item			varchar(20);

qt_pendente_w		integer := 0;
qt_autorizada_w		integer := 0;
nr_seq_estagio_w	bigint;
ds_erro_w		varchar(2000);
ds_modulo_w		varchar(48);
ds_action_old_w		varchar(32) := '';
ds_action_w		varchar(32) := '';
qt_reg_w		smallint;
BEGIN
  BEGIN

if	wheb_usuario_pck.get_ie_executar_trigger = 'N' then
	goto final;
end if;


DBMS_APPLICATION_INFO.READ_MODULE(ds_modulo_w, ds_action_w);
	
if (coalesce(ds_action_w,'X') <> 'AUTORIZACAO_CONVENIO_AFTUPDATE') then

	DBMS_APPLICATION_INFO.SET_ACTION('AUTORIZACAO_INTEGRACAO_UPDATE');
	BEGIN
	if (NEW.cd_status_autorizacao = 'PA') and (OLD.cd_status_autorizacao <> 'PA') then
		
		if (coalesce(NEW.ds_lista_proc_retorno,'X') <> coalesce(OLD.ds_lista_proc_retorno,'X')) then
		
			ds_lista 	:= NEW.ds_lista_proc_retorno;
			tamanho_lista := length(ds_lista);

			for i in 1..tamanho_lista  loop
				
				if (substr(NEW.ds_lista_proc_retorno,i,1) = 'C') then
						
					cd_item := substr(ds_lista,2,(instr(ds_lista,'Q',1,1)-2));

					if (instr(ds_lista,'C',1,2) > 0) then
						qt_item := substr(ds_lista,(instr(ds_lista,'Q',1,1)+1),(instr(ds_lista,'C',1,2) - (instr(ds_lista,'Q',1,1)+1)));
					else
						qt_item := substr(ds_lista,(instr(ds_lista,'Q',1,1)+1),100);
					end if;
					
					if (instr(ds_lista,'C',1,2) = 0) then
						ds_lista := substr(ds_lista,2,length(ds_lista));
					else
						ds_lista := substr(ds_lista,instr(ds_lista,'C',1,2),length(ds_lista));
					end if;
					
					BEGIN
					if ((qt_item)::numeric  > 0) then
						qt_item := (qt_item)::numeric;
					end if;
					exception
					when others then
						CALL Wheb_mensagem_pck.exibir_mensagem_abort(949182,'QT_ITEM='||qt_item);
					end;
					
			
					
					BEGIN
					if ((cd_item)::numeric  > 0) then
						cd_item := (cd_item)::numeric;
					end if;
					exception
					when others then
						CALL Wheb_mensagem_pck.exibir_mensagem_abort(949181,'CD_ITEM='||cd_item);
					end;
					
				
					update	procedimento_autorizado
					set	qt_autorizada 	= qt_item,
						nm_usuario	= wheb_mensagem_pck.get_texto(934860),
						dt_atualizacao	= LOCALTIMESTAMP
					where	nr_sequencia_autor = NEW.nr_sequencia_autor
					and	obter_se_contido(nr_sequencia,NEW.ds_lista_sequences) = 'S'
					and	((cd_procedimento_tuss = cd_item) or (cd_procedimento_convenio = cd_item) or (cd_procedimento	= cd_item));

				end if;
				
			end loop;
			
			if (tamanho_lista = length(ds_lista)) then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(949181,'CD_ITEM='||ds_lista);
			end if;
		end if;
		
		if (NEW.cd_senha is not null) then
			BEGIN
			select	min(nr_sequencia)
			into STRICT	nr_seq_estagio_w
			from	estagio_autorizacao
			where	ie_situacao	= 'A'
			and	coalesce(ie_parcial,'N') = 'S'
			and	ie_interno	= '10';
			
			update	autorizacao_convenio
			set	cd_senha	= NEW.cd_senha,
				dt_atualizacao	= LOCALTIMESTAMP,
				nm_usuario	= wheb_mensagem_pck.get_texto(934860),
				dt_retorno	= LOCALTIMESTAMP
			where	nr_sequencia	= NEW.nr_sequencia_autor;
			
			
			CALL ATUALIZAR_AUTORIZACAO_CONVENIO(NEW.nr_sequencia_autor,wheb_mensagem_pck.get_texto(934860),nr_seq_estagio_w,'N','N','N');
			end;
		end if;
		

	elsif (NEW.cd_status_autorizacao = 'A') and (OLD.cd_status_autorizacao <> 'A') and (NEW.cd_senha is not null) then	

		select	min(nr_sequencia)
		into STRICT	nr_seq_estagio_w
		from	estagio_autorizacao
		where	ie_situacao	= 'A'
		and	coalesce(ie_parcial,'N') = 'N'
		and	ie_interno	= '10';
		
		

		update	autorizacao_convenio
		set	cd_senha	= NEW.cd_senha,
			dt_atualizacao	= LOCALTIMESTAMP,
			dt_retorno	= LOCALTIMESTAMP,
			nm_usuario	= wheb_mensagem_pck.get_texto(934860)
		where	nr_sequencia	= NEW.nr_sequencia_autor;	
		
		update   procedimento_autorizado
		 set    	qt_autorizada 		= coalesce(qt_solicitada,0),
			dt_atualizacao		= LOCALTIMESTAMP,
			nm_usuario		= wheb_mensagem_pck.get_texto(934860)
		 where  	nr_sequencia_autor  	= NEW.nr_sequencia_autor;
						
		CALL ATUALIZAR_AUTORIZACAO_CONVENIO(NEW.nr_sequencia_autor,wheb_mensagem_pck.get_texto(934860),nr_seq_estagio_w,'N','N','N');

	elsif (NEW.cd_status_autorizacao = 'N') and (OLD.cd_status_autorizacao <> 'N') then	


		select	min(nr_sequencia)
		into STRICT	nr_seq_estagio_w
		from	estagio_autorizacao
		where	ie_situacao	= 'A'
		and	ie_interno	= '90';
		
		update	autorizacao_convenio
		set	dt_atualizacao	= LOCALTIMESTAMP,
			dt_retorno	= LOCALTIMESTAMP,
			nm_usuario	= wheb_mensagem_pck.get_texto(934860)
		where	nr_sequencia	= NEW.nr_sequencia_autor;
		
		CALL ATUALIZAR_AUTORIZACAO_CONVENIO(NEW.nr_sequencia_autor,wheb_mensagem_pck.get_texto(934860),nr_seq_estagio_w,'N','N','N');
	elsif (NEW.cd_status_autorizacao = 'E') and (OLD.cd_status_autorizacao <> 'E') then
		
		select	min(nr_sequencia)
		into STRICT	nr_seq_estagio_w
		from	estagio_autorizacao
		where	ie_situacao	= 'A'
		and	ie_interno	= '5';
		
		CALL ATUALIZAR_AUTORIZACAO_CONVENIO(NEW.nr_sequencia_autor,wheb_mensagem_pck.get_texto(934860),nr_seq_estagio_w,'N','N','N');
	end if;
	DBMS_APPLICATION_INFO.SET_ACTION(ds_action_w);
	
	
	exception
	when others then
		NEW.ds_erro_proc := OLD.ds_erro_proc || chr(13)|| sqlerrm;
		NEW.cd_status_autorizacao := 'EI';
		DBMS_APPLICATION_INFO.SET_ACTION(ds_action_w);
	end;
end if;

<<final>>
qt_reg_w := 0;
  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_autorizacao_integracao_update() FROM PUBLIC;

CREATE TRIGGER autorizacao_integracao_update
	BEFORE UPDATE ON autorizacao_integracao FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_autorizacao_integracao_update();

