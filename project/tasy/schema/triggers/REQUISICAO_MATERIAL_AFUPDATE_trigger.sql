-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS requisicao_material_afupdate ON requisicao_material CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_requisicao_material_afupdate() RETURNS trigger AS $BODY$
declare

nr_sequencia_w			far_setores_integracao.nr_sequencia%type;
cd_local_estoque_w		local_estoque.cd_local_estoque%type;
cd_centro_custo_w		centro_custo.cd_centro_custo%type;
cd_local_estoque_req_w		local_estoque.cd_local_estoque%type;
ds_param_integ_hl7_w		varchar(4000) := '';
ie_local_cc_swisslog_w		varchar(1) := 'N';
ie_local_cc_supplypoint_w	varchar(1) := 'N';
reg_integracao_p		gerar_int_padrao.reg_integracao;
nr_seq_regra_w			regra_integr_movto_estoque.nr_sequencia%type;
ds_retorno_integracao_w 	text;


c01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	far_setores_integracao a,
		empresa_integracao b
	where	b.nm_empresa = 'SWISSLOG'
	and	a.nr_seq_empresa_int = b.nr_sequencia;

c02 CURSOR FOR
	SELECT	cd_local_estoque,
		cd_centro_custo
	from	far_local_cc_int
	where	nr_seq_far_setores = nr_sequencia_w;

c03 CURSOR FOR
	SELECT	a.nr_sequencia
	from	far_setores_integracao a
	where	a.nr_seq_empresa_int = 82;

c04 CURSOR FOR
	SELECT	cd_local_estoque,
		cd_centro_custo
	from	far_local_cc_int
	where	nr_seq_far_setores = nr_sequencia_w;
BEGIN
  BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
if (NEW.dt_aprovacao is not null) and (OLD.dt_aprovacao is null) then
	BEGIN

	reg_integracao_p.ie_operacao		:=	'I';
	reg_integracao_p.cd_estab_documento		:=	NEW.cd_estabelecimento;
	reg_integracao_p.cd_operacao_estoque	:=	NEW.cd_operacao_estoque;
	reg_integracao_p.cd_local_estoque		:=	NEW.cd_local_estoque;
	reg_integracao_p.cd_local_estoque_destino	:=	NEW.cd_local_estoque_destino;
	reg_integracao_p.cd_centro_custo		:=	NEW.cd_centro_custo;
	reg_integracao_p.cd_operacao_estoque		:=	NEW.cd_operacao_estoque;
	

	reg_integracao_p := gerar_int_padrao.gravar_integracao('30', NEW.nr_requisicao, NEW.nm_usuario, reg_integracao_p);
	
	open c01;
	loop
	fetch c01 into
		nr_sequencia_w;
	EXIT WHEN NOT FOUND or ie_local_cc_swisslog_w = 'S';  /* apply on c01 */
		BEGIN
		open c02;
		loop
		fetch c02 into
			cd_local_estoque_w,
			cd_centro_custo_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			BEGIN
			if (NEW.cd_local_estoque_destino is not null) and
				(cd_local_estoque_w > 0 AND cd_local_estoque_w = NEW.cd_local_estoque_destino) then
				ie_local_cc_swisslog_w := 'S';
				exit;
			elsif (NEW.cd_centro_custo is not null) and
				(cd_centro_custo_w > 0 AND cd_centro_custo_w = NEW.cd_centro_custo) then
				ie_local_cc_swisslog_w := 'S';
				exit;
			end if;
			end;
		end loop;
		close c02;
		end;
	end loop;
	close c01;
	
	select	coalesce(max(cd_local_estoque_req),1)
	into STRICT	cd_local_estoque_req_w
	from	parametros_farmacia
	where	cd_estabelecimento = NEW.cd_estabelecimento;
	
	if (NEW.cd_local_estoque = cd_local_estoque_req_w) and (ie_local_cc_swisslog_w = 'S') then
		ds_param_integ_hl7_w := 'nr_requisicao=' || NEW.nr_requisicao || obter_separador_bv;
		CALL swisslog_gerar_integracao(440, ds_param_integ_hl7_w);
	end if;
	
	open c03;
	loop
	fetch c03 into
		nr_sequencia_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		BEGIN
		open c04;
		loop
		fetch c04 into
			cd_local_estoque_w,
			cd_centro_custo_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			BEGIN
			if (NEW.cd_local_estoque_destino is not null) and
				(cd_local_estoque_w > 0 AND cd_local_estoque_w = NEW.cd_local_estoque_destino) then
				ie_local_cc_supplypoint_w := 'S';
				exit;
			elsif (NEW.cd_centro_custo is not null) and
				(cd_centro_custo_w > 0 AND cd_centro_custo_w = NEW.cd_centro_custo) then
				ie_local_cc_supplypoint_w := 'S';
				exit;
			end if;
			end;
		end loop;
		close c04;
		end;
	end loop;
	close c03;
	
	if (NEW.cd_local_estoque = cd_local_estoque_req_w) and (ie_local_cc_supplypoint_w = 'S') then
		ds_param_integ_hl7_w := 'nr_requisicao=' || NEW.nr_requisicao || obter_separador_bv;
		CALL supplypoint_gerar_integracao(440, ds_param_integ_hl7_w);
	end if;
	exception
	when others then
		null;
	end;
end if;
if (NEW.dt_liberacao is not null) and (OLD.dt_liberacao is null) then
	-- Integracao Padrao

	select  max(obter_regra_int_mov_estoque( 'P', '0', '0', em.cd_grupo_material,
			em.cd_subgrupo_material, em.cd_classe_material, em.cd_material, null))
	into STRICT    nr_seq_regra_w
	from    estrutura_material_v em,
		material m,
		item_requisicao_material i
	where	em.cd_material	= m.cd_material
	and	i.cd_material	= m.cd_material
	and	i.nr_requisicao	= NEW.nr_requisicao;
	
	if (coalesce(nr_seq_regra_w,0) = 0) then
		-- Integracao LogisOne

		select  max(obter_regra_int_mov_estoque( 'LGO', '0', '0', em.cd_grupo_material,
				em.cd_subgrupo_material, em.cd_classe_material, em.cd_material, null))
		into STRICT    nr_seq_regra_w
		from    estrutura_material_v em,
			material m,
			item_requisicao_material i
		where	em.cd_material	= m.cd_material
		and	i.cd_material	= m.cd_material
		and	i.nr_requisicao	= NEW.nr_requisicao;
	end if;

	if (coalesce(nr_seq_regra_w,0) > 0) then
		select	bifrost.send_integration(
				'materials.requisition.send',
				'com.philips.tasy.integration.materialsrequisition.outbound.MaterialRequisitionAddedCallback',
				'{"id" : '||NEW.nr_requisicao||'}',
				NEW.nm_usuario_lib)
		into STRICT	ds_retorno_integracao_w
		;
	end if;
end if;
end if;
  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_requisicao_material_afupdate() FROM PUBLIC;

CREATE TRIGGER requisicao_material_afupdate
	AFTER UPDATE ON requisicao_material FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_requisicao_material_afupdate();

