-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS paciente_senha_fila_update ON paciente_senha_fila CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_paciente_senha_fila_update() RETURNS trigger AS $BODY$
declare
nr_seq_mov_senha_w		bigint;
nr_seq_movimentacao_senha_w		movimentacao_senha_fila.nr_sequencia%type;
nr_seq_fila_espera_destino_w	bigint;
ie_transfere_w			varchar(1);
ie_limpa_inicio_fim_atend_w	varchar(1);
ie_ajusta_fila_origem_w		varchar(1);
ie_inicia_atend_chamar_w	varchar(1);
ie_finaliza_atend_vinc_w	varchar(1);
ie_reabilita_senha_w	varchar(1);
ie_utiliza_lista_senha_w	varchar(1);
nr_sequencia_mov_ant_w		bigint;
nr_prioridade_w			bigint;
nr_fila_destino_w			bigint;
ie_permite_set_dt_fim_w	varchar(1);
ie_atualiza_status_recep_w varchar(1);
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then

if	(((((coalesce(NEW.dt_chamada_pa, to_date('01/01/3300', 'dd/mm/yyyy'))) = (coalesce(OLD.dt_chamada_pa, to_date('01/01/3300', 'dd/mm/yyyy'))))) and
	((coalesce(NEW.dt_chamada, to_date('01/01/3300', 'dd/mm/yyyy')) = (coalesce(OLD.dt_chamada, to_date('01/01/3300', 'dd/mm/yyyy'))))) and
	((coalesce(NEW.dt_primeira_chamada, to_date('01/01/3300', 'dd/mm/yyyy')) = (coalesce(OLD.dt_primeira_chamada, to_date('01/01/3300', 'dd/mm/yyyy')))))) and
	((coalesce(NEW.ds_maquina_chamada, 'X') <> (coalesce(OLD.ds_maquina_chamada, 'X'))))) then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(322428);
end if;

ie_transfere_w := obter_param_usuario(10021, 59, Obter_perfil_Ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_transfere_w);
ie_limpa_inicio_fim_atend_w := obter_param_usuario(10021, 82, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_limpa_inicio_fim_atend_w);
ie_ajusta_fila_origem_w := obter_param_usuario(10021, 83, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_ajusta_fila_origem_w);
ie_inicia_atend_chamar_w := obter_param_usuario(10021, 84, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_inicia_atend_chamar_w);
ie_finaliza_atend_vinc_w := obter_param_usuario(10021, 87, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_finaliza_atend_vinc_w);
ie_reabilita_senha_w := obter_param_usuario(10021, 90, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_reabilita_senha_w);
ie_utiliza_lista_senha_w := obter_param_usuario(10021, 99, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_utiliza_lista_senha_w);
ie_permite_set_dt_fim_w := Obter_param_Usuario(10021, 172, obter_perfil_ativo, obter_usuario_ativo, obter_estabelecimento_ativo, ie_permite_set_dt_fim_w);
ie_atualiza_status_recep_w := Obter_param_Usuario(10021, 173, obter_perfil_ativo, obter_usuario_ativo, obter_estabelecimento_ativo, ie_atualiza_status_recep_w);

if (ie_permite_set_dt_fim_w = 'S' and NEW.dt_fim_atendimento is not null and OLD.dt_fim_atendimento is null)then
	NEW.ie_status_recepcao := 'A';
end if;

if (ie_atualiza_status_recep_w = 'S') then
	if (NEW.DT_FIM_ATENDIMENTO is not null)then
		NEW.ie_status_recepcao := 'F';
	elsif (NEW.DT_CHAMADA is not null) then
		NEW.ie_status_recepcao := 'C';
	else
		NEW.ie_status_recepcao := 'A';
	end if;
end if;


if	((coalesce(NEW.dt_chamada, 			LOCALTIMESTAMP + interval '1 days') <> coalesce(OLD.dt_chamada, 			LOCALTIMESTAMP + interval '1 days')) or (coalesce(NEW.dt_chamada_pa, 		LOCALTIMESTAMP + interval '1 days') <> coalesce(OLD.dt_chamada_pa, 		LOCALTIMESTAMP + interval '1 days')) or (coalesce(NEW.dt_primeira_chamada, 	LOCALTIMESTAMP + interval '1 days') <> coalesce(OLD.dt_primeira_chamada, 	LOCALTIMESTAMP + interval '1 days'))) then
	NEW.ie_rechamada := null;
end if;

if (ie_inicia_atend_chamar_w = 'S') and (OLD.dt_inicio_atendimento is null) and
	((NEW.dt_chamada is not null 		and (coalesce(NEW.dt_chamada, 		LOCALTIMESTAMP + interval '1 days') <> coalesce(OLD.dt_chamada, 		LOCALTIMESTAMP + interval '1 days'))) or (NEW.dt_chamada_pa is not null	and (coalesce(NEW.dt_chamada_pa, 		LOCALTIMESTAMP + interval '1 days') <> coalesce(OLD.dt_chamada_pa, 		LOCALTIMESTAMP + interval '1 days'))) or (NEW.dt_primeira_chamada is not null	and (coalesce(NEW.dt_primeira_chamada,	LOCALTIMESTAMP + interval '1 days') <> coalesce(OLD.dt_primeira_chamada, 	LOCALTIMESTAMP + interval '1 days')))) then
	NEW.dt_inicio_atendimento := LOCALTIMESTAMP;
end if;

if (ie_finaliza_atend_vinc_w = 'S') and (OLD.dt_vinculacao_senha is null) and (NEW.dt_vinculacao_senha is not null) then
	NEW.dt_fim_atendimento := LOCALTIMESTAMP;
end if;

if	((OLD.dt_inicio_atendimento is null) or (OLD.dt_inicio_atendimento <> NEW.dt_inicio_atendimento)) and (NEW.dt_inicio_atendimento is not null) then
	
	select	nextval('atendimentos_senha_seq')
	into STRICT	nr_seq_mov_senha_w
	;

	select	max(nr_sequencia)
	into STRICT	nr_seq_movimentacao_senha_w
	from	movimentacao_senha_fila
	where	nr_seq_pac_senha_fila = NEW.nr_sequencia
	and		dt_saida is null;	
	
	insert	into atendimentos_senha(
		nr_sequencia,
		dt_inicio_atendimento,
		nm_usuario_inicio,
		dt_fim_atendimento,
		nm_usuario_fim,
		nr_seq_pac_senha_fila,
		nr_seq_local_chamada,
		nr_seq_fila_espera,
		nr_seq_mov_senha_fila)
	values (nr_seq_mov_senha_w,
		NEW.dt_inicio_atendimento,
		NEW.nm_usuario,
		null,
		null,
		NEW.nr_sequencia,
		NEW.nr_seq_local_senha,
		NEW.nr_seq_fila_senha,
		nr_seq_movimentacao_senha_w);
	
elsif (OLD.dt_fim_atendimento is null) and (NEW.dt_fim_atendimento is not null) then
	
	-- Verificar se existe registro dessa senha na tabela de log

	BEGIN
		select	nr_sequencia
		into STRICT	nr_seq_mov_senha_w
		from	atendimentos_senha
		where	nr_seq_pac_senha_fila = NEW.nr_sequencia
		and	dt_fim_atendimento is null  LIMIT 1;
	exception
		when	no_data_found then
			nr_seq_mov_senha_w := 0;
	end;

	if (nr_seq_mov_senha_w > 0) then
		/* Normalmente ira entrar neste if, para finalizar o atendimento da senha, o registro de inicio ja deveria ter sido criado (em uma transacao anterior) */


		update	atendimentos_senha
		set	dt_fim_atendimento = NEW.dt_fim_atendimento,
			nm_usuario_fim = NEW.nm_usuario
		where	nr_seq_pac_senha_fila = NEW.nr_sequencia
		and	dt_fim_atendimento is null;
	end if;

	-- Tratar o campo "fila de destino" do cadastro de filas

	select	max(nr_seq_fila_espera_destino)
	into STRICT	nr_seq_fila_espera_destino_w
	from	fila_espera_senha
	where	nr_sequencia = NEW.nr_seq_fila_senha;
	
	if (nr_seq_fila_espera_destino_w is not null) then		
		NEW.nr_seq_fila_senha := nr_seq_fila_espera_destino_w;
	else	
	-- caso o usuario possua o parametro 161 cadastrado, e a fila nao tenha uma fila destino  informada, a fila destino sera igual ao valor informado no parametro

		nr_fila_destino_w := obter_param_usuario(10021, 161, Obter_perfil_Ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, nr_fila_destino_w);
		if  (nr_fila_destino_w > 0 AND OLD.nr_seq_fila_senha <> nr_fila_destino_w) then
			NEW.nr_seq_fila_senha := nr_fila_destino_w;
		end if;	
	end if;
	
end if;

	-- se mudou de fila OU se alocou a senha na mesma fila.

If (	coalesce(OLD.nr_seq_fila_senha, 0) <> coalesce(NEW.nr_seq_fila_senha, 0)) or (	OLD.dt_entrada_fila is not null and
		NEW.dt_entrada_fila is not null and
		OLD.dt_entrada_fila <> NEW.dt_entrada_fila) then

	if	((coalesce(OLD.dt_retorno_senha, LOCALTIMESTAMP) = coalesce(NEW.dt_retorno_senha, LOCALTIMESTAMP)) and (NEW.dt_entrada_fila = OLD.dt_entrada_fila))	then
		NEW.dt_entrada_fila := LOCALTIMESTAMP;
	end if;
	
	-- Atualizar fila da triagem

	update 	triagem_pronto_atend
	set 	nr_seq_pac_fila = NEW.nr_seq_fila_senha
	where 	nr_seq_fila_senha = NEW.nr_sequencia;
	
	-- Limpar informacao da chamada, dependendo do parametro 59

	if (ie_transfere_w <> 'H') and
		((ie_transfere_w = 'S') or (NEW.dt_vinculacao_senha is null)) then
		NEW.dt_primeira_chamada	:= null;
		NEW.ds_maquina_chamada 	:= null;
		NEW.nr_seq_local_senha 	:= null;
		NEW.dt_chamada	   		:= null;
		NEW.nm_usuario_chamada 	:= null;
		NEW.dt_nova_chamada		:= null;
		NEW.dt_chamada_pa		:= null;
	end if;
	
	-- Limpar informacao de inicio e fim de atendimento dependendo do parametro 82

	If (ie_limpa_inicio_fim_atend_w = 'S') then
		NEW.dt_inicio_atendimento	:= null;
		NEW.dt_fim_atendimento		:= null;
	end if;
	
	-- Limpar informacao de fila de origem dependendo do parametro 83

	if (ie_ajusta_fila_origem_w = 'N') then
		NEW.nr_seq_fila_senha_origem := NEW.nr_seq_fila_senha;
	end if;

	-- Limpar informacao de nao respondeu dependendo do parametro 90

	if (ie_reabilita_senha_w = 'S') then
		NEW.qt_chamadas			:= null;
		NEW.ie_rechamada			:= null;
	end if;	
		
	--informar a data de saida 

	select	max(nr_sequencia)	
	into STRICT	nr_sequencia_mov_ant_w
	from 	MOVIMENTACAO_SENHA_FILA
	where	NR_SEQ_PAC_SENHA_FILA = OLD.nr_sequencia;
	
	if ( nr_sequencia_mov_ant_w is not null)	then
		update	MOVIMENTACAO_SENHA_FILA
		set	dt_saida = LOCALTIMESTAMP
		where	NR_SEQUENCIA = nr_sequencia_mov_ant_w;
	end if;	

	
	-- Gravar log da movimentacao

	select	nextval('movimentacao_senha_fila_seq')
	into STRICT	nr_seq_mov_senha_w
	;	
		
	insert	into movimentacao_senha_fila(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_pac_senha_fila,
		nr_seq_fila_espera,
		dt_entrada)
	values (
		nr_seq_mov_senha_w,	
		LOCALTIMESTAMP,
		NEW.nm_usuario,
		LOCALTIMESTAMP,
		NEW.nm_usuario,
		NEW.nr_sequencia,
		NEW.nr_seq_fila_senha,
		LOCALTIMESTAMP);
		
	-- se tiver atendimentos_senha com inicio de atendimento mas sem fim atendimento, registra o fim.

	
	-- Verificar se existe registro dessa senha na tabela de log

	BEGIN
		select	nr_sequencia
		into STRICT	nr_seq_mov_senha_w
		from	atendimentos_senha
		where	nr_seq_pac_senha_fila = NEW.nr_sequencia
		and	dt_fim_atendimento is null  LIMIT 1;
	exception
		when	no_data_found then
			nr_seq_mov_senha_w := 0;
	end;

	if (nr_seq_mov_senha_w > 0) then
		/* finalizar o atendimento da senha, o registro de inicio ja deveria ter sido criado (em uma transacao anterior) */


		update	atendimentos_senha
		set	dt_fim_atendimento = coalesce(NEW.dt_fim_atendimento,LOCALTIMESTAMP),
			nm_usuario_fim = NEW.nm_usuario
		where	nr_seq_pac_senha_fila = NEW.nr_sequencia
		and	dt_fim_atendimento is null;
	end if;
	
				
end if;

if (OLD.dt_inutilizacao is null) and (NEW.dt_inutilizacao is not null) then
	insert into log_mov(dt_atualizacao,
				nm_usuario, 
				ds_log, 
				cd_log)
			values (LOCALTIMESTAMP,
				NEW.nm_usuario,
				substr(dbms_utility.format_call_stack,1,1800),
				7832548);				
	
end if;


if (coalesce(OLD.nm_usuario_chamada, 'X') <> coalesce(NEW.nm_usuario_chamada, 'X')) then
  update movimentacao_senha_fila
  set NM_USUARIO_CHAMADA = NEW.nm_usuario_chamada 
  where NR_SEQ_PAC_SENHA_FILA = NEW.nr_sequencia 
  and NR_SEQ_FILA_ESPERA = NEW.nr_seq_fila_senha
  and DT_SAIDA is null;
end if;


-- Gravar log de chamadas

if	(((coalesce(NEW.dt_chamada_pa, to_date('01/01/3300', 'dd/mm/yyyy')) <> coalesce(OLD.dt_chamada_pa, to_date('01/01/3300', 'dd/mm/yyyy'))) and NEW.dt_chamada_pa is not null) or
	((coalesce(NEW.dt_chamada, to_date('01/01/3300', 'dd/mm/yyyy')) <> coalesce(OLD.dt_chamada, to_date('01/01/3300', 'dd/mm/yyyy'))) and NEW.dt_chamada is not null) or
	((coalesce(NEW.dt_primeira_chamada, to_date('01/01/3300', 'dd/mm/yyyy')) <> coalesce(OLD.dt_primeira_chamada, to_date('01/01/3300', 'dd/mm/yyyy'))) and NEW.dt_primeira_chamada is not null)) then
	CALL gerar_hist_geren_senhas(NEW.nr_sequencia,NEW.ds_maquina_chamada,NEW.nm_usuario,NEW.ie_forma_chamada);
	CALL gerar_senha_painel_led(NEW.nr_sequencia,NEW.nr_seq_local_senha,NEW.nm_usuario);

	if (ie_utiliza_lista_senha_w = 'S'
		or ie_utiliza_lista_senha_w = 'T') then
		CALL gerar_senha_fila_visualizacao(NEW.nr_sequencia,NEW.nr_seq_local_senha,NEW.nm_usuario);
	end if;
end if;

if (coalesce(NEW.ds_maquina_chamada, 'X') <> coalesce(OLD.ds_maquina_chamada, 'X')) or (NEW.ds_maquina_chamada_pesquisa is null) then
  NEW.ds_maquina_chamada_pesquisa := padronizar_nome(NEW.ds_maquina_chamada);
end if;

-- Ao vincular a senha com uma pessoa fisica, altera a senha para prioritaria de acordo com a Regra de prioridade de senhas (Shift+F11)

if (OLD.cd_pessoa_fisica is null and
	 NEW.cd_pessoa_fisica is not null) then
	if (OBTER_SE_PAC_SENHA_PRIOR_REGRA(NEW.cd_pessoa_fisica) = 'S') then
		select	max(coalesce(nr_prioridade_padrao, nr_prioridade))
		into STRICT	nr_prioridade_w
		from	fila_espera_senha
		where	nr_sequencia = NEW.nr_seq_fila_senha;
		
		if (nr_prioridade_w is not null) then
			NEW.nr_prioridade := nr_prioridade_w - 1;
		end if;
	end if;
end if;

--Gravar log de senhas da fila

if (coalesce(OLD.cd_pessoa_fisica, 'X') <> coalesce(NEW.cd_pessoa_fisica, 'X')) then
	insert	into paciente_senha_fila_log(
		nr_sequencia,
		nr_seq_senha,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		cd_funcao_ativa,
		ds_log,
		ds_stack)
	values (
		nextval('paciente_senha_fila_log_seq'),
		NEW.nr_sequencia,
		LOCALTIMESTAMP,
		NEW.nm_usuario,
		LOCALTIMESTAMP,
		NEW.nm_usuario,
		wheb_usuario_pck.get_cd_funcao,
		wheb_mensagem_pck.get_texto(1017760,'DE='||obter_nome_pessoa_fisica(coalesce(OLD.cd_pessoa_fisica, 'X'), '')||';PARA='||obter_nome_pessoa_fisica(coalesce(NEW.cd_pessoa_fisica, 'X'), '')),
		substr(dbms_utility.format_call_stack,1,4000));
end if;

end if;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_paciente_senha_fila_update() FROM PUBLIC;

CREATE TRIGGER paciente_senha_fila_update
	BEFORE UPDATE ON paciente_senha_fila FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_paciente_senha_fila_update();

