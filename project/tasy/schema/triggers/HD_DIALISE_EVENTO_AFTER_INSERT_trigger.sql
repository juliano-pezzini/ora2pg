-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS hd_dialise_evento_after_insert ON hd_dialise_evento CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_hd_dialise_evento_after_insert() RETURNS trigger AS $BODY$
declare

cd_perfil_w		integer;
ds_tipo_evento_w	varchar(80);
ds_mensagem_w		varchar(2000);
nr_atendimento_w	bigint;
nm_paciente_w		varchar(255);
ds_texto_evento_w	varchar(4000);
ds_perfil_adicional_w	varchar(4000);
nm_usuarios_dest_w	varchar(4000);
nm_usuario_w		varchar(15);
ds_status_evento_w	varchar(20);
ds_unid_dialise_w	varchar(80);
cd_estab_exclusivo_w	smallint;
ie_estab_registro_w	varchar(1);
cd_estab_CI_w		smallint;
C01 CURSOR FOR
	SELECT	cd_perfil
	from	hd_tipo_evento
	where	nr_sequencia = NEW.nr_seq_tipo_evento
	
union

	SELECT	cd_perfil
	from	hd_tipo_evento_perfil
	where	nr_seq_tipo = NEW.nr_seq_tipo_evento
	order by 1;
	
C02 CURSOR FOR
	SELECT	nm_usuario_evento
	from	hd_tipo_evento_usuario
	where	nr_seq_tipo = NEW.nr_seq_tipo_evento
	order by 1;

BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then
	
	select	coalesce(max(cd_perfil),0),
		max(ds_tipo_evento),                                                          
		max(ds_texto_padrao), --andrey                                                
		max(cd_estab_exclusivo),                                                      
		coalesce(max(ie_estab_registro),'N')                                               
	into STRICT	cd_perfil_w,                                                              
		ds_tipo_evento_w,                                                             
		ds_texto_evento_w,                                                            
		cd_estab_exclusivo_w,                                                         
		ie_estab_registro_w                                                           
	from	hd_tipo_evento                                                            
	where	nr_sequencia = NEW.nr_seq_tipo_evento;
                                                                           
	if (cd_estab_exclusivo_w is not null) then                                     
		cd_estab_CI_w := cd_estab_exclusivo_w;
	elsif (ie_estab_registro_w = 'S') then                                         
		cd_estab_CI_w := wheb_usuario_pck.get_cd_estabelecimento;
	else                                                                           
		cd_estab_CI_w := null;
	end if;
	
	select 	max(nr_atendimento),
		max(substr(obter_nome_pf(cd_pessoa_fisica),1,200)) nm_paciente,
		max(substr(hd_obter_desc_unid_dialise(nr_seq_unid_dialise),1,80))
	into STRICT	nr_atendimento_w,
		nm_paciente_w,
		ds_unid_dialise_w
	from   	hd_dialise
	where  	nr_sequencia = NEW.nr_seq_dialise;
	
	if (TG_OP = 'INSERT') then
		ds_status_evento_w	:= wheb_mensagem_pck.get_texto(308028); -- Inclusao
	else
		ds_status_evento_w	:= wheb_mensagem_pck.get_texto(308030); -- Alteracao
	end if;
	
	if (ds_texto_evento_w is not null) then
		ds_mensagem_w	:= ds_texto_evento_w;		
		
		ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@status_evento', ds_status_evento_w),1,2000);
		ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@paciente', nm_paciente_w),1,2000);
		ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@atendimento', nr_atendimento_w),1,2000);
		ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@data_evento', PKG_DATE_FORMATERS_TZ.TO_VARCHAR(NEW.dt_evento, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)),1,2000);
		ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@observacao', NEW.ds_observacao),1,2000);
		ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@tipo_evento', ds_tipo_evento_w),1,2000);
		ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@usuario', Obter_Nome_Usuario(NEW.nm_usuario)),1,2000);
		ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@unidadedialise', ds_unid_dialise_w),1,2000);
		
	else	
		if (TG_OP = 'INSERT') then
			ds_mensagem_w:= wheb_mensagem_pck.get_texto(308031, 'DS_TIPO_EVENTO_W=' || ds_tipo_evento_w || ';' ||
																'NM_USUARIO=' || Obter_Nome_Usuario(NEW.nm_usuario));
							--  Inclusao do evento #@DS_TIPO_EVENTO_W#@ pelo usuario #@NM_USUARIO#@.

		else
			Ds_mensagem_w:= wheb_mensagem_pck.get_texto(308032, 'DS_TIPO_EVENTO_W=' || ds_tipo_evento_w || ';' ||
																'NM_USUARIO=' || Obter_Nome_Usuario(NEW.nm_usuario));
							--  Alteracao do evento #@DS_TIPO_EVENTO_W#@ pelo usuario #@NM_USUARIO#@.

		end if;	
		ds_mensagem_w:= ds_mensagem_w||wheb_rtf_pck.get_quebra_linha|| wheb_mensagem_pck.get_texto(308033) || ': '||nm_paciente_w; -- Paciente
		ds_mensagem_w:= ds_mensagem_w||wheb_rtf_pck.get_quebra_linha|| wheb_mensagem_pck.get_texto(308034) || ': '||nr_atendimento_w; -- Atendimento
		ds_mensagem_w:= ds_mensagem_w||wheb_rtf_pck.get_quebra_linha|| wheb_mensagem_pck.get_texto(308035) || ': '||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(NEW.dt_evento, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone); -- Data do evento
		ds_mensagem_w:= ds_mensagem_w||wheb_rtf_pck.get_quebra_linha|| wheb_mensagem_pck.get_texto(308036) || ': '||NEW.ds_observacao; -- Observacao
	end if;	
	
	open C01;
	loop
	fetch C01 into	
		cd_perfil_w;		
	EXIT WHEN NOT FOUND; /* apply on C01 */
		if (ds_perfil_adicional_w is null) or (position(cd_perfil_w in ds_perfil_adicional_w) = 0) then
			ds_perfil_adicional_w := substr(cd_perfil_w  || ',' || ds_perfil_adicional_w,1,4000);
		end if;
	end loop;
	close C01;
	
	open C02;
	loop
	fetch C02 into	
		nm_usuario_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		if (nm_usuarios_dest_w is null) or (position(nm_usuario_w in nm_usuarios_dest_w) = 0) then
			nm_usuarios_dest_w	:= substr(nm_usuario_w  || ',' || nm_usuarios_dest_w,1,4000);
		end if;
	end loop;
	close C02;
	
	if (cd_perfil_w > 0) then
		insert into comunic_interna(dt_comunicado,
				ds_titulo,
				ds_comunicado,
				nm_usuario,
				dt_atualizacao,
				ie_geral,
				nm_usuario_destino,
				cd_perfil,
				nr_sequencia,
				ie_gerencial,
				nr_seq_classif,
				ds_perfil_adicional,
				cd_setor_destino,
				cd_estab_destino,
				ds_setor_adicional,
				dt_liberacao,
				ds_grupo,
				nm_usuario_oculto)
		values (LOCALTIMESTAMP,
				wheb_mensagem_pck.get_texto(308037, 'DS_TIPO_EVENTO_W=' || ds_tipo_evento_w), -- Registro do evento #@DS_TIPO_EVENTO_W#@
				wheb_rtf_pck.get_texto_rtf(ds_mensagem_w),
				NEW.nm_usuario,
				LOCALTIMESTAMP,
				'N',
				nm_usuarios_dest_w,
				--null,

				ds_perfil_adicional_w,
				nextval('comunic_interna_seq'),
				'N',
				null,
				ds_perfil_adicional_w,
				null,
				cd_estab_CI_w,
				null,
				LOCALTIMESTAMP,
				null,
				null);
	end if;			
end if;

RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_hd_dialise_evento_after_insert() FROM PUBLIC;

CREATE TRIGGER hd_dialise_evento_after_insert
	AFTER INSERT OR UPDATE ON hd_dialise_evento FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_hd_dialise_evento_after_insert();

