-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS log_retorno_sms_after_ins ON log_retorno_sms CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_log_retorno_sms_after_ins() RETURNS trigger AS $BODY$
declare

nr_seq_agenda_w			agenda_consulta.nr_sequencia%type;
nr_seq_agenda_pac_w		agenda_paciente.nr_sequencia%type;
cd_pessoa_fisica_w		varchar(20);
nr_seq_forma_confirmacao_w		bigint;
cd_estabelecimento_w		bigint;
nr_celular_w			varchar(50);
nr_seq_ageint_w			bigint;

nr_ddd_celular_w			varchar(50);
nr_telefone_celular_w		varchar(50);
ie_retorno_canc_w			varchar(1);
qt_hor_cancel_w			bigint;

cd_agenda_w			agenda_consulta.cd_agenda%type;
dt_agenda_w			timestamp;
ie_classif_agenda_w agenda_consulta.ie_classif_agenda%type;
ie_tipo_retorno_w		varchar(1);
qt_dias_confirmacao_w	ageint_texto_confirm_sms.qt_dias_confirmacao%type;
qt_dias_confirmacao_ww	ageint_texto_confirm_sms.qt_dias_confirmacao%type;
ds_motivo_cancelamento_w ageint_texto_confirm_sms.ds_motivo_cancelamento%type;
ie_altera_status_confirmada_w	parametro_agenda.ie_altera_status_confirmada%TYPE;
ie_confirm_ret_sms_w				parametro_agenda.ie_confirm_ret_sms%type;
ie_status_confirmado_w			varchar(2) := 'CN';

c01 CURSOR FOR
	SELECT	nr_sequencia,
			cd_agenda,
			dt_agenda,
			ie_classif_agenda
	from	agenda_consulta
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	and		ie_status_agenda = 'N'
	and		dt_confirmacao is null
	and		dt_agenda >= LOCALTIMESTAMP
	and 	((qt_dias_confirmacao_w = 0) or (trunc(dt_agenda) <= trunc(LOCALTIMESTAMP + qt_dias_confirmacao_w)))
	order 	by nr_sequencia;

C02 CURSOR FOR
	SELECT	nr_sequencia,
			cd_agenda,
			hr_inicio
	from	agenda_paciente
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	and		ie_status_agenda = 'N'
	and		dt_confirmacao is null
	and		hr_inicio >= LOCALTIMESTAMP
	and 	((qt_dias_confirmacao_w = 0) or (trunc(hr_inicio) <= trunc(LOCALTIMESTAMP + qt_dias_confirmacao_w)))
	order 	by nr_sequencia;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then

  CALL wheb_usuario_pck.set_ie_commit('N');

	select 	coalesce(max(ie_tipo_retorno),'O')
	into STRICT	ie_tipo_retorno_w
	from	ageint_texto_retorno_sms
	where	trim(both upper(ds_texto)) = trim(both upper(NEW.ds_resposta));

  
	select 	coalesce(max(qt_dias_confirmacao),0) , max(ds_motivo_cancelamento)
	into STRICT	qt_dias_confirmacao_w,
  ds_motivo_cancelamento_w
	from	ageint_texto_confirm_sms
	where	ie_tipo_retorno    = ie_tipo_retorno_w
	and		cd_estabelecimento = coalesce(wheb_usuario_pck.get_cd_estabelecimento,1);

	if (coalesce(qt_dias_confirmacao_w,0) = 0) then
		qt_dias_confirmacao_ww := 30;
	else
		qt_dias_confirmacao_ww := qt_dias_confirmacao_w+1;
	end if;

if (position('SIM' in upper(NEW.ds_resposta)) > 0) or (obter_se_resposta_Sim_cadastro(upper(NEW.ds_resposta)) = 'S'
	or obter_tipo_resposta_sms(NEW.ds_resposta) = 'N') then

	nr_celular_w := NEW.nr_celular;

	if (coalesce(pkg_i18n.get_user_locale, 'pt_BR')	 <> 'en_AU') then
		if (substr(nr_celular_w,1,2) <> '55') then
			nr_celular_w :=  '55'||NEW.nr_celular;
		end if;
	end if;

	nr_ddd_celular_w		:= trim(both substr(nr_celular_w,3,2));
	nr_telefone_celular_w	:= trim(both substr(nr_celular_w,5,50));

	BEGIN
		select	cd_pessoa_fisica,
				cd_estabelecimento
		into STRICT	cd_pessoa_fisica_w,
				cd_estabelecimento_w
		from	pessoa_fisica a
		where	nr_telefone_celular	= nr_celular_w
		and 	dt_obito is null
		and (exists (SELECT 1
				from agenda_consulta x
				where a.cd_pessoa_fisica = x.cd_pessoa_fisica
				and x.dt_agenda between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1)
		or 	exists (select 1
				from agenda_paciente x
				where a.cd_pessoa_fisica = x.cd_pessoa_fisica
				and x.hr_inicio between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1))  LIMIT 1;

	exception
	when no_data_found then

		BEGIN
			select	cd_pessoa_fisica,
					cd_estabelecimento
			into STRICT	cd_pessoa_fisica_w,
					cd_estabelecimento_w
			from	pessoa_fisica a
			where	nr_ddd_celular		= nr_ddd_celular_w
			and		nr_telefone_celular = nr_telefone_celular_w
			and 	dt_obito is null
			and (exists (SELECT 1
					from agenda_consulta x
					where a.cd_pessoa_fisica = x.cd_pessoa_fisica
					and x.dt_agenda between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1)
			or 	exists (select 1
					from agenda_paciente x
					where a.cd_pessoa_fisica = x.cd_pessoa_fisica
					and x.hr_inicio between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1))  LIMIT 1;

		exception
		when no_data_found then

			BEGIN
				select	cd_pessoa_fisica,
						cd_estabelecimento
				into STRICT	cd_pessoa_fisica_w,
						cd_estabelecimento_w
				from	pessoa_fisica a
				where	somente_numero(nr_telefone_celular)	= somente_numero(nr_ddd_celular_w||nr_telefone_celular_w)
				and 	dt_obito is null
				and (exists (SELECT 1
						from agenda_consulta x
						where a.cd_pessoa_fisica = x.cd_pessoa_fisica
						and x.dt_agenda between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1)
				or 	exists (select 1
						from agenda_paciente x
						where a.cd_pessoa_fisica = x.cd_pessoa_fisica
						and x.hr_inicio between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1))  LIMIT 1;

				exception
				when no_data_found then
					BEGIN
						select	max(cd_pessoa_fisica),
								max(cd_estabelecimento)
						into STRICT	cd_pessoa_fisica_w,
								cd_estabelecimento_w
						from	pessoa_fisica a
						where	somente_numero(nr_telefone_celular)	= somente_numero(nr_celular_w)
						and 	dt_obito is null
						and (exists (SELECT 1
								from agenda_consulta x
								where a.cd_pessoa_fisica = x.cd_pessoa_fisica
								and x.dt_agenda between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1)
						or 	exists (select 1
								from agenda_paciente x
								where a.cd_pessoa_fisica = x.cd_pessoa_fisica
								and x.hr_inicio between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1));

						exception
						when no_data_found then
						BEGIN
							select	cd_pessoa_fisica,
									cd_estabelecimento
							into STRICT	cd_pessoa_fisica_w,
									cd_estabelecimento_w
							from	pessoa_fisica a
							where	nr_ddd_celular		= nr_ddd_celular_w
							and		nr_telefone_celular = substr(trim(both nr_telefone_celular_w),2,50)  -- older number format with 8 digits
							and 	dt_obito is null
							and (exists (SELECT 1
									from agenda_consulta x
									where a.cd_pessoa_fisica = x.cd_pessoa_fisica
									and x.dt_agenda between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1)
							or 	exists (select 1
									from agenda_paciente x
									where a.cd_pessoa_fisica = x.cd_pessoa_fisica
									and x.hr_inicio between trunc(LOCALTIMESTAMP) and trunc(LOCALTIMESTAMP) + qt_dias_confirmacao_ww  LIMIT 1))  LIMIT 1;
						end;
					end;
			end;
		end;
	end;

	if (cd_pessoa_fisica_w is not null) then

		select	coalesce(max(a.nr_sequencia),0)
		into STRICT	nr_seq_ageint_w
		from 	agenda_integrada a,
				agenda_integrada_item b,
				agenda_paciente c
		where	a.cd_pessoa_fisica 	= cd_pessoa_fisica_w
		and		c.nr_sequencia 	   	= b.nr_seq_agenda_exame
		and		a.nr_sequencia 	   	= b.nr_seq_agenda_int
		and		c.hr_inicio	  		>= trunc(LOCALTIMESTAMP)
		and		c.ie_status_agenda 	= 'N'
		and		c.dt_confirmacao   	is null;

		if (coalesce(nr_seq_ageint_w,0) = 0) then

			select	coalesce(max(a.nr_sequencia),0)
			into STRICT	nr_seq_ageint_w
			from 	agenda_integrada a,
					agenda_integrada_item b,
					agenda_consulta c
			where	a.cd_pessoa_fisica 	= cd_pessoa_fisica_w
			and		c.nr_sequencia 	   	= b.nr_seq_agenda_cons
			and		a.nr_sequencia 	   	= b.nr_seq_agenda_int
			and		c.dt_agenda	  		>= trunc(LOCALTIMESTAMP)
			and		c.ie_status_agenda 	= 'N'
			and		c.dt_confirmacao   	is null;
		end if;

		/*if (nvl(nr_seq_ageint_w,0) > 0) then
			:new.nr_seq_ageint := nr_seq_ageint_w;
		end if;*/


		SELECT MAX(nr_seq_forma_confirmacao_sms),
		       MAX(coalesce(ie_altera_status_confirmada,'N')),
		       MAX(coalesce(IE_CONFIRM_RET_SMS,'N'))
		  INTO STRICT nr_seq_forma_confirmacao_w,
		       ie_altera_status_confirmada_w,
		       ie_confirm_ret_sms_w
		  FROM parametro_agenda
		 WHERE cd_estabelecimento = coalesce(cd_estabelecimento_w, cd_estabelecimento);

		open c01;
		loop
		fetch c01 into	
			nr_seq_agenda_w,
			cd_agenda_w,
			dt_agenda_w,
         ie_classif_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			BEGIN

        IF ((IE_CONFIRM_RET_SMS_w = 'N')  OR (IE_CONFIRM_RET_SMS_w = 'S' AND
             valida_sms_agenda_regra(ie_classif_agenda_p   => ie_classif_agenda_w,
                                     cd_agenda_p           => cd_agenda_w) = 'S')) THEN
			if (position('SIM' in upper(NEW.ds_resposta)) > 0) or (obter_se_resposta_Sim_cadastro(upper(NEW.ds_resposta)) = 'S') then
				update	agenda_consulta
				set		dt_confirmacao			= LOCALTIMESTAMP,
						nm_usuario_confirm		= 'TASY',
						nm_usuario				= 'TASY',
						nr_seq_forma_confirmacao= nr_seq_forma_confirmacao_w,
						ds_confirmacao			= wheb_mensagem_pck.get_texto(795424),
						ie_status_agenda         = CASE WHEN ie_altera_status_confirmada_w='S' THEN 						                            ie_status_confirmado_w  ELSE ie_status_agenda END 
				where	nr_sequencia			= nr_seq_agenda_w;
      elsif((position('NAO' in upper(NEW.ds_resposta)) > 0) or (obter_se_resposta_Sim_cadastro(upper(NEW.ds_resposta)) = 'N')) then
         if (length(ds_motivo_cancelamento_w) > 0 ) then
           CALL wheb_usuario_pck.set_ie_commit('N');
           BEGIN
             CALL alterar_status_agecons(cd_agenda_w,
                                    nr_seq_agenda_w,
                                    'C',
                                    null,
                                    ds_motivo_cancelamento_w,
                                    'N',
                                    'TASY',
                                    '');
           exception
             when others then
               null;
           end;

           CALL wheb_usuario_pck.set_ie_commit('S');
         end if;
        insert into AGENDA_RETORNO_SMS(NR_SEQUENCIA,
           DT_ATUALIZACAO_NREC,
           DT_ATUALIZACAO,
           NM_USUARIO_NREC,
           NM_USUARIO,
           IE_STATUS,
           NR_SEQ_AGEPAC)
        values (nextval('agenda_retorno_sms_seq'),
           LOCALTIMESTAMP,
           LOCALTIMESTAMP,
           'TASY',
           'TASY',
           'N',
           nr_seq_agenda_pac_w);
			else

				insert into AGENDA_RETORNO_SMS(
					NR_SEQUENCIA,
					DT_ATUALIZACAO_NREC,
					DT_ATUALIZACAO,
					NM_USUARIO_NREC,
					NM_USUARIO,
					IE_STATUS,
					NR_SEQ_AGECONS
				) values (
					nextval('agenda_retorno_sms_seq'),
					LOCALTIMESTAMP,
					LOCALTIMESTAMP,
					'TASY',
					'TASY',
					'N',
					nr_seq_agenda_w
				);
			end if;

        END IF;
			end;
		end loop;
		close c01;


		open C02;
		loop
		fetch C02 into
			nr_seq_agenda_pac_w,
			cd_agenda_w,
			dt_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */

      BEGIN
        IF ((IE_CONFIRM_RET_SMS_w = 'N')  OR (IE_CONFIRM_RET_SMS_w = 'S' AND
             valida_sms_agenda_regra(ie_classif_agenda_p   => ie_classif_agenda_w,
                                     cd_agenda_p           => cd_agenda_w) = 'S')) THEN

			if (position('SIM' in upper(NEW.ds_resposta)) > 0) or (obter_se_resposta_Sim_cadastro(upper(NEW.ds_resposta)) = 'S') then
        update  agenda_paciente
        set    dt_confirmacao        = LOCALTIMESTAMP,
            nm_usuario_confirm      = 'TASY',
            nm_usuario          = 'TASY',
            nr_seq_forma_confirmacao  = nr_seq_forma_confirmacao_w,
            ds_confirmacao        = wheb_mensagem_pck.get_texto(795424),
            ie_status_agenda         = CASE WHEN ie_altera_status_confirmada_w='S' THEN                                        ie_status_confirmado_w  ELSE ie_status_agenda END 

        where  nr_sequencia        = nr_seq_agenda_pac_w;
      elsif((position('NAO' in upper(NEW.ds_resposta)) > 0) or (obter_se_resposta_Sim_cadastro(upper(NEW.ds_resposta)) = 'N')) then
         if (length(ds_motivo_cancelamento_w) > 0 ) then
           CALL wheb_usuario_pck.set_ie_commit('N');
           BEGIN
             CALL alterar_status_agenda(cd_agenda_w,
                                   nr_seq_agenda_pac_w,
                                   'C',
                                   null,
                                   ds_motivo_cancelamento_w,
                                   'N',
                                   'TASY',
                                   '');
           exception
             when others then
               null;
           end;
           CALL wheb_usuario_pck.set_ie_commit('S');
         end if;
        insert into AGENDA_RETORNO_SMS(NR_SEQUENCIA,
           DT_ATUALIZACAO_NREC,
           DT_ATUALIZACAO,
           NM_USUARIO_NREC,
           NM_USUARIO,
           IE_STATUS,
           NR_SEQ_AGEPAC)
        values (nextval('agenda_retorno_sms_seq'),
           LOCALTIMESTAMP,
           LOCALTIMESTAMP,
           'TASY',
           'TASY',
           'N',
           nr_seq_agenda_pac_w);
      else
        insert into AGENDA_RETORNO_SMS(
          NR_SEQUENCIA,
          DT_ATUALIZACAO_NREC,
          DT_ATUALIZACAO,
          NM_USUARIO_NREC,
          NM_USUARIO,
          IE_STATUS,
          NR_SEQ_AGEPAC
        ) values (
          nextval('agenda_retorno_sms_seq'),
          LOCALTIMESTAMP,
          LOCALTIMESTAMP,
          'TASY',
          'TASY',
          'N',
          nr_seq_agenda_pac_w
        );
      end if;

        END IF;
      end;
    end loop;
    close C02;

  end if;
end if;
end if;
CALL wheb_usuario_pck.set_ie_commit('S');
  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_log_retorno_sms_after_ins() FROM PUBLIC;

CREATE TRIGGER log_retorno_sms_after_ins
	AFTER INSERT ON log_retorno_sms FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_log_retorno_sms_after_ins();

