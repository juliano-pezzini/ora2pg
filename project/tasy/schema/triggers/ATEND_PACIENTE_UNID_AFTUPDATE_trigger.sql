-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atend_paciente_unid_aftupdate ON atend_paciente_unidade CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atend_paciente_unid_aftupdate() RETURNS trigger AS $BODY$
DECLARE
ie_alta_w				varchar(1);
nr_externo_w			unidade_atendimento.nr_externo%type;
cd_classif_setor_cross_w 	bigint;
qt_conv_int_cross_w		bigint;
ie_operacao_w			varchar(1);
ie_cancelado_w			varchar(1);

BEGIN

cd_classif_setor_cross_w := obter_classif_setor_cross(NEW.cd_setor_atendimento);
qt_conv_int_cross_w := obter_conv_int_cross(NEW.nr_atendimento);

select 	max(NR_EXTERNO)
into STRICT	nr_externo_w
from 	unidade_atendimento 
where 	CD_UNIDADE_BASICA = NEW.CD_UNIDADE_BASICA 
and  	CD_UNIDADE_COMPL = NEW.CD_UNIDADE_COMPL 
and 	cd_setor_atendimento = NEW.cd_setor_atendimento;

select 	CASE WHEN dt_alta IS NULL THEN  'N'  ELSE 'S' END ,
	CASE WHEN dt_cancelamento IS NULL THEN  'N'  ELSE 'S' END
into STRICT 	ie_alta_w,
	ie_cancelado_w
from 	atendimento_paciente
where 	nr_atendimento = NEW.nr_atendimento;

if (coalesce(OLD.dt_saida_unidade,LOCALTIMESTAMP) <> coalesce(NEW.dt_saida_unidade,LOCALTIMESTAMP)) and (nr_externo_w is not null) and (cd_classif_setor_cross_w > 0) and (qt_conv_int_cross_w > 0) then

	if (OLD.dt_saida_unidade is null and NEW.dt_saida_unidade is not null and ie_alta_w = 'S') then
			-- Saída

			CALL gravar_integracao_cross(280, 'NR_ATENDIMENTO='|| NEW.nr_atendimento || ';CD_ESTABELECIMENTO='|| wheb_usuario_pck.get_cd_estabelecimento || ';');
	ELSIF (OLD.dt_saida_unidade is not null and NEW.dt_saida_unidade is null and ie_alta_w = 'N') then --(Desfazer alta)
		-- Internação

		CALL gravar_integracao_cross(277, 'NR_ATENDIMENTO='|| NEW.nr_atendimento || ';CD_ESTABELECIMENTO='|| wheb_usuario_pck.get_cd_estabelecimento || ';');
	end if;
end if;

/*Só manda para integração se ainda não teve alta. A informação de ALTA é enviada pela trigger ATENDIMENTO_PACIENTE_AFTUPDATE*/


if (ie_cancelado_w = 'N') and (ie_alta_w = 'N') then
	ie_operacao_w := 'A';
	
	CALL intpd_enviar_atendimento(NEW.nr_atendimento, ie_operacao_w, '0', NEW.nm_usuario);
	/*O parametro ie_controle_tag_p é usado para controlar se foi uma movimentação de paciente.
		0 - Nao foi uma movimentação
		1 - Foi uma movimentação
	Neste caso, não é uma inserção na movimentação do paciente, então é 0 */

end if;



RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atend_paciente_unid_aftupdate() FROM PUBLIC;

CREATE TRIGGER atend_paciente_unid_aftupdate
	AFTER UPDATE ON atend_paciente_unidade FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atend_paciente_unid_aftupdate();

