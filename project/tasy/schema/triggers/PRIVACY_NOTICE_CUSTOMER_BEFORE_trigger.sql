-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS privacy_notice_customer_before ON privacy_notice_customer CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_privacy_notice_customer_before() RETURNS trigger AS $BODY$
DECLARE qt_blocker_w smallint;
  qt_nr_sequencia_w  smallint;
  NR_SEQ_OUT_COMUNIC bigint;
  pragma autonomous_transaction;
  BEGIN
    IF (NEW.nr_sequencia >0 AND NEW.dt_initial_vigencia <= NEW.dt_final_vigencia) THEN
      SELECT coalesce(MAX(1),0)
      INTO STRICT qt_blocker_w
      FROM PRIVACY_NOTICE_CUSTOMER
      WHERE nr_sequencia          <> NEW.nr_sequencia
      AND ie_situacao              = 'A'
      AND (trunc(NEW.dt_final_vigencia) < trunc(LOCALTIMESTAMP)
      OR trunc(NEW.dt_initial_vigencia) < trunc(LOCALTIMESTAMP)
      OR NEW.dt_initial_vigencia BETWEEN DT_INITIAL_VIGENCIA AND DT_FINAL_VIGENCIA
      OR NEW.dt_final_vigencia BETWEEN DT_INITIAL_VIGENCIA AND DT_FINAL_VIGENCIA);
    ELSIF (NEW.dt_initial_vigencia <= NEW.dt_final_vigencia) THEN
      SELECT coalesce(MAX(1),0)
      INTO STRICT qt_blocker_w
      FROM PRIVACY_NOTICE_CUSTOMER
      WHERE trunc(NEW.dt_initial_vigencia) <= trunc(LOCALTIMESTAMP)
      OR trunc(NEW.dt_final_vigencia)      <= trunc(LOCALTIMESTAMP)
      OR NEW.dt_initial_vigencia BETWEEN DT_INITIAL_VIGENCIA AND DT_FINAL_VIGENCIA
      OR NEW.dt_final_vigencia BETWEEN DT_INITIAL_VIGENCIA AND DT_FINAL_VIGENCIA
      AND ie_situacao = 'A';
    ELSE
      qt_blocker_w:= 1;
    END IF;
    IF (qt_blocker_w = 1) THEN
      CALL wheb_mensagem_pck.exibir_mensagem_abort(1062913);
    END IF;
--used in delphi/java

if (NEW.ds_privacidade_varchar is not null) then
	if ((INSTR(upper(NEW.ds_privacidade_varchar), '.PDF', -1)) = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1118334);
	end if;
end if;
    IF (NEW.ie_situacao   = 'I' AND OLD.ie_situacao IS NOT NULL) THEN
      NEW.IE_NOTIFICATION := 'N';
    END IF;
    IF ((qt_blocker_w = 0) AND (NEW.IE_NOTIFICATION <> coalesce(OLD.IE_NOTIFICATION,'X'))) THEN
      NR_SEQ_OUT_COMUNIC := INSERT_COMUNIC_PRIVACY_NOTICE(NEW.DT_INITIAL_VIGENCIA, NEW.nm_usuario, NEW.IE_NOTIFICATION, OLD.NR_SEQUENCIA_IC, NR_SEQ_OUT_COMUNIC);
      NEW.NR_SEQUENCIA_IC := NR_SEQ_OUT_COMUNIC;
    END IF;
    COMMIT;
  RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_privacy_notice_customer_before() FROM PUBLIC;

CREATE TRIGGER privacy_notice_customer_before
	BEFORE INSERT OR UPDATE ON privacy_notice_customer FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_privacy_notice_customer_before();

