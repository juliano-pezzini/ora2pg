-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS tie_json_pepo_pdf_integration ON relat_cirurgia_pdf_serial CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_tie_json_pepo_pdf_integration() RETURNS trigger AS $BODY$
DECLARE
    cd_pessoa_fisica_w	   relat_cirurgia_pdf_serial.cd_pessoa_fisica%TYPE;
	nr_atendimento_w	   relat_cirurgia_pdf_serial.nr_atendimento%TYPE;
	nr_cirurgia_w		   relat_cirurgia_pdf_serial.nr_cirurgia%TYPE;
	dt_atualizacao_w	   relat_cirurgia_pdf_serial.dt_atualizacao%TYPE;
	nr_seq_relatorio_w	   relat_cirurgia_pdf_serial.nr_seq_relatorio%TYPE;
	dt_relatorio_w		   relat_cirurgia_pdf_serial.dt_relatorio%TYPE;

    FUNCTION iso_formatter(
        date_in IN timestamp
    ) RETURN text IS
        date_w varchar(23);
    BEGIN
        IF ( dt_relatorio_w IS NOT NULL OR dt_atualizacao_w IS NOT NULL ) THEN
            date_w := pkg_date_utils.get_isoformat(date_in) || 'Z';
        END IF;

        RETURN date_w;
    END;

    PROCEDURE process_event_send_report IS
        json_w        philips_json := philips_json();
        json_data_w   CLOB;
    BEGIN
       json_w.put(pair_name => 'patientNumber', pair_value => cd_pessoa_fisica_w);
        json_w.put(pair_name => 'encounterNumber', pair_value => nr_atendimento_w);
        json_w.put(pair_name => 'reportSequence', pair_value => nr_seq_relatorio_w);
        json_w.put(pair_name => 'reportReleaseDate', pair_value => iso_formatter(dt_relatorio_w));
        json_w.put(pair_name => 'surgeryNumber', pair_value => nr_cirurgia_w);
        json_w.put(pair_name => 'reportUpdateDate', pair_value => iso_formatter(dt_atualizacao_w));
        json_w.put(pair_name => 'pdfSerial', pair_value => 'PDF_SERIAL');
        json_w.put(pair_name => 'sequence', pair_value => NEW.nr_sequencia);
        dbms_lob.createtemporary(json_data_w, true);
        json_w.(json_data_w);
        json_data_w := bifrost.send_integration_content(nm_event => 'send.json.tasy_integration_report', ds_content => json_data_w, nm_user => NEW.nm_usuario);

    END;

BEGIN
    IF ( wheb_usuario_pck.get_ie_executar_trigger = 'S' ) THEN
        BEGIN
	         SELECT
		cd_pessoa_fisica,
		nr_atendimento,
		nr_cirurgia,
		dt_atualizacao,
		nr_seq_relatorio,
		dt_relatorio
	INTO STRICT
	cd_pessoa_fisica_w,
	nr_atendimento_w,
	nr_cirurgia_w,
	dt_atualizacao_w,
	nr_seq_relatorio_w,
	dt_relatorio_w
	FROM (
		SELECT
			a.cd_pessoa_fisica cd_pessoa_fisica,
			a.nr_atendimento nr_atendimento,
			b.nr_cirurgia nr_cirurgia,
			c.nr_sequencia nr_seq_relatorio,
			LOCALTIMESTAMP dt_relatorio,
			LOCALTIMESTAMP dt_atualizacao
		FROM
			atendimento_paciente a,
			cirurgia b,
			relatorio c
		WHERE
			a.cd_pessoa_fisica = NEW.cd_pessoa_fisica
			AND a.nr_atendimento = NEW.nr_atendimento
			AND b.cd_pessoa_fisica = a.cd_pessoa_fisica
			AND b.nr_atendimento = a.nr_atendimento
			AND c.nr_sequencia = NEW.nr_seq_relatorio
			) alias1 LIMIT 1;

        END;

        IF ( cd_pessoa_fisica_w IS NOT NULL AND nr_atendimento_w IS NOT NULL AND nr_cirurgia_w IS NOT NULL ) THEN
            process_event_send_report;
        END IF;

    END IF;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_tie_json_pepo_pdf_integration() FROM PUBLIC;

CREATE TRIGGER tie_json_pepo_pdf_integration
	AFTER INSERT OR UPDATE ON relat_cirurgia_pdf_serial FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_tie_json_pepo_pdf_integration();

