-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS material_estab_atual ON material_estab CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_material_estab_atual() RETURNS trigger AS $BODY$
declare

cd_material_estoque_w		integer;
qt_itens_w			bigint;

qt_disp_estoque_w		double precision;
qt_estoque_w			double precision;
qt_estoque_lote_w		double precision;
qt_emprestimo_w			double precision;

qt_disp_estoque_normal_w	double precision;
qt_estoque_normal_w		double precision;
qt_estoque_lote_normal_w	double precision;

qt_disp_estoque_consig_w	double precision;
qt_estoque_consig_w		double precision;
qt_estoque_lote_consig_w	double precision;

qt_dia_interv_ressup_w		bigint;
qt_dia_ressup_forn_w		bigint;
qt_dia_estoque_minimo_w		bigint;

qt_reg_saldo_lote_normal_w	bigint;
qt_reg_saldo_lote_consig_w	bigint;
qt_reg_saldo_w			bigint;

ie_abc_w			varchar(1);
ie_atualizar_w			varchar(1);
ie_consignado_w			varchar(1);
ie_obg_estoque_lote_w		varchar(1);

cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
nr_registro_anvisa_w		material_estab.nr_registro_anvisa%type;
dt_validade_reg_anvisa_w	material_estab.dt_validade_reg_anvisa%type;
ie_parametro_17_w		varchar(255) := 'N';

BEGIN
if	(TG_OP = 'UPDATE' AND OLD.ie_estoque_lote <> NEW.ie_estoque_lote) or (TG_OP = 'INSERT') and (NEW.ie_estoque_lote = 'S') then
	BEGIN
	qt_disp_estoque_consig_w	:= 0;
	qt_estoque_consig_w		:= 0;
	qt_estoque_lote_consig_w	:= 0;
	qt_disp_estoque_normal_w	:= 0;
	qt_estoque_normal_w		:= 0;
	qt_estoque_lote_normal_w	:= 0;

	select	ie_consignado,
		cd_material_estoque
	into STRICT	ie_consignado_w,
		cd_material_estoque_w
	from	material
	where	cd_material = NEW.cd_material;

	select	sum(b.qt_material)
	into STRICT	qt_emprestimo_w
	from	emprestimo c,
		emprestimo_material b
	where	b.nr_emprestimo		= c.nr_emprestimo
	and	b.qt_material		> 0
	and	c.ie_situacao		<> 'I'
	and	c.cd_estabelecimento = NEW.cd_estabelecimento
	and	exists (
		SELECT	1
		from	material a
		where	a.cd_material_estoque	= cd_material_estoque_w
		and	a.cd_material 		= b.cd_material);

	if (ie_consignado_w <> '1') then
		BEGIN
		qt_estoque_normal_w := obter_saldo_estoque( NEW.cd_estabelecimento, cd_material_estoque_w, null, PKG_DATE_UTILS.START_OF(LOCALTIMESTAMP,'month'), qt_estoque_normal_w);

		select	count(1),
			coalesce(sum(a.qt_estoque), 0)
		into STRICT	qt_reg_saldo_lote_normal_w,
			qt_estoque_lote_normal_w
		from	saldo_estoque_lote a
		where	a.cd_estabelecimento = NEW.cd_estabelecimento
		and	a.cd_material = cd_material_estoque_w
		and	a.dt_mesano_referencia = (
				SELECT	max(x.dt_mesano_referencia)
				from	saldo_estoque_lote x
				where	x.cd_estabelecimento = a.cd_estabelecimento
				and	x.cd_local_estoque = a.cd_local_estoque
				and	x.cd_material = a.cd_material
				and	x.nr_seq_lote = a.nr_seq_lote)
		and	a.qt_estoque <> 0;
		end;
	end if;

	if (ie_consignado_w <> '0') then
		BEGIN
		qt_estoque_consig_w := obter_saldo_estoque_consig(NEW.cd_estabelecimento, null, cd_material_estoque_w, null);

		select	count(1),
			coalesce(sum(qt_estoque), 0)
		into STRICT	qt_reg_saldo_lote_consig_w,
			qt_estoque_lote_consig_w
		from	fornecedor_mat_consig_lote a
		where	a.cd_estabelecimento = NEW.cd_estabelecimento
		and	a.cd_material = cd_material_estoque_w
		and	a.dt_mesano_referencia = (
				SELECT	max(x.dt_mesano_referencia)
				from	fornecedor_mat_consig_lote x
				where	x.cd_estabelecimento = a.cd_estabelecimento
				and	x.cd_local_estoque = a.cd_local_estoque
				and	x.cd_material = a.cd_material
				and	x.cd_fornecedor = a.cd_fornecedor
				and	x.nr_seq_lote = a.nr_seq_lote)
		and	a.qt_estoque <> 0;
		end;
	end if;

	qt_reg_saldo_w		:=	coalesce(qt_reg_saldo_lote_consig_w,0) + coalesce(qt_reg_saldo_lote_normal_w,0);
	qt_disp_estoque_w	:=	coalesce(qt_disp_estoque_normal_w,0) + coalesce(qt_disp_estoque_consig_w,0) + qt_emprestimo_w;
	qt_estoque_w		:=	coalesce(qt_estoque_normal_w,0) + coalesce(qt_estoque_consig_w,0);
	qt_estoque_lote_w	:=	coalesce(qt_estoque_lote_normal_w,0) + coalesce(qt_estoque_lote_consig_w,0);

	if (NEW.ie_estoque_lote = 'S') then
		BEGIN
		if	(qt_estoque_lote_w = 0 AND (qt_emprestimo_w <> 0 or qt_estoque_w <> 0)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(187664, 'QT_DISPONIVEL=' || to_char(qt_disp_estoque_w) || ';'||
									'QT_ESTOQUE=' || to_char(qt_estoque_w));
			/*r.aise_application_error(-20011,
					'Para iniciar controle de estoque por lote, deve ser zerado o estoque atual do material.' || chr(13) || chr(10) ||
					'Saldo disponível: ' || qt_disp_estoque_w || chr(13) || chr(10) ||
					'Saldo em estoque: ' || qt_estoque_w);*/
		elsif (qt_estoque_lote_w <> qt_estoque_w) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(187681, 'QT_SALDO_LOTE=' || to_char(qt_estoque_lote_w) || ';'||
									'QT_ESTOQUE=' || to_char(qt_estoque_w));
			/*r.aise_application_error(-20011,
					'Para iniciar o controle de estoque por lote, a soma dos saldos dos lotes deve ser igual ao saldo do material.' || chr(13) || chr(10) ||
					'Saldo lotes: ' || qt_estoque_lote_w || chr(13) || chr(10) ||
					'Saldo em estoque: ' || qt_estoque_w);*/
		end if;
		end;
	else
		BEGIN
		if	((qt_estoque_lote_w <> 0) or (qt_estoque_w <> 0) or (qt_reg_saldo_w > 0)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(187684, 'QT_SALDO_LOTE=' || to_char(qt_estoque_lote_w) || ';'||
									'QT_ESTOQUE=' || to_char(qt_estoque_w));
			/*r.aise_application_error(-20011,
					'Para finalizar o controle de estoque por lote, o saldo do material e dos lotes devem estar zerados.' || chr(13) || chr(10) ||
					'Saldo lotes: ' || qt_estoque_lote_w || chr(13) || chr(10) ||
					'Saldo em estoque: ' || qt_estoque_w);*/
		end if;
		end;
	end if;

	ie_obg_estoque_lote_w := substr(OBTER_SE_ESTOQUE_LOTE_OBG(NEW.cd_material, NEW.cd_estabelecimento),1,1);

	if (ie_obg_estoque_lote_w = 'S') and (NEW.ie_estoque_lote = 'N') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(293727);
		--r.aise_application_error(-20011,'É obrigatório o controle de estoque por lote para materiais com essa estrutura!');
	end if;
	end;
end if;

if (TG_OP = 'UPDATE') then
	BEGIN
	if (NEW.ie_curva_xyz is not null) and (NEW.ie_curva_xyz not in ('X','Y','Z')) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(187686);
		/*r.aise_application_error(-20011, 'A Classificação XYZ, não pode ter informação diferente de X,Y ou Z');*/

	end if;

	if (NEW.ie_curva_xyz is not null) and (NEW.ie_curva_xyz <> OLD.ie_curva_xyz) then
		ie_abc_w			:= null;
		SELECT * FROM man_obter_dias_ressup(	NEW.cd_estabelecimento, NEW.cd_material, ie_abc_w, NEW.ie_curva_xyz, qt_dia_interv_ressup_w, qt_dia_ressup_forn_w, qt_dia_estoque_minimo_w, ie_atualizar_w) INTO STRICT qt_dia_interv_ressup_w, qt_dia_ressup_forn_w, qt_dia_estoque_minimo_w, ie_atualizar_w;
		if (ie_atualizar_w	= 'S') then
			NEW.qt_dia_interv_ressup		:= qt_dia_interv_ressup_w;
			NEW.qt_dia_ressup_forn		:= qt_dia_ressup_forn_w;
			NEW.qt_dia_estoque_minimo		:= qt_dia_estoque_minimo_w;
		end if;
	end if;
	end;
elsif (TG_OP = 'INSERT') then
	BEGIN
	ie_obg_estoque_lote_w := substr(OBTER_SE_ESTOQUE_LOTE_OBG(NEW.cd_material, NEW.cd_estabelecimento),1,1);

	if (ie_obg_estoque_lote_w = 'S') and (NEW.ie_estoque_lote = 'N') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(293727);
		--r.aise_application_error(-20011,'É obrigatório o controle de estoque por lote para materiais com essa estrutura!');
	end if;

	ie_parametro_17_w := Obter_Param_Usuario(9900, 17, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_parametro_17_w);

	if (coalesce(ie_parametro_17_w,'N') = 'S') then
		select	max(nr_registro_anvisa),
			max(dt_validade_reg_anvisa)
		into STRICT	nr_registro_anvisa_w,
			dt_validade_reg_anvisa_w
		from	material
		where	cd_material	= NEW.cd_material;

		NEW.nr_registro_anvisa		:= coalesce(NEW.nr_registro_anvisa,nr_registro_anvisa_w);
		NEW.dt_validade_reg_anvisa	:= coalesce(NEW.dt_validade_reg_anvisa,dt_validade_reg_anvisa_w);
	end if;

	end;
end if;

RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_material_estab_atual() FROM PUBLIC;

CREATE TRIGGER material_estab_atual
	BEFORE INSERT OR UPDATE ON material_estab FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_material_estab_atual();

