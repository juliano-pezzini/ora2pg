-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS prescr_mat_hor_update ON prescr_mat_hor CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_prescr_mat_hor_update() RETURNS trigger AS $BODY$
declare

qt_existe_w				integer;
ie_status_lote_w		varchar(3);
ie_tipo_item_w			varchar(10);
nr_atendimento_w		bigint;
cd_setor_atendimento_w	integer;
qt_existe_regra_w		integer;
ie_transf_atend_lote_w	varchar(1) := 'N';
nr_seq_lote_w			ap_lote.nr_sequencia%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
ds_log_w				varchar(2000);
dt_alteracao_w			timestamp;
qt_lotes_susp_w			integer;
nr_lote_agrupamento_w	ap_lote.nr_lote_agrupamento%type;

ie_grava_log_gedipa_w	varchar(1);
ie_info_rastre_prescr_w	varchar(1);
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then

	BEGIN
		select	max(a.cd_estabelecimento)
		into STRICT	cd_estabelecimento_w
		from	prescr_medica	a
		where	a.nr_prescricao	= NEW.nr_prescricao;
		
		select	ie_grava_log_gedipa
		into STRICT	ie_grava_log_gedipa_w
		from	parametros_farmacia
		where	cd_estabelecimento = coalesce(cd_estabelecimento_w,wheb_usuario_pck.get_cd_estabelecimento)  LIMIT 1;
	exception
	when others then
		ie_grava_log_gedipa_w := 'S';	
	end;

	BEGIN
		ie_info_rastre_prescr_w := obter_se_info_rastre_prescr('O', NEW.nm_usuario, obter_perfil_ativo, cd_estabelecimento_w);
	exception
	when others then
		ie_info_rastre_prescr_w := 'N';	
	end;


	if (NEW.dt_suspensao is not null) and (OLD.dt_suspensao is null) then
		BEGIN
		update	ap_lote_item
		set	dt_supensao	= LOCALTIMESTAMP,
			nm_usuario_susp	= NEW.nm_usuario_susp
		where	nr_seq_lote	= NEW.nr_seq_lote
		and	nr_seq_mat_hor	= NEW.nr_sequencia;
		
		if (NEW.ie_agrupador	= 4) then
		
			update	adep_processo
			set		ie_inconsistencia	= 'S',
					dt_cancelamento		= LOCALTIMESTAMP,
					nm_usuario_cancelamento = NEW.nm_usuario,
					dt_suspensao = LOCALTIMESTAMP,
					nm_usuario_susp = NEW.nm_usuario
			where	nr_sequencia		= NEW.nr_seq_processo;
		else
		
			update	adep_processo
			set		ie_inconsistencia	= 'S'
			where	nr_sequencia		= NEW.nr_seq_processo;	
		
		end if;

		/*Verifica se todos os itens pendentes, ja estao suspensos.. se sim. suspende o lote*/


		select	count(*)
		into STRICT	qt_existe_w
		from	ap_lote_item
		where	nr_seq_lote	= NEW.nr_seq_lote
		and	dt_supensao is null;

		-- Somente se ele estiver com Status Gerado

		if (qt_existe_w = 0) then
			select	max(ie_status_lote)
			into STRICT	ie_status_lote_w
			from	ap_lote
			where	nr_sequencia	= NEW.nr_seq_lote;
			
			select	coalesce(max(b.cd_setor_atendimento),0)
			into STRICT	cd_setor_atendimento_w
			from	prescr_medica b,
				ap_lote a
			where	a.nr_prescricao = b.nr_prescricao
			and	nr_sequencia = NEW.nr_seq_lote;
			
			if (cd_setor_atendimento_w > 0) then
				select	coalesce(max(ie_transf_atend_lote),'N')
				into STRICT	ie_transf_atend_lote_w
				from	setor_atendimento
				where	cd_setor_atendimento = cd_setor_atendimento_w;
			end if;
			
			if (ie_status_lote_w = 'G') or (ie_transf_atend_lote_w = 'S') then
				update	ap_lote
				set	ie_status_lote = 'S'
				where	nr_sequencia	= NEW.nr_seq_lote;

				insert into ap_lote_historico(
					nr_sequencia,			dt_atualizacao,
					nm_usuario,			nr_seq_lote,
					ds_evento,			ds_log)
				values (	nextval('ap_lote_historico_seq'),	LOCALTIMESTAMP,
					coalesce(NEW.nm_usuario_susp, 'Tasy'),			NEW.nr_seq_lote,
					--'Suspensao do lote',			'Lote suspenso pela trigger PRESC_MAT_HOR_UPDATE.');

					wheb_mensagem_pck.get_texto(311523),	wheb_mensagem_pck.get_texto(311524));
					
				select	coalesce(max(nr_lote_agrupamento),0)
				into STRICT	nr_lote_agrupamento_w
				from 	ap_lote
				where 	nr_sequencia = NEW.nr_seq_lote;
				
				if (nr_lote_agrupamento_w > 0) then
					
					select	count(*)
					into STRICT	qt_lotes_susp_w
					from 	ap_lote
					where 	nr_lote_agrupamento = nr_lote_agrupamento_w
					and 	coalesce(ie_status_lote,'G') not in ('C','S','CA');
					
					update	ap_lote
					set		ie_status_lote = 'S'
					where	nr_sequencia	= nr_lote_agrupamento_w
					and 	qt_lotes_susp_w = 0;
					
					insert into ap_lote_historico(
					nr_sequencia,			dt_atualizacao,
					nm_usuario,			nr_seq_lote,
					ds_evento,			ds_log)
					values (	nextval('ap_lote_historico_seq'),	LOCALTIMESTAMP,
					coalesce(NEW.nm_usuario_susp, 'Tasy'),			nr_lote_agrupamento_w,
					--'Suspensao do lote',			'Lote suspenso pela trigger PRESC_MAT_HOR_UPDATE.');

					wheb_mensagem_pck.get_texto(311523),	wheb_mensagem_pck.get_texto(311524));
					
				end if;
			end if;
		end if;
		
		update	gedi_medic_atend
		set	ie_status	= 'S'
		where	nr_seq_horario	= NEW.nr_sequencia;
		
		nr_atendimento_w	:= NEW.nr_atendimento;
		
		if (coalesce(NEW.nr_atendimento,0) = 0) then
			select	max(nr_atendimento)
			into STRICT	nr_atendimento_w
			from	prescr_medica
			where	nr_prescricao = NEW.nr_prescricao;
		end if;

		CALL susp_itens_gedi_medic_atend(nr_atendimento_w, NEW.nr_prescricao, NEW.cd_material, NEW.nr_sequencia, NEW.nr_seq_lote, NEW.nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento,1));
		CALL integracao_athena_disp_pck.suspender_item_prescricao(NEW.nr_prescricao, NEW.nr_seq_material, NEW.nr_sequencia, NEW.nm_usuario, 2, NEW.nr_seq_lote);
		CALL gerar_int_dankia_pck.dankia_suspender_horario(NEW.nr_sequencia, NEW.nr_prescricao, NEW.dt_suspensao);

		end;
	elsif (NEW.dt_suspensao is null) and (OLD.dt_suspensao is not null) then
		BEGIN
		
		update	ap_lote_item
		set	dt_supensao	 = NULL,
			nm_usuario_susp	 = NULL,
			ds_maquina_susp	 = NULL
		where	nr_seq_lote	= NEW.nr_seq_lote
		and	nr_seq_mat_hor	= NEW.nr_sequencia;
		
		update	adep_processo
		set		ie_inconsistencia	= 'N',
				dt_cancelamento		 = NULL,
				nm_usuario_cancelamento  = NULL,
				dt_suspensao  = NULL,
				nm_usuario_susp  = NULL
		where	nr_sequencia		= NEW.nr_seq_processo
		and	ie_inconsistencia	= 'S';


		-- Somente se ele estiver com Status Suspenso.. ele volta para Gerado

		select	max(ie_status_lote)
		into STRICT	ie_status_lote_w
		from	ap_lote
		where	nr_sequencia	= NEW.nr_seq_lote;
		
		if (ie_status_lote_w = 'S') then
			update	ap_lote
			set	ie_status_lote = 'G'
			where	nr_sequencia	= NEW.nr_seq_lote;

			insert into ap_lote_historico(
				nr_sequencia,			dt_atualizacao,
				nm_usuario,			nr_seq_lote,
				ds_evento,			ds_log)
			values (	nextval('ap_lote_historico_seq'),	LOCALTIMESTAMP,
				NEW.nm_usuario,			NEW.nr_seq_lote,
				--'Estorno da suspensao do lote',	'Lote voltou para o Status = Gerado pela trigger PRESC_MAT_HOR_UPDATE.');

				wheb_mensagem_pck.get_texto(311525),	wheb_mensagem_pck.get_texto(311526));
					
			select	coalesce(max(nr_lote_agrupamento),0)
			into STRICT	nr_lote_agrupamento_w
			from 	ap_lote
			where 	nr_sequencia = NEW.nr_seq_lote;
			
			if (nr_lote_agrupamento_w > 0) then
				
				update	ap_lote
				set		ie_status_lote = 'G'
				where	nr_sequencia	= nr_lote_agrupamento_w;
				
				insert into ap_lote_historico(
				nr_sequencia,			dt_atualizacao,
				nm_usuario,			nr_seq_lote,
				ds_evento,			ds_log)
				values (	nextval('ap_lote_historico_seq'),	LOCALTIMESTAMP,
				NEW.nm_usuario,			nr_lote_agrupamento_w,
				--'Estorno da suspensao do lote',	'Lote voltou para o Status = Gerado pela trigger PRESC_MAT_HOR_UPDATE.');

				wheb_mensagem_pck.get_texto(311525),	wheb_mensagem_pck.get_texto(311526));
				
			end if;	
		end if;
		end;
	end if;

	/*
	if	(:new.dt_emissao_farmacia is not null) and
		(:old.dt_emissao_farmacia is null) and
		(:new.nr_seq_processo is not null) then
		begin
		update	adep_processo
		set	ie_separado	= 'S'
		where	nr_sequencia	= :new.nr_seq_processo;
		end;
	end if;
	*/

	if ( NEW.ie_Agrupador = 12) then
		update	nut_atend_serv_dia
		set 	dt_fim_horario	= NEW.dt_fim_horario,
			nm_usuario_adm	= NEW.nm_usuario_adm,
			dt_suspensao	= NEW.dt_suspensao,
			nm_usuario_susp	= NEW.nm_usuario_susp
		where 	nr_seq_horario = NEW.nr_sequencia;
	end if;
		
	if (OLD.dt_suspensao is null) and (NEW.dt_suspensao is not null) then
		BEGIN
		update	adep_processo_item
		set	dt_suspensao 		= LOCALTIMESTAMP,
			nm_usuario_suspensao 	= NEW.nm_usuario
		where	nr_seq_processo		= NEW.nr_seq_processo
		and	nr_seq_horario		= NEW.nr_sequencia;
		end;
	elsif (OLD.dt_suspensao is not null) and (NEW.dt_suspensao is null) then
		BEGIN
		update	adep_processo_item
		set	dt_suspensao 		 = NULL,
			nm_usuario_suspensao 	 = NULL
		where	nr_seq_processo		= NEW.nr_seq_processo
		and	nr_seq_horario		= NEW.nr_sequencia;	
		end;
	end if;

	if (OLD.dt_fim_horario	is null) and (NEW.dt_fim_horario is not null) and (NEW.ie_agrupador = 1)	then
		BEGIN

		CALL Gerar_Ganho_Perda_Medic_Dilu(NEW.nr_prescricao,NEW.nr_seq_material,null,coalesce(obter_usuario_ativo,NEW.nm_usuario), NEW.nr_sequencia);
		exception
		when others then
			null;
		end;
	end if;

	if (NEW.ie_situacao = 'I') and (coalesce(OLD.ie_situacao,'A') <> 'I') then	
		
		update	ap_lote_item
		set	dt_supensao	= LOCALTIMESTAMP,
			nm_usuario_susp	= NEW.nm_usuario
		where	nr_seq_lote	= NEW.nr_seq_lote
		and	nr_seq_mat_hor	= NEW.nr_sequencia;

		update	adep_processo
		set	ie_inconsistencia	= 'S'
		where	nr_sequencia		= NEW.nr_seq_processo;
		
		/*Verifica se todos os itens pendentes, ja estao suspensos.. se sim. suspende o lote*/


		select	count(*)
		into STRICT	qt_existe_w
		from	ap_lote_item
		where	nr_seq_lote	= NEW.nr_seq_lote
		and	dt_supensao is null;

		-- Somente se ele estiver com Status Gerado

		if (qt_existe_w = 0) then
			select	max(ie_status_lote)
			into STRICT	ie_status_lote_w
			from	ap_lote
			where	nr_sequencia	= NEW.nr_seq_lote;
			if (ie_status_lote_w = 'G') then
				update	ap_lote
				set	ie_status_lote = 'S'
				where	nr_sequencia	= NEW.nr_seq_lote;

				insert into ap_lote_historico(
					nr_sequencia,			dt_atualizacao,
					nm_usuario,			nr_seq_lote,
					ds_evento,			ds_log)
				values (	nextval('ap_lote_historico_seq'),	LOCALTIMESTAMP,
					NEW.nm_usuario,			NEW.nr_seq_lote,
					--'Suspensao do lote',			'Lote suspenso pela trigger PRESC_MAT_HOR_UPDATE.');

					wheb_mensagem_pck.get_texto(311523),	wheb_mensagem_pck.get_texto(311524));
					
				select	coalesce(max(nr_lote_agrupamento),0)
				into STRICT	nr_lote_agrupamento_w
				from 	ap_lote
				where 	nr_sequencia = NEW.nr_seq_lote;
				
				if (nr_lote_agrupamento_w > 0) then
					
					select	count(*)
					into STRICT	qt_lotes_susp_w
					from 	ap_lote
					where 	nr_lote_agrupamento = nr_lote_agrupamento_w
					and 	coalesce(ie_status_lote,'G') not in ('C','S','CA');
					
					update	ap_lote
					set		ie_status_lote = 'S'
					where	nr_sequencia	= nr_lote_agrupamento_w
					and 	qt_lotes_susp_w = 0;
					
					insert into ap_lote_historico(
					nr_sequencia,			dt_atualizacao,
					nm_usuario,			nr_seq_lote,
					ds_evento,			ds_log)
					values (	nextval('ap_lote_historico_seq'),	LOCALTIMESTAMP,
					coalesce(NEW.nm_usuario_susp, 'Tasy'),			nr_lote_agrupamento_w,
					--'Suspensao do lote',			'Lote suspenso pela trigger PRESC_MAT_HOR_UPDATE.');

					wheb_mensagem_pck.get_texto(311523),	wheb_mensagem_pck.get_texto(311524));
					
				end if;	
			end if;
		end if;
		NEW.nr_seq_lote	:= null;
	end if;

	if (NEW.dt_horario 	<> coalesce(OLD.dt_horario,LOCALTIMESTAMP - interval '1 days')) or (coalesce(NEW.dt_suspensao, LOCALTIMESTAMP - interval '1 days') 	<> coalesce(OLD.dt_suspensao,LOCALTIMESTAMP - interval '1 days')) or (coalesce(NEW.dt_fim_horario, LOCALTIMESTAMP - interval '1 days') <> coalesce(OLD.dt_fim_horario,LOCALTIMESTAMP - interval '1 days')) or (NEW.dt_lib_horario <> coalesce(OLD.dt_lib_horario,LOCALTIMESTAMP - interval '1 days')) or (coalesce(NEW.dt_recusa, LOCALTIMESTAMP - interval '1 days') 	<> coalesce(OLD.dt_recusa,LOCALTIMESTAMP - interval '1 days')) or (coalesce(NEW.dt_bloqueio, LOCALTIMESTAMP - interval '1 days') 	<> coalesce(OLD.dt_bloqueio,LOCALTIMESTAMP - interval '1 days')) then	
		
		if (NEW.ie_agrupador = 1) then
			ie_tipo_item_w	:= 'M';
		elsif (NEW.ie_agrupador = 2) then
			ie_tipo_item_w	:= 'MAT';
		elsif (NEW.ie_agrupador = 8) then
			ie_tipo_item_w	:= 'SNE';
		elsif (NEW.ie_agrupador = 4) then
			ie_tipo_item_w	:= 'SOL';
		elsif (NEW.ie_agrupador = 12) then
			ie_tipo_item_w	:= 'S';	
		elsif (NEW.ie_agrupador = 16) then
			ie_tipo_item_w	:= 'LD';			
		end if;
		
		nr_atendimento_w	:= NEW.nr_atendimento;
		
		BEGIN
		
		if (coalesce(NEW.nr_atendimento,0) = 0) then
			select	max(nr_atendimento)
			into STRICT	nr_atendimento_w
			from	prescr_medica
			where	nr_prescricao = NEW.nr_prescricao;
		end if;

		CALL Atualizar_adep_controle_SC(NEW.nm_usuario, nr_atendimento_w, ie_tipo_item_w, 'S', NEW.nr_prescricao);
		CALL Atualizar_plt_controle(null, nr_atendimento_w, null, ie_tipo_item_w, 'S', NEW.nr_prescricao);	
		exception when others then
		null;
		end;
	end if;

	BEGIN
		select	cd_setor_atendimento
		into STRICT	cd_setor_atendimento_w
		from	prescr_medica
		where	nr_prescricao = NEW.nr_prescricao  LIMIT 1;
	exception
	when others then
		cd_setor_atendimento_w := null;
	end;

	if (cd_setor_atendimento_w is not null) then
		/* Rorina de atualizacao do local de estoque para integracao de dispensario DANKIA 
		Tem a trigger disp_int_ap_lote_local que atualiza o local de estoque*/

		BEGIN
		
		select	count(nr_sequencia)
		into STRICT	qt_existe_regra_w
		from	dis_regra_setor
		where	cd_setor_atendimento = cd_setor_atendimento_w;

		if (qt_existe_regra_w > 0) and (NEW.dt_suspensao is not null) then
		
			update	dispensario_mat_hor
			set	dt_suspensao	= NEW.dt_suspensao,
				ds_motivo_susp	= NEW.ds_motivo_susp,
				ie_lido		= ''
			where	nr_seq_mat_hor	= NEW.nr_sequencia;
			
		end if;	
		exception
			when others then
			null;
		end;	

		/* Rorina de integracao de dispensario Pyxis */

		
		select	count(a.nr_sequencia)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
		into STRICT	qt_existe_regra_w                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
		from	dis_regra_setor a,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
				dis_regra_local_setor b                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
		where	a.nr_sequencia = b.nr_seq_dis_regra_setor                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
		and 	a.cd_setor_atendimento = cd_setor_atendimento_w                                                                                                                                                                                                                                                                                                                                                                                                                                                                
		and 	b.cd_local_estoque is not null;
																																																																																																																															
		if (qt_existe_regra_w > 0) and (OLD.dt_suspensao is null) and (NEW.dt_suspensao is not null) then                                                                                                                                                                                                                                                                                                                                                                                                                                                  
			CALL intdisp_gerar_mat_hor_susp(NEW.nr_prescricao,NEW.nr_sequencia,2,NEW.nm_usuario);
		end if;

		exception                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
			when others then                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
			null;
		end;
	end if;	

	if (coalesce(OLD.qt_dispensar_hor,0) <> coalesce(NEW.qt_dispensar_hor,0)) then
		nr_seq_lote_w := coalesce(NEW.nr_seq_lote,0);
		if (coalesce(NEW.nr_seq_lote,0) = 0)  then
			select	coalesce(max(nr_seq_lote),0)
			into STRICT	nr_seq_lote_w
			from	ap_lote_item
			where	nr_seq_mat_hor = NEW.nr_sequencia;
		end if;
		
		update	ap_lote_item a
		set	a.qt_dispensar = NEW.qt_dispensar_hor
		where	a.nr_seq_mat_hor = NEW.nr_sequencia
		and exists (SELECT 1 from ap_lote b where b.nr_sequencia = a.nr_seq_lote and b.ie_status_lote = 'G');
		
		if (nr_seq_lote_w > 0) then
			insert into ap_lote_historico(
				nr_sequencia,				dt_atualizacao,
				nm_usuario,				nr_seq_lote,
				ds_evento,				ds_log)
			values (	nextval('ap_lote_historico_seq'),		LOCALTIMESTAMP,
				coalesce(NEW.nm_usuario, 'Tasy'),		NEW.nr_seq_lote,
				wheb_mensagem_pck.get_texto(322408),	wheb_mensagem_pck.get_texto(322410,'OLD_QT='||coalesce(OLD.qt_dispensar_hor,0)||';NEW_QT='||coalesce(NEW.qt_dispensar_hor,0)));
				/* Codigo () = Alteracao item | Codigo () = Alterada a quantidade a dispensar do item na tabela PRESCR_MAT_HOR. Quantidade (old/new) = */


		end if;
	end if;

	if (OLD.dt_suspensao is null) and (NEW.dt_suspensao is not null) then
		-- Rotina para suspencao do item da prescricao na integracao

		CALL swisslog_suspender_prescr(NEW.nr_prescricao,0,NEW.nr_sequencia,NEW.nm_usuario,3);
	end if;

	if (ie_grava_log_gedipa_w = 'S') and (coalesce(OLD.nr_seq_processo,0) <> coalesce(NEW.nr_seq_processo,0)) then
		insert into log_gedipa(	nr_sequencia, dt_log, nr_log,
									nm_objeto_execucao, nm_objeto_chamado, 
									ds_parametros, 
									ds_log, nr_seq_processo)
						values (	obter_nextval_sequence('log_gedipa'), LOCALTIMESTAMP, 2100, 
									'PRESCR_MAT_HOR_UPDATE', 'PRESCR_MAT_HOR_UPDATE', 
									substr('NR_SEQ_PROCESSO OLD/NEW(' || to_char(OLD.nr_seq_processo) || '/' || to_char(NEW.nr_seq_processo) || ') NR_SEQ_HORARIO = ' || NEW.nr_sequencia,1,1999), 
									substr(wheb_mensagem_pck.get_texto(311528) || chr(10) || 'STACK: ' || dbms_utility.format_call_stack,1,1999), 
									coalesce(NEW.nr_seq_processo,OLD.nr_seq_processo));
	end if;

	if (coalesce(OLD.nr_seq_turno,0) <> coalesce(NEW.nr_seq_turno,0)) then
		ds_log_w := ds_log_w || ' TURNO OLD/NEW(' ||OLD.nr_seq_turno || '/' || NEW.nr_seq_turno || ')';
	end if;
	if (coalesce(OLD.cd_local_estoque,0) <> coalesce(NEW.cd_local_estoque,0)) then
		ds_log_w := ds_log_w || ' CD_LOCAL_ESTOQUE OLD/NEW(' ||OLD.cd_local_estoque || '/' || NEW.cd_local_estoque || ')';
	end if;
	if (coalesce(OLD.nr_seq_classif,0) <> coalesce(NEW.nr_seq_classif,0)) then
		ds_log_w := ds_log_w || ' NR_SEQ_CLASSIF OLD/NEW(' ||OLD.nr_seq_classif || '/' || NEW.nr_seq_classif || ')';
	end if;
	if (coalesce(OLD.nr_seq_lote,0) <> coalesce(NEW.nr_seq_lote,0)) then
		ds_log_w := ds_log_w || ' NR_SEQ_LOTE OLD/NEW(' ||OLD.nr_seq_lote || '/' || NEW.nr_seq_lote || ')';
	end if;

	if	((coalesce(OLD.dt_suspensao, LOCALTIMESTAMP) <> coalesce(NEW.dt_suspensao,LOCALTIMESTAMP)) or (OLD.dt_suspensao is null and NEW.dt_suspensao is not null)) then
		ds_log_w := substr(ds_log_w || ' DT_SUSPENSAO OLD/NEW(' || to_char(OLD.DT_SUSPENSAO, 'dd/mm/yyyy hh24:mi:ss') || '/' || to_char(NEW.DT_SUSPENSAO, 'dd/mm/yyyy hh24:mi:ss')||'); ',1,1800);
	end if;

	if (coalesce(OLD.nm_usuario_susp, 'XPTO') <> coalesce(NEW.nm_usuario_susp, 'XPTO')) then
		ds_log_w	:= substr(ds_log_w || ' NM_USUARIO_SUSP OLD/NEW(' || OLD.nm_usuario_susp || '/' || NEW.nm_usuario_susp||'); ',1,1800);
	end if;

	if (OLD.dt_lib_horario is null and NEW.dt_lib_horario is not null or coalesce(OLD.dt_lib_horario, LOCALTIMESTAMP) <> coalesce(NEW.dt_lib_horario, LOCALTIMESTAMP)) then
		ds_log_w	:= substr(ds_log_w || ' DT_LIB_HORARIO(' || coalesce(to_char(OLD.dt_lib_horario, 'dd/mm/yyyy hh24:mi:ss'),'null') || ' / ' || coalesce(to_char(NEW.dt_lib_horario, 'dd/mm/yyyy hh24:mi:ss'),'null')||'); ',1,1800);
	end if;

	if (coalesce(OLD.ie_gerar_lote, 'XPTO') <> coalesce(NEW.ie_gerar_lote, 'XPTO')) then
		ds_log_w	:= substr(ds_log_w || ' IE_GERAR_LOTE(' || coalesce(OLD.ie_gerar_lote,'XPTO') || '/' || coalesce(NEW.ie_gerar_lote,'XPTO')||'); ',1,1800);
	end if;

	if (ie_grava_log_gedipa_w = 'S' and (coalesce(OLD.ie_gedipa, 'XPTO') <> coalesce(NEW.ie_gedipa, 'XPTO'))) then
		ds_log_w	:= substr(ds_log_w || ' IE_GEDIPA OLD/NEW(' || coalesce(OLD.ie_gedipa,'XPTO') || '/' || coalesce(NEW.ie_gedipa,'XPTO')||'); ',1,1800);
	end if;

	if (ie_grava_log_gedipa_w = 'S' and (coalesce(OLD.nr_seq_superior,0) <> coalesce(NEW.nr_seq_superior,0))) then
		ds_log_w	:= substr(ds_log_w || ' NR_SEQ_SUPERIOR OLD/NEW(' || OLD.nr_seq_superior || '/' || NEW.nr_seq_superior ||'); ',1,1800);
	end if;

	if 	(((ie_info_rastre_prescr_w = 'S') or (ie_grava_log_gedipa_w = 'S')) and (coalesce(OLD.nr_seq_area_prep,0) <> coalesce(NEW.nr_seq_area_prep,0))) then
		ds_log_w 	:= substr(ds_log_w || ' NR_SEQ_AREA_PREP OLD/NEW(' || OLD.nr_seq_area_prep || '/' || NEW.nr_seq_area_prep ||'); ',1,1800);
	end if;

	if 	(((ie_info_rastre_prescr_w = 'S') or (ie_grava_log_gedipa_w = 'S')) and (coalesce(OLD.nr_seq_regra_area_prep,0) <> coalesce(NEW.nr_seq_regra_area_prep,0))) then
		ds_log_w 	:= substr(ds_log_w || ' NR_SEQ_REGRA_AREA_PREP OLD/NEW(' || OLD.nr_seq_regra_area_prep || '/' || NEW.nr_seq_regra_area_prep ||'); ',1,1800);
	end if;

	if (ie_grava_log_gedipa_w = 'S' and (coalesce(OLD.nr_seq_etiqueta,0) <> coalesce(NEW.nr_seq_etiqueta,0))) then
		ds_log_w 	:= substr(ds_log_w || ' NR_SEQ_ETIQUETA OLD/NEW(' || OLD.nr_seq_etiqueta || '/' || NEW.nr_seq_etiqueta ||'); ',1,1800);
	end if;

    if (ie_grava_log_gedipa_w = 'S' and (coalesce(OLD.nr_atendimento,0) <> coalesce(NEW.nr_atendimento,0))) then
        ds_log_w 	:= substr(ds_log_w || ' NR_ATENDIMENTO OLD/NEW(' || OLD.nr_atendimento || '/' || NEW.nr_atendimento ||'); ',1,1800);
    end if;
	
	if	((coalesce(OLD.dt_fim_horario, LOCALTIMESTAMP) <> coalesce(NEW.dt_fim_horario,LOCALTIMESTAMP)) or (OLD.dt_fim_horario is null and NEW.dt_fim_horario is not null)) then
		ds_log_w := substr(ds_log_w || ' DT_FIM_HORARIO OLD/NEW(' || to_char(OLD.DT_FIM_HORARIO, 'dd/mm/yyyy hh24:mi:ss') || '/' || to_char(NEW.DT_FIM_HORARIO, 'dd/mm/yyyy hh24:mi:ss')||'); ',1,1800);
	end if;

	if (ds_log_w is not null) then
		ds_log_w :=  wheb_mensagem_pck.get_texto(952753)/*'Sequencia: '*/
 || NEW.nr_sequencia ||' - '|| wheb_mensagem_pck.get_texto(952754)/*' - prescricao - '*/ ||' - '|| NEW.nr_prescricao || ' - ' || ds_log_w || ' - ' ||
		substr(dbms_utility.format_call_stack,1,1800);
		CALL gravar_log_tasy(30, ds_log_w, NEW.nm_usuario);
		
		if (ie_info_rastre_prescr_w = 'S') then
			CALL gerar_log_prescr_mat(NEW.nr_prescricao, NEW.nr_sequencia, NEW.ie_agrupador, null, null, ds_log_w, NEW.nm_usuario, 'N');
		end if;
	end if;
	
	if (NEW.dt_recusa is null and NEW.dt_suspensao is null and NEW.dt_fim_horario is not null and OLD.dt_fim_horario is null and NEW.dt_interrupcao is null and NEW.dt_lib_horario is not null ) then
		CALL wl_generate_history_delayed(NEW.nr_prescricao, NEW.nr_seq_material, NEW.dt_horario);
	end if;
	
end if;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_prescr_mat_hor_update() FROM PUBLIC;

CREATE TRIGGER prescr_mat_hor_update
	BEFORE UPDATE ON prescr_mat_hor FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_prescr_mat_hor_update();

