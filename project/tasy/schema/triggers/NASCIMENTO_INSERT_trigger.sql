-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS nascimento_insert ON nascimento CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_nascimento_insert() RETURNS trigger AS $BODY$
declare
 
ds_tipo_nascimento_w	varchar(255);
nr_digitos_w		smallint;
ds_consistencia_w	varchar(255);
cd_estabelecimento_w	smallint;
qt_reg_w		smallint;
qt_benef_plano_w	bigint;
qt_solic_lead_w		bigint;
dt_rescisao_w		timestamp;
dt_liberacao_w		timestamp;
ie_gerar_lead_nascimento_w	varchar(1);
BEGIN
  BEGIN 
if (wheb_usuario_pck.get_ie_executar_trigger	= 'N') then 
	goto Final;
end if;
 
select	max(cd_estabelecimento) 
into STRICT	cd_estabelecimento_w 
from	atendimento_paciente 
where	nr_atendimento = NEW.nr_atendimento;
 
ds_tipo_nascimento_w := Obter_Param_Usuario(281, 318, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ds_tipo_nascimento_w);
nr_digitos_w := Obter_Param_Usuario(281, 203, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, nr_digitos_w);
ie_gerar_lead_nascimento_w := Obter_Param_Usuario(1237, 17, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_gerar_lead_nascimento_w);
 
if (NEW.dt_prev_teste_pezinho is null) then 
	NEW.dt_prev_teste_pezinho := NEW.dt_nascimento + 2;
 
end if;
 
if (ds_tipo_nascimento_w is not null) and (obter_se_contido(NEW.ie_tipo_nascimento,ds_tipo_nascimento_w) = 'S') and (NEW.nr_dnv is null) then 
	ds_consistencia_w := obter_texto_dic_objeto(289090, wheb_usuario_pck.get_nr_seq_idioma, null) || chr(13) || chr(10);
end if;
 
if	((NEW.ie_unico_nasc_vivo = 'S') and (NEW.ie_tipo_nascimento in (2,5,7,8,9,11))) /*codigos dos tipos de nascimento referente a morto */
 
	or ((NEW.ie_unico_nasc_vivo <> 'S') and (NEW.ie_tipo_nascimento in (3,4,10)))	then /*codigos dos tipos de nascimento referente a vivo */
 
	ds_consistencia_w := ds_consistencia_w || obter_texto_dic_objeto(289091, wheb_usuario_pck.get_nr_seq_idioma, null) || chr(13) || chr(10);	
end if;
 
 
if (not TG_OP = 'DELETE') then 
  if (nr_digitos_w > 0) and (length(to_char(trim(both NEW.nr_dnv))) <> nr_digitos_w) then 
	  ds_consistencia_w := ds_consistencia_w ||obter_texto_dic_objeto(289092, wheb_usuario_pck.get_nr_seq_idioma, 'NR_DIGITOS='||nr_digitos_w);
  end if;
end if;
 
if (ds_consistencia_w is not null) then 
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(246815,'DS_CONSISTENCIA='||ds_consistencia_w);
end if;
 
if (NEW.dt_nascimento > LOCALTIMESTAMP) then 
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(246814);
end if;
 
/* Lançar uma solicitação de lead quando ocorrer o nascimento de um filho de uma beneficiária do plano de saúde. */
 
if (coalesce(NEW.ie_unico_nasc_vivo,'N') = 'S') then 
	select	count(*) 
	into STRICT	qt_solic_lead_w 
	from	pls_solicitacao_comercial 
	where	nr_atendimento	= NEW.nr_atendimento;
	 
	select	max(a.dt_rescisao), 
		max(a.dt_liberacao) 
	into STRICT	dt_rescisao_w, 
		dt_liberacao_w 
	from	pls_segurado a, 
		atendimento_paciente b 
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica 
	and	b.nr_atendimento	= NEW.nr_atendimento;
		 
	select	count(*) 
	into STRICT	qt_benef_plano_w 
	from	pls_segurado a, 
		atendimento_paciente b 
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica 
	and	b.nr_atendimento	= NEW.nr_atendimento;
	 
	if	((qt_benef_plano_w > 0) and (qt_solic_lead_w = 0) and (OLD.nr_atendimento is null)) then 
		if	((dt_rescisao_w is null) and (dt_liberacao_w is not null) and (ie_gerar_lead_nascimento_w = 'S')) then 
			BEGIN 
			CALL pls_gerar_solicitacao_lead(null, NEW.nr_atendimento, 'T',null, NEW.nm_usuario, cd_estabelecimento_w, null);
			exception 
			when others then 
				ds_consistencia_w	:= ds_consistencia_w || obter_texto_dic_objeto(289093, wheb_usuario_pck.get_nr_seq_idioma, null);
			end;
		end if;
	end if;
end if;
 
<<Final>> 
qt_reg_w	:= 0;
  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_nascimento_insert() FROM PUBLIC;

CREATE TRIGGER nascimento_insert
	BEFORE INSERT OR UPDATE ON nascimento FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_nascimento_insert();

