-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS dankia_disp_transacao_insert ON dankia_disp_transacao CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_dankia_disp_transacao_insert() RETURNS trigger AS $BODY$
declare

cd_operacao_estoque_w			bigint;
cd_operacao_estoque_dev_w		bigint;
cd_operacao_estoque_cons_w		bigint;
cd_operacao_correspondente_w	bigint;
cd_acao_w						varchar(1) := null;
ds_erro_w						varchar(255) := null;
nr_sequencia_w					item_requisicao_material.nr_sequencia%type;
nr_sequencia_ww					dankia_disp_transacao.nr_sequencia%type;
/* parametros converte_codigo_barras */


cd_material_w			integer;
qt_mat_barras_w			double precision;
nr_seq_lote_w			bigint;
nr_seq_lote_agrup_w		bigint;
cd_kit_mat_w			bigint;
ds_validade_w			varchar(255);
ds_material_w			varchar(255);
cd_unid_med_w			varchar(30);
nr_etiqueta_lp_w		varchar(255);
ie_entrada_saida_w		operacao_estoque.ie_entrada_saida%type;
cd_fornecedor_w			material_lote_fornec.cd_cgc_fornec%type;
/* parametros converte_codigo_barras */




C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	item_requisicao_material a
	where	a.nr_requisicao	= NEW.cd_transferencia
	and	a.cd_material		= NEW.cd_material
	and	((nr_seq_lote_w is null) or (a.nr_seq_lote_fornec = nr_seq_lote_w))
	and ((NEW.nr_seq_item_req is null) or (a.nr_sequencia = NEW.nr_seq_item_req))
	order by nr_sequencia;
BEGIN
  BEGIN
BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
	null;
end if;

NEW.ie_processado := 'S';

select	nextval('dankia_disp_transacao_seq')
into STRICT	NEW.nr_sequencia
;

select	max(cd_operacao_transf_setor),
		max(cd_operacao_devol_paciente),
		max(cd_operacao_cons_paciente)
into STRICT	cd_operacao_estoque_w,
		cd_operacao_estoque_dev_w,
		cd_operacao_estoque_cons_w
from	parametro_estoque
where	cd_estabelecimento	= NEW.cd_estabelecimento;

select	max(cd_operacao_correspondente)
into STRICT  	cd_operacao_correspondente_w
from	operacao_estoque
where (cd_operacao_estoque  = cd_operacao_estoque_w);

cd_material_w := NEW.cd_material;
if (NEW.cd_barras is not null) then
	SELECT * FROM converte_codigo_barras(	NEW.cd_barras, NEW.cd_estabelecimento, 'N', NEW.cd_local_estoque, cd_material_w, qt_mat_barras_w, nr_seq_lote_w, nr_seq_lote_agrup_w, cd_kit_mat_w, ds_validade_w, ds_material_w, cd_unid_med_w, nr_etiqueta_lp_w, ds_erro_w) INTO STRICT cd_material_w, qt_mat_barras_w, nr_seq_lote_w, nr_seq_lote_agrup_w, cd_kit_mat_w, ds_validade_w, ds_material_w, cd_unid_med_w, nr_etiqueta_lp_w, ds_erro_w;
end if;
if (nr_seq_lote_w = 0) then
	nr_seq_lote_w := null;
end if;

select	max(cd_cgc_fornec)
into STRICT	cd_fornecedor_w
from 	material_lote_fornec
where 	nr_sequencia = nr_seq_lote_w;

if (NEW.cd_transacao in (10)) then
	open C01;
	loop
	fetch C01 into	
		nr_sequencia_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		BEGIN
		CALL wheb_usuario_pck.set_ie_commit('N');
		CALL gerar_movto_estoque_receb_req(NEW.cd_transferencia, nr_sequencia_w, 'N', NEW.qt_material, NEW.nm_usuario);
		CALL gerar_int_dankia_pck.dankia_atualiza_saldo_inv(NEW.cd_material,NEW.cd_barras,NEW.qt_material,NEW.cd_local_estoque,cd_operacao_estoque_w,NEW.nm_usuario, nr_seq_lote_w, NEW.cd_estabelecimento);
		CALL wheb_usuario_pck.set_ie_commit('S');
		end;
	end loop;
	close C01;
	
elsif (NEW.cd_transacao in (50)) and (coalesce(NEW.cd_local_estoque,0) <> coalesce(NEW.cd_local_estoque_destino,0)) then
	insert into movimento_estoque(
			nr_movimento_estoque,
			nr_seq_lote_fornec,
			cd_estabelecimento,
			cd_acao,
			cd_local_estoque,
			ie_origem_documento,
			cd_operacao_estoque,
			dt_mesano_referencia,
			dt_movimento_estoque,
			cd_material,
			cd_material_estoque,
			qt_movimento,
			qt_estoque,
			dt_atualizacao,
			nm_usuario,
			cd_fornecedor)
	values (	nextval('movimento_estoque_seq'),
			nr_seq_lote_w,
			NEW.cd_estabelecimento,
			'1',
			NEW.cd_local_estoque,
			'11',
			cd_operacao_estoque_w,
			LOCALTIMESTAMP,
			NEW.dt_transacao,
			cd_material_w,
			NEW.cd_material,
			NEW.qt_material,
			NEW.qt_material,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			cd_fornecedor_w);
	
	insert into movimento_estoque(
			nr_movimento_estoque,
			nr_seq_lote_fornec,
			cd_estabelecimento,
			cd_acao,
			cd_local_estoque,
			ie_origem_documento,
			cd_operacao_estoque,
			dt_mesano_referencia,
			dt_movimento_estoque,
			cd_material,
			cd_material_estoque,
			qt_movimento,
			qt_estoque,
			dt_atualizacao,
			nm_usuario,
			cd_fornecedor)
	values (	nextval('movimento_estoque_seq'),
			nr_seq_lote_w,
			NEW.cd_estabelecimento,
			'1',
			NEW.cd_local_estoque_destino,
			'11',
			cd_operacao_correspondente_w,
			LOCALTIMESTAMP,
			NEW.dt_transacao,
			NEW.cd_material,
			NEW.cd_material,
			NEW.qt_material,
			NEW.qt_material,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			cd_fornecedor_w);
	
	CALL gerar_int_dankia_pck.dankia_atualiza_saldo_inv(NEW.cd_material,NEW.cd_barras,NEW.qt_material,NEW.cd_local_estoque,cd_operacao_estoque_w,NEW.nm_usuario, nr_seq_lote_w, NEW.cd_estabelecimento);
	CALL gerar_int_dankia_pck.dankia_atualiza_saldo_inv(NEW.cd_material,NEW.cd_barras,NEW.qt_material,NEW.cd_local_estoque_destino,cd_operacao_correspondente_w,NEW.nm_usuario, nr_seq_lote_w, NEW.cd_estabelecimento);

	if (gerar_int_dankia_pck.get_ie_local_dankia(NEW.cd_local_estoque_destino) = 'S') then
		insert into dankia_disp_item_transf(
				nr_sequencia,
				cd_estabelecimento,
				cd_transferencia,
				dt_atualizacao,
				nm_usuario,
				cd_material,
				cd_barras,
				cd_item_transferencia,
				ie_operacao,
				cd_local_estoque_origem,
				qt_material,
				cd_local_estoque_destino,
				dt_lido_dankia,
				ie_processado,
				ds_processado_observacao,
				ds_stack)
		values (nextval('dankia_disp_item_transf_seq'),
				NEW.cd_estabelecimento,
				NEW.cd_transferencia,
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				NEW.cd_material,
				coalesce(NEW.cd_barras,NEW.cd_material),
				NEW.cd_material,
				'I',
				NEW.cd_local_estoque,
				NEW.qt_material,
				NEW.cd_local_estoque_destino,
				null,
				'N',
				null,
				substr(dbms_utility.format_call_stack,1,2000));	
	end if;

elsif (NEW.cd_transacao in (40)) then
	SELECT * FROM gerar_int_dankia_pck.dankia_trans_inventario(NEW.cd_local_estoque, NEW.cd_material, NEW.qt_material, nr_seq_lote_w, NEW.nm_usuario, NEW.cd_estabelecimento, NEW.ds_processado_observacao, cd_operacao_estoque_w) INTO STRICT NEW.ds_processado_observacao, cd_operacao_estoque_w;
	CALL gerar_int_dankia_pck.dankia_atualiza_saldo_inv(NEW.cd_material,NEW.cd_barras,NEW.qt_material,NEW.cd_local_estoque,cd_operacao_estoque_w,NEW.nm_usuario, nr_seq_lote_w, NEW.cd_estabelecimento);
elsif (NEW.cd_transacao in (30)) then
	ds_erro_w := dankia_lancamento_material('E', NEW.nr_atendimento, NEW.cd_local_estoque, NEW.cd_material, NEW.qt_material, LOCALTIMESTAMP, null, NEW.nr_prescricao, NEW.nr_seq_prescricao, NEW.nr_seq_lote, null, ds_erro_w, NEW.cd_barras, NEW.nm_usuario);
	CALL gerar_int_dankia_pck.dankia_atualiza_saldo_inv(NEW.cd_material,NEW.cd_barras,NEW.qt_material,NEW.cd_local_estoque,cd_operacao_estoque_w,NEW.nm_usuario, nr_seq_lote_w, NEW.cd_estabelecimento);
elsif (NEW.cd_transacao in (20)) then
	ds_erro_w := dankia_lancamento_material('I', NEW.nr_atendimento, NEW.cd_local_estoque, NEW.cd_material, NEW.qt_material, LOCALTIMESTAMP, null, NEW.nr_prescricao, NEW.nr_seq_prescricao, NEW.nr_seq_lote, null, ds_erro_w, NEW.cd_barras, NEW.nm_usuario);
	CALL gerar_int_dankia_pck.dankia_atualiza_saldo_inv(NEW.cd_material,NEW.cd_barras,NEW.qt_material,NEW.cd_local_estoque,cd_operacao_estoque_w,NEW.nm_usuario, nr_seq_lote_w, NEW.cd_estabelecimento);

elsif (NEW.cd_transacao in (41) and (NEW.cd_motivo is not null)) then
	
	select	max(ie_entrada_saida)
	into STRICT	ie_entrada_saida_w
	from	operacao_estoque
	where	cd_operacao_estoque = NEW.cd_motivo;
	
	if (ie_entrada_saida_w = 'S') then
		ds_erro_w := dankia_lancamento_material('I', NEW.nr_atendimento, NEW.cd_local_estoque, NEW.cd_material, NEW.qt_material, LOCALTIMESTAMP, null, NEW.nr_prescricao, NEW.nr_seq_prescricao, NEW.nr_seq_lote, NEW.cd_motivo, ds_erro_w, NEW.cd_barras, NEW.nm_usuario);
	elsif (ie_entrada_saida_w = 'E') then
		ds_erro_w := dankia_lancamento_material('E', NEW.nr_atendimento, NEW.cd_local_estoque, NEW.cd_material, NEW.qt_material, LOCALTIMESTAMP, null, NEW.nr_prescricao, NEW.nr_seq_prescricao, NEW.nr_seq_lote, NEW.cd_motivo, ds_erro_w, NEW.cd_barras, NEW.nm_usuario);
	end if;
	
	CALL gerar_int_dankia_pck.dankia_atualiza_saldo_inv(NEW.cd_material,NEW.cd_barras,NEW.qt_material,NEW.cd_local_estoque,NEW.cd_motivo,NEW.nm_usuario, nr_seq_lote_w, NEW.cd_estabelecimento);
end if;

if (ds_erro_w is not null) then
	NEW.ie_processado := 'E';
	NEW.ds_processado_observacao := ds_erro_w;
end if;


NEW.dt_lido := LOCALTIMESTAMP;

exception
when others then
	NEW.ie_processado := 'E';
	NEW.ds_processado_observacao := SUBSTR(SQLERRM(SQLSTATE),1,400);
end;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_dankia_disp_transacao_insert() FROM PUBLIC;

CREATE TRIGGER dankia_disp_transacao_insert
	BEFORE INSERT ON dankia_disp_transacao FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_dankia_disp_transacao_insert();

