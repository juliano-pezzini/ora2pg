-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS convenio_receb_insert ON convenio_receb CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_convenio_receb_insert() RETURNS trigger AS $BODY$
declare

nr_seq_movto_w		bigint;
cd_perfil_w		integer;
ie_receb_adic_w		varchar(1);
cd_cgc_convenio_w	varchar(14);
ie_situacao_w		varchar(255);
ie_inativos_w		varchar(255);
qt_movto_w		integer;
ds_convenio_w		varchar(255);
nr_seq_trans_financ_w	bigint;
vl_movimento_w		double precision;

c01 CURSOR FOR	
SELECT	a.nm_atributo,
	a.cd_tipo_lote_contab
from	atributo_contab a
where	a.cd_tipo_lote_contab = 11
and 	a.nm_atributo in ('VL_RECEBIMENTO',  'VL_DEPOSITO', 'VL_DESPESA_BANCARIA');

c01_w		c01%rowtype;

BEGIN

select	obter_perfil_ativo
into STRICT	cd_perfil_w
;

ie_receb_adic_w := obter_param_usuario(27, 8, cd_perfil_w, NEW.nm_usuario, NEW.cd_estabelecimento, ie_receb_adic_w);
ie_inativos_w := obter_param_usuario(27, 191, cd_perfil_w, NEW.nm_usuario, NEW.cd_estabelecimento, ie_inativos_w);

select	cd_cgc,
	ie_situacao,
	ds_convenio
into STRICT	cd_cgc_convenio_w,
	ie_situacao_w,
	ds_convenio_w
from	convenio
where	cd_convenio	= NEW.cd_convenio;

if (ie_situacao_w = 'I') and (TG_OP = 'INSERT') and (ie_inativos_w = 'N') then
	--(-20011, 'Este convênio está inativo! (' || ds_convenio_w || ') ' || chr(13) ||

	--			'Não é possível lançar recebimentos para este convênio.');

	CALL wheb_mensagem_pck.exibir_mensagem_abort(224090, 'DS_CONVENIO_W='||ds_convenio_w);
end if;

/* bruna 28-06-2007, 

feito tratamento no delphi para somente lançar a transação automaticamente quando lançado o recebimmento pe
função retorno de convênios 

if	(:new.nr_seq_conta_banco is not null) and 
	(:new.nr_seq_trans_fin is not null) and
	(nvl(:new.ie_integrar_cb_fluxo,'S') = 'S') then

	if	(inserting and (ie_receb_adic_w = 'N')) or
		(updating  and (ie_receb_adic_w = 'S') and (:new.dt_liberacao is not null)) then

		select	count(*)
		into	qt_movto_w
		from	movto_trans_financ
		where	nr_seq_conv_receb = :new.nr_sequencia;

		if	(qt_movto_w = 0) then
			select	movto_trans_financ_seq.nextval
			into	nr_seq_movto_w
			from	dual;

			insert	into movto_trans_financ
				(nr_sequencia,
				dt_transacao,
				nr_seq_trans_financ,
				vl_transacao,
				nr_seq_banco,
				nr_seq_conv_receb,
				dt_referencia_saldo,
				dt_atualizacao,
				nm_usuario,
				nr_lote_contabil,
				ie_conciliacao,
				ds_historico,
				cd_cgc)
			values	(nr_seq_movto_w,
				:new.dt_recebimento,
				:new.nr_seq_trans_fin,
				decode(nvl(:new.vl_deposito,0),0, :new.vl_recebimento - nvl(:new.vl_despesa_bancaria,0), :new.vl_deposito),
				:new.nr_seq_conta_banco,
				:new.nr_sequencia,
				trunc(:new.dt_recebimento,'MM'),
				:new.dt_atualizacao,
				:new.nm_usuario,
				0,
				'N',
				:new.ds_observacao,
				cd_cgc_convenio_w);
		end if;
	end if;
end if; 
*/


if (TG_OP = 'INSERT') then
	/* Grava o agendamento da informação para atualização do fluxo de caixa. */


	CALL gravar_agend_fluxo_caixa(NEW.nr_sequencia,null,'RC',NEW.dt_recebimento,'I',NEW.nm_usuario);

	open c01;
	loop
	fetch c01 into	
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN
		if (c01_w.nm_atributo = 'VL_RECEBIMENTO') then
			vl_movimento_w 	:= NEW.vl_recebimento;

		elsif (c01_w.nm_atributo = 'VL_DEPOSITO') then
			vl_movimento_w 	:= NEW.vl_deposito;

		elsif (c01_w.nm_atributo = 'VL_DESPESA_BANCARIA') then
			vl_movimento_w 	:= NEW.vl_despesa_bancaria;
		end if;

		if (coalesce(vl_movimento_w, 0) <> 0) and (coalesce(NEW.nr_seq_trans_fin, 0) <> 0) then
			BEGIN

			CALL ctb_concil_financeira_pck.ctb_gravar_documento(	NEW.cd_estabelecimento,
									trunc(NEW.dt_recebimento),
									c01_w.cd_tipo_lote_contab,
									NEW.nr_seq_trans_fin,
									8,
									NEW.nr_sequencia,
									null,
									null,
									vl_movimento_w,
									'CONVENIO_RECEB',
									c01_w.nm_atributo,
									NEW.nm_usuario);

			end;
		end if;
		end;
	end loop;
	close c01;

elsif (TG_OP = 'UPDATE') then
	/* Grava o agendamento da informação para atualização do fluxo de caixa. */


	CALL gravar_agend_fluxo_caixa(NEW.nr_sequencia,null,'RC',NEW.dt_recebimento,'A',NEW.nm_usuario);
	
	update  ctb_documento
	set     vl_movimento = NEW.vl_recebimento,
		nr_seq_trans_financ = NEW.nr_seq_trans_fin
	where   nm_atributo = 'VL_RECEBIMENTO'
	and     nm_tabela   = 'CONVENIO_RECEB'
	and     nr_documento = NEW.nr_sequencia;

	update  ctb_documento
	set     vl_movimento = NEW.vl_deposito,
		nr_seq_trans_financ = NEW.nr_seq_trans_fin
	where   nm_atributo = 'VL_DEPOSITO'
	and     nm_tabela   = 'CONVENIO_RECEB'
	and     nr_documento = NEW.nr_sequencia;

	update  ctb_documento
	set     vl_movimento = NEW.vl_despesa_bancaria,
		nr_seq_trans_financ = NEW.nr_seq_trans_fin
	where   nm_atributo = 'VL_DESPESA_BANCARIA'
	and     nm_tabela   = 'CONVENIO_RECEB'
	and     nr_documento = NEW.nr_sequencia;

end if;
	
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_convenio_receb_insert() FROM PUBLIC;

CREATE TRIGGER convenio_receb_insert
	AFTER INSERT OR UPDATE ON convenio_receb FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_convenio_receb_insert();

