-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS iscv_prescr_medica_aftinsup ON prescr_medica CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_iscv_prescr_medica_aftinsup() RETURNS trigger AS $BODY$
declare
nr_seq_proc_interno_w	prescr_procedimento.nr_seq_proc_interno%type;
ds_sep_bv_w				varchar(100)	:= obter_separador_bv;
nr_acesso_dicom_w		prescr_procedimento.nr_acesso_dicom%type;
bo_permite_integrar_w	boolean;

C01 CURSOR FOR
	SELECT distinct	NR_ACESSO_DICOM
	from (
		SELECT	NR_ACESSO_DICOM,
				Obter_Se_Integr_Proc_Interno(nr_seq_proc_interno, 17,null,ie_lado,coalesce(NEW.cd_estabelecimento,wheb_usuario_pck.get_cd_estabelecimento)) ie_permite_proc_integ
		from	prescr_procedimento
		where	nr_prescricao = NEW.nr_prescricao
		and		NR_ACESSO_DICOM is not null
		) alias2
	where	ie_permite_proc_integ = 'S';

	/* Verifica se existe alguma integração cadastrada para o domínio 17, para certificar que há o que ser procurado, para aí então executar todas as verificações. */

	function permiteIntegrarISCV
	return boolean is
	qt_resultado_w	bigint;
	BEGIN

	select	count(*) qt_resultado
	into STRICT	qt_resultado_w
	from 	regra_proc_interno_integra
	where	ie_tipo_integracao = 17; --Dominio criado para a integração
	return qt_resultado_w > 0;
	end;


	function permiteIntegrar return boolean is
	ds_retorno_w varchar2(1);
	BEGIN

	select	coalesce(max(ie_permite_proc_integ),'N') ie_permite_proc_integ
	into STRICT	ds_retorno_w
	from(
			(SELECT	Obter_Se_Integr_Proc_Interno(nr_seq_proc_interno, 17,null,ie_lado,coalesce(NEW.cd_estabelecimento,wheb_usuario_pck.get_cd_estabelecimento)) ie_permite_proc_integ
			from	prescr_procedimento
			where	nr_prescricao = NEW.nr_prescricao
			and		nr_seq_proc_interno is not null)
			
union all
(select	Obter_Se_Integr_Proc_Interno(nr_seq_proc_interno, 17,null,ie_lado,coalesce(NEW.cd_estabelecimento,wheb_usuario_pck.get_cd_estabelecimento)) ie_permite_proc_integ
			from	agenda_paciente
			where	nr_seq_proc_interno is not null
			and		nr_sequencia = NEW.nr_seq_agenda)
			
union all
(select	Obter_Se_Integr_Proc_Interno(nr_seq_proc_interno, 17,null,ie_lado,coalesce(NEW.cd_estabelecimento,wheb_usuario_pck.get_cd_estabelecimento)) ie_permite_proc_integ
			from	agenda_paciente_proc
			where	nr_seq_proc_interno is not null
			and		nr_sequencia = NEW.nr_seq_agenda)
		)
	where	ie_permite_proc_integ = 'S';

	bo_permite_integrar_w := (ds_retorno_w = 'S');

	return bo_permite_integrar_w;

	end;

BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then
	if	permiteIntegrarISCV() then
		if	(((OLD.dt_liberacao is null) and (NEW.dt_liberacao is not null) and (OLD.dt_liberacao_medico is null)) or
			((OLD.dt_liberacao_medico is null) and (NEW.dt_liberacao_medico is not null) and (OLD.dt_liberacao is null)))
		and	permiteIntegrar() then
			CALL gravar_agend_integracao(745, 'nr_atendimento=' || NEW.nr_atendimento || ds_sep_bv_w || 'cd_pessoa_fisica=' || NEW.cd_pessoa_fisica || ds_sep_bv_w, NEW.cd_setor_atendimento);

			open C01;
			loop
			fetch C01 into
				nr_acesso_dicom_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				BEGIN
				CALL gravar_agend_integracao(749,'cd_pessoa_fisica='	|| NEW.cd_pessoa_fisica	|| ds_sep_bv_w ||
											'nr_atendimento='	|| NEW.nr_atendimento		|| ds_sep_bv_w ||
											'nr_prescricao='	|| NEW.nr_prescricao		|| ds_sep_bv_w ||
											'nr_acesso_dicom='	|| nr_acesso_dicom_w		|| ds_sep_bv_w ||
											'order_control=NW'	|| ds_sep_bv_w				||
											'order_status=SC'	|| ds_sep_bv_w
											, NEW.cd_setor_atendimento);
				end;
			end loop;
			close C01;

		elsif (OLD.dt_suspensao is null AND NEW.dt_suspensao is not null)
		and (bo_permite_integrar_w or permiteIntegrar()) then

			open C01;
			loop
			fetch C01 into
				nr_acesso_dicom_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				BEGIN
				CALL gravar_agend_integracao(749,'cd_pessoa_fisica='	|| NEW.cd_pessoa_fisica	|| ds_sep_bv_w ||
											'nr_atendimento='	|| NEW.nr_atendimento		|| ds_sep_bv_w ||
											'nr_prescricao='	|| NEW.nr_prescricao		|| ds_sep_bv_w ||
											'nr_acesso_dicom='	|| nr_acesso_dicom_w		|| ds_sep_bv_w ||
											'order_control=OC'	|| ds_sep_bv_w				||
											'order_status=CA'	|| ds_sep_bv_w
											, NEW.cd_setor_atendimento);
				end;
			end loop;
			close C01;
		end if;
	end if;
end if;

RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_iscv_prescr_medica_aftinsup() FROM PUBLIC;

CREATE TRIGGER iscv_prescr_medica_aftinsup
	AFTER INSERT OR UPDATE ON prescr_medica FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_iscv_prescr_medica_aftinsup();

