-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS cm_requisicao_tie ON cm_requisicao CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_cm_requisicao_tie() RETURNS trigger AS $BODY$
declare

json_w		philips_json;
json_data_w	text;

BEGIN

if (wheb_usuario_pck.get_nm_usuario is not null) then

	if (TG_OP = 'INSERT' or TG_OP = 'UPDATE') then

		json_w := philips_json();
		json_w.put('id', NEW.nr_sequencia);
		json_w.put('urgent', NEW.ie_urgente);
		json_w.put('requisitionDate', NEW.dt_requisicao);
		json_w.put('department', NEW.cd_setor_atendimento);
		json_w.put('requester', NEW.cd_pessoa_requisitante);
		json_w.put('establishment', NEW.cd_estabelecimento);
		json_w.put('settlementDate', NEW.dt_baixa);
		json_w.put('releaseDate', NEW.dt_liberacao);
		json_w.put('printingDate', NEW.dt_impressao);
		json_w.put('schedule', NEW.nr_seq_agenda);
		json_w.put('notes', NEW.ds_observacao);
		json_w.put('destinationEstablishment', NEW.cd_estab_destino);
		json_w.put('receiptUser', NEW.nm_usuario_receb);
		json_w.put('receiptDate', NEW.dt_confirma_receb);
		json_w.put('encounter', NEW.nr_atendimento);
		json_w.put('encounterUser', NEW.nm_usuario_conf_atend);
		json_w.put('encounterDate', NEW.dt_conf_atend);
		json_w.put('surgery', NEW.nr_cirurgia);
		json_w.put('lastUpdate', NEW.dt_atualizacao);
		json_w.put('lastUpdatedBy', NEW.nm_usuario);
		json_w.put('creationDate', NEW.dt_atualizacao_nrec);
		json_w.put('creationUser', NEW.nm_usuario_nrec);

		dbms_lob.createtemporary(json_data_w, true);
		json_w.(json_data_w);

		if (TG_OP = 'INSERT') then
			json_data_w := bifrost.send_integration_content('cssd.management.add.send.request', json_data_w, wheb_usuario_pck.get_nm_usuario);
		elsif (TG_OP = 'UPDATE') then
			json_data_w := bifrost.send_integration_content('cssd.management.update.send.request', json_data_w, wheb_usuario_pck.get_nm_usuario);
		end if;

	elsif (TG_OP = 'DELETE') then

		json_w := philips_json();
		json_w.put('id', OLD.nr_sequencia);

		dbms_lob.createtemporary(json_data_w, true);
		json_w.(json_data_w);

		json_data_w := bifrost.send_integration_content('cssd.management.delete.send.request', json_data_w, wheb_usuario_pck.get_nm_usuario);

	end if;

end if;

IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_cm_requisicao_tie() FROM PUBLIC;

CREATE TRIGGER cm_requisicao_tie
	AFTER INSERT OR UPDATE OR DELETE ON cm_requisicao FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_cm_requisicao_tie();

