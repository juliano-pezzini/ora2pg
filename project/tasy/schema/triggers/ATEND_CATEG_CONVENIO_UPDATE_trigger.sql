-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atend_categ_convenio_update ON atend_categoria_convenio CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atend_categ_convenio_update() RETURNS trigger AS $BODY$
DECLARE

ie_tipo_convenio_w		smallint := 2;
ie_situacao_w			varchar(1) := 'A';
ie_situacao_categ_w		varchar(1) := 'A';
dt_cancelamento_w		timestamp := LOCALTIMESTAMP;
ie_exige_orc_atend_w		varchar(1);
dt_entrada_w			timestamp;
cd_medico_resp_w		varchar(10);
ie_tipo_atendimento_w	smallint;
ie_regra_w			varchar(1);
cd_estabelecimento_w		integer;
ie_tipo_convenio_atend_w	smallint;/* Rafael em 18/08/06 OS39167 */

ie_tipo_convenio_atend_ww	smallint;
ie_consiste_tipo_conv_w		varchar(1);/* Rafael em 18/08/06 OS39167 */

ie_atualizar_tipo_conv_atend_w	varchar(1) := 'S';
ie_vigencia_entrada_w		varchar(1);
ie_entrada_vigencia_w 		varchar(1);
ie_atualiza_validade_titular_w	varchar(1);
cd_pessoa_fisica_w	varchar(10);
ie_contem_convenio_w		varchar(1);
ie_resUnimed_w			varchar(1);
ds_param_integ_hl7_w 	varchar(4000);
dt_cancelamento_atend_w	atendimento_paciente.dt_cancelamento%type;
qt_registros_w		bigint;
dt_alta_w		atendimento_paciente.dt_alta%type;
qt_exist_rule_w	bigint;
pessoa_titular_convenio_row_w   pessoa_titular_convenio%rowtype;
ie_save_insurance_holder_w	varchar(1);
dt_procedimento_w                 timestamp:= null;
nr_sequencia_w                    bigint;
nr_sequencia_ww                   bigint;
nr_sequencia_www                  bigint;
nr_sequencia_wwww                 bigint;
nr_sequencia_wwwww                bigint;
dt_end_category_w                 timestamp;
dt_end_category_ww                timestamp;
dt_end_category_www               timestamp;
nr_seq_patient_category_new_ww    bigint;
nr_seq_patient_category_new_w     bigint;
dt_start_category_www             timestamp;
dt_start_category_ww              timestamp;
qt_count_w          			  smallint;
qt_exist_rule_ww	  			  bigint;
qt_last_record_ww   			  smallint;

locked_records CURSOR FOR
SELECT  *
from 	pessoa_titular_convenio
where  	cd_pessoa_fisica     = cd_pessoa_fisica_w
for update;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S') then

  select  max(cd_pessoa_fisica)
  into STRICT	cd_pessoa_fisica_w
  from	atendimento_paciente
  where	nr_atendimento = NEW.nr_atendimento;

  open locked_records;
  loop
    fetch locked_records into pessoa_titular_convenio_row_w;
    EXIT WHEN NOT FOUND; /* apply on locked_records */
  end loop;
  close locked_records;

  if (NEW.ie_tipo_guia) <> (OLD.ie_tipo_guia) and (OLD.ie_tipo_guia is not null) then

    BEGIN
    insert into log_atendimento(
      dt_atualizacao,
      nm_usuario,
      cd_log,
      nr_atendimento,
      ds_log)
    values (LOCALTIMESTAMP,
      NEW.nm_usuario,
      135,
      NEW.nr_atendimento,
      'CALLSTACK: ' || dbms_utility.format_call_stack);
    exception
    when others then
      null;
    end;

  end if;

  select	max(cd_estabelecimento)
  into STRICT	cd_estabelecimento_w
  from	atendimento_paciente
  where 	nr_atendimento =  NEW.nr_atendimento;

  select	coalesce(max(ie_consiste_tipo_conv),'N'), /* Rafael em 18/08/06 OS39167*/

    coalesce(max(ie_atualizar_tipo_conv_atend),'S')
  into STRICT	ie_consiste_tipo_conv_w,
    ie_atualizar_tipo_conv_atend_w
  from	parametro_faturamento
  where	cd_estabelecimento = cd_estabelecimento_w;

  BEGIN
  select	Max(ie_tipo_convenio),
    max(ie_situacao),
    max(dt_cancelamento),
    max(Obter_Valor_Conv_Estab(cd_convenio, cd_estabelecimento_w, 'IE_EXIGE_ORC_ATEND')) ie_exige_orc_atend
  into STRICT	ie_tipo_convenio_w,
    ie_situacao_w,
    dt_cancelamento_w,
    ie_exige_orc_atend_w
  from	convenio
  where	cd_convenio = NEW.cd_convenio;
  exception
    when others then
          ie_tipo_convenio_w := 2;
  end;
  ie_tipo_convenio_atend_ww := ie_tipo_convenio_w;
  /* Tratamento passado para a trigger ATEND_CATEG_CONVENIO_UP_PRAGMA  */


  if (ie_atualizar_tipo_conv_atend_w = 'S') then
    BEGIN
    update	atendimento_paciente
    set	ie_tipo_convenio = ie_tipo_convenio_w
    where	nr_atendimento 	 = NEW.nr_atendimento;
    exception
      when others then
            ie_tipo_convenio_w := 2;
    end;
  end if;

  select	dt_entrada,
    cd_estabelecimento,
    cd_medico_resp,
    ie_tipo_atendimento,
    ie_tipo_convenio,
    dt_cancelamento,
    dt_alta
  into STRICT	dt_entrada_w,
    cd_estabelecimento_w,
    cd_medico_resp_w,
    ie_tipo_atendimento_w,
    ie_tipo_convenio_atend_w,
    dt_cancelamento_atend_w,
    dt_alta_w
  from	atendimento_paciente
  where	nr_atendimento	= NEW.nr_atendimento;


  select	coalesce(max(ie_vigencia_entrada),'N')
  into STRICT	ie_vigencia_entrada_w
  from	parametro_atendimento
  where	cd_estabelecimento	= cd_estabelecimento_w;

  if (ie_vigencia_entrada_w = 'N') and (dt_entrada_w > NEW.dt_inicio_vigencia) then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262347 , 'DT_INICIO='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(NEW.dt_inicio_vigencia, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)||';DT_ENTRADA='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_entrada_w, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone));
    ---20011,'A data de inicio de vigencia '||to_char(:new.dt_inicio_vigencia,'dd/mm/yyyy hh24:mi:ss')||' nao pode ser menor que a data de entrada '||to_char(dt_entrada_w,'dd/mm/yyyy hh24:mi:ss'));

  end if;

  ie_atualiza_validade_titular_w := obter_valor_param_usuario(916, 1006, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.get_cd_estabelecimento);

  if (ie_atualiza_validade_titular_w = 'S') and (OLD.dt_validade_carteira <> NEW.dt_validade_carteira) then
    update	pessoa_titular_convenio
    set		dt_validade_carteira = NEW.dt_validade_carteira,
    		nm_usuario = NEW.nm_usuario
    where	cd_convenio			 = NEW.cd_convenio
    and		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP)	<= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_fim_vigencia)
    and		ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP) 	>= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicio_vigencia)
    and		cd_pessoa_fisica     = cd_pessoa_fisica_w;
  end if;

  select  CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
  into STRICT	ie_contem_convenio_w
  from	pessoa_titular_convenio
  where	cd_convenio = NEW.cd_convenio;

  if (ie_contem_convenio_w = 'S') and (NEW.ie_tipo_conveniado is not null) then
    update	pessoa_titular_convenio
    set		ie_tipo_conveniado = NEW.ie_tipo_conveniado,
    		nm_usuario = NEW.nm_usuario
    where	cd_convenio = NEW.cd_convenio
    and		cd_pessoa_fisica = cd_pessoa_fisica_w;
  end if;

	if (OLD.nr_seq_categoria_iva <> NEW.nr_seq_categoria_iva
		OR OLD.nr_seq_categoria_iva IS NULL OR NEW.nr_seq_categoria_iva IS NULL) then
		update  pessoa_titular_convenio
		set 	dt_atualizacao = LOCALTIMESTAMP,
				nm_usuario = NEW.nm_usuario,
				nr_seq_categoria_iva = NEW.nr_seq_categoria_iva
		where   cd_convenio = NEW.cd_convenio
		and     cd_pessoa_fisica = cd_pessoa_fisica_w
		and		cd_categoria = NEW.cd_categoria;
	end if;

  ie_entrada_vigencia_w := obter_valor_param_usuario(916, 637, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.get_cd_estabelecimento);


  if (ie_entrada_vigencia_w = 'S') and /* contrario da consistencia acima */

    (dt_entrada_w < NEW.dt_inicio_vigencia) then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262357 , 'DT_ENTRADA='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_entrada_w, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)||';DT_VIGENCIA='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(NEW.dt_inicio_vigencia, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone));
    --or(-20011,'A data de entrada '||to_char(dt_entrada_w,'dd/mm/yyyy hh24:mi:ss') || ' nao pode ser menor que a data de inicio de vigencia '||to_char(:new.dt_inicio_vigencia,'dd/mm/yyyy hh24:mi:ss'));

  end if;

  if (NEW.dt_inicio_vigencia > NEW.dt_final_vigencia) then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(262358);
  end if;

  select	Obter_convenio_regra_atend(cd_medico_resp_w,NEW.cd_convenio,ie_tipo_atendimento_w,cd_estabelecimento_w,'A',NEW.cd_plano_convenio,NEW.cd_categoria)
  into STRICT	ie_regra_w
;

  if (ie_regra_w = 'N') then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(262359);
  end if;


  if (ie_consiste_tipo_conv_w = 'S') and (ie_tipo_convenio_atend_ww <> obter_tipo_convenio(NEW.cd_convenio)) then /* Rafael em 18/08/06 OS39167*/

    CALL Wheb_mensagem_pck.exibir_mensagem_abort(262360);
  end if;

  if (ie_exige_orc_atend_w = 'S') then
    CALL verifica_orcamento_paciente(NEW.nr_atendimento,NEW.cd_convenio,NEW.cd_categoria);
  end if;

  if (ie_situacao_w <> 'A') then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(262361);
  end if;

  if (dt_cancelamento_w is not null) and (dt_entrada_w >= dt_cancelamento_w) then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(262363);
  end if;


  select	coalesce(max(ie_situacao ),'X')
  into STRICT	ie_situacao_categ_w
  from	categoria_convenio
  where	cd_convenio = NEW.cd_convenio
  and	cd_categoria = NEW.cd_categoria;


  if (ie_situacao_categ_w <> 'A') then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(262364);
  end if;

  if (Obter_Se_Medico_Lib(	cd_estabelecimento_w,
          cd_medico_resp_w,
          NEW.cd_convenio)	= 'N') then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(262359);
  end if;


  if (OLD.ie_tipo_guia <> NEW.ie_tipo_guia) or (OLD.ie_tipo_guia is null and NEW.ie_tipo_guia is not null) or (OLD.CD_USUARIO_CONVENIO <> NEW.CD_USUARIO_CONVENIO) or (OLD.CD_USUARIO_CONVENIO is null and NEW.CD_USUARIO_CONVENIO is not null) or (NEW.CD_USUARIO_CONVENIO is null and OLD.CD_USUARIO_CONVENIO is not null) or (OLD.CD_PLANO_CONVENIO <> NEW.CD_PLANO_CONVENIO) or (OLD.CD_PLANO_CONVENIO is null and NEW.CD_PLANO_CONVENIO is not null) or (NEW.CD_PLANO_CONVENIO is null and OLD.CD_PLANO_CONVENIO is not null) then

    CALL gerar_home_care_regra(	NEW.nr_atendimento,
          ie_tipo_atendimento_w,
          NEW.ie_tipo_guia,
          NEW.nm_usuario,
          NEW.cd_convenio,
          NEW.cd_plano_convenio,
          NEW.cd_usuario_convenio
          );
  end if;

  ie_save_insurance_holder_w := obter_dados_param_atend(wheb_usuario_pck.get_cd_estabelecimento, 'SI');

  if (coalesce(ie_save_insurance_holder_w,'N') = 'S') and (coalesce(pkg_i18n.get_user_locale, 'pt_BR') <> 'pt_BR') and (cd_pessoa_fisica_w  is not null) and (NEW.cd_convenio is not null) and
	((coalesce(NEW.cd_convenio, 0) <> coalesce(OLD.cd_convenio, 0)) or (coalesce(NEW.cd_categoria, 0) <> coalesce(OLD.cd_categoria, 0)) or (coalesce(NEW.cd_usuario_convenio, '0') <> coalesce(OLD.cd_usuario_convenio, '0'))) or (coalesce(NEW.cd_pessoa_titular, '0') <> coalesce(OLD.cd_pessoa_titular, '0')) or
    ((coalesce(NEW.ekvk_cd_pessoa_fisica, '0') <> coalesce(OLD.ekvk_cd_pessoa_fisica, '0')) or (coalesce(NEW.ekvk_nm_pais, '0') <> coalesce(OLD.ekvk_nm_pais, '0')) or (coalesce(NEW.ekvk_nr_cartao, '0') <> coalesce(OLD.ekvk_nr_cartao, '0')) or (coalesce(NEW.ekvk_nr_conv, 0) <> coalesce(OLD.ekvk_nr_conv, 0)) or (coalesce(NEW.ekvk_sg_conv, '0') <> coalesce(OLD.ekvk_sg_conv, '0')) or (coalesce(NEW.ekvk_nr_seq_tipo_doc, 0) <> coalesce(OLD.ekvk_nr_seq_tipo_doc, 0)) or (coalesce(NEW.ekvk_dt_inicio, LOCALTIMESTAMP) <> coalesce(OLD.ekvk_dt_inicio, LOCALTIMESTAMP)) or (coalesce(NEW.ekvk_dt_fim, LOCALTIMESTAMP) <> coalesce(OLD.ekvk_dt_fim, LOCALTIMESTAMP))) or (coalesce(NEW.nr_seq_conv_categ_seg, 0) <> coalesce(OLD.nr_seq_conv_categ_seg, 0))

    then

    CALL insere_atualiza_titular_conv(
          NEW.nm_usuario,
          NEW.cd_convenio,
          NEW.cd_categoria,
          cd_pessoa_fisica_w,
          NEW.cd_plano_convenio,
          NEW.dt_inicio_vigencia,
          NEW.dt_final_vigencia,
          NEW.dt_final_vigencia,
          NEW.cd_pessoa_titular,
          NEW.cd_usuario_convenio,
          null,
          'N',
          '2',
		  0,
		  NEW.ekvk_cd_pessoa_fisica,
		  NEW.ekvk_nm_pais,
		  NEW.ekvk_nr_cartao,
		  NEW.ekvk_nr_conv,
		  NEW.ekvk_sg_conv,
		  NEW.ekvk_nr_seq_tipo_doc,
          NEW.ekvk_dt_inicio,
		  NEW.ekvk_dt_fim,
		NEW.nr_seq_conv_categ_seg,
		NEW.nr_seq_categoria_iva);
  end if;

  if (NEW.cd_convenio is not null AND NEW.cd_convenio <> OLD.cd_convenio) then

    BEGIN

    if (NEW.cd_usuario_convenio is not null) then
    --  Gerar RES UNIMED - 000710 - Criacao do RES do beneficiario

        CALL gerar_transacao_res(NEW.nr_atendimento,'00710',obter_usuario_pessoa(cd_medico_resp_w),NEW.cd_convenio,'','');

    end if;

    --  Consultar documentos RES PHILIPS - 01100 - Busca dos documentos clinicos

    CALL gerar_transacao_res(NEW.nr_atendimento,'01100',obter_usuario_pessoa(cd_medico_resp_w),NEW.cd_convenio,'','');


    exception
    when others then
          ie_resUnimed_w := 'N';
    end;

  end if;

  select	count(*)
  into STRICT	qt_exist_rule_w
  from	patient_class_category
  where	coalesce(ie_situacao,'A') = 'A';

	select case
       when exists ( select 1
              from	patient_category_log
              where	nr_atendimento= NEW.nr_atendimento
              and nr_seq_patient_category_old is null
              and nr_seq_patient_category_new is null
            )
       then 1
       else 0
       end
       into STRICT	qt_exist_rule_ww
	;

  if (OLD.nr_seq_patient_category is null and NEW.nr_seq_patient_category is not null and qt_exist_rule_ww > 0) then
        select max(nr_sequencia)
        into STRICT nr_sequencia_wwwww
        from patient_category_log
        where nr_atendimento= NEW.nr_atendimento;

        update patient_category_log
        set nr_seq_patient_category_new= NEW.nr_seq_patient_category
        where nr_sequencia=nr_sequencia_wwwww;

        qt_exist_rule_w:=0;
  end if;

  if (qt_exist_rule_w > 0 and OLD.nr_seq_patient_category <> NEW.nr_seq_patient_category) then
    BEGIN

        if (NEW.EKVK_DT_INICIO is not null) then
			dt_procedimento_w:= NEW.EKVK_DT_INICIO;
        end if;

		select max(nr_sequencia), max(dt_end_category),max(nr_seq_patient_category_new)
		into STRICT    nr_sequencia_w, dt_end_category_w, nr_seq_patient_category_new_w
		from patient_category_log
		where dt_procedimento_w between dt_start_category and  coalesce(dt_end_category,LOCALTIMESTAMP)
		and     nr_atendimento    = NEW.nr_atendimento;
			
        if (nr_sequencia_w is not null) then
			update  patient_category_log
			set     dt_end_category   = coalesce(dt_procedimento_w,LOCALTIMESTAMP),
					nm_usuario        = 'TASY',
					dt_atualizacao    = LOCALTIMESTAMP						
			where   nr_sequencia      = nr_sequencia_w;
        else
            select max(nr_sequencia), max(dt_end_category)
            into STRICT    nr_sequencia_w, dt_end_category_w
            from patient_category_log
            where dt_start_category is not null
            and     dt_end_category   is null
            and     nr_atendimento    = NEW.nr_atendimento;

            
			update  patient_category_log
			set     dt_end_category   = coalesce(dt_procedimento_w,case when Obter_data_alta_Atendimento(NEW.nr_atendimento)<LOCALTIMESTAMP then Obter_data_alta_Atendimento(NEW.nr_atendimento) else LOCALTIMESTAMP end),
					nm_usuario        = 'TASY',
					dt_atualizacao    = LOCALTIMESTAMP						   
			where   nr_sequencia      = nr_sequencia_w;
        end if;

		dt_procedimento_w:= trunc(coalesce(dt_procedimento_w,LOCALTIMESTAMP));

		if((trunc(LOCALTIMESTAMP) >= trunc(Obter_data_alta_Atendimento(NEW.nr_atendimento))) and dt_procedimento_w<=trunc(Obter_data_alta_Atendimento(NEW.nr_atendimento))) then
			select nextval('patient_category_log_seq') into STRICT nr_sequencia_ww;

			insert into patient_category_log(
			nr_sequencia,
			nr_seq_interno,
			nr_seq_patient_category_old,
			nr_seq_patient_category_new,
			dt_atualizacao,
			dt_start_category,
			nm_usuario,
			nr_atendimento,
			dt_atualizacao_nrec,
			nm_usuario_nrec
			) values (
			nr_sequencia_ww,--patient_category_log_seq.nextval,
			NEW.nr_seq_interno,
			coalesce(nr_seq_patient_category_new_w,OLD.nr_seq_patient_category),
			NEW.nr_seq_patient_category,
			LOCALTIMESTAMP,
			coalesce(dt_procedimento_w,LOCALTIMESTAMP),
			NEW.nm_usuario,
			NEW.nr_atendimento,
			LOCALTIMESTAMP,
			NEW.nm_usuario
			);

			update  patient_category_log
			set     dt_end_category   = dt_end_category_w,
					nm_usuario        = 'TASY'
			where   nr_sequencia      = nr_sequencia_ww;

		end if;
	end;
       if (nr_sequencia_ww is not null) then
            select dt_start_category, dt_end_category,nr_seq_patient_category_new
            into STRICT   dt_start_category_ww, dt_end_category_ww,nr_seq_patient_category_new_ww
            from patient_category_log
            where nr_sequencia=nr_sequencia_ww;

			select case
				   when exists ( select 1
						  from	patient_category_log
						  where	nr_atendimento= NEW.nr_atendimento
						  and trunc(dt_start_category) > trunc(dt_start_category_ww)
						)
				   then 0
				   else 1
				   end
				   into STRICT	qt_last_record_ww
			;
				
			if (qt_last_record_ww=0)then
				select min(dt_start_category)
				into STRICT dt_start_category_ww
				from patient_category_log
				where nr_atendimento    = NEW.nr_atendimento
				and trunc(dt_start_category) > trunc(dt_start_category_ww);
			else
				nr_seq_patient_category_new_ww:= nr_seq_patient_category_new_w;
			end if;
            		
			if (dt_end_category_ww is not null) then

				select 	nr_sequencia
				into STRICT 	nr_sequencia_www
				from 	patient_category_log
				where 	trunc(dt_start_category) = trunc(dt_start_category_ww)
				and     nr_atendimento    = NEW.nr_atendimento;


				update  patient_category_log
				set     nm_usuario        = 'TASY',
						dt_atualizacao    = LOCALTIMESTAMP	,
						nr_seq_patient_category_old=nr_seq_patient_category_new_ww
				where   nr_sequencia      = nr_sequencia_www;
            end if;
        end if;

        if (OBTER_SE_ATENDIMENTO_ALTA(NEW.nr_atendimento) ='S') then

                select	max(dt_start_category)
                into STRICT	dt_start_category_www
                from	patient_category_log
                where	nr_atendimento    = NEW.nr_atendimento;

                select	nr_sequencia, dt_end_category
                into STRICT	nr_sequencia_wwww, dt_end_category_www
                from	patient_category_log
                where	trunc(dt_start_category)= trunc(dt_start_category_www)
                and		nr_atendimento    = NEW.nr_atendimento;

                if (dt_end_category_www is null) then
                    update	patient_category_log
                    set		dt_end_category = trunc(Obter_data_alta_Atendimento(NEW.nr_atendimento))
                    where	nr_sequencia = nr_sequencia_wwww;
                end if;
        end if;

  end if;

  select	count(*)
  into STRICT	qt_registros_w
  from	atend_paciente_unidade
  where	nr_atendimento = NEW.nr_atendimento;

  if (dt_alta_w is null) and (dt_cancelamento_atend_w is null) and (qt_registros_w > 0) then
    BEGIN
    CALL intpd_enviar_atendimento(NEW.nr_atendimento, 'A', '0', NEW.nm_usuario);
    /*O parametro ie_controle_tag_p e usado para controlar se foi uma movimentacao de paciente.
      0 - Nao foi uma movimentacao
      1 - Foi uma movimentacao
    Neste caso, nao e uma insercao na movimentacao do paciente, entao e 0 */

    end;
  end if;

  if (dt_cancelamento_atend_w is null) and (qt_registros_w > 0) then
    CALL call_bifrost_content('patient.information.update','encounter_json_pck.get_encounter_message_clob('||NEW.nr_atendimento||')', NEW.nm_usuario);

  end if;

end if;
  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atend_categ_convenio_update() FROM PUBLIC;

CREATE TRIGGER atend_categ_convenio_update
	AFTER UPDATE ON atend_categoria_convenio FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atend_categ_convenio_update();

