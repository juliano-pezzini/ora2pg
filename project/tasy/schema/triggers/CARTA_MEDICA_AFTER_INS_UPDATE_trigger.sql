-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS carta_medica_after_ins_update ON carta_medica CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_carta_medica_after_ins_update() RETURNS trigger AS $BODY$
DECLARE
CONST_ML_TASK_LIST_W			constant varchar(2) := 'ML';

ie_participante_w				bigint	:= 0;
ie_aprovado_w					bigint	:= 0;
qt_pendencias_assinatura_w		bigint	:= 0;
cd_profissional_w				bigint	:= 0;
CD_PESSOA_USUARIO_W				bigint	:= 0;
nr_seq_tipo_adm_fat_atd_w		atendimento_paciente.nr_seq_tipo_admissao_fat%type;
nr_seq_episodio_w				atendimento_paciente.nr_seq_episodio%type;

C01 CURSOR FOR
	SELECT	coalesce(b.qt_tempo_normal, 0) qt_tempo_normal,
			coalesce(b.nr_sequencia, 0) nr_sequencia
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = CONST_ML_TASK_LIST_W
								and		x.ie_situacao = 'A')
	and		coalesce(b.ie_tipo_pend_carta,'A') = 'A';

C02 CURSOR FOR
	SELECT  a.nm_usuario_resp nm_usuario_w
    from    PARTICIPANTE_CARTA_MEDICA a
    where   NR_SEQ_CARTA_MAE = NEW.nr_seq_carta_mae
    and     a.IE_DEVE_ASSINAR = 'S';

C03 CURSOR FOR
    SELECT  a.nm_usuario_resp nm_usuario_w
    from    PARTICIPANTE_CARTA_MEDICA a
    where   NR_SEQ_CARTA_MAE = NEW.nr_seq_carta_mae
    and     NR_SEQ_APRESENT =   (   SELECT  min(NR_SEQ_APRESENT)
                                    from    PARTICIPANTE_CARTA_MEDICA b
                                    where   b.NR_SEQ_CARTA_MAE = a.NR_SEQ_CARTA
                                    and     b.IE_DEVE_ASSINAR = 'S'
									and		b.DT_ASSINATURA is null);

C04 CURSOR FOR
    SELECT  a.nm_usuario_resp nm_usuario_w
	from    PARTICIPANTE_CARTA_MEDICA a
	where   a.NR_SEQ_CARTA_MAE = NEW.nr_seq_carta_mae
	and     a.IE_DEVE_ASSINAR = 'S'
	and     a.NR_SEQ_APRESENT in   (    SELECT  NR_SEQ_APRESENT
										from    PARTICIPANTE_CARTA_MEDICA b
										where   b.NR_SEQ_CARTA_MAE = a.NR_SEQ_CARTA_MAE
										and     b.IE_DEVE_ASSINAR = 'S'
										and     b.NR_SEQ_APRESENT > (	select	c.NR_SEQ_APRESENT
																		from 	PARTICIPANTE_CARTA_MEDICA c
																		where 	c.NR_SEQ_CARTA_MAE = b.NR_SEQ_CARTA_MAE
																		and 	c.nm_usuario_resp = NEW.nm_usuario
																		and 	c.DT_ASSINATURA is not null ));

C05 CURSOR FOR
    SELECT  a.nm_usuario_resp nm_usuario_w
	from    PARTICIPANTE_CARTA_MEDICA a
	where   a.NR_SEQ_CARTA_MAE = NEW.nr_seq_carta_mae
	and     a.IE_DEVE_ASSINAR = 'S'
	and     a.NR_SEQ_APRESENT =   (     SELECT  min(NR_SEQ_APRESENT)
										from    PARTICIPANTE_CARTA_MEDICA b
										where   b.NR_SEQ_CARTA_MAE = a.NR_SEQ_CARTA_MAE
										and     b.IE_DEVE_ASSINAR = 'S'
										and     b.NR_SEQ_APRESENT > (	select	c.NR_SEQ_APRESENT
																		from 	PARTICIPANTE_CARTA_MEDICA c
																		where 	c.NR_SEQ_CARTA_MAE = b.NR_SEQ_CARTA_MAE
																		and 	c.nm_usuario_resp = NEW.nm_usuario
																		and 	c.DT_ASSINATURA is not null ));

BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then
	if (OLD.ds_carta <> NEW.ds_carta and
		OLD.nm_usuario <> NEW.nm_usuario and
		NEW.IE_STATUS_APROVACAO in ('EE', 'AP')) then

		select	count(*)
		into STRICT	ie_participante_w
		from	PARTICIPANTE_CARTA_MEDICA
		where	NR_SEQ_CARTA_MAE = NEW.nr_seq_carta_mae
		and 	nm_usuario_resp = NEW.nm_usuario;

		select	count(*)
		into STRICT	qt_pendencias_assinatura_w
		from	wl_worklist a,
				wl_item b,
				wl_regra_item c
		where	a.nr_seq_carta_mae = NEW.nr_seq_carta_mae
		and		a.dt_final_real is null
		and		b.nr_sequencia = a.nr_seq_item
		and		c.nr_sequencia = a.nr_seq_regra
		and		b.cd_categoria = CONST_ML_TASK_LIST_W
		and		c.ie_tipo_pend_carta = 'A'
		and		b.ie_situacao = 'A'
		and		c.ie_situacao = 'A'
		and		a.cd_profissional <> NEW.CD_MEDICO;

		select	max(nr_seq_tipo_admissao_fat),
				max(nr_seq_episodio)
		into STRICT	nr_seq_tipo_adm_fat_atd_w,
				nr_seq_episodio_w
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento;

		select	count(*)
		into STRICT	ie_aprovado_w
		from	PARTICIPANTE_CARTA_MEDICA
		where	NR_SEQ_CARTA_MAE = NEW.nr_seq_carta_mae
		and 	coalesce(ie_deve_assinar, 'S') = 'S'
		and		dt_assinatura is null
		and		NM_USUARIO_ASSINAT is null;

		if (ie_aprovado_w = 0) then
			CALL atualizar_status_aprovacao(NEW.nr_seq_carta_mae, 'AP', NEW.nr_sequencia);
		else
			if (ie_participante_w > 0) then
				for c01_w in C01 loop
					for c04_w in C04 loop
						cd_profissional_w := OBTER_PESSOA_FISICA_USUARIO(c04_w.nm_usuario_w, 'C');
						CALL wl_gerar_finalizar_tarefa(	CONST_ML_TASK_LIST_W,
													'F',
													null,
													null,
													wheb_usuario_pck.get_nm_usuario,
													null,
													'S',
													null,
													null,
													null,
													null,
													null,
													NEW.nr_seq_carta_mae,
													null,
													null,
													null,
													c01_w.nr_sequencia,
													null,
													null,
													null,
													null,
													null,
													null,
													null,
													LOCALTIMESTAMP,
													null,
													null,
													null);
						update	PARTICIPANTE_CARTA_MEDICA
						set		dt_assinatura  = NULL,
								NM_USUARIO_ASSINAT  = NULL
						where 	NR_SEQ_CARTA_MAE = NEW.nr_seq_carta_mae
						and		ie_deve_assinar = 'S'
						and 	nm_usuario_resp = c04_w.nm_usuario_w;

						for c05_w in C05 loop
							BEGIN
								CALL wl_gerar_finalizar_tarefa(	CONST_ML_TASK_LIST_W,
															'I',
															NEW.nr_atendimento,
															NEW.cd_pessoa_fisica,
															wheb_usuario_pck.get_nm_usuario,
															(LOCALTIMESTAMP+(c01_w.qt_tempo_normal/24)),
															'S',
															null,
															null,
															null,
															null,
															null,
															NEW.nr_seq_carta_mae,
															null,
															null,
															null,
															c01_w.nr_sequencia,
															null,
															null,
															null,
															null,
															null,
															null,
															null,
															LOCALTIMESTAMP,
															nr_seq_episodio_w,
															null,
															obter_pf_usuario(c05_w.nm_usuario_w,'C'));
							end;
						end loop;

					end loop;
				end loop;
			else
				update	PARTICIPANTE_CARTA_MEDICA
				set		dt_assinatura  = NULL,
						NM_USUARIO_ASSINAT  = NULL
				where 	NR_SEQ_CARTA_MAE = NEW.nr_seq_carta_mae
				and		ie_deve_assinar = 'S';

				for c01_w in C01 loop
				BEGIN
					CALL wl_gerar_finalizar_tarefa(	CONST_ML_TASK_LIST_W,
												'F',
												null,
												null,
												wheb_usuario_pck.get_nm_usuario,
												null,
												'N',
												null,
												null,
												null,
												null,
												null,
												NEW.nr_seq_carta_mae,
												null,
												null,
												null,
												c01_w.nr_sequencia,
												null,
												null,
												null,
												null,
												null,
												null,
												null,
												LOCALTIMESTAMP,
												null,
												null,
												null);

					if (c01_w.qt_tempo_normal > 0 and obter_se_regra_geracao(c01_w.nr_sequencia, nr_seq_episodio_w, nr_seq_tipo_adm_fat_atd_w) = 'S') then
						for c03_w in C03 loop
							cd_pessoa_usuario_w := OBTER_PESSOA_FISICA_USUARIO(c03_w.nm_usuario_w, 'C');
							CALL wl_gerar_finalizar_tarefa(	CONST_ML_TASK_LIST_W,
														'I',
														NEW.nr_atendimento,
														NEW.cd_pessoa_fisica,
														wheb_usuario_pck.get_nm_usuario,
														(LOCALTIMESTAMP+(c01_w.qt_tempo_normal/24)),
														'N',
														null,
														null,
														null,
														null,
														null,
														NEW.nr_seq_carta_mae,
														null,
														null,
														null,
														c01_w.nr_sequencia,
														null,
														null,
														null,
														null,
														null,
														null,
														null,
														LOCALTIMESTAMP,
														nr_seq_episodio_w,
														null,
														cd_pessoa_usuario_w);
							CALL atualizar_status_aprovacao(NEW.nr_seq_carta_mae, 'EE', NEW.nr_sequencia);
						end loop;
					end if;
				end;
				end loop;
			end if;
		end if;
    end if;
end if;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_carta_medica_after_ins_update() FROM PUBLIC;

CREATE TRIGGER carta_medica_after_ins_update
	AFTER INSERT OR UPDATE ON carta_medica FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_carta_medica_after_ins_update();

