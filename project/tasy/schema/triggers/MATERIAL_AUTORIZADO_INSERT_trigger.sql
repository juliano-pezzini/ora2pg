-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS material_autorizado_insert ON material_autorizado CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_material_autorizado_insert() RETURNS trigger AS $BODY$
declare

ie_tipo_atendimento_w	bigint;
cd_mat_convenio_w	varchar(20)	:= '';
cd_grupo_w		varchar(20)	:= '';
cd_cgc_w		varchar(20);
cd_cgc_convert_w		varchar(20);
nr_seq_conversao_w	bigint;
nr_atendimento_w		bigint;
cd_estabelecimento_w	bigint;
cd_convenio_w		bigint;
ds_mat_convenio_w	varchar(255) := '';
ie_gerar_historico_w	varchar(15) := 'N';
ie_carater_inter_sus_w	varchar(2);
cd_categoria_w		varchar(10);
tx_conversao_w		double precision := 0;
cd_setor_origem_w	integer;
cd_unidade_convenio_w	varchar(5);
nr_seq_tuss_mat_item_w	bigint;
ie_clinica_w		atendimento_paciente.ie_clinica%type;
cd_material_tuss_w	material_tuss.cd_material_tuss%type;
ds_material_tuss_w	tuss_material_item.ds_material%type;
ds_historico_w		varchar(2000);

ie_aplicar_tx_conversao_w	varchar(15);
BEGIN
  BEGIN
ie_gerar_historico_w := obter_param_usuario(3004, 139, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.Get_cd_estabelecimento, ie_gerar_historico_w);
ie_aplicar_tx_conversao_w := obter_param_usuario(3004, 163, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.Get_cd_estabelecimento, ie_aplicar_tx_conversao_w);

/* os 51884 - gravar proc convenio */


select	a.cd_convenio,
	a.nr_atendimento,
	coalesce(a.cd_estabelecimento,(obter_dados_autor_convenio(a.nr_sequencia, 'E'))::numeric ),
	b.cd_cgc,
	(substr(obter_tipo_atend_autor(a.nr_atendimento,a.nr_seq_agenda,a.nr_seq_agenda_consulta,nr_seq_age_integ,a.nr_seq_paciente_setor,'C'),1,1))::numeric ,
	substr(Obter_dados_autor_convenio(a.nr_sequencia,'CC'),1,10),
	a.cd_setor_origem
into STRICT	cd_convenio_w,
	nr_atendimento_w,
	cd_estabelecimento_w,
	cd_cgc_w,
	ie_tipo_atendimento_w,
	cd_categoria_w,
	cd_setor_origem_w
from	convenio b,
	autorizacao_convenio a
where	a.nr_sequencia	= NEW.nr_sequencia_autor
and	a.cd_convenio	= b.cd_convenio;

if (nr_atendimento_w is not null) then
	select	ie_tipo_atendimento,
		ie_carater_inter_sus,
		ie_clinica
	into STRICT	ie_tipo_atendimento_w,
		ie_carater_inter_sus_w,
		ie_clinica_w
	from	atendimento_paciente
	where	nr_atendimento	= nr_atendimento_w;

end if;

if (NEW.cd_material is not null) then

	SELECT * FROM converte_material_convenio(cd_convenio_w, NEW.cd_material, null, null, coalesce(NEW.cd_cgc_fabricante, cd_cgc_w), cd_estabelecimento_w, LOCALTIMESTAMP, null, cd_mat_convenio_w, cd_grupo_w, nr_seq_conversao_w, ie_tipo_atendimento_w, null, 0, null, ie_carater_inter_sus_w, null, null, ie_clinica_w, NEW.ie_tipo_prec_especial) INTO STRICT cd_mat_convenio_w, cd_grupo_w, nr_seq_conversao_w;

	NEW.vl_ultima_compra		:= (obter_dados_ultima_compra(cd_estabelecimento_w,NEW.cd_material,'VU'))::numeric;
	NEW.cd_cgc_ultima_compra		:= obter_dados_ultima_compra(cd_estabelecimento_w,NEW.cd_material,'PJ');
	NEW.dt_ultima_compra		:= Obter_Data_Ultima_Compra(NEW.cd_material,cd_estabelecimento_w); --to_date(obter_dados_ultima_compra(cd_estabelecimento_w,:new.cd_material,'DT'),'dd/mm/yyyy');
	
	SELECT * FROM DEFINE_MATERIAL_TUSS_AUTOR(cd_estabelecimento_w, NEW.cd_material, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, NEW.ie_origem_preco, LOCALTIMESTAMP, cd_material_tuss_w, nr_seq_tuss_mat_item_w, ds_material_tuss_w, NEW.cd_cgc_fabricante, NEW.nr_seq_marca, nr_atendimento_w) INTO STRICT cd_material_tuss_w, nr_seq_tuss_mat_item_w, ds_material_tuss_w;
		
		select CASE WHEN cd_material_tuss_w='0' THEN null  ELSE cd_material_tuss_w END
		into STRICT cd_material_tuss_w
		;

	NEW.nr_seq_tuss_mat_item		:= nr_seq_tuss_mat_item_w;	
	NEW.cd_material_tuss		:= cd_material_tuss_w;
	NEW.ds_material_tuss		:= ds_material_tuss_w;

end if;

if (nr_seq_conversao_w is not null) then

	BEGIN
	select	coalesce(a.tx_conversao_qtde,0),
		upper(a.cd_unidade_convenio),
		substr(a.ds_material_convenio,1,255)
	into STRICT	tx_conversao_w,
		cd_unidade_convenio_w,
		ds_mat_convenio_w
	from	conversao_material_convenio a
	where	a.nr_sequencia = nr_seq_conversao_w;
	exception
	when others then
		tx_conversao_w := 0;
		cd_unidade_convenio_w := null;
		ds_mat_convenio_w     := null;
	end;
	
	if (coalesce(ie_aplicar_tx_conversao_w,'N') in ('S','A')) and (coalesce(tx_conversao_w,0) > 0) and (NEW.qt_solicitada > 0) and (TG_OP = 'INSERT' or OLD.qt_solicitada <> NEW.qt_solicitada) then
		NEW.qt_solicitada := dividir(NEW.qt_solicitada,tx_conversao_w);
	end if;
	
	if (cd_mat_convenio_w is not null) then
		NEW.cd_material_convenio	:= cd_mat_convenio_w;
	end if;
		

	if (ds_mat_convenio_w is not null) then
		NEW.ds_mat_convenio		:= ds_mat_convenio_w;
	end if;


end if;

if (coalesce(ie_gerar_historico_w, 'N') = 'S') and (TG_OP = 'INSERT') then
	
	ds_historico_w := substr(NEW.cd_material || ' - ' || substr(obter_desc_material(NEW.cd_material),1,100) || ' - ' || NEW.cd_cgc_fabricante || chr(13) || chr(10) || wheb_mensagem_pck.get_texto(311725) || NEW.qt_solicitada,1,2000);
		
	CALL gravar_autor_conv_log_alter(NEW.nr_sequencia_autor, substr(wheb_mensagem_pck.get_texto(311727),1,100), substr(ds_historico_w,1,2000),NEW.nm_usuario);

	insert into autorizacao_convenio_hist(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		nr_atendimento,
		ds_historico,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_sequencia_autor)
	values (
		nextval('autorizacao_convenio_hist_seq'),
		LOCALTIMESTAMP,
		NEW.nm_usuario,
		NEW.nr_atendimento,
		substr(WHEB_MENSAGEM_PCK.get_texto(311727) || chr(13) || chr(10) || --Incluido material na autorizacao 
		NEW.cd_material || ' - ' || substr(obter_desc_material(NEW.cd_material),1,100) || chr(13) || chr(10) ||
		WHEB_MENSAGEM_PCK.get_texto(311725) || NEW.qt_solicitada,1,4000), --Qtde solicitada: 
		LOCALTIMESTAMP,
		NEW.nm_usuario,
		NEW.nr_sequencia_autor);

end if;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_material_autorizado_insert() FROM PUBLIC;

CREATE TRIGGER material_autorizado_insert
	BEFORE INSERT OR UPDATE ON material_autorizado FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_material_autorizado_insert();

