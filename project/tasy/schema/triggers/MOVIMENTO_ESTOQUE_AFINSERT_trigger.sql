-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS movimento_estoque_afinsert ON movimento_estoque CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_movimento_estoque_afinsert() RETURNS trigger AS $BODY$
declare
nr_sequencia_w		bigint;
qt_existe_w		bigint;
reg_integracao_p	gerar_int_padrao.reg_integracao;
ie_entrada_saida_w	operacao_estoque.ie_entrada_saida%type;
ie_tipo_requisicao_w	operacao_estoque.ie_tipo_requisicao%type;
ie_laudo_w		integer;
qt_proced_1_mes_w	sus_laudo_medicamento.qt_proced_1_mes%type;
qt_proced_2_mes_w	sus_laudo_medicamento.qt_proced_2_mes%type;
qt_proced_3_mes_w	sus_laudo_medicamento.qt_proced_3_mes%type;
dt_pri_tratamento_w	sus_laudo_paciente.dt_pri_tratamento%type;
dt_seg_tratamento_w	sus_laudo_paciente.dt_seg_tratamento%type;
dt_ter_tratamento_w	sus_laudo_paciente.dt_ter_tratamento%type;
nr_mov_estoque_w	transm_bndasaf.cd_registro_origem%type;
qt_movimento_w		transm_bndasaf.qt_movimento%type;
nr_sequencia_transm_w   transm_bndasaf.nr_sequencia%type;
ds_retorno_integracao_w	text;
json_w            philips_json;
json_data_w       text;
BEGIN
  BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
if (NEW.dt_processo is not null) then
    BEGIN
    select  ie_entrada_saida
    into STRICT    ie_entrada_saida_w
    from    operacao_estoque
    where   cd_operacao_estoque = NEW.cd_operacao_estoque;

    if (NEW.cd_acao = '2') then
        select  CASE WHEN ie_entrada_saida_w='E' THEN 'S' WHEN ie_entrada_saida_w='S' THEN 'E' END
        into STRICT    ie_entrada_saida_w
;
    end if;

    select  cd_grupo_material,
        cd_subgrupo_material,
        cd_classe_material,
        nr_seq_familia
    into STRICT    reg_integracao_p.cd_grupo_material,
        reg_integracao_p.cd_subgrupo_material,
        reg_integracao_p.cd_classe_material,
        reg_integracao_p.nr_seq_familia
    from    estrutura_material_v
    where   cd_material = NEW.cd_material;

    reg_integracao_p.ie_operacao            :=  'I';
    reg_integracao_p.cd_estab_documento     :=  NEW.cd_estabelecimento;
    reg_integracao_p.cd_material            :=  NEW.cd_material;
    reg_integracao_p.ie_padronizado         :=  substr(obter_se_material_padronizado(NEW.cd_estabelecimento, NEW.cd_material),1,1);
    reg_integracao_p.cd_local_estoque       :=  NEW.cd_local_estoque;
    reg_integracao_p.cd_centro_custo        :=  NEW.cd_centro_custo;
    reg_integracao_p.cd_operacao_estoque        :=  NEW.cd_operacao_estoque;
    reg_integracao_p.ie_origem_documento        :=  NEW.ie_origem_documento;
    reg_integracao_p.cd_local_estoque_destino   :=  NEW.cd_local_estoque_destino;
    reg_integracao_p.cd_acao                :=      NEW.cd_acao;
    reg_integracao_p.qt_movimento                :=      NEW.qt_movimento;
    reg_integracao_p.nr_documento                :=      NEW.nr_documento;

    reg_integracao_p := gerar_int_padrao.gravar_integracao('10', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);
    --Integracao com Horus

    if (coalesce(NEW.nr_seq_lote_fornec, 0) <> 0) then
        if (ie_entrada_saida_w = 'E') then
            --entradas

            reg_integracao_p := gerar_int_padrao.gravar_integracao('393', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);

            select  bifrost.send_integration(
                'drugEntry.send.request',
                'com.philips.tasy.integration.stock.outbound.DrugEntryCallback',
                '{"document":'||NEW.nr_movimento_estoque||', "userName":"'||NEW.nm_usuario||'", "event":"393",
                "establishment":'||coalesce(NEW.cd_estabelecimento, 0)||',
                "stockLocation":'||coalesce(NEW.cd_local_estoque, 0)||',
                "stockMovementDocument":'||coalesce(NEW.nr_documento, 0)||',
                "supplierBatch":'||coalesce(NEW.nr_seq_lote_fornec, 0)||',
				"stockQuantity":'||coalesce(NEW.qt_estoque, 0)||',
                "stockOperation":'||coalesce(NEW.cd_operacao_estoque, 0)||'}',
                NEW.nm_usuario)
            into STRICT    ds_retorno_integracao_w
;

        else
            --saida

            reg_integracao_p := gerar_int_padrao.gravar_integracao('394', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);

            select  bifrost.send_integration(
                'drugExit.send.request',
                'com.philips.tasy.integration.stock.outbound.DrugExitCallback',
                '{"document":'||NEW.nr_movimento_estoque||', "userName":"'||NEW.nm_usuario||'", "event":"394",
                "establishment":'||coalesce(NEW.cd_estabelecimento,0)||',
                "stockLocation":'||coalesce(NEW.cd_local_estoque,0)||',
                "destinationStockLocation":'||coalesce(NEW.cd_local_estoque_destino,0)||',
                "supplierBatch":'||coalesce(NEW.nr_seq_lote_fornec,0)||',
				"stockQuantity":'||coalesce(NEW.qt_estoque, 0)||',
                "stockOperation":'||coalesce(NEW.cd_operacao_estoque,0)||'}',
                NEW.nm_usuario)
            into STRICT    ds_retorno_integracao_w
;
        end if;

        select  coalesce(ie_tipo_requisicao,0)
        into STRICT    ie_tipo_requisicao_w
        from    operacao_estoque
        where   cd_operacao_estoque = NEW.cd_operacao_estoque;

        select coalesce(max(a.nr_sequencia),0)
        into STRICT nr_sequencia_transm_w
        from    transm_bndasaf a
        where   a.cd_material = NEW.cd_material
        and     coalesce(a.nr_atendimento,0) = coalesce(NEW.nr_atendimento,0)
        and     coalesce(a.nr_documento,0) = coalesce(NEW.nr_documento,0)
        and     a.ie_evento = '396'
        and     a.cd_acao = 1
        and     NEW.cd_acao <> 1;

        select coalesce(max(cd_registro_origem),0)
        into STRICT nr_mov_estoque_w
        from transm_bndasaf
        where nr_sequencia = nr_sequencia_transm_w;

        if (ie_tipo_requisicao_w = 4 and nr_mov_estoque_w = 0 )then
		BEGIN
		    select  1
		    into STRICT    ie_laudo_w
		    from    sus_laudo_paciente a,
			sus_material_opm d,
			sus_laudo_medicamento f
		    where   1 = 1
		    and     a.nr_atendimento = NEW.nr_atendimento
		    and     d.cd_material = NEW.cd_material
		    and     d.cd_procedimento = f.cd_procedimento
		    and     f.nr_seq_laudo_sus = a.nr_seq_interno  LIMIT 1;
		exception when no_data_found then
			ie_laudo_w := 0;
		end;

            -- Verifica se a movimentacao possui laudo do sus e busca a quantidade para criacao de dispensacao

            if (ie_laudo_w <> 0) then

                select  distinct
                    f.qt_proced_1_mes,
                    f.qt_proced_2_mes,
                    f.qt_proced_3_mes,
                    to_date(a.DT_PRI_TRATAMENTO,'mm/yyyy'),
                    to_date(a.DT_SEG_TRATAMENTO,'mm/yyyy'),
                    to_date(a.DT_TER_TRATAMENTO,'mm/yyyy')
                into STRICT    qt_proced_1_mes_w,
                    qt_proced_2_mes_w,
                    qt_proced_3_mes_w,
                    dt_pri_tratamento_w,
                    dt_seg_tratamento_w,
                    dt_ter_tratamento_w
                from    sus_laudo_paciente a,
                    sus_material_opm d,
                    sus_laudo_medicamento f
                where   1 = 1
                and     a.nr_atendimento = NEW.nr_atendimento
                and     d.cd_material =  NEW.cd_material
                and     d.cd_procedimento = f.cd_procedimento
                and     f.nr_seq_laudo_sus = a.nr_seq_interno  LIMIT 1;

                if (NEW.dt_mesano_referencia = dt_pri_tratamento_w)
                    and (NEW.qt_movimento > qt_proced_1_mes_w )
                    and (NEW.qt_movimento = (qt_proced_1_mes_w + qt_proced_2_mes_w + qt_proced_3_mes_w)) then

                    reg_integracao_p.qt_mes := qt_proced_1_mes_w;
                    reg_integracao_p.dt_processo := DT_PRI_TRATAMENTO_w;
                    reg_integracao_p.ie_lido := 'S';
                    reg_integracao_p := gerar_int_padrao.gravar_integracao('396', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);

                    reg_integracao_p.qt_mes := qt_proced_2_mes_w;
                    reg_integracao_p.dt_processo := DT_SEG_TRATAMENTO_w;
                    reg_integracao_p.ie_lido := 'S';
                    reg_integracao_p := gerar_int_padrao.gravar_integracao('396', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);

                    reg_integracao_p.qt_mes := qt_proced_3_mes_w;
                    reg_integracao_p.dt_processo := DT_TER_TRATAMENTO_w;
                    reg_integracao_p.ie_lido := 'S';
                    reg_integracao_p := gerar_int_padrao.gravar_integracao('396', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);

                elsif (NEW.dt_mesano_referencia = DT_SEG_TRATAMENTO_w)
                    and (NEW.qt_movimento > qt_proced_2_mes_w)
                    and (NEW.qt_movimento = (qt_proced_2_mes_w + qt_proced_3_mes_w)) then

                    reg_integracao_p.qt_mes := qt_proced_2_mes_w;
                    reg_integracao_p.dt_processo := DT_SEG_TRATAMENTO_w;
                    reg_integracao_p.ie_lido := 'S';
                    reg_integracao_p := gerar_int_padrao.gravar_integracao('396', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);

                    reg_integracao_p.qt_mes := qt_proced_3_mes_w;
                    reg_integracao_p.dt_processo := DT_TER_TRATAMENTO_w;
                    reg_integracao_p.ie_lido := 'S';
                    reg_integracao_p := gerar_int_padrao.gravar_integracao('396', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);
                else
                    reg_integracao_p := gerar_int_padrao.gravar_integracao('396', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);
                end if;
            else
                reg_integracao_p := gerar_int_padrao.gravar_integracao('396', NEW.nr_movimento_estoque, NEW.nm_usuario, reg_integracao_p);

            end if;

            select  bifrost.send_integration('dispensingMedicines.send.request',
                'com.philips.tasy.integration.stock.dispensation.DispensingMedicinesCallback',
                '{"document":'||NEW.nr_movimento_estoque||', "userName":"'||NEW.nm_usuario||'", "event":"396",
                "establishment":'||coalesce(NEW.cd_estabelecimento, 0)||',
                "stockLocation":'||coalesce(NEW.cd_local_estoque, 0)||',
                "supplierBatch":'||coalesce(NEW.nr_seq_lote_fornec, 0)||',
                "encounter":'||coalesce(NEW.nr_atendimento, 0)||',
                "prescription":'||coalesce(NEW.nr_prescricao, 0)||',
                "dispensingAmount":'||coalesce(NEW.qt_movimento, 0)||',
                "referenceMonthYear":"'||NEW.dt_mesano_referencia||'",
                "dispensingDate":"'||NEW.dt_movimento_estoque||'"}',
                NEW.nm_usuario)
            into STRICT    ds_retorno_integracao_w
;

        elsif (ie_tipo_requisicao_w in ('3', '4') and nr_mov_estoque_w > 0) then
            
            select  coalesce(max(qt_movimento),0)
            into STRICT    qt_movimento_w
            from    transm_bndasaf 
            where   nr_sequencia = nr_sequencia_transm_w;

            reg_integracao_p.ie_operacao                :=  'I';
            reg_integracao_p.cd_estab_documento         :=  NEW.cd_estabelecimento;
            reg_integracao_p.cd_material                :=  NEW.cd_material;
            reg_integracao_p.ie_padronizado             :=  substr(obter_se_material_padronizado(NEW.cd_estabelecimento, NEW.cd_material),1,1);
            reg_integracao_p.cd_local_estoque           :=  NEW.cd_local_estoque;
            reg_integracao_p.cd_centro_custo            :=  NEW.cd_centro_custo;
            reg_integracao_p.cd_operacao_estoque        :=  NEW.cd_operacao_estoque;
            reg_integracao_p.ie_origem_documento        :=  NEW.ie_origem_documento;
            reg_integracao_p.cd_local_estoque_destino   :=  NEW.cd_local_estoque_destino;

            if (NEW.qt_movimento = qt_movimento_w) then
                reg_integracao_p := gerar_int_padrao.gravar_integracao('397', nr_mov_estoque_w, NEW.nm_usuario, reg_integracao_p);--exclusao

                select  bifrost.send_integration(
                    'recordDeletion.send.request',
                    'com.philips.tasy.integration.stock.outbound.RecordDeletionCallback',
                    to_char(nr_mov_estoque_w),
                    NEW.nm_usuario)
                into STRICT    ds_retorno_integracao_w
;
            else
                reg_integracao_p := gerar_int_padrao.gravar_integracao('398', nr_mov_estoque_w, NEW.nm_usuario, reg_integracao_p);--retificacao

                select  bifrost.send_integration(
                    'retificationDispensingMedicines.send.request',
                    'com.philips.tasy.integration.stock.dispensation.RetificationDispensingMedicinesCallback',
                    '{"document":'||NEW.nr_movimento_estoque||', "userName":"'||NEW.nm_usuario||'", "event":"398",
                    "stockLocation":'||coalesce(NEW.cd_local_estoque, 0)||',
                    "supplierBatch":'||coalesce(NEW.nr_seq_lote_fornec, 0)||',
                    "referenceMonthYear":"'||NEW.dt_mesano_referencia||'",
                    "dispensingAmount":'||coalesce(NEW.qt_movimento, 0)||',
                    "dispensingDate":"'||NEW.dt_movimento_estoque||'",
                    "encounter":"'||NEW.nr_atendimento||'",
                    "prescription":'||coalesce(NEW.nr_prescricao, 0)||'}',
                    NEW.nm_usuario)
                into STRICT    ds_retorno_integracao_w
;
            end if;

            delete from  transm_bndasaf
            where cd_registro_origem = nr_mov_estoque_w;
        end if;
    end if;

    -- Integracao LogisOne

    CALL integrar_movimento_logisone(NEW.nr_movimento_estoque, NEW.cd_material, NEW.cd_operacao_estoque, NEW.cd_local_estoque, NEW.nm_usuario, 
				NEW.cd_estabelecimento, NEW.nr_documento, NEW.nr_seq_lote_fornec, NEW.qt_estoque );
    end;

    -- Integracao GTPLAN

    if (coalesce(NEW.nr_seq_lote_fornec, 0) = 0 and NEW.ie_origem_documento = 5 and NEW.cd_funcao != 0) then
            
       json_w := philips_json();
       json_w.put('id', NEW.NR_MOVIMENTO_ESTOQUE);
       json_w.put('establishment', NEW.CD_ESTABELECIMENTO);
       json_w.put('action', NEW.CD_ACAO);
       json_w.put('stockLocation', NEW.CD_LOCAL_ESTOQUE);
       json_w.put('origin', NEW.IE_ORIGEM_DOCUMENTO);
       json_w.put('stockOperation', NEW.CD_OPERACAO_ESTOQUE);
       json_w.put('monthYear', NEW.DT_MESANO_REFERENCIA);
       json_w.put('costCenter', NEW.CD_CENTRO_CUSTO);
       json_w.put('movementDate', NEW.DT_MOVIMENTO_ESTOQUE);
       json_w.put('stockLocationDestination', NEW.CD_LOCAL_ESTOQUE_DESTINO);
       json_w.put('expirationDate', NEW.DT_VALIDADE);
       json_w.put('material', NEW.CD_MATERIAL);
       json_w.put('processDate', NEW.DT_PROCESSO);
       json_w.put('measurementUnit', NEW.CD_UNIDADE_MED_MOV);
       json_w.put('consultationDepartment', NEW.CD_SETOR_ATENDIMENTO);
       json_w.put('stockMaterial', NEW.CD_MATERIAL_ESTOQUE);
       json_w.put('batch', NEW.CD_LOTE_FABRICACAO);
       json_w.put('stockMeasurementUnit', NEW.CD_UNIDADE_MEDIDA_ESTOQUE);
       json_w.put('documentNumber', NEW.NR_DOCUMENTO);
       json_w.put('documentItemSequence', NEW.NR_SEQUENCIA_ITEM_DOCTO);
       json_w.put('movementAmount', NEW.QT_MOVIMENTO);
       json_w.put('stockAmount', NEW.QT_ESTOQUE);
       json_w.put('invoiceSeriesNumber', NEW.CD_SERIE_NF);
       json_w.put('attendanceBatchNumber', NEW.NR_LOTE_AP);
       json_w.put('generalLedgerAccount', NEW.CD_CONTA_CONTABIL);
       json_w.put('purchaseOrder', NEW.NR_ORDEM_COMPRA);
       json_w.put('purchaseOrderItem', NEW.NR_ITEM_OCI);
       json_w.put('invoiceSupplier', NEW.CD_FORNECEDOR);
       json_w.put('inventoryAmount', NEW.QT_INVENTARIO);
       json_w.put('notes', NEW.DS_OBSERVACAO);
       json_w.put('encounter', NEW.NR_ATENDIMENTO);
       json_w.put('clinicalOrder', NEW.NR_PRESCRICAO);
       json_w.put('correspondingStockMovement', NEW.NR_MOVIMENTO_ESTOQUE_CORRESP);
       json_w.put('documentSequence', NEW.NR_SEQUENCIA_DOCUMENTO);
       json_w.put('sourceSequence', NEW.NR_SEQ_TAB_ORIG);
       json_w.put('supplierBatch', NEW.NR_SEQ_LOTE_FORNEC);
       json_w.put('lastUpdate', NEW.DT_ATUALIZACAO);
       json_w.put('productionBatch', NEW.NR_LOTE_PRODUCAO);
       json_w.put('movementSupplier', NEW.CD_CGC_EMITENTE);
       json_w.put('profileCreation', NEW.CD_PERFIL);
       json_w.put('userLastUpdate', NEW.NM_USUARIO);
       json_w.put('prescription', NEW.NR_RECEITA);
       json_w.put('accountingBatch', NEW.NR_LOTE_CONTABIL);
       json_w.put('consignedMovement', NEW.IE_MOVTO_CONSIGNADO);
       json_w.put('value', NEW.VL_MOVIMENTO);
       json_w.put('accountingDate', NEW.DT_CONTABIL);
       json_w.put('inconsistencies', NEW.DS_CONSISTENCIA);
       json_w.put('functionCreated', NEW.CD_FUNCAO);

       dbms_lob.createtemporary(json_data_w, true);
       json_w.(json_data_w);

       json_data_w := bifrost.send_integration_content('inventory.stock_movement.send', json_data_w, wheb_usuario_pck.get_nm_usuario);
    end if;
end if;

select  count(*)
into STRICT    qt_existe_w
from    sup_parametro_integracao a
where   a.ie_evento = 'ME'
and a.ie_forma = 'E'
and a.ie_situacao = 'A';

if (qt_existe_w > 0) and (OLD.dt_processo is null) and (NEW.dt_processo is not null) then

    CALL gravar_sup_int_movto_est(
        NEW.nr_movimento_estoque,
        NEW.cd_estabelecimento,
        NEW.dt_mesano_referencia,
        NEW.cd_local_estoque,
        NEW.cd_material,
        NEW.qt_movimento,
        NEW.qt_estoque,
        NEW.dt_movimento_estoque,
        NEW.cd_local_estoque_destino,
        NEW.cd_operacao_estoque,
        NEW.dt_processo,
        NEW.ie_origem_documento,
        NEW.cd_unidade_med_mov,
        NEW.qt_inventario,
        NEW.cd_conta_contabil,
        NEW.cd_acao,
        NEW.cd_centro_custo,
        NEW.cd_material_estoque,
        NEW.cd_unidade_medida_estoque,
        NEW.cd_fornecedor,
        NEW.cd_lote_fabricacao,
        NEW.dt_validade,
        NEW.ds_observacao,
        NEW.cd_cgc_emitente,
        NEW.cd_serie_nf,
        NEW.nr_documento,
        NEW.nr_sequencia_item_docto,
        NEW.nr_sequencia_documento,
        NEW.dt_contabil,
        NEW.ie_movto_consignado,
        NEW.cd_setor_atendimento,
        NEW.nr_atendimento,
        NEW.nr_prescricao,
        NEW.nr_ordem_compra,
        NEW.nr_item_oci,
        NEW.nr_lote_ap,
        NEW.cd_funcao,
        NEW.cd_perfil,
        NEW.nr_receita,
        NEW.nr_seq_lote_fornec,
        NEW.nr_seq_tab_orig,
        NEW.nr_lote_contabil,
        NEW.nm_usuario);
end if;

if (NEW.dt_processo is null) and (NEW.ds_consistencia is not null) then
    BEGIN
    insert into sup_movto_pendente(
        nr_sequencia,
        nr_movimento_estoque,
        ie_pendente,
        dt_atualizacao,
        dt_atualizacao_nrec,
        nm_usuario,
        nm_usuario_nrec)
    values (nextval('sup_movto_pendente_seq'),
        NEW.nr_movimento_estoque,
        'S',
        LOCALTIMESTAMP,
        LOCALTIMESTAMP,
        NEW.nm_usuario,
        NEW.nm_usuario);
    end;
end if;
end if;
  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_movimento_estoque_afinsert() FROM PUBLIC;

CREATE TRIGGER movimento_estoque_afinsert
	AFTER INSERT ON movimento_estoque FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_movimento_estoque_afinsert();

