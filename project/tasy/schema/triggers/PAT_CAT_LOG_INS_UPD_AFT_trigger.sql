-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pat_cat_log_ins_upd_aft ON patient_category_log CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pat_cat_log_ins_upd_aft() RETURNS trigger AS $BODY$
declare

	dt_entrada_w	atendimento_paciente.dt_entrada%type;
	qt_error_w		smallint:=0;
	qt_overlap_w	smallint:=0;
	ie_dt_alta_w    varchar(1) := 'N';
	dt_alta_w       atendimento_paciente.dt_alta%type;
	dt_parametro_w  timestamp;
	dt_min_category_start_w  timestamp;
	dt_max_category_end_w   timestamp;
	nr_sequencia_ww        bigint:=0;
    dt_temp_w  timestamp;
	pragma autonomous_transaction;
BEGIN

	if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
		qt_error_w:=0;
	else

		select obter_data_entrada(NEW.nr_atendimento)
		into STRICT dt_entrada_w
		;

		select obter_se_atendimento_alta(NEW.nr_atendimento)
		into STRICT ie_dt_alta_w
		;

		select	CASE WHEN obter_se_atendimento_alta(NEW.nr_atendimento)='S' THEN  dt_alta WHEN obter_se_atendimento_alta(NEW.nr_atendimento)='N' THEN  LOCALTIMESTAMP END
		into STRICT	dt_alta_w
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento;

		select	min(dt_start_category)
		into STRICT	dt_min_category_start_w
		from	patient_category_log
		where	nr_atendimento=NEW.nr_atendimento;

		select max(dt_end_category)
		into STRICT dt_max_category_end_w
		from  patient_category_log
		where nr_atendimento=NEW.nr_atendimento;

		if TG_OP = 'INSERT' then
            if (NEW.dt_end_category is null and ie_dt_alta_w = 'S')then
                select trunc(min(dt_start_category))
                into STRICT    dt_temp_w
                from	patient_category_log
                where	nr_atendimento=NEW.nr_atendimento
                and     dt_start_category> NEW.dt_start_category;

                if (dt_temp_w is null)then
                    
                dt_temp_w := trunc(dt_alta_w);

                end if;

            end if;
        end if;

        if TG_OP = 'UPDATE' then
            if (NEW.dt_end_category is null and ie_dt_alta_w = 'S')then
            
                if (OLD.dt_end_category is not null)then
                    select case
                       when exists ( select 1
                              from	patient_category_log
                              where nr_atendimento= NEW.nr_atendimento
                              and trunc(OLD.dt_end_category) = trunc(dt_start_category)
        
                            )
                       then 1
                       else 0
                       end
                       into STRICT	qt_overlap_w
;

                    if (qt_overlap_w > 0) then
                        CALL wheb_mensagem_pck.exibir_mensagem_abort(1214551); --Category start date has an overlap with another record. Please check.
                    end if;
                else
                    dt_temp_w:= trunc(dt_alta_w);
                end if;
                select min(dt_start_category)
                into STRICT    dt_temp_w
                from	patient_category_log
                where	nr_atendimento=NEW.nr_atendimento
                and     dt_start_category> NEW.dt_start_category;

                if (dt_temp_w is null)then
                    
					dt_temp_w := dt_alta_w;

                end if;

            end if;
        end if;		
		if (ie_dt_alta_w = 'S')then
			dt_parametro_w := trunc(dt_entrada_w);
			loop
				if ((trunc(dt_alta_w) > dt_parametro_w) and (dt_parametro_w >= coalesce(trunc(NEW.dt_start_category),trunc(OLD.dt_start_category)) and (dt_parametro_w < coalesce(trunc(NEW.dt_end_category),trunc(dt_temp_w))))) then
				  CALL calcular_diaria_atendimento(wheb_usuario_pck.get_cd_estabelecimento,NEW.nr_atendimento,trunc(dt_entrada_w),dt_parametro_w,coalesce(NEW.nm_usuario,wheb_usuario_pck.get_nm_usuario),'S','S','D',trunc(dt_alta_w),NEW.nr_seq_patient_category_new);
				  dt_parametro_w := dt_parametro_w + 1;
				 elsif (trunc(dt_alta_w) > dt_parametro_w) then
					dt_parametro_w := dt_parametro_w + 1;
				else
					exit;
				end if;    			
			end loop;
		end if;
	end if;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pat_cat_log_ins_upd_aft() FROM PUBLIC;

CREATE TRIGGER pat_cat_log_ins_upd_aft
	AFTER INSERT OR UPDATE ON patient_category_log FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pat_cat_log_ins_upd_aft();

