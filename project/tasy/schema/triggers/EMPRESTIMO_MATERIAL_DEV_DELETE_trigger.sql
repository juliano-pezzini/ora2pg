-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS emprestimo_material_dev_delete ON emprestimo_material_dev CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_emprestimo_material_dev_delete() RETURNS trigger AS $BODY$
declare

ie_erro_w			varchar(255);
ie_tipo_w			varchar(1);
ie_acao_w		varchar(1);
cd_estabelecimento_w	integer;
ie_estoque_lote_w		varchar(1);
dt_mesano_referencia_w	timestamp;
cd_local_estoque_w	integer;
qt_saldo_atual_w		double precision;
nm_usuario_w		varchar(15) := wheb_usuario_pck.get_nm_usuario;
cd_material_w		integer;
ie_consiste_inv_w		varchar(1);
ie_bloqueado_inventario_w	varchar(1);
cd_material_estoque_w	integer;

BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then

	dt_mesano_referencia_w		:= trunc(LOCALTIMESTAMP, 'mm');

	select	cd_estabelecimento,
		ie_tipo,
		cd_local_estoque
	into STRICT	cd_estabelecimento_w,
		ie_tipo_w,
		cd_local_estoque_w
	from	emprestimo
	where	nr_emprestimo		= OLD.nr_emprestimo;

	ie_consiste_inv_w := Obter_Param_Usuario(143, 232, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_consiste_inv_w);

	if (ie_consiste_inv_w = 'S') then
		BEGIN
		select	cd_material
		into STRICT	cd_material_w
		from	emprestimo_material
		where	nr_emprestimo = OLD.nr_emprestimo
		and	nr_sequencia = OLD.nr_sequencia;
		
		ie_bloqueado_inventario_w := substr(Obter_Se_Material_Bloqueio_Inv(cd_estabelecimento_w, cd_material_w, cd_local_estoque_w),1,1);
		
		if (ie_bloqueado_inventario_w = 'S') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(265973,'CD_MATERIAL=' || cd_material_w);
			--'O material ['|| cd_material_w || '] esta bloqueado para inventario!' || chr(13) || chr(10) ||  

			--'Este emprestimo nao pode ser alterado neste momento.');

		end if;
		end;
	end if;

	update	emprestimo
	set	ie_situacao = 'A'
	where	nr_emprestimo = OLD.nr_emprestimo;

	select	substr(obter_se_material_estoque_lote(cd_estabelecimento_w, OLD.cd_material),1,1)
	into STRICT	ie_estoque_lote_w
	;

	if (ie_estoque_lote_w = 'S') and (OLD.ds_lote_fornec is not null) and (OLD.nr_seq_lote is not null) then
		BEGIN
		select	cd_local_estoque
		into STRICT	cd_local_estoque_w
		from	emprestimo
		where	nr_emprestimo		= OLD.nr_emprestimo;

		ie_acao_w	:= '1';
		if (ie_tipo_w = 'S') then
			ie_acao_w	:= '2';
		end if;
		
		select	cd_material_estoque
		into STRICT	cd_material_estoque_w
		from	material
		where	cd_material = OLD.cd_material;

		/*Consistir se existe saldo na devolucao do emprestimo de saida. Lote pode ja ter sido consumido*/


		if (ie_acao_w = '2') then
			select	coalesce(sum(qt_estoque),0)
			into STRICT	qt_saldo_atual_w
			from	saldo_estoque_lote
			where	cd_estabelecimento		= cd_estabelecimento_w
			and	dt_mesano_referencia	= dt_mesano_referencia_w
			and	cd_local_estoque		= cd_local_estoque_w
			and	cd_material		= cd_material_estoque_w
			and	nr_seq_lote		= OLD.nr_seq_lote;
			if (OLD.qt_material > qt_saldo_atual_w) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(265974,'DS_LOTE_FORNEC=' || OLD.ds_lote_fornec || ';QT_SALDO_ATUAL=' || qt_saldo_atual_w);
				--'Esta baixa nao pode ser excluida, pois nao existe estoque suficiente.' || chr(13) || chr(10) ||

				--'Lote = ' || :old.ds_lote_fornec || '  Saldo = ' || qt_saldo_atual_w

			end if;
		end if;

		ie_erro_w := atualizar_saldo_lote(
				cd_estabelecimento_w, cd_local_estoque_w, OLD.cd_material, dt_mesano_referencia_w, OLD.nr_seq_lote, 0, OLD.qt_material, ie_acao_w, OLD.nm_usuario, ie_erro_w);
		end;
	end if;

	if (OLD.nr_seq_nota is not null) then
		BEGIN
			update emprestimo_material
			set qt_material =  qt_material + OLD.qt_material
			where nr_emprestimo = OLD.nr_emprestimo
			and cd_material = OLD.cd_material
			and nr_sequencia = OLD.nr_seq_item_nota;
		end;
	end if;

end if;

RETURN OLD;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_emprestimo_material_dev_delete() FROM PUBLIC;

CREATE TRIGGER emprestimo_material_dev_delete
	BEFORE DELETE ON emprestimo_material_dev FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_emprestimo_material_dev_delete();

