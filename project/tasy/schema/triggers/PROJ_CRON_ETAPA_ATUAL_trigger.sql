-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS proj_cron_etapa_atual ON proj_cron_etapa CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_proj_cron_etapa_atual() RETURNS trigger AS $BODY$
declare
nr_seq_ordem_serv_w 		bigint;
dt_fim_ativ_w			timestamp;
dt_ini_ativ_w			timestamp;				
ie_origem_des_w			smallint;
BEGIN
  BEGIN

ie_origem_des_w := Obter_valor_Dinamico_bv('select	count(1) from	proj_projeto pp, proj_cronograma pc where	pp.nr_sequencia = pc.nr_seq_proj and	ie_origem = ''D'' and	pc.nr_sequencia = :nr_seq_cronograma', 'nr_seq_cronograma=' || NEW.nr_seq_cronograma || ';', ie_origem_des_w);

NEW.dt_atualizacao := LOCALTIMESTAMP;	
	
if (NEW.ie_regra_ini_fim is null) then
	NEW.ie_regra_ini_fim := 'B';
	end if;

NEW.qt_hora_saldo	:= coalesce(NEW.qt_hora_prev,0) - coalesce(NEW.qt_hora_real,0);

if (NEW.pr_etapa = 100) then
	if (NEW.dt_fim_real is null) then
		BEGIN
		select	max(dt_fim_ativ)
		into STRICT	dt_fim_ativ_w
		from	proj_rat_ativ
		where	nr_seq_etapa_cron = NEW.nr_sequencia;

		if (dt_fim_ativ_w is null) then
			NEW.dt_fim_real	:= LOCALTIMESTAMP;
		else
			NEW.dt_fim_real	:= dt_fim_ativ_w;
		end if;
		end;
	elsif (NEW.dt_inicio_real is null) then
		BEGIN
		select	max(dt_inicio_ativ)
		into STRICT	dt_ini_ativ_w
		from	proj_rat_ativ
		where	nr_seq_etapa_cron = NEW.nr_sequencia;

		if (dt_ini_ativ_w is null) then
			NEW.dt_inicio_real	:= LOCALTIMESTAMP;
		else
			NEW.dt_inicio_real	:= dt_fim_ativ_w;
		end if;
		end;
	end if;
end if;

/*Atualizar inicio/fim previsto nas OS da etapa*/


if	(NEW.dt_fim_prev is not null  AND NEW.dt_fim_prev <> OLD.dt_fim_prev ) or
	(NEW.dt_inicio_prev is not null  AND NEW.dt_inicio_prev <> OLD.dt_inicio_prev )then
	BEGIN
		update	man_ordem_servico a
		set	a.dt_inicio_previsto 	= coalesce(NEW.dt_inicio_prev,a.dt_inicio_previsto),
			a.dt_fim_previsto	= coalesce(NEW.dt_fim_prev,a.dt_fim_previsto)
		where	nr_seq_proj_cron_etapa  = NEW.nr_sequencia;
	exception
	when others then
		nr_seq_ordem_serv_w := nr_seq_ordem_serv_w;
	end;

end if;
	if (ie_origem_des_w > 0) then	
		if (NEW.qt_dias_uteis is null) or (NEW.dt_inicio_prev <> OLD.dt_inicio_prev) or (NEW.dt_fim_prev <> OLD.dt_fim_prev) then		
			NEW.qt_dias_uteis	:= OBTER_DIAS_UTEIS_PERIODO(coalesce(NEW.dt_inicio_prev, LOCALTIMESTAMP), coalesce(NEW.dt_fim_prev, LOCALTIMESTAMP), 1);
		end if;
	elsif (NEW.dt_inicio_real is not null) and --Mantem comportamento atual para Gest√£o Projetos Philips
		(NEW.dt_fim_prev is not null) and (coalesce(NEW.pr_previsto,0)	<> 100) then	

		if (NEW.qt_dias_uteis is null) or (NEW.dt_inicio_real <> OLD.dt_inicio_real) or (NEW.dt_fim_prev <> OLD.dt_fim_prev)  then
			NEW.qt_dias_uteis	:= OBTER_DIAS_UTEIS_PERIODO(NEW.dt_inicio_real, NEW.dt_fim_prev, 1);
		end if;
	end if;
  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_proj_cron_etapa_atual() FROM PUBLIC;

CREATE TRIGGER proj_cron_etapa_atual
	BEFORE INSERT OR UPDATE ON proj_cron_etapa FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_proj_cron_etapa_atual();

