-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_consulta_atual ON agenda_consulta CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_consulta_atual() RETURNS trigger AS $BODY$
DECLARE

nr_sequencia_w			bigint;
nm_medico_w			varchar(100);
HR_QUEBRA_TURNO_W		varchar(05);
qt_min_QUEBRA_TURNO_W		varchar(05);
cd_tipo_agenda_w		bigint;
qt_log_w			bigint;
ie_gerar_solic_pront_w		varchar(1);
ie_gerar_solic_pront_gp_w	varchar(1);
ie_gerar_solic_exame_w		varchar(1);
ie_alterar_status_pac_w		varchar(1);
ds_erro_w			varchar(2000) := '';
nm_paciente_w			varchar(60);
cd_pessoa_atend_w		varchar(10);
ie_alt_classif_agenda_w		varchar(1);
nr_prontuario_w			bigint;
ie_permite_solic_sem_pront_w	varchar(1);
ie_Gravar_Data_w		varchar(1);
nr_seq_agenda_proc_w	agenda_consulta_proc.nr_seq_agenda%type;
nr_seq_proc_interno_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_atualiza_proc_interno_w	varchar(1);
nr_seq_Agendamento_w		bigint;
qt_registros_w			bigint;
hr_quebra_turno_not_w	varchar(02);
ds_log_w			varchar(2000);
qt_log_consulta_w	bigint;
ie_transferencia_w			varchar(1);
HR_INICIAL_w		agenda_turno.HR_INICIAL%type;
cd_classificacao_w	agenda_turno_classif.cd_classificacao%type;
qt_reg_w	smallint;
ie_solicitacao_w			varchar(1);
ie_situacao_lab_w			varchar(1);
ds_mensagem_w			varchar(255) := null;
nr_seq_status_pac_w		schedule_rule_pat_status.nr_seq_status_pac%type;
hr_quebra_turno_not_fim_w		agenda.hr_quebra_turno_not_fim%type;

nm_usuario_w			usuario.nm_usuario%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
			nr_seq_proc_interno
	from	agenda_consulta_proc
	where	nr_seq_agenda = NEW.nr_sequencia;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then	

	if (coalesce(OLD.nr_seq_exame, 0) <> coalesce(NEW.nr_seq_exame, 0)) and (NEW.nr_seq_exame is not null) then
		select	coalesce(max(ie_solicitacao),'N'),
			coalesce(max(ie_situacao),'A')
		into STRICT	ie_solicitacao_w,
			ie_situacao_lab_w
		from	exame_laboratorio
		where	nr_seq_exame = NEW.nr_seq_exame;
		if (ie_solicitacao_w <> 'S') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(182653, 'NR_SEQ_EXAME=' || NEW.nr_seq_exame);
		
		elsif (ie_situacao_lab_w <> 'A') then
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(172737, 'EXAME='||NEW.nr_seq_exame);
		end if;
	end if;

	if (wheb_usuario_pck.get_cd_funcao = 869) and (NEW.ie_status_agenda <> 'L') and (NEW.ie_status_agenda <> 'C') and (NEW.ie_status_agenda <> 'B') and
		 ((coalesce(OLD.cd_pessoa_fisica,'-1') <> coalesce(NEW.cd_pessoa_fisica,'-1')) or (OLD.dt_agenda <> NEW.dt_agenda)) then

			BEGIN
        ds_mensagem_w	:= obter_regra_antecencia_agenda(NEW.cd_pessoa_fisica,NEW.dt_agenda);
			exception
				when others then
				ds_mensagem_w := null;
			end;
			if (ds_mensagem_w is not null) then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(186402,'DS_MENSAGEM='||ds_mensagem_w);
			end if;	
	end if;	

	if (obter_funcao_ativa = 866) then
		ie_atualiza_proc_interno_w	:=	coalesce(obter_valor_param_usuario(866, 299, obter_perfil_ativo, NEW.nm_usuario, 0),'N');
	else
		ie_atualiza_proc_interno_w	:=	coalesce(obter_valor_param_usuario(821, 323, obter_perfil_ativo, NEW.nm_usuario, 0),'N');
	end if;

	select	coalesce(max(HR_QUEBRA_TURNO), '12'),
		coalesce(max(qt_min_quebra_turno), '00'),
		max(cd_tipo_agenda),
		coalesce(max(ie_gerar_solic_pront), 'S'),
		coalesce(max(ie_gerar_solic_exame), 'N'),
		coalesce(max(ie_gerar_solic_pront_gp), 'N'),
		max(hr_quebra_turno_not),
		max(hr_quebra_turno_not_fim)
	into STRICT	HR_QUEBRA_TURNO_W,
		qt_min_QUEBRA_TURNO_W,
		cd_tipo_agenda_w,
		ie_gerar_solic_pront_w,
		ie_gerar_solic_exame_w,
		ie_gerar_solic_pront_gp_w,
		hr_quebra_turno_not_w,
		hr_quebra_turno_not_fim_w
	from	agenda
	where 	cd_agenda	= NEW.cd_agenda;

	NEW.cd_turno		:= 0;--manha
			
	select	coalesce(max(obter_valor_param_usuario(866, 17, obter_perfil_ativo, NEW.nm_usuario, 0)),'S')
	into STRICT	ie_alt_classif_agenda_w
	;

	if (cd_tipo_agenda_w	= 5) and (ie_alt_classif_agenda_w	= 'T') and (OLD.ie_classif_agenda is not null) and (NEW.ie_classif_agenda is not null) and (OLD.ie_classif_agenda	<> NEW.ie_classif_agenda) then
		NEW.ie_classif_agenda_origem	:= OLD.ie_classif_agenda;
	end if;			
			
	if (NEW.NM_USUARIO_ORIGEM is null) and (NEW.ie_status_agenda not in ('B', 'L', 'LF')) and
		((NEW.cd_pessoa_fisica is not null) or (NEW.nm_paciente is not null)) then
		NEW.NM_USUARIO_ORIGEM	:= NEW.NM_USUARIO;
	end if;
	
	if (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda = 'L') and (NEW.ie_status_agenda = 'N') and (NEW.nr_seq_agendamento is null) and (NEW.cd_pessoa_fisica is not null) then
		select nextval('agendamento_cons_seq')
		into STRICT nr_seq_Agendamento_w 
		;		
		NEW.nr_seq_agendamento	:= nr_seq_Agendamento_w;		
	end if;
	
	if (cd_tipo_agenda_w	= 5) then
		ie_Gravar_Data_w	:=	coalesce(obter_valor_param_usuario(866, 176, obter_perfil_ativo, NEW.nm_usuario, 0),'N');

		if (ie_Gravar_Data_w	= 'S') and (OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) then
			
			if (NEW.ie_status_agenda = 'E') then--executada
				NEW.dt_atendido	:= LOCALTIMESTAMP;
			elsif (NEW.ie_status_agenda = 'O') then--em atendimento
				NEW.dt_consulta	:= LOCALTIMESTAMP;
			elsif (NEW.ie_status_agenda = 'EE') then--em exame
				NEW.dt_em_exame	:= LOCALTIMESTAMP;
			elsif (NEW.ie_status_agenda = 'AD') then--atendido
				NEW.dt_status_atendido	:= LOCALTIMESTAMP;
			end if;
		end if;
	end if;

	if ((to_char(NEW.dt_agenda,'hh24'))::numeric  > somente_numero(HR_QUEBRA_TURNO_W)) or
		(((to_char(NEW.dt_agenda,'hh24'))::numeric  = somente_numero(HR_QUEBRA_TURNO_W)) and ((to_char(NEW.dt_agenda,'mi'))::numeric  >= somente_numero(qt_min_QUEBRA_TURNO_W))) then
		NEW.cd_turno	:= 1;--tarde
	end if;	

	if (hr_quebra_turno_not_w is not null) then
		if ((hr_quebra_turno_not_fim_w is null) and ((to_char(NEW.dt_agenda,'hh24'))::numeric  >= somente_numero(hr_quebra_turno_not_w)) and ((to_char(NEW.dt_agenda,'hh24'))::numeric  < 24)) then
			NEW.cd_turno := 3;--noite
		elsif ((hr_quebra_turno_not_fim_w is not null) and
			(((somente_numero(hr_quebra_turno_not_fim_w) < somente_numero(hr_quebra_turno_not_w)) and
			((((to_char(NEW.dt_agenda,'hh24'))::numeric  >= somente_numero(hr_quebra_turno_not_w)) and ((to_char(NEW.dt_agenda,'hh24'))::numeric  < 24)) or
			(((to_char(NEW.dt_agenda,'hh24'))::numeric  < somente_numero(hr_quebra_turno_not_fim_w)) and ((to_char(NEW.dt_agenda,'hh24'))::numeric  >= 00)))) or
			((somente_numero(hr_quebra_turno_not_fim_w) > somente_numero(hr_quebra_turno_not_w)) and ((to_char(NEW.dt_agenda,'hh24'))::numeric  between somente_numero(hr_quebra_turno_not_w) and somente_numero(hr_quebra_turno_not_fim_w))))) then
			NEW.cd_turno := 3;--noite
		end if;
	end if;

	if (NEW.nr_seq_hora is null) then
		NEW.nr_seq_hora	:= 0;
	end if;

	if (NEW.dt_agendamento is null) and (NEW.ie_status_agenda <> 'L') then
		NEW.dt_agendamento	:= LOCALTIMESTAMP;
	end if;
	
	if (NEW.ie_status_agenda = 'L') and (OLD.ie_status_agenda <> NEW.ie_status_agenda) then
		NEW.DT_AGENDAMENTO 	:= null;		
	end if;

	if (NEW.cd_pessoa_fisica <> OLD.cd_pessoa_fisica) or (NEW.nm_paciente <> OLD.nm_paciente) or (NEW.cd_agenda <> OLD.cd_agenda) then
		select	nextval('agenda_consulta_log_seq')
		into STRICT	nr_sequencia_w
		;
		insert into agenda_consulta_log(
			nr_sequencia,
			nr_seq_agenda,
			dt_atualizacao,
			nm_usuario,
			cd_agenda,
			dt_agenda,
			nr_minuto_duracao,
			ie_status_agenda,
			ie_classif_agenda,
			cd_pessoa_fisica,
			nm_paciente)
		values (
			nr_sequencia_w,
			OLD.nr_sequencia,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			OLD.cd_agenda,
			OLD.dt_agenda,
			OLD.nr_minuto_duracao,
			OLD.ie_status_agenda,
			OLD.ie_classif_agenda,
			OLD.cd_pessoa_fisica,
			substr(OLD.nm_paciente,1,40));
	end if;

	if (NEW.ie_status_agenda <> OLD.ie_status_agenda) then
    if (coalesce(OLD.nm_usuario,'xpto') <> coalesce(NEW.nm_usuario,'xpto')) then
      nm_usuario_w := NEW.nm_usuario;
    else
      nm_usuario_w := coalesce(wheb_usuario_pck.get_nm_usuario, NEW.nm_usuario);
    end if;

		select	nextval('agenda_cons_log_status_seq')
		into STRICT	nr_sequencia_w
		;
		insert into agenda_cons_log_status(
			nr_sequencia,
			nr_seq_agenda,
			dt_atualizacao,
			nm_usuario,
			cd_agenda,
			dt_agenda,
			nr_minuto_duracao,
			ie_status_agenda,
			ie_classif_agenda,
			cd_pessoa_fisica,
			nm_paciente,
			ds_stack)
		values (
			nr_sequencia_w,
			NEW.nr_sequencia,
			LOCALTIMESTAMP,
			nm_usuario_w,
			NEW.cd_agenda,
			NEW.dt_agenda,
			NEW.nr_minuto_duracao,
			NEW.ie_status_agenda,
			NEW.ie_classif_agenda,
			NEW.cd_pessoa_fisica,
			substr(NEW.nm_paciente,1,40),
			substr(wheb_mensagem_pck.get_texto(791269) || ': ' ||obter_funcao_ativa||
			', '|| wheb_mensagem_pck.get_texto(791272) || ': '  ||obter_perfil_ativo|| 
			', CALLSTACK: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,4000));
	end if;


	/* Comentado o Bloco do IF abaixo por causa de erro de Mutante ao fechar a conta/Atendimento
	Atendimento_paciente_update (faz update na agenda_consulta),
	Agenda_Consulta_Atual  (faz update na agenda_paciente),
	Agenda_paciente_atual (faz select na Atendimento_paciente), ocasionando o erro de Mutante. --->   Fabricio e Dalcastagne em 25/06/08, OS 98176*/
	/*
	if	(:new.nr_seq_agepaci is not null) then
		begin

		update	agenda_paciente
		set	cd_convenio	= :new.cd_convenio,
			dt_atualizacao	= :new.dt_atualizacao,
			nm_usuario	= :new.nm_usuario
		where	nr_sequencia	= :new.nr_seq_agepaci;


		end;
	end if;
	*/
	if (cd_tipo_agenda_w in (3,4,5)) and (NEW.cd_pessoa_fisica is not null) and (NEW.ie_status_agenda <> 'C') then
		BEGIN
		if (ie_gerar_solic_pront_w = 'S') then
			BEGIN
			CALL Gerar_Solic_Pront_Agenda(NEW.cd_pessoa_fisica, NEW.nr_sequencia, NEW.cd_agenda, NEW.dt_agenda, NEW.nm_usuario);			
			exception
			when others then			
			insert into log_tasy_agenda(
					cd_log,
					dt_atualizacao,
					nm_usuario,
					ds_log)
				values (1,
					LOCALTIMESTAMP,
					NEW.nm_usuario,
					substr(	'CD_PESSOA_FISICA: '||NEW.cd_pessoa_fisica||
						', NR_SEQUENCIA: '||NEW.nr_sequencia||
						', CD_AGENDA: '||NEW.cd_agenda||
						', DT_AGENDA: '||to_char(NEW.dt_agenda, 'dd/mm/yyyy hh24:mi:ss')||
						', CALLSTACK: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,4000));							
			end;			
		end if;	
		
		nr_prontuario_w	:= coalesce(obter_prontuario_pf(wheb_usuario_pck.get_cd_estabelecimento, NEW.cd_pessoa_fisica),0);
		ie_permite_solic_sem_pront_w := Obter_Param_Usuario(821, 275, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_permite_solic_sem_pront_w);
		
		if (ie_gerar_solic_pront_gp_w = 'S') and ((nr_prontuario_w > 0) or (ie_permite_solic_sem_pront_w = 'N')) then
			CALL Gerar_Solic_Pront_Agenda_GP(NEW.cd_pessoa_fisica, NEW.nr_sequencia,NEW.cd_agenda, NEW.dt_agenda, NEW.nm_usuario, NEW.cd_setor_atendimento, null, NEW.nr_seq_sala);
		end if;
		end;
	end if;

	/* Ivan em 11/04/2008 OS85462 */

	if (cd_tipo_agenda_w = 5) and (ie_gerar_solic_exame_w = 'S') then
		CALL Gerar_Solic_Exame_Agenda(NEW.cd_pessoa_fisica,
				NEW.nr_sequencia,
				NEW.cd_agenda,
				NEW.dt_agenda,
				NEW.nm_usuario);	
	end if;

	if (NEW.ie_status_agenda = 'A') and (NEW.dt_aguardando is null) then /* Rafael em 01/08/06 OS35304 */
		BEGIN
		NEW.dt_aguardando := LOCALTIMESTAMP;
		NEW.dt_chegada := LOCALTIMESTAMP;
		end;

	elsif (NEW.ie_status_agenda = 'O') and (NEW.dt_consulta is null) then /* Rafael em 01/08/06 OS35304 */
		NEW.dt_consulta := LOCALTIMESTAMP;

	elsif (NEW.ie_status_agenda = 'E') and (NEW.dt_atendido is null) then /* Rafael em 01/08/06 OS35304 */
		NEW.dt_atendido := LOCALTIMESTAMP;
		NEW.nm_usuario_atendido := NEW.nm_usuario;

	elsif (NEW.ie_status_agenda = 'C') and (cd_tipo_agenda_w in (3,4,5)) then /* Rafael em 10/01/2007 OS47828 */
		BEGIN
		CALL cancelar_solic_pront_agenda(NEW.nr_sequencia, NEW.nm_usuario);		
		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_transferencia_w
		from	agenda_consulta_hist
		where	nr_seq_agenda = NEW.nr_sequencia
		and		ie_historico = 'T';
		if (ie_transferencia_w = 'N') then
			CALL cancelar_solic_pront_agenda_gp(NEW.nr_sequencia, NEW.nm_usuario);
		end if;	
		end;
	end if;


	if (coalesce(NEW.nr_atendimento,0) <> coalesce(OLD.nr_atendimento,0)) then
	
		update	MED_AVALIACAO_PACIENTE
		set	nr_atendimento  = NEW.nr_atendimento
		where	NR_SEQ_AGENDA_CONS = NEW.nr_sequencia;
	
	end if;
	
	
	/* Rafael em 14/04/2007 OS53960 */

	select	coalesce(max(obter_valor_param_usuario(898, 88, obter_perfil_ativo, NEW.nm_usuario, 0)),'N')
	into STRICT	ie_alterar_status_pac_w
	;

	if (ie_alterar_status_pac_w = 'S') and (NEW.ie_status_agenda = 'O') and (NEW.nr_atendimento is not null) then
		update	atendimento_paciente
		set	ie_status_atendimento = 'C'
		where	nr_atendimento = NEW.nr_atendimento;
	end if;
	/* Fim Rafael em 14/04/2007 OS53960 */

	/* Dalcastagne em 10/09/2007 OS 65144 */

	if	(OLD.ie_status_agenda <> 'E' AND NEW.ie_status_agenda = 'E') then
		ds_erro_w := consiste_exec_agenda(NEW.cd_agenda, NEW.nr_atendimento, NEW.nm_usuario, ds_erro_w);
		if (ds_erro_w is not null) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(193555,'DS_ERRO='||ds_erro_w);
		end if;
	end if;

	if (NEW.cd_pessoa_fisica is not null) and (NEW.ie_status_agenda <> 'C') then /* Rafael em 04/10/2007 Agenda de Consultas Nova */
		/* obter nome pf */
		
		select	 substr(obter_nome_pf(NEW.cd_pessoa_fisica),1,60)
		into STRICT	nm_paciente_w
		from	pessoa_fisica
		where	cd_pessoa_fisica = NEW.cd_pessoa_fisica;		
		/* atualizar nome pf */

		NEW.nm_paciente := nm_paciente_w;
		
		update 	AGENDA_CONS_LOG_STATUS
		set 	cd_pessoa_fisica = NEW.cd_pessoa_fisica
		where 	nr_seq_agenda = NEW.nr_sequencia
		and	cd_pessoa_fisica is null;
		
		/*Gravar log - agenda_consulta_hist*/
				
		select	count(*)
		into STRICT	qt_log_consulta_w
		from	agenda_consulta_hist
		where	nr_seq_agenda = NEW.nr_sequencia
		and     ie_historico = 'AGM';
		
		if (qt_log_consulta_w = 0) then			
			ds_log_w := substr(WHEB_MENSAGEM_PCK.get_texto(1071609, 'ds_funcao='||OBTER_DESC_FUNCAO(obter_funcao_ativa)||';obter_funcao_ativa='||obter_funcao_ativa||';call_stack='||dbms_utility.format_call_stack) ,1 ,2000);			
			CALL gerar_agenda_consulta_hist(NEW.cd_agenda, NEW.nr_sequencia, 'AGM', NEW.nm_usuario, ds_log_w, NEW.cd_pessoa_fisica, NEW.nm_paciente, NEW.dt_agenda);
		end if;		
	end if;
	
	if (obter_funcao_ativa in (821, 916)) and (NEW.nr_atendimento is not null ) and (NEW.ie_status_agenda <> 'C') and (coalesce(NEW.nr_atendimento,0) <> coalesce(OLD.nr_atendimento,0))		then

		if (NEW.cd_pessoa_fisica is null) then
			NEW.nr_atendimento	:= null;
		end if;

		select	max(cd_pessoa_fisica)
		into STRICT	cd_pessoa_atend_w
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento;

		if (cd_pessoa_atend_w <> NEW.cd_pessoa_fisica) then
			/*  Atencao, a pessoa fisica do atendimento e a pessoa fisica do agendamento sao incompativeis!
				Por favor, entre em contato com o setor de informatica! Atend.: #@NR_ATENDIMENTO#@
				'Pessoa fisica: #@CD_PESSOA_FISICA#@ */
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(193554,'NR_ATENDIMENTO=' || NEW.nr_atendimento || ';CD_PESSOA_FISICA=' || NEW.cd_pessoa_fisica);
		end if;
	end if;
	
	if (ie_atualiza_proc_interno_w = 'S') and
		(((cd_tipo_agenda_w = 3)       and (OLD.cd_convenio is not null) and (NEW.cd_convenio is not null) and (OLD.cd_convenio <> NEW.cd_convenio))or
  	                ((cd_tipo_agenda_w = 5) 	and
  	                (((OLD.cd_convenio is not null) and (NEW.cd_convenio is not null) and (OLD.cd_convenio <> NEW.cd_convenio)) or
  		((OLD.cd_categoria is not null) and (NEW.cd_categoria is not null) and (OLD.cd_categoria <> NEW.cd_categoria))))) then
		
		open C01;
		loop
		fetch C01 into	
			nr_seq_agenda_proc_w,
			nr_seq_proc_interno_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			BEGIN
			SELECT * FROM obter_proc_tab_interno_conv(nr_seq_proc_interno_w, wheb_usuario_pck.get_cd_estabelecimento, NEW.cd_convenio, NEW.cd_categoria, NEW.cd_plano, null, cd_procedimento_w, ie_origem_proced_w, null, NEW.dt_agenda, NEW.cd_tipo_acomodacao, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
			
			if (cd_procedimento_w is not null)then
				BEGIN
				update	agenda_consulta_proc
				set		cd_procedimento 	= cd_procedimento_w,
						ie_origem_proced 	= ie_origem_proced_w
				where	nr_sequencia 		= nr_seq_agenda_proc_w;
				exception
				when others then
					ds_erro_w	:= '';				
				end;			
			end if;
			
			end;
		end loop;
		close C01;
		
	end if;

	if  ((OLD.ie_status_agenda is not null) and (NEW.ie_status_agenda is not null) and (NEW.ie_status_agenda <> OLD.ie_status_agenda) and
        (((NEW.ie_status_agenda in ('C','F','I')) or (OLD.ie_status_agenda in ('C','F','I'))) or (NEW.ie_status_agenda = 'L' and OLD.nm_usuario_acesso is null))) or
        ((OLD.nr_minuto_duracao is not null) and (NEW.nr_minuto_duracao is not null) and (OLD.nr_minuto_duracao <> NEW.nr_minuto_duracao) and (NEW.ie_status_Agenda <> 'L')) then
        delete FROM agenda_controle_horario
		where 	cd_agenda = NEW.cd_agenda
		and 	dt_agenda = trunc(NEW.dt_agenda);
	end if;
	
	if (NEW.ie_status_agenda = 'C') then
	select	count(*)
	into STRICT	qt_registros_w
	from	agenda_integrada_item
	where	nr_seq_agenda_cons = NEW.nr_sequencia;

		if (qt_registros_w	> 0) then
			BEGIN
			delete	FROM ageint_marcacao_usuario
			where	nr_seq_agenda	= NEW.nr_sequencia;					
			end;		
		end if;			
	end if;
		
    /*Alterar status opm apos confirmar agendamento (COA)*/

    CALL WHEB_USUARIO_PCK.set_ie_commit('N');
    if ((NEW.nr_seq_opm is not null) and (coalesce(to_char(OLD.nr_seq_opm),'0') <> coalesce(to_char(NEW.nr_seq_opm),'0'))) then
	CALL gravar_status_op_opm(NEW.nr_seq_opm,'COA',NEW.cd_agenda,wheb_usuario_pck.get_nm_usuario,wheb_usuario_pck.get_cd_estabelecimento);
    end if;
	
	/*Alterar status opm apos executar agendamento (AEAG)*/

	if ((OLD.ie_status_agenda <> NEW.ie_status_agenda) and (NEW.nr_seq_opm is not null) and (NEW.ie_status_agenda = 'E')) then
		if (obter_qt_agend_opm(NEW.nr_seq_opm, NEW.dt_agenda, NEW.nr_sequencia, 'AEAG') = 0) then
	     CALL gravar_status_op_opm(NEW.nr_seq_opm,'AEAG',NEW.cd_agenda,wheb_usuario_pck.get_nm_usuario,wheb_usuario_pck.get_cd_estabelecimento);
		end if;
    end if;
    CALL WHEB_USUARIO_PCK.set_ie_commit('S');
	
	if (OLD.nm_usuario_acesso is not null and NEW.nm_usuario_acesso is not null)
	and (NEW.cd_pessoa_fisica is not null or NEW.nm_paciente is not null)
	and (OLD.ie_status_agenda = 'N') then
		NEW.nm_usuario_acesso := null;
	end if;
	
	if (cd_tipo_agenda_w = 5) and (OLD.ie_status_agenda <> NEW.ie_status_agenda) and (OLD.ie_status_agenda in ('C', 'B')) and (NEW.ie_status_agenda not in ('C', 'B')) and (NEW.nr_seq_turno is not null) then
		

		select 	max(a.HR_INICIAL),
			max(b.cd_classificacao)
		into STRICT 	HR_INICIAL_w,
			cd_classificacao_w
		from 	agenda_turno a,
			agenda_turno_classif b
		where 	a.nr_sequencia = NEW.nr_seq_turno
		and 	b.nr_seq_turno = a.nr_sequencia;
		
		if (HR_INICIAL_w is not null) then
			NEW.dt_agenda := to_date(to_char(NEW.dt_agenda, 'dd/mm/yyyy') || ' ' || to_char(HR_INICIAL_w, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');
			
			select 	coalesce(max(1), 0)
			into STRICT	qt_reg_w
			from 	agenda_turno_classif b
			where 	b.nr_seq_turno = NEW.nr_seq_turno
			and	b.cd_classificacao = NEW.ie_classif_agenda_origem;
			if (qt_reg_w = 0) then
				NEW.IE_CLASSIF_AGENDA_ORIGEM := cd_classificacao_w;
			end if;
		end if;
	end if;
	
	select 	max(nr_seq_status_pac)
	into STRICT	nr_seq_status_pac_w
	from	schedule_rule_pat_status
	where	si_schedule_status = NEW.ie_status_agenda
	and		si_type_schedule = 1;
	
	if (NEW.ie_status_agenda <> OLD.ie_status_agenda and nr_seq_status_pac_w is not null) then
		NEW.nr_seq_status_pac := nr_seq_status_pac_w;
	end if;
	
	if (NEW.nr_atendimento is not null) then
		CALL gerar_anexo_agenda_atend(NEW.nr_sequencia, NEW.nr_atendimento, cd_tipo_agenda_w, NEW.nm_usuario);
	end if;
	
	if (pkg_i18n.get_user_locale = 'ja_JP' and OLD.nr_seq_status_pac <> NEW.nr_seq_status_pac) then
		CALL gravar_tempo_decorrido_agenda(NEW.nr_sequencia, OLD.nr_seq_status_pac, NEW.nr_seq_status_pac, NEW.nm_usuario);
	end if;
end if;

  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_consulta_atual() FROM PUBLIC;

CREATE TRIGGER agenda_consulta_atual
	BEFORE UPDATE ON agenda_consulta FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_consulta_atual();

