-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pls_conta_mat_atual ON pls_conta_mat CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pls_conta_mat_atual() RETURNS trigger AS $BODY$
declare



C01 CURSOR(	ds_lista_p	text,
		ds_separador_p	text) FOR
	SELECT	ds_valor_vchr2
	from	table(pls_util_pck.converter_lista_valores(ds_lista_p, ds_separador_p));

C02 CURSOR(	ds_lista_p	text,
		ds_separador_p	text) FOR
	SELECT	ds_valor_vchr2,
		dt_valor_date,
		nr_valor_number
	from	table(pls_util_pck.converter_lista_valores(ds_lista_p, ds_separador_p));

cd_material_w			integer;
ds_log_call_w			varchar(1500);
ds_observacao_w			varchar(4000);
nr_seq_tuss_mat_item_w		bigint;
dt_atendimento_imp_ref_w	pls_conta.dt_atendimento_imp_referencia%type;
dt_atendimento_referencia_w	pls_conta.dt_atendimento_referencia%type;
nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
dt_protocolo_w			pls_protocolo_conta.dt_protocolo%type;
dt_mes_competencia_w		pls_protocolo_conta.dt_mes_competencia%type;
nr_contador_w			integer;
ds_campo_w			varchar(100);
dt_atendimento_w		timestamp;
dt_atendimento_imp_w		timestamp;
sql_err_w			varchar(4000);
cd_estabelecimento_w		pls_conta.cd_estabelecimento%type;
ie_desc_item_glosa_atend_w	pls_parametros.ie_desc_item_glosa_atend%type;
ds_log_w			plsprco_cta.ds_log%type;
BEGIN
  BEGIN
if (coalesce(wheb_usuario_pck.get_ie_lote_contabil,'N') = 'N') and (coalesce(wheb_usuario_pck.get_ie_atualizacao_contabil,'N') = 'N')  then
	-- essa parte da trigger não irá rodar se for necessário fazer algum trabalho de redundância para evitar trigger mutante
	if (pls_util_pck.get_ie_executar_redundancia_w	= 'N')  then

		BEGIN
		dt_atendimento_w	:= to_date(to_char(NEW.dt_atendimento,'dd/mm/yyyy') || ' ' || to_char(NEW.dt_inicio_atend,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
		NEW.dt_atendimento	:= dt_atendimento_w;
		exception
		when others then
			sql_err_w	:= substr(sqlerrm, 1, 1800);
		end;

		BEGIN
		dt_atendimento_imp_w		:= to_date(to_char(NEW.dt_atendimento_imp,'dd/mm/yyyy') || ' ' || to_char(NEW.dt_inicio_atend_imp,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
		NEW.dt_atendimento_imp	:= dt_atendimento_imp_w;
		exception
		when others then
			sql_err_w	:= substr(sqlerrm, 1, 1800);
		end;

		if (NEW.nr_seq_material is not null) and
			((NEW.nr_seq_material <> OLD.nr_seq_material) or (OLD.nr_seq_material is null))then

			select	max(cd_material)
			into STRICT	cd_material_w
			from	pls_material a
			where	a.nr_sequencia	= NEW.nr_seq_material;

			if (cd_material_w > 0) then
				NEW.cd_material	:= cd_material_w;
			end if;

			/* Atualização do código TUSS da tabela PLS_CONTA_MAT */

			select	max(a.nr_seq_tuss_mat_item)
			into STRICT	nr_seq_tuss_mat_item_w
			from	pls_material_tuss a
			where	a.nr_seq_material = NEW.nr_seq_material;

			if (coalesce(nr_seq_tuss_mat_item_w,0) > 0) then
				NEW.nr_seq_tuss_mat_item := nr_seq_tuss_mat_item_w;
			end if;
		end if;

		if (TG_OP = 'UPDATE') and
			((OLD.nr_id_analise is not null) and ((NEW.nr_id_analise is null) or (OLD.nr_id_analise != NEW.nr_id_analise)))then

			CALL wheb_mensagem_pck.exibir_mensagem_abort(247472);
		end if;

		/*O item com status faturamento manual, não pode ser alterado de modo a não interferir no pagamento*/

		if (OLD.ie_status	= 'M') and (OLD.ie_status	!= NEW.ie_status) then
			NEW.ie_status	:= 'M';
		end if;

		-- busca a data da conta
		select	max(a.dt_atendimento_imp_referencia),
			max(a.dt_atendimento_referencia),
			max(a.nr_seq_prestador_exec),
			max(b.dt_protocolo),
			max(b.dt_mes_competencia),
			max(a.cd_estabelecimento)
		into STRICT	dt_atendimento_imp_ref_w,
			dt_atendimento_referencia_w,
			nr_seq_prestador_exec_w,
			dt_protocolo_w,
			dt_mes_competencia_w,
			cd_estabelecimento_w
		from	pls_conta a,
			pls_protocolo_conta b
		where	a.nr_sequencia = NEW.nr_seq_conta
		and	b.nr_sequencia = a.nr_seq_protocolo;


		if (coalesce(NEW.ds_justificativa, 'A')  != coalesce(OLD.ds_justificativa, 'A')) then

			ds_log_call_w := substr(	' Função ativa : '|| obter_funcao_ativa || chr(13) ||chr(10)||
							' CallStack: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,1500);


			ds_log_w := 'Alterado a justificativa do material'|| pls_util_pck.enter_w ||' - de: '|| OLD.ds_justificativa || pls_util_pck.enter_w || pls_util_pck.enter_w ||' - para: '||NEW.ds_justificativa;

			insert into plsprco_cta( 	nr_sequencia, dt_atualizacao, nm_usuario,
								dt_atualizacao_nrec, nm_usuario_nrec, nm_tabela,
								ds_log, ds_log_call, ds_funcao_ativa,
								ie_aplicacao_tasy, nm_maquina, nr_seq_conta_mat, ie_opcao )
					values ( 	nextval('plsprco_cta_seq'), LOCALTIMESTAMP, substr(coalesce(wheb_usuario_pck.get_nm_usuario,wheb_mensagem_pck.get_texto(299116)),1,14),
								LOCALTIMESTAMP, substr(coalesce(wheb_usuario_pck.get_nm_usuario,wheb_mensagem_pck.get_texto(299116)),1,14), 'PLS_CONTA_MAT',
								ds_log_w, ds_log_call_w, obter_funcao_ativa,
								'N', wheb_usuario_pck.get_machine, OLD.nr_sequencia, '0');
		end if;

		if (coalesce(NEW.ds_especif_material, 'A')  != coalesce(OLD.ds_especif_material, 'A')) then

			ds_log_call_w := substr(	' Função ativa : '|| obter_funcao_ativa || chr(13) ||chr(10)||
							' CallStack: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,1500);


			ds_log_w := 'Alterado a especificação do procedimento'|| pls_util_pck.enter_w ||' - de: '|| OLD.ds_especif_material || pls_util_pck.enter_w || pls_util_pck.enter_w ||' - para: '||NEW.ds_especif_material;

			insert into plsprco_cta( 	nr_sequencia, dt_atualizacao, nm_usuario,
								dt_atualizacao_nrec, nm_usuario_nrec, nm_tabela,
								ds_log, ds_log_call, ds_funcao_ativa,
								ie_aplicacao_tasy, nm_maquina, nr_seq_conta_mat, ie_opcao )
					values ( 	nextval('plsprco_cta_seq'), LOCALTIMESTAMP, substr(coalesce(wheb_usuario_pck.get_nm_usuario,wheb_mensagem_pck.get_texto(299116)),1,14),
								LOCALTIMESTAMP, substr(coalesce(wheb_usuario_pck.get_nm_usuario,wheb_mensagem_pck.get_texto(299116)),1,14), 'PLS_CONTA_MAT',
								ds_log_w, ds_log_call_w, obter_funcao_ativa,
								'N', wheb_usuario_pck.get_machine, OLD.nr_sequencia, '0');
		end if;

	end if;

	-- se foi alimentado o campo com os valores da redundância, extrai os valores dele e alimenta as variáveis
	if (NEW.ds_redundancia is not null) then

		-- percorre para trazer campo=valor em cada registro
		for r_C01_w in C01(NEW.ds_redundancia, ';') loop

			-- percorre para trazer campo em um registro e valor em outro
			nr_contador_w := 0;
			ds_campo_w := null;
			for r_C02_w in C02(r_C01_w.ds_valor_vchr2, '=') loop

				-- significa que tenho o campo
				if (nr_contador_w = 0) then
					ds_campo_w := r_C02_w.ds_valor_vchr2;
				else
					-- atribui os valores para as variáveis
					case(ds_campo_w)
						when 'dt_atendimento_imp_referencia' then
							dt_atendimento_imp_ref_w := r_C02_w.dt_valor_date;

						when 'dt_atendimento_referencia' then
							dt_atendimento_referencia_w := r_C02_w.dt_valor_date;

						when 'nr_seq_prestador_exec' then
							nr_seq_prestador_exec_w := r_C02_w.nr_valor_number;

						when 'dt_protocolo' then
							dt_protocolo_w := r_C02_w.dt_valor_date;

						when 'dt_mes_competencia' then
							dt_mes_competencia_w := r_C02_w.dt_valor_date;

						else
							null;
					end case;
				end if;

				nr_contador_w := nr_contador_w + 1;
			end loop;
		end loop;
		NEW.ds_redundancia := null;
	end if;

	-- início redundâncias e formatações
	NEW.dt_atendimento_imp_referencia := coalesce(NEW.dt_atendimento_imp, dt_atendimento_imp_ref_w);
	NEW.dt_atendimento_referencia := pls_obter_data_conta_mat(	nr_seq_prestador_exec_w, NEW.dt_atendimento,
									dt_atendimento_referencia_w, dt_protocolo_w,
									dt_mes_competencia_w);
	-- fim redundâncias e formatações
	-- controle OS 737623
	/* Francisco - OS 812883 - Se mudar a data de um procedimento precisa recalcular a data do atendimento */

	if (NEW.dt_atendimento <> OLD.dt_atendimento) or (OLD.dt_atendimento is null and NEW.dt_atendimento is not null) then
		CALL wheb_usuario_pck.set_ie_executar_trigger('N');
		update	pls_conta
		set	dt_atendimento_referencia	 = NULL
		where	nr_sequencia	= NEW.nr_seq_conta;
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');
	end if;

	select	coalesce(max(ie_desc_item_glosa_atend),'N')
	into STRICT	ie_desc_item_glosa_atend_w
	from	pls_parametros
	where	cd_estabelecimento = cd_estabelecimento_w;

	-- OS 1100687 - Se o item for glosado 100% e se a data dele for a data da conta
	if 	((((coalesce(OLD.ie_glosa,'N') = 'N') and (NEW.ie_glosa = 'S')) or
		((coalesce(OLD.ie_glosa,'N') = 'S') and (coalesce(NEW.ie_glosa,'N') = 'N'))) and (ie_desc_item_glosa_atend_w = 'S') ) then

		CALL wheb_usuario_pck.set_ie_executar_trigger('N');

		update	pls_conta
		set	dt_atendimento_referencia  = NULL
		where	nr_sequencia = NEW.nr_seq_conta;

		CALL wheb_usuario_pck.set_ie_executar_trigger('S');

	end if;

	if (OLD.dt_inicio_atend is not null and NEW.dt_inicio_atend is null) and (NEW.ie_situacao	= 'D') then
		insert into	pls_conta_log(	nr_sequencia,dt_atualizacao, nm_usuario,
							dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
							nr_seq_conta_proc, nr_seq_conta_mat, nm_usuario_alteracao,
							dt_alteracao, ds_alteracao)
				values (	nextval('pls_conta_log_seq'), LOCALTIMESTAMP, NEW.nm_usuario,
							LOCALTIMESTAMP, NEW.nm_usuario, NEW.nr_seq_conta,
							null, NEW.nr_sequencia, NEW.nm_usuario,
							LOCALTIMESTAMP, 'Hora nula '||dbms_utility.format_call_stack);
	end if;

	if (dt_atendimento_referencia_w is null) then
		insert into plsprco_cta( 	nr_sequencia, dt_atualizacao, nm_usuario,
							dt_atualizacao_nrec, nm_usuario_nrec, nm_tabela,
							ds_log, ds_log_call, ds_funcao_ativa,
							ie_aplicacao_tasy, nm_maquina, nr_seq_conta_mat, ie_opcao )
				values ( 	nextval('plsprco_cta_seq'), LOCALTIMESTAMP, substr(coalesce(wheb_usuario_pck.get_nm_usuario,wheb_mensagem_pck.get_texto(299116)),1,14),
							LOCALTIMESTAMP, substr(coalesce(wheb_usuario_pck.get_nm_usuario,wheb_mensagem_pck.get_texto(299116)),1,14), 'PLS_CONTA_MAT',
							'Item sem data de atendimento referência', ds_log_call_w, obter_funcao_ativa,
							'N', wheb_usuario_pck.get_machine, OLD.nr_sequencia, '0');
	end if;
end if;

--é necessário que estes controles fiquem aqui fora pois independente do processo precisa ser mantida a consistência
if (OLD.ie_status = 'D') and
	((NEW.ie_status <> 'D') or (NEW.ie_status is null)) and (NEW.nr_seq_regra_canc_item_orig is not null) then
	NEW.ie_status := 'D';
end if;

  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pls_conta_mat_atual() FROM PUBLIC;

CREATE TRIGGER pls_conta_mat_atual
	BEFORE INSERT OR UPDATE ON pls_conta_mat FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pls_conta_mat_atual();

