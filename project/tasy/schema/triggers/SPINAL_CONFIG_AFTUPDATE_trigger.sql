-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS spinal_config_aftupdate ON spinal_config CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_spinal_config_aftupdate() RETURNS trigger AS $BODY$
declare

job_name_w			varchar(128);



pragma autonomous_transaction;

	procedure CREATE_JOB is	
BEGIN
  BEGIN
	dbms_scheduler.create_job(job_name		=> 'SPINAL_REPROCESSING_ESTAB'||NEW.cd_estabelecimento,
				  job_type   		=> 'PLSQL_BLOCK',
				  job_action 		=> 'Begin SPINAL_PCK.RETRY_MESSAGES('||NEW.QT_ATTEMPT||'); END;',
				  enabled    		=> TRUE,
				  auto_drop  		=> FALSE,
				  start_date 		=> LOCALTIMESTAMP + NEW.QT_INTERVALO_ATTEMPT / 86400,
				  repeat_interval	=> 'FREQ=SECONDLY; INTERVAL='||NEW.QT_INTERVALO_ATTEMPT||';');
	end;

BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then

	-- if rule deleted or interval defined as zero, then drop the job
	if 	TG_OP = 'DELETE' or (NEW.QT_INTERVALO_ATTEMPT = 0) then

		BEGIN
			dbms_scheduler.drop_job('SPINAL_REPROCESSING_ESTAB'||OLD.cd_estabelecimento);		
		exception when SQLSTATE '50015' then
		   null;
		end;
		
	-- if rule updated, then update the job attributes	
	elsif	TG_OP = 'UPDATE' then

		BEGIN
		select 	job_name
		into STRICT	job_name_w
		from 	user_scheduler_jobs
		where 	job_name = 'SPINAL_REPROCESSING_ESTAB'||NEW.cd_estabelecimento  LIMIT 1;
		exception
		when others then
			job_name_w := null;
		end;
		
		if (job_name_w is null) then
			CREATE_JOB;	
		else
			BEGIN
			if (coalesce(OLD.QT_ATTEMPT,0)) <> (coalesce(NEW.QT_ATTEMPT,0)) then
				dbms_scheduler.set_attribute(	name		=> 'SPINAL_REPROCESSING_ESTAB'||NEW.cd_estabelecimento,
								attribute 	=> 'job_action', 
								value     	=> 'Begin SPINAL_PCK.RETRY_MESSAGES('||NEW.QT_ATTEMPT||'); END;');
			end if;
			
			if (coalesce(OLD.QT_INTERVALO_ATTEMPT,0)) <> (coalesce(NEW.QT_INTERVALO_ATTEMPT,0)) then
				dbms_scheduler.set_attribute(	name		=> 'SPINAL_REPROCESSING_ESTAB'||NEW.cd_estabelecimento,
								attribute 	=> 'repeat_interval', 
								value     	=> 'FREQ=SECONDLY; INTERVAL='||NEW.QT_INTERVALO_ATTEMPT||';');
			end if;
			end;
		end if;
		
	elsif	TG_OP = 'INSERT' then
		CREATE_JOB;
	end if;
end if;

  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_spinal_config_aftupdate() FROM PUBLIC;

CREATE TRIGGER spinal_config_aftupdate
	AFTER INSERT OR UPDATE OR DELETE ON spinal_config FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_spinal_config_aftupdate();

