-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pls_regra_copart_benef_update ON pls_regra_copartic_benef CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pls_regra_copart_benef_update() RETURNS trigger AS $BODY$
declare

BEGIN
if (NEW.nr_seq_plano <> OLD.nr_seq_plano) then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.nr_seq_plano, NEW.nr_seq_plano, 'PLS_REGRA_COPARTIC_BENEF', 'NR_SEQ_PLANO', NEW.nm_usuario);
end if;
if (NEW.ie_titularidade <> OLD.ie_titularidade) then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.ie_titularidade, NEW.ie_titularidade, 'PLS_REGRA_COPARTIC_BENEF', 'IE_TITULARIDADE', NEW.nm_usuario);
end if;
if (NEW.ie_situacao_benef <> OLD.ie_situacao_benef) then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.ie_situacao_benef, NEW.ie_situacao_benef, 'PLS_REGRA_COPARTIC_BENEF', 'IE_SITUACAO_BENEF', NEW.nm_usuario);
end if;
if (NEW.nr_seq_plano <> OLD.ie_tipo_parentesco) then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.ie_tipo_parentesco, NEW.ie_tipo_parentesco, 'PLS_REGRA_COPARTIC_BENEF', 'IE_TIPO_PARENTESCO', NEW.nm_usuario);
end if;
if (NEW.qt_idade_min <> OLD.qt_idade_min) then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.qt_idade_min, NEW.qt_idade_min, 'PLS_REGRA_COPARTIC_BENEF', 'QT_IDADE_MIN', NEW.nm_usuario);
end if;
if (NEW.qt_idade_max <> OLD.qt_idade_max)then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.qt_idade_max, NEW.qt_idade_max, 'PLS_REGRA_COPARTIC_BENEF', 'QT_IDADE_MAX', NEW.nm_usuario);
end if;
if (NEW.dt_contrato_de <> OLD.dt_contrato_de) then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.dt_contrato_de, NEW.dt_contrato_de, 'PLS_REGRA_COPARTIC_BENEF', 'DT_CONTRATO_DE', NEW.nm_usuario);
end if;
if (NEW.dt_contrato_ate <> OLD.dt_contrato_ate)	then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.dt_contrato_ate, NEW.dt_contrato_ate, 'PLS_REGRA_COPARTIC_BENEF', 'DT_CONTRATO_ATE', NEW.nm_usuario);
end if;
if (NEW.nr_faixa_salarial_inicial <> OLD.nr_faixa_salarial_inicial) then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.nr_faixa_salarial_inicial, NEW.nr_faixa_salarial_inicial, 'PLS_REGRA_COPARTIC_BENEF', 'NR_FAIXA_SALARIAL_INICIAL', NEW.nm_usuario);
end if;
if (NEW.nr_faixa_salarial_final <> OLD.nr_faixa_salarial_final)	then
	 CALL pls_gravar_log_alt_regra_aprop(NEW.nr_seq_regra, OLD.nr_faixa_salarial_final, NEW.nr_faixa_salarial_final, 'PLS_REGRA_COPARTIC_BENEF', 'NR_FAIXA_SALARIAL_FINAL', NEW.nm_usuario);
end if;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pls_regra_copart_benef_update() FROM PUBLIC;

CREATE TRIGGER pls_regra_copart_benef_update
	BEFORE UPDATE ON pls_regra_copartic_benef FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pls_regra_copart_benef_update();

