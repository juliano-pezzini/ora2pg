-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS sus_laudo_paciente_update ON sus_laudo_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_sus_laudo_paciente_update() RETURNS trigger AS $BODY$
declare

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	sus_apac_unif
	where	cd_procedimento = NEW.cd_procedimento_solic
	and	dt_inicio_validade = NEW.dt_inicio_val_apac
	and	nr_atendimento = NEW.nr_atendimento;

ie_diagnostico_w			varchar(1)	:= 'N';
cd_doenca_cid_w			procedimento.cd_doenca_cid%type;
cd_cid_secundario_w		procedimento.cd_cid_secundario%type;
--nr_interno_conta_w			number(10);
ie_permite_w			varchar(1)	:= 'S';
cd_estabelecimento_w		smallint;
ie_proc_sus_antigo_w		parametro_faturamento.ie_proc_sus_antigo%type;
ie_gerar_diag_w			varchar(1);
ie_gerar_diag_atend_atual_w		varchar(1);
cd_cid_atualizar_w			diagnostico_doenca.cd_doenca%type;
cd_estab_ativo_w			integer;
nm_usuario_ativo_w		varchar(20);
ie_atualizar_periodo_apac_w		varchar(15)	:= 'N';
nr_seq_apac_w			C01%rowtype;
qt_meses_val_laudo_w		bigint;
dt_inicio_val_apac_w		timestamp;
dt_fim_val_apac_w			timestamp;
cd_procedimento_solic_w		sus_laudo_paciente.cd_procedimento_solic%type;
ie_origem_proced_w		sus_laudo_paciente.ie_origem_proced%type;
reg_integracao_p		gerar_int_padrao.reg_integracao;
ie_activated_w			varchar(1);
qt_laudo_medicamento_w		integer;
ds_retorno_integracao_w		varchar(4000);
BEGIN
  BEGIN

BEGIN
select	cd_estabelecimento
into STRICT	cd_estabelecimento_w
from	atendimento_paciente
where	nr_atendimento	= NEW.nr_atendimento;
exception
when others then
	cd_estabelecimento_w := 0;
end;

select	coalesce(max(ie_proc_sus_antigo),'N')
into STRICT	ie_proc_sus_antigo_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_proc_sus_antigo_w = 'S') and (OLD.ie_origem_proced not in (2,3)) and (NEW.ie_origem_proced in (2,3)) then
	BEGIN
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186393);
	/* Este procedimento nao pode ser lancado pois e de origem antiga do SUS. */

	end;
end if;

cd_estab_ativo_w   := wheb_usuario_pck.get_cd_estabelecimento;
nm_usuario_ativo_w := wheb_usuario_pck.get_nm_usuario;

ie_gerar_diag_w := obter_param_usuario(916, 653, obter_perfil_ativo, nm_usuario_ativo_w, cd_estab_ativo_w, ie_gerar_diag_w);
ie_gerar_diag_atend_atual_w := obter_param_usuario(916, 654, obter_perfil_ativo, nm_usuario_ativo_w, cd_estab_ativo_w, ie_gerar_diag_atend_atual_w);
ie_atualizar_periodo_apac_w := obter_param_usuario(1124, 123, obter_perfil_ativo, nm_usuario_ativo_w, cd_estab_ativo_w, ie_atualizar_periodo_apac_w);
ie_activated_w := obter_param_usuario(9041, 10, obter_perfil_ativo, nm_usuario_ativo_w, cd_estab_ativo_w, ie_activated_w);

If (Obter_funcao_ativa = 916)
And (ie_gerar_diag_atend_Atual_w = 'S') then
	select	max(b.cd_doenca)
	into STRICT	cd_cid_atualizar_w
	from	diagnostico_doenca b
	where	b.nr_atendimento = NEW.nr_atendimento
	and	b.dt_diagnostico = (	SELECT	min(a.dt_diagnostico)
					from	diagnostico_doenca a
					where	a.nr_atendimento = NEW.nr_Atendimento);		
						
	If (cd_cid_atualizar_w is not null) then
		NEW.cd_cid_principal := cd_cid_atualizar_w;
	End if;
End if;	

if (NEW.ie_tipo_laudo_sus = 0) and (NEW.cd_procedimento_solic is not null) then
	
	select	max(cd_doenca_cid),
		max(cd_cid_secundario)
	into STRICT	cd_doenca_cid_w,
		cd_cid_secundario_w
	from 	procedimento
	where 	cd_procedimento 	= NEW.cd_procedimento_solic
	and	ie_origem_proced	= NEW.ie_origem_proced;	
	
	If	(Obter_funcao_ativa <> 916 AND ie_diagnostico_w	= 'N')
	or	(Obter_funcao_ativa = 916 AND ie_gerar_diag_w = 'S') then
		BEGIN
		insert into diagnostico_medico(
			nr_atendimento, dt_diagnostico, ie_tipo_diagnostico,
			cd_medico, dt_atualizacao, nm_usuario, ds_diagnostico)
		values (
			NEW.nr_atendimento, NEW.dt_emissao, 2,
			NEW.cd_medico_requisitante, LOCALTIMESTAMP, NEW.nm_usuario, null);	
		if (cd_doenca_cid_w is not null) then
			insert into diagnostico_doenca(
				nr_atendimento, dt_diagnostico, cd_doenca, dt_atualizacao,
				nm_usuario, ds_diagnostico, ie_classificacao_doenca, IE_TIPO_DIAGNOSTICO)
			values (
				NEW.nr_atendimento, NEW.dt_emissao, cd_doenca_cid_w,
				LOCALTIMESTAMP, NEW.nm_usuario, null, 'P', 2);	
		end if;
		if (cd_cid_secundario_w is not null) then
			insert into diagnostico_doenca(
				nr_atendimento, dt_diagnostico, cd_doenca, dt_atualizacao,
				nm_usuario, ds_diagnostico, ie_classificacao_doenca, IE_TIPO_DIAGNOSTICO)
			values (
				NEW.nr_atendimento, NEW.dt_emissao, cd_cid_secundario_w, LOCALTIMESTAMP,  NEW.nm_usuario, null, 'S', 2);	
		end if;
		exception
			when others then
				ie_diagnostico_w := 'S';
		end;
	End if;
end if;

/*if	(nvl(:new.nr_aih,0) <> nvl(:old.nr_aih,1)) then
	select	nvl(max(nr_interno_conta),null)
	into	nr_interno_conta_w
	from	sus_aih
	where	nr_aih = nvl(:new.nr_aih,0);

	:new.nr_interno_conta := nr_interno_conta_w;
end if;*/
if	((NEW.nr_seq_aih is null) or (NEW.nr_seq_aih = 0)) and (NEW.nr_aih is not null) then
	BEGIN
	select	nr_sequencia
	into STRICT	NEW.nr_seq_aih
	from	sus_aih
	where	nr_aih	= NEW.nr_aih;
	exception	
	when others then
		NEW.nr_seq_aih := NEW.nr_seq_aih;
	end;
end if;	

if (NEW.nr_apac is not null) and (OLD.nr_apac is null) then
	BEGIN
	NEW.ie_status_processo	:= 2;
	
	reg_integracao_p.nr_atendimento		:=	NEW.nr_atendimento;

	reg_integracao_p => reg_integracao_p := gerar_int_padrao.gravar_integracao(ie_evento_p => '395', nr_seq_documento_p => NEW.nr_seq_interno, nm_usuario_p => NEW.nm_usuario, reg_integracao_p => reg_integracao_p);
	
	if (ie_activated_w = 'S') then
		BEGIN
		
		BEGIN
		select	count(1)
		into STRICT	qt_laudo_medicamento_w
		from	sus_laudo_medicamento
		where	nr_seq_laudo_sus = NEW.nr_seq_interno;
		exception
		when no_data_found then
			qt_laudo_medicamento_w := 0;
		end;
		
		if (coalesce(qt_laudo_medicamento_w,0) > 0) then
			BEGIN
			
			select	bifrost.send_integration(
			'authorizationManagement.send.request',
			'com.philips.tasy.integration.sus.authorizationmanagementsus.outbound.AuthorizationManagementSusCallback',
			'{"encounter" : '||NEW.nr_atendimento||', "internalSequenceReport": ' || NEW.nr_seq_interno || ', "event": 395, "userName": "' || NEW.nm_usuario || '" }',
			NEW.nm_usuario)
			into STRICT	ds_retorno_integracao_w
			;
			
			end;
		end if;
		
		end;
	end if;
	
	end;
end if;

select	Obter_Se_solic_laudo(NEW.nr_atendimento,NEW.ie_classificacao,NEW.cd_medico_requisitante)
into STRICT	ie_permite_w
;

if (ie_permite_w = 'N') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186392);
	/* O medico requisitante nao tem permissao para gerar laudo. 
	Verificar regra solicitantes de laudos nos Cadastros gerais/Aplicacao principal/Cadastros SUS. */
end if;

if (coalesce(ie_atualizar_periodo_apac_w,'N') = 'S') and (NEW.dt_emissao is not null) and (coalesce(OLD.dt_emissao,NEW.dt_emissao) <> NEW.dt_emissao) then
	BEGIN
	
	select	coalesce(max(b.qt_meses_val_laudo - 1),0)
	into STRICT	qt_meses_val_laudo_w
	from	parametro_medico b,
		atendimento_paciente a
	where	a.cd_estabelecimento	= b.cd_estabelecimento
	and	a.nr_atendimento	= NEW.nr_atendimento;

	dt_inicio_val_apac_w	:= NEW.dt_emissao;
	
	if (qt_meses_val_laudo_w	> 0) then		
		dt_fim_val_apac_w	:= last_day(add_months(NEW.dt_emissao,qt_meses_val_laudo_w));
	end if;
	

    for nr_seq_apac_w in C01 loop
			BEGIN
		
            update 	sus_apac_unif
            set 	dt_inicio_validade	= coalesce(dt_inicio_val_apac_w,dt_inicio_validade),
                dt_fim_validade	= coalesce(dt_fim_val_apac_w,dt_fim_validade)
            where 	nr_sequencia	= nr_seq_apac_w.nr_sequencia;
		
            end;
	end loop;

	
	NEW.dt_inicio_val_apac	:= dt_inicio_val_apac_w;
	NEW.dt_fim_val_apac	:= dt_fim_val_apac_w;
	
	end;
end if;

if (NEW.nr_seq_proc_interno is not null) then
	BEGIN
	if	((NEW.cd_procedimento_solic is null) or (NEW.nr_seq_proc_interno <> OLD.nr_seq_proc_interno)) then
		BEGIN
		SELECT * FROM obter_proc_tab_interno(NEW.nr_seq_proc_interno, null, NEW.nr_atendimento, null, cd_procedimento_solic_w, ie_origem_proced_w) INTO STRICT cd_procedimento_solic_w, ie_origem_proced_w;
		if (cd_procedimento_solic_w is not null) then
			NEW.cd_procedimento_solic := cd_procedimento_solic_w;
			NEW.ie_origem_proced := ie_origem_proced_w;
		end if;
		end;
	end if;
	end;
end if;

if (OLD.ie_classificacao = 15) and (NEW.ie_classificacao <> 15) and (sus_obter_tiporeg_proc(NEW.cd_procedimento_solic,NEW.ie_origem_proced,'C',12) = 2) then
	NEW.ie_classificacao := OLD.ie_classificacao;
end if;

  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_sus_laudo_paciente_update() FROM PUBLIC;

CREATE TRIGGER sus_laudo_paciente_update
	BEFORE UPDATE ON sus_laudo_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_sus_laudo_paciente_update();

