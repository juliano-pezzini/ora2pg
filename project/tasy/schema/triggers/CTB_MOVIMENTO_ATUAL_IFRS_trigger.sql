-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS ctb_movimento_atual_ifrs ON ctb_movimento CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_ctb_movimento_atual_ifrs() RETURNS trigger AS $BODY$
declare

cd_tipo_lote_contabil_w		lote_contabil.cd_tipo_lote_contabil%type;
nr_seq_conta_debito_w		conta_contabil_ifrs.nr_seq_conta_ifrs%type;
nr_seq_conta_credito_w		conta_contabil_ifrs.nr_seq_conta_ifrs%type;
qt_reg_w			integer;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
	
	BEGIN
	select	cd_tipo_lote_contabil
	into STRICT	cd_tipo_lote_contabil_w
	from	lote_contabil
	where	nr_lote_contabil = NEW.nr_lote_contabil;
	exception
	when no_data_found then
		cd_tipo_lote_contabil_w := null;
	end;
	
	if (cd_tipo_lote_contabil_w = 60) then
		
		select	max(nr_seq_conta_ifrs)
		into STRICT	nr_seq_conta_debito_w
		from	conta_contabil_ifrs
		where	cd_conta_contabil = NEW.cd_conta_debito;
		
		select	max(nr_seq_conta_ifrs)
		into STRICT	nr_seq_conta_credito_w
		from	conta_contabil_ifrs
		where	cd_conta_contabil = NEW.cd_conta_credito;
		
		if (nr_seq_conta_debito_w is not null or nr_seq_conta_credito_w is not null) then
			
			if (TG_OP = 'INSERT') then
				insert into ctb_movto_ifrs(
					nr_sequencia,
					nr_lote_contabil,
					cd_estabelecimento,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_ctb_movto,
					nr_seq_mes_ref,
					dt_movimento,
					nr_seq_conta_debito,
					nr_seq_conta_credito,
					cd_historico,
					ds_compl_historico,
					vl_movimento,
					nr_seq_agrupamento,
					ds_justificativa,
					cd_classif_debito,
					cd_classif_credito)
				values (	nextval('ctb_movto_ifrs_seq'),
					NEW.nr_lote_contabil,
					NEW.cd_estabelecimento,
					NEW.dt_atualizacao,
					NEW.nm_usuario,
					NEW.dt_atualizacao,
					NEW.nm_usuario,
					NEW.nr_sequencia,
					NEW.nr_seq_mes_ref,
					NEW.dt_movimento,
					nr_seq_conta_debito_w,
					nr_seq_conta_credito_w,
					NEW.cd_historico,
					NEW.ds_compl_historico,
					NEW.vl_movimento,
					NEW.nr_seq_agrupamento,
					NEW.ds_justificativa,
					NEW.cd_classif_debito,
					NEW.cd_classif_credito);
			else
				BEGIN
				select	count(nr_sequencia)
				into STRICT	qt_reg_w
				from	ctb_movto_ifrs
				where	nr_seq_ctb_movto = NEW.nr_sequencia;
				exception
				when no_data_found then
					qt_reg_w := 0;
				end;
				
				if (qt_reg_w = 1) then
					update	ctb_movto_ifrs
					set	dt_atualizacao		= NEW.dt_atualizacao,
						nm_usuario 		= NEW.nm_usuario,
						dt_movimento		= NEW.dt_movimento,
						cd_estabelecimento	= NEW.cd_estabelecimento,
						nr_seq_conta_debito	= nr_seq_conta_debito_w,
						nr_seq_conta_credito	= nr_seq_conta_credito_w,
						cd_historico		= NEW.cd_historico,
						ds_compl_historico	= NEW.ds_compl_historico,
						vl_movimento		= NEW.vl_movimento,
						nr_seq_agrupamento	= NEW.nr_seq_agrupamento,
						ds_justificativa	= NEW.ds_justificativa,
						cd_classif_debito	= NEW.cd_classif_debito,
						cd_classif_credito	= NEW.cd_classif_credito
					where	nr_seq_ctb_movto	= NEW.nr_sequencia;
				end if;
			end if;
		end if;
	end if;
end if;

  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_ctb_movimento_atual_ifrs() FROM PUBLIC;

CREATE TRIGGER ctb_movimento_atual_ifrs
	AFTER INSERT OR UPDATE ON ctb_movimento FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_ctb_movimento_atual_ifrs();

