-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS execute_dispensary_high ON atend_paciente_unidade CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_execute_dispensary_high() RETURNS trigger AS $BODY$
DECLARE
    SUBTYPE one_char                        IS varchar(1);
    SUBTYPE two_char                        IS varchar(2);
    SUBTYPE three_char                      IS varchar(3);
    SUBTYPE five_char                       IS varchar(5);
    SUBTYPE eight_char                      IS varchar(8);
    SUBTYPE nine_char                       IS varchar(9);
    SUBTYPE ten_char                        IS varchar(10);
    SUBTYPE eleven_char                     IS varchar(11);
    SUBTYPE thirteen_char                   IS varchar(13);
    SUBTYPE fourteen_char                   IS varchar(14);
    SUBTYPE sixteen_char                    IS varchar(16);
    SUBTYPE seventeen_char                  IS varchar(17);
    SUBTYPE eighteen_char                   IS varchar(18);
    SUBTYPE nineteen_char                   IS varchar(19);
    SUBTYPE twenty_one_char                 IS varchar(21);
    SUBTYPE twenty_two_char                 IS varchar(22);
    SUBTYPE fourty_char                     IS varchar(40);
    SUBTYPE two_hundred_fifty_five_char     IS varchar(255);
    SUBTYPE four_thousand_char              IS varchar(4000);

  birthDate_w two_hundred_fifty_five_char;
  customerCode_w pessoa_fisica.cd_pessoa_fisica%TYPE;
  email_w two_hundred_fifty_five_char;
  encouterType_w two_hundred_fifty_five_char;
  entryDate_w two_hundred_fifty_five_char;
  establishmentCode_w integer;
  gender_w two_hundred_fifty_five_char;
  healthInsurance_w two_hundred_fifty_five_char;
  ie_forma_integracao_w integer;
  json_w four_thousand_char;
  motherName_w two_hundred_fifty_five_char;
  name_w two_hundred_fifty_five_char;
  setor_w DIS_REGRA_SETOR.nr_sequencia%TYPE;
  nr_integration_code_w integer;


  char_C_c CONSTANT one_char := 'C';
  char_S_c CONSTANT one_char := 'S';
  char_T_c CONSTANT one_char := 'T';
  date_type_c CONSTANT ten_char := 'YYYY-MM-DD';
  error_code_generic_c CONSTANT integer := -21983;
  nr_four_hundred_fifty_four_c CONSTANT integer := 454;
  nr_thousand_eighty_c CONSTANT integer := 1080;
  error_message_generic_c CONSTANT fourty_char := 'Error executing execute_high';
  forma_integracao_B_c CONSTANT dis_parametros_int.ie_forma_integracao%TYPE := 'B';
  forma_integracao_M_c CONSTANT dis_parametros_int.ie_forma_integracao%TYPE := 'M';
  hour_type_c CONSTANT ten_char := 'HH24:mi:ss';
  json_bednumber_string_c CONSTANT thirteen_char := '"bedNumber": ';
  json_birthDate_string_c CONSTANT thirteen_char := '"birthDate": ';
  json_closed_brace_c CONSTANT one_char := '}';
  json_closed_bracket_c CONSTANT one_char := ']';
  json_comma_c CONSTANT one_char := ',';
  json_customer_string_c CONSTANT eighteen_char := '"customercode": ';
  json_dischargedate_string_c CONSTANT seventeen_char := '"dischargeDate": ';
  json_email_string_c CONSTANT nine_char := '"email": ';
  json_encoutertype_str_c CONSTANT sixteen_char := '"encouterType": ';
  json_entrydate_string_c CONSTANT thirteen_char := '"entryDate": ';
  json_establishmentcode_str_c CONSTANT twenty_one_char := '"establishmentcode": ';
  json_gender_string_c CONSTANT eleven_char := '"gender": ';
  json_healthinsurance_string_c CONSTANT nineteen_char := '"healthInsurance": ';
  json_high_string_c CONSTANT eight_char := '"high": ';
  json_mothername_str_c CONSTANT sixteen_char := '"motherName": ';
  json_name_string_c CONSTANT eight_char := '"name": ';
  json_open_brace_c CONSTANT one_char := '{';
  json_open_bracket_c CONSTANT one_char := '[';
  json_quotation_mark_c CONSTANT one_char := '"';
  json_registNumber_string_c CONSTANT twenty_two_char := '"registrationNumber": ';
  json_sectorcode_string_c CONSTANT fourteen_char := '"sectorCode": ';
  json_surname_string_c CONSTANT eleven_char := '"surname": ';
  char_eleven_c CONSTANT two_char := '11';
  nr_thirty_c CONSTANT integer := 30;
  nr_zero_c CONSTANT integer := 0;
BEGIN
  BEGIN
  IF (wheb_usuario_pck.get_ie_executar_trigger = char_S_c)  THEN

    SELECT
      COUNT(DISTINCT dpi.nr_sequencia) 
    INTO STRICT 
      ie_forma_integracao_w 
    FROM dis_parametros_int dpi 
    WHERE ie_forma_integracao IN (forma_integracao_M_c, forma_integracao_B_c);

    IF (ie_forma_integracao_w IS NOT NULL AND ie_forma_integracao_w > 0)
    THEN 

        SELECT 
          COUNT(drs.nr_sequencia) 
        INTO STRICT 
          setor_w
        FROM DIS_REGRA_SETOR drs
        JOIN DIS_REGRA_LOCAL_SETOR drls ON drs.nr_sequencia = drls.nr_seq_dis_regra_setor
        JOIN local_estoque les ON drls.cd_local_estoque = les.cd_local_estoque
        WHERE drs.cd_setor_atendimento = NEW.cd_setor_atendimento
          AND les.ie_tipo_local = char_eleven_c;

        IF (setor_w IS NOT NULL)
        THEN

            BEGIN
                <<get_ie_patients>>

                    BEGIN
                    <<get_dados_patients>>
                           SELECT
                              to_char(pfi.dt_nascimento,date_type_c),
                              pfi.cd_pessoa_fisica,
                              SUBSTR(OBTER_NOME_PF(pfi.cd_pessoa_fisica),nr_zero_c,nr_thirty_c),
                              obter_email_pf(pfi.cd_pessoa_fisica),
                              obter_nome_convenio(obter_convenio_atendimento(NEW.nr_atendimento)),
                              to_char(NEW.dt_entrada_unidade, date_type_c) || char_T_c || to_char(NEW.dt_entrada_unidade, hour_type_c),
                              pfi.ie_sexo,
                              obter_nome_mae(pfi.cd_pessoa_fisica),
                              obter_estab_atendimento(NEW.nr_atendimento),
                              obter_tipo_atendimento(NEW.nr_atendimento)
                            INTO STRICT
                                birthDate_w,
                                customerCode_w,
                                name_w,
                                email_w,
                                healthInsurance_w,
                                entryDate_w,
                                gender_w,
                                motherName_w,
                                establishmentCode_w,
                                encouterType_w
                            FROM pessoa_fisica pfi
                            WHERE pfi.cd_pessoa_fisica = obter_pessoa_atendimento(NEW.nr_atendimento, char_C_c);
                        EXCEPTION
                                WHEN no_data_found THEN NULL;
                                WHEN too_many_rows THEN RAISE;
                        END;

                    json_w := json_open_bracket_c ||
                    json_open_brace_c ||
                    json_customer_string_c || json_quotation_mark_c ||  customerCode_w || json_quotation_mark_c || json_comma_c || 
                    json_birthDate_string_c || json_quotation_mark_c || birthDate_w || json_quotation_mark_c ||  json_comma_c || 
                    json_name_string_c || json_quotation_mark_c || name_w || json_quotation_mark_c ||  json_comma_c ||
                    json_registNumber_string_c || json_quotation_mark_c || NEW.nr_atendimento || json_quotation_mark_c ||  json_comma_c ||
                    json_surname_string_c || json_quotation_mark_c || json_quotation_mark_c ||  json_comma_c ||
                    json_email_string_c || json_quotation_mark_c || email_w || json_quotation_mark_c ||  json_comma_c ||
                    json_healthinsurance_string_c || json_quotation_mark_c || healthInsurance_w || json_quotation_mark_c ||  json_comma_c ||
                    json_entrydate_string_c || json_quotation_mark_c || entryDate_w || json_quotation_mark_c ||  json_comma_c ||
                    json_bednumber_string_c || json_quotation_mark_c || NEW.cd_unidade_basica || json_quotation_mark_c || json_comma_c ||
                    json_gender_string_c || json_quotation_mark_c || gender_w || json_quotation_mark_c || json_comma_c ||
                    json_mothername_str_c || json_quotation_mark_c || motherName_w || json_quotation_mark_c || json_comma_c ||
                    json_establishmentcode_str_c || json_quotation_mark_c || establishmentCode_w || json_quotation_mark_c || json_comma_c ||
                    json_encoutertype_str_c || json_quotation_mark_c || encouterType_w || json_quotation_mark_c || json_comma_c ||
                    json_sectorcode_string_c ||  json_quotation_mark_c || NEW.cd_setor_atendimento || json_quotation_mark_c || json_comma_c;

                    IF (NEW.DT_SAIDA_UNIDADE IS NOT NULL) THEN

                    json_w := json_w ||
                              json_high_string_c || json_quotation_mark_c || char_S_c || json_quotation_mark_c || json_comma_c ||
                              json_dischargedate_string_c || json_quotation_mark_c || NEW.DT_SAIDA_UNIDADE || json_quotation_mark_c;

                    ELSE
                    json_w := json_w ||               
                              json_high_string_c || json_quotation_mark_c || json_quotation_mark_c || json_comma_c ||
                              json_dischargedate_string_c || json_quotation_mark_c || json_quotation_mark_c;

                    END IF;

                json_w := json_w || json_closed_brace_c || json_closed_bracket_c;

            EXCEPTION
            WHEN no_data_found THEN
                RAISE EXCEPTION '%', error_message_generic_c USING ERRCODE = error_code_generic_c;
            END
;

                IF (NEW.DT_SAIDA_UNIDADE IS NULL) THEN
                  nr_integration_code_w := nr_four_hundred_fifty_four_c;
                ELSE
                  nr_integration_code_w := nr_thousand_eighty_c;
                END IF;

                CALL execute_bifrost_integration(nr_integration_code_w, json_w, NEW.nm_usuario);
        END IF;
    END IF;
  END IF;
  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_execute_dispensary_high() FROM PUBLIC;

CREATE TRIGGER execute_dispensary_high
	AFTER UPDATE ON atend_paciente_unidade FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_execute_dispensary_high();

