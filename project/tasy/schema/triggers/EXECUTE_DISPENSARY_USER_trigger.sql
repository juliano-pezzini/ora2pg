-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS execute_dispensary_user ON dis_regra_local_usuario CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_execute_dispensary_user() RETURNS trigger AS $BODY$
DECLARE
    SUBTYPE one_char                        IS varchar(1);
    SUBTYPE two_char                        IS varchar(2);
    SUBTYPE five_char                       IS varchar(5);
    SUBTYPE eight_char                      IS varchar(8);
    SUBTYPE nine_char                       IS varchar(9);
    SUBTYPE eleven_char                     IS varchar(11);
    SUBTYPE twelve_char                     IS varchar(12);
    SUBTYPE thirteen_char                   IS varchar(13);
    SUBTYPE seventeen_char                  IS varchar(17);
    SUBTYPE eighteen_char                   IS varchar(18);
    SUBTYPE twenty_char                     IS varchar(20);
    SUBTYPE twenty_one_char                 IS varchar(21);
    SUBTYPE fourty_char                     IS varchar(40);
    SUBTYPE two_hundred_fifty_five_char     IS varchar(255);
    SUBTYPE four_thousand_char              IS varchar(4000);

    inventorycode_w dis_regra_local_usuario.cd_local_estoque%TYPE := NEW.cd_local_estoque;
    customercode_w usuario.cd_pessoa_fisica%TYPE;
    login_w usuario.nm_usuario%TYPE;
    password_w usuario.ds_senha%TYPE;
    name_w pessoa_fisica.nm_pessoa_fisica%TYPE;
    email_w usuario.ds_email%TYPE;
    rolecustomername_w two_hundred_fifty_five_char;
    barcode_w two_hundred_fifty_five_char;
    establishmentcode_w usuario.cd_estabelecimento%TYPE;
    situation_w usuario.ie_situacao%TYPE;
    ie_forma_integracao_w dis_parametros_int.ie_forma_integracao%TYPE;
    json_w four_thousand_char;

    error_code_generic_c CONSTANT integer := -21974;
    error_message_generic_c CONSTANT fourty_char := 'Error executing execute_dispensary_user.';
    forma_integracao_B_c CONSTANT dis_parametros_int.ie_forma_integracao%TYPE := 'B';
    forma_integracao_M_c CONSTANT dis_parametros_int.ie_forma_integracao%TYPE := 'M';
    char_S_c CONSTANT one_char := 'S';
    json_comma_c CONSTANT one_char := ',';
    json_quotation_mark_c CONSTANT one_char := '"';
    json_open_bracket_c CONSTANT one_char := '[';
    json_closed_bracket_c CONSTANT one_char := ']';
    json_open_brace_c CONSTANT one_char := '{';
    json_closed_brace_c CONSTANT one_char := '}';
    json_customer_string_c CONSTANT eighteen_char := '"customercode": ';
    json_login_string_c CONSTANT nine_char := '"login": ';
    json_password_string_c CONSTANT twelve_char := '"password": ';
    json_name_string_c CONSTANT eight_char := '"name": ';
    json_email_string_c CONSTANT nine_char := '"email": ';
    json_rolecustomername_string_c CONSTANT twenty_char := '"rolecustomername": ';
    json_surname_string_c CONSTANT eleven_char := '"surname": ';
    json_barcode_string_c CONSTANT eleven_char := '"barcode": ';
    json_establishmentcode_str_c CONSTANT twenty_one_char := '"establishmentcode": ';
    json_situation_string_c CONSTANT thirteen_char := '"situation": ';
    json_operation_string_c CONSTANT thirteen_char := '"operation": ';
    json_inventorycode_string_c CONSTANT seventeen_char := '"inventorycode": ';
    nr_evolution_type_c CONSTANT usuario.ie_tipo_evolucao%TYPE := 72;
    nr_integration_code_c CONSTANT integer := 1074;
    operation_c CONSTANT one_char := 'I';
BEGIN
  BEGIN
    IF (wheb_usuario_pck.get_ie_executar_trigger	= char_S_c)  THEN
        <<get_ie_forma_integracao>>
        BEGIN

            SELECT ie_forma_integracao
            INTO STRICT ie_forma_integracao_w
            FROM dis_parametros_int 
            WHERE nr_sequencia = NEW.nr_seq_regra;
        EXCEPTION
            WHEN no_data_found THEN NULL;
            WHEN too_many_rows THEN RAISE;
        END;

        IF (ie_forma_integracao_w IN (forma_integracao_M_c, forma_integracao_B_c))
        THEN
            BEGIN
                <<get_json_data>>
                BEGIN

                    SELECT 
                        u.cd_pessoa_fisica,
                        u.nm_usuario,
                        u.ds_senha,
                        obter_nome_usuario(u.nm_usuario),
                        u.ds_email,
                        obter_valor_dominio(nr_evolution_type_c,u.ie_tipo_evolucao),
                        u.cd_barras,
                        u.cd_estabelecimento,
                        u.ie_situacao
                    INTO STRICT customercode_w,
                        login_w,
                        password_w,
                        name_w,
                        email_w,
                        rolecustomername_w,
                        barcode_w,
                        establishmentcode_w,
                        situation_w
                    FROM 
                        usuario u
                    WHERE u.nm_usuario = NEW.nm_usuario_regra;
                EXCEPTION
                    WHEN no_data_found THEN NULL;
                    WHEN too_many_rows THEN RAISE;
                END;

                json_w := json_open_bracket_c || json_open_brace_c || 
                            json_customer_string_c || json_quotation_mark_c || customercode_w || json_quotation_mark_c || json_comma_c || 
                            json_login_string_c || json_quotation_mark_c || login_w || json_quotation_mark_c || json_comma_c ||
                            json_password_string_c || json_quotation_mark_c || NULL || json_quotation_mark_c || json_comma_c ||
                            json_name_string_c || json_quotation_mark_c || name_w || json_quotation_mark_c || json_comma_c || 
                            json_email_string_c || json_quotation_mark_c || email_w || json_quotation_mark_c || json_comma_c ||
                            json_rolecustomername_string_c || json_quotation_mark_c || rolecustomername_w || json_quotation_mark_c || json_comma_c ||
                            json_surname_string_c || json_quotation_mark_c || NULL || json_quotation_mark_c || json_comma_c ||
                            json_barcode_string_c || json_quotation_mark_c || barcode_w || json_quotation_mark_c || json_comma_c ||
                            json_establishmentcode_str_c || json_quotation_mark_c || establishmentcode_w || json_quotation_mark_c || json_comma_c || 
                            json_situation_string_c || json_quotation_mark_c || situation_w || json_quotation_mark_c || json_comma_c || 
                            json_operation_string_c || json_quotation_mark_c || operation_c || json_quotation_mark_c || json_comma_c || 
                            json_inventorycode_string_c || json_quotation_mark_c || inventorycode_w || json_quotation_mark_c || 
                            json_closed_brace_c || json_closed_bracket_c;


                CALL execute_bifrost_integration(nr_integration_code_c, json_w);

            EXCEPTION
            WHEN no_data_found THEN
                RAISE EXCEPTION '%', error_message_generic_c USING ERRCODE = error_code_generic_c;
            END;
        END IF;
    END IF;
  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_execute_dispensary_user() FROM PUBLIC;

CREATE TRIGGER execute_dispensary_user
	AFTER INSERT ON dis_regra_local_usuario FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_execute_dispensary_user();

