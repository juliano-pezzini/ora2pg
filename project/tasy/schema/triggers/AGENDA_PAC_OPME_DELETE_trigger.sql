-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_pac_opme_delete ON agenda_pac_opme CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_pac_opme_delete() RETURNS trigger AS $BODY$
DECLARE
 
 
nr_seq_autorizacao_w		bigint;
cd_material_w			bigint;
cd_kit_material_w		integer;
nr_seq_evento_w			bigint;
qt_idade_w			bigint;
cd_convenio_w			bigint;
cd_medico_w			varchar(15);
cd_pessoa_fisica_w		varchar(15);
ie_sexo_w			varchar(15);
nr_seq_proc_interno_w		bigint;
cd_estabelecimento_w		smallint;
cd_agenda_w		bigint;
hr_inicio_w		timestamp;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
dt_cancelamento_w	timestamp;
cd_motivo_cancel_w	varchar(15);
qt_autor_conv_w		bigint := 0;
qt_autor_cir_w		bigint := 0;
ie_zerar_qt_opme_exc_w	varchar(15) := 'E';
nr_atendimento_w	bigint;
ie_permite_alt_executada_w	varchar(1);
ie_status_agenda_w		varchar(3);
cd_tipo_agenda_w		bigint;
ds_observacao_w		varchar(255);
nm_usuario_atual_w	varchar(15) := Wheb_Usuario_Pck.Get_Nm_Usuario;
nr_seq_autor_conv_w	bigint;
 
expressao1_w	varchar(255) := obter_desc_expressao_idioma(773992, null, wheb_usuario_pck.get_nr_seq_idioma);--Item excluido na Agenda pelo usuário 
expressao2_w	varchar(255) := obter_desc_expressao_idioma(327202, null, wheb_usuario_pck.get_nr_seq_idioma);--Data 
c01 CURSOR FOR 
SELECT	a.nr_sequencia, 
	a.nr_seq_autor_conv 
from	autorizacao_cirurgia a 
where	a.nr_seq_agenda	= OLD.nr_seq_agenda 
and	a.dt_liberacao	is null 
and	coalesce(ie_zerar_qt_opme_exc_w,'E') = 'E';
 
c02 CURSOR FOR 
SELECT cd_kit_material 
from  material_estab 
where cd_material = NEW.cd_material;
 
c03 CURSOR FOR 
SELECT	a.cd_material 
from	componente_kit a 
where	a.cd_kit_material	= cd_kit_material_w;
 
c04 CURSOR FOR 
	SELECT	nr_seq_evento 
	from	regra_envio_sms 
	where	cd_estabelecimento		= cd_estabelecimento_w 
	and	ie_evento_disp			= 'EOPME' 
	and	coalesce(qt_idade_w,0) between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999) 
	and	coalesce(ie_sexo,coalesce(ie_sexo_w,'XPTO')) = coalesce(ie_sexo_w,'XPTO') 
	and	coalesce(cd_medico,coalesce(cd_medico_w,'0')) = coalesce(cd_medico_w,'0') 
	and (obter_se_convenio_rec_alerta(cd_convenio_w,nr_sequencia) = 'S') 
	and (obter_se_proc_rec_alerta(nr_seq_proc_interno_w,nr_sequencia,cd_procedimento_w,ie_origem_proced_w) = 'S') 
	and (obter_se_mat_rec_alerta(OLD.cd_material,nr_sequencia) = 'S') 
	and (obter_se_regra_envio(nr_sequencia,nr_atendimento_w) = 'S') 
	and (obter_classif_regra(nr_sequencia,coalesce(obter_classificacao_pf(cd_pessoa_fisica_w),0)) = 'S') 
	and	coalesce(ie_situacao,'A') = 'A';
 
 
 
pragma autonomous_transaction;
BEGIN
  BEGIN 
if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then 
	cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
	 
	ie_zerar_qt_opme_exc_w := obter_param_usuario(871, 618, obter_perfil_ativo, OLD.nm_usuario, cd_estabelecimento_w, ie_zerar_qt_opme_exc_w);
 
	open c01;
	loop 
	fetch c01 into 
		nr_seq_autorizacao_w, 
		nr_seq_autor_conv_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN 
		 
		delete 
		from	material_autorizado a 
		where	a.cd_material	= OLD.cd_material 
		and	((a.nr_seq_opme	= OLD.nr_sequencia) or (a.nr_seq_opme is null)) 
		and	((a.nr_sequencia_autor	= nr_seq_autor_conv_w) or (exists (SELECT	1 
				from	autorizacao_convenio x 
				where	x.nr_sequencia = a.nr_sequencia_autor 
				and	x.nr_seq_autor_cirurgia = nr_seq_autorizacao_w)));
		 
		 
		 
 		delete 
		from	material_autor_cirurgia 
		where	cd_material	= OLD.cd_material 
		and	nr_seq_autorizacao	= nr_seq_autorizacao_w;
		 
		--Para Kit's e não material avulso 
		open c02;
		loop 
		fetch c02 into 
			cd_kit_material_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			BEGIN	 
			open c03;
			loop 
			fetch c03 into 
				cd_material_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				BEGIN	 
				delete 
				from	material_autor_cirurgia 
				where	cd_material		= cd_material_w 
				and	nr_seq_autorizacao	= nr_seq_autorizacao_w;
				end;
			end loop;
			close c03;	
			end;
		end loop;
		close c02;
 
		update	autorizacao_cirurgia a 
		set	a.ie_estagio_autor = '6', 
			a.nm_usuario	 = coalesce(nm_usuario_atual_w, nm_usuario), 
			a.dt_atualizacao	 = LOCALTIMESTAMP 
		where	a.nr_sequencia	 = nr_seq_autorizacao_w 
		and	not exists (	SELECT	1 
					from	material_autor_cirurgia x 
					where	x.nr_seq_autorizacao = a.nr_sequencia);
			 
		 
		update	autorizacao_convenio a 
		set	a.nr_seq_estagio = (	SELECT 	max(x.nr_sequencia) 
						from	estagio_autorizacao x 
						where	x.ie_interno = '70'), 
			a.nm_usuario	 = coalesce(nm_usuario_atual_w, nm_usuario), 
			a.dt_atualizacao = LOCALTIMESTAMP 
		where	a.nr_seq_agenda = OLD.nr_seq_agenda 
		and	((a.nr_sequencia = nr_seq_autor_conv_w) or (a.nr_seq_autor_cirurgia = nr_seq_autorizacao_w)) 
		and	not exists (	select	1 
					from	material_autorizado x 
					where	x.nr_sequencia_autor = a.nr_sequencia);
		 
		 
		end;	
	end loop;
	close c01;
	 
	 
	BEGIN 
	select	cd_pessoa_fisica, 
		coalesce(obter_idade_pf(cd_pessoa_fisica,LOCALTIMESTAMP,'A'),coalesce(qt_idade_paciente,0)), 
		Obter_Sexo_PF(cd_pessoa_fisica,'C'), 
		cd_medico, 
		cd_convenio, 
		nr_seq_proc_interno, 
		cd_agenda, 
		hr_inicio, 
		cd_procedimento, 
		ie_origem_proced, 
		dt_cancelamento, 
		cd_motivo_cancelamento, 
		nr_atendimento, 
		substr(ds_observacao,1,255) 
	into STRICT	cd_pessoa_fisica_w, 
		qt_idade_w, 
		ie_sexo_w, 
		cd_medico_w, 
		cd_convenio_w, 
		nr_seq_proc_interno_w, 
		cd_agenda_w, 
		hr_inicio_w, 
		cd_procedimento_w, 
		ie_origem_proced_w, 
		dt_cancelamento_w, 
		cd_motivo_cancel_w, 
		nr_atendimento_w, 
		ds_observacao_w 
	from	agenda_paciente 
	where	nr_sequencia = OLD.nr_seq_agenda;	
	exception 
	when others then 
		cd_pessoa_fisica_w := null;
		qt_idade_w := null;
		ie_sexo_w := null;
		cd_medico_w := null;
		cd_convenio_w := null;
		nr_seq_proc_interno_w := null;
		cd_agenda_w := null;
		hr_inicio_w := null;
		cd_procedimento_w := null;
		ie_origem_proced_w := null;
		dt_cancelamento_w := null;
		cd_motivo_cancel_w := null;	
		ds_observacao_w	:= null;	
	end;
 
	 
	open c04;
	loop 
	fetch c04 into 
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		BEGIN 
		CALL gerar_evento_agenda_trigger(	nr_seq_evento_w, 
						null, 
						cd_pessoa_fisica_w, 
						null, 
						OLD.nm_usuario, 
						cd_agenda_w, 
						hr_inicio_w, 
						cd_medico_w, 
						cd_procedimento_w, 
						ie_origem_proced_w, 
						dt_cancelamento_w, 
						OLD.cd_material, 
						OLD.qt_material, 
						OLD.ie_autorizado, 
						cd_convenio_w, 
						cd_motivo_cancel_w, 
						'S', 
						null, 
						null, 
						null, 
						null, 
						null, 
						ds_observacao_w, 
						NULL, 
						NULL, 
						NULL, 
						OLD.cd_cgc);
 
		end;
	end loop;
	close c04;
	 
	-- Ronaldo OS 
	 
	if (coalesce(ie_zerar_qt_opme_exc_w,'E') = 'A') then 
		update	material_autor_cirurgia 
		set	qt_solicitada	= 0, 
			nm_usuario	= coalesce(nm_usuario_atual_w, nm_usuario), 
			dt_atualizacao	= LOCALTIMESTAMP, 
			ds_observacao 	= expressao1_w || ' ' || nm_usuario_atual_w || ' ' || expressao2_w || ' ' || to_char(LOCALTIMESTAMP,'dd/mm/yyyy hh24:mi:ss') 
		where	nr_seq_opme	= OLD.nr_sequencia;
		 
		update	material_autorizado 
		set	qt_solicitada	= 0, 
			nm_usuario	= coalesce(nm_usuario_atual_w, nm_usuario), 
			dt_atualizacao	= LOCALTIMESTAMP, 
			ds_observacao	= expressao1_w || ' ' || nm_usuario_atual_w || ' ' || expressao2_w || ' ' || to_char(LOCALTIMESTAMP,'dd/mm/yyyy hh24:mi:ss') 
		where	nr_seq_opme	= OLD.nr_sequencia;
		 
		select 	count(*) 
		into STRICT	qt_autor_conv_w 
		from	material_autorizado a, 
			autorizacao_convenio b 
		where	a.nr_sequencia_autor = b.nr_sequencia 
		and	b.nr_seq_agenda = OLD.nr_seq_agenda 
		--and	b.ie_tipo_autorizacao	= '4' 
		and	a.qt_solicitada	 > 0 
		and	exists (	SELECT	1 
					from	material_autorizado x 
					where	x.nr_sequencia_autor = b.nr_sequencia 
					and	x.nr_seq_opme	   = NEW.nr_sequencia);
		 
		 
		 
		select	count(*) 
		into STRICT	qt_autor_cir_w 
		from	material_autor_cirurgia a, 
			autorizacao_cirurgia b 
		where	a.nr_seq_autorizacao = b.nr_sequencia 
		and	b.nr_seq_agenda = OLD.nr_seq_agenda 
		and	a.qt_solicitada > 0 
		and	exists (	SELECT	1 
				from	material_autor_cirurgia x 
				where	x.nr_seq_autorizacao = b.nr_sequencia 
				and	x.nr_seq_opme	   = NEW.nr_sequencia);
 
		 
		if (qt_autor_cir_w = 0) then 
		 
			update	autorizacao_cirurgia a 
			set	a.ie_estagio_autor = '6', 
				a.nm_usuario	= coalesce(nm_usuario_atual_w, nm_usuario), 
				a.dt_atualizacao	= LOCALTIMESTAMP 
			where	a.nr_seq_agenda = OLD.nr_seq_agenda 
			and	exists (	SELECT	1 
					from	material_autor_cirurgia x 
					where	x.nr_seq_autorizacao = a.nr_sequencia 
					and	x.nr_seq_opme	   = NEW.nr_sequencia);
			 
		end if;
			 
		if (qt_autor_conv_w = 0) then 
		 
			update	autorizacao_convenio a 
			set	a.nr_seq_estagio = (	SELECT 	max(x.nr_sequencia) 
							from	estagio_autorizacao x 
							where	x.ie_interno = '70'), 
				a.nm_usuario	 = coalesce(nm_usuario_atual_w, nm_usuario), 
				a.dt_atualizacao = LOCALTIMESTAMP 
			where	a.nr_seq_agenda = OLD.nr_seq_agenda 
			and	exists (	select	1 
					from	material_autorizado x 
					where	x.nr_sequencia_autor = a.nr_sequencia 
					and	x.nr_seq_opme	   = NEW.nr_sequencia);
		 
		end if;
 
	end if;	
	-- Fim OS 
	 
	BEGIN 
 
	ie_permite_alt_executada_w := obter_param_usuario(871, 758, wheb_usuario_pck.get_cd_perfil, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_permite_alt_executada_w);
 
	select max(a.ie_status_agenda), 
		max(b.cd_tipo_agenda) 
	into STRICT	ie_status_agenda_w, 
		cd_tipo_agenda_w 
	from  agenda_paciente a, 
		agenda b 
	where  a.cd_agenda = b.cd_agenda 
	and	nr_sequencia = OLD.nr_seq_agenda;
 
	exception 
		when others then 
		null;
	end;
 
	if	((ie_permite_alt_executada_w = 'N') and (cd_tipo_agenda_w = 1) and (ie_status_agenda_w = 'E')) and (OLD.ie_integracao <> 'S') then 
		CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(236679);
		 
	end if;
/* 
 
if	(nvl(:old.nr_seq_classificacao,0) > 0) then 
	ds_alteração_w	:=	substr('Exclusão do CME '||substr(cme_obter_desc_classif_conj(:old.nr_seq_classificacao),1,125),1,4000); 
end if;	 
 
if	(ds_alteração_w is not null) then 
	gravar_historico_montagem(:old.nr_seq_agenda,'EC',ds_alteração_w,:old.nm_usuario); 
end if;	 
*/
	 
end if;
 
commit;
 
  END;
RETURN OLD;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_pac_opme_delete() FROM PUBLIC;

CREATE TRIGGER agenda_pac_opme_delete
	BEFORE DELETE ON agenda_pac_opme FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_pac_opme_delete();

