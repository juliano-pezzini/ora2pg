-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS titulo_pagar_adiant_after ON titulo_pagar_adiant CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_titulo_pagar_adiant_after() RETURNS trigger AS $BODY$
declare

cd_estabelecimento_w    ctb_documento.cd_estabelecimento%type;
vl_movimento_w          ctb_documento.vl_movimento%type;
contador                integer;
cd_estabelecimento_logado_w	estabelecimento.cd_estabelecimento%type;
ie_adiant_pago_w  parametro_fluxo_caixa.ie_adiant_pago%type;
nr_sequencia_docto_w fluxo_caixa_docto.nr_sequencia%type;
cont_w             integer;

c01 CURSOR FOR
SELECT  a.nm_atributo,
        a.cd_tipo_lote_contab
from    atributo_contab a
where   a.cd_tipo_lote_contab = 7
and     a.nm_atributo in ( 'VL_ADIANT_TIT_PAGAR', 'VL_IMPOSTO_ADIANT');

c01_w   c01%rowtype;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
if (TG_OP = 'INSERT') then

		cd_estabelecimento_logado_w   := wheb_usuario_pck.get_cd_estabelecimento;

		select coalesce(max(IE_ADIANT_PAGO),'XX')
		into STRICT    IE_ADIANT_PAGO_W
		from PARAMETRO_FLUXO_CAIXA
		WHERE CD_ESTABELECIMENTO = cd_estabelecimento_logado_w;
		
		select	count(*)
		into STRICT    cont_w
		from 	FLUXO_CAIXA_DOCTO a,	
			movto_trans_financ x
		where	x.nr_adiant_pago	= NEW.NR_ADIANTAMENTO
		AND x.nr_sequencia =  a.nr_seq_movto_trans;
		
		if (cont_w <> 0) then
			if (IE_ADIANT_PAGO_W = 'A') then
				delete from FLUXO_CAIXA_DOCTO
				where nr_sequencia in (	SELECT	coalesce(a.nr_sequencia,0)
										from	movto_trans_financ x,
												FLUXO_CAIXA_DOCTO a
										where	x.nr_adiant_pago	= NEW.NR_ADIANTAMENTO
										AND x.nr_sequencia =  a.nr_seq_movto_trans);
			end if;
		end if;
		
			/* Grava o agendamento da informacao para atualizacao do fluxo de caixa. */


			CALL gravar_agend_fluxo_caixa(NEW.nr_titulo,NEW.nr_sequencia,'TPBA',NEW.dt_contabil,'I', NEW.nm_usuario);
        open c01;
        loop
        fetch c01 into
                c01_w;
        EXIT WHEN NOT FOUND; /* apply on c01 */
        BEGIN
                select  max(cd_estabelecimento)
                into STRICT    cd_estabelecimento_w
                from    titulo_pagar
                where   nr_titulo       = NEW.nr_titulo;

                if (c01_w.nm_atributo = 'VL_ADIANT_TIT_PAGAR') then
                        vl_movimento_w := NEW.vl_adiantamento;

                elsif (c01_w.nm_atributo = 'VL_IMPOSTO_ADIANT' ) then
                        vl_movimento_w := NEW.vl_imposto;
                end if;

                        
                if (coalesce(vl_movimento_w, 0) <> 0) then
                        BEGIN
                        CALL ctb_concil_financeira_pck.ctb_gravar_documento( cd_estabelecimento_w,
                                                                        NEW.dt_contabil,
                                                                        7,
                                                                        NEW.nr_seq_trans_fin,
                                                                        16,
                                                                        NEW.nr_titulo,
                                                                        NEW.nr_sequencia,
                                                                        null,
                                                                        vl_movimento_w,
                                                                        'TITULO_PAGAR_ADIANT',
                                                                        c01_w.nm_atributo,
                                                                        NEW.nm_usuario);
                        end;
                end if;
        end;
        end loop;
        close c01;

elsif (TG_OP = 'DELETE') then
        BEGIN

	select  max(cd_estabelecimento)
	into STRICT    cd_estabelecimento_w
	from    titulo_pagar
	where   nr_titulo       = OLD.nr_titulo;

	delete  from ctb_documento
	where   cd_estabelecimento	= cd_estabelecimento_w
	and     dt_competencia	= OLD.dt_contabil
	and     cd_tipo_lote_contabil	= 7
	and     nr_Seq_trans_financ	= OLD.nr_seq_trans_fin
	and     nr_seq_info		= 16
	and     nr_documento	= OLD.nr_titulo
	and     nr_seq_doc_compl	= OLD.nr_sequencia
	and     vl_movimento            	= OLD.vl_adiantamento
	and     nm_tabela               	= 'TITULO_PAGAR_ADIANT'
	and     nm_atributo             	= 'VL_ADIANT_TIT_PAGAR';
	exception when others then
		cd_estabelecimento_w	:= null;
        end;
		
	/* Grava o agendamento da informacao para atualizacao do fluxo de caixa. */


	CALL gravar_agend_fluxo_caixa(OLD.nr_titulo,OLD.nr_sequencia,'TPBA',OLD.dt_contabil,'E',OLD.nm_usuario);	
	
elsif (TG_OP = 'UPDATE') then
	/* Grava o agendamento da informacao para atualizacao do fluxo de caixa. */


	CALL gravar_agend_fluxo_caixa(NEW.nr_titulo,NEW.nr_sequencia,'TPBA',NEW.dt_contabil,'A',NEW.nm_usuario);
end if;
end if;

  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_titulo_pagar_adiant_after() FROM PUBLIC;

CREATE TRIGGER titulo_pagar_adiant_after
	AFTER INSERT OR DELETE ON titulo_pagar_adiant FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_titulo_pagar_adiant_after();

