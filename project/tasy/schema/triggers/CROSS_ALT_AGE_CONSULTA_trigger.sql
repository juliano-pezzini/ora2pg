-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS cross_alt_age_consulta ON agenda_consulta CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_cross_alt_age_consulta() RETURNS trigger AS $BODY$
DECLARE
    json_w                     philips_json;
    json_data_w                text;
    existe_regra_envio_w       regra_envio_status_cross.cd_motivo%TYPE := 0;
    cd_motivo_w                regra_envio_status_cross.cd_motivo%TYPE;
    cd_tipo_agenda_consulta_w  agenda.cd_tipo_agenda%TYPE := 3;
    cd_tipo_agenda_w           agenda.cd_tipo_agenda%TYPE;
    cd_estabelecimento_w       agenda.cd_estabelecimento%TYPE;
    cd_agendamento_externo_w   gercon_solic_consulta.cd_agendamento_externo%TYPE;
    cd_paciente_externo_w      gercon_solic_consulta.cd_paciente_externo%TYPE;
    ie_status_cross_w          regra_envio_status_cross.ie_status_cross%TYPE;
    nome_estabelecimento_w     pessoa_juridica.ds_razao_social%type;
    nm_usuario_w               agenda_consulta.nm_usuario%TYPE;
    dt_atualizacao_w           agenda_consulta.dt_atualizacao%TYPE;
    cd_procedencia_w           gercon_solic_consulta.cd_procedencia%TYPE;
  	nr_seq_solic_w 				gercon_solic_consulta.nr_sequencia%TYPE;
	
	IE_STATUS_AGENDADO_W constant reg_age_evento.ie_status%TYPE := 'A';
	IE_ACAO_RECEPCAO_W	constant reg_age_evento.ie_acao%TYPE := 'R';
	
	ie_exec_w constant varchar(1) := 'S';

    pragma autonomous_transaction;
BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger	= ie_exec_w)  then	

    SELECT
        MAX(1),
        MAX(cd_motivo),
        MAX(ie_status_cross)
    INTO STRICT
        existe_regra_envio_w,
        cd_motivo_w,
        ie_status_cross_w
    FROM
        regra_envio_status_cross
    WHERE
            ie_status_agenda = NEW.ie_status_agenda
        AND cd_tipo_agenda = cd_tipo_agenda_consulta_w;

    IF existe_regra_envio_w > 0 THEN
        SELECT
            MAX(a.cd_tipo_agenda),
            MAX(a.cd_estabelecimento),
            MAX(obter_nome_estabelecimento(a.cd_estabelecimento)),
            MAX(ac.nm_usuario),
            MAX(ac.dt_atualizacao),
            MAX(ger.cd_agendamento_externo),
            MAX(ger.cd_paciente_externo),
            MAX(ger.cd_procedencia),
			MAX(ger.nr_Sequencia)
        INTO STRICT
            cd_tipo_agenda_w,
            cd_estabelecimento_w,
            nome_estabelecimento_w,
            nm_usuario_w,
            dt_atualizacao_w,
            cd_agendamento_externo_w,
            cd_paciente_externo_w,
            cd_procedencia_w,
			nr_seq_solic_w
        FROM
                 agenda a
            INNER JOIN agenda_consulta        ac ON a.cd_agenda = ac.cd_agenda
            INNER JOIN gercon_solic_consulta  ger on ac.cd_agendamento_externo = ger.cd_agendamento_externo
        WHERE
            ac.nr_sequencia = NEW.nr_sequencia;
			
		if (cd_agendamento_externo_w is not null) then
			json_w := philips_json();
			json_w.put('tipo_agenda', cd_tipo_agenda_w);
			json_w.put('cd_estabelecimento', cd_estabelecimento_w);
			json_w.put('cd_agendamento_externo', cd_agendamento_externo_w);
			json_w.put('cd_paciente_externo', cd_paciente_externo_w);
			json_w.put('ie_status_cross', ie_status_cross_w);
			json_w.put('nome_estabelecimento', nome_estabelecimento_w);
			json_w.put('nm_usuario', nm_usuario_w);
			json_w.put('dt_atualizacao', dt_atualizacao_w);
			json_w.put('cd_motivo', cd_motivo_w);
			json_w.put('cd_procedencia', cd_procedencia_w);
			dbms_lob.createtemporary(json_data_w, true);
			json_w.(json_data_w);
			json_data_w := bifrost.send_integration_content('api.tasy.cross', json_data_w, wheb_usuario_pck.get_nm_usuario);
			
			INSERT INTO reg_age_evento(nr_sequencia, nr_seq_solic, nm_usuario, nm_usuario_nrec, dt_atualizacao, dt_atualizacao_nrec,  ie_status,  ie_acao , ie_status_Cross)
                VALUES (nextval('reg_age_evento_seq'), nr_seq_solic_w, nm_usuario_w, nm_usuario_w, LOCALTIMESTAMP, LOCALTIMESTAMP, IE_STATUS_AGENDADO_W,  IE_ACAO_RECEPCAO_W, ie_status_cross_w);
			commit;
		end if;
    END IF;
end if;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_cross_alt_age_consulta() FROM PUBLIC;

CREATE TRIGGER cross_alt_age_consulta
	AFTER UPDATE ON agenda_consulta FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_cross_alt_age_consulta();

