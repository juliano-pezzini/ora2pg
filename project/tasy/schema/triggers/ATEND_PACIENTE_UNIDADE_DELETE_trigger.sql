-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atend_paciente_unidade_delete ON atend_paciente_unidade CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atend_paciente_unidade_delete() RETURNS trigger AS $BODY$
DECLARE
ie_leito_livre_w	varchar(1);
cd_estabelecimento_w	smallint;
qt_unid_atend_mat_w	integer;
qt_unid_atend_proc_w	integer;

BEGIN

CALL gravar_log_exclusao('ATEND_PACIENTE_UNIDADE',OLD.nm_usuario,
		'NR_ATENDIMENTO=' || OLD.nr_atendimento || ', DT_ENTRADA_UNIDADE=' ||
		PKG_DATE_FORMATERS_TZ.to_varchar(OLD.dt_entrada_unidade,'timestamp',ESTABLISHMENT_TIMEZONE_UTILS.getTimezone)
		||', NR_SEQ_INTERNO=' || OLD.nr_seq_interno || ', CD_SETOR_ATENDIMENTO=' || OLD.cd_setor_atendimento ,'N'
		|| ', get_ie_executar_trigger='|| wheb_usuario_pck.get_ie_executar_trigger);

if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
	goto final;
end if;
/*  deactivated for nao block exclusao
select 	count(*)
into	qt_unid_atend_mat_w
from 	material_atend_paciente
where 	nr_seq_atepacu = :old.nr_seq_interno
and	cd_motivo_exc_conta is null;

select 	count(*)
into	qt_unid_atend_proc_w
from 	procedimento_paciente
where 	nr_seq_atepacu = :old.nr_seq_interno
and	cd_motivo_exc_conta is null;

if	((qt_unid_atend_mat_w > 0) or (qt_unid_atend_proc_w > 0)) then 
	WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(267485);
	
end if;
*/

if	((coalesce(OLD.ie_passagem_setor,'N') = 'N') or (coalesce(NEW.ie_passagem_setor,'L') = 'L')) then
	BEGIN

	select	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	setor_atendimento
	where	cd_setor_atendimento	=	OLD.cd_setor_atendimento;	
	
	select	coalesce(max(ie_leito_livre),'N')
	into STRICT	ie_leito_livre_w
	from	parametro_atendimento
	where	cd_estabelecimento	=	cd_estabelecimento_w;

	UPDATE UNIDADE_ATENDIMENTO A
	SET A.NR_ATENDIMENTO       = NULL,
	    A.DT_ENTRADA_UNIDADE   = NULL,
	    A.IE_STATUS_UNIDADE   = 
		CASE WHEN coalesce(a.ie_higienizacao,'N')='N' THEN 			CASE WHEN coalesce(a.cd_paciente_reserva,a.nm_pac_reserva) = NULL THEN 'L'  ELSE 'R' END   ELSE CASE WHEN ie_leito_livre_w='N' THEN a.ie_higienizacao  ELSE 'L' END  END ,
	    a.nm_usuario = coalesce(NEW.nm_usuario, 'TASY'),
	    a.dt_atualizacao = LOCALTIMESTAMP
	WHERE A.cd_unidade_basica 	= OLD.cd_unidade_basica
	AND A.cd_unidade_compl  	= OLD.cd_unidade_compl
	AND A.nr_atendimento    	= OLD.nr_atendimento
	AND A.dt_entrada_unidade	= OLD.dt_entrada_unidade
	AND A.cd_setor_atendimento 	= OLD.cd_setor_atendimento
	AND A.cd_setor_atendimento in (SELECT cd_setor_atendimento
	       from setor_atendimento
	       where cd_classif_setor in (3,4,8));
	
	UPDATE UNIDADE_ATENDIMENTO A
	SET A.dt_higienizacao		 = NULL,
    	    A.dt_inicio_higienizacao	= LOCALTIMESTAMP,
	    a.nm_usuario		= coalesce(NEW.nm_usuario,'TASY'),
	    a.dt_atualizacao		= LOCALTIMESTAMP,
	    a.nm_usuario_higienizacao	= OLD.nm_usuario
	WHERE A.cd_unidade_basica 	= OLD.cd_unidade_basica
	  AND A.cd_unidade_compl  	= OLD.cd_unidade_compl
	  AND A.cd_setor_atendimento 	= OLD.cd_setor_atendimento
	  AND a.ie_status_unidade	= 'H';		

	CALL Atualizar_Unidade_atendimento(OLD.cd_setor_atendimento,
					OLD.cd_unidade_basica,
					OLD.cd_unidade_compl);
	end;
end if;

<<final>>
null;

RETURN OLD;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atend_paciente_unidade_delete() FROM PUBLIC;

CREATE TRIGGER atend_paciente_unidade_delete
	BEFORE DELETE ON atend_paciente_unidade FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atend_paciente_unidade_delete();

