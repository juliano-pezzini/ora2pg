-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS diagnostico_doenca_atual ON diagnostico_doenca CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_diagnostico_doenca_atual() RETURNS trigger AS $BODY$
declare

nr_seq_regra_cid_pre_w 		bigint;
ie_situacao_w          		varchar(10);
nr_seq_regra_cid_w     		bigint;
nr_seq_regra_proc_w    		bigint;
cd_procedimento_w      		bigint;
ie_origem_proced_w     		bigint;
ie_tipo_diagnostico_w  		char;
nr_sequencia_w         		cid_doenca_versao.nr_sequencia%type;
dt_entrada_w           		timestamp;
nr_seq_case_w		   		episodio_paciente.nr_sequencia%type;
ie_diagnostico_admissao_w	varchar(10);
nr_seq_classif_diag_w		wl_worklist.nr_seq_classif_diag%type;
ie_usa_case_w				varchar(1);
nr_seq_episodio_w			episodio_paciente.nr_sequencia%type;
cd_doenca_w					diagnostico_doenca.cd_doenca%type;
qt_tempo_da_w				wl_regra_item.qt_tempo_normal%type;
nr_seq_regra_wl_da_w		wl_regra_item.nr_sequencia%type;
is_rule_tasklist_da_w		wl_item.nr_sequencia%type;

  c01 CURSOR FOR
    SELECT ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(ap.dt_entrada) dt_entrada
    from atendimento_paciente ap
    where ap.nr_atendimento = NEW.nr_atendimento;

  c02 CURSOR FOR
    SELECT ie_data_cid
    from parametro_atendimento pa
    where pa.cd_estabelecimento = obter_estabelecimento_ativo();

  c02_w c02%rowtype;

  c03 CURSOR(dt_entrada_w  timestamp) FOR
    SELECT nr_sequencia
    from   cid_doenca_versao
    where cd_doenca_cid = NEW.cd_doenca
      and dt_entrada_w between dt_vigencia_inicial and dt_vigencia_final;
	  
c04 CURSOR FOR     
	SELECT	coalesce(b.qt_tempo_normal,0),
			coalesce(b.nr_sequencia, 0)
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
							from	wl_item x
							where	x.nr_sequencia = a.nr_seq_item
							and		x.cd_categoria = 'DA'
							and		x.ie_situacao = 'A');	
BEGIN
  BEGIN

NEW.CD_CID_AUTOCOMPLETE := NEW.CD_DOENCA;

if TG_OP = 'INSERT' then

   IF billing_i18n_pck.obter_se_versao_cid = 'S' THEN

      dt_entrada_w := null;
      c02_w        := null;

      --buscar a forma de atendimento

      open c02;
      fetch c02 into c02_w;
      close c02;

      if c02_w.ie_data_cid is not null then

        case c02_w.ie_data_cid
             when 1 then
             BEGIN
               open c01;
               fetch c01 into dt_entrada_w;
               close c01;
             end;
             when 2 then
               dt_entrada_w := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP);

        end case;

      end if;

      if dt_entrada_w is not null then
        open c03(dt_entrada_w);
        fetch c03 into NEW.NR_SEQ_VERSAO_CID;
        close c03;
      end if;

   END IF;

end if;

if (coalesce(OLD.DT_DIAGNOSTICO,LOCALTIMESTAMP + interval '10 days') <> NEW.DT_DIAGNOSTICO) and (NEW.DT_DIAGNOSTICO is not null) then
  NEW.ds_utc    := obter_data_utc(NEW.DT_DIAGNOSTICO, 'HV');
end if;

if (coalesce(OLD.DT_LIBERACAO,LOCALTIMESTAMP + interval '10 days') <> NEW.DT_LIBERACAO) and (NEW.DT_LIBERACAO is not null) then
  NEW.ds_utc_atualizacao  := obter_data_utc(NEW.DT_LIBERACAO,'HV');
end if;

if (NEW.DT_ATUALIZACAO_NREC is null and OLD.DT_ATUALIZACAO_NREC is null) then
  NEW.DT_ATUALIZACAO_NREC := LOCALTIMESTAMP;
end if;

if (NEW.NM_USUARIO_NREC is null and OLD.NM_USUARIO_NREC is null) then
  NEW.NM_USUARIO_NREC := wheb_usuario_pck.get_nm_usuario;
end if;

if (NEW.dt_liberacao is not null) and (OLD.dt_liberacao is null) then

  select  coalesce(max(nr_sequencia),0)
  into STRICT  nr_seq_regra_cid_pre_w
  from  regra_cid_pre_agendamento
  where  cd_doenca   = NEW.cd_doenca
  and  ie_situacao  = 'A';

  if (nr_seq_regra_cid_pre_w > 0) then

    insert  into atend_cid_esp_pre_agend(
      nr_sequencia,
      dt_atualizacao,
      nm_usuario,
      dt_atualizacao_nrec,
      nm_usuario_nrec,
      nr_atendimento,
      cd_especialidade,
      cd_doenca
      )
      (
      SELECT  nextval('atend_cid_esp_pre_agend_seq'),
        LOCALTIMESTAMP,
        NEW.nm_usuario,
        LOCALTIMESTAMP,
        NEW.nm_usuario,
        NEW.nr_atendimento,
        e.cd_especialidade,
        r.cd_doenca
      from  regra_cid_pre_agend_esp e,
        regra_cid_pre_agendamento r
      where  r.nr_sequencia    = nr_seq_regra_cid_pre_w
      and  e.nr_seq_regra_pre_agend= r.nr_sequencia
      and  e.ie_situacao     = 'A'
      );


  end if;

    CALL send_diagnosis_integration(NEW.nr_seq_interno,NEW.nr_atendimento, NEW.cd_doenca, NEW.dt_diagnostico, NEW.ie_classificacao_doenca,
						   NEW.ie_situacao, NEW.dt_liberacao, NEW.dt_inativacao, NEW.dt_atualizacao);

end if;
BEGIN

if (NEW.ie_tipo_diag_classif is null) and (NEW.nr_seq_classif_adic is not null) then

  select   max(ie_tipo_diagnostico)
  into STRICT  ie_tipo_diagnostico_w
  from  diagnostico_classif_adic
  where   nr_sequencia = NEW.nr_seq_classif_adic;

  if (ie_tipo_diagnostico_w is not null) then
    NEW.ie_tipo_diag_classif := ie_tipo_diagnostico_w;
  end if;

end if;

if (NEW.IE_TIPO_DIAGNOSTICO  <> coalesce(OLD.IE_TIPO_DIAGNOSTICO,'0')) then
  update  diagnostico_medico
  set  IE_TIPO_DIAGNOSTICO  = NEW.IE_TIPO_DIAGNOSTICO
  where  nr_atendimento    = NEW.nr_atendimento
  and  dt_diagnostico    = NEW.dt_diagnostico;
end if;

if ( OLD.dt_diagnostico is null or OLD.dt_diagnostico  <> NEW.dt_diagnostico) then
	update  diagnostico_medico
	set     dt_diagnostico     = NEW.dt_diagnostico
	where   nr_atendimento   = NEW.nr_atendimento
	and     dt_diagnostico     =  coalesce(OLD.dt_diagnostico,NEW.dt_reg_diag);
end if;

exception
  when others then
  null;
end;

BEGIN
  select  nr_sequencia
  into STRICT  nr_seq_regra_cid_w
  from  cid_permissao
  where  cd_cid_doenca = NEW.cd_doenca  LIMIT 1;
exception
  when  no_data_found then
    nr_seq_regra_cid_w := 0;
end;

if (nr_seq_regra_cid_w > 0) then

  cd_procedimento_w  := obter_proc_principal(NEW.nr_atendimento, obter_convenio_atendimento(NEW.nr_atendimento),
              obter_tipo_Atendimento(NEW.nr_atendimento), null, 'CP');
  ie_origem_proced_w   := obter_proc_principal(NEW.nr_atendimento, obter_convenio_atendimento(NEW.nr_atendimento),
              obter_tipo_Atendimento(NEW.nr_atendimento), null, 'IP');

  If (coalesce(cd_procedimento_w, 0) > 0) and (coalesce(ie_origem_proced_w, 0) > 0) then

    BEGIN
      select  nr_sequencia
      into STRICT  nr_seq_regra_proc_w
      from  cid_permissao_proc
      where  nr_seq_cid_permissao = nr_seq_regra_cid_w
      and  cd_procedimento = cd_procedimento_w
      and  ie_origem_proced = ie_origem_proced_w  LIMIT 1;
    exception
      when  no_data_found then
        nr_seq_regra_proc_w := 0;
      when  others then
        nr_seq_regra_proc_w := 1;
    end;

    If (nr_seq_regra_proc_w = 0) then
      CALL wheb_mensagem_pck.exibir_mensagem_abort(210243);
    end if;
  end if;
end if;

if (pkg_i18n.get_user_locale = 'ja_JP') then
if (wheb_usuario_pck.get_ie_executar_trigger    = 'S')  then
BEGIN
	select	count(a.nr_sequencia)
	into STRICT	is_rule_tasklist_da_w
	from	wl_item a,
		wl_regra_worklist b,
		wl_regra_item c
	where	a.nr_sequencia = b.nr_seq_item
	and	b.nr_sequencia = c.nr_seq_regra
	and	a.cd_categoria = 'DA'
	and	a.ie_situacao = 'A'
	and	c.ie_situacao = 'A';

if (OLD.dt_liberacao is null and NEW.dt_liberacao is not null and is_rule_tasklist_da_w > 0 ) then

	open c04;
	loop
	fetch c04 into
		qt_tempo_da_w,
		nr_seq_regra_wl_da_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		BEGIN
			if (coalesce(qt_tempo_da_w,0) > 0) then

				CALL wl_gerar_finalizar_tarefa('DA','I',NEW.nr_atendimento,OBTER_PESSOA_ATENDIMENTO(NEW.nr_atendimento,'C'),wheb_usuario_pck.get_nm_usuario,LOCALTIMESTAMP+(qt_tempo_da_w/24),'N',
										null,null,null,null,null,null,null,null,NEW.nr_seq_interno ,nr_seq_regra_wl_da_w,NEW.ie_tipo_diagnostico,null,null,null,null,null,
                    null,LOCALTIMESTAMP,null,null,null,null,null,null,NEW.IE_CLASSIFICACAO_DOENCA);
			end if;
		end;
	end loop;
	close c04;
  end if;
end;
end if;

if (pkg_i18n.get_user_locale = 'de_DE') then
BEGIN
	if (NEW.ie_diag_princ_episodio = 'S') then
		NEW.ie_classificacao_doenca := 'P';
	else
		NEW.ie_classificacao_doenca := 'S';
	end if;

end;
end if;

if (OLD.dt_inativacao is null and NEW.dt_inativacao is not null and NEW.cd_evolucao is not null) then

delete from clinical_note_soap_data where cd_evolucao = NEW.cd_evolucao and ie_med_rec_type = 'DIAGNOSIS' and ie_stage = 1 and ie_soap_type = 'A' and nr_seq_med_item=NEW.nr_seq_interno;

end if;
end if;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_diagnostico_doenca_atual() FROM PUBLIC;

CREATE TRIGGER diagnostico_doenca_atual
	BEFORE INSERT OR UPDATE ON diagnostico_doenca FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_diagnostico_doenca_atual();

