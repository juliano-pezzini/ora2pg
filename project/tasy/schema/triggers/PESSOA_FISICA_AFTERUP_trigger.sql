-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pessoa_fisica_afterup ON pessoa_fisica CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pessoa_fisica_afterup() RETURNS trigger AS $BODY$
declare
reg_integracao_p		gerar_int_padrao.reg_integracao;
nm_contato_w			varchar(60);
ds_endereco_w			varchar(100);
cd_cep_w			varchar(15);
nr_endereco_w			integer;
ds_complemento_w		varchar(40);
ds_municipio_w			varchar(40);
ds_bairro_w			varchar(40);
nr_telefone_w			varchar(15);
nr_ramal_w			integer;
ds_fone_adic_w			varchar(80);
ds_email_w			varchar(255);
cd_profissao_w			bigint;
cd_empresa_refer_w		bigint;
ds_setor_trabalho_w		varchar(30);
ds_horario_trabalho_w		varchar(30);
nr_matricula_trabalho_w		varchar(20);
cd_municipio_ibge_w		varchar(6);
ds_fax_w			varchar(80);
cd_tipo_logradouro_w		varchar(3);
nr_ddd_telefone_w		varchar(3);
nr_ddi_telefone_w		varchar(3);
nr_ddi_fax_w			varchar(3);
nr_ddd_fax_w			varchar(3);
ds_website_w			varchar(255);
nm_contato_pesquisa_w		varchar(60);
ie_tipo_complemento_w		smallint;
qt_existe_w			bigint;
ds_mensagem_w			varchar(255);
ds_email_origem_w		varchar(255);
qt_reg_w			smallint;
ie_opcao_w			varchar(1) := 'I';
sg_estado_w		compl_pessoa_fisica.sg_estado%type;
ie_cad_completo_w	FUNCAO_PARAMETRO.VL_PARAMETRO_PADRAO%type;
ie_cad_simplif_w	FUNCAO_PARAMETRO.VL_PARAMETRO_PADRAO%type;
IE_ATUAL_PAC_AGEINT_w	parametro_agenda.IE_ATUAL_PAC_AGEINT%type;
IE_ATUAL_PAC_AGECON_AGESERV_w	parametro_agenda.IE_ATUAL_PAC_AGECON_AGESERV%type;
ie_existe_w	varchar(1);
IE_STATUS_CPF_W varchar(1);
NR_QTD_REG_EST_W bigint;

C01 CURSOR FOR
	SELECT	ds_email_envio
	from	regra_aviso_pessoa_cns
	where	ie_situacao = 'A';
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

ie_cad_completo_w := Obter_param_Usuario(5, 164, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_cad_completo_w);
ie_cad_simplif_w := Obter_param_Usuario(32, 44, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_cad_simplif_w);

select  coalesce(max(IE_ATUAL_PAC_AGEINT), 'N'),
	coalesce(max(IE_ATUAL_PAC_AGECON_AGESERV), 'N')
into STRICT	IE_ATUAL_PAC_AGEINT_w,
	IE_ATUAL_PAC_AGECON_AGESERV_w
from 	PARAMETRO_AGENDA
where 	cd_estabelecimento = NEW.cd_estabelecimento;

if (NEW.nm_pessoa_fisica	<> OLD.nm_pessoa_fisica and TG_OP = 'UPDATE') then
	--(OBTER_FUNCAO_ATIVA = 871) then -- OS 626900

	
	CALL wheb_usuario_pck.set_ie_executar_trigger('N');
	
	update	agenda_paciente
	set	nm_paciente		= NEW.nm_pessoa_fisica,
		nm_usuario		= 'Tasy',
		dt_atualizacao		= LOCALTIMESTAMP
	where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica;				
	
	if (ie_cad_completo_w = 'N') and (ie_cad_simplif_w = 'N') then			
		if (IE_ATUAL_PAC_AGECON_AGESERV_w = 'S') then
			update	agenda_consulta
			set	nm_paciente		= NEW.nm_pessoa_fisica,
				nm_usuario		= 'Tasy',
				dt_atualizacao		= LOCALTIMESTAMP
			where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica;
		end if;
	end if;	
	if (IE_ATUAL_PAC_AGEINT_w = 'S') then
		update	agenda_integrada
		set	NM_PACIENTE		= NEW.nm_pessoa_fisica,
			nm_usuario		= 'Tasy',
			dt_atualizacao		= LOCALTIMESTAMP
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica;
	end if;	
	
	BEGIN
		select	'S'
		into STRICT	ie_existe_w
		from	gerint_solic_internacao
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica  LIMIT 1;

		update	gerint_solic_internacao
		set		NM_PESSOA_FISICA	= NEW.nm_pessoa_fisica,
				nm_usuario			= 'Tasy',
				dt_atualizacao		= LOCALTIMESTAMP
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica;	
	exception
	when others then
		null;
	end;	
	

	
	CALL wheb_usuario_pck.set_ie_executar_trigger('S');		
end if;


select	count(*)
into STRICT	qt_existe_w
from	sup_parametro_integracao a,
	sup_int_regra_pf b
where	a.nr_sequencia = b.nr_seq_integracao
and	a.ie_evento = 'PF'
and	a.ie_forma = 'E'
and	a.ie_situacao = 'A'
and	b.ie_situacao = 'A';

if (qt_existe_w > 0) and (NEW.nm_usuario <> 'INTEGR_TASY') then
	
	CALL envia_sup_int_pf(
		NEW.cd_pessoa_fisica,
		NEW.nr_identidade,
		NEW.nm_pessoa_fisica,
		NEW.nr_telefone_celular,
		NEW.ie_grau_instrucao,
		NEW.nr_cep_cidade_nasc,
		NEW.nr_prontuario,
		NEW.nm_usuario,
		NEW.cd_religiao,
		NEW.nr_pis_pasep,
		NEW.cd_nacionalidade,
		NEW.ie_dependencia_sus,
		NEW.qt_altura_cm,
		NEW.ie_tipo_sangue,
		NEW.ie_fator_rh,
		NEW.dt_nascimento,
		NEW.dt_obito,
		NEW.ie_sexo,
		NEW.nr_iss,
		NEW.ie_estado_civil,
		NEW.nr_inss,
		NEW.nr_cpf,
		NEW.nr_cert_nasc,
		NEW.cd_cargo,
		NEW.nr_cert_casamento,
		NEW.ds_codigo_prof,
		NEW.cd_empresa,
		NEW.ie_funcionario,
		NEW.nr_seq_cor_pele,
		NEW.ds_orgao_emissor_ci,
		NEW.nr_cartao_nac_sus,
		NEW.cd_cbo_sus,
		NEW.cd_atividade_sus,
		NEW.ie_vinculo_sus,
		NEW.cd_sistema_ant,
		NEW.ie_frequenta_escola,
		NEW.cd_funcionario,
		NEW.nr_pager_bip,
		NEW.nr_transacao_sus,
		NEW.cd_medico,
		NEW.ie_tipo_prontuario,
		NEW.dt_emissao_ci,
		NEW.nr_seq_conselho,
		NEW.dt_admissao_hosp,
		NEW.ie_fluencia_portugues,
		NEW.nr_titulo_eleitor,
		NEW.nr_zona,
		NEW.nr_secao,
		NEW.nr_cartao_estrangeiro,
		NEW.nr_reg_geral_estrang,
		NEW.dt_chegada_brasil,
		NEW.sg_emissora_ci,
		NEW.dt_naturalizacao_pf,
		NEW.nr_ctps,
		NEW.nr_serie_ctps,
		NEW.uf_emissora_ctps,
		NEW.dt_emissao_ctps,
		NEW.nr_portaria_nat,
		NEW.nr_seq_cartorio_nasc,
		NEW.nr_seq_cartorio_casamento,
		NEW.dt_emissao_cert_nasc,
		NEW.dt_emissao_cert_casamento,
		NEW.nr_livro_cert_nasc,
		NEW.nr_livro_cert_casamento,
		NEW.dt_cadastro_original,
		NEW.nr_folha_cert_nasc,
		NEW.nr_folha_cert_casamento,
		NEW.nr_same,
		NEW.ds_observacao,
		NEW.qt_dependente,
		NEW.nr_transplante,
		NEW.dt_validade_rg,
		NEW.dt_revisao,
		NEW.dt_demissao_hosp,
		NEW.cd_puericultura,
		NEW.cd_cnes,
		NEW.ds_apelido,
		NEW.ie_endereco_correspondencia,
		NEW.qt_peso_nasc,
		NEW.uf_conselho,
		NEW.nm_abreviado,
		NEW.nr_ccm,
		NEW.dt_fim_experiencia,
		NEW.dt_validade_conselho,
		NEW.ds_profissao,
		NEW.ds_empresa_pf,
		NEW.nr_passaporte,
		NEW.nr_cnh,
		NEW.nr_cert_militar,
		NEW.nr_pront_ext,
		NEW.ie_escolaridade_cns,
		NEW.ie_situacao_conj_cns,
		NEW.nr_folha_cert_div,
		NEW.nr_cert_divorcio,
		NEW.nr_seq_cartorio_divorcio,
		NEW.dt_emissao_cert_divorcio,
		NEW.nr_livro_cert_divorcio,
		NEW.dt_alta_institucional,
		NEW.dt_transplante,
		NEW.nr_matricula_nasc,
		NEW.ie_doador,
		NEW.dt_vencimento_cnh,
		NEW.ds_categoria_cnh,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null);
end if;

if	(OLD.nr_cartao_nac_sus is null AND NEW.nr_cartao_nac_sus is not null) or
	(NEW.nr_cartao_nac_sus is not null AND OLD.nr_cartao_nac_sus <> NEW.nr_cartao_nac_sus) then
	
	open C01;
	loop
	fetch C01 into	
		ds_email_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		BEGIN
		if (ds_email_w is not null) then
			ds_mensagem_w := OBTER_DESC_EXPRESSAO(327262) || ' ' || NEW.cd_pessoa_fisica || chr(13) || chr(10) ||
					'Pessoa: ' || NEW.nm_pessoa_fisica || chr(13) || chr(10) ||
					'CNS:'	|| NEW.nr_cartao_nac_sus;
			CALL enviar_email('Cadastro de Pessoa com CNS', ds_mensagem_w, ds_email_origem_w, ds_email_w, NEW.nm_usuario, 'M');
		end if;
		end;
	end loop;
	close C01;
	
end if;

/* Projeto MXM (7077)  - Exportar cadastro pessoa fisica */


if (NEW.nr_cpf is not null) then
	CALL gravar_agend_integracao(556,'CD_PESSOA_FISICA='||NEW.cd_pessoa_fisica||';CD_PESSOA_JURIDICA='||null||';'); --Fornecedor
	CALL gravar_agend_integracao(562,'CD_PESSOA_FISICA='||NEW.cd_pessoa_fisica||';'); --Cliente
end if;

if (TG_OP = 'UPDATE') and (coalesce(OLD.nm_pessoa_fisica, NEW.nm_pessoa_fisica) <> NEW.nm_pessoa_fisica) then
	if (wheb_usuario_pck.is_evento_ativo(634) = 'S') then
		CALL supplypoint_atual_inf_pac(NEW.cd_pessoa_fisica, NEW.nm_usuario);
	end if;
	if (wheb_usuario_pck.is_evento_ativo(919) = 'S') then
		CALL integracao_athena_disp_pck.atualiza_info_paciente(NEW.cd_pessoa_fisica, NEW.nm_usuario);
	end if;
    CALL gerar_int_dankia_pck.dankia_disp_atualiza_paciente(coalesce(NEW.cd_estabelecimento,obter_estabelecimento_ativo),
                                                       NEW.nm_usuario,
                                                       NEW.cd_pessoa_fisica,
                                                       NEW.nm_pessoa_fisica,
                                                       NEW.ie_sexo,
                                                       NEW.dt_nascimento);
end if;

	select	max(ie_motivo_sem_cpf)
	into STRICT	ie_status_cpf_w
	from	pessoa_fisica_aux
	where	cd_pessoa_fisica = NEW.cd_pessoa_fisica;

  IF (IE_STATUS_CPF_W = '4'
  AND NEW.NR_CARTAO_ESTRANGEIRO IS NULL
  AND NEW.NR_REG_GERAL_ESTRANG IS NULL) THEN
    SELECT COUNT(*)
      INTO STRICT NR_QTD_REG_EST_W
      FROM PESSOA_FISICA_ESTRANGEIRO PFE
     WHERE PFE.CD_PESSOA_FISICA = NEW.CD_PESSOA_FISICA;

    IF (NR_QTD_REG_EST_W = 0) THEN
      CALL ATUALIZA_MOTIVO_SEM_CPF_PF(NEW.CD_PESSOA_FISICA, NULL, NEW.NM_USUARIO, 'N');

      IE_STATUS_CPF_W := NULL;
    END IF;
  END IF;

  SELECT CASE WHEN NEW.NR_CPF IS NOT NULL THEN '7'
              WHEN NEW.NR_CARTAO_ESTRANGEIRO IS NOT NULL
                OR NEW.NR_REG_GERAL_ESTRANG IS NOT NULL
                OR (SELECT COUNT(*)
                      FROM PESSOA_FISICA_ESTRANGEIRO PFE 
                     WHERE PFE.CD_PESSOA_FISICA = NEW.CD_PESSOA_FISICA) > 0 THEN '4'
              WHEN OBTER_IDADE(NEW.DT_NASCIMENTO, LOCALTIMESTAMP, 'A') < 18
        and (ie_status_cpf_w <> '1' or OBTER_IDADE(NEW.DT_NASCIMENTO, LOCALTIMESTAMP, 'A') > 0) THEN '2'
              WHEN OBTER_IDADE(NEW.DT_NASCIMENTO, LOCALTIMESTAMP, 'A') > 60 THEN '3'
         ELSE '6' END
    INTO STRICT IE_STATUS_CPF_W
;

  CALL ATUALIZA_MOTIVO_SEM_CPF_PF(NEW.CD_PESSOA_FISICA, IE_STATUS_CPF_W, NEW.NM_USUARIO, 'N');

if (TG_OP = 'UPDATE') then
	ie_opcao_w	:= 'A';
end if;
reg_integracao_p.ie_operacao		:= ie_opcao_w;
reg_integracao_p.nr_prontuario		:= NEW.nr_prontuario;
reg_integracao_p.cd_pessoa_fisica	:= NEW.cd_pessoa_fisica;
reg_integracao_p.ie_funcionario 	:= coalesce(NEW.ie_funcionario,'N');
reg_integracao_p.nr_seq_conselho 	:= NEW.nr_seq_conselho;

SELECT CASE WHEN COUNT(*)=0 THEN  'N'  ELSE 'S' END
  INTO STRICT reg_integracao_p.ie_pessoa_atend
  FROM pessoa_fisica_aux
 WHERE cd_pessoa_fisica = NEW.cd_pessoa_fisica
   AND nr_primeiro_atend IS NOT NULL;

   if NEW.nr_cpf is not null then
      reg_integracao_p.ie_possui_cpf := 'S';
   end if;

if (wheb_usuario_pck.get_ie_lote_contabil = 'N') then
	reg_integracao_p := gerar_int_padrao.gravar_integracao('12', NEW.cd_pessoa_fisica, NEW.nm_usuario, reg_integracao_p);
end if;

if (NEW.ie_funcionario = 'S') then
  reg_integracao_p := gerar_int_padrao.gravar_integracao('304', NEW.cd_pessoa_fisica, NEW.nm_usuario, reg_integracao_p);
end if;

if NEW.dt_obito is not null then
  CALL finaliza_evento_pj_obito(NEW.cd_pessoa_fisica, NEW.dt_obito,NEW.nm_usuario, 'N');
end if;

<<Final>>
qt_reg_w  := 0;


  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pessoa_fisica_afterup() FROM PUBLIC;

CREATE TRIGGER pessoa_fisica_afterup
	AFTER INSERT OR UPDATE ON pessoa_fisica FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pessoa_fisica_afterup();

