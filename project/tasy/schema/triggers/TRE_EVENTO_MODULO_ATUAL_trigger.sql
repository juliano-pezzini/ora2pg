-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS tre_evento_modulo_atual ON tre_evento_modulo CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_tre_evento_modulo_atual() RETURNS trigger AS $BODY$
DECLARE

dt_inicio_w				timestamp;
dt_final_w				timestamp;
dt_inicio_real_w			timestamp;
dt_fim_real_w				timestamp;
dt_consist_modulo_w			varchar(1);

BEGIN

dt_consist_modulo_w := obter_param_usuario(7004, 32, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, dt_consist_modulo_w);

select	max(dt_inicio),
	max(dt_fim),
	max(dt_inicio_real),
	max(dt_fim_real)
into STRICT	dt_inicio_w,
	dt_final_w,
	dt_inicio_real_w,
	dt_fim_real_w
from	tre_evento
where	nr_sequencia		= NEW.nr_seq_evento;

if (dt_consist_modulo_w = 'P') then
	BEGIN
		if (NEW.dt_inicio  < dt_inicio_w)  or (NEW.dt_inicio  > dt_final_w) then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(262012); -- A data do conteúdo deve estar dentro do período definido no módulo!
		end if;

		if (NEW.dt_termino  < dt_inicio_w)  or (NEW.dt_termino  > dt_final_w) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(262013); -- A data do conteúdo deve estar dentro do período definido no módulo!
		end if;
	end;
elsif (dt_consist_modulo_w = 'R') then
		if (NEW.dt_inicio  < dt_inicio_real_w)  or (NEW.dt_inicio  > dt_fim_real_w) then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(262012); -- A data do conteúdo deve estar dentro do período definido no módulo!
		end if;

		if (NEW.dt_termino  < dt_inicio_real_w)  or (NEW.dt_termino  > dt_fim_real_w) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(262013); -- A data do conteúdo deve estar dentro do período definido no módulo!
		end if;
end if;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_tre_evento_modulo_atual() FROM PUBLIC;

CREATE TRIGGER tre_evento_modulo_atual
	BEFORE INSERT OR UPDATE ON tre_evento_modulo FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_tre_evento_modulo_atual();

