-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS relatorio_auto_imp_atual_after ON relatorio_auto_imp CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_relatorio_auto_imp_atual_after() RETURNS trigger AS $BODY$
declare

  DS_TABLES_W RELATORIO_DINAMICO.DS_SQL%TYPE;

  C_TABLES CURSOR(DS_TABLES_P RELATORIO_DINAMICO.DS_SQL%TYPE) FOR
    SELECT COLUMN_VALUE DS_TABLE
      FROM TABLE(DOC_EXPORT_AUTO_PKG.SPLIT_TEXT(DS_TABLES_P, ';'));

  R_TABLES DOC_EXPORT_AUTO_PKG.T_TAB_TEXT;
BEGIN
  BEGIN

IF wheb_usuario_pck.get_ie_executar_trigger = 'S' THEN

BEGIN

DS_TABLES_W := NULL;

if (TG_OP = 'INSERT')	then

  insert	into relatorio_auto_param(
    nr_sequencia,
    nr_seq_rel_auto,
    cd_parametro,
    dt_atualizacao,
    nm_usuario,
    ds_valor)
  SELECT	nextval('relatorio_auto_param_seq'),
    NEW.nr_sequencia,
    cd_parametro,
    LOCALTIMESTAMP,
    NEW.nm_usuario,
    vl_padrao
  from	relatorio_parametro
  where	nr_seq_relatorio	= NEW.NR_SEQ_RELATORIO;

  IF NEW.IE_EXPORTAR_DOCUMENTO = 'S' THEN

    DS_TABLES_W := DOC_EXPORT_AUTO_PKG.GET_REPORT_TABLES(NEW.NR_SEQ_RELATORIO, null, null, null, null, null, null);

  END IF;

elsif (NEW.NR_SEQ_RELATORIO <> OLD.NR_SEQ_RELATORIO ) then

  delete	from relatorio_auto_param
  where	nr_seq_rel_auto	= NEW.nr_sequencia;

  insert	into relatorio_auto_param(
    nr_sequencia,
    nr_seq_rel_auto,
    cd_parametro,
    dt_atualizacao,
    nm_usuario,
    ds_valor)
  SELECT	nextval('relatorio_auto_param_seq'),
    NEW.nr_sequencia,
    cd_parametro,
    LOCALTIMESTAMP,
    NEW.nm_usuario,
    vl_padrao
  from	relatorio_parametro
  where	nr_seq_relatorio	= NEW.NR_SEQ_RELATORIO;

  IF NEW.IE_EXPORTAR_DOCUMENTO = 'S' THEN

    DS_TABLES_W := DOC_EXPORT_AUTO_PKG.GET_REPORT_TABLES(NEW.NR_SEQ_RELATORIO, null, null, null, null, null, null);

  ELSIF OLD.IE_EXPORTAR_DOCUMENTO = 'S' THEN

    DELETE FROM DOC_EXPORT_MONIT WHERE NR_SEQ_AUTO_IMP = NEW.NR_SEQUENCIA;

  END IF;

ELSIF coalesce(OLD.IE_EXPORTAR_DOCUMENTO, 'N') <> coalesce(NEW.IE_EXPORTAR_DOCUMENTO, 'N') THEN

  IF NEW.IE_EXPORTAR_DOCUMENTO = 'S' THEN

    DS_TABLES_W := DOC_EXPORT_AUTO_PKG.GET_REPORT_TABLES(NEW.NR_SEQ_RELATORIO, null, null, null, null, null, null);

  ELSE

    DELETE FROM DOC_EXPORT_MONIT WHERE NR_SEQ_AUTO_IMP = NEW.NR_SEQUENCIA;

  END IF;

end if;

IF DS_TABLES_W IS NOT NULL THEN

  DELETE FROM DOC_EXPORT_MONIT WHERE NR_SEQ_AUTO_IMP = NEW.NR_SEQUENCIA;

  OPEN C_TABLES(DS_TABLES_W);
  LOOP
    FETCH C_TABLES BULK COLLECT INTO R_TABLES LIMIT 100;
    EXIT WHEN R_TABLES.COUNT = 0;

    FOR i IN R_TABLES.FIRST..R_TABLES.LAST LOOP
      CALL DOC_EXPORT_AUTO_PKG.INSERT_DOC_MONIT(NEW.NR_SEQUENCIA, R_TABLES(i));
    END LOOP;

  END LOOP;
  CLOSE C_TABLES;

END IF;

exception
	when others then
	null;
end;

END IF;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_relatorio_auto_imp_atual_after() FROM PUBLIC;

CREATE TRIGGER relatorio_auto_imp_atual_after
	AFTER INSERT OR UPDATE ON relatorio_auto_imp FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_relatorio_auto_imp_atual_after();

