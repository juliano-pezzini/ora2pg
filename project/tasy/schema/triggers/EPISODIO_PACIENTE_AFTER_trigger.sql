-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS episodio_paciente_after ON episodio_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_episodio_paciente_after() RETURNS trigger AS $BODY$
declare
reg_integracao_p			gerar_int_padrao.reg_integracao;
qt_reg_w				bigint;
ie_inpatient_w			varchar(1);
qt_eventos_w			bigint;
ie_status_w  			varchar(1);
nm_usuario_w 			varchar(200);
qt_evt_case_status_w		bigint	:= 0;
nr_sequencia_w			varchar(35);
ie_tipo_old_w			tipo_episodio.ie_tipo%type;
ie_tipo_new_w			tipo_episodio.ie_tipo%type;
ie_relevante_drg_w		diagnostico_doenca.ie_relevante_drg%type default 'N';
BEGIN
  BEGIN

BEGIN
select	count(1) qt_movement,
	coalesce(max(CASE WHEN get_case_encounter_type(a.nr_seq_episodio, NEW.nr_seq_tipo_episodio, a.nr_atendimento, a.ie_tipo_atendimento)='1' THEN  'S' END ), 'N') ie_inpatient
into STRICT	qt_reg_w,
	ie_inpatient_w
from	atendimento_paciente a,
	atend_paciente_unidade b
where	a.nr_atendimento = b.nr_atendimento
and	a.nr_seq_episodio = coalesce(NEW.nr_sequencia, OLD.nr_sequencia);
exception
when others then
	qt_reg_w	:=	0;
end;

if (qt_reg_w > 0) then
	if (ie_inpatient_w = 'S') then
		BEGIN
		if	((TG_OP = 'DELETE') or (TG_OP = 'UPDATE' AND OLD.dt_cancelamento is null AND NEW.dt_cancelamento is not null)) then
			reg_integracao_p.ie_operacao		:=	'E';
		elsif (TG_OP = 'UPDATE') and (NEW.dt_episodio = OLD.dt_episodio) then
			reg_integracao_p.ie_operacao		:=	'A';
		else	
			reg_integracao_p.ie_operacao		:=	'X';
		end if;

		if (reg_integracao_p.ie_operacao <> 'X') then
			reg_integracao_p.ie_status		:=	'P';
			reg_integracao_p.cd_pessoa_fisica	:=	coalesce(NEW.cd_pessoa_fisica,OLD.cd_pessoa_fisica);

			reg_integracao_p := gerar_int_padrao.gravar_integracao('106', coalesce(NEW.nr_sequencia,OLD.nr_sequencia), coalesce(obter_usuario_ativo, coalesce(NEW.nm_usuario, OLD.nm_usuario)), reg_integracao_p);
		end if;
		end;
	else
		reg_integracao_p.ie_operacao		:=	'A';
		reg_integracao_p.ie_status		:=	'P';
		reg_integracao_p.cd_pessoa_fisica	:=	coalesce(NEW.cd_pessoa_fisica,OLD.cd_pessoa_fisica);

		if (coalesce(NEW.ds_observacao,'NULL') <> coalesce(OLD.ds_observacao,'NULL')) and (NEW.dt_episodio = OLD.dt_episodio) then
			reg_integracao_p := gerar_int_padrao.gravar_integracao('120', coalesce(NEW.nr_sequencia,OLD.nr_sequencia), coalesce(obter_usuario_ativo,coalesce(NEW.nm_usuario, OLD.nm_usuario)), reg_integracao_p);
		end if;
	end if;
end if;

if (TG_OP = 'INSERT') then
	ie_status_w := 'P';
	nm_usuario_w:= NEW.nm_usuario;
elsif (TG_OP = 'UPDATE') then
	BEGIN
	if (OLD.dt_fim_episodio is not null and NEW.dt_fim_episodio is null) then
		ie_status_w := 'P';
		nm_usuario_w:= NEW.nm_usuario;
	elsif (OLD.dt_fim_episodio is null and NEW.dt_fim_episodio is not null) then
		ie_status_w := 'F';		
		nm_usuario_w:= NEW.nm_usuario_encerramento;
	elsif (OLD.dt_cancelamento is null and NEW.dt_cancelamento is not null) then
		ie_status_w := 'C';		
		nm_usuario_w:= NEW.nm_usuario_cancelamento;
	end if;
	
	if (coalesce(NEW.nr_seq_tipo_episodio, 0) <> coalesce(OLD.nr_seq_tipo_episodio,0)) then
		BEGIN
			select	coalesce(max(ie_tipo),'0')
			into STRICT	ie_tipo_new_w
			from	tipo_episodio
			where	nr_sequencia = NEW.nr_seq_tipo_episodio;
		
			select	coalesce(max(ie_tipo),'0')
			into STRICT	ie_tipo_old_w
			from	tipo_episodio
			where	nr_sequencia = OLD.nr_seq_tipo_episodio;
		
			if	(ie_tipo_new_w = '1' AND ie_tipo_old_w <> '1') then
				BEGIN
					ie_relevante_drg_w := 'S';
					reg_integracao_p.ie_operacao	:=	'I';
					reg_integracao_p.ie_status		:=	'A';
					reg_integracao_p.cd_pessoa_fisica	:=	NEW.cd_pessoa_fisica;

					reg_integracao_p := gerar_int_padrao.gravar_integracao('220', NEW.nr_sequencia, coalesce(obter_usuario_ativo,NEW.nm_usuario), reg_integracao_p);
				end;
			elsif	(ie_tipo_new_w <> '1' AND ie_tipo_old_w = '1') then
				update	intpd_fila_transmissao
				set	ie_status = 'S',
					dt_atualizacao = LOCALTIMESTAMP,
					ds_log = 'CANCELED'
				where	ie_evento = '220'
				and	coalesce(ie_status, 'X') not in ('S')
				and	nr_seq_documento = NEW.nr_sequencia;
			end if;
		
			update 	diagnostico_doenca
			set 	ie_diag_princ_episodio = 'N', 
					ie_diag_princ_depart = 'N', 
					ie_diag_obito = 'N', 
					ie_diag_alta = 'N', 
					ie_diag_cirurgia = 'N', 
					ie_diag_pre_cir = 'N', 
					ie_diag_trat_cert = 'N', 
					ie_diag_admissao = 'N', 
					ie_status_diag = 'N', 
					ie_diag_referencia = 'N', 
					ie_diag_cronico = 'N', 
					ie_diag_trat_especial = 'N',
					ie_relevante_drg = ie_relevante_drg_w
			where 	nr_atendimento in (	SELECT 	a.nr_atendimento 
										from 	atendimento_paciente a       
										where 	a.nr_seq_episodio = NEW.nr_sequencia)									
			and		dt_inativacao is null;
									
			update 	diagnostico_doenca_depart
			set 	ie_diag_princ_episodio = 'N', 
					ie_diag_princ_depart = 'N', 
					ie_diag_obito = 'N', 
					ie_diag_alta = 'N', 
					ie_diag_cirurgia = 'N', 
					ie_diag_pre_cir = 'N', 
					ie_diag_trat_cert = 'N', 
					ie_diag_admissao = 'N',
					ie_diag_referencia = 'N', 
					ie_diag_cronico = 'N', 
					ie_diag_trat_especial = 'N'					
			where 	nr_atendimento in (	SELECT 	a.nr_atendimento 
										from 	atendimento_paciente a       
										where 	a.nr_seq_episodio = NEW.nr_sequencia);
		end;
	end if;

	end;
end if;

if	((TG_OP = 'INSERT') or (TG_OP = 'UPDATE')) then
	if (ie_status_w is not null) then 
		insert into episodio_paciente_status(
			nr_sequencia,
			nr_seq_episodio,
			dt_atualizacao,
			nm_usuario,
			ie_status,
			dt_status)
		values (	nextval('episodio_paciente_status_seq'),
			NEW.nr_sequencia,
			LOCALTIMESTAMP,
			coalesce(nm_usuario_w, NEW.nm_usuario),
			ie_status_w,
			LOCALTIMESTAMP);
		end if;

	if (wheb_usuario_pck.get_ie_executar_trigger = 'S') and
		((OLD.dt_fim_episodio is null 		and NEW.dt_fim_episodio is not null) or (OLD.dt_fim_episodio is not null 	and NEW.dt_fim_episodio is null) or (OLD.dt_cancelamento is null 		and NEW.dt_cancelamento is not null) or (OLD.dt_cancelamento is not null 	and NEW.dt_cancelamento is null)) then
		BEGIN
		select	1
		into STRICT	qt_eventos_w
		from	intpd_eventos
		where	ie_evento	= '401'
		and	ie_situacao	= 'A'  LIMIT 1;
		exception
		when others then
			qt_eventos_w	:= 0;
		end;		
		
		if (qt_eventos_w > 0) and (obter_se_atend_finalizado(NEW.nr_sequencia, null, null) = 'S') then	
			reg_integracao_p.nr_seq_agrupador	:= NEW.cd_pessoa_fisica;
			reg_integracao_p.cd_pessoa_fisica	:= NEW.cd_pessoa_fisica;
			reg_integracao_p.ie_status		:= 'P';
			reg_integracao_p.ie_operacao	:= 'A';
			nr_sequencia_w			:= NEW.nr_sequencia;
			
			reg_integracao_p := gerar_int_padrao.gravar_integracao('401', nr_sequencia_w, NEW.nm_usuario, reg_integracao_p);
		end if;
	end if;

end if;

  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_episodio_paciente_after() FROM PUBLIC;

CREATE TRIGGER episodio_paciente_after
	AFTER INSERT OR UPDATE OR DELETE ON episodio_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_episodio_paciente_after();

