-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS laudo_paciente_update ON laudo_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_laudo_paciente_update() RETURNS trigger AS $BODY$
DECLARE
nr_seq_prescricao_w  	  integer;
total_w                 bigint;
acao_w                  varchar(11);
total_canc_w            bigint;
ie_status_exec_w  		  varchar(3);
ie_adic_pasta_medico_w    varchar(1);
ie_medico_w    		 	  varchar(1);
cd_medico_w    			  varchar(10);
ie_status_execucao_w  	  varchar(3);
ie_funcao_medico_w  	  varchar(3);
qt_reg_w    			  smallint;
nr_seq_status_pato_w  	  bigint;
nm_usuario_liberacao_w    varchar(15);
ie_medico_ja_cadastrado_w varchar(1);
nr_seq_evento_w    		  bigint;
cd_pessoa_fisica_w  	  varchar(10);

qt_laudos_w    integer(10);
qt_registros_w integer(10);

nr_seq_regra_dupla_chec_w bigint;

ie_prelaudo_w      varchar(1);
ie_status_preLaudo varchar(3);
ie_encaminhado_w   varchar(1);
ie_modifica_laudo_liberado_w varchar(1);

cd_procedimento_w           bigint;
cd_tipo_procedimento_w      smallint;
ie_origem_proced_w          bigint;
nr_seq_proc_interno_w       bigint;
cd_setor_atendimento_w      integer;
ie_existe_regra_conferencia smallint;
ie_status_aprov             smallint;

qt_regra_wl_exame_w			wl_regra_item.qt_tempo_normal%type;
nr_seq_regra_w				wl_regra_item.nr_sequencia%type;
qt_horas_marcar_ciente_w	bigint;
nr_seq_tipo_adm_fat_atd_w	atendimento_paciente.nr_seq_tipo_admissao_fat%type;
ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;
nr_seq_episodio_w			atendimento_paciente.nr_seq_episodio%type;
ie_gerar_pendencia_tl_w		subtipo_episodio.ie_gerar_pendencia%type;
cd_estabelecimento_w            prescr_medica.nr_prescricao%type;
count_w         integer;


c01 CURSOR FOR
  SELECT a.nr_seq_evento
  FROM   regra_envio_sms a
  WHERE  a.ie_evento_disp = 'LLREP'
  AND    coalesce(a.ie_situacao,'A') = 'A';

c02 CURSOR FOR
  SELECT a.nr_seq_evento
  FROM   regra_envio_sms a
  WHERE  a.ie_evento_disp = 'DCDL'
  AND    coalesce(a.ie_situacao,'A') = 'A';

c03 CURSOR FOR
  SELECT a.nr_seq_evento
  FROM   regra_envio_sms a
  WHERE  a.ie_evento_disp = 'AELP'
  AND    coalesce(a.ie_situacao,'A') = 'A';

c04 CURSOR FOR
	SELECT	coalesce(b.qt_tempo_normal, 0),
			coalesce(b.nr_sequencia, 0)
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = 'EN'
								and		x.ie_situacao = 'A');
BEGIN
  BEGIN
  IF (wheb_usuario_pck.get_ie_executar_trigger  = 'N') THEN
    GOTO Final;
  END IF;

  select  count(1)
          into STRICT  count_w
          from  intpd_eventos a,
              intpd_eventos_sistema b
          where a.nr_sequencia = b.nr_seq_evento
          and   a.ie_evento = 162
          and   a.ie_situacao = 'A'
          and   b.ie_situacao = 'A'  LIMIT 1;
      if (count_w>0) then

         select cd_estabelecimento
         into STRICT cd_estabelecimento_w
         from prescr_medica pm
         where pm.nr_prescricao = NEW.nr_prescricao;

        CALL wheb_usuario_pck.set_cd_estabelecimento(cd_estabelecimento_w);
      end if;


  SELECT coalesce(obter_regra_laudo_dupla_chec(wheb_usuario_pck.get_cd_estabelecimento, wheb_usuario_pck.get_cd_perfil), 0)
  INTO STRICT   nr_seq_regra_dupla_chec_w
;

  IF (nr_seq_regra_dupla_chec_w > 0) THEN
    SELECT coalesce(MAX(qt_laudos),0),
		   coalesce(MAX(qt_registros),0)
    INTO STRICT   qt_laudos_w,
           qt_registros_w
    FROM   regra_laudo_dupla_chec
    WHERE  nr_sequencia = nr_seq_regra_dupla_chec_w;

    IF (qt_laudos_w > 0) AND (OLD.dt_aprovacao IS NULL) AND (NEW.dt_aprovacao IS NOT NULL) THEN
      IF (qt_laudos_w <=  (qt_registros_w + 1)) THEN
        UPDATE regra_laudo_dupla_chec
        SET    qt_registros =  0,
               dt_ultimo_envio = LOCALTIMESTAMP
        WHERE  nr_sequencia = nr_seq_regra_dupla_chec_w;

        NEW.dt_liberacao := NULL;
        NEW.nm_usuario_liberacao := NULL;
        NEW.ie_exige_seg_aprov := 'S';

        OPEN C02;
        LOOP
        FETCH C02 INTO
          nr_seq_evento_w;
        EXIT WHEN NOT FOUND; /* apply on C02 */
          BEGIN
            gerar_evento_laudo_lab(nr_seq_evento_w, NEW.nm_usuario, NEW.nr_prescricao, NULL, NULL, 'S', NEW.ds_titulo_laudo, 'L');
          END;
        END LOOP;
        CLOSE C02;
	  ELSE	
        UPDATE regra_laudo_dupla_chec
        SET    qt_registros = qt_registros_w + 1
        WHERE  nr_sequencia = nr_seq_regra_dupla_chec_w;
      END IF;
    END IF;
  END IF;

  IF (OLD.cd_pessoa_fisica IS NULL) AND (NEW.cd_pessoa_fisica IS NULL) AND (NEW.nr_atendimento IS NOT NULL) THEN
    SELECT MAX(cd_pessoa_fisica)
    INTO STRICT   cd_pessoa_fisica_w
    FROM   atendimento_paciente
    WHERE  nr_atendimento = NEW.nr_atendimento;

	NEW.cd_pessoa_fisica := cd_pessoa_fisica_w;
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_fim_digitacao IS NULL) AND
     ((NEW.dt_liberacao IS NOT NULL) or (NEW.dt_aprovacao IS NOT NULL) OR (NEW.dt_seg_aprovacao IS NOT NULL)) THEN
    NEW.dt_fim_digitacao  := LOCALTIMESTAMP;
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_liberacao IS NULL) AND (NEW.dt_aprovacao IS NULL) AND (NEW.dt_fim_digitacao IS NULL) THEN
    UPDATE prescr_procedimento a
    SET    a.ie_status_execucao = '26',
           a.nm_usuario = NEW.nm_usuario
    WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
								FROM   prescr_procedimento b,
									   procedimento_paciente c
								WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								AND    b.nr_prescricao = c.nr_prescricao
								AND    c.nr_laudo = NEW.nr_sequencia)
	AND ((a.ie_status_execucao = '30') OR (a.ie_status_execucao = '36') OR (a.ie_status_execucao = '40'));
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_liberacao IS NULL) AND (NEW.dt_aprovacao IS NULL) AND (NEW.dt_seg_aprovacao IS NULL) AND (NEW.dt_envelopado IS NULL) AND (NEW.dt_fim_digitacao IS NOT NULL) THEN
    SELECT coalesce(MAX(ie_prelaudo), 'N')
    INTO STRICT   ie_prelaudo_w
    FROM   parametro_cdi
    WHERE  cd_estabelecimento = obter_estabelecimento_ativo;

    IF (ie_prelaudo_w = 'N') THEN
	  ie_status_preLaudo := '30';
    ELSE
	  SELECT MAX(ie_status_execucao)
      INTO STRICT   ie_status_execucao_w
      FROM   prescr_procedimento a
      WHERE  a.nr_prescricao = NEW.nr_prescricao
      AND    a.nr_sequencia  = NEW.nr_seq_prescricao;
	
	  SELECT coalesce(MAX(ie_encaminhado), 'N')
	  INTO STRICT   ie_encaminhado_w
	  FROM   laudo_paciente_compl
	  WHERE  nr_seq_laudo = NEW.nr_sequencia;

	  IF (ie_status_execucao_w = '26' AND ie_encaminhado_w = 'N') THEN
	    ie_status_preLaudo := '28';
	  ELSIF (ie_status_execucao_w = '26') THEN
	    ie_status_preLaudo := '26';
	  ELSE
	    ie_status_preLaudo := '30';
	  END IF;
	
	END IF;
	
    UPDATE prescr_procedimento a
    SET    a.ie_status_execucao = ie_status_preLaudo,
           a.nm_usuario = NEW.nm_usuario
    WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
                                FROM   prescr_procedimento b,
									   procedimento_paciente c
								WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								AND    b.nr_prescricao = c.nr_prescricao
								AND    c.nr_laudo = NEW.nr_sequencia)
    AND ((a.ie_status_execucao = '26') OR (a.ie_status_execucao = '35') OR (a.ie_status_execucao = '37') OR (a.ie_status_execucao = '38') OR (a.ie_status_execucao = '40') OR (a.ie_status_execucao = '45'));


    SELECT MAX(nr_sequencia)
    INTO STRICT   nr_seq_status_pato_w
    FROM   proced_patologia_status
    WHERE  ie_status_patologia = 'LL';

    IF (NEW.nr_prescricao IS NOT NULL) AND (NEW.nr_seq_prescricao IS NOT NULL) THEN
      IF (nr_seq_status_pato_w IS NOT NULL) THEN
        UPDATE prescr_procedimento
        SET    nr_seq_status_pato = nr_seq_status_pato_w,
               nm_usuario = NEW.nm_usuario
        WHERE  nr_prescricao = NEW.nr_prescricao
        AND  nr_sequencia = NEW.nr_seq_prescricao;
      END IF;
    END IF;
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_liberacao IS NULL) AND (NEW.dt_aprovacao IS NOT NULL) THEN
    UPDATE prescr_procedimento a
    SET    a.ie_status_execucao = '35',
		   a.nm_usuario = NEW.nm_usuario
	WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
								FROM   prescr_procedimento b,
									   procedimento_paciente c
								WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								AND    b.nr_prescricao = c.nr_prescricao
								AND    c.nr_laudo = NEW.nr_sequencia);
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_liberacao IS NOT NULL) AND (OLD.dt_liberacao IS NULL) THEN
	BEGIN
		IF (NEW.nr_seq_prescricao IS NOT NULL) THEN
		BEGIN 
			SELECT max(prescr_proc.cd_procedimento),
				 max(proc.cd_tipo_procedimento),
				 max(proc.ie_origem_proced),
				 max(prescr_proc.nr_seq_proc_interno),
				 max(prescr_proc.cd_setor_atendimento)
			INTO STRICT   cd_procedimento_w,
				   cd_tipo_procedimento_w,
				   ie_origem_proced_w,
				   nr_seq_proc_interno_w,
				   cd_setor_atendimento_w
			FROM   prescr_procedimento prescr_proc,
				   procedimento proc
			WHERE  prescr_proc.cd_procedimento = proc.cd_procedimento
			AND    prescr_proc.ie_origem_proced = proc.ie_origem_proced
			AND    prescr_proc.nr_prescricao = NEW.nr_prescricao
			AND    prescr_proc.nr_sequencia = NEW.nr_seq_prescricao;
				

			SELECT coalesce(MAX(1), 0)
			INTO STRICT   ie_existe_regra_conferencia
			FROM   regra_conferencia_laudo
			WHERE  coalesce(cd_estabelecimento, obter_estabelecimento_ativo) = obter_estabelecimento_ativo
			AND    coalesce(cd_procedimento, coalesce(cd_procedimento_w, 0)) = coalesce(cd_procedimento_w, 0)
			AND    coalesce(cd_tipo_procedimento, coalesce(cd_tipo_procedimento_w, 0)) = coalesce(cd_tipo_procedimento_w, 0)
			AND    coalesce(ie_origem_proced, coalesce(ie_origem_proced_w, 0)) = coalesce(ie_origem_proced_w, 0)
			AND    coalesce(nr_seq_proc_interno, coalesce(nr_seq_proc_interno_w, 0)) = coalesce(nr_seq_proc_interno_w, 0)
			AND    coalesce(cd_setor_atendimento, coalesce(cd_setor_atendimento_w, 0)) = coalesce(cd_setor_atendimento_w, 0)
			AND    coalesce(ie_ativo, 'N') = 'S';
			
			if (NEW.nr_atendimento is not null) then
			
				select	max(nr_seq_tipo_admissao_fat),
						max(ie_tipo_atendimento),
						max(nr_seq_episodio)
				into STRICT	nr_seq_tipo_adm_fat_atd_w,
						ie_tipo_atendimento_w,
						nr_seq_episodio_w
				from	atendimento_paciente
				where	nr_atendimento = NEW.nr_atendimento;
			
			end if;
			
			open c04;
			loop
			fetch c04 into
			qt_regra_wl_exame_w,
			nr_seq_regra_w;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				BEGIN
					if (qt_regra_wl_exame_w > 0 and obter_se_regra_geracao(nr_seq_regra_w,nr_seq_episodio_w,nr_seq_tipo_adm_fat_atd_w) = 'S') then
					
						-- Gera tarefa na funcao Lista de Tarefas (Task List) como pendencia para o usuario informar que estq ciente do exame

						CALL wl_gerar_finalizar_tarefa('EN','I',NEW.nr_atendimento,NEW.cd_pessoa_fisica,NEW.nm_usuario,
									coalesce(NEW.dt_liberacao,LOCALTIMESTAMP)+(qt_regra_wl_exame_w/24),
									'N',null,null,null,NEW.nr_prescricao,NEW.nr_seq_prescricao,null,null,null,null,nr_seq_regra_w,null,null,null,null,null,null,null,NEW.dt_liberacao,nr_seq_episodio_w);
					end if;
				end;
			end loop;
				close c04;
		END;
		ELSE
		ie_existe_regra_conferencia := 0;
		END IF;

		IF ie_existe_regra_conferencia > 0 THEN
		ie_status_aprov := '37';
		ELSE
		ie_status_aprov := '40';
		END IF;

		UPDATE prescr_procedimento a
		SET    a.ie_status_execucao = ie_status_aprov,
			 a.nm_usuario = NEW.nm_usuario
		WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
								  FROM   prescr_procedimento b,
										 procedimento_paciente c
								  WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								  AND  b.nr_prescricao  = c.nr_prescricao
								  AND  c.nr_laudo       = NEW.nr_sequencia);



		SELECT MAX(ie_status_execucao)
		INTO STRICT   ie_status_execucao_w
		FROM   prescr_procedimento a
		WHERE  a.nr_prescricao = NEW.nr_prescricao
		AND    a.nr_sequencia  = NEW.nr_seq_prescricao;

		IF (ie_status_execucao_w <> ie_status_aprov) THEN
		UPDATE prescr_procedimento a
		SET    a.ie_status_execucao = ie_status_aprov,
			   a.nm_usuario = NEW.nm_usuario
		WHERE  a.nr_prescricao = NEW.nr_prescricao
		AND    a.nr_sequencia IN (SELECT b.nr_sequencia_prescricao
								  FROM   procedimento_paciente b
								  WHERE  b.nr_prescricao = a.nr_prescricao
								  AND    b.nr_prescricao = NEW.nr_prescricao
								  AND    b.nr_sequencia_prescricao = a.nr_sequencia
								  AND    b.nr_sequencia_prescricao = NEW.nr_seq_prescricao);
		END IF;


		IF (NEW.ie_gerar_comunic = 'S') THEN
		CALL gerar_alerta_laudo_lib(NEW.nr_sequencia, NEW.nr_atendimento, NEW.nm_usuario, 'N');
		END IF;

    END;
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_liberacao IS NOT NULL) AND (NEW.dt_envelopado IS NULL) AND (OLD.dt_envelopado IS NOT NULL) THEN
    IF (NEW.dt_conferencia IS NULL) THEN
      UPDATE prescr_procedimento a
      SET    a.ie_status_execucao = '40',
             a.nm_usuario = NEW.nm_usuario
      WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
								  FROM   prescr_procedimento b,
										 procedimento_paciente c
								  WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								  AND    b.nr_prescricao = c.nr_prescricao
								  AND    c.nr_laudo = NEW.nr_sequencia);
    ELSE
      UPDATE prescr_procedimento a
      SET    a.ie_status_execucao = '43',
			 a.nm_usuario = NEW.nm_usuario
	  WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
								  FROM   prescr_procedimento b,
										 procedimento_paciente c
								  WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								  AND  b.nr_prescricao = c.nr_prescricao
								  AND  c.nr_laudo = NEW.nr_sequencia);
	END IF;
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_liberacao IS NOT NULL) AND (OLD.dt_conferencia IS NOT NULL) AND (NEW.dt_conferencia IS NULL) THEN
	UPDATE prescr_procedimento a
    SET    a.ie_status_execucao = '40',
           a.nm_usuario = NEW.nm_usuario
    WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
								FROM   prescr_procedimento b,
									   procedimento_paciente c
								WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								AND  b.nr_prescricao = c.nr_prescricao
								AND  c.nr_laudo = NEW.nr_sequencia);
  END IF;

  IF (NEW.dt_conferencia IS NOT NULL) AND (NEW.dt_liberacao IS NOT NULL) AND (OLD.dt_liberacao IS NULL) THEN
    NEW.dt_conferencia := NULL;
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_liberacao IS NOT NULL) AND (NEW.dt_conferencia IS NOT NULL) AND (OLD.dt_conferencia IS NULL) THEN
    UPDATE prescr_procedimento a
    SET    a.ie_status_execucao = '43',
           a.nm_usuario = obter_usuario_ativo
    WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
                                FROM   prescr_procedimento b,
									   procedimento_paciente c
								WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								AND    b.nr_prescricao = c.nr_prescricao
								AND    c.nr_laudo = NEW.nr_sequencia);
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND (NEW.dt_liberacao IS NOT NULL) AND (NEW.dt_envelopado IS NOT NULL) AND (OLD.dt_envelopado IS NULL) THEN
    OPEN C03;
    LOOP
    FETCH C03 INTO
      nr_seq_evento_w;
    EXIT WHEN NOT FOUND; /* apply on C03 */
      BEGIN
        gerar_evento_laudo_lab(nr_seq_evento_w, NEW.nm_usuario, NEW.nr_prescricao, NULL, NULL, 'S', NEW.ds_titulo_laudo, 'L');
      END;
    END LOOP;
    CLOSE C03;

    UPDATE prescr_procedimento a
    SET    a.ie_status_execucao = '45',
           a.nm_usuario = NEW.nm_usuario
	WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
								FROM   prescr_procedimento b,
									   procedimento_paciente c
								WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								AND    b.nr_prescricao = c.nr_prescricao
								AND    c.nr_laudo = NEW.nr_sequencia);
  END IF;

  IF (NEW.dt_cancelamento IS NULL) AND /* rafael em 23/07/2007 OS61842 */

     (NEW.dt_liberacao IS NOT NULL) THEN
    SELECT coalesce(MAX(nr_sequencia_prescricao),0)
    INTO STRICT   nr_seq_prescricao_w
    FROM   procedimento_paciente
    WHERE  nr_prescricao = NEW.nr_prescricao
    AND    nr_laudo = NEW.nr_sequencia;

    IF (nr_seq_prescricao_w > 0) THEN
      CALL Gerar_aviso_result_prescr(NEW.nr_prescricao, nr_seq_prescricao_w, NULL, NULL, NULL);

	  OPEN c01;
      LOOP
      FETCH c01 INTO
        nr_seq_evento_w;
      EXIT WHEN NOT FOUND; /* apply on c01 */
        CALL gerar_evento_laudo_lab(nr_seq_evento_w,NEW.nm_usuario,NEW.nr_prescricao,NULL,NULL,'S',NEW.ds_titulo_laudo,'L');
      END LOOP;
      CLOSE	c01;
    END IF;
  END IF;

  IF (OLD.dt_cancelamento IS NULL) AND (NEW.dt_cancelamento IS NOT NULL) THEN
    /* obter status execucao */


    SELECT CASE WHEN COUNT(*)=0 THEN '20'  ELSE '25' END
    INTO STRICT   ie_status_exec_w
    FROM   prescr_proc_ditado b,
		   prescr_procedimento a
	WHERE  b.nr_seq_prescr_proc = a.nr_seq_interno
	AND    a.nr_seq_interno IN (SELECT b.nr_seq_interno
								FROM   prescr_procedimento b,
									   procedimento_paciente c
								WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								AND    b.nr_prescricao = c.nr_prescricao
								AND    c.nr_laudo = NEW.nr_sequencia);

	/* atualizar status execucao */


	UPDATE prescr_procedimento a
	SET    a.ie_status_execucao = ie_status_exec_w,
		   a.nm_usuario = NEW.nm_usuario
	WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
								FROM   prescr_procedimento b,
									   procedimento_paciente c
								WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
								AND    b.nr_prescricao = c.nr_prescricao
								AND    c.nr_laudo = NEW.nr_sequencia);

	/* atualizar vinculo procedimento */


	UPDATE procedimento_paciente
	SET    nr_laudo  = NULL
	WHERE  nr_laudo = NEW.nr_sequencia;
  END IF;

  IF (OLD.dt_cancelamento IS NOT NULL) AND (NEW.dt_cancelamento IS NULL) THEN
  /* obter status execucao */


    IF (NEW.nr_seq_proc IS NOT NULL) THEN
      BEGIN
        SELECT MAX(ie_status_execucao)
        INTO STRICT   ie_status_execucao_w
        FROM   prescr_procedimento a
        WHERE  a.nr_prescricao = NEW.nr_prescricao
        AND    a.nr_sequencia  = NEW.nr_seq_prescricao;

        SELECT MAX(a.ie_status_exec)
        INTO STRICT   ie_status_exec_w
        FROM   prescr_proc_status a
        WHERE  nr_prescricao = NEW.nr_prescricao
        AND    a.nr_seq_prescr IN (SELECT  b.nr_sequencia_prescricao
								   FROM  procedimento_paciente b
								   WHERE  b.nr_sequencia = NEW.nr_seq_proc)
		AND  a.ie_status_exec <> ie_status_execucao_w
		AND  a.nr_seq_funcao = 28
		AND  a.dt_atualizacao_nrec  = (SELECT MAX(x.dt_atualizacao_nrec)
									   FROM   prescr_proc_status x
									   WHERE  x.nr_prescricao =  a.nr_prescricao
									   AND    a.nr_seq_funcao = 28
									   AND    x.nr_seq_prescr IN (SELECT g.nr_sequencia_prescricao
																  FROM   procedimento_paciente g
																  WHERE  g.nr_sequencia = NEW.nr_seq_proc)
									   AND  x.ie_status_exec <> ie_status_execucao_w);
		/* atualizar status execucao */


	    UPDATE prescr_procedimento a
        SET    a.ie_status_execucao = ie_status_exec_w,
			   a.nm_usuario = NEW.nm_usuario
		WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
									FROM   prescr_procedimento b,
										   procedimento_paciente c
									WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
									AND    b.nr_prescricao = c.nr_prescricao
									AND    c.nr_laudo = NEW.nr_sequencia);

		/* atualizar vinculo procedimento */


		UPDATE procedimento_paciente	
		SET    nr_laudo = NEW.nr_sequencia
		WHERE  nr_sequencia = NEW.nr_seq_proc;
	  END;
	END IF;
  END IF;

  IF (OLD.nm_usuario_liberacao IS NULL) AND (NEW.nm_usuario_liberacao IS NOT NULL) THEN
    nm_usuario_liberacao_w := NEW.nm_usuario_liberacao;
  ELSIF (OLD.nm_usuario_seg_aprov IS NULL) AND (NEW.nm_usuario_seg_aprov IS NOT NULL) THEN
    nm_usuario_liberacao_w := NEW.nm_usuario_aprovacao;
  END IF;

  /* almir em 01/07/2008 OS96910 */


  IF (nm_usuario_liberacao_w IS NOT NULL) THEN
    ie_adic_pasta_medico_w := coalesce(obter_valor_param_usuario(28, 97, obter_perfil_ativo, nm_usuario_liberacao_w, 0),'N');
    ie_funcao_medico_w := coalesce(obter_valor_param_usuario(28, 114, obter_perfil_ativo, nm_usuario_liberacao_w, 0),'0');

    IF (ie_adic_pasta_medico_w = 'S') THEN
      cd_medico_w := obter_pessoa_fisica_usuario(nm_usuario_liberacao_w,'C');

      BEGIN
        SELECT 'S'
        INTO STRICT   ie_medico_ja_cadastrado_w
        FROM   laudo_paciente_medico
        WHERE  cd_medico = cd_medico_w
        AND    nr_seq_laudo = NEW.nr_sequencia;
        EXCEPTION
          WHEN OTHERS THEN
            ie_medico_ja_cadastrado_w := 'N';
      END;

      ie_medico_w := coalesce(obter_se_medico(cd_medico_w,'M'),'N');

      IF (ie_medico_w = 'S') AND (ie_medico_ja_cadastrado_w = 'N') THEN
	    INSERT INTO laudo_paciente_medico(nr_sequencia,
										   cd_medico,
										   nr_seq_laudo,
										   dt_atualizacao,
										   nm_usuario,
										   dt_atualizacao_nrec,
										   nm_usuario_nrec,
										   ie_funcao_medico)
        VALUES (nextval('laudo_paciente_medico_seq'),
			   cd_medico_w,
			   NEW.nr_sequencia,
			   LOCALTIMESTAMP,
			   coalesce(nm_usuario_liberacao_w, NEW.nm_usuario),
			   LOCALTIMESTAMP,
			   coalesce(nm_usuario_liberacao_w, NEW.nm_usuario),
			   CASE WHEN ie_funcao_medico_w='0' THEN  NULL  ELSE ie_funcao_medico_w END );
	  END IF;
	END IF;
  END IF;

  IF (NEW.DT_SEG_APROVACAO IS NOT NULL) OR (NEW.dt_liberacao IS NOT NULL) THEN
    SELECT MAX(nr_sequencia)
    INTO STRICT   nr_seq_status_pato_w
    FROM   PROCED_PATOLOGIA_STATUS
    WHERE  IE_STATUS_PATOLOGIA = 'LB';

    IF (NEW.nr_prescricao IS NOT NULL) AND (NEW.nr_seq_prescricao IS NOT NULL) THEN
      IF (nr_seq_status_pato_w IS NOT NULL) THEN
        UPDATE prescr_procedimento a
        SET    a.nr_seq_status_pato = nr_seq_status_pato_w,
			   a.nm_usuario = NEW.nm_usuario
        WHERE  a.nr_seq_interno IN (SELECT b.nr_seq_interno
									FROM   prescr_procedimento b,
										   procedimento_paciente c
									WHERE  b.nr_sequencia = c.nr_sequencia_prescricao
									AND    b.nr_prescricao = c.nr_prescricao
									AND    c.nr_laudo = NEW.nr_sequencia);
	  END IF;
	END IF;
  END IF;

  IF (NEW.nr_seq_superior IS NULL) AND --Laudo em digitacao
     (NEW.dt_aprovacao IS NULL) AND (NEW.dt_seg_aprovacao IS NULL) AND (NEW.dt_liberacao IS NULL) AND (NEW.dt_cancelamento IS NULL) THEN
    IF (NEW.ie_status_laudo <> 'LM') OR (NEW.ie_status_laudo IS NULL) THEN
      NEW.ie_status_laudo := 'LD';
    END IF;
  ELSIF (NEW.nr_seq_superior IS NULL) AND --Laudo aprovacao parcial
        (NEW.dt_aprovacao IS NOT NULL) AND (NEW.dt_seg_aprovacao IS NULL) AND (NEW.dt_liberacao IS NULL) AND (NEW.dt_cancelamento IS NULL) THEN
    NEW.ie_status_laudo := 'LAP';
  ELSIF (NEW.nr_seq_superior IS NULL) AND --Laudo liberado
        (NEW.dt_liberacao IS NOT NULL) AND (NEW.dt_cancelamento IS NULL) THEN

    select coalesce(max(ie_modifica_laudo_liberado),'N')
    into STRICT ie_modifica_laudo_liberado_w
    from PARAMETRO_INTEGRACAO_PACS
    where cd_estabelecimento = obter_estabelecimento_ativo;

    if (ie_modifica_laudo_liberado_w = 'N') then    
      NEW.ie_status_laudo := 'LL';
    end if;
  ELSIF (NEW.nr_seq_superior IS NULL) AND --Laudo cancelado
        (NEW.dt_cancelamento IS NOT NULL) THEN
    NEW.ie_status_laudo := 'LC';
  ELSIF (NEW.nr_seq_superior IS NOT NULL) AND --AdCLOSEo em digitacao
        (NEW.dt_aprovacao IS NULL) AND (NEW.dt_seg_aprovacao IS NULL) AND (NEW.dt_liberacao IS NULL) AND (NEW.dt_cancelamento IS NULL) THEN
    NEW.ie_status_laudo := 'AD';
  ELSIF (NEW.nr_seq_superior IS NOT NULL) AND --AdCLOSEo aprovacao parcial
        (NEW.dt_aprovacao IS NOT NULL) AND (NEW.dt_seg_aprovacao IS NULL) AND (NEW.dt_liberacao IS NULL) AND (NEW.dt_cancelamento IS NULL) THEN
    NEW.ie_status_laudo := 'AAP';
  ELSIF (NEW.nr_seq_superior IS NOT NULL) AND --AdCLOSEo liberado
        (NEW.dt_liberacao IS NOT NULL) AND (NEW.dt_cancelamento IS NULL) THEN
    NEW.ie_status_laudo := 'AL';
  ELSIF (NEW.nr_seq_superior IS NOT NULL) AND --ANDCLOSEo cancelado
        (NEW.dt_cancelamento IS NOT NULL) THEN
    NEW.ie_status_laudo := 'AC';
  END IF;

  if ((OLD.dt_liberacao is not null) and (NEW.dt_liberacao is null) and (wheb_usuario_pck.is_evento_ativo(766) = 'S')) then
    Acao_W := 'Exclusao';
    CALL integrar_unimed_rs_ws(766, NEW.nr_prescricao, NEW.nr_seq_prescricao, NEW.nm_usuario, acao_w);
  end if;

  IF (NEW.dt_impressao IS NOT NULL) AND (OLD.dt_impressao IS NULL) THEN
    BEGIN
      INSERT INTO log_impressao_laudo(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				nr_seq_laudo,
				ie_tipo_laudo,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_observacao)
	  VALUES (nextval('log_impressao_laudo_seq'),
			  LOCALTIMESTAMP,
			  NEW.nm_usuario,
			  NEW.nr_sequencia,
			  'I',
			  LOCALTIMESTAMP,
			  NEW.nm_usuario,
			  obter_desc_expressao(290509) || '= ' || obter_funcao_ativa || ' - ' || obter_desc_expressao(717491) || '= '  || obter_perfil_ativo);
    EXCEPTION
	  WHEN OTHERS THEN
        NULL;
	END;
  END IF;

    IF (NEW.nr_exame <> OLD.nr_exame)THEN
      UPDATE prescr_procedimento 
      SET nr_seq_lab = NEW.nr_exame
      WHERE nr_prescricao = OLD.nr_prescricao AND 
            nr_sequencia = OLD.nr_seq_prescricao;
    END IF;

  <<Final>>
  qt_reg_w  := 0;
  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_laudo_paciente_update() FROM PUBLIC;

CREATE TRIGGER laudo_paciente_update
	BEFORE UPDATE ON laudo_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_laudo_paciente_update();

